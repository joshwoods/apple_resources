WEBVTT

00:00:23.960 --> 00:00:27.990
Ladies and gentlemen, please welcome
Senior Product Line Manager for

00:00:28.000 --> 00:00:32.090
Developer Products,
Wiley Hodges.

00:00:38.110 --> 00:00:40.470
So I want to welcome
everybody here today.

00:00:40.790 --> 00:00:43.260
Today, this Monday,
marks the beginning of my 12th

00:00:43.340 --> 00:00:46.000
week back at Apple after a
four and a half year absence.

00:00:46.000 --> 00:00:47.980
And what a 12th week!

00:00:48.000 --> 00:00:48.790
Geez.

00:00:49.020 --> 00:00:50.930
This is a really exciting
time to be back at Apple.

00:00:51.020 --> 00:00:54.760
I was lured back to the company
by the promise of something really

00:00:54.760 --> 00:00:57.000
great happening in developer tools.

00:00:57.080 --> 00:00:59.820
And hopefully this morning you
got a taste of that with what

00:00:59.820 --> 00:01:01.800
Steve showed in the keynote,
an Xcode.

00:01:02.000 --> 00:01:05.870
I personally was flabbergasted
by what was happening.

00:01:05.870 --> 00:01:09.440
I remember standing behind Steve Naroff's
chair in his office and getting

00:01:09.440 --> 00:01:11.960
a demo of Xcode a few weeks ago,
and just my jaw hitting

00:01:11.960 --> 00:01:14.070
the floor and thinking,
"This is so fantastic.

00:01:14.070 --> 00:01:17.000
I'm so excited." And that excitement
has just kept with me this whole time.

00:01:17.000 --> 00:01:19.850
And I want to share some
of that with you today.

00:01:20.020 --> 00:01:22.720
And we're going to start off
by introducing the person who

00:01:22.850 --> 00:01:26.000
has overseen this effort and
helped make this all possible.

00:01:26.000 --> 00:01:28.900
I am pleased to be able
to introduce to you Mr.

00:01:28.900 --> 00:01:32.000
Ted Goldstein, the Vice President for
Development Technologies at Apple.

00:01:32.000 --> 00:01:34.000
So thank you very much and welcome, Ted.

00:01:34.000 --> 00:01:36.000
And I want to shake Ted's hand.

00:01:36.000 --> 00:01:38.000
This is a great day.

00:01:38.000 --> 00:01:38.990
Thank you, Wiley.

00:01:39.000 --> 00:01:40.000
Thanks, Ted.

00:01:42.190 --> 00:01:48.720
So I think this is going to be
the first Nemo-free presentation.

00:01:48.720 --> 00:01:51.740
I like Nemo, but you know,
got to talk about something else.

00:01:51.800 --> 00:01:54.510
So let's talk about a great legacy.

00:01:54.650 --> 00:02:02.230
I think developer tools on Macintosh
have a great legacy in that we really do,

00:02:02.250 --> 00:02:07.970
are building on a number of truly
excellent and incredible systems.

00:02:09.170 --> 00:02:13.580
Developers have had extremely high
expectations because many of these

00:02:13.580 --> 00:02:16.070
systems have been just really fabulous.

00:02:16.230 --> 00:02:20.250
First, maybe not so fabulous,
but the Lisa development system,

00:02:20.250 --> 00:02:23.360
coming out in 1983 and '84,

00:02:23.980 --> 00:02:26.840
was soon followed very
quickly by Lightspeed Pascal.

00:02:27.100 --> 00:02:31.760
And Lightspeed Pascal really changed
the way people thought about programming

00:02:31.760 --> 00:02:37.950
because you could type a line of
text and immediately see it executed.

00:02:38.110 --> 00:02:42.240
The designers and founders of
Lightspeed really wanted that extremely

00:02:42.270 --> 00:02:47.240
interactive environment where you
could interactively develop the code

00:02:47.390 --> 00:02:51.530
and really feel the application come
into existence under your hand so that,

00:02:51.630 --> 00:02:54.680
in fact,
almost the tool itself disappeared

00:02:54.760 --> 00:02:55.720
out from underneath you.

00:02:55.960 --> 00:03:00.110
And that really is just what
I think of as the most important

00:03:00.220 --> 00:03:01.160
property of a great tool.

00:03:01.400 --> 00:03:04.360
One reason why we use the hammer is you
don't really think about the hammer.

00:03:04.360 --> 00:03:06.370
You don't know who the maker is.

00:03:06.550 --> 00:03:09.580
You just swing it and knock the nail in,
and it disappears from your

00:03:09.580 --> 00:03:13.260
existence because your brain is
focused on what you're building.

00:03:13.300 --> 00:03:16.440
Lightspeed Pascal was the first
system that actually made that happen.

00:03:16.580 --> 00:03:21.020
And I think it's an important part of the
legacy of development on the Macintosh.

00:03:21.330 --> 00:03:24.700
Because it was so well matched,
so well matched to the

00:03:24.700 --> 00:03:31.090
interactive experience that
the Macintosh offered in 1984.

00:03:32.090 --> 00:03:34.870
The next system that I think
was incredibly important and

00:03:34.870 --> 00:03:39.360
meaningful to Mac developers was
the Macintosh Programmers Workshop.

00:03:39.430 --> 00:03:41.780
Fabulous system, yes.

00:03:41.780 --> 00:03:44.810
It brought the full Unix kind
of command line sequence,

00:03:45.000 --> 00:03:47.220
but did it in a very
interactive environment,

00:03:47.220 --> 00:03:48.850
and it provided scale.

00:03:48.860 --> 00:03:54.910
People who could start development
in Lightspeed Pascal often found

00:03:54.950 --> 00:03:59.380
that they ran out of steam when the
applications became a certain size.

00:03:59.380 --> 00:04:02.600
And MPW was really great because
it allowed for small groups

00:04:02.600 --> 00:04:04.320
and teams to work together.

00:04:04.390 --> 00:04:06.890
But when it became larger
teams and larger groups,

00:04:06.920 --> 00:04:10.280
MPW really didn't help all that much,
and people found it

00:04:10.410 --> 00:04:12.850
falling down somewhat.

00:04:12.920 --> 00:04:16.570
I think one of the greatest systems
that brought the capabilities

00:04:16.680 --> 00:04:20.290
of the C language and such
that people were using in MPW,

00:04:20.360 --> 00:04:24.460
but brought it to the interactive
field was the Lightspeed C environment.

00:04:24.560 --> 00:04:27.360
Many, many applications were
written using a combination,

00:04:27.480 --> 00:04:29.570
living in Lightspeed C for
the development phase,

00:04:29.570 --> 00:04:30.540
but finally,
they were able to run in Lightspeed

00:04:30.540 --> 00:04:32.490
C for the development phase,
but finally, when you get to deploying,

00:04:32.490 --> 00:04:37.500
they switched back for shipping
the application using MPWC.

00:04:37.500 --> 00:04:40.890
And those two environments really ran
very nice and synergistically together.

00:04:43.170 --> 00:04:47.450
Think Reference, an important system,
provided great documentation,

00:04:47.520 --> 00:04:52.340
allowed for that interactive
feel and capability of knowing,

00:04:52.460 --> 00:04:56.610
to be able to navigate through
all the immense APIs that

00:04:56.950 --> 00:04:59.190
Apple was providing to you.

00:04:59.650 --> 00:05:01.400
I think one of the
most important systems,

00:05:01.400 --> 00:05:04.800
and clearly one that stands
to this day as the leader,

00:05:04.840 --> 00:05:07.270
is MetroWorks, C and C++.

00:05:08.540 --> 00:05:11.440
And really sets the standard,
and we respect that.

00:05:11.550 --> 00:05:16.870
Since for the last 10 years,
MPW has really become the gold standard

00:05:16.870 --> 00:05:20.420
in development on the Macintosh,
and it's really set the bar very high.

00:05:20.520 --> 00:05:22.080
And every time we look
and compare ourselves,

00:05:22.080 --> 00:05:25.190
we, of course,
compare ourselves to what MetroWorks

00:05:25.260 --> 00:05:28.540
and Code Warrior have done.

00:05:28.600 --> 00:05:32.440
But Apple also wants to make sure
that it's a player in this game.

00:05:32.480 --> 00:05:35.890
And we have, of course,
when we introduced Mac OS X,

00:05:36.110 --> 00:05:38.500
we brought back the Unix environment.

00:05:38.570 --> 00:05:42.150
We wanted a Unix-focused set
of tools with interactivity.

00:05:42.290 --> 00:05:43.920
And we have the
Apple Project Builder environment

00:05:44.190 --> 00:05:47.730
that we came out with in 1999.

00:05:48.030 --> 00:05:52.240
These systems and these tools,
Apple Project Builder,

00:05:52.400 --> 00:05:57.350
really harkens back in many
ways to MPW and to that whole

00:05:57.480 --> 00:06:00.560
command-line-oriented interface
with a wrapper of a very

00:06:00.560 --> 00:06:02.100
interactive feel on top of it.

00:06:02.240 --> 00:06:06.150
But you could certainly tell
that the interactive tools had

00:06:06.200 --> 00:06:07.070
a lot of different features.

00:06:07.200 --> 00:06:08.120
And the reason for that is
that they're not necessarily

00:06:08.120 --> 00:06:09.190
the same as the other things.

00:06:09.240 --> 00:06:10.200
They're not necessarily the
same as the other things.

00:06:10.200 --> 00:06:11.200
And so they're not necessarily
the same as the other things.

00:06:11.200 --> 00:06:12.200
They're not necessarily the
same as the other things.

00:06:13.450 --> 00:06:16.580
So we were challenged by
developers to do better.

00:06:16.760 --> 00:06:20.520
And last year we set a fairly
high rigorous standard for us,

00:06:20.840 --> 00:06:26.060
ourselves, that to actually do far better
in developing applications

00:06:26.060 --> 00:06:29.500
and to improve the program
productivity than ever before.

00:06:29.610 --> 00:06:34.350
And I think it's critically important,
critically important to say that today

00:06:34.420 --> 00:06:38.890
with Xcode we've made a tremendous step,
I believe, in the right direction.

00:06:39.590 --> 00:06:42.930
So, when we step back, we think,
what's the basic mission of

00:06:42.980 --> 00:06:45.060
what we're trying to accomplish?

00:06:45.120 --> 00:06:47.600
And that is to improve
programmer productivity.

00:06:47.640 --> 00:06:53.250
And we've actually decomposed the
problem into four basic things.

00:06:53.350 --> 00:06:57.260
First, you need to be able to
rapidly develop new ideas.

00:06:57.350 --> 00:06:59.460
Second,
you need to be able to get to your

00:06:59.460 --> 00:07:01.320
code and then get out of that way.

00:07:01.320 --> 00:07:03.010
You want that transparency.

00:07:03.190 --> 00:07:05.960
You want that tool to be
an extension of your hands.

00:07:06.080 --> 00:07:08.580
You want it to, you know,
not so that the tool itself

00:07:08.580 --> 00:07:11.030
is all that glorious,
although we're very happy for it to

00:07:11.100 --> 00:07:14.270
be a beautiful and aesthetic thing,
but we want you to be able to

00:07:14.270 --> 00:07:18.070
focus mostly on your applications,
because it's your applications, frankly,

00:07:18.090 --> 00:07:21.440
that we depend upon for our success,
and we recognize that.

00:07:21.440 --> 00:07:25.100
So, we want to take you to the places in
your code that is most important and

00:07:25.100 --> 00:07:28.260
critical to making things happen.

00:07:28.610 --> 00:07:31.500
The third is the XGUNry bugs.

00:07:31.500 --> 00:07:35.230
You need to be able to find your bugs
and to fix the problems that occur,

00:07:35.230 --> 00:07:37.550
to be able to extend the code
and to have that very interactive

00:07:37.560 --> 00:07:41.000
cycle that really goes all the
way back to Lightspeed Pascal.

00:07:41.130 --> 00:07:44.830
We think that this is a critical,
critical ingredient that you love

00:07:44.830 --> 00:07:47.710
about many of the development
environments on the Macintosh,

00:07:47.730 --> 00:07:51.200
and we wanted to strive for that
same type of experience with Xcode.

00:07:51.460 --> 00:07:55.180
You saw a taste of that in
Chris Espinoza's demo this morning.

00:07:55.610 --> 00:07:59.420
Finally, you need to be able to
manage large projects.

00:07:59.460 --> 00:08:02.450
Many of the applications that you've
written are in the millions of lines,

00:08:02.450 --> 00:08:04.380
in the tens of millions of lines of code.

00:08:04.430 --> 00:08:07.020
And applications that scale
that have large teams,

00:08:07.160 --> 00:08:11.430
teams spread over multiple continents,
and you need to be able to manage huge

00:08:11.440 --> 00:08:14.540
volumes of code and such altogether.

00:08:14.670 --> 00:08:17.510
And we think that that has been,
in some sense,

00:08:17.650 --> 00:08:20.430
a big place where Apple has
previously put a lot of its effort,

00:08:20.530 --> 00:08:24.200
because so many great third party
developers have put their effort in

00:08:24.200 --> 00:08:25.870
making that interactive experience.

00:08:26.020 --> 00:08:30.760
What we want to do is fuse all four
of these directions into one tool,

00:08:30.830 --> 00:08:34.090
into one experience for you.

00:08:36.540 --> 00:08:39.280
And so,
we begin with a new user interface.

00:08:39.330 --> 00:08:42.680
And that new UI, in some sense,
is inspired by the UIs that have

00:08:42.680 --> 00:08:45.780
worked for the Macintosh users.

00:08:45.880 --> 00:08:48.040
In fact, in many ways, you recognize,
of course,

00:08:48.040 --> 00:08:49.960
kind of an iTunes-like feel about it.

00:08:50.420 --> 00:08:54.090
iTunes and your music collection
may in fact be the largest

00:08:54.090 --> 00:08:56.380
corpus of data on your disk,
right?

00:08:56.380 --> 00:08:59.180
Much larger, perhaps,
even than the source code you manage.

00:08:59.300 --> 00:09:02.740
And yet you can sort it by group,
by genre, by artist,

00:09:02.740 --> 00:09:04.560
by how frequently you've listened to it.

00:09:04.670 --> 00:09:07.590
It has this wonderful feel that
you're just able to manipulate it.

00:09:07.840 --> 00:09:10.370
You're not doing SQL queries
to find the song,

00:09:10.560 --> 00:09:12.240
you're just clicking away and finding it.

00:09:12.240 --> 00:09:14.590
And it becomes a fabulous tool.

00:09:14.670 --> 00:09:18.160
And it was a great inspiration
for us to use this metaphor,

00:09:18.160 --> 00:09:21.880
and it has so worked extremely well
in many other of the new tools and

00:09:21.880 --> 00:09:24.940
applications coming from Apple,
that we thought, gee,

00:09:24.940 --> 00:09:30.030
here we have a great place to begin
a new user interface experience.

00:09:30.450 --> 00:09:34.580
But then, of course,
you're also used to speed.

00:09:34.580 --> 00:09:36.890
And this idea of rapid
builds and zero link,

00:09:37.030 --> 00:09:40.970
this notion of eliminating the link
phase or making it so minutely small

00:09:41.020 --> 00:09:44.610
that you don't care about it anymore,
is of course a cornerstone

00:09:44.610 --> 00:09:45.800
of productivity.

00:09:45.880 --> 00:09:50.440
That feature of rapid cycle
development and such is of course

00:09:50.440 --> 00:09:54.880
an essential ingredient and I think
a hallmark of every Macintosh

00:09:54.890 --> 00:09:57.400
environment that needs to exist.

00:09:58.570 --> 00:10:01.660
Now, how about finding the data?

00:10:01.660 --> 00:10:04.920
Of course,
things like searching for information,

00:10:04.920 --> 00:10:07.300
just as it is in your music,
just as it is in the finder,

00:10:07.380 --> 00:10:10.380
you have an enormous number of
different ways of organizing

00:10:10.490 --> 00:10:13.800
and classifying information,
and the metaphors that

00:10:13.800 --> 00:10:18.460
work extremely well for the
applications work well here too.

00:10:18.460 --> 00:10:22.400
CodeSense is this idea of the app
that since it is an interactive tool,

00:10:22.400 --> 00:10:24.360
it knows something about your program.

00:10:24.590 --> 00:10:28.060
It has a built-in index of
the symbols and information,

00:10:28.120 --> 00:10:31.460
and it's able to help you
complete that on the fly.

00:10:31.500 --> 00:10:34.480
And then Smart Groups,
this idea of being able to have

00:10:34.480 --> 00:10:37.650
meta information organized,
both the lines of the code

00:10:37.650 --> 00:10:40.210
and the files and such,
into categories that

00:10:40.210 --> 00:10:42.350
dynamically update themselves.

00:10:42.480 --> 00:10:45.450
And this is an area where
we've only just begun.

00:10:45.460 --> 00:10:48.460
You'll see the first steps here,
but this is an area where we're going

00:10:48.460 --> 00:10:48.460
to be looking at the next steps.

00:10:48.460 --> 00:10:49.630
we would love to get feedback.

00:10:49.690 --> 00:10:52.890
In fact, we want feedback on all
the features from you.

00:10:53.620 --> 00:10:58.500
Next major quadrant of features
is in finding and fixing problems.

00:10:58.500 --> 00:11:01.700
Fix and continue, or the fix feature that
you saw this morning,

00:11:01.910 --> 00:11:05.400
very important part of that dynamic
interactive development field.

00:11:05.400 --> 00:11:10.090
And this notion of four matters, right,
that you're able to tell us

00:11:10.090 --> 00:11:13.900
something about the way you want
the data to be presented to you,

00:11:13.900 --> 00:11:17.500
so that you can take any of the types,
both that are built into the system,

00:11:17.750 --> 00:11:20.990
or to extend it with your own data types,
and show it in a short amount

00:11:21.050 --> 00:11:24.930
of information on the line,
on the debugger information,

00:11:24.930 --> 00:11:29.210
both for standard types
and for templated types.

00:11:30.060 --> 00:11:32.650
The final convergence is how do you
cope with a very large application?

00:11:32.650 --> 00:11:38.640
SCM, source code management systems,
distributed builds,

00:11:38.640 --> 00:11:42.200
this idea of being able to form
it out to a network of computers.

00:11:42.220 --> 00:11:45.560
And finally, you know,
what's often the last phase,

00:11:45.560 --> 00:11:48.700
but in fact what we would like
you to do is to be part of every

00:11:48.700 --> 00:11:51.730
part of development process
of running performance tools,

00:11:51.730 --> 00:11:55.050
building and integrating it into the
application as Scott talked about in

00:11:55.050 --> 00:11:58.630
the last session or to use it as part of
the interactive development environment.

00:11:58.670 --> 00:12:01.240
We think all these these things
need to be merged into one

00:12:01.240 --> 00:12:03.210
environment we call Xcode.

00:12:05.960 --> 00:12:10.080
Now, many of these features are
features that you've had before.

00:12:10.080 --> 00:12:12.520
What we intend to do
is to essentially say,

00:12:12.520 --> 00:12:16.080
look, we need to meet your needs by
providing you with a UI that you

00:12:16.080 --> 00:12:21.410
don't have to struggle to learn,
that's fast, that works as you expect,

00:12:21.470 --> 00:12:25.040
and has the features that you've loved
in other programming environments that

00:12:25.180 --> 00:12:28.050
have been done extremely well before us,
and so that you're not

00:12:28.050 --> 00:12:29.480
sacrificing anything.

00:12:29.560 --> 00:12:31.760
We think it's critically,
critically important that

00:12:32.080 --> 00:12:35.520
we build upon the past,
and that we take that and

00:12:35.580 --> 00:12:37.890
use that to your advantage.

00:12:38.510 --> 00:12:45.360
and other developers will be
joining us in the next session.

00:12:45.400 --> 00:12:45.400
Thank you.

00:13:08.400 --> 00:13:11.510
My goal is that no build should
ever take more than a minute,

00:13:11.520 --> 00:13:13.240
no matter how large the application.

00:13:13.240 --> 00:13:16.060
We're not there yet,
but we're working on it and this

00:13:16.060 --> 00:13:19.860
is in fact I think the very first
and most important step that we've

00:13:19.860 --> 00:13:23.380
set this important target to really
make this tremendous and we'll

00:13:23.380 --> 00:13:25.070
show you some of that later today.

00:13:26.420 --> 00:13:28.780
Fix and Continue,
this idea of being able to

00:13:28.780 --> 00:13:31.940
dynamically patch the running
application and insert new code,

00:13:31.940 --> 00:13:34.270
and to be able to try out
multiple different ideas,

00:13:34.270 --> 00:13:36.700
to be able to fix bugs on the fly.

00:13:36.700 --> 00:13:40.240
And, of course, Zero Link,
this idea of limiting the link phase,

00:13:40.310 --> 00:13:43.600
so that you think of linking
as a kind of an optimization,

00:13:43.600 --> 00:13:48.730
an optimization that is applied after--or
as you get towards the end of your

00:13:48.830 --> 00:13:51.960
project to make things even more tight.

00:13:51.960 --> 00:13:56.020
In fact, we will probably use the link
phase time in the future to

00:13:56.020 --> 00:14:00.570
do additional optimizations,
additional compilation technologies,

00:14:00.570 --> 00:14:05.410
so that we can actually do cross-module
and intermodule optimizations that

00:14:05.410 --> 00:14:10.360
are more--that help you improve
the execution time of your code.

00:14:12.470 --> 00:14:17.640
So, our challenge then is to provide you
with the fastest way to create Macintosh,

00:14:17.820 --> 00:14:20.100
Mac OS X applications.

00:14:20.150 --> 00:14:24.090
Applications that are fast to learn,
fast to use, fast for debugging,

00:14:24.130 --> 00:14:26.060
and that the generated code is fast.

00:14:26.060 --> 00:14:30.770
We want to provide that to you,
and we think Xcode is a tremendous leap

00:14:30.950 --> 00:14:32.050
in the direction of providing that.

00:14:37.210 --> 00:14:42.150
So, you've seen some of this information.

00:14:42.440 --> 00:14:47.790
We hold MetroWorks as the gold standard,
and this is on certain files

00:14:47.790 --> 00:14:50.440
we've picked out in Finder.

00:14:50.440 --> 00:14:54.440
And you can see that in Jaguar,
we took a fairly lengthy

00:14:54.950 --> 00:14:56.660
30 seconds of time.

00:14:56.660 --> 00:15:00.730
Back in the December '02 tools,
we made good progress

00:15:00.730 --> 00:15:02.200
and reduced its sum.

00:15:02.200 --> 00:15:06.040
But I think in Xcode,
we really cut it down to nine seconds.

00:15:06.060 --> 00:15:09.130
And that's--that I think is
really getting into the place

00:15:09.130 --> 00:15:12.570
where we're finally beating
what Code Warrior has to offer.

00:15:12.570 --> 00:15:16.830
And then down to even three seconds
where you have this very terrific

00:15:16.830 --> 00:15:23.350
process where almost the debugger ceases
to exist and you're just modifying

00:15:23.360 --> 00:15:26.820
and changing the running application,
and you saw that this morning.

00:15:27.280 --> 00:15:31.670
On full build times, again,
the time has been getting

00:15:31.670 --> 00:15:35.520
better and better,
and now we're releasing with X-Codes

00:15:35.700 --> 00:15:37.550
in its distributed build mode.

00:15:37.800 --> 00:15:42.670
Fabulous, incredible time where we get
it into the 100 second range,

00:15:42.680 --> 00:15:46.160
and even, I think today we're going to
see even better than that of

00:15:46.160 --> 00:15:48.760
our benchmark application.

00:15:50.000 --> 00:15:51.780
Let's talk about Carbon.

00:15:51.780 --> 00:15:55.680
Some people think Apple made
tools to do Carbon programming.

00:15:55.730 --> 00:15:56.900
How many people thought that?

00:15:56.900 --> 00:15:58.100
Just curious.

00:15:58.100 --> 00:16:00.140
We do Carbon programming, we love Carbon.

00:16:00.180 --> 00:16:02.840
Xcode was designed from the ground up,
focused on Carbon.

00:16:02.910 --> 00:16:08.890
And really to make the Carbon development
cycle tremendously productive.

00:16:08.900 --> 00:16:12.780
And of course, that also means making C++
tremendously productive.

00:16:12.890 --> 00:16:17.810
As you saw in the Safari,
we use a mixture of C++ and Objective-C,

00:16:18.040 --> 00:16:24.200
and they work extremely well together in
a language dialect we call Objective-C++.

00:16:24.810 --> 00:16:29.930
We've designed certain features in
Xcode specifically for Carbon and C++.

00:16:30.000 --> 00:16:32.250
For example, you can now set
breakpoints on exceptions.

00:16:32.480 --> 00:16:39.980
When a class raises a C++ exception,
the debugger built into

00:16:39.980 --> 00:16:41.260
Xcode will catch it.

00:16:41.260 --> 00:16:44.010
We've provided a new
feature we call the SDK,

00:16:44.180 --> 00:16:49.420
and this is the ability to live on one
version of Mac OS X and target another.

00:16:49.570 --> 00:16:53.260
So you can actually live on
Panther and target Jaguar.

00:16:53.260 --> 00:16:56.020
And in this developer release
we're handing out to you today,

00:16:56.030 --> 00:16:58.260
live on Jaguar and target Panther.

00:16:58.370 --> 00:17:00.260
And as well, we also support Puma too.

00:17:00.610 --> 00:17:03.900
These formatters,
which allow you to write in C++ directly,

00:17:03.900 --> 00:17:08.260
and that is invoked automatically by
the environment to display your data.

00:17:08.380 --> 00:17:12.700
And of course, the fact that C++ does
require an immense amount of

00:17:12.700 --> 00:17:16.280
cross-information in header files,
we've provided this feature of

00:17:16.280 --> 00:17:22.040
distributed builds and PCH pre-compiled
headers to make that easy and terrific.

00:17:22.990 --> 00:17:25.220
So with that,
I want to invite up Steve Naroff

00:17:25.360 --> 00:17:26.900
to talk about the Xcode experience.

00:17:27.200 --> 00:17:30.770
Thanks, Ted.

00:17:37.100 --> 00:17:49.200
[Transcript missing]

00:17:49.590 --> 00:17:56.940
We want to provide a fit and finish
that's consistent with the Apple brand.

00:17:56.940 --> 00:18:02.120
From my perspective,
that means four things primarily.

00:18:02.120 --> 00:18:07.080
It means the UI has to be responsive.

00:18:07.110 --> 00:18:10.270
That doesn't just mean a fast compiler,
it means fast find,

00:18:10.270 --> 00:18:15.260
it means being able to get your job
done in general in a very fast way.

00:18:15.260 --> 00:18:18.320
Number two, it means expressiveness.

00:18:18.320 --> 00:18:23.140
We want a UI that can view your project
data from many different perspectives,

00:18:23.140 --> 00:18:27.050
because there are many times
during development where you're

00:18:27.050 --> 00:18:30.540
working on a project that you
may or may not have created,

00:18:30.540 --> 00:18:34.540
and the way you want to view the data
is significantly different based on

00:18:34.540 --> 00:18:38.000
what stage of development you're at.

00:18:38.000 --> 00:18:41.670
Number three,
we want workflow that makes sense

00:18:42.270 --> 00:18:44.290
and that just gets out of your way.

00:18:44.290 --> 00:18:47.800
We want to make sure that you don't have
to relearn a whole bunch of new concepts.

00:18:47.860 --> 00:18:48.910
We want to make sure that you don't
have to relearn a whole bunch of

00:18:48.920 --> 00:18:51.440
new concepts just to use the tool.

00:18:51.440 --> 00:18:54.820
We were inspired by many of the
applications that Ted's mentioned.

00:18:54.820 --> 00:18:57.490
We were also inspired by many
of the third-party applications

00:18:57.510 --> 00:18:58.760
that you've developed.

00:18:58.760 --> 00:19:05.420
We use them, and in fact,
we look to them often with great pride.

00:19:05.420 --> 00:19:09.710
We learn from you,
we're inspired by our own apps as well.

00:19:09.980 --> 00:19:11.400
And harmonizing with Panther.

00:19:11.620 --> 00:19:15.030
When you look at what Panther's doing
and you look at what we're doing,

00:19:15.030 --> 00:19:16.980
it seems like a unified whole.

00:19:16.980 --> 00:19:18.830
I think that's actually
a breakthrough for us,

00:19:18.860 --> 00:19:23.050
to have the tools and the
user environment have a very

00:19:23.050 --> 00:19:25.310
uniform look and feel and flow.

00:19:26.650 --> 00:19:30.800
And the fourth thing,
and this is very important,

00:19:30.830 --> 00:19:32.840
it needs to look sharp.

00:19:32.840 --> 00:19:34.820
It needs to be pixel perfect.

00:19:34.840 --> 00:19:38.790
In the past,
we never collaborated with artists,

00:19:38.790 --> 00:19:42.840
design and production,
and Steve Jobs was gracious enough

00:19:43.030 --> 00:19:48.850
to let us have the support of Apple's
world-class design and production people.

00:19:48.850 --> 00:19:51.300
And it shows.

00:19:51.300 --> 00:19:53.440
People who are expert at
developing compilers and

00:19:53.440 --> 00:19:56.080
development tools are not artists.

00:19:56.080 --> 00:19:59.720
And some of the guys have developed
icons over the years and we've gotten by,

00:19:59.720 --> 00:20:04.300
but it's really helped to have support
from our world-class production people.

00:20:04.300 --> 00:20:09.090
So, with that said,
I'm going to go through a demo.

00:20:20.650 --> 00:20:22.200
So I have a project built.

00:20:22.240 --> 00:20:25.170
I have two projects we're
going to look at today.

00:20:25.170 --> 00:20:28.910
One is appearance demo,
and for those of you who have

00:20:28.920 --> 00:20:32.320
used Code Warrior and are
familiar with Power Plant,

00:20:32.400 --> 00:20:33.920
this will look very familiar to you.

00:20:34.040 --> 00:20:37.090
What we've done is we've
used our importer technology

00:20:37.090 --> 00:20:40.640
to import it into Xcode,
and right now it's built,

00:20:40.710 --> 00:20:44.910
and I'm going to take you through
some of the user interface now.

00:20:45.500 --> 00:20:47.690
One thing, let's start at the top.

00:20:47.760 --> 00:20:50.390
We have these drop-down
buttons at the top.

00:20:50.470 --> 00:20:53.490
If you click and hold,
basically you get a list of buttons.

00:20:53.500 --> 00:20:59.030
The idea here is to save valuable
toolbar real estate for operations

00:20:59.220 --> 00:21:01.090
that are fairly uncommon.

00:21:01.100 --> 00:21:04.740
So here we group build, clean all,
and clean together.

00:21:05.290 --> 00:21:08.400
Likewise over here,
we have build and run, build and debug,

00:21:08.400 --> 00:21:09.900
run and debug.

00:21:10.000 --> 00:21:11.930
We have a stop button here.

00:21:11.930 --> 00:21:15.240
We have a little widget
here to open an editor.

00:21:15.240 --> 00:21:16.200
I'm not going to do that right now.

00:21:16.200 --> 00:21:18.400
We have find, and we have an inspector.

00:21:18.400 --> 00:21:21.590
So you click here, you get the inspector.

00:21:21.590 --> 00:21:25.350
You click again, it goes away,
just like many of the

00:21:25.350 --> 00:21:27.190
apps on the platform.

00:21:27.550 --> 00:21:32.030
This morning you saw Chris Espinoza give
a demo of some of the features here.

00:21:32.080 --> 00:21:36.770
If you want to look at all the
header files or the resource files,

00:21:36.780 --> 00:21:39.080
you can see them likewise.

00:21:39.100 --> 00:21:41.320
So the search fields, very fast.

00:21:41.320 --> 00:21:45.580
Now what we're doing here is we're
actually looking at the project group.

00:21:45.580 --> 00:21:49.220
If you can read the status
message in the back,

00:21:49.320 --> 00:21:51.860
it says we have 359 files.

00:21:51.860 --> 00:21:57.570
One of the reasons we have 359 files is
Power Plant is actually included in this.

00:21:57.690 --> 00:22:00.350
Power Plant's typically statically
linked into your application

00:22:00.770 --> 00:22:04.680
and there's no exception here.

00:22:04.960 --> 00:22:07.670
Let's now go through the table view here.

00:22:07.940 --> 00:22:10.800
If you click here, you can sort by kind.

00:22:10.800 --> 00:22:16.930
The application bubbles to the top,
and the C++ files are

00:22:16.930 --> 00:22:19.760
all grouped together,
and the header files are

00:22:19.760 --> 00:22:20.800
all grouped together.

00:22:21.070 --> 00:22:24.700
And then you have the
resources towards the end.

00:22:24.920 --> 00:22:28.800
Here, if we want to sort by file name,
if you want to sort by code,

00:22:28.880 --> 00:22:34.800
you can see that the lwindow.cp is
the largest object code we have here.

00:22:34.890 --> 00:22:37.070
And likewise, you could sort by warnings.

00:22:37.190 --> 00:22:40.770
So, there we have warnings, file name,
kind.

00:22:40.840 --> 00:22:42.820
All very fast, right?

00:22:42.820 --> 00:22:44.450
So, let's see.

00:22:44.450 --> 00:22:47.080
Where do I want to go next?

00:22:47.080 --> 00:22:48.980
That is just a standard group, okay?

00:22:49.250 --> 00:22:51.010
So, you create these groups.

00:22:51.010 --> 00:22:54.680
In fact, if you click here,
you can see that it has substructure,

00:22:54.680 --> 00:22:57.540
as you've probably seen in this project.

00:22:57.660 --> 00:23:01.570
You can click here and you can go
through with the arrow keys and

00:23:01.570 --> 00:23:03.480
see all the files that are there.

00:23:03.590 --> 00:23:06.970
So, even though hierarchy is
something that I personally

00:23:06.970 --> 00:23:09.970
hate dealing with all the time,
you can actually use this in

00:23:09.990 --> 00:23:12.660
a hybrid manner where you're
using some of the hierarchy,

00:23:12.660 --> 00:23:14.700
however,
you're still using what we call the

00:23:14.700 --> 00:23:17.300
detail view or the table view there.

00:23:17.300 --> 00:23:19.060
So, it's your preference.

00:23:19.130 --> 00:23:24.090
So, I'm going to go back here and
we're going to sort by file name.

00:23:24.190 --> 00:23:29.610
And as you might expect,
if you double click on a file here,

00:23:29.610 --> 00:23:32.230
you get an editor, okay?

00:23:32.520 --> 00:23:34.810
Fairly standard behavior.

00:23:37.520 --> 00:23:41.620
Likewise, if we go over here,
you can double click on

00:23:41.710 --> 00:23:43.540
the application group.

00:23:43.890 --> 00:23:46.110
If you double click on
the application group,

00:23:46.200 --> 00:23:50.770
what we do is we actually fill
a drawer with all the files.

00:23:50.960 --> 00:23:53.730
So, oh, a couple claps there.

00:23:53.920 --> 00:23:59.160
So the nice thing about this is you
have the benefits of a standalone

00:23:59.160 --> 00:24:02.470
editor where you don't have to
constantly go back to the project

00:24:02.590 --> 00:24:04.800
window to get to your other files.

00:24:04.920 --> 00:24:05.700
Right?

00:24:05.910 --> 00:24:07.800
And your groupings can be arbitrary.

00:24:07.800 --> 00:24:10.780
So for instance,
I could close the groups,

00:24:10.850 --> 00:24:15.990
close the window, close my hierarchy,
double click on my project,

00:24:16.250 --> 00:24:19.800
and here I actually
have all of the groups.

00:24:20.000 --> 00:24:20.800
Right?

00:24:20.800 --> 00:24:23.060
So you can double click on a file,
get a separate window,

00:24:23.060 --> 00:24:25.710
you can double click on a group,
get a drawer full of the files,

00:24:25.820 --> 00:24:27.800
or you can double click
on the whole project.

00:24:28.010 --> 00:24:30.730
This depends on the size of your project,
your work style.

00:24:30.980 --> 00:24:34.800
You can imagine having two editors
up with two different groups.

00:24:34.800 --> 00:24:39.790
So you have a lot of flexibility
that can adapt with your needs.

00:24:39.910 --> 00:24:41.690
One of the things we
hear a lot from you is,

00:24:41.800 --> 00:24:45.930
oh, well, I don't want to work
in an embedded editor,

00:24:45.930 --> 00:24:48.800
and I don't want to work
just in single window mode.

00:24:48.800 --> 00:24:51.800
I want to have a lot of control.

00:24:51.800 --> 00:24:53.780
And what's cool about this
is you have control that,

00:24:53.780 --> 00:24:54.790
in fact, you control.

00:24:54.800 --> 00:24:57.980
You don't have to go to a preferences
panel and set it all up and say single,

00:24:58.090 --> 00:24:59.800
many, all, or any of that stuff.

00:24:59.800 --> 00:25:02.790
It just works as you would expect.

00:25:03.340 --> 00:25:04.690
So,

00:25:05.360 --> 00:25:07.270
There's a little button here
to get back to the project.

00:25:08.380 --> 00:25:12.670
And why don't we now look
at the first smart group.

00:25:12.680 --> 00:25:15.640
So here's a smart group
called implementation files.

00:25:15.640 --> 00:25:20.340
And what it does is,
it goes through and basically gets all

00:25:20.340 --> 00:25:24.080
your .cp or .c or Objective-C files out.

00:25:24.130 --> 00:25:25.080
So it's filtered.

00:25:25.080 --> 00:25:29.270
So if I was to add a file to my project,
if it had a .cp extension,

00:25:29.270 --> 00:25:34.700
it would automatically be viewed when
you clicked on the implementation file.

00:25:34.700 --> 00:25:38.050
So again,
the analogy with smart playlists is

00:25:38.050 --> 00:25:40.860
it's based on a rule which you set up.

00:25:40.940 --> 00:25:44.810
And in this case,
it's set up to do .cp files.

00:25:46.670 --> 00:25:50.600
There's a project symbols group
here that is very interesting.

00:25:50.600 --> 00:25:55.540
So right now we are looking
at 8,000 symbols here,

00:25:55.820 --> 00:25:59.370
and if you click on the kind,
you can see how fast that is.

00:25:59.370 --> 00:26:01.110
It doesn't hesitate.

00:26:01.110 --> 00:26:05.220
And this is a G4, just to be clear,
not a G5.

00:26:05.220 --> 00:26:08.560
And in fact,
you can go here and you can type,

00:26:08.720 --> 00:26:11.320
and it keeps up with you very nicely.

00:26:11.530 --> 00:26:16.610
In this case, we limited it from 8,000 to
630 symbols very quickly.

00:26:16.670 --> 00:26:20.560
You also have the flexibility
to go to the table view and say,

00:26:20.560 --> 00:26:22.770
you know,
I don't really need the symbol type,

00:26:23.310 --> 00:26:25.770
and it gives you more
room for your other data,

00:26:25.800 --> 00:26:26.380
right?

00:26:26.510 --> 00:26:27.680
Very nice capability.

00:26:27.930 --> 00:26:30.500
So, again, it adapts.

00:26:30.730 --> 00:26:35.280
And then you can pretty
much go up to the symbol,

00:26:35.280 --> 00:26:40.980
and you can say, now let's look at draw,
draw, and we go down here and you can

00:26:40.990 --> 00:26:45.000
see how nice it is to be able
to basically cut through all

00:26:45.000 --> 00:26:47.730
the files and get to your data.

00:26:47.730 --> 00:26:52.340
I've always wanted to have a great
way to edit polymorphic methods,

00:26:52.340 --> 00:26:57.200
because polymorphism is a huge,
it's just a great design

00:26:57.200 --> 00:26:59.980
tool that is underused,
and in fact,

00:26:59.980 --> 00:27:03.240
when you have a tool that makes
writing polymorphic methods this easy,

00:27:03.240 --> 00:27:08.110
in fact, I think it will encourage a
different style of programming.

00:27:08.110 --> 00:27:08.110
So,

00:27:09.270 --> 00:27:11.550
Go back here.

00:27:11.650 --> 00:27:16.170
Now I'd like to quickly
demo the fine results.

00:27:16.760 --> 00:27:20.320
We go here,
and right now you're looking at a sheet,

00:27:20.410 --> 00:27:23.580
obviously, that has a fine text field.

00:27:23.580 --> 00:27:26.550
It has a pop-up that says,
do you want to do a textual search,

00:27:26.860 --> 00:27:29.350
regular expression,
or the definition search?

00:27:29.350 --> 00:27:32.120
Right now we'll just
stick with textual search.

00:27:32.150 --> 00:27:36.250
And we can look in the project,
in the projects and frameworks,

00:27:36.280 --> 00:27:39.640
frameworks are all open files,
and we can look in all

00:27:39.640 --> 00:27:41.090
the files and so on.

00:27:41.140 --> 00:27:45.050
So right now I'm going to look
for a string called the bar,

00:27:45.050 --> 00:27:46.580
and you can see it's right there.

00:27:46.600 --> 00:27:49.130
It's right there with me,
and it's still looking

00:27:49.130 --> 00:27:54.060
over the entire project,
and if you get the hits here,

00:27:54.060 --> 00:27:58.220
we can double click on it,
and it takes you to the bar.

00:27:58.240 --> 00:28:02.710
So very nice, very convenient, very fast.

00:28:02.710 --> 00:28:10.290
So what I'd like to do now is show
you a cool feature we call CodeSense.

00:28:15.660 --> 00:28:22.060
If we go right here and we
say "the" and hit escape,

00:28:22.060 --> 00:28:26.940
right now we're looking at everything
that matches "the" in this context.

00:28:27.040 --> 00:28:29.930
So for instance, if I click "B"

00:28:48.760 --> 00:28:50.980
I used to have it sent
to be case insensitive,

00:28:50.980 --> 00:28:53.200
but it's not set case
insensitive anymore,

00:28:53.200 --> 00:28:54.790
so I have to type correctly now.

00:28:55.060 --> 00:28:58.110
But there is a feature
in CodeSense to say,

00:28:58.470 --> 00:29:00.500
listen, you don't have to be
so rigorous about case.

00:29:00.500 --> 00:29:04.960
So if I hit escape now,
it will complete it,

00:29:05.250 --> 00:29:15.810
and then when I hit arrow,
it will show me that.

00:29:37.900 --> 00:29:40.780
All demos, yeah, you gotta love them.

00:29:40.900 --> 00:29:51.960
Okay, I think we'll go someplace
else now and we'll... Okay,

00:29:52.090 --> 00:29:57.480
let's do something else right now.

00:30:04.960 --> 00:30:08.090
What I want to do now is
actually build the app.

00:30:08.200 --> 00:30:10.880
But before I do it,
let's look at an error

00:30:10.980 --> 00:30:13.280
and warning smart group.

00:30:13.890 --> 00:30:15.960
Now I'm going to show you
the embedded editor here.

00:30:16.090 --> 00:30:19.170
What we have here is all the
errors and warnings that are part

00:30:19.260 --> 00:30:20.710
of the build that we did last.

00:30:20.800 --> 00:30:23.950
So here I'm going through
all the errors and warnings,

00:30:24.010 --> 00:30:26.840
and as you can see,
we annotate the gutter with

00:30:27.390 --> 00:30:29.800
the warning right there.

00:30:29.800 --> 00:30:35.750
And we can use the search field
very nicely by saying unused and

00:30:35.760 --> 00:30:38.800
parameter if we want to see that.

00:30:38.800 --> 00:30:43.760
Here we limited it from actually
over 200 errors to 6 errors,

00:30:43.970 --> 00:30:45.800
or warnings I should say.

00:30:45.800 --> 00:30:49.930
So it's very,
very interesting to be able to

00:30:49.990 --> 00:30:54.560
manage your warnings this way,
where if you're bringing

00:30:54.560 --> 00:30:57.480
over a large project,
and in fact, as you can see,

00:30:57.480 --> 00:31:01.650
we compiled all of Power Plant here
and there were 264 warnings.

00:31:02.000 --> 00:31:02.760
Why is that?

00:31:02.820 --> 00:31:04.730
It's not necessarily
because it's bad code,

00:31:04.800 --> 00:31:08.800
but because the GNU compiler has
a different set of constraints

00:31:08.800 --> 00:31:11.570
that it places on code,
to put it politely.

00:31:11.910 --> 00:31:14.800
And sometimes it finds errors,
sometimes it doesn't.

00:31:14.800 --> 00:31:17.800
So I don't really know how many
of these warnings are real,

00:31:17.800 --> 00:31:22.800
but the bottom line is when you port
code from Code Warrior to Xcode,

00:31:22.800 --> 00:31:24.800
you will encounter this same phenomenon.

00:31:24.800 --> 00:31:31.620
So what I'm going to do now is
I'm going to go to the inspector.

00:31:38.050 --> 00:31:39.170
Go to Build.

00:31:39.170 --> 00:31:45.640
I'm going to click something called
"Inhibit All Warnings." Okay.

00:31:45.870 --> 00:31:50.630
And then what I'm going to do is
click on the implementation files.

00:31:59.000 --> 00:32:03.880
So what I'm going to do
now is hit build and run.

00:32:03.880 --> 00:32:08.270
It's going to compile this right now.

00:32:08.630 --> 00:32:11.690
and what it's going to do is
remove all the warnings for

00:32:11.690 --> 00:32:15.090
me and so you can see that

00:32:18.470 --> 00:32:20.880
All the warnings are going away.

00:32:20.880 --> 00:32:25.880
And it's really interesting
because-- let me see,

00:32:25.880 --> 00:32:25.880
where

00:32:28.120 --> 00:32:31.120
I have the search field, thank you.

00:32:31.120 --> 00:32:31.600
There I go.

00:32:31.630 --> 00:32:32.820
So you can see it's shrinking.

00:32:32.850 --> 00:32:34.800
It's removing all the
warnings and errors.

00:32:34.800 --> 00:32:37.370
So this is a really easy way
for you to tell your manager,

00:32:37.490 --> 00:32:41.000
"Oh, we've cleaned up all 260
warnings." You just click that

00:32:41.000 --> 00:32:42.990
button and everything goes away.

00:32:43.090 --> 00:32:45.200
Okay?

00:32:45.200 --> 00:32:45.790
Very nice.

00:32:45.880 --> 00:32:49.360
And so as you can see,
we're compiling fairly fast now.

00:32:49.410 --> 00:32:52.630
This power plant builds
in about 55 seconds,

00:32:52.630 --> 00:32:54.560
a little bit under a minute.

00:32:54.560 --> 00:32:57.170
And that we consider very respectable.

00:32:57.170 --> 00:33:00.410
We want to do better,
but for right now it's 55 seconds

00:33:00.410 --> 00:33:03.590
for a full build of power plant,
and it should run the

00:33:03.590 --> 00:33:05.050
application right now.

00:33:05.050 --> 00:33:07.650
So you've seen this
application many times,

00:33:07.650 --> 00:33:09.120
I believe, most of you.

00:33:14.560 --> 00:33:19.700
So,
I'm going to go back to my drawer here.

00:33:19.700 --> 00:33:24.990
Go to one of the
application files in here.

00:33:26.630 --> 00:33:30.210
What I'm going to do now
is show you the nav bar.

00:33:30.340 --> 00:33:35.500
Here we have a symbol pop up,
so if I want to go to listen to message,

00:33:35.520 --> 00:33:39.030
we can navigate down very conveniently.

00:33:39.030 --> 00:33:44.420
And if I create a syntax
error and I hit save,

00:33:44.470 --> 00:33:46.240
and I hit build,

00:33:47.410 --> 00:33:52.560
You can see from the editor,
we've basically annotated the gutter,

00:33:52.580 --> 00:33:55.910
and then when you click on it,
you can see the error in the status.

00:33:56.300 --> 00:34:00.490
The reason this is important is it
gets back to this low distraction

00:34:00.490 --> 00:34:02.110
factor that we're trying to promote.

00:34:02.410 --> 00:34:05.820
We want to bring the information to you,
so if you're in the editor and you

00:34:05.820 --> 00:34:10.020
make a syntax error and you hit build,
you don't have to see some funky

00:34:10.020 --> 00:34:13.690
panel come up in your face and
you get the error right there.

00:34:13.980 --> 00:34:17.120
So right now, if I correct my error,

00:34:18.030 --> 00:34:20.590
and I hit build,
you can see it goes away automatically.

00:34:20.710 --> 00:34:23.790
And it also gives you a sense
for how fast things are,

00:34:23.800 --> 00:34:24.300
right?

00:34:24.310 --> 00:34:27.040
Because as soon as I hit save
and as soon as I hit build,

00:34:27.040 --> 00:34:29.760
you saw it go away,
which meant it had seen the

00:34:30.030 --> 00:34:32.380
source code and had corrected it.

00:34:32.380 --> 00:34:33.550
So, that's useful.

00:34:35.180 --> 00:34:39.220
I'm going to show you briefly
some neat support we have for

00:34:39.510 --> 00:34:41.730
searching the help system.

00:34:41.810 --> 00:34:45.460
So here we have a window which

00:34:47.050 --> 00:34:50.120
The Google Search Engine has
the same search field as all

00:34:50.250 --> 00:34:52.780
the other Windows and you can,
let's say,

00:34:52.780 --> 00:34:57.150
if you want to search for "retain."
And it keeps up with you very nicely,

00:34:57.150 --> 00:35:00.030
and then if you click on it,
it will take you to the

00:35:00.030 --> 00:35:02.230
HTML documentation very quickly.

00:35:02.250 --> 00:35:02.670
Okay?

00:35:02.730 --> 00:35:03.990
Very, very quick.

00:35:03.990 --> 00:35:05.140
So, right there.

00:35:05.180 --> 00:35:06.410
Thank you.

00:35:08.730 --> 00:35:12.270
Likewise,
you could focus on specific books,

00:35:12.270 --> 00:35:18.670
so to speak, with Carbon, Cocoa,
Apple Script, Library, whatever you want.

00:35:18.670 --> 00:35:23.570
But it's so fast that often when
you don't want to think too hard,

00:35:23.590 --> 00:35:28.520
again, you just go there and you
get the information you need.

00:35:28.520 --> 00:35:32.750
And just like with the other
user interface elements,

00:35:32.750 --> 00:35:36.240
you can basically remove
these columns as you want.

00:35:36.240 --> 00:35:36.240
So that's that.

00:35:36.880 --> 00:35:40.990
Now I'd like to go back to my inspector.

00:35:42.110 --> 00:35:42.110
So, let's...

00:35:44.900 --> 00:35:49.760
So one of the most interesting inspectors
we have is the Target Inspector.

00:35:49.800 --> 00:35:53.500
Right now, what you're looking at is
a native Target Inspector.

00:35:53.500 --> 00:35:57.970
We have a general pane that if
you had a more complex project,

00:35:57.970 --> 00:36:01.400
you would see the various
targets listed here.

00:36:01.400 --> 00:36:04.460
You have this build,
and this is where you're going

00:36:04.460 --> 00:36:07.960
to spend most of your time when
it comes to changing options.

00:36:07.960 --> 00:36:11.460
There's a little drawer here,
and one of the things that's really

00:36:11.460 --> 00:36:15.960
cool is if you want to look at
all of the options that we have,

00:36:15.960 --> 00:36:21.840
you can see I selected all the
groups and 136 items turned up there.

00:36:22.130 --> 00:36:27.230
So now if I go here and I say,
"What about optimization flags?"

00:36:27.350 --> 00:36:30.720
It limits it from 136 to 6.

00:36:30.720 --> 00:36:35.440
So again,
very useful way to find things just

00:36:35.440 --> 00:36:39.340
as you would expect from the other
user interface elements we have.

00:36:39.340 --> 00:36:42.260
So current settings are
the ones you've chosen.

00:36:42.260 --> 00:36:44.460
In this case, I have 29 items.

00:36:44.460 --> 00:36:46.580
Here are the common settings.

00:36:46.660 --> 00:36:49.980
And you can see there are little icons to
tell you whether it's a build setting or

00:36:50.040 --> 00:36:53.370
a language setting or in fact a warning.

00:36:53.440 --> 00:36:56.760
It's very useful to have that cue there.

00:36:56.760 --> 00:36:58.220
We have GCC settings here.

00:36:58.300 --> 00:37:00.670
You can click on all
the language settings,

00:37:00.980 --> 00:37:04.250
code generation settings, warnings,
pre-processing.

00:37:04.590 --> 00:37:08.310
So there are many different ways to view
the data from the categories we provide

00:37:08.350 --> 00:37:09.630
here to the searching that you've seen.

00:37:09.730 --> 00:37:15.740
And one of the things that we don't have
in the pre-release that are being planned

00:37:15.740 --> 00:37:18.360
is you'll have user configurable groups.

00:37:18.360 --> 00:37:23.090
So let's say you're working at Adobe on
Photoshop and the Photoshop team wants

00:37:23.090 --> 00:37:24.900
to have their own custom options.

00:37:24.900 --> 00:37:27.850
They could actually create
their own group there,

00:37:27.850 --> 00:37:31.720
drag over the options,
share them with other groups or people

00:37:31.720 --> 00:37:36.430
on the team so that you start to have
basically a workflow where you don't

00:37:36.430 --> 00:37:38.700
have to think too hard about the options.

00:37:38.930 --> 00:37:41.460
So you can see here that the first
thing that we're going to do is we're

00:37:41.640 --> 00:37:42.760
going to create a group that's going to
be called the compiler options group.

00:37:42.760 --> 00:37:45.750
And this is a very easy way to do that.

00:37:45.760 --> 00:37:46.340
So let's say you're working at
Adobe on Photoshop and you want to

00:37:46.420 --> 00:37:47.760
create a group that's going to be
called the compiler options group.

00:37:47.760 --> 00:37:47.980
And you want to create a group
that's going to be called

00:37:47.980 --> 00:37:48.760
the compiler options group.

00:37:48.760 --> 00:37:48.760
And you want to create a
group that's going to be

00:37:50.100 --> 00:37:53.980
We have, and another thing to mention
is these groups are extensible,

00:37:54.050 --> 00:37:59.000
so if you're a third party tool,
you can add options here,

00:37:59.000 --> 00:38:01.000
which is very nice.

00:38:01.840 --> 00:38:07.280
So the rules pane allows you to associate
or change the compiler and associate

00:38:07.420 --> 00:38:09.700
files with the tools that build them.

00:38:09.700 --> 00:38:13.540
In this case,
you could switch between GCC 3.3, 3.1,

00:38:13.690 --> 00:38:18.720
and so on, and there are lots of other
ress in there as well.

00:38:18.720 --> 00:38:22.330
And then there's properties,
very basic icon document types,

00:38:22.450 --> 00:38:23.600
that kind of stuff.

00:38:23.600 --> 00:38:28.290
So I think you'll find this very handy,
very convenient,

00:38:28.400 --> 00:38:31.100
and we hope you like that.

00:38:31.250 --> 00:38:37.310
One point is, we have this facility
to pin the inspector.

00:38:37.390 --> 00:38:40.310
And what that will do is rather
than track your selection

00:38:40.380 --> 00:38:44.470
as it was doing before,
you could select all over the place and

00:38:44.470 --> 00:38:47.920
basically that inspector will stay put.

00:38:47.920 --> 00:38:52.750
Which again, since the target is one of
the most common inspectors,

00:38:52.760 --> 00:38:54.880
that might be a popular feature for you.

00:38:54.970 --> 00:38:59.080
We're going to work on the user interface
such that when you actually have it

00:38:59.130 --> 00:39:03.500
pinned and you hide that toolbar,
it's more obvious what state it's in.

00:39:03.570 --> 00:39:05.760
This gives you the best
of both worlds where,

00:39:05.760 --> 00:39:07.860
as you know,
in the finder there's a difference

00:39:07.860 --> 00:39:11.060
between inspectors that track
your selection and info windows.

00:39:11.060 --> 00:39:14.440
So this gives you the
same type of feature,

00:39:14.440 --> 00:39:16.880
however, it's more lazily evaluated.

00:39:17.160 --> 00:39:21.630
You don't have to select the type
of inspector when you open it up.

00:39:21.630 --> 00:39:24.120
You can do it later on.

00:39:24.120 --> 00:39:25.700
So.

00:39:28.390 --> 00:39:32.300
Another feature which I'll just
mention briefly is we affectionately

00:39:32.300 --> 00:39:37.300
call it the Metro Morph,
where you can double click on that widget

00:39:37.390 --> 00:39:42.810
and navigate your files and get back
some screen real estate if you want.

00:39:43.020 --> 00:39:47.080
So in that case,
some people may prefer that.

00:39:47.140 --> 00:39:50.860
So again, it's a case where, oh,
the detail view is great,

00:39:50.860 --> 00:39:53.660
searching is great,
but you might get into a groove where,

00:39:53.660 --> 00:39:55.810
in fact, that's the orientation you want.

00:39:56.060 --> 00:39:57.850
And you saw how easy it was, right?

00:39:58.090 --> 00:40:03.100
You double click on the widget
and it does the right thing.

00:40:05.050 --> 00:40:21.570
Here, it does the opposite.

00:40:21.570 --> 00:40:21.570
It'll push it out.

00:40:21.570 --> 00:40:21.570
It'll maximize the view.

00:40:21.570 --> 00:40:21.570
So,
there are some cases when you want the

00:40:21.570 --> 00:40:21.570
detail view to take over the window,
other cases where you want the

00:40:21.570 --> 00:40:21.570
outline view to take over the window.

00:40:21.570 --> 00:40:21.570
We support both.

00:40:21.570 --> 00:40:21.570
We have the next previous buttons here.

00:40:21.880 --> 00:40:25.480
If you click and hold like Safari,
you get the list.

00:40:25.570 --> 00:40:27.040
Very nice.

00:40:27.170 --> 00:40:30.250
Here you could just bop around
between the files in the nav bar.

00:40:30.360 --> 00:40:32.770
This button is called
the counterpart button,

00:40:32.790 --> 00:40:35.800
so if you're in a CP file and you
want to get to the header file,

00:40:35.800 --> 00:40:37.560
you just click it.

00:40:37.730 --> 00:40:42.210
And this basically shows you
the include files that you have.

00:40:42.330 --> 00:40:44.200
And you can see the form
factor is really nice.

00:40:44.200 --> 00:40:49.070
So if you want to maximize it that way,
here's yet another way of working.

00:40:49.330 --> 00:40:55.230
You can go over here, click,
and you have the full

00:40:55.230 --> 00:40:57.540
editor with your view here.

00:40:57.540 --> 00:40:59.680
So there's lots of
different ways to work,

00:40:59.770 --> 00:41:05.540
and we think you'll find a lot of
interesting ways to use the tool.

00:41:05.700 --> 00:41:09.340
Okay,
so I'm going to now go to another demo,

00:41:09.340 --> 00:41:11.060
another project.

00:41:14.420 --> 00:41:20.250
This project is built from
a framework which is less

00:41:20.310 --> 00:41:23.440
commonly known to many of you,
I believe.

00:41:23.440 --> 00:41:26.140
It's called the QT framework.

00:41:26.140 --> 00:41:30.710
QT was developed about 10 years
ago by a Norwegian company,

00:41:30.720 --> 00:41:32.210
a very talented group of people.

00:41:32.510 --> 00:41:36.000
They developed it with
a cross-platform flavor,

00:41:36.000 --> 00:41:40.120
so it runs on Windows, it runs on Linux,
and so on.

00:41:40.450 --> 00:41:44.240
They're very strong advocates
of the open source movement,

00:41:44.240 --> 00:41:48.220
so that's also in line
with the Mac OS X strategy.

00:41:48.220 --> 00:41:53.480
So we're strong partners,
and we want to support Power Plant and

00:41:53.480 --> 00:41:59.520
QT as first-class citizens in this
Xcode development environment.

00:41:59.520 --> 00:42:03.190
So here I'm going to build
and run this project.

00:42:04.060 --> 00:42:07.290
Right now it's
pre-compiling the Qt prefix,

00:42:07.290 --> 00:42:11.480
and then it will compile
roughly a dozen files.

00:42:11.480 --> 00:42:16.760
It takes about five seconds
to compile this guy.

00:42:16.760 --> 00:42:21.920
This is a little 3D
application that ships with Qt,

00:42:21.920 --> 00:42:25.460
and that's just running
it outside the debugger.

00:42:25.510 --> 00:42:28.620
What I'm going to do now is
show you some fix and continue

00:42:28.710 --> 00:42:31.320
running it inside the debugger.

00:42:31.320 --> 00:42:34.750
But before I do that,
I want you to see the stop button.

00:42:34.750 --> 00:42:39.830
When we weren't running anything,
notice the stop button was grayed out.

00:42:39.830 --> 00:42:44.980
Now it's running, and you can see that we
composite the application that's

00:42:44.980 --> 00:42:46.910
running into the stop sign.

00:42:46.910 --> 00:42:50.360
Basically,
that's the way you stop an application,

00:42:50.450 --> 00:42:51.610
and they stack.

00:42:51.610 --> 00:42:55.410
If you're running a long find,
most of the finds are so

00:42:55.410 --> 00:42:58.930
quick that they never stack,
but if you had a long find

00:42:58.930 --> 00:43:02.520
and you had a long build,
that would basically stack with

00:43:02.520 --> 00:43:06.000
the most recent thing on the top.

00:43:06.000 --> 00:43:10.800
And so it's like a mini
activity stop button.

00:43:10.800 --> 00:43:12.990
Let's now go to debug.

00:43:21.970 --> 00:43:24.270
So, what I'm going to do is make
this window a little smaller,

00:43:24.490 --> 00:43:25.900
put it off to the side.

00:43:25.900 --> 00:43:32.200
I'm going to make the debugger
window a little bit smaller.

00:43:34.870 --> 00:43:38.080
And I'm going to hide it for now.

00:43:38.170 --> 00:43:41.580
What I'm going to do
now is click on gear.

00:43:45.160 --> 00:43:48.340
So, right now I'm in the gear and I'm
going to go to the draw method,

00:43:48.340 --> 00:43:50.600
use my symbol pop-up.

00:43:52.590 --> 00:43:56.950
And I'm going to comment in a bunch of
code that was previously commented out.

00:43:57.010 --> 00:43:58.610
So here's if 0.

00:43:59.040 --> 00:44:02.800
I'm going to move that down to gear 3.

00:44:04.330 --> 00:44:05.300
Okay?

00:44:05.300 --> 00:44:07.720
I'm going to hit save.

00:44:07.720 --> 00:44:10.080
I'm going to hit fix.

00:44:10.080 --> 00:44:14.300
And notice that it stops the
application and adds the green gear.

00:44:14.390 --> 00:44:17.580
So, very similar to the demo
you saw earlier today,

00:44:17.580 --> 00:44:22.860
the big difference is this is happening
with a very large C++ framework named QT,

00:44:22.880 --> 00:44:29.300
and this is a GL application
written in C++ using their APIs.

00:44:29.300 --> 00:44:37.060
What I'm going to do now is run
another animation called landscape.

00:44:39.840 --> 00:44:40.800
I'm going to move it over here.

00:44:40.800 --> 00:44:46.300
So now I'm going to
comment in some other code.

00:44:46.330 --> 00:44:47.500
And look at the code.

00:44:47.500 --> 00:44:49.830
I mean, it's not just a constant,
not just a variable.

00:44:49.840 --> 00:44:51.610
There's many functions
that are being added.

00:44:51.660 --> 00:44:54.270
There's static data that's being added.

00:44:54.350 --> 00:44:59.740
I'm also going to go down to another
method that has to do with the landscape.

00:45:00.000 --> 00:45:03.720
And I'm going to basically
set smooth shaded.

00:45:03.750 --> 00:45:06.810
I'm going to hit Save,
and I'm going to hit Fix.

00:45:06.880 --> 00:45:12.950
And it's going to build the application.

00:45:17.400 --> 00:45:29.200
[Transcript missing]

00:45:46.200 --> 00:45:50.340
Okay, well my second fix is
not happening today.

00:45:50.340 --> 00:45:53.710
Let's try it one more time.

00:46:16.700 --> 00:46:29.400
[Transcript missing]

00:46:34.100 --> 00:46:40.540
Now let's set Smooth Shaded.

00:46:40.540 --> 00:46:41.940
There we go.

00:46:41.970 --> 00:46:47.400
Okay, so you'd see how the point here
is we're running two animations,

00:46:47.400 --> 00:46:51.000
there's lots going on,
and the responsiveness,

00:46:51.140 --> 00:46:53.060
even though there was
a minor hiccup there,

00:46:53.060 --> 00:46:53.880
was very good.

00:46:53.970 --> 00:46:58.190
So the tools are not bothered
by what was going on,

00:46:58.190 --> 00:47:03.100
and it didn't take any longer
than just doing one of them.

00:47:03.100 --> 00:47:05.710
So, that's fix and continue.

00:47:07.380 --> 00:47:08.550
So that's all I have for today.

00:47:08.610 --> 00:47:12.730
I think I'm going to bring up
Director of Interactive Tools,

00:47:12.860 --> 00:47:14.180
Toni Trujillo-Vian.

00:47:14.210 --> 00:47:18.160
And I'd also like to thank the
group for working so hard on this

00:47:18.170 --> 00:47:24.130
project and giving of themselves
and supporting it so deeply.

00:47:24.350 --> 00:47:26.170
So thank you, Toni.

00:47:34.700 --> 00:47:38.160
So I'd like to talk to you about
our new native build system.

00:47:38.260 --> 00:47:42.020
Our native build system is
actually the core of Xcode.

00:47:42.020 --> 00:47:46.380
You no longer have to use a separate
command line tool like make or ant

00:47:46.800 --> 00:47:51.680
because Xcode actually does all of
its own dependency analysis for you.

00:47:51.680 --> 00:47:54.890
What this allows us to do is maintain
your build state at all time,

00:47:55.010 --> 00:47:58.690
so the benefit of that is we can now
give you feedback directly through the

00:47:58.690 --> 00:48:01.860
UI when your files become out of sync.

00:48:01.860 --> 00:48:06.690
It also allows us to deliver
faster single file compilation.

00:48:07.380 --> 00:48:10.970
What we wanted to do is
take it one step further.

00:48:11.030 --> 00:48:15.960
We've introduced a new technology
called Predictive Compile.

00:48:16.020 --> 00:48:18.770
Normally when you go to
compile an application,

00:48:18.840 --> 00:48:22.590
you do your debugging,
you save your file, and then you wait.

00:48:22.620 --> 00:48:25.360
And sometimes you wait a little longer.

00:48:25.420 --> 00:48:29.790
But with Predictive Compile turned on,
the experience you're going to have is

00:48:29.790 --> 00:48:33.450
Xcode is going to go out there in the
background and start to compile your

00:48:33.450 --> 00:48:35.730
headers while you're doing the editing.

00:48:35.730 --> 00:48:39.460
So we're taking care of about 80%
of the time that it takes to compile

00:48:39.460 --> 00:48:42.100
for you while you're still working.

00:48:42.180 --> 00:48:43.870
So then when you go to
hit the save button now,

00:48:43.870 --> 00:48:45.940
you're not going to do
the waiting game anymore.

00:48:45.950 --> 00:48:50.050
What's going to happen is you're going to
have a really great user experience and

00:48:50.050 --> 00:48:52.350
the file will be back in time for you.

00:48:52.760 --> 00:48:56.540
Maintaining your build state also
allows us to deliver features like

00:48:56.540 --> 00:48:59.410
parallel and distributed builds.

00:49:01.170 --> 00:49:04.920
Xcode also supports
multiple target types.

00:49:04.920 --> 00:49:07.830
We're introducing a new
target called Native Targets.

00:49:07.980 --> 00:49:10.820
This gives you a lot of flexibility.

00:49:10.860 --> 00:49:15.880
What you can do now with Xcode is
mix and match the different target

00:49:15.880 --> 00:49:18.500
types within a given project.

00:49:18.500 --> 00:49:22.670
So you can migrate one target
at a time independently.

00:49:22.680 --> 00:49:26.800
So this allows you to manage
your own process of migration.

00:49:26.800 --> 00:49:29.570
We want to encourage you to migrate
over to Native Targets because then

00:49:29.570 --> 00:49:32.560
you'll be able to take advantage
of all the new great features that

00:49:32.560 --> 00:49:35.210
we're showing you inside of Xcode.

00:49:35.740 --> 00:49:40.200
We also are introducing extensible
rules with native targets.

00:49:40.360 --> 00:49:46.090
What this allows you to do is modify the
built-in rules that we ship with Xcode.

00:49:46.960 --> 00:49:50.000
So you can actually pick which
compiler you want to use,

00:49:50.000 --> 00:49:52.610
which res tool you want to use,
and do any other mapping

00:49:52.620 --> 00:49:53.820
that you may choose.

00:49:54.030 --> 00:49:58.040
So now you can solve both
simple and complex problems

00:49:58.040 --> 00:50:00.460
by modifying these rules.

00:50:01.080 --> 00:50:04.550
Xcode also supports
Project Builder targets and

00:50:04.550 --> 00:50:07.100
custom built targets like Make,
Jam,

00:50:07.180 --> 00:50:10.010
and Ant and other command line tools.

00:50:10.550 --> 00:50:13.000
Now you've heard a bit about
distributed builds already today.

00:50:13.000 --> 00:50:15.870
This is a really great feature.

00:50:16.150 --> 00:50:19.670
What we're doing with distributed
builds is we're taking some open source

00:50:19.670 --> 00:50:25.360
code called DiskCC and also taking
advantage of the Rendezvous technology.

00:50:25.360 --> 00:50:29.510
So you're all familiar with your
normal developer work environment,

00:50:29.560 --> 00:50:33.220
but with distributed builds,
what we're encouraging you to do is

00:50:33.260 --> 00:50:39.410
to take advantage of the entire unused
computing power across your work group.

00:50:39.540 --> 00:50:44.900
So if you have a larger project, you can,
you know, if someone's surfing the

00:50:44.900 --> 00:50:47.980
web or reading email,
take advantage of the computing

00:50:48.110 --> 00:50:49.780
power that they're not using.

00:50:49.780 --> 00:50:54.640
So what you've created is a work
fleet across your work group.

00:50:54.660 --> 00:50:57.150
If you have larger projects, you can take

00:50:57.300 --> 00:51:01.280
You can also distribute your
builds across a build fleet,

00:51:01.350 --> 00:51:04.200
kind of like the one we have over here,
this XServe rack.

00:51:04.270 --> 00:51:09.610
I'd like to invite Stan Jirman on stage
to give you a demo of distributed builds.

00:51:15.700 --> 00:51:16.600
Thank you, Toni.

00:51:16.600 --> 00:51:20.080
So as Toni already pointed out,
we have a small build fleet here because

00:51:20.080 --> 00:51:23.570
we don't have any engineers who would
be surfing the web or reading email.

00:51:23.780 --> 00:51:26.910
All of our engineers are happily
working on the great code so

00:51:26.910 --> 00:51:28.600
that we can make CDs for you.

00:51:30.630 --> 00:51:34.290
On my machine here,
I have Definder front end sources

00:51:34.290 --> 00:51:36.720
from Panther running on Panther.

00:51:36.740 --> 00:51:38.600
And as Steve pointed out
earlier today in the keynote,

00:51:38.600 --> 00:51:44.520
as you have seen,
that's over 100,000 C++ lines and

00:51:44.610 --> 00:51:46.600
1,500 files or something like that.

00:51:46.600 --> 00:51:49.440
So this machine is connected
to the rack of XSERPs,

00:51:49.440 --> 00:51:53.320
and I'm just going to press build,
and if somebody has a stopwatch or a

00:51:53.320 --> 00:51:59.580
cell phone with a feature like that,
it should be fairly quick.

00:52:00.600 --> 00:52:03.350
So if you direct your attention
to the rack of XSERPs,

00:52:03.350 --> 00:52:07.600
at least the part of people sitting here,
you will see a lot of nice blinky lights.

00:52:07.600 --> 00:52:10.600
We should have a view up there.

00:52:10.600 --> 00:52:14.790
And we're building Finder now.

00:52:14.790 --> 00:52:19.790
The whole stack of 1,500 files.

00:52:20.230 --> 00:52:24.060
and it should take just about a minute.

00:52:24.220 --> 00:52:29.920
Steve was talking in the keynote of
90 seconds on four or five machines.

00:52:30.000 --> 00:52:33.760
We're using a few more here,
but you will find that

00:52:33.760 --> 00:52:35.940
actually this is overkill.

00:52:36.010 --> 00:52:39.910
You probably don't have a
rack of how many Xers at home.

00:52:40.910 --> 00:52:46.430
This is a demo of the
Finder demo machine.

00:52:46.430 --> 00:52:52.080
The servers are idle and sitting pretty.

00:52:52.080 --> 00:53:00.010
We see that Finder has succeeded
and we can actually run it.

00:53:00.010 --> 00:53:04.430
This is not an optimized build.

00:53:04.430 --> 00:53:09.790
It's using the ZeroLink technology.

00:53:10.820 --> 00:53:13.050
As was pointed out earlier,
it will take a little

00:53:13.050 --> 00:53:15.670
bit longer to launch,
but you've got the Finder here and

00:53:15.810 --> 00:53:20.500
it's fully functional and fully built.

00:53:21.180 --> 00:53:29.690
Now, what we can do is to show you why we
actually have a big fleet up here.

00:53:29.690 --> 00:53:29.690
I'm going to clean it.

00:53:30.380 --> 00:53:35.690
And I actually have two machines
here to build the Finder.

00:53:35.940 --> 00:53:38.540
Let me build this one as well.

00:53:38.540 --> 00:53:39.840
We don't have it.

00:53:39.840 --> 00:53:43.360
I think I triggered a
Steve Jobs kind of slow-mo thing.

00:53:43.360 --> 00:53:46.580
Looks funny,
but... So I'm going to kick off

00:53:46.580 --> 00:53:51.350
that build of Finder and let me
actually restart this one as well.

00:53:51.630 --> 00:53:53.720
We're launching Xcode.

00:53:53.720 --> 00:53:56.340
And so if you have a stopwatch,
how long is it going to take when

00:53:56.340 --> 00:53:59.880
we're building two finders at the
same time using that build fleet?

00:54:00.070 --> 00:54:02.600
Well, you will find out it's
actually not so much more.

00:54:02.750 --> 00:54:07.990
It will be a little bit over one minute,
because the machines before,

00:54:07.990 --> 00:54:12.840
they were sitting more or less idle,
and now when you look at the

00:54:12.840 --> 00:54:18.230
speed as it's flicking through,
we're building somebody do a count of

00:54:18.230 --> 00:54:20.010
how many source files at the same time.

00:54:20.960 --> 00:54:25.820
The sweet spot lies with less than
those machines that we have here.

00:54:25.890 --> 00:54:28.800
You will actually find out
that with four or six machines,

00:54:28.890 --> 00:54:33.910
you really reach almost
full speed already.

00:54:37.050 --> 00:54:42.420
What was the last time you
saw this many Xers on stage?

00:54:42.470 --> 00:54:48.190
It also shows you don't have
to go buy a full 42 unit rack.

00:54:48.770 --> 00:54:56.820
and a few more will be doing.

00:54:56.820 --> 00:54:56.820
Now we're done compiling here.

00:54:56.820 --> 00:54:56.820
The last file is compiling, linking and

00:54:58.750 --> 00:55:01.610
The other computer is already
done because I clicked it earlier,

00:55:01.610 --> 00:55:04.140
and now we build two
finders in this time.

00:55:04.140 --> 00:55:07.140
So, with that, back to you Toni.

00:55:13.300 --> 00:55:15.000
Thank you, Stan.

00:55:15.000 --> 00:55:17.760
So what we're really doing here is
taking something that used to take

00:55:17.800 --> 00:55:22.290
hours to do and doing it in as little
time as it takes to take a coffee break.

00:55:22.430 --> 00:55:25.580
So the power of distributed builds.

00:55:25.740 --> 00:55:27.250
So I'd like to shift gears for a minute.

00:55:27.260 --> 00:55:29.190
In addition to being
the director of Xcode,

00:55:29.190 --> 00:55:31.240
I'm also the director of WebObjects.

00:55:31.340 --> 00:55:34.110
And over the past year or so,
a good number of you have

00:55:34.110 --> 00:55:36.440
come up and asked me,
"What about EOF?

00:55:36.860 --> 00:55:39.920
Can you put it back into the
operating system?" So we're

00:55:39.990 --> 00:55:44.340
taking a step in that direction,
and we've come up with a new technology,

00:55:44.360 --> 00:55:47.360
a new binding technology
that we've added to Cocoa.

00:55:47.430 --> 00:55:51.950
And it is created with the
analogy of EOF's interface

00:55:51.950 --> 00:55:54.750
layer inside of WebObjects.

00:55:55.410 --> 00:55:58.320
So what's really neat about this
is it's completely integrated

00:55:58.590 --> 00:56:01.360
with Interface Builder,
so you can take advantage of this new

00:56:01.450 --> 00:56:03.800
Cocoa binding without writing any code.

00:56:03.900 --> 00:56:07.280
And the benefit of this is that
you can write your applications

00:56:07.280 --> 00:56:08.920
a lot faster and a lot easier.

00:56:09.020 --> 00:56:11.720
And I believe if you attended the
session in this room prior to this one,

00:56:11.810 --> 00:56:13.280
it was also demoed for you.

00:56:13.460 --> 00:56:16.540
If you're interested in this technology,
there's a couple of

00:56:16.550 --> 00:56:18.930
sessions dedicated to it,
the first one being

00:56:19.010 --> 00:56:22.380
session 412 on Wednesday,
so I suggest that you attend that.

00:56:22.410 --> 00:56:24.460
It's a great technology.

00:56:24.520 --> 00:56:28.550
I also wanted to thank the WebObjects
engineering team for working so hard to

00:56:28.620 --> 00:56:31.130
get this technology into Panther for you.

00:56:31.220 --> 00:56:34.210
With that,
I'd like to turn it back over to Ted.

00:56:38.200 --> 00:56:39.840
Thank you, Toni.

00:56:39.950 --> 00:56:43.830
So this is really great.

00:56:44.540 --> 00:56:47.400
Did I mention this was
a developer preview?

00:56:47.520 --> 00:56:51.210
So there are,
I think one of the things that though

00:56:51.210 --> 00:56:59.080
isn't developer preview is the GCC 3.3
that is on your disks both on the

00:56:59.080 --> 00:57:02.250
Panther and the Jaguar versions of Xcode.

00:57:02.340 --> 00:57:07.220
The compiler itself is GM,
and so you can ship applications with it.

00:57:07.220 --> 00:57:10.050
The tools themselves clearly, you know,
where this is the first time

00:57:10.120 --> 00:57:13.790
we're handing out to you,
but the compiler itself is GM.

00:57:13.800 --> 00:57:17.860
Obviously,
what we're trying to do here is to

00:57:17.920 --> 00:57:19.530
compile both smarter and faster.

00:57:19.630 --> 00:57:22.730
And we've built upon technologies
that were built into GCC of

00:57:22.730 --> 00:57:25.370
pre-compiled headers,
and we've improved it.

00:57:25.550 --> 00:57:28.800
We've tuned the memory management system,
we've tuned the algorithms,

00:57:28.800 --> 00:57:33.820
we've added in the predictive compiler
for very fast interactive response,

00:57:33.850 --> 00:57:38.400
we've added in distributed builds
for large full build response.

00:57:38.650 --> 00:57:39.900
And this is really, I think,
a fabulous platform for

00:57:39.900 --> 00:57:40.520
all of us to work together.

00:57:40.540 --> 00:57:42.340
And I think it's a really,
really good platform and foundation

00:57:42.340 --> 00:57:45.160
for what we're trying for making and
improving program of productivity.

00:57:45.320 --> 00:57:46.860
And this is the compiler's part of it.

00:57:48.310 --> 00:57:52.590
But GCC is also extremely critically
important at providing you the

00:57:52.720 --> 00:57:54.760
performance for your application itself.

00:57:54.780 --> 00:57:57.170
It's not enough for it
to simply execute fast,

00:57:57.300 --> 00:57:59.800
it also has to generate great code.

00:57:59.960 --> 00:58:03.440
And so we've also put a tremendous
amount of time on increasing and

00:58:03.620 --> 00:58:07.160
improving the optimization technology.

00:58:07.310 --> 00:58:10.470
A big part of that has been spec, Mark,
and you heard this morning it helps

00:58:10.570 --> 00:58:13.590
us compare one system to another.

00:58:13.710 --> 00:58:17.020
One of the big important parts
about the G5 is that the G5 has

00:58:17.120 --> 00:58:21.210
unique and important architectural
features that the GCC compiler

00:58:21.410 --> 00:58:24.000
is designed to generate code for.

00:58:24.120 --> 00:58:29.660
So the big word in CPU design is ILP,
Instruction Level Parallelism.

00:58:29.730 --> 00:58:34.270
And essentially what a CPU does
is it processes through a very

00:58:34.270 --> 00:58:39.090
long pipeline of instructions and
tries to execute through multiple

00:58:39.090 --> 00:58:41.360
functional units at the same time.

00:58:41.490 --> 00:58:44.780
So really this idea of a program
counter really is something

00:58:44.780 --> 00:58:48.840
that is this notion is not that
it's executing one instruction,

00:58:48.850 --> 00:58:51.300
it's executing multiple
instructions in flight.

00:58:51.350 --> 00:58:54.100
You heard this morning,
215 instructions in flight.

00:58:54.150 --> 00:58:57.440
Well essentially part of what the
compiler is doing is it's scheduling

00:58:57.440 --> 00:59:01.790
and interleaving multiple operations,
multiple statements of your program

00:59:02.050 --> 00:59:04.100
to be executed simultaneously.

00:59:04.190 --> 00:59:05.440
And that's a hard thing to do.

00:59:05.500 --> 00:59:09.500
And GCC is doing this a tremendous
and terrific job for doing that.

00:59:09.660 --> 00:59:13.350
And as well,
because we have so much in flight,

00:59:13.400 --> 00:59:13.400
the CPU is also capable of doing that.

00:59:13.480 --> 00:59:17.400
It's also capable of prefetching
both the instructions and the data.

00:59:17.400 --> 00:59:20.950
And because of that,
there are these incredible I/O channels

00:59:21.100 --> 00:59:27.240
that is pulling data both out of memory
and paging in off of disk to make things,

00:59:27.240 --> 00:59:30.700
to keep the functional units fed.

00:59:30.700 --> 00:59:35.560
GCC performance is designed to take
advantage of these features and to

00:59:35.630 --> 00:59:39.620
create these incredibly good performance
numbers that we're talking about.

00:59:40.040 --> 00:59:43.970
So when we look at where we've
come from GCC 3.1 to 3.3,

00:59:44.030 --> 00:59:47.240
we actually see benchmark performance
improvement of anywhere from 10

00:59:47.320 --> 00:59:49.640
to 30% on individual benchmarks.

00:59:49.780 --> 00:59:53.590
My favorite one, in fact, is Eon,
one of the GCC spec benchmarks,

00:59:53.810 --> 00:59:58.600
and we improved that by 50%. Eon
is a C++ benchmark with over 200,

00:59:58.600 --> 01:00:01.050
250 or so virtual functions.

01:00:01.210 --> 01:00:06.460
So one of the things is that the G5 is,
in fact, it's about,

01:00:06.480 --> 01:00:12.020
it's 150% of the Intel Pentium's
benchmark performance.

01:00:12.140 --> 01:00:16.650
150%. So in fact,
the G5 is the best machine

01:00:16.850 --> 01:00:18.100
for object-oriented code.

01:00:18.170 --> 01:00:21.460
This is a really terrific device,
and I think for your applications

01:00:21.460 --> 01:00:29.960
that use virtual functions or
Objective-C polymorphic message sends,

01:00:30.050 --> 01:00:31.060
this is the device that
you're going to be using.

01:00:31.060 --> 01:00:32.320
So this is a really great device for you.

01:00:32.320 --> 01:00:36.320
We've seen many applications
improve by 40% from just migrating

01:00:36.320 --> 01:00:38.060
from one compiler to another.

01:00:38.120 --> 01:00:41.780
And even extremely well-tuned apps,
apps that we've focused

01:00:41.780 --> 01:00:45.740
the performance tools on,
we've seen performance improvements of

01:00:46.010 --> 01:00:48.910
5% by just improving the alignment flags.

01:00:49.130 --> 01:00:52.060
If you read the release notes
in with the GCC compiler,

01:00:52.060 --> 01:00:54.060
you'll see those flags.

01:00:54.200 --> 01:00:56.050
Your mileage, of course, may vary.

01:00:56.060 --> 01:00:58.050
So it's not all about flags.

01:00:58.130 --> 01:01:00.060
It's also about performance
tuning and using the tools,

01:01:00.060 --> 01:01:01.050
which we'll talk about in a minute.

01:01:01.060 --> 01:01:02.840
few minutes.

01:01:04.150 --> 01:01:07.780
So, very quick run-through again
of the spec benchmarks.

01:01:08.040 --> 01:01:12.420
The ones you saw this morning,
the formal names are SpecIntBase2000,

01:01:12.420 --> 01:01:16.000
SpecFPBase2000,
the multi-process benchmarks

01:01:16.190 --> 01:01:21.000
SpecIntRateBase2000,
SpecFPRateBase2000.

01:01:21.150 --> 01:01:25.560
These are the benchmarks that
really mainframe computers have been

01:01:25.560 --> 01:01:31.000
comparing each other over the years,
and which today your G5 is one of them.

01:01:31.000 --> 01:01:35.000
We used, because we ourselves from
Apple do not provide a Fortran,

01:01:35.000 --> 01:01:39.000
we used a terrific Fortran implementation
from Numeric Algorithmics Group,

01:01:39.060 --> 01:01:41.000
their Fortran 95 implementation.

01:01:41.010 --> 01:01:46.000
And it's a terrific Fortran that
front-ends the GCC compiler.

01:01:46.680 --> 01:01:48.130
We hired this company called Veritest.

01:01:48.140 --> 01:01:52.330
Veritest used to be the old
ZD Labs used in the ZD magazines

01:01:52.630 --> 01:01:54.930
and to perform the CPU 2000.

01:01:55.130 --> 01:01:58.600
That's the name that
SPEC gives the overall suite.

01:01:58.740 --> 01:02:01.830
And of course, these are the machines
we compared against.

01:02:03.400 --> 01:03:22.800
[Transcript missing]

01:03:23.840 --> 01:03:29.290
So, and then of course on spec
CPU comparing against the Pentium 4,

01:03:29.290 --> 01:03:32.320
again, they eke us out,
edge us out on integer,

01:03:32.470 --> 01:03:34.310
but we edge them out on floating point.

01:03:34.410 --> 01:03:37.520
And I believe that word processing
is about as fast as it needs to be.

01:03:37.680 --> 01:03:40.550
But I think in the floating point domain,
where we have all this user

01:03:40.550 --> 01:03:44.460
interface and graphics,
image processing, scientific processing,

01:03:44.600 --> 01:03:46.410
the G5 is the hands down winner.

01:03:46.420 --> 01:03:51.730
So with that, if flags aren't enough to
make your application great,

01:03:51.730 --> 01:03:55.420
then you need to accelerate
your applications.

01:03:55.420 --> 01:03:58.180
And so I want to invite Dave Payne up,
Performance Tools Manager,

01:03:58.180 --> 01:04:01.140
to talk a little bit about
the other things you can do.

01:04:01.180 --> 01:04:05.100
Dave.

01:04:07.940 --> 01:04:08.800
Thank you, Ted.

01:04:08.910 --> 01:04:13.260
So, you've seen how we can enable
you to quickly build applications

01:04:13.270 --> 01:04:18.020
with Xcode and how the code
generation is better with GCC now,

01:04:18.400 --> 01:04:19.670
but what if you need more?

01:04:19.970 --> 01:04:23.770
How can Xcode help you make
your applications even faster?

01:04:23.800 --> 01:04:24.520
Ted Goldstein, Steve Naroff,
Toni Trujillo-Vian, Stan Jirman,

01:04:24.570 --> 01:04:27.070
Dave Payne Well,
what we've done is we've directly tied

01:04:27.220 --> 01:04:33.640
Xcode to several of the major performance
tools that we ship with Mac OS X.

01:04:33.640 --> 01:04:36.530
You can launch the performance
tool directly from Xcode,

01:04:36.530 --> 01:04:39.880
almost as if it's a debugger,
with your executable as the

01:04:39.880 --> 01:04:42.520
target application from there.

01:04:42.520 --> 01:04:45.850
And then as you're navigating through
the data from the performance tool,

01:04:45.860 --> 01:04:49.640
if you find hotspots in your code,
we highlight that code and you can

01:04:49.670 --> 01:04:53.800
double-click on it and get directly back
to the source code in your application.

01:04:53.800 --> 01:05:00.270
So, this lets you look at a
variety of performance aspects.

01:05:00.340 --> 01:05:03.120
If your application is too slow,
for example,

01:05:03.130 --> 01:05:06.980
you can look at application-level
profiling with our statistical

01:05:07.210 --> 01:05:10.710
profiling application sampler.

01:05:10.760 --> 01:05:14.160
If you're using too much memory,
or leaking memory,

01:05:14.160 --> 01:05:17.910
which is a bad thing because
that might end up causing paging,

01:05:18.010 --> 01:05:21.880
you can use malloc debug to look at that.

01:05:21.880 --> 01:05:25.150
To study your object allocation
and deallocation patterns,

01:05:25.150 --> 01:05:29.670
perhaps you're creating too many
short-lived objects too much.

01:05:29.780 --> 01:05:31.880
Object alloc is great for that.

01:05:31.880 --> 01:05:35.680
And to really let you take
advantage of the raw CPU processing

01:05:35.680 --> 01:05:40.690
power that you've got here,
there's a lower-level machine

01:05:40.730 --> 01:05:43.970
profiling tool called Shark,
which is part of the Chud tools

01:05:44.040 --> 01:05:47.110
that I'll mention here briefly.

01:05:48.780 --> 01:05:51.620
We've also enhanced some of the
tools to give you some new ways

01:05:51.620 --> 01:05:54.710
of studying application behavior.

01:05:56.080 --> 01:06:01.970
Hi, in the Sampler Profiling Tool,
basically what it does is it takes a call

01:06:01.970 --> 01:06:06.120
stack at specific time and intervals,
and we build up a tree

01:06:06.140 --> 01:06:07.400
of those call stacks.

01:06:07.530 --> 01:06:09.840
Previously it just showed
you a browser view,

01:06:09.840 --> 01:06:11.800
we've added an outline view for that.

01:06:11.800 --> 01:06:15.660
We've added a new ability to
look at dynamic behavior of your

01:06:15.660 --> 01:06:17.980
application with event tracing.

01:06:18.000 --> 01:06:26.060
So, what we can do is show you for every,
let's say that you stop on

01:06:26.060 --> 01:06:31.000
malloc and dealloc calls,
for every time it hits,

01:06:31.000 --> 01:06:35.860
we'll show you a table of the
call stack for each specific hit.

01:06:36.270 --> 01:06:41.900
Then we show a graph with the
height of the stack at that instant.

01:06:42.230 --> 01:06:45.070
What that lets you do is see
patterns of calling in your code,

01:06:45.070 --> 01:06:47.000
and you can click on the
graph at that point and see,

01:06:47.000 --> 01:06:48.930
"Wow,
what is going on?" "What is going on

01:06:48.930 --> 01:06:53.000
here that I'm repeating this certain
activity over and over again?"

01:06:54.800 --> 01:07:00.940
We also, how many of you have seen this
spinning rainbow wheel come up a

01:07:00.940 --> 01:07:02.700
little too often in your application?

01:07:02.870 --> 01:07:04.300
That's not a good thing.

01:07:04.430 --> 01:07:08.350
We've added an ability to automatically
catch when that happens with an

01:07:08.420 --> 01:07:10.380
application called Spin Control.

01:07:10.460 --> 01:07:15.510
Just have that application running,
and when that little cursor comes up,

01:07:15.510 --> 01:07:19.560
it automatically samples in the
background and you can go see what was

01:07:19.560 --> 01:07:22.280
going on during that period of time.

01:07:23.640 --> 01:07:26.500
Now I mentioned the Shark profiling tool.

01:07:26.500 --> 01:07:30.650
That's part of a package of tools
that's been upgraded for this release.

01:07:30.750 --> 01:07:33.230
It's called the CHUD tools,
for Computer Hardware

01:07:33.320 --> 01:07:35.500
Understanding Developer Tools.

01:07:35.500 --> 01:07:38.960
What these do is really give you
access to the performance monitor

01:07:38.960 --> 01:07:42.480
counters built into the processor
and the memory controller.

01:07:42.600 --> 01:07:47.500
These tools have a lot of deep
knowledge of the architecture built in,

01:07:47.500 --> 01:07:50.820
so they really understand the
pro--they've got models of the

01:07:50.820 --> 01:07:55.250
processors for both the G4 and the G5,
and can show you specific

01:07:55.390 --> 01:08:00.500
optimization tips at specific lines
of source code or assembly code.

01:08:00.500 --> 01:08:03.500
Are certain things causing
cache misses right here,

01:08:03.570 --> 01:08:04.490
for example?

01:08:04.500 --> 01:08:07.500
So Shark is great for seeing
these kinds of things,

01:08:07.500 --> 01:08:12.300
both within a specific application
and across the system as a whole.

01:08:12.700 --> 01:08:16.540
Because it takes advantage of kernel
extension that lets you look at

01:08:16.540 --> 01:08:21.390
what's going on in real time in your
application and the entire system.

01:08:21.500 --> 01:08:24.870
Monster is a spreadsheet
for performance events,

01:08:25.010 --> 01:08:28.270
and there's a number of
additional tools as well.

01:08:28.500 --> 01:08:31.500
In the interest of time,
we're going to skip over the demo here.

01:08:31.500 --> 01:08:35.500
You can come to the performance tool
sessions on Wednesday to see that.

01:08:35.500 --> 01:08:39.950
So we've hope--we've excited you with
a lot of the cool technology that

01:08:39.990 --> 01:08:42.250
we've been putting into Xcode here.

01:08:42.500 --> 01:08:47.500
We want to make it easy for you
to adopt this and remove barriers

01:08:47.500 --> 01:08:51.500
that might get in your way in
your environment of getting here.

01:08:51.500 --> 01:08:56.290
So we put a lot of work into the
importer so we can import projects from

01:08:56.610 --> 01:08:59.500
Code Warrior into Xcode very easily.

01:08:59.500 --> 01:09:02.910
What we do is we Apple script
out to Code Warrior and ask

01:09:02.910 --> 01:09:06.500
it to export the project into
XML in the format we want it.

01:09:06.500 --> 01:09:09.520
We then read it in,
create all the targets in

01:09:09.630 --> 01:09:11.940
the order you specified,
populate them all the

01:09:12.010 --> 01:09:15.600
way through the code,
map all your Code Warrior compiler

01:09:15.610 --> 01:09:20.330
settings over to GCC compiler settings,
build up your info p list.

01:09:20.500 --> 01:09:24.500
One thing that we don't have
yet in this developer preview

01:09:24.500 --> 01:09:28.500
will be there for Panther final
is cross project references,

01:09:28.500 --> 01:09:30.500
which has been very heavily requested.

01:09:30.500 --> 01:09:32.500
If you have references
out to other projects,

01:09:32.500 --> 01:09:36.890
we'll automatically import those as well,
and the build system

01:09:36.890 --> 01:09:38.280
will understand that.

01:09:39.040 --> 01:09:43.140
Once your project is in,
it won't necessarily fully compile,

01:09:43.140 --> 01:09:46.300
but we've made some additional
changes to enhance that.

01:09:46.310 --> 01:09:49.860
We've added Code Warrior style
assembly syntax to GCC,

01:09:49.860 --> 01:09:52.610
that's a higher level,
a bit easier to program.

01:09:52.800 --> 01:09:55.600
And we've had a lot of requests
for wide character support,

01:09:55.740 --> 01:09:57.140
so we've added that in as well.

01:09:57.180 --> 01:09:59.450
It's built into the system
libraries in Panther,

01:09:59.620 --> 01:10:04.110
and there's a third-party solution
from Dinkumware for Jaguar.

01:10:05.170 --> 01:10:07.600
SDKs we've touched on before.

01:10:07.600 --> 01:10:11.360
We ship header files and stub
libraries for Mac OS 10.1,

01:10:11.360 --> 01:10:14.040
Mac OS 10.2, and now for Panther.

01:10:14.210 --> 01:10:18.080
So from X.2 you could develop
for any of these OSes.

01:10:18.180 --> 01:10:21.460
Gives you a lot more
flexibility in your environment.

01:10:21.530 --> 01:10:24.780
And in talking to a lot of our
large developers and listening

01:10:24.780 --> 01:10:27.780
to you in feedback forums,
we've heard that Perforce is

01:10:27.780 --> 01:10:32.490
a very heavily used source
code control mechanism.

01:10:33.380 --> 01:10:36.720
So we've worked with that team,
a company from Alameda,

01:10:36.860 --> 01:10:42.890
to integrate that into Xcode,
as well as the open source standard CVS.

01:10:44.040 --> 01:10:48.460
So, we've quickly seen here some of
the ways that we make it help

01:10:48.750 --> 01:10:53.610
you develop fast applications,
in addition to developing them quickly,

01:10:53.610 --> 01:10:57.930
and our efforts to make
it easy to adopt Xcode.

01:10:57.940 --> 01:11:00.750
So, if you want to give it a try,
we've got people in labs

01:11:00.750 --> 01:11:04.480
throughout the week,
and come more to the Developing

01:11:04.480 --> 01:11:08.180
Carbon Applications with
Apple Tools session on Thursday morning

01:11:08.180 --> 01:11:10.120
to see the import process in detail.

01:11:10.120 --> 01:11:12.770
Thank you, Dave.

01:11:18.690 --> 01:11:23.520
So,
what we have is a terrific architecture.

01:11:23.520 --> 01:11:26.540
What we plan for GM is
to make it faster yet.

01:11:26.610 --> 01:11:29.480
We'll be adding in Java and
WebObjects support,

01:11:29.600 --> 01:11:33.120
and we'll be working
on some of those bugs.

01:11:33.120 --> 01:11:34.910
We want to hear your bug reports.

01:11:34.910 --> 01:11:38.590
We want to hear your feedback,
what you like, what you don't like,

01:11:38.590 --> 01:11:41.150
how--missing features and so on.

01:11:41.230 --> 01:11:44.990
I think the workflow is a tremendous,
tremendous improvement from any

01:11:45.070 --> 01:11:47.910
tool Apple has ever shipped,
and I believe that, in fact,

01:11:48.000 --> 01:11:51.200
we have the basis for something
that's extremely scalable.

01:11:51.270 --> 01:11:53.390
Techniques like smart groups,
for example,

01:11:53.590 --> 01:11:56.680
you can clearly see how we can
add in with many features to help

01:11:56.680 --> 01:12:00.310
people better understand programs,
to help people refactor

01:12:00.380 --> 01:12:01.970
and understand things.

01:12:02.090 --> 01:12:05.340
Beyond this release,
we'll be shipping pretty much

01:12:05.430 --> 01:12:08.070
concurrently with Win Panther ships.

01:12:08.260 --> 01:12:12.140
We'll be adding in, into the compiler,
into module feedback-directed

01:12:12.140 --> 01:12:15.860
optimization and enterprise application
development in future releases.

01:12:15.900 --> 01:12:20.000
These are important technologies that
we have already well under development.

01:12:20.050 --> 01:12:27.400
The enterprise application development
tools that you've seen in tools

01:12:27.400 --> 01:12:28.740
like WebObjects will be working
in so that they're very nicely,

01:12:28.740 --> 01:12:28.740
tightly integrated and so on and such.

01:12:30.860 --> 01:12:32.750
So remember, it's a developer preview.

01:12:32.890 --> 01:12:36.890
There are, you know, we,
there certainly will find

01:12:36.890 --> 01:12:40.840
at least one bug per person.

01:12:40.960 --> 01:12:42.860
But, you know, it's not bad.

01:12:43.030 --> 01:12:47.170
I think that the, we've been living on
it for some time now,

01:12:47.170 --> 01:12:51.780
and we think that this is,
it's certainly of quality

01:12:51.780 --> 01:12:53.960
that you can release.

01:12:54.670 --> 01:12:58.100
So, developer.apple.com/bugreporter.

01:12:58.100 --> 01:12:59.930
Send feedback to xcode-feedback.

01:12:59.940 --> 01:13:04.240
I promise to read every message and
I'll probably respond to most of them.

01:13:04.360 --> 01:13:13.000
And really want to help you create
better tools and better applications.

01:13:13.000 --> 01:13:16.230
So to wrap up,
speed has been the primary focus.

01:13:16.230 --> 01:13:20.860
Removing obstacles has been a big focus,
has been very supportive.

01:13:20.860 --> 01:13:24.860
We are integrating in Apple script,
Web objects, Java, C, Objective C,

01:13:24.930 --> 01:13:27.460
performance tools into one umbrella.

01:13:27.460 --> 01:13:30.750
And Xcode, I think,
represents a new dimension in

01:13:30.750 --> 01:13:33.330
creating applications for Mac OS X.

01:13:34.810 --> 01:13:36.000
You'll hear more.

01:13:36.000 --> 01:13:42.640
Please join me at the Java State of
the Union immediately following

01:13:42.640 --> 01:13:44.400
this session downstairs.

01:13:44.530 --> 01:13:47.730
Tomorrow,
we have the WebObjects State of the

01:13:48.020 --> 01:13:55.610
Union and even detail to introduction to
Apple DevTools given by Stan tomorrow.

01:13:55.700 --> 01:14:00.620
GCC In-Depth on Wednesday,
knowing how to use the Cocoa Bindings

01:14:00.800 --> 01:14:02.910
mechanism on Wednesday afternoon.

01:14:03.170 --> 01:14:06.910
And Steve will be giving a talk
about the user interface and how

01:14:06.960 --> 01:14:12.260
it was put together and some of
the thought processes behind it.

01:14:12.530 --> 01:14:14.740
Godfrey DeGiorgi will be up
here afterwards to answer

01:14:14.740 --> 01:14:16.180
additional questions.

01:14:16.180 --> 01:14:20.080
There'll be mailing lists
created on list.apple.com.

01:14:20.080 --> 01:14:23.840
And again,
xcode-feedback@group.apple.com.

01:14:24.140 --> 01:14:25.570
Thank you very much and
have a good evening.