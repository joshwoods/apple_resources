WEBVTT

00:00:27.670 --> 00:00:29.550
So this is the WebObjects
Technical Overview.

00:00:29.680 --> 00:00:32.680
And if you attended
the State of the Union,

00:00:32.920 --> 00:00:34.300
a lot of the content is
going to seem similar,

00:00:34.300 --> 00:00:37.320
but we're going to go in a lot more depth
than you saw in the State of the Union.

00:00:37.350 --> 00:00:40.590
And we're going to cover a lot
more parts of the technology.

00:00:40.810 --> 00:00:43.090
So what is this session all about?

00:00:43.200 --> 00:00:46.330
Well, it's really about power,
because WebObjects is about power.

00:00:46.530 --> 00:00:49.740
And this session is about teaching you
how to harness the power of WebObjects

00:00:49.740 --> 00:00:51.700
in the applications you write.

00:00:51.850 --> 00:00:53.120
But it's also about elegance.

00:00:53.120 --> 00:00:55.240
You ask a lot of veteran
WebObjects developers why

00:00:55.370 --> 00:00:58.320
they like using WebObjects,
and they say that it's very elegant.

00:00:58.320 --> 00:01:00.920
And another reason they like it
is because it's sophisticated.

00:01:01.010 --> 00:01:03.660
And the point is not that
WebObjects is sophisticated,

00:01:03.660 --> 00:01:06.210
although it is,
but it helps you build sophisticated

00:01:06.210 --> 00:01:09.250
applications and allows you to
do really difficult things that

00:01:09.600 --> 00:01:14.810
other application development
environments make it very hard to do.

00:01:14.900 --> 00:01:17.300
But fundamentally,
WebObjects is about productivity.

00:01:17.500 --> 00:01:19.990
You have to write a web application,
so you have to get something done.

00:01:19.990 --> 00:01:22.890
And WebObjects helps you get to
market faster and write a better

00:01:22.890 --> 00:01:24.260
application the first time.

00:01:24.280 --> 00:01:27.160
And WebObjects, once you get it,
it's a lot of fun.

00:01:27.160 --> 00:01:29.950
So we're going to hopefully
have some fun today.

00:01:29.960 --> 00:01:32.000
So what are you going to learn?

00:01:32.000 --> 00:01:33.530
You're going to learn what WebObjects is.

00:01:33.530 --> 00:01:34.980
Most of you probably know what it is.

00:01:34.980 --> 00:01:37.200
But most importantly,
we're going to show you what

00:01:37.200 --> 00:01:38.580
you can do with WebObjects.

00:01:38.580 --> 00:01:42.180
And when you think of WebObjects,
you probably think of HTML applications.

00:01:42.180 --> 00:01:44.900
But it's really much more than that,
because it's designed

00:01:44.900 --> 00:01:46.900
to be very flexible,
very modular,

00:01:46.900 --> 00:01:49.930
and so you can target types of
network applications that you

00:01:49.930 --> 00:01:51.160
might not know that you can.

00:01:51.160 --> 00:01:53.390
So we're going to show
you some unique examples.

00:01:53.390 --> 00:01:55.310
And then we're going to
show you how to learn.

00:01:55.320 --> 00:01:57.650
And to learn WebObjects,
you need to know about the building

00:01:57.650 --> 00:02:00.220
blocks and the tools that you
use to build these applications.

00:02:00.220 --> 00:02:01.810
So we're going to look
at each of the tools,

00:02:01.850 --> 00:02:03.640
and we're going to look
at each of the frameworks,

00:02:03.710 --> 00:02:06.380
of the most important frameworks
in any WebObjects application.

00:02:06.380 --> 00:02:08.560
And then we're actually going
to go behind the scenes.

00:02:08.600 --> 00:02:11.680
So we're going to go behind the scenes
in running a WebObjects application,

00:02:11.730 --> 00:02:14.930
so you can get a sense of the objects
that are involved in that application,

00:02:15.010 --> 00:02:18.580
and what your role as a WebObjects
developer is in building those

00:02:18.780 --> 00:02:21.320
objects and adding value to the
objects that we provide you.

00:02:21.340 --> 00:02:24.540
And throughout the session,
the whole idea is to help you

00:02:24.540 --> 00:02:28.180
know and get a sense of how to
start learning this technology.

00:02:29.620 --> 00:02:32.180
So, first of all, what is WebObjects?

00:02:32.300 --> 00:02:34.380
Well,
if we can come up with a one-sentence

00:02:34.380 --> 00:02:37.290
definition that encompasses
everything WebObjects is about,

00:02:37.300 --> 00:02:38.500
this is probably it.

00:02:38.600 --> 00:02:41.360
It's software made up of frameworks
and tools that help you build

00:02:41.360 --> 00:02:44.300
network applications with data
from multiple data sources.

00:02:44.370 --> 00:02:46.790
Well,
this is a long way of saying that really,

00:02:46.790 --> 00:02:49.010
WebObjects is an application server.

00:02:49.810 --> 00:02:52.350
So this isn't a marketing talk,
but if you're going to build

00:02:52.350 --> 00:02:55.820
WebObjects applications,
you need to know why WebObjects

00:02:55.830 --> 00:02:57.590
is a good tool for the job.

00:02:57.730 --> 00:02:59.870
And there are three main reasons,
and these are really three

00:02:59.870 --> 00:03:01.540
themes of the presentation today.

00:03:01.540 --> 00:03:05.360
The first is that WebObjects
lets you focus on business logic.

00:03:05.360 --> 00:03:09.480
Now, lots of other app environments
force you to focus on things that

00:03:09.480 --> 00:03:12.820
you can't add a lot of value to,
like writing the code to

00:03:12.820 --> 00:03:15.370
actually access a database,
like JDBC code,

00:03:15.500 --> 00:03:18.440
or writing SQL to actually
get data from a database.

00:03:19.150 --> 00:03:21.620
But with WebObjects,
we take care of all the minutiae

00:03:21.620 --> 00:03:24.960
of app development that you usually
have to do in other environments,

00:03:24.960 --> 00:03:27.010
and this lets you focus on
writing your business logic.

00:03:27.020 --> 00:03:29.480
And that's why you're writing an
application in the first place.

00:03:30.950 --> 00:03:34.070
And like I said,
one of the reasons lots of people like

00:03:34.070 --> 00:03:35.890
using WebObjects is it's very productive.

00:03:35.890 --> 00:03:37.740
It helps you get to market faster.

00:03:37.930 --> 00:03:41.290
We provide a set of rapid prototyping
tools that allows you to have a working

00:03:41.290 --> 00:03:42.900
application in literally minutes.

00:03:42.990 --> 00:03:46.310
And from there, you iterate and build
this application that,

00:03:46.310 --> 00:03:50.100
as Wiley said in the State of the Union,
your 1.0 application is usually better

00:03:50.100 --> 00:03:54.460
than a 2.0 application that you would get
in another app development environment.

00:03:55.380 --> 00:04:00.130
And the WebObjects development provides
a unique development cycle that

00:04:00.140 --> 00:04:03.600
offers more opportunities for feedback
throughout the whole development cycle.

00:04:03.600 --> 00:04:06.780
So rather than just gathering
customary requirements at the end

00:04:07.150 --> 00:04:10.840
and showing them the final product,
we know that that's not the

00:04:10.840 --> 00:04:12.070
reality of software development.

00:04:12.070 --> 00:04:14.950
Requirements change,
and WebObjects helps you adapt

00:04:14.950 --> 00:04:18.510
to those changing requirements
throughout the development cycle.

00:04:20.050 --> 00:04:20.700
So let's back up.

00:04:20.700 --> 00:04:22.820
Now most of you probably know
what an application server is,

00:04:22.920 --> 00:04:26.680
but let's provide a
broad definition of it.

00:04:26.680 --> 00:04:28.760
Well, an application server
provides a service on the web.

00:04:28.860 --> 00:04:32.030
This could be a banking service,
or a student tracking service,

00:04:32.150 --> 00:04:33.870
or some kind of travel service.

00:04:33.870 --> 00:04:38.540
And the reason you're providing it on the
web is that the value of that application

00:04:38.820 --> 00:04:41.110
is only as good as many users use it.

00:04:41.110 --> 00:04:44.620
So you have tens, hundreds,
maybe thousands of users,

00:04:44.620 --> 00:04:48.030
and it doesn't make sense to deploy
this application on the desktop.

00:04:48.120 --> 00:04:51.320
Now with WebObjects, of course,
you can deploy distributed

00:04:51.320 --> 00:04:54.470
network applications that
run as desktop applications,

00:04:54.530 --> 00:04:57.680
but the point is you want to
distribute this to many people.

00:04:57.760 --> 00:05:00.610
And the people who use your application,
they might just read the

00:05:00.610 --> 00:05:03.050
data in that application,
but most likely they're

00:05:03.050 --> 00:05:05.900
actually contributing to the
data in your repositories.

00:05:05.920 --> 00:05:08.540
And with WebObjects,
we help you use data from multiple

00:05:08.540 --> 00:05:13.270
data repositories and present that in a
meaningful form in your end application.

00:05:13.270 --> 00:05:16.860
And these days,
it's very common for applications

00:05:16.860 --> 00:05:17.180
to exchange and share data.

00:05:17.230 --> 00:05:17.860
And so we're going to
talk about how to do that.

00:05:17.860 --> 00:05:17.860
So let's get started.

00:05:17.860 --> 00:05:17.860
So we're going to start
with a web application.

00:05:17.860 --> 00:05:19.310
data with other applications.

00:05:19.490 --> 00:05:22.840
So rather than an application
just living in its own world,

00:05:22.890 --> 00:05:25.480
we use web services and other
technologies to communicate

00:05:25.480 --> 00:05:29.110
with other applications,
which adds value to all of them.

00:05:29.770 --> 00:05:33.200
So if we can come up with a picture
of what an application server is,

00:05:33.250 --> 00:05:35.460
this is a very simplified form.

00:05:35.460 --> 00:05:38.200
So on the one hand,
we have data repositories.

00:05:38.250 --> 00:05:40.190
And on the other hand,
we have WebObjects.

00:05:40.190 --> 00:05:43.580
And the important thing to know about
WebObjects is that it doesn't matter

00:05:43.580 --> 00:05:45.260
what kind of WebObjects these are.

00:05:45.260 --> 00:05:46.530
They can be HTML clients.

00:05:46.530 --> 00:05:48.620
They can be swing desktop applications.

00:05:48.620 --> 00:05:49.990
They can be Web service clients.

00:05:49.990 --> 00:05:52.690
Or almost anything you can
get to through Java objects.

00:05:52.690 --> 00:05:56.940
And the role of the application
server is to mediate between the data

00:05:56.940 --> 00:06:00.290
sources and between the web clients,
and to help you get data out of

00:06:00.290 --> 00:06:04.040
those data sources and present it
to a meaningful form to web clients.

00:06:04.080 --> 00:06:05.940
And of course,
an application server relies

00:06:05.940 --> 00:06:08.470
on a web server to actually
communicate with the outside world.

00:06:08.470 --> 00:06:10.920
So we're going to go back to that
picture throughout the presentation,

00:06:10.920 --> 00:06:11.770
so keep it in mind.

00:06:11.780 --> 00:06:14.710
So like I said,
when you think of WebObjects, well,

00:06:14.710 --> 00:06:18.560
the word "web" probably
connotes HTML and browsers.

00:06:18.650 --> 00:06:21.920
But that's not all WebObjects is about.

00:06:22.150 --> 00:06:25.020
With WebObjects, out of the box,
you can target almost any

00:06:25.040 --> 00:06:26.280
type of network client.

00:06:26.470 --> 00:06:30.000
Most commonly,
people target HTML clients, web browsers.

00:06:30.130 --> 00:06:32.730
But also,
it's very common to target swing clients.

00:06:32.750 --> 00:06:35.440
These are desktop applications
that run on the user's machine,

00:06:35.440 --> 00:06:39.350
much like Word or iPhoto
or something like that.

00:06:39.370 --> 00:06:42.420
And the reason you would do this
is you want to provide a more rich

00:06:42.420 --> 00:06:44.340
user interface than HTML allows.

00:06:44.720 --> 00:06:46.830
But also, with WebObjects,
out of the box,

00:06:46.830 --> 00:06:49.910
we also allow you to target SOAP clients,
generic XML clients,

00:06:49.910 --> 00:06:52.580
and even something called SMILE,
which is the synchronized

00:06:52.580 --> 00:06:55.570
multimedia integration language
that's supported by QuickTime,

00:06:55.590 --> 00:06:57.660
RealPlayer, other multimedia clients.

00:06:57.660 --> 00:07:00.710
And we provide a specialized
framework so you can build very

00:07:00.710 --> 00:07:03.820
rich multimedia applications,
standard-based applications

00:07:04.260 --> 00:07:07.840
that have all the rich access to
databases that WebObjects provides.

00:07:07.840 --> 00:07:10.860
And because WebObjects
is written in Java,

00:07:10.860 --> 00:07:14.700
you can target almost any type of
network client that you can get to.

00:07:14.720 --> 00:07:18.120
through Java, such as PDF and SVG.

00:07:18.610 --> 00:07:22.030
So just like WebObjects helps you target
almost any type of network client,

00:07:22.150 --> 00:07:25.560
you can use data from almost
any type of data source.

00:07:25.660 --> 00:07:27.980
And out of the box,
we provide connectivity to

00:07:27.980 --> 00:07:30.600
JDBC and JNDI data sources.

00:07:30.710 --> 00:07:35.830
And other third parties provide
connectivity to other solutions,

00:07:35.830 --> 00:07:36.990
such as SAP.

00:07:37.200 --> 00:07:41.100
So one of the best parts about WebObjects
is that it allows you to access these

00:07:41.100 --> 00:07:43.460
data sources through Java objects.

00:07:43.550 --> 00:07:46.770
So rather than have to worry about
writing your own JDBC or JNDI code to

00:07:46.780 --> 00:07:50.110
actually connect to these data sources,
we provide abstractions

00:07:50.330 --> 00:07:51.220
to these data sources.

00:07:51.220 --> 00:07:54.110
And you interact with these objects,
and usually you don't actually

00:07:54.210 --> 00:07:56.340
need to interact at all
to make these connections,

00:07:56.410 --> 00:07:58.320
these objects which are Java objects.

00:07:58.320 --> 00:08:00.950
So you think in Java,
you think at a very high level,

00:08:00.960 --> 00:08:04.440
you think in object-oriented terms,
and WebObjects does the work of

00:08:04.440 --> 00:08:06.320
connecting to data sources for you.

00:08:07.100 --> 00:08:10.280
And just like it takes care of
accessing those data sources,

00:08:10.280 --> 00:08:13.480
it also allows you to express
your business logic in Java.

00:08:13.480 --> 00:08:16.860
So a common way of expressing business
logic is to do it in the database,

00:08:16.950 --> 00:08:20.340
so doing it with stored procedures
and triggers and things like that.

00:08:20.390 --> 00:08:22.350
And that locks you into that database.

00:08:22.360 --> 00:08:24.530
You have to write in very low-level code.

00:08:24.530 --> 00:08:26.850
But with WebObjects,
we allow you to express

00:08:26.920 --> 00:08:30.360
that business logic in Java,
which is really a much more pleasant

00:08:30.550 --> 00:08:32.480
way to write your business logic.

00:08:32.500 --> 00:08:34.310
And how do we do this?

00:08:34.310 --> 00:08:37.000
We do this through software that
we call the Enterprise Objects.

00:08:37.110 --> 00:08:41.560
And this is kind of the crown jewel
of WebObjects application development.

00:08:41.560 --> 00:08:44.640
This is the technology that
helps you access databases,

00:08:44.650 --> 00:08:48.240
helps you write your business logic,
and is really the core element

00:08:48.240 --> 00:08:50.580
to any WebObjects application.

00:08:50.580 --> 00:08:53.920
You're going to become
familiar with these two icons.

00:08:53.920 --> 00:08:56.520
The one on the left is
the icon for EOModeler.

00:08:56.540 --> 00:08:59.770
And EOModeler is an application
that helps you build EOModels,

00:08:59.770 --> 00:09:02.050
which is the icon
represented on the right.

00:09:02.140 --> 00:09:04.970
And these EOModels are
descriptions of your data.

00:09:05.000 --> 00:09:06.970
They help WebObjects.

00:09:06.980 --> 00:09:11.240
They provide WebObjects a mapping between
your relational data and Java objects.

00:09:11.240 --> 00:09:14.800
We're going to talk much more
about that in this session.

00:09:14.800 --> 00:09:17.980
So let's go into a little more
depth about the three types of most

00:09:17.980 --> 00:09:21.430
common types of client applications
you target with WebObjects.

00:09:21.440 --> 00:09:23.970
And the first is HTML applications.

00:09:23.990 --> 00:09:26.850
And the goal here is you want
to provide dynamic content,

00:09:26.870 --> 00:09:29.110
and you want to provide
it to web browsers.

00:09:29.120 --> 00:09:32.640
You might have an online catalog,
and you want to provide customers

00:09:32.640 --> 00:09:36.560
with a customized look and experience
when they enter your catalog.

00:09:36.860 --> 00:09:39.720
With WebObjects,
you build the pages that your

00:09:40.020 --> 00:09:42.980
HTML applications express with templates.

00:09:42.980 --> 00:09:46.540
And these templates are built on the
ideas in a proven component model.

00:09:46.580 --> 00:09:49.430
And what we mean by that is we
spent a long time coming up with

00:09:49.520 --> 00:09:51.520
the best way to design these pages.

00:09:51.640 --> 00:09:55.700
So you build these templates,
which are based on this model.

00:09:55.740 --> 00:09:59.560
And this component model has
a lot of interesting features.

00:09:59.630 --> 00:10:02.230
One, the templates you write
are usually reusable,

00:10:02.280 --> 00:10:05.460
so you can reuse the same
templates within one application

00:10:05.540 --> 00:10:06.710
or even between applications.

00:10:06.770 --> 00:10:11.900
So this is part of the way that
we help achieve reusability,

00:10:11.900 --> 00:10:16.070
but also help you get to market
faster through reusability.

00:10:16.440 --> 00:10:20.450
And since WebObjects 5.1,
we've heard your request,

00:10:20.450 --> 00:10:23.290
and we've also-- now we allow you
to integrate your favorite parts

00:10:23.300 --> 00:10:26.080
of the Java server pages technology
right with your Web Components.

00:10:26.110 --> 00:10:28.640
So if there are parts of
the JSP model that you like,

00:10:28.640 --> 00:10:31.440
we allow you to integrate
that with our component model,

00:10:31.440 --> 00:10:33.960
so you get the best of both worlds.

00:10:33.960 --> 00:10:36.910
And some well-known examples of
HTML WebObjects applications are

00:10:37.070 --> 00:10:40.420
Apple's .Mac suite of services,
providing the home page

00:10:40.480 --> 00:10:46.090
application and mail,
and also the Apple Store.

00:10:47.080 --> 00:10:50.580
So another very newer type,
a very popular type of client

00:10:50.580 --> 00:10:53.920
application you can target with
WebObjects is a web service application.

00:10:53.990 --> 00:10:55.910
And in web services,
there are two types of applications.

00:10:55.970 --> 00:10:59.270
There are web service servers,
so that we say they vend database

00:10:59.270 --> 00:11:02.660
content through web services,
which is a set of standard protocols.

00:11:02.660 --> 00:11:06.280
But the other part of that is a
web service client that actually

00:11:06.300 --> 00:11:09.970
consumes the data that this web
service server vends to you.

00:11:09.980 --> 00:11:11.770
And with WebObjects,
we allow you to build both

00:11:11.770 --> 00:11:12.860
types of applications.

00:11:12.860 --> 00:11:15.000
We allow you to build the
server and the client.

00:11:15.000 --> 00:11:21.050
And we do this by putting a layer of
abstraction on top of Apache Access.

00:11:21.070 --> 00:11:26.070
Apache Access is open source software
for helping you build web services.

00:11:26.100 --> 00:11:28.760
And it's a great set of software,
and we love it,

00:11:28.800 --> 00:11:31.520
but we've made it even easier
to use by providing a layer

00:11:31.520 --> 00:11:33.600
of abstraction on top of that.

00:11:33.700 --> 00:11:38.060
And we've even done a lot of work
to provide you with plug-ins so

00:11:38.060 --> 00:11:40.630
that you can serialize WebObjects
objects that you build and

00:11:40.630 --> 00:11:43.060
enterprise objects that you build.

00:11:44.920 --> 00:11:47.760
So my favorite kind of
WebObjects application actually

00:11:47.840 --> 00:11:49.480
is a Java client application.

00:11:49.580 --> 00:11:52.250
This is what we call

00:11:52.410 --> 00:11:54.900
client applications that
are written in swing.

00:11:54.900 --> 00:11:57.760
And the goal here is you want to provide
dynamic content to an application that

00:11:57.760 --> 00:12:01.930
runs on the user's machine not in a web
browser but just like an application.

00:12:01.940 --> 00:12:05.060
So an application that
the user can double click.

00:12:05.060 --> 00:12:07.660
And as of WebObjects 5.2,
we actually allow you to do

00:12:07.790 --> 00:12:09.280
this with two architectures.

00:12:09.280 --> 00:12:11.640
We officially support the
three-tier architecture

00:12:11.640 --> 00:12:14.100
which includes the WebObjects
application server in the middle.

00:12:14.350 --> 00:12:17.100
And in this architecture,
the app server mediates

00:12:17.100 --> 00:12:18.760
all access to the database.

00:12:18.760 --> 00:12:23.620
So it's very secure and you have total
control over what the client sees.

00:12:23.760 --> 00:12:27.950
But we also allow you to build two-tier
desktop applications that allow

00:12:27.950 --> 00:12:32.090
-- in which the client application
accesses the database directly.

00:12:32.150 --> 00:12:34.880
So if you don't want to worry,
if you don't have the need for the

00:12:34.880 --> 00:12:37.930
WebObjects app server in the middle,
you can also build that

00:12:37.980 --> 00:12:40.200
type of application,
which is great.

00:12:40.670 --> 00:12:44.010
My favorite part about WebObjects
Java Client is the dynamic user

00:12:44.010 --> 00:12:47.600
interface generation provided by
something we call Direct-to-Java Client.

00:12:47.600 --> 00:12:48.630
What does this do?

00:12:48.870 --> 00:12:52.190
Well, it allows you to build these
swing desktop applications without

00:12:52.190 --> 00:12:53.990
actually writing any of the swing.

00:12:54.190 --> 00:12:56.350
We have something that
we call the rule system,

00:12:56.350 --> 00:12:59.250
and the rule system helps
Java Client produce these very

00:12:59.250 --> 00:13:00.700
rich swing user interfaces.

00:13:00.720 --> 00:13:02.940
So we actually have
apps internal at Apple,

00:13:02.940 --> 00:13:05.880
Java Client apps,
that don't have any swing code in them,

00:13:05.880 --> 00:13:09.630
but they're these very full-featured,
rich desktop applications.

00:13:09.640 --> 00:13:11.210
It's a great part of the technology.

00:13:11.220 --> 00:13:16.210
And WebObjects Java Client also has a
business logic distribution architecture.

00:13:16.230 --> 00:13:16.810
What does this mean?

00:13:16.820 --> 00:13:19.900
Well, you have business objects in
any WebObjects application.

00:13:19.900 --> 00:13:22.440
And usually,
these business objects just live on

00:13:22.440 --> 00:13:24.180
the WebObjects application server.

00:13:24.180 --> 00:13:26.600
But when you have a
Java client application,

00:13:26.600 --> 00:13:27.970
you have a client that's smart.

00:13:28.050 --> 00:13:31.240
Especially these days,
clients are very robust.

00:13:31.240 --> 00:13:32.140
They have lots of memory.

00:13:32.140 --> 00:13:33.280
They have very fast processors.

00:13:33.280 --> 00:13:38.140
So you can actually put some of these
business objects on the client side.

00:13:38.630 --> 00:13:40.140
And when you do this,
you increase performance.

00:13:40.140 --> 00:13:43.990
There are drawbacks, of course,
because any time you put a

00:13:43.990 --> 00:13:46.510
Java object on the client,
it can be easily decompiled

00:13:46.540 --> 00:13:47.480
and things like that.

00:13:47.540 --> 00:13:50.940
But this business logic distribution
architecture is flexible enough

00:13:51.020 --> 00:13:54.210
to allow... So it gives you total
control over how you want to

00:13:54.290 --> 00:13:55.840
distribute your business objects.

00:13:57.460 --> 00:14:00.080
And in WebObjects 5.2,
we even took care of one of

00:14:00.090 --> 00:14:02.330
the most difficult parts,
most tedious parts,

00:14:02.350 --> 00:14:05.470
of deploying desktop swing
applications over the net,

00:14:05.690 --> 00:14:07.320
and that's deploying
the client application.

00:14:07.320 --> 00:14:10.930
So we've integrated WebStart for you,
so without having to configure

00:14:10.930 --> 00:14:13.630
JNLP files or do anything,
we just provide a hyperlink

00:14:13.700 --> 00:14:16.650
when your application starts up,
the client clicks it,

00:14:16.650 --> 00:14:18.940
they automatically get all
the WebStart functionality,

00:14:18.940 --> 00:14:20.480
and you don't have to worry about it.

00:14:20.480 --> 00:14:24.020
So that's part of the heavy lifting
philosophy that WebObjects takes

00:14:24.050 --> 00:14:25.910
care of all the hard work for you.

00:14:27.280 --> 00:14:29.230
And so this is an example of
a Java client application.

00:14:29.260 --> 00:14:31.930
You can see it looks like
a Mac OS X application.

00:14:31.950 --> 00:14:33.880
It assumes the Aqua look and feel.

00:14:33.880 --> 00:14:36.320
Now, of course, you can run this on
other Java 2 platforms,

00:14:36.320 --> 00:14:38.940
so you run it on Windows,
and you get the Windows look and feel.

00:14:38.940 --> 00:14:41.700
And we can edit properties
and edit relationships,

00:14:41.700 --> 00:14:43.940
and again,
all of this is done dynamically

00:14:43.940 --> 00:14:46.870
on the fly as the user moves
around the application.

00:14:48.890 --> 00:14:52.300
So those are the three most common
types of client applications

00:14:52.300 --> 00:14:55.730
you can target with WebObjects:
HTML, Swing, and Web Services.

00:14:56.250 --> 00:15:00.240
But I said before that WebObjects
was designed to be very flexible,

00:15:00.330 --> 00:15:03.640
and allows you to be creative and
to build new kinds of applications.

00:15:03.640 --> 00:15:05.240
And one of those that
you're very familiar with,

00:15:05.240 --> 00:15:07.800
I'm sure, is the iTunes Music Store.

00:15:07.800 --> 00:15:11.030
It's actually a WebObjects 5.2
application on the back end,

00:15:11.120 --> 00:15:15.360
and iTunes sends requests to
the WebObjects application,

00:15:15.450 --> 00:15:18.980
and this application hands back
XML that iTunes then interprets

00:15:19.000 --> 00:15:21.580
and presents to the Music Store.

00:15:21.760 --> 00:15:25.400
And it's actually built with a lot of
our direct web technologies in the back.

00:15:25.400 --> 00:15:26.600
It's very cool stuff.

00:15:26.670 --> 00:15:29.800
That's just an idea of the flexibility
of the WebObjects framework.

00:15:29.800 --> 00:15:32.710
It allows you to do
almost anything you want,

00:15:32.710 --> 00:15:35.510
build any kind of network application.

00:15:35.870 --> 00:15:37.750
So if you attended the
WebObjects State of the Union,

00:15:37.760 --> 00:15:39.540
you're familiar with our
new documentation site,

00:15:39.560 --> 00:15:41.290
which just went live yesterday.

00:15:41.560 --> 00:15:45.240
And it's actually,
the pages are all static pages,

00:15:45.380 --> 00:15:47.400
but these pages come from
a WebObjects application.

00:15:47.400 --> 00:15:49.940
So at Apple,
we have this running application,

00:15:49.940 --> 00:15:53.120
and a couple times a day,
we ask the application to generate a

00:15:53.120 --> 00:15:55.220
static version of all of its pages.

00:15:55.220 --> 00:15:59.630
So we create this virtual site map,
and we traverse each of the directories

00:15:59.630 --> 00:16:02.850
and each of the nodes on this site,
and generate static

00:16:02.850 --> 00:16:04.610
versions of the HTML pages.

00:16:04.830 --> 00:16:06.640
So if you attended the
WebObjects State of the Union,

00:16:06.640 --> 00:16:07.800
you're familiar with our
new documentation site,

00:16:07.800 --> 00:16:08.580
which just went live yesterday.

00:16:08.580 --> 00:16:10.110
And it's actually, the pages come from a
WebObjects application.

00:16:10.120 --> 00:16:11.200
So at Apple,
we have this running application,

00:16:11.210 --> 00:16:12.490
and a couple times a day,
we ask the application to generate

00:16:12.490 --> 00:16:13.620
static versions of all of its pages.

00:16:13.620 --> 00:16:13.620
So at Apple,
we have this running application,

00:16:13.620 --> 00:16:13.620
and a couple times a day,
we generate static

00:16:13.620 --> 00:16:13.620
versions of the HTML pages.

00:16:14.320 --> 00:16:18.400
what this means is we get all
the features or most of the

00:16:18.470 --> 00:16:23.010
features of an application server,
but with static HTML.

00:16:23.200 --> 00:16:26.840
So you notice if I look at
the Cocoa documentation,

00:16:26.920 --> 00:16:30.700
I can sort this list by simply
clicking a column header.

00:16:30.830 --> 00:16:33.030
Now, what I'm doing,
I'm not talking to an application server,

00:16:33.030 --> 00:16:36.560
I'm just asking for a static
HTML page that's been pre-generated.

00:16:36.660 --> 00:16:39.880
So this gives us the advantage
of we can deploy these pages,

00:16:39.880 --> 00:16:42.560
we can serve these pages with
Apache without having to worry

00:16:42.570 --> 00:16:48.000
about the overhead of actually
deploying an application server.

00:16:48.000 --> 00:16:50.720
So that's just another example
of the flexibility of WebObjects

00:16:50.720 --> 00:16:54.280
and some different kinds of
applications you can build with it.

00:16:54.390 --> 00:16:57.850
So now I'd like to bring
Bill Baumgartner on stage to actually

00:16:57.850 --> 00:17:03.360
show you an example of how quickly
it is to get up and running with

00:17:03.360 --> 00:17:07.440
building a WebObjects application.

00:17:10.300 --> 00:17:14.620
So I'd like to show you two applications.

00:17:14.620 --> 00:17:17.620
One of the interesting sort of
chicken-the-egg problems that every

00:17:17.620 --> 00:17:20.980
developer faces when you're starting up
a project is you may have your database

00:17:20.980 --> 00:17:23.860
sort of kind of initialized in there,
but you don't have any data in it.

00:17:23.930 --> 00:17:25.820
And because you don't
have any data in it,

00:17:25.820 --> 00:17:27.350
then it's hard to build the app.

00:17:27.410 --> 00:17:29.470
And you kind of want to
solve both these problems.

00:17:30.620 --> 00:17:33.880
So one of the focuses of the tools,
and you'll see this throughout all

00:17:33.960 --> 00:17:38.100
of the Xcode discussions as well,
is that we want to keep you productive.

00:17:38.110 --> 00:17:39.960
We want to keep you moving
forward in your projects.

00:17:40.030 --> 00:17:41.330
We want to make you happy developers.

00:17:41.340 --> 00:17:44.920
And I apologize,
I'm a little new to Apple,

00:17:44.920 --> 00:17:49.260
so I'm learning the
appropriate marketing term.

00:17:49.260 --> 00:17:50.960
So I guess, our tools kick ass?

00:17:50.960 --> 00:17:53.470
Okay, so I got that in.

00:17:53.470 --> 00:17:54.000
Good.

00:17:55.380 --> 00:18:07.070
: I'm going to show
you how they kick ass.

00:18:07.070 --> 00:18:07.070
I guess I'm only supposed
to use it like three times,

00:18:07.070 --> 00:18:07.070
so there's one more.

00:18:09.320 --> 00:18:10.110
Oh, I'm sorry.

00:18:10.110 --> 00:18:11.080
Wrong menu item.

00:18:11.080 --> 00:18:13.510
Yeah,
so I'm going to create a new project now.

00:18:13.620 --> 00:18:14.240
Thank you.

00:18:14.240 --> 00:18:17.050
And I'm going to create a
new direct web application.

00:18:17.050 --> 00:18:18.860
And I'm going to not use that name.

00:18:18.860 --> 00:18:20.310
I will call it VideoStore.

00:18:20.310 --> 00:18:22.550
And my goal here is
I have a video database.

00:18:22.550 --> 00:18:26.180
Now, if I was into typing in demos,
I would have gone into eoModeler and

00:18:26.180 --> 00:18:28.560
actually reverse engineered the database.

00:18:28.560 --> 00:18:30.070
But I've already done that.

00:18:30.070 --> 00:18:33.430
So I'm going to take already existing
models of my database and just

00:18:33.480 --> 00:18:35.420
build an application on top of that.

00:18:35.430 --> 00:18:39.180
So we'll call it VideoWeb,
because we're being arrested.

00:18:39.200 --> 00:18:44.850
And we will choose the default actions,
once again, emphasizing productivity.

00:18:44.880 --> 00:18:47.580
Our default behavior just
moves you to your goal.

00:18:47.580 --> 00:18:49.710
And we will add a
couple of eoModels here,

00:18:49.710 --> 00:18:51.260
which this is interesting.

00:18:51.260 --> 00:18:53.880
Notice I'm actually
adding multiple models.

00:18:53.880 --> 00:18:56.170
What this means is that, again,
these tools,

00:18:56.170 --> 00:18:58.100
what I'm showing you is very simple.

00:18:58.100 --> 00:19:00.990
However, the implications are complex.

00:19:01.110 --> 00:19:02.680
You can have multiple databases.

00:19:02.730 --> 00:19:04.710
You can have data across those databases.

00:19:04.710 --> 00:19:07.550
You can have relationships
between data on a Sybase database,

00:19:07.550 --> 00:19:12.660
an Oracle database, a front base,
and LDAP.

00:19:13.000 --> 00:19:16.440
And I'm going to choose the neutral look.

00:19:16.620 --> 00:19:19.680
So let me go ahead and
just create the project,

00:19:19.680 --> 00:19:23.430
let it build and run,
and we'll see what we get.

00:19:24.830 --> 00:19:27.230
Excuse me.

00:19:27.330 --> 00:19:29.470
Now,
what's interesting about this demo is

00:19:29.470 --> 00:19:32.820
actually the tools I'm using here are
the same stuff that's used to build

00:19:32.820 --> 00:19:37.560
things like the Music Store and other
wonderful technologies out there.

00:19:37.580 --> 00:19:39.300
So here's my application.

00:19:39.300 --> 00:19:40.400
It's already up and running.

00:19:40.420 --> 00:19:43.300
Let me go ahead and log in.

00:19:43.300 --> 00:19:45.340
We don't take care of
security on that page,

00:19:45.340 --> 00:19:46.040
by the way.

00:19:46.060 --> 00:19:50.240
So that's something you should
put that on your to-do list.

00:19:50.240 --> 00:19:53.490
So as you can see, though,
now that I'm in my application,

00:19:53.540 --> 00:19:56.950
I've got all of my stuff from
my database is just showing up,

00:19:57.020 --> 00:19:59.880
all my entities,
which correspond to tables.

00:19:59.900 --> 00:20:01.340
I can search for things.

00:20:01.340 --> 00:20:06.380
I can actually even create, say,
a new movie, or I could drill down

00:20:06.380 --> 00:20:08.400
and inspect a movie.

00:20:08.600 --> 00:20:11.370
Now I'm happy as a developer
because I can go in and I can

00:20:11.580 --> 00:20:16.310
start really working with my data,
and I'm five minutes into my project.

00:20:16.370 --> 00:20:21.800
Now, of course, HTML as a user interface
is somewhat lacking.

00:20:21.890 --> 00:20:24.580
And as Brent mentioned, we also do Java.

00:20:24.670 --> 00:20:28.090
So let me actually create a new project.

00:20:28.210 --> 00:20:32.230
And this time I'm going to
choose direct to Java client.

00:20:33.000 --> 00:20:36.740
And we'll call this Video Web J,
continuing with our

00:20:36.780 --> 00:20:38.960
tradition of originality.

00:20:39.200 --> 00:20:42.940
And again, I'm running through the
default answers here.

00:20:44.360 --> 00:20:48.980
grabbing all the frameworks,
adding the same two EO models.

00:20:48.980 --> 00:20:51.590
I'm going to steal them
from the other project.

00:20:55.010 --> 00:20:58.600
In this case,
I'm continuing down my default.

00:20:58.680 --> 00:21:01.110
And that last screen,
let me actually go back.

00:21:01.430 --> 00:21:01.900
This is kind of neat.

00:21:01.900 --> 00:21:02.610
Web start.

00:21:02.800 --> 00:21:06.200
So this will automatically create
the little thing that you can just

00:21:06.200 --> 00:21:10.560
kind of shove on a web page or send
an email to start the application.

00:21:10.710 --> 00:21:12.420
It makes distribution very easy.

00:21:12.420 --> 00:21:15.900
So we'll go ahead and, again,
we're following the default

00:21:20.400 --> 00:21:27.200
[Transcript missing]

00:21:30.860 --> 00:21:33.400
So what's actually happening here is,
of course, the application's building,

00:21:33.400 --> 00:21:33.700
et cetera.

00:21:33.700 --> 00:21:35.800
This is a direct-to-Java client.

00:21:35.800 --> 00:21:39.620
So now as the application launches,
what you'll see is a user

00:21:39.620 --> 00:21:43.390
interface that was dynamically
generated purely from a data model.

00:21:43.410 --> 00:21:46.680
So there's a bunch of rules
in the rule system that say,

00:21:46.680 --> 00:21:49.360
okay,
if there's an entity that has certain

00:21:49.360 --> 00:21:54.180
kinds of attributes that are strings,
then you can go ahead and create a search

00:21:54.180 --> 00:21:59.580
form automatically that actually allows
for very rich interaction with the data.

00:21:59.580 --> 00:22:01.720
Now, I look at this immediately,
and I go, you know,

00:22:01.720 --> 00:22:02.750
I'm doing a video store.

00:22:02.750 --> 00:22:06.040
The first thing I want to do when
I'm administrating this data is

00:22:06.040 --> 00:22:07.930
I really want to focus on movies.

00:22:07.930 --> 00:22:11.260
I'm less interested about my customers
because I don't have any yet.

00:22:11.330 --> 00:22:14.170
So there's an assistant,
and through the assistant,

00:22:14.200 --> 00:22:17.060
you can actually go in and
modify the rules that are used

00:22:17.060 --> 00:22:18.780
to drive this application.

00:22:18.780 --> 00:22:22.500
So the first thing I'm going to do is
I'm going to go to my main entities,

00:22:22.570 --> 00:22:25.620
and I'm going to bump movies
up to the top of the list.

00:22:25.630 --> 00:22:29.500
And since I'm not a very
good video store owner,

00:22:29.580 --> 00:22:33.550
I'm going to just remove talent
because I don't like actors.

00:22:33.670 --> 00:22:39.080
So we'll go ahead and apply
this and restart my application.

00:22:40.210 --> 00:22:43.030
And as you can see already,
my movies are at the

00:22:43.030 --> 00:22:46.500
beginning of the list,
and I have no talent in my list.

00:22:46.670 --> 00:22:50.210
Hopefully I have talent.

00:22:50.670 --> 00:22:54.410
And for searching movies, you know,
I really want to be

00:22:54.410 --> 00:22:55.970
able to do it by rating.

00:22:55.990 --> 00:22:57.880
I have a lot of customers
that want to come in and they

00:22:57.880 --> 00:22:58.800
want to get Finding Nemo.

00:22:58.800 --> 00:23:00.120
I had to work that in, too.

00:23:00.120 --> 00:23:01.560
More marketing.

00:23:01.560 --> 00:23:02.680
I'm learning.

00:23:02.680 --> 00:23:06.290
And so they want to be able to search by,
say, the rating of the movie.

00:23:06.450 --> 00:23:10.540
So I can easily come in and I can say,
okay, whenever I'm querying for a movie,

00:23:10.540 --> 00:23:15.720
and this is the whole rule system,
I want to search by rating.

00:23:15.720 --> 00:23:17.870
And I really don't want
to search by plot summary.

00:23:17.870 --> 00:23:19.340
That just doesn't make any sense.

00:23:19.410 --> 00:23:23.490
So again,
I'll apply and I'll restart the app.

00:23:25.030 --> 00:23:30.050
And I can come in and I can search
for movies that are rated G.

00:23:30.290 --> 00:23:34.180
And it'll go off, and there's all my
movies that are rated G.

00:23:34.350 --> 00:23:35.760
Notice Finding Nemo's not in the list.

00:23:35.780 --> 00:23:36.880
We need to update this database.

00:23:36.900 --> 00:23:43.500
But anyway, as you can see, I've,
in five minutes or so,

00:23:43.500 --> 00:23:47.810
have created two applications that
allow you to work fully and intimately

00:23:47.810 --> 00:23:49.910
with the data in your data stores.

00:23:51.320 --> 00:23:55.450
And what this means for you as a
developer is that you can get up to speed

00:23:55.450 --> 00:24:00.960
really quickly and get into the client
or the customer or your user or your mom,

00:24:00.960 --> 00:24:03.910
if you're building an app for her,
face and say, is this what you meant?

00:24:03.930 --> 00:24:04.760
Is this what you wanted?

00:24:04.760 --> 00:24:06.620
Let's go interactive on this.

00:24:06.790 --> 00:24:09.610
Let's push our product
ahead very rapidly.

00:24:09.690 --> 00:24:13.190
And as was indicated earlier,
what that means is the 1.0

00:24:13.190 --> 00:24:16.810
with our stuff usually is like
a 3.0 with everyone else's,

00:24:16.810 --> 00:24:21.080
because you're learning all the time
through the development process.

00:24:21.190 --> 00:24:24.400
Now, these tools,
a lot of people look at things like this,

00:24:24.480 --> 00:24:25.920
and they're scared by it.

00:24:26.020 --> 00:24:30.440
They're worried that they're
going to get locked into our way

00:24:30.440 --> 00:24:33.040
of presenting the information.

00:24:33.060 --> 00:24:34.220
That's not true.

00:24:34.220 --> 00:24:36.780
With the rules system,
you could actually build

00:24:36.860 --> 00:24:39.770
your own super spiffy,
say, revenue display widget,

00:24:39.770 --> 00:24:43.500
and then in the rules system, say,
anywhere a revenue is displayed,

00:24:43.500 --> 00:24:44.750
use this widget.

00:24:44.760 --> 00:24:49.710
So we encourage reuse throughout
all of these tools as well.

00:24:49.720 --> 00:24:50.650
And then, of course,
once you have this administrator,

00:24:50.650 --> 00:24:51.120
you can build your own.

00:24:51.140 --> 00:24:53.300
And then once you have
this administrative app,

00:24:53.300 --> 00:24:55.250
you start building the
app facing the user,

00:24:55.250 --> 00:24:58.140
then you can reuse all that code
and the business logic again.

00:24:58.140 --> 00:25:03.260
So we kick ass because you're productive,
and we like to support that.

00:25:03.300 --> 00:25:04.540
There's my third one.

00:25:04.540 --> 00:25:05.700
So I'll turn it over to Brent again.

00:25:14.960 --> 00:25:17.090
Thanks, Bill.

00:25:17.150 --> 00:25:21.220
And one thing Bill was emphasizing there
at the end is that we just showed you an

00:25:21.220 --> 00:25:25.030
example of the rapid development tools
and frameworks that WebObjects provides.

00:25:25.060 --> 00:25:29.400
And those tools do everything for you,
but we also let you do everything

00:25:29.410 --> 00:25:31.180
on your own if you want to.

00:25:31.180 --> 00:25:33.360
And there are good reasons for
starting with both approaches

00:25:33.440 --> 00:25:34.520
to WebObjects development.

00:25:34.560 --> 00:25:36.850
So now we're going to take a
minute and talk about all of

00:25:36.910 --> 00:25:39.420
the tools that we provide,
the great set of tools we provide

00:25:39.420 --> 00:25:40.950
to build these applications.

00:25:41.420 --> 00:25:44.190
So Bill showed you two tools,
three tools.

00:25:44.210 --> 00:25:45.880
He showed you two.

00:25:45.880 --> 00:25:49.700
Project Builder, and he showed you the
Direct-to-Java Client Assistant.

00:25:49.700 --> 00:25:51.790
And those are just two
tools in the suite.

00:25:51.850 --> 00:25:52.570
So Project Builder.

00:25:52.580 --> 00:25:55.500
Well, this is very important
because this allows you to

00:25:55.500 --> 00:25:57.250
organize your project files.

00:25:57.260 --> 00:26:00.510
It provides new project assistants to
help you get up and running with any

00:26:00.510 --> 00:26:02.460
of the WebObjects application types.

00:26:02.460 --> 00:26:06.620
It's the application that you use
to actually compile your project.

00:26:06.650 --> 00:26:10.500
And we provide a front end to JDB,
the Java debugger,

00:26:10.500 --> 00:26:13.060
so that you can graphically...
debug your WebObjects application,

00:26:13.220 --> 00:26:14.460
which is a Java application.

00:26:14.560 --> 00:26:18.080
We also provide CVS integration,
so you don't have to resort to

00:26:18.080 --> 00:26:21.490
the command line to get full
source control management.

00:26:21.620 --> 00:26:24.670
And we provide documentation lookup,
so you can double click on a

00:26:24.770 --> 00:26:28.400
WebObjects method or class name,
and right there in Project Builder,

00:26:28.650 --> 00:26:30.890
see the description
for that class method,

00:26:30.890 --> 00:26:32.300
which is pretty cool.

00:26:32.460 --> 00:26:37.110
And Project Builder also is part of the
equation that we label Rapid Turnaround.

00:26:37.340 --> 00:26:40.590
And Rapid Turnaround is a feature
in WebObjects that allows you to

00:26:40.590 --> 00:26:44.080
make changes to your applications,
usually to the user interface,

00:26:44.080 --> 00:26:47.630
to save those changes and to see them
reflected in the running application

00:26:47.800 --> 00:26:49.160
without having to recompile.

00:26:49.160 --> 00:26:53.130
And there are other tools that work with
Project Builder to make this possible,

00:26:53.170 --> 00:26:55.060
which we'll talk about in a minute.

00:26:55.560 --> 00:26:56.860
So I talked about EOModeler.

00:26:56.860 --> 00:27:00.110
And EOModeler is really the most
important tool in WebObjects development,

00:27:00.110 --> 00:27:02.070
because it allows you
to build data models.

00:27:02.070 --> 00:27:04.340
And as you saw,
by simply providing WebObjects

00:27:04.340 --> 00:27:07.350
a description of your data,
you can actually get full-featured

00:27:07.400 --> 00:27:09.190
running applications for free.

00:27:09.200 --> 00:27:12.900
But even if you're not using the
Rapid Development tools and frameworks

00:27:12.900 --> 00:27:16.660
to build WebObjects applications,
you really still need a data model,

00:27:16.660 --> 00:27:20.170
because this data model is how you
provide the data to the templates,

00:27:20.340 --> 00:27:22.540
the visual pages that you construct.

00:27:22.650 --> 00:27:24.740
So how do you build these data models?

00:27:24.740 --> 00:27:28.420
Well, EOModeler is very smart,
and it will actually reverse engineer a

00:27:28.420 --> 00:27:30.620
model for you from an existing database.

00:27:30.690 --> 00:27:33.940
So a lot of projects
start from existing data.

00:27:33.940 --> 00:27:37.060
So you simply point
EOModeler to your database.

00:27:37.060 --> 00:27:41.400
And like I said, out of the box, this is,
we support JDBC and JNDI.

00:27:41.400 --> 00:27:44.600
And it looks at all the tables and
all the columns and all the joins,

00:27:44.600 --> 00:27:47.740
and it creates entities, attributes,
and relationships from

00:27:47.740 --> 00:27:49.220
all that information.

00:27:49.220 --> 00:27:52.600
So you don't actually have to worry
about creating the model in many cases.

00:27:52.600 --> 00:27:53.900
You may want to make tweaks to it.

00:27:55.140 --> 00:27:57.840
But if you don't have a database,
you need to create a schema.

00:27:57.840 --> 00:28:01.890
And EOModeler can actually help
you think about that schema

00:28:02.150 --> 00:28:05.100
in entity relationship terms,
and then it will write that schema

00:28:05.100 --> 00:28:06.480
back to the database for you.

00:28:06.520 --> 00:28:08.280
So it's a great data modeling tool also.

00:28:08.280 --> 00:28:13.000
And we also think of EOModeler as a front
end to the Enterprise Object Frameworks,

00:28:13.150 --> 00:28:17.590
because it actually allows you to
configure a lot of the more sophisticated

00:28:17.600 --> 00:28:22.440
characteristics of things in EOF,
which we'll talk about more in a second.

00:28:24.090 --> 00:28:25.300
So what does EOModeler do?

00:28:25.300 --> 00:28:28.600
Well, it helps you map relational
data structures to Java objects.

00:28:28.600 --> 00:28:32.120
We said that with WebObjects,
WebObjects allows you to build your

00:28:32.120 --> 00:28:33.830
business logic in Java objects.

00:28:34.190 --> 00:28:38.400
But in order to do that,
we have to have a way to get the

00:28:38.470 --> 00:28:41.610
changes that you make to your
Java objects back into the data source.

00:28:41.720 --> 00:28:42.640
So we need a description.

00:28:42.640 --> 00:28:43.670
We need a mapping of that.

00:28:43.740 --> 00:28:45.220
And that's what EOModeler does.

00:28:45.220 --> 00:28:51.010
It helps you map entities to tables,
attributes to columns,

00:28:51.010 --> 00:28:51.130
and relationships to joins.

00:28:51.240 --> 00:28:54.070
Another great feature of
EOF and EOModeler is that

00:28:54.070 --> 00:28:55.440
you can model inheritance.

00:28:55.440 --> 00:28:58.540
So as a Java developer,
it's common to build inheritance

00:28:58.540 --> 00:29:00.120
hierarchies into your application.

00:29:00.130 --> 00:29:03.150
So you might have a person superclass,
and you might have

00:29:03.370 --> 00:29:06.450
concrete subclasses of it,
such as student, teacher, administrator,

00:29:06.450 --> 00:29:08.540
if you're at an educational institution.

00:29:08.540 --> 00:29:10.940
Well, this is a very natural
way to think in Java,

00:29:10.940 --> 00:29:12.540
in object-oriented terms.

00:29:12.540 --> 00:29:16.700
But wouldn't it also be nice if you could
translate that hierarchy into something

00:29:16.700 --> 00:29:18.920
that persists in a relational database?

00:29:18.920 --> 00:29:23.010
Well, we fully support that with EOF,
and EOModeler allows you to map

00:29:23.080 --> 00:29:27.080
your Java inheritance hierarchies
to your relational tables.

00:29:27.140 --> 00:29:30.390
And EOModeler also helps you
build fetch specifications,

00:29:30.460 --> 00:29:33.320
which are descriptions of
the data you want to fetch,

00:29:33.320 --> 00:29:36.660
which also usually include
things like sort orderings.

00:29:36.660 --> 00:29:38.380
And you can do all of
these things in code.

00:29:38.460 --> 00:29:40.890
In fact,
you can even build models in code,

00:29:40.920 --> 00:29:43.660
but EOModeler is,
we provide it because it's a lot

00:29:43.720 --> 00:29:45.240
easier to do it with a graphical tool.

00:29:47.310 --> 00:29:50.770
So if you're building HTML applications,
you need to build these page

00:29:50.860 --> 00:29:52.080
templates I was talking about.

00:29:52.080 --> 00:29:53.960
So we provide a tool
that helps you do that.

00:29:54.040 --> 00:29:58.120
It's called WebObjects Builder,
and fundamentally it's an HTML editor,

00:29:58.120 --> 00:30:01.450
but its specialty is that it helps
you write these page templates.

00:30:01.460 --> 00:30:03.950
And these page templates in
WebObjects are made up of

00:30:03.980 --> 00:30:05.800
something we call dynamic elements.

00:30:05.800 --> 00:30:08.400
And a dynamic element is
just what it sounds like.

00:30:08.480 --> 00:30:12.680
It's an HTML element whose values and
characteristics are resolved at runtime.

00:30:12.680 --> 00:30:17.460
And WebObjects Builder has collections
of these dynamic elements on palettes.

00:30:17.460 --> 00:30:20.320
So you drag out these elements,
you put them on your templates,

00:30:20.320 --> 00:30:22.240
and you connect them up to
your enterprise objects.

00:30:22.240 --> 00:30:27.710
And so that's how we say that
WebObjects Builder is integrated

00:30:27.710 --> 00:30:28.630
with enterprise objects.

00:30:28.670 --> 00:30:30.660
It knows about the entities
in your data model.

00:30:30.660 --> 00:30:32.130
It knows about their attributes.

00:30:32.160 --> 00:30:33.480
It knows about their relationships.

00:30:33.480 --> 00:30:35.720
These are things that
your EO model provides.

00:30:35.720 --> 00:30:41.020
And WebObjects Builder also plays a part
in this thing we call rapid turnaround.

00:30:41.020 --> 00:30:43.430
So in many cases,
you can make changes to the

00:30:43.660 --> 00:30:46.750
HTML templates you build in WebObjects,
save them,

00:30:46.770 --> 00:30:50.060
refresh the page in the client browser,
and see those changes reflected

00:30:50.060 --> 00:30:53.080
without having to recompile,
rebuild your application.

00:30:53.080 --> 00:30:57.980
So this is one way that WebObjects
helps you get to market faster

00:30:57.980 --> 00:31:01.500
by removing some of these steps
in the development process.

00:31:01.500 --> 00:31:02.710
Thank you.

00:31:03.790 --> 00:31:06.490
So we touched on rapid development,
and rapid development is one of

00:31:06.490 --> 00:31:10.250
the coolest features of WebObjects,
and it includes a number of tools.

00:31:10.260 --> 00:31:14.020
So there are three types of client
applications that you can target with

00:31:14.020 --> 00:31:15.870
the rapid development frameworks.

00:31:15.880 --> 00:31:18.610
One is an HTML client,
other is a Java client,

00:31:18.610 --> 00:31:20.730
a third is a web services client.

00:31:20.740 --> 00:31:24.780
And each of these types of client
applications has its own assistant.

00:31:24.780 --> 00:31:28.390
And these assistants are
front ends to the rule system.

00:31:28.400 --> 00:31:32.800
So the rule system is,
we consider it kind of like a black box.

00:31:32.960 --> 00:31:35.040
It's very smart,
it knows how to do all these things,

00:31:35.040 --> 00:31:38.480
but to interact with it,
you need to write these rules.

00:31:38.500 --> 00:31:40.760
These rules can kind of
be hard to learn to write.

00:31:40.880 --> 00:31:45.090
So what these assistants do is,
they provide valid configurations

00:31:45.090 --> 00:31:48.580
and valid combinations of these
rules that you can just choose

00:31:48.580 --> 00:31:51.250
in a graphical user interface,
which has the result of

00:31:51.260 --> 00:31:53.090
writing these rules for you.

00:31:53.120 --> 00:31:58.280
And this enables code-free,
rule-driven applications.

00:32:01.160 --> 00:32:02.890
So how do these tools all work together?

00:32:03.100 --> 00:32:05.140
Well,
we divide the WebObjects development

00:32:05.140 --> 00:32:07.810
workflow into three general phases.

00:32:07.970 --> 00:32:09.550
The first is a data access phase.

00:32:09.830 --> 00:32:11.670
Second is the business logic phase.

00:32:11.740 --> 00:32:13.100
And third is presentation logic.

00:32:13.100 --> 00:32:16.620
And each of the tools has a specialized
role in each one of these phases.

00:32:16.640 --> 00:32:20.910
So in the data access phase, of course,
the goal is to get data or

00:32:20.950 --> 00:32:24.230
get a description of the
data in a JDBC database,

00:32:24.230 --> 00:32:27.120
a JNDI directory, into an EO model file.

00:32:27.120 --> 00:32:29.500
And you use EO Modeler to do this.

00:32:30.120 --> 00:32:31.390
So that's really the first step.

00:32:31.530 --> 00:32:33.000
And once you have this
description of your data,

00:32:33.000 --> 00:32:34.740
then you're ready to
write your business logic.

00:32:34.740 --> 00:32:38.250
And in WebObjects,
you write your business logic in Java.

00:32:38.250 --> 00:32:41.190
So you edit your Java files
in Project Builder.

00:32:41.220 --> 00:32:44.180
So this is the business
logic phase of the workflow.

00:32:44.180 --> 00:32:47.440
And after you've done that,
you work on your presentation logic.

00:32:47.440 --> 00:32:51.240
So you use WebObjects Builder
to build HTML templates.

00:32:51.240 --> 00:32:53.540
You use Direct to Java Client
to build swing applications,

00:32:53.540 --> 00:32:55.130
but you can also use Interface Builder.

00:32:55.190 --> 00:32:57.590
This is the same Interface Builder
that you use to build Carbon and

00:32:57.670 --> 00:32:59.120
Cocoa and other applications.

00:32:59.140 --> 00:33:00.970
So you can use Direct to
Java Client to build Carbon and

00:33:00.970 --> 00:33:02.280
Cocoa applications for Mac OS X.

00:33:02.290 --> 00:33:03.550
But we've actually extended it.

00:33:03.680 --> 00:33:08.140
So when you build a Java Client
interface in Interface Builder,

00:33:08.140 --> 00:33:09.930
we actually write out the swing for you.

00:33:10.040 --> 00:33:12.650
So in this case,
we're not dynamically generating

00:33:12.650 --> 00:33:16.290
the user interface on the fly as the
user moves around the application,

00:33:16.610 --> 00:33:19.170
but we're actually using a
chunk of static swing that

00:33:19.170 --> 00:33:20.700
Interface Builder generates.

00:33:20.700 --> 00:33:23.920
And of course, you can integrate both the
static interface and the dynamic

00:33:23.920 --> 00:33:25.320
interface in the application.

00:33:25.320 --> 00:33:28.160
So if you need very precise
control over one particular

00:33:28.160 --> 00:33:28.160
window in your application,
you can use Direct to Java Client

00:33:28.160 --> 00:33:28.160
to build a dynamic interface.

00:33:28.160 --> 00:33:32.330
particular window in your application,
you can do that in Interface Builder.

00:33:32.440 --> 00:33:34.350
And finally, if you're building a
Web Services application,

00:33:34.350 --> 00:33:36.840
whether you're building the
server side or the client side,

00:33:36.840 --> 00:33:39.920
if you're building the server side,
you use something we call

00:33:39.920 --> 00:33:41.650
the Web Services Assistant.

00:33:41.780 --> 00:33:44.820
If you're building a client,
you can build browser-based

00:33:44.950 --> 00:33:47.520
Web Service clients with
the WebObjects frameworks,

00:33:47.520 --> 00:33:51.030
but you might also be interested
in building a Web Service client

00:33:51.040 --> 00:33:53.600
to target something like Sherlock.

00:33:53.720 --> 00:33:55.920
And so we showed this workflow
and we showed the arrows going

00:33:56.240 --> 00:33:58.930
from one side to the other,
but that doesn't mean that you have

00:33:58.930 --> 00:34:02.200
to finish the data access phase before
you move on to the business logic

00:34:02.200 --> 00:34:05.820
phase and then finish the business
logic before the presentation logic.

00:34:05.820 --> 00:34:08.900
You can go back and make changes
in any one of these realms,

00:34:09.090 --> 00:34:12.120
but this illustration is just
here so you get an idea of

00:34:12.120 --> 00:34:14.150
how the tools work together.

00:34:14.990 --> 00:34:17.040
Okay, so we've talked about,
we've shown you a demo

00:34:17.040 --> 00:34:19.900
of HTML applications and
Java client applications,

00:34:20.060 --> 00:34:21.770
but what about web services?

00:34:21.920 --> 00:34:24.940
I'm going to bring the world's
foremost Jamaican-Chinese

00:34:24.940 --> 00:34:28.120
WebObjects developer on stage,
Ron Lusang, to show us a demo of

00:34:28.120 --> 00:34:30.190
Web Services with WebObjects.

00:34:33.760 --> 00:34:34.130
Cool.

00:34:34.210 --> 00:34:35.290
Thanks, Brent.

00:34:35.300 --> 00:34:40.630
So first off,
you guys know about web services and

00:34:40.630 --> 00:34:44.380
how Brent explained that with Access,
we're able to bring web

00:34:44.380 --> 00:34:49.010
services to WebObjects,
or vend web services through WebObjects.

00:34:49.250 --> 00:34:51.150
On top of that,
we've added a technology that

00:34:51.150 --> 00:34:54.300
we call direct-to-web services,
which makes it even easier to start

00:34:54.780 --> 00:34:56.220
building a web services server.

00:34:56.220 --> 00:35:01.000
So I'm going to start a new project,
and I'll choose direct-to-web

00:35:01.000 --> 00:35:03.700
services as my application type.

00:35:06.100 --> 00:35:09.030
And I'll choose a silly name,
as I prefer to.

00:35:09.280 --> 00:35:13.290
Again,
go through all of the default settings.

00:35:13.420 --> 00:35:16.110
Choose the movies model.

00:35:19.050 --> 00:35:21.270
And I'll just build and
launch the application.

00:35:21.390 --> 00:35:27.410
So what it's going to do is put together
a list of the entities in my model.

00:35:27.800 --> 00:35:46.500
[Transcript missing]

00:35:49.770 --> 00:35:50.660
And poof.

00:35:50.660 --> 00:35:54.380
You can see here,
we see we have a service.

00:35:54.380 --> 00:35:57.500
And we take the approach of being
paranoid for our web services.

00:35:57.500 --> 00:36:00.020
So none of the services
are turned on by default.

00:36:00.020 --> 00:36:03.560
So nobody can go in and start sending
random soap to these services.

00:36:03.560 --> 00:36:06.880
Anything that's not specifically
enabled is disallowed.

00:36:06.980 --> 00:36:10.980
So we'll go ahead and enable
our special default web service,

00:36:11.320 --> 00:36:14.720
called appropriately
enough default web service.

00:36:14.820 --> 00:36:21.380
So we'll add an entity to our default
web service as far as public entities go.

00:36:21.410 --> 00:36:25.390
Once I've added this entity,
you can look over here

00:36:25.390 --> 00:36:27.260
in the service list.

00:36:27.860 --> 00:36:30.560
And we'll add a couple of operations.

00:36:30.660 --> 00:36:35.600
So what we've done here is go through
the entity that we've added and looked

00:36:35.690 --> 00:36:43.980
at what fetch specifications are defined,
as well as just what arguments should

00:36:43.980 --> 00:36:47.390
be exposed as web service arguments.

00:36:47.590 --> 00:36:51.290
So we haven't written any code yet,
and all we've done is focus

00:36:51.290 --> 00:36:54.160
on our business logic,
and already we can already

00:36:54.160 --> 00:36:55.480
publish a web service.

00:36:55.530 --> 00:36:59.210
Let's start by just moving
a couple of entities out.

00:36:59.210 --> 00:37:02.340
I just want to search
on rating for my movies,

00:37:02.340 --> 00:37:03.250
let's say.

00:37:03.250 --> 00:37:04.830
We'll remove these.

00:37:04.830 --> 00:37:08.800
We can change what arguments
are sent to the web service,

00:37:08.800 --> 00:37:13.490
and what return values are sent
back to the web service client.

00:37:13.630 --> 00:37:17.310
Let's just say we're
interested in the title,

00:37:17.310 --> 00:37:21.900
the rating again, and we can also,
from this list here,

00:37:22.270 --> 00:37:24.620
choose to see the studio name.

00:37:24.620 --> 00:37:25.440
We can go through relationships.

00:37:25.460 --> 00:37:25.460
And we can also, from this list here,
choose to see the studio name.

00:37:25.460 --> 00:37:28.980
when we're returning values
from the web service.

00:37:29.250 --> 00:37:32.280
So all of this again is going
through the rule system and changing

00:37:32.280 --> 00:37:33.580
values only in the rule system.

00:37:33.580 --> 00:37:38.390
You don't have to write any code to
change the settings for your web service.

00:37:38.390 --> 00:37:42.880
Let's go ahead and return
or try and test this.

00:37:42.990 --> 00:37:46.360
One of the things about web services,
by the way, you really have to put

00:37:46.360 --> 00:37:49.930
together a WSDL file,
a web services description language file,

00:37:50.090 --> 00:37:55.520
saying what arguments you expect and
what results the client can expect to

00:37:55.520 --> 00:37:57.840
get back from invoking a web service.

00:37:57.880 --> 00:38:00.260
Rather than have to
write all that for you,

00:38:00.260 --> 00:38:04.580
or write all of that yourself,
Direct Web Services generates

00:38:04.580 --> 00:38:08.200
all of this lovely XML for you.

00:38:08.260 --> 00:38:12.100
So you can go ahead and
be productive immediately,

00:38:12.160 --> 00:38:14.890
like testing the application.

00:38:15.050 --> 00:38:18.750
So we'll search for all rated G movies,
and we'll get back a list

00:38:18.750 --> 00:38:20.240
of all the rated G movies.

00:38:20.370 --> 00:38:25.550
You could look for PG and test it.

00:38:25.900 --> 00:38:28.960
So one of the things that you'll
also notice is we haven't had to go

00:38:28.960 --> 00:38:31.160
through and write any access code.

00:38:31.160 --> 00:38:35.300
We haven't had to do anything
actually parsing the WSDL ourselves.

00:38:35.450 --> 00:38:38.920
We figured out the direct web services
assistant can actually parse the

00:38:38.920 --> 00:38:43.550
WSDL and put up a dynamic UI so that we
already have something that we can use

00:38:43.550 --> 00:38:46.110
to invoke the web service and test it.

00:38:46.220 --> 00:38:54.270
If we go back, you can see if we add,
say, title as an input argument,

00:38:54.520 --> 00:38:58.550
We get rating and title
as the UI to test with.

00:38:58.810 --> 00:39:01.880
So we can look for all PG movies.

00:39:02.190 --> 00:39:06.200
Actually, one other thing,
we can change the operator that is used.

00:39:06.200 --> 00:39:09.950
So we can look for case insensitive like.

00:39:11.200 --> 00:39:21.500
[Transcript missing]

00:39:23.840 --> 00:39:25.760
And there aren't any
G movies to start with us.

00:39:25.890 --> 00:39:30.040
So that's a simple example of how
quickly you can get up and running

00:39:30.040 --> 00:39:33.350
with a web service application using
the direct web services technology.

00:39:33.490 --> 00:39:38.170
It's very simple, very easy to use,
and you should use it.

00:39:38.200 --> 00:39:41.970
Back to Brent.

00:39:47.010 --> 00:39:48.760
Thank you, Ron.

00:39:48.760 --> 00:39:51.620
So there's something we need to emphasize
about the demos you've seen today.

00:39:51.620 --> 00:39:54.840
Now, they demonstrate that you can
go very far in a WebObjects

00:39:54.840 --> 00:39:56.850
application without writing any code.

00:39:56.880 --> 00:39:57.720
And that's true.

00:39:57.720 --> 00:40:00.040
Everything you saw here today
is what you can get in the

00:40:00.240 --> 00:40:02.830
trial version of WebObjects
and in the box when you buy it.

00:40:02.830 --> 00:40:04.620
But WebObjects is not a toy.

00:40:04.620 --> 00:40:06.160
It's a programmer's tool.

00:40:06.340 --> 00:40:08.960
You really need to be
a programmer to use it.

00:40:09.200 --> 00:40:12.550
Now, we take care of a lot of the
difficult things for you.

00:40:12.610 --> 00:40:15.890
So you don't have to be a DBA to
write a WebObjects application

00:40:15.960 --> 00:40:18.120
that uses multiple databases.

00:40:18.140 --> 00:40:21.210
But you do need to be a programmer,
a Java programmer,

00:40:21.210 --> 00:40:23.660
to really build a usable application.

00:40:23.660 --> 00:40:26.120
So you can go far,
but we don't want to give you the

00:40:26.120 --> 00:40:29.380
sense that you can go all the way
in application development with

00:40:29.380 --> 00:40:32.710
WebObjects without knowing how
to write a little bit of code.

00:40:32.760 --> 00:40:36.600
So after saying that,
we need to talk about how all

00:40:36.600 --> 00:40:39.180
of this is how we make objects.

00:40:39.180 --> 00:40:43.240
So let's talk about the building blocks
behind every WebObjects application.

00:40:43.240 --> 00:40:47.010
And the building blocks are
something we call frameworks.

00:40:47.100 --> 00:40:48.210
Well, what's a framework?

00:40:48.220 --> 00:40:51.360
A framework is software,
and it provides a lot of pre-built

00:40:51.370 --> 00:40:53.460
functionality that you plug into.

00:40:53.460 --> 00:40:56.160
Another way of thinking about
this is a framework knows

00:40:56.240 --> 00:40:57.540
how to do a lot of things.

00:40:57.540 --> 00:41:00.100
The WebObjects frameworks
know how to access databases.

00:41:00.100 --> 00:41:01.780
They know how to generate HTML.

00:41:01.780 --> 00:41:03.730
They know how to do web services stuff.

00:41:03.800 --> 00:41:05.360
But they don't know what to do.

00:41:05.360 --> 00:41:07.600
They don't know what you want them to do.

00:41:07.600 --> 00:41:09.180
So you have to provide information.

00:41:09.180 --> 00:41:11.800
You have to tell them,
tell the frameworks what kind of

00:41:11.800 --> 00:41:14.850
data you want to fetch or what
your page templates look like.

00:41:16.780 --> 00:41:20.050
So a key idea about frameworks
is that they do all the driving

00:41:20.220 --> 00:41:21.090
and all the heavy lifting.

00:41:21.100 --> 00:41:22.660
Well, what does this mean?

00:41:22.720 --> 00:41:25.100
Well,
they know how to do a lot of things.

00:41:25.100 --> 00:41:29.520
And one of the most common obstacles
that new WebObjects developers face

00:41:29.520 --> 00:41:33.120
is that they start writing all this
fancy code to do all of these things

00:41:33.500 --> 00:41:36.830
that they think they need to do,
when actually the frameworks

00:41:36.860 --> 00:41:38.300
do all of this for you.

00:41:38.300 --> 00:41:41.070
So you need to learn to trust
that these frameworks actually

00:41:41.070 --> 00:41:43.120
know what they're doing,
and that your goal,

00:41:43.120 --> 00:41:46.850
your role as a WebObjects developer is
to understand the frameworks well enough

00:41:46.850 --> 00:41:50.540
to know how to harness the functionality
they provide so you write less code.

00:41:50.540 --> 00:41:53.340
And when you write less code,
you write less bugs,

00:41:53.440 --> 00:41:56.080
and you write a better application.

00:41:56.080 --> 00:41:58.460
So the WebObjects frameworks
have been around for a long time.

00:41:58.460 --> 00:42:01.820
WebObjects was actually the first
application server a long time ago.

00:42:01.950 --> 00:42:03.840
And because it's been
around for a long time,

00:42:03.930 --> 00:42:06.850
these frameworks have had a lot
of years to get really good,

00:42:06.850 --> 00:42:10.560
to the point that we say they
incorporate a lot of the best practices

00:42:10.560 --> 00:42:11.990
of object-oriented programming.

00:42:11.990 --> 00:42:15.170
And they actually share a lot of
these best practices with the Koko,

00:42:15.170 --> 00:42:19.660
Apple's other object-oriented framework
for building desktop applications.

00:42:19.690 --> 00:42:23.040
And I want to talk about three of
these because they're really important.

00:42:23.040 --> 00:42:23.890
One is key value coding.

00:42:24.030 --> 00:42:26.380
When you start reading the
WebObjects documentation,

00:42:26.380 --> 00:42:28.220
you're going to see
this all over the place.

00:42:28.240 --> 00:42:30.470
And you look at the
API reference and talk to people,

00:42:30.470 --> 00:42:33.120
and they're going to talk
about key value coding.

00:42:33.180 --> 00:42:34.600
Well, what is this?

00:42:34.640 --> 00:42:38.040
Well, it simply encompasses the classic
object-oriented design paradigm to

00:42:38.100 --> 00:42:40.010
encapsulate the thing that varies.

00:42:40.280 --> 00:42:42.480
Well, what varies in an application?

00:42:42.570 --> 00:42:46.280
What varies is how your objects
provide access to their data.

00:42:46.280 --> 00:42:48.870
They might provide access to their
data through an accessor method,

00:42:49.020 --> 00:42:51.540
preferably,
or through an instance variable.

00:42:51.570 --> 00:42:56.740
And the name of that accessor method or
instance variable could be different.

00:42:56.760 --> 00:43:00.060
Well, what key value coding does,
it abstracts away all of that

00:43:00.060 --> 00:43:04.220
diversity in how objects present
their data and allows you to

00:43:04.220 --> 00:43:06.640
access data by key or by name.

00:43:06.890 --> 00:43:09.070
And as you'll see later on,
this is very powerful because if

00:43:09.130 --> 00:43:14.760
we have business objects that have
very complex relationships in them,

00:43:14.760 --> 00:43:16.590
we can actually get to the data in
those different objects simply by

00:43:16.590 --> 00:43:18.920
traversing what we call a key path.

00:43:19.000 --> 00:43:20.720
And this is all enabled
through key value coding,

00:43:20.720 --> 00:43:22.710
name-based lookup.

00:43:22.760 --> 00:43:25.140
Another important idea is delegation.

00:43:25.160 --> 00:43:27.340
It's kind of a complex thing,
and you don't need to know

00:43:27.340 --> 00:43:28.700
about it to get started.

00:43:28.700 --> 00:43:31.100
But we said that the WebObjects
frameworks are very flexible.

00:43:31.250 --> 00:43:34.700
And one way they're flexible
is that the class designers,

00:43:34.700 --> 00:43:36.810
the people who design the
classes in these frameworks,

00:43:37.020 --> 00:43:40.130
provide opportunities for you
to customize these classes.

00:43:40.150 --> 00:43:42.950
And they do it through
something we call delegation.

00:43:42.950 --> 00:43:45.040
And this is a way for the
class designer to say,

00:43:45.140 --> 00:43:48.780
at this point in this object's execution,
I want to provide other developers

00:43:48.780 --> 00:43:51.950
a way to intercept things and
provide custom functionality.

00:43:53.700 --> 00:43:55.600
So rather than requiring you to
actually subclass one of our classes

00:43:56.100 --> 00:44:00.680
and override a bunch of things,
we provide things called delegates,

00:44:00.680 --> 00:44:02.690
which provides you a
great deal of flexibility.

00:44:02.800 --> 00:44:25.540
: And Model-View-Controller is another
key idea in the WebObjects frameworks.

00:44:25.540 --> 00:44:25.540
And this is a paradigm you're
probably all familiar with.

00:44:25.540 --> 00:44:25.540
And in WebObjects development,
it means the same thing.

00:44:25.540 --> 00:44:25.540
It means that we divide,
we think about the objects in

00:44:25.540 --> 00:44:25.540
WebObjects in three different realms.

00:44:25.540 --> 00:44:25.540
The model realm, which is your data and
your business logic.

00:44:25.540 --> 00:44:25.540
The view realm,
which is what your user actually

00:44:25.540 --> 00:44:25.540
sees and interacts with.

00:44:25.540 --> 00:44:25.540
And the controller,
which is the glue between the two.

00:44:25.770 --> 00:44:28.940
So let's talk about three
of the frameworks that every

00:44:28.940 --> 00:44:31.380
WebObjects application,
no matter what type of

00:44:31.380 --> 00:44:33.730
client you're targeting,
will use.

00:44:33.740 --> 00:44:35.910
And the first is the
foundation framework.

00:44:35.910 --> 00:44:39.240
This is a set of powerful,
fast collection and utility classes,

00:44:39.240 --> 00:44:41.940
things for managing your
application's data structures.

00:44:41.940 --> 00:44:44.600
It's important to understand
that the foundation framework

00:44:44.900 --> 00:44:46.560
doesn't replace the JDK classes.

00:44:46.560 --> 00:44:49.840
It's actually built on top of them,
and it complements the JDK classes.

00:44:50.470 --> 00:44:52.590
But like I said,
WebObjects has been around a long time,

00:44:52.590 --> 00:44:54.760
and was actually not
written in Java originally.

00:44:54.760 --> 00:44:58.320
So a lot of these classes
predate a lot of the JDK classes.

00:44:58.320 --> 00:45:00.710
And they're very mature,
and provide a lot of

00:45:00.710 --> 00:45:03.890
really great functionality,
a lot of which you actually don't

00:45:03.890 --> 00:45:05.530
get in the standard Java classes.

00:45:05.540 --> 00:45:09.900
The foundation framework also provides
an infrastructure for notification.

00:45:09.900 --> 00:45:13.750
In a WebObjects application,
you have possibly hundreds or thousands

00:45:13.790 --> 00:45:16.490
of objects running at runtime,
and usually they need to

00:45:16.490 --> 00:45:17.660
communicate with each other.

00:45:17.660 --> 00:45:20.340
Maybe a user makes a
change to a business.

00:45:20.340 --> 00:45:24.720
Well, chances are that other objects
depend on the state of that object.

00:45:24.770 --> 00:45:27.370
Well,
a notification architecture allows those

00:45:27.370 --> 00:45:31.590
objects to communicate in a way so that
the objects are very loosely coupled.

00:45:31.600 --> 00:45:33.790
So we have another
object that we introduce,

00:45:33.790 --> 00:45:35.930
which is called a notification center.

00:45:35.940 --> 00:45:39.190
And objects tell the notification
center when something,

00:45:39.190 --> 00:45:42.580
when their state changes,
or when a certain event occurs.

00:45:42.580 --> 00:45:45.450
And other objects tell the notification
center that they want to know about

00:45:45.690 --> 00:45:47.350
when other objects change their state.

00:45:47.360 --> 00:45:50.340
So in the end,
we have this dynamic neural network.

00:45:50.340 --> 00:45:52.520
And we have a very simple system
of objects communicating with

00:45:52.580 --> 00:45:54.680
each other without directly
having references to them.

00:45:54.850 --> 00:45:58.860
This is one of those other great best
practices of OO programming that the

00:45:58.860 --> 00:46:01.320
WebObjects frameworks incorporate.

00:46:01.740 --> 00:46:04.880
Foundation framework also provides
basic infrastructure for validating

00:46:04.880 --> 00:46:06.230
the data in your objects.

00:46:06.460 --> 00:46:10.970
And WebObjects 5.2 includes
XML serialization classes that

00:46:10.970 --> 00:46:15.900
make it very easy to serialize
WebObjects and enterprise objects.

00:46:16.660 --> 00:46:18.300
So the WebObjects framework.

00:46:18.330 --> 00:46:22.720
Well, this is a framework that bootstraps
all types of WebObjects applications.

00:46:22.780 --> 00:46:24.920
So whether you're building an HTML,
a swing,

00:46:24.920 --> 00:46:28.140
or a web service WebObjects application,
this framework helps

00:46:28.140 --> 00:46:29.200
you get up and running.

00:46:29.340 --> 00:46:31.960
And it manages something called
the request response loop.

00:46:32.060 --> 00:46:34.800
Clients send requests into
your application server.

00:46:35.060 --> 00:46:38.390
The WebObjects framework helps
you dissect that request,

00:46:38.490 --> 00:46:41.090
and in the end,
after all your business logic

00:46:41.120 --> 00:46:44.380
and application logic have made
the decisions they need to make,

00:46:44.390 --> 00:46:48.310
it helps package up a response and
sends it back out to the client.

00:46:48.380 --> 00:46:51.190
We talked about the page templates,
and the infrastructure for that is

00:46:51.330 --> 00:46:53.060
rooted in the WebObjects framework.

00:46:53.150 --> 00:46:55.780
And the most important thing
the WebObjects framework

00:46:55.780 --> 00:46:57.090
does is it manages state.

00:46:57.100 --> 00:46:59.400
We all know that the web
is inherently stateless.

00:46:59.710 --> 00:47:02.940
There are no facilities for
tracking state on the web.

00:47:02.940 --> 00:47:06.050
So that's really what one of the
main roles of an app server is,

00:47:06.090 --> 00:47:07.300
to provide state.

00:47:07.330 --> 00:47:09.050
And there are three realms of state.

00:47:09.060 --> 00:47:11.860
There's global application state,
data that you want all of

00:47:11.860 --> 00:47:14.740
your users in every session
in your application to share.

00:47:14.820 --> 00:47:16.380
There is per session, or per user state.

00:47:16.380 --> 00:47:20.540
So if you want to provide a customized,
personalized experience to each

00:47:20.570 --> 00:47:22.820
user as they enter your site,
you need to store the

00:47:22.890 --> 00:47:23.960
state for that session.

00:47:24.300 --> 00:47:27.900
And even within a given page,
you may need to keep track of a session

00:47:28.020 --> 00:47:30.230
if a user requests that page again.

00:47:30.460 --> 00:47:35.190
So the WebObjects framework manages
state in those three realms.

00:47:35.700 --> 00:47:38.690
So we introduced the
Enterprise Objects Frameworks before.

00:47:38.790 --> 00:47:41.280
So if you're having a hard time
understanding of what this actually is,

00:47:41.280 --> 00:47:44.440
there are two industry standard
terms that will give you a

00:47:44.440 --> 00:47:46.390
sense of what it accomplishes.

00:47:46.390 --> 00:47:49.920
One is entity relational modeling,
the other is object relational mapping.

00:47:49.920 --> 00:47:53.380
And these are ways of thinking of
your data in higher level terms

00:47:53.380 --> 00:47:56.680
than tables and columns and joins,
thinking about them more

00:47:56.880 --> 00:47:58.360
abstractly as an objects.

00:47:59.060 --> 00:48:01.580
And like we said,
this takes care of writing all of

00:48:01.580 --> 00:48:05.060
that low level code that you as a
human shouldn't ever have to write.

00:48:05.060 --> 00:48:06.860
So the framework takes care of it.

00:48:06.860 --> 00:48:09.560
It's much more reliable than
you writing four joins to

00:48:09.560 --> 00:48:11.430
traverse a complex relationship.

00:48:11.570 --> 00:48:13.830
And it allows you to
focus on business objects,

00:48:13.830 --> 00:48:14.880
like we said.

00:48:14.900 --> 00:48:17.430
So one thing you have to
trust about using EOF,

00:48:17.430 --> 00:48:20.670
that's what we call it,
is that Java invocations you make,

00:48:20.670 --> 00:48:24.490
so invocations you make on your objects,
actually result in the end in

00:48:24.490 --> 00:48:28.900
certain database operations,
such as selects, inserts, and updates.

00:48:29.080 --> 00:48:31.590
So once you learn to trust that,
you're going to get a lot further

00:48:31.590 --> 00:48:32.890
as a WebObjects developer.

00:48:32.900 --> 00:48:37.330
So there are two really
important terms in EOF.

00:48:37.330 --> 00:48:40.080
We talked about business objects.

00:48:40.130 --> 00:48:43.210
Well, your business objects are
actually instances of something

00:48:43.210 --> 00:48:44.690
we call an enterprise object.

00:48:44.760 --> 00:48:47.940
And these enterprise objects
live in an editing context.

00:48:47.940 --> 00:48:49.980
An editing context is a container.

00:48:49.980 --> 00:48:52.850
And I bring these up now
because when you start actually

00:48:52.850 --> 00:48:56.460
writing code in an application,
these are two of the types of objects

00:48:56.460 --> 00:48:58.820
you'll be interacting with most often.

00:48:59.060 --> 00:49:01.690
So this is a really
important set of frameworks.

00:49:01.700 --> 00:49:05.190
So we have two slides on it.

00:49:05.870 --> 00:49:06.500
There we go.

00:49:06.540 --> 00:49:09.260
So it also includes a
high-level qualifier language.

00:49:09.260 --> 00:49:11.980
So when you need to write a
description and tell EOF what

00:49:11.980 --> 00:49:13.870
kind of data you want to fetch,
well,

00:49:13.980 --> 00:49:17.200
we allow you to do this in Java with
a very English-like syntax.

00:49:17.280 --> 00:49:20.660
Rather than have to worry about
the joins that you need to write,

00:49:20.660 --> 00:49:23.860
and all of the appropriate SQL,
you write in very high-level

00:49:23.860 --> 00:49:27.760
qualifier objects that then get
transposed down to the database layer.

00:49:27.790 --> 00:49:32.240
We manage joins for you, like I said,
and EOF introduces the idea of keypath.

00:49:32.240 --> 00:49:34.850
So a very quick example,
if we have an address object

00:49:35.020 --> 00:49:37.710
referred to by the address key,
and we have a street

00:49:37.710 --> 00:49:40.900
property in that object,
we can get to that data simply

00:49:40.900 --> 00:49:42.940
by using this chain of keys.

00:49:42.940 --> 00:49:44.810
And this is all enabled
by key value coding,

00:49:44.810 --> 00:49:46.120
like we discussed before.

00:49:46.120 --> 00:49:50.270
And EOF provides automatic transparent
access to multiple data sources.

00:49:50.270 --> 00:49:53.130
So if you want your business
objects to be composed of

00:49:53.130 --> 00:49:56.290
data from an Oracle database
and a front-based database,

00:49:56.320 --> 00:49:59.860
they can do this, and you don't really
have to think about it.

00:49:59.960 --> 00:50:03.880
And EOF includes a validation
infrastructure that allows you to

00:50:03.880 --> 00:50:08.100
provide validation on properties,
so on the data in your objects,

00:50:08.100 --> 00:50:11.080
and you might want to validate
that data at certain points in

00:50:11.080 --> 00:50:12.420
the application's execution.

00:50:12.420 --> 00:50:15.400
If a user requests to save data,
you want to make sure you want

00:50:15.400 --> 00:50:18.250
to validate the data before it
actually gets to the database,

00:50:18.250 --> 00:50:20.220
and EOF provides this infrastructure.

00:50:20.220 --> 00:50:23.100
And like I said,
there's also very rich support for

00:50:23.100 --> 00:50:25.350
inheritance in enterprise objects.

00:50:25.400 --> 00:50:28.560
So we talked about frameworks,
so where does your code,

00:50:28.560 --> 00:50:31.260
how does your code work
with the frameworks?

00:50:32.060 --> 00:50:34.290
Well, if the enterprise objects
framework is on the database side,

00:50:34.460 --> 00:50:36.360
and the web objects framework
is on the client side,

00:50:36.360 --> 00:50:42.020
your business logic plugs in to EOF,
and your application logic plugs

00:50:42.020 --> 00:50:44.670
into the web objects framework.

00:50:45.020 --> 00:50:48.240
And in a running application,
clients send requests in,

00:50:48.300 --> 00:50:50.420
they come in through the web server,
which forwards it to

00:50:50.420 --> 00:50:52.670
the application server,
the WebObjects framework

00:50:52.670 --> 00:50:56.340
takes over and helps you make
sense of that client request.

00:50:56.340 --> 00:50:59.380
And in conjunction with your application
logic and your business logic,

00:50:59.600 --> 00:51:03.740
perhaps that user requested data,
and if so, UF will help you get that

00:51:03.750 --> 00:51:06.650
data out of a database,
and put that data,

00:51:06.710 --> 00:51:10.200
get that data in the form of objects,
which you can then,

00:51:10.200 --> 00:51:13.180
you pass back through your application,
you use that,

00:51:13.180 --> 00:51:16.380
those objects to populate these
page templates that you write,

00:51:16.380 --> 00:51:18.980
and then the WebObjects
framework ultimately packages

00:51:18.980 --> 00:51:21.720
that back up in a response that
gets sent out to the client.

00:51:23.900 --> 00:51:26.750
We talked about rapid development
and we're running a little short.

00:51:26.760 --> 00:51:29.300
So, behind the scenes.

00:51:29.300 --> 00:51:33.960
So this is one of the examples that
ships with the WebObjects product.

00:51:33.960 --> 00:51:34.890
It's called iShax.

00:51:34.940 --> 00:51:38.910
It allows -- it's a front end to the real
estate database that you saw in -- no,

00:51:38.910 --> 00:51:40.110
you didn't.

00:51:40.260 --> 00:51:42.740
It's a front end to a database
we ship as one of the examples,

00:51:42.740 --> 00:51:45.200
which is a real estate database.

00:51:45.200 --> 00:51:46.800
So how does this page happen?

00:51:46.840 --> 00:51:50.150
What's going on behind the scenes
to actually produce this page?

00:51:50.390 --> 00:51:52.660
Well, the first layer is HTML.

00:51:52.730 --> 00:51:54.330
There's -- this page is made of HTML.

00:51:54.440 --> 00:51:56.220
Well, where does this HTML come from?

00:51:56.300 --> 00:51:58.870
Well, it comes from one of
these WoE components.

00:51:58.900 --> 00:52:02.390
And this component happens to
be the search page component.

00:52:02.560 --> 00:52:04.530
And this component includes
a bunch of dynamic elements.

00:52:04.590 --> 00:52:09.320
The values, the content of these dynamic
elements is resolved at runtime.

00:52:09.540 --> 00:52:11.000
So, what components?

00:52:11.270 --> 00:52:12.840
We touched on briefly before.

00:52:12.860 --> 00:52:14.060
They're page templates.

00:52:14.090 --> 00:52:16.460
They're made up of standard HTML,
JavaScript, and other web content,

00:52:16.550 --> 00:52:20.220
but most importantly, they're made up of
these dynamic elements.

00:52:20.250 --> 00:52:22.400
More components are
reusable and nestable,

00:52:22.400 --> 00:52:25.510
so you can reuse a component
within your application.

00:52:25.510 --> 00:52:29.120
It's very common to have a common page
wrapper component that all of the pages,

00:52:29.120 --> 00:52:31.340
all of the components
in your application use.

00:52:31.380 --> 00:52:33.260
You only have to write
that component once,

00:52:33.260 --> 00:52:35.200
and you can put it in
all of your templates,

00:52:35.280 --> 00:52:40.400
so you get the same -- that same
feel without writing more code.

00:52:40.400 --> 00:52:42.760
Components are synchronized,
and they communicate with one another.

00:52:42.820 --> 00:52:45.020
Each component has a
Java object behind it,

00:52:45.020 --> 00:52:46.410
and that's really key.

00:52:46.450 --> 00:52:49.730
So this isn't just -- a component
is not just a set of HTML with

00:52:49.730 --> 00:52:52.930
a little bit of JavaScript or,
you know, maybe even SQL in it,

00:52:53.010 --> 00:52:55.670
like other kinds of component models,
but there's actually a

00:52:55.670 --> 00:52:57.130
Java object behind each component.

00:52:57.270 --> 00:52:59.890
So this allows you to store state
and allows you to communicate

00:52:59.890 --> 00:53:03.800
with other Java objects,
such as your business objects.

00:53:03.800 --> 00:53:06.900
And what components have full access
to session and application data,

00:53:06.900 --> 00:53:10.270
so if you need to provide a customized,
personalized experience

00:53:10.400 --> 00:53:12.790
on a particular page,
you have access to a user session.

00:53:14.550 --> 00:53:17.700
So these dynamic element things,
like we said, they're HTML tags.

00:53:17.720 --> 00:53:20.260
Their characteristics and values
are determined at runtime.

00:53:20.260 --> 00:53:21.110
Let's look at an example.

00:53:21.180 --> 00:53:24.250
So in that iShax example page that
we showed you a few slides ago,

00:53:24.250 --> 00:53:25.620
there's a pop-up menu.

00:53:25.620 --> 00:53:30.660
And the pop-up menu allows you to
narrow down the scope of your search.

00:53:30.660 --> 00:53:32.360
And it allows you to choose a state.

00:53:32.530 --> 00:53:36.000
So each dynamic element has a
number of different attributes.

00:53:36.000 --> 00:53:39.660
And you bind these attributes to
values in your business objects,

00:53:39.680 --> 00:53:41.760
static values maybe, whatever.

00:53:42.340 --> 00:53:44.970
So in this case,
we're calling out the value attribute.

00:53:45.220 --> 00:53:48.070
And the value attribute
is bound to a key path.

00:53:48.140 --> 00:53:49.300
We talked about key paths before.

00:53:49.300 --> 00:53:51.660
So in this case,
it's looking for an object

00:53:52.110 --> 00:53:53.640
that's resolved by the name key.

00:53:53.680 --> 00:53:56.480
And it's looking for the
abbreviation of that state,

00:53:56.480 --> 00:53:58.090
such as CA for California.

00:53:58.180 --> 00:54:04.370
So at runtime, that list,
that 50 state list, element list,

00:54:04.660 --> 00:54:05.880
will not include the
full name of the state,

00:54:05.980 --> 00:54:08.190
but rather the abbreviation.

00:54:08.380 --> 00:54:11.180
Okay, so we talked about development.

00:54:11.190 --> 00:54:12.640
We're almost done here.

00:54:12.700 --> 00:54:15.890
But once you're done
developing your application,

00:54:15.960 --> 00:54:16.830
you actually need to deploy it.

00:54:16.900 --> 00:54:19.700
And if you attended the
WebObjects State of the Union,

00:54:19.700 --> 00:54:22.860
we introduced new ways of
deploying your applications

00:54:22.860 --> 00:54:24.790
in Panther Server with JBoss.

00:54:24.790 --> 00:54:28.090
And there are two sessions
dedicated specifically to this,

00:54:28.090 --> 00:54:29.440
so please go see them.

00:54:29.440 --> 00:54:32.780
But I want to cover two
very quick things today.

00:54:32.780 --> 00:54:33.820
There are two types of deployment.

00:54:33.820 --> 00:54:36.270
There's a standard WebObjects
deployment using our tools

00:54:36.270 --> 00:54:37.780
and deployment infrastructure.

00:54:38.300 --> 00:54:41.020
And there's servlet deployment,
which allows you to deploy

00:54:41.180 --> 00:54:44.320
your WebObjects application
as a servlet in Tomcat,

00:54:44.320 --> 00:54:46.610
in JBoss, WebLogic, etc.

00:54:49.300 --> 00:54:54.300
Okay, so in sum, with WebObjects,
you write less code,

00:54:54.360 --> 00:54:57.140
you get a lot of functionality
out of the box for free,

00:54:57.160 --> 00:55:00.170
the objects you write
are usually reusable,

00:55:00.520 --> 00:55:02.280
The Enterprise Objects
Framework allows you to build

00:55:02.490 --> 00:55:04.000
database-independent applications.

00:55:04.000 --> 00:55:06.430
So you might start developing
your application on one database

00:55:06.560 --> 00:55:09.410
and move to another production
database when you're finished,

00:55:09.410 --> 00:55:10.300
when you deploy.

00:55:10.300 --> 00:55:12.410
We have a lot of innovative,
very cool technologies,

00:55:12.470 --> 00:55:14.980
like the rapid development
tools and frameworks for

00:55:14.980 --> 00:55:16.690
doing rule-based development.

00:55:16.790 --> 00:55:21.410
And we provide a number of
flexible deployment options.

00:55:21.490 --> 00:55:22.390
So how do you get started?

00:55:22.480 --> 00:55:26.660
There are thousands and thousands of
pages of documentation on WebObjects.

00:55:26.660 --> 00:55:28.940
We suggest getting started
with these four first.

00:55:28.940 --> 00:55:33.420
Web applications will take you
through building an HTML application.

00:55:33.420 --> 00:55:35.520
It includes a number of tutorials.

00:55:35.520 --> 00:55:38.940
And the ideas that you learn in
there are really applicable to all

00:55:38.940 --> 00:55:40.630
kinds of WebObjects applications.

00:55:40.640 --> 00:55:43.040
So if you're developing a
web service application,

00:55:43.040 --> 00:55:47.440
you should still start with that book to
familiarize yourself with the concepts.

00:55:47.500 --> 00:55:50.360
And using EOModeler not only
teaches you how to use EOModeler,

00:55:50.360 --> 00:55:53.330
but it also introduces a lot of
the important concepts in the

00:55:53.380 --> 00:55:55.140
Enterprise Objects Framework.

00:55:55.140 --> 00:55:58.340
And if you want to learn more about the
dynamic elements that we provide for you,

00:55:58.340 --> 00:55:58.460
you can go to the EOModeler website.

00:55:58.490 --> 00:56:00.460
There's the dynamic elements reference.

00:56:00.460 --> 00:56:02.780
And if you're unfamiliar
with Project Builder,

00:56:02.780 --> 00:56:06.080
or even if you are familiar with it,
there are a few things that are

00:56:06.080 --> 00:56:08.430
unique to WebObjects development
that a lot of people are

00:56:08.450 --> 00:56:09.960
confused about at the beginning.

00:56:09.960 --> 00:56:13.120
So go consult that specialized
Project Builder for WebObjects

00:56:13.220 --> 00:56:15.170
developers document to clear it all up.

00:56:16.830 --> 00:56:17.400
Who to contact?

00:56:17.560 --> 00:56:20.900
We always love to hear your feedback,
your ideas for the product.

00:56:21.030 --> 00:56:23.700
So, webobjects@apple.com is probably
the best way to get a hold of us.