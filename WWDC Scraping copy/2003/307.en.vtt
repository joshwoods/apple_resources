WEBVTT

00:00:21.200 --> 00:00:23.500
Good morning everybody,
this is session 307,

00:00:23.500 --> 00:00:25.510
Apple Tools for Carbon Development.

00:00:25.510 --> 00:00:26.700
I'm Chris Espinosa.

00:00:26.700 --> 00:00:31.420
I've been with the Development Tools team
working on Xcode specifically

00:00:31.420 --> 00:00:32.820
for the last six months or so.

00:00:32.820 --> 00:00:38.860
I've been working with
Development Tools in specific since...

00:00:39.100 --> 00:00:54.000
[Transcript missing]

00:01:03.240 --> 00:01:06.190
Trying to figure out
where to point my clicker.

00:01:06.200 --> 00:01:09.080
It doesn't point.

00:01:09.680 --> 00:01:10.590
There we go.

00:01:10.660 --> 00:01:11.320
Okay.

00:01:11.480 --> 00:01:15.130
What we're going to cover this
morning is an overview of Apple Tools.

00:01:15.130 --> 00:01:18.020
You've probably seen three or four
of these overviews of Apple Tools,

00:01:18.020 --> 00:01:20.940
but we're going to do it from a
Carbon perspective this morning.

00:01:20.940 --> 00:01:23.650
We're only going to be talking
about Carbon applications.

00:01:25.330 --> 00:01:28.260
The process of bringing a project,
whether it be a project builder

00:01:28.260 --> 00:01:32.440
project or a Code Warrior project,
into Xcode.

00:01:32.550 --> 00:01:37.550
Getting your code to build with the
Xcode IDE and with the GCC compiler.

00:01:37.970 --> 00:01:43.040
Some hints and tips for optimizing the
build time and the turnaround time,

00:01:43.040 --> 00:01:45.640
how you can take advantage
of the Xcode features.

00:01:45.640 --> 00:01:48.410
A little bit about Xcode
support for Mac resources,

00:01:48.510 --> 00:01:51.010
if you have resource-based
Carbon projects,

00:01:51.010 --> 00:01:52.380
which most of you do.

00:01:52.380 --> 00:01:56.860
And just a little bit about designing
Carbon interfaces with Interface Builder.

00:01:56.860 --> 00:01:59.140
There are other sessions
on Interface Builder,

00:01:59.150 --> 00:02:02.720
and there's a really great session
on building a modern Mac application,

00:02:02.720 --> 00:02:05.720
which we'll cover using NIBS and
Interface Builders later

00:02:05.720 --> 00:02:08.680
on that I'll point you to,
but I'm just going to do

00:02:08.680 --> 00:02:10.280
a brief overview of that.

00:02:11.030 --> 00:02:13.110
Now, I want to do the
standard disclaimer here.

00:02:13.310 --> 00:02:16.280
I am talking about Xcode,
and I am talking about Carbon.

00:02:16.280 --> 00:02:19.180
The fact that I'm talking about
those two things does not mean

00:02:19.240 --> 00:02:22.500
that we are killing everything
else that I'm not talking about.

00:02:22.500 --> 00:02:25.210
We are not killing Cocoa Development.

00:02:25.220 --> 00:02:26.900
We are not killing Objective-C.

00:02:26.900 --> 00:02:28.710
We are not killing AppleScript.

00:02:28.810 --> 00:02:33.890
We are not killing Java or
EOF or anything like that.

00:02:34.040 --> 00:02:36.610
The fact that I fail to talk
about something does not

00:02:36.620 --> 00:02:38.360
signal its imminent demise.

00:02:38.360 --> 00:02:39.920
I just want to make that clear.

00:02:42.170 --> 00:02:44.630
So the tools you've already
seen in a couple of sessions,

00:02:44.630 --> 00:02:46.930
the Xcode integrated
development environment,

00:02:46.930 --> 00:02:49.040
and you've seen a lot of
the great features of that,

00:02:49.150 --> 00:02:53.310
the CodeSense feature,
the great indexing,

00:02:53.460 --> 00:02:55.100
the great workflow and navigation.

00:02:55.100 --> 00:02:57.500
It's a project manager and build system.

00:02:57.500 --> 00:03:00.930
It's got an integrated code
editor and an integrated debugger.

00:03:01.230 --> 00:03:05.330
The debugger I'm going
to show you tomorrow.

00:03:05.330 --> 00:03:05.330
We're just going to build today.

00:03:05.540 --> 00:03:07.600
Interface Builder is another key tool.

00:03:07.840 --> 00:03:11.910
It's primarily a Cocoa development tool,
but we are moving more and more

00:03:12.040 --> 00:03:16.160
to using Interface Builder as the
principal design tool for Carbon.

00:03:16.160 --> 00:03:23.160
And if you want to get at certain new
Aqua elements through the Carbon toolbox,

00:03:23.300 --> 00:03:26.160
the best way to do them,
in some ways the only way to do that,

00:03:26.160 --> 00:03:30.280
is to use Interface Builder to design
nibs in order to get at those objects.

00:03:31.200 --> 00:03:33.030
And then there are
some performance tools,

00:03:33.040 --> 00:03:37.030
and all these performance tools
work with your Carbon applications.

00:03:37.040 --> 00:03:41.910
The Sampler Performance Analysis Tools,
the malloc Debug Memory Analyzer,

00:03:41.930 --> 00:03:47.140
the Object Alloc Object Analyzer,
that is primarily for Objective-C,

00:03:47.170 --> 00:03:50.800
and then the Chud Low-Level
Machine Tools will analyze anything

00:03:50.880 --> 00:03:54.030
as long as it's expressed in bytes.

00:03:54.400 --> 00:05:20.500
[Transcript missing]

00:05:20.670 --> 00:05:22.030
Xcode loves Carbon.

00:05:22.150 --> 00:05:24.470
We are working very,
very hard to make Xcode a

00:05:24.470 --> 00:05:27.550
great development environment
for your application.

00:05:27.620 --> 00:05:31.580
We're making it easy to import
Carbon projects wherever they come from,

00:05:31.580 --> 00:05:33.630
Project Builder or Code Warrior.

00:05:33.640 --> 00:05:38.520
It compiles Mac resource files,
whether they be .r or .rsrc files,

00:05:38.590 --> 00:05:42.530
ties in with existing resource
editors in a seamless way.

00:05:42.530 --> 00:05:47.340
It supports building nib files if you are
moving to nib files in Interface Builder.

00:05:47.640 --> 00:05:50.110
It's the best way to use the
new HI elements and the best

00:05:50.170 --> 00:05:51.620
way to use Carbon Events.

00:05:51.700 --> 00:05:55.770
And it supports combining Carbon and
Cocoa in the same application.

00:05:55.900 --> 00:05:58.760
There are a lot of new APIs that
we have that are Cocoa only,

00:05:58.760 --> 00:06:03.190
and you can get to them from
Carbon using Objective-C++.

00:06:03.280 --> 00:06:07.470
And if you want to take your existing
Carbon app and start using some of the

00:06:07.470 --> 00:06:11.250
unique and interesting Cocoa features,
Xcode is the best way

00:06:11.250 --> 00:06:12.770
to start doing that.

00:06:12.860 --> 00:06:15.090
So let's look at bringing
a project into Xcode.

00:06:15.230 --> 00:06:17.000
There are a few simple steps.

00:06:17.170 --> 00:06:20.510
First, you need to make sure you
have a Carbon application.

00:06:20.620 --> 00:06:24.500
If you have a Mac OS 9 application
that's still based on Interface Lab,

00:06:24.780 --> 00:06:27.880
first thing you've got to do is Carbonize
it before you can bring it into Xcode.

00:06:27.880 --> 00:06:33.700
Because Mac OS X applications must
be Carbon to run in Mac OS X native.

00:06:33.910 --> 00:06:38.130
And if you've got a 9 application,
Carbonize it on 9 first,

00:06:38.200 --> 00:06:41.100
and then you can bring it
into Xcode on Mac OS X.

00:06:41.300 --> 00:06:43.730
Then you need to bring it into Maco.

00:06:43.750 --> 00:06:46.570
Maco is the code format for Mac OS X.

00:06:46.810 --> 00:06:47.040
See the description for
the Mac OS X application.

00:06:47.040 --> 00:06:49.720
The "CFM" is for
Mac OS 9 and for Classic.

00:06:50.020 --> 00:06:53.420
If you're going to be building
a Mac OS X application,

00:06:53.420 --> 00:06:57.060
we really strongly recommend you
move it into the Maco format to

00:06:57.060 --> 00:07:01.360
take most advantage of Mac OS X and
to take most advantage of Xcode.

00:07:01.580 --> 00:07:05.990
Most of the rapid turnaround
features like Fix and Continue and

00:07:06.000 --> 00:07:08.920
Zero Link only work in the Maco format.

00:07:09.040 --> 00:07:11.780
Then you need to adjust your build
settings to get your project to build.

00:07:11.780 --> 00:07:17.020
Build settings are always very fussy,
and working in Xcode is no exception.

00:07:17.020 --> 00:07:19.900
So if you move a project
either from Project Builder or

00:07:20.020 --> 00:07:23.520
from Code Warrior into Xcode,
you're going to be spending most of

00:07:23.520 --> 00:07:27.610
your time tweaking your build settings,
making sure that you're building

00:07:27.610 --> 00:07:29.460
what you want to build when.

00:07:29.460 --> 00:07:20.040
And then the last step is when you
finally get your project building,

00:07:20.040 --> 00:07:08.810
you're going to have to look at your
source code because the GCC 3.3 compiler

00:07:08.810 --> 00:06:58.880
has some differences from GCC 3.1,
which Project Builder used,

00:06:58.880 --> 00:06:49.930
and it has some differences from
the Code Warrior MWCC compiler,

00:06:49.930 --> 00:07:48.470
and you're going to need to
make some changes in your source

00:07:48.470 --> 00:07:50.220
code in order to cope with that.

00:07:50.220 --> 00:07:54.320
In the demo we're going to do today,
we're going to make exactly four changes

00:07:54.320 --> 00:08:00.910
in the source code to bring a large
Code Warrior project over into Xcode.

00:08:01.500 --> 00:08:03.580
So first step,
carbonizing your application.

00:08:03.650 --> 00:08:05.310
I really shouldn't have to say this.

00:08:05.370 --> 00:08:07.600
We've been talking about this
for three or four years now.

00:08:07.600 --> 00:08:11.520
Just the quick steps you should
have done this years ago if

00:08:11.520 --> 00:08:15.520
you've still got a Mac OS 9 only,
Interface Live only application.

00:08:15.540 --> 00:08:20.590
You isolate your Mac OS usage to just
the subset supported by CarbonLib.

00:08:20.590 --> 00:08:23.350
You modernize it to use new APIs.

00:08:23.360 --> 00:08:26.600
You remove the linkages to
Interface Live and start using

00:08:26.600 --> 00:08:28.580
CarbonLib or its stub instead.

00:08:29.300 --> 00:08:34.800
We still have posted this tool
that will look at your application

00:08:34.800 --> 00:08:39.180
and tell you what Carbon APIs you
are using and not using that will

00:08:39.180 --> 00:08:40.830
help you make this transition.

00:08:40.840 --> 00:08:43.360
If you haven't done that now,
do that now,

00:08:43.360 --> 00:08:46.960
and then come back at the end
of the session and we'll talk.

00:08:48.530 --> 00:08:50.060
The next thing is converting to Mach-O.

00:08:50.060 --> 00:08:52.160
If you have a project
builder application,

00:08:52.160 --> 00:08:53.340
it's already Mach-O.

00:08:53.340 --> 00:08:57.450
If you have a CodeWarrior application,
I recommend the best thing to do

00:08:57.540 --> 00:09:00.960
is to change your project from
CFM to Mach-O in the CodeWarrior

00:09:00.960 --> 00:09:03.970
environment where it's familiar,
where you've got more

00:09:03.970 --> 00:09:06.490
control over things,
where you don't have to be changing

00:09:06.490 --> 00:09:08.150
three variables at the same time.

00:09:08.640 --> 00:09:11.950
CodeWarrior does a good job of
building Mach-O applications,

00:09:12.040 --> 00:09:15.620
so if you just go into the target
settings panel and change the linker

00:09:15.700 --> 00:09:21.550
setting to Mac OS X PowerPC Mach-O,
that will get you a Mach-O application,

00:09:21.550 --> 00:09:24.720
and that will start bringing in all
of the changes you need to make in

00:09:24.750 --> 00:09:26.790
order to make a Mach-O application.

00:09:26.800 --> 00:09:31.330
If you have a very simple application
that doesn't load shared libraries,

00:09:31.330 --> 00:09:35.270
it doesn't bring in static libraries,
it doesn't call plugins,

00:09:35.380 --> 00:09:38.310
basically all it does is
hit main and then run.

00:09:38.320 --> 00:09:40.610
There's very, very little to do.

00:09:40.630 --> 00:09:43.020
It's just a binary loader format.

00:09:43.020 --> 00:09:47.240
If you happen to have something
that uses a plugin architecture,

00:09:47.250 --> 00:09:51.010
if you do some dynamic loading,
you'll have to migrate the

00:09:51.010 --> 00:09:55.310
APIs that you call in order to load
those plugins from CodeFragment

00:09:55.310 --> 00:09:57.760
Manager APIs to the Mach-O APIs.

00:09:57.760 --> 00:10:03.590
What we recommend is to use the
CFPlugin architecture in Core Foundation.

00:10:03.600 --> 00:10:08.510
CFPlugin is a way to dynamically load
plugins that could be either CFM.

00:10:08.540 --> 00:10:13.410
Or Mach-O, and what that allows you to
do is maintain compatibility

00:10:13.420 --> 00:10:18.710
with existing CFM plugins,
but also support Mach-O plugins as well.

00:10:18.720 --> 00:10:21.370
The only hard part is
that if those plugins,

00:10:21.370 --> 00:10:24.950
the CFM plugins,
happen to call back into your application

00:10:24.950 --> 00:10:29.960
and expect you to be a CFM application,
that's a particularly difficult case.

00:10:29.960 --> 00:10:32.960
If you want to come to one of the
feedback forums or down to the

00:10:32.960 --> 00:10:36.020
porting lab or catch me afterwards,
we have some techniques

00:10:36.020 --> 00:10:37.040
to deal with that.

00:10:37.120 --> 00:10:40.570
They just involve making a lot of...
...a lot of CFM glue that looks

00:10:40.570 --> 00:10:44.710
like a CFM link library in your
application that calls in to the Mach-O.

00:10:44.720 --> 00:10:47.790
It's a tough problem,
but a lot of people don't have it.

00:10:50.800 --> 00:12:39.000
[Transcript missing]

00:12:39.330 --> 00:12:43.060
The second thing you do is after you
import is that you need to move from

00:12:43.060 --> 00:12:46.560
the Code Warrior style precompiled
header mechanism to the Xcode

00:12:46.740 --> 00:12:49.010
style precompiled header mechanism.

00:12:49.020 --> 00:12:52.450
The two compilers have
somewhat different mechanisms,

00:12:52.450 --> 00:12:56.800
and you're going to get no joy in
anything until you deal with the headers.

00:12:57.010 --> 00:13:00.670
Because until you get your
precompiled headers right,

00:13:00.740 --> 00:13:03.780
you won't get the speed
advantages of Xcode,

00:13:03.780 --> 00:13:07.020
and you're going to get
a lot of build failures,

00:13:07.020 --> 00:13:07.130
and it's not going to be fun.

00:13:07.660 --> 00:13:10.110
The third thing is if you
happen to be using the

00:13:10.110 --> 00:13:14.160
Power Plant application framework,
there are a small number of changes

00:13:14.160 --> 00:13:17.780
you need to make in Power Plant for
Power Plant to be compiled by the

00:13:17.780 --> 00:13:22.240
GCC 3.3 compiler and build against
the Apple standard libraries.

00:13:22.240 --> 00:13:24.150
A very small number of changes.

00:13:24.200 --> 00:13:27.850
The Power Plant sources
are really very clean,

00:13:27.850 --> 00:13:31.810
and the GCC compiler is
really quite compatible.

00:13:31.810 --> 00:13:33.260
There are just a couple of
changes you need to make,

00:13:33.260 --> 00:13:33.260
and we'll show you.

00:13:33.800 --> 00:13:37.000
Then the fourth thing is you need to
fix your target settings to get rid

00:13:37.000 --> 00:13:42.460
of some link errors and make sure that
Xcode is building your project properly.

00:13:42.640 --> 00:13:46.280
And then once you build,
then you need to make a couple of

00:13:46.280 --> 00:13:50.400
changes in the resource files in
order to work with the developer

00:13:50.480 --> 00:13:51.890
release version of Xcode.

00:13:52.070 --> 00:13:55.340
We're going to get these worked
out by the time Xcode 1.0 ships,

00:13:55.340 --> 00:13:58.300
but right now there are some
things you have to do to the

00:13:58.650 --> 00:14:00.390
resource files to bring them in.

00:14:00.620 --> 00:14:03.120
And then you get to work
on warnings and errors,

00:14:03.160 --> 00:14:05.660
real differences between the compilers.

00:14:05.660 --> 00:14:08.070
Usually these are things that
MetroWorks was lenient about,

00:14:08.180 --> 00:14:09.780
that GCC is stricter about.

00:14:09.780 --> 00:14:15.240
Sometimes it's things that MetroWorks
supported or used in a different way

00:14:15.240 --> 00:14:21.280
that GCC interprets in a different way,
often gray areas in the standards.

00:14:21.280 --> 00:14:25.770
For most mainstream
standards-compliant C and C++ code,

00:14:25.770 --> 00:14:30.140
you can compile tens of thousands
of lines without seeing an error.

00:14:32.140 --> 00:14:34.940
So to do this demo,
I'm going to bring up the

00:14:35.960 --> 00:14:43.130
useful and lovely Scott Tooker,
who has put together--

00:14:44.100 --> 00:14:48.770
An example of, he did the importer that
imports Code Warrior projects,

00:14:48.860 --> 00:14:52.300
and he's going to take an example of a
fairly interesting Code Warrior project.

00:14:52.320 --> 00:14:53.220
Thanks, Chris.

00:14:53.220 --> 00:14:56.060
It's a little bit of a misnomer
to say I did the importer.

00:14:56.060 --> 00:14:59.640
I basically took an old version of the
importer and made it work a lot better.

00:14:59.640 --> 00:15:02.850
So, what I'm going to show you here
today is we wanted to find a project

00:15:02.860 --> 00:15:06.050
that we would bring over and just
show the whole import process,

00:15:06.050 --> 00:15:08.820
from importing to then going through
and fixing all the problems to

00:15:08.820 --> 00:15:10.460
actually running the application.

00:15:10.460 --> 00:15:15.700
And so we picked Appearance Demo,
which is a common Power Plant example.

00:15:15.700 --> 00:15:17.800
And so just for those of
you who have never seen it,

00:15:17.800 --> 00:15:20.340
which is probably not very many,
this is Appearance Demo.

00:15:20.340 --> 00:15:24.040
So it's basically a showcase for
all of the Power Plant widgets.

00:15:24.040 --> 00:15:26.760
And we thought this was a good
example because it's small,

00:15:26.760 --> 00:15:29.130
but it also uses Power Plant,
like many of you.

00:15:29.140 --> 00:15:32.280
And we wanted to show that
Xcode can work with Power Plant.

00:15:32.280 --> 00:15:34.780
You can run Power Plant,
and it just runs and works.

00:15:34.780 --> 00:15:37.280
So let me put that.

00:15:40.090 --> 00:15:44.000
So the first thing we're
going to do is launch Xcode.

00:15:44.020 --> 00:15:45.760
We're going to import the project.

00:15:45.790 --> 00:15:48.510
So you just say import
code where your project.

00:15:51.320 --> 00:15:59.340
Let me choose . And so you
see here I have a path to--

00:15:59.480 --> 00:16:01.450
unlike Project Builder,
we take the actual

00:16:01.510 --> 00:16:03.880
Code Warrior project file.

00:16:04.110 --> 00:16:06.940
And also,
you can change them if you want,

00:16:06.940 --> 00:16:10.060
although by default it's just the same.

00:16:10.060 --> 00:16:12.080
We also have this import
global source trees.

00:16:12.080 --> 00:16:13.580
We support source trees now.

00:16:13.690 --> 00:16:15.760
So if you have source
trees in Code Warrior,

00:16:15.760 --> 00:16:18.080
we can pull them over
at the per app level.

00:16:18.180 --> 00:16:20.980
In fact,
the importer creates a source tree to

00:16:21.140 --> 00:16:26.490
deal with the compiler relative paths you
may have in your Code Warrior project.

00:16:28.790 --> 00:16:32.020
So what we're doing here is we
are using Apple Script to launch

00:16:32.020 --> 00:16:33.990
Code Warrior and then ask it,
okay,

00:16:33.990 --> 00:16:35.690
I want an XML version of the project.

00:16:35.830 --> 00:16:40.210
Then we take that XML and we go scanning
through it and find all your files.

00:16:40.290 --> 00:16:47.350
And because Project Builder likes to
have all the headers in the project,

00:16:47.670 --> 00:16:52.960
it likes to be very explicit,
we actually then -- wow.

00:16:52.960 --> 00:16:54.100
Sorry, I've never actually done
it on a fast machine.

00:16:55.490 --> 00:16:57.960
I thought I'd have more time.

00:16:57.960 --> 00:17:00.040
But CX code's really fast.

00:17:00.040 --> 00:17:02.780
But anyway, just to finish up,
we actually bring in all that stuff.

00:17:02.780 --> 00:17:05.240
So by this time,
what we're asking you is, OK,

00:17:05.240 --> 00:17:06.800
we want to know your encoding.

00:17:06.800 --> 00:17:09.700
I recommend that for the older project,
especially older projects,

00:17:09.780 --> 00:17:12.560
that you just go ahead with
the Mac OS Roman encoding.

00:17:12.560 --> 00:17:16.130
Because that's probably what CodeWarrior
was-- when you created the files,

00:17:16.130 --> 00:17:18.220
that's what CodeWarrior was using.

00:17:18.240 --> 00:17:19.920
So let's go ahead and
start with the target.

00:17:19.920 --> 00:17:22.160
You'll notice that you
get a native target.

00:17:22.160 --> 00:17:26.280
So we're not using the old
project builder targets here.

00:17:26.280 --> 00:17:28.560
We're using the new native Xcode targets.

00:17:28.650 --> 00:17:33.180
And the first thing we're going to
want to do is set up the prefix header.

00:17:33.260 --> 00:17:36.400
As Chris mentioned,
the precompiled support right now

00:17:36.400 --> 00:17:37.860
is a bit different from CodeWarrior.

00:17:37.860 --> 00:17:40.440
So there's some things you need
to do to make it work well.

00:17:40.440 --> 00:17:43.360
So the first thing we're going to do
is we're just going to double check

00:17:43.360 --> 00:17:45.220
and see what the prefix file is.

00:17:45.240 --> 00:17:46.140
Oops.

00:17:46.180 --> 00:17:49.920
Of course, if Scott could type,
life would be better.

00:17:49.920 --> 00:17:52.160
So as you can see,
we bring over the prefix.

00:17:52.160 --> 00:17:54.420
header

00:18:03.800 --> 00:18:05.400
So it's appearance demo Mach prefix.

00:18:05.400 --> 00:18:07.660
And we actually add this to your target.

00:18:07.730 --> 00:18:15.020
So let me just move this out of
the-- let's close this for a second.

00:18:15.020 --> 00:18:15.020
And let me just find the prefix.

00:18:15.020 --> 00:18:15.020
So there it is.

00:18:15.210 --> 00:18:16.470
And so you can see it's right here.

00:18:16.530 --> 00:18:21.480
But if we go and try to build-- I'm
not even going to try to build it,

00:18:21.480 --> 00:18:25.130
because what's going to happen,
it's going to fail,

00:18:25.160 --> 00:18:27.600
because it's going to bring in MSL.

00:18:27.670 --> 00:18:31.500
The importer by default
doesn't bring over MSL stuff.

00:18:31.500 --> 00:18:35.250
So what we need to do is we
need to replace this prefix file

00:18:35.250 --> 00:18:36.150
with one that doesn't use MSL.

00:18:36.150 --> 00:18:36.150
We want to use the
system libraries instead.

00:18:36.150 --> 00:18:36.150
So what I'm going to do is
trick-- is I'm going to fake out--

00:18:37.550 --> 00:18:39.040
I'm going to fake out Xcode.

00:18:39.060 --> 00:18:39.320
Okay.

00:18:39.570 --> 00:18:41.980
And while Scott's doing that,
if we could go back to the slides.

00:18:42.000 --> 00:18:43.320
Yeah.

00:18:50.000 --> 00:20:30.100
[Transcript missing]

00:20:30.820 --> 00:20:33.640
Let me talk about pre-compiled headers
while Scott's putting that together.

00:20:33.640 --> 00:20:38.540
Code Warrior has a concept that
they will pre-compile anything,

00:20:38.540 --> 00:20:41.560
a .h file, a .pch file.

00:20:41.560 --> 00:20:44.360
They'll even pre-compile C and C++ files.

00:20:44.360 --> 00:20:49.990
Anything you can throw at the compiler,
they will pre-compile for you,

00:20:49.990 --> 00:20:55.510
either from a menu item or from a
directive inside a file or from a special

00:20:55.510 --> 00:20:59.100
pre-compiled header target in a project.

00:20:59.100 --> 00:21:03.350
What you usually end up doing if
you want to have a different phase

00:21:03.430 --> 00:21:07.700
to pre-pre-compile your headers
is you have like a library target

00:21:07.700 --> 00:21:11.300
that builds a null library with
a name like "throw me away" later.

00:21:11.300 --> 00:21:14.750
And in the course of doing that,
it pre-compiles your headers and

00:21:14.750 --> 00:21:18.670
deposits them in a certain location
where other targets expect them.

00:21:18.700 --> 00:21:21.800
Well, Xcode works in a
completely different way.

00:21:21.800 --> 00:21:23.500
It's really much simpler.

00:21:23.500 --> 00:21:27.360
You take your prefix file,
and every target has a prefix file.

00:21:27.670 --> 00:21:30.980
And if you check a checkbox,
it pre-compiles that prefix file

00:21:30.980 --> 00:21:33.100
when it needs to for that target.

00:21:33.210 --> 00:21:35.690
That's all you need to do, really.

00:21:35.700 --> 00:21:39.280
You don't have to set up special targets
and special projects to build it.

00:21:39.490 --> 00:21:44.400
The build system manages when your
.pch file needs to be rebuilt.

00:21:44.530 --> 00:21:46.900
If it needs to be rebuilt,
it rebuilds it.

00:21:46.900 --> 00:21:48.390
If it doesn't, it doesn't.

00:21:48.500 --> 00:21:50.100
So it's pretty simple.

00:21:50.100 --> 00:21:53.470
All you need to do is figure
out the content you need to

00:21:53.470 --> 00:21:56.660
have in your prefix file,
put it in a prefix file.

00:21:56.700 --> 00:22:00.900
Put that prefix file into your settings,
and then check the checkbox,

00:22:00.900 --> 00:22:04.900
and you've got pre-compiled
headers automatically.

00:22:06.600 --> 00:22:09.380
So if we can go back
to the-- MALE SPEAKER:

00:22:09.390 --> 00:22:09.990
Yeah, so-- OK.

00:22:10.110 --> 00:22:13.440
Finder's being a little flaky,
so we'll move on.

00:22:13.520 --> 00:22:16.490
So what I wanted to go over now is,
actually, because this is a preview,

00:22:16.490 --> 00:22:20.610
we haven't had a chance to completely
move over to all the new build settings.

00:22:20.680 --> 00:22:23.430
So I just wanted to go through a couple
things that you're going to need to do

00:22:23.430 --> 00:22:26.280
manually that when we were doing this,
we ran into and wanted to

00:22:26.280 --> 00:22:27.660
make sure you understand.

00:22:27.660 --> 00:22:29.560
The first one is the C language standard.

00:22:29.660 --> 00:22:33.070
By default, currently it comes up as C99.

00:22:33.080 --> 00:22:35.080
Well, for older projects,
we recommend that you set

00:22:35.080 --> 00:22:37.640
it to compiler default,
especially if you're using C++.

00:22:37.640 --> 00:22:39.170
You'll get all these
errors and warnings about,

00:22:39.170 --> 00:22:42.760
oh, well,
C99 doesn't make any sense for C++.

00:22:42.760 --> 00:22:46.360
Another thing is that, for example,
in this particular case,

00:22:46.620 --> 00:22:49.250
Code Warrior will force C++.

00:22:49.320 --> 00:22:51.480
Well,
the importer interprets that as saying,

00:22:51.480 --> 00:22:54.220
oh, use dash XC++, which will force C++.

00:22:54.300 --> 00:22:56.890
But it turned out that
they were all C++ files,

00:22:56.890 --> 00:22:59.700
so you can just get rid
of that in many cases.

00:22:59.740 --> 00:23:05.260
Also, the F exceptions and F RTTI options
in the other C flags.

00:23:05.280 --> 00:23:08.520
They're just not needed because we
turn those things on by default.

00:23:08.640 --> 00:23:11.580
And then finally, there is one kind of
thing we're going to fix,

00:23:11.580 --> 00:23:15.780
but you have to fix now yourself,
which is if you go

00:23:16.160 --> 00:23:17.900
To get your precompiled
header to build properly,

00:23:17.900 --> 00:23:21.170
if you're only using C++,
currently what we've found is that

00:23:21.170 --> 00:23:26.000
you're going to need to tell Xcode
that you only want a C++ dialect.

00:23:26.000 --> 00:23:28.440
It actually turns out with
our precompiled technology,

00:23:28.560 --> 00:23:31.540
because we have under the covers
multiple different compilers,

00:23:31.540 --> 00:23:33.620
we have to say which
dialects you want to.

00:23:33.620 --> 00:23:36.380
For the final one,
we'll take care of this automatically.

00:23:36.400 --> 00:23:40.260
For the majority of cases right now,
you have to set it.

00:23:40.260 --> 00:23:42.740
And then finally,
one of the new features you've

00:23:42.740 --> 00:23:44.580
been hearing about is Zero Link.

00:23:44.710 --> 00:23:48.250
Well, unfortunately,
the importer didn't quite get the ability

00:23:48.250 --> 00:23:50.340
to set that for you automatically,
but it's really simple.

00:23:50.340 --> 00:23:52.520
So I'm going to go through that now.

00:23:52.580 --> 00:23:57.230
If we just go to the project
inspector and go to styles,

00:23:57.230 --> 00:23:59.680
so we just want to add one.

00:23:59.890 --> 00:24:02.120
thing, which is let me find ZeroLink.

00:24:02.120 --> 00:24:04.180
It's under the standard build settings.

00:24:04.180 --> 00:24:05.440
You can just type in zero.

00:24:05.580 --> 00:24:06.210
There it is.

00:24:06.380 --> 00:24:08.040
And you just want to check that on.

00:24:08.040 --> 00:24:10.090
And notice I'm doing this in
the development build style.

00:24:10.090 --> 00:24:11.880
If you haven't heard,
we have these build styles

00:24:11.880 --> 00:24:13.070
that overlay our targets.

00:24:13.170 --> 00:24:15.920
The idea here is we only want to
use ZeroLink when you're doing your

00:24:15.920 --> 00:24:17.460
debugging and you're developing.

00:24:17.570 --> 00:24:19.580
When you actually go to
make a deployment build,

00:24:19.580 --> 00:24:23.100
you want to make sure ZeroLink is off
because we don't want you shipping

00:24:23.120 --> 00:24:26.300
apps that are not properly linked.

00:24:26.300 --> 00:24:30.460
So let me go ahead and we will build.

00:24:47.140 --> 00:24:50.030
So just to give a more detailed-- oh,
the build failed.

00:24:50.040 --> 00:24:51.240
Why?

00:24:51.240 --> 00:24:52.920
Oh, of course.

00:24:53.730 --> 00:24:54.700
This is part of the demo.

00:24:54.700 --> 00:24:56.290
We expected a failure at this point.

00:24:56.310 --> 00:24:57.300
Yes.

00:24:57.300 --> 00:24:59.110
We expected a failure?

00:24:59.300 --> 00:25:01.340
We didn't expect this failure.

00:25:04.200 --> 00:25:05.190
Okay.

00:25:05.200 --> 00:25:05.990
Chris Espinosa: Actually,
we expected this failure later.

00:25:06.240 --> 00:25:07.430
We expected this failure later.

00:25:07.670 --> 00:25:09.700
Chris Espinosa: Yeah.

00:25:09.710 --> 00:25:13.120
So what we expected to be able to
show you was that Power Plant isn't

00:25:13.120 --> 00:25:17.160
quite happy with... Let me
try one thing real quick here.

00:25:17.160 --> 00:25:18.900
Let's just try to clean it.

00:25:18.900 --> 00:25:19.930
You're right.

00:25:19.930 --> 00:25:21.880
Why is it trying to do this now?

00:25:21.910 --> 00:25:23.480
Chris Espinosa: I know.

00:25:23.480 --> 00:25:25.430
Because the demo gods hate us.

00:25:25.430 --> 00:25:28.280
Chris Espinosa:
Why is Finder hanging on me?

00:25:28.610 --> 00:25:30.260
Because the demo gods hate me.

00:25:30.260 --> 00:25:30.770
Okay.

00:25:30.770 --> 00:25:30.950
So we'll go to slides.

00:25:30.950 --> 00:25:30.950
Chris Espinosa: Yes.

00:25:34.810 --> 00:25:39.180
So this is a power plant application,
and the failure you were supposed to

00:25:39.180 --> 00:25:42.170
see was not the failure that we're
going to address in three slides.

00:25:42.300 --> 00:25:44.290
Oh, go back, go back, go back, go back.

00:25:47.000 --> 00:25:50.000
This is the failure
you're supposed to see.

00:25:50.000 --> 00:25:53.650
So what you'll notice here is we have a
bunch of failures that are in Lstream.

00:25:53.660 --> 00:25:55.610
This is inside of Power Plant.

00:25:55.800 --> 00:25:59.500
This is not any of our
code in the example.

00:25:59.600 --> 00:26:03.660
And so what we're going to have
to do is now Chris can take,

00:26:03.660 --> 00:26:07.510
while I switch the new
Power Plant stuff into place,

00:26:07.760 --> 00:26:12.490
Chris can go through the changes
you'll have to make to Power Plant,

00:26:12.490 --> 00:26:14.130
which are really minor.

00:26:14.130 --> 00:26:14.130
Okay.

00:26:14.130 --> 00:26:14.130
Back to the slides.

00:26:15.700 --> 00:26:20.090
So the errors you saw up there the second
time when we got the correct errors

00:26:20.110 --> 00:26:25.640
on the screen were some differences
between the GCC compiler's interpretation

00:26:25.640 --> 00:26:30.270
of the power plant source code and the
MetaWorks compiler's interpretation

00:26:30.280 --> 00:26:33.190
of the power plant source code,
especially when it relates to

00:26:33.190 --> 00:26:34.900
how they use system headers.

00:26:34.900 --> 00:26:40.860
Since what we've done for you is migrate
you from the MSL Mach-O headers to the

00:26:40.860 --> 00:26:44.400
actual Apple standard library headers,
there are a couple of library

00:26:44.400 --> 00:26:47.610
differences that make a
difference when using power plant,

00:26:47.620 --> 00:26:51.440
and there's one thing where
GCC interprets what you do differently.

00:26:51.440 --> 00:26:56.170
What we document in the transition book,
which I'll tell you about later,

00:26:56.170 --> 00:26:59.400
and what you need to do to
your power plant sources is

00:26:59.400 --> 00:27:02.630
you need to make four clean,
compatible changes to

00:27:02.630 --> 00:27:04.640
your power plant sources.

00:27:04.980 --> 00:27:08.520
And then GCC can compile
any power plant application.

00:27:08.520 --> 00:27:12.410
There are some changes
to the LException class,

00:27:12.450 --> 00:27:16.200
which subclasses the
system exception class,

00:27:16.450 --> 00:27:19.880
and the system exception class
has throw specializers on its

00:27:19.920 --> 00:27:21.900
destructor and its what method.

00:27:22.010 --> 00:27:26.130
So you need to add those to
the power plant LException

00:27:26.130 --> 00:27:31.820
class so that it will match the
underlying system exception class.

00:27:31.800 --> 00:27:39.610
There's a place in lgatabscontrolimp.cp
where it uses multiple instances

00:27:39.610 --> 00:27:44.710
of a local declaration inside
cases of a switch statement,

00:27:44.760 --> 00:27:48.740
and GCC doesn't like the
way the code works there,

00:27:48.740 --> 00:27:53.950
and it requests that you move the local
declaration outside the individual cases,

00:27:53.950 --> 00:27:55.880
so that's fairly easy to do.

00:27:55.880 --> 00:28:00.370
And in lstream.h,
the streaming operators for long

00:28:00.370 --> 00:28:05.080
double and short double are already
declared elsewhere in the Apple headers,

00:28:05.080 --> 00:28:08.760
so you get a multiple definition
if they're re-declared in

00:28:08.760 --> 00:28:11.940
the power plant headers.

00:28:11.940 --> 00:28:19.930
So you need to just case those out,
and usually we do a pound if not GNU C,

00:28:20.060 --> 00:28:24.230
then include those,
so that your power plant sources

00:28:24.520 --> 00:28:25.840
can be compiled and built.

00:28:25.930 --> 00:28:27.440
And then, of course,
we have the power plant source,

00:28:27.610 --> 00:28:29.210
which is the source that's being
built by Code Warrior still,

00:28:29.210 --> 00:28:30.600
even when you're also
building them with GCC.

00:28:30.750 --> 00:28:34.210
So this is pretty much all the
source changes we have to do,

00:28:34.210 --> 00:28:38.210
and they're all in power plant
to make the appearance demo run.

00:28:38.250 --> 00:28:41.670
So what Scott's doing is he's
actually switching over to a

00:28:41.670 --> 00:28:45.710
fixed version of power plant,
and then he's going to rebuild.

00:28:46.010 --> 00:28:46.640
Which I have already done.

00:28:47.380 --> 00:28:49.500
And now he's rebuilt,
and all of those compiler

00:28:49.500 --> 00:28:52.340
errors have gone away,
and now he gets the errors we saw before,

00:28:52.340 --> 00:28:53.900
which are resource errors.

00:28:54.070 --> 00:28:54.190
Right.

00:28:54.660 --> 00:28:55.590
At the bottom, it says, "Error.

00:28:55.740 --> 00:28:55.880
File.

00:28:55.880 --> 00:28:56.850
Res merger.

00:28:56.930 --> 00:29:03.700
C failed to open source file -39."
So if we can go back to the slides now.

00:29:08.700 --> 00:29:12.130
Skip that and come back,
because he says we're

00:29:12.130 --> 00:29:14.200
going to see this later.

00:29:14.670 --> 00:29:16.340
So this is the error we're seeing now.

00:29:16.500 --> 00:29:22.450
There is a bug in the res merger tool,
which if you ask it to generate data

00:29:22.450 --> 00:29:27.920
fork resource files and you provide
heterogeneous input that's mixed data

00:29:28.030 --> 00:29:32.190
force and resource fork resource files,
it gets confused and fails.

00:29:33.020 --> 00:29:36.810
And we will fix that by
Xcode 1.0 by Panther.

00:29:37.040 --> 00:29:39.950
But for now,
if you're bringing a project in that

00:29:40.000 --> 00:29:45.360
has resource files and the fork in
which the resource files originate

00:29:45.500 --> 00:29:50.090
is different from the fork in which
you want the resource files to go,

00:29:50.170 --> 00:29:52.570
and to build a
Mac OS X package application,

00:29:52.570 --> 00:29:56.570
you generally want your resources to
go in the data fork of the resource

00:29:56.570 --> 00:29:58.520
files in the resource folder.

00:29:58.520 --> 00:30:02.400
Then you're going to have to do
some massaging of your resources.

00:30:02.900 --> 00:30:04.900
In order to get them to build with Xcode.

00:30:04.900 --> 00:30:09.900
And what we did here was we basically
took all the .rsrc and .ppob

00:30:09.900 --> 00:30:15.290
files both in the appearance demo
itself and in Power Plant itself,

00:30:15.290 --> 00:30:18.560
and we just derezzed them
into .rs and brought them in.

00:30:18.560 --> 00:30:22.730
And that has some extra advantages
because then the indexer in Xcode

00:30:22.730 --> 00:30:26.950
can search them and you can have them
in text form and you can check them

00:30:26.950 --> 00:30:32.780
in more easily to Perforce or CVS,
which are not really resource fork aware.

00:30:32.780 --> 00:30:37.910
And what we've done here is we've
moved all those .rsrc files into .r

00:30:37.910 --> 00:30:41.040
files to get around the resource error.

00:30:41.040 --> 00:30:44.780
Now we're going to go back to
get past the resource error.

00:30:44.780 --> 00:30:47.100
Right, in fact.

00:30:49.300 --> 00:30:52.300
This time you can watch it build.

00:30:52.370 --> 00:30:54.910
So if you notice really fast there,
we did the resing,

00:30:54.910 --> 00:30:57.870
and so now it's going and
merging the resources.

00:31:00.670 --> 00:31:03.200
See, this is where we have
the time to now talk.

00:31:03.200 --> 00:31:07.240
Right?

00:31:07.240 --> 00:31:09.550
And so you'll notice as we come in,
just like Code Warrior,

00:31:09.620 --> 00:31:12.050
we have this little code column so
you can see the code and you can

00:31:12.050 --> 00:31:13.500
sort by that while we're going on.

00:31:13.630 --> 00:31:20.740
We also provide these check marks
to indicate what needs to be built.

00:31:20.780 --> 00:31:25.810
To the right of the code here,
you'll notice we have errors and

00:31:25.810 --> 00:31:25.810
warnings on a per-file basis.

00:31:28.500 --> 00:31:33.130
So this is a substantial
amount of Code Warrior code,

00:31:33.130 --> 00:31:39.440
both the appearance demo itself and
the entire Power Plant framework

00:31:39.440 --> 00:31:45.290
that's compiling without error
in GCC with very few changes.

00:31:49.240 --> 00:31:52.890
So our challenges so far have
been get the header files right,

00:31:52.890 --> 00:31:54.330
and we've done that.

00:31:54.350 --> 00:31:58.000
Get the sources right,
and we've done that.

00:31:58.010 --> 00:32:00.500
And get the resources right,
and we've done that.

00:32:00.500 --> 00:32:04.450
And once we have all of
the binaries in place,

00:32:04.450 --> 00:32:06.230
then the linker kicks in.

00:32:06.230 --> 00:32:10.140
And getting the linker right is
the last phase before you have a

00:32:10.210 --> 00:32:12.720
running application and can debug.

00:32:12.720 --> 00:32:18.190
So now we're linking,
and we will see the build succeeded.

00:32:19.350 --> 00:32:20.440
But it lies.

00:32:20.580 --> 00:32:22.510
And it lies because we
turned zero link on.

00:32:22.670 --> 00:32:27.060
Zero link defers link
errors to execution time.

00:32:27.330 --> 00:32:29.450
So now if you try to run it.

00:32:31.780 --> 00:32:32.700
Thanks, thanks.

00:32:32.700 --> 00:32:34.610
And then-- oh, no, didn't run.

00:32:34.610 --> 00:32:36.310
Scott Tooker: It didn't run.

00:32:36.310 --> 00:32:37.690
Let's check the run log.

00:32:37.690 --> 00:32:40.000
Chris Espinosa:
So what you'll see is you'll

00:32:40.000 --> 00:32:42.830
see this unknown symbol
and then some bizarre name.

00:32:42.830 --> 00:32:46.000
Really what it comes down to
is currently in the prerelease,

00:32:46.000 --> 00:32:48.490
when you use ZeroLink in
your C++ application,

00:32:48.490 --> 00:32:51.220
you have to link against
the standard C++ library.

00:32:51.230 --> 00:32:53.730
For the final release,
we should be able to take

00:32:53.730 --> 00:32:55.360
care of this automatically.

00:32:55.360 --> 00:32:58.970
But for now, you're going to need to set
this in other linker flags.

00:32:58.970 --> 00:33:00.170
So I'll take you through that right now.

00:33:01.020 --> 00:33:03.720
If we go back here,
what I can do is let's just bring

00:33:03.720 --> 00:33:09.240
up the standard build settings.

00:33:09.240 --> 00:33:12.670
We'll look for link.

00:33:12.670 --> 00:33:12.670
Oops, not link, link.

00:33:20.300 --> 00:33:22.540
Let's see.

00:33:22.560 --> 00:33:27.300
So I will be brave.

00:33:27.300 --> 00:33:31.020
One other thing you will have to do
is usually you have to touch a file.

00:33:31.020 --> 00:33:35.300
There's a few dependency cases that
we don't deal with in the preview.

00:33:35.300 --> 00:33:36.100
Let me try it now.

00:33:44.510 --> 00:33:48.440
Build succeeded again,
and now we can run.

00:33:48.440 --> 00:33:50.740
And it launches.

00:33:50.740 --> 00:33:51.890
There we go.

00:33:57.000 --> 00:33:59.990
And lest you say, "Oh, but Scott,
but Scott, this was built with Xcode.

00:34:00.000 --> 00:34:05.440
Oh, it must look different."

00:34:12.900 --> 00:34:15.450
"Yeah." "Oh, you swapped the power plant.

00:34:15.460 --> 00:34:17.040
Yeah." "Yeah.

00:34:17.090 --> 00:34:19.630
So that's why I decided
it's too good for my-- yeah.

00:34:19.770 --> 00:34:20.970
So--" "Back to the slides.

00:34:21.060 --> 00:34:23.070
Back to the slides."

00:34:24.960 --> 00:34:26.650
Just one clarification there.

00:34:26.690 --> 00:34:29.840
What it was running into there
did not have to do with the

00:34:29.910 --> 00:34:30.920
changes we made to Power Plant.

00:34:30.920 --> 00:34:34.490
It's with some other
issues that we know about.

00:34:39.710 --> 00:34:42.750
So in linking,
the last step is that the importer

00:34:42.750 --> 00:34:44.820
maps your key target settings.

00:34:44.940 --> 00:34:48.750
It tries to read as much as it can from
your project builder project file and

00:34:48.940 --> 00:34:55.360
translate it into the linker flags that
you need to set in your Xcode file.

00:34:55.360 --> 00:34:59.830
There are some things we need,
right now you need to include dash

00:34:59.840 --> 00:35:02.460
else std c++ in your linker flags.

00:35:02.460 --> 00:35:05.410
We'll take care of that
for you in the 1.0 version.

00:35:05.940 --> 00:35:09.180
An important thing is
that often the importer,

00:35:09.180 --> 00:35:13.080
if you've built a Mach-O project and
you've left .a files sitting around,

00:35:13.080 --> 00:35:15.840
the importer will bring in a
lot of Code Warrior .a files.

00:35:15.840 --> 00:35:18.920
And if those have been linked
with the Code Warrior linker,

00:35:18.920 --> 00:35:22.660
then the Apple Mach-O linker is
not necessarily going to like them.

00:35:22.660 --> 00:35:27.130
So you need to throw out the .a
files that have been imported,

00:35:27.130 --> 00:35:31.420
and if they're built by subprojects,
then you need to re-add

00:35:31.420 --> 00:35:33.540
those into your project.

00:35:33.540 --> 00:35:35.340
So that's what I was
talking about before.

00:35:35.340 --> 00:35:39.390
If you're building from the bottom up,
you need to rewire all of the

00:35:39.390 --> 00:35:42.790
subsidiary parts back into
your project as you built it.

00:35:42.840 --> 00:35:46.000
In the 1.0 version,
we expect to have much better

00:35:46.000 --> 00:35:49.900
inter-target dependencies and
inter-project dependencies.

00:35:49.900 --> 00:35:53.490
Do more of that for you automatically,
but with the disks you have in hand,

00:35:53.490 --> 00:35:55.340
that work you need to do manually.

00:35:55.340 --> 00:35:59.530
And then the main thing is you notice
that the first time we built it,

00:35:59.620 --> 00:36:03.320
it said build succeeded, it linked,
it tried to launch and

00:36:03.320 --> 00:36:05.040
then got a run failure.

00:36:05.350 --> 00:36:08.340
You're going to see that a lot
if you have zero link turned on.

00:36:08.340 --> 00:36:14.840
So what we recommend doing is if you
have a build succeed using zero link,

00:36:14.840 --> 00:36:17.410
what we recommend you do
is that you switch over to

00:36:17.490 --> 00:36:21.300
the deployment build style,
which turns off zero link,

00:36:21.300 --> 00:36:24.340
try building again, and then you'll see
your real link errors.

00:36:24.340 --> 00:36:27.310
You want to know about those link
errors because they are link errors.

00:36:27.360 --> 00:36:29.500
They are things that
will happen at runtime,

00:36:29.870 --> 00:36:32.330
either early or late,
depending upon what they are.

00:36:32.340 --> 00:36:34.340
But don't take build
succeeded as a failure.

00:36:35.340 --> 00:36:37.340
As everything is fixed.

00:36:37.340 --> 00:36:42.340
Always go to the deployment style and try
a build there just to make sure it works.

00:36:43.450 --> 00:36:44.400
Okay?

00:36:44.400 --> 00:36:46.480
Development and deployment
styles are really,

00:36:46.480 --> 00:36:50.220
really powerful,
and they'll make it a lot easier

00:36:50.220 --> 00:36:54.260
for you to work with multiple
targets in Xcode than you've

00:36:54.260 --> 00:36:57.680
had it before in Code Warrior.

00:36:57.680 --> 00:37:02.050
Development and deployment styles,
as Anders explained yesterday,

00:37:02.050 --> 00:37:06.320
are extra sets of flags that override
other settings in your target.

00:37:06.320 --> 00:37:12.320
And what that lets you do is it
lets you have a debug version,

00:37:12.320 --> 00:37:17.690
a profile version, a beta test version,
and a final version of your

00:37:17.690 --> 00:37:21.970
application with the same target,
without having to have

00:37:21.970 --> 00:37:23.320
four separate targets.

00:37:23.400 --> 00:37:26.720
And what that means is if you need
to change a target setting or if

00:37:26.720 --> 00:37:29.710
you need to add a file to a target,
you don't need to change

00:37:29.710 --> 00:37:31.540
it in four separate places.

00:37:31.540 --> 00:37:36.280
You just change it in your one target,
and then that is layered on top.

00:37:36.370 --> 00:37:37.300
And that's what we're going to do.

00:37:37.330 --> 00:37:37.850
We're going to do a lot of the
same things on top of by the

00:37:37.850 --> 00:37:38.320
four different build styles.

00:37:38.320 --> 00:37:41.310
It really makes it a lot
easier to manage your target.

00:37:41.420 --> 00:37:44.500
So we recommend that instead of,
you know, when we import your

00:37:44.500 --> 00:37:46.470
Code Warrior projects,
we're going to import

00:37:46.570 --> 00:37:50.320
all of your targets,
even if there's a debug version

00:37:50.320 --> 00:37:51.320
and a production version.

00:37:51.320 --> 00:37:57.120
What we recommend you do is that
you essentially delete the debug

00:37:57.120 --> 00:38:00.040
target from your Xcode project.

00:38:00.420 --> 00:38:05.010
Just use the production one,
and then set all of your debug settings

00:38:05.320 --> 00:38:05.320
in the development and deployment styles.

00:38:05.360 --> 00:38:06.320
And that's what we're going to do.

00:38:06.320 --> 00:38:10.320
We're going to use the development
build style of the production target.

00:38:10.320 --> 00:38:13.020
And that way you'll only
have one target to manage,

00:38:13.020 --> 00:38:16.850
much less complexity,
and you'll have much better control over

00:38:16.850 --> 00:38:19.320
what you want in your debug targets.

00:38:20.400 --> 00:41:39.300
[Transcript missing]

00:41:40.260 --> 00:41:43.030
There are some other differences,
and these are a little more serious.

00:41:43.150 --> 00:41:46.440
If you've been using
Code Warrior for a long time,

00:41:46.490 --> 00:41:52.160
you probably have put
C++ code into .c files,

00:41:52.160 --> 00:41:53.720
because Code Warrior doesn't care.

00:41:54.720 --> 00:41:59.110
Now, GCC does care, and GCC,
in its native state,

00:41:59.210 --> 00:42:04.350
will tell you if you use C++-isms,
that is, things that are specifically C++

00:42:04.460 --> 00:42:08.640
and not just C99 extensions to
C to make it look more like C++,

00:42:08.640 --> 00:42:12.240
it will warn you if you try to
declare a class in a .c file.

00:42:12.240 --> 00:42:15.940
It will give an error if you try
to declare a class in a .c file.

00:42:15.940 --> 00:42:20.600
Once again,
you can cheat and turn on .xc++,

00:42:20.810 --> 00:42:27.210
and GCC will happily... interpret
all your .c files as C++,

00:42:27.210 --> 00:42:31.130
but the rest of Xcode,
which doesn't get information on the

00:42:31.210 --> 00:42:36.030
compiler from which language semantics
you used for which specific file,

00:42:36.220 --> 00:42:37.300
may get confused.

00:42:37.300 --> 00:42:40.430
For example,
the debugger applies debugging

00:42:40.430 --> 00:42:44.270
semantics to your source
code based on its extension.

00:42:44.280 --> 00:42:47.210
And so if you have a class
declared in a .c file,

00:42:47.350 --> 00:42:51.640
the debugger is not necessarily
going to see that well or clearly.

00:42:51.640 --> 00:42:54.180
So I really recommend
that if you have C++,

00:42:54.400 --> 00:43:00.500
you change it to .cp files,
and if you have just straight C code,

00:43:00.500 --> 00:43:02.020
you can leave that in .c files.

00:43:02.020 --> 00:43:05.980
That's probably the number
one thing we see in projects

00:43:05.980 --> 00:43:09.860
moving over from Code Warrior,
is C++ code in C files.

00:43:09.860 --> 00:43:13.850
GCC differs where the
standards are undefined.

00:43:13.860 --> 00:43:17.320
The order of calling
C++ static initializers,

00:43:17.320 --> 00:43:20.600
especially if you're
moving from CFM to Maco,

00:43:20.600 --> 00:43:24.040
where the order of library
initialization may also be different,

00:43:24.400 --> 00:43:28.730
is that if your code relies on a
specific order of initialization

00:43:28.920 --> 00:43:34.910
of static initializers,
there will probably be problems,

00:43:34.920 --> 00:43:37.870
and you'll need to work those out
and debug those very carefully.

00:43:37.880 --> 00:43:42.060
You can have some fine-grained
control over it by link order,

00:43:42.060 --> 00:43:46.420
but it's something that
you need to expect,

00:43:46.420 --> 00:43:49.270
is that your static initializers
may not be called in the

00:43:49.270 --> 00:43:52.670
deterministic order you saw,
mainly because Maco loads

00:43:52.670 --> 00:43:56.550
modules lazily and dynamically,
whereas CFM did everything all up front.

00:43:56.640 --> 00:44:01.540
The second thing is that there's some
disagreement on how you pass structs

00:44:01.540 --> 00:44:06.180
and unions that are packed into
quantities smaller than four bytes.

00:44:06.180 --> 00:44:07.880
There are some differences there.

00:44:08.050 --> 00:44:11.320
Most of these differences are
not clearly documented either in

00:44:11.320 --> 00:44:14.490
the Code Warrior documentation
or the GCC documentation.

00:44:14.630 --> 00:44:20.270
You can join some of the Apple mailing
lists or look on Usenet for

00:44:20.340 --> 00:44:25.860
either of the Code Warrior groups,
codewarrior.mac or compsys, mac,

00:44:26.090 --> 00:44:27.650
programming, codewarrior.

00:44:27.720 --> 00:44:32.200
Both of those have pretty
long discussions of the

00:44:32.200 --> 00:44:36.620
differences between GCC and the
Code Warrior compiler in these respects.

00:44:36.720 --> 00:44:43.900
And finally, GCC uses the C and C++,
in fact it supplies the C and C++

00:44:43.900 --> 00:44:48.420
standard libraries that ship with
Mac OS X in both static and dynamic form,

00:44:48.420 --> 00:44:51.890
and codewarrior supplies
its own libraries,

00:44:51.960 --> 00:44:56.100
the MetroWorks standard libraries,
or MSL, that go with the compiler and

00:44:56.160 --> 00:44:59.320
heretofore have been statically
linked into your applications.

00:44:59.690 --> 00:45:05.280
When you move from Codewarrior to GCC,
you are moving from the

00:45:05.280 --> 00:45:08.580
MSL standard libraries to
the Apple standard libraries,

00:45:08.580 --> 00:45:11.280
and there are some big differences
there you need to know about.

00:45:11.280 --> 00:45:14.940
The good news is that if
you're building for Maco,

00:45:14.940 --> 00:45:17.940
the MSL standard libraries are
essentially a thin layer on

00:45:17.940 --> 00:45:19.220
the Apple standard libraries.

00:45:19.220 --> 00:45:24.780
So most of the behavior is the same
except for a small layer of differences.

00:45:24.780 --> 00:45:30.780
The other good news is that MSL has
been supporting WHRT and WString,

00:45:30.780 --> 00:45:34.780
a wide character support in C and C++,
for many years,

00:45:34.780 --> 00:45:39.070
but they couldn't supply it in their
Maco libraries because it wasn't in the

00:45:39.070 --> 00:45:40.780
underlying Apple libraries as of Jaguar.

00:45:40.780 --> 00:45:45.430
It's now there in Panther,
so if you have programs that have relied

00:45:45.430 --> 00:45:49.710
on WHR and WString support in MSL,
and you couldn't go to

00:45:49.720 --> 00:45:52.240
Maco because of that,
you can do that now in Panther.

00:45:52.240 --> 00:45:55.250
Because that supports in
the underlying library,

00:45:55.360 --> 00:45:59.240
and it's taken advantage of
by the MSL standard libraries.

00:45:59.240 --> 00:46:02.240
And this is a good implementation
of WHR and WString.

00:46:02.270 --> 00:46:04.240
It's the Citrus project.

00:46:04.240 --> 00:46:06.240
It's been heavily tested in NetBSD.

00:46:06.240 --> 00:46:08.230
It's not something we invented ourself.

00:46:08.340 --> 00:46:10.210
It's really good code.

00:46:10.530 --> 00:46:13.740
Another thing you'll run into
is that Apple libraries tend

00:46:13.740 --> 00:46:17.820
to use the global namespace,
not the STD namespace, for many things.

00:46:17.820 --> 00:46:22.360
Many things that MetroWorks standard
libraries put in the STD namespace.

00:46:22.360 --> 00:46:26.500
This may mean that you need to make some
changes to your code if you're expecting

00:46:26.500 --> 00:46:28.580
things to be in the STD namespace.

00:46:28.580 --> 00:46:36.190
It may mean that you need to change some
conflicts where things that you have

00:46:36.280 --> 00:46:40.470
in your code will conflict with things
that are now in the global namespace.

00:46:40.500 --> 00:46:44.560
If you're using the
standard template libraries,

00:46:44.560 --> 00:46:49.370
MetroWorks STL has some very
useful functions for debugging

00:46:49.370 --> 00:46:52.190
that you invoke if you set a macro.

00:46:52.190 --> 00:46:56.050
Setting that macro is
innocent in Apple's STL.

00:46:56.100 --> 00:46:57.530
It does nothing.

00:46:57.580 --> 00:47:02.710
You lose that debugging capability,
but it causes no harm.

00:47:04.150 --> 00:47:07.000
And then Apple libraries don't
have certain MetroWorks extensions

00:47:07.000 --> 00:47:08.500
that they've added over the years.

00:47:08.500 --> 00:47:12.800
For example, FS-Spec versions of the
POSIX file system calls.

00:47:12.800 --> 00:47:15.990
Since we're an underlying
Unix operating system,

00:47:16.130 --> 00:47:19.370
we really do expect you to start
using some of the underlying

00:47:19.370 --> 00:47:20.850
file calls or use Carbon.

00:47:21.070 --> 00:47:27.880
You know, use all Carbon or all Unix and
not necessarily this strange mix

00:47:27.880 --> 00:47:31.710
of making a POSIX call with an
FS-Spec as your file reference.

00:47:32.710 --> 00:47:35.480
We've added some compatibility
features to make it easier to

00:47:35.480 --> 00:47:39.600
bring large quantities of code
over from Code Warrior to GCC.

00:47:39.630 --> 00:47:43.040
One of them is we've
added some pragma support,

00:47:43.060 --> 00:47:45.240
not a lot, but it's getting better.

00:47:45.380 --> 00:47:47.490
We've added MetroWorks-style
inline assembly.

00:47:47.490 --> 00:47:51.320
If you happen to have the
inline PowerPC assembler code,

00:47:51.320 --> 00:47:53.980
you can bring that in from
your Code Warrior project

00:47:54.450 --> 00:47:56.190
to your Xcode project.

00:47:56.210 --> 00:47:58.320
We've brought several
large projects over,

00:47:58.320 --> 00:48:00.700
one of them the Mac MAME video
game environment,

00:48:00.700 --> 00:48:04.890
which is tens, hundreds of thousands of
lines of inline assembly,

00:48:04.990 --> 00:48:05.950
and we compile that.

00:48:06.080 --> 00:48:08.180
So if you've got a lot
of inline assembly,

00:48:08.180 --> 00:48:11.400
don't worry about bringing
that over from Code Warrior.

00:48:11.520 --> 00:48:13.230
We can read it.

00:48:14.780 --> 00:48:17.930
Now once you're in Xcode,
you want to take advantage

00:48:17.930 --> 00:48:19.620
of the Xcode features.

00:48:19.620 --> 00:48:21.980
The reason to bring your
project over is not because

00:48:21.980 --> 00:48:24.800
you're bored with Code Warrior,
but because we've shown you

00:48:24.800 --> 00:48:28.450
some compelling things in Xcode,
such as the zero link,

00:48:28.460 --> 00:48:30.860
the predictive compilation,
the fix and continue,

00:48:30.860 --> 00:48:33.660
the debugging things I'll show
you tomorrow that you really

00:48:33.690 --> 00:48:35.060
want to take advantage of.

00:48:35.100 --> 00:48:36.490
How do you turn those on?

00:48:36.490 --> 00:48:38.780
Well, it's really pretty simple.

00:48:38.780 --> 00:48:41.560
The prerequisites are you
have to use native projects,

00:48:41.650 --> 00:48:46.040
which are done by default when
you bring it in with the importer.

00:48:46.040 --> 00:48:48.780
If you're bringing in a
project builder project,

00:48:48.780 --> 00:48:53.160
you have to upgrade your targets from
Jam-based targets to native targets.

00:48:53.160 --> 00:48:57.990
And to get most of these features,
you have to move to the GCC 3.3 compiler,

00:48:57.990 --> 00:49:01.910
which you can use in the project
settings dialog is just change your

00:49:01.910 --> 00:49:04.800
compiler to system default or GCC 3.3.

00:49:05.340 --> 00:49:07.170
Once you're there,

00:49:07.370 --> 00:49:14.610
You move to the GCC style precompiled
headers to get GCC's performance.

00:49:14.830 --> 00:49:17.700
If you don't move to
the precompiled headers,

00:49:17.800 --> 00:49:20.030
the compiler is really slow.

00:49:20.320 --> 00:49:24.570
It's just as slow as turning off
precompiled headers in MetroWorks.

00:49:27.060 --> 00:49:30.380
The other thing is that using
precompiled headers just from

00:49:30.380 --> 00:49:33.460
frameworks gets you a lot,
but the more of your project

00:49:33.460 --> 00:49:35.970
headers you can precompile,
the better.

00:49:35.970 --> 00:49:39.260
Really, the more headers you precompile,
the faster it is.

00:49:39.260 --> 00:49:42.710
You can enable predictive compilation,
and that means we will

00:49:42.710 --> 00:49:45.930
fire up the compiler in the
background while you type,

00:49:46.050 --> 00:49:48.780
and that will really
get you a speed benefit.

00:49:50.220 --> 00:49:53.180
As I said the other day,
when you include Carbon,

00:49:53.190 --> 00:49:57.590
Carbon.h in any source file,
the headers that are brought in are

00:49:57.740 --> 00:49:59.800
three and a half megabytes of source.

00:49:59.800 --> 00:50:06.270
Now, most of you don't have anywhere
near that in an individual C file,

00:50:06.540 --> 00:50:12.120
so the ratio of headers to source
in a given compilation unit,

00:50:12.120 --> 00:50:13.400
it's huge.

00:50:13.400 --> 00:50:16.300
And the more of that we
can do ahead of time,

00:50:16.310 --> 00:50:21.810
the faster the couple hundred...
couple thousand lines of actual C,

00:50:21.810 --> 00:50:24.140
C++ we need to compile will go.

00:50:24.220 --> 00:50:27.830
So predictive compilation will
really speed up your turnaround

00:50:27.830 --> 00:50:30.600
time by doing most of the work in
the background while you're typing.

00:50:30.600 --> 00:50:37.930
Zero link speeds up your fix, build,
link, relaunch cycle by not having

00:50:37.930 --> 00:50:41.040
to relink all of those
modules that haven't changed.

00:50:41.040 --> 00:50:42.320
It's really a lot faster.

00:50:42.340 --> 00:50:46.610
I mean, it can cut a 30-second
link down to 10 seconds.

00:50:46.900 --> 00:50:51.400
Fix and continue can cut that
down to zero seconds by actually

00:50:51.470 --> 00:50:56.000
not having to have you stop the
application in the debugger,

00:50:56.010 --> 00:50:58.910
quit it, fix it, and relaunch it.

00:50:59.040 --> 00:51:01.580
If you can fix something
without quitting,

00:51:01.700 --> 00:51:05.480
then that saves both the quit
time and the relaunch time and all

00:51:05.500 --> 00:51:08.980
the time it takes to get back to
that point in your program where

00:51:08.980 --> 00:51:11.060
you're doing your diagnostics.

00:51:11.900 --> 00:51:15.960
And then if you happen to have
C++ projects and big C++ projects,

00:51:16.290 --> 00:51:20.330
distributed builds can really help
you with your large world builds.

00:51:20.380 --> 00:51:23.880
It's not necessarily good
for incremental compilations.

00:51:23.880 --> 00:51:27.610
It's not that great for C code
because C is not computationally

00:51:27.610 --> 00:51:30.520
intensive to compile,
and sometimes the network

00:51:30.530 --> 00:51:32.320
transfer time will exceed that.

00:51:32.380 --> 00:51:36.480
But if you have big,
big C++ files that take a long

00:51:36.530 --> 00:51:40.560
time for the compiler to work on,
if you can send those out

00:51:40.560 --> 00:51:41.860
to multiple compilers,
then that's a great way

00:51:41.860 --> 00:51:41.860
to get back to the core.

00:51:41.890 --> 00:51:44.400
And if you have multiple
compilers in parallel,

00:51:44.400 --> 00:51:47.240
you can see some quantum
increases in your build time by

00:51:47.310 --> 00:51:49.190
turning on distributed builds.

00:51:50.410 --> 00:51:52.450
Let me talk a little bit about
packaging and localization,

00:51:52.450 --> 00:51:54.140
because it's the last
thing you need to do.

00:51:54.140 --> 00:51:59.050
If you're bringing a project over,
a Carbon project over to Xcode,

00:51:59.160 --> 00:52:02.520
you may also be making the
transition from a two-fork

00:52:02.520 --> 00:52:05.290
resource-based file to a packaged file.

00:52:05.620 --> 00:52:08.210
Let me walk through a little bit of that.

00:52:08.520 --> 00:52:12.690
When you package your target,
you pick what you're going to be doing,

00:52:12.700 --> 00:52:17.320
an application, a plug-in,
a shared library, a framework, a tool.

00:52:17.320 --> 00:52:19.190
In Xcode, you pick that up front.

00:52:19.190 --> 00:52:22.710
Right now, we don't have the capability
to change the target style

00:52:22.710 --> 00:52:24.560
once you've built the target.

00:52:24.560 --> 00:52:27.050
So you need to know what
you're doing up front,

00:52:27.060 --> 00:52:31.140
and it's kind of hard to change from
a static library to a shared library.

00:52:31.140 --> 00:52:34.650
And right now, we don't have a capability
of cloning targets.

00:52:34.680 --> 00:52:38.040
So just make sure to know what
you're doing ahead of time.

00:52:38.530 --> 00:52:40.640
Most targets are packages.

00:52:40.640 --> 00:52:44.360
Almost everything except a static
link library and a Unix tool

00:52:44.740 --> 00:52:47.990
will not create a single file,
but will create a folder

00:52:47.990 --> 00:52:49.240
with a bunch of files in it.

00:52:49.360 --> 00:52:52.680
And the trick in packaging
is figuring out what files

00:52:52.740 --> 00:52:54.730
to put where in that package.

00:52:54.740 --> 00:52:59.950
Tech Note 2015 explains all about the
various package styles and what they are.

00:52:59.960 --> 00:53:04.270
If you don't know what I'm talking about,
read that Tech Note first.

00:53:04.570 --> 00:53:09.830
Xcode puts things where they belong
in your package automatically.

00:53:10.020 --> 00:53:14.410
Right now it doesn't have a copy files
build phase like Project Builder did

00:53:14.480 --> 00:53:16.540
that lets you do manual overrides.

00:53:16.540 --> 00:53:18.680
We will add that by the 1.0.

00:53:18.680 --> 00:53:22.850
But right now if you put a resource file,
if you put a header file,

00:53:22.850 --> 00:53:25.650
if you put compiled
code into your project,

00:53:25.650 --> 00:53:29.880
Xcode will put it into the right
place in your package automatically

00:53:29.970 --> 00:53:34.200
because it knows the rules by
which packages should be built.

00:53:34.500 --> 00:53:40.540
It takes all the target settings from the
target settings and the project settings,

00:53:40.570 --> 00:53:44.080
it builds those into the Info.plist file,
it puts the Info.plist file

00:53:44.200 --> 00:53:45.240
where it belongs.

00:53:45.240 --> 00:53:49.040
It really takes a lot of the
manual effort out of that.

00:53:49.960 --> 00:53:51.610
Working with resources.

00:53:51.750 --> 00:53:56.510
As I said,
we read .R files and we read .RCRC files.

00:53:56.920 --> 00:54:03.240
We also will read PPoB files and
merge them into your resources file.

00:54:03.240 --> 00:54:07.690
And we interact with resourcer,
constructor, and interface builder.

00:54:07.770 --> 00:54:12.000
If you're localizing your resources,
localizing resources in a packaged

00:54:12.000 --> 00:54:15.900
application is different than
what you used to do in CFM.

00:54:15.900 --> 00:54:19.340
In CFM,
what you used to do was you'd have one

00:54:19.340 --> 00:54:23.810
two-fork file with all of your code and
then the resources for one language,

00:54:23.840 --> 00:54:27.160
and then you'd produce another
file with the same code and the

00:54:27.160 --> 00:54:31.840
resources for a different language,
and then you'd produce another

00:54:31.840 --> 00:54:35.890
file with the same code and the
resources for a third language.

00:54:35.920 --> 00:54:40.460
Well, the way you do it on Mac OS X is
that you have one folder

00:54:40.870 --> 00:54:43.970
hierarchy called a package,
and it has one copy

00:54:43.970 --> 00:54:47.070
of the code over here,
and then it has different

00:54:47.070 --> 00:54:50.660
folders called .lproj folders
for your different languages.

00:54:50.660 --> 00:54:55.830
And your resources, your nibs,
your strings, anything language-dependent

00:54:55.880 --> 00:54:58.050
goes in the .lproj folders.

00:54:58.060 --> 00:54:58.500
Okay?

00:54:58.500 --> 00:55:00.310
It's a different way of thinking.

00:55:00.320 --> 00:55:05.810
You deliver one binary that's
multilingual rather than localizing.

00:55:05.920 --> 00:55:06.920
You're binaries.

00:55:06.920 --> 00:55:10.240
Mac OS X apps are
multilingual by default,

00:55:10.290 --> 00:55:13.810
and the way you make them multilingual
is you take a file that has

00:55:13.810 --> 00:55:17.930
language-dependent constructs in it,
like a strings file or a

00:55:17.930 --> 00:55:21.140
nib file or a resource file,
you go to its inspector,

00:55:21.140 --> 00:55:24.420
and you look at this thing
called localization variance.

00:55:24.480 --> 00:55:27.500
And you can add a locale,
and it makes a clone of that

00:55:27.900 --> 00:55:31.510
file that you then localize,
and then it puts each of those

00:55:31.510 --> 00:55:33.980
into the right .lproj folders.

00:55:33.980 --> 00:55:35.910
So Xcode does this for you automatically.

00:55:35.920 --> 00:55:39.320
It will manage your hierarchy
of localized versions.

00:55:39.320 --> 00:55:43.310
You can start with English and
then localize from there.

00:55:44.270 --> 00:55:48.040
Let me talk briefly about
Interface Builder for Carbon.

00:55:48.330 --> 00:55:52.430
Eric did a great demo of the
new stuff in Interface Builder.

00:55:52.610 --> 00:55:56.520
Interface Builder is
the Aqua design tool.

00:55:56.680 --> 00:55:58.350
The Aqua design tool.

00:55:58.350 --> 00:56:01.500
And as we evolve Aqua for
both Carbon and Cocoa,

00:56:01.500 --> 00:56:05.600
we evolve Interface Builder
to give you access to those.

00:56:05.600 --> 00:56:11.090
And there's going to be more on Interface
Builder and Carbon in the Building a

00:56:11.090 --> 00:56:14.180
Modern Mac Application session,
which I'll tell you about in a minute.

00:56:14.200 --> 00:56:18.060
But I just want to retouch on some
of the things that Eric talked about.

00:56:18.080 --> 00:56:22.290
New in Interface Builder for
Carbon is support for new

00:56:22.910 --> 00:56:28.540
Carbon controls like the HI image view,
the HI search field, the HI scroll view,

00:56:28.540 --> 00:56:30.120
and the HI text view.

00:56:30.120 --> 00:56:33.500
You can drop these into your nib
files directly from Interface

00:56:33.500 --> 00:56:35.800
Builder for your Carbon application.

00:56:37.520 --> 00:56:43.680
We've also added the tiny controls if
you're building very small pallets.

00:56:43.680 --> 00:56:45.950
We're going to start using
these in the Panther version

00:56:45.950 --> 00:56:49.330
of Xcode because they're very,
very useful for things like inspector

00:56:49.330 --> 00:56:52.470
panels where you want to pack a
lot of buttons into a small space.

00:56:52.660 --> 00:56:57.870
These are now on the pallet for Interface
Builder for your Carbon applications.

00:56:58.580 --> 00:57:00.800
and new are control properties.

00:57:00.800 --> 00:57:05.390
This is static information that you
can enter into Interface Builder

00:57:05.400 --> 00:57:10.100
that lives behind an object that when
you load that object from the nib,

00:57:10.100 --> 00:57:12.840
these constants are
already set in that object.

00:57:12.840 --> 00:57:17.680
So your APIs can query that object
that it loaded from the nib and

00:57:17.880 --> 00:57:20.020
get these constant values from it.

00:57:20.120 --> 00:57:24.490
So if you want to parameterize things or
if you want to preset titles or if you

00:57:24.590 --> 00:57:29.060
want to have alternates or anything your
API wants to do with information that you

00:57:29.060 --> 00:57:33.610
would normally put in a resource fork,
you can put them behind the

00:57:33.610 --> 00:57:35.560
objects in your nib file.

00:57:35.560 --> 00:57:38.390
And this is a very powerful
thing that will give you back

00:57:38.490 --> 00:57:40.760
in nibs some of the things that
you used to have in resources.

00:57:43.500 --> 00:57:46.110
And finally,
because we've changed the format

00:57:46.110 --> 00:57:49.640
of the nib file for Panther,
there's some fairly strong nib file

00:57:49.640 --> 00:57:53.290
compatibility checking that you
can do in Interface Builder itself,

00:57:53.290 --> 00:57:56.560
that you can tell when you're
building it whether you're using

00:57:56.870 --> 00:57:59.630
Panther-specific functions,
whether you're using

00:57:59.640 --> 00:58:01.880
Jaguar-specific functions,
and how backwards

00:58:01.880 --> 00:58:03.450
compatible your nib will be.

00:58:03.460 --> 00:58:06.200
So you can be careful about
not accidentally constructing

00:58:06.320 --> 00:58:09.800
an application where all your
code might run fine on Jaguar,

00:58:10.170 --> 00:58:14.480
but it loads a nib that happens to
exploit Panther-specific functionality,

00:58:14.480 --> 00:58:18.530
so your application will
fail when it runs on Panther.

00:58:19.220 --> 00:58:22.040
Okay, just about right on time,
going to wrap up.

00:58:22.040 --> 00:58:26.450
Hope you've learned from this session
that we've given a lot of thought in

00:58:26.450 --> 00:58:29.990
Xcode to your Carbon applications,
especially bringing your

00:58:29.990 --> 00:58:32.450
Carbon applications over
from where they exist now,

00:58:32.450 --> 00:58:34.320
which is most likely in Code Warrior.

00:58:34.320 --> 00:58:36.750
We build C++ code really well.

00:58:36.750 --> 00:58:41.960
We adhere to the standards,
we build it fast, we build good code.

00:58:42.500 --> 00:58:46.360
We build good applications that
adhere to the Mach OS X standards.

00:58:46.360 --> 00:58:49.990
We build packages, we use resources,
we use NIBs.

00:58:50.270 --> 00:58:54.290
You're going to find that Xcode
is the best way to build your

00:58:54.290 --> 00:58:56.930
Carbon applications on Mach OS X.

00:58:57.000 --> 00:59:01.040
There's a lot more you need to learn
than just listening to my presentation.

00:59:01.410 --> 00:59:04.130
There's a lot of documentation
in the Xcode tool package.

00:59:04.440 --> 00:59:06.750
There's a lot of documentation
in the system overview.

00:59:06.860 --> 00:59:13.170
For the CVS and Perforce integration,
there are, you can go to the CVS and

00:59:13.170 --> 00:59:14.560
Perforce sites for those.

00:59:14.560 --> 00:59:18.700
The most important book to cover,
what I've been talking about today,

00:59:18.700 --> 00:59:21.870
is this Moving Projects from
Code Warrior to Project Builder.

00:59:21.940 --> 00:59:25.280
It's not on your distribution,
but it's in your ADC account.

00:59:25.610 --> 00:59:29.820
Log into your ADC account and you can
download it from the Downloads folder.

00:59:29.920 --> 00:59:34.090
You can also get hard copies
of it down in our porting lab,

00:59:34.120 --> 00:59:38.730
which is,
it's called the Mach OS X Laboratory,

00:59:38.930 --> 00:59:43.060
down on the second floor,
down on the first floor.

00:59:43.290 --> 00:59:46.620
Integrating Carbon and Cocoa in your
application is a really interesting book

00:59:46.720 --> 00:59:51.010
if you want to start learning how to take
advantage of some of the Cocoa functions

00:59:51.010 --> 00:59:52.400
from your Carbon application.

00:59:52.400 --> 00:59:55.740
And then, of course,
the definitive guide to the

00:59:55.820 --> 01:00:00.820
Mach-O runtime architecture and
the GNU C C++ Objective-C compiler.

01:00:00.820 --> 01:00:03.700
If you're moving to Mach-O and
GCC for the first time,

01:00:03.700 --> 01:00:06.540
those are going to be
indispensable resources.

01:00:06.540 --> 01:00:09.640
Of course,
there are Xcode Interface Builder release

01:00:09.640 --> 01:00:11.910
notes on the distribution you have.

01:00:12.600 --> 01:00:14.720
And there are some places
to go for tech notes,

01:00:14.920 --> 01:00:16.400
tech Q&As, and sample code.

01:00:16.400 --> 01:00:18.180
They're all on the ADC homepage.

01:00:20.100 --> 01:00:23.500
Godfrey de Georgie is the
champion for this technology.

01:00:23.500 --> 01:00:25.700
Contact him if you have questions.

01:00:25.760 --> 01:00:28.480
We have the
Development Tools Engineering Feedback,

01:00:28.480 --> 01:00:33.700
which is at
xcode-feedback@group.apple.com.

01:00:33.770 --> 01:00:35.420
Please post bug reports.

01:00:35.570 --> 01:00:38.200
We want to make this a great
Carbon development environment,

01:00:38.210 --> 01:00:40.860
and if there is something that
we're being bonehead about or we've

01:00:40.860 --> 01:00:43.780
forgotten about in Carbon development,
please let us know.

01:00:43.780 --> 01:00:45.620
We'll try to get it in by the 1-0.

01:00:45.770 --> 01:00:49.460
And look at the mailing lists on
lists.apple.com or the Usenets groups.

01:00:49.590 --> 01:00:53.360
I'm going to be living on CompSys
Mac Programmer for the next few weeks,

01:00:53.370 --> 01:00:57.880
listening to what you have to say
about it if you happen to be on Usenet.

01:00:57.880 --> 01:01:00.390
Here are some great sessions to go to.

01:01:00.400 --> 01:01:03.360
Feedback Forum 9 today, 2:00.

01:01:03.720 --> 01:01:06.460
Let us know how we're doing.

01:01:06.460 --> 01:01:08.210
Debugging services for Mac OS X.

01:01:08.210 --> 01:01:10.200
This is the overview of Xcode and GDB.

01:01:10.200 --> 01:01:12.400
It's today at 3:30.

01:01:12.420 --> 01:01:14.830
That's not going to be a
Carbon-oriented session.

01:01:14.830 --> 01:01:17.040
That's going to be a
GDB-oriented session.

01:01:17.040 --> 01:01:19.170
Debugging and tuning Carbon applications.

01:01:19.170 --> 01:01:23.460
I'll be in the big room tomorrow morning,
9:00, and we're going to show you some

01:01:23.460 --> 01:01:28.560
great debugging features for
Carbon applications using Xcode.

01:01:28.560 --> 01:01:29.420
Software testing tools.

01:01:29.420 --> 01:01:33.150
There's some fun stuff going on
there for automated testing of your

01:01:33.150 --> 01:01:37.670
Carbon application using Apple tools
and using third-party applications.

01:01:37.680 --> 01:01:39.920
That's tomorrow at 10:30.

01:01:39.920 --> 01:01:41.890
And the session I was
referring to before,

01:01:41.930 --> 01:01:45.070
how to write a modern Carbon application.

01:01:45.070 --> 01:01:48.030
If you've been using basic, modern,
modern applications,

01:01:48.030 --> 01:01:51.400
basically the same APIs and
resources for the past nine years,

01:01:51.400 --> 01:01:54.110
and you don't know what NIBs are
and you don't know what HIView is,

01:01:54.110 --> 01:01:57.650
there's a completely different way
to write a great Carbon application,

01:01:57.660 --> 01:01:59.440
and you should learn about that.

01:01:59.450 --> 01:02:00.860
2:00 tomorrow afternoon.