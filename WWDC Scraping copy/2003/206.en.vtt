WEBVTT

00:00:21.100 --> 00:00:26.490
I'm Travis Brown,
I'm the graphics and imaging evangelist,

00:00:26.490 --> 00:00:31.490
and I'm really sort of pleased to talk
to you about some of the directions

00:00:31.490 --> 00:00:35.430
that Apple's going on in terms of
color management because one thing

00:00:35.430 --> 00:00:39.750
that's really important for Apple is
getting correct color for our users

00:00:39.750 --> 00:00:43.040
and our developers because nothing is
more frustrating for a user when they

00:00:43.040 --> 00:00:45.760
have all these color input devices,
color output devices,

00:00:45.760 --> 00:00:49.000
and they try to use them and they
get different color on their screen,

00:00:49.000 --> 00:00:51.840
they get different color on
their inkjet printer or someone

00:00:52.400 --> 00:00:58.100
views a different color when they
send a PDF to another platform.

00:00:58.100 --> 00:01:00.950
So I think it's important that you
understand that Apple's very serious

00:01:00.960 --> 00:01:04.160
about color and we've delivered
pretty much the only color managed

00:01:04.190 --> 00:01:07.690
operating system that's on the market
today and how we've accomplished

00:01:07.690 --> 00:01:11.470
that feat is by taking our ColorSync
technology which has been with us for

00:01:11.500 --> 00:01:15.800
a significant period of time which
was essentially an opt-in technology,

00:01:15.800 --> 00:01:17.180
a technology that developers had.

00:01:17.270 --> 00:01:20.370
We had to go to extra lengths to
embrace and utilize and certainly

00:01:20.370 --> 00:01:25.260
that made sense in high end publishing
but now what we want to do is make

00:01:25.260 --> 00:01:30.500
sure that the whole OS reacts the
proper way to color management,

00:01:30.900 --> 00:01:33.420
image profiles, and whatnot.

00:01:33.430 --> 00:01:35.780
And so what we've been doing is
essentially building ColorSync

00:01:35.780 --> 00:01:38.730
in at lower and lower levels,
fundamental integration in

00:01:38.740 --> 00:01:42.600
the operating system and as,
you know, for example one major

00:01:42.600 --> 00:01:44.920
announcement that was made,
I think it was yesterday,

00:01:45.000 --> 00:01:47.160
was the fact that
QuickTime image importers,

00:01:47.160 --> 00:01:48.840
you know,
are going to respect color profiles

00:01:48.840 --> 00:01:52.350
which is very significant because that
means that practically any application

00:01:52.350 --> 00:01:55.920
that uses QuickTime image importer
for services is now going to do the

00:01:55.920 --> 00:01:58.710
right things with regards to profiles.

00:01:58.860 --> 00:02:01.680
But in the fact that we continue to build
ColorSync more and more in as sort of

00:02:01.680 --> 00:02:06.310
the core DNA of the operating system,
we wanted to make sure that we continue

00:02:06.330 --> 00:02:10.190
to innovate and express ColorSync in
interesting ways for both our users and

00:02:10.200 --> 00:02:14.500
our professional users in particular
in addition to developers with lots of

00:02:14.500 --> 00:02:17.060
new ways to access the functionality.

00:02:17.160 --> 00:02:20.990
pleasure to invite David Hayward to the
stage to take you through the session.

00:02:26.800 --> 00:02:28.800
Hello everyone,
welcome to the ColorSync session.

00:02:28.800 --> 00:02:31.300
We have a big room and lots of
big topics to talk about today.

00:02:31.300 --> 00:02:34.130
On a wide range of subjects,
let me kind of start out

00:02:34.220 --> 00:02:37.680
with a basic outline of what
we'll be talking about today.

00:02:37.680 --> 00:02:39.380
First of all,
for those of you that are new to

00:02:39.380 --> 00:02:42.660
ColorSync or new to color management,
I'll start out with a general overview.

00:02:42.660 --> 00:02:45.020
And then we'll start to talk
about some of the foundations

00:02:45.050 --> 00:02:47.750
upon which ColorSync is built,
such as ColorSync and its

00:02:47.770 --> 00:02:50.910
device integration layers,
how it ties in with Quartz.

00:02:50.980 --> 00:02:53.420
After that,
we'll take a trip through some of the

00:02:53.440 --> 00:02:57.530
high-level functionality that ColorSync
provides through ColorSync utility

00:02:57.530 --> 00:03:01.410
and integration with other systems
like OpenGL and display calibration.

00:03:01.420 --> 00:03:04.150
After that's over, I'll be talking about
something new today,

00:03:04.240 --> 00:03:05.820
which is something called SIPs.

00:03:05.820 --> 00:03:06.860
We'll save that for last.

00:03:08.320 --> 00:03:10.270
So first of all,
an overview of ColorSync for those

00:03:10.270 --> 00:03:11.700
of you that are new to the subject.

00:03:11.780 --> 00:03:15.220
All of you are, I'm sure,
aware that there's a wide variety of

00:03:15.220 --> 00:03:20.400
devices that we all work with now,
from scanners to cameras to displays,

00:03:20.480 --> 00:03:24.140
big projectors, printers,
both PostScript and Inkjet.

00:03:24.330 --> 00:03:28.060
And all of these devices that you've all
seen before represent colors in different

00:03:28.210 --> 00:03:31.400
spaces and with widely different
behaviors and different gamuts or

00:03:31.400 --> 00:03:33.640
range of colors that they can represent.

00:03:34.260 --> 00:03:38.080
And this presents a fundamental problem
that makes it very difficult for content

00:03:38.080 --> 00:03:40.180
to move between one device and another.

00:03:40.180 --> 00:03:42.660
And the solution to this
problem is ColorSync.

00:03:42.680 --> 00:03:46.900
And ColorSync provides a complete
color management system that's been

00:03:47.100 --> 00:03:51.670
designed to provide consistent color
across this spectrum of devices.

00:03:51.680 --> 00:03:55.300
That said, in addition to doing
device-level color correction,

00:03:55.380 --> 00:03:58.160
it can also be used to do
abstract special effects,

00:03:58.200 --> 00:04:01.120
such as hue rotation and
contrast enhancement.

00:04:01.120 --> 00:04:04.140
These kind of changes that
may be very important.

00:04:04.180 --> 00:04:06.590
And it's important to
you as a content creator,

00:04:06.750 --> 00:04:09.520
but may not be associated
with any particular device.

00:04:09.520 --> 00:04:11.760
We'll come back to that
throughout the presentation.

00:04:13.810 --> 00:04:18.760
So this is an outline of how ColorSync
fits into the overall system on Mac OS X.

00:04:18.760 --> 00:04:21.220
At the top,
we have high-level applications,

00:04:21.260 --> 00:04:24.810
such as the ones that use Uwrite,
and also applications such as ColorSync

00:04:24.810 --> 00:04:27.040
Utility and other tools that we provide.

00:04:27.040 --> 00:04:30.640
These are all built upon
high-level application frameworks,

00:04:30.680 --> 00:04:33.730
such as Carbon and Cocoa,
which all in turn use our

00:04:33.730 --> 00:04:37.600
variety of graphics technologies
that we have on the system,

00:04:37.600 --> 00:04:40.620
such as image capture, quartz,
quick time, and printing.

00:04:41.580 --> 00:04:43.990
The key thing about all these
graphics technologies is that they

00:04:43.990 --> 00:04:47.260
all now make use of ColorSync,
and this provides a core service to

00:04:47.270 --> 00:04:50.820
the rest of the system for dealing
with color consistently and correctly.

00:04:50.820 --> 00:04:54.140
ColorSync is based on
three key foundations.

00:04:54.140 --> 00:04:55.350
One is profiles.

00:04:55.360 --> 00:05:00.280
Profiles are binary data files which
hold the device characterization.

00:05:00.280 --> 00:05:04.430
It describes the way the device responds
to color in a device-independent way.

00:05:04.440 --> 00:05:08.800
The other key foundation that ColorSync
is based upon is device integration,

00:05:08.820 --> 00:05:11.180
and this I'll talk about
in more detail in a bit,

00:05:11.380 --> 00:05:15.480
but the basic idea is to be able
to make it so that ColorSync and

00:05:15.480 --> 00:05:18.920
client applications can know what the
current profile for all the devices

00:05:18.920 --> 00:05:20.970
that are connected to a computer are.

00:05:22.510 --> 00:05:26.370
The other third piece of foundation that
ColorSync is dependent upon are CMMs,

00:05:26.390 --> 00:05:27.670
or Color Management Modules.

00:05:27.680 --> 00:05:31.340
And these are the computational engines
which are used to actually perform

00:05:31.390 --> 00:05:35.710
color transformations between one
source profile and another profile.

00:05:36.400 --> 00:05:39.430
So that's the basic outline of how
ColorSync fits into the system.

00:05:39.590 --> 00:05:42.430
Let me give a brief,
simple example of how ColorSync

00:05:42.430 --> 00:05:44.680
is used in everyday practice.

00:05:44.680 --> 00:05:47.220
For example, we have an application
that's calling ColorSync.

00:05:47.220 --> 00:05:49.860
It's either calling it directly
or it's calling it indirectly

00:05:49.860 --> 00:05:51.280
through other graphics APIs.

00:05:51.390 --> 00:05:53.930
But the scenario is basically the same.

00:05:54.060 --> 00:05:56.020
The idea is we want to be
able to acquire images,

00:05:56.150 --> 00:05:57.340
for example, from a camera.

00:05:57.400 --> 00:06:00.410
And we want to make sure that when
we get the image from the camera that

00:06:00.420 --> 00:06:04.900
we also have a profile that describes
the way that camera responds to color.

00:06:05.090 --> 00:06:06.940
This profile can be
embedded in that image,

00:06:07.010 --> 00:06:10.710
so now wherever that image travels,
it'll always be possible for ColorSync

00:06:10.800 --> 00:06:15.020
to know the behavior of that device
and how that image represents color

00:06:15.020 --> 00:06:17.860
and how the image is supposed to look.

00:06:18.200 --> 00:06:20.520
So once we have an image
with an embedded profile,

00:06:20.530 --> 00:06:23.780
a ColorSync application is going to
then want to display that on a screen,

00:06:23.780 --> 00:06:24.340
for example.

00:06:24.340 --> 00:06:27.620
ColorSync can determine
the profile for the screen,

00:06:27.620 --> 00:06:31.120
and now given these two profiles,
the source profile for the camera and

00:06:31.210 --> 00:06:34.840
the destination profile for the display,
ColorSync can concatenate

00:06:34.840 --> 00:06:38.260
these two data files and create
what they call a color world.

00:06:38.260 --> 00:06:41.700
This color world can then be used
to match all the RGB values from the

00:06:41.700 --> 00:06:45.470
original color space to the display
color space in a manner that creates

00:06:45.620 --> 00:06:47.560
the best possible consistent color.

00:06:49.170 --> 00:06:52.100
Similar process occurs when
it comes time to print.

00:06:52.100 --> 00:06:54.030
In this case,
ColorSync determines what the

00:06:54.070 --> 00:06:57.100
best profile is for the current
printer and its current settings.

00:06:57.210 --> 00:07:01.390
And again, the source data is now matched
from the source color space to

00:07:01.390 --> 00:07:03.750
the destination printer profile.

00:07:04.230 --> 00:07:05.700
This is a very simple example here.

00:07:05.700 --> 00:07:09.280
In reality,
documents can be much more complicated,

00:07:09.280 --> 00:07:13.050
and the life of a document can
be much more long and drawn out.

00:07:13.060 --> 00:07:16.440
So, for example,
this is a very conceivable operation,

00:07:16.520 --> 00:07:17.440
for example.

00:07:17.440 --> 00:07:21.310
An image can be acquired through
the image capture architecture,

00:07:21.310 --> 00:07:24.720
and it can then be edited
in a Carbon application.

00:07:24.720 --> 00:07:26.800
After that,
it could be converted to a different

00:07:26.910 --> 00:07:30.110
file format using some QuickTime tool,
and then maybe sent in an

00:07:30.110 --> 00:07:33.720
email to another user who opens
it in preview and prints it.

00:07:34.100 --> 00:07:36.020
As soon as printing occurs,
there's a whole new set of

00:07:36.020 --> 00:07:38.260
operations that start to occur,
such as the data being

00:07:38.260 --> 00:07:41.680
rasterized by Quartz,
sent through the printer driver,

00:07:41.680 --> 00:07:44.600
and ultimately sent as
bits to the inkjet printer.

00:07:44.600 --> 00:07:49.250
So this is a long chain of operations,
and each one of these steps,

00:07:49.360 --> 00:07:51.960
color management may be involved,
or should be involved if you want

00:07:51.960 --> 00:07:53.440
to get the best possible output.

00:07:56.120 --> 00:07:59.400
Under Jaguar, however,
there were a few places in this chain

00:07:59.400 --> 00:08:03.080
where there were potential weak links,
places where applications had

00:08:03.080 --> 00:08:05.130
to go to a little extra effort
in order to make sure that the

00:08:05.130 --> 00:08:06.340
correct color management occurred.

00:08:06.340 --> 00:08:09.650
For example,
image capture architecture was

00:08:09.910 --> 00:08:14.230
hindered by the minor fact that some
cameras didn't register profiles.

00:08:14.240 --> 00:08:17.180
This meant that when an image was
first brought into the system,

00:08:17.260 --> 00:08:19.190
there was no profile
to describe the image,

00:08:19.190 --> 00:08:21.020
which could cause problems later.

00:08:22.310 --> 00:08:26.210
Similarly, when QuickTime APIs were
invoked to modify an image,

00:08:26.210 --> 00:08:29.660
apps had to go to a little extra
effort in order to explicitly

00:08:29.660 --> 00:08:31.360
check for embedded profiles.

00:08:31.440 --> 00:08:35.160
This created a persistent problem,
which was that oftentimes the

00:08:35.210 --> 00:08:38.820
same document could be opened
up in different applications,

00:08:38.820 --> 00:08:42.240
and depending on whether that application
respected the profile or didn't,

00:08:42.240 --> 00:08:43.900
you could get different results.

00:08:46.350 --> 00:08:47.880
Similarly,
there was a dilemma that occurred

00:08:47.880 --> 00:08:50.360
when it came time to print,
which was that not all print

00:08:50.360 --> 00:08:52.580
drivers register profiles.

00:08:52.660 --> 00:08:57.090
So one of our major objectives for
Panther was to solve these problems

00:08:57.190 --> 00:09:00.200
and make it as easy as possible for
applications to get the right output,

00:09:00.250 --> 00:09:02.430
which is, after all, what we all want.

00:09:02.540 --> 00:09:06.760
So we've made several changes in
the system to solve these problems.

00:09:06.790 --> 00:09:09.970
One was, in image capture,
we now associate a generic camera

00:09:10.060 --> 00:09:14.390
profile for all cameras if they
don't register a profile otherwise.

00:09:14.900 --> 00:09:18.970
Also, as we mentioned earlier,
QuickTime now makes an effort

00:09:19.130 --> 00:09:20.640
to respect embedded profiles.

00:09:20.640 --> 00:09:24.440
This is a very important change to
the system and means that documents

00:09:24.440 --> 00:09:28.110
will now look very consistent
no matter how they're opened up.

00:09:28.920 --> 00:09:31.990
Lastly, it is now possible for
CUPS PostScript and Raster

00:09:31.990 --> 00:09:33.900
drivers to register profiles.

00:09:33.900 --> 00:09:38.180
So this is also a great story in that it
completes the picture at the output side,

00:09:38.180 --> 00:09:43.290
making sure that we have the correct
profile at every step in the process.

00:09:44.970 --> 00:09:48.030
So, as I mentioned before,
one of the key foundations upon which

00:09:48.270 --> 00:09:50.330
ColorSync is based is device integration.

00:09:50.390 --> 00:09:52.700
Let me speak a little
bit about that in detail.

00:09:52.700 --> 00:09:54.880
Again,
as I showed in the previous diagram,

00:09:54.880 --> 00:09:57.440
we have ColorSync,
which is based on one key thing,

00:09:57.440 --> 00:10:00.800
which is device integration,
and this allows ColorSync to be able to

00:10:00.920 --> 00:10:04.480
know what the profiles are for devices.

00:10:05.440 --> 00:10:07.660
The key feature of the device
integration is for novice

00:10:07.660 --> 00:10:11.000
users in the sense that now,
with proper device integration,

00:10:11.080 --> 00:10:13.760
when a device is connected,
a profile will be automatically

00:10:13.820 --> 00:10:16.400
registered with the system
on behalf of the user.

00:10:16.400 --> 00:10:19.750
This means that even users who do not
even know about ColorSync will get

00:10:19.920 --> 00:10:21.690
good color output on their devices.

00:10:21.700 --> 00:10:25.020
The way this is accomplished
is by automatic registration.

00:10:25.020 --> 00:10:28.870
Automatic registration involves
registration of devices with

00:10:28.870 --> 00:10:31.930
their name and their ID,
different modes of the

00:10:31.970 --> 00:10:36.150
devices based on ID and name,
and a specification of a default

00:10:36.180 --> 00:10:38.420
or factory profile for each device.

00:10:40.210 --> 00:10:43.130
Again,
the objective of this is to make it so

00:10:43.130 --> 00:10:48.290
that novice users will automatically
get good color results without having

00:10:48.360 --> 00:10:50.970
to do any special settings or options.

00:10:51.420 --> 00:10:54.190
However, we also want to make this a
powerful feature that expert users

00:10:54.190 --> 00:10:55.630
can take advantage of as well.

00:10:55.640 --> 00:11:00.060
And this is done by supporting overrides
of profiles with device integration.

00:11:00.060 --> 00:11:03.360
Overrides are something that
calibration applications will use

00:11:03.360 --> 00:11:06.820
in order to change the factory
profile with a calibrated profile.

00:11:06.820 --> 00:11:09.070
It is also something that
an administrator can do to

00:11:09.070 --> 00:11:11.840
override the default profile
for all users of the machine.

00:11:11.840 --> 00:11:14.060
Or, of course,
users as well can change the

00:11:14.060 --> 00:11:15.550
profiles to their liking.

00:11:16.820 --> 00:11:18.870
Lastly,
there is an API for device integration,

00:11:18.890 --> 00:11:24.200
so your applications can become aware
of profiles as they become attached

00:11:24.200 --> 00:11:26.550
to the machine through their devices.

00:11:29.850 --> 00:11:32.890
Let me talk a bit more detail
about the automatic registration.

00:11:32.950 --> 00:11:35.800
Again, this is the key functionality
that makes it very easy for new

00:11:35.810 --> 00:11:37.390
users to get good color output.

00:11:37.650 --> 00:11:41.150
This is accomplished in three ways based
on the three different device managers.

00:11:41.390 --> 00:11:44.540
First of all, the Windows server,
whenever a display device is detected,

00:11:44.580 --> 00:11:48.710
will automatically query the display and
ask the display for its EDID information.

00:11:48.950 --> 00:11:51.860
From that EDID information,
it will create a profile

00:11:51.860 --> 00:11:53.540
and register that device.

00:11:54.210 --> 00:11:55.960
For image capture,
a similar process occurs

00:11:55.960 --> 00:11:58.590
whenever a camera is plugged in.

00:11:58.590 --> 00:12:04.590
If the driver supports profiles,
it will tell image capture about that

00:12:04.590 --> 00:12:06.240
profile and that will be registered.

00:12:06.360 --> 00:12:09.070
If it doesn't,
then a generic camera profile

00:12:09.070 --> 00:12:11.020
will be registered instead.

00:12:12.310 --> 00:12:15.440
Lastly, for the print manager,
profiles are registered for devices

00:12:15.440 --> 00:12:17.020
whenever a print queue is created.

00:12:17.020 --> 00:12:19.570
This happens in two ways,
depending on what type of

00:12:19.600 --> 00:12:21.020
printer driver you have.

00:12:21.220 --> 00:12:26.250
For Tioga printer drivers,
the print driver returns to ColorSync

00:12:26.290 --> 00:12:32.010
a dictionary of device names and device
modes and the profiles for each mode.

00:12:32.020 --> 00:12:34.530
For CUPS drivers,
this information is specified in a

00:12:34.590 --> 00:12:37.690
PostScript printer description file,
which I'll talk about in a

00:12:37.730 --> 00:12:39.340
little bit more detail now.

00:12:41.170 --> 00:12:44.000
So now with PPDs,
there's a new entry that we're proposing.

00:12:44.000 --> 00:12:47.430
This is very important for CUPS drivers,
both for PostScript and

00:12:47.430 --> 00:12:49.340
for raster drivers.

00:12:49.410 --> 00:12:54.120
Because now it is possible in the
PPD for the file to specify what

00:12:54.120 --> 00:12:59.650
the modes of a device are and what
the profiles are for each mode.

00:13:00.020 --> 00:13:03.860
The format for this is the
new keyword CUPS ICC profile,

00:13:03.970 --> 00:13:08.020
followed by a mode specifier
and a profile specifier.

00:13:08.020 --> 00:13:11.580
The mode specifier is a
concatenation of three fields,

00:13:11.600 --> 00:13:14.560
the color model, the media type,
and the resolution.

00:13:14.580 --> 00:13:19.160
Any of these fields can be emitted,
and it means that that mode will apply

00:13:19.160 --> 00:13:21.490
to any model media or resolution.

00:13:22.470 --> 00:13:24.640
The profile specifier
is very simple as well.

00:13:24.640 --> 00:13:28.040
All it is is a standard path
that's relative to the user

00:13:28.040 --> 00:13:30.340
share CUPS profiles directory.

00:13:30.340 --> 00:13:33.860
We recommend that if you are going to be
installing profiles in this directory,

00:13:33.860 --> 00:13:37.030
that you should create a subdirectory
for your own driver so that you do not

00:13:37.030 --> 00:13:38.650
conflict with other drivers' profiles.

00:13:38.660 --> 00:13:42.610
Let me show a simple
example of this in practice.

00:13:42.620 --> 00:13:47.580
Here we have a PostScript printer
PPD file that is registering two modes,

00:13:47.630 --> 00:13:52.240
one for 600x600 DPI and
one for 1200x1200 DPI.

00:13:52.400 --> 00:13:54.010
and then the profile for that.

00:13:54.080 --> 00:13:55.730
So it's very simple.

00:13:57.750 --> 00:14:00.900
So the best way to show all
this is to show it in action.

00:14:00.900 --> 00:14:02.750
So I'd like to bring up
to the stage Luke Wallis,

00:14:02.890 --> 00:14:04.910
who will be demonstrating
the device integration and

00:14:05.050 --> 00:14:07.510
speaking more on other subjects.

00:14:13.310 --> 00:14:14.080
Thank you, David.

00:14:14.150 --> 00:14:16.200
Can I get the machine
number one on the screen,

00:14:16.200 --> 00:14:17.340
please?

00:14:17.350 --> 00:14:19.080
All right.

00:14:19.980 --> 00:14:23.740
So the automatic registration of
the device is really a great story

00:14:23.740 --> 00:14:26.030
that we are promoting on Mac OS X.

00:14:26.160 --> 00:14:31.130
But what I would like to start with is to
show you how a user can get access to the

00:14:31.620 --> 00:14:36.060
ColorSync device integration database,
and how he or she can decide what

00:14:36.420 --> 00:14:41.060
kind of profiles are going to be used
with the devices known to the system.

00:14:41.230 --> 00:14:48.950
So all this information is available in
ColorSync Utility under the Devices tab.

00:14:49.220 --> 00:14:52.920
As you see, there are different types
of devices listed here:

00:14:52.920 --> 00:14:56.460
scanners, cameras, displays, printers,
and proofers.

00:14:56.550 --> 00:14:59.720
And if, for example,
I open the cameras tab,

00:14:59.920 --> 00:15:04.240
you can see that the
Canon Powershot S100,

00:15:04.240 --> 00:15:06.370
my favorite camera,
is known to this system.

00:15:06.920 --> 00:15:10.450
The information that I'm
looking here for is the profile.

00:15:10.450 --> 00:15:17.400
This camera, or its device manager,
in this case image capture,

00:15:17.400 --> 00:15:22.040
registered for me a default
mode and a factory profile.

00:15:22.200 --> 00:15:26.820
And in the same time, me as a user,
I have an opportunity here,

00:15:26.880 --> 00:15:31.560
an option given by ColorSync utility,
to override this factory profile.

00:15:31.560 --> 00:15:35.430
And I could do that if I desired so,
by assigning any of the

00:15:35.430 --> 00:15:37.560
profiles that I can choose.

00:15:37.560 --> 00:15:40.110
But in this particular
case of the camera,

00:15:40.180 --> 00:15:44.420
I was quite pleased with the results,
so I didn't need to do that.

00:15:44.420 --> 00:15:46.530
The next on the list are displays.

00:15:46.530 --> 00:15:49.040
Same information is available here.

00:15:49.280 --> 00:15:52.420
I have the same option to
override the factory profile,

00:15:52.420 --> 00:15:54.120
register automatically.

00:15:54.120 --> 00:15:56.950
And as a curiosity,
we actually had to override

00:15:56.950 --> 00:16:00.820
it because we wanted to have
colors look right on the display.

00:16:00.820 --> 00:16:04.200
The video is just split through
the splitter and the same image

00:16:04.200 --> 00:16:06.340
is displayed on the screen.

00:16:06.340 --> 00:16:10.120
So in order to get the colors better,
as you see,

00:16:10.120 --> 00:16:15.300
we overrode the original automatically
registered profile with the

00:16:15.300 --> 00:16:18.530
profile that we created just a few
moments before the session started.

00:16:19.940 --> 00:16:23.770
And the next group of devices I would
like to talk about are printers.

00:16:23.790 --> 00:16:28.280
As you heard from David,
there are different types of

00:16:28.520 --> 00:16:30.570
printers supported in Mac OS X.

00:16:30.570 --> 00:16:35.630
There are Tioga raster printers,
which typically comes

00:16:35.630 --> 00:16:38.120
with OEM custom drivers.

00:16:38.120 --> 00:16:42.780
There are PostScript printers,
and last but not least,

00:16:43.060 --> 00:16:45.260
the CAPS raster printers.

00:17:00.520 --> 00:17:00.560
So I selected one representative
for each of those.

00:17:00.560 --> 00:17:00.560
The first on the list is Canon S450,
which is controlled by the Tioga driver.

00:17:01.060 --> 00:17:07.840
And this driver registered one
mode and one factory profile.

00:17:07.890 --> 00:17:11.140
When I was browsing through the
contents of the driver package,

00:17:11.140 --> 00:17:14.020
I discovered that there is
a slightly newer version of

00:17:14.020 --> 00:17:17.860
the profile for this printer,
so I used my option here,

00:17:17.860 --> 00:17:21.790
and I overwrote the original
one with slightly newer profile.

00:17:22.920 --> 00:17:27.840
The next on the list is probably
very well known for you,

00:17:27.840 --> 00:17:29.770
Apple LaserWriter Pro 630.

00:17:29.780 --> 00:17:35.500
This is a very old printer manufactured
at some point of time by Apple,

00:17:35.500 --> 00:17:40.160
but the reason I chose this particular
printer was that I was able to

00:17:40.160 --> 00:17:43.760
find a PPD which would declare
a profile for this printer the

00:17:43.890 --> 00:17:46.350
way David described it a moment ago.

00:17:46.360 --> 00:17:49.620
As you see,
the name of this profile is LaserWriter

00:17:49.890 --> 00:17:55.100
Pro 630 Profile and is located in
user share caps profiles LaserWriter,

00:17:55.100 --> 00:17:58.960
but looks like we didn't do
here what David was suggesting.

00:17:58.960 --> 00:18:02.680
We did not create our
subfolder for those profiles.

00:18:04.300 --> 00:18:11.450
The next on the list is Stylus C80,
which is controlled by the

00:18:11.450 --> 00:18:14.180
CAPS GIMP print driver.

00:18:14.180 --> 00:18:19.430
And the reason why I chose this
particular printer is because I wanted

00:18:19.430 --> 00:18:24.040
to show you what is going to happen
if there are no profiles in the PPD.

00:18:24.900 --> 00:18:28.380
In this case,
the printing system will find out all the

00:18:28.540 --> 00:18:33.290
color models supported by this printer
and will by default register these as

00:18:33.290 --> 00:18:35.940
the mode of operations with ColorSync.

00:18:35.980 --> 00:18:40.140
So, even though there are no
factory profiles available,

00:18:40.410 --> 00:18:43.030
me as a user,
I as a user have an option to

00:18:43.030 --> 00:18:47.350
assign my own profile to this
device for a specific mode.

00:18:47.360 --> 00:18:50.860
And as a matter of fact,
I had built two profiles

00:18:50.860 --> 00:18:53.530
for this printer,
CMYK and RGB.

00:18:53.540 --> 00:18:54.630
And I used CMYK.

00:18:54.920 --> 00:18:58.590
color sync utility to
assign these profiles.

00:18:59.170 --> 00:19:06.920
In the case when there is no profile
available for a given mode of operation,

00:19:07.010 --> 00:19:12.360
the printing system will provide
on the fly a default profile which

00:19:12.370 --> 00:19:17.670
will be used in the case when we
need to do color conversion to this

00:19:17.670 --> 00:19:21.690
particular process color model.

00:19:22.330 --> 00:19:27.010
So, in conclusion of this
little demonstration,

00:19:27.040 --> 00:19:31.120
I would like to say that all devices,
color devices,

00:19:31.460 --> 00:19:37.400
known to this system will be represented
by a set of ICC profiles corresponding

00:19:37.400 --> 00:19:39.940
to their modes of operation.

00:19:40.480 --> 00:19:44.350
And the most important use of
these profiles is obviously

00:19:44.350 --> 00:19:46.250
to do the color matching.

00:19:46.260 --> 00:19:49.670
But in the same time,
these profiles are available to other

00:19:49.990 --> 00:19:53.740
system components and to applications
and can be used in a variety,

00:19:53.830 --> 00:19:55.440
for a variety of reasons.

00:19:55.440 --> 00:19:58.330
For example,
a very color-savvy application can

00:19:58.330 --> 00:20:02.520
figure out the device gamut or find
other properties of this device.

00:20:02.520 --> 00:20:05.630
Or the profile can be used
for device simulation,

00:20:05.740 --> 00:20:08.330
soft-proofing, and things like that.

00:20:11.110 --> 00:20:17.710
So now let's switch to slides
so I can get the projector up.

00:20:23.060 --> 00:20:29.180
Let's start with taking a look at the
very typical scenario of an application,

00:20:29.180 --> 00:20:35.300
which goal is to acquire the data
from the color device input and

00:20:35.300 --> 00:20:41.340
reproduce it on a variety of different
color output devices like displays,

00:20:41.340 --> 00:20:46.100
printers,
or export this data in the PDF format.

00:20:46.630 --> 00:20:51.540
There are two main points that
I would like to make using this slide.

00:20:51.710 --> 00:20:55.380
First of all, as you can see,
there is one common component for

00:20:55.380 --> 00:21:00.570
all the operations that I described,
and this component is ColorSync.

00:21:01.330 --> 00:21:05.060
Another point is that, as you see,
the application doesn't have to

00:21:05.060 --> 00:21:09.410
necessarily go all the way to ColorSync,
but it can use other system

00:21:09.440 --> 00:21:13.970
components which handle things like
color data acquisition or color

00:21:13.970 --> 00:21:19.440
data creation because ColorSync is
integrated into those components.

00:21:23.180 --> 00:21:27.730
Let's take a look at the
color data acquisition.

00:21:27.770 --> 00:21:31.930
The component which is the
closest to the input device,

00:21:31.930 --> 00:21:35.900
in this case the camera,
the image capture device module,

00:21:35.900 --> 00:21:41.940
is responsible for transferring the
data from the device into the system.

00:21:41.940 --> 00:21:47.410
And if the camera happens to attach
a profile to each individual image,

00:21:47.600 --> 00:21:52.750
then this module will take care of
passing that profile through all layers

00:21:52.750 --> 00:21:55.580
of image capture to the application.

00:21:55.580 --> 00:22:00.330
But if there is no profile
attached to the image,

00:22:00.330 --> 00:22:05.480
image capture will consult
ColorSync device integration

00:22:05.520 --> 00:22:10.390
database and it will retrieve
appropriate profile for this device.

00:22:12.490 --> 00:22:16.200
When we take a look at the
process of color data creation,

00:22:16.200 --> 00:22:20.530
we can see that there are two components
which are always present here.

00:22:20.670 --> 00:22:25.680
Besides ColorSync, there is Quartz,
which is the Mac OS X graphics system

00:22:25.680 --> 00:22:28.590
based on the PDF imaging model.

00:22:29.180 --> 00:22:33.590
In this particular scenario,
ColorSync will be used into full

00:22:33.730 --> 00:22:35.280
extent of its functionality.

00:22:35.380 --> 00:22:38.260
We'll provide the profiles
for the destination devices,

00:22:38.260 --> 00:22:41.310
but in the same time,
we'll be used for converting

00:22:41.340 --> 00:22:44.960
the data using profiles for the
devices' source color spaces

00:22:44.960 --> 00:22:47.820
and using the registered CMMs.

00:22:49.200 --> 00:22:53.560
So this slide leads me to the topic
I would like to focus on today,

00:22:53.600 --> 00:22:57.670
which is the integration
of ColorSync and Quartz.

00:22:58.410 --> 00:23:04.920
Our high-level objective here is to
integrate graphics and color management

00:23:05.040 --> 00:23:08.540
by satisfying several basic requirements.

00:23:08.660 --> 00:23:11.840
First of all,
we would like to have a centralized

00:23:11.840 --> 00:23:14.760
color matching for consistent results.

00:23:14.800 --> 00:23:19.760
Another very important requirement
is the ability to composite

00:23:19.820 --> 00:23:23.160
different color spaces and opacity.

00:23:24.310 --> 00:23:29.270
To satisfy this requirement,
ColorSync will be used to convert the

00:23:29.270 --> 00:23:35.970
data from many different source color
spaces into quartz compositing space.

00:23:36.430 --> 00:23:40.830
This also has to be a scalable
solution in the sense of working with

00:23:40.830 --> 00:23:43.300
a variety of different applications.

00:23:43.320 --> 00:23:46.800
On one end,
we may have those old legacy applications

00:23:46.800 --> 00:23:50.250
which don't know anything about color
management or they don't want to

00:23:50.500 --> 00:23:52.380
participate in color management.

00:23:52.500 --> 00:23:55.110
So for these,
Quartz needs to provide some default

00:23:55.110 --> 00:23:59.620
settings and make sure that these
applications can work seamlessly

00:23:59.620 --> 00:24:04.360
with the rest of the system,
which is very color management-centric.

00:24:05.240 --> 00:24:09.910
The most desirable model for the
application is the one in which

00:24:10.440 --> 00:24:13.770
application uses calibrated color.

00:24:13.930 --> 00:24:20.520
What I mean is everything is properly
tagged and so the system can easily

00:24:20.710 --> 00:24:24.180
Collect this data from the
application and do the right

00:24:24.350 --> 00:24:30.190
thing when the data is to send to
different kind of output devices.

00:24:30.630 --> 00:24:35.080
In this realm of calibrated color,
we may have the very high-end

00:24:35.080 --> 00:24:41.240
applications which may desire to do the
color management completely on their own.

00:24:41.240 --> 00:24:45.370
So Quartz also has to work
with applications like that.

00:24:45.440 --> 00:24:50.620
Other important requirements
are color accuracy,

00:24:50.820 --> 00:24:54.810
performance, and PDF compatibility.

00:24:56.100 --> 00:24:59.060
For those of you who may be
new to this topic like me,

00:24:59.060 --> 00:25:06.880
very quickly go through the few of
basic ideas pertaining to color in PDF,

00:25:06.990 --> 00:25:10.690
compare them to those
in ICC and ColorSync,

00:25:10.940 --> 00:25:14.810
and then see how we
implemented that in Quartz.

00:25:15.690 --> 00:25:20.480
As you may know,
the color spaces in PDF are defined

00:25:20.480 --> 00:25:23.640
by the set of known color spaces,
which can be divided into

00:25:23.640 --> 00:25:24.690
three different groups.

00:25:24.780 --> 00:25:29.400
There are legacy device color spaces,
calibrated color spaces,

00:25:29.400 --> 00:25:32.240
and finally ICC-based color spaces.

00:25:33.990 --> 00:25:36.680
As you may know, this list also reflects,
in some sense,

00:25:36.680 --> 00:25:39.950
the history of color management,
where initially only device

00:25:40.000 --> 00:25:43.000
color spaces were known,
but as we know today,

00:25:43.080 --> 00:25:49.040
they were really very bad for any
kind of color management because the

00:25:49.040 --> 00:25:52.580
color appearance is device-dependent.

00:25:52.870 --> 00:25:57.790
To address this problem,
calibrated color was invented along

00:25:57.790 --> 00:26:01.760
with the idea of color matching through
device-independent color spaces.

00:26:01.760 --> 00:26:05.070
And over the years,
the concept of calibrated color

00:26:05.110 --> 00:26:09.280
evolved into ICC profiles,
which now are the de facto standard

00:26:09.330 --> 00:26:13.540
among color professionals and can
be embedded in almost all known

00:26:13.540 --> 00:26:15.920
data formats supporting color.

00:26:15.920 --> 00:26:19.990
Another concept important from
the color management point of

00:26:19.990 --> 00:26:22.520
view in PDF are color conversions.

00:26:22.800 --> 00:26:26.370
Color conversions can be
described as a function of source,

00:26:26.370 --> 00:26:28.760
destination, and rendering intent.

00:26:29.660 --> 00:26:33.970
The similar concepts exist
in ColorSync and ICC,

00:26:34.010 --> 00:26:39.030
but the only form of the color space
that we use there is the ICC profile.

00:26:39.030 --> 00:26:43.390
And as I mentioned a moment ago,
today this is the most general form

00:26:43.390 --> 00:26:45.810
of the color space description.

00:26:45.960 --> 00:26:49.200
The color conversions in
ICC and ColorSync are somewhat

00:26:49.200 --> 00:26:52.700
similar to those in PDF,
with the option for inserting

00:26:52.700 --> 00:26:56.450
intermediate profiles between
the source and destination.

00:26:58.220 --> 00:27:03.760
In Quartz, the color space, in essence,
is represented by one

00:27:03.760 --> 00:27:06.180
or more ICC profiles.

00:27:06.180 --> 00:27:09.880
This way, we can preserve the original
PDF concept of matching a single

00:27:09.880 --> 00:27:13.770
source to a single destination,
but in the same time,

00:27:13.770 --> 00:27:18.810
we can build those multi-stage and
complex color transform which are

00:27:18.810 --> 00:27:22.590
suitable for more advanced color
management like soft proofing,

00:27:22.710 --> 00:27:27.980
special effects, color device simulation,
et cetera, et cetera.

00:27:28.530 --> 00:27:34.480
And if the need arises to embed
such a color space in the document,

00:27:34.580 --> 00:27:39.110
the sequence of profiles can be
concatenated by ColorSync into a single

00:27:39.190 --> 00:27:41.900
profile and embedded in the document.

00:27:42.940 --> 00:27:48.200
Another important rule that Quartz,
in some sense, inherited from PDF is the

00:27:48.200 --> 00:27:50.140
color space equivalence.

00:27:50.160 --> 00:27:56.140
This rule says that the color conversions
are necessary only if the source color

00:27:56.140 --> 00:27:58.800
space is different from the destination.

00:27:58.800 --> 00:28:03.880
And Quartz is using this very
simple rule to organize properly

00:28:03.880 --> 00:28:09.480
the flow of the color data through
multiple stages of rendering.

00:28:10.530 --> 00:28:15.780
So in a summary,
all color spaces inside Quartz

00:28:15.780 --> 00:28:18.520
will end up as ICC profiles.

00:28:18.520 --> 00:28:23.320
The easiest way to operate, as you see,
is by using ICC-based color spaces,

00:28:23.330 --> 00:28:28.540
because we are just simply extracting the
profile from the color space definition.

00:28:28.910 --> 00:28:33.840
In the case of calibrated color spaces,
those can be very easily

00:28:33.840 --> 00:28:38.240
repacked using their calibration
record in the form of a profile.

00:28:38.440 --> 00:28:41.190
And in the same time,
we still have to support those

00:28:41.510 --> 00:28:45.390
legacy device color spaces,
and in order to work with these,

00:28:45.450 --> 00:28:50.230
Quartz is going to use some
predefined default profiles.

00:28:51.640 --> 00:28:56.250
There is a wide variety of ICC-based
color spaces provided by Quartz,

00:28:56.250 --> 00:29:00.850
but I would like to focus on those
which allow you to access the

00:29:01.170 --> 00:29:04.360
ColorSync device integration database.

00:29:04.360 --> 00:29:10.580
An example are the color spaces which
allow for drawing directly to the screen.

00:29:10.580 --> 00:29:14.020
Examples of these color spaces,
more specifically,

00:29:14.020 --> 00:29:17.560
are Display RGB color space,
which is in essence a wrapper

00:29:17.560 --> 00:29:19.860
around the primary display profile.

00:29:20.480 --> 00:29:23.000
Another color space like
this is Display Gray,

00:29:23.000 --> 00:29:26.660
which as you can see is
composed of two profiles,

00:29:26.660 --> 00:29:29.440
device link converting gray
to RGB and then attached to

00:29:29.440 --> 00:29:30.980
the primary display profile.

00:29:30.980 --> 00:29:36.150
And for more advanced use,
there are Display Color Spaces with ID,

00:29:36.150 --> 00:29:40.190
which are wrappers for
Display by AV ID profiles.

00:29:42.160 --> 00:29:46.220
Quartz also, in Panther,
helps to solve the problem of

00:29:46.220 --> 00:29:47.780
drawing to multiple screens.

00:29:47.860 --> 00:29:52.000
There are two basic choices
that applications can make.

00:29:52.100 --> 00:29:55.920
One, as I call it,
a simple model in which color is

00:29:56.000 --> 00:30:00.630
matched only to the main display,
and the application doesn't take

00:30:00.630 --> 00:30:04.660
any or makes any updates on the
screen on the profile change.

00:30:04.660 --> 00:30:08.630
On the other end,
the application can use what I call

00:30:08.630 --> 00:30:13.280
a complete model in which the color
will be matched to individual displays.

00:30:13.280 --> 00:30:17.140
The application can register
for notifications on the screen

00:30:17.220 --> 00:30:21.240
or profile change and make the
proper updates when necessary.

00:30:21.240 --> 00:30:24.480
And obviously,
there are some possibilities for

00:30:24.480 --> 00:30:28.790
combining these two profiles and
come up with the application-specific

00:30:28.880 --> 00:30:30.480
solution to this problem.

00:30:33.470 --> 00:30:38.780
A very important aspect of
color management in Mac OS X is

00:30:38.920 --> 00:30:39.920
color management in printing.

00:30:40.210 --> 00:30:45.520
Many of you may already know that
the printing in Mac OS X consists

00:30:45.520 --> 00:30:49.040
of two main components,
the front-end and the back-end.

00:30:49.080 --> 00:30:54.010
The main role of the front-end
is to choose the printer and

00:30:54.010 --> 00:31:00.700
collect the print options,
for example, through the interface.

00:31:01.390 --> 00:31:06.470
And in the same time,
to spool the print job into PDF.

00:31:06.540 --> 00:31:11.510
The backend job is to convert the
spooled PDF into appropriate format

00:31:12.890 --> 00:31:17.280
For the printer that we are
going to print our job on.

00:31:17.290 --> 00:31:21.940
If we take a closer look at what is
happening at the printing front end,

00:31:21.940 --> 00:31:27.760
we may notice that all color data in
this pool PDF is tagged with profiles.

00:31:27.770 --> 00:31:30.510
By definition,
we are not doing any printer-specific

00:31:30.540 --> 00:31:35.770
color conversions at the front end,
but another important step is that

00:31:35.850 --> 00:31:40.120
we are consulting the ColorSync
device integration database and

00:31:40.120 --> 00:31:44.670
extracting the profile matching
the current printing condition.

00:31:46.190 --> 00:31:52.040
What is happening at the backend
depends on the type of the printer.

00:31:52.040 --> 00:31:56.610
For the raster printers,
what we have to do is to convert the

00:31:56.690 --> 00:32:01.020
spooled PDF into printer profile from
the color management's perspective.

00:32:01.020 --> 00:32:06.020
And for that, we extract the printer
profile from the print job.

00:32:06.020 --> 00:32:12.030
And if the profile is not there,
printing system will provide a default

00:32:12.030 --> 00:32:15.020
profile so this matching can occur.

00:32:16.440 --> 00:32:19.960
For PostScript, we have two options.

00:32:20.080 --> 00:32:23.800
The first is traditional
color matching in the printer.

00:32:23.950 --> 00:32:27.740
For this case,
all the profiles from the spoof

00:32:28.160 --> 00:32:31.160
PDF are converted to PostScript CSAs.

00:32:31.180 --> 00:32:35.600
But in Panther, we added a new option
for PostScript printers.

00:32:35.600 --> 00:32:41.480
Now we can do color matching on
the computer using ColorSync.

00:32:41.840 --> 00:32:46.300
In this case, we need to retrieve,
similarly as in the

00:32:46.320 --> 00:32:49.850
case of raster printers,
the profiles for the current

00:32:49.970 --> 00:32:53.010
print job from the print job.

00:32:53.040 --> 00:32:58.770
And if there are no profiles available,
but we still want to do the computer

00:32:59.250 --> 00:33:03.800
color matching by ColorSync,
we'll be using some default profiles.

00:33:07.160 --> 00:33:12.890
In this light, a new addition of drawing
directly in printer color space,

00:33:12.940 --> 00:33:15.910
I think, is also very important
that comes with Panther.

00:33:15.920 --> 00:33:20.830
This color space is based on the printer
instance and current print settings.

00:33:20.860 --> 00:33:27.460
This way, when the user clicks on the
print button in the print dialog,

00:33:27.460 --> 00:33:32.750
an application has a chance to find
out what are exact printing conditions

00:33:32.750 --> 00:33:36.960
in terms of the color space and make
the proper adjustments if necessary.

00:33:37.000 --> 00:33:38.230
Thank you.

00:33:40.550 --> 00:33:43.950
Another addition is
Printer Calibration API.

00:33:44.020 --> 00:33:49.780
This API allows a calibrator to
submit a calibration target in

00:33:49.780 --> 00:33:54.630
the form of a PDF file through the
calibration path to a specified printer.

00:33:54.720 --> 00:33:59.800
It requires specific calibration target
information through which the calibrator

00:34:00.190 --> 00:34:05.110
can instruct the system which color
conversions have to happen and which

00:34:05.110 --> 00:34:07.720
color conversion must not happen.

00:34:09.340 --> 00:34:13.350
A very important subject that I would
like to mention here is importing

00:34:13.350 --> 00:34:17.100
and tag data to Mac OS X platform.

00:34:18.130 --> 00:34:21.710
As you know, for many years,
we've been evangelizing usage of the

00:34:21.710 --> 00:34:26.970
ColorSync default profiles for documents,
and Quartz is exporting these profiles

00:34:27.070 --> 00:34:30.670
in the form of user default color spaces.

00:34:31.340 --> 00:34:37.360
If the application makes this first
step of assigning the user profile,

00:34:37.360 --> 00:34:42.210
the whole color story on Mac OS X looks
much better because very often it's

00:34:42.290 --> 00:34:46.300
impossible from the depth of the
operating system to find out where

00:34:46.300 --> 00:34:48.410
this device data is coming from.

00:34:48.650 --> 00:34:57.090
And assigning those profiles in the
depths of courts are sometimes difficult.

00:34:58.710 --> 00:35:04.990
The next very powerful addition
to Panther are quartz filters.

00:35:05.490 --> 00:35:09.210
In a nutshell,
I would define the Quartz filter as a

00:35:09.210 --> 00:35:14.470
new optional component in the Quartz
imaging and color matching pipeline,

00:35:14.470 --> 00:35:18.390
which allows to associate a sequence
of imaging or color correction

00:35:18.500 --> 00:35:19.960
operation with a single drawing.

00:35:20.700 --> 00:35:25.600
The Quartz filter can act on all drawings
operations or only on a specified set,

00:35:25.630 --> 00:35:29.950
can be configured to perform very
specialized imaging and color operations,

00:35:29.950 --> 00:35:34.860
and finally can be defined and
saved in XML so the applications

00:35:34.860 --> 00:35:38.030
and users can easily exchange those.

00:35:38.600 --> 00:35:43.070
When we look at the Quartz architecture,
where the Quartz filter fit,

00:35:43.140 --> 00:35:47.800
we see that they are located right
in the middle of this structure.

00:35:47.800 --> 00:35:51.060
And this is the main reason why,
in Panther,

00:35:51.060 --> 00:35:56.800
we will make the Quartz filters available
to the end user only through the use of

00:35:56.800 --> 00:36:00.140
system-built utilities and applications.

00:36:00.140 --> 00:36:04.550
But we will be working on the
proper API to provide access

00:36:04.550 --> 00:36:07.160
for applications to the filters.

00:36:07.160 --> 00:36:11.660
So this access is safe for both
the system and the application.

00:36:13.970 --> 00:36:18.430
What I'd like to do now is to
give you a quick demo of how the

00:36:18.560 --> 00:36:22.160
filters can be used on Mac OS X,
how those quartz filters

00:36:22.670 --> 00:36:24.450
can be used in Panther.

00:36:25.230 --> 00:36:30.330
Let's start with a very simple example.

00:36:30.870 --> 00:36:36.590
What I like to do is to print the
image which I acquired with my camera.

00:36:36.960 --> 00:36:45.430
And when I go to the print dialog,
if the system, yes, and

00:36:46.160 --> 00:36:52.780
As you see, a new thing added to printing
is the automatic soft proofing.

00:36:53.210 --> 00:36:55.720
My chosen profile was
a monochrome printer,

00:36:55.720 --> 00:37:00.540
and what I do is I soft-proof
it in the print preview,

00:37:00.540 --> 00:37:04.070
which is in addition to
previous print previews,

00:37:04.070 --> 00:37:06.710
which mostly were concerned
with the page layout.

00:37:06.720 --> 00:37:13.380
I can switch between the unmodified
image and the soft-proof image.

00:37:13.380 --> 00:37:18.000
So this is the first example
of using Quartz Filter.

00:37:18.000 --> 00:37:20.620
The soft-proofing is
implemented using soft-proofing.

00:37:21.390 --> 00:37:23.730
Now, let's take a look at this image.

00:37:23.730 --> 00:37:25.810
As you can tell, it's very, very dark.

00:37:25.840 --> 00:37:30.000
So I wonder if there is something
that I could do about that.

00:37:30.080 --> 00:37:34.180
If you go and you open the
print dialog one more time,

00:37:34.180 --> 00:37:39.240
you will notice that on Panther,
we added a new PDE for ColorSync.

00:37:39.360 --> 00:37:45.270
And this PDE allows me to, first of all,
on the PostScript printer,

00:37:45.490 --> 00:37:51.140
to choose which option of color
matching I'm going to exercise.

00:37:51.140 --> 00:37:56.880
I can perform color matching on the
computer using the printer profile,

00:37:56.900 --> 00:38:02.210
or I can fall back on the traditional
matching in printing path.

00:38:02.710 --> 00:38:07.100
In addition to that,
I can apply quartz filters right before

00:38:07.100 --> 00:38:09.500
the job is going to be spooled into PDF.

00:38:09.500 --> 00:38:13.380
And not quite by coincidence,
I have a filter which

00:38:13.690 --> 00:38:18.650
I called lighter color here,
which I'm going to apply to this image

00:38:18.650 --> 00:38:21.180
before it's being spooled to PDF.

00:38:21.180 --> 00:38:24.730
And if I do that, and I preview...

00:38:26.440 --> 00:38:29.280
My image now,
I can see that it's much more

00:38:29.280 --> 00:38:34.740
readable and I would print rather
this image than the previous one.

00:38:36.290 --> 00:38:40.290
Let's make one more trip to the
print dialog and look at the

00:38:40.290 --> 00:38:43.600
last option in ColorSync PDE.

00:38:43.600 --> 00:38:46.940
As you saw at the bottom
of the Quartz filter menu,

00:38:46.940 --> 00:38:49.680
there is an option for
adding filters to printing.

00:38:49.680 --> 00:38:56.420
If I do that, the document is pulled into
PDF and sent with the OpenApple

00:38:56.420 --> 00:39:01.300
event to ColorSync Utility,
which opens it along with

00:39:01.300 --> 00:39:03.290
the filter inspector.

00:39:03.700 --> 00:39:06.620
As you see, I have several filters
existing on the system.

00:39:06.620 --> 00:39:12.720
And if I want to see what they do,
I simply check the preview checkbox.

00:39:12.720 --> 00:39:15.700
And as you see,
I can convert everything to blue tone.

00:39:15.700 --> 00:39:19.670
I can use the opposite of the filter
I applied in the previous example,

00:39:19.670 --> 00:39:21.460
which I call darker color.

00:39:21.460 --> 00:39:24.790
I can convert everything
to gray tone and so forth.

00:39:27.000 --> 00:39:32.080
As you see, I can add and remove filters,
but what I would like to

00:39:32.080 --> 00:39:37.470
concentrate on is the usage of
filters for color conversions.

00:39:37.480 --> 00:39:41.050
There are many different options
that I can set with defaults,

00:39:41.050 --> 00:39:44.950
but I don't think we have time
to go and examine all of these.

00:39:44.960 --> 00:39:49.330
So let's stick for now to using the
filters just for color conversion.

00:39:49.340 --> 00:39:52.810
The first thing which I can decide...

00:39:53.080 --> 00:39:58.750
Here is if I want to do all my
color correction on all objects

00:39:59.050 --> 00:40:03.000
in the document the same way,
or I want to do different color

00:40:03.070 --> 00:40:06.100
correction on different types of objects.

00:40:06.180 --> 00:40:10.260
The next thing is I can decide
how to use the rendering intent.

00:40:10.550 --> 00:40:14.320
If I leave it in the automatic setting,
the rendering intent from the

00:40:14.320 --> 00:40:15.830
original document will be used.

00:40:15.840 --> 00:40:20.710
If not, I can override it with my
choice of the rendering intent.

00:40:20.930 --> 00:40:25.390
Next, what I can do is to define
the intermediate transform,

00:40:25.390 --> 00:40:28.800
which I want to be applied
to my document or the object,

00:40:28.810 --> 00:40:29.810
depending on the setting.

00:40:29.820 --> 00:40:33.220
And in this pop-up,
you will see all the profiles

00:40:33.770 --> 00:40:38.000
available on your system,
which are appropriate to be used

00:40:38.000 --> 00:40:40.400
as an intermediate transform.

00:40:41.870 --> 00:40:46.400
And finally, I can convert the data
to a specified target.

00:40:46.450 --> 00:40:49.760
And in this case,
the list will be populated with all

00:40:49.760 --> 00:40:56.070
the profiles that are suitable for
destination of the color matching.

00:40:56.590 --> 00:41:00.640
So, as you saw,
ColorSync Utility was able

00:41:00.740 --> 00:41:04.020
to open a PDF document,
and indeed,

00:41:04.020 --> 00:41:08.820
it can open many different file formats,
including PDF and PostScript.

00:41:09.080 --> 00:41:15.480
And what I would like to do now is to
show you how I can use Quartz filters

00:41:15.480 --> 00:41:18.760
to color manage a PDF document.

00:41:19.800 --> 00:41:24.670
So, I selected this particular document,
which has all typical

00:41:24.680 --> 00:41:26.500
components of a PDF.

00:41:26.500 --> 00:41:30.460
I have text, I have vector graphics,
and I have images.

00:41:30.710 --> 00:41:41.490
In order to demonstrate that,
let me create some PDF.

00:41:41.490 --> 00:41:41.490
Oh, sorry.

00:41:48.200 --> 00:41:49.480
Let's run it.

00:41:49.480 --> 00:41:50.770
Filter.

00:41:50.770 --> 00:41:57.380
And where I will put all the settings
for this particular document.

00:41:57.380 --> 00:42:03.830
So, first thing which I would like
to do is perhaps to change the

00:42:03.830 --> 00:42:07.160
appearance of the graphics.

00:42:07.160 --> 00:42:11.800
What I will do, I will choose the blue
tone abstract profile,

00:42:11.960 --> 00:42:15.800
which, if I previewed it,
changed quite a bit of the

00:42:15.800 --> 00:42:18.110
appearance of the graphics.

00:42:18.200 --> 00:42:19.910
This is the color
component in this document.

00:42:19.910 --> 00:42:27.720
Now, I don't want to leave the images,
which are really very vibrant in color.

00:42:27.720 --> 00:42:30.510
So, what I will do,
I will choose a little bit

00:42:30.570 --> 00:42:33.280
different correction for the images.

00:42:33.280 --> 00:42:36.550
And in this case, I will use the sepia.

00:42:36.550 --> 00:42:39.700
As you see,
my original document changed very

00:42:39.890 --> 00:42:44.650
dramatically from the original,
but just by a few mouse clicks.

00:42:44.660 --> 00:42:48.180
So,
what I see now that I haven't noticed,

00:42:48.200 --> 00:42:53.000
before that I have a little text in
the headline in the yellow color.

00:42:53.000 --> 00:42:55.580
And since I wanted to use
as few colors as possible,

00:42:55.580 --> 00:43:00.530
I think I can take care of this text by
applying some other transform to text.

00:43:00.530 --> 00:43:05.560
And the rest of the text on
this page is black and white.

00:43:05.560 --> 00:43:08.700
So, I will use the gray
tone abstract profile.

00:43:08.700 --> 00:43:12.180
And as you see now,
I have only a few colors on this page.

00:43:12.180 --> 00:43:14.910
And indeed,
this is what I wanted to do to it,

00:43:14.910 --> 00:43:16.380
to this document.

00:43:16.380 --> 00:43:18.180
So, now I'm ready to apply this text.

00:43:18.200 --> 00:43:20.670
filter and save it.

00:43:21.140 --> 00:43:24.440
When I take the last final
look at my new document,

00:43:24.440 --> 00:43:30.770
I think that the image is perhaps
a little bit too saturated.

00:43:30.800 --> 00:43:33.380
So let me try to change
that a little bit,

00:43:33.380 --> 00:43:36.500
and I'll go and select
the images one more time,

00:43:36.500 --> 00:43:39.260
and I'll use a custom transform.

00:43:39.260 --> 00:43:46.910
And if I lower the saturation,
the result has changed even more.

00:43:46.940 --> 00:43:50.920
And this is the format
that I like to save,

00:43:51.010 --> 00:43:56.850
and ColorSync utility allows me to
save it in many different file formats.

00:43:56.900 --> 00:44:00.140
I can save it in most of
the known bitmap formats,

00:44:00.210 --> 00:44:04.130
but also I can export it, for example,
to PostScript.

00:44:04.140 --> 00:44:06.190
So let me do that.

00:44:06.240 --> 00:44:07.390
And...

00:44:09.000 --> 00:44:14.760
And now I can save my document
I started with by applying all

00:44:14.760 --> 00:44:19.040
the filters that I showed you,
but I can also just save this

00:44:19.240 --> 00:44:24.140
document for some other situation when
I want to start with the original.

00:44:24.140 --> 00:44:25.440
So I'll simply revert.

00:44:25.480 --> 00:44:31.550
And, whoops, didn't revert.

00:44:36.180 --> 00:44:39.960
Not quite,
because the top is still duotone.

00:44:39.960 --> 00:44:43.340
Sorry, I must have... Oh, no,
I see what's happening.

00:44:43.340 --> 00:44:44.810
I was applying the filter all the time.

00:44:44.820 --> 00:44:48.860
Okay, so this document came
to this original form,

00:44:48.900 --> 00:44:54.000
and now if I go and look for my new
document in the PostScript format

00:44:54.160 --> 00:44:59.410
and I open it with ColorSync utility,
you can compare the results of

00:44:59.410 --> 00:45:04.880
applying a filter and changing quite
dramatically the appearance of it.

00:45:05.150 --> 00:45:09.620
Looks like my demo didn't... I forgot
about one step that I should have saved

00:45:09.620 --> 00:45:13.240
the last adjustment of the images,
but you have an idea what

00:45:13.240 --> 00:45:15.140
can be done with the filters.

00:45:15.140 --> 00:45:17.880
And this concludes my talk
on ColorSync and Quartz,

00:45:17.880 --> 00:45:20.130
so thank you very much
for your attention,

00:45:20.130 --> 00:45:21.830
and it's all yours, David.

00:45:21.840 --> 00:45:22.440
Great, great.

00:45:26.700 --> 00:45:27.320
Great job, Luke.

00:45:27.320 --> 00:45:30.750
So, as you know,
Luke was showing ColorSync Utility

00:45:30.750 --> 00:45:34.460
and showing the new filters
capability of ColorSync Utility.

00:45:34.460 --> 00:45:36.140
We have some other
changes in there as well,

00:45:36.140 --> 00:45:38.460
so I'd like to use this
opportunity to speak about them.

00:45:38.460 --> 00:45:40.630
First of all,
ColorSync Utility is now the new

00:45:40.680 --> 00:45:42.530
home for the ColorSync preferences.

00:45:42.560 --> 00:45:45.780
We've added the filter support,
which Luke just demonstrated.

00:45:45.780 --> 00:45:49.520
We have some administration features,
which allows an administrator

00:45:49.520 --> 00:45:52.480
user to specify the profiles
that can be used by default by

00:45:52.490 --> 00:45:54.440
other users on the same machine.

00:45:55.490 --> 00:45:58.500
Also, we have profile first aid
and some new 3D view options.

00:45:58.500 --> 00:46:01.940
Let me just take this opportunity
to demonstrate these real quickly.

00:46:01.940 --> 00:46:05.180
So, if we can go over to
demo machine number two,

00:46:05.180 --> 00:46:05.920
please.

00:46:05.940 --> 00:46:07.330
Okay.

00:46:08.240 --> 00:46:12.460
So I'm just going to launch in the
new ColorSync utility on Panther.

00:46:12.560 --> 00:46:13.230
Let me hide this.

00:46:13.250 --> 00:46:18.280
And as you can see now,
the ColorSync preferences are now here.

00:46:18.280 --> 00:46:19.850
They used to be in the
system preferences,

00:46:19.890 --> 00:46:20.800
and now they're here.

00:46:20.800 --> 00:46:25.090
So ColorSync utility, more than ever,
is now the one-stop shopping for

00:46:25.260 --> 00:46:27.410
all ColorSync-related settings.

00:46:29.260 --> 00:46:33.240
One thing to be aware of is, for example,
a lot of applications like to be able

00:46:33.370 --> 00:46:37.550
to provide a button in their UI to send
users to the ColorSync preferences.

00:46:37.550 --> 00:46:40.540
This was accomplished
in the past via an API,

00:46:40.540 --> 00:46:42.980
CM Launch ColorSync Preferences.

00:46:42.980 --> 00:46:44.720
This API will still work on Panther.

00:46:44.720 --> 00:46:48.720
Instead of launching system preferences,
it will now launch ColorSync utility.

00:46:50.740 --> 00:46:53.710
One of the other features that
we've always evangelized is

00:46:53.820 --> 00:46:56.780
ColorSync Profile First Aid.

00:46:56.810 --> 00:46:59.990
I always like to mention this because
it's a great utility that developers

00:46:59.990 --> 00:47:03.400
should run on any profiles they ship
with their applications or that their

00:47:03.400 --> 00:47:07.750
applications create to make sure
that they are valid ICC profiles.

00:47:08.010 --> 00:47:09.760
Similarly,
if you ever come across any bad

00:47:09.760 --> 00:47:14.320
profiles that are not correctly
flagged by ColorSync Profile First Aid,

00:47:14.380 --> 00:47:18.150
feel free to send them to us and
we'll add more tests in the future.

00:47:18.820 --> 00:47:22.170
The last thing I wanted to show in
ColorSync Utility is some new things

00:47:22.170 --> 00:47:23.980
we've added to the profile viewer.

00:47:23.980 --> 00:47:26.940
This is some fun stuff that
we've added to make viewing

00:47:27.180 --> 00:47:29.100
of profiles more interesting.

00:47:29.100 --> 00:47:32.300
So as before,
we were using OpenGL in order to take

00:47:32.300 --> 00:47:36.700
all the content of an ICC profile
and show it in three dimensions.

00:47:36.700 --> 00:47:40.480
So we can look at it and spin it around,
zoom in, zoom out.

00:47:41.030 --> 00:47:43.530
What we've added now is a new
contextual menu on this so

00:47:43.740 --> 00:47:45.190
that you can add more options.

00:47:45.190 --> 00:47:47.720
For example,
instead of just showing it in LAB space,

00:47:47.740 --> 00:47:50.950
you can see it in LUV space,
if that's your favorite space.

00:47:50.960 --> 00:47:54.390
Or you can see it in YXY space,
which is kind of neat.

00:47:54.390 --> 00:47:57.030
Usually people see XY plots from above.

00:47:57.150 --> 00:48:00.250
It's always kind of neat
to see it from the sides,

00:48:00.340 --> 00:48:00.940
too.

00:48:03.020 --> 00:48:06.890
One of the other features we added was,
let me go back to LAB space,

00:48:06.890 --> 00:48:08.670
is the ability,
this has been often requested,

00:48:08.750 --> 00:48:11.440
the ability to compare the
gamuts of two profiles.

00:48:11.440 --> 00:48:14.700
We've accomplished that in a very simple,
elegant way.

00:48:14.700 --> 00:48:17.890
What we do now is we have a
contextual menu that allows us

00:48:17.890 --> 00:48:19.990
to hold a profile for comparison.

00:48:20.000 --> 00:48:22.680
So let's say I want to take this
generic RGB profile and compare

00:48:22.770 --> 00:48:25.820
it against the other profiles
that are installed in the system.

00:48:25.820 --> 00:48:29.000
All I do is command-click,
select hold for comparison,

00:48:29.000 --> 00:48:31.640
and you can see it kind
of changes slightly.

00:48:32.430 --> 00:48:35.440
What that is is an indication that
now as I switch to other profiles,

00:48:35.440 --> 00:48:38.830
we can see how the generic
RGB profile compares to it.

00:48:38.890 --> 00:48:42.020
So for example,
I can go to the display profile and

00:48:42.020 --> 00:48:44.580
see the two of them next to each other.

00:48:44.580 --> 00:48:45.550
Let me zoom it in a bit.

00:48:45.580 --> 00:48:49.730
And you can see the overlap
between the two color spaces.

00:48:54.510 --> 00:48:57.840
So here you can see all of our WebSafe
profiles as points and how they compare

00:48:57.840 --> 00:48:59.840
to the outline of the other profile.

00:48:59.840 --> 00:49:03.740
You see the sepia tone profile,
which is kind of cool to look at in 3D.

00:49:05.320 --> 00:49:08.280
So that's one of the key
features that we've added.

00:49:08.410 --> 00:49:10.630
So let me go back to my slides.

00:49:17.290 --> 00:49:21.040
So it's interesting that the last
thing I was showing was ColorSync

00:49:21.100 --> 00:49:22.710
using OpenGL to show profiles.

00:49:22.720 --> 00:49:26.540
Well, there's another way that you can
integrate ColorSync and OpenGL together,

00:49:26.540 --> 00:49:29.450
and that is to be able to do
real-time color correction and

00:49:29.760 --> 00:49:32.990
enhancement of video real-time.

00:49:33.000 --> 00:49:36.280
And this is something we showed for
the first time last year at WWDC.

00:49:36.280 --> 00:49:39.500
I want to refresh what we spoke
about then and also tell you about

00:49:39.500 --> 00:49:42.840
some of the new APIs we've added to
ColorSync to make it easier for you

00:49:42.840 --> 00:49:45.120
to do this in your own applications.

00:49:45.880 --> 00:49:48.610
So for a bit of review,
the basic idea is to be able to provide

00:49:48.690 --> 00:49:51.800
real-time color correction of video,
which has been something in the

00:49:51.800 --> 00:49:54.590
past that's only been able to be
accomplished on very high-end hardware.

00:49:54.600 --> 00:49:58.800
And now we can do that today on desktop
machines because we have very advanced

00:49:58.800 --> 00:50:00.360
hardware available on video cards.

00:50:02.270 --> 00:50:04.310
Modern video cards,
some of them have support for

00:50:04.390 --> 00:50:06.010
per-pixel 3D texture lookup.

00:50:06.100 --> 00:50:10.610
And these are available on
NVIDIA GeForce TI cards and also

00:50:10.610 --> 00:50:13.140
on ATI Radeon 9000 series cards.

00:50:13.160 --> 00:50:18.320
And by loading into these tables
color correction transformations,

00:50:18.330 --> 00:50:20.540
we can actually accomplish
real-time color correction.

00:50:20.560 --> 00:50:24.400
The great thing about this is it actually
is a great story because it shows the

00:50:24.400 --> 00:50:28.760
integration between all the graphics
technologies available on Mac OS X.

00:50:28.760 --> 00:50:31.880
Because what we're doing is
we're combining the advantages

00:50:31.900 --> 00:50:35.090
and powers of ColorSync,
OpenGL, Quartz, and QuickTime,

00:50:35.210 --> 00:50:36.400
all in one example.

00:50:36.400 --> 00:50:40.130
The basic premise is that we want
to be able to play QuickTime content

00:50:40.230 --> 00:50:42.240
onto a Quartz OpenGL surface.

00:50:42.240 --> 00:50:46.200
And attached to that surface will be
a 3D texture that's been built from

00:50:46.200 --> 00:50:48.340
a ColorSync ColorWorld reference.

00:50:50.580 --> 00:50:53.220
In order to make this easier for
your applications to achieve this,

00:50:53.220 --> 00:50:55.150
we've added some new API to ColorSync.

00:50:55.180 --> 00:50:58.100
The first is a new
API called CM Make Profile.

00:50:58.120 --> 00:51:00.890
And this API is useful in several ways.

00:51:00.940 --> 00:51:03.380
First of all, you can use it to create
abstract profiles,

00:51:03.380 --> 00:51:06.180
which can be used for doing
hue rotation or contrast or

00:51:06.180 --> 00:51:07.620
other things like sepia tone.

00:51:07.620 --> 00:51:11.980
You can also be used to
make standard RGB profiles,

00:51:11.980 --> 00:51:15.180
such as profiles for NTSC standards
and other standard color spaces.

00:51:16.150 --> 00:51:19.430
So it's a general-purpose function
for creating profiles given

00:51:19.450 --> 00:51:21.830
a CFDictionary of attributes.

00:51:21.880 --> 00:51:23.530
It's a very simple function to use.

00:51:23.550 --> 00:51:25.820
I'll show it a little
bit later in one example.

00:51:25.820 --> 00:51:31.240
The other function we provided is
an API called CW Fill Lookup Table.

00:51:31.240 --> 00:51:34.760
And what this function does is takes
a ColorSync color world reference

00:51:34.800 --> 00:51:38.730
and fills in a table that is suitable
for being loaded up to a video card.

00:51:41.670 --> 00:51:45.630
So let me give an example of
using our CM Make Profile API.

00:51:45.740 --> 00:51:48.630
Again, as I mentioned before,
the way the CM Make Profile API works

00:51:48.630 --> 00:51:52.370
is you pass in a profile to modify
and a dictionary of attributes

00:51:52.450 --> 00:51:57.040
that will tell ColorSync how to
modify and create that profile.

00:51:57.710 --> 00:51:59.840
In this case,
we want to create an abstract profile

00:52:00.170 --> 00:52:04.320
that will rotate all the colors in a
color space by a specific hue angle.

00:52:04.320 --> 00:52:07.540
So this function here that I've outlined,
you pass in a profile

00:52:07.630 --> 00:52:10.060
and you pass in a float,
which is the angle of rotation.

00:52:10.060 --> 00:52:13.620
So what I want to do is build up
a dictionary with key-value pairs.

00:52:13.620 --> 00:52:16.750
The first key-value pair is
going to be the key proc,

00:52:16.750 --> 00:52:18.620
which is the callback proc.

00:52:18.660 --> 00:52:22.940
And then I need to give, as the value,
the address of a function,

00:52:22.940 --> 00:52:25.780
which in this case is the
function myLabToLab proc.

00:52:26.550 --> 00:52:30.220
Well, CF doesn't have,
Core Foundation does not have a way

00:52:30.240 --> 00:52:32.310
to pass an address as a CF type.

00:52:32.360 --> 00:52:36.830
So what we do instead is we take that
address and coerce it to an SN64 and

00:52:36.830 --> 00:52:41.820
then create a CF integer number for that
integer and put that in the dictionary.

00:52:41.820 --> 00:52:46.170
The reason why we use an N64 is so that
way the same code will work unaltered

00:52:46.170 --> 00:52:49.040
under 64-bit addressing in the future.

00:52:51.580 --> 00:52:54.800
Similarly, the other thing we need to add
to the dictionary is a refcon,

00:52:54.800 --> 00:52:58.700
where we could provide a pointer to a
structure of interesting parameters.

00:52:58.700 --> 00:53:00.660
In this case,
the parameter is not very interesting.

00:53:00.660 --> 00:53:03.460
It's just the address of a float
value for the angle to rotate.

00:53:03.460 --> 00:53:04.880
But the idea is the same.

00:53:04.880 --> 00:53:09.220
We take the address of the angle,
we coerce it to a 64-bit integer,

00:53:09.220 --> 00:53:12.620
and add that to the dictionary
with the key refcon.

00:53:14.390 --> 00:53:16.670
Once we've created the dictionary,
we call cmMakeProfile,

00:53:16.820 --> 00:53:18.210
and that does all the work.

00:53:18.300 --> 00:53:21.240
What that API then does is
it unpacks the dictionary,

00:53:21.240 --> 00:53:23.980
gets the refcon and the
callback proc out of it,

00:53:23.980 --> 00:53:27.850
and calls that proc repeatedly for
all the possible values in order

00:53:27.850 --> 00:53:29.290
to build the abstract profile.

00:53:29.290 --> 00:53:31.920
This is a very, very easy way to create
an abstract profile.

00:53:31.920 --> 00:53:34.880
Once they're done,
the function does a little cleanup,

00:53:34.880 --> 00:53:38.050
but perhaps what would be slightly
interesting to look at is what

00:53:38.060 --> 00:53:39.930
our lab-to-lab proc looks like.

00:53:40.040 --> 00:53:41.970
This is a very simple callback proc.

00:53:41.970 --> 00:53:44.840
What it takes as parameters
are pointers to L,

00:53:44.840 --> 00:53:48.160
A, and B values, and a refcon, of course.

00:53:48.160 --> 00:53:51.380
The function's responsibility
is to take those values,

00:53:51.380 --> 00:53:54.970
look at the initial values,
and alter them and return the new values,

00:53:54.970 --> 00:53:56.980
and that value will be
used in the profile.

00:53:56.980 --> 00:53:59.310
This function is very simple.

00:53:59.410 --> 00:54:03.080
All it does is take the initial
AB coordinates and rotates

00:54:03.430 --> 00:54:04.820
them by the angle provided.

00:54:07.580 --> 00:54:11.110
The other code snippet I wanted
to show was an example of using

00:54:11.110 --> 00:54:14.270
the new CWFillLookupTexture API.

00:54:14.630 --> 00:54:17.730
Again, this function I'm describing here
is a function that will make a

00:54:17.840 --> 00:54:23.990
3D texture given three profiles:
a source profile, an abstract profile,

00:54:23.990 --> 00:54:28.490
for example,
one that we created using the

00:54:28.490 --> 00:54:28.490
hue rotation code earlier,
and a destination profile.

00:54:28.770 --> 00:54:30.800
In order to do that, first of all,
we need to create a color world.

00:54:30.800 --> 00:54:31.840
I haven't shown that here.

00:54:31.840 --> 00:54:34.090
There's other examples for
how to create color worlds,

00:54:34.090 --> 00:54:36.490
but I've just, in place of that,
put in a function to

00:54:36.490 --> 00:54:37.630
create a color world.

00:54:37.640 --> 00:54:40.320
Once you have a color world,
we need to call the

00:54:40.530 --> 00:54:43.000
CW fill lookup texture,
call twice.

00:54:43.000 --> 00:54:46.010
The first time we call it,
all we need to do is determine the size

00:54:46.040 --> 00:54:49.030
of the data that it's going to require,
given the number of grid

00:54:49.030 --> 00:54:50.400
points that we desire.

00:54:51.520 --> 00:54:54.640
Once we get back the size,
we allocate the memory of that size

00:54:54.640 --> 00:54:58.030
and then call ColorSync CW fill
lookup texture to populate that

00:54:58.200 --> 00:55:00.210
table with the appropriate values.

00:55:00.240 --> 00:55:03.720
Then there's existing code snippets,
which we will provide in order

00:55:03.720 --> 00:55:06.660
to show you how to apply that
texture to an OpenGL surface,

00:55:06.660 --> 00:55:08.160
but it's fairly trivial.

00:55:10.380 --> 00:55:13.460
So all that's good to see on the screen,
but perhaps the best thing to

00:55:13.460 --> 00:55:17.060
do is to whet your appetite and
show you a brief example of how

00:55:17.060 --> 00:55:19.180
this works in a real live demo.

00:55:19.180 --> 00:55:21.800
So if I go back to demo two, please.

00:55:26.010 --> 00:55:30.080
So what I have here is an example
application called ColorWorld.

00:55:30.080 --> 00:55:31.340
Excuse the pun.

00:55:31.480 --> 00:55:33.860
And what I can do with this,
in addition to opening images,

00:55:33.860 --> 00:55:35.940
is open up movies.

00:55:41.170 --> 00:55:44.300
And then what I can do is I can
bring up a little inspector window,

00:55:44.300 --> 00:55:48.010
which allows me to show what profiles
I'm going to be applying to that window.

00:55:48.160 --> 00:55:49.860
I have four profiles to choose from.

00:55:49.860 --> 00:55:55.620
I can specify source, destination,
abstract, and proofing profiles.

00:55:55.820 --> 00:55:59.180
Today I'm just going to show you a little
bit about the source and destination.

00:55:59.220 --> 00:56:02.870
If I know that this profile
would be more appropriate for

00:56:02.870 --> 00:56:05.800
an sRGB profile for this movie,
I can just change the source profile,

00:56:05.800 --> 00:56:09.700
and we can already see the difference
between the left half and the right half.

00:56:09.830 --> 00:56:12.100
But this is not really
all that interesting.

00:56:12.100 --> 00:56:18.370
Let's start playing the movie and start
putting an abstract profile in between.

00:56:19.360 --> 00:56:22.410
And what you can see already is
that we can start rotating the hue,

00:56:22.470 --> 00:56:26.140
and we're all doing this real time,
or we can adjust the saturation down.

00:56:26.160 --> 00:56:31.030
So let's say we want to bring the
saturation down or bring it up.

00:56:32.290 --> 00:56:34.920
So as you know,
this is the trailer for finding Nemo.

00:56:35.180 --> 00:56:38.780
And what I want to use is I want to
use this application as an example for

00:56:38.780 --> 00:56:40.530
how to make it easier to find Nemo.

00:56:40.700 --> 00:56:44.460
So what we're going to do is I'm going
to desaturate this image way down,

00:56:44.580 --> 00:56:48.520
but then what I'm going to do is I'm
going to limit it to only desaturate

00:56:48.600 --> 00:56:50.240
the colors that aren't Nemo.

00:56:50.270 --> 00:56:51.640
So let's see if I can
get these colors right.

00:56:51.640 --> 00:56:53.760
Oh, I've got it backwards.

00:56:54.280 --> 00:56:56.430
So now you can see everything in
the image is very desaturated,

00:56:56.480 --> 00:56:57.790
but Nemo still looks nice and bright.

00:56:58.000 --> 00:57:00.280
So now I can go and-- I could
have been doing this live,

00:57:00.280 --> 00:57:02.700
I suppose,
but it's hard when he's moving.

00:57:02.800 --> 00:57:06.930
So now I have an example
of the application.

00:57:07.400 --> 00:57:10.790
showing real-time color
correction of video content,

00:57:10.790 --> 00:57:14.490
doing selective,
very complex abstract profile generation,

00:57:14.490 --> 00:57:15.800
and it's all very responsive.

00:57:15.800 --> 00:57:19.360
I can change Nemo's hue as well.

00:57:22.600 --> 00:57:26.200
I can go back and just...
Disney Pictures presents

00:57:26.200 --> 00:57:27.760
a Pixar animation.

00:57:27.760 --> 00:57:29.240
So that gives you an idea.

00:57:29.240 --> 00:57:32.860
So hopefully this inspires
you guys to add 3D hardware

00:57:32.860 --> 00:57:36.900
texture support to support color
management in your applications.

00:57:41.600 --> 00:57:42.500
So back to slides, please.

00:57:42.500 --> 00:57:50.240
So one of the next things I'd like
to talk about is display calibration.

00:57:50.240 --> 00:57:55.120
One of the features that ColorSync has
provided in the past on Mac OS X is

00:57:55.120 --> 00:57:58.320
the ability for the users not
only to have automatic profiles

00:57:58.320 --> 00:58:01.480
generated for their displays,
but also for users to calibrate their

00:58:01.560 --> 00:58:04.440
own displays in an easy-to-use fashion.

00:58:04.440 --> 00:58:08.200
This was achieved by users going
to the display preferences in

00:58:08.200 --> 00:58:12.120
the system preferences UI and
clicking on the calibrate button.

00:58:12.120 --> 00:58:14.890
In the past,
that calibrate button would simply

00:58:14.890 --> 00:58:16.820
launch the Apple calibrator.

00:58:16.840 --> 00:58:19.420
Third-party calibrators were supported,
obviously,

00:58:19.420 --> 00:58:21.860
but they were not integrated into
the system in the same fashion.

00:58:21.860 --> 00:58:26.480
What I'd like to talk about today
is adding support for third-party

00:58:26.480 --> 00:58:29.220
calibrators into this architecture.

00:58:29.220 --> 00:58:31.320
This is very, very simple to do.

00:58:31.320 --> 00:58:34.650
All you do is you build your
Carbon or Cocoa calibrator application

00:58:34.750 --> 00:58:35.880
the same way you have before.

00:58:35.880 --> 00:58:37.490
You just need to make
a few small changes.

00:58:37.500 --> 00:58:40.320
One is there is a key you
can add to your info.png.

00:58:40.440 --> 00:58:41.260
This is the key you can
add to your info.png.

00:58:41.260 --> 00:58:41.420
This is the key you can
add to your info.png.

00:58:41.420 --> 00:58:43.960
This key is the
CS display calibrator key,

00:58:43.960 --> 00:58:46.280
and that tells ColorSync
that your application is,

00:58:46.280 --> 00:58:47.640
in fact, a display calibrator.

00:58:47.640 --> 00:58:52.920
Second,
there is a new optional property that's

00:58:52.920 --> 00:58:56.480
associated with the open application
that your application will receive.

00:58:56.480 --> 00:59:01.220
This property will be sent
to tell your application what

00:59:01.220 --> 00:59:02.550
display to be calibrated.

00:59:04.180 --> 00:59:06.110
Third,
you need to install your calibrator

00:59:06.110 --> 00:59:10.100
or a SIM link to your calibrator in a
standard location so that we can find it.

00:59:10.220 --> 00:59:13.100
That location is library
ColorSync calibrators.

00:59:13.230 --> 00:59:15.100
And again,
just to get you started on this,

00:59:15.100 --> 00:59:19.360
we have an example calibrator that's
installed in the system that's very

00:59:19.360 --> 00:59:21.100
easy to use as a starting point.

00:59:21.100 --> 00:59:26.100
Let me give a quick demo of this to
show you what we're talking about.

00:59:26.100 --> 00:59:28.600
Back to demo two, please.

00:59:29.190 --> 00:59:30.740
So first of all,
let me go and show you on the

00:59:30.850 --> 00:59:36.500
system that if you go into Panther,
Developer, Examples, ColorSync,

00:59:36.530 --> 00:59:39.540
we have a new project in
here called Demo Calibrator.

00:59:39.540 --> 00:59:43.750
And we have all the sources in here,
and it's a good example for how

00:59:43.750 --> 00:59:46.200
to do assistant-type UI in Cocoa.

00:59:46.200 --> 00:59:50.970
And it has all the basic stuff you need
to do in order to support the property

00:59:51.040 --> 00:59:55.640
list entry and the InfoP list entry
and the custom Apple event correctly.

00:59:56.160 --> 00:59:59.060
We already have the
calibrator already pre-built,

00:59:59.270 --> 01:00:02.380
and what I've done is I've,
instead of getting things set up,

01:00:02.460 --> 01:00:06.090
is I've actually installed a
SIM link to that calibrator in

01:00:06.340 --> 01:00:09.750
system library ColorSync calibrators.

01:00:09.800 --> 01:00:14.560
So this would be what your calibration
app would want to do as well.

01:00:14.580 --> 01:00:18.390
What that now means is if we go
to the system preference and click

01:00:18.470 --> 01:00:23.100
on the display's color settings,
if we now click on the calibrate button,

01:00:23.100 --> 01:00:25.080
there's a new dialog that appears.

01:00:25.080 --> 01:00:27.570
That allows you... It allows
the user to choose which of the

01:00:27.570 --> 01:00:28.960
installed calibrators to be used.

01:00:29.020 --> 01:00:33.270
So just to complete the example,
I can click on the Demo Calibrator,

01:00:33.270 --> 01:00:36.540
click Calibrate, and it'll launch it,
and you can see what this

01:00:36.540 --> 01:00:37.870
Demo Calibrator's all about.

01:00:37.880 --> 01:00:39.490
It's actually a very simple calibrator.

01:00:39.520 --> 01:00:42.510
All it does is take the profile
that was already for the display

01:00:42.510 --> 01:00:45.510
and ask the user to rename it
and saves it as a new profile.

01:00:45.540 --> 01:00:48.040
So not much of a calibration,
but it's a good starting

01:00:48.040 --> 01:00:49.060
point for your app.

01:00:49.120 --> 01:00:53.250
So let me go back and quit.

01:00:53.750 --> 01:00:56.320
Since I'm here, I'd also like to take the
opportunity to show some new

01:00:56.470 --> 01:00:59.430
features we have in our calibrator,
because we've made some

01:00:59.500 --> 01:01:02.240
important enhancements there
that I think you'd like to see.

01:01:02.240 --> 01:01:05.360
So if we go and calibrate
this calibrator,

01:01:05.530 --> 01:01:08.160
it looks very similar at the start.

01:01:08.410 --> 01:01:11.140
You might be able to tell
it's built in Cocoa now,

01:01:11.140 --> 01:01:15.820
but where the changes really show
up is if we turn on expert mode.

01:01:16.690 --> 01:01:19.500
Because now,
instead of showing the three apples,

01:01:19.500 --> 01:01:22.160
the red, green,
and blue apples side-by-side,

01:01:22.210 --> 01:01:24.900
we now have finer,
more advanced controls.

01:01:24.900 --> 01:01:27.400
What we have is the ability
to show a single patch and the

01:01:27.420 --> 01:01:30.510
ability to adjust the brightness
and the tint of those separately,

01:01:30.510 --> 01:01:32.460
which allows for much better control.

01:01:32.460 --> 01:01:36.300
The main reason for this is it's very
hard for users to adjust the blue gamma,

01:01:36.300 --> 01:01:39.320
because the blue is so much
less visible to the human eye.

01:01:39.340 --> 01:01:42.090
So this is a bit of
audience precipitation time,

01:01:42.090 --> 01:01:44.760
so if you guys can tell
me if that looks good.

01:01:44.760 --> 01:01:46.520
I think that looks pretty good.

01:01:46.640 --> 01:01:47.540
That looks pretty good to me so far.

01:01:47.540 --> 01:01:51.120
And then we can adjust the tint
around to make sure it looks neutral.

01:01:51.120 --> 01:01:53.280
What do you guys think?

01:01:53.360 --> 01:01:53.760
Does that look good?

01:01:55.610 --> 01:01:59.910
So that was the first change we made,
but then in addition we now

01:01:59.910 --> 01:02:01.600
allow for multiple steps.

01:02:01.600 --> 01:02:06.090
Instead of just adjusting the mid-tones,
we can now adjust the highlights,

01:02:06.100 --> 01:02:09.180
the shadows, and the dark shadows,
so you can get a really good

01:02:09.180 --> 01:02:14.990
calibration on LCD displays,
which have very complex gamma curves.

01:02:15.390 --> 01:02:19.500
So you can go through here and step
through this calibration process.

01:02:19.550 --> 01:02:23.490
And actually,
I should be calibrating the big screen,

01:02:23.490 --> 01:02:24.760
not the small screen.

01:02:24.790 --> 01:02:26.290
Anyhow, you got the idea.

01:02:26.300 --> 01:02:28.290
That one looks good.

01:02:30.810 --> 01:02:36.920
One of the other new advanced features is
we now also allow for the profile to be

01:02:37.010 --> 01:02:39.160
used by other users on the same machine.

01:02:39.160 --> 01:02:42.520
So as an admin user, you can say,
allow other users to

01:02:42.520 --> 01:02:43.380
use this calibration.

01:02:46.390 --> 01:02:47.800
And then we can save it.

01:02:47.840 --> 01:02:48.200
All done.

01:02:48.200 --> 01:02:52.360
So that's the new calibrator architecture
for third-party calibrators and

01:02:52.360 --> 01:02:54.090
a peek at our newest calibrator.

01:02:54.100 --> 01:02:57.040
So back to slides.

01:03:00.980 --> 01:03:04.500
So, as I said, I was saving something
called CIPS for last.

01:03:04.500 --> 01:03:05.180
And what does CIPS mean?

01:03:05.180 --> 01:03:07.130
Well, actually,
the name's probably going to change.

01:03:07.140 --> 01:03:09.770
But for now,
what CIPS stands for is Scriptable

01:03:10.050 --> 01:03:11.820
Image Processing System.

01:03:11.820 --> 01:03:15.320
And what I want to talk about today is
why we're doing something called CIPS,

01:03:15.320 --> 01:03:18.120
and what its features are,
how it's architected,

01:03:18.120 --> 01:03:19.500
and how you can use it.

01:03:21.530 --> 01:03:25.850
So what we noticed is that we
needed a common place to go to

01:03:25.850 --> 01:03:30.030
perform common operations on image
files in a scriptable manner.

01:03:30.040 --> 01:03:33.510
This was evidenced by the fact that
today we had kind of a mixed story.

01:03:33.520 --> 01:03:36.840
For example, we had ColorSync scripting,
which could do a lot of great

01:03:36.840 --> 01:03:40.520
ColorSync operations on images,
but it could not rotate or scale or

01:03:40.560 --> 01:03:43.180
convert images between file formats.

01:03:43.180 --> 01:03:46.660
We had image capture scripting,
which could rotate and scale,

01:03:46.660 --> 01:03:49.680
but it couldn't do color matching
or convert between formats.

01:03:50.160 --> 01:03:52.700
And then we had the preview application,
which could do everything.

01:03:52.700 --> 01:03:56.920
It could do rotation and conversion,
but it wasn't scriptable.

01:03:56.920 --> 01:04:01.050
So all this was saying to us that
we needed to have a single central

01:04:01.050 --> 01:04:05.530
place that would provide a tool for
scripters or batch processing in order

01:04:05.530 --> 01:04:07.840
to do common operations on images.

01:04:07.840 --> 01:04:11.480
So what are the features that we're
going after in the first release?

01:04:11.480 --> 01:04:13.640
Well, one of the features is
going to be a good name.

01:04:13.640 --> 01:04:14.500
That'll come later.

01:04:14.500 --> 01:04:18.790
The other features will be we
want to be able to read and write

01:04:18.800 --> 01:04:25.540
between common image file formats,
JPEG, variations of JPEG, TIFF, GIF,

01:04:25.550 --> 01:04:26.200
and PNG.

01:04:26.200 --> 01:04:29.500
We also wanted to support
basic image operations,

01:04:29.500 --> 01:04:31.260
such as rotate and flip and crop.

01:04:31.350 --> 01:04:35.140
And, of course, since this is a ColorSync
discussion today,

01:04:35.140 --> 01:04:37.420
we want to support proper
color management operations,

01:04:37.600 --> 01:04:41.640
embedding profiles, extracting profiles,
and matching between color spaces.

01:04:41.640 --> 01:04:45.580
We want to be able to support
between common metadata tags and

01:04:45.580 --> 01:04:47.470
support reading and writing of those.

01:04:47.500 --> 01:04:49.900
And also, we wanted to,
as a general rule,

01:04:49.900 --> 01:04:52.820
we wanted to preserve the fidelity
and content of the original

01:04:52.820 --> 01:04:54.040
document as much as possible.

01:04:56.100 --> 01:04:58.280
Of course,
this is just the beginning for this tool.

01:04:58.570 --> 01:05:00.880
There's lots of places where we
can go with it in the future.

01:05:00.880 --> 01:05:04.190
In the subsequent releases,
we're considering in the future adding

01:05:04.190 --> 01:05:09.000
support for more complex file formats
like multi-layer or multi-page formats

01:05:09.000 --> 01:05:14.000
and other more advanced image operations
such as blur or sharpen or enhance.

01:05:14.000 --> 01:05:17.580
Also,
the list of metadata tags that people

01:05:17.580 --> 01:05:23.000
are using is an always increasing number,
so we'd like to support more

01:05:23.000 --> 01:05:23.000
of those in the future as well.

01:05:23.690 --> 01:05:26.260
Here's the basic architecture
that we're working on.

01:05:26.410 --> 01:05:28.360
Currently,
it's implemented as a simple compiled

01:05:28.390 --> 01:05:30.100
tool that's installed in Userbin.

01:05:30.100 --> 01:05:32.090
It's called Userbin Cepts for now.

01:05:32.190 --> 01:05:34.370
And this is a tool that
links against Core Graphics,

01:05:34.460 --> 01:05:35.890
QuickTime, and ColorSync.

01:05:35.970 --> 01:05:39.060
It links against Core Graphics for
high-quality rotation and scaling.

01:05:39.350 --> 01:05:42.910
It links against QuickTime for
a wide variety of image file

01:05:42.910 --> 01:05:44.540
importing and exporting.

01:05:44.830 --> 01:05:49.250
And it links against ColorSync for
the best quality color management.

01:05:50.160 --> 01:05:53.300
It can operate on one file
or multiple files at a time.

01:05:53.450 --> 01:05:57.500
It can be used to both query
or modify images or profiles.

01:05:57.650 --> 01:06:02.320
Queries can either return properties
as simple text or can also return it

01:06:02.320 --> 01:06:05.100
in XML format for special operations.

01:06:05.100 --> 01:06:09.470
The actions can be used to modify
profiles or images in place

01:06:09.470 --> 01:06:13.900
or can also be used to modify
them to an output directory.

01:06:14.810 --> 01:06:17.250
So, next question is, well,
how can you use this?

01:06:17.330 --> 01:06:20.540
Well, it's a simple command line tool,
so there's lots of ways to use this.

01:06:20.540 --> 01:06:23.080
For example,
you can just go into Terminal and use it.

01:06:23.450 --> 01:06:25.640
However, it's also going to be
usable from AppleScript.

01:06:25.640 --> 01:06:28.530
We won't be showing that today,
but there's going to be an

01:06:28.530 --> 01:06:31.350
AppleScript veneer on top of SIPs,
which will create an

01:06:31.620 --> 01:06:34.390
AppleScript dictionary,
which will be very easy to use and

01:06:34.390 --> 01:06:36.540
to expose all this functionality.

01:06:37.600 --> 01:06:39.730
Also, it'll be available for
other scripting languages,

01:06:39.730 --> 01:06:42.260
any scripting language that
can support command line tools.

01:06:42.260 --> 01:06:46.000
And, of course,
it's also possible for you to call

01:06:46.000 --> 01:06:51.140
this tool from your own app by using
standard either CF or NS or AppKit or

01:06:51.140 --> 01:06:54.260
POSIX calls to launch executables.

01:06:54.260 --> 01:06:57.150
So,
let me give you a demonstration of this.

01:07:02.030 --> 01:07:02.360
Okay.

01:07:02.360 --> 01:07:05.190
So I'm going to start out in Terminal.

01:07:05.190 --> 01:07:08.450
And what I want to do first is
just going to type sips-help,

01:07:08.510 --> 01:07:10.540
just to give an idea of what we have.

01:07:10.540 --> 01:07:14.210
Eventually we need to have a man page,
but for now this is a good start.

01:07:14.230 --> 01:07:16.850
As you can see,
you can call it to basically do

01:07:16.970 --> 01:07:19.280
get properties or set properties.

01:07:19.280 --> 01:07:22.700
And in addition, on images,
there's several other actions

01:07:22.720 --> 01:07:26.390
that can be performed,
such as embedding profiles, rotating,

01:07:26.390 --> 01:07:28.660
flipping, cropping, you name it.

01:07:29.340 --> 01:07:31.490
So let's say, let's see,
let's try to think of some

01:07:31.490 --> 01:07:32.660
things we want to do here.

01:07:32.660 --> 01:07:35.600
I'm currently in a directory
that has a bunch of images in LS.

01:07:35.600 --> 01:07:39.410
Let's say I want to see all the
information about this image,

01:07:39.410 --> 01:07:40.180
Big Ben.

01:07:40.180 --> 01:07:49.740
So I can do sips-get
property all on Big Ben.

01:07:52.920 --> 01:07:55.540
And it quickly returns all the
information it was able to obtain.

01:07:55.540 --> 01:08:01.120
So the height and width of the image,
the DPI of the image,

01:08:01.220 --> 01:08:02.960
the model of the camera
that it was produced on.

01:08:02.960 --> 01:08:05.480
Here's another type of query I can do.

01:08:05.480 --> 01:08:08.910
Let's say I want to see which of all
these images have profiles in them.

01:08:08.910 --> 01:08:11.160
So I can just do SIPs.

01:08:11.300 --> 01:08:19.400
[Transcript missing]

01:08:19.690 --> 01:08:22.200
And this will show me the list of all
the images that are in this directory.

01:08:22.200 --> 01:08:24.600
Some of them have profiles,
some of them don't.

01:08:24.600 --> 01:08:27.520
But it gives you a good idea
of the kind of the way that you

01:08:27.520 --> 01:08:29.600
would use SIPs in actual usage.

01:08:29.600 --> 01:08:32.600
Well, let's go and look at this directory
and I'll see if I can come up with

01:08:32.670 --> 01:08:34.600
another example of how to use this tool.

01:08:34.600 --> 01:08:40.590
So let me go to my photos
directory and view it in icons.

01:08:41.370 --> 01:08:45.050
And I've got a bunch of images here,
and coincidentally,

01:08:45.060 --> 01:08:46.300
one of them is upside down.

01:08:46.400 --> 01:08:47.460
Gasp.

01:08:47.580 --> 01:08:49.950
So what I would like to do
is use SIPs to fix that.

01:08:50.070 --> 01:08:52.040
So what I'm going to
do is I'm going to do,

01:08:52.040 --> 01:08:53.090
let's see, which photo is it?

01:08:53.090 --> 01:08:54.680
It's Nevis' picture.

01:08:54.760 --> 01:09:07.410
So I'm going to do SIPs-Rotate180,
and I'm going to pass in

01:09:10.400 --> 01:09:19.610
And I'm going to make a copy of it and
I'll call it dash out to the-- oops.

01:09:28.710 --> 01:09:33.120
And we're done.

01:09:33.120 --> 01:09:36.520
So now if I go back to this
directory and the finder will update,

01:09:36.520 --> 01:09:39.890
and we have the new image
which has been rotated.

01:09:40.010 --> 01:09:42.340
So those are just some
very simple operations,

01:09:42.390 --> 01:09:43.780
and it's quite handy.

01:09:43.780 --> 01:09:47.870
However, there's some more advanced
things you could do as well.

01:09:47.940 --> 01:09:50.310
Let me go back and view
this in column mode.

01:09:50.540 --> 01:09:54.180
As you see, we have a bunch of
images in this directory.

01:09:54.280 --> 01:09:57.400
And what I'd like to do is to build
a web page that contains thumbnails

01:09:57.400 --> 01:10:00.860
of all these images along with the
information about these images.

01:10:00.860 --> 01:10:03.220
So what I've done is I've
created a simple script,

01:10:03.220 --> 01:10:05.630
in this case, this example,
using a Python.

01:10:05.630 --> 01:10:08.480
You could have done this
in any number of scripts,

01:10:08.480 --> 01:10:10.570
either shell scripting or
eventually we'll be able to do

01:10:10.580 --> 01:10:11.770
this in Apple script as well.

01:10:11.840 --> 01:10:15.200
But all this is is a simple, you know,
slightly more than one screen

01:10:15.270 --> 01:10:18.640
of text that will take a
parameter from the input,

01:10:19.020 --> 01:10:21.420
assume it's a directory,
and take all the images

01:10:21.420 --> 01:10:23.880
in that directory,
create thumbnails.

01:10:24.000 --> 01:10:27.380
Creating thumbnails is interesting
because that involves several operations.

01:10:27.380 --> 01:10:29.260
Nailing the image down
to a reasonable size,

01:10:29.270 --> 01:10:33.400
and in this case, converting them all to
JPEGs and converting them

01:10:33.550 --> 01:10:36.980
all to standard color space,
in this case, sRGB.

01:10:37.000 --> 01:10:38.640
Once it's done,
created all the thumbnails,

01:10:38.640 --> 01:10:42.600
it will then query each image --
let me actually start this going

01:10:42.600 --> 01:10:45.640
-- and produce a web page from it.

01:10:45.640 --> 01:10:48.820
So I've called this
script build info.jpg.

01:10:54.500 --> 01:11:03.770
image info web page,
and I'll pass in volumes, three, photos.

01:11:04.860 --> 01:11:06.850
So again, as I said before,
it's going to build thumbnails

01:11:06.950 --> 01:11:07.800
for all these images.

01:11:07.800 --> 01:11:09.820
And actually,
some of these images are pretty big,

01:11:09.820 --> 01:11:10.800
so it takes a bit.

01:11:10.830 --> 01:11:12.860
And then once it's done
creating the thumbnails,

01:11:12.860 --> 01:11:15.080
it's going to take each of
those images and query them and

01:11:15.170 --> 01:11:16.690
return information about them.

01:11:16.700 --> 01:11:18.860
So hopefully you can
read this well enough,

01:11:18.940 --> 01:11:21.510
but this is the web page
that it created and opened,

01:11:21.510 --> 01:11:25.370
and you can see all the photos along
with all the information about them,

01:11:25.370 --> 01:11:27.670
including what camera
it was created with,

01:11:27.670 --> 01:11:30.860
what the embedded profile is,
when the creation date is.

01:11:32.060 --> 01:11:34.720
So hopefully that'll inspire you
to create all sorts of other tools

01:11:34.720 --> 01:11:36.420
based on this foundation technology.

01:11:44.660 --> 01:11:46.660
So that's our discussion for the day.

01:11:46.660 --> 01:11:48.320
I think we have a really good story.

01:11:48.320 --> 01:11:51.730
I think now more than ever we have a
story where we're continuing to add new

01:11:51.730 --> 01:11:55.900
high-level functionality to ColorSync,
as well as increase the integration

01:11:55.900 --> 01:11:59.000
with the rest of the system so that
you get correct behavior by default.

01:11:59.000 --> 01:12:00.630
So I think if you had any
other words to wrap up,

01:12:00.630 --> 01:12:01.540
that would be great.