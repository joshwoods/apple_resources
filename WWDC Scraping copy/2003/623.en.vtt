WEBVTT

00:00:19.560 --> 00:00:22.060
Ladies and gentlemen,
please welcome Sal Soghoian,

00:00:22.060 --> 00:00:25.190
the AppleScript product
manager to the stage.

00:00:30.110 --> 00:00:32.270
Wow, this is a, whoa, okay.

00:00:32.410 --> 00:00:34.610
Let me adjust my voice.

00:00:34.760 --> 00:00:37.480
Yes, Sal is very thundering at times.

00:00:37.570 --> 00:00:38.170
How's that?

00:00:38.320 --> 00:00:39.150
Is that better?

00:00:40.120 --> 00:00:42.000
This is quite a response.

00:00:42.000 --> 00:00:47.800
It just confirms my gut instinct
that AppleScript's on fire again.

00:00:48.150 --> 00:00:52.540
Another year of AppleScript just
thundering forward.

00:00:52.540 --> 00:00:56.260
Because of the interest I can see a lot
of these faces I haven't seen before.

00:00:56.260 --> 00:01:00.220
So either you're in the wrong session.

00:01:01.570 --> 00:01:02.990
This is about bird watching, right?

00:01:03.000 --> 00:01:03.300
Okay.

00:01:03.300 --> 00:01:08.240
Or you're interested in some of
the core technologies that you

00:01:08.240 --> 00:01:10.800
haven't touched in Mac OS X before,
namely AppleScript.

00:01:10.800 --> 00:01:14.640
Your best friend in life is AppleScript.

00:01:16.570 --> 00:01:18.780
I must give you a legal warning up front.

00:01:18.780 --> 00:01:20.560
I'm required by law.

00:01:20.620 --> 00:01:23.450
It started in Wisconsin,
but I'm required by law to give

00:01:23.550 --> 00:01:25.300
you the following legal warning.

00:01:25.410 --> 00:01:27.840
AppleScript is the
cocaine of programming.

00:01:27.840 --> 00:01:32.180
One line and you'll be ours forever.

00:01:33.760 --> 00:01:39.000
So you have been warned,
resist as much as you can.

00:01:39.040 --> 00:01:42.800
Let me ask just a couple standard
questions to find out a sense

00:01:42.840 --> 00:01:46.060
about where you're at and see
if that kind of hopefully,

00:01:46.140 --> 00:01:50.330
please, please, matches up with my
idea about the session.

00:01:50.570 --> 00:01:53.140
How many of you are aware of AppleScript?

00:01:53.220 --> 00:01:54.660
We'll start with that one.

00:01:54.730 --> 00:01:56.170
So everybody, OK.

00:01:56.260 --> 00:01:58.670
How many of you are scripting?

00:01:58.840 --> 00:02:01.470
How many of you are scripting well?

00:02:03.310 --> 00:02:06.100
How many just kind of like jumped into
it because you had to do something

00:02:06.100 --> 00:02:08.660
and you heard you can do it but you
don't know how it worked and you just

00:02:08.770 --> 00:02:12.300
pieced it together and you banged
your head against the wall 20 times?

00:02:12.350 --> 00:02:13.200
Okay.

00:02:13.200 --> 00:02:16.120
That's how I learned too.

00:02:16.650 --> 00:02:19.290
I spent years and years pounding
my head against the wall going,

00:02:19.300 --> 00:02:22.850
"No, I guess that doesn't work."
And coercion I thought was just

00:02:22.850 --> 00:02:24.640
moving the matter to the other side.

00:02:24.840 --> 00:02:28.840
I didn't realize it was actually
applying to the code in the window.

00:02:29.100 --> 00:02:32.600
My original idea when I was talking
to Skip Levins about this session

00:02:32.600 --> 00:02:38.630
was to answer that need for a
quick indoctrination into the

00:02:38.770 --> 00:02:41.360
mystery secrets about AppleScript.

00:02:41.380 --> 00:02:44.010
Because a lot of people
get thrown into it.

00:02:44.030 --> 00:02:46.900
They are introduced to it in a
situation where they suddenly

00:02:46.950 --> 00:02:48.620
have to deliver some project.

00:02:48.620 --> 00:02:50.570
And they find a way that works.

00:02:50.650 --> 00:02:53.420
They find something that works for them.

00:02:53.420 --> 00:02:55.800
And it might not be the
best way to do something.

00:02:56.260 --> 00:03:00.910
They might be unaware of all the
different things that AppleScript can do.

00:03:00.940 --> 00:03:06.140
And so my aim with this session is
to give you a peek to the inside

00:03:06.140 --> 00:03:08.350
workings of a scripter's brain.

00:03:08.460 --> 00:03:14.310
And to turn you on to all the
hidden secrets that I've developed

00:03:14.310 --> 00:03:17.560
over the years about how to get up
to speed quickly with AppleScript.

00:03:17.640 --> 00:03:21.960
And I focus particularly on some
issues that are pertinent to what

00:03:22.040 --> 00:03:24.510
you do as a system administrator.

00:03:24.540 --> 00:03:26.220
I don't think I need those.

00:03:26.220 --> 00:03:30.210
Can I go to laptop, please?

00:03:31.290 --> 00:03:33.910
Essential AppleScript tools
and tips is what I call it.

00:03:34.120 --> 00:03:36.960
And for those that know me,
which is probably one or

00:03:36.960 --> 00:03:40.320
two people in the room,
this is the first time in seven

00:03:40.320 --> 00:03:41.660
years that I've done slides.

00:03:41.780 --> 00:03:47.900
So I was so impressed with some of the
slide stuff going on in the session,

00:03:47.900 --> 00:03:49.340
I had to get some together.

00:03:49.340 --> 00:03:54.180
And I'm not going to do all slides
because I like doing a lot of hands-on.

00:03:54.180 --> 00:03:55.720
I like showing you what is there.

00:03:55.720 --> 00:03:58.650
I like just, you know, Emerald Lagasse,
you know, you put stuff together and go,

00:03:58.650 --> 00:04:00.280
bam, you know, that's what I want to do.

00:04:01.000 --> 00:04:05.400
But I put together some slides
so we could organize some of

00:04:05.400 --> 00:04:07.420
the concepts behind this topic.

00:04:08.400 --> 00:04:08.770
That's it.

00:04:08.900 --> 00:04:09.390
You like that one.

00:04:09.460 --> 00:04:09.910
Introduction.

00:04:09.990 --> 00:04:10.340
Okay.

00:04:10.340 --> 00:04:15.670
Purpose of the session is to familiarize
those that are already sophisticated

00:04:15.750 --> 00:04:21.140
computer users like yourself with the
intricacies of a high-level language like

00:04:21.150 --> 00:04:24.450
AppleScript because it's very strange.

00:04:24.460 --> 00:04:27.430
It has some unique properties
about the way that it works

00:04:27.430 --> 00:04:29.020
and the way that it thinks.

00:04:29.020 --> 00:04:32.400
And I just wanted to help you
get across the bridge quickly.

00:04:32.400 --> 00:04:34.390
Does that sound like
the right thing to do?

00:04:34.400 --> 00:04:35.490
Yes.

00:04:36.430 --> 00:04:36.890
Grumble?

00:04:36.890 --> 00:04:38.190
Okay.

00:04:38.260 --> 00:04:38.560
All right.

00:04:38.760 --> 00:04:39.540
Plight, golf, clap.

00:04:39.620 --> 00:04:41.500
I like that.

00:04:41.530 --> 00:04:44.700
And we're going to focus on issues
like file setup and manipulation

00:04:44.700 --> 00:04:47.700
and the kind of things that you do.

00:04:47.890 --> 00:04:49.060
What is AppleScript?

00:04:49.060 --> 00:04:50.700
We'll start there.

00:04:50.950 --> 00:04:54.690
AppleScript is a peer to Aqua.

00:04:55.130 --> 00:04:58.130
Aqua is the graphic user
interface to the OS,

00:04:58.180 --> 00:05:01.720
and AppleScript is the language
user interface to the OS.

00:05:01.720 --> 00:05:03.470
I like to think about it in those terms.

00:05:03.510 --> 00:05:06.820
There's also another language
interface that's really low level,

00:05:06.820 --> 00:05:09.520
which is the UNIX interface
that you're familiar with,

00:05:09.520 --> 00:05:11.880
the terminal and shell
and that stuff too.

00:05:11.880 --> 00:05:17.620
But we also have the ability to
control most of the operating system,

00:05:17.680 --> 00:05:21.880
a lot of the applications that run on it,
and we can also talk, when I say we,

00:05:21.880 --> 00:05:26.340
I mean the royal we of AppleScript,
also have the ability to

00:05:26.430 --> 00:05:29.960
talk across networks and the
Internet and control applications,

00:05:29.960 --> 00:05:33.400
to query web services,
those kind of things.

00:05:33.400 --> 00:05:37.790
AppleScript has a very large
scope in the operating system,

00:05:37.790 --> 00:05:40.180
and it can be your best friend.

00:05:41.660 --> 00:05:45.130
We're going to look at the
AppleScript language itself.

00:05:45.220 --> 00:05:48.830
AppleScript is an English-like
language that sits on top of an

00:05:48.870 --> 00:05:51.610
architecture called AppleEvents.

00:05:51.700 --> 00:05:55.540
AppleEvents are messages that are sent
internally within the operating system

00:05:55.540 --> 00:05:59.520
that communicate between processes,
communicate between applications,

00:05:59.600 --> 00:06:01.350
communicate between networks.

00:06:01.390 --> 00:06:04.790
It's like emails being sent
between a bunch of people.

00:06:04.850 --> 00:06:08.370
So any action that you do in
the operating system usually has

00:06:08.370 --> 00:06:10.200
an AppleEvent attached to it.

00:06:10.260 --> 00:06:13.830
And we know this because we broke
AppleScript once and the whole OS stopped

00:06:13.930 --> 00:06:18.270
and everybody turned around and looked
at us and we had to do another build.

00:06:19.720 --> 00:06:21.540
I remember those days.

00:06:21.760 --> 00:06:26.160
But the AppleScript language itself
is an English-like language that is

00:06:26.160 --> 00:06:28.470
approachable by the average person.

00:06:28.470 --> 00:06:31.720
It gives you a quick way
to accomplish a task.

00:06:31.720 --> 00:06:33.650
You basically write what you think.

00:06:33.650 --> 00:06:36.650
Duplicate every file of the
startup disk whose name contains

00:06:36.650 --> 00:06:38.780
Smith Project to the folder name backup.

00:06:38.780 --> 00:06:40.930
That's actually a script.

00:06:40.970 --> 00:06:42.660
It's not just a concept.

00:06:42.690 --> 00:06:44.440
It's actually a script.

00:06:44.470 --> 00:06:47.630
And it's the principle behind
what AppleScript can do.

00:06:47.630 --> 00:06:50.420
You take the mind,
you overthink the thought,

00:06:50.480 --> 00:06:52.050
and you write it, and it should work.

00:06:52.060 --> 00:06:55.020
Most of the time.

00:06:55.320 --> 00:07:00.840
It targets scriptable applications
such as Microsoft Word,

00:07:00.840 --> 00:07:09.850
Excel, iTunes, just about every database,
Adobe Illustrator, Adobe InDesign,

00:07:09.850 --> 00:07:12.790
Photoshop, QuarkXPress.

00:07:12.900 --> 00:07:17.790
Dozens and dozens and dozens and
hundreds of applications are scriptable.

00:07:17.800 --> 00:07:21.390
They are ready to receive these
Apple events that occur when you

00:07:21.400 --> 00:07:25.910
write an English-like sentence that
gets translated into these messages.

00:07:26.000 --> 00:07:30.490
Those messages get sent to the
application and the application responds.

00:07:30.500 --> 00:07:35.690
We're going to also learn how do
you refer to scriptable items.

00:07:35.860 --> 00:07:37.000
This is a tough one.

00:07:37.000 --> 00:07:39.800
This is one of the big issues
that usually ties you up

00:07:39.800 --> 00:07:41.500
and really confuses you.

00:07:41.890 --> 00:07:46.570
Because there's five ways in the
operating system to identify an item.

00:07:46.700 --> 00:07:52.200
There's five different means to
have a file reference in Mac OS X.

00:07:52.200 --> 00:07:56.600
And AppleScript takes a certain one
of them and it supports all of them.

00:07:56.600 --> 00:07:58.850
And we're going to look at
that and take the mystery out

00:07:58.850 --> 00:08:03.280
of how do you use different
reference types with AppleScript.

00:08:03.300 --> 00:08:06.460
I saw somebody go, "Ah, ah, ah."

00:08:06.700 --> 00:08:08.040
Finally.

00:08:08.080 --> 00:08:12.710
And we're going to learn how to
use AppleScript to find items.

00:08:13.190 --> 00:08:16.560
AppleScript has incredible ability,
more so than just about any

00:08:16.560 --> 00:08:20.190
language I've ever come across,
to quickly locate something

00:08:20.280 --> 00:08:21.930
in a very easy manner.

00:08:21.940 --> 00:08:25.760
You remember that sentence I just said,
duplicate every file of the

00:08:25.760 --> 00:08:30.480
startup disk whose name contains
Smith Project to the folder name backup.

00:08:31.860 --> 00:08:36.240
That sentence not only contains
a command to do an action,

00:08:36.240 --> 00:08:40.360
but it also contains a query
that locates every file whose

00:08:40.440 --> 00:08:44.860
name contains Smith Project and
then performs an action with it.

00:08:44.860 --> 00:08:49.240
The process of finding every file
whose name contains Smith Project is

00:08:49.300 --> 00:08:54.110
done for you automatically,
recursively, using every whose clause

00:08:54.110 --> 00:08:55.610
object specifiers.

00:08:55.900 --> 00:08:57.700
Ooh, very technical.

00:08:58.500 --> 00:09:01.340
We're also going to look at
some of the basic techniques

00:09:01.680 --> 00:09:03.230
for programming AppleScript.

00:09:03.360 --> 00:09:06.390
It is a serious language,
although I have a lot of fun

00:09:06.460 --> 00:09:09.550
with it and I like to make
fun when I'm talking about it.

00:09:09.680 --> 00:09:14.910
AppleScript is very much an
industrial strength language.

00:09:15.010 --> 00:09:20.560
It is a peer development language with
Java and Objective C in our tools.

00:09:20.640 --> 00:09:23.930
You can make applications
entirely out of AppleScript,

00:09:23.930 --> 00:09:27.440
partially out of AppleScript,
or a mix or a conglomerate of

00:09:27.440 --> 00:09:29.320
any of those type of languages.

00:09:29.390 --> 00:09:31.540
We sit at the table with
the rest of the guys.

00:09:31.630 --> 00:09:33.670
We're no longer at the little
child's table in the back.

00:09:33.850 --> 00:09:36.730
We sit at the big table,
so anything that happens

00:09:36.810 --> 00:09:38.670
to Cocoa happens to us,
too.

00:09:38.770 --> 00:09:41.030
We're a peer development language.

00:09:41.120 --> 00:09:44.510
We're going to learn some of the basic
techniques that the language has,

00:09:44.610 --> 00:09:46.800
such as how do you do a repeat loop?

00:09:46.880 --> 00:09:49.870
How do you do a conditional statement?

00:09:49.980 --> 00:09:52.540
How do you do an error handler?

00:09:52.640 --> 00:09:56.700
These are mysterious things to
people coming from another language

00:09:56.880 --> 00:09:59.260
because AppleScript has their
own little way about doing it.

00:09:59.450 --> 00:10:02.450
But once you've seen it once, you go,
"Oh, duh.

00:10:02.890 --> 00:10:07.440
I got it." Well,
we'll practice that part.

00:10:07.480 --> 00:10:10.240
And then we're going to look at
some of the AppleScript tools that

00:10:10.360 --> 00:10:13.000
are available right on the OS.

00:10:13.050 --> 00:10:14.340
All of this is free, by the way.

00:10:14.340 --> 00:10:15.310
Did I say free?

00:10:15.610 --> 00:10:18.070
I meant to say free.

00:10:18.740 --> 00:10:19.260
Did I say free?

00:10:19.390 --> 00:10:20.400
Free, free, free.

00:10:20.400 --> 00:10:22.300
You don't have to pay for AppleScript.

00:10:22.300 --> 00:10:24.480
You don't have to pay for
this incredible ability.

00:10:24.480 --> 00:10:28.250
It's part of every computer
that Apple computer sells.

00:10:28.310 --> 00:10:33.080
And among some of the tools are the
new script editor and the script menu,

00:10:33.170 --> 00:10:36.390
folder actions as well,
and it contains a new thing

00:10:36.470 --> 00:10:40.830
called AppleScript Studio,
which is part of the Xcode development

00:10:40.830 --> 00:10:43.790
tools that we'll be looking at as well.

00:10:44.770 --> 00:10:46.030
So let's get started.

00:10:46.030 --> 00:10:48.930
I'm going to dig right into
the AppleScript language,

00:10:48.930 --> 00:10:51.890
and I'm going to reveal the
mysteries of the universe.

00:10:51.890 --> 00:10:52.910
Are we ready?

00:10:52.920 --> 00:10:54.110
Yes.

00:10:54.550 --> 00:10:55.050
Okay.

00:10:55.550 --> 00:10:56.620
How do you refer to items?

00:10:56.740 --> 00:10:57.920
This is the big thing.

00:10:57.920 --> 00:11:00.260
How do you locate a file?

00:11:00.260 --> 00:11:04.160
If I found a bunch of files whose
name contains Smith Project,

00:11:04.160 --> 00:11:08.440
how do I use the reference
of those files in a script?

00:11:08.520 --> 00:11:13.710
How do I take those items I've found
and how am I able to pass them to

00:11:13.710 --> 00:11:19.380
routines or to other applications
to open them or to process them?

00:11:20.500 --> 00:11:24.270
Well,
scriptable items are referenced by their

00:11:24.280 --> 00:11:28.400
position in their object hierarchy or
where they are in their chain of command.

00:11:28.400 --> 00:11:34.910
That's the way that it
works in AppleScript.

00:11:34.910 --> 00:11:34.910
In other words,

00:11:35.390 --> 00:11:40.380
An example of a reference
for an item would be file new

00:11:40.380 --> 00:11:47.120
car data of folder documents,
of folder home,

00:11:47.120 --> 00:11:51.580
of folder users of startup disk.

00:11:51.590 --> 00:11:57.100
You can see that chain
identifies where the item is.

00:11:57.100 --> 00:12:02.260
It's the file here in this folder,
in this folder of this disk.

00:12:02.380 --> 00:12:07.360
And that type of relationship,
or that hierarchical relationship

00:12:07.900 --> 00:12:10.550
is what AppleScript's based upon.

00:12:10.780 --> 00:12:15.240
It's based upon objects,
and objects having properties,

00:12:15.350 --> 00:12:17.090
and objects having a location.

00:12:17.100 --> 00:12:21.240
And their identity as objects
is determined by where they are

00:12:21.250 --> 00:12:25.700
in their hierarchy or where they
are in their chain of command.

00:12:25.700 --> 00:12:27.760
Does that kind of make sense?

00:12:27.760 --> 00:12:31.870
Let's take a look at this.

00:12:34.780 --> 00:12:36.560
There's different kinds of references.

00:12:36.560 --> 00:12:38.840
I just said that there's five
different kinds of references.

00:12:38.840 --> 00:12:42.230
The first one is a nested reference,
and I just gave you an example of it.

00:12:42.340 --> 00:12:49.410
File cars are folder documents of folder
sal of folder users of startup disk.

00:12:49.630 --> 00:12:51.020
That's a nested reference.

00:12:51.020 --> 00:12:52.810
Why is it called a nested reference?

00:12:52.850 --> 00:12:57.170
Because it shows you that each item
is contained inside the other item,

00:12:57.170 --> 00:13:00.630
and it uses the possessive
of to indicate ownership.

00:13:01.430 --> 00:13:06.000
The file is owned by folder documents,
which is owned by folder sal,

00:13:06.000 --> 00:13:09.170
which is owned by folder users,
which is on the startup disk.

00:13:09.250 --> 00:13:12.910
And that nested reference acts like
a bunch of Russian dolls that you

00:13:12.910 --> 00:13:14.980
kind of stick inside of each other.

00:13:14.980 --> 00:13:17.890
But it's just one type of reference.

00:13:17.900 --> 00:13:23.160
There's path references,
which are a means to identify

00:13:23.190 --> 00:13:29.760
an item by identifying each
part of that hierarchy as a name

00:13:29.760 --> 00:13:31.240
separated by a series of letters.

00:13:31.260 --> 00:13:32.260
There's a series of colons.

00:13:32.260 --> 00:13:33.140
We'll look at that.

00:13:33.260 --> 00:13:37.660
There are alias references,
which are similar to past references,

00:13:37.690 --> 00:13:39.930
but point to a live existing item.

00:13:40.270 --> 00:13:42.980
They're also very interesting
in that they change,

00:13:43.030 --> 00:13:45.840
and AppleScript will
find them and track them.

00:13:45.870 --> 00:13:50.180
So if you include an alias reference in
your script and you move the file later,

00:13:50.440 --> 00:13:53.990
the reference inside the
script changes as well.

00:13:54.530 --> 00:13:57.250
There are UNIX references that
we're all probably familiar with,

00:13:57.360 --> 00:13:59.900
POSIX, PASS, that kind of stuff.

00:14:00.030 --> 00:14:03.190
And there's a thing called file URLs.

00:14:03.320 --> 00:14:05.790
These are the five types

00:14:06.160 --> 00:14:11.210
of references that you can use
when identifying items in Mac OS X,

00:14:11.230 --> 00:14:14.610
and these are the five kinds
that AppleScript supports.

00:14:14.800 --> 00:14:16.670
Nested references.

00:14:16.740 --> 00:14:21.200
A nested reference, like I said,
indicates an item's position by

00:14:21.200 --> 00:14:25.180
using a series of possessives,
the of, so that it identifies the

00:14:25.370 --> 00:14:28.740
final object of a container,
of a container, of a container,

00:14:28.740 --> 00:14:29.600
of a disk.

00:14:29.710 --> 00:14:31.110
And is that what I said?

00:14:31.420 --> 00:14:34.640
A nested reference describes an
item's position and its object

00:14:34.640 --> 00:14:39.330
hierarchy from the bottom to the top
of its chain using the possessive of,

00:14:39.330 --> 00:14:42.020
or where it is in its change of command.

00:14:42.770 --> 00:14:47.960
Nested references are the default
format used by scriptable applications.

00:14:48.020 --> 00:14:51.500
And that's for the Finder,
that's for system events,

00:14:51.520 --> 00:14:54.660
that's for iTunes,
that's for the QuickTime player.

00:14:54.730 --> 00:14:58.710
Every scriptable app,
when you query it about an object,

00:14:58.750 --> 00:15:02.270
returns you a reference
in the nested format.

00:15:04.120 --> 00:15:09.000
And nested references are used for
scriptable items other than files.

00:15:09.090 --> 00:15:10.450
Let's look at some examples.

00:15:10.590 --> 00:15:12.300
Here's an example of a nested reference.

00:15:12.420 --> 00:15:16.180
Folder documents, a folder username,
whichever your username is,

00:15:16.230 --> 00:15:18.820
a folder users of the startup disk.

00:15:18.950 --> 00:15:24.600
You can see that the documents folders,
the target object here, and its position,

00:15:24.600 --> 00:15:30.750
its identity, is indicated by where it
is in the chain of command.

00:15:31.320 --> 00:15:34.600
document file cars.pdf
of folder documents,

00:15:34.600 --> 00:15:38.220
a folder username,
a folder users of startup disk.

00:15:38.350 --> 00:15:41.260
Here's the same kind of thing,
but now we're looking at a

00:15:41.330 --> 00:15:43.740
file within a document folder.

00:15:43.970 --> 00:15:48.760
Here's an example of a QuickTime movie,
frame 13 of track video

00:15:48.760 --> 00:15:50.620
overlay of movie 2.

00:15:50.900 --> 00:15:56.230
Every scriptable item is identified by
its position in its object hierarchy

00:15:56.330 --> 00:16:00.250
or where it is in its chain of command,
whether it's a file or

00:16:00.320 --> 00:16:03.870
whether it's a frame,
or whether it's a text box of a

00:16:03.990 --> 00:16:08.500
page of a spread of a document
in QuarkXPress or InDesign,

00:16:08.600 --> 00:16:12.810
whether it's a transition of
a video track of a program

00:16:12.850 --> 00:16:15.890
of a project in Media 100.

00:16:15.900 --> 00:16:20.750
This principle about nested reference and
object hierarchy for AppleScript stays

00:16:20.790 --> 00:16:24.660
constant across the world of AppleScript.

00:16:25.810 --> 00:16:28.080
Path references.

00:16:28.190 --> 00:16:33.180
Nested references, unfortunately,
cannot be generated by a script.

00:16:34.230 --> 00:16:37.810
If you have a script and you want
to pass the reference to this object

00:16:37.880 --> 00:16:41.480
to the finder to have it delete it,
or you want to pass this

00:16:41.480 --> 00:16:44.960
to QuarkXPress to open it,
or you want to pass it to some

00:16:45.100 --> 00:16:48.760
processor to resize your image,
you can't generate a nested

00:16:48.760 --> 00:16:50.620
reference with AppleScript.

00:16:50.620 --> 00:16:52.940
You can't make a thing
that says something of,

00:16:52.960 --> 00:16:55.340
something of, something of, something of.

00:16:55.640 --> 00:16:59.720
The way that we pass a reference
to an object to an application

00:16:59.720 --> 00:17:03.250
so that it can process it,
this is interesting, I like that,

00:17:03.310 --> 00:17:06.460
is through this method
called path references.

00:17:06.460 --> 00:17:10.170
I guess you'd carry data like this then,
right?

00:17:10.180 --> 00:17:11.150
It would be like that.

00:17:11.160 --> 00:17:16.090
Path references are used to pass a
reference to an object to the finder

00:17:16.090 --> 00:17:19.190
and to the system events applications.

00:17:19.200 --> 00:17:23.170
Today, I'm going to have a lot of
focus on what I do on files

00:17:23.280 --> 00:17:25.600
and folders and directories.

00:17:25.600 --> 00:17:27.980
And those kind of things,
because that's the meat and

00:17:27.980 --> 00:17:31.520
potatoes of a lot of sysadmin work,
is dealing with these kind of things.

00:17:31.530 --> 00:17:35.400
So I'm going to focus on that,
but just remember that it also works

00:17:35.470 --> 00:17:40.010
for any kind of an object like an
iTunes track or something else as well.

00:17:40.890 --> 00:17:47.660
A path is a text string read left to
right and it contains the name of each

00:17:47.750 --> 00:17:51.090
item that's part of the object's chain.

00:17:51.090 --> 00:17:54.620
And these items are separated by a colon.

00:17:54.710 --> 00:17:59.230
Path references are preceded with the
name of the class of the target item,

00:17:59.230 --> 00:18:06.030
such as a disk, a file, a document file,
or an item, or the generic term item,

00:18:06.030 --> 00:18:07.590
meaning anything.

00:18:07.890 --> 00:18:11.960
And path references to folders
and disks always end with a colon.

00:18:12.090 --> 00:18:17.330
So if the target item is a directory,
your path ends with a colon.

00:18:17.640 --> 00:18:19.500
And here's some examples.

00:18:19.650 --> 00:18:21.500
Tell application finder.

00:18:21.510 --> 00:18:26.380
So these particular paths are
going to be within the scope

00:18:26.440 --> 00:18:27.690
of the finder application.

00:18:27.690 --> 00:18:32.370
Disk, quote, Macintosh HD, colon,
end quote.

00:18:32.390 --> 00:18:35.980
Strings and proper names are
always placed within straight

00:18:35.980 --> 00:18:38.400
quotes in the world of AppleScript.

00:18:38.400 --> 00:18:41.020
That's the way that they
are identified to scripts.

00:18:41.020 --> 00:18:44.970
Anything not within quotes is analyzed
as being part of a dictionary or

00:18:44.970 --> 00:18:47.140
part of an application's ability.

00:18:48.210 --> 00:18:50.380
So this is a path to a disk.

00:18:50.550 --> 00:18:53.970
This is a path reference to a disk.

00:18:54.220 --> 00:19:00.420
folder Macintosh HD colon users
colon sal colon documents.

00:19:00.420 --> 00:19:05.710
So this is a path to the
documents folder on my hard drive.

00:19:05.790 --> 00:19:08.860
You notice that since the
target item is a folder,

00:19:08.860 --> 00:19:11.680
I've identified the class
as folder up front and then

00:19:11.780 --> 00:19:13.270
pass that string behind it.

00:19:13.340 --> 00:19:16.480
Item is a term used that's generic.

00:19:16.550 --> 00:19:20.860
So if you have a document file,
an alias file, a font folder,

00:19:20.970 --> 00:19:25.360
a regular folder, a suitcase,
any kind of object that's supported

00:19:25.410 --> 00:19:29.200
by the finder or the operating system,
you can use the word item in front of it

00:19:29.200 --> 00:19:31.300
and it's just a generic way to handle it.

00:19:31.300 --> 00:19:34.600
So if the script set you're writing
and you're not sure what kind of

00:19:34.600 --> 00:19:37.870
thing you're going to be dealing with,
you can use this item.

00:19:37.880 --> 00:19:42.150
Document file is used by the
finder in particular as a way of

00:19:42.550 --> 00:19:44.640
describing a certain kind of item.

00:19:44.640 --> 00:19:49.590
And then there's another example
of a file item using item.

00:19:49.590 --> 00:19:53.500
And those all occur within
the scope of the finder.

00:19:54.080 --> 00:19:55.330
That's a finder tell block.

00:19:55.440 --> 00:19:56.410
We'll be looking at those.

00:19:56.480 --> 00:20:00.340
It begins with addressing the finder
application with tell application

00:20:00.340 --> 00:20:03.700
finder and then everything after
it pertains to the finder and it

00:20:03.700 --> 00:20:05.520
finally ends with an end tell.

00:20:24.140 --> 00:20:29.430
And it has a disk file folder
suite that is almost identical

00:20:29.430 --> 00:20:31.650
to what the finder has.

00:20:31.830 --> 00:20:34.320
And it does the same kind
of thing as the finder.

00:20:34.320 --> 00:20:38.910
There's only a slight difference
is that instead of document file,

00:20:38.910 --> 00:20:41.850
which the finder has,
it uses the word file.

00:20:41.950 --> 00:20:43.980
Don't worry about document file.

00:20:43.980 --> 00:20:46.430
You can type the word file
in and the finder will change

00:20:46.430 --> 00:20:47.820
it for you when it needs to.

00:20:47.840 --> 00:20:50.710
So you could use file
generically and it would work.

00:20:52.400 --> 00:20:54.560
Those are path references.

00:20:54.680 --> 00:20:56.180
This is an alias reference.

00:20:56.310 --> 00:21:00.620
These are universal file
specifications that are honored by

00:21:00.620 --> 00:21:06.320
every application in AppleScript,
and they are what you use when you need

00:21:06.440 --> 00:21:09.500
to pass a reference between applications.

00:21:09.640 --> 00:21:14.240
They look like a path reference,
only they have the word

00:21:14.240 --> 00:21:16.550
"alias" in front of them.

00:21:17.970 --> 00:21:20.740
And they point to existing items
that are tracked by AppleScript.

00:21:20.870 --> 00:21:23.010
We'll see how that
works in just a second.

00:21:23.180 --> 00:21:24.660
Here's an example.

00:21:24.730 --> 00:21:28.130
So the previous example,
where we were pointing to a

00:21:28.130 --> 00:21:31.700
disk using a path reference,
this is what it would look

00:21:31.700 --> 00:21:33.760
like as an alias reference.

00:21:33.850 --> 00:21:37.810
This is what the documents folder
looks like as an alias reference.

00:21:37.950 --> 00:21:42.180
This is what the file in a
document folder looks like.

00:21:42.600 --> 00:21:44.960
And then we have POSIX references.

00:21:45.020 --> 00:21:45.930
You're familiar with these.

00:21:45.940 --> 00:21:48.000
They're derived from the
UNIX underpinnings of

00:21:48.000 --> 00:21:49.120
our operating system.

00:21:49.120 --> 00:21:53.750
It's one of the great abilities that
we got that really makes Mac OS X move

00:21:53.750 --> 00:21:55.940
forward is its UNIX history.

00:21:57.160 --> 00:22:01.520
But these kind of paths, the slash paths,
are generally not supported

00:22:01.590 --> 00:22:03.500
by scriptable applications.

00:22:03.500 --> 00:22:05.750
We've been around since System 7.

00:22:05.840 --> 00:22:08.670
We're based upon the
colon alias kind of idea,

00:22:08.670 --> 00:22:11.580
and we're not yet aware
of the slash idea.

00:22:12.440 --> 00:22:15.900
But there are easy ways to get back
and forth between the two of them.

00:22:15.900 --> 00:22:18.420
Here are some naturally
some POSIX examples.

00:22:18.430 --> 00:22:21.440
You can see, you know,
there's the documents folder.

00:22:21.440 --> 00:22:23.960
There's a file in the documents folder.

00:22:24.790 --> 00:22:26.340
There's another one.

00:22:27.000 --> 00:22:29.420
There's another drive,
a folder named backup,

00:22:29.450 --> 00:22:33.400
and you notice that the characters are
escaped there because of the spaces.

00:22:33.440 --> 00:22:37.580
And then at the bottom,
you notice that the entire line is quoted

00:22:37.580 --> 00:22:41.080
because of the spaces inside of the path,
right?

00:22:41.810 --> 00:22:43.080
Did I do that correctly?

00:22:43.360 --> 00:22:43.640
Yes, I did.

00:22:43.700 --> 00:22:45.470
Thank you very much.

00:22:47.710 --> 00:22:52.620
Now, AppleScript does provide a way
for get--deriving POSIX references

00:22:52.620 --> 00:22:58.850
from other reference types using
a construct called POSIXPath.

00:22:58.860 --> 00:23:03.920
And it also--cut the wrong key
there--also provides a way to coerce

00:23:03.920 --> 00:23:08.730
these POSIX references into the
kind that AppleScript can use this

00:23:08.860 --> 00:23:11.720
with a construct called POSIXFile.

00:23:12.930 --> 00:23:16.840
Here's how you derive a POSIX path.

00:23:16.840 --> 00:23:22.800
You say POSIX path of and then you
provide an alias reference to an object.

00:23:22.900 --> 00:23:25.570
In this case our object
is the documents folder.

00:23:25.770 --> 00:23:28.950
If I ask for the POSIX path
of this reference,

00:23:28.950 --> 00:23:34.260
we get returned to our script
users slash sal slash documents.

00:23:34.380 --> 00:23:39.990
So that's how you get a POSIX path
from an alias reference.

00:23:40.890 --> 00:23:41.900
There's the POSIX path of.

00:23:42.050 --> 00:23:44.790
Just place that in
front of your reference.

00:23:44.920 --> 00:23:47.530
Now,
if you're not sure that the user might

00:23:47.530 --> 00:23:51.970
have used some strange characters
or some spaces or stuff like that,

00:23:51.970 --> 00:23:57.270
which often occurs on Macintosh world,
you might want to ask for the quoted

00:23:57.270 --> 00:24:01.230
form of the POSIX path of this reference.

00:24:01.340 --> 00:24:04.040
And what that does is,
neatly in white -- see,

00:24:04.070 --> 00:24:05.560
I'm getting into the slide thing.

00:24:05.600 --> 00:24:07.880
Neatly in white,
you notice how it puts those

00:24:07.880 --> 00:24:11.780
little apostrophes so it quotes
the line for us automatically.

00:24:11.780 --> 00:24:14.500
So quoted form of POSIX path of.

00:24:14.530 --> 00:24:16.840
If you didn't know that,
you'll be sitting there pulling your

00:24:16.840 --> 00:24:19.910
hair out and then you'll make these
stupid routines to try to figure

00:24:19.970 --> 00:24:24.230
out how to append apostrophes to
the end of what you were deriving.

00:24:24.720 --> 00:24:26.100
Some of you might have
already tried that.

00:24:26.130 --> 00:24:29.450
How to coerce a POSIX path.

00:24:29.580 --> 00:24:34.190
Now, to get to an alias reference,
it's going to take us a couple steps.

00:24:34.340 --> 00:24:38.350
The first one is that we need to
get to what is called a POSIX file.

00:24:38.350 --> 00:24:41.830
And if you take a POSIX path
and you say as POSIX file,

00:24:41.830 --> 00:24:46.900
you will coerce it to this format here,
which looks like our path reference,

00:24:46.960 --> 00:24:47.720
right?

00:24:47.720 --> 00:24:52.840
File, then colon delineated from the
drive down to the object itself.

00:24:52.840 --> 00:24:54.680
It's by saying as POSIX file.

00:24:55.700 --> 00:25:00.800
Anytime you want to do a coercion from
one format into another in AppleScript,

00:25:00.800 --> 00:25:02.580
you use the term as.

00:25:02.710 --> 00:25:06.000
You could take a number,
coerce it to a string

00:25:06.330 --> 00:25:08.880
by saying 10 as string.

00:25:08.880 --> 00:25:13.040
You could take a string and
coerce it to a number by saying,

00:25:13.040 --> 00:25:15.300
quote, five, quote, as number.

00:25:15.300 --> 00:25:16.530
Sal Soghoian

00:25:16.710 --> 00:25:21.780
Use the as word, the as verb,
that's not a verb, it's a...

00:25:23.130 --> 00:25:24.160
Preposition.

00:25:24.160 --> 00:25:24.980
I'm guessing.

00:25:24.990 --> 00:25:25.440
Is that right?

00:25:25.450 --> 00:25:26.990
Okay.

00:25:27.090 --> 00:25:29.200
Whatever it is, it's a wonderful word.

00:25:29.220 --> 00:25:30.210
It's a magical thing.

00:25:31.800 --> 00:25:36.480
Use that when you're doing a coercion.

00:25:36.560 --> 00:25:39.410
That's how you coerce in AppleScript.

00:25:41.310 --> 00:25:45.740
Now, to get to the alias,
we're going to do a double coercion.

00:25:45.830 --> 00:25:49.560
We're going to, first of all,
coerce to a POSIX file.

00:25:49.830 --> 00:25:52.870
Then the result of that
will be coerced to an alias.

00:25:52.990 --> 00:25:56.240
That's because AppleScripts
are read left to right,

00:25:56.300 --> 00:26:01.160
and they're executed left to right
and from the top down in a script.

00:26:01.250 --> 00:26:05.430
So the first thing that happens
is that that POSIX path is

00:26:05.470 --> 00:26:09.480
coerced to a POSIX file,
which is a path reference,

00:26:09.560 --> 00:26:11.440
and then it's coerced to an alias.

00:26:11.570 --> 00:26:16.460
So the end result then is an alias
reference that I can use with

00:26:16.590 --> 00:26:21.630
QuickTime Player or any other
scriptable application to have that

00:26:21.630 --> 00:26:24.700
folder become a target folder or open.

00:26:24.940 --> 00:26:29.470
That's how you coerce from
POSIX to alias in one line.

00:26:29.550 --> 00:26:32.090
If you didn't know that,
life is horrible.

00:26:32.260 --> 00:26:35.470
If you do know that,
you're in the air conditioning.

00:26:36.830 --> 00:26:38.030
File URLs.

00:26:38.260 --> 00:26:43.460
Little known,
but can be useful in extreme situations.

00:26:43.490 --> 00:26:48.100
File URLs describe items on
your drive in the same way that

00:26:48.100 --> 00:26:52.760
they're described on the internet,
which is HTTP, blah, blah, blah, blah,

00:26:52.760 --> 00:26:55.030
with all the different slashes and stuff.

00:26:56.070 --> 00:26:59.720
And they can get these file
URLs from either the system events

00:26:59.720 --> 00:27:02.990
application or from the finder,
or you can make them up

00:27:03.000 --> 00:27:04.570
yourself if you want to.

00:27:04.720 --> 00:27:06.310
And they look like this.

00:27:07.340 --> 00:27:12.070
Tell application finder to get the
URL of folder documents of home.

00:27:12.080 --> 00:27:17.060
Well, that would return me file colon
slash slash localhost slash user

00:27:17.060 --> 00:27:19.330
slash style slash documents.

00:27:19.330 --> 00:27:22.120
File localhost user slash style.

00:27:22.670 --> 00:27:24.690
Now,
you'll notice that in the other ones.

00:27:26.630 --> 00:27:29.010
It automatically provides that for you.

00:27:29.320 --> 00:27:32.450
When you're asking for the file URL,
you don't have to worry about

00:27:32.560 --> 00:27:33.720
the percentage encoding.

00:27:33.720 --> 00:27:38.060
That'll get handled for you in
the information that's returned.

00:27:38.060 --> 00:27:43.420
So those are the five types,
and how do we coerce between them?

00:27:43.490 --> 00:27:44.880
So let me just review.

00:27:44.880 --> 00:27:51.390
They are nested reference,
path reference, alias reference, POSIX,

00:27:51.390 --> 00:27:53.410
and then file URLs.

00:27:53.420 --> 00:27:56.920
To coerce between them,
we'll review this quickly.

00:27:56.920 --> 00:27:59.420
You can coerce between the
following reference types:

00:27:59.420 --> 00:28:01.850
nested reference to an alias reference.

00:28:01.930 --> 00:28:05.750
So I can get a nested reference
back from the finder and say,

00:28:05.870 --> 00:28:10.100
"I'd like this as an alias."
You can coerce between a path

00:28:10.100 --> 00:28:12.910
reference to an alias reference.

00:28:12.920 --> 00:28:16.700
So I can take a path reference that
I construct myself with my script

00:28:16.910 --> 00:28:21.920
and then coerce that to an alias that
I can then pass to an application.

00:28:22.190 --> 00:28:27.130
You can coerce from a POSIX path
to a POSIX file to an alias

00:28:27.130 --> 00:28:29.360
reference like we just saw.

00:28:29.510 --> 00:28:32.300
And then you can coerce
between an alias reference to a

00:28:32.360 --> 00:28:35.430
POSIX path as we saw previously.

00:28:35.500 --> 00:28:40.050
Nested references, again,
cannot be generated by scripts.

00:28:40.180 --> 00:28:41.890
So here's an example.

00:28:42.030 --> 00:28:47.890
Folder applications of the startup
disk as an alias will return me alias

00:28:48.040 --> 00:28:51.980
Macintosh HD colon applications colon.

00:28:52.480 --> 00:28:56.900
Folder Macintosh
HD applications as alias.

00:28:56.920 --> 00:29:02.280
This is an example of a path reference
within the parens coerced to an alias.

00:29:02.460 --> 00:29:04.730
So that returns the same thing.

00:29:04.830 --> 00:29:05.610
And then entel.

00:29:06.300 --> 00:29:10.560
The POSIX path of an alias
Macintosh HD blah blah.

00:29:10.560 --> 00:29:12.340
So we have an alias reference here.

00:29:12.340 --> 00:29:13.980
We're asking for the POSIX path.

00:29:14.380 --> 00:29:18.820
That will return us the POSIX path
to that particular directory.

00:29:18.820 --> 00:29:24.220
And then if I take that and coerce it
to a POSIX file and then to an alias,

00:29:24.220 --> 00:29:26.860
it returns us back to an alias.

00:29:26.930 --> 00:29:30.580
So that's how you coerce an
AppleScript between the various types.

00:29:30.580 --> 00:29:32.620
Has anybody ever told
you that stuff before?

00:29:32.620 --> 00:29:34.930
It's like mysterious stuff, isn't it?

00:29:35.090 --> 00:29:37.520
If you don't know it in the world,
you don't know of AppleScript,

00:29:37.520 --> 00:29:38.400
you'll go like this.

00:29:38.450 --> 00:29:41.730
And you can see that half my
head's worn away from that.

00:29:50.200 --> 00:29:50.200
So let's take a look at
some of this kind of stuff.

00:29:50.200 --> 00:29:50.200
Can I have this machine?

00:29:50.200 --> 00:29:50.300
What do I call this machine?

00:29:50.820 --> 00:29:51.690
Demo?

00:29:51.770 --> 00:29:53.400
That's-- Demo 1.

00:29:53.470 --> 00:29:54.400
Demo 1.

00:29:54.400 --> 00:29:55.300
Thank you.

00:29:55.300 --> 00:29:57.410
Demo 1.

00:29:58.120 --> 00:29:59.760
Okay, this is demo one.

00:29:59.880 --> 00:30:04.590
So before we begin taking a look
at these path kind of ideas,

00:30:05.340 --> 00:30:08.010
We need to find out where
AppleScript is on your computer

00:30:08.270 --> 00:30:11.540
and I'll be happy to show you.

00:30:11.640 --> 00:30:14.750
AppleScript lives in a couple
locations on the computer.

00:30:14.870 --> 00:30:18.960
The main location is in
the AppleScript folder.

00:30:19.100 --> 00:30:22.810
And if you open up your -- ooh, yellow.

00:30:22.930 --> 00:30:23.450
I like that.

00:30:23.520 --> 00:30:24.480
It's soft on the eyes.

00:30:24.480 --> 00:30:25.060
That's nice.

00:30:25.060 --> 00:30:26.070
Thank you.

00:30:26.150 --> 00:30:28.060
That was really good.

00:30:28.060 --> 00:30:29.290
Nice touch.

00:30:31.130 --> 00:30:34.390
If you open up the applications folder,
within that folder is a

00:30:34.410 --> 00:30:35.640
folder called AppleScript.

00:30:35.780 --> 00:30:37.610
This is AppleScript's home turf.

00:30:37.820 --> 00:30:38.800
This is where we live.

00:30:39.130 --> 00:30:43.680
And we're in Panther right now,
so some of these icons might

00:30:43.680 --> 00:30:47.890
become a little bit more
sophisticated by the time we ship.

00:30:50.400 --> 00:30:53.230
We do have a script editor
that has an icon though,

00:30:53.230 --> 00:30:56.310
and this is the script
editor application.

00:30:56.370 --> 00:30:59.280
It's new for,
it's the beta version that we've

00:30:59.280 --> 00:31:02.650
been posting on the website and a
lot of people have been using it.

00:31:02.720 --> 00:31:05.580
It's an incredibly nicer
version than we had before.

00:31:05.580 --> 00:31:09.880
We had the distinction of being the
oldest piece of code shipping in

00:31:09.880 --> 00:31:12.980
the operating system prior to this.

00:31:12.980 --> 00:31:15.330
This is a native Cocoa application.

00:31:15.330 --> 00:31:16.720
It has a lot of power.

00:31:16.720 --> 00:31:19.800
Don't be fooled by how
clean and nice it looks.

00:31:32.700 --> 00:31:32.900
This is the script editor application.

00:31:32.900 --> 00:31:32.900
This is where you read and
write and record your scripts.

00:31:32.900 --> 00:31:32.900
It contains two different panes.

00:31:32.900 --> 00:31:32.900
In the top area here is
where we write scripts.

00:31:34.170 --> 00:31:36.550
Application quote finder.

00:31:36.560 --> 00:31:42.990
Remember, names get put within a quote
mark to open the startup disk.

00:31:56.300 --> 00:31:56.300
And this is our compile button
for checking our code to make

00:31:56.300 --> 00:31:56.300
sure it's been written correctly.

00:31:56.300 --> 00:31:56.300
This is our run button,
and when I run it -- well,

00:31:56.300 --> 00:31:56.300
that's interesting.

00:31:58.650 --> 00:31:59.600
Oh, I hit others.

00:31:59.600 --> 00:32:00.370
Okay.

00:32:00.370 --> 00:32:01.290
Sorry.

00:32:01.310 --> 00:32:03.340
I fooled myself.

00:32:03.430 --> 00:32:05.620
I only have me to blame.

00:32:05.890 --> 00:32:08.580
And that pane is where
we write our scripts.

00:32:08.640 --> 00:32:12.820
You'll notice that as I clicked the
compile when it was checking the script

00:32:12.820 --> 00:32:16.100
to make sure it was written properly,
certain words become bold.

00:32:16.100 --> 00:32:18.350
Certain words will become indented.

00:32:18.450 --> 00:32:22.450
This is to show you which words
belong to the AppleScript language,

00:32:22.450 --> 00:32:26.200
which words belong to the
application that you're addressing.

00:32:26.200 --> 00:32:29.840
For example,
the word tell belongs to AppleScript.

00:32:29.840 --> 00:32:30.780
So does tell.

00:32:30.890 --> 00:32:31.570
So does to.

00:32:31.570 --> 00:32:32.460
And so does the.

00:32:32.870 --> 00:32:36.160
Startup disk and the verb
open belong to the finder.

00:32:36.160 --> 00:32:42.580
At the bottom here is a multi-paned area.

00:32:42.580 --> 00:32:43.740
And we have three panes.

00:32:43.740 --> 00:32:45.090
One is a description pane.

00:32:45.100 --> 00:32:48.330
And scripts can actually post
little dialogues with scrolling

00:32:48.330 --> 00:32:50.000
information about the script.

00:32:50.060 --> 00:32:52.840
And you can just save a button,
click a checkbox when

00:32:52.840 --> 00:32:55.360
you save your script,
and they will do that for you.

00:32:55.360 --> 00:32:57.160
And you keep that
information that you want.

00:32:57.160 --> 00:32:59.800
And you can also add a description
that you want to present to the

00:32:59.900 --> 00:33:03.360
user in this pane right here,
your description field.

00:33:03.360 --> 00:33:07.760
The result field shows you the
last action of your script,

00:33:07.760 --> 00:33:09.370
the result of the last action.

00:33:09.370 --> 00:33:12.340
So if you had ten actions,
it would show you the result of

00:33:12.340 --> 00:33:14.430
the tenth line of your script.

00:33:14.560 --> 00:33:18.350
The event log is a way of tracking
what you do with your script.

00:33:18.350 --> 00:33:22.840
It will follow along and show you each
of the actions and the result from that.

00:33:22.840 --> 00:33:25.280
So if I asked the finder to
get the name of the script,

00:33:25.310 --> 00:33:31.100
it would say,
"I want the name of the startup disk."

00:33:31.100 --> 00:33:39.820
And you can see that my event log shows
that a command was sent to the finder,

00:33:39.820 --> 00:33:43.360
get the name of the startup disk,
and then indent it underneath it

00:33:43.440 --> 00:33:45.560
shows you the result of that action.

00:33:45.660 --> 00:33:47.910
So this is a way to debug your scripts.

00:33:47.960 --> 00:33:51.770
You can use the event log as a
way of tracking what you're doing.

00:33:51.770 --> 00:33:55.960
And the result window always contains
the result of the last action,

00:33:56.080 --> 00:34:00.420
which is the name of that wonderful name,
Panther W Tools HD,

00:34:00.420 --> 00:34:03.820
the name of my startup disk.

00:34:03.970 --> 00:34:05.960
This is the script editor window.

00:34:05.960 --> 00:34:08.670
This is a script window
within the script editor.

00:34:08.770 --> 00:34:12.250
It does have some new features,
especially for this new release,

00:34:12.280 --> 00:34:14.400
and one is called the navigation bar.

00:34:14.550 --> 00:34:18.260
If you have a rather complex
script that has a lot of different

00:34:18.260 --> 00:34:21.670
routines and handlers in it,
they would show up here.

00:34:21.670 --> 00:34:26.140
And if you're using other scriptable
language besides Apple script,

00:34:26.140 --> 00:34:28.100
they would show up over here.

00:34:31.770 --> 00:34:35.270
Which ones were you
referring to clapping to?

00:34:35.390 --> 00:34:35.890
Python?

00:34:35.890 --> 00:34:39.980
Somebody said once Python, Perl,
and JavaScript, right?

00:34:39.980 --> 00:34:44.410
There is a JavaScript OSA component
from Mark Aldrit of Late Night Software,

00:34:44.410 --> 00:34:47.080
and you can install that,
and that would show up right there,

00:34:47.150 --> 00:34:49.090
and you could use that if you wanted to.

00:34:49.100 --> 00:34:54.510
The script editor also provides
us with a way to view the internal

00:34:54.520 --> 00:34:57.530
dictionaries of applications.

00:34:57.850 --> 00:35:01.550
Applications that are scriptable
have scriptable objects.

00:35:01.670 --> 00:35:04.820
They contain scriptable objects,
and each of those objects

00:35:04.820 --> 00:35:08.670
contain certain qualities that
make it a scriptable object.

00:35:08.800 --> 00:35:12.720
And you can examine the entire
structure of a scriptable application

00:35:12.720 --> 00:35:14.700
by asking for its dictionary.

00:35:14.700 --> 00:35:19.060
So I just choose the open dictionary.

00:35:19.060 --> 00:35:25.390
I'm going to open up
the quicktime player.

00:35:26.000 --> 00:37:19.200
[Transcript missing]

00:37:22.300 --> 00:37:28.400
[Transcript missing]

00:37:34.080 --> 00:37:37.250
So I can run that and it'll launch the
QuickTime player and return me true.

00:37:37.330 --> 00:37:40.300
QuickTime Pro is
installed on this machine.

00:37:40.400 --> 00:37:46.600
And you'll notice that it said,
it brought up my little welcome movie,

00:37:46.600 --> 00:37:48.200
I guess what they're calling it.

00:37:48.200 --> 00:37:50.590
And it's currently set
in the preferences,

00:37:51.290 --> 00:37:55.600
player preferences,
to show this movie for me automatically.

00:37:56.250 --> 00:37:59.830
So I see that that's also a property
down here and it takes a Boolean value.

00:37:59.830 --> 00:38:05.910
So I could use this and say set to false.

00:38:06.480 --> 00:38:08.800
So I'm going to check
my syntax and run it.

00:38:08.800 --> 00:38:12.710
And now when I go back
to the QuickTime player,

00:38:13.010 --> 00:38:16.820
If I choose preferences,
player preferences, that's turned off.

00:38:16.820 --> 00:38:21.260
So what happens is this piece of code,
this English-like sentence,

00:38:21.340 --> 00:38:25.090
is translated into an event that
gets sent to the QuickTime player.

00:38:25.310 --> 00:38:27.780
The QuickTime player takes that event,
responds to it,

00:38:27.860 --> 00:38:30.560
and does something accordingly.

00:38:30.560 --> 00:38:34.550
The dictionary is where you learn
about your particular applications

00:38:34.600 --> 00:38:37.000
that you want to script and all
the things that they can do.

00:38:37.270 --> 00:38:38.900
For example,
if we'll open up here and we'll

00:38:38.900 --> 00:38:40.200
look at the Finder dictionary.

00:38:40.200 --> 00:38:43.760
I'll show you the dictionary
quickly for the Finder.

00:38:43.760 --> 00:38:45.840
This is how the Finder
dictionary is divided.

00:38:46.090 --> 00:38:49.550
It has a standard suite just
like the other application.

00:38:49.550 --> 00:38:55.230
It has its own basic suite which
contains some classes of objects.

00:38:55.240 --> 00:38:57.330
And then it also has commands.

00:38:57.370 --> 00:38:59.120
It has some Finder items.

00:39:01.220 --> 00:39:03.390
And these are the properties,
owner privileges,

00:39:03.400 --> 00:39:07.900
and then it has some verbs like clean up,
eject, empty, erase, reveal.

00:39:08.010 --> 00:39:10.100
You can use the reveal verb
with a reference to the

00:39:10.210 --> 00:39:11.620
object to be made visible.

00:39:11.620 --> 00:39:13.010
Well, let's try that out.

00:39:13.130 --> 00:39:18.120
So I'll say, tell app,
notice the shortcut.

00:39:18.700 --> 00:39:30.600
[Transcript missing]

00:39:34.050 --> 00:39:35.000
Mistakes.

00:39:35.000 --> 00:39:35.320
Something happened.

00:39:35.320 --> 00:39:37.330
And there's a typo here.

00:39:37.330 --> 00:39:39.760
Start up disk.

00:39:39.760 --> 00:39:40.920
Now let's check it again.

00:39:40.920 --> 00:39:45.720
And I'm going to give one teacher a verb,
activate, which will bring the

00:39:46.210 --> 00:39:48.040
finder to the foreground.

00:39:48.040 --> 00:39:49.090
And let's run that.

00:39:49.140 --> 00:39:49.940
And there it is.

00:39:49.940 --> 00:39:51.850
It selects it and highlights it for you.

00:39:51.850 --> 00:39:53.180
It uses the verb reveal.

00:39:53.460 --> 00:39:56.640
So, the point I'm showing you here is
that the dictionary contains the

00:39:56.780 --> 00:39:58.480
commands for the various applications.

00:39:58.500 --> 00:40:01.570
You're going to have to go into
these dictionaries and parse them,

00:40:01.850 --> 00:40:03.790
play with them,
have fun with them to learn all the

00:40:03.920 --> 00:40:05.550
different things that they can do.

00:40:05.560 --> 00:40:08.950
But they are available to you right
from within the script editor.

00:40:09.040 --> 00:40:12.160
So, let's take a look at some
of the reference types that

00:40:12.200 --> 00:40:13.800
we were looking at here.

00:40:13.800 --> 00:40:18.620
And the first one was a nested reference.

00:40:18.620 --> 00:40:22.700
So, I'm going to take away
the activate verb here.

00:40:25.110 --> 00:40:29.420
And I'm going to say open
up my hard drive and take a

00:40:29.420 --> 00:40:31.880
look in my home directory.

00:40:36.000 --> 00:40:38.190
And I'm going to go
into my pictures folder,

00:40:38.290 --> 00:40:42.400
webcam images, and get that, copy that.

00:40:42.400 --> 00:40:47.440
So I'm going to say,
let's make a nested reference to that.

00:40:47.560 --> 00:40:53.640
So if I just say home and run that,
it gives me the reference

00:40:53.660 --> 00:40:57.930
to the home directory,
folder Apple of folder users of

00:40:57.950 --> 00:41:01.110
startup disk of application finder.

00:41:02.100 --> 00:41:10.300
[Transcript missing]

00:41:15.490 --> 00:41:19.900
Now I have a reference to
folder pictures of folder Apple,

00:41:19.900 --> 00:41:24.230
of folder users,
of startup disk of application finder.

00:41:24.230 --> 00:41:34.660
And then with that, in that,
there was a folder called webcam images.

00:41:34.660 --> 00:41:34.660
So I would say folder webcam images.

00:41:34.770 --> 00:41:38.070
images of folder this.

00:41:38.230 --> 00:41:41.220
As you can see,
nested references are rather verbose.

00:41:41.480 --> 00:41:43.100
That's why we don't create them.

00:41:43.240 --> 00:41:46.020
And then I'm going to
take a movie out of there.

00:41:46.730 --> 00:41:54.640
And then I could say
document file quote this of.

00:41:54.640 --> 00:41:56.490
And that points to that movie file.

00:41:56.780 --> 00:41:59.920
That's an example of a nested reference.

00:41:59.920 --> 00:42:03.870
It can use that with any
of the commands like open.

00:42:05.340 --> 00:42:08.710
And it opens up the movie,
just as if you double

00:42:08.710 --> 00:42:10.580
clicked it from the finder.

00:42:10.700 --> 00:42:13.580
Or I could use the verb delete.

00:42:16.100 --> 00:42:32.500
[Transcript missing]

00:42:33.310 --> 00:42:35.200
A path reference.

00:42:35.200 --> 00:42:38.200
Now I was writing this
nested reference by hand.

00:42:38.200 --> 00:42:40.720
I passed this reference to
the finder by hand because

00:42:40.720 --> 00:42:44.200
I wanted to create that for you.

00:42:44.200 --> 00:42:44.200
But

00:42:44.350 --> 00:42:48.280
If you have a script that you're
writing or that's functioning,

00:42:48.430 --> 00:42:51.400
that's performing an action,
you won't be able to create

00:42:51.450 --> 00:42:53.170
this kind of thing indirectly.

00:42:53.490 --> 00:43:00.200
What you can do is pass it a
reference as a path reference,

00:43:00.200 --> 00:43:02.790
which would be file or document file.

00:43:03.500 --> 00:43:08.710
This part I can create
because this is just a string.

00:43:10.800 --> 00:43:26.000
[Transcript missing]

00:43:27.200 --> 00:43:30.360
Then the name of that file, oh, no.

00:43:30.600 --> 00:43:33.790
Then the name of this file again,
I'll grab it again.

00:43:33.930 --> 00:43:36.810
So a script could generate
this because it's just a text

00:43:36.810 --> 00:43:41.380
string and expected-- Oh,
see?

00:43:42.800 --> 00:43:45.530
And I misspelled webcam images?

00:43:45.710 --> 00:43:47.250
Pictures, that's right.

00:43:47.350 --> 00:43:48.300
Well, hold on a second.

00:43:48.300 --> 00:43:50.640
Let's try that out.

00:43:50.720 --> 00:43:53.380
So let's see if I got this right.

00:43:57.380 --> 00:43:58.360
doesn't exist, right?

00:43:58.360 --> 00:44:02.990
Because I missed this one thing
here called webcam images.

00:44:07.900 --> 00:44:09.260
And again it opens it.

00:44:09.330 --> 00:44:12.940
A script can create this
because this is a text string.

00:44:13.070 --> 00:44:17.320
We can get the path to the startup
disk or we can get the path to

00:44:17.320 --> 00:44:21.500
another directory and then add or
concatenate the name of the file

00:44:21.510 --> 00:44:23.010
that we want to the end of that.

00:44:23.230 --> 00:44:25.520
Take that,
put the word document file in front

00:44:25.520 --> 00:44:27.060
of it and pass it to the finder.

00:44:27.160 --> 00:44:31.090
And that's what we have here.

00:44:31.660 --> 00:44:41.000
Or you can coerce a path to,
so let's say, home as--

00:44:41.300 --> 00:44:46.830
Alias or home as string.

00:44:46.830 --> 00:44:46.830
I'm sorry.

00:44:46.830 --> 00:44:46.830
Home as string.

00:44:48.100 --> 00:44:52.300
And if we run this, it gives me the path
to the home directory,

00:44:52.330 --> 00:44:54.510
but as a string.

00:44:54.640 --> 00:44:57.810
So then I can take that.

00:44:57.920 --> 00:45:01.600
I'm going to make a variable,
and in AppleScript,

00:45:03.770 --> 00:45:07.000
This location to home is that.

00:45:07.020 --> 00:45:10.860
In AppleScript, when you make a variable,
are we familiar with what variables are?

00:45:10.860 --> 00:45:11.380
I assume.

00:45:11.380 --> 00:45:12.780
Variables are containers.

00:45:12.780 --> 00:45:14.420
They contain information.

00:45:14.420 --> 00:45:17.120
In AppleScript, to make a variable,
you just make up a name that

00:45:17.120 --> 00:45:19.840
AppleScript doesn't know,
that's not part of a dictionary.

00:45:19.840 --> 00:45:21.960
You can make them up
in a variety of ways,

00:45:21.960 --> 00:45:25.540
such as this, where I use two words that
are underscored together,

00:45:25.540 --> 00:45:28.240
or you could make it
probably something like this,

00:45:28.250 --> 00:45:32.820
where you have an inner cap,
or you could just make it X.

00:45:33.350 --> 00:45:35.150
Whatever you want to
use for your variable,

00:45:35.150 --> 00:45:38.960
you can do that,
but I'm going to say this location.

00:45:48.170 --> 00:45:48.170
So I can go back to home as string
and then I have that part stored into

00:45:48.170 --> 00:45:48.170
the variable and then I could say,

00:45:48.600 --> 00:45:58.800
[Transcript missing]

00:46:00.100 --> 00:46:09.900
[Transcript missing]

00:46:11.200 --> 00:46:14.020
And then the name of the file,
which I'll grab one more time

00:46:14.230 --> 00:46:16.630
because I'm lazy to memorize it.

00:46:17.970 --> 00:46:20.340
So what I've done now
is created a string.

00:46:20.340 --> 00:46:21.620
Let's run that.

00:46:21.620 --> 00:46:24.700
And I have a string to
make it a path reference.

00:46:24.710 --> 00:46:30.630
All I need to do now is tell
the finder to open document,

00:46:30.860 --> 00:46:34.500
file, and then whatever's
inside of this container,

00:46:34.500 --> 00:46:36.670
which is a path reference.

00:46:36.700 --> 00:46:42.660
And now that's how you pass a reference
to the finder or to an application.

00:46:42.660 --> 00:46:44.140
Does that make sense?

00:47:01.410 --> 00:47:01.410
So you can create these yourself by
putting together pieces of string.

00:47:01.410 --> 00:47:01.410
You can't create a nested reference
on the fly like this is doing.

00:47:01.410 --> 00:47:01.410
Okay.

00:47:01.410 --> 00:47:01.410
Then the last thing that we wanted
to look at was the alias reference.

00:47:01.410 --> 00:47:01.410
So I could ask this location.

00:47:01.640 --> 00:47:02.950
I'm going to delete that again.

00:47:03.040 --> 00:47:08.620
Instead of as string,
I'm going to say as alias.

00:47:09.640 --> 00:47:09.720
I misspelled

00:47:11.540 --> 00:47:17.960
And that's how I can coerce from a nested
reference right to an alias reference.

00:47:18.110 --> 00:47:22.010
So now within the variable
I have alias panthered this to

00:47:22.010 --> 00:47:24.050
a directory to my home folder.

00:47:24.380 --> 00:47:31.170
So if I say open this location,
what will happen?

00:47:32.760 --> 00:47:34.630
My home directory open.

00:47:34.630 --> 00:47:36.370
That's how you coerce to an alias.

00:47:36.370 --> 00:47:38.700
So those are the different
kinds of references.

00:47:38.700 --> 00:47:42.750
Nested reference, path reference,
alias reference,

00:47:42.770 --> 00:47:45.220
and then we have POSIX paths as well.

00:47:45.220 --> 00:47:50.730
So if I wanted to take this and
then coerce that to a POSIX path,

00:47:50.730 --> 00:47:52.210
then I could say...

00:47:52.810 --> 00:47:56.840
POSIX path of this location,
because what's inside the

00:47:56.840 --> 00:47:59.950
variable is just the same thing
as if I was addressing it,

00:48:00.070 --> 00:48:02.420
and I misspelled path.

00:48:03.360 --> 00:48:05.360
Notice how AppleScript finds that for me.

00:48:05.420 --> 00:48:07.440
And there it gives me the pass.

00:48:07.480 --> 00:48:11.090
So if I needed to do a do shell script,
or I needed to pass

00:48:11.090 --> 00:48:14.420
something to the terminal,
then I could coerce what I had

00:48:14.500 --> 00:48:16.320
into this kind of a thing.

00:48:16.370 --> 00:48:17.020
Does that make sense?

00:48:17.020 --> 00:48:18.280
We see how that works?

00:48:18.310 --> 00:48:19.080
Very simple.

00:48:19.100 --> 00:48:19.470
OK.

00:48:19.930 --> 00:48:24.020
Let's go back to these slides.

00:48:24.020 --> 00:48:24.890
Laptop one.

00:48:24.920 --> 00:48:31.250
This is kind of dry stuff,
but it's the stuff that nobody's

00:48:31.250 --> 00:48:32.990
going to tell you otherwise.

00:48:36.480 --> 00:48:37.810
Okay, finding items.

00:48:38.030 --> 00:48:40.500
How do you find items?

00:48:40.590 --> 00:48:43.670
Specific items can be located
by querying the finder of the

00:48:43.710 --> 00:48:45.700
system events applications.

00:48:45.830 --> 00:48:50.160
And the way that you do
this is just by asking.

00:48:50.210 --> 00:48:53.230
Items can be located in two
different kinds of ways.

00:48:53.400 --> 00:48:56.400
You can identify items by
two different kinds of ways.

00:48:56.400 --> 00:48:58.540
Does anybody know what they are?

00:48:59.140 --> 00:49:03.210
index and property.

00:49:03.210 --> 00:49:05.250
For example, we have people here.

00:49:05.310 --> 00:49:08.450
I'm standing here and I could say,
if I need to find somebody by index,

00:49:08.490 --> 00:49:13.560
I could say, third person in the third
row on my left-hand side,

00:49:13.560 --> 00:49:14.890
please stand up.

00:49:15.150 --> 00:49:16.810
And that would be this
gentleman right here.

00:49:16.860 --> 00:49:18.140
I won't embarrass you.

00:49:18.210 --> 00:49:19.310
Please sit down.

00:49:19.310 --> 00:49:21.310
So that's an index, right?

00:49:21.310 --> 00:49:22.300
Third, third.

00:49:22.550 --> 00:49:26.390
We're looking at a number,
where they are in a position,

00:49:26.390 --> 00:49:28.720
in a list of people or a row of people.

00:49:28.720 --> 00:49:30.890
I'm looking for a specific one.

00:49:30.890 --> 00:49:33.770
I could say, the tenth row,
please stand up.

00:49:33.770 --> 00:49:36.710
And the tenth row from
here would stand up.

00:49:36.790 --> 00:49:41.240
I'm using the index property of an
item to identify a specific one,

00:49:41.340 --> 00:49:43.660
to get to where I want to get to.

00:49:43.660 --> 00:49:48.660
The second way that you can identify
items in AppleScript is by a property.

00:49:48.680 --> 00:49:57.280
Now, we all have properties.

00:49:57.700 --> 00:49:59.060
Every scriptable object has properties.

00:49:59.060 --> 00:50:00.040
A movie has a property of a, of a, um,
duration.

00:50:00.040 --> 00:50:02.630
A movie has a property of a kind.

00:50:02.630 --> 00:50:05.070
Is it an audio track or a video track?

00:50:05.300 --> 00:50:09.030
As a matter of fact,
it relates a lot to the way life is.

00:50:09.570 --> 00:50:11.960
Consider Sal to be a scriptable object.

00:50:12.070 --> 00:50:13.200
Let's say, okay.

00:50:13.720 --> 00:50:15.840
As a scriptable object,
I have certain qualities

00:50:15.840 --> 00:50:17.160
that make me who I am.

00:50:17.820 --> 00:50:24.240
Um, I have a height.

00:50:24.240 --> 00:50:25.370
I have a weight, unfortunately.

00:50:25.370 --> 00:50:25.370
I have an age.

00:50:25.370 --> 00:50:25.370
I have a position in the room.

00:50:25.370 --> 00:50:25.370
I have a

00:50:25.580 --> 00:50:30.940
I have a name and these
qualities define who Sal is or

00:50:31.120 --> 00:50:34.380
help define all that is Sal.

00:50:34.380 --> 00:50:38.460
Now you can use the properties
of a scriptable object as

00:50:38.550 --> 00:50:40.320
a way of identifying it.

00:50:40.610 --> 00:50:43.990
For example, here's one,
would everybody who's

00:50:44.200 --> 00:50:46.170
named Bob please stand up?

00:50:46.560 --> 00:50:46.990
Oh, come on.

00:50:47.000 --> 00:50:47.500
Really?

00:50:47.500 --> 00:50:47.730
An entire place?

00:50:47.790 --> 00:50:49.180
There's no bobs?

00:50:49.260 --> 00:50:49.800
OK.

00:50:50.060 --> 00:50:50.970
Wow.

00:50:51.090 --> 00:50:52.540
Charlene?

00:50:52.610 --> 00:50:53.360
No.

00:50:53.700 --> 00:50:53.700
OK.

00:50:53.770 --> 00:50:54.080
OK.

00:50:54.100 --> 00:50:55.060
But you get the idea.

00:50:55.290 --> 00:50:57.600
I could say-- we could go by color.

00:50:57.740 --> 00:50:59.990
I could say, well,
everybody's wearing a red shirt.

00:51:00.140 --> 00:51:01.180
Please stand up.

00:51:01.280 --> 00:51:04.200
And then people would stand
up if they so felt like it.

00:51:04.340 --> 00:51:05.700
But you can see what I'm talking about.

00:51:05.740 --> 00:51:07.000
You can use a property.

00:51:07.000 --> 00:51:11.000
You can use a quality or a
value of a property as a way

00:51:11.000 --> 00:51:12.890
of identifying a specific item.

00:51:13.110 --> 00:51:16.320
And the same works in AppleScript.

00:51:17.950 --> 00:51:20.700
You can find by index or
you can find by property.

00:51:20.760 --> 00:51:22.900
Here's how you find by index.

00:51:22.940 --> 00:51:27.790
Every scriptable item on disk or
belonging to an application occupies

00:51:27.790 --> 00:51:32.610
a specific space in the order of
items in its parent container.

00:51:32.820 --> 00:51:34.230
What does that mean?

00:51:34.230 --> 00:51:35.110
Okay.

00:51:35.220 --> 00:51:36.770
Finder windows.

00:51:36.790 --> 00:51:39.270
Here's a good one, right?

00:51:39.800 --> 00:51:43.240
Can there be two finder
windows on the same level?

00:51:43.270 --> 00:51:43.580
No.

00:51:43.970 --> 00:51:46.210
For some reason,
there always has to be one finder

00:51:46.210 --> 00:51:48.230
window that can move on top of another.

00:51:48.230 --> 00:51:51.880
There's always one finder
window that gets on another.

00:51:51.880 --> 00:51:54.460
In other words,
if we looked at the finder sideways,

00:51:54.460 --> 00:51:59.440
we would see a stack of
windows that were open.

00:52:00.400 --> 00:52:05.590
That stack is a list of windows,
and every window has an index

00:52:05.620 --> 00:52:10.100
number corresponding to the
way it is in that stack.

00:52:10.100 --> 00:52:12.580
The middle guy might be window three.

00:52:12.580 --> 00:52:15.940
The top guy will be window... Right.

00:52:15.940 --> 00:52:18.940
And the last guy would be the
total sum of the number of windows.

00:52:18.940 --> 00:52:24.810
So the index property identifies where
an object is in the list of objects.

00:52:24.880 --> 00:52:27.540
If I had five movies
open in QuickTime Player,

00:52:27.640 --> 00:52:29.920
there could only be one front movie.

00:52:29.940 --> 00:52:30.300
Right?

00:52:30.300 --> 00:52:34.460
So the front movie would have an
index value of... So I could say,

00:52:34.560 --> 00:52:37.590
"Tell movie one to
play," and it would play.

00:52:37.790 --> 00:52:41.830
If I said, "Tell movie two to play," the
front movie wouldn't play.

00:52:42.070 --> 00:52:43.610
The movie behind it would play.

00:52:43.700 --> 00:52:47.340
So the index property is
a way of identifying a

00:52:47.340 --> 00:52:50.290
particular item in AppleScript.

00:52:50.760 --> 00:52:53.710
Numeric values represent an
item's place and blah blah.

00:52:53.910 --> 00:52:56.070
It's called an index.

00:52:56.820 --> 00:52:58.560
Here's an example.

00:52:58.560 --> 00:53:03.960
Tell application finder to get
item one of the startup disk.

00:53:04.010 --> 00:53:05.910
What's that going to get?

00:53:06.930 --> 00:53:07.640
What would that return?

00:53:07.640 --> 00:53:11.880
It would probably return something like
folder applications of the startup disk.

00:53:11.880 --> 00:53:15.830
It's going to return me a nested
reference to the first object

00:53:15.830 --> 00:53:18.630
that it finds on the startup disk.

00:53:18.870 --> 00:53:29.990
Item 1.

00:53:29.990 --> 00:53:29.990
So I'm using the term item,
which is generic identifier, remember?

00:53:29.990 --> 00:53:29.990
And I'm saying give me the first
one by saying the index value of 1.

00:53:30.280 --> 00:53:33.700
Tell Application Finder
to get item 12 of home.

00:53:33.820 --> 00:53:36.020
Well, that could return anything
on anybody's machine,

00:53:36.110 --> 00:53:39.070
but in this case,
I have a nested reference

00:53:39.630 --> 00:53:42.710
to the folder downloads,
the folder sale of folder

00:53:42.710 --> 00:53:44.110
users of the startup disk.

00:53:44.170 --> 00:53:49.910
So, I'm identifying it by it's
the 12th item in the container

00:53:49.910 --> 00:53:52.690
that I know lovingly as home.

00:53:55.360 --> 00:53:59.860
So, items are, when you have a bunch
of items in a container,

00:53:59.860 --> 00:54:01.470
they're actually like a list.

00:54:01.550 --> 00:54:03.890
This is a list in AppleScript.

00:54:04.200 --> 00:54:06.260
This is what a list looks
like in AppleScript.

00:54:06.350 --> 00:54:09.450
And it's the same kind of list that
works for a list of references,

00:54:09.550 --> 00:54:12.480
a list of data, a list of numbers,
a list of names,

00:54:12.480 --> 00:54:13.900
a list of combination of anything.

00:54:14.000 --> 00:54:16.250
In AppleScript, you can put all kinds
of stuff into a list.

00:54:16.250 --> 00:54:17.600
It doesn't make any difference.

00:54:17.670 --> 00:54:20.830
You don't have to declare,
"This list only has fish." No.

00:54:21.040 --> 00:54:22.950
You can put in anything that you want to.

00:54:23.000 --> 00:54:26.650
And it begins with a curly brace,
and each item in the list

00:54:26.670 --> 00:54:30.800
is separated by a comma,
and it's closed with a curly brace.

00:54:30.810 --> 00:54:34.770
So, let's imagine that
that's a list of items.

00:54:35.980 --> 00:54:43.280
So if I ask teleapplication finder to
get item count of items of home of home.

00:54:43.670 --> 00:54:44.960
Now what's that?

00:54:44.960 --> 00:54:46.870
What am I doing there?

00:54:46.960 --> 00:54:49.500
I'm asking for the
last file or last item.

00:54:49.500 --> 00:54:50.600
It could be an item, right?

00:54:50.600 --> 00:54:51.650
So it could be a folder.

00:54:51.660 --> 00:54:52.420
We don't know.

00:54:52.420 --> 00:54:56.020
But I'm asking for the last
thing in the home directory.

00:54:56.100 --> 00:54:58.900
I'm doing it by with this paren thing.

00:54:58.950 --> 00:55:01.840
As we know in algebra, you know,
what was that?

00:55:01.980 --> 00:55:04.070
It's like turn and then twist.

00:55:04.070 --> 00:55:05.140
I like that.

00:55:06.300 --> 00:55:06.730
Turn and twist.

00:55:06.800 --> 00:55:07.300
That's good.

00:55:07.300 --> 00:55:10.910
The count of items of home
will get executed first because

00:55:10.910 --> 00:55:13.060
it's within parentheses,
right?

00:55:13.220 --> 00:55:15.980
Similar to like what we learned
in seventh grade with algebra.

00:55:16.030 --> 00:55:19.250
Things inside of parentheses get
done first and then the result

00:55:19.250 --> 00:55:22.800
replaces them and then the thing
continues from the outside in.

00:55:23.520 --> 00:55:26.470
So the first thing that this
script will do is it's going to

00:55:26.470 --> 00:55:30.250
get the count of the items of home,
replace that, and then use that number

00:55:30.300 --> 00:55:31.690
as whatever item is.

00:55:31.750 --> 00:55:36.760
If I have 24 items in the home directory,
that will be item 24

00:55:36.760 --> 00:55:38.700
will be returned to me.

00:55:39.470 --> 00:55:43.770
So in this case, it was folder USB keys,
U being the last thing

00:55:43.840 --> 00:55:46.020
I probably had in the folder.

00:55:46.030 --> 00:55:51.320
Now, so far we've been looking at
our list from left to right.

00:55:51.410 --> 00:55:55.680
But AppleScript has this interesting
thing called the negative index.

00:55:55.680 --> 00:55:58.100
Ooh,
see this is the kind of stuff that you

00:55:58.100 --> 00:56:00.770
get when you come to see Uncle Sal.

00:56:01.600 --> 00:56:07.180
AppleScript supports the iteration
of lists actually in both directions.

00:56:07.180 --> 00:56:10.900
As if you're not confused enough,
you need more.

00:56:10.910 --> 00:56:14.830
Items in a list have a positive
index value when the list is

00:56:14.830 --> 00:56:17.930
transverse from left to right,
or from top to bottom

00:56:17.930 --> 00:56:20.040
in the case of Windows,
right?

00:56:20.040 --> 00:56:24.240
But when you read them
from right to left,

00:56:24.520 --> 00:56:29.680
or from bottom to top,
they have negative numbers.

00:56:30.260 --> 00:56:32.040
Ooh, interesting.

00:56:32.250 --> 00:56:37.240
For example, left to right,
this list is item 1, item 2, item 3,

00:56:37.240 --> 00:56:39.550
item 4, item 5, right?

00:56:40.130 --> 00:56:43.720
But when you read it the other way,
from right to left,

00:56:43.760 --> 00:56:48.320
that's item minus one, item minus two,
item minus three, item minus four,

00:56:48.320 --> 00:56:49.720
item minus five.

00:56:49.830 --> 00:56:51.140
Okay, let's do that again.

00:56:51.430 --> 00:56:56.540
Left to right, one, two, three, four,
five this way, back this way, minus one,

00:56:56.540 --> 00:56:59.540
minus two, minus three, minus four,
minus five.

00:56:59.610 --> 00:57:02.100
That's called a negative index value.

00:57:02.100 --> 00:57:03.300
Now why do we know that?

00:57:03.370 --> 00:57:04.460
Why do we want to use that?

00:57:04.500 --> 00:57:05.980
What do we care about that?

00:57:06.020 --> 00:57:10.180
Well, remember how I said tell
application finder to get item

00:57:10.180 --> 00:57:12.420
count of items of home of home?

00:57:12.420 --> 00:57:15.970
That's a lot of work to do just
to get the last guy in the home.

00:57:16.410 --> 00:57:19.010
What else could I use instead?

00:57:19.890 --> 00:57:21.490
Minus one, darn right.

00:57:21.760 --> 00:57:23.800
So if that returns the USB, so does this.

00:57:24.020 --> 00:57:26.760
Tell application finder to
get item minus one of home,

00:57:26.820 --> 00:57:31.020
returns folder USB key of folder
cell of folder users of startup disk.

00:57:31.020 --> 00:57:36.300
So this is an example of why you want to
use negative index values on occasion.

00:57:36.300 --> 00:57:39.120
If I wanted to get the item
before the last item of home,

00:57:39.120 --> 00:57:40.180
what would I use?

00:57:41.490 --> 00:57:42.580
The one before the before.

00:57:42.580 --> 00:57:43.900
Three.

00:57:43.900 --> 00:57:46.640
The one before the before the before.

00:57:46.760 --> 00:57:46.940
Four.

00:57:46.940 --> 00:57:47.820
And now I'm lost.

00:57:47.820 --> 00:57:48.700
I'm not going any farther.

00:57:50.170 --> 00:57:53.310
Okay, we can also find items by range.

00:57:53.420 --> 00:57:56.420
I can ask for a range of
items using index values.

00:57:56.480 --> 00:58:00.170
For example, I could say,
tell application finder to get items

00:58:00.170 --> 00:58:02.630
two through five of the startup disk.

00:58:02.630 --> 00:58:05.710
And that's going to return me
perhaps something like that,

00:58:05.720 --> 00:58:09.070
you know, folder applications and
the next thing in the list.

00:58:09.070 --> 00:58:13.390
So in this case,
the list is a list of references.

00:58:13.390 --> 00:58:15.500
Before it was just a list of names,
right?

00:58:15.500 --> 00:58:18.110
But now a list can
contain anything we want.

00:58:18.120 --> 00:58:21.100
It's a list of first references,
folder applications,

00:58:21.100 --> 00:58:24.610
a startup disk application, finder,
comma, next list item, blah, blah, blah,

00:58:24.790 --> 00:58:26.370
blah, blah, blah, blah,
next list item like that.

00:58:26.540 --> 00:58:31.850
So I get back a list of items by
identifying a range using numbers.

00:58:31.850 --> 00:58:38.330
Tell application finder to get items one
through minus one of the startup disk.

00:58:38.330 --> 00:58:39.770
What will that do?

00:58:39.800 --> 00:58:40.950
Everything.

00:58:40.950 --> 00:58:43.650
Why don't I just use this instead?

00:58:43.810 --> 00:58:45.160
See, that's the beauty of AppleScript.

00:58:45.220 --> 00:58:48.300
We got all this cool stuff,
so instead of doing one to minus one,

00:58:48.300 --> 00:58:49.210
you can just say every.

00:58:49.210 --> 00:58:51.740
Every is a great word in AppleScript.

00:58:51.770 --> 00:58:54.000
Every item of the startup disk.

00:58:55.900 --> 00:58:59.090
Finding items by descriptive index.

00:58:59.100 --> 00:59:02.330
Now, I'm giving you the extra stuff
that you normally don't get,

00:59:02.480 --> 00:59:04.390
so here's something cool.

00:59:04.510 --> 00:59:06.860
Since AppleScript's supposed
to be conversational,

00:59:06.860 --> 00:59:09.600
you can write it as terse as you like,
or you can write it as

00:59:09.640 --> 00:59:10.900
verbose as you like.

00:59:11.560 --> 00:59:14.900
You can use words like this: first,
second, third, fourth, fifth, sixth,

00:59:14.900 --> 00:59:16.860
seventh, eighth, ninth, tenth.

00:59:17.000 --> 00:59:19.500
You can use those instead
of writing out the numbers.

00:59:19.500 --> 00:59:20.080
Why?

00:59:20.080 --> 00:59:21.370
I don't know.

00:59:22.940 --> 00:59:24.940
So you can say, here's why.

00:59:24.970 --> 00:59:28.380
You can tell Application Finder
to get the first item of home.

00:59:28.390 --> 00:59:31.180
So you can use the word first.

00:59:31.870 --> 00:59:37.190
Or you can use first, 23rd, 10th,
you know, 4,678th.

00:59:37.270 --> 00:59:39.100
So you can support--it
supports that as well.

00:59:39.200 --> 00:59:41.690
So you could say,
"Tell application finder to get the

00:59:41.690 --> 00:59:45.640
22nd item of home." Instead of saying,
"Item 22," you could say,

00:59:45.640 --> 00:59:49.180
"22nd item." Conversational.

00:59:49.310 --> 00:59:51.120
Finding items by relative position.

00:59:51.240 --> 00:59:53.300
Now, this is interesting.

00:59:54.040 --> 00:59:57.980
So items can be referenced in terms
of the position relative to other

00:59:57.980 --> 01:00:00.780
items in their parent container.

01:00:00.940 --> 01:00:07.400
So will the person next to the
person on the end wave his hand?

01:00:07.400 --> 01:00:07.400
Of the second row.

01:00:29.210 --> 01:00:29.210
Yes, there you go.

01:00:29.210 --> 01:00:29.210
A little bit of prompting, it worked.

01:00:29.210 --> 01:00:29.210
So there,
I took somebody as an identifier,

01:00:29.210 --> 01:00:29.210
was the gentleman on the
end of the second row,

01:00:29.210 --> 01:00:29.210
and that was my pivot.

01:00:29.210 --> 01:00:29.210
And then based upon him,
I referred to somebody else.

01:00:29.210 --> 01:00:29.210
Would the person who's sitting
across from the gentleman in

01:00:29.210 --> 01:00:29.210
the second row wave his hand?

01:00:29.380 --> 01:00:29.750
Right here.

01:00:29.760 --> 01:00:36.060
So you're using an item by index and then
referring in relative position to that.

01:00:36.060 --> 01:00:38.410
You can do the same thing
with AppleScript and files

01:00:38.540 --> 01:00:39.650
and things like that.

01:00:39.700 --> 01:00:43.940
And you can use these terms
when doing relative position.

01:00:43.940 --> 01:00:47.920
Front, first, back, last, middle.

01:00:48.440 --> 01:00:50.980
So I could say,
give me the name of the middle

01:00:51.080 --> 01:00:54.750
window of a stack of windows,
and it's going to find the window

01:00:54.870 --> 01:00:57.340
that's in the middle and return that.

01:00:57.350 --> 01:01:01.380
I could say,
give me the name of the last window.

01:01:01.380 --> 01:01:04.220
Give me the name of the front window.

01:01:04.220 --> 01:01:06.580
And as a matter of fact,
there's the last item

01:01:06.590 --> 01:01:09.820
of the startup disk,
the middle track of the front library.

01:01:09.820 --> 01:01:10.880
That's iTunes.

01:01:10.880 --> 01:01:18.280
You can expand and alter that relative
positioning using the words after.

01:01:18.440 --> 01:01:20.300
and before.

01:01:21.430 --> 01:01:25.420
The item before the last item,
the item after the middle item.

01:01:25.420 --> 01:01:29.700
So those are examples of how you
can use relative positioning to find

01:01:29.700 --> 01:01:32.110
specific things with index values.

01:01:32.250 --> 01:01:36.820
Also, you can generate random things by
using the word "some." So if I ask

01:01:36.820 --> 01:01:41.100
for some item of the startup disk,
every time, it's going to give me

01:01:41.100 --> 01:01:43.090
something different.

01:01:43.500 --> 01:01:45.500
So that's finding items by index.

01:01:45.500 --> 01:01:49.180
That's an important concept to get,
but once you do that with AppleScript,

01:01:49.180 --> 01:01:51.260
it's really good for
doing that kind of thing.

01:01:51.260 --> 01:01:54.990
The only thing that's tricky
about index is if something moves,

01:01:55.000 --> 01:01:56.430
everything changes.

01:01:56.430 --> 01:02:00.230
If somebody leaves this row,
the quality of the row is changed now,

01:02:00.240 --> 01:02:03.670
and my index stuff that I had
set up doesn't work anymore.

01:02:03.670 --> 01:02:07.510
So be careful when using index
value as a way to find an item,

01:02:07.520 --> 01:02:09.410
but it can be very useful.

01:02:09.870 --> 01:02:12.620
Now, finding items by property.

01:02:12.890 --> 01:02:14.690
Well, you pretty much guessed this one,
too, right?

01:02:14.690 --> 01:02:18.210
Every item on disk, like Sal,
has a property name, blah, blah.

01:02:18.210 --> 01:02:19.680
He gets older and older.

01:02:19.680 --> 01:02:21.400
Some of the properties you can change.

01:02:21.400 --> 01:02:22.780
I can change my shirt.

01:02:22.860 --> 01:02:24.180
I can't change my age.

01:02:24.240 --> 01:02:27.410
That, unfortunately,
is a read-only property.

01:02:30.900 --> 01:02:34.650
There are some properties like name,
kind, which is also file type.

01:02:34.710 --> 01:02:38.580
You can find items by file type, size,
creation, modification, dates.

01:02:38.620 --> 01:02:43.350
Just about any property of an item can be
used to delineate it when you're looking

01:02:43.350 --> 01:02:45.570
for it with AppleScript on a disk.

01:02:46.410 --> 01:02:58.610
You can find them by comparing
the value of their properties

01:02:58.720 --> 01:03:04.910
to a desired set of values.

01:03:04.910 --> 01:03:04.910
For example,
the first document file whose

01:03:04.910 --> 01:03:04.910
name contains Smith Project.

01:03:04.910 --> 01:03:04.910
I'm asking for the first document file
whose name contains Smith Project.

01:03:04.910 --> 01:03:04.910
Now watch this magic happen.

01:03:05.100 --> 01:03:08.250
The first folder whose size
is greater than 500,000,

01:03:08.270 --> 01:03:09.160
that's bytes.

01:03:09.160 --> 01:03:12.940
In AppleScript world, you'd say bytes,
and then you'd have to do the math.

01:03:12.940 --> 01:03:14.780
We have math, though.

01:03:14.870 --> 01:03:17.400
Every document file
whose file type is JPEG,

01:03:17.400 --> 01:03:18.880
hmm, might be useful.

01:03:18.880 --> 01:03:21.800
Every document file whose
name extension is PDF,

01:03:21.910 --> 01:03:25.100
hmm, that might be interesting, too,
as well.

01:03:26.060 --> 01:03:27.490
Let's examine this farther.

01:03:27.580 --> 01:03:30.490
How do you do these queries,
these finding queries?

01:03:30.600 --> 01:03:32.150
How do you create a query?

01:03:32.150 --> 01:03:34.790
Well, we know that when you do
Command-F in the finder,

01:03:34.870 --> 01:03:35.850
what do you get?

01:03:35.920 --> 01:03:38.850
You get that pop-up
window thing that has the,

01:03:38.980 --> 01:03:43.670
you go add another detail, add, remove,
damn, I want the other detail,

01:03:43.670 --> 01:03:45.400
the pop date created.

01:03:46.010 --> 01:03:49.870
So you're basically writing a sentence
is what you're doing with those things,

01:03:49.870 --> 01:03:50.330
right?

01:03:50.330 --> 01:03:52.620
You want something whose
name begins with this,

01:03:52.700 --> 01:03:54.880
but creation date is after so-and-so.

01:03:56.390 --> 01:04:03.430
Well, a query in AppleScript is composed
by combining these elements first.

01:04:04.300 --> 01:06:47.700
[Transcript missing]

01:06:48.000 --> 01:06:51.240
That's right, it's all right,
it's all right, it's all bad.

01:06:51.240 --> 01:06:54.580
Target properties, so then you have to
identify what property is,

01:06:54.660 --> 01:06:56.400
then your comparison operator.

01:06:56.400 --> 01:06:58.140
Now this is the interesting one.

01:06:58.140 --> 01:06:58.780
Contains.

01:06:58.850 --> 01:07:01.380
Well, you can use every one
that you can think of.

01:07:01.380 --> 01:07:05.520
Contains, does not contain, is in,
begins with, ends with, is greater than,

01:07:05.520 --> 01:07:07.680
is less than,
is greater than or equal to,

01:07:07.680 --> 01:07:11.100
is not greater than or equal to,
isn't greater than or equal to.

01:07:12.540 --> 01:07:15.300
Just about any one of the things that
you can think up in your head for

01:07:15.300 --> 01:07:18.680
the English language will fit into
one of these comparison operators.

01:07:19.550 --> 01:07:21.950
And then finally,
what is the value of a property

01:07:21.950 --> 01:07:23.370
that you're searching on?

01:07:23.740 --> 01:07:27.260
And that is, in this particular case,
the Name Value Smith project.

01:07:28.310 --> 01:07:32.980
So all of those things that
have names just go into that.

01:07:32.980 --> 01:07:34.870
We understand these implicitly.

01:07:34.870 --> 01:07:37.850
You really don't have to
think about them beyond that.

01:07:37.990 --> 01:07:40.270
Now,
here's how you can change the positional

01:07:40.270 --> 01:07:42.500
indicator to change your query.

01:07:42.500 --> 01:07:43.800
The first document file.

01:07:43.900 --> 01:07:45.510
The last document file.

01:07:45.510 --> 01:07:46.950
Every document file.

01:07:46.950 --> 01:07:50.820
You can change the comparison
operator to change your query.

01:07:50.820 --> 01:07:54.250
Every document file whose
name contains SmithProject.

01:07:54.400 --> 01:07:57.380
Every document file whose name
does not contain SmithProject.

01:07:57.390 --> 01:08:00.650
Every document file whose
name begins with SmithProject.

01:08:00.860 --> 01:08:04.080
Every document file whose
name ends with SmithProject.

01:08:04.160 --> 01:08:07.010
And you can also change the property
value that you're looking for.

01:08:07.020 --> 01:08:10.140
Every document file whose
name contains SmithProject.

01:08:10.140 --> 01:08:13.770
Or every document file whose
name contains ACCStats.

01:08:13.770 --> 01:08:16.140
Do you get the idea of how this works?

01:08:16.140 --> 01:08:18.500
It's pretty much like you think, right?

01:08:18.730 --> 01:08:20.280
Now, what about recursing?

01:08:20.430 --> 01:08:23.280
How do you get down through a directory,
a hierarchy?

01:08:23.380 --> 01:08:26.710
So if I have a folder within my
documents folder for a project,

01:08:26.710 --> 01:08:29.180
I want to search
everything in that folder.

01:08:29.310 --> 01:08:30.180
How do I do that?

01:08:30.180 --> 01:08:32.620
Well, you go to JavaScript and
you write for if,

01:08:32.780 --> 01:08:35.250
blah, bleh,
and then you start doing a recursive

01:08:35.300 --> 01:08:38.960
loop that recalls itself back up at the
top again when you get down to here.

01:08:38.990 --> 01:08:39.220
No.

01:08:39.220 --> 01:08:40.580
We don't do that in AppleScript.

01:08:40.580 --> 01:08:41.470
We're civilized.

01:08:41.470 --> 01:08:45.640
We're bohemian but civilized, darn it.

01:08:45.640 --> 01:08:49.480
And the way you do that is with
the entire contents property.

01:08:49.670 --> 01:08:53.600
Every document file of the entire
contents of folder documents of home

01:08:53.600 --> 01:08:57.730
whose name contains SmithProject
will do all the recursing for me.

01:08:57.990 --> 01:08:58.960
What will I get back?

01:08:58.960 --> 01:09:03.350
I'll get back a list of references
to every item within that entire

01:09:03.350 --> 01:09:05.430
hierarchy who might have been in
that folder for a long matches those

01:09:05.530 --> 01:09:09.410
particular query objects that I set up.

01:09:10.130 --> 01:09:11.540
Now, let's take a look at some of that.

01:09:11.620 --> 01:09:14.000
Can I go to demo, please?

01:09:14.240 --> 01:09:15.900
One, demo one.

01:09:17.070 --> 01:09:20.230
Index value, demo one, demo two.

01:09:20.320 --> 01:09:22.340
Demo one, demo two.

01:09:22.520 --> 01:09:27.510
Can I go to the machine next to demo,
the other demo machine besides demo two?

01:09:27.510 --> 01:09:32.910
That is not,
a demo machine that is not demo two.

01:09:34.570 --> 01:09:35.570
Quick, write it again.

01:09:35.800 --> 01:09:37.540
Write it again.

01:09:37.620 --> 01:09:38.040
Demo one.

01:09:38.100 --> 01:09:39.610
Thank you.

01:09:41.050 --> 01:09:43.060
Sal, your irreverence has cost you.

01:09:43.140 --> 01:09:47.140
Okay,
you guys are going to make it hard on me,

01:09:47.140 --> 01:09:48.600
all right?

01:09:48.610 --> 01:09:49.900
I'm going to try something here.

01:09:49.900 --> 01:09:52.290
I'm just going to copy this.

01:09:53.700 --> 01:09:57.510
So I'm going to go to the script
editor and I'm going to set up a --

01:09:57.550 --> 01:10:00.080
open the window here called library.

01:10:00.080 --> 01:10:03.140
And this is my little shortcut
window to my favorite things.

01:10:03.140 --> 01:10:06.020
I'm just going to go click
a new script for that.

01:10:06.020 --> 01:10:10.400
And then I'm going to go up
to the menu here and go paste.

01:10:10.400 --> 01:10:13.020
No, it doesn't let me paste
reference anymore?

01:10:13.020 --> 01:10:14.440
Okay.

01:10:14.440 --> 01:10:16.520
Feature.

01:10:17.020 --> 01:10:18.740
Never mind.

01:10:18.740 --> 01:10:18.740
You didn't hear that.

01:10:19.290 --> 01:10:22.440
Okay, so what I want to do is I want
to do some searching here.

01:10:22.440 --> 01:10:30.650
So let me see if I have
anything that's searchable.

01:10:32.180 --> 01:10:39.200
Every file, every document file,
document file of the desktop,

01:10:39.400 --> 01:10:45.700
[Transcript missing]

01:10:45.900 --> 01:10:49.120
JPG image.

01:10:49.120 --> 01:10:51.080
I think that works.

01:10:52.840 --> 01:10:57.020
And it gave me a link to an image.

01:10:57.020 --> 01:10:59.420
And it gave it to me in a list format.

01:10:59.480 --> 01:11:01.970
Why did it give it to me in a list?

01:11:02.240 --> 01:11:05.780
Because I asked for every,
and it just happens to be one, right?

01:11:05.910 --> 01:11:07.840
So if I want to get
something out of that list,

01:11:07.990 --> 01:11:09.900
then I could say,

01:11:10.180 --> 01:11:16.060
Set this image, my variable, to item1 of,
and then I'll put that all

01:11:16.060 --> 01:11:19.250
in parentheses like this,
so I'll get the first one.

01:11:19.390 --> 01:11:22.250
That's one way to get the first one.

01:11:24.320 --> 01:11:26.740
Can't get item one of
every document file.

01:11:26.740 --> 01:11:29.830
That's interesting.

01:11:31.830 --> 01:11:32.640
That's a bug.

01:11:32.640 --> 01:11:37.490
I'll have it done by Tuesday.

01:11:37.910 --> 01:11:40.190
Let's shortcut the process by doing that.

01:11:40.330 --> 01:11:41.760
And that gives me back one.

01:11:41.910 --> 01:11:42.220
Why?

01:11:42.470 --> 01:11:44.480
Because I asked for the
first instead of every.

01:11:44.590 --> 01:11:49.990
Now that I have this image,
then I can go open this image.

01:11:52.810 --> 01:11:56.280
So there's how to do a query and find
something and do something with it,

01:11:56.310 --> 01:11:56.600
right?

01:11:56.600 --> 01:12:02.370
Let's try something else.

01:12:02.930 --> 01:12:02.930
Let's go, uh, uh,

01:12:04.200 --> 01:12:09.400
[Transcript missing]

01:12:10.600 --> 01:12:15.700
[Transcript missing]

01:12:17.590 --> 01:12:20.570
Okay, there's a lot of stuff.

01:12:20.670 --> 01:12:23.550
You can see that it returns me a
list of all the matching items,

01:12:23.590 --> 01:12:23.880
right?

01:12:24.270 --> 01:12:28.760
Folder sites, whose name contains SI.

01:12:31.500 --> 01:12:37.730
folder music, which contains SI,
and folder sites that contains SI.

01:12:38.930 --> 01:12:42.520
And then I wonder if I can say
reveal if it will let me do that.

01:12:42.570 --> 01:12:44.720
I'm going to try that.

01:12:48.000 --> 01:12:49.660
And it probably did the --
it selected both of them.

01:12:49.660 --> 01:12:50.290
There they are.

01:12:50.500 --> 01:12:51.680
Both of them have been selected.

01:12:52.700 --> 01:12:54.690
So -- Ooh.

01:13:17.970 --> 01:13:17.970
So what we have here is cleaning
and waxing in one motion.

01:13:17.970 --> 01:13:17.970
One motion I find the stuff,
the other one I actually

01:13:17.970 --> 01:13:17.970
do something with it.

01:13:17.970 --> 01:13:17.970
In one line of AppleScript we are
able to clean and wax together.

01:13:17.970 --> 01:13:17.970
And that's how you do it using
these type of finding techniques.

01:13:17.970 --> 01:13:17.970
Let's go back to slide machine please,
which is laptop.

01:13:18.570 --> 01:13:20.140
Now I'm going to go through some of this.

01:13:20.220 --> 01:13:22.450
This is secret stuff that we're done.

01:13:22.620 --> 01:13:26.440
Oh, we're done?

01:13:26.440 --> 01:13:29.310
Can I just have everybody
come back to my room?

01:13:29.990 --> 01:13:31.140
You guys want to come back to my room?

01:13:31.140 --> 01:13:32.150
They won't mind.

01:13:32.210 --> 01:13:33.600
The Argent, I'm right over at the Argent.

01:13:33.600 --> 01:13:35.190
We'll just walk in, you know.

01:13:35.190 --> 01:13:36.060
They're with me.

01:13:36.190 --> 01:13:39.760
I apologize about that,
but I hope perhaps that maybe this

01:13:39.760 --> 01:13:43.850
gave you a little inkling of what
some of the AppleScript can do for

01:13:43.850 --> 01:13:46.310
you and a little bit of the ability.

01:13:46.310 --> 01:13:50.050
One place you go,
www.apple.com slash AppleScript.

01:13:50.050 --> 01:13:54.980
Click the resources button and there's
a ton of stuff there for you to peruse.

01:13:55.300 --> 01:13:57.010
Thank you so much.

01:13:57.010 --> 01:13:57.990
I appreciate it.

01:13:57.990 --> 01:13:57.990
Applause