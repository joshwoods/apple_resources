WEBVTT

00:00:26.700 --> 00:00:29.060
Anyways, we're here to talk about
Apple Open Directory and

00:00:29.060 --> 00:00:30.780
specific authentication.

00:00:30.780 --> 00:00:33.920
Based on your support last year
of the overflow room at San Jose,

00:00:33.970 --> 00:00:35.700
they decided to give me
two sessions this year.

00:00:35.700 --> 00:00:38.580
So you can be bored this afternoon,
and I look forward to

00:00:38.590 --> 00:00:40.700
seeing all of you tomorrow,
tomorrow morning's

00:00:40.700 --> 00:00:41.960
Open Directory session.

00:00:42.000 --> 00:00:44.330
As the announcer said,
I'm David O'Rourke.

00:00:44.430 --> 00:00:46.970
I'm the engineering
manager for Open Directory,

00:00:46.990 --> 00:00:49.990
and today we're going to
talk about authentication.

00:00:50.320 --> 00:00:52.710
What I'd like to do is review
the current Jaguar feature set,

00:00:52.810 --> 00:00:54.960
because I know everyone here,
some of the people might be new.

00:00:54.960 --> 00:00:57.130
We're going to cover new
features for authentication.

00:00:57.140 --> 00:00:59.140
They break down into three basic areas.

00:00:59.240 --> 00:01:02.870
We have local authentication,
open directory password server and

00:01:02.870 --> 00:01:06.310
what we're doing in that space,
and Apple single sign-on slash

00:01:06.340 --> 00:01:08.160
Kerberoes implementation.

00:01:08.160 --> 00:01:14.580
We'll do a summary, we'll do a wrap-up,
and hopefully we'll have some time

00:01:14.580 --> 00:01:14.580
for Q&A if I don't go too long.

00:01:16.020 --> 00:01:19.480
So, Jaguar authentication,
the product that most of you probably

00:01:19.480 --> 00:01:23.400
had installed on your PowerBooks before
we gave you the developer CD.

00:01:23.590 --> 00:01:25.800
Jaguar currently supports Crypt.

00:01:25.900 --> 00:01:27.050
All of us are familiar with Crypt.

00:01:27.180 --> 00:01:29.770
It supports the
Open Directory Password Server.

00:01:29.880 --> 00:01:33.500
It currently supports Kerbero,
it supports LDAP bind,

00:01:33.660 --> 00:01:37.280
and it supports any other method
of authentication if you implement

00:01:37.280 --> 00:01:39.000
an Open Directory plug-in.

00:01:39.380 --> 00:01:42.910
In Jaguar, we introduced the new notion
of a user attribute called

00:01:42.960 --> 00:01:46.200
the authentication authority,
which is a hint to Jaguar as to

00:01:46.200 --> 00:01:47.880
how to best authenticate this user.

00:01:47.880 --> 00:01:50.910
You're going to see later in this
presentation and throughout the

00:01:50.910 --> 00:01:53.990
Panther process that we're going to
start leveraging the authentication

00:01:54.480 --> 00:01:56.320
authority much more into the future.

00:01:57.520 --> 00:02:00.750
So what authentication authority
values do we have right now?

00:02:00.940 --> 00:02:05.700
We have basic, and this is an attribute
stored in a user record,

00:02:05.770 --> 00:02:08.440
and if its value is basic,
it basically says the

00:02:08.450 --> 00:02:09.900
user is using crypt.

00:02:09.950 --> 00:02:13.720
If this attribute is absent,
we also assume the user is using crypt,

00:02:13.790 --> 00:02:16.360
because any existing user record
that was crypt-based didn't have

00:02:16.410 --> 00:02:17.740
an authentication authority.

00:02:17.740 --> 00:02:20.850
So really the basic authentication
authority is there for

00:02:20.850 --> 00:02:22.570
intellectual completeness.

00:02:22.580 --> 00:02:25.750
It doesn't serve any purpose
other than to clearly indicate

00:02:25.750 --> 00:02:26.580
this user is crypt-based.

00:02:26.730 --> 00:02:28.900
The new attribute that we
introduced in Jaguar was the

00:02:28.900 --> 00:02:30.330
Apple Password Server attribute.

00:02:30.510 --> 00:02:32.940
This consisted of a keyword,
Apple Password Server,

00:02:32.940 --> 00:02:34.530
which is up on the screen.

00:02:34.670 --> 00:02:37.160
It's followed by an ID,
a public key of the Password Server,

00:02:37.240 --> 00:02:39.820
and the network address of
the Password Server that you

00:02:39.820 --> 00:02:41.600
would contact to authenticate.

00:02:41.600 --> 00:02:49.350
This is how, in LDAP or NetInfo,
we indicate that a user's authentication

00:02:49.350 --> 00:02:51.590
request should be redirected to
talk to the Apple Password Server.

00:02:52.510 --> 00:02:55.500
So for Jaguar changes, we had a lot of
infrastructure work to do.

00:02:55.500 --> 00:02:57.940
We had to get login window
onto directory services.

00:02:57.940 --> 00:03:00.380
We had to get secure framework
onto directory services.

00:03:00.380 --> 00:03:02.430
We had to pamify the entire Core OS.

00:03:02.430 --> 00:03:07.100
Most of the FreeBSD code we adopted
wasn't adopting an API abstraction.

00:03:07.100 --> 00:03:11.180
And because of that,
we couldn't replace the crypt password,

00:03:11.180 --> 00:03:13.810
and if we did, these apps would break.

00:03:13.870 --> 00:03:17.690
And we had the directory service APIs,
of course, that already supported this.

00:03:17.700 --> 00:03:21.400
So the major accomplishment for
Jaguar last year was that we managed

00:03:21.400 --> 00:03:24.610
to get most of Apple software to
not care how passwords are handled.

00:03:24.680 --> 00:03:27.190
In Puma or 10.1, that was not the case.

00:03:27.240 --> 00:03:29.510
If you remove the crypt password,
there was a lot of software that broke.

00:03:29.580 --> 00:03:33.030
So the major accomplishment
for Jaguar was we got all of

00:03:33.100 --> 00:03:35.790
Apple software cleaned up not to care.

00:03:36.430 --> 00:03:40.280
The Open Directory Password Server was
also introduced with Jaguar,

00:03:40.280 --> 00:03:41.620
with Jaguar Server.

00:03:41.700 --> 00:03:42.660
It's a password server.

00:03:42.660 --> 00:03:45.530
It's based on the open standard of Sassl,
and it provides comprehensive

00:03:45.600 --> 00:03:48.620
network authentication support for
a wide variety of network protocols.

00:03:48.620 --> 00:03:51.010
How many people have heard of APOP?

00:03:51.560 --> 00:03:54.060
How many people have heard of CRAM MD5?

00:03:54.160 --> 00:03:57.630
NT Land Manager, SHA-1,
shall I keep going?

00:03:57.630 --> 00:04:01.380
The Password Server supports all of
these methods so that you can have a

00:04:01.380 --> 00:04:06.260
single password supported across multiple
network authentication protocols.

00:04:06.260 --> 00:04:09.390
For those of you who have
implemented authentication systems,

00:04:09.390 --> 00:04:10.220
this is no easy trick.

00:04:12.300 --> 00:04:14.950
So the authentication methods
that we support with Password

00:04:14.950 --> 00:04:20.050
Server are MD5 Digest,
CRAM MD5, NTN Land Manager, APOP,

00:04:20.210 --> 00:04:24.900
WebDAV Digest, Two-Way Random,
and Apple's own Diffie-Hellman Exchange,

00:04:24.900 --> 00:04:26.100
which is used by AFP.

00:04:26.100 --> 00:04:29.960
I've associated the most common protocols
that use each of these auth methods,

00:04:29.970 --> 00:04:33.560
but any protocol could, in theory,
use any auth method, but, you know,

00:04:33.740 --> 00:04:36.620
and typically these are what
they're associated with.

00:04:36.990 --> 00:04:39.910
All of these methods are secure to
some degree if you believe network

00:04:39.910 --> 00:04:43.150
challenge response protocols are secure,
so none of these disclose the

00:04:43.150 --> 00:04:44.860
clear text password on the wire.

00:04:44.860 --> 00:04:48.710
But all of them are necessary to support
various network service protocols.

00:04:50.810 --> 00:04:54.500
So, last year I had a slide which I heard
after the feedback was quite popular.

00:04:54.500 --> 00:04:58.140
It just runs you a quick
diagram through how a Password

00:04:58.170 --> 00:05:01.660
Server authentication works for logging
on to a mythical network service,

00:05:01.700 --> 00:05:03.030
and I'd like to drop in a network.

00:05:03.110 --> 00:05:05.310
So, we have the Mac OS X client.

00:05:05.310 --> 00:05:09.940
It will be talking to the Jaguar server,
AFP, FTP, IMAP, SMB.

00:05:09.940 --> 00:05:12.230
It's going to look the user
record up in a directory server,

00:05:12.230 --> 00:05:14.470
and it's going to verify
that with a Password Server.

00:05:14.920 --> 00:05:18.180
So, the first thing that happens
is a Mac OS X client contacts

00:05:18.180 --> 00:05:21.920
the Jaguar server and says,
hey, I want AFP service.

00:05:21.920 --> 00:05:24.250
I'd like to do two-way
random number exchange,

00:05:24.250 --> 00:05:25.440
and my name is George.

00:05:25.520 --> 00:05:29.170
The Jaguar server takes George,
looks them up in the directory server,

00:05:29.210 --> 00:05:32.540
and what it retrieves from the
directory server is George's name,

00:05:32.540 --> 00:05:35.200
George's UID,
and the very most important attribute

00:05:35.250 --> 00:05:37.260
is it retrieves the auth authority.

00:05:37.260 --> 00:05:40.920
The auth authority indicates that
George is Password Server based,

00:05:40.940 --> 00:05:44.320
and this is the network address
that this user should go to.

00:05:44.320 --> 00:05:44.900
So, that's the first thing that happens.

00:05:44.900 --> 00:05:47.710
So, the Jaguar server contacts the
Password Server and conducts a

00:05:47.760 --> 00:05:50.300
network-based authentication,
choosing an appropriate

00:05:50.310 --> 00:05:51.420
authentication method.

00:05:51.420 --> 00:05:53.680
The Password Server responds
with success,

00:05:53.840 --> 00:05:55.340
even if the password's wrong.

00:05:55.340 --> 00:05:56.260
No, I'm just kidding.

00:05:58.420 --> 00:06:02.840
And the Jaguar server says
you can log on or says no.

00:06:02.840 --> 00:06:06.400
So this is very similar to Kerbero
authentication for those of you,

00:06:06.400 --> 00:06:08.510
but it's password server-based
and there's no credential

00:06:08.510 --> 00:06:09.640
management going on here.

00:06:09.640 --> 00:06:13.580
But the password server is the
repository of the user's passwords.

00:06:13.580 --> 00:06:17.050
There are several advantages
to the password server.

00:06:17.050 --> 00:06:20.220
It maintains a single password
for all network protocols.

00:06:20.440 --> 00:06:22.430
Part of Apple's strategy,
if you haven't heard this,

00:06:22.430 --> 00:06:25.020
is we take open source software
and make it easy to deploy.

00:06:25.020 --> 00:06:27.820
Well, a lot of network administrators
don't want to set up separate

00:06:27.820 --> 00:06:30.820
password databases for all their
different networking protocols.

00:06:30.820 --> 00:06:33.720
They want to create a user once,
they want to assign a password once,

00:06:33.720 --> 00:06:36.970
and they want to know that that user can
log on to every single network protocol

00:06:36.970 --> 00:06:38.700
they might turn on today or tomorrow.

00:06:38.700 --> 00:06:42.470
So the password server's
role is to maintain a single

00:06:42.470 --> 00:06:43.560
password for all passwords.

00:06:43.650 --> 00:06:45.840
possible networking
protocols that we support.

00:06:45.840 --> 00:06:50.610
That means we need to allow
support for secure legacy

00:06:50.610 --> 00:06:52.350
network authentication protocols.

00:06:52.360 --> 00:06:55.560
If you don't have this requirement,
you don't have to have a password server.

00:06:55.560 --> 00:06:58.900
If you do have this requirement,
you have to have a password server.

00:06:58.900 --> 00:07:00.730
Most people have this requirement.

00:07:00.740 --> 00:07:04.380
It also supports long
passwords up to 511 bytes.

00:07:04.460 --> 00:07:08.100
I picked bytes and not characters
because UTF-8 isn't necessarily

00:07:08.100 --> 00:07:09.380
a single byte per character.

00:07:09.380 --> 00:07:13.930
For arbitrary strings,
it may be as little as 200 characters,

00:07:13.930 --> 00:07:16.150
the user types, but it is 512 bytes.

00:07:16.220 --> 00:07:19.440
It enforces password
policies for all accounts.

00:07:19.440 --> 00:07:23.080
It's not subject to hacking
by download of hashes.

00:07:23.100 --> 00:07:25.870
How many people are familiar with offline
dictionary attacks in the audience?

00:07:25.950 --> 00:07:28.090
You can't do that with
the password server.

00:07:28.100 --> 00:07:32.440
Not even the password server
administrator can capture the hashes

00:07:32.530 --> 00:07:33.920
out of the password server database.

00:07:33.920 --> 00:07:37.130
There's no known attack that I know
of on the password server that can

00:07:37.130 --> 00:07:39.820
get the hashes into a user's hand
where they can work them offline.

00:07:41.240 --> 00:07:43.650
It supports standard security
techniques such as slowing

00:07:43.650 --> 00:07:46.390
down on successive failures,
policy to shut down the account

00:07:46.400 --> 00:07:48.960
after three or four failed attempts,
all of those standard things.

00:07:48.960 --> 00:07:53.010
And more importantly,
it also has its own RSA public key,

00:07:53.140 --> 00:07:55.870
private key pair so that the
password server can't be spoofed.

00:07:55.900 --> 00:07:58.740
In the design,
if you could set up the password

00:07:58.820 --> 00:08:01.460
server and take over an IP address
and just have a password server

00:08:01.460 --> 00:08:04.930
that said yes every single time,
the client would trust what

00:08:04.930 --> 00:08:08.740
the password server would say
and allow that user to log on.

00:08:08.760 --> 00:08:12.060
Well, the client, when it's contacted,
when it's contacting the password server,

00:08:12.060 --> 00:08:15.560
actually challenges the password server
to prove it knows the private key.

00:08:15.560 --> 00:08:19.710
So you cannot spoof being a password
server on the network and we're

00:08:19.710 --> 00:08:22.150
going to leverage this more for
some of the new features in Jaguar.

00:08:24.260 --> 00:08:25.480
Jaguar Kerbero support.

00:08:25.650 --> 00:08:28.920
Thanks to our MIT brethren,
Jaguar came with full Kerbero support.

00:08:29.050 --> 00:08:32.390
MIT provided us with a very
robust Mac OS X Kerberos client.

00:08:33.010 --> 00:08:35.580
And Apple provided
configuration documentation,

00:08:35.580 --> 00:08:39.140
a lot more than what's listed here,
but that's one example document

00:08:39.140 --> 00:08:42.480
that Apple provided of how to
configure Kerberos in Jaguar.

00:08:42.700 --> 00:08:46.240
Apple Kerberized many servers and
clients in the Jaguar time frame.

00:08:46.240 --> 00:08:47.020
There's the list.

00:08:47.090 --> 00:08:50.700
For Jaguar client, we Kerberized AFP,
we Kerberized the

00:08:50.700 --> 00:08:53.440
Mac OS X Mail application,
we Kerberized login window,

00:08:53.440 --> 00:08:54.470
and we Kerberized Telnet.

00:08:54.510 --> 00:08:58.860
In Jaguar Server, we Kerberized AFP,
we Kerberized IMAP, SMTP,

00:08:58.890 --> 00:09:00.090
I think we Kerberized POP.

00:09:00.200 --> 00:09:01.340
Did we Kerberize POP, Marshall?

00:09:01.340 --> 00:09:02.440
I don't know.

00:09:02.650 --> 00:09:02.830
Okay.

00:09:02.860 --> 00:09:06.360
And we Kerberized the FTP server
that we shipped with Jaguar Server.

00:09:08.580 --> 00:09:10.300
So with Jaguar, we did a lot of things.

00:09:10.300 --> 00:09:12.410
We expanded the set of
choices for authentication.

00:09:12.570 --> 00:09:17.700
We abstracted the entire operating system
to not care how passwords are managed.

00:09:17.710 --> 00:09:21.190
And Panther is going to introduce
even more change now that we

00:09:21.190 --> 00:09:22.840
have these building blocks.

00:09:22.920 --> 00:09:24.990
So what I'd like to get into
is what you're all here for,

00:09:25.020 --> 00:09:29.100
which is to talk about what we're
doing in authentication for Panther.

00:09:30.010 --> 00:09:31.830
And first,
we're going to talk about what changes

00:09:31.890 --> 00:09:33.430
we've made to local authentication.

00:09:33.540 --> 00:09:36.340
And what I mean by local authentication
are the user records that are kept

00:09:36.340 --> 00:09:39.510
locally on your PowerBook that are
created by the setup assistant or

00:09:39.510 --> 00:09:42.880
by the local system pref thing,
not user records created

00:09:42.880 --> 00:09:44.490
by the server tools.

00:09:44.910 --> 00:09:48.940
The first thing that most of you should
stand up and applaud is Crypt is dead.

00:09:48.970 --> 00:09:51.930
There is no readable Crypt password.

00:09:53.820 --> 00:09:57.060
The default local authentication
is now stored in a shadow file

00:09:57.060 --> 00:09:58.840
for all local user accounts.

00:09:58.880 --> 00:10:00.230
That's strange bulleting there.

00:10:00.230 --> 00:10:01.760
I had that file without a bullet.

00:10:01.760 --> 00:10:04.580
File for all local user accounts
is not its own bullet point.

00:10:04.770 --> 00:10:08.560
Anyways, Crypt still works,
but no administration tools on

00:10:08.610 --> 00:10:10.940
Panther will create a Crypt user.

00:10:10.940 --> 00:10:14.680
No administration tools
will create a Crypt user.

00:10:14.680 --> 00:10:15.570
It is not broken.

00:10:15.670 --> 00:10:17.380
It's continued to be supported.

00:10:17.380 --> 00:10:19.750
If there are legacy Crypt users,
they will work just as well

00:10:19.750 --> 00:10:20.910
as they've always worked.

00:10:21.020 --> 00:10:25.950
But no GUI tools that we ship with
Panther will create the users with Crypt.

00:10:25.960 --> 00:10:29.430
Your application should not
be relying on Crypt passwords.

00:10:29.480 --> 00:10:34.670
Panther will break applications that
require a readable Crypt password.

00:10:34.730 --> 00:10:36.000
This is not a bug.

00:10:36.000 --> 00:10:40.880
It is a necessary evolution of the
OS for us to close this security hole.

00:10:40.880 --> 00:10:46.330
If your application requires a readable
Crypt password to authenticate a user,

00:10:46.330 --> 00:10:50.300
you must adopt a password
verification abstraction.

00:10:52.130 --> 00:10:55.060
There are three abstractions
that you could adopt to get

00:10:55.060 --> 00:10:56.390
off of readable CRP passwords.

00:10:56.500 --> 00:11:00.340
You could use PAM, which is a pluggable
authentication module from Linux.

00:11:00.340 --> 00:11:01.800
We support it on Mac OS X.

00:11:01.800 --> 00:11:04.780
If you adopt PAM,
your application will not care

00:11:04.780 --> 00:11:06.000
how passwords are authenticated.

00:11:06.000 --> 00:11:08.100
You can call the security framework.

00:11:08.100 --> 00:11:09.780
It does a number of services for you.

00:11:09.780 --> 00:11:12.500
I attended an excellent
overview by the security team

00:11:12.500 --> 00:11:13.680
of the authorization framework.

00:11:13.680 --> 00:11:16.680
You could adopt the security framework
to do your password verification,

00:11:16.680 --> 00:11:20.330
or you could work with us and adopt
the directory service APIs to do

00:11:20.390 --> 00:11:21.800
all of your password verification.

00:11:22.100 --> 00:11:25.330
If your application is not
using one of these APIs,

00:11:25.340 --> 00:11:29.240
it will break and has already been
broken when running on Panther.

00:11:29.240 --> 00:11:33.520
In the CD that we've
distributed to you with Panther,

00:11:33.520 --> 00:11:36.160
the default local user created
by the setup assistant does

00:11:36.160 --> 00:11:37.260
not have a CRP password.

00:11:37.260 --> 00:11:41.210
If you can't authenticate in your
application with that user record,

00:11:41.220 --> 00:11:42.700
it's not a bug in the OS.

00:11:42.700 --> 00:11:46.840
It's a design decision and a security
hole that we finally patched.

00:11:48.820 --> 00:11:52.200
Just in case this isn't clear,
your application is not

00:11:52.200 --> 00:11:54.190
using one of these APIs.

00:11:54.400 --> 00:11:56.840
It will break when running on Panther.

00:11:56.950 --> 00:11:59.420
By the way,
your application's already broken on

00:11:59.420 --> 00:12:02.970
Jaguar with a password server-based user,
but most people don't know that,

00:12:03.010 --> 00:12:05.300
and most people haven't
tested with network users.

00:12:05.300 --> 00:12:06.640
So this is not something new.

00:12:06.640 --> 00:12:11.290
We're just tightening the noose a little
bit in order to keep you guys employed.

00:12:13.680 --> 00:12:15.860
So what have we done for the
authentication authority matrix?

00:12:16.010 --> 00:12:18.400
Well, we had BASIC.

00:12:18.420 --> 00:12:18.890
That's Crypt.

00:12:18.980 --> 00:12:19.850
We still support that.

00:12:19.960 --> 00:12:22.480
If you create a user,
you set the auth authority to BASIC,

00:12:22.480 --> 00:12:23.550
you'll get a Crypt password.

00:12:23.560 --> 00:12:24.410
We don't recommend it.

00:12:24.410 --> 00:12:25.200
It's not secure.

00:12:25.200 --> 00:12:27.930
We have the Apple Password Server.

00:12:27.980 --> 00:12:28.970
No changes there.

00:12:28.990 --> 00:12:31.020
We still support the Password Server.

00:12:31.200 --> 00:12:33.960
But we've added a new attribute
that we call ShadowHash.

00:12:33.960 --> 00:12:38.010
A user record with an authentication
authority of ShadowHash indicates that

00:12:38.090 --> 00:12:42.590
a user record has a password hash stored
in slash var slash db slash shadow.

00:12:42.590 --> 00:12:45.750
That file is root-readable only,
not even admin-readable.

00:12:45.770 --> 00:12:47.260
It's root-readable only.

00:12:47.320 --> 00:12:49.840
To read the hashes out of that database,
you have to have root

00:12:49.840 --> 00:12:52.180
privileges on the local machine,
and on Panther,

00:12:52.250 --> 00:12:53.850
root is not enabled by default.

00:12:53.870 --> 00:12:57.890
So this is as secure as any system
we know about that stores the

00:12:58.000 --> 00:12:59.580
passwords locally on a hard drive.

00:13:02.230 --> 00:13:05.580
Panther stores all of its passwords
for local users in VARDB Shadow.

00:13:05.580 --> 00:13:07.440
It's a secure file system directory.

00:13:07.440 --> 00:13:09.660
We use a SHA-1 hash
to store the password.

00:13:09.660 --> 00:13:11.660
We have support for more
than eight characters.

00:13:11.660 --> 00:13:15.290
So those of you who want eight-character
support and want it to be significant

00:13:15.330 --> 00:13:18.440
to more than eight-character support,
we now support that.

00:13:18.650 --> 00:13:21.780
The system is no longer subject
to hash download attacks.

00:13:21.780 --> 00:13:23.940
So students cannot walk
up to your lab machines,

00:13:23.940 --> 00:13:26.660
run in IDump,
and walk off with the password database.

00:13:27.710 --> 00:13:30.750
Crypt is still supported, as I've said,
but no administration tools in

00:13:30.760 --> 00:13:32.560
Panther will create a crypt-based user.

00:13:32.560 --> 00:13:35.700
And all of the Panther command line
tools that we've been able to identify

00:13:35.700 --> 00:13:39.100
have been updated to use the directory
service APIs to change passwords.

00:13:39.100 --> 00:13:41.890
So you can now use changepw,
changepassword.

00:13:41.890 --> 00:13:44.070
All the tools we found
now use the DS API,

00:13:44.070 --> 00:13:48.230
so you can change your passwords
through command line or through the GUI.

00:13:48.260 --> 00:13:51.750
So that's local authentication.

00:13:54.100 --> 00:13:58.110
So authentication in Panther continues
because we haven't been idle on what to

00:13:58.110 --> 00:13:59.780
do with network authentication as well.

00:13:59.780 --> 00:14:02.490
So there are new features
for the Password Server.

00:14:02.500 --> 00:14:05.340
We have new authentication methods
in the Panther Password Server.

00:14:05.340 --> 00:14:09.880
We now support secure multi-master
replication for the Password Server.

00:14:09.880 --> 00:14:12.630
You can distribute copies of the
Password Server around your network.

00:14:12.710 --> 00:14:16.910
And we've upgraded the client so the
client knows about the replicas and will

00:14:17.070 --> 00:14:20.940
fail over to use a replica when one of
the replicas is talking to you goes away.

00:14:20.940 --> 00:14:23.860
We now have global and per-user policies.

00:14:24.000 --> 00:14:26.620
You used to only be able to set
password policies per user record,

00:14:26.620 --> 00:14:30.400
which meant if you wanted
to start a global change,

00:14:30.400 --> 00:14:31.990
you had to visit each user record.

00:14:32.040 --> 00:14:32.900
Well, that was silly.

00:14:32.900 --> 00:14:35.610
So we fixed it to have global policies.

00:14:35.620 --> 00:14:38.930
And we're integrating support
for Apple's Kerbero Server,

00:14:39.050 --> 00:14:42.190
which is really MIT's Kerbero Server,
and I'm going to come back to

00:14:42.190 --> 00:14:43.480
that later in the presentation.

00:14:43.480 --> 00:14:45.760
It's better performance.

00:14:45.760 --> 00:14:49.420
There's far less networking traffic
and an extremely embarrassing faux pas.

00:14:49.420 --> 00:14:52.580
It takes 14 packets to authenticate
a user on the Password Server.

00:14:52.610 --> 00:14:53.760
How many of you think
that's just idiotic?

00:14:54.000 --> 00:14:54.200
It is.

00:14:54.200 --> 00:14:55.340
Okay.

00:14:55.340 --> 00:14:56.080
We fixed it.

00:14:56.080 --> 00:14:57.140
It now takes two packets.

00:14:57.240 --> 00:14:58.730
By the way,
if anyone can figure out how to do

00:14:58.730 --> 00:15:01.680
authentication in a single packet,
I want to talk to you after the session.

00:15:03.540 --> 00:15:06.000
Better performance,
less networking traffic,

00:15:06.000 --> 00:15:09.000
and we have many new command line
tools to automate policy management.

00:15:09.000 --> 00:15:11.490
There's now a PW Policy tool,
which lets you set all the

00:15:11.550 --> 00:15:12.740
policies from the command line.

00:15:12.740 --> 00:15:14.740
It's in user/smin on the server.

00:15:14.740 --> 00:15:17.450
Give it a try.

00:15:17.450 --> 00:15:17.450
It has a man page.

00:15:18.360 --> 00:15:22.250
The new authentication methods is we've
added support for VPN authentication.

00:15:22.300 --> 00:15:25.920
VPN, a typical authentication
method required is MSCHAP2.

00:15:25.920 --> 00:15:28.360
The Password Server now
offers MSCHAP2 support.

00:15:28.360 --> 00:15:30.690
And if you attended the
server detail overview,

00:15:30.690 --> 00:15:32.920
many of you are familiar now,
we have a PDC.

00:15:32.920 --> 00:15:36.320
We had to add several authentication
methods to support hosting a PDC.

00:15:36.320 --> 00:15:38.700
So we added a number of auth
methods so that we could host

00:15:38.710 --> 00:15:40.610
Windows primary domain controllers.

00:15:41.500 --> 00:15:44.800
So Password Server authentication
methods look like this.

00:15:44.800 --> 00:15:46.550
We have MD5 Digest.

00:15:46.620 --> 00:15:49.430
That's supported on both platforms.

00:15:49.430 --> 00:15:50.940
We have CRAM MD5.

00:15:50.980 --> 00:15:53.150
We have NT and Land Manager.

00:15:53.150 --> 00:15:54.270
We have APOP.

00:15:54.270 --> 00:15:56.230
We have WebDAV Digest.

00:15:56.260 --> 00:16:00.220
We have MSCHAP2, which is new and only
supported on Panther.

00:16:00.220 --> 00:16:03.120
And we are retiring to a random.

00:16:03.120 --> 00:16:05.940
Every AFP client,
it's supported in Jaguar.

00:16:05.970 --> 00:16:11.480
We're removing it in Panther because
everybody since 8.1 uses Diffie-Hellman.

00:16:11.480 --> 00:16:12.460
The DHX exchange.

00:16:12.520 --> 00:16:16.450
So two-way random wasn't being used that
much when we profiled all of our user

00:16:16.460 --> 00:16:18.480
data and there's some issues with it.

00:16:18.480 --> 00:16:21.220
So we're retiring to
a random in 10 server.

00:16:21.220 --> 00:16:23.760
There are other enhancements
to the Password Server.

00:16:23.810 --> 00:16:25.120
So new password policies.

00:16:25.120 --> 00:16:25.990
I went over this.

00:16:25.990 --> 00:16:28.130
Global and per-user password policies.

00:16:28.140 --> 00:16:31.740
We now allow the policy to be set in one
place so you can change your passwords

00:16:31.740 --> 00:16:36.170
from minimum 8 characters to minimum 12
characters by making one single change.

00:16:36.200 --> 00:16:37.920
Or you can override for certain users.

00:16:37.920 --> 00:16:41.480
There's that user who's calling you a lot
on the phone line and you don't like it.

00:16:41.480 --> 00:16:45.240
You can set the password
policy for them to be like 18

00:16:45.240 --> 00:16:47.790
characters as a minimum password.

00:16:48.480 --> 00:16:50.260
Although I think that might
cause more phone calls.

00:16:50.260 --> 00:16:52.000
I'm not quite sure whether
that's a good thing.

00:16:52.000 --> 00:16:54.500
We have many new
password policy features.

00:16:54.500 --> 00:16:56.860
We have history,
we have character set requirements,

00:16:56.920 --> 00:16:59.240
and there's a new tool for
password policy management,

00:16:59.240 --> 00:16:59.890
PW Policy.

00:17:00.660 --> 00:17:03.200
It's easier to show the new
features than inventory them,

00:17:03.200 --> 00:17:05.080
so I'm just going to throw up
this screenshot and let you

00:17:05.080 --> 00:17:06.070
all get a good look at it.

00:17:06.170 --> 00:17:09.310
So we can disable an
account on a certain date.

00:17:09.420 --> 00:17:11.870
We can disable an account
after a certain number of days.

00:17:11.910 --> 00:17:16.680
We can disable an account after a
certain number of days of inactivity.

00:17:16.680 --> 00:17:20.370
And inactivity in this realm is
defined as successful activity.

00:17:20.410 --> 00:17:22.880
So failed attempts don't keep this alive.

00:17:22.880 --> 00:17:27.700
They have to have logged on successfully
at least once within that period of time.

00:17:27.700 --> 00:17:29.540
And we have the, of course,
after a certain number

00:17:29.540 --> 00:17:30.470
of failed attempts.

00:17:30.670 --> 00:17:32.910
Passwords must be a certain
number of characters that

00:17:32.910 --> 00:17:35.390
contain at least a letter,
contain at least one numeric,

00:17:35.750 --> 00:17:38.800
differ from the account name,
differ from the last X passwords used,

00:17:38.850 --> 00:17:42.280
and be changed every X minutes, days,
months, or years.

00:17:42.280 --> 00:17:46.700
Per-user policies are a subset.

00:17:46.700 --> 00:17:49.550
Now, you can override the global
policies on a per-user basis,

00:17:49.550 --> 00:17:52.680
so I could go into a particular user,
say I've hired a contractor to come

00:17:52.680 --> 00:17:54.560
onto my site and I want to disable it.

00:17:54.580 --> 00:17:57.730
When the contractor goes away,
I can set a disabled logon.

00:17:57.740 --> 00:17:59.670
You can see all of this
in Workgroup Manager.

00:17:59.680 --> 00:18:00.640
Those are some of the
things that we can do.

00:18:00.660 --> 00:18:02.660
And that's one of the policies
we're supporting now in Panther.

00:18:02.800 --> 00:18:04.660
Secure replication.

00:18:04.660 --> 00:18:10.540
Schlepping passwords around the network
in the clear is not a good idea.

00:18:10.660 --> 00:18:12.660
So when we designed
replication from day one,

00:18:12.660 --> 00:18:16.650
we have leveraged the public key/private
key pair that the password server has.

00:18:16.660 --> 00:18:18.640
Note, we use the SSH key gen.

00:18:18.670 --> 00:18:22.970
We don't share the SSH key,
but we use the exact same key gen tool

00:18:23.020 --> 00:18:25.660
that SSH uses to generate our keys.

00:18:25.660 --> 00:18:30.120
So we are basing our replication
on encryption done by using SSH.

00:18:30.120 --> 00:18:33.170
We're using the public key/private
key pair that is already present

00:18:33.230 --> 00:18:36.120
on every password server that's
already been deployed on Jaguar.

00:18:36.120 --> 00:18:40.090
Replication can occur on change
or it can occur periodically,

00:18:40.130 --> 00:18:42.120
like every 20 minutes, every half hour.

00:18:42.120 --> 00:18:44.100
All replicas can accept change password.

00:18:44.160 --> 00:18:46.090
That means if you're cut off from
the mothership for a period of time,

00:18:46.130 --> 00:18:49.120
your users can still
reset their passwords.

00:18:49.120 --> 00:18:51.270
And when the replication occurs,
we merge the data and we do

00:18:51.270 --> 00:18:54.110
all the right things in knowing
who has the later record,

00:18:54.110 --> 00:18:56.900
all of that sort of stuff
that you would expect from a

00:18:56.970 --> 00:18:58.120
professional server organization.

00:18:58.120 --> 00:18:59.120
All replicas can accept change password.

00:18:59.120 --> 00:19:02.980
All replication sessions are
encrypted end to end with 128-bit

00:19:03.050 --> 00:19:07.110
key using RC5 encryption that we
get from the security framework.

00:19:07.120 --> 00:19:12.120
There is no clear text data passed at any
time during password server replication.

00:19:12.120 --> 00:19:13.100
I'd like to repeat that.

00:19:13.190 --> 00:19:18.280
We never pass the clear text on the wire.

00:19:18.650 --> 00:19:20.920
Client replica discovery
is quite exhaustive.

00:19:20.940 --> 00:19:23.930
If you have a replicated system
but your clients are still

00:19:23.930 --> 00:19:26.800
beating on the same IP address,
it doesn't do you any good.

00:19:26.800 --> 00:19:29.740
So we came up with a
multi-layered approach for the

00:19:29.750 --> 00:19:31.710
client to discover a replica.

00:19:31.770 --> 00:19:35.100
The replica picking is transparent
to anyone using the directory service

00:19:35.100 --> 00:19:36.830
APIs or any of the higher-level APIs.

00:19:36.930 --> 00:19:39.420
You don't have to know that
a failover is occurring.

00:19:40.260 --> 00:19:42.120
Replica discovery is done in parallel.

00:19:42.120 --> 00:19:45.960
If you have 20 servers deployed
and 19 of them are down and you

00:19:46.070 --> 00:19:50.100
have a two-minute network timeout,
I doubt your user wants to wait 38

00:19:50.110 --> 00:19:52.550
minutes to find the 20th replica.

00:19:52.600 --> 00:19:55.380
So we discover the replicas in parallel.

00:19:55.380 --> 00:19:59.540
The first thing we have is we have a
local cache file on the local machine

00:19:59.640 --> 00:20:04.340
that knows the IP address list of all
the replicas for the password servers.

00:20:04.340 --> 00:20:07.510
If we find the password server there,
we'll start working

00:20:07.510 --> 00:20:09.010
with that IP list first.

00:20:09.460 --> 00:20:10.150
Obviously, in the general sense,
we don't have to worry about that.

00:20:10.210 --> 00:20:12.920
In the Genesis case,
we don't yet have that replica cache,

00:20:13.030 --> 00:20:16.120
so we move on to a configuration
record in the directory server.

00:20:16.120 --> 00:20:18.930
So there is a config record in
the LDAP directory server that

00:20:19.050 --> 00:20:21.850
is for the password server,
and it lists all the IP addresses

00:20:21.850 --> 00:20:23.100
of the password server.

00:20:23.100 --> 00:20:26.120
The client downloads that
configuration record and populates

00:20:26.160 --> 00:20:28.040
the cache file with that list.

00:20:28.080 --> 00:20:30.460
We also use Rendezvous,
which I'm going to come back to

00:20:30.460 --> 00:20:32.300
because we have public key private key.

00:20:32.310 --> 00:20:34.770
We can actually use Rendezvous
and it's still secure.

00:20:34.810 --> 00:20:37.360
And as a last-ditch attempt,
we assume you might be trying

00:20:37.360 --> 00:20:40.140
to log on to a server for
which you can use Rendezvous.

00:20:40.140 --> 00:20:42.860
You've changed its IP address,
and so we'll loop back to the local

00:20:42.940 --> 00:20:46.290
machine to see if a password server is
running locally and authenticate there.

00:20:46.290 --> 00:20:48.830
And as a last resort,
we'll actually use the network address

00:20:48.850 --> 00:20:50.860
listed in the authentication authority.

00:20:52.790 --> 00:20:56.110
If Replica is available,
I think we'll find it.

00:20:56.170 --> 00:20:59.610
I want to go back to the
Rendezvous case real quick.

00:20:59.870 --> 00:21:02.900
The Password Server registers
Rendezvous using its public key.

00:21:02.900 --> 00:21:06.500
We know the Password Server's public key,
so we can actually ask Rendezvous,

00:21:06.500 --> 00:21:09.540
is there any Password Server on
the network with this public key?

00:21:09.540 --> 00:21:13.010
Now, we don't trust that that Password
Server's actually who it says.

00:21:13.010 --> 00:21:15.820
We still engage in the challenge
to have that client prove to

00:21:15.960 --> 00:21:17.460
us it knows the private key.

00:21:17.460 --> 00:21:20.570
But we were able to leverage
Rendezvous to use a service discovery

00:21:20.570 --> 00:21:23.940
protocol so that you can change the
IP address of your Password Server,

00:21:23.980 --> 00:21:26.620
and your clients will find
them using Rendezvous.

00:21:27.920 --> 00:21:29.360
We thought that's pretty slick.

00:21:29.570 --> 00:21:32.590
Thought I might point it out to you
where you have some security fallback.

00:21:32.640 --> 00:21:35.340
It's kind of nice to combine Rendezvous,
which is local network

00:21:35.340 --> 00:21:37.680
broadcast authentication,
or discovery with a secure

00:21:37.780 --> 00:21:39.400
authentication challenge.

00:21:39.400 --> 00:21:41.180
It could be used for SSH as well.

00:21:41.180 --> 00:21:43.100
I haven't thought about it much.

00:21:44.880 --> 00:21:47.600
So integrated Kerbero support.

00:21:47.650 --> 00:21:49.790
How many of you haven't
heard that Apple's moving

00:21:49.790 --> 00:21:52.340
in a big way toward Kerbero?

00:21:52.390 --> 00:21:53.260
OK.

00:21:53.260 --> 00:21:54.570
So we are integrating.

00:21:54.720 --> 00:21:57.020
Luke.

00:21:58.090 --> 00:21:58.190
OK.

00:21:58.190 --> 00:22:00.760
Apple will ship an enhanced MIT KDC.

00:22:00.760 --> 00:22:03.630
I'm not sure the MIT team
would think it's enhanced.

00:22:03.660 --> 00:22:05.750
But no, we're going to enhance it.

00:22:06.120 --> 00:22:08.590
The enhancements will allow the
Password Server and the KDC to

00:22:08.590 --> 00:22:12.840
share and synchronize their
password and policy information.

00:22:12.980 --> 00:22:15.770
Apple's KDC will leverage
Password Server replication,

00:22:15.820 --> 00:22:18.240
so all the KDC data will be
funneled through Password

00:22:18.240 --> 00:22:20.780
Server replication sessions.

00:22:21.230 --> 00:22:23.470
And from a customer's point of view,
the Password Server and the

00:22:23.470 --> 00:22:25.160
KDC are a single system,
so they won't know that

00:22:25.160 --> 00:22:26.070
they've deployed a KDC.

00:22:26.200 --> 00:22:29.800
They hopefully won't care
because--and if they do care,

00:22:29.800 --> 00:22:33.200
we can say we're using Kerbero,
and then that should shut them up.

00:22:33.200 --> 00:22:38.700
So legacy authentication support is
still provided by the Password Server.

00:22:38.700 --> 00:22:41.200
So what we have, in our opinion,
is the best of both worlds.

00:22:41.200 --> 00:22:44.100
We're moving toward Kerbero,
but we aren't holding your legacy

00:22:44.100 --> 00:22:45.820
non-Kerbero clients hostage.

00:22:45.900 --> 00:22:49.190
They can still engage in
legacy authentication.

00:22:49.580 --> 00:22:52.980
So this brings us to Apple's
single sign-on strategy,

00:22:52.980 --> 00:22:56.410
which is the last section
of my presentation.

00:22:57.360 --> 00:22:58.060
Single sign-on.

00:22:58.280 --> 00:23:03.800
This is defined as, by my management,
as a user typing a password

00:23:03.800 --> 00:23:06.760
into logon window and not having
to worry about it ever again.

00:23:10.180 --> 00:23:14.620
Apple is adopting Kerbero as our
network single sign-on approach.

00:23:14.820 --> 00:23:18.860
Apple is basing all of our Kerbero
work on the MIT Kerbero implementation.

00:23:18.940 --> 00:23:22.540
Panther can be configured to work
with existing Kerbero deployments.

00:23:22.720 --> 00:23:26.990
Apple is not changing Kerbero.

00:23:33.410 --> 00:23:39.740
We're tweaking the KDC,
but we're not changing Kerberoos.

00:23:39.760 --> 00:23:42.590
All we're really doing-- and I didn't
realize this until we were almost

00:23:42.590 --> 00:23:46.800
done-- is we're providing configuration
tools to make it easier to adopt.

00:23:47.120 --> 00:23:49.110
Kerbero's is excellent,
but in Apple's opinion,

00:23:49.150 --> 00:23:51.000
has suffered some barriers to adoption.

00:23:51.000 --> 00:23:53.750
And I'd like to go over some of
those barriers so that hopefully

00:23:53.770 --> 00:23:56.350
you guys will share with me what
you think we're actually adding,

00:23:56.350 --> 00:23:57.640
where we're adding value.

00:23:57.640 --> 00:24:01.550
So the first barrier to
adoption is you needed a KDC.

00:24:01.610 --> 00:24:04.860
You're required to deploy a KDC,
and up until now,

00:24:04.900 --> 00:24:06.970
that's been quite an effort.

00:24:06.980 --> 00:24:10.580
And up until Panther,
there was no KDC that ran on Mac OS X.

00:24:10.580 --> 00:24:14.000
I think Heimdall ran,
but there was no MIT KDC that

00:24:14.020 --> 00:24:16.020
ran on Panther or Jaguar.

00:24:16.970 --> 00:24:18.100
Directory services integration.

00:24:18.100 --> 00:24:19.260
This is actually fun.

00:24:19.260 --> 00:24:21.820
Marshall's going to laugh at this,
but when we met four years

00:24:21.820 --> 00:24:24.260
ago at WWDC in San Jose,
what we realized is there were lots

00:24:24.350 --> 00:24:27.530
of Kerbero's deployments in the world,
but none of them had standardized how

00:24:27.530 --> 00:24:29.320
do you integrate with a directory.

00:24:29.340 --> 00:24:31.660
Every site had done
something slightly different.

00:24:31.660 --> 00:24:33.130
So that's a barrier to adoption.

00:24:33.130 --> 00:24:35.210
How do you integrate
with a directory system?

00:24:35.220 --> 00:24:37.220
Lack of integrated user
account management.

00:24:37.220 --> 00:24:39.050
I mean,
there's lots of scripts and stuff,

00:24:39.110 --> 00:24:41.240
but there's no GUI tool where
I can say create a user,

00:24:41.270 --> 00:24:43.470
and it also creates the
Kerbero's principle and does

00:24:43.470 --> 00:24:44.800
all the things you need to do.

00:24:46.990 --> 00:24:49.030
You had to register all
your hosts and services,

00:24:49.110 --> 00:24:52.030
so if I wanted to turn on an AFP server,
I had to remember to create a host

00:24:52.120 --> 00:24:53.430
principal in my Kerbero server.

00:24:53.440 --> 00:24:57.400
I just couldn't turn the AFP server on,
or mail, or some such.

00:24:57.400 --> 00:25:00.970
Command line level configuration
of the Kerbero's clients.

00:25:01.020 --> 00:25:02.890
I mean, I can handle that,
but I don't think most

00:25:02.890 --> 00:25:03.920
of our customers can.

00:25:05.320 --> 00:25:07.400
And there was no support for
legacy network authentication.

00:25:07.410 --> 00:25:09.680
If you deployed Kerbero,
there was no way for me to do an

00:25:09.680 --> 00:25:12.910
NT and LAN manager authentication
for the Windows 95 client that's

00:25:12.910 --> 00:25:13.900
never going to be Kerberized.

00:25:13.900 --> 00:25:17.100
So how do I get it onto my
SMB servers if it's been Kerberized?

00:25:17.100 --> 00:25:19.700
So we saw these as barriers
to Kerbero's adoption,

00:25:19.700 --> 00:25:23.300
and the first thing we did was set
out to address each one of them.

00:25:23.550 --> 00:25:25.990
So for Panther Server,

00:25:26.650 --> 00:25:27.410
Requiring a KDC?

00:25:27.520 --> 00:25:28.460
Well, we got that covered.

00:25:28.460 --> 00:25:30.940
Panther's shipping with a
full KDC setup by default.

00:25:30.940 --> 00:25:33.760
If you complete the setup assistant
on a Panther server and have

00:25:33.890 --> 00:25:36.420
turned on a directory server,
you have deployed a KDC.

00:25:36.420 --> 00:25:37.420
End of discussion.

00:25:37.440 --> 00:25:40.050
No arguments, no ifs, no ands, no buts.

00:25:41.680 --> 00:25:42.960
Directory server integration.

00:25:43.020 --> 00:25:46.540
All the directory server
tools in Panther know about

00:25:46.540 --> 00:25:48.320
the KDC and use the KDC.

00:25:48.320 --> 00:25:51.140
Lack of integrated user
account management.

00:25:51.140 --> 00:25:53.220
Worker manager,
when you create a new user,

00:25:53.220 --> 00:25:55.520
will create a Kerbero's
principle for that user,

00:25:55.520 --> 00:25:57.400
as well as a password server entry.

00:25:58.880 --> 00:26:01.660
Registration of all host
and service principles.

00:26:01.660 --> 00:26:03.860
If you complete the
Panther Setup Assistant,

00:26:03.950 --> 00:26:07.180
how many of you saw the cool
Auto Setup Assistant demo?

00:26:07.660 --> 00:26:10.500
If you turn on all the services
that you can turn on from Panther,

00:26:10.500 --> 00:26:14.680
if you complete the setup assistant and
there's a Kerbero server on the network,

00:26:14.680 --> 00:26:17.490
we will have already preregistered
all the host principles

00:26:17.500 --> 00:26:20.710
for you for those services,
even if you haven't turned them on.

00:26:21.930 --> 00:26:23.060
Command line level configuration.

00:26:23.160 --> 00:26:26.780
Panther Desktop will optionally
auto-configure itself out of Kerbero.

00:26:26.780 --> 00:26:30.400
There will be no command line
configuration in Panther of Kerbero.

00:26:30.400 --> 00:26:34.850
There can be if you prefer that,
but there will be an option

00:26:34.850 --> 00:26:37.390
to have auto-configuration.

00:26:37.860 --> 00:26:39.880
No support for legacy
network authentication.

00:26:39.880 --> 00:26:42.060
Well, we got that covered with
the Password Server.

00:26:42.060 --> 00:26:44.560
Its whole reason for being is
legacy network authentication.

00:26:44.710 --> 00:26:47.930
We've integrated it with the KDC,
so you can have the best of both worlds.

00:26:48.010 --> 00:26:51.050
You can support 95% of
your network as Kerberized,

00:26:51.050 --> 00:26:55.130
and one or two machines that need to
come in through a legacy protocol still

00:26:55.130 --> 00:26:57.480
can and still have the same password.

00:26:59.200 --> 00:27:01.770
So Kerbero will be fully
supported in Panther.

00:27:02.010 --> 00:27:04.640
The Apple single sign-on
changes don't modify Kerbero.

00:27:04.860 --> 00:27:07.580
All we've done is provide
some automated tools to assist

00:27:07.580 --> 00:27:09.720
the user with configuration.

00:27:09.960 --> 00:27:12.360
Panther Server will be
auto-configured to use Kerbero if

00:27:12.360 --> 00:27:15.500
Panther Directory services are deployed.

00:27:15.530 --> 00:27:18.010
But what about integrating
with non-Apple Kerbero systems?

00:27:18.110 --> 00:27:21.360
Well, how many people have deployed
Kerbero at their site?

00:27:21.380 --> 00:27:23.330
You guys already know how to do this,
so the way you'll do it for

00:27:23.370 --> 00:27:25.130
Panther is the same way you've
always done it for Panther.

00:27:25.140 --> 00:27:27.400
You're already comfortable with the KDC.

00:27:27.400 --> 00:27:29.000
You know how to create host principles.

00:27:29.030 --> 00:27:31.990
There will be no difference
in deploying Panther into an

00:27:31.990 --> 00:27:33.520
existing Kerbero deployment.

00:27:33.620 --> 00:27:36.140
If you deploy our KDC,
you get the auto-setup features.

00:27:36.160 --> 00:27:39.240
If you don't deploy our KDC,
you set it up the way you've always

00:27:39.240 --> 00:27:41.890
set up services to use a KDC.

00:27:42.030 --> 00:27:44.200
The administrator is
therefore responsible for

00:27:44.240 --> 00:27:46.500
the Kerbero's configuration.

00:27:47.890 --> 00:27:48.920
So I get this question a lot.

00:27:49.010 --> 00:27:51.680
How does Panther actually
auto-configure Kerberos?

00:27:51.830 --> 00:27:54.360
Well,
we're using the authentication authority.

00:27:54.360 --> 00:27:57.270
We now have defined an
authentication authority in the

00:27:57.270 --> 00:28:00.200
user record with the keyword of,
guess what, Kerberos.

00:28:00.200 --> 00:28:03.680
If we see an authentication
authority with Kerberos,

00:28:03.680 --> 00:28:07.760
logon window will rummage around
in the directory looking for

00:28:07.870 --> 00:28:11.320
Kerberos config information and
auto-configure the Kerberos client.

00:28:11.350 --> 00:28:13.480
If your directory
contains that information,

00:28:13.540 --> 00:28:15.870
your Panther client will
auto-configure to use Kerberos.

00:28:16.060 --> 00:28:18.150
If your directory does not
contain that information,

00:28:18.180 --> 00:28:19.280
it will do nothing.

00:28:19.280 --> 00:28:22.990
Most directories don't contain this
auto-config information because we

00:28:23.050 --> 00:28:24.380
haven't told you what it is yet.

00:28:24.590 --> 00:28:28.770
So rest assured that Panther will not
be automatically configuring Kerberos

00:28:28.770 --> 00:28:32.390
out of your directory system because we
haven't even figured out ourselves yet

00:28:32.400 --> 00:28:34.700
what the final format of the data is,
but we will.

00:28:36.760 --> 00:28:40.710
Sites can add the auto-configuration
data to legacy deployments if they want.

00:28:40.800 --> 00:28:42.190
We'll set it up for you automatically.

00:28:42.210 --> 00:28:44.670
So we're leveraging the
existence of the authentication

00:28:44.670 --> 00:28:47.400
authority in the user record,
and that will trigger Panther to

00:28:47.400 --> 00:28:50.600
look for config information to
configure the client to use Kerbero.

00:28:52.590 --> 00:28:53.610
So customers can choose.

00:28:53.610 --> 00:28:56.150
Customers can choose to
deploy Apple services,

00:28:56.150 --> 00:28:57.950
and Kerbero will be easier than ever.

00:28:57.950 --> 00:29:01.580
Many of the barriers to Kerbero
adoption have been addressed in Panther,

00:29:01.580 --> 00:29:04.640
or customers can configure Panther to
work with existing Kerbero deployments,

00:29:04.640 --> 00:29:06.550
no different than how
they do other platforms.

00:29:06.580 --> 00:29:08.610
So it's really up to you as
a network administrator as

00:29:08.610 --> 00:29:09.690
to which system you deploy.

00:29:09.770 --> 00:29:11.880
But either way,
Panther will support Kerbero.

00:29:14.080 --> 00:29:15.260
Authentication long-term.

00:29:15.260 --> 00:29:18.080
Apple is investing heavily in Kerberoos.

00:29:18.080 --> 00:29:24.840
Where Apple can be an 800-pound gorilla,
we can actually make a lot of changes.

00:29:24.840 --> 00:29:27.080
Let me repeat the first statement.

00:29:27.080 --> 00:29:29.740
We are investing heavily in Kerberoos.

00:29:29.740 --> 00:29:31.510
You should probably be doing the same.

00:29:31.780 --> 00:29:35.200
We are aggressively migrating all
of our networking products to be

00:29:35.200 --> 00:29:37.330
Kerberoos-based if it's appropriate.

00:29:37.330 --> 00:29:38.600
We're going to ship a KDC.

00:29:38.600 --> 00:29:40.120
We already ship a client.

00:29:40.200 --> 00:29:44.310
And session 108 is a must-attend for
any network services developer so you

00:29:44.400 --> 00:29:46.780
can learn how to use the Kerberoos APIs.

00:29:48.480 --> 00:29:52.590
All Kerberoes, all the time,
is in Apple's future and yours.

00:29:52.710 --> 00:29:54.600
Plan today for the changes
you know are coming.

00:29:56.910 --> 00:30:00.240
I'd like to wrap it up at this point.

00:30:00.400 --> 00:30:03.690
So, Jaguar introduced new
authentication support.

00:30:03.780 --> 00:30:05.670
Panther has changes in
three important areas.

00:30:05.710 --> 00:30:08.440
We've changed local authentication
to not be crypt-based.

00:30:08.440 --> 00:30:12.620
We've enhanced the open directory
password server to be fully replicated.

00:30:12.630 --> 00:30:15.500
There's new auth methods, new policies,
new tools.

00:30:15.700 --> 00:30:18.760
And Apple is aggressively
working on making it trivial

00:30:18.910 --> 00:30:23.030
for server administrators to
deploy Kerbero on their network.

00:30:24.390 --> 00:30:27.760
An interesting history through
the years is we started out with

00:30:27.830 --> 00:30:30.060
Mac OS XO and it supported Crypt.

00:30:30.130 --> 00:30:33.300
XO we added Crypt, LDAP Bind,
and the DS APIs.

00:30:33.480 --> 00:30:39.700
For Mac OS XO we support Crypt, LDAP,
Kerbero, DS API, Password Server, PAM,

00:30:39.700 --> 00:30:41.280
and Security Framework.

00:30:41.410 --> 00:30:43.280
And for Panther, we've dropped Crypt.

00:30:43.280 --> 00:30:47.280
We still have all the other support,
but we've added replication.

00:30:47.280 --> 00:30:50.280
And moving out into the future,

00:30:50.570 --> 00:30:52.640
Kerberoos is more and more the story.

00:30:52.650 --> 00:30:58.560
And we're going to be working with MIT to
define how that evolves and what we do.

00:30:59.450 --> 00:31:00.350
There's some roadmap.

00:31:00.360 --> 00:31:03.640
The security and architectural overview,
you should really go back in time

00:31:03.680 --> 00:31:06.050
and listen to that yesterday.

00:31:07.180 --> 00:31:10.870
108 is on Thursday at 9:00 a.m.

00:31:10.970 --> 00:31:13.060
That's Kerbero for Mac OS X.

00:31:13.100 --> 00:31:16.300
The Mac OS X Server overview is also
an excellent thing for time travel.

00:31:16.300 --> 00:31:17.780
That was at 2:00 p.m.

00:31:17.830 --> 00:31:22.770
Mac OS X Server in depth preceded this,
so three of the sessions

00:31:22.770 --> 00:31:22.770
have already happened.

00:31:22.950 --> 00:31:25.020
Directory services is tomorrow.

00:31:25.020 --> 00:31:29.320
I will be emphasizing authentication
far less in tomorrow's talk.

00:31:29.400 --> 00:31:32.040
We'll be talking more about the
enhancements to LDAP and other things.

00:31:32.040 --> 00:31:35.440
Managed desktop technologies is
heavily based on directory services.

00:31:35.440 --> 00:31:38.340
I recommend if you're interested in
directory services and authentication,

00:31:38.340 --> 00:31:39.620
that's an excellent session.

00:31:39.620 --> 00:31:42.860
And network security best
practices is on Friday at 10.30.

00:31:44.800 --> 00:31:49.200
If you have any questions,
you can contact me or Skip Levens.

00:31:49.210 --> 00:31:52.360
And for more information,
here's a list of documentation

00:31:52.360 --> 00:31:54.100
and open source references.

00:31:54.100 --> 00:31:56.680
We have the
Directory Service API documentation.

00:31:56.840 --> 00:31:59.180
Directory Services is open
source as part of Darwin.

00:31:59.260 --> 00:32:02.290
We have the Open Directory SDK.

00:32:02.710 --> 00:32:04.600
We have Mac OS X Server documentation.

00:32:04.600 --> 00:32:07.520
I particularly recommend the one in the
technical briefs called Open Directory.

00:32:07.620 --> 00:32:11.830
That's an excellent tutorial on the
overview of what a directory system is.

00:32:11.840 --> 00:32:14.730
We have Mac OS X LDAP schema,
which is stored in the

00:32:14.830 --> 00:32:18.600
Open LDAP configuration files,
and we have the Mac OS X security APIs.

00:32:20.260 --> 00:32:22.220
There's also some third-party sites.

00:32:22.310 --> 00:32:24.770
OpenLDAP is an excellent LDAP server.

00:32:24.920 --> 00:32:27.120
Sassl is done by Carnegie Mellon.

00:32:27.230 --> 00:32:30.230
We base our Password
Server on the Sassl protocol.

00:32:30.320 --> 00:32:33.890
PAM is PAM,
and it's a Linux password abstraction.

00:32:33.930 --> 00:32:38.690
And there's Kerbero, of course,
at web.mit.edu/kerbero.

00:32:39.290 --> 00:32:41.250
Oh, somebody added this slide.

00:32:41.260 --> 00:32:41.710
I haven't seen it.

00:32:41.770 --> 00:32:45.520
So who to contact about Kerbero
would be Andreas Windecker.

00:32:45.520 --> 00:32:46.100
Is that correct?

00:32:46.190 --> 00:32:49.780
Bob Frazier, Catherine Wink,
and enterprise-level web

00:32:49.850 --> 00:32:51.980
object support and consulting.

00:32:52.000 --> 00:32:54.280
I'm not quite sure that's
appropriate for this session,

00:32:54.280 --> 00:32:55.120
but maybe it is.

00:32:58.080 --> 00:32:59.500
We have some more reference libraries.

00:32:59.500 --> 00:33:02.490
It appears somebody cut and pasted
some slides into my presentation.