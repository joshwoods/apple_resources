WEBVTT

00:00:17.760 --> 00:00:23.380
I'd like to introduce Melissa Turner and
her lovely assistant Jesus Ahuactzin.

00:00:23.400 --> 00:00:27.360
They're going to talk
about J2EE made easier.

00:00:27.570 --> 00:00:30.260
Everything about deploying
J2EE applications on

00:00:30.260 --> 00:00:34.500
Mac OS X Server including
WebObjects applications.

00:00:34.750 --> 00:00:36.570
Thanks Francois.

00:00:40.640 --> 00:00:42.790
So at this point I was
supposed to make a joke,

00:00:42.790 --> 00:00:46.030
but Francois sort of beat me to the
punch about how after four years of

00:00:46.040 --> 00:00:49.560
working with Jesus for this presentation,
I finally actually learned something.

00:00:49.560 --> 00:00:52.000
I've learned how to
pronounce his last name.

00:00:52.140 --> 00:00:52.990
Four years.

00:00:53.050 --> 00:00:55.190
I'm obviously an engineer.

00:00:56.560 --> 00:01:01.800
I'm here today to talk about deploying
enterprise applications on Mac OS X,

00:01:01.800 --> 00:01:02.600
not surprisingly.

00:01:02.600 --> 00:01:06.260
I'm going to give you in this session
an introduction to J2EE and JBoss.

00:01:06.310 --> 00:01:09.160
I'm going to discuss
deploying J2EE applications,

00:01:09.160 --> 00:01:11.980
managing J2EE applications
once you've got them deployed,

00:01:11.980 --> 00:01:15.530
and I'm going to talk a little
bit about deploying WebObjects

00:01:15.530 --> 00:01:17.230
applications in JBoss.

00:01:17.540 --> 00:01:20.280
What I'm hoping you'll take away from
this presentation is for those of you

00:01:20.280 --> 00:01:23.440
who don't already know what J2EE is,
sort of the 30,000 foot

00:01:23.480 --> 00:01:26.860
overview of what J2EE is,
a bit of an idea about the

00:01:26.860 --> 00:01:31.930
JBoss and JBoss architecture,
some idea of how we've

00:01:32.590 --> 00:01:37.360
integrated JBoss with Mac OS X,
how to deploy a J2EE application

00:01:37.360 --> 00:01:37.360
on Mac OS X and how to manage it.

00:01:39.200 --> 00:01:41.480
J2EE, what is J2EE?

00:01:41.480 --> 00:01:44.740
A lot of you have probably heard
this particular acronym by now.

00:01:44.740 --> 00:01:47.610
It's been around for several years.

00:01:49.020 --> 00:01:52.130
being heckled from down here.

00:01:52.180 --> 00:01:52.650
What is it?

00:01:52.690 --> 00:01:55.540
It's a platform for building
multi-tier applications.

00:01:55.550 --> 00:02:03.000
It's standardized modular
components and basically it uses...

00:02:03.000 --> 00:02:04.500
Could whoever is talking please stop?

00:02:04.510 --> 00:02:06.500
It's very distracting.

00:02:06.650 --> 00:02:08.610
Someone down here.

00:02:09.330 --> 00:02:10.200
Is it behind me?

00:02:10.200 --> 00:02:15.200
Sorry about that.

00:02:15.200 --> 00:02:19.760
Basically the way J2EE works is you have
a container that provides services that

00:02:19.760 --> 00:02:23.530
can be used by multiple applications
because there's a lot of things you

00:02:23.530 --> 00:02:27.680
don't really need to hard code in every
single application you want to use.

00:02:27.680 --> 00:02:30.140
Say, for example,
you want to talk to a database or

00:02:30.170 --> 00:02:32.160
you want to send or receive e-mails.

00:02:32.160 --> 00:02:34.680
That's not the kind of thing you
should need to reimplement every time

00:02:34.680 --> 00:02:35.980
you want to write an application.

00:02:35.980 --> 00:02:38.330
So you can offload that
work onto the container.

00:02:38.500 --> 00:02:42.950
J2EE's in charge is a set of interfaces
and standards for taking that kind of

00:02:42.950 --> 00:02:47.780
work off the application developer's
hands and moving it into the container.

00:02:48.090 --> 00:02:49.640
Why do you care about J2EE?

00:02:49.640 --> 00:02:56.240
Well, it's one of the best ways to, well,
we think it's one of the better ways,

00:02:56.240 --> 00:03:00.430
to implement enterprise
applications so that it isolates

00:03:00.430 --> 00:03:02.920
you from a lot of the work.

00:03:02.920 --> 00:03:07.190
I just gave you an
example of how to do that.

00:03:07.190 --> 00:03:07.190
And it also, you know,

00:03:07.650 --> 00:03:10.400
insulates you to a certain
degree from your vendors.

00:03:10.410 --> 00:03:14.530
I know one of the big problems with
buying or developing an enterprise

00:03:14.540 --> 00:03:16.980
application is platform lock-in.

00:03:16.980 --> 00:03:19.380
You decide to go with one
specific vendor and you're

00:03:19.380 --> 00:03:20.890
stuck with that vendor forever.

00:03:20.960 --> 00:03:24.950
J2EE is an attempt at breaking that
and letting you build your enterprise

00:03:24.950 --> 00:03:28.870
application and deploy it to any one
of a number of containers developed

00:03:28.870 --> 00:03:30.680
by any one of a number of vendors.

00:03:30.680 --> 00:03:33.730
You don't have to worry so
much about your vendor suddenly

00:03:33.800 --> 00:03:35.820
jacking up licensing prices.

00:03:36.030 --> 00:03:38.760
We don't know any vendors that do that,
do we?

00:03:39.760 --> 00:03:43.200
Some of the technologies in the
J2EE area you've probably heard of.

00:03:43.200 --> 00:03:46.240
We have EJB, JSP, and Servlets.

00:03:46.240 --> 00:03:47.690
Those are the big ones.

00:03:47.720 --> 00:03:51.190
EJB is your database
or your business logic.

00:03:51.340 --> 00:03:54.360
JSP and Servlet puts
a web front end on it.

00:03:54.450 --> 00:03:57.530
Some of the other technologies
you'll hear about - JDBC,

00:03:57.530 --> 00:03:58.960
JNDI, JMS.

00:03:59.070 --> 00:04:01.800
There's more up there.

00:04:01.800 --> 00:04:04.170
Forward looking,
there's stuff like Web Services, Jack,

00:04:04.170 --> 00:04:06.250
Sage, a whole bunch of other stuff.

00:04:06.350 --> 00:04:08.930
This is mostly slides so those of
you who aren't familiar with these

00:04:09.000 --> 00:04:13.290
technologies can scribble down all the
acronyms and go Google for them later.

00:04:15.600 --> 00:05:55.800
[Transcript missing]

00:05:57.650 --> 00:05:59.250
Sorry about that.

00:05:59.410 --> 00:06:02.260
We don't usually do this on stage.

00:06:02.260 --> 00:06:05.830
You plug in EJB, JDBC, anything you need.

00:06:05.940 --> 00:06:10.970
As your applications grow,
as you've got new responsibilities,

00:06:11.000 --> 00:06:14.170
new needs, you plug in more pieces.

00:06:14.280 --> 00:06:16.270
If you decide you don't
need some of them,

00:06:16.270 --> 00:06:18.910
it's just as easy to take
those pieces back out.

00:06:22.220 --> 00:06:23.540
What else do we know about JBoss?

00:06:23.610 --> 00:06:27.480
Well, as I said,
they're an open source container.

00:06:27.480 --> 00:06:30.980
That means it's primarily
written by developers.

00:06:30.980 --> 00:06:32.860
Developers are really
good at writing code,

00:06:32.910 --> 00:06:35.700
especially for stuff they need,
but most of the people who do this are,

00:06:35.700 --> 00:06:39.480
well, really happy with Emacs,
which means they've got really lousy

00:06:39.480 --> 00:06:41.710
deployment and management tools.

00:06:41.760 --> 00:06:44.400
Most of these people work, like I said,
in Emacs,

00:06:44.400 --> 00:06:48.960
don't see anything wrong with keeping
track of 20 or 30 XML files in Emacs.

00:06:48.960 --> 00:06:51.300
We thought there was a
better way to do that,

00:06:51.320 --> 00:06:53.620
which brings us to JBoss on Mac OS X.

00:06:53.770 --> 00:06:55.420
JBoss is going to be part of Mac OS X.

00:06:55.420 --> 00:06:58.010
We're going to be shipping
some developer tools,

00:06:58.010 --> 00:07:01.430
deployment on Mac OS X Server,
and we've integrated it with

00:07:01.430 --> 00:07:02.800
some of our other tools.

00:07:04.090 --> 00:07:06.760
on the client, it's going to be part of
the developer tools package.

00:07:06.760 --> 00:07:09.020
You'll get a JBoss
developer configuration,

00:07:09.020 --> 00:07:11.640
which is JBoss set up with all
the services that a developer is

00:07:11.660 --> 00:07:13.750
likely to need to program against.

00:07:13.750 --> 00:07:18.730
And we're going to give you some Xcode
templates for building J2EE applications,

00:07:18.730 --> 00:07:22.500
EARs, WARs, JAR files,
that kind of thing.

00:07:22.500 --> 00:07:24.760
For those of you who've already been,
and I'm assuming this is

00:07:24.760 --> 00:07:27.120
most of you at this point,
poking around on the disks

00:07:27.210 --> 00:07:29.950
we gave you on Monday,
it's shipped in the sneak peeks

00:07:29.950 --> 00:07:32.600
area of the developer preview CD.

00:07:33.920 --> 00:07:37.140
On Mac OS X server it should
be part of the default install.

00:07:37.140 --> 00:07:38.950
We're going to use it as
a replacement for Tomcat.

00:07:38.950 --> 00:07:41.850
I'll get around to talking
about that a little bit later.

00:07:41.950 --> 00:07:42.670
You'll get JBoss.

00:07:42.670 --> 00:07:46.440
We'll ship you multiple configurations
because we realize that one configuration

00:07:46.440 --> 00:07:48.830
is not going to suit everybody's needs.

00:07:48.940 --> 00:07:52.080
Get a management tool
and a deployment tool,

00:07:52.080 --> 00:07:54.680
which Jesus will be showing you later.

00:07:54.680 --> 00:07:57.440
And we've integrated with server admin.

00:07:57.440 --> 00:07:59.800
So those of you who know,
were at my presentation last year

00:07:59.800 --> 00:08:01.100
and part of the WebObjects group.

00:08:01.100 --> 00:08:03.500
And we've traditionally not
been terribly well integrated.

00:08:03.500 --> 00:08:06.170
So with our JBoss product we're
trying to integrate into the

00:08:06.170 --> 00:08:08.550
Mac OS X general tools a little bit more.

00:08:11.420 --> 00:08:13.770
And for those of you who heard me
say that we're providing JBoss as a

00:08:13.770 --> 00:08:18.160
replacement for Tomcat and panicked
because they were using JBoss before,

00:08:18.160 --> 00:08:19.480
nothing important has changed.

00:08:19.620 --> 00:08:22.140
The biggest change you'll see
is that instead of enabling

00:08:22.200 --> 00:08:24.320
Tomcat from the web page,
you now enable it from the

00:08:24.400 --> 00:08:25.780
application server page.

00:08:26.170 --> 00:08:27.520
Runs on the same port.

00:08:27.610 --> 00:08:29.070
It's still in library Tomcat.

00:08:29.080 --> 00:08:33.060
And if you want, you can still go in and
configure it to run standalone.

00:08:33.080 --> 00:08:36.080
A couple of things have changed that
we think are kind of impressive.

00:08:36.080 --> 00:08:37.740
We're going to be
running a newer version,

00:08:37.770 --> 00:08:39.840
shipping a newer version,
since we know many, many,

00:08:39.840 --> 00:08:42.380
many of you have been
asking for a newer version.

00:08:42.400 --> 00:08:45.380
And when you're running the
JBoss Tomcat configuration,

00:08:45.380 --> 00:08:47.720
you'll be able to use our tools
to manage and configure it.

00:08:47.720 --> 00:08:49.920
Instead of just having
an on/off checkbox,

00:08:50.030 --> 00:08:52.350
you'll have a little bit more control.

00:08:54.080 --> 00:08:56.770
The other configurations we'll
be shipping are standalone,

00:08:56.770 --> 00:09:02.190
which is the basic small
site configuration.

00:09:02.980 --> 00:09:07.620
Tomcat Web Server has EJB containers,
JNDI, a few other things.

00:09:07.830 --> 00:09:10.130
Corba Orb is in there,
if I remember correctly.

00:09:10.190 --> 00:09:12.090
And it supports hot
deployment of applications.

00:09:12.100 --> 00:09:18.000
All you need to do is copy your
J2EE application into library,

00:09:18.270 --> 00:09:24.280
Jboss 3.2 deploy and if Jboss is running
it'll look there every few seconds,

00:09:24.370 --> 00:09:27.090
find that there's a copy or
a new copy if you upgrade,

00:09:27.200 --> 00:09:30.320
undeploy if necessary,
redeploy that new application

00:09:30.340 --> 00:09:32.200
without you having to intervene.

00:09:32.200 --> 00:09:35.140
We're shipping also a
clustered configuration.

00:09:35.270 --> 00:09:38.200
Clustered configuration is
almost identical to standalone

00:09:38.200 --> 00:09:41.200
configuration except that,
well, it's cluster.

00:09:41.200 --> 00:09:44.190
Supports HTTP session
failover for Tomcat,

00:09:44.290 --> 00:09:48.800
supports load balancing and it
supports automatically propagating

00:09:48.800 --> 00:09:52.200
changes to applications or services
to all nodes in the cluster.

00:09:52.200 --> 00:09:55.910
Means that you don't have to worry
about upgrading all of the nodes

00:09:55.910 --> 00:09:58.200
if you're upgrading applications.

00:09:58.200 --> 00:10:01.650
You just drop it in one and it
will be propagated out to the

00:10:01.650 --> 00:10:03.890
rest of the nodes in the cluster.

00:10:05.590 --> 00:10:07.800
We're also shipping a
Netboot client configuration.

00:10:07.830 --> 00:10:11.120
This is sort of the, "Wow,
we want to build a computing

00:10:11.120 --> 00:10:13.000
grid" configuration.

00:10:13.000 --> 00:10:16.860
You can centralize your configuration
on one server and tell all of your JBoss

00:10:16.860 --> 00:10:20.500
instances to start and download their
configuration from that central point.

00:10:20.500 --> 00:10:22.450
It gives you one location to manage.

00:10:22.580 --> 00:10:26.500
I've got Netboot Server here
as a configuration.

00:10:26.500 --> 00:10:28.410
It's not really a configuration,
but this seemed a good

00:10:28.520 --> 00:10:29.390
place to talk about it.

00:10:29.500 --> 00:10:33.500
A Netboot server is simply
any WebDAV enabled web server.

00:10:33.500 --> 00:10:38.500
For example,
Apache with WebDAV turned on on Mac OS X.

00:10:38.500 --> 00:10:39.500
It's pretty simple to set up.

00:10:39.500 --> 00:10:41.850
All you have to do is copy the
configuration that you want

00:10:41.900 --> 00:10:45.500
distributed to all your Netboot
clients into the Apache document route.

00:10:45.500 --> 00:10:49.820
Tell all the network clients
where to go to download their

00:10:50.720 --> 00:10:52.730
configuration and it happens.

00:10:54.610 --> 00:10:57.280
And at this point I'm going to hand
you off to Jesus who's going to talk

00:10:57.280 --> 00:11:05.150
a bit about the application lifecycle
for J2EE applications in JBoss.

00:11:10.530 --> 00:11:13.410
Hi everybody, my name is Jesus Ahuactzin.

00:11:13.410 --> 00:11:17.500
I learned also to pronounce
my last name today.

00:11:17.500 --> 00:11:21.940
I'm here to talk to you about,
before I go into the deployment tool,

00:11:21.940 --> 00:11:26.160
I want to tell you how all this fits.

00:11:26.160 --> 00:11:31.610
J2 applications are laid
out in such a way that

00:11:32.060 --> 00:11:35.240
The application lifecycle can
be taken care of by different

00:11:35.240 --> 00:11:38.830
people and with different skills.

00:11:38.840 --> 00:11:43.920
Also, each one of these stages can be
handled by different tools so

00:11:43.920 --> 00:11:47.690
that people in charge of each one
of these stages can do its job.

00:11:47.900 --> 00:11:49.850
So here is the application lifecycle.

00:11:49.850 --> 00:11:51.900
The first thing is that
you've got a developer.

00:11:51.900 --> 00:11:56.410
The developer is going to be
in charge of developing your

00:11:56.470 --> 00:11:58.900
application or your modules.

00:11:58.900 --> 00:12:03.090
So once you have your developer
creating all these modules,

00:12:03.150 --> 00:12:05.830
they will pass it to the assembler.

00:12:05.830 --> 00:12:09.670
The assembler guy is in charge
of collecting all the parts

00:12:09.670 --> 00:12:10.900
and pieces of your application.

00:12:10.900 --> 00:12:14.450
Because you could have somebody,
some developer,

00:12:14.450 --> 00:12:19.000
working very hard in your servlets
and other working in your EJBs.

00:12:19.080 --> 00:12:21.900
And then you have somebody who's
collecting all these modules and

00:12:21.900 --> 00:12:23.900
integrating them in one application.

00:12:23.900 --> 00:12:25.860
He will actually create one unit.

00:12:25.950 --> 00:12:28.850
This unit is actually a jar.

00:12:28.900 --> 00:12:33.010
And it has a special extension
called "ear". So now here

00:12:33.070 --> 00:12:35.900
you have the assembler.

00:12:35.900 --> 00:12:37.900
Depending on your organization,
it could be the same guy.

00:12:37.900 --> 00:12:41.790
So the developer is actually the
assembler who is getting you the ear.

00:12:41.900 --> 00:12:46.900
And now that you have your ear,
you're going to pass it to the deployer.

00:12:46.900 --> 00:12:51.910
The deployer is in charge of mapping
the resources that your application

00:12:51.910 --> 00:12:56.310
is going to need to those who
are in your application server.

00:12:56.640 --> 00:12:59.990
So he maps everything and
now he goes and deploys it.

00:13:00.000 --> 00:13:06.620
So you just dump it on your application
server and now his administrator

00:13:06.620 --> 00:13:12.640
has to go and look that everything
that your application is going to

00:13:12.640 --> 00:13:16.780
use is there and also is going to
monitor that your application's

00:13:16.780 --> 00:13:20.380
vital signs are strong and well.

00:13:20.380 --> 00:13:23.760
And then again, if something goes wrong,
they're probably going to call the

00:13:23.760 --> 00:13:28.280
developer and they have to fix the
things and then you see this circle.

00:13:30.550 --> 00:13:35.260
So in each one of these stages,
we wanted to do something for you

00:13:35.260 --> 00:13:37.500
to create your J2EE applications.

00:13:37.810 --> 00:13:42.880
Yesterday, we have an entire presentation
talking about what we did for the

00:13:42.880 --> 00:13:44.250
development and assembling part.

00:13:44.630 --> 00:13:48.820
Today, I'm just going to go to do a
brief recap of what we did.

00:13:48.820 --> 00:13:54.960
So from Xcode,
what we provide is three new templates.

00:13:54.960 --> 00:14:00.240
We create -- we add a
Web module template,

00:14:00.360 --> 00:14:05.860
an EJB module template,
and an enterprise application template.

00:14:05.880 --> 00:14:10.220
So you can, in fact,
create those modules, as I said,

00:14:10.220 --> 00:14:13.760
and then wrap them -- everything
up in one application.

00:14:13.760 --> 00:14:15.980
We're using to build this Ant.

00:14:15.980 --> 00:14:20.470
Ant is becoming the factory standard
for creating Java applications,

00:14:20.520 --> 00:14:21.830
so we wanted to leverage that.

00:14:22.190 --> 00:14:24.820
And not only that,
it allows us to use other

00:14:24.820 --> 00:14:28.140
technologies that are out there,
like XDocklet, that could create or

00:14:28.140 --> 00:14:28.140
generate a web application.

00:14:28.140 --> 00:14:30.590
So we have a lot of different tools
that could create or generate the

00:14:30.590 --> 00:14:35.420
interfaces that your application needs
and also the deployment descriptors.

00:14:35.420 --> 00:14:40.690
So for the assembling part, well,
we are -- it happens in the build

00:14:40.690 --> 00:14:42.490
phase and is using XDocklet.

00:14:42.990 --> 00:14:46.320
Again,
XDocklet is an open source tool that

00:14:46.670 --> 00:14:53.640
-- what it allows you is that you hint
in your source code which information

00:14:53.660 --> 00:14:57.140
is going to be in your interfaces
and your deployment descriptors.

00:14:57.140 --> 00:15:00.620
If you hint in your code,
you have some experience with J2E,

00:15:00.620 --> 00:15:05.080
you know that sometimes you spend a lot
of time not on your code but creating

00:15:05.230 --> 00:15:09.450
tons of files about the interfaces
that you need and tons of files --

00:15:09.610 --> 00:15:12.200
and tons of deployment descriptors.

00:15:12.210 --> 00:15:16.280
So the idea is that we provide
a way for you to write the code,

00:15:16.280 --> 00:15:19.940
hint the deployment --
hint the XDocklet engine,

00:15:20.130 --> 00:15:24.080
and so the XDocklet engine could
go and create those files for you.

00:15:24.160 --> 00:15:26.870
So we have a way -- the benefits that you
get is that we have a central platform.

00:15:26.920 --> 00:15:27.520
We have a central platform that we
can use to create the XDocklet engine.

00:15:27.520 --> 00:15:27.520
So we have a way -- the benefits
that you get is that we have a

00:15:27.520 --> 00:15:27.520
central platform that we can use
to create the XDocklet engine.

00:15:27.520 --> 00:15:27.520
So we have a way -- the benefits that
you get is that we have a central

00:15:27.520 --> 00:15:31.700
place where you can synchronize
your deployment descriptors and

00:15:31.700 --> 00:15:35.940
your source code and also synchronize
all those deployment descriptors.

00:15:37.470 --> 00:15:43.180
So now we have the developer
part and the assembly part.

00:15:44.290 --> 00:15:49.620
Here is just an example of xDocklet.

00:15:49.620 --> 00:15:53.050
As you can see,
xDocklet is just an extension

00:15:53.150 --> 00:15:56.760
of JavaDock and what we are
telling is just some hints about,

00:15:56.860 --> 00:15:59.610
for example,
this is going to be a session

00:15:59.610 --> 00:16:05.480
state lesbian and then we
just run your application.

00:16:05.480 --> 00:16:08.880
As a result,
we create deployment descriptors for you

00:16:08.880 --> 00:16:11.800
and also we create all the interfaces.

00:16:11.800 --> 00:16:14.610
So now we're done with the
assembly part and it's time to

00:16:14.610 --> 00:16:16.730
talk about the deployment part.

00:16:18.160 --> 00:16:23.850
So the first you might ask is why are
we interested in creating such a tool?

00:16:24.150 --> 00:16:26.330
Well, you know,
J2EE applications have this

00:16:26.450 --> 00:16:29.670
characteristic that allow you
to change the behavior of your

00:16:29.770 --> 00:16:32.590
application at deployment time.

00:16:33.090 --> 00:16:37.780
The idea is that each application will
have a set of deployment descriptors

00:16:37.920 --> 00:16:41.300
that are in your application.

00:16:41.300 --> 00:16:43.680
If you change those
deployment descriptors,

00:16:43.680 --> 00:16:50.670
you might change your application
behavior in different circumstances.

00:16:50.680 --> 00:16:53.180
So a deployment descriptor
actually is a way,

00:16:53.180 --> 00:16:57.870
a declarative way to figure out
which services the container

00:16:57.870 --> 00:17:00.100
will impose on your bins.

00:17:00.100 --> 00:17:03.490
So you can tell, for example,
to tell your container to use a

00:17:03.490 --> 00:17:07.530
specific data source when your
application is running on testing.

00:17:07.530 --> 00:17:11.080
And then when you want to deploy
it on production to tell you to

00:17:11.080 --> 00:17:12.840
use a completely different one.

00:17:12.900 --> 00:17:16.340
And you do this by changing this
information not in the application

00:17:16.400 --> 00:17:19.970
itself but rather by tweaking
the deployment descriptors.

00:17:19.980 --> 00:17:21.290
So, so far so cool, right?

00:17:21.290 --> 00:17:22.280
This is really great.

00:17:22.650 --> 00:17:25.410
Well, if you think of all the
information that you have that

00:17:25.450 --> 00:17:29.000
you can manage in this fashion,
you soon realize that this

00:17:29.180 --> 00:17:30.020
is becomes not a problem.

00:17:30.020 --> 00:17:30.020
You can actually manage
this in a very simple way.

00:17:30.020 --> 00:17:30.020
So, you can actually manage
this in a very simple way.

00:17:30.020 --> 00:17:30.020
So, you can actually manage
this in a very simple way.

00:17:30.020 --> 00:17:30.060
So, you can actually manage
this in a very simple way.

00:17:30.060 --> 00:17:30.060
So, you can actually manage
this in a very simple way.

00:17:30.060 --> 00:17:30.060
So, you can actually manage
this in a very simple way.

00:17:30.060 --> 00:17:32.890
So, you can actually manage this
in a very a trivial task.

00:17:33.080 --> 00:17:37.170
Only one has to go and look at all
the deployment descriptors and all

00:17:37.380 --> 00:17:40.580
the interrelationships between those

00:17:40.960 --> 00:17:46.490
Even for the simplest application
to realize that just using IMAX is

00:17:46.500 --> 00:17:49.410
not going to get us anywhere.

00:17:49.690 --> 00:17:53.680
So a tool with a friendly
UI becomes necessary.

00:17:53.720 --> 00:17:56.120
We decided to create one.

00:17:57.660 --> 00:18:00.400
When we were sitting down saying, well,
which technology should we

00:18:00.400 --> 00:18:01.950
use to create this tool?

00:18:02.170 --> 00:18:05.640
Well, you know,
in one side we have all these

00:18:06.130 --> 00:18:11.350
schemas and DTDs that we're modeling,
the deployment descriptors,

00:18:11.350 --> 00:18:15.700
and in the other hand we wanted to
create an HTML-based application.

00:18:15.700 --> 00:18:20.140
But we didn't want to spend a lot of
time just constructing HTML pages with

00:18:20.140 --> 00:18:26.000
text fields that would actually update
the information in the XML files.

00:18:26.010 --> 00:18:28.140
So we say, well,
why don't we just go with the

00:18:28.140 --> 00:18:29.680
only capable of doing that?

00:18:29.740 --> 00:18:35.000
So we decided to do a WebObjects
application using direct to web.

00:18:35.430 --> 00:18:40.580
So not only that, we leverage some of the
technology that's out there.

00:18:40.650 --> 00:18:46.380
Essentially,
specifically we use Java XML bindings.

00:18:46.470 --> 00:18:49.580
And this layer,
what it allows us is to marshal

00:18:49.580 --> 00:18:54.120
and unmarshal information from
the XML files into the objects.

00:18:54.200 --> 00:19:00.060
On the top of that layer
that is provided by Jaxby,

00:19:00.190 --> 00:19:02.800
we added an EOF layer.

00:19:02.880 --> 00:19:08.640
And over the top of that EOF layer,
we use our direct to web components

00:19:08.880 --> 00:19:12.680
and our rules and our web components.

00:19:12.760 --> 00:19:16.320
And that's how we created our tool.

00:19:17.460 --> 00:19:21.180
But you know, we didn't just want to
create a fancy XML editor.

00:19:21.420 --> 00:19:25.120
We wanted to provide some
value added to our tool.

00:19:25.120 --> 00:19:28.140
We think that one of the things
that are important for the

00:19:28.140 --> 00:19:32.700
deployer is to get some info,
to actually get the information

00:19:32.700 --> 00:19:36.270
that sometimes leaves in
the application container.

00:19:36.280 --> 00:19:38.350
So we didn't want to go
to the application server

00:19:38.360 --> 00:19:39.630
and get that information.

00:19:39.630 --> 00:19:43.590
We wanted to provide a way for
the user to have it just there.

00:19:43.600 --> 00:19:46.500
So we opened a channel,
a communication channel between the

00:19:46.500 --> 00:19:49.880
application and the application server,
and we pulled that information

00:19:49.880 --> 00:19:53.510
that we think is important for the
player to know at deployment time.

00:19:55.160 --> 00:19:58.540
Not only that,
we also do some cross-linking.

00:19:58.580 --> 00:20:02.930
The idea is that all these deployment
descriptors that you can have,

00:20:02.930 --> 00:20:05.290
have reference within one another.

00:20:05.290 --> 00:20:09.300
And we wanted to organize and present
it so you didn't have to find out,

00:20:09.350 --> 00:20:13.100
well, this information actually lives in
here or it should actually be there.

00:20:13.100 --> 00:20:16.800
We try to hide you from that and
organize the information so you

00:20:16.820 --> 00:20:19.000
have just to change in one place.

00:20:19.000 --> 00:20:21.790
And finally, we do some verification.

00:20:21.890 --> 00:20:28.180
The verification is not only us
going and trying to apply the

00:20:28.270 --> 00:20:33.050
constraints that the schemas and
DTDs are imposing on those files.

00:20:33.120 --> 00:20:36.200
We ask our J2EE expert and
find out that there are some

00:20:36.200 --> 00:20:39.570
validations that are unnecessary,
that are not part of the

00:20:39.570 --> 00:20:43.460
deployment descriptors,
that are convenient for you to look.

00:20:43.540 --> 00:20:48.280
And instead of going and then realizing
later that you have a problem,

00:20:48.280 --> 00:20:51.950
you can... You can fix the problem when
you are deploying your application.

00:20:52.000 --> 00:20:57.280
So why don't you just stop
talking about the deployment

00:20:57.390 --> 00:21:00.180
tool and show you how it works.

00:21:05.850 --> 00:21:10.520
So the first thing I want to do
is load my application and what

00:21:10.520 --> 00:21:13.300
I have here is an expat store here.

00:21:13.300 --> 00:21:19.500
The expat store here actually was built
yesterday on the presentation of the

00:21:19.560 --> 00:21:23.870
J2EE presentation we had yesterday.

00:21:24.130 --> 00:21:28.940
I tweaked it so it works for
the purpose of this demo.

00:21:34.760 --> 00:21:40.110
So what we're doing is we load
our application and what we are

00:21:40.150 --> 00:21:43.630
doing first is we're trying to
do that verification I told you.

00:21:43.630 --> 00:21:46.740
We try to do some validation
and if we find that there

00:21:46.740 --> 00:21:52.440
are missing data in your ear,
we try to flag it so you know up front

00:21:52.440 --> 00:21:55.860
that you have some problems that you
have to fix before you deploy it.

00:21:56.500 --> 00:22:01.100
So let me just give a brief tour of
the navigation bar that I have here.

00:22:01.100 --> 00:22:06.040
In the top I have some actions that
are self-explanatory and I will

00:22:06.040 --> 00:22:11.170
go a little bit more in detail on
what CONNECT is and why it's there.

00:22:11.440 --> 00:22:17.940
Then in the bottom side what we
have is more or less the structure

00:22:17.940 --> 00:22:20.400
that you will find in your ear.

00:22:20.400 --> 00:22:24.160
In this case what you see is that we
have three branches and each one is

00:22:24.160 --> 00:22:30.400
representing a WAR file in your ear
or a JAR file in the case for EJBs.

00:22:30.400 --> 00:22:33.870
So the idea is,
so for example in here I will

00:22:33.870 --> 00:22:41.990
have a deployment descriptor that
corresponds to the entire ear.

00:22:41.990 --> 00:22:41.990
The deployment descriptor in the ear

00:22:42.310 --> 00:22:44.200
is the easiest one.

00:22:44.430 --> 00:22:48.410
And the idea is, well,
it just tells you what

00:22:48.490 --> 00:22:51.590
information is inside of your ear.

00:22:51.590 --> 00:22:54.370
As you can see,
we are just describing which

00:22:54.530 --> 00:22:56.090
modules are in your ear.

00:22:56.110 --> 00:22:59.190
And they are the same that
we are describing that

00:22:59.200 --> 00:23:01.140
are in the navigation bar.

00:23:01.500 --> 00:23:05.290
But I wanted to bring this here because
I wanted to show you this stuff,

00:23:05.290 --> 00:23:06.370
the JBoss stuff.

00:23:06.520 --> 00:23:09.380
So what we are doing right now
is we're trying to provide,

00:23:09.380 --> 00:23:13.510
JBoss also needs some information related
to your application that sometimes

00:23:13.510 --> 00:23:15.750
is necessary and sometimes it is not.

00:23:15.760 --> 00:23:17.850
In this case, we don't need it.

00:23:17.850 --> 00:23:21.950
But what I wanted to bring up is
that we tried to put the information

00:23:21.950 --> 00:23:23.770
that you need in one spot.

00:23:23.800 --> 00:23:26.850
We didn't want to go and click
another place to find out,

00:23:26.850 --> 00:23:29.960
well, if I want to configure
the JBoss specific files.

00:23:30.020 --> 00:23:31.480
We wanted to provide it just there.

00:23:31.500 --> 00:23:32.750
there.

00:23:33.300 --> 00:23:42.500
[Transcript missing]

00:23:43.440 --> 00:23:49.600
In here what you have is the
deployment descriptor for your web app.

00:23:49.600 --> 00:23:54.520
If you're familiar with serverless,
you know that this file is

00:23:54.560 --> 00:23:59.860
the file web.xml that lives
inside the webinf directory.

00:23:59.860 --> 00:24:01.290
So you can change information here.

00:24:01.290 --> 00:24:05.050
You will have -- you see that you
can have information about the

00:24:05.050 --> 00:24:07.690
serverless mappings or filters.

00:24:07.700 --> 00:24:11.100
And the idea is that you can
change this information or if you

00:24:11.100 --> 00:24:14.820
just want to look how it looks,
well, it's there.

00:24:15.940 --> 00:24:19.940
Now, you see that I also
have a servlet section.

00:24:19.940 --> 00:24:24.040
And the idea is that if you have
seen a web.xml file is that in each,

00:24:24.040 --> 00:24:27.360
in this file,
you will have sections where you

00:24:27.360 --> 00:24:28.970
are describing also your servlets.

00:24:29.040 --> 00:24:32.650
We didn't want to put all
that information in the top,

00:24:32.650 --> 00:24:36.470
but rather present it as
servlets in a different link.

00:24:36.650 --> 00:24:39.770
So if you wanted to modify
some information related

00:24:39.770 --> 00:24:43.560
to one specific servlet,
you could do it by just clicking,

00:24:43.560 --> 00:24:44.580
do one click.

00:24:45.580 --> 00:24:47.630
So here it is.

00:24:48.030 --> 00:24:49.960
Here is the servlet information.

00:24:49.960 --> 00:24:52.640
There are initial parameters,
when you can, how,

00:24:52.640 --> 00:24:55.000
if you want to load it on the startup,
etc.

00:24:55.000 --> 00:24:59.450
There are some security issues,
some security features that

00:24:59.450 --> 00:25:01.750
you might want or not modify.

00:25:01.990 --> 00:25:05.760
But the most interesting
part comes in the EJBs.

00:25:05.760 --> 00:25:06.840
And why is this more interesting?

00:25:06.840 --> 00:25:13.090
Well, because you can at least have
three files to configure this.

00:25:13.430 --> 00:25:19.020
You can have the EJB.xml file,
you can have the JBoss.xml file,

00:25:19.070 --> 00:25:24.780
and for your CMPs you can
have the JBoss.xml file.

00:25:24.780 --> 00:25:29.350
Those files are going to be interrelated
and there will be information,

00:25:29.730 --> 00:25:33.040
again, in the top level and there will be
information that you can have in

00:25:33.100 --> 00:25:36.820
sections for each one of your bins.

00:25:36.840 --> 00:25:41.100
And so let me just show you what
I have here in the top level.

00:25:41.100 --> 00:25:46.980
And so something that is interesting
and convenient for you is that

00:25:46.980 --> 00:25:51.540
if you set some defaults in the
higher level of your archive,

00:25:51.540 --> 00:25:57.320
that information can be used as default
for each one of your individual bins.

00:25:57.550 --> 00:26:01.270
This is pretty convenient because,
for example, if I want to go to the

00:26:01.420 --> 00:26:09.020
CMP default settings,
you see that I have the data source

00:26:09.020 --> 00:26:12.160
and data source mapping in here.

00:26:12.250 --> 00:26:19.780
And the idea is that if I go
to one of my entity bins,

00:26:19.780 --> 00:26:19.780
order item is one of those,

00:26:19.900 --> 00:26:24.470
and I go to CMP database mapping,
you see that the data source is

00:26:24.470 --> 00:26:28.340
choosing the default setting and
there is no data source mapping.

00:26:28.410 --> 00:26:31.800
I'm saying that I need both,
but I'm not setting it and I'm not

00:26:32.100 --> 00:26:37.590
putting it in red because I know
that you have a valid default.

00:26:37.920 --> 00:26:40.250
and the Archive level.

00:26:40.370 --> 00:26:45.020
So what this allows you is to
make changes at the higher level

00:26:45.090 --> 00:26:49.270
and then forget about making
changes in the individual bins.

00:26:49.390 --> 00:26:52.130
And that's really convenient.

00:26:52.830 --> 00:26:57.380
So, if we go to account,
what I want to do is,

00:26:57.380 --> 00:27:00.730
now that you see we have account,
we have this thing is the one

00:27:00.730 --> 00:27:02.980
who is having some problems.

00:27:02.980 --> 00:27:06.380
And I know it has some problems
because I went to the file and

00:27:06.390 --> 00:27:12.830
delete the table name of the entity
bean and also the column names for

00:27:12.830 --> 00:27:17.110
the attributes of the entity bean.

00:27:17.280 --> 00:27:23.430
What I want to do now is if I go here and
I go try to do CMPBase database mapping,

00:27:23.430 --> 00:27:28.640
you see that you have a data
source that is not being set and

00:27:28.750 --> 00:27:32.280
where this information is coming?

00:27:32.280 --> 00:27:39.610
Well, if you actually see here,
we can connect to the application

00:27:40.510 --> 00:27:44.270
server and when we connect,
we are already connected but

00:27:44.280 --> 00:27:47.200
I unfortunately lose the other guy.

00:27:47.200 --> 00:27:49.290
That's bad.

00:27:49.300 --> 00:27:54.340
So let me just bring it back.

00:27:54.460 --> 00:28:02.260
Sorry for that.

00:28:02.280 --> 00:28:03.590
that.

00:28:17.300 --> 00:28:26.200
[Transcript missing]

00:28:26.870 --> 00:28:33.340
Okay,
so let me just go back to account and

00:28:33.340 --> 00:28:36.520
then go to the CMP-based data mapping.

00:28:37.260 --> 00:28:41.750
And see,
so if you remember we have popups

00:28:41.750 --> 00:28:44.310
here and now we don't have them.

00:28:44.350 --> 00:28:47.030
And the idea is, well,
if I want to make now these changes

00:28:47.030 --> 00:28:49.040
I have to remember that information.

00:28:49.040 --> 00:28:52.980
And so that's when I say that we
added this functionality so we

00:28:52.980 --> 00:28:56.530
could connect to the server and,
well, now it didn't close.

00:28:56.530 --> 00:28:57.600
That's pretty cool.

00:28:57.600 --> 00:28:59.440
So we connect to the server.

00:28:59.490 --> 00:29:02.150
And if we go back to that bin.

00:29:02.420 --> 00:29:04.860
and go to see the CMP database mapping.

00:29:04.920 --> 00:29:07.180
We see that now we have the popups.

00:29:07.180 --> 00:29:12.470
And essentially what we are saying is
we are becoming a J2EE Java client.

00:29:12.470 --> 00:29:15.020
Our WebObjects becomes a J2EE client.

00:29:15.150 --> 00:29:18.600
And ask the server,
where are your data sources?

00:29:18.640 --> 00:29:24.180
And so he introspects in itself
which data sources he has.

00:29:24.180 --> 00:29:27.720
And he sent us, well,
here's the data source you can have.

00:29:27.880 --> 00:29:34.840
And then I can choose the hypersonic,
I guess, SQL database that is in JBoss.

00:29:35.230 --> 00:29:39.460
And then, as you can see,
I'm also introspecting which

00:29:39.460 --> 00:29:42.640
are the tables that are
associated to this data source.

00:29:42.640 --> 00:29:47.080
So instead of me remembering
which table should I put here,

00:29:47.080 --> 00:29:49.630
I can just go and select it.

00:29:49.630 --> 00:29:51.770
Then if we go to this guy,

00:29:52.010 --> 00:29:55.590
We are going to see that we have user ID,
we can select it.

00:29:55.760 --> 00:29:59.080
Now we have introspected the
table and see which columns you

00:29:59.080 --> 00:30:00.900
have and then we can update.

00:30:00.900 --> 00:30:05.210
And then go to the other guy.

00:30:07.520 --> 00:30:10.240
And here we can choose password.

00:30:10.240 --> 00:30:13.260
And before I'm done,
you see that we have a warning here.

00:30:13.260 --> 00:30:18.660
It says that the original choice bar card
is not available on the JBoss server.

00:30:18.660 --> 00:30:24.650
So what happens is that we went to the
ear and we find out that the choice

00:30:24.850 --> 00:30:30.520
that you have in your ear doesn't really
match to anything that JBoss can have.

00:30:30.530 --> 00:30:35.190
So what we -- and essentially the
problem is that JBoss wants to

00:30:35.190 --> 00:30:38.010
provide a fully qualified type.

00:30:38.010 --> 00:30:43.500
And what we did is we put
just the bar card thing.

00:30:43.500 --> 00:30:47.340
So I know that it's going to run,
that it's not going to be a problem.

00:30:47.340 --> 00:30:51.200
But what I'm trying to tell you is
that we try to find out where you say,

00:30:51.200 --> 00:30:55.480
well, this is not actually
qualifies as an error.

00:30:55.480 --> 00:30:57.750
But, you know,
you might look at it because if --

00:30:57.810 --> 00:31:02.380
what you don't want to do is like,
well, I just ignore whatever you tell me.

00:31:02.420 --> 00:31:03.130
It's fine.

00:31:03.130 --> 00:31:04.180
I just deploy it.

00:31:04.180 --> 00:31:07.640
And then when you -- and then you
have your application is crashing

00:31:07.640 --> 00:31:11.320
and then you have to go to the
bulk cycles to find out that,

00:31:11.320 --> 00:31:15.630
oh, what happens is that JBoss is
not supporting the bar card.

00:31:15.630 --> 00:31:18.620
I have to provide the
full qualified type.

00:31:18.620 --> 00:31:23.780
So the idea is that we warn you before
you go into deploying your application.

00:31:23.780 --> 00:31:25.890
So we

00:31:27.100 --> 00:31:30.050
So we update here and then
we finally update here.

00:31:30.450 --> 00:31:36.700
Okay, and so now that we
changed that information,

00:31:36.710 --> 00:31:38.400
we click on validation application.

00:31:38.400 --> 00:31:40.480
As you can see,
we went through the rules,

00:31:40.610 --> 00:31:45.520
find out that this is a valid ear,
and now we should be able

00:31:45.520 --> 00:31:50.650
to just simply save our ear.

00:31:50.800 --> 00:31:54.380
Let's see if I have it here.

00:32:02.880 --> 00:32:05.470
So what I'm going to do is going
to save it in the deploy directory

00:32:05.530 --> 00:32:07.740
of the ExpatStore configuration.

00:32:07.740 --> 00:32:10.990
And if everything is fine,

00:32:11.880 --> 00:32:13.870
Okay, so it was saved now.

00:32:14.210 --> 00:32:19.160
So now JBoss will look in
periodically pools and look

00:32:19.220 --> 00:32:23.310
that if there is some new year,
if it is one year there,

00:32:23.310 --> 00:32:25.790
it will try to load it and launch it.

00:32:26.220 --> 00:32:30.350
So let me just...

00:32:34.170 --> 00:32:43.830
I want to show you that you can
see what is happening on JBoss.

00:32:43.870 --> 00:32:51.120
So here I want to go to
the logs and then do...

00:33:03.640 --> 00:33:07.360
Okay,
so this is the log that JBoss is spewing

00:33:07.360 --> 00:33:13.620
in and at some moment we hopefully
will see that JBoss is speaking that

00:33:13.620 --> 00:33:18.700
year and is actually deploying it.

00:33:19.070 --> 00:33:25.100
So we have to wait a second
or two or three or four

00:33:39.200 --> 00:33:51.600
[Transcript missing]

00:33:55.390 --> 00:34:02.290
It don't deploy other stuff,
but it should spew some information

00:34:02.320 --> 00:34:07.480
and at the end should say,
"I deployed this thing." So,

00:34:07.480 --> 00:34:19.290
I don't know if you guys
can... Let me just bring...

00:34:26.220 --> 00:34:31.240
Okay, so I think I have a problem
with the network and maybe

00:34:31.240 --> 00:34:33.200
I'm not able to show you this.

00:34:33.200 --> 00:34:39.700
Okay, so it's not picking it up.

00:34:40.490 --> 00:34:43.200
Well,
I would love to show you the expert story

00:34:43.200 --> 00:34:48.360
that's been deployed and it in fact,
it will,

00:34:48.420 --> 00:34:50.810
that's the way you do your deployment.

00:34:50.830 --> 00:34:53.660
Unfortunately,
I won't be able to show you.

00:34:53.720 --> 00:34:57.420
I don't know why it's not picking it up.

00:34:57.420 --> 00:35:01.190
But, so let's suppose that you see a big,

00:35:01.330 --> 00:35:05.510
Green Parrot here and that is the demo.

00:35:05.640 --> 00:35:07.590
Sorry for that.

00:35:13.450 --> 00:35:14.500
But it's not picking it up.

00:35:14.500 --> 00:35:17.440
It's JBoss not picking up the ear.

00:35:17.440 --> 00:35:20.190
Okay, so sorry for that.

00:35:20.400 --> 00:35:23.280
I promise that when you do this,
it won't happen.

00:35:23.380 --> 00:35:30.930
With that, I leave Melissa to...

00:35:37.670 --> 00:35:39.950
So obviously we're doing
a presentation because,

00:35:39.980 --> 00:35:41.340
you know,
it's not a presentation unless at

00:35:41.410 --> 00:35:44.250
least one demo decides to go haywire.

00:35:45.700 --> 00:35:49.090
Because that was our deployment tool,
that is, we think, by and large,

00:35:49.130 --> 00:35:53.260
the thing you're going to
appreciate most about our offering.

00:35:53.260 --> 00:35:54.930
The UI is going to get
cleaned up a little bit,

00:35:54.960 --> 00:35:59.030
we're still working on it,
but it should make deploying

00:35:59.030 --> 00:36:01.820
J2EE applications a lot easier.

00:36:02.010 --> 00:36:03.700
But once you've got your
application deployed,

00:36:03.700 --> 00:36:05.590
you have to manage it.

00:36:05.920 --> 00:36:07.700
Our management tools
come in two components.

00:36:07.810 --> 00:36:10.130
We've basically given you two parts.

00:36:10.250 --> 00:36:13.070
We've done a plug-in for server admin,
and we have a web-based

00:36:13.130 --> 00:36:15.340
management and configuration tool.

00:36:15.470 --> 00:36:19.260
What these two together allow you to
do is manage your JBoss configurations.

00:36:19.260 --> 00:36:20.960
You can start and stop the server.

00:36:20.990 --> 00:36:23.160
You can start and stop
individual services.

00:36:23.240 --> 00:36:25.390
You can view and
configure those services.

00:36:25.450 --> 00:36:29.480
That last one sounds
a little bit strange,

00:36:29.480 --> 00:36:29.480
but--

00:36:29.970 --> 00:36:32.090
There's reasons for configuring
the services themselves.

00:36:32.100 --> 00:36:35.360
You may want to add new
JMS topics and queues.

00:36:35.470 --> 00:36:37.880
You may decide that you
need to increase the number,

00:36:37.880 --> 00:36:40.630
the size of a connection
pool for your CMP stuff,

00:36:40.630 --> 00:36:41.860
reasons like that.

00:36:41.860 --> 00:36:44.300
So you need to be able to
configure your container as well.

00:36:44.450 --> 00:36:49.350
And in the JBoss world,
that's configuring the services.

00:36:51.280 --> 00:36:53.400
And at this point,
Jesus is going to give you another demo.

00:36:53.400 --> 00:36:56.840
This time he's going to walk
through the management tool.

00:36:56.920 --> 00:37:04.250
JESSE HEIMERL: So hopefully this-- we
won't have problems here.

00:37:04.690 --> 00:37:07.690
I won't promise you that.

00:37:07.810 --> 00:37:10.230
So we have the server admin.

00:37:10.230 --> 00:37:14.100
So now you can -- what you can
do is you have your application

00:37:14.100 --> 00:37:16.560
server as part of your server admin.

00:37:16.560 --> 00:37:21.620
It's part of the services that
are vended for Mac OS X Server.

00:37:21.780 --> 00:37:27.060
So you can see that the application
server is listed as any other

00:37:27.060 --> 00:37:30.710
service like FTP or open directory.

00:37:30.710 --> 00:37:30.710
And

00:37:30.940 --> 00:37:36.740
So you can select it and you can stop the
service or start the service as you wish.

00:37:36.740 --> 00:37:40.260
So if you click in there,
we have the first page as well.

00:37:40.260 --> 00:37:45.200
It's just a status page telling you
if the application is running or not,

00:37:45.440 --> 00:37:51.380
what type of configuration it has,
the version of the application server,

00:37:51.380 --> 00:37:52.690
et cetera.

00:37:52.710 --> 00:37:57.300
Most interesting information you
will find in the server section.

00:37:57.300 --> 00:38:02.230
There are two logs that
I want to talk to you about.

00:38:02.240 --> 00:38:04.000
The first one is the boot log.

00:38:04.000 --> 00:38:08.210
This is important because this is
information that's going to be recorded

00:38:08.440 --> 00:38:11.280
by JBoss when it starts the first time.

00:38:11.300 --> 00:38:15.000
So if you're having problems with JBoss,
not launching applications

00:38:15.000 --> 00:38:18.190
or something like that,
you might want to go to here

00:38:18.190 --> 00:38:20.290
and see if there is a problem.

00:38:20.390 --> 00:38:24.800
So it's a good place to
start doing some diagnostic.

00:38:24.800 --> 00:38:30.020
And then the other one is server log.

00:38:30.020 --> 00:38:33.280
Here in server log,
you can find all the information that

00:38:33.280 --> 00:38:36.280
the server at runtime is recording.

00:38:36.280 --> 00:38:40.830
Some of the information is important as
like the life cycle of the application.

00:38:40.940 --> 00:38:44.870
So when it gets deployed or undeployed,
the information is going

00:38:44.950 --> 00:38:46.060
to be recorded here.

00:38:46.060 --> 00:38:48.880
But also if your
application is misbehaving,

00:38:48.900 --> 00:38:51.620
you will have like runtime exceptions.

00:38:52.010 --> 00:38:54.980
Those problems are
going to be logged here.

00:38:54.980 --> 00:38:57.660
So then again,
it's a way -- a good place for

00:38:57.660 --> 00:38:59.810
you to start looking for problems.

00:39:00.260 --> 00:39:02.480
Finally, we have the settings part.

00:39:02.480 --> 00:39:07.680
And the settings part, what we have,
you can choose your configuration.

00:39:07.700 --> 00:39:11.210
Melissa already told you that you
can have a remote configuration

00:39:11.210 --> 00:39:13.140
or a Tomcat only configuration.

00:39:13.140 --> 00:39:15.550
In this case,
I'm using a local configuration

00:39:15.830 --> 00:39:16.990
and it's a special one.

00:39:17.120 --> 00:39:20.100
I create one called expet store.

00:39:20.110 --> 00:39:23.130
So and you have a button.

00:39:23.590 --> 00:39:27.850
The button essentially what it does
is that it brings the management tool.

00:39:27.850 --> 00:39:30.640
Observe that I'm going through HTTP.

00:39:30.640 --> 00:39:34.520
So your username and password
or configuration are not going

00:39:34.520 --> 00:39:38.520
in clear text through the wire.

00:39:38.520 --> 00:39:40.220
Here something interesting as well.

00:39:40.300 --> 00:39:44.420
What you first might ask is why we
are using an authentication face here.

00:39:44.420 --> 00:39:46.140
Well, we have two roles.

00:39:46.140 --> 00:39:50.210
You can have an administrator role
and essentially he's allowed to

00:39:50.210 --> 00:39:55.440
change the configuration information
in the application server.

00:39:55.440 --> 00:39:58.750
And he can monitor your applications.

00:39:58.770 --> 00:40:00.600
And we have a user model.

00:40:00.600 --> 00:40:02.970
So you can see that he's able to
see the code where it's just the

00:40:02.970 --> 00:40:05.140
monitoring part that he can see.

00:40:05.140 --> 00:40:10.040
So you can tell which users
can modify configurations.

00:40:10.040 --> 00:40:17.670
Now look that I am typing root
and I'm using -- the user root

00:40:17.730 --> 00:40:25.680
that I'm putting here is actually
the root guy for this system.

00:40:25.680 --> 00:40:30.550
So what I'm trying to say is that we
are interfacing with directory services.

00:40:30.560 --> 00:40:37.430
So we don't provide a funky little
administration capability in this

00:40:37.580 --> 00:40:39.800
tool for your users and passwords.

00:40:39.800 --> 00:40:45.010
We are leveraging all that
structure to the directory services.

00:40:45.020 --> 00:40:48.970
So if you already have your services
and they already are assigned if they

00:40:48.970 --> 00:40:54.880
belong to wheel or whatever and they
are in that info servers or servers,

00:40:54.880 --> 00:40:56.520
I don't care.

00:40:56.520 --> 00:41:00.420
We will reuse that information.

00:41:00.520 --> 00:41:06.290
So I'm going to log in and
if I remember the password,

00:41:06.290 --> 00:41:08.590
then it will be just very cool.

00:41:13.090 --> 00:41:20.000
Okay, so you have three
possibilities of choosing here.

00:41:20.000 --> 00:41:26.520
The first two will only be seen by the
administrator and also the third one,

00:41:26.520 --> 00:41:32.000
but for the users that only care
about the applications state,

00:41:32.040 --> 00:41:33.600
you will see only the last row.

00:41:33.880 --> 00:41:37.160
So I'm going to choose the
expert store configuration and

00:41:37.160 --> 00:41:39.090
show you a little bit about it.

00:41:39.090 --> 00:41:46.080
So what you see is we
see all the services.

00:41:48.000 --> 00:42:00.200
[Transcript missing]

00:42:02.500 --> 00:42:03.930
is not showing them.

00:42:03.980 --> 00:42:04.500
Very good.

00:42:04.500 --> 00:42:11.220
Let me see if I can see just the
deploy standalone configuration.

00:42:15.520 --> 00:42:16.430
There you go.

00:42:16.430 --> 00:42:19.190
So in here what we're
seeing is the services.

00:42:19.190 --> 00:42:23.000
All the services that your
application server is offering.

00:42:23.000 --> 00:42:26.970
And so you can select one of this
and then look at the information,

00:42:26.970 --> 00:42:30.440
like for example I'm seeing
right now the mail service.

00:42:30.560 --> 00:42:34.100
And then you can actually go
and change that information.

00:42:34.100 --> 00:42:38.660
This information is going to be
actually saving the application server.

00:42:38.660 --> 00:42:42.130
So you don't have to go through
your application server,

00:42:42.130 --> 00:42:45.450
look which is the proper
XML file to modify it.

00:42:45.570 --> 00:42:47.060
You can modify it there.

00:42:47.060 --> 00:42:48.500
You can do it in here.

00:42:48.500 --> 00:42:54.490
We also have other services
like Tomcat that is interesting.

00:42:54.490 --> 00:42:56.020
We're using Tomcat.

00:42:56.020 --> 00:42:58.620
So you can see we have Catalina.

00:42:58.620 --> 00:43:00.500
And so you have all the attributes.

00:43:00.500 --> 00:43:04.810
You can change the attributes
of your Tomcat server from here.

00:43:04.820 --> 00:43:11.040
And other stuff that you can do is
we were using a data for the first

00:43:11.270 --> 00:43:14.620
demo I did for deployment tool.

00:43:14.620 --> 00:43:15.480
We were using a data for the first
demo I did for deployment tool.

00:43:15.480 --> 00:43:19.640
So you can create a data source,
a expert store data source.

00:43:19.660 --> 00:43:21.760
Well you can create that data source.

00:43:21.840 --> 00:43:22.620
I already have it.

00:43:22.700 --> 00:43:25.140
But you actually create
that data source from here.

00:43:25.140 --> 00:43:25.920
You click in here.

00:43:25.920 --> 00:43:26.860
You provide information.

00:43:26.860 --> 00:43:28.690
And we add that data source.

00:43:28.830 --> 00:43:32.120
That data source could point to
another database like Oracle.

00:43:32.220 --> 00:43:33.860
We were using hypersonic SQL.

00:43:33.860 --> 00:43:37.280
But you can do all that
management work from here.

00:43:37.280 --> 00:43:41.200
And that would be our demo
for the management tool.

00:43:50.600 --> 00:43:52.000
That would sort of be
the management tool.

00:43:52.000 --> 00:43:53.980
As we said,
it's web-based because we know

00:43:53.980 --> 00:43:58.500
a lot of people want to manage
their configurations remotely.

00:43:59.290 --> 00:44:02.600
Hey, you have a Blackberry
running over Bluetooth?

00:44:02.740 --> 00:44:04.680
Theoretically,
you could manage if you could

00:44:04.790 --> 00:44:06.600
actually get the bandwidth.

00:44:06.600 --> 00:44:07.990
As we said, it's secure.

00:44:08.310 --> 00:44:11.970
We use SSL and Open Directory.

00:44:12.750 --> 00:44:13.700
What can we say?

00:44:13.700 --> 00:44:14.860
Security is a big thing
for a lot of people.

00:44:14.860 --> 00:44:17.690
We didn't want to have --
because we were plugging in

00:44:17.690 --> 00:44:20.980
with the open directory stuff,
we didn't want to have your

00:44:20.980 --> 00:44:24.470
passwords floating around clear text,
so we actually wrote an adapter for

00:44:24.560 --> 00:44:28.300
the WebObjects application to talk SSL.

00:44:28.820 --> 00:44:31.330
I've had at least one question
about that from people,

00:44:31.350 --> 00:44:33.220
so I'm the person you want to talk to.

00:44:33.220 --> 00:44:34.480
I'm the one who did that.

00:44:34.480 --> 00:44:36.470
And it allows you to view and
configure deployed services

00:44:36.470 --> 00:44:37.730
and start and stop services.

00:44:37.790 --> 00:44:39.260
It also does a few other things.

00:44:39.260 --> 00:44:42.860
It lets you deploy applications and
monitor deployed applications because,

00:44:42.860 --> 00:44:45.340
well,
this is a large part of what management

00:44:45.340 --> 00:44:47.700
tools are supposed to let you do.

00:44:47.700 --> 00:44:49.690
Jesus is going to talk again.

00:44:51.760 --> 00:44:57.730
Okay,
so let's -- so from here I can change

00:44:57.730 --> 00:45:01.870
the configuration I'm looking at,
but in this case I'm not

00:45:01.870 --> 00:45:03.080
modifying the configuration.

00:45:03.080 --> 00:45:05.610
Essentially what it does is
takes me to the first page,

00:45:05.720 --> 00:45:09.740
and now I can actually monitor
my applications running.

00:45:10.900 --> 00:45:13.020
So we're not running?

00:45:13.040 --> 00:45:17.540
That would explain why your
deployment wasn't taking.

00:45:17.570 --> 00:45:19.730
So which server?

00:45:20.950 --> 00:45:22.900
Can we know which port we are running?

00:45:22.900 --> 00:45:24.900
Try stop and start it.

00:45:24.900 --> 00:45:30.900
So here is, you can stop the application
server and you can start it.

00:45:30.900 --> 00:45:31.900
And just one button.

00:45:31.900 --> 00:45:32.900
Isn't that great?

00:45:32.900 --> 00:45:36.380
Check the log.

00:45:38.470 --> 00:45:41.000
And if you're having problems
trying to start it up,

00:45:41.000 --> 00:45:45.310
you can have, you know, so here.

00:45:47.900 --> 00:45:56.100
[Transcript missing]

00:45:56.780 --> 00:45:57.700
There we go.

00:45:57.700 --> 00:45:58.700
Okay.

00:45:58.700 --> 00:46:01.700
So let me see if I can monitor.

00:46:01.700 --> 00:46:05.970
Select new configuration.

00:46:08.100 --> 00:46:16.340
and David Koehn.

00:46:16.670 --> 00:46:16.670
I feel like those are not related.

00:46:16.670 --> 00:46:16.670
Okay.

00:46:16.670 --> 00:46:16.670
So apparently JBoss has
decided to drive us nuts.

00:46:17.490 --> 00:46:21.340
- Wait,
you should go into the manage thing.

00:46:21.380 --> 00:46:23.100
- To the-- - Top one.

00:46:23.100 --> 00:46:30.080
- Okay, so we'll fake it.

00:46:30.100 --> 00:46:31.840
Scoot.

00:46:31.860 --> 00:46:41.130
Told him to scoot.

00:47:03.300 --> 00:47:15.500
[Transcript missing]

00:47:17.260 --> 00:47:22.240
Okay, so now, well, actually,
given that we're running out of time,

00:47:22.240 --> 00:47:23.300
that's not such a bad thing.

00:47:23.300 --> 00:47:26.610
But what you would see if you were
seeing this is Jesus would go into

00:47:26.610 --> 00:47:30.780
the same page where he was showing the
logout and change configuration pages.

00:47:30.780 --> 00:47:34.140
He would be able to click on
the deploy application button.

00:47:34.140 --> 00:47:37.780
A sheet would come down and let him pick
which application he wanted to deploy.

00:47:37.780 --> 00:47:39.220
He'd hit deploy application.

00:47:39.240 --> 00:47:42.540
And the application would be
uploaded through the management tool,

00:47:42.540 --> 00:47:46.400
pushed out to the JBoss configuration,
written into the deploy directory.

00:47:46.930 --> 00:47:49.640
And from there,
everything would be as per normal,

00:47:49.640 --> 00:47:53.240
as everything would happen exactly
the way it would if you had

00:47:53.240 --> 00:47:54.920
copied a file into that directory.

00:48:02.000 --> 00:48:06.300
And now comes the brief WebObjects
and J2EE section of this.

00:48:06.300 --> 00:48:09.420
You can now deploy WebObjects
applications in JBoss.

00:48:09.420 --> 00:48:14.580
We're providing support for building
.wars in the WebObjects world from Xcode.

00:48:14.580 --> 00:48:17.780
And those of you who've worked with
previous versions of our product

00:48:17.820 --> 00:48:24.090
probably know that you could,
in 5.2, create a .wo directory that

00:48:24.100 --> 00:48:27.900
could also be used as a .war and
deployed as an exploded directory.

00:48:28.680 --> 00:48:31.610
For the next release,
we're hoping to provide the ability

00:48:31.610 --> 00:48:35.790
to deploy as a single-file archive,
which means we've had to do some

00:48:35.790 --> 00:48:39.000
reworking of the NSBundle loading stuff.

00:48:39.020 --> 00:48:43.660
And for those of you who didn't
actually believe us when we said in 5.1

00:48:43.660 --> 00:48:47.160
that we were deprecating some of the
NSBundle and NSResourceManager APIs,

00:48:47.160 --> 00:48:48.330
we've done it.

00:48:49.700 --> 00:48:54.900
If you try and run a bundle or run
an application which is bundled as an

00:48:54.900 --> 00:48:58.600
archive and you're using those APIs,
things are going to go drastically wrong.

00:48:58.600 --> 00:49:00.600
We told you so.

00:49:00.950 --> 00:49:03.680
We also have the ability to
package our frameworks as

00:49:03.680 --> 00:49:06.750
JAR archives so that you can then
embed them inside other archives.

00:49:06.760 --> 00:49:08.770
You can load them that way.

00:49:08.940 --> 00:49:11.260
And we're providing support
for JNDI properties.

00:49:11.260 --> 00:49:14.740
What this means is that,
as many of you know,

00:49:14.870 --> 00:49:17.900
if you run inside a container,
system properties becomes a

00:49:17.900 --> 00:49:19.760
pretty vague and nebulous thing.

00:49:19.760 --> 00:49:23.760
So we have support for using JNDI as
a properties lookup mechanism.

00:49:23.760 --> 00:49:28.260
If we find things in JNDI properties or
if we find properties files set up there,

00:49:28.260 --> 00:49:30.760
we won't actually try and
access system resources.

00:49:30.760 --> 00:49:34.210
So it gives you two places to look,
two ways to configure your application.

00:49:34.260 --> 00:49:38.090
I think we've also added a few extra
properties just for containers,

00:49:38.090 --> 00:49:40.260
but I don't remember what they are.

00:49:40.260 --> 00:49:43.120
At this point,
Jesus is sort of going to show you that

00:49:43.140 --> 00:49:45.260
we actually can and have done this.

00:49:45.260 --> 00:49:47.260
This is easy because we don't
actually have to use the tools.

00:49:47.260 --> 00:49:49.260
This is all from the command line.

00:49:49.360 --> 00:49:53.280
But we need gate balls anyway,
so... Well, not really.

00:49:53.280 --> 00:49:57.260
We can show them that hello-world.org
is actually a WebObjects application.

00:49:57.260 --> 00:49:58.260
Interesting.

00:49:58.280 --> 00:50:00.260
So we can do that internally.

00:50:00.280 --> 00:50:01.150
Okay.

00:50:01.260 --> 00:50:04.260
Let's try to deploy it.

00:50:04.260 --> 00:50:10.250
And if JBoss is willing,
we'll see our hello-world application.

00:50:10.260 --> 00:50:14.250
It's a WebObjects application in a
single deployment directory form.

00:50:14.270 --> 00:50:16.260
We'll see it run.

00:50:16.260 --> 00:50:23.260
So what I'm going to do is
just take the hello-world.org.

00:50:23.260 --> 00:50:28.550
And the only thing I should do
is just go and copy it over to

00:50:28.550 --> 00:50:32.260
the deploy directory of JBoss.

00:50:32.270 --> 00:50:35.180
In the same fashion as
the expat store should,

00:50:35.250 --> 00:50:39.340
in some moments, pick it up,
and I should be able to show

00:50:39.340 --> 00:50:41.260
you from the web browser.

00:50:41.460 --> 00:50:44.260
We can give it a shot anyway.

00:50:44.260 --> 00:50:45.170
I can try.

00:50:45.260 --> 00:50:50.790
So now it's like a nice time to do
those pullings about how many do you

00:50:50.790 --> 00:50:53.260
think this thing is going to work.

00:50:53.260 --> 00:50:56.260
Show of hands, how many of you think
this one's going to work?

00:50:56.260 --> 00:50:57.260
There they are.

00:50:57.260 --> 00:50:58.260
Oh, we have optimism.

00:50:58.260 --> 00:51:00.250
We have believers.

00:51:00.250 --> 00:51:00.260
Good.

00:51:00.390 --> 00:51:01.230
You like us.

00:51:04.760 --> 00:51:08.370
Okay, so let's see.

00:51:08.420 --> 00:51:09.220
Hello world.

00:51:09.220 --> 00:51:12.250
No, we have a problem.

00:51:12.310 --> 00:51:13.380
We didn't have network.

00:51:13.380 --> 00:51:15.890
Oh.

00:51:17.420 --> 00:51:22.120
Yeah, this is-- It's-- well,
we had problems earlier,

00:51:22.120 --> 00:51:23.960
so we had to take this
host off the network.

00:51:23.960 --> 00:51:26.260
And it looks like we may have
quite thoroughly confused

00:51:26.260 --> 00:51:28.260
its networking capabilities.

00:51:28.410 --> 00:51:32.250
Apparently, it's not capable of believing
that it's not on a network,

00:51:32.250 --> 00:51:35.360
but it should still allow
the loopback address to work.

00:51:35.380 --> 00:51:38.580
So who could have known?

00:51:39.820 --> 00:51:41.600
You know, it's a presentation.

00:51:41.600 --> 00:51:43.740
They gave us the machines
15 minutes beforehand.

00:51:43.740 --> 00:51:44.760
That's why we started late.

00:51:44.800 --> 00:51:46.800
Sorry.

00:51:47.480 --> 00:51:51.970
So anyway, so what we've shown you,
or at least we've told

00:51:51.970 --> 00:51:54.200
you if not shown you,
is that you can develop

00:51:54.200 --> 00:51:56.760
J2EE applications on Mac OS X client.

00:51:56.760 --> 00:51:59.250
You can deploy them on
Mac OS X Server in JBoss.

00:51:59.250 --> 00:52:01.820
We have the best tools
out there for JBoss,

00:52:01.820 --> 00:52:04.360
and they'll get better, we promise.

00:52:04.360 --> 00:52:07.680
We've got an assembly tool that
will make your life a lot easier.

00:52:07.680 --> 00:52:11.820
I know you might have looked at it and
thought that looks awfully complicated.

00:52:11.820 --> 00:52:12.340
Trust me.

00:52:12.340 --> 00:52:16.000
Trust Stefan,
who's sitting over there in the audience.

00:52:16.000 --> 00:52:20.260
Things cannot get worse
than Emacs and XML files.

00:52:20.260 --> 00:52:23.760
And you can deploy WebObjects in JBoss,
and I know that's something that

00:52:23.760 --> 00:52:25.280
a lot of you have been asking for.

00:52:25.280 --> 00:52:30.150
So at this point, for more information,
go to the website, jboss.com/jboss.

00:52:31.660 --> 00:52:35.940
This is mostly for the DVDs later,
but these are the people you can

00:52:35.940 --> 00:52:38.350
contact if you've got questions
about this presentation.

00:52:40.000 --> 00:52:41.900
Here's the reference library.

00:52:42.060 --> 00:52:44.700
Places to go, things to read.

00:52:44.700 --> 00:52:46.390
This is a little bit
more interesting for us,

00:52:46.390 --> 00:52:46.900
I think.

00:52:46.900 --> 00:52:51.180
This is the open source projects that
we're attached with or that we're using

00:52:51.180 --> 00:52:53.310
that you might want to go have a look at.

00:52:53.400 --> 00:52:56.470
We've got the sourceforge.net
project for JBoss.

00:52:56.560 --> 00:52:59.340
There are actually two
separate organizations.

00:52:59.410 --> 00:53:02.690
There's JBoss.org,
which is a commercial arm group

00:53:02.830 --> 00:53:06.980
that does development of JBoss and
sells consulting services for it.

00:53:07.010 --> 00:53:09.970
And then there's the open
source project itself.

00:53:10.370 --> 00:53:12.930
That's where you'd find Tomcat
at Apache and that's where you'd

00:53:13.030 --> 00:53:14.300
find the Ant and X Docklet stuff.