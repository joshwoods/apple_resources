WEBVTT

00:00:23.200 --> 00:00:25.080
Thank you and good morning.

00:00:25.080 --> 00:00:28.040
It's good to see that there are so many
people coming to this session because

00:00:28.040 --> 00:00:38.490
automated testing has been one of my most
considered ideas to promote for Mac OS X.

00:00:43.600 --> 00:00:45.400
So of course, you know, why are we here?

00:00:45.400 --> 00:00:47.540
Because there's a great
need for testing automation.

00:00:47.540 --> 00:00:50.160
Our applications have
become more complex.

00:00:50.260 --> 00:00:53.260
Our needs for debugging,
we want to reduce our

00:00:53.260 --> 00:00:55.370
engineering support requirements.

00:00:55.400 --> 00:00:58.420
And what we want to show
you today is two things.

00:00:58.420 --> 00:01:02.620
One, a solution from Apple that's
AppleScript-based functional

00:01:02.650 --> 00:01:06.920
testing based upon our
Section 508 accessibility APIs.

00:01:06.920 --> 00:01:10.840
And two, a solution that's being provided
for us from the Redstone

00:01:10.840 --> 00:01:13.020
software folks called Eggplant.

00:01:13.020 --> 00:01:16.950
Which does user-centric
testing from a scripted base.

00:01:16.950 --> 00:01:22.380
And without further ado,
let me introduce John Comiskey from

00:01:22.380 --> 00:01:27.010
the Senior Software Engineer from
the AppleScript group.

00:01:32.600 --> 00:01:34.200
Thank you, Godfrey.

00:01:34.270 --> 00:01:35.140
Thank you all for coming.

00:01:35.140 --> 00:01:35.600
Good morning.

00:01:35.600 --> 00:01:36.790
My name is John Comiskey.

00:01:36.800 --> 00:01:39.500
I'm an engineer in the AppleScript group.

00:01:39.500 --> 00:01:43.000
And I want to talk to you
today about GUI scripting.

00:01:43.080 --> 00:01:45.870
First, a little bit about where
GUI scripting came from.

00:01:46.180 --> 00:01:49.870
Section 508 is a federal law
that mandates accessibility

00:01:49.870 --> 00:01:54.000
features for hardware and software
purchased by the federal government.

00:01:54.000 --> 00:01:56.500
And if you're interested
in that kind of thing,

00:01:56.500 --> 00:01:57.940
you can look at the U.S.

00:01:57.940 --> 00:02:01.550
government's site about the law itself.

00:02:01.850 --> 00:02:06.330
Apple responded to this,
being good citizens,

00:02:06.560 --> 00:02:09.960
by creating an accessibility API.

00:02:09.960 --> 00:02:11.320
It's in Jaguar right now.

00:02:11.480 --> 00:02:14.510
You can look at the header files,
which is how I learned about it.

00:02:14.730 --> 00:02:18.040
You can also go to the documentation
on the developer website

00:02:18.050 --> 00:02:19.300
and learn about it that way.

00:02:19.300 --> 00:02:24.250
If you search for accessibility,
you'll get some hits on documentation

00:02:24.250 --> 00:02:29.620
for Carbon and for Cocoa and for how it
should appear to your users if you're

00:02:29.620 --> 00:02:32.290
working in the accessibility space,
if you're building hardware or

00:02:32.290 --> 00:02:38.080
software to make the computer more
usable by people with disabilities.

00:02:38.570 --> 00:02:42.880
When we in AppleScript saw this,
we realized that this doesn't

00:02:42.880 --> 00:02:44.660
just have to be an API.

00:02:44.660 --> 00:02:46.760
It could be available
through scripting as well.

00:02:46.760 --> 00:02:49.440
So we created GUI scripting.

00:02:49.440 --> 00:02:53.200
It's a suite inside the
system events program.

00:02:53.200 --> 00:02:56.360
If you target your
events to system events,

00:02:56.360 --> 00:02:58.500
they'll be handled there.

00:02:58.500 --> 00:03:00.580
And if you want to
look at the dictionary,

00:03:00.640 --> 00:03:04.890
you can open up the dictionary for system
events and look in the processes suite.

00:03:04.960 --> 00:03:08.940
Because GUI scripting has been
implemented as an extension

00:03:08.970 --> 00:03:10.760
to the processes suite.

00:03:10.870 --> 00:03:14.340
And there's some interesting
examples on the AppleScript website.

00:03:14.390 --> 00:03:19.710
And you can see the URL for that there.

00:03:21.560 --> 00:03:23.320
So what is GUI scripting?

00:03:23.450 --> 00:03:28.770
It's an object model of the current state
of the UI at this particular instance,

00:03:28.810 --> 00:03:29.620
instant.

00:03:29.620 --> 00:03:33.900
You can access the things that you
can see on the screen through a

00:03:34.300 --> 00:03:36.490
containment hierarchy of objects.

00:03:36.510 --> 00:03:40.080
Every process on a machine
is now also a UI element.

00:03:40.080 --> 00:03:44.330
In addition to being a UI element,
each process is a container

00:03:44.330 --> 00:03:46.030
for other UI elements.

00:03:46.060 --> 00:03:49.390
Every process contains
one or more UI elements,

00:03:49.390 --> 00:03:53.990
usually one menu bar,
and one or more windows.

00:03:54.090 --> 00:03:56.360
And then containment for
UI elements is recursive.

00:03:56.410 --> 00:04:00.040
Inside the windows, there's buttons,
sliders, all sorts of things.

00:04:00.040 --> 00:04:03.170
And you can get all of these
by walking down the tree to the

00:04:03.170 --> 00:04:05.330
object that you're interested in.

00:04:08.940 --> 00:04:11.390
Every UI element has a set of attributes.

00:04:11.390 --> 00:04:13.640
Buttons have titles.

00:04:13.880 --> 00:04:16.980
Various UI elements might
be enabled or disabled.

00:04:17.120 --> 00:04:23.400
You can get at these
attributes as a collection,

00:04:23.400 --> 00:04:27.800
as elements of the UI element itself.

00:04:27.890 --> 00:04:29.870
Certain ones that are
particularly useful,

00:04:29.870 --> 00:04:32.560
we've called them out and given
them property names so that

00:04:32.560 --> 00:04:33.540
you can get at them directly.

00:04:33.540 --> 00:04:37.250
One less step in your
hierarchy to get at those.

00:04:38.380 --> 00:04:42.420
Each UI element also contains
a collection of actions.

00:04:42.420 --> 00:04:44.430
Those are the things that
that UI element can do.

00:04:44.440 --> 00:04:47.410
So buttons can be pressed,
sliders can be slid,

00:04:47.700 --> 00:04:51.830
and an individual UI element
will tell you these are the

00:04:51.830 --> 00:04:53.230
actions that I think I can do.

00:04:53.240 --> 00:04:55.770
And if you want to do
one of those things,

00:04:55.850 --> 00:04:59.040
there's a perform verb,
and you apply the perform

00:04:59.040 --> 00:05:03.080
verb to the action object,
and the action applies

00:05:03.080 --> 00:05:06.710
itself to its container,
which is a UI element.

00:05:08.520 --> 00:05:11.700
So what can you do with GUI scripting?

00:05:11.700 --> 00:05:14.960
You can access the attributes
and actions of all the standard

00:05:14.990 --> 00:05:16.400
controls on your screen.

00:05:16.520 --> 00:05:20.400
So you can find out how big a button is,
where it is on the screen,

00:05:20.410 --> 00:05:22.780
whether a menu item is
enabled or disabled.

00:05:22.780 --> 00:05:24.940
You can get at all of that information.

00:05:25.870 --> 00:05:32.660
And you can use this information to
test the user interface of your program,

00:05:33.110 --> 00:05:35.540
whether your application
is scriptable or not.

00:05:35.600 --> 00:05:38.420
You don't need other kinds
of scripting to do this.

00:05:38.610 --> 00:05:41.710
And this allows you to control
the behavior of otherwise

00:05:41.710 --> 00:05:43.580
unscriptable applications.

00:05:44.240 --> 00:05:46.570
Whoever would do that.

00:05:46.750 --> 00:05:48.970
What it can't do.

00:05:48.980 --> 00:05:51.920
GUI scripting can't get at
any non-standard controls.

00:05:52.000 --> 00:05:55.170
If your application has a lot of
GUI widgets on the screen that

00:05:55.170 --> 00:05:58.690
you designed and built yourself,
we probably won't know anything about

00:05:58.750 --> 00:06:00.590
them and we won't be able to get at them.

00:06:00.590 --> 00:06:03.680
They'll just be dead spots on
the screen that we can't touch.

00:06:04.740 --> 00:06:09.930
The Accessibility API does have
some features that allow you to take

00:06:09.930 --> 00:06:14.120
your non-standard controls and make
them behave enough like standard

00:06:14.120 --> 00:06:18.290
controls that the Accessibility
API can see them and work with them.

00:06:18.300 --> 00:06:21.630
I would strongly suggest you do
that if you depend heavily on

00:06:21.630 --> 00:06:25.770
custom controls and not just for
GUI scripting but for accessibility.

00:06:25.800 --> 00:06:28.570
We bought into accessibility,
you guys should too,

00:06:28.570 --> 00:06:32.140
and the way you do that is to take
your custom controls and make them

00:06:32.140 --> 00:06:34.380
behave in a little less custom fashion.

00:06:34.380 --> 00:06:40.550
Another thing that you can't do with
GUI scripting is you cannot directly test

00:06:40.550 --> 00:06:43.910
the object model of your application.

00:06:44.330 --> 00:06:46.280
Everything comes in
through the user interface.

00:06:46.280 --> 00:06:48.640
You're actually clicking
buttons and sliding sliders.

00:06:48.690 --> 00:06:52.690
So there'll be parts of your code that
don't get touched coming in this way.

00:06:52.720 --> 00:06:55.690
It's also true that there'll be parts
of your code that do get touched

00:06:55.710 --> 00:06:58.740
coming in this way that don't normally
through object model scripting.

00:06:58.740 --> 00:07:02.430
Object model scripting usually
completely bypasses the view

00:07:02.590 --> 00:07:04.020
and the controller layer.

00:07:04.020 --> 00:07:06.980
And goes straight to the model objects.

00:07:07.110 --> 00:07:09.870
If you use GUI scripting,
you'll invoke both the view

00:07:09.870 --> 00:07:13.120
and the controller before
reaching the model objects.

00:07:13.240 --> 00:07:16.060
So it gives you more testing
in some parts of your program,

00:07:16.270 --> 00:07:18.320
less testing in others.

00:07:18.460 --> 00:07:20.760
And the last thing,
most important message,

00:07:20.760 --> 00:07:24.640
the reason I'm here is to tell you that
this does not replace real object model

00:07:24.640 --> 00:07:26.460
scriptability in your application.

00:07:26.600 --> 00:07:30.050
This is not your ticket
to blow off scripting.

00:07:31.340 --> 00:07:35.920
This is at best a stopgap,
and we'll get to some of the reasons why.

00:07:37.770 --> 00:07:39.020
So how do I use it?

00:07:39.150 --> 00:07:41.420
First thing you have to do is you
have to turn on the accessibility API,

00:07:41.420 --> 00:07:47.790
which is off by default in Panther,
and it is not scriptable to turn it on.

00:07:47.800 --> 00:07:52.450
So somebody's going to have to
turn on the accessibility API by

00:07:52.450 --> 00:07:55.000
hand before they can use this.

00:07:55.000 --> 00:07:58.060
Next thing you've got to do
is identify which UI element

00:07:58.060 --> 00:07:59.540
it is you want to act on.

00:07:59.540 --> 00:08:04.860
And this can be easy or it can be hard,
depending upon how complex the screen

00:08:04.860 --> 00:08:07.560
is and how deep the hierarchy goes.

00:08:07.700 --> 00:08:10.490
Then you want to identify
what action it is you want to

00:08:10.490 --> 00:08:12.180
perform on that UI element.

00:08:12.180 --> 00:08:16.300
And then, last thing,
perform the action on the element.

00:08:20.220 --> 00:08:23.200
So if you need to enable
the accessibility API,

00:08:23.200 --> 00:08:27.240
you should launch the system preferences,
select the universal access pane,

00:08:27.240 --> 00:08:30.350
and down at the bottom,
second checkbox from the bottom is

00:08:30.350 --> 00:08:32.130
enable access for assistive devices.

00:08:32.130 --> 00:08:35.870
That's the one you need to turn on
or none of this is going to work.

00:08:37.590 --> 00:08:39.660
To find the UI element
that you want to work on,

00:08:39.660 --> 00:08:42.320
there's three choices of how to do that.

00:08:42.320 --> 00:08:46.140
You can write an AppleScript that
digs its way through the hierarchy

00:08:46.140 --> 00:08:49.880
layer by layer until you find
what it is you're looking for.

00:08:49.880 --> 00:08:53.770
This can be hard because there's things
on the screen that you can't see.

00:08:53.850 --> 00:08:58.530
Groups might exist and the thing
you're going after is inside the group.

00:08:58.950 --> 00:09:00.960
Unless you probe what's
inside each group,

00:09:00.960 --> 00:09:02.510
it's going to be hard for you to find it.

00:09:02.610 --> 00:09:04.730
There's a couple of tools that
make this a little easier.

00:09:04.780 --> 00:09:05.890
One comes from Apple.

00:09:05.960 --> 00:09:08.280
It's called the UI element inspector.

00:09:08.280 --> 00:09:11.760
And you can download that
from the AppleScript GUI site.

00:09:11.780 --> 00:09:18.160
There's another one from the
folks at Prefab called UI browser.

00:09:18.160 --> 00:09:20.030
They're both very good at finding things.

00:09:20.140 --> 00:09:23.330
The one thing that UI browser can
do that UI element inspector can't

00:09:23.360 --> 00:09:26.680
is it can actually spit out some
AppleScript code for you so you

00:09:26.680 --> 00:09:28.820
don't have to write it yourself.

00:09:30.100 --> 00:09:32.460
Then you want to identify what
action it is you're going to perform.

00:09:32.460 --> 00:09:34.560
That's one step down in the hierarchy.

00:09:34.650 --> 00:09:38.140
So if you've written a script to find
the element that you're interested in,

00:09:38.140 --> 00:09:41.930
then you just ask that element,
tell me what your supported actions are.

00:09:41.940 --> 00:09:44.250
In the UI element
inspector and UI browser,

00:09:44.250 --> 00:09:47.660
if you're pointing at that UI element,
the actions will be listed

00:09:47.670 --> 00:09:48.940
right there for you.

00:09:48.970 --> 00:09:52.120
And again,
the UI browser can just spit out the code

00:09:52.330 --> 00:09:54.810
you need to perform one of those actions.

00:09:56.440 --> 00:09:59.680
Then you want to apply the action,
and you do that by applying the

00:09:59.680 --> 00:10:01.500
perform verb to the action object.

00:10:01.570 --> 00:10:06.160
And you do that the same way whether
you were using scripts or the

00:10:06.230 --> 00:10:08.760
UI element inspector to find it.

00:10:08.820 --> 00:10:11.350
And again,
the UI browser does it for you.

00:10:13.960 --> 00:10:21.740
The accessibility API and
GUI scripting support keystrokes.

00:10:21.740 --> 00:10:24.400
It's always better to set the
value of a text object rather

00:10:24.400 --> 00:10:25.750
than to send it keystrokes.

00:10:25.810 --> 00:10:29.380
You're going to get the results you're
looking for with less hassle that way.

00:10:29.380 --> 00:10:32.530
But there are some times when
you have to send keystrokes,

00:10:32.530 --> 00:10:35.240
particularly if you're
typing into a field that's

00:10:35.240 --> 00:10:37.280
actually non-standard control.

00:10:37.280 --> 00:10:40.000
You can still get data into
it by sending keystrokes.

00:10:40.880 --> 00:10:44.020
Keystrokes are always directed
to the object that has the focus.

00:10:44.100 --> 00:10:46.620
And if you want to change
the focus in AppleScript,

00:10:47.110 --> 00:10:50.820
activate, set frontmost, click,
and select are all things that

00:10:50.820 --> 00:10:52.290
can change the focus for you.

00:10:52.340 --> 00:10:55.510
And you'll have to experiment to see
what you need in your situation to

00:10:55.510 --> 00:10:57.220
get the focus where it needs to be.

00:11:00.140 --> 00:11:03.490
The keystroke verb takes
Mac Roman characters and turns

00:11:03.490 --> 00:11:05.800
them back into virtual key codes.

00:11:05.800 --> 00:11:07.990
This works pretty well
for the English language.

00:11:07.990 --> 00:11:10.400
It does not work pretty
well for other languages.

00:11:10.400 --> 00:11:11.880
We know that's a problem.

00:11:11.880 --> 00:11:12.970
We're working on it.

00:11:12.970 --> 00:11:17.090
The accessibility API group has
the same problem that I have,

00:11:17.140 --> 00:11:20.090
and we're trying to figure out a
more robust way of handling this.

00:11:20.170 --> 00:11:22.700
But for what you've got now,
it works well in English,

00:11:22.870 --> 00:11:24.370
not so well in other languages.

00:11:24.880 --> 00:11:27.400
To get around that,
to give you an escape hatch,

00:11:27.460 --> 00:11:31.700
we also have a key code verb where you
can send your own raw virtual key codes.

00:11:31.700 --> 00:11:36.130
Finding out which one to send is hard,
but once you find out which one it is,

00:11:36.130 --> 00:11:37.270
you can send it.

00:11:37.270 --> 00:11:41.790
And now I'm going to
show you how to do this.

00:11:49.200 --> 00:12:01.400
[Transcript missing]

00:12:01.940 --> 00:12:06.420
Since UI elements is off by default,
it's a good idea to test

00:12:06.420 --> 00:12:08.140
to see if it's on first.

00:12:08.140 --> 00:12:12.370
The number one source of calls and emails
about this from the people that have

00:12:12.370 --> 00:12:18.060
been working with it so far is that it's
been off when they've tried to use it.

00:12:18.060 --> 00:12:22.350
So I put a test for that
in each of these scripts,

00:12:22.350 --> 00:12:23.970
and if it's not on, I'm going to

00:12:24.200 --> 00:12:26.800
I take that there is enough
scriptability in the system

00:12:26.800 --> 00:12:31.310
preferences to take you right to the
point where you want to turn it on.

00:12:31.330 --> 00:12:33.660
And so we're going to do that.

00:12:33.660 --> 00:12:35.580
And this is going to
ask me for a password.

00:12:35.580 --> 00:12:38.980
And that was it.

00:12:39.650 --> 00:12:42.960
So now, since we've checked Enable
Access for Assistive Devices,

00:12:43.050 --> 00:12:48.350
the accessibility API is on and
GUI scripting will be able to do its bit.

00:12:48.440 --> 00:12:56.420
Okay.

00:13:06.980 --> 00:13:09.440
Now,
sometimes I work in a lab and the other

00:13:09.440 --> 00:13:14.180
people that work in the lab like to take
the dock and stick it someplace else.

00:13:14.180 --> 00:13:15.270
I like it on the bottom.

00:13:15.270 --> 00:13:19.740
There's a menu item that
will move it for me,

00:13:19.750 --> 00:13:26.070
but that thing itself is not scriptable,
but we can get at it with GUI scripting.

00:13:26.080 --> 00:13:30.620
You notice that I click the menu,
then I click the menu item within that,

00:13:30.740 --> 00:13:33.400
and then I click a hierarchical
menu item within that.

00:13:33.460 --> 00:13:36.940
GUI scripting is very deliberative.

00:13:36.940 --> 00:13:43.350
You frequently have to traverse the
path to something before you can use it.

00:13:43.440 --> 00:13:46.870
The edit menu is particularly sticky
in this fashion because most of

00:13:46.870 --> 00:13:50.510
the things in the edit menu are
disabled until a selection is made.

00:13:50.520 --> 00:13:53.800
So you frequently have to step
through all the intervening

00:13:53.800 --> 00:13:55.400
steps to get to your item.

00:13:56.080 --> 00:14:00.090
You can use the menu item
if it's in the menu bar.

00:14:00.600 --> 00:14:02.510
And it moved the dock.

00:14:08.050 --> 00:14:12.040
We did this in the first place
because we had a customer that had a

00:14:12.040 --> 00:14:15.030
dialog that was blocking a workflow.

00:14:15.300 --> 00:14:18.640
and he just needed to
dismiss that dialogue.

00:14:18.680 --> 00:14:22.650
So one of the things that you're
likely to want to do pretty soon at

00:14:22.650 --> 00:14:25.560
the beginning is dismiss a dialogue.

00:14:29.880 --> 00:14:34.520
And again,
we make our same check at the beginning

00:14:34.520 --> 00:14:40.670
to make sure everything is on.

00:14:41.390 --> 00:14:43.630
Okay,
because of the way that text edit works,

00:14:43.660 --> 00:14:47.500
I have to send a keystroke in order
to get the document to be dirty.

00:14:47.500 --> 00:14:50.540
And so what I'm going to do is
create a text edit document,

00:14:50.540 --> 00:14:54.040
put some text in it,
try to quit the application,

00:14:54.040 --> 00:14:56.910
and it will come up and say,
I have stuff to save.

00:14:56.910 --> 00:14:59.840
And then we'll use GUI scripting
to dismiss that dialogue.

00:15:09.100 --> 00:15:14.530
I'm using that script editor because
I don't have text edit running already.

00:15:18.770 --> 00:15:24.480
Excuse me while I go out
to the finder and get my

00:15:24.520 --> 00:15:29.510
applications and launch TextEdit.

00:15:32.670 --> 00:15:35.760
This might work a little
bit better this time.

00:15:35.900 --> 00:15:36.620
There.

00:15:36.700 --> 00:15:38.810
Put some text in there.

00:15:38.870 --> 00:15:41.950
Send a keystroke.

00:15:42.080 --> 00:15:42.820
OK, I'm sorry.

00:15:42.820 --> 00:15:45.010
It went too fast.

00:15:45.520 --> 00:15:50.120
TextEdit did close and quit without
you guys getting to see the dialogue.

00:15:50.150 --> 00:15:52.240
I'm sorry about that.

00:15:53.910 --> 00:16:00.560
We might try that again,
but we'll go on to the third one instead.

00:16:00.580 --> 00:16:05.480
And here's a script that I've
written that sets a preference.

00:16:05.480 --> 00:16:10.280
In this particular instance, the sound.

00:16:14.130 --> 00:16:16.800
And it just toggles the sound
between two different values,

00:16:16.870 --> 00:16:19.900
but it shows how a slider
can be manipulated.

00:16:19.900 --> 00:16:24.970
It shows how a preference that's not
otherwise scriptable can be accessed.

00:16:32.090 --> 00:16:33.000
Yes.

00:16:33.150 --> 00:16:34.160
Okay.

00:16:34.160 --> 00:16:35.250
I don't hear a beep.

00:16:35.350 --> 00:16:38.220
Is that because the sound from
the demo machine isn't on?

00:16:38.220 --> 00:16:39.800
Is that true?

00:16:48.770 --> 00:16:50.700
Okay.

00:16:50.700 --> 00:16:54.930
All right, now we should hear it
change and be louder.

00:16:54.930 --> 00:16:59.190
And now it changes again and it's softer.

00:16:59.750 --> 00:17:01.300
Okay.

00:17:04.700 --> 00:17:10.500
[Transcript missing]

00:17:11.920 --> 00:17:15.260
Just for fun,
let's see if we can get TextEdit to

00:17:15.320 --> 00:17:17.490
work the way we thought it would.

00:17:23.410 --> 00:17:26.500
Quit the script editor.

00:17:26.500 --> 00:17:28.770
Relaunch the script.

00:17:29.600 --> 00:17:34.710
We'll try this one more time just
to see if we can get it to work.

00:17:38.070 --> 00:17:39.240
Sorry.

00:17:39.240 --> 00:17:40.140
It happens too quick.

00:17:40.140 --> 00:17:46.140
And I seem to have an error as well.

00:17:46.140 --> 00:17:48.460
But that's GUI scripting.

00:17:48.460 --> 00:17:50.260
You can use it to test your application.

00:17:50.260 --> 00:17:54.200
We expect that this is not going
to be a good end-user solution.

00:17:54.200 --> 00:17:57.740
Testers that work for you and you
pay them to run the same tests over

00:17:57.740 --> 00:18:01.330
and over again and change the tests
every time you change the code,

00:18:01.540 --> 00:18:03.110
they'll put up with this.

00:18:03.260 --> 00:18:07.370
But end-users are not going to take
this as a solution for their problems.

00:18:07.380 --> 00:18:10.730
So we'd like to encourage you
to learn about GUI scripting,

00:18:10.730 --> 00:18:13.950
use it for your own purposes
internally as a test tool,

00:18:13.950 --> 00:18:16.650
but for your end-users,
you should provide them

00:18:16.650 --> 00:18:18.200
with object model scripting.

00:18:18.220 --> 00:18:22.690
And now, if we can go back to the slides.

00:18:25.100 --> 00:18:28.020
I'd like to introduce Doug Simons
from Eggplant Software,

00:18:28.100 --> 00:18:30.410
or from Redstone Software,
who's going to talk

00:18:30.410 --> 00:18:32.890
to you about Eggplant,
a much more professional tool

00:18:32.990 --> 00:18:35.400
for testing your applications.

00:18:43.190 --> 00:18:44.590
Hi, it's good to see you all here.

00:18:44.590 --> 00:18:46.140
There's a lot of people.

00:18:46.140 --> 00:18:50.230
I'm Doug Simons with Redstone Software,
and we're going to tell

00:18:50.230 --> 00:18:52.440
you about Eggplant,
which, as you've heard,

00:18:52.440 --> 00:18:55.770
is our software test automation tool.

00:18:57.780 --> 00:19:00.580
So to begin with, why would you test?

00:19:00.610 --> 00:19:03.280
I'm sure that all of you
have a lot of reasons,

00:19:03.280 --> 00:19:05.380
or you wouldn't all be
here at this session.

00:19:05.450 --> 00:19:08.000
But here's a few ideas that I had.

00:19:08.130 --> 00:19:12.240
The Mac OS environment is
about quality software.

00:19:12.260 --> 00:19:16.360
Mac OS users expect a good
experience with your software.

00:19:16.640 --> 00:19:21.600
If you deliver crummy software
that doesn't work well,

00:19:21.660 --> 00:19:25.250
you're not going to have a
good experience in the market.

00:19:25.670 --> 00:19:29.900
Clearly also,
there are some cost advantages to you.

00:19:29.970 --> 00:19:34.100
If your software works well,
you're going to have less costs for

00:19:34.100 --> 00:19:39.990
support calls and your support personnel
can spend time answering questions

00:19:40.000 --> 00:19:45.560
about your program's functionality
rather than fighting fires with bugs.

00:19:45.740 --> 00:19:49.420
So the bottom line,
I think this equation speaks for itself.

00:19:49.510 --> 00:19:52.760
Better software means happier customers.

00:19:52.770 --> 00:19:56.200
And if your customers are happy,
then chances are you're happy too.

00:19:58.650 --> 00:20:00.200
So why don't people test?

00:20:00.200 --> 00:20:02.100
Well, of course, we all do test.

00:20:02.110 --> 00:20:05.600
And developers,
when we add a new feature to a product,

00:20:05.600 --> 00:20:07.480
we're going to try it out
and make sure that it works.

00:20:07.480 --> 00:20:13.190
A lot of development organizations
have a big emphasis on unit and

00:20:13.190 --> 00:20:16.500
functional tests at a lower level.

00:20:16.500 --> 00:20:19.300
But testing is a complex process.

00:20:19.780 --> 00:20:22.430
If you've added a new
feature to an application,

00:20:22.540 --> 00:20:26.460
chances are it works well on its own,
but maybe it's going to have some

00:20:26.460 --> 00:20:29.120
difficulty interacting with other
features of your application

00:20:29.120 --> 00:20:30.020
that have been there already.

00:20:30.020 --> 00:20:33.810
So those kinds of interactions,
both within your program

00:20:33.810 --> 00:20:37.700
and with other programs,
are important to test as well.

00:20:37.700 --> 00:20:42.190
So you might want to go hire some
people to do this testing for you.

00:20:42.190 --> 00:20:48.770
And that's great, but of course,
it's a costly thing to hire people.

00:20:48.990 --> 00:20:53.340
The process of testing is
not the most fun always.

00:20:53.340 --> 00:20:57.340
It's kind of a repetitive
and mind-numbing task often.

00:20:57.340 --> 00:21:00.600
And you might rather have
those intelligent people doing

00:21:00.600 --> 00:21:01.820
something more interesting.

00:21:01.820 --> 00:21:07.020
So you might want to invest in
some test automation software to

00:21:07.020 --> 00:21:12.580
free up some of your tester's time,
make them more productive.

00:21:13.430 --> 00:21:15.910
Unfortunately,
a lot of the software solutions

00:21:15.910 --> 00:21:20.500
that are out there have been
traditionally hard to learn and use.

00:21:20.620 --> 00:21:22.620
There's a steep learning curve involved.

00:21:22.660 --> 00:21:29.150
And so it can be difficult to get
going and really make use of those.

00:21:31.150 --> 00:21:35.660
Let's look at a few
different testing approaches.

00:21:35.700 --> 00:21:38.050
First of all, obviously,
is manual testing.

00:21:38.080 --> 00:21:40.100
Almost everyone does a certain
amount of manual testing.

00:21:40.100 --> 00:21:44.090
And this is good,
but it can be very labor intensive.

00:21:44.090 --> 00:21:49.600
And besides that,
people have a tendency to

00:21:49.650 --> 00:21:50.980
be a little inconsistent.

00:21:50.980 --> 00:21:57.600
So, if you have a lot of manual testing,
you might want to be careful

00:21:57.700 --> 00:22:00.470
with your manual testing.

00:22:00.750 --> 00:22:06.010
You might want to be careful
with your manual testing.

00:22:06.010 --> 00:22:11.800
You might want to be careful
with your manual testing.

00:22:11.800 --> 00:22:11.800
And that's a concern.

00:22:11.800 --> 00:22:11.800
Even if you've written up test scripts
that your testers are following to step

00:22:11.800 --> 00:22:11.800
your software through various processes,
different testers are likely

00:22:11.800 --> 00:22:11.800
to follow those instructions
in slightly different ways.

00:22:11.800 --> 00:22:11.800
And if you don't have instructions,
then who knows what sort of results

00:22:11.800 --> 00:22:11.800
you'll get from one test run to the next.

00:22:14.580 --> 00:22:17.940
So one obvious solution is
to automate that process.

00:22:17.940 --> 00:22:20.140
And in the past,
sometimes that's been done

00:22:20.140 --> 00:22:22.660
through hardware-based solutions.

00:22:22.690 --> 00:22:26.610
Apple Computer at one time had
a hardware testing product,

00:22:26.610 --> 00:22:30.760
and our own parent company, Gresham,
had a hardware-based

00:22:30.760 --> 00:22:33.040
testing solution also.

00:22:33.080 --> 00:22:38.420
And hardware testing
works great when it works.

00:22:38.750 --> 00:22:45.040
And the problem is that it can be
very inflexible and platform-specific.

00:22:45.080 --> 00:22:49.930
If the system being tested changes in
some way or you're working with different

00:22:49.990 --> 00:22:53.680
hardware that you're connecting to,
it can be rather fragile

00:22:53.680 --> 00:22:57.120
sometimes and prone to problems.

00:22:58.080 --> 00:23:02.550
So obviously a more flexible
solution would be to use software.

00:23:02.550 --> 00:23:07.340
And software solutions can be great,
but as I mentioned before,

00:23:07.340 --> 00:23:13.320
they're often hard to learn and also
require integration most often into

00:23:13.320 --> 00:23:16.420
the software that's being tested.

00:23:16.420 --> 00:23:20.040
So that's an additional barrier
to implementing and using those.

00:23:20.040 --> 00:23:26.200
We found in talking to people that quite
often the expensive software solutions

00:23:26.200 --> 00:23:30.040
the companies invested in ended up
collecting dust in a corner as shelfware.

00:23:34.500 --> 00:23:37.860
So, as I said,
our parent company at one time had a

00:23:37.860 --> 00:23:43.800
hardware testing product and about a
year and a half ago we started looking

00:23:43.800 --> 00:23:45.860
at what other alternatives might exist.

00:23:45.860 --> 00:23:49.140
We abandoned the hardware product,
which was PC-based,

00:23:49.280 --> 00:23:55.420
and investigated what it was going to
take to come up with a better solution.

00:23:55.420 --> 00:23:59.170
So I'd like to share with you some
of the design principles and goals

00:23:59.170 --> 00:24:01.360
that went into creating Eggplant.

00:24:02.320 --> 00:24:07.550
First of all, we wanted it to be easy
to learn and easy to use.

00:24:07.770 --> 00:24:11.640
Because we really didn't want to
create another piece of shelfware.

00:24:11.640 --> 00:24:15.910
We wanted people to use our software
and get some benefit from it.

00:24:17.580 --> 00:24:19.690
We also would like it to
be powerful and elegant.

00:24:19.940 --> 00:24:21.930
Well,
those are great marketing buzzwords,

00:24:21.930 --> 00:24:25.780
but what we mean is that we
wanted to focus on the essential

00:24:25.780 --> 00:24:29.210
functionality that testers needed.

00:24:29.540 --> 00:24:33.060
and we also wanted it to be flexible
so it could be integrated into

00:24:33.070 --> 00:24:35.670
an overall testing environment.

00:24:37.730 --> 00:24:41.810
We also wanted to create
Eggplant to be independent.

00:24:42.030 --> 00:24:45.600
We wanted to minimize the
amount of integration required.

00:24:45.630 --> 00:24:48.910
In fact,
no integration required with your

00:24:48.920 --> 00:24:53.530
software so that you don't have
to know ahead of time what you're

00:24:53.530 --> 00:24:56.730
going to be using to test with,
and we can test with any

00:24:56.730 --> 00:24:58.910
software that's out there.

00:24:59.220 --> 00:25:02.500
We also thought it was
important to be non-intrusive,

00:25:02.500 --> 00:25:06.260
to have a minimal impact on the
performance and behavior of the

00:25:06.260 --> 00:25:09.460
system where your software is running.

00:25:11.040 --> 00:25:14.850
Cross-platform is another
important goal because software

00:25:14.850 --> 00:25:16.970
exists in a multi-platform world.

00:25:17.170 --> 00:25:21.400
Even if you're creating
software for Mac OS X only,

00:25:21.570 --> 00:25:25.200
chances are that your program
these days is going to be working

00:25:25.200 --> 00:25:28.990
with files from other systems,
importing or exporting,

00:25:29.210 --> 00:25:32.780
and you need to be able to
have some way to work with a

00:25:32.880 --> 00:25:35.920
cross-platform testing environment.

00:25:37.060 --> 00:25:40.200
And finally,
we felt it was very important to

00:25:40.200 --> 00:25:42.700
test from the user perspective.

00:25:42.700 --> 00:25:45.170
As we said,
there are a lot of functional and

00:25:45.170 --> 00:25:49.500
low-level unit-type tests available,
but the bottom line is you

00:25:49.500 --> 00:25:54.200
want to create software that
is going to satisfy your users.

00:25:54.370 --> 00:25:59.480
If you have a wonderful computing
engine that does wonderful calculations,

00:25:59.560 --> 00:26:03.340
but the user interface is
crummy or simply doesn't work,

00:26:03.340 --> 00:26:06.820
your users are not going to
get any value out of that.

00:26:08.320 --> 00:26:11.490
So how does Eggplant work?

00:26:11.660 --> 00:26:14.270
Well, first of all,
we provide remote control

00:26:14.510 --> 00:26:15.940
of another computer.

00:26:16.030 --> 00:26:20.100
How many of you have heard of
or used a product called VNC?

00:26:20.190 --> 00:26:21.400
and quite a few.

00:26:21.430 --> 00:26:25.040
So, VNC is an open source project
that's been out there for a number

00:26:25.040 --> 00:26:29.090
of years that allows one computer
to remotely control another.

00:26:29.190 --> 00:26:33.280
It does this by displaying the screen
of the other computer and allowing you

00:26:33.280 --> 00:26:35.490
to control the keyboard and the mouse.

00:26:35.820 --> 00:26:38.380
So, Eggplant leverages this technology.

00:26:38.580 --> 00:26:42.870
We've built a VNC client into
Eggplant that allows us to talk

00:26:42.970 --> 00:26:44.940
to any VNC server out there.

00:26:44.940 --> 00:26:49.700
And as an open source project,
VNC is available for essentially

00:26:49.700 --> 00:26:52.270
any platform that you wish to test.

00:26:52.300 --> 00:26:56.800
So, we're able to connect not
only to Mac OS X but Mac OS 9,

00:26:56.800 --> 00:27:00.860
Unix, Linux,
Solaris and any flavor of Windows.

00:27:01.260 --> 00:27:02.570
Then we added in scripting.

00:27:02.800 --> 00:27:06.360
We have a powerful scripting
language that allows you to automate

00:27:06.430 --> 00:27:09.100
any task on any of those systems.

00:27:09.300 --> 00:27:13.910
So the bottom line is that
Eggplant can drive any software

00:27:13.910 --> 00:27:18.370
on any system through the user
interface just like a user would.

00:27:20.370 --> 00:27:23.960
So I'd like to invite my colleague
Jonathan Gillaspie up now to give you

00:27:23.960 --> 00:27:27.400
a quick demo of how Eggplant works.

00:27:32.740 --> 00:27:33.170
Hi there.

00:27:33.170 --> 00:27:38.700
Thanks, Doug.

00:27:38.830 --> 00:27:41.080
So for our first demonstration,
what I'd really like to show you

00:27:41.120 --> 00:27:45.690
guys is exactly how Eggplant works.

00:27:46.400 --> 00:28:04.300
[Transcript missing]

00:28:17.200 --> 00:28:19.160
I'm going to go ahead and make
this display a little smaller

00:28:19.160 --> 00:28:25.510
so we can go ahead and see it
easily over on this machine.

00:28:46.200 --> 00:28:53.000
Okay.

00:28:53.000 --> 00:28:53.360
So there we go.

00:28:53.360 --> 00:28:57.710
That's our remote machine
that we're going to test.

00:28:58.470 --> 00:29:01.230
Now to show you how to go about
testing one of your applications,

00:29:01.230 --> 00:29:03.720
we needed an application to test.

00:29:03.720 --> 00:29:06.960
So we've gone ahead and created
a really simple application.

00:29:06.960 --> 00:29:10.320
This application is so simple,
we decided to name it Very Simple.

00:29:12.900 --> 00:29:16.490
So although VerySimple's very simple,
I want to go ahead and

00:29:16.490 --> 00:29:19.060
show you what it does do.

00:29:19.080 --> 00:29:21.950
So when you double-click
and launch this application,

00:29:21.950 --> 00:29:23.500
it brings up a login panel.

00:29:23.500 --> 00:29:25.960
And you go ahead and
type in your login name.

00:29:26.020 --> 00:29:30.860
In this case,
it's Fred with the password of Wilma.

00:29:30.860 --> 00:29:34.760
And then VerySimple goes ahead and
brings up a list of some pictures,

00:29:34.760 --> 00:29:36.900
some interesting pictures.

00:29:36.900 --> 00:29:39.710
So we'll go ahead and select
a picture from the list and

00:29:39.720 --> 00:29:41.320
click the preview button.

00:29:41.320 --> 00:29:44.770
And as soon as it does that,
it launches that image up

00:29:44.850 --> 00:29:46.940
in the preview application.

00:29:47.320 --> 00:29:49.580
And that's about all
that VerySimple does.

00:29:49.640 --> 00:29:54.500
It's just a real simple application to
show you something we might want to test.

00:29:54.500 --> 00:29:58.000
So I'm going to go ahead and quit out
of preview and quit out of VerySimple.

00:30:00.800 --> 00:30:04.010
So now that you know
what very simple that is,

00:30:04.010 --> 00:30:07.810
I want to go ahead and build
a test to make sure that our

00:30:07.810 --> 00:30:10.270
application works correctly.

00:30:10.270 --> 00:30:13.490
I do that by creating
an eggplant test suite.

00:30:14.960 --> 00:30:18.390
A test suite is simply a collection
of all of the resources that

00:30:18.390 --> 00:30:21.290
you need to test an application.

00:30:21.410 --> 00:30:24.010
You can have multiple
scripts within a suite,

00:30:24.010 --> 00:30:27.280
so we'll go ahead and create
the first one of those now.

00:30:32.150 --> 00:30:34.100
Just like that.

00:30:34.210 --> 00:30:35.590
Right.

00:30:35.750 --> 00:30:39.020
From this point,
we could actually just start scripting

00:30:39.020 --> 00:30:43.680
right here in our script window
using Eggplant's scripting language,

00:30:43.990 --> 00:30:44.760
SenseTalk.

00:30:44.760 --> 00:30:51.680
But instead,
I'd like to use Eggplant's script

00:30:51.680 --> 00:30:51.680
generation capabilities to show
you just how easy that can be.

00:30:52.930 --> 00:30:55.890
So we go into what we call capture mode.

00:30:55.970 --> 00:30:58.660
You'll notice that in capture mode,
we're no longer interacting with

00:30:58.740 --> 00:31:01.940
the remote computer directly.

00:31:01.940 --> 00:31:03.940
But instead,
we have a selection rectangle here,

00:31:03.940 --> 00:31:08.260
which we can use to identify
elements of the remote screen

00:31:08.260 --> 00:31:10.140
that we want to deal with.

00:31:10.150 --> 00:31:12.450
So in this case,
we're going to highlight in on the

00:31:12.450 --> 00:31:15.940
very simple icon and tell Eggplant
that we'd like to double-click on it by

00:31:15.940 --> 00:31:21.370
choosing double-click from the toolbar.

00:31:22.920 --> 00:31:27.820
Eggplant brings up a save dialog,
and we give it a name for

00:31:27.820 --> 00:31:30.330
our image and click save.

00:31:30.440 --> 00:31:33.130
When we click save, three things happen.

00:31:33.230 --> 00:31:37.280
The first is Eggplant saves
that image in our very simple --

00:31:37.280 --> 00:31:40.060
in our very simple test suite.

00:31:40.170 --> 00:31:44.900
The second thing it does is it actually
generates that command into our script.

00:31:44.910 --> 00:31:47.790
Double click on the very simple icon.

00:31:47.980 --> 00:31:51.000
and the third thing that it does
is actually execute that command

00:31:51.000 --> 00:31:52.390
against the remote machine.

00:31:52.850 --> 00:31:55.840
When it does that,
Eggplant goes and searches through the

00:31:55.950 --> 00:32:00.080
remote screen until it finds the very
simple icon and double clicks on it.

00:32:00.230 --> 00:32:03.210
And you can see here it's gone ahead and
launched the very simple application.

00:32:05.270 --> 00:32:06.660
The next thing we want
to do in our script,

00:32:06.660 --> 00:32:08.560
of course,
is click in the name field so we

00:32:08.560 --> 00:32:11.470
can enter our username and password.

00:32:12.510 --> 00:32:15.920
We identify that field by the name label,
but of course we don't want

00:32:15.920 --> 00:32:17.630
to click directly on the name.

00:32:17.870 --> 00:32:20.140
We want to click to the right of it.

00:32:20.300 --> 00:32:24.570
We do that by setting
Eggplant's image's hotspot.

00:32:24.720 --> 00:32:29.800
You can set the hotspot anywhere
on or relative to the actual image.

00:32:30.020 --> 00:32:33.530
So we'll set it right there
in the field and say click.

00:32:36.150 --> 00:32:40.600
Again, Eggplant saves the image,
writes that into the script,

00:32:40.640 --> 00:32:43.650
and you can see now that
the name field is selected.

00:32:45.080 --> 00:32:47.930
Now we'll go ahead and
type the username in.

00:32:48.110 --> 00:32:51.830
We have a type text command,
so we can type in Fred.

00:32:51.940 --> 00:32:54.810
And you can also send special
characters like the tab key

00:32:54.810 --> 00:32:57.090
to go to the password field.

00:32:57.190 --> 00:33:00.930
And then we'll type in the password.

00:33:01.050 --> 00:33:03.940
Now we'll go ahead and
click on the submit button.

00:33:09.010 --> 00:33:11.440
To log in,
and up comes our list of pictures.

00:33:11.440 --> 00:33:14.830
We're going to go ahead and
just pick an item from the list.

00:33:14.830 --> 00:33:17.700
We'll go ahead and pick
the chess item again.

00:33:21.300 --> 00:33:24.150
And click on that.

00:33:24.170 --> 00:33:27.760
And finally,
we'll go click on the Preview button.

00:33:28.850 --> 00:33:34.450
You'll notice these Aqua pulsing buttons,
like preview and the submit button,

00:33:34.480 --> 00:33:36.800
are pulsing on the screen.

00:33:36.800 --> 00:33:41.520
Since Eggplant works by finding
images on the remote screen,

00:33:41.550 --> 00:33:46.970
we have a special color matching mode
that allows us to locate those images.

00:33:48.970 --> 00:33:49.900
There we go.

00:33:49.900 --> 00:33:53.160
It's messaged the preview
application and brought up our image.

00:33:53.160 --> 00:33:56.210
We want to go ahead and make sure
that that image actually came

00:33:56.210 --> 00:33:59.860
up on screen because that's what
Eggplant's all about is validating

00:33:59.880 --> 00:34:01.880
the results of your application.

00:34:01.980 --> 00:34:06.110
So we'll go ahead and use the
wait for command to do that.

00:34:06.640 --> 00:34:09.930
The wait for command will wait up
to the maximum period of time for

00:34:09.930 --> 00:34:11.840
the image to come up on the screen.

00:34:11.960 --> 00:34:15.170
In this case, that'll be eight seconds.

00:34:17.340 --> 00:34:21.040
As soon as Eggplant sees
that image up on the screen,

00:34:21.040 --> 00:34:23.700
we know we've successfully
completed the test,

00:34:23.820 --> 00:34:27.960
so we want to go ahead and quit out of
preview and quit out of very simple.

00:34:28.010 --> 00:34:31.430
I'm going to use the type command feature
to send a command queue to preview,

00:34:31.530 --> 00:34:33.100
and that quits out.

00:34:33.240 --> 00:34:35.360
And then I want to quit
out of very simple,

00:34:35.360 --> 00:34:38.190
and let's go ahead and do
that through the menus.

00:34:52.560 --> 00:34:54.190
There we go.

00:34:54.200 --> 00:34:56.420
So as you can see,
we've now created our very first

00:34:56.420 --> 00:35:00.560
demonstration script that tests
our very simple application.

00:35:00.760 --> 00:35:02.540
We have all our script commands here.

00:35:02.660 --> 00:35:06.600
We have all the images that
Eggplant uses right over here.

00:35:06.740 --> 00:35:10.800
So we can go ahead and run this script.

00:35:11.100 --> 00:35:15.140
and watch Eggplant step through, log in,
highlight that,

00:35:15.320 --> 00:35:18.100
see the image and quit out.

00:35:25.420 --> 00:35:27.120
Thanks.

00:35:27.520 --> 00:35:30.990
Anytime Eggplant runs a script,
it records the results over in

00:35:30.990 --> 00:35:32.900
the results tab in our suite.

00:35:33.010 --> 00:35:35.850
So we can click on the most
recent run of that script.

00:35:35.890 --> 00:35:39.420
And you can see here that
Eggplant has stored not only

00:35:39.420 --> 00:35:42.970
every action that it performed,
but it also identifies where on

00:35:43.090 --> 00:35:46.910
the screen it found that image,
and it also identifies

00:35:46.950 --> 00:35:49.070
at what time it occurred.

00:35:49.860 --> 00:35:53.410
At this point, some of you are probably
wondering exactly what it

00:35:53.410 --> 00:35:55.180
looks like if a script fails.

00:35:55.270 --> 00:35:58.560
So we can cause a failure by
going in and getting rid of the

00:35:58.560 --> 00:36:00.540
password so we can't log in.

00:36:00.710 --> 00:36:02.910
And we'll go ahead and run that.

00:36:07.350 --> 00:36:08.550
Sorry.

00:36:08.950 --> 00:36:11.580
Eggplant fails here because
it can't continue forward

00:36:11.820 --> 00:36:14.140
through the rest of the script.

00:36:15.050 --> 00:36:19.240
So you can see over here in
our results tab that the last

00:36:19.270 --> 00:36:21.600
run is highlighted in red.

00:36:21.720 --> 00:36:24.760
And if we select that,
we see that Eggplant automatically

00:36:24.760 --> 00:36:27.920
has taken a full screenshot of
what the screen looked like at

00:36:27.920 --> 00:36:32.060
that point and has highlighted
the image that it was looking for.

00:36:32.180 --> 00:36:35.240
By using this,
you can quickly see that we

00:36:35.260 --> 00:36:39.310
weren't able to find the chess item
because the authentication failed.

00:36:40.170 --> 00:36:44.630
So that's a pretty basic look at
the easy features of Eggplant.

00:36:44.720 --> 00:36:47.200
So I'm going to pass it back to Doug now.

00:36:53.400 --> 00:36:57.200
Thanks Jonathan.

00:36:57.210 --> 00:36:59.310
So now you've seen something
about how eggplant works,

00:36:59.360 --> 00:37:03.130
let's take a quick look at some of the
technologies that are behind this and

00:37:03.130 --> 00:37:05.550
the benefits that those give to you.

00:37:06.370 --> 00:37:08.340
First of all,
we have a powerful scripting

00:37:08.340 --> 00:37:09.790
language called SenseTalk.

00:37:09.950 --> 00:37:13.140
SenseTalk is a very easy to learn,
understandable language.

00:37:13.190 --> 00:37:16.590
It's actually modeled after HyperTalk,
the language in HyperCard,

00:37:16.790 --> 00:37:19.520
which probably a lot of
you have seen before.

00:37:19.780 --> 00:37:23.410
We also have added a number of extensions
and SenseDoc is a very full-featured,

00:37:23.450 --> 00:37:26.380
object-oriented language,
so it gives you the power that

00:37:26.380 --> 00:37:29.860
you need to do whatever it is
that you need to get done there.

00:37:31.700 --> 00:37:34.560
We also use VNC, as we mentioned before,
which stands for

00:37:34.560 --> 00:37:35.920
Virtual Network Computing.

00:37:35.920 --> 00:37:42.290
And VNC, as I said, is an open protocol,
an open source project that allows us

00:37:42.290 --> 00:37:46.020
to see the screen of the other computer
and control the keyboard and the mouse.

00:37:46.040 --> 00:37:50.110
This gives us separation from the
application and system that's under test.

00:37:50.140 --> 00:37:53.090
As you saw in the demo,
we were testing not just

00:37:53.090 --> 00:37:56.730
the very simple application,
but actually the interaction between

00:37:57.020 --> 00:37:58.960
very simple and the preview application.

00:37:59.240 --> 00:38:01.740
From our point of view,
there's really no difference.

00:38:01.750 --> 00:38:05.040
All we know is that there's a screen
out there and we can interact with it.

00:38:05.080 --> 00:38:09.950
This gives us a lot of flexibility,
and we not only test interactions among

00:38:09.950 --> 00:38:14.360
different software on the same system,
but even across systems from

00:38:14.410 --> 00:38:15.910
one computer to another.

00:38:17.370 --> 00:38:21.400
And finally, of course,
this separation allows us to control

00:38:21.760 --> 00:38:24.590
the system just like a user would.

00:38:26.480 --> 00:38:27.930
We also use Cocoa.

00:38:28.250 --> 00:38:30.160
I'm sure a lot of you are using Cocoa.

00:38:30.170 --> 00:38:32.510
And we think this gives
us some advantages.

00:38:32.520 --> 00:38:37.560
Obviously, it gives us the clean,
intuitive Aqua interface.

00:38:37.650 --> 00:38:40.320
But also, more importantly,
it allows us to be responsive

00:38:40.380 --> 00:38:41.740
to our customers' needs.

00:38:41.810 --> 00:38:45.090
We use the
XP Extreme programming approach,

00:38:45.090 --> 00:38:49.280
and we find it's very important
to be able to be responsive to

00:38:49.340 --> 00:38:51.800
the requests of our customers.

00:38:52.940 --> 00:38:55.790
Let's take a look at Eggplant as a tool.

00:38:55.920 --> 00:38:59.800
We see Eggplant as just one component
of your overall development process.

00:38:59.800 --> 00:39:02.840
We know that there are a lot of other
tools out there that you use and that

00:39:02.840 --> 00:39:05.720
you need to be able to integrate with.

00:39:06.420 --> 00:39:09.750
So, Eggplant is able to interact
with other tools that can be

00:39:09.750 --> 00:39:11.890
integrated into your build process.

00:39:11.890 --> 00:39:15.140
Eggplant script can be called
from the command line or an

00:39:15.140 --> 00:39:20.130
entire suite actually of scripts,
as you'll see shortly.

00:39:20.330 --> 00:39:26.030
And we also are able to integrate with
any reporting tools you might have.

00:39:26.580 --> 00:39:31.290
All of the files in an Eggplant
suite are standard files.

00:39:31.300 --> 00:39:33.300
The images we capture
are saved as TIFF images.

00:39:33.550 --> 00:39:37.060
And all of our report logs that
we generate are in plain text

00:39:37.350 --> 00:39:41.660
files that you can load into a
spreadsheet or access with another

00:39:41.780 --> 00:39:44.300
reporting tool that you might have.

00:39:44.410 --> 00:39:48.290
We're also able to interact
with Unix command line tools.

00:39:48.300 --> 00:39:50.190
As I said, we can be called from the
command line and we can also

00:39:50.190 --> 00:39:52.120
call other command line tools.

00:39:52.450 --> 00:39:54.740
And the same with AppleScript.

00:39:56.780 --> 00:39:59.360
Now here's an interesting point.

00:39:59.420 --> 00:40:02.290
I don't know if any of you,
how many of you are aware of

00:40:02.420 --> 00:40:04.310
the Apple compatibility labs.

00:40:04.380 --> 00:40:06.730
Have any of you used those?

00:40:07.010 --> 00:40:08.350
Not too many hands going up.

00:40:08.420 --> 00:40:09.920
Apple has this great facility.

00:40:09.920 --> 00:40:12.000
They've got a number
of different computers,

00:40:12.000 --> 00:40:15.720
dozens really,
of all different makes and models, well,

00:40:15.720 --> 00:40:21.740
all Macintoshes, and running various
versions of the Mac OS.

00:40:22.610 --> 00:40:26.480
And these are available to developers
if you go into their labs in Cupertino,

00:40:26.480 --> 00:40:29.400
you can bring your software in and
test it out to make sure that it

00:40:29.410 --> 00:40:31.040
works on all the different platforms.

00:40:31.560 --> 00:40:34.550
Unfortunately,
it requires a trip to Cupertino

00:40:34.560 --> 00:40:36.380
to do that up until now.

00:40:36.440 --> 00:40:41.220
We've been working closely with Apple to
ensure that it's possible for eggplant

00:40:41.220 --> 00:40:46.020
users to access the labs remotely from
the convenience of your own office.

00:40:46.630 --> 00:40:48.600
And, uh, okay.

00:40:52.600 --> 00:40:54.600
We thought you might appreciate that.

00:40:54.600 --> 00:40:58.780
So, anyway,
I'd like to bring Jonathan back

00:40:58.860 --> 00:41:02.900
up for another demo of some of
Eggplant's more advanced features.

00:41:07.640 --> 00:41:10.180
Thanks again, Doug.

00:41:10.280 --> 00:41:10.610
Okay.

00:41:10.910 --> 00:41:13.860
So on our previous example,
we saw some of the basic

00:41:13.990 --> 00:41:16.330
features of eggplant,
but now I'd like to take this

00:41:16.360 --> 00:41:19.480
opportunity to show you some
of the more advanced features.

00:41:19.600 --> 00:41:24.500
So I've gone ahead and built off of
the demo that I did just a moment

00:41:24.510 --> 00:41:30.190
ago and created another test suite,
which I call not so very simple.

00:41:31.420 --> 00:41:33.820
You'll see that
Not So Very Simple actually

00:41:34.250 --> 00:41:35.510
has two scripts now.

00:41:35.520 --> 00:41:37.930
Let's go ahead and look
at the login script.

00:41:37.990 --> 00:41:41.010
I've actually gone ahead and just
broken out the functionality that

00:41:41.010 --> 00:41:44.110
deals with having the user log in.

00:41:44.150 --> 00:41:47.220
As you can see in here,
you can pass parameters.

00:41:47.500 --> 00:41:49.440
Can you guys see that okay?

00:41:52.770 --> 00:41:55.640
As you can see,
you can pass in parameters.

00:41:55.840 --> 00:41:57.860
In this case,
we pass in the name and the password

00:41:58.260 --> 00:42:03.640
into this script and go through
the process of validating the user.

00:42:04.380 --> 00:42:08.100
So let's go ahead and look at
our main controller script,

00:42:08.190 --> 00:42:09.530
which is view images.

00:42:09.620 --> 00:42:13.960
You can see we've added quite a
few little extensions in here.

00:42:13.960 --> 00:42:19.640
The first example is we've created a
couple of lists here that we can use

00:42:19.650 --> 00:42:24.260
to iterate over all of the various
logins that we want to validate.

00:42:25.360 --> 00:42:27.790
And that's what this
repeat loop here is for.

00:42:27.970 --> 00:42:30.880
It goes through the basic test
we've already implemented,

00:42:31.090 --> 00:42:35.090
but now we want to try it
with a whole variety of cases.

00:42:35.930 --> 00:42:36.800
Here's the login line.

00:42:36.800 --> 00:42:39.990
You can see where we're passing
the parameters to the login

00:42:39.990 --> 00:42:42.190
script I just showed you.

00:42:42.920 --> 00:42:45.660
and then we go forward through
the rest of the script.

00:42:45.770 --> 00:42:49.940
You might also notice that that
is within a try-catch loop.

00:42:50.050 --> 00:42:53.370
Whenever Eggplant detects an error,
has a problem,

00:42:53.490 --> 00:42:58.160
it raises a typical exception,
which many of you may be familiar with.

00:42:58.270 --> 00:42:59.430
And you have a choice.

00:42:59.440 --> 00:43:02.340
You can either choose to let that
exception raise up to the top,

00:43:02.370 --> 00:43:04.780
and Eggplant will
report that as an error,

00:43:04.780 --> 00:43:08.490
or you can catch it and
try to resolve that here.

00:43:08.600 --> 00:43:12.080
In the first example I gave,
we had a problem when we tried to

00:43:12.080 --> 00:43:14.750
log in and the password was invalid.

00:43:15.150 --> 00:43:21.680
What I've done here is set a catch,
which will catch and see if the error was

00:43:21.680 --> 00:43:25.310
because the no password panel came up.

00:43:25.430 --> 00:43:30.660
And if so, we go ahead and dismiss the
password panel and continue

00:43:30.660 --> 00:43:33.420
iterating through the lists.

00:43:34.140 --> 00:43:37.790
We go ahead and log that
that password's not valid,

00:43:37.790 --> 00:43:43.980
but we'll gracefully continue so
that we try all of the examples.

00:43:43.980 --> 00:43:48.850
So let's go ahead and bring up our
connection again and try running

00:43:48.850 --> 00:43:51.690
our more sophisticated script.

00:43:54.200 --> 00:43:55.920
So here you can see it
doing the same thing.

00:43:56.070 --> 00:44:00.940
I have animation turned on so you
can see as it's calling the-- oops.

00:44:09.130 --> 00:44:13.390
Well, there you see an example of
where Eggplant doesn't work.

00:44:13.480 --> 00:44:15.940
Let me go ahead and quit
out and run that again.

00:44:23.890 --> 00:44:24.800
There we go.

00:44:24.800 --> 00:44:27.100
This time I decided to try something
new that maybe you all hadn't seen,

00:44:27.100 --> 00:44:30.900
so I brought up a picture of a G5
because I thought that would be fun.

00:44:35.930 --> 00:44:38.040
And actually, I think it blew through
it while I was talking,

00:44:38.040 --> 00:44:42.100
but you might have noticed--
I'll run it again real quickly.

00:44:42.100 --> 00:44:44.560
It actually brought up on
the second login there,

00:44:44.560 --> 00:44:47.190
that's actually an invalid login.

00:44:49.900 --> 00:44:55.800
[Transcript missing]

00:44:59.320 --> 00:45:00.740
Okay.

00:45:00.740 --> 00:45:03.020
One final feature that
I'd like to show you guys,

00:45:03.020 --> 00:45:08.690
and Doug alluded to it a second ago,
we have a nice little

00:45:08.730 --> 00:45:11.860
Schedules tab in our suite.

00:45:12.000 --> 00:45:14.570
The Schedules tab is useful
for building up a batch of

00:45:14.700 --> 00:45:16.570
scripts that you'd like to run.

00:45:16.610 --> 00:45:19.860
So you can drag some scripts
in there just like that.

00:45:19.860 --> 00:45:22.990
The Schedules tab has some nice features.

00:45:23.040 --> 00:45:26.840
You can make scripts dependent
on the successful completion

00:45:26.840 --> 00:45:26.840
of a previous script.

00:45:27.110 --> 00:45:29.900
You can enable and disable which
scripts you'd like to see running

00:45:29.900 --> 00:45:31.940
at a current point in time.

00:45:32.090 --> 00:45:34.960
And you can set up a repeat
loop so that you can repeat over

00:45:34.960 --> 00:45:37.740
that batch a number of times.

00:45:37.740 --> 00:45:43.270
Another neat feature that the
Schedules tab has here is we can

00:45:43.270 --> 00:45:47.640
actually choose which computer we'd
like to connect to to run that.

00:45:47.800 --> 00:45:51.380
So I'm going to pick these two computers.

00:45:53.900 --> 00:45:56.300
and we'll start running.

00:45:56.300 --> 00:45:59.740
These computers are actually located
downstairs in one of the lounges.

00:45:59.840 --> 00:46:02.130
It's actually the
ADC compatibility lounge that

00:46:02.130 --> 00:46:04.230
they've brought to this facility.

00:46:04.230 --> 00:46:08.020
But they could just as easily be any
computer -- computers anywhere on

00:46:08.020 --> 00:46:10.530
the Internet that were accessible.

00:46:14.420 --> 00:46:16.600
So you can see it running through.

00:46:16.850 --> 00:46:18.470
There, that log in's not valid.

00:46:18.730 --> 00:46:20.760
And it cleans it up.

00:46:22.270 --> 00:46:27.610
So I'd like to point out that although
what we're doing here is testing the

00:46:27.610 --> 00:46:31.160
same script on two different machines,
you could just as easily

00:46:31.160 --> 00:46:34.280
switch your connection in the
middle of a single script.

00:46:34.380 --> 00:46:37.500
And in this way,
you could test scripting-- you could

00:46:38.060 --> 00:46:44.150
test something that runs at multiple
points on different machines.

00:46:45.250 --> 00:46:49.840
and hopefully this has given you a good
example of how you might be able to use

00:46:49.840 --> 00:46:53.260
Eggplant to help test your applications.

00:46:59.800 --> 00:47:02.800
Thanks again, Jonathan.

00:47:02.820 --> 00:47:05.520
So I have just a couple more slides here.

00:47:05.520 --> 00:47:08.800
As you saw, Eggplant is very useful
for testing your software.

00:47:08.800 --> 00:47:13.200
But because we are automating
a process on a remote system,

00:47:13.200 --> 00:47:17.160
it doesn't have to necessarily
just be used for testing software.

00:47:17.160 --> 00:47:18.980
It could be used for some
other things as well.

00:47:18.980 --> 00:47:21.400
And here's a few ideas that we've
thought of and that some of our

00:47:21.410 --> 00:47:22.980
customers are playing around with.

00:47:23.980 --> 00:47:25.620
One is documentation.

00:47:25.620 --> 00:47:29.120
We know that you all like
to document your software.

00:47:29.490 --> 00:47:32.010
But of course,
chances are you've got a lot of

00:47:32.080 --> 00:47:33.620
screenshots then in your documentation.

00:47:33.650 --> 00:47:36.960
And as your software evolves,
you're going to need to replace those

00:47:36.960 --> 00:47:38.820
screenshots with up-to-date images.

00:47:38.820 --> 00:47:41.210
Using Eggplant,
you could create a script to

00:47:41.320 --> 00:47:43.020
walk through your application.

00:47:43.090 --> 00:47:46.690
And at the appropriate point where
you want to capture a screenshot,

00:47:46.700 --> 00:47:48.650
you can tell Eggplant to do that.

00:47:48.780 --> 00:47:51.020
We can capture either the full
screen or any region of the

00:47:51.030 --> 00:47:52.520
screen that you want to capture.

00:47:53.600 --> 00:47:56.030
We think it could also
be useful in training.

00:47:56.390 --> 00:47:58.280
Particularly,
we're working on a feature right now

00:47:58.280 --> 00:48:01.930
that should be out in the next version
of Eggplant to allow you to create

00:48:01.930 --> 00:48:05.670
a QuickTime movie of any part of
your script as it's walking through.

00:48:05.740 --> 00:48:09.810
This could be great for creating a
demonstration movie of your software

00:48:09.810 --> 00:48:11.780
or a variety of other purposes.

00:48:11.840 --> 00:48:15.510
And last of all, of course,
system administration

00:48:15.510 --> 00:48:17.140
is kind of a natural.

00:48:17.310 --> 00:48:20.730
If you've got an Eggplant machine
that can connect to any number of

00:48:20.740 --> 00:48:23.020
different systems across your network,
it could be very useful.

00:48:23.020 --> 00:48:30.160
It could be very useful for scripting and
automating any tasks on those machines.

00:48:30.820 --> 00:48:33.960
So finally,
I thought that John Comiskey was

00:48:33.960 --> 00:48:37.620
going to have a slide in there at the
end with a quote from Matt Newberg.

00:48:37.620 --> 00:48:39.970
I guess that came out on his
final presentation there.

00:48:39.980 --> 00:48:41.870
But we thought, gee,
maybe we should put in a

00:48:41.950 --> 00:48:43.100
quote from Matt Newberg,
too.

00:48:43.100 --> 00:48:44.160
So here you go.

00:48:44.160 --> 00:48:47.370
Here's some good advice
from Matt Newberg,

00:48:47.690 --> 00:48:51.840
who saw Eggplant here at Macworld
in January and was rather

00:48:51.850 --> 00:48:53.850
enamored with what he saw.

00:48:54.000 --> 00:48:59.690
So now I'd like to invite Godfrey
back up to do the wrap up.

00:49:03.900 --> 00:49:08.340
Thank you very much, John.

00:49:08.470 --> 00:49:10.860
So, in summary, what have we got?

00:49:10.860 --> 00:49:13.000
You know, testing is very important.

00:49:13.000 --> 00:49:15.000
We know it's very
important to all of you.

00:49:15.000 --> 00:49:18.200
This is just, you know, the beginnings of
Mac OS X automated testing.

00:49:18.360 --> 00:49:21.390
The Redstone product is excellent,
is in use by quite a large

00:49:21.540 --> 00:49:23.770
number of our developers already.

00:49:24.040 --> 00:49:28.250
AppleScript's GUI scripting
capability gives you a certain

00:49:28.250 --> 00:49:32.140
level of functional testing,
and it's limited in scope.

00:49:32.140 --> 00:49:33.060
We understand that.

00:49:33.060 --> 00:49:34.660
We know we need to do more there.

00:49:34.870 --> 00:49:37.940
But I'm sure that lots of people
can create point tests for

00:49:38.070 --> 00:49:42.080
functional testing using it,
and logging output, logging errors,

00:49:42.080 --> 00:49:43.960
and all kinds of other things.

00:49:44.690 --> 00:49:47.440
Eggplant user-centric, scriptable,
cross-platform,

00:49:47.440 --> 00:49:49.430
broad scope of capabilities.

00:49:49.430 --> 00:49:52.700
We've only shown a little bit of it here,
and they have lots more

00:49:52.700 --> 00:49:54.710
things in store for it.

00:49:55.360 --> 00:49:56.500
Where to learn more.

00:49:56.520 --> 00:50:00.080
The AppleScript GUI scripting
is the UI element inspector.

00:50:00.280 --> 00:50:02.660
These are the URLs to
get to these components,

00:50:02.660 --> 00:50:05.520
the UI browser, and of course,
just go to the developer site

00:50:05.520 --> 00:50:07.220
and search for accessibility.

00:50:07.220 --> 00:50:10.270
You'll get reference to
a lot of documentation.

00:50:10.750 --> 00:50:12.110
Eggplant by Redstone Software.

00:50:12.110 --> 00:50:14.960
This is their company address
and contact information.

00:50:14.960 --> 00:50:18.090
They have Eggplant
CDs available here at WWDC.

00:50:18.100 --> 00:50:20.390
They were giving them out at
their booth during the course

00:50:20.390 --> 00:50:22.700
of the conference downstairs.

00:50:22.700 --> 00:50:26.270
If anybody has not received one,
please meet with the

00:50:26.370 --> 00:50:27.700
gentleman from Redstone.

00:50:27.700 --> 00:50:32.730
They'll be here after this
session and out in the halls,

00:50:32.730 --> 00:50:36.790
and they'll be able to
get some more for you.

00:50:36.790 --> 00:50:37.060
And also the access to our ADC test labs.

00:50:37.520 --> 00:50:39.850
If you have interest in
more automated testing,

00:50:40.040 --> 00:50:44.180
I really request that
you come contact me.

00:50:44.490 --> 00:50:46.400
My email address is right there.

00:50:46.520 --> 00:50:48.950
We're looking for your input,
what fits your needs,

00:50:48.950 --> 00:50:50.040
what would you like to see.

00:50:50.040 --> 00:50:52.770
We're looking for where we
can improve in this direction.

00:50:52.780 --> 00:50:55.810
And of course,
Redstone Software and Jim Armstrong,

00:50:55.840 --> 00:50:57.560
who will be up in our Q&A panel.

00:50:57.580 --> 00:51:01.980
He's their sales engineer and can answer
a lot of your questions about access and

00:51:02.020 --> 00:51:04.800
finding information about their products.

00:51:05.860 --> 00:51:07.660
And we're very close
to the end of the show,

00:51:07.660 --> 00:51:09.990
but we thought we'd give you
a couple of things to go to,

00:51:09.990 --> 00:51:12.620
both at the same time this afternoon,
unfortunately.

00:51:12.620 --> 00:51:14.980
But number one,
how to write a modern Carbon app,

00:51:14.980 --> 00:51:17.680
take advantage of the latest
techniques and concepts for

00:51:17.680 --> 00:51:20.520
Mac OS X Carbon applications,
and a feedback forum for the

00:51:20.660 --> 00:51:22.250
Apple Developer Connection.

00:51:22.260 --> 00:51:24.060
You can give us feedback
about the conference,

00:51:24.070 --> 00:51:26.200
about all the services we
provide through the year.