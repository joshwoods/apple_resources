WEBVTT

00:00:17.310 --> 00:00:18.160
Morning, everybody.

00:00:18.160 --> 00:00:20.990
Welcome to session 310,
Debugging and Tuning

00:00:20.990 --> 00:00:23.260
Your Carbon Applications with Xcode.

00:00:23.510 --> 00:00:26.100
If you do not want to
learn about debugging your

00:00:26.100 --> 00:00:29.430
Carbon applications with Xcode,
now would be an excellent

00:00:29.430 --> 00:00:30.630
time to deplane.

00:00:31.460 --> 00:00:36.560
This is actually going to be a little
more focused on debugging than on tuning.

00:00:36.900 --> 00:00:39.610
Robert Bodich did an
excellent presentation on the

00:00:39.610 --> 00:00:43.330
performance tools yesterday,
and I saw three plugs in

00:00:43.330 --> 00:00:45.780
sessions yesterday pointing
to custom data formatters,

00:00:45.780 --> 00:00:48.900
so I've changed the content a
little bit to focus more on the

00:00:48.900 --> 00:00:52.680
debugging and custom data formatting,
because most of the stuff that

00:00:52.680 --> 00:00:56.030
Robert explained on tuning and
diagnostics applies just as

00:00:56.120 --> 00:00:59.480
well to Carbon applications
as to Cocoa applications.

00:00:59.590 --> 00:01:02.060
So if you missed that,
catch it on the DVD.

00:01:02.060 --> 00:01:03.460
There's some excellent stuff there.

00:01:05.150 --> 00:01:07.430
I want to talk about Carbon.

00:01:07.510 --> 00:01:09.430
It's not just for Code Warrior anymore.

00:01:09.540 --> 00:01:12.860
We've been designing Xcode so that
it's a great Carbon development

00:01:12.860 --> 00:01:16.670
environment and putting a lot
of emphasis on Carbon debugging

00:01:16.670 --> 00:01:19.120
in the debugging environment.

00:01:19.240 --> 00:01:22.780
Panther and Xcode have some really
great tools built in to help you build

00:01:22.780 --> 00:01:25.140
and debug your Carbon applications.

00:01:25.190 --> 00:01:28.240
What you're going to learn in this
session today are some basic differences

00:01:28.620 --> 00:01:32.830
between the Carbon debugging you may
be used to on Mac OS 9 with Mac's bug

00:01:32.910 --> 00:01:35.100
and the Code Warrior IDE debugger.

00:01:35.110 --> 00:01:40.030
And what you have in Mac OS X with
GDB and the Xcode debugger.

00:01:40.170 --> 00:01:45.100
There are some techniques for using
GDB and Xcode to debug Carbon apps.

00:01:45.100 --> 00:01:50.370
Some secrets that are hidden on
Apple's website in plain sight in a

00:01:50.370 --> 00:01:53.100
file called Carbon Tips and Tricks.

00:01:53.130 --> 00:01:55.500
If you haven't read it,
that's what I stole most

00:01:55.500 --> 00:01:57.100
of this presentation from.

00:01:57.230 --> 00:02:01.310
Some new features in Xcode that
you haven't seen before that aren't

00:02:01.470 --> 00:02:03.100
on the web that are really cool.

00:02:03.100 --> 00:02:07.100
That will not only allow you
to debug your application,

00:02:07.100 --> 00:02:09.280
build custom debuggers
in your application,

00:02:09.280 --> 00:02:14.170
but also see a lot of your familiar
Carbon data types right in the

00:02:14.170 --> 00:02:16.930
debugger with no further ado.

00:02:17.100 --> 00:02:20.100
And then some Carbon specific
performance and tuning tricks.

00:02:20.140 --> 00:02:23.060
I have like one or two
slides on those like I said.

00:02:24.880 --> 00:02:27.500
Let's go through the steps
in debugging and tuning.

00:02:27.500 --> 00:02:30.960
This should be familiar to everybody.

00:02:31.090 --> 00:02:33.670
First, you have to define your
quality and performance goals.

00:02:33.680 --> 00:02:36.620
I think if you remember from
the Mac OS X presentation,

00:02:36.620 --> 00:02:41.490
the way we got Safari so fast
was that we made no performance

00:02:41.620 --> 00:02:43.560
regressions a requirement.

00:02:43.650 --> 00:02:46.840
So if you really want to deliver
a performance application,

00:02:46.840 --> 00:02:51.040
if you really want to deliver
a quality bug-free application,

00:02:51.130 --> 00:02:55.180
all of the tools in the world won't help
you if you don't have the methodology

00:02:55.430 --> 00:02:59.870
and the discipline to make sure that
the tools are used in the process.

00:03:00.020 --> 00:03:02.640
So everything I'm going
to show you today,

00:03:02.720 --> 00:03:03.960
it's great if you know it.

00:03:04.030 --> 00:03:07.640
It's even better if you define a process
that makes sure that these get used.

00:03:07.720 --> 00:03:10.390
For example,
distributing these custom data viewers

00:03:10.390 --> 00:03:14.400
throughout your organization or building
them into your product build process,

00:03:14.470 --> 00:03:17.950
rather than having them on
a per-engineer ad hoc basis.

00:03:18.070 --> 00:03:19.760
You need to prep your
project for debugging,

00:03:19.760 --> 00:03:22.370
and we're going to show you some
ways to set up some environment

00:03:22.440 --> 00:03:26.400
variables and set up some build
settings to make your project more

00:03:26.400 --> 00:03:29.400
debuggable that are Carbon specific.

00:03:29.450 --> 00:03:31.380
Get your basic functionality working.

00:03:31.610 --> 00:03:35.850
Run your app in the
debugger and isolate bugs.

00:03:36.040 --> 00:03:38.190
Then when you get the bugs out,
run your app under the

00:03:38.260 --> 00:03:41.720
performance analysis tools to
see if you've met your metrics.

00:03:41.740 --> 00:03:44.840
And it's really pretty important
to make sure that your application

00:03:45.210 --> 00:03:48.760
works before you really start to
use the performance tools on it,

00:03:48.850 --> 00:03:52.320
because the performance tools
far prefer a running application

00:03:52.320 --> 00:03:53.920
to a broken application.

00:03:53.920 --> 00:03:57.590
And then you iterate
and iterate and iterate.

00:03:59.030 --> 00:04:02.190
Your friend is GDB.

00:04:02.240 --> 00:04:05.920
I know a lot of you don't believe that,
but GDB is the underlying

00:04:05.920 --> 00:04:10.210
debugger in the Mac OS X system,
and it's really going to help you out.

00:04:10.290 --> 00:04:17.110
Debugging without GDB on Mac OS X is like
debugging without Mac's bug on Mac OS 9.

00:04:17.120 --> 00:04:20.130
You can get pretty far with
symbolic debugging and with the

00:04:20.130 --> 00:04:23.460
debugging the IDE shows you,
but unless you know what's going

00:04:23.460 --> 00:04:26.480
on down at the middle level,
you'll never really know what's

00:04:26.480 --> 00:04:27.560
going on with your application.

00:04:27.580 --> 00:04:30.230
So if you don't have any
familiarity with GDB,

00:04:30.230 --> 00:04:34.920
you really should acquire some in order
to do great debugging on Mac OS X.

00:04:34.920 --> 00:04:37.130
We're going to show you
some of the basics today,

00:04:37.130 --> 00:04:41.180
and then some of the interactions
between the IDE and GDB.

00:04:41.180 --> 00:04:46.900
The basic way to launch an application
in the debugger is from the terminal.

00:04:46.900 --> 00:04:51.260
You issue the GDB command and
then the path to your application,

00:04:51.320 --> 00:04:55.080
and you need to go into your
application and all the way down

00:04:55.090 --> 00:05:01.340
into the package of your application,
the .app/contents/macos,

00:05:01.340 --> 00:05:04.580
all the way down to the DYLD executable.

00:05:04.580 --> 00:05:09.700
So this is people's first mistake
is they try to GDB the package,

00:05:09.700 --> 00:05:11.570
GDB the executable.

00:05:11.580 --> 00:05:16.580
Second thing you can do is just you
can attach to a running application.

00:05:16.580 --> 00:05:20.580
Launch your application, launch GDB,
and then attach to it.

00:05:20.600 --> 00:05:23.700
So you have two modes:
launch it inside GDB or attach

00:05:23.770 --> 00:05:25.740
to it once it's running.

00:05:26.320 --> 00:05:28.900
If you've used any other
command-line debugger,

00:05:29.010 --> 00:05:32.670
the commands are conceptually
familiar even though they're

00:05:32.670 --> 00:05:33.960
probably under different names.

00:05:33.960 --> 00:05:35.930
B sets a breakpoint.

00:05:36.040 --> 00:05:39.610
P displays a variable's value,
so you have to print variables

00:05:39.620 --> 00:05:41.760
rather than just type expressions.

00:05:41.840 --> 00:05:46.700
X examines memory,
and that's like DM in MaxBug.

00:05:46.720 --> 00:05:52.400
C continues execution after a breakpoint,
and BT prints a backtrace.

00:05:52.440 --> 00:05:56.890
If you're used to SC in MaxBug,
it's BT in GDB.

00:05:56.900 --> 00:06:01.200
We're all grown-ups,
we can learn new two-letter acronyms.

00:06:01.830 --> 00:06:07.230
What's great about GDB is that GDB,
while it's stopped in the inferior,

00:06:07.240 --> 00:06:11.830
lets you evaluate expressions
and call functions within your

00:06:11.830 --> 00:06:13.720
application or within the framework.

00:06:13.720 --> 00:06:16.380
And this is very powerful,
and this is the first technique

00:06:16.490 --> 00:06:20.360
we're going to show you,
is that there are a lot of debug-only

00:06:20.360 --> 00:06:25.760
functions built into the Carbon framework
that let you figure out what's going

00:06:25.760 --> 00:06:30.110
on in your Carbon applications in ways
you wouldn't normally be able to do.

00:06:30.660 --> 00:06:35.180
Many of these fulfill roles that
were filled by D commands in MaxBug.

00:06:35.220 --> 00:06:37.230
These are now,
instead of being in the development

00:06:37.290 --> 00:06:39.920
environment or in the debugger,
they're built into the framework,

00:06:39.920 --> 00:06:42.340
and you just invoke
them from the debugger.

00:06:42.360 --> 00:06:45.470
It's a pretty long list,
but you can print debug info

00:06:45.470 --> 00:06:47.490
for HI objects or window groups.

00:06:47.620 --> 00:06:51.920
You can print the event queue
or watch events coming in.

00:06:51.920 --> 00:06:56.160
You can print the menu lists or
menus or menu items or windows.

00:06:56.160 --> 00:07:00.120
You can even flash the viz
region or the update region.

00:07:00.530 --> 00:07:02.830
You can even see the time of
a window just to see what it

00:07:02.830 --> 00:07:04.280
happens to be at this point.

00:07:04.280 --> 00:07:07.660
These are all listed in the Carbon tips
and tricks document on the web,

00:07:07.660 --> 00:07:11.120
which I'll point you to at the end,
so you don't have to scribble furiously

00:07:11.240 --> 00:07:13.210
now and get the parameter list right.

00:07:13.420 --> 00:07:16.550
But the point is,
you can call any of these from GDB while

00:07:16.700 --> 00:07:21.280
you're paused in your application to see
what Carbon thinks your app is doing.

00:07:21.280 --> 00:07:24.850
So to demo some of these,
I'm going to bring up

00:07:25.000 --> 00:07:27.490
Chris Neville on keyboards.

00:07:32.160 --> 00:07:35.340
We're going to start with an
application called Appearance Sample,

00:07:35.510 --> 00:07:39.420
which is on your Xcode CD.

00:07:39.820 --> 00:07:45.580
This copy of Appearance Sample has
been updated to build a native project.

00:07:45.620 --> 00:07:48.540
And what we're going to do is
we're going to invoke it in GDB.

00:07:48.540 --> 00:07:52.760
We're going to start it off
in GDB without using Xcode.

00:07:52.760 --> 00:07:54.880
It's already been built.

00:07:59.400 --> 00:08:01.720
And GDB loads and it
runs the application,

00:08:01.720 --> 00:08:03.500
and there you go.

00:08:03.520 --> 00:08:06.100
Now, to interrupt a running
application from GDB,

00:08:06.100 --> 00:08:08.590
you just press Control-C,
and it stops it.

00:08:08.600 --> 00:08:09.100
And there we go.

00:08:09.100 --> 00:08:10.470
We're interrupted.

00:08:10.490 --> 00:08:14.900
You can do a stack trace,
see where you are, things like that.

00:08:14.900 --> 00:08:18.170
Now we want to ask Carbon what
a couple of things are going on.

00:08:18.230 --> 00:08:21.990
So we're going to make the
debug print menu list call.

00:08:22.640 --> 00:08:25.190
And we just do call void
debug print menu list,

00:08:25.240 --> 00:08:28.770
paren paren,
and we see this is our menu list,

00:08:28.870 --> 00:08:30.560
according to HIToolbox.

00:08:30.640 --> 00:08:31.260
There you go.

00:08:31.330 --> 00:08:34.260
And it shows the menu ref.

00:08:34.380 --> 00:08:36.980
Chris is now going to do
debug print all window groups,

00:08:37.120 --> 00:08:40.180
and he's going to get a hierarchical
list of all the window groups.

00:08:40.180 --> 00:08:42.000
It's got the hex address,
and it's also got the

00:08:42.100 --> 00:08:44.000
window group identifier.

00:08:44.000 --> 00:08:48.360
This will be very helpful in going
back to your nib or going back to your

00:08:48.400 --> 00:08:52.640
code and figuring out what windows
have been instantiated at any time.

00:08:52.700 --> 00:08:55.240
Now he's going to
continue the application,

00:08:55.300 --> 00:08:58.720
go back, open another window.

00:08:59.420 --> 00:09:02.600
Go back, interrupt the application again.

00:09:02.650 --> 00:09:04.520
Print the window list again,
and now you see the new

00:09:04.520 --> 00:09:06.080
window is in the window list.

00:09:06.120 --> 00:09:10.400
So this is a very helpful debugging
technique from GDB to figure out

00:09:10.400 --> 00:09:14.280
what's going on in your application.

00:09:14.280 --> 00:09:15.840
We can go back to the slides.

00:09:15.850 --> 00:09:17.570
Thank you, Chris.

00:09:23.660 --> 00:09:27.810
Now, I mentioned a little earlier about
preparing your application for debugging.

00:09:27.820 --> 00:09:31.970
And there's a technique we use
inside Apple for the Carbon Framework

00:09:32.050 --> 00:09:35.510
itself to prepare the debug
version of the Carbon Framework,

00:09:35.590 --> 00:09:38.470
which I'll show you a little bit later,
which you can use in

00:09:38.470 --> 00:09:40.760
any Carbon application.

00:09:40.760 --> 00:09:41.820
It's built into Carbon.

00:09:41.820 --> 00:09:46.430
There are two header files called
debugging.h and assertmacros.h,

00:09:46.440 --> 00:09:49.130
which are part of the Carbon Framework.

00:09:49.210 --> 00:09:51.250
And if you include the
Carbon Umbrella Framework,

00:09:51.650 --> 00:09:55.530
you've got these macros defined
in your application right now.

00:09:55.540 --> 00:09:57.890
All you need to do is turn them on.

00:09:57.900 --> 00:10:03.050
Assertmacros.h, if you look at it,
is a whole list of asserts you

00:10:03.110 --> 00:10:07.300
can throw in your application
on various conditions.

00:10:07.300 --> 00:10:09.780
You can verify that
things are certain values.

00:10:09.780 --> 00:10:12.050
You can verify that
things are not values.

00:10:12.060 --> 00:10:16.300
You can make sure things are conforming,
things are non-zero.

00:10:16.300 --> 00:10:20.230
Large number of macros you can
use just to make sure that your

00:10:20.250 --> 00:10:21.580
data is what you want it to be.

00:10:21.600 --> 00:10:26.470
And in your production builds,
they all fall out and are no-op.

00:10:26.620 --> 00:10:32.470
So if you are considering using,
constructing a whole set of debug

00:10:32.470 --> 00:10:37.000
macros that are in your debug builds
but fall out in your production builds,

00:10:37.020 --> 00:10:38.520
we've already built them for you.

00:10:38.520 --> 00:10:40.490
They're right there in assertmacros.h.

00:10:40.600 --> 00:10:43.640
All you have to do is
define a preprocessor flag,

00:10:43.640 --> 00:10:47.090
debug, set it to one,
and they're invoked.

00:10:47.180 --> 00:10:51.600
And then there's an additional
preprocessor macro that's specified.

00:10:51.600 --> 00:10:53.600
It specifies the level of debugging.

00:10:53.600 --> 00:10:56.100
And we define four levels for you.

00:10:56.290 --> 00:11:01.460
And they have different degrees
of precision and explanation and

00:11:01.460 --> 00:11:04.400
verbosity on the debug strings.

00:11:04.400 --> 00:11:09.010
If you set debug internal,
that gives you the source file

00:11:09.010 --> 00:11:12.640
and the line number in which
the assertion has been thrown,

00:11:12.640 --> 00:11:15.100
which is very useful
for internal debugging.

00:11:15.250 --> 00:11:19.120
If you set debug external,
it just gives the assert and

00:11:19.120 --> 00:11:22.690
the name of the string that
was associated with the assert,

00:11:22.700 --> 00:11:24.800
so your users can report that back.

00:11:24.810 --> 00:11:31.100
If you have debug break only,
then when an assert is thrown,

00:11:31.100 --> 00:11:33.890
it just breaks into the debugger
and doesn't log a message.

00:11:34.000 --> 00:11:39.940
And then if you say debug production,
then all of the asserts are silent.

00:11:40.000 --> 00:11:44.000
And you can set these either
from the command line,

00:11:44.000 --> 00:11:48.800
either in include files and header
files when you build your project,

00:11:48.800 --> 00:11:50.290
or you can even set them in Xcode.

00:11:50.300 --> 00:11:51.770
We'll show you a little
bit about that later.

00:11:52.560 --> 00:11:56.490
There's a second thing,
like I said earlier,

00:11:56.500 --> 00:11:58.480
the debug versions of
the Carbon libraries.

00:11:58.990 --> 00:12:02.460
Every version of every Mako
library that we supply in a

00:12:02.570 --> 00:12:06.500
framework comes in the developer
release with two parallel versions,

00:12:06.500 --> 00:12:08.650
a debug version and a profiling version.

00:12:08.740 --> 00:12:13.120
And the debug version has perhaps
additional calls and certainly

00:12:13.120 --> 00:12:17.530
additional console logging of what's
going on inside that framework.

00:12:17.700 --> 00:12:21.280
And if you build and link your
application with the debug variant,

00:12:21.310 --> 00:12:25.100
when you make system calls,
then those system calls,

00:12:25.100 --> 00:12:27.870
if you pass them bad values
or if there's a bad condition

00:12:27.870 --> 00:12:30.980
somewhere in the framework,
it will do console spew.

00:12:31.290 --> 00:12:33.900
This is very,
very useful and not enough people do it.

00:12:34.280 --> 00:12:36.140
Again,
you can control this with an environment

00:12:36.160 --> 00:12:39.520
variable if you're just running in GDB,
or you can control it with

00:12:39.620 --> 00:12:42.590
a pop-up menu in Xcode,
and we'll show you how to do that.

00:12:42.800 --> 00:12:47.550
One thing about using Xcode,
you have to turn off zero link in order

00:12:47.550 --> 00:12:49.890
to use the debug variants of the library.

00:12:49.900 --> 00:12:51.900
And that's what we're doing
with libraries right now.

00:12:51.900 --> 00:12:52.890
Okay?

00:12:52.970 --> 00:12:55.690
And so we'll bring Chris back up again
to show you a couple of these things.

00:13:01.390 --> 00:13:04.970
So we're going to bring up the
appearance sample code in Xcode now,

00:13:04.970 --> 00:13:09.860
and go to a file called MegaDialog.

00:13:10.030 --> 00:13:10.840
That's right.

00:13:10.930 --> 00:13:14.220
Go to the switch pane method.

00:13:14.520 --> 00:13:18.500
And here's some, there's some crude error
checking going on here.

00:13:18.500 --> 00:13:23.390
This isn't really very useful, you know,
if the input value is invalid,

00:13:23.390 --> 00:13:24.700
then just do nothing.

00:13:24.750 --> 00:13:29.640
Maybe we want to see when
that input value is invalid,

00:13:29.890 --> 00:13:32.280
so we're going to put an assert here.

00:13:32.300 --> 00:13:36.180
Just verify what that value is,
and that will cause a log message

00:13:36.280 --> 00:13:37.700
if the pain index is zero.

00:13:38.070 --> 00:13:39.600
Now that's all we type here.

00:13:39.600 --> 00:13:44.090
The verify macro in assert
macros does the rest of the work.

00:13:46.920 --> 00:13:54.060
Now to fire that off,
we go to our project settings.

00:14:00.190 --> 00:14:02.660
Get the project inspector
and go to our build styles,

00:14:02.660 --> 00:14:07.600
because we want the asserts only
in the development build style and

00:14:07.600 --> 00:14:10.400
not in the deployment build style.

00:14:10.680 --> 00:14:20.770
So we'll add, by clicking the little plus
box down at the corner,

00:14:20.770 --> 00:14:20.770
an other_cflags.

00:14:24.520 --> 00:14:27.820
and it moves,
so you need to go select it again.

00:14:27.910 --> 00:14:29.250
Not that one.

00:14:29.320 --> 00:14:31.090
That one.

00:14:32.220 --> 00:14:41.180
And we're going to define the debug macro
equals 1 and debug_internal equals 1.

00:14:45.600 --> 00:14:48.620
And then we're going
to build the project.

00:14:48.620 --> 00:14:51.160
And by defining those,
we're going to activate those macros,

00:14:51.160 --> 00:14:54.980
we're going to define, verify,
and it's going to run.

00:14:56.700 --> 00:14:58.240
Well, not yet.

00:14:58.280 --> 00:15:00.020
Not yet.

00:15:04.800 --> 00:15:07.800
Build errors and warnings.

00:15:07.800 --> 00:15:09.800
No, no, no, hang on, hang on.

00:15:09.800 --> 00:15:14.780
Turn off zero, well...

00:15:21.900 --> 00:15:30.700
[Transcript missing]

00:15:44.700 --> 00:15:45.690
It's not spelled wrong.

00:15:45.700 --> 00:15:49.970
It's, it's, it's, it's,
um... Build errors and warnings window.

00:15:49.980 --> 00:15:51.800
It's the build dialogue.

00:15:59.010 --> 00:16:01.400
CleanBuild.

00:16:01.400 --> 00:16:03.990
It's a development release, folks.

00:16:04.000 --> 00:16:11.000
GDB is also still
running the application.

00:16:11.010 --> 00:16:12.000
That's okay.

00:16:12.000 --> 00:16:13.390
Okay.

00:16:31.570 --> 00:16:33.970
So now the application is
built with the debug flags.

00:16:34.100 --> 00:16:39.490
He's going to run the application.

00:16:40.400 --> 00:16:44.360
And when the application runs,
you see that the first time we call that,

00:16:44.380 --> 00:16:47.730
we get an assert that
pain index equals 0.

00:16:47.850 --> 00:16:52.550
It turns out this function is called
with pain index equals 0 a whole lot.

00:16:52.560 --> 00:16:56.520
Now maybe that's a performance problem
or a logic problem in our application.

00:16:56.520 --> 00:16:58.820
Maybe it's not,
but by just silently returning,

00:16:58.820 --> 00:16:59.860
we'd never know.

00:17:00.030 --> 00:17:03.030
But by throwing an assert there,
we get an interesting log to

00:17:03.030 --> 00:17:04.680
figure out what's going on.

00:17:04.680 --> 00:17:08.090
Now you notice a couple other
things about this is that it shows

00:17:08.260 --> 00:17:10.800
you the name third party client.

00:17:10.800 --> 00:17:12.020
Well, that's the default name.

00:17:12.020 --> 00:17:16.940
There's another variable that
you can declare that's defined

00:17:16.940 --> 00:17:21.320
in debugging.h that if you
assign that preprocessor macro,

00:17:21.320 --> 00:17:23.400
it actually puts the
name of your application,

00:17:23.400 --> 00:17:25.970
whatever you assign it in there,
into your log so you can

00:17:25.970 --> 00:17:27.390
get better logging messages.

00:17:27.630 --> 00:17:31.360
And since we did the
debug internal style,

00:17:31.390 --> 00:17:34.910
we're getting the line number
and the source file in which

00:17:34.910 --> 00:17:35.980
the assert's happening.

00:17:36.170 --> 00:17:37.040
So these are built in.

00:17:37.040 --> 00:17:39.940
They're very useful.

00:17:39.960 --> 00:17:44.690
Now we need to quit the application,
and we'll show you building with the

00:17:44.830 --> 00:17:48.720
debug version of the Carbon Library,
which generates a lot

00:17:48.720 --> 00:17:53.190
more diagnostic output,
not just a single assert.

00:17:56.120 --> 00:18:03.100
So what Chris is going to do here is go
down into the executable configuration,

00:18:03.100 --> 00:18:06.260
and this configures what happens
when we run or debug our application.

00:18:06.260 --> 00:18:11.450
And you see there's a pop-up menu that
says Dynamic Library Runtime Variant,

00:18:11.450 --> 00:18:14.620
the default standard,
and we're going to set it to debug.

00:18:14.620 --> 00:18:17.100
And that means when we link
our application and when

00:18:17.100 --> 00:18:20.080
we run our application,
we're going to link and run it against

00:18:20.080 --> 00:18:22.050
the debug variant of the library.

00:18:25.560 --> 00:18:28.480
So if we build it and run it,

00:18:31.090 --> 00:18:35.240
and open up the run log.

00:18:35.350 --> 00:18:40.760
We see a whole lot of output from
the Carbon framework of interesting

00:18:40.760 --> 00:18:44.240
things that this application,
this sample application that

00:18:44.310 --> 00:18:49.310
Apple ships on the Developer CD as
an example of how to write code,

00:18:49.550 --> 00:18:52.650
all of the wrong values that
it passes the Carbon framework.

00:18:52.930 --> 00:18:55.700
So use this as a lesson.

00:18:57.080 --> 00:19:02.350
This is really very useful if you want
to know what the framework is doing.

00:19:02.440 --> 00:19:05.490
As you mouse around the
application and as we do things,

00:19:05.500 --> 00:19:07.840
it generates even more asserts.

00:19:07.840 --> 00:19:12.150
These are asserts using the assert
macros and using debugging.h that are

00:19:12.420 --> 00:19:16.760
built into the Carbon framework that
are turned on in the debug variant.

00:19:16.760 --> 00:19:20.400
Okay?

00:19:20.500 --> 00:19:22.080
Thank you, Chris.

00:19:25.070 --> 00:19:27.320
Now he showed you a little
bit of debugging with Xcode.

00:19:27.320 --> 00:19:33.940
First we started out in GDB,
and then we did a little bit of GDB-style

00:19:34.030 --> 00:19:37.160
text spewing from inside of Xcode.

00:19:37.480 --> 00:19:39.830
Now we're going to show you a
little bit of Carbon debugging

00:19:39.960 --> 00:19:43.130
interactively with the Xcode debugger.

00:19:43.420 --> 00:19:47.020
The Xcode debugger is a lot better
than the Project Builder debugger was.

00:19:47.060 --> 00:19:48.760
I hope you saw in a
couple of the sessions,

00:19:48.760 --> 00:19:51.760
like yesterday afternoon,
some of the capabilities of it.

00:19:51.810 --> 00:19:55.330
I'm going to go a little more in-depth
into some of the Carbon aspects of that.

00:19:55.560 --> 00:20:00.310
Like any other IDE debugger,
it shows you the execution threads,

00:20:00.350 --> 00:20:04.610
it shows you the stacks and
the backtraces where you

00:20:04.690 --> 00:20:05.880
happen to be in the code.

00:20:06.190 --> 00:20:10.040
It shows you the source code,
it shows you the local variables,

00:20:10.100 --> 00:20:14.090
and it shows you the input parameters
of the functions in a way that

00:20:14.090 --> 00:20:17.510
you can figure out what the values
are and what the variables are.

00:20:17.600 --> 00:20:20.870
It also lets you set
and manage breakpoints.

00:20:21.450 --> 00:20:24.400
There are some new
debugging features in Xcode.

00:20:24.400 --> 00:20:30.420
We do C++ exception handling where
GDB and Project Builder did not.

00:20:30.580 --> 00:20:34.670
This is going to be very useful if
you use C++ exceptions as a routine

00:20:34.670 --> 00:20:37.200
part of your application structure.

00:20:37.300 --> 00:20:39.410
We allow you to step through templates.

00:20:39.530 --> 00:20:41.990
So templates can be really,
really gnarly,

00:20:42.000 --> 00:20:44.970
and if you can't step through them,
step through instantiation

00:20:44.970 --> 00:20:46.930
or use of them,
it's really, really hard to figure

00:20:46.930 --> 00:20:47.800
out what's going on.

00:20:47.800 --> 00:20:49.700
We do that now in Xcode.

00:20:49.800 --> 00:20:53.790
We've got some built-in data viewers
for foundation data types and the most

00:20:53.790 --> 00:20:57.160
important Carbon data types you use,
and it's an extensible

00:20:57.160 --> 00:20:59.600
plug-in architecture where
you can define your own,

00:20:59.600 --> 00:21:03.680
not just for Carbon data types,
but for application-specific

00:21:03.820 --> 00:21:05.360
data types as well.

00:21:06.390 --> 00:21:07.920
So now I'm going to
hand it over to Chris,

00:21:07.920 --> 00:21:11.740
and he's going to do his demo
of C++ exceptions and the

00:21:11.740 --> 00:21:13.900
stepping-through templates.

00:21:13.940 --> 00:21:14.640
Okay.

00:21:14.710 --> 00:21:18.340
So what we've got here
should look familiar to you

00:21:18.340 --> 00:21:20.830
if you came to session 307.

00:21:20.840 --> 00:21:25.300
This is the Power Plant appearance demo,
kind of the Power Plant version

00:21:25.300 --> 00:21:29.140
of appearance sample that
we've imported into Xcode.

00:21:29.190 --> 00:21:32.050
So let's just start this debugging.

00:21:32.080 --> 00:21:34.200
Loads, runs.

00:21:35.680 --> 00:21:36.600
Okay, so here it is.

00:21:36.600 --> 00:21:39.110
Again,
just shows off the various controls,

00:21:39.110 --> 00:21:42.630
various kinds of windows.

00:21:43.160 --> 00:21:45.900
various kinds of windows.

00:21:45.930 --> 00:21:47.600
Hmm, this isn't working.

00:21:47.700 --> 00:21:48.620
It's a bug.

00:21:48.840 --> 00:21:50.130
How are you going to fix it?

00:21:50.240 --> 00:21:51.080
How indeed.

00:21:51.230 --> 00:21:53.460
Okay, so when this particular
type of bug happens,

00:21:53.460 --> 00:21:57.540
I know from experience that it's usually
because someone is throwing an exception

00:21:57.540 --> 00:22:00.340
and it's just being silently swallowed.

00:22:00.490 --> 00:22:03.270
Now, stuff like this is pretty
hard to track down,

00:22:03.340 --> 00:22:07.300
especially in something like Power Plant,
because quite often you didn't write

00:22:07.430 --> 00:22:10.740
either the code that's throwing
or the code that's catching.

00:22:11.090 --> 00:22:17.970
However, what we can do with Xcode is we
can pause and then turn on Stop on

00:22:17.970 --> 00:22:22.160
C++ Throw and Stop on C++ Catch.

00:22:22.160 --> 00:22:26.870
So we'll continue,
go back to Appearance Demo, and now, oh,

00:22:26.870 --> 00:22:28.150
sure enough,

00:22:28.290 --> 00:22:32.240
So there's the exception itself,
and it's coming from this function here,

00:22:32.320 --> 00:22:37.790
throwIfNil, because I just set it to
nil to force an exception.

00:22:38.430 --> 00:22:41.230
Power plant tends to not throw exceptions
unless something goes seriously wrong,

00:22:41.240 --> 00:22:43.290
so that was the simplest way to do it.

00:22:43.300 --> 00:22:44.770
So let's see where
that actually winds up.

00:22:44.850 --> 00:22:48.300
We'll hit Continue,
and now we stop in the catch,

00:22:48.300 --> 00:22:52.350
or actually we stop on the function
call that generated the exception,

00:22:52.350 --> 00:22:53.770
process next event.

00:22:53.880 --> 00:22:58.260
If we step over,
we'll wind up in the catch block itself.

00:23:04.390 --> 00:23:10.540
So I also wanted to show off some
debugging of standard C++ library stuff

00:23:10.540 --> 00:23:14.710
and C++ standard template library.

00:23:14.710 --> 00:23:17.370
And to do that,
I actually wrote my own project because

00:23:17.370 --> 00:23:21.040
Power Plant tends to not use this stuff,
which is fair because it was

00:23:21.050 --> 00:23:23.180
created before they mostly existed.

00:23:23.180 --> 00:23:30.060
So, what we have here is a fairly simple,
stupid STL.

00:23:30.060 --> 00:23:32.810
Oh, I knew I was going to forget that.

00:23:34.140 --> 00:23:36.930
Okay, there's a bug.

00:23:40.340 --> 00:23:49.550
We're in, and now I have to... You have
to turn off Stop on Throw and

00:23:49.660 --> 00:23:53.290
Catch before you run the debugger,
or the debugger won't run.

00:23:53.300 --> 00:23:55.030
We'll fix that in time for GM.

00:23:55.040 --> 00:23:57.960
All right, let's try that again.

00:24:01.810 --> 00:24:04.800
Okay.

00:24:04.840 --> 00:24:05.290
So here we are.

00:24:05.300 --> 00:24:07.020
I've actually already
stopped at a breakpoint.

00:24:07.180 --> 00:24:10.630
This is sort of your, you know,
STL 101 application.

00:24:10.640 --> 00:24:14.780
It sucks a bunch of words
out of the system dictionary,

00:24:14.880 --> 00:24:17.600
uppercases them, and then blats out a
few to standard output.

00:24:17.600 --> 00:24:21.490
So we've stopped right here
on a call to four each.

00:24:21.670 --> 00:24:26.240
I've already got a breakpoint
on the function that's going to

00:24:26.240 --> 00:24:29.470
uppercase everything using transform.

00:24:29.550 --> 00:24:31.040
So we'll step into that.

00:24:32.460 --> 00:24:35.860
Okay,
so here we are stopped in uppercase.

00:24:35.860 --> 00:24:37.580
And, you know,
we'd like to see the string

00:24:37.580 --> 00:24:38.470
that we're operating on.

00:24:38.480 --> 00:24:39.320
So, well, here it is.

00:24:39.320 --> 00:24:39.900
It's S.

00:24:39.900 --> 00:24:45.980
But if we expand it,
this is not really what I had in mind.

00:24:46.000 --> 00:24:47.190
This is not exactly useful.

00:24:47.190 --> 00:24:48.180
I want to see the string.

00:24:48.180 --> 00:24:51.760
So, this is what custom
data formatters are for.

00:24:52.890 --> 00:24:56.160
You've probably seen already how
you could use custom data formatters

00:24:56.160 --> 00:24:58.340
to pick pieces out of a structure,
individual fields.

00:24:58.470 --> 00:25:00.460
But you can also call a function.

00:25:00.460 --> 00:25:05.970
So,
what we'll do here is we'll say var.cstr,

00:25:06.080 --> 00:25:13.500
because standard library strings have a
handy thing that will return a C string.

00:25:13.500 --> 00:25:17.070
And it's going to think
about that for a minute.

00:25:22.910 --> 00:25:24.790
Really,
this didn't happen when I was practicing.

00:25:24.800 --> 00:25:26.640
It worked great in rehearsal, folks.

00:25:26.640 --> 00:25:28.630
It worked fine in rehearsal.

00:25:28.700 --> 00:25:30.920
What's going on here?

00:25:43.630 --> 00:25:45.250
Well, this is entertaining.

00:25:45.290 --> 00:25:45.750
Yeah.

00:25:45.780 --> 00:25:49.740
All right.

00:25:50.780 --> 00:25:52.820
We're just going to... Well,
while Chris is doing that,

00:25:52.830 --> 00:25:56.080
we'll go back to slides and explain
how the custom data formatters work.

00:26:06.800 --> 00:26:09.600
The custom data viewers,
if you've seen them yesterday, Chris,

00:26:09.710 --> 00:26:11.040
let me know when it's working.

00:26:11.040 --> 00:26:11.400
Yep.

00:26:11.400 --> 00:26:15.420
The custom data format is,
if you've seen them yesterday,

00:26:15.420 --> 00:26:21.810
a simple functionality that has
three levels of implementation.

00:26:21.860 --> 00:26:24.850
The simple functionality is
there's a summary column,

00:26:24.980 --> 00:26:27.980
and you can type an expression
into the summary column,

00:26:27.980 --> 00:26:29.880
and that expression is evaluated.

00:26:30.640 --> 00:26:33.680
The basic syntax,
the basic thing you can do is

00:26:33.680 --> 00:26:37.550
you can extract members from
a structure or a class and

00:26:37.550 --> 00:26:41.250
display them in the summary view,
and you can put strings around them,

00:26:41.370 --> 00:26:45.500
so you can say length equals this member,
height equals that member,

00:26:45.500 --> 00:26:51.920
and that uses this percent sign notation,
percent member percent.

00:26:51.920 --> 00:26:57.060
So anywhere you have a struct
or a class or an array,

00:26:57.060 --> 00:27:00.470
you can use the percent sign
notation and get at things inside

00:27:00.470 --> 00:27:04.220
that structure and promote them
to the summary of that structure.

00:27:04.220 --> 00:27:07.100
That really helps you look at
a variable without having to

00:27:07.100 --> 00:27:10.520
turn down the turn-down arrow,
especially if it's a very large thing.

00:27:10.520 --> 00:27:13.710
It gets you a lot more data
density in your debugger view.

00:27:13.720 --> 00:27:18.110
The second level is that you
can evaluate an expression,

00:27:18.180 --> 00:27:22.660
and the basic rule is that you can
put inside curly brackets in a summary

00:27:22.660 --> 00:27:27.020
view anything that you can type on
the GDB command line and execute.

00:27:27.960 --> 00:27:35.460
That means any C or C++ arithmetic
expression and any function calls,

00:27:35.740 --> 00:27:40.460
function calls within your application,
method calls on your objects,

00:27:40.460 --> 00:27:43.460
or system calls to the Carbon framework.

00:27:43.460 --> 00:27:45.350
This is very, very powerful.

00:27:45.650 --> 00:27:50.460
Those are evaluated every time
that that variable is displayed.

00:27:50.460 --> 00:27:54.460
So every step, it's going to see if the
variable's value has changed,

00:27:54.490 --> 00:27:57.460
and if it has,
it's going to reevaluate that expression.

00:27:57.960 --> 00:28:00.960
So you've got to be a
little careful about this,

00:28:01.000 --> 00:28:03.800
because it's going to
be reevaluated very,

00:28:03.800 --> 00:28:04.960
very frequently.

00:28:04.960 --> 00:28:08.960
So don't make your expressions too
complex or too lengthy to execute,

00:28:08.970 --> 00:28:11.940
and make sure you don't call
anything with side effects,

00:28:11.940 --> 00:28:14.960
for example,
because this is actually executing

00:28:14.960 --> 00:28:18.860
in the context of your application,
in your application's process space,

00:28:18.860 --> 00:28:22.060
in your application's memory space,
and anything that this

00:28:22.060 --> 00:28:25.360
application does can affect,
anything this expression does

00:28:25.440 --> 00:28:26.960
can affect your application.

00:28:27.960 --> 00:28:31.960
There are a couple of utility variables
that you can use in this expression.

00:28:31.960 --> 00:28:37.950
$var is the thing itself,
the thing that's being evaluated.

00:28:37.960 --> 00:28:42.820
So you can just do, you know,
curly brace $var.

00:28:42.990 --> 00:28:47.070
and then get at members of it,
or you can call methods on

00:28:47.070 --> 00:28:49.930
that by $var arrow or whatever.

00:28:50.190 --> 00:28:55.410
And then for convenience, $parent,
if you're viewing a class

00:28:55.410 --> 00:28:56.960
member or a struct member,
$parent, if you're viewing a class

00:28:56.960 --> 00:28:57.450
member or a struct member,
$parent, if you're viewing a class

00:28:57.580 --> 00:29:00.890
member or a struct member,
that $parent is its owner.

00:29:00.960 --> 00:29:03.040
So if you're drilling
down inside something,

00:29:03.140 --> 00:29:06.960
but you need reference to a sibling,
for example,

00:29:06.960 --> 00:29:09.960
you can do that by $parent and
then referring off the sibling,

00:29:09.960 --> 00:29:12.930
or you can get at information
in the parent itself.

00:29:12.970 --> 00:29:14.840
That's very useful.

00:29:14.960 --> 00:29:17.960
The third thing that you
can -- are you ready?

00:29:18.230 --> 00:29:18.960
Sort of.

00:29:18.960 --> 00:29:19.950
Okay.

00:29:20.010 --> 00:29:24.130
If we can go back to Chris's machine,
we'll show --

00:29:26.160 --> 00:29:29.350
Okay, so I still haven't been able to get
the custom data formatters to work,

00:29:29.350 --> 00:29:31.240
but what I will show
you is the third thing,

00:29:31.240 --> 00:29:33.430
which is stepping through template code.

00:29:33.440 --> 00:29:35.780
So we're stopped here
in our own function,

00:29:35.780 --> 00:29:38.900
and you'll notice that we
were called from four each.

00:29:38.900 --> 00:29:39.520
Oh!

00:29:39.520 --> 00:29:42.070
So... Wait, wait, wait, Chris.

00:29:42.080 --> 00:29:42.900
What?

00:29:42.930 --> 00:29:43.210
I've got it.

00:29:43.320 --> 00:29:44.000
You do?

00:29:46.080 --> 00:29:50.660
Remove the custom data formatter I threw
in right before the demo from the custom

00:29:50.660 --> 00:29:52.460
data formatters folder and try again.

00:29:52.500 --> 00:29:55.000
You bastard.

00:30:00.310 --> 00:30:04.800
Really folks, I was trying to improve the
quality of experience of the demo.

00:30:04.800 --> 00:30:06.400
Oh, okay, where is it?

00:30:06.530 --> 00:30:09.720
We'll show you how to install
custom data formatters.

00:30:09.870 --> 00:30:11.970
Library folder.

00:30:12.440 --> 00:30:18.340
Application Support, Apple,
Developer Tools, Custom Data Views,

00:30:18.360 --> 00:30:22.520
C-List Plugin.Bundle, yeah,
just drag those to the trash.

00:30:22.520 --> 00:30:28.720
Quit and reopen Xcode and try again.

00:30:33.340 --> 00:30:36.190
I was up here until five minutes
before the presentation started

00:30:36.190 --> 00:30:39.460
trying to debug something that
many of you requested yesterday.

00:30:39.460 --> 00:30:40.090
I want to show you.

00:30:40.130 --> 00:30:42.610
I'll show you the source code,
but I'm not going to show you it

00:30:42.610 --> 00:30:45.450
working because it crashes Xcode.

00:30:45.930 --> 00:30:47.660
Okay, so let's try this again.

00:30:47.720 --> 00:30:48.900
So we stopped in transform.

00:30:48.900 --> 00:30:52.040
We want to see the actual
value of this string.

00:30:52.120 --> 00:30:54.900
So let's see if this works this time.

00:30:54.970 --> 00:30:59.900
var.cstr, function call.

00:30:59.900 --> 00:31:01.320
Aha, now it works.

00:31:05.460 --> 00:31:08.560
Mayor Cooper, Mayor Maxima Cooper.

00:31:08.630 --> 00:31:10.160
Okay.

00:31:10.230 --> 00:31:12.000
So that's all fun.

00:31:12.000 --> 00:31:14.730
So now, like I said,
we were actually called from 4Each,

00:31:14.730 --> 00:31:17.240
so we'd like to see what's
going on up one level.

00:31:17.240 --> 00:31:20.400
So let's remove this breakpoint
so we don't keep hitting it.

00:31:20.460 --> 00:31:24.030
And if we just step out, ooh,
template function.

00:31:24.040 --> 00:31:26.830
And we can just--

00:31:27.080 --> 00:31:28.120
Step through this.

00:31:28.160 --> 00:31:30.510
Now, again,
we've got sort of a similar problem here,

00:31:30.600 --> 00:31:32.380
except this one is even more complicated.

00:31:32.380 --> 00:31:35.380
I'd like to see the thing
that first points to.

00:31:35.380 --> 00:31:38.800
This is an iterator, and again,
this is another obscure structure

00:31:38.830 --> 00:31:42.320
that has all sorts of weird bits
that I really don't understand.

00:31:42.320 --> 00:31:48.920
But custom data formatters
can deal with these too,

00:31:48.920 --> 00:31:53.420
even though it's a template type.

00:31:53.420 --> 00:31:55.370
So let's see.

00:31:55.370 --> 00:31:56.690
Starvar.

00:32:02.860 --> 00:32:04.600
And there it is.

00:32:04.680 --> 00:32:09.180
So we can see this changing and getting
uppercased as we step through the loop.

00:32:09.240 --> 00:32:15.020
Thank you.

00:32:21.750 --> 00:32:27.540
Okay, back to the slides please.

00:32:27.650 --> 00:32:30.470
So we've shown you the two kinds
of custom data view formulas.

00:32:30.490 --> 00:32:33.740
First, the simple member access,
and then second, the function call.

00:32:33.850 --> 00:32:35.660
And the function calls are very powerful.

00:32:35.660 --> 00:32:37.490
They can work within your application.

00:32:37.620 --> 00:32:39.110
They can work on template types.

00:32:39.210 --> 00:32:41.450
They can work on C++ classes.

00:32:41.570 --> 00:32:43.650
They're really powerful.

00:32:43.900 --> 00:32:45.950
But there's one more thing
that's even more powerful,

00:32:45.990 --> 00:32:50.770
so powerful that it'll bring
down Xcode if you do it wrong.

00:32:51.200 --> 00:37:04.500
[Transcript missing]

00:37:05.200 --> 00:37:06.860
So here's a simple example of one.

00:37:06.860 --> 00:37:11.680
This is the custom data viewer for--
this is the actual code of the data

00:37:11.680 --> 00:37:16.100
viewer for a Carbon handle inside
the Carbon data viewer's package.

00:37:16.100 --> 00:37:17.700
There are really two parts to this.

00:37:17.750 --> 00:37:21.170
One is the plist entry,
and the other is the library code.

00:37:21.280 --> 00:37:22.740
And in the top is the plist entry.

00:37:22.740 --> 00:37:27.520
All you see-- it's basically the
invocation of the library code,

00:37:27.640 --> 00:37:30.760
the bundle code,
with the variable and the ID.

00:37:31.060 --> 00:37:32.510
And that's all.

00:37:32.580 --> 00:37:33.980
Very straightforward.

00:37:34.170 --> 00:37:37.130
And then the library code--
the first two lines are to

00:37:37.130 --> 00:37:40.020
get me access to my callbacks.

00:37:40.370 --> 00:37:45.410
There's a special variable called
PBXGDBPluginFunctions that when

00:37:45.420 --> 00:37:51.770
Xcode debugger loads my plugin,
it plugs in a pointer to an array of

00:37:51.780 --> 00:37:56.100
callback functions into that static.

00:37:56.120 --> 00:37:59.090
And then I jump through that in
order to get to my callbacks.

00:37:59.100 --> 00:38:03.100
And then you see my function,
the data viewer's Carbon handle,

00:38:03.380 --> 00:38:06.080
expects to get a handle and the ID.

00:38:06.100 --> 00:38:08.310
It checks to see whether
the handle's valid,

00:38:08.420 --> 00:38:13.100
because I don't want to do anything like
jumping through zero if I don't have to.

00:38:13.450 --> 00:38:19.430
And if it is,
then I essentially Sprintf through

00:38:19.600 --> 00:38:23.100
this function to print the size of
the handle by calling getHandleSize,

00:38:23.100 --> 00:38:24.960
which is usually pretty safe.

00:38:25.300 --> 00:38:30.100
Then I check the Hget state and
mask it against the lock bit,

00:38:30.100 --> 00:38:34.100
and depending upon the state of that,
I Sprintf lock or unlock.

00:38:34.210 --> 00:38:40.100
So this way, whenever I see a handle in
my debugger data viewer,

00:38:40.100 --> 00:38:44.040
I get its size and its state of
whether it's locked or unlocked.

00:38:44.100 --> 00:38:48.010
And if it's null or
the handle is invalid,

00:38:48.170 --> 00:38:50.090
then I get invalid.

00:38:50.230 --> 00:38:52.100
So this is a very simple data viewer.

00:38:52.310 --> 00:38:56.100
And we have built in a lot of
these for the foundation classes,

00:38:56.230 --> 00:38:59.100
and we have built in a lot
of these for Carbon classes.

00:38:59.100 --> 00:39:01.100
And if Chris is willing to come up again,

00:39:03.660 --> 00:39:05.520
Then he's going to
show you some of these,

00:39:05.520 --> 00:39:09.080
again in Appearance Sample,
which has a little more

00:39:09.080 --> 00:39:11.140
support for these things.

00:39:11.140 --> 00:39:15.820
So we're going to bring up
Appearance Sample in the debugger.

00:39:23.300 --> 00:39:26.240
and he's going to set a breakpoint
and I think that we figured

00:39:26.240 --> 00:39:31.900
out proxy-dialog.cp line 106?

00:39:35.400 --> 00:39:39.700
and I think we're getting... - Continue,
that's the assert.

00:39:39.700 --> 00:39:41.030
- Okay.

00:39:41.850 --> 00:39:44.540
That's the assert we
introduced in the first step.

00:39:44.560 --> 00:39:46.910
Just keep continuing.

00:39:50.470 --> 00:39:55.720
If you are bugged by asserts,
stop it and I'll show

00:39:55.720 --> 00:39:56.470
you how to turn this off.

00:39:56.870 --> 00:39:58.840
You have this turned on.

00:39:59.760 --> 00:40:00.540
So, stop?

00:40:00.760 --> 00:40:01.500
Right.

00:40:01.820 --> 00:40:06.300
Project-- no, go to Executables,
turn down Executables, Appearance Sample,

00:40:06.300 --> 00:40:09.650
double-click, scroll down-- yeah.

00:40:09.730 --> 00:40:10.700
No, double-click.

00:40:10.750 --> 00:40:12.440
You were there.

00:40:12.630 --> 00:40:14.290
Scroll down.

00:40:15.160 --> 00:40:17.450
Break on calls to debugger debugster.

00:40:17.460 --> 00:40:19.640
Uncheck that box.

00:40:19.720 --> 00:40:25.780
And that makes your certs
not break in the debugger.

00:40:25.840 --> 00:40:29.940
We gave them something additional,
unplanned.

00:40:33.050 --> 00:40:35.030
There you go.

00:40:35.200 --> 00:40:39.390
OK, so go find proxydialog.cp.

00:40:45.500 --> 00:40:47.700
And go to line 106.

00:40:47.700 --> 00:40:52.340
It should be a command
key to go to a line.

00:40:54.500 --> 00:40:57.040
which is invalid now for some reason.

00:40:57.120 --> 00:40:58.500
Yeah, I used to know what it was.

00:40:58.590 --> 00:41:00.880
Well, it says it's Command-L,
but it doesn't let you do it

00:41:00.900 --> 00:41:03.230
right now for some reason.

00:41:04.030 --> 00:41:05.260
Yes, now it does.

00:41:05.260 --> 00:41:05.800
Focusing problem.

00:41:05.800 --> 00:41:07.800
106.

00:41:07.800 --> 00:41:09.410
And hey, we've got a breakpoint there.

00:41:09.540 --> 00:41:12.400
Great, that's all we need.

00:41:12.560 --> 00:41:15.860
So then go back to the application.

00:41:17.860 --> 00:41:25.840
And we're going to pull up Window Proxy
and click the Add Proxy FS spec.

00:41:25.910 --> 00:41:29.830
And pick a file, any file,
don't tell me what it is.

00:41:32.170 --> 00:41:33.790
That's fine.

00:41:33.840 --> 00:41:34.100
That's.

00:41:34.200 --> 00:41:36.550
And we should hit our
breakpoint in the debugger.

00:41:36.620 --> 00:41:37.600
There we go.

00:41:37.640 --> 00:41:40.110
Now, notice a couple of things.

00:41:40.290 --> 00:41:44.550
FS, the file spec variable,
the summary is the name of the file.

00:41:44.710 --> 00:41:45.710
That's very useful.

00:41:45.760 --> 00:41:48.820
Turn down the file spec and see
what you could see otherwise.

00:41:48.870 --> 00:41:50.810
Well there's the V refnum
and the parent ID.

00:41:50.810 --> 00:41:51.530
Those are nice.

00:41:51.760 --> 00:41:55.520
But the name, it's a str_255.

00:41:55.870 --> 00:42:00.120
Or it's a str_64 which is not a str_255,
which we haven't wired up.

00:42:00.540 --> 00:42:04.020
But just turning it up and seeing
just the name and the file spec,

00:42:04.130 --> 00:42:05.220
that's very nice.

00:42:05.370 --> 00:42:07.440
See also, err is no error.

00:42:07.840 --> 00:42:12.860
Just change that to
like -39 or something.

00:42:12.940 --> 00:42:14.500
And now it says EOF error.

00:42:14.600 --> 00:42:17.280
So it'll show you what your errors are.

00:42:18.550 --> 00:42:21.870
Like I said,
it knows all 1,900 errors that

00:42:21.870 --> 00:42:24.310
are in the Carbon headers,
and that's through a

00:42:24.310 --> 00:42:26.400
1,900-case switch statement.

00:42:26.400 --> 00:42:30.550
But the next thing, though,
you know that Nav Services returns

00:42:30.550 --> 00:42:32.490
your file spec in an AE desk.

00:42:32.540 --> 00:42:33.900
Well, isn't this interesting?

00:42:33.900 --> 00:42:36.620
Look at the file spec desk,
and it says it's a type FSS.

00:42:36.620 --> 00:42:37.720
Okay?

00:42:37.720 --> 00:42:40.380
So it tells me what type the
desk is right at the top.

00:42:40.440 --> 00:42:44.650
Now, if I turn it down,
it'll show me that it's a type FSS,

00:42:44.650 --> 00:42:47.150
and that's the contents of it.

00:42:48.550 --> 00:42:50.050
Yeah.

00:42:51.330 --> 00:42:57.100
When you turn down AEDesk,
it goes and gets the data out of the

00:42:57.100 --> 00:43:00.480
AEDesk and then displays it in that line,
but it only does that

00:43:00.590 --> 00:43:03.380
when you turn it down,
so it's not expensive unless you

00:43:03.380 --> 00:43:05.180
really want to see the contents.

00:43:05.210 --> 00:43:08.770
And it does this with the $parent
variable I told you about earlier.

00:43:08.770 --> 00:43:12.580
It goes back to its parent
to get its descriptor type,

00:43:12.830 --> 00:43:16.990
which is not an OS type, it's an int,
unfortunately, so it doesn't show up as

00:43:16.990 --> 00:43:18.660
a four-character code.

00:43:19.520 --> 00:43:21.850
But you also see unused
keyword down at the bottom,

00:43:21.850 --> 00:43:23.530
if you could select that, Chris.

00:43:23.530 --> 00:43:26.380
That's an OS type,
and instead of showing up as a

00:43:26.380 --> 00:43:29.240
long decimal or a hex number,
it shows up as four characters

00:43:29.240 --> 00:43:30.360
in the variable view.

00:43:30.360 --> 00:43:34.460
That's something we've put for
Carbon debugging in Xcode for you.

00:43:34.480 --> 00:43:35.660
Okay?

00:43:35.660 --> 00:43:38.030
So that's custom data viewers.

00:43:38.060 --> 00:43:42.210
If we have a little time at the end,
I'll show you how to construct a data

00:43:42.210 --> 00:43:45.820
viewer bundle that crashes Xcode,
because that's what I've

00:43:45.820 --> 00:43:47.630
got to show you right now.

00:43:47.740 --> 00:43:52.370
And we're working on some better
samples for this to post on the web.

00:43:52.380 --> 00:43:56.290
But what we've implemented
in the Carbon data viewers

00:43:56.290 --> 00:44:00.130
is all of the file types,
alias, FS spec, FS ref.

00:44:00.200 --> 00:44:02.690
We've implemented the AEDesk types.

00:44:02.840 --> 00:44:08.880
We've implemented inspectors for all
of the opaque HI toolbox references.

00:44:08.880 --> 00:44:11.440
Window shows you its name and position.

00:44:11.440 --> 00:44:13.460
Menu shows you its title.

00:44:13.460 --> 00:44:17.400
HI object shows you what
kind of HI object it is.

00:44:17.440 --> 00:44:17.700
And then we've implemented
the file types.

00:44:17.720 --> 00:44:18.300
We've implemented the identifier.

00:44:18.310 --> 00:44:23.530
We've implemented basic supports
for the Carbon events that shows you

00:44:23.530 --> 00:44:25.280
the event class and the event name.

00:44:25.280 --> 00:44:29.020
For Apple events, the same thing,
the event class and the event name,

00:44:29.020 --> 00:44:31.900
if it's a known Apple event
and the four character code,

00:44:31.930 --> 00:44:32.660
if it's not.

00:44:32.720 --> 00:44:36.220
And just a whole bunch of things.

00:44:36.270 --> 00:44:41.200
All the date time things show up as date
times instead of 64-bit decimal numbers.

00:44:41.200 --> 00:44:44.270
So I think you'll find when
you're debugging in Xcode,

00:44:44.270 --> 00:44:47.600
your familiar Carbon data
types show up as the values.

00:44:47.910 --> 00:44:51.780
You think of them as rather than the
value that GDB thinks of them as.

00:44:51.780 --> 00:44:53.450
And I think you'll find
that that's very powerful.

00:44:53.460 --> 00:44:55.180
Okay, back to the slides, please.

00:45:03.480 --> 00:45:07.130
Now I spoke a little about Carbon events
and a little bit about Apple events.

00:45:07.170 --> 00:45:10.180
Now Carbon events and
Apple events are large things.

00:45:10.290 --> 00:45:15.080
They're large and they're complex,
and we couldn't fit them into single

00:45:15.080 --> 00:45:17.400
lines in the debugger display.

00:45:17.400 --> 00:45:21.530
There are some things that you can do
when debugging a Carbon application

00:45:21.590 --> 00:45:25.400
to see what's happening with your
Carbon events and with your Apple events,

00:45:25.400 --> 00:45:29.400
other than just to see the class
and the particular event type.

00:45:29.400 --> 00:45:33.740
Right now, they're accessible only via
the GDB-style interface because

00:45:33.740 --> 00:45:35.400
they stream a lot of text.

00:45:35.400 --> 00:45:39.520
We're going to try to find a way to
integrate that experience better,

00:45:39.520 --> 00:45:43.160
to do a little better logging of it,
but for now I want to give you

00:45:43.160 --> 00:45:45.400
some pointers on how to do this.

00:45:45.400 --> 00:45:50.140
There's a function for Carbon events
called setEventTraceEnabled.

00:45:50.650 --> 00:45:54.080
That is, once again,
it's one of these GDB calls

00:45:54.080 --> 00:45:58.330
from the GDB command line
into the Carbon framework.

00:45:58.450 --> 00:46:03.400
And that gives you exhaustive information
on what Carbon events are happening.

00:46:03.400 --> 00:46:06.400
There's some similar
things that you can do.

00:46:06.400 --> 00:46:11.390
There's environment variables you can set
to turn on and off Apple event debugging,

00:46:11.400 --> 00:46:12.400
and we'll show those too.

00:46:12.400 --> 00:46:15.350
Those are done with environment
variables rather than with the call.

00:46:15.440 --> 00:46:18.950
And the output of both of these
goes to the standard I/O window,

00:46:18.950 --> 00:46:23.460
which is available in the console
drawer and also available,

00:46:23.460 --> 00:46:25.760
highly recommended you do this,
as a separate window in

00:46:25.760 --> 00:46:27.380
the Xcode environment.

00:46:27.400 --> 00:46:30.800
As I said, for Apple events,
there are two environment

00:46:30.820 --> 00:46:32.370
variables you can set.

00:46:32.510 --> 00:46:37.370
AEDebugSends will print out
any event that you send,

00:46:37.500 --> 00:46:42.400
and AEDebugReceives will print out any
event that your application receives.

00:46:42.400 --> 00:46:46.370
There are also some functions
you can call from GDB.

00:46:46.410 --> 00:46:49.970
If you want to see a full AEDesk
rather than just the summary,

00:46:49.970 --> 00:46:52.390
if it happens to be a
custom one of yours,

00:46:52.400 --> 00:46:56.400
GDB.printAEDesk will print that desk.

00:46:56.410 --> 00:47:01.620
And if you want to know more about this,
we've even put in a function called

00:47:01.620 --> 00:47:05.910
GDB.printHelpDebuggingAppleEvents,
which spools some help

00:47:05.910 --> 00:47:07.250
text to standard out.

00:47:07.600 --> 00:47:11.400
And then you can read that and
follow the instructions in it.

00:47:11.540 --> 00:47:13.400
So let's show you those.

00:47:18.230 --> 00:47:20.040
Are we still in Appearance Sample?

00:47:20.070 --> 00:47:20.340
Yep.

00:47:20.350 --> 00:47:21.920
We should remove those breakpoints.

00:47:21.920 --> 00:47:22.540
Already done.

00:47:22.590 --> 00:47:23.690
Great.

00:47:23.900 --> 00:47:28.080
And have you set up the
AEDebugReceives environment variable?

00:47:28.150 --> 00:47:28.710
Partly.

00:47:29.040 --> 00:47:30.670
There it is.

00:47:30.800 --> 00:47:34.060
An environment variable you can
either set up in the shell before

00:47:34.060 --> 00:47:39.310
you launch your application in GDB,
or you can set it here in the Xcode API.

00:47:39.500 --> 00:47:43.210
Just create it, check the box,
set the value, and then when your

00:47:43.300 --> 00:47:46.960
application is launched,
the shell that launches that application

00:47:46.980 --> 00:47:48.440
has that environment variable set.

00:47:48.580 --> 00:47:50.200
That makes it very convenient.

00:47:50.270 --> 00:47:52.080
So we're going to run
this application again,

00:47:52.080 --> 00:47:55.410
and the first thing we're going to
do is to throw an Apple event at it.

00:47:55.430 --> 00:47:58.780
And my favorite way to throw
Apple events at an application

00:47:58.780 --> 00:48:00.810
is by using AppleScript.

00:48:00.830 --> 00:48:04.320
I'm going to show the run log first,
so we get to see when it shows up.

00:48:04.380 --> 00:48:06.760
Clean, pristine, empty run log.

00:48:06.840 --> 00:48:08.860
Now Chris has written a
simple AppleScript here.

00:48:09.000 --> 00:48:12.580
I'm sure you had to hit the
books to learn how to do this.

00:48:12.600 --> 00:48:15.850
And he's going to run the script,
and he's going to send--

00:48:23.030 --> 00:48:24.060
Hmm.

00:48:24.210 --> 00:48:27.520
That's the error we expected,
but we're not-- The error is expected.

00:48:27.520 --> 00:48:29.550
The absence of the run log is not.

00:48:29.560 --> 00:48:30.370
Is not.

00:48:30.560 --> 00:48:37.020
No, not underscore.

00:48:37.050 --> 00:48:38.870
I did turn this on.

00:48:45.400 --> 00:48:47.400
"Did you have any problems running
against the debug version?"

00:48:47.400 --> 00:48:55.690
"We didn't in rehearsal."

00:49:04.500 --> 00:49:06.500
We'll try that suggestion.

00:49:06.500 --> 00:49:08.500
Fine, we'll show you the Carbon spew.

00:49:08.500 --> 00:49:22.610
Or that... He's going to turn on a debug,
just to make sure.

00:49:34.920 --> 00:49:38.740
Send the Apple event.

00:49:38.750 --> 00:49:39.790
And still no joy.

00:49:39.790 --> 00:49:44.360
I can't tell you what I broke this time,
but it's obviously not your fault.

00:49:44.460 --> 00:49:46.200
It worked in rehearsal.

00:49:46.210 --> 00:49:47.800
It worked in rehearsal.

00:49:47.890 --> 00:49:48.800
All right.

00:49:49.060 --> 00:49:49.800
Okay.

00:49:54.000 --> 00:49:54.840
There it is.

00:49:54.840 --> 00:49:55.000
Is that?

00:49:55.270 --> 00:49:56.040
Oh.

00:49:56.040 --> 00:49:56.950
No, it's there.

00:49:57.040 --> 00:49:58.500
It's just not in the run log.

00:49:58.500 --> 00:49:59.500
Oh.

00:49:59.500 --> 00:50:00.500
Oh, it's not in the run log.

00:50:00.610 --> 00:50:01.990
Chris, it's in standard I/O.

00:50:02.130 --> 00:50:04.680
Show STD I/O.

00:50:05.250 --> 00:50:06.200
There it is.

00:50:06.200 --> 00:50:07.200
Oh, okay.

00:50:07.200 --> 00:50:07.200
My mistake.

00:50:07.200 --> 00:50:09.200
We were looking in the wrong place.

00:50:09.200 --> 00:50:11.240
It was there all the time.

00:50:11.240 --> 00:50:16.400
So here are all the multiple events that
Chris was sending to the application.

00:50:16.400 --> 00:50:20.270
And when he turned on AE debugging,
it gives you even more information

00:50:20.470 --> 00:50:24.640
for what handlers it's looking for,
what tables it's looking

00:50:24.640 --> 00:50:27.890
for the handlers in,
and what order it's looking for them in.

00:50:28.020 --> 00:50:31.930
So if your Apple event handlers
are firing in an unexpected order,

00:50:31.970 --> 00:50:35.050
or the wrong ones are firing,
turn on AE debug 1 in your

00:50:35.250 --> 00:50:37.900
environment variables,
and this information is

00:50:37.910 --> 00:50:39.170
logged to the output.

00:50:39.340 --> 00:50:42.660
This is very useful if you've got a
scriptable application in figuring out

00:50:42.980 --> 00:50:47.340
what Apple script sends you or what other
applications send you in terms of events.

00:50:47.410 --> 00:50:50.530
And once again,
it comes up in the standard I/O log,

00:50:50.670 --> 00:50:53.410
just like it says on
our sheet right here,

00:50:53.480 --> 00:50:55.110
not in the run log.

00:50:56.830 --> 00:51:00.780
Another thing that comes up in the
standard I/O log is the Carbon debugging,

00:51:00.840 --> 00:51:03.020
Carbon Events debugging spew.

00:51:03.160 --> 00:51:06.670
So what Chris is doing now in
the little GDB terminal window is

00:51:06.670 --> 00:51:12.630
he's calling setEventTraceEnabled

00:51:13.190 --> 00:51:16.350
It's just parin parin, but I guess... No,
it's not.

00:51:16.450 --> 00:51:16.840
It's not?

00:51:16.990 --> 00:51:18.140
You tested it?

00:51:18.230 --> 00:51:18.550
Okay.

00:51:18.780 --> 00:51:19.530
We'll talk about that later.

00:51:19.540 --> 00:51:22.000
So now that he's set the
event tracing enabled,

00:51:22.000 --> 00:51:24.740
when we go back to the application,

00:51:26.800 --> 00:51:30.680
and start doing things that
cause Carbon events to get sent.

00:51:30.690 --> 00:51:35.510
We see a large amount of diagnostic
information about what Carbon events

00:51:35.570 --> 00:51:40.290
are being sent to whom and when,
with what arguments, who's handling them,

00:51:40.310 --> 00:51:42.070
and what happens as a result of it.

00:51:42.120 --> 00:51:46.520
Sending event, called handler,
event was handled, leaving target,

00:51:46.710 --> 00:51:49.460
send event to event target entered.

00:51:49.460 --> 00:51:52.800
It is more information
than you probably need.

00:51:53.030 --> 00:51:56.730
But if you are trying to
debug your Carbon events,

00:51:57.160 --> 00:52:01.890
this is the first tool to use because
it shows you explicitly step-by-step

00:52:02.420 --> 00:52:05.390
everything that is happening.

00:52:09.240 --> 00:52:10.160
Okay.

00:52:10.160 --> 00:52:14.200
And I think that that's
all for the demos.

00:52:16.900 --> 00:53:53.900
[Transcript missing]

00:53:54.280 --> 00:53:57.270
But I hear you say,
but I like CodeWarrior IDE debugging.

00:53:57.280 --> 00:54:01.600
Well, this is a lot more valid,
because CodeWarrior IDE has

00:54:01.600 --> 00:54:04.930
a lot more windows that do
useful and interesting things.

00:54:05.360 --> 00:54:08.020
Interestingly enough,
when you're debugging

00:54:08.350 --> 00:54:11.940
Mac OS with CodeWarrior,
it's using GDB for a lot of the

00:54:11.940 --> 00:54:15.580
underlying machinery to step
and to control the execution

00:54:15.580 --> 00:54:20.560
flow of the application,
though it's using its own functions to

00:54:20.560 --> 00:54:25.940
get the symbolics information and to
display the variables and stack traces.

00:54:25.980 --> 00:54:30.870
These debugging entry points are
available from CodeWarrior expressions,

00:54:30.870 --> 00:54:31.400
too.

00:54:31.400 --> 00:54:34.570
So all the things that we've showed
you from the GDB command line,

00:54:34.920 --> 00:54:38.430
those are available from the
CodeWarrior IDE debugger as well,

00:54:38.520 --> 00:54:40.660
if you happen to be using that.

00:54:41.970 --> 00:54:44.730
And if you like Zone Ranger for
Memory Diagnostics tool,

00:54:44.740 --> 00:54:47.200
well, you know,
Zone Ranger really is great

00:54:47.350 --> 00:54:50.560
for debugging heap zones,
and heap zones are just not that

00:54:50.560 --> 00:54:52.480
relevant in Mac OS X anymore.

00:54:52.480 --> 00:54:58.580
In order to really understand what's
going on in Mac OS X memory management,

00:54:58.580 --> 00:55:01.770
it's less of a static looking at
what's happening in my heap zone,

00:55:01.830 --> 00:55:05.700
and more of a dynamic looking
at who's calling Malik and when,

00:55:05.700 --> 00:55:08.010
and are these things
getting released in time,

00:55:08.010 --> 00:55:09.840
and by whom, and on what threads.

00:55:10.460 --> 00:55:15.480
And some of the Mac OS tools like
Malik Debug and like Sampler's

00:55:15.480 --> 00:55:18.640
Memory Allocation Viewer,
those are much,

00:55:18.640 --> 00:55:22.810
much more relevant to debugging
Mac OS X memory problems than

00:55:22.810 --> 00:55:28.830
static views of your heap like
Zone Ranger and Is My Heap Fragmented

00:55:28.850 --> 00:55:31.660
or Has My Heap Been Stepped On are.

00:55:33.610 --> 00:55:37.190
Memory diagnostics with Carbon, you know,
new pointer and new handle

00:55:37.190 --> 00:55:38.960
just get down and call malloc.

00:55:39.090 --> 00:55:41.490
So if you debug with malloc,
you're debugging new

00:55:41.490 --> 00:55:42.500
pointer and new handle.

00:55:42.500 --> 00:55:44.710
That's really the important
thing to remember.

00:55:44.710 --> 00:55:47.340
Your handles are just
not going to move around,

00:55:47.360 --> 00:55:50.840
so this whole class of problems
that you used to do on Mac OS 9,

00:55:50.840 --> 00:55:53.390
they just don't exist anymore on 10.

00:55:54.410 --> 00:55:59.000
Your low-level memory handling code is
not going to be called because until

00:55:59.000 --> 00:56:04.850
you hit that 4-gig barrier and on a G5,
not even then, you're not going to be

00:56:04.850 --> 00:56:06.300
asked to compact your heap.

00:56:06.360 --> 00:56:07.950
It's just not going to happen.

00:56:07.960 --> 00:56:11.500
Your big problem will be leaks,
scribbling on your own allocations,

00:56:11.500 --> 00:56:13.890
you know,
getting a wrong pointer somewhere,

00:56:14.060 --> 00:56:16.570
and trying to use something
after you've freed it.

00:56:16.700 --> 00:56:19.680
And those are things that the
malloc debug tools and the sampler

00:56:19.680 --> 00:56:21.400
tools are really good at doing.

00:56:23.830 --> 00:56:24.920
So let's summarize.

00:56:25.030 --> 00:56:27.500
We've gone through a lot of
stuff on Carbon debugging.

00:56:27.500 --> 00:56:32.770
You've seen the C++ exception handling,
the throw and break on

00:56:32.770 --> 00:56:34.960
throw and break on catch.

00:56:35.080 --> 00:56:39.420
You've seen stepping through templates
and using custom data views in order

00:56:39.480 --> 00:56:42.960
to see the contents of templates,
which is very useful.

00:56:42.960 --> 00:56:46.890
You've seen some built-in
Carbon and foundation data viewers

00:56:46.890 --> 00:56:50.860
that show you your Carbon data
types in a very familiar way.

00:56:51.160 --> 00:56:55.980
You've seen how to build your own either
with a simple member access or with a

00:56:56.030 --> 00:57:01.080
complex expression or even with a bundle
of code that you write yourself and drop

00:57:01.080 --> 00:57:03.060
in to do your own custom data viewers.

00:57:03.060 --> 00:57:06.220
We hope that you'll be able
to use some of these tools in

00:57:06.220 --> 00:57:08.750
debugging your Carbon applications.

00:57:08.780 --> 00:57:12.860
We will be down in the Van Ness room
to help you get up on Xcode and get

00:57:12.860 --> 00:57:17.620
your projects on Xcode so you can
take advantage of some of these tools.

00:57:17.620 --> 00:57:19.240
We'll be there for the rest of the day.

00:57:19.240 --> 00:57:21.130
And we're going to bring.

00:57:21.160 --> 00:57:22.290
Up God for did you go.

00:57:22.340 --> 00:57:26.020
We've got actually a lot more to
talk about before I call up God free

00:57:26.020 --> 00:57:30.180
because I've got 18 minutes and
I'm not going to let you be bored.

00:57:31.930 --> 00:57:35.760
We've got a lot in Xcode right
now in the developer release.

00:57:35.870 --> 00:57:39.190
In the 1.0, the features you've seen
are going to be polished,

00:57:39.360 --> 00:57:41.420
and they're not going to crash,
and they're going to be

00:57:41.420 --> 00:57:42.210
a little more robust.

00:57:42.380 --> 00:57:43.780
That's what 1.0 is about.

00:57:43.800 --> 00:57:45.360
We know what you need.

00:57:45.510 --> 00:57:49.280
We know you need a more
flexible type-viewing system.

00:57:49.280 --> 00:57:53.910
We get very spoiled by using the
Code Warrior view-anything-as-any-type

00:57:53.910 --> 00:57:57.240
system,
and by the Code Warrior memory viewer.

00:57:58.050 --> 00:57:58.770
That's our aim.

00:57:58.770 --> 00:57:59.980
We're working on it.

00:57:59.980 --> 00:58:01.970
It won't be in the 1.0,
but it should be in the

00:58:01.970 --> 00:58:03.230
next release after that.

00:58:03.350 --> 00:58:04.660
That's certainly on our list.

00:58:05.170 --> 00:58:08.490
Getting these tracing tools to
debug more voluminous things,

00:58:08.490 --> 00:58:12.900
getting them built into the IDE so you
don't have to spool them out to another

00:58:13.030 --> 00:58:17.070
text window and then scroll through it,
that's another priority.

00:58:17.080 --> 00:58:20.620
We're going to work on that to find
a better integration of those tools.

00:58:20.620 --> 00:58:24.500
Of course,
we can never step or view too quickly.

00:58:24.500 --> 00:58:27.860
We've got the problem now
of the more data you want.

00:58:27.860 --> 00:58:31.230
You want to see the slower you step,
and so there's a tipping point

00:58:31.230 --> 00:58:34.120
there between fidelity of
data and speed of stepping.

00:58:34.280 --> 00:58:37.500
One of the things you can do is you
can turn off custom data views while

00:58:37.500 --> 00:58:40.940
you're stepping and then turn it on
again in order to look at the values.

00:58:41.100 --> 00:58:43.380
That, we've found,
is a useful compromise.

00:58:43.480 --> 00:58:45.320
And then watchpoints and event points.

00:58:45.370 --> 00:58:47.160
We know those are very important to you.

00:58:47.280 --> 00:58:48.650
We're working on those.

00:58:48.650 --> 00:58:51.380
You can do those at the
low-level GDB command line.

00:58:51.650 --> 00:58:55.950
We're working on bringing them
up into the IDE interface.

00:58:56.200 --> 01:00:34.700
[Transcript missing]

01:00:35.090 --> 01:00:36.700
The Reference Library.

01:00:36.720 --> 01:00:40.630
Go to the CD set and see the
presentation from last night on basic

01:00:40.720 --> 01:00:46.500
debugging to go deep into the generic
debugging capabilities of GDB.

01:00:46.680 --> 01:00:51.060
Go to the Debugger Services reference
in the Carbon Performance Directory.

01:00:51.160 --> 01:00:55.260
There's a lot of information
on debugging with GDB,

01:00:55.260 --> 01:00:56.500
GDB internals.

01:00:56.980 --> 01:00:59.780
The GDB release notes
are always very helpful.

01:00:59.780 --> 01:01:02.870
Quinn's tech note is very helpful.

01:01:03.200 --> 01:01:05.880
And here's the Carbon Tips and
Tricks document.

01:01:05.990 --> 01:01:12.800
It's at
developer.apple.com/carbon/tipsandtricks.

01:01:12.800 --> 01:01:13.400
html.

01:01:13.510 --> 01:01:16.160
It's a very long document
with a lot of things,

01:01:16.160 --> 01:01:19.400
including all of those APIs,
the names we called,

01:01:19.510 --> 01:01:23.090
to print out diagnostics
from the Carbon frameworks.

01:01:23.180 --> 01:01:25.890
It's a very, very useful technical note.

01:01:26.360 --> 01:01:30.540
If you haven't used it before,
the Chud Toolkit is an incredibly useful

01:01:30.550 --> 01:01:34.530
set of tools for doing machine-level,
instruction-level debugging

01:01:34.960 --> 01:01:38.880
of what your performance
profile of your application is.

01:01:38.880 --> 01:01:41.510
There have been a couple
of demos so far this week,

01:01:41.510 --> 01:01:44.270
and you can go back to the
DVD set and watch those.

01:01:44.280 --> 01:01:48.220
Or on your Developer Tools CD,
open up the Chud Tools package

01:01:48.220 --> 01:01:51.280
and install them,
and just see what miracles

01:01:51.280 --> 01:01:53.390
they can show you in your code.