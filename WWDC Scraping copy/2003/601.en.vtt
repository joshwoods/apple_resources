WEBVTT

00:01:28.540 --> 00:01:33.420
Ladies and gentlemen,
please welcome Vice President of

00:01:33.420 --> 00:01:36.690
Development Technologies,
Ted Goldstein.

00:01:42.540 --> 00:01:43.500
Thank you very much.

00:01:43.500 --> 00:01:50.810
I'm going to talk about
Java at Apple today.

00:01:50.810 --> 00:01:50.810
And Java--I'm going to

00:01:50.860 --> 00:01:53.070
is in a class by itself at Apple.

00:01:53.240 --> 00:01:56.340
It is a critical,
critical important technology.

00:01:56.340 --> 00:01:57.800
You'll hear why.

00:01:57.800 --> 00:02:01.370
And I think Apple is a
critically important member

00:02:01.370 --> 00:02:03.730
of the Java family companies.

00:02:03.840 --> 00:02:08.240
And we are extremely well
suited for each other.

00:02:08.240 --> 00:02:12.290
People have heard me
talk about this before,

00:02:12.290 --> 00:02:16.460
know that I think the two
are very well married.

00:02:16.460 --> 00:02:16.460
Besides, I love apples and I love coffee.

00:02:16.800 --> 00:02:20.800
We like to say that Apple loves Java.

00:02:20.800 --> 00:02:21.690
Apple loves Java.

00:02:21.700 --> 00:02:25.560
Great symbology and such.

00:02:25.680 --> 00:02:29.820
Java is Apple's strategic
cross-platform technology.

00:02:29.820 --> 00:02:32.990
For people who need to develop
applications that run on multiple

00:02:33.070 --> 00:02:35.820
platforms--at least one of
two of you do need to run on

00:02:35.820 --> 00:02:39.640
something other than Macintosh--we
think Java is the way to go.

00:02:39.640 --> 00:02:43.860
And Apple has made a tremendous
commitment to Java to make that happen.

00:02:44.020 --> 00:02:48.050
It is a key component of many,
many enterprise solutions,

00:02:48.320 --> 00:02:51.640
including Apple's own
running of its business.

00:02:51.640 --> 00:02:55.800
And we also think that Apple--and
Java is extremely important to

00:02:55.850 --> 00:02:59.790
Apple itself because it has brought
many applications to Mac OS X.

00:02:59.790 --> 00:03:03.910
And that in one swoop,
we were able to bring in and make

00:03:04.190 --> 00:03:08.880
beautiful Acro interfaces for many,
many applications.

00:03:08.910 --> 00:03:12.420
Often with no tuning at all or maybe
with just a little bit of tuning,

00:03:12.590 --> 00:03:15.500
things can become letter
sharp and very perfect.

00:03:15.630 --> 00:03:19.180
And technologies and techniques that
we've done are making that even better.

00:03:19.180 --> 00:03:22.670
And you're going to hear today about
some of the infrastructure we've

00:03:22.780 --> 00:03:29.960
changed and improved to make Java on
Mac OS X the best it can possibly be

00:03:29.970 --> 00:03:34.370
and to be a full first-class citizen
with all--everything else that

00:03:34.370 --> 00:03:36.670
Apple does of Cocoa and Carbon and such.

00:03:38.540 --> 00:03:43.260
But first, let's talk about Java and
where it fits in the landscape.

00:03:43.260 --> 00:03:46.780
So when we think about
programming languages and great

00:03:46.850 --> 00:03:49.260
languages of classic time,
we think about things

00:03:49.260 --> 00:03:50.910
like Fortran and COBOL.

00:03:51.140 --> 00:03:53.100
These are great business
processing languages,

00:03:53.100 --> 00:03:54.420
great scientific languages.

00:03:54.420 --> 00:03:59.760
And, you know,
I want to actually hand it to Microsoft.

00:03:59.760 --> 00:04:02.940
They've made a language that's about
as popular as COBOL and Fortran,

00:04:02.940 --> 00:04:02.940
something called C#.

00:04:03.850 --> 00:04:07.430
I think that's, you know,
very thankful for Microsoft to remind

00:04:07.430 --> 00:04:10.580
us again about the bottom of the scale.

00:04:11.660 --> 00:04:17.350
Basic and Perl far,
far outstrip what's going on at that end,

00:04:17.350 --> 00:04:20.420
and that's because of the accessibility.

00:04:20.420 --> 00:04:23.480
C and C++,
which are the main languages that

00:04:23.480 --> 00:04:27.980
people develop desktop applications in,
dwarfs even those.

00:04:27.980 --> 00:04:29.960
But Java is the monster.

00:04:30.360 --> 00:04:33.730
Java is at 51 percent market share.

00:04:33.830 --> 00:04:38.860
It's going to take a long time for
languages like C# or COBOL to catch up.

00:04:38.950 --> 00:04:40.760
And I think it's critically
important to realize that,

00:04:40.760 --> 00:04:45.250
because while the Microsoft PR machine
is manufacturing information about C#,

00:04:45.670 --> 00:04:47.300
Java is the winner.

00:04:47.390 --> 00:04:52.900
Java is the winner and enjoys
the mind share at universities.

00:04:52.900 --> 00:04:56.290
We hire summer interns at Apple,
and almost unanimously,

00:04:56.290 --> 00:04:58.860
if they've had any
programming classes at all,

00:04:58.870 --> 00:05:00.770
they've had programming classes in Java.

00:05:00.840 --> 00:05:04.290
And they are well-trained,
and it helps us both to mold what

00:05:04.290 --> 00:05:09.680
they do for the technology they
develop at Apple and for the languages

00:05:09.810 --> 00:05:11.760
that we develop applications in.

00:05:11.870 --> 00:05:16.120
So really, we feel very comfortable,
very comfortable with Java as

00:05:16.220 --> 00:05:21.110
a fundamental mainstay of the
Apple development tools story.

00:05:22.540 --> 00:05:25.340
and David Javademand has increased.

00:05:25.370 --> 00:05:28.080
There are now 3 million
Java programmers out there.

00:05:28.080 --> 00:05:31.070
Over half of the world's
PCs have Java natively installed.

00:05:31.070 --> 00:05:38.520
HP and Dell have recently signed--they
have copied Apple and are now

00:05:38.520 --> 00:05:43.230
shipping Java as part of the platform
and are shipping Sun's latest

00:05:43.230 --> 00:05:46.100
version of Java that we are shipping.

00:05:46.100 --> 00:05:49.480
And one of the nice things that
I'm happy to say is that Sun has

00:05:49.480 --> 00:05:52.160
recommitted itself to desktop Java.

00:05:52.160 --> 00:05:55.480
For many years,
you saw them putting their attention

00:05:55.480 --> 00:05:59.440
on either end--on the enterprise
side and on the micro-Java,

00:05:59.440 --> 00:06:03.590
J2ME, Java in the phones and smart cards,
which I'm very happy about.

00:06:03.800 --> 00:06:06.720
But, you know, somehow there seemed to be
something missing from the

00:06:06.720 --> 00:06:08.240
middle on the desktop platform.

00:06:08.430 --> 00:06:10.680
And I'm very glad to see
it this year's Java 1.

00:06:10.680 --> 00:06:14.630
We saw a tremendous burst of enthusiasm,
of renewed energy,

00:06:14.630 --> 00:06:16.690
of revising JSRs and such.

00:06:16.790 --> 00:06:19.990
And I think that this
is extremely important.

00:06:20.140 --> 00:06:23.070
All these factors together
show that Java has legs.

00:06:23.080 --> 00:06:29.260
It has long and sustained spirit
to create great applications.

00:06:31.210 --> 00:06:33.730
We use Java ourselves
to run our business.

00:06:33.870 --> 00:06:37.320
So when we think about the kinds
of applications that it takes

00:06:37.400 --> 00:06:40.970
to bring money into the company,
right, to do the accounting services,

00:06:41.070 --> 00:06:47.510
to do the financial reconciliation,
and website, Java itself is perfect as a

00:06:47.510 --> 00:06:49.760
business enterprise application.

00:06:49.990 --> 00:06:53.750
And Matt, let's begin.

00:06:53.750 --> 00:06:53.750
Switch.

00:06:58.450 --> 00:06:58.950
Do you hear the sound?

00:06:58.950 --> 00:07:02.400
No?

00:07:02.400 --> 00:07:03.330
No?

00:07:03.380 --> 00:07:03.770
No sound?

00:07:03.940 --> 00:07:04.540
Nope.

00:07:04.680 --> 00:07:08.530
So this is -- I'll do a voiceover, then.

00:07:08.650 --> 00:07:10.740
Apple uses Java for SAP.

00:07:10.870 --> 00:07:17.880
All of our sales people use
Java in its -- to book its numbers.

00:07:18.060 --> 00:07:23.340
Our website is used -- uses Java,
and is based on WebObjects technology.

00:07:23.340 --> 00:07:30.570
Apple Music Store, 99 cents a click,
and this is critically important.

00:07:30.720 --> 00:07:36.930
Apple technology in every facet
is devoted in many ways to create

00:07:36.940 --> 00:07:40.100
a tremendous desktop application
experience to create and as well to

00:07:40.200 --> 00:07:42.510
create a tremendous server experience.

00:07:42.590 --> 00:07:46.080
And these things combined together,
Java is a critical element.

00:07:46.170 --> 00:07:48.360
When we talk about and we
celebrate many applications,

00:07:48.360 --> 00:07:50.840
such as iTunes and such,
these are complementary

00:07:50.920 --> 00:07:54.000
technologies to provide that
fabulous interactive experience,

00:07:54.070 --> 00:07:56.700
but also Java is part of that.

00:07:57.930 --> 00:08:01.960
Java is also in the products that
we sell and we develop ourselves.

00:08:02.110 --> 00:08:06.490
So, of course,
we ship J2SE in Jaguar and in

00:08:06.610 --> 00:08:10.810
Panther and in Mac OS X server.

00:08:10.910 --> 00:08:14.050
.Mac is built itself
using the Java technology.

00:08:14.200 --> 00:08:19.000
So the dynamic creation of the
web pages uses the WebObjects

00:08:19.320 --> 00:08:24.810
application server and in many ways
also hooks up to various third-party

00:08:24.810 --> 00:08:27.900
Java application servers as well.

00:08:28.580 --> 00:08:33.480
and, of course, our WebObjects platform,
which runs not only on Mac OS X but on

00:08:33.480 --> 00:08:36.820
Solaris and on Windows 2000 platforms.

00:08:37.070 --> 00:08:43.100
That it itself is a portable applications
environment to create applications

00:08:43.400 --> 00:08:47.530
for server-based applications.

00:08:47.530 --> 00:08:56.080
So let's also talk about applications
that you've brought to Mac OS X.

00:08:56.080 --> 00:08:56.080
Shall we switch?

00:08:58.530 --> 00:09:05.850
So here, for example, Smart Money,
terrific application for monitoring.

00:09:05.940 --> 00:09:08.370
This is--what is this one?

00:09:08.480 --> 00:09:09.910
Can't see.

00:09:10.040 --> 00:09:14.010
Borland--this is JBuilder IDE.

00:09:15.100 --> 00:09:19.000
Thinkfree,
terrific word processing system.

00:09:19.000 --> 00:09:21.910
What was the name of this one?

00:09:23.380 --> 00:09:24.780
Gawker, right.

00:09:24.940 --> 00:09:28.390
So Gawker is an
understanding tool for Java,

00:09:28.390 --> 00:09:31.070
for understanding the Web and such.

00:09:31.160 --> 00:09:35.090
The Visual Cthaurus from Plum Design.

00:09:35.160 --> 00:09:39.120
Many, many applications,
all having tremendous visual appeal

00:09:39.120 --> 00:09:41.440
using the interactive approach.

00:09:41.470 --> 00:09:43.970
Why don't we flip back?

00:09:43.970 --> 00:09:43.970
Yeah, good.

00:09:44.900 --> 00:09:48.100
We also want to introduce a
new application server on the

00:09:48.100 --> 00:09:49.600
Mac OS X platform called JBoss.

00:09:49.600 --> 00:09:51.930
This is something that
you've asked us for.

00:09:51.930 --> 00:09:55.440
It allows you to deploy
enterprise Java beans.

00:09:55.440 --> 00:09:59.390
It is inspired by J2E.

00:10:02.090 --> 00:10:07.240
It has incorporated in it, as part of it,
Apache's Tomcat system.

00:10:07.240 --> 00:10:10.980
One of the things we like about
it is it's very good for hosting

00:10:10.980 --> 00:10:17.540
WebObjects 5.2.2 web applications,
and it fits extremely well and

00:10:17.540 --> 00:10:21.380
integrated into the Apache web services.

00:10:21.540 --> 00:10:23.500
And one of the things
that we like about JBoss,

00:10:23.510 --> 00:10:25.830
of course,
is it is a cross-platform standard.

00:10:25.960 --> 00:10:29.300
It has that capabilities.

00:10:29.420 --> 00:10:32.840
Our understanding is roughly
about 40 percent of people who

00:10:32.840 --> 00:10:35.800
do this type of application are
supporting and running JBoss,

00:10:35.920 --> 00:10:39.580
including--and about of those,
70 percent of those companies

00:10:39.580 --> 00:10:41.290
that use JBoss have deployed it.

00:10:41.480 --> 00:10:47.650
So it makes JBoss actually,
I think--I believe the largest--largest

00:10:47.650 --> 00:10:51.660
of the J2E-like application servers.

00:10:53.760 --> 00:10:57.420
For more information on JBoss,
we'll be talking about that in the 605

00:10:57.490 --> 00:11:02.890
Web Objects in J2EE session and in the
612 Enterprise App Deployment section.

00:11:03.000 --> 00:11:11.210
So great,
great new technology that I think you'll

00:11:11.210 --> 00:11:11.550
enjoy using and which has a tremendous
amount of appeal for our customers.

00:11:13.090 --> 00:11:18.200
Um, the thing that we'd like to say,
and critically important is,

00:11:18.420 --> 00:11:20.980
Java is in every Mac OS X box.

00:11:21.060 --> 00:11:23.060
It's bundled in every system.

00:11:23.080 --> 00:11:27.000
We're including -- in
the Panther release,

00:11:27.000 --> 00:11:29.490
we've included both Java 1.3 and 1.4.

00:11:29.600 --> 00:11:31.980
There's slightly, subtly different APIs.

00:11:31.980 --> 00:11:34.460
Some applications prefer 1.3.

00:11:34.540 --> 00:11:36.480
Some will prefer 1.4.

00:11:36.480 --> 00:11:38.480
And Apple tools support Java.

00:11:38.560 --> 00:11:40.620
We're very focused on this.

00:11:40.620 --> 00:11:45.790
The new Xcode tools will be supporting
Java fully in the GM release.

00:11:45.800 --> 00:11:50.010
But, in fact, even today,
it will support it with the

00:11:50.010 --> 00:11:54.280
Jam-based build system that
we've had for several years.

00:11:54.280 --> 00:11:58.470
JBoss will now be included in
the Mac OS X server product.

00:11:58.520 --> 00:12:03.160
So you can see that Java really is
getting very rich and fully integrated

00:12:03.160 --> 00:12:05.920
into all aspects of what Apple does.

00:12:07.100 --> 00:12:14.650
I think one of the things that Apple is
very focused on is improving performance.

00:12:14.800 --> 00:12:18.190
And so J2SE technology,
just-in-time compilation,

00:12:18.290 --> 00:12:22.720
is critically helpful for
making things go faster to--as

00:12:22.800 --> 00:12:26.130
your application is running,
the Java virtual machine is optimizing.

00:12:26.200 --> 00:12:31.090
We've put in technologies to optimize
and improve for the new G5 system.

00:12:31.100 --> 00:12:35.360
G5 is, in fact, a perfect machine,
and there are hardware features

00:12:35.360 --> 00:12:38.100
designed specifically to support Java.

00:12:38.240 --> 00:12:41.700
And you'll see that some of the
scientific benchmarks and floating-point

00:12:41.700 --> 00:12:44.500
benchmarks Java is terrific on.

00:12:44.500 --> 00:12:49.700
We've added in support for the new I/O,
extremely fast streaming I/O into

00:12:50.040 --> 00:12:54.910
the Java application environment,
and support to allow you for

00:12:55.260 --> 00:13:00.010
your applications to select
between different versions.

00:13:00.300 --> 00:13:03.380
One of the things that I think
is as a Java programmer,

00:13:03.530 --> 00:13:08.060
you can actually be much more insulated
from the hardware architecture,

00:13:08.060 --> 00:13:11.910
whereas if you're developing
in C or C++ or Objective-C,

00:13:12.040 --> 00:13:16.990
you do have to actually know,
are you running on all of G3, G4, or G5?

00:13:17.160 --> 00:13:20.530
Or you can optimize your code
and select in the compiler,

00:13:20.540 --> 00:13:24.070
GCC compiler,
to target specific hardware platforms.

00:13:24.280 --> 00:13:26.100
In Java, that worry goes away.

00:13:26.320 --> 00:13:30.130
Because your application is dynamically
loaded and the GCC compiler selects

00:13:30.130 --> 00:13:34.300
on the fly what it's going-- and knows
what hardware it is being executed on,

00:13:34.530 --> 00:13:37.900
it can choose the best
optimization technology for you.

00:13:37.900 --> 00:13:40.560
So this is one of the things
that makes Java and this type

00:13:40.620 --> 00:13:44.040
of just-in-time compilation
technology an extremely good match,

00:13:44.090 --> 00:13:49.220
especially when you have multiple
machine architectures you're targeting.

00:13:50.960 --> 00:13:54.040
I think one of the things
that is also very interesting

00:13:54.040 --> 00:13:59.110
here is no matter where we go,
when we get to G6, 7, 8, 9, 10, whatever,

00:13:59.110 --> 00:14:03.370
you'll know that your Java application
is architected in such a way

00:14:03.370 --> 00:14:05.470
that it is upwardly migratable.

00:14:05.710 --> 00:14:13.740
And so the applications you create today
are going to have a future role and a

00:14:13.740 --> 00:14:13.740
future life in a binary-compatible way.

00:14:14.680 --> 00:14:19.760
One of the things that is really great
about the new Java 1.4 implementation

00:14:19.940 --> 00:14:25.750
from Apple is we've made some big
changes in how we've implemented Java.

00:14:25.870 --> 00:14:31.660
Previously, Java was built on a
Carbon substructure and various layers.

00:14:31.770 --> 00:14:35.640
That allowed us to have some
support for Mac OS 9 days,

00:14:35.740 --> 00:14:39.570
but also tremendous--and to
migrate over to Mac OS X.

00:14:39.880 --> 00:14:43.400
Much as many of you developers
who develop Carbon applications,

00:14:43.520 --> 00:14:46.100
you wanted to deploy both on 9 and 10.

00:14:46.260 --> 00:14:49.520
But, of course,
now that we are fully on 10,

00:14:49.750 --> 00:14:53.580
and really 9 is sort of a dot
disappearing in the rearview mirror,

00:14:53.660 --> 00:14:59.860
we actually took the time to reengineer
from the ground up the 1.4 environment.

00:15:00.000 --> 00:15:04.390
So previously, with Java 1.3.1,

00:15:04.670 --> 00:15:09.680
As provided from Sun,
there is 1,842 classes.

00:15:09.700 --> 00:15:15.780
From Sun we get in 1.4 almost 3,000,
2991 classes.

00:15:15.780 --> 00:15:21.510
But if you look at it,
the code that Apple adds on top of it,

00:15:21.810 --> 00:15:24.330
right,
in the 1.3 case we had to put in about

00:15:24.330 --> 00:15:31.280
900 classes of code to connect it up
to Carbon and the Carbon APIs and such.

00:15:31.960 --> 00:15:35.560
In 1.4, we're hooking up to Cocoa.

00:15:35.560 --> 00:15:38.970
We've only had to add 300,
much less code,

00:15:38.980 --> 00:15:42.410
and yet we have more functionality,
more infrastructure that we

00:15:42.410 --> 00:15:44.770
have to bind to provided by Sun.

00:15:44.780 --> 00:15:47.940
And what's interesting here is
that there's a very nice match,

00:15:47.940 --> 00:15:51.440
a very sweet marriage, if you will,
between Java and the Cocoa and

00:15:51.440 --> 00:15:53.670
Objective-C environments.

00:15:53.730 --> 00:15:59.200
Many of the people, in fact,
who designed Sun's window swing system

00:15:59.200 --> 00:16:00.700
actually were original Nextians.

00:16:00.700 --> 00:16:03.580
So it's not... It's illogical
that that should be true.

00:16:03.580 --> 00:16:06.970
So one of the nice things
here is with less code,

00:16:06.980 --> 00:16:11.230
it then helps Apple put its attention
on issues of fit and finish and

00:16:11.360 --> 00:16:12.640
performance and other things.

00:16:12.640 --> 00:16:15.980
So this is one of the things
I'm really proud of in the

00:16:15.990 --> 00:16:18.880
Carbon to Cocoa transition.

00:16:21.000 --> 00:16:24.040
And with that,
I want to invite up Scott Adler,

00:16:24.040 --> 00:16:27.340
the Mac OS X Classes Technical Lead.

00:16:29.060 --> 00:16:31.330
Thanks a lot, Ted.

00:16:34.890 --> 00:16:38.200
So Ted's done a really good job of
explaining why Java's important to us at

00:16:38.200 --> 00:16:42.790
Apple and some of the basic things we've
done in 1.4 in our new architecture.

00:16:42.830 --> 00:16:46.830
But I want to talk a little bit
about where we've come from.

00:16:47.410 --> 00:16:50.780
So we can look at a timeline here,
and you can see that back

00:16:50.920 --> 00:16:54.100
here we had Mac OS X,
and we shipped Java 1.3 with Mac OS X,

00:16:54.100 --> 00:16:59.580
and then 10.1 we shipped Java 1.3.1,
but that's all way in the past.

00:16:59.770 --> 00:17:02.530
Then we had our 1.3.1
update that we shipped,

00:17:02.660 --> 00:17:05.600
plus a 1.3.1 version
that came with Jaguar,

00:17:05.640 --> 00:17:07.400
and then recently we shipped
another version of 1.3.

00:17:07.400 --> 00:17:12.570
But you can see we have fairly
regular releases of our Java platform.

00:17:13.130 --> 00:17:16.630
Now, over the past year,
we shipped a year ago,

00:17:16.630 --> 00:17:19.850
a little over a year ago,
we shipped a 1.4 preview that was still

00:17:19.910 --> 00:17:22.340
based off of our Carbon APIs at the WWDC.

00:17:22.340 --> 00:17:26.650
Then, from November to about February,
we shipped,

00:17:26.650 --> 00:17:35.580
must have been between 10 to 20
developer previews of our 1.4.1 Java JDK.

00:17:35.580 --> 00:17:39.710
So the deal is here is we were shipping
you our code as we were working on it,

00:17:39.710 --> 00:17:41.400
and we got lots of feedback from you.

00:17:41.700 --> 00:17:44.000
We got so much feedback that
we kept on adding to this and

00:17:44.000 --> 00:17:46.780
doing more developer releases,
and this was a new thing for us,

00:17:46.780 --> 00:17:49.740
where we were shipping out things to you,
and any ADC member could

00:17:49.740 --> 00:17:51.040
download our 1.4.1.

00:17:51.040 --> 00:17:54.320
So this was a great way to get
feedback directly from you without just

00:17:54.320 --> 00:17:57.100
dumping a release on you and saying,
oh, my application doesn't work.

00:17:57.100 --> 00:18:00.910
So we took all that feedback,
and then we released Java 1.4.1

00:18:00.910 --> 00:18:02.230
in March of this year.

00:18:02.260 --> 00:18:06.580
So what we've been doing since then
is we've been working on fixing all

00:18:06.580 --> 00:18:08.120
the bugs and improving performance.

00:18:08.120 --> 00:18:11.660
So what you have right now is
you have a Panther preview.

00:18:11.680 --> 00:18:14.340
That has a version of
1.4.1 bundled inside of it.

00:18:14.400 --> 00:18:17.240
And also you can download
a 1.4.1 update preview.

00:18:17.240 --> 00:18:20.690
There will be eventually a 1.4.1 update,
but there's a preview

00:18:20.690 --> 00:18:22.200
available for all ADC members.

00:18:22.200 --> 00:18:24.850
So you can, again, download this and then
tell us what things,

00:18:24.940 --> 00:18:25.980
what issues you have.

00:18:26.000 --> 00:18:29.680
There's so many Java programs out there
that our best bet is for you to try

00:18:29.680 --> 00:18:32.850
out your application and let us know
if there are issues specific to you.

00:18:34.390 --> 00:18:36.460
So what you can see with this
timeline is that we have all

00:18:36.460 --> 00:18:40.390
these regular releases of Java,
and we now have 1.4 and 1.3,

00:18:40.390 --> 00:18:44.140
and we still have regular releases
of 1.4 going on into the future.

00:18:44.140 --> 00:18:47.230
And you can see that we have our
releases with the operating system,

00:18:47.240 --> 00:18:51.190
and obviously we're going to have
1.4 and 1.3 released with Panther.

00:18:52.260 --> 00:18:55.190
So multiple version support,
we've been talking about this.

00:18:55.310 --> 00:18:59.460
If you were here a couple years ago,
we had one version of Java on

00:18:59.460 --> 00:19:02.420
Mac OS X and that was one through
one and that's what you got.

00:19:02.420 --> 00:19:05.500
As opposed to other platforms where you
can install whatever version happens to

00:19:05.500 --> 00:19:09.240
work with your application and everyone
had to install their own JREs and it

00:19:09.320 --> 00:19:13.260
gets all confusing because you then have
like six different JREs on your system.

00:19:13.260 --> 00:19:14.900
So we have a version that we ship.

00:19:14.920 --> 00:19:16.120
Now we have two versions.

00:19:16.230 --> 00:19:18.780
So you have to be able
to handle two versions.

00:19:18.800 --> 00:19:21.280
Well we knew we had to have
backward compatibility.

00:19:21.280 --> 00:19:24.690
Apps that worked with one through one
and may have issues with the new APIs in

00:19:24.690 --> 00:19:26.320
one through one still have to work.

00:19:26.400 --> 00:19:29.580
So our double clickable applications
will still work with one through one.

00:19:29.610 --> 00:19:32.420
But we also have to allow
you to specify the version.

00:19:32.470 --> 00:19:36.190
So you can specify it the same way
that Java Web Start does by saying what

00:19:36.260 --> 00:19:39.830
version or hire you work with or saying
I'm locked into a specific version.

00:19:40.090 --> 00:19:41.780
So that's really easy for you to do.

00:19:41.820 --> 00:19:44.960
So you can ship your apps working
with whatever version that you need.

00:19:44.990 --> 00:19:47.180
And we're also gonna include
both of them in Panther.

00:19:47.200 --> 00:19:50.590
Now if you have a one four app,
you can be confident that your users will

00:19:50.590 --> 00:19:53.660
be able to have it because we're shipping
one four through software update.

00:19:53.660 --> 00:19:55.520
Most people just
automatically download it.

00:19:55.520 --> 00:19:56.750
I know my aunt downloaded it.

00:19:56.780 --> 00:19:58.820
She didn't even realize it.

00:19:58.950 --> 00:20:01.560
So we have over a million
downloads of one four one.

00:20:01.560 --> 00:20:04.940
And we're gonna keep shipping our
updates to one four as software updates.

00:20:04.940 --> 00:20:08.660
And then when Panther comes along,
it will be bundled right inside the OS.

00:20:08.660 --> 00:20:11.380
So you'll have both of
them right side by side.

00:20:11.380 --> 00:20:13.550
One through one apps
can run one four apps.

00:20:13.560 --> 00:20:14.480
Everything's happy.

00:20:16.500 --> 00:20:19.720
So now I want to talk a little
bit about the Java platform.

00:20:19.720 --> 00:20:22.560
If you were here two
weeks ago at Moscone,

00:20:22.560 --> 00:20:24.800
at the old Moscone,
there was Java 1 going on.

00:20:24.800 --> 00:20:26.680
And they talk all about
the Java platform.

00:20:26.680 --> 00:20:27.380
And it's huge.

00:20:27.380 --> 00:20:28.550
You probably know about it.

00:20:28.560 --> 00:20:29.790
You're probably a Java developer.

00:20:29.840 --> 00:20:31.160
But the platform is pretty huge.

00:20:31.160 --> 00:20:34.440
I just want to run through really
quickly the 1.3 to 1.4 differences.

00:20:34.500 --> 00:20:38.390
So we have all the OS releases
that it runs on the bottom.

00:20:38.500 --> 00:20:40.160
And then we have the
actual virtual machine,

00:20:40.160 --> 00:20:44.280
or the runtime as we like to call it,
which includes all the hotspot compiler.

00:20:44.280 --> 00:20:45.900
And it's small on this chart.

00:20:45.920 --> 00:20:47.680
But it's actually a big deal.

00:20:47.680 --> 00:20:49.980
There's a lot of stuff in
there going on for figuring

00:20:49.980 --> 00:20:51.980
out when to compile your code.

00:20:52.020 --> 00:20:53.740
Then we have all the core APIs.

00:20:53.770 --> 00:20:56.370
This is the basic stuff
in your application.

00:20:56.380 --> 00:21:00.210
This is things like all the collection
classes to make it easy to do sorts,

00:21:00.210 --> 00:21:03.110
all the networking classes,
utility string classes,

00:21:03.110 --> 00:21:06.700
all the basic things that
Java just can handle for you.

00:21:07.110 --> 00:21:09.900
Then you have your integration APIs,
things like connecting to databases

00:21:09.940 --> 00:21:11.410
and remote method invocations.

00:21:11.420 --> 00:21:15.500
Then on top of that, the UI toolkit,
which Swing and AWT are obviously the

00:21:15.500 --> 00:21:17.630
most basic things in that toolkit.

00:21:17.670 --> 00:21:21.160
And then you also have input methods
for getting foreign language support,

00:21:21.270 --> 00:21:24.120
Java 2D if you just are
a graphics application,

00:21:24.140 --> 00:21:26.960
accessibility support,
which is definitely a

00:21:26.960 --> 00:21:29.920
big user interface issue,
and sound support.

00:21:29.920 --> 00:21:32.600
Then on top of that are
alternative deployment techniques,

00:21:32.600 --> 00:21:35.340
other than just jars and
double-clickable applications,

00:21:35.560 --> 00:21:38.580
things like Java Web Start and
the Java plugin for applets.

00:21:38.740 --> 00:21:43.200
Now, when we went from 1.3 to 1.4,
there were some new packages,

00:21:43.220 --> 00:21:46.810
brand new packages,
some extensions that were bundled in,

00:21:46.810 --> 00:21:51.120
some other things that people
just wanted that Sun added to 1.4.

00:21:51.120 --> 00:21:54.900
And people look at this and say, hey,
that's all that's in 1.4, no big deal.

00:21:54.900 --> 00:21:58.320
Well, actually,
all of these packages have

00:21:58.520 --> 00:22:00.220
had major API changes.

00:22:00.220 --> 00:22:04.560
Swing has had brand new components,
AWT has had lots of fixes,

00:22:04.560 --> 00:22:08.090
and there's just... There's all lists
of API changes across the board.

00:22:08.100 --> 00:22:11.190
And then there also are all
the other packages that have

00:22:11.200 --> 00:22:13.790
been touched or changed,
that have bug fixes inside

00:22:13.790 --> 00:22:14.880
of and under the covers.

00:22:15.280 --> 00:22:18.220
Especially the hotspot compiler in VM,
there's lots of changes

00:22:18.220 --> 00:22:21.790
between 1.3 and 1.4,
and almost none of them

00:22:21.790 --> 00:22:24.930
will... You actually have to do
anything to take advantage of.

00:22:25.040 --> 00:22:26.760
There are just things that
happen under the covers that

00:22:26.760 --> 00:22:28.040
make your application run better.

00:22:28.060 --> 00:22:30.640
But it's things that we implement.

00:22:31.910 --> 00:22:35.870
So now I want to talk a little bit
about Java 1.4 on Mac OS X and what

00:22:36.150 --> 00:22:38.830
the performance thinks we've changed.

00:22:39.390 --> 00:22:42.180
So first, starting at the bottom,
there's the runtime improvements.

00:22:42.310 --> 00:22:45.830
So the biggest thing here is that
these will directly affect all your

00:22:45.830 --> 00:22:48.340
server and scientific applications.

00:22:48.340 --> 00:22:52.780
So any runtime improvements we make,
immediately, if we fix floating point,

00:22:52.780 --> 00:22:55.730
we make it work faster,
your server applications will

00:22:55.750 --> 00:22:57.360
just start working faster.

00:22:57.360 --> 00:23:00.710
We have some things like aggressive
inlining that's been implemented,

00:23:00.710 --> 00:23:03.460
the new I/O API that we've
talked about earlier.

00:23:03.690 --> 00:23:06.570
And then, of course,
the biggest thing that you get for

00:23:06.570 --> 00:23:08.350
free is support for new hardware.

00:23:08.650 --> 00:23:12.160
Now, this morning in the keynote,
you heard some talk about a developer who

00:23:12.160 --> 00:23:17.240
ported their application to work on the
G5 and recompiled in something like 15,

00:23:17.350 --> 00:23:18.500
20 minutes.

00:23:18.500 --> 00:23:20.210
Well, you don't have to do that.

00:23:20.400 --> 00:23:21.790
You guys get that for free.

00:23:21.890 --> 00:23:22.920
Your class files come over.

00:23:22.950 --> 00:23:27.240
They run through our compiler,
which is now optimized for the G5.

00:23:27.240 --> 00:23:29.260
So let's just take an example.

00:23:29.300 --> 00:23:32.830
There's a benchmark,
which is the CIMARC benchmark.

00:23:32.890 --> 00:23:35.290
It's a scientific calculation benchmark.

00:23:35.530 --> 00:23:37.900
And we just looked at
the composite score.

00:23:37.900 --> 00:23:38.900
And we're going to do
a little bit of a test.

00:23:38.910 --> 00:23:44.670
So on a -- let's see,
on a G4 1.4 gigahertz dual machine,

00:23:44.850 --> 00:23:48.550
we score 110,
which leaves us somewhere in the

00:23:48.560 --> 00:23:52.000
50 -- top 50 compilers out there.

00:23:52.150 --> 00:23:56.090
Now, if we look at the new machine,
which is a 2.0 gigahertz dual,

00:23:56.090 --> 00:23:59.280
we score now 232,
which brings us into the top 10.

00:23:59.280 --> 00:24:03.340
And this is just with a couple
optimizations for the G5.

00:24:03.340 --> 00:24:07.200
So we already are taking more than 100
percent improvement on this one score,

00:24:07.200 --> 00:24:11.030
just from optimizing things like
our long instructions and all of the

00:24:11.030 --> 00:24:13.600
things that the G5 can take care of.

00:24:13.600 --> 00:24:15.720
So this is some great news
for your applications,

00:24:15.740 --> 00:24:17.260
because you just get this.

00:24:17.260 --> 00:24:20.600
When you run on the new hardware,
your apps will be that much faster.

00:24:20.600 --> 00:24:24.220
So I really encourage you
to go look at session 625.

00:24:24.220 --> 00:24:27.000
There is more info about the
CIMARC composite score and

00:24:27.000 --> 00:24:29.240
all the different portions
of CIMARC and what they did.

00:24:29.240 --> 00:24:32.550
They'll actually break down how they
compile your byte codes into better

00:24:32.550 --> 00:24:35.380
instructions on the G5 and how you
can set up your applications to better

00:24:35.460 --> 00:24:36.450
take advantage of this information.

00:24:36.500 --> 00:24:37.820
And then we'll take advantage
of this if you want to,

00:24:37.950 --> 00:24:39.960
but again,
it'll just automatically happen for you.

00:24:42.470 --> 00:24:45.680
So also in the graphics area,
we know we had a lot of work to do,

00:24:45.690 --> 00:24:49.240
and so we put a lot of effort
into some graphics improvements.

00:24:49.240 --> 00:24:51.990
So the biggest thing is that
we're faster across the board,

00:24:51.990 --> 00:24:54.570
even on Jaguar systems,
this update should be faster for

00:24:54.570 --> 00:24:56.160
your applications and graphics.

00:24:56.160 --> 00:25:00.060
We heard a lot of criticism about this,
and we've tried to respond to it.

00:25:00.060 --> 00:25:03.120
We did things like our graphics
system sits on top of Quartz,

00:25:03.180 --> 00:25:06.970
and the Java graphics system
doesn't necessarily understand

00:25:07.180 --> 00:25:09.360
all the intricacies of Quartz.

00:25:09.360 --> 00:25:11.890
So we did things like
we know more about it.

00:25:12.020 --> 00:25:14.440
So we put in a new state management
mechanism which should help

00:25:14.440 --> 00:25:18.020
all your applications be faster
for basic drawing routines.

00:25:18.020 --> 00:25:20.620
We also have lots of bug fixes.

00:25:20.620 --> 00:25:23.680
So I have one benchmark I stole
from the performance session,

00:25:23.850 --> 00:25:28.290
which is the Java wireframe demo,
which measures basic primitive lines

00:25:28.290 --> 00:25:31.470
and maybe arcs drawing performance.

00:25:31.480 --> 00:25:36.460
And in our 1.4.1 release,
we got 20 frames per second.

00:25:36.460 --> 00:25:40.640
And then in our 1.4.1 update,
we ended up with 35 frames per second.

00:25:40.640 --> 00:25:41.640
So you can see that's a pretty
significant improvement.

00:25:41.640 --> 00:25:42.640
And then in our 1.4.1 update,
we had a significant increase

00:25:42.640 --> 00:25:44.140
in just our update release.

00:25:44.250 --> 00:25:47.840
So you can find out more about this
at the session again on Friday,

00:25:47.840 --> 00:25:48.820
the performance session.

00:25:51.350 --> 00:25:55.750
So now in Java 1.4,
there's also all the UI toolkits,

00:25:55.750 --> 00:25:58.270
and I want to talk a
little bit about those.

00:25:59.130 --> 00:26:00.600
So, AWT.

00:26:01.020 --> 00:26:03.400
This is the big change we
made over the past year.

00:26:03.440 --> 00:26:05.390
We changed the architecture of AWT.

00:26:05.530 --> 00:26:10.740
So, AWT is the whole toolkit
that has the peer toolkit.

00:26:10.790 --> 00:26:13.960
So, peers are these native
widgets that Java relates to.

00:26:13.990 --> 00:26:16.480
So, AWT on Windows has Windows widgets.

00:26:16.560 --> 00:26:19.910
AWT on Mac OS X now uses Cocoa widgets.

00:26:20.070 --> 00:26:23.030
Now, the big deal here is it's
transparent to users.

00:26:23.220 --> 00:26:24.640
They don't know whether
it's Carbon or Cocoa.

00:26:24.640 --> 00:26:26.000
We don't want them to know.

00:26:26.020 --> 00:26:30.930
But what happens is the Cocoa widgets
now have support for our native services.

00:26:31.030 --> 00:26:33.280
So, the services menu just works.

00:26:33.570 --> 00:26:37.580
The speech and spelling in AWT controls,
if you control-click

00:26:37.610 --> 00:26:40.940
on your AWT text field,
you'll get that services menu,

00:26:40.940 --> 00:26:43.990
and you'll be able to select
speech and speak those items,

00:26:43.990 --> 00:26:48.050
or see the little red dashed underlines
and be able to get spelling right there,

00:26:48.060 --> 00:26:50.000
or send something to a man
who's a Java developer.

00:26:50.000 --> 00:26:52.350
So, we're not going to be able to get
that in the mail client because

00:26:52.360 --> 00:26:55.000
the mail has implemented something
so you can say click send to mail.

00:26:55.000 --> 00:26:59.980
The other thing is you get things like
the colors and the artwork automatically.

00:27:00.080 --> 00:27:03.000
So,
if you use AWT colors or system colors,

00:27:03.090 --> 00:27:05.960
those automatically are mapped
to our UI system colors.

00:27:06.000 --> 00:27:07.960
So,
if you change the highlight color in an

00:27:07.960 --> 00:27:11.450
application in the system preferences,
it'll automatically be reflected

00:27:11.450 --> 00:27:13.940
in your application if you
use the highlight color.

00:27:14.000 --> 00:27:20.000
Plus, there are things like input methods
are now supported in all of our AWT.

00:27:20.000 --> 00:27:20.000
So, that means you can get your
input methods in the system.

00:27:20.000 --> 00:27:24.000
So, you can get your complex fonts and
complex foreign language support,

00:27:24.000 --> 00:27:25.000
and also things like Inkwell.

00:27:25.000 --> 00:27:27.680
If you happen to have a tablet,
you could use Inkwell right

00:27:27.680 --> 00:27:29.000
in your AWT text fields.

00:27:29.250 --> 00:27:31.720
Plus,
we have accessibility for our AWT widgets

00:27:31.720 --> 00:27:36.000
and also for some of our swing widgets,
and that means you can script everything.

00:27:36.000 --> 00:27:39.430
You have things available,
accessibility can get to it,

00:27:39.430 --> 00:27:42.480
you can use it using
UI scripting in Apple script.

00:27:44.290 --> 00:27:46.400
So the swing Aqua look and feel.

00:27:46.400 --> 00:27:49.660
This has been rewritten with
the architecture change to use

00:27:49.660 --> 00:27:51.680
the native Cocoa rendering.

00:27:51.720 --> 00:27:55.000
So what that means is when
you draw a swing widget,

00:27:55.000 --> 00:27:58.120
instead of pulling the whole thing into
Java and trying to draw it in Java,

00:27:58.120 --> 00:28:01.840
what we do is we go down into the
native code and behind the scenes

00:28:01.840 --> 00:28:04.880
draw it with the same routines
that Cocoa uses to draw it.

00:28:04.910 --> 00:28:08.540
So when you ask for a swing button,
it's actually drawing a Cocoa button

00:28:08.540 --> 00:28:11.250
behind the scenes and then
putting a lightweight view

00:28:11.250 --> 00:28:13.170
of that thing up on the screen.

00:28:13.190 --> 00:28:18.290
So it means that your components will
be more consistent with other swing

00:28:18.290 --> 00:28:22.000
apps and with other native apps.

00:28:22.000 --> 00:28:24.740
The other thing-- excuse me.

00:28:24.740 --> 00:28:26.560
Let me grab a drink.

00:28:34.060 --> 00:28:39.770
So the other benefits you get
from this is the native menu bar.

00:28:39.920 --> 00:28:44.360
You can actually use the menu bar at
the top of the screen if you want.

00:28:44.800 --> 00:28:47.830
Plus, you can also get the
brushed metal look and feel,

00:28:47.860 --> 00:28:48.400
if you want.

00:28:48.520 --> 00:28:52.040
You can set a property,
get brushed metal, and then you can set

00:28:52.120 --> 00:28:54.390
backgrounds on windows,
and they all of a sudden

00:28:54.390 --> 00:28:55.950
become translucent windows.

00:28:56.110 --> 00:28:57.830
And it's really cool.

00:28:57.960 --> 00:28:59.340
You can make--if you
do a non-title window,

00:28:59.340 --> 00:29:01.330
you can make the background transparent.

00:29:01.390 --> 00:29:03.460
You just have floating swing controls,
if you want.

00:29:03.520 --> 00:29:04.620
It's kind of cool.

00:29:04.930 --> 00:29:07.200
There also are some new widgets.

00:29:07.200 --> 00:29:10.860
There's the indeterminate progress bar,
the spinner, and plus we have new

00:29:10.860 --> 00:29:12.920
internationalization support.

00:29:14.230 --> 00:29:19.030
So with that,
there's more info on--at session 608.

00:29:19.040 --> 00:29:21.200
They'll be talking about
creating great Java applications.

00:29:21.200 --> 00:29:24.180
They'll talk about how to
do all these customizations.

00:29:25.450 --> 00:29:32.140
Now I'd like to introduce Greg Bolsinga,
whose title is up here.

00:29:35.340 --> 00:29:37.200
That is-- Hi.

00:29:37.200 --> 00:29:42.620
Demo machine two, please.

00:29:43.170 --> 00:29:46.100
I've got a pure Java swing
application here.

00:29:46.250 --> 00:29:47.610
This is it right here.

00:29:47.760 --> 00:29:52.050
It's using the Aqua swing look and feel,
and in this particular case,

00:29:52.170 --> 00:29:54.860
I've set it to use the
brushed metal look.

00:29:54.950 --> 00:29:56.600
On "Jaguar," we had
some trouble with this,

00:29:56.600 --> 00:30:00.060
but with the Cocoa fixes
that we got from the system,

00:30:00.230 --> 00:30:02.630
now it works,
and we didn't-- I don't believe we

00:30:02.660 --> 00:30:04.790
had to do any changes to get that.

00:30:04.930 --> 00:30:10.100
So your Java swing program will look
and behave as Mac OS X users expect.

00:30:10.260 --> 00:30:15.590
What I'm going to be showing you today
is how the Java accessibility has been

00:30:15.590 --> 00:30:18.940
tied into the Mac OS X accessibility,
and you get all these

00:30:18.940 --> 00:30:20.100
great features for free.

00:30:20.100 --> 00:30:24.100
Mac OS X accessibility allows your
program to be used by all users,

00:30:24.100 --> 00:30:28.600
people who may not be able to use a mouse
or see the screen or hear or some such,

00:30:28.600 --> 00:30:33.140
but there's a lot of features that are
cool for a whole lot of people as well.

00:30:33.230 --> 00:30:37.260
So what you're going to use are
pure AWT and swing components.

00:30:37.510 --> 00:30:41.530
If you have a custom component control,
you'd have to integrate it with

00:30:41.570 --> 00:30:44.570
the Java accessibility APIs,
and then when you use it on Mac OS X,

00:30:44.570 --> 00:30:45.800
you'll just get it for free.

00:30:45.980 --> 00:30:51.980
So the first thing I'm going to show
you is the spoken user interface.

00:30:52.050 --> 00:30:55.790
It's part of the speech,
and if you have it do

00:30:55.790 --> 00:30:59.400
the text under the mouse,
it will read it out loud.

00:30:59.400 --> 00:30:59.400
So again... Scott.

00:31:01.050 --> 00:31:04.090
These are just pure Java widgets
that are getting this for free.

00:31:04.100 --> 00:31:07.940
So it's a pretty easy
to use screen reader.

00:31:07.940 --> 00:31:10.430
And we also have speech recognition.

00:31:10.440 --> 00:31:14.370
You'll see here in speech recognition
that there's the front window commands.

00:31:14.380 --> 00:31:16.760
I'm not doing that in here
because the microphones in the

00:31:16.850 --> 00:31:18.310
big room don't work too well.

00:31:18.320 --> 00:31:21.320
But what I could do is go to
this program and say add image,

00:31:21.320 --> 00:31:22.790
and it would click on it for me.

00:31:22.820 --> 00:31:25.300
This comes to you for free with Java.

00:31:25.300 --> 00:31:28.220
You have to do no additional
Java programming nor any

00:31:28.350 --> 00:31:30.080
native Mac OS X programming.

00:31:30.770 --> 00:31:34.850
And here's another really cool feature
that we have is the UI scripting.

00:31:35.120 --> 00:31:36.530
Pardon me.

00:31:36.560 --> 00:31:40.830
So this is a JavaScript that's
going to click on buttons.

00:31:40.920 --> 00:31:44.130
And it's going to fill out this
little goofy program I wrote

00:31:44.130 --> 00:31:45.910
while the script is running.

00:31:45.920 --> 00:31:47.130
So I'll have it tell you about it.

00:31:47.240 --> 00:31:49.720
Thanks, Greg.

00:31:49.720 --> 00:31:52.180
First I'll add the Apple logo.

00:31:52.180 --> 00:31:57.540
Now adding the Java logo.

00:31:57.540 --> 00:31:58.850
There we go.

00:32:01.550 --> 00:32:04.500
Now I'll add a picture of Greg.

00:32:04.580 --> 00:32:07.260
So it's filling out all
these text fields as it goes.

00:32:07.320 --> 00:32:10.540
And lastly, a picture of Scott.

00:32:10.590 --> 00:32:14.160
Now it will start bouncing around.

00:32:14.290 --> 00:32:17.370
Now let's turn on the transparency.

00:32:18.990 --> 00:32:20.570
and Beth Dinkley.

00:32:20.680 --> 00:32:23.910
Okay, so what we have here is
still a pure Java program.

00:32:24.200 --> 00:32:27.660
We used--

00:32:30.340 --> 00:32:33.360
We used standard AWT components
and were able to script them.

00:32:33.360 --> 00:32:34.530
And this is pure Java.

00:32:34.540 --> 00:32:36.420
You'll notice this transparent
window I have here.

00:32:36.420 --> 00:32:39.930
All I have is a Java AWT window where
I've set the background color to have an

00:32:39.930 --> 00:32:43.380
alpha and the Quartz Extreme compositing
takes care of the rest of it for us.

00:32:43.400 --> 00:32:47.040
You can hear more about
Mac OS X accessibility

00:32:47.040 --> 00:32:48.640
at session 421 on Friday.

00:32:48.640 --> 00:32:54.140
And I'll have more about this
program on Thursday in session 620.

00:32:54.140 --> 00:32:57.720
So I'm going to run one more thing
and it's going to open a website

00:32:57.720 --> 00:32:58.820
where you can learn about it.

00:32:59.380 --> 00:33:00.500
Now back to you, Scott.

00:33:03.670 --> 00:33:04.600
Cool.

00:33:04.600 --> 00:33:05.960
Before you hang that up,
I just want to show them

00:33:06.060 --> 00:33:07.560
the other thing you added.

00:33:07.650 --> 00:33:09.890
So Greg's been working on
this demo just for like a day,

00:33:09.920 --> 00:33:12.460
and I said it would be really
cool if everything blew up.

00:33:12.590 --> 00:33:21.710
So he had something where he
could add a whole bunch of images

00:33:21.710 --> 00:33:21.710
and just have things blow up.

00:33:21.710 --> 00:33:21.710
So I just thought that was kind of cool.

00:33:22.570 --> 00:33:25.790
So, this really shows things like,
you know, your transparent window,

00:33:25.960 --> 00:33:26.650
the scripting.

00:33:26.660 --> 00:33:29.000
Now, what you don't realize
is that's all swing.

00:33:29.110 --> 00:33:30.520
Those aren't Cocoa controls.

00:33:30.640 --> 00:33:33.300
The system doesn't know that
those are Cocoa elements in there.

00:33:33.300 --> 00:33:35.300
If it was AWT, it would know about that.

00:33:35.400 --> 00:33:36.790
But these are swing controls.

00:33:36.880 --> 00:33:40.290
So, we implemented things so that
your swing controls can get

00:33:40.330 --> 00:33:42.120
access to the outside world.

00:33:42.130 --> 00:33:44.380
And so that any other developer
who goes in can see that,

00:33:44.500 --> 00:33:45.760
yes, there is a button there.

00:33:45.890 --> 00:33:49.550
Even though that's a J button behind
the scenes which on any other platform,

00:33:49.550 --> 00:33:51.040
they just think it's lightweight.

00:33:51.040 --> 00:33:52.380
I don't know what it is.

00:33:52.410 --> 00:33:55.750
On our platform, we've exposed that to
our accessibility APIs.

00:33:55.850 --> 00:34:00.140
So, this is a big advantage to your swing
applications because AWT applications

00:34:00.440 --> 00:34:02.080
are kind of boring sometimes.

00:34:02.080 --> 00:34:04.320
And swing applications
can be really complex.

00:34:04.340 --> 00:34:07.930
And you can also -- is it true, Greg,
you can expose your

00:34:07.930 --> 00:34:09.610
own custom components?

00:34:09.850 --> 00:34:10.890
Greg Schleusner: Yes, it is.

00:34:10.930 --> 00:34:13.920
You just tie them in with the standard
Java accessibility APIs provided by Sun.

00:34:13.950 --> 00:34:15.530
Oh, one thing I forgot to mention.

00:34:15.740 --> 00:34:20.020
On other platforms,
to get Java to native accessibility,

00:34:20.020 --> 00:34:23.000
you'd have to do an additional
download -- we don't believe

00:34:23.000 --> 00:34:25.400
in additional Java downloads
except when it's a new release,

00:34:25.400 --> 00:34:26.420
I guess.

00:34:26.420 --> 00:34:31.560
But -- so you would just get Java to
Mac OS X accessibility linkage for free.

00:34:31.560 --> 00:34:32.530
Great.

00:34:32.650 --> 00:34:33.560
Thanks a lot, Greg.

00:34:33.560 --> 00:34:35.070
Greg Schleusner: Thank you.

00:34:44.000 --> 00:38:21.700
[Transcript missing]

00:38:25.290 --> 00:38:27.220
So again,
if you want more information about these,

00:38:27.340 --> 00:38:29.240
go to the
Creating Great Java Applications,

00:38:29.240 --> 00:38:30.140
that's session 608.

00:38:30.140 --> 00:38:32.300
You'll see at the end all
the times for these sessions.

00:38:34.260 --> 00:38:36.600
So now we have the other thing,
which is tying yourself

00:38:36.600 --> 00:38:38.480
into some of Apple's APIs.

00:38:38.480 --> 00:38:40.360
Now,
some people might not want to do this,

00:38:40.510 --> 00:38:42.640
but there's a lot of
good reasons to do this.

00:38:42.640 --> 00:38:46.680
We have some great things that
you can do on the Mac with Java,

00:38:46.680 --> 00:38:49.860
and they're exciting, actually.

00:38:49.860 --> 00:38:54.620
The whole WebKit SDK allows you to build
WebKit applications that you can just

00:38:54.620 --> 00:38:56.460
embed Java applets right inside of.

00:38:56.490 --> 00:38:58.020
So that's really cool.

00:38:58.020 --> 00:39:01.720
Then the other way around is
you can take a Java application,

00:39:01.720 --> 00:39:05.400
and you can embed a Cocoa View inside
of your Java application.

00:39:05.430 --> 00:39:08.520
So you can take some custom
Cocoa component and embed it right

00:39:08.520 --> 00:39:11.210
inside of your swing application,
and just have it sitting there

00:39:11.210 --> 00:39:14.440
interacting with the user just
alongside all of your swing controls.

00:39:14.520 --> 00:39:15.550
And it's really cool.

00:39:15.560 --> 00:39:19.120
It means you can take almost anything
from other projects and just pull

00:39:19.120 --> 00:39:21.440
it into your Java application.

00:39:21.440 --> 00:39:25.370
There also are ways to get to other
APIs through native interfaces to get

00:39:25.370 --> 00:39:29.560
to things like our disk burning API,
our cryptography APIs.

00:39:29.560 --> 00:39:31.620
It's really cool,
and you'll see some of this.

00:39:31.620 --> 00:39:31.620
But you can also do it on your own.

00:39:31.620 --> 00:39:31.680
So you can do it on your own.

00:39:31.680 --> 00:39:31.720
So you can do it on your own.

00:39:31.720 --> 00:39:33.260
And you can do this in
some of the later sessions,

00:39:33.270 --> 00:39:36.620
building a disk burning program
with almost all pure Java,

00:39:36.620 --> 00:39:38.020
with very little native code.

00:39:38.060 --> 00:39:41.240
But then you get all of
the disk burning utilities.

00:39:41.360 --> 00:39:45.580
We also have QuickTime for Java 6.1,
which is being seeded.

00:39:45.580 --> 00:39:48.740
It's a developer seed,
if I remember correctly.

00:39:48.740 --> 00:39:51.840
It has new bindings
for new QuickTime APIs.

00:39:51.840 --> 00:39:54.380
So it's a little different than
the QuickTime for Java that

00:39:54.380 --> 00:39:56.540
you might have used with 1.3.

00:39:56.540 --> 00:40:00.500
The big deal here is that it
works with 1.4 on Mac OS X.

00:40:00.560 --> 00:40:01.620
And I recommend you open it.

00:40:01.620 --> 00:40:02.510
You all check it out.

00:40:02.520 --> 00:40:05.410
Anyone who's used
QuickTime for Java before,

00:40:05.720 --> 00:40:06.470
check it out.

00:40:06.480 --> 00:40:08.020
Give us feedback on it.

00:40:08.130 --> 00:40:11.030
Talk to the QuickTime team,
because they want a lot

00:40:11.030 --> 00:40:12.300
of feedback on this.

00:40:12.310 --> 00:40:13.790
And they actually are having a session.

00:40:14.010 --> 00:40:18.540
Session 708 is where you can learn
all about the new QuickTime APIs.

00:40:18.540 --> 00:40:20.880
And I really encourage you,
if you're a QuickTime developer

00:40:21.190 --> 00:40:23.860
who uses Java,
who's used the old QuickTime for Java,

00:40:23.860 --> 00:40:27.130
or has taken a look at the new one,
to go there and give your feedback and

00:40:27.130 --> 00:40:28.900
learn all about it at that session.

00:40:28.910 --> 00:40:32.010
There's also some sessions on WebKit,
session 4.0, 4.20.

00:40:32.020 --> 00:40:35.870
We'll talk all about WebKit and how you
can get WebKit in your own application,

00:40:35.910 --> 00:40:39.640
which means you can then have access
to applets in your application.

00:40:39.640 --> 00:40:43.820
And then also session 6.20,
we'll talk in-depth about these features,

00:40:43.820 --> 00:40:45.310
native integration on Mac OS X.

00:40:45.360 --> 00:40:48.220
So you can learn all about the
different ways to embed native

00:40:48.250 --> 00:40:50.510
services in your application.

00:40:53.640 --> 00:40:58.340
So now I'm going to do a quick
demo of access to native services,

00:40:58.340 --> 00:40:59.100
all the extensions.

00:40:59.100 --> 00:41:01.620
So if we can switch to demo machine one.

00:41:07.370 --> 00:41:11.460
So what you see here is this is
actually a sample app I downloaded

00:41:11.460 --> 00:41:13.820
from our developer site.

00:41:13.840 --> 00:41:16.680
And it's actually something that
lets me connect to video cameras,

00:41:16.680 --> 00:41:20.440
which was really cool because we
announced a new video camera today.

00:41:20.450 --> 00:41:22.860
I didn't even know.

00:41:22.980 --> 00:41:26.060
So I made this app,
and it was developed by Ted and

00:41:26.060 --> 00:41:31.930
our DTS group to show how to embed
Cocoa components inside of a Java app.

00:41:32.290 --> 00:41:34.270
So how you can get some
native functionality inside

00:41:34.280 --> 00:41:35.680
of your pure Java app.

00:41:35.750 --> 00:41:39.120
So I just gave it this great icon,
and I named it after

00:41:39.120 --> 00:41:41.540
my favorite '80s name,
Super Video Pro.

00:41:41.810 --> 00:41:42.890
So it's got a real icon.

00:41:42.900 --> 00:41:45.700
It actually is a real application.

00:41:45.700 --> 00:41:48.050
Everyone thinks it's just
a plain old application.

00:41:48.060 --> 00:41:50.150
They don't know there's
Java under the covers.

00:41:50.250 --> 00:41:52.200
So it's already launched here.

00:41:52.270 --> 00:41:54.150
So here's my camera view.

00:41:54.160 --> 00:41:57.230
Now, this is really exciting.

00:41:57.250 --> 00:41:58.500
It doesn't look like much.

00:41:58.580 --> 00:42:03.540
Well, what's actually here is this area
right here is a Cocoa component.

00:42:03.550 --> 00:42:06.870
Inside of this Cocoa component
is an NS Quick Draw view,

00:42:07.040 --> 00:42:09.220
which is then talking to QuickTime.

00:42:09.290 --> 00:42:11.740
So we've got everything in
this one little application.

00:42:11.760 --> 00:42:14.000
Now, according to Java,
there's just a component in there

00:42:14.000 --> 00:42:15.310
that's going to give us pixels.

00:42:15.500 --> 00:42:19.630
And it's just going to fill the screen,
fill this section of the window.

00:42:19.740 --> 00:42:22.170
So as soon as I say connect--

00:42:23.340 --> 00:42:24.300
There I am.

00:42:24.300 --> 00:42:26.980
So this is getting stuff
directly from QuickTime.

00:42:26.980 --> 00:42:28.200
There's nothing tricky going on here.

00:42:28.200 --> 00:42:30.050
You can download this exact source.

00:42:30.120 --> 00:42:32.130
So I can just pick this up.

00:42:32.170 --> 00:42:32.680
Maybe not.

00:42:32.680 --> 00:42:34.750
I'll just leave this right here.

00:42:35.500 --> 00:42:36.790
I don't know how that's attached there.

00:42:36.910 --> 00:42:39.470
I was going to show you what
the demo guy is doing back here,

00:42:39.480 --> 00:42:41.980
but I don't think we'll
be able to see him.

00:42:42.190 --> 00:42:44.910
So you can see that we're getting live
stuff right here in our application.

00:42:44.980 --> 00:42:48.680
And then there's some other things,
like I used extended AWT,

00:42:48.680 --> 00:42:52.410
and I added an about box with
some custom Java inside of it.

00:42:52.420 --> 00:42:54.260
So just to show that
there's real Java in here,

00:42:54.260 --> 00:42:56.700
I just threw some goofy
things in my about box.

00:42:56.700 --> 00:43:00.000
And this is just a regular old
Java sample I threw in here.

00:43:00.000 --> 00:43:02.980
And I can click here and see Ted,
who wrote the sample,

00:43:03.000 --> 00:43:04.460
and all this exciting stuff.

00:43:04.460 --> 00:43:08.280
So this just means you can do
your own about box in here.

00:43:08.280 --> 00:43:10.960
And then we also have
the Preferences menu.

00:43:11.010 --> 00:43:14.190
So this, again, is hooked up to just
my plain old Java code,

00:43:14.200 --> 00:43:15.880
and I can change any preferences.

00:43:15.920 --> 00:43:20.920
So one of the cool preferences in
here is show DV setup when connecting.

00:43:21.160 --> 00:43:25.600
So if you turn this on, I say OK,
and then I stop.

00:43:25.600 --> 00:43:26.900
And now I'm stopped.

00:43:26.900 --> 00:43:29.000
Now if I reconnect--

00:43:31.600 --> 00:43:34.740
It goes directly to the native DV setup,
video setup.

00:43:34.740 --> 00:43:37.000
So this is now no longer Java code.

00:43:37.000 --> 00:43:39.740
This is a native window that's come
up inside of my Java application.

00:43:39.740 --> 00:43:42.560
It took, I think,
one parameter that I passed to

00:43:42.560 --> 00:43:46.080
the QuickTime setup that says
now I want this native window.

00:43:46.080 --> 00:43:50.700
And now I get things like
our vector scope in here.

00:43:50.700 --> 00:43:51.710
So there's all these cool things.

00:43:51.720 --> 00:43:54.380
We can see what color am
I and things like that.

00:43:54.380 --> 00:43:57.140
You can also decide if
you have other sources,

00:43:57.140 --> 00:43:59.710
you can choose different
videos and things like that.

00:43:59.800 --> 00:44:02.600
So this is a real easy way to
get to native functionality

00:44:02.600 --> 00:44:03.920
in your Java application.

00:44:03.920 --> 00:44:07.040
Okay.

00:44:07.040 --> 00:44:08.960
Let's go back to slides.

00:44:15.430 --> 00:44:18.200
So web integration.

00:44:18.200 --> 00:44:21.010
When you use Java,
most of you when you develop Java,

00:44:21.020 --> 00:44:23.400
you're developing
Java applications or applets.

00:44:23.410 --> 00:44:28.160
Now a lot of users run into applets all
the time and don't even know about it.

00:44:28.160 --> 00:44:30.890
So we have to do a good
job with web integration.

00:44:31.040 --> 00:44:33.610
So the biggest thing is Safari.

00:44:33.810 --> 00:44:36.830
Safari is our browser,
our main browser on our platform,

00:44:36.840 --> 00:44:39.370
and we have to have good
applet support for it.

00:44:39.490 --> 00:44:42.760
So we have 1.4 applet support in Safari.

00:44:42.920 --> 00:44:44.480
Safari is a Cocoa program.

00:44:44.550 --> 00:44:47.960
And so our new Cocoa architecture
works really well with Safari.

00:44:48.080 --> 00:44:53.500
So you actually have a much more seamless
integration between Safari and our 1.4.1.

00:44:53.550 --> 00:44:56.840
So now we can actually say that we
have more applets than ever running on

00:44:56.840 --> 00:44:59.480
Mac OS X using the combination of Safari.

00:44:59.480 --> 00:45:02.940
You also have applets
inside of Internet Explorer.

00:45:02.940 --> 00:45:07.460
We also are working on a 1.4 plugin
that will work with Carbon browsers.

00:45:07.680 --> 00:45:10.150
So all those people who are
writing Carbon browsers out there,

00:45:10.150 --> 00:45:13.680
maybe they won't be around for long
because of Web Kit and how cool it is.

00:45:13.680 --> 00:45:16.140
But there still are some people
who are writing Carbon browsers,

00:45:16.140 --> 00:45:18.920
and people may want to embed
their applets inside of there.

00:45:18.940 --> 00:45:25.120
So we're going to have a way to put
1.4 content inside of those browsers.

00:45:25.120 --> 00:45:28.710
And then Java Web Start,
which is kind of lonely at the end here,

00:45:28.810 --> 00:45:31.160
but it's actually a really
important technology.

00:45:31.160 --> 00:45:34.690
And not that many people know about it,
but it's a way to deliver

00:45:35.190 --> 00:45:37.460
applications through a web browser.

00:45:37.520 --> 00:45:42.180
So the deal with Web Start is that it's
a Sun-specified way of doing things,

00:45:42.180 --> 00:45:45.920
and you can have your,
your JAR file up on a server somewhere,

00:45:45.920 --> 00:45:49.580
and you just have a link to a JNLP file,
which is the thing that will

00:45:49.580 --> 00:45:51.000
then launch your application.

00:45:51.020 --> 00:45:54.670
And you click in the web browser,
and it downloads your JAR file,

00:45:54.830 --> 00:45:58.170
puts it in a cache, and then creates-- it
runs the application.

00:45:58.180 --> 00:46:00.520
And on the Mac,
we've actually extended that so that

00:46:00.610 --> 00:46:03.780
if you download that more than once,
you could actually have the option to

00:46:03.830 --> 00:46:08.450
create a double-clickable application
out of your Web Start JNLP file.

00:46:08.580 --> 00:46:11.420
So what will happen is you'll then
end up with an application bundle

00:46:11.790 --> 00:46:13.810
that knows where it came from.

00:46:13.990 --> 00:46:15.680
So you have all the
advantages of Web Start,

00:46:15.750 --> 00:46:18.140
because one of the big things
about Web Start is that you can

00:46:18.450 --> 00:46:21.370
actually go to the original website
every time you start the app and

00:46:21.370 --> 00:46:23.300
check to see if there are updates.

00:46:23.300 --> 00:46:25.380
You can automatically
put updates out there,

00:46:25.380 --> 00:46:27.720
and then anyone who's using your
app will get an announcement

00:46:27.810 --> 00:46:28.800
saying there's an update.

00:46:28.830 --> 00:46:29.700
Do they want to download it?

00:46:29.860 --> 00:46:31.990
So there are a lot of things
there where people want to

00:46:31.990 --> 00:46:34.410
deploy through the browser,
but don't want to be an applet

00:46:34.450 --> 00:46:35.710
inside the browser process.

00:46:35.790 --> 00:46:39.050
They want to download something
and not just be a DMG file

00:46:39.180 --> 00:46:40.060
or something like that.

00:46:40.090 --> 00:46:41.400
And this is a cross-platform way.

00:46:41.400 --> 00:46:42.980
It works on Windows with other JREs.

00:46:43.000 --> 00:46:44.320
is.

00:46:46.320 --> 00:46:51.260
So there'll be a lot of talk about this
at the Java on the Web session 619.

00:46:51.300 --> 00:46:54.630
There's a lot of details about
the new things in Safari.

00:46:54.640 --> 00:46:57.240
We actually have support
for cookies in Safari now,

00:46:57.240 --> 00:46:58.090
which is a big deal.

00:46:58.500 --> 00:47:06.990
And then all the details about the new
plug-in and many details about how to

00:47:06.990 --> 00:47:06.990
specify your Java Web Start application.

00:47:09.710 --> 00:47:10.810
So Java moving forward.

00:47:10.810 --> 00:47:14.610
So we've been talking about our
Java update and other things like that.

00:47:14.620 --> 00:47:16.480
Let's talk a little more detail about it.

00:47:16.480 --> 00:47:19.030
So the future of Java and Mac OS X.

00:47:19.080 --> 00:47:23.040
The first thing in our future
is the 141 update for MAC for

00:47:23.040 --> 00:47:25.880
for Jaguar Mac OS X 10.2.

00:47:25.880 --> 00:47:26.860
So what's in that?

00:47:27.060 --> 00:47:28.770
Well, we have hundreds of bug fixes.

00:47:28.770 --> 00:47:30.390
We've been fixing lots of bugs.

00:47:30.390 --> 00:47:33.580
We've been getting the biggest
issues and knocking those down.

00:47:33.580 --> 00:47:35.960
The other thing that we've
been working on a lot has

00:47:36.050 --> 00:47:37.740
been performance enhancements.

00:47:37.750 --> 00:47:39.580
So what's the biggest thing
that we've been working on?

00:47:39.600 --> 00:47:41.690
There are graphics
performance enhancements,

00:47:41.690 --> 00:47:45.080
which you saw some of and you'll see more
of on Friday if you go to that session.

00:47:45.080 --> 00:47:49.360
The VM,
which has been optimized for for the G5.

00:47:49.380 --> 00:47:51.520
But there also are some
other optimizations in there

00:47:51.530 --> 00:47:52.680
that can work on Jaguar.

00:47:52.680 --> 00:47:55.420
And then Aqua has had
some improvements in it.

00:47:55.420 --> 00:47:58.830
So we actually have some updates
for our Aqua look and feel

00:47:58.860 --> 00:48:00.650
and to our AWT components.

00:48:00.650 --> 00:48:04.200
And the big thing here is that it'll
be developed as a software update.

00:48:04.250 --> 00:48:07.370
Now it's available to you through
ADC download as a preview.

00:48:07.400 --> 00:48:10.790
And we really encourage you to
download it try out your applications.

00:48:10.870 --> 00:48:13.980
See if you have any other
issues that we don't know about

00:48:14.080 --> 00:48:16.470
and give us feedback on it.

00:48:19.100 --> 00:48:25.140
So now I want to give you a little demo
of one of the things that we've seen in

00:48:25.140 --> 00:48:27.000
our release versus our software update.

00:48:27.000 --> 00:48:30.320
So if we can get demo machine one.

00:48:31.260 --> 00:48:33.850
This is a little
application called Robocode.

00:48:33.850 --> 00:48:36.400
How many of you out there
know about Robocode?

00:48:36.660 --> 00:48:40.220
How many of you tried
running Robocode on 1.4?

00:48:40.490 --> 00:48:40.720
Okay.

00:48:40.720 --> 00:48:44.090
So be lucky you haven't because
you're about to see what

00:48:44.170 --> 00:48:45.700
Robocode looks like on 1.4.

00:48:45.700 --> 00:48:47.630
So Robocode is actually an
interesting application.

00:48:47.640 --> 00:48:53.320
It's developed by IBM's AlphaWorks,
and it's a program where you program

00:48:53.810 --> 00:48:57.670
little AI robots in Java that are
subclassed off of a robot type,

00:48:57.730 --> 00:48:59.500
and you can compile your
robots and everything.

00:48:59.500 --> 00:49:03.030
It's very cool,
and it's very cool to us developers.

00:49:03.040 --> 00:49:05.720
Outside people might not care about it,
but developers think it's really

00:49:05.810 --> 00:49:08.980
cool because you actually get to,
you know, it's kind of like Core Wars and

00:49:08.980 --> 00:49:09.760
all those kinds of things.

00:49:09.830 --> 00:49:13.060
You get to program your robots and have
them face off in teams or whatever.

00:49:13.060 --> 00:49:16.500
So this is a kind of
graphics-intensive kind of thing,

00:49:16.500 --> 00:49:19.750
and this is running on our
1.4 release from March.

00:49:19.760 --> 00:49:22.860
And if I just resume the battle.

00:49:27.440 --> 00:49:31.060
You can see up here,
this is our frames per second,

00:49:31.080 --> 00:49:35.970
which this was--I think one
of our developers deemed this

00:49:35.970 --> 00:49:39.430
unacceptable performance,
which--

00:49:39.630 --> 00:49:41.810
I think is completely correct.

00:49:41.830 --> 00:49:43.530
So what did we do?

00:49:43.540 --> 00:49:47.020
Well, we looked at this and we said we
know there's something wrong here.

00:49:47.020 --> 00:49:47.950
We can do a little better.

00:49:48.140 --> 00:49:52.600
So I'm going to switch from this
machine to demo machine two,

00:49:52.600 --> 00:49:55.620
which even though we have
a rack of Xservs here,

00:49:55.620 --> 00:49:58.640
this is the exact same configuration
machine as this one here.

00:49:58.640 --> 00:50:00.880
You'll have to believe me on that.

00:50:00.880 --> 00:50:04.490
And we set up the exact same battle
except it does random placement so the

00:50:04.560 --> 00:50:07.570
guys aren't in the exact same location,
but you might be able

00:50:07.570 --> 00:50:08.900
to notice a difference.

00:50:08.900 --> 00:50:12.870
So this is running our 141 update 1.

00:50:13.410 --> 00:50:19.820
And if I resume here,
now we're actually getting--let's--

00:50:20.010 --> 00:50:23.740
We're getting 2022.

00:50:23.820 --> 00:50:25.240
This is--let's see.

00:50:25.240 --> 00:50:28.730
This is a little less than
what we were getting in our--

00:50:28.980 --> 00:50:30.660
Oh, okay.

00:50:30.780 --> 00:50:34.140
So we're getting about 20, 22.

00:50:34.160 --> 00:50:35.540
This is a lot less than
we got in rehearsal,

00:50:35.540 --> 00:50:37.990
but it's still an order
of magnitude better,

00:50:37.990 --> 00:50:39.140
which is pretty good.

00:50:39.300 --> 00:50:42.330
So what I wanted to do is
show you that we actually

00:50:42.450 --> 00:50:44.740
have--let's cancel this battle.

00:50:44.740 --> 00:50:50.510
Let's open a battle that I saved,
which is a really big

00:50:50.640 --> 00:50:53.070
one here that I enjoy.

00:50:53.070 --> 00:50:58.010
And let me pause that,
and I like doing this, too.

00:50:59.400 --> 00:51:02.240
Let's see if this works.

00:51:02.240 --> 00:51:04.610
Okay, we're only getting about
10 frames per second,

00:51:04.640 --> 00:51:06.900
but it's probably because
we have another thing going.

00:51:06.900 --> 00:51:09.510
But you can see that this is
actually an order of magnitude

00:51:09.510 --> 00:51:10.940
better than what we had before.

00:51:11.010 --> 00:51:15.360
And you can actually run this
in--it's actually usable now.

00:51:15.360 --> 00:51:17.460
And we found out a couple
reasons why this was happening,

00:51:17.460 --> 00:51:18.560
and we fixed those reasons.

00:51:18.580 --> 00:51:21.860
And hopefully we can find out
why it's only 10 to 15 frames

00:51:21.860 --> 00:51:24.930
per second here and not 30,
which I was getting in my

00:51:25.080 --> 00:51:26.800
test run earlier today.

00:51:26.850 --> 00:51:34.300
But that's still better than before.

00:51:34.320 --> 00:51:36.640
So we can go off of this one.

00:51:39.630 --> 00:51:44.560
So we can go back to slides.

00:51:44.560 --> 00:51:49.440
So that's the update,
and now the future of Java is

00:51:49.440 --> 00:51:51.670
actually going to be Panther.

00:51:51.680 --> 00:51:53.320
That's the future of Apple.

00:51:53.320 --> 00:51:54.920
So what's in Panther?

00:51:55.160 --> 00:51:58.050
Well, what you got in Panther was
pretty close to what's in our

00:51:58.050 --> 00:52:00.560
update that you can download now.

00:52:00.600 --> 00:52:01.600
It's a little different.

00:52:01.600 --> 00:52:03.040
There aren't all the
exact same bug fixes,

00:52:03.040 --> 00:52:05.520
but we're going to have all
those bug fixes in there.

00:52:05.520 --> 00:52:08.280
So when Panther is released,
it's going to have everything

00:52:08.280 --> 00:52:09.500
that was in our update.

00:52:09.500 --> 00:52:13.050
So 141 update 1 is going
to go out before Panther,

00:52:13.050 --> 00:52:17.110
and then when Panther is final,
it's going to have everything that

00:52:17.110 --> 00:52:21.000
was in that update plus all the
Panther graphics improvements.

00:52:21.000 --> 00:52:24.560
So everything that Panther did,
we've -- what Ted told you earlier

00:52:24.560 --> 00:52:27.930
is we've architected for the future,
and this is actually where we

00:52:28.030 --> 00:52:31.640
start reaping the rewards of that
architecture because we're living

00:52:31.640 --> 00:52:33.640
on top of all of the core APIs.

00:52:33.640 --> 00:52:35.140
We live on top of core graphics.

00:52:35.140 --> 00:52:37.240
We use all the text APIs.

00:52:37.240 --> 00:52:39.220
So if you're at Scott Forsdall's
discussion about text.

00:52:39.400 --> 00:52:45.480
We immediately get those
two times performance gains.

00:52:45.480 --> 00:52:50.780
So every Panther performance improvement,
those will affect us.

00:52:50.780 --> 00:52:53.760
Aqua improvements,
we're revving our Aqua look and feel

00:52:54.040 --> 00:52:57.520
to match the new Aqua look for Panther.

00:52:57.610 --> 00:52:59.080
Font performance is huge.

00:52:59.080 --> 00:53:02.840
The font performance change in Panther,
and we should be gaining most of that.

00:53:02.840 --> 00:53:05.440
Also things like the
improved IO performance.

00:53:05.440 --> 00:53:08.280
And then the big deal with
Panther is that it will include 141,

00:53:08.360 --> 00:53:13.070
so you can count on your applications
having 141 there if you need it.

00:53:13.080 --> 00:53:15.920
You don't have to get
a download for Panther.

00:53:15.920 --> 00:53:18.830
And then the other big thing which has
been mentioned in the last session and

00:53:18.830 --> 00:53:23.680
this session is that JBoss is going
to be bundled with Mac OS X server.

00:53:23.690 --> 00:53:27.720
So you can count on having something
that is close to the J2EE standard and be

00:53:27.720 --> 00:53:30.910
able to run your J2EE applications there.

00:53:34.370 --> 00:53:37.380
So with that,
I want to bring up Alan Samuel,

00:53:37.440 --> 00:53:40.500
who is our Java Technologies Evangelist.

00:53:49.500 --> 00:53:53.500
end a little bit today with actually
one of you from the audience,

00:53:53.500 --> 00:53:54.450
a developer.

00:53:54.450 --> 00:54:00.580
Now the story on this is my counterpart
actually in our Swedish office,

00:54:00.580 --> 00:54:05.040
Mark Turner, actually we had,
I think he had a phone call one day,

00:54:05.250 --> 00:54:07.390
told me a little bit about this
developer that he was working

00:54:07.390 --> 00:54:10.980
with that had developed this
really cool product in Java.

00:54:10.980 --> 00:54:15.480
Originally developed
on Windows and Solaris,

00:54:15.480 --> 00:54:16.120
I believe.

00:54:16.120 --> 00:54:19.020
I believe it's even over
a million lines of code,

00:54:19.020 --> 00:54:20.580
a pretty hefty application.

00:54:20.580 --> 00:54:23.140
It was in the video conferencing space.

00:54:23.140 --> 00:54:26.320
My first thought when Mark told me this,
I was like, are these guys crazy?

00:54:26.320 --> 00:54:28.420
Who's going to take this on in Java?

00:54:31.140 --> 00:54:33.140
I want to show you guys
what these guys have done.

00:54:33.140 --> 00:54:37.640
In a very, very short period of time,
they've taken this product,

00:54:37.640 --> 00:54:41.760
and I think it's one of the
showcase applications on Mac OS X.

00:54:41.760 --> 00:54:44.870
Unlike some of the things that
you saw today with our video

00:54:44.870 --> 00:54:48.100
conferencing offer with iChat AV,
you know,

00:54:48.240 --> 00:54:53.760
more of a peer-to-peer Mac-only solution,
their offering works on both Macintosh,

00:54:53.760 --> 00:54:55.750
Windows, Linux, and Solaris.

00:54:55.760 --> 00:54:59.790
It also offers a whole host of
things like whiteboarding and other

00:54:59.790 --> 00:55:04.080
features to sort of more on the
lines of a groupware application.

00:55:04.080 --> 00:55:06.760
But I don't want to
take too much more time.

00:55:06.760 --> 00:55:10.440
I'd rather have you guys see it,
but I think no matter what application

00:55:10.500 --> 00:55:13.740
framework this was developed in,
this is going to be a showcase

00:55:14.160 --> 00:55:15.730
application for the platform.

00:55:15.740 --> 00:55:19.340
So with that, I want to go ahead and
bring up Magnus Hedberg,

00:55:19.340 --> 00:55:25.260
the chief strategy offer with Meritech,
and actually have him give you a

00:55:25.260 --> 00:55:27.200
demo of their incredible product.

00:55:27.260 --> 00:55:29.860
Thank you a lot.

00:55:29.860 --> 00:55:30.180
Thank you.

00:55:30.200 --> 00:55:31.830
Thank you very much.

00:55:39.500 --> 00:55:40.650
- Should we go to demo one?

00:55:40.680 --> 00:55:41.430
- Just a second.

00:55:41.500 --> 00:55:49.600
I want to make sure we are
online before we switch.

00:55:49.600 --> 00:55:53.000
Oh, here we go.

00:55:53.000 --> 00:55:53.000
Here we are online with Sweden.

00:55:53.000 --> 00:55:53.000
I'm just turning on my microphone here.

00:55:53.540 --> 00:55:55.100
What do you want the headset?

00:55:55.100 --> 00:55:59.870
I'm going to put in my headset, too,
just to make sure that our colleague

00:56:00.190 --> 00:56:01.490
Staffan can hear us in Sweden.

00:56:01.650 --> 00:56:03.410
Do you hear us, Staffan?

00:56:05.210 --> 00:56:06.840
That's good.

00:56:07.150 --> 00:56:10.190
I'm actually going to turn the camera
around here so that you can see that

00:56:10.200 --> 00:56:13.080
you have a very nice audience today.

00:56:13.140 --> 00:56:17.900
This is one of the nice features with the
new EyeSight camera from Apple that you

00:56:17.910 --> 00:56:20.390
can actually turn it around like this.

00:56:20.390 --> 00:56:21.780
Thank you very much.

00:56:21.780 --> 00:56:24.540
I've been looking at
you all week last week.

00:56:24.540 --> 00:56:25.550
Yeah, I know.

00:56:25.550 --> 00:56:26.540
It's terrible.

00:56:26.780 --> 00:56:29.570
So, Staffan is tonight
with us from Stockholm,

00:56:29.600 --> 00:56:30.260
Sweden.

00:56:30.260 --> 00:56:35.100
And the reason I say night is because
it's pretty much night over there.

00:56:36.550 --> 00:56:38.400
It certainly is.

00:56:38.400 --> 00:56:45.480
If I'm out of sync, it has nothing to do
with the application,

00:56:45.480 --> 00:56:49.710
but with the time zones.

00:56:50.070 --> 00:56:51.260
What time is it?

00:56:51.380 --> 00:56:52.550
3:00 AM.

00:56:52.700 --> 00:56:55.340
3:00 AM.

00:56:55.430 --> 00:56:57.290
OK.

00:57:04.350 --> 00:57:07.500
We always like dedicated staff.

00:57:07.570 --> 00:57:10.020
We don't have all the
dedicated staff online.

00:57:10.020 --> 00:57:14.520
We have a few more actually here in the
background that I'm going to bring in.

00:57:14.700 --> 00:57:18.410
One nice feature with this system
is that we can actually do a

00:57:18.410 --> 00:57:20.490
little recording and playback.

00:57:20.610 --> 00:57:24.610
So what I'm going to do now is
that I'm going to bring in some

00:57:24.610 --> 00:57:28.250
of our friends from earlier
tonight before they left for home.

00:57:28.440 --> 00:57:30.860
That's how we can deal with that.

00:57:30.860 --> 00:57:33.810
I'm just going to press the play
button here and you will see

00:57:33.890 --> 00:57:36.360
some more colleagues showing up.

00:57:36.410 --> 00:57:38.990
And this is really the
beauty of the system,

00:57:38.990 --> 00:57:40.580
group collaboration.

00:57:41.410 --> 00:57:46.330
I'll now let Staffan run a little
talk about the application itself,

00:57:46.370 --> 00:57:49.900
and then we'll get back and I'll finalize
talking about our Java experience.

00:57:50.070 --> 00:57:52.500
So, Staffan, the word is yours.

00:57:52.650 --> 00:57:54.200
Thank you very much.

00:57:54.280 --> 00:57:57.220
I'll start with introducing myself a bit.

00:57:57.240 --> 00:57:59.700
My name is Staffan Seadre,
and I'm sitting here in Stockholm,

00:57:59.700 --> 00:58:02.590
Sweden, as Magnus said.

00:58:02.890 --> 00:58:06.640
Just briefly about who we
are and where we come from.

00:58:07.060 --> 00:58:11.000
Swedish software development
company started R&D back in '95,

00:58:11.000 --> 00:58:14.740
mainly sponsored by Ericsson,
which is a fairly

00:58:14.740 --> 00:58:17.760
well-known mobile company,
at least back here in

00:58:17.760 --> 00:58:19.000
my end of the woods.

00:58:19.000 --> 00:58:24.400
The purpose was to create a solution
that supported distributed projects

00:58:24.400 --> 00:58:26.990
and mainly distance education.

00:58:27.000 --> 00:58:32.000
Market demands led to that we
founded the company back in '98,

00:58:32.000 --> 00:58:37.270
and since then we have a bit more than
130 clients that have verified the

00:58:37.270 --> 00:58:40.000
solution and verified the technology.

00:58:40.000 --> 00:58:46.000
So they have, together with us,
made what you see here today possible.

00:58:47.180 --> 00:58:51.750
A part of our vision is to create
a truly distributed workplace.

00:58:51.750 --> 00:58:56.250
And with that I mean,
you are right now somewhere around here,

00:58:56.290 --> 00:58:59.100
and whoops, and I'm over there.

00:58:59.110 --> 00:59:04.060
And that is a distributed workplace
in a sort of global scheme.

00:59:04.160 --> 00:59:11.030
Very early this morning I had a bit
of a conversation with some clients

00:59:11.030 --> 00:59:15.100
of ours in Sydney and in Perth.

00:59:15.100 --> 00:59:20.090
Earlier, in the last week,
I was in contact with Germany,

00:59:20.190 --> 00:59:26.640
with the UK, and even more so with our
development team that is

00:59:26.640 --> 00:59:32.100
based way up north in Sweden,
almost close to the Arctic Circle.

00:59:32.100 --> 00:59:38.140
So this kind of distributed workplace
is what we are--that's our world,

00:59:38.140 --> 00:59:39.100
basically.

00:59:41.340 --> 00:59:45.660
This is made possible through
convergence--a convergence of audio,

00:59:45.660 --> 00:59:50.200
video, whiteboard chats that creates what
we believe to be very efficient

00:59:50.200 --> 00:59:52.200
group collaboration over internet.

00:59:52.220 --> 00:59:54.760
And that is over the public internet.

00:59:55.890 --> 01:00:01.140
I'll guide--just take you through
some of the features here now.

01:00:01.280 --> 01:00:05.700
What you see on the top of your screen
is what we call video for presence.

01:00:05.810 --> 01:00:09.550
Basically,
it increases the sense of presence.

01:00:09.560 --> 01:00:11.000
You see everybody's there.

01:00:11.000 --> 01:00:13.750
You see if they pay
attention or if they nod off.

01:00:13.890 --> 01:00:17.000
If they nod off, you're a speed up.

01:00:17.040 --> 01:00:23.940
Everyone--all the participants have
a P button that stands for private,

01:00:23.940 --> 01:00:28.280
meaning I can send private chats
to anyone in the audience or

01:00:28.280 --> 01:00:30.600
any one of the participants.

01:00:30.740 --> 01:00:36.540
And I can also have a private
conversation going on with one

01:00:36.890 --> 01:00:40.680
particular participant without
disturbing the rest of the group.

01:00:40.800 --> 01:00:43.980
Right now, you probably just see one or
two or a few participants here,

01:00:43.980 --> 01:00:47.840
but I think the internal
record is close to 500 people

01:00:47.840 --> 01:00:50.770
simultaneously in one session.

01:00:52.400 --> 01:00:57.110
The voice quality--and I really
hope that you experience decent

01:00:57.140 --> 01:00:58.740
quality over at your end.

01:00:58.810 --> 01:01:00.450
We usually do.

01:01:00.570 --> 01:01:01.700
Yes, we do.

01:01:01.700 --> 01:01:02.410
Thank you.

01:01:02.520 --> 01:01:04.340
You're welcome.

01:01:04.430 --> 01:01:07.760
It's developed for use over Internet,
and since we don't really have any

01:01:07.760 --> 01:01:11.200
quality of service over Internet,
it will have to be robust and

01:01:11.200 --> 01:01:13.390
handle packet losses efficiently.

01:01:13.460 --> 01:01:16.200
It's a wideband codec,
so it's a lot better than

01:01:16.200 --> 01:01:17.860
traditional telephony.

01:01:17.950 --> 01:01:20.390
And a lot cheaper.

01:01:20.990 --> 01:01:23.900
The video screen,
the largest video screen that

01:01:23.900 --> 01:01:28.490
you see on your right hand side,
is a strong tool because it

01:01:28.490 --> 01:01:30.740
increases commitment considerably.

01:01:30.860 --> 01:01:36.550
It's a lot easier to say "it will be done
Monday" over the phone and don't mean it,

01:01:36.550 --> 01:01:39.390
than to include it in applications.

01:01:39.730 --> 01:01:43.190
So it's a very good tool for
in-group environments when

01:01:43.190 --> 01:01:46.060
you want to have things done.

01:01:46.460 --> 01:01:51.760
The chat can of course
be used in any way,

01:01:51.760 --> 01:01:57.790
but during a regular meeting,
use it to ask questions, spell names,

01:01:57.790 --> 01:02:01.310
or type in URL, whatever.

01:02:02.610 --> 01:02:07.890
That's my email address,
so in case you have any questions,

01:02:08.110 --> 01:02:09.240
don't send me those.

01:02:09.250 --> 01:02:12.120
Ask Magnus, since he's there.

01:02:12.130 --> 01:02:14.030
Makes sense.

01:02:16.740 --> 01:02:21.040
And last but definitely not least,
the whiteboard area.

01:02:21.180 --> 01:02:30.650
Use it as I'm using it right now to
present stuff or make annotations.

01:02:30.800 --> 01:02:38.810
Highlight stuff, share ideas,
and share documents, regardless of the

01:02:38.810 --> 01:02:40.700
application that you're on.

01:02:40.700 --> 01:02:45.300
I mean, you can be on an application
that I don't have on my machine,

01:02:45.300 --> 01:02:48.490
but we can still share the
information and make annotations

01:02:48.500 --> 01:02:50.530
and discuss the content.

01:02:52.000 --> 01:02:57.900
This is made available now in
a cross-platform environment.

01:02:57.990 --> 01:03:00.900
We are strong believers in
cross-platform communications.

01:03:00.900 --> 01:03:05.900
The client that you see on your screen,
the big screen right now,

01:03:05.900 --> 01:03:10.900
is available for Sun Solaris,
for Windows, for Linux, and,

01:03:10.900 --> 01:03:13.900
as of tomorrow, for Windows.

01:03:13.900 --> 01:03:17.230
Or for Mac.

01:03:19.000 --> 01:03:20.150
It is 3:00 a.m.

01:03:20.150 --> 01:03:21.000
in the morning.

01:03:21.000 --> 01:03:21.210
It's out there.

01:03:21.240 --> 01:03:22.220
It is.

01:03:22.240 --> 01:03:25.230
Hang in there.

01:03:25.400 --> 01:03:29.750
The server that makes
this meeting possible,

01:03:29.860 --> 01:03:33.700
that creates this virtual meeting
room that we're in right now,

01:03:33.700 --> 01:03:37.240
is also available for
a variety of platforms.

01:03:37.240 --> 01:03:41.230
And as of tomorrow, for Mac OS X.

01:03:41.240 --> 01:03:46.960
We are actually running this off an
X server located in Stockholm right now.

01:03:49.070 --> 01:03:52.160
We don't want to prevent people
from participating in meetings.

01:03:52.170 --> 01:03:56.000
That's why we have the client
software freely available.

01:03:56.020 --> 01:04:00.110
So anyone can download the client
software and connect to the

01:04:00.110 --> 01:04:04.290
server that is hosted by someone.

01:04:04.290 --> 01:04:06.340
In this case, it's us.

01:04:10.700 --> 01:04:14.300
The Java I've set as of
now has been encrypted,

01:04:14.430 --> 01:04:18.670
108-bit encryption end-to-end,
meaning that regardless if someone

01:04:18.670 --> 01:04:21.330
else is sitting on the server,
they cannot listen in

01:04:21.330 --> 01:04:22.660
on our conversations.

01:04:22.710 --> 01:04:30.440
That goes for all media, for video,
for voice, for chat, for whiteboard,

01:04:30.440 --> 01:04:32.820
and so on and so forth.

01:04:32.830 --> 01:04:36.870
So it's dead safe, which is crucial,
especially for professional users.

01:04:37.060 --> 01:04:41.310
The audio, I mentioned it earlier,
is probably even more crucial

01:04:41.320 --> 01:04:47.000
because voice is such a cornerstone
in all human interaction.

01:04:47.000 --> 01:04:51.790
So I can lose video, maybe,
but I can't lose voice because then our

01:04:51.840 --> 01:04:54.980
conversation is not really efficient.

01:04:55.000 --> 01:04:59.580
That's why we are focused to
create a very robust solution that

01:04:59.580 --> 01:05:02.000
handles network packet losses.

01:05:02.000 --> 01:05:07.070
We can even lose up to 30 percent
packets and I will still make myself

01:05:07.070 --> 01:05:10.000
understood on my broken English.

01:05:10.000 --> 01:05:12.990
It's very easy to get up and running.

01:05:12.990 --> 01:05:16.070
The client that you see
on your screen right now,

01:05:16.070 --> 01:05:18.000
you will probably have it up
and running in five minutes.

01:05:18.000 --> 01:05:21.060
Unless you're a technician,
because then you probably need

01:05:21.060 --> 01:05:25.000
15 minutes since you just have to
fiddle around with all the settings.

01:05:25.000 --> 01:05:28.790
The server is equally easy
to get up and running,

01:05:28.790 --> 01:05:30.000
I would say.

01:05:30.000 --> 01:05:34.010
You can have it up and running,
meaning creating these virtual meeting

01:05:34.010 --> 01:05:38.000
rooms on a server and invite people
to join you in less than 30 minutes.

01:05:38.000 --> 01:05:43.000
The whole solution is also NAT compatible
and very firewall friendly,

01:05:43.000 --> 01:05:46.000
meaning it cuts through it like butter.

01:05:46.000 --> 01:05:53.000
A nice feature is that you can
record and play back the sessions.

01:05:53.000 --> 01:05:57.410
Say you missed your management meeting,
it's a very good thing that you can

01:05:57.410 --> 01:06:00.890
listen in to what was actually decided,
since everything probably ended up

01:06:00.890 --> 01:06:03.990
on your table since you were there.

01:06:04.000 --> 01:06:07.990
It's also used especially in education.

01:06:08.000 --> 01:06:11.990
Students can listen in on the
recorded lectures that they missed

01:06:12.090 --> 01:06:13.980
for one reason or the other.

01:06:14.000 --> 01:06:19.960
Take them 20 lectures at once and still
8 exams at the end of the semester.

01:06:21.910 --> 01:06:24.040
That concludes the features.

01:06:24.150 --> 01:06:29.140
So now I'll leave you with Magnus
that will guide you through some

01:06:29.140 --> 01:06:36.580
of the experiences that we had
developing this for Mac OS X.

01:06:36.580 --> 01:06:36.580
Thank you, Staffan.

01:06:48.150 --> 01:06:51.860
You can hear the audience is impressed
by your ability to work late at night.

01:06:51.910 --> 01:06:54.690
I guess you have a new future.

01:06:55.250 --> 01:07:01.280
As Alan mentioned, we have our roots all
the way back in Java,

01:07:01.440 --> 01:07:03.210
actually at the time
when it was called Oak,

01:07:03.210 --> 01:07:05.320
back in 1994, 1995.

01:07:05.470 --> 01:07:07.190
We worked very close with Sun.

01:07:07.260 --> 01:07:12.120
And we later--it took us to like '99,
actually,

01:07:12.120 --> 01:07:14.600
before we went onto the Windows platform.

01:07:14.730 --> 01:07:19.490
And we have been staying away
from the Mac until Mac OS X.

01:07:19.850 --> 01:07:22.200
That was a huge relief for
us because we have a lot of

01:07:22.200 --> 01:07:26.330
users in the educational field,
and they really love the Mac.

01:07:26.420 --> 01:07:28.340
And so do we these days.

01:07:28.370 --> 01:07:29.590
It's beautiful.

01:07:29.730 --> 01:07:34.880
And the way it comes across with a
Unix operating system in the bottom,

01:07:34.930 --> 01:07:37.990
and we started playing
around with Java 1.3,

01:07:37.990 --> 01:07:42.370
and the performance, it just sucked.

01:07:42.560 --> 01:07:45.940
So once we got to know the
Worldwide Developer Team,

01:07:45.940 --> 01:07:49.160
we started working with Java 1.4.1.

01:07:49.360 --> 01:07:51.400
It was a breeze.

01:07:51.480 --> 01:07:54.870
The service side,
it took us less than a day

01:07:54.930 --> 01:07:59.080
to reuse the Linux version,
putting it on the Unix box.

01:07:59.120 --> 01:08:01.760
The only thing we had to do was
to change the installation script.

01:08:01.840 --> 01:08:05.240
That was about 15 minutes of work,
and we were up and running.

01:08:05.300 --> 01:08:09.480
So we have been running this in an
XR environment since November last year,

01:08:09.500 --> 01:08:12.240
and an uptime of more than six months.

01:08:12.260 --> 01:08:13.720
Beautiful.

01:08:14.080 --> 01:08:17.980
So it's really straightforward,
even though it's a very complex server

01:08:18.000 --> 01:08:21.100
functionality on the server side.

01:08:22.540 --> 01:08:26.900
When it comes to the client side,
it's a different story.

01:08:26.950 --> 01:08:29.400
That's where we have had
our biggest challenges.

01:08:29.500 --> 01:08:35.810
And that's really when we saw the big
improvements from Java 1.3 to 1.4.1.

01:08:35.980 --> 01:08:40.060
Now this application is really usable,
as you have seen on the screen today.

01:08:40.180 --> 01:08:44.730
Most people wouldn't have an idea,
a clue, that this is implemented in Java.

01:08:45.200 --> 01:08:48.620
We have, of course,
had to pull off some tricks.

01:08:48.790 --> 01:08:52.400
Pretty much the way the super video
demo was done earlier tonight,

01:08:52.500 --> 01:08:56.420
we have been using the same
technology with QuickTime Video,

01:08:56.550 --> 01:09:01.100
basically accessing the native code
for doing the rendering and grabbing.

01:09:01.240 --> 01:09:05.190
And it comes out pretty good.

01:09:05.390 --> 01:09:08.110
When it comes to audio,
we have always been working

01:09:08.190 --> 01:09:11.820
very close to the hardware,
because that's really a need,

01:09:11.820 --> 01:09:16.580
to be able to reduce latency
and to handle the packet loss,

01:09:16.580 --> 01:09:17.280
etc.

01:09:17.280 --> 01:09:19.640
We have had a lot of issues
in the world of Windows,

01:09:19.640 --> 01:09:22.200
because every machine has
a different sound card,

01:09:22.200 --> 01:09:24.480
and the operating system
is not that stable,

01:09:24.480 --> 01:09:27.400
I must say,
when it comes to real-time audio.

01:09:27.400 --> 01:09:32.010
When we come to the Mac OS X platform,
we have been astonished about how

01:09:32.030 --> 01:09:36.900
smoothly and how easily it was to
implement this great audio quality.

01:09:36.970 --> 01:09:39.380
It just works, and it works so well.

01:09:39.380 --> 01:09:43.660
So if you want to have
great audio quality,

01:09:43.660 --> 01:09:44.660
it's OS X to go.

01:09:46.330 --> 01:09:50.810
We have also truly appreciated
the support which you find on

01:09:50.810 --> 01:09:57.200
OS X and the ease to access the
PDF functionality supported by Quartz.

01:09:57.200 --> 01:10:01.970
And it just took us a day of work
to have full support to import

01:10:02.050 --> 01:10:05.200
PDF into our interactive whiteboard.

01:10:05.200 --> 01:10:08.140
And that's also really neat,
the ability to do that.

01:10:08.240 --> 01:10:12.160
And what we see is how easy it
is to develop in terms of how

01:10:12.320 --> 01:10:15.200
difficult it many times can be
to develop on other platforms.

01:10:15.200 --> 01:10:18.190
such as the windows.

01:10:20.190 --> 01:10:25.060
And what we have learned is really
that it takes collaboration.

01:10:25.090 --> 01:10:28.160
And we have been working very
closely with the Worldwide

01:10:28.180 --> 01:10:31.860
Developer Team over the last,
I would say, six months,

01:10:31.860 --> 01:10:33.100
or maybe even longer.

01:10:33.350 --> 01:10:37.850
And we really love the
brushed metal look.

01:10:37.900 --> 01:10:42.780
And to be honest,
it really doesn't look this beautiful

01:10:42.790 --> 01:10:44.340
if you just do it with Java.

01:10:44.460 --> 01:10:45.910
You have to pull some tricks.

01:10:46.040 --> 01:10:50.150
But with the Worldwide
Developer Team that is available to you,

01:10:50.150 --> 01:10:52.040
you can do those things.

01:10:52.050 --> 01:10:53.040
It takes some effort.

01:10:53.040 --> 01:10:55.100
But if you ask them,
they will help you out.

01:10:55.110 --> 01:10:59.110
And they will guide you to
make it look truly great.

01:10:59.220 --> 01:11:02.940
So we are very happy with
what we have achieved so far.

01:11:02.990 --> 01:11:06.200
And we would like to thank the
Worldwide Developer Team a lot.

01:11:06.350 --> 01:11:09.170
And I'm sure that you will get
to enjoy their services as well.

01:11:09.420 --> 01:11:09.900
Thank you.

01:11:10.080 --> 01:11:11.740
Thank you, Magnus.

01:11:16.700 --> 01:11:18.700
Thank you.

01:11:18.700 --> 01:11:21.690
Can we go back to slides?

01:11:21.690 --> 01:11:22.460
Can we go back to slides?

01:11:22.480 --> 01:11:22.880
There we go.

01:11:22.880 --> 01:11:30.580
One thing I should add today,
this is a little interesting.

01:11:30.580 --> 01:11:30.580
Magnus didn't know about the little
surprise with the new camera.

01:11:30.850 --> 01:11:33.050
We had not actually tested
this until last week.

01:11:33.110 --> 01:11:35.760
I actually had one of the
prototype units and had to hide

01:11:35.760 --> 01:11:38.600
from everyone and go and test it.

01:11:38.600 --> 01:11:40.870
We had some of the Apple hardware
people that were in,

01:11:40.870 --> 01:11:43.060
and we were using a
couple of the cameras,

01:11:43.110 --> 01:11:47.500
and we were actually connecting
to their XServe in Sweden.

01:11:47.500 --> 01:11:49.600
But I was really only going
two doors down to Apple.

01:11:49.600 --> 01:11:52.260
So I was video conferencing
basically from my office in

01:11:52.400 --> 01:11:55.680
Cupertino to Sweden and then back.

01:11:55.680 --> 01:12:00.040
And the product manager was saying to me,
"Wow, the video is really great.

01:12:00.060 --> 01:12:00.830
This is great.

01:12:00.830 --> 01:12:04.080
Is this like the peer-to-peer
stuff that we're doing?" I said,

01:12:04.080 --> 01:12:08.400
"No, we're actually going to Sweden and
back." We tested out the cameras.

01:12:08.400 --> 01:12:10.780
Everything worked great.

01:12:10.780 --> 01:12:13.900
I think these are going to actually
be--iSight is going to be a nice

01:12:13.900 --> 01:12:16.470
compliment for Ameritech's offering.

01:12:16.480 --> 01:12:20.390
Thanks, Magnus.

01:12:25.910 --> 01:12:27.670
So this is just a kickoff session.

01:12:27.680 --> 01:12:31.040
You guys all probably scouted
out what sessions you wanna go

01:12:31.040 --> 01:12:32.610
to for the rest of the week.

01:12:32.720 --> 01:12:34.760
We've tried to highlight
them in the content,

01:12:34.800 --> 01:12:40.130
so I'm not gonna go over all of these,
but between Java, WebObjects, QuickTime,

01:12:40.130 --> 01:12:44.610
networking, all of the things that we're
gonna be talking about this week,

01:12:44.610 --> 01:12:46.630
there's a whole lot of Java in all of it.

01:12:46.700 --> 01:12:49.700
Let me go ahead and
show you the last one,

01:12:49.700 --> 01:12:52.600
sort of an enterprise side
with all the WebObjects pieces.

01:12:54.080 --> 01:12:55.740
I encourage you to get
to all the sessions,

01:12:55.750 --> 01:12:58.320
especially the people that are
doing the QuickTime for Java stuff.

01:12:58.510 --> 01:13:02.680
Please go to the QuickTime API session
and give them feedback on that.

01:13:02.680 --> 01:13:07.680
And with that, I'll give you guys our
contact information,

01:13:07.680 --> 01:13:09.820
and I wanna thank you
very much for coming,

01:13:09.820 --> 01:13:11.080
and we appreciate your time.

01:13:11.080 --> 01:13:13.790
Look forward to seeing you
guys the rest of the week.