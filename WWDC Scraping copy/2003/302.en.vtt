WEBVTT

00:00:26.490 --> 00:00:29.260
Hello, everybody,
and welcome to session 302,

00:00:29.370 --> 00:00:31.530
Introduction to Xcode.

00:00:31.750 --> 00:00:34.240
I hope that was the glitch
for the evening with the bad

00:00:34.240 --> 00:00:38.490
batteries in the clicker.

00:00:39.590 --> 00:00:40.500
That's me.

00:00:40.600 --> 00:00:45.040
And, all right.

00:00:45.040 --> 00:00:48.830
We have a full packed program,
and we'll be going a little bit

00:00:48.850 --> 00:00:53.720
more in depth from what you've
seen yesterday in session 300.

00:00:53.820 --> 00:00:58.180
Let's talk about what does it
take today to be a modern IDE.

00:01:00.170 --> 00:01:02.640
First of all,
you have to have a streamlined workflow.

00:01:02.690 --> 00:01:04.360
These days, your projects are huge.

00:01:04.400 --> 00:01:08.580
You have tons of resources,
many hundreds, thousands of source files,

00:01:08.590 --> 00:01:09.480
et cetera.

00:01:09.480 --> 00:01:11.950
And you need to be able to focus
really quickly on what it is

00:01:11.950 --> 00:01:15.560
that you're working on right now,
and be able to manage and navigate

00:01:15.560 --> 00:01:18.040
all those files really efficiently.

00:01:20.630 --> 00:01:21.800
You also need a powerful editor.

00:01:21.800 --> 00:01:22.840
That goes without saying.

00:01:22.840 --> 00:01:25.300
You have to be able to go
through your long files,

00:01:25.330 --> 00:01:28.880
find your methods,
navigate through all that source code,

00:01:28.920 --> 00:01:31.490
maybe group files together,
which you're working on,

00:01:31.490 --> 00:01:33.160
just having a small working set.

00:01:33.200 --> 00:01:35.470
You need a fast and
flexible build system.

00:01:35.470 --> 00:01:38.680
Fast goes without saying,
because your product is so big.

00:01:38.700 --> 00:01:40.870
But it also has to be flexible.

00:01:40.870 --> 00:01:45.040
You have to be able to customize it,
what to do with a C++ file,

00:01:45.040 --> 00:01:47.450
what to do with a Nib file, etc.

00:01:47.460 --> 00:01:51.420
So you need to be able to
make it just right for you.

00:01:51.420 --> 00:01:53.420
You need to have quick
documentation access.

00:01:53.420 --> 00:01:55.310
OS X is really powerful.

00:01:55.450 --> 00:01:59.110
It has really powerful APIs,
Cocoa and Carbon.

00:01:59.440 --> 00:02:03.420
All together they have numerous
thousands of API calls,

00:02:03.420 --> 00:02:06.900
and you have to have an access to
documentation of those API calls

00:02:06.900 --> 00:02:09.420
really in an efficient way.

00:02:09.420 --> 00:02:15.410
And it should be integrated
with the UI and profiling tools.

00:02:16.940 --> 00:02:18.960
Code that you're writing
is just part of the story,

00:02:18.960 --> 00:02:19.390
right?

00:02:19.450 --> 00:02:22.220
You're also doing the
user interface design.

00:02:22.220 --> 00:02:23.740
Maybe it's not you
who's doing the design,

00:02:23.740 --> 00:02:26.980
maybe there's somebody else doing it,
but you better integrate,

00:02:26.980 --> 00:02:30.180
so when you add in your resource file,
it gets reflected in your IDE.

00:02:30.220 --> 00:02:36.530
Then profiling, you wrote your app,
it's finally working, it's not crashing,

00:02:36.530 --> 00:02:40.200
but it's kind of slow,
so you need to profile.

00:02:40.200 --> 00:02:41.500
It would be good if the
profiling tools knew about the

00:02:41.500 --> 00:02:41.500
source code and vice versa.

00:02:42.440 --> 00:02:46.730
So finally, source control management.

00:02:47.070 --> 00:02:49.610
Chances are that if you're
writing a large application,

00:02:49.610 --> 00:02:50.820
you need to write it on your own.

00:02:51.010 --> 00:02:53.920
So there's a large team of you,
maybe there's a dozen,

00:02:53.920 --> 00:03:00.020
maybe there's a hundred of people,
and you need to integrate with

00:03:00.170 --> 00:03:04.600
different people together through
the source control management.

00:03:04.600 --> 00:03:04.600
And the last-- I don't think
the batteries are quite there.

00:03:06.430 --> 00:03:09.900
The last thing that you need is
API awareness in the debugger.

00:03:09.900 --> 00:03:11.920
Source-level debugging
goes without saying,

00:03:12.050 --> 00:03:16.290
but it will be really nice
if you had direct display of

00:03:16.290 --> 00:03:21.720
your own personal data types,
as well, in the debugger.

00:03:22.220 --> 00:03:24.180
So now let's have a quick look at Xcode.

00:03:24.260 --> 00:03:26.800
Here we can see we do have
a streamlined workflow.

00:03:26.800 --> 00:03:31.260
As Steve Naroff showed yesterday, in 300,
you have really quick access to all

00:03:31.260 --> 00:03:32.840
of your data and all of your files.

00:03:32.880 --> 00:03:34.760
You do have a powerful editor.

00:03:34.760 --> 00:03:36.550
It features code completion.

00:03:36.640 --> 00:03:39.310
Today,
we will show you how it really works.

00:03:39.400 --> 00:03:43.980
You have access to your methods,
to individual methods,

00:03:43.980 --> 00:03:46.410
to files by groups, etc.,

00:03:47.170 --> 00:03:50.090
You do have a fast and
flexible build system.

00:03:50.200 --> 00:03:52.780
Today,
we will not go quite in-depth on that.

00:03:52.780 --> 00:03:56.480
There's session 303 in
24 hours right here,

00:03:56.480 --> 00:03:59.570
so you can see more
detail about that there.

00:04:00.210 --> 00:04:04.090
You have quick access to documentation.

00:04:04.200 --> 00:04:06.470
Apple's previous tools were
actually pretty good at

00:04:06.480 --> 00:04:08.930
integrating the documentation,
but we have made it much,

00:04:08.930 --> 00:04:12.270
much more efficient even
than what we had so far.

00:04:12.440 --> 00:04:14.340
We're now using the
Safari rendering engine,

00:04:14.340 --> 00:04:17.580
as you saw maybe in the previous session,
and that makes rendering

00:04:17.580 --> 00:04:22.260
of documentation much,
much faster and prettier.

00:04:22.370 --> 00:04:25.790
And it is integrated with
UI and profiling tools.

00:04:25.890 --> 00:04:29.020
We will see some demos
of that later today.

00:04:29.920 --> 00:04:33.040
It is integrated with
source control management.

00:04:33.140 --> 00:04:37.800
Xcode features integration with CVS,
and also with Perforce.

00:04:37.930 --> 00:04:40.790
This screenshot is not necessarily
the most indicative of that.

00:04:40.790 --> 00:04:44.800
And we do have API awareness
in the debugger.

00:04:44.800 --> 00:04:48.800
Again,
main is not the best place to show.

00:04:48.960 --> 00:04:49.830
But it gets even better.

00:04:49.830 --> 00:04:51.800
These were the of courses.

00:04:52.050 --> 00:04:53.800
Speed is really important.

00:04:53.900 --> 00:04:58.560
So we have taken great care of
improving many little things

00:04:58.720 --> 00:05:00.460
which add up to a big picture.

00:05:00.460 --> 00:05:04.190
First, we added Zero Link,
which basically eliminates the

00:05:04.190 --> 00:05:07.160
need for linking altogether
during the development cycle.

00:05:07.160 --> 00:05:10.820
We have added Fix and Continue,
which eliminates the need

00:05:10.950 --> 00:05:14.720
to stop and relaunch your
application while debugging.

00:05:15.440 --> 00:05:19.600
We have an annotated source editor,
so that any compiler errors

00:05:19.600 --> 00:05:22.440
or warnings are visible right
in the editor as you're there.

00:05:22.440 --> 00:05:26.010
You don't need to have an extra
panel pop up and click between

00:05:26.130 --> 00:05:29.850
windows if you choose not to do that.

00:05:30.120 --> 00:05:34.390
We have CodeSense,
which is our way of code completion,

00:05:34.410 --> 00:05:36.480
but it's actually more than that,
and more on that later.

00:05:36.480 --> 00:05:38.950
We have parallel and distributed builds.

00:05:39.040 --> 00:05:42.260
You saw a demo of that yesterday,
using all those beautiful

00:05:42.260 --> 00:05:43.130
Xsers over there.

00:05:43.140 --> 00:05:45.140
It works even without Xsers.

00:05:45.140 --> 00:05:47.860
It works with just your
neighbor's computer,

00:05:47.860 --> 00:05:51.080
or when you're at home
with your wife's computer.

00:05:51.080 --> 00:05:55.730
We do have predictive compilation that
kicks off the compiler in the background,

00:05:55.730 --> 00:05:58.450
while you're still typing.

00:05:58.460 --> 00:05:59.340
and...

00:06:02.890 --> 00:06:05.040
So when you add it all together,
it actually adds up to

00:06:05.040 --> 00:06:06.900
something that's really,
really fast.

00:06:07.000 --> 00:06:11.630
All of those little things put
together are something very fast.

00:06:13.040 --> 00:06:16.750
So let's have a closer
look at all those things.

00:06:16.800 --> 00:06:19.260
This was just very superficial.

00:06:19.310 --> 00:06:23.040
Now the project window,
as you saw before,

00:06:23.090 --> 00:06:27.230
on the left side you have
an outline view of groups.

00:06:27.280 --> 00:06:29.020
You have static and dynamic groups.

00:06:29.070 --> 00:06:31.980
Static groups you create
the way you want them to be.

00:06:32.090 --> 00:06:36.110
And dynamic groups-- we also call them
sometimes smart groups-- are generated

00:06:36.110 --> 00:06:38.000
and maintained for you by Xcode.

00:06:38.160 --> 00:06:42.740
You can have files filtered
or kept together by type,

00:06:42.740 --> 00:06:45.110
by file name.

00:06:45.120 --> 00:06:48.180
You also have smart
groups for find results,

00:06:48.270 --> 00:06:50.720
for errors, et cetera.

00:06:50.890 --> 00:06:54.460
You can do searching and
filtering on any of those groups.

00:06:54.570 --> 00:06:59.630
So you can search on
special variable name,

00:06:59.780 --> 00:07:02.290
and then you can filter just
in which files you want to

00:07:02.290 --> 00:07:03.560
look at them furthermore.

00:07:03.560 --> 00:07:06.380
This is very important
when you do a batch find,

00:07:06.380 --> 00:07:09.100
or maybe even a batch replace,
and you find yourself

00:07:09.100 --> 00:07:09.900
in a lot of trouble.

00:07:09.900 --> 00:07:11.100
You need to narrow down the search.

00:07:12.330 --> 00:07:14.200
You have an optional integrated editor.

00:07:14.220 --> 00:07:18.630
You can use the main project
window for text editing as well.

00:07:18.630 --> 00:07:21.590
So that eliminates the need
for having many windows,

00:07:21.610 --> 00:07:24.380
which is especially helpful
when using a 12-inch PowerBook,

00:07:24.380 --> 00:07:25.140
for instance.

00:07:25.140 --> 00:07:27.570
And you have inspectors
with search fields.

00:07:27.780 --> 00:07:31.330
We'll see more of that in the demo,
but it allows you to search

00:07:31.330 --> 00:07:35.210
and find compiler settings,
for instance, very quickly.

00:07:36.530 --> 00:07:38.960
The Xcode editor is the
other very important,

00:07:38.960 --> 00:07:41.640
it's the key part where you're
probably going to spend the most time,

00:07:41.640 --> 00:07:43.210
because you're writing source.

00:07:43.220 --> 00:07:47.920
It allows you to apply sources to
the application which is running,

00:07:47.920 --> 00:07:50.330
as it is running from within the editor.

00:07:50.340 --> 00:07:52.240
You don't even have to
open the debugger window.

00:07:52.240 --> 00:07:54.310
You can do it right away from the editor.

00:07:54.320 --> 00:07:56.020
It features CodeSense.

00:07:56.110 --> 00:07:59.160
Again, that's code completion and more.

00:07:59.160 --> 00:08:03.400
The errors are shown in source code,
and we'll see that in the demo.

00:08:03.400 --> 00:08:06.910
You have quick access to
documentation through command clicks,

00:08:07.030 --> 00:08:08.830
option clicks, and through other means.

00:08:08.860 --> 00:08:12.400
And you, of course,
do have customizable key bindings.

00:08:12.400 --> 00:08:14.740
You can set up your own key bindings.

00:08:14.780 --> 00:08:20.210
You can set up, we have pre-canned Emacs,
CodeWarrior, MPW, and other key bindings.

00:08:23.440 --> 00:08:26.220
Now CodeSense,
I mentioned it a few times before.

00:08:26.280 --> 00:08:30.340
Xcode stays completely
aware of your source code.

00:08:30.390 --> 00:08:36.420
It parses your code in the background,
and as you make changes to it,

00:08:36.460 --> 00:08:37.620
it knows what you're doing.

00:08:37.620 --> 00:08:42.540
So it offers you code-sensitive,
context-sensitive code completion.

00:08:42.540 --> 00:08:45.250
It also allows you to do class browsing.

00:08:45.260 --> 00:08:49.910
Yesterday in a demo,
you saw briefly search on symbols.

00:08:49.910 --> 00:08:53.380
You can search just on definitions,
on many other things.

00:08:53.400 --> 00:08:54.920
And we'll see that
later today in the demo.

00:08:54.920 --> 00:08:58.940
And there's going to be more coming
based on this technology of CodeSense

00:08:59.040 --> 00:09:01.100
in a future release of CodeSense.

00:09:03.700 --> 00:09:07.330
What's important about it is
it works for code in progress.

00:09:07.390 --> 00:09:09.280
It doesn't have to be compiled.

00:09:09.380 --> 00:09:12.600
So as you're typing new code,
and even if it has bugs in it,

00:09:12.640 --> 00:09:14.620
like you forgot some
curly brace somewhere,

00:09:14.710 --> 00:09:16.080
it will still work.

00:09:16.180 --> 00:09:17.530
And that's very powerful.

00:09:17.710 --> 00:09:21.610
Yet it uses the same parser,
or very close to the same

00:09:21.710 --> 00:09:22.680
parser as the compiler.

00:09:22.680 --> 00:09:25.700
So it's taking the same
path as your compiled code,

00:09:25.700 --> 00:09:28.940
which is also very important
when you do if-defs.

00:09:30.060 --> 00:09:34.580
Works for C, C++, Objective-C,
and Objective-C++.

00:09:34.640 --> 00:09:39.110
And we will be adding Java support
for that in Panther GM.

00:09:40.910 --> 00:09:41.750
Now the inspectors.

00:09:41.920 --> 00:09:48.720
In Xcode,
we have added a new set of inspectors

00:09:48.790 --> 00:09:52.160
with a consistent user interface,
very simple interface.

00:09:52.290 --> 00:09:56.350
It allows you to inspect
target dependencies.

00:09:56.760 --> 00:09:59.950
To set compiler options
on a clear text way,

00:10:00.150 --> 00:10:03.190
which is very user-friendly,
and to view documentation for your

00:10:03.190 --> 00:10:05.260
compiler settings and linker settings,
etc.

00:10:05.260 --> 00:10:09.020
It allows you to set up the build rules,
as I said, those are the rules,

00:10:09.120 --> 00:10:12.520
what to do with a C file,
what to do with a Nib file, etc.

00:10:12.520 --> 00:10:15.710
You can add your own rules,
you can change the rules that we ship.

00:10:15.760 --> 00:10:19.680
Project settings,
which are more global settings,

00:10:19.680 --> 00:10:24.170
like where to build,
where to put the intermediate stuff.

00:10:25.430 --> 00:10:30.150
CodeSense settings, which is Inspector,
which needs to be properly applied

00:10:30.150 --> 00:10:31.420
when you actually want to use it.

00:10:31.420 --> 00:10:36.130
And source code settings,
that would be indentation, tab stops,

00:10:36.590 --> 00:10:41.610
filing codings, or using UTF-8,
or using just plain Mac OS Roman.

00:10:41.660 --> 00:10:45.820
And I talked a lot,
I would like to invite Matt Firlik,

00:10:45.920 --> 00:10:49.280
senior engineer on the Xcode team,
and he's going to show

00:10:49.360 --> 00:10:50.520
us the workflow in Xcode.

00:10:50.540 --> 00:10:52.900
So Matt, what do you have for us?

00:10:52.940 --> 00:10:54.830
Thank you, Stan.

00:10:59.600 --> 00:11:01.640
We haven't done anything yet, so hold on.

00:11:01.770 --> 00:11:04.140
So we're going to talk about
some of the workflow issues.

00:11:04.160 --> 00:11:07.690
One of the complex parts about
workflow is that we all spend a great

00:11:07.690 --> 00:11:09.540
deal of time with workflow every day.

00:11:09.750 --> 00:11:14.080
We move between files, debugging,
documentation, a whole gamut of things.

00:11:14.080 --> 00:11:17.590
But the complexity comes in that we all
do it just a little bit differently.

00:11:17.610 --> 00:11:19.720
Some people like their
windows in certain places,

00:11:19.720 --> 00:11:21.520
certain sizes, certain keystrokes.

00:11:21.530 --> 00:11:25.260
The important thing to note about Xcode
is that instead of trying to provide a

00:11:25.270 --> 00:11:29.080
single idiomatic approach to workflow,
instead we take the approach of

00:11:29.080 --> 00:11:32.330
providing flexible and customizable
options for navigation and

00:11:32.330 --> 00:11:35.790
organization of your projects,
so that it works as you expect it,

00:11:35.850 --> 00:11:37.200
but works for everyone.

00:11:37.200 --> 00:11:38.740
So let's take a look at it.

00:11:38.760 --> 00:11:41.950
We're going to take a look
at a Carbon example today,

00:11:41.990 --> 00:11:43.680
one that actually ships on the system.

00:11:43.690 --> 00:11:45.670
It's called ClockView.

00:11:45.900 --> 00:14:21.700
[Transcript missing]

00:14:21.900 --> 00:14:23.600
So it always shows you
an amalgam of that.

00:14:23.680 --> 00:14:25.960
This becomes extremely useful,
as Stan mentioned before,

00:14:25.960 --> 00:14:27.540
when we do something like find.

00:14:27.640 --> 00:14:30.040
For example, if I was going to bring
up the Batch Find panel,

00:14:30.040 --> 00:14:32.520
I can actually go ahead
and type in the string OS.

00:14:32.680 --> 00:14:36.460
I want to find where this string exists
within every single file in my project.

00:14:36.630 --> 00:14:38.560
Click on Find,
and it's going to go ahead and show

00:14:38.560 --> 00:14:40.060
me that list in the detail group.

00:14:40.170 --> 00:14:42.220
Same idea,
same metaphor that we used before,

00:14:42.220 --> 00:14:43.780
but it's showing me find results.

00:14:43.860 --> 00:14:47.190
And in this case,
the status shows me I have 218 selected.

00:14:47.370 --> 00:14:52.320
What if I did that again, and looked for,
in this case, HIView.

00:14:53.800 --> 00:14:55.680
I have 32 in this case.

00:14:55.680 --> 00:14:57.730
If I go ahead and select
both of these together,

00:14:57.730 --> 00:14:59.840
you can see that-- maybe
some of you can't see,

00:14:59.840 --> 00:15:01.920
but it does really say 250 up there.

00:15:01.990 --> 00:15:08.690
And if I go ahead and type in main.cp,
there is every instance of

00:15:08.690 --> 00:15:15.620
those two strings in main.cp,
which makes it very useful and very

00:15:15.620 --> 00:15:15.620
quick and easy to get at the content
you want by looking at things in groups.

00:15:20.490 --> 00:15:22.350
We can also, as Stan said,
do the same thing for

00:15:22.350 --> 00:15:23.680
your project symbols.

00:15:23.680 --> 00:15:26.230
The information from this comes
from the persistent symbol index,

00:15:26.230 --> 00:15:27.460
as Stan mentioned before.

00:15:27.570 --> 00:15:30.620
And these are all the symbols that
is in this particular application.

00:15:30.620 --> 00:15:33.330
The number up here says
a little under 11,000.

00:15:33.400 --> 00:15:37.990
I can actually go through and look for
all of the methods that look for bounds.

00:15:38.010 --> 00:15:40.290
And I can see all the
implementations of those.

00:15:40.330 --> 00:15:43.200
Making it really quick and easy
to go and find the content you're

00:15:43.200 --> 00:15:45.060
looking for to go straight to it.

00:15:45.060 --> 00:15:47.020
So we've talked a little
bit about organization.

00:15:47.020 --> 00:15:48.400
Let's talk about navigation.

00:15:48.500 --> 00:15:49.760
How do I actually get to content?

00:15:49.760 --> 00:15:50.560
How do I work with it?

00:15:50.560 --> 00:15:53.040
This is one of those things
that starts to become a little

00:15:53.040 --> 00:15:54.620
bit personal about editors.

00:15:54.620 --> 00:15:56.500
Where does your editor go?

00:15:56.550 --> 00:16:00.600
So in some cases, people like editors to
be all in one window.

00:16:00.620 --> 00:16:03.530
So we have this button up here,
which allows you to pull up the embedded

00:16:03.530 --> 00:16:05.260
editor and look at your content.

00:16:05.270 --> 00:16:08.750
So I can go back to my sources,
taking out the little

00:16:09.130 --> 00:16:13.060
item up here in my filter,
click on a file, and it shows up in line.

00:16:13.080 --> 00:16:16.080
So I can go ahead and take a look
at my file using the built-in

00:16:16.080 --> 00:16:17.600
functionality of the editor.

00:16:17.600 --> 00:16:19.760
I can scroll down to something
that I want to create to edit.

00:16:19.810 --> 00:16:23.050
Or I can use the function pop-up,
which lists all the functions

00:16:23.340 --> 00:16:25.790
in this particular class,
and jump to something

00:16:25.790 --> 00:16:27.100
that I want to work with.

00:16:27.120 --> 00:16:30.130
As I select more and more files,
each file is put into

00:16:30.130 --> 00:16:32.780
the particular view,
and I can go ahead and work on it.

00:16:32.810 --> 00:16:34.860
But as you see,
it takes up a lot of screen.

00:16:34.890 --> 00:16:37.270
And some people may want
a larger detail view.

00:16:37.330 --> 00:16:40.670
So in some cases,
you may want to have an external editor.

00:16:40.760 --> 00:16:44.240
So as one of the main idioms
in Xcode is double-clicking

00:16:44.240 --> 00:16:46.650
brings up an external editor.

00:16:46.720 --> 00:16:48.620
So I'll go ahead and
double-click on a file.

00:16:48.620 --> 00:16:49.730
And there's my main.cp.

00:16:49.760 --> 00:16:52.830
I can go ahead and actually
double-click on the rest of these.

00:16:52.970 --> 00:16:55.310
And I can bring up external
editors for all of them,

00:16:55.360 --> 00:16:57.320
which then brings up the
very important question,

00:16:57.390 --> 00:17:00.170
how many windows is too many?

00:17:00.250 --> 00:17:02.620
In this case, I have three open,
which starts to kind of

00:17:02.730 --> 00:17:04.360
clutter my screen real estate.

00:17:04.470 --> 00:17:07.120
So there's an actual nice
little customization here,

00:17:07.160 --> 00:17:09.970
where in the upper right-hand
corner of the editor is something

00:17:09.970 --> 00:17:11.050
called the editing mode.

00:17:11.210 --> 00:17:13.420
For those of you who can see this icon,
it looks like there's three windows

00:17:13.610 --> 00:17:15.320
paned one in front of the other.

00:17:15.360 --> 00:17:19.760
If I go ahead and click that,
it becomes a single pane that now

00:17:19.760 --> 00:17:23.150
every time I double-click on a file,
it's opened in that editor.

00:17:23.400 --> 00:17:26.040
So it's always open in
one external editor,

00:17:26.070 --> 00:17:29.250
giving you the ability to work
in the way you might like.

00:17:29.440 --> 00:17:31.580
However,
once I have this external editor open,

00:17:31.600 --> 00:17:34.480
I have to keep going back and
forth to get more and more files.

00:17:34.670 --> 00:17:37.170
And it kind of destroys the
flexibility of having this

00:17:37.240 --> 00:17:38.760
separate window to edit things.

00:17:38.840 --> 00:17:42.020
So much as I said double-clicking on
something would open up a particular

00:17:42.020 --> 00:17:44.150
file in the external editor,
I could actually

00:17:44.270 --> 00:17:45.460
double-click on a folder.

00:17:45.500 --> 00:17:48.480
In this case, it actually opens the
first item in that folder.

00:17:48.530 --> 00:17:51.060
But I can go ahead and click--
I can go ahead and drag the groups

00:17:51.060 --> 00:17:52.760
and see the groups on the left.

00:17:52.790 --> 00:17:55.030
So now you can start thinking
of editors as collections of

00:17:55.030 --> 00:17:58.040
things that you want to work on,
bringing up possibly more than one,

00:17:58.090 --> 00:18:00.910
but still having the flexibility
to either click on the file or

00:18:00.980 --> 00:18:04.900
just go ahead and drag into the
editor and go ahead and work on it.

00:18:04.900 --> 00:18:07.500
This, of course,
works the same for the project,

00:18:07.500 --> 00:18:08.580
where I can click there.

00:18:08.580 --> 00:18:12.070
And now I have the entire contents
of my project in one external editor,

00:18:12.070 --> 00:18:14.420
which then allows me to go
back and use a feature that we

00:18:14.420 --> 00:18:17.060
affectionately call MetroMore,
which is to double-click

00:18:17.060 --> 00:18:19.360
on these column headers.

00:18:19.360 --> 00:18:21.000
And I can get some more workspace back.

00:18:21.050 --> 00:18:23.520
So now I can start looking at more
and more windows without having to

00:18:23.520 --> 00:18:27.040
resort to using expose or something
to see all the windows to give you

00:18:27.040 --> 00:18:29.070
a little bit more functionality.

00:18:29.370 --> 00:18:31.630
So once we've edited, or actually,
let me take that back.

00:18:31.650 --> 00:18:34.110
Once we've gone to a particular file,
let's talk about things

00:18:34.110 --> 00:18:35.540
that we would want to edit.

00:18:35.650 --> 00:18:41.200
So I can go down and let's scroll down to
the bottom here of this particular class.

00:18:41.290 --> 00:18:43.260
I have a method here, hi set visible.

00:18:43.280 --> 00:18:46.130
Let's just say, for whatever sake,
as I was developing with this,

00:18:46.170 --> 00:18:47.760
I didn't actually put that in.

00:18:47.830 --> 00:18:49.960
And I knew that I needed
to put something here.

00:18:50.030 --> 00:18:51.640
If I weren't familiar
with some of the APIs,

00:18:51.650 --> 00:18:53.980
or I needed more information,
what I would like to do is use some

00:18:53.980 --> 00:18:57.900
of the other assets that Xcode has
to provide this information for me.

00:18:57.980 --> 00:19:01.930
One way of doing that is to
go to the documentation window

00:19:02.140 --> 00:19:04.340
which provides me a list of all
the information that I can look

00:19:04.340 --> 00:19:07.710
at based on a particular topic,
like Carbon,

00:19:07.820 --> 00:19:09.590
so I can scroll down through the topics.

00:19:09.710 --> 00:19:12.460
Or I could actually use the
nice little API search to go

00:19:12.460 --> 00:19:18.120
ahead and type in something,
like hiviewset, find the function I want,

00:19:18.200 --> 00:19:20.440
click on it, and see the documentation.

00:19:20.530 --> 00:19:22.710
Very quick way to get to
information about things that

00:19:23.010 --> 00:19:24.680
you use or you want to use.

00:19:24.800 --> 00:19:27.840
However, in some cases,
going to the documentation might take

00:19:27.840 --> 00:19:30.980
a little bit of time if you're not
sure exactly what you might need.

00:19:31.080 --> 00:19:33.880
This is where some things
like CodeSense comes in mind.

00:19:33.970 --> 00:19:36.240
You might want to go back to the Symbol
Smart Group and do some filtering

00:19:36.310 --> 00:19:37.870
looking for a particular method.

00:19:37.980 --> 00:19:41.360
You might also want to bring up
the class browser that we ship

00:19:41.460 --> 00:19:44.490
that also has the same information
showing you the hierarchy of

00:19:44.490 --> 00:19:46.600
the information in your classes.

00:19:46.640 --> 00:19:48.430
I can go through and click
on a particular method,

00:19:48.550 --> 00:19:51.300
actually see the definitions,
go ahead and look at those and use one

00:19:51.310 --> 00:19:56.330
of those in my particular implementation,
which is great for reference information.

00:19:56.340 --> 00:19:57.820
But when you're in the
midst of developing code,

00:19:57.820 --> 00:19:59.960
what you really want is you want
that information at your fingertips.

00:19:59.960 --> 00:20:02.010
You figure Xcode already knows about it.

00:20:02.060 --> 00:20:04.760
I'm not really sure what I want yet,
but why can't you just give it to me?

00:20:04.760 --> 00:20:07.420
Well, as Stan has pointed out,
we actually have.

00:20:07.500 --> 00:20:11.570
So what we do is provide as one of the
features of CodeSense is code completion.

00:20:11.580 --> 00:20:14.240
It's the ability to figure out
contextually where you are with some

00:20:14.430 --> 00:20:17.500
information about potentially what
you want to give you that information.

00:20:17.500 --> 00:20:18.880
So I'm just going to start typing here.

00:20:18.900 --> 00:20:20.800
I'm going to type hi,
and I'm going to go ahead

00:20:20.800 --> 00:20:22.140
and hit the completion key.

00:20:22.140 --> 00:20:24.210
What it's going to do is it's
actually going to go ahead

00:20:24.210 --> 00:20:26.800
and take that information,
take that prefix,

00:20:26.800 --> 00:20:28.810
take contextually where I am,
and go and try and figure

00:20:28.810 --> 00:20:29.760
out what it should provide.

00:20:29.760 --> 00:20:32.200
In this case,
it went back and pulled out all the

00:20:32.450 --> 00:20:34.660
list of functions that start with hi.

00:20:34.660 --> 00:20:36.510
Actually,
let me go ahead and move my window

00:20:36.510 --> 00:20:40.810
over here a little bit so that I can
show this to you a little more easily.

00:20:41.290 --> 00:20:42.660
You'll see that there's a
nice little scroller here.

00:20:42.660 --> 00:20:46.210
I can actually scroll through this
extremely long list of elements,

00:20:46.210 --> 00:20:48.350
which gets me closer to what I want.

00:20:48.460 --> 00:20:50.280
But I'm looking for more information.

00:20:50.290 --> 00:20:52.170
So I could actually just
go ahead and keep typing.

00:20:52.240 --> 00:20:53.840
I could actually just type hiview.

00:20:53.840 --> 00:20:57.230
And you'll see that the list actually
starts to filter itself down.

00:20:57.250 --> 00:20:59.380
I can back up and type a.

00:20:59.380 --> 00:21:02.580
And see in this case,
there are only four elements that match.

00:21:02.580 --> 00:21:04.580
I could type b and c some more.

00:21:04.790 --> 00:21:08.330
But in this case,
what I'm really looking for is--

00:21:08.820 --> 00:21:23.120
and Dan Brunner, and Dan Lebowitz,
are the founders of the

00:21:23.120 --> 00:21:29.590
Google Cloud Platform.

00:21:29.590 --> 00:21:29.590
The first step is to
create a new application,

00:21:29.590 --> 00:21:29.590
and the second step is to
create a new application.

00:21:30.400 --> 00:21:31.740
and use code completion.

00:21:31.740 --> 00:21:33.840
Very,
very quick and easy to go and get the

00:21:33.840 --> 00:21:36.300
information you want right in line.

00:21:36.390 --> 00:21:38.810
So, there are a number of--

00:21:43.880 --> 00:21:44.140
Thank you.

00:21:44.230 --> 00:21:46.890
It's important to note that there
are a number of preferences and

00:21:46.940 --> 00:21:50.390
configurations to a number of
functionality pieces within Xcode.

00:21:50.460 --> 00:21:52.260
Typically,
to go ahead and edit some of those,

00:21:52.260 --> 00:21:55.100
you would go to the Preferences
and pull up the Preferences panel.

00:21:55.100 --> 00:21:58.580
In this case, for the code completion,
Code Sense, they're all under the

00:21:58.580 --> 00:22:00.410
Navigation Preferences,
and you could set it up so

00:22:00.410 --> 00:22:02.840
that it automatically pops up
when you dereference a pointer,

00:22:02.840 --> 00:22:06.640
when you type a period,
and also filter if it's case sensitive

00:22:06.650 --> 00:22:08.920
when it brings up information.

00:22:09.030 --> 00:22:11.340
You can also go to the
Preferences and set key bindings,

00:22:11.340 --> 00:22:14.800
an extremely useful feature for
mapping your keyboard to exactly

00:22:14.800 --> 00:22:16.140
the functionality you want.

00:22:16.140 --> 00:22:18.720
In some cases, with code completion,
people want escape.

00:22:18.720 --> 00:22:19.810
Some people want F5.

00:22:19.830 --> 00:22:21.320
Some people want different keystrokes.

00:22:21.320 --> 00:22:23.880
And we give you the ability to take
code completion and all the other

00:22:23.920 --> 00:22:27.800
functionalities and map them to the key
sets that you're most familiar with.

00:22:27.800 --> 00:22:31.690
When you want to go and edit things that
aren't particular to the application

00:22:31.740 --> 00:22:34.900
itself instead of key bindings,
you want to look at things

00:22:34.900 --> 00:22:37.720
for information on files,
I can actually navigate to a

00:22:37.940 --> 00:22:40.630
file and bring up the inspector.

00:22:40.890 --> 00:22:42.800
In most cases,
when you want to edit something,

00:22:42.800 --> 00:22:44.670
the Inspector is where
you're going to go.

00:22:44.680 --> 00:22:46.750
And the Inspector is a
context-sensitive way of looking at

00:22:46.910 --> 00:22:48.760
different aspects of your project.

00:22:48.760 --> 00:22:52.580
In this case, I'm looking at the general
information for the main.cp file.

00:22:52.710 --> 00:22:55.080
But I should actually go ahead
and click up on the project.

00:22:55.080 --> 00:22:57.680
And now I'm looking at the
information on the project,

00:22:57.680 --> 00:22:59.720
build styles and other aspects.

00:22:59.720 --> 00:23:01.020
So when you want to go
ahead and edit information,

00:23:01.020 --> 00:23:02.960
you're going to do so
with the Inspectors.

00:23:02.960 --> 00:23:05.740
So that's just a quick overview
of some of the workflow aspects.

00:23:05.740 --> 00:23:08.940
You'll see more about the Inspectors
with the compiling and debugging in

00:23:08.940 --> 00:23:11.400
later sessions in this demonstration.

00:23:11.480 --> 00:23:12.990
Thank you.

00:23:19.040 --> 00:23:21.320
Thanks Matt for the very good demo.

00:23:21.440 --> 00:23:22.650
Now, let's move on.

00:23:22.650 --> 00:23:24.470
There's way more to come.

00:23:24.540 --> 00:23:26.500
Okay,
so now I've written your source code.

00:23:26.500 --> 00:23:28.100
It's all beautifully completed.

00:23:28.100 --> 00:23:32.080
You read the documentation on
exactly what the app will be doing.

00:23:32.320 --> 00:23:33.070
Now we need to build it.

00:23:33.180 --> 00:23:35.120
We need the build system for that.

00:23:35.170 --> 00:23:39.580
Xcode has a fully integrated
build system that's into the IDE.

00:23:39.580 --> 00:23:40.580
What does it mean?

00:23:40.710 --> 00:23:44.340
Well, it's not using or relying on
external tools such as Make or

00:23:44.340 --> 00:23:46.460
Jam or Ant or things like that.

00:23:46.570 --> 00:23:49.430
It just knows the state of your project.

00:23:49.430 --> 00:23:53.980
It knows which files you have touched,
which headers maybe you have touched.

00:23:53.980 --> 00:23:56.190
So it has a fast dependency analysis.

00:23:56.190 --> 00:23:59.430
It knows that when you change a header,
it needs to recompile also

00:23:59.530 --> 00:24:02.050
this set of source files.

00:24:02.060 --> 00:24:05.160
And that's immediately
reflected in the user interface.

00:24:05.160 --> 00:24:07.500
You have an up-to-date status.

00:24:07.500 --> 00:24:10.920
You have also error annotation,
which was mentioned before,

00:24:10.920 --> 00:24:14.340
but it's also shown in the main project
window when there's a new project.

00:24:14.340 --> 00:24:16.280
There's a compiler error or warning.

00:24:16.510 --> 00:24:19.900
And you have an optional access
to see all the gory details.

00:24:19.900 --> 00:24:21.620
That is usually hidden away from you.

00:24:21.740 --> 00:24:24.350
But if you need to,
if you're really debugging a bizarre

00:24:24.350 --> 00:24:27.620
error that it just says build
failed because of something that

00:24:27.620 --> 00:24:31.220
you would expect would be working,
well, maybe it just ran out of space or

00:24:31.220 --> 00:24:33.340
something even more cryptic happened.

00:24:33.380 --> 00:24:36.880
So you can access those gory details.

00:24:37.740 --> 00:24:42.200
The compiler under the hood
of Xcode is based on GCC 3.3.

00:24:42.550 --> 00:24:46.320
We took it from the
open source community,

00:24:46.320 --> 00:24:49.060
but then at Apple,
we have added a lot of special

00:24:49.060 --> 00:24:50.660
enhancements to the compiler.

00:24:50.680 --> 00:24:57.180
That compiler, from its own,
is very fast in generating code.

00:24:57.180 --> 00:25:00.960
It also generates very efficient code,
so not only your compile time is fast,

00:25:00.960 --> 00:25:03.160
but also what your
customers will care about,

00:25:03.160 --> 00:25:06.460
the runtime of your application, is very,
very quick.

00:25:07.790 --> 00:25:10.260
PCH, precompiled headers.

00:25:10.260 --> 00:25:12.430
This is something that
actually GCC doesn't have.

00:25:12.540 --> 00:25:13.440
We have added that.

00:25:13.560 --> 00:25:14.640
That's an Apple add-on.

00:25:14.640 --> 00:25:18.560
So that even the C++ people
who were complaining about the

00:25:18.560 --> 00:25:22.180
lack of precompiled headers,
so far we now have something

00:25:22.180 --> 00:25:23.600
that will suit everybody's needs.

00:25:23.600 --> 00:25:27.840
And finally,
we have added support for inline assembly

00:25:27.840 --> 00:25:29.940
exactly in the Code Warrior style.

00:25:29.940 --> 00:25:33.420
So you can take your Code Warrior style
C file with embedded assembly

00:25:33.420 --> 00:25:34.510
and compile it right away.

00:25:34.520 --> 00:25:39.950
We have added many other switches
that are to handle progmas,

00:25:40.020 --> 00:25:43.220
but it's in more detail than
is suitable for this session.

00:25:50.130 --> 00:25:51.920
and the rest of the team.

00:25:51.920 --> 00:25:53.920
We also have a new application
called Precompiled Headers.

00:25:53.920 --> 00:25:55.920
This is something new
that we added to GCC 3.3.

00:25:55.920 --> 00:25:59.880
It's a brand new mechanism
that works for all languages.

00:25:59.920 --> 00:26:05.920
It works for C, C++, Objective-C,
and the Safari people with C++.

00:26:05.920 --> 00:26:08.910
And there's going to be
more coming with Panther.

00:26:08.920 --> 00:26:11.720
This is just a pre-release,
so the PCH mechanism,

00:26:11.720 --> 00:26:14.920
you might find cases where
it's maybe not quite mature,

00:26:14.920 --> 00:26:18.790
but we are working on more and
getting things more automated.

00:26:19.860 --> 00:26:23.180
Now, predictive compilation,
that's another step to

00:26:23.180 --> 00:26:24.890
cut down the compile time.

00:26:25.010 --> 00:26:27.990
It primes the pump.

00:26:28.410 --> 00:26:31.710
Most compiles are not,
they're also just syntax checks, right?

00:26:31.720 --> 00:26:33.920
You're trying,
did I forget a curly brace somewhere?

00:26:33.920 --> 00:26:36.940
But even when you're doing
turnaround debugging,

00:26:36.940 --> 00:26:40.250
then you just go somewhere to the code,
you change something,

00:26:40.310 --> 00:26:43.070
and even if you know exactly
it's this one character,

00:26:43.110 --> 00:26:46.980
the time that it takes you to say,
command S to save and command B to build,

00:26:47.010 --> 00:26:49.940
during that time, you know,
when you're really fast,

00:26:49.940 --> 00:26:51.820
it's maybe half a second.

00:26:51.820 --> 00:26:53.730
Well, during that time,
the compiler was already running,

00:26:53.740 --> 00:26:54.530
and it's ahead of you.

00:26:54.550 --> 00:26:56.970
So it cuts down the turnaround time.

00:26:57.380 --> 00:27:01.240
So it starts the compiler as soon
as you start editing something,

00:27:01.240 --> 00:27:03.880
and it goes through all
of your pounding clues,

00:27:03.960 --> 00:27:05.740
and pre-processes, pre-compiles that.

00:27:05.740 --> 00:27:07.840
And when you say,
actually save and build,

00:27:07.850 --> 00:27:10.970
it will do just the rest,
which is usually 1% of the work.

00:27:14.450 --> 00:27:17.020
Then comes the build,
something we demoed yesterday,

00:27:17.020 --> 00:27:20.290
and this is really not the
most mainstream feature,

00:27:20.290 --> 00:27:22.540
definitely not the most
mainstream feature yet.

00:27:22.610 --> 00:27:25.370
This is something more for thrill
seekers at this very moment.

00:27:25.430 --> 00:27:29.400
It takes care of,
it takes advantage of rendezvous.

00:27:29.400 --> 00:27:32.700
It will discover other computers
on the net that have the

00:27:32.700 --> 00:27:36.850
same Xcode version installed,
and it will try to distribute the

00:27:36.850 --> 00:27:41.400
builds to that computer if the user
on that computer has allowed that.

00:27:41.400 --> 00:27:45.400
It creates completely
self-contained jobs,

00:27:45.400 --> 00:27:48.400
so even if you don't have the
same headers installed there,

00:27:48.400 --> 00:27:49.400
or even if there's a
little bit of a mismatch,

00:27:49.400 --> 00:27:52.360
you don't have to have a
mapped network file system,

00:27:52.360 --> 00:27:53.400
for instance.

00:27:53.400 --> 00:27:57.340
The compiled job is
completely self-contained.

00:27:57.390 --> 00:28:00.380
And the pre-compiling
happens on your machine,

00:28:00.450 --> 00:28:02.400
and then it gets passed
once to that server,

00:28:02.400 --> 00:28:03.400
but it happens only once.

00:28:03.400 --> 00:28:07.400
So if you compile more than one file,
you actually have a great speed benefit.

00:28:07.400 --> 00:28:09.400
The greatest speed benefit
is around four machines.

00:28:09.400 --> 00:28:11.380
It really varies on the kind
of code that you're using.

00:28:11.430 --> 00:28:12.400
It really varies on the kind
of code that you're using.

00:28:12.400 --> 00:28:17.400
You don't really need that set of Xservs
unless you have a huge build production.

00:28:17.400 --> 00:28:19.210
Like at Apple,
we have built an integration

00:28:19.210 --> 00:28:20.270
where we built all of OS X.

00:28:20.400 --> 00:28:23.330
And when you have large apps,
maybe like Maya,

00:28:23.450 --> 00:28:25.390
having that would make sense.

00:28:25.400 --> 00:28:27.580
What it requires is a
really fast network,

00:28:27.580 --> 00:28:29.400
100 megabits or gigabit.

00:28:29.400 --> 00:28:33.400
With 10 megabit or over airport,
you will not see any benefits.

00:28:33.530 --> 00:28:36.400
So now I would like to
invite Anders Bertolud,

00:28:36.400 --> 00:28:39.270
who's the lead Xcode engineer,
to show us a little bit

00:28:39.300 --> 00:28:40.390
about the build system.

00:28:41.400 --> 00:28:44.570
Thanks, Stan.

00:28:46.400 --> 00:28:50.910
So Matt showed you some of the great
features we have for navigating

00:28:50.910 --> 00:28:53.020
and for editing source code.

00:28:53.020 --> 00:28:55.790
So I'm going to go ahead and
show you how to build it and some

00:28:55.920 --> 00:28:57.130
of the workflow we have there.

00:28:57.130 --> 00:29:00.500
So I'm going to open the
same project that Matt used.

00:29:00.680 --> 00:29:03.250
This is the Carbon example ClockView.

00:29:03.250 --> 00:29:07.860
And what I'm going to do is to
actually show the embedded editor here.

00:29:07.860 --> 00:29:10.140
So I'll go ahead and open that.

00:29:10.190 --> 00:29:15.450
And I'm going to select one of the
files here called the ClockView.cp.

00:29:15.450 --> 00:29:19.060
And this is where a lot of the
code in this little program is.

00:29:19.060 --> 00:29:22.560
So what I'm going to do now is just
to build and we'll see what happens.

00:29:22.560 --> 00:29:24.420
Whoa, it had some errors.

00:29:24.470 --> 00:29:24.930
Okay.

00:29:24.930 --> 00:29:26.340
That wasn't expected.

00:29:26.340 --> 00:29:29.520
So let's go and select the
errors and warnings group.

00:29:29.520 --> 00:29:33.890
As you notice, on the left side,
there is now the errors and warnings

00:29:33.900 --> 00:29:37.820
smart group that shows you any files
in your code that have problems

00:29:37.820 --> 00:29:39.600
last time you compiled them.

00:29:39.600 --> 00:29:41.730
In this case,
we see that there were a couple

00:29:41.800 --> 00:29:43.180
of errors and some warnings.

00:29:43.180 --> 00:29:44.240
Okay.

00:29:44.240 --> 00:29:47.880
You'll also notice that there
is an icon in the margin here.

00:29:47.880 --> 00:29:51.170
And in fact, if I go back up here,
you'll see both the warnings

00:29:51.170 --> 00:29:52.700
and errors are shown here.

00:29:52.700 --> 00:29:55.290
I can actually,
if I'm looking at just the source code,

00:29:55.290 --> 00:29:59.040
let's say I'm working in this mode,
I can actually just click on this error

00:29:59.210 --> 00:30:02.900
here and then it will show me what the
problem was up in the status field.

00:30:02.900 --> 00:30:09.460
So what I'm going to do here is to
actually show you a third way as well.

00:30:09.460 --> 00:30:12.210
We do have a warnings
and errors panel that,

00:30:12.220 --> 00:30:15.140
as Stan mentioned,
you almost don't have to use.

00:30:15.210 --> 00:30:18.720
This is only if there's something
really weird that's going on.

00:30:18.720 --> 00:30:21.870
You can actually see exactly what
the build system was trying to do,

00:30:21.970 --> 00:30:23.800
in this case,
trying to compile this file.

00:30:23.800 --> 00:30:26.660
If you want the real details
of what was going on,

00:30:26.750 --> 00:30:29.820
you can actually select entries
up here and it will go down

00:30:29.850 --> 00:30:32.720
and show you the transcript,
including all the command lines.

00:30:33.130 --> 00:30:35.910
But 97% of the time,
you don't need to see that.

00:30:37.440 --> 00:30:40.410
So what we're going to do here is I'm
going to fix a couple of these errors.

00:30:40.440 --> 00:30:42.340
This one is just a warning,
so I'll just go ahead

00:30:42.650 --> 00:30:43.740
and delete this one.

00:30:43.740 --> 00:30:47.000
We've checked that this is
okay and everything's fine.

00:30:47.000 --> 00:30:51.320
In this case,
we see that there was actually an error.

00:30:51.320 --> 00:30:55.320
Let's see, if I go and click on this,
we just had a misspelling,

00:30:55.320 --> 00:30:57.260
so I'll just enter the I back in there.

00:30:57.260 --> 00:30:59.380
I click on this one.

00:30:59.380 --> 00:31:02.040
We see, actually, we need to pass .x.

00:31:02.040 --> 00:31:04.990
So these were just a couple of warnings
that we put into the code here.

00:31:05.540 --> 00:31:08.210
I'll go ahead and build again,
and it asks me if I want to save.

00:31:08.220 --> 00:31:12.870
So we've already built,
and there's still one error.

00:31:12.880 --> 00:31:16.160
In this case, this appears to be a macro
that we haven't defined.

00:31:16.160 --> 00:31:20.420
So what I'm going to do here is to
just select this and just copy it.

00:31:20.460 --> 00:31:23.220
And in this case,
we want to go to the inspector.

00:31:23.220 --> 00:31:26.160
So I click open the targets group.

00:31:26.200 --> 00:31:30.860
This is the target that defines how
to build this app called ClockView.

00:31:30.860 --> 00:31:35.480
I hit the inspector icon, and, again,
we can just go to the build.

00:31:35.550 --> 00:31:38.040
So I'm going to go to the build
settings here and define it.

00:31:38.040 --> 00:31:41.040
So this is a preprocessor
macro that needs to be defined.

00:31:41.040 --> 00:31:44.610
Now, there are a lot of settings here,
and I'm not quite sure

00:31:44.610 --> 00:31:47.380
which one I want to set,
but I know it has something to

00:31:47.380 --> 00:31:48.900
do with preprocessor symbols.

00:31:49.040 --> 00:31:50.530
So I'm just going to type preprocessor.

00:31:50.540 --> 00:31:52.470
Oh, look there, preprocessor macros.

00:31:52.560 --> 00:31:55.040
So I can just enter the value in here.

00:31:55.040 --> 00:31:56.540
I'm just going to paste this.

00:31:56.540 --> 00:31:58.530
We'll define that as zero.

00:31:58.540 --> 00:32:04.540
And then one other thing of note
is you can actually search here,

00:32:04.540 --> 00:32:05.040
as you noticed.

00:32:05.040 --> 00:32:09.510
And if you need to see a description,
you can just pull up a

00:32:09.510 --> 00:32:13.040
text field down here,
and you can see more information

00:32:13.040 --> 00:32:14.030
about the particular option.

00:32:15.830 --> 00:32:20.560
And this, if I don't filter anything,
it just shows the most common settings

00:32:20.560 --> 00:32:22.390
that 90% of the time you'll need to use.

00:32:22.700 --> 00:32:25.450
Things like optimization,
preprocessor flags, things like that.

00:32:25.480 --> 00:32:28.960
If you don't see the
setting that you want here,

00:32:29.240 --> 00:32:31.880
odds are that it's still supported.

00:32:31.880 --> 00:32:33.420
It's just you need to open the drawer.

00:32:33.420 --> 00:32:36.330
So opening the drawer reveals
the different languages that

00:32:36.330 --> 00:32:38.060
are being used in this project.

00:32:38.060 --> 00:32:42.500
And you can actually disclose this to
go down and set particular categories.

00:32:42.700 --> 00:32:47.160
So let's say I want to change
some options about linking.

00:32:47.160 --> 00:32:48.320
I'll just select this.

00:32:48.320 --> 00:32:50.060
And, of course,
the filtering works here as well.

00:32:50.060 --> 00:32:53.880
The current setting smart group is
a special one that shows everything

00:32:53.880 --> 00:32:57.680
that's specifically set in this target
is different from the default values.

00:32:59.450 --> 00:33:02.200
So now to find my preprocessor macro,
I'm actually just going

00:33:02.200 --> 00:33:03.220
to build this again.

00:33:03.230 --> 00:33:06.430
And we see that build
succeeded this time.

00:33:06.470 --> 00:33:11.640
And one last thing I want to note is
you can actually do single file compile.

00:33:11.640 --> 00:33:15.190
By default, it's bound to Command K,
because that's what a lot

00:33:15.190 --> 00:33:16.490
of people are used to.

00:33:16.530 --> 00:33:19.820
But you can, of course,
bind that to anything you want.

00:33:19.820 --> 00:33:23.830
You can also show the assembly code
or the preprocessed source for any of

00:33:24.050 --> 00:33:26.010
the source files you're working on.

00:33:26.010 --> 00:33:28.280
So with that, I will hand back to Stan.

00:33:28.280 --> 00:33:29.400
Thanks.

00:33:32.110 --> 00:33:34.560
Thank you, Anders.

00:33:34.560 --> 00:33:37.940
There's going to be a much more
detailed session about it in 24 hours,

00:33:37.940 --> 00:33:41.340
session 303, right here,
so if you want to know more.

00:33:41.340 --> 00:33:45.670
Okay, now I've built your application,
and contrary to your expectations,

00:33:45.670 --> 00:33:46.900
it's not quite flawless.

00:33:46.900 --> 00:33:47.710
There are bugs.

00:33:47.760 --> 00:33:51.390
So, the favorite of everybody, debugging.

00:33:51.390 --> 00:33:54.880
We found out from
feedback from all of you,

00:33:54.880 --> 00:34:00.260
from own experience and common sense,
that the debug cycle is very important,

00:34:00.260 --> 00:34:02.190
so we try to squish it as much as we can.

00:34:02.200 --> 00:34:08.220
We have a very efficient
debug cycle in Xcode.

00:34:08.880 --> 00:34:11.650
First of all,
the debugger itself features a

00:34:11.690 --> 00:34:13.940
context-sensitive data display.

00:34:13.940 --> 00:34:18.900
With data view summaries,
we have formatters for all Carbon,

00:34:18.900 --> 00:34:23.470
Cocoa data types,
and as well as some other data types.

00:34:23.500 --> 00:34:27.120
And you can create your own
formatters for your custom data types.

00:34:27.120 --> 00:34:32.010
You can do really simple ones,
which are like simple string formatters,

00:34:32.010 --> 00:34:33.340
similar to printf.

00:34:33.760 --> 00:34:36.520
Or if you're displaying
something really bizarre,

00:34:36.520 --> 00:34:39.860
you can actually write bundles
that the IDE will load,

00:34:39.940 --> 00:34:42.400
and it will display your own data types.

00:34:42.400 --> 00:34:45.600
You can, of course,
now break on C++ exceptions.

00:34:50.430 --> 00:34:51.750
Yes.

00:34:51.820 --> 00:34:56.140
Another way to reduce the
turnaround time is how to get to

00:34:56.250 --> 00:34:57.430
the debugger in the first place.

00:34:57.430 --> 00:34:58.240
Zero link.

00:34:58.350 --> 00:35:03.160
We are adding this feature,
which basically does away with linking,

00:35:03.160 --> 00:35:04.880
because linking is time consuming.

00:35:04.880 --> 00:35:08.410
Usually, most of the time,
you're adding just one file, maybe two,

00:35:08.420 --> 00:35:11.600
but not your over 1,500 files in Finder,
right?

00:35:11.600 --> 00:35:16.310
So you do just away with linking,
and it makes the turnaround

00:35:16.320 --> 00:35:18.700
time go dramatically down.

00:35:20.400 --> 00:35:25.030
It loads the object files as they are
needed as the application is launched.

00:35:25.120 --> 00:35:27.900
So this is a very efficient way,
but not necessarily suitable for

00:35:28.030 --> 00:35:29.730
final deployment of the application.

00:35:32.040 --> 00:35:34.500
And then finally,
we have Fix and Continue,

00:35:34.500 --> 00:35:38.340
which completely reduces the turnaround
time to around three seconds.

00:35:38.520 --> 00:35:43.540
It allows you to dynamically modify your
application as it is running in place.

00:35:43.730 --> 00:35:49.000
It's suitable mainly for logic bugs,
places where you put the wrong variable,

00:35:49.000 --> 00:35:53.820
you're running over an array,
things like that, infinite loops.

00:35:54.030 --> 00:35:57.360
Or my favorite, trial and error code.

00:35:57.360 --> 00:36:00.820
I mean, for instance, I can't never get
coordinate transforms right.

00:36:00.820 --> 00:36:03.460
I mean, even if it's something like
this is scaled by that,

00:36:03.460 --> 00:36:06.740
or the coordinates are rotated,
I just can't get it right.

00:36:06.740 --> 00:36:09.270
And for that, fixing continues is very,
very useful.

00:36:09.290 --> 00:36:12.520
And for UI layout, for instance, as well.

00:36:16.170 --> 00:36:19.670
What Fix and Continue really
excels at is when you're making

00:36:19.670 --> 00:36:24.130
changes within functions,
changing constants,

00:36:24.130 --> 00:36:28.390
add and modify local variables,
maybe call functions,

00:36:28.390 --> 00:36:29.820
or even write new functions.

00:36:29.820 --> 00:36:31.850
So you can do all of those things.

00:36:31.860 --> 00:36:35.250
Fix and Continue is not
so suitable for changing,

00:36:35.250 --> 00:36:39.070
or actually doesn't work with
things that have global effect,

00:36:39.070 --> 00:36:42.280
like changing headers,
or changing globals.

00:36:42.420 --> 00:36:44.740
Obviously,
when you modify just one file to

00:36:44.740 --> 00:36:47.580
reference a new global variable,
all the other ones,

00:36:47.680 --> 00:36:48.870
they don't know about it, right?

00:36:48.880 --> 00:36:51.870
So you would have to quit and
rebuild the application for that.

00:36:51.920 --> 00:36:53.450
Or call signatures.

00:36:53.460 --> 00:36:56.290
It works pretty well with Objective-C,
but it does not work so

00:36:56.290 --> 00:36:57.540
well with the other ones.

00:36:57.620 --> 00:37:01.470
And there will be a dedicated
debugging session that will be talking

00:37:01.470 --> 00:37:03.810
great length about Fix and Continue.

00:37:06.280 --> 00:37:10.360
And the other debugging
kind of tools that we have

00:37:10.370 --> 00:37:12.440
integrated with our performance.

00:37:12.440 --> 00:37:14.850
Your application is now maybe running,
it's not crashing,

00:37:14.890 --> 00:37:16.070
but it's still kind of slow.

00:37:16.270 --> 00:37:23.680
And we ship a bunch of apps,
such as Sampler, Malloc Debug,

00:37:24.110 --> 00:37:25.820
Object Alloc, and Thread Viewer.

00:37:25.820 --> 00:37:29.790
Those are profiling applications
both for speed and for memory usage.

00:37:29.820 --> 00:37:32.340
Because when you're leaking memory,
that's not a good user

00:37:32.340 --> 00:37:33.320
experience as well.

00:37:33.320 --> 00:37:37.380
Now, Xcode is integrated to a certain
degree with those applications,

00:37:37.380 --> 00:37:38.430
the first step.

00:37:38.500 --> 00:37:41.900
So that Xcode can call
them as your debug media,

00:37:41.900 --> 00:37:47.060
and then those applications message back
to Xcode about selections that you make,

00:37:47.170 --> 00:37:51.300
so that they show you actually the
code that causes all those memory

00:37:51.620 --> 00:37:53.550
leaks or spends a lot of time.

00:37:54.420 --> 00:37:56.740
There will be a dedicated
session about this.

00:37:56.740 --> 00:37:58.520
This is session number 305.

00:37:58.520 --> 00:38:01.180
And I would recommend that you go there.

00:38:01.180 --> 00:38:04.020
Now, this time I would invite
Chris Friesen on the stage.

00:38:04.160 --> 00:38:08.060
But that guy, he worked so hard,
he actually is homesick.

00:38:08.120 --> 00:38:12.580
And so Anders picked up
his demo just this morning.

00:38:12.580 --> 00:38:14.180
Welcome, Anders, again.

00:38:14.180 --> 00:38:15.420
ANDERS FEJS: Thank you.

00:38:15.420 --> 00:38:19.220
Unfortunately, Chris couldn't be here.

00:38:19.260 --> 00:38:23.120
So I'll get to demo his
really cool features instead.

00:38:23.190 --> 00:38:27.420
So I'm again going to open
the ClockView example here.

00:38:27.630 --> 00:38:32.850
And so you've seen it being edited,
and you've seen Matt show off

00:38:32.900 --> 00:38:35.320
some of the navigation features.

00:38:35.320 --> 00:38:38.000
You've seen us build it,
but you actually haven't seen it run yet.

00:38:38.130 --> 00:38:39.490
So let's do that now.

00:38:39.500 --> 00:38:43.210
I'm going to go to one of our
pop-down toolbar buttons-- actually,

00:38:43.210 --> 00:38:46.630
this one-- and I'm going to say
build and debug first of all.

00:38:46.680 --> 00:38:48.620
And we'll get the clock view up here.

00:38:48.660 --> 00:38:50.380
And it looks kind of odd.

00:38:50.380 --> 00:38:51.820
It has a dark gray background.

00:38:51.820 --> 00:38:53.360
So we're going to fix that.

00:38:53.360 --> 00:38:57.860
So I'm going to minimize
this and pull this over here.

00:38:57.860 --> 00:39:01.860
I just want to open up
the embedded editor again.

00:39:01.940 --> 00:39:06.720
I'm going to go down to my
clock view source code here

00:39:06.720 --> 00:39:08.970
and go through this here.

00:39:09.120 --> 00:39:12.600
I know that there is some place in
here where the shade is being set.

00:39:12.600 --> 00:39:15.650
And so what I'm going to do is I'm
actually going to go down and find

00:39:16.080 --> 00:39:19.720
the fill shade equals statement.

00:39:19.720 --> 00:39:23.140
And if I can type it right,
we'll go to it.

00:39:23.200 --> 00:39:25.640
So there are a couple
of parts to this here.

00:39:25.640 --> 00:39:27.440
I see that there's a
fairly dark color here.

00:39:27.440 --> 00:39:29.260
I'm just going to go
ahead and change this.

00:39:29.260 --> 00:39:31.320
And I'm going to save the file.

00:39:31.460 --> 00:39:33.580
And then you notice the
check mark appears here.

00:39:33.580 --> 00:39:36.240
This is the build system paying
attention in the background and says,

00:39:36.240 --> 00:39:38.620
oh, I need to compile this file
now because you changed it.

00:39:38.660 --> 00:39:40.720
So there's also a tape dispenser.

00:39:40.760 --> 00:39:42.690
So let me just go ahead
and click on that.

00:39:42.710 --> 00:39:46.380
And we notice that it's
compiling the clock view.

00:39:46.530 --> 00:39:50.900
And it's going back into the app here.

00:39:51.140 --> 00:39:52.490
And it's actually changed
the code on the fly.

00:39:52.570 --> 00:39:58.850
So the clock continues running,
but now we have a nice white background.

00:39:59.460 --> 00:40:02.480
But you may notice there's
something odd going on here.

00:40:02.480 --> 00:40:04.400
I'll make it larger so you can see.

00:40:04.430 --> 00:40:07.350
It says that this is quarter
past 4:00 in the morning.

00:40:07.520 --> 00:40:09.080
Apparently, we have a logic bug.

00:40:09.090 --> 00:40:11.380
So let's try to find where that might be.

00:40:11.380 --> 00:40:15.160
Let's go ahead and search
for the string AM here.

00:40:15.180 --> 00:40:18.010
And we see that it's right here.

00:40:18.120 --> 00:40:20.620
So let me actually go
ahead and look at this.

00:40:20.620 --> 00:40:22.670
And we say, ooh, greater than 12.

00:40:22.820 --> 00:40:23.580
That's not good.

00:40:23.580 --> 00:40:24.670
It should be less than or equal to.

00:40:24.690 --> 00:40:27.420
So let's go ahead and change
that to less than or equal to.

00:40:27.420 --> 00:40:30.690
I just make the clock a little bit
smaller here in the background.

00:40:30.870 --> 00:40:35.240
And let's go ahead and save the file,
and we'll fix and continue that again.

00:40:35.430 --> 00:40:36.840
So now it changes to PM.

00:40:36.940 --> 00:40:39.210
So we fixed the logic error.

00:40:39.260 --> 00:40:40.960
So as you can see,
this saves a lot of time.

00:40:40.960 --> 00:40:44.320
If it takes a long time after
you start your app to get to the

00:40:44.440 --> 00:40:48.430
part where the problem occurs,
you can save yourself a lot of time here.

00:40:48.670 --> 00:40:52.590
So, so far we've just changed a constant,
we've changed some logic.

00:40:52.640 --> 00:40:53.430
Let's call it function.

00:40:53.590 --> 00:40:56.900
So this white background
here is kind of boring,

00:40:56.930 --> 00:41:01.490
so I'm going to go ahead and
search for the fill shade again.

00:41:01.830 --> 00:41:05.460
And this time, I just want to go ahead
and type something here.

00:41:05.660 --> 00:41:07.170
Let's see, that changes over time.

00:41:07.220 --> 00:41:10.960
So let me go ahead and
get a random value here.

00:41:10.960 --> 00:41:13.360
So I'm calling a function in the library.

00:41:13.420 --> 00:41:18.610
And let's see, maybe I'll compile that.

00:41:18.670 --> 00:41:20.440
And then, whoop, we had the error again.

00:41:20.470 --> 00:41:22.590
Okay, parse error before the parentheses.

00:41:22.600 --> 00:41:24.510
So we'll fix that.

00:41:24.990 --> 00:41:27.460
will do the fix again.

00:41:27.460 --> 00:41:30.560
So now we see that every second,
it picks a new shade of gray.

00:41:30.660 --> 00:41:35.230
So we're calling a
function in our code now.

00:41:35.590 --> 00:41:37.690
All fix and continue.

00:41:37.690 --> 00:41:37.690
So, um,

00:41:37.700 --> 00:43:08.200
[Transcript missing]

00:43:13.080 --> 00:43:19.760
And also you see here a summary of the
event for the event ref in this case.

00:43:19.760 --> 00:43:24.470
So what I'm going to do here is
to step a couple of lines here,

00:43:24.580 --> 00:43:27.880
and I'm going to step
down to line 205 here.

00:43:28.000 --> 00:43:30.100
And you notice that root changed here.

00:43:30.100 --> 00:43:32.120
It was invalid before.

00:43:32.120 --> 00:43:35.300
We highlight the change value in red.

00:43:35.300 --> 00:43:37.890
This indicates that it
changed in the previous step.

00:43:37.890 --> 00:43:37.890
And we show a summary for that as well.

00:43:38.040 --> 00:43:39.610
So, that's kind of cool.

00:43:39.690 --> 00:43:42.000
One of the things I'm
going to do now is to,

00:43:42.000 --> 00:43:44.860
I'm going to go down,
and there's another breakpoint here.

00:43:44.990 --> 00:43:47.640
I'm going to go ahead and
enable this breakpoint.

00:43:47.830 --> 00:43:48.870
I'm going to resume the debugger.

00:43:48.990 --> 00:43:49.880
I could do this in either.

00:43:49.880 --> 00:43:52.210
As you notice,
I go back to the text editor here,

00:43:52.210 --> 00:43:53.400
or the debug window.

00:43:53.400 --> 00:43:58.420
I could actually edit and see
the source code in either one.

00:43:58.580 --> 00:44:00.950
It doesn't really matter.

00:44:00.950 --> 00:44:02.190
I'm going to continue here,
and now it stopped at the

00:44:02.190 --> 00:44:02.190
breakpoint I just set.

00:44:02.390 --> 00:44:05.610
So this is where we assign
a rectangle variable.

00:44:05.670 --> 00:44:07.670
I'm just going to go
ahead and step over this.

00:44:07.750 --> 00:44:09.410
And first let me go down to QBounds.

00:44:09.420 --> 00:44:09.890
It's here.

00:44:09.980 --> 00:44:12.410
It has garbage values,
just on the stack now.

00:44:12.490 --> 00:44:14.020
Just going to step over this.

00:44:14.060 --> 00:44:19.200
And notice that it formats the
rectangle coordinates according to

00:44:19.200 --> 00:44:21.580
the Carbon definition of a rectangle.

00:44:21.710 --> 00:44:23.500
But this is just four numbers.

00:44:23.500 --> 00:44:24.610
This is kind of confusing.

00:44:24.620 --> 00:44:26.150
What if I wanted to edit this myself?

00:44:26.350 --> 00:44:28.760
Well,
let's say I wanted to put in labels.

00:44:28.760 --> 00:44:31.370
I can actually see here that
if I double click on it,

00:44:31.490 --> 00:44:33.650
I go to the definition of this formatter.

00:44:33.810 --> 00:44:35.040
And I can just edit it in place.

00:44:35.040 --> 00:44:38.510
I can see the left is
equal to this value.

00:44:38.540 --> 00:44:40.200
The top is equal to that value.

00:44:40.410 --> 00:44:42.540
The right is equal to that value.

00:44:42.580 --> 00:44:45.810
And then I go, actually,
that was the bottom.

00:44:46.010 --> 00:44:48.250
and then I say R equals.

00:44:48.380 --> 00:44:51.400
Now when I hit return,
it actually formats the string according

00:44:51.400 --> 00:44:52.900
to the definition that I typed in.

00:44:53.020 --> 00:44:58.760
So you can reference any arbitrary
subfields of a structure that way.

00:44:58.920 --> 00:45:02.990
And this definition is now stored
for me per user in this project,

00:45:02.990 --> 00:45:06.390
so you can customize it to your liking.

00:45:06.480 --> 00:45:10.200
So these are just two of the
features that the debugger provides.

00:45:10.200 --> 00:45:12.050
We have Fix and Continue,
which of course lets you get

00:45:12.150 --> 00:45:14.940
back up into your app again
without having to restart it.

00:45:14.940 --> 00:45:18.130
Great for logic errors,
changes sort of within the curly

00:45:18.130 --> 00:45:20.040
braces of a logic of a function.

00:45:20.160 --> 00:45:23.080
And the other really powerful feature
are the custom data formatters.

00:45:23.080 --> 00:45:25.720
So depending on whether
you're using Carbon or Cocoa,

00:45:25.720 --> 00:45:28.520
it automatically load in
custom data formatters.

00:45:28.520 --> 00:45:30.920
And as you saw,
you can define your own or modify

00:45:30.920 --> 00:45:32.780
the ones that we provided for you.

00:45:32.780 --> 00:45:34.380
So that's all I wanted to show today.

00:45:34.380 --> 00:45:37.260
There are more sessions on debugging
and on the build system as well.

00:45:37.580 --> 00:45:38.280
Thanks, Stan.

00:45:38.280 --> 00:45:39.280
Thanks, Anders.

00:45:46.200 --> 00:46:56.400
[Transcript missing]

00:46:56.970 --> 00:47:01.120
Now, that's just part of what it
takes to create an application.

00:47:01.300 --> 00:47:03.060
This is just the code and the debugging.

00:47:03.160 --> 00:47:07.030
However, there's also the other part,
that's the user-visible part,

00:47:07.130 --> 00:47:08.610
that's user interface.

00:47:08.670 --> 00:47:11.300
And so it is my pleasure
to introduce to you Mr.

00:47:11.300 --> 00:47:14.860
Eric Seymour, who is the lead engineer
on Interface Builder.

00:47:15.170 --> 00:47:20.450
And he's going to give
you an introduction to IB.

00:47:20.450 --> 00:47:20.450
Great.

00:47:24.240 --> 00:47:25.010
Thanks, Stan.

00:47:25.180 --> 00:47:30.470
OK, so, so far you've been listening
and dealing with code issues

00:47:30.470 --> 00:47:31.960
related to your projects.

00:47:31.960 --> 00:47:35.580
And of course, it's very, very important,
but obviously a big aspect of

00:47:35.580 --> 00:47:37.980
your projects are user interfaces.

00:47:38.010 --> 00:47:42.380
And at Apple, we build interfaces with a
tool called Interface Builder.

00:47:42.410 --> 00:47:44.420
And I think for those of
you who haven't seen it,

00:47:44.420 --> 00:47:47.600
a couple of slides just to let you
know what this thing is are important.

00:47:47.700 --> 00:47:48.670
So what is Interface Builder?

00:47:48.700 --> 00:47:52.420
Well, Interface Builder, or IB,
is Apple's way,

00:47:52.420 --> 00:47:55.740
or is Apple's tool for building
Aqua-compliant user interfaces.

00:47:55.750 --> 00:47:57.570
And of course,
it supports Carbon and Cocoa,

00:47:57.570 --> 00:48:00.300
and of course, works with Xcode.

00:48:00.300 --> 00:48:03.440
Now, just to be clear,
Interface Builder is a graphical tool.

00:48:03.570 --> 00:48:07.540
You drag things off of a palette,
drop them onto Windows, resize them,

00:48:07.540 --> 00:48:10.670
set properties,
and perhaps most importantly,

00:48:10.740 --> 00:48:13.740
establish relationships,
drag connections between things,

00:48:13.800 --> 00:48:17.380
sometimes, and perhaps most importantly,
between things in your interface

00:48:17.730 --> 00:48:19.400
and in your own source code.

00:48:19.420 --> 00:48:21.280
Very, very important.

00:48:22.610 --> 00:48:24.990
So where does Interface Builder
fit in the grand scheme of things?

00:48:25.110 --> 00:48:29.060
Well, Xcode manages all these
resources in your project,

00:48:29.190 --> 00:48:30.680
especially source code.

00:48:30.700 --> 00:48:34.820
And you've been hearing over the last
couple of days all sorts of techniques

00:48:34.820 --> 00:48:37.250
for reducing the amount of time you
need to spend in your source code,

00:48:37.340 --> 00:48:37.690
right?

00:48:37.700 --> 00:48:40.610
Reduce your compile loop,
reduce the amount of time it

00:48:40.610 --> 00:48:42.990
takes to go find something,
make changes.

00:48:43.000 --> 00:48:46.690
Well, Interface Builder perhaps
is the best example of this,

00:48:46.730 --> 00:48:50.840
because Interface Builder does not
actually generate source code as

00:48:50.970 --> 00:48:53.020
the artifact of your interface.

00:48:53.020 --> 00:48:56.420
It produces archives of
your interface objects.

00:48:56.500 --> 00:48:59.340
So it's not creating source code
that you would then have to compile

00:48:59.470 --> 00:49:00.780
and build into your application.

00:49:00.780 --> 00:49:04.180
It's just another
resource managed by Xcode,

00:49:04.180 --> 00:49:08.960
compiled or built in the build process,
just simply copied into the

00:49:09.030 --> 00:49:11.440
final product of the application.

00:49:13.710 --> 00:49:16.100
So, what's new for Carbon with
Interface Builder?

00:49:16.160 --> 00:49:19.890
Well, you heard that HIView
is the future of Carbon,

00:49:19.980 --> 00:49:25.560
and Interface Builder is constantly
evolving to support that notion.

00:49:25.800 --> 00:49:28.220
You'll notice right out of the
gate that we support several

00:49:28.230 --> 00:49:32.320
new HIView-based objects,
HIImageView, Search, Field, ScrollView,

00:49:32.320 --> 00:49:33.090
and more.

00:49:33.180 --> 00:49:39.250
And also, and it's not written down here,
but we now support embedding

00:49:39.250 --> 00:49:41.310
in custom controls.

00:49:42.870 --> 00:49:47.380
Of course, we also support all of the new
interesting features of Panther,

00:49:47.380 --> 00:49:50.680
including many controls
and other important things,

00:49:50.680 --> 00:49:53.290
such as new metrics and such.

00:49:53.540 --> 00:49:55.440
and then control properties.

00:49:55.740 --> 00:49:59.810
This is a new feature that I like to
spend a few minutes on in Carbon support,

00:49:59.880 --> 00:50:05.170
and what this allows us to do
is add ad hoc data values to our

00:50:05.380 --> 00:50:08.310
controls right in a nib file.

00:50:08.390 --> 00:50:11.510
So to do that,
I'm actually going to demo.

00:50:19.880 --> 00:50:24.380
And I'm going to quit this
application because I need to restart.

00:50:24.380 --> 00:50:28.520
So for this application,
I also am going to use ClockView,

00:50:28.520 --> 00:50:31.390
standard shipped example for Carbon.

00:50:31.390 --> 00:50:34.150
And let's just run this
thing real quickly here.

00:50:34.150 --> 00:50:35.780
So I'm just going to run this app.

00:50:35.860 --> 00:50:39.170
OK, ClockView, pretty straightforward,
pretty boring.

00:50:39.190 --> 00:50:40.370
I need to add a feature to this.

00:50:40.370 --> 00:50:43.620
So the feature that I've added
is I want an image to show up

00:50:43.660 --> 00:50:45.980
in the background of this clock.

00:50:46.120 --> 00:50:48.630
So as any good developer,
I have a few options of

00:50:48.630 --> 00:50:49.740
how I'm going to do this.

00:50:49.850 --> 00:50:51.340
Well, clearly,
I'm going to write code to do it

00:50:51.340 --> 00:50:53.290
because this is a custom control.

00:50:53.450 --> 00:50:56.400
But how do I make it--how do
I manifest it in the interface?

00:50:56.450 --> 00:50:58.750
How do I trigger its
inclusion in the interface?

00:50:58.880 --> 00:51:00.670
Well,
one way to do it is to write more code,

00:51:00.750 --> 00:51:01.990
compile it into the app.

00:51:02.120 --> 00:51:05.660
Another way is to write some code
and perhaps leverage fix and continue

00:51:05.660 --> 00:51:07.600
to maybe speed up that process.

00:51:07.600 --> 00:51:11.210
But another way is to abstract
the inclusion of the actual image,

00:51:11.210 --> 00:51:14.740
the triggering of that
image into my nib file.

00:51:14.780 --> 00:51:16.840
And so I'm going to do that right now.

00:51:16.840 --> 00:51:23.090
I'll-- With the application and I'm
going to bring up Interface Builder.

00:51:24.140 --> 00:51:30.030
And here is the nib file, so to speak,
the file that contains my

00:51:30.030 --> 00:51:31.480
user interface for Clock View.

00:51:31.670 --> 00:51:36.880
And this view right here represents the
custom control that is the Clock View.

00:51:36.940 --> 00:51:40.490
And I'm going to bring up
the inspector for this.

00:51:40.610 --> 00:51:43.370
And in the control inspector-- for
those of you who may be familiar with

00:51:43.370 --> 00:51:45.650
the control inspector in the past,
you'll notice this new

00:51:45.780 --> 00:51:47.090
table view at the bottom.

00:51:47.310 --> 00:51:50.080
And this is a place that
I can associate ad hoc data

00:51:50.130 --> 00:51:52.020
properties right to this control.

00:51:52.200 --> 00:51:55.710
So at runtime, I can pull them out and
do something interesting.

00:51:55.830 --> 00:51:58.380
So I'm going to add a
new property to this.

00:51:58.380 --> 00:52:05.160
I'm going to give it a creator
code of my app and call this image,

00:52:05.190 --> 00:52:06.800
and it's a Unicode string.

00:52:06.800 --> 00:52:12.030
And I happen to have an image in my
project already included called Panther.

00:52:12.100 --> 00:52:17.850
And I'll just save my nib file,
hide interface builder, and quick build.

00:52:18.160 --> 00:52:21.180
And all that did is--

00:52:21.320 --> 00:52:24.120
Copy the Nib file into place,
no recompiled code,

00:52:24.210 --> 00:52:27.010
image in the background of my clock.

00:52:27.100 --> 00:52:30.470
Now, this is important because this,

00:52:33.350 --> 00:52:39.090
This is important because this gives
me the ability to be more than just

00:52:39.150 --> 00:52:42.090
a viewed editor in Interface Builder.

00:52:42.100 --> 00:52:45.900
It gives me the ability to take
attributes that I've coded into my

00:52:45.900 --> 00:52:49.330
custom view and make them available
at a level where somebody doesn't

00:52:49.330 --> 00:52:50.640
actually have to write code to do it.

00:52:50.700 --> 00:52:54.070
So, for example,
if I go back into Interface Builder,

00:52:54.070 --> 00:52:58.150
say I want to have another one of these,
I could duplicate this or

00:52:58.280 --> 00:53:00.420
drag it off the palette,
basically just create

00:53:00.420 --> 00:53:01.200
another custom view.

00:53:01.200 --> 00:53:02.700
And this one I'm going to change.

00:53:02.700 --> 00:53:05.130
I'll stick another image in there.

00:53:05.370 --> 00:53:09.800
I'll add a new property to this,
and this one's going to be rotate.

00:53:09.840 --> 00:53:11.540
This happens to be a float value.

00:53:11.540 --> 00:53:16.840
Now, this editor gives us the ability to
set the actual type of the data that

00:53:16.920 --> 00:53:20.230
I can retrieve when I get that property.

00:53:20.300 --> 00:53:24.150
This is a Boolean,
and I'm going to call that true,

00:53:24.150 --> 00:53:28.300
to resize my window,
and I'm going to save.

00:53:28.490 --> 00:53:30.960
Hide Interface Builder.

00:53:31.800 --> 00:53:38.070
Quick Compile and Run, and two objects,
slightly different data in the nib file,

00:53:38.280 --> 00:53:42.200
but effectively,
I've repurposed that object

00:53:42.200 --> 00:53:45.010
without writing any new code.

00:53:45.010 --> 00:53:45.010
Okay.

00:53:49.400 --> 00:53:51.020
So let's go back to the main screen.

00:53:51.060 --> 00:53:54.980
All right, there's my demo.

00:53:55.070 --> 00:53:57.540
All right, so let's talk about
Cocoa for a few moments.

00:53:57.640 --> 00:54:00.720
So of course, in Cocoa, we're supporting,
just like with Carbon,

00:54:00.720 --> 00:54:04.700
all the Panther controls and
sizes and interesting features.

00:54:04.730 --> 00:54:07.060
One of those, of course,
is a brand new feature called

00:54:07.080 --> 00:54:09.710
the Controller Layer Support.

00:54:11.870 --> 00:54:17.680
As hopefully most of you saw yesterday,
there was a, we're supporting WebKit.

00:54:19.350 --> 00:54:22.560
and for those of you who may be familiar
with Interface Builder of the past,

00:54:22.560 --> 00:54:25.250
we're trying to satisfy
a long requested feature,

00:54:25.250 --> 00:54:29.240
and that's adding data cell
support to table columns.

00:54:29.730 --> 00:54:31.210
So you can just drag
them off your pallet,

00:54:31.320 --> 00:54:34.220
drop them on top of your column,
and you have your cell.

00:54:34.220 --> 00:54:38.650
And we've also revamped
the Connections Inspector.

00:54:39.780 --> 00:54:43.790
So, to demo this,
I actually want to focus,

00:54:43.900 --> 00:54:46.500
I only have so much time,
and I want to focus on one

00:54:46.500 --> 00:54:51.880
very important feature,
and that's the controller layer.

00:54:51.880 --> 00:54:51.880
Now,

00:54:52.160 --> 00:54:56.040
Yesterday, hopefully most of you saw the
example where we built a web

00:54:56.040 --> 00:54:57.730
browser without writing any code.

00:54:57.760 --> 00:55:00.740
And we didn't just build a web browser.

00:55:00.740 --> 00:55:02.580
Then after we were done
building the basics,

00:55:02.580 --> 00:55:04.760
which is the old IB demo
of target action,

00:55:04.760 --> 00:55:05.790
we polished it.

00:55:06.040 --> 00:55:07.820
We made it really clean.

00:55:07.820 --> 00:55:10.420
And hopefully you recognize
that typically to make an

00:55:10.430 --> 00:55:13.060
application really clean,
you've got to write code.

00:55:13.080 --> 00:55:15.970
You have to take advantage of
more than you can do with just

00:55:16.280 --> 00:55:18.000
wiring up a few connections.

00:55:18.000 --> 00:55:20.460
And we did this with this new
feature called the Controller Layer.

00:55:20.970 --> 00:55:22.900
Now, I'm going to deviate from that demo.

00:55:22.900 --> 00:55:24.100
I'm not actually going
to show that to you,

00:55:24.110 --> 00:55:27.780
because I think it's important
to show the raw materials of what

00:55:27.780 --> 00:55:30.370
the Controller Layer is giving
you inside Interface Builder.

00:55:30.400 --> 00:55:36.830
So to do that, let's quit out of this,
and quit Xcode, and just go into IB.

00:55:36.880 --> 00:55:39.930
And let's get rid of this,
because I don't need it anymore.

00:55:39.970 --> 00:55:41.870
I'm going to create a
new application here,

00:55:41.870 --> 00:55:44.990
and I'm going to do the staple
of Interface Builder demos,

00:55:45.000 --> 00:55:45.730
just to start.

00:55:45.800 --> 00:55:47.650
And that's the slider text field demo.

00:55:47.680 --> 00:55:49.500
So I can hear the yawns.

00:55:49.620 --> 00:55:50.750
Everybody's seen this before.

00:55:50.840 --> 00:55:54.910
but this is an important
moment in the history of IB.

00:55:56.320 --> 00:55:57.460
So there's my slider.

00:55:57.520 --> 00:56:00.200
Oh, and by the way,
let's just pop a new feature here.

00:56:00.200 --> 00:56:02.880
Let's just make that a mini slider,
just so that I can

00:56:02.900 --> 00:56:04.360
demo yet a new feature.

00:56:04.360 --> 00:56:06.560
And I'm going to make my
text field really large.

00:56:06.890 --> 00:56:12.550
Another thing that's worth noting
is we've reorganized a lot of

00:56:12.550 --> 00:56:16.290
the palettes and the inspectors
to accommodate for new features.

00:56:16.290 --> 00:56:16.290
Hopefully you find them more streamlined,
and we appreciate feedback.

00:56:16.950 --> 00:56:20.130
So, when I'm doing this,
what I need to do is establish

00:56:20.190 --> 00:56:22.740
a connection between this
slider and this text field.

00:56:22.740 --> 00:56:25.670
I'd like, when my slider moves,
I'd like the value in

00:56:25.670 --> 00:56:26.850
my text field to change.

00:56:26.860 --> 00:56:27.460
Okay?

00:56:27.460 --> 00:56:30.430
So, I do that by dragging a
connection in Interface Builder,

00:56:30.430 --> 00:56:33.720
and when I do that,
Interface Builder gives me a list of all

00:56:33.720 --> 00:56:37.640
of the possible things that that text
field can do when it receives a message.

00:56:37.980 --> 00:56:40.850
So, I'm going to choose "Take
Double Value From." Now,

00:56:40.850 --> 00:56:42.360
by the way,
I just want to point out another

00:56:42.360 --> 00:56:44.980
little feature that we've
added to Interface Builder.

00:56:44.980 --> 00:56:46.980
We've added type-ahead support.

00:56:46.980 --> 00:56:49.950
So, if this list were really long,
I could just start typing keys.

00:56:49.980 --> 00:56:53.980
"P", "Take Value From",
and it'll jump around.

00:56:53.980 --> 00:56:54.970
This is especially important,
for instance,

00:56:54.980 --> 00:56:57.980
if you target first responder,
and you've got to scroll and find

00:56:57.980 --> 00:57:01.020
the thing that you want to deal with.

00:57:02.830 --> 00:57:05.780
Okay, so let's make sure that
I have that connection,

00:57:05.780 --> 00:57:08.420
take float value from,
test our interface, right.

00:57:08.420 --> 00:57:11.710
So now, when I'm moving my slider,
now it's a mini-control,

00:57:11.720 --> 00:57:14.000
it's harder to hit, I change my value.

00:57:14.020 --> 00:57:16.740
Okay, so this is kind of interesting,
right?

00:57:16.870 --> 00:57:20.200
Many of you have seen this,
but the reality is,

00:57:20.200 --> 00:57:23.980
that text field has a whole lot more
capability than just showing a value.

00:57:24.460 --> 00:57:26.990
Right, and we take advantage of
that today in our interfaces.

00:57:27.010 --> 00:57:31.380
We have colors, we have sizes,
we enable items, we disable items,

00:57:31.490 --> 00:57:32.460
sometimes we hide them, right.

00:57:32.460 --> 00:57:34.260
And so, what do we do?

00:57:34.260 --> 00:57:35.260
We go to code.

00:57:35.370 --> 00:57:41.420
Now, what I'd like to do is unwire this,
and here, we'll disconnect that.

00:57:41.530 --> 00:57:45.370
And now I'd like to use the controller
layer to solve this problem for us.

00:57:45.430 --> 00:57:48.460
So, to do that, I need a controller.

00:57:48.530 --> 00:57:51.330
And so we have a new palette here,
it's the controller palette.

00:57:51.330 --> 00:57:53.460
And I'm going to use the most
basic controller we have.

00:57:54.470 --> 00:57:55.460
Which is an object controller.

00:57:55.460 --> 00:57:58.460
And you can think of
this like a traffic cop,

00:57:58.460 --> 00:58:00.460
like a,
well I was going to say traffic cop.

00:58:00.460 --> 00:58:02.350
You can think of this like a traffic cop.

00:58:02.470 --> 00:58:06.580
It basically is going to look at
all the pieces of our interface,

00:58:06.750 --> 00:58:09.520
and it's going to monitor this,
when it sees a change there,

00:58:09.520 --> 00:58:10.460
it's going to change a value there.

00:58:10.460 --> 00:58:11.860
It's going to do all
the right things for us,

00:58:11.980 --> 00:58:13.460
so that we don't have to write that code.

00:58:13.460 --> 00:58:14.400
Okay.

00:58:14.460 --> 00:58:16.460
So, I have my controller.

00:58:16.460 --> 00:58:18.890
Now, I need to make some
bindings to this controller,

00:58:18.970 --> 00:58:21.460
so that this actually does
something interesting.

00:58:21.460 --> 00:58:23.460
So, I'm going to go to a brand
new inspector in interface.

00:58:24.460 --> 00:58:27.330
And it's a very important one,
so we put it right under attributes,

00:58:27.330 --> 00:58:28.460
it's called bindings.

00:58:28.460 --> 00:58:31.880
And the bindings inspector is
interface builder's window into

00:58:31.880 --> 00:58:35.180
all those other properties you
had to go to code for in the past.

00:58:35.480 --> 00:58:39.210
Okay, so on my slider,
which I have selected now,

00:58:39.210 --> 00:58:42.460
I could enable it or hide it,
it has max and min value,

00:58:42.460 --> 00:58:43.390
and it also has value.

00:58:43.520 --> 00:58:46.080
And I'm going to choose
my object controller,

00:58:46.150 --> 00:58:48.760
which I just created,
and I'm going to bind

00:58:48.760 --> 00:58:50.460
to a key called number.

00:58:50.460 --> 00:58:52.220
Just an arbitrary key.

00:58:53.460 --> 00:58:54.460
And then I'm going to
go to my text field.

00:58:54.460 --> 00:58:56.280
Note that it has a much
longer list of things that you

00:58:56.370 --> 00:58:57.460
can do with the text field.

00:58:57.460 --> 00:58:59.460
It's just a more interesting widget.

00:58:59.580 --> 00:59:02.440
And I'm going to choose
my object controller,

00:59:02.500 --> 00:59:05.410
and I'm going to bind to the same value.

00:59:05.670 --> 00:59:07.460
Number.

00:59:08.300 --> 00:59:10.730
But I'm going to do something more here.

00:59:10.800 --> 00:59:14.740
I'm going to close my value,
and I'm going to go to font size.

00:59:14.880 --> 00:59:16.600
And I'm going to go to
my object controller,

00:59:16.600 --> 00:59:20.440
and I'm going to bind font
size to that exact same value.

00:59:20.460 --> 00:59:21.740
Okay?

00:59:21.820 --> 00:59:26.500
And when I test my interface now,
not only is my value changing,

00:59:26.890 --> 00:59:28.370
but my font size is changing as well.

00:59:28.370 --> 00:59:34.500
Now, this is the new slider text
field for Interface Builder and

00:59:34.500 --> 00:59:36.340
this is what I meant when this
is kind of a groundbreaking

00:59:36.420 --> 00:59:37.680
step for Interface Builder.

00:59:37.790 --> 00:59:40.090
Because for years,
we've been asked how come I can't

00:59:40.090 --> 00:59:43.080
have more than one action or how come
I can't have more than one target.

00:59:43.080 --> 00:59:46.050
And the reality is that that's the
wrong way to solve this problem.

00:59:46.150 --> 00:59:48.890
The right way to solve this
problem is to have a controller,

00:59:49.060 --> 00:59:52.600
one of them, be the controller for
all of these pieces.

00:59:52.680 --> 00:59:57.560
And all you have to do to that controller
is give it its--give it the rule list,

00:59:57.560 --> 00:59:58.500
the roster.

00:59:58.500 --> 01:00:00.120
Okay,
here's what you need to do controller.

01:00:00.120 --> 01:00:02.830
You need to monitor this thing and
that thing and these things over here.

01:00:03.090 --> 01:00:05.600
And oh, by the way,
it would be really great if you could

01:00:05.700 --> 01:00:07.600
persist this data in my data model too.

01:00:07.910 --> 01:00:11.280
And so controllers also have implied
depending on the controller type,

01:00:11.280 --> 01:00:14.820
the ability to persist that data
in the user defaults database

01:00:14.820 --> 01:00:16.810
or perhaps another database.

01:00:16.870 --> 01:00:19.820
I'm just using a raw object controller
here so it doesn't actually have

01:00:19.830 --> 01:00:23.720
persistence but I could have used
the user defaults controller.

01:00:23.730 --> 01:00:30.230
So that's what I wanted to show
you for Cocoa and I have lost my

01:00:30.230 --> 01:00:33.190
clicker which must be over here.

01:00:33.390 --> 01:00:34.520
Now, there's one more thing.

01:00:40.520 --> 01:00:42.820
And that's compatibility checking.

01:00:42.980 --> 01:00:46.780
So, we're on our fourth major
release of Mac OS X,

01:00:46.810 --> 01:00:50.040
and that means that there are
all these features trickled

01:00:50.070 --> 01:00:52.660
into releases month after month,
year after year,

01:00:52.660 --> 01:00:53.950
and you have to support them.

01:00:54.040 --> 01:00:58.910
And we recognize that we need
to make it easier on you to

01:00:59.120 --> 01:01:01.030
support these features reliably.

01:01:01.040 --> 01:01:04.520
So, what we have done in Interface
Builder is add better

01:01:04.520 --> 01:01:06.910
compatibility checking support.

01:01:07.070 --> 01:01:10.180
So, basically, select the format you
want your Nib to be in,

01:01:10.250 --> 01:01:13.240
tell it what the target platform is,
the oldest target platform,

01:01:13.370 --> 01:01:14.500
and watch for errors.

01:01:14.520 --> 01:01:16.290
And Interface Builder will
warn you when it thinks you're

01:01:16.290 --> 01:01:17.200
about to do something wrong.

01:01:17.380 --> 01:01:21.720
For example,
if you are targeting Mac OS 10.1

01:01:21.850 --> 01:01:26.610
as your oldest target platform,
perhaps you shouldn't pull a spinning

01:01:26.610 --> 01:01:30.050
progress indicator in because
that wasn't supported on X.1,

01:01:30.050 --> 01:01:31.300
and it just won't work.

01:01:31.320 --> 01:01:33.440
In fact, that's a data loss one,
so you won't even be

01:01:33.440 --> 01:01:36.240
able to save your Nib.

01:01:36.240 --> 01:01:38.800
So that's all I have to talk about today.

01:01:38.800 --> 01:01:40.300
Thank you.

01:01:46.110 --> 01:01:47.140
Thank you, Eric.

01:01:47.240 --> 01:01:49.120
That was a very interesting demo.

01:01:49.340 --> 01:01:51.980
There will be more on that.

01:01:52.870 --> 01:01:53.680
Summary.

01:01:54.160 --> 01:01:57.740
Xcode gives you a very
efficient workflow.

01:01:57.840 --> 01:01:59.750
It's fast in all respects.

01:01:59.850 --> 01:02:04.350
It's fast at building, at debugging,
and also helps you to be fast

01:02:04.350 --> 01:02:07.150
on your end through profiling.

01:02:07.250 --> 01:02:09.040
We want you to use it.

01:02:09.190 --> 01:02:11.220
Install it both on Jaguar and Panther.

01:02:11.220 --> 01:02:15.670
In your package, there should be two CDs,
one for Panther, one for Jaguar.

01:02:15.910 --> 01:02:18.790
99% of all features are
available on Jaguar,

01:02:18.790 --> 01:02:20.340
all of them on Panther.

01:02:20.450 --> 01:02:21.780
And please do send us feedback.

01:02:21.780 --> 01:02:25.500
The product can be only as good as you
help us make it by giving us feedback.

01:02:27.650 --> 01:02:31.460
So to start with feedback,
who to contact?

01:02:31.470 --> 01:02:33.400
Godfrey DiGiorgi.

01:02:33.400 --> 01:02:34.500
There are mailing lists.

01:02:34.880 --> 01:02:37.890
There is an Xcode specific
mailing list at the very bottom.

01:02:38.130 --> 01:02:39.130
We do read this.

01:02:39.350 --> 01:02:44.580
Heck, our vice president has said that
he will be reading that email.

01:02:44.580 --> 01:02:44.580
So,

01:02:45.000 --> 01:02:51.900
[Transcript missing]

01:02:52.490 --> 01:02:53.800
and the roadmap.

01:02:53.800 --> 01:02:58.200
Session 303, increasing productivity,
24 hours here.

01:02:58.300 --> 01:03:01.400
There's a special session about GCC.

01:03:01.400 --> 01:03:05.340
There's a session about performance
tuning with the performance tools.

01:03:05.460 --> 01:03:10.140
There's a special session
about Carbon with Xcode.

01:03:10.470 --> 01:03:14.750
And there will be the feedback
session where you can give

01:03:14.850 --> 01:03:16.920
us a earful of feedback.

01:03:17.050 --> 01:03:19.720
And finally, debugging on Mac OS X after
the feedback session.