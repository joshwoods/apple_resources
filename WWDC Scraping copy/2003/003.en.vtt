WEBVTT

00:00:27.910 --> 00:00:28.400
Good afternoon.

00:00:28.400 --> 00:00:32.320
Welcome to the Creating Content for
Soundtrack and LiveType session.

00:00:32.320 --> 00:00:37.470
Soundtrack and LiveType are a couple
of our applications that are part

00:00:37.480 --> 00:00:41.680
of our professional application
products available from Apple.

00:00:41.680 --> 00:00:44.650
Specifically,
Soundtrack and LiveType are part

00:00:44.650 --> 00:00:46.720
of the Final Cut Pro 4 bundle.

00:00:46.720 --> 00:00:52.000
We'll be talking today about the
process for actually creating content

00:00:52.000 --> 00:00:56.810
for these applications as one of
the numerous developer opportunities

00:00:56.810 --> 00:01:01.560
that are available to help contribute
to the professional application set,

00:01:01.930 --> 00:01:06.020
which also include things like
plug-ins and workflow opportunities

00:01:06.020 --> 00:01:08.400
and driver development and such.

00:01:08.400 --> 00:01:11.010
This session is going to
focus specifically on creating

00:01:11.120 --> 00:01:12.600
content for these two apps.

00:01:12.600 --> 00:01:15.570
We're going to start by
talking a bit about LiveType,

00:01:15.570 --> 00:01:18.580
and we'll get into a little
bit later Soundtrack.

00:01:18.580 --> 00:01:21.880
Soundtrack is the music
creation application that's,

00:01:21.970 --> 00:01:23.860
again, part of Final Cut Pro.

00:01:23.880 --> 00:01:28.470
But to start, let's get into Lifetype.

00:01:28.960 --> 00:01:31.820
LiveType, as I mentioned,
is an application that's bundled

00:01:32.010 --> 00:01:34.080
as part of Final Cut Pro 4.

00:01:34.240 --> 00:01:38.380
It is basically our pro
video titling application.

00:01:38.540 --> 00:01:42.900
What's unusual about LiveType
is its incredible capacity for

00:01:42.900 --> 00:01:47.580
doing animation and manipulating
a very sophisticated media.

00:01:47.620 --> 00:01:52.300
What we're going to talk about today
is the content that LiveType uses and

00:01:52.360 --> 00:01:57.000
how you can actually create content
to enhance the application and the

00:01:57.000 --> 00:02:01.790
opportunities you have for selling
into this particular customer base.

00:02:01.870 --> 00:02:05.520
There's a number of different kinds
of content supported by LiveType.

00:02:06.080 --> 00:02:09.300
Things we call active files,
which is kind of the

00:02:09.340 --> 00:02:13.480
high-level conceptual container
model for this content,

00:02:13.740 --> 00:02:16.510
which is built up of
different kinds of content.

00:02:16.840 --> 00:02:19.850
Specifically, textures, which are,
if you will,

00:02:19.850 --> 00:02:23.240
motion-back or animated backgrounds,
typically.

00:02:23.730 --> 00:02:27.910
Objects,
which are similarly packaged but also

00:02:27.910 --> 00:02:31.380
incorporate an alpha channel capability.

00:02:31.380 --> 00:02:33.720
Basically,
would be used in conjunction with

00:02:33.720 --> 00:02:37.080
other material in the background
or might be merged into some other

00:02:37.080 --> 00:02:38.890
video or other material you may have.

00:02:39.250 --> 00:02:43.370
And live fonts, which is a new technology
that we've introduced,

00:02:43.370 --> 00:02:49.330
which is the concept of having fonts that
are actually fully animated movies where

00:02:49.440 --> 00:02:54.100
each glyph can have animation capability.

00:02:54.100 --> 00:02:59.100
Motion can be, as you'll see,
made up of some very amazing

00:02:59.100 --> 00:03:05.830
footage or material to basically
present text in a very,

00:03:05.840 --> 00:03:07.620
very new way.

00:03:07.670 --> 00:03:11.340
And another form of content that
LiveType incorporates is effects,

00:03:11.420 --> 00:03:14.700
which is the ability to then take
all of this content that we've

00:03:14.840 --> 00:03:17.510
talked about and do very amazing
things in terms of animation.

00:03:17.750 --> 00:03:22.020
Move it around on the screen,
make things fade, come into play,

00:03:22.020 --> 00:03:23.140
et cetera.

00:03:23.140 --> 00:03:27.020
And lastly, we have templates,
which are basically all of this material

00:03:27.210 --> 00:03:31.300
that's combined together into a form
that can be packaged up so that users

00:03:31.300 --> 00:03:33.300
can actually build projects with it.

00:03:33.300 --> 00:03:35.600
And to kind of get into
this in a lot more depth,

00:03:35.730 --> 00:03:40.570
I'm going to invite up Tom Langmacher,
who's the product designer for LiveType,

00:03:40.600 --> 00:03:44.570
and he'll give a brief demo and
actually get into what this all means.

00:03:53.020 --> 00:03:55.620
Check, check, check.

00:03:55.630 --> 00:03:57.020
Glad you all could be here today.

00:03:57.020 --> 00:03:59.930
I'm always excited to
talk about LiveType.

00:03:59.940 --> 00:04:04.700
This is the world's only 3D,
or only application that will

00:04:05.150 --> 00:04:08.100
type 32-bit animated fonts.

00:04:08.100 --> 00:04:11.220
It's a really exciting concept
that Apple's developing here.

00:04:11.220 --> 00:04:15.340
I like to think of LiveType
and LiveFonts analogous to what

00:04:15.340 --> 00:04:20.200
system fonts were for the desktop
publishing industry in the '80s.

00:04:20.200 --> 00:04:23.810
LiveFonts are for digital media
content creation and delivery,

00:04:23.930 --> 00:04:27.760
the new 21st century font standard.

00:04:27.760 --> 00:04:33.140
And Apple's bringing this
technology forward and making

00:04:33.170 --> 00:04:35.160
it available for the masses.

00:04:35.160 --> 00:04:40.180
And we have an excellent opportunity
here to create content for it.

00:04:40.230 --> 00:04:44.080
Just by owning LiveType,
you have the ability to create LiveFonts

00:04:44.110 --> 00:04:48.480
and create your own animations,
compile them into a LiveFont,

00:04:48.660 --> 00:04:52.440
and deliver them to the media,
hungry public.

00:04:52.440 --> 00:04:55.340
And we have a great opportunity
to create a new version of

00:04:55.490 --> 00:04:59.540
LiveFonts that's royalty free,
which is a very exciting,

00:04:59.550 --> 00:05:04.610
brand new emerging market that we'd
love to have you all be a part of.

00:05:06.740 --> 00:05:07.910
Right here is the canvas.

00:05:07.990 --> 00:05:11.900
This is where you do your
composing for the text.

00:05:11.900 --> 00:05:12.800
This is the inspector.

00:05:12.800 --> 00:05:17.460
This is where you type in characters
and also create and influence

00:05:17.530 --> 00:05:19.120
the attributes of the characters.

00:05:19.140 --> 00:05:22.300
And in the media browser,
this is where the content comes from.

00:05:22.340 --> 00:05:25.160
Things like Brett was
talking about textures,

00:05:25.200 --> 00:05:27.510
objects, effects, and LiveFonts.

00:05:27.510 --> 00:05:31.510
And then you have the timeline,
and that's where you can influence

00:05:31.510 --> 00:05:33.650
the timing for your composition.

00:05:33.650 --> 00:05:35.050
So let me start by typing
something out here.

00:05:38.080 --> 00:05:41.780
The first thing you notice that's
truly unique about this application is,

00:05:41.780 --> 00:05:45.360
everyone of these characters are
drawn as an independent layer.

00:05:45.360 --> 00:05:48.980
You have the ability to grab and compose,
rotate, scale,

00:05:49.090 --> 00:05:53.830
essentially control all the attributes
available to you from the Inspector on

00:05:53.890 --> 00:05:56.910
a character by character basis.

00:05:56.910 --> 00:06:00.160
Makes it very pleasurable to use.

00:06:00.160 --> 00:06:03.640
Not only are these independent layers,
but they're contained in a single track.

00:06:03.840 --> 00:06:07.200
This single track is represented
down here on the timeline.

00:06:07.200 --> 00:06:10.520
Imagine having this many
movies or animations,

00:06:10.520 --> 00:06:13.380
eight different layers on a
typical animation program.

00:06:13.380 --> 00:06:17.000
It becomes very difficult to,
for instance, control color and your

00:06:17.030 --> 00:06:18.420
timing considerations.

00:06:18.830 --> 00:06:20.830
Whereas we give you this
all on a single track.

00:06:20.830 --> 00:06:22.750
Imagine if it were a sentence.

00:06:22.750 --> 00:06:25.670
You'd end up with dozens
and dozens of layers.

00:06:26.500 --> 00:06:30.050
Let me demonstrate how this
works for attribute control.

00:06:30.050 --> 00:06:32.770
If I were to just colorize, for instance,

00:06:33.700 --> 00:06:53.500
[Transcript missing]

00:07:01.800 --> 00:07:04.490
Now, any of these attributes that are
available to me in the inspector,

00:07:04.500 --> 00:07:09.100
things like opacity, blur, scale, offset,
rotate, all of these I can apply on a

00:07:09.190 --> 00:07:11.190
character-by-character basis.

00:07:11.480 --> 00:07:15.700
LiveFonts are essentially,
can be created from anything.

00:07:15.700 --> 00:07:19.750
Take this bevel, for instance,
it's created in a 3D application.

00:07:19.830 --> 00:07:22.890
You can do something
with a hand-drawn font,

00:07:22.890 --> 00:07:23.900
for instance.

00:07:24.210 --> 00:07:27.340
Things you can create in
3D or 2D applications,

00:07:27.390 --> 00:07:30.370
this is created in a particle generator.

00:07:32.240 --> 00:07:33.830
"Things that you can
shoot with a video camera,

00:07:33.940 --> 00:07:39.400
real-world style fonts, stop frame,
high resolution film cameras,

00:07:39.420 --> 00:07:41.600
for instance, could be LiveFonts."

00:07:42.850 --> 00:07:45.380
Once I choose my font
from the media browser,

00:07:45.510 --> 00:07:47.040
I'm happy with it.

00:07:47.040 --> 00:07:50.600
I can demonstrate how this works.

00:07:51.980 --> 00:07:55.570
Every one of these characters are
individual animations that are

00:07:55.570 --> 00:07:58.360
being drawn character by character.

00:07:59.520 --> 00:08:02.540
But let's say I want to
control the timing of this.

00:08:02.620 --> 00:08:06.370
Right now they're all
triggering one at a time.

00:08:07.090 --> 00:08:10.840
I have a timing tab that gives
me the ability to set when

00:08:10.840 --> 00:08:12.300
these animations are triggered.

00:08:12.330 --> 00:08:15.570
I can choose to trigger them randomly.

00:08:16.920 --> 00:08:21.320
"I can sequence them from left
to right or right to left.

00:08:21.360 --> 00:08:23.080
I can control the speed of it.

00:08:23.080 --> 00:08:24.900
I can also loop them.

00:08:24.940 --> 00:08:27.350
I can do hold first frame,
hold last frame.

00:08:27.450 --> 00:08:31.340
Things that would be a bit complex to
do in any other application if you're

00:08:31.340 --> 00:08:33.790
dealing with all these layers at once."

00:08:34.270 --> 00:08:37.570
Now in addition to LiveFonts,
we also give you the

00:08:37.570 --> 00:08:39.600
ability to use system fonts.

00:08:43.850 --> 00:08:46.960
And something really great came
out of our development as we

00:08:46.990 --> 00:08:48.960
were working with system fonts.

00:08:49.110 --> 00:08:51.520
You also have the ability to
control these system fonts on

00:08:51.560 --> 00:08:57.100
an individual character basis,
so that your composition is fun and easy.

00:08:57.100 --> 00:08:59.700
You're not grabbing - you
can grab these one at a time,

00:08:59.820 --> 00:09:01.930
control their attributes.

00:09:02.870 --> 00:09:07.350
Now, when it comes time to animate these,
the same with LiveFonts

00:09:07.350 --> 00:09:12.540
as with System Fonts,
we offer this new concept of effects that

00:09:12.540 --> 00:09:16.400
are essentially modules with keyframes.

00:09:16.480 --> 00:09:18.860
Let me just pick an effect here.

00:09:18.980 --> 00:09:20.970
Lots to choose from.

00:09:22.550 --> 00:09:24.720
Simple matter of double clicking.

00:09:24.720 --> 00:09:28.780
This effect is applied to a track,
and that effect stays with the track.

00:09:28.830 --> 00:09:31.770
You can apply as many
effects as you like.

00:09:32.470 --> 00:09:36.060
And just by simply clicking on it,
and hit and play,

00:09:36.090 --> 00:09:39.250
I've created a fairly complex animation.

00:09:39.250 --> 00:09:42.700
And obviously I can swap out
my language however I like.

00:09:43.930 --> 00:09:47.160
And it's just as easy to
create effects from scratch.

00:09:47.320 --> 00:09:48.760
Let me demonstrate that.

00:09:48.970 --> 00:09:52.800
So if I add a new effect,
let me scoot this first

00:09:52.910 --> 00:09:55.310
effect over just a little bit.

00:09:56.080 --> 00:09:58.550
As an effect comes in from scratch,
I'm working with two

00:09:58.550 --> 00:10:02.200
keyframes to begin with,
a beginning and an ending keyframe.

00:10:03.140 --> 00:10:07.080
And in the Effects tab,
you'll see that I've got this new effect,

00:10:07.080 --> 00:10:09.330
and I can call it anything I want.

00:10:14.650 --> 00:10:17.300
So if I grab any character
on here and start applying

00:10:17.300 --> 00:10:20.600
attributes to that keyframe,
let's start with maybe

00:10:20.600 --> 00:10:22.030
an offset and a scale.

00:10:22.310 --> 00:10:24.580
Let me rotate it a little bit.

00:10:24.660 --> 00:10:28.670
I can even give it a Bezier motion path.

00:10:30.820 --> 00:10:34.260
As you see on the wireframe,
it gives me real-time updates

00:10:34.370 --> 00:10:35.680
of what I'm doing as I go along.

00:10:35.800 --> 00:10:39.220
I think I want to give this
an opacity change as well,

00:10:39.260 --> 00:10:43.850
so that it starts with zero
opacity and moves in full screen.

00:10:44.510 --> 00:10:47.400
Now what's interesting, here,
you see in the Effects tab,

00:10:47.410 --> 00:10:51.640
I've just applied four
parameters to this keyframe.

00:10:51.760 --> 00:10:53.360
That's a very unique concept.

00:10:53.450 --> 00:10:57.180
In other applications,
you would see these broken down into four

00:10:57.180 --> 00:10:59.630
discrete tracks down in the timeline.

00:10:59.740 --> 00:11:03.310
And then I would have to control
each four of those and control where

00:11:03.520 --> 00:11:08.480
they occur in relation to each other,
and it gets awfully complex very quickly.

00:11:08.600 --> 00:11:12.360
With this application,
it's all contained in a single keyframe.

00:11:12.480 --> 00:11:15.140
Now I could break these out into
various effects if I want to,

00:11:15.140 --> 00:11:18.400
if I want that level of control,
but for most cases,

00:11:18.400 --> 00:11:19.140
I don't want to do that.

00:11:19.140 --> 00:11:22.390
I want this nice,
clean timeline down here.

00:11:22.490 --> 00:11:24.840
I have all of these
parameters available to me.

00:11:24.840 --> 00:11:25.820
I can do things.

00:11:25.920 --> 00:11:30.060
I can interpolate over time with
shadow and glow and outline,

00:11:30.060 --> 00:11:33.100
extrusion, blur, color, you name it.

00:11:33.890 --> 00:11:37.840
And the same kind of control that I have
with LiveFonts in terms of timing,

00:11:37.900 --> 00:11:39.020
I can also do with effects.

00:11:39.040 --> 00:11:42.270
So I can randomly trigger those
effects with each character,

00:11:42.490 --> 00:11:45.300
or sequence it over time, loop it.

00:11:45.420 --> 00:11:48.320
So let me just set a
bit of a random here.

00:11:50.200 --> 00:11:58.130
"And there, with just a few clicks,
I've created a unique animation.

00:11:58.750 --> 00:12:01.740
And I can choose,
if I like that effect that I just built,

00:12:01.790 --> 00:12:04.050
I can choose to save that.

00:12:04.100 --> 00:12:08.340
Just come under save, save the effect,
put it in my own folder,

00:12:08.340 --> 00:12:10.500
call it what I want,
give it a description,

00:12:10.530 --> 00:12:14.130
and then it'll show up next time
I need it in the effects browser.

00:12:14.170 --> 00:12:20.430
So it's really handy if I'm
starting on another project,

00:12:20.430 --> 00:12:21.610
that effect that I built days ago,
I can bring up and apply it at any time.

00:12:23.900 --> 00:12:29.070
Now, I like to think of this as
a content delivery system.

00:12:29.130 --> 00:12:31.580
We work with the media
browser delivers effects,

00:12:31.580 --> 00:12:33.400
objects, textures, and LiveFonts.

00:12:33.530 --> 00:12:36.680
As Brett was saying,
textures are background elements meant

00:12:36.680 --> 00:12:41.240
to be used as either background or
perhaps foreground layered elements.

00:12:41.400 --> 00:12:45.300
But you can also put these textures
inside of the text themselves.

00:12:46.190 --> 00:12:49.920
Lots to choose from,
but the idea is that this is the best

00:12:49.920 --> 00:12:54.080
delivery mechanism for the end user,
because while you can buy canned

00:12:54.080 --> 00:12:57.340
animations and stock animation,
this gives you the ability

00:12:57.340 --> 00:12:59.700
to create your own layers,
your own unique style.

00:12:59.700 --> 00:13:04.110
You can colorize the textures before
you apply your final touches to it.

00:13:04.290 --> 00:13:06.890
You can also apply objects.

00:13:07.330 --> 00:13:09.480
And those are the ones with alpha
channels that are meant to be in

00:13:09.480 --> 00:13:13.100
between layers or on top of layers.

00:13:13.200 --> 00:13:16.030
And of course you
control that layer order.

00:13:18.220 --> 00:13:21.760
So the end result ends up being
something very specifically

00:13:21.760 --> 00:13:23.340
unique to your own project.

00:13:23.340 --> 00:13:29.860
And it's easy to save this out
and then apply it in a template.

00:13:29.910 --> 00:13:31.260
Just let that render for a minute.

00:13:31.260 --> 00:13:37.420
OK, so my color coordination
may not be the best,

00:13:37.520 --> 00:13:39.600
but you get the idea.

00:13:43.370 --> 00:13:45.000
So I've got all these
elements at play here,

00:13:45.000 --> 00:13:49.120
and I can move them around with keyframe
animation but with these effect modules.

00:13:49.190 --> 00:13:54.260
So the combination of all this content
is all nicely put together in a template.

00:13:54.260 --> 00:13:58.130
If I were to save this project,
I can then apply this

00:13:58.140 --> 00:14:02.780
through the template browser,
and then call that up at any time,

00:14:02.780 --> 00:14:07.480
and then swap out my new
text with this template.

00:14:07.480 --> 00:14:10.970
So it's an excellent way to
deliver to the customer how you

00:14:10.970 --> 00:14:14.540
intended to use these live fonts
and how your additional content,

00:14:14.540 --> 00:14:17.170
such as objects and textures,
interplay together.

00:14:17.180 --> 00:14:19.650
You can create a number
of different styles,

00:14:19.650 --> 00:14:22.550
and categories,
and themes that greatly reduces

00:14:22.550 --> 00:14:28.900
the amount of time that an animator
or a video editor would need in

00:14:28.900 --> 00:14:31.490
order to create these from scratch.

00:14:32.130 --> 00:14:35.180
But our primary purpose for being
here is to talk about LiveFonts

00:14:35.180 --> 00:14:36.500
and the production thereof.

00:14:36.580 --> 00:14:40.150
So I'm going to ask Dave Howell,
the lead engineer for LiveType,

00:14:40.180 --> 00:14:41.340
to come up.

00:14:41.420 --> 00:14:45.040
And he's going to get into more
detail about how you make LiveFonts.

00:14:45.040 --> 00:14:49.150
Thanks, Tom.

00:14:57.070 --> 00:14:58.430
This monitor isn't on.

00:14:58.490 --> 00:15:01.900
Is that intentional?

00:15:01.900 --> 00:15:05.380
As Brett mentioned before,
the three main types of LiveType

00:15:05.380 --> 00:15:09.770
content are active files,
effects, and templates.

00:15:09.940 --> 00:15:15.000
And of active files,
there are three types.

00:15:15.270 --> 00:15:19.330
There are textures, objects,
and the LiveFont.

00:15:19.330 --> 00:15:19.330
And I'll go into how you make
each one of these things.

00:15:21.620 --> 00:15:24.500
First of all,
active files are actually a file pair.

00:15:24.500 --> 00:15:30.560
There's an active font proxy file
and an active font data file,

00:15:30.710 --> 00:15:31.790
AFP and AFD.

00:15:31.890 --> 00:15:35.870
And the reason there are two types
is that some users may not install

00:15:35.870 --> 00:15:38.120
all the content that you deliver.

00:15:38.340 --> 00:15:39.500
They may not install the data.

00:15:39.500 --> 00:15:40.990
A data file can be pretty large.

00:15:40.990 --> 00:15:44.700
It can be 100 megabytes
if you've got a font,

00:15:44.770 --> 00:15:48.150
say, with a couple hundred characters
in it and a few seconds,

00:15:48.250 --> 00:15:50.750
30 frames a second, high resolution.

00:15:51.700 --> 00:15:58.120
So they're separated out,
and they can be installed independently.

00:15:58.120 --> 00:16:00.480
The proxy files are relatively compact.

00:16:00.610 --> 00:16:05.340
They're compressed well,
and they contain all of the

00:16:05.520 --> 00:16:08.430
parameters that define a live font,
although they don't contain

00:16:08.490 --> 00:16:10.550
all of the compressed frames.

00:16:10.650 --> 00:16:13.960
They only contain one
compressed frame for each glyph.

00:16:13.960 --> 00:16:15.960
Thanks.

00:16:16.880 --> 00:16:23.480
So the simplest form of
a live file is a texture.

00:16:23.570 --> 00:16:25.950
A texture is just a--
it's basically a movie,

00:16:25.970 --> 00:16:29.230
a 24-bit per pixel movie.

00:16:29.340 --> 00:16:33.920
So anybody who has a library of
texture movies can repurpose these

00:16:33.950 --> 00:16:36.140
and make LiveType content from them.

00:16:36.180 --> 00:16:38.820
And that would be a
viable product in itself,

00:16:38.820 --> 00:16:41.910
just a collection of textures.

00:16:42.150 --> 00:16:45.080
It would enhance the
application quite a bit.

00:16:45.320 --> 00:16:49.200
The textures are high resolution,
they're full frame rate,

00:16:49.200 --> 00:16:51.800
and they're typically used
for background tracks,

00:16:51.920 --> 00:16:54.960
as you saw Tom demonstrate,
and also for texture mats.

00:16:54.980 --> 00:17:00.750
So, given a character,
you can texturize that and basically

00:17:00.750 --> 00:17:03.960
mat to the texture with that character.

00:17:04.090 --> 00:17:07.150
Here's an example of a texture.

00:17:13.940 --> 00:17:19.320
Now, an object is, again,
it comes from a QuickTime movie.

00:17:19.450 --> 00:17:23.540
You can use any QuickTime movie with
an alpha channel to make an object.

00:17:23.910 --> 00:17:28.130
And the main difference between
that and a texture is that

00:17:28.130 --> 00:17:30.180
it contains an alpha channel.

00:17:30.220 --> 00:17:33.490
The alpha channel can be straight
or it can be pre-multiplied

00:17:33.490 --> 00:17:34.970
against white or black.

00:17:35.120 --> 00:17:39.290
And again, it's high resolution,
full frame rate.

00:17:39.510 --> 00:17:42.240
And you typically use an
object for lower thirds.

00:17:42.240 --> 00:17:44.150
You can use it for the
bar across the bottom.

00:17:44.160 --> 00:17:46.880
You can use it as an accent,
like pixie dust.

00:17:47.040 --> 00:17:52.840
You can use it for a mat,
say a frame around your video,

00:17:52.840 --> 00:17:56.130
and for any special effects like this.

00:18:01.570 --> 00:18:07.390
Now, LiveFont is the new font
format that we've developed.

00:18:07.390 --> 00:18:11.340
And it's basically a
collection of objects,

00:18:11.360 --> 00:18:15.190
one for each glyph in a font.

00:18:15.190 --> 00:18:15.190
So,

00:18:15.540 --> 00:18:18.130
For a very simple one,
you might just have the Roman alphabet,

00:18:18.130 --> 00:18:19.870
and you may have just capital letters.

00:18:20.010 --> 00:18:22.080
And for your own use,
that might be sufficient.

00:18:22.130 --> 00:18:28.110
For the ones that we ship,
we have a full collection

00:18:28.110 --> 00:18:32.100
of 127 Mac Roman glyphs.

00:18:32.170 --> 00:18:35.720
And they're similar to objects
and the rest of their parameters.

00:18:35.720 --> 00:18:38.800
You build a LiveFont
by using a font script.

00:18:38.800 --> 00:18:43.110
And it's a simple command language
that we developed for this.

00:18:43.200 --> 00:18:46.920
Just a way of specifying all the
parameters in a way that's easy to

00:18:46.960 --> 00:18:50.920
replicate and edit in a text editor.

00:18:50.920 --> 00:18:53.740
It's not something that
the normal user would use,

00:18:53.740 --> 00:18:57.720
although it ships with LiveType.

00:18:58.090 --> 00:19:01.810
We have a font maker tool that's
built into LiveType that you

00:19:01.810 --> 00:19:04.290
would use to build LiveFonts.

00:19:06.130 --> 00:19:09.690
So I'll just quickly give you a feel
for what the font script looks like,

00:19:09.690 --> 00:19:12.240
although I won't go into
detail on really any of it,

00:19:12.240 --> 00:19:16.440
I just want you to see one
to see what's involved.

00:19:16.520 --> 00:19:20.190
A font script has a few commands that
specify the names of those source

00:19:20.190 --> 00:19:22.860
files and the destination files.

00:19:22.920 --> 00:19:24.690
Also,
you can specify what the name of the disk

00:19:24.700 --> 00:19:26.760
that you're going to distribute this.

00:19:26.820 --> 00:19:30.450
So that if a user doesn't
have it installed,

00:19:30.490 --> 00:19:34.300
a live type will say
please install the disk,

00:19:34.300 --> 00:19:39.470
in this case, demo disk to install.

00:19:40.590 --> 00:19:43.270
You tell the font script
what the flavor is.

00:19:43.330 --> 00:19:46.540
You can have, again, an active font,
which is a live font,

00:19:46.660 --> 00:19:51.460
or you can have texture or
object as the argument there.

00:19:51.460 --> 00:19:55.980
You tell it the alpha type,
which is straight, white, or black.

00:19:56.330 --> 00:19:59.960
You can give a description,
which shows up in a template browser.

00:20:00.110 --> 00:20:04.860
And these two commands you see here,
the lower left and center,

00:20:04.860 --> 00:20:08.040
are things that you'll measure
out in a graphics application.

00:20:08.140 --> 00:20:14.130
You'll find those two points
as offsets from the lower left

00:20:14.130 --> 00:20:17.310
hand of each source moving.

00:20:17.310 --> 00:20:17.310
Now,

00:20:18.580 --> 00:20:21.500
The next part is some spacing,
some horizontal spacing.

00:20:21.500 --> 00:20:23.060
There's the width of a space.

00:20:23.240 --> 00:20:25.790
That's just given because
there is no actual source

00:20:25.790 --> 00:20:30.620
movie for a space character,
typically.

00:20:30.620 --> 00:20:33.460
You have timing information in these two.

00:20:33.500 --> 00:20:38.540
There's whether or not the font can loop,
which is just true or false, zero or one.

00:20:38.690 --> 00:20:41.800
And then there is a count
of frames for intro frames,

00:20:41.800 --> 00:20:42.880
loop, and end.

00:20:43.000 --> 00:20:46.620
And when you extend the length of a
LiveFont in duration on the timeline,

00:20:46.760 --> 00:20:48.620
we loop the loop portion here.

00:20:48.620 --> 00:20:53.340
So the intro frames play first,
then you loop some number of times,

00:20:53.550 --> 00:20:55.740
and then go to the end frames.

00:20:55.800 --> 00:20:58.650
You specify the compression quality
of the RGB and alpha channels,

00:20:58.690 --> 00:21:01.800
which are compressed separately to
give you finer control over that.

00:21:02.120 --> 00:21:06.930
And the source frame rate for the movies.

00:21:07.870 --> 00:21:22.710
Aspect Ratio.

00:21:22.710 --> 00:21:22.710
You may have taken them from a DV camera
and you may have 0.9 pixel aspect,

00:21:22.710 --> 00:21:22.710
or you may have 1.0 if you
came from a 3D rendering app or

00:21:22.710 --> 00:21:22.710
some Photoshop or another app.

00:21:22.960 --> 00:21:26.500
And you also have a bunch of default
settings that are stored with LiveFont,

00:21:26.500 --> 00:21:30.140
and those are gone into in
some detail in the user manual.

00:21:30.420 --> 00:21:33.230
And finally, for each glyph,

00:21:34.110 --> 00:21:39.490
We let you specify the source movie,
the characters that will

00:21:39.490 --> 00:21:42.480
be mapped to that movie,
and some numbers that I'll

00:21:42.480 --> 00:21:44.420
go into in a little detail.

00:21:44.560 --> 00:21:45.380
Here's an example.

00:21:45.380 --> 00:21:51.720
We have a source movie
for the letter A here,

00:21:51.720 --> 00:21:51.720
and the letter A comes from A.movie.

00:21:52.380 --> 00:21:57.050
And the next two parameters are the
advance width from that glyph until the

00:21:57.050 --> 00:21:59.810
next glyph when rendered out on a track.

00:21:59.960 --> 00:22:03.630
And the next one is
the proxy frame index.

00:22:03.730 --> 00:22:08.040
So you can have a - you can tell
which proxy frame will be used

00:22:08.150 --> 00:22:13.090
if the font hasn't - if the data
file has not been installed yet.

00:22:14.610 --> 00:22:17.520
There are also some optional glyph
parameters that you don't need to

00:22:17.520 --> 00:22:21.140
put into your script unless they're
different from the lower left and center

00:22:21.330 --> 00:22:27.390
values found in the lower left and
center commands for your font script.

00:22:27.520 --> 00:22:30.360
So each glyph can have
its own values for those.

00:22:30.570 --> 00:22:34.320
Now,
effects are pretty simply the same as

00:22:34.320 --> 00:22:39.490
the effects that you build when you're
running the app for your own use.

00:22:39.500 --> 00:22:43.620
There's some tricks to preparing an
effect for release to the public,

00:22:43.790 --> 00:22:48.010
like making sure that the default
timing values are going to show up

00:22:48.010 --> 00:22:50.500
right for any duration of track.

00:22:50.500 --> 00:22:52.660
So if you've got something
that's a fade out,

00:22:52.660 --> 00:22:55.500
you'll want it to have a start
time that's from the end,

00:22:55.500 --> 00:22:56.500
not from the beginning.

00:22:56.500 --> 00:22:59.680
So it'll show up always
at the end of the track.

00:23:00.190 --> 00:23:04.380
And in effect, Tom went pretty much into
the capabilities of that,

00:23:04.440 --> 00:23:07.840
so I'll skip over that,
but here's an example of how you might...

00:23:08.660 --> 00:23:11.600
"What it does." And templates, again,
Tom went over that.

00:23:11.600 --> 00:23:16.460
It's just a saved project
file with a description.

00:23:16.460 --> 00:23:22.270
And it's something that the user
finds in the template browser,

00:23:22.810 --> 00:23:29.250
selects that, edits the text,
and renders out his own movie into them.

00:23:29.250 --> 00:23:29.910
So there's an example of one of
the templates just simply with

00:23:29.910 --> 00:23:29.910
the text changed and re-rendered.

00:23:31.000 --> 00:23:33.610
Also, when you're building live fonts,
effects, and templates,

00:23:33.700 --> 00:23:37.400
you're going to need a thumbnail movie
that the user will see inside the

00:23:37.400 --> 00:23:40.250
template or effect or live font browser.

00:23:40.390 --> 00:23:44.810
And the thumbnail movies
are 160 by 120 movies.

00:23:45.070 --> 00:23:48.750
They're compressed however you want,
just .mov files with the name

00:23:48.750 --> 00:23:50.430
specified from the font script.

00:23:50.430 --> 00:23:53.920
And when you're building those,
you should use a template of your own.

00:23:53.920 --> 00:23:56.260
You can make a thumbnail
template that's just 160,

00:23:56.260 --> 00:23:56.840
120.

00:23:56.840 --> 00:24:02.190
It makes it easy to to build that as
an example of what one might look like.

00:24:04.890 --> 00:24:09.680
Finally, you'll find in this user manual,
it says exactly where these

00:24:09.700 --> 00:24:11.370
things should be installed.

00:24:11.390 --> 00:24:15.300
You'll probably want to ship an installer
that puts these in the right place.

00:24:15.420 --> 00:24:23.550
And on to design tips from Tom,
who will give you some tips

00:24:23.550 --> 00:24:23.550
on creating these things.

00:24:34.100 --> 00:24:38.260
Now remember these are movies,
these are animations.

00:24:38.260 --> 00:24:41.650
And so essentially all we're doing
is putting these animations into

00:24:41.760 --> 00:24:44.500
a folder with this font script
that Dave was talking about,

00:24:44.590 --> 00:24:47.930
and then encrypting them
into a single big data file.

00:24:47.940 --> 00:24:51.930
Now it also has a proxy file,
as Dave was referring to.

00:24:52.010 --> 00:24:55.940
This is what you use to compose on
the screen and when you're ready to

00:24:55.940 --> 00:24:57.290
render you use this big data file.

00:24:57.470 --> 00:25:00.220
But the point being,
because you've got a lot of characters

00:25:00.220 --> 00:25:03.840
that you're creating movies for,
optimization is a key.

00:25:03.840 --> 00:25:05.600
That's something that you wanna focus on.

00:25:05.640 --> 00:25:10.930
So what are the number of characters
when you're planning is an issue for you.

00:25:11.380 --> 00:25:14.280
Apple ships 127 characters.

00:25:14.280 --> 00:25:17.220
We're striving to support English,
Spanish, German, and French.

00:25:17.250 --> 00:25:24.330
So we contain all the special characters
for accents and umlauts and so on.

00:25:26.160 --> 00:25:28.340
Maximum point size.

00:25:28.340 --> 00:25:31.840
You're starting with an animation,
so the very largest size you work

00:25:31.860 --> 00:25:34.700
with is to be scaled down from there.

00:25:34.720 --> 00:25:36.340
Obviously you don't want
to scale above that,

00:25:36.340 --> 00:25:40.980
so that will affect your final file
size and the size of the animation.

00:25:40.980 --> 00:25:43.900
We recommend somewhere
between 200 and 500 points,

00:25:43.900 --> 00:25:46.510
depending on what you're shooting for,
for file size.

00:25:47.570 --> 00:25:50.510
The number of frames that
you use and the frame rate.

00:25:50.510 --> 00:25:53.290
Now this depends on the style
and what you're working on.

00:25:53.490 --> 00:25:56.670
Typically for broadcast you'll
want to work in 30 frames a second,

00:25:56.720 --> 00:25:57.880
but that's not always the case.

00:25:57.880 --> 00:26:04.530
If it's something like the cool font
that you saw up there with the wiggle,

00:26:04.750 --> 00:26:07.060
you can get away with 10, 12,
15 frames a second.

00:26:07.220 --> 00:26:10.210
Again, this will lower the file size.

00:26:11.120 --> 00:26:14.700
And as far as the number of frames,
that's the kind of thing that you

00:26:14.710 --> 00:26:16.800
want to optimize as much as possible.

00:26:16.830 --> 00:26:22.000
I don't recommend going beyond 90 frames
for your maximum animation length.

00:26:23.610 --> 00:26:28.390
Okay, so for when you start,
this is essentially a matter of

00:26:28.390 --> 00:26:30.870
starting out with what project
size you're going to work in,

00:26:30.880 --> 00:26:32.250
what resolution you're going to work in.

00:26:32.260 --> 00:26:34.110
Let's say it's 900 by 900.

00:26:34.120 --> 00:26:38.330
You need to keep that same
resolution for every single glyph.

00:26:38.420 --> 00:26:42.280
It's important to start with that lower
left point that Dave was referring

00:26:42.290 --> 00:26:45.730
to and register all the characters
to that lower left point so that you

00:26:45.750 --> 00:26:49.460
have a common baseline and a common
kerning point for every character.

00:26:50.330 --> 00:26:52.280
Now, you can override those
in the glyph command,

00:26:52.280 --> 00:26:56.210
but it's much easier if you
register them to begin with.

00:26:56.260 --> 00:26:59.810
So you take a big character like
a W and make sure that it fits

00:26:59.810 --> 00:27:02.840
your project size and establish
your lower left point from there.

00:27:02.840 --> 00:27:06.360
Characters with lower
extenders like a lowercase g,

00:27:06.360 --> 00:27:09.590
you would start with a,
you make sure that that lower left

00:27:09.590 --> 00:27:11.860
accommodates that extender point.

00:27:17.030 --> 00:27:19.480
Looping, does your animation loop?

00:27:19.590 --> 00:27:21.060
Character should loop.

00:27:21.080 --> 00:27:22.930
We handle looping in two ways.

00:27:22.950 --> 00:27:27.100
We do something really interesting
called segment looping.

00:27:27.230 --> 00:27:31.960
Here's an animation where
this is called a TV font.

00:27:32.000 --> 00:27:35.540
And these characters,
they have three segments to them.

00:27:35.630 --> 00:27:39.510
First they come up,
then they sit there and have an animated

00:27:39.530 --> 00:27:42.340
staticky screen for a period of time,
and then they go down.

00:27:42.470 --> 00:27:45.540
So there are three
segments to this animation.

00:27:45.540 --> 00:27:47.930
When you build this,
you can define in the font script

00:27:48.280 --> 00:27:50.870
where your segment loop is,
where the center portion is,

00:27:50.880 --> 00:27:53.760
so that when the user uses this
and he wants this TV set to stay

00:27:53.760 --> 00:27:57.240
up for an extended period of
time and he sets the loop value,

00:27:57.410 --> 00:27:59.850
then it will only loop that
center segment portion.

00:27:59.960 --> 00:28:03.080
So it's a really intelligent way to loop.

00:28:03.090 --> 00:28:05.720
And then there's also just a full loop.

00:28:05.720 --> 00:28:09.540
Here's an example of that where the
beginning frame matches the ending frame.

00:28:09.540 --> 00:28:11.270
Simple loop.

00:28:15.190 --> 00:28:19.800
And of course, it's important to discover
who your target audience is.

00:28:19.930 --> 00:28:22.340
Broadcast video is the way
it's packaged right now,

00:28:22.340 --> 00:28:24.280
but it's also great
for multimedia and web.

00:28:24.280 --> 00:28:26.850
I think people are finally discovering,
or just now discovering,

00:28:26.850 --> 00:28:29.700
since it's a new application,
that this works in Keynote.

00:28:29.790 --> 00:28:34.740
And Keynote might mean lower resolution,
depending on where you're going with it.

00:28:34.790 --> 00:28:38.470
Broadcast is typically 30 frames
a second and high resolution.

00:28:38.560 --> 00:28:42.260
You can also go to web, and of course,
web, you want to keep it down to 10, 12,

00:28:42.320 --> 00:28:43.540
15 frames a second.

00:28:43.540 --> 00:28:46.340
And also print is a possibility.

00:28:46.370 --> 00:28:50.640
I've made live fonts
before that are 500 point,

00:28:50.640 --> 00:28:53.740
very high res,
single frame that amount to 4 megs

00:28:53.740 --> 00:28:57.590
when I'm done for the entire font,
which is pretty cool.

00:28:58.690 --> 00:29:01.230
And then of course the
style of the font you use.

00:29:01.350 --> 00:29:05.630
LiveFonts are a new animal,
and it's important to recognize

00:29:05.730 --> 00:29:07.040
how they should be used.

00:29:07.100 --> 00:29:10.360
I don't want to see pages and
pages of LiveFonts being used.

00:29:10.360 --> 00:29:12.850
I want to see them used as
a metaphor for a statement,

00:29:12.850 --> 00:29:15.600
or at least that's the way
I think they should be used.

00:29:15.720 --> 00:29:19.470
They can be combined with system
fonts and then just use them

00:29:19.470 --> 00:29:23.740
sparingly in order to make that push,
that point for the audience.

00:29:23.980 --> 00:29:28.290
And here's just some examples of
the metaphors that I have in mind.

00:29:30.930 --> 00:29:34.640
So with that, I think that concludes what
we're able to talk about today

00:29:34.760 --> 00:29:36.560
in this short period of time.

00:29:36.590 --> 00:29:39.920
And I hope you get out
there and make LiveFonts.

00:29:39.970 --> 00:29:41.800
Thanks for being here.

00:29:49.680 --> 00:29:51.040
Xander, Xander?

00:29:51.430 --> 00:29:52.480
Hi, I'm Xander Sorin.

00:29:52.540 --> 00:29:55.840
I am the product manager for Soundtrack,
and we're going to get up here and

00:29:55.840 --> 00:29:57.680
make a little bit of noise for you.

00:29:57.890 --> 00:30:02.990
So Soundtrack is part of Final Cut Pro 4,
and it allows you to create

00:30:03.020 --> 00:30:04.840
original royalty-free music.

00:30:04.880 --> 00:30:06.750
And it does this in a really cool way,
because it lets you use

00:30:07.070 --> 00:30:09.080
pre-recorded musical performances.

00:30:09.130 --> 00:30:12.080
And what that means is that you don't
necessarily have to be a musician.

00:30:12.150 --> 00:30:14.330
This is great for video editors,
because they can take

00:30:14.330 --> 00:30:17.440
somebody else's performances,
and they can combine them together.

00:30:17.480 --> 00:30:20.260
The thing about other people's
performances is that they

00:30:20.260 --> 00:30:22.640
weren't necessarily recorded
to sound good together.

00:30:22.640 --> 00:30:26.740
Like, one could have been a drum beat
recorded in LA at a slower tempo.

00:30:27.030 --> 00:30:29.530
Another thing could have been
a piano recorded in New York.

00:30:29.640 --> 00:30:33.830
So what Soundtrack does is, in real time,
it will match them together.

00:30:33.990 --> 00:30:35.660
So all of a sudden,
you don't need to know about

00:30:35.700 --> 00:30:36.960
all these technical things.

00:30:37.010 --> 00:30:38.860
You get to just go and say, you know,
I want some drums here.

00:30:38.860 --> 00:30:40.530
I want a saxophone.

00:30:40.540 --> 00:30:43.740
So again, it's all done in real time,
and it supports a variety of

00:30:43.740 --> 00:30:47.190
really popular file formats,
including AIF and WAV.

00:30:47.500 --> 00:30:49.670
Which are uncompressed and
don't have any metadata.

00:30:49.790 --> 00:30:53.220
So there's no way for it to really
know what the tempo or the key is.

00:30:53.430 --> 00:30:57.420
So Soundtrack is actually able to
infer what the tempo is of these loops,

00:30:57.450 --> 00:31:01.360
and is able to guess really most
of the time really accurately,

00:31:01.380 --> 00:31:03.590
and combine tempos of AIF and WAV.

00:31:03.880 --> 00:31:06.720
Now,
there is also a file format called ACID.

00:31:06.770 --> 00:31:09.780
Now, the ACID file format also gives you
a couple pieces of metadata that

00:31:09.780 --> 00:31:11.300
makes it easier to match loops.

00:31:11.370 --> 00:31:14.290
And that is the key as well as the tempo.

00:31:14.520 --> 00:31:16.410
So Soundtrack recognizes ACID files.

00:31:16.440 --> 00:31:17.260
And there are lots of
different ways to do that.

00:31:17.260 --> 00:31:17.260
So Soundtrack recognizes ACID files,
and there are lots of

00:31:17.260 --> 00:31:17.260
different ways to do that.

00:31:17.260 --> 00:31:17.270
So Soundtrack recognizes ACID files,
and there are lots of

00:31:17.270 --> 00:31:17.390
different ways to do that.

00:31:17.400 --> 00:31:20.430
libraries of hundreds of asset
files available on the market.

00:31:20.540 --> 00:31:23.690
For example, for $60,
you can basically buy Mick Fleetwood

00:31:24.000 --> 00:31:26.470
and have Mick Fleetwood playing
royalty-free on your session,

00:31:26.520 --> 00:31:27.900
which is really, really cool.

00:31:28.030 --> 00:31:30.650
But what we're here to talk to
you about today is a brand new

00:31:30.650 --> 00:31:32.720
file format called Apple Loops.

00:31:32.960 --> 00:31:36.410
And I'll tell you a little bit about what
they are and how you can create them.

00:31:36.420 --> 00:31:39.580
And those are, we think,
a great market for creating

00:31:39.580 --> 00:31:41.270
Apple Loops for Soundtrack.

00:31:41.520 --> 00:31:45.740
So Apple Loops are based on AIF and
it adds some metadata to it.

00:31:45.770 --> 00:31:48.140
So this is used not only
for matching the loops,

00:31:48.180 --> 00:31:49.710
but also for searching them.

00:31:49.810 --> 00:31:52.320
Because one of the really cool things
that Soundtrack lets you do is it

00:31:52.320 --> 00:31:54.340
lets you find files really quickly.

00:31:54.590 --> 00:31:56.090
And that becomes important.

00:31:56.360 --> 00:31:59.660
Soundtrack has about 4,000
loops that ships with it.

00:31:59.680 --> 00:32:03.560
And it's very easy to add additional
loops with third-party libraries.

00:32:03.610 --> 00:32:06.750
So it'll be quite common for
people to have 40,000 loops.

00:32:06.830 --> 00:32:10.070
To be able to find them is really,
really important.

00:32:10.260 --> 00:32:13.320
So the chunks that are
included in an AIF to make an

00:32:13.370 --> 00:32:18.160
Apple Loop are author and copyright
information to assign ownership,

00:32:18.270 --> 00:32:21.080
the beats,
which is used to infer what the tempo is,

00:32:21.080 --> 00:32:22.130
as well as the time signature.

00:32:22.140 --> 00:32:24.390
Since Soundtrack supports
different time signatures,

00:32:24.450 --> 00:32:26.620
that's embedded within the file.

00:32:26.740 --> 00:32:29.380
The musical key,
as well as the scale type.

00:32:29.380 --> 00:32:31.810
If you look at other
file formats like Acid,

00:32:31.870 --> 00:32:34.830
it'll have the actual key,
but there's nothing that

00:32:34.830 --> 00:32:37.400
tells you whether that,
let's say, a piano part was in A minor,

00:32:37.400 --> 00:32:40.070
and then you have a guitar
solo that was in A minor.

00:32:40.130 --> 00:32:45.100
They both kind of match to that key,
but they don't sound good together,

00:32:45.100 --> 00:32:47.100
and a lot of non-musicians
don't know why that is.

00:32:47.100 --> 00:32:50.590
So we've taken it to the next step,
and we've added major and minor

00:32:50.590 --> 00:32:54.100
information so you can filter down
and things just sound better for you.

00:32:54.100 --> 00:32:56.170
A few other important
things that we've added,

00:32:56.170 --> 00:32:58.560
which really bring out the
power of the search engine,

00:32:58.560 --> 00:33:00.690
is genre, instrument,
and then a whole bunch of

00:33:00.690 --> 00:33:02.100
these mood descriptors.

00:33:02.100 --> 00:33:05.090
So you can, and we'll kind of go over the
different mood descriptors,

00:33:05.090 --> 00:33:08.640
but if you say that you want
an instrument to be defined

00:33:08.640 --> 00:33:11.010
as relaxed and acoustic,
and maybe it has some processing on it,

00:33:11.120 --> 00:33:15.100
we have a bunch of descriptors which
allow you to assign value to that.

00:33:15.100 --> 00:33:17.080
And finally, transient markers.

00:33:17.080 --> 00:33:20.030
What's happening in the application
is all your audio is being stretched.

00:33:20.120 --> 00:33:23.070
It's either being sped
up or it's slowed down,

00:33:23.230 --> 00:33:27.100
and that involves samples and bits being
taken out or added to the audio file.

00:33:27.100 --> 00:33:28.890
So you want to do that
to the right place.

00:33:29.210 --> 00:33:32.890
You want to make sure that you are taking
samples out from a place that doesn't

00:33:32.890 --> 00:33:38.100
have a lot of active musical information,
and transient markers allow you to

00:33:38.100 --> 00:33:41.350
protect the areas and you'll be able
to see really clearly in your waveform

00:33:41.660 --> 00:33:44.100
which areas you want to avoid for that.

00:33:44.100 --> 00:33:45.950
So with that,
why don't I give you a little

00:33:46.010 --> 00:33:48.070
demo of the soundtrack so you can
see kind of the loops in action,

00:33:48.100 --> 00:33:52.100
and then we'll actually go ahead and
show you how you create the loops.

00:33:59.880 --> 00:34:02.300
Okay, so we're in Soundtrack here,
and you can see in this area

00:34:02.300 --> 00:34:04.300
here we have the Media Manager.

00:34:04.300 --> 00:34:09.080
Can we switch to the other machine?

00:34:11.930 --> 00:34:14.160
There's the media manager
that I was talking about.

00:34:14.180 --> 00:34:16.500
Okay,
so the first thing we want to do is,

00:34:16.500 --> 00:34:18.520
this is part of the
Final Cut Pro package,

00:34:18.520 --> 00:34:21.840
so a lot of people are working
with video primarily to start out,

00:34:21.840 --> 00:34:23.330
and then you add music to your video.

00:34:23.570 --> 00:34:26.080
So what I do is I go into
this directory structure,

00:34:26.080 --> 00:34:29.160
and I have basically a
shortcut to my home directory,

00:34:29.180 --> 00:34:32.380
and here's a QuickTime file
that I drag in.

00:34:32.660 --> 00:34:36.430
And this is kind of the old way
of going and finding your file.

00:34:36.660 --> 00:34:38.430
Now,
that's fine with my video in this case.

00:34:38.520 --> 00:34:41.270
I'm actually going to create a little
cycle region here so I can get the

00:34:41.270 --> 00:34:42.900
video playing in the background.

00:34:43.090 --> 00:34:46.220
But if I've got 40,000 loops,
and I want to go and find a

00:34:46.240 --> 00:34:49.750
specific drum that I'm looking for,
this is not the way you want to do it.

00:34:49.870 --> 00:34:52.540
So we built a search engine,
which makes it really, really easy,

00:34:52.550 --> 00:34:55.800
and it leverages all these tags
that are in the acid loops.

00:34:55.830 --> 00:34:58.800
So you can see we have a
bunch of keyword buttons here,

00:34:58.810 --> 00:35:02.480
and this one's kind of a grab bag of
a bunch of different instruments here.

00:35:02.480 --> 00:35:04.400
You can see like
cinematic rock and blues,

00:35:04.800 --> 00:35:08.380
urban, some different genres,
and then a few different descriptors.

00:35:08.410 --> 00:35:10.600
And again,
that's just one page of many different,

00:35:10.600 --> 00:35:13.810
ways that you can access keywords,
including a custom page so

00:35:13.810 --> 00:35:15.100
you can define your own.

00:35:15.140 --> 00:35:16.980
But we'll stick with
this kind of assortment.

00:35:17.020 --> 00:35:19.090
And in this case, I want to find a drum.

00:35:19.180 --> 00:35:23.110
So I click on drum,
and you'll notice I get about 950 drums.

00:35:23.140 --> 00:35:26.970
We have over almost 1,000 drums
that just ship with the application.

00:35:27.000 --> 00:35:28.440
That's still a lot to go through.

00:35:28.570 --> 00:35:31.300
So fortunately,
I can use these keywords and combinations

00:35:31.380 --> 00:35:33.420
to find exactly what I'm looking for.

00:35:33.440 --> 00:35:36.460
In this case, I will say that I want
something that's fairly relaxed.

00:35:36.600 --> 00:35:39.280
So I'll combine that,
and now I've got drums and relaxed,

00:35:39.320 --> 00:35:40.570
and a much more manageable list.

00:35:40.600 --> 00:35:43.460
But I want something that has a
little bit more of a modern feel.

00:35:43.510 --> 00:35:47.150
So I know if I type the word dance,
now I have this refined search field.

00:35:47.180 --> 00:35:51.940
What refined search lets you do is
type in a word that will actually

00:35:52.030 --> 00:35:54.980
be found either in the file name
or the entire directory path.

00:35:55.020 --> 00:35:57.930
So it's another really powerful
way of zoning in to find the

00:35:57.930 --> 00:35:59.480
exact content that you want.

00:35:59.480 --> 00:36:02.420
In this case, I'll type the word dance,
and I get a whole bunch of

00:36:02.420 --> 00:36:03.920
electronic club dance beats.

00:36:03.930 --> 00:36:07.380
Now, the cool thing is I can
just click on one of these,

00:36:08.510 --> 00:36:10.900
Some audio coming in there.

00:36:10.970 --> 00:36:13.300
And I'm kind of previewing
them against my composition.

00:36:13.390 --> 00:36:15.330
If you just wanted to kind
of make a mental note here,

00:36:15.330 --> 00:36:17.840
you can see the tempo and all
these tags are identified.

00:36:18.010 --> 00:36:20.440
It's a drum,
so it doesn't have any key information.

00:36:20.640 --> 00:36:24.000
So we have a 130 BPM drum
groove going here,

00:36:24.000 --> 00:36:26.100
and I'll just drag that
into the composition.

00:36:26.250 --> 00:36:29.220
Now, because this is a loop,
I can just drag out kind of as

00:36:29.380 --> 00:36:31.890
much or as little as I want,
and you can see the length of

00:36:31.900 --> 00:36:34.800
the loop is pretty easily defined
by this little indentation.

00:36:34.890 --> 00:36:37.830
And I've just filled that to my video,
and now I have drums going

00:36:37.830 --> 00:36:39.880
through the entire composition.

00:36:39.970 --> 00:36:42.800
But it's also very easy to
add additional instruments,

00:36:42.840 --> 00:36:45.900
even, again, ones that weren't designed
to sound good together.

00:36:45.900 --> 00:36:48.780
So I'll actually click off of
"Relaxed," and in this case,

00:36:48.780 --> 00:36:51.100
I want something that is acoustic.

00:36:51.180 --> 00:36:53.190
So I'll make it acoustic,
and in this case,

00:36:53.200 --> 00:36:56.000
I'll type the word "funk"
in my refined search field,

00:36:56.090 --> 00:36:59.180
and I have a bunch of
these Funkmaster kits.

00:37:00.750 --> 00:37:04.320
Now you notice that these tempos are 110,
which is completely different

00:37:04.320 --> 00:37:06.260
than the 130 that we first heard.

00:37:06.360 --> 00:37:10.000
So I'll drag that in,
and you'll hear that they...

00:37:10.620 --> 00:37:11.980
They're played in sync.

00:37:11.980 --> 00:37:14.020
The other thing you notice is
that the icons are different.

00:37:14.170 --> 00:37:17.250
Because the musical
instrument is one of the tags,

00:37:17.400 --> 00:37:19.640
Soundtrack knows to assign
the appropriate icon,

00:37:19.640 --> 00:37:22.960
in this case an electronic drum kit,
in this case something that

00:37:23.280 --> 00:37:24.710
was more of an electronic beat.

00:37:24.970 --> 00:37:28.270
There are a lot of different instruments,
and these are all brought up by the tag.

00:37:28.360 --> 00:37:30.780
So let me quickly get a couple more
instruments in here so we can see

00:37:30.780 --> 00:37:32.380
some of the other power of the app.

00:37:32.480 --> 00:37:35.660
We'll go into synthesizers,
and I want to just work

00:37:35.730 --> 00:37:37.440
in the key of minor,
so I want to make sure everything

00:37:37.440 --> 00:37:40.180
fits together in the minor loops.

00:37:40.210 --> 00:37:42.240
I'll go ahead and play this composition.

00:37:42.300 --> 00:37:44.670
Let's try a couple different sounds.

00:37:48.970 --> 00:37:52.320
Okay, so here's a little synthesizer
that's in the key of C,

00:37:52.320 --> 00:37:53.040
and I'll drop that in.

00:37:53.040 --> 00:37:55.020
I'll just get one more
instrument going here.

00:37:55.110 --> 00:37:58.240
I will click on Cinematic,
in addition to the synths,

00:37:58.240 --> 00:38:00.030
and now here's one in G.

00:38:00.150 --> 00:38:02.110
So I'll bring that in.

00:38:02.730 --> 00:38:03.900
"And it still fits.

00:38:03.970 --> 00:38:07.590
So again, you don't have to know anything
about music or what keys

00:38:07.650 --> 00:38:08.700
work or what tempos work.

00:38:08.760 --> 00:38:11.940
Soundtrack kind of does that for you,
and it does it all in real time.

00:38:12.100 --> 00:38:14.970
The other really amazing thing is
because that's all in real time,

00:38:15.120 --> 00:38:17.740
you have this unprecedented
flexibility to be able to say,

00:38:17.740 --> 00:38:19.920
'Well,
I want to hear all this stuff faster.'

00:38:19.920 --> 00:38:21.770
So you just take the tempo slider."

00:38:22.430 --> 00:38:23.400
And now it's all faster.

00:38:23.400 --> 00:38:26.480
I can take it all and
just make it slower.

00:38:26.480 --> 00:38:28.080
You can hear,
even though it's substantially slower,

00:38:28.080 --> 00:38:31.860
now I'm down to like 90 beats per minute
when some of the loops were at 130,

00:38:31.860 --> 00:38:34.900
it's preserving the audio quality,
and it's doing that because of the

00:38:34.900 --> 00:38:38.000
transient marker assignments that
I'll be showing you in a little bit.

00:38:38.000 --> 00:38:41.140
And the final thing I'll show you
here is that all the keys are being

00:38:41.140 --> 00:38:44.020
matched to a project key of A,
and I can very easily

00:38:44.060 --> 00:38:46.710
just change it all until,
say, the key of

00:38:49.600 --> 00:38:52.700
"We'll change it again and back up
into... and it does that all in real

00:38:52.700 --> 00:38:54.240
time instantly to all the loops.

00:38:54.370 --> 00:38:57.670
So that's just a little bit of
an overview of how Soundtrack

00:38:57.810 --> 00:39:00.250
handles all these Apple loops,
and now I'll show you how to

00:39:00.300 --> 00:39:01.720
go ahead and create your own."

00:39:06.390 --> 00:39:08.300
Okay, so creating Apple loops.

00:39:08.330 --> 00:39:11.470
A few things we're going to cover is the
actual recording and editing of them,

00:39:11.710 --> 00:39:14.530
the tagging and adding
transient markers to the loops,

00:39:14.660 --> 00:39:17.820
and then some things you can do in
the naming and directory structure.

00:39:17.870 --> 00:39:20.390
And then finally,
just some quick things you can

00:39:20.390 --> 00:39:23.700
do to test your loops and make
sure that you did the right job.

00:39:24.000 --> 00:39:26.710
So when it comes to recording,
Soundtrack supports really,

00:39:26.710 --> 00:39:31.780
really high resolution audio,
up to 24-bit, 96 kilohertz resolution.

00:39:31.850 --> 00:39:33.820
Most of the content out
there is at CD quality,

00:39:33.820 --> 00:39:36.240
which is at 16-bit, 44.1.

00:39:36.240 --> 00:39:38.470
So there's an opportunity
to deliver really,

00:39:38.470 --> 00:39:42.840
really high quality audio to people that
are looking for high quality audio loops.

00:39:43.100 --> 00:39:47.060
Like most other production environments,
audio follows the garbage in,

00:39:47.060 --> 00:39:48.220
garbage out model.

00:39:48.400 --> 00:39:51.190
The audio you're going to get at the
end is only as good as what you put in.

00:39:51.300 --> 00:39:54.380
So the quality of the connectors
becomes really important.

00:39:54.380 --> 00:39:57.070
The input chain,
if you've got a fan blowing in the room,

00:39:57.180 --> 00:39:59.380
those are all going to make
it into your final mix.

00:39:59.380 --> 00:40:02.410
So make sure that you have as
good of an input chain as you

00:40:02.410 --> 00:40:03.730
can have from the beginning.

00:40:03.760 --> 00:40:06.250
And that carries into whether your
instruments are in tune or not.

00:40:06.380 --> 00:40:10.600
So most of the content out
there is tuned to an A440.

00:40:10.970 --> 00:40:13.080
So you want to make sure that you're
in tune with the rest of the world.

00:40:13.130 --> 00:40:16.420
And even over a session,
guitars fall out of tune really quickly.

00:40:16.420 --> 00:40:17.940
So it's good to keep up on that.

00:40:17.940 --> 00:40:20.720
The other thing is,
when you develop your content,

00:40:20.720 --> 00:40:24.000
it's important to play to a really,
really steady click or a steady

00:40:24.000 --> 00:40:27.740
drum beat that doesn't have a lot
of sway and a lot of excessive feel.

00:40:28.060 --> 00:40:30.180
Because you want to keep
things fairly on the beat,

00:40:30.210 --> 00:40:33.350
because you're not necessarily
trying to match the feel to the

00:40:33.420 --> 00:40:34.760
things that you're working on.

00:40:34.770 --> 00:40:37.860
You're trying to match the feel of
your content to the rest of the world.

00:40:37.890 --> 00:40:40.580
And in loop-based music,
most of it is fairly straight.

00:40:40.590 --> 00:40:42.550
Now you can add feel later,
and there are things you

00:40:42.560 --> 00:40:43.440
can do in your project.

00:40:43.460 --> 00:40:45.780
But for the most part,
you want to make sure things are really,

00:40:45.780 --> 00:40:46.840
really steady.

00:40:46.850 --> 00:40:48.770
And finally,
it really pays to be organized

00:40:48.880 --> 00:40:51.860
and to keep a recording log
of all your performances.

00:40:51.860 --> 00:40:54.260
If you're sitting there
and playing a guitar,

00:40:54.270 --> 00:40:56.780
and you have 30 different takes,
and they're in a variety of keys,

00:40:56.780 --> 00:40:59.100
it's so helpful to know that when
you actually have to go and tag

00:40:59.100 --> 00:41:00.970
them and define what those keys are.

00:41:02.680 --> 00:41:05.330
So in terms of editing,
what you want to do is you're

00:41:05.340 --> 00:41:08.550
going to have a long track,
probably 30 different guitar takes,

00:41:08.550 --> 00:41:12.090
and you want to start cropping and
trimming it down into the final loops.

00:41:12.200 --> 00:41:14.400
A lot of great waveform
editors out there.

00:41:14.480 --> 00:41:18.170
There's one in Logic, Spark,
and Final Cut Pro 4 includes

00:41:18.180 --> 00:41:20.630
an application called
Peak Express from BIAS,

00:41:20.630 --> 00:41:23.880
which is also a fantastic
way of trimming down loops.

00:41:23.950 --> 00:41:27.170
So what you want to do is find
that perfect looping region,

00:41:27.170 --> 00:41:27.970
and you establish that.

00:41:27.980 --> 00:41:32.160
And the best kind of test is to close
your eyes and try some different tweaks

00:41:32.160 --> 00:41:33.980
and get that start and end point.

00:41:34.000 --> 00:41:35.710
And you really want to make it
so when you close your eyes and

00:41:35.710 --> 00:41:39.000
you kind of tap out at tempo,
you just don't hear where the break is.

00:41:39.030 --> 00:41:41.660
You kind of forget where
the beginning and end was.

00:41:41.660 --> 00:41:43.920
And that's kind of -- you'll
know at that point you're fairly

00:41:43.920 --> 00:41:46.210
successful in creating a good loop.

00:41:46.220 --> 00:41:49.120
But the second part of that is you want
to make sure that the beginning and

00:41:49.120 --> 00:41:51.230
end are happening at a zero crossing.

00:41:51.460 --> 00:41:55.090
So you want to make sure that
the waveform is actually crossing

00:41:55.100 --> 00:41:56.880
the zero line of the X axis.

00:41:57.110 --> 00:41:59.490
And if you have one that's kind
of at the top of the waveform

00:41:59.500 --> 00:42:03.100
and then one that's at the zero,
you're going to have pops and clicks.

00:42:03.240 --> 00:42:05.920
The reality is that sometimes you
get that perfect timing and the zero

00:42:06.020 --> 00:42:07.570
crossings aren't where you want them.

00:42:07.860 --> 00:42:10.300
And that's where you'd want to
use actually a manual destructive.

00:42:10.300 --> 00:42:13.200
You can do a fade in at the
beginning and a fade out at the end,

00:42:13.350 --> 00:42:16.460
and that'll force it to kind of
begin and end at a zero crossing.

00:42:16.530 --> 00:42:18.450
And the last thing is,
since you're probably recording

00:42:18.460 --> 00:42:21.220
a lot of different instruments,
maybe at different volume levels,

00:42:21.330 --> 00:42:23.900
it's a safe last step to just
do a normalization so that

00:42:23.900 --> 00:42:26.140
everything that you have is kind
of at a consistent volume level.

00:42:26.140 --> 00:42:27.100
Okay.

00:42:28.270 --> 00:42:29.160
So tagging.

00:42:29.160 --> 00:42:31.620
To assign the metadata to the AF file,
look at all these things

00:42:31.620 --> 00:42:32.490
that we have to do.

00:42:32.620 --> 00:42:35.630
You've got Author Copyright,
Beats and Time Signature, Musical Key,

00:42:35.670 --> 00:42:39.830
Scale Type, Genre, Instrument,
Mood Descriptors, the Transient Markers,

00:42:39.830 --> 00:42:41.320
and ultimately the File Name.

00:42:41.360 --> 00:42:42.320
That's a lot of work.

00:42:42.470 --> 00:42:44.380
So how are we going to do this?

00:42:44.380 --> 00:42:47.960
Well, we created an application
for you to make this really,

00:42:47.960 --> 00:42:50.680
really easy called the
Soundtrack Loop Utility.

00:42:50.700 --> 00:42:53.490
And we built this in conjunction
with a lot of people that

00:42:53.490 --> 00:42:56.340
were doing this for years,
that were professionally

00:42:56.590 --> 00:42:58.140
doing content production.

00:42:58.140 --> 00:43:01.540
So we learned a lot of things
about what people are looking for

00:43:01.540 --> 00:43:03.720
when they're tagging their loops.

00:43:03.720 --> 00:43:07.870
They need to be able to batch
convert a lot of files at a time,

00:43:07.870 --> 00:43:11.570
or possibly even run the entire thing
off of a keyboard instead of a mouse.

00:43:11.790 --> 00:43:14.520
There's a lot of content developers
that are getting carpal tunnel.

00:43:14.540 --> 00:43:16.510
So we built an application
that makes it really,

00:43:16.520 --> 00:43:21.080
really easy to work with that kind of
a stressful production environment.

00:43:21.120 --> 00:43:23.530
So I will actually jump in
and give you a quick demo of

00:43:23.530 --> 00:43:25.320
the Soundtrack Loop Utility.

00:43:25.320 --> 00:43:26.760
And so you can see this in action.

00:43:26.760 --> 00:43:26.870
Thank you.

00:43:35.270 --> 00:43:38.100
Okay, so the first thing the Soundtrack
Loop utility asks me for is what

00:43:38.220 --> 00:43:39.510
files do I want to work with?

00:43:39.680 --> 00:43:41.600
And as I mentioned before,
you can work with single

00:43:41.600 --> 00:43:42.490
or multiple files.

00:43:42.680 --> 00:43:44.310
In this case, to start out,
I'm just going to go ahead and

00:43:44.390 --> 00:43:47.240
select this whole list of files.

00:43:47.280 --> 00:43:50.020
And I've got these different organs,
and I can go ahead and

00:43:50.040 --> 00:43:51.900
I can preview them.

00:43:57.900 --> 00:44:03.900
So in this case I want to work
on this one jazz guitar riff.

00:44:03.990 --> 00:44:06.640
So I've selected that and now
I have the ability to assign all

00:44:06.640 --> 00:44:07.920
the different parameters to it.

00:44:07.980 --> 00:44:10.600
Well I know it's not, it's a loop,
so I'm checking on loop.

00:44:10.850 --> 00:44:15.410
A one-shot is, would be an Apple Loop,
Apple Loops file that

00:44:15.460 --> 00:44:16.480
doesn't get stretched.

00:44:16.610 --> 00:44:18.960
So if you have a symbol
hit or a spoken word,

00:44:19.020 --> 00:44:21.360
there are times when you don't want
it to actually stretch like a loop,

00:44:21.360 --> 00:44:22.730
so you enable that as a one-shot.

00:44:22.960 --> 00:44:26.840
In this case it's a loop,
it is eight beats right now.

00:44:27.020 --> 00:44:29.210
The key I happen to
know is in the key of D,

00:44:29.310 --> 00:44:32.380
so you assign that there
and it's also major.

00:44:32.440 --> 00:44:35.440
Then you can assign the time signatures,
you can see there's some author and

00:44:35.440 --> 00:44:38.580
copyright information and even some,
there's a comment field,

00:44:38.620 --> 00:44:41.240
so you can either make some internal
notes or if you just want to say for

00:44:41.480 --> 00:44:44.690
more information go to my website,
you know, that kind of thing.

00:44:44.860 --> 00:44:47.120
Then we have the ability to assign genre.

00:44:47.170 --> 00:44:50.080
We put some really,
really basic big buckets for genre.

00:44:50.380 --> 00:44:55.420
We could all argue about the 30
different sub-genres of electronic music.

00:44:55.460 --> 00:45:00.120
So we just basically kept it,
fairly vague as far as rock blues,

00:45:00.120 --> 00:45:02.240
electronic jazz,
just to kind of accommodate

00:45:02.690 --> 00:45:03.510
the largest genre.

00:45:03.640 --> 00:45:06.890
So in this case that was a jazz
loop and it was an electric guitar,

00:45:06.920 --> 00:45:10.330
so I click on guitar and I have a
whole bunch of different choices here.

00:45:10.350 --> 00:45:12.070
And then you can see here
we have all these different

00:45:12.070 --> 00:45:13.420
descriptors that we can assign.

00:45:13.440 --> 00:45:15.630
And I'm actually going to go
ahead and turn on keyboard tagging

00:45:15.680 --> 00:45:18.220
because again this whole application
can be driven by keyboards.

00:45:18.220 --> 00:45:20.610
And I can listen to the loop.

00:45:23.580 --> 00:45:25.470
So when I listen to that,
it's a single instrument,

00:45:25.510 --> 00:45:27.530
it's not an ensemble,
and I'm going ahead and

00:45:27.540 --> 00:45:29.200
I'm just typing keys.

00:45:29.200 --> 00:45:31.340
It's a part, not a fill.

00:45:31.350 --> 00:45:38.020
It's electric, it's dry, it's clean,
it's kind of cheerful, and it's relaxed,

00:45:38.120 --> 00:45:40.460
and it grooves, and it's melodic.

00:45:40.460 --> 00:45:42.620
So really, really easy to just go
ahead and assign those,

00:45:42.620 --> 00:45:44.960
and then I would just save out the file,
and then all that information

00:45:45.010 --> 00:45:46.930
would be embedded,
and we have an

00:45:46.930 --> 00:45:49.960
Apple Loop as a tagged AIF.

00:45:49.980 --> 00:45:52.710
Another thing that a lot of people,
a lot of content developers need

00:45:52.860 --> 00:45:54.860
to do is they need to work with
the content they already have,

00:45:54.880 --> 00:45:57.460
because they want to add all
this additional rich data,

00:45:57.480 --> 00:46:00.140
let's say, to their existing
AIF or their ACID files.

00:46:00.320 --> 00:46:03.230
So we allow you to select, let's say,
there's a whole bunch

00:46:03.230 --> 00:46:05.540
of ACIDized WAV files,
and I've just batch

00:46:05.540 --> 00:46:06.540
selected the whole thing.

00:46:06.660 --> 00:46:10.940
As you can see,
the key actually came in from the loops,

00:46:10.940 --> 00:46:13.200
as well as all the other
copyright information.

00:46:13.260 --> 00:46:15.420
So it's very easy to say, okay,
my scale type for this

00:46:15.450 --> 00:46:19.590
is these are minor loops,
and it's an organ in this case.

00:46:19.620 --> 00:46:22.540
So then I'd go ahead
and I'd save that out,

00:46:22.540 --> 00:46:25.770
and I'd create a whole
new set of the AIF files.

00:46:25.800 --> 00:46:28.950
One thing that I want to actually go
back to this guitar riff and show you

00:46:28.950 --> 00:46:31.040
how transient markers are assigned.

00:46:31.040 --> 00:46:34.460
So by clicking on the transient tab,
I'm going to intentionally go

00:46:34.460 --> 00:46:36.220
to kind of a wrong setting here.

00:46:36.220 --> 00:46:39.520
I'm going to switch to transient
markers happening at whole notes,

00:46:39.520 --> 00:46:41.830
and I'll play this loop through.

00:46:43.720 --> 00:46:46.430
You can kind of see there's
some weird delay happening,

00:46:46.430 --> 00:46:48.780
and the more I stretch this loop,

00:46:52.560 --> 00:46:53.820
So there's some weird
stuff happening in there,

00:46:53.820 --> 00:46:56.930
and that's because the transients
are not in the right place.

00:46:57.110 --> 00:47:00.300
So I want to make the transient
divisions go to quarter notes,

00:47:00.300 --> 00:47:01.660
because it seems like
there's more happening there,

00:47:01.660 --> 00:47:04.200
and it seems like it could even
maybe benefit from eighth notes.

00:47:04.200 --> 00:47:04.670
That's too many.

00:47:04.680 --> 00:47:06.120
Let's go with quarter notes.

00:47:06.140 --> 00:47:09.290
And then I have a sensitivity fader,
so it'll actually help line up.

00:47:09.380 --> 00:47:13.010
You can see the transients are now, like,
popping to the beginning of the

00:47:13.010 --> 00:47:16.430
major transient events where I don't
want the stretching to occur.

00:47:16.460 --> 00:47:20.280
So most of it is pretty automatic,
and you can kind of use sensitivity

00:47:20.380 --> 00:47:21.810
to zone into where you want to go.

00:47:21.990 --> 00:47:23.180
And I can see this
one's a little bit off,

00:47:23.240 --> 00:47:24.110
so I can move it.

00:47:24.370 --> 00:47:28.820
Maybe I want to add a point
right here and drop in a couple.

00:47:29.120 --> 00:47:32.840
It's always good when you have a
trail to add quarter notes in between.

00:47:32.890 --> 00:47:37.290
And we'll get one more in here
and hear what that sounds like.

00:47:41.330 --> 00:47:43.860
So basically it's playing it a lot
faster than its original tempo,

00:47:43.860 --> 00:47:44.790
which was this.

00:47:44.860 --> 00:47:49.400
But because the tempo,
these transient markers

00:47:49.400 --> 00:47:52.080
were properly defined,
I now have a good sounding

00:47:52.080 --> 00:47:54.220
loop that stretches well.

00:47:54.390 --> 00:47:57.760
So that's kind of the Soundtrack
Loop utility in a nutshell,

00:47:57.760 --> 00:48:01.590
and we'll go back and just wrap
up a couple more production tips.

00:48:03.180 --> 00:48:04.890
So when it comes to naming
and directory structure,

00:48:05.050 --> 00:48:07.440
the thing that we really encourage
is to - this is the opportunity

00:48:07.440 --> 00:48:10.200
to be more descriptive than
you would be inclined to be.

00:48:10.330 --> 00:48:15.180
If you have a whole bunch of guitars,
if you name them Guitar 01, Guitar 02,

00:48:15.260 --> 00:48:17.930
you're going to have the same
file names as thousands of

00:48:17.960 --> 00:48:19.200
other loops on the market.

00:48:19.350 --> 00:48:22.060
So Down Home Delta Blues Guitar would
be a much,

00:48:22.060 --> 00:48:23.310
much better name.

00:48:23.340 --> 00:48:27.140
The other thing is that refined search
field not only uses the file name,

00:48:27.140 --> 00:48:29.010
it uses the whole directory path.

00:48:29.170 --> 00:48:32.860
So if I actually had a
folder called Xander Sorin,

00:48:32.860 --> 00:48:35.950
and then inside of
that I had Delta Blues,

00:48:36.040 --> 00:48:39.220
or if I had strumming within that,
I could type any of those words within

00:48:39.250 --> 00:48:42.780
Soundtrack in the refined search field,
and those loops would come up.

00:48:42.780 --> 00:48:45.920
So that's, again,
an opportunity to provide the users with

00:48:45.950 --> 00:48:48.280
additional ways of finding your loops.

00:48:48.510 --> 00:48:50.840
So finally,
you've created these loops using

00:48:50.840 --> 00:48:52.750
the Soundtrack Loop utility.

00:48:52.930 --> 00:48:56.700
Best way of testing the loop to see if
it works is drop it back into Soundtrack.

00:48:56.780 --> 00:49:00.140
One of the first things you'll see right
away is if an instrument icon pops up,

00:49:00.180 --> 00:49:02.880
you know you're at least kind
of going in the right direction.

00:49:02.880 --> 00:49:05.920
So checking the icon is kind
of the first telltale thing.

00:49:06.240 --> 00:49:09.040
And then you probably want to make
sure that the rhythm works with your

00:49:09.040 --> 00:49:10.930
other content that's in the project.

00:49:11.070 --> 00:49:14.630
So we recommend having a really,
really straight and steady drumbeat,

00:49:14.670 --> 00:49:16.530
like an electronic drum.

00:49:16.810 --> 00:49:18.840
And if you're finding the loop
is either just not looping right

00:49:18.840 --> 00:49:22.640
or is drifting back and forth,
probably needs a little bit of attention.

00:49:22.640 --> 00:49:24.290
And then finally,
since you have the ability to

00:49:24.290 --> 00:49:28.860
assign key and then major and minor,
it's very helpful to have, let's say,

00:49:28.860 --> 00:49:33.070
a major and a minor organ or a pad
or some kind of a loop that you can

00:49:33.070 --> 00:49:37.450
drag in and then test your loops out
against and see if they sound good.

00:49:37.670 --> 00:49:40.610
And then the final thing that
would be good to test against is

00:49:40.620 --> 00:49:42.880
there's an additional info field.

00:49:42.880 --> 00:49:44.800
Like you saw that media
manager that we had.

00:49:44.850 --> 00:49:46.800
At the bottom,
there's a disclosure triangle that gives

00:49:46.800 --> 00:49:48.440
you even more information about the loop.

00:49:48.460 --> 00:49:51.630
And you'll see all the tag and the
copyright information within that.

00:49:51.840 --> 00:49:56.490
So then you'll know if the
file received it all correctly.

00:49:56.980 --> 00:49:58.990
So getting started,
you guys all look really anxious to

00:49:59.020 --> 00:50:01.470
get out there and start recording
and creating your own Apple Loops.

00:50:01.530 --> 00:50:03.730
So we've developed an SDK for you.

00:50:03.770 --> 00:50:08.540
It includes the soundtrack loop utility,
as well as documentation for that app,

00:50:08.540 --> 00:50:11.870
and a separate application which
talks much deeply to all the

00:50:11.870 --> 00:50:13.630
topics I was talking to today.

00:50:13.630 --> 00:50:16.120
Again,
working with content producers to talk

00:50:16.390 --> 00:50:19.580
about the things that were important
to them and the things that you can

00:50:19.580 --> 00:50:23.080
do to really optimize your loops,
as well as a few different sample loops.

00:50:23.200 --> 00:50:26.530
We have examples that you can go through,
and each different loop type has

00:50:26.530 --> 00:50:29.700
different ways or strategies of
assigning transient markers to make

00:50:29.720 --> 00:50:31.520
sure that they sound really good.

00:50:31.520 --> 00:50:34.520
And that is all I'm told going to
be available by the end of the week

00:50:34.680 --> 00:50:36.390
on the Developer Connection site.

00:50:36.470 --> 00:50:38.910
So we hope you guys all go
out there and start making

00:50:38.940 --> 00:50:40.110
some great Apple Loops for us.