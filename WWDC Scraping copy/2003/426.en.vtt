WEBVTT

00:00:23.300 --> 00:00:25.590
This is one of the technologies
that we've got at Apple that

00:00:25.590 --> 00:00:27.600
I think has tremendous potential.

00:00:27.600 --> 00:00:30.570
And there are a lot of developers
that are already taking advantage

00:00:30.580 --> 00:00:33.370
of Sherlock channels today,
particularly on intranets

00:00:33.450 --> 00:00:36.280
and within corporations,
to deliver internal web

00:00:36.350 --> 00:00:38.160
services to their customers.

00:00:38.280 --> 00:00:41.650
And there's some really cool
Sherlock channels that have

00:00:42.200 --> 00:00:43.800
appeared from third parties.

00:00:44.050 --> 00:00:45.220
that you've probably played with.

00:00:45.390 --> 00:00:49.280
And so this is a great, we think,
Sherlock channels,

00:00:49.280 --> 00:00:51.740
and people are finding that
Sherlock channels are a great way

00:00:51.740 --> 00:00:55.800
to actually get onto Mac OS X if
they don't know Cocoa or Carbon,

00:00:55.800 --> 00:00:56.400
in fact.

00:00:56.520 --> 00:01:01.380
If they can use their expertise
in JavaScript and XML,

00:01:01.380 --> 00:01:05.240
they can get onto the platform and
take advantage of some technology

00:01:05.310 --> 00:01:07.970
that's there to deliver some
services on Mac OS X without

00:01:07.970 --> 00:01:09.250
having to write a fully native app.

00:01:09.350 --> 00:01:11.000
That's certainly one
advantage people have seen.

00:01:11.000 --> 00:01:13.540
And there's lots of others that
we'll get into in this session.

00:01:13.900 --> 00:01:16.140
So I'd like to invite
Wayne Lufro on stage,

00:01:16.140 --> 00:01:18.870
and he's going to talk
you through the specifics.

00:01:18.990 --> 00:01:22.320
Wayne runs the engineering team that's
responsible for Sherlock channels.

00:01:28.530 --> 00:01:34.260
Thanks, and welcome to the last of the
Internet Technology Sessions:

00:01:34.430 --> 00:01:37.870
Delivering
Web Services Using Sherlock Channels.

00:01:40.020 --> 00:01:42.940
So in this session,
we're going to talk about how to deliver

00:01:42.940 --> 00:01:45.470
web services using Sherlock channels.

00:01:45.470 --> 00:01:48.680
And we'll talk about, well,
what are web services?

00:01:48.810 --> 00:01:52.910
When is using a channel to
implement web services a good idea?

00:01:53.000 --> 00:01:55.510
How to get started,
and some of the new things

00:01:55.690 --> 00:01:57.750
that we've provided in Panther.

00:01:58.650 --> 00:02:02.730
So what you'll learn is first what's
new in Sherlock the application,

00:02:02.730 --> 00:02:08.710
some of the developer opportunities,
the structure of a Sherlock channel,

00:02:08.860 --> 00:02:14.410
and then some of the details
about how to develop a channel,

00:02:14.410 --> 00:02:19.840
as well as some of the new features
for Sherlock channel developers.

00:02:19.840 --> 00:02:19.840
And then we'll get into
some advanced topics.

00:02:20.730 --> 00:02:24.000
So first,
what's new in Sherlock the application?

00:02:24.050 --> 00:02:31.160
Well, so when we thought about doing a
new version of Sherlock for Panther,

00:02:31.160 --> 00:02:33.760
we wanted to do three things.

00:02:33.760 --> 00:02:36.840
We wanted to enhance
the existing channels.

00:02:36.860 --> 00:02:39.100
We wanted to improve the performance.

00:02:39.200 --> 00:02:44.600
And we also wanted to provide a solution
for the channel management problem.

00:02:44.600 --> 00:02:48.910
So in particular, with channels,
one of the channels that we put a lot of

00:02:49.100 --> 00:02:51.590
effort into is the Yellow Pages channel.

00:02:51.660 --> 00:02:54.600
And we've had some requests
to add white pages,

00:02:54.600 --> 00:02:55.600
which we've done.

00:02:55.600 --> 00:02:58.590
And we've also added some additional
features to the Yellow Pages themselves,

00:02:58.590 --> 00:03:00.600
which we'll talk about in a bit.

00:03:00.600 --> 00:03:04.360
For performance,
we rewrote the XQuery engine from the

00:03:04.370 --> 00:03:09.090
ground up and made it two to three
times faster in the Panther release,

00:03:09.090 --> 00:03:13.600
as well as more conformant with
the emerging XQuery standard.

00:03:13.690 --> 00:03:18.460
We've also made substantial improvements
in launch time for the application,

00:03:18.460 --> 00:03:21.590
as well as channel
switching between channels.

00:03:22.000 --> 00:03:24.140
As far as channel
management is concerned,

00:03:24.240 --> 00:03:28.000
there's been, with all the third-party
channels that have come out,

00:03:28.000 --> 00:03:32.040
your toolbar gets pretty busy
and it's often hard to find the

00:03:32.040 --> 00:03:34.000
channel that you're looking for.

00:03:34.010 --> 00:03:38.970
So we've provided a solution to
organize your channels that's

00:03:38.980 --> 00:03:42.000
patterned after the Safari bookmarks.

00:03:42.000 --> 00:03:46.330
In addition, we found that folks were
really interested in using a

00:03:46.330 --> 00:03:49.000
bunch of third-party channels,
but they didn't know where to find them.

00:03:49.000 --> 00:03:51.530
And you had to kind of do a
Google search and rummage around

00:03:51.530 --> 00:03:52.900
to try to find where they are.

00:03:52.990 --> 00:03:57.260
So we decided to build the third-party
channels directly into the application.

00:03:59.160 --> 00:04:02.380
So first, the phone book.

00:04:02.380 --> 00:04:05.170
You'll notice that on the left side,
there is a little control to

00:04:05.230 --> 00:04:08.690
decide whether you're searching
white pages or yellow pages.

00:04:09.350 --> 00:04:11.690
But in addition,
we've had a lot of requests

00:04:11.690 --> 00:04:13.780
for category-based searching.

00:04:13.850 --> 00:04:16.080
If I want to search for
Japanese restaurants,

00:04:16.140 --> 00:04:20.360
I'm not really looking for a business
that has Japanese restaurant in its name.

00:04:20.430 --> 00:04:24.240
I would really like to be able
to find by category instead

00:04:24.240 --> 00:04:26.190
of just by business name.

00:04:26.290 --> 00:04:29.030
So we support both in Panther.

00:04:30.340 --> 00:04:33.730
The other request we got a lot
was being able to find near

00:04:33.730 --> 00:04:37.600
not just a zip code or a city,
but also near a very specific address.

00:04:37.620 --> 00:04:41.840
I'm going to this theater,
I want to find the nearby restaurants.

00:04:42.440 --> 00:04:45.030
And then we made printing
from your phone book easier as

00:04:45.030 --> 00:04:46.670
well with a one-button print.

00:04:49.760 --> 00:04:53.090
The channels view is the solution
to the channel management problem.

00:04:53.110 --> 00:04:55.900
Your toolbar just gets too crowded
putting everything in the toolbar.

00:04:55.900 --> 00:05:00.450
So we looked at the way Safari did
bookmarks and we patterned the

00:05:00.450 --> 00:05:04.800
Sherlock channel management view after
the way Safari bookmarks are done.

00:05:04.960 --> 00:05:07.600
And this allows you to control
both what's in your toolbar,

00:05:07.800 --> 00:05:12.660
what's in your channel menu,
as well as have direct access to all

00:05:12.660 --> 00:05:17.820
the channels that Apple provides,
even those that are for other countries.

00:05:18.320 --> 00:05:23.300
And we've added a view
for third-party channels.

00:05:23.300 --> 00:05:26.830
And this is where we showcase all of
your channels and make them easily

00:05:26.830 --> 00:05:31.620
available to users so they can find them,
drag the ones they like to the toolbar,

00:05:31.640 --> 00:05:34.130
or even create their own collections.

00:05:35.180 --> 00:05:37.570
It's also the place where the
channel development tools show up.

00:05:37.700 --> 00:05:42.900
So if you're a channel developer and you
enable the channel development tools,

00:05:43.090 --> 00:05:45.910
you'll see them show up
in the channels view.

00:05:46.980 --> 00:05:49.410
So to demonstrate this,
I'd like to invite Jessica Kahn,

00:05:49.410 --> 00:05:53.840
the Sherlock Channel Development Lead,
up.

00:05:54.080 --> 00:05:55.790
Welcome, Jess.

00:06:03.440 --> 00:06:05.960
First we're going to show the phone book.

00:06:05.960 --> 00:06:08.370
So as you'll note,
on the left side there's a control

00:06:08.380 --> 00:06:10.400
for white pages and yellow pages.

00:06:10.400 --> 00:06:12.600
Right now we're in yellow pages mode.

00:06:12.610 --> 00:06:16.580
The first field there is the
business name or category field.

00:06:16.710 --> 00:06:19.300
And if you notice,
as Jessica starts typing,

00:06:19.300 --> 00:06:21.560
it automatically auto-completes
to one of the categories.

00:06:21.640 --> 00:06:24.690
In this case, she typed "restaurants"
and it auto-completed after

00:06:24.690 --> 00:06:25.900
just a few characters.

00:06:25.900 --> 00:06:28.350
And you'll note that in the pop-up,
we show maybe some

00:06:28.350 --> 00:06:29.900
variations on restaurants.

00:06:29.900 --> 00:06:30.900
So you can choose a particular one.

00:06:30.900 --> 00:06:33.400
For example,
say I want to look for Indian food.

00:06:33.400 --> 00:06:34.900
I choose Indian.

00:06:34.900 --> 00:06:37.900
The next field over is
the Find Near field.

00:06:38.000 --> 00:06:40.880
And just like before,
you can type zip codes and city names.

00:06:40.950 --> 00:06:43.900
But the thing we've added is that
it auto-completes city names.

00:06:43.900 --> 00:06:45.890
So it has a database of cities.

00:06:46.030 --> 00:06:48.670
And as you start to type,
it auto-completes and you'll see

00:06:48.670 --> 00:06:50.880
San Francisco with just a few characters.

00:06:51.330 --> 00:06:55.470
The other thing it supports
is it directly supports your

00:06:55.510 --> 00:06:58.500
address book and auto-completion.

00:06:58.500 --> 00:07:01.440
So for example,
if you want to find restaurants

00:07:01.490 --> 00:07:04.440
near a friend of yours,
you could type the name of

00:07:04.460 --> 00:07:05.800
a friend of yours in there.

00:07:05.800 --> 00:07:08.060
Or in this case,
we've added Moscone Center to our

00:07:08.060 --> 00:07:10.740
address book because we've been
coming to Moscone Center a lot.

00:07:10.740 --> 00:07:13.040
So we'd like to see what
restaurants are near Moscone Center.

00:07:13.040 --> 00:07:15.880
And as you see, as Jessica types,
it auto-completes from the address book.

00:07:15.880 --> 00:07:18.550
And then when you do the search,
you'll find Indian restaurants

00:07:18.640 --> 00:07:20.630
near the Moscone Center.

00:07:28.300 --> 00:07:30.800
And driving directions to boot.

00:07:30.800 --> 00:07:37.720
Maybe walking directions.

00:07:37.920 --> 00:07:38.790
So, right.

00:07:38.790 --> 00:07:38.790
So the other thing we'd like to
show is the channel management view.

00:07:41.260 --> 00:07:48.280
Now, we're showing the, as noted,
there's a toolbar and a channels menu,

00:07:48.280 --> 00:07:50.200
which allows you to control
what's in the toolbar,

00:07:50.200 --> 00:07:51.300
what's in the channels menu.

00:07:51.390 --> 00:07:53.500
But we also provide access
to all the Apple channels,

00:07:53.500 --> 00:07:56.370
so if you decide you want
to use some or others,

00:07:56.370 --> 00:07:59.100
you can toss them from your toolbar
and then decide later to go back and

00:07:59.100 --> 00:08:00.760
put the ones you're interested in.

00:08:00.860 --> 00:08:04.750
Or if you'd like, you could...

00:08:05.670 --> 00:08:08.340
So let's go back to the Apple channels.

00:08:08.340 --> 00:08:13.600
So what Jessica's done is added the
Japanese news channel to the toolbar.

00:08:13.600 --> 00:08:17.840
And if we decide we no longer
want the Japanese news channel,

00:08:17.840 --> 00:08:21.720
we can also remove it from
the toolbar just as easily.

00:08:23.900 --> 00:08:25.300
You'll also note that
at the bottom there,

00:08:25.300 --> 00:08:27.560
there's a grouping called My Channels.

00:08:27.700 --> 00:08:29.430
Now, you can actually create as
many of these as you like.

00:08:29.500 --> 00:08:32.640
It's really a lot like the left
column on iTunes where you can

00:08:32.640 --> 00:08:34.790
create your own music collections.

00:08:34.850 --> 00:08:36.800
Well, here you're creating
collections of channels.

00:08:37.180 --> 00:08:42.800
So let's say there are
particular favorites I have.

00:08:42.800 --> 00:08:42.800
I could select a number of channels.

00:08:44.250 --> 00:08:47.190
And then drag them right to my channels.

00:08:47.220 --> 00:08:50.850
And then that's provided a custom
collection of the channels that

00:08:50.850 --> 00:08:52.710
I might like to use together.

00:08:55.140 --> 00:08:57.780
And then finally,
and maybe the most importantly

00:08:57.780 --> 00:09:00.840
for the folks in this audience,
we've added other channels,

00:09:00.880 --> 00:09:03.200
which is really where all
of your channels shine.

00:09:03.400 --> 00:09:08.800
It gives customers direct access to
all the creativity that's out there.

00:09:08.810 --> 00:09:14.850
It provides a listing of
the channel names as well as

00:09:14.890 --> 00:09:16.750
descriptions of each channel,
which you can customize in

00:09:16.750 --> 00:09:16.750
your channel on the web.

00:09:20.450 --> 00:09:24.900
So these channels, there are two sources
for this information.

00:09:24.900 --> 00:09:30.850
One is the DMOS open source directory,
which is where we get an initial listing.

00:09:31.190 --> 00:09:34.940
But also,
if you're interested in making sure

00:09:34.940 --> 00:09:40.190
that your channel shows up in this list,
you're welcome to submit

00:09:40.190 --> 00:09:42.310
your channel to Apple.

00:09:42.410 --> 00:09:43.950
And we'll talk a bit about the
submission process a little bit later.

00:09:43.950 --> 00:09:43.950
So, thank you, Jess.

00:09:47.690 --> 00:09:51.240
So let's go back to slides.

00:09:51.240 --> 00:09:56.940
So Sherlock is web services
for the rest of us.

00:09:56.940 --> 00:09:59.560
But what are web services?

00:10:00.900 --> 00:10:05.520
Maybe web services are SOAP or
.NET or WSDL or UDDI or any

00:10:05.640 --> 00:10:09.320
of a number of buzzwords,
but we don't think that's

00:10:09.320 --> 00:10:10.460
what web services are.

00:10:10.570 --> 00:10:15.070
Web services are airline reservations,
movie listings, yellow pages,

00:10:15.170 --> 00:10:18.090
translating things, shopping,
finding things on the net.

00:10:18.250 --> 00:10:21.210
That's really what web
services are to a customer.

00:10:21.470 --> 00:10:26.660
So what we try to do is deliver
web services in a way that

00:10:26.660 --> 00:10:28.540
customers would like to see them.

00:10:28.560 --> 00:10:31.480
But there are a number of
challenges in doing this.

00:10:31.480 --> 00:10:34.180
One is integration of information.

00:10:34.200 --> 00:10:37.960
Information can really
come from many sources.

00:10:37.980 --> 00:10:42.160
And so in order to present
the user one unified view,

00:10:42.160 --> 00:10:45.640
you'd really like to integrate it
from a number of different places.

00:10:45.640 --> 00:10:47.840
And you can do this in a web page.

00:10:47.840 --> 00:10:49.780
However,
the traditional method of doing this in

00:10:49.780 --> 00:10:53.030
a web page is to create frames and to
have some information in one frame and

00:10:53.030 --> 00:10:54.880
another information in another frame.

00:10:54.880 --> 00:10:58.370
But what we'd like to do instead is to
bring this information together in a way

00:10:58.370 --> 00:11:04.270
that not just displays the information,
but really harnesses it and allows you

00:11:04.270 --> 00:11:08.230
to interact with a unified interface,
rather than just seeing the

00:11:08.230 --> 00:11:09.910
information that's there.

00:11:12.100 --> 00:11:15.620
So the other challenge is
providing a user interface.

00:11:15.740 --> 00:11:18.280
And on the web, of course,
you can create fairly

00:11:18.280 --> 00:11:20.860
creative user interfaces,
but there are limits to it.

00:11:20.860 --> 00:11:24.090
And what users really want is
a native Aqua user interface.

00:11:24.160 --> 00:11:35.070
And so what Sherlock does is provide
a native user interface that users

00:11:35.070 --> 00:11:35.070
prefer in the context of a web service.

00:11:35.640 --> 00:11:37.860
Another challenge is change.

00:11:37.860 --> 00:11:41.340
So let's say you deliver a
web service as an application,

00:11:41.340 --> 00:11:44.480
but your information source changes.

00:11:44.620 --> 00:11:47.040
Maybe what you had to do in order
to get certain information was to

00:11:47.040 --> 00:11:48.550
screen scrape a particular site.

00:11:48.560 --> 00:11:50.630
Well, what happens if that site changes?

00:11:50.630 --> 00:11:51.940
Your application breaks.

00:11:52.000 --> 00:11:54.500
You have to, you know,
your users are now out to lunch

00:11:54.500 --> 00:11:57.800
for a while until you give them
a new version of the application.

00:11:57.800 --> 00:11:59.440
So we have to be able
to deal with change.

00:12:00.310 --> 00:12:01.900
Another challenge is security.

00:12:02.170 --> 00:12:05.220
Users aren't necessarily
comfortable downloading a binary

00:12:05.360 --> 00:12:06.990
application on their disk.

00:12:07.070 --> 00:12:10.200
They're very comfortable browsing
web pages and following URLs because

00:12:10.200 --> 00:12:12.480
those provide a sandbox environment.

00:12:12.480 --> 00:12:15.840
So you'd really also like something
that has that capability easily.

00:12:15.840 --> 00:12:18.080
You can get to it easily
through a single link.

00:12:18.080 --> 00:12:20.260
You'd like to be in a
sandbox environment.

00:12:20.260 --> 00:12:26.950
So, excuse me, I'm going to take a drink.

00:12:38.330 --> 00:12:44.180
So what Sherlock Web Services provide
are a native user interface.

00:12:44.180 --> 00:12:46.260
They're easy to create.

00:12:46.260 --> 00:12:50.460
They provide sandbox security.

00:12:50.460 --> 00:12:53.520
They also support changes on the
web because they live on the web.

00:12:53.530 --> 00:12:56.550
The Sherlock channel
doesn't reside on your disk.

00:12:56.550 --> 00:12:57.380
It resides on the web.

00:12:57.380 --> 00:13:02.810
And so when you make changes on the web,
it's reflected immediately.

00:13:03.250 --> 00:13:07.440
Additionally, they integrate multiple
sources of information.

00:13:07.440 --> 00:13:11.890
So instead of just displaying bits of
information from the web in one page,

00:13:12.030 --> 00:13:14.430
they allow you to actually
harness that information and

00:13:14.430 --> 00:13:15.680
do computation based on it.

00:13:15.830 --> 00:13:19.430
Maybe you take a city and state
and look up a zip code and then

00:13:19.430 --> 00:13:23.230
use that zip code to query another
site to get some information

00:13:23.380 --> 00:13:25.680
about what theaters are available.

00:13:25.680 --> 00:13:30.290
And then you might use that theater list
to query another site to find out what

00:13:30.290 --> 00:13:30.290
movies and show times are available.

00:13:33.740 --> 00:13:39.360
And much like web pages,
they are accessible by a web link.

00:13:39.360 --> 00:13:42.100
You can click a single URL and
get a Sherlock channel to come up.

00:13:42.220 --> 00:13:44.140
Much like applications,
you can put them in the dock.

00:13:44.230 --> 00:13:46.820
You can actually save a
shortcut to a Sherlock channel,

00:13:46.830 --> 00:13:48.810
put it in your dock,
and in a single click,

00:13:48.870 --> 00:13:50.620
you've opened that web service.

00:13:51.110 --> 00:13:54.960
And we've added third-party
channels to Sherlock to make

00:13:55.100 --> 00:13:57.000
them much more easy to find.

00:13:59.330 --> 00:14:02.550
So one question is when do you
want to create a channel versus,

00:14:02.550 --> 00:14:04.620
say, a web page or an application?

00:14:04.700 --> 00:14:07.230
One way to think about it
is that a channel is kind of

00:14:07.270 --> 00:14:09.060
somewhere in between the two.

00:14:09.060 --> 00:14:12.670
So when you want something
that's more than a web page,

00:14:12.700 --> 00:14:17.740
you want more of a native user interface,
but you don't want something as

00:14:17.740 --> 00:14:22.690
complex as an application or that
maybe to some users may be interpreted

00:14:22.690 --> 00:14:26.490
as having some risk of downloading it,
then you might want to

00:14:26.490 --> 00:14:26.490
choose a Sherlock channel.

00:14:29.080 --> 00:14:31.180
We're very,
very pleased with the number of

00:14:31.270 --> 00:14:35.000
third-party channels and the creativity
out there in creating channels.

00:14:35.200 --> 00:14:41.300
And I'd like to demonstrate one
of the third-party channels.

00:14:41.330 --> 00:14:46.890
I'd like to invite Kevin Agren, the
Senior Business Development Manager of

00:14:46.890 --> 00:14:48.450
Version Tracker.

00:14:57.640 --> 00:14:59.660
First of all, thanks for having us out.

00:14:59.660 --> 00:15:02.410
I'm here to talk about two reasons.

00:15:02.510 --> 00:15:05.680
First one being why we chose
to do a Sherlock channel.

00:15:05.750 --> 00:15:09.170
Second one being how it's going
to benefit Version Tracker

00:15:09.170 --> 00:15:11.000
today and in the long haul.

00:15:11.260 --> 00:15:15.500
We know right now that we have the
world's biggest Mac software database.

00:15:15.500 --> 00:15:18.890
We're tracking over 30,000 applications.

00:15:18.940 --> 00:15:24.020
But what we're seeing is that some
users would rather view this offline

00:15:24.020 --> 00:15:30.200
or in a Sherlock channel versus seeing
this just on the version tracker site.

00:15:30.750 --> 00:15:35.000
Mostly what we feel is that the
clean interface of Sherlock and

00:15:35.000 --> 00:15:39.610
the quick search functions
versus coming to a website,

00:15:39.610 --> 00:15:42.090
especially if you're looking
for multiple products,

00:15:42.540 --> 00:15:46.400
The Sherlock channel can
offer you a much cleaner look,

00:15:46.400 --> 00:15:51.230
the information you want right away,
and it's very accurate as well.

00:15:54.100 --> 00:15:56.920
In the polls,
what we've seen is a lot of people

00:15:56.920 --> 00:16:00.930
now are coming over and using
Sherlock as a primary user interface

00:16:01.010 --> 00:16:03.120
versus going through the web.

00:16:04.540 --> 00:16:08.130
We also see that
Apple put this in the doc,

00:16:08.230 --> 00:16:12.260
and so strategically as a business,
to be part of Sherlock for

00:16:12.260 --> 00:16:14.990
version tracker is very important.

00:16:16.000 --> 00:16:21.250
The channel development for us was almost
as fluid as doing a web page because it's

00:16:21.320 --> 00:16:26.520
already built and it's a simple XML feed,
so we're pulling content

00:16:26.520 --> 00:16:28.150
down right into it.

00:16:29.650 --> 00:16:33.590
As far as the business benefits,
I'm just going to take a quick run

00:16:33.590 --> 00:16:37.750
here on the version tracker channel.

00:16:46.120 --> 00:16:51.440
And so what you can see here is that
this is today's Mac software updates.

00:16:51.440 --> 00:16:57.510
You can also easily do this by a
search if you go in for Sherlock.

00:17:00.180 --> 00:17:04.560
You're going to pull up not
only Apple Sherlock here,

00:17:04.560 --> 00:17:09.370
but every other application that's
going to be relevant to it as well.

00:17:09.500 --> 00:17:10.800
Search this in Sherlock.

00:17:10.800 --> 00:17:13.100
You're going to save time.

00:17:13.100 --> 00:17:17.810
You're also going to be able to look
at many applications versus what's

00:17:17.860 --> 00:17:20.630
going to be found in our database.

00:17:22.790 --> 00:17:26.270
The important part as a business for
Version Tracker is that we're also

00:17:26.270 --> 00:17:30.450
a media company on top of building
our own software applications.

00:17:30.520 --> 00:17:33.780
A lot of our revenue comes
from advertising dollars,

00:17:33.780 --> 00:17:37.440
and when users decide to click a page,
they're going to come

00:17:37.440 --> 00:17:39.140
on to Version Tracker.

00:17:42.840 --> 00:17:48.250
And we're generating impression-based
ad revenue from every user

00:17:48.250 --> 00:17:50.470
that comes through here.

00:17:51.520 --> 00:17:53.790
It's amazing to us,
but what we have seen now is

00:17:53.790 --> 00:17:56.770
that Version Tracker gets over
1 million searches per month

00:17:56.850 --> 00:17:59.760
through the Sherlock channel,
so it's a significant

00:17:59.760 --> 00:18:01.570
part of our business.

00:18:01.870 --> 00:18:06.080
When users are in the search pages
and deeper than the homepage,

00:18:06.080 --> 00:18:10.480
it's a more educated user,
and advertisers right now see that

00:18:10.480 --> 00:18:12.960
this is a highly valuable position.

00:18:13.030 --> 00:18:16.830
You've seen probably a couple
hundred different advertisers

00:18:16.830 --> 00:18:21.230
come and go off the site,
but our revenue comes from the long haul.

00:18:21.330 --> 00:18:26.920
Companies like CDW that are believing in
the Mac user and spending money online

00:18:26.920 --> 00:18:31.090
with us definitely gives us the time,
the money,

00:18:31.090 --> 00:18:36.190
and the manpower at Version Tracker
to further develop our product,

00:18:36.190 --> 00:18:37.560
Version Tracker Pro.

00:18:37.620 --> 00:18:42.240
And it also allows us to put your
developer's products out in front

00:18:42.240 --> 00:18:44.550
of as many users as possible.

00:18:45.460 --> 00:18:49.000
With Sherlock being in the dock and
version tracker being a channel,

00:18:49.000 --> 00:18:53.100
it's very nice for us to increase our
brand awareness to all Mac users who are

00:18:53.100 --> 00:18:56.590
not already aware of version tracker.

00:18:58.710 --> 00:19:02.390
When a developer registers with
us and they post their product,

00:19:02.480 --> 00:19:05.360
we expect to get that
out as quick as we can.

00:19:05.470 --> 00:19:09.440
We also expect to get that out
to as many people as possible.

00:19:09.530 --> 00:19:14.020
So, when you have the
application posted here,

00:19:14.900 --> 00:19:18.500
In our Sherlock channel,
what you're going to see is that

00:19:18.500 --> 00:19:20.230
it's coming down the home page.

00:19:20.600 --> 00:19:23.200
On Version Tracker,
it's picked up instantly in

00:19:23.200 --> 00:19:25.060
the Sherlock channel as well.

00:19:25.060 --> 00:19:28.200
So for the developer,
your advantage is you're also reaching

00:19:28.230 --> 00:19:33.420
these people through our Sherlock channel
that weren't on Version Tracker as well.

00:19:36.990 --> 00:19:39.660
One other thing that we can
say about Sherlock is with

00:19:39.660 --> 00:19:44.820
more OS X users coming on,
more Mac users all the time,

00:19:44.920 --> 00:19:47.660
when they use this,
learn about Version Tracker,

00:19:47.740 --> 00:19:52.450
we're also seeing an increase in
our sales for Version Tracker Pro.

00:19:54.780 --> 00:19:59.250
And the last thing is that the strategic
positioning for version tracker in here

00:19:59.250 --> 00:20:05.350
is we really feel like where the web
is going is users want to interface

00:20:05.460 --> 00:20:09.400
with something like a Sherlock channel
so that they can come on,

00:20:09.510 --> 00:20:12.260
make it part of their morning,
they're going to get on,

00:20:12.280 --> 00:20:17.540
maybe look at their stocks,
check the software applications

00:20:17.540 --> 00:20:17.540
that they care the most about.

00:20:18.450 --> 00:20:21.730
And that's really all we have
to say from Version Tracker.

00:20:21.740 --> 00:20:24.630
Thank you, Kevin.

00:20:27.000 --> 00:20:29.000
Okay, go back to slides.

00:20:29.000 --> 00:20:33.590
Okay, we can go back to slides.

00:20:41.630 --> 00:20:44.200
So now I'd like to take a survey.

00:20:44.200 --> 00:20:48.980
How many folks out there have
developed a Sherlock channel already?

00:20:49.850 --> 00:20:51.840
Okay, a few.

00:20:51.840 --> 00:20:56.580
How many folks are thinking about
maybe developing a Sherlock channel?

00:20:56.790 --> 00:20:57.500
Quite a few.

00:20:57.500 --> 00:20:58.090
Quite a few.

00:20:58.100 --> 00:20:58.550
Great.

00:20:58.560 --> 00:20:59.680
Okay.

00:20:59.680 --> 00:21:02.800
Well, you know,
this is really a developer opportunity.

00:21:02.800 --> 00:21:06.060
As you saw,
you can provide a more compelling user

00:21:06.060 --> 00:21:11.200
interface through a Sherlock channel,
much more immediate, right there.

00:21:11.200 --> 00:21:13.710
You can update it on the web.

00:21:13.720 --> 00:21:15.800
You can get to it from a
web link from your website.

00:21:15.800 --> 00:21:18.320
But also, we built the channels
right into Sherlock,

00:21:18.320 --> 00:21:19.810
so your user can see it either way.

00:21:19.820 --> 00:21:21.920
And it's comfortable for users.

00:21:21.920 --> 00:21:24.890
They can follow a link to get to it,
or they can simply select the

00:21:24.890 --> 00:21:26.140
channel from within Sherlock.

00:21:26.140 --> 00:21:29.800
And it provides better visibility
for your web services than just

00:21:29.800 --> 00:21:32.600
having a website out in the sea of
millions and millions of websites.

00:21:35.220 --> 00:21:39.190
So, if you'd like to develop a channel,
we've provided a number of tools built

00:21:39.200 --> 00:21:42.040
right into Sherlock to help you do that.

00:21:42.040 --> 00:21:44.900
There's actually a debug menu
in Sherlock that normally

00:21:44.950 --> 00:21:47.500
isn't visible to most users,
but if you enable it,

00:21:47.500 --> 00:21:49.500
you'll see a number of tools,
and we'll start to

00:21:49.500 --> 00:21:50.670
talk about those later.

00:21:50.800 --> 00:21:55.640
So the first step is, of course,
to develop your channel,

00:21:55.640 --> 00:21:55.640
and that's what the bulk
of this talk will be about.

00:21:56.070 --> 00:21:58.900
Once you've done that,
you can submit your channel to Apple.

00:21:58.900 --> 00:22:00.350
And the way you do that,
we've got a menu item right

00:22:00.440 --> 00:22:01.300
there in the debug menu.

00:22:01.300 --> 00:22:03.840
You just choose that item
with your channel up front,

00:22:03.870 --> 00:22:08.400
and you'll go right to a web page
that'll allow you to submit it to Apple.

00:22:08.560 --> 00:22:10.900
And then we'll add it in.

00:22:10.900 --> 00:22:13.050
It'll be built right into Sherlock.

00:22:15.290 --> 00:22:17.920
So let's talk a bit about how
to create a Sherlock channel.

00:22:17.920 --> 00:22:21.220
And first,
I want to kind of give an overview of

00:22:21.220 --> 00:22:25.540
the structure of a Sherlock channel
to set the stage for understanding the

00:22:25.540 --> 00:22:27.790
components and how they all fit together.

00:22:27.910 --> 00:22:31.300
First, we'll talk about some channel
design principles briefly.

00:22:31.330 --> 00:22:35.430
Then we'll go into some detail
about the key elements of a channel.

00:22:35.450 --> 00:22:40.100
We'll give a demonstration of XQuery,
which is a great XML processing

00:22:40.190 --> 00:22:44.900
technology that is under
development by the W3C.

00:22:44.900 --> 00:22:47.240
That we've adopted in Sherlock.

00:22:47.310 --> 00:22:51.670
And we'll talk about some of the
Sherlock extensions to that technology.

00:22:52.500 --> 00:22:54.860
So first, briefly,
the channel design principles.

00:22:54.970 --> 00:22:58.540
One thing to think about is
simply to focus on one topic.

00:22:58.760 --> 00:23:00.800
Searching version tracker is an example.

00:23:00.830 --> 00:23:02.580
Very specific purpose.

00:23:02.750 --> 00:23:07.500
Finding movies, very specific purpose.

00:23:07.500 --> 00:23:09.830
Another guideline is to -- it's
great when your channel launches

00:23:09.830 --> 00:23:11.500
to have some information showing.

00:23:11.500 --> 00:23:12.700
You'll note in the
version tracker channel,

00:23:12.700 --> 00:23:15.140
the moment the channel was opened,
it showed the latest

00:23:15.220 --> 00:23:16.600
updates on version tracker.

00:23:16.680 --> 00:23:19.350
So the user didn't have to enter a query,
although they could,

00:23:19.350 --> 00:23:22.030
but immediately they saw
relevant information.

00:23:22.950 --> 00:23:25.140
A third thing to consider
is for performance reasons,

00:23:25.140 --> 00:23:27.400
you really want to query
the web only when necessary.

00:23:27.400 --> 00:23:29.900
Obviously, on the Internet,
there can be arbitrary delays.

00:23:30.050 --> 00:23:33.540
And for our modem users,
it can take a long time to download

00:23:33.540 --> 00:23:35.900
significant amounts of content.

00:23:36.000 --> 00:23:37.850
So obviously,
there are times when you need to

00:23:37.850 --> 00:23:39.640
query the Internet to get information.

00:23:39.710 --> 00:23:45.680
But to keep that to a minimum,
cache stuff as much as possible,

00:23:45.680 --> 00:23:45.680
which Sherlock provides
mechanisms to let you do.

00:23:46.730 --> 00:23:50.090
Another guideline is
to remember user state.

00:23:50.260 --> 00:23:54.840
If you go to a channel
and use it to do a search,

00:23:54.840 --> 00:23:56.900
let's say for movies and
a particular zip code,

00:23:56.900 --> 00:23:58.590
it's great if next time
you go to that channel,

00:23:58.590 --> 00:24:00.480
it knows the zip code that
you entered last time so you

00:24:00.480 --> 00:24:01.590
don't have to re-enter it.

00:24:01.820 --> 00:24:05.890
That's a basic guideline.

00:24:05.890 --> 00:24:07.010
And of course, follow the Aqua guidelines
as with any application.

00:24:07.600 --> 00:24:11.650
So now let's talk in some
detail about what composes a

00:24:11.650 --> 00:24:13.700
channel and how it's made up.

00:24:13.840 --> 00:24:16.790
The key elements of the
channel are shown here,

00:24:16.790 --> 00:24:21.300
the top one being the user interface,
the data store below that,

00:24:21.300 --> 00:24:23.580
and then triggers and services,
and we'll talk about

00:24:23.580 --> 00:24:24.770
each of those in turn.

00:24:24.870 --> 00:24:25.800
So that's the user interface.

00:24:25.800 --> 00:24:28.800
What's shown here is the user
interface for the Yellow Pages channel,

00:24:28.800 --> 00:24:31.800
but it's really tiny and hard to see,
so let me zoom in a little bit.

00:24:31.870 --> 00:24:36.600
So now we're looking at the text entry
field where you enter the category,

00:24:36.600 --> 00:24:39.790
say,
like restaurants or the business name,

00:24:39.850 --> 00:24:43.300
and you're seeing a little bit
of the results down below that.

00:24:43.490 --> 00:24:45.040
So this is the user interface.

00:24:45.170 --> 00:24:47.420
The question is how do you make
a user interface for Sherlock,

00:24:47.420 --> 00:24:48.880
if you'd like to make a Sherlock channel?

00:24:48.970 --> 00:24:51.400
And the answer is really it's the
same as making it for an application.

00:24:51.400 --> 00:24:54.590
You use Interface Builder,
it creates Nib files.

00:24:54.700 --> 00:24:59.080
The only difference is,
although it's like an

00:24:59.080 --> 00:25:04.650
app in this respect,
it's not like an app in that there's no

00:25:04.750 --> 00:25:08.420
Objective C code or C++ code or C code.

00:25:08.420 --> 00:25:09.950
And it's web resident,
unlike an application.

00:25:12.430 --> 00:25:13.910
So how do we do this?

00:25:14.000 --> 00:25:18.310
Well,
we've added a palette inside Interface

00:25:18.310 --> 00:25:23.000
Builder that lets you name the
UI elements in your user interface.

00:25:23.060 --> 00:25:28.490
And you'll see later how that allows
us to make the channel do what it needs

00:25:28.490 --> 00:25:31.270
to do without adding a lot of code.

00:25:31.400 --> 00:25:33.270
So as an example,
in the Phonebook channel,

00:25:33.410 --> 00:25:36.560
the main query field might be
named Phonebook.QueryField.

00:25:36.560 --> 00:25:40.280
And it's sort of like a path
where dot is used as a separator,

00:25:40.280 --> 00:25:42.460
and it can be arbitrarily deep.

00:25:42.460 --> 00:25:44.680
The results down below might
be called Phonebook.Results.

00:25:44.720 --> 00:25:48.890
And it, of course,
has structure within that that would

00:25:48.890 --> 00:25:51.900
be accessed by adding dot more stuff.

00:25:53.080 --> 00:25:54.160
So then there's the data store.

00:25:54.160 --> 00:25:57.230
Now the data store is created
at the time you run a channel.

00:25:57.280 --> 00:25:59.400
So it's not something you
have to put in your channel,

00:25:59.400 --> 00:26:01.500
but it's created at the time you run.

00:26:01.500 --> 00:26:05.260
And it contains all the data,
all the active data.

00:26:05.260 --> 00:26:08.080
It contains temporary data that
you're using at the moment.

00:26:08.080 --> 00:26:10.600
It also contains persistent data.

00:26:10.600 --> 00:26:15.160
And it also reflects the data
that is contained in your UI.

00:26:15.160 --> 00:26:19.360
It's a hierarchical structure made
up of arrays and dictionaries,

00:26:19.360 --> 00:26:20.460
arbitrarily deep.

00:26:20.480 --> 00:26:25.120
And it's addressed by these dotted
paths that I mentioned earlier.

00:26:25.750 --> 00:26:30.200
Items in the data store can be created
at any time for your own purpose,

00:26:30.200 --> 00:26:33.200
and they're created
as they're referenced.

00:26:33.200 --> 00:26:36.290
Or it automatically,
when your channel runs,

00:26:36.290 --> 00:26:39.350
directly reflects the
contents of your UI.

00:26:40.670 --> 00:26:45.290
So you can access any value
that's in your UI by simply

00:26:45.290 --> 00:26:48.430
reading a data store path,
and that will tell you

00:26:48.430 --> 00:26:49.260
what the current value is.

00:26:49.260 --> 00:26:52.280
If the user changes it,
you can be notified of that

00:26:52.280 --> 00:26:54.030
change and you can respond to it.

00:26:54.090 --> 00:26:55.900
But if you read the value
from that data store entry,

00:26:55.900 --> 00:26:57.600
it will always reflect the current value.

00:26:57.700 --> 00:27:01.600
If you write to that value,
it's going to change the UI.

00:27:01.600 --> 00:27:06.320
So if you decide you want to change
the default on the text entry field,

00:27:06.320 --> 00:27:08.750
you simply write a new string in
there and then the UI changes.

00:27:09.180 --> 00:27:13.230
It's a very powerful metaphor for quickly
putting together a user interface.

00:27:15.990 --> 00:27:18.940
The third area is triggers.

00:27:18.940 --> 00:27:21.330
This is where you make things happen.

00:27:21.370 --> 00:27:25.600
Triggers run whenever a particular
element of the data store changes.

00:27:25.600 --> 00:27:27.960
And this may be an element
that's tied to user interface,

00:27:27.960 --> 00:27:30.300
so if the user interface changes,
the trigger runs.

00:27:30.300 --> 00:27:38.000
Or it may be an element that, say,
reflects data coming in from the web.

00:27:38.000 --> 00:27:38.000
So the moment the data comes in,
a trigger can run to respond

00:27:38.000 --> 00:27:38.000
to that data arriving.

00:27:38.160 --> 00:27:41.680
A trigger can invoke services,
which we'll talk about in a bit,

00:27:41.680 --> 00:27:46.100
and then perhaps perform calculations
based on the results of those calls,

00:27:46.210 --> 00:27:47.600
and then change the UI.

00:27:47.740 --> 00:27:49.600
So it's really the workhorse.

00:27:49.740 --> 00:27:53.760
One way to think about triggers and
the JavaScript that you write in

00:27:53.760 --> 00:27:58.560
triggers is it's very much analogous
to JavaScript on a web page.

00:27:58.640 --> 00:28:02.710
You could think of the data store as
being like the DOM of the web page,

00:28:02.710 --> 00:28:08.240
and the triggers as being the code that
causes changes to happen in that DOM.

00:28:11.630 --> 00:28:13.700
And last,
I'd like to talk about the services.

00:28:13.710 --> 00:28:17.600
Now, these are the basic ways you
get information from the web.

00:28:17.600 --> 00:28:22.190
They're implemented in XQuery,
which is a powerful XML and

00:28:22.220 --> 00:28:24.590
HTML processing language.

00:28:24.860 --> 00:28:29.220
They let you query the web and say,
get a web page and extract the

00:28:29.230 --> 00:28:31.100
information you need from that web page.

00:28:31.100 --> 00:28:34.950
Or maybe you're querying a SOAP service
and extracting the information you

00:28:34.950 --> 00:28:36.700
need from the XML that comes back.

00:28:36.700 --> 00:28:40.630
It's also very good at constructing
XML in order to send queries

00:28:40.690 --> 00:28:42.700
and processing the results.

00:28:42.710 --> 00:28:45.280
One example is you might
create a service to,

00:28:45.310 --> 00:28:48.580
given a city-state pair,
query the web and get back a list

00:28:48.580 --> 00:28:52.700
of theaters that are available in
that particular city and state.

00:28:52.700 --> 00:28:56.280
By packaging it as a service,
it then becomes one function call

00:28:56.280 --> 00:28:59.660
that the JavaScript trigger can
call to get that information.

00:28:59.700 --> 00:29:03.500
And the details of where it has
to go to get the information,

00:29:03.640 --> 00:29:08.870
how that HTML is processed, perhaps,
or XML, and how to extract the results

00:29:08.870 --> 00:29:11.220
is all hidden in the service.

00:29:13.900 --> 00:29:15.620
So I want to say a
little bit about XQuery.

00:29:15.620 --> 00:29:20.200
XQuery is a new emerging language
that is under development by the W3C.

00:29:20.200 --> 00:29:23.710
And if you go to W3C.org,
you can see the current spec.

00:29:23.800 --> 00:29:26.820
It's really designed for processing XML.

00:29:26.940 --> 00:29:35.440
It has a relationship with XSLT,
and that both share XPath underneath.

00:29:35.470 --> 00:29:37.800
So if you're familiar
with those standards,

00:29:37.800 --> 00:29:40.670
XQuery would be pretty
straightforward to pick up.

00:29:43.090 --> 00:29:47.730
So now I'd like to invite Jess back
up to demonstrate XQuery and

00:29:47.730 --> 00:29:50.000
also the XPath Finder channel.

00:29:50.000 --> 00:29:56.370
So we go to demo one, please.

00:30:04.130 --> 00:30:06.760
So Jess has opened the
XPath Finder channel.

00:30:06.760 --> 00:30:10.530
Now this is one of the channels that
you'll get in the development tools,

00:30:10.530 --> 00:30:13.270
which you can subscribe to
directly from the debug menu.

00:30:13.340 --> 00:30:16.120
It's really just a Sherlock channel,
but it helps you in

00:30:16.120 --> 00:30:17.940
developing Sherlock channels.

00:30:18.070 --> 00:30:22.560
So at the top there you see a text
field where you enter the URL.

00:30:22.650 --> 00:30:26.820
So if we get the HTML from this website,
which is apple.com,

00:30:26.850 --> 00:30:29.630
you'll see down below it displays
the content of the website,

00:30:29.640 --> 00:30:33.090
and that's using a Safari WebKit view.

00:30:33.200 --> 00:30:38.690
And up above it shows you the
structure of the HTML that is

00:30:38.690 --> 00:30:40.480
being fetched from that site.

00:30:40.480 --> 00:30:43.220
So it's a column browser and
you'll see HTML on the left.

00:30:43.220 --> 00:30:45.460
We go ahead and select
HTML and drill down.

00:30:45.460 --> 00:30:47.000
You'll see the two things happen.

00:30:47.000 --> 00:30:49.130
One is we start to see the
tags that are within that.

00:30:49.160 --> 00:30:53.780
So we see head and body and we
can click on body and go further.

00:30:53.780 --> 00:30:57.440
But you'll also see that
down below as we drill down,

00:30:57.480 --> 00:31:00.820
the content rendered below also changes.

00:31:00.820 --> 00:31:04.290
So what we're doing is zooming in
through the content and seeing what

00:31:04.290 --> 00:31:07.500
portion of the HTML page we're seeing.

00:31:07.500 --> 00:31:09.580
This is a much more convenient
way of drilling down and finding

00:31:09.580 --> 00:31:12.100
the bit of information you
want to extract than staring at

00:31:12.130 --> 00:31:13.990
HTML and trying to figure it out.

00:31:19.250 --> 00:31:24.510
Down at the bottom,
you'll see there's an XQuery path.

00:31:24.740 --> 00:31:30.090
And this is the XQuery code
that is used to access what

00:31:30.210 --> 00:31:33.630
you see in the display below.

00:31:33.730 --> 00:31:36.410
So if you want to get
at that particular tab,

00:31:36.490 --> 00:31:39.160
this is the XQuery code that will do it.

00:31:39.400 --> 00:31:42.190
And in fact, it's an XPath path.

00:31:42.870 --> 00:31:48.940
So let's go ahead and copy that
out of the XPathfinder channel.

00:31:48.960 --> 00:31:52.270
And we'll switch over
to the XQuery channel.

00:31:53.850 --> 00:31:58.080
The XQuery channel is used
for being able to execute and

00:31:58.130 --> 00:32:00.560
test out any sort of XQuery.

00:32:00.590 --> 00:32:02.180
It's a great way to learn XQuery.

00:32:02.180 --> 00:32:04.830
Try something out, hit run,
and you'll see the results.

00:32:04.840 --> 00:32:08.100
So let's go ahead and paste
it in the XQuery channel.

00:32:08.100 --> 00:32:11.780
And if we can zoom in so we can
maybe read it a little bit better.

00:32:13.690 --> 00:32:18.360
So you'll see there what this
XPath or XQuery is doing is,

00:32:18.360 --> 00:32:23.030
it's fetching the document,
it's looking at the HTML tag within it,

00:32:23.140 --> 00:32:25.130
and then going into the
body tag within that,

00:32:25.150 --> 00:32:27.160
the center tag within that,
the table tag within that,

00:32:27.160 --> 00:32:28.320
and the TR tag within that.

00:32:28.320 --> 00:32:31.140
And that's how we zoom in on
the bit of data that we want.

00:32:31.140 --> 00:32:37.230
But in fact, this is a little bit fragile
because if we change the order of

00:32:37.320 --> 00:32:42.880
what's happening in the web page,
this may no longer work.

00:32:42.930 --> 00:32:46.690
And so one of the things that we want to
be able to do is to make it more robust.

00:32:46.760 --> 00:32:49.520
So the XPath channel is a
great starting point to get you

00:32:49.520 --> 00:32:50.920
roughly where you want to be.

00:32:51.010 --> 00:32:53.550
But then you probably want to
massage the expression a little

00:32:53.550 --> 00:32:55.390
bit to make it more robust.

00:32:56.370 --> 00:33:00.220
So, Jess, you want to... Jess Meyerson:
I guess I'm taking over at this point.

00:33:00.220 --> 00:33:02.450
So I'm going to zoom you back
out so that I can type and change

00:33:02.450 --> 00:33:04.050
things without making you feel ill.

00:33:06.390 --> 00:33:10.800
And basically what I'm going to do here
is I'm going to append a bit of text,

00:33:10.890 --> 00:33:13.540
which I will show you
when I zoom in again,

00:33:13.540 --> 00:33:18.720
but I'm adding a path that
calls our source function,

00:33:18.720 --> 00:33:22.520
and that's going to display the
results of what we execute in this

00:33:22.520 --> 00:33:25.020
channel in a way that you can read.

00:33:25.020 --> 00:33:27.260
Basically,
when you execute something in XQuery,

00:33:27.300 --> 00:33:31.020
the data type that's returned
by default is an XML tree,

00:33:31.020 --> 00:33:34.300
and so you need to sometimes convert that
into a human-readable form if you want

00:33:34.300 --> 00:33:36.300
to play with it in the XQuery channel.

00:33:36.300 --> 00:33:39.200
So just to make this
a little less fragile,

00:33:39.200 --> 00:33:42.600
you would probably want
to do something like,

00:33:42.630 --> 00:33:47.000
oh, take out HTML body and center.

00:33:47.420 --> 00:33:49.100
Add a slash in there.

00:33:49.100 --> 00:33:53.380
If you guys know about XQuery or if
you take an XQuery or XPath tutorial,

00:33:53.380 --> 00:33:58.040
the double slash says,
"I want all tables in this document."

00:33:58.040 --> 00:34:01.210
But then we know we want the first table,
so we're just going to

00:34:01.210 --> 00:34:03.530
add in a brace that says,
"Give me the first

00:34:03.530 --> 00:34:05.230
table." So let me zoom.

00:34:05.340 --> 00:34:08.570
Well, first I'll run this,
and then I'll zoom in and

00:34:08.860 --> 00:34:10.200
show you what I've done.

00:34:10.200 --> 00:34:13.260
So basically,
this is giving you the same TR that

00:34:13.260 --> 00:34:15.580
we got in the XPath Finder channel.

00:34:15.580 --> 00:34:16.580
And I'll zoom in here.

00:34:17.360 --> 00:34:21.650
And you can see I've been able to remove
three path elements in my command,

00:34:21.670 --> 00:34:25.400
and so that's basically three
fewer things that can break if the

00:34:25.400 --> 00:34:27.790
web page you're querying changes.

00:34:28.710 --> 00:34:29.690
I think that's about it.

00:34:29.700 --> 00:34:30.700
Great.

00:34:30.730 --> 00:34:31.700
Thanks, Jess.

00:34:31.700 --> 00:34:33.190
Okay, let's go back to slides.

00:34:37.450 --> 00:34:39.690
So as you can see,
we've provided the tools to make

00:34:39.700 --> 00:34:42.790
it easy to get at the information
you need to on the web and extract

00:34:42.870 --> 00:34:44.050
it for use in your channel.

00:34:46.790 --> 00:34:49.370
We've also provided some
extensions to both JavaScript,

00:34:49.430 --> 00:34:53.040
which is used in triggers, and XQuery,
which is used in services,

00:34:53.130 --> 00:34:58.700
to make it easier to do
different kinds of HTTP requests,

00:34:58.700 --> 00:35:02.470
for example,
posts and dealing with cookies and

00:35:02.470 --> 00:35:07.030
headers and those sorts of things,
to deal with URL encoding

00:35:07.070 --> 00:35:10.430
and translation,
and to do data matching,

00:35:10.430 --> 00:35:11.080
which is kind of the traditional
Sherlock 2 way of extracting information.

00:35:13.130 --> 00:35:17.500
So now I'd like to invite Jessica back
up to go into much more detail

00:35:17.500 --> 00:35:20.930
about how to actually develop
a channel that nitty-gritty.

00:35:22.040 --> 00:35:22.740
Welcome, Jess.

00:35:22.740 --> 00:35:25.110
Thank you.

00:35:25.270 --> 00:35:26.780
Hi, everybody.

00:35:26.850 --> 00:35:28.640
As Wayne said before,
I'm the channel development lead,

00:35:28.640 --> 00:35:31.360
and I'm gonna talk to you about
how to actually get started

00:35:31.410 --> 00:35:33.580
with developing your channels.

00:35:33.960 --> 00:35:36.300
Please forgive me if I'm rushing through,
but I'm a little short on time

00:35:36.300 --> 00:35:38.580
and I want to make sure that we
have plenty of time for questions.

00:35:38.630 --> 00:35:39.200
Okay.

00:35:39.630 --> 00:35:43.300
So, what I'm going to cover today is
developing channels in four steps.

00:35:43.360 --> 00:35:45.140
That's honestly all it takes.

00:35:45.140 --> 00:35:47.960
Then I'm going to cover a little of
what's new for developers in Panther,

00:35:48.090 --> 00:35:50.660
and then a few advanced topics.

00:35:52.290 --> 00:35:54.420
So what are the four steps
for developing channels?

00:35:54.420 --> 00:35:57.000
You create your channel,
you customize your channel,

00:35:57.000 --> 00:36:00.390
you probably have to debug your channel,
and then you deploy your channel.

00:36:00.510 --> 00:36:03.390
So I'm going to talk about
creating your channel first.

00:36:03.910 --> 00:36:06.790
So the steps to creating the
channel all involve using Xcode,

00:36:06.790 --> 00:36:09.940
our development environment,
which you've probably

00:36:10.000 --> 00:36:11.640
all received on your CDs.

00:36:11.770 --> 00:36:16.730
And the first step that you want to take
is launch Xcode and create a new project.

00:36:16.890 --> 00:36:19.380
And you'll find that in
your list of choices,

00:36:19.440 --> 00:36:21.530
you can choose to create
a Sherlock channel.

00:36:21.670 --> 00:36:24.140
We've provided a template
for that kind of project.

00:36:24.240 --> 00:36:26.260
So choose to make one of those.

00:36:26.700 --> 00:36:28.590
Next,
you're going to be presented with a panel

00:36:28.670 --> 00:36:32.210
to save your channel project somewhere,
and make sure you save it in

00:36:32.210 --> 00:36:34.390
an HTTP accessible directory.

00:36:34.500 --> 00:36:36.290
When you deploy your channel,
it goes out on the web,

00:36:36.310 --> 00:36:37.980
but to be able to test
your channel locally,

00:36:38.070 --> 00:36:43.640
it needs to be in either the global web
server documents folder or maybe in your

00:36:43.640 --> 00:36:46.630
sites folder in your user directory.

00:36:47.450 --> 00:36:50.020
Next, make sure you turn on
personal web sharing.

00:36:50.020 --> 00:36:50.980
It'll save you a lot of pain.

00:36:51.080 --> 00:36:52.790
You're going to wonder why
your channel's not showing up,

00:36:52.790 --> 00:36:54.800
and it's because you forgot to
turn on personal web sharing.

00:36:54.800 --> 00:36:58.790
So you do that in the Sharing Preference
panel in System Preferences.

00:37:00.020 --> 00:37:02.960
Finally, go back to Xcode and build
and run your project.

00:37:02.980 --> 00:37:06.350
Basically, Sherlock's going to launch,
and it's going to launch with

00:37:06.390 --> 00:37:09.400
the right environment variable
set to get the debug menu.

00:37:09.450 --> 00:37:12.710
In the debug menu,
you want to add your channel to Sherlock.

00:37:12.840 --> 00:37:15.250
We've realized that this is an extra
step that you probably don't want to do,

00:37:15.350 --> 00:37:18.440
so in future revisions,
hopefully we will automate that for you,

00:37:18.440 --> 00:37:20.220
but remember to add your channel.

00:37:20.450 --> 00:37:23.130
This will present you with
a dialogue where you have to

00:37:23.130 --> 00:37:26.480
type in a little Sherlock URL,
but there's one there by default,

00:37:26.480 --> 00:37:29.270
so you really only have to edit
a couple of pieces of it to

00:37:29.270 --> 00:37:33.000
make sure that it's pointing to
your channel's definition file.

00:37:34.550 --> 00:37:38.340
Once you hit add, then Sherlock's going
to display your channel.

00:37:38.340 --> 00:37:41.250
But it's our channel,
because it's the one in the template.

00:37:41.420 --> 00:37:45.180
So this probably isn't
exactly what you want.

00:37:46.290 --> 00:37:49.560
That's why you're going to customize it.

00:37:49.560 --> 00:37:51.130
So customizing your
channel involves two steps.

00:37:51.220 --> 00:37:54.660
You give your channel its own identity,
and then you enhance our starter

00:37:54.680 --> 00:37:56.560
code to meet your specific needs.

00:37:57.280 --> 00:37:59.940
Giving your channel its own
identity involves naming it,

00:38:00.000 --> 00:38:04.020
describing it, setting its identifier,
and then giving it a beautiful icon to

00:38:04.020 --> 00:38:06.150
really attract your customers to it.

00:38:06.750 --> 00:38:07.920
Naming is pretty simple.

00:38:08.080 --> 00:38:11.350
It's done in the localized
resources plist file.

00:38:11.420 --> 00:38:14.480
That's where all strings that could
be displayed in multiple languages

00:38:14.480 --> 00:38:16.420
are defined in a Sherlock channel.

00:38:16.930 --> 00:38:19.220
So that you can see what
that file actually contains,

00:38:19.220 --> 00:38:23.270
I've highlighted the channel name key,
and then I've named my

00:38:23.270 --> 00:38:25.980
channel WWDC 2003 Example.

00:38:26.710 --> 00:38:29.060
In that same file,
you can describe your channel.

00:38:29.100 --> 00:38:32.660
That's the channel description key,
and I've said this example demonstrates

00:38:32.660 --> 00:38:34.600
basic channel development tasks.

00:38:34.750 --> 00:38:35.590
What's that going to get you?

00:38:35.590 --> 00:38:38.580
Well, setting the name and setting
the description is going to show

00:38:38.580 --> 00:38:42.600
up in the other channels view,
in our channel management view.

00:38:42.600 --> 00:38:44.680
So you want to make sure
that you describe accurately

00:38:44.680 --> 00:38:46.490
what your channel does,
sell it a little bit,

00:38:46.530 --> 00:38:47.910
it'll get users to click on it.

00:38:49.240 --> 00:38:50.330
Set its identifier.

00:38:50.360 --> 00:38:53.200
This is important not for your customers,
but for Sherlock.

00:38:53.200 --> 00:38:56.790
If you've developed applications on
our platform outside of Sherlock,

00:38:56.810 --> 00:38:59.840
a Cocoa app, a Carbon app,
you're probably familiar with the

00:38:59.840 --> 00:39:03.380
concept of a bundle identifier,
and this is basically the same thing,

00:39:03.380 --> 00:39:04.580
but for Sherlock.

00:39:05.230 --> 00:39:09.640
Here, I've set the identifier to
com.apple.wwdc2003_example.

00:39:09.640 --> 00:39:13.550
So just like with bundle identifiers,
a three-part string comprised of com,

00:39:13.600 --> 00:39:16.730
your company, your product name,
will make it sufficiently

00:39:16.730 --> 00:39:20.070
unique that you probably won't
collide with other channels.

00:39:21.730 --> 00:39:24.160
Finally, the last bit is to give
it a beautiful icon.

00:39:24.160 --> 00:39:26.160
This is really important.

00:39:26.160 --> 00:39:28.710
It puts a level of polish on
your channel that users are

00:39:28.710 --> 00:39:30.200
really going to appreciate.

00:39:30.200 --> 00:39:33.830
I can't emphasize enough that giving
your channel an identity that makes

00:39:33.890 --> 00:39:37.160
users want to double-click on it in
the other channels' view is going

00:39:37.160 --> 00:39:39.190
to give you a larger customer base.

00:39:41.010 --> 00:39:42.200
How can you give it a beautiful icon?

00:39:42.200 --> 00:39:44.300
Well, briefly,
you can download the Aqua Icon

00:39:44.390 --> 00:39:48.610
Kit from our developer website,
or you can hire a professional design

00:39:48.610 --> 00:39:50.790
agency if you're not a graphic artist.

00:39:52.600 --> 00:39:55.950
So you've given your channel an identity,
but it still does what

00:39:55.950 --> 00:39:58.020
our default channel does.

00:39:58.030 --> 00:40:01.110
So enhance the starter
code to meet your needs.

00:40:01.400 --> 00:40:03.980
Back to the diagram that
Wayne was using earlier,

00:40:04.020 --> 00:40:07.840
channels consist of interface, triggers,
and services, at least from a

00:40:07.870 --> 00:40:09.540
developer's point of view.

00:40:09.540 --> 00:40:11.390
That's the stuff that you need
to worry about customizing.

00:40:11.400 --> 00:40:14.400
First, we're going to talk about
customizing the interface.

00:40:14.400 --> 00:40:16.400
As Wayne mentioned,
the interface is designed

00:40:16.400 --> 00:40:17.400
with Interface Builder.

00:40:17.400 --> 00:40:21.380
It's the same as a regular nib used in
any other kind of app on our platform.

00:40:21.400 --> 00:40:23.400
What's the point of the interface?

00:40:23.400 --> 00:40:25.400
Well, you display a pretty
picture to your users,

00:40:25.400 --> 00:40:29.680
but also you need to set up data
in the interface to connect your

00:40:29.710 --> 00:40:33.400
triggers so that when your user
interacts with your channel,

00:40:33.790 --> 00:40:37.810
something happens to execute
a search out onto the web.

00:40:38.700 --> 00:40:43.500
So here I've opened up channel.nib,
which is the default nib that comes as a

00:40:43.560 --> 00:40:48.590
result of creating the Sherlock channel
in the project template in Xcode.

00:40:48.690 --> 00:40:52.270
And I've clicked on the search button,
and now I've gotten info about

00:40:52.270 --> 00:40:56.040
it with the project inspector,
or the nib inspector, rather.

00:40:56.040 --> 00:40:58.890
So as Wayne mentioned earlier, again,
you can assign these Sherlock names

00:40:58.890 --> 00:41:02.680
or Sherlock IDs to UI elements,
and this is where you do it.

00:41:02.760 --> 00:41:05.520
Choose the Sherlock item
from the pop-up there,

00:41:05.550 --> 00:41:10.180
and then your main view
has its own identifier,

00:41:10.180 --> 00:41:11.710
and then you can identify the button.

00:41:11.720 --> 00:41:15.840
So here I've named it
Internet.SearchButton.

00:41:18.800 --> 00:41:21.250
This is going to be useful
to us in my next example.

00:41:21.310 --> 00:41:23.570
So, let's move on.

00:41:23.600 --> 00:41:26.860
Triggers are executed when a value
for a data store path changes or

00:41:26.860 --> 00:41:29.200
when the data store path is notified.

00:41:29.330 --> 00:41:32.780
So, you can programmatically just
sort of touch a data store path

00:41:32.820 --> 00:41:36.150
inside of a trigger and that can
cause the trigger to execute,

00:41:36.160 --> 00:41:38.040
another trigger to execute.

00:41:38.040 --> 00:41:39.870
Triggers tend to use JavaScript.

00:41:40.010 --> 00:41:40.300
Why?

00:41:40.300 --> 00:41:42.950
Because JavaScript is going to
execute in a linear and more

00:41:42.980 --> 00:41:45.430
deterministic fashion than XQuery.

00:41:45.540 --> 00:41:47.710
If you're familiar with channel
development at all or you've

00:41:47.810 --> 00:41:51.780
looked at any of our sample stuff,
in XQuery, you can return a dictionary,

00:41:51.780 --> 00:41:52.270
right?

00:41:52.330 --> 00:41:56.600
And the keys can be data store paths and
you can be setting values to those paths.

00:41:56.660 --> 00:41:58.760
But there's no guarantee
that if the dictionary has,

00:41:58.760 --> 00:42:01.450
say, four items in it,
they're going to return in that order.

00:42:01.450 --> 00:42:03.650
So, sometimes order is important,
so it's better to use

00:42:03.730 --> 00:42:06.470
JavaScript and datastore.set.

00:42:07.310 --> 00:42:10.330
So here's an example of a trigger,
and I'm going to whiz past the screen

00:42:10.520 --> 00:42:13.910
because you probably can't read it,
but triggers tend to live in

00:42:13.930 --> 00:42:15.960
a file called channel.xml.

00:42:16.220 --> 00:42:17.820
And they look something like this.

00:42:17.820 --> 00:42:22.210
So think back to that inspector where
we set internet.searchbutton.action

00:42:22.520 --> 00:42:27.520
is one of the default
datastore paths for NSButtons.

00:42:27.520 --> 00:42:30.870
You're going to want to check
out our documentation on the web,

00:42:30.960 --> 00:42:34.180
the inside Mac-like documentation.

00:42:34.180 --> 00:42:37.930
All of the default datastore
paths for any particular kind

00:42:37.930 --> 00:42:41.920
of object are listed there,
including NSButton actions.

00:42:41.920 --> 00:42:44.520
So briefly,
what this trigger is doing is using

00:42:44.520 --> 00:42:49.550
DatastoreSet to set the results table to
a particular -- it's setting it to null,

00:42:49.600 --> 00:42:50.740
to empty it out.

00:42:50.800 --> 00:42:53.520
It's turning on the network
arrows via another default path,

00:42:53.520 --> 00:42:56.880
.animating,
and then it's kicking off a search

00:42:56.880 --> 00:43:02.150
by notifying or touching another
datastore path to perform the search.

00:43:03.810 --> 00:43:05.510
Okay, services.

00:43:05.550 --> 00:43:08.780
You want to perform your search,
you want to do this in a service.

00:43:08.930 --> 00:43:13.600
So that next data store path will
probably execute a search service.

00:43:13.600 --> 00:43:15.240
Services are called by triggers.

00:43:15.240 --> 00:43:16.930
They encapsulate data
source transactions,

00:43:16.930 --> 00:43:18.020
as Wayne was mentioning.

00:43:18.020 --> 00:43:22.060
We find that this makes it easier
to maintain a channel because

00:43:22.060 --> 00:43:25.470
it's much more likely that your
service is going to need periodic

00:43:25.470 --> 00:43:27.170
maintenance when the web changes.

00:43:27.220 --> 00:43:30.650
So to isolate that from your
channel trigger code means

00:43:30.650 --> 00:43:33.860
that when you need to change to
accommodate a change to a website,

00:43:33.860 --> 00:43:36.810
you're only changing your services file,
and you don't need to upload

00:43:36.890 --> 00:43:38.570
your whole channel file again.

00:43:38.890 --> 00:43:43.780
They tend to use XQuery because
it's a great XML parsing mechanism.

00:43:43.790 --> 00:43:47.450
So again, you can't really see this,
but SOAP.xml is actually a

00:43:47.460 --> 00:43:51.370
services file that we ship today,
and we use it ourselves

00:43:51.420 --> 00:43:53.140
in our shipping channels.

00:43:53.140 --> 00:43:56.300
And basically this is just a definition
of a function called SOAP query.

00:43:56.300 --> 00:43:58.180
It takes a few parameters.

00:43:58.230 --> 00:44:01.170
It's using the dictionary
call to set up HTTP headers,

00:44:01.200 --> 00:44:04.540
and then it's doing a post
with the headers and asking for

00:44:04.540 --> 00:44:07.760
the data back from that post,
returning it.

00:44:07.760 --> 00:44:10.410
Pretty simple to execute a SOAP query.

00:44:11.350 --> 00:44:15.290
So, I've gone running through how
you can make your channel.

00:44:15.420 --> 00:44:17.830
You've given it an identity,
you've customized it to talk

00:44:17.930 --> 00:44:20.890
to your web service and return
your results to your users,

00:44:21.030 --> 00:44:23.500
and ideally, it would just work fine.

00:44:23.650 --> 00:44:24.830
But it probably doesn't.

00:44:24.990 --> 00:44:28.490
And if the web changes, as it often does,
and your service changes,

00:44:28.490 --> 00:44:30.140
you might need to debug it.

00:44:31.600 --> 00:44:33.980
Debugging in channels is a
little different than debugging

00:44:33.980 --> 00:44:36.180
a Cocoa app or a Carbon app,
and so you need to

00:44:36.270 --> 00:44:37.400
learn a few new tricks.

00:44:37.460 --> 00:44:40.360
First, you need to make liberal use of
message and debug statements,

00:44:40.410 --> 00:44:43.510
which are sort of like printf,
but message is for XQuery and

00:44:43.630 --> 00:44:45.420
debug is for JavaScript.

00:44:45.760 --> 00:44:48.650
More importantly, I think,
is liberal use of the XQuery and

00:44:48.830 --> 00:44:52.150
JavaScript channels during
your channel development phase.

00:44:52.220 --> 00:44:53.700
I'll explain why in a bit.

00:44:53.700 --> 00:44:56.760
Finally, there's the enhanced debug menu,
which Wayne mentioned.

00:44:56.760 --> 00:45:04.380
We've had a debug menu all along,
but we've added a lot more

00:45:04.380 --> 00:45:04.380
interesting stuff to it in Panther,
a lot more useful stuff for you.

00:45:04.930 --> 00:45:06.400
First, message and debug.

00:45:06.570 --> 00:45:08.560
Again, message is used in XQuery code.

00:45:08.690 --> 00:45:10.820
Basically,
this little sample is getting the

00:45:10.870 --> 00:45:13.200
HTML down from Apple's website.

00:45:13.300 --> 00:45:14.800
Then it's logging it out.

00:45:14.800 --> 00:45:17.950
If you execute message statements,
you will find that they -- if

00:45:17.990 --> 00:45:20.470
you're running Sherlock from
within Project Builder,

00:45:20.470 --> 00:45:23.050
or rather Xcode,
as we are in this example,

00:45:23.050 --> 00:45:26.800
you'll find these message
statements in its console.

00:45:26.930 --> 00:45:29.730
But if you're just running
Sherlock standalone without Xcode,

00:45:29.730 --> 00:45:32.800
you're going to want to look in
console app for these messages.

00:45:32.800 --> 00:45:36.400
So it's logging out the HTML from
the site and then continuing

00:45:36.400 --> 00:45:39.800
along and returning what it
wanted to return from the service.

00:45:40.200 --> 00:45:41.730
Similarly, you can use debug.

00:45:41.840 --> 00:45:45.010
I've basically done the same thing here,
just making use of the XML query

00:45:45.410 --> 00:45:48.580
JavaScript object and calling document,
getting the data,

00:45:48.580 --> 00:45:51.770
debugging it out to the console,
and returning it.

00:45:53.620 --> 00:45:56.990
More importantly, though, as I said,
XQuery and JavaScript channels.

00:45:57.100 --> 00:45:58.850
You didn't see the
JavaScript channel earlier,

00:45:58.850 --> 00:46:00.800
but it's the same concept
as the XQuery channel,

00:46:00.800 --> 00:46:02.490
which we did demonstrate.

00:46:02.620 --> 00:46:03.500
Why do you want to use these?

00:46:03.500 --> 00:46:07.620
You really want to unit test blocks of
code as you're developing your channel,

00:46:07.620 --> 00:46:10.150
so that when you paste it
into your channel file,

00:46:10.150 --> 00:46:11.480
you just know it works.

00:46:11.480 --> 00:46:13.310
A caveat, though.

00:46:13.500 --> 00:46:16.660
In your channel file,
because it's an XML file,

00:46:16.660 --> 00:46:19.460
you need to escape special characters.

00:46:19.490 --> 00:46:22.550
So, you know,
a less than symbol would have

00:46:22.550 --> 00:46:26.500
to be ampersand LT colon to
work in your channel file.

00:46:26.500 --> 00:46:29.320
To work in the XQuery channel,
you don't want to escape it.

00:46:29.340 --> 00:46:30.500
It's not an XML file.

00:46:30.500 --> 00:46:33.800
So you just need to sort of global
search and replace ampersand

00:46:33.800 --> 00:46:35.450
LT for a real less than sign.

00:46:35.520 --> 00:46:37.270
Make sure you do that.

00:46:38.330 --> 00:46:40.440
So, a little picture of what these do.

00:46:40.440 --> 00:46:43.850
Here I've got an XQuery channel
picture up there.

00:46:43.970 --> 00:46:46.270
I'm getting, again,
the data from Apple.com.

00:46:46.380 --> 00:46:50.540
I've got a little XQuery executing
to grab all the image tags,

00:46:50.610 --> 00:46:52.870
and then I'm asking for
their source attributes.

00:46:52.980 --> 00:46:56.490
And when you hit run,
all the source attributes get

00:46:56.580 --> 00:46:58.740
put out in the results area.

00:46:59.560 --> 00:47:01.050
Similarly, the JavaScript channel.

00:47:01.100 --> 00:47:02.700
I couldn't really think
of a good example,

00:47:02.700 --> 00:47:05.640
so I'm just checking that
5 plus 16 still equals 21.

00:47:05.840 --> 00:47:07.810
And in fact, it did.

00:47:09.460 --> 00:47:10.930
Finally, the debug menu.

00:47:10.970 --> 00:47:13.840
So the way you turn it on,
although someone's edited

00:47:13.840 --> 00:47:16.400
my slide to capitalize D,
and you don't want to do that,

00:47:16.540 --> 00:47:18.280
you want to turn it on
with a defaults command,

00:47:18.280 --> 00:47:22.270
which is executed in terminal, defaults,
write, com.apple.sherlock,

00:47:22.380 --> 00:47:23.510
Sherlock debug, 1.

00:47:23.740 --> 00:47:25.940
The next time you launch Sherlock,
it's going to come up

00:47:25.940 --> 00:47:27.000
with the debug menu.

00:47:27.070 --> 00:47:29.340
And there are a number
of things we've added.

00:47:29.380 --> 00:47:32.400
You can turn on and off
different levels of logging.

00:47:32.440 --> 00:47:35.820
You can turn off HTTP caching,
which is pretty excellent as

00:47:35.820 --> 00:47:38.120
you're developing a channel,
because you're making

00:47:38.150 --> 00:47:39.220
changes all the time.

00:47:39.320 --> 00:47:41.750
So you'd rather just have
the fresh copy right away,

00:47:41.790 --> 00:47:43.460
as soon as you've made a change.

00:47:43.500 --> 00:47:47.580
You can look at the data store
and also tickle the data store.

00:47:47.580 --> 00:47:49.820
You can change its
values or notify things.

00:47:50.020 --> 00:47:51.680
You can look at your NSVU hierarchy.

00:47:51.700 --> 00:47:53.810
All kinds of good stuff in there.

00:47:55.110 --> 00:47:59.000
All right, so hopefully now you've got
the tools to debug your channel

00:47:59.000 --> 00:48:01.590
and you're ready to deploy it.

00:48:02.570 --> 00:48:04.850
So there are a few things to
think about when you're deploying.

00:48:04.970 --> 00:48:08.250
First is, do you want to use
subscriptions and checkpoints?

00:48:08.360 --> 00:48:10.980
Once you've decided all that,
you've got to figure out how to FTP your

00:48:10.980 --> 00:48:13.490
files to the web server of your choice,
and then you just submit

00:48:13.490 --> 00:48:15.230
your channel to Apple,
and it shows up in our

00:48:15.230 --> 00:48:16.570
other channels view.

00:48:18.100 --> 00:48:20.940
This is kind of a wordy slide,
and I'm going to gloss over it.

00:48:20.990 --> 00:48:21.760
Subscriptions and checkpoints.

00:48:21.760 --> 00:48:26.320
So the subscription file lists
channels you're deploying.

00:48:26.370 --> 00:48:29.140
It's useful when you ship
multiple channels like Apple does.

00:48:29.270 --> 00:48:34.170
So we use subscriptions for,
for instance, our Apple channels,

00:48:34.170 --> 00:48:38.570
our other channels,
which are the third-party channels,

00:48:38.610 --> 00:48:41.350
our channel development tools,
all of those things that show

00:48:41.350 --> 00:48:41.350
up in the left-hand column of
the channel management view.

00:48:42.450 --> 00:48:45.940
They will increase your channel's
visibility if you choose to use a

00:48:45.940 --> 00:48:49.610
subscription for that very reason,
that they'll show up as a separate

00:48:49.610 --> 00:48:53.580
folder or collection on that left-hand
side of the channel management view.

00:48:53.860 --> 00:48:56.270
And they're also very
convenient for your user,

00:48:56.480 --> 00:48:59.000
because if you're shipping
multiple channels,

00:48:59.090 --> 00:49:03.440
if you want to deploy them one by one,
the user has to click on a

00:49:03.440 --> 00:49:06.500
URL each time to add a channel,
one at a time.

00:49:06.620 --> 00:49:08.920
So just ship them all at
once in a subscription,

00:49:08.920 --> 00:49:11.160
and they just have to
add the subscription,

00:49:11.160 --> 00:49:12.120
they're done.

00:49:13.090 --> 00:49:14.300
Why else are they useful?

00:49:14.380 --> 00:49:17.740
Well, subscriptions allow you to
control who sees your channels.

00:49:17.940 --> 00:49:21.060
In a subscription file,
you can require specific

00:49:21.120 --> 00:49:25.010
Sherlock versions or require
a specific geographic region,

00:49:25.010 --> 00:49:26.180
for instance.

00:49:26.290 --> 00:49:29.020
Okay, now that you've decided to
use a subscription file,

00:49:29.070 --> 00:49:32.700
perhaps, you need to wonder as to whether
you want to use checkpoints.

00:49:32.700 --> 00:49:33.800
What are checkpoints?

00:49:33.990 --> 00:49:36.030
Basically,
you can designate certain files in

00:49:36.030 --> 00:49:39.730
your channel hierarchy as a checkpoint,
and it helps Sherlock to

00:49:39.730 --> 00:49:41.170
know what's changed.

00:49:41.200 --> 00:49:44.540
So if you change the mod
date on your web server,

00:49:44.660 --> 00:49:48.610
once you've deployed,
of a file that is a checkpoint,

00:49:48.790 --> 00:49:53.100
Sherlock's going to know that it
should take a look at everything

00:49:53.100 --> 00:49:54.230
below that and possibly update it.

00:49:56.950 --> 00:49:59.940
All right, so you're using a
subscription or you're not,

00:50:00.030 --> 00:50:01.220
you're using checkpoints or you're not.

00:50:01.340 --> 00:50:04.620
Either way, you're FTPing your files
to a public web server.

00:50:04.900 --> 00:50:07.140
You could deploy on your
company's web server,

00:50:07.140 --> 00:50:10.100
you could deploy on .Mac if
you've got a .Mac account,

00:50:10.230 --> 00:50:11.840
you could deploy on any HTTP server.

00:50:11.990 --> 00:50:18.010
If you're using a channel for
internal purposes at your company,

00:50:18.010 --> 00:50:18.010
you can deploy on something like that.

00:50:20.100 --> 00:50:22.740
But if the channel is external,
make sure you submit

00:50:22.740 --> 00:50:24.020
your channel to Apple.

00:50:24.020 --> 00:50:27.400
We can't stress enough how much this is
going to raise your channel's visibility.

00:50:27.410 --> 00:50:30.140
So in that debug menu,
use the Submit Channel menu item,

00:50:30.140 --> 00:50:33.530
and your channel will appear in
the other channels collection.

00:50:37.020 --> 00:50:39.480
So hopefully,
I should note at this point actually

00:50:39.480 --> 00:50:43.060
that the reason I'm glossing over
the details of some of these things,

00:50:43.060 --> 00:50:45.410
like how do you create a
subscription file and what

00:50:45.410 --> 00:50:49.070
does a checkpoint look like,
it's because it is actually pretty

00:50:49.070 --> 00:50:51.500
well covered in our documentation.

00:50:51.500 --> 00:50:54.480
And so if you take a look at the
inside Mac-like documentation

00:50:54.620 --> 00:50:58.260
out on developer.apple.com,
also you want to take a look definitely

00:50:58.340 --> 00:51:02.200
at the release notes on your CDs that you
got in developer documentation release

00:51:02.200 --> 00:51:06.200
notes because we took great care to
update them with all the new information,

00:51:06.240 --> 00:51:08.770
which is what I'm going
to talk about right now.

00:51:09.090 --> 00:51:11.920
So what's new for
Sherlock Channel developers in Panther?

00:51:12.060 --> 00:51:14.320
We've got some user
interface enhancements.

00:51:14.350 --> 00:51:18.710
We've got inter-application communication
abilities that weren't there before.

00:51:18.860 --> 00:51:21.240
We've added some support
for Address Book.

00:51:21.430 --> 00:51:25.250
We've added per-channel help
support for Help Viewer.

00:51:25.600 --> 00:51:28.460
And we've added some versioning
capabilities so that you can

00:51:28.460 --> 00:51:31.190
adopt all of these things safely.

00:51:32.810 --> 00:51:34.800
First off, the interface enhancements.

00:51:34.800 --> 00:51:37.120
In NS Table View,
we've changed it so that you

00:51:37.120 --> 00:51:41.440
can turn on type selection in
columns or in entire tables.

00:51:41.490 --> 00:51:45.040
You have more control over whether
users can delete rows or not.

00:51:45.040 --> 00:51:47.760
You can set the scroll
position of the table.

00:51:47.760 --> 00:51:50.460
You can have check boxes in table cells.

00:51:50.460 --> 00:51:54.110
And table sorting can be
done for you automatically.

00:51:55.660 --> 00:51:58.360
We've changed the NS Combo box, too.

00:51:58.360 --> 00:52:00.590
There,
we've changed it so that you can turn

00:52:00.590 --> 00:52:05.600
on text selection on first mouse down,
or you can turn that off.

00:52:05.760 --> 00:52:09.990
And you have just generally greater
control over the list behavior.

00:52:11.420 --> 00:52:14.800
The HTML view, of course,
is now using the fabulous WebKit,

00:52:14.870 --> 00:52:18.200
and that's going to add a lot
of capabilities if you want to

00:52:18.260 --> 00:52:20.700
display more complicated HTML.

00:52:20.700 --> 00:52:22.230
You can set the default car set.

00:52:22.430 --> 00:52:26.850
So let's say you've narrowed down a
chunk of HTML in one of your services,

00:52:27.000 --> 00:52:30.340
and in so doing, you've managed to strip
out the car set tag.

00:52:30.340 --> 00:52:35.010
You can just tell the web view that
every time you're displaying HTML,

00:52:35.060 --> 00:52:37.910
the default car set should be whatever.

00:52:38.220 --> 00:52:41.660
Finally,
you can turn on browsing within Sherlock.

00:52:41.660 --> 00:52:46.360
So links will be followed within
your HTML view versus if the user

00:52:46.360 --> 00:52:49.380
clicks on a link now in Jaguar,
rather.

00:52:49.540 --> 00:52:53.960
If they click on a link,
it will definitely be sent out to

00:52:54.010 --> 00:52:57.100
the default handler for HTTP URLs.

00:52:57.250 --> 00:53:02.990
So you can actually just browse within
Sherlock now because the WebKit is

00:53:02.990 --> 00:53:02.990
powerful enough to handle that.

00:53:04.110 --> 00:53:05.700
Inter-application Communication.

00:53:05.740 --> 00:53:09.370
So, Sherlock is a playground,
and that makes it safe for users,

00:53:09.490 --> 00:53:11.890
and we think it's pretty
easy to develop for,

00:53:12.030 --> 00:53:14.290
but it's not the only app out there.

00:53:14.390 --> 00:53:17.400
So, maybe your channel wants to
talk with other applications.

00:53:17.550 --> 00:53:20.640
We've enabled this by using special URLs.

00:53:20.990 --> 00:53:26.400
So, there are address book URLs,
iCal and WebCal URLs to talk to iCal,

00:53:26.520 --> 00:53:30.300
and help URLs so that you can open
Help Viewer from within your channel.

00:53:30.470 --> 00:53:35.090
The way you would use these URLs is
you create one in your channel source,

00:53:35.100 --> 00:53:38.440
and then you send it to the
JavaScript system object

00:53:38.440 --> 00:53:40.540
with the open URL command.

00:53:40.630 --> 00:53:44.230
And if the URL's in there,
the system object will decide

00:53:44.230 --> 00:53:48.570
what the proper handler for that
scheme is via Launch Services,

00:53:48.710 --> 00:53:51.550
and the right application will be opened.

00:53:52.430 --> 00:53:53.900
Address Book Support.

00:53:54.000 --> 00:53:57.150
So, as you saw in the phonebook channel,
we've got combo boxes that do

00:53:57.230 --> 00:53:58.910
all kinds of neat completion.

00:53:59.110 --> 00:54:01.550
They complete city-states,
they complete on titles in

00:54:01.550 --> 00:54:03.870
the user's address book,
they'll even complete,

00:54:03.870 --> 00:54:06.470
you didn't see this,
but they will complete on addresses

00:54:06.470 --> 00:54:07.970
in the user's address book.

00:54:08.120 --> 00:54:11.200
So, that's done in the
Sherlock address combo box.

00:54:11.200 --> 00:54:14.760
We've packaged it up so that you can
just drag it in Interface Builder,

00:54:14.760 --> 00:54:17.040
drag a combo box in,
change the custom type to

00:54:17.040 --> 00:54:20.460
Sherlock address combo box,
and you've got the same functionality

00:54:20.460 --> 00:54:21.900
we have in the phonebook channel.

00:54:22.200 --> 00:54:24.480
Also,
there's a JavaScript address book object,

00:54:24.580 --> 00:54:26.660
and through that object,
you can add things to

00:54:26.770 --> 00:54:29.060
the user's address book,
and you can search the

00:54:29.110 --> 00:54:30.480
user's address book.

00:54:31.780 --> 00:54:33.080
Per-channel help.

00:54:33.120 --> 00:54:34.940
It's really good user experience.

00:54:34.940 --> 00:54:39.700
It's basic Aqua savvy to
provide help for your software

00:54:39.700 --> 00:54:41.440
and to do so in Help Viewer.

00:54:41.450 --> 00:54:43.760
And so we've enabled that in Panther.

00:54:43.830 --> 00:54:46.480
Basically,
you tell us where your help file is,

00:54:46.550 --> 00:54:48.260
and we take care of the rest.

00:54:48.260 --> 00:54:54.860
We add an item to the help menu
that points to your channel's help.

00:54:54.860 --> 00:54:54.860
We open it when the
user chooses that item.

00:54:56.290 --> 00:54:59.110
You're going to want to take advantage
of versioning if you take advantage

00:54:59.110 --> 00:55:04.190
of any of these new functionality,
of any of this new functionality, though.

00:55:04.240 --> 00:55:07.650
If you're familiar with the concept
of Gestalts or anything like that,

00:55:07.740 --> 00:55:11.470
you can check to see that something
is there before you use it or you can

00:55:11.470 --> 00:55:15.290
check to see that Sherlock itself is
a particular version before you use

00:55:15.370 --> 00:55:20.220
something and that's done by checking for
the existence of new JavaScript objects.

00:55:20.220 --> 00:55:24.030
You can call channel version from X query
and that will give you back the version

00:55:24.030 --> 00:55:30.120
of Sherlock and you can use version or
max version attributes on triggers or

00:55:30.140 --> 00:55:35.590
services or subscriptions and again,
this is all covered in the documentation

00:55:35.590 --> 00:55:37.990
so I won't go into the exact details.

00:55:39.350 --> 00:55:42.520
Very briefly,
because I know I'm running out of time,

00:55:42.630 --> 00:55:46.210
advanced topics, three of them,
the most important in my opinion.

00:55:46.380 --> 00:55:49.600
Localized resources, printing,
and performance tips.

00:55:49.710 --> 00:55:52.510
If you take advantage of any
of these three advanced things,

00:55:52.510 --> 00:55:56.030
you're going to provide your user
with a much better user experience.

00:55:56.580 --> 00:55:57.650
Localized resources.

00:55:57.740 --> 00:56:00.540
So, not everybody in the world
speaks the language that you're

00:56:00.540 --> 00:56:01.610
developing your channel in.

00:56:01.790 --> 00:56:05.870
And if you have the ability to localize
your channel into other languages,

00:56:05.870 --> 00:56:07.740
Sherlock will let you do that.

00:56:07.820 --> 00:56:11.180
Basically, you set a localized base URL,
which tells Sherlock where to

00:56:11.180 --> 00:56:13.450
look for your localized resources.

00:56:13.750 --> 00:56:16.770
And then you can access localized
resources from your code as well.

00:56:16.880 --> 00:56:18.900
So,
if you're setting a string dynamically,

00:56:18.950 --> 00:56:22.550
so let's say you're setting a
label from within a trigger with a

00:56:22.620 --> 00:56:27.300
datastore.set to the label's path,
you would call localized resource,

00:56:27.350 --> 00:56:29.440
get the right string, and then set it.

00:56:29.500 --> 00:56:32.930
You can also call localized
URL to get a URL that points

00:56:32.990 --> 00:56:35.410
into the right Elproj directory.

00:56:36.700 --> 00:56:39.460
Printing - channels
can be kind of complex.

00:56:39.460 --> 00:56:41.810
There's a lot of information in there,
particularly because you're

00:56:41.810 --> 00:56:44.980
aggregating information from
multiple websites or you're trying to

00:56:44.980 --> 00:56:49.080
do better than a web page could do,
and so you're showing a lot of stuff.

00:56:49.080 --> 00:56:50.480
I mean,
let's look at the phone book channel.

00:56:50.480 --> 00:56:52.140
We've got tables of results.

00:56:52.140 --> 00:56:53.580
We've got driving directions.

00:56:53.580 --> 00:56:55.880
We've got a big map.

00:56:55.880 --> 00:56:58.440
Sometimes that looks great in Sherlock,
but it doesn't look great when you print

00:56:58.440 --> 00:57:02.990
it out on an 8 1/2 by 11 piece of paper,
and so I can't help but stress

00:57:03.210 --> 00:57:05.850
that if you print it out and
it doesn't look too good,

00:57:05.850 --> 00:57:08.320
your user is really not
going to appreciate that.

00:57:08.320 --> 00:57:10.140
Create a custom print view.

00:57:10.140 --> 00:57:12.200
You just add a new view to your nib.

00:57:12.200 --> 00:57:16.020
You reorganize your UI elements so
that it will look good for 8 1/2 by 11,

00:57:16.170 --> 00:57:18.660
and then if you do that,
be sure to set your channel's main

00:57:18.660 --> 00:57:22.420
view identifier data store path so
that as Sherlock loads your channel,

00:57:22.420 --> 00:57:26.160
it knows that one view is actually
the view to show in Sherlock and

00:57:26.160 --> 00:57:28.600
the other view is your print view.

00:57:29.760 --> 00:57:32.880
Performance tips: Nobody likes to use a
channel that's slow,

00:57:32.930 --> 00:57:34.830
and we've been working
to make ours faster,

00:57:34.830 --> 00:57:37.760
and I want to share with you a little
bit of what we've learned about that.

00:57:37.890 --> 00:57:39.570
Avoid initialize bloat.

00:57:39.660 --> 00:57:41.960
Initialize is a special chunk
of code that all executes

00:57:42.010 --> 00:57:44.400
before your channel shows up.

00:57:44.520 --> 00:57:47.350
There's a lot of stuff that we were
doing in initialize that did not have

00:57:47.350 --> 00:57:49.160
to be done before the channel appeared.

00:57:49.160 --> 00:57:52.840
If you are doing stuff that doesn't
have to be done in initialize,

00:57:52.840 --> 00:57:54.550
move it to a later trigger.

00:57:54.720 --> 00:57:56.980
Execute any given XPath only once.

00:57:57.060 --> 00:57:58.280
So let's take a little example.

00:57:58.280 --> 00:58:03.570
Let's say I download some HTML with the
document command and it's in a variable,

00:58:03.590 --> 00:58:04.500
$HTML.

00:58:04.500 --> 00:58:07.760
And I wanna get all the anchors
in that HTML and then I'm

00:58:07.760 --> 00:58:09.790
gonna need all of the anchors,
Ahrefs,

00:58:09.940 --> 00:58:12.700
and all of the text for those anchors.

00:58:12.760 --> 00:58:22.660
Well, I could say $HTML/A/text,
and then $HTML/A/@href.

00:58:23.330 --> 00:58:27.000
But since I'm doing //a twice,
and that might be expensive,

00:58:27.000 --> 00:58:29.450
why don't I save that in a variable?

00:58:29.720 --> 00:58:33.560
Next, favor cache update for
infrequently changed resources.

00:58:33.560 --> 00:58:37.030
We've made use of this ourselves,
and basically it's a flag that

00:58:37.030 --> 00:58:39.100
you can set on an HTTP request.

00:58:39.120 --> 00:58:42.360
And if you know a resource out on the
web isn't going to change very often,

00:58:42.370 --> 00:58:44.340
there's an image out there
that's pretty static,

00:58:44.540 --> 00:58:46.390
if you set that flag,
you're able to get the

00:58:46.520 --> 00:58:49.270
image from the cache first,
and then Sherlock will go check

00:58:49.330 --> 00:58:52.130
to see if it's changed and
pull it down in the background.

00:58:52.220 --> 00:58:55.790
So the next time you access it,
you'll have the new thing in the cache.

00:58:55.870 --> 00:58:58.970
Stream return data into the
view as it becomes available.

00:58:59.140 --> 00:59:01.440
Examples of where we do this
are the pictures channel

00:59:01.440 --> 00:59:03.120
and the internet channel.

00:59:03.180 --> 00:59:05.950
If you have some info first
and you're waiting for others,

00:59:05.950 --> 00:59:07.390
don't make your user wait.

00:59:07.510 --> 00:59:10.050
Splat it out into the view
and wait for your stuff,

00:59:10.050 --> 00:59:12.060
and then splat the next stuff out.

00:59:12.120 --> 00:59:14.780
Finally,
show cache data first and then refresh.

00:59:14.800 --> 00:59:19.150
Wayne mentioned this as a tactic for
having a good channel user interface.

00:59:19.160 --> 00:59:20.360
We do this in the movies channel.

00:59:20.460 --> 00:59:26.300
If you do a movie search and we get
your list of theaters and movies,

00:59:26.300 --> 00:59:29.730
we'll show that to the user again
the next time they launch and

00:59:29.730 --> 00:59:31.130
then update it in the background.

00:59:31.140 --> 00:59:37.660
So I'm going to invite Wayne back
up for a wrap-up for our session.

00:59:44.600 --> 00:59:49.960
Thank you, Jess.

00:59:49.960 --> 00:59:54.960
So in summary, Sherlock allows you to
deliver web services today.

00:59:54.960 --> 00:59:55.950
You can create them quickly.

00:59:56.030 --> 00:59:58.100
They're updatable on the web.

00:59:58.190 --> 01:00:02.180
They provide a native Aqua UI,
much like an application.

01:00:02.330 --> 01:00:09.340
But you can link to them directly from
the web or launch them from the dock.

01:00:09.340 --> 01:00:10.900
And in Panther,
they're built right into Sherlock.

01:00:12.590 --> 01:00:15.220
So for a roadmap,
now of course all of these

01:00:15.270 --> 01:00:19.960
sessions have already happened,
but for those of you watching on DVD,

01:00:19.960 --> 01:00:23.570
or if you'd like to get the DVDs,

01:00:23.820 --> 01:00:27.570
The Internet Technology Safari Overview
provides a high-level overview of

01:00:27.590 --> 01:00:32.590
the technologies used by Safari and,
of course, by Sherlock as well.

01:00:33.400 --> 01:00:37.780
The WebKit and the Foundation URL APIs.

01:00:37.780 --> 01:00:44.370
If you'd like to add
help to your channel,

01:00:44.370 --> 01:00:44.370
then you might be interested
in session 408 for the

01:00:44.370 --> 01:00:44.370
Apple Help updates and how-tos.

01:00:44.700 --> 01:00:48.350
The next one there is more
about Safari and web standards,

01:00:48.390 --> 01:00:51.690
which again is interesting
for HTML views and such.

01:00:51.690 --> 01:00:54.670
And then the session,
Internet Application Development:

01:00:54.730 --> 01:00:57.830
The New Frontier,
is an environment provided by

01:00:57.830 --> 01:01:04.350
Macromedia that aims to provide
Internet applications that may

01:01:04.390 --> 01:01:07.860
also be of interest if you're
doing a lot of graphics like you

01:01:07.860 --> 01:01:07.860
would in a Flash kind of context.

01:01:09.590 --> 01:01:13.770
And of course,
our friend John is the guy to contact

01:01:13.850 --> 01:01:18.710
if you'd like to ask for features
or any sort of thing like that.

01:01:21.820 --> 01:01:25.430
And for more information,
there's the Sherlock Developer web page,

01:01:25.430 --> 01:01:30.340
which is very easy to get to:
developer.apple.com/macos10/sherlock.

01:01:30.340 --> 01:01:31.720
It has all the information
you need there.

01:01:31.800 --> 01:01:34.800
There's a mailing list if
you'd like to ask questions.

01:01:34.800 --> 01:01:37.920
If you're in the midst of channel
development and you run into a problem

01:01:38.150 --> 01:01:40.800
you're not sure how to deal with,
please ask on the mailing list.

01:01:40.800 --> 01:01:43.640
We're more than happy to
answer questions there,

01:01:43.640 --> 01:01:46.800
or other developers will
also chime in and answer.

01:01:46.840 --> 01:01:50.250
Inside Mac OS X Sherlock Channels
is the documentation for how

01:01:50.310 --> 01:01:52.790
to create Sherlock Channels,
and that's up at the developer website.

01:01:52.800 --> 01:01:56.800
And it's also on your disk.

01:01:58.050 --> 01:02:01.180
And then of course the release
notes will tell you specifically

01:02:01.260 --> 01:02:05.400
new features that have been added
in various releases along the way,

01:02:05.440 --> 01:02:06.100
including Panther.

01:02:08.160 --> 01:02:10.750
If you'd like to learn more
about the JavaScript language,

01:02:10.750 --> 01:02:13.140
there are lots and lots
of references out there.

01:02:13.140 --> 01:02:17.810
The sort of main standard
reference is out on the ECMA site,

01:02:17.860 --> 01:02:18.740
and there's the URL there.

01:02:18.740 --> 01:02:21.630
But of course,
there are many books out on JavaScript.

01:02:21.730 --> 01:02:26.700
XQuery is much newer, of course,
and it's not yet a final standard.

01:02:26.700 --> 01:02:29.060
And so there really aren't
as many references out there.

01:02:29.160 --> 01:02:33.100
But the main reference
is at the W3C site.

01:02:33.110 --> 01:02:35.640
And this is both the language and
then the functions it provides.