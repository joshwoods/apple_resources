WEBVTT

00:00:26.070 --> 00:00:30.140
So in this session today,
we're going to cover some of the

00:00:30.140 --> 00:00:31.760
new things in QuickTime's APIs.

00:00:31.760 --> 00:00:35.100
We're also going to talk
about the basics of QuickTime,

00:00:35.100 --> 00:00:37.150
what you can do with
QuickTime in your application.

00:00:37.440 --> 00:00:40.920
As you already know,
QuickTime offers for your application

00:00:41.300 --> 00:00:45.010
the ability to play back media,
the ability to capture media from the

00:00:45.010 --> 00:00:47.270
analog world or from the digital world.

00:00:47.420 --> 00:00:51.190
It offers you the ability to create
content inside of your applications,

00:00:51.190 --> 00:00:54.870
even to create content from your
documents that you might not consider

00:00:54.950 --> 00:00:58.230
as having anything to do with
video or anything to do with audio,

00:00:58.230 --> 00:01:00.540
and we'll show you some of that today.

00:01:00.540 --> 00:01:03.300
You have the ability, of course,
to edit already created

00:01:03.300 --> 00:01:04.940
content in your applications.

00:01:04.960 --> 00:01:07.420
And finally,
QuickTime offers you the ability to

00:01:07.420 --> 00:01:07.420
create content from your applications.

00:01:07.420 --> 00:01:10.540
It also offers you an ability to
deliver media out to the world.

00:01:10.720 --> 00:01:14.360
Did we mention something about the 100
million downloads of QuickTime 6 today?

00:01:14.360 --> 00:01:17.300
Also the fact that our
plug-in for browsers is well

00:01:17.300 --> 00:01:19.060
integrated with browsers.

00:01:19.060 --> 00:01:22.430
All the browsers that we support,
it's about this long.

00:01:22.440 --> 00:01:26.140
We have the ability to deliver
media via people's .Mac accounts.

00:01:26.200 --> 00:01:29.210
We have the ability to stream media,
and there was something about 100

00:01:29.290 --> 00:01:32.100
million downloads of QuickTime 6
since it was first introduced as well,

00:01:32.180 --> 00:01:33.620
I think I might have mentioned.

00:01:33.620 --> 00:01:37.400
So anyway, you have no problem delivering
QuickTime media to the world.

00:01:37.400 --> 00:01:38.760
world.

00:01:39.110 --> 00:01:42.120
One of the topics we're going
to cover today is QuickTime's

00:01:42.380 --> 00:01:43.450
platform citizenship.

00:01:43.560 --> 00:01:44.090
What does this mean?

00:01:44.100 --> 00:01:47.400
As you may know,
QuickTime's native platform

00:01:47.400 --> 00:01:49.160
was the classic Mac OS.

00:01:49.160 --> 00:01:52.140
It originally shipped, I think,
at the beginning of 1991.

00:01:52.140 --> 00:01:53.650
Someone will correct me if I'm wrong.

00:01:53.660 --> 00:01:57.360
And at that time,
the current Mac OS was System 7.

00:01:57.730 --> 00:02:00.680
We ran on System 6 at that time as well.

00:02:00.960 --> 00:02:04.150
And some things have changed, one or two,
in the ensuing years.

00:02:04.190 --> 00:02:07.650
We're going to talk here at this
session about how good a citizen

00:02:07.760 --> 00:02:10.050
QuickTime is on today's platforms.

00:02:10.060 --> 00:02:11.960
And as I mentioned,
we're going to talk about

00:02:12.090 --> 00:02:13.220
some of what's new here.

00:02:13.240 --> 00:02:16.380
What you will learn in this session,
well, you've already learned what you can

00:02:16.480 --> 00:02:19.490
do in your application with QuickTime,
so if that's the only reason you came,

00:02:19.490 --> 00:02:20.510
thank you very much.

00:02:20.660 --> 00:02:22.480
There are other sessions
next door and down the hall.

00:02:22.480 --> 00:02:26.260
Also, we're going to talk about media
facilities for the modern OS.

00:02:26.360 --> 00:02:28.920
I have no idea what that means,
but it's just a way to get you

00:02:28.920 --> 00:02:30.380
to stay instead of leaving.

00:02:32.030 --> 00:02:34.940
Also we're going to talk about
what has changed in the OS and

00:02:34.940 --> 00:02:36.500
how QuickTime is changing with it.

00:02:36.630 --> 00:02:40.600
We're going to cover some answers to
common questions during this session.

00:02:40.770 --> 00:02:43.650
Here, right here,
from this stage you will learn how

00:02:43.650 --> 00:02:47.480
to open a movie giving a path to
a file in the form of a CFString.

00:02:47.750 --> 00:02:50.400
What if I have a CFURL that
points to some media?

00:02:50.400 --> 00:02:53.000
How do I open a movie
that I can play from that?

00:02:53.140 --> 00:02:56.530
Well, what if I'm trying to draw to a
CG context and I have a QuickTime movie?

00:02:56.810 --> 00:02:57.550
How do I do that?

00:02:57.910 --> 00:03:01.010
Am I building up the tension
for you appropriately?

00:03:02.010 --> 00:03:03.560
and other questions we're
going to cover as well.

00:03:03.560 --> 00:03:06.880
If we don't answer your specific
question in this session,

00:03:06.910 --> 00:03:09.350
fire me and come to the QuickTime lab.

00:03:09.350 --> 00:03:12.180
It's in Sacramento,
which is downstairs near the cafe.

00:03:12.180 --> 00:03:14.980
It's not up Highway 80.

00:03:16.360 --> 00:03:18.580
Okay, also in this session,
we're going to cover the use

00:03:18.670 --> 00:03:21.460
of QuickTime with a number
of different frameworks,

00:03:21.460 --> 00:03:25.160
technological frameworks that you may
be using to develop your applications.

00:03:25.160 --> 00:03:27.540
We'll cover QuickTime in Carbon,
of course.

00:03:27.540 --> 00:03:30.320
QuickTime is, in fact,
a Carbon API itself,

00:03:30.320 --> 00:03:31.840
so that's an easy one.

00:03:31.840 --> 00:03:34.390
We're going to cover
QuickTime with Cocoa,

00:03:34.480 --> 00:03:39.250
QuickTime for Java, and also, by the way,
many of the APIs, if not all of them,

00:03:39.340 --> 00:03:42.980
I can't specify,
are available for Win32 as well.

00:03:43.080 --> 00:03:45.690
So if you're building
applications using Win32 APIs,

00:03:45.690 --> 00:03:47.630
we have solutions for you for media.

00:03:50.300 --> 00:03:50.580
Okay.

00:03:50.580 --> 00:03:53.920
So you've seen already at the
show a number of prime examples

00:03:54.350 --> 00:03:58.080
of what QuickTime can do in
applications and you probably use

00:03:58.080 --> 00:04:00.200
some of these in your own work.

00:04:00.400 --> 00:04:02.490
We have some obvious ones on this list.

00:04:02.590 --> 00:04:06.700
iMovie, Final Cut Pro,
Final Cut Express create video.

00:04:07.120 --> 00:04:11.570
So you would fully expect that some
use of QuickTime is going on under the

00:04:11.690 --> 00:04:16.710
covers and I can confirm without a doubt
that it is rumored that there is some

00:04:16.710 --> 00:04:18.290
use of QuickTime in those applications.

00:04:18.300 --> 00:04:21.870
But QuickTime is also used in
other applications that you might

00:04:21.920 --> 00:04:24.300
not immediately connect it with.

00:04:24.300 --> 00:04:27.930
And I have a list of some of
them here and in fact I'll

00:04:27.930 --> 00:04:30.300
show you one or two right now.

00:04:30.300 --> 00:04:32.430
If I could have demo one up.

00:04:33.730 --> 00:04:34.340
I like this better.

00:04:34.340 --> 00:04:37.750
This is not the long walk
that we have downstairs.

00:04:37.840 --> 00:04:40.220
Okay, I'll decide later.

00:04:44.020 --> 00:04:45.120
So I have iPhoto here.

00:04:45.190 --> 00:04:47.650
iPhoto is an application
that works with still images.

00:04:47.660 --> 00:04:50.840
Of course, it works with your digital
camera seamlessly so that you can

00:04:50.840 --> 00:04:52.600
import images from your camera.

00:04:52.670 --> 00:04:53.660
You can edit them.

00:04:53.830 --> 00:04:56.300
You can make different
things out of iPhoto.

00:04:56.300 --> 00:04:58.000
Photo albums, slideshows.

00:04:58.000 --> 00:05:00.720
QuickTime is actually used
quite extensively in this

00:05:00.780 --> 00:05:04.080
application for importing images,
for reading image formats,

00:05:04.080 --> 00:05:05.640
for creating thumbnails.

00:05:05.640 --> 00:05:08.390
But there's some other interesting
things going on here as well.

00:05:08.390 --> 00:05:13.680
iPhoto is capable of creating digital
media in the form of QuickTime movies.

00:05:14.190 --> 00:05:17.500
There's an export item here from the
file menu that you might not have seen.

00:05:18.060 --> 00:05:22.550
It has a QuickTime choice up
here in this panel that allows

00:05:22.700 --> 00:05:24.500
you to create slideshows.

00:05:24.500 --> 00:05:27.410
I've created a couple of them for you.

00:05:30.600 --> 00:05:34.140
have a confession to make, and that is,
in about 20 minutes, my son is playing in

00:05:34.140 --> 00:05:35.620
a Little League game.

00:05:35.620 --> 00:05:37.670
So since I can't be there,
I thought that I'd take

00:05:37.670 --> 00:05:38.640
a little look here.

00:05:38.640 --> 00:05:42.850
So these, of course, are images that were
imported off of a camera,

00:05:43.070 --> 00:05:45.920
and iPhoto has made a nice
slideshow of them for me,

00:05:45.920 --> 00:05:50.380
and it's added some nice effects here
that QuickTime is currently rendering.

00:05:50.410 --> 00:05:53.940
It's exported those images along
with a description of the effects out

00:05:54.060 --> 00:05:57.680
to a form that QuickTime can read,
and this can now all be delivered

00:05:57.680 --> 00:06:00.460
in the form of a QuickTime movie.

00:06:00.460 --> 00:06:06.690
Well, I don't really like the speed at
which iPhoto has set the dissolves.

00:06:06.690 --> 00:06:09.050
It's using a uniform time
for all the dissolves.

00:06:09.150 --> 00:06:12.080
So what I actually did was
I went and I exported two

00:06:12.080 --> 00:06:16.730
more slideshows from iPhoto,
and I have some of the slides here.

00:06:18.000 --> 00:06:43.300
[Transcript missing]

00:06:43.570 --> 00:06:46.940
I've just pasted that part of
the other slide show in here.

00:06:46.950 --> 00:06:50.020
So here's an example just using
copy and paste editing how

00:06:50.160 --> 00:06:53.090
QuickTime can combine media together.

00:06:54.680 --> 00:06:58.100
All of the facilities for importing
and playing this media are available

00:06:58.110 --> 00:07:00.300
to your applications as well.

00:07:00.380 --> 00:07:04.740
One other app that I wanted to
show you that you might assume

00:07:04.870 --> 00:07:07.390
uses QuickTime media is Keynote.

00:07:07.640 --> 00:07:07.660
And of course it does.

00:07:07.660 --> 00:07:11.850
You can drag and drop media onto
slides in Keynote and Keynote will

00:07:11.940 --> 00:07:15.820
be able to play that media on slides.

00:07:15.890 --> 00:07:20.000
But what you might not be aware of
is Keynote can also create movies.

00:07:20.060 --> 00:07:24.600
You can export your presentations
to QuickTime movies.

00:07:24.650 --> 00:07:26.680
Let me show you what
that might look like.

00:07:26.730 --> 00:07:30.280
In Keynote's export menu,
it drops down a nice sheet,

00:07:30.330 --> 00:07:31.540
gives you some choices.

00:07:31.540 --> 00:07:32.900
One of them is QuickTime.

00:07:32.980 --> 00:07:38.030
From Keynote you can create interactive
slideshows which have the same ability

00:07:38.120 --> 00:07:42.700
to be controlled by the mouse and
the keyboard as Keynote has itself.

00:07:42.740 --> 00:07:47.040
You can also create self-playing movies
with timed builds and timed transitions.

00:07:47.120 --> 00:07:52.470
I went ahead and I created a
movie that has all of the slides

00:07:53.140 --> 00:07:57.440
for this session right here.

00:07:57.460 --> 00:07:59.870
Let me close up some windows.

00:08:05.760 --> 00:08:08.530
Now I made this a very small one
so I could email it to you after

00:08:08.530 --> 00:08:12.000
our presentation is over so you
can review this at your leisure.

00:08:12.040 --> 00:08:15.680
What I'm doing here is I'm controlling
this movie in exactly the same way

00:08:16.170 --> 00:08:18.320
that I control the slides in Keynote.

00:08:18.380 --> 00:08:21.440
I'm using the right arrow
key to step through.

00:08:21.840 --> 00:08:24.290
I think what I'll do is email this to
my mom afterwards so she knows what

00:08:24.290 --> 00:08:26.790
I've been up to for the last two weeks.

00:08:27.180 --> 00:08:30.440
Okay,
so the point of these demos is that you

00:08:30.520 --> 00:08:34.000
can do this in your applications as well,
and we're going to talk about how

00:08:34.000 --> 00:08:35.590
you can do that in this session.

00:08:35.600 --> 00:08:37.030
Can we go back to slides, please?

00:08:37.030 --> 00:08:40.790
I know it's confusing because
we were showing the slides,

00:08:41.080 --> 00:08:43.160
but I want to go to these slides.

00:08:44.380 --> 00:08:47.760
Okay, first some abstractions,
some things that have not changed

00:08:48.150 --> 00:08:52.750
in the last 12 or 13 years since
QuickTime was originally just

00:08:52.750 --> 00:08:54.850
a gleam in Jim Batson's eye.

00:08:55.640 --> 00:08:58.730
Some of the fundamental abstractions
that you will want to be aware of

00:08:58.740 --> 00:09:01.180
if you use QuickTime APIs we're
going to go over right now.

00:09:01.540 --> 00:09:03.780
First of all, what is a QuickTime movie?

00:09:03.920 --> 00:09:07.260
Well, it's just an organizing principle.

00:09:07.360 --> 00:09:11.580
It's just a catalog that tells
what media should be played,

00:09:11.600 --> 00:09:15.580
in what order it should be played,
and what its spatial relationships are.

00:09:15.770 --> 00:09:18.140
Formerly,
a catalog of playable and editable

00:09:18.140 --> 00:09:21.170
content that describes the
sources and types of content to be

00:09:21.170 --> 00:09:25.250
played together with its spatial
and temporal organization.

00:09:26.770 --> 00:09:29.450
took me a while to come up with that.

00:09:29.510 --> 00:09:32.530
Inside of a movie,
there can be one or more tracks.

00:09:32.580 --> 00:09:35.240
A track is just a sequence of media.

00:09:35.450 --> 00:09:38.460
It has a shared set of properties,
spatial and temporal,

00:09:38.500 --> 00:09:41.040
and typically also has
the same characteristics.

00:09:41.120 --> 00:09:46.220
So a track would typically be all
audio or all video or perhaps all MPEG.

00:09:51.370 --> 00:09:53.710
A track plays media.

00:09:53.710 --> 00:09:56.920
Notice that we've gone three levels
of abstraction down and we haven't

00:09:56.920 --> 00:09:58.580
talked about actual content yet.

00:09:58.870 --> 00:10:00.240
A movie is just a catalog.

00:10:00.240 --> 00:10:01.980
A track is just a sequence.

00:10:02.230 --> 00:10:04.660
Well, finally we've gotten to the level
where we're actually talking

00:10:04.760 --> 00:10:07.060
about what bits get played.

00:10:07.060 --> 00:10:09.760
The media is just a
container of playable stuff,

00:10:09.760 --> 00:10:13.130
an MPEG-4 file, a WAV file,
a QuickTime movie file

00:10:13.130 --> 00:10:14.970
is also an example.

00:10:15.330 --> 00:10:18.650
and in this particular graphic,
what you see is a single track which

00:10:18.800 --> 00:10:23.130
plays one media file for one section and
follows that up with a second media file.

00:10:23.140 --> 00:10:26.770
How does a track, how does media find the
media that it plays?

00:10:26.800 --> 00:10:28.420
By means of data references.

00:10:28.420 --> 00:10:32.130
Data references are actually
the main abstraction that we're

00:10:32.130 --> 00:10:34.940
going to talk about for the next
several minutes in this session.

00:10:34.940 --> 00:10:38.770
It's just a way for us, QuickTime,
to find the media that

00:10:38.960 --> 00:10:40.270
needs to be played.

00:10:40.560 --> 00:10:44.140
Some specifics,
it's a handle-based data structure.

00:10:44.140 --> 00:10:45.960
This is important for you to know.

00:10:46.260 --> 00:10:49.500
The handle,
from the parlance of the classic

00:10:49.640 --> 00:10:54.300
Macintosh memory manager,
now the Carbon memory manager,

00:10:54.300 --> 00:10:58.620
you will call disposeHandle to dispose
of a data reference that you create.

00:10:58.660 --> 00:11:02.180
And you'll use other handle-based
APIs for manipulating it.

00:11:02.440 --> 00:11:03.020
How big is it?

00:11:03.070 --> 00:11:04.870
Call getHandleSize and so forth.

00:11:05.140 --> 00:11:10.510
It's semi-opaque because some types
of data reference we don't publish.

00:11:10.540 --> 00:11:12.740
Some of them we publish the
format of and some we do.

00:11:12.960 --> 00:11:15.720
For example,
one popular form of data reference

00:11:15.720 --> 00:11:17.760
is a CarbonAliasManagerAlias.

00:11:17.960 --> 00:11:20.840
So you can actually take a look
and see what's in there and use the

00:11:20.840 --> 00:11:22.900
AliasManager APIs together with those.

00:11:22.960 --> 00:11:25.420
But some of them are also opaque.

00:11:25.680 --> 00:11:30.250
Now using these simple abstractions,
your application can support all of the

00:11:30.610 --> 00:11:32.960
media formats that QuickTime supports.

00:11:32.960 --> 00:11:35.560
All the video, all the audio,
all the still image,

00:11:35.560 --> 00:11:37.430
all of the interactive formats.

00:11:37.560 --> 00:11:40.230
I grabbed this page off of the web.

00:11:40.460 --> 00:11:43.470
And the folks across the hall
did a nice job of integrating

00:11:43.470 --> 00:11:44.880
it with my presentation.

00:11:44.960 --> 00:11:48.660
The QuickTime product spec
actually lists about 200 different

00:11:48.660 --> 00:11:50.490
formats now that we can support.

00:11:50.560 --> 00:11:53.020
In the last year,
without you having to do any

00:11:53.240 --> 00:11:55.890
work in your applications,
if you are already using

00:11:55.990 --> 00:11:58.940
the QuickTime APIs we're
going to talk about today,

00:11:59.130 --> 00:12:02.120
you have gained support for the
following formats in your app.

00:12:02.260 --> 00:12:06.060
MPEG-4, along with MPEG-4 AAC audio.

00:12:06.060 --> 00:12:08.410
JPEG-2000, a still image format.

00:12:08.410 --> 00:12:10.460
We deliver support on that on Mac OS X.

00:12:10.560 --> 00:12:15.070
Then 3GPP, you saw how many Ps did I say?

00:12:15.470 --> 00:12:19.910
Anyway, you saw a demo this morning of
QuickTime together with cell phones

00:12:20.260 --> 00:12:25.270
and the open standard 3GPP for
delivering video and audio to phones.

00:12:25.280 --> 00:12:28.210
And together with that, the audio,
one of the audio formats

00:12:28.460 --> 00:12:30.080
that's in the 3G spec AMR.

00:12:30.080 --> 00:12:32.920
And finally, the most important one that
we're announcing for the

00:12:32.920 --> 00:12:35.240
first time in this session,
Wave Format 49.

00:12:39.200 --> 00:12:40.920
Thank you.

00:12:40.950 --> 00:12:42.800
Some fans there of GSM Audio.

00:12:42.800 --> 00:12:46.820
Okay, so the abstractions
that we just went over,

00:12:46.820 --> 00:12:49.100
those have remained the
same for the last 12 years.

00:12:49.130 --> 00:12:52.800
If you put those into your toolbox,
they will remain the same for

00:12:52.880 --> 00:12:54.490
the indefinite future as well.

00:12:54.490 --> 00:12:57.480
But some things have changed.

00:12:57.500 --> 00:13:00.200
Now,
we didn't immediately realize this as

00:13:00.250 --> 00:13:04.040
we delivered QuickTime for Mac OS X,
but some things around

00:13:04.040 --> 00:13:08.940
QuickTime changed in the transition
from the classic Mac OS to Mac OS X.

00:13:08.940 --> 00:13:11.830
Some things underneath QuickTime,
such as the file system

00:13:11.830 --> 00:13:15.940
and the graphics subsystem,
and, well, the way we do audio, and, oh,

00:13:16.080 --> 00:13:19.330
I don't know, the way events are handled,
and the way we do

00:13:19.630 --> 00:13:21.780
concurrency and threading,
and, oh,

00:13:21.820 --> 00:13:24.460
the way text is rendered on the platform.

00:13:24.460 --> 00:13:26.690
Well,
a few things have changed since 1990.

00:13:28.000 --> 00:13:34.490
And what we want to say is
we are trying to keep up.

00:13:39.930 --> 00:13:42.710
So in our spare moments when
we're not delivering support

00:13:42.960 --> 00:13:46.120
for new multimedia formats,
such as the list that I gave you just

00:13:46.310 --> 00:13:49.880
then and others that I can't talk about,
or playing with new Pixlet

00:13:49.980 --> 00:13:52.850
codecs or such things,
we are revving our APIs to make

00:13:52.850 --> 00:13:56.210
QuickTime a better platform
citizen on all of the platforms

00:13:56.210 --> 00:13:58.240
that we deliver QuickTime for.

00:13:58.240 --> 00:14:02.070
So let's go through some of these topics.

00:14:02.130 --> 00:14:03.430
Files will be my first one.

00:14:03.490 --> 00:14:06.470
And we'll talk about new
APIs that you can use.

00:14:06.470 --> 00:14:09.380
We're getting away from some
of the legacy data structures,

00:14:09.400 --> 00:14:13.710
some of the legacy idioms for the way
things are talked about on Macintosh,

00:14:13.710 --> 00:14:14.940
and adopting the new ones.

00:14:15.080 --> 00:14:18.780
Now QuickTime,
though you may not believe it,

00:14:18.780 --> 00:14:21.070
did not invent the FS spec.

00:14:21.300 --> 00:14:24.740
There is a rumor that FSSpec first
appears in the Oxford English Dictionary.

00:14:24.740 --> 00:14:28.400
There's a reference to it in
the obscure Canterbury tale,

00:14:28.450 --> 00:14:30.600
The Hacker's Tale.

00:14:31.220 --> 00:14:36.700
In fact,
the truth is that was a misappropriation.

00:14:36.700 --> 00:14:42.090
The real FS spec was first delivered on
system 7 concurrently with QuickTime.

00:14:42.100 --> 00:14:45.000
And QuickTime, of course,
adopted that data structure

00:14:45.000 --> 00:14:46.210
for specifying files.

00:14:46.240 --> 00:14:52.370
And our APIs are literally littered with
FS specs as parameters to various calls.

00:14:52.880 --> 00:14:56.170
Now, that's not so convenient when
FS specs are no longer the

00:14:56.170 --> 00:14:57.990
preferred way to refer to files.

00:14:58.080 --> 00:14:59.310
So what do we have?

00:14:59.310 --> 00:15:03.120
We have in QuickTime an abstraction
that we mentioned earlier,

00:15:03.120 --> 00:15:06.170
the data reference that
allows you to refer to files,

00:15:06.170 --> 00:15:10.990
to URLs, to other locations that media
might be stored in an abstract way.

00:15:11.230 --> 00:15:15.120
And so with data references,
you can read data from media and play it.

00:15:15.440 --> 00:15:18.650
You can write media back to
locations out in the world.

00:15:18.680 --> 00:15:23.820
What we have with QuickTime 6.4 on
Panther are the data... ...references

00:15:24.150 --> 00:15:26.800
that allow you to create new
APIs for creating data references

00:15:26.800 --> 00:15:28.510
that you can use with QuickTime.

00:15:28.570 --> 00:15:29.670
Here's an example of one of them.

00:15:30.100 --> 00:15:33.510
Suppose you have a path to a file.

00:15:33.510 --> 00:15:36.740
Maybe the name contains
Unicode characters.

00:15:36.810 --> 00:15:39.390
You want to open that file
and play it as a movie.

00:15:39.400 --> 00:15:41.460
What you do is the following.

00:15:41.460 --> 00:15:45.180
Use this new API,
QT new data reference from full path,

00:15:45.180 --> 00:15:49.050
CFString, and it will create a
data reference for you.

00:15:49.080 --> 00:15:52.220
Let me show you an example of
what this might do in a moment.

00:15:52.810 --> 00:15:56.730
We not only can create these
data references from full paths,

00:15:56.730 --> 00:16:01.200
there are also APIs if you have
partial paths together with anchors,

00:16:01.220 --> 00:16:06.860
if you have URLs, hey,
even if you have an FS spec.

00:16:06.890 --> 00:16:10.610
We also support FS refs from
the Carbon File Manager.

00:16:11.460 --> 00:16:13.030
Before I show you any
of the code snippets,

00:16:13.090 --> 00:16:15.690
however, that you can just drop
in your application,

00:16:15.700 --> 00:16:18.070
I want to say two words
about Enter Movies.

00:16:18.070 --> 00:16:19.570
Call it.

00:16:19.570 --> 00:16:22.530
This is how you distinguish
the afternoon session,

00:16:22.530 --> 00:16:25.280
in which we're talking about real APIs,
from the morning session,

00:16:25.280 --> 00:16:29.980
which is driven by not showing the APIs,
but showing the technology.

00:16:29.980 --> 00:16:32.860
We're going to tell you, remind you,
that even on Mac OS X,

00:16:32.920 --> 00:16:35.780
it's still necessary to call
Enter Movies before you call any

00:16:35.780 --> 00:16:37.950
of the movie toolbox routines.

00:16:37.950 --> 00:16:39.110
Here's just a caution.

00:16:39.380 --> 00:16:43.900
If you're calling it from Cocoa, and yes,
we support calling these APIs from Cocoa,

00:16:43.950 --> 00:16:47.560
if you have a class method that goes on
to call some movie toolbox functions,

00:16:47.560 --> 00:16:50.560
some QuickTime APIs,
anything in the QuickTime framework,

00:16:50.650 --> 00:16:54.210
it's probably a good idea to position
a call to Enter Movies somewhere

00:16:54.210 --> 00:16:57.570
that's sure to be invoked before any
of your class methods are invoked.

00:16:57.570 --> 00:16:59.950
So this is just an example
of how you might do that,

00:17:00.280 --> 00:17:02.330
calling it from the
initialized class method.

00:17:03.620 --> 00:17:08.600
Okay, so here's an example of using
that DataRef utility to determine

00:17:08.600 --> 00:17:11.020
if QuickTime can open a file.

00:17:11.530 --> 00:17:15.080
You want to call the
QuickTime API "Can QuickTime open

00:17:15.080 --> 00:17:17.680
DataRef?" That will tell you,
"Can QuickTime open the

00:17:17.680 --> 00:17:21.790
file?" It can also tell you,
"Do we prefer to open it

00:17:21.790 --> 00:17:25.000
as a still image?" Or,
"Can it be an image?" Or,

00:17:25.090 --> 00:17:26.980
"Does it prefer to be a movie?"

00:17:27.240 --> 00:17:30.050
What you want to do is take the
form of reference that you have,

00:17:30.180 --> 00:17:33.820
a path, a URL, what have you,
call the appropriate data reference

00:17:33.850 --> 00:17:37.170
utility to create a data reference,
and then use that in

00:17:37.310 --> 00:17:38.360
CanQuickTimeOpenDataRef.

00:17:38.460 --> 00:17:41.880
And as I mentioned, the DataRef is a
handle-based data structure,

00:17:41.880 --> 00:17:44.000
so before you go on
to doing other things,

00:17:44.000 --> 00:17:48.250
please dispose of the handle if you're
not going to use that DataRef any longer.

00:17:48.260 --> 00:17:52.420
It's not a reference-counted
item that's going to be disposed

00:17:52.420 --> 00:17:54.100
of for you at some time.

00:17:56.930 --> 00:17:57.800
and Kevin Calhoun.

00:17:58.800 --> 00:17:59.800
So, let's talk about the
data reference utility.

00:17:59.800 --> 00:18:00.860
Suppose you want to open
a movie from a file.

00:18:00.860 --> 00:18:02.690
Same data reference utility,
Qt new data reference

00:18:02.740 --> 00:18:03.920
from full path CFString.

00:18:03.920 --> 00:18:06.260
Of course, if you have a different
form of reference,

00:18:06.310 --> 00:18:07.890
use a different data ref utility.

00:18:08.050 --> 00:18:10.420
The call that you use is
new movie from data ref.

00:18:10.420 --> 00:18:16.800
This one call will work with the entire
range of formats that QuickTime supports.

00:18:16.880 --> 00:18:19.650
You can open WAV files
locally from the Internet.

00:18:19.710 --> 00:18:21.010
You can open AIFF files.

00:18:21.230 --> 00:18:22.470
You can open 3GP files.

00:18:22.470 --> 00:18:24.210
You can open .AMR files.

00:18:24.210 --> 00:18:26.840
You can even offer WAV files
that are encoded with

00:18:27.150 --> 00:18:31.230
Wave Format 49 with this one API.

00:18:31.670 --> 00:18:35.060
Now, it's very important,
before I move on, to mention,

00:18:35.060 --> 00:18:38.940
just to caution you,
it's very convenient in your applications

00:18:38.940 --> 00:18:43.610
in your plists to list all of the file
extensions and all of the Mac OS file

00:18:43.700 --> 00:18:45.210
types that you know how to open.

00:18:45.220 --> 00:18:47.460
Well, that's great,
and it'll be fast for you to

00:18:47.460 --> 00:18:50.890
check whether a particular file,
if it's dragged onto your document,

00:18:50.890 --> 00:18:55.070
whether you can accept that drop by
checking whether its file extension

00:18:55.140 --> 00:18:59.180
or its Mac OS file type is in that
list of things that you support.

00:18:59.910 --> 00:19:03.910
However, you have to remember that if you
support dropping QuickTime media

00:19:03.910 --> 00:19:07.250
on your applications,
QuickTime is always expanding the

00:19:07.250 --> 00:19:09.140
set of media that it supports.

00:19:09.320 --> 00:19:12.870
So you do want to call
CanQuickTimeOpenDataRef to determine

00:19:12.970 --> 00:19:15.230
whether you can accept a drop of media.

00:19:15.610 --> 00:19:18.190
For example, Keynote does that.

00:19:18.620 --> 00:19:23.350
and when QuickTime 6.3 shipped,
it was immediately able to

00:19:23.350 --> 00:19:28.290
support .3GP and .AMR files
without having to be revised.

00:19:28.450 --> 00:19:31.920
Okay, open a movie from a URL,
same basic sequence,

00:19:31.990 --> 00:19:34.150
different data ref utility.

00:19:34.890 --> 00:19:37.630
Qt New Data Reference from CFURL.

00:19:37.750 --> 00:19:39.980
Suppose I want to write
a movie to a file.

00:19:39.980 --> 00:19:44.540
I want to create a new file or
I want to overwrite an existing file.

00:19:44.610 --> 00:19:47.770
In this particular example,
I'm calling the same DataRef

00:19:47.770 --> 00:19:50.980
utility Qt New Data Reference
from FullPath CFString,

00:19:51.290 --> 00:19:55.040
but this time I'm referring to a
file that may or may not exist.

00:19:55.040 --> 00:19:58.730
That will work just as well as
the earlier uses where we're

00:19:58.730 --> 00:20:00.880
opening an existing file.

00:20:01.200 --> 00:20:02.900
In this particular case,
in this code snippet,

00:20:02.900 --> 00:20:04.360
there's a slight wrinkle.

00:20:04.450 --> 00:20:06.240
I create the DataRef.

00:20:06.330 --> 00:20:12.020
Then I say I want to create storage for
a movie at the location that the DataRef

00:20:12.070 --> 00:20:14.920
points to by means of createMovieStorage.

00:20:14.980 --> 00:20:16.480
If you take a look at
the parameters there,

00:20:16.580 --> 00:20:19.640
you'll see that we're saying go
ahead and overwrite anything that

00:20:19.640 --> 00:20:21.290
was already at that location.

00:20:21.490 --> 00:20:25.590
We're also supplying an HFS creator
code to identify it as being

00:20:25.590 --> 00:20:28.250
associated with our application.

00:20:28.370 --> 00:20:31.540
What that call returns,
createMovieStorage,

00:20:31.540 --> 00:20:33.920
is an instance of a data handler.

00:20:33.920 --> 00:20:37.230
You can think of it as an object that
will just do the writing for you.

00:20:37.230 --> 00:20:39.730
It is, in fact,
an instance of a component,

00:20:39.790 --> 00:20:43.440
a QuickTime component that knows
how to read and write data from data

00:20:43.440 --> 00:20:48.210
references of the type that was returned
in this case by Qt New Data Reference

00:20:48.210 --> 00:20:50.760
from FullPath CFString.

00:20:50.890 --> 00:20:53.570
So that thing will know how to
write the movie to that storage,

00:20:53.570 --> 00:20:56.480
and it will do that when
I call add movie to storage.

00:20:56.560 --> 00:20:58.720
I tell the data handler,
please do that work for me.

00:20:58.800 --> 00:21:01.780
And once I'm done,
I say close movie storage.

00:21:01.830 --> 00:21:08.080
That will close down an open connection
or close an open reference to a file.

00:21:08.080 --> 00:21:10.740
And it will also close the
instance of the data handler.

00:21:10.740 --> 00:21:13.160
And since I'm done with the data ref,
I dispose of it.

00:21:13.530 --> 00:21:19.310
This snippet of code will be capable of
writing movies to any type of storage

00:21:19.320 --> 00:21:20.780
that QuickTime has a data handler.

00:21:20.800 --> 00:21:25.340
So this will work with files and
other forms of storage as well.

00:21:25.560 --> 00:21:29.070
And of course, more immediately,
it will work whether your path

00:21:29.070 --> 00:21:32.960
names have Unicode characters
or any other sort of characters.

00:21:32.960 --> 00:21:36.170
I should have mentioned earlier
that in the call QT new data

00:21:36.230 --> 00:21:39.550
reference from full path CFString,
that is a mouthful.

00:21:39.560 --> 00:21:42.110
You tell us the type of path that is.

00:21:42.110 --> 00:21:47.130
We typically give that type of path
as the native or default type of path,

00:21:47.300 --> 00:21:50.470
but we support a range
of path types as well.

00:21:52.280 --> 00:21:56.540
Okay, you can do a similar thing in
Cocoa without telling QuickTime to

00:21:56.560 --> 00:21:59.980
write to the file via add movie
storage or something like that.

00:22:00.030 --> 00:22:04.880
You can get from QuickTime a serialized
form of the movie in memory by

00:22:04.880 --> 00:22:06.780
means of put movie into handle.

00:22:06.840 --> 00:22:10.020
That will give you the thing
that you want to write someplace.

00:22:10.100 --> 00:22:12.380
And then in this particular
snippet I'm using NSData.

00:22:12.450 --> 00:22:16.400
I'm actually copying that serialized
form to an instance of NSData,

00:22:16.400 --> 00:22:18.610
then using NSData to write out the file.

00:22:18.710 --> 00:22:21.570
So this will work perfectly well also.

00:22:21.700 --> 00:22:24.590
For extra credit,
if you can rewrite this code snippet not

00:22:24.780 --> 00:22:28.820
to copy the serialized movie in memory,
I will say a hearty congratulations.

00:22:28.820 --> 00:22:31.500
It is possible,
but it goes beyond the scope of what

00:22:31.500 --> 00:22:33.520
we're going to talk about today.

00:22:33.520 --> 00:22:36.380
All right,
so what did I write in those snippets?

00:22:36.380 --> 00:22:38.830
I wrote movies to files.

00:22:38.940 --> 00:22:42.350
And as we said earlier,
a movie is just a catalog.

00:22:42.350 --> 00:22:44.380
It's just organizing data.

00:22:44.400 --> 00:22:48.870
It doesn't necessarily
include the media also.

00:22:48.880 --> 00:22:52.920
Well, what if I want to write the movie,
the organizing catalog,

00:22:52.920 --> 00:22:54.680
together with the media?

00:22:54.710 --> 00:22:57.120
In QuickTime parlance,
that's called flattening

00:22:57.120 --> 00:22:59.560
the movie to a location.

00:22:59.710 --> 00:23:02.870
And the API for doing that is
flatten movie data to data ref.

00:23:03.090 --> 00:23:06.600
Get a data ref, flatten the movie to it,
and you're off.

00:23:06.600 --> 00:23:09.870
You now have a file,
in this particular case,

00:23:09.920 --> 00:23:14.590
with all of the media data and the
movie stored in the same place.

00:23:15.640 --> 00:23:16.430
Okay.

00:23:16.570 --> 00:23:21.140
So here's something that I know that we
haven't shown on a WWDC stage before.

00:23:21.510 --> 00:23:23.260
And as soon as I show you this,
I'm going to show you how you can

00:23:23.260 --> 00:23:25.820
get into serious trouble using this.

00:23:25.880 --> 00:23:28.640
If you want to know what
media a movie plays,

00:23:28.640 --> 00:23:30.390
it's possible to do that.

00:23:30.630 --> 00:23:35.970
All you need to do is to iterate through
the data references that a movie uses.

00:23:36.270 --> 00:23:38.120
And here's how to do it.

00:23:38.120 --> 00:23:40.240
You use the abstractions
that we talked about earlier.

00:23:40.330 --> 00:23:42.400
In this particular case,
I'm looking at the first

00:23:42.400 --> 00:23:43.290
track of the movie.

00:23:43.290 --> 00:23:45.140
But of course,
I can iterate through all the

00:23:45.140 --> 00:23:47.370
tracks in a more involved example.

00:23:47.480 --> 00:23:49.500
That wouldn't fit on a slide.

00:23:49.500 --> 00:23:51.750
And I get the media for that track.

00:23:51.800 --> 00:24:41.300
[Transcript missing]

00:24:42.090 --> 00:24:46.410
Once I have the data handler,
I have another set of data reference

00:24:46.980 --> 00:24:50.970
utilities that I haven't mentioned yet
that allow you to get information back

00:24:51.130 --> 00:24:53.170
from a data handler about a data ref.

00:24:53.270 --> 00:24:56.160
In this case,
I just want the full path back.

00:24:56.240 --> 00:25:00.210
I want to know where these files are
and I want to be able to manipulate

00:25:00.300 --> 00:25:05.570
them with other APIs in NSFileManager,
for example, or in the CarbonFileManager.

00:25:05.570 --> 00:25:06.840
And here's how we do it.

00:25:06.950 --> 00:25:09.680
Make sure you clean up,
close down your data handlers,

00:25:09.730 --> 00:25:11.980
dispose your handles, and everybody else.

00:25:12.020 --> 00:25:13.800
And here's how we do it.

00:25:13.800 --> 00:25:17.810
Make sure you clean up,
close down your data handlers,

00:25:17.810 --> 00:25:21.290
dispose your handles, and everybody else.

00:25:23.430 --> 00:25:25.650
for a graphical interlude.

00:25:25.830 --> 00:25:28.640
We got these cool graphics last week.

00:25:30.480 --> 00:25:34.660
and the advice to mark all of our
code snippets either with this best

00:25:34.810 --> 00:25:39.290
practices icon or with a different icon.

00:25:39.470 --> 00:25:42.190
Now I didn't have time to do all that,
so I wanted to tell you that if you're

00:25:42.190 --> 00:25:46.990
used to seeing these icons during the
show and you're reluctant to use any code

00:25:47.100 --> 00:25:50.560
snippets that are not marked in that way,
all of the code snippets

00:25:50.560 --> 00:25:53.740
in this presentation,
unless otherwise noted,

00:25:53.770 --> 00:25:55.900
are best practices.

00:25:55.960 --> 00:25:58.780
They've been certified by a board of
QuickTime API engineers who are sitting,

00:25:58.780 --> 00:26:00.640
I think, right over there.

00:26:01.100 --> 00:26:04.070
Now after saying that,
I will immediately show you something

00:26:04.070 --> 00:26:07.590
that is not a best practice.

00:26:09.190 --> 00:26:11.510
In this particular case,
I'm going to use the power that

00:26:11.510 --> 00:26:14.380
I've just given out to the whole
world to iterate through all

00:26:14.380 --> 00:26:17.600
the data references in a movie,
and I'm going to load all the media

00:26:17.660 --> 00:26:19.510
data into memory in one small loop.

00:26:19.600 --> 00:26:22.160
Now,
this is a very interesting thing to do,

00:26:22.260 --> 00:26:24.920
and it might be fun if
you want to swamp the VM,

00:26:24.920 --> 00:26:26.910
but it's something to avoid.

00:26:26.920 --> 00:26:30.370
If QuickTime is capable of playing
large amounts of media data

00:26:30.370 --> 00:26:34.640
without loading it all into memory,
it's probably possible for you to examine

00:26:34.640 --> 00:26:38.480
it or copy it or do whatever you need to
do without loading it all into memory,

00:26:38.480 --> 00:26:38.880
too.

00:26:39.370 --> 00:26:43.390
You should be aware that these
data refs can point to very

00:26:43.790 --> 00:26:48.240
large amounts of media data,
gigabytes worth of DV or audio

00:26:48.250 --> 00:26:52.920
or high-res video of some kind,
and it's probably not a good idea

00:26:52.920 --> 00:26:57.040
to write code that loads arbitrary
media into memory like this.

00:26:58.700 --> 00:27:04.360
Okay, so I can open movies,
I can write movies back to files.

00:27:04.430 --> 00:27:06.560
Suppose I wanna write a movie
to a different kind of file.

00:27:06.560 --> 00:27:10.560
I wanna export data from a movie
to a different file format.

00:27:10.580 --> 00:27:14.340
Here's a code snippet using the DataRef
utilities that takes the audio from

00:27:14.340 --> 00:27:18.370
a movie and exports it to a WAV file.

00:27:18.500 --> 00:27:58.300
[Transcript missing]

00:27:58.780 --> 00:28:00.360
So we've talked about movies.

00:28:00.420 --> 00:28:03.620
The same procedures
work for opening images.

00:28:03.710 --> 00:28:09.660
How can you draw in any image in
any format that QuickTime supports?

00:28:09.720 --> 00:28:12.880
Get a data reference,
then get a graphics importer

00:28:12.880 --> 00:28:17.790
for that data ref using the
interestingly named API,

00:28:17.790 --> 00:28:21.610
getGraphicsImporterForDataRef with flags.

00:28:22.060 --> 00:28:24.600
A graphics importer is an object,
again it's an instance

00:28:24.670 --> 00:28:27.410
of a QuickTime component,
but you can think of it as an object that

00:28:27.410 --> 00:28:31.830
has methods that do things with images,
like draw them, or transform them,

00:28:31.960 --> 00:28:34.600
or export them to other formats.

00:28:35.110 --> 00:28:38.540
For example,
if I wanted to export an image to a file,

00:28:38.620 --> 00:28:42.060
all I need to do is open an
instance of a graphics exporter.

00:28:42.310 --> 00:28:45.020
In this particular snippet,
I happen to be using the ping

00:28:45.080 --> 00:28:49.140
exporter because ping is an
excellent graphic image file format.

00:28:49.280 --> 00:28:52.230
Once I've got that open,
I want to tell that instance

00:28:52.230 --> 00:28:56.240
of the graphic exporter what
the source of the image is.

00:28:56.290 --> 00:28:59.990
I'm saying, please make the source of the
image to export this graphics

00:28:59.990 --> 00:29:03.150
importer I just opened a moment ago
using the method that I showed you,

00:29:03.170 --> 00:29:05.070
getting a graphics
importer for a data ref.

00:29:05.070 --> 00:29:08.400
Then I want to tell the
graphics exporter where to write

00:29:08.400 --> 00:29:11.760
the image file by means of,
again, a data reference.

00:29:11.760 --> 00:29:13.720
Then I tell it to do the export.

00:29:13.720 --> 00:29:18.350
And with that few lines of code,
you can write any of the image file

00:29:18.350 --> 00:29:21.060
formats that QuickTime can write.

00:29:21.120 --> 00:29:24.590
And of course, clean things up,
close components, dispose handles.

00:29:25.330 --> 00:29:29.880
So that covers the basic level
of data reference utilities.

00:29:30.110 --> 00:29:33.390
We hope this will get you
past some of the blockers,

00:29:33.390 --> 00:29:36.980
some of the conceptual blockers that
developers have run into looking

00:29:36.980 --> 00:29:41.290
at the QuickTime APIs for the first
time on Mac OS X and saying some of

00:29:41.290 --> 00:29:43.160
these things are not like the other.

00:29:43.240 --> 00:29:47.150
We're trying to be more like the
other and make it easier for you.

00:29:47.430 --> 00:29:49.760
All right,
so let's move on to graphics subsystems.

00:29:50.200 --> 00:29:52.200
Things have changed in graphics.

00:29:52.220 --> 00:29:57.400
When QuickTime, in its nascent years,
it's the native graphics subsystem was,

00:29:57.400 --> 00:29:59.650
of course, QuickDraw on the classic Mac.

00:29:59.820 --> 00:30:04.190
Since then, other graphics systems
have become available also.

00:30:04.340 --> 00:30:08.940
Now I want to say, like I said for files,
that we have an abstraction that

00:30:08.940 --> 00:30:11.980
will shield you from all the details
of all these graphic subsystems.

00:30:12.050 --> 00:30:13.990
And if you use our abstraction,
then you don't have to worry

00:30:13.990 --> 00:30:16.340
about the details of the
underlying graphic subsystem.

00:30:16.340 --> 00:30:19.290
And if I said that,
it wouldn't quite be true,

00:30:19.380 --> 00:30:21.970
but we have something of that flavor.

00:30:21.970 --> 00:30:26.350
We still use some of the basic
quick draw data structures and APIs,

00:30:26.690 --> 00:30:31.020
but you can use them in combination
with the graphics subsystem that

00:30:31.020 --> 00:30:33.550
you are using in your application.

00:30:33.560 --> 00:30:35.970
And I'll talk about how to do that.

00:30:36.910 --> 00:30:40.840
If you want to play a movie in a window,
what you need to do is to get from

00:30:40.840 --> 00:30:43.470
the window its QuickDraw port.

00:30:43.470 --> 00:30:46.590
And that's a very simple thing
to do in Carbon or Cocoa.

00:30:46.780 --> 00:30:49.960
If you have the Carbon window ref,
you get the QuickDraw port

00:30:49.960 --> 00:30:53.360
that's associated with that
window by means of getWindowPort.

00:30:53.680 --> 00:30:56.690
Then you can tell QuickTime to
draw a movie there by means

00:30:56.690 --> 00:30:58.480
of the API setMovieGWorld.

00:30:59.040 --> 00:31:03.510
In Cocoa, you can get the Carbon window
ref from NSWindow from a

00:31:03.590 --> 00:31:06.020
public method called windowRef.

00:31:06.110 --> 00:31:07.800
So this is all very straightforward.

00:31:07.800 --> 00:31:11.420
But you say, I wish to play movies
into off-screen buffers.

00:31:11.420 --> 00:31:12.560
How do I do that?

00:31:12.640 --> 00:31:17.080
Well, if you have the buffer set up
and all you know is the pointer,

00:31:17.080 --> 00:31:21.230
the location in memory where the
pixels are going to be drawn,

00:31:21.230 --> 00:31:24.100
you know the bytes per
row of your buffer,

00:31:24.100 --> 00:31:29.010
you know the size of your buffer,
the width and height.

00:31:29.240 --> 00:31:32.500
And one more thing,
you need to know the QuickDraw pixel

00:31:32.530 --> 00:31:36.620
format or you need to map from the
pixel format that you're using,

00:31:36.620 --> 00:31:41.210
whether it's a CoreGraphs and Quartz
pixel format or an OpenGL one.

00:31:41.240 --> 00:31:44.310
You need to do a little mapping
to the QuickTime or QuickDraw way

00:31:44.310 --> 00:31:45.940
to describe that pixel format.

00:31:45.940 --> 00:31:49.910
Then you can create a data structure
that allows us to draw the movie there.

00:31:49.920 --> 00:31:54.040
You call newGWorld from pointer
with that information and that

00:31:54.100 --> 00:31:58.780
will allocate a GWorld that allows
QuickTime to access those bits.

00:31:58.780 --> 00:31:58.840
Yes.

00:31:59.050 --> 00:32:01.670
Your buffer, which you may be doing
other things too also.

00:32:01.780 --> 00:32:04.750
You might be composing movies
with other things and so forth.

00:32:05.060 --> 00:32:08.560
This is exactly what Keynote does,
by the way, to be able to render

00:32:08.990 --> 00:32:10.460
movies to OpenGL textures.

00:32:10.460 --> 00:32:13.470
It creates a GWorld that
QuickTime can use to render

00:32:13.470 --> 00:32:15.290
to that same area of memory.

00:32:17.190 --> 00:32:19.210
Okay, same thing for images.

00:32:19.480 --> 00:32:21.840
In this case,
you create the GWorld and then

00:32:21.840 --> 00:32:24.930
use Graphics Import Set GWorld
to do the same thing.

00:32:24.930 --> 00:32:27.650
Then Graphics Import Draw to draw there.

00:32:28.300 --> 00:33:04.500
[Transcript missing]

00:33:04.860 --> 00:33:08.000
The key API call here is
QDPickedDrawToCGContext.

00:33:08.310 --> 00:33:10.240
This is a public API that you can use.

00:33:10.290 --> 00:33:11.720
This method will work for you.

00:33:12.000 --> 00:33:15.800
All of these code snippets, by the way,
are available in a document that we're

00:33:15.800 --> 00:33:18.200
making available via your ADC connection.

00:33:18.390 --> 00:33:19.560
So you don't have to jot all this down.

00:33:19.910 --> 00:33:23.050
In fact, the samples in that document
are a little bit more,

00:33:23.220 --> 00:33:25.330
are a little bit fuller than
what I'm able to show on stage.

00:33:25.760 --> 00:33:28.440
Again, I'm cleaning up after things.

00:33:28.820 --> 00:33:31.180
How old is the API kill picture?

00:33:31.270 --> 00:33:32.900
Does anyone know?

00:33:32.980 --> 00:33:35.610
How many WWCs have you been to?

00:33:35.650 --> 00:33:36.780
enough to know?

00:33:37.100 --> 00:33:37.730
Well, that's more than enough.

00:33:37.810 --> 00:33:38.580
Okay.

00:33:38.700 --> 00:33:42.510
So CG images, you don't have to get a
quick draw picture to do

00:33:42.510 --> 00:33:44.500
all operations in QuickTime.

00:33:44.620 --> 00:33:49.140
We now support the ability to read
still images and give you a CG image

00:33:49.140 --> 00:33:54.700
and we support the ability to take a
CG image and write out to an image file.

00:33:54.700 --> 00:33:59.680
A new graphics importer call,
graphics import create CG image,

00:33:59.720 --> 00:34:04.430
will give you a CG image from any
format that QuickTime can read by a

00:34:04.430 --> 00:34:07.230
graphics importers by this method.

00:34:07.230 --> 00:34:10.990
And similarly,
you can write out two image files from

00:34:10.990 --> 00:34:13.320
a CG image using graphic exporters.

00:34:13.390 --> 00:34:16.580
We saw the example before of
how to use a graphics exporter.

00:34:16.880 --> 00:34:21.660
The only difference here is I'm using the
API graphics export set input CG image to

00:34:21.720 --> 00:34:26.600
tell the exporter to take the image from
the CG image and then write that out.

00:34:28.430 --> 00:34:30.540
How many dispose handles have
I shown during this session?

00:34:30.560 --> 00:34:34.700
It's probably more than you've seen
anywhere else at this conference so far.

00:34:35.210 --> 00:34:38.790
Okay, so let's take a break for a
few minutes from code snippets.

00:34:40.530 --> 00:34:45.710
Something else that has become more
widespread on the OS is color matching.

00:34:45.930 --> 00:34:48.090
Tim Schaaf mentioned it this morning.

00:34:48.090 --> 00:34:53.800
So I won't repeat all of this except to
underscore the point that by default,

00:34:54.030 --> 00:34:57.800
graphics importers will match
when they draw if there is a

00:34:57.870 --> 00:35:00.140
color profile stored in the image.

00:35:00.240 --> 00:35:01.540
This happens by default.

00:35:01.710 --> 00:35:03.090
You don't have to do any work.

00:35:03.090 --> 00:35:06.040
So when Tim Schaaf showed
his demo of BBEdit suddenly

00:35:06.040 --> 00:35:09.910
able to do color matching,
did that require any changes to BBEdit?

00:35:10.000 --> 00:35:10.670
Well, no.

00:35:10.670 --> 00:35:13.920
It's just using graphics
importers and now it just works.

00:35:14.020 --> 00:35:16.190
However,
something that Tim didn't mention

00:35:16.190 --> 00:35:19.880
is that if you use some of the code
snippets I showed you to translate from

00:35:19.880 --> 00:35:25.140
one graphics image format to another,
you should be aware that we now,

00:35:25.200 --> 00:35:29.070
as much as the image format allows us,
move the color profile over from

00:35:29.070 --> 00:35:32.810
the source to the definition--to the
destination and this just happens.

00:35:32.810 --> 00:35:33.660
It just works.

00:35:33.730 --> 00:35:37.020
More details about how to do this,
particularly if you're already

00:35:37.020 --> 00:35:40.400
doing color matching of your own
when using graphics importers,

00:35:40.400 --> 00:35:44.200
come to session 716,
Advanced QuickTime Programming Techniques

00:35:44.200 --> 00:35:48.810
and there they will speak even more
advanced language than I'm capable of

00:35:49.040 --> 00:35:52.000
Another subsystem that's changed
underneath QuickTime we are

00:35:52.000 --> 00:35:54.580
changing to keep up is audio.

00:35:54.590 --> 00:35:56.830
We have on Mac OS X core audio.

00:35:56.830 --> 00:35:59.590
You heard this morning that we
have a complete reimplementation

00:35:59.960 --> 00:36:03.080
of QuickTime sound media
on top of core audio.

00:36:03.110 --> 00:36:06.490
You have the opportunity to try
that out on your Panther C disk

00:36:06.490 --> 00:36:07.750
once you install that.

00:36:08.320 --> 00:36:10.430
One of the things that wasn't
mentioned this morning,

00:36:10.430 --> 00:36:14.020
just as you can use QuickTime in
combination with Quartz in the

00:36:14.020 --> 00:36:16.740
ways that I told you earlier,
you can use QuickTime in

00:36:16.770 --> 00:36:17.960
combination with Core Audio.

00:36:17.960 --> 00:36:22.740
Come to session 7.11 to find out how
to extract audio from a movie in a form

00:36:22.740 --> 00:36:25.520
that you can manipulate using Core Audio.

00:36:25.520 --> 00:36:29.120
So these technologies work together
better than they ever have before.

00:36:31.490 --> 00:36:34.600
All right, another area that's changed
underneath and around QuickTime.

00:36:34.660 --> 00:36:38.140
We have a new text rendering
engine on Mac OS X.

00:36:38.210 --> 00:36:42.850
It's the Apple type system
for Unicode imaging,

00:36:42.850 --> 00:36:45.220
and it stands for something.

00:36:47.380 --> 00:36:50.620
and in any case,
it is the native rendering

00:36:50.620 --> 00:36:52.910
engine for Unicode on Mac OS X.

00:36:52.910 --> 00:36:54.970
And it does a great job
of rendering Unicode.

00:36:55.160 --> 00:36:57.430
What QuickTime has
done on the Mac before,

00:36:57.430 --> 00:37:02.100
you could always store Unicode text
in your movies since QuickTime 3.

00:37:02.330 --> 00:37:06.200
On Mac, however,
we were transcoding the Unicode to a

00:37:06.450 --> 00:37:09.410
different encoding before rendering it.

00:37:09.410 --> 00:37:13.780
And so you lost some faithfulness
to--some fidelity to the text.

00:37:13.870 --> 00:37:15.350
That's no longer the case.

00:37:15.400 --> 00:37:18.820
We have complete fidelity to
Unicode text when rendering.

00:37:18.820 --> 00:37:21.670
Now, there's a cost and I want
to be clear on this.

00:37:21.670 --> 00:37:25.700
You're going to lose the ability
to render text with QuickDraw

00:37:25.990 --> 00:37:28.160
Shadow or QuickDraw Outline.

00:37:30.770 --> 00:37:32.380
Yeah.

00:37:32.520 --> 00:37:35.850
How many people here have looked
at what QuickDraw does to add

00:37:35.850 --> 00:37:37.460
a shadow to a bitmap font?

00:37:37.490 --> 00:37:38.380
How long has it been?

00:37:38.380 --> 00:37:39.330
Take a look again.

00:37:39.350 --> 00:37:41.880
If you're worried about the loss of this,
take one look and you

00:37:41.890 --> 00:37:42.530
won't worry anymore.

00:37:42.530 --> 00:37:46.880
Let me give you a quick demo.

00:37:52.200 --> 00:37:54.940
is going to be talking about
the new features of QuickTime 6.

00:37:59.240 --> 00:37:59.970
Hello, everyone.

00:37:59.970 --> 00:38:01.710
I'm Kevin Calhoun,
and I'm going to be talking about

00:38:01.770 --> 00:38:03.140
the new features of QuickTime 6.

00:38:14.710 --> 00:38:18.380
A description in XML format of
what a text track might look like.

00:38:18.460 --> 00:38:21.590
Here, starting with QuickTime 6.3,
we have the ability to

00:38:21.700 --> 00:38:22.850
specify Unicode text.

00:38:22.960 --> 00:38:27.180
We're using UTF-8 encoding in this
example because it is stored as XML.

00:38:27.320 --> 00:38:29.780
And we have the ability--let
me highlight this for you.

00:38:29.780 --> 00:38:32.800
It's hard to see in the back, I know,
but you can set an attribute that says,

00:38:32.820 --> 00:38:36.090
"Write the text vertically."
What does it look like?

00:38:36.260 --> 00:38:39.910
Well, let me import it with
QuickTime right now.

00:38:39.910 --> 00:38:41.510
The very same XML document.

00:38:41.660 --> 00:38:42.860
And this is what it looks like.

00:38:42.930 --> 00:38:46.540
The first frame renders the
text horizontally and you

00:38:46.540 --> 00:38:49.260
see that if I scale it down,
scale it up,

00:38:49.260 --> 00:38:51.490
we have a very smooth text now.

00:38:51.490 --> 00:38:54.600
And the second frame writes
the same text vertically.

00:38:54.680 --> 00:38:55.940
So that's all available for you.

00:38:56.240 --> 00:38:58.670
Once you have this
text into a text track,

00:38:58.850 --> 00:39:01.540
of course you can move it
around with QuickTime media

00:39:01.550 --> 00:39:03.170
just as easily as any other.

00:39:03.170 --> 00:39:07.000
Let's move back to slides.

00:39:11.130 --> 00:39:13.880
All right, so we talked about some
subsystems that have changed.

00:39:14.040 --> 00:39:19.080
Things that have changed around and above
QuickTime include the user interface.

00:39:19.080 --> 00:39:23.010
Now,
this has changed somewhat since 1990.

00:39:23.010 --> 00:39:26.480
For example,
we don't have modal dialogs anymore.

00:39:26.480 --> 00:39:27.750
We have panels.

00:39:27.780 --> 00:39:32.210
But not only has the terminology changed,
also the way that users interact

00:39:32.210 --> 00:39:34.640
with these things have changed
and their appearance has

00:39:34.730 --> 00:39:36.060
changed quite a bit as well.

00:39:36.100 --> 00:39:40.980
QuickTime has some UI of its
own that you can display in your

00:39:40.980 --> 00:39:45.720
applications for configuring
operations such as recompression,

00:39:45.720 --> 00:39:47.750
export, import.

00:39:48.300 --> 00:39:53.750
If you choose to display this UI,
you get well-standard UI that

00:39:53.750 --> 00:39:58.100
may or may not match the
other UI in your application.

00:39:58.100 --> 00:40:01.410
That's a problem that we're
going to be working on over time.

00:40:01.530 --> 00:40:10.960
We're going to tell you
how we're going to do that.

00:40:10.960 --> 00:40:10.960
But the good news is,
and I'll show you some

00:40:10.960 --> 00:40:10.960
code snippets in a moment,
you can now display certain

00:40:10.960 --> 00:40:10.960
QuickTime modal dialogs as sheets.

00:40:41.270 --> 00:40:55.190
All right,
so we talked about some subsystems that

00:40:55.190 --> 00:40:55.190
have changed around and above QuickTime.

00:40:55.190 --> 00:40:55.190
For example, we have panels.

00:40:55.190 --> 00:40:55.190
But not only has the terminology
changed around and above QuickTime,

00:40:55.190 --> 00:40:55.190
we're going to tell you
how we're going to do that.

00:40:55.190 --> 00:40:55.190
But the good news is,
and I'll show you some

00:40:55.190 --> 00:40:55.190
code snippets in a moment,
you can now display certain

00:40:55.190 --> 00:40:55.190
QuickTime modal dialogs as sheets.

00:40:55.390 --> 00:40:57.540
is the founder of the
component properties.

00:40:57.620 --> 00:40:59.040
First some code snippets.

00:40:59.060 --> 00:41:04.820
If you want to display QuickTime standard
compression dialogues as sheets,

00:41:04.840 --> 00:41:09.070
we have a new scSetInfo,
the standard compression set info

00:41:09.100 --> 00:41:14.510
API selector that tells you to
display a dialogue as a sheet instead.

00:41:14.820 --> 00:41:16.800
You tell it what the parent window is.

00:41:16.810 --> 00:41:19.820
If you have the Carbon window ref,
it'll just work.

00:41:19.850 --> 00:41:26.700
And when you say scRequestImageSettings
the standard compression sheet will

00:41:26.820 --> 00:41:31.260
now come down from the window title
bar as you would expect on Mac OS X.

00:41:31.990 --> 00:41:35.200
It's also possible to do that
with a video compression dialog.

00:41:35.250 --> 00:41:37.330
And it's also possible to do,
as I mentioned, with the effects

00:41:37.470 --> 00:41:39.560
parameter dialog as well.

00:41:39.590 --> 00:41:43.410
What we do in this case is we call
Qt Create Standard Parameter Dialog,

00:41:43.530 --> 00:41:47.190
setting the option
PDOptionsDisplayAsSheet.

00:41:48.350 --> 00:41:50.800
And then we tell it to
do something clever.

00:41:50.870 --> 00:41:54.110
This API was originally designed
to work with the classic

00:41:54.510 --> 00:41:58.000
Macintosh Dialog Manager,
mode-less dialog support.

00:41:58.120 --> 00:42:02.530
Now we just tell the parameter dialog
to run itself in its own event loop.

00:42:02.700 --> 00:42:04.140
And that's what it does.

00:42:04.180 --> 00:42:07.660
It brings down the sheet in this case,
handles the user interaction,

00:42:07.660 --> 00:42:11.670
and then when the user dismisses it,
it goes away and you have the

00:42:11.670 --> 00:42:15.170
settings that the user selected.

00:42:16.350 --> 00:42:18.900
Okay, I'm running behind,
so instead of showing you sheets

00:42:18.900 --> 00:42:22.380
coming down from title bars,
I'm just going to stay with the slides.

00:42:22.510 --> 00:42:24.100
Sorry about that.

00:42:24.370 --> 00:42:28.080
Meantime, someone can translate the text
that we put into that movie.

00:42:28.080 --> 00:42:30.630
Okay, component properties.

00:42:30.630 --> 00:42:32.810
This is an important direction for us.

00:42:32.810 --> 00:42:37.560
If you are a developer of a
movie exporter or of a codec

00:42:37.560 --> 00:42:44.200
or of anything that is used in
combination with a QuickTime process,

00:42:44.200 --> 00:42:48.360
we would like to work with you
over the next year to standardize

00:42:48.360 --> 00:42:52.840
sets of properties that are
common for your component type.

00:42:53.100 --> 00:42:57.620
You can imagine that exporters will
have a common set of properties and we

00:42:57.620 --> 00:43:02.100
would like to roll out in a way that's
similar to the way over time Apple worked

00:43:02.170 --> 00:43:05.980
with developers to add support for
Apple events in their applications

00:43:05.980 --> 00:43:08.360
with standard Apple event suites.

00:43:08.360 --> 00:43:11.790
We want to work with component
developers to add support for

00:43:11.800 --> 00:43:13.960
standard property settings.

00:43:13.960 --> 00:43:17.240
This will allow us to
factor the configuration of

00:43:17.240 --> 00:43:19.210
QuickTime operations from UI.

00:43:19.740 --> 00:43:23.920
So you'll hear a lot more about
that from us over the lifetime

00:43:24.240 --> 00:43:26.050
of Panther and QuickTime 6.

00:43:26.200 --> 00:43:31.330
You'll see these APIs in the
QuickTime framework in your Panther seed.

00:43:31.630 --> 00:43:34.440
These APIs are actually part
of the component manager,

00:43:34.840 --> 00:43:37.420
although they're not in that
framework that the component manager

00:43:37.420 --> 00:43:38.840
is part of on your seed disk.

00:43:38.950 --> 00:43:43.590
Okay, so you'll hear more about
that in the upcoming months.

00:43:44.670 --> 00:43:47.090
All right, something else has changed.

00:43:47.200 --> 00:43:52.690
It is now possible to do
operations on concurrent threads,

00:43:52.770 --> 00:43:56.180
and there are many different threading
models that are available on Mac OS X.

00:43:56.180 --> 00:44:01.240
However, there's been some difficulty to
date of making QuickTime processes

00:44:01.240 --> 00:44:03.210
operate on secondary threads.

00:44:03.330 --> 00:44:05.070
We really wanted to
operate on the main thread.

00:44:05.860 --> 00:44:09.360
Now we have the ability,
as was mentioned this morning,

00:44:09.400 --> 00:44:13.110
for a certain set of operations
to configure them and to carry

00:44:13.110 --> 00:44:16.750
them out on secondary threads
that do not block the UI.

00:44:16.750 --> 00:44:19.890
This is a major win if
you have an application,

00:44:19.890 --> 00:44:22.900
for example, that exports a lot of data.

00:44:22.900 --> 00:44:26.000
You saw my code snippet earlier
for exporting audio to a WAV file.

00:44:26.000 --> 00:44:27.450
What if that's a lot of data?

00:44:27.450 --> 00:44:30.670
Does the user just have to wait
around while a progress dialog

00:44:30.670 --> 00:44:32.560
tells me how much has happened?

00:44:32.560 --> 00:44:36.750
Well, we have the ability now for certain
processes and certain operations

00:44:36.750 --> 00:44:38.880
to happen on alternate threads.

00:44:38.910 --> 00:44:41.880
More details in the advanced
QuickTime programming technique session.

00:44:41.940 --> 00:44:44.980
Please come to that to
find out how to do that.

00:44:44.990 --> 00:44:47.840
Especially come to that
if you are already calling

00:44:47.840 --> 00:44:52.980
QuickTime APIs not on the main thread,
because you may have interesting side

00:44:52.980 --> 00:44:54.080
effects that you're not aware of.

00:44:54.080 --> 00:44:58.800
There are certain restrictions
that you want to be aware of.

00:44:59.130 --> 00:45:03.160
Now you'll note that even though that
this is a fairly introductory session to

00:45:03.160 --> 00:45:07.400
QuickTime APIs and to QuickTime new APIs,
I have departed from

00:45:07.400 --> 00:45:08.670
many years of tradition.

00:45:08.860 --> 00:45:13.270
I have not shown you how to take a
movie that I've opened and then create

00:45:13.550 --> 00:45:16.140
a movie controller for that movie,
and how to put the movie

00:45:16.140 --> 00:45:19.340
controller in a window,
and how to route user events

00:45:19.610 --> 00:45:21.500
to the movie controller.

00:45:21.640 --> 00:45:24.080
That, I think,
has been shown at every single

00:45:24.080 --> 00:45:26.510
QuickTime API session since 1935.

00:45:26.890 --> 00:45:30.460
But today we are breaking with tradition
because we have finally arrived at a

00:45:30.460 --> 00:45:35.230
point at which we have intermediate level
modules that will do that work for you.

00:45:35.230 --> 00:45:37.440
You don't have to worry
about it any longer.

00:45:37.440 --> 00:45:41.010
So if you use these APIs I've shown
you to get a movie from a file

00:45:41.010 --> 00:45:45.090
or some other place in the world,
all you need to do is tell that movie,

00:45:45.150 --> 00:45:48.240
well, you movie,
you play in this NSMovieView.

00:45:48.240 --> 00:45:51.580
Or you, you movie,
you play in this CarbonMovieControl.

00:45:51.580 --> 00:45:54.550
There are also third-party
ActiveX controls available

00:45:54.590 --> 00:45:56.400
if you're using Win32 APIs.

00:45:56.800 --> 00:46:01.300
And those things are able to take care
of all those programming details for you.

00:46:01.840 --> 00:46:03.560
Like, well,
how do I get an event in the form

00:46:03.560 --> 00:46:06.380
of a classic event record to tell
the movie that a click happened?

00:46:06.380 --> 00:46:09.160
Don't even worry about it.

00:46:10.920 --> 00:46:15.730
However, if you choose to worry about it,
there are some details that

00:46:15.800 --> 00:46:17.380
you might want to be aware of.

00:46:17.460 --> 00:46:22.190
For example, the age-old question,
"How do I tell QuickTime

00:46:22.320 --> 00:46:24.320
Well, here's some time for
you to do processing.

00:46:24.440 --> 00:46:26.360
QuickTime movies,
since they're normally heavily

00:46:26.360 --> 00:46:28.920
display oriented if you're playing
them where the user can see them,

00:46:29.010 --> 00:46:30.490
they do run on the main thread.

00:46:30.600 --> 00:46:34.960
And QuickTime is architected in such a
way that playback doesn't block the UI.

00:46:35.080 --> 00:46:38.860
But the way that it works is that the
application has to tell QuickTime,

00:46:38.910 --> 00:46:42.330
here's a little slice of time that
you can use for doing some processing.

00:46:42.460 --> 00:46:45.730
Fetch some media that you need to decode.

00:46:46.090 --> 00:46:47.650
And decode some.

00:46:47.660 --> 00:46:49.330
And oh, by the way,
return in like no time at all.

00:46:49.730 --> 00:46:52.240
So here is what you will
want to do on Mac OS X.

00:46:52.240 --> 00:46:55.030
We now have a science,
whereas before it was all magic,

00:46:55.150 --> 00:46:58.320
we now have science attached to how
often you need to tell QuickTime,

00:46:58.320 --> 00:47:00.080
here's a little time for processing.

00:47:00.640 --> 00:47:03.520
What I have here is a snippet
of code that I'm using in

00:47:03.520 --> 00:47:05.300
combination with a CF timer.

00:47:05.300 --> 00:47:08.880
And when my CF timer's time task fires,
what I'm going to do is I'm

00:47:08.990 --> 00:47:12.150
going to tell a set of objects,
in this particular case,

00:47:12.170 --> 00:47:15.580
this primary objects or
underscore primary objects thing,

00:47:15.760 --> 00:47:18.240
it might be a CF set,
it's a list of objects that

00:47:18.240 --> 00:47:21.410
manage QuickTime movies,
I'm going to tell all of them,

00:47:21.540 --> 00:47:25.390
run your function, run your application,
and then I'm going to tell

00:47:25.390 --> 00:47:27.730
them to run the function.

00:47:27.800 --> 00:47:47.900
[Transcript missing]

00:47:48.140 --> 00:47:51.620
or we really need you to
do it again real fast.

00:47:51.620 --> 00:47:55.760
And so QuickTime will return
to you an interval that you can

00:47:55.890 --> 00:47:57.630
wait before calling this again.

00:47:57.800 --> 00:48:01.290
And then what you want to do is
tell your CF timer to fire after

00:48:01.290 --> 00:48:05.350
that interval has expired and then
this will happen again and all your

00:48:05.350 --> 00:48:07.450
QuickTime movies will be tasked.

00:48:07.450 --> 00:48:10.800
You can set a minimum interval
so that you're not spending

00:48:10.810 --> 00:48:12.670
all the CPU time doing this.

00:48:14.810 --> 00:48:17.950
And then the function that you
might fire on your objects,

00:48:17.950 --> 00:48:21.060
that setApplier function,
might cause this to be fired

00:48:21.060 --> 00:48:22.200
on all of your objects.

00:48:22.200 --> 00:48:23.960
In this case, I'm using a Cocoa example.

00:48:23.960 --> 00:48:27.830
I actually am using an NSTimer with
a toll-free bridge to CFTimer to

00:48:27.830 --> 00:48:33.040
fire this function that will tell
all of my objects the value parameter

00:48:33.040 --> 00:48:35.910
passed in here to call a method idle.

00:48:35.910 --> 00:48:39.130
And that idle method will
probably call QuickTime and say

00:48:39.280 --> 00:48:42.910
MCIdle if it's using the movie
controller or moviesTask if not.

00:48:43.820 --> 00:48:47.210
So that's how to do that on Mac OS X.

00:48:48.180 --> 00:48:51.080
Here's something really obscure.

00:48:51.080 --> 00:48:52.770
But I promised that I was going
to answer this question at

00:48:52.830 --> 00:48:53.550
the beginning of the session.

00:48:53.550 --> 00:48:56.790
And since I am forced to keep my promise
or they'll throw me off the stage,

00:48:56.790 --> 00:49:00.910
what if I have an NSTime interval
and I want to tell QuickTime that's

00:49:00.910 --> 00:49:02.390
that amount of time?

00:49:02.450 --> 00:49:03.540
What do I do?

00:49:03.560 --> 00:49:06.640
An NSTime interval is
a floating point value.

00:49:06.640 --> 00:49:10.380
It's a double precision value
that expresses a number of

00:49:10.820 --> 00:49:13.190
seconds as a floating point value.

00:49:13.200 --> 00:49:16.960
What I want to do is turn this into
a data structure that QuickTime can

00:49:16.960 --> 00:49:18.900
recognize as that same amount of time.

00:49:18.990 --> 00:49:21.910
Well,
what we're doing here is using some--an

00:49:21.910 --> 00:49:24.510
obscure function in the math package.

00:49:24.610 --> 00:49:28.360
Please give me the magnitude
of that NSTime interval.

00:49:28.360 --> 00:49:33.240
And according to the magnitude,
that's the frex--.

00:49:33.270 --> 00:49:35.810
is the founder of the
NSTimeInterval function.

00:49:35.820 --> 00:49:38.630
According to the magnitude
of that NSTimeInterval,

00:49:38.630 --> 00:49:42.990
we're going to choose a time scale to use
to represent the time value in QuickTime.

00:49:42.990 --> 00:49:47.080
So if the value is really large,
we're going to use a smaller time scale.

00:49:47.440 --> 00:49:50.810
If the value is relatively small,
we'll use microseconds because

00:49:50.880 --> 00:49:54.100
that's a very good timescale
to use with QuickTime.

00:49:54.130 --> 00:49:57.020
Then once we've chosen the timescale,
we're going to go ahead and convert

00:49:57.100 --> 00:49:59.280
that NSTimeValue to a time value.

00:49:59.280 --> 00:50:04.160
We multiply the value by the timescale
and write it into the time record.

00:50:04.440 --> 00:50:07.800
So if you're trying to call
an API like setMovieTime,

00:50:07.800 --> 00:50:10.860
where the time interval has been
expressed to you as an NSTime interval,

00:50:10.920 --> 00:50:14.340
you can use a function like
this to do the conversion.

00:50:17.110 --> 00:50:20.780
You're thinking, why did I show that?

00:50:20.920 --> 00:50:21.610
OK.

00:50:21.730 --> 00:50:25.390
So I mentioned to you earlier,
to take care of a lot of these details,

00:50:25.400 --> 00:50:28.690
you can use higher level objects
that know how to do things

00:50:28.820 --> 00:50:30.480
like process user events.

00:50:30.660 --> 00:50:32.120
They know how to task movies.

00:50:32.200 --> 00:50:34.910
In some cases,
they have higher level methods

00:50:35.020 --> 00:50:38.520
so that you don't even have to
use any of the file manipulation

00:50:38.520 --> 00:50:40.210
that I showed you earlier.

00:50:40.330 --> 00:50:42.570
For Carbon, we have the movie control.

00:50:42.770 --> 00:50:44.560
For Cocoa, we have nsmovieview.

00:50:44.670 --> 00:50:49.840
And for Java, we have two components,
a Java AWT component and a Java Swing

00:50:49.840 --> 00:50:51.800
J component that you can use.

00:50:51.840 --> 00:50:55.100
And I mentioned there are third
party ActiveX controls as well.

00:50:55.150 --> 00:50:57.790
If you're a Carbon app,
you can use a Carbon movie

00:50:57.870 --> 00:51:00.910
control via the simple API,
create movie control,

00:51:00.910 --> 00:51:03.080
and it will do all the work for you.

00:51:03.210 --> 00:51:06.910
We're revising the Carbon movie control
to fix the major gotcha with it,

00:51:06.910 --> 00:51:10.580
so that there were some limitations
in its use if you combined it with

00:51:10.650 --> 00:51:14.820
the use of HI views in a Carbon app,
some problems with setting the clip.

00:51:14.860 --> 00:51:19.000
We're going to take care of
that for you in QuickTime 6.4.

00:51:19.040 --> 00:51:22.400
Let me show you just
how easy that can be.

00:51:30.720 --> 00:51:36.420
So back to Xcode, recent project,
demo movie control.

00:51:36.460 --> 00:51:39.350
Here I have a very
simple application that,

00:51:39.350 --> 00:51:42.490
well, plays arbitrary QuickTime movies.

00:51:42.530 --> 00:51:45.960
Basically,
since you probably can't see the whole

00:51:46.160 --> 00:51:48.910
flow of code in the back of the room,
it does call and their movies.

00:51:48.960 --> 00:51:50.020
It's a good citizen.

00:51:50.330 --> 00:51:54.110
It prepares QuickTime for calls
upon movie toolbox functions.

00:51:54.210 --> 00:51:57.020
It then calls a function
that implements itself,

00:51:57.030 --> 00:52:01.700
"Give me a movie," that uses some of the
very same APIs that I showed you earlier.

00:52:01.790 --> 00:52:06.220
What this function does is uses a panel
to allow the user to select a file and

00:52:06.640 --> 00:52:10.770
extracts from the API that displays
the panel a reference to the file.

00:52:10.790 --> 00:52:14.180
Then it creates a data ref for
that file and opens the movie

00:52:14.180 --> 00:52:16.080
via a new movie from data ref.

00:52:16.140 --> 00:52:19.250
Then what it does is creates
a Carbon movie control where

00:52:19.370 --> 00:52:20.960
I create movie control.

00:52:21.000 --> 00:52:24.100
And it does a little
housekeeping with the control.

00:52:24.720 --> 00:52:26.250
And that's basically it.

00:52:26.420 --> 00:52:31.300
That's all it takes for your
application using Carbon to be able

00:52:31.300 --> 00:52:33.560
to display arbitrary QuickTime media.

00:52:33.720 --> 00:52:39.590
So I should be able to open up any of
these movies that I created earlier.

00:52:39.620 --> 00:52:40.440
I have a little bug here.

00:52:40.440 --> 00:52:42.900
I've got to resize this
before it shows up.

00:52:43.440 --> 00:52:45.320
and here it is.

00:52:45.340 --> 00:52:48.620
This slide show that iPhoto created
can be displayed in this Carbon app

00:52:48.710 --> 00:52:50.880
with just that amount of code.

00:52:52.940 --> 00:52:56.070
something similar in Cocoa.

00:52:56.130 --> 00:53:00.420
In this particular example,
I was too lazy even to alter the example.

00:53:00.440 --> 00:53:06.640
This simple Cocoa movie is available for
you as sample code on Apple's website.

00:53:06.700 --> 00:53:12.730
It uses NSMovie and NSMovieView in order
to implement a very simple application

00:53:12.730 --> 00:53:14.670
that does something very similar.

00:53:14.670 --> 00:53:17.860
In this particular case,
instead of displaying a panel to allow

00:53:17.860 --> 00:53:21.860
the user to choose arbitrary media,
it reads the media from the application

00:53:21.860 --> 00:53:23.690
bundle itself using NSBundle.

00:53:24.070 --> 00:53:25.750
Well, how does it do that?

00:53:25.750 --> 00:53:28.720
It gets the URL for the
media from NSBundle,

00:53:28.790 --> 00:53:31.980
creates a data ref for the URL,
and then uses new movie from data ref.

00:53:31.980 --> 00:53:36.250
And then it opens up the movie
and displays it in an NSMovieView.

00:53:38.640 --> 00:53:40.220
Thank you for the audio.

00:53:40.240 --> 00:53:42.140
Should have turned it down.

00:53:42.150 --> 00:53:46.500
Okay, so that's all that you need to do.

00:53:46.590 --> 00:53:48.320
Back to slides.

00:53:57.940 --> 00:54:01.440
If you are using Java,
the good news is our support for

00:54:01.440 --> 00:54:03.840
QuickTime for Java is ongoing.

00:54:03.840 --> 00:54:05.740
We have a new version
of QuickTime for Java,

00:54:05.760 --> 00:54:10.170
Java 6.1 is its version number,
that's available for seeding, I believe,

00:54:10.170 --> 00:54:10.780
today.

00:54:10.840 --> 00:54:14.090
You can get access to it
from your ADC account.

00:54:14.400 --> 00:54:21.550
It works with both JDK 1.3
and 1.4.1 on Windows with the

00:54:21.550 --> 00:54:25.300
Sun Java VM and on Mac OS X.

00:54:26.980 --> 00:54:30.330
It has a complete up-to-date set
of bindings to QuickTime C APIs.

00:54:30.330 --> 00:54:33.010
So all the APIs that we've
gone over today and the other

00:54:33.010 --> 00:54:36.930
APIs in QuickTime's API set,
you can call using QuickTime for Java.

00:54:36.930 --> 00:54:41.180
But it also has higher level
modules in the QuickTime.app.view

00:54:41.180 --> 00:54:45.130
package for displaying movies,
both using an AWT component and a

00:54:45.130 --> 00:54:47.400
swing component that you can use.

00:54:47.960 --> 00:54:50.810
Now, if you're using earlier
versions of QuickTime for Java,

00:54:50.910 --> 00:54:53.000
some code migration might be necessary.

00:54:53.000 --> 00:54:54.820
We'll talk about the details in a moment.

00:54:54.890 --> 00:54:57.340
But let's look inside the
package to see what you get.

00:54:58.970 --> 00:55:01.900
We have a number of classes
that will do some work for you.

00:55:01.950 --> 00:55:04.490
If you have some media and
some references to the media,

00:55:04.490 --> 00:55:07.070
you can use a QuickTime factory
class to create the components

00:55:07.110 --> 00:55:08.260
to display the media.

00:55:08.260 --> 00:55:12.180
We have some holdovers from the
earlier version of QuickTime for Java,

00:55:12.250 --> 00:55:15.630
Qt Image Producer, Movie Player,
Graphics Importer Draw we

00:55:15.630 --> 00:55:17.140
continue to support.

00:55:17.150 --> 00:55:21.490
The Java AWT component and
the QuickTime Swing component,

00:55:21.490 --> 00:55:24.870
I believe I have misnamed on this slide.

00:55:25.050 --> 00:55:29.230
This name doesn't match
what's in the Seed,

00:55:29.230 --> 00:55:32.490
but don't worry,
we'll reconcile that shortly.

00:55:33.950 --> 00:55:35.630
And here's an example
of how you can use this.

00:55:35.720 --> 00:55:39.900
If you're using
Java AWT to display things,

00:55:39.900 --> 00:55:41.900
this is basically all you have to do.

00:55:41.910 --> 00:55:46.180
If you have a path, you say new Qt file,
and then you say you want

00:55:46.180 --> 00:55:50.020
a movie from that file,
create a movie controller for that movie,

00:55:50.090 --> 00:55:54.370
and then you want Qt Factory to create
a Java AWT component that is capable

00:55:54.370 --> 00:55:59.040
of displaying that movie and knows how
to allow the user to interact with it.

00:55:59.310 --> 00:56:00.240
That's all you need to do.

00:56:00.420 --> 00:56:02.980
If you're using Swing, similar code.

00:56:02.980 --> 00:56:05.860
In this case,
you're saying that you want a

00:56:05.860 --> 00:56:08.920
movie player from the movie,
and then you want from Qt

00:56:09.020 --> 00:56:12.410
Factory the Swing component that's
capable of displaying an instance

00:56:12.410 --> 00:56:14.500
of the Swing component that's
capable of displaying the movie.

00:56:16.510 --> 00:56:19.520
and that's all there is to that and
you can display all the QuickTime media

00:56:19.520 --> 00:56:22.840
that you've seen here at this
session in your Java applications.

00:56:22.920 --> 00:56:27.040
Now, I mentioned earlier that
some code migration might be

00:56:27.040 --> 00:56:30.070
necessary if you're using earlier
versions of QuickTime for Java.

00:56:30.470 --> 00:56:32.640
We have deprecated a number of packages.

00:56:32.760 --> 00:56:35.540
Some of these are smaller packages
and some of them were larger.

00:56:35.620 --> 00:56:37.160
But why have we done this?

00:56:37.240 --> 00:56:38.700
There are two reasons.

00:56:38.790 --> 00:56:44.460
One, some of these packages depended on
behavior that was available on legacy

00:56:44.460 --> 00:56:49.260
versions of OSs that QuickTime was housed
on and that were supported in legacy

00:56:49.260 --> 00:56:53.000
implementations of Java SDK on Mac.

00:56:53.080 --> 00:56:57.250
For example, some of these were tightly
coupled with QuickDraw support.

00:56:57.350 --> 00:57:00.060
So what we've done is said, well,
instead of supporting

00:57:00.100 --> 00:57:03.400
all of that legacy stuff,
what we want to do is to move

00:57:03.400 --> 00:57:07.600
towards a model which is more
consistent with the standards that

00:57:07.650 --> 00:57:09.700
have emerged in Java over time.

00:57:09.730 --> 00:57:13.400
A number of the classes in these
packages were designed before

00:57:13.400 --> 00:57:17.050
standards emerged in Java,
such as Java Swing.

00:57:17.180 --> 00:57:21.540
So we gave you solutions for doing things
in these packages that were completely

00:57:21.980 --> 00:57:27.300
orthogonal to the way Java application
developers typically work today.

00:57:27.400 --> 00:57:32.240
So what we're doing now is we're changing
our support at that intermediate level

00:57:33.140 --> 00:57:36.390
to adopt the standards that have emerged.

00:57:36.890 --> 00:57:41.060
Now some of these packages may have
things in them that you are dependent on.

00:57:41.060 --> 00:57:43.800
Some code migration will
be necessary on your part.

00:57:43.860 --> 00:57:46.100
Be part of the seed,
find out the details,

00:57:46.260 --> 00:57:46.980
and then work with us.

00:57:47.070 --> 00:57:51.700
We'll help you make the move
and we'll talk about options.

00:57:51.790 --> 00:57:55.990
I have a demo over on my Windows machine.

00:58:02.800 --> 00:58:21.600
[Transcript missing]

00:58:23.340 --> 00:58:26.660
Here is an example of the use of the
Java AWT component that we supply

00:58:26.660 --> 00:58:28.180
for you in QuickTime for Java.

00:58:28.520 --> 00:58:31.480
It has the ability, of course,
to play the movie.

00:58:34.930 --> 00:58:41.040
with high quality audio straight
out of my bio and the ability

00:58:41.040 --> 00:58:45.220
to select an alternate piece
of media from using standard

00:58:45.220 --> 00:58:48.320
Java UI and display that as well.

00:58:48.320 --> 00:58:49.890
Quick example of

00:58:50.600 --> 00:59:01.400
[Transcript missing]

00:59:01.740 --> 00:59:06.620
We're using here several
instances of our swing component

00:59:06.950 --> 00:59:07.840
together with some other things.

00:59:07.910 --> 00:59:10.080
This is Java animation down here.

00:59:10.170 --> 00:59:14.650
And here is an image
using the image drawer.

00:59:15.110 --> 00:59:17.080
And here is a movie.

00:59:19.580 --> 00:59:22.720
Now I show you this on Windows to
illustrate the point that this is

00:59:22.800 --> 00:59:26.000
going to work with exactly the same
implementation on both Mac OS X and

00:59:26.000 --> 00:59:27.880
on Windows using the same Java code.

00:59:28.020 --> 00:59:30.390
It delivers on the promise
of the cross-platform

00:59:30.500 --> 00:59:32.080
compatibility of Java apps.

00:59:32.080 --> 00:59:35.560
Okay.

00:59:39.370 --> 00:59:40.640
Back to slides.

00:59:40.670 --> 00:59:43.360
Ooh, quicker than I am.

00:59:43.420 --> 00:59:46.700
I haven't talked too much about
QuickTime for Cocoa as yet.

00:59:46.760 --> 00:59:50.130
I thought at one point while we were
developing the session that I would

00:59:50.130 --> 00:59:52.350
have a fantastic announcement to make
for you at the end of the session

00:59:52.670 --> 00:59:55.360
that would keep you on the edge
of your seats for the entire time.

00:59:55.440 --> 00:59:57.460
However,
Tim Schaaf went and blew it this morning

00:59:57.630 --> 01:00:02.320
and told you that we're doing initial
work on QuickTime for Cocoa and we'll

01:00:02.330 --> 01:00:06.630
have a seed later this summer that goes
beyond what's already available for

01:00:06.630 --> 01:00:09.100
support for QuickTime in the app kit.

01:00:09.160 --> 01:00:10.870
Well,
let's talk about what that support is

01:00:10.960 --> 01:00:13.140
that you already have in the app kit.

01:00:13.210 --> 01:00:16.500
You have NSMovieView and NSMovie.

01:00:16.570 --> 01:00:21.560
They provide fundamental support that
has matured and is extremely reliable.

01:00:21.630 --> 01:00:25.670
You can, with these classes,
manage and play all of the media

01:00:25.790 --> 01:00:27.600
formats that QuickTime supports.

01:00:27.700 --> 01:00:28.980
Very simple to use.

01:00:29.030 --> 01:00:32.750
You don't even have to go down to
the C-level API to open a movie

01:00:32.750 --> 01:00:34.920
from an arbitrary file or URL.

01:00:35.090 --> 01:00:37.920
Example of usage is up there on the wall.

01:00:39.650 --> 01:00:41.850
A number of Apple applications
use this facility.

01:00:42.000 --> 01:00:44.420
Sherlock uses this, for example,
to display movie trailers

01:00:44.770 --> 01:00:46.590
in its movies channel.

01:00:46.740 --> 01:00:48.600
What are we going to do?

01:00:48.910 --> 01:00:51.680
Suppose you put a bunch of
QuickTime programmers together in a

01:00:51.680 --> 01:00:57.170
room and you gave them the problem of
designing and implementing a set of

01:00:57.360 --> 01:01:03.800
Cocoa classes that integrated well with
Foundation and AppKit that used the

01:01:03.800 --> 01:01:09.160
same data structures and methodologies
that were common in Cocoa applications.

01:01:09.260 --> 01:01:13.070
And yet, had the flavor of QuickTime,
what would we do?

01:01:13.490 --> 01:01:16.120
Well, naturally,
what we would do is to use the very

01:01:16.180 --> 01:01:19.720
same abstractions that we talked
about at the beginning of the session.

01:01:19.810 --> 01:01:25.400
The same ways that we talk about media
in QuickTime for the last 12 years,

01:01:25.490 --> 01:01:27.310
we're going to talk about
it in Cocoa as well.

01:01:27.620 --> 01:01:31.800
Here's a sampling of the kinds of classes
that you can expect from us when we see

01:01:31.800 --> 01:01:33.940
QuickTime for Cocoa later this summer.

01:01:34.360 --> 01:01:36.720
You'll be able to manipulate movies.

01:01:36.810 --> 01:01:40.340
A lot of the very same code that
I've put in my slides will be in

01:01:40.450 --> 01:01:42.860
the implementation of Qt Movie.

01:01:42.910 --> 01:01:44.670
So now,
after you've sat through all of this,

01:01:44.690 --> 01:01:46.750
you can realize if
you're a Cocoa developer,

01:01:46.750 --> 01:01:48.980
I didn't need to know that at all.

01:01:49.040 --> 01:01:52.940
Because we'll take care of all
of that for you in these classes.

01:01:56.610 --> 01:01:59.960
So now it will be possible with even
fewer lines of code for you to load all

01:01:59.960 --> 01:02:02.700
the media that a movie plays into memory.

01:02:05.100 --> 01:02:07.950
Finally,
we have some classes that help us to

01:02:08.190 --> 01:02:10.160
bridge to other APIs in common use.

01:02:10.430 --> 01:02:13.520
I listed QT time here because it
knows how to do that FREXP thing

01:02:13.520 --> 01:02:14.920
that I mentioned earlier.

01:02:14.920 --> 01:02:17.800
You can initialize a time,
a QT time from an NS time interval,

01:02:17.800 --> 01:02:20.940
from a time record, from a time value,
from a time value of 64,

01:02:20.950 --> 01:02:23.330
from a comp time value,
are there any more?

01:02:23.330 --> 01:02:27.910
And it will know how to deal with it
and then you can pass that around to

01:02:27.920 --> 01:02:30.730
express time in QuickTime for Cocoa.

01:02:30.890 --> 01:02:32.780
So look for that later this summer.

01:02:32.780 --> 01:02:49.520
If you are interested in this session,
please do not hesitate to contact us.

01:02:49.600 --> 01:03:03.520
We are happy to answer
any questions you have.

01:03:03.940 --> 01:03:03.960
Thank you.

01:03:03.960 --> 01:03:03.960
I hope you enjoyed this session.

01:03:03.960 --> 01:03:03.960
I hope you enjoyed it.

01:03:03.960 --> 01:03:03.960
We will see you next time.

01:03:03.960 --> 01:03:03.960
Bye-bye.

01:03:06.030 --> 01:03:10.500
Okay, so I covered a lot of
material in this session.

01:03:10.560 --> 01:03:13.940
There's a lot more to be said
about new QuickTime APIs and new

01:03:13.940 --> 01:03:16.280
capabilities here at the conference.

01:03:16.350 --> 01:03:19.910
Now, I want to tell you,
even if you use these intermediate

01:03:19.910 --> 01:03:23.420
level modules like NSMovieView or
the Carbon Movie Control,

01:03:23.470 --> 01:03:27.160
in all of these environments,
including Java, you have access to the

01:03:27.460 --> 01:03:31.210
QuickTime primitives,
the movie, the track, the media,

01:03:31.340 --> 01:03:34.600
and you can use the
QuickTime C APIs if you need to,

01:03:35.020 --> 01:03:38.580
to extend the functionality
of the classes,

01:03:38.580 --> 01:03:41.310
the modules that you're using.

01:03:41.310 --> 01:03:42.260
Also, as requirements

01:03:45.320 --> 01:03:47.100
are presented to the QuickTime team.

01:03:47.200 --> 01:03:50.760
We expand and update our
API sets to cover new needs.

01:03:51.100 --> 01:03:52.720
This is happening all the time.

01:03:52.900 --> 01:03:54.510
QuickTime is a living work.

01:03:54.650 --> 01:03:56.670
This year alone,
we're talking about threading,

01:03:56.670 --> 01:03:59.580
we're talking about new audio facilities,
we're talking about

01:03:59.600 --> 01:04:01.700
improved color matching.

01:04:01.880 --> 01:04:06.260
You can expect this kind of expansion
and an increase in functionality

01:04:06.260 --> 01:04:08.260
from QuickTime every year.

01:04:08.260 --> 01:04:12.990
You can gain access to all this
functionality in your applications.

01:04:13.120 --> 01:04:15.640
Use the APIs that I've mentioned,
and your application

01:04:15.680 --> 01:04:16.750
will grow with QuickTime.

01:04:18.920 --> 01:04:22.340
Now, if you have needs that
I haven't covered here,

01:04:22.400 --> 01:04:26.590
if you have some problems in your
application that we haven't talked about,

01:04:26.670 --> 01:04:30.600
an excellent place for you to go to get
more information is the QuickTime Lab in

01:04:30.630 --> 01:04:32.940
Sacramento downstairs by the cafe.

01:04:33.080 --> 01:04:36.550
But there are other sessions for you
to go to as well where some of these

01:04:36.570 --> 01:04:38.760
topics will be covered formally.

01:04:38.820 --> 01:04:42.280
If you didn't go to the
State of the Union this morning,

01:04:42.280 --> 01:04:43.880
well, buy the DVD.

01:04:44.590 --> 01:04:48.340
The session that will cover more
details about audio in QuickTime,

01:04:48.370 --> 01:04:52.340
well, how exactly did we reimplement
QuickTime sound media using Core Audio?

01:04:52.340 --> 01:04:54.920
I don't know if I'll actually
tell you all the details,

01:04:55.000 --> 01:04:57.700
but how can I use Core Audio in
combination with QuickTime?

01:04:57.700 --> 01:04:59.470
Go to the session in Russian Hill.

01:04:59.480 --> 01:05:01.660
That's Wednesday, tomorrow, 9 a.m.

01:05:01.670 --> 01:05:02.410
Get up early.

01:05:02.510 --> 01:05:03.090
Be here.

01:05:04.720 --> 01:05:09.020
What if I want to know these advanced
QuickTime programming techniques such as,

01:05:09.310 --> 01:05:11.540
well, multi-threading?

01:05:11.630 --> 01:05:13.040
Come to the session in Pacific Heights.

01:05:13.040 --> 01:05:15.100
That's tomorrow at 2:00 PM.

01:05:15.250 --> 01:05:17.580
In fact, that's this room here,
I believe.

01:05:17.860 --> 01:05:18.890
will camp out right back here.

01:05:19.020 --> 01:05:19.590
Plenty of room.

01:05:19.600 --> 01:05:23.800
All right, what if I want to follow up on
something that was mentioned

01:05:23.800 --> 01:05:24.920
by Tim Schaaf this morning?

01:05:24.920 --> 01:05:28.790
What if I want to plug in modules
to QuickTime Streaming Server to add

01:05:28.890 --> 01:05:30.350
functionality on the server side?

01:05:30.380 --> 01:05:33.000
Come to the QuickTime Streaming
Server programming session.

01:05:33.000 --> 01:05:35.600
That's at the mission, 2 p.m.

01:05:35.700 --> 01:05:36.720
Thursday.

01:05:38.400 --> 01:05:40.400
Finally,
something that I didn't mention here,

01:05:40.460 --> 01:05:43.440
but similar to the flavor of these
intermediate modules that I talked

01:05:43.510 --> 01:05:48.140
about for Cocoa and for Carbon,
there is the ability to use QuickTime in

01:05:48.140 --> 01:05:49.910
other programming environments as well.

01:05:49.920 --> 01:05:53.710
Well, what if I just want to play a
QuickTime movie in my Visual Basic app?

01:05:53.930 --> 01:05:57.100
Yes, I can say Visual Basic on
this stage at this conference.

01:05:59.860 --> 01:06:03.000
I think.

01:06:03.000 --> 01:06:05.740
What if I want to play a
QuickTime movie in my application that

01:06:05.740 --> 01:06:07.320
I created with Apple Script Studio?

01:06:07.380 --> 01:06:09.970
What if I want to play a
QuickTime movie in an application

01:06:10.050 --> 01:06:11.440
I create with Real Basic?

01:06:11.540 --> 01:06:14.480
There's a session that will cover
the details of how to do that.

01:06:14.610 --> 01:06:17.360
It's called QuickTime Alternative
Programming Environments.

01:06:17.360 --> 01:06:19.500
Lots of great music,
lots of great programming.

01:06:19.580 --> 01:06:22.150
Pacific Heights, this room, Friday,
10:30.

01:06:22.150 --> 01:06:23.040
Is there music?

01:06:23.420 --> 01:06:24.950
No music.

01:06:25.290 --> 01:06:28.910
Okay, so if you have questions after
the conference and you want to

01:06:28.910 --> 01:06:31.410
email somebody to make sure the
question is appropriately routed,

01:06:31.760 --> 01:06:35.010
your person to contact, Guillermo Ortiz,
QuickTime man,

01:06:35.010 --> 01:06:38.020
can you do any better than that,
at Apple.com.

01:06:38.070 --> 01:06:41.620
Also an alternative contact
for the QuickTime Cocoa seat,

01:06:41.620 --> 01:06:44.770
so QT Cocoa seat at
Apple.com or QuickTime man.

01:06:47.910 --> 01:06:50.300
for yet more information.

01:06:50.310 --> 01:06:54.270
You can turn to the reference library
that's available for QuickTime already

01:06:54.390 --> 01:06:56.300
on the Apple developer website.

01:06:56.390 --> 01:06:58.840
QuickTime, of course,
is a mature technology.

01:06:58.850 --> 01:07:00.100
It's well documented.

01:07:00.120 --> 01:07:02.730
And here are some documents
that have been made available

01:07:02.730 --> 01:07:07.380
recently for QuickTime and
their paths from the ADC home.

01:07:07.460 --> 01:07:10.840
So shop for information on the web.

01:07:10.860 --> 01:07:14.230
And yet more places to look
on the web for information.

01:07:17.010 --> 01:07:18.010
and Kevin Calhoun.

01:07:18.150 --> 01:07:20.080
And finally,
if you miss any of the others,

01:07:20.080 --> 01:07:23.350
do not miss the opportunity to
meet with QuickTime engineers,

01:07:23.510 --> 01:07:27.480
those irascible yet charming engineers
who provide QuickTime for you.

01:07:27.560 --> 01:07:30.070
In fact,
provide a new version of QuickTime every

01:07:30.090 --> 01:07:33.310
several weeks for you are here at
the conference and they're at the

01:07:33.410 --> 01:07:37.830
QuickTime lab and they're willing to help
you use QuickTime in your application.

01:07:37.900 --> 01:07:41.380
So go there and find out just how
dedicated these people really are.