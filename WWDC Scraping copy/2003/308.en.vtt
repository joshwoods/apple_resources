WEBVTT

00:00:26.460 --> 00:00:28.590
For those of you that are at
the DevTools Feedback Forum,

00:00:28.700 --> 00:00:31.580
this time I will try
to stay on the stage.

00:00:33.590 --> 00:00:35.820
Some people were there.

00:00:35.820 --> 00:00:36.760
That's me.

00:00:36.870 --> 00:00:42.220
So we're just going to do a little
bit of an overview of debugging.

00:00:42.220 --> 00:00:44.040
And then we'll get into
a little bit of detail.

00:00:44.150 --> 00:00:46.280
Some of the stuff you would
have seen before if you'd

00:00:46.280 --> 00:00:48.200
seen the other Xcode sessions.

00:00:48.220 --> 00:00:52.980
But I want to go into how some of
the features work a little bit.

00:00:53.070 --> 00:00:54.720
So we'll go over how to get started.

00:00:54.720 --> 00:00:57.060
I'm going to go over a little
bit of tools to show you how

00:00:57.070 --> 00:00:58.720
Crash Reporter works in Panther.

00:00:58.720 --> 00:01:03.480
And then we'll go through some
UI with Scott Tucker will come back.

00:01:03.480 --> 00:01:07.000
We'll do some advanced
GDB command line work.

00:01:07.050 --> 00:01:10.170
And then we'll have some demos.

00:01:10.710 --> 00:01:15.750
So, what you guys probably, you know,
if you have to use debuggers a lot,

00:01:15.780 --> 00:01:18.240
you know, maybe you shouldn't be
doing what you're doing.

00:01:18.380 --> 00:01:21.350
So, this is kind of...

00:01:22.640 --> 00:01:28.580
I kind of look at debuggers as a crutch
for my friend's program has a problem.

00:01:28.580 --> 00:01:32.620
How can I help my friend fix my problem?

00:01:32.620 --> 00:01:33.840
So what is debugging?

00:01:33.840 --> 00:01:34.850
Why does it crash?

00:01:34.960 --> 00:01:38.170
Why does it

00:01:38.300 --> 00:01:48.200
[Transcript missing]

00:01:48.760 --> 00:01:51.350
So what do we give you as part of Xcode?

00:01:51.510 --> 00:01:54.160
So in addition to what
you think of as debugging,

00:01:54.160 --> 00:01:58.220
there's actually a lot of tools on the
system that we've kind of talked about

00:01:58.220 --> 00:02:01.620
in other sessions as performance tools,
like Sampler and malloc-debug,

00:02:01.620 --> 00:02:04.220
and even the Chud tools,
but those are all actually

00:02:04.220 --> 00:02:06.620
very useful for debugging too.

00:02:06.620 --> 00:02:10.600
And we will go into a little bit of
detail of how to use malloc-debug later.

00:02:10.600 --> 00:02:13.320
No demos on that though,
we're just going to get real

00:02:13.320 --> 00:02:15.100
nerdy and talk about it.

00:02:15.100 --> 00:02:19.000
But, you know,
if your program is hanging or crashing,

00:02:19.000 --> 00:02:22.340
Sampler and malloc-debug can
be very useful before you start

00:02:22.340 --> 00:02:26.800
dropping down into GDB or using
the debugger UI inside Xcode.

00:02:27.860 --> 00:02:31.380
So, Crash Logs,
if you've got a program that crashes,

00:02:31.610 --> 00:02:35.460
you probably want to find out what
happened and where it crashed.

00:02:35.460 --> 00:02:37.970
So there's a--most you
guys should know this,

00:02:38.080 --> 00:02:42.010
but the console application under
Applications Utilities has a

00:02:42.010 --> 00:02:45.440
preference to enable crash reporting.

00:02:45.440 --> 00:02:47.490
And that actually get set on by default,
I believe,

00:02:47.490 --> 00:02:49.200
when you install the developer tools.

00:02:49.200 --> 00:02:52.910
But there's also another preference
you can set that lets you have

00:02:52.910 --> 00:02:56.600
the crash thing pop up as soon
as your application crashes,

00:02:56.710 --> 00:02:58.720
you'll get a window up here.

00:02:58.800 --> 00:03:02.320
This has changed a little
bit from Jaguar to Panther.

00:03:02.320 --> 00:03:06.130
So now the logs actually appear
in your home directory library

00:03:06.130 --> 00:03:08.080
instead of the system library.

00:03:08.090 --> 00:03:11.790
And instead of getting separate
windows for each of the crash logs,

00:03:11.790 --> 00:03:14.040
you actually have a drawer on the side.

00:03:14.140 --> 00:03:18.040
If you played with the Panther preview,
you'll be pretty obvious

00:03:18.040 --> 00:03:19.520
as to what's changed.

00:03:19.520 --> 00:03:21.280
So what's in the log?

00:03:21.280 --> 00:03:25.160
The log has a stack trace for
all your-- It's got the register

00:03:25.160 --> 00:03:27.800
state for the thread that crashed.

00:03:27.800 --> 00:03:30.570
And if it crashed in an area
that has debug information,

00:03:30.680 --> 00:03:33.460
it also has the file and line number.

00:03:33.460 --> 00:03:37.250
Some of the things to be careful about is
if you're writing a program that crashes

00:03:37.250 --> 00:03:41.970
a lot during your development cycle,
these files get bigger and bigger as each

00:03:41.970 --> 00:03:45.650
crash gets appended to the end of the
log and they stay until you delete them.

00:03:45.750 --> 00:03:47.740
They don't go away after
you reboot the system.

00:03:47.740 --> 00:03:49.560
They are not considered temporary files.

00:03:49.560 --> 00:03:52.760
So be careful and manage your crash
logs if you're crashing a lot.

00:03:52.950 --> 00:03:53.760
Okay.

00:03:53.760 --> 00:03:55.410
crashing a lot.

00:03:56.470 --> 00:04:00.310
So when I say debugging,
I generally mean GDB and

00:04:00.310 --> 00:04:03.050
debugging C-based programs.

00:04:03.060 --> 00:04:06.710
And the way that works inside Xcode
is there's actually three separate

00:04:06.750 --> 00:04:08.910
distinct unit processes involved.

00:04:09.020 --> 00:04:11.500
There's the Xcode UI,
there's the GDB debugger,

00:04:11.500 --> 00:04:13.900
and then there's your target application.

00:04:13.970 --> 00:04:19.420
And they all talk to each other via
different IPC mechanisms to communicate.

00:04:19.460 --> 00:04:23.710
Xcode and GDB actually are very tightly
coupled for a lot of the features,

00:04:23.710 --> 00:04:25.400
as you'll see in a little bit.

00:04:25.530 --> 00:04:27.800
And then GDB, of course,
is going to issue low-level

00:04:27.880 --> 00:04:31.150
calls down to your application,
mock-level calls, actually,

00:04:31.150 --> 00:04:36.170
to control and single-step and
collect exceptions from your program.

00:04:37.730 --> 00:04:44.970
So Xcode is really just the GDB user
interface when regard to debugging.

00:04:45.070 --> 00:04:46.630
Of course,
it's a lot more from other sessions,

00:04:46.730 --> 00:04:48.390
but we're talking about debugging here.

00:04:48.540 --> 00:04:50.320
So what does it let you do?

00:04:50.320 --> 00:04:54.670
It lets you view threads and stacks
and local variables and you can type in

00:04:54.670 --> 00:04:57.250
expressions and it'll all be displayed.

00:04:57.250 --> 00:04:58.840
You can set breakpoints.

00:04:58.840 --> 00:05:04.720
You can basically not type
GDB commands and debug your program

00:05:04.720 --> 00:05:09.840
and see results and interactively
iterate over your program.

00:05:09.840 --> 00:05:13.280
The important thing is all these cool
new features that we've been talking

00:05:13.350 --> 00:05:16.760
about all week like fix and continue,
zero link,

00:05:16.760 --> 00:05:20.770
which really isn't a debugging feature,
but fix and continue mostly

00:05:20.820 --> 00:05:22.450
and these new data formatters.

00:05:22.450 --> 00:05:25.670
These are things that are only
accessible via the Xcode UI.

00:05:25.880 --> 00:05:29.560
Do not try to access them
from the GDB command line

00:05:29.620 --> 00:05:32.070
because they will not work.

00:05:32.070 --> 00:05:35.010
Xcode also has support for
debugging non-C based languages

00:05:35.010 --> 00:05:37.960
like Apple script and Java,
but we're not going to talk

00:05:37.960 --> 00:05:39.990
about that at all today.

00:05:41.410 --> 00:05:45.050
So what do you need to do to make
sure your program can be debugable?

00:05:45.070 --> 00:05:49.220
If you have a new project that you're
creating with one of the Xcode templates,

00:05:49.390 --> 00:05:51.980
or if you are upgrading a
project builder project,

00:05:51.980 --> 00:05:55.150
the development build style
should set the correct preferences

00:05:55.150 --> 00:05:57.150
for you in your project.

00:05:57.230 --> 00:06:01.080
And when you click build,
it should just work.

00:06:01.150 --> 00:06:03.670
If you have an older or legacy project,
such as you're bringing in an open

00:06:03.670 --> 00:06:08.190
source project that uses Makefiles
or some other build system that

00:06:08.220 --> 00:06:12.490
you want to integrate into Xcode,
you need to make sure that you pass

00:06:12.490 --> 00:06:16.300
the correct flags to the compiler to
enable debug information generation,

00:06:16.300 --> 00:06:18.010
and on GCC that's dash G.

00:06:18.080 --> 00:06:21.380
And also, you need to make sure you
turn off optimization.

00:06:21.380 --> 00:06:26.230
We do not deal with optimized
code right now very well.

00:06:26.300 --> 00:06:29.760
It may work,
but you may see some weird things

00:06:29.790 --> 00:06:31.470
as you're debugging your program.

00:06:31.470 --> 00:06:34.940
You can see lines stepping
back and forth as you say step,

00:06:34.940 --> 00:06:37.610
so you could get confused.

00:06:38.930 --> 00:06:42.330
So one other thing is if
you're debugging a framework,

00:06:42.490 --> 00:06:46.970
you need to make sure that you set the
path to your debug framework and not

00:06:46.970 --> 00:06:51.800
the--if it's a system framework that's
installed in system library frameworks,

00:06:51.800 --> 00:06:55.720
you want to make sure that you've
set the path correctly to the

00:06:55.720 --> 00:07:00.040
debug library and that's in the
inspector for the framework--or

00:07:00.040 --> 00:07:02.100
for the framework in the UI.

00:07:02.140 --> 00:07:05.440
And please use an absolute path
there because otherwise it'll

00:07:05.500 --> 00:07:08.800
try to be a little too smart
and you may get the wrong thing.

00:07:10.490 --> 00:07:13.080
Oops, that didn't work.

00:07:13.190 --> 00:07:14.480
So what's new?

00:07:14.610 --> 00:07:17.750
So I kind of briefly touched this.

00:07:17.860 --> 00:07:20.870
Custom data formatters you've seen
and heard about in previous sessions,

00:07:20.870 --> 00:07:22.720
if you've seen any of the tool sessions.

00:07:22.890 --> 00:07:25.680
Fix and continue we've been
talking about all week.

00:07:25.680 --> 00:07:30.970
We've also added support for stopping on
catching and throwing the C++ exceptions.

00:07:30.990 --> 00:07:35.860
And we've cleaned up the
debugging UI in Xcode.

00:07:35.880 --> 00:07:39.300
And hopefully we are minimizing
the amount of time you have to

00:07:39.360 --> 00:07:42.710
type at the GDB console prompt.

00:07:43.760 --> 00:07:46.460
So data formatters, why are they good?

00:07:46.460 --> 00:07:50.460
What they do is they allow
you to summarize data.

00:07:50.570 --> 00:07:53.470
If you've been using
Project Builder and debugging

00:07:53.470 --> 00:07:56.970
and you have a complex data type,
you've got all these turn downs

00:07:56.970 --> 00:08:00.620
and it can take up a lot of screen
real estate to show your either

00:08:00.620 --> 00:08:05.960
class hierarchy or substructures
or elements in your structure.

00:08:05.960 --> 00:08:08.780
So you can actually create
a formatter to display that,

00:08:08.780 --> 00:08:11.120
what you care about on one line.

00:08:11.120 --> 00:08:15.550
We also support custom plug-ins
for the data formatters.

00:08:15.680 --> 00:08:20.100
The way it's architected right
now is you need to have a

00:08:20.100 --> 00:08:23.870
function that returns a value,
which is great for Cocoa,

00:08:23.870 --> 00:08:27.090
but Carbon APIs tend to
pass things by reference,

00:08:27.090 --> 00:08:30.730
return values by reference,
and return an error code as the

00:08:30.740 --> 00:08:33.000
return value of the function,
which you really don't want

00:08:33.000 --> 00:08:34.200
to display the error code.

00:08:34.200 --> 00:08:37.380
You want to return,
display the actual data.

00:08:37.440 --> 00:08:41.230
And so we have a plug-in
architecture that you can write

00:08:41.230 --> 00:08:42.520
your own for custom things.

00:08:42.540 --> 00:08:44.790
Or we actually supply a
bunch of system types.

00:08:44.930 --> 00:08:50.710
And I will kind of encourage you to
attend tomorrow morning's 9:00 a.m.

00:08:50.710 --> 00:08:52.590
session bright and early
after the party tonight,

00:08:52.730 --> 00:08:56.100
where Chris Espinosa will
go over that in detail.

00:08:57.510 --> 00:09:00.630
You can also annotate things with text.

00:09:00.650 --> 00:09:05.240
So if you had--and I think you saw this
in Ted's session earlier in the week,

00:09:05.350 --> 00:09:07.760
if you were there where
you can actually say,

00:09:07.810 --> 00:09:11.000
you know, this is my X coordinate,
Y coordinate, et cetera.

00:09:11.000 --> 00:09:18.500
So it's very easy to see at
a glance what's going on.

00:09:18.510 --> 00:09:19.600
There's also some expression
evaluation that can happen.

00:09:19.980 --> 00:09:26.740
Important caveats or things to be
careful or cognizant about is the

00:09:26.840 --> 00:09:29.970
formatter itself is actually bound
to the type of the object that

00:09:29.970 --> 00:09:31.460
you're setting the formatter for.

00:09:31.460 --> 00:09:33.660
It's not just that instance of the type.

00:09:33.800 --> 00:09:39.390
So if you have a local variable that's
an NSString or an integer or whatever,

00:09:39.510 --> 00:09:44.540
and you set a format string on it,
that format will be applied to all

00:09:44.540 --> 00:09:47.860
displays of integers or NSStrings in
your entire debug session.

00:09:48.060 --> 00:09:51.160
and David Maybe sometime
we will expand that,

00:09:51.290 --> 00:09:54.260
but right now for this release
it's going to be single

00:09:54.260 --> 00:09:56.760
formatted string for each type.

00:09:57.580 --> 00:10:02.930
and we actually have 35 formatters
for Carbon system types right now.

00:10:02.940 --> 00:10:03.700
That list can grow.

00:10:03.700 --> 00:10:05.600
That covers most of them.

00:10:05.600 --> 00:10:09.160
We're also shipping a bunch of
base Cocoa foundation formatters.

00:10:09.320 --> 00:10:13.590
So out of the box,
you will actually get a fairly good

00:10:13.590 --> 00:10:17.890
experience of these opaque types
that Carbon tends to pass around.

00:10:20.570 --> 00:10:21.500
Hello.

00:10:21.500 --> 00:10:23.000
Not working.

00:10:23.000 --> 00:10:26.430
So, I wanted to bring up Scott Tooker,
and he's going to give you a little

00:10:26.430 --> 00:10:31.180
overview of the UI and how it's
changed and why you want to use it.

00:10:36.930 --> 00:10:39.650
So what we're going to be
looking at today is Sketch.

00:10:39.670 --> 00:10:42.800
It's a common,
very well-known Objective-C example

00:10:42.800 --> 00:10:44.180
we ship on the system.

00:10:44.270 --> 00:10:50.680
And just to start,
let me just bring up the breakpoints.

00:10:50.720 --> 00:10:53.940
I've actually set a breakpoint
in STK graphics so that when

00:10:53.950 --> 00:10:56.860
we go to draw a rectangle,
it'll break.

00:10:57.320 --> 00:11:00.280
And so let me just go ahead and show you.

00:11:00.280 --> 00:11:02.680
One thing that we've had,
we had in the old project builder,

00:11:02.770 --> 00:11:05.090
we continue to have an Xcode,
but people ask from time to time,

00:11:05.100 --> 00:11:08.280
is how do I set up, you know,
a symbolic breakpoint?

00:11:08.280 --> 00:11:09.420
I want to break on rays.

00:11:09.420 --> 00:11:13.720
I want to break on a function name
where I don't necessarily have the code.

00:11:13.910 --> 00:11:17.470
Well, if you go to the debug menu,
show breakpoints,

00:11:17.530 --> 00:11:21.890
you can actually just click new
breakpoint and then type in,

00:11:21.890 --> 00:11:21.890
and

00:11:28.380 --> 00:11:30.320
And then that's actually
just passed directly down to

00:11:30.320 --> 00:11:33.750
GDB when they set a breakpoint.

00:11:33.780 --> 00:11:34.520
And it's easy as that.

00:11:34.520 --> 00:11:36.020
You can obviously just
hit New Breakpoint,

00:11:36.110 --> 00:11:36.930
get additional ones.

00:11:36.960 --> 00:11:39.730
We also,
in the breakpoint columns you see,

00:11:39.830 --> 00:11:43.050
we sort them by the file
they're in and all that.

00:11:43.060 --> 00:11:47.620
So let me go ahead and bring up-- build

00:11:52.160 --> 00:11:54.890
So first I just wanted to go through
the interface real quickly here.

00:11:54.890 --> 00:11:58.340
This is the default layout.

00:11:58.370 --> 00:12:00.570
You'll notice,
so here we have your threads,

00:12:00.570 --> 00:12:02.800
we have the summary,
and we have the editor.

00:12:02.800 --> 00:12:06.820
And here let me actually just
get it populated with data.

00:12:06.820 --> 00:12:10.740
And so what you'll notice here is that
for areas that we have symbols and we

00:12:11.100 --> 00:12:15.690
have access to source code information,
we will show you in black.

00:12:15.710 --> 00:12:17.760
And so, for example,
if I go to like NS application, well,

00:12:17.770 --> 00:12:22.050
I don't have AppKit source
code on my machine right now,

00:12:22.110 --> 00:12:23.780
so that's in gray.

00:12:23.780 --> 00:12:25.750
And also you'll notice that because
we don't have debug symbols,

00:12:25.750 --> 00:12:27.930
we don't have any pop--we're
not populating over here.

00:12:27.930 --> 00:12:30.550
But when you do,
we'll show the variables over here and

00:12:30.640 --> 00:12:32.690
we'll show the current line we're on.

00:12:32.900 --> 00:12:35.070
This is the break point,
is the gray part.

00:12:35.110 --> 00:12:38.580
The red point is actually the PC,
and I'll get back to

00:12:38.580 --> 00:12:40.420
that in a little bit.

00:12:40.420 --> 00:12:45.600
So what I'd like to do here is
show you the different--let's show

00:12:45.600 --> 00:12:47.040
you the other debugger layouts.

00:12:47.110 --> 00:12:49.640
We got feedback that some people really
didn't like this style of layout,

00:12:49.760 --> 00:12:52.660
so we actually have two
that you can choose from.

00:12:52.660 --> 00:12:55.500
In this one,
for those people who either you have,

00:12:55.500 --> 00:12:59.100
you know, long function names or you
have a lot of variables,

00:12:59.100 --> 00:13:00.580
you can do it this way.

00:13:00.580 --> 00:13:02.580
And either one,
we actually have this little widget

00:13:02.580 --> 00:13:06.340
here that controls all three windows
because we got the feedback that,

00:13:06.340 --> 00:13:08.540
"Oh, you know,
it kind of sucks when I have to--I have

00:13:08.620 --> 00:13:11.490
to drag one way and then I have to find
another widget to drag out the other way,

00:13:11.490 --> 00:13:13.870
and I really want one place
to just control all three

00:13:13.940 --> 00:13:16.890
panes," and so we added that.

00:13:17.730 --> 00:13:18.940
It really is the small stuff.

00:13:18.940 --> 00:13:20.140
It's amazing.

00:13:20.250 --> 00:13:22.990
So the other thing I wanted to
show you is the console drawer.

00:13:23.050 --> 00:13:27.260
So in Project Builder,
we had this little console drawer.

00:13:27.700 --> 00:13:29.320
Fortunately, small screens.

00:13:29.320 --> 00:13:30.580
Let me pull it up a little bit.

00:13:30.580 --> 00:13:31.190
And here it is.

00:13:31.200 --> 00:13:32.680
You can get access to GDB.

00:13:32.740 --> 00:13:34.420
But we did get feedback
that some people were like,

00:13:34.420 --> 00:13:35.480
oh, I don't really want it in a drawer.

00:13:35.480 --> 00:13:36.960
I'd rather just have a separate window.

00:13:36.960 --> 00:13:38.890
It's a lot easier for me
if I'm going to do a lot of

00:13:38.890 --> 00:13:40.250
GDB stuff to make it really big.

00:13:40.350 --> 00:13:46.560
So we now have its own little window.

00:13:55.300 --> 00:13:57.680
So let's go ahead and hit Continue.

00:13:57.680 --> 00:13:59.720
Let me just bring up a-- don't save.

00:13:59.720 --> 00:14:00.830
So let's bring up a new file.

00:14:00.880 --> 00:14:03.070
So what I want to show you now
is I want to go into a little bit

00:14:03.070 --> 00:14:07.330
about how the data formatters work.

00:14:08.380 --> 00:14:10.870
So for this example,
I'll go to my breakpoint again.

00:14:10.890 --> 00:14:18.600
And let me actually-- I want to shit--
switch back to the other debugger.

00:14:18.600 --> 00:14:18.600
I prefer the other debugger layout.

00:14:18.600 --> 00:14:18.600
Sorry.

00:14:19.410 --> 00:14:21.400
So if I was really cool,
I'd be using Demo Assistant.

00:14:21.400 --> 00:14:23.240
And if I was a really good typist,
I'd just type it in.

00:14:23.240 --> 00:14:24.600
I am neither.

00:14:24.620 --> 00:14:26.820
So I'm just going to copy and paste.

00:14:26.890 --> 00:14:30.200
And so what you've got here is I'm
going to go through these in order.

00:14:30.200 --> 00:14:32.780
This first one,
what I'd like to do is a lot

00:14:32.790 --> 00:14:35.380
of times with Objective-C,
you can run into retain release problems.

00:14:35.390 --> 00:14:37.230
So I want a quick way
in the debugger to see,

00:14:37.310 --> 00:14:39.040
OK,
what's my retain count on this object?

00:14:39.330 --> 00:14:42.740
So what I'm going to paste
in here basically is saying,

00:14:42.740 --> 00:14:44.520
OK, I want to get an integer back.

00:14:44.520 --> 00:14:46.720
And basically,
I'm asking the variable self,

00:14:46.730 --> 00:14:48.900
what's your retain count?

00:14:49.190 --> 00:14:53.000
So if I retain that, return that,
it comes up as one.

00:14:53.040 --> 00:14:57.340
Well, that's okay, but you know,
it's kind of confusing, because one what?

00:14:57.460 --> 00:15:01.960
So I guess one thing I could do is
I could just add the retain count.

00:15:06.650 --> 00:15:10.790
Well, that's great too, but you know,
the nasty thing with self is, well,

00:15:10.850 --> 00:15:11.800
what is self?

00:15:11.850 --> 00:15:12.880
I can't tell from here.

00:15:12.880 --> 00:15:16.400
I mean, I could go down and I could look
for isa and all that kind of crap,

00:15:16.400 --> 00:15:17.530
but that's lame.

00:15:17.540 --> 00:15:19.090
I want to be able to do it right here.

00:15:19.200 --> 00:15:22.260
So, let's go ahead and add
this beginning part.

00:15:22.260 --> 00:15:26.840
And I'll just stop here for a second
and just point out that what I'm doing

00:15:26.840 --> 00:15:30.850
is I'm basically asking the isa for
the name property and then I'm saying,

00:15:30.850 --> 00:15:32.270
"Okay,
I want to return this as a string."

00:15:32.280 --> 00:15:36.100
And I'm just prepending that to the
front of what I've done here already.

00:15:39.370 --> 00:15:41.990
So now you see I get SDK RangTangle,
and you're like, oh, that's great, Scott,

00:15:41.990 --> 00:15:43.750
but does it really work?

00:15:43.760 --> 00:15:45.600
What if I do something different?

00:15:45.630 --> 00:15:48.130
So let's go ahead and hit Continue.

00:15:51.380 --> 00:15:52.140
There you go.

00:15:52.200 --> 00:15:55.300
So now I've got this nice
little formatter that for self

00:15:55.300 --> 00:15:58.090
on all these SKT graphics,
it's going to show me, oh,

00:15:58.170 --> 00:16:00.910
here's the class,
and here's the retain count.

00:16:00.960 --> 00:16:03.930
And we think this is going to be
very useful for people when they need

00:16:03.930 --> 00:16:06.970
to get custom information quickly,
when you're in a tight loop,

00:16:07.100 --> 00:16:09.550
or you just don't want to have
to dig down deep and open up

00:16:09.620 --> 00:16:12.790
all the little twiddle triangles
to see what you really want.

00:16:20.030 --> 00:16:23.140
and at this point, I believe I am done.

00:16:23.170 --> 00:16:23.730
Take it away, Jeff.

00:16:23.840 --> 00:16:25.590
Thanks, Scott.

00:16:29.950 --> 00:16:35.650
So that actually was a pretty good,
very simple demonstration of how powerful

00:16:35.660 --> 00:16:38.380
the custom data form writers can be.

00:16:38.380 --> 00:16:41.090
We're looking for feedback
on how we could improve them,

00:16:41.160 --> 00:16:44.740
adding different format strings,
what you think would be useful.

00:16:44.820 --> 00:16:47.190
So any input would be
greatly appreciated.

00:16:47.290 --> 00:16:49.880
So now I want to spend some time
talking about fix and continue.

00:16:49.990 --> 00:16:50.960
So you've seen it.

00:16:51.140 --> 00:16:51.730
What is it?

00:16:51.890 --> 00:16:52.860
What does it really do?

00:16:52.860 --> 00:16:54.080
I mean, why do you want it?

00:16:54.270 --> 00:16:58.340
It really is debugging
without stopping your program.

00:16:58.340 --> 00:17:02.460
And probably the most important use
of this is you've got a program,

00:17:02.460 --> 00:17:05.730
you've been debugging it for hours,
and you find a problem.

00:17:05.740 --> 00:17:09.850
It'll take hours to get back to
that spot in your program run again.

00:17:09.850 --> 00:17:12.110
You don't want to take that time.

00:17:12.200 --> 00:17:14.260
So you can make a change,
continue debugging,

00:17:14.260 --> 00:17:17.300
and you save that hour or two
that it would take to get to the

00:17:17.300 --> 00:17:19.940
state that caused the problem.

00:17:22.530 --> 00:17:26.500
So it's very important to note
that this does depend on tight

00:17:26.500 --> 00:17:29.040
integration between Xcode and GDB.

00:17:29.100 --> 00:17:32.260
Xcode is telling GDB which
files are changing,

00:17:32.260 --> 00:17:35.440
which binaries are being
recompiled and how it--and which

00:17:35.440 --> 00:17:37.840
source file it's associated with.

00:17:37.920 --> 00:17:42.020
So, again, I will say it again and
I will say this many times,

00:17:42.150 --> 00:17:45.060
this will not work from the command line.

00:17:45.060 --> 00:17:48.210
And also,
this is not the panacea of changing.

00:17:48.210 --> 00:17:50.780
There are a lot of things
that just won't work.

00:17:50.780 --> 00:17:54.090
And I'm going to go through how
this is implemented at kind of a

00:17:54.090 --> 00:17:58.250
high level and in the hope that it
will help you understand the types

00:17:58.260 --> 00:18:00.800
of changes that won't be allowed.

00:18:00.800 --> 00:18:03.320
Other thing,
this only works with GCC 3.3 because

00:18:03.320 --> 00:18:07.360
of some compile code generation
options that we needed to have.

00:18:07.400 --> 00:18:09.630
And it does work with zero link enabled.

00:18:09.630 --> 00:18:13.010
So you don't have to worry about
what your zero link setting

00:18:13.030 --> 00:18:14.850
is for this feature to work.

00:18:15.480 --> 00:18:19.930
So actually I covered this out of order,
but yes, it's--the other thing

00:18:19.930 --> 00:18:23.670
that this is useful for,
in addition to taking a lot of time

00:18:23.810 --> 00:18:27.350
for long-running programs is for
certain types of things you can

00:18:27.450 --> 00:18:29.340
do prototype style development.

00:18:29.340 --> 00:18:35.680
You know, if you're debugging,
you can do quick changes,

00:18:35.680 --> 00:18:39.330
modify the behavior of
a class or procedure,

00:18:39.330 --> 00:18:39.330
and just keep going
until you get it right.

00:18:40.790 --> 00:18:41.820
So how does it work?

00:18:41.960 --> 00:18:45.850
So here we have a simple,
simple program with a

00:18:45.850 --> 00:18:47.500
main and two subroutines.

00:18:47.500 --> 00:18:50.650
I chose C just because it's
easy to show on the screen,

00:18:50.650 --> 00:18:56.500
but fix and continue works with C,
Objective C, and Objective C++, and C++.

00:18:56.500 --> 00:19:01.750
So here we have main
making a call to foo.

00:19:01.780 --> 00:19:04.160
Let's see if I get these clicks
right for all the animations.

00:19:04.220 --> 00:19:05.700
This is going to be fun.

00:19:05.700 --> 00:19:09.460
So foo runs and you
find a problem in foo.

00:19:09.460 --> 00:19:10.870
You're in your debug session.

00:19:10.870 --> 00:19:11.750
There's a problem.

00:19:11.790 --> 00:19:12.750
What do you do?

00:19:12.820 --> 00:19:15.190
So you go and look at your source.

00:19:17.580 --> 00:19:19.000
So then you're going to edit your file.

00:19:19.000 --> 00:19:22.960
You're going to recompile it and click
on the little tape dispenser fix button.

00:19:23.100 --> 00:19:30.560
And what that does is it tells Xcode
to tell GDB to reload that file.

00:19:30.660 --> 00:19:36.000
And what actually is happening is GDB is
actually loading another little bundle,

00:19:36.100 --> 00:19:39.260
which I'm calling fixed foo,
in addition to the old version of foo,

00:19:39.260 --> 00:19:40.710
which is in memory.

00:19:40.800 --> 00:19:45.270
And in addition to it loading that,
what GDB is then going to do--oops,

00:19:45.390 --> 00:19:48.830
here we go--is it actually scribbles on
the first few instructions of the old

00:19:48.830 --> 00:19:51.000
foo routine to point to the new foo.

00:19:51.130 --> 00:19:54.520
Now, you might think,
"Why should I do that?

00:19:54.520 --> 00:19:56.770
Why don't we just, you know,
get rid of the old one and

00:19:56.770 --> 00:20:00.170
use the new one?" Well,
you could have a function pointer to foo

00:20:00.170 --> 00:20:02.480
that you still want to have it be valid.

00:20:02.480 --> 00:20:05.220
You could have it stashed in
a global variable somewhere.

00:20:05.220 --> 00:20:10.610
And so we actually keep all the old
data--or the old pointers valid.

00:20:10.800 --> 00:20:14.090
So, after that scribbling happens,
actually I should point out before I go

00:20:14.100 --> 00:20:19.660
on that we also do fix up references to
static global data also at this time too.

00:20:19.660 --> 00:20:23.500
So, if you're referencing a global
that happens to be in that module,

00:20:23.500 --> 00:20:25.660
the right thing should happen.

00:20:25.660 --> 00:20:28.070
So, let's get back to the flow here.

00:20:28.190 --> 00:20:32.080
So now, I'm later on in my program
and Barr wants to call foo.

00:20:32.120 --> 00:20:36.080
So, it actually is going to jump to foo,
the old version of foo,

00:20:36.220 --> 00:20:39.540
because we don't want to patch all
calls to foo to point to the new one.

00:20:39.540 --> 00:20:41.370
That would take a lot of time.

00:20:41.470 --> 00:20:44.190
So, it's going to vector through that
little jump thing that we scribbled

00:20:44.190 --> 00:20:47.680
at the beginning of the old version
of foo and end up in fixed foo.

00:20:47.830 --> 00:20:52.290
And then that's going to run--oops, come

00:20:52.550 --> 00:20:56.150
and it comes back and returns
just like Foo would have.

00:20:56.270 --> 00:21:01.350
So that is kind of a very simple
version of what's happening and I see

00:21:01.350 --> 00:21:04.610
the engineer that implemented this has
got a big smile on his face saying,

00:21:04.610 --> 00:21:08.800
"I simplified it way too much." But we
can deal with that during the questions

00:21:08.800 --> 00:21:12.280
later because that would take a long
time to really explain all the details.

00:21:12.280 --> 00:21:13.460
So limitations.

00:21:13.460 --> 00:21:16.240
So it doesn't support
all types of changes.

00:21:16.240 --> 00:21:18.090
I mentioned that earlier.

00:21:18.180 --> 00:21:22.980
What we are hoping and what we will be
doing over the process of releases of

00:21:22.980 --> 00:21:28.360
Xcode is that we want to have common
unfixable changes flagged by the IDE.

00:21:28.360 --> 00:21:32.040
And again,
do not try this from the command line.

00:21:32.040 --> 00:21:33.480
It just won't work.

00:21:34.200 --> 00:21:34.990
So what doesn't work?

00:21:35.130 --> 00:21:38.960
What types of things
aren't going to work?

00:21:39.090 --> 00:21:42.610
So if you're going to be changing
structure or class layouts that

00:21:42.610 --> 00:21:46.180
actually is going to cause different
code generations or references

00:21:46.180 --> 00:21:50.220
from other pieces of your code,
that's going to run you into problems.

00:21:50.220 --> 00:21:53.060
Changing function signatures, again,
because you're not

00:21:53.110 --> 00:21:55.640
recompiling the whole program,
you're just recompiling

00:21:55.640 --> 00:21:57.060
pieces of the program.

00:21:57.060 --> 00:21:59.540
Adding global or static
data in the module,

00:21:59.690 --> 00:22:02.650
since the rest of the
program won't know about it,

00:22:02.790 --> 00:22:04.780
you won't be able to access it.

00:22:04.780 --> 00:22:08.650
Anything that needs an initialization,
like static initializer, either C++ or C,

00:22:08.790 --> 00:22:11.670
because the initializers won't get
run when this thing gets reloaded.

00:22:11.880 --> 00:22:16.760
And again, virtual member functions
similar to changing class

00:22:16.800 --> 00:22:19.820
layouts for the same reasons.

00:22:19.820 --> 00:22:22.840
And also in addition,
if you're trying to modify a function

00:22:22.840 --> 00:22:25.790
that is at the top of the stack,
currently active,

00:22:26.160 --> 00:22:28.370
changing local data is a bad thing to do,
also,

00:22:28.520 --> 00:22:32.170
because you'll be changing the stack
frame that's currently in memory and

00:22:32.190 --> 00:22:35.900
that would confuse a lot of things.

00:22:35.900 --> 00:22:39.810
And also, if you are adding something
that gets initialized,

00:22:39.890 --> 00:22:42.450
like, you know,
even like I equals 5 earlier in

00:22:42.580 --> 00:22:45.940
the function than where you are
and you want to reference I and

00:22:45.940 --> 00:22:49.560
expect that value to be set,
that won't happen because we continue

00:22:49.680 --> 00:22:53.260
execution from where the PC was before.

00:22:54.310 --> 00:22:54.980
So what does work?

00:22:55.150 --> 00:22:56.740
That sounds like a lot of
things that don't work.

00:22:56.860 --> 00:23:01.180
But in fact, a lot of things do work,
as you've seen all week.

00:23:01.330 --> 00:23:04.820
Common logic errors tend to be
something that are easily patchable.

00:23:04.820 --> 00:23:10.900
Off by one errors,
I forgot to multiply by two, et cetera.

00:23:10.990 --> 00:23:13.590
All those things should be fixable.

00:23:13.730 --> 00:23:17.250
You can also add new calls,
add new logic to existing routines,

00:23:17.370 --> 00:23:18.230
no problem.

00:23:18.320 --> 00:23:20.140
You can delete code.

00:23:20.140 --> 00:23:24.840
You can change constants,
string constants, integer constants,

00:23:24.860 --> 00:23:26.970
whatever.

00:23:27.100 --> 00:23:33.520
And pretty much any
other common operation,

00:23:33.520 --> 00:23:37.120
you can try it and if it works, great.

00:23:37.120 --> 00:23:37.120
If not, the hope is that

00:23:37.710 --> 00:23:39.520
Whoops, come on, come on.

00:23:39.580 --> 00:23:41.420
Flip, flip.

00:23:41.420 --> 00:23:44.560
You can always, if the fix fails and the
IDE tells you the fix failed,

00:23:44.560 --> 00:23:47.340
you can always rerun your
application from the beginning.

00:23:47.440 --> 00:23:51.030
And it's our goal that over time
we actually increase the amount,

00:23:51.030 --> 00:23:54.710
the types of changes that are
allowable to be fixed and we get

00:23:54.720 --> 00:23:59.360
a lot better doing error detection
if it finds an unfixable patch.

00:23:59.360 --> 00:24:03.020
So, I bet you can find some things
that crash your debug session

00:24:03.140 --> 00:24:04.500
today with the preview.

00:24:04.580 --> 00:24:07.020
But again,
we appreciate feedback if you find those

00:24:07.020 --> 00:24:10.630
and have something that's reproducible
and then we can fix it either for

00:24:10.630 --> 00:24:12.370
the GM or for the release after.

00:24:14.340 --> 00:24:18.770
One caveat with the preview also
is right now if you do a bunch

00:24:18.770 --> 00:24:22.100
of fix and continues and then
want to rerun from the beginning,

00:24:22.100 --> 00:24:25.190
the build system isn't
quite correctly hooked up,

00:24:25.370 --> 00:24:30.190
so you will actually lose those
fixes if you rerun because it

00:24:30.210 --> 00:24:31.600
doesn't know it needs to recompile.

00:24:32.140 --> 00:24:34.840
There's actually two different
Dottos that get generated.

00:24:35.000 --> 00:24:37.790
It's kind of a bundle that gets
fixed as opposed to your regular

00:24:37.800 --> 00:24:40.970
Dotto that would get linked in or
zero linked into your application,

00:24:40.970 --> 00:24:42.680
and that'll be fixed for the GM.

00:24:42.680 --> 00:24:44.620
But right now,
make sure you click build and

00:24:44.750 --> 00:24:47.620
run instead of just run after you
do a fix and continue session.

00:24:50.910 --> 00:24:54.140
So again, I'll bring Scott back up,
and he's going to show

00:24:54.140 --> 00:24:56.620
some more fix and continue.

00:24:57.060 --> 00:24:59.440
So already you've probably
seen this several times now,

00:24:59.440 --> 00:25:02.310
and you'll notice that one of the
themes before was we always were

00:25:02.310 --> 00:25:07.060
showing you without showing you
the debugger active at the time.

00:25:07.060 --> 00:25:09.580
We kind of hit off the debugger and you
were just editing and you do a fix and,

00:25:09.580 --> 00:25:11.350
ooh, you know, you're all excited.

00:25:11.430 --> 00:25:12.940
So what I'm going to do is now focus on,
well,

00:25:12.940 --> 00:25:16.080
what if you're doing a debugging session,
you're paused and you want to do a fix?

00:25:16.080 --> 00:25:18.420
You know,
what's the experience like there?

00:25:18.520 --> 00:25:22.590
So what I'm going to do is I'm going
to start debugging Sketch again.

00:25:24.310 --> 00:25:25.570
And let's use that same breakpoint.

00:25:25.640 --> 00:25:30.360
And so what I'm going to
do-- so we're stopped,

00:25:30.360 --> 00:25:31.020
and we're about to draw.

00:25:31.020 --> 00:25:33.800
And so what I'll do is I'm just
going to comment out some lines

00:25:33.800 --> 00:25:34.960
and uncomment out some lines.

00:25:34.960 --> 00:25:38.060
So we're going to
change the color to red.

00:25:38.060 --> 00:25:40.170
And let's see what else.

00:25:41.090 --> 00:25:44.500
And let's change the
stroke line width to 8,

00:25:44.500 --> 00:25:46.620
for example.

00:25:46.630 --> 00:25:51.300
And so I can go ahead and do fix,
and then I'll continue.

00:25:53.300 --> 00:25:54.130
Huh.

00:25:54.170 --> 00:25:56.690
OK, so I got the stroke line with,
but I didn't get the red.

00:25:56.810 --> 00:25:59.640
So as Jeff pointed out, you know,
we remember where you

00:25:59.640 --> 00:26:00.360
are in the function.

00:26:00.360 --> 00:26:02.630
So when you fix the function,
we'll take you back

00:26:02.680 --> 00:26:03.920
there and continue on.

00:26:04.010 --> 00:26:06.640
So one thing in the demos that
we've done before is we've done

00:26:06.640 --> 00:26:08.490
things where it's always refreshing.

00:26:08.500 --> 00:26:11.230
But just something to remember
when you're in the debugger,

00:26:11.260 --> 00:26:13.860
that we're just going to
continue on from where you are.

00:26:13.910 --> 00:26:17.270
So that brings up the next thing,
which is, well, what if I wanted to have

00:26:17.270 --> 00:26:18.630
it actually get that fixed?

00:26:18.630 --> 00:26:21.140
Well, it would be really cool
to be able to move the PC,

00:26:21.140 --> 00:26:21.480
wouldn't it?

00:26:21.480 --> 00:26:21.480
Well, guess what?

00:26:23.970 --> 00:26:26.530
So let me go ahead and let's
just--just to show that

00:26:26.780 --> 00:26:28.540
something's actually going on here,
we fixed it.

00:26:28.550 --> 00:26:31.320
So now I'm going to
change the color to green.

00:26:33.920 --> 00:26:37.660
And I'm going to go ahead
and I'm going to fix.

00:26:37.680 --> 00:26:44.130
But let me take this to say there.

00:26:46.900 --> 00:26:49.020
There.

00:26:49.020 --> 00:26:49.880
And let's continue.

00:26:49.880 --> 00:26:52.810
Oh!

00:26:52.840 --> 00:26:53.900
Continue.

00:26:53.900 --> 00:27:01.070
Yeah, this is what I get for being cocky.

00:27:16.890 --> 00:27:19.500
Yeah, this is-- OK, well,
we'll do one more fix.

00:27:19.500 --> 00:27:26.710
So let me go ahead and do the fix.

00:27:31.890 --> 00:27:33.300
Good.

00:27:33.300 --> 00:27:34.290
So let me-- oops.

00:27:34.300 --> 00:27:34.800
No, no, no.

00:27:34.800 --> 00:27:35.300
Continue.

00:27:35.300 --> 00:27:35.800
Continue.

00:27:35.800 --> 00:27:36.300
Continue.

00:27:36.300 --> 00:27:36.800
Continue.

00:27:36.800 --> 00:27:37.300
Continue.

00:27:37.300 --> 00:27:40.800
So what we're going to do-- let me
just-- let's just catch up here.

00:27:40.870 --> 00:27:43.800
So let's close this file just so
we can get rid of the clutter.

00:27:43.800 --> 00:27:45.810
Open up a new one.

00:27:46.440 --> 00:27:47.700
Okay.

00:27:47.710 --> 00:27:50.230
So, for example, let's change it to,
let's change it back to,

00:27:50.240 --> 00:27:52.090
let's change it to black,
so we'll just get a black one.

00:27:52.100 --> 00:27:54.590
So, just to show you that I really,
I'm not using all this to

00:27:54.590 --> 00:27:55.860
just divert the attention.

00:27:55.860 --> 00:28:00.620
But, so I'm going to fix,
so I'll go ahead and fix this,

00:28:00.620 --> 00:28:04.050
and then I'm going to drag the PC back.

00:28:04.080 --> 00:28:08.770
And so then I'm going to say,
and I'm also going to, just for,

00:28:08.770 --> 00:28:14.280
disable that, and let's continue.

00:28:14.300 --> 00:28:16.200
Thank you.

00:28:16.200 --> 00:28:17.690
There you go.

00:28:21.660 --> 00:28:25.030
One more thing we wanted to show
you at Jeff's request is there

00:28:25.030 --> 00:28:27.900
will be several times when you
do something and it doesn't fix.

00:28:27.900 --> 00:28:30.180
So we'd like to show you a case
of where that actually happens.

00:28:30.310 --> 00:28:33.560
So when this comes back as failing,
it's supposed to fail.

00:28:33.880 --> 00:28:39.550
So I'm going to go ahead and I'm
going to turn this breakpoint back on.

00:28:42.300 --> 00:28:45.800
And then let me go up here,
and I'm going to go up to the top.

00:28:45.850 --> 00:28:48.840
And so as Jeff pointed out,
I really shouldn't do this.

00:28:48.940 --> 00:28:51.580
But I'm not listening to
Jeff because I know what's best.

00:28:51.650 --> 00:28:53.460
And I'm going to fix it.

00:28:54.110 --> 00:28:58.040
In the future, we want to have a much
more apparent-- well,

00:28:58.110 --> 00:29:00.040
for one thing,
we want to show you the entire

00:29:00.040 --> 00:29:01.320
error and not just cut it off.

00:29:01.370 --> 00:29:04.640
But we'd like to have a panel
or a sheet come down telling you

00:29:04.680 --> 00:29:06.540
that a fix has not completed.

00:29:06.620 --> 00:29:11.740
And over time, like Jeff said,
we want it to have more feedback that,

00:29:11.740 --> 00:29:15.530
OK, this isn't going to work,
so you don't even get

00:29:15.530 --> 00:29:17.300
in these situations.

00:29:17.300 --> 00:29:20.230
And at that point, back to you, Jeff.

00:29:20.230 --> 00:29:20.230
All right, thanks, Scott.

00:29:22.700 --> 00:29:24.730
So I seem to have been
talking very quickly,

00:29:24.730 --> 00:29:27.740
so we're going to have a lot of
time for questions at the end,

00:29:27.740 --> 00:29:30.140
which is good for this type of session.

00:29:30.140 --> 00:29:34.600
So another couple things
that we have added,

00:29:34.600 --> 00:29:38.280
you've seen this I think in one of
the sessions earlier in the week,

00:29:38.280 --> 00:29:43.680
is we've added support for stopping and
catching and throwing of C++ exceptions,

00:29:43.680 --> 00:29:48.510
which is well, a often requested feature
for C++ programmers.

00:29:48.510 --> 00:29:50.850
It's a very simple UI to show.

00:29:50.850 --> 00:29:54.840
I don't know if you caught it when
Scott had the debug menu pulled down,

00:29:54.840 --> 00:29:57.730
but there's two menu items
under the debug menu,

00:29:57.820 --> 00:30:01.870
stop on C++ catch, stop on C++ throw,
and then it just stops.

00:30:01.880 --> 00:30:06.120
You get a stack trace,
you can see what's going on.

00:30:06.120 --> 00:30:09.780
You can also do a little bit
more sophisticated things

00:30:09.780 --> 00:30:13.060
from the command line,
which we'll talk after,

00:30:13.060 --> 00:30:17.670
or Klee might actually cover it when
he's talking about the command line.

00:30:18.970 --> 00:30:21.820
So I think I talked about a
lot of these caveats already,

00:30:21.910 --> 00:30:23.660
but I'm going to go over them again.

00:30:23.730 --> 00:30:28.320
The first one I didn't mention, but yes,
the custom formatters are really cool.

00:30:28.330 --> 00:30:31.330
If you notice,
they actually have a lot of code in

00:30:31.330 --> 00:30:36.180
them or can cause a lot of code to be
executed in your inferior debug process.

00:30:36.260 --> 00:30:38.540
So if you have, you know,
hundreds of them on your screen,

00:30:38.570 --> 00:30:41.190
you're starting and stopping
your process a hundred times

00:30:41.250 --> 00:30:43.070
and getting a value back to GDB.

00:30:43.160 --> 00:30:46.650
This can cause single
stepping to be slow.

00:30:46.690 --> 00:30:51.510
And you may want to disable them
and--if you're stepping and then

00:30:51.510 --> 00:30:53.420
re-enable them when you care.

00:30:53.420 --> 00:30:57.830
Also, it's important that since you are
actually executing code in the debug

00:30:57.830 --> 00:31:02.520
process that you do not take code
that might cause a deadlock to happen.

00:31:02.630 --> 00:31:05.870
So if, you know,
you're debugging some graphics thing and

00:31:05.970 --> 00:31:09.750
a core graphics routine in the system has
a lock held and you're waiting for that

00:31:09.750 --> 00:31:12.490
lock to--as part of your data formatter,
that could be a problem.

00:31:12.520 --> 00:31:15.900
It could be a problem depending on
when that data formatter is called.

00:31:15.900 --> 00:31:19.030
And also,
for the preview release right now,

00:31:19.030 --> 00:31:23.350
and we hope to improve this over time,
large zero link applications

00:31:23.550 --> 00:31:25.700
could slow down your debugging.

00:31:25.730 --> 00:31:29.530
And what I mean by that is times
to display the stack or times to

00:31:29.620 --> 00:31:33.100
single step as it's dynamically
faulting in the modules as needed.

00:31:33.110 --> 00:31:35.090
And it could take a
few seconds right now.

00:31:35.100 --> 00:31:37.810
You may see that and we're
going to try to improve that for

00:31:37.940 --> 00:31:40.750
the final shipment for the GM.

00:31:41.480 --> 00:31:43.280
So with that,
I want to bring up Klee Dienes,

00:31:43.450 --> 00:31:46.250
who's a senior GDB engineer,
and he's going to talk about how to

00:31:46.250 --> 00:31:49.010
use this stuff from the command line.

00:31:53.370 --> 00:31:53.920
Hi.

00:31:54.060 --> 00:31:56.580
So for the most part,
the things that we do on the

00:31:56.580 --> 00:31:59.800
GDB command line are things that we
hope to have be in the background.

00:31:59.800 --> 00:32:03.330
We want them to be things that you
don't pay too much attention to.

00:32:03.680 --> 00:32:09.120
So for the next five or 10 minutes,
I'm going to take those things into the

00:32:09.120 --> 00:32:14.710
foreground and hopefully tell you one
really cool feature that we've added,

00:32:14.710 --> 00:32:16.590
and then a couple of neat things
that you've always been able to do,

00:32:16.590 --> 00:32:16.590
but you might not have
known you were able to do.

00:32:16.830 --> 00:32:20.740
So our new feature is
cache symbol file support.

00:32:20.740 --> 00:32:26.070
This is basically a feature that's
designed to improve the startup time

00:32:26.070 --> 00:32:31.750
of GDB by letting you take large symbol
files and have them get stored on disk

00:32:31.790 --> 00:32:34.700
so that when GDB goes to read them,
instead of reading them,

00:32:34.710 --> 00:32:37.560
you'll see little dots go across your
screen as the symbol files get loaded.

00:32:37.560 --> 00:32:40.230
The goal is to have it,
instead of being dot, dot, dot,

00:32:40.270 --> 00:32:43.170
it should just be dot, dot, dot, dot,
dot, dot, done.

00:32:43.180 --> 00:32:46.560
A lot of people have said, hey,
we really wish GDB startup

00:32:46.560 --> 00:32:47.440
could be faster.

00:32:47.440 --> 00:32:49.670
We'd love to make it so
that it's always instant,

00:32:49.750 --> 00:32:52.390
but the least we can do is make
it so that it's a lot faster

00:32:52.460 --> 00:32:54.060
the second time you do stuff.

00:32:54.060 --> 00:32:56.750
It's just a cache.

00:32:56.750 --> 00:32:59.530
It doesn't change anything
about how it processes symbols.

00:32:59.530 --> 00:33:02.180
It should do everything exactly the same.

00:33:02.180 --> 00:33:04.660
The only goal is to make it start
up your program a lot quicker and

00:33:04.660 --> 00:33:05.980
get you debugging a lot quicker.

00:33:05.980 --> 00:33:08.810
The way it works right now
is when you install new

00:33:08.810 --> 00:33:12.390
developer tools on your system,
it builds a cache for all the

00:33:12.390 --> 00:33:14.660
system libraries on the system.

00:33:16.420 --> 00:33:17.840
It'll go ahead and use those.

00:33:17.840 --> 00:33:18.880
It'll build those just once.

00:33:18.880 --> 00:33:23.270
You can optionally tell it to create
a cache for your user binaries.

00:33:23.270 --> 00:33:24.960
I'll tell you how to do
that in a few minutes.

00:33:24.960 --> 00:33:29.210
This is the first time
we've shipped this.

00:33:29.210 --> 00:33:32.350
There's, as always,
a couple of things that can go wrong.

00:33:32.370 --> 00:33:35.350
The very first one is sometimes
those caches can get out of date.

00:33:35.350 --> 00:33:38.950
The way you'll know that they're out
of date is you'll see the big warning.

00:33:38.950 --> 00:33:41.440
It won't be red on your system,
but it'll be there.

00:33:41.440 --> 00:33:44.430
It'll say,
precompiled symbol file is out of date.

00:33:44.430 --> 00:33:45.990
Don't panic.

00:33:46.400 --> 00:33:48.060
All it means is that it's
going to take another couple

00:33:48.060 --> 00:33:49.980
of seconds to load the symbols.

00:33:49.980 --> 00:33:53.750
It should be exactly the same
as if they weren't there at all.

00:33:53.800 --> 00:33:58.100
At any time, you can update them.

00:33:58.100 --> 00:33:59.840
There's a command.

00:33:59.840 --> 00:34:02.630
I don't know if you
get the slides on this,

00:34:02.640 --> 00:34:05.760
but it's sudo or sudo,
and there is a command,

00:34:05.760 --> 00:34:08.160
user lib exec gdb cache sim files.

00:34:08.160 --> 00:34:11.990
That'll regenerate the whole
cache for the whole disk.

00:34:12.000 --> 00:34:15.520
Similarly,
if you think something's going wrong,

00:34:15.520 --> 00:34:16.900
you just don't trust them.

00:34:16.900 --> 00:34:19.510
For whatever reason, you can delete them
whenever you feel like,

00:34:19.520 --> 00:34:23.380
and you can recreate them later
if you discover that it wasn't

00:34:23.380 --> 00:34:25.630
actually that that was causing
the problem or whatever else,

00:34:25.630 --> 00:34:26.570
or if you just want to update them.

00:34:27.840 --> 00:34:36.400
So the reason that we didn't make this
always the case for all binaries is that,

00:34:36.450 --> 00:34:39.350
A, it's a new feature and we want to get
some use of it out in the field before

00:34:39.450 --> 00:34:45.500
we make it the default for everyone,
but also that sometimes

00:34:45.610 --> 00:34:48.240
you don't want it.

00:34:48.240 --> 00:34:51.320
So if you have, for example,
a lot of binaries that don't change

00:34:51.320 --> 00:34:53.890
very often and you're just changing
one thing and one part of it,

00:34:53.990 --> 00:34:56.250
like you have three
frameworks in an application,

00:34:56.250 --> 00:34:56.880
it's great.

00:34:56.880 --> 00:34:59.590
You can cache the symbol
files for the libraries,

00:34:59.590 --> 00:35:02.370
start up the application,
everything's quick.

00:35:02.430 --> 00:35:06.750
If you have one giant, massive binary,
it might not be so quick necessarily

00:35:06.850 --> 00:35:09.250
because there's a little bit of
overhead in creating the cache.

00:35:09.280 --> 00:35:12.800
So if you just had to regenerate
that cache every single time,

00:35:12.800 --> 00:35:18.340
it might take longer to regenerate the
cache than you'd say by starting up.

00:35:18.340 --> 00:35:21.470
So to get around this, for right now,
we've made it something that you

00:35:21.470 --> 00:35:23.800
can set on a per-project basis.

00:35:23.800 --> 00:35:27.400
So basically in your
per-project directory,

00:35:27.410 --> 00:35:31.390
there's a file called .gdb init
that will control how gdb behaves.

00:35:31.430 --> 00:35:34.830
And if you set the variable
generatePrecompiledSymbolFiles to 1,

00:35:34.830 --> 00:35:39.130
it'll go ahead and create those cache
symbol files for every framework

00:35:39.130 --> 00:35:42.280
that's loaded by gdb as gdb sees it.

00:35:42.300 --> 00:35:45.980
So the idea is that the first time you've
debugged a framework that you've written

00:35:45.980 --> 00:35:49.600
or some other object that you're writing,
it'll take another second

00:35:49.600 --> 00:35:51.060
or two to load it up.

00:35:51.060 --> 00:35:55.180
But after that, it'll just be dot, dot,
dot, dot, dot, done,

00:35:55.180 --> 00:35:57.200
just like we're hoping.

00:35:57.200 --> 00:35:59.560
The cache files are stored,
stored in a directory with your

00:35:59.560 --> 00:36:02.700
project called gdb_sim_file_cache.

00:36:02.780 --> 00:36:06.050
If you want to disable it,
you can just remove those files.

00:36:06.060 --> 00:36:07.920
If it's project builder,
there's a cool thing.

00:36:07.920 --> 00:36:10.480
Since project builder stores in
its build directory generally

00:36:10.480 --> 00:36:12.900
all in the same place,
those will be shared among

00:36:12.910 --> 00:36:16.400
the project builder files,
which I think is kind of neat.

00:36:16.680 --> 00:36:18.740
So, you know,
I'd love if you can try that out.

00:36:18.740 --> 00:36:21.490
You know, be sure, please let us know how
well it works for you,

00:36:21.600 --> 00:36:23.510
if it's really affecting
your performance,

00:36:23.590 --> 00:36:25.630
if it's really improving
your performance.

00:36:25.630 --> 00:36:26.950
I really hope it does.

00:36:26.980 --> 00:36:29.430
So now on to a couple
of neat features in GDB.

00:36:29.430 --> 00:36:33.320
These have been there for a long time,
but they're still really neat.

00:36:33.470 --> 00:36:37.690
The first one is watchpoints,
which is basically a way to have

00:36:37.730 --> 00:36:42.160
GDB stop when some expression
in your program has changed.

00:36:42.420 --> 00:36:45.700
So the most useful part of this
is when you want to find out

00:36:45.710 --> 00:36:47.520
if a data value has changed.

00:36:47.520 --> 00:36:51.580
You know, typically it's for finding
memory crashers or,

00:36:51.580 --> 00:36:55.290
you know, something in this library is
changing some data variable of mine,

00:36:55.290 --> 00:36:56.780
and I don't know where
it's getting changed.

00:36:56.800 --> 00:36:59.390
I don't know how it's getting changed,
but I sure know that it's bugging the

00:36:59.390 --> 00:37:01.660
hell out of me that it got changed,
and I want to know where.

00:37:01.660 --> 00:37:06.040
So what you can do is at any point you
can set a watchpoint on an expression.

00:37:06.040 --> 00:37:09.380
It can be any expression
that's valid in your program.

00:37:09.380 --> 00:37:12.400
Ideally, it shouldn't be something
that calls function.

00:37:12.400 --> 00:37:15.710
It can be function calls, but, you know,
any valid C expression is a

00:37:15.710 --> 00:37:17.500
valid watchpoint expression.

00:37:17.500 --> 00:37:20.950
And what it'll do is GDB will
protect the memory pages that

00:37:20.960 --> 00:37:25.140
are involved in that expression,
and whenever they get modified,

00:37:25.140 --> 00:37:26.100
it'll stop.

00:37:26.160 --> 00:37:28.880
It'll check the expression,
check the old value,

00:37:28.880 --> 00:37:32.120
and it will see if it needs to
report the value has changed.

00:37:32.120 --> 00:37:35.910
A couple of caveats is, you know,
if you change that value all the time,

00:37:36.010 --> 00:37:39.060
GDB's going to be stopping
your program all the time.

00:37:39.060 --> 00:37:41.080
That's going to be slow.

00:37:41.080 --> 00:37:41.110
That's going to be slow.

00:37:41.120 --> 00:37:42.350
If it's changing a code.

00:37:42.400 --> 00:37:42.950
Constantly.

00:37:42.960 --> 00:37:45.310
Particularly if it's
something on your stack,

00:37:45.310 --> 00:37:47.980
because, you know,
everything's on your stack.

00:37:48.060 --> 00:37:50.440
That's going to be getting
modified constantly.

00:37:50.440 --> 00:37:51.760
It's going to be stopping constantly.

00:37:51.760 --> 00:37:54.080
It's going to have to start the
inferior over and over and over again.

00:37:54.080 --> 00:37:56.230
That's going to be a very
unpleasant experience.

00:37:56.240 --> 00:37:59.540
But for things that are in global data,
things that aren't accessed constantly,

00:37:59.540 --> 00:38:02.430
it's a tremendously valuable feature,
particularly for, you know,

00:38:02.430 --> 00:38:04.420
I don't know what's trashing my memory.

00:38:04.420 --> 00:38:08.950
So sort of the classic example of
that is to watch a buffer and say,

00:38:09.050 --> 00:38:11.740
you know, who changed this buffer?

00:38:11.740 --> 00:38:12.320
And you'll see.

00:38:12.420 --> 00:38:14.740
In my example,
there's this little cute little

00:38:14.740 --> 00:38:17.660
curly brackets around stuff,
which some of you probably seen before.

00:38:17.660 --> 00:38:18.270
Some of you haven't.

00:38:18.320 --> 00:38:23.290
What that's saying is just take the
variable buff and treat it as if it

00:38:23.290 --> 00:38:26.790
were an array of 1024 characters.

00:38:26.860 --> 00:38:29.830
So that's basically a shorthand
for tell me when anything

00:38:29.930 --> 00:38:31.480
on this page has changed.

00:38:31.480 --> 00:38:32.440
I want GDB to stop.

00:38:32.560 --> 00:38:36.250
Tell me when on the page has changed and
give me a back trace so I can figure out

00:38:36.300 --> 00:38:38.430
exactly how I got to what was doing that.

00:38:40.580 --> 00:38:45.080
Another very useful feature
is breakpoint conditions.

00:38:45.120 --> 00:38:49.850
It's basically the ability to add a
conditional expression or a set of

00:38:49.850 --> 00:38:52.840
commands to any breakpoint or watchpoint.

00:38:52.840 --> 00:38:56.100
So what that lets you do, for example,
in the case of watchpoints,

00:38:56.210 --> 00:38:57.610
is add extra conditions.

00:38:57.640 --> 00:39:00.600
So you can say, "I not just want to stop
when this is changed,

00:39:00.640 --> 00:39:03.420
I want to stop when
it's changed to 10." Or,

00:39:03.490 --> 00:39:07.100
"I want to stop when this
pointer has become invalid." Or,

00:39:07.110 --> 00:39:10.740
you can use it for all
kinds of crazy features.

00:39:10.740 --> 00:39:13.110
In the second example,
you'll see what we've done is

00:39:13.110 --> 00:39:14.590
we've stopped on the open call.

00:39:14.740 --> 00:39:17.730
So we said, "Whenever I open a file,
no matter how, whatever reason,

00:39:17.730 --> 00:39:21.350
I want you to stop,
and then I want you to tell me

00:39:21.350 --> 00:39:24.480
what file I opened." So since
the argument's always going to be

00:39:24.490 --> 00:39:27.030
in the first argument register,
R3, we can just have it print

00:39:27.110 --> 00:39:29.730
out the file that was opened,
cast it to a string,

00:39:29.730 --> 00:39:30.740
and continue on the way.

00:39:30.740 --> 00:39:35.740
So what you'll see as you're running your
program is just a big output dump of,

00:39:35.740 --> 00:39:39.020
you know, open this, open this,
open this, open this,

00:39:39.020 --> 00:39:40.730
right down the line.

00:39:40.740 --> 00:39:42.560
It's, you know,
I'm sure there are other ways

00:39:42.560 --> 00:39:44.720
to do that exact same thing,
but it's neat that you can

00:39:44.720 --> 00:39:46.740
do that without having to
use any special features,

00:39:46.740 --> 00:39:49.720
just by setting breakpoints
and putting logs.

00:39:49.750 --> 00:39:53.240
And some people have done some
very impressive things with

00:39:53.240 --> 00:39:57.740
just breakpoint conditions,
you know, to log their programs.

00:39:57.740 --> 00:40:01.740
While we're on the topic
of memory smashers,

00:40:01.740 --> 00:40:04.740
I want to talk a little bit about
some other tools that are out there

00:40:04.750 --> 00:40:08.740
for debugging memory smashers,
the best being, or one of the best being,

00:40:08.740 --> 00:40:14.740
malloc-debug,
which is a tool that is designed to help

00:40:14.740 --> 00:40:17.740
badly behaved programs crash for you.

00:40:17.740 --> 00:40:21.740
So what it'll do is it will overwrite
freed memory after it's been freed,

00:40:21.740 --> 00:40:27.740
and it will add guard pages
before and after malloc regions,

00:40:27.740 --> 00:40:31.740
so that when you free something,
if you go to write to it later,

00:40:31.740 --> 00:40:34.710
it'll occasionally check to see,
did you write on something

00:40:34.710 --> 00:40:37.740
that you shouldn't have,
did you just overwrite the buffer,

00:40:37.740 --> 00:40:39.650
did you write before the
beginning of the buffer,

00:40:39.770 --> 00:40:42.740
and it'll generate
logging messages for you.

00:40:42.740 --> 00:40:45.420
The main reason I'm mentioning
it here is that it actually

00:40:45.420 --> 00:40:46.740
works really well with GDB.

00:40:46.740 --> 00:40:51.690
If you run a program both under
malloc-debug and GDB at the same time,

00:40:51.740 --> 00:40:54.740
you can set breakpoints at the
malloc-debug output routines.

00:40:54.740 --> 00:40:58.740
So if you set a breakpoint at, say,
for example, malloc-printf,

00:40:58.740 --> 00:41:03.550
malloc-debug will stop in the debugger,
let you get a backtrace of exactly

00:41:03.550 --> 00:41:07.040
what's doing the wrong thing,
and let you do normal

00:41:07.040 --> 00:41:08.740
debugger operations on that.

00:41:08.740 --> 00:41:11.200
So you can look at the backtrace,
find out how you got to the thing

00:41:11.200 --> 00:41:14.720
that's trashed in the memory,
and go about fixing that.

00:41:14.850 --> 00:41:17.740
For more information on that,
you can just check out the Help menu

00:41:17.740 --> 00:41:21.660
in the malloc-debug documentation,
and there's actually a pretty sizable

00:41:21.660 --> 00:41:23.740
chunk of stuff there on how to do that.

00:41:24.780 --> 00:41:29.060
The last one is on the topic
of connecting up to things that

00:41:29.060 --> 00:41:31.360
you're running or something
else is the GDB attach command.

00:41:31.360 --> 00:41:35.760
This is something that I know
we'd love to have in Xcode.

00:41:35.760 --> 00:41:41.270
It isn't in there yet, so for right now,
you can pretend it is by doing

00:41:41.270 --> 00:41:43.260
it from the GDB command line.

00:41:43.260 --> 00:41:44.500
It's a very simple syntax.

00:41:44.560 --> 00:41:48.240
You just basically say attach
and then the name of the program

00:41:48.240 --> 00:41:50.340
or the name of the program,
follow the process ID,

00:41:50.340 --> 00:41:52.380
or just the process ID by itself.

00:41:52.380 --> 00:41:54.920
What GDB will do is it will connect
up to the program you're debugging.

00:41:54.920 --> 00:41:58.320
It's pretty much just as if
you ran the program under GDB,

00:41:58.340 --> 00:42:00.940
except that you could run
it under something else.

00:42:00.970 --> 00:42:04.950
This is really great for programs
that are hard to attach to.

00:42:05.000 --> 00:42:08.040
Say they might have a
complicated startup routine.

00:42:08.360 --> 00:42:10.580
They might be, you know...

00:42:10.700 --> 00:43:52.100
[Transcript missing]

00:43:58.300 --> 00:44:00.160
Thanks, Klee.

00:44:00.160 --> 00:44:07.820
So, just a couple more things to wrap
up and then we'll go over to Q&A.

00:44:08.090 --> 00:44:10.690
We're not too short.

00:44:10.860 --> 00:44:13.610
So, you know,
one of the things I want to get across

00:44:13.610 --> 00:44:18.430
is this is--we've done a lot to try to
improve your debugging--your development

00:44:18.530 --> 00:44:21.230
productivity by improving debugging.

00:44:21.230 --> 00:44:24.130
And yeah,
I made the joke at the beginning,

00:44:24.130 --> 00:44:28.500
but we all write bugs and the best
way to fix the bugs is to find them

00:44:28.500 --> 00:44:33.130
as fast as possible and the tools
are very important to do that.

00:44:33.150 --> 00:44:35.500
Fix and continue, it's great.

00:44:35.920 --> 00:44:38.280
Play with it as much as you can.

00:44:38.430 --> 00:44:40.130
Feedback, definitely appreciated.

00:44:40.140 --> 00:44:42.030
We know there's problems with it.

00:44:42.290 --> 00:44:44.400
This is a first shot at this technology.

00:44:44.400 --> 00:44:50.240
We want to make it as robust as possible
in time for our GM when Panther ships.

00:44:50.240 --> 00:44:52.780
Custom data formatters,
you saw kind of just a real

00:44:52.780 --> 00:44:56.600
quick brief demonstration
of how powerful that can be.

00:44:56.660 --> 00:45:01.240
But remember, lots of them can make your
debugging experience slow.

00:45:01.300 --> 00:45:04.020
And then Klee talked
about cache sim files.

00:45:04.020 --> 00:45:07.420
This again, it's brand new.

00:45:07.420 --> 00:45:11.740
One thing I don't think Klee
mentioned was that we actually at

00:45:11.740 --> 00:45:15.170
install time generate cache files
for all the system libraries.

00:45:15.220 --> 00:45:17.540
So these are actually there by default.

00:45:17.540 --> 00:45:23.860
Klee was talking about how to generate
the caches for your own private code.

00:45:24.370 --> 00:45:26.610
So, how to learn more.

00:45:26.690 --> 00:45:29.300
There's documentation in
Xcode from the Help menu.

00:45:29.300 --> 00:45:31.970
Matt Morris has shown that a
number of times this week already,

00:45:31.970 --> 00:45:33.800
how to access that,
and we've actually spent

00:45:33.810 --> 00:45:35.040
a lot of effort on that,
too.

00:45:35.040 --> 00:45:40.460
Search, look,
man pages for GDB are on the system.

00:45:40.460 --> 00:45:44.150
Release notes for the compiler actually
are helpful for some of this stuff,

00:45:44.240 --> 00:45:46.800
so make sure you get the
right settings for debugging.

00:45:46.800 --> 00:45:51.380
And standard documentation,
which you don't need to go through.

00:45:51.380 --> 00:45:52.790
Who to contact?

00:45:52.860 --> 00:45:54.410
Godfrey DiGiorgi.

00:45:54.560 --> 00:45:56.280
There's his email.

00:45:56.280 --> 00:45:58.340
Email should go to him.

00:45:58.380 --> 00:46:03.170
There's also the Xcode feedback
mail list and bug reporter for bugs.

00:46:03.400 --> 00:46:04.580
Please, please file bugs.

00:46:04.770 --> 00:46:08.720
In the past, people have complained about
GDB and the debugging experience

00:46:08.820 --> 00:46:09.910
and have not filed bugs.

00:46:10.090 --> 00:46:12.190
And we look at bugs, we fix bugs.

00:46:12.440 --> 00:46:15.200
We don't fix bugs if we
don't know about the bugs.

00:46:15.200 --> 00:46:18.110
Or if they just appear in a
mailing list at some point,

00:46:18.110 --> 00:46:20.440
they will be forgotten when
we're going through a bug list.

00:46:20.440 --> 00:46:21.320
So, please, please.

00:46:21.490 --> 00:46:23.320
Please file bugs and bug reporter.

00:46:23.350 --> 00:46:27.270
And the mailing list do provide lots
of information and help for people.

00:46:28.910 --> 00:46:30.080
So it's the end of the week.

00:46:30.190 --> 00:46:33.530
There still are a couple more sessions
I need to plug for Chris in the morning,

00:46:33.530 --> 00:46:35.330
9:00 AM, bright and early.

00:46:35.340 --> 00:46:37.770
He's going to go over debugging
and tuning Carbon apps,

00:46:37.770 --> 00:46:43.070
and he will spend a significant amount
of time talking about how to write custom

00:46:43.260 --> 00:46:46.460
data format or plug-ins for Carbon types.

00:46:46.460 --> 00:46:48.490
And please attend if you're interested.

00:46:48.640 --> 00:46:53.500
And there's also a discussion on software
test tools later in the day Friday.

00:46:53.650 --> 00:46:58.010
So with that,
I would like to bring up Godfrey

00:46:58.160 --> 00:47:03.290
to keep me under control and
everybody else and the GDB team

00:47:03.300 --> 00:47:06.920
and the rest of the QA panel.

00:47:06.920 --> 00:47:09.000
CHRISTOPHER COTTEN:
If our QA panelist can please come up.

00:47:09.000 --> 00:47:09.860
Thank you very much, Jeff.

00:47:09.860 --> 00:47:11.740
That was a great job.

00:47:16.960 --> 00:47:21.110
By the way,
a comment came up earlier today that

00:47:21.110 --> 00:47:26.960
the Xcode feedback at group.apple.com
address was not accepting email.

00:47:26.960 --> 00:47:31.670
If you send to that email,
please copy to my address above that.

00:47:31.770 --> 00:47:34.900
That way,
that's a good test for me to see whether

00:47:34.900 --> 00:47:37.750
it has actually gone to the mailing list.

00:47:37.880 --> 00:47:41.680
I reset the parameters this morning,
and I'm just hoping that I'm not

00:47:41.690 --> 00:47:45.140
missing any comments you're sending in,
because we haven't seen as

00:47:45.140 --> 00:47:46.500
much as we had expected as yet.

00:47:46.830 --> 00:47:50.270
So please send us your comments,
copy them to me.

00:47:50.280 --> 00:47:52.620
I'll make sure that they get to
the list one way or the other.

00:47:52.660 --> 00:47:53.900
Okay?