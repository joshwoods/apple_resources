WEBVTT

00:00:26.700 --> 00:00:27.940
Hello.

00:00:27.940 --> 00:00:31.480
My name is Patrick Collins, and I'm the
Digital Hub Technology Manager in

00:00:31.480 --> 00:00:33.650
Developer Relations.

00:00:33.910 --> 00:00:36.370
We're going to be covering
DiscRecording APIs today.

00:00:36.470 --> 00:00:40.820
So we have the whole burning issue
team here to run through everything.

00:00:40.880 --> 00:00:43.450
They'll be here for our
Q&A after the session,

00:00:43.450 --> 00:00:45.910
and we'll get started with Drew Thaler.

00:00:45.920 --> 00:00:47.370
Thank you.

00:00:53.900 --> 00:00:54.900
welcome.

00:00:54.900 --> 00:01:00.000
So today we're going to be
talking about disc recording.

00:01:01.950 --> 00:01:04.270
My name's Drew Thaler.

00:01:04.410 --> 00:01:05.800
My title is Recording Artist.

00:01:05.800 --> 00:01:08.000
I work in the Burning Issues
group at Apple Computer,

00:01:08.000 --> 00:01:11.940
and we handle everything that has
to do with CD and DVD burning.

00:01:14.390 --> 00:01:19.010
So one year ago,
the DiscRecording APIs were

00:01:19.010 --> 00:01:20.340
introduced with Jaguar.

00:01:20.340 --> 00:01:22.780
So this is our second session.

00:01:22.790 --> 00:01:27.100
And we're going to talk about
what went on in the past,

00:01:27.100 --> 00:01:30.470
and we're going to talk
about what's new for Panther.

00:01:30.830 --> 00:01:32.360
So our topic's in session.

00:01:32.360 --> 00:01:34.650
We're going to go over the introduction.

00:01:35.210 --> 00:01:41.590
We're going to talk about the new
features in Panther for those of you that

00:01:41.590 --> 00:01:41.590
are already familiar with disc recording.

00:01:41.690 --> 00:01:43.980
And then we're going to go
ahead and do an overview of the

00:01:44.100 --> 00:01:47.480
API covering both old and new stuff.

00:01:47.900 --> 00:01:52.190
and we're going to talk about a new
feature which we call device profiles.

00:01:52.210 --> 00:01:54.420
That'll be at the end of the session.

00:01:56.480 --> 00:01:59.580
So let's talk about disc recording.

00:01:59.580 --> 00:02:00.810
What is disc recording?

00:02:00.860 --> 00:02:04.740
Well, no one can be told
what disc recording is.

00:02:04.740 --> 00:02:06.900
You have to experience it for yourself.

00:02:06.940 --> 00:02:09.000
No, no, I'm just kidding, really.

00:02:09.000 --> 00:02:14.190
Actually,
you can be told what disc recording is,

00:02:14.190 --> 00:02:14.190
and I'm going to do
it here for you today.

00:02:15.860 --> 00:02:19.430
Before we talk about
what disc recording is,

00:02:19.430 --> 00:02:22.180
though, let's talk about why.

00:02:22.270 --> 00:02:24.910
The basic problem that you have to
deal with if you're an application

00:02:24.910 --> 00:02:29.650
that wants to provide digital media
on CDs and DVDs is that really

00:02:29.650 --> 00:02:32.080
burning discs is actually pretty hard.

00:02:32.520 --> 00:02:37.340
It takes several man years of work
to implement all the various levels

00:02:37.340 --> 00:02:39.130
of things that you have to do.

00:02:39.270 --> 00:02:42.150
You have to talk to many different
layers of the operating system.

00:02:42.150 --> 00:02:44.240
You have to do the user interface.

00:02:44.240 --> 00:02:46.080
You have to go all the way
down to talking to hardware.

00:02:46.080 --> 00:02:50.090
You have to deal with all the layers
of the operating system in between,

00:02:50.090 --> 00:02:54.320
including threading, IOCIT,
disc arbitration, things like that.

00:02:54.700 --> 00:02:57.550
You have to talk directly to the drives.

00:02:57.900 --> 00:03:01.200
Different drives might have
slightly different behaviors.

00:03:01.210 --> 00:03:04.770
And you don't necessarily want to
deal with that from your application.

00:03:05.230 --> 00:03:09.660
You also have to stream your data from
the beginning of the disk to the end.

00:03:10.020 --> 00:03:14.110
A CD is generally not a
random writable thing.

00:03:14.150 --> 00:03:15.980
You can't just copy files to it.

00:03:15.980 --> 00:03:18.680
You have to start at
block zero of the disk,

00:03:18.780 --> 00:03:20.270
stream all the way to the end.

00:03:20.270 --> 00:03:24.620
And you also can't just
use normal file systems.

00:03:24.620 --> 00:03:30.370
There are specialized file
systems which are designed for

00:03:30.370 --> 00:03:30.370
CDs which are cross-platform.

00:03:30.760 --> 00:03:33.650
So there's thousands of
pages of specifications.

00:03:33.900 --> 00:03:37.040
There's this whole sea of acronyms,
and these are just the

00:03:37.040 --> 00:03:41.370
publishers of the specifications,
not even the specifications themselves.

00:03:41.590 --> 00:03:43.060
You've got all these color books.

00:03:43.060 --> 00:03:48.330
You've got the red book, the yellow book,
the orange book, the green book,

00:03:48.330 --> 00:03:50.930
the blue book, the other blue book.

00:03:50.940 --> 00:03:54.970
There's a lot of stuff to read,
and you have to pay attention

00:03:55.010 --> 00:03:59.020
to every little sentence,
and it's kind of just a big pain.

00:03:59.150 --> 00:04:00.450
And lastly, and

00:04:00.830 --> 00:04:20.110
and many others.

00:04:20.990 --> 00:04:21.300
Very much not least,
since this is the Mac,

00:04:21.300 --> 00:04:21.300
your application needs to play nicely
with all the other applications.

00:04:21.300 --> 00:04:21.300
You don't want to completely
take over the drive.

00:04:21.300 --> 00:04:21.300
You want the user to be able to
seamlessly move between your application,

00:04:21.300 --> 00:04:21.300
iTunes, the Finder, whatever else.

00:04:21.300 --> 00:04:21.300
So you need to play nice
with the other applications.

00:04:23.280 --> 00:04:30.440
So solving that problem,
we really need something that's easy,

00:04:30.630 --> 00:04:35.000
that's fast, and that's powerful.

00:04:36.200 --> 00:04:38.040
For easy,
it really needs to be accessible

00:04:38.090 --> 00:04:39.210
to application developers.

00:04:39.290 --> 00:04:43.600
We need something object-oriented
that's going to give you a nice,

00:04:43.600 --> 00:04:48.410
high-level, easy-to-interpret view
of the task at hand.

00:04:48.680 --> 00:04:50.640
You need to hide the
hardware differences.

00:04:50.640 --> 00:04:53.750
You need to have an abstraction layer
that smooths out the differences

00:04:53.810 --> 00:04:58.560
between all the devices and just
treats a CD burner as a CD burner.

00:05:00.090 --> 00:05:04.540
Because of the things with file systems
and creating the different types of data,

00:05:04.540 --> 00:05:09.320
there are some pretty common tasks
in there that would be duplicated.

00:05:09.320 --> 00:05:13.540
You don't need every application
to become a master of three

00:05:13.550 --> 00:05:14.900
different file system formats.

00:05:14.900 --> 00:05:17.520
You just need to-- it would
be nice if there's a helper to

00:05:17.520 --> 00:05:19.770
help you do that sort of thing.

00:05:20.850 --> 00:05:25.600
Having a common user interface
between applications is good.

00:05:25.600 --> 00:05:28.240
It should be kind of fast.

00:05:28.240 --> 00:05:32.120
Some applications function by writing
out all the data to disk first,

00:05:32.250 --> 00:05:35.520
creating a CD image on the hard drive,
and then sending it to the disc,

00:05:35.520 --> 00:05:36.800
sending it to the CD.

00:05:36.890 --> 00:05:40.380
And that works, but you wind up touching
the data three times.

00:05:40.400 --> 00:05:43.910
Once while you're producing it,
once getting it on and off the disk,

00:05:43.910 --> 00:05:45.800
and once sending it to the drive.

00:05:45.900 --> 00:05:48.030
And that's actually a lot slower
than just going straight from

00:05:48.120 --> 00:05:49.780
content production to the disk.

00:05:51.980 --> 00:05:53.820
And it really should be powerful.

00:05:53.840 --> 00:05:56.430
You need to be able to
not just burn a folder.

00:05:56.590 --> 00:06:00.880
You want to burn exactly
the format of data you want.

00:06:01.080 --> 00:06:04.880
You want to be able to
really burn anything.

00:06:04.930 --> 00:06:06.900
For people that really know
what they're doing and want

00:06:06.900 --> 00:06:09.250
to get down to the guts of it,
they really should be able

00:06:09.250 --> 00:06:13.360
to burn anything without
having to go out of their way.

00:06:13.360 --> 00:06:14.980
It shouldn't be purely high level.

00:06:14.980 --> 00:06:18.010
There should be access
down to the low levels.

00:06:20.030 --> 00:06:22.280
So that brings us to
disc recording itself.

00:06:22.610 --> 00:06:24.370
So what is disc recording?

00:06:24.490 --> 00:06:27.770
Well, to begin with,
it's a device abstraction layer.

00:06:27.930 --> 00:06:31.580
There's lots of devices,
there's lots of connection interfaces.

00:06:31.580 --> 00:06:34.440
You have USB, you have FireWire.

00:06:34.440 --> 00:06:38.020
All these drives might behave a little
differently underneath the hood,

00:06:38.020 --> 00:06:40.360
but you don't really
need to worry about that.

00:06:41.240 --> 00:06:43.830
There's lots of things like that.

00:06:43.980 --> 00:06:48.040
So disc recording is an
abstraction layer that makes it

00:06:48.090 --> 00:06:49.440
very easy to talk to devices.

00:06:51.190 --> 00:06:52.910
This recording is a
data streaming engine.

00:06:53.060 --> 00:06:57.990
Fundamentally, CD burning,
most CD burning is streaming.

00:06:58.250 --> 00:07:01.450
You start at the beginning and
you write all the way to the end.

00:07:01.530 --> 00:07:04.920
And that involves
real-time data production.

00:07:05.850 --> 00:07:07.290
It's a content generator.

00:07:07.310 --> 00:07:11.770
Again, generating the content
is not trivially easy.

00:07:11.900 --> 00:07:14.890
You have to generate multiple
file systems at the same time,

00:07:14.890 --> 00:07:16.440
interleave them on the disk.

00:07:16.640 --> 00:07:20.740
And if you're burning an audio CD,
for example,

00:07:20.790 --> 00:07:27.940
then you need to take your MP3 file,
decompress it, and send it to the drive.

00:07:28.410 --> 00:07:30.530
and it's a system framework.

00:07:30.750 --> 00:07:33.650
Most importantly,
Apple has already done all of this

00:07:33.780 --> 00:07:37.180
work and we've packaged it all
up for your application to use.

00:07:37.180 --> 00:07:40.960
It's the exact same stuff that iTunes,
the Finder,

00:07:40.960 --> 00:07:46.530
all of Apple's applications use
and it's available for your use.

00:07:47.630 --> 00:07:51.710
So this means for applications that
leverage the DiscRecording services

00:07:51.710 --> 00:07:53.910
that burning discs is really natural.

00:07:54.190 --> 00:07:58.690
It becomes basically a type of
printing for your digital media.

00:07:59.020 --> 00:08:02.750
You produce the content,
whether it's music, whether it's movies,

00:08:02.960 --> 00:08:07.110
scientific data, whatever it might be,
and we get it onto the disc for you.

00:08:07.110 --> 00:08:12.530
So your application is
integrated into the digital hub.

00:08:15.030 --> 00:08:19.220
So for those of you who are a little
bit familiar with DiscRecording already,

00:08:19.220 --> 00:08:22.380
we're going to touch upon
the new features in Panther.

00:08:25.540 --> 00:08:29.580
So the first thing that's new in
Panther is that disc recording

00:08:29.580 --> 00:08:31.580
is now an umbrella framework.

00:08:31.580 --> 00:08:33.830
So we've taken some of the
components of disc recording and

00:08:33.830 --> 00:08:36.640
broken them up into sub-frameworks.

00:08:36.640 --> 00:08:39.400
You might be asking, well,
what does this mean to me?

00:08:39.400 --> 00:08:42.260
Really probably not much.

00:08:42.260 --> 00:08:46.290
The only thing that it might
have to do with you is if you

00:08:46.310 --> 00:08:47.030
include -- if you include a

00:08:47.400 --> 00:09:02.200
[Transcript missing]

00:09:04.300 --> 00:09:06.060
We've got toll-free bridging.

00:09:06.070 --> 00:09:09.050
We have objects in
both C and Objective-C.

00:09:09.100 --> 00:09:11.140
In Jaguar, there were separate entities.

00:09:11.140 --> 00:09:13.900
In Panther, they're now exactly the same.

00:09:13.900 --> 00:09:17.220
A DR track ref is the
same as the DR track.

00:09:18.320 --> 00:09:20.750
We've got audio file burning.

00:09:20.900 --> 00:09:25.210
So if you're burning
an audio CD from MP3s,

00:09:25.210 --> 00:09:28.380
you don't have to write your own
MP3 decompressor or figure out

00:09:28.380 --> 00:09:30.000
how to use QuickTime to do it.

00:09:30.010 --> 00:09:32.590
We've got that code for you.

00:09:33.940 --> 00:09:38.120
We've added some pro audio features,
media catalog number, UPC code,

00:09:38.120 --> 00:09:41.730
the international standard
recording code for tracks,

00:09:41.890 --> 00:09:44.580
support for the serial
copy management system,

00:09:44.850 --> 00:09:48.320
subtract index points,
and you can also specify

00:09:48.320 --> 00:09:51.950
your burn strategy,
such as track it once or session it once,

00:09:52.180 --> 00:09:54.150
and so on.

00:09:54.370 --> 00:09:58.790
We've added Carbon accessors
for the user interface panels.

00:10:01.100 --> 00:10:03.590
We've got something that we're
going to talk about at the end of

00:10:03.650 --> 00:10:06.790
the session called Device Profiles,
which is the new way that we're

00:10:06.840 --> 00:10:11.140
going to be doing device support
basically from Panther onward.

00:10:11.140 --> 00:10:15.580
And it's not just this extra
thing that we're giving you.

00:10:15.580 --> 00:10:17.280
It's the way Apple's
going to be doing it too.

00:10:17.420 --> 00:10:20.900
So we're very interested in making
it work and making it work right.

00:10:21.120 --> 00:10:23.520
So for those of you that are
interested in Device Profiles,

00:10:23.520 --> 00:10:26.790
we'll be wanting your feedback
at the end of the session.

00:10:29.670 --> 00:10:32.960
and we've added a command line
utility to give access to some

00:10:32.970 --> 00:10:34.640
of DiscRecording's features.

00:10:34.640 --> 00:10:38.490
From the command line.

00:10:40.160 --> 00:10:47.330
So let's dig down a little bit into the
API and talk about the general concepts.

00:10:47.600 --> 00:10:51.280
So DiscRecording is an
object-oriented API.

00:10:51.280 --> 00:10:54.090
It's got these high-level objects.

00:10:54.320 --> 00:10:57.740
are available from
both C and Objective-C.

00:10:57.970 --> 00:11:01.660
And again, new in Panther,
they're toll-free bridged.

00:11:01.660 --> 00:11:04.000
So all the C objects are CF types.

00:11:04.000 --> 00:11:07.240
All the Objective-C objects
are obviously NS objects.

00:11:07.420 --> 00:11:10.680
The C objects, you know,
since they're CF,

00:11:10.680 --> 00:11:17.240
they follow retain release conventions,
they have CF collection support,

00:11:17.370 --> 00:11:19.700
there's consistent naming
conventions between them,

00:11:19.700 --> 00:11:19.700
between the functions.

00:11:20.950 --> 00:11:23.610
In general,
every object has a properties dictionary,

00:11:23.610 --> 00:11:26.450
and the properties dictionary
controls its behavior.

00:11:26.540 --> 00:11:29.680
So rather than having a whole
bunch of accessor functions,

00:11:29.780 --> 00:11:31.300
there's just one dictionary.

00:11:31.310 --> 00:11:34.810
You set properties in it,
and when it goes to do something,

00:11:34.810 --> 00:11:37.970
it checks the property,
and that's how you control it.

00:11:38.680 --> 00:11:43.050
Of course, all the APIs are thread-safe,
so you don't have to worry about calling

00:11:43.050 --> 00:11:47.500
stuff re-entrantly or adding all kinds
of extra locks to worry about things.

00:11:47.500 --> 00:11:49.020
Everything's thread-safe.

00:11:52.470 --> 00:11:57.640
So there are really three main parts
to the DiscRecording architecture.

00:11:57.690 --> 00:12:00.060
Down at the bottom,
we have the burn engine.

00:12:00.080 --> 00:12:03.630
And the burn engine is
responsible for handling devices,

00:12:03.630 --> 00:12:06.040
for burning and erasing.

00:12:06.060 --> 00:12:08.910
Those are its primary features.

00:12:09.420 --> 00:12:14.260
Building on top of that,
we have the Content Creation APIs.

00:12:14.260 --> 00:12:16.260
And these handle file system creation.

00:12:16.260 --> 00:12:19.640
And in Panther now,
they handle audio track

00:12:19.740 --> 00:12:22.290
creation from an audio file.

00:12:23.590 --> 00:12:26.760
Then parallel to that,
also building on top of the burn engine,

00:12:26.760 --> 00:12:28.180
we have the user interface.

00:12:28.300 --> 00:12:33.670
So we have panels that you can use for
burn setup for progress during a burn.

00:12:34.260 --> 00:12:36.210
And these are really
the fundamental tasks.

00:12:36.270 --> 00:12:39.510
This is everything you need to do,
hopefully, except for actually

00:12:39.690 --> 00:12:41.300
producing your content.

00:12:41.320 --> 00:12:44.210
And we've even got stuff to help
you with producing your content.

00:12:44.220 --> 00:12:50.930
So let's zoom in on the burn engine
and talk about the objects inside.

00:12:52.830 --> 00:12:56.540
So the burn engine handles four things,
really.

00:12:56.540 --> 00:12:58.700
I said three before,
but it's really four.

00:12:58.700 --> 00:13:02.060
Handles burning, handles erasing.

00:13:02.060 --> 00:13:03.970
It handles devices.

00:13:03.980 --> 00:13:06.370
It'll tell you about devices,
and you can do certain

00:13:06.370 --> 00:13:08.100
things to the devices.

00:13:08.100 --> 00:13:12.960
And as part of its device handling,
it handles media arbitration.

00:13:13.050 --> 00:13:15.240
So the burn engine is what's
responsible for helping your

00:13:15.360 --> 00:13:19.770
application play nice with iTunes
and the Finder and everything else.

00:13:21.390 --> 00:13:24.040
This is all done with really
just a small set of objects.

00:13:24.210 --> 00:13:26.860
There's four core objects.

00:13:27.930 --> 00:13:31.940
Two of them represent actions,
the burn in a race object,

00:13:31.940 --> 00:13:35.010
and two of them,
one of them represents your data,

00:13:35.010 --> 00:13:38.100
and one of them represents the
device that you're burning to.

00:13:38.270 --> 00:13:41.240
You can also sign up for notifications.

00:13:41.350 --> 00:13:43.200
And so we have our own
notification center,

00:13:43.220 --> 00:13:46.380
which we'll cover in just a moment,
where you can sign up for

00:13:46.380 --> 00:13:48.750
notifications on your object.

00:13:50.560 --> 00:13:55.370
So the DR burn object
represents the act of burning.

00:13:55.430 --> 00:14:00.100
And so you create it,
and then you ask it to write a layout.

00:14:00.380 --> 00:14:01.110
And what's a layout?

00:14:01.220 --> 00:14:03.220
Well, a layout can be just one track.

00:14:03.220 --> 00:14:07.340
If you're perhaps burning a data disk,
it can be multiple tracks.

00:14:07.430 --> 00:14:10.020
Say if you're burning
a multi-track audio CD,

00:14:10.100 --> 00:14:17.020
can even be an array of array of tracks,
in which case you get multiple sessions.

00:14:18.680 --> 00:14:20.990
Now, burn is an asynchronous operation.

00:14:21.070 --> 00:14:25.160
So you kick it off,
and it happens on its own thread.

00:14:25.160 --> 00:14:28.260
And then you get notifications
for progress and completion.

00:14:28.260 --> 00:14:31.420
So you don't have to worry about giving
it time from your user interface.

00:14:31.420 --> 00:14:33.300
You can do whatever you need to do.

00:14:33.300 --> 00:14:37.220
And we take care of it,
and it just works.

00:14:39.260 --> 00:14:42.550
and I are going to talk
about the DR track object.

00:14:42.600 --> 00:14:45.710
The DR track object
represents your track.

00:14:45.710 --> 00:14:48.720
It could be a CD audio track,
a data track.

00:14:48.720 --> 00:14:50.120
It's flexible.

00:14:50.120 --> 00:14:58.110
We basically expose a lot of
MMC down in the DR track so you

00:14:58.280 --> 00:15:00.190
can really do anything in MMC.

00:15:00.190 --> 00:15:00.190
You provide your data through a callback.

00:15:00.430 --> 00:15:05.400
and C is a function pointer and
Objective-C is an object in the selector.

00:15:05.470 --> 00:15:11.020
We'll call you back at real time during
the burn right when we need the data.

00:15:11.980 --> 00:15:15.800
and obviously you might be doing some
sort of computation to produce the data,

00:15:15.800 --> 00:15:20.790
perhaps decompression, decrypting,
whatever.

00:15:21.060 --> 00:15:26.560
We know that the CPU is not infinite,
so we'll run a production cycle for

00:15:26.680 --> 00:15:31.260
you so that you can find out just
how fast you can produce the data.

00:15:31.350 --> 00:15:32.870
So you don't need to
do that test yourself.

00:15:32.980 --> 00:15:37.300
We've already got the helpers in there
to help you find the maximum data rate.

00:15:37.330 --> 00:15:41.990
And that helps us set the burn speed
correctly so that it doesn't underrun.

00:15:44.190 --> 00:15:47.080
So we've got the burn object,
we've got the track

00:15:47.100 --> 00:15:50.860
which specifies the data,
now we've got the device object.

00:15:51.100 --> 00:15:55.610
This represents basically
where you're burning to.

00:15:55.810 --> 00:15:59.080
There's one DR device object for
every device that's the burning

00:15:59.090 --> 00:16:01.360
device that's attached to the system.

00:16:01.360 --> 00:16:05.220
And the DR device object can report
the capabilities of the device,

00:16:05.240 --> 00:16:07.270
which are basically
static and unchanging.

00:16:07.420 --> 00:16:10.940
Things like this device can write CDRs.

00:16:11.100 --> 00:16:13.900
This device can write DVDRs.

00:16:15.830 --> 00:16:21.840
It also can tell you about the media
inside the device so that you can find

00:16:22.060 --> 00:16:26.780
out whether the disk inside is blank,
whether it's already been burned,

00:16:26.820 --> 00:16:30.960
what type it is, whether it's CDR, DVDR,
that sort of thing.

00:16:31.090 --> 00:16:33.130
It's also got a few
commands that you can do,

00:16:33.140 --> 00:16:38.090
such as opening and closing the tray,
unmounting and ejecting volumes.

00:16:38.530 --> 00:16:43.140
And DRDevice will send
its own notifications.

00:16:43.140 --> 00:16:44.860
And these are a little different.

00:16:44.910 --> 00:16:49.400
So basically, since DRDevice is not
something you create,

00:16:49.400 --> 00:16:52.000
it's something that represents
a device that's on the system.

00:16:52.000 --> 00:16:54.910
Well, we live in a dynamic world,
and the user can go ahead and plug

00:16:54.940 --> 00:17:00.900
devices in and pop them out at any time
with firmware and technologies like that.

00:17:00.900 --> 00:17:03.440
So we'll send you a notification
when a device shows up.

00:17:03.680 --> 00:17:06.060
We'll send you a notification
when a device goes away.

00:17:06.060 --> 00:17:08.880
So you don't have to sit there
and keep pulling the list

00:17:09.080 --> 00:17:11.420
will tell you when it changes.

00:17:12.210 --> 00:17:16.670
We also will tell you when media comes
and goes because that's something

00:17:16.720 --> 00:17:18.260
else that you might need to pull for.

00:17:18.260 --> 00:17:19.780
Well, you don't need to pull.

00:17:19.940 --> 00:17:22.970
We do it all with notifications.

00:17:23.860 --> 00:17:29.940
And it'll tell you when
devices come and go,

00:17:29.980 --> 00:17:33.010
when devices are available or not.

00:17:33.120 --> 00:17:36.160
For example, if iTunes is running
and it's doing a burn,

00:17:36.160 --> 00:17:39.400
well, you can't really do anything to the
device while iTunes is doing a burn.

00:17:39.410 --> 00:17:42.900
So the device goes busy for
the duration of that burn.

00:17:42.930 --> 00:17:44.760
Then it comes back afterwards.

00:17:44.830 --> 00:17:46.610
And we'll send you a
notification when it goes busy.

00:17:46.740 --> 00:17:51.760
We'll send you a notification
when it's available again.

00:17:53.690 --> 00:17:57.120
To handle all these notifications
that I've been talking about,

00:17:57.230 --> 00:17:59.270
we've got the DR Notification Center.

00:17:59.410 --> 00:18:01.990
If you've used the NS and
CF Notification Centers,

00:18:02.090 --> 00:18:03.500
those are pretty much the same thing.

00:18:03.500 --> 00:18:05.950
They have basically the same interface.

00:18:05.950 --> 00:18:09.560
There's a couple of details of
the implementation that differ.

00:18:09.560 --> 00:18:12.290
For one thing,
DR Notification Center was designed

00:18:12.440 --> 00:18:14.260
for inter-thread notifications.

00:18:14.260 --> 00:18:18.450
We're doing the burn up on a
high-priority real-time thread,

00:18:18.530 --> 00:18:23.180
and we're sending notifications
back to you on your main thread.

00:18:23.730 --> 00:18:29.750
So obviously, the burn thread can't stop
and wait for your main thread.

00:18:29.840 --> 00:18:32.000
So the Notification
Center sits in the middle,

00:18:32.000 --> 00:18:35.640
and it'll throttle things.

00:18:35.830 --> 00:18:39.140
and coalesce multiple notifications
into a single one if you're

00:18:39.290 --> 00:18:42.540
updating your UI or whatever else.

00:18:43.980 --> 00:18:46.650
and even though we'll coalesce
some of the notifications,

00:18:46.700 --> 00:18:49.260
we guarantee delivery for
all the important ones.

00:18:49.480 --> 00:18:52.170
You know, if the burn,
if we send notifications

00:18:52.270 --> 00:18:55.930
for 1%, 2%, and 3% complete,
you can miss one and two as

00:18:55.980 --> 00:19:01.370
long as you get 3%. But if,
for example, the burn finishes, well,

00:19:01.430 --> 00:19:03.600
that's, you know,
that's an important notification.

00:19:03.600 --> 00:19:06.100
We guarantee delivery of that one.

00:19:06.410 --> 00:19:09.950
So you can use these notifications
to key off the state,

00:19:09.980 --> 00:19:12.130
to understand the state
of all the objects.

00:19:12.280 --> 00:19:15.190
So you'll get all the
important transitions.

00:19:15.450 --> 00:19:17.390
and this is really strongly recommended.

00:19:17.550 --> 00:19:19.990
Sometimes it's easier to
write the code that pulls.

00:19:20.140 --> 00:19:22.680
The problem with the pulling code
is that sometimes you wind up in

00:19:22.710 --> 00:19:27.050
a state where things happen just
a little too quickly and you don't

00:19:27.050 --> 00:19:28.860
pick up what happens on the pulling.

00:19:28.910 --> 00:19:34.790
If you sign up for notifications,
we'll make sure that you get

00:19:34.790 --> 00:19:34.790
all the notifications you need.

00:19:37.120 --> 00:19:40.190
So we've got our core objects
here that we need for a burn.

00:19:40.310 --> 00:19:42.460
So let's look at how a burn works.

00:19:42.550 --> 00:19:44.560
So up at the top,
we've got your application.

00:19:44.560 --> 00:19:48.880
You're going to create a burn object,
which represents the act of your burn.

00:19:48.930 --> 00:19:51.260
And you're going to
associate it with a device.

00:19:51.360 --> 00:19:54.270
You look at the devices on the system,
pick one.

00:19:55.230 --> 00:19:57.810
And then you set properties on the burn,
for example,

00:19:57.820 --> 00:20:00.920
whether or not you want to verify
the speed at which you want to burn,

00:20:00.930 --> 00:20:02.580
and so on.

00:20:03.000 --> 00:20:05.690
And then you tell the
burn to write a layout.

00:20:05.890 --> 00:20:07.740
The layout is down at the bottom.

00:20:07.750 --> 00:20:11.600
In this case,
it's an array of three DR tracks.

00:20:13.300 --> 00:20:16.830
So the burn starts to write,
and as it goes,

00:20:16.840 --> 00:20:19.820
it sends notifications over
to the Notification Center.

00:20:19.820 --> 00:20:24.040
The Notification Center then relays them
to your application on its main thread,

00:20:24.050 --> 00:20:26.380
or whatever thread you chose.

00:20:28.410 --> 00:20:30.210
And that's basically how the burn works.

00:20:30.410 --> 00:20:33.170
When the burn completes,
one last notification goes

00:20:33.350 --> 00:20:36.780
up to your application,
and then it's done.

00:20:38.410 --> 00:20:42.420
So erasing is really a lot like burning.

00:20:42.770 --> 00:20:45.480
There's not a lot of surprises here.

00:20:45.510 --> 00:20:48.080
It represents an erase
rather than a burn.

00:20:48.080 --> 00:20:49.980
Again, it's an asynchronous operation.

00:20:49.980 --> 00:20:54.420
You start it with one call, kick it off,
goes up, happens in the background.

00:20:54.420 --> 00:20:58.580
We'll send you notifications
for progress and when it's done.

00:20:58.580 --> 00:21:02.070
So if we look at the anatomy of an erase,
it's pretty much the same thing,

00:21:02.070 --> 00:21:03.260
only without the data.

00:21:03.260 --> 00:21:06.380
You have your application,
your erase that you set properties

00:21:06.560 --> 00:21:08.700
on associated with the device.

00:21:08.700 --> 00:21:12.210
Notifications go through and
get up to your application.

00:21:14.680 --> 00:21:19.910
So we're going to give a little
demonstration of how the device

00:21:20.320 --> 00:21:24.700
notifications work in the burn engine,
just to give you an example and show

00:21:24.760 --> 00:21:27.360
you the kinds of things that you can do.

00:21:27.430 --> 00:21:30.270
So let's switch over to demo one.

00:21:35.500 --> 00:21:42.970
Okay, so what we've got here is we've
got a very basic application.

00:21:42.990 --> 00:21:47.030
There's a nib file which
we'll see when it runs,

00:21:47.110 --> 00:21:49.260
but the nib file basically there's
a window with a text field.

00:21:49.270 --> 00:21:51.030
There's nothing complicated in it.

00:21:51.160 --> 00:21:53.960
We've got a pretty empty
application controller here.

00:21:53.960 --> 00:22:00.450
So, actually I need my script.

00:22:02.150 --> 00:22:04.100
and my script's gone.

00:22:04.970 --> 00:22:07.920
Let's see if I can get one of my
helpers to bring my script up.

00:22:11.230 --> 00:22:12.500
I do know the first several things.

00:22:12.500 --> 00:22:15.230
So the first thing that we're
going to need is we're going to

00:22:15.230 --> 00:22:17.850
need to include DiscRecording.h.

00:22:21.470 --> 00:22:24.950
So we're using the
DiscRecording services,

00:22:24.990 --> 00:22:28.580
so we're going to include DiscRecording.

00:22:28.590 --> 00:22:33.200
Then,
once the application is done launching,

00:22:33.200 --> 00:22:33.200
we're going to create--

00:22:35.760 --> 00:22:40.260
We're going to basically create an
array which contains a copy of the

00:22:40.260 --> 00:22:43.180
current devices that are attached.

00:22:43.610 --> 00:22:47.640
And the reason why we're going to
do this is because when we call,

00:22:47.640 --> 00:22:49.820
when we ask DiscRecording
for the list of devices,

00:22:49.820 --> 00:22:53.960
we're going to get a list of exactly
what's connected at that instant.

00:22:54.060 --> 00:22:56.460
But the thing is, we can't--

00:22:56.810 --> 00:23:02.620
You can't really rely on that staying
the same from one moment to the

00:23:02.620 --> 00:23:04.850
next because devices come and go.

00:23:05.170 --> 00:23:07.040
So if you're going to
do something in your UI,

00:23:07.050 --> 00:23:09.950
you need a separate
copy that you can say,

00:23:10.080 --> 00:23:13.980
OK, I know the third device
represents this device.

00:23:13.980 --> 00:23:17.980
Because if the second device
goes away in between when you

00:23:18.350 --> 00:23:21.910
ask for the two sets of devices,
it can be a problem.

00:23:22.030 --> 00:23:24.340
So we're going to keep our own
local copy of the device list.

00:23:27.140 --> 00:23:32.560
So down here, we're going to sign
up for a notification.

00:23:34.580 --> 00:23:37.620
We're going to sign up for
device disappeared notifications.

00:23:37.630 --> 00:23:42.210
The reason we sign up for disappeared
notifications is so that we can

00:23:42.210 --> 00:23:45.960
keep track of-- we're going to
sign up for disappeared before we

00:23:46.060 --> 00:23:48.740
sign up for appeared notifications.

00:23:48.740 --> 00:23:51.300
This is basically for
synchronization because,

00:23:51.300 --> 00:23:53.500
again, if a device shows up

00:23:53.670 --> 00:23:57.070
If a device disappears
once we've built the list,

00:23:57.070 --> 00:23:59.240
then we'll get the
notification right away.

00:23:59.240 --> 00:24:03.020
But we don't want to get into any
race conditions where we don't

00:24:03.110 --> 00:24:05.440
find out about a device going away.

00:24:05.820 --> 00:24:10.620
Then we're going to add the
device appeared notification.

00:24:11.200 --> 00:24:15.270
So we've now signed up
with these two selectors,

00:24:15.270 --> 00:24:19.870
and we've got these methods
that are going to be invoked

00:24:19.870 --> 00:24:21.860
in our app controller.

00:24:21.860 --> 00:24:24.660
Well,
so we're going to need those methods.

00:24:29.190 --> 00:24:32.040
So here's the device appeared.

00:24:32.060 --> 00:24:35.100
And all we're going to do,
it's a standard notification

00:24:35.100 --> 00:24:36.660
response selector.

00:24:36.700 --> 00:24:38.370
So we get it.

00:24:39.000 --> 00:24:41.130
The object for the
notification is the device,

00:24:41.130 --> 00:24:42.900
and we're going to add it to our list.

00:24:42.900 --> 00:24:45.930
And we're going to go and
update the user interface.

00:24:50.890 --> 00:24:51.640
So here we go.

00:24:51.640 --> 00:24:54.800
Here's the device
disappeared notification.

00:24:54.820 --> 00:24:56.560
And again,
we're just going to get the object,

00:24:56.560 --> 00:24:59.540
remove it from our list,
and update our UI.

00:24:59.620 --> 00:25:02.160
So this application is basically just
going to tell us a little bit about

00:25:02.160 --> 00:25:05.160
every device connected to the system,
and it's going to respond

00:25:05.220 --> 00:25:08.110
dynamically as things come and go.

00:25:11.330 --> 00:25:14.640
So we've been calling update UI,
so we need to give

00:25:14.640 --> 00:25:16.580
that an implementation.

00:25:16.580 --> 00:25:22.730
So here's a little bit of stuff to
just enumerate our list of devices.

00:25:22.800 --> 00:25:26.850
Going to loop through
and enumerate the list.

00:25:30.200 --> 00:25:31.490
We're going to get device info.

00:25:31.630 --> 00:25:35.310
The device info is static,
unchanging information about

00:25:35.400 --> 00:25:39.670
the device describing its
capabilities and things like that.

00:25:40.610 --> 00:25:44.020
Part of the info is the device's name.

00:25:44.020 --> 00:25:47.230
We've got a nice thing that
gives you a nicely formatted

00:25:47.230 --> 00:25:49.760
string describing the device.

00:25:52.700 --> 00:25:55.490
The connection is also
here because the device is,

00:25:55.620 --> 00:25:58.770
for example,
USB or FireWire or whatever else.

00:25:58.940 --> 00:26:02.930
So we're going to get that.

00:26:04.930 --> 00:26:07.360
Then we're going to look at the status.

00:26:07.360 --> 00:26:09.820
And the status is things that can change.

00:26:09.820 --> 00:26:13.980
So it's a snapshot of the
current status of the device.

00:26:15.220 --> 00:26:18.040
From that,
we're going to pull out whether

00:26:18.470 --> 00:26:20.500
the device is dead or not.

00:26:20.500 --> 00:26:23.450
We're going to pull out the media state.

00:26:23.550 --> 00:26:28.520
The media state can be empty,
in transition, which means the drive is

00:26:28.600 --> 00:26:32.630
spinning up or spinning down,
or it can have media.

00:26:34.010 --> 00:26:36.290
And then we're going
to get the media type.

00:26:36.430 --> 00:26:40.400
So if there is media,
and that's where we get the media type.

00:26:40.530 --> 00:26:42.710
So we're going to get the
media info dictionary,

00:26:42.710 --> 00:26:47.500
which is a sub-dictionary
underneath the status.

00:26:47.550 --> 00:26:52.200
We're going to pull out the media
type from the media info dictionary.

00:26:54.390 --> 00:26:57.810
If there's no media,
then we'll have a special

00:26:57.870 --> 00:26:59.080
string to indicate that.

00:26:59.090 --> 00:27:06.900
Otherwise, the media is in transition and
it's spinning up or spinning down.

00:27:09.490 --> 00:27:11.670
So what we're going to do then
is we're going to log all of this

00:27:11.670 --> 00:27:16.450
information that we've gathered
basically directly from the device.

00:27:16.470 --> 00:27:19.510
I'm going to log it into the text field.

00:27:20.280 --> 00:27:25.300
I'm going to add it to the text
field and set it on the text field.

00:27:25.380 --> 00:27:28.060
So we've just gone through,
looped through all devices,

00:27:28.060 --> 00:27:32.780
built up this string describing
the state of the device,

00:27:32.780 --> 00:27:34.470
and we're done.

00:27:40.110 --> 00:27:45.150
and I think that's it for this one.

00:27:45.150 --> 00:27:45.150
Let's see if it builds.

00:27:58.300 --> 00:28:00.760
We've got a couple devices
connected to the machine over here.

00:28:00.760 --> 00:28:06.070
And these devices,
we've got two FireWire devices plus

00:28:06.070 --> 00:28:08.430
the internal drive on the machine.

00:28:10.050 --> 00:28:15.360
So when it's ready to go, here we go.

00:28:15.360 --> 00:28:19.240
So this is our very simple text field.

00:28:19.240 --> 00:28:21.160
And so we've signed up
from the notifications.

00:28:21.160 --> 00:28:24.060
So it's telling us all
about each of the things.

00:28:24.060 --> 00:28:27.080
We've got the internal--

00:28:27.360 --> 00:28:30.050
and I have a Toppy Pioneer drive.

00:28:30.250 --> 00:28:37.290
We've got an external drive
connected over FireWire.

00:28:37.440 --> 00:28:43.830
We've got another external
drive connected over FireWire.

00:28:43.830 --> 00:28:43.830
None of them are busy.

00:28:43.830 --> 00:28:43.830
None of them have any media.

00:28:43.830 --> 00:28:43.830
So I'm going to change that.

00:28:45.130 --> 00:28:50.210
Let's open one, stick media in, close it.

00:29:01.200 --> 00:29:04.680
Are we getting our notifications?

00:29:04.680 --> 00:29:08.900
Perhaps we're not.

00:29:08.900 --> 00:29:10.540
Okay.

00:29:10.540 --> 00:29:18.980
Well, there might be something
wonky with our notifications,

00:29:18.980 --> 00:29:21.410
but we are getting the initial stuff.

00:29:21.520 --> 00:29:31.980
Let's try that one more time
and just see what happens.

00:29:32.430 --> 00:29:32.490
Let's eject this guy.

00:29:32.490 --> 00:29:32.490
If he'll let us?

00:29:32.490 --> 00:29:32.490
No?

00:29:37.050 --> 00:29:39.460
Oh, I did not add-- you're right.

00:29:39.490 --> 00:29:42.400
That's why we're not updating.

00:29:42.440 --> 00:29:44.930
We aren't done with the demo yet.

00:29:45.850 --> 00:29:51.540
So what we need to do
is go back over here.

00:29:51.700 --> 00:29:54.690
So we've signed up for device appeared
and disappeared notifications,

00:29:54.690 --> 00:29:59.120
but what we haven't signed up
for is media state changes.

00:29:59.440 --> 00:30:03.820
So let's go up here to--

00:30:04.010 --> 00:30:06.850
So we can detect when devices are there,
but we're not really noticing

00:30:06.850 --> 00:30:09.210
what's happening to them.

00:30:09.680 --> 00:30:10.940
So let's go up to device appeared.

00:30:10.940 --> 00:30:13.070
When we get a device,
we're going to sign up for

00:30:13.100 --> 00:30:15.420
notifications on the media.

00:30:15.560 --> 00:30:16.340
So here we go.

00:30:16.340 --> 00:30:19.330
We're adding another notification.

00:30:19.340 --> 00:30:21.540
Again,
we just get the notification center,

00:30:21.540 --> 00:30:23.300
add an observer.

00:30:24.200 --> 00:30:26.530
signed up for device status
change notifications.

00:30:26.800 --> 00:30:30.790
When a device disappears,
we're going to go down.

00:30:30.980 --> 00:30:34.760
and remove the notification
that we've signed up for.

00:30:34.930 --> 00:30:41.580
So we've just signed up for status
changed and removed ourselves.

00:30:41.580 --> 00:30:45.490
So let's go down here.

00:30:46.540 --> 00:30:50.760
Last but not least, we need to implement
the device state change.

00:30:50.970 --> 00:30:53.830
So when the device state changes,
all we're going to do is

00:30:53.830 --> 00:30:55.740
kick over and update the UI.

00:30:57.530 --> 00:31:00.100
So now,
now that we've got all the code in there,

00:31:00.100 --> 00:31:04.080
let's go ahead and compile it
and run it and see if we actually

00:31:04.080 --> 00:31:06.990
pick up all of the notifications.

00:31:10.020 --> 00:31:11.090
So here we go.

00:31:11.120 --> 00:31:13.200
We've got our three drives.

00:31:13.280 --> 00:31:15.630
We've got the FireWire drive,
or two FireWire drives.

00:31:15.730 --> 00:31:16.890
One of them has a CD in it.

00:31:16.900 --> 00:31:19.130
One of them doesn't.

00:31:19.200 --> 00:31:23.590
So let's put something
in the bottom drive.

00:31:26.820 --> 00:31:27.760
So it's in transition.

00:31:27.760 --> 00:31:30.960
The drive is spinning up.

00:31:30.990 --> 00:31:35.300
It's detecting whether there's media,
trying to see what it is.

00:31:35.300 --> 00:31:36.560
And there we go.

00:31:36.560 --> 00:31:39.400
It's noticed that there's CDR media.

00:31:42.900 --> 00:31:51.340
and these drives might not
have functioning eject buttons.

00:31:51.340 --> 00:31:51.340
So I guess we'll just leave
the media in there for now.

00:31:51.700 --> 00:31:58.300
[Transcript missing]

00:31:58.380 --> 00:32:00.690
So we've signed up for
notifications and we can watch

00:32:00.820 --> 00:32:03.300
what's going on on the device.

00:32:03.300 --> 00:32:07.520
If we were to do a burn in iTunes,
iTunes would cause it to flip

00:32:07.520 --> 00:32:09.190
to device busy and so on.

00:32:09.270 --> 00:32:17.300
So you can find out anything you need to
about the drives from the notifications.

00:32:17.300 --> 00:32:18.630
And that's it for demo one.

00:32:18.760 --> 00:32:22.290
So let's get back over
here to the slides.

00:32:29.770 --> 00:32:33.540
Okay,
so we've talked about the burn engine.

00:32:33.560 --> 00:32:36.420
Now we're going to zoom in on
some of the higher-level pieces.

00:32:36.570 --> 00:32:38.880
We're going to talk
about content creation.

00:32:39.040 --> 00:32:43.360
Content creation is where all the
helpers for creating content are.

00:32:43.570 --> 00:32:51.770
So the problem with burning is that
you burn basically a data stream.

00:32:51.770 --> 00:32:52.990
And formatting that data stream
can be kind of difficult.

00:32:52.990 --> 00:32:52.990
So

00:32:53.190 --> 00:33:02.370
If you're not up to
formatting that data stream,

00:33:02.370 --> 00:33:02.370
we've got helpers to help you do that and
bring it into a more natural set of APIs.

00:33:03.700 --> 00:33:08.760
So the content creation now
with Panther has two main parts.

00:33:08.830 --> 00:33:11.910
There's one part that helps you
create file systems for data disks,

00:33:11.910 --> 00:33:18.180
including ISO 9660, Joliet,
HFS+, and hybrids of any of those.

00:33:18.640 --> 00:33:23.720
and there's also an audio helper
to help you take audio files,

00:33:23.850 --> 00:33:28.600
MP3s, AAC files, whatever,
anything QuickTime can import

00:33:28.600 --> 00:33:30.870
and burn them to an audio CD.

00:33:31.300 --> 00:33:48.600
[Transcript missing]

00:33:48.970 --> 00:33:55.290
The content framework or the
content creation APIs basically

00:33:55.290 --> 00:33:55.290
contain things that

00:33:56.110 --> 00:34:00.100
that cover their special
kinds of DR tracks.

00:34:00.480 --> 00:34:03.600
They're DR tracks where we provide
the callback for you and we give

00:34:03.600 --> 00:34:06.200
the data to the burn engine.

00:34:06.360 --> 00:34:10.480
So DR file system track represents
a data track for a CD or DVD.

00:34:10.610 --> 00:34:15.690
And you specify a file system hierarchy
that you want on the disk and we'll go

00:34:15.700 --> 00:34:18.590
ahead and put it onto the disk for you.

00:34:24.500 --> 00:34:26.950
And again,
this file system hierarchy is not

00:34:27.030 --> 00:34:28.920
just let's burn a single folder.

00:34:28.920 --> 00:34:34.440
We've got it hooked up so that you
can actually do anything you want.

00:34:34.440 --> 00:34:37.500
And the objects are really very natural.

00:34:37.530 --> 00:34:40.430
So we have file and folder objects.

00:34:41.940 --> 00:34:45.980
And so for DR file objects, for example,
there's different ways to create them.

00:34:45.980 --> 00:34:49.620
You can have them come from an existing
file on the hard disk somewhere.

00:34:49.710 --> 00:34:52.280
You can have them come
from a data blob in memory.

00:34:52.340 --> 00:34:55.270
Or you can specify your own
data through a callback routine.

00:34:55.280 --> 00:34:57.720
So if you're getting
real-time sampling data,

00:34:57.740 --> 00:35:02.360
you can send it straight to the drive
and have it actually show up as a file

00:35:02.690 --> 00:35:05.830
rather than just raw data on the disk.

00:35:08.810 --> 00:35:13.460
So the way it works is
you build your hierarchy.

00:35:13.610 --> 00:35:16.620
You build a hierarchy of
file and folder objects,

00:35:16.620 --> 00:35:19.360
and there's different kinds of objects.

00:35:19.360 --> 00:35:24.740
So your files and folders can
be either real or virtual.

00:35:24.740 --> 00:35:27.620
Well, let's talk about that
distinction for just a moment.

00:35:27.630 --> 00:35:30.410
Real files and folders are
pretty much copied straight

00:35:30.470 --> 00:35:31.980
from an existing file system.

00:35:31.980 --> 00:35:35.770
So if you have a folder somewhere
or a file somewhere that you

00:35:35.770 --> 00:35:39.020
just want to bring onto the disk,
you can go ahead and do that.

00:35:39.030 --> 00:35:43.060
You can create a real file that
points to that and put it into

00:35:43.060 --> 00:35:44.860
the hierarchy wherever you want.

00:35:44.860 --> 00:35:48.720
It doesn't have to be
exactly where it was before.

00:35:48.720 --> 00:35:50.780
You're specifying a brand new hierarchy.

00:35:50.780 --> 00:35:53.960
So we'll pull stuff from
any portion of the disk,

00:35:53.980 --> 00:35:56.180
bring it all together for you.

00:35:57.610 --> 00:35:59.590
Objects can also be virtual.

00:35:59.790 --> 00:36:02.090
That means they're entirely
created through the API.

00:36:02.260 --> 00:36:04.700
That means they don't
exist on disk at all.

00:36:04.860 --> 00:36:06.740
You might be specifying
the data at runtime.

00:36:06.740 --> 00:36:09.840
You might be saying,
I just want this to be an empty file.

00:36:09.840 --> 00:36:13.310
You can do whatever you want.

00:36:13.310 --> 00:36:18.470
And that's all specified through the API.

00:36:18.670 --> 00:36:20.790
So what we've got is we've really
got four classes of object.

00:36:20.790 --> 00:36:20.790
We've got--

00:36:20.960 --> 00:36:27.810
Real files, virtual files, real folders,
and virtual folders.

00:36:28.210 --> 00:36:35.300
Now, the way this works is that three of
these are basically you have a hierarchy,

00:36:35.300 --> 00:36:39.700
which is a tree, and the leaf nodes,
three of these are leaf nodes,

00:36:39.720 --> 00:36:43.740
which means that they can't
have children added to them.

00:36:43.760 --> 00:36:48.200
So real files and virtual files
obviously are files and can't

00:36:48.200 --> 00:36:50.700
have anything added to them.

00:36:50.700 --> 00:36:54.700
Real folders represent -- will bring
in what's underneath the folder,

00:36:54.700 --> 00:36:58.690
but you can't actually add
children to them dynamically.

00:36:58.900 --> 00:37:03.980
So the virtual folders are how you
really define your synthetic hierarchy.

00:37:07.180 --> 00:37:12.210
So DiscRecording will take all of this
and will generate file systems for you.

00:37:12.230 --> 00:37:15.320
And so the file systems we generate
have different naming conventions.

00:37:15.320 --> 00:37:18.280
There's ISO 9660,
which has one convention, Joliet,

00:37:18.280 --> 00:37:21.740
which has another,
HFS+, which has yet another.

00:37:21.750 --> 00:37:25.220
And so the names can
be whatever you want,

00:37:25.270 --> 00:37:27.600
but depending on what
names they happen to be,

00:37:27.600 --> 00:37:30.460
they might not conform to
what the file system wants.

00:37:30.500 --> 00:37:33.400
So DiscRecording will
automatically transform the

00:37:33.510 --> 00:37:37.100
file names to make them legal,
to make them fit.

00:37:37.130 --> 00:37:41.000
So that they conform to the standards.

00:37:41.000 --> 00:37:45.990
However, we do this automatically,
but we don't just do it behind your back.

00:37:46.050 --> 00:37:50.270
If you need to know the name of a file,
for example, to build a disc relative

00:37:50.330 --> 00:37:53.720
path or something,
you can actually ask DiscRecording

00:37:53.720 --> 00:37:56.110
and get the name for each file.

00:37:56.200 --> 00:37:57.880
And you can even change
it if you need to.

00:37:57.880 --> 00:38:00.120
If you don't like what
DiscRecording has done to it,

00:38:00.120 --> 00:38:05.200
you can go ahead and change it
through your UI or programmatically.

00:38:05.990 --> 00:38:08.460
So every object also has
a properties dictionary.

00:38:08.460 --> 00:38:11.980
And the properties dictionary
for file system objects describes

00:38:12.070 --> 00:38:13.640
the metadata on the object.

00:38:13.820 --> 00:38:18.990
Things like permissions,
type and creator, owner group,

00:38:18.990 --> 00:38:21.380
things like that.

00:38:22.150 --> 00:38:25.140
And again, since every object has
a properties dictionary,

00:38:25.140 --> 00:38:28.080
you can go into the properties
dictionary and override the

00:38:28.080 --> 00:38:31.350
properties on real files,
real folders, virtual files,

00:38:31.450 --> 00:38:32.190
virtual folders.

00:38:32.240 --> 00:38:34.530
You can set all of these.

00:38:34.900 --> 00:38:39.520
and obviously real files and real folders
will at first inherit the properties,

00:38:39.590 --> 00:38:43.880
you know, the owner group permissions
type creator will inherit the

00:38:43.960 --> 00:38:45.920
properties from the real file.

00:38:45.950 --> 00:38:49.790
But then if you need to,
you can go in and override those,

00:38:49.790 --> 00:38:52.560
change them, whatever you need to do.

00:38:53.750 --> 00:38:57.590
Finally, each object in the
Content APIs has a mask.

00:38:57.790 --> 00:39:02.580
And the mask determines the presence
of each object in each file system.

00:39:02.590 --> 00:39:05.700
This is actually-- it's
a very simple concept,

00:39:05.720 --> 00:39:07.200
but it leads to something pretty cool.

00:39:07.200 --> 00:39:12.660
You can actually take objects and turn
them off in specific file systems.

00:39:12.730 --> 00:39:14.500
Perhaps you're writing
a cross-platform game,

00:39:14.500 --> 00:39:18.770
and you have a Windows executable
and a Mac OS executable.

00:39:18.890 --> 00:39:23.180
Well, you make the Mac OS one only
show up in the HFS+ file system.

00:39:23.190 --> 00:39:26.240
You make the Windows one
only show up in Joliet.

00:39:26.240 --> 00:39:28.570
And that's really easy to do.

00:39:29.720 --> 00:39:34.270
When you set a mask on the root folder,
that determines it basically carries

00:39:34.270 --> 00:39:41.390
downward because obviously if a folder
doesn't include HFS+, none of its

00:39:41.390 --> 00:39:44.220
children can really include HFS+ either.

00:39:44.370 --> 00:39:48.270
So it carries downward and the way it
works is the root is what determines

00:39:48.320 --> 00:39:50.880
what file systems will be on the disk.

00:39:51.050 --> 00:39:55.570
So if you want a hybrid disk,
you set a mask on the root

00:39:55.570 --> 00:39:57.440
folder that has a hybrid mask.

00:39:58.470 --> 00:40:02.390
And even though we'll put all of these
objects in different file systems,

00:40:02.600 --> 00:40:04.800
really the file data is
all shared between them.

00:40:04.960 --> 00:40:08.780
You don't have three
copies of the file on disk.

00:40:08.920 --> 00:40:12.370
You actually have just one copy
and you have essentially three

00:40:12.370 --> 00:40:15.200
different views of the file data.

00:40:19.230 --> 00:40:22.410
So now that we've sort
of gone over all that,

00:40:22.560 --> 00:40:24.980
let's look at a real data track.

00:40:25.500 --> 00:40:29.360
So up at the top, we've got the DR file
system track object.

00:40:29.370 --> 00:40:33.500
And it basically just has-- it does have
properties which aren't labeled there,

00:40:33.540 --> 00:40:38.260
but underneath it,
there are our hierarchy,

00:40:38.260 --> 00:40:39.880
our tree of objects.

00:40:39.880 --> 00:40:43.030
So we've got a DR folder,
which is our root folder.

00:40:43.150 --> 00:40:44.860
We've got a couple of files.

00:40:44.860 --> 00:40:47.480
We've got one real file
from somewhere on disk,

00:40:47.480 --> 00:40:49.930
and we've got a virtual file
that we're going to be specifying

00:40:49.940 --> 00:40:52.210
the data for at runtime.

00:40:52.680 --> 00:40:55.960
We've got a real folder
which automatically brings in

00:40:55.960 --> 00:40:58.230
everything underneath that folder.

00:40:58.230 --> 00:41:02.510
And then we've got a virtual folder.

00:41:03.730 --> 00:41:07.610
So we've got a couple of real files,
another real folder.

00:41:07.860 --> 00:41:10.540
And so DiscRecording
can take this hierarchy,

00:41:10.560 --> 00:41:13.360
these files,
like these real files that are up here,

00:41:13.400 --> 00:41:16.640
the real folders, they don't have to be
in this tree already.

00:41:16.820 --> 00:41:18.220
They can be anywhere on disk.

00:41:18.300 --> 00:41:21.940
In fact, with virtual files,
they don't have to be on disk at all.

00:41:22.030 --> 00:41:26.580
You can really build a synthetic file
system from pretty much anything,

00:41:26.630 --> 00:41:29.320
and it's really pretty powerful.

00:41:31.110 --> 00:41:34.220
So that's the file system stuff.

00:41:34.240 --> 00:41:37.740
Now, new in Panther,
we have DR Audio Track.

00:41:37.810 --> 00:41:43.950
DR Audio Track is a set of helper
APIs for creating a Redbook audio track,

00:41:44.000 --> 00:41:48.710
just a standard audio CD track,
which you can play in your CD player.

00:41:48.760 --> 00:41:51.690
And it will import any file
that QuickTime can read.

00:41:51.800 --> 00:41:53.410
So you don't have to
write the decompressors.

00:41:53.450 --> 00:41:57.590
You don't have to write stuff to
translate it into the CDDA format.

00:41:57.610 --> 00:41:58.480
We'll do it for you.

00:41:58.710 --> 00:42:04.040
So movies, AIFFs, waves, MP3s, AAC files.

00:42:04.050 --> 00:42:07.460
As QuickTime moves forward and
is able to import more stuff,

00:42:07.480 --> 00:42:10.260
this will be able to import more stuff.

00:42:10.260 --> 00:42:13.110
And again, this is new in Panther.

00:42:14.400 --> 00:42:16.830
So an audio burn,
an audio track by itself

00:42:16.920 --> 00:42:19.460
is not that exciting,
so we decided to put a

00:42:19.670 --> 00:42:21.240
whole audio burn up here.

00:42:21.310 --> 00:42:24.540
So again, we've got the burn object up
at the top with the properties.

00:42:24.540 --> 00:42:28.260
And DRAudioTrack, again,
is just a special type of DR track

00:42:28.310 --> 00:42:30.660
where we provide the callback.

00:42:30.690 --> 00:42:33.200
And we've got a set of files up here.

00:42:33.200 --> 00:42:37.840
So we've got an MP3 file, an AIFF,
and an AEC file.

00:42:37.840 --> 00:42:40.850
And when you burn this,
DiscRecording will just write out

00:42:40.850 --> 00:42:45.910
a three-track audio CD containing
the music from those files.

00:42:48.530 --> 00:42:50.820
So let's talk about the user interface.

00:42:50.870 --> 00:42:53.480
That's the third component.

00:42:53.500 --> 00:42:58.540
The user interface provides a common
interface for burning and erasing.

00:42:58.570 --> 00:43:02.780
There are setup panels for
setting up a burn and erase.

00:43:02.800 --> 00:43:04.220
And we handle device selection.

00:43:04.220 --> 00:43:07.760
We handle all the logic of
keeping track of state changes.

00:43:07.760 --> 00:43:10.590
If a user plugs in a device
while the panel is up,

00:43:10.650 --> 00:43:12.450
the panel will notice.

00:43:12.560 --> 00:43:15.000
If the user unplugs the device,
all that code's been written,

00:43:15.000 --> 00:43:17.140
so you don't have to do it.

00:43:17.170 --> 00:43:23.030
And we also provide a standard set of
options for pretty much anything a user

00:43:23.030 --> 00:43:26.090
would want to do for burning and erasing.

00:43:26.900 --> 00:43:31.080
And we also provide
standardized progress panels.

00:43:31.090 --> 00:43:35.020
You may have seen them in
Disc Copy and other applications.

00:43:35.020 --> 00:43:37.370
Just pretty much a progress bar.

00:43:37.490 --> 00:43:38.240
Keeps track of things.

00:43:38.370 --> 00:43:42.600
Can be presented as a sheet on your
window or as a standalone panel.

00:43:43.360 --> 00:43:47.790
We provide a set of icons if you
happen to need them for your interface.

00:43:47.790 --> 00:43:52.280
And the user interface is accessible
from both Cocoa and Carbon.

00:43:52.310 --> 00:43:59.950
And last year, we promised that we were
going to get it in Carbon,

00:43:59.950 --> 00:44:01.660
we were going to make
it available in Carbon,

00:44:01.660 --> 00:44:01.660
and it didn't quite
make it for the release,

00:44:01.660 --> 00:44:01.660
so here it is for real.

00:44:03.100 --> 00:44:07.180
And so we're going to take
the content and the UI.

00:44:07.180 --> 00:44:11.500
We're going to bring them together and
build a pretty full-featured burning

00:44:11.500 --> 00:44:14.740
application in just a few lines of code.

00:44:14.840 --> 00:44:18.290
So let's go ahead and
switch back to demo one.

00:44:24.270 --> 00:44:28.390
So unfortunately,
this is not quite as easy as, say,

00:44:28.400 --> 00:44:30.770
writing a web browser,
because we're going to have

00:44:30.770 --> 00:44:32.300
to actually write some code.

00:44:32.300 --> 00:44:36.620
We can't do it entirely
in Interface Builder yet.

00:44:36.660 --> 00:44:38.660
So what we've got--

00:44:41.100 --> 00:44:46.150
and I will now move over to demo two.

00:44:46.150 --> 00:44:46.150
So what we've got,

00:44:46.490 --> 00:44:51.760
For this demo is we've basically
got a very simple app controller.

00:44:51.840 --> 00:44:55.920
We've added a few skeleton
methods to pick files.

00:44:55.920 --> 00:44:59.490
If you're familiar with NSOpenPanel,
which you may be,

00:44:59.520 --> 00:45:04.860
then this will generally not
be a big surprise to you.

00:45:04.860 --> 00:45:08.640
And other than that,
we've got this empty user interface

00:45:08.640 --> 00:45:11.030
with a couple of big buttons on it.

00:45:19.900 --> 00:45:22.660
Nice big buttons, here they are.

00:45:22.660 --> 00:45:25.400
And they don't do much, yet.

00:45:28.610 --> 00:45:29.500
So here we are.

00:45:29.500 --> 00:45:34.780
We've got -- so each of these buttons,
there's one hooked up to

00:45:34.990 --> 00:45:37.260
each of these methods.

00:45:37.260 --> 00:45:39.940
So let's go through.

00:45:39.940 --> 00:45:41.930
So we go up to the top.

00:45:42.370 --> 00:45:46.900
We're going to include
our DiscRecording headers.

00:45:46.930 --> 00:45:52.400
DiscRecording UI is a separate framework,
so we're going to import that separately.

00:45:52.410 --> 00:45:55.610
I'm going to go down
past the open panels,

00:45:56.280 --> 00:45:58.300
Down to here.

00:45:58.520 --> 00:46:01.540
And we're going to go ahead
and create an audio disc.

00:46:01.540 --> 00:46:03.380
Well, how do we create an audio disc?

00:46:03.380 --> 00:46:06.200
Well, the first thing is we're going
to ask the user for some files.

00:46:06.200 --> 00:46:12.510
And once we've got that,
we're going to loop through the files.

00:46:14.540 --> 00:46:17.140
enumerate through them.

00:46:17.140 --> 00:46:21.210
We're going to create a
DR track for each file.

00:46:26.200 --> 00:46:29.500
and so we're not actually doing error
checking here because this is a demo,

00:46:29.520 --> 00:46:37.270
but if we were doing error checking,
the DRTrack creation method would return

00:46:37.270 --> 00:46:37.270
nil if QuickTime can't read the file.

00:46:40.090 --> 00:46:43.920
So we're going to look at all those.

00:46:43.930 --> 00:46:47.060
Then we are going to invoke our method,
which we're going to

00:46:47.060 --> 00:46:50.560
create in just a moment,
for creating a disk.

00:46:50.560 --> 00:46:51.800
So we're going to burn the layout.

00:46:51.900 --> 00:46:54.520
We've created all the tracks in an array.

00:46:55.160 --> 00:47:03.610
and I have added all those to an array
and we're going to burn that as a layout.

00:47:06.670 --> 00:47:09.690
So then we're going to go up to here.

00:47:10.090 --> 00:47:13.660
So we've called this method on
ourselves burnLayoutWithDescription.

00:47:13.700 --> 00:47:16.380
Well, we need to create that method.

00:47:22.400 --> 00:47:23.820
So what do we do inside that method?

00:47:23.930 --> 00:47:28.840
Well, first thing we're going to
do is create a setup panel.

00:47:28.980 --> 00:47:33.810
Setup panel is where the
user sets up the burn.

00:47:36.000 --> 00:47:39.760
We've created the setup panel,
and we're just going to run it.

00:47:39.990 --> 00:47:41.890
There are options you can set on it,
but we don't really

00:47:41.890 --> 00:47:42.980
need to set any options.

00:47:42.980 --> 00:47:45.760
We're happy with the defaults,
so we're just going to run it.

00:47:45.760 --> 00:47:51.640
And if the user hits OK, well,
then we're going to go

00:47:51.700 --> 00:47:54.360
ahead and do the burn.

00:47:54.360 --> 00:47:58.910
And we do the burn by
creating a progress panel.

00:47:58.910 --> 00:47:58.910
We're going to put our
description into the panel.

00:48:00.500 --> 00:48:06.190
and then we're going to go ahead
and tell the panel to start up.

00:48:06.190 --> 00:48:06.190
So it begins the progress panel.

00:48:06.520 --> 00:48:09.860
We get the burn object
straight from the setup panel.

00:48:09.890 --> 00:48:12.550
The setup panel pre-configures
a burn object according to

00:48:12.580 --> 00:48:14.340
whatever the user has selected.

00:48:14.340 --> 00:48:17.720
So if the user says they
don't want to verify

00:48:17.800 --> 00:48:21.200
That property is already
set in the burn object.

00:48:21.230 --> 00:48:24.930
And we pass in the layout
that came into this method.

00:48:32.000 --> 00:48:39.990
and that's actually all we
need for burning the layout.

00:48:40.040 --> 00:48:43.000
We're going to run the setup panel,
we're going to set the description,

00:48:43.000 --> 00:48:43.000
then we're going to
start the progress panel.

00:48:43.000 --> 00:48:43.000
So there's not much code there.

00:48:44.090 --> 00:48:48.480
So we could compile and run and
create an audio disc right now.

00:48:48.500 --> 00:48:53.020
But let's go ahead and do
the data disc creation.

00:48:53.520 --> 00:48:57.740
and I are going to show you
how to create a data disk.

00:48:57.840 --> 00:49:02.910
We're going to call our method
that brings up an open panel,

00:49:02.910 --> 00:49:05.300
select some data files.

00:49:05.300 --> 00:49:05.300
We're going to go through the files.

00:49:08.000 --> 00:49:09.470
We're going to create a virtual folder.

00:49:09.590 --> 00:49:12.340
For now, since this is a demo,
we're just going to give it

00:49:12.340 --> 00:49:13.900
a standard name of our own.

00:49:13.900 --> 00:49:16.280
We'll take every file
that the user selects,

00:49:16.280 --> 00:49:18.110
loop through them,

00:49:19.420 --> 00:49:20.870
And look at it.

00:49:20.980 --> 00:49:25.260
Figure out whether it's
a file or a directory.

00:49:25.260 --> 00:49:28.920
And if it's a directory,
then we create a DR folder.

00:49:28.920 --> 00:49:31.600
This creates a real DR folder.

00:49:31.620 --> 00:49:34.460
Otherwise,
we're going to create a DR file.

00:49:34.560 --> 00:49:36.500
So we're going to take
whatever the user selects,

00:49:36.500 --> 00:49:38.910
throw it into one virtual folder.

00:49:40.100 --> 00:49:47.070
at the root of the volume.

00:49:47.070 --> 00:49:47.070
And there we go.

00:49:47.070 --> 00:49:47.070
We're going to add it to
the root folder of the disk.

00:49:49.610 --> 00:49:53.360
And so we're setting an
explicit file system mask here.

00:49:53.360 --> 00:49:57.000
And this controls, again,
which file systems are generated.

00:49:57.000 --> 00:50:00.400
So for example,
if we wanted HFS-- the default is

00:50:00.400 --> 00:50:05.920
actually to create a cross-platform disk,
which would be HFS+, ISO 9660,

00:50:05.920 --> 00:50:07.000
and Joliet.

00:50:07.080 --> 00:50:10.970
If we wanted to, we could say, OK,
I don't want--

00:50:11.160 --> 00:50:14.680
I don't want HFS+, we're just
going to do an Isojoliet disk.

00:50:14.740 --> 00:50:19.910
You can really pretty much do any
combination and we'll just generate

00:50:20.030 --> 00:50:24.210
the file systems that you ask for.

00:50:27.700 --> 00:50:31.460
Once we've done that,
we're going to again call our method.

00:50:31.460 --> 00:50:33.960
We're going to create
the track right here,

00:50:34.040 --> 00:50:36.520
DR track, track for root folder.

00:50:36.550 --> 00:50:39.080
Boom, we've got a file system.

00:50:39.210 --> 00:50:42.140
and we're going to invoke
our method to burn that,

00:50:42.160 --> 00:50:47.140
bring up the setup panel
and do the progress.

00:50:47.140 --> 00:50:48.190
And that's all.

00:50:48.200 --> 00:50:55.710
So, let's go ahead and build this.

00:51:00.600 --> 00:51:09.670
So what we've done is with
just this little bit of code,

00:51:09.670 --> 00:51:14.000
we've created an application
that can burn an audio CD,

00:51:14.000 --> 00:51:14.000
can burn a data CD,
can really burn pretty

00:51:14.000 --> 00:51:14.000
much anything you need.

00:51:14.250 --> 00:51:19.410
and I are going to show you how
to use this little bit of code to

00:51:19.410 --> 00:51:19.410
select files and bring up the panels.

00:51:20.860 --> 00:51:23.520
So let's run it.

00:51:23.570 --> 00:51:25.280
So here we go.

00:51:25.310 --> 00:51:27.190
Here's our interface.

00:51:33.030 --> 00:51:34.960
So we've got our two buttons.

00:51:34.980 --> 00:51:38.290
Well,
let's go ahead and create an audio disc.

00:51:38.500 --> 00:51:41.020
Happen to have some music right here.

00:51:44.800 --> 00:51:52.220
select the files,
brings up the burn setup panel.

00:51:52.220 --> 00:51:52.220
So the burn setup panel, again,

00:51:53.400 --> 00:51:57.440
You can have options to set the speed,
you have whether to verify or not,

00:51:57.480 --> 00:51:59.910
whether you want to eject
or mount after the burn.

00:52:00.130 --> 00:52:03.040
We're just going to leave those
pretty much straightforward.

00:52:03.080 --> 00:52:04.840
There's already media
loaded in the drive,

00:52:04.840 --> 00:52:07.370
so let's just go ahead and burn.

00:52:08.860 --> 00:52:11.500
So there we go,
and we're burning an audio CD.

00:52:11.510 --> 00:52:13.040
That was easy.

00:52:13.040 --> 00:52:16.180
Well, let's go ahead and burn a
data CD while we're at it.

00:52:16.220 --> 00:52:18.380
So go over here.

00:52:18.390 --> 00:52:20.570
Let's go to Panther.

00:52:20.930 --> 00:52:35.660
and others.

00:52:36.790 --> 00:52:36.790
We've selected three items.

00:52:36.790 --> 00:52:36.790
And what this is going to do is it's
going to bring those all together.

00:52:37.900 --> 00:52:42.930
and others.

00:52:43.110 --> 00:52:43.110
Here's our set-up panel.

00:52:43.110 --> 00:52:43.110
We're ready to burn.

00:52:46.200 --> 00:52:48.200
and I will be doing a little bit
of a demo of how we can do that.

00:52:48.200 --> 00:52:50.200
There we go.

00:52:50.200 --> 00:52:52.200
So the audio disk is going over here.

00:52:52.200 --> 00:52:55.410
The data disk is building
the file systems.

00:53:00.150 --> 00:53:04.760
and I are here to talk
about the new Carbon API.

00:53:04.760 --> 00:53:11.080
We've created an application
that can burn audio discs and

00:53:11.100 --> 00:53:15.570
data discs and it just works.

00:53:15.570 --> 00:53:20.200
Which is really pretty cool.

00:53:20.200 --> 00:53:21.300
Okay.

00:53:21.550 --> 00:53:24.480
So let's switch back to the slides.

00:53:33.300 --> 00:53:35.240
and it really is just that simple.

00:53:35.240 --> 00:53:40.140
That much code, burning audio CDs,
you're burning data CDs.

00:53:40.140 --> 00:53:40.140
It's really cool.

00:53:41.390 --> 00:53:48.400
Okay, so now we're going to talk
about device profiles,

00:53:48.400 --> 00:53:48.400
those of you that maybe

00:53:49.180 --> 00:53:52.020
may be involved with creating
and bundling hardware.

00:53:52.560 --> 00:53:58.370
You're going to be interested in this.

00:53:58.370 --> 00:53:58.370
So this is something that's--
this is the new way that device

00:53:58.370 --> 00:53:58.370
support is going to work.

00:53:58.520 --> 00:54:01.830
and Apple is adopting this for
ourselves and we're giving this

00:54:01.930 --> 00:54:04.460
to you for you to hook into.

00:54:04.580 --> 00:54:07.580
So let's talk about what
device profiles are.

00:54:09.250 --> 00:54:12.260
So device profiles are
a way for manufacturers,

00:54:12.450 --> 00:54:16.390
bundlers of drives to add
support for their own drives.

00:54:16.660 --> 00:54:20.360
Without or with reduced
interaction from Apple.

00:54:20.490 --> 00:54:25.860
So if you've been in this situation,
you kind of know what has to happen.

00:54:26.020 --> 00:54:27.960
You have to send drives in,
then you have to wait,

00:54:27.970 --> 00:54:30.600
and then we have to do the work,
and you have to wait.

00:54:30.600 --> 00:54:32.740
And it's no fun for you.

00:54:32.740 --> 00:54:33.880
It's no fun for us.

00:54:33.880 --> 00:54:38.320
And we kind of want to make it
a lot easier and a lot smoother.

00:54:38.540 --> 00:54:43.090
So what we're going to
do is a device profile

00:54:43.410 --> 00:54:49.370
and many others.

00:54:49.370 --> 00:54:49.370
This is a text file and it's an XML plist
file that lives on the hard drive.

00:54:49.840 --> 00:54:51.640
It contains two sets of things.

00:54:51.640 --> 00:54:54.080
If you're familiar
with kernel extensions,

00:54:54.090 --> 00:54:58.100
it's very similar to the way
that works in that there's a

00:54:58.100 --> 00:55:01.180
dictionary describing the matching,
and that's called the

00:55:01.280 --> 00:55:03.040
personality for the profile.

00:55:03.540 --> 00:55:05.760
And then after we've got
the matching criteria,

00:55:05.870 --> 00:55:08.580
we've got the actual
data for the profile.

00:55:08.590 --> 00:55:11.700
In each file,
we've got information on how the device

00:55:11.700 --> 00:55:14.000
interprets the MMC specifications.

00:55:14.020 --> 00:55:19.780
If there happen to be any bugs,
God forbid, or quirks in the firmware,

00:55:19.780 --> 00:55:23.080
as there occasionally are,
if 1.0 wasn't quite perfect but

00:55:23.120 --> 00:55:26.970
the drive got released anyway,
you can mark what's broken

00:55:27.360 --> 00:55:29.670
and still get it to work.

00:55:30.800 --> 00:55:33.600
If there are any quirks,
such as we'll try to ask

00:55:33.690 --> 00:55:37.170
the drive what it supports,
but if the drive doesn't support

00:55:37.210 --> 00:55:41.300
it correctly or DiscRecording can't
quite figure out what's going on,

00:55:41.560 --> 00:55:46.920
then you can help us along by
telling us in the profile what

00:55:46.920 --> 00:55:46.920
the drive does and doesn't do.

00:55:48.110 --> 00:55:53.310
So Device Profile Editor is an
application that's going to be released

00:55:54.380 --> 00:56:00.200
that creates these profile files and
they're and even though they're p lists

00:56:00.200 --> 00:56:03.750
we want to we want you to use the device
profile editor because you know the

00:56:03.750 --> 00:56:07.370
format is a pretty complicated plist
and we don't want to have any mistakes

00:56:07.370 --> 00:56:10.920
you don't have to dig in there with
property list editor where you're going

00:56:10.920 --> 00:56:14.640
to get this nice ui and the device
profile letter will be responsible

00:56:14.700 --> 00:56:19.950
for validating profiles so it'll when
you tell when you tell us like what

00:56:19.950 --> 00:56:24.610
the drive supports we're going to run
a battery of tests against the drive

00:56:24.680 --> 00:56:28.600
make sure that disk recording really
can talk to the device so it's kind

00:56:28.600 --> 00:56:33.100
of eliminates a lot of the testing makes
it automatic gets rid of some of the

00:56:33.240 --> 00:56:38.860
support hassles and this is going to be a
requirement for you know official support

00:56:40.920 --> 00:56:44.500
So without further ado,
let's do a demo of the

00:56:44.630 --> 00:56:46.540
device profile editor.

00:56:46.630 --> 00:56:49.180
Switch back over to demo one.

00:56:56.800 --> 00:56:58.360
and here it is.

00:56:58.730 --> 00:57:00.820
Here's the device profile editor.

00:57:00.980 --> 00:57:04.920
So we're a vendor, say we're

00:57:05.430 --> 00:57:06.460
Say we're Example Co.

00:57:06.460 --> 00:57:10.860
and we're working on a CDRW 9000.

00:57:12.930 --> 00:57:16.070
Well, if we've shipped that under
any other vendor names,

00:57:16.070 --> 00:57:19.820
perhaps generic or perhaps we've
shipped it with no vendor name at all,

00:57:20.060 --> 00:57:22.600
then you can indicate that here.

00:57:22.600 --> 00:57:26.620
You can pretty much list any of
the alternate vendor names that you

00:57:26.620 --> 00:57:29.060
may have rebranded the drive as.

00:57:29.060 --> 00:57:31.120
Then we've got the basic feature support.

00:57:31.120 --> 00:57:34.020
In general,
DiscRecording will try to use MMC and

00:57:34.020 --> 00:57:37.240
auto-detect all of this stuff,
but occasionally there's something

00:57:37.240 --> 00:57:40.900
that the drive does or doesn't
do that DiscRecording won't be

00:57:40.900 --> 00:57:42.530
able to automatically sense.

00:57:42.790 --> 00:57:45.770
So you can leave everything on AutoSense.

00:57:45.780 --> 00:57:49.410
In fact, for the CDRW 9000,
we'll just say that we'll

00:57:49.410 --> 00:57:51.740
leave everything on AutoSense
and we'll run the tests.

00:57:51.740 --> 00:57:54.560
And if it works, then great.

00:57:55.140 --> 00:57:58.820
So the one thing that we do need
down here is if the device--

00:57:58.990 --> 00:58:00.340
DiscRecording has a couple of things.

00:58:00.340 --> 00:58:03.380
All Sony drives have a couple
of characteristics in common.

00:58:03.380 --> 00:58:06.250
All Pioneer drives have a couple
of characteristics in common.

00:58:06.430 --> 00:58:09.440
We know a little bit about
drives from various vendors.

00:58:09.680 --> 00:58:13.840
So if there's a device that's
from a particular vendor,

00:58:13.840 --> 00:58:14.720
it helps to know that.

00:58:14.840 --> 00:58:18.460
So you can put the actual
vendor name in here.

00:58:18.620 --> 00:58:20.460
And that helps
DiscRecording a little bit.

00:58:20.630 --> 00:58:23.170
For example,
if you've rebranded the drive,

00:58:23.340 --> 00:58:25.350
you can tell us who it
actually comes from.

00:58:25.350 --> 00:58:29.430
And then we'll make sure we
get the right stuff in there.

00:58:29.950 --> 00:58:32.610
So various things,
if you happen to know that

00:58:32.820 --> 00:58:39.300
there are some drives that can't
handle particular CDB commands,

00:58:39.300 --> 00:58:39.300
if that happens, then

00:58:39.850 --> 00:58:42.690
Then you can go ahead and exclude
them and tell DiscRecording never

00:58:42.770 --> 00:58:48.760
send this command because the drive
might hang the bus or otherwise wedge.

00:58:48.920 --> 00:58:54.440
If we have different options,
parameters that drive can't handle,

00:58:54.440 --> 00:58:57.450
if there's CD burn speeds
that it can't handle,

00:58:57.470 --> 00:59:00.760
or if you want to enumerate
just the good speeds,

00:59:00.760 --> 00:59:02.830
you can include them.

00:59:03.680 --> 00:59:06.240
And so you'll create
the profile with this.

00:59:06.240 --> 00:59:08.010
You can actually create more than one.

00:59:08.050 --> 00:59:11.040
So let's go ahead and create another one.

00:59:11.040 --> 00:59:16.590
Again, this is Example Co., CDRW5000.

00:59:16.820 --> 00:59:21.220
Let's say the CDRW 5000
is an older drive.

00:59:21.220 --> 00:59:23.540
It might report that it
does session at once,

00:59:23.540 --> 00:59:26.510
but it was kind of broken
and this recording can't

00:59:26.510 --> 00:59:27.680
really talk to it very well.

00:59:27.810 --> 00:59:30.580
So we're going to
disable session at once.

00:59:32.950 --> 00:59:35.180
and perhaps it doesn't
report DVD support correctly.

00:59:35.180 --> 00:59:38.080
Well,
we'll disable all the DVD burning too.

00:59:38.270 --> 00:59:42.360
And then you can run your battery
of tests against this and again,

00:59:42.360 --> 00:59:47.210
if it all works,
then it passes and you can,

00:59:47.500 --> 00:59:55.670
it'll create a file, a DR profile file,
which you can save.

00:59:57.740 --> 00:59:59.770
So that's our example code drive support.

00:59:59.940 --> 01:00:06.160
And we can install that with an installer
or even have the user do it themselves.

01:00:06.160 --> 01:00:08.940
And then DiscRecording will
be able to burn to that drive.

01:00:08.940 --> 01:00:10.280
And again, this is a Panther thing.

01:00:10.280 --> 01:00:12.270
So it's new in Panther.

01:00:12.280 --> 01:00:14.420
And we're still kind of working on it.

01:00:14.420 --> 01:00:18.170
So we would really like
feedback on how it all works.

01:00:18.290 --> 01:00:21.880
Okay,
so we're running just a little bit over,

01:00:21.940 --> 01:00:25.110
so let's kick back to the slides.

01:00:25.920 --> 01:00:27.660
All right.

01:00:27.760 --> 01:00:30.260
So if you're interested in
the device profile editor,

01:00:30.310 --> 01:00:32.460
come up to us after the session.

01:00:32.460 --> 01:00:33.300
Give us your card.

01:00:33.300 --> 01:00:35.490
We'll get you on a list.

01:00:35.900 --> 01:00:41.130
and we'll see that to you when it's
ready for actual testing and we'll

01:00:41.780 --> 01:00:47.030
get you on a list for feedback.

01:00:47.030 --> 01:00:47.030
So developer resources,
we've got a lot of sample code

01:00:47.030 --> 01:00:47.030
in both C and Objective-C.

01:00:47.600 --> 01:00:50.660
The sample code covers audio
and data burning and erasing.

01:00:50.660 --> 01:00:53.040
We're going to try to get--
we've got some new sample code,

01:00:53.040 --> 01:01:00.780
and we're going to try to get the demos
that we just did up as sample code.

01:01:00.950 --> 01:01:02.700
There's the URL to the sample code.

01:01:02.700 --> 01:01:05.240
We've also got a public mailing
list in which you can get on,

01:01:05.240 --> 01:01:06.550
ask your questions.

01:01:06.690 --> 01:01:09.460
It's good to ask your questions in public
because someone else may have already

01:01:09.520 --> 01:01:13.260
had the problem you're having or someone
else may encounter it in the future.

01:01:13.310 --> 01:01:16.660
And it's all archived so
people can search the archives

01:01:16.660 --> 01:01:18.680
and get help that way.

01:01:20.160 --> 01:01:27.230
So we've got documentation,
DiscRecording services, and it's--

01:01:27.650 --> 01:01:29.100
I believe it's also under Cocoa.

01:01:29.100 --> 01:01:32.770
We're kind of a technology
that's both Carbon and Cocoa.

01:01:32.770 --> 01:01:38.600
So this path says that we're in Carbon,
but also on connect.apple.com,

01:01:38.600 --> 01:01:41.280
we've got some new reference
documentation for Panther only,

01:01:41.280 --> 01:01:45.360
and that's under connect.apple.com
because it's Panther and

01:01:45.360 --> 01:01:46.990
it's under NDA for now.

01:01:48.400 --> 01:01:54.180
and I will bring Patrick back
up to do the wrap-up.

01:02:03.600 --> 01:02:08.550
To follow up, as Drew was mentioning,
that we do want to get all your feedback.

01:02:08.640 --> 01:02:13.140
So the contact information up above
would be the best way to do that and

01:02:13.140 --> 01:02:17.680
primarily go through me and then I can
disseminate it to the appropriate

01:02:17.800 --> 01:02:20.300
engineers and keep everything in order.

01:02:20.300 --> 01:02:23.900
But this is something we're
really excited about with Panther.

01:02:23.900 --> 01:02:28.260
And anyone that has to go through the
process of getting Drive certified

01:02:28.260 --> 01:02:30.040
will see all the benefits.

01:02:30.100 --> 01:02:33.670
So, anyway, um...

01:02:33.810 --> 01:02:38.450
So there's a few sessions that you
might be interested in as well.

01:02:38.480 --> 01:02:42.530
Audio formats, today at 5:00.

01:02:42.660 --> 01:02:46.700
Cocoa user interface programming,
tomorrow.

01:02:46.700 --> 01:02:51.060
QuickTime and enhanced CDs,
which is Thursday at 10:30.

01:02:51.100 --> 01:02:53.290
And writing threaded applications.

01:02:53.330 --> 01:02:56.490
So if you want to stay on this subject,
please attend those.