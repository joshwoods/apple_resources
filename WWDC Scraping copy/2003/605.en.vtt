WEBVTT

00:00:21.030 --> 00:00:25.160
Coming all the way from
Cupertino this afternoon,

00:00:25.160 --> 00:00:27.660
to entertain you,
please welcome the dream team,

00:00:27.670 --> 00:00:30.340
Stefan Reich and Han-Ming Ong.

00:00:37.680 --> 00:00:42.170
Hello and welcome to session
605 WebObjects and J2EE.

00:00:42.430 --> 00:00:45.980
I think there's two main types of
developers in the audience today.

00:00:46.620 --> 00:00:51.300
Number one, the traditional WebObjects
developer who is anxious to

00:00:51.410 --> 00:00:54.590
see what's going on with J2EE,
how does it affect WebObjects.

00:00:54.590 --> 00:00:59.080
And the second type,
hopefully the pure J2EE developer

00:00:59.080 --> 00:01:04.630
who wants to see what support we
have in Macro S10 server for J2EE,

00:01:04.630 --> 00:01:07.540
what we ship, what it looks like.

00:01:07.600 --> 00:01:08.700
Thank you.

00:01:09.210 --> 00:01:10.210
Good.

00:01:10.350 --> 00:01:14.110
So I hope you're going to answer
all of these questions and switch

00:01:14.110 --> 00:01:18.320
a few slides to our roadmap.

00:01:18.540 --> 00:01:21.970
So I'm going to go over
all of the new features,

00:01:21.970 --> 00:01:26.060
be they in the Mac OS and
server support for J2EE or the

00:01:26.160 --> 00:01:28.860
new features in WebObjects.

00:01:28.980 --> 00:01:32.210
Then I'm going to introduce
the J2EE components that are

00:01:32.240 --> 00:01:34.100
part of our J2EE strategy.

00:01:34.100 --> 00:01:36.690
I'm going to go over
the development tools,

00:01:36.690 --> 00:01:39.700
especially the WebObjects
development tools for J2EE.

00:01:39.700 --> 00:01:46.300
And finally, I'm going to introduce the
specific WebObjects features

00:01:46.300 --> 00:01:49.780
for our J2EE integration story.

00:01:52.000 --> 00:01:57.200
Okay, so this is the feature set that
we have been working on so far.

00:01:57.200 --> 00:02:02.910
We have runtime support for J2EE 1.3,
namely the JBoss container

00:02:02.940 --> 00:02:06.660
that was announced in the
Mac OS X server technical overview.

00:02:06.660 --> 00:02:12.020
We have a graphical J2EE deployment
tool that helps configuring

00:02:12.020 --> 00:02:16.210
enterprise applications,
EJB modules, and web modules.

00:02:16.230 --> 00:02:20.400
We have a monitoring and
configuration tool that helps

00:02:20.400 --> 00:02:25.080
you see and watch the load,
watch the resources in your container,

00:02:25.080 --> 00:02:31.230
and also help optimize your container
setup for speed and maintainability.

00:02:31.240 --> 00:02:35.720
We have written an admin
plugin for the server admin.

00:02:36.660 --> 00:02:40.160
We have a web application in
Mac OS X server that makes it

00:02:40.230 --> 00:02:44.440
very easy to control the lifecycle
of the application server with

00:02:44.440 --> 00:02:46.840
watchdog integration and so on.

00:02:46.840 --> 00:02:51.030
In addition to that,
we have end templates prepared

00:02:51.170 --> 00:02:55.850
for pure J2EE development,
namely for the EJB module,

00:02:55.890 --> 00:03:00.760
the web module,
and also the enterprise application.

00:03:01.460 --> 00:03:05.650
In addition to the pure
compilation of J2EE project,

00:03:05.710 --> 00:03:09.530
we have added X-Docklet support
that helps you maintain most

00:03:09.530 --> 00:03:12.590
of the deployment descriptors,
all of the artifact classes

00:03:13.070 --> 00:03:17.530
in the EJB specification as,
for example, local interfaces,

00:03:17.530 --> 00:03:20.810
remote interfaces, home interfaces,
and so on.

00:03:21.440 --> 00:03:28.550
We have taken these end projects
and integrated them with Xcode.

00:03:28.630 --> 00:03:34.560
So we have both projects that we can
use in Xcode and we have templates

00:03:34.750 --> 00:03:40.910
for additional files such as JSPs,
servlets, message driven beans and so on.

00:03:41.400 --> 00:03:45.770
And last but not least,
we have improved the WebObjects core

00:03:45.980 --> 00:03:50.900
container to play very well in a
J2EE environment and to be completely

00:03:50.900 --> 00:03:56.440
configurable inside a J2EE container
with J2EE development tools.

00:03:59.410 --> 00:04:00.140
So that was quick.

00:04:00.360 --> 00:04:01.060
Let's go on.

00:04:01.330 --> 00:04:04.720
And I'm going to explain our story,
our J2EE story.

00:04:04.720 --> 00:04:08.100
So first of all, the question,
especially for the WebObjects people,

00:04:08.100 --> 00:04:09.320
would be why?

00:04:09.320 --> 00:04:12.560
Why WebObjects and why
WebObjects with J2EE?

00:04:12.560 --> 00:04:15.900
So if you have been at
the Java 1 conference,

00:04:15.900 --> 00:04:19.450
basically the message
was Java is everywhere.

00:04:19.450 --> 00:04:24.500
And the second part of the message
is J2EE is almost everywhere.

00:04:25.340 --> 00:04:28.510
So in fact,
we had a lot of customer requests

00:04:28.570 --> 00:04:35.050
coming in who wanted to have J2EE 1.3
support on the Mac OS X server platform.

00:04:35.060 --> 00:04:39.160
And this is one of the
reasons why we included it.

00:04:39.160 --> 00:04:43.510
The second reason, again,
is more for our WebObjects folks

00:04:43.510 --> 00:04:49.120
who have been facing challenges
getting their WebObjects applications

00:04:49.120 --> 00:04:54.900
deployed in customer environments,
in companies.

00:04:55.370 --> 00:04:57.600
So we have a lot of companies
who basically only have

00:04:57.600 --> 00:04:59.050
a J2EE-based middleware.

00:04:59.060 --> 00:05:03.170
And this is where our
integration support comes in.

00:05:03.180 --> 00:05:06.160
And basically,
our new support helps you sell

00:05:06.160 --> 00:05:09.860
your WebObjects application and
deploy your WebObjects application

00:05:10.400 --> 00:05:13.340
even on a J2EE environment.

00:05:13.700 --> 00:05:15.720
So I think that's enough of the why.

00:05:15.740 --> 00:05:17.720
It now comes to how.

00:05:17.770 --> 00:05:20.280
The J2EE container that
we ship is called JBoss.

00:05:20.280 --> 00:05:27.250
It is really the open source container,
the open source J2EE container out there.

00:05:27.520 --> 00:05:33.370
And it has the largest community,
both in terms of developer

00:05:33.470 --> 00:05:36.520
and in terms of active users.

00:05:36.580 --> 00:05:41.960
When you go to the website, jboss.org,
you will see that they feature over 2

00:05:42.050 --> 00:05:44.680
million downloads for the last year.

00:05:44.680 --> 00:05:49.520
They have 1.5 million
downloads this year alone.

00:05:49.520 --> 00:05:53.480
And you can also have a look at the
major companies that are out there

00:05:53.930 --> 00:05:57.500
that are deploying their applications,
their J2EEs.

00:05:57.520 --> 00:06:07.800
And you can also have a look at the major
companies that are out there that are

00:06:07.800 --> 00:06:14.140
deploying their J2EE software on JBoss.

00:06:14.140 --> 00:06:14.140
So it's a very interesting site.

00:06:15.110 --> 00:06:21.110
So we have not only taken the CVS,
the CVS source space,

00:06:21.190 --> 00:06:26.510
compiled it and put it on to,
on the Mac OS X server.

00:06:26.800 --> 00:07:44.400
[Transcript missing]

00:07:46.710 --> 00:07:50.980
So here's another few points
for our customization.

00:07:50.980 --> 00:07:55.420
We have identified the three most
important use cases for JBoss,

00:07:55.500 --> 00:07:59.880
namely development,
deployment on a standalone machine,

00:07:59.900 --> 00:08:02.910
and also deployment in
a cluster environment.

00:08:03.130 --> 00:08:08.100
So for the develop environment,
we have a very quick turnaround time.

00:08:08.410 --> 00:08:12.060
So as you might know,
JBoss features something

00:08:12.060 --> 00:08:15.620
called auto deploy,
where the container scans

00:08:15.690 --> 00:08:19.800
the directory for updates,
for removal of packages, and so on.

00:08:19.830 --> 00:08:23.710
And this is one of the
values that we changed.

00:08:23.890 --> 00:08:26.640
It picks up changes immediately.

00:08:26.640 --> 00:08:33.360
We have advanced-- we have the logging
levels adjusted for you to really have

00:08:33.360 --> 00:08:38.010
a look at what's going on behind the
scenes and to identify possible problems

00:08:38.010 --> 00:08:40.780
very early in the deployment process.

00:08:40.780 --> 00:08:43.420
The deploy-- the two
deploy configurations,

00:08:43.420 --> 00:08:47.490
deploy standalone and deploy cluster,
of course, are optimized for

00:08:47.490 --> 00:08:49.440
performance and scalability.

00:08:49.440 --> 00:08:54.250
So we have set, for example,
the number of concurrent

00:08:54.250 --> 00:08:56.600
connections very high.

00:08:56.600 --> 00:09:00.750
We have made that the Tomcat
logging levels are low in

00:09:00.750 --> 00:09:04.690
order to reduce I/O and so on.

00:09:05.090 --> 00:09:08.970
The third configuration,
the deploy cluster configuration,

00:09:09.350 --> 00:09:14.000
enables you to take a bunch of machines,
maybe an XServe cluster or something,

00:09:14.000 --> 00:09:19.550
and deploy your website on those
many machines that you have.

00:09:19.600 --> 00:09:23.940
That means you have high availability,
you have load balancing,

00:09:23.940 --> 00:09:28.320
and you also have HTTP session
clustering turned on by default.

00:09:30.910 --> 00:09:34.900
In general,
we have taken care of optimizing

00:09:34.900 --> 00:09:39.850
the JBoss source base and also
optimizing the configuration

00:09:39.850 --> 00:09:42.900
settings for spec compliance.

00:09:43.180 --> 00:09:48.100
Many of the parameters that you can set
in the JBoss configuration files allow

00:09:48.500 --> 00:09:53.140
you to trade spec compliance for speed,
but we have made sure that spec

00:09:53.180 --> 00:09:57.900
compliance is the most important setting
in all of the three configurations.

00:09:59.310 --> 00:10:06.350
Lastly, we have made sure that JBoss
itself has optimal JDK 1.4 support.

00:10:06.600 --> 00:10:10.580
There are many features that are
optional or that you have to explicitly

00:10:10.580 --> 00:10:15.310
enable on a JDK 1.4 environment,
and we have taken care of that because

00:10:15.810 --> 00:10:21.260
our standard environment is JDK 1.4,
and especially for JDBC 3 for generating

00:10:21.380 --> 00:10:26.640
primary keys on the fly by the database,
this is a very important feature.

00:10:29.710 --> 00:10:34.150
And now let's talk about the integration
of JBoss with Macro SN Server.

00:10:34.240 --> 00:10:39.520
So for one thing, for people who already
know our Tomcat bundling,

00:10:39.540 --> 00:10:46.970
we have made sure that the JBoss bundling
is done in our /library directory.

00:10:47.120 --> 00:10:50.560
We pull out all of the log files,
and the log files will be written

00:10:50.560 --> 00:10:54.800
into library logs to send that
location on Macro SN Server.

00:10:54.800 --> 00:10:57.820
We have pulled out temporary
directories and so on.

00:10:57.880 --> 00:11:02.880
So it's very tied in into the
traditional system layout,

00:11:02.950 --> 00:11:04.640
file system layout in Macro S10.

00:11:04.650 --> 00:11:07.730
And you will find whatever you want,
whatever you're looking

00:11:07.880 --> 00:11:10.270
for in the standard places.

00:11:11.030 --> 00:11:16.120
Important also is you might have seen
the tool in the technical overview of

00:11:16.120 --> 00:11:20.060
Mac OS and server that allows you to
configure Mail and Apache and so on.

00:11:20.080 --> 00:11:24.170
And we have written a plugin that
also allows you to help configure and

00:11:24.410 --> 00:11:26.480
manage the lifecycle of the container.

00:11:26.480 --> 00:11:28.470
You can start the service,
you can stop it,

00:11:28.470 --> 00:11:31.640
you can choose the configuration,
you can have a look at

00:11:31.650 --> 00:11:32.790
the log files and so on.

00:11:32.800 --> 00:11:36.590
We'll have a quick screenshot
of this tool later on.

00:11:36.870 --> 00:11:41.420
Also very important is to ensure
constant availability of the service

00:11:41.890 --> 00:11:45.860
is if it should fail for any reason,
the watchdog process will

00:11:45.860 --> 00:11:49.910
immediately be notified and
restart the container so that you

00:11:50.110 --> 00:11:53.780
have basically almost no downtime,
only the 20 seconds it takes

00:11:53.780 --> 00:11:55.220
to restart the container.

00:11:57.460 --> 00:12:00.430
In terms of security integration,
we have made sure that we have

00:12:00.490 --> 00:12:05.300
integration with Open Directory,
which is our single sign-on server.

00:12:05.300 --> 00:12:11.200
And what you can do is you can
use the Open Directory user and

00:12:11.360 --> 00:12:18.570
password sets and authenticate,
for example, web clients with it.

00:12:18.580 --> 00:12:23.530
You can make sure that you basically
have only one security realm.

00:12:23.540 --> 00:12:25.660
You don't have any additional setup.

00:12:26.280 --> 00:12:30.090
You just use the Open Directory to
verify Unix password,

00:12:30.250 --> 00:12:33.170
username, and password combinations.

00:12:35.420 --> 00:12:40.670
Similar with Apache, Apache comes with
Mac OS and server as well.

00:12:40.670 --> 00:12:44.140
And we have made sure that you can serve,
for example, all of the static content

00:12:44.140 --> 00:12:47.250
of your site off of Apache,
which is really fast.

00:12:47.280 --> 00:12:51.690
And Apache can just be configured
to modify and to forward all

00:12:51.690 --> 00:12:55.310
of the requests that are,
that reference to dynamic content

00:12:55.310 --> 00:12:59.420
back to our Tomcat engine,
which is embedded in our JBoss container.

00:13:01.760 --> 00:13:03.260
MySQL.

00:13:03.450 --> 00:13:07.150
You've probably seen that MySQL 4
is shipping on Mac OS and server.

00:13:07.310 --> 00:13:11.480
So we have completed the configuration
and it's enabled by default.

00:13:11.540 --> 00:13:15.170
You don't have to look up port number,
anything again.

00:13:15.250 --> 00:13:20.380
It just works and you can
just access the database.

00:13:21.390 --> 00:13:26.750
And finally, we have LDAP support for the
LDAP server that's integrated.

00:13:26.820 --> 00:13:30.330
And it's extremely easy to set it up.

00:13:30.340 --> 00:13:33.530
It's just a few matters of
properties to set it up.

00:13:33.680 --> 00:13:36.590
And again,
you can browse the whole hierarchy of

00:13:36.720 --> 00:13:41.200
the LDAP server and make use of the
information which is stored inside.

00:13:42.400 --> 00:13:43.930
Okay, using JBoss.

00:13:44.130 --> 00:13:48.120
Now that you know where to get it,
we have two ways of

00:13:48.880 --> 00:13:50.410
starting the container.

00:13:50.590 --> 00:13:54.120
Again,
the server admin plug-in is one way.

00:13:54.120 --> 00:13:56.980
The other way, which is probably more
geared towards the developer,

00:13:56.980 --> 00:14:01.030
is starting it from the command
line from the base directory,

00:14:01.030 --> 00:14:03.920
which is library JBoss 3.2.

00:14:03.920 --> 00:14:08.090
And you find the whole,
you can see it in the screenshots below,

00:14:08.090 --> 00:14:11.360
you can see the whole
traditional structure of the

00:14:11.360 --> 00:14:14.000
JBoss installation down there.

00:14:14.000 --> 00:14:18.940
You can see in the left column,
you can see two directories,

00:14:19.060 --> 00:14:20.330
3.2 and applications.

00:14:20.330 --> 00:14:26.780
You'll find our management application
and our deployment configuration

00:14:26.780 --> 00:14:27.990
in the applications directory.

00:14:29.450 --> 00:14:30.680
Good.

00:14:31.420 --> 00:14:32.810
So far for the file system layout.

00:14:32.810 --> 00:14:35.200
Now let's have a look at
the server admin plugin.

00:14:37.240 --> 00:14:42.110
On the left-hand side,
we have all of the traditional services,

00:14:42.180 --> 00:14:45.590
DNS, FTP, firewall, Apache, and so on.

00:14:45.690 --> 00:14:50.900
Our application server support is
just one more bullet item on the left.

00:14:50.900 --> 00:14:54.860
Again, you can see the logs.

00:14:54.860 --> 00:14:54.860
You can restart the service and so on.

00:14:55.660 --> 00:14:58.950
I should say that all of the tools
that I explained here in a very

00:14:59.390 --> 00:15:04.530
brief way will be explained in much
more detail later in session 612,

00:15:04.530 --> 00:15:06.420
Deploying Enterprise Applications.

00:15:08.080 --> 00:15:12.760
So the deployment tool,
what's the purpose?

00:15:12.760 --> 00:15:15.570
I've heard people complain
that they don't really like

00:15:15.840 --> 00:15:22.740
migrating or writing XML files
with just the DDD as a guideline.

00:15:23.070 --> 00:15:27.770
So what we do is we
facilitate this approach.

00:15:27.870 --> 00:15:31.940
We take away all of the pain of
launching your XML editors and

00:15:32.030 --> 00:15:39.210
configuring JBoss using raw XML,
using a text editor.

00:15:39.360 --> 00:15:43.770
The tool actually--

00:15:44.220 --> 00:15:47.280
The J2EE application
does most of the setup,

00:15:47.410 --> 00:15:51.780
most of the relationships between
the different files automatically.

00:15:52.450 --> 00:15:56.400
The main purpose of this tool is,
however, to migrate binary components

00:15:56.660 --> 00:15:58.100
from other application servers.

00:15:58.250 --> 00:16:03.090
For example, from WebLogic or whatever
server you happen to run on.

00:16:03.100 --> 00:16:05.890
You can just pull out the application.

00:16:06.300 --> 00:16:10.420
The deployment tool helps you to
figure out what of the JBoss specific

00:16:10.420 --> 00:16:15.310
elements in the configuration is
missing and helps you figure out what

00:16:15.460 --> 00:16:17.340
resources are present in your container.

00:16:17.340 --> 00:16:21.660
For example, databases, JCA connectors,
and so on.

00:16:21.660 --> 00:16:25.300
And it will help you match the
requested resources that you find

00:16:25.420 --> 00:16:29.550
in the deployment descriptors with
the actual container resources.

00:16:29.620 --> 00:16:32.620
And we have provided much guideline.

00:16:33.100 --> 00:16:40.610
Much support to help you figure out what
you need to configure for this container.

00:16:40.830 --> 00:16:45.540
We have a verification engine that
marks all of the entity beans that

00:16:45.540 --> 00:16:48.810
need to be configured or where
configuration is missing as red.

00:16:48.850 --> 00:16:51.230
I will show you that in
a screenshot later on.

00:16:51.260 --> 00:16:56.260
We have assisted CMP mapping,
which means the deployment

00:16:56.340 --> 00:17:00.260
tool asks the container which
databases we have configured,

00:17:00.260 --> 00:17:02.640
what other table names,
what other column names.

00:17:02.640 --> 00:17:09.120
In the CMP mapping section of the tool,
you will just match field

00:17:09.630 --> 00:17:13.190
names with drop down menus,
for example,

00:17:13.290 --> 00:17:14.880
for the columns and for the tables.

00:17:15.080 --> 00:17:16.330
It's very easy.

00:17:16.600 --> 00:17:20.710
You don't have to invest much
time into reading the XML files,

00:17:20.840 --> 00:17:24.340
reading the DDDs,
reading the documentation.

00:17:25.510 --> 00:17:27.600
We have two types of configuration again.

00:17:27.700 --> 00:17:34.120
A full configuration which enables
you to really leverage the full

00:17:34.120 --> 00:17:35.620
capabilities of the container.

00:17:35.620 --> 00:17:39.960
Mainly for performance tuning,
for very advanced setup,

00:17:39.960 --> 00:17:45.140
or you can use the express configuration,
which drills down to a very limited

00:17:45.140 --> 00:17:49.840
set of the configuration files,
of the configuration options,

00:17:49.840 --> 00:17:54.200
and only those that really
need to be present in order to

00:17:54.200 --> 00:17:56.840
ensure a successful deployment.

00:17:56.840 --> 00:18:00.990
Lastly, of course,
you want to deploy at last.

00:18:00.990 --> 00:18:05.080
Either you write the file into
the directory that we recommend,

00:18:05.080 --> 00:18:08.460
or somewhere else,
or you can remote deploy the

00:18:08.460 --> 00:18:10.710
enterprise archive as well.

00:18:12.140 --> 00:18:13.900
Here comes a screenshot.

00:18:13.900 --> 00:18:18.800
You can see it's a WebObjects based
application using direct to web.

00:18:18.800 --> 00:18:22.160
And on the left hand side,
on the left hand side,

00:18:22.160 --> 00:18:26.220
you see the pet store,
the pet store ear application,

00:18:26.710 --> 00:18:30.130
which has an embedded set of EJB modules.

00:18:30.130 --> 00:18:33.880
And you also see that some of the beans,
for example,

00:18:33.880 --> 00:18:38.840
the sign on session bean there comes
up in a different color than the rest.

00:18:38.840 --> 00:18:42.350
This means that the sign on
session bean is fully configured.

00:18:42.450 --> 00:18:43.750
You don't have to click on it again.

00:18:43.860 --> 00:18:47.860
And you have to focus on the
other ones that are marked as red.

00:18:48.020 --> 00:18:53.260
And as soon as you update, for example,
when you click on one bean,

00:18:53.310 --> 00:18:57.270
you see a pop up on the right hand side.

00:18:57.440 --> 00:18:59.510
This is the configuration
that you need to fill out.

00:18:59.960 --> 00:19:05.080
Once everything is complete,
it will show up as blue or as fully

00:19:05.080 --> 00:19:11.620
configured on the left hand side as well.

00:19:11.620 --> 00:19:11.680
Again, more details in session 612.

00:19:12.320 --> 00:19:15.310
So the next tool is the
container management tool.

00:19:15.310 --> 00:19:18.440
This is very important because for one
thing you need to know what's going

00:19:18.440 --> 00:19:20.330
on when you're deploying a full site.

00:19:20.330 --> 00:19:24.560
You have to know which application
is causing the most traffic,

00:19:24.560 --> 00:19:26.870
which is the most
important one to optimize.

00:19:26.880 --> 00:19:31.680
This is where the JSR77
monitoring support comes in.

00:19:31.680 --> 00:19:37.280
JSR77 monitoring support or JSR77
as a specification is geared towards

00:19:37.810 --> 00:19:40.280
introspection of a running EJB container.

00:19:40.280 --> 00:19:44.390
You can find out, for example,
which kinds of applications

00:19:44.450 --> 00:19:46.520
are deployed on the server.

00:19:46.520 --> 00:19:51.550
You find out which resources
are deployed and which services.

00:19:52.220 --> 00:19:56.520
On top of that,
JSR77 also requires that the container

00:19:56.760 --> 00:20:01.510
keeps statistics about resource usages,
for example, the transaction manager

00:20:02.070 --> 00:20:03.600
or the connection pools,
for example,

00:20:03.600 --> 00:20:08.410
to find out the waiting time,
the average waiting time on a connection,

00:20:08.470 --> 00:20:12.120
which is very important data
to do fine tuning later on.

00:20:12.130 --> 00:20:18.240
And our container support container
management tool does support just that.

00:20:18.460 --> 00:20:23.170
The second feature of the container
tool is container configuration.

00:20:23.260 --> 00:20:25.580
Again,
all of the configuration is thought

00:20:25.580 --> 00:20:29.260
as XML files and they are very hard
to read and very hard to understand.

00:20:29.260 --> 00:20:36.380
So, we have created a graphical interface
that helps you select the most vital

00:20:36.380 --> 00:20:40.450
options and concentrate on those.

00:20:40.500 --> 00:20:45.680
In your configuration settings,
you can also apply all of the knowledge

00:20:45.680 --> 00:20:50.270
you have gained during the monitoring
and then find you in the container

00:20:50.740 --> 00:20:56.630
based on the knowledge you gained for
the traffic for your particular site.

00:20:57.490 --> 00:21:01.550
Yeah, again,
more on In Session 612 on this tool.

00:21:01.590 --> 00:21:03.670
But let me just quickly
explain how it looks like.

00:21:03.670 --> 00:21:07.830
On the left-hand side,
you see three different tabs,

00:21:07.830 --> 00:21:12.740
Applications, Resources, and Services.

00:21:12.740 --> 00:21:16.100
For the Resources,
currently I have selected

00:21:16.340 --> 00:21:18.490
the Transaction Manager.

00:21:18.500 --> 00:21:22.210
And on the right-hand side,
you can see the statistics that the

00:21:22.210 --> 00:21:24.360
Transaction Manager keeps for us.

00:21:24.840 --> 00:21:28.540
In this case,
we have three different counts.

00:21:28.540 --> 00:21:31.910
We have committed transaction,
we have the number of

00:21:31.910 --> 00:21:34.410
rollback transaction,
and we have the number of

00:21:34.510 --> 00:21:35.720
currently active transactions.

00:21:35.720 --> 00:21:39.450
All of this is important data
to figure out how much resource

00:21:39.450 --> 00:21:41.840
usage your container actually has.

00:21:44.450 --> 00:21:50.300
Okay, this concludes the introduction
of the J2EE components.

00:21:50.300 --> 00:21:53.880
This is mostly the stuff that we
have in Mac OS and server and that

00:21:53.890 --> 00:21:55.640
we will leverage with WebObjects.

00:21:55.680 --> 00:21:59.880
I will switch on to the next topic,
J2EE development with WebObjects

00:21:59.880 --> 00:22:02.020
tools and Mac OS and server tools.

00:22:02.020 --> 00:22:05.360
And for that, I would like to welcome
Han-Ming Ong on stage.

00:22:10.900 --> 00:22:12.320
Thank you, Stefan.

00:22:12.340 --> 00:22:12.800
Hi there.

00:22:12.820 --> 00:22:14.200
My name is Han-Ming Ong.

00:22:14.200 --> 00:22:17.660
I'm an engineer in the
J2EE WebObjects team.

00:22:17.660 --> 00:22:20.360
I know you have been listening
for more than 25 minutes.

00:22:20.400 --> 00:22:23.310
Bear with me for 15 more
and we'll show you a demo.

00:22:25.110 --> 00:22:27.600
Okay, development tools.

00:22:27.650 --> 00:22:31.390
Here is a summary of four development
tools that we have in order to help

00:22:31.440 --> 00:22:33.600
you with your J2EE development.

00:22:33.600 --> 00:22:35.980
I'll just go through quickly
each one of them and then jump

00:22:35.980 --> 00:22:37.240
into more details about each.

00:22:37.240 --> 00:22:38.430
Xcode.

00:22:39.150 --> 00:22:44.050
That's the new Apple's IDE that
we have and now it's integrated

00:22:44.240 --> 00:22:48.240
with the J2EE project types,
project templates and follow visits.

00:22:48.240 --> 00:22:55.240
Two, Xcode and N integration.

00:22:55.240 --> 00:22:59.020
N is the Java based build tool and
Xtoglet is the metadata processor that

00:22:59.070 --> 00:23:02.080
generates files and codes for you.

00:23:02.080 --> 00:23:06.900
I'll talk about this tool in
details in subsequent slides.

00:23:07.460 --> 00:23:10.870
EO Modeler, that's the,
for the WebObjects crowd,

00:23:10.950 --> 00:23:14.400
that's the EO modeling tool that we have.

00:23:14.480 --> 00:23:17.680
And EO Bean Assistant,
we ship EO Bean Assistant,

00:23:17.680 --> 00:23:21.310
which is the entity bean
generator in WebObjects 5.2,

00:23:21.520 --> 00:23:25.300
but now it's been upgraded to
support EJB 2.0 specification.

00:23:25.850 --> 00:23:29.860
Stefan will delve into the
details for these two tools.

00:23:31.300 --> 00:23:36.200
Okay, and integration with Xcode.

00:23:36.400 --> 00:23:41.960
Now, Xcode is the IDE that
Apple encourages you to use to

00:23:41.960 --> 00:23:45.610
develop projects on Mac OS X.

00:23:45.610 --> 00:23:50.170
And Ant is the de facto tool that,
you know, Java developers use to develop

00:23:50.270 --> 00:23:53.570
Java projects on every other platforms.

00:23:53.690 --> 00:23:54.760
Let's have a show of hands, actually.

00:23:54.760 --> 00:23:57.630
How many of you have used Ant before?

00:23:58.700 --> 00:24:01.000
It's a pretty overwhelming response.

00:24:01.040 --> 00:24:08.040
So both Apple and you have emphasized
that these two tools should work

00:24:08.040 --> 00:24:11.590
together so that you have a relevant

00:24:12.150 --> 00:24:16.800
Development Platform and
Mac OS X for J2EE Tools.

00:24:16.940 --> 00:24:20.200
So, let me say a caveat first.

00:24:20.610 --> 00:24:24.510
The developer CD that you have,
you need to go into the sneak peeks

00:24:24.530 --> 00:24:29.300
folder and install the N integration
tools in order to play with it.

00:24:29.400 --> 00:24:32.070
And we would love that you play
with it so that you can give us

00:24:32.070 --> 00:24:34.710
feedback and we can improve further.

00:24:37.290 --> 00:24:40.790
Okay, let's dive in now and
talk about the details.

00:24:41.000 --> 00:24:46.300
We are using AND 153
to build J2EE projects.

00:24:46.300 --> 00:24:50.100
We hope to pick up the latest
version whenever they have it.

00:24:50.340 --> 00:24:52.200
Current version is 153.

00:24:52.520 --> 00:24:57.160
And two,
if you have done J2EE development before,

00:24:57.640 --> 00:25:01.020
especially EJB, you know that you have
to deal with three,

00:25:01.020 --> 00:25:05.390
four, five Java files that are
essentially boilerplate files.

00:25:05.390 --> 00:25:09.320
And all the deployment descriptors
as well that Stefan alluded to.

00:25:09.320 --> 00:25:13.640
We are leveraging another great open
source project known as XStocklet

00:25:13.690 --> 00:25:15.960
to help you manage this complexity.

00:25:15.960 --> 00:25:18.500
And I'll talk more about that as well.

00:25:18.500 --> 00:25:21.280
Three,
in order to jumpstart the J2EE project,

00:25:21.280 --> 00:25:22.180
we have to build J2EE.

00:25:22.330 --> 00:25:26.560
To help start your
J2EE development on Mac OS X,

00:25:26.650 --> 00:25:31.140
Xcode now comes with three
project templates to help

00:25:31.310 --> 00:25:34.320
you build your Web module,
your EJB module,

00:25:34.320 --> 00:25:35.260
and your enterprise application.

00:25:35.310 --> 00:25:38.340
It also comes with two file
wizards to help you build

00:25:38.520 --> 00:25:40.420
your EJBs and your servlets.

00:25:43.060 --> 00:25:49.390
And during your development process,
it's really essential for you to have

00:25:49.390 --> 00:25:54.660
a quick test deploy of your module into
JBoss so that you can test drive it.

00:25:54.840 --> 00:25:58.440
So what happens,
we optimize it so that the build product

00:25:58.980 --> 00:26:04.090
of your wall or your jar or your year
goes into the auto deploy directory

00:26:04.130 --> 00:26:06.380
that Stefan mentioned earlier on.

00:26:06.670 --> 00:26:10.800
And say your computer is
RAM challenged and your JBoss

00:26:10.800 --> 00:26:14.600
is installed on another machine,
you can always use the FTP task.

00:26:14.650 --> 00:26:19.730
Although this is encouraged only during
development because of the security

00:26:19.820 --> 00:26:22.270
risks associated with plain FTP.

00:26:25.060 --> 00:26:29.560
A couple more quick details
to complete the picture.

00:26:29.560 --> 00:26:32.000
In the developer preview CD,
when you install it,

00:26:32.000 --> 00:26:36.100
the files that support your N and
XTocklet integration work will be

00:26:36.100 --> 00:26:39.440
installed in developer Java J2EE.

00:26:39.500 --> 00:26:43.150
Now you want to know this because you
might need to surgically upgrade N or

00:26:43.320 --> 00:26:48.400
XTocklet for speed or feature reason.

00:26:48.400 --> 00:26:52.220
We try to ship with examples to
demonstrate the power of XTocklet and N.

00:26:52.270 --> 00:26:56.990
Actually, we with one now,
but we will provide more as we go along.

00:26:59.010 --> 00:27:03.340
Okay, you guys know about ANN,
so we have more things to talk about,

00:27:03.450 --> 00:27:08.010
so I'll skip this slide and talk
about the more interesting things.

00:27:08.800 --> 00:27:12.440
So I'm going to talk about the
end scripts that comes with the

00:27:12.610 --> 00:27:15.160
project templates that we have.

00:27:15.410 --> 00:27:18.960
First off, you'll see build.xml
and build.properties.

00:27:18.980 --> 00:27:22.080
These are pretty much the two
files that you see in every other

00:27:22.100 --> 00:27:24.700
Java project on other platform.

00:27:24.920 --> 00:27:32.330
WebBuild.xml is a build script that's
provided by us to build your web module.

00:27:32.330 --> 00:27:36.800
And EJBBuild.xml helps
to build your EJB module.

00:27:36.800 --> 00:27:40.310
And an enterprise application,
which is the third kind

00:27:40.310 --> 00:27:44.040
of project template,
would contain copies of one of

00:27:44.040 --> 00:27:48.920
each because they usually contain
a web module and an EJB module.

00:27:49.050 --> 00:27:53.700
It has to be emphasized that these
four build scripts are customizable,

00:27:53.710 --> 00:27:55.360
just like any good end build scripts.

00:27:55.440 --> 00:27:57.840
Customizable to your heart's content.

00:27:57.930 --> 00:28:01.470
If you don't like a certain style,
you're encouraged to change it.

00:28:04.580 --> 00:28:09.040
Last show of hands,
who have used xDoclet before?

00:28:09.040 --> 00:28:11.110
It's pretty cool.

00:28:11.800 --> 00:28:18.100
So essentially it is a, to simplify it,
it is a code generation tool and it

00:28:18.110 --> 00:28:23.240
helps you generate extra Java files,
those pesky deployment descriptors

00:28:23.290 --> 00:28:27.860
based on extra information that you
put into your original Java file.

00:28:28.330 --> 00:28:32.330
In the correct Java J2EE lingo,
this extra information

00:28:33.070 --> 00:28:35.300
are known as metadata.

00:28:35.450 --> 00:28:38.860
And to specify those metadata,
you use Java.txt.

00:28:38.890 --> 00:28:41.090
They are defined by XTocklet.

00:28:43.380 --> 00:28:46.710
To generate the files and
the deployment descriptors,

00:28:46.810 --> 00:28:51.740
you have to run it through two end tasks,
WebDocklet and EJBDocklet.

00:28:51.750 --> 00:28:55.880
Now, as the names imply,
the WebDocklet builds your web module,

00:28:55.900 --> 00:28:58.970
the EJBDocklet builds your EJB module.

00:28:59.400 --> 00:29:03.960
The web doclet that we have in your
developer preview CD is a special

00:29:04.010 --> 00:29:09.590
build compiled from the CVS source,
open source, because when the developer

00:29:10.200 --> 00:29:14.020
CD went to print,
they have not released the beta build.

00:29:14.340 --> 00:29:16.150
So it's 1.2 beta 3.

00:29:16.290 --> 00:29:18.920
I'm mentioning this because
in case you need to upgrade,

00:29:18.920 --> 00:29:21.300
you know where to download
and where to put them.

00:29:21.310 --> 00:29:23.290
I mentioned it before.

00:29:24.090 --> 00:29:27.300
And if you like X-Tocklet,
be sure to thank them for

00:29:27.300 --> 00:29:29.520
their effort as well when you
visit the website and stuff.

00:29:32.170 --> 00:29:37.150
Here's a little diagram
that summarizes the process.

00:29:37.550 --> 00:29:40.200
On your left is the original Java file.

00:29:40.200 --> 00:29:43.560
Here we choose EJB because
it's pretty illustrative.

00:29:43.560 --> 00:29:48.080
And we would put Javadoc
tags as defined by X-Doclet.

00:29:48.110 --> 00:29:51.470
I wouldn't go into the details
of each tag because Stefan and,

00:29:51.540 --> 00:29:54.570
you know,
we'll go into them and you can find

00:29:54.570 --> 00:29:57.560
them on the X-Doclet website as well.

00:29:57.570 --> 00:30:01.360
So, suffice to say,
if you put in proper and correct

00:30:02.180 --> 00:30:05.350
X-Doclet tags and run that
through the EJB Doclet task,

00:30:05.440 --> 00:30:10.020
in this case the EJB Doclet task,
it will spit out for you, in this case,

00:30:10.020 --> 00:30:11.140
five files.

00:30:11.140 --> 00:30:12.320
All right?

00:30:12.320 --> 00:30:15.980
These five files are boilerplate files
that you probably shouldn't worry

00:30:16.240 --> 00:30:18.550
about in your normal development.

00:30:18.710 --> 00:30:21.130
And if you want to,
we will generate deployment

00:30:21.130 --> 00:30:23.700
descriptors as well,
those XML files.

00:30:24.120 --> 00:30:27.420
The good thing about XTocklet
is if you don't like using them,

00:30:27.420 --> 00:30:28.640
you don't have to use them.

00:30:28.650 --> 00:30:31.600
Say you are a code masochist and
you decided that juggling five

00:30:31.720 --> 00:30:35.840
Java files that are essentially
boilerplates is a healthy obsession,

00:30:36.150 --> 00:30:40.100
ignore the XTocklet test and
go straight to the Ant test.

00:30:40.100 --> 00:30:42.080
We bid you good luck, though.

00:30:44.400 --> 00:30:50.140
I'm going to switch gears a little bit
and talk about the project templates.

00:30:50.140 --> 00:30:52.150
We assume that you have
experience with Xcode,

00:30:52.150 --> 00:30:54.480
while it's a reincarnation
of Project Builder,

00:30:54.480 --> 00:30:56.060
so you know, and using Ant.

00:30:56.060 --> 00:31:00.010
And we assume that you would
like to learn about XDoclet.

00:31:00.860 --> 00:31:06.140
So I'm going to enumerate the major steps
so that you have a clear overall idea.

00:31:06.220 --> 00:31:08.530
First off,
what you do is you go to Xcode and

00:31:08.530 --> 00:31:10.860
instantiate the WebModule project.

00:31:10.860 --> 00:31:16.250
It will give you three build scripts,
build.xml, build.properties,

00:31:16.250 --> 00:31:18.340
and webbuild.xml.

00:31:18.340 --> 00:31:20.970
You can always customize them
then or you can always come

00:31:21.010 --> 00:31:23.080
back later to customize them.

00:31:23.140 --> 00:31:26.450
And then you create your
sublets using the file wizard.

00:31:26.450 --> 00:31:29.870
It will ask you a few questions
and then generate the the file

00:31:29.880 --> 00:31:31.990
for you based on your answers.

00:31:32.190 --> 00:31:34.250
As opposed to EJBs,
actually sometimes you create

00:31:34.280 --> 00:31:37.030
your serverlets from scratch,
no big deal.

00:31:37.140 --> 00:31:42.080
If you do that, make sure you observe
the naming convention.

00:31:42.350 --> 00:31:47.310
Because the task that we have in the
build scripts recognizes these files

00:31:47.380 --> 00:31:51.300
that end with this four kind of ending.

00:31:51.300 --> 00:31:56.520
servlet.java, tag.java, action.java,
filter.java.

00:31:56.520 --> 00:31:59.060
It takes me a long time
to remember these four.

00:31:59.560 --> 00:32:03.570
So,
and then you add your static resources.

00:32:03.570 --> 00:32:06.080
For WebModule,
usually you have quite a lot

00:32:06.210 --> 00:32:08.360
because you have your JSPs,
you have your images,

00:32:08.530 --> 00:32:12.510
you have your tech libraries,
you have your third-party jars.

00:32:12.600 --> 00:32:14.360
So if you need that,
make sure you put it into

00:32:14.360 --> 00:32:16.200
the static resources.

00:32:16.350 --> 00:32:20.440
The demo we're going to
show will illustrate this.

00:32:20.460 --> 00:32:23.140
And then you hit the
compile button on Xcode.

00:32:23.180 --> 00:32:27.430
What happens is it will choose
the default target in end,

00:32:27.780 --> 00:32:32.230
which we chose to be installed
because it's the shortest path

00:32:32.310 --> 00:32:35.400
to test deploy your WAR file.

00:32:35.400 --> 00:32:38.370
It will not only run through
that web doclet task,

00:32:38.480 --> 00:32:42.730
generate a deployment descriptor,
compile your classes, create a WAR,

00:32:42.880 --> 00:32:45.580
and drop it into the deploy,
auto deploy directory

00:32:45.580 --> 00:32:47.000
that Stefan mentioned.

00:32:47.000 --> 00:32:50.200
If JBoss were running,
it gets picked up almost immediately,

00:32:50.200 --> 00:32:55.800
and you can test drive it by firing your
web browser because it is a web module.

00:32:56.380 --> 00:33:00.520
Let's move on to EJB module.

00:33:00.530 --> 00:33:03.240
Again, you create it from Xcode,
instantiate it,

00:33:04.420 --> 00:33:07.360
and then for your build scripts,
instead of having WebBuild,

00:33:07.460 --> 00:33:09.800
you have your EJB build.

00:33:10.360 --> 00:33:14.750
Now you go and create your EJBs,
but we really encourage you to try to

00:33:14.810 --> 00:33:20.700
use the wizards because it's slightly
more complicated to create from scratch.

00:33:20.700 --> 00:33:24.160
So the wizards that we have
will help you create stateless,

00:33:24.160 --> 00:33:25.590
stateful session beans.

00:33:26.110 --> 00:33:33.030
entity beans, the simple BMP and CMP,
and eventually your message-driven bean.

00:33:33.490 --> 00:33:36.770
The version that you get on a developer
CD might not be that powerful,

00:33:36.770 --> 00:33:39.000
but give us feedback.

00:33:39.080 --> 00:33:42.800
And eventually we'll have
message-driven VIN as well.

00:33:43.370 --> 00:33:47.960
If you do create the EJBs from scratch,
make sure you observe the

00:33:47.960 --> 00:33:49.700
naming convention as well.

00:33:49.730 --> 00:33:55.030
We have to end with EJB.java, bin.java,
or mdb.java in order for

00:33:55.060 --> 00:33:57.500
the EJB doclet task to work.

00:33:57.560 --> 00:33:59.290
And then you add your static resources.

00:33:59.440 --> 00:34:01.900
For EJB module,
usually you don't have a lot,

00:34:01.980 --> 00:34:06.100
but you might want to add your
customized deployment descriptor,

00:34:06.100 --> 00:34:09.530
your EJB jar or your JBoss.xml.

00:34:10.040 --> 00:34:12.140
Similar story,
you hit the Compile button,

00:34:12.170 --> 00:34:14.940
you will auto deploy it to JBoss.

00:34:14.970 --> 00:34:18.070
As opposed to WebModule,
you wouldn't have a web

00:34:18.070 --> 00:34:19.690
interface to test it.

00:34:19.780 --> 00:34:23.110
So usually what you do is you
create a test web interface

00:34:23.110 --> 00:34:25.280
beforehand to test drive it.

00:34:25.610 --> 00:34:28.390
Or you can look at the JBoss log.

00:34:32.420 --> 00:34:35.460
This is the last slide for me.

00:34:35.520 --> 00:34:37.930
So for enterprise application,
this is usually the most

00:34:37.930 --> 00:34:41.300
complicated to explain,
but because we have built our foundation

00:34:41.300 --> 00:34:45.710
knowledge on the previous two slides,
so we can apply that knowledge to here.

00:34:45.740 --> 00:34:51.410
And that J2EE enterprise application
will usually contain a copy of

00:34:51.470 --> 00:34:56.740
one or more copies of WebModule,
one or more copies of EJB modules,

00:34:57.000 --> 00:35:00.800
with steady resources,
your third-party jobs, etc.

00:35:00.910 --> 00:35:06.480
And eventually the end product is
something conventionally known as a year.

00:35:08.480 --> 00:35:14.740
Our enterprise application
template will start with one

00:35:14.740 --> 00:35:17.520
EJB module and one web module.

00:35:17.520 --> 00:35:22.220
So we will contain a
webbuild.xml and an ejbbuild.xml.

00:35:22.320 --> 00:35:26.030
Next, you go through the similar steps
of creating servlets and EJBs

00:35:26.160 --> 00:35:28.470
like what I mentioned earlier on.

00:35:28.860 --> 00:35:32.740
And then you add your static
resources to the organized

00:35:33.110 --> 00:35:35.540
subfolders that you'll see later.

00:35:35.660 --> 00:35:40.510
Static resources for WebModule go
to the subfolder for WebModule.

00:35:40.760 --> 00:35:43.700
and similarly for the EJB module.

00:35:43.740 --> 00:35:47.020
EJB enterprise application
does have its own special

00:35:47.020 --> 00:35:51.680
requirement for static resources,
the third party jars that

00:35:51.680 --> 00:35:56.330
your modules are dependent on,
for example, log4j, JUnit, blah, blah,

00:35:56.330 --> 00:35:56.890
blah.

00:35:57.070 --> 00:36:01.610
You have to make sure as
per the J2EE specification,

00:36:01.610 --> 00:36:04.950
you have to make sure that the
manifest files of those modules

00:36:05.560 --> 00:36:08.840
that you're going to make use of,
the English came out bad,

00:36:08.890 --> 00:36:13.920
but the modules that is going to
be dependent on a third party jars,

00:36:13.930 --> 00:36:17.430
make sure you amend the manifest
files for those to reflect the

00:36:17.480 --> 00:36:19.590
dependency or else it won't work.

00:36:19.920 --> 00:36:23.140
And then eventually you compile
and you auto deploy and because

00:36:23.340 --> 00:36:27.380
it usually has a web module,
fire up your favorite browser,

00:36:27.380 --> 00:36:31.950
which is Safari now, and test drive it.

00:36:32.410 --> 00:36:33.760
Let's go on to a demo.

00:36:33.860 --> 00:36:35.610
Demo 2 machine.

00:36:35.860 --> 00:36:40.240
So, Stefan is going to do
the screen manipulation.

00:36:40.240 --> 00:36:42.500
I'm just going to do the narration.

00:36:43.000 --> 00:36:50.290
So before this project here,
I went through the steps of jump-starting

00:36:50.300 --> 00:36:51.760
it by following a how-to file.

00:36:51.760 --> 00:36:56.000
I added a how-to file to this project,
which is known as XPetStore,

00:36:56.260 --> 00:36:59.310
which is a rehash of Sun's
iconic PetStore project.

00:36:59.400 --> 00:37:03.270
So JBoss now should be
started in the background,

00:37:03.270 --> 00:37:04.660
in terminal.

00:37:04.660 --> 00:37:08.720
And this is the project that you
find actually in your developer CD.

00:37:09.550 --> 00:37:13.830
Stefan has selected the four build
scripts that I've mentioned all the time.

00:37:13.840 --> 00:37:16.620
And now I'm just gonna
take a look at the sources,

00:37:16.750 --> 00:37:19.400
the organization in the source folder.

00:37:20.230 --> 00:37:23.340
So you can see EJV module
and your Web module.

00:37:23.340 --> 00:37:26.300
Let's drill down to EJV module because
it's slightly more interesting.

00:37:26.310 --> 00:37:29.300
You'll see an xDoclet merge there.

00:37:29.320 --> 00:37:32.560
There's a concept in
xDoclet for merging points.

00:37:32.560 --> 00:37:37.750
What you have here essentially is
a list of deployment descriptor

00:37:37.750 --> 00:37:42.220
XML elements that can be merged
into the eventual XML file.

00:37:42.220 --> 00:37:46.180
More details on the xDoclet website.

00:37:46.180 --> 00:37:46.590
The

00:37:48.520 --> 00:37:54.220
ExpatStore source directory here is
organized in the same hierarchy as your

00:37:54.510 --> 00:37:55.800
Java package hierarchy.

00:37:55.830 --> 00:37:59.760
Let's drill down all the way to domain,
catalog, EJP.

00:37:59.760 --> 00:38:03.870
I just want you to take a look at
this file called category Java.

00:38:04.420 --> 00:38:05.630
Thanks to Mr.

00:38:05.630 --> 00:38:06.820
Wei Shipanu.

00:38:07.030 --> 00:38:09.580
This is the expat store that he built.

00:38:09.590 --> 00:38:13.300
So you can see a lot
of xDoclet text there.

00:38:13.430 --> 00:38:15.000
The name, the type, CMP.

00:38:15.520 --> 00:38:19.710
Stefan will talk about
more as well in his demo.

00:38:19.710 --> 00:38:22.040
And I just want you to remember
this file and see what are the

00:38:22.090 --> 00:38:24.250
files that are generated later on.

00:38:24.300 --> 00:38:25.300
Okay?

00:38:25.300 --> 00:38:26.300
Let's close this.

00:38:26.300 --> 00:38:31.300
Let's look at the organization
of the static resources as well.

00:38:32.530 --> 00:38:37.900
So again, it's organized in a way that
reflects where you should put stuff.

00:38:37.910 --> 00:38:40.400
Let's look at WebModule because
it's usually more interesting.

00:38:40.430 --> 00:38:42.890
Here you see a lot of JSPs.

00:38:44.520 --> 00:38:46.940
and the majors and what have you.

00:38:46.940 --> 00:38:49.650
There's usually in your webint,
you will find your tech libraries

00:38:49.740 --> 00:38:52.780
that you're dependent on as well.

00:38:52.790 --> 00:38:53.720
All right, let's close this.

00:38:53.730 --> 00:38:57.490
And I want you to take a look
at the X-Doclet generated

00:38:57.580 --> 00:38:59.820
deployment descriptors.

00:39:01.640 --> 00:39:05.600
Let's look at the one for EJB module.

00:39:05.630 --> 00:39:08.100
Now they are in red because we
have not built the tool yet.

00:39:08.140 --> 00:39:09.660
That's why they are in red.

00:39:09.690 --> 00:39:12.220
When we build it, they will become black
and you can look at them.

00:39:12.460 --> 00:39:13.470
So let's build it now.

00:39:13.480 --> 00:39:17.910
He will build up the browser window.

00:39:18.170 --> 00:39:20.550
Now the font is kind of small,
I apologize for that because Xcode

00:39:20.600 --> 00:39:25.100
being in beta or developer preview
doesn't allow us to change it.

00:39:25.230 --> 00:39:26.720
But I'll try to narrate off.

00:39:26.940 --> 00:39:28.590
So let's build it.

00:39:29.130 --> 00:39:35.560
and Stefan brought up the terminal
because he wanted to illustrate the,

00:39:36.000 --> 00:39:45.710
J2EE is the first machine to
deploy the J2EE application to

00:39:46.250 --> 00:39:51.900
the WebObjects application server.

00:39:52.020 --> 00:39:55.010
It is in this order because
usually your WebModule is

00:39:55.010 --> 00:39:56.700
dependent on your EJB module.

00:39:56.700 --> 00:40:00.100
Oops, I have to speak faster.

00:40:00.100 --> 00:40:04.420
So, J2EE picks it up and
now it's deploying it.

00:40:04.450 --> 00:40:04.890
Let's ignore this view now.

00:40:05.920 --> 00:40:06.890
Has it been deployed?

00:40:07.190 --> 00:40:07.490
Okay.

00:40:07.830 --> 00:40:10.620
And I want to take a look
at the generated files.

00:40:10.980 --> 00:40:14.490
So,
let's hide everything and bring up Xcode.

00:40:18.880 --> 00:40:19.800
Go to window.

00:40:19.800 --> 00:40:20.800
Okay.

00:40:20.800 --> 00:40:25.440
So, let's talk,
look at the files that are

00:40:25.440 --> 00:40:28.590
generated for EJB module.

00:40:30.060 --> 00:40:33.100
Right now you have a C extra
directory called xDocklet generated.

00:40:33.180 --> 00:40:35.300
Drill down to it.

00:40:35.300 --> 00:40:37.410
And remember the category EJB file?

00:40:37.760 --> 00:40:40.620
Now it has generated
two interfaces for you.

00:40:41.710 --> 00:40:44.700
Category Local, Category Local Home.

00:40:44.750 --> 00:40:48.440
If you don't use xDocklet,
you have to create, maintain,

00:40:48.510 --> 00:40:50.940
and resync this file.

00:40:51.190 --> 00:40:52.760
Let's close this.

00:40:52.760 --> 00:40:54.680
I won't go into details of that.

00:40:54.690 --> 00:40:56.730
And now I want to take a look
at the deployment descriptor

00:40:56.730 --> 00:41:00.490
that's generated by Xtalklib.

00:41:02.590 --> 00:41:07.450
So this is a perfectly normal,
well-formed, validable XML file,

00:41:07.560 --> 00:41:10.540
as opposed to you firing a baby
edit and leaving out the slash,

00:41:10.670 --> 00:41:11.680
for example.

00:41:11.700 --> 00:41:14.590
Let's search for category.

00:41:17.220 --> 00:41:20.140
So all this information
that you see here,

00:41:20.150 --> 00:41:24.600
they are derived from the original
Java file that I showed you earlier on.

00:41:24.620 --> 00:41:27.100
The name, the EJB class.

00:41:27.260 --> 00:41:28.860
In fact, EJB class,
you don't even have to put it

00:41:28.860 --> 00:41:30.680
in because it's a Java class.

00:41:30.780 --> 00:41:33.610
It draws introspection
and gets it from there.

00:41:34.260 --> 00:41:35.680
- Okay, I'm gonna close this.

00:41:35.710 --> 00:41:39.110
And I'm going to show you the
first page of the expat store

00:41:39.140 --> 00:41:41.500
because these are all fresh JSPs.

00:41:41.510 --> 00:41:44.800
I like WebObjects, you know,
when you first hit it,

00:41:44.800 --> 00:41:46.790
it takes time to compile,
so I'm not gonna run

00:41:46.790 --> 00:41:48.140
through all the demo.

00:41:48.190 --> 00:41:49.240
This works!

00:41:49.250 --> 00:41:50.640
Okay, it's working.

00:41:50.650 --> 00:41:52.430
And, um,

00:41:53.300 --> 00:41:56.520
For some of you who have
done J2EE development,

00:41:56.520 --> 00:42:01.800
this is the quintessential demo
that they have to demonstrate.

00:42:01.810 --> 00:42:05.250
Okay, that just about ends my
part of the presentation.

00:42:05.510 --> 00:42:07.380
Thank you for your kind attention.

00:42:07.470 --> 00:42:09.000
Stefan will continue the rest.

00:42:09.020 --> 00:42:10.540
Thank you.

00:42:14.350 --> 00:42:17.890
So we continue explaining the
WebObjects tools that can help

00:42:17.990 --> 00:42:22.440
you getting your J2EE applications
written and tested and deployed.

00:42:22.440 --> 00:42:28.200
So the next tool that we
have is not really geared

00:42:28.200 --> 00:42:32.790
for the WebObjects developer,
not really perceived as a J2EE tool.

00:42:32.800 --> 00:42:34.340
It's EOModeler.

00:42:34.340 --> 00:42:38.160
Well, EOModeler,
for the people who don't know WebObjects,

00:42:38.160 --> 00:42:40.240
is a database modeling tool.

00:42:40.240 --> 00:42:45.860
It helps you build a representation
which is semantically richer

00:42:45.920 --> 00:42:48.600
than the database contents.

00:42:48.600 --> 00:42:54.870
What you can do is you can reverse
engineer existing databases.

00:42:54.960 --> 00:42:59.750
You can forward engineer a database
and then finally have the tool

00:42:59.750 --> 00:43:02.500
create the schema in the database.

00:43:02.520 --> 00:43:09.080
But its main purpose is to map between
the world of database contents,

00:43:09.100 --> 00:43:10.220
which means tables and columns.

00:43:10.250 --> 00:43:15.630
To the world of Java,
meaning classes and fields.

00:43:16.020 --> 00:43:19.510
Finally, when you're in development mode,
you can also browse the database,

00:43:19.600 --> 00:43:22.670
connect to the database,
and look what's going on.

00:43:22.700 --> 00:43:27.860
So this tool builds the foundation for
our entity bean generation that we have,

00:43:27.860 --> 00:43:31.740
which we implement in another
tool called EO Bean Assistant.

00:43:31.740 --> 00:43:34.440
EO Bean Assistant is
not really a new tool.

00:43:34.440 --> 00:43:38.440
If you have WebObjects 5.2,
you have it installed already,

00:43:38.440 --> 00:43:46.090
but in 5.2, it only was geared towards
CMP 1.1 or EJB 1.1 development.

00:43:46.100 --> 00:43:51.140
Now that we ship with a
J2EE 1.3 compatible container,

00:43:51.190 --> 00:43:55.700
which means EJB 2.0 as a
technology is included,

00:43:55.700 --> 00:43:58.250
we can do far more than we used to do.

00:43:58.260 --> 00:44:02.080
And also, thanks to our end templates,
we can make it very easy for

00:44:02.330 --> 00:44:04.250
you to have maintainability.

00:44:04.440 --> 00:44:08.250
code generated by this
tool automatically.

00:44:08.920 --> 00:44:11.680
So as I said,
we have very good integration with AND.

00:44:12.020 --> 00:44:16.730
Basically the tool will just write
out based on an EL model and some

00:44:16.730 --> 00:44:20.640
more information that you can
enter in a graphical environment.

00:44:20.640 --> 00:44:24.260
It will create the
source files on the fly,

00:44:24.260 --> 00:44:29.760
write them into the AND template
directory that you selected.

00:44:30.630 --> 00:44:37.430
It has X-Docklet integration,
which means we don't create

00:44:37.430 --> 00:44:39.160
EJB XML files anymore.

00:44:39.240 --> 00:44:42.860
All of them are X-Docklet
generated so that it is very easy

00:44:42.860 --> 00:44:44.560
for you to maintain your code.

00:44:44.900 --> 00:44:49.990
And if you do changes,
if you just keep up synchronizing

00:44:50.180 --> 00:44:55.070
changes in the X code section,
it is really easy.

00:44:55.820 --> 00:45:02.090
We create support for
deployment descriptors,

00:45:02.090 --> 00:45:03.850
which are the regular deployment
descriptors mandated by Sun,

00:45:04.030 --> 00:45:06.660
but also for the J-Boss
deployment descriptors.

00:45:06.810 --> 00:45:15.600
The output is an EJB jar or an enterprise
module that is portable to any container.

00:45:15.600 --> 00:45:20.590
Specifically, it can be deployed out
of the box onto J-Boss.

00:45:21.050 --> 00:45:36.230
We have also a command line tool,
a command line back end system

00:45:36.230 --> 00:45:36.230
for this tool that you can
use in an automated build.

00:45:36.230 --> 00:45:36.230
And we're going to show you
this tool in an upcoming demo.

00:45:36.320 --> 00:45:43.380
What we suggest for J2EE development
on our platform is that you use

00:45:43.450 --> 00:45:47.780
EO-Modeler to model the database,
to model your persistence layer.

00:45:47.780 --> 00:45:52.280
EO-Modeler, as I said,
is a very good tool that also has a

00:45:52.460 --> 00:45:58.380
lot of performance or can give both
the EOF stack as our entity generation

00:45:58.380 --> 00:46:01.160
tool a lot of hints on performance.

00:46:01.160 --> 00:46:05.220
For example,
read-only caching attributes and so on.

00:46:06.900 --> 00:46:12.610
. Once you have the model generated,
you should go ahead and use

00:46:12.610 --> 00:46:14.480
the EO Bean Assistant to
create the entity beans.

00:46:14.560 --> 00:46:19.050
Drop them right there
into our project support,

00:46:19.180 --> 00:46:19.980
build them with Xcode.

00:46:20.100 --> 00:46:26.290
You can enrich the generated entity
beans with session bean facades,

00:46:26.710 --> 00:46:29.580
for example,
with message driven beans and so on.

00:46:29.580 --> 00:46:29.580
Our template support will help you.

00:46:30.310 --> 00:46:33.430
Finally,
what's missing in most cases is a web

00:46:33.460 --> 00:46:39.440
tier and you can either use WebObjects
to access the entity bean layer or

00:46:39.440 --> 00:46:42.690
you can use JSPs and so of that.

00:46:42.760 --> 00:46:45.780
And then finally, of course,
JBoss is the container

00:46:45.780 --> 00:46:46.900
to deploy on later.

00:46:47.260 --> 00:46:51.430
But as I said, everything is generated
totally compatible with

00:46:51.430 --> 00:46:53.740
every other J2E container.

00:46:53.740 --> 00:46:56.260
So you can just port your
applications to almost any container.

00:46:56.260 --> 00:46:58.800
Okay, now we come to the demo.

00:46:58.800 --> 00:47:03.350
What we're going to show is basically
the recipe that I showed in the

00:47:03.360 --> 00:47:06.220
previous slide applied to a project.

00:47:06.260 --> 00:47:10.180
In our case,
I have already created a Neo model,

00:47:10.180 --> 00:47:14.350
and you can see that
we have three entities.

00:47:15.640 --> 00:47:20.080
We have the entity complex types,
which is our main demo element,

00:47:20.100 --> 00:47:29.790
which has a very complicated mapping of
the database section into the Java world.

00:47:29.800 --> 00:47:30.740
So we map.

00:47:30.810 --> 00:47:34.080
You can see we have many parameters here,
many attributes.

00:47:34.100 --> 00:47:40.090
And we map to basically all of
the primitive Java types that you

00:47:40.090 --> 00:47:42.220
can see in the uppermost section.

00:47:42.220 --> 00:47:44.530
In the lower section,
you can see the relationships that our

00:47:44.820 --> 00:47:48.080
entity has with the two other entities.

00:47:48.080 --> 00:47:52.340
So we have a to-one relationship
with the one entity,

00:47:52.340 --> 00:47:56.890
and we have a to-many
relationship with the many entity.

00:47:58.810 --> 00:48:05.020
This will show you how not only the
CMP attributes are mapped very easily,

00:48:05.020 --> 00:48:09.250
but also the CMR attributes,
even for a more complex case,

00:48:09.270 --> 00:48:13.090
are mapped and generated
automatically with CMP2O.

00:48:13.750 --> 00:48:18.880
Let's move on and launch
the BeanBuilder UI.

00:48:20.430 --> 00:48:25.340
And we load the model and go on.

00:48:25.520 --> 00:48:30.320
We can select mapping only
partial subset of the attributes

00:48:30.550 --> 00:48:34.320
or of the entities in your model.

00:48:34.320 --> 00:48:37.810
And we go on and I'm just
going to show you one screen.

00:48:38.060 --> 00:48:40.420
We have prepared a mapping already.

00:48:40.420 --> 00:48:44.110
The mappings are stored in XML files
and can be easily manipulated.

00:48:45.030 --> 00:49:11.390
We can also use the CMP to
map the relationship mapping.

00:49:11.390 --> 00:49:11.400
So what you can see here is
you can edit the package name,

00:49:11.400 --> 00:49:11.400
you can edit the class names of all
of the files that will be generated.

00:49:11.400 --> 00:49:11.400
You can either generate
CMP beans or BMP beans.

00:49:11.400 --> 00:49:11.400
And you have a variety of
options to generate the two

00:49:11.400 --> 00:49:11.400
different types of beans.

00:49:11.400 --> 00:49:11.400
Again,
we recommend using CMP2O now because

00:49:11.400 --> 00:49:11.400
with the relationship mapping,
it is so easy.

00:49:12.160 --> 00:49:13.100
Good.

00:49:13.100 --> 00:49:14.990
Let's quit here.

00:49:14.990 --> 00:49:18.490
And we're just going to show
you the command line version.

00:49:24.260 --> 00:49:29.320
It will run through the
EO model and create the three

00:49:29.320 --> 00:49:31.990
files that we are looking for.

00:49:31.990 --> 00:49:35.420
But first of all, obviously we have to
create a new project.

00:49:35.530 --> 00:49:41.470
We create an EJB module to show you how
the two technologies are integrated.

00:49:44.200 --> 00:49:51.480
Now that we have a new module,
unfortunately we have to get Xcode

00:49:51.480 --> 00:49:54.560
up and running with the new font.

00:49:56.560 --> 00:49:59.430
And then we can switch to
the terminal and show you the

00:49:59.780 --> 00:50:02.880
command line version of our tool.

00:50:04.070 --> 00:50:08.310
So the only thing that we're
going to do is we launch the tool,

00:50:08.600 --> 00:50:11.920
give it our EJB specification
as an XML file.

00:50:11.920 --> 00:50:15.770
You see the file EOB.xml.

00:50:16.000 --> 00:50:20.870
and we're just going to discard a
bunch of not really useful messages.

00:50:23.360 --> 00:50:28.410
As you can see,
the tool is implemented as

00:50:28.420 --> 00:50:29.830
a WebObjects application.

00:50:29.870 --> 00:50:35.070
So we leverage the component
layer to make sure that

00:50:36.400 --> 00:50:49.500
[Transcript missing]

00:50:50.250 --> 00:50:54.960
, and we have a mapping of one
entity in the database to one

00:50:54.960 --> 00:50:57.520
file on disk to one entity.

00:50:58.440 --> 00:51:03.730
Okay, let's have a look how this looks
like in the n-template with Xcode.

00:51:06.200 --> 00:51:12.740
We have put all of the beans into the
demo package and our main important

00:51:12.740 --> 00:51:15.770
bean is the complex types bean.

00:51:15.880 --> 00:51:20.410
So again,
xStocklit makes it very easy for

00:51:20.410 --> 00:51:26.580
you to write maintainable code
and to avoid having to specify

00:51:26.580 --> 00:51:29.330
duplicate information in two places.

00:51:29.410 --> 00:51:32.880
In this case,
we would have to get information

00:51:33.030 --> 00:51:37.510
of the class names of the local
and remote interfaces and so

00:51:37.790 --> 00:51:42.460
on in the actual Java files,
but also in the deployment descriptors.

00:51:42.530 --> 00:51:45.750
And also in the JBoss-specific
container descriptors,

00:51:45.940 --> 00:51:47.580
which is very annoying.

00:51:47.690 --> 00:51:51.320
So you can see the
EGB tags for xStocklit.

00:51:51.790 --> 00:51:55.380
Those are the tags that will,
or this is the information that

00:51:55.380 --> 00:51:57.210
will end up in the EGB jar XML.

00:51:57.420 --> 00:51:59.340
And when we scroll down a little,

00:52:00.600 --> 00:52:03.730
You can see that we also have JBoss
specific attributes that will end

00:52:03.730 --> 00:52:06.380
up in the JBoss specific files.

00:52:06.600 --> 00:52:11.790
, and I'm going to show you how
to deploy the application server.

00:52:12.190 --> 00:52:15.760
Even if you don't want to deploy
on the application server,

00:52:15.910 --> 00:52:17.960
you can still leverage
all of the attributes.

00:52:17.960 --> 00:52:21.920
You can just insert the attributes
that you need for WebLogic or whatever

00:52:22.810 --> 00:52:31.050
Ong, and the X-Docked engine is not ready
yet for the advanced set up but

00:52:31.140 --> 00:52:34.100
it will get there before we ship.

00:52:34.220 --> 00:52:45.090
Let's go down a little and have a look
at the attribute to -- or database

00:52:45.480 --> 00:52:49.120
As you can see here,
we automatically include every single

00:52:50.000 --> 00:52:55.310
attribute you found in the entity as a
getter and setter method in the bean.

00:52:55.320 --> 00:53:00.530
This is a spec requirement you can
get around except for the case that

00:53:00.530 --> 00:53:03.380
you have a read-only attribute.

00:53:03.510 --> 00:53:08.400
So we generate all of the necessary
information to generate the deployment

00:53:08.460 --> 00:53:13.400
descriptors and also the performance
synth for the JBoss container.

00:53:13.400 --> 00:53:17.400
Then let's go down a little since
CMP attributes are really boring.

00:53:17.400 --> 00:53:20.320
We go down and have a
look at the CMR fields.

00:53:20.320 --> 00:53:27.310
The CMR fields are the way how
relationships are mapped in CMP2L.

00:53:27.800 --> 00:53:35.010
Instead of having an integer,
for example, or a long foreign key that

00:53:35.060 --> 00:53:38.460
points to the real entity,
they are mapped again

00:53:38.460 --> 00:53:40.100
as local interfaces.

00:53:40.220 --> 00:53:43.790
And you can see that the
relationship setup is a little bit

00:53:43.790 --> 00:53:51.290
more advanced and has quite some
more code necessary for CMR fields,

00:53:51.290 --> 00:53:53.420
both in terms of reading and writing.

00:53:53.580 --> 00:54:01.870
So this code that we generate
automatically is really a big help.

00:54:02.710 --> 00:54:05.780
Okay, so what we do now,
I think we are through with it.

00:54:05.940 --> 00:54:07.860
Let's just compile it.

00:54:07.910 --> 00:54:12.680
Let's bring the terminal window
up and see what JBoss does.

00:54:13.060 --> 00:54:16.850
J2EE, and then we compile it and you
see it is ready for deployment.

00:54:16.940 --> 00:54:19.380
You don't have to
change anything anymore.

00:54:19.740 --> 00:54:22.960
Especially you don't have to use
the deployment tool to manually

00:54:22.960 --> 00:54:25.490
go over and figure everything out.

00:54:25.580 --> 00:54:29.240
And this is because the EO model,
which is the back end store,

00:54:29.240 --> 00:54:35.780
has enough information for us to
generate all of the required information.

00:54:36.380 --> 00:54:39.420
And again, it picks it up automatically.

00:54:39.420 --> 00:54:42.050
It generates the tables as necessary.

00:54:42.110 --> 00:54:45.950
You can also tune it to have
it generate indices and so on.

00:54:46.080 --> 00:54:49.990
Okay, let's move on.

00:54:51.210 --> 00:54:56.210
The demo is ended.

00:54:56.210 --> 00:54:56.210
We go to the next slide.

00:55:02.310 --> 00:55:08.690
And we go on to the section that
most of the WebObjects folks

00:55:08.690 --> 00:55:08.690
are probably most anxious to

00:55:08.780 --> 00:55:27.860
Our integration story is this.

00:55:28.940 --> 00:55:28.980
Our server adapter,
which is not really new,

00:55:28.980 --> 00:55:28.980
we have been shipping
it since WebObjects 5.1,

00:55:28.980 --> 00:55:28.980
is the central point of the
J2EE integration strategy.

00:55:29.140 --> 00:55:32.780
the solid adapter is basically a
framework that you pull in into any

00:55:32.780 --> 00:55:37.760
web objects application and It enables
service support it has custom build

00:55:37.780 --> 00:55:44.840
scripts that create all of the hierarchy
which is necessary for a almost dot

00:55:44.890 --> 00:55:50.300
war deployment and It pulls everything
it basically put everything together

00:55:50.300 --> 00:55:54.920
for a j2e container to deploy it
Now the one thing that was missing in

00:55:54.920 --> 00:56:01.440
the previous releases was the ability
to have a pure jar representation of the

00:56:01.440 --> 00:56:05.940
web objects application and That we have
added in the form of job on those a job

00:56:05.940 --> 00:56:11.030
on it is more or less a framework inside
a jar many many people have been asking

00:56:11.040 --> 00:56:16.080
that for a long time and Now we have it
and this enables us to vend web objects

00:56:16.450 --> 00:56:22.580
application as the traditional dot
war file or as a enterprise application

00:56:23.370 --> 00:56:29.450
We have enhanced the NSLog interface
with an NSLogger implementation that is

00:56:29.630 --> 00:56:37.060
capable of using an existing NSLogger
or NSLog4j logger as the backend.

00:56:37.060 --> 00:56:43.440
This is especially important for
the JBoss container which uses Log4j

00:56:43.440 --> 00:56:46.020
as its native logging mechanism.

00:56:46.530 --> 00:56:59.610
Log4j is integrated with the
container and you can use the

00:56:59.610 --> 00:57:01.490
administration tool to look it up.

00:57:01.540 --> 00:57:08.630
The other important gap that we
bridge now with the upcoming 5.2.2

00:57:08.740 --> 00:57:13.860
release is our configuration story
for properties and for EO models.

00:57:13.940 --> 00:57:15.940
The problem is that we have a lot
of data that is not yet available.

00:57:15.940 --> 00:57:15.970
We have a lot of data
that is not yet available.

00:57:15.980 --> 00:57:15.990
We have a lot of data
that is not yet available.

00:57:16.000 --> 00:57:19.000
In the past,
we used to have the properties

00:57:19.000 --> 00:57:22.500
based on the system properties,
which is especially bad if you have

00:57:22.630 --> 00:57:27.100
multiple applications launching at the
same time with conflicting settings.

00:57:27.100 --> 00:57:31.120
This has been remedied with our
JNDI property configuration.

00:57:31.120 --> 00:57:35.780
Similarly,
we used to have a problem where if

00:57:35.780 --> 00:57:42.640
you have an EO model and you have
a database configuration set up,

00:57:42.640 --> 00:57:45.960
especially for the .var deployment,
this is extremely annoying.

00:57:45.960 --> 00:57:46.020
This has been remedied with our
JNDI property configuration.

00:57:46.020 --> 00:57:46.020
Similarly,
we used to have a problem where if

00:57:46.020 --> 00:57:46.020
you have an EO model and you have
a database configuration set up,

00:57:46.020 --> 00:57:46.120
especially for the .var deployment,
this is extremely annoying.

00:57:46.120 --> 00:57:50.230
Because you would have to unpack
the jar and then launch an editor

00:57:50.230 --> 00:57:53.940
and type in the real database
for the deployment scenario.

00:57:54.300 --> 00:57:55.320
And that's extremely annoying.

00:57:55.570 --> 00:57:58.780
So this is a thing of the past as well.

00:58:00.200 --> 00:58:05.860
I also want to highlight the
additional features that you get by

00:58:05.860 --> 00:58:09.800
deploying a traditional WebObjects
application on a J2EE container.

00:58:09.800 --> 00:58:14.840
And for one thing,
the background is you can

00:58:14.840 --> 00:58:19.420
use all of the capabilities,
all of the features of the

00:58:19.420 --> 00:58:23.250
traditional server specification,
which means you can use filters.

00:58:23.250 --> 00:58:25.970
Filters are traditionally
used for authentication or

00:58:25.970 --> 00:58:27.560
compression or whatever else.

00:58:28.260 --> 00:58:32.720
You can use EJBs that you maybe
get from third-party vendors

00:58:32.720 --> 00:58:35.070
that you develop in-house.

00:58:35.120 --> 00:58:36.490
You can use JDBC.

00:58:36.630 --> 00:58:40.720
You can use JSTA for
enterprise information system.

00:58:40.720 --> 00:58:45.060
You can use JMS, for example,
for asynchronous messaging or to

00:58:45.060 --> 00:58:47.490
access message queues and so on.

00:58:47.500 --> 00:58:52.340
And also, the transaction manager is
always available in a servlet,

00:58:52.370 --> 00:58:57.140
which means you can have multiple
resources in the same transaction.

00:58:57.220 --> 00:59:03.580
And either roll back all of the changes
automatically or commit them all at once.

00:59:04.160 --> 00:59:09.080
The other set of options
that are very appealing,

00:59:09.080 --> 00:59:13.570
I think, is integration of security,
which means you just write

00:59:13.630 --> 00:59:18.500
your application without
a login scheme required,

00:59:18.540 --> 00:59:22.910
and you can make use of
the container security.

00:59:23.660 --> 00:59:28.880
And again, we have included modules so
that you can access and verify

00:59:28.880 --> 00:59:32.870
user password combinations
with our Open Directory server.

00:59:33.530 --> 00:59:41.560
. It is very easy to have one,
if you have only one middleware,

00:59:41.660 --> 00:59:44.540
one infrastructure,
you have one place where logging occurs.

00:59:44.540 --> 00:59:51.480
You have only one place or one container,
one process to watch.

00:59:51.480 --> 00:59:57.270
So it is basically a -- it
makes maintenance and running

00:59:57.270 --> 00:59:59.980
a J2EE store way easier.

00:59:59.980 --> 01:00:01.110
So those are the additional

01:00:01.540 --> 01:00:07.510
, and the latest developments in
WebObjects application on J2EE.

01:00:07.510 --> 01:00:07.510
These are some of the advantages
you get out of the box when

01:00:07.510 --> 01:00:07.510
you deploy your WebObjects
application on a traditional J2EE

01:00:10.060 --> 01:00:17.160
So this is an example of using a
J2EE resource in WebObjects application.

01:00:17.170 --> 01:00:21.080
I'm not going to talk about this
in much more detail because this

01:00:21.080 --> 01:00:23.300
is traditional J2EE programming.

01:00:23.300 --> 01:00:25.980
It's nothing special for WebObjects.

01:00:26.040 --> 01:00:27.940
You can use it out of the box.

01:00:28.030 --> 01:00:32.570
There is no call overhead,
so there is no extra network access

01:00:32.570 --> 01:00:35.370
because everything is in process.

01:00:36.590 --> 01:00:44.950
So the way to get access to an EGB or you
can get access to the transaction manager

01:00:45.420 --> 01:00:50.510
or getting access to JCA or whatever
is you create a new initial context.

01:00:50.560 --> 01:00:55.320
You look up a certain string where
you know the resource is located.

01:00:55.320 --> 01:00:59.530
You narrow it down to the right
type and then you're done.

01:00:59.560 --> 01:01:01.710
You can use it.

01:01:04.340 --> 01:01:06.840
Let's have a look at the
JNDI property configuration

01:01:06.840 --> 01:01:08.760
that I talked about previously.

01:01:09.330 --> 01:01:22.790
So the servlet adapter creates a template
for a Web.XML descriptor for the servlet.

01:01:22.790 --> 01:01:22.790
And there,

01:01:23.130 --> 01:01:30.080
We use the environment entry XML sections
to specify our property definitions.

01:01:30.200 --> 01:01:33.660
So all of the documented
properties that exist in the

01:01:33.680 --> 01:01:36.240
WebObjects application container

01:01:36.270 --> 01:01:40.580
are documented there and have
their standard value there,

01:01:40.580 --> 01:01:43.660
which means that it's very easy,
for example, using our deployment tool or

01:01:43.660 --> 01:01:47.460
using the deployment tool of,
let's say, WebLogic to change the

01:01:47.460 --> 01:01:48.730
configuration right there.

01:01:48.740 --> 01:01:52.670
And again,
since JNDI is capable of having

01:01:52.720 --> 01:01:57.890
a thread-local definition
of the whole environment,

01:01:57.890 --> 01:02:01.020
there is no problem if you
have multiple applications,

01:02:01.020 --> 01:02:05.580
multiple WebObjects applications starting
up and using different properties.

01:02:06.200 --> 01:02:09.710
The deployment is easy because you
can see in the description elements,

01:02:09.710 --> 01:02:12.740
you have a description of
what this property does,

01:02:12.740 --> 01:02:17.640
you have the name, you have the value,
and with the type information,

01:02:17.640 --> 01:02:21.520
deployers can easily figure out
what the correct values are and

01:02:21.520 --> 01:02:23.550
what the possible values are.

01:02:23.890 --> 01:02:30.480
Very similarly for mapping data sources
and for making sure that your EO model

01:02:30.900 --> 01:02:35.800
or that EOF can find data sources
that you configured in your EO model,

01:02:35.800 --> 01:02:36.900
we have a similar setup.

01:02:38.680 --> 01:02:42.920
So in addition to the environment
entry that we have to define

01:02:42.920 --> 01:02:46.860
to do the actual mapping,
we have a mapping of

01:02:46.870 --> 01:02:48.000
a resource reference.

01:02:48.000 --> 01:02:54.200
This is an indication to the
container that we are referencing a

01:02:54.210 --> 01:02:58.200
database in our server environment.

01:02:58.200 --> 01:03:02.170
And we are declaring this
reference and we are saying,

01:03:02.170 --> 01:03:07.340
okay, we will be using this under the
name JDBC default data source.

01:03:08.300 --> 01:03:11.060
In the second layer,
we have an environment entry

01:03:11.060 --> 01:03:14.430
which the EUF stack will use
to actually do the mapping.

01:03:14.440 --> 01:03:17.780
You can see we have an
element called movieDB.

01:03:17.820 --> 01:03:23.020
And this movieDB will be, we assume,
in the connection

01:03:23.050 --> 01:03:25.900
URL section of the EU model.

01:03:25.900 --> 01:03:33.120
And this key makes sure that we can map
the moviesDB to the environment entry.

01:03:33.120 --> 01:03:38.000
You can see JDBC default data source,
the lowest entry.

01:03:38.000 --> 01:03:42.410
And we can map the movieDB to the
environment entry down there and map it

01:03:42.430 --> 01:03:44.990
to the definition in the uppermost entry.

01:03:45.130 --> 01:03:49.510
So we have basically a two-step mapping
mechanism for accessing data sources.

01:03:49.520 --> 01:03:53.880
And this is the final step basically
in making sure that WebObjects

01:03:53.880 --> 01:04:00.390
application can be fully configured
using a J2EE deployment tool.

01:04:02.130 --> 01:04:03.580
Okay, and that was it.

01:04:03.580 --> 01:04:05.590
So what was important?

01:04:05.590 --> 01:04:09.080
For one thing,
I think one of the very important part

01:04:09.080 --> 01:04:14.350
is that J2EE can very much benefit
existing WebObjects application.

01:04:14.420 --> 01:04:19.050
And that J2EE really is
not your enemy anymore.

01:04:19.050 --> 01:04:20.140
It's your friend.

01:04:20.150 --> 01:04:23.040
Because it cannot deploy on, for example,
.NET systems.

01:04:23.040 --> 01:04:25.260
But you can deploy on J2EE systems.

01:04:25.820 --> 01:04:29.350
And also,
I think WebObjects can benefit J2EE.

01:04:29.670 --> 01:04:33.510
You have seen that our tool set
can greatly help you develop

01:04:33.510 --> 01:04:37.960
your J2EE applications on
WebObjects on Mac OS X server.

01:04:37.960 --> 01:04:41.430
And then finally,
I think with all the integration work of

01:04:41.430 --> 01:04:45.810
the many pieces that I introduced today,
we have a very good story and that

01:04:45.810 --> 01:04:51.060
I think Mac OS X server is the best place
to develop and deploy JBoss applications.

01:04:51.060 --> 01:04:52.960
Thank you very much.

01:04:52.960 --> 01:04:54.520
That was the presentation.

01:04:59.700 --> 01:05:04.140
I'm just going to go over the
roadmaps and the end titles.

01:05:04.140 --> 01:05:10.170
Very important is session 612,
enterprise application deployment,

01:05:10.170 --> 01:05:13.260
where we go over all of the tools
in much more detail and explain

01:05:13.260 --> 01:05:17.300
many more things that we just
haven't had the time for today.

01:05:18.260 --> 01:05:21.240
WebObjects reusable
components for the Web tier,

01:05:21.240 --> 01:05:22.310
very important.

01:05:22.490 --> 01:05:24.560
WebObjects UF advanced topics.

01:05:24.560 --> 01:05:28.750
WebObjects creating web services,
very important if you need to

01:05:28.750 --> 01:05:32.220
interoperate with .NET systems,
for example.

01:05:33.990 --> 01:05:36.090
And then who to contact,
Andreas Wencke of course,

01:05:36.270 --> 01:05:39.170
Bob Fraser and Catherine Wenck
are our main address,

01:05:39.170 --> 01:05:42.660
our main contact persons
for the WebObjects product.

01:05:42.660 --> 01:05:46.530
And we finally have
Apple Care Enterprise Services if you

01:05:46.680 --> 01:05:49.620
need more help getting applications out.

01:05:53.110 --> 01:05:55.430
And these are for the DVD library.

01:05:55.520 --> 01:05:56.660
Don't type them up.

01:05:56.660 --> 01:06:02.050
They are all in the URL section that we
will publish on the website and the DVD.

01:06:04.270 --> 01:06:07.330
Important, I think, is the JBoss website.

01:06:07.610 --> 01:06:10.360
There's actually two addresses
for the JBoss website.

01:06:10.550 --> 01:06:15.600
One is JBoss.org,
which is the commercial arm, basically,

01:06:15.600 --> 01:06:16.770
of the JBoss project.

01:06:16.780 --> 01:06:19.560
And the other one is more
geared towards developers.

01:06:19.560 --> 01:06:21.280
It's on the SourceForge site.

01:06:21.280 --> 01:06:24.790
Tomcat and X-Docklet
have their own websites.

01:06:24.820 --> 01:06:29.270
X-Docklet website is really
very important because there are

01:06:29.270 --> 01:06:33.090
so many X-Docklet tags and you
just can't remember all of them.