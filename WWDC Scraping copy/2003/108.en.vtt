WEBVTT

00:00:26.220 --> 00:00:28.380
But today, we're talking about Kerberoes.

00:00:28.440 --> 00:00:30.980
So we'll do a very quick
overview of what Kerberoes is,

00:00:31.370 --> 00:00:34.270
how it works,
the internal infrastructure,

00:00:34.310 --> 00:00:36.920
the new features we're adding
to Kerberoes and Panther,

00:00:36.930 --> 00:00:39.620
and how you can add Kerberoes
to your application.

00:00:39.840 --> 00:00:42.080
We will do a question and
answer period at the end,

00:00:42.080 --> 00:00:45.340
and we'll want to know whether or
not you're a user or developer.

00:00:45.490 --> 00:00:46.670
So what is Kerberoes?

00:00:46.820 --> 00:00:50.320
It's a secure network
authentication system.

00:00:50.330 --> 00:00:53.670
One of the things that is worthwhile to
understand is that there is a difference

00:00:53.720 --> 00:00:56.080
between authentication and authorization.

00:00:56.080 --> 00:00:58.200
We have an authorization
lab down on the first floor.

00:00:58.200 --> 00:01:01.360
I encourage you that if you're
interested in doing authorization

00:01:01.360 --> 00:01:04.680
or rights management on Mac OS X,
that you go check out the lab

00:01:04.680 --> 00:01:05.990
and talk to the folks there.

00:01:06.020 --> 00:01:08.760
We've got a really good
auth system on the Mac.

00:01:09.020 --> 00:01:13.490
Kerberoes proves who you are,
and it uses a trusted third-party

00:01:13.490 --> 00:01:15.280
security model to do this.

00:01:15.500 --> 00:01:16.380
Who uses Kerbero?

00:01:16.480 --> 00:01:19.380
Well, certainly the government does,
and education.

00:01:19.620 --> 00:01:22.830
Large corporations are
starting to use it,

00:01:22.970 --> 00:01:25.560
and we built a lot of it into Mac OS X.

00:01:25.560 --> 00:01:27.520
It's in Windows, of course,
but I don't really care

00:01:27.520 --> 00:01:28.390
too much about that.

00:01:31.400 --> 00:01:35.640
The reason that they use it is because
it factors the security problem.

00:01:35.700 --> 00:01:41.240
It is consistent with the
central authentication goals.

00:01:41.260 --> 00:01:43.050
It provides single sign-on.

00:01:43.150 --> 00:01:45.180
It's ubiquitous.

00:01:45.430 --> 00:01:49.580
crossed a variety of platforms,
including Xbox.

00:01:49.580 --> 00:01:51.690
When they talk about having
different realms on Xbox,

00:01:51.760 --> 00:01:55.300
we're not talking about EverQuest.

00:01:55.300 --> 00:01:56.360
And it's time tested.

00:01:56.360 --> 00:01:58.720
The source code is freely available.

00:01:58.870 --> 00:02:01.550
So to talk about Kerberoes
for the Macintosh,

00:02:01.550 --> 00:02:02.740
Marshall Vale.

00:02:08.330 --> 00:02:10.320
Thank you, Craig.

00:02:10.390 --> 00:02:11.060
Good morning, all.

00:02:11.060 --> 00:02:12.250
My name is Marshall Vale.

00:02:12.330 --> 00:02:15.520
I am the project manager of
Kerbero development at MIT.

00:02:15.600 --> 00:02:18.300
I have a lot to talk about,
so let's get started.

00:02:18.300 --> 00:02:23.300
First, Kerbero was developed as part of
Project Athena in the early 1980s.

00:02:23.300 --> 00:02:27.690
Athena was a project started by MIT, DEC,
and IBM to create a ubiquitous

00:02:27.710 --> 00:02:30.300
computing infrastructure
for an academic environment.

00:02:30.300 --> 00:02:32.210
Of course,
when you turn in a paper as a student,

00:02:32.240 --> 00:02:34.530
you want to prove who you are,
and thus Kerbero was developed

00:02:34.660 --> 00:02:36.300
to solve network authentication.

00:02:36.300 --> 00:02:40.300
Kerbero V became an
IETF-proposed standard in 1993,

00:02:40.300 --> 00:02:44.270
and it has become very popular
in a wide variety of markets,

00:02:44.340 --> 00:02:46.300
including the corporate market.

00:02:46.410 --> 00:02:48.660
In the last few years,
thanks to Microsoft's use of

00:02:48.660 --> 00:02:52.300
it as the native authentication
method in Windows 2000 and later,

00:02:52.300 --> 00:02:56.300
and as has been announced this week,
Apple has been using Kerbero as

00:02:56.300 --> 00:03:01.030
the single sign-on solution for
Panther and Mac OS X going forward.

00:03:01.920 --> 00:03:05.090
There are two forms of Kerberoes
protocols in common use.

00:03:05.210 --> 00:03:07.180
The first is Kerberoes version 4.

00:03:07.260 --> 00:03:08.900
It was actually the original version.

00:03:08.900 --> 00:03:12.130
It's no longer being developed,
but still in use at many other sites.

00:03:12.260 --> 00:03:14.540
You may want to know what
happened to the other versions,

00:03:14.610 --> 00:03:17.210
but they never really
quite got out of the lab.

00:03:17.280 --> 00:03:19.860
The current version is Kerberoos v5.

00:03:19.870 --> 00:03:23.060
It was designed to solve many
of the security deficiencies and

00:03:23.070 --> 00:03:25.450
other problems in Kerberoos 4.

00:03:26.660 --> 00:03:30.260
Now let's take a look at some of the
Kerbero terms so we have an understanding

00:03:30.260 --> 00:03:31.440
of what we're talking about.

00:03:31.560 --> 00:03:32.590
First is a realm.

00:03:32.760 --> 00:03:36.600
The realm is an administrative
unit protected by a KDC,

00:03:36.630 --> 00:03:38.750
or key distribution center.

00:03:39.350 --> 00:03:43.600
A ticket is the base
authentication token in Kerbero.

00:03:43.820 --> 00:03:46.650
Different types of tickets
exist for different purposes.

00:03:46.770 --> 00:03:49.290
They have a finite
lifetime as they expire.

00:03:49.410 --> 00:03:52.430
They're also known as credentials,
and I may use tickets and

00:03:52.560 --> 00:03:54.400
credentials interchangeably.

00:03:56.480 --> 00:03:58.240
So let's take a look at
specific types of tickets.

00:03:58.300 --> 00:04:01.150
One is a ticket granting ticket,
or a TGT.

00:04:01.200 --> 00:04:04.070
It's the initial ticket that grants
permission to get service tickets.

00:04:04.100 --> 00:04:08.490
You can sort of think of it as
your all amusement park pass.

00:04:09.700 --> 00:04:11.940
The service ticket is a
ticket that authenticates a

00:04:12.060 --> 00:04:16.630
user to a particular service,
such as FTP, email, whatnot.

00:04:18.130 --> 00:04:20.180
I'll take a look at a couple of
the terms a little more in depth.

00:04:20.270 --> 00:04:24.360
A realm looks similar to an
internet domain to a user.

00:04:24.360 --> 00:04:27.340
For example, at MIT,
we have athena.mit.eu.

00:04:27.340 --> 00:04:28.970
It defines your namespace.

00:04:29.060 --> 00:04:34.380
All your user names have to avoid
collision within that realm.

00:04:34.380 --> 00:04:37.580
Unlike DNS, which causes some
consternation with folks,

00:04:37.640 --> 00:04:40.300
a Kerberoos realm is, in fact,
case sensitive.

00:04:40.460 --> 00:04:43.150
You can exchange keys
between different realms,

00:04:43.150 --> 00:04:46.530
and a realm can support any
combination of v4 and v5.

00:04:47.890 --> 00:04:51.300
An organizational recommendation is
to have as few realms as possible,

00:04:51.300 --> 00:04:54.740
and for those folks who may be setting
up Kerberoos for the first time,

00:04:54.740 --> 00:04:57.380
it's not best to do it
along political boundaries.

00:04:57.380 --> 00:04:58.880
You should, at best, have one.

00:04:58.880 --> 00:05:01.340
Your users will be thankful for it.

00:05:01.380 --> 00:05:04.860
Now, a ticket-granting ticket is
also called an initial ticket.

00:05:04.860 --> 00:05:06.500
It's the first ticket you get.

00:05:06.500 --> 00:05:09.220
It proves that the client is
allowed to get tickets for

00:05:09.230 --> 00:05:11.020
other particular services.

00:05:11.020 --> 00:05:14.400
It acts as a substitute for a password,
and it's the mechanism by

00:05:14.400 --> 00:05:17.660
which single sign-on behavior
for the user is achieved.

00:05:17.660 --> 00:05:20.560
Now, as I mentioned,
the tickets are only valid

00:05:20.560 --> 00:05:24.720
for a limited period of time,
but TGTs can, in fact, be renewed.

00:05:25.500 --> 00:05:29.180
So let's look at a simple
TGT request exchange.

00:05:29.450 --> 00:05:33.200
First, the client sends a
TGT request to the KDC.

00:05:34.290 --> 00:05:38.140
The KDC returns a TTT and
a session key to the client

00:05:38.140 --> 00:05:40.720
encrypted in the client's key.

00:05:42.240 --> 00:05:44.760
Then the client uses a
one-way hash of the password,

00:05:44.770 --> 00:05:47.100
this is where the user sits
and types their password,

00:05:47.110 --> 00:05:48.040
to extract the TGT.

00:05:48.040 --> 00:05:50.420
Now, at this point,
you can see that the password has not

00:05:50.490 --> 00:05:52.070
actually traveled over the network.

00:05:52.100 --> 00:05:54.500
Now,
I've done a bit of a simplification here.

00:05:54.500 --> 00:05:57.250
You actually want to do something
else called pre-authentication to

00:05:57.250 --> 00:06:01.050
make sure the exchange is secure,
but for the purposes of this session,

00:06:01.130 --> 00:06:02.800
making it go quicker.

00:06:02.800 --> 00:06:04.060
So what's it look like to a user?

00:06:04.060 --> 00:06:09.260
Well, in this example, if you can see it,
the user has retrieved two TGTs,

00:06:09.260 --> 00:06:10.940
one for v4 and one for v5.

00:06:11.800 --> 00:06:13.360
Most of the time,
users don't actually go and they

00:06:13.360 --> 00:06:16.810
need to investigate the tickets,
but people wonder what they look like,

00:06:16.900 --> 00:06:19.220
and unfortunately,
we don't have any whizzy OpenGL demos

00:06:19.220 --> 00:06:20.540
of tickets flying around.

00:06:22.920 --> 00:06:23.740
Now, a service ticket.

00:06:23.740 --> 00:06:29.230
Service tickets are tickets that clients
use to access a particular service,

00:06:29.260 --> 00:06:29.630
as I said.

00:06:29.630 --> 00:06:33.510
It contains a session key that is shared
between the client and the server and

00:06:33.510 --> 00:06:35.680
can be used to encrypt data exchanges.

00:06:35.680 --> 00:06:38.100
It also expires, but is not renewable.

00:06:38.100 --> 00:06:40.100
But that's not actually that important.

00:06:40.100 --> 00:06:42.160
TTTs take care of that for you.

00:06:42.160 --> 00:06:45.720
So let's take a look at a
service ticket exchange.

00:06:45.720 --> 00:06:51.750
First, the client presents the TTT to the
KDC with a request for a service ticket.

00:06:54.320 --> 00:06:59.660
The KDC returns an encrypted
service ticket to the client.

00:06:59.670 --> 00:07:03.600
The client uses the TGT to
extract the service ticket.

00:07:04.920 --> 00:07:07.240
Now, at this point,
this client can authenticate to

00:07:07.240 --> 00:07:08.740
the server in one of two ways.

00:07:08.740 --> 00:07:11.360
One is one-way authentication,
the other is mutual authentication.

00:07:11.360 --> 00:07:13.260
For completeness' sake,
we're going to show both,

00:07:13.260 --> 00:07:15.690
although in all circumstances,
you really want to try to

00:07:15.690 --> 00:07:17.120
use mutual authentication.

00:07:17.240 --> 00:07:22.070
So in the one-way example,
the client presents the

00:07:22.070 --> 00:07:22.070
service ticket to the server.

00:07:23.170 --> 00:07:26.470
The server then receives the service
ticket and authenticates the client.

00:07:26.550 --> 00:07:29.050
At this point, the client and server can
actually encrypt the data

00:07:29.210 --> 00:07:31.160
by using the session key.

00:07:33.620 --> 00:07:37.540
In the mutual authentication case,
the client sends the service ticket

00:07:37.540 --> 00:07:40.340
containing the session key to the server,
just like in the one-way.

00:07:40.340 --> 00:07:42.960
However, at this point,
it's pretty critical,

00:07:42.960 --> 00:07:45.720
the server essentially
authenticates back to the client.

00:07:45.720 --> 00:07:49.010
It returns a response encrypted with
session key from the service ticket,

00:07:49.050 --> 00:07:50.730
authenticating the server to the client.

00:07:50.760 --> 00:07:53.640
It's very important that all the paths,
all the servers and clients in the

00:07:53.650 --> 00:07:55.530
machine are authenticating to each other.

00:07:55.540 --> 00:07:58.250
Thus,
the trust relations are established.

00:07:59.070 --> 00:08:02.770
The server should also use session
key to encrypt the subsequent traffic,

00:08:02.780 --> 00:08:05.010
just like in the one-way
authentication example.

00:08:06.690 --> 00:08:10.260
That was an example in the abstract
case of how Kerbero fundamentally works.

00:08:10.260 --> 00:08:14.310
Now let's take a look at a more
specific example for the application

00:08:14.310 --> 00:08:16.850
developers so you can get an idea of
how to add it to your application.

00:08:16.860 --> 00:08:19.090
In this case,
we're going to look at IMAP because

00:08:19.290 --> 00:08:22.920
it has a number of good standards
and source code is out there

00:08:22.920 --> 00:08:24.880
for looking at as an example.

00:08:24.880 --> 00:08:27.390
So IMAP uses SASSL,
a simple authentication

00:08:27.390 --> 00:08:29.740
and security layer,
for its negotiation of

00:08:29.740 --> 00:08:31.000
authentication methods.

00:08:31.790 --> 00:08:35.340
SASSL will imply the use of the GSS API,
which I'll get into a little bit later,

00:08:35.340 --> 00:08:37.020
for accessing Kerbero S5.

00:08:37.040 --> 00:08:40.240
And then eventually the
authentication tokens that are

00:08:40.240 --> 00:08:42.710
passed around are Base64 encoded.

00:08:42.720 --> 00:08:45.320
So let's see how the negotiation happens.

00:08:45.360 --> 00:08:46.590
SASSL

00:08:47.290 --> 00:08:51.320
First, the client sends a request to the
server asking what its capabilities are.

00:08:51.320 --> 00:08:56.390
In this case, the server listed it, hey,
I do GSS, amongst many other things.

00:08:56.440 --> 00:08:59.870
Client says, I want to do GSS.

00:09:00.810 --> 00:09:02.490
Server sends back a simple,
let's go ahead,

00:09:02.490 --> 00:09:07.860
and then the client sends the Kerberoos
authenticator as part of a GSS API token.

00:09:09.500 --> 00:09:11.840
The server then sends mutual
authentication response as

00:09:11.840 --> 00:09:14.860
part of another GSS API token,
thus the client and server

00:09:14.860 --> 00:09:16.700
authenticating to each other.

00:09:16.740 --> 00:09:19.950
The client responds with
a simple acknowledgement.

00:09:20.590 --> 00:09:22.970
At this point, the server sends back
some security options,

00:09:23.030 --> 00:09:26.890
including buffer size, more importantly,
whether encryption should be used.

00:09:28.010 --> 00:09:34.140
The client then, at this point,
actually is sending in who it wants

00:09:34.140 --> 00:09:34.140
to log in as and selects encryption.

00:09:35.700 --> 00:09:38.380
The server sends back whether the
client was in fact authorized and

00:09:38.380 --> 00:09:39.400
whether encryption was selected.

00:09:39.480 --> 00:09:43.400
Notice that Kerbero was doing
authenticating of the user,

00:09:43.600 --> 00:09:45.950
whereas at this point the server is
now actually doing the authorization of

00:09:45.990 --> 00:09:47.370
whether the user can actually log in.

00:09:47.370 --> 00:09:52.680
And it's using a different
mechanism other than Kerbero,

00:09:52.680 --> 00:09:52.680
as Craig said,
is refactoring the problems.

00:09:53.750 --> 00:09:56.920
So some points to remember
about connecting to a service.

00:09:56.950 --> 00:10:01.360
After all this negotiation is done,
your base protocol and the example

00:10:01.370 --> 00:10:02.610
IMAP will proceed as normal.

00:10:02.750 --> 00:10:04.900
However,
encryption will protect the data stream.

00:10:07.250 --> 00:10:11.020
You can use the session keys to
negotiate your actual encryption keys.

00:10:11.020 --> 00:10:14.700
So essentially, as a byproduct of the
Kerbero authentication,

00:10:14.700 --> 00:10:16.280
you can get encryption.

00:10:17.430 --> 00:10:19.620
All these ticket exchanges
that I just presented,

00:10:19.620 --> 00:10:23.570
all the arrows going back and forth,
are basically invisible to the user.

00:10:24.260 --> 00:10:26.900
The connecting to the service is
essentially automatic for them.

00:10:26.940 --> 00:10:28.790
They don't need to type in the
password when they're connecting to

00:10:28.790 --> 00:10:31.670
an IMAP or FTP server or whatnot.

00:10:31.800 --> 00:10:34.940
These negotiations, Kerbero's features,
are often all automatically.

00:10:35.100 --> 00:10:37.990
This is sort of the behavior for the
end user to get the single sign-on.

00:10:38.000 --> 00:10:40.140
They're entering their password once
when they're logging into the system,

00:10:40.140 --> 00:10:41.980
and they don't have to
enter it anywhere else.

00:10:41.980 --> 00:10:43.970
Hence, single sign-on.

00:10:45.060 --> 00:10:46.070
What do service tickets look like?

00:10:46.170 --> 00:10:48.220
Well, in this example,
the user is logged into

00:10:48.320 --> 00:10:50.640
a variety of services,
including a v4 service and

00:10:50.640 --> 00:10:51.990
a variety of v5 services.

00:10:51.990 --> 00:10:53.770
To the user,
they just launched a bunch of apps.

00:10:53.880 --> 00:10:56.990
They don't even know that this app
is v4 based or this one is v5 based.

00:10:56.990 --> 00:11:04.160
To them, they just launched the
app and got their data,

00:11:04.160 --> 00:11:04.190
and all this authentication happened for
them behind the scenes automatically.

00:11:05.540 --> 00:11:08.680
So let's take a look at some
Kerbero infrastructure examples.

00:11:08.680 --> 00:11:12.780
This will be quickly going
over some KDC setups,

00:11:12.810 --> 00:11:16.440
including MIT,
MIT KDC with Active Directory,

00:11:16.440 --> 00:11:18.820
and Apple KDC, and then some general
KDC recommendations.

00:11:18.820 --> 00:11:22.110
I know a lot of folks are just looking
in at deploying Kerbero at their sites,

00:11:22.130 --> 00:11:24.870
so we thought it was a good idea
to go over some of these points.

00:11:24.990 --> 00:11:29.540
Now, an MIT stock KDC from the
MIT distribution provides best support

00:11:29.540 --> 00:11:35.170
for a wide cross-platform environments,
from older clients to current clients.

00:11:35.180 --> 00:11:37.060
It provides flexibility
for special deployments,

00:11:37.060 --> 00:11:39.910
such as AFS, the Andrew File System.

00:11:40.270 --> 00:11:44.780
However, and we'll be honest here,
it's a wee bit complex to manage,

00:11:44.790 --> 00:11:48.200
configure, build, install.

00:11:48.220 --> 00:11:51.960
But that's why source code's available.

00:11:52.060 --> 00:11:54.930
But a lot of people are really
interested in Active Directory.

00:11:54.940 --> 00:11:58.120
And a lot of people are interested in
putting Active Directory with their

00:11:58.120 --> 00:11:59.520
existing MIT KDC infrastructure.

00:11:59.520 --> 00:12:03.490
So I'll briefly show a little bit of
how you can possibly lay this out.

00:12:03.560 --> 00:12:04.860
By no means is this the only way.

00:12:04.860 --> 00:12:06.620
There's only one way you can lay it out.

00:12:06.620 --> 00:12:07.860
But this is a little example.

00:12:07.860 --> 00:12:09.830
We get asked this question quite a bit.

00:12:09.960 --> 00:12:10.860
First, why would you do it?

00:12:10.870 --> 00:12:14.100
Well, it provides good support
for Windows integration.

00:12:14.610 --> 00:12:18.750
There's a cross-domain trust between the
Windows Active Directory and the MIT KDC.

00:12:18.750 --> 00:12:21.040
Now, an important,
interesting point here is

00:12:21.080 --> 00:12:24.250
that if you have two MIT KDCs,
you can exchange keys between them,

00:12:24.330 --> 00:12:27.370
and users can use what's called
cross-realm authentication.

00:12:27.490 --> 00:12:30.610
However, that doesn't actually imply
trust between the realms,

00:12:30.610 --> 00:12:34.400
whereas Windows Active Directory actually
has an important concept of trust

00:12:34.400 --> 00:12:36.020
between its multiple domains.

00:12:36.030 --> 00:12:38.750
So when you actually set up
Active Directory and MIT KDC to

00:12:38.820 --> 00:12:41.990
communicate with each other,
there's an implicit relationship

00:12:41.990 --> 00:12:44.410
of trust between the realms.

00:12:44.600 --> 00:12:45.680
Thank you.

00:12:46.690 --> 00:12:49.690
Now, in this example,
the MIT KDC will contain the

00:12:49.750 --> 00:12:52.700
canonical list of user accounts
and the host keys for the

00:12:52.700 --> 00:12:55.490
non-Windows machines and services.

00:12:56.280 --> 00:13:00.190
There are mappings of the user
accounts in MIT KDC to the accounts

00:13:00.250 --> 00:13:03.300
in the Active Directory domain.

00:13:03.760 --> 00:13:06.240
So, just a quick little diagram.

00:13:06.240 --> 00:13:08.510
You can see that the trust
relationship exists between the

00:13:08.510 --> 00:13:10.410
MIT KDC and the Active Directory,
and that's where the

00:13:10.470 --> 00:13:11.500
account mapping happens.

00:13:11.500 --> 00:13:14.730
A user would authenticate to the
MIT KDC and then get information

00:13:14.770 --> 00:13:17.000
automatically out of Active Directory.

00:13:17.000 --> 00:13:21.530
The non-Windows application
services are stored,

00:13:21.530 --> 00:13:27.070
the host keys are stored in the MIT KDC,
and the Windows-specific

00:13:27.070 --> 00:13:28.230
application services information
is stored in the Active Directory.

00:13:29.330 --> 00:13:34.310
Now, as you may have heard in
Dave O's session on Tuesday,

00:13:34.390 --> 00:13:37.440
Apple is introducing a
KDC and Panther server.

00:13:37.560 --> 00:13:38.480
Why might you want to use it?

00:13:38.480 --> 00:13:42.700
Well, unlike the MIT KDC,
it's easy to set up and configure.

00:13:42.700 --> 00:13:44.660
You probably didn't even know you
actually installed it once you've

00:13:44.710 --> 00:13:45.820
gone through the setup assistant.

00:13:45.960 --> 00:13:49.850
It takes advantage of
Apple's open directory.

00:13:49.850 --> 00:13:54.280
So if you're setting up an infrastructure
for the first time in a small site,

00:13:54.280 --> 00:13:54.280
you get a nice directory with it.

00:13:54.550 --> 00:13:58.850
An interesting implementation detail
of the Panther server is that the

00:13:58.910 --> 00:14:05.760
password server actually contains the
Kerbero keys and other passwords for

00:14:05.760 --> 00:14:05.760
the legacy clients to connect to it.

00:14:06.100 --> 00:14:08.080
Now, in this case,
for Panther Server KDC,

00:14:08.080 --> 00:14:11.570
the machines talk to the directory
to get Kerbero's configuration

00:14:11.630 --> 00:14:13.430
information automatically.

00:14:13.520 --> 00:14:17.220
And then, of course,
machines will talk to the Apple KDC for

00:14:17.220 --> 00:14:18.370
their Kerbero authentication.

00:14:20.790 --> 00:14:25.240
General KDC recommendations no
matter which KDC you're setting up.

00:14:25.240 --> 00:14:27.690
Use triple DES with an
extra P for extra security,

00:14:27.690 --> 00:14:29.690
and RC4 instead of DES keys.

00:14:29.690 --> 00:14:32.950
DES,
probably that G5 that they introduced,

00:14:32.950 --> 00:14:35.300
you can crack DES faster
than you can throb a button.

00:14:35.300 --> 00:14:39.380
Set the pre-auth required
flag on an user principles.

00:14:39.380 --> 00:14:42.770
That helps secure the
actual TGT exchange.

00:14:43.790 --> 00:14:52.010
Run as few other services
as possible on your KDC.

00:14:52.010 --> 00:14:52.010
You don't want these other
services to have vulnerabilities

00:14:52.010 --> 00:14:52.010
that compromise your KDC data.

00:14:52.320 --> 00:14:55.740
Avoid Kerberos 4 as much as
possible and at all costs.

00:14:55.880 --> 00:14:57.800
I'll get into that a little bit later.

00:14:57.800 --> 00:15:01.190
Deploy client configuration
files with as few,

00:15:01.230 --> 00:15:03.220
as little specific
information as possible.

00:15:03.220 --> 00:15:06.500
This allows you to take advantage
of new encryption-level features

00:15:06.500 --> 00:15:07.920
that we add into Kerberos.

00:15:07.920 --> 00:15:10.570
You deploy the libraries
and deploy the new KDCs,

00:15:10.670 --> 00:15:12.740
then the clients can
take advantage of that.

00:15:12.740 --> 00:15:16.180
When settings are explicitly set,
that usually overrides the new

00:15:16.240 --> 00:15:18.180
functionality and new security level.

00:15:18.180 --> 00:15:22.610
And of course, securely back up your KDC,
And that is left up as

00:15:22.710 --> 00:15:24.870
an exercise to the user.

00:15:25.270 --> 00:15:28.230
Now, I don't normally go into
distributed file systems,

00:15:28.440 --> 00:15:30.770
but due to some recent
issues with Kerbero4,

00:15:30.770 --> 00:15:33.290
we thought it was
warranted discussing it.

00:15:33.300 --> 00:15:35.910
Andrew File System is a
popular distributed file

00:15:35.910 --> 00:15:37.570
system used by many sites.

00:15:37.580 --> 00:15:40.860
I mention it because it uses Kerbero4
as its fundamental authentication.

00:15:40.860 --> 00:15:48.250
There's been a number of improvements
to AFS and to MIT Kerbero4 to allow

00:15:48.500 --> 00:15:51.500
the use of v5 to do as much of
the authentication as possible.

00:15:51.500 --> 00:15:54.060
You can get a new v5 AK log from MIT.

00:15:54.170 --> 00:15:56.510
The URL is above, mit.edu.

00:15:56.520 --> 00:16:02.280
You should run a Kerbero4 on your KDC,
Kerbero4D.

00:16:02.280 --> 00:16:05.240
And you should only use
Kerbero4 for the AFS principle,

00:16:05.310 --> 00:16:07.860
and do not globally
enable v4 for all users.

00:16:10.500 --> 00:16:12.200
Now, at this point,
we'll talk a little bit

00:16:12.200 --> 00:16:15.340
about Kerberos for Macintosh,
the Kerberos implementation in Mac OS X.

00:16:17.510 --> 00:16:20.400
Now in Jaguar,
we shipped the first full featured client

00:16:20.430 --> 00:16:22.280
version of Kerberoos in a Mac OS X.

00:16:22.280 --> 00:16:24.200
And we're really excited about it.

00:16:24.240 --> 00:16:25.800
We included KFM 4.5.

00:16:25.800 --> 00:16:29.750
We managed to ship with Apple a
Kerberoos ticket management application,

00:16:29.860 --> 00:16:33.520
Kerb 5.1.2.6,
number of performance enhancements,

00:16:33.520 --> 00:16:35.970
improvements to the
command line utilities,

00:16:35.970 --> 00:16:36.840
and 5 to 4.

00:16:37.040 --> 00:16:40.270
And thanks to bug reports
that you filed in 10.2.3,

00:16:40.340 --> 00:16:42.190
we shipped KFM 4.5.1.

00:16:42.190 --> 00:16:44.190
And most people didn't even notice.

00:16:44.200 --> 00:16:45.360
But a few people did.

00:16:45.390 --> 00:16:46.900
So we're happy.

00:16:47.940 --> 00:16:49.380
Now at Panther,
we're introducing Kerberoos

00:16:49.410 --> 00:16:50.400
from Macintosh 5.0.

00:16:50.400 --> 00:16:54.190
And we've included a real
host of nice new features.

00:16:56.480 --> 00:17:01.400
Most importantly is Kerbero's v5.1.3.

00:17:01.420 --> 00:17:06.580
It includes a number of improved
Windows interoperability features.

00:17:06.700 --> 00:17:09.180
We have a new Kerbero's login
dialog that fits in better with

00:17:09.240 --> 00:17:12.590
Mac OS X authorization dialogs.

00:17:13.130 --> 00:17:14.870
We have a UI for getting
address list tickets,

00:17:14.870 --> 00:17:17.380
so Kerbero 5 will work
better behind a NAT,

00:17:17.380 --> 00:17:19.550
and we all know NATs are out there.

00:17:19.840 --> 00:17:23.260
We have DNS support for KDC lookups.

00:17:23.300 --> 00:17:26.150
And we have renewable ticket
granting ticket support.

00:17:29.860 --> 00:17:31.550
On the server side,
we actually now include

00:17:31.570 --> 00:17:32.620
all the server components.

00:17:32.620 --> 00:17:36.310
A standard stock MIT KDC is included,
and related daemons.

00:17:36.370 --> 00:17:38.930
And the common tools
to operate an MIT KDC,

00:17:38.990 --> 00:17:40.660
K-Admin and KDUtil.

00:17:40.660 --> 00:17:42.970
We have many requests for those.

00:17:43.040 --> 00:17:45.440
And of course,
I'll also plug that Apple includes a more

00:17:45.440 --> 00:17:48.180
integrated KDC as part of Panther Server,
but you have your choice.

00:17:48.250 --> 00:17:52.450
You can take an MIT stock KDC,
or you can use the Panther Server KDC.

00:17:54.010 --> 00:17:57.150
So let's take a look at the Kerberos
for Macintosh 5 architecture.

00:17:57.180 --> 00:17:59.200
It's a little different than
Kerberos and other implementations.

00:17:59.200 --> 00:18:03.440
First, we have the application layer
and standard Mac OS applications.

00:18:03.440 --> 00:18:06.220
They access the Kerberos
libraries directly.

00:18:06.220 --> 00:18:10.380
Now, for command line applications,
they actually go through symlinks and

00:18:10.380 --> 00:18:15.520
userlib to access the main Kerberos
libraries in the system directory.

00:18:16.300 --> 00:18:19.620
In Jaguar, if you were compiling stuff,
you needed to install

00:18:19.670 --> 00:18:21.870
the BSD SDK headers,
the dev tools,

00:18:21.880 --> 00:18:24.740
which was turned off by default,
although it looks like Apple has

00:18:24.740 --> 00:18:25.780
fixed that with Panther.

00:18:25.780 --> 00:18:28.980
And that stymied a number of people
reporting their applications.

00:18:30.510 --> 00:18:33.290
We also have support for
CFM Carbon applications through

00:18:33.290 --> 00:18:36.350
CFM Shub libraries that MIT distributes.

00:18:37.090 --> 00:18:40.290
In the system directory in
Mac OS X contains the Kerbero framework.

00:18:40.340 --> 00:18:44.800
It has a library file containing
all the various Kerbero libraries,

00:18:44.800 --> 00:18:46.940
and plus many others not listed.

00:18:46.940 --> 00:18:50.940
And different than Kerbero and other
environments is the C cache server.

00:18:50.940 --> 00:18:54.060
It contains the tickets in memory,
and it uses Mac IPC to communicate

00:18:54.060 --> 00:18:55.940
with the Kerbero library.

00:18:56.920 --> 00:18:58.300
Lastly,
we have the Kerberoos login server.

00:18:58.400 --> 00:19:01.360
This is the actual component
that presents the Kerberoos

00:19:01.360 --> 00:19:03.710
login dialogue for you,
and it communicates with the

00:19:03.710 --> 00:19:05.050
Mac IPC to the Kerberoos framework.

00:19:05.060 --> 00:19:08.820
A lot of people think that's actually
a part of the Kerberoos application,

00:19:08.850 --> 00:19:12.060
but it's actually stored in
the Kerberoos framework itself.

00:19:14.940 --> 00:19:19.810
So the Curb 4 included in KFM includes
the KClient API compatibilities,

00:19:19.810 --> 00:19:21.000
just like on Jaguar Kerberos.

00:19:21.190 --> 00:19:23.780
However,
a significant change we've made is

00:19:23.840 --> 00:19:28.110
that the Curb 4 library comes from
the v4 compatibility library in

00:19:28.110 --> 00:19:30.060
the stock MIT Curb 5 distribution.

00:19:30.060 --> 00:19:32.880
We previously had based it
on a separate library from

00:19:32.880 --> 00:19:34.840
an older Cygnus distribution.

00:19:34.890 --> 00:19:37.460
So now more of the platforms
in the MIT Kerberos code

00:19:37.460 --> 00:19:40.370
share the same v4 library.

00:19:40.560 --> 00:19:44.260
Now, applications can use either
KClient or the straight v4

00:19:44.260 --> 00:19:45.900
APIs for their v4 support.

00:19:45.900 --> 00:19:49.390
However,
new code shouldn't be developed using v4.

00:19:49.460 --> 00:19:50.460
Why, you might ask?

00:19:50.540 --> 00:19:53.140
Well, it only supports DES.

00:19:53.300 --> 00:19:55.780
As we know,
DES isn't very secure these days.

00:19:55.910 --> 00:19:59.760
You cannot get addressless
tickets if it's not part of v4.

00:20:00.340 --> 00:20:03.140
tickets do not support a variety
of various feature flags,

00:20:03.140 --> 00:20:07.090
such as forwarding.

00:20:07.140 --> 00:20:13.030
Microsoft has no native support
in their Windows products for v4,

00:20:13.030 --> 00:20:13.030
so that makes integration
components much more difficult.

00:20:13.390 --> 00:20:15.060
Oh,
and there's this little teensy problem

00:20:15.060 --> 00:20:18.720
that there's some fundamental problems
with the protocol and encryption level.

00:20:18.780 --> 00:20:21.660
If you really want to go read up the fun,
there's the cert vulnerabilities

00:20:21.660 --> 00:20:23.340
that we released a few months ago.

00:20:23.340 --> 00:20:26.540
Kerberoos v4 is pretty
much dead and busted.

00:20:26.620 --> 00:20:30.700
So, but there is a solution,
and I'll give everyone one guess.

00:20:30.820 --> 00:20:31.710
Kerberoos 5.

00:20:31.710 --> 00:20:34.880
So everyone really should
be migrating to Kerberoos 5.

00:20:34.880 --> 00:20:38.300
And in KFM 5.0, as I said,
we have Kerberoos 5.1.3.

00:20:38.300 --> 00:20:41.250
An enhancement is that we have
support for the current IETF draft

00:20:41.270 --> 00:20:42.540
of Kerberoos clarifications.

00:20:42.540 --> 00:20:50.950
We also include the GSS APIs,
application level API, for accessing the

00:20:50.950 --> 00:20:50.950
Kerberoos functionality.

00:20:51.620 --> 00:20:55.980
Let's take a look at some of
the features of v5.1.3 in depth.

00:20:56.050 --> 00:20:58.500
As I said, we have improved
Microsoft Windows interoperability.

00:20:58.510 --> 00:21:01.500
That specifically means we've
added TCP support for communication

00:21:01.500 --> 00:21:04.500
in the client libraries and KDC.

00:21:04.500 --> 00:21:07.500
We have support for
the RC4 crypto system.

00:21:07.500 --> 00:21:12.490
And we have support to the
Microsoft set password protocol.

00:21:13.600 --> 00:21:15.760
We've also added improved
support for IPv6.

00:21:15.760 --> 00:21:18.020
We could use a lot of
help testing this out,

00:21:18.020 --> 00:21:20.290
so get your Panther seeds and try it out.

00:21:20.350 --> 00:21:22.860
We have initial AES support.

00:21:22.860 --> 00:21:24.460
Now it's not complete,
and we're still working with

00:21:24.550 --> 00:21:27.330
Microsoft to define some of
the standards for AES support,

00:21:27.340 --> 00:21:31.450
but Mac OS X Panther may be one of
the first out of the gate with AES.

00:21:31.500 --> 00:21:34.660
We also now have support for
building on pure Darwin systems.

00:21:34.660 --> 00:21:38.450
If you do this, you'll get a stock
UNIX Curb 5 installation,

00:21:38.460 --> 00:21:41.280
but we know a few people out there
like to run on pure Darwin systems,

00:21:41.320 --> 00:21:42.810
so we now have support from that.

00:21:44.590 --> 00:21:47.380
and of course many bug fixes
and future improvements from

00:21:47.380 --> 00:21:49.490
previous Curb5 releases.

00:21:49.580 --> 00:21:51.200
We get asked this all the time.

00:21:51.200 --> 00:21:54.870
In fact, before the keynote,
we got asked this question,

00:21:54.870 --> 00:21:56.500
do you interoperate with Microsoft?

00:21:56.730 --> 00:22:03.630
So yes, Active Directory can be used as
a Curb5 KDC to a Mac OS X client,

00:22:03.630 --> 00:22:03.630
Kerberoos clients.

00:22:04.890 --> 00:22:09.600
Windows also has a GSS mechanism
called Simple and Protected

00:22:09.630 --> 00:22:13.530
GSS API negotiation mechanism,
Spanego.

00:22:13.860 --> 00:22:16.100
However, unfortunately,
it doesn't have a public counterpart

00:22:16.100 --> 00:22:19.770
on Mac OS X right now in Panther,
but we are trying to work on

00:22:19.770 --> 00:22:21.950
it with a variety of vendors.

00:22:22.140 --> 00:22:24.290
Also, there's SSPI,
an application interface

00:22:24.340 --> 00:22:25.660
that Windows promotes.

00:22:25.660 --> 00:22:28.080
Fortunately, it's very similar to GSS.

00:22:28.190 --> 00:22:32.240
Microsoft even publishes a document,
which we reference later in the session,

00:22:32.240 --> 00:22:34.990
to help you map the APIs.

00:22:35.000 --> 00:22:37.440
If you're writing as a Macintosh
developer and you want to

00:22:37.440 --> 00:22:39.990
perhaps port over onto Windows,
you should write to GSS,

00:22:39.990 --> 00:22:42.000
and you should hopefully
be able to move it,

00:22:42.000 --> 00:22:44.900
create a shim layer to
write on top of SSPI.

00:22:45.000 --> 00:22:49.320
As I mentioned,
TCP and RC4 support are there.

00:22:50.220 --> 00:22:51.970
Now,
going back to the architecture slide,

00:22:52.030 --> 00:22:54.900
the credentials cache,
the tickets on Kerberoes from

00:22:54.900 --> 00:22:55.920
Macintosh are stored in memory.

00:22:55.920 --> 00:22:58.890
This allows us to be more flexible
in how we manage our tickets,

00:22:58.890 --> 00:23:01.980
supporting multiple credentials
in multiple realms more easily.

00:23:04.970 --> 00:23:07.780
The Kerberoos login library is
unique to Kerberoos from Macintosh,

00:23:07.800 --> 00:23:11.400
and it simplifies getting both
v4 and v5 initial tickets.

00:23:11.400 --> 00:23:15.420
You can get and acquire and destroy
the initial tickets with a single call.

00:23:15.420 --> 00:23:20.230
It provides an API for programmers
to change the settings that come

00:23:20.230 --> 00:23:23.910
up in the Kerberoos login dialogue,
if you want.

00:23:23.910 --> 00:23:28.190
And it mostly is used by sort
of administrative apps or those

00:23:28.190 --> 00:23:31.130
that are trying to do sort of
login behavior on the Macintosh

00:23:31.130 --> 00:23:31.130
and perform actions on TGTs.

00:23:32.560 --> 00:23:36.300
Other libraries that are also provided
include ComAir for error handling and

00:23:36.300 --> 00:23:40.390
Profile library for reading elements
out of the Kerberoes configuration file,

00:23:40.390 --> 00:23:43.400
such as your default realms and whatnot.

00:23:44.440 --> 00:23:47.400
The Kerberoos application is an
end user application for obtaining,

00:23:47.400 --> 00:23:49.600
getting information, destroying tickets.

00:23:49.600 --> 00:23:53.430
It also provides UI for setting things
such as the Kerberoos login dialogue

00:23:53.430 --> 00:23:54.820
defaults in your favorite realm.

00:23:54.820 --> 00:23:58.690
Also, the dock icon presents information
to the user about the status

00:23:58.720 --> 00:24:02.540
of the Kerberoos tickets,
when they expire, and a dock menu.

00:24:02.540 --> 00:24:05.740
If the user holds down the mouse button,
they'll see a menu of actions they

00:24:05.740 --> 00:24:07.610
can perform on the Kerberoos tickets.

00:24:07.760 --> 00:24:11.200
People often ask about
a menu in the menu bar.

00:24:11.200 --> 00:24:13.580
However, the menu is already provided
in the Kerberoos application.

00:24:15.580 --> 00:24:17.710
For KFM 5.0,
we've included a number of new

00:24:17.810 --> 00:24:22.360
features in the Kerberoos application,
including editing the settings

00:24:22.370 --> 00:24:26.510
for the new login dialog defaults,
improved performance and appearance.

00:24:26.690 --> 00:24:28.840
Now you get your blurry text.

00:24:28.970 --> 00:24:32.070
Enter realms for DNS in
your favorite realms.

00:24:32.630 --> 00:24:35.640
New time ranges for setting
renewable ticket options.

00:24:35.670 --> 00:24:37.700
And even more importantly,
while it's running,

00:24:37.700 --> 00:24:40.140
it will auto-renew your
TGTs when applicable.

00:24:40.140 --> 00:24:44.100
When you get the renewable TGTs,
if KerberoSAP is running,

00:24:44.100 --> 00:24:46.360
then it will automatically
renew your tickets.

00:24:46.360 --> 00:24:49.250
However, if you put the machine to
sleep and your tickets expire,

00:24:49.250 --> 00:24:50.720
you cannot renew expired tickets.

00:24:50.760 --> 00:24:52.990
But if you're on a
36-hour coding marathon,

00:24:53.090 --> 00:24:55.260
you don't have to enter
your password at all.

00:24:55.280 --> 00:24:57.610
KerberoSAP will keep
auto-renewing your tickets.

00:25:00.480 --> 00:25:03.560
So let's take a look at the
new Kerberoos login dialog.

00:25:03.560 --> 00:25:06.580
As you can see,
we've changed it to look more like

00:25:06.680 --> 00:25:10.420
the standard Mac OS X authentication
authorization dialog.

00:25:10.470 --> 00:25:13.630
It even tells you which
applications requesting

00:25:13.710 --> 00:25:17.690
Kerberoos access-- in this case,
Mail App is trying to do

00:25:17.740 --> 00:25:19.040
Kerberoos authentication.

00:25:19.210 --> 00:25:21.680
You can also see the Realm field
is now in editable text,

00:25:21.680 --> 00:25:25.610
so you can better support with
the DNS lookup of the KDC Realm.

00:25:26.600 --> 00:25:29.810
If you show options, and this may be a
little difficult to see,

00:25:29.810 --> 00:25:32.330
we've expanded the dialog,
and you can see there's a checkbox

00:25:32.380 --> 00:25:34.320
for the address list tickets,
so it's no longer hidden

00:25:34.320 --> 00:25:36.820
in a configuration file,
and you can configure how long you

00:25:36.820 --> 00:25:38.580
want your tickets to be renewable for.

00:25:42.090 --> 00:25:44.190
So, now there are some changes
in Panther Kerberoes that

00:25:44.190 --> 00:25:45.150
you should be aware of.

00:25:45.230 --> 00:25:49.440
First, due to the change in the
application framework that we're

00:25:49.540 --> 00:25:52.440
using for the login dialog,
the login dialog's password field has

00:25:52.440 --> 00:25:54.360
been changed from Mac Roman to UTF-8.

00:25:54.360 --> 00:25:58.600
Now, internet authorization in Kerberoes
passwords is one horrible mess,

00:25:58.610 --> 00:26:00.600
and we're sorry to make
it a little bit worse.

00:26:00.600 --> 00:26:03.730
But if a user has a password
that uses high-bit characters

00:26:03.730 --> 00:26:07.340
in Mac Roman encoding,
they'll have difficulty logging on.

00:26:07.460 --> 00:26:09.540
Now, you have your administrator
can reset their password,

00:26:09.540 --> 00:26:12.400
or they can use the terminal,
change the character set,

00:26:12.500 --> 00:26:13.980
and change the password from there.

00:26:15.930 --> 00:26:18.020
New CFM bridge libraries
are unfortunately required,

00:26:18.030 --> 00:26:21.450
however they are available to you
today and the new bridge libraries will

00:26:21.450 --> 00:26:25.480
work both on Jaguar and on Panther,
so you just need to do one distribution.

00:26:27.480 --> 00:26:29.580
Command line clients will no
longer automatically prompt

00:26:29.680 --> 00:26:30.650
when no tickets are available.

00:26:30.730 --> 00:26:34.690
The behavior now is identical to
on the other UNIX environments.

00:26:35.700 --> 00:26:40.370
Kerb 5-4 authentication now requires a
valid v4 configuration to be available.

00:26:40.540 --> 00:26:42.670
Jaguar would always try 5-4,
and that was a problem

00:26:42.760 --> 00:26:43.820
for a number of sites.

00:26:43.820 --> 00:26:48.460
And sudo and su will now
get an empty ticket cache,

00:26:48.530 --> 00:26:53.940
not have access to the logged-in user's
cache due to changes in interoperating

00:26:53.940 --> 00:26:55.180
with the new security server.

00:26:58.030 --> 00:27:02.140
Let's take a look at
developing for Kerbero.

00:27:02.140 --> 00:27:03.660
How do you Kerberos your application?

00:27:03.660 --> 00:27:05.100
Well, it's kind of easy.

00:27:05.100 --> 00:27:06.660
Well, hopefully.

00:27:06.810 --> 00:27:10.690
Find the protocol specification, RFCs,
whatnot.

00:27:11.000 --> 00:27:14.570
To bring which API to use,
if you had to add some support for v4,

00:27:14.570 --> 00:27:17.260
you could use KClient or
GSS API or Kerberoos 5,

00:27:17.360 --> 00:27:19.530
depending on the application's need.

00:27:20.870 --> 00:27:24.180
And you figure out how to
connect the API to the protocol.

00:27:24.180 --> 00:27:27.560
This means that the data returned
by the various APIs needs to

00:27:27.560 --> 00:27:30.690
be solidified in some form that
the base protocol understands.

00:27:30.710 --> 00:27:33.400
Typically, this is base 64.

00:27:34.250 --> 00:27:38.020
Take a quick look at Kerberizing FTP,
because it has a couple of nice

00:27:38.020 --> 00:27:39.490
RFCs defining how it works.

00:27:39.490 --> 00:27:42.560
One for v4 and one for GSS and K5.

00:27:42.560 --> 00:27:46.340
You would use, in this case,
KClient API for v4 support

00:27:46.340 --> 00:27:48.140
and GSS for Kerber5.

00:27:50.550 --> 00:27:53.860
I'm skipping the v4 point,
because we're not supporting v4 anymore,

00:27:53.880 --> 00:27:54.250
right?

00:27:54.260 --> 00:27:54.760
Right?

00:27:54.760 --> 00:27:55.420
Yeah.

00:27:55.580 --> 00:27:57.190
So GSS API.

00:27:57.380 --> 00:28:00.260
First, you start with some session
management and authentication.

00:28:00.260 --> 00:28:02.460
I've done through GSS in its set context.

00:28:02.460 --> 00:28:04.880
You do some base encryption and
decryption of the data stream

00:28:04.920 --> 00:28:07.020
through GSS wrap and GSS unwrap.

00:28:07.110 --> 00:28:09.930
And the way, as an example,
to connect the API to the

00:28:09.930 --> 00:28:12.770
protocol is through base64.

00:28:13.930 --> 00:28:17.720
Let's look a little bit more in
GSS API programming in depth,

00:28:17.760 --> 00:28:19.260
the basics.

00:28:19.280 --> 00:28:24.260
Now GSS exchanges are messages
and things called tokens.

00:28:24.670 --> 00:28:28.100
At the beginning of the program,
GSS exchanges context tokens

00:28:28.340 --> 00:28:31.890
to perform the authentication
and to set up the encryption.

00:28:32.160 --> 00:28:34.380
Later,
the program actually calls GSS-Wrap

00:28:34.380 --> 00:28:39.070
and GSS-Unwrap to do the encryption
and decryption of the application data.

00:28:39.400 --> 00:28:43.200
In general, to hammer the point home,
all application data should be encrypted.

00:28:43.200 --> 00:28:46.290
There are a number of applications out
there that still just do authentication,

00:28:46.290 --> 00:28:49.060
and our users tend to think that
even all the data stream is still

00:28:49.080 --> 00:28:51.930
encrypted when they're using Kerberoes,
and we need to make sure

00:28:51.960 --> 00:28:54.630
all the applications are,
in fact, encrypting the data.

00:28:54.780 --> 00:28:55.940
Users like security.

00:28:57.420 --> 00:28:58.680
Application choices.

00:28:58.770 --> 00:29:03.950
Applications must select
GSS API security services that they want.

00:29:04.420 --> 00:29:08.030
Most applications want to explicitly
turn on the following features:

00:29:08.120 --> 00:29:12.340
integrity protection, confidentiality,
replay detection, and sequencing.

00:29:12.350 --> 00:29:14.380
They're not as scary as they sound.

00:29:14.680 --> 00:29:17.790
GS SAPI also provides a
facility to forward credentials

00:29:17.900 --> 00:29:20.470
from one system to another.

00:29:23.640 --> 00:29:27.860
Now the program flow of GSS programming
essentially requires multiple

00:29:27.860 --> 00:29:31.080
round trips for authentication,
potentially.

00:29:31.120 --> 00:29:34.790
An application does not necessarily
know how many round trips are

00:29:34.790 --> 00:29:38.360
going to be required ahead of time.

00:29:38.440 --> 00:29:42.350
So the application loops,
waiting for the authentication to finish.

00:29:44.680 --> 00:29:50.110
So let's take a look
at the GSS client loop.

00:29:50.300 --> 00:29:53.580
The input token, you set it up,
set it to null.

00:29:54.220 --> 00:29:59.340
You then go into a do loop
with GSS and NetSec context.

00:30:01.420 --> 00:30:05.080
If the output token is there,
then you send the output token.

00:30:05.080 --> 00:30:09.890
And then you check the major status,
GSS status.

00:30:09.920 --> 00:30:14.830
If you continue as needed,
you essentially continue doing the loop.

00:30:16.840 --> 00:30:19.190
On the server side,
you sit there looping,

00:30:19.190 --> 00:30:21.810
trying to receive a GSS token.

00:30:23.400 --> 00:30:27.590
With CSS Accept SecContext.

00:30:27.680 --> 00:30:30.460
If it's there, you send a response back.

00:30:31.290 --> 00:30:33.690
And you check to see whether
continuation is needed.

00:30:33.700 --> 00:30:36.830
And if it is,
you continue looping in the do

00:30:36.830 --> 00:30:40.100
loop to receive all of the data.

00:30:41.960 --> 00:30:44.460
So Kerberizing suggestions
for developers.

00:30:44.710 --> 00:30:47.980
Use Sassl if you're adding Kerberos
to your own proprietary protocol.

00:30:48.010 --> 00:30:50.560
That'll help handle a lot
of the negotiations of the

00:30:50.560 --> 00:30:53.830
various authentication methods
you have available to you,

00:30:53.840 --> 00:30:56.490
not just Kerberos, but other ones.

00:30:56.980 --> 00:31:02.330
Using Zassal includes using GSS API for
your Kerber-5 functionality.

00:31:04.470 --> 00:31:08.440
The GSS API helps isolate applications
from differences in the Curb-5 APIs.

00:31:08.440 --> 00:31:11.030
The Curb-5 APIs actually
aren't any real standard,

00:31:11.030 --> 00:31:14.800
and different implementations
have different API semantics.

00:31:14.800 --> 00:31:23.270
So GSS is actually an RFC C-binding,
so that helps make your application

00:31:23.270 --> 00:31:23.270
more portable to different environments.

00:31:24.060 --> 00:31:28.020
Again, to drive home, point home,
do not add additional v4 support.

00:31:28.020 --> 00:31:31.270
At this point, v4 is very insecure,
and we need to make sure

00:31:31.270 --> 00:31:33.330
everyone's migrating off to v5.

00:31:36.120 --> 00:31:39.280
So in summary,
as was mentioned in other sessions,

00:31:39.280 --> 00:31:43.900
Kerbero is simply a powerful solution
to authentication and single sign-on.

00:31:44.060 --> 00:31:47.880
Provides an unobtrusive
authentication experience to the user.

00:31:47.880 --> 00:31:51.100
It's available on a wide
variety of platforms.

00:31:51.140 --> 00:31:53.020
Site should be moving from Kerbero.

00:31:53.020 --> 00:31:55.420
Have I gotten the point across?

00:31:55.640 --> 00:31:58.940
Panther and Panther Server will
provide a wealth of Kerberide services.

00:31:58.940 --> 00:32:00.890
And Apple, as has been mentioned
in a previous session,

00:32:00.890 --> 00:32:02.440
is committing very heavily to Kerberos.

00:32:02.440 --> 00:32:05.430
And they will be driving
adoption of Kerberos throughout

00:32:05.430 --> 00:32:07.000
their operating systems.

00:32:10.190 --> 00:32:12.400
If you need to report a bug
about Kerberoos in Mac OS X,

00:32:12.400 --> 00:32:16.610
since there are so many people,
his family is very large,

00:32:16.630 --> 00:32:18.200
report the bugs to Apple.

00:32:18.200 --> 00:32:20.700
It's nice,
we like to hear from the bugs at MIT,

00:32:20.700 --> 00:32:23.400
however, in order to get your bugs
fixed and back in the OS,

00:32:23.450 --> 00:32:24.560
they need to be filed at Apple.

00:32:24.560 --> 00:32:27.220
If you feel that your bug
is not getting attention,

00:32:27.270 --> 00:32:29.400
please bring the issue up with Apple.

00:32:29.400 --> 00:32:31.590
They're the ones who ship it,
so if you need to get it

00:32:31.590 --> 00:32:34.860
into a software update,
you need to raise the issue

00:32:34.860 --> 00:32:37.740
with your Apple representative.

00:32:39.780 --> 00:32:44.230
So to wrap up, here's the roadmap.

00:32:44.280 --> 00:32:45.900
Most of these sessions
have already happened.

00:32:45.900 --> 00:32:49.100
However, there's a security
feedback forum on Friday.

00:32:51.070 --> 00:32:54.230
You can contact Craig or
myself or also Skip Levens,

00:32:54.240 --> 00:32:58.520
who is the server technology evangelist,
and a lot of his folks are doing

00:32:58.520 --> 00:33:00.720
a lot of the Kerbero integration.

00:33:02.490 --> 00:33:03.920
For more information,
we have a variety of URLs.

00:33:03.980 --> 00:33:07.430
The documentation that's available
for MIT is in a couple of places.

00:33:07.610 --> 00:33:11.100
And all these URLs are
available from Apple.

00:33:12.660 --> 00:33:15.690
Apple has a knowledge base article
about Kerberoos and Jaguar.

00:33:15.750 --> 00:33:20.940
And Microsoft has a number of
interoperability web pages,

00:33:20.960 --> 00:33:23.790
including frequently asked questions.

00:33:24.530 --> 00:33:27.080
There are a number of RFCs
you might want to look at,

00:33:27.210 --> 00:33:31.590
like IMAP authentication mechanisms is a
great example of how to use SASL and GSS.

00:33:31.640 --> 00:33:34.850
A lot of people don't know this,
but we actually did publish the

00:33:34.910 --> 00:33:38.640
source code as much as we could,
legally allowed,

00:33:38.640 --> 00:33:41.640
to Kerberoos for Macintosh 451 in Jaguar.

00:33:41.640 --> 00:33:45.170
It's on the Darwin Kerberoos page,
and that's available under

00:33:45.170 --> 00:33:46.990
the developer site at Apple.