WEBVTT

00:00:21.450 --> 00:00:24.270
Good afternoon and welcome
to the Rendezvous session.

00:00:24.270 --> 00:00:25.000
I'm Craig Keithley.

00:00:25.000 --> 00:00:29.380
I'm Apple's I/O technology evangelist
in worldwide developer relations.

00:00:29.400 --> 00:00:31.400
One of those I/O technologies
is Rendezvous.

00:00:31.400 --> 00:00:34.820
And over the past year,
we've been working very hard

00:00:34.820 --> 00:00:38.400
to bring Rendezvous to as
many products as possible.

00:00:38.400 --> 00:00:42.360
I have over 120 developers
actively working on projects.

00:00:42.360 --> 00:00:45.400
More than 35 or thereabouts have shipped.

00:00:45.430 --> 00:00:46.400
There's more on the way.

00:00:46.400 --> 00:00:49.930
If you were at the session
earlier this week for open source,

00:00:49.930 --> 00:00:53.400
you saw that OpenPlay now
has added Rendezvous support.

00:00:53.420 --> 00:00:55.540
So in the future,
games that use OpenPlay will

00:00:55.540 --> 00:00:57.400
automatically enable Rendezvous.

00:00:57.400 --> 00:00:59.400
This is a big step forward.

00:00:59.400 --> 00:01:02.310
So if you're a game developer and you're
here to learn more about Rendezvous,

00:01:02.340 --> 00:01:05.400
the best recommendation I have
for you is go check out OpenPlay.

00:01:05.400 --> 00:01:09.000
You're going to get the benefits
of OpenPlay plus the benefits

00:01:09.000 --> 00:01:10.990
of Rendezvous automatically.

00:01:11.310 --> 00:01:15.960
You know, as we look over the history
of networking communications,

00:01:16.070 --> 00:01:18.660
there are a couple of important stages.

00:01:18.660 --> 00:01:24.110
You know, I can think back to the first
time I used a dial-up modem,

00:01:24.160 --> 00:01:27.560
dialed into ARPANET through
my local university,

00:01:27.560 --> 00:01:29.060
and how exciting that was.

00:01:29.060 --> 00:01:31.920
And then as AppleTalk came
out in the mid-80s,

00:01:31.920 --> 00:01:34.450
and I was able to
easily network products,

00:01:34.530 --> 00:01:36.730
this is the next generation.

00:01:36.740 --> 00:01:40.580
It's the way that people should be
doing zero configuration networking.

00:01:40.580 --> 00:01:41.960
It's plug and play.

00:01:41.980 --> 00:01:43.790
It's how we want to make devices work.

00:01:43.800 --> 00:01:48.450
So to go into that,
this session will detail

00:01:48.450 --> 00:01:53.490
what Rendezvous is,
what we've been doing for the past year,

00:01:53.490 --> 00:01:55.800
the new features that
are coming in Panther,

00:01:55.800 --> 00:01:58.890
the new APIs that will be
available to you in the future,

00:01:58.900 --> 00:02:01.420
and we want to go over some
hints for software developers

00:02:01.420 --> 00:02:02.800
and hardware developers.

00:02:02.970 --> 00:02:06.440
This will run the range both
from software techniques to,

00:02:06.530 --> 00:02:08.060
licensing the logo.

00:02:08.110 --> 00:02:10.050
All of you,
if you're doing Rendezvous development,

00:02:10.060 --> 00:02:12.260
should be licensing the logo.

00:02:12.260 --> 00:02:12.990
It's free.

00:02:12.990 --> 00:02:16.520
It's an easy way for your customers
to know that they've bought a

00:02:16.520 --> 00:02:18.840
product that works with Rendezvous.

00:02:18.890 --> 00:02:22.650
So without very much further ado,
let's bring up Stuart Chechier,

00:02:22.650 --> 00:02:23.680
who will go into all this.

00:02:23.730 --> 00:02:25.180
Thank you.

00:02:33.270 --> 00:02:38.300
Once again, just like last year,
it's a great turnout.

00:02:38.400 --> 00:02:41.290
I'd like to ask everybody to shuffle
in and fill up the seats because

00:02:41.360 --> 00:02:44.030
there are still people standing in the
doorway and people trying to get in.

00:02:44.060 --> 00:02:49.000
So, if there are any gaps, close them up.

00:02:57.190 --> 00:02:59.270
So I'd like to just get a show of hands.

00:02:59.590 --> 00:03:05.670
How many people saw the WWDC presentation
last year on Rendezvous?

00:03:07.000 --> 00:03:08.900
Okay, about half, that's good.

00:03:09.050 --> 00:03:12.990
So, I'm not going to repeat
that material this year.

00:03:13.180 --> 00:03:16.510
I'm going to do a quick overview to
remind you what it was all about,

00:03:16.660 --> 00:03:19.230
but if you want to see
more detail about that,

00:03:19.230 --> 00:03:21.270
pull out your old DVDs from
last year and have a look,

00:03:21.320 --> 00:03:24.200
or if you weren't here last year,
then you might be able to find one

00:03:24.200 --> 00:03:26.060
from a friend and have a look at that.

00:03:26.080 --> 00:03:28.030
So, right now,
I'm just going to quickly skip

00:03:28.030 --> 00:03:29.520
through to refresh your memory.

00:03:30.950 --> 00:03:34.040
We're going to talk about
why we did Rendezvous.

00:03:34.070 --> 00:03:37.730
We're going to talk about what
we did to solve the problems.

00:03:37.730 --> 00:03:40.890
And we're going to talk about
how we made it all work.

00:03:40.890 --> 00:03:42.150
So let's get on with that quickly.

00:03:42.210 --> 00:03:43.160
We've got a lot to cover.

00:03:46.470 --> 00:03:50.650
So the why is, 20 years ago,
many people in this room are probably

00:03:50.750 --> 00:03:53.440
not old enough to remember that,
but 20 years ago,

00:03:53.760 --> 00:03:55.830
there was huge competition
in wide area networking.

00:03:55.900 --> 00:03:58.550
There were all these different protocols,
and devices from one vendor

00:03:58.550 --> 00:04:01.120
normally wouldn't work with
devices from another vendor.

00:04:01.120 --> 00:04:04.110
And this was obviously
not a good situation.

00:04:04.110 --> 00:04:07.170
And the good news is that
in the last 20 years,

00:04:07.270 --> 00:04:10.230
they've all died,
and the only thing we seriously

00:04:10.260 --> 00:04:13.370
consider these days is TCP IP,
which is great.

00:04:14.910 --> 00:04:16.100
So now let's look at
local communications.

00:04:16.100 --> 00:04:20.370
In the similar era, 10 to 20 years ago,
we had all these different

00:04:20.370 --> 00:04:22.510
connectors on our computer,
and the good news is,

00:04:22.550 --> 00:04:24.980
those have pretty much
died and gone away as well.

00:04:27.990 --> 00:04:27.990
Unfortunately...

00:04:30.640 --> 00:04:33.560
We still have all these
different ways of connecting to

00:04:33.570 --> 00:04:35.660
something like a local printer.

00:04:35.660 --> 00:04:39.140
And as time moves forwards,
the list is getting longer.

00:04:39.360 --> 00:04:41.630
These are not all
technologies that Apple ships,

00:04:41.820 --> 00:04:44.850
but they're all local communication
technologies that are in the

00:04:44.850 --> 00:04:47.680
marketplace that people are
working on and developing.

00:04:48.630 --> 00:04:52.810
So what did they do to solve this
incompatibility problem in the wide area?

00:04:52.810 --> 00:04:56.280
And the answer was they
picked one protocol and said,

00:04:56.280 --> 00:04:59.960
everything talks that protocol, and yeah,
there may be some little

00:05:00.120 --> 00:05:02.810
benefits of another protocol,
but there's a bigger benefit

00:05:02.830 --> 00:05:04.020
in having a standard.

00:05:04.020 --> 00:05:07.080
So we should do the same thing
for local communications.

00:05:07.080 --> 00:05:10.840
And going even further than that,
the protocol for local communication

00:05:10.900 --> 00:05:14.860
should be the same one that is already
won in wide area communications.

00:05:15.850 --> 00:05:20.370
Now when I say that,
a lot of people react by saying, well,

00:05:20.370 --> 00:05:21.740
that's crazy.

00:05:21.740 --> 00:05:24.300
Nobody wants to type in subnet
masks and IP addresses just to

00:05:24.390 --> 00:05:27.590
print on their inkjet printer,
and of course, they don't want to.

00:05:27.590 --> 00:05:31.600
The point is to make it so that you don't
need to do all of that to make IP work.

00:05:33.520 --> 00:05:36.830
So, the answer to solve this problem,
you all know, that's why you're here,

00:05:36.890 --> 00:05:38.370
is Rendezvous.

00:05:38.370 --> 00:05:40.480
And the press has been saying
marvelous things about Rendezvous.

00:05:40.480 --> 00:05:42.200
There are lots and lots
of good stories about it.

00:05:42.230 --> 00:05:46.930
One of my favorite headlines is
"Backstage pass to the future."

00:05:47.020 --> 00:05:49.460
I think that really sums it up.

00:05:50.510 --> 00:05:53.930
Tim O'Reilly, very well known and widely
respected person in the industry,

00:05:54.040 --> 00:05:55.740
said this about Rendezvous.

00:05:55.740 --> 00:05:56.820
"It is truly revolutionary.

00:05:57.010 --> 00:06:00.230
It's one of the things that's going to
have the largest impact on application

00:06:00.230 --> 00:06:02.100
design over the next couple of years.

00:06:02.110 --> 00:06:05.210
We're just at the beginning of
the second internet revolution,

00:06:05.210 --> 00:06:06.900
and Rendezvous is a big part of it.

00:06:06.900 --> 00:06:08.990
You can't get much better than that."

00:06:09.910 --> 00:06:12.740
So here's the quick recap of last year.

00:06:12.770 --> 00:06:14.650
What do you need to do
to do IP networking?

00:06:14.660 --> 00:06:17.440
Well, you need an address,
you need to be able to use names,

00:06:17.440 --> 00:06:20.190
and you need to be able to browse
the network to see what's there.

00:06:20.220 --> 00:06:22.090
Very simple solutions.

00:06:22.090 --> 00:06:24.960
The point of this is to make it simple.

00:06:24.960 --> 00:06:28.670
When you've got a gigahertz
processor and lots of RAM,

00:06:28.730 --> 00:06:32.730
most software problems can
be done with enough effort.

00:06:32.890 --> 00:06:35.670
But when you've got a little inkjet
printer for $50 with a tiny amount

00:06:35.670 --> 00:06:38.380
of firmware and a slow process,
you don't have that luxury.

00:06:39.000 --> 00:06:41.870
So one of our overwhelming
goals of Rendezvous and driving

00:06:41.870 --> 00:06:45.360
principles is making something
that isn't just for Macs and PCs.

00:06:45.360 --> 00:06:47.660
It's for all of the other little
devices out there as well,

00:06:47.660 --> 00:06:50.090
and not just the devices
that currently do networking,

00:06:50.120 --> 00:06:52.950
but many of the devices that don't
do networking at all right now.

00:06:55.990 --> 00:07:00.050
So, in that principle of simplicity,
you need an IP address?

00:07:00.080 --> 00:07:01.500
Pick one at random.

00:07:01.570 --> 00:07:02.660
Send an ARP request?

00:07:02.740 --> 00:07:05.700
If nobody answers,
you can use that address.

00:07:05.770 --> 00:07:06.740
Just like AppleTalk did.

00:07:07.140 --> 00:07:07.680
Very simple.

00:07:07.680 --> 00:07:10.620
There's a range of addresses
reserved by IANA for this purpose,

00:07:10.740 --> 00:07:13.590
and there's an internet draft
describing how to do it,

00:07:13.690 --> 00:07:16.450
and you can find that at zeroconf.org.

00:07:16.490 --> 00:07:20.920
But what I said is pretty much summing
up how you do linked local addressing.

00:07:25.240 --> 00:07:26.750
Link local addressing isn't new.

00:07:26.910 --> 00:07:28.100
You've probably seen it before.

00:07:28.100 --> 00:07:30.780
When you see 169.254
in the control panel,

00:07:30.780 --> 00:07:32.320
you say networking is broken.

00:07:32.350 --> 00:07:34.980
It's understandable
why people think that,

00:07:35.150 --> 00:07:38.060
but they think that because on its own,
a self-assigned address

00:07:38.060 --> 00:07:39.160
isn't very useful.

00:07:39.160 --> 00:07:42.710
In Jaguar, we introduced the rest of the
technologies to make it useful,

00:07:42.710 --> 00:07:45.350
and now you can do things
with that link local address,

00:07:45.350 --> 00:07:48.860
even if you can't communicate with
the global internet and buy books from

00:07:48.860 --> 00:07:51.240
Amazon or do whatever you want like that.

00:07:51.820 --> 00:07:54.390
It's been around since
1998 in Mac and Windows.

00:07:54.390 --> 00:07:54.990
It's in OS X.

00:07:54.990 --> 00:07:55.680
It's in Linux.

00:07:55.690 --> 00:07:56.840
Pretty widespread.

00:07:56.840 --> 00:07:58.960
You might know it under
the names Autonet,

00:07:59.020 --> 00:07:59.490
AutoIP.

00:07:59.620 --> 00:08:03.830
And of course,
IPv6 already has link local addressing.

00:08:03.830 --> 00:08:06.840
Rendezvous works both on v4 and v6.

00:08:11.050 --> 00:08:12.970
So, naming.

00:08:13.100 --> 00:08:14.840
Similar principle as before.

00:08:14.840 --> 00:08:16.910
DHCP is great.

00:08:17.010 --> 00:08:19.340
If you have a DHCP server, that's great,
but if you don't,

00:08:19.340 --> 00:08:20.290
make up your own address.

00:08:20.530 --> 00:08:21.120
Same thing here.

00:08:21.120 --> 00:08:22.850
DNS is great,
and if you have a DNS server,

00:08:22.990 --> 00:08:24.360
there's no reason not to use it.

00:08:24.440 --> 00:08:27.740
But if you just have two computers and
you want to exchange a file and you

00:08:27.800 --> 00:08:31.290
forgot to bring a DNS server with you,
that shouldn't cripple you.

00:08:33.130 --> 00:08:35.210
So,
multicast DNS is how you do name lookups

00:08:35.220 --> 00:08:36.860
when you don't have a DNS server.

00:08:36.860 --> 00:08:40.060
Same packet format, same query syntax,
just multicast it.

00:08:40.170 --> 00:08:44.180
Every device has a little responder,
just like an AppleTalk NBP responder,

00:08:44.180 --> 00:08:47.200
and when it sees a request for its name,
it answers.

00:08:47.200 --> 00:08:49.700
Again, we want to make this very simple.

00:08:52.410 --> 00:08:56.090
The specifications for that,
you can find at multicastdns.org,

00:08:56.270 --> 00:08:58.590
but again,
the description I gave is most of

00:08:58.590 --> 00:09:00.040
what you need to know about it.

00:09:00.100 --> 00:09:04.590
The client has been in since Mac OS 9,
it's in 10 of course, it's in Linux,

00:09:04.590 --> 00:09:07.900
there are several projects,
if you go to .local.org,

00:09:07.920 --> 00:09:11.750
you'll find several people working
on multicast DNS for Linux.

00:09:13.010 --> 00:09:18.600
Microsoft, characteristically vague,
I can say that at the IETF plenary

00:09:18.600 --> 00:09:24.000
presentation last summer in Japan,
they described multicast DNS as

00:09:24.000 --> 00:09:27.740
a vital technology for IPv6 and
said it was under consideration

00:09:27.740 --> 00:09:30.450
and or underway at Microsoft,
so you have to take that

00:09:30.460 --> 00:09:31.670
for what it's worth.

00:09:33.430 --> 00:09:37.640
What this gives us is the ability to
type laser-eye to .local into your web

00:09:37.640 --> 00:09:41.880
browser and connect to the configuration
page of your printer without having to

00:09:41.880 --> 00:09:43.280
know what address it picked for itself.

00:09:43.430 --> 00:09:47.330
So this is a huge step forward over
typing dotted decimal IP addresses,

00:09:47.330 --> 00:09:50.160
but of course,
we're not content to stop there because

00:09:50.240 --> 00:09:53.820
Apple Talk did better than that,
and we want IP to do better than that.

00:09:55.170 --> 00:09:56.200
So we want to raise the bar.

00:09:56.380 --> 00:09:58.700
We want you to be able to find
what's on the network without

00:09:58.700 --> 00:10:01.300
having to know what name to type in.

00:10:02.710 --> 00:10:06.270
Devices, we know,
are going to need link local

00:10:06.360 --> 00:10:08.100
addressing anyway to work usefully.

00:10:08.100 --> 00:10:10.860
They're going to need local
naming to work anyway.

00:10:10.860 --> 00:10:13.960
Rather than add a third,
different body of code

00:10:13.960 --> 00:10:16.620
to do service discovery,
the insight we realized is that

00:10:16.630 --> 00:10:20.430
the multicast DNS code also gives
you service discovery for free.

00:10:20.440 --> 00:10:22.910
For the guys making
the $50 inkjet printer,

00:10:23.030 --> 00:10:23.980
that's a big win.

00:10:24.460 --> 00:10:26.320
I'll explain quickly how that works.

00:10:26.320 --> 00:10:29.230
You do a standard DNS query
for record type PTR,

00:10:29.360 --> 00:10:31.960
and here the query is
semantically saying,

00:10:31.960 --> 00:10:36.160
find me devices on the network that
speak the IPP printing protocol,

00:10:36.230 --> 00:10:40.920
because I'm an IPP printing client,
and that's what I'm looking for.

00:10:40.920 --> 00:10:43.680
You do that query,
and you get back one or more

00:10:43.680 --> 00:10:47.740
responses from the devices on
the network that implement IPP.

00:10:47.740 --> 00:10:53.140
We want these names to be user-friendly,
just like AppleTalk.

00:10:53.200 --> 00:10:54.360
These are structured.

00:10:54.440 --> 00:10:56.460
These are structured
names with three parts,

00:10:56.480 --> 00:10:58.740
and the first part is the
user-friendly name that you

00:10:58.740 --> 00:11:00.330
display in a graph user interface.

00:11:00.330 --> 00:11:02.470
Normal host names in
DNS are limited to letters,

00:11:02.470 --> 00:11:05.020
digits, and hyphens,
and they have to be short because you

00:11:05.070 --> 00:11:06.990
want to type them on a command line.

00:11:07.000 --> 00:11:09.830
But these things you pick in a browser,
so they can be long,

00:11:09.830 --> 00:11:12.790
they can have spaces,
they can have uppercase, lowercase,

00:11:12.800 --> 00:11:14.290
punctuation, full UTF-8.

00:11:14.390 --> 00:11:17.610
You can put kanji characters in
because you don't have to type them.

00:11:17.610 --> 00:11:19.430
You just click on them and list.

00:11:21.850 --> 00:11:24.120
The names are structured
just like the old Apple talk,

00:11:24.120 --> 00:11:25.360
name, type, and zone.

00:11:25.360 --> 00:11:28.220
And here its service
name is the first part.

00:11:28.420 --> 00:11:30.400
The second two labels
are the service type,

00:11:30.480 --> 00:11:32.740
in other words,
the protocol name of the service.

00:11:32.740 --> 00:11:34.760
And the remainder is the domain.

00:11:54.050 --> 00:11:54.080
The names are structured
just like the old Apple talk,

00:11:54.080 --> 00:11:54.080
name, type, and zone.

00:11:54.080 --> 00:11:54.080
And here its service
name is the first part.

00:11:54.080 --> 00:11:54.080
The second two labels
are the service type,

00:11:54.080 --> 00:11:54.080
in other words,
the protocol name of the service.

00:11:54.080 --> 00:11:54.080
And here its service
name is the first part.

00:11:54.080 --> 00:11:54.080
The remainder is the service.

00:11:58.050 --> 00:11:59.230
Service types.

00:11:59.250 --> 00:12:00.780
Important point here.

00:12:01.050 --> 00:12:03.690
A service is identified
by the protocol it speaks.

00:12:04.010 --> 00:12:06.630
Human beings think in terms
of objects like printers,

00:12:06.630 --> 00:12:10.190
but from a software point of view,
if you've got an IPP client,

00:12:10.200 --> 00:12:13.400
what you're interested in is
finding things that speak IPP.

00:12:13.400 --> 00:12:16.090
Some of them may be printers,
some may not.

00:12:16.160 --> 00:12:18.870
There may be printers that don't
speak IPP and you can't talk to them.

00:12:18.890 --> 00:12:22.390
It's no benefit finding
something you can't talk to.

00:12:22.400 --> 00:12:25.160
At the network level,
what you're looking for is

00:12:25.160 --> 00:12:28.670
the software entities that
implement a particular protocol,

00:12:28.940 --> 00:12:30.240
not bits of hardware.

00:12:30.290 --> 00:12:32.750
That's an important point
because many service discovery

00:12:32.750 --> 00:12:34.000
protocols get that wrong.

00:12:34.000 --> 00:12:36.000
They look for hardware and
then having found the hardware,

00:12:36.000 --> 00:12:37.840
you're not quite sure what it
does and then you have to go

00:12:37.840 --> 00:12:39.200
through a whole negotiation phase.

00:12:41.890 --> 00:12:44.110
So having found the names of
the services on the network,

00:12:44.150 --> 00:12:45.520
what is it that we found the name of?

00:12:45.550 --> 00:12:49.710
And the answer is in DNS,
we found the name of a service record and

00:12:49.710 --> 00:12:52.140
a text record describing that service.

00:12:52.140 --> 00:12:56.100
So when it's time to print,
you want to know the IP address and port

00:12:56.100 --> 00:12:58.320
number where that service can be reached.

00:12:59.520 --> 00:13:02.750
Now, with DHCP, or link local addressing,
the addresses might not be

00:13:02.750 --> 00:13:04.530
the same from day to day,
just like AppleTalk.

00:13:04.580 --> 00:13:08.020
So when the user picks a default printer,
we don't save the IP address,

00:13:08.020 --> 00:13:10.180
because that might be wrong tomorrow.

00:13:10.180 --> 00:13:12.840
What we save is the Rendezvous name,
and then on demand,

00:13:12.840 --> 00:13:15.440
we resolve that for an
address by doing this query.

00:13:16.210 --> 00:13:20.060
And the answer we get back is that the
sales printing service today can be

00:13:20.230 --> 00:13:23.170
found on port 631 at myprinter.local.

00:13:23.180 --> 00:13:25.620
It's a PostScript printer,
so its page description

00:13:25.640 --> 00:13:27.000
language is PostScript.

00:13:28.370 --> 00:13:31.200
And the clever thing about DNS is it
can give you answers you didn't ask

00:13:31.200 --> 00:13:34.320
for if it thinks that you're likely
to need to know that information.

00:13:34.360 --> 00:13:35.590
It saves you asking another question.

00:13:35.720 --> 00:13:38.550
And in this case, the responder said,
well, you didn't ask for the address

00:13:38.550 --> 00:13:41.080
of printer.local because you
didn't know it was printer.local

00:13:41.080 --> 00:13:43.560
when you asked the question,
but you're going to want to know that,

00:13:43.640 --> 00:13:45.220
so I'll give you the answer anyway.

00:13:45.220 --> 00:13:47.880
So there you see the address has
been put in the packet automatically.

00:13:47.880 --> 00:13:50.270
So one query, one response,
you have the information you

00:13:50.370 --> 00:13:51.800
need to print on that printer.

00:13:53.790 --> 00:13:57.750
This was launched with great
fanfare last year in Jaguar.

00:13:57.750 --> 00:14:01.380
It's in Darwin,
so it's very easy to get it and

00:14:01.460 --> 00:14:03.020
run it on any platform you want.

00:14:03.070 --> 00:14:05.710
There are also other
independent implementations

00:14:05.910 --> 00:14:08.680
completely separate from Apple,
which is great.

00:14:08.700 --> 00:14:12.610
Just like the others,
specification is freely available,

00:14:12.610 --> 00:14:16.870
and you can get it from dns-sd
for dnsservicediscovery.org.

00:14:19.730 --> 00:14:22.530
So, that was the recap of
where we were last year.

00:14:22.830 --> 00:14:23.780
What's happened since then?

00:14:25.310 --> 00:14:27.290
We shipped Jaguar,
and we shipped a few bits of

00:14:27.380 --> 00:14:29.160
software that we're using Rendezvous.

00:14:29.160 --> 00:14:31.330
iChat is an obvious example.

00:14:31.430 --> 00:14:33.450
Finding network printers
is another obvious example,

00:14:33.550 --> 00:14:35.720
although this time last year,
there weren't many Rendezvous

00:14:35.730 --> 00:14:36.620
printers on the market.

00:14:36.640 --> 00:14:37.830
That's changed dramatically.

00:14:39.520 --> 00:14:42.560
Finding Apple Share servers
is another example.

00:14:42.600 --> 00:14:46.400
Since then, we've done some more updates,
and we've advertised some more services.

00:14:46.400 --> 00:14:49.070
You will see HTTP,
when you turn on personal web sharing,

00:14:49.070 --> 00:14:50.820
you'll see it showing up in Safari.

00:14:50.820 --> 00:14:54.480
You might say that too many of
them are showing up in Safari.

00:14:54.480 --> 00:14:56.410
It kind of shows how many
people have accidentally

00:14:56.410 --> 00:14:58.950
turned on personal web sharing,
but don't actually have a web page

00:14:59.060 --> 00:15:00.770
there that they're intending to share.

00:15:03.100 --> 00:15:05.910
Apple has shipped hardware
products using Rendezvous.

00:15:06.100 --> 00:15:08.780
The obvious candidates are the ones
that don't have a screen and keyboard,

00:15:08.780 --> 00:15:10.960
so the only way to find
them is over the network,

00:15:11.060 --> 00:15:12.200
and you need to be able to do that.

00:15:12.260 --> 00:15:15.360
No matter how busted the network is,
you need to be able to find it.

00:15:15.440 --> 00:15:17.930
If the airport base station
is your DHCP server,

00:15:17.980 --> 00:15:21.520
then you don't have DHCP until you've
connected to it to turn on DHCP,

00:15:21.530 --> 00:15:23.830
so there's a bootstrap problem there.

00:15:25.440 --> 00:15:27.430
Software products,
you've all seen Safari,

00:15:27.430 --> 00:15:30.350
you've all seen iTunes,
the Shake network video

00:15:30.350 --> 00:15:35.020
transcoding software is another
thing that uses Rendezvous.

00:15:35.020 --> 00:15:37.560
A lot of products from third parties.

00:15:37.560 --> 00:15:41.420
It's absolutely amazing to me
for a technology to get this

00:15:41.420 --> 00:15:43.740
much adoption in just one year.

00:15:43.740 --> 00:15:47.080
I can't think of any other new technology
that's had such an overnight success.

00:15:47.300 --> 00:15:51.400
And I think that says a lot about
the cost-benefit ratio of Rendezvous.

00:15:51.600 --> 00:15:54.560
It is so easy to do,
and the benefit is so immediate

00:15:54.560 --> 00:15:58.940
and so obvious that there is really
no reason not to use Rendezvous.

00:15:58.940 --> 00:16:02.390
Anywhere that you do networking,
you're looking for service,

00:16:02.390 --> 00:16:05.780
you're providing a service,
adding those few extra lines to do

00:16:05.780 --> 00:16:07.910
Rendezvous is such an obvious win.

00:16:07.920 --> 00:16:12.710
So printers were the first candidates
because Apple-taught printers were

00:16:12.710 --> 00:16:15.880
the mainstay of network printing,
and those were the

00:16:16.000 --> 00:16:17.280
first people to jump on.

00:16:17.300 --> 00:16:19.180
board rendezvous.

00:16:19.660 --> 00:16:22.600
Got some other little bits of hardware,
which I'll show you later on.

00:16:22.600 --> 00:16:25.520
TiVo's in the home, great example.

00:16:25.770 --> 00:16:29.660
You have music and photos on your Mac,
and you don't want to sit around

00:16:29.740 --> 00:16:31.700
the computer to watch them,
you want to sit in the living

00:16:31.700 --> 00:16:32.900
room and watch them on the TV.

00:16:32.900 --> 00:16:36.190
I talked about TiVo last year as
a purely hypothetical example of

00:16:36.190 --> 00:16:39.020
something I thought would be good,
and the great news is

00:16:39.070 --> 00:16:41.650
that they actually did it,
and less than a year later

00:16:41.730 --> 00:16:44.800
they're shipping that as a
real product to customers.

00:16:46.600 --> 00:16:49.910
Chaparral RAID, just like XSERV RAID,
another example of a headless device.

00:16:49.910 --> 00:16:52.710
Martian NetDrive is
another great product,

00:16:52.710 --> 00:16:58.490
little box, $400, put it in your garage,
turn it on, it's a network file server.

00:16:58.500 --> 00:17:00.560
No screen, no keyboard,
it just shows up on the network.

00:17:00.560 --> 00:17:03.890
You configure it through Safari,
which shows up automatically

00:17:03.890 --> 00:17:06.200
using Rendezvous,
and it gives you a place to

00:17:06.430 --> 00:17:09.220
store the data in your house,
so your computer doesn't have

00:17:09.320 --> 00:17:10.980
to be turned on all the time.

00:17:13.180 --> 00:17:19.180
Lots and lots of software products,
network databases, games,

00:17:19.490 --> 00:17:24.100
Hydra is a great example,
I'll show you that in a minute as well.

00:17:24.100 --> 00:17:29.300
FTP, clients and servers,
lots and lots of software things

00:17:29.390 --> 00:17:31.970
because it's so easy to do.

00:17:32.410 --> 00:17:34.300
We have Rendezvous on other platforms.

00:17:34.310 --> 00:17:38.450
The Crocodile Rendezvous FTP server
for Windows advertises using

00:17:38.450 --> 00:17:42.460
Rendezvous on Windows and shows
up in the FTP Rendezvous menus on

00:17:42.460 --> 00:17:44.920
all FTP clients on Mac and Windows.

00:17:46.470 --> 00:17:50.260
Swamp Wolf has taken the
Apple Darwin code and done some

00:17:50.260 --> 00:17:53.480
extra work on that to turn it
into a system service for Windows,

00:17:53.480 --> 00:17:55.630
and I hope to show you
that a bit later as well.

00:17:55.640 --> 00:18:03.020
JRendezvous is an implementation of
Rendezvous written in pure native Java.

00:18:03.020 --> 00:18:07.810
Interesting exercise in
showing what Java can do.

00:18:09.450 --> 00:18:11.790
And the people doing that are
running it on cell phones,

00:18:11.890 --> 00:18:12.540
apparently.

00:18:12.540 --> 00:18:15.730
They have cell phones that
have a Java engine in them,

00:18:15.750 --> 00:18:18.260
and so everything you
write has to be in Java.

00:18:18.260 --> 00:18:21.860
I don't know about their product plans,
but we can only speculate about

00:18:21.860 --> 00:18:23.350
where that might be going.

00:18:23.360 --> 00:18:26.350
There's apparently a
version in Python as well.

00:18:26.350 --> 00:18:29.540
Lots of things that people are doing.

00:18:29.540 --> 00:18:33.880
And Linux, as always, has a lot of open
source efforts going on.

00:18:33.940 --> 00:18:36.990
Dotlocal.org is an interesting
resource for the Linux work.

00:18:38.510 --> 00:18:41.330
So, time for some demos.

00:18:42.660 --> 00:18:48.310
Let's go to number four, please.

00:18:58.070 --> 00:19:02.320
So, let's plug in and see what
we have on this network.

00:19:08.300 --> 00:19:17.900
[Transcript missing]

00:19:22.600 --> 00:19:29.040
Okay, first thing,
we have a Brother printer here,

00:19:29.040 --> 00:19:31.480
one of the first companies
to ship a Rendezvous printer.

00:19:31.480 --> 00:19:34.110
Let's turn that on.

00:19:43.870 --> 00:19:46.800
Okay, well that's,
okay we have a link light,

00:19:46.800 --> 00:19:48.910
I'll give that a second.

00:19:50.580 --> 00:19:53.390
So if you're buying a printer now,
pretty much all the printer vendors

00:19:53.750 --> 00:19:56.270
have printers with Rendezvous built in.

00:19:56.270 --> 00:19:58.500
But if you have an old one lying
around that doesn't have Rendezvous,

00:19:58.500 --> 00:20:04.160
this is a great little product from SEH,
Intercom Network Print Server.

00:20:04.160 --> 00:20:07.180
This little box here
implements a print server.

00:20:07.180 --> 00:20:11.340
So I plug it into the parallel
port on this old printer here.

00:20:11.340 --> 00:20:15.660
This is just an obsolete printer I found
lying around in the corridors at Apple.

00:20:15.660 --> 00:20:18.080
The reason you know it's obsolete is
because it doesn't have Rendezvous.

00:20:18.080 --> 00:20:21.730
but there's hope for it
because we have this.

00:20:37.740 --> 00:20:40.690
So this is the brother,
took a minute just to power on.

00:20:40.700 --> 00:20:46.370
And just like that,
without knowing what address

00:20:46.460 --> 00:20:52.350
it picked for itself,
we're now connected to its status page.

00:20:52.690 --> 00:20:57.690
We can view the toner levels and view
all of its configuration information.

00:20:57.730 --> 00:21:00.270
So, easy one-click connection.

00:21:00.410 --> 00:21:03.710
I plugged in the Intercon print server,
and it shows up as well.

00:21:03.750 --> 00:21:05.850
And that's it.

00:21:07.290 --> 00:21:09.470
When I was bringing all this
equipment and setting it up,

00:21:09.740 --> 00:21:12.270
the conference organizers were saying,
"You're mad.

00:21:12.280 --> 00:21:13.150
You can't do this.

00:21:13.300 --> 00:21:14.750
This is not the keynote.

00:21:14.830 --> 00:21:16.160
You don't have two hours to set up.

00:21:16.160 --> 00:21:18.030
You've got 15 minutes
between sessions." I said,

00:21:18.030 --> 00:21:18.760
"It's okay, guys.

00:21:18.760 --> 00:21:19.900
It's Rendezvous.

00:21:20.000 --> 00:21:22.230
I don't need to set it up."

00:21:29.690 --> 00:21:32.790
So we'll see whether they were right.

00:21:32.810 --> 00:21:35.600
This is something I love.

00:21:35.640 --> 00:21:38.430
I have to tell you about this.

00:21:40.530 --> 00:21:43.140
People who work in data centers are
probably familiar with all the equipment

00:21:43.140 --> 00:21:47.200
in the 19-inch racks that's got serial
ports on it for configuration and setup.

00:21:47.200 --> 00:21:49.880
And we don't have serial ports
on our computers anymore,

00:21:49.930 --> 00:21:52.850
so you end up needing one of
these USB to serial adapters.

00:21:52.920 --> 00:21:54.810
Well, this is like that,
except this is an Ethernet

00:21:54.890 --> 00:21:55.710
to serial adapter.

00:21:55.800 --> 00:21:59.560
And you just take this and plug this
into the serial port on whatever

00:21:59.560 --> 00:22:03.440
device you want to configure,
and it advertises Telnet service.

00:22:03.460 --> 00:22:06.320
So now you don't have to run serial
wires all over your data center,

00:22:06.400 --> 00:22:08.260
it's just on the network
like anything else,

00:22:08.330 --> 00:22:09.470
and you can Telnet to it.

00:22:10.140 --> 00:22:13.710
And I forget the price of these,
I think these are about $50.

00:22:13.750 --> 00:22:15.930
These are even cheaper than
USB to serial adapters,

00:22:15.930 --> 00:22:17.110
and this does Ethernet.

00:22:17.120 --> 00:22:20.360
This is, it's called SitePlayer.

00:22:20.380 --> 00:22:22.560
If you go to siteplayer.com.

00:22:22.560 --> 00:22:24.340
Sorry?

00:22:26.740 --> 00:22:32.900
I think SitePlayer is the place to look.

00:22:35.640 --> 00:22:36.600
All right, good.

00:22:36.610 --> 00:22:38.500
Yep.

00:22:38.620 --> 00:22:41.390
Site, S-I-T-E-P-L-A-Y-E-R.

00:22:41.400 --> 00:22:43.680
In fact, why don't I plug it
in and then we'll see.

00:22:45.390 --> 00:22:47.480
So plug it in, light is on.

00:22:47.640 --> 00:22:52.020
Okay, this thing has 16K of flash memory.

00:22:52.350 --> 00:22:57.040
And in that 16K,
the guys implemented TCP, IP, UDP, ARP,

00:22:57.130 --> 00:23:03.220
DHCP client, DNS client, Rendezvous,
web server, Telnet server.

00:23:03.220 --> 00:23:06.730
Okay, and of...

00:23:12.900 --> 00:23:16.920
And of that 16K,
9K of it is the HTML text

00:23:17.340 --> 00:23:18.060
of the web pages.

00:23:18.060 --> 00:23:21.020
So he's got 7K for code.

00:23:21.060 --> 00:23:22.980
And this is not even assembly code,
this is C.

00:23:23.090 --> 00:23:25.690
Absolutely incredible.

00:23:26.300 --> 00:23:32.400
[Transcript missing]

00:23:32.840 --> 00:23:38.300
Click it,
and Safari should open a window.

00:23:39.270 --> 00:23:47.320
And just like that, we connected to it,
have access to its configuration page.

00:23:47.320 --> 00:23:47.320
So, we

00:23:49.510 --> 00:23:56.560
Rendezvous is all about enabling IP.

00:23:56.560 --> 00:24:01.050
In as much as you can run IP over USB,
which you can do with various products

00:24:01.570 --> 00:24:05.740
that I think emulate Ethernet over USB,
then Rendezvous just works

00:24:05.780 --> 00:24:07.580
transparently like any other IP device.

00:24:07.640 --> 00:24:10.380
But if you've got a device
that doesn't speak IP,

00:24:10.390 --> 00:24:14.350
then it's kind of operating
in a different world.

00:24:16.280 --> 00:24:20.210
Things like this Intercon print
server are the kind of gateway

00:24:20.210 --> 00:24:25.770
from the IP world to that world.

00:24:28.750 --> 00:24:30.530
I was going to bring
some equipment with me,

00:24:30.530 --> 00:24:34.480
but unfortunately most of the things
these days that use serial ports kind of

00:24:34.600 --> 00:24:38.430
fit in 19-inch racks and are a bit bulky,
but this is one thing I found at home.

00:24:38.440 --> 00:24:40.470
This is a little voice-over IP product.

00:24:40.580 --> 00:24:43.460
It's got Ethernet on it,
but you have to connect a serial

00:24:43.540 --> 00:24:47.390
port with a terminal to configure it,
so this is a great thing for

00:24:47.850 --> 00:24:49.460
connecting to the site player.

00:24:49.460 --> 00:24:51.100
Maybe we'll get time to
look at that more later.

00:24:51.100 --> 00:24:53.880
I think that's for this round of demos.

00:24:53.880 --> 00:24:56.580
Let's go back to the slides, please.

00:25:11.260 --> 00:25:15.100
Alright, so what new features do we
have to offer you in Panther?

00:25:15.100 --> 00:25:19.100
Jaguar had IPv6 support in the kernel,
but Rendezvous didn't use it.

00:25:19.100 --> 00:25:21.080
The good news now is that
Rendezvous is using it.

00:25:21.110 --> 00:25:27.100
It sends its queries over v4 and v6,
and it will advertise services

00:25:27.100 --> 00:25:31.000
that are running on v4 and v6.

00:25:31.000 --> 00:25:31.000
So,

00:25:31.170 --> 00:25:33.770
When you resolve,
you can now expect to be getting

00:25:33.770 --> 00:25:36.610
V6 SOC adders back as well as V4,
and you should pay attention

00:25:36.690 --> 00:25:37.360
to that in your code.

00:25:37.420 --> 00:25:38.500
Don't assume it's always V4.

00:25:40.290 --> 00:25:43.320
We have subtype browsing
for more selective queries,

00:25:43.320 --> 00:25:44.310
that's described in the drafts.

00:25:44.440 --> 00:25:45.960
We have a lot of
performance improvements,

00:25:46.080 --> 00:25:51.930
both in terms of CPU performance,
and in terms of smarter algorithms

00:25:52.100 --> 00:25:53.550
to use the network more efficiently.

00:25:53.560 --> 00:25:56.080
These were things that we all
had planned on the roadmap,

00:25:56.160 --> 00:25:57.600
but didn't make it into Jaguar.

00:25:57.600 --> 00:26:01.510
We have a cool feature that gives you
faster purging of stale cache data,

00:26:01.510 --> 00:26:03.690
which has been very widely requested.

00:26:03.700 --> 00:26:05.600
I'll talk a bit more about that.

00:26:05.680 --> 00:26:09.500
Network administrators last year at the
feedback forum asked us for a way to

00:26:09.500 --> 00:26:11.400
enumerate all services on the network.

00:26:11.490 --> 00:26:15.410
Now, for a software vendor,
finding everything on the

00:26:15.510 --> 00:26:18.350
network isn't very useful if
you can't communicate with it.

00:26:18.420 --> 00:26:20.810
It's only useful to find things that
you know how to communicate with.

00:26:20.950 --> 00:26:23.940
But for an administration point of view,
finding everything on

00:26:23.940 --> 00:26:25.260
the network is useful.

00:26:25.260 --> 00:26:28.640
So we had to work out a way to do
that that was elegant and efficient,

00:26:28.640 --> 00:26:31.040
and we did do that,
so that's now in Panther.

00:26:32.660 --> 00:26:36.150
We have a bunch of new client
applications using Rendezvous services,

00:26:36.150 --> 00:26:39.550
and we have some slight improvements
to the APIs that reflect feedback we

00:26:39.550 --> 00:26:41.250
got from developers over the last year.

00:26:45.610 --> 00:26:47.730
One of the trade-offs
in any network protocol,

00:26:47.730 --> 00:26:50.910
including Rendezvous,
is if you're going to present a

00:26:50.910 --> 00:26:54.260
list of resources on the network,
you have a trade-off between

00:26:54.260 --> 00:26:57.270
the timeliness of that data
and the accuracy of it,

00:26:57.270 --> 00:26:59.640
and how quickly you poll the network.

00:26:59.720 --> 00:27:02.340
And if you're willing to poll
the network once a second,

00:27:02.420 --> 00:27:06.020
you can have very up-to-date data,
but of course, that would be bad.

00:27:06.060 --> 00:27:09.770
So, we tried to make Rendezvous very
efficient on the network and very

00:27:09.890 --> 00:27:11.660
frugal with its use of packets.

00:27:11.700 --> 00:27:15.380
And that means it will cache data
typically for up to two hours.

00:27:15.420 --> 00:27:17.820
And what that means is that
if you shut down your Mac,

00:27:17.820 --> 00:27:20.530
gracefully it sends a goodbye
packet and it disappears from

00:27:20.550 --> 00:27:21.960
everybody's browser list.

00:27:22.040 --> 00:27:24.490
But if you just yank the Ethernet
cable out of the printer,

00:27:24.490 --> 00:27:26.760
it doesn't get a chance to
send the goodbye packet.

00:27:26.760 --> 00:27:30.820
And people see these stale entries
showing up in the browser list,

00:27:30.860 --> 00:27:32.560
and that's frustrating.

00:27:32.640 --> 00:27:35.240
Because they see the printer,
they try to print, they get an error.

00:27:35.240 --> 00:27:36.620
They go back to the list,
it's still there.

00:27:36.620 --> 00:27:37.970
They try again, they get another error.

00:27:37.980 --> 00:27:38.990
Very frustrating.

00:27:39.000 --> 00:27:42.390
So, what we do now is we don't
continually poll the network,

00:27:42.390 --> 00:27:44.040
because that would be bad.

00:27:44.760 --> 00:27:48.650
But when you try to print
or use a service and fail,

00:27:48.650 --> 00:27:52.730
then internally the code kind
of asks itself a question.

00:27:52.770 --> 00:27:55.580
It says, well,
why were they trying to use that service?

00:27:55.580 --> 00:27:57.310
Well, maybe it's because it's
in the browser list.

00:27:57.400 --> 00:27:59.020
And if it didn't respond,
then maybe it shouldn't

00:27:59.020 --> 00:27:59.890
be in the browser list.

00:27:59.920 --> 00:28:03.590
So, the time to live on that
cache entry shortened from two

00:28:03.590 --> 00:28:05.570
hours down to a few seconds.

00:28:05.580 --> 00:28:09.610
The machine sends a couple of queries,
and if it doesn't get an answer,

00:28:09.710 --> 00:28:12.740
then it's flush from the
cache and it disappears.

00:28:12.740 --> 00:28:14.660
And that produces a dramatic difference.

00:28:14.660 --> 00:28:16.170
In user perception.

00:28:16.180 --> 00:28:20.200
They see the stale printer,
they try to print, it doesn't work.

00:28:20.350 --> 00:28:22.420
They go back to the list,
and it's not there anymore.

00:28:22.420 --> 00:28:24.270
Somebody must have just
turned the printer off.

00:28:24.360 --> 00:28:26.030
Now, that's not actually what happened.

00:28:26.120 --> 00:28:28.050
It was actually turned
off half an hour ago.

00:28:28.060 --> 00:28:31.420
But the important thing,
this is very important from a sort

00:28:31.420 --> 00:28:35.130
of human factors point of view,
is that the person has a consistent

00:28:35.230 --> 00:28:37.060
mental model for what happened.

00:28:37.060 --> 00:28:40.680
And then they're not frustrated,
because at least it makes sense to them.

00:28:42.150 --> 00:28:45.120
What going even beyond that,
when the other machines on the

00:28:45.260 --> 00:28:49.440
network see you do a couple of
queries and not get any answer,

00:28:49.720 --> 00:28:52.400
then they also conclude that that
data must be stale and delete

00:28:52.400 --> 00:28:53.620
it from their caches as well.

00:28:53.620 --> 00:28:56.280
So only one person has to try
to access the stale printer,

00:28:56.280 --> 00:28:59.060
and everybody gets the benefit
of having it disappear.

00:28:59.060 --> 00:29:01.880
So big improvement in user
experience there without any

00:29:01.880 --> 00:29:04.140
extra packets on the wire,
which is great.

00:29:12.610 --> 00:29:15.190
One of the future plans,
I said this only works right now

00:29:15.190 --> 00:29:18.830
with .local with local multicast,
but we are planning,

00:29:18.830 --> 00:29:20.720
I'm not announcing any
dates or time table here,

00:29:20.720 --> 00:29:23.930
but we are planning to do
this globally using unicast,

00:29:23.980 --> 00:29:26.440
DNS queries, and DNS dynamic update.

00:29:26.490 --> 00:29:28.360
So bear that in mind
when writing your code.

00:29:28.360 --> 00:29:30.840
Don't assume that the domain
will always be .local.

00:29:33.510 --> 00:29:37.280
Okay, so back to number four, please.

00:29:46.680 --> 00:29:53.460
So one of my earliest memories of
computing when I was very young was

00:29:53.920 --> 00:29:59.240
the big teletype machines that printed
out on rolls of paper at 110 board.

00:29:59.260 --> 00:30:02.050
And that was how everybody
connected to the Unix mainframe

00:30:02.150 --> 00:30:04.070
was over these serial connections.

00:30:04.090 --> 00:30:09.430
And the DNA of that kind
of lives on in OS X.

00:30:09.430 --> 00:30:14.570
Terminal may actually be the oldest
DNA in that sense that's in OS X.

00:30:14.680 --> 00:30:17.030
And this is emulating a
roll of paper on a teletype.

00:30:17.100 --> 00:30:22.060
And there are lots of things
using Rendezvous in Panther,

00:30:22.060 --> 00:30:25.540
but I thought going all the way back
to the start would be interesting.

00:30:25.540 --> 00:30:29.740
So can something as ancient as
this benefit from Rendezvous?

00:30:29.740 --> 00:30:32.240
And this is pretty neat.

00:30:32.570 --> 00:30:35.270
Command-Shift-K,
and we've got a little server list.

00:30:35.340 --> 00:30:42.070
And right there is Telnet
connection to this site player box.

00:30:46.690 --> 00:30:51.170
Let's put it into character mode
and let's plug it into this piece of

00:30:51.270 --> 00:30:54.550
prehistoric hardware I was talking about.

00:30:54.730 --> 00:30:58.600
Getting this demo set up was the
hardest demo of everything I did.

00:30:58.600 --> 00:31:02.580
And if you remember using serial ports,
it's this stack of gender changes

00:31:02.610 --> 00:31:08.600
and DC and DTE and CTSRTS,
X on, X off, board rates.

00:31:08.600 --> 00:31:10.600
And you type stuff and nothing happens.

00:31:10.600 --> 00:31:12.570
And you know, is it turned on?

00:31:12.900 --> 00:31:16.350
But I finally found a
combination that works.

00:31:17.020 --> 00:31:20.560
Let's power this guy on
and see what happens.

00:31:20.590 --> 00:31:21.990
All right.

00:31:22.110 --> 00:31:25.930
So, you know, we can set its IP address,
we can reboot it,

00:31:26.010 --> 00:31:28.550
we can let it do its thing,
and this could be something over

00:31:28.550 --> 00:31:31.790
the other side of the data center,
and you just telnet to it, and in fact,

00:31:31.800 --> 00:31:35.240
all of the serial ports in your data
center just show up as things here.

00:31:35.240 --> 00:31:44.050
So... All right, thank you.

00:31:44.060 --> 00:31:44.730
Back to the slides.

00:31:54.460 --> 00:31:56.270
So, what new APIs do we have?

00:31:56.280 --> 00:31:58.630
The good news is,
they're modest improvements,

00:31:58.690 --> 00:32:00.450
they're not things that are
going to require you to gut

00:32:00.450 --> 00:32:01.380
your code and change it.

00:32:01.420 --> 00:32:05.400
NSNet Services is unchanged,
CFNet Services is unchanged.

00:32:05.400 --> 00:32:10.420
We've made some minor updates to the
low-level DNS service discovery APIs,

00:32:10.510 --> 00:32:13.430
but the old calls are still supported,
so your current applications

00:32:13.500 --> 00:32:15.320
will continue to work.

00:32:15.740 --> 00:32:20.570
Just to remind you of the architecture,
on top of the kernel at the lowest

00:32:20.570 --> 00:32:23.760
level is the MDNES responder daemon
that implements the protocol.

00:32:23.760 --> 00:32:27.350
The DNS service discovery
APIs communicate with that daemon

00:32:27.470 --> 00:32:30.790
to communicate what services
you want to register and what

00:32:30.790 --> 00:32:32.740
things you want to browse for.

00:32:32.800 --> 00:32:36.680
Led on top of that is the
core foundation CFNet service,

00:32:36.680 --> 00:32:40.320
and led on top of that is
the Cocoa NSNet service.

00:32:40.340 --> 00:32:46.320
Depending on whether you're writing a
Cocoa application or a raw BSD command

00:32:46.420 --> 00:32:50.190
line tool influences which of
those APIs you would want to use.

00:32:50.200 --> 00:32:52.680
That's really a personal preference.

00:32:52.760 --> 00:32:55.780
But at the low level...

00:32:56.470 --> 00:33:00.530
The new DNS service, Register Call,
offers a few improvements.

00:33:00.650 --> 00:33:05.010
Some people need to advertise
services on a specific interface

00:33:05.090 --> 00:33:06.390
on multi-home machines.

00:33:06.460 --> 00:33:08.960
This is not common,
but if you want to do that,

00:33:08.960 --> 00:33:10.990
you can now specify an interface.

00:33:11.280 --> 00:33:14.320
When you pass empty string
for the name to register,

00:33:14.360 --> 00:33:16.620
the system will use the
default name for you.

00:33:16.700 --> 00:33:19.390
But you don't know what that name is.

00:33:19.480 --> 00:33:21.000
That's kind of the point
of passing empty string,

00:33:21.000 --> 00:33:22.380
is it saves you needing
to know what it is.

00:33:22.410 --> 00:33:25.800
But if you're writing an application
where you want to filter yourself out

00:33:25.800 --> 00:33:28.790
of the list of results you get back,
knowing what name the machine

00:33:28.790 --> 00:33:30.200
picked for you is useful.

00:33:30.230 --> 00:33:30.940
So we've added that.

00:33:31.460 --> 00:33:33.770
We've raised the limit
on text record size.

00:33:33.770 --> 00:33:36.200
The guidance for text
records remains the same.

00:33:36.200 --> 00:33:39.340
They're intended to be a few
bytes of ancillary information.

00:33:39.340 --> 00:33:44.220
But we did have some applications that
legitimately needed a little bit more,

00:33:44.300 --> 00:33:47.510
and the text record was,
when we thought about it,

00:33:47.730 --> 00:33:51.200
the correct way to solve
that application's problem.

00:33:51.200 --> 00:33:52.800
So we've raised that limit a little bit.

00:33:52.930 --> 00:33:55.840
We don't want to raise it above 1400,
because we want these things to

00:33:55.940 --> 00:33:57.310
fit in single Ethernet packets.

00:33:57.310 --> 00:34:00.600
Things get much less efficient when
you have to fragment the IP packets.

00:34:02.920 --> 00:34:06.720
Text records can contain
arbitrary binary data.

00:34:06.720 --> 00:34:10.290
That was almost true in the past,
except ASCII 1 was used as a delimiter.

00:34:10.300 --> 00:34:12.770
Now, it's just an opaque blob of data.

00:34:12.810 --> 00:34:15.090
It's passed as a pointer
to data and length,

00:34:15.090 --> 00:34:17.160
so you can pass true binary data now.

00:34:18.270 --> 00:34:21.210
And we've added a new facility,
which came as a request

00:34:21.390 --> 00:34:24.430
from the printing industry,
for what we call placeholder

00:34:24.550 --> 00:34:26.060
names or flagship names.

00:34:26.060 --> 00:34:28.850
And the idea there is,
if you have a printer

00:34:29.000 --> 00:34:32.060
that offers IPP printing,
and you call it sales,

00:34:32.190 --> 00:34:35.740
and you have another printer
that also offers printing,

00:34:35.850 --> 00:34:39.140
but it's using PDL data
stream protocol instead,

00:34:39.140 --> 00:34:42.180
each service is its own namespace.

00:34:42.180 --> 00:34:44.010
And most of the time, this is good.

00:34:44.130 --> 00:34:46.350
You can have a file server
called sales department and a

00:34:46.350 --> 00:34:48.010
printer called sales department.

00:34:48.140 --> 00:34:50.030
And that's not a conflict,
because they're different things.

00:34:50.030 --> 00:34:53.600
But having two printers called
sales department is confusing.

00:34:53.600 --> 00:34:56.380
So the printer guy said,
when we register a printer

00:34:57.080 --> 00:35:00.430
name called sales department,
we want to know that no one

00:35:00.610 --> 00:35:03.680
else is using that name,
not just for IPP printing,

00:35:03.720 --> 00:35:05.880
but for any kind of printing.

00:35:05.880 --> 00:35:10.140
And the solution to that problem is
that for each family of protocols,

00:35:10.140 --> 00:35:13.040
like printing,
one protocol is picked as kind of

00:35:13.090 --> 00:35:15.510
the flagship protocol of the fleet.

00:35:15.560 --> 00:35:18.040
And even if you don't implement that,
you can still print.

00:35:18.040 --> 00:35:22.370
And if you don't implement that protocol,
you register a service, a fake service,

00:35:22.490 --> 00:35:25.440
with a port number of zero
for the flagship protocol.

00:35:25.440 --> 00:35:29.480
So a printer that only speaks
IPP would also register an LPR printing

00:35:29.480 --> 00:35:31.420
service with no port number.

00:35:31.420 --> 00:35:33.960
It won't show up in any
browser lists when people are

00:35:34.030 --> 00:35:35.630
browsing for LPR printers.

00:35:35.640 --> 00:35:37.860
But if another printer
tries to register that name,

00:35:37.910 --> 00:35:39.850
it will get a name conflict,
and it will be told,

00:35:39.970 --> 00:35:42.240
you can't have that name
because that's in use.

00:35:42.240 --> 00:35:46.120
So this allows protocols to be
grouped into families that kind

00:35:46.180 --> 00:35:47.940
of are conceptually common.

00:35:47.940 --> 00:35:49.780
functionality even though
they're a different protocol.

00:35:51.550 --> 00:35:54.910
Browsing, again,
if you want to pick a specific interface,

00:35:54.910 --> 00:35:55.460
you can.

00:35:55.460 --> 00:36:00.930
And the replies that come back indicate
which interface the reply was found on.

00:36:00.970 --> 00:36:03.580
And when you have two
services with the same name,

00:36:03.730 --> 00:36:06.710
one on Ethernet, one on Airport,
knowing which one you're

00:36:06.710 --> 00:36:08.210
talking about is useful.

00:36:08.280 --> 00:36:10.610
It doesn't happen very often,
but when it does happen,

00:36:10.700 --> 00:36:11.870
this solves that problem.

00:36:32.340 --> 00:36:34.360
Browsing, again,
if you want to pick a specific interface,

00:36:34.360 --> 00:36:34.720
you can.

00:36:34.720 --> 00:36:36.410
And when you have two
services with the same name,

00:36:36.410 --> 00:36:38.670
one on Airport, knowing which one you're
talking about is useful.

00:36:38.750 --> 00:36:40.600
It doesn't happen very often,
but when it does happen,

00:36:40.600 --> 00:36:41.650
this solves that problem.

00:36:42.180 --> 00:36:45.190
busy, idle, away.

00:36:45.270 --> 00:36:49.400
and because of that,
all the iChat clients leave their

00:36:49.460 --> 00:36:51.850
resolves active because they
want to keep getting callbacks

00:36:51.850 --> 00:36:55.200
when that information changes,
but they don't need to be constantly

00:36:55.200 --> 00:36:56.780
querying for IP address and port number.

00:36:56.780 --> 00:36:58.220
They only want to know
about the text record.

00:36:58.220 --> 00:37:02.720
So the new call lets you be more
selective and consequently more

00:37:02.720 --> 00:37:05.430
gentle on the network by only asking
for what you really care about.

00:37:06.760 --> 00:37:10.190
Text record limit, as I said,
has been raised in this call as well,

00:37:10.190 --> 00:37:12.240
and you can fetch true
binary data in this call.

00:37:12.240 --> 00:37:14.910
And we've made a number of
efficiency improvements so that

00:37:15.030 --> 00:37:18.080
when things like iChat do leave
their queries active on the network,

00:37:18.080 --> 00:37:19.770
it generates a lot fewer packets.

00:37:22.790 --> 00:37:24.290
Some specialized calls.

00:37:24.440 --> 00:37:28.000
If you want to make a proxy responder,
which is advertising

00:37:29.210 --> 00:37:31.980
services on their behalf,
say you've got old network printers that

00:37:32.070 --> 00:37:35.440
don't have Rendezvous and you want to run
a proxy that advertises on their behalf,

00:37:35.490 --> 00:37:39.810
the register record call lets
you register a whole bunch of

00:37:39.810 --> 00:37:45.070
records more efficiently and lets
you do specialized DNS records.

00:37:45.170 --> 00:37:47.850
It lets you register any
arbitrary DNS record,

00:37:47.940 --> 00:37:51.670
whereas the previous calls are
focused around the standard

00:37:51.670 --> 00:37:54.500
DNS service discovery conventions.

00:37:54.680 --> 00:37:57.710
DNS service query lets you
query an arbitrary record,

00:37:57.710 --> 00:38:01.610
and the reconfirm record is one
of the triggers for the mechanism

00:38:01.610 --> 00:38:05.340
I was talking about before
for the fast cache expiration.

00:38:05.340 --> 00:38:08.250
If you get an IP address back
from DNS service discovery,

00:38:08.250 --> 00:38:10.360
and when you try to
open a TCP connection,

00:38:10.360 --> 00:38:13.670
it doesn't work,
you can call this routine to give a

00:38:13.990 --> 00:38:17.260
hint to MDNS responders that that data
it gave you may not be good anymore,

00:38:17.260 --> 00:38:19.020
and it should go back
and check on the network.

00:38:19.060 --> 00:38:22.250
Obviously, use that cautiously,
because if you had a bug,

00:38:22.250 --> 00:38:24.500
that could do bad things to the network.

00:38:24.600 --> 00:38:25.680
Thank you.

00:38:25.840 --> 00:38:28.590
So, in the last year,
we've had a lot of software

00:38:28.700 --> 00:38:32.960
developers use Rendezvous,
and we've found some common

00:38:32.960 --> 00:38:35.390
themes emerging of things
we had to help them with.

00:38:35.500 --> 00:38:37.160
So, I'm going to talk about
some of those today.

00:38:40.850 --> 00:38:44.500
So, obvious advice,
use Rendezvous and put

00:38:44.770 --> 00:38:46.230
the logo on the box.

00:38:46.390 --> 00:38:48.710
If you're a software developer,
it's very similar to

00:38:48.710 --> 00:38:49.740
using the QuickTime logo.

00:38:49.740 --> 00:38:52.920
If you use Rendezvous on OS X,
you can use the logo.

00:38:52.920 --> 00:38:55.710
And that's a message to your
customers that you have a quality

00:38:55.760 --> 00:38:57.190
product that's easy to use.

00:39:03.010 --> 00:39:05.910
People were confused
initially about naming,

00:39:06.250 --> 00:39:09.160
and unfortunately it is
just a little bit confusing.

00:39:09.160 --> 00:39:10.870
There are two kinds of name.

00:39:10.870 --> 00:39:13.210
There are short names that
you type on the command line.

00:39:13.210 --> 00:39:15.720
You want them to be short and
easy to type and don't have funny

00:39:15.720 --> 00:39:18.080
characters in them or punctuation,
and that's good for

00:39:18.080 --> 00:39:19.420
command line interfaces.

00:39:19.680 --> 00:39:22.180
But when you're browsing,
there's no reason to

00:39:22.310 --> 00:39:23.520
be restricted to that.

00:39:23.570 --> 00:39:26.660
So in Jaguar, there are two names in the
sharing control panels.

00:39:26.670 --> 00:39:29.250
There's the computer name,
and there was the thing that

00:39:29.250 --> 00:39:31.050
was labeled the Rendezvous name.

00:39:31.050 --> 00:39:34.880
And it is the Rendezvous name in the
sense that it's your linked local

00:39:34.880 --> 00:39:36.910
host name for command line use.

00:39:36.910 --> 00:39:39.410
But a lot of people took that
to mean that Rendezvous names

00:39:39.680 --> 00:39:42.080
have to be lowercase letters,
digits, and hyphens,

00:39:42.080 --> 00:39:43.330
just like host names.

00:39:43.330 --> 00:39:44.850
That's not the case.

00:39:45.360 --> 00:39:48.390
And when you register a service,
most of the time, use empty string,

00:39:48.430 --> 00:39:51.440
and the system will just use the
default computer name for you.

00:39:51.440 --> 00:39:53.510
And if there's a name
conflict on the network,

00:39:53.510 --> 00:39:55.760
it will add a number two
on the end and re-register,

00:39:55.760 --> 00:39:57.610
so it will handle all of that for you.

00:39:57.610 --> 00:39:59.900
If the user changes the
name in the sharing panel,

00:39:59.900 --> 00:40:02.820
then it will update the name
of your service automatically.

00:40:02.840 --> 00:40:06.070
So for most applications,
using empty string is what you want.

00:40:07.570 --> 00:40:10.770
If you want to specify a different name,
that's fine as well.

00:40:10.800 --> 00:40:12.070
iTunes is an example of that.

00:40:12.150 --> 00:40:15.190
In iTunes, you can give a name
to your music library,

00:40:15.190 --> 00:40:17.220
which may not relate to
the name of your computer,

00:40:17.220 --> 00:40:18.510
because it's really naming the music.

00:40:18.520 --> 00:40:21.170
It's not naming the piece of
hardware where the music is living.

00:40:21.180 --> 00:40:24.540
So, pick which is appropriate
for your application.

00:40:27.500 --> 00:40:28.910
Very important.

00:40:29.000 --> 00:40:34.700
The service types are how you identify
what service a client is looking for.

00:40:34.700 --> 00:40:36.560
And if different people
use the same service type,

00:40:36.560 --> 00:40:38.110
then this is going to cause conflicts.

00:40:38.180 --> 00:40:38.820
That's not good.

00:40:38.840 --> 00:40:43.000
Clients are going to browse and find
things that don't actually make sense.

00:40:43.000 --> 00:40:46.330
A good example of this is WebDAV.

00:40:46.390 --> 00:40:49.340
It's a file sharing protocol
that runs over HTTP,

00:40:49.340 --> 00:40:51.850
which is a reasonable design decision.

00:40:51.860 --> 00:40:55.420
But it's a private design
decision for the protocol.

00:40:55.580 --> 00:41:00.200
If you have a WebDAV server,
don't advertise it as underscore HTTP,

00:41:00.640 --> 00:41:04.820
because even though it is using HTTP,
it's not something that a user

00:41:04.950 --> 00:41:09.110
necessarily expects to see in their
web browser and connect to and see

00:41:09.110 --> 00:41:11.560
something that's human meaningful.

00:41:11.640 --> 00:41:14.150
Now, you may have a web interface
to your server as well,

00:41:14.150 --> 00:41:15.750
in which case you advertise that.

00:41:15.750 --> 00:41:18.580
But underscore HTTP means something
a human being would like to

00:41:18.580 --> 00:41:20.160
look at in their web browser.

00:41:21.000 --> 00:41:24.950
WebDAV as a file sharing protocol should
be advertised as underscore WebDAV.

00:41:25.030 --> 00:41:29.580
And the fact that it's layered on top of
HTTP is just an implementation detail.

00:41:29.580 --> 00:41:32.290
And if you think about this,
everything runs on top of TCP and

00:41:32.360 --> 00:41:34.860
everything runs on top of IP,
but that doesn't mean all

00:41:34.860 --> 00:41:36.230
protocols are the same.

00:41:36.240 --> 00:41:39.040
The fact that they share a common
foundation doesn't mean that they're

00:41:39.040 --> 00:41:40.600
semantically the same protocol.

00:41:42.640 --> 00:41:44.480
You don't have to pay to
register a protocol name,

00:41:44.480 --> 00:41:45.690
you just fill in the form.

00:41:45.690 --> 00:41:48.850
If you want to play
around and experiment,

00:41:48.890 --> 00:41:51.630
all legal service names
are 14 characters or less,

00:41:51.790 --> 00:41:54.490
so make a longer name and you know you
won't conflict with a real product.

00:41:55.230 --> 00:41:58.070
Some developers have concerns
that by registering their service,

00:41:58.070 --> 00:42:00.240
they give away the product
they're working on,

00:42:00.260 --> 00:42:04.320
so that's fine to work with some
kind of temporary placeholder name,

00:42:04.320 --> 00:42:06.160
but when you ship,
do the IANA form and get

00:42:06.160 --> 00:42:08.490
a legal service name,
because that way you own it and

00:42:08.500 --> 00:42:11.470
you can take action if other people
come and trample on your service

00:42:11.470 --> 00:42:13.100
name and mess up your product.

00:42:15.260 --> 00:42:18.400
Just like using empty string for name,
when you register a service or

00:42:18.400 --> 00:42:21.290
when you browse for services,
use empty string for domain.

00:42:21.300 --> 00:42:24.800
Empty string means do the default,
do the right thing that the

00:42:24.800 --> 00:42:26.970
system has been configured to do.

00:42:26.980 --> 00:42:29.470
And right now that means local,
but in future that will

00:42:29.530 --> 00:42:30.760
mean different things.

00:42:30.760 --> 00:42:33.130
And if you pass local,
we'll assume you meant

00:42:33.130 --> 00:42:34.370
you only want local.

00:42:34.380 --> 00:42:37.100
So unless that's really what you mean,
pass empty string.

00:42:41.550 --> 00:42:45.030
Another common error,
partly because the sample

00:42:45.110 --> 00:42:47.610
code we gave out kind of
illustrated how to do resolves,

00:42:47.730 --> 00:42:49.960
and people assumed that
you had to do it that way.

00:42:50.000 --> 00:42:51.700
You don't need to resolve
everything you find.

00:42:51.700 --> 00:42:52.930
That's very hard on the network.

00:42:53.190 --> 00:42:56.660
You only need to resolve when you're
ready to actually use the service.

00:42:56.840 --> 00:43:00.750
And a related point is,
don't store an IP address and port

00:43:00.750 --> 00:43:02.460
number in the preference file,
because it might be wrong.

00:43:02.470 --> 00:43:03.710
Don't even store a host name.

00:43:03.870 --> 00:43:05.920
Store the service name,
look it up on demand.

00:43:09.670 --> 00:43:12.000
Don't assume IPv4 anymore.

00:43:12.040 --> 00:43:15.730
Every Jaguar and
Panther system runs IPv6,

00:43:15.730 --> 00:43:18.560
and when you browse,
you will find IPv6 addresses.

00:43:18.560 --> 00:43:22.300
So you should either use them,
or you should very least be aware of them

00:43:22.310 --> 00:43:24.580
and handle them properly in your code.

00:43:24.710 --> 00:43:28.520
Don't crash or bail out just because
you get a SOC adder that's not AFInet.

00:43:31.280 --> 00:43:33.620
When you do a resolve,
remember to cancel it afterwards,

00:43:33.750 --> 00:43:35.520
because as long as
that resolve is active,

00:43:35.670 --> 00:43:39.020
like iChat, it's constantly querying
the network saying,

00:43:39.020 --> 00:43:40.760
has the data changed,
has the data changed?

00:43:40.760 --> 00:43:44.080
And you do this enough,
it can be a big burden on the network.

00:43:46.200 --> 00:43:48.240
After you've established
your TCP connection,

00:43:48.240 --> 00:43:49.210
you can cancel the resolve.

00:43:49.210 --> 00:43:51.790
Now,
remember that a resolve can and usually

00:43:51.790 --> 00:43:53.900
will return more than one result.

00:43:53.970 --> 00:43:56.530
If you've got multi-homing,
if you've got v6,

00:43:56.600 --> 00:44:00.590
you may have link local addresses and
global addresses and v4 addresses,

00:44:00.590 --> 00:44:03.350
and the resolve call will
give you all of those.

00:44:04.780 --> 00:44:07.830
You don't know which, if any,
of those addresses are reachable to you,

00:44:07.830 --> 00:44:10.030
so if you really want to
write a robust application,

00:44:10.030 --> 00:44:12.990
you have to try connecting to each
of those and see which one works.

00:44:13.470 --> 00:44:15.760
But having succeeded,
it's time to kill the resolve,

00:44:15.760 --> 00:44:17.380
because you don't need it anymore.

00:44:19.530 --> 00:44:21.320
Common error?

00:44:21.550 --> 00:44:23.770
In the applications that were
resolving everything they found,

00:44:23.780 --> 00:44:27.400
which is bad in the first place,
when they got a remove message

00:44:27.400 --> 00:44:30.380
for a service going away,
they would do a stop

00:44:30.500 --> 00:44:33.800
resolve on that object,
and that doesn't work.

00:44:34.620 --> 00:44:39.560
When you have a NSNet service object
and you start a resolve on it,

00:44:39.700 --> 00:44:41.700
you have to stop the
resolve on that object,

00:44:41.710 --> 00:44:45.610
not a different object that happens
to contain the same service name.

00:44:45.620 --> 00:44:49.620
And that was an easy mistake to make,
but when every resolve you start,

00:44:49.620 --> 00:44:52.640
you've got to keep your own
data structures in memory,

00:44:52.700 --> 00:44:55.250
your own list of resolves,
so that you can actually get

00:44:55.310 --> 00:44:57.270
to those objects and cancel
them when they're finished.

00:45:01.180 --> 00:45:02.590
Don't overload Rendezvous.

00:45:02.780 --> 00:45:06.830
I know it's great and everybody loves it,
but you can take things too far.

00:45:07.170 --> 00:45:11.100
iChat is an example of
good use of Rendezvous.

00:45:11.100 --> 00:45:15.140
They need to communicate information
to all the peers on the network,

00:45:15.610 --> 00:45:20.100
and the choice was use their own
multicast protocol or use Rendezvous.

00:45:20.130 --> 00:45:23.100
And we looked at the design and we said,
"Well, you know what?

00:45:23.100 --> 00:45:25.080
There's no point in you
inventing your own thing.

00:45:25.220 --> 00:45:26.100
Rendezvous is there.

00:45:26.100 --> 00:45:28.100
Put the data in the text record.

00:45:28.100 --> 00:45:29.000
Leave a resolve active.

00:45:29.130 --> 00:45:32.080
That is the right thing to do and it's
the most efficient on the network.

00:45:32.080 --> 00:45:36.590
But before you make that decision,
look at it and make an informed

00:45:36.800 --> 00:45:40.070
decision about whether that's
really the right way to do it.

00:45:43.680 --> 00:45:45.440
General piece of advice,
this is not really Rendezvous,

00:45:45.500 --> 00:45:47.710
but it's good advice
about network design.

00:45:47.710 --> 00:45:49.340
Now that more and more
products are doing networking,

00:45:49.420 --> 00:45:50.320
this gets more important.

00:45:50.320 --> 00:45:53.430
Any periodic polling
on the network is bad.

00:45:53.460 --> 00:45:57.290
And in your lab, it might seem fine,
but you put a thousand

00:45:57.310 --> 00:45:59.880
machines doing that,
and suddenly things add up very,

00:45:59.880 --> 00:46:00.470
very fast.

00:46:01.060 --> 00:46:04.290
100 meg and gigabit ethernet
can carry a lot of traffic,

00:46:04.290 --> 00:46:07.880
but airport is much slower,
and multicast or broadcast over

00:46:07.880 --> 00:46:10.080
airport is even slower than that.

00:46:10.520 --> 00:46:14.270
Airport slows down from 54 megabits to
1 megabit to send a broadcast packet.

00:46:14.280 --> 00:46:18.520
So even a small number of broadcasts are
disproportionately expensive on airport.

00:46:18.520 --> 00:46:19.730
Be very careful with that.

00:46:19.780 --> 00:46:25.310
Also, the history of IP has assumed
well-known port numbers,

00:46:25.310 --> 00:46:28.240
and that is less and less true.

00:46:28.240 --> 00:46:31.790
Especially now with fast user switching,
you can't assume your application

00:46:31.790 --> 00:46:34.440
will get the port it expects,
because another copy of your

00:46:34.460 --> 00:46:36.480
application might already be running.

00:46:37.440 --> 00:46:40.100
Pass zero when you bind,
you'll get a random port,

00:46:40.220 --> 00:46:43.140
and the good news is Rendezvous
advertises your port.

00:46:43.230 --> 00:46:45.360
You don't need fixed ports anymore
when you're using Rendezvous.

00:46:48.400 --> 00:46:49.800
Final sanity check.

00:46:49.820 --> 00:46:53.370
When the product is done and it works
and everything seems to be good,

00:46:53.370 --> 00:46:54.120
have a look at the wire.

00:46:54.120 --> 00:46:57.220
Have a look at the packets on the
wire with a network sniffer like

00:46:57.340 --> 00:46:59.180
Ethereal or Etherpeak or TCP dump.

00:46:59.220 --> 00:47:02.920
Newer versions of them already
understand multicast DNS.

00:47:02.920 --> 00:47:05.760
If you've got an older version,
it's very easy to add

00:47:05.830 --> 00:47:07.270
multicast DNS support.

00:47:07.280 --> 00:47:11.890
Because it's standard DNS packet format,
you just need to tell the packet

00:47:11.890 --> 00:47:15.400
sniffer that port 5353 is DNS packets.

00:47:15.560 --> 00:47:17.490
Here's an example how
to do it with Etherpeak.

00:47:17.490 --> 00:47:23.200
You just open the decoder file,
find the DNS line, 35 hex is 53.

00:47:23.200 --> 00:47:27.880
Duplicate that line and put in 14E9,
which is 5353 in hex.

00:47:27.880 --> 00:47:30.220
You don't need to write that
down because you can find that

00:47:30.310 --> 00:47:31.670
on the multicast DNS website.

00:47:33.430 --> 00:47:36.980
Have a look at the packets on the
wire and see if there's anything

00:47:36.980 --> 00:47:39.470
that you might be able to improve.

00:47:39.470 --> 00:47:42.620
It's very easy to have an application
where sitting in front of the

00:47:42.620 --> 00:47:45.140
computer everything is working fine,
but on the wire it's sending

00:47:45.140 --> 00:47:46.230
100 packets a second.

00:47:46.230 --> 00:47:48.990
And you say, okay,
there's more to correctness

00:47:48.990 --> 00:47:52.230
than just does the right
thing appear on the screen.

00:47:54.510 --> 00:47:59.770
So, hardware developers,
similar kind of advice.

00:48:00.120 --> 00:48:04.240
Put Rendezvous in your products,
pass the conformance test,

00:48:04.310 --> 00:48:06.140
and put the logo on the product.

00:48:06.220 --> 00:48:10.010
The conformance test
is Apple's assurance,

00:48:10.010 --> 00:48:12.760
and your assurance,
and the customer's assurance that

00:48:12.940 --> 00:48:16.450
products with the Rendezvous logo
do in fact work well and do give the

00:48:16.650 --> 00:48:19.020
experience that people are expecting.

00:48:38.040 --> 00:48:40.160
Put Rendezvous in your products,
pass the conformance test,

00:48:40.290 --> 00:48:41.360
and put the logo on the product.

00:48:41.360 --> 00:48:42.920
The conformance test
is Apple's assurance,

00:48:42.970 --> 00:48:44.880
and your assurance,
and the customer's assurance that

00:48:45.130 --> 00:48:47.240
products with the Rendezvous logo
do in fact work well and do give the

00:48:47.360 --> 00:48:48.810
experience that people are expecting.

00:48:49.020 --> 00:48:50.040
Amen.

00:48:50.330 --> 00:48:54.080
He went through the menus and there
was a checkbox that said "Enable

00:48:54.140 --> 00:48:57.200
UPnP", which is off by default.

00:48:57.280 --> 00:49:01.710
So, they just missed the point of,
like they put all that code in

00:49:01.730 --> 00:49:04.200
the product and then missed the
point of why they put it there.

00:49:04.200 --> 00:49:07.860
So, we don't want people to
make mistakes like that.

00:49:10.630 --> 00:49:12.700
Don't skip link local addressing.

00:49:12.700 --> 00:49:15.460
Something we've heard
from some developers is,

00:49:15.560 --> 00:49:18.130
well, you give us the multicast
DNS code on the Darwin site,

00:49:18.230 --> 00:49:20.350
so that's great, but you don't give us
link local addressing,

00:49:20.430 --> 00:49:21.690
so we can't do that, it's too hard.

00:49:21.920 --> 00:49:26.050
The reason we don't have the sample
code there is because there really

00:49:26.050 --> 00:49:29.720
isn't any sample code to give,
because the algorithm is,

00:49:29.720 --> 00:49:32.560
send an ARP packet,
listen for an ARP reply,

00:49:32.560 --> 00:49:36.230
and if you get one,
pick a different random number.

00:49:37.160 --> 00:49:41.010
And the way you send and receive
ARP packets is so platform-specific that

00:49:41.010 --> 00:49:43.420
it would be different in every platform.

00:49:43.420 --> 00:49:45.360
It's not a standard
API the way Sockets is,

00:49:45.370 --> 00:49:47.780
because it's generally
down at the kernel level.

00:49:47.780 --> 00:49:50.340
And that means that the only remaining
sample code we have left to give

00:49:50.400 --> 00:49:52.460
you is a random number generator,
which would kind of be

00:49:52.630 --> 00:49:53.820
insulting your intelligence.

00:49:56.330 --> 00:50:00.330
It really is very, very simple,
and it is a vital part of Rendezvous,

00:50:00.590 --> 00:50:03.350
because everything you're
seeing up on the stage here is

00:50:03.510 --> 00:50:05.030
using link local addressing,
right?

00:50:05.270 --> 00:50:07.110
That's how I can just plug
it in and have it work,

00:50:07.110 --> 00:50:08.710
and I didn't bring a DHCP server.

00:50:08.710 --> 00:50:13.560
And that's an important part of making
network products that cannot fail,

00:50:13.560 --> 00:50:15.800
and that's part of Rendezvous.

00:50:15.800 --> 00:50:19.020
It's the, when you plug it in,
it will work, no excuses, no, oh, well,

00:50:19.020 --> 00:50:22.160
you didn't have the right subnet mask,
and your DHCP client ID was wrong.

00:50:22.290 --> 00:50:23.940
None of that nonsense, right?

00:50:24.080 --> 00:50:25.120
You plug it in, it works.

00:50:26.480 --> 00:50:28.650
For that to be the case,
you can't be relying on

00:50:28.650 --> 00:50:31.750
things like DHCP and other
infrastructure on the network.

00:50:31.750 --> 00:50:34.230
DHCP is great,
definitely put a DHCP client in,

00:50:34.230 --> 00:50:36.940
but don't make it your
only way of configuring.

00:50:40.270 --> 00:50:43.430
If you're ever in doubt about
how fast the things should

00:50:43.490 --> 00:50:46.610
respond or things like that,
think about USB.

00:50:47.130 --> 00:50:49.410
You saw when I plugged
in these devices here,

00:50:49.410 --> 00:50:51.650
they all showed up within a few seconds.

00:50:52.760 --> 00:50:56.150
There are some vendors who came to us
with a thing that would try DHCP for

00:50:56.230 --> 00:50:57.840
five minutes before it gave up.

00:50:57.950 --> 00:51:00.800
And we had to say, look,
nobody wants to wait five minutes,

00:51:00.850 --> 00:51:04.250
struggling, you know, not sure why their
printer isn't showing up,

00:51:04.250 --> 00:51:08.270
because about 30 seconds in, you know,
they're taking a screwdriver to it and

00:51:08.270 --> 00:51:11.900
changing dip switch settings and fiddling
with it and thinking the Ethernet

00:51:11.930 --> 00:51:14.120
cable's bad and doing more damage.

00:51:14.120 --> 00:51:19.130
So, USB is active within a few
seconds and Rendezvous network

00:51:19.130 --> 00:51:21.520
devices should be as well.

00:51:23.600 --> 00:51:25.810
Another common thing with network
devices is when you change

00:51:25.810 --> 00:51:28.470
your configuration setting,
you have to power cycle

00:51:28.930 --> 00:51:30.500
them to make them work.

00:51:30.540 --> 00:51:31.500
Don't do that.

00:51:31.500 --> 00:51:34.500
All Ethernet hardware pretty much these
days gives you link change detection,

00:51:34.500 --> 00:51:37.500
so when you detect the
cable is connected,

00:51:37.920 --> 00:51:40.420
configure a link local
address and advertise your

00:51:40.610 --> 00:51:44.490
services on that interface,
just like plugging in a USB cable.

00:51:44.560 --> 00:51:47.220
You don't have to power cycle a
printer when you plug in the USB cable,

00:51:47.260 --> 00:51:50.500
and you shouldn't have to power cycle
it when you plug in the Ethernet cable.

00:51:53.830 --> 00:51:57.990
The easiest way to get the multicast
DNS and DNS service discovery into

00:51:57.990 --> 00:52:00.030
your product is just to take our code.

00:52:00.200 --> 00:52:03.360
It's about 75K,
which is not big in today's world of

00:52:03.360 --> 00:52:06.000
bloated multi-megabyte applications.

00:52:06.020 --> 00:52:11.200
If you're doing something truly tiny,
then contact us and we can work with you,

00:52:11.200 --> 00:52:14.400
because as I say,
we've got some developers doing

00:52:14.480 --> 00:52:16.920
really tiny implementations.

00:52:16.920 --> 00:52:20.130
They cut a lot of corners to do that,
but talk to us and we can set you up

00:52:20.130 --> 00:52:22.160
with something that's appropriate.

00:52:22.160 --> 00:52:24.750
But the most full-featured,
fully-tested code is the

00:52:24.880 --> 00:52:26.330
same code that's in Panther.

00:52:26.410 --> 00:52:28.310
You know that's been run
on millions of machines,

00:52:28.400 --> 00:52:30.950
so that is really the code that
you have the most confidence in.

00:52:34.220 --> 00:52:37.980
Okay, so some other interesting
sessions you might want to go to.

00:52:37.980 --> 00:52:41.760
The first one is already over,
but you'll have it on your DVD,

00:52:41.760 --> 00:52:43.330
so you can review that if you want.

00:52:43.360 --> 00:52:48.780
We've got networking sessions and
networking feedback tomorrow and Friday.

00:52:54.300 --> 00:52:55.820
Craig is our developer relations guy.

00:52:55.890 --> 00:53:01.290
If you have any questions, contact him.

00:53:01.360 --> 00:53:06.390
For the specifications, zeroconf.org,
multicastdns.org, dnssd.org,

00:53:06.390 --> 00:53:08.270
all have those drafts.

00:53:08.270 --> 00:53:12.040
They've just been updated last week,
so they're up to date with all

00:53:12.040 --> 00:53:14.520
the latest stuff in Panther.

00:53:15.780 --> 00:53:17.200
We have Apple developer information.

00:53:17.200 --> 00:53:19.330
We also have the
Apple Rendezvous mailing list,

00:53:19.400 --> 00:53:20.950
which is a great place to ask questions.

00:53:20.950 --> 00:53:23.520
So that's often a good place
to ask your first question,

00:53:23.520 --> 00:53:26.030
instead of going straight
to Craig with a question.

00:53:26.030 --> 00:53:28.290
Many times asking on the
list will get you an answer.