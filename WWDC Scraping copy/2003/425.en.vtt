WEBVTT

00:00:26.000 --> 00:00:28.000
That's me.

00:00:28.010 --> 00:00:31.000
HIToolbox, well,
HIView is probably the most important

00:00:31.000 --> 00:00:35.000
technology in the HIToolbox these days.

00:00:35.110 --> 00:00:39.000
If you're going to deploy an application
on Mac OS X that is using HIToolbox,

00:00:39.000 --> 00:00:41.990
you need to know about HIView.

00:00:42.460 --> 00:00:44.910
Over the past few years,
we've been laying this foundation.

00:00:45.050 --> 00:00:47.410
Carbon Events was like
the first big milestone,

00:00:47.410 --> 00:00:49.270
and we had this nice messaging system.

00:00:49.340 --> 00:00:51.300
On top of that now, we have HIView.

00:00:51.300 --> 00:00:54.300
And in Panther,
we finished that transition,

00:00:54.340 --> 00:00:56.300
so now that HIViews are pervasive.

00:00:56.300 --> 00:00:59.170
For this reason,
everything we do going forward

00:00:59.170 --> 00:01:02.170
is going to involve HIView
in some form or another.

00:01:02.300 --> 00:01:04.300
So it's important that
you learn about it.

00:01:04.300 --> 00:01:06.580
If you're not ready to
adopt it right this second,

00:01:06.730 --> 00:01:09.500
that's okay,
but please learn about it and

00:01:09.500 --> 00:01:13.300
understand it and try to figure
out how it's going to work,

00:01:13.300 --> 00:01:18.710
how you're going to end up adopting it
into your applications in the future.

00:01:19.380 --> 00:01:23.180
What this session is going to be
is a quick overview of HIView.

00:01:23.180 --> 00:01:25.800
We're just going to fly
through some of the basics.

00:01:25.800 --> 00:01:29.670
We're going to learn how to use it,
how you turn it on, what makes it go.

00:01:29.750 --> 00:01:31.760
We'll also talk about how
to write a custom view.

00:01:31.760 --> 00:01:32.640
What does it take?

00:01:32.670 --> 00:01:34.620
And it turns out it's pretty easy.

00:01:34.690 --> 00:01:36.570
And along the way,
we'll touch on performance things,

00:01:36.600 --> 00:01:42.780
ways you can make your views perform
really well in the HIView model.

00:01:42.790 --> 00:01:46.750
So HIView is a complete replacement
for the control manager.

00:01:48.510 --> 00:01:50.940
Technically, though,
we always throw around these terms,

00:01:50.940 --> 00:01:52.960
HIView, controls, what's the relation?

00:01:53.040 --> 00:01:57.340
HIViews are controls,
controls are HIViews by and large.

00:01:57.530 --> 00:02:00.350
HIView is kind of a subset
of the old control manager,

00:02:00.350 --> 00:02:02.380
and it allows controls
to work in this new mode,

00:02:02.420 --> 00:02:04.730
which we call composited mode.

00:02:04.900 --> 00:02:08.900
And it is, quite honestly,
the best thing to hit the toolbox since,

00:02:09.020 --> 00:02:12.860
I don't know, OS types, I don't know,
making stuff up.

00:02:13.030 --> 00:02:18.790
So, it's important that you really
understand the relation between the two.

00:02:18.870 --> 00:02:21.460
So, if you were to look in HIView.h,
you'd see that, you know,

00:02:21.460 --> 00:02:24.380
not everything that was in the
control manager is in there.

00:02:24.530 --> 00:02:27.340
Well, that's because we, you know,
we haven't finished moving

00:02:27.340 --> 00:02:28.800
everything over there yet.

00:02:28.800 --> 00:02:33.060
But it is perfectly legal to call
control manager calls on HIViews.

00:02:33.260 --> 00:02:36.600
There are some exceptions,
and we're attempting to document those in

00:02:36.650 --> 00:02:39.080
the header in the controls.h right now.

00:02:39.560 --> 00:02:42.220
Also understand, as I mentioned,
we're now pervasive with these views.

00:02:42.290 --> 00:02:43.490
We use them everywhere.

00:02:43.590 --> 00:02:46.500
So this is great for you guys
because you can learn one system,

00:02:46.500 --> 00:02:49.500
one way to write a view,
and you can deploy it in menus, windows,

00:02:49.500 --> 00:02:52.500
and as a control, obviously.

00:02:52.500 --> 00:02:54.500
This is a modern view system.

00:02:54.500 --> 00:02:57.310
It uses all the latest technology.

00:02:57.500 --> 00:03:01.480
Basically, we draw using Quartz,
use floating-point coordinates,

00:03:01.480 --> 00:03:05.550
we support overlapping views,
which is really cool, and as a Panther,

00:03:05.550 --> 00:03:08.390
we support layout facilities,
which we kind of touched on

00:03:08.450 --> 00:03:09.500
in the HI Toolbox session.

00:03:12.880 --> 00:03:14.500
So first let's talk
about composited drawing.

00:03:14.500 --> 00:03:16.300
What does that mean?

00:03:16.340 --> 00:03:19.460
What it means is you have
a predictable way to draw.

00:03:19.470 --> 00:03:22.300
That doesn't involve
erasing behind oneself.

00:03:22.320 --> 00:03:24.070
The old control manager would
always erase behind itself

00:03:24.120 --> 00:03:25.300
before it redrew the control.

00:03:25.300 --> 00:03:27.300
This has happened back since 1984.

00:03:27.300 --> 00:03:28.470
It's always been that way.

00:03:28.490 --> 00:03:30.940
Couldn't exactly change it until now.

00:03:30.950 --> 00:03:32.420
Now we have a composited drawing system.

00:03:32.420 --> 00:03:35.210
We draw everything back to front,
and we also obey all of the

00:03:35.210 --> 00:03:37.210
Z-ordering among siblings,
which gives us the

00:03:37.220 --> 00:03:39.800
ability to overlap views,
as I mentioned.

00:03:40.970 --> 00:03:43.520
Since we don't do a race behind,
you don't have to worry about

00:03:43.680 --> 00:03:45.470
pattern alignment problems,
all that stuff.

00:03:45.470 --> 00:03:46.140
It's just gone.

00:03:46.330 --> 00:03:49.470
You don't have to worry about it.

00:03:50.520 --> 00:03:53.200
And drawing always occurs
at a very specific time,

00:03:53.200 --> 00:03:54.700
and that's at event loop time.

00:03:54.700 --> 00:03:58.200
So right before we would go and
flush your Windows contents,

00:03:58.200 --> 00:04:02.370
we actually would repaint all
invalid areas of the view system.

00:04:02.560 --> 00:04:06.600
So speaking of invalidation, what is it?

00:04:06.790 --> 00:04:10.870
So essentially, as your views decide that
they need to be redrawn,

00:04:11.130 --> 00:04:12.900
they will mark themselves invalid.

00:04:12.980 --> 00:04:17.200
The toolbox will only mark things
invalid if you move a view,

00:04:17.200 --> 00:04:20.020
if you resize a view,
or if you show a view.

00:04:20.270 --> 00:04:22.400
Other than that, it's all up to you.

00:04:22.440 --> 00:04:24.960
For resizing, we do have a special
event that we send out.

00:04:25.000 --> 00:04:31.000
K event, K control, it must be K event,
control invalidate for size change.

00:04:31.000 --> 00:04:33.450
This event will, as I mentioned,
will get sent out during

00:04:33.450 --> 00:04:34.400
a resize operation.

00:04:34.400 --> 00:04:36.140
So you might have a
control that knows that,

00:04:36.140 --> 00:04:39.000
well, my top left area always
kind of stays constant.

00:04:39.000 --> 00:04:41.310
So if I'm growing,
I only need to paint like that inverse

00:04:41.310 --> 00:04:43.800
L area that's just been revealed.

00:04:43.800 --> 00:04:46.900
And conversely,
as the thing is shrinking,

00:04:46.900 --> 00:04:50.000
you might decide you don't
need to redraw at all.

00:04:50.000 --> 00:04:52.800
But it's really important to
know that you have to invalidate.

00:04:52.800 --> 00:04:53.570
It's your views.

00:04:53.600 --> 00:04:57.340
It's totally up to your view to
invalidate when it's appropriate.

00:04:58.130 --> 00:05:00.900
So, and this means things
even like value change,

00:05:00.980 --> 00:05:03.100
activate, deactivate, highlight.

00:05:03.130 --> 00:05:05.500
We don't know if that means
anything to your control,

00:05:05.570 --> 00:05:08.300
so it's up to you to
tell us by invalidating.

00:05:08.580 --> 00:05:12.550
An important note is that invalidating a
parent does not invalidate the children.

00:05:12.620 --> 00:05:15.160
This may seem strange,
but it's that way for

00:05:15.240 --> 00:05:16.500
performance reasons.

00:05:16.500 --> 00:05:17.990
And I won't go into the details.

00:05:18.000 --> 00:05:19.380
I can bore you with that some other time.

00:05:19.540 --> 00:05:24.000
But it's really important to keep
that in mind while you're using this.

00:05:24.080 --> 00:05:27.770
The two APIs that you use are
HIView Set Needs Display and

00:05:27.770 --> 00:05:30.190
HIView Set Needs Display in Region.

00:05:30.390 --> 00:05:33.280
And the second call is to
be a lot more specific about

00:05:33.680 --> 00:05:35.050
what you want to get redrawn.

00:05:35.060 --> 00:05:39.870
If you have a very complex control,
this call will be your friend because

00:05:39.870 --> 00:05:45.330
essentially you just want to invalidate
some small part of your complex control.

00:05:49.080 --> 00:05:57.730
So in the realm of geometry,
we have new types-- HIPoint, HIRECT,

00:05:57.730 --> 00:05:58.870
HISize.

00:05:59.170 --> 00:06:02.620
And these are essentially
just typedefs of the CG types.

00:06:02.640 --> 00:06:05.430
But we kind of renamed them to
kind of fit into our namespace

00:06:05.780 --> 00:06:09.880
and also to imply something else,
which I'll get into in a little bit.

00:06:09.920 --> 00:06:13.480
All of the APIs that we have
are in terms of these new types.

00:06:13.480 --> 00:06:16.430
The only legacy quick draw type
that you'll ever see in our

00:06:16.530 --> 00:06:18.180
API are region handles right now.

00:06:18.200 --> 00:06:21.570
And eventually,
those will be replaced by H-I shape refs.

00:06:24.350 --> 00:06:26.750
There are two coordinate
systems for every view:

00:06:26.860 --> 00:06:29.290
frame and bounds.

00:06:30.010 --> 00:06:33.300
The frame is where you
live inside your parent,

00:06:33.440 --> 00:06:36.440
expressing your parent's
local coordinate system.

00:06:36.440 --> 00:06:40.120
Your bounds is your
local coordinate system.

00:06:40.120 --> 00:06:42.530
Whenever you're moving
or resizing your view,

00:06:42.590 --> 00:06:45.460
it's always done in frame coordinates.

00:06:45.460 --> 00:06:47.530
Whenever you're doing stuff
internal to your view,

00:06:47.590 --> 00:06:52.080
hit testing, drawing,
it's always in your bounds coordinates.

00:06:52.080 --> 00:06:54.320
And it's just important to
always keep that in mind.

00:06:54.390 --> 00:06:56.960
The great thing about having a local
coordinate system is obviously all

00:06:56.970 --> 00:06:58.710
of the rectangles are local to you.

00:06:58.710 --> 00:07:01.440
If you get moved or resized
or any of that stuff,

00:07:01.440 --> 00:07:05.600
you can pretty much not have to recompute
all these rectangles all the time.

00:07:05.600 --> 00:07:06.740
So it allows you to cache things.

00:07:06.740 --> 00:07:07.270
It's pretty cool.

00:07:08.940 --> 00:07:15.010
So, a quick visual example:
you have a button inside a group box.

00:07:15.040 --> 00:07:17.480
Its bounds are 0, 0 to 120.

00:07:17.480 --> 00:07:19.240
This is very different from
the old control manager way,

00:07:19.240 --> 00:07:21.740
where it always lived
in port coordinates,

00:07:21.790 --> 00:07:24.010
which was not always fun.

00:07:24.120 --> 00:07:26.220
So now you have your
local coordinate system.

00:07:26.260 --> 00:07:27.800
It's great.

00:07:28.300 --> 00:07:30.630
Its frame is where it
lives in its parent,

00:07:30.660 --> 00:07:31.300
as I mentioned.

00:07:31.310 --> 00:07:34.020
So in this case,
it might be 30 pixels down and to the

00:07:34.020 --> 00:07:36.810
right from the top left of the group box.

00:07:37.900 --> 00:07:39.740
Okay.

00:07:39.910 --> 00:07:46.600
There are two ways to draw in HIView:
Quartz and Quickdraw.

00:07:46.910 --> 00:07:49.800
Quartz is obviously the native
drawing model for Mac OS X.

00:07:49.800 --> 00:07:50.800
Have we said that enough?

00:07:50.800 --> 00:07:54.060
It's got all types of cool--I
think it's one of the coolest

00:07:54.210 --> 00:07:55.770
features of Mac OS X myself.

00:07:55.800 --> 00:07:58.800
It's got all types of cool things:
transparency, anti-aliasing,

00:07:58.850 --> 00:08:00.800
Bayesia curves, really cool stuff.

00:08:00.800 --> 00:08:04.800
And all of our drawing internally
is actually done through Quartz.

00:08:04.800 --> 00:08:06.790
We also fully support Quickdraw, though.

00:08:06.800 --> 00:08:09.220
If you have your code,
it's probably likely

00:08:09.330 --> 00:08:10.780
all in Quickdraw code.

00:08:10.840 --> 00:08:13.610
You can migrate that very easily.

00:08:13.940 --> 00:08:15.900
That's one issue though.

00:08:15.900 --> 00:08:19.590
Quartz has a lower left origin.

00:08:21.900 --> 00:08:23.340
We don't.

00:08:23.340 --> 00:08:24.980
We use top left origin.

00:08:25.040 --> 00:08:28.400
And this is the other reason for
having a redefined type space.

00:08:28.520 --> 00:08:30.700
So when you see an
HI point or an HI rect,

00:08:30.800 --> 00:08:33.530
you know that this is in terms
of top left coordinate system.

00:08:33.540 --> 00:08:38.660
So it's a signal to you to know
which kind of orientation we're in.

00:08:39.070 --> 00:08:43.600
So, ultimately,
we've transformed the context

00:08:44.130 --> 00:08:47.780
that we deal with and that we
give to you whenever you draw.

00:08:47.790 --> 00:08:50.270
We put zero,
zero at the top left where it rightfully

00:08:50.270 --> 00:08:55.010
belongs and where you're really used to.

00:08:55.170 --> 00:08:55.890
We have an old joke.

00:08:55.940 --> 00:08:57.430
I won't go into it.

00:08:57.470 --> 00:09:00.390
I won't make friends.

00:09:00.850 --> 00:09:02.550
So this is important because
our windowing system has

00:09:02.550 --> 00:09:05.340
always been top left based.

00:09:05.340 --> 00:09:07.560
And of course all your existing
code is top left based,

00:09:07.560 --> 00:09:09.670
and we don't want to throw that
away or have you flip rectangles

00:09:09.670 --> 00:09:10.860
for the rest of your life.

00:09:10.960 --> 00:09:14.560
We just want you to take your code
and be able to migrate it easily.

00:09:14.560 --> 00:09:17.240
It also saves us from
things like window resize.

00:09:17.320 --> 00:09:20.180
If we had a bottom left origin
when you resize the window,

00:09:20.180 --> 00:09:23.290
essentially all your frames are
changing throughout the window,

00:09:23.350 --> 00:09:25.180
and that's kind of a
big pain in the neck.

00:09:25.180 --> 00:09:27.610
So we wanted to avoid all that.

00:09:27.910 --> 00:09:31.680
But you've got to realize that
you're basically drawing upside down.

00:09:31.760 --> 00:09:37.140
And if you get a context from us,
and you call--

00:09:37.370 --> 00:09:41.210
CGContext DrawImage,
you'll find it out quite apparently.

00:09:41.340 --> 00:09:45.450
So to help you with that,
we have helper APIs to deal with it.

00:09:45.580 --> 00:09:48.190
First is HIView DrawCGImage.

00:09:48.330 --> 00:09:52.790
That will take the image and
render it in the appropriate way.

00:09:52.930 --> 00:09:54.950
And we also have HITHemeDrawText.

00:09:55.050 --> 00:10:00.210
This is the Panther version
of DrawThemeTextBox,

00:10:00.210 --> 00:10:00.210
which also will draw in
the correct orientation.

00:10:00.680 --> 00:10:01.660
Only H-I-Theme draw text.

00:10:01.740 --> 00:10:04.360
It's much faster, so use it.

00:10:04.360 --> 00:10:08.030
So essentially these
APIs just take the context,

00:10:08.260 --> 00:10:10.350
flip it, draw, and flip it back.

00:10:10.410 --> 00:10:12.540
And flipping it is only a matter
of a couple lines of code.

00:10:12.590 --> 00:10:15.190
I don't have an example
of showing you that,

00:10:15.190 --> 00:10:16.910
but it's really easy to do.

00:10:19.380 --> 00:10:24.060
The next issue, or the next solution,
really, is that of layout.

00:10:24.250 --> 00:10:27.890
So one of the big pains we've
always had is being able to

00:10:27.900 --> 00:10:31.020
layout all of your controls,
and you always have to do that manually.

00:10:31.020 --> 00:10:33.990
You have to listen to balance changes,
events, and move everything around,

00:10:33.990 --> 00:10:34.930
and it's a lot of code.

00:10:35.030 --> 00:10:37.210
We wanted to eliminate that, okay?

00:10:37.630 --> 00:10:39.480
So, we have layout facilities.

00:10:39.500 --> 00:10:42.500
I'll kind of show this in
the HI Toolbox session.

00:10:42.500 --> 00:10:47.850
So what we have here is an automatic
way to position or size any of

00:10:47.950 --> 00:10:51.490
your views in your window based
on any other view in your window.

00:10:51.500 --> 00:10:52.500
They do not have to be next to it.

00:10:52.500 --> 00:10:53.500
It doesn't have to just be your parent.

00:10:53.500 --> 00:10:55.470
It could be any view in the window.

00:10:55.500 --> 00:10:59.890
Theoretically, we were talking earlier,
theoretically you could

00:10:59.890 --> 00:11:01.480
base this across windows.

00:11:01.500 --> 00:11:04.500
It'd be crazy, but hey, have fun.

00:11:04.500 --> 00:11:06.500
So there are multiple ways to do this.

00:11:06.500 --> 00:11:09.500
You have bindings, positions,
and scalings.

00:11:09.580 --> 00:11:12.500
We'll touch on those as we
go forward a little bit.

00:11:12.500 --> 00:11:15.500
So, as I mentioned,
you can do it with any other view.

00:11:15.500 --> 00:11:19.500
And the way you actually go about this,
the mechanics are a couple of APIs:

00:11:19.500 --> 00:11:25.500
HIView get layout info and
HIView set layout info.

00:11:25.500 --> 00:11:29.580
So typically the code flow would be
get the layout info that's there,

00:11:29.580 --> 00:11:33.430
you know, twiddle your bits,
and reset it.

00:11:34.570 --> 00:11:37.350
But just setting a layout doesn't
actually make the layout reflow.

00:11:37.350 --> 00:11:41.500
If you want that to happen immediately,
use HIView ApplyLayout.

00:11:41.500 --> 00:11:44.160
What we would do otherwise is
just wait for a balance change

00:11:44.170 --> 00:11:47.580
event to happen on the original
view that you're relating to,

00:11:47.680 --> 00:11:49.500
and then we would make
everything go online.

00:11:49.500 --> 00:11:54.100
This is kind of analogous to if you
selected a whole bunch of objects in

00:11:54.100 --> 00:11:58.600
some drawing program and then said,
you know, "Align left," and

00:11:58.600 --> 00:11:59.460
everything would align left.

00:11:59.500 --> 00:12:01.770
Well, the selection is like
creating the bindings,

00:12:01.770 --> 00:12:04.500
and then saying "Align left"
is like calling ApplyLayout.

00:12:06.900 --> 00:12:08.460
So a little code to show how to do this.

00:12:08.500 --> 00:12:09.800
It's pretty simple.

00:12:09.850 --> 00:12:12.750
Again, you just get the layout info.

00:12:13.250 --> 00:12:15.340
Set some settings, and then you set it.

00:12:15.380 --> 00:12:16.990
In this case, what we're doing is
we're setting bindings.

00:12:17.050 --> 00:12:19.100
So bindings are kind of like
the power plant bindings,

00:12:19.100 --> 00:12:24.680
where you essentially bind an edge of
your view to the edge of some other view.

00:12:25.210 --> 00:12:27.620
In this case,
we're binding the left and the

00:12:27.950 --> 00:12:30.860
right of our view to our parent.

00:12:30.860 --> 00:12:34.070
And you can indicate parent
by just passing null in the to

00:12:34.110 --> 00:12:36.620
view field of the structure.

00:12:36.740 --> 00:12:38.480
And in this case,
what would happen is as the

00:12:38.480 --> 00:12:43.080
window resized horizontally,
your view would resize horizontally.

00:12:44.130 --> 00:12:47.630
The next type of positioning
we support is scaling.

00:12:47.660 --> 00:12:51.200
In this specific example,
what we're doing is we're taking,

00:12:51.220 --> 00:12:58.020
as we are scaling to 50% of our
parent view's horizontal distance.

00:12:58.190 --> 00:13:01.090
So, whatever width my parent is,
I'm going to be half that.

00:13:01.140 --> 00:13:06.420
You can also use this in cool ways,
because often times you might have

00:13:06.420 --> 00:13:09.590
a view that embeds a second view,
and the second view is actually

00:13:09.600 --> 00:13:11.060
exactly as big as the first view.

00:13:11.100 --> 00:13:14.100
I was doing this the other week, in fact.

00:13:14.100 --> 00:13:15.100
And what you can do is you can
just use this and just say,

00:13:15.100 --> 00:13:18.100
"I'm 100% of my parent." And you
can do that in both axes,

00:13:18.100 --> 00:13:21.100
X and Y, so width and height.

00:13:21.100 --> 00:13:24.180
And it just automatically
lays out all the,

00:13:24.180 --> 00:13:26.090
yeah, stuff, things.

00:13:26.220 --> 00:13:27.100
All right.

00:13:29.090 --> 00:13:29.990
Position is the next one.

00:13:30.040 --> 00:13:32.050
Position you can really
think of as alignment.

00:13:32.110 --> 00:13:34.640
In this specific example,
what we're going to do is we're going to

00:13:34.720 --> 00:13:43.240
position ourselves centered horizontally
to some view that happens to be above me,

00:13:43.240 --> 00:13:45.380
like literally above you.

00:13:46.180 --> 00:13:48.890
And this is all great
code and it's wonderful,

00:13:48.970 --> 00:13:52.790
but why don't we take a
look at what it actually

00:13:53.830 --> 00:13:57.380
So you saw some of this in
the-- I'm my own demo boy,

00:13:57.380 --> 00:13:59.020
by the way.

00:13:59.070 --> 00:14:03.160
You saw some of this in--
which machine am I on?

00:14:04.110 --> 00:14:05.000
This one?

00:14:05.000 --> 00:14:05.820
This one.

00:14:05.940 --> 00:14:06.660
Oh, there we go.

00:14:06.760 --> 00:14:08.400
All right.

00:14:08.490 --> 00:14:11.350
So you saw some of this
in the HIToolbox session.

00:14:11.600 --> 00:14:14.420
I'm just going to show you
again because I'm that way.

00:14:14.590 --> 00:14:16.880
So basically,
I'm going to edit mode here,

00:14:16.960 --> 00:14:20.310
and we have this crazy little control.

00:14:20.400 --> 00:14:23.960
And what we want to do is--

00:14:26.000 --> 00:14:34.400
[Transcript missing]

00:14:35.480 --> 00:14:38.590
What we want to do is just have
this thing bind to this parent,

00:14:38.670 --> 00:14:39.500
let's say.

00:14:39.650 --> 00:14:43.190
So we can just bind our
right to the parent's right,

00:14:43.190 --> 00:14:45.500
and as we move, the thing moves with it.

00:14:45.570 --> 00:14:48.670
We can also bind the left
to the parent's left,

00:14:48.670 --> 00:14:51.000
and as we move, it moves automatically.

00:14:51.000 --> 00:14:53.560
And now the things are
kind of stuck to the edges.

00:14:53.640 --> 00:14:56.500
Great thing about the way we have done
the layout stuff is that you don't

00:14:56.500 --> 00:14:58.170
really-- it doesn't matter where it is.

00:14:58.280 --> 00:14:59.500
The bindings just work.

00:14:59.620 --> 00:15:03.620
So you can just move stuff around,
and the bindings just work.

00:15:03.790 --> 00:15:04.780
It's automatic.

00:15:04.850 --> 00:15:06.880
You don't have to think about it.

00:15:07.570 --> 00:15:09.780
Of course,
there are other things you can do.

00:15:09.800 --> 00:15:14.130
I could take this view and
instead of binding it this way,

00:15:14.130 --> 00:15:19.720
I could instead just bind it to,
once again, 0.5.

00:15:20.700 --> 00:15:32.600
[Transcript missing]

00:15:34.510 --> 00:15:39.150
Last option that we mentioned
was aligning to some other view.

00:15:39.260 --> 00:15:40.990
So I have B and I have A.

00:15:41.580 --> 00:15:48.700
See, we knew that was going to happen.

00:15:54.280 --> 00:15:55.190
Haha!

00:15:55.190 --> 00:15:56.180
You can't stop me.

00:15:56.300 --> 00:15:57.010
Oh!

00:15:57.210 --> 00:15:58.670
Alright!

00:15:58.730 --> 00:16:01.550
We really knew that that
was going to happen.

00:16:02.560 --> 00:16:05.400
Oh, yeah.

00:16:05.450 --> 00:16:08.380
You can't stop HIToolbox.

00:16:09.710 --> 00:16:10.600
All right.

00:16:10.600 --> 00:16:14.600
We're from the Department of
Redundancy department.

00:16:14.690 --> 00:16:18.430
So do we really have everything here?

00:16:21.190 --> 00:16:23.740
Why is that not an app?

00:16:23.820 --> 00:16:24.650
Or a folder?

00:16:24.740 --> 00:16:26.410
Is this a folder?

00:16:33.600 --> 00:16:44.200
[Transcript missing]

00:16:46.870 --> 00:16:50.040
All right, well, you have fun with that.

00:16:50.080 --> 00:16:52.560
I had the best demo ever,
but you'll never see it now.

00:16:52.560 --> 00:16:57.480
Of course,
now I'm building up your expectations.

00:17:01.710 --> 00:17:05.310
and the Crack team, yes,
they do smoke crack, are up there.

00:17:05.310 --> 00:17:07.780
We'll move on.

00:17:08.220 --> 00:17:09.440
All right.

00:17:09.470 --> 00:17:11.680
How do you use HIView?

00:17:12.160 --> 00:17:15.180
Now we'll have one big demo at the end.

00:17:15.430 --> 00:17:19.710
How do you use this stuff,
now that you saw how great it was?

00:17:20.860 --> 00:17:22.700
It's easy.

00:17:22.740 --> 00:17:25.050
First thing you want to do is turn
on the compositing mode of a window.

00:17:25.120 --> 00:17:26.800
As I mentioned,
we have this compositing mode,

00:17:26.840 --> 00:17:27.510
which we draw.

00:17:27.540 --> 00:17:29.790
We draw back to front, no erase behind.

00:17:29.880 --> 00:17:32.180
It's really great.

00:17:32.280 --> 00:17:36.350
So the way you turn it on is to basically
specify kWindowCompositingAttribute

00:17:36.470 --> 00:17:37.660
at creation time of your window.

00:17:37.660 --> 00:17:41.500
This means you do have to call something
like createNewWindow to make that happen.

00:17:41.520 --> 00:17:43.740
Or you can just use a nib,
check the checkbox.

00:17:43.880 --> 00:17:45.200
There's a checkbox for this.

00:17:45.230 --> 00:17:47.130
And it's just magic.

00:17:47.300 --> 00:17:49.630
We also say use the
standard window handler.

00:17:49.710 --> 00:17:53.250
You don't absolutely have to,
but you'd be crazy not to,

00:17:53.320 --> 00:17:57.090
because it just does
so much stuff for you,

00:17:57.090 --> 00:17:58.360
honestly.

00:17:58.360 --> 00:17:59.490
You know,
there are people who come to us and say,

00:17:59.490 --> 00:18:01.440
"Oh, I'm not using the
standard window handler.

00:18:01.440 --> 00:18:02.000
How do I do this?

00:18:02.000 --> 00:18:04.060
How do I do that?" And then
we start to realize,

00:18:04.060 --> 00:18:06.260
man, we do a lot of stuff for people.

00:18:06.260 --> 00:18:10.520
So really, if you're going to call -- if
you're going to use composite mode,

00:18:10.520 --> 00:18:13.860
we really recommend you use
the standard window handler.

00:18:13.860 --> 00:18:15.800
They're a match made in heaven.

00:18:17.390 --> 00:18:22.090
So we've always supported like
a control hierarchy on Mac OS X.

00:18:22.090 --> 00:18:24.530
But when composited mode is on,
it's a little different.

00:18:24.560 --> 00:18:27.150
It's actually a bit deeper.

00:18:28.280 --> 00:18:30.350
In the past, we've had this concept
of the root control,

00:18:30.350 --> 00:18:34.530
and the root control essentially
represented your Windows content area.

00:18:34.960 --> 00:18:40.490
But in HIView,
the root is actually the structure.

00:18:40.880 --> 00:18:44.640
So that means that all of the window
widgets that you see in Mac OS X,

00:18:44.700 --> 00:18:47.760
Jaguar, Panther, they're all controls,
just like anything else.

00:18:47.840 --> 00:18:49.460
They never were before that release.

00:18:49.460 --> 00:18:50.990
It was always just an illusion.

00:18:51.100 --> 00:18:55.220
So we've done a lot of work to
really make all that stuff work.

00:18:55.230 --> 00:18:59.380
So now you have this concept where we
used to have this old root control,

00:18:59.380 --> 00:19:01.460
which is really the content,
and now you have this new root control,

00:19:01.460 --> 00:19:02.760
which is really the structure.

00:19:02.840 --> 00:19:05.690
So it's important to keep that
in mind when you're in this mode.

00:19:06.210 --> 00:19:13.730
: What happens to something like
create root control is that if you

00:19:13.830 --> 00:19:15.880
call it in the composite window,
you will get an error.

00:19:15.900 --> 00:19:20.300
It will tell you the root already exists.

00:19:20.300 --> 00:19:20.300
Now,

00:19:20.590 --> 00:19:22.620
If you call getRootControl,
what you'll get is the

00:19:22.620 --> 00:19:24.500
content view of the window.

00:19:24.550 --> 00:19:28.000
And this is to allow you to have
code that's compatible with the past.

00:19:28.000 --> 00:19:30.990
And you might have called getRootControl
and then embed control on that.

00:19:31.080 --> 00:19:35.210
That code will still
continue to work as expected.

00:19:35.540 --> 00:19:38.790
If you want the real root,
you call HIView.getRoot

00:19:38.810 --> 00:19:40.740
and pass the window ref.

00:19:41.660 --> 00:19:45.050
So, if you look at the two calls there,
they're equivalent.

00:19:45.160 --> 00:19:49.780
GetRootControl and
HIViewFindById using a control ID,

00:19:49.860 --> 00:19:55.980
in this case, khiviewWindowContentId,
which is defined in HIView.h,

00:19:56.070 --> 00:19:59.360
both of these calls will
yield the exact same call.

00:19:59.550 --> 00:20:00.400
Both work.

00:20:00.450 --> 00:20:03.190
The second is technically more correct.

00:20:05.180 --> 00:20:09.240
In the simplest of all worlds,
you'd have a window that used all toolbox

00:20:09.240 --> 00:20:11.600
controls and all would be blissful.

00:20:11.610 --> 00:20:14.210
And in that case,
all you have to do is go in and

00:20:14.240 --> 00:20:16.830
turn on the compositing attribute
and things would just work.

00:20:16.850 --> 00:20:19.840
I mean, really,
it's just that transparent to you.

00:20:19.850 --> 00:20:21.870
However,
there are some things that your code

00:20:21.870 --> 00:20:24.260
might be doing which might change.

00:20:24.290 --> 00:20:27.110
It depends on how far you go.

00:20:27.950 --> 00:20:32.910
So, for example, if you're calling set
and get control bounds,

00:20:33.520 --> 00:20:37.840
These are actually frame coordinates
when you're in composite mode,

00:20:37.980 --> 00:20:40.280
despite the name bounds.

00:20:40.420 --> 00:20:42.430
So it's important to keep that in mind.

00:20:42.520 --> 00:20:46.600
Get and set control bounds,
frame coordinates, and composite mode.

00:20:46.700 --> 00:20:50.010
So you have to look at everywhere
you're using that for a specific window

00:20:50.020 --> 00:20:52.940
that you might be dealing with and say,
all right,

00:20:52.940 --> 00:20:54.920
am I dealing with moving or resizing?

00:20:54.940 --> 00:20:59.260
Then I should probably use
HIView set frame or get frame.

00:20:59.320 --> 00:21:03.030
Am I dealing with drawing, hit testing,
or anything that's more local?

00:21:03.150 --> 00:21:05.700
I should use HIView get bounds.

00:21:06.520 --> 00:21:09.300
And you can convert points from
bound space or from view to view

00:21:09.300 --> 00:21:13.560
by using HIView Convert Point,
Rect, and Even Region.

00:21:14.960 --> 00:21:19.000
Another common problem that we
find is that you take some existing

00:21:19.090 --> 00:21:22.800
code with some existing controls,
with some existing bounds,

00:21:23.000 --> 00:21:24.370
and you just embed them.

00:21:24.500 --> 00:21:26.270
And then half your stuff went away.

00:21:26.350 --> 00:21:27.760
And you're wondering where it is.

00:21:27.830 --> 00:21:29.630
Well, it's probably living way
down below the bottom of your

00:21:29.630 --> 00:21:30.630
window and you can't see it.

00:21:30.640 --> 00:21:32.800
And it's been clipped out by its parent.

00:21:32.800 --> 00:21:37.120
And yes, we do clip to parent
in HIView all the time.

00:21:37.120 --> 00:21:39.880
There's no sometimes anymore.

00:21:40.150 --> 00:21:45.240
So this is caused by using basically
the wrong coordinate system.

00:21:45.240 --> 00:21:48.440
You're using port coordinates everywhere,
and you're trying to now embed

00:21:48.440 --> 00:21:51.960
that all in an HIView space where,
again, they're parent-relative.

00:21:51.960 --> 00:21:53.990
So if you had a group box
and a push button in it,

00:21:53.990 --> 00:21:57.930
which was supposed to be 20 pixels down,
you might find that it's way

00:21:57.930 --> 00:22:00.840
down now just because you're
in the wrong coordinate system.

00:22:00.840 --> 00:22:03.160
So these are things to keep in mind.

00:22:05.890 --> 00:22:09.280
Some more do's and don'ts.

00:22:09.280 --> 00:22:12.450
If you ever called draw one
control or update control,

00:22:12.460 --> 00:22:13.860
in general, don't.

00:22:13.860 --> 00:22:15.930
Instead,
just use hiv_set_needs_display if

00:22:15.930 --> 00:22:17.580
you really need to re-draw something.

00:22:17.580 --> 00:22:20.110
Though in general,
you probably won't need to

00:22:20.130 --> 00:22:24.120
do this because it'll be your
custom views or things like that

00:22:24.120 --> 00:22:26.610
that will invalidate themselves.

00:22:26.620 --> 00:22:32.200
I would say you almost never need to
do that from an external point of view.

00:22:32.200 --> 00:22:34.780
If you absolutely need
to draw immediately,

00:22:34.900 --> 00:22:37.500
you can use hiv_render on Panther.

00:22:37.510 --> 00:22:41.700
Technically,
you could use draw one control on Jaguar.

00:22:41.700 --> 00:22:44.070
But again, we're really trying to
emphasize the invalidation model

00:22:44.080 --> 00:22:45.220
over the direct draw model.

00:22:45.220 --> 00:22:47.280
So really try to focus on that.

00:22:47.280 --> 00:22:51.560
And only use direct drawing
if you absolutely have to.

00:22:51.560 --> 00:22:55.120
Because in truth, if you're going to use
something like hiv_render,

00:22:55.120 --> 00:22:58.010
you're essentially rendering all the
layers in the composite layer for

00:22:58.010 --> 00:23:00.090
the region that you're interested in.

00:23:00.230 --> 00:23:01.760
So it can be a little pricey.

00:23:01.850 --> 00:23:04.170
So you don't want to draw as
much as maybe you used to.

00:23:04.180 --> 00:23:05.120
Let it happen at event loop time.

00:23:05.120 --> 00:23:10.180
Where everything can be aggregated and
we have a better performance overall.

00:23:11.390 --> 00:23:13.260
If you ever called
Draw Control in current port,

00:23:13.260 --> 00:23:13.750
just don't.

00:23:13.840 --> 00:23:16.140
It doesn't work in composited mode.

00:23:16.140 --> 00:23:17.700
It just ain't gonna happen.

00:23:17.860 --> 00:23:22.100
So what you want to do instead is
if--you might be able to use something

00:23:22.100 --> 00:23:24.180
like HIView Create Offscreen Image.

00:23:24.260 --> 00:23:27.920
This is an API that allows you to just
take any control in your hierarchy and

00:23:27.920 --> 00:23:30.100
just create a CG image ref from it.

00:23:30.180 --> 00:23:31.550
And now you have a perfect image of that.

00:23:31.640 --> 00:23:34.090
You might be able to use that for
some of the cases that you were using

00:23:34.100 --> 00:23:37.980
Draw Control in current port for.

00:23:38.800 --> 00:23:42.500
And lastly,
if you've ever called Auto-Embed Control,

00:23:42.960 --> 00:23:45.020
it just isn't going to work as expected.

00:23:45.080 --> 00:23:48.430
This was invented for the Dialog Manager,
where we had a flattened little list,

00:23:48.430 --> 00:23:49.920
and we didn't really have a hierarchy.

00:23:50.060 --> 00:23:54.140
We were trying to build one
from that flattened list.

00:23:54.300 --> 00:23:56.580
So we kind of had to figure out
where things went and automatically

00:23:56.580 --> 00:23:58.150
embed things in one another.

00:23:58.230 --> 00:24:01.480
And it also assumes they're all important
coordinates and all these other things.

00:24:01.520 --> 00:24:04.850
It just isn't really going to
work at all in composited mode.

00:24:04.970 --> 00:24:08.110
So just use, you know,
HIView at Subview or even

00:24:08.120 --> 00:24:10.050
Embed Control directly.

00:24:11.880 --> 00:24:15.880
You might be asking yourself,
I have a dialogue manager dialogue.

00:24:15.960 --> 00:24:19.670
How do I make it support HIView?

00:24:20.260 --> 00:24:21.200
The answer?

00:24:21.200 --> 00:24:22.200
Use a nib.

00:24:22.200 --> 00:24:24.000
Yeah, good answer, huh?

00:24:24.260 --> 00:24:26.300
I mean,
I don't really have a good answer.

00:24:26.300 --> 00:24:27.270
This is the answer.

00:24:27.330 --> 00:24:30.000
You should switch to using nibs
because basically they're a lot

00:24:30.000 --> 00:24:31.380
better than the dialogue manager.

00:24:31.380 --> 00:24:33.690
You don't have to worry
about Pascal strings.

00:24:33.690 --> 00:24:35.180
I mean, everything's Unicode savvy.

00:24:35.180 --> 00:24:37.160
It's a lot more localizable.

00:24:37.160 --> 00:24:40.880
Plus you don't have to deal with
all of the -- you can only deal

00:24:40.970 --> 00:24:44.410
with a certain subset of controls,
and when you can't deal with those,

00:24:44.490 --> 00:24:46.960
then you need to create CNTL resources,
and then you have to

00:24:47.040 --> 00:24:48.000
put a PROC ID in there.

00:24:48.060 --> 00:24:50.000
And what does the value
in a max mean again?

00:24:50.000 --> 00:24:52.230
I don't remember for
this specific control.

00:24:52.240 --> 00:24:53.540
It's really just a big mess.

00:24:53.610 --> 00:24:56.600
So with the advent of
nibs and Carbon events,

00:24:56.600 --> 00:25:00.810
even at the beginning of Mac OS X,
we said dialogue manager, you know,

00:25:00.810 --> 00:25:03.000
start moving away from it.

00:25:03.000 --> 00:25:06.000
And we're still saying that,
especially in the context of HIView.

00:25:06.000 --> 00:25:13.190
So now we're going to talk about
how you can write your own views.

00:25:16.500 --> 00:25:20.150
Essentially, every view you do,
or any constant content that you have,

00:25:20.250 --> 00:25:21.850
has to be wrapped in an HIView.

00:25:21.950 --> 00:25:23.100
It's the law.

00:25:23.200 --> 00:25:25.400
And the reason is we want to
have a consistent behavior.

00:25:25.400 --> 00:25:28.690
We want to have one draw pipeline,
you know, and everything goes through

00:25:28.690 --> 00:25:29.800
the same bottleneck.

00:25:29.870 --> 00:25:31.450
This is important,
or else you can't do things

00:25:31.450 --> 00:25:33.480
like overlapping views,
because you could have people

00:25:33.480 --> 00:25:34.600
stomping on one another.

00:25:34.690 --> 00:25:40.390
It has to be all through
the same pipeline.

00:25:42.340 --> 00:25:44.900
So let's talk about how you write one.

00:25:44.970 --> 00:25:48.860
It's basically like you'd do
anything else that's HIObject-based.

00:25:48.860 --> 00:25:51.770
You register your view class
via the HIObject mechanism,

00:25:51.780 --> 00:25:55.410
so HIView, HIObject register subclass.

00:25:55.800 --> 00:26:02.880
And you can subclass HIView or one of
our existing controls as of Panther.

00:26:02.970 --> 00:26:04.320
In Jaguar, you couldn't really do that.

00:26:04.320 --> 00:26:06.150
We didn't export the class IDs.

00:26:06.170 --> 00:26:08.490
In Panther, we do export the class IDs.

00:26:08.550 --> 00:26:11.120
And don't go getting fancy trying
to use those class IDs on Jaguar.

00:26:11.320 --> 00:26:13.210
They might not work because
we actually twiddled the names

00:26:13.350 --> 00:26:15.420
between those two releases.

00:26:15.420 --> 00:26:18.480
So Panther forward,
you can actually subclass

00:26:18.500 --> 00:26:20.010
existing controls.

00:26:20.260 --> 00:26:25.030
And then all you have to do is just
create your view which HIObject create.

00:26:25.090 --> 00:26:27.630
And you pass an event
handler into your register.

00:26:27.660 --> 00:26:31.670
So once you create your object,
then you're up and running.

00:26:31.670 --> 00:26:34.200
And then what you need to do is
just handle the Carbon events.

00:26:34.250 --> 00:26:36.320
Pretty easy.

00:26:37.350 --> 00:26:39.980
Let's first talk about the draw event.

00:26:40.060 --> 00:26:43.980
Chances are, if you're running an HIView,
you want to draw.

00:26:43.980 --> 00:26:45.880
So we send you a Carbon event
so you can do that.

00:26:45.880 --> 00:26:47.320
K event control draw.

00:26:47.350 --> 00:26:49.980
It takes two parameters,
or it receives two parameters.

00:26:50.000 --> 00:26:52.480
The first is a context ref.

00:26:52.490 --> 00:26:54.280
This is where you draw your bits.

00:26:54.310 --> 00:26:55.940
You should always draw
in this context ref.

00:26:55.940 --> 00:26:58.580
Do not create a context of your own.

00:26:58.580 --> 00:27:02.500
This will be important as we move toward
being able to print the view system,

00:27:02.500 --> 00:27:04.980
which, honestly,
we're not too far away from,

00:27:04.980 --> 00:27:06.540
but it won't make Panther.

00:27:07.150 --> 00:27:10.460
The second parameter we
give you is a draw region.

00:27:10.460 --> 00:27:12.000
You are actually clipped to this region.

00:27:12.000 --> 00:27:15.910
So once your draw handler is called,
clipping is set up,

00:27:15.980 --> 00:27:18.000
and so is the G-state.

00:27:18.000 --> 00:27:19.290
We save G-state for you.

00:27:19.300 --> 00:27:22.770
You can draw like crazy, transform,
rotate, do all types of crazy stuff,

00:27:22.800 --> 00:27:24.300
and leave the G-state trash.

00:27:24.300 --> 00:27:26.300
We're going to restore it
right after the draw event,

00:27:26.300 --> 00:27:27.240
so it doesn't matter.

00:27:27.490 --> 00:27:30.440
And actually it would be faster
overall if you don't save and

00:27:30.460 --> 00:27:32.210
restart a G-state yourself.

00:27:35.210 --> 00:27:38.000
The other thing about the draw region
that's important is you might want to

00:27:38.010 --> 00:27:39.650
use this if you have a complex control.

00:27:39.740 --> 00:27:42.740
I mentioned earlier that
you might want to use HIView

00:27:42.740 --> 00:27:44.740
set-needs-display-in-region.

00:27:44.740 --> 00:27:47.520
If you use that to just invalidate
a portion of your control,

00:27:47.520 --> 00:27:49.880
when you get called back,
you might be called back to just

00:27:49.880 --> 00:27:52.460
redraw that portion of the control,
and that will be reflected

00:27:52.460 --> 00:27:53.600
in your draw region.

00:27:53.680 --> 00:27:56.140
So you can use that region to kind
of intersect it with the parts of

00:27:56.160 --> 00:28:01.530
your control and just draw the pieces
of your control that intersect that.

00:28:03.680 --> 00:28:06.800
Next, we want to talk about
calculating regions.

00:28:06.800 --> 00:28:08.260
We have a Carbon event for that.

00:28:08.350 --> 00:28:10.510
K event control get region.

00:28:10.690 --> 00:28:13.600
In general, there are two regions
that we really care about:

00:28:13.600 --> 00:28:15.340
structure and opaque region.

00:28:15.390 --> 00:28:18.060
There's a new one in Panther called
the clickable region.

00:28:18.150 --> 00:28:21.010
This actually gets used for
things like async dragging,

00:28:21.100 --> 00:28:24.010
especially on metal windows where you
want to be able to click through things,

00:28:24.100 --> 00:28:26.840
like text and other things like that.

00:28:26.870 --> 00:28:29.850
Regions are always in
HIView bounds coordinates,

00:28:29.850 --> 00:28:31.710
never in frame coordinates.

00:28:34.090 --> 00:28:37.120
Structure region is essentially
where you're going to draw,

00:28:37.120 --> 00:28:40.000
and it can extend outside your bounds.

00:28:40.040 --> 00:28:41.100
That's okay.

00:28:41.220 --> 00:28:44.400
It's a little weird to some, I agree,
but it's kind of the way

00:28:44.400 --> 00:28:45.220
things have always been.

00:28:45.240 --> 00:28:48.010
And it's also convenient in a way,
because we can do things like focus

00:28:48.030 --> 00:28:52.500
rings and have adornments that draw
outside of the natural view bounds.

00:28:52.550 --> 00:28:55.360
And this can be helpful,
because then the metrics of

00:28:55.360 --> 00:28:58.850
the actual view don't change,
even though we might change the

00:28:58.850 --> 00:29:01.260
metrics of how we adorn things.

00:29:01.750 --> 00:29:06.200
So, for example, as the edit text field
gets and releases focus,

00:29:06.230 --> 00:29:12.280
you might want to extend outside
and then contract back in.

00:29:12.440 --> 00:29:15.670
If you don't respond to this event,
we will assume that your structure

00:29:15.670 --> 00:29:16.810
region is just your bounds.

00:29:16.820 --> 00:29:17.260
That's fine.

00:29:17.300 --> 00:29:20.380
You don't need to respond
to the getRegion event.

00:29:20.400 --> 00:29:24.090
But if you do need to do
things like focus rings and

00:29:24.090 --> 00:29:29.400
you are changing your shape,
that might happen like at setFocusTime.

00:29:29.400 --> 00:29:33.400
So we'll call you with a setFocusPart
event and you'll maybe say,

00:29:33.400 --> 00:29:35.400
"Alright, I'm focused now.

00:29:35.400 --> 00:29:38.460
I know I'm going to be bigger,
so I'm going to call HIView reshape

00:29:38.460 --> 00:29:41.930
structure." And that just tells us,
"Oh, something's changed.

00:29:41.930 --> 00:29:44.700
We need to re-query your structure
region and re-compute and

00:29:44.730 --> 00:29:48.400
re-invalidate everything." And we
just do it automatically for you.

00:29:48.400 --> 00:29:49.400
And there's the API.

00:29:49.400 --> 00:29:53.100
Very easy to call at
the bottom of the slide.

00:29:54.750 --> 00:29:59.500
The opaque region is used to help
us determine what's basically

00:30:00.140 --> 00:30:04.530
visible below you in the hierarchy,
so what's behind you.

00:30:04.580 --> 00:30:07.560
This is used to help us optimize drawing.

00:30:08.130 --> 00:30:12.030
And also is used to determine
what the window's opaque region.

00:30:12.130 --> 00:30:14.710
Basically, we take the aggregate of
all of the opaque regions of

00:30:14.710 --> 00:30:16.690
all the views in the window,
and we just kind of ship that off to

00:30:16.690 --> 00:30:19.220
the Windows server so that it knows,
all right,

00:30:19.240 --> 00:30:23.980
these regions of the window are opaque,
and I can use that information

00:30:24.000 --> 00:30:26.370
to maybe do fast splitting for
that section of the window.

00:30:26.430 --> 00:30:28.730
And I know that nothing can show through.

00:30:30.090 --> 00:30:34.960
If you don't handle our
request to give us this region,

00:30:34.960 --> 00:30:36.830
we will assume you are transparent.

00:30:36.890 --> 00:30:38.090
That does not mean you do not draw.

00:30:38.260 --> 00:30:40.680
That just means that you
might have holes in yourself,

00:30:40.740 --> 00:30:44.040
or maybe sometimes you are transparent,
or you're small enough

00:30:44.040 --> 00:30:45.510
that it doesn't matter.

00:30:45.570 --> 00:30:53.100
In general, if you have an opaque region,
in general, you should make views opaque

00:30:53.840 --> 00:30:55.400
that are rather large.

00:30:55.580 --> 00:30:59.640
Smaller views being opaque actually
chop up the views behind it,

00:30:59.710 --> 00:31:02.330
and that makes for a
very complex clip region.

00:31:02.370 --> 00:31:06.030
And what happens oftentimes is that it
ends up being more expensive to draw

00:31:06.550 --> 00:31:08.680
with the clip than without the clip.

00:31:08.770 --> 00:31:11.630
So unless you have a really big region,
I mean a big view that's going

00:31:11.680 --> 00:31:15.810
to span most of the window,
you might not want to do this.

00:31:15.880 --> 00:31:18.760
But we will use it, and we will know,
all right, we don't need to draw the

00:31:18.830 --> 00:31:20.450
metal background of the window.

00:31:20.480 --> 00:31:22.040
Metal's very expensive to render.

00:31:22.150 --> 00:31:25.400
So if you have a data
browser or something that's

00:31:25.400 --> 00:31:28.990
spanning it that you wrote,
we know that we don't have to draw

00:31:29.190 --> 00:31:33.270
that metal behind that big area,
and that saves some time.

00:31:33.880 --> 00:31:38.940
If your opaque region changes on the fly,
and it can, you can call either

00:31:38.940 --> 00:31:43.130
HIView Reshape Structure,
which is available in Jaguar,

00:31:43.230 --> 00:31:45.150
or in Panther,
you can call a newer API called

00:31:45.220 --> 00:31:46.290
HIView Region Change.

00:31:46.300 --> 00:31:48.140
It's a much more specific API.

00:31:48.200 --> 00:31:50.800
You're going to tell us,
"My opaque region changed." And we'll go,

00:31:50.800 --> 00:31:54.670
"Okay." And we'll recompute everything,
and we'll know that next event loop time,

00:31:54.670 --> 00:31:57.300
we're going to readjust the
opaque region of the window.

00:31:57.300 --> 00:31:59.290
But that API won't invalidate.

00:31:59.300 --> 00:32:02.280
So you can do, like, multiple things,
including HIView Region Change,

00:32:02.300 --> 00:32:05.730
and then maybe invalidate
yourself if you really need to.

00:32:09.770 --> 00:32:11.760
One thing about regions is
that you generally want to be

00:32:11.820 --> 00:32:16.340
square for maximum performance.

00:32:16.340 --> 00:32:18.000
The squarer the better.

00:32:18.030 --> 00:32:22.110
And how can you be more
square than square?

00:32:22.810 --> 00:32:26.060
The idea here is you want to
use Alpha to define complex

00:32:26.060 --> 00:32:29.000
regions and not a complex region.

00:32:29.060 --> 00:32:32.040
It's much easier, and the graphic system
is designed this way.

00:32:32.040 --> 00:32:36.060
So really take advantage of
Alpha and just use square regions.

00:32:36.160 --> 00:32:38.940
Every window that we have has
a square structure region.

00:32:38.940 --> 00:32:40.780
We don't use complex shapes anymore.

00:32:40.850 --> 00:32:42.760
We just use Alpha to
punch out the corners.

00:32:42.830 --> 00:32:44.710
It's much easier, too.

00:32:45.930 --> 00:32:47.690
But, you know,
for hit testing and things like that,

00:32:47.700 --> 00:32:52.200
if you have a view that is essentially
a circle in the corners where

00:32:52.200 --> 00:32:54.940
you would normally punch through,
you might want a click region

00:32:54.940 --> 00:32:57.110
that just represents a circle.

00:32:57.190 --> 00:33:00.040
In those cases,
it's perfectly fine to have a complex

00:33:00.180 --> 00:33:02.620
region to describe that because,
you know,

00:33:02.710 --> 00:33:07.400
hit testing that view happens much less
frequently than re-rendering that view.

00:33:10.640 --> 00:33:15.160
I want to touch on control features.

00:33:15.260 --> 00:33:17.190
For a long time,
we've had this concept of features,

00:33:17.190 --> 00:33:21.360
ever since Apparence 1.0.

00:33:21.420 --> 00:33:22.910
Ultimately,
what they do is they advertise

00:33:22.980 --> 00:33:25.250
the abilities of a view.

00:33:26.860 --> 00:33:31.540
So, for example, you would tell us, "Oh,
I support embedding.

00:33:31.540 --> 00:33:37.320
I have, uh,
I want focus on click," things like that.

00:33:37.960 --> 00:33:40.690
And we have some new features that
we're introducing in Panther as well,

00:33:40.690 --> 00:33:44.590
like the isOpaque bit,
which I'm going to cover in a little bit.

00:33:44.670 --> 00:33:47.170
On Jaguar and Prior,

00:33:47.880 --> 00:33:52.300
The only way to specify these features
was at K event control initialize time.

00:33:52.300 --> 00:33:53.300
We would send you this thing.

00:33:53.300 --> 00:33:56.890
This is kind of like the analogous,
the Carbon event that's analogous

00:33:57.010 --> 00:34:02.040
to the old control init event or
message from the Defproc days.

00:34:02.110 --> 00:34:06.620
And in response to this initialize event,
you're expected to give us your features,

00:34:06.700 --> 00:34:10.070
and then we would hold onto that,
and they were immutable.

00:34:10.550 --> 00:34:13.170
These days in Panther, that's changed.

00:34:13.210 --> 00:34:14.850
You can change your features on the fly.

00:34:14.910 --> 00:34:16.460
You can say, "I'm going to better." No,
I'm not.

00:34:16.460 --> 00:34:16.820
Yes, I am.

00:34:16.820 --> 00:34:19.360
So you can write your
own schizophrenic views.

00:34:19.360 --> 00:34:22.150
And the other thing that
you can do is -- I mean,

00:34:22.150 --> 00:34:24.630
this comes in really handy, because,
yeah, you might want to say,

00:34:24.630 --> 00:34:26.280
"I'm opaque now," or, "I'm not opaque.

00:34:26.320 --> 00:34:27.690
I want clicks to go through me.

00:34:27.690 --> 00:34:33.150
Wait, no, I don't." And we use this,
for example -- consider a document

00:34:33.510 --> 00:34:38.430
So, you have a document window,
and the content region is opaque,

00:34:38.490 --> 00:34:40.380
and clicks hit it.

00:34:40.410 --> 00:34:40.930
Okay?

00:34:40.940 --> 00:34:44.400
It's like a solid, you know, thing.

00:34:45.590 --> 00:34:50.210
When you specify the metal attribute,
do you see that area anymore?

00:34:50.210 --> 00:34:50.990
No.

00:34:51.080 --> 00:34:53.260
And that's because we actually
take--it doesn't go away.

00:34:53.260 --> 00:34:54.100
It's still there.

00:34:54.150 --> 00:34:56.060
But now we make it transparent.

00:34:56.060 --> 00:34:57.260
It's no longer opaque.

00:34:57.270 --> 00:34:58.680
And we allow clicks to go through.

00:34:58.730 --> 00:35:02.130
And we do that on the
fly via this mechanism.

00:35:04.150 --> 00:35:08.430
So three interesting features that I want
to touch on for various reasons are,

00:35:08.430 --> 00:35:09.730
number one,

00:35:09.820 --> 00:35:11.700
KHIView is opaque.

00:35:11.860 --> 00:35:13.700
This marks your entire view is opaque.

00:35:13.700 --> 00:35:17.700
And this is just kind of a clue to us
so that we don't have to ask you for it.

00:35:17.700 --> 00:35:19.290
I mean,
asking you for the region basically

00:35:19.290 --> 00:35:21.660
involves us creating a Carbon event,
stuffing some parameters in,

00:35:21.720 --> 00:35:23.990
sending it off to you,
getting back the result, and then, "Oh,

00:35:24.080 --> 00:35:24.390
hey, a region.

00:35:24.440 --> 00:35:27.050
Great." But if you know that your
entire bounds are opaque or your

00:35:27.050 --> 00:35:31.730
entire structure region is opaque,
just tell us that via the feature bit,

00:35:31.730 --> 00:35:33.690
and we save some time.

00:35:37.380 --> 00:35:41.300
Likewise, KHIView ignores clicks.

00:35:41.300 --> 00:35:43.480
As I mentioned,
we have this clickable region.

00:35:43.560 --> 00:35:50.100
This allows you to now specify that area
of your control where you accept clicks.

00:35:50.270 --> 00:35:54.360
Anything that -- any point that
might hit outside that region will

00:35:54.360 --> 00:35:56.180
go through to views behind you.

00:35:56.180 --> 00:35:59.050
This was never the case before.

00:36:00.460 --> 00:36:03.230
But if you know that
none of me is clickable,

00:36:03.380 --> 00:36:05.620
you can specify khiview ignores clicks.

00:36:05.820 --> 00:36:09.550
And again, like the opaque region,
we won't ask you.

00:36:10.400 --> 00:36:13.120
So like our text control specifies
this rather than handling the event.

00:36:13.120 --> 00:36:17.460
The last one is KHIViewDoesNotDraw.

00:36:17.460 --> 00:36:19.370
Now,
I did say before that chances are you

00:36:19.370 --> 00:36:21.800
have a view and it wants it to draw.

00:36:21.800 --> 00:36:23.940
The answer is, well, sometimes.

00:36:23.940 --> 00:36:25.770
You might have a view that's
just a container view,

00:36:25.890 --> 00:36:26.730
and it doesn't draw.

00:36:26.770 --> 00:36:28.700
It's not supposed to respond to clicks.

00:36:28.730 --> 00:36:32.660
It's just there to group other items so
that you can operate on them as a unit.

00:36:32.750 --> 00:36:35.880
So the combination of things like
ignores clicks and does not draw

00:36:35.880 --> 00:36:37.480
allows you to accomplish that.

00:36:37.590 --> 00:36:39.800
And that's That's exactly what
our content view does when

00:36:39.800 --> 00:36:41.910
it goes on to a metal window.

00:36:42.210 --> 00:36:44.800
and we also save work because we know,
oh, you don't draw.

00:36:44.930 --> 00:36:47.940
So, hmm, I don't have to actually
call you to draw anymore,

00:36:47.940 --> 00:36:51.400
and I don't have to set up a G-state
for you or any of that sort of thing.

00:36:51.470 --> 00:36:55.230
And we also know that we can be
more efficient when we move you.

00:36:55.390 --> 00:36:58.700
Normally, when we move your view,
we're going to invalidate the

00:36:58.700 --> 00:37:00.210
old area and the new area.

00:37:00.250 --> 00:37:02.300
With this, we say, "Oh, hey, wait,
you don't draw,

00:37:02.300 --> 00:37:06.570
so I'm just going to invalidate
the areas that your subviews are,

00:37:06.640 --> 00:37:09.460
which might be a lot smaller,
so we can make things

00:37:09.460 --> 00:37:11.010
more efficient that way."

00:37:12.000 --> 00:37:13.740
Can we do code in the demo?

00:37:13.810 --> 00:37:15.910
I'm getting the thumbs up.

00:37:16.030 --> 00:37:19.170
All right.

00:37:19.220 --> 00:37:21.170
Will anything explode?

00:37:24.180 --> 00:37:25.860
Everything looks good there?

00:37:25.860 --> 00:37:27.540
Swear to God, hope to die,
stick an Italy in your eye?

00:37:27.540 --> 00:37:29.280
Yeah, we're good.

00:37:31.370 --> 00:37:35.690
Alright, I won't go through Rebounder,
but I did want to go through some of

00:37:35.690 --> 00:37:39.810
the other things that I was unable
to go through a little earlier.

00:37:44.710 --> 00:37:46.800
The first is this little app.

00:37:46.800 --> 00:37:48.700
I think I showed this last year.

00:37:48.700 --> 00:37:54.560
But basically, what it is is just proof
that I'm not lying to you,

00:37:54.580 --> 00:37:58.520
and indeed,
the hierarchy of a window is deeper.

00:37:58.770 --> 00:38:02.450
So what we're looking at here
is the representation of the

00:38:02.450 --> 00:38:09.220
hierarchy of that window that the
chasing arrows is running in there.

00:38:09.220 --> 00:38:16.230
So basically we have
our window frame here.

00:38:16.230 --> 00:38:16.230
Stop that.

00:38:16.230 --> 00:38:16.230
All

00:38:18.180 --> 00:38:20.320
From there we have the window title,
and you'll notice that they'll

00:38:20.320 --> 00:38:22.660
highlight as I go through them.

00:38:22.660 --> 00:38:24.660
We have the grow box,
which you can't see right now.

00:38:24.750 --> 00:38:26.410
And then we have the
window buttons up there.

00:38:26.500 --> 00:38:27.910
They're all real views.

00:38:28.090 --> 00:38:29.200
What does that mean?

00:38:29.220 --> 00:38:34.190
Well, it means that I could just
take it and put it right here.

00:38:34.210 --> 00:38:37.350
Maybe I want it bigger.

00:38:37.370 --> 00:38:39.760
You know what the best part is?

00:38:39.790 --> 00:38:41.580
It still works.

00:38:47.750 --> 00:38:49.070
So that, I mean, this is pretty cool.

00:38:49.160 --> 00:38:51.080
So now, you know, everything's a view.

00:38:51.080 --> 00:38:54.340
And you can do really
cool stuff with that.

00:38:58.730 --> 00:39:01.040
But basically, you know,
realize that we do have, you know,

00:39:01.040 --> 00:39:04.090
a deeper hierarchy now,
and there are diff--you know,

00:39:04.090 --> 00:39:07.310
the old get root control does
not mean the real root anymore.

00:39:07.360 --> 00:39:09.890
That's the important thing
to take away from that.

00:39:11.100 --> 00:39:13.640
The other thing I wanted to show
was something we also showed last

00:39:13.760 --> 00:39:16.500
year about some of the things
that we do with views these days.

00:39:16.630 --> 00:39:20.000
There are some views that
are compositing only.

00:39:20.150 --> 00:39:22.400
One of them is ImageView,
the other is ScrollView.

00:39:22.510 --> 00:39:25.390
One of them is TextView.

00:39:25.800 --> 00:39:28.560
ImageView we may try to make work
in composite and non-composite,

00:39:28.560 --> 00:39:32.120
but some of them are a little more
complex than that and are... the

00:39:32.120 --> 00:39:34.540
problem's a little harder to solve.

00:39:34.580 --> 00:39:36.060
So...

00:39:36.390 --> 00:39:37.360
Here's our image view.

00:39:37.360 --> 00:39:38.300
It's pretty exciting.

00:39:38.300 --> 00:39:39.530
Look, an image.

00:39:39.610 --> 00:39:40.560
Okay.

00:39:40.640 --> 00:39:41.180
Well, that was fun.

00:39:41.180 --> 00:39:42.440
All right, so now ScrollView.

00:39:42.600 --> 00:39:46.860
ScrollView is a little more interesting
because it manages all the stuff you

00:39:46.860 --> 00:39:50.590
need to deal with with scroll bars,
including things like auto-hiding the

00:39:50.800 --> 00:39:53.370
scroll bars when the image is full-size.

00:39:53.470 --> 00:39:57.170
So we take care of all of that for you,
and we supply this protocol called

00:39:57.180 --> 00:39:58.860
the K-event -- what is it called?

00:39:58.860 --> 00:40:02.910
K-event scrollable protocol,
and you just handle a Carbon event,

00:40:02.990 --> 00:40:05.690
a couple of Carbon events
that you will ask,

00:40:05.840 --> 00:40:07.440
like, a target view for.

00:40:07.480 --> 00:40:09.150
How big are you?

00:40:09.150 --> 00:40:10.820
What's the available view size?

00:40:10.840 --> 00:40:11.830
What's your line height?

00:40:11.930 --> 00:40:14.210
Things like that,
so that the ScrollView knows

00:40:14.210 --> 00:40:15.360
how to operate on it.

00:40:15.660 --> 00:40:17.980
We highly recommend that people
use the ScrollView because then

00:40:17.980 --> 00:40:22.300
as we make changes to the way
things scroll in the interface,

00:40:22.400 --> 00:40:26.720
everybody will get that stuff for free,
rather than everybody rolling their own.

00:40:26.850 --> 00:40:31.080
One thing I just want to demonstrate
just for grins is that --

00:40:31.790 --> 00:40:35.400
Last year I had a BMW roundel in
here and I got in trouble for that,

00:40:35.400 --> 00:40:38.180
but anyways,
I won't get in trouble this year.

00:40:38.180 --> 00:40:40.590
Or maybe I will.

00:40:40.590 --> 00:40:40.590
Alright, so...

00:40:41.420 --> 00:40:46.730
The cool thing about this really is
that that view is composited at the

00:40:46.730 --> 00:40:48.500
same-- it's a sibling of the scroll view.

00:40:48.500 --> 00:40:50.630
And you notice that it's actually
drawing over the scroll view,

00:40:50.640 --> 00:40:56.000
in fact, over the scroll bars,
and that it even composites fine.

00:40:56.000 --> 00:40:58.220
And I get great performance out of this.

00:40:58.240 --> 00:40:59.640
So it's really fast.

00:40:59.690 --> 00:41:01.050
That is one of the things you
want to take away from this.

00:41:01.160 --> 00:41:03.120
HIView is fast.

00:41:03.180 --> 00:41:06.510
We've really optimized it,
especially in Panther.

00:41:08.960 --> 00:41:11.800
Now let's look at some of
the problems that can happen.

00:41:11.800 --> 00:41:14.790
Do we have Xcode?

00:41:14.790 --> 00:41:16.800
Yes, we do.

00:41:16.800 --> 00:41:21.210
So here's a little...

00:41:23.400 --> 00:41:27.540
We call character edit,
which apparently is building right now.

00:41:27.580 --> 00:41:31.240
And while it builds,
I'll just tell you that what it is,

00:41:31.240 --> 00:41:34.900
it's a visual description of
what is wrong with the past,

00:41:34.900 --> 00:41:38.950
okay,
and how the future is pretty bright.

00:41:40.130 --> 00:41:41.060
Eventually it will build.

00:41:41.060 --> 00:41:42.190
Okay, I gotta keep talking.

00:41:42.360 --> 00:41:46.590
Did I mention that HIView was fast?

00:41:46.590 --> 00:41:46.590
Yes.

00:41:46.960 --> 00:41:49.570
But, you know, more importantly,
in the past there were these

00:41:49.570 --> 00:41:50.920
problems with drawing order.

00:41:50.950 --> 00:41:53.430
Drawing order was always
different than click order.

00:41:53.430 --> 00:41:58.160
And we're going to actually see an
example of this in about ten years.

00:41:59.670 --> 00:42:02.380
Linking, all right.

00:42:02.560 --> 00:42:03.730
All right, so here it is.

00:42:03.830 --> 00:42:06.100
So we see Guy here.

00:42:06.100 --> 00:42:07.860
But I can't click on any of these things.

00:42:07.920 --> 00:42:09.240
Nothing works.

00:42:09.320 --> 00:42:13.740
And that is because in order to
get the picture visually behind

00:42:14.230 --> 00:42:19.110
all of the other controls,
it also happens to grab the clicks first,

00:42:19.250 --> 00:42:21.350
which really sucks.

00:42:21.490 --> 00:42:23.790
So let's fix that.

00:42:30.520 --> 00:42:34.000
So we're just going to
run Interface Builder.

00:42:34.060 --> 00:42:35.420
And here is the window.

00:42:35.610 --> 00:42:40.120
And if I select the window
and turn on compositing,

00:42:43.700 --> 00:42:44.660
Whew, that was tough.

00:42:44.820 --> 00:42:45.450
OK.

00:42:45.590 --> 00:42:47.200
So anyways, it works now.

00:42:47.230 --> 00:42:49.840
And I can click, and everything's great.

00:42:50.310 --> 00:42:53.300
Now, notice that it kind of lags,
doesn't it?

00:42:53.300 --> 00:42:54.810
Yeah, that's not so great.

00:42:54.900 --> 00:42:57.360
Let's fix that, too, while we're in here.

00:42:58.890 --> 00:43:01.880
So we'll go back to the nib
and we'll look at this thing.

00:43:01.880 --> 00:43:06.260
And what you see is that we
have a picture control in here.

00:43:06.260 --> 00:43:08.520
Let's get rid of that.

00:43:08.520 --> 00:43:10.730
And instead,
what we're going to do is we're

00:43:10.730 --> 00:43:13.470
going to drag in an image view.

00:43:13.480 --> 00:43:15.820
And we'll just stick that there.

00:43:26.500 --> 00:43:28.500
Hopefully I'll give it the right ID.

00:43:28.500 --> 00:43:33.480
I just want 440 by 440.

00:43:33.480 --> 00:43:36.480
Exactly.

00:43:37.300 --> 00:43:40.850
And now,
we just need to send this to the back,

00:43:40.850 --> 00:43:44.110
take our user pane,
and go back into position.

00:43:44.900 --> 00:43:47.260
Save it.

00:43:47.260 --> 00:43:49.430
It's close enough.

00:43:49.450 --> 00:43:50.930
And run it again.

00:43:50.970 --> 00:43:55.970
Now, as you can see,
I indeed used the wrong ID.

00:43:58.100 --> 00:44:04.100
So we can fix that very easily
thanks to Interface Builder.

00:44:06.610 --> 00:44:19.590
1.

00:44:19.590 --> 00:44:19.590
Save that.

00:44:19.590 --> 00:44:19.590
Build.

00:44:19.590 --> 00:44:19.590
Run.

00:44:19.590 --> 00:44:19.590
Oh, I hate you.

00:44:19.590 --> 00:44:19.590
Now I have to look at code.

00:44:19.590 --> 00:44:19.590
That makes things

00:44:21.700 --> 00:44:26.880
There's a couple of things that, yeah,
image one.

00:44:27.720 --> 00:44:31.500
If it doesn't work, well then, oh well.

00:44:31.530 --> 00:44:32.300
Let me just check.

00:44:32.350 --> 00:44:34.380
It was image one.

00:44:39.200 --> 00:44:45.900
[Transcript missing]

00:44:47.900 --> 00:44:49.900
This guy pinged.

00:44:49.900 --> 00:44:52.800
Oh, guy looks like Homestar Runner.

00:44:52.800 --> 00:44:54.360
I don't know why.

00:44:55.420 --> 00:44:56.750
There he is.

00:44:56.790 --> 00:44:57.820
OK.

00:44:57.910 --> 00:45:00.560
So the interesting thing
is we have this running.

00:45:00.560 --> 00:45:01.610
But now, look at that.

00:45:01.720 --> 00:45:02.550
It sticks right to the mouse.

00:45:02.670 --> 00:45:04.060
Now I'm in a PowerBook so it shows it.

00:45:04.090 --> 00:45:06.800
I was afraid I couldn't show this demo
because we're on these fast machines.

00:45:06.850 --> 00:45:10.070
But on this PowerBook, on this nice,
slow PowerBook, I could do this.

00:45:10.190 --> 00:45:11.850
This also happens to happen
on my machine at work.

00:45:12.000 --> 00:45:15.440
But anyways, that's another story.

00:45:15.500 --> 00:45:18.430
But the cool thing is that ImageView is
really optimized for HIView.

00:45:18.440 --> 00:45:21.700
It's just much faster than
using a picture or drawing

00:45:21.700 --> 00:45:23.100
using CGImageRef itself.

00:45:23.330 --> 00:45:27.280
So we highly encourage you to
use ImageView wherever possible.

00:45:27.500 --> 00:45:29.800
Now the other thing that
it didn't show is that,

00:45:29.800 --> 00:45:32.390
hey, we've actually embedded all of
this stuff into a scroll view.

00:45:32.510 --> 00:45:34.140
We just didn't show you that.

00:45:34.230 --> 00:45:35.820
So that's pretty neat.

00:45:36.600 --> 00:45:39.770
I can also scroll everything right over
the picture and you get full compositing.

00:45:39.770 --> 00:45:40.490
Beautiful.

00:45:40.580 --> 00:45:41.600
Everything's cool.

00:45:41.600 --> 00:45:45.490
Alright,
so that took longer than it should have.

00:45:50.940 --> 00:45:53.760
One of the other things I wanted
to show you was just about the

00:45:53.760 --> 00:45:55.440
pervasiveness of the view system.

00:45:55.540 --> 00:45:58.080
So, you know, we showed views,
and those are great.

00:45:58.110 --> 00:46:01.260
But we also touched on,
in the toolbox session,

00:46:01.330 --> 00:46:04.510
things about being able to draw in menus.

00:46:04.550 --> 00:46:05.810
So let's take a look at some of those.

00:46:06.110 --> 00:46:08.710
And this is a standard
menu views example.

00:46:08.790 --> 00:46:09.390
It's there.

00:46:09.400 --> 00:46:10.750
It's on the website right now.

00:46:10.900 --> 00:46:11.580
You can download it.

00:46:11.580 --> 00:46:12.120
You can play with it.

00:46:12.140 --> 00:46:16.940
But in case you haven't,
let's just take a quick look.

00:46:17.950 --> 00:46:20.240
Menus can now be driven through HIView.

00:46:20.240 --> 00:46:22.290
You don't have to use MDEFs anymore.

00:46:22.320 --> 00:46:24.940
"Oh, hallelujah," you're saying.

00:46:25.050 --> 00:46:28.330
So here's a standard menu,
and that looks great, right?

00:46:28.870 --> 00:46:31.800
But now you can do cool things like
have pictures in the background.

00:46:31.970 --> 00:46:34.330
You can have custom views like this.

00:46:34.460 --> 00:46:38.670
I mean, this is basically the basis for
what the Finder ended up using.

00:46:39.070 --> 00:46:44.180
Just a simple custom menu with some text,
color grid, all types of neat stuff.

00:46:44.220 --> 00:46:47.680
And the coolest of all,
the volume control, right?

00:46:47.780 --> 00:46:50.140
So here we have a menu that
just has other views in it.

00:46:50.210 --> 00:46:54.020
And yes,
it actually kind of sort of works.

00:46:54.100 --> 00:46:56.560
And in fact, I found out earlier that if
I click the Press button,

00:46:56.560 --> 00:47:00.150
It actually opens up the sound panel.

00:47:00.830 --> 00:47:01.800
So that's cool.

00:47:01.800 --> 00:47:03.820
So you can use these things anywhere.

00:47:03.890 --> 00:47:07.020
Now, that was views, menus.

00:47:07.340 --> 00:47:08.030
What about windows?

00:47:08.110 --> 00:47:09.970
Well, we can show you a window.

00:47:13.580 --> 00:47:16.300
There you go.

00:47:16.380 --> 00:47:19.630
That is a completely custom view
written completely in HIView

00:47:19.940 --> 00:47:22.910
with controls embedded within it.

00:47:23.060 --> 00:47:25.440
I wrote this last night.

00:47:25.680 --> 00:47:29.110
It only took me about--
I won't even tell you.

00:47:31.270 --> 00:47:32.540
Anyways, but here's the other thing.

00:47:32.540 --> 00:47:34.610
This is that same view
embedded in a window.

00:47:34.640 --> 00:47:36.110
It's the same view.

00:47:36.180 --> 00:47:37.920
And whenever you would
click on this view,

00:47:37.920 --> 00:47:39.790
I have a handler in there
so that when I get clicked,

00:47:39.800 --> 00:47:40.970
I call drag window.

00:47:41.140 --> 00:47:43.950
So if I click in this view,
I call drag window.

00:47:43.960 --> 00:47:44.960
So it just kind of works.

00:47:45.110 --> 00:47:47.020
But the important thing
is it's just a view.

00:47:47.090 --> 00:47:48.750
You can be deployed
anywhere and in any way.

00:47:48.960 --> 00:47:52.280
And you learn that one model,
deploy everywhere.

00:47:52.510 --> 00:47:53.850
OK.

00:48:02.000 --> 00:48:03.300
I just launched the wrong thing?

00:48:03.300 --> 00:48:07.580
Don't open.

00:48:07.580 --> 00:48:08.440
Yes, OK.

00:48:08.480 --> 00:48:11.120
I mean, I didn't speak that high.

00:48:17.220 --> 00:48:20.400
Okay, one of the things I want to show
you about at this point-- See,

00:48:20.400 --> 00:48:21.670
that was the before demo.

00:48:21.820 --> 00:48:23.890
Now it's the now demo.

00:48:24.050 --> 00:48:27.400
What I wanted to do was go through
some code here to exactly show you

00:48:27.400 --> 00:48:29.660
the steps involved in building a view.

00:48:29.740 --> 00:48:32.040
So we're going to use the
simplest case right here,

00:48:32.040 --> 00:48:34.730
which is called HITestView.

00:48:34.950 --> 00:48:36.900
This is part of the sample code.

00:48:36.900 --> 00:48:38.040
It's on the website.

00:48:38.040 --> 00:48:43.410
It's even on all builds of
Panther and the developer tool stuff.

00:48:43.660 --> 00:48:49.670
I'm just going to have some fun font
stuff here so you guys can all see.

00:48:55.200 --> 00:49:03.680
I'm just going to increase this
to... Can I click it again?

00:49:03.730 --> 00:49:06.010
Of course.

00:49:12.210 --> 00:49:19.360
Now hopefully you'll be able to
read this from way back there.

00:49:19.510 --> 00:49:21.740
Basically,
I mentioned that what you want to do

00:49:21.740 --> 00:49:24.220
is you want to register your class,
and then you want to create your view,

00:49:24.220 --> 00:49:25.200
and then you want to handle events.

00:49:25.200 --> 00:49:26.900
So we're just going to show
you an example of exactly

00:49:26.900 --> 00:49:29.290
how to do that in real code.

00:49:30.770 --> 00:49:32.700
So first we have our register function.

00:49:32.700 --> 00:49:34.170
And this is kind of a one-shot function.

00:49:34.220 --> 00:49:35.090
You know, you register once.

00:49:35.150 --> 00:49:35.990
You can call it ten times.

00:49:36.070 --> 00:49:37.700
We're only going to register once.

00:49:37.700 --> 00:49:42.700
And what we do is we set up a list
of events that we want to handle.

00:49:42.700 --> 00:49:48.700
Now, this is an HIObject,
like all UI objects in the HIToolbox.

00:49:48.700 --> 00:49:52.050
So we have to respond to at
least two of these events,

00:49:52.050 --> 00:49:56.690
construct and destruct technically,
but we're also listening to initialize,

00:49:56.700 --> 00:49:58.700
just for grins in this case.

00:49:58.700 --> 00:50:00.690
So we have our HIObject protocol.

00:50:00.700 --> 00:50:02.700
I won't go too much into that.

00:50:02.700 --> 00:50:04.700
But these are the important ones.

00:50:04.700 --> 00:50:07.700
Here's where we're actually handling
everything that has to do with controls.

00:50:07.700 --> 00:50:09.700
So whenever you create an
instance of this class,

00:50:09.700 --> 00:50:13.420
that handler, this handler right here,
is installed automatically,

00:50:13.420 --> 00:50:15.690
and all your event handling
is set up automatically.

00:50:15.700 --> 00:50:17.700
And I'm going to say
automatically all the time.

00:50:17.700 --> 00:50:21.690
So we have activate, deactivate,
highlight changed,

00:50:21.800 --> 00:50:23.630
and value field changed.

00:50:23.700 --> 00:50:26.700
The only reason we're handling those
is so that we can call invalidate.

00:50:26.790 --> 00:50:27.560
All right.

00:50:27.710 --> 00:50:28.700
HIView set needs to be set up.

00:50:28.700 --> 00:50:30.340
display.

00:50:31.790 --> 00:50:33.500
As I mentioned,
you need to do that yourself,

00:50:33.530 --> 00:50:35.570
so you're going to have to handle
these events if you want to actually

00:50:35.580 --> 00:50:38.290
get redrawn when these things happen.

00:50:39.550 --> 00:50:44.060
But of course, it depends on your view,
what you're doing, et cetera.

00:50:44.100 --> 00:50:47.060
Below here, we end up calling
HIObjectRegister subclass.

00:50:47.200 --> 00:50:50.900
So we just pass our class ID,
which is just a string,

00:50:50.970 --> 00:50:55.850
and we're subclassing the
standard HIView base class.

00:50:55.910 --> 00:51:00.750
We're installing HITestViewHandler,
which is just below in the bottom there.

00:51:00.820 --> 00:51:04.650
And we're just installing it
for all the events that we saw.

00:51:06.500 --> 00:51:09.900
Now, once we've registered that,
you can create the view.

00:51:09.900 --> 00:51:13.600
And we have a function to do
that called HITestViewCreate.

00:51:13.600 --> 00:51:17.110
And first thing it does is just
register the subclass just in case

00:51:17.130 --> 00:51:19.960
it hasn't been registered already.

00:51:20.650 --> 00:51:24.780
Next thing it does is we
create an initialized event,

00:51:24.780 --> 00:51:27.570
and I think what we do

00:51:28.190 --> 00:51:30.160
If you pass in bounds,
we will set the bounds

00:51:30.180 --> 00:51:31.210
into that initialize event.

00:51:31.280 --> 00:51:34.290
This is a way for you to get
initialization parameters into your view

00:51:34.500 --> 00:51:36.050
so that you can do interesting things.

00:51:39.640 --> 00:51:43.200
And then all we do is
we call HIObject create.

00:51:43.240 --> 00:51:46.320
And bang, you get created,
your construct handler is called,

00:51:46.320 --> 00:51:48.080
you build whatever
instance data you want,

00:51:48.080 --> 00:51:51.400
you give it back to us,
standard HIObject stuff.

00:51:51.490 --> 00:51:54.070
If you don't know a lot about HIObject,
I urge you to read documentation

00:51:54.070 --> 00:51:54.910
that's on the website.

00:51:55.140 --> 00:51:58.600
I also wrote something for
Mac Tech last year or something,

00:51:58.620 --> 00:52:02.480
end of last year,
which goes through this in, you know,

00:52:02.490 --> 00:52:03.420
insane detail.

00:52:03.470 --> 00:52:06.790
So you might want to check
either one of those things out.

00:52:08.620 --> 00:52:12.810
And then if we get one,
we'll actually embed it into the window.

00:52:13.230 --> 00:52:17.260
You don't need to pass a window
to most of the HIView APIs.

00:52:17.360 --> 00:52:19.530
Well, actually,
most of the HIView APIs don't

00:52:19.590 --> 00:52:21.420
take a window ref at all.

00:52:21.750 --> 00:52:24.300
And all of the older APIs,
like create push button control

00:52:24.300 --> 00:52:26.820
and all of those things,
have been modified to accept

00:52:26.820 --> 00:52:27.850
null as the window parameter.

00:52:27.860 --> 00:52:29.460
You don't have to bind it to a window.

00:52:29.590 --> 00:52:32.890
You can have detached
views in the HIView system.

00:52:37.740 --> 00:52:40.380
So once we've created this thing,
we're going to start getting events,

00:52:40.380 --> 00:52:43.770
and we're going to get them
through our handler right there.

00:52:44.600 --> 00:52:51.340
So first we're handling events of K event
class HIObjects to just construct,

00:52:51.340 --> 00:52:53.560
initialize,

00:52:54.970 --> 00:52:57.280
And then we handle the control events.

00:52:57.400 --> 00:52:59.740
So we get told to draw, we draw.

00:52:59.740 --> 00:53:02.840
We get told to do hit testing,
we do hit testing.

00:53:02.840 --> 00:53:04.710
Tracking, we do tracking.

00:53:04.760 --> 00:53:07.940
And here are those other
events that I mentioned.

00:53:08.050 --> 00:53:12.480
So when any one of these things happen,
we call HITestViewChanged,

00:53:12.500 --> 00:53:14.000
which ends up taking us here.

00:53:14.050 --> 00:53:17.100
And all we do is call
HIView setNeedDisplay,

00:53:17.140 --> 00:53:21.840
passing true, meaning yes, please.

00:53:23.250 --> 00:53:27.840
and we'll get invalidated and
redrawn in the next draw cycle.

00:53:27.840 --> 00:53:29.740
We also have a get data set data.

00:53:29.740 --> 00:53:32.240
It's just here mostly for example.

00:53:32.270 --> 00:53:36.700
And get region,
which is also only here for example.

00:53:36.730 --> 00:53:37.640
Take a look at some of these.

00:53:37.820 --> 00:53:40.320
I'm going to skip construct and destruct,
that's standard stuff.

00:53:40.340 --> 00:53:44.860
If you really want to know about it,
just look more in the example.

00:53:44.860 --> 00:53:45.840
Initialize.

00:53:45.840 --> 00:53:48.860
We get the bounds out that we
had passed in the create thing.

00:53:48.860 --> 00:53:52.440
We set our bounds in here
using HIView set frame.

00:53:54.700 --> 00:53:56.750
OK, drawing.

00:53:56.790 --> 00:54:00.960
First thing we do when we're going
to draw is we get the context.

00:54:00.960 --> 00:54:04.490
The context is only sent in
the composited mode right now.

00:54:05.210 --> 00:54:07.860
So we get that context,
and again we've been transformed.

00:54:07.950 --> 00:54:13.090
Top left is 0, 0,
and we're clipped accordingly.

00:54:13.520 --> 00:54:17.590
And what this does is we call it Red Box,
Blue Box.

00:54:17.750 --> 00:54:19.560
So it's a red box until you click on it.

00:54:19.560 --> 00:54:20.830
Then it's a blue box.

00:54:20.860 --> 00:54:21.980
It's wild.

00:54:22.070 --> 00:54:25.530
So it's just a simple example to
show how you can do this and how you

00:54:25.560 --> 00:54:30.480
can tap into the standard tracking
that exists in the Control Manager.

00:54:31.320 --> 00:54:33.510
So, you know,
if we're just sitting there,

00:54:33.510 --> 00:54:36.390
nothing's going on, we're red,
we get clicked, we're blue.

00:54:36.450 --> 00:54:39.790
And we also listen to
these two part codes.

00:54:39.860 --> 00:54:43.520
So we get our highlight, essentially,
and we decide how to draw.

00:54:43.590 --> 00:54:47.670
If that is zero,
we know we're in a standard state.

00:54:47.780 --> 00:54:49.700
If it is the inactive
part or disabled part,

00:54:49.700 --> 00:54:51.350
we can draw in the disabled state.

00:54:51.460 --> 00:54:55.060
An even better way to do that is to
actually check to see-- which is to call

00:54:55.070 --> 00:54:58.910
is control active or is control enabled.

00:54:59.370 --> 00:55:03.060
In general, we don't like to overload
the part codes these days.

00:55:03.070 --> 00:55:06.210
And if it's any other
part code that's non-zero,

00:55:06.310 --> 00:55:09.790
we'll assume that we've been
clicked and we draw blue.

00:55:15.500 --> 00:55:17.070
Okay, hit testing.

00:55:17.350 --> 00:55:23.500
In the hit test scenario,
what we do is we just

00:55:23.740 --> 00:55:27.450
extract the mouse location,
we test to see whether that

00:55:27.450 --> 00:55:30.650
point is in our bounds,
and then we just give back

00:55:30.710 --> 00:55:32.500
the correct part code.

00:55:32.530 --> 00:55:34.200
If it's in our bounds,
we return a part code of one.

00:55:34.260 --> 00:55:35.950
The part code space is your space.

00:55:35.950 --> 00:55:37.650
You can return anything you want.

00:55:37.780 --> 00:55:40.350
The only thing you need to keep in mind
is that if you pass zero back to us,

00:55:40.350 --> 00:55:42.250
we will assume you don't
want to track at all,

00:55:42.260 --> 00:55:44.300
and maybe that's what you want.

00:55:44.300 --> 00:55:47.490
Maybe it's not what you want,
but just be aware of that.

00:55:48.020 --> 00:55:51.060
Technically, from a technical,
pure standpoint,

00:55:51.060 --> 00:55:53.870
you don't have to even check your
bounds because we wouldn't have

00:55:53.870 --> 00:55:57.180
asked you in the first place unless
somebody was calling just something

00:55:57.180 --> 00:55:59.330
like the old test control API.

00:55:59.380 --> 00:56:00.300
You might get called that way.

00:56:00.300 --> 00:56:05.330
But again, for proper checking,
you might want to at

00:56:05.330 --> 00:56:07.000
least check your bounds.

00:56:07.000 --> 00:56:09.200
So if the click is in us, we're hit.

00:56:09.200 --> 00:56:10.900
If it's not, we're not hit.

00:56:10.900 --> 00:56:13.660
And we report the answer back.

00:56:13.660 --> 00:56:16.220
And again,
that answer ties into the standard

00:56:16.240 --> 00:56:18.080
tracking loop in the toolbox.

00:56:18.080 --> 00:56:21.290
The minute we click on a view,
we'll ask it, was there a part hit?

00:56:21.440 --> 00:56:22.590
Oh, yes, it's part one.

00:56:22.670 --> 00:56:23.460
Okay.

00:56:23.460 --> 00:56:24.320
Start tracking that part.

00:56:24.440 --> 00:56:26.200
And then we'll do
standard tracking for you.

00:56:26.240 --> 00:56:28.140
And as we track in and
out of your control,

00:56:28.210 --> 00:56:30.900
we will set the highlight,
and that's how you draw.

00:56:34.690 --> 00:56:36.730
You can also do custom tracking.

00:56:36.730 --> 00:56:40.420
I don't think that this specific
example is set up to do it right now,

00:56:40.420 --> 00:56:40.420
but

00:56:41.590 --> 00:56:43.990
Instead of having the
toolbox do the tracking,

00:56:44.000 --> 00:56:45.440
you can do it.

00:56:45.520 --> 00:56:47.550
There's even another level
of tracking beyond this,

00:56:47.550 --> 00:56:51.670
which, the minute the click gets to you,
you can do whatever you want.

00:56:52.400 --> 00:56:56.620
Once you get into just kind of
like two levels of tracking,

00:56:56.620 --> 00:57:02.510
I think we explained it in
the Carbon events .h header.

00:57:03.200 --> 00:57:05.980
But basically,
you can do anything you want.

00:57:06.040 --> 00:57:10.090
In this case, we're doing basically
what the toolbox does.

00:57:10.100 --> 00:57:12.750
You know, we're just saying, "Oh,
were we inside when we started?

00:57:12.750 --> 00:57:15.110
Well, we probably were."
And then as you move out,

00:57:15.110 --> 00:57:16.180
we set our variable.

00:57:16.180 --> 00:57:18.200
You've probably all written this loop.

00:57:18.780 --> 00:57:21.000
But the point is you can write
it yourself if you want to.

00:57:21.000 --> 00:57:22.840
You don't have to use
the tool box and stuff.

00:57:22.840 --> 00:57:24.940
And that's the great part
about Carbon Events and the

00:57:24.940 --> 00:57:25.940
way it ties into HIView.

00:57:25.940 --> 00:57:29.190
You can override just
about anything you want.

00:57:31.500 --> 00:57:34.960
Again, test view change, we invalidate,
we already saw that.

00:57:35.030 --> 00:57:37.740
Get data, set data,
I'm not going to go into those.

00:57:37.740 --> 00:57:39.300
Not very exciting.

00:57:39.300 --> 00:57:40.560
Get region.

00:57:40.600 --> 00:57:42.210
That's something I want to talk about.

00:57:42.340 --> 00:57:46.920
This is the get region handler.

00:57:47.300 --> 00:57:49.640
And we extract the part
code and a region handle.

00:57:49.730 --> 00:57:52.660
And basically, based on the part code,
we want to manage that region handle.

00:57:52.780 --> 00:57:57.890
It's important that if you get a part
code that you have no idea what it is,

00:57:57.920 --> 00:57:59.840
return event not handled error.

00:57:59.950 --> 00:58:01.950
You may trip us up.

00:58:01.990 --> 00:58:04.860
We did experience a couple of
applications that were not doing so,

00:58:04.860 --> 00:58:07.840
and they were giving us empty regions,
and crazy things started to happen.

00:58:07.840 --> 00:58:10.240
So we had to implement
workarounds in the toolbox.

00:58:10.330 --> 00:58:13.950
In general,
we try to avoid doing that because there

00:58:13.950 --> 00:58:16.960
is a performance penalty in that regard.

00:58:17.080 --> 00:58:22.010
So really try to be correct in
how you handle these things.

00:58:22.640 --> 00:58:24.540
In this case,
all we're going to do is if we get the

00:58:24.540 --> 00:58:29.460
content or the structure meta part,
we're just going to return our bounds.

00:58:29.510 --> 00:58:31.280
Like I said earlier,
you don't have to do this.

00:58:31.280 --> 00:58:33.780
If it's just going to be your bounds,
don't even handle it.

00:58:33.870 --> 00:58:35.370
That's even simpler.

00:58:35.680 --> 00:58:37.640
But it's just a simple
example of what you would do.

00:58:37.640 --> 00:58:39.440
So we just get our bounds.

00:58:39.440 --> 00:58:44.720
We convert it into a quick draw rectangle
because we need to call rect region.

00:58:44.780 --> 00:58:46.630
As I said before,
we're trying to move toward these

00:58:46.700 --> 00:58:47.940
new shape riffs that we have.

00:58:48.040 --> 00:58:50.180
We kind of introduced them.

00:58:50.590 --> 00:58:52.530
introduces a bad word because
you couldn't use them,

00:58:52.670 --> 00:58:55.200
but we put them in Jaguar,
but you couldn't use them.

00:58:55.200 --> 00:58:58.240
We're starting to use them
now in the HITHeme API,

00:58:58.240 --> 00:59:00.990
so you'll see HISHapeRefs used there.

00:59:01.630 --> 00:59:07.030
Okay, so if we were to run this,
you see a very exciting application.

00:59:07.040 --> 00:59:10.040
Red, blue, red, blue, red, blue, red,
blue, huh?

00:59:10.200 --> 00:59:11.440
Okay, so that's cool.

00:59:11.620 --> 00:59:15.320
Now you notice there's one next to it,
and that's what I want to cover next.

00:59:27.400 --> 00:59:28.400
That's okay.

00:59:28.400 --> 00:59:31.520
All right.

00:59:31.530 --> 00:59:32.780
C++.

00:59:32.780 --> 00:59:33.240
Everybody's friend.

00:59:33.240 --> 00:59:35.150
Everybody's enemy.

00:59:35.160 --> 00:59:37.000
But here it is.

00:59:38.990 --> 00:59:40.390
We like C++ on the toolbox.

00:59:40.660 --> 00:59:41.630
We use it internally.

00:59:41.750 --> 00:59:43.240
All of our stuff follows this thing.

00:59:43.240 --> 00:59:44.660
We have HIView internally.

00:59:44.660 --> 00:59:48.540
It's a C++ class, and we just export it
through this HIObject layer.

00:59:48.680 --> 00:59:51.250
Well, what we also did when we were
writing these sample codes is we

00:59:51.250 --> 00:59:54.330
came up with this TView class,
which is kind of a mirror

00:59:54.620 --> 00:59:58.670
of our HIView class,
only it's a little more generic.

00:59:58.860 --> 01:00:04.110
So what we do have is
this thing called...

01:00:04.910 --> 01:00:08.650
I wonder if it's in a nice-- oh,
there it is.

01:00:08.700 --> 01:00:09.780
Beautiful.

01:00:09.820 --> 01:00:11.800
We have this thing called HIFramework.

01:00:11.910 --> 01:00:15.490
There's a series of classes which
allow you to write views really,

01:00:15.490 --> 01:00:16.800
really easily.

01:00:16.950 --> 01:00:20.840
And that's how I wrote even that sample
app with Homestar Runner and all that.

01:00:20.840 --> 01:00:22.590
Very easy to write this stuff.

01:00:22.730 --> 01:00:24.020
It's part of all of our sample code.

01:00:24.020 --> 01:00:25.900
All of our sample code relies on it.

01:00:26.030 --> 01:00:28.320
We urge you to look at it.

01:00:28.340 --> 01:00:30.580
It may grow into something bigger.

01:00:30.580 --> 01:00:31.550
We're not sure right now.

01:00:31.630 --> 01:00:34.990
The important thing is you might
be able to use it directly,

01:00:34.990 --> 01:00:35.930
you might not.

01:00:35.930 --> 01:00:38.100
If you can use it directly, great.

01:00:38.100 --> 01:00:40.800
If you can't,
you might at least be able to borrow

01:00:40.800 --> 01:00:44.040
the ideas and the implementation
strategies that we put in them and try

01:00:44.040 --> 01:00:45.870
to merge those into your own framework.

01:00:45.870 --> 01:00:48.760
So we really urge you to look at it
because we figure that most people are

01:00:48.760 --> 01:00:50.110
actually programming in C++ these days.

01:00:53.600 --> 01:00:55.050
So we won't go too much into that.

01:00:55.170 --> 01:00:57.220
Suffice it to say that we
have this ttestview that

01:00:57.220 --> 01:00:58.910
derives from our tview class.

01:00:58.980 --> 01:01:04.790
We can see just exactly the same
basic control that we just looked at,

01:01:04.790 --> 01:01:06.610
only in C++.

01:01:10.550 --> 01:01:14.070
So these lines are interesting.

01:01:14.160 --> 01:01:21.720
I mentioned that if you change
some aspect of your view,

01:01:42.610 --> 01:01:42.610
So, in this case,
all we need to do is just say

01:01:42.610 --> 01:01:42.610
on highlight and on activate,
we want to be auto-invalidated.

01:01:42.610 --> 01:01:42.610
We also do this internally
in our HIView class,

01:01:42.610 --> 01:01:42.610
and it's so helpful that we may end up
exporting it as a real API in the future.

01:01:42.750 --> 01:01:44.540
But basically, this code's a lot simpler.

01:01:44.580 --> 01:01:46.840
And you can actually look
at the guts of the code.

01:01:46.940 --> 01:01:49.880
So like, create is just register class,
create, and then embed,

01:01:49.880 --> 01:01:52.520
just like you saw in the earlier example.

01:01:52.560 --> 01:01:56.130
Register class is even simpler,
because basically, tview, or ultimately,

01:01:56.130 --> 01:01:59.540
tobject, which tview derives from,
just takes care of it for you.

01:01:59.600 --> 01:02:03.620
So you just give it your class ID,
and give it your construct proc.

01:02:03.940 --> 01:02:06.740
And Construct is like a
static proc on your class.

01:02:06.750 --> 01:02:08.780
It gets called whenever
HIObjectCreator is called,

01:02:08.790 --> 01:02:11.780
and all we do is create a new
instance of ourselves and return it.

01:02:11.780 --> 01:02:13.400
Very easy.

01:02:13.440 --> 01:02:16.120
Draw is pretty much the same code,
only we don't have to do

01:02:16.130 --> 01:02:17.280
all the CarbonEvent stuff.

01:02:17.280 --> 01:02:20.480
That's the beauty of using the C++ stuff,
is that all the CarbonEvent

01:02:20.490 --> 01:02:23.400
mechanism is taken away,
and you can just worry

01:02:23.420 --> 01:02:25.400
about what you're doing.

01:02:26.040 --> 01:02:27.280
Hit test is simpler.

01:02:27.280 --> 01:02:30.170
We don't have to deal with
taking the part out-- I mean,

01:02:30.170 --> 01:02:32.140
taking the point out
and returning the part.

01:02:32.140 --> 01:02:33.950
It's just a method call
like anything else.

01:02:34.080 --> 01:02:37.620
And get region is simpler, a lot simpler.

01:02:37.730 --> 01:02:40.590
So we urge you to look
at stuff like tview.

01:02:41.790 --> 01:02:48.610
Unfortunately, I'm running short on time,
so I'm going to cut back to slides.

01:02:59.790 --> 01:03:01.690
Okay, I want to talk briefly
about performance tips.

01:03:01.700 --> 01:03:05.200
First off, as I mentioned,
try to invalidate only those portions

01:03:05.200 --> 01:03:06.720
of your view that need to be redrawn.

01:03:06.740 --> 01:03:09.310
If you have a small view,
you can probably just

01:03:09.350 --> 01:03:10.540
invalidate the whole thing.

01:03:10.540 --> 01:03:11.580
It's not going to be a big deal.

01:03:11.640 --> 01:03:13.840
But if you have a really complex view,
a table view,

01:03:13.840 --> 01:03:16.300
or some type of spreadsheet stuff
where only cells are changing,

01:03:16.300 --> 01:03:18.930
you might want to just
invalidate those portions.

01:03:18.940 --> 01:03:21.700
Obey the incoming limit region,
that draw region that

01:03:21.700 --> 01:03:24.660
I mentioned in your draw handler,
if you do have a complex control,

01:03:24.660 --> 01:03:26.310
to limit the area that you draw.

01:03:26.370 --> 01:03:28.950
This makes a huge difference in
the performance of your views.

01:03:30.830 --> 01:03:36.290
If you're moving or resizing views,
the best, best solution in

01:03:36.290 --> 01:03:38.570
Panther is to use layouts.

01:03:39.210 --> 01:03:43.170
The next best solution is to watch
ContentView BounceChanged events,

01:03:43.340 --> 01:03:45.220
not WindowBounceChanged events.

01:03:45.350 --> 01:03:48.570
Turns out that WindowBounceChanged
events come too late.

01:03:49.200 --> 01:03:52.040
The way the window mechanics are
is that when you resize a window,

01:03:52.040 --> 01:03:55.770
we reshape the whole frame view,
which reflows all of the

01:03:55.770 --> 01:03:58.690
window widgets and the like,
and then we paint it.

01:03:58.800 --> 01:04:02.150
Then, after that, you get called with a
window-bounce-changed event,

01:04:02.170 --> 01:04:03.500
and then you go, "Oh,
I have to reflow," and then

01:04:03.500 --> 01:04:05.760
you move everything around,
and then we paint it.

01:04:05.890 --> 01:04:09.560
So just by listening to
window-bounce -- I mean,

01:04:09.610 --> 01:04:12.840
the content view-bounce-changed,
as opposed to window-bounce-changed,

01:04:12.920 --> 01:04:15.240
makes a big difference in
your live resize speed.

01:04:15.240 --> 01:04:17.670
You will definitely get a few
frames per second in that.

01:04:17.880 --> 01:04:19.280
And the best solution,
as I mentioned on Panther,

01:04:19.280 --> 01:04:20.950
is to just use layouts,
because then you don't even

01:04:20.950 --> 01:04:22.690
have to worry about that stuff.

01:04:24.520 --> 01:04:27.940
I should go back and just--
and those feature bits that

01:04:27.940 --> 01:04:31.200
I mentioned that help us to avoid
having to call you for reasons,

01:04:31.200 --> 01:04:33.580
make sure you set them as appropriate.

01:04:34.050 --> 01:04:39.970
So, in summary, I want you to know that
HIView is our focus,

01:04:39.970 --> 01:04:43.890
and we're really concentrating all our
efforts on making it perform great.

01:04:43.910 --> 01:04:46.900
And it's changed our world, seriously.

01:04:46.900 --> 01:04:49.900
Writing things like the
sidebar in Nav just took days.

01:04:49.900 --> 01:04:52.900
I mean, it's just, it's amazingly quick.

01:04:52.910 --> 01:04:54.820
You know, I can write demos in hours.

01:04:54.960 --> 01:04:58.900
No, that's what's, that's what's, no,
that's not a good example.

01:04:58.900 --> 01:05:00.720
But, seriously,
we've been able to just tear

01:05:00.720 --> 01:05:01.900
through views these days.

01:05:01.900 --> 01:05:04.890
I mean, the amount of work that we
can get done is amazing.

01:05:04.970 --> 01:05:07.660
And I guarantee you that if
you start to use this stuff,

01:05:07.660 --> 01:05:10.900
you will realize that, oh my god,
this really is different.

01:05:10.900 --> 01:05:13.900
And you can throw away a lot
of code in your application.

01:05:13.900 --> 01:05:15.810
I kid you not.

01:05:16.270 --> 01:05:18.760
So, and at the same time that
it makes everything better,

01:05:18.760 --> 01:05:20.040
it's still familiar to you.

01:05:20.040 --> 01:05:22.200
It's still an extension
of the control manager,

01:05:22.200 --> 01:05:22.950
okay?

01:05:22.960 --> 01:05:25.790
And it's still, you know,
it's kind of like it's still home.

01:05:26.420 --> 01:05:31.220
And that was funny.

01:05:31.440 --> 01:05:32.820
I was serious.

01:05:32.870 --> 01:05:37.030
So, yeah, and as I mentioned,
it's pervasive, so you don't have to have

01:05:37.030 --> 01:05:39.810
all of these different,
you know, MDEFs, CDEFs, WDEFs,

01:05:39.840 --> 01:05:42.100
just views, and you're done.

01:05:42.390 --> 01:05:44.980
And above all,
when we make changes to the

01:05:44.980 --> 01:05:48.860
renderer and the compositing stuff,
you'll all benefit from that.

01:05:48.950 --> 01:05:54.300
So we're all going to share in
this HIView adventure or so.

01:05:54.420 --> 01:05:56.300
And as I mentioned, it's very fast.

01:05:56.310 --> 01:05:58.300
This is a fast view system.

01:05:58.300 --> 01:06:00.300
It is not the control manager.

01:06:00.320 --> 01:06:01.290
Trust me.