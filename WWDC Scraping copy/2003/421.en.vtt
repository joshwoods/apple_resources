WEBVTT

00:00:24.800 --> 00:03:04.500
[Transcript missing]

00:03:05.530 --> 00:03:09.760
So Apple approaches accessibility
in sort of a cross-functional way.

00:03:09.850 --> 00:03:13.850
And this is sort of our mantra,
our world view of accessibility.

00:03:13.940 --> 00:03:16.420
We consider, you know,
we don't break the world into

00:03:16.420 --> 00:03:19.450
users without disabilities
and users with disabilities.

00:03:19.490 --> 00:03:21.120
It's a continuum of users.

00:03:21.190 --> 00:03:24.140
And we want to support
users with all abilities.

00:03:24.310 --> 00:03:27.550
And so it's important that you
understand the way we approach

00:03:27.550 --> 00:03:30.520
this is we want to make sure that
we can deliver an operating system

00:03:30.520 --> 00:03:32.050
that has a great experience.

00:03:32.050 --> 00:03:34.380
And this is sort of, you know,
our world view.

00:03:34.410 --> 00:03:36.750
And this is definitely how
the cross-functional team,

00:03:36.750 --> 00:03:39.450
which involves people from the
relationship side at Apple,

00:03:39.450 --> 00:03:43.330
involves technology evangelists like me,
it obviously involves several different

00:03:43.340 --> 00:03:46.880
groups in engineering who work on
accessibility as a problem on Mac OS X.

00:03:48.890 --> 00:03:51.140
And the key thing is that we
believe accessibility is important.

00:03:51.140 --> 00:03:53.230
And if you look at the statistics,
these are U.S.

00:03:53.340 --> 00:03:56.520
government figures where technically
54 million people in the U.S.

00:03:56.620 --> 00:03:57.800
have some form of disability.

00:03:57.800 --> 00:03:58.970
That's a huge number.

00:03:58.980 --> 00:04:03.240
Now obviously there's a large continuum
of disabilities and not all of them

00:04:03.240 --> 00:04:06.020
require assistive technology to overcome.

00:04:06.300 --> 00:04:09.440
But I think the key thing is that
if you look at statistically,

00:04:09.440 --> 00:04:12.470
there's a large number of users
out there that can benefit from

00:04:12.470 --> 00:04:16.320
having your application work with
another party's assistive technology

00:04:16.570 --> 00:04:20.540
that works in conjunction with our
infrastructure and the operating system.

00:04:21.030 --> 00:04:25.000
Interestingly,
since the ascendancy of Section 508

00:04:25.000 --> 00:04:28.900
and the issue of accessibility,
you have accessibility becoming a

00:04:28.900 --> 00:04:32.600
sales requirement in the education,
the federal, and local government spaces.

00:04:32.600 --> 00:04:35.710
We'll get into what Section 508 is,
I think, on the next slide.

00:04:35.710 --> 00:04:39.000
But the key thing is
if your product sells,

00:04:39.000 --> 00:04:41.790
your application sells
into certain markets,

00:04:41.790 --> 00:04:43.400
you're going to get asked
about accessibility.

00:04:43.400 --> 00:04:46.600
What is your Section 508 compliance
is going to be the question

00:04:46.600 --> 00:04:48.000
you're going to get asked.

00:04:48.000 --> 00:04:51.000
And it's something you want to be
able to answer correctly because

00:04:51.000 --> 00:04:54.000
if you don't have an accessibility
story for your application,

00:04:54.000 --> 00:04:56.160
you might not be able
to access those markets.

00:04:56.200 --> 00:04:58.560
And then lastly,
it's really the right thing to do

00:04:58.560 --> 00:05:01.680
because I think that it's difficult
for people who have not worked

00:05:01.680 --> 00:05:05.800
with the disabled community or the
assistive technology developers,

00:05:05.800 --> 00:05:09.740
may not have a full understanding as
how simple changes in your application

00:05:09.780 --> 00:05:13.960
can have significant effects in terms
of opening the usage of that application

00:05:13.960 --> 00:05:15.400
to a person with a disability.

00:05:15.400 --> 00:05:16.600
It's very interesting.

00:05:16.600 --> 00:05:22.490
One of my first contacts with assistive
technology was I was at a conference

00:05:22.900 --> 00:05:26.440
and I was waiting to go up an elevator
and I heard from behind me the

00:05:26.440 --> 00:05:32.400
Macintosh Pro voice asked me to push
the second floor button on the elevator.

00:05:32.580 --> 00:05:36.790
And it turned out to be a person who
used an iBook that had been converted

00:05:36.790 --> 00:05:41.180
to do work with them as a piece of
assistive technology that essentially

00:05:41.420 --> 00:05:43.270
acted as that person's voice.

00:05:43.580 --> 00:05:44.360
Now I use speech.

00:05:44.410 --> 00:05:47.340
I often have the text-to-speech
capability in Mac OS X,

00:05:47.340 --> 00:05:48.360
read me emails.

00:05:48.390 --> 00:05:52.550
But I didn't really fundamentally
understand that this technology,

00:05:52.550 --> 00:05:56.480
it was a bonus technology for me,
was a pivotal technology to a

00:05:56.560 --> 00:05:59.300
person with a disability and
enabled them to communicate.

00:05:59.400 --> 00:06:02.510
And so you really have to think,
little things you can do inside your

00:06:02.510 --> 00:06:05.810
application can have significant
reciprocal benefits to the disabled

00:06:05.810 --> 00:06:09.500
community and it's very much worth
your time to engage that community,

00:06:09.500 --> 00:06:12.400
to engage assistive technology
developers to learn about this.

00:06:12.400 --> 00:06:13.030
Because the real thing is,
it's a very important

00:06:13.090 --> 00:06:13.390
part of the process.

00:06:13.400 --> 00:06:15.280
So really change your mind on
how you approach accessibility.

00:06:15.410 --> 00:06:19.400
Instead of just being some
checkbox on some sales form,

00:06:19.400 --> 00:06:21.400
just something that's really
the right thing to do.

00:06:23.060 --> 00:06:24.350
Quick note about Section 508.

00:06:24.410 --> 00:06:26.670
In many ways,
Section 508 has been driving this.

00:06:26.810 --> 00:06:32.330
Section 508 is a federal requirement,
and essentially it's a specification

00:06:32.330 --> 00:06:37.000
that the government's published that
sits down a minimum accessibility

00:06:37.150 --> 00:06:39.760
standard for a variety of new devices.

00:06:39.760 --> 00:06:42.460
Now, new devices are things
like operating systems,

00:06:42.460 --> 00:06:47.020
applications,
electronic devices such as computers.

00:06:47.020 --> 00:06:51.720
And it's essentially sort of the
same body of legislation and law

00:06:51.730 --> 00:06:57.550
that mandates curb cuts and various
handrails and things like that.

00:06:57.690 --> 00:07:02.870
And it just took a little while for
those standards to be applied to

00:07:02.890 --> 00:07:06.460
items such as personal computers.

00:07:06.500 --> 00:07:09.600
Section 508 obviously was
reauthorized or basically it said,

00:07:09.600 --> 00:07:12.050
hey, it's coming down the pipe in 1998.

00:07:12.180 --> 00:07:15.620
The various communities that are
affected by this got together

00:07:15.760 --> 00:07:17.500
and started -- Section 509 was
re-reported to the state of California.

00:07:17.500 --> 00:07:18.500
And it's a standard that's been applied
to all of the state's standards.

00:07:18.500 --> 00:07:19.300
You know,
organizations working on defining

00:07:19.300 --> 00:07:21.420
what those requirements were.

00:07:21.420 --> 00:07:26.360
And in June 21st of 2001,
these standards actually became formal.

00:07:26.360 --> 00:07:30.120
So there's actually a document that
you can go get that tells you exactly

00:07:30.120 --> 00:07:33.880
what things your application or your
operating system or your electronic

00:07:34.050 --> 00:07:36.120
device has to do to be accessible.

00:07:36.150 --> 00:07:40.140
Now, one unfortunate situation that
arrives with a hard document,

00:07:40.140 --> 00:07:44.220
particularly a federal document,
you know, outlining accessibility is in

00:07:44.220 --> 00:07:45.760
many ways it's not complete.

00:07:45.970 --> 00:07:48.400
In many cases,
people consider that it is complete.

00:07:48.970 --> 00:07:49.340
Okay?

00:07:49.340 --> 00:07:51.360
And this can create some issues.

00:07:51.400 --> 00:07:53.020
It is a great starting place.

00:07:53.020 --> 00:07:56.140
Section 508 is a good starting place to
learn about accessibility to figure out

00:07:56.140 --> 00:07:57.920
how to make your product accessible.

00:07:57.940 --> 00:08:01.880
But it does not define everything
that you could potentially need

00:08:01.880 --> 00:08:06.160
to do to open your products
up to users with disabilities.

00:08:07.600 --> 00:11:22.700
[Transcript missing]

00:11:23.390 --> 00:11:25.400
So let's talk about our
approach to accessibility.

00:11:25.400 --> 00:11:26.660
Because again, it's new.

00:11:26.660 --> 00:11:29.200
When Justin--when you
introduced Mac OS X,

00:11:29.230 --> 00:11:32.200
a lot of people were concerned because
they really didn't see much about

00:11:32.200 --> 00:11:36.510
support for assistive technology
and accessibility built into the OS.

00:11:36.550 --> 00:11:40.030
But in Jaguar last year,
we actually announced a whole bunch of

00:11:40.030 --> 00:11:42.900
additions to the OS to really support,
you know,

00:11:42.900 --> 00:11:46.970
making applications accessible and
support our users with disabilities.

00:11:47.710 --> 00:11:49.750
We actually,
when looking at this problem,

00:11:49.810 --> 00:11:53.150
because it is a big problem,
we actually factored it out in two parts.

00:11:53.150 --> 00:11:55.710
One is something we call
user level accessibility.

00:11:55.710 --> 00:11:59.110
This is our built-in functionality,
those universal access features

00:11:59.110 --> 00:12:00.510
I'll talk about in a moment.

00:12:00.510 --> 00:12:04.060
And this is when we looked at the things
that we have to do to enable users with

00:12:04.070 --> 00:12:07.270
disabilities to engage our platform,
there was a subset of them that

00:12:07.370 --> 00:12:08.820
it made sense for Apple to do.

00:12:08.820 --> 00:12:12.550
And so we actually have built those and
baked those into the operating system,

00:12:12.550 --> 00:12:14.900
and I'll show you those in a moment.

00:12:15.260 --> 00:12:18.720
And then on the second hand,
we realized there's a whole lot of

00:12:18.770 --> 00:12:23.050
adaptation that needs to be done
to engage the whole community.

00:12:23.050 --> 00:12:27.960
And we're not expertise in
every form of adaptation.

00:12:27.960 --> 00:12:30.890
So we wanted to actually build
infrastructure in the OS to

00:12:30.890 --> 00:12:34.890
enable the assistive technology
community to engage the platform.

00:12:34.960 --> 00:12:37.760
And so that's what the developer
level accessibility is.

00:12:37.760 --> 00:12:41.500
And that's really characterized
in our Mac OS X Accessibility API.

00:12:41.500 --> 00:12:42.950
Apple,
what's the difference between the two?

00:12:43.400 --> 00:12:44.300
So Universal Access.

00:12:44.420 --> 00:12:46.220
Some of you may have
already seen this icon.

00:12:46.220 --> 00:12:49.640
It's in the pref panel in Mac OS X.

00:12:49.640 --> 00:12:54.660
And this is really the hub, if you will,
for our assistive technology

00:12:54.660 --> 00:12:56.180
features that are built in.

00:12:56.180 --> 00:12:58.690
The user level accessibility
that I spoke about.

00:12:58.870 --> 00:13:00.810
So I'm going to actually
come over here to,

00:13:00.840 --> 00:13:04.620
I think it's Demo Machine 3,
and give you a real quick tour of the

00:13:04.620 --> 00:13:10.250
Universal Access pref panel and show
you what we have built into Mac OS X.

00:13:10.480 --> 00:13:13.880
Some of this you may
already have seen in Jaguar,

00:13:13.880 --> 00:13:17.470
but we've actually made
some enhancements to it,

00:13:17.470 --> 00:13:22.530
very much in the case of user feedback,
what people wanted to see.

00:13:24.530 --> 00:13:28.510
So I come here and I see right here
I have my universal access press panel.

00:13:28.510 --> 00:13:31.950
I click on it and it's going to
bring up essentially the hub of our

00:13:32.030 --> 00:13:33.790
user level accessibility features.

00:13:33.790 --> 00:13:38.690
We sort of break it down into
categories of disabilities.

00:13:38.720 --> 00:13:41.810
So for example we have seeing, hearing,
keyboard and mouse.

00:13:41.810 --> 00:13:44.800
And if we take a look at the
first option which is seeing,

00:13:44.800 --> 00:13:47.860
this is actually where,
I'm a graphics guy at heart so this is

00:13:47.860 --> 00:13:49.820
where I think the coolest feature is.

00:13:49.980 --> 00:13:54.290
We actually have full support for screen
enlargement inside the operating system.

00:13:54.400 --> 00:13:58.760
And this enlargement is done in a very
technically advanced way because of

00:13:58.890 --> 00:14:01.400
the way our windowing system works.

00:14:01.430 --> 00:14:05.600
And the fact that we use technology such
as OpenGL to accelerate our display.

00:14:05.780 --> 00:14:10.790
So we're actually able to do some
pretty fantastic things here.

00:14:10.790 --> 00:14:10.790
For example,

00:14:11.100 --> 00:14:14.630
I can zoom in and I have full speed zoom.

00:14:14.880 --> 00:14:20.000
It's very high quality and I can
zoom in and out very fluidly.

00:14:20.150 --> 00:14:23.940
And the other interesting point is
that one of the problems with enlargers

00:14:23.940 --> 00:14:27.740
that people have been familiar with
in the past is in many cases these only

00:14:27.740 --> 00:14:30.800
worked with Windows and text documents.

00:14:30.800 --> 00:14:34.030
So if there's other rich media that
happened to be being used at the time,

00:14:34.030 --> 00:14:37.470
they really couldn't participate because
of the bottlenecking and slowdown

00:14:37.490 --> 00:14:40.980
that having to do all this copy,
pixel copying and replication would be.

00:14:41.050 --> 00:14:44.110
And so we wanted to make sure that
we could architect a system that

00:14:44.110 --> 00:14:45.940
really didn't suffer from that.

00:14:46.410 --> 00:14:48.560
So we actually

00:14:50.610 --> 00:14:53.440
created the system to where
it's able to do things like,

00:14:53.560 --> 00:14:56.740
for example, enlarge even multimedia.

00:14:56.740 --> 00:14:58.980
So it's a quick time pop-up.

00:14:59.030 --> 00:15:00.730
Tell it to loop.

00:15:02.220 --> 00:15:07.140
and I'm able to freely zoom
up and experience multimedia

00:15:07.490 --> 00:15:11.300
without having to have any
conflict with the screen enlarger.

00:15:11.350 --> 00:15:15.600
And I can actually enlarge to
extremely large proportions.

00:15:17.210 --> 00:15:21.350
and I now have a 35 foot
tall pointer over there.

00:15:21.350 --> 00:15:23.540
So it's a really powerful feature.

00:15:23.540 --> 00:15:29.270
Now one thing that we also got as
feedback was that people wanted more

00:15:29.280 --> 00:15:34.720
control over the zoom so we've actually
made it pretty flexible in here.

00:15:34.720 --> 00:15:39.720
We're able to set your zoom,
how far you want it to zoom in, zoom out,

00:15:39.720 --> 00:15:42.760
if you want it to show you
where it's going to zoom into,

00:15:42.870 --> 00:15:45.600
a lot of options like that.

00:15:45.600 --> 00:15:48.840
We also have the ability to turn
on and off the smoothing so that

00:15:48.940 --> 00:15:53.920
if I am enlarged that I can turn on
and off the anti-aliasing because

00:15:54.090 --> 00:15:57.990
Mac OS X is fully anti-aliased and
in some ways if you have issues with

00:15:57.990 --> 00:16:04.440
contrast the anti-aliasing can make
the type sometimes difficult to read.

00:16:04.480 --> 00:16:07.400
This was sort of a first solution to
be able to address that problem but in

00:16:07.400 --> 00:16:09.370
Panther we've actually gone one further.

00:16:09.450 --> 00:16:12.310
If I actually zoom out a bit
we'll see we have a new option.

00:16:12.470 --> 00:16:15.200
And that is going to be
the enhanced contrast.

00:16:15.200 --> 00:16:17.730
And this is a really cool
feature because we had a lot of

00:16:17.730 --> 00:16:20.570
feedback that the anti-aliasing,
the soft edges gave people

00:16:20.570 --> 00:16:24.420
with low vision problems and
second is the pin striping.

00:16:24.430 --> 00:16:28.900
The pin striping can be very difficult if
you have issues with perceiving contrast.

00:16:28.900 --> 00:16:32.640
So we actually sat down with one
of our crack graphics engineers who

00:16:32.640 --> 00:16:35.840
thought about it and came up with
some very funky math to actually

00:16:35.880 --> 00:16:41.100
be able to do this effect where,
and let me actually go one farther in.

00:16:41.380 --> 00:16:45.830
You can see the pin stripe and I'm
actually able to take it and move my

00:16:45.830 --> 00:16:50.460
screen and just change the slider here
and it's going to be able to make the

00:16:50.560 --> 00:16:55.110
pin stripe and drop out and it's going
to increase the contrast of the windows.

00:16:55.270 --> 00:16:58.060
Additionally it's going to
harden up the edges of the type.

00:16:58.060 --> 00:17:01.070
So even though we have
anti-aliasing the type can go,

00:17:01.070 --> 00:17:04.730
we can harden up the edges of the type
so if we look at it the type itself

00:17:04.830 --> 00:17:06.720
is going to become bolder and bolder.

00:17:06.810 --> 00:17:11.120
And this is again a request that was
put in specifically for features.

00:17:11.120 --> 00:17:12.110
Right.

00:17:12.380 --> 00:17:14.210
by our users.

00:17:15.330 --> 00:17:17.200
and its system-wide effect.

00:17:17.200 --> 00:17:22.230
So, and it's also variable,
so you can dynamically tune it.

00:17:22.710 --> 00:17:30.350
We also have full support for
flashing alerts for people

00:17:30.350 --> 00:17:31.990
who have hearing disabilities.

00:17:31.990 --> 00:17:36.660
We have sticky keys and slow keys,
which are also alternate input devices,

00:17:36.660 --> 00:17:39.030
if you will,
for people with dexterity issues who may

00:17:39.100 --> 00:17:41.080
not be able to manipulate the keyboard.

00:18:05.200 --> 00:18:05.200
We also have full support for
flashing alerts for people

00:18:05.200 --> 00:18:05.200
who have hearing disabilities.

00:18:05.200 --> 00:18:05.200
We have sticky keys and slow keys,
which are also alternate input devices,

00:18:05.200 --> 00:18:05.200
if you will,
for people with dexterity issues who may

00:18:05.200 --> 00:18:05.200
not be able to manipulate the keyboard.

00:18:07.280 --> 00:18:10.070
We also have full support for
flashing alerts for people with

00:18:10.070 --> 00:18:13.200
dexterity issues who may not be
able to manipulate the keyboard.

00:18:14.230 --> 00:18:18.900
and the, up on the screen in a
semi-transparent way,

00:18:18.900 --> 00:18:21.560
the keys that are currently,
the modifier keys that are

00:18:21.560 --> 00:18:24.930
currently cached are going to
affect whenever our main keys hit.

00:18:26.740 --> 00:18:32.440
You also have mouse keys to enable the
numeric keypad to out like a mouse.

00:18:32.440 --> 00:18:34.240
We also have some other options.

00:18:34.240 --> 00:18:36.300
So, for example,
if I cruise over to something

00:18:36.300 --> 00:18:39.900
that's sort of interesting,
a lot of the features that we've built

00:18:39.900 --> 00:18:43.530
in the Universal Access Press pane,
we found a lot of people

00:18:43.600 --> 00:18:47.540
liked using them regardless if
they had a disability or not.

00:18:47.740 --> 00:18:50.090
For example,
the screen enlarger turned out to be

00:18:50.180 --> 00:18:53.700
very popular in last year's WWDC for
people to show code snippets.

00:18:54.780 --> 00:18:57.210
We also have some features
that work the other way.

00:18:57.240 --> 00:19:01.000
So, for example,
if I go into my keyboard and mouse,

00:19:01.000 --> 00:19:03.290
I see a new option called
Keyboard Shortcuts.

00:19:03.350 --> 00:19:07.330
And essentially,
this enables users to define hotkeys.

00:19:07.330 --> 00:19:10.300
Now, anyone can use this,
but for a user with a disability

00:19:10.310 --> 00:19:13.170
who might need to assign a hotkey,
one key press to do a lot

00:19:13.260 --> 00:19:16.210
of different operations,
it's very, very powerful.

00:19:16.300 --> 00:19:18.460
And then also,
we're going to have a demonstration

00:19:18.460 --> 00:19:21.120
a little bit later of another
very important piece of assistive

00:19:21.390 --> 00:19:22.950
technology that's built into Mac OS X.

00:19:22.970 --> 00:19:29.190
Which is our speech,
which keeps on getting better and better.

00:19:29.520 --> 00:19:33.080
So that was a quick tour of the
Universal Access PREF panel.

00:19:33.080 --> 00:19:35.410
And let me go back to slides.

00:19:36.640 --> 00:19:39.480
So let's start to drill
down on the developer side.

00:19:39.580 --> 00:19:42.050
Because I talked about the user side,
the experience when a user gets

00:19:42.050 --> 00:19:45.640
a machine and has the ability
to essentially engage it,

00:19:45.640 --> 00:19:47.610
even if they have a disability.

00:19:47.620 --> 00:19:51.560
But now let's sort of work our way down
into the infrastructure to talk about

00:19:51.560 --> 00:19:55.440
what application developers need to
do and also talk about what assistive

00:19:55.440 --> 00:19:57.530
technology developers need to do.

00:19:57.540 --> 00:20:01.970
We're going to have to do a little bit
of storytelling here because we had to

00:20:01.970 --> 00:20:05.270
really take a look at accessibility,
how it's handled in other

00:20:05.390 --> 00:20:07.060
platforms and also in Mac OS 9.

00:20:07.060 --> 00:20:10.120
And we built our infrastructure for
doing accessibility in Mac OS X.

00:20:10.120 --> 00:20:12.640
And one of the key things that
sort of created this scenario

00:20:12.640 --> 00:20:14.010
is we built an entirely new OS.

00:20:14.140 --> 00:20:18.460
Mac OS X is entirely from the
ground up new operating system.

00:20:18.460 --> 00:20:21.440
And that actually had
sort of two challenges.

00:20:21.440 --> 00:20:24.040
One is we had a lot of
infrastructure to build.

00:20:24.040 --> 00:20:26.400
Second is for our developer community.

00:20:26.780 --> 00:20:28.990
It was a little bit of a curveball,
particularly for the assistive

00:20:29.060 --> 00:20:31.260
technology community,
because their landmarks in terms

00:20:31.260 --> 00:20:34.060
of how they affected accessibility
on the platform totally changed.

00:20:34.140 --> 00:20:40.100
So one of the key things is that I think
the biggest thing that really affected

00:20:40.150 --> 00:20:42.550
them was the protected memory model.

00:20:42.560 --> 00:20:44.620
Now, obviously,
everyone was overjoyed to get

00:20:44.620 --> 00:20:47.230
protected memory on Mac OS X,
but it was horrifying if you were

00:20:47.230 --> 00:20:49.020
an assistive technology developer.

00:20:49.020 --> 00:20:52.680
Because that meant that your app,
assistive technology application,

00:20:52.870 --> 00:20:55.480
could not tell what another
application was doing.

00:20:56.060 --> 00:20:58.250
Because there was a hard wall.

00:20:58.260 --> 00:20:59.670
There was protected
memory in between them.

00:20:59.680 --> 00:21:02.980
And then also some core changes
in the way we handle I/O.

00:21:03.020 --> 00:21:07.480
Mac OS X has a very abstract and modular
and object-oriented I/O architecture.

00:21:07.480 --> 00:21:11.760
And another thing that's actually
an interesting challenge is that our

00:21:11.760 --> 00:21:13.340
visual environment is really complex.

00:21:13.490 --> 00:21:16.030
The ability to seamlessly composite 2D,
3D, multimedia,

00:21:16.030 --> 00:21:17.390
to do the dynamic enlargement.

00:21:17.420 --> 00:21:21.100
It's a very different world up in
the frame buffer than it was on

00:21:21.100 --> 00:21:23.210
other platforms and in the past.

00:21:23.260 --> 00:21:25.100
But in many cases,
some of these challenges

00:21:25.100 --> 00:21:25.260
actually turn into reality.

00:21:25.260 --> 00:21:27.260
And some of these challenges
actually turn out to be benefits.

00:21:27.360 --> 00:21:29.220
And we'll talk about those
a bit later as we go on.

00:21:29.280 --> 00:21:33.170
But the key thing was we took
this opportunity by the fact that

00:21:33.170 --> 00:21:35.260
we built a new operating system.

00:21:35.260 --> 00:21:38.670
And we had to come with innovative
solutions for the assistive technology

00:21:38.670 --> 00:21:41.260
community and developers who need to
make their applications accessible.

00:21:41.260 --> 00:21:43.260
We decided to say, "Hey, we're in here.

00:21:43.260 --> 00:21:44.130
We're building infrastructure.

00:21:44.260 --> 00:21:48.730
We might as well formally include that
infrastructure." And make it to where

00:21:48.730 --> 00:21:54.730
developers can rely on key parts of the
system to do things on their behalf.

00:21:55.390 --> 00:21:58.680
So the first thing we wanted to look
at is how it was done the wrong way.

00:21:58.750 --> 00:22:00.930
So we actually looked at the
way it was done on Mac OS 9.

00:22:00.930 --> 00:22:03.640
And it wasn't done the wrong
way because anyone was making a

00:22:03.640 --> 00:22:05.690
choice to do it the wrong way.

00:22:05.690 --> 00:22:09.800
It was really because it was the way that
accessibility and assistive technology

00:22:09.800 --> 00:22:11.960
organically grew up on that platform.

00:22:11.960 --> 00:22:16.220
Because Mac OS 9 architecturally was a
short stack of hardware with an irregular

00:22:16.220 --> 00:22:19.930
layer of system software and then the
application sat on top of that and it

00:22:20.020 --> 00:22:22.440
was all running in one memory partition.

00:22:22.440 --> 00:22:25.880
So it was pretty easy for the assistive
technology vendor to basically put

00:22:25.940 --> 00:22:28.590
themselves up on top and if they
needed to change the behavior of

00:22:28.590 --> 00:22:31.750
running application or adapt the
functionality of the operating system,

00:22:31.830 --> 00:22:35.140
they could just sort of have at it
and go around and change things.

00:22:35.140 --> 00:22:37.100
So in many cases,
assistive technology would

00:22:37.100 --> 00:22:41.380
essentially eject patches between the
application and the system software.

00:22:41.430 --> 00:22:42.820
Obviously,
assistive technology developers

00:22:42.820 --> 00:22:43.910
weren't the only people who do it.

00:22:43.910 --> 00:22:47.860
We had all these issues with
extensions on Mac OS 9 and that

00:22:47.860 --> 00:22:50.570
also was used the same techniques.

00:22:50.580 --> 00:22:52.360
But in many cases,
assistive technology vendors

00:22:52.360 --> 00:22:53.630
had to be more aggressive.

00:22:53.630 --> 00:22:55.260
In some cases,
they'd even change the way they

00:22:55.260 --> 00:22:56.230
were operating the application.

00:22:56.330 --> 00:23:01.300
They'd insert their code into a target
application to modify the behavior.

00:23:01.300 --> 00:23:05.730
Or they would do things like get
in between the hardware and start

00:23:05.870 --> 00:23:11.140
pulling events directly before the
system software could get them.

00:23:11.140 --> 00:23:13.290
And in many cases,
they would actually do trickery

00:23:13.290 --> 00:23:17.340
with the way the hardware
presented itself to the Macintosh.

00:23:17.340 --> 00:23:22.580
So you actually had a scenario
where assistive technology devices

00:23:22.580 --> 00:23:26.160
and assistive solutions were in
a "do it yourself" environment.

00:23:26.240 --> 00:23:28.840
And we really realized that this
was the wrong way to do things.

00:23:28.910 --> 00:23:31.580
We did not want to replicate
this behavior on Mac OS X.

00:23:31.580 --> 00:23:35.760
So that meant that Apple had to get
involved and create this infrastructure.

00:23:35.780 --> 00:23:37.930
And so we realized in
our new operating system,

00:23:37.930 --> 00:23:40.800
we have a common layer that's called
the application frameworks layer.

00:23:40.800 --> 00:23:44.200
And between all these different
ways to develop for Mac OS X,

00:23:44.320 --> 00:23:47.760
each application framework,
there's actually common infrastructure

00:23:47.760 --> 00:23:49.200
that runs between a lot of them.

00:23:49.280 --> 00:23:51.950
So we said, "Hmm,
this is a nice choke point, if you will,

00:23:51.950 --> 00:23:55.220
to start building accessibility into
the operating system to support the

00:23:55.220 --> 00:23:59.200
Mac OS 10." assistive technology
and application developers.

00:24:00.010 --> 00:24:03.340
We had to sort of factor
the problem because each,

00:24:03.340 --> 00:24:05.630
one interesting thing
about Mac OS X is it's got,

00:24:05.650 --> 00:24:07.430
you know,
four discrete ways to develop for it.

00:24:07.500 --> 00:24:09.820
If I'm a Unix developer,
I can use Darwin and BSD.

00:24:09.820 --> 00:24:12.680
If I'm a Java developer,
I have full Java implementation.

00:24:12.710 --> 00:24:15.640
If I'm a developer who has core
competency on the Macintosh from,

00:24:15.640 --> 00:24:18.890
you know, Mac OS 8, 9, whatever,
I have those APIs that have been,

00:24:18.890 --> 00:24:20.890
you know,
a significant body of those APIs in

00:24:20.970 --> 00:24:24.820
Carbon that have been brought forward
and they're available on the platform.

00:24:24.820 --> 00:24:26.790
And I also have Cocoa,
which is a fantastic way to do

00:24:26.840 --> 00:24:28.320
object-oriented development.

00:24:29.640 --> 00:24:32.610
All these frameworks are very
different from one another.

00:24:32.780 --> 00:24:34.980
And making them all
accessible is very tricky.

00:24:35.090 --> 00:24:38.060
So we actually originally started
with just Carbon and Cocoa.

00:24:38.060 --> 00:24:39.960
So last year,
we were focused on just making

00:24:40.070 --> 00:24:42.780
Carbon and Cocoa applications
accessible on the platform.

00:24:42.780 --> 00:24:44.910
But for Panther,
we've actually extended that

00:24:44.910 --> 00:24:46.440
out to include Java as well.

00:24:50.080 --> 00:24:53.590
So we're able to leverage the common
infrastructure to essentially have

00:24:53.660 --> 00:24:57.440
all the applications sitting on top
of the application framework layer.

00:24:57.440 --> 00:24:58.930
They're using this core infrastructure.

00:24:59.060 --> 00:25:03.630
And so the idea here is to take
the assistive technology solution,

00:25:03.630 --> 00:25:07.380
which before had to do some very
interesting things with the system,

00:25:07.390 --> 00:25:10.680
and sort of make it just another
application to where it was an

00:25:10.680 --> 00:25:14.570
application that just ran using the
same infrastructure and was able to

00:25:14.570 --> 00:25:18.980
use that to do what it needed to do,
to have access into other applications.

00:25:19.050 --> 00:25:22.270
So we had to formalize some
pathways for this access to occur.

00:25:22.270 --> 00:25:25.700
So that's what the
Mac OS X Accessibility API is.

00:25:26.050 --> 00:25:28.290
It's API-level support for accessibility.

00:25:28.300 --> 00:25:29.270
It's accessible.

00:25:29.270 --> 00:25:32.860
It's standard C interface,
so it's accessible from Carbon and Cocoa.

00:25:33.020 --> 00:25:36.910
It allows applications to
discover and control the

00:25:37.110 --> 00:25:39.680
UI of other running processes.

00:25:39.680 --> 00:25:41.950
Because when you look at it,
when you look at the whole

00:25:41.950 --> 00:25:44.250
field of accessibility,
that's one of the most common

00:25:44.250 --> 00:25:47.150
threads that a piece of assistive
technology needs to be able to adapt

00:25:47.150 --> 00:25:49.010
the functionality of an application.

00:25:49.040 --> 00:25:52.620
So we have a lot of applications that
are not even aware it's being adapted.

00:25:52.620 --> 00:25:55.980
So we give pretty low-level control
for one application to peer across a

00:25:55.980 --> 00:25:59.690
protected memory and look into another
application and determine the UI state

00:25:59.870 --> 00:26:01.650
and to be able to affect that state.

00:26:01.680 --> 00:26:05.140
It supports some existing APIs that
we've actually had in the system for

00:26:05.140 --> 00:26:08.600
a while that were more general-purpose
APIs for synthesizing events,

00:26:08.630 --> 00:26:09.920
keyboard-mouse events.

00:26:09.920 --> 00:26:12.780
And so it can also be used in
conjunction with those to create

00:26:12.780 --> 00:26:14.720
some very powerful solutions.

00:26:14.720 --> 00:26:15.450
But more importantly,
this API set has really become

00:26:15.450 --> 00:26:15.890
a common groundwork for us.

00:26:15.900 --> 00:26:15.900
So we're able to use this to create
some very powerful solutions.

00:26:15.900 --> 00:26:15.900
So we have a lot of applications that
are not even aware it's being adapted.

00:26:15.900 --> 00:26:15.900
So we give pretty low-level control
for one application to peer across a

00:26:15.900 --> 00:26:15.900
protected memory and look into another
application and determine the UI state

00:26:15.900 --> 00:26:15.900
and to be able to affect that state.

00:26:15.900 --> 00:26:15.900
But more importantly,
this API set has really become

00:26:15.900 --> 00:26:15.900
a common groundwork for us.

00:26:15.900 --> 00:26:15.920
So we have a lot of applications that
are not even aware it's being adapted.

00:26:15.920 --> 00:26:16.070
So we give pretty low-level
control for one application to

00:26:16.080 --> 00:26:16.280
peer across a protected memory
and look into another application.

00:26:16.400 --> 00:26:18.910
And more importantly,
this API set has really become a

00:26:18.910 --> 00:26:22.250
common groundwork for Apple and the
assistive technology community to

00:26:22.250 --> 00:26:23.900
work on accessibility on the platform.

00:26:23.990 --> 00:26:25.700
In fact,
a lot of the feedback we've gotten

00:26:25.700 --> 00:26:28.360
over the past year in terms of things
you'd like to see in the way we

00:26:28.550 --> 00:26:32.900
handle text and text representation
has been incorporated into Panther.

00:26:32.900 --> 00:26:37.230
And then obviously we introduced
the core set of this in Mac OS 10.2,

00:26:37.240 --> 00:26:40.350
and we've done some enhancements,
particularly in the area of

00:26:40.350 --> 00:26:42.380
text handling in Panther.

00:26:43.100 --> 00:28:23.000
[Transcript missing]

00:28:24.250 --> 00:28:25.580
So what is UI element?

00:28:25.580 --> 00:28:29.150
Again, it's a framework-independent
abstraction for user interface.

00:28:29.830 --> 00:28:33.180
And we'll actually have a little
diagram of how a dialogue works,

00:28:33.250 --> 00:28:38.240
but you can think of essentially an
application is appearing of a hierarchy

00:28:38.240 --> 00:28:40.340
of these UI element abstractions.

00:28:40.890 --> 00:28:44.560
Because a UI element can actually
have attributes in terms of the

00:28:44.560 --> 00:28:48.100
title of a window or the value of
a particular control or slider,

00:28:48.100 --> 00:28:48.860
for example.

00:28:48.860 --> 00:28:53.830
And a UI element can also
have children attributes.

00:28:53.830 --> 00:28:55.770
So, for example,
if you have a window and it

00:28:55.770 --> 00:28:58.270
contains within it a child,
which might be a button.

00:28:58.300 --> 00:29:01.320
And obviously certain controls
are going to accept actions,

00:29:01.320 --> 00:29:02.600
user interface events.

00:29:02.600 --> 00:29:05.880
And so you can actually have,
a UI element can have an action as well,

00:29:05.910 --> 00:29:08.180
such as a press action
or an increment action.

00:29:08.280 --> 00:29:10.040
There's a whole suite of those.

00:29:10.500 --> 00:29:13.490
So let's actually sort of take a look,
because I think it's better

00:29:13.600 --> 00:29:16.370
to sort of describe how this
really works in reality.

00:29:16.370 --> 00:29:21.690
And show how the UI elements in the
Accessibility API work to overcome

00:29:21.690 --> 00:29:24.500
the problem of one application,
a piece of assistive technology,

00:29:24.500 --> 00:29:27.310
needing to know what's going on in the
user interface of another application.

00:29:27.320 --> 00:29:30.310
So here we have a theoretical
piece of assistive technology,

00:29:30.350 --> 00:29:32.580
and we have another
application that's just,

00:29:32.580 --> 00:29:34.540
you know, my app that's running.

00:29:34.540 --> 00:29:36.990
Obviously they're separated
by a protected memory model.

00:29:36.990 --> 00:29:37.910
They're in different processes.

00:29:37.940 --> 00:29:40.320
So we need to somehow
to start a dialogue.

00:29:40.500 --> 00:29:42.500
To determine the user interface state.

00:29:42.500 --> 00:29:44.460
So the first thing I do
is get the process ID.

00:29:44.500 --> 00:29:46.500
And there's a couple
different APIs to do this.

00:29:46.500 --> 00:29:49.250
But once I have the process ID,
that's going to,

00:29:49.260 --> 00:29:51.500
I'm going to have to basically
ask for a UI element,

00:29:51.500 --> 00:29:53.990
the initial UI element
for this process ID.

00:29:54.000 --> 00:29:57.500
So I will call
ax_UI_element_create_application,

00:29:57.500 --> 00:30:00.990
pass in the process ID,
and I'm going to get back a UI element

00:30:00.990 --> 00:30:04.040
that's going to contain some information,
the top level information

00:30:04.040 --> 00:30:05.950
on that application.

00:30:07.200 --> 00:33:42.100
[Transcript missing]

00:33:42.530 --> 00:33:45.690
So what I'd like to do is
invite Mike Engber to the stage.

00:33:45.690 --> 00:33:50.890
And he's going to take us in--that
is his actual job title right there.

00:33:51.050 --> 00:33:53.740
And he's going to actually show
us the UI Element Inspector.

00:33:53.790 --> 00:33:55.830
The UI Element Inspector is
actually sample code that you guys

00:33:55.840 --> 00:33:57.270
can pull down and take a look at.

00:33:57.440 --> 00:34:01.370
And it's basically a way that
you can use the accessibility

00:34:01.380 --> 00:34:03.640
APIs and show them in action.

00:34:03.790 --> 00:34:04.700
Okay, hello.

00:34:04.700 --> 00:34:07.400
My name is Mike Engber and I'm
going to start off with a demo of

00:34:07.480 --> 00:34:10.760
UI Element Inspector that's going to
sort of give a live illustration of

00:34:10.880 --> 00:34:12.750
what Travis has been talking about.

00:34:12.950 --> 00:34:16.280
And then I have a few slides, only six,
so don't worry.

00:34:16.370 --> 00:34:19.100
And I'm going to cover some
of the things we've added for

00:34:19.100 --> 00:34:21.150
Panther in the accessibility APIs.

00:34:21.150 --> 00:34:23.760
And then finally,
I'm going to end with another

00:34:23.760 --> 00:34:25.320
demo of a fun little app.

00:34:28.060 --> 00:34:32.480
So UI Element Inspector is
available as sample code from DTS.

00:34:32.560 --> 00:34:34.920
It has been for a while,
so some of you may already

00:34:34.930 --> 00:34:36.340
be familiar with it.

00:34:38.240 --> 00:34:42.900
And I'm going to start by launching it.

00:34:42.900 --> 00:34:46.960
And what this program does is
every time the mouse moves,

00:34:47.000 --> 00:34:51.670
it checks what UI element
the cursor is over.

00:34:51.810 --> 00:34:55.090
So as I move over different things,
you can see that the contents

00:34:55.090 --> 00:34:56.500
of this window change.

00:34:56.580 --> 00:35:01.770
I'm going to increase the font size
so people can read it a little better.

00:35:06.680 --> 00:35:08.360
and now I'm going to launch TextEdit.

00:35:08.360 --> 00:35:12.200
We're going to do some demonstrations
of what it can do with TextEdit.

00:35:15.400 --> 00:35:22.400
So here I'm over an untitled window in
TextEdit and we can see that we get the,

00:35:24.000 --> 00:35:26.940
The list of attributes
that the window supports,

00:35:27.050 --> 00:35:30.290
things like the role,
the role description, the title.

00:35:30.750 --> 00:35:35.030
At the top of the window is showing the
position of the window in the hierarchy.

00:35:35.090 --> 00:35:38.750
So you can see at the top of the
hierarchy is the application itself.

00:35:38.750 --> 00:35:41.770
And then this window
is one of its children.

00:35:42.430 --> 00:35:46.130
One of the sort of challenging
things with the UI of this program

00:35:46.340 --> 00:35:49.540
is since whenever I move the mouse,
it changes what I'm looking at.

00:35:49.540 --> 00:35:52.290
If I want to operate on that thing,
that's a problem.

00:35:52.290 --> 00:35:58.610
So use a hot key and you can lock
in on the particular UI element that

00:35:58.610 --> 00:36:02.900
you're looking at and everything
turns to red to indicate that.

00:36:03.200 --> 00:36:05.760
And then this little
interaction window appears.

00:36:05.760 --> 00:36:08.470
And I can't increase the font size in it,
so I have to apologize,

00:36:08.570 --> 00:36:11.410
but I'll describe in
detail what I'm doing.

00:36:11.590 --> 00:36:16.820
So we can see we are now locked into the
window and one of the things you can do

00:36:17.220 --> 00:36:20.580
is use this pop-up menu and get a list
of all the attributes in the window,

00:36:20.580 --> 00:36:23.020
which we've already seen above,
and we can see some of

00:36:23.020 --> 00:36:24.410
them have W's next to them.

00:36:24.420 --> 00:36:25.770
That means they're writable.

00:36:25.840 --> 00:36:28.550
So I'm going to pick
the position attribute.

00:36:28.550 --> 00:36:33.570
We can see its position is given
in XY coordinates and I can...

00:36:34.370 --> 00:36:39.610
Change the Y coordinate and hit
set value and the window moves.

00:36:39.770 --> 00:36:45.710
and other experts have also been
involved in the development of the app.

00:36:45.960 --> 00:36:47.150
and it's a Boolean.

00:36:47.280 --> 00:36:52.080
It's now at zero and
I can change it to one,

00:36:52.090 --> 00:36:57.630
set it and the window disappears
and then I'll bring it back

00:36:57.850 --> 00:37:00.290
by setting it back to zero.

00:37:01.410 --> 00:37:05.110
and this illustrates a point that
sometimes people new to the APIs forget,

00:37:05.110 --> 00:37:07.880
is that actions aren't the only
way to interact with UI elements.

00:37:08.000 --> 00:37:11.790
A large amount of your interaction is
going to be accomplished through setting

00:37:11.790 --> 00:37:14.410
the values of writable attributes.

00:37:23.700 --> 00:37:26.700
Okay, so now I'm going to bring up
TextEdit's Preferences pane.

00:37:26.700 --> 00:37:40.720
And I'm going to illustrate a couple
more features of UI Element Inspector.

00:37:41.290 --> 00:37:47.470
I'm going to focus in on this
text that labels this box.

00:37:47.710 --> 00:37:50.680
and there's this little check
box in the interaction window

00:37:51.020 --> 00:37:55.750
that lets you highlight the
thing that you're locked onto.

00:37:55.790 --> 00:37:58.700
And so this is useful for going around
the app and just seeing what you can hit.

00:37:58.870 --> 00:38:02.440
So I'll demonstrate here
we've hit another button.

00:38:02.540 --> 00:38:06.600
Here we can hit a pop up and
I'll go back to that label.

00:38:07.040 --> 00:38:12.030
And then also in the interaction
window is a pop-up named Go To.

00:38:12.030 --> 00:38:13.400
And you can actually walk the hierarchy.

00:38:13.480 --> 00:38:16.130
So you can use your mouse to get
close to where you want to be.

00:38:16.210 --> 00:38:17.570
And then we can go up to the parent.

00:38:17.580 --> 00:38:20.350
We see the highlight changes
to reflect that that title is

00:38:20.350 --> 00:38:21.860
actually a child of that box.

00:38:21.920 --> 00:38:27.340
And then we can go up another level
and the box is a child of the window.

00:38:32.830 --> 00:38:38.520
and I'm going to show one more thing.

00:38:38.630 --> 00:38:42.440
So you might be asking the question,
can UI Element Inspector inspect itself?

00:38:42.440 --> 00:38:43.640
And the answer is yes, it can.

00:38:43.640 --> 00:38:49.180
And I'll end the demo by
having it close itself.

00:38:54.640 --> 00:38:58.330
So we can, here I'll perform an action,
which is AXPress on the

00:38:58.450 --> 00:38:59.930
close button of the window.

00:38:59.930 --> 00:39:02.660
And we're done.

00:39:17.100 --> 00:39:17.840
All right.

00:39:17.840 --> 00:39:21.190
So, as we just showed,
we have this model of attributes and

00:39:21.190 --> 00:39:25.520
values and you can ask a UI element,
you can pass it a name of an attribute,

00:39:25.650 --> 00:39:30.500
you can get back the value and this
really suffices for most purposes and

00:39:30.500 --> 00:39:33.220
this is--and this is really all we had

00:39:33.320 --> 00:39:33.920
in Jaguar.

00:39:33.920 --> 00:39:36.960
But we found that sometimes
just passing the name of an

00:39:37.030 --> 00:39:39.010
attribute isn't quite enough.

00:39:39.120 --> 00:39:43.480
So, in Panther, we added this concept of
parameterized attributes.

00:39:43.680 --> 00:39:46.370
And for instance,
you might want to know what

00:39:46.380 --> 00:39:47.970
character the mouse is over.

00:39:48.080 --> 00:39:51.100
And in that case, you need to pass in the
position of the mouse.

00:39:51.100 --> 00:39:54.000
Or you might want to know the
bounding rectangle for some text.

00:39:54.000 --> 00:39:57.440
And in that case, you need to pass in the
range of characters of the

00:39:57.500 --> 00:39:59.060
text you're interested in.

00:39:59.070 --> 00:40:02.300
So, we added this concept of
parameterized attributes.

00:40:02.300 --> 00:40:04.850
It's conceptually,
it's similar to attributes.

00:40:05.020 --> 00:40:07.790
But now, when you ask for the value,
you pass in a name and you

00:40:07.790 --> 00:40:09.100
also pass in a parameter.

00:40:09.100 --> 00:40:11.050
And the type of the parameter varies.

00:40:11.130 --> 00:40:14.330
And I'll go over some examples
of that in an upcoming slide.

00:40:20.530 --> 00:40:25.540
So to accomplish this,
we added two new APIs in Panther.

00:40:25.540 --> 00:40:29.090
The first one is
ax-ui-element-copy-parameterized-attrib

00:40:29.090 --> 00:40:30.960
ute-names.

00:40:30.960 --> 00:40:35.640
And you can see we kept brevity
in mind when naming these APIs.

00:40:35.640 --> 00:40:38.630
And the second one is
ax-ui-element-copy-parameterized-attrib

00:40:38.630 --> 00:40:39.840
ute-values.

00:40:39.870 --> 00:40:43.840
So the first one is very similar
to an existing API that returns

00:40:43.840 --> 00:40:45.800
you a list of all the attributes.

00:40:45.800 --> 00:40:48.620
This one returns you a separate list
of the parameterized attributes.

00:40:48.620 --> 00:40:50.960
And it's a separate list
for compatibility reasons.

00:40:50.960 --> 00:40:53.610
We didn't want existing code
bumping in to parameterized

00:40:53.610 --> 00:40:57.630
attributes and trying to get their
value and not passing a parameter.

00:40:57.680 --> 00:41:01.480
So since they're separate lists,
that can't happen.

00:41:03.070 --> 00:41:06.870
and the second call is
what you're going to use.

00:41:06.870 --> 00:41:08.650
Once you've got the name of
the parameterized attribute

00:41:08.690 --> 00:41:11.760
you're going to use,
you get to pass in the UI element,

00:41:11.780 --> 00:41:17.200
the attribute, the appropriate parameter,
and then you get back your value.

00:41:17.330 --> 00:41:21.550
and for now, we only support reading,
not writing of the

00:41:21.550 --> 00:41:23.040
parameterized attribute values.

00:41:23.040 --> 00:41:25.880
But if a need arises,
we might consider extending

00:41:25.880 --> 00:41:27.180
that in the future.

00:41:29.740 --> 00:41:36.920
So no presentation would be complete
without a giant table of very small text.

00:41:36.920 --> 00:41:39.810
So I apologize if you're
having trouble reading it,

00:41:39.880 --> 00:41:42.840
but I'll go over some
of the items in detail.

00:41:43.550 --> 00:41:46.930
This is a list of the parameterized
attributes that we have

00:41:46.930 --> 00:41:50.500
currently implemented in Panther.

00:41:50.500 --> 00:41:52.510
And they all have to do with text.

00:41:52.520 --> 00:41:54.740
So there were a lot of requests
from developers to find out more

00:41:54.790 --> 00:41:57.830
detailed information about text,
what style it's in,

00:41:57.830 --> 00:42:00.380
how it's formatted on the screen.

00:42:00.430 --> 00:42:04.630
And this is where we found
we really needed a parameter

00:42:04.630 --> 00:42:09.430
along with an attribute name in
order to answer these requests.

00:42:09.440 --> 00:42:15.200
So the first one is KIX line for index
parameterized attribute so this one is

00:42:15.320 --> 00:42:18.250
addressing the issue of the text layout

00:42:18.520 --> 00:42:24.400
If you pass the index into a text string,
then we're going to tell

00:42:24.400 --> 00:42:25.170
you what line it's on.

00:42:25.200 --> 00:42:28.990
And then the second attribute
up there does the opposite.

00:42:29.120 --> 00:42:32.270
If you give me a line number,
I'm going to tell you the range

00:42:32.270 --> 00:42:34.000
of text that's on that line.

00:42:34.000 --> 00:42:36.930
Then there's a...

00:42:40.110 --> 00:42:43.840
String for Range, which will,
given a range of text,

00:42:43.840 --> 00:42:46.280
allow you to just get that much of it.

00:42:46.490 --> 00:42:49.460
Before, you could ask for a text
object's text in its entirety.

00:42:49.460 --> 00:42:52.540
This lets you get it a chunk at a time.

00:42:53.290 --> 00:42:58.040
Then there's one that'll tell you
if you specify a character position,

00:42:58.110 --> 00:43:00.950
what range of text you're over,
and you have to keep in mind that,

00:43:00.960 --> 00:43:03.290
you know, the mouse might appear to
be over a single character,

00:43:03.290 --> 00:43:06.950
but in fact, because of surrogate pairs
or multi-byte glyphs,

00:43:06.950 --> 00:43:08.280
you might be over several characters.

00:43:08.280 --> 00:43:09.530
So we return the whole range.

00:43:11.950 --> 00:43:15.710
Then there's range for index,
and this again has to do

00:43:15.770 --> 00:43:17.490
with multi-byte characters.

00:43:17.540 --> 00:43:21.280
If you specify an index in the text,
we'll give you the full range of

00:43:21.280 --> 00:43:25.760
characters that comprise that glyph.

00:43:25.760 --> 00:43:28.950
So there's calls similar to this,
like range of composed

00:43:28.950 --> 00:43:31.480
characters in the kit,
and this is sort of the

00:43:31.480 --> 00:43:33.750
accessibility equivalent to that.

00:43:36.020 --> 00:43:38.920
Then we have some that
have to do with layout.

00:43:38.970 --> 00:43:44.690
Given a, there's the KX range for,
KX bounds for range

00:43:44.690 --> 00:43:45.850
parameterized attributes.

00:43:45.850 --> 00:43:47.870
So you give a range of text
and we're going to give you

00:43:47.940 --> 00:43:50.540
back a bounding rectangle.

00:43:50.540 --> 00:43:52.660
And then there's the,

00:43:53.660 --> 00:43:56.500
K-A-X R-T-F for range
parameterized attribute.

00:43:56.500 --> 00:43:58.750
So again,
you can give us a range of text and

00:43:58.750 --> 00:44:01.950
we're going to hand you back the
R-T-F representation of the text.

00:44:01.950 --> 00:44:05.890
And from there, you can extract the font,
the size, the color,

00:44:05.890 --> 00:44:08.980
just about everything
you could want to know.

00:44:08.980 --> 00:44:12.120
And then finally,
there's this K-A-X style range

00:44:12.120 --> 00:44:14.540
for index parameterized attribute.

00:44:14.620 --> 00:44:17.880
I'm sure you guys are going to enjoy
typing these names in just as much

00:44:17.880 --> 00:44:22.120
as I am speaking them right now.

00:44:22.130 --> 00:44:26.360
And this last one lets you go
through your text in style runs.

00:44:26.430 --> 00:44:28.210
So if you're interested
in when things change,

00:44:28.280 --> 00:44:32.090
you can use this and find out, you know,
the extent of this current style run

00:44:32.090 --> 00:44:33.580
and then move on to the next one.

00:44:39.100 --> 00:44:42.800
There's a couple of other attributes we
added for text accessibility in Panther,

00:44:42.800 --> 00:44:45.400
and these aren't
parameterized attributes.

00:44:45.410 --> 00:44:51.000
The first one is just to tell you how
many characters are in a text object.

00:44:51.030 --> 00:44:53.520
And the second one is to
tell you what range of those

00:44:53.530 --> 00:44:55.570
characters are currently visible.

00:44:56.170 --> 00:44:58.760
And the next two are a
little more esoteric.

00:44:58.760 --> 00:45:01.690
These have to do with text that flows.

00:45:01.770 --> 00:45:04.360
If you have, for instance,
a two column document,

00:45:04.360 --> 00:45:07.180
that might be two separate
text UI elements and the

00:45:07.180 --> 00:45:08.820
text flows between them.

00:45:08.820 --> 00:45:11.480
So the first one,
the shared text UI element attribute,

00:45:11.570 --> 00:45:14.740
tells you what's your portion of
the text that you're displaying.

00:45:14.890 --> 00:45:17.300
Because in general,
most of the attributes,

00:45:17.300 --> 00:45:20.540
if you ask for the text,
they just treat this,

00:45:20.590 --> 00:45:24.070
treat you as if you have all the text
because that's most of the time what

00:45:24.070 --> 00:45:26.120
you want and that's most convenient.

00:45:26.120 --> 00:45:30.530
But if you really need to get to find out
what exactly only this UI element has,

00:45:30.630 --> 00:45:32.780
you can use this
attribute to find it out.

00:45:32.780 --> 00:45:38.230
And then the last attribute,
AX shared character range attribute.

00:45:38.800 --> 00:45:40.180
Actually, I got these backwards.

00:45:40.240 --> 00:45:42.460
The second one is the one
that will tell you your share.

00:45:42.460 --> 00:45:47.350
The first one is going to return
you an array of other UI elements

00:45:47.840 --> 00:45:49.370
where your text is shared with.

00:45:49.560 --> 00:45:52.750
So, you know,
it would return you the other column if

00:45:52.780 --> 00:45:55.460
your text was split between two columns.

00:46:01.340 --> 00:46:05.660
Now here's a few other untext related
attributes we've added for Panther.

00:46:05.660 --> 00:46:09.990
First, we had a lot of requests for
people wanting to be able to

00:46:10.050 --> 00:46:11.580
identify the default button.

00:46:11.910 --> 00:46:15.500
So we have a parameter on Windows that
will tell you the default button

00:46:15.500 --> 00:46:17.870
and we also have one that will
identify the cancel button.

00:46:20.040 --> 00:46:23.860
We also added a couple of notifications.

00:46:23.860 --> 00:46:27.340
So when drawers appear or
when sheets slide down,

00:46:27.340 --> 00:46:28.530
you can get a notification.

00:46:28.620 --> 00:46:31.440
When they're destroyed,
you get the normal UI element

00:46:31.490 --> 00:46:32.770
destroyed notification.

00:46:32.770 --> 00:46:34.930
So we didn't have to add anything there.

00:46:40.650 --> 00:46:43.860
We also added some new
sub-roles for windows.

00:46:44.010 --> 00:46:46.360
Again, this was a,
we had a lot of requests from

00:46:46.360 --> 00:46:49.340
developers wanting to be able to
distinguish a floating window,

00:46:49.430 --> 00:46:53.190
possibly ignore it, from a dialogue,
from a regular window.

00:46:53.200 --> 00:46:57.950
And so, we added a variety of sub-roles
that will identify dialogues,

00:46:57.950 --> 00:47:02.010
floating windows,
and then there's an all-purpose unknown

00:47:02.040 --> 00:47:06.000
if someone puts up a custom window,
we can't tell what it is.

00:47:10.320 --> 00:47:14.580
And so I'm going to finish up with a
demo of a little app we call Monkey See,

00:47:14.580 --> 00:47:16.340
Monkey Do.

00:47:27.140 --> 00:47:31.480
So I'm going to start
by launching TextEdit.

00:47:31.480 --> 00:47:35.510
And this is a typical document you
might work with on any day with a

00:47:35.510 --> 00:47:38.740
variety of tastefully formatted text.

00:47:38.800 --> 00:47:39.700
and the rest of the team.

00:47:40.700 --> 00:47:41.010
So, I'm going to show you how to extract
rich textual information from text and

00:47:41.010 --> 00:47:42.700
different styles and different colors.

00:47:42.700 --> 00:47:45.650
And next I'm going to launch--I'm
going to first move this out

00:47:45.650 --> 00:47:49.100
of the way and then I'm going
to launch MonkeySeeMonkeyDo.

00:47:49.100 --> 00:47:51.370
And this app,
it's named MonkeySeeMonkeyDo because

00:47:51.370 --> 00:47:53.140
basically that's what it does.

00:47:53.160 --> 00:47:57.710
It uses only the accessibility
APIs and it tries to replicate

00:47:57.710 --> 00:48:00.520
the user interface of another app.

00:48:00.520 --> 00:48:05.170
So, I'm going to--from the
list it presents me,

00:48:05.170 --> 00:48:06.980
I'm going to pick TextEdit.

00:48:08.120 --> 00:48:12.280
and it's computing its own, you know,
it's creating its own window that's

00:48:12.300 --> 00:48:15.230
supposed to look as close as it can get

00:48:15.700 --> 00:48:16.540
to the original app.

00:48:16.640 --> 00:48:19.020
And again,
all it's using is the accessibility

00:48:19.020 --> 00:48:20.630
APIs to get the information it needed.

00:48:20.720 --> 00:48:23.260
And it's actually completed a while ago.

00:48:23.260 --> 00:48:25.830
I'll just have to move it off.

00:48:26.470 --> 00:48:30.360
So, again,
this illustrates that all the rich

00:48:30.380 --> 00:48:36.890
text information is available to
you through the Accessibility APIs.

00:48:40.130 --> 00:48:46.380
So I'm going to demonstrate some
other features of MonkeySeeMonkeyDo.

00:48:46.410 --> 00:48:47.580
First I'll go to TextEdit.

00:48:47.580 --> 00:48:49.180
I'm going to close this window.

00:48:49.220 --> 00:48:53.020
And you'll notice
MonkeySeeMonkeyDo removed its copy.

00:48:53.050 --> 00:48:57.340
That was an example of getting a
notification of a UI element destroyed.

00:48:57.540 --> 00:49:00.230
And now I'm going to
bring up preferences.

00:49:00.280 --> 00:49:03.560
Now this is actually a little tricky
because when Textetics deactivated,

00:49:03.560 --> 00:49:05.550
its preferences panel disappears.

00:49:05.550 --> 00:49:07.570
So that adds a little
bit of a wrinkle to this.

00:49:07.900 --> 00:49:10.310
But MonkeySeeMonkeyDo has
already done its best to

00:49:10.410 --> 00:49:11.840
replicate the preferences panel.

00:49:11.840 --> 00:49:15.220
And you might have noticed the
change if you were paying attention.

00:49:15.260 --> 00:49:17.190
This one doesn't quite look right.

00:49:17.200 --> 00:49:20.820
And that's because there's no
way through the Accessibility

00:49:20.820 --> 00:49:24.580
APIs to discover whether you're
using regular size controls,

00:49:24.580 --> 00:49:26.990
tiny controls, or small controls.

00:49:27.000 --> 00:49:29.750
So you could take a guess
based on the size and here

00:49:29.750 --> 00:49:31.700
it's not guessing quite right.

00:49:31.870 --> 00:49:35.090
So I'm going to pull
aside MonkeySeeMonkeyDo's

00:49:35.090 --> 00:49:37.330
version of the preferences.

00:49:37.510 --> 00:49:39.810
And again, TextSet,
it's not in the foreground so that's

00:49:39.810 --> 00:49:41.600
why you don't see the other window.

00:49:41.600 --> 00:49:44.500
But as soon as I bring it back,
you'll see it.

00:49:45.130 --> 00:49:48.180
and using notifications,
there's some more

00:49:48.220 --> 00:49:49.160
connections we can show.

00:49:49.270 --> 00:49:51.800
For instance, we can pick something
from the pop-up menu.

00:49:51.800 --> 00:49:55.160
Of course,
I picked one that was concealed.

00:49:55.180 --> 00:49:58.440
You can barely see it
below the upper window.

00:49:58.490 --> 00:50:02.180
I'll go back to automatic
and you can see it changed.

00:50:02.460 --> 00:50:12.700
Next, I'll click a radio button and you
can see it changes between the two.

00:50:15.360 --> 00:50:16.560
can illustrate some typing.

00:50:16.560 --> 00:50:22.610
We can change the window width to 100.

00:50:22.610 --> 00:50:25.540
And when I hit Enter,
it'll propagate down.

00:50:28.640 --> 00:50:32.130
So again,
this application is just sort of

00:50:32.130 --> 00:50:36.590
an illustration of what's possible
to do with the Accessibility APIs.

00:50:42.600 --> 00:50:43.600
Okay, back to Travis.

00:50:43.600 --> 00:50:44.600
All right, thank you.

00:50:44.600 --> 00:50:45.600
Cool.

00:50:45.600 --> 00:50:50.790
So let's go back to slides.

00:50:52.580 --> 00:50:54.920
So now what I want to talk about is
if you're an application developer,

00:50:54.920 --> 00:50:58.870
I'm going to touch briefly on how
do I engage the accessibility APIs,

00:50:58.870 --> 00:51:01.140
all the sort of infrastructure that
we've been talking about in the

00:51:01.240 --> 00:51:02.150
first half of the presentation.

00:51:02.200 --> 00:51:06.610
And we'll go through it really quickly
because we did quite a bit of this last

00:51:06.730 --> 00:51:09.380
year in terms of going into great detail.

00:51:09.380 --> 00:51:14.260
So there should be sessions on ADC TV and
the DVD ROM on Carbon accessibility.

00:51:14.260 --> 00:51:19.740
There's also one on Cocoa Controls and
also the accessibility overview session.

00:51:19.740 --> 00:51:21.840
I'll have a lot of this
content in greater detail.

00:51:22.570 --> 00:51:26.610
But the key thing is obviously there's
multiple types of applications that work

00:51:26.670 --> 00:51:28.120
on different frameworks on Mac OS X.

00:51:28.120 --> 00:51:31.560
And the accessibility API can
work with Carbon applications,

00:51:31.560 --> 00:51:33.240
but there are some caveats.

00:51:33.790 --> 00:51:36.930
Essentially,
we've been telling developers of

00:51:37.000 --> 00:51:39.880
Carbon applications to use standard
controls for a long time for other

00:51:40.100 --> 00:51:41.740
reasons besides accessibility.

00:51:41.740 --> 00:51:44.400
If you were one of those
developers that took our advice,

00:51:44.550 --> 00:51:46.210
you're going to be in pretty good
shape because we're able to make

00:51:46.220 --> 00:51:49.870
a lot of the standard controls
accessible in Jaguar and Panther.

00:51:49.880 --> 00:51:52.200
However, there's a long story.

00:51:52.370 --> 00:51:54.190
We've had a sort of past
of Carbon developers

00:51:54.190 --> 00:51:55.360
doing their own controls.

00:51:55.420 --> 00:51:58.840
If you do this in your application,
you will have to actually do some

00:51:58.840 --> 00:52:03.670
work to support the accessibility
APIs in your application.

00:52:03.710 --> 00:52:08.730
The other thing is important is your app
should support Carbon events as well.

00:52:08.820 --> 00:52:13.320
And that also is one of the
ways accessibility API works.

00:52:13.400 --> 00:52:17.810
The other thing that is sort of an area
of difficulty and it's something that

00:52:17.860 --> 00:52:22.730
we don't have total control over as
much as we'd like to is that in Carbon,

00:52:22.730 --> 00:52:28.300
there's also a history of people doing
their own text engines or you name it,

00:52:28.340 --> 00:52:29.330
licensed text engines.

00:52:29.340 --> 00:52:30.230
They roll their own.

00:52:30.580 --> 00:52:35.060
There's several different ones
available in the OS and LTE.

00:52:35.060 --> 00:52:35.780
There's text edit.

00:52:35.870 --> 00:52:39.330
And it's too big of a problem
for us to solve on our own.

00:52:39.380 --> 00:52:44.150
So Carbon developers want to use the
parameterized attributes are going to

00:52:44.150 --> 00:52:49.300
have to add some support into their
text engine for supporting these APIs.

00:52:49.300 --> 00:52:51.060
It's something we'd
love to fix if we could,

00:52:51.340 --> 00:52:52.020
but it's too big a problem.

00:52:52.020 --> 00:52:54.020
It's too big a problem
for just Apple to tackle.

00:52:54.020 --> 00:52:56.010
We're going to have more
information published on

00:52:56.090 --> 00:52:57.620
this topic on Tech Note 2092.

00:52:58.110 --> 00:53:03.620
And that is going to be forthcoming
and it will have lots of detail on

00:53:03.620 --> 00:53:07.860
what Carbon developers need to do to
properly support the accessibility API.

00:53:09.470 --> 00:53:10.940
Good news in the other frameworks.

00:53:10.980 --> 00:53:14.000
Cocoa, it's a great story there.

00:53:14.000 --> 00:53:17.780
The Cocoa team actually modified
AppKit to support the Accessibility

00:53:17.780 --> 00:53:22.170
API last year and they continued,
obviously, to increase that support.

00:53:22.170 --> 00:53:25.780
And because of the way Cocoa works,
essentially you're always inheriting

00:53:25.790 --> 00:53:29.780
from parent classes applications that
may not have been aware of accessibility.

00:53:29.780 --> 00:53:33.320
And say, for example, Mac OS 10.1,
when those applications are

00:53:33.330 --> 00:53:37.280
run on X.2 or in Panther,
those applications will be accessible.

00:53:37.280 --> 00:53:39.380
There's still the possibility
for Cocoa to be accessible.

00:53:39.400 --> 00:53:44.240
There are ways to make those
custom controls accessible.

00:53:44.240 --> 00:53:47.180
Java applications,
an interesting story here,

00:53:47.180 --> 00:53:51.260
is you don't need a Java accessibility
bridge like you do on other platforms.

00:53:51.270 --> 00:53:54.700
What a Java accessibility bridge
is bridges out the accessibility

00:53:54.700 --> 00:53:58.160
from the platform native side where
the assistive technology has to

00:53:58.160 --> 00:54:00.080
run over through to the sandbox.

00:54:00.080 --> 00:54:01.920
We don't need that on Mac OS X.

00:54:01.920 --> 00:54:06.080
And with Java and Panther,
you just basically,

00:54:06.090 --> 00:54:07.570
we've done the work for you.

00:54:07.910 --> 00:54:09.380
And AWT and Swing applications,
we don't need that.

00:54:09.380 --> 00:54:12.040
applications that use standard
controls in those environments are

00:54:12.040 --> 00:54:14.350
going to be accessible as well.

00:54:15.210 --> 00:54:19.550
So let's talk briefly about bringing
your assistive technology to Mac OS X.

00:54:19.550 --> 00:54:22.670
This is more for the assistive
technology developers who are

00:54:22.910 --> 00:54:24.220
looking to engage our platform.

00:54:24.220 --> 00:54:28.210
There's a lot of ways you can go
wrong because it's sort of like a

00:54:28.210 --> 00:54:32.790
restaurant with a huge menu and we
want you to choose certain items.

00:54:32.920 --> 00:54:35.220
We have like a chef special
to do the right technologies.

00:54:35.220 --> 00:54:37.650
So I'm going to give you
some tips right here.

00:54:37.800 --> 00:54:40.530
One of the things that we have been
dealing with the assistive technology

00:54:40.600 --> 00:54:44.540
community for three years for
Apple and it's a continual point of

00:54:44.540 --> 00:54:47.340
confusion as to where you should start.

00:54:47.510 --> 00:54:50.130
How should you begin coding your
assistive technology application?

00:54:50.140 --> 00:54:53.380
And it's sort of become clear to
us and looking at all the options

00:54:53.680 --> 00:54:57.410
repeatedly with a lot of developers
that if you're in a situation where

00:54:57.510 --> 00:55:01.630
you're trying to bring a new assistive
technology application up on Mac OS X,

00:55:01.630 --> 00:55:03.390
you want to do it in Cocoa.

00:55:03.400 --> 00:55:06.100
It's just going to be faster
and more efficient for you.

00:55:06.100 --> 00:55:07.780
You get a lot of platform
benefits by using it.

00:55:07.780 --> 00:55:10.440
And you also get a lot of
stability because the way the

00:55:10.440 --> 00:55:13.880
architecture works where Cocoa can
actually innovate and change and

00:55:14.150 --> 00:55:15.990
you'll inherit those advantages.

00:55:16.140 --> 00:55:19.790
And the rapid application development
aspect of Cocoa because a lot of

00:55:19.790 --> 00:55:24.280
assistive technology developers are small
shops and this is going to be tremendous

00:55:24.310 --> 00:55:26.170
productivity gain for you guys.

00:55:26.210 --> 00:55:28.950
So we really recommend
you take a look at Cocoa.

00:55:29.420 --> 00:55:32.150
If you're making an
assistive technology device,

00:55:32.170 --> 00:55:37.580
such as an alternate input device,
a head mouse, an eye tracker, a switch,

00:55:37.670 --> 00:55:41.530
I think that one of the problems that
we see a lot in this community is you

00:55:41.540 --> 00:55:45.340
guys use a lot of legacy I.O., serial,
PS2 mice.

00:55:45.360 --> 00:55:50.030
The reality is Apple sort of
really helped catalyze USB when we

00:55:50.270 --> 00:55:53.280
introduced the iMac a long time ago.

00:55:53.940 --> 00:55:54.600
USB is ready.

00:55:54.600 --> 00:55:57.870
So, you know, if you have a PS2 assistive
technology device,

00:55:57.870 --> 00:56:00.610
you're going to want to really think,
how do I move it to modern serial

00:56:00.610 --> 00:56:03.000
I.O.? In most of your cases,
it's going to be USB,

00:56:03.000 --> 00:56:05.980
but there's also interesting
possibility with things like FireWire,

00:56:05.980 --> 00:56:08.510
where an eye tracker,
instead of being this large

00:56:08.510 --> 00:56:12.220
multi-thousand dollar box and specialized
custom image processor done in hardware,

00:56:12.220 --> 00:56:15.520
could be a relatively
inexpensive FireWire camera with,

00:56:15.520 --> 00:56:18.280
you know,
using the real-time capabilities and

00:56:18.280 --> 00:56:23.220
the high-speed throughput of FireWire,
able to actually pump its data into...

00:56:23.940 --> 00:56:27.620
software that's running on Mac OS X,
which is using maybe our platform

00:56:27.620 --> 00:56:31.710
tuned DSP and math libraries to do the
actual calculations to track the eye.

00:56:31.720 --> 00:56:34.180
So then you can take,
by using the proper I.O.

00:56:34.180 --> 00:56:36.510
and clever software,
you can essentially factor your

00:56:36.510 --> 00:56:39.610
problem from a very expensive hardware
implementation down to potentially very

00:56:39.610 --> 00:56:41.400
inexpensive and affordable hardware.

00:56:41.400 --> 00:56:44.590
The other interesting thing is
when doing any of the new serial

00:56:44.590 --> 00:56:46.930
I.O., please follow the standards.

00:56:46.960 --> 00:56:48.630
It doesn't do any good to do the I.O.

00:56:48.650 --> 00:56:50.310
and then not follow the standards.

00:56:50.320 --> 00:56:53.720
And this occasionally happens where
people deliver an excellent PS2.

00:56:53.940 --> 00:56:55.240
It's not a very expensive
assistive technology,

00:56:55.240 --> 00:56:56.400
but they'll make it work like a keyboard.

00:56:56.460 --> 00:56:59.060
So when the user hits
the switch input device,

00:56:59.110 --> 00:57:01.760
it just says letter A, letter A,
letter A.

00:57:01.760 --> 00:57:04.310
And then it becomes a complicated
software problem to determine,

00:57:04.380 --> 00:57:06.080
okay, where'd that letter A come from?

00:57:06.120 --> 00:57:09.100
Did it come from the assistive
technology device versus did

00:57:09.100 --> 00:57:10.550
it come from the keyboard?

00:57:10.580 --> 00:57:13.340
And software,
layers of software have to be

00:57:13.350 --> 00:57:15.300
put in a place to decode that.

00:57:15.610 --> 00:57:17.880
Where if you follow, for example,
the USB HID spec,

00:57:17.880 --> 00:57:21.400
which has all sorts of input devices,
you could say this is a button.

00:57:21.460 --> 00:57:26.740
And that's much clearer than having a...
a switch emulate a piece of a keyboard.

00:57:26.760 --> 00:57:29.980
There's also interesting for
wireless opportunities such

00:57:30.040 --> 00:57:31.700
Bluetooth and also force feedback.

00:57:31.810 --> 00:57:33.590
We support force feedback in Mac OS X.

00:57:33.730 --> 00:57:36.030
And I think that could be an
interesting dimension to provide

00:57:36.140 --> 00:57:39.170
feedback back to the user when
using an alternate input device.

00:57:41.200 --> 00:57:46.100
And we have some speech technology
that's available in the operating system,

00:57:46.100 --> 00:57:47.400
a really good speech technology.

00:57:47.460 --> 00:57:49.680
We've been working on it
for a number of years,

00:57:49.680 --> 00:57:52.040
and that's available for
assistive technology developers

00:57:52.040 --> 00:57:52.970
to do text-to-speech.

00:57:52.970 --> 00:57:58.520
It's also available to
do speech recognition.

00:57:58.520 --> 00:58:01.860
And I'd like to invite
Kim Silverman up to the stage,

00:58:02.020 --> 00:58:05.520
and we're going to quickly do
a configuration adjustment,

00:58:05.520 --> 00:58:07.840
and this is sort of
an impromptu ad today,

00:58:07.940 --> 00:58:10.880
and do a quick demonstration
of some of the excellent speech

00:58:10.880 --> 00:58:12.520
capabilities built into Mac OS X.

00:58:12.520 --> 00:58:13.520
Hi, Travis.

00:58:13.520 --> 00:58:17.370
While Travis is setting up,
there are a whole lot of speech features

00:58:17.370 --> 00:58:19.460
built into the operating system.

00:58:19.540 --> 00:58:24.510
We don't have time to show you
even a small proportion of them.

00:58:24.610 --> 00:58:27.090
We're just going to step through
particularly what's relevant

00:58:27.150 --> 00:58:28.520
to the accessibility aspect.

00:58:28.520 --> 00:58:30.180
API.

00:58:30.910 --> 00:58:31.190
Thank you.

00:58:31.190 --> 00:58:37.160
So there are speech synthesis and speech
recognition capabilities that use that.

00:58:37.220 --> 00:58:39.160
Let's talk about the
speech synthesis first.

00:58:39.160 --> 00:58:41.660
Excuse my back,
I'll be looking at the screen here.

00:58:41.660 --> 00:58:46.160
I'm going to go to the system
preferences and the speech preferences,

00:58:46.550 --> 00:58:50.710
where in the spoken user interface tab,
I can turn these things on.

00:58:52.100 --> 00:58:56.620
The first thing I'll turn on is
selected text when the key is pressed.

00:58:56.620 --> 00:58:58.750
It's going to ask me for hotkey.

00:58:58.750 --> 00:59:02.030
I'll use F8,
and that means in any application,

00:59:02.030 --> 00:59:06.540
if I have some text selected,
I can speak it just by pressing F8.

00:59:06.640 --> 00:59:08.500
So we've got some...

00:59:09.800 --> 00:59:12.420
News, which I just brought up
before the session today.

00:59:12.420 --> 00:59:14.340
I'll press F8 and we ought to hear this.

00:59:17.010 --> 00:59:20.270
Security talks between
Israeli and Palestinian leaders

00:59:20.470 --> 00:59:22.200
are making good progress.

00:59:22.200 --> 00:59:26.240
So there's selected text
when the key is pressed.

00:59:26.240 --> 00:59:30.060
And this is one of the
disability features that,

00:59:30.060 --> 00:59:32.820
like many,
become popular amongst people who

00:59:32.830 --> 00:59:34.150
don't have disabilities as well.

00:59:34.160 --> 00:59:36.800
It means if you're typing a document,
for example,

00:59:36.980 --> 00:59:39.280
and you want to hear how it sounds,
you want to proof it,

00:59:39.320 --> 00:59:41.700
you just select it and hit
your hotkey and it's read back.

00:59:41.780 --> 00:59:46.690
That is useful for detecting spelling
mistakes because spell checkers can

00:59:46.740 --> 00:59:49.300
only detect typos that don't make words.

00:59:49.460 --> 00:59:52.880
If you ask any cognitive psychologist,
he'll point you to a lot of data showing

00:59:52.880 --> 00:59:56.180
that most of the typos that we make
make other real words and therefore

00:59:56.370 --> 00:59:58.020
spell checkers can't catch them.

00:59:58.020 --> 01:00:01.700
Then we have this item here,
text under the mouse.

01:00:01.820 --> 01:00:03.900
This again uses the Accessibility API.

01:00:03.900 --> 01:00:06.700
And when I turn it on,
you'll hear it speak already

01:00:06.700 --> 01:00:08.380
the name of that checkbox.

01:00:10.260 --> 01:00:11.860
Text under the mouse.

01:00:11.900 --> 01:00:15.380
And as I move this around,
it will speak other controls.

01:00:15.660 --> 01:00:17.260
SpeedTrack Ignition.

01:00:17.260 --> 01:00:18.440
I'm not doing anything to launch this.

01:00:18.440 --> 01:00:21.560
It's happening spontaneously.

01:00:21.560 --> 01:00:23.720
Default Voice.

01:00:24.420 --> 01:00:26.760
Spoken User Interface.

01:00:26.760 --> 01:00:30.630
OK, we'll turn that guy off,
otherwise you'll drive us crazy.

01:00:31.020 --> 01:00:33.150
Now let's go over to speech recognition.

01:00:33.150 --> 01:00:36.230
If ever you try out
the speech recognition,

01:00:36.230 --> 01:00:39.910
the first thing you should do is give
it a chance to normalize to the way

01:00:39.910 --> 01:00:42.960
your voice sounds in the acoustic
environment in which you're using it.

01:00:43.060 --> 01:00:48.180
We have built in automatic tracking and
adapting to the acoustic environment,

01:00:48.180 --> 01:00:49.780
but you can speed it up.

01:00:49.860 --> 01:00:50.860
I'll show you how.

01:00:50.860 --> 01:00:53.800
And I'm going to do it now because I'm
getting echoes from the back of the wall,

01:00:53.860 --> 01:00:56.450
which are quite a long delay,
and it's got to learn about that.

01:00:57.900 --> 01:01:02.120
So we built the speech recognition
to work with the microphone that's

01:01:02.210 --> 01:01:03.820
built into most of our machines.

01:01:03.820 --> 01:01:07.580
iMacs, iBooks, PowerBooks, Emacs.

01:01:07.580 --> 01:01:09.720
Tower machines don't have
a built-in microphone.

01:01:09.720 --> 01:01:14.540
You can get a number of third-party
USB head-mounted microphones.

01:01:14.540 --> 01:01:18.160
I'm using this one, which was produced by
our buddies over at VXI.

01:01:18.160 --> 01:01:19.660
Those guys really know
what they're doing.

01:01:19.660 --> 01:01:21.300
There are other brands
you can use as well.

01:01:22.760 --> 01:01:26.210
So you go to the speech
recognition preferences,

01:01:26.210 --> 01:01:30.210
to the listening tab,
and click on volume.

01:01:30.400 --> 01:01:33.290
Now, as I'm speaking,
I can adjust the volume so that my

01:01:33.390 --> 01:01:36.820
speech peaks just go into the red,
and then my task is to

01:01:36.820 --> 01:01:38.480
read down these commands.

01:01:38.480 --> 01:01:41.420
It's listening to me now,
and as it hears me say one

01:01:41.420 --> 01:01:44.240
of these and recognizes them,
it will flash.

01:01:44.260 --> 01:01:46.280
What time is it?

01:01:46.400 --> 01:01:48.410
Quit this application.

01:01:50.360 --> 01:01:52.440
Open a document.

01:01:52.570 --> 01:01:54.930
Show me what to say.

01:01:55.020 --> 01:01:57.110
Make this page speakable.

01:01:57.200 --> 01:01:59.280
Move page down.

01:01:59.390 --> 01:02:01.520
Hide this application.

01:02:01.610 --> 01:02:03.630
Switch to Finder.

01:02:05.060 --> 01:02:07.910
So ostensibly, we just let you set the
volume on the microphone,

01:02:07.910 --> 01:02:10.630
but what you don't know is we just
set nearly a thousand parameters

01:02:10.640 --> 01:02:14.000
there concerning spectral
properties of this microphone and

01:02:14.000 --> 01:02:16.170
me and this acoustic environment.

01:02:16.170 --> 01:02:18.930
Now we're ready to use the
accessibility features.

01:02:18.930 --> 01:02:20.540
I go to spoken user interface.

01:02:20.540 --> 01:02:21.670
Whoops, no I don't.

01:02:21.830 --> 01:02:23.740
Speech recognition commands.

01:02:23.740 --> 01:02:27.380
And here there are a number of sets
of commands that can be spoken from

01:02:27.530 --> 01:02:29.540
the speakable items application.

01:02:29.540 --> 01:02:31.410
Oh, I should turn that on first.

01:02:31.660 --> 01:02:33.610
So we go to on off, turn on here.

01:02:33.610 --> 01:02:38.240
This brings up speakable items and
there's our old familiar command window.

01:02:38.240 --> 01:02:41.080
And let's just zoom in
onto that for a moment.

01:02:41.100 --> 01:02:43.380
Woo, there it is.

01:02:43.380 --> 01:02:44.980
I like that.

01:02:47.960 --> 01:02:51.600
and I don't normally do this,
but I will turn on speak confirmation,

01:02:51.620 --> 01:02:55.270
which means it will speak back to
me anything that it hears me say.

01:02:56.850 --> 01:02:57.790
What time is it?

01:02:58.000 --> 01:02:58.800
What time is it?

01:02:58.800 --> 01:03:00.800
It's 11:36.

01:03:00.990 --> 01:03:01.700
Okay.

01:03:01.700 --> 01:03:02.800
This is speaker independent.

01:03:02.800 --> 01:03:06.230
I've not trained this to my voice
other than the normalization

01:03:06.230 --> 01:03:06.800
that you just saw me do.

01:03:06.800 --> 01:03:11.770
And that all of you will do when you
try this in your hotel rooms tonight,

01:03:11.770 --> 01:03:12.800
won't you?

01:03:12.800 --> 01:03:13.760
Yes.

01:03:13.800 --> 01:03:14.740
All right.

01:03:14.910 --> 01:03:17.150
Down here,
turned off by default is front window

01:03:17.520 --> 01:03:18.800
commands and menu bar commands.

01:03:18.800 --> 01:03:21.560
Both of these use that Accessibility API.

01:03:21.800 --> 01:03:25.620
So we'll turn this guy on,
and now I can speak through any front

01:03:25.670 --> 01:03:28.800
window commands in any application
that's using real controls.

01:03:28.800 --> 01:03:34.640
I'm showing you this because you're
going to keep using real Apple controls,

01:03:34.640 --> 01:03:35.770
aren't you?

01:03:38.390 --> 01:03:40.120
Default voice.

01:03:40.140 --> 01:03:42.330
Default voice.

01:03:42.420 --> 01:03:43.890
Spoken user interface.

01:03:43.990 --> 01:03:46.400
Spoken user interface.

01:03:46.400 --> 01:03:49.220
We have not programmed anything
special into these preferences,

01:03:49.240 --> 01:03:50.640
so we can go outside of our preferences.

01:03:50.640 --> 01:03:51.330
It will still work.

01:03:51.390 --> 01:03:52.910
Show all.

01:03:52.930 --> 01:03:54.010
Show all.

01:03:54.010 --> 01:03:56.020
Let's go and do another one.

01:03:56.020 --> 01:03:58.080
I'll just pick one at random.

01:03:58.080 --> 01:03:59.130
Let's do doc.

01:03:59.350 --> 01:03:59.700
Doc.

01:04:02.460 --> 01:04:03.200
Magnification.

01:04:03.200 --> 01:04:04.180
Magnification.

01:04:04.200 --> 01:04:11.200
So there you can see that
speech was developed as a client

01:04:11.200 --> 01:04:13.200
for the Accessibility API.

01:04:13.200 --> 01:04:16.800
Travis mentioned that it gives
you and us common ground.

01:04:16.800 --> 01:04:20.970
We use speech as a client so that
we could make sure the Accessibility

01:04:20.970 --> 01:04:23.200
API worked before we gave it to you.

01:04:23.200 --> 01:04:25.390
It also means that if you
use standard controls,

01:04:25.550 --> 01:04:29.620
you get a lot of accessibility in
your application just for free.

01:04:29.620 --> 01:04:32.680
And through the Accessibility API,
you can add even more.

01:04:32.760 --> 01:04:33.760
Okay.

01:04:33.760 --> 01:04:34.670
I think that's enough for now.

01:04:34.910 --> 01:04:35.610
Yeah.

01:04:35.730 --> 01:04:35.760
Thank you.

01:04:39.820 --> 01:04:42.100
Go back to the slides please.

01:04:42.100 --> 01:04:45.980
So yeah, it's pretty cool stuff.

01:04:46.150 --> 01:04:49.080
We've got great speech technology
in Mac OS X and it builds on top

01:04:49.170 --> 01:04:51.600
of the accessibility APIs to do
some very interesting things.

01:04:51.660 --> 01:04:53.190
So let me talk about the last point.

01:04:53.260 --> 01:04:54.860
I've got to kind of hustle through it.

01:04:54.970 --> 01:04:57.240
Mac OS X has a unique visual pipeline.

01:04:57.240 --> 01:05:00.160
We have a compositing windowing system
and also a windowing system that's

01:05:00.170 --> 01:05:03.040
very aware of the idea of having to
layer things on top of one another.

01:05:03.040 --> 01:05:04.420
And this is sort of
unique in the industry.

01:05:06.410 --> 01:05:09.520
I don't want to go into technical
description of how the actual

01:05:09.520 --> 01:05:14.160
pixels flow to the frame buffer,
but the key thing is that there's

01:05:14.160 --> 01:05:17.200
one process that always knows
what's going on in the frame buffer.

01:05:17.200 --> 01:05:20.480
And that process is lowest level
primitive as a concept of a window.

01:05:20.480 --> 01:05:23.280
And this means assistive technology
can do some very interesting

01:05:23.280 --> 01:05:26.200
things and also solve some
problems for assistive technology.

01:05:26.200 --> 01:05:29.170
One thing is that the windowing
system does support Z-ordering,

01:05:29.250 --> 01:05:31.980
so it's very possible for
assistive technology applications

01:05:32.050 --> 01:05:34.820
to need to be always on top.

01:05:34.900 --> 01:05:36.220
To have to do that,
it's just basically a windowing system.

01:05:36.220 --> 01:05:36.220
So it's a very possible for
assistive technology applications

01:05:36.220 --> 01:05:36.220
to need to be always on top.

01:05:36.220 --> 01:05:36.220
To have to do that,
it's just basically a windowing system.

01:05:36.220 --> 01:05:36.220
So it's a very possible for
assistive technology applications

01:05:36.220 --> 01:05:36.220
to need to be always on top.

01:05:36.220 --> 01:05:36.220
To have to do that,
it's just basically a windowing system.

01:05:36.220 --> 01:05:38.790
is basically setting in the proper
layer in the z order stack and

01:05:38.840 --> 01:05:42.110
then applications can't put their
content on top of a piece of

01:05:42.110 --> 01:05:46.560
assistive technology content that
needs to be always on the screen.

01:05:46.560 --> 01:05:49.800
And then also the compositing gives all
sorts of opportunities for the visual

01:05:49.800 --> 01:05:53.950
presentation of assistive technology
because in many ways there's always

01:05:53.980 --> 01:05:57.090
a fight between screen real estate,
between assistive technology,

01:05:57.230 --> 01:05:59.530
and the real estate that
the application that's being

01:05:59.530 --> 01:06:02.120
adapted assumes that it's using.

01:06:02.120 --> 01:06:05.540
So I actually want to show you a really
quick demo of a piece of sample code that

01:06:05.860 --> 01:06:16.590
actually sort of shows an interesting
way to maybe solve this problem.

01:06:16.590 --> 01:06:16.590
So let me go to, yes, that's right,
the machine.

01:06:25.450 --> 01:06:29.400
So we're going to bring an application
that an engineer wrote that's showing

01:06:29.400 --> 01:06:32.200
something called an overlay window.

01:06:32.220 --> 01:06:35.670
And this was just a simple
application that I had one of

01:06:35.750 --> 01:06:39.780
our DTS engineers who works with
Cocoa come up with that's going to

01:06:39.890 --> 01:06:43.040
essentially demonstrate a prototype,
if you will,

01:06:43.040 --> 01:06:45.480
of what's called a scanning application,
assistive technology,

01:06:45.480 --> 01:06:48.040
which is software that usually
works in conjunction with a switch,

01:06:48.090 --> 01:06:51.380
that the user will hit the switch,
and basically a palette will pop up,

01:06:51.390 --> 01:06:54.340
and then a selection will start
iterating over that palette.

01:06:54.480 --> 01:06:57.240
They hit the switch again,
and then they can select an item of maybe

01:06:57.330 --> 01:06:59.190
actions that are encoded in that palette.

01:06:59.200 --> 01:07:02.980
And the interesting thing is, you know,
this is showing the idea of assistive

01:07:03.070 --> 01:07:06.690
technology being able to move out
of the way of applications because

01:07:06.870 --> 01:07:11.270
it's able to use Mac OS X's ability
to composite and do transparency

01:07:11.270 --> 01:07:14.700
and blending to where this could
easily be made as the user needs it.

01:07:14.700 --> 01:07:18.100
It could fade forward and begin its scan,
and then it could fade away when

01:07:18.100 --> 01:07:20.750
the user needs to maybe view a web
page or something underneath it.

01:07:20.800 --> 01:07:24.460
And also one last point is
this little sample is about $2.

01:07:24.480 --> 01:07:29.300
hundred lines of Cocoa code I believe,
if I remember my numbers correctly.

01:07:29.300 --> 01:07:34.250
And the interesting thing is that one of
the things that typically people need to

01:07:34.250 --> 01:07:39.680
do in scanning applications is support a
large number of tiles or different little

01:07:39.770 --> 01:07:42.340
iconic representations of the actions.

01:07:42.340 --> 01:07:45.710
And the interesting thing about the
power of Cocoa and Mac OS X is the

01:07:45.770 --> 01:07:49.670
fact that I'm able to put a variety
of different file formats into this,

01:07:49.670 --> 01:07:53.540
my little scanning application here,
and the system just all displays them

01:07:53.650 --> 01:07:57.080
without me having to know anything
as a developer how to decode them.

01:07:57.100 --> 01:07:58.720
This will even work for PDF files.

01:07:58.720 --> 01:08:03.480
So I could use a, if I was a scanner,
software manufacturer that did

01:08:03.480 --> 01:08:06.900
an assistive technology scanner,
I could then use an image tool like

01:08:06.900 --> 01:08:09.890
Illustrator or Freehand to create
my high quality artwork which would

01:08:09.890 --> 01:08:13.540
then be dynamically scaled down and
have the best possible vector fit for

01:08:13.720 --> 01:08:15.690
the piece of assistive technology.

01:08:15.750 --> 01:08:20.660
This is a piece of sample code
available up on the DTS website.

01:08:20.660 --> 01:08:21.260
So let's go back to the software.

01:08:21.550 --> 01:08:23.090
Last slides.

01:08:26.890 --> 01:08:30.190
One last point I want to make
is that there's an issue that

01:08:30.190 --> 01:08:33.670
is sort of happening right now
between assistive technology and

01:08:33.730 --> 01:08:37.760
the propensity for applications
to begin to grab the full screen,

01:08:37.760 --> 01:08:38.880
to take over the display.

01:08:38.880 --> 01:08:42.540
It's a functionality that we offer in
Mac OS X and a lot of games use it.

01:08:42.600 --> 01:08:46.160
And it creates a problem that, let's say,
for example, someone wanted to use an

01:08:46.160 --> 01:08:48.410
alternate input device,
which required a piece of

01:08:48.410 --> 01:08:50.850
assistive technology software
running in a computer,

01:08:50.890 --> 01:08:54.380
to be able to display its content on
top of maybe the game that's running.

01:08:54.380 --> 01:08:56.780
That would be difficult
to do if the game said,

01:08:56.800 --> 01:08:57.830
the screen is mine.

01:08:57.840 --> 01:09:00.400
So here's sort of a recipe or
recommendation if you're a game

01:09:00.460 --> 01:09:03.970
developer or you have an application
that does grab the full screen,

01:09:03.970 --> 01:09:07.100
how you can use the Z order
capability of Mac OS X's compositing

01:09:07.100 --> 01:09:10.540
window model to essentially put
your window at a particular level to

01:09:10.560 --> 01:09:12.680
allow assistive technology to work.

01:09:12.700 --> 01:09:13.730
It's pretty basic.

01:09:13.730 --> 01:09:17.180
Instead of taking over the screen,
you just simply hide the menu bar.

01:09:17.180 --> 01:09:18.380
You then hide the dock.

01:09:18.380 --> 01:09:21.570
Then what you do is you bring up a
full-sized window without any sort

01:09:21.580 --> 01:09:24.950
of borders or controls around it,
and you put it at a particular level,

01:09:25.030 --> 01:09:26.770
kind of a screen-soluble level.

01:09:26.800 --> 01:09:27.700
Plus one.

01:09:27.800 --> 01:09:30.900
And there's another layer that's
above this that essentially

01:09:30.900 --> 01:09:34.530
allows assistive technology to
appear above your application.

01:09:34.590 --> 01:09:35.980
And this can be like 2D, 3D.

01:09:35.980 --> 01:09:36.700
It can be multimedia.

01:09:36.700 --> 01:09:38.930
So in theory,
you could have a piece of assistive

01:09:38.930 --> 01:09:42.740
technology with a semi-transparent
menu sitting on top of maybe a game,

01:09:42.740 --> 01:09:45.580
a 3D game, if it was designed that way.

01:09:45.580 --> 01:09:49.200
And the window layers are
defined in CG window level.h,

01:09:49.200 --> 01:09:53.580
which is in the Quartz 2D headers.

01:09:54.680 --> 01:09:57.720
So in summary, we've basically covered
a lot of ground here.

01:09:57.720 --> 01:10:01.760
We've talked a little about accessibility
from the aspect of why you should do it.

01:10:01.770 --> 01:10:04.510
We've talked about what technology
Apple's built into the operating

01:10:04.510 --> 01:10:06.910
system to accommodate accessibility,
both from a user and

01:10:06.910 --> 01:10:08.220
developer perspective.

01:10:08.250 --> 01:10:11.360
We've shown you some new APIs that
we've put in Panther to really benefit

01:10:11.490 --> 01:10:15.560
assistive technology developers
who need to get at text attributes.

01:10:15.570 --> 01:10:17.590
And then additionally,
I've made some recommendations for

01:10:17.590 --> 01:10:20.060
both application developers and
assistive technology developers,

01:10:20.060 --> 01:10:22.720
how they can better leverage the
technology portfolio on Mac OS X.