WEBVTT

00:00:29.180 --> 00:00:31.510
Good afternoon,
and welcome to session 613,

00:00:31.510 --> 00:00:35.430
Migrating UNIX SysAdmin
Tools to Mac OS X.

00:00:36.190 --> 00:00:40.620
I think we have a really nice panel
of experts who are going to tell

00:00:40.660 --> 00:00:43.880
you about various experiences,
moving their tools over to

00:00:43.910 --> 00:00:46.380
Mac OS X that will be very helpful.

00:00:46.380 --> 00:00:50.080
We already know that Mac OS X is
the best development environment.

00:00:50.080 --> 00:00:52.810
It's also a fantastic
SysAdmin environment.

00:00:52.820 --> 00:00:56.030
And using all these Apple technologies,
wirelessly connected,

00:00:56.110 --> 00:00:59.890
being able to manage giant racks of
servers in your data center is a blast.

00:00:59.890 --> 00:01:00.630
It's a lot of fun.

00:01:02.430 --> 00:01:04.800
Today we have Kevin Boyd,
who is going to,

00:01:04.800 --> 00:01:09.520
from the University of Michigan,
who will explain what the environment

00:01:09.520 --> 00:01:13.040
is like for the University of Michigan,
and their experience in bringing

00:01:13.040 --> 00:01:17.130
over their tools for a very diverse
group of SysAdmins and managers.

00:01:17.140 --> 00:01:22.070
Next up, Waqar Malik,
of our developer technical support,

00:01:22.070 --> 00:01:27.000
is going to explain some of the gotchas,
importing over some of your scripts and

00:01:27.000 --> 00:01:28.800
tools and applications you've written.

00:01:28.800 --> 00:01:32.380
And finally, Mike Bombich, of our field.

00:01:32.380 --> 00:01:35.620
He's one of the world's leading
field consulting engineers,

00:01:35.620 --> 00:01:39.690
well known for his work on the side and
his fantastic tools that we all use.

00:01:39.710 --> 00:01:43.060
He's going to describe how to
build a great GUI interface on

00:01:43.060 --> 00:01:45.150
top of those command line tools.

00:01:48.030 --> 00:01:49.840
So first up,
I'd like to introduce Kevin Boyd,

00:01:49.910 --> 00:01:51.530
University of Michigan,
and on the steering

00:01:51.650 --> 00:01:53.960
committee of MacOSXlabs.org.

00:01:53.980 --> 00:01:55.420
Kevin?

00:01:57.900 --> 00:02:00.380
Thanks a lot, Skip.

00:02:00.550 --> 00:02:01.290
Hi.

00:02:01.740 --> 00:02:04.840
Today,
I'm going to talk to you guys about

00:02:05.190 --> 00:02:09.530
how we as developers can work with
administrators from all different

00:02:09.760 --> 00:02:15.710
types of computing platforms to create
applications that administrators

00:02:15.740 --> 00:02:18.570
will want to use in Mac OS X.

00:02:19.430 --> 00:02:20.780
Who am I?

00:02:20.820 --> 00:02:22.200
That's a good question.

00:02:22.240 --> 00:02:24.950
I'm an administrator at
the University of Michigan,

00:02:24.950 --> 00:02:30.300
and also I am one of the steering
committee members for the UEF lab

00:02:30.590 --> 00:02:35.990
group that also runs the site
that's known as macostenlabs.org.

00:02:36.120 --> 00:02:39.400
And my responsibilities
primarily have been,

00:02:39.400 --> 00:02:44.400
in relationship to this project,
the development of lab management tools

00:02:44.400 --> 00:02:49.120
that ease the transition from some
other computing platform to Mac OS X.

00:02:52.420 --> 00:02:58.940
At the University of Michigan,
this is a very complex environment known

00:02:58.940 --> 00:03:03.750
as a distributed computing environment,
which has a lot of potential challenges

00:03:03.860 --> 00:03:06.820
for administrators and developers.

00:03:06.910 --> 00:03:08.840
Because of the distributed
computing environment,

00:03:08.970 --> 00:03:13.550
there's the ability given to our
administrators to pick any type of

00:03:13.550 --> 00:03:17.650
computing platforms and any type of
operating systems that they may want to

00:03:17.650 --> 00:03:19.860
run inside of their own environments.

00:03:19.930 --> 00:03:22.180
And we'll get into more detail--

00:03:22.200 --> 00:03:35.400
[Transcript missing]

00:03:35.870 --> 00:03:39.400
If we go back in time,
we can look at how Mac OS 9 was

00:03:39.400 --> 00:03:42.580
managed at the University of Michigan,
and we can start to see why

00:03:42.580 --> 00:03:46.940
administrators liked the Macintosh
experience when it came to managing

00:03:46.940 --> 00:03:48.700
machines in their environment.

00:03:48.740 --> 00:03:53.390
It was easy to manage because
of the operating system.

00:03:53.390 --> 00:03:55.760
It had an easy-to-use interface,
it was intuitive,

00:03:55.760 --> 00:03:58.900
and it didn't take a lot of
learning for you to understand

00:03:58.900 --> 00:04:00.940
how to use a Macintosh computer.

00:04:00.940 --> 00:04:06.640
It was accepted for users to go out,
administrators to go out onto the net,

00:04:06.640 --> 00:04:10.560
contact third parties,
do whatever it takes to make the

00:04:10.560 --> 00:04:14.690
machine a secure and consistent
computing platform for you inside

00:04:14.690 --> 00:04:17.010
of a lab management environment.

00:04:17.800 --> 00:04:22.050
At the same time, on our campus,
we had many other platforms

00:04:22.050 --> 00:04:23.760
that were UNIX-based.

00:04:23.780 --> 00:04:27.960
And these people had skills that
allowed them to manage their machines,

00:04:27.960 --> 00:04:30.060
but the learning curve
was incredibly steep.

00:04:30.080 --> 00:04:33.640
And the ability to manage the
machines was incredibly difficult.

00:04:33.660 --> 00:04:37.540
And these two groups really could
not have skills that transferred

00:04:37.540 --> 00:04:39.170
from one group to the other.

00:04:40.300 --> 00:04:44.150
We at Michigan saw Mac OS X as
an opportunity to take all of our

00:04:44.150 --> 00:04:49.040
experiences creating utilities and
tools for managing machines in OS 9 and

00:04:49.040 --> 00:04:54.010
in UNIX and combining them in such a way
that we could have truly the holy grail

00:04:54.010 --> 00:04:58.470
of computing and lab administration,
which would be ease of use,

00:04:58.470 --> 00:05:03.580
ease of migration, ease of integration,
and also to be able to say,

00:05:03.580 --> 00:05:06.380
I have skills that I've gained
from learning how to use this

00:05:06.380 --> 00:05:09.780
machine that can be transferred
from other computing platforms.

00:05:09.780 --> 00:05:13.700
I have a skill set that applies not
only to these Macintosh computers,

00:05:13.700 --> 00:05:17.190
but can also be used in
other environments as well.

00:05:17.950 --> 00:05:22.000
So we've leveraged our
experiences in these environments,

00:05:22.050 --> 00:05:25.210
and we've developed applications
that you've heard about throughout

00:05:25.210 --> 00:05:29.960
the week or at our site,
or we can talk about them here too,

00:05:29.960 --> 00:05:32.350
that have really taken advantage
of all this experience.

00:05:32.460 --> 00:05:36.210
The challenge has been,
how are we going to continue to make

00:05:36.570 --> 00:05:39.030
tools that administrators want to use?

00:05:41.990 --> 00:05:48.100
So let's take a look at one of the places
where I had a chance to spend some time

00:05:48.100 --> 00:05:52.460
at the University of Michigan developing
tools for Mac OS 9 users.

00:05:52.520 --> 00:05:55.260
And from there,
we can decide whether or not these

00:05:55.260 --> 00:05:57.090
are-- why was this so successful?

00:05:57.150 --> 00:05:58.300
What did we do that was so successful?

00:05:58.300 --> 00:06:00.810
What happened here that
we can tell developers,

00:06:00.810 --> 00:06:03.100
go out and do this,
and it will make Mac OS 9

00:06:03.100 --> 00:06:06.090
users want to use Mac OS X?

00:06:07.750 --> 00:06:11.350
As we've already stated,
the University of Michigan is a

00:06:11.350 --> 00:06:14.660
distributed computing environment,
and with the freedoms that we

00:06:14.660 --> 00:06:18.730
allow administrators to have,
it presents enterprise computing

00:06:18.730 --> 00:06:21.650
at its most complex level,
because there's freedoms

00:06:22.020 --> 00:06:24.790
in terms of hardware,
software, data, people,

00:06:24.950 --> 00:06:27.810
and procedures that we let the
administrators have in order to

00:06:27.810 --> 00:06:29.640
create their computing environment.

00:06:29.640 --> 00:06:32.870
At the same time,
we want to have the users that use

00:06:32.870 --> 00:06:37.750
these computers' computing environments
to have a consistent computing

00:06:37.750 --> 00:06:40.280
experience from one lab to another.

00:06:40.360 --> 00:06:43.300
So let's focus,
narrow our discussion a little bit,

00:06:43.350 --> 00:06:47.370
and talk about the School of Art and
Design at the University of Michigan.

00:06:47.700 --> 00:06:51.120
I spent a lot of time with
the OS 9 administrators there,

00:06:51.120 --> 00:06:54.190
and that's really where
I became involved in OS X.

00:06:55.520 --> 00:06:59.430
So here we have the traditional
view of Mac OS 9 and why

00:06:59.520 --> 00:07:03.020
people like using Mac OS 9,
and we have the traditional view

00:07:03.020 --> 00:07:07.790
of UNIX and how people use UNIX and
what was good about each platform.

00:07:08.160 --> 00:07:11.690
Utilities like Assimilator
were nice because,

00:07:12.630 --> 00:07:15.100
well, to put it simply,
it was easy to use.

00:07:15.100 --> 00:07:18.180
It didn't require you to know a lot
about the underpinnings of the machine

00:07:18.180 --> 00:07:21.210
in order to manage a large set of
computers in your computing environment.

00:07:21.240 --> 00:07:25.810
However, tools like this and almost all
the tools that were available

00:07:25.810 --> 00:07:27.650
for Mac OS X didn't scale.

00:07:27.680 --> 00:07:30.840
They weren't readily usable in
a wide range of machines across

00:07:30.870 --> 00:07:32.750
an entire computing enterprise.

00:07:34.000 --> 00:07:37.620
While, on the other hand,
the UNIX operating systems gave you all

00:07:37.620 --> 00:07:41.610
of the network integration technologies
that you needed for enterprise computing,

00:07:41.720 --> 00:07:46.500
but learning how to implement them,
learning how to use them correctly,

00:07:46.690 --> 00:07:50.180
and learning how to make them fit
into your environment required an

00:07:50.320 --> 00:07:52.570
incredibly steep learning curve.

00:07:53.840 --> 00:07:55.930
So we have the problem laid out.

00:07:55.990 --> 00:08:00.090
How do we create tools that
administrators will use?

00:08:02.450 --> 00:08:05.220
Well, I think the first thing we need
to do is identify the expectations

00:08:05.220 --> 00:08:10.390
and the benefits that can be gained
from looking at our core audience.

00:08:10.520 --> 00:08:11.780
Who are we trying to help?

00:08:11.950 --> 00:08:13.780
Who are we trying to create
these applications for?

00:08:13.780 --> 00:08:16.140
I think they can be
divided into three groups.

00:08:16.140 --> 00:08:19.000
You have your diehard
Mac OS 9 administrators.

00:08:19.000 --> 00:08:22.140
These are people who even
today are still not migrated,

00:08:22.190 --> 00:08:25.020
still have not decided to
take a look at Mac OS X.

00:08:25.020 --> 00:08:27.400
You have your hardcore
UNIX administrators.

00:08:27.400 --> 00:08:31.190
These are people who,
they may say things like,

00:08:31.300 --> 00:08:33.020
Mac OS X isn't a real OS.

00:08:33.020 --> 00:08:34.220
It's not a real UNIX.

00:08:34.220 --> 00:08:37.280
Well, we all know it is,
and it's up to us as developers

00:08:37.280 --> 00:08:39.080
to prove to them that it is.

00:08:39.080 --> 00:08:42.180
And you have your
Mac OS X administrators.

00:08:42.200 --> 00:08:47.010
These are people who realize the power
of UNIX because of the ease of Aqua and

00:08:47.240 --> 00:08:49.400
the underpinnings of the UNIX subsystem.

00:08:49.420 --> 00:08:51.240
So they have expectations as well.

00:08:53.020 --> 00:08:56.110
Meeting all three of their needs,
I think, is just the first step into

00:08:56.110 --> 00:08:58.420
creating an application that
not only will these people use,

00:08:58.510 --> 00:09:02.490
but it will find uses that
you may never have thought of.

00:09:04.260 --> 00:09:06.560
What do Mac OS 9 administrators want?

00:09:06.610 --> 00:09:12.050
Mac OS 9 administrators,
they want to know what your

00:09:12.130 --> 00:09:14.590
application does before you
even tell them what it does.

00:09:14.690 --> 00:09:17.530
They want to be able to look on the
screen and know intuitively what to do.

00:09:17.580 --> 00:09:21.200
They want help in the form of
tool tips or any other type of

00:09:21.200 --> 00:09:25.350
documentation on screen if it's
not readily apparent to you or to

00:09:25.350 --> 00:09:27.700
them what their application does.

00:09:27.740 --> 00:09:32.380
For OS X, they want it to look like it
belongs in OS X if it came from

00:09:32.380 --> 00:09:35.050
some other operating system,
even if that other operating system was

00:09:35.100 --> 00:09:36.740
a previous Macintosh operating system.

00:09:36.780 --> 00:09:40.350
And obviously,
if they're running it in Mac OS X and

00:09:40.350 --> 00:09:42.990
you've brought it from some other
platform they may be familiar with,

00:09:43.150 --> 00:09:44.880
it should not require any learning curve.

00:09:46.680 --> 00:09:50.600
Hardcore UNIX administrators, of course,
want things like command lines and

00:09:50.600 --> 00:09:53.000
terminal windows and man pages.

00:09:53.000 --> 00:09:56.040
I'm sure all of you heard
this a million times over,

00:09:56.040 --> 00:09:57.600
and they're all there in Mac OS X.

00:09:57.600 --> 00:10:00.050
And as developers,
it's up to us to give them

00:10:00.050 --> 00:10:03.680
what they want because,
obviously, that'll make them accept

00:10:03.680 --> 00:10:05.270
this as a viable platform.

00:10:05.280 --> 00:10:08.900
The question of source code
comes up whenever applications

00:10:09.170 --> 00:10:11.180
are developed for any platform.

00:10:11.180 --> 00:10:14.020
And I think the openness
that Apple's given us,

00:10:14.020 --> 00:10:16.760
the chance for us to give
open source code out,

00:10:16.870 --> 00:10:20.150
is another learning opportunity that
can show more people how to write

00:10:20.150 --> 00:10:22.900
applications that'll solve problems
for their particular environments.

00:10:25.140 --> 00:10:27.780
and there's Mac OS X administrators.

00:10:27.830 --> 00:10:29.030
They realize all of this.

00:10:29.100 --> 00:10:30.420
They've seen the light.

00:10:30.550 --> 00:10:31.900
They understand what we're talking about.

00:10:31.990 --> 00:10:34.620
They know the power that
they have in front of them,

00:10:34.710 --> 00:10:37.390
and they expect all these things
out of a well-written application.

00:10:37.420 --> 00:10:41.130
If your application is not well-written,
no matter how good it does

00:10:41.130 --> 00:10:43.530
what it's supposed to do,
they're probably not going to use it.

00:10:43.620 --> 00:10:48.660
They want everything OS 9 administrators,
UNIX administrators,

00:10:48.690 --> 00:10:52.780
and other Mac OS X administrators
want from this application

00:10:52.780 --> 00:10:53.980
that you've created.

00:10:53.980 --> 00:10:58.460
The portability of your application
pretty much requires that you've

00:10:58.460 --> 00:11:01.920
had experience writing this
application on other platforms,

00:11:01.990 --> 00:11:04.160
but if you have,
they expect to be able to use

00:11:04.160 --> 00:11:07.560
their skills and their scripts and
their command line utilities that

00:11:07.560 --> 00:11:11.170
they've developed on other platforms
with your application as well.

00:11:11.390 --> 00:11:15.880
So the standards are very high
for Mac OS X applications.

00:11:15.940 --> 00:11:21.360
My own experience was with RSyncX,
and primarily the desire was to have an

00:11:21.360 --> 00:11:27.300
application that hit all of these goals
and in the end gave us something that

00:11:27.300 --> 00:11:32.190
at the time did not exist for Mac OS X,
which was a way for us to easily

00:11:32.300 --> 00:11:34.460
move files across a network.

00:11:36.270 --> 00:11:39.420
That was essentially our
mission statement for rsyncx.

00:11:39.480 --> 00:11:43.150
We wanted to be able to
satisfy these audiences,

00:11:43.540 --> 00:11:46.350
solve this problem,
and then provide documentation in such

00:11:46.450 --> 00:11:50.180
a way that other people could look at
what we've done and say for themselves,

00:11:50.310 --> 00:11:51.730
is this something I want to use?

00:11:51.740 --> 00:11:52.430
Is this relevant?

00:11:52.530 --> 00:11:53.600
Does this matter to me?

00:11:53.770 --> 00:11:57.640
And even if it didn't matter to them,
it could be a source for them

00:11:57.790 --> 00:12:01.470
to look at in order to learn
for themselves what it takes to

00:12:01.470 --> 00:12:04.480
develop software for the platform.

00:12:04.940 --> 00:12:08.210
So when we take all the
pieces that rsyncx has become,

00:12:08.220 --> 00:12:12.890
the main application, the rsyncx CD,
and the package tools,

00:12:12.890 --> 00:12:18.100
we see that we have all the pieces
of a puzzle that actually was laid

00:12:18.100 --> 00:12:20.810
out before us long before we even
knew that this was going to be the

00:12:20.810 --> 00:12:22.150
problem we were going to be solving.

00:12:22.700 --> 00:12:26.630
And the problem was for us,
how are we going to get load sets out

00:12:26.700 --> 00:12:30.880
to these machines and have OS X on all
of them and do it in such a way that

00:12:30.880 --> 00:12:34.860
our Mac OS 9 administrators didn't
feel afraid of making the switch?

00:12:36.910 --> 00:12:40.420
So now we've identified these audiences,
and we've tried to say

00:12:40.420 --> 00:12:41.880
we're going to hit them.

00:12:41.920 --> 00:12:44.350
We've worked--

00:12:44.610 --> 00:12:48.190
and I are going to talk
about the development cycle

00:12:48.190 --> 00:12:50.300
of the development cycle.

00:12:50.300 --> 00:12:52.250
We started out on gathering
input based on these audiences,

00:12:52.250 --> 00:12:52.590
and that came from the web,
it came from hands-on experiences

00:12:52.590 --> 00:12:52.740
and face-to-face meetings.

00:12:52.780 --> 00:12:57.790
And we decided that the best way to
make as many people happy as possible

00:12:57.910 --> 00:13:00.750
is to create this development cycle.

00:13:01.060 --> 00:13:05.620
And this development cycle would
hit the three components of a

00:13:05.730 --> 00:13:07.970
typical Mac OS X application.

00:13:08.080 --> 00:13:10.860
And those were the UNIX underpinnings,
the user interface, and documentation.

00:13:12.200 --> 00:13:17.440
Shortchanging any of these three key
pieces of the development cycle would

00:13:17.460 --> 00:13:22.150
lead to having unhappy users of your
application and potentially people who

00:13:22.150 --> 00:13:23.320
don't want to use your application.

00:13:23.340 --> 00:13:27.770
So we can take a look at how each
of these affects the final product

00:13:27.880 --> 00:13:30.320
that you're trying to promote.

00:13:33.980 --> 00:13:39.060
There are three pieces to the rsyncx
application and the rsyncx project,

00:13:39.060 --> 00:13:42.640
and primarily what we're looking
at is a command line utility,

00:13:42.650 --> 00:13:45.500
which is the rsync terminal
window application.

00:13:45.500 --> 00:13:48.260
You can open up a terminal window,
and you'll see,

00:13:48.260 --> 00:13:52.440
using rsync dash dash version,
which version of rsync you're running.

00:13:52.440 --> 00:13:55.440
If it's the right one,
it'll say it has HFS plus support.

00:13:56.380 --> 00:13:59.660
There's a GUI,
and the GUI is constantly under revision,

00:13:59.660 --> 00:14:03.330
and as of 1.7,
it's still not much to look at,

00:14:03.480 --> 00:14:08.030
but it does what it's supposed to do,
which is allow a user to understand

00:14:08.160 --> 00:14:11.380
how this application works,
provides tool tips,

00:14:11.510 --> 00:14:14.880
and generates scripts that are
highly portable so that other

00:14:15.210 --> 00:14:18.980
UNIX admins can see what you've
done in this Mac OS X environment,

00:14:18.980 --> 00:14:21.260
and they can instantly recognize
what you're trying to do.

00:14:21.340 --> 00:14:23.780
And not only that,
they can use these scripts

00:14:23.780 --> 00:14:25.400
in their platforms as well.

00:14:30.700 --> 00:15:36.800
[Transcript missing]

00:15:37.150 --> 00:15:39.540
Doing all these things as developers,
I think, is crucial.

00:15:39.540 --> 00:15:41.210
I just don't think
there's any way around it.

00:15:41.280 --> 00:15:43.560
I don't think there's any way
you can take shortcuts to get

00:15:43.700 --> 00:15:47.440
to having an application that
people want to use in Mac OS X,

00:15:47.510 --> 00:15:50.240
because all of this power is there,
and if you don't use it,

00:15:50.240 --> 00:15:53.300
if you don't explain how to use it,
your application won't

00:15:53.300 --> 00:15:54.980
be considered as viable.

00:15:56.300 --> 00:15:58.870
But of course,
rsyncx is just a work in progress,

00:15:58.870 --> 00:16:01.200
and it's just a piece in the puzzle,
and it doesn't do everything.

00:16:01.200 --> 00:16:05.230
If you needed to backup
machines to local hard drives,

00:16:05.230 --> 00:16:06.900
you can use rsyncx.

00:16:06.900 --> 00:16:10.430
If you needed to distribute
load sets across wide numbers,

00:16:10.820 --> 00:16:13.440
large numbers of machines
across a network,

00:16:13.440 --> 00:16:14.480
you can use rsyncx.

00:16:14.600 --> 00:16:17.540
Are there other tools that
do the exact same thing?

00:16:17.540 --> 00:16:18.120
Yes.

00:16:18.140 --> 00:16:20.010
So there are alternatives out there.

00:16:20.060 --> 00:16:22.460
If you find them and they're more useful,
there's nothing wrong

00:16:22.460 --> 00:16:23.520
with using them either.

00:16:24.030 --> 00:16:28.170
The idea here is just that this solves
a problem for a potential audience,

00:16:28.170 --> 00:16:30.890
and it's up to you to decide,
how do I make my application

00:16:30.890 --> 00:16:31.870
do the same thing?

00:16:34.060 --> 00:16:38.230
There's a lot of other discussions
out there about things like comments,

00:16:38.250 --> 00:16:40.080
like version tracker, for example.

00:16:40.080 --> 00:16:43.540
If you have good or bad press
regarding your software,

00:16:43.540 --> 00:16:44.630
do you like it, do you not like it?

00:16:44.700 --> 00:16:46.520
I say there's nothing
wrong with bad press.

00:16:46.520 --> 00:16:49.400
There's nothing wrong with
having an application that

00:16:49.760 --> 00:16:51.860
people are making comments about,
good or bad.

00:16:51.980 --> 00:16:52.630
Because guess what?

00:16:52.720 --> 00:16:54.050
That means they've
tried your application,

00:16:54.050 --> 00:16:57.920
they know whether or not they like it,
and they're letting you know

00:16:57.920 --> 00:17:00.200
what you need to change in
order for them to use it.

00:17:00.320 --> 00:17:02.300
So there's really no
such thing as bad press.

00:17:03.140 --> 00:17:05.700
And of course,
when you're developing your software,

00:17:05.700 --> 00:17:08.360
I encourage you to use
the developer's tool CD.

00:17:08.360 --> 00:17:11.870
Because the people at Apple have
gone out of their way to create

00:17:11.870 --> 00:17:17.590
this machine that is viewed as a
good cooperative network citizen.

00:17:17.600 --> 00:17:20.220
And it's up to us to make
sure it stays that way.

00:17:20.240 --> 00:17:21.350
Thank you.

00:17:22.240 --> 00:17:25.190
So now I think I'm
going to let Waqar talk.

00:17:25.280 --> 00:17:29.550
I believe I'm done about
migrating UNIX SysAdmin Tools and

00:17:29.850 --> 00:17:31.060
porting command line tools.

00:17:31.060 --> 00:17:31.600
Thanks.

00:17:38.660 --> 00:17:42.020
So if you went to the
Apple Developers Tools for UNIX,

00:17:42.080 --> 00:17:45.620
this talk will look familiar
to you because a lot of the

00:17:45.620 --> 00:17:47.380
same stuff is told in here.

00:17:47.540 --> 00:17:50.590
So you're a SysAdmin,
and you have some application

00:17:50.600 --> 00:17:52.280
that you have developed.

00:17:52.400 --> 00:17:54.180
They're not shell script,
but they're actually an

00:17:54.180 --> 00:17:55.220
application that you run.

00:17:55.260 --> 00:17:59.970
So this talk, what we're going to do...

00:18:00.200 --> 00:18:04.490
show you how you can bring your
applications to Mac OS X easily

00:18:04.490 --> 00:18:08.540
and quite confidently that
it will work on Mac OS X.

00:18:08.540 --> 00:18:13.190
And it will tell you areas to investigate
what to do and where to look for

00:18:13.190 --> 00:18:15.160
information and what you need to do.

00:18:15.560 --> 00:18:19.660
What you will learn from
this talk is supported APIs,

00:18:19.660 --> 00:18:24.640
compatibility APIs,
and some different APIs that may not

00:18:24.780 --> 00:18:29.440
be equivalent in other UNIX platforms,
or you have equivalent of those.

00:18:29.440 --> 00:18:36.000
And it's very easy to port applications
to Mac OS X because it is UNIX.

00:18:36.000 --> 00:18:40.070
So if your UNIX application
runs on another platform,

00:18:40.200 --> 00:18:41.900
it will be very easy.

00:18:43.700 --> 00:18:46.220
So this is what your
application will look like.

00:18:46.370 --> 00:18:49.090
So you have the top layer,
which is your application.

00:18:49.390 --> 00:18:52.570
You have libraries that you link in,
frameworks, which we'll explain later,

00:18:52.680 --> 00:18:56.530
LibSystem, which is equivalent to
LibC on other platforms,

00:18:56.770 --> 00:18:57.580
but much more.

00:18:57.580 --> 00:19:00.770
And then you have the kernel and the BSD,
the Mach,

00:19:00.770 --> 00:19:02.910
and the IOCit available for you.

00:19:04.150 --> 00:19:05.660
What you will need.

00:19:05.750 --> 00:19:10.540
Make sure that you do not
uncheck the BSD subsystem

00:19:10.540 --> 00:19:13.320
when you're installing the OS.

00:19:13.320 --> 00:19:15.810
And when you're installing
the developer tools,

00:19:15.810 --> 00:19:19.990
make sure you select BSD SDK and
the X11 SDK so you can develop

00:19:20.040 --> 00:19:22.330
X11 applications as well.

00:19:24.590 --> 00:19:28.180
So the tool chain is mostly GNU-based.

00:19:28.210 --> 00:19:30.680
So you have GCC, GDB, GMake.

00:19:30.690 --> 00:19:34.520
We also have BSDMake for
transitional purposes only,

00:19:34.560 --> 00:19:37.760
but GMake is the default,
and you should be using that.

00:19:37.780 --> 00:19:43.330
We have other tools like Xcode,
environment that you saw in the keynote,

00:19:43.510 --> 00:19:46.520
Interface Builder,
and malloc-debug for debugging,

00:19:46.520 --> 00:19:52.910
and some other performance tools that
you can use to tune your application.

00:19:54.050 --> 00:19:59.100
There are three different
compilers installed on Mac OS X.

00:19:59.130 --> 00:20:01.280
Three different versions
of the C compiler.

00:20:01.280 --> 00:20:04.140
So you have 3.3, 3.1, and 2.95.

00:20:04.140 --> 00:20:11.820
The reason is we want to be able to
target kernel extensions back to 10.1,

00:20:11.820 --> 00:20:16.970
so you need to use 2.95,
and then for 10.2, we have 3.1,

00:20:16.970 --> 00:20:16.970
and for 10.3, we have 3.1.

00:20:17.220 --> 00:20:20.760
There are three ways you
can select a compiler.

00:20:20.770 --> 00:20:25.120
The best thing to do is just
use GCC Select that will set

00:20:25.120 --> 00:20:28.600
your compiler that you want,
and then everything else uses that.

00:20:28.660 --> 00:20:33.840
Or you can set the option in Xcode,
or you can just call directly

00:20:33.840 --> 00:20:38.400
from the command line to
whatever compiler you want.

00:20:40.100 --> 00:20:43.630
Before you're doing it yourself,
if you're porting an

00:20:43.630 --> 00:20:47.330
open source application,
check porting environments,

00:20:47.450 --> 00:20:52.080
porting systems that are available
that if somebody has ported it already.

00:20:52.080 --> 00:20:57.970
So there's Darwin Ports, Fink,
and Mac OS X Downloads on Apple's site.

00:20:58.060 --> 00:21:01.600
And if you do port it,
please submit a port to these systems

00:21:01.760 --> 00:21:06.110
so that you have a large collection
so the next person comes along has

00:21:06.110 --> 00:21:08.850
the application already ready to run.

00:21:11.080 --> 00:21:13.120
Porting script is very easy.

00:21:13.160 --> 00:21:15.970
It's just the same tools that you have.

00:21:16.030 --> 00:21:18.000
So you'll see Shell, Perl, Tickle.

00:21:18.000 --> 00:21:19.360
These are all installed by default.

00:21:19.420 --> 00:21:24.760
Our Shell is Bash,
so it shouldn't be a problem there.

00:21:24.760 --> 00:21:29.960
If you want to script GUI applications,
Apple Script to your friend.

00:21:29.960 --> 00:21:34.360
Mike Bombich will explain how
he uses that quite easily.

00:21:34.360 --> 00:21:39.800
So the end result is very easy to
bring your scripts to Mac OS X.

00:21:41.400 --> 00:21:46.790
Primary file system,
we use HFS+. We have many,

00:21:46.790 --> 00:21:49.790
many file systems on Mac OS X.

00:21:50.080 --> 00:21:55.720
The main one,
HFS+, has differences from the UFS,

00:21:55.720 --> 00:22:01.560
which is the standard
UNIX file system people use.

00:22:02.910 --> 00:22:05.070
Case-sensitive is not there.

00:22:05.070 --> 00:22:07.300
Case-preserving, yes.

00:22:07.380 --> 00:22:09.670
So when you type a file
name with a certain case,

00:22:09.670 --> 00:22:12.570
it will preserve that,
but if you type the same file name

00:22:12.570 --> 00:22:16.120
with a different arrangement of cases,
then it will be the same.

00:22:16.160 --> 00:22:20.700
Resource forks, so Mac OS 9 people know
what resource forks are.

00:22:20.700 --> 00:22:24.710
And journaling,
we have added journaling to HFS+, so

00:22:24.710 --> 00:22:27.580
it's faster and easier to recover.

00:22:29.240 --> 00:22:35.250
RSyncX also supports HFS+,
so when you're syncing files,

00:22:35.250 --> 00:22:37.290
you can take resource
forks along with you.

00:22:37.640 --> 00:22:44.220
The issues come when traditional
Mac users start using Mac OS X.

00:22:44.220 --> 00:22:46.340
They tend to put spaces in file names.

00:22:46.340 --> 00:22:49.760
Unix user node,
never to put spaces in file names.

00:22:49.840 --> 00:22:53.950
Always use extensions,
so Mac OS X users have

00:22:54.560 --> 00:22:58.200
type and creator code,
so they stick with that.

00:22:58.400 --> 00:23:02.390
and then also some of the
application use resource forks,

00:23:02.450 --> 00:23:04.270
so you'll have to worry about that.

00:23:04.420 --> 00:23:08.200
And Mac OS users are used to
using aliases as opposed to links.

00:23:08.200 --> 00:23:12.800
And for UNIX, it doesn't quite know
what to do with aliases,

00:23:12.900 --> 00:23:15.100
so you have to be careful on that.

00:23:17.650 --> 00:23:19.360
Libraries.

00:23:19.360 --> 00:23:24.180
On Mac OS X, we have our own linker,
and the way we do our libraries,

00:23:24.180 --> 00:23:29.180
it supports versioning, plugins,
and we differentiate between

00:23:29.180 --> 00:23:30.800
bundles and libraries.

00:23:30.800 --> 00:23:34.810
The extension for the libraries is Dylib.

00:23:34.890 --> 00:23:39.180
So if you're used to .sos,
you have to be careful.

00:23:39.180 --> 00:23:44.500
Static linking is very rarely used,
so everything is pretty much shared.

00:23:45.610 --> 00:23:47.120
Frameworks.

00:23:47.630 --> 00:23:50.700
I'll explain what frameworks are,
which is also available.

00:23:50.700 --> 00:23:56.020
And lib system, which is,
encompasses a lot of Mathlib, Lib C,

00:23:56.070 --> 00:24:00.400
and other libraries that just sits at the
bottom so that everybody can access that.

00:24:00.480 --> 00:24:01.720
Bundles.

00:24:01.720 --> 00:24:03.790
What are bundles?

00:24:04.140 --> 00:24:06.620
Bundles are...

00:24:08.150 --> 00:24:12.570
Things that you put
together and make an object.

00:24:12.960 --> 00:24:16.800
So you can put executable code,

00:24:18.030 --> 00:24:24.460
Other resources such as language
translations and things like that,

00:24:24.500 --> 00:24:29.470
or you can have multiple
architectures in the bundles.

00:24:29.480 --> 00:24:31.580
And it's very easy.

00:24:31.580 --> 00:24:35.880
You just drag one item in the
finder to install and to uninstall.

00:24:35.880 --> 00:24:39.880
And examples are you have frameworks,
which are bundles,

00:24:39.950 --> 00:24:45.620
and compound documents such as RTFD,
which has text and images.

00:24:47.850 --> 00:24:48.640
and frameworks.

00:24:48.640 --> 00:24:52.080
Framework is a bundle where
you have the actual library,

00:24:52.080 --> 00:24:57.200
the headers, the documentation,
other resources that go along

00:24:57.200 --> 00:25:01.690
with it so that you don't have to
put your headers somewhere else

00:25:01.820 --> 00:25:02.920
and the libraries somewhere else.

00:25:02.920 --> 00:25:07.660
They're all in one nice, neat package,
and they can be moved around

00:25:07.660 --> 00:25:09.740
easily and they can be used.

00:25:10.770 --> 00:25:14.660
System libraries are installed in system
library frameworks where you should not

00:25:14.670 --> 00:25:19.230
install those because Apple reserves
that place to install their own.

00:25:19.280 --> 00:25:22.690
But you should install them in
either slash library frameworks,

00:25:22.730 --> 00:25:25.340
network library frameworks,
in your user's home

00:25:25.370 --> 00:25:29.090
directory library frameworks,
or in the application's

00:25:29.090 --> 00:25:32.380
contents frameworks,
depending on how you want

00:25:32.380 --> 00:25:33.910
to expose the framework.

00:25:34.020 --> 00:25:38.360
So, depending on how it's done.

00:25:38.380 --> 00:25:40.380
Two-level namespace.

00:25:40.740 --> 00:25:47.060
It's a very large issue or topic
that can't be covered in this talk,

00:25:47.060 --> 00:25:52.470
but it's basically how you access
variables with the same name in global

00:25:53.120 --> 00:25:57.230
space because we can have the same name
in different bundles and frameworks,

00:25:57.320 --> 00:25:59.710
so there's no collisions
and things like that.

00:25:59.800 --> 00:26:04.370
And it was default starting in 10.1,
but you can go back to flat

00:26:04.530 --> 00:26:08.320
file namespace if you want to,
but it's not recommended.

00:26:08.320 --> 00:26:09.590
So, that's the first thing.

00:26:09.680 --> 00:26:11.600
and David Koeppel,
and I'm going to give you a little bit

00:26:11.600 --> 00:26:11.680
of a brief overview of what we're doing.

00:26:11.680 --> 00:26:14.290
Runtime issues,
if you want to save preferences,

00:26:14.460 --> 00:26:18.020
system preferences,
you should be using Open Directory.

00:26:18.020 --> 00:26:22.180
And if you want to save user preferences,
then NS preferences and CFPreferences,

00:26:22.180 --> 00:26:23.250
they're equivalent.

00:26:23.330 --> 00:26:25.400
You should be using that.

00:26:25.400 --> 00:26:28.540
And startup scripts.

00:26:28.720 --> 00:26:33.160
BSD never really had a good
system to manage startup scripts,

00:26:33.400 --> 00:26:38.470
so we developed our own,
similar to System 5.

00:26:38.490 --> 00:26:41.790
But ours is a bundle,
so it has the script,

00:26:41.890 --> 00:26:45.970
it has the localization,
and other documentation that

00:26:46.000 --> 00:26:46.680
you want to put in there.

00:26:46.700 --> 00:26:52.150
And they're located in system library
startups for the Apple-supplied ones,

00:26:52.150 --> 00:26:55.650
and then for you,
it's library startup items.

00:26:59.130 --> 00:26:59.570
Pre-binding.

00:26:59.570 --> 00:27:06.480
Because of the speed that we
want to gain from our linker,

00:27:06.480 --> 00:27:10.060
we pre-bind the symbols at runtime.

00:27:10.060 --> 00:27:15.520
So that could cause a problem for
applications like backup and security

00:27:15.520 --> 00:27:17.440
because they think the file has changed.

00:27:17.440 --> 00:27:20.730
Either you can't get access
or you can't back them up.

00:27:20.840 --> 00:27:24.600
So you have to be careful about that.

00:27:27.180 --> 00:27:30.520
authentication and authorization are

00:27:31.340 --> 00:27:33.360
and David We're going to talk
about the security framework.

00:27:33.430 --> 00:27:34.380
The security framework
is a good place to start.

00:27:34.380 --> 00:27:36.200
The system is rights-based system,
so you give a right to a user to

00:27:36.280 --> 00:27:42.540
perform certain actions and we
have great APIs to go with that.

00:27:42.540 --> 00:27:46.580
The Apple security framework
is a good place to start.

00:27:46.580 --> 00:27:50.240
PAM is available for
compatibility reasons only.

00:27:50.240 --> 00:27:53.300
So if you're bringing -- you
don't want to change your code,

00:27:53.300 --> 00:27:58.170
but our security framework based
on CDSA is a better way to go.

00:27:58.890 --> 00:27:59.930
GUI options.

00:27:59.980 --> 00:28:02.410
We have lots of GUI options.

00:28:02.590 --> 00:28:05.640
Cocoa, Carbon, X11, and now Qt.

00:28:05.640 --> 00:28:10.780
Troll Tech has made it dual license and
open source and a commercial version,

00:28:10.780 --> 00:28:16.650
so you can get a native Mac OS X version
of Qt and use that as well.

00:28:17.560 --> 00:28:20.900
For multimedia,
if you want higher-level mixed media,

00:28:20.900 --> 00:28:22.070
QuickTime is the way to go.

00:28:22.310 --> 00:28:24.700
Low-level, CoreRadio, CoreMidi.

00:28:24.700 --> 00:28:29.910
Benefits is it's very fast,
it's very easy...

00:28:30.600 --> 00:29:21.600
[Transcript missing]

00:29:22.830 --> 00:29:23.540
Internationalization.

00:29:23.540 --> 00:29:30.300
We have CFString and CFLocale,
which is recommended API,

00:29:30.300 --> 00:29:35.800
and now Panther has WCartT supported,
and you can use that,

00:29:35.910 --> 00:29:43.940
but we would recommend that you
use CFString and CFLocale because

00:29:43.940 --> 00:29:43.940
we will bring forward new...

00:29:45.390 --> 00:29:49.060
Precompiled headers.

00:29:49.080 --> 00:29:52.860
Jaguar had a problem with this,
but Panther has a new way of

00:29:52.860 --> 00:29:56.910
doing precompiled headers,
and it's much less of an

00:29:56.910 --> 00:30:00.210
issue than it was on Jaguar.

00:30:00.460 --> 00:30:03.400
If you have a problem,
that's the first place to start.

00:30:03.660 --> 00:30:06.720
Turn off precompiled headers,
and usually stuff works.

00:30:06.720 --> 00:30:12.380
So to turn them off, dash no CPP precomp,
and don't use traditional

00:30:12.390 --> 00:30:14.990
because that's not recommended.

00:30:15.000 --> 00:30:15.780
It's deprecated.

00:30:15.780 --> 00:30:20.390
Even though it turns off, no precomp,
but you get a lesser level

00:30:20.390 --> 00:30:22.080
of GCC or C standard.

00:30:23.990 --> 00:30:27.270
Linker, Apple's own Linker.

00:30:27.280 --> 00:30:32.460
It's a single pass,
so you have to put your libraries

00:30:32.460 --> 00:30:36.280
and frameworks at the end of your
object file so you can get symbols.

00:30:36.340 --> 00:30:40.440
Lazy initialization of variables,
so it's really a problem

00:30:40.440 --> 00:30:43.320
for C++ so that your static
initializers don't get called.

00:30:43.320 --> 00:30:45.960
So you have to be careful there.

00:30:45.960 --> 00:30:48.560
And it does pre-binding.

00:30:53.600 --> 00:30:56.500
Flag is not supported,
so you should be using dynamic

00:30:56.500 --> 00:30:57.680
to make dynamic libraries.

00:30:57.700 --> 00:31:01.120
So what's new in Panther?

00:31:01.120 --> 00:31:02.960
We have WCAR.

00:31:02.960 --> 00:31:07.740
They buy ConvertICU,
so all the... It's new,

00:31:07.740 --> 00:31:13.080
but it's not recommended for
you to use at this point because

00:31:13.080 --> 00:31:14.200
of the binary compatibility.

00:31:14.200 --> 00:31:17.650
But if you really have to use it,
then you can use it.

00:31:17.780 --> 00:31:19.260
Asynchronous I.O.

00:31:19.260 --> 00:31:21.910
Everybody was asking for that.

00:31:23.400 --> 00:31:23.680
Poll.

00:31:23.680 --> 00:31:28.440
It didn't make it to this seed,
but it is scheduled to go in,

00:31:28.440 --> 00:31:30.260
so in the final release,
you will have poll.

00:31:30.260 --> 00:31:32.640
DL open and DL close.

00:31:32.700 --> 00:31:33.520
Same.

00:31:33.520 --> 00:31:36.500
It's scheduled to go in,
but didn't make it.

00:31:36.620 --> 00:31:40.960
The DL close and DL open
library is the libcompact,

00:31:41.050 --> 00:31:42.420
which is available in Dalton ports.

00:31:42.420 --> 00:31:44.400
So in the meantime, you can use that.

00:31:45.810 --> 00:31:47.630
and Ports Manager GUI.

00:31:48.050 --> 00:31:51.190
So this is a large collection
of ports that are available.

00:31:51.300 --> 00:31:53.770
So this is a nice GUI in
application utilities.

00:31:53.880 --> 00:31:57.580
You just double click and see the list
of applications that are available

00:31:57.580 --> 00:32:01.120
and then just say install and then
you have that application available

00:32:01.120 --> 00:32:03.440
for GUI and command line tools.

00:32:03.460 --> 00:32:05.860
So that's it for me.

00:32:05.860 --> 00:32:10.790
And we'll have Mike Bombich
come in and explain how he

00:32:10.910 --> 00:32:14.810
uses his Apple script to --

00:32:20.310 --> 00:32:22.140
Thank you, Waqar.

00:32:22.320 --> 00:32:27.240
So Waqar spent some time basically giving
you some of the logistics of moving

00:32:27.240 --> 00:32:29.940
your SysAdmin Tools up to Mac OS X.

00:32:30.120 --> 00:32:33.710
What I would like to spend some time on
is telling you about how you're going

00:32:34.060 --> 00:32:36.770
to get Mac users to actually use them.

00:32:37.170 --> 00:32:41.230
So let's face it, Mac users need a GUI.

00:32:41.450 --> 00:32:43.660
In the UNIX world,
GUI is a four-letter word.

00:32:43.660 --> 00:32:47.660
In the Mac world, GUI is essential.

00:32:47.660 --> 00:32:53.480
Apple has introduced several developer
tools that make this a lot easier.

00:32:53.480 --> 00:32:57.770
Package Maker can help you with
any command line tools that

00:32:57.770 --> 00:32:59.160
you use to distribute software.

00:32:59.940 --> 00:33:04.410
They've got Property List Editor in
there for configuring,

00:33:04.410 --> 00:33:07.510
for editing any configuration files.

00:33:07.540 --> 00:33:10.750
And then there's some other
tools like Apple Script Studio,

00:33:10.750 --> 00:33:14.630
Project Builder, Interface Builder,
for actually putting a GUI onto some

00:33:14.640 --> 00:33:16.460
of your command line-based scripts.

00:33:16.540 --> 00:33:19.480
And that's what I'd like
to focus my time on,

00:33:19.500 --> 00:33:21.320
is Apple Script Studio.

00:33:21.320 --> 00:33:24.900
Apple Script Studio,
and I won't get into all the various

00:33:24.900 --> 00:33:27.760
acronyms that people have assigned to it.

00:33:29.290 --> 00:33:33.260
It's based on three technologies:
Apple Script, Project Builder,

00:33:33.260 --> 00:33:34.640
and Interface Builder.

00:33:34.740 --> 00:33:38.790
It was introduced in Mac OS 10.1.2,
so it's only supported

00:33:38.790 --> 00:33:39.930
on that OS and higher.

00:33:40.040 --> 00:33:44.950
And it's implemented in the form of three
project templates in Project Builder.

00:33:45.290 --> 00:33:49.420
And there's over 30 sample
projects to help you get started

00:33:49.480 --> 00:33:51.910
coding in Apple Script Studio.

00:33:52.690 --> 00:33:55.280
So some of this stuff is
going to be fairly basic,

00:33:55.280 --> 00:33:58.310
and bear with me, but as much as this
may go without saying,

00:33:58.320 --> 00:34:00.380
it's sometimes important
to actually say it.

00:34:00.420 --> 00:34:03.370
Developing a GUI,
step one is making sure that

00:34:03.370 --> 00:34:05.430
it works at the command line.

00:34:05.440 --> 00:34:09.320
You want to make sure that all
the functionality of your script,

00:34:09.390 --> 00:34:12.760
everything that you want to get done,
is going to work in a shell script

00:34:12.790 --> 00:34:14.470
in a command line environment.

00:34:14.480 --> 00:34:17.470
Once you've got everything working
for one particular scenario,

00:34:17.470 --> 00:34:20.580
go ahead and generalize that shell script
and make sure it functions in every

00:34:20.590 --> 00:34:22.150
possible scenario in your environment.

00:34:22.880 --> 00:34:26.970
Another very important thing to keep in
mind is these are Mac people out here.

00:34:26.980 --> 00:34:32.810
While Mac people are very, very,
very intelligent, very intelligent,

00:34:32.850 --> 00:34:35.450
they are not Unix savvy in general.

00:34:35.460 --> 00:34:39.290
So you have to anticipate
non-Unix user input,

00:34:39.290 --> 00:34:44.010
like maybe spaces and path
names and special characters,

00:34:44.310 --> 00:34:45.720
things like that.

00:34:45.780 --> 00:34:50.680
So anticipate non-Unix user input when
you're preparing your shell script.

00:34:52.990 --> 00:34:55.490
So once you have a shell script
built and it's doing all of

00:34:55.580 --> 00:34:58.760
your SysAdmin stuff or whatever,
now it's time to go ahead and

00:34:58.760 --> 00:35:00.830
create a project in Project Builder.

00:35:00.840 --> 00:35:03.030
There's three options.

00:35:03.030 --> 00:35:06.180
You can make just a regular
Apple script application,

00:35:06.220 --> 00:35:08.710
and this is the most common thing.

00:35:08.720 --> 00:35:11.080
You can make a document-based
application if you wanted to make

00:35:11.080 --> 00:35:14.330
something like a text editor,
or you can make a droplet application

00:35:14.460 --> 00:35:18.520
if you wanted to have the functionality
of being able to drop files and folders

00:35:18.950 --> 00:35:22.350
onto the application and then have it
do something to those files and folders.

00:35:22.900 --> 00:35:26.060
After you've created your project,
actually the first step after you've

00:35:26.060 --> 00:35:29.390
created your project is to mock up
your interface in Interface Builder.

00:35:29.400 --> 00:35:31.550
Now this is a very non-trivial step.

00:35:31.650 --> 00:35:34.120
In the Unix world,
you write a shell script,

00:35:34.120 --> 00:35:37.190
it does something,
it maybe asks the user to type

00:35:37.190 --> 00:35:40.640
in some text at the command line,
and as it's working,

00:35:40.640 --> 00:35:42.320
maybe it dumps some text out.

00:35:42.360 --> 00:35:44.320
A GUI is very different than this.

00:35:44.320 --> 00:35:48.180
You have many different ways that
you can have the user give input.

00:35:48.180 --> 00:35:52.360
You've got buttons and
menu items and checkboxes.

00:35:52.900 --> 00:35:54.350
All sorts of things like that.

00:35:54.440 --> 00:35:57.930
And then you have different ways of
providing output and giving people

00:35:58.110 --> 00:35:59.740
feedback as to how things are going.

00:35:59.900 --> 00:36:02.890
So you need to think about how you're
going to give feedback to the user.

00:36:02.900 --> 00:36:07.900
You've got progress bars and dialog
windows and all sorts of things.

00:36:07.900 --> 00:36:13.900
So it's very important to give the
end user a really good experience

00:36:13.900 --> 00:36:19.680
and not just dump out text or
pop up a window and ask for text.

00:36:22.180 --> 00:36:26.670
So once you've mocked up your interface,
you'll go back to Project Builder,

00:36:26.670 --> 00:36:29.500
and then you'll attach parts
of your script's functionality

00:36:29.500 --> 00:36:31.330
to specific interface objects.

00:36:31.400 --> 00:36:36.580
So in Apple Script Studio,
you'll use that do shell script function

00:36:36.580 --> 00:36:42.000
to just take a particular shell script or
just a particular command and attach it

00:36:42.040 --> 00:36:43.760
to an action like the click of a button.

00:36:43.780 --> 00:36:47.160
One very important thing to
remember here is GUI applications

00:36:47.160 --> 00:36:49.190
are not linear like shell scripts.

00:36:49.880 --> 00:36:53.270
You're not just going to write up
your shell script and plug it into

00:36:53.270 --> 00:36:55.140
Apple Script Studio and away you go.

00:36:55.140 --> 00:36:57.870
You're probably going to have to
break that script up and attach

00:36:57.870 --> 00:37:00.920
specific actions or specific
commands to various things that

00:37:01.010 --> 00:37:03.120
happen within that user interface.

00:37:03.120 --> 00:37:06.390
You'll probably use global
variables a lot more often

00:37:06.620 --> 00:37:08.580
because of that non-linearity.

00:37:10.870 --> 00:37:12.340
So some of the other things that
you're going to want to keep

00:37:12.340 --> 00:37:14.690
in mind are security issues.

00:37:14.750 --> 00:37:17.240
Does your script require
admin privileges?

00:37:17.240 --> 00:37:20.510
If so, how are we going to get
that password from the user?

00:37:20.520 --> 00:37:22.970
Is the admin user even
the logged-in user?

00:37:23.160 --> 00:37:25.110
You're going to have to
think about things like this.

00:37:25.120 --> 00:37:29.020
If you just have one command
that requires admin privileges,

00:37:29.070 --> 00:37:32.120
then you can just use
Apple Script Studio's built-in

00:37:32.120 --> 00:37:33.720
functionality to retrieve the password.

00:37:33.720 --> 00:37:36.750
Otherwise,
you'll want to consider prompting

00:37:36.750 --> 00:37:40.170
the user for the password
and storing it in a variable.

00:37:40.770 --> 00:37:43.150
You also want to think about
whether or not preferences

00:37:43.150 --> 00:37:45.060
would suit this utility well.

00:37:45.100 --> 00:37:48.830
Apple Script Studio provides an
object called the user defaults

00:37:49.380 --> 00:37:53.340
object that you can use and access
to -- you can manipulate that

00:37:53.590 --> 00:37:59.570
object to access a preference file
in the user's preferences folder.

00:38:00.660 --> 00:38:04.590
Finally, you really need to keep in mind,
you need to learn about

00:38:04.630 --> 00:38:07.920
your environmental variables
and your working directory.

00:38:07.920 --> 00:38:11.870
Don't just walk into this thinking that
you've got the same working environment

00:38:11.870 --> 00:38:12.960
that you would at the terminal.

00:38:12.960 --> 00:38:14.800
You don't even have the same shell.

00:38:14.800 --> 00:38:18.050
There's actually a really
nice tech info article,

00:38:18.050 --> 00:38:19.550
I think it's called.

00:38:19.560 --> 00:38:23.630
It's number 2065 if anyone's
interested in learning about how to

00:38:23.750 --> 00:38:28.060
work with DShell script and how it
compares to the terminal environment.

00:38:30.350 --> 00:38:33.150
Okay, so logistics aside,
let's go ahead and move

00:38:33.150 --> 00:38:34.160
over to the demo machine.

00:38:37.070 --> 00:38:37.830
All right.

00:38:38.040 --> 00:38:45.760
So what we have here is-- let's say
that you're an IT administrator,

00:38:45.770 --> 00:38:51.400
and your supervisor has just tasked
you with creating a software library.

00:38:51.430 --> 00:38:56.190
You've got several hundred CDs,
and in the past, they've just been thrown

00:38:56.200 --> 00:38:59.080
on a shelf or something,
and they get damaged.

00:38:59.080 --> 00:39:01.030
Actually,
could you take me back to the slides?

00:39:01.040 --> 00:39:03.750
There was one slide that
had all this up there.

00:39:04.140 --> 00:39:05.240
Sorry about that.

00:39:05.310 --> 00:39:07.580
So you've got a couple hundred CDs.

00:39:07.600 --> 00:39:10.660
Usually they get chucked on a
shelf and scratched or lost.

00:39:10.660 --> 00:39:14.260
And a CD is checked out,
so only one person can

00:39:14.260 --> 00:39:15.270
access it at a time.

00:39:15.280 --> 00:39:17.990
You actually have to have one
person that's assigned the

00:39:17.990 --> 00:39:19.560
task of managing that library.

00:39:19.590 --> 00:39:21.090
And you'd rather not do that.

00:39:21.100 --> 00:39:23.450
I don't know, maybe you'd rather be
surfing the internet.

00:39:23.640 --> 00:39:27.120
So in the end,
it's just not a very good system.

00:39:27.170 --> 00:39:30.530
So what you've decided to do--

00:39:31.160 --> 00:39:33.600
Instead of sharing the
actual physical disks,

00:39:33.600 --> 00:39:36.380
you notice that in Mac OS X,
there's an extensive

00:39:36.410 --> 00:39:37.450
disk images framework.

00:39:37.460 --> 00:39:40.540
And you notice that there's a
really cool thing that you can do.

00:39:40.540 --> 00:39:43.740
You can make disk images of the
CDs and then stick them up on your

00:39:43.820 --> 00:39:46.080
X server running the Apache web server.

00:39:46.080 --> 00:39:48.590
And then you can host
these images remotely.

00:39:48.600 --> 00:39:51.710
And with just this little
command right at the bottom,

00:39:51.710 --> 00:39:54.260
you can mount that disk image remotely.

00:39:54.260 --> 00:39:57.440
So you can host hundreds of
images on your server somewhere,

00:39:57.440 --> 00:40:00.740
and then people can remotely
use this command and mount that

00:40:00.740 --> 00:40:04.080
disk image right there on their
desktop and have access to it.

00:40:04.180 --> 00:40:07.890
So now to the demo.

00:40:15.650 --> 00:40:18.000
All right,
so the first thing you want to do is

00:40:18.100 --> 00:40:21.650
you want to kind of start out basic,
just create a shell script that

00:40:21.650 --> 00:40:23.700
implements that functionality.

00:40:23.700 --> 00:40:27.700
So this is probably a bit hard to see,
so we'll just blow that up a little bit.

00:40:27.860 --> 00:40:31.770
So you create a basic shell script that
includes the path to that disk image,

00:40:31.770 --> 00:40:33.600
or just one of the disk images.

00:40:33.600 --> 00:40:36.330
You didn't create all 100 disk images,
you just started with one.

00:40:36.340 --> 00:40:40.350
And you included that in the script,
and then the first thing it does

00:40:40.350 --> 00:40:42.450
is just mounts that disk image.

00:40:43.150 --> 00:40:47.590
So we'll go ahead and run
this script in the terminal.

00:40:53.700 --> 00:40:54.520
You'll see what happens.

00:40:54.560 --> 00:40:57.030
It just mounts that disk image
right there on the desktop,

00:40:57.030 --> 00:40:59.650
and you have access to
all the software there.

00:41:00.490 --> 00:41:02.350
So it's a pretty basic concept.

00:41:02.400 --> 00:41:06.390
Obviously,
this is not going to be very scalable.

00:41:06.440 --> 00:41:13.030
Are you going to include the URL to
all 100 or 200 or 300 CD images?

00:41:13.150 --> 00:41:14.720
Probably not.

00:41:14.730 --> 00:41:18.640
So the next incarnation, you decide, hey,
I've got a great idea.

00:41:18.640 --> 00:41:20.800
I'll just have the user enter the URL.

00:41:20.830 --> 00:41:21.350
This is great.

00:41:21.360 --> 00:41:23.120
I'll never have to
touch the script again.

00:41:23.150 --> 00:41:25.650
They just type in the URL.

00:41:25.740 --> 00:41:29.560
So why don't we go ahead and do that?

00:41:29.560 --> 00:41:31.820
We'll run this script.

00:41:34.300 --> 00:41:42.050
and enter the path to the remote-- path?

00:41:42.080 --> 00:41:47.160
Is it on a local volume or was it?

00:41:47.160 --> 00:41:47.160
So we'll just go ahead and
type-- we'll pretend that

00:41:47.160 --> 00:41:47.160
I actually know what I'm doing.

00:41:50.000 --> 00:41:57.900
[Transcript missing]

00:41:58.290 --> 00:41:59.070
So you get the point.

00:41:59.070 --> 00:42:05.000
Obviously, this isn't going to be a very
useful solution for your end users.

00:42:05.000 --> 00:42:08.430
So ideally, you would want to keep...

00:42:09.510 --> 00:42:12.040
All of those,
the path to all of those images

00:42:12.040 --> 00:42:13.310
right there in your script.

00:42:13.370 --> 00:42:16.200
So that's what we have here.

00:42:16.200 --> 00:42:20.910
So in this script, you decide,
I'll just keep the addresses to all

00:42:20.910 --> 00:42:24.390
those images right here in the script,
and I'll present that list to the user,

00:42:24.390 --> 00:42:26.410
ask them to choose one,
and then I'll mount the

00:42:26.450 --> 00:42:27.720
one that they choose.

00:42:29.560 --> 00:42:30.410
So this is pretty cool.

00:42:30.480 --> 00:42:34.930
We'll go ahead and run this script.

00:42:37.170 --> 00:42:39.640
So it presents a list, 0, 1, 2, 3.

00:42:39.680 --> 00:42:48.100
Why don't we go ahead and pick number one
and mount that disk image on the desktop.

00:42:49.990 --> 00:42:52.600
So that's another thing you can try.

00:42:52.600 --> 00:42:55.010
You realize, though, that's...

00:42:55.360 --> 00:42:55.880
That's crazy.

00:42:55.880 --> 00:42:59.810
I mean, if I want to add another
disk image to my CD library,

00:42:59.810 --> 00:43:00.310
what am I going to do?

00:43:00.320 --> 00:43:03.040
Am I going to edit that script
and redeploy it to the 500 people

00:43:03.040 --> 00:43:04.320
that I had already deployed it to?

00:43:04.320 --> 00:43:05.360
Probably not.

00:43:05.360 --> 00:43:07.020
That's going to be a
maintenance nightmare.

00:43:07.020 --> 00:43:10.800
And didn't we start this project to
decrease maintenance in the first place?

00:43:10.810 --> 00:43:11.730
Yeah, we did.

00:43:11.970 --> 00:43:19.360
So being the clever IT guy that you are,
you notice when you--

00:43:19.800 --> 00:43:26.700
[Transcript missing]

00:43:29.130 --> 00:43:33.640
and then go out to a web page and
select just the image or the directory

00:43:33.640 --> 00:43:37.950
that the images are hosted in,
you get this nice little list of all the

00:43:37.950 --> 00:43:40.110
images dynamically generated by Apache.

00:43:40.110 --> 00:43:43.520
If you take a look at the source,

00:43:45.600 --> 00:43:50.990
You can see... I could
parse the heck out of that.

00:43:53.820 --> 00:43:57.200
It's got nice little tags right here.

00:43:57.210 --> 00:43:59.730
I could use that as a delimiter,
and maybe I could use something

00:43:59.760 --> 00:44:00.500
like that as a delimiter.

00:44:00.550 --> 00:44:04.030
But hey, this is cool because this
dynamically generated a list of

00:44:04.090 --> 00:44:05.940
all the images in this directory.

00:44:05.970 --> 00:44:09.740
Why don't I just grab that list,
parse that list for the images,

00:44:09.800 --> 00:44:13.780
present that list of images to the user,
the user picks an image,

00:44:13.780 --> 00:44:15.160
I mount the image.

00:44:15.240 --> 00:44:17.650
So why don't we go ahead and try that.

00:44:17.840 --> 00:44:20.020
That's what this script is.

00:44:20.040 --> 00:44:25.020
What we do is we just have
the base URL and a variable,

00:44:25.020 --> 00:44:30.320
and then we curl down the list,
that Apache generated index.

00:44:30.320 --> 00:44:32.820
We use grep, sed, awk,
whatever else you want to use.

00:44:32.820 --> 00:44:34.880
And believe me,
I'm sure there's probably at least a

00:44:34.880 --> 00:44:38.020
dozen people out there that could do
this in maybe three letters or something,

00:44:38.020 --> 00:44:40.360
but I'm not the guy.

00:44:40.430 --> 00:44:42.510
But in the end,
you've got this little script that

00:44:42.520 --> 00:44:45.890
will parse out those image names.

00:44:47.330 --> 00:44:51.000
So, make this a little bit wider.

00:44:51.020 --> 00:44:53.250
We're going to run this script.

00:44:54.270 --> 00:44:56.160
So you can see the first
thing that it was really,

00:44:56.160 --> 00:44:57.100
really very fast.

00:44:57.120 --> 00:45:01.050
It curled down that index file,
and then it presented this.

00:45:01.060 --> 00:45:03.880
And you could type something like
clear after this to clear that out,

00:45:03.880 --> 00:45:05.150
make it a little prettier.

00:45:05.160 --> 00:45:06.960
And then it presents that list of images.

00:45:06.960 --> 00:45:09.710
So why don't we go ahead
and choose number-- well,

00:45:09.780 --> 00:45:10.640
how about number nine?

00:45:10.700 --> 00:45:11.340
Zero.

00:45:12.230 --> 00:45:12.510
Zero.

00:45:12.520 --> 00:45:13.740
Yeah, number zero.

00:45:13.740 --> 00:45:15.980
Like I said,
there's lots of people that could

00:45:15.980 --> 00:45:17.970
have done this a lot better.

00:45:18.260 --> 00:45:18.830
And there we go.

00:45:18.920 --> 00:45:21.910
It went ahead and mounted
the image that I selected.

00:45:23.740 --> 00:45:27.700
So in just, you know, what is that,
a dozen lines of code,

00:45:27.700 --> 00:45:33.980
you've created this, you,
the clever IT guy, or girl, has,

00:45:33.980 --> 00:45:37.120
you've created this nice little
script that will read a dynamically

00:45:37.170 --> 00:45:40.580
generated list of disk images
and monitor for the end user.

00:45:40.600 --> 00:45:43.790
So now that we've got this
script fully functional in

00:45:43.790 --> 00:45:46.950
the command line environment,
we're going to go ahead and

00:45:46.950 --> 00:45:48.090
go over to Project Builder.

00:45:48.100 --> 00:45:50.860
And, oh, look at that,
there's already a project made.

00:45:52.020 --> 00:45:54.540
So create a new project.

00:45:54.660 --> 00:45:57.470
And we'll go ahead and just pick
Apple Script Application and

00:45:57.470 --> 00:45:58.240
call it whatever.

00:45:58.240 --> 00:46:03.160
And in the interest of time,
I've already got all the text entered.

00:46:03.160 --> 00:46:07.180
But it'll create this project for you.

00:46:07.180 --> 00:46:10.800
And the first thing we'll do is
we'll go ahead and go into Interface

00:46:10.910 --> 00:46:12.880
Builder and mock up an interface.

00:46:13.160 --> 00:46:15.840
Now, this is going to be a
very basic application.

00:46:15.910 --> 00:46:18.450
I mean, the only thing that we're doing,
we're presenting a list

00:46:18.450 --> 00:46:20.720
of images to the user,
and they're going to pick an image,

00:46:20.860 --> 00:46:21.800
and they want to mine it.

00:46:21.800 --> 00:46:24.890
So we really only need a
couple interface items here.

00:46:24.890 --> 00:46:26.000
I've got a table.

00:46:29.700 --> 00:46:33.100
Where's my inspector?

00:46:33.180 --> 00:46:33.950
Tools, thank you.

00:46:34.120 --> 00:46:36.860
It's on by default in mine.

00:46:40.500 --> 00:46:43.200
We'll go into the inspector and
we'll give our table a name,

00:46:43.200 --> 00:46:45.660
call it the images, or that's the view,
and then the table.

00:46:45.660 --> 00:46:48.030
And then we've got
just this other button.

00:46:48.040 --> 00:46:51.470
We'll call it mount image,
and when this button is clicked,

00:46:51.560 --> 00:46:56.240
we want it to do something
in this script right here.

00:46:56.240 --> 00:46:59.580
So we attach some functionality
to the clicked handler in

00:46:59.630 --> 00:47:01.600
the application Apple script.

00:47:01.670 --> 00:47:04.200
So this is really all there is
to mocking up this interface,

00:47:04.200 --> 00:47:07.260
just a table view and a button.

00:47:10.300 --> 00:47:17.200
[Transcript missing]

00:47:17.280 --> 00:47:18.480
and take a look at the script.

00:47:18.670 --> 00:47:22.900
Now, when you click on that checkbox in
Interface Builder that attaches that

00:47:22.900 --> 00:47:28.080
unclicked handler to that button,
it automatically generates some

00:47:28.080 --> 00:47:30.810
handlers inside of your Apple script.

00:47:30.890 --> 00:47:33.460
So the first thing that
we're going to do is,

00:47:33.550 --> 00:47:37.140
instead of having to have the
user actually do something

00:47:37.210 --> 00:47:39.740
to generate that list,
I just want it generated automatically

00:47:39.740 --> 00:47:41.390
as soon as the application is launched.

00:47:41.440 --> 00:47:44.020
So we're going to use the
onAwakeFromNib handler,

00:47:44.020 --> 00:47:46.170
and what it's going to do,
it'll create...

00:47:50.520 --> 00:47:51.660
How about we just do this?

00:47:51.660 --> 00:47:56.080
Is that better?

00:47:56.080 --> 00:47:58.810
Okay, it's not too important.

00:47:58.820 --> 00:48:00.990
I'm going to pretty much
talk you through it.

00:48:01.080 --> 00:48:03.540
So we're going to dynamically
generate the data source.

00:48:03.570 --> 00:48:04.540
It's just a detail.

00:48:04.540 --> 00:48:06.610
But then I've got
basically two functions,

00:48:06.620 --> 00:48:10.500
this extractImageNames function and
then the populateTable function.

00:48:10.500 --> 00:48:16.410
So the extractImageNames
function is going to...

00:48:19.660 --> 00:48:23.640
Use the do shell script command
right here to curl down that

00:48:23.640 --> 00:48:27.140
dynamically generated index,
and then do some various stuff

00:48:27.140 --> 00:48:28.870
to parse out the information.

00:48:28.910 --> 00:48:31.520
Now, you can see here I used sed,
but I also used some

00:48:31.520 --> 00:48:33.420
AppleScript to do some parsing.

00:48:33.420 --> 00:48:34.980
I honestly don't care.

00:48:34.980 --> 00:48:38.050
I'm not a hardcore AppleScript guy
that says I'm going to use

00:48:38.050 --> 00:48:41.140
AppleScript and use do shell
script as very little as possible.

00:48:41.140 --> 00:48:44.230
And I'm not a Unix guy that says,
I'm going to use awk till the day I die.

00:48:44.240 --> 00:48:47.170
Use whatever works.

00:48:47.640 --> 00:48:49.880
And I found out that, you know,
you saw that item zero

00:48:49.890 --> 00:48:51.060
that was alt whatever.

00:48:51.060 --> 00:48:52.520
I could not figure out
how to get that fixed,

00:48:52.600 --> 00:48:54.850
so I just decided to throw in
some AppleScript and use that

00:48:54.850 --> 00:48:56.230
to help me do the parsing.

00:48:56.240 --> 00:49:00.020
So this is actually a very nice
tool in that you can mix multiple

00:49:00.020 --> 00:49:02.750
environments to get the desired result.

00:49:02.760 --> 00:49:06.040
So in the end,
I just return that list of images,

00:49:06.040 --> 00:49:08.380
and then we populate that table.

00:49:08.380 --> 00:49:09.940
So that's what happened on startup.

00:49:09.940 --> 00:49:12.260
Now I've got this unclicked handler.

00:49:14.600 --> 00:49:16.420
And this is going to be very simple.

00:49:16.420 --> 00:49:18.620
The user will pick an item in that table.

00:49:18.650 --> 00:49:22.600
The un-click handler will determine
the index of that item and then

00:49:22.600 --> 00:49:26.130
pull that whatever item that is
out of the list of disk images,

00:49:26.130 --> 00:49:28.180
which is kept in a global variable.

00:49:28.220 --> 00:49:31.390
And then it will do shell script,
HDIUtilMount,

00:49:31.390 --> 00:49:33.600
and that particular disk image.

00:49:33.710 --> 00:49:36.260
And then I provide some feedback,
because you're working in this

00:49:36.260 --> 00:49:38.490
application and something's
happening somewhere else.

00:49:38.640 --> 00:49:41.450
So I'm just going to throw up a
dialogue there that says the image

00:49:41.450 --> 00:49:43.550
should now be mounted on your desktop.

00:49:45.770 --> 00:49:51.220
So we'll go ahead and build
and run this application.

00:49:51.230 --> 00:49:52.880
And wow, that was really fast.

00:49:52.880 --> 00:49:55.000
A lot faster than my PowerBook.

00:49:55.430 --> 00:49:59.340
So the first thing it did
was it curled down that

00:49:59.430 --> 00:50:03.180
dynamically generated index page,
parsed out that list,

00:50:03.330 --> 00:50:05.650
populates this table
with that list of items,

00:50:05.900 --> 00:50:09.570
and now the user can pick an item.

00:50:09.580 --> 00:50:11.980
And why don't we go
ahead and pick this one?

00:50:11.980 --> 00:50:14.920
Click on an item, click on Mount Image.

00:50:14.920 --> 00:50:18.270
Image should now be
mounted on your desktop.

00:50:24.170 --> 00:50:25.520
So that is all there is to it.

00:50:25.610 --> 00:50:27.380
So let's go ahead and go back to slides.

00:50:27.380 --> 00:50:30.490
Now you can get really fancy with this.

00:50:30.960 --> 00:50:35.410
and David That was a very,
very simple example.

00:50:35.520 --> 00:50:43.500
Bah.

00:50:43.500 --> 00:50:45.850
You can get very,
very -- I don't know what

00:50:45.900 --> 00:50:48.300
happened to my image,
but --

00:51:00.500 --> 00:51:07.700
[Transcript missing]

00:51:09.800 --> 00:51:13.240
But you can get very,
very fancy with this.

00:51:13.240 --> 00:51:15.450
We'll just open up the nib file.

00:51:17.780 --> 00:51:20.860
Oh, sorry, could you switch back
to the demo machine?

00:51:20.950 --> 00:51:24.340
So like I said,
you can get really fancy with this.

00:51:24.340 --> 00:51:26.970
You can create preferences.

00:51:30.400 --> 00:51:34.540
Good grief, that's a really old version.

00:51:34.540 --> 00:51:37.700
And you can throw in lots of
functionality and make something so fancy

00:51:37.700 --> 00:51:38.900
that it can clone one disk to another.

00:51:38.900 --> 00:51:41.250
That's one thing that I've done.

00:51:41.250 --> 00:51:47.320
But this is a great tool,
and basically you can do just about

00:51:47.320 --> 00:51:52.920
anything if you use Apple's developer
tools to put a GUI on your script,

00:51:52.920 --> 00:51:52.920
and you can really extend
it to many other audiences.

00:51:53.560 --> 00:51:59.380
So with that, I think I'll go ahead and
hand this back over to Skip.

00:52:06.140 --> 00:52:07.000
Thank you.

00:52:07.000 --> 00:52:09.260
We've tried to make it fun,
tried to present a wide range of

00:52:09.350 --> 00:52:13.220
information for system administrators
coming from a lot of different areas.

00:52:13.240 --> 00:52:16.040
These are some more information.

00:52:16.060 --> 00:52:17.570
Obviously,
a good place to start if you're

00:52:17.640 --> 00:52:19.280
brand new to the platform,
got to read

00:52:19.280 --> 00:52:21.260
Inside Mac OS X System Overview.

00:52:21.260 --> 00:52:24.740
The UNIX Porting Guide is also
an excellent place to start.

00:52:26.800 --> 00:52:27.620
and Mike's team at Microsoft.

00:52:27.840 --> 00:52:31.660
The tech note that Mike mentioned,
calling Apple script from an application,

00:52:31.660 --> 00:52:33.080
excellent.

00:52:33.310 --> 00:52:37.350
And Mike has offered the source
code for the application he

00:52:37.360 --> 00:52:40.380
just demoed up on his website,
and he'll keep that up there

00:52:40.390 --> 00:52:41.200
for some period of time.

00:52:41.200 --> 00:52:43.340
And there's the URL for that.

00:52:43.470 --> 00:52:45.000
Thank you, Mike.

00:52:49.750 --> 00:52:50.350
Who to contact?

00:52:50.490 --> 00:52:53.560
Bringing over an application,
some of the larger applications,

00:52:53.560 --> 00:52:57.070
any place you get hung up or stuck,
that's exactly what

00:52:57.070 --> 00:52:58.300
developer relations is for.

00:52:58.300 --> 00:53:01.850
You can contact myself,
I'm the server technology evangelist.

00:53:01.850 --> 00:53:04.730
Waqar Malik in developer
technical support,

00:53:04.760 --> 00:53:07.440
that's exactly what they're there for.

00:53:07.440 --> 00:53:11.740
And Mike Bombich has even relented
to be contacted directly as well.

00:53:14.480 --> 00:53:17.740
Kevin Boyd at the University of Michigan,
the Mac OS X Deployment Coordinator,

00:53:17.740 --> 00:53:18.850
should you wish to talk to him.

00:53:18.930 --> 00:53:21.400
It's been a good week for you, Mish,
already, I think.

00:53:21.660 --> 00:53:22.260
Radman D.

00:53:22.260 --> 00:53:26.400
and Fugu were both honored
at the Apple Design Awards.

00:53:26.400 --> 00:53:29.400
He's also a member of the
rsyncx development team.

00:53:30.040 --> 00:53:30.900
Roadmap.

00:53:30.900 --> 00:53:32.660
Obviously, some of these sessions
have already happened,

00:53:32.660 --> 00:53:38.600
so be sure to check them out on the DVDs
or Apple Tools for the UNIX Developer,

00:53:38.600 --> 00:53:44.420
Introduction to the Tools Suite, GCC,
and Debugging.

00:53:46.300 --> 00:53:49.790
And then of course, I think,
a wealth of information

00:53:49.790 --> 00:53:51.200
at macos10labs.org.

00:53:51.200 --> 00:53:58.180
Yes, and don't enter a space in that
URL or you'll get a nasty surprise.

00:54:02.480 --> 00:54:04.360
and obviously being an
open source project,

00:54:04.460 --> 00:54:10.900
you can find the source code
to rsync_hfs@opendarwin.org.

00:54:13.060 --> 00:54:14.550
and David Koehn.

00:54:14.550 --> 00:54:19.720
We're going to be doing a lot
of AppleScript Studio sessions.

00:54:19.720 --> 00:54:25.080
Sal Segoia is going to deliver
a session called AppleScript vs.

00:54:25.080 --> 00:54:28.320
Admins that's really free-wheeling.

00:54:28.390 --> 00:54:30.340
He's going to go into a lot more
detail about how to take really

00:54:30.340 --> 00:54:30.340
fun things you never thought
you could do with AppleScript,

00:54:30.340 --> 00:54:30.340
attaching very nice
GUIs to command line tools.

00:54:31.550 --> 00:54:35.470
And with that,
I'd like to open it up to Q&A.