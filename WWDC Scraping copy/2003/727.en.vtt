WEBVTT

00:00:21.180 --> 00:00:25.040
Welcome to the QuickTime Streaming
Server Programming session.

00:00:25.100 --> 00:00:30.180
And we'll be covering the
QuickTime Streaming Server and

00:00:30.180 --> 00:00:34.640
Darwin Streaming Server source
code and API programming.

00:00:34.640 --> 00:00:41.240
One of the things that we'll be
covering is how you can add your code

00:00:41.240 --> 00:00:46.160
to create your own server or modify
the existing server that is available.

00:00:46.160 --> 00:00:50.250
And when you use
Darwin Streaming Server source,

00:00:50.460 --> 00:00:51.080
you end up with a source code
that is available to you.

00:00:51.100 --> 00:00:55.680
You end up with a server
that it can run on Linux,

00:00:55.870 --> 00:00:59.690
OS X, BSD, Solaris, and Windows NT.

00:01:00.800 --> 00:02:10.100
[Transcript missing]

00:02:10.450 --> 00:02:14.090
You want to download this
and read it carefully,

00:02:14.090 --> 00:02:18.670
follow the terms of the license,
then plan your changes

00:02:18.670 --> 00:02:20.900
and your additions.

00:02:20.930 --> 00:02:22.270
Go ahead, create your software.

00:02:22.460 --> 00:02:25.740
If you find that you've
had to modify the server,

00:02:25.740 --> 00:02:30.310
you will want to post that
you have modified the server

00:02:30.420 --> 00:02:33.310
and make those changes public.

00:02:33.900 --> 00:02:37.040
So that was our message from our sponsor.

00:02:37.040 --> 00:02:42.990
The source that we'll be
talking about is the server,

00:02:42.990 --> 00:02:43.990
of course.

00:02:44.010 --> 00:02:47.280
You have your server
modules inside the server.

00:02:47.310 --> 00:02:55.160
There are files that are specific to
porting the code to Windows NT or Linux.

00:02:55.160 --> 00:02:59.530
You'll want to take a look at those
if you have different OS than the

00:02:59.580 --> 00:03:03.360
ones that are already supported
in the build of the server.

00:03:03.680 --> 00:03:07.470
You have the various protocols that
are supported inside the server,

00:03:07.470 --> 00:03:12.940
so these files will be -- are
there when you download the source.

00:03:13.470 --> 00:03:16.160
There's a client development library.

00:03:16.160 --> 00:03:21.090
We use this library in our product,
in the QuickTime Streaming Server,

00:03:21.090 --> 00:03:24.960
and it basically gives you
RTSP over RTP as a client,

00:03:24.960 --> 00:03:30.030
some TCP skip protection,
if you want to see what a skip

00:03:30.030 --> 00:03:34.760
protection implementation looks
like from a client's point of view,

00:03:34.760 --> 00:03:36.990
there's the RTSP client
library in the source code.

00:03:37.000 --> 00:03:38.840
There's a proxy server.

00:03:39.460 --> 00:03:44.850
There's an MP3 and an
MPEG-4 file broadcaster.

00:03:45.340 --> 00:03:49.110
You have the file parsing and
reading code that's inside the

00:03:49.260 --> 00:03:50.990
source code when you download it.

00:03:51.000 --> 00:03:54.700
And, of course, we have our web-based
server UI that's part of the

00:03:54.750 --> 00:03:56.980
Darwin Streaming Server product.

00:03:57.000 --> 00:04:00.240
So all of these are
available for you to look at,

00:04:00.300 --> 00:04:03.680
use it as sample code,
or go ahead and change it,

00:04:03.680 --> 00:04:06.940
modify it to whatever
needs that you have.

00:04:09.070 --> 00:04:12.220
This is a diagram,
a high-level diagram of the

00:04:12.310 --> 00:04:14.180
server and how it works.

00:04:14.180 --> 00:04:16.600
And it is a module-based server.

00:04:16.650 --> 00:04:20.140
There's very little, actually,
that the core server does.

00:04:20.140 --> 00:04:26.360
It's just basically there to run
the modules and execute tasks.

00:04:26.620 --> 00:04:30.140
Those tasks are actually
implemented in each of the modules

00:04:30.330 --> 00:04:32.380
that is loaded into the server.

00:04:33.640 --> 00:04:36.230
So we start out with our
clients connecting to the server

00:04:36.230 --> 00:04:37.680
over the network protocol.

00:04:37.680 --> 00:04:43.490
On the other end is the QTSS API that's
going to go ahead and call your modules.

00:04:44.260 --> 00:04:49.000
Now, this is the core server,
the execution of the core server.

00:04:49.000 --> 00:04:52.430
There's one process,
and it contains four main threads.

00:04:52.430 --> 00:04:59.820
The one main, main thread is simply there
to watch the state of the

00:04:59.830 --> 00:05:02.780
server and gather statistics.

00:05:02.780 --> 00:05:04.160
So it's actually doing very little.

00:05:04.160 --> 00:05:12.150
There's an event thread that's out there
using Select on Linux and POSIX systems.

00:05:12.150 --> 00:05:19.210
It's using Windows Messages
and Mac OS X Event Queue to

00:05:19.780 --> 00:05:23.120
find out if there's an event
that it needs to process.

00:05:23.160 --> 00:05:28.400
And once an event happens,
like a read event, it will then go ahead,

00:05:28.550 --> 00:05:33.160
find a task that's associated
with that file descriptor.

00:05:33.160 --> 00:05:33.780
And then it will go ahead and
find the task that's associated

00:05:33.780 --> 00:05:34.140
with that file descriptor.

00:05:34.160 --> 00:05:37.120
And it's going to put it on
something called a task thread.

00:05:37.120 --> 00:05:39.050
And the task thread is
actually going to do the work.

00:05:39.160 --> 00:05:42.200
So the event thread,
after it grabs the event,

00:05:42.350 --> 00:05:45.560
throws it onto a task thread,
is simply going to go back to sleep

00:05:45.570 --> 00:05:47.150
again waiting for another event.

00:05:47.160 --> 00:05:51.340
So there's just one event thread,
and all the work is done

00:05:51.340 --> 00:05:52.990
by the task threads.

00:05:53.160 --> 00:05:59.800
Those threads are going to be
running through their queues one

00:05:59.800 --> 00:06:03.870
at a time and processing each task.

00:06:05.590 --> 00:06:14.500
So, some servers out there will throw off
or fork a process for every request.

00:06:14.500 --> 00:06:18.700
Our server, the QuickTime Streaming
Server/DaRwin Streaming Server,

00:06:18.700 --> 00:06:19.340
has two threads.

00:06:19.500 --> 00:06:21.200
There is, I mean, processes.

00:06:21.390 --> 00:06:24.640
There is the parent process, which,
like the main thread,

00:06:24.640 --> 00:06:28.060
is just checking the
status of something else.

00:06:28.140 --> 00:06:29.400
In this case, it's the child process.

00:06:29.400 --> 00:06:32.150
So it forks off the child
process and just waits to see

00:06:32.150 --> 00:06:33.660
if the child process has died.

00:06:33.660 --> 00:06:39.960
In the case of some unknown
reason that the child process

00:06:40.090 --> 00:06:44.680
were to be killed or crash,
perhaps, the parent process would

00:06:44.680 --> 00:06:45.650
go ahead and re-execute it.

00:06:45.660 --> 00:06:49.020
Now, the child process is the server
that we were just looking at,

00:06:49.020 --> 00:06:52.660
and it contains the task threads,
the event thread, the main thread,

00:06:52.660 --> 00:06:56.660
and the idle task thread,
which is a variation on a task thread.

00:06:56.660 --> 00:07:01.660
But there's only one task
thread per processor.

00:07:01.660 --> 00:07:01.820
So that means all the work
is really done by the child.

00:07:01.820 --> 00:07:05.820
So that means all the work is really
generally being done on one thread.

00:07:05.820 --> 00:07:09.660
And this may mean that if you
have a module or if you're doing

00:07:09.660 --> 00:07:12.820
something in the server and
it's going to take a long time,

00:07:13.240 --> 00:07:18.820
what you want to do is possibly
create your own private thread.

00:07:18.970 --> 00:07:24.380
And let's take a look at how
these threads can affect a module

00:07:24.380 --> 00:07:27.820
or processing inside the server.

00:07:27.980 --> 00:07:30.740
So let's switch over to demo one.

00:07:32.060 --> 00:07:39.230
And I'm going to run a file
module that I have modified.

00:07:39.280 --> 00:07:44.120
And what this module
is going to be doing,

00:07:44.590 --> 00:07:48.990
is blocking in order
to do some long task.

00:07:49.150 --> 00:07:54.810
Maybe what you can imagine it doing
is downloading a file from another

00:07:54.940 --> 00:07:56.200
server before it can stream it.

00:07:56.260 --> 00:08:00.350
So a request comes in,
and it's going to have

00:08:00.350 --> 00:08:02.420
to download it first.

00:08:02.440 --> 00:08:06.860
So I'm going to open up just
a regular movie file here.

00:08:06.860 --> 00:08:12.600
Now I'm going to call my special module
that's going to go off and do some work.

00:08:13.520 --> 00:08:17.280
So here it is,
and it's busy downloading this file.

00:08:17.280 --> 00:08:21.180
And it's doing it in just a tight loop.

00:08:21.260 --> 00:08:24.650
It's just going to block the whole server
because it's only the one task thread.

00:08:24.660 --> 00:08:30.710
And it said, okay, when I'm done,
then I'm going to return from

00:08:30.710 --> 00:08:37.900
the service call into the module
and respond to the request.

00:08:37.900 --> 00:08:40.770
And you can see at that point,
what had happened to the previous

00:08:40.950 --> 00:08:42.940
client who was busy watching
was that they were frozen.

00:08:44.500 --> 00:08:51.900
So the server API does support having a
module take a little while to do things.

00:08:51.900 --> 00:08:57.920
And the way we do that is we
provide a call called setIdleTimer,

00:08:57.920 --> 00:09:04.440
which is going to tell the
server to call it again because

00:09:04.440 --> 00:09:06.540
it's busy doing some work.

00:09:08.160 --> 00:09:14.460
So, in this case, yeah, this,
the module might be busy

00:09:14.710 --> 00:09:17.960
downloading something,
copying a file.

00:09:17.960 --> 00:09:21.740
It could be doing a DNS lookup,
which is completely blocking the server,

00:09:21.740 --> 00:09:24.740
but at least the whole
server isn't frozen.

00:09:24.740 --> 00:09:27.500
So this is one of those things
you have to be aware of when

00:09:27.500 --> 00:09:29.420
you're working in the server code.

00:09:29.420 --> 00:09:32.800
Now, there is one last thing
I want to show you,

00:09:32.800 --> 00:09:35.490
and that is what happens...

00:09:35.760 --> 00:09:38.820
If you're going to make a call,
maybe it's get host by name,

00:09:39.000 --> 00:09:41.320
where it's going to go and
you have no control over

00:09:41.320 --> 00:09:42.380
when it's going to come back.

00:09:42.400 --> 00:09:45.940
It could be 10 seconds from now.

00:09:45.940 --> 00:09:46.610
How do you deal with that?

00:09:46.640 --> 00:09:48.740
Since you can't,
in the middle of the call,

00:09:48.740 --> 00:09:51.590
return control back to the server,
what you need to do then is

00:09:51.720 --> 00:09:53.140
fork off your own thread.

00:09:53.140 --> 00:09:56.080
Now,
the QuickTime Streaming Server source

00:09:56.230 --> 00:09:59.880
code has an OS thread class,
so I just decided to use that.

00:09:59.880 --> 00:10:03.970
And what I did was I just instantiated
the thread and told it to go

00:10:03.970 --> 00:10:08.460
ahead and make my blocking call.

00:10:25.150 --> 00:10:25.150
So in this case,
I have a tight loop that normally

00:10:25.150 --> 00:10:25.150
would be blocking the entire server.

00:10:25.150 --> 00:10:25.150
However, in this case,
because it's on its own thread,

00:10:25.150 --> 00:10:25.150
I can still play movies.

00:10:26.450 --> 00:10:28.710
So just something to think about.

00:10:28.830 --> 00:10:33.010
There is, in most cases,

00:10:33.400 --> 00:10:53.200
[Transcript missing]

00:11:11.220 --> 00:11:12.490
So the reason for the number of threads
was to keep our thread count low,

00:11:12.490 --> 00:11:13.680
and this is a performance
optimization in the server.

00:11:13.750 --> 00:11:18.200
And the same idea is true when it
comes to having only one process.

00:11:18.220 --> 00:11:20.060
The server runs faster.

00:11:20.210 --> 00:11:24.840
It is much more efficient to
have fewer numbers of threads.

00:11:24.860 --> 00:11:27.600
It just means that as a programmer,
you have to be aware of this

00:11:27.650 --> 00:11:30.190
architecture and design appropriately.

00:11:31.410 --> 00:11:35.490
So let's take a look
at the core server now.

00:11:35.490 --> 00:11:35.490
We have

00:11:37.800 --> 00:11:39.940
A few main objects that you're
going to see in the core server.

00:11:39.940 --> 00:11:42.290
And the first one is the QTSS server.

00:11:42.510 --> 00:11:48.470
This is the class that's going to get
instantiated and it's going to load up

00:11:48.470 --> 00:11:50.800
each of the modules and execute them.

00:11:50.940 --> 00:11:51.770
There are the callbacks.

00:11:51.820 --> 00:11:52.800
This is the API.

00:11:52.800 --> 00:11:57.660
So every time a module makes a
QTSS API callback into the server,

00:11:57.660 --> 00:12:02.000
it's implemented in something
called QTSS callbacks.

00:12:03.060 --> 00:12:06.110
We have QTSS dictionaries
in the core server.

00:12:06.250 --> 00:12:07.890
These are data storage.

00:12:07.940 --> 00:12:12.420
It's a key lookup with a
value associated with the key.

00:12:12.440 --> 00:12:19.440
The QTSS dictionary, once again,
is there to support the API.

00:12:19.660 --> 00:12:23.130
We have RTSP sessions,
which is the RTSP protocol

00:12:23.250 --> 00:12:27.720
with the server supports,
and various other files

00:12:27.720 --> 00:12:34.160
associated with RTSP that
protocol parsing and formatting.

00:12:34.160 --> 00:12:38.680
There's RTP session,
yet another protocol class,

00:12:38.680 --> 00:12:40.400
and its support.

00:12:40.400 --> 00:12:43.440
Finally,
we have server preferences that basically

00:12:43.440 --> 00:12:46.220
configure the server when it starts up.

00:12:46.260 --> 00:12:51.780
So all of this actually could
be summarized that there's

00:12:51.830 --> 00:12:54.900
a QTSS server class that's
going to load up your modules.

00:12:55.410 --> 00:13:01.200
There's some API support classes that
provide your modules with roll calls

00:13:01.550 --> 00:13:05.660
into the module and callbacks from them,
and protocol support

00:13:05.660 --> 00:13:11.010
inside the core server,
followed by configuration preferences.

00:13:12.200 --> 00:13:16.250
This is an example of the file module.

00:13:16.540 --> 00:13:21.800
Every time we request a movie
from the Darwin Streaming Server,

00:13:21.860 --> 00:13:27.580
it's going to go through a series
of calls into the file module.

00:13:29.360 --> 00:13:32.840
In this case,
normally when you're looking at our API,

00:13:32.840 --> 00:13:35.060
you're seeing the right-hand
side of this diagram,

00:13:35.060 --> 00:13:40.210
which is the roll calls that this
module will be getting called in.

00:13:40.220 --> 00:13:43.800
And these are the times in
which the module gets called.

00:13:43.800 --> 00:13:47.680
What that means on the server
side is the QTSS server,

00:13:47.770 --> 00:13:52.190
which we said owns the modules,
loads them up, is going to initialize the

00:13:52.190 --> 00:13:53.960
module when it first starts up.

00:13:54.630 --> 00:13:57.370
And after that,
the module has already decided that

00:13:57.420 --> 00:14:02.160
it wants to handle RTSP requests
and has told the server that,

00:14:02.160 --> 00:14:05.720
in the register role, that if there's an
RTSP request coming in,

00:14:05.720 --> 00:14:06.330
I want to see it.

00:14:06.440 --> 00:14:08.670
And I want to be able to process that.

00:14:08.700 --> 00:14:14.130
So when an RTSP session gets initialized
on the server from an incoming client,

00:14:14.230 --> 00:14:20.160
it's going to go ahead and call into this
particular module to handle the request.

00:14:20.180 --> 00:14:23.010
In this case,
let's say it was a play request.

00:14:23.800 --> 00:14:29.840
The module's going to take that,
process it, call it back into the server,

00:14:29.840 --> 00:14:32.480
which will go to the RTSP session.

00:14:32.480 --> 00:14:38.990
And in doing a QTSS play callback,
this is going to kick off the

00:14:38.990 --> 00:14:42.490
RTSP session with the client.

00:14:42.500 --> 00:14:49.370
What that means is now the server
is ready to respond to the client

00:14:49.900 --> 00:14:53.570
with the play request response.

00:14:53.900 --> 00:14:57.120
And then start calling into
this module for packets.

00:14:57.180 --> 00:15:01.810
And so the next roll call that this
module starts receiving from the server

00:15:01.810 --> 00:15:04.260
is going to be the send packets roll.

00:15:04.260 --> 00:15:06.500
Basically,
the server's going to keep saying,

00:15:06.690 --> 00:15:08.300
give me a packet, give me a packet.

00:15:08.300 --> 00:15:12.290
And the module in that roll
call is going to go out,

00:15:12.350 --> 00:15:17.210
find a packet for each of the streams,
and do a QTSS write.

00:15:17.220 --> 00:15:21.840
So this covers pretty
much a basic module.

00:15:21.840 --> 00:15:22.830
It's going to get loaded.

00:15:23.700 --> 00:15:27.720
It's going to say, these are the rolls
that I want to support.

00:15:27.720 --> 00:15:31.150
It's going to get called in those rolls,
and it's going to call back

00:15:31.150 --> 00:15:34.080
into the server after it's
done its own processing.

00:15:36.830 --> 00:15:42.500
So there are a number of modules
that are pre-built into the server.

00:15:42.600 --> 00:15:46.560
When you launch the server,
there's several modules.

00:15:46.650 --> 00:15:57.430
And I've categorized them by content,
support, and access control.

00:15:57.430 --> 00:15:57.430
What we have is--

00:15:58.460 --> 00:16:04.100
The content modules here,
which starts with the file module.

00:16:04.210 --> 00:16:09.340
This is your basic module that
is going to do MPEG-4 streaming.

00:16:09.390 --> 00:16:12.890
It's going to do 3GP support.

00:16:12.890 --> 00:16:18.940
It does QuickTime movie file support.

00:16:18.940 --> 00:16:18.940
It handles

00:16:19.420 --> 00:16:21.300
describes for RTSP.

00:16:21.300 --> 00:16:25.540
Basically, when it starts up,
just as we were saying before,

00:16:25.540 --> 00:16:27.530
it's going to say,
I want to handle RTSP requests,

00:16:27.530 --> 00:16:29.150
and I want to stream out packets.

00:16:29.150 --> 00:16:30.800
So it's going to do those two roll calls.

00:16:30.800 --> 00:16:34.750
The Reflector module
doesn't handle files.

00:16:34.800 --> 00:16:37.710
What it does handle is
incoming broadcasts,

00:16:37.780 --> 00:16:39.010
live streams.

00:16:39.150 --> 00:16:40.630
It binds to a port.

00:16:40.630 --> 00:16:48.760
It handles requests for STP files,
which then the Reflector module,

00:16:48.760 --> 00:16:52.020
when it comes time to write packets,
is going to be pulling it from

00:16:52.020 --> 00:16:55.660
an incoming broadcast stream and
sending them off to the client.

00:16:55.660 --> 00:16:57.540
So that's why we call it the Reflector.

00:16:57.540 --> 00:17:00.220
There's an incoming broadcast,
like a live broadcast.

00:17:00.800 --> 00:17:05.280
And this module here is going to be
the one that's going to be sending

00:17:05.360 --> 00:17:07.420
those packets out to the clients.

00:17:07.600 --> 00:17:12.600
We have a relay module which is similar
to the reflector module except that

00:17:12.600 --> 00:17:14.260
it has a built-in broadcaster as well.

00:17:14.370 --> 00:17:20.100
What it does is it goes in,
it grabs a broadcast stream,

00:17:20.150 --> 00:17:23.330
It's coming in and then it
forwards it on to another server.

00:17:23.450 --> 00:17:25.820
It could actually be a multicast address.

00:17:25.930 --> 00:17:28.870
So, in which case,
you could just go ahead and forward

00:17:28.920 --> 00:17:30.840
it on to the multicast IP address.

00:17:30.930 --> 00:17:34.190
But the idea here is that it's
pushing a broadcast someplace

00:17:34.190 --> 00:17:38.010
instead of waiting for a client to
come in and request the broadcast,

00:17:38.020 --> 00:17:40.230
which was the reflector module.

00:17:40.240 --> 00:17:44.530
The MP3 Streaming Module is
another broadcast support module.

00:17:44.620 --> 00:17:49.240
What this does is it grabs
an incoming MP3 stream,

00:17:49.240 --> 00:17:51.400
kind of like an icecast or
shellcast type of stream that

00:17:51.400 --> 00:18:04.540
might be sent to the server.

00:18:04.700 --> 00:18:07.780
So each of these is going to handle
a request in a very particular way.

00:18:07.780 --> 00:18:12.070
It's going to intercept the request,
decide if it belongs to itself,

00:18:12.070 --> 00:18:16.820
and it's going to respond to the client,
and then handle the data.

00:18:18.600 --> 00:18:22.940
Now we have some service support
modules built into the server.

00:18:22.940 --> 00:18:25.820
Some of these, you know,
if you're thinking about

00:18:25.820 --> 00:18:27.260
changing the server,
let's

00:18:27.470 --> 00:18:33.000
Start here if it has to do with
access log or maybe pulling out

00:18:33.080 --> 00:18:35.260
some statistics out of the server.

00:18:35.260 --> 00:18:38.040
These modules are built into the server.

00:18:38.040 --> 00:18:40.260
They're great pieces
of sample code for you.

00:18:40.790 --> 00:18:45.260
There's the error log module,
which obviously is just going to go

00:18:45.260 --> 00:18:47.380
ahead and record errors into a file.

00:18:47.380 --> 00:18:52.400
But we also have the access log,
which has each access to a file

00:18:52.400 --> 00:18:56.510
logged into the access log.

00:18:57.400 --> 00:19:01.580
And maybe there's something in
there that you just need in addition

00:19:01.970 --> 00:19:04.560
to what's already written out.

00:19:04.560 --> 00:19:08.020
There's the average bit rate
or there's the time connected.

00:19:08.020 --> 00:19:10.900
But maybe there's something else
that you want thrown in there.

00:19:11.000 --> 00:19:12.270
Maybe the codec that was used.

00:19:12.340 --> 00:19:14.430
Well, take a look at the access log.

00:19:14.430 --> 00:19:16.960
Maybe what you need to
do is just change that.

00:19:16.970 --> 00:19:19.550
Or you could go ahead
and rewrite your own log,

00:19:19.550 --> 00:19:20.420
of course.

00:19:20.420 --> 00:19:23.180
But this is built into the server.

00:19:23.180 --> 00:19:27.120
It's there in the source
for you to take a look at.

00:19:27.400 --> 00:19:31.730
There is also some other modules
like the webstats module.

00:19:31.820 --> 00:19:35.530
It's a HTTP module that will
return an HTML web page.

00:19:35.730 --> 00:19:39.210
And it will pull out some
information from the server

00:19:39.290 --> 00:19:41.430
and generate the web page.

00:19:41.520 --> 00:19:44.910
So a module isn't restricted
to streaming protocols.

00:19:44.910 --> 00:19:48.080
There's a server that's
going to call your module.

00:19:48.080 --> 00:19:51.990
You can decide whether or not
you want to handle RTSP requests.

00:19:51.990 --> 00:19:55.130
Or you can decide you want
to handle something else,

00:19:55.210 --> 00:19:56.840
like an HTTP request.

00:19:58.410 --> 00:20:02.300
We have a web debug module,
an admin module.

00:20:02.300 --> 00:20:06.360
The admin module is an interesting one
because what it does is it takes an

00:20:06.380 --> 00:20:15.310
HTTP style request and uses and looks
for something called our admin protocol.

00:20:15.410 --> 00:20:20.450
This is a URL based protocol
that references any of the

00:20:20.770 --> 00:20:23.320
data that's in the server.

00:20:30.320 --> 00:20:31.110
So this is how our UI is implemented.

00:20:31.110 --> 00:20:32.100
Basically,
you can go ahead and grab anything

00:20:32.100 --> 00:20:33.390
out of the server using the
admin protocol implemented in the

00:20:33.390 --> 00:20:34.250
admin module and set it as well.

00:20:34.250 --> 00:20:37.300
And you can do this
remotely if you want to.

00:20:37.300 --> 00:20:39.260
Finally,
we have the POSIX file system module.

00:20:39.330 --> 00:20:41.460
This one doesn't deal with requests.

00:20:41.460 --> 00:20:43.280
It doesn't deal with logging.

00:20:43.380 --> 00:20:47.020
What it is is a low-level implement
support for reading files.

00:20:47.300 --> 00:20:51.410
So each of the modules that
are in the server call through

00:20:51.410 --> 00:20:53.220
the API to read a file.

00:20:53.350 --> 00:20:55.300
And it all gets funneled through
the POSIX file system module.

00:20:55.300 --> 00:20:57.980
And this could be replaced so
that if you needed to do something

00:20:57.980 --> 00:21:01.870
like a network file system,
you can go ahead and change this

00:21:01.870 --> 00:21:08.290
implementation to do some other
kinds of file system calls.

00:21:08.300 --> 00:21:11.540
Maybe you're pulling the data
out of a database instead of

00:21:11.540 --> 00:21:13.150
coming right off the disk.

00:21:13.300 --> 00:21:17.300
So once again, more modules that are
built into the server.

00:21:17.300 --> 00:21:21.150
more functionality that
is available to you.

00:21:22.990 --> 00:21:25.400
Finally,
we have the access control modules.

00:21:25.400 --> 00:21:29.050
These start out with the access module,
which handles authentication

00:21:29.050 --> 00:21:30.220
and authorization.

00:21:30.330 --> 00:21:36.780
We have a Apache-style
users and groups file.

00:21:36.780 --> 00:21:39.330
Basically,
it's going to go and check that

00:21:39.330 --> 00:21:43.340
file to see if a user has access
to any of the movies on the server.

00:21:44.250 --> 00:21:46.150
There's a home directory module.

00:21:46.260 --> 00:21:49.100
This one takes a look
at the URL and says,

00:21:49.170 --> 00:21:54.160
"Oh, do I have a tilde John in the
beginning of the path?" And it says,

00:21:54.160 --> 00:21:59.220
"Okay, this means that this movie
is coming out of the user's

00:21:59.240 --> 00:22:06.610
home directory movies folder,
not the main server's movies folder."

00:22:06.870 --> 00:22:12.200
So what that does is it allows users
who have access only to their accounts,

00:22:12.200 --> 00:22:15.700
their movie folders in
their home directory,

00:22:15.700 --> 00:22:20.200
and not to the main server,
to put up movies onto the server.

00:22:20.200 --> 00:22:24.390
And then everybody can reference them,
but they can only

00:22:24.390 --> 00:22:26.530
administer what they own.

00:22:27.230 --> 00:22:29.600
There is an HTTP file module.

00:22:29.600 --> 00:22:30.280
It's kind of interesting.

00:22:30.280 --> 00:22:32.140
It's a dynamic module.

00:22:32.140 --> 00:22:33.160
We usually have it turned off.

00:22:33.800 --> 00:22:38.190
What it does is allows
you to download a file.

00:22:38.200 --> 00:22:45.200
So it's not a--it could be-- an example
would be like in a progressive download.

00:22:45.200 --> 00:22:52.460
It also has the ability to, on the fly,
create a ref movie out

00:22:52.630 --> 00:22:54.200
of a folder of movies.

00:22:54.200 --> 00:22:57.940
So it actually pulls up,
takes the request, and says, "Oh,

00:22:57.980 --> 00:23:01.200
this is a directory." And then it
looks inside that directory and says,

00:23:01.200 --> 00:23:06.260
"Oh, I got three files here."
It creates a ref movie.

00:23:06.400 --> 00:23:23.200
[Transcript missing]

00:23:23.400 --> 00:23:41.900
[Transcript missing]

00:23:42.170 --> 00:23:46.130
The SpamDefense module is another
one of these optional modules

00:23:46.130 --> 00:23:47.600
that comes with the source.

00:23:48.240 --> 00:23:50.400
Basically,
it can limit the number of requests

00:23:50.440 --> 00:23:52.460
coming out of a single IP address.

00:23:52.610 --> 00:23:57.250
So if there's hundreds of play
requests coming out of a single

00:23:57.250 --> 00:24:01.570
client and just spamming your machine,
the SpamDefense module can

00:24:01.570 --> 00:24:05.780
put a clamp on that and say,
look, we're only going to allow 10 movies

00:24:05.970 --> 00:24:08.210
being played from a single IP address.

00:24:09.440 --> 00:24:12.410
So these are access
control types of modules.

00:24:12.410 --> 00:24:14.930
There's the data ones,
the content modules,

00:24:14.930 --> 00:24:18.200
there's the basic support,
and then access control.

00:24:20.650 --> 00:24:26.700
So I'm going to go over and
switch back to our demo system.

00:24:29.270 --> 00:24:36.390
And one of the nice things about
having the source code is that

00:24:36.390 --> 00:24:39.740
if there's a behavior in the
server that you want to change,

00:24:39.740 --> 00:24:43.880
then the code is there waiting for you.

00:24:43.890 --> 00:24:47.130
And all you have to do is find the
right place to throw your code in,

00:24:47.160 --> 00:24:50.120
and you can basically change
the behavior of the server.

00:24:50.120 --> 00:24:57.960
So what I did is I said I wanted a file
module that every time I gave it a URL,

00:24:57.960 --> 00:25:06.920
like "next," I wanted it to
give me a different movie,

00:25:06.920 --> 00:25:06.920
like this one.

00:25:09.300 --> 00:25:15.300
[Transcript missing]

00:25:15.640 --> 00:25:19.960
So downloading the source and
going in there and saying,

00:25:19.960 --> 00:25:24.890
OK, before I pass the file name
off to the open file command,

00:25:24.890 --> 00:25:28.110
I want to be able to replace that.

00:25:28.240 --> 00:25:28.570
OK.

00:25:28.960 --> 00:25:32.030
Couple lines of code, swap that in there,
and now I've got a new

00:25:32.030 --> 00:25:33.520
behavior in my server.

00:25:33.550 --> 00:25:35.100
Now, you might want to
create this as a module,

00:25:35.100 --> 00:25:37.590
or you might, if you have complete
control of the server,

00:25:38.190 --> 00:25:40.100
then go ahead, change it.

00:25:40.190 --> 00:25:41.850
It's all right there.

00:25:41.860 --> 00:25:43.400
Add your behavior.

00:25:43.400 --> 00:25:48.110
Now, another module that I had
mentioned in our talk earlier

00:25:48.600 --> 00:25:51.080
was that the Web Stats module

00:25:51.300 --> 00:25:55.550
And that's a dynamic module.

00:25:56.330 --> 00:25:56.380
We can...

00:25:57.080 --> 00:26:02.000
You see some of these modules
installed on the system.

00:26:02.010 --> 00:26:04.070
These are dynamic modules here.

00:26:04.070 --> 00:26:07.890
Basically what that means is every
time you throw them into this

00:26:07.890 --> 00:26:11.960
module folder and launch the server,
they're going to be executing

00:26:11.960 --> 00:26:13.560
when the server runs.

00:26:13.580 --> 00:26:19.970
These are other modules that
can be thrown in there and run.

00:26:20.660 --> 00:26:26.560
And once again, these are all part of the
Darwin Streaming Server source and

00:26:26.560 --> 00:26:31.440
are available to you to look at,
modify, use, or change.

00:26:31.480 --> 00:26:36.680
So getting back to that WebStats
module that's in the server,

00:26:36.680 --> 00:26:46.640
what we can do with that
is go ahead and call it.

00:26:46.640 --> 00:26:46.640
Let's see.

00:26:57.300 --> 00:27:03.100
[Transcript missing]

00:27:03.460 --> 00:27:06.690
What we're doing here is we're
waiting for the system to come back

00:27:06.690 --> 00:27:09.440
from doing some sort of network I/O.

00:27:09.640 --> 00:27:10.480
Okay.

00:27:10.520 --> 00:27:13.290
Now I have a server back again.

00:27:13.450 --> 00:27:19.800
So what I have inside of -- on the screen
here is an admin module request into

00:27:20.160 --> 00:27:23.790
the server to find out a preference.

00:27:23.870 --> 00:27:30.320
And this module preference is WebStats,
and I'm going to take a look

00:27:30.320 --> 00:27:31.680
at what it's going to show me.

00:27:40.070 --> 00:27:43.810
Okay,
so this module just grabbed the request

00:27:43.810 --> 00:27:46.680
coming into the server and said,
"Hey, it's web stats.

00:27:46.740 --> 00:27:49.650
I'm going to handle it." And what it's
going to do is it's going to respond,

00:27:49.810 --> 00:27:56.790
but instead of a -- since this was
an HTTP GET coming into the server,

00:27:56.790 --> 00:28:02.900
what this module decided to do
is it's going to generate an

00:28:02.900 --> 00:28:03.100
HTML web page and send back some
information about the server.

00:28:03.300 --> 00:28:05.680
Now,
maybe what it could have been doing is

00:28:05.680 --> 00:28:11.200
copying a log file on demand over to some
other machine that's collecting all these

00:28:11.230 --> 00:28:12.980
statistics or doing something like that.

00:28:13.100 --> 00:28:16.190
This module here,
or maybe this command was

00:28:16.210 --> 00:28:17.500
coming in from another UI.

00:28:17.500 --> 00:28:24.880
Somebody has integrated the
QuickTime Streaming Server administration

00:28:24.880 --> 00:28:29.070
into their user interface for controlling
multiple servers or something like that,

00:28:29.070 --> 00:28:31.410
and this module perhaps
is supporting that.

00:28:31.460 --> 00:28:35.970
So once again,
there's various ways in which you

00:28:35.970 --> 00:28:39.800
can access and control the server,
and

00:28:40.150 --> 00:28:41.690
This is one of them.

00:28:41.690 --> 00:28:44.900
Just toss a module in there,
and away you go.

00:28:44.900 --> 00:28:47.980
You have a new feature inside
a QuickTime Streaming Server.

00:28:48.080 --> 00:28:50.590
So we can switch back to slides.

00:28:57.200 --> 00:29:00.030
Okay,
so the server is a thin piece of code,

00:29:00.030 --> 00:29:03.710
but there is actually,
in terms of when it's executing,

00:29:03.710 --> 00:29:07.620
but there is a lot already built into it,
stuff that maybe you don't

00:29:07.620 --> 00:29:10.350
want to have to rewrite,
and if you have the opportunity,

00:29:10.350 --> 00:29:11.680
you want to be able to use.

00:29:11.760 --> 00:29:17.370
So that means that we are going to
be supporting RTSP over TCP for you,

00:29:17.370 --> 00:29:18.690
RTP over UDP.

00:29:18.780 --> 00:29:21.840
Apple's skip protection
is built into the server.

00:29:21.840 --> 00:29:23.530
That's RTP over reliable UDP.

00:29:24.910 --> 00:29:29.120
What that means is there's UDP packets
going out with acts coming back,

00:29:29.120 --> 00:29:33.500
and the server has the ability to
do retransmits using this protocol.

00:29:33.500 --> 00:29:41.700
There's RTP and RTP tunneled in HTTP,
which is basically how do

00:29:41.700 --> 00:29:43.520
you get around firewalls.

00:29:43.600 --> 00:29:48.860
There's RTP over RTSP,
which is RTP on top of TCP.

00:29:48.880 --> 00:29:53.840
So these are all standard protocols,
streaming protocols,

00:29:54.240 --> 00:29:55.280
and they're built into the server.

00:29:55.280 --> 00:29:58.860
It automatically will
handle these connections.

00:30:01.700 --> 00:30:06.480
Now, one of the protocols that it doesn't
automatically do for you is HTTP.

00:30:06.600 --> 00:30:10.280
Basically, there's a request coming in,
but it itself is not going

00:30:10.280 --> 00:30:11.990
to do anything with it.

00:30:12.080 --> 00:30:14.700
If you happen to have
a module that wants to,

00:30:14.700 --> 00:30:18.410
basically,
you would grab that request and decide

00:30:18.410 --> 00:30:24.010
based on the URL whether it was meant
for you or not and do something with it.

00:30:24.060 --> 00:30:30.850
So, one example is the QTSS admin
module that's going to look for a

00:30:30.850 --> 00:30:35.070
URL path and it's going to decide,
"Yes, this is a path that belongs inside

00:30:35.170 --> 00:30:38.520
of the server and I'm going to
go ahead and respond to it."

00:30:38.650 --> 00:30:43.340
The MP3 Streaming Module is another
type of HTTP support module.

00:30:43.500 --> 00:30:50.410
It looks for IC protocol requests that
are coming into the streaming server.

00:30:50.640 --> 00:30:53.570
Websats Module, we just looked at that.

00:30:56.140 --> 00:30:57.070
And so on and so forth.

00:30:57.080 --> 00:30:58.760
There's other types of modules here.

00:30:58.810 --> 00:31:05.170
The refmovie module is going
to take a HTTP GET on a file,

00:31:05.360 --> 00:31:12.590
a movie file,
and generate a RTSP request.

00:31:12.830 --> 00:31:15.600
Send that back in the
response to the GET,

00:31:15.720 --> 00:31:19.240
and that tells the QuickTime client, "Oh,
what I really should be doing here is not

00:31:19.280 --> 00:31:25.100
a GET but an RTSP on the file." And it
turns around and makes the RTSP request.

00:31:25.260 --> 00:31:28.400
Looks like we have web sets twice.

00:31:28.400 --> 00:31:30.570
And a web debug module.

00:31:30.760 --> 00:31:34.220
So that's very similar to the web stats,
except it gives debugging information.

00:31:34.460 --> 00:31:37.760
When the server is compiled
with debug enabled,

00:31:37.930 --> 00:31:41.920
the debug module is going to show
up with an HTML web page for the

00:31:41.920 --> 00:31:46.820
programmer to see real time what the
memory allocation in the server is,

00:31:46.820 --> 00:31:50.860
maybe how many file descriptors are open,
things like that.

00:31:51.380 --> 00:31:54.250
There are, of course,
other ways of getting

00:31:54.350 --> 00:31:58.130
that type of information,
but this is one way in which -- a

00:31:58.130 --> 00:32:00.260
handy way in which this can be done.

00:32:01.850 --> 00:32:05.510
Okay,
so the server has these roll calls that

00:32:05.690 --> 00:32:08.080
it's calling each of the modules in.

00:32:08.300 --> 00:32:16.310
The roll calls look like,
here's a request, here's a route roll,

00:32:16.310 --> 00:32:19.570
which is sort of a prerequest call.

00:32:19.580 --> 00:32:24.420
And along with each request is going
to be something called a QTSS object.

00:32:24.420 --> 00:32:29.380
And these are inside of the server.

00:32:29.650 --> 00:32:33.790
Basically,
a dictionary that goes with each of

00:32:33.790 --> 00:32:37.510
the classes that the server supports.

00:32:37.590 --> 00:32:41.500
So there's the QTSS server class,
and it has an implementation

00:32:41.500 --> 00:32:43.880
called the QTSS server interface.

00:32:43.880 --> 00:32:46.340
That's the dictionary that's
going to support the API.

00:32:46.340 --> 00:32:52.110
We have RTSP sessions that get
generated whenever a client connects.

00:32:52.110 --> 00:32:56.780
There's an RTSP session interface
that goes with that class.

00:32:56.780 --> 00:33:00.260
It's an RTSP session interface.cpp file.

00:33:00.260 --> 00:33:03.980
And basically what that is,
it's a dictionary implementation

00:33:04.110 --> 00:33:08.210
for the API to access the data
that's in the RTSP session object.

00:33:08.880 --> 00:33:13.680
Same is true with RTP session,
another type of protocol management

00:33:14.200 --> 00:33:16.200
class that's in the server.

00:33:16.230 --> 00:33:22.610
And for every request,
there's a request object that

00:33:22.610 --> 00:33:27.990
shows up inside of our API that
has an interface file associated

00:33:28.460 --> 00:33:30.940
with it that's a dictionary that's

00:33:31.410 --> 00:33:34.060
That gives access to the data.

00:33:34.190 --> 00:33:38.710
So here's the object hierarchy
that's built into the server.

00:33:38.820 --> 00:33:41.090
You have your main server.

00:33:41.480 --> 00:33:46.130
Once again,
the server object has a QTSS interface

00:33:46.130 --> 00:33:48.610
file associated with it.

00:33:48.690 --> 00:33:54.990
It contains modules, server preferences,
and client sessions.

00:33:54.990 --> 00:33:59.400
When we look at the server object,
we'll be able to pull

00:33:59.400 --> 00:34:01.320
out the client sessions.

00:34:01.320 --> 00:34:04.700
We can pull out the server's
preferences that are currently active.

00:34:04.700 --> 00:34:07.740
We can grab each of the modules
that the server is running.

00:34:07.740 --> 00:34:13.490
And then within the modules,
there's preferences for each module that

00:34:13.490 --> 00:34:16.990
is instantiated inside of the server.

00:34:17.020 --> 00:34:19.130
So what that means is
when you create a module,

00:34:19.130 --> 00:34:23.110
you can say, hey,
I want to have my module's

00:34:23.270 --> 00:34:27.600
preferences added to the
server's XML preference file.

00:34:27.600 --> 00:34:30.700
And there's an API call
to allow you to do that.

00:34:30.710 --> 00:34:33.740
All of our modules that
come in source code do this.

00:34:33.740 --> 00:34:36.180
So that means that...

00:34:37.700 --> 00:34:41.610
The preference is for your module
or immediately configurable or

00:34:41.610 --> 00:34:46.010
editable by the admin protocol,
meaning a user interface can go in there

00:34:46.050 --> 00:34:51.850
and remotely configure your preferences
without you ever having to write anything

00:34:51.910 --> 00:34:55.160
to support remote admin of your module.

00:34:55.220 --> 00:34:57.640
The client sessions, of course,
you might want to find

00:34:57.640 --> 00:35:01.150
out some information about
the stream in real time.

00:35:01.330 --> 00:35:05.260
What's the current bit rate
of the stream or the session,

00:35:05.380 --> 00:35:10.870
all the streams that are currently
playing for a given client?

00:35:13.440 --> 00:35:14.140
And so the dictionaries
give us this ability to walk

00:35:14.190 --> 00:35:17.790
this tree of data real time,
pull it out of the server,

00:35:17.790 --> 00:35:22.440
and if you want to log it or use it
to maybe limit the number of users,

00:35:22.440 --> 00:35:24.740
you know,
finding that the current bandwidth

00:35:24.740 --> 00:35:28.220
is just getting too high,
and real time you want to start

00:35:28.470 --> 00:35:33.620
limiting the server in some way by
number of users or by bandwidth,

00:35:33.630 --> 00:35:36.970
you can go ahead and change the
data that configures the server

00:35:36.970 --> 00:35:41.380
real time by accessing our user.

00:35:41.400 --> 00:35:42.180
data hierarchy.

00:35:45.850 --> 00:35:51.680
So I want to use the admin module
that we've been talking about just

00:35:51.760 --> 00:35:54.010
to show you what some of these...

00:35:54.560 --> 00:35:56.820
objects look like.

00:35:56.820 --> 00:36:01.460
And basically, the admin module takes
this admin protocol,

00:36:01.460 --> 00:36:06.060
which is a URL-style request,
and maps that to the hierarchy

00:36:06.430 --> 00:36:10.150
that's inside the server and
pulls out the information,

00:36:10.210 --> 00:36:12.180
and can actually set it too.

00:36:12.180 --> 00:36:16.740
So if I wanted to grab the server object,
and I want all the fields

00:36:16.740 --> 00:36:20.370
within the server object,
I'm going to fire off a

00:36:20.370 --> 00:36:23.800
request to the admin module,
and here it is.

00:36:23.900 --> 00:36:28.380
So now it's giving me back
everything that it knows about.

00:36:28.380 --> 00:36:34.630
One of the things it has inside the
server object is the list of modules.

00:36:34.640 --> 00:36:36.500
So there's a dictionary.

00:36:36.600 --> 00:36:38.150
Up here at the top, I can see my path.

00:36:38.240 --> 00:36:44.420
There's a dictionary key called
the server module objects,

00:36:44.810 --> 00:36:46.240
and here are my modules.

00:36:46.290 --> 00:36:48.120
If I were to drop a server module,
I would have to drop a server module.

00:36:48.150 --> 00:36:50.800
Stop the server,
drop a new dynamic module

00:36:50.800 --> 00:36:54.120
into my modules folder,
and relaunch the server,

00:36:54.120 --> 00:36:56.450
it would show up in this list.

00:36:57.260 --> 00:37:07.430
Now, each of these modules
has its own preference,

00:37:07.430 --> 00:37:07.430
and let's see if I can pull that out.

00:37:08.910 --> 00:37:12.790
It has many different layers,
but each module, you can see,

00:37:12.790 --> 00:37:17.260
has all of its settings and can
be configured here remotely.

00:37:17.260 --> 00:37:19.540
So none of the modules
really have to worry about,

00:37:19.540 --> 00:37:21.860
gee,
how am I going to configure this thing?

00:37:21.870 --> 00:37:26.920
It's easily configurable once
it's loaded up into the server.

00:37:26.920 --> 00:37:32.170
And since this information is written
back out to the server's XML file,

00:37:32.270 --> 00:37:35.300
it can be edited even when
the server isn't running.

00:37:35.300 --> 00:37:38.010
It can change the XML file
to modify the preferences.

00:37:39.100 --> 00:37:47.830
So let's take a look at a stream.

00:37:50.530 --> 00:37:53.000
And I want to see the sessions
that are currently running.

00:37:53.000 --> 00:37:55.500
I have one client-server session.

00:37:55.510 --> 00:37:58.490
I want to drill down into that session.

00:37:59.800 --> 00:38:02.920
Okay, so I have some session
information right now.

00:38:02.940 --> 00:38:04.700
I have a URL.

00:38:04.700 --> 00:38:09.800
Looks like I have an average bit rate,
a movie file size.

00:38:09.800 --> 00:38:11.770
I want to take a look at the streams.

00:38:12.580 --> 00:38:15.410
Looks like there are two streams.

00:38:15.720 --> 00:38:18.100
I want to see if I can find the codex.

00:38:18.170 --> 00:38:23.180
Looks like I have an MPEG-4 codex.

00:38:23.560 --> 00:38:28.800
It looks like an MPEG-4
video that's playing.

00:38:28.920 --> 00:38:32.310
So, for every single stream that's
currently playing on the server,

00:38:32.320 --> 00:38:35.270
I can grab real-time information.

00:38:36.670 --> 00:38:39.530
I'm doing it through a module.

00:38:39.530 --> 00:38:43.770
If you have a module
that's currently running,

00:38:43.790 --> 00:38:49.120
its job is to be monitoring how
many people are watching this

00:38:49.120 --> 00:38:55.540
particular movie right now and maybe
I need to start redirecting clients

00:38:55.620 --> 00:39:01.240
someplace else or maybe I just
need to start denying clients.

00:39:01.250 --> 00:39:04.290
Imagine a module doing that.

00:39:05.700 --> 00:39:14.700
[Transcript missing]

00:39:19.700 --> 00:41:08.300
[Transcript missing]

00:41:09.310 --> 00:41:17.330
The API common code,
all of the modules use it.

00:41:17.370 --> 00:41:22.710
It's basically there for
sets of API calls that kind

00:41:22.710 --> 00:41:23.560
of seem to go together.

00:41:23.560 --> 00:41:29.260
And, you know, I want to create a new
preference and set its value,

00:41:29.260 --> 00:41:38.020
and this is where usually we throw those
types of commonly used code together.

00:41:38.020 --> 00:41:41.950
So you might want to go ahead
and see if there's any of that

00:41:41.950 --> 00:41:46.420
code in there for your module
that you want to use or emulate.

00:41:47.860 --> 00:41:50.980
The API modules themselves,
the implementation for all

00:41:50.980 --> 00:41:53.540
the modules I've shown you,
is in this directory.

00:41:53.540 --> 00:41:57.040
You can just walk through there,
do a grep, just browse it,

00:41:57.110 --> 00:41:59.860
and pull up the source
for any of the modules.

00:41:59.880 --> 00:42:04.110
RTSP ClientLive is...

00:42:04.280 --> 00:42:07.200
It's just a library,
but basically when you instantiate it,

00:42:07.250 --> 00:42:11.040
it's going to give you the
ability to connect to a streaming

00:42:11.040 --> 00:42:13.020
server as an RTSP client.

00:42:13.020 --> 00:42:16.020
You can tell it to do a describe.

00:42:16.190 --> 00:42:18.330
It will get back the SDP response.

00:42:18.330 --> 00:42:26.360
You can ask it to start playing,
and it will pull down a RTSP stream.

00:42:26.360 --> 00:42:29.710
It will do it over any of the
protocols that the server supports.

00:42:29.710 --> 00:42:32.080
So this is how we test out
our server using this library.

00:42:32.080 --> 00:42:38.080
If you tell it,
"Instantiate something from the

00:42:38.180 --> 00:42:42.070
RTSP client live to connect and
download over TCP," it will do that,

00:42:42.080 --> 00:42:48.960
or in HTTP using reliable UDP, perhaps,
or skip protection.

00:42:48.960 --> 00:42:51.960
That's the RTSP client live.

00:42:51.960 --> 00:42:57.590
The server actually uses
it in a couple of places.

00:42:58.530 --> 00:42:58.530
One of them is in the relay.

00:42:58.720 --> 00:43:03.100
The other is in our file broadcasters.

00:43:03.100 --> 00:43:06.680
In particular,
the playlist broadcaster has a built-in

00:43:06.680 --> 00:43:09.760
client and it uses RTSP ClientLib.

00:43:09.760 --> 00:43:12.560
And one last piece,
the streaming load tool is a

00:43:12.560 --> 00:43:17.480
little piece of binary code that
goes out and does load testing.

00:43:17.640 --> 00:43:22.180
And we use the
RTSP ClientLib in that tool.

00:43:22.770 --> 00:43:25.780
So RTCP utilities,
if you're interested in

00:43:25.780 --> 00:43:29.220
RTCP protocol for some reason,
maybe there's a bug in the server,

00:43:29.380 --> 00:43:31.810
who knows, but the code is there for
you to take a look at,

00:43:31.870 --> 00:43:33.490
fix, or change if you need to.

00:43:33.500 --> 00:43:35.770
Same thing is true with HTTP.

00:43:35.840 --> 00:43:42.500
And so that's the top level of
the source tree as you untar it.

00:43:43.940 --> 00:43:46.980
When you go ahead and build our code,
you're going to end up with more

00:43:46.980 --> 00:43:48.750
than just a streaming server.

00:43:48.870 --> 00:43:53.470
You have the playlist broadcaster,
which is like the name says,

00:43:53.640 --> 00:43:57.880
it takes a playlist of movie files
and concatenates them together

00:43:57.940 --> 00:43:59.800
and streams into the server.

00:43:59.800 --> 00:44:05.380
And these can then be turned around
by the server to support each client

00:44:05.380 --> 00:44:08.800
that may be requesting the live stream.

00:44:08.800 --> 00:44:10.800
Actually, it's a pseudo live stream,
of course.

00:44:10.800 --> 00:44:14.090
The playlist broadcaster will
loop the list of movies if

00:44:14.090 --> 00:44:18.600
that's what you ask it to do,
so it will have this continually

00:44:18.600 --> 00:44:24.500
running playback of some keynote
speech or something like that.

00:44:25.140 --> 00:44:29.360
Also, there's an MP3 broadcaster,
which is the same idea,

00:44:29.360 --> 00:44:34.250
except it's doing it for MP3s instead
of MPEG-4s and QuickTime movies.

00:44:34.260 --> 00:44:39.740
We have a streaming proxy,
and that source code is there.

00:44:39.740 --> 00:44:42.590
There's Qt file tools.

00:44:42.620 --> 00:44:46.840
Those are for those people, once again,
who are interested in the MPEG-4

00:44:46.840 --> 00:44:51.290
movie file format and want to
see how it goes out and extracts

00:44:51.290 --> 00:44:53.850
the packets out of the files.

00:44:54.080 --> 00:44:57.560
These tools basically are command
line tools that you can go ahead

00:44:57.560 --> 00:45:02.930
and rip out streams of packets
from any given hinted file.

00:45:02.940 --> 00:45:08.780
The web admin is our user
interface that we provide with

00:45:08.780 --> 00:45:10.150
the DaRwin Streaming Server.

00:45:10.160 --> 00:45:16.220
So let's say you want to personalize
or privatize the web admin,

00:45:16.220 --> 00:45:17.960
so it doesn't say
Apple QuickTime Streaming

00:45:17.960 --> 00:45:18.810
Server all over it.

00:45:18.860 --> 00:45:21.980
You want to throw in
your own UI to the HTML.

00:45:22.990 --> 00:45:26.380
This web admin is in the source.

00:45:26.650 --> 00:45:30.500
You can go ahead and change it.

00:45:32.370 --> 00:45:35.300
As well as the Qt password file.

00:45:35.300 --> 00:45:38.340
It doesn't really do much.

00:45:38.340 --> 00:45:42.060
If you want to add users and groups,
you run the Qt password file.

00:45:42.060 --> 00:45:44.210
If you don't like the
format for some reason,

00:45:44.310 --> 00:45:45.450
go ahead and change it.

00:45:45.460 --> 00:45:48.410
If you want to use our code, fine,
it's there.

00:45:48.410 --> 00:45:52.450
Or you can replace it, of course.

00:45:54.600 --> 00:45:59.890
So one of the things that you might
want to do is just change the name if

00:45:59.890 --> 00:46:02.500
you're deploying it with your product.

00:46:02.500 --> 00:46:06.500
Your QuickTime or DaRwin Streaming
Server doesn't really work for you.

00:46:06.500 --> 00:46:11.180
You want to call it My Demo
Server or Your Server.

00:46:11.180 --> 00:46:14.910
And so you can go ahead and
change those constants that

00:46:15.120 --> 00:46:17.280
are available in the server.

00:46:17.280 --> 00:46:19.210
There's a few places you have
to go and look for things.

00:46:19.210 --> 00:46:23.650
If it's OS X, you want to look in the
project builder file.

00:46:24.500 --> 00:46:26.430
There's -- if you're
dealing with the web admin,

00:46:26.430 --> 00:46:32.210
then you're going to be looking in the
profile that is part of the web admin.

00:46:32.230 --> 00:46:35.490
There's basically the installer scripts.

00:46:35.500 --> 00:46:39.340
You can find it pretty much
by doing a find text and file.

00:46:39.340 --> 00:46:42.800
And so then you can package
it up and distribute it with,

00:46:42.800 --> 00:46:45.930
you know,
maybe your hardware server product

00:46:46.010 --> 00:46:52.090
or something like that that shifts
with the DaRwin Streaming Server.

00:46:55.050 --> 00:46:58.260
Once again, building the software,
we have a buildit script.

00:46:58.330 --> 00:47:03.380
This is what you would run at
the command line to build our

00:47:03.380 --> 00:47:04.940
POSIX version of the server.

00:47:04.940 --> 00:47:09.680
You would just find
the script and run it.

00:47:09.720 --> 00:47:12.200
It also works for OS X.

00:47:12.200 --> 00:47:15.660
If you don't want to use
the project builder project,

00:47:15.690 --> 00:47:18.550
you can just execute
from the command line,

00:47:18.550 --> 00:47:21.220
rebuild the binaries, and test it.

00:47:21.220 --> 00:47:23.980
It will show up inside of
a build directory on OS X.

00:47:25.460 --> 00:47:27.200
On Windows NT,
it's a little bit different.

00:47:27.200 --> 00:47:29.860
We have a Windows NT support directory.

00:47:29.980 --> 00:47:33.130
So those of you who are building
your software for Windows are

00:47:33.180 --> 00:47:35.970
going to go down in there,
find your Visual C++

00:47:36.120 --> 00:47:39.720
project or worksheet,
load that up.

00:47:39.960 --> 00:47:44.680
You want to do a batch build,
and it's going to generate a

00:47:44.680 --> 00:47:49.780
debug and release directory and
throw all the binaries in there.

00:47:52.430 --> 00:47:55.950
So once you have your software built,
you want to be able to

00:47:55.950 --> 00:47:57.240
create an installer.

00:47:57.250 --> 00:48:00.020
Now, at this point,
it kind of goes into how

00:48:00.020 --> 00:48:01.080
do you want to do it.

00:48:01.140 --> 00:48:07.050
The pre-built binaries that Apple has
on our site for you to download are all

00:48:07.410 --> 00:48:12.750
created using this build tarball script,
which goes ahead, builds it,

00:48:12.850 --> 00:48:16.690
generates an install directory,
tars it up,

00:48:16.690 --> 00:48:21.170
and then you go ahead and download it,
untar it, run the install script,

00:48:21.270 --> 00:48:22.280
and it goes ahead and fills it up.

00:48:22.300 --> 00:48:25.400
And that would be for the POSIX platform.

00:48:25.400 --> 00:48:29.770
On OS X,
we have a script that's going to build

00:48:29.770 --> 00:48:31.690
an OS X installer package for you.

00:48:31.690 --> 00:48:36.010
So it's going to go off and
do all the pieces and throw it

00:48:36.010 --> 00:48:38.690
into this installer package.

00:48:38.870 --> 00:48:44.690
The important piece about the build
OS X installer package is that there is

00:48:44.690 --> 00:48:51.300
some logic when it's installing as to
how to upgrade existing installations.

00:48:52.350 --> 00:48:55.210
or what to do about

00:48:57.660 --> 00:49:01.610
So, I'm going to start off by setting
it up with the proper users and

00:49:01.890 --> 00:49:03.840
groups that the server might need.

00:49:03.840 --> 00:49:08.640
On OS X, for example, and version 5,
we're going to be running as user QTSS,

00:49:08.640 --> 00:49:12.470
and the installer package will
make sure that that user is on the

00:49:12.470 --> 00:49:16.890
machine so that when the server runs,
it can go ahead and stream.

00:49:17.200 --> 00:49:22.460
Windows NT,
we just use a make zip package

00:49:22.460 --> 00:49:28.390
that the bat file goes ahead
and organizes the files for you.

00:49:28.400 --> 00:49:32.330
You might want to edit
or change that yourself.

00:49:34.680 --> 00:49:37.760
So we're going to move
on to troubleshooting.

00:49:37.890 --> 00:49:41.880
So after you've gone through,
you've created your module,

00:49:41.880 --> 00:49:46.810
you've edited things, you've built it,
you've created an installer.

00:49:46.890 --> 00:49:50.340
If you find that you need
to troubleshoot the server,

00:49:50.450 --> 00:49:54.880
there's some commonly used
debugging preferences that we have.

00:49:54.890 --> 00:49:59.080
And the first three that I have
here have to do with protocol.

00:49:59.080 --> 00:50:01.880
And the first one is RTSP debug printer.

00:50:01.880 --> 00:50:04.580
So I just want to see if I can do that.

00:50:04.600 --> 00:50:14.700
And the second one is RTSP debug printer.

00:50:14.710 --> 00:50:23.490
So I just want to see if I can do that.

00:50:23.490 --> 00:50:23.490
And the first one is RTSP debug printer.

00:50:23.490 --> 00:50:23.490
So I just want to see if I can do that.

00:50:23.750 --> 00:50:29.770
Now, just following that is the
packet header printout.

00:50:32.220 --> 00:50:38.150
So, the actual data packets themselves,
you don't want to -- it will -- just like

00:50:38.240 --> 00:50:42.420
the RTSP printfs will show you the RTSP,
the packet header printfs are

00:50:42.520 --> 00:50:47.600
there to show you the media packets
that are being sent by the server.

00:50:47.600 --> 00:50:51.860
So that means that if
there's an RTP packet,

00:50:51.860 --> 00:50:58.520
a receiver report, a sender report,
an application packet or an ACK,

00:50:58.520 --> 00:51:04.080
the ACKs are for the skip protection,
then you'll see them as they come

00:51:04.080 --> 00:51:05.390
into the server or get sent out.

00:51:07.150 --> 00:51:10.830
And if you do have these on,
you want to be able to see them,

00:51:10.840 --> 00:51:12.530
you're going to need to run
the server in debug mode,

00:51:12.540 --> 00:51:16.790
which means at the command line,
add a dash D.

00:51:19.760 --> 00:51:25.310
Okay, so I'm going to just turn on the
debugging printfs here just to

00:51:25.310 --> 00:51:28.700
show you what they look like.

00:51:28.700 --> 00:51:32.560
I'm going to go ahead and add, um...

00:51:33.000 --> 00:51:45.300
[Transcript missing]

00:51:46.080 --> 00:51:48.430
So at this point,
what we should have is a streaming

00:51:48.470 --> 00:51:54.430
server that has our debug printfs in it.

00:51:54.440 --> 00:51:58.600
Whenever it wakes up.

00:52:04.900 --> 00:52:06.800
Let's try a different URL.

00:52:06.800 --> 00:52:11.040
Oh, there it is.

00:52:11.040 --> 00:52:12.040
Okay.

00:52:12.040 --> 00:52:16.510
Okay, so we don't need this anymore.

00:52:18.800 --> 00:52:22.140
Okay, so the RTSP debug printfs.

00:52:22.140 --> 00:52:25.010
We have an RTSP request here.

00:52:25.220 --> 00:52:29.700
Describe and some more information.

00:52:29.700 --> 00:52:35.930
And a file module that accepted
it and sent back something called

00:52:35.930 --> 00:52:39.110
a SDP right here to the client.

00:52:39.110 --> 00:52:42.660
And this is just handy information
that as you're debugging your module,

00:52:42.660 --> 00:52:45.100
you might need to take a
look at these requests.

00:52:45.100 --> 00:52:52.100
So another type of request
I'm going to try is

00:52:52.900 --> 00:53:03.600
[Transcript missing]

00:53:04.390 --> 00:53:10.180
Okay, looks like what happened
is it started playing.

00:53:11.240 --> 00:53:14.330
started playing and it
looks like it's streaming,

00:53:14.400 --> 00:53:17.090
but I just didn't HTTP get.

00:53:17.180 --> 00:53:23.030
So we can take a look at what all
this thing is doing by looking

00:53:23.110 --> 00:53:26.000
at our RTSP debug printers.

00:53:26.300 --> 00:53:34.080
It looks like a GET went to the server
and a module there picked it up and

00:53:34.080 --> 00:53:38.930
returned the HTTP GET with an RTSP URL.

00:53:39.190 --> 00:53:45.420
: I guess that means that
what I should be doing is an

00:53:45.420 --> 00:53:49.360
RTSP describe with this URL.

00:53:49.400 --> 00:53:51.740
So this could be a redirect, actually.

00:53:51.820 --> 00:53:54.130
It's not an RTSP redirect.

00:53:54.140 --> 00:53:58.340
What it is is an HTTP GET that
contains a redirect in the response.

00:53:58.530 --> 00:54:00.460
Now,
you can imagine this module that happens

00:54:00.460 --> 00:54:04.500
to be available inside the source code.

00:54:04.780 --> 00:54:11.840
It's called the refmovie module,
being used in lots of different ways to

00:54:12.030 --> 00:54:18.280
generate different redirects or different
types of responses to the client so that

00:54:18.540 --> 00:54:26.200
you can go ahead and have it RTSP to some
other movie or some other server even.

00:54:27.390 --> 00:54:31.250
So that was how we take a
look at what's going on in the

00:54:31.250 --> 00:54:34.210
server when we're debugging the

00:54:34.410 --> 00:54:36.800
using the RTSP debug print apps.

00:54:36.840 --> 00:54:40.310
And let's go back to the slides.

00:54:42.970 --> 00:54:47.180
And in the slides we'll take a look
at a couple more debug printfs.

00:54:47.310 --> 00:54:51.320
Basically, you can turn these on when
you compile the server.

00:54:51.320 --> 00:54:54.030
One of the useful ones,
if you have a module that's

00:54:54.030 --> 00:54:57.260
doing something kind of tricky,
it's handling a lot of

00:54:57.360 --> 00:54:58.940
different roll calls.

00:54:58.940 --> 00:55:00.760
Maybe it has its own threads.

00:55:00.760 --> 00:55:04.140
You might want to take a look at
when it's actually getting executed.

00:55:04.140 --> 00:55:07.450
And the way to do that is
find in our common utilities

00:55:07.450 --> 00:55:12.250
the base class for a task,
which is the basic entity that's

00:55:12.370 --> 00:55:16.050
getting executed in the server.

00:55:16.060 --> 00:55:17.720
And if you would turn
on the debugging there,

00:55:17.730 --> 00:55:20.350
you'll find all these printfs
that show up that say,

00:55:20.350 --> 00:55:24.660
oh, the server is working on
an RTSP session right now,

00:55:24.660 --> 00:55:30.000
and there's an access log call
right now that's being executed.

00:55:30.000 --> 00:55:33.810
So you can find out exactly when all
the modules and what their interactions

00:55:33.940 --> 00:55:38.890
are by turning on this debug printfs.

00:55:41.020 --> 00:55:44.420
In the file source,
there is also another handy little flag.

00:55:44.530 --> 00:55:47.860
You can turn this on and you can
pretty much see what the reads -- what

00:55:47.860 --> 00:55:49.730
kind of reading is the server doing.

00:55:49.970 --> 00:55:51.400
How often is it hitting the disk?

00:55:51.400 --> 00:55:57.280
Is it reading all over the place or
does it seem to be reading sequentially?

00:55:57.520 --> 00:55:59.680
How is the caching working in the server?

00:55:59.760 --> 00:56:01.840
And this is the file source debug.

00:56:01.930 --> 00:56:07.320
There might be some reason where you
are transferring the reads off to

00:56:07.560 --> 00:56:10.810
maybe a database or something like
that instead of the file system,

00:56:10.870 --> 00:56:15.260
and you want to see how the reads
are being handled in the server.

00:56:15.470 --> 00:56:19.290
So another debug option for you.

00:56:22.000 --> 00:56:27.920
So as I was talking about
the server and its protocols,

00:56:27.980 --> 00:56:33.940
I mentioned RTSP, RTP, SDP,
Session Description Protocol,

00:56:33.940 --> 00:56:38.160
and all of these have RFCs
available on the Internet.

00:56:38.160 --> 00:56:44.130
So if you want to take a look at the
protocol and find out more about what

00:56:44.480 --> 00:56:49.130
clients might be doing with the server,
what the server should be doing,

00:56:49.850 --> 00:56:55.940
or what you can do to change the
way the behavior of the server,

00:56:55.940 --> 00:56:58.770
you can take a look at
these RFCs up on the web.

00:56:58.780 --> 00:57:04.640
There's some other open source
projects that handle RTSP and RTP.

00:57:04.790 --> 00:57:10.250
One of them is the
MPEG-4 IP on SourceForge.

00:57:10.260 --> 00:57:16.920
So they have an open source client that
actually will play the audio and video,

00:57:17.780 --> 00:57:20.080
and it will work with
our streaming server.

00:57:20.080 --> 00:57:22.700
It's an open source client.

00:57:22.700 --> 00:57:26.770
In fact, they even have an encoder,
I believe, as well.

00:57:26.780 --> 00:57:29.120
So they're related.

00:57:56.770 --> 00:57:56.770
Streaming sources are resources that
you can find out there on the Internet.

00:57:56.770 --> 00:57:56.770
Live media is yet another one.

00:57:56.770 --> 00:57:56.770
These are open source.

00:57:56.770 --> 00:57:56.770
And we interoperate because
we have our standards base.

00:57:56.770 --> 00:57:56.770
So as you can see, there's RFCs.

00:57:56.770 --> 00:57:56.770
When it comes to Codex,
MPEG-4 is a standard that we believe

00:57:56.770 --> 00:57:56.770
strongly in and our server supports.

00:57:58.400 --> 00:58:03.620
So the programming for our
QuickTime Streaming Server is

00:58:03.740 --> 00:58:08.300
essentially just a matter of going
in there and getting the source code,

00:58:08.430 --> 00:58:12.500
looking at the modules,
finding out what we already are doing,

00:58:12.500 --> 00:58:15.650
thinking about what we want,
you want the server to be doing,

00:58:15.650 --> 00:58:20.770
and go ahead, change the code,
add your module, add your functionality,

00:58:20.770 --> 00:58:23.260
and now you have a new server.

00:58:23.260 --> 00:58:26.920
And we hope that we can
add more functionality to

00:58:26.920 --> 00:58:29.220
the server for you as well.

00:58:29.220 --> 00:58:35.220
But we have -- we're making progress.

00:58:35.220 --> 00:58:40.210
Each year there's new
features into the server,

00:58:40.210 --> 00:58:40.210
and we're working on that.

00:58:40.300 --> 00:59:03.900
[Transcript missing]

00:59:06.480 --> 00:59:13.480
So just as a side note,
you can see the big yellow ball there.

00:59:13.490 --> 00:59:17.120
The QuickTime feedback
forum has changed venues,

00:59:17.120 --> 00:59:21.460
so we will be moving to the
marina as soon as we finish

00:59:21.460 --> 00:59:24.310
with this conversation here.

00:59:24.530 --> 00:59:29.970
Since most of these
presentations already happened,

00:59:30.280 --> 00:59:34.100
I just want to remind you that
as attendees to the conference,

00:59:34.100 --> 00:59:38.740
you will be getting access
to the stream versions of the

00:59:38.820 --> 00:59:41.770
presentations in the next few weeks.

00:59:41.990 --> 00:59:46.880
So if you missed any of these or you want
to go back to see what was mentioned,

00:59:46.880 --> 00:59:49.760
something that you missed,
this will be the opportunity to do it.

00:59:49.790 --> 00:59:54.130
And you will also be receiving a
package of DVDs that contain all

00:59:54.130 --> 00:59:56.600
the sessions of the conference.

00:59:56.650 --> 01:00:04.720
So this is coming to you in a few weeks
more than the download streaming movies,

01:00:04.750 --> 01:00:08.470
which will be quite
opportune for this session.

01:00:08.620 --> 01:00:12.950
So if you have any other questions
or if you need some information,

01:00:13.070 --> 01:00:17.480
QuickTimeMan@Apple.com is the address
that you want to write any questions,

01:00:17.520 --> 01:00:19.760
and we'll try to route
them to the right people.

01:00:19.760 --> 01:00:21.260
people.

01:00:21.620 --> 01:00:23.710
Documentation.

01:00:23.820 --> 01:00:28.500
Apple QuickTime is the main page
for any information on QuickTime.

01:00:28.660 --> 01:00:34.500
Developers.apple.com documentation is
for general documentation on QuickTime.

01:00:34.500 --> 01:00:38.640
I don't think that we have
anything special for this session,

01:00:38.670 --> 01:00:41.640
but again,
as attendees to the conference,

01:00:41.640 --> 01:00:46.500
there is a number of downloads that
are available only to you right now.

01:00:46.520 --> 01:00:50.400
So you have to go to
the connect.apple.com,

01:00:50.400 --> 01:00:55.530
log in as a member of ADC,
and you will get the download

01:00:55.530 --> 01:00:59.500
under the WWDC 2003 menu.

01:01:01.010 --> 01:01:04.840
More information.

01:01:04.840 --> 01:01:07.530
There is a streaming server mailing list.

01:01:07.640 --> 01:01:11.000
If you want to have a conversation
with all your colleagues all over the

01:01:11.000 --> 01:01:16.990
world who are using the technology,
more information on what to get

01:01:17.080 --> 01:01:21.670
for the streaming server modules.

01:01:22.900 --> 01:01:24.800
We are getting to the
ending of the conference,

01:01:24.800 --> 01:01:30.630
but you still have a day to go
to the QuickTime lab downstairs.

01:01:30.630 --> 01:01:33.000
It's in the Sacramento room.

01:01:33.070 --> 01:01:36.690
And have an engineer in there
to answer your questions

01:01:36.690 --> 01:01:38.800
about QuickTime programming.