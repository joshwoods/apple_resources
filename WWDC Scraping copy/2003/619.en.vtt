WEBVTT

00:00:24.500 --> 00:00:30.180
Well, folks, it's a blisteringly hot
day in San Francisco.

00:00:30.180 --> 00:00:32.650
I'm glad you're all here,
because it's nice and air-conditioned.

00:00:32.710 --> 00:00:37.140
We're going to have a pretty
code-intensive session today.

00:00:37.140 --> 00:00:41.340
I've got a fair amount of slides,
but quite a bit of time

00:00:41.340 --> 00:00:43.610
at the demo machine,
showing you how to develop your

00:00:43.610 --> 00:00:48.040
applets and do some debugging
with Safari and the Java console.

00:00:48.040 --> 00:00:48.920
So let's get into it.

00:00:51.080 --> 00:00:53.320
So today we're going to talk
about the web-based deployment

00:00:53.380 --> 00:00:54.580
technologies on Mac OS X.

00:00:54.580 --> 00:00:59.090
If you saw session 608,
you saw a little bit about applications

00:00:59.370 --> 00:01:02.210
and deploying those on Mac OS X.

00:01:02.220 --> 00:01:05.480
We'll get into the features available
to you as an applet developer,

00:01:05.560 --> 00:01:08.460
some features available to
you as a Web Start developer.

00:01:08.460 --> 00:01:11.730
I have a pretty long session with
debugging tips for applets and some

00:01:11.910 --> 00:01:15.270
settings that you can use to help
you figure out what's going on.

00:01:16.240 --> 00:01:18.810
And finally, at the end,
we'll talk a little bit about helping

00:01:18.870 --> 00:01:21.890
you decide which is the right one
for your deployment situation.

00:01:25.180 --> 00:01:29.880
So here's a picture for deploying
a Java application on Mac OS X.

00:01:29.920 --> 00:01:33.820
On the left, you have this traditional
double-clickable application.

00:01:34.060 --> 00:01:37.320
Looks like any other
application on Mac OS X.

00:01:37.540 --> 00:01:39.590
In the center,
we have Web Start applications.

00:01:39.600 --> 00:01:43.670
And the reason we have sort of a
left turn going on here is that you

00:01:43.670 --> 00:01:46.710
can deploy a Web Start application
the traditional way,

00:01:46.820 --> 00:01:49.090
through a web browser with
a link to the JNOP file.

00:01:49.090 --> 00:01:52.370
You can also make a
double-clickable application

00:01:52.370 --> 00:01:54.620
out of that Web Start JNOP file.

00:01:55.510 --> 00:01:58.360
And you can ship that
around to your end users.

00:01:59.090 --> 00:02:01.950
Web Start is now smart enough
that it will look at that

00:02:02.020 --> 00:02:06.530
JNLP file in the double-clickable,
go out and update all the resources,

00:02:06.540 --> 00:02:11.560
and it will behave just as if you
clicked from the link in the web page.

00:02:11.560 --> 00:02:15.290
And finally,
we have applets through web browsers.

00:02:22.490 --> 00:02:23.950
For this session,
we're just going to focus on the

00:02:23.950 --> 00:02:25.340
right two-thirds of this diagram.

00:02:25.340 --> 00:02:28.460
We had a really good session
about developing applications.

00:02:28.460 --> 00:02:30.840
Today, we're going to talk about
your web alternatives.

00:02:32.660 --> 00:02:35.860
Specifically for applets,
this is sort of the landscape today.

00:02:35.860 --> 00:02:41.940
Anything that uses the old embedding
framework will get Java 1.3.1,

00:02:41.940 --> 00:02:43.680
and those are things
like Internet Explorer,

00:02:43.680 --> 00:02:46.440
Netscape, or anybody else who's adopted
the embedding framework.

00:02:47.490 --> 00:02:50.390
Currently,
if you are a Cocoa application,

00:02:50.390 --> 00:02:57.320
and right now that's primarily Safari,
but you would use the Java Cocoa plug-in,

00:02:57.320 --> 00:03:01.280
which uses the 1.4.1 VM and
the 1.4.1 applet viewer.

00:03:01.280 --> 00:03:03.810
And that distinction is
somewhat important if you've

00:03:03.810 --> 00:03:07.200
done development on Windows,
because you know the feature set between

00:03:07.200 --> 00:03:09.330
the two plug-ins is somewhat different.

00:03:14.100 --> 00:03:16.890
All right, to build an applet-- when
building applets on Mac OS X,

00:03:16.890 --> 00:03:21.000
some things you want to know and
keep in mind is that it's all built

00:03:21.000 --> 00:03:23.390
on the Java plug-in technology.

00:03:23.510 --> 00:03:28.040
The applet viewer with
Mac OS X is identical.

00:03:28.040 --> 00:03:33.160
It's feature-for-feature compatible
with what you get on Windows or Solaris.

00:03:33.160 --> 00:03:34.250
It's already been installed.

00:03:34.320 --> 00:03:36.760
There's no additional end user
install that needs to be done

00:03:36.760 --> 00:03:38.050
like you would on Windows.

00:03:38.190 --> 00:03:39.630
No getJava or anything like that.

00:03:39.710 --> 00:03:41.900
We've already done that for you.

00:03:42.290 --> 00:03:45.140
: If you're going to use
Safari or Applet Launcher,

00:03:45.270 --> 00:03:48.630
Applet Launcher is sort of a
development tool that we use that

00:03:48.630 --> 00:03:50.840
also uses this applet viewer.

00:03:50.840 --> 00:03:53.200
You'll get 1.4.1.0.1.

00:03:53.200 --> 00:03:58.080
I want to make that distinction
that we're currently at 1.4.1.0.1.

00:03:58.080 --> 00:04:04.400
1.3.1 is what you'll get
with Internet Explorer and

00:04:04.400 --> 00:04:04.400
Netscape and anything else
using the embedding framework.

00:04:06.140 --> 00:04:09.170
And another choice available to
you on Mac OS X is Java Web Start.

00:04:14.320 --> 00:04:17.330
You can deploy an applet
or an application,

00:04:17.330 --> 00:04:21.060
but Web Start is really
geared towards delivering a

00:04:21.180 --> 00:04:24.700
full application via the web.

00:04:24.700 --> 00:04:26.570
We support one-click
launching from the browser.

00:04:26.660 --> 00:04:31.200
Safari has already been configured to
look at the MIME type for a JNLP file and

00:04:31.270 --> 00:04:34.230
open up Web Start and do the right thing.

00:04:34.710 --> 00:04:38.880
It has the full dynamic updating
features of Java Web Start.

00:04:38.880 --> 00:04:41.260
So you put all of your
jars up on a server,

00:04:41.260 --> 00:04:45.040
and if you update those jar files,
Web Start will just go get them

00:04:45.040 --> 00:04:48.870
and always bring the latest
application down to your users.

00:05:04.940 --> 00:05:05.360
It has something I call,
it's platform neutral,

00:05:05.360 --> 00:05:05.650
but it's not platform ignorant.

00:05:05.650 --> 00:05:06.040
And by that,
I mean you can tailor the JNLP file

00:05:06.040 --> 00:05:06.370
to the platform that it's running on.

00:05:06.370 --> 00:05:06.750
We'll get an example of
that in a little bit.

00:05:06.750 --> 00:05:07.210
But basically, you can say, well,
if I'm on Mac OS X,

00:05:07.210 --> 00:05:07.490
I need these additional files.

00:05:07.490 --> 00:05:08.000
We'll talk about that
and how you do that.

00:05:09.300 --> 00:05:12.890
And the big thing about Web Start is it
lets you deliver a full application much

00:05:13.000 --> 00:05:14.890
more easily than you can in an applet.

00:05:16.380 --> 00:05:19.800
You can sign the application,
and it gets the application done.

00:05:20.060 --> 00:05:23.920
It gets full access to the user's desktop
just as a regular application to this.

00:05:25.100 --> 00:05:25.980
And the last thing to mention,

00:05:27.620 --> 00:05:32.160
Mac OS X, out of the box,
can serve a JNLP-based application.

00:05:32.160 --> 00:05:36.280
Now, if you're on Windows or
actually in Solaris,

00:05:36.280 --> 00:05:41.210
if you're using Apache, for example,
you know that you have to tell

00:05:41.210 --> 00:05:46.290
Apache that when it delivers a JNLP file,
you have to send out the

00:05:46.370 --> 00:05:47.860
right MIME type with it.

00:05:48.200 --> 00:05:49.470
We've already done that for you.

00:05:49.480 --> 00:05:52.840
We've already configured
Apache correctly,

00:05:52.840 --> 00:05:56.610
so there's no additional work
for you to do if you want

00:05:56.610 --> 00:06:01.120
to use Mac OS X or Server to
deliver a Web Start application.

00:06:05.460 --> 00:06:09.380
Right now, I want to show you an
example of some of these,

00:06:09.380 --> 00:06:11.860
I don't want to call them
more advanced applets,

00:06:11.900 --> 00:06:17.300
but more feature-rich applets
that are available to you.

00:06:17.990 --> 00:06:23.140
You've all seen an applet before,
so we're basically going to focus

00:06:23.140 --> 00:06:26.480
on some of the more interesting
ones as far as what's available.

00:06:28.160 --> 00:06:29.820
Let's go to demo one.

00:06:29.880 --> 00:06:35.450
So the first thing I want to
show you is Visual Thesaurus.

00:06:35.450 --> 00:06:35.450
And

00:06:35.910 --> 00:06:40.560
What's nice about this is it's got
some pretty spiffy graphics for moving

00:06:40.560 --> 00:06:43.680
through a web of information about words.

00:06:43.740 --> 00:06:48.290
It's sort of a visual dictionary,
if you will.

00:06:48.290 --> 00:06:52.500
So we'll start with
the word demonstration.

00:06:56.480 --> 00:07:00.060
And you can see it jumps to that word,
and now I can start clicking through

00:07:00.100 --> 00:07:08.300
here to other words and continue on
a web of following through the words.

00:07:11.500 --> 00:07:12.890
Okay, cool.

00:07:12.910 --> 00:07:18.040
So this is sort of a neat visual
applet that sort of highlights some

00:07:18.110 --> 00:07:23.310
of the graphics improvements we've
made in the latest release with the

00:07:23.310 --> 00:07:26.340
Java DP that was released on Friday.

00:07:26.340 --> 00:07:31.860
One other applet I want to show you,
this is games.com.

00:07:37.380 --> 00:07:42.940
Games.com is cool,
not for the only reason that it has

00:07:42.970 --> 00:07:48.170
really nice Parker Brother games
that I like to play personally,

00:07:48.170 --> 00:07:48.170
but...

00:07:48.720 --> 00:07:55.510
One of the new features in 1.4.1 is
that you're going to find that in 1.3.1,

00:07:55.510 --> 00:07:57.620
this applet would not work.

00:07:57.950 --> 00:08:01.280
That's because we're relying
on an older version of JSSE,

00:08:01.280 --> 00:08:02.900
Java Secure Socket Extension.

00:08:02.900 --> 00:08:07.140
A lot of those problems
have been fixed in 1.4.

00:08:07.140 --> 00:08:10.860
So if an applet now encounters
a certificate that it

00:08:10.860 --> 00:08:13.260
doesn't like in some way,
whether it's out of date or

00:08:13.260 --> 00:08:20.300
self-signed or something like that,
it will now ask the user if that's okay.

00:08:20.300 --> 00:08:26.000
And we'll just take a look
at a game in progress here.

00:08:29.430 --> 00:08:32.060
And the other impressive thing
about Clue and some of these other

00:08:32.060 --> 00:08:37.290
games is they're fairly complex,
and it's a great visual

00:08:37.320 --> 00:08:39.200
experience for the user.

00:08:39.200 --> 00:08:41.300
It's very responsive.

00:08:41.300 --> 00:08:46.540
And it's something you just
couldn't do with 1.3.1.

00:08:46.540 --> 00:08:47.700
Now we can do it with 1.4.

00:08:49.500 --> 00:09:19.400
[Transcript missing]

00:09:21.350 --> 00:09:24.160
So we won't find out who wins this game.

00:09:24.160 --> 00:09:28.590
But now,
let's move on to a Web Start application.

00:09:28.700 --> 00:09:51.100
[Transcript missing]

00:09:52.370 --> 00:09:56.680
And we've got, you know,
save and print and all the things that

00:09:56.680 --> 00:09:59.400
you would expect out of an application.

00:09:59.460 --> 00:10:02.690
And what I'm going to do is create
a very quick class diagram here.

00:10:02.700 --> 00:10:06.500
We'll use the canonical shape example.

00:10:06.500 --> 00:10:09.000
And we'll expand this a bit.

00:10:10.800 --> 00:10:15.300
Let's start with the shape class.

00:10:15.300 --> 00:10:18.180
Subclass it.

00:10:18.180 --> 00:10:20.140
Make a circle.

00:10:26.000 --> 00:10:37.500
[Transcript missing]

00:10:41.730 --> 00:10:42.520
There you go.

00:10:42.590 --> 00:10:44.960
This is a Mac OS X application.

00:10:44.960 --> 00:10:50.190
It's...and it's delivered
with Java Web Start.

00:10:50.380 --> 00:10:53.220
So whenever they make
updates to Poseidon,

00:10:53.220 --> 00:10:55.500
all I got to do is
just start it up again,

00:10:55.500 --> 00:10:56.440
and I'll get the latest version.

00:10:56.440 --> 00:10:59.100
Okay.

00:10:59.100 --> 00:11:01.680
Let's go back to slides.

00:11:07.000 --> 00:11:10.820
Let's get into a little bit more
detail about how applets and

00:11:10.820 --> 00:11:12.520
developing applets on Mac OS X.

00:11:12.520 --> 00:11:17.230
Everything I'm going to talk to you about
in these next few slides is documented

00:11:17.230 --> 00:11:18.910
at the URL you see here on the screen.

00:11:18.920 --> 00:11:21.160
If you don't get it
written down right now,

00:11:21.180 --> 00:11:22.060
that's okay.

00:11:22.060 --> 00:11:23.250
I'll show it to you at the end.

00:11:23.260 --> 00:11:26.600
But the message here is that
everything you see in that

00:11:26.600 --> 00:11:29.030
documentation will work on Mac OS X.

00:11:29.040 --> 00:11:32.360
It all ported over fairly
cleanly from Windows.

00:11:33.360 --> 00:11:35.950
What we're going to do is we're going
to focus on the areas where we've

00:11:35.950 --> 00:11:38.300
made improvements for you in Mac OS X.

00:11:39.900 --> 00:11:53.700
[Transcript missing]

00:11:54.900 --> 00:11:57.100
In particular,
the first thing you want to think

00:11:57.100 --> 00:12:00.480
about in an applet is your HTML.

00:12:00.800 --> 00:12:04.140
A common question we get is,
how should you write your web page?

00:12:04.140 --> 00:12:08.160
You can use an applet tag, object tag,
embed tag.

00:12:08.170 --> 00:12:13.040
We would like you to use the applet
tag if you haven't done so already.

00:12:13.040 --> 00:12:16.460
Applet is going to give
you the most compatibility

00:12:16.460 --> 00:12:21.580
across platforms with Safari,
Internet Explorer, or on Windows XP.

00:12:22.000 --> 00:12:26.180
The sun is really pushing people
to use applet tags on Windows.

00:12:26.180 --> 00:12:30.500
And for the most amount of
cross-platform compatibility,

00:12:30.500 --> 00:12:31.430
that's the way to go.

00:12:32.480 --> 00:12:35.420
Another thing to think about...

00:12:37.430 --> 00:12:41.920
You should never assume a Java VM version
based on the browser that you've got,

00:12:41.970 --> 00:12:45.220
that you detect with JavaScript.

00:12:45.290 --> 00:12:49.030
So just because a user's running Safari,
don't automatically assume

00:12:49.030 --> 00:12:50.180
they're running 1.4.

00:12:50.180 --> 00:12:52.620
Just because they're
running Internet Explorer,

00:12:52.620 --> 00:12:54.420
don't automatically assume 1.3.

00:12:54.420 --> 00:12:58.140
That will probably,
it will definitely change in the future,

00:12:58.140 --> 00:13:00.800
and if you're making
assumptions in your HTML,

00:13:00.800 --> 00:13:01.950
you're in for a lot of trouble.

00:13:02.530 --> 00:13:05.580
The best way to determine what you're
running is when the applet starts up is

00:13:05.580 --> 00:13:11.710
to look at the java.version property,
java.specification.version, and os.name.

00:13:11.740 --> 00:13:15.000
These three will help you determine
exactly what you're running.

00:13:16.960 --> 00:13:22.880
Now, Java.version will give you the full
1.4.1.0.1 with possibly a build after it,

00:13:22.980 --> 00:13:26.360
but Java.specification.version
will give you the short,

00:13:26.810 --> 00:13:29.560
you know, what Java platform are you on.

00:13:29.710 --> 00:13:34.460
So in this case, for example, in Safari,
if you did this, you would get 1.4.

00:13:34.480 --> 00:13:37.620
And that's it, just the string 1.4.

00:13:44.080 --> 00:13:49.000
Another thing we often see
is setting proxy settings.

00:13:49.120 --> 00:13:51.720
On Windows and Solaris in particular,
this is a big deal.

00:13:51.720 --> 00:13:54.240
I think it's because Sun uses
a firewall internally,

00:13:54.240 --> 00:13:59.030
so they need to get their proxy set up
so they can get out of the firewall.

00:13:59.540 --> 00:14:02.140
On Mac OS X,
there is one place to set proxy settings.

00:14:02.140 --> 00:14:05.300
That is in the network pane
of the system preferences.

00:14:05.300 --> 00:14:12.160
If you've got additional proxy settings
for your particular deployment situation,

00:14:12.160 --> 00:14:18.880
create a new location in the network
panel and set up your proxies that way.

00:14:18.900 --> 00:14:22.150
You can get at those proxy
settings by looking at standard

00:14:22.150 --> 00:14:23.860
properties in your applet.

00:14:25.000 --> 00:14:31.830
If you've got additional proxy settings
for your particular deployment situation,

00:14:31.830 --> 00:14:35.080
create a new location in your applet.

00:14:35.630 --> 00:14:39.070
If we don't have a tech note or a Q&A,
we should probably document

00:14:39.140 --> 00:14:42.850
the mapping of those things,
but everything you see in that network

00:14:43.170 --> 00:14:47.280
panel has a corresponding Java property,
and we'll get that information for

00:14:47.280 --> 00:14:50.700
you and make it available to your
applet or application if necessary.

00:14:55.080 --> 00:14:59.420
HTTPS is one of those areas
that's really improved in 1.4.

00:14:59.420 --> 00:15:01.440
It's all built into the plug-in.

00:15:01.440 --> 00:15:04.880
There's nothing for you to do,
and now in 1.4, there's nothing for you

00:15:04.880 --> 00:15:06.220
to do in your code either.

00:15:06.220 --> 00:15:09.110
All you need to do is make a
URL with an HTTPS scheme and

00:15:09.140 --> 00:15:12.760
just open a connection to it,
and we'll take it from there.

00:15:13.380 --> 00:15:15.790
It's all based on the
Java Secure Socket extension,

00:15:15.790 --> 00:15:18.000
which is now a standard part of 1.4.

00:15:18.000 --> 00:15:20.310
In 1.3,
it was an extra add-on that didn't

00:15:20.310 --> 00:15:23.320
really fit in with the plug-in,
but it mostly did the job.

00:15:23.390 --> 00:15:25.880
But now in 1.4,
it's all integrated and works very well.

00:15:27.720 --> 00:15:31.090
One difference from Windows is
that the root certificate store,

00:15:31.170 --> 00:15:34.310
by default, comes out of the keychain.

00:15:34.660 --> 00:15:41.370
Matt Kostin has a number of,
I believe it's on the order of two

00:15:41.370 --> 00:15:44.020
dozen popular root certificates.

00:15:44.020 --> 00:15:48.480
And we can match a certificate
that you generate against that list

00:15:48.480 --> 00:15:50.660
based on what's in the certificate.

00:15:50.660 --> 00:15:54.970
And sort of tying into that,
if the user now decides that

00:15:55.000 --> 00:15:59.720
they want to always trust the
certificate in your applet,

00:15:59.890 --> 00:16:01.540
we'll add it to the keychain.

00:16:03.830 --> 00:16:06.520
And that gives the added benefit
of letting people use the Keychain

00:16:06.520 --> 00:16:11.490
Access application now to take a
look at all their certificates,

00:16:11.550 --> 00:16:14.420
delete them,
or do what they need to do with them.

00:16:14.460 --> 00:16:17.030
It's not a common thing to do,
but as you'll see,

00:16:17.100 --> 00:16:19.130
it's better than the alternative.

00:16:21.260 --> 00:16:26.980
and the alternative is something
called the Java Key Store.

00:16:27.170 --> 00:16:33.880
This is sort of Sun's cross-platform
solution to storing certificates.

00:16:34.140 --> 00:16:36.380
Normally, by default,
that key store is in

00:16:36.380 --> 00:16:40.260
/library/java/home/lib/security
and buried down where a

00:16:40.260 --> 00:16:42.230
user wouldn't normally find it.

00:16:42.240 --> 00:16:47.050
It would have to go in a terminal
to start doing things with it.

00:16:47.530 --> 00:16:52.410
So as a result, you know,
we've tried to start moving away from

00:16:52.410 --> 00:16:54.500
that and stick to keychain access.

00:16:54.500 --> 00:16:57.080
Now, currently, there is a bug.

00:16:57.100 --> 00:16:59.170
Actually,
it's a bug generated from Sun where

00:16:59.170 --> 00:17:02.780
a self-signed certificate can't
be stored in the keychain.

00:17:02.780 --> 00:17:06.290
That's not entirely true
because I found situations where

00:17:06.290 --> 00:17:08.220
that's not exactly the case.

00:17:08.220 --> 00:17:10.380
But for, you know,
for the sake of your development,

00:17:10.380 --> 00:17:12.120
let's assume that it's not going to work.

00:17:12.640 --> 00:17:15.820
If that's a problem for you,
we have a Java property,

00:17:15.910 --> 00:17:19.010
com.apple.security.useJavaKeyStore.

00:17:20.390 --> 00:17:23.150
If you set that to true,
we will look in that Java key

00:17:23.300 --> 00:17:28.720
store for the root certificates,
and if the user decides to always trust,

00:17:28.720 --> 00:17:33.830
that certificate will get stored in
that Java location for certificates

00:17:34.020 --> 00:17:36.130
as opposed to the key chain.

00:17:37.900 --> 00:17:41.640
Now, as I mentioned,
if the user wants to do anything

00:17:41.640 --> 00:17:44.850
with their key store when
you're using this property,

00:17:44.870 --> 00:17:48.780
they have to go in a terminal and
use a key tool and start looking at,

00:17:48.780 --> 00:17:51.620
you know,
looking with things in the terminal,

00:17:51.670 --> 00:17:55.260
and that's really not something
we want end users to do.

00:17:55.260 --> 00:17:57.320
So that's why it gets a big red X.

00:17:57.320 --> 00:17:58.940
Use that key store as a last resort.

00:18:01.200 --> 00:18:06.340
Most of what I said for HTTPS connections
is true for a sign jar as well.

00:18:06.640 --> 00:18:08.630
You get full-signed applet support.

00:18:08.680 --> 00:18:11.700
It supports Netscape-style
or IE-style signing.

00:18:11.700 --> 00:18:15.530
You can sign it once,
and it'll work everywhere.

00:18:15.530 --> 00:18:20.420
If you sign something to work
with a 1.x version of Java that

00:18:20.440 --> 00:18:25.400
comes with Internet Explorer,
for example, or Netscape.

00:18:25.580 --> 00:18:28.170
Of course,
now that the Java plug-in is pretty

00:18:28.170 --> 00:18:31.540
much becoming somewhat ubiquitous,
this is less of a problem.

00:18:31.740 --> 00:18:34.500
But keep in mind that if
you sign something for 1.0,

00:18:34.500 --> 00:18:36.600
it will continue to work in 1.4.

00:18:36.600 --> 00:18:40.400
I'm sorry, for 1.1,
it will continue to work in 1.4.

00:18:42.330 --> 00:18:45.420
And once again, if the user wants to
always trust that jar file,

00:18:45.420 --> 00:18:48.060
the signature on that file,
it will go in the keychain.

00:18:48.060 --> 00:18:55.750
And just like HTTPS, the same properties,
if you will, apply to using that

00:18:55.750 --> 00:18:58.510
keystore if necessary.

00:18:59.100 --> 00:19:04.800
[Transcript missing]

00:19:06.500 --> 00:19:09.700
For your deployment,
try not to use a self-signed certificate.

00:19:09.700 --> 00:19:15.610
Use that key store as a last resort.

00:19:18.570 --> 00:19:19.650
Okay.

00:19:20.100 --> 00:19:23.590
One thing that's new in 1.4,
and is actually greatly

00:19:23.590 --> 00:19:26.300
improved in 1.4--over 1.3,

00:19:28.080 --> 00:19:30.030
is applet caching.

00:19:30.320 --> 00:19:33.270
And in 1.3, basically,
applets were cached on

00:19:33.270 --> 00:19:36.000
demand when you were,
I'm sorry, not so much on demand,

00:19:36.000 --> 00:19:38.800
but when indicated in the HTML file.

00:19:40.510 --> 00:19:42.990
In 1.4.1,
every remote applet and every remote

00:19:43.050 --> 00:19:46.990
resource gets cached automatically.

00:19:47.290 --> 00:19:56.410
will be joining us in a few minutes.

00:19:56.410 --> 00:19:56.410
Scott Kovatch will be
joining us in a few minutes.

00:19:56.560 --> 00:20:00.680
I made a slight comment here about larger
applets seeing the most improvement.

00:20:00.680 --> 00:20:04.550
That's because if you have
a number of small files,

00:20:04.800 --> 00:20:09.850
the overhead of checking to see if
things are up to date may negate all the

00:20:10.380 --> 00:20:13.390
benefits of keeping everything locally.

00:20:28.110 --> 00:20:28.110
I made a slight comment here about larger
applets seeing the most improvement.

00:20:28.110 --> 00:20:28.110
That's because if you have
a number of small files,

00:20:28.110 --> 00:20:28.110
the overhead of checking to see if
things are up to date may negate all the

00:20:28.110 --> 00:20:28.110
benefits of keeping everything locally.

00:20:29.600 --> 00:20:31.500
All right,
what we're showing up here is an example

00:20:31.500 --> 00:20:34.590
of what you would put in your applet tag.

00:20:34.650 --> 00:20:38.200
I've left out the rest of the applet
tag and only have the relevant

00:20:38.200 --> 00:20:40.150
parts for applet caching here.

00:20:40.160 --> 00:20:43.180
And what you're seeing here is, I guess,
what I would like to call

00:20:43.210 --> 00:20:46.880
1.3-style applet caching,
because it works in 1.3 and 1.4.

00:20:46.880 --> 00:20:51.010
But what you have is, first of all,
the first parameter is

00:20:51.210 --> 00:20:54.470
called cache archive,
and what you list there is

00:20:54.470 --> 00:20:58.530
all the jar files that you
want cached for your applet.

00:20:59.360 --> 00:21:01.280
So you just string them out
in a comma-separated list.

00:21:01.330 --> 00:21:05.200
And what goes along with that is
something called cache version.

00:21:05.200 --> 00:21:10.070
And as you can see,
the format is a dotted

00:21:10.590 --> 00:21:17.830
hexadecimal four-part number,
so it looks something like an IP address.

00:21:17.840 --> 00:21:22.620
But you have to have one of these
for each entry in the cache archive.

00:21:22.620 --> 00:21:25.540
So in this case,
we have three jars we want to cache,

00:21:25.540 --> 00:21:29.060
and so we have three versions
that match up with each other.

00:21:29.060 --> 00:21:32.920
with each one of those jars.

00:21:33.090 --> 00:21:37.470
and the way this works is that
the Apple viewer will look at

00:21:37.600 --> 00:21:40.970
each version and it will look
at what it's already got cached.

00:21:41.120 --> 00:21:46.370
So if it sees in the cache, well,
I already have 1.2.0.1 of a.jar, well,

00:21:46.370 --> 00:21:47.890
I don't need to update or do anything.

00:21:49.800 --> 00:21:57.800
[Transcript missing]

00:21:58.830 --> 00:22:05.290
The reason this speeds things up
at load time is that by default,

00:22:05.440 --> 00:22:10.030
The default mechanism for checking if
things are up to date is to look at the

00:22:10.030 --> 00:22:12.950
last modified date on a jar and the size.

00:22:12.960 --> 00:22:16.950
So the Apple viewer will send
an if-modified since up to your

00:22:17.040 --> 00:22:20.950
server to find out if that jar
file is newer than what it's got.

00:22:22.100 --> 00:22:33.700
[Transcript missing]

00:22:38.790 --> 00:22:44.200
Okay, and now the new 1.4 way is
something called Cache Archive EX,

00:22:44.200 --> 00:22:48.000
and we have some additional things
that you can specify in the HTML.

00:22:48.090 --> 00:22:51.040
Okay,
what's different now is that the jar

00:22:51.040 --> 00:22:54.490
file name and the version are all
put together in the same tag now.

00:22:54.490 --> 00:22:58.850
So you have the jar file name, semicolon,
something optionally called preload,

00:22:58.850 --> 00:23:00.200
and then the version.

00:23:00.200 --> 00:23:03.460
And if you get preload,
that means everything is loaded up

00:23:03.460 --> 00:23:05.820
front when the jar file is downloaded.

00:23:05.840 --> 00:23:10.320
So if you, for example,
want to stick a jar full

00:23:10.320 --> 00:23:14.270
of images in your applet,
you could stick them

00:23:14.270 --> 00:23:16.230
all in that jar file,
and they get loaded and

00:23:16.270 --> 00:23:17.830
turned into images right away.

00:23:17.940 --> 00:23:21.070
So you take a little bit of hit up front,
but you take less of a hit while

00:23:21.080 --> 00:23:22.630
the user is running the applet.

00:23:22.830 --> 00:23:27.920
So the perception will be that
things are somewhat faster.

00:23:28.840 --> 00:23:34.170
So there's an example of how
you can use that down below.

00:23:34.760 --> 00:23:39.590
And in this particular example,
the way I've set it up,

00:23:39.590 --> 00:23:44.630
applet.jar always uses the default
mechanism for seeing if it's up-to-date,

00:23:44.650 --> 00:23:45.770
and it gets preloaded.

00:23:45.860 --> 00:23:49.870
util.jar gets preloaded,
and it has a version on the end of it.

00:23:49.970 --> 00:23:55.190
tools.jar gets loaded on demand
and has a version at the end of it.

00:24:02.640 --> 00:24:07.870
So that's some things about the
HTML and some other things that

00:24:07.870 --> 00:24:10.140
you can set up for your applet.

00:24:10.140 --> 00:24:14.820
Let's talk a little bit about the
debugging tools available to you.

00:24:15.330 --> 00:24:18.400
As a developer,
you're probably going to be

00:24:18.400 --> 00:24:21.910
using the Java plug-in settings
application quite a bit.

00:24:22.110 --> 00:24:24.740
We keep it in Applications
Utilities Java,

00:24:24.740 --> 00:24:28.620
and there's two versions in there,
one for 1.3 and one for 4.

00:24:28.780 --> 00:24:32.010
Pay attention and pick the right one for
the VM that you're going to be targeting.

00:24:35.430 --> 00:24:38.380
I'll give you a demonstration
of how you go about using this

00:24:38.380 --> 00:24:39.560
later on in a few minutes.

00:24:39.560 --> 00:24:44.180
But that's where it's found,
and we'll talk about it shortly.

00:24:44.180 --> 00:24:47.870
And one of the things you control
with that is the Java console.

00:24:49.280 --> 00:24:55.160
The Java console is where you'll
find all the system.out and

00:24:55.170 --> 00:24:57.650
system.error if it's turned on,
if your applet generates

00:24:57.710 --> 00:24:58.690
any messages like that.

00:24:59.120 --> 00:25:02.990
Exceptions, stack crawls,
things like that will all go here.

00:25:03.380 --> 00:25:06.490
It's got additional logging and
tracing mechanisms that are very

00:25:06.490 --> 00:25:14.210
useful to help you keep an eye on
the loading activity for your applet.

00:25:14.470 --> 00:25:15.990
You can get thread stacks.

00:25:16.060 --> 00:25:18.320
If your applet's hung,
you can go over to the

00:25:18.360 --> 00:25:21.400
console and find out where the
deadlocks are in your applet.

00:25:21.420 --> 00:25:24.900
It's got something called
class loader cache control,

00:25:24.900 --> 00:25:29.470
which is important for when you're
doing iterative development.

00:25:29.480 --> 00:25:32.290
We'll talk about why you need to
know about that and why you need

00:25:32.300 --> 00:25:34.010
to clear it out every now and then.

00:25:38.030 --> 00:25:40.200
Let's go to the demo machine again.

00:25:40.200 --> 00:25:44.070
And now I'm going to spend some
time actually developing an applet.

00:25:46.520 --> 00:25:53.880
: And show you some of the
techniques that you can use

00:25:53.880 --> 00:25:53.880
for doing some debugging.

00:25:55.270 --> 00:25:57.960
All right,
so the first thing I'm going to do,

00:25:58.050 --> 00:26:00.950
I'm going to start with
the Java plug-in settings.

00:26:01.310 --> 00:26:07.060
This first tab has the
controls for the Java console.

00:26:07.060 --> 00:26:10.780
Right now,
we only support either making it

00:26:10.780 --> 00:26:12.140
visible or not making it visible.

00:26:12.140 --> 00:26:14.730
On Windows,
you can hide it in the toolbar

00:26:14.730 --> 00:26:16.790
so that it comes up minimized.

00:26:16.790 --> 00:26:19.160
We don't have a good mechanism
for doing that on 10,

00:26:19.160 --> 00:26:21.930
so right now we only
have show or don't show,

00:26:21.930 --> 00:26:22.840
basically.

00:26:23.680 --> 00:26:26.040
So for this example,
I'm going to show it,

00:26:26.040 --> 00:26:29.260
and the console only comes
on when an applet is loaded.

00:26:29.260 --> 00:26:31.570
So if Safari launches up,
you will automatically

00:26:31.570 --> 00:26:32.600
get a Java console.

00:26:35.680 --> 00:26:39.710
And we can turn this on to pop
up an alert when an exception

00:26:39.710 --> 00:26:41.800
happens during loading.

00:26:44.900 --> 00:26:48.060
I'm going to turn it on
for our examples here.

00:26:48.120 --> 00:26:50.450
Click Apply.

00:26:50.650 --> 00:26:53.210
Now I'm going to go over here to Xcode.

00:26:53.720 --> 00:26:56.590
And for the purposes
of this demonstration,

00:26:56.590 --> 00:27:04.060
I made a very simple applet that's
going to paint out a system property.

00:27:05.000 --> 00:27:22.600
[Transcript missing]

00:27:25.000 --> 00:27:28.430
As part of building this,
I want to point out one

00:27:28.430 --> 00:27:30.780
of the nice things about

00:27:32.710 --> 00:27:39.080
about Xcode is that I can set Xcode
up to automatically sign my JAR file.

00:27:39.080 --> 00:27:43.380
You have to sign the JAR file for this
applet in order to get this to work.

00:27:43.410 --> 00:27:48.290
And so I've added a shell script phase
where I'm just gonna run JAR signer

00:27:48.320 --> 00:27:57.230
and I've already got a key start with a
self-signed certificate in it on my disk.

00:27:57.380 --> 00:28:03.800
So we're gonna build the applet and it's
going to automatically sign it for me.

00:28:08.400 --> 00:28:10.940
So we're going to build it.

00:28:10.940 --> 00:28:11.990
And that is that.

00:28:12.250 --> 00:28:15.690
It's pretty-- not much to do here.

00:28:19.900 --> 00:28:21.760
Alright, so there's my console.

00:28:21.810 --> 00:28:23.660
Okay, now here's my security alert.

00:28:23.660 --> 00:28:28.020
It says,
"Do you want to trust this applet?"

00:28:28.600 --> 00:28:41.600
[Transcript missing]

00:28:42.220 --> 00:28:46.200
The message I'm trying to give
you here is that a self-signed

00:28:46.910 --> 00:28:49.420
certificate is inherently unsafe.

00:28:49.490 --> 00:28:52.590
I, in here, said I'm with Apple Computer.

00:28:52.970 --> 00:28:56.910
Well, I am, but I could easily
have said I'm with Sun.

00:28:56.920 --> 00:28:59.230
Or I could easily have said
I'm from the government.

00:29:16.710 --> 00:29:19.490
So, we're just going to say yes,
and there's our property.

00:29:19.490 --> 00:29:20.960
All right.

00:29:24.500 --> 00:29:32.170
So I'm going to bring
up the console here,

00:29:32.170 --> 00:29:32.170
show you a few things that you can do.

00:29:33.040 --> 00:29:34.560
Let's see.

00:29:34.590 --> 00:29:36.060
All right,
one of the first things I'm going

00:29:36.060 --> 00:29:39.140
to show you is-- I'm going to hit S.

00:29:39.720 --> 00:29:42.700
And here's a list of all
the system properties.

00:29:42.760 --> 00:29:45.300
Now, because this is a signed applet,
we're allowed to read every

00:29:45.300 --> 00:29:46.830
property available in the system.

00:29:46.830 --> 00:29:49.400
I'm sorry, available in the VM.

00:29:49.400 --> 00:29:54.490
So we've got a number of these, you know,
sun.boot.class.path, things like that,

00:29:54.530 --> 00:29:57.380
that you wouldn't normally
get from an applet.

00:30:01.340 --> 00:30:03.190
Click H to get the help again.

00:30:03.190 --> 00:30:07.120
Another thing is a list of
all the threads that have

00:30:07.170 --> 00:30:11.100
been created by this applet.

00:30:11.150 --> 00:30:15.080
We have a thread group
for your applet down here.

00:30:15.430 --> 00:30:20.300
Here's my applets main thread
and the event queue for it.

00:30:20.300 --> 00:30:23.000
So you can take a look at those.

00:30:23.000 --> 00:30:29.420
And 1.1.4 is the ability to dump
out all of the thread stacks.

00:30:30.850 --> 00:30:36.520
And as you can see,
the deepest stack is the one

00:30:36.520 --> 00:30:39.160
that responded to the keystroke
for the dump all stacks.

00:30:39.220 --> 00:30:42.000
That's usually going to be the case.

00:30:42.000 --> 00:30:47.270
In fact, you'll probably always find this
particular stack when you're looking

00:30:47.270 --> 00:30:49.450
at the stacks for your applet.

00:30:57.350 --> 00:31:00.690
All right,
so let's go back here and to Xcode,

00:31:00.690 --> 00:31:04.060
and let's make a very
small change to the applet.

00:31:04.060 --> 00:31:13.170
I'll just say "Home dir,"
and I want to build it.

00:31:19.000 --> 00:31:20.000
All done there.

00:31:20.000 --> 00:31:23.000
Okay,
so I'm going to go back here and refresh.

00:31:23.000 --> 00:31:26.130
And look, gee, nothing happened.

00:31:26.130 --> 00:31:28.100
That must be a bug, right?

00:31:28.100 --> 00:31:28.450
No.

00:31:28.870 --> 00:31:30.580
This is not a bug.

00:31:31.350 --> 00:31:33.580
The reason is something
called a class loader cache.

00:31:33.580 --> 00:31:39.440
And what the plug-in does
is it caches class loaders.

00:31:39.570 --> 00:31:40.760
Say that ten times fast.

00:31:40.760 --> 00:31:43.820
You'll just spin your head
around for three minutes.

00:31:43.880 --> 00:31:50.210
What it does is that it caches class
loaders so that if you go back to a page,

00:31:50.410 --> 00:31:52.570
it speeds up the load of the page again.

00:31:52.620 --> 00:31:57.150
Because starting up an applet
is an expensive operation.

00:31:58.400 --> 00:32:00.660
Now, if you're doing iterative
development like this,

00:32:00.660 --> 00:32:02.170
that's going to be somewhat of a pain.

00:32:02.180 --> 00:32:05.680
So the console gives you
the ability to hit X,

00:32:05.680 --> 00:32:08.120
and it clears out the class loader cache.

00:32:09.400 --> 00:32:28.200
[Transcript missing]

00:33:01.610 --> 00:33:05.380
Just to show you, if you've done some,
we'll reload this applet.

00:33:05.380 --> 00:33:12.600
Let's see here,
I have two Safaris running.

00:33:20.420 --> 00:33:23.690
Oh, empty the trash.

00:33:23.840 --> 00:33:24.700
Oh, well, okay.

00:33:24.700 --> 00:33:29.260
All right, let's move on.

00:33:29.290 --> 00:33:32.630
All right, let's go back to the
Java plug-in settings here.

00:33:35.060 --> 00:33:40.020
Over here on the Advanced tab,
we have a little box called

00:33:40.110 --> 00:33:43.950
Java Runtime Parameters.

00:33:44.200 --> 00:33:48.290
This is a place where you would
set properties that can go into,

00:33:48.440 --> 00:33:51.070
that the app will pick up.

00:33:51.240 --> 00:33:56.270
You can actually set a number
of the properties that you saw

00:33:56.270 --> 00:34:01.120
in the session on applications,
things like anti-aliasing

00:34:01.120 --> 00:34:02.660
and things like that.

00:34:02.740 --> 00:34:07.400
But for the purposes of this discussion,
one of the more interesting

00:34:07.410 --> 00:34:11.500
things that you can set is
security-related properties.

00:34:14.620 --> 00:34:17.540
So I'm going to define,
just to show you some of the

00:34:17.540 --> 00:34:20.010
security properties available,
I'm going to do

00:34:20.100 --> 00:34:25.790
java.security.debug equals help.

00:34:28.170 --> 00:34:31.820
and here you can see everything,
all the properties available to help you

00:34:31.820 --> 00:34:35.990
figure out what's going on with your jar
files when you're loading up an applet.

00:34:36.000 --> 00:34:40.440
This is really useful when
developing a signed applet because,

00:34:40.440 --> 00:34:43.040
as you'll see,
it'll dump out a ton of information

00:34:43.040 --> 00:34:45.780
to the console about what it's
doing while it's looking at your jar

00:34:45.780 --> 00:34:47.360
file or looking at authentication.

00:34:47.360 --> 00:34:51.900
Another common use for
this is with the policy.

00:34:51.900 --> 00:34:56.380
I won't show it in this demonstration,
but the combination of access and policy.

00:34:57.450 --> 00:35:00.480
Say you're developing an applet
and you're doing something that

00:35:00.480 --> 00:35:04.390
generates a security exception
and you can't figure out why.

00:35:04.400 --> 00:35:09.600
If you set this particular property,
java.security.debug equals access,

00:35:09.600 --> 00:35:13.200
it will show all of the permission
checks that it's doing and log

00:35:13.200 --> 00:35:16.330
them out to the console and help
you figure out what's going on.

00:35:19.420 --> 00:35:22.060
All right.

00:35:22.060 --> 00:35:23.660
So that's it for that.

00:35:23.660 --> 00:35:33.600
So I'm going to show -- here I'm
going to put java.security.debug=jar.

00:35:37.150 --> 00:35:47.720
I can see I've got a whole pile of
information about how it's taking a

00:35:47.720 --> 00:35:51.180
look at all the entries in my manifest.

00:35:51.180 --> 00:35:53.290
Here's my certificate.

00:35:53.600 --> 00:35:54.900
is looking at the public key.

00:35:54.900 --> 00:35:57.980
Just a ton of information that
will help you figure out what's

00:35:57.980 --> 00:35:59.160
going on if something goes wrong.

00:36:04.800 --> 00:36:12.600
[Transcript missing]

00:36:13.230 --> 00:36:16.420
Okay, let's quit Safari one more time,
and let's go back here to

00:36:16.420 --> 00:36:19.150
the plug-in panel again.

00:36:19.560 --> 00:36:22.600
Over here is the cache control panel.

00:36:22.600 --> 00:36:30.630
For an end user,
the reason they would use this,

00:36:31.570 --> 00:36:34.210
If you run a lot of applets
in your day-to-day work,

00:36:34.440 --> 00:36:38.180
for example,
a common situation is Oracle.

00:36:38.180 --> 00:36:42.180
Oracle delivers a ton of their
functionality via applets.

00:36:42.180 --> 00:36:46.870
What you can do is you can go over
here and set the jar compression level.

00:36:46.880 --> 00:36:50.960
Now, if the jar that you deliver
is already compressed,

00:36:50.960 --> 00:36:52.440
this won't be much of a savings.

00:36:52.460 --> 00:36:55.960
But what this will do is,
since these are all zip files,

00:36:55.960 --> 00:36:59.940
when it writes them out
to disk in the cache,

00:37:00.060 --> 00:37:02.850
will compress them even further.

00:37:04.690 --> 00:37:06.330
We'll take a look at the cache.

00:37:06.330 --> 00:37:10.220
And we'll see here's games.com
and Visual Thesaurus in the cache.

00:37:10.220 --> 00:37:14.450
As I mentioned before, you know,
we didn't have to do anything.

00:37:14.530 --> 00:37:17.830
All this stuff got cached
for us automatically.

00:37:17.930 --> 00:37:21.680
Now, one thing you'll notice is
that in this demonstration,

00:37:21.730 --> 00:37:26.270
I've been building a jar file and,
you know, running it through Safari.

00:37:26.430 --> 00:37:28.530
So you may ask, well, where is it?

00:37:28.570 --> 00:37:31.720
Well, it's not cached because
its scheme is file.

00:37:31.720 --> 00:37:34.450
A file-based applet won't be cached.

00:37:34.600 --> 00:37:35.700
Thank you.

00:37:36.250 --> 00:37:39.180
Okay, now this is completely separate
from the Safari cache or

00:37:39.180 --> 00:37:40.560
the Internet Explorer cache.

00:37:40.560 --> 00:37:42.240
It has nothing to do with any of those.

00:37:42.240 --> 00:37:47.030
So I can go in here and delete
individual entries out of here,

00:37:47.080 --> 00:37:49.060
for example.

00:37:49.060 --> 00:37:55.450
And Safari's cache will
not be touched at all.

00:37:57.040 --> 00:38:01.190
And I can clear out the entire cache.

00:38:01.190 --> 00:38:02.750
You know, just like that.

00:38:05.660 --> 00:38:10.930
I'm going to show you very
quickly the certificates tab.

00:38:11.640 --> 00:38:16.200
This tab only gets used when
you've set the property that

00:38:16.200 --> 00:38:17.560
uses the Java key store.

00:38:17.560 --> 00:38:21.320
So if the user would then, you know...

00:38:22.580 --> 00:38:28.950
I haven't trusted any sites and
stored them in the keychain yet.

00:38:28.950 --> 00:38:30.320
That's why these panels are empty.

00:38:30.320 --> 00:38:33.670
But if I did,
I would see them in this panel,

00:38:33.670 --> 00:38:35.490
not in the keychain.

00:38:35.780 --> 00:38:37.780
So if you don't want to use a
keychain for whatever reason,

00:38:37.780 --> 00:38:41.390
you would come over here to the plug-in
settings and look at it that way.

00:38:43.630 --> 00:38:45.120
Okay.

00:38:45.710 --> 00:38:50.890
Now the last thing I want to
show you is using the keychain.

00:38:54.160 --> 00:38:57.070
For this particular example,
I'm going to go to Install Anywhere's

00:38:57.070 --> 00:39:01.000
download site for Install Anywhere 5.

00:39:01.560 --> 00:39:05.800
Here we have a signed applet.

00:39:06.030 --> 00:39:11.330
It was generated by a thought,
which is one of my root certificates,

00:39:11.330 --> 00:39:15.110
so it's showing up as
a trusted certificate.

00:39:15.650 --> 00:39:17.560
and this time I'm going to say always.

00:39:17.600 --> 00:39:19.480
I always trust it.

00:39:19.500 --> 00:39:24.200
And now I'm going to go
over here to locations,

00:39:24.200 --> 00:39:31.160
utilities, key chain access.

00:39:31.160 --> 00:39:33.260
And there I see my certificate.

00:39:35.300 --> 00:39:39.000
We've got all the details
of the certificate.

00:39:39.000 --> 00:39:43.710
And if I quit Safari again
and load it up.

00:39:48.810 --> 00:39:50.260
Here you go,
we didn't get the security dialogue

00:39:50.290 --> 00:39:52.590
because we already said that we
already trust the certificate

00:39:52.660 --> 00:39:57.290
that came from install anywhere.

00:39:57.320 --> 00:39:59.930
So now I'll go over here and delete this.

00:40:05.800 --> 00:40:10.700
We'll go back and load
up install anywhere.

00:40:10.700 --> 00:40:11.300
And there it is.

00:40:11.300 --> 00:40:14.820
We don't have it anymore,
so now it's asking us to trust it again.

00:40:15.770 --> 00:40:17.740
This is pretty much immediate.

00:40:18.060 --> 00:40:19.730
Whenever I click always,
it immediately goes

00:40:19.810 --> 00:40:20.910
right into the keychain.

00:40:20.920 --> 00:40:22.990
I can take a look at it.

00:40:25.800 --> 00:40:27.800
Okay.

00:40:27.800 --> 00:40:32.190
All right, let's go back to slides.

00:40:34.890 --> 00:40:39.040
So I hope that gives you some new ways
of looking at your applet development

00:40:39.040 --> 00:40:42.140
and some additional things that
you can use for your deployment.

00:40:45.190 --> 00:40:47.560
Let's talk a little bit
about Java Web Start now,

00:40:47.580 --> 00:40:50.920
some of the details for OS X.

00:40:51.070 --> 00:40:56.160
On Windows and Solaris,
it's possible to tell the user, hey,

00:40:56.160 --> 00:40:59.920
you don't have the version of Java that
I want you to have for my application,

00:40:59.920 --> 00:41:01.570
so I'm going to download it for you.

00:41:02.780 --> 00:41:04.650
Well, we don't support that in Mac OS X.

00:41:04.660 --> 00:41:10.440
If end users need to go to software
update to get Java 1.4.1 or our

00:41:11.360 --> 00:41:16.640
website to update the VMs...

00:41:17.600 --> 00:41:30.100
[Transcript missing]

00:41:30.550 --> 00:41:33.970
Finally, with Web Start,
keep in mind that if you

00:41:33.970 --> 00:41:36.580
want a native library,
which is something you

00:41:36.650 --> 00:41:38.570
can do in Web Start,
it has to follow the

00:41:38.570 --> 00:41:39.980
Mac OS X conventions.

00:41:39.980 --> 00:41:43.760
So it has to be lib,
the name of the native library name,

00:41:43.760 --> 00:41:46.580
.jnilib,
where native library name is what

00:41:46.580 --> 00:41:49.010
you would pass as system.loadlibrary.

00:41:53.370 --> 00:41:57.270
And here's an example of something
I was talking about earlier,

00:41:57.620 --> 00:42:01.300
where you can install Mac OS X specific
resources using a resources element.

00:42:01.300 --> 00:42:06.700
And if you pass in OS equals Mac OS X,
only those things will be

00:42:06.700 --> 00:42:09.760
downloaded to the user when
they're running on Mac OS X.

00:42:09.760 --> 00:42:14.380
You can do this for Windows,
you can do this for Solaris, but on Mac,

00:42:14.380 --> 00:42:22.690
you specifically have to use Mac OS X,
because that's our OS.name property.

00:42:27.370 --> 00:42:32.900
Another thing we commonly get
questions about is the JVM versions.

00:42:32.900 --> 00:42:38.190
And specifically,
if I specify a J2SE version, well,

00:42:38.190 --> 00:42:40.440
what am I going to get?

00:42:40.720 --> 00:42:43.940
Now, in Web Start,
this is far more well-specified

00:42:43.940 --> 00:42:45.040
than we do in applications.

00:42:45.040 --> 00:42:48.090
Applications,
it's pretty much identical to this,

00:42:48.090 --> 00:42:51.820
but for Web Start,
it's very well-specified

00:42:51.820 --> 00:42:52.540
what you're going to get.

00:42:52.700 --> 00:42:56.400
If you specify 1.3 star,
you're going to get 1.3.1.

00:42:57.960 --> 00:43:03.530
"If you specify one four star,
right now you will get one four one.

00:43:03.530 --> 00:43:03.530
Now,

00:43:03.900 --> 00:43:07.220
In the future,
if we do a 1.4.2 or a 1.3.2,

00:43:07.290 --> 00:43:12.640
not that we would do that,
but say we do a 1.4.2 or 1.4.x,

00:43:12.640 --> 00:43:16.660
we have an implicit ordering
that says we will always give

00:43:16.660 --> 00:43:20.190
you the newest dot-dot version,
if you will.

00:43:20.380 --> 00:43:25.720
So when 1.4.2 comes out,
a 1.4 star will give you 1.4.

00:43:25.720 --> 00:43:28.360
We'll give you 1.4.2.

00:43:29.830 --> 00:43:35.020
And similarly,
a 1.3 plus or a 1.4 plus gives you the

00:43:35.020 --> 00:43:40.320
most recent VM greater than or equal to,
um...

00:43:41.610 --> 00:43:44.380
I'm sorry,
instead of doing it mathematically,

00:43:44.380 --> 00:43:47.840
what it will do is it will give
you the newest VM that's newer than

00:43:47.880 --> 00:43:49.620
that baseline that you specified.

00:43:51.190 --> 00:43:57.670
So 1.4+, if we have 1.4.1, 1.5, 1.6,
whatever, it will pick the newest one.

00:43:57.680 --> 00:44:00.800
It will pick the, yeah,
it will pick the newest VM.

00:44:03.100 --> 00:44:16.200
[Transcript missing]

00:44:18.000 --> 00:44:21.100
Now, one thing we've done,
I've done below,

00:44:21.100 --> 00:44:29.750
put red Xs over the product
version of the J2SE version tag.

00:44:29.780 --> 00:44:34.700
The first four are platform versions,
and that's the most flexible because

00:44:34.750 --> 00:44:39.490
basically you're saying that I work with
anything supporting the 1.4 platform.

00:44:41.350 --> 00:44:46.510
Similarly with applications,
if you say that I only support 1.3.1,

00:44:47.100 --> 00:45:08.600
[Transcript missing]

00:45:11.610 --> 00:45:14.710
All right, let's talk about some
new things that we have.

00:45:14.710 --> 00:45:17.230
In the update one for
Jaguar that just came out,

00:45:17.230 --> 00:45:19.510
we now have cookie
integration with Safari.

00:45:19.510 --> 00:45:22.160
This is something that's
been long requested,

00:45:22.180 --> 00:45:25.680
and now that we've finally got Safari,
we've got a good platform,

00:45:25.680 --> 00:45:28.240
and now we can work much
more closely with them.

00:45:28.250 --> 00:45:31.240
This is one of the first things
that you're going to see as a

00:45:31.240 --> 00:45:33.380
result of that collaboration.

00:45:34.530 --> 00:45:36.680
Nothing needs to be done on
your part to get this to work.

00:45:36.740 --> 00:45:39.400
If there's a cookie,
if the user's already got a

00:45:39.400 --> 00:45:42.510
cookie for a particular URL,
we'll fetch that out of the

00:45:42.620 --> 00:45:46.000
database and send it along with
the HTTP request for the jars or

00:45:46.000 --> 00:45:48.460
whatever other resources are needed.

00:45:48.460 --> 00:45:51.550
Same goes for set cookie
as well as get cookie.

00:45:51.550 --> 00:45:53.240
It works in both ways.

00:45:55.010 --> 00:46:15.890
: For 1.3.1,
we don't have that integration,

00:46:15.890 --> 00:46:15.890
but we do have a Q&A, number 1265,
that gives you an example of how you

00:46:15.890 --> 00:46:15.890
would go about doing this on 1.3.

00:46:15.890 --> 00:46:15.890
It's not automatic.

00:46:15.890 --> 00:46:15.890
There's some work that you have to do,
but we think it's a good compromise

00:46:15.890 --> 00:46:15.890
until you're able to move over to 1.4.1.

00:46:15.890 --> 00:46:15.890
And we want you to give us
your feedback on using this.

00:46:16.100 --> 00:46:36.400
[Transcript missing]

00:46:37.920 --> 00:46:42.160
Another new thing to talk about,
let's go back to our

00:46:42.160 --> 00:46:44.500
Where We Are Today slide.

00:46:44.500 --> 00:46:47.760
And as we mentioned,
that 1.4.1 is only available in

00:46:47.760 --> 00:46:50.050
Safari right now with the Cocoa plug-in.

00:46:51.100 --> 00:46:56.700
What we want to announce this week is the
availability of a Java Carbon plug-in.

00:46:56.830 --> 00:47:01.400
And what this will do is it won't
automatically make it available

00:47:01.400 --> 00:47:06.890
to IE and the other browsers,
but they will now be able to get

00:47:06.890 --> 00:47:11.030
to 1.4.1 via a Carbon plug-in.

00:47:11.970 --> 00:47:16.230
So if there are any browser vendors
out here in the audience that are

00:47:16.230 --> 00:47:19.890
built around Carbon applications,

00:47:20.100 --> 00:47:25.500
[Transcript missing]

00:47:27.470 --> 00:47:34.160
Finally, let's talk about some deployment
choices that are available to you.

00:47:34.570 --> 00:47:36.500
Everything I'm going to talk
about here applies whether you're

00:47:36.500 --> 00:47:39.300
doing it on Windows or Mac OS X.

00:47:39.590 --> 00:47:42.860
So basically you want to
look at the resource needs of

00:47:42.860 --> 00:47:44.560
what you're trying to deploy.

00:47:44.560 --> 00:47:48.800
If you're just doing something simple,
talking to a server, giving some status,

00:47:48.800 --> 00:47:50.810
things like that,
look for a simple applet.

00:47:50.830 --> 00:47:52.320
That's probably going to
be your best solution.

00:47:52.320 --> 00:47:57.020
If you need to write something
out to the user's disk as a

00:47:57.020 --> 00:48:02.200
preference or something like that,
look into a signed applet.

00:48:04.320 --> 00:48:07.900
If you want to build a real application,
you want to deliver it dynamically,

00:48:07.950 --> 00:48:08.870
Web Start's the way to go.

00:48:09.080 --> 00:48:11.570
Web Start will let you have
some native code to put some

00:48:11.610 --> 00:48:13.360
customization into your application.

00:48:15.750 --> 00:48:18.760
Web Start's also going to give you
all the functionality that you need.

00:48:19.040 --> 00:48:23.900
Things like the EAWT and things like that
are available to you through Web Start,

00:48:23.900 --> 00:48:27.340
so you can build a full
application with Web Start.

00:48:27.340 --> 00:48:30.560
So if that's what you want to
do and use dynamic updating and

00:48:30.560 --> 00:48:33.610
all the features of Web Start,
that's the way to go.

00:48:37.360 --> 00:48:42.460
Here are some more URLs for everything
I've talked about in this session.

00:48:42.460 --> 00:48:45.850
For Web Start documentation,
start at our site and I'll eventually

00:48:45.910 --> 00:48:49.100
take you over to Sun's site
where you can get the JNLP spec.

00:48:49.100 --> 00:48:52.820
The JNLP specification is what
you need to look at if you're

00:48:52.890 --> 00:48:55.220
going to be delivering Web Start.

00:48:56.300 --> 00:49:03.020
Look again with the
Java plug-in documentation.

00:49:03.250 --> 00:49:04.600
Go to java.syn.com.

00:49:04.600 --> 00:49:08.650
Everything you need to know
about applets is there.

00:49:08.650 --> 00:49:13.030
And, of course,
all of the Apple documentation

00:49:13.030 --> 00:49:15.030
for Java in general.

00:49:18.420 --> 00:49:22.390
You can go to connect.apple.com and you
can get the 1.4.1 developer preview,

00:49:22.620 --> 00:49:24.200
update 1 developer preview.

00:49:24.200 --> 00:49:26.630
There is now a quick time for Java Seed.

00:49:27.900 --> 00:49:44.000
[Transcript missing]

00:49:46.550 --> 00:49:49.180
People to contact, Alan Samuel,
Bob Frazier.

00:49:49.200 --> 00:49:52.340
I highly recommend that you join
Java Dev if you haven't done so already.

00:49:52.340 --> 00:49:55.680
It's a great resource for getting
lots of questions answered,

00:49:55.680 --> 00:49:57.300
and usually very quickly.

00:49:57.300 --> 00:49:59.320
Not by one of us,
but one of the other members.

00:50:02.300 --> 00:50:04.980
And here are the rest of the sessions.

00:50:04.990 --> 00:50:08.920
Actually, for those of you watching
me on DVD right now,

00:50:09.010 --> 00:50:14.820
you can go back and get session 608,
which talks about Info.plist.

00:50:14.820 --> 00:50:19.340
We've got an additional session this
afternoon on Java native integration.

00:50:19.340 --> 00:50:24.460
Good session tomorrow about performance,
and please come tomorrow to the

00:50:24.550 --> 00:50:29.390
feedback forum and give us your feedback
on anything you've seen this week.