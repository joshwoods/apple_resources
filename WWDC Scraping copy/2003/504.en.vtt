WEBVTT

00:00:28.010 --> 00:00:31.020
Today, we're going to talk all about
FireWire 800 hardware and

00:00:31.020 --> 00:00:34.150
software in our new products,
and we also have some

00:00:34.150 --> 00:00:39.030
interesting new tools to help
you develop for FireWire 800.

00:00:39.720 --> 00:00:43.970
This session will review how Apple has
deployed FireWire 800 in our products,

00:00:43.970 --> 00:00:46.950
how you can use this
in your own products,

00:00:46.950 --> 00:00:48.880
in your hardware, and in your software.

00:00:48.880 --> 00:00:53.140
We'll briefly look at the impact of
FireWire 800 on existing products,

00:00:53.140 --> 00:00:54.680
and that won't take long.

00:00:54.680 --> 00:00:58.530
Here's the specific
agenda for the slides.

00:00:58.540 --> 00:01:02.980
First, we'll introduce FireWire 800,
just what is it, what are the benefits,

00:01:02.980 --> 00:01:03.980
how does it work.

00:01:04.020 --> 00:01:07.290
Mike will come up and talk about
the hardware in great detail,

00:01:07.290 --> 00:01:09.400
and I will talk about the software.

00:01:09.400 --> 00:01:12.420
Together, we'll show you how you can
deploy this new high-speed

00:01:12.420 --> 00:01:13.920
technology in your products.

00:01:14.000 --> 00:01:16.790
Then we'll briefly go over
some developer resources,

00:01:16.790 --> 00:01:19.870
and we have some new tools to
introduce to you that should help

00:01:19.870 --> 00:01:22.180
in developing for FireWire 800.

00:01:22.180 --> 00:01:24.590
So, let's get started.

00:01:24.600 --> 00:01:26.360
What is it?

00:01:28.540 --> 00:01:31.300
I'm sure you've all figured out
it's twice as fast as FireWire 400,

00:01:31.300 --> 00:01:33.380
but there's more to it than that.

00:01:33.510 --> 00:01:35.690
FireWire 800 has a new connector.

00:01:35.730 --> 00:01:38.500
If you have one of our new products,
you've probably seen it on the back.

00:01:38.500 --> 00:01:40.680
It's this rectangular connector.

00:01:40.690 --> 00:01:42.830
Why did we change this?

00:01:43.210 --> 00:01:46.800
The FireWire 400 connectors,
the six-pin socket and all the cables,

00:01:47.000 --> 00:01:49.390
just can't carry higher-speed signals.

00:01:49.500 --> 00:01:53.060
800 might have worked, but 1600,
3200 were definitely out,

00:01:53.220 --> 00:01:57.230
so it was time for a
higher-grade signal path.

00:01:57.320 --> 00:02:00.800
The FireWire 800 connector has more pins,
making this possible,

00:02:00.890 --> 00:02:04.460
but it remains fully backwards
compatible with FireWire 400.

00:02:04.460 --> 00:02:07.230
With the right cable,
you can connect all your old

00:02:07.230 --> 00:02:09.720
FireWire 400 devices to this port.

00:02:10.550 --> 00:02:13.350
Clock speeds exactly double
as far as the bitrate,

00:02:13.390 --> 00:02:15.890
FireWire 400,
but there's many improvements

00:02:15.910 --> 00:02:18.730
in the arbitration,
so the actual performance you can

00:02:18.790 --> 00:02:22.350
get may be more than double what
you had at FireWire 400 speeds.

00:02:22.360 --> 00:02:24.860
And, of course,
you get greater distances.

00:02:24.860 --> 00:02:28.820
The specification allows up
to 100 meters rather than 4.5,

00:02:28.830 --> 00:02:32.320
and there's a variety of media that
you can use to accomplish this.

00:02:32.320 --> 00:02:35.590
Mike will go into much
more detail about that.

00:02:37.130 --> 00:02:39.590
Our products with FireWire 800,
the new G5 tower that

00:02:39.590 --> 00:02:43.900
was introduced on Monday,
the 17-inch PowerBook G4,

00:02:43.900 --> 00:02:47.920
and the XServe all have
built-in FireWire 800 ports.

00:02:47.960 --> 00:02:49.460
In fact, the XServe has two of them.

00:02:50.820 --> 00:02:53.160
All these products also
have FireWire 400 ports.

00:02:53.160 --> 00:02:56.110
It's on the same FireWire bus,
so you can still plug in your iPod,

00:02:56.110 --> 00:02:58.630
your camcorder,
you don't have to go find a new cable

00:02:58.780 --> 00:03:00.210
just to keep using the same device.

00:03:02.490 --> 00:03:04.680
Okay,
now I'd like to welcome Michael Teener.

00:03:04.760 --> 00:03:07.300
He's going to tell us in
detail how all this new stuff

00:03:07.300 --> 00:03:08.950
in FireWire 800 really works.

00:03:08.950 --> 00:03:09.600
Please welcome, Mike.

00:03:09.680 --> 00:03:10.960
Hi.

00:03:10.960 --> 00:03:12.250
Hi.

00:03:14.000 --> 00:03:16.820
So, I'll be talking a little bit
about what FireWire 800 is,

00:03:16.820 --> 00:03:19.730
and the first thing you should do when
you talk about something new is you

00:03:19.780 --> 00:03:21.290
should talk about what hasn't changed.

00:03:21.300 --> 00:03:25.080
So, from the point of view of
pretty much the whole stack,

00:03:25.080 --> 00:03:30.360
from the hardware to the software,
we have the same old connection model,

00:03:30.360 --> 00:03:33.890
and the difference is now,
instead of just having trees and

00:03:33.890 --> 00:03:37.490
daisy chains and things like that,
now we tolerate loops.

00:03:37.620 --> 00:03:39.750
So, you can literally connect
anything to anything,

00:03:39.840 --> 00:03:40.760
and it will still work.

00:03:41.520 --> 00:03:44.000
We also support the same
old peer-to-peer operation.

00:03:44.000 --> 00:03:45.340
It's not like USB.

00:03:45.340 --> 00:03:46.220
You don't need a CPU.

00:03:46.220 --> 00:03:48.100
You can turn off your Mac,
and everything will still

00:03:48.100 --> 00:03:49.350
connect and talk to each other.

00:03:49.360 --> 00:03:53.040
Has the same kind of user-friendliness,
perhaps a little bit better,

00:03:53.040 --> 00:03:54.910
because we do tolerate the loops.

00:03:55.000 --> 00:03:59.030
And all the higher-level stuff,
the transaction models

00:03:59.030 --> 00:04:03.420
and higher-level software,
are all pretty much the same.

00:04:03.420 --> 00:04:07.120
And finally, the same kind of thing,
the asynchronous and the

00:04:07.140 --> 00:04:10.430
isochronous transmit modes,
they're all the same.

00:04:10.480 --> 00:04:11.500
They're just faster.

00:04:11.520 --> 00:04:12.520
Thank you.

00:04:13.300 --> 00:04:17.840
So basically, everything above the
link layer is the same.

00:04:18.060 --> 00:04:20.600
So all existing software
should work unchanged,

00:04:20.600 --> 00:04:22.430
as long as you're gonna
operate at the lower speeds.

00:04:22.500 --> 00:04:25.800
At the higher speeds, of course,
you have to know about the higher speeds.

00:04:26.040 --> 00:04:29.580
So, what is FireWire 800 and
a more technical thing?

00:04:29.620 --> 00:04:34.640
That's really Apple's
name for IEEE 1394B,

00:04:34.760 --> 00:04:37.130
S800 bilingual.

00:04:37.310 --> 00:04:41.340
1394 has these code terms,
which are basically marketing numbers.

00:04:41.410 --> 00:04:45.500
So when we say S100,
we really mean 98.304 megabits a second,

00:04:45.500 --> 00:04:47.540
but that's too hard to say,
so we say 100.

00:04:47.680 --> 00:04:51.290
And S800 is exactly eight
times faster than that.

00:04:52.270 --> 00:04:55.400
We have an additional beta mode
of operation that I'll talk

00:04:55.550 --> 00:04:57.670
about a little bit that you guys
may want to take advantage of.

00:04:57.740 --> 00:05:02.850
And from now on, 13.4a operation is going
to be called Legacy Mode.

00:05:04.460 --> 00:05:07.950
13.4b PHYs,
which are the silicon that actually

00:05:07.950 --> 00:05:13.670
connect to the ports on the back of
the computer or your peripheral device.

00:05:13.900 --> 00:05:15.540
We have three different types of ports.

00:05:15.670 --> 00:05:18.790
There's legacy ports,
which when you say a FireWire 400 port,

00:05:18.800 --> 00:05:21.300
that's the legacy port
we're connecting to.

00:05:21.350 --> 00:05:24.650
There are beta ports,
which operate only in the new mode,

00:05:24.850 --> 00:05:27.270
and then there are bilingual ports,
which operate in either one.

00:05:27.400 --> 00:05:31.320
When Apple says FireWire 800,
we're talking about a bilingual port,

00:05:31.340 --> 00:05:33.930
one that can talk to either
legacy peripherals or the

00:05:33.930 --> 00:05:38.500
new beta mode peripherals.

00:05:38.950 --> 00:05:41.730
The beta mode is where
we get our higher speeds,

00:05:41.730 --> 00:05:44.590
we get a longer distance,
and in a little bit I'll talk

00:05:44.590 --> 00:05:47.860
about the higher efficiency and
the better user experience as well.

00:05:47.860 --> 00:05:50.700
So, let's talk about higher speeds.

00:05:50.700 --> 00:05:58.760
We specify in 13.4b S800 and
S1600 data transmission rates.

00:05:58.850 --> 00:06:00.280
It's all been carefully analyzed.

00:06:00.280 --> 00:06:03.540
And we future-proof it with
an architecture and media

00:06:03.540 --> 00:06:05.820
that support up to 3200.

00:06:06.930 --> 00:06:10.140
And as a matter of fact,
in the labs we've shown that the existing

00:06:10.210 --> 00:06:14.670
FireWire 800 cable that you buy off
the shelf right now has been validated

00:06:14.680 --> 00:06:16.530
all the way to 3.2 gigabit a second.

00:06:16.540 --> 00:06:19.540
So, we're set for whatever
we can do in the future.

00:06:21.020 --> 00:06:25.800
uses the same old shielded twisted
pair that crosses over in the middle.

00:06:25.800 --> 00:06:31.330
The electrical spec still uses the same.

00:06:32.170 --> 00:06:38.720
The difference is, now it's what's called
continuous dual simplex,

00:06:38.770 --> 00:06:42.820
which means the two pairs are
continuously transmitting like this.

00:06:42.920 --> 00:06:45.550
In old legacy 1394,
we would arbitrate for the bus,

00:06:45.550 --> 00:06:48.060
and then both wires would be
used to transmit the data.

00:06:48.060 --> 00:06:49.960
One would carry clock,
and one would carry data.

00:06:49.960 --> 00:06:52.180
Now,
we're carrying encoded clock and data

00:06:52.220 --> 00:06:54.220
at the same time in both directions.

00:06:55.790 --> 00:06:59.220
As I said,
we're transmitting continuously

00:06:59.220 --> 00:07:01.010
in both directions.

00:07:01.180 --> 00:07:04.540
One thing that is new is because
we're maintaining this connection

00:07:04.540 --> 00:07:08.000
is the transmission speed,
once we negotiate the connection,

00:07:08.080 --> 00:07:09.150
never changes.

00:07:09.180 --> 00:07:12.140
So if we're running at 800
megabits between the two ports,

00:07:12.250 --> 00:07:15.220
we continue to run at 800
megabits between the two ports.

00:07:15.400 --> 00:07:19.250
Any legacy packets that are running
slower than that are basically byte

00:07:19.250 --> 00:07:22.060
stuffed to make them come out right.

00:07:22.390 --> 00:07:28.240
It's actually simpler and much
more efficient than existing 1394.

00:07:28.330 --> 00:07:32.320
So if you have a device that only
runs at 800 megabits a second,

00:07:32.320 --> 00:07:35.900
you'll probably save yourself a lot
of trouble by going pure beta mode.

00:07:37.920 --> 00:07:39.700
So, how do we get to all this speed?

00:07:39.700 --> 00:07:41.800
We have a new signal encoding.

00:07:41.800 --> 00:07:46.220
It's based on 10-bit symbols,
which carry both the clock and the data.

00:07:46.220 --> 00:07:50.300
Every byte of data uses a 10-bit symbol.

00:07:50.300 --> 00:07:55.290
The data and arbitration states use
the same IBM 8B10B encoding system

00:07:55.290 --> 00:07:59.720
that Fiber Channel and the copper
forms of Gigabit Ethernet use.

00:08:00.930 --> 00:08:11.340
The data is sent to the encoder,
and the data is sent to the encoder.

00:08:11.380 --> 00:08:14.010
If you send a lot of
repeating data out on a wire,

00:08:14.010 --> 00:08:17.570
even if it's encoded, you'll end up with
peaks in your spectrum,

00:08:17.570 --> 00:08:19.170
which means it'll radiate.

00:08:19.230 --> 00:08:20.460
You don't want that.

00:08:20.550 --> 00:08:22.610
So,
what we do is we scramble the data first,

00:08:22.610 --> 00:08:26.130
then we send it to the encoder,
and the result is it looks like stealth.

00:08:26.150 --> 00:08:28.630
It looks like noise that
we're sending out there.

00:08:28.640 --> 00:08:30.100
So, it smooths out the spectrum.

00:08:30.420 --> 00:08:33.040
It's a lot easier to meet
the FCC requirements.

00:08:33.040 --> 00:08:35.460
We also have some control symbols.

00:08:35.620 --> 00:08:37.420
Those are the start and
the end of the packet.

00:08:37.420 --> 00:08:41.760
And unlike Ethernet and Fiber Channel,
we use a unique set of codes.

00:08:41.820 --> 00:08:44.560
Those codes are like the 8B10B.

00:08:44.560 --> 00:08:45.640
They're all DC balanced.

00:08:45.640 --> 00:08:49.120
But they have what's called a
hamming distance of two from each

00:08:49.130 --> 00:08:51.150
other and from all data symbols.

00:08:51.180 --> 00:08:55.170
A hamming distance of two means
that it takes two-bit changes within

00:08:55.240 --> 00:08:59.680
that 10-bit symbol before we can
ever confuse it with anything else.

00:08:59.680 --> 00:09:02.980
So,
it's a very... robust encoding scheme.

00:09:03.370 --> 00:09:05.900
Those are also scrambled as well,
so if you have a bunch of packets

00:09:05.980 --> 00:09:09.790
that are all the same size,
we don't get a little spectrum peak from

00:09:09.790 --> 00:09:12.450
the start and the end of the packets.

00:09:12.870 --> 00:09:18.090
We also have a very much shorter
start and end packet time.

00:09:18.360 --> 00:09:24.830
The legacy 13.4 has the same time used
to start a packet and end a packet,

00:09:24.850 --> 00:09:26.270
no matter how fast the packet is.

00:09:26.310 --> 00:09:28.300
So we start wasting bits.

00:09:28.400 --> 00:09:30.290
At S800, it gets pretty significant.

00:09:30.300 --> 00:09:34.800
In the case of FireWire 800,
we have just two symbols,

00:09:34.800 --> 00:09:36.800
and that scales with speed.

00:09:36.930 --> 00:09:41.790
So we don't lose any time just
because we're running faster.

00:09:42.020 --> 00:09:46.130
"We have that same 8B/10B
encoding scheme for all media,

00:09:46.130 --> 00:09:50.270
and that media, that's the same scheme
we use for optical media.

00:09:50.390 --> 00:09:55.110
So we use the benefit of that PHY,
that TI PHY that's currently shipping,

00:09:55.210 --> 00:09:58.760
can be used to drive optical media,
twisted pair media,

00:09:59.030 --> 00:10:02.730
as well as the standard
shielded media that we use."

00:10:03.730 --> 00:10:06.740
Another way we get a higher
efficiency level is we have a

00:10:06.840 --> 00:10:08.240
brand-new arbitration scheme.

00:10:08.240 --> 00:10:15.060
We needed to do this because Legacy 1394
alternates between arbitrating for

00:10:15.060 --> 00:10:17.220
the bus and then sending the data.

00:10:19.150 --> 00:10:22.730
That means that the arbitration is going
to depend on the round-trip delay time.

00:10:22.730 --> 00:10:27.000
If you have a really big 1394 network,
and say you ran it across the room here,

00:10:27.010 --> 00:10:29.410
I'd have to send my
request over to the root,

00:10:29.480 --> 00:10:32.390
which could be anywhere,
and I'd have to get my grant,

00:10:32.390 --> 00:10:36.500
and the grant would have to come back,
and then I could send my data.

00:10:37.160 --> 00:10:41.560
Well, that's not too bad as long as it's
fairly slow and your network's like this.

00:10:41.560 --> 00:10:46.860
But once you get to really long networks,
or you get to really high speeds,

00:10:46.890 --> 00:10:50.610
that's wasted bits going back and forth,
and we don't want to waste any bits.

00:10:52.090 --> 00:10:56.990
Um, 13.104b uses an overlapped
arbitration scheme,

00:10:57.090 --> 00:11:00.250
um, and the scheme is known as BOSS.

00:11:00.300 --> 00:11:03.890
The BOSS stands for
Bus Owner Supervisor Selector.

00:11:04.020 --> 00:11:06.370
Of course,
we came up with BOSS first and then

00:11:06.370 --> 00:11:08.510
came up with what the acronym meant.

00:11:09.020 --> 00:11:11.290
Also, notice it's a four-letter acronym.

00:11:11.290 --> 00:11:12.670
That's because we're not Intel.

00:11:12.680 --> 00:11:14.150
Intel only uses three-letter acronyms.

00:11:14.240 --> 00:11:15.240
We're one letter better.

00:11:15.240 --> 00:11:21.830
BOSS is the currently transmitting node.

00:11:21.840 --> 00:11:23.550
That's an important state.

00:11:23.660 --> 00:11:26.690
We don't have the concept of a root,
except for some specialized

00:11:26.850 --> 00:11:28.510
functions and error recovery.

00:11:28.520 --> 00:11:30.910
In beta mode,
the important thing is whoever's

00:11:31.050 --> 00:11:32.410
transmitting owns the bus.

00:11:32.460 --> 00:11:33.840
Kind of a nice concept.

00:11:35.000 --> 00:11:40.290
And we use that node to
decide who transmits next.

00:11:40.460 --> 00:11:43.180
We have an explicit decision
at the end of each sub-action.

00:11:43.300 --> 00:11:45.440
A sub-action is, you know,
you're sending out a read,

00:11:45.440 --> 00:11:46.840
and then there's a
little act coming back,

00:11:46.930 --> 00:11:48.680
and that act is ending the sub-action.

00:11:48.680 --> 00:11:53.860
That immediate decision that we
make saves the arbitration time.

00:11:54.000 --> 00:11:55.540
Now, let me show you what that means.

00:11:55.540 --> 00:11:58.240
Here's a typical little system.

00:11:58.240 --> 00:12:01.260
This is kind of the
prototypical 1394 network.

00:12:01.320 --> 00:12:03.720
Node number zero is the boss.

00:12:03.800 --> 00:12:04.940
It's transmitting data.

00:12:04.940 --> 00:12:06.720
So this is the model of
what you'll be seeing.

00:12:06.720 --> 00:12:08.420
I'm now sending some data.

00:12:08.790 --> 00:12:11.060
This could be an isochronous
sending a video stream.

00:12:11.080 --> 00:12:17.010
1394b says that this guy sending,
he's the boss.

00:12:19.110 --> 00:12:21.300
So what'll happen is requests
are going to go in the

00:12:21.300 --> 00:12:22.980
opposite direction of the data.

00:12:22.980 --> 00:12:25.400
Remember now we're
continuous half-duplex,

00:12:25.480 --> 00:12:26.840
so we're sending data
all the time like this?

00:12:26.840 --> 00:12:29.510
So when we're sending
data away from the boss,

00:12:29.590 --> 00:12:32.150
the reverse direction is available to us.

00:12:32.180 --> 00:12:34.740
So that's why we'll just
start doing arbitration.

00:12:34.800 --> 00:12:38.740
So we're going to start sending the
request back up in the opposite direction

00:12:38.860 --> 00:12:40.970
while the data is being transmitted.

00:12:40.980 --> 00:12:45.070
So in this example,
node number two makes a request.

00:12:45.070 --> 00:12:47.770
Node number one makes a request too,
but it's lower priority.

00:12:48.580 --> 00:12:50.380
Ah, we get to have priorities too.

00:12:50.380 --> 00:12:51.980
We only use them for
very special purposes,

00:12:51.980 --> 00:12:53.220
but we do have priorities.

00:12:53.650 --> 00:12:57.900
That request gets forwarded
all the way to the boss.

00:12:58.140 --> 00:13:01.920
Now the boss basically knows
what kind of requests are coming

00:13:01.920 --> 00:13:03.990
while it's transmitting data.

00:13:04.490 --> 00:13:11.240
When the boss finishes sending data,
it'll send a grant right

00:13:11.240 --> 00:13:13.100
on the end of the data.

00:13:13.350 --> 00:13:18.600
So that grant propagates down
until it reaches a node that

00:13:18.600 --> 00:13:19.870
has a high-priority request.

00:13:19.960 --> 00:13:22.320
At node number three,
we had a high-priority request

00:13:22.420 --> 00:13:25.580
and a low-priority request,
so the one receiving the low-priority

00:13:25.580 --> 00:13:27.250
request just gets it into packet.

00:13:27.250 --> 00:13:28.260
It doesn't get the grant.

00:13:28.300 --> 00:13:33.160
The grant is always percolated back to
the node that has the highest priority

00:13:33.160 --> 00:13:35.070
request at any particular node.

00:13:35.110 --> 00:13:36.960
So it only ends up in one place.

00:13:38.510 --> 00:13:40.590
So,
the result of this is gaps are removed.

00:13:40.880 --> 00:13:47.240
We don't have this send the data,
arbitrate for the bus, win the bus,

00:13:47.240 --> 00:13:48.650
send the data.

00:13:48.660 --> 00:13:52.330
We can literally start sending
the data immediately after

00:13:52.330 --> 00:13:54.200
getting the end of packet.

00:13:56.220 --> 00:13:59.000
That end-of-packet sequence
includes an optional grant symbol.

00:13:59.000 --> 00:14:01.140
In fact,
the real way to think about it is

00:14:01.200 --> 00:14:02.640
there's two types of end-of-packet.

00:14:02.670 --> 00:14:05.030
One of them doesn't give a grant,
and one of them does.

00:14:05.040 --> 00:14:07.240
And each node repeating
that end-of-packet sends the

00:14:07.280 --> 00:14:09.790
grant to the highest priority
request that it's getting.

00:14:09.790 --> 00:14:12.130
There's only going to be
one direction for the grant.

00:14:12.160 --> 00:14:16.580
A similar process removes the need for
what's called the arbitration reset gap,

00:14:16.580 --> 00:14:18.580
so we don't have that gap either.

00:14:18.580 --> 00:14:22.660
The result is it's a
much more efficient bus.

00:14:22.660 --> 00:14:25.400
The other thing we do
is we get rid of loops.

00:14:26.200 --> 00:14:28.940
Sometimes it's called loop healing,
but that's an unfortunate term because

00:14:28.940 --> 00:14:30.240
we're actually trying to break loops.

00:14:30.240 --> 00:14:32.600
But sometimes I use that term,
so forgive me.

00:14:32.600 --> 00:14:34.730
I really mean loop breaking.

00:14:36.210 --> 00:14:42.560
What we do during this loop-free build
is we break all loops that can be removed

00:14:42.560 --> 00:14:44.320
by disabling a beta mode connection.

00:14:44.320 --> 00:14:46.260
A beta mode connection, remember,
is a FireWire 800 to

00:14:46.260 --> 00:14:47.460
FireWire 800 connection.

00:14:47.460 --> 00:14:52.130
So any loop, so you could have a loop of
all legacy connections with

00:14:52.330 --> 00:14:56.290
one FireWire 800 in the path,
and we'll break it.

00:14:56.380 --> 00:14:57.480
We'll make sure that it works.

00:14:57.480 --> 00:15:01.840
We will prune any branch containing
a loop that cannot be healed.

00:15:01.840 --> 00:15:03.160
So if you have something
that's sitting out here,

00:15:03.230 --> 00:15:05.890
it's a real complicated thing,
and somehow somebody built

00:15:05.890 --> 00:15:09.390
a loop out of legacy 1394,
we'll just take that

00:15:09.410 --> 00:15:13.440
branch and disconnect it,
and the rest of the network will work.

00:15:14.990 --> 00:15:20.030
We will not interfere with
the operation of legacy FIs.

00:15:20.030 --> 00:15:21.040
They're out there.

00:15:21.040 --> 00:15:22.060
Things work.

00:15:22.260 --> 00:15:23.240
They don't even know what's happening.

00:15:23.240 --> 00:15:25.420
We don't require any
software intervention,

00:15:25.420 --> 00:15:27.840
although software will
know what's happening.

00:15:27.840 --> 00:15:30.300
So some of the stuff that
Eric can tell you about,

00:15:30.300 --> 00:15:32.570
we'll be able to tell
you that kind of thing.

00:15:35.170 --> 00:15:39.600
We re-enable connections whenever
something has to be done.

00:15:39.600 --> 00:15:41.660
So, for instance,
say we created that loop and we

00:15:41.660 --> 00:15:44.500
broke at one beta connection.

00:15:44.900 --> 00:15:48.140
And then somebody broke the
connection somewhere else,

00:15:48.160 --> 00:15:51.280
we would re-enable the one that was
broken so that we keep the loop alive,

00:15:51.280 --> 00:15:52.190
I mean the network alive.

00:15:52.240 --> 00:15:53.600
It's kind of neat.

00:15:53.670 --> 00:15:55.720
You can actually build,
if you want to build yourself

00:15:55.740 --> 00:15:59.820
a highly redundant system,
you can just interconnect all of

00:15:59.820 --> 00:16:01.740
the nodes and everything will work.

00:16:01.820 --> 00:16:03.560
And if any one cable gets
tripped over or pulled out,

00:16:03.560 --> 00:16:05.480
everything will reconfigure
and it'll still work.

00:16:06.870 --> 00:16:10.440
You haven't seen some of our labs,
or you'd appreciate that joke.

00:16:10.550 --> 00:16:14.810
We don't interfere with
the ability of software to

00:16:14.810 --> 00:16:16.190
determine the network topology.

00:16:16.200 --> 00:16:19.860
As a matter of fact,
unless you're really smart,

00:16:19.860 --> 00:16:22.770
you can't even... It'll look like
somebody's out there unplugging

00:16:22.770 --> 00:16:24.050
and plugging cables real fast.

00:16:24.060 --> 00:16:27.120
So that's the way it
looks to most software.

00:16:27.120 --> 00:16:30.560
One thing to note,
it is not deterministic.

00:16:30.560 --> 00:16:33.400
So I can't tell you ahead of time
where the loop is going to be broken.

00:16:33.420 --> 00:16:35.290
It depends on some
randomizing algorithms.

00:16:35.300 --> 00:16:36.790
So we can't tell you that.

00:16:36.880 --> 00:16:38.380
And there's no way to control it.

00:16:42.120 --> 00:16:42.570
There we go.

00:16:42.630 --> 00:16:45.160
Didn't want to blast
anybody with the laser.

00:16:45.210 --> 00:16:47.850
One of the things we need to do is
we wanted to make sure we have the

00:16:47.920 --> 00:16:52.670
backwards compatibility built in,
and 13.04b, of course, supports that.

00:16:52.780 --> 00:16:56.220
And remember I said a port on a
PHY can either be a legacy PHY,

00:16:56.230 --> 00:16:59.290
which stands for a DS port,
a beta-mode-only port,

00:16:59.300 --> 00:17:01.000
or a bilingual port.

00:17:01.010 --> 00:17:04.180
And we have some connector
keying to make sure people don't

00:17:04.180 --> 00:17:06.060
do anything silly around here.

00:17:06.310 --> 00:17:12.170
A fly can have any mix of ports operating
in the DS mode and the beta mode,

00:17:12.210 --> 00:17:13.320
and it can change dynamically.

00:17:15.190 --> 00:17:20.260
A PHY can have a B-Link,
which is what we use to get FireWire 800,

00:17:20.410 --> 00:17:21.940
or a Legacy Link or no link at all.

00:17:21.940 --> 00:17:24.610
So you can still build hubs,
which is basically a

00:17:24.620 --> 00:17:26.390
PHY floating all by itself.

00:17:27.000 --> 00:17:27.920
So here's what we got.

00:17:28.230 --> 00:17:30.030
This is a typical hybrid bus.

00:17:30.030 --> 00:17:33.420
It's got these DS nodes
of the legacy nodes.

00:17:33.420 --> 00:17:35.730
DS stands for data strobe.

00:17:35.730 --> 00:17:37.520
I'm not making a bad joke here, okay?

00:17:37.520 --> 00:17:42.500
And there are B nodes sitting out here,
which are our new style nodes.

00:17:43.980 --> 00:17:47.390
The first thing that happens after
the bus gets up and running is you

00:17:47.430 --> 00:17:51.530
end up with all the B nodes clustering
themselves into things called B clouds.

00:17:51.560 --> 00:17:55.450
This is kind of important
because within those B clouds,

00:17:55.500 --> 00:18:01.790
the devices within those clouds will try
to operate at the best speed they can.

00:18:01.900 --> 00:18:04.290
They'll use the beta mode
connections to talk to each other,

00:18:04.480 --> 00:18:07.730
which are this highly optimized
boss arbitration and all

00:18:07.730 --> 00:18:09.840
that kind of cool stuff.

00:18:11.820 --> 00:18:15.420
The nodes that are on the edge of
those clouds that talk to the data

00:18:15.420 --> 00:18:18.640
strobe are called border nodes,
and that's where all the magic

00:18:18.690 --> 00:18:21.010
takes place that translates
between the two modes.

00:18:22.410 --> 00:18:25.790
So, what do we get out of
the hybrid operation?

00:18:26.110 --> 00:18:30.180
There are no restrictions on
mixing legacy nodes and 134b nodes,

00:18:30.400 --> 00:18:34.790
beyond the fact that if you divide
up two b-clouds with a legacy cloud,

00:18:34.800 --> 00:18:36.440
you're not going to get as
much performance because

00:18:36.440 --> 00:18:39.300
you've got a 400 megabit path
between two 800 megabit paths.

00:18:39.320 --> 00:18:39.960
Sorry.

00:18:39.960 --> 00:18:43.620
So, the best you can do is 400
between any of those two.

00:18:43.790 --> 00:18:47.000
The key was, at least it'll work.

00:18:47.580 --> 00:18:51.510
The traffic within the bCloud
can exploit all the benefits,

00:18:52.030 --> 00:18:55.490
including loop breaking and
all that kind of cool stuff.

00:18:55.730 --> 00:19:00.360
The data strobe traffic operates
as normal with a rather complicated

00:19:00.360 --> 00:19:03.000
set of gaps that need to be managed.

00:19:03.150 --> 00:19:05.190
They can all be done as well.

00:19:05.870 --> 00:19:06.750
We have a better connector.

00:19:06.750 --> 00:19:11.700
The new connector, as Eric said,
was needed for higher data rates.

00:19:11.700 --> 00:19:15.580
It was actually,
if you look at the connector,

00:19:15.580 --> 00:19:18.670
it's actually slightly smaller than
the existing six-pin connector.

00:19:18.680 --> 00:19:21.710
So, and it's also shallower,
so it makes it a little bit

00:19:21.770 --> 00:19:23.510
easier to build your designs.

00:19:23.520 --> 00:19:26.350
It has keying to make sure
there's compatibility,

00:19:26.440 --> 00:19:30.540
so you can build a beta-only node
and you can't plug in a cable,

00:19:30.540 --> 00:19:32.760
an adapter cable to it.

00:19:33.600 --> 00:19:34.590
And there's two variants.

00:19:34.590 --> 00:19:36.580
There's the bilingual connector
and the beta connector,

00:19:36.580 --> 00:19:42.520
and two forms of plugs, a bilingual,
a beta-only plug and a bilingual plug.

00:19:42.540 --> 00:19:44.690
And they look like this.

00:19:44.780 --> 00:19:47.210
There's really going to
be three cable assemblies.

00:19:47.300 --> 00:19:50.120
As far as Apple's concerned,
there really should be two, but,

00:19:50.120 --> 00:19:51.360
you know, we're stuck.

00:19:51.380 --> 00:19:54.850
There's the one that goes
between the bilingual connector,

00:19:54.850 --> 00:19:59.450
a FireWire 800 port, and the four-pin
connector on a camcorder.

00:19:59.460 --> 00:20:03.460
There's the one between the
bilingual plug and the C-corder.

00:20:03.600 --> 00:20:08.580
a six circuit connector used in
everything that was done right.

00:20:09.120 --> 00:20:10.110
I shouldn't say it too much.

00:20:10.200 --> 00:20:11.940
It might be somebody from Sony here.

00:20:12.000 --> 00:20:16.140
And the beta mode connector is
used for all other connections,

00:20:16.210 --> 00:20:18.570
anytime you want to run the higher speed.

00:20:18.690 --> 00:20:19.340
So what do we get?

00:20:19.430 --> 00:20:22.580
We also get this longer distance,
and the goal was to get 100 meter.

00:20:22.580 --> 00:20:24.610
That's big enough even for my house.

00:20:24.610 --> 00:20:25.520
Just kidding.

00:20:25.520 --> 00:20:28.500
This is input from the
Visa Home Network Committee,

00:20:28.500 --> 00:20:31.460
which must have gotten
its input from Bill Gates.

00:20:31.560 --> 00:20:35.270
Unfortunately,
the longer distance needs new media.

00:20:35.270 --> 00:20:40.110
We can't run the nice little
shielded twisted pair for 100 meters.

00:20:40.110 --> 00:20:41.430
It doesn't work.

00:20:42.500 --> 00:20:45.900
So we support category 5 wiring,
standard Ethernet wiring.

00:20:45.970 --> 00:20:48.030
That can run at S100.

00:20:48.320 --> 00:20:50.330
Currently,
we're working on a specification

00:20:50.420 --> 00:20:52.400
so we can handle that up to S800.

00:20:52.400 --> 00:20:55.490
Optical fiber for 200 megabits a second.

00:20:55.490 --> 00:21:00.280
In Japan, they have a form of it that
runs at 400 megabits a second.

00:21:00.280 --> 00:21:04.650
And also multi-mode glass fiber
for up to 3.2 gigabit a second.

00:21:06.020 --> 00:21:10.140
So here's a little media summary thing
that you can check out at your leisure.

00:21:10.230 --> 00:21:12.800
Basically, it's got all the cool stuff.

00:21:12.950 --> 00:21:15.640
Now I'm going to talk real
briefly about something called

00:21:16.140 --> 00:21:17.650
the FireWire Design Guide.

00:21:17.660 --> 00:21:25.830
The FireWire Design Guide is something
that started out as an internal project,

00:21:25.850 --> 00:21:28.170
but we're carrying it outside
to the rest of the world,

00:21:28.170 --> 00:21:28.870
basically.

00:21:28.880 --> 00:21:32.000
And what it is,
is a single reference source for all

00:21:32.000 --> 00:21:34.600
designers of FireWire-based systems.

00:21:34.680 --> 00:21:37.150
Not just computers, but everything.

00:21:38.420 --> 00:21:42.440
It's got guidance to get you all the
way through all those 1394 standards,

00:21:42.550 --> 00:21:46.650
because FireWire stuff is
more than just IEEE 1394.

00:21:46.730 --> 00:21:48.860
There's a gazillion things
that you have to know to do it.

00:21:48.940 --> 00:21:53.000
And it's a compilation of
experience of Apple engineers,

00:21:53.000 --> 00:21:55.520
along with a lot of other people.

00:21:55.520 --> 00:21:58.690
A lot of application notes
from various vendors,

00:21:58.930 --> 00:22:03.990
and presentations and whatnot from
the 1394 developer conferences.

00:22:04.000 --> 00:22:07.460
The whole thing's going to
be web-linked where possible.

00:22:07.700 --> 00:22:10.250
And it's actually going to
be presented as a website,

00:22:10.250 --> 00:22:13.940
which will be updated
whenever I get around to it.

00:22:14.660 --> 00:22:16.210
Hopefully fairly quickly.

00:22:16.220 --> 00:22:18.650
The document itself will be available.

00:22:18.720 --> 00:22:22.710
The first version of it will be
published at the Trade Association's

00:22:22.710 --> 00:22:24.550
meeting in Oxford this July.

00:22:29.670 --> 00:22:32.140
These are now going to be
what our recommendations are.

00:22:32.140 --> 00:22:34.360
It's a real brief summary
of what's in there.

00:22:34.400 --> 00:22:39.600
We recommend using the 6- or the
9-pin connector if at all possible.

00:22:39.600 --> 00:22:42.640
The 4-pin connector is not really
desirable for various reasons.

00:22:42.640 --> 00:22:44.030
It's not particularly rugged.

00:22:44.090 --> 00:22:47.190
People don't like it because you can
never figure out how to plug it in.

00:22:47.200 --> 00:22:50.360
And besides, you can't carry power
on this stupid thing.

00:22:52.120 --> 00:22:55.110
The socket has to reverse
backwards insertions.

00:22:55.110 --> 00:22:58.520
That means you can't plug it in
backwards with anything more than about

00:22:58.520 --> 00:23:00.800
220 newtons or something like that.

00:23:00.910 --> 00:23:02.930
This is something that
we have run across.

00:23:03.090 --> 00:23:06.580
This is one of the reasons you don't
want to buy the cheapest possible cables,

00:23:06.580 --> 00:23:09.780
because the cheapest possible cables,
the mechanical tolerances

00:23:09.850 --> 00:23:11.020
are not wonderful.

00:23:11.020 --> 00:23:13.720
And the result is,
it is possible to plug some of those

00:23:13.720 --> 00:23:17.000
suckers in with some force backwards,
and bad things happen.

00:23:18.510 --> 00:23:22.110
One of the things to help people
not do that is we are encouraging

00:23:22.110 --> 00:23:25.410
everybody to have a plug-over mold,
that's the part of the connector

00:23:25.410 --> 00:23:29.900
that's the plastic part you grip,
that has keying on it that's tactile.

00:23:29.900 --> 00:23:31.730
Where you put your thumb
is supposed to be flat,

00:23:31.850 --> 00:23:34.050
where your fingers curl around
is supposed to be curved.

00:23:34.080 --> 00:23:37.080
In the case of the 9-pin connector,
it's actually part of the

00:23:37.140 --> 00:23:38.780
13-for-B specification.

00:23:38.780 --> 00:23:42.160
If you ever see a cable that
doesn't have the nice little round

00:23:42.170 --> 00:23:45.670
on the side where you do that,
it's a non-compliant cable.

00:23:45.680 --> 00:23:47.500
It doesn't meet the standard.

00:23:48.110 --> 00:23:51.250
In the case of the legacy 13-for-B,
we missed that,

00:23:51.470 --> 00:23:53.860
but this is the recommendation
that's included.

00:23:53.860 --> 00:23:56.900
The connector orientation
is the other half of that,

00:23:56.900 --> 00:23:59.740
which is people now know
how to hold the cable.

00:23:59.740 --> 00:24:03.780
We need to make sure that the natural
state of the plug is such that people

00:24:03.780 --> 00:24:05.840
will tend to do the right thing.

00:24:06.240 --> 00:24:08.670
That means the thumb is on the top.

00:24:08.760 --> 00:24:11.850
When you plug it into something,
don't make people do this,

00:24:12.360 --> 00:24:14.920
because they'll do this,
and then you have a problem.

00:24:14.960 --> 00:24:17.380
Make sure that you do this.

00:24:17.680 --> 00:24:19.270
Now, the world is right-handed.

00:24:19.280 --> 00:24:19.900
I'm sorry.

00:24:19.900 --> 00:24:24.180
That means that the thumb,
from my point of view, here we go,

00:24:24.180 --> 00:24:27.720
from your point of view,
is going to be on your left.

00:24:31.330 --> 00:24:32.460
We tried both ways.

00:24:32.520 --> 00:24:34.650
You know, we checked out people,
which one they want to do.

00:24:35.240 --> 00:24:38.320
And most people want to do it this way,
with their thumb on the left.

00:24:38.410 --> 00:24:39.920
So that's the orientation.

00:24:39.920 --> 00:24:42.340
It is particularly true when
you try to plug in blind on

00:24:42.340 --> 00:24:43.680
something on the backside.

00:24:44.090 --> 00:24:44.520
Go like this.

00:24:44.520 --> 00:24:47.780
Try to do, you know,
when you go around and you go like this,

00:24:47.790 --> 00:24:49.110
it's kind of awkward.

00:24:49.110 --> 00:24:50.140
So people tend to do this.

00:24:50.140 --> 00:24:52.290
So when you look at it,
you end up doing the same thing,

00:24:52.290 --> 00:24:52.920
like there.

00:24:55.710 --> 00:24:58.400
Um, the connector placement.

00:24:58.650 --> 00:24:59.890
Now we're getting to physical design.

00:24:59.900 --> 00:25:03.550
You have to tie these things
as close together as possible.

00:25:03.760 --> 00:25:07.840
The electrical constraints of especially
a FireWire 800 are really difficult.

00:25:07.840 --> 00:25:10.980
The rise time of the signal
is only half a nanosecond.

00:25:10.980 --> 00:25:13.080
That's a one gigahertz signal.

00:25:13.080 --> 00:25:17.350
It turns out even FireWire 400 had that,
and people built very fast PHYs,

00:25:17.350 --> 00:25:20.100
and the result was the
rise time was very quick.

00:25:21.350 --> 00:25:24.600
Um, if you want to have both front
and back panel connectors,

00:25:24.640 --> 00:25:26.230
it is best to use two PHYs.

00:25:26.320 --> 00:25:27.220
You don't have to.

00:25:27.220 --> 00:25:30.040
If you're real, real careful and you have
a big budget like Apple,

00:25:30.060 --> 00:25:32.810
it's possible to design the
system so that you can have a

00:25:32.810 --> 00:25:35.020
connector far away from the PHY.

00:25:35.080 --> 00:25:36.420
But I warn you, it's hard.

00:25:36.460 --> 00:25:38.760
Save yourself a lot of design effort.

00:25:38.760 --> 00:25:40.600
Put us another PHY out there.

00:25:40.600 --> 00:25:42.680
A PHY is cheaper than a
design effort unless you build

00:25:42.680 --> 00:25:43.820
a couple million of them.

00:25:45.070 --> 00:25:46.860
XSERVs do this, by the way.

00:25:46.920 --> 00:25:50.700
If you use PHY ICs,
make sure you use up-to-date parts.

00:25:50.770 --> 00:25:52.950
The technology is
moving around real fast.

00:25:52.950 --> 00:25:55.820
And even on legacy PHYs,
the new PHYs that have just

00:25:55.820 --> 00:25:58.720
come out in the last year or
so are in much lower power,

00:25:58.720 --> 00:26:00.760
so you should consider using them.

00:26:00.820 --> 00:26:05.050
Power, yes, you should use power.

00:26:05.060 --> 00:26:09.330
You should be real familiar with the
34 Trade Association specifications

00:26:09.330 --> 00:26:09.790
for this.

00:26:09.790 --> 00:26:10.700
They're available.

00:26:11.920 --> 00:26:15.200
The major system controllers,
basically CPUs and television sets,

00:26:15.200 --> 00:26:21.840
some people say set-top boxes,
but you know, should be power producers.

00:26:22.000 --> 00:26:25.120
It's really embarrassing to have
your iPod and go up to your digital

00:26:25.120 --> 00:26:27.160
television set and the battery drains.

00:26:29.430 --> 00:26:32.450
You know, it's important.

00:26:32.960 --> 00:26:35.590
All Macs are power
producers at least 7 watts.

00:26:35.820 --> 00:26:37.270
At least 7 watts.

00:26:37.460 --> 00:26:39.320
Okay, count on it.

00:26:39.400 --> 00:26:43.180
All peripheral devices using 5
watts or less should be bus-powered.

00:26:43.180 --> 00:26:45.030
Consumers hate wall warts.

00:26:45.030 --> 00:26:47.060
Don't make them use them.

00:26:47.190 --> 00:26:47.490
They hate them.

00:26:47.490 --> 00:26:50.320
Unless you're plugging into a Windows PC,
that's right.

00:26:50.340 --> 00:26:53.670
Be aware of the voltage and power limits.

00:26:53.670 --> 00:26:57.270
It can be 33 volts out
there on the cable.

00:26:57.270 --> 00:26:58.790
Be aware of that.

00:26:59.580 --> 00:27:04.640
Macs use anything from
a low of about 9 volts,

00:27:04.770 --> 00:27:06.880
that's right,
to a high of about 28 volts.

00:27:06.880 --> 00:27:09.340
So if you're going to plug into a Mac,
you have to tolerate

00:27:09.340 --> 00:27:10.420
that kind of a range.

00:27:10.420 --> 00:27:14.250
The power providers have to limit
the current outrush because,

00:27:14.260 --> 00:27:16.820
gee,
there could be a short out there and,

00:27:16.820 --> 00:27:20.980
you know, people don't like flaming
cables or smoking systems.

00:27:20.980 --> 00:27:24.320
So you can use that with various ways.

00:27:24.470 --> 00:27:25.580
Prefer a resettable fuse.

00:27:25.580 --> 00:27:28.010
There's some brand-new
semiconductor devices that

00:27:28.010 --> 00:27:29.400
are very fast current limits.

00:27:29.460 --> 00:27:32.540
and they don't cost too much,
and you should consider them as well.

00:27:32.730 --> 00:27:34.750
Let's see.

00:27:34.760 --> 00:27:35.490
Isolation.

00:27:35.490 --> 00:27:38.920
Only needed for exceptional environments,
but all you guys are exceptional,

00:27:38.920 --> 00:27:39.740
so I don't know.

00:27:39.760 --> 00:27:43.500
But really, it's needed for long cables.

00:27:43.500 --> 00:27:45.990
So if you're building anything
that's a network or a performance

00:27:45.990 --> 00:27:49.890
system or something like that,
you should consider isolation.

00:27:49.920 --> 00:27:55.210
If you're going to use isolation,
use 1394b beta mode for that.

00:27:55.230 --> 00:27:58.320
You can do it doing the legacy 1394,
but it's a pain.

00:27:59.020 --> 00:28:00.710
Once again,
it's one of those really awful

00:28:00.720 --> 00:28:03.140
design efforts that you'd
save yourself a lot of time.

00:28:03.140 --> 00:28:06.680
Just use the file you can buy off the
shelf and build a beta connection.

00:28:08.240 --> 00:28:09.370
Shielding.

00:28:09.400 --> 00:28:13.550
This is complicated because there's
two types of shield in their system.

00:28:13.560 --> 00:28:17.430
There's the outer shield that's the
one that you use to protect yourself

00:28:17.450 --> 00:28:19.580
from the various radiation modes.

00:28:19.620 --> 00:28:23.440
That should be AC-isolated
from the ground,

00:28:23.440 --> 00:28:28.150
the power ground,
the phi ground inside the system.

00:28:28.170 --> 00:28:29.690
It should be AC-isolated.

00:28:29.700 --> 00:28:33.120
That's because you've got a lot of noise
in the outside world and you want that

00:28:33.120 --> 00:28:35.240
slipping into your system on the outside.

00:28:35.620 --> 00:28:38.380
Similarly, you don't want the digital
ground and all that mess,

00:28:38.380 --> 00:28:39.840
you know,
that gigawatts of power in there

00:28:39.840 --> 00:28:40.860
getting out onto your shield.

00:28:40.860 --> 00:28:42.540
So those should be isolated.

00:28:42.540 --> 00:28:45.750
This is a pain in the butt
for the four-pin connector,

00:28:45.750 --> 00:28:48.440
one of the primary
reasons Apple hates it,

00:28:48.440 --> 00:28:50.040
because the shielding is awful.

00:28:50.040 --> 00:28:51.200
It's very hard to do.

00:28:51.200 --> 00:28:57.020
The cable shield, on the other hand,
should be DC-connected to that same pair.

00:28:57.040 --> 00:29:04.140
The reason you want to be DC-connected is
this is the backup connection for ground.

00:29:04.320 --> 00:29:06.680
In case you have a dirty connector,
you know,

00:29:06.680 --> 00:29:09.520
the ground pin is wrong or something,
or you're using one of those cheap

00:29:09.600 --> 00:29:12.650
connectors that doesn't do it right,
you want to make sure you

00:29:12.650 --> 00:29:14.660
get a good ground connection.

00:29:14.660 --> 00:29:17.460
If you don't,
you can hear or see power going out

00:29:17.770 --> 00:29:21.710
and the only return path for that power
coming back is on the twisted pair,

00:29:21.720 --> 00:29:23.180
the data pair, and you blow up your phi.

00:29:23.220 --> 00:29:24.960
It's bad.

00:29:25.000 --> 00:29:25.940
Don't do that.

00:29:26.040 --> 00:29:28.120
So make sure you do that.

00:29:28.190 --> 00:29:31.400
Typically only one place in the
system at the power supply or in

00:29:31.400 --> 00:29:33.060
a portable system like an iPod.

00:29:33.060 --> 00:29:35.560
There's something called a virtual ground
where you connect everything together.

00:29:35.560 --> 00:29:39.970
This can be done through a ferrite
if you don't want noise getting out,

00:29:39.980 --> 00:29:41.110
and that's typically what we do.

00:29:41.120 --> 00:29:47.140
What about protection from
all that shocks and whatnot?

00:29:47.140 --> 00:29:48.680
You have to protect that.

00:29:48.820 --> 00:29:50.860
Unfortunately,
we can't give you a general guideline

00:29:50.860 --> 00:29:52.320
because it's very phi-dependent.

00:29:52.320 --> 00:29:54.540
Fortunately,
all the phi vendors give very good app

00:29:54.540 --> 00:29:56.290
notes on what the right thing to do is.

00:29:56.300 --> 00:29:57.920
What about filters?

00:29:57.940 --> 00:29:59.210
There's various modes of filtering.

00:29:59.270 --> 00:30:01.960
The best thing we can
suggest to you is if you can,

00:30:01.960 --> 00:30:02.590
don't.

00:30:03.060 --> 00:30:06.060
Use really good design
practices and don't put external

00:30:06.080 --> 00:30:07.500
components through there.

00:30:07.620 --> 00:30:10.820
They mess up the system,
the signal quality of the system.

00:30:10.850 --> 00:30:14.060
If you have to,
there's various ways you can do that.

00:30:14.120 --> 00:30:17.520
It's talked about here and some of
the application notes I'll talk later.

00:30:17.560 --> 00:30:20.300
Layout rules for the data lines.

00:30:20.370 --> 00:30:22.560
These are the 800 megabit a second lines.

00:30:22.580 --> 00:30:23.980
No 90 degree corners.

00:30:24.080 --> 00:30:25.820
This is going to drive
all the layout guys nuts.

00:30:25.840 --> 00:30:27.670
No 90 degree corners.

00:30:27.940 --> 00:30:30.730
No vias on the twisted pair.

00:30:30.800 --> 00:30:31.780
This will really drive your guys nuts.

00:30:31.940 --> 00:30:32.460
So, that's the first thing.

00:30:32.460 --> 00:30:32.960
Next slide.

00:30:32.960 --> 00:30:33.040
Next slide.

00:30:33.040 --> 00:30:36.880
Equal distances for the
signals in the pair,

00:30:36.880 --> 00:30:40.820
keep the pairs the same,
minimize the distance between

00:30:40.820 --> 00:30:41.800
the connector and the PHY.

00:30:41.920 --> 00:30:44.930
Put the termination as near
as the PHY as possible.

00:30:44.930 --> 00:30:46.720
One of the things that's going
to happen when I publish,

00:30:46.720 --> 00:30:50.870
I'll give you an example layout of
how to do all this the way I say.

00:30:51.090 --> 00:30:54.110
And then you can adapt
it to your purposes.

00:30:54.390 --> 00:30:56.240
Higher layers.

00:30:56.370 --> 00:30:57.770
You'll have to wait for a later edition,
sorry.

00:30:59.080 --> 00:31:00.140
Testing.

00:31:00.140 --> 00:31:02.740
Prashant,
have you already talked about this?

00:31:02.740 --> 00:31:03.760
Okay.

00:31:03.760 --> 00:31:06.820
So, anyway, the Trade Association does
compliance testing.

00:31:06.820 --> 00:31:10.410
We highly encourage you to
go through that procedure.

00:31:10.410 --> 00:31:13.360
If you came here, it was free.

00:31:14.850 --> 00:31:15.130
Oh, well.

00:31:15.170 --> 00:31:15.680
Yeah.

00:31:15.760 --> 00:31:19.210
If you want that real FireWire
market that's going to say

00:31:19.310 --> 00:31:22.250
FireWire 1394 compliant,
you have to go through this procedure.

00:31:23.600 --> 00:31:26.200
Here's a set of references that
you can get in your final thing.

00:31:26.200 --> 00:31:30.100
I particularly recommend this first one,
which is EMI Board Design and

00:31:30.120 --> 00:31:34.410
Layout Considerations from TI,
and the final one, which is the gear,

00:31:34.650 --> 00:31:38.760
how to build with the FireWire 322, 323.

00:31:38.760 --> 00:31:41.300
Even if you don't use
those particular parts,

00:31:41.300 --> 00:31:43.580
they're really, really well written.

00:31:43.660 --> 00:31:47.710
There will be a FireWire 800
version of the TI Design Guide,

00:31:47.710 --> 00:31:51.260
which will be really neat
when it's finally finished.

00:31:51.260 --> 00:31:52.130
I'm reviewing it now.

00:31:52.960 --> 00:31:56.420
So, at this point,
I'd like to pass it over to Eric,

00:31:56.490 --> 00:32:00.100
who will tell you the two slides that
are necessary to do FireWire 800.

00:32:00.100 --> 00:32:03.730
Okay, thanks, Mike.

00:32:09.090 --> 00:32:12.070
As I said, this won't take long because
pretty much everything in

00:32:12.150 --> 00:32:13.680
FireWire 800 is in the hardware.

00:32:13.680 --> 00:32:19.460
We support FireWire 800 on these
products that have the ports in Mac OS X,

00:32:19.460 --> 00:32:21.300
version 10.2.4, and later.

00:32:21.300 --> 00:32:23.870
These are the same
products I showed earlier,

00:32:23.880 --> 00:32:26.070
all of our products
that have FireWire 800.

00:32:26.080 --> 00:32:30.500
So if you make a FireWire 800 product,
your customers don't need to

00:32:30.500 --> 00:32:31.930
download any new drivers from us.

00:32:31.960 --> 00:32:33.860
It's already in there in
the Mac that they bought.

00:32:35.510 --> 00:32:36.760
Now, let's look inside a Mac.

00:32:36.890 --> 00:32:42.190
Mike talked about the capability to
have multiple speeds on a single PHY,

00:32:42.190 --> 00:32:45.000
and we do that in our current products,
like the new G5 Tower.

00:32:45.000 --> 00:32:48.050
It's really important to
understand how that works,

00:32:48.170 --> 00:32:49.870
because it's fairly easy to get it wrong.

00:32:52.200 --> 00:32:54.890
In the Mac,
at the very bottom of the software,

00:32:54.890 --> 00:32:58.680
or below the software stack,
there's two pieces of silicon that

00:32:58.680 --> 00:33:00.740
make up the FireWire interface.

00:33:00.780 --> 00:33:04.640
The link is the layer that does
DMA and knows what packets are.

00:33:04.640 --> 00:33:07.780
The PHY is the layer that actually
drives signals on the bus.

00:33:07.780 --> 00:33:11.100
And with FireWire 800,
the PHY can have different ports

00:33:11.230 --> 00:33:13.120
with different capabilities.

00:33:13.120 --> 00:33:15.780
The figure here shows one
PHY that has two ports,

00:33:15.940 --> 00:33:19.600
each connected to nine-pin
connectors for FireWire 800,

00:33:20.060 --> 00:33:23.650
and one port that's connected to a
six-pin connector for FireWire 400.

00:33:23.700 --> 00:33:30.390
It is essential that the PHY knows that
it has a six-pin connector out there.

00:33:30.420 --> 00:33:31.900
Why is that?

00:33:33.160 --> 00:33:35.880
There's a cable that has a 9-pin
connector at one end and a 6-pin

00:33:35.960 --> 00:33:37.180
connector at the other end.

00:33:37.180 --> 00:33:41.960
Suppose we connect that cable at the
9-pin end to a FireWire 800 device,

00:33:41.960 --> 00:33:45.980
and at the 6-pin end,
we plug it into that 400 port up there.

00:33:45.980 --> 00:33:50.320
Well, the PHYs at both ends of that
cable are FireWire 800 PHYs.

00:33:50.420 --> 00:33:52.980
If they don't know any better,
they'll try to establish

00:33:52.980 --> 00:33:56.760
a FireWire 800 connection,
but they only have 6 pins to work with,

00:33:56.760 --> 00:33:58.210
so it's not going to work.

00:33:58.280 --> 00:33:59.880
There's no fallback.

00:33:59.970 --> 00:34:02.460
It doesn't say,
this doesn't look so good, let's try 400.

00:34:02.800 --> 00:34:05.900
It's not going to fall back
to a reliable 400 connection.

00:34:05.910 --> 00:34:09.390
Instead, it's going to stick with an
unreliable 800 connection.

00:34:09.400 --> 00:34:10.840
That would be really bad.

00:34:10.860 --> 00:34:13.250
Now,
this problem is really easy to avoid.

00:34:13.260 --> 00:34:15.240
Just read the design notes for the PHY.

00:34:15.240 --> 00:34:20.180
Each port on the PHY has a pin that tells
it what kind of connector is on there.

00:34:20.180 --> 00:34:23.170
All you have to do is tie it
to ground or tie it to high.

00:34:23.180 --> 00:34:24.570
The PHY will know what to do.

00:34:24.580 --> 00:34:27.400
But one developer already got
this wrong on one product.

00:34:27.430 --> 00:34:28.870
We let them know, and they're fixing it.

00:34:28.900 --> 00:34:30.920
So if you're going to mix
ports on your product,

00:34:30.980 --> 00:34:33.800
please be sure to do this right,
otherwise the customer

00:34:33.800 --> 00:34:35.030
will have a bad experience.

00:34:37.270 --> 00:34:39.780
Okay, here's the software stack
from Mac OS X FireWire.

00:34:39.780 --> 00:34:42.530
There's much more detail about
this in the other session,

00:34:42.640 --> 00:34:43.380
FireWire In-Depth.

00:34:43.440 --> 00:34:47.390
Let me briefly explain the layers here
and how they relate to FireWire 800.

00:34:47.400 --> 00:34:49.840
Down there at the bottom,
you see the two parts

00:34:49.840 --> 00:34:52.820
from the previous slide,
the OHCI layer and the PHY.

00:34:52.820 --> 00:34:55.340
When those are detected,
I/O Kit loads the higher

00:34:55.340 --> 00:34:56.780
layers into the kernel.

00:34:56.780 --> 00:35:00.010
FireWire's all in the kernel
because it's a bootable service.

00:35:00.020 --> 00:35:02.200
We can take a page fault
from a FireWire device.

00:35:02.220 --> 00:35:04.430
At the bottom, you see the controller.

00:35:04.510 --> 00:35:06.520
That's our device driver for OHCI.

00:35:07.100 --> 00:35:08.760
In the middle, you see the family.

00:35:08.760 --> 00:35:10.290
That's the sharing layer.

00:35:10.300 --> 00:35:15.150
It lets different applications, devices,
drivers, all peacefully cooperate

00:35:15.150 --> 00:35:18.450
on one FireWire bus without
stepping on each other's toes.

00:35:18.460 --> 00:35:20.950
Above that, we have protocols.

00:35:20.950 --> 00:35:24.060
This is where devices
begin to differentiate.

00:35:24.060 --> 00:35:28.100
A device could be SBP2,
like an iPod or a printer or a camera.

00:35:28.100 --> 00:35:30.900
It could be DV,
like a camcorder or a television

00:35:30.940 --> 00:35:33.240
or the set-top box Mike mentioned.

00:35:33.240 --> 00:35:36.830
We provide a variety of common
protocols there in the kernel.

00:35:37.100 --> 00:35:39.820
We also provide what's
called user clients,

00:35:39.880 --> 00:35:43.530
or officially device interfaces,
so that you can access all of

00:35:43.530 --> 00:35:47.120
these services from applications,
either by writing an application or

00:35:47.250 --> 00:35:51.260
by writing a plug-in that executes
in the context of an application.

00:35:51.260 --> 00:35:54.550
If you do that, the development,
and especially debugging,

00:35:54.570 --> 00:35:55.900
is a whole lot easier.

00:35:55.900 --> 00:35:59.370
We've done everything we can
to facilitate your doing that.

00:36:00.960 --> 00:36:02.190
Now, what about FireWire 800?

00:36:02.200 --> 00:36:03.980
I didn't say anything there.

00:36:04.160 --> 00:36:05.700
Hardly anything has changed.

00:36:05.720 --> 00:36:08.450
There's a new speed code
to indicate the 800 speed.

00:36:08.460 --> 00:36:11.500
The number's three,
in case you need to know.

00:36:11.560 --> 00:36:13.030
There is new topology analysis.

00:36:13.130 --> 00:36:17.200
Because there can be PHYs out there
with a mixture of speed capabilities,

00:36:17.200 --> 00:36:18.550
we have to go figure that out.

00:36:18.650 --> 00:36:21.140
In FireWire 400, every PHY had one speed.

00:36:21.140 --> 00:36:24.300
It was either 400 or 200 or 100.

00:36:24.310 --> 00:36:27.470
But some of our products have this mix,
and some of yours might, too.

00:36:27.540 --> 00:36:30.850
So FireWire family knows
how to figure that out.

00:36:31.270 --> 00:36:32.600
Hardly anything else has changed.

00:36:32.600 --> 00:36:36.180
The SPP2 layer knows how to use Speed 3,
but most drivers don't

00:36:36.300 --> 00:36:37.800
have to be changed at all.

00:36:37.800 --> 00:36:39.540
What might you have to do?

00:36:39.540 --> 00:36:42.810
If you're making hardware,
of course you have to go get new silicon,

00:36:42.810 --> 00:36:45.780
a new link,
and a new PHY that can do FireWire 800.

00:36:47.200 --> 00:36:50.090
Like Mike described,
please use the correct 9-pin socket.

00:36:50.360 --> 00:36:54.340
Today, the only silicon you can get
supports fully bilingual operation.

00:36:54.340 --> 00:36:56.940
So unless you have some
reason to lock that out,

00:36:57.010 --> 00:37:00.080
use the bilingual connector so
your product can be connected to

00:37:00.080 --> 00:37:02.440
as many other products as possible.

00:37:02.570 --> 00:37:05.110
And as I said,
configure the ports correctly

00:37:05.120 --> 00:37:07.780
if you do have a 6-pin or,
for some reason,

00:37:07.780 --> 00:37:09.930
a 4-pin connector on that PHY.

00:37:10.550 --> 00:37:13.870
As far as software goes,
you probably don't have to do anything.

00:37:13.870 --> 00:37:16.900
Mac OS X performs a speed
analysis on the bus,

00:37:16.900 --> 00:37:19.740
figures out the fastest path
between your device and the

00:37:19.740 --> 00:37:22.910
Mac and every other device,
and will automatically send your

00:37:23.020 --> 00:37:26.130
packets at the best speed that
they can make it to your device.

00:37:26.360 --> 00:37:29.790
You might need to know the speed
for certain kinds of devices,

00:37:29.790 --> 00:37:32.220
such as an isochronous device.

00:37:32.220 --> 00:37:35.810
The IIDC,
or so-called DCAM type of camera,

00:37:35.810 --> 00:37:39.400
for example,
has a register in it where software tells

00:37:39.400 --> 00:37:41.250
it what speed it should send video at.

00:37:41.320 --> 00:37:44.320
If that's going to be 800,
software will need to know

00:37:44.320 --> 00:37:45.920
to put a 3 in that register.

00:37:45.920 --> 00:37:48.120
So that's one case where you
might need to know the speed.

00:37:51.960 --> 00:37:55.150
Our Macintosh systems with
FireWire 800 ports support

00:37:55.150 --> 00:37:58.540
FireWire 800 in the boot ROM,
also known as Open Firmware.

00:37:58.750 --> 00:38:02.030
These products can all boot
from FireWire 800 hard drives.

00:38:02.040 --> 00:38:08.480
They can boot through 400 hubs or other
devices if you have an 800 hard drive

00:38:08.530 --> 00:38:10.060
at some remote location on the bus.

00:38:10.080 --> 00:38:14.590
And they all support target disk mode
at the FireWire 800 speed as well.

00:38:17.600 --> 00:38:18.300
What else is new?

00:38:18.300 --> 00:38:21.670
The other session went into some
detail about some of these topics.

00:38:21.740 --> 00:38:24.080
We support the
Internet Protocol on FireWire now,

00:38:24.230 --> 00:38:27.400
and we've made it a good
deal faster in Mac OS X.

00:38:27.400 --> 00:38:35.990
We support SBP3, the Fast Start Speed-Up,
which will improve disk

00:38:35.990 --> 00:38:35.990
performance for some kinds of I/O.

00:38:36.600 --> 00:38:38.930
The other session has a great
deal of information about how

00:38:38.930 --> 00:38:41.460
isochronous transfer works,
so please check out those slides

00:38:41.460 --> 00:38:42.570
if you're interested in that.

00:38:42.600 --> 00:38:47.160
We've also improved what you can
do with DCLs by adding error status

00:38:47.160 --> 00:38:49.290
and variable length capabilities.

00:38:49.310 --> 00:38:51.730
We've added a bunch of
new features for AVC,

00:38:51.730 --> 00:38:54.310
especially allowing
the Mac to be a target.

00:38:54.320 --> 00:38:57.080
We were really good at telling
other devices what to do.

00:38:57.080 --> 00:38:59.840
The camcorder should play,
the TV should go to channel 12.

00:38:59.840 --> 00:39:02.100
Now we can let them tell us what to do.

00:39:02.100 --> 00:39:05.280
There are certain receivers or
set-top boxes that may work.

00:39:05.880 --> 00:39:08.990
They may offer some great new
capabilities if you write software

00:39:09.000 --> 00:39:11.840
to listen to them and let them
tell the Mac what they're doing.

00:39:14.390 --> 00:39:16.390
Now let's review some of the
resources that we have to help

00:39:16.440 --> 00:39:17.800
you develop for FireWire 800.

00:39:17.800 --> 00:39:20.400
We publish software development kits.

00:39:20.460 --> 00:39:22.680
These are available for
free download on the web.

00:39:22.680 --> 00:39:25.530
This is probably our biggest
product as a software team,

00:39:25.580 --> 00:39:28.920
so please give us feedback if
these aren't meeting your needs.

00:39:28.920 --> 00:39:33.200
They have lots and lots of sample code,
especially for developing in application

00:39:33.200 --> 00:39:34.940
space using the user clients.

00:39:34.940 --> 00:39:40.060
There's documentation, there's tools,
there's pre-release components sometimes.

00:39:40.060 --> 00:39:42.740
If we have new versions
of the FireWire software,

00:39:42.790 --> 00:39:44.090
you can try them out.

00:39:44.430 --> 00:39:46.870
Check out bug fixes before
your customers see them.

00:39:46.870 --> 00:39:51.250
It's available on the web at
the location listed there.

00:39:53.830 --> 00:39:56.980
Apple now has an offering called
the FireWire Reference Platform.

00:39:56.980 --> 00:39:58.090
This is completely different.

00:39:58.090 --> 00:40:00.430
It's a fully independent software stack.

00:40:00.490 --> 00:40:02.000
It's not related to Mac OS X.

00:40:02.000 --> 00:40:07.130
This is designed for embedded FireWire
software or firmware development.

00:40:07.140 --> 00:40:11.240
If you're making a set-top box, a TV,
some multi-function device,

00:40:11.240 --> 00:40:14.900
you can get a big head start using
the FireWire Reference Platform.

00:40:14.900 --> 00:40:17.940
It has code especially
for AVC command sets,

00:40:17.940 --> 00:40:19.930
SBP2, other protocols.

00:40:19.960 --> 00:40:22.940
You can save a lot of
time by starting here.

00:40:23.760 --> 00:40:26.280
There's a whole session on
this topic tomorrow afternoon.

00:40:26.300 --> 00:40:28.700
It's track 508.

00:40:30.080 --> 00:40:32.960
We hold events for FireWire developers.

00:40:33.020 --> 00:40:33.910
We hold plug fests.

00:40:34.000 --> 00:40:37.240
As Mike mentioned,
there is a TA-approved plug

00:40:37.440 --> 00:40:39.760
fest happening right now.

00:40:39.760 --> 00:40:43.860
We had 40 devices submitted
by WWDC attendees.

00:40:43.930 --> 00:40:46.260
They're being tested now,
and they can receive the

00:40:46.340 --> 00:40:49.510
FireWire compliance logo
if they pass this testing.

00:40:50.210 --> 00:40:52.500
We hold these at Macworld and at WWDC.

00:40:52.500 --> 00:40:56.900
We hold developer kitchens where we
bring the FireWire software engineers.

00:40:56.900 --> 00:41:00.660
We get together with developers
for hands-on debugging tutorials.

00:41:00.660 --> 00:41:02.230
Often we introduce a new SDK.

00:41:02.230 --> 00:41:05.260
A number of the engineers are
here today in the front row.

00:41:05.260 --> 00:41:07.730
If you have questions after the session,
they'll be happy to talk to you.

00:41:07.740 --> 00:41:10.080
If you'd like to attend
one of these kitchens,

00:41:10.080 --> 00:41:12.010
please contact Developer Relations.

00:41:12.160 --> 00:41:14.580
We simply hold them on
demand when you're ready,

00:41:14.580 --> 00:41:16.340
either in Cupertino or in Tokyo.

00:41:16.480 --> 00:41:17.980
We've had about 10 of these to date.

00:41:17.980 --> 00:41:19.530
They're a lot of fun,
so please let us know if

00:41:19.540 --> 00:41:20.680
you'd like to attend one.

00:41:20.680 --> 00:41:26.340
We also participate in the official
1394 TA interoperability workshops.

00:41:26.420 --> 00:41:29.940
These are a bit more formal than
what we do at our own plug fests.

00:41:29.940 --> 00:41:31.950
There's the logo Mike mentioned earlier.

00:41:31.950 --> 00:41:34.190
There's three kinds of
testing at this event.

00:41:34.240 --> 00:41:36.470
You get really rigorous
testing of your device.

00:41:36.480 --> 00:41:39.410
We always go because we learn
a lot about our own devices as

00:41:39.410 --> 00:41:41.380
well as about developer devices.

00:41:41.380 --> 00:41:42.850
These are open to non-members.

00:41:42.850 --> 00:41:46.140
They're really valuable and I highly
recommend that you participate.

00:41:48.080 --> 00:41:50.340
The 1394 TA promotes 1394.

00:41:50.340 --> 00:41:51.720
It organizes trade show events.

00:41:51.740 --> 00:41:55.480
It also publishes all of the AVC command
set standards and a number of other

00:41:55.480 --> 00:42:00.780
standards that you may need to create
drivers or devices on FireWire.

00:42:03.140 --> 00:42:05.880
Now let's look at some FireWire tools.

00:42:05.980 --> 00:42:09.010
We have new tools to offer for you this
year that will help you to develop for

00:42:09.110 --> 00:42:12.910
FireWire 800 and to develop for Mac OS X.

00:42:13.670 --> 00:42:16.310
Mike and I both talked about the PHY.

00:42:16.310 --> 00:42:18.420
What exactly does this chip do?

00:42:18.420 --> 00:42:21.360
There's a tool for it,
so this is why I'm explaining it.

00:42:21.440 --> 00:42:23.720
PHY stands for Physical Layer.

00:42:23.720 --> 00:42:26.260
It's the bottom of the interface.

00:42:26.260 --> 00:42:29.690
The PHY chip drives differential
voltages on the cable to make

00:42:29.690 --> 00:42:32.480
ones and zeros on the bus,
and then it receives the same

00:42:32.510 --> 00:42:35.580
signals and turns them back into
packets that we can understand.

00:42:35.580 --> 00:42:39.130
If you have multiple ports,
the PHY acts as a repeater.

00:42:39.360 --> 00:42:41.710
The PHY also contains
all of the arbitration.

00:42:41.720 --> 00:42:44.920
It's all done autonomously
without software drivers,

00:42:44.920 --> 00:42:46.360
so it goes very fast.

00:42:46.360 --> 00:42:49.090
This means a hub can participate
even though it doesn't have

00:42:49.150 --> 00:42:50.640
a link layer or a controller.

00:42:52.040 --> 00:42:54.300
In comparison,
the link is a higher-level function.

00:42:54.300 --> 00:42:57.190
It knows how to form packets,
compute checksums,

00:42:57.190 --> 00:43:02.870
it knows what isochronous cycle time is,
and the link is where the DMA is located.

00:43:04.410 --> 00:43:08.890
The PHY is not programmable,
but it does have a small register file.

00:43:09.210 --> 00:43:11.050
Each register is 8 bits wide.

00:43:11.110 --> 00:43:13.880
Here's the map as shown
from the 1394A spec.

00:43:13.960 --> 00:43:15.300
There's a lot of
interesting things in here,

00:43:15.300 --> 00:43:16.380
like Mike talked about.

00:43:16.410 --> 00:43:18.330
Let's go to the 1394B PHY.

00:43:18.330 --> 00:43:20.380
You can see it added a few more bits.

00:43:20.440 --> 00:43:23.380
If there was a loop detected on
the bus that had to be broken,

00:43:23.590 --> 00:43:26.600
there will be a bit set in
the corresponding PHY telling

00:43:26.600 --> 00:43:28.230
you where this happened.

00:43:28.340 --> 00:43:33.180
So we have a tool now that will let
you look at what's in the FI register.

00:43:33.580 --> 00:43:34.910
You may not need to do this.

00:43:34.920 --> 00:43:36.560
This isn't something customers would do.

00:43:36.820 --> 00:43:41.080
But many interesting things that happen
on the bus may be explained by examining

00:43:41.080 --> 00:43:46.050
the FI registers to find out why it's
doing that particular interesting thing.

00:43:46.370 --> 00:43:48.480
This tool is called FiTool.

00:43:48.660 --> 00:43:53.450
It's a real-time
Fi Register viewer and editor.

00:43:53.520 --> 00:43:55.520
It has integrated documentation.

00:43:55.690 --> 00:43:58.660
If you find a bit in the Fi you
don't remember quite what it does,

00:43:58.670 --> 00:44:01.640
just move the mouse over that bit,
the documentation will

00:44:01.640 --> 00:44:03.280
appear right from the spec.

00:44:03.420 --> 00:44:06.340
You can look at the Fi in your
own Mac to see what it's doing,

00:44:06.360 --> 00:44:09.670
or you can reach out across the
FireWire bus and look at the Fi in

00:44:09.670 --> 00:44:14.940
another device if it's 1394a or
1394b and find out what it's doing.

00:44:15.140 --> 00:44:16.930
And this tool needs no special hardware.

00:44:16.940 --> 00:44:19.150
It runs on all the products
that we sell today,

00:44:19.170 --> 00:44:22.200
anything with an open HCI interface.

00:44:22.280 --> 00:44:23.390
So let's take a demo of this.

00:44:23.440 --> 00:44:25.850
Let's move to the demo system.

00:44:38.840 --> 00:44:43.200
Here's FiTool.

00:44:43.250 --> 00:44:46.440
What you can see in the main portion
of the display is the Fi register map,

00:44:46.450 --> 00:44:47.940
just like on the slides.

00:44:48.020 --> 00:44:51.140
But now,
the fields are pop-up menus and check

00:44:51.140 --> 00:44:53.540
boxes that actually do things to the Fi.

00:44:53.580 --> 00:44:55.750
And you can see the
integrated documentation.

00:44:55.810 --> 00:44:57.930
As I move the mouse
over the various fields,

00:44:58.020 --> 00:45:02.350
the documentation for that field appears
right down at the bottom of the screen.

00:45:03.800 --> 00:45:06.040
Right now,
this particular machine is an older

00:45:06.090 --> 00:45:08.870
G4 tower that only has FireWire 400,
so you can see some of

00:45:08.870 --> 00:45:11.990
the fields are reserved,
and it's showing information

00:45:11.990 --> 00:45:14.810
from the spec for the 1394A.

00:45:14.820 --> 00:45:17.270
If you want to see the 1394B spec,
because some of these

00:45:17.360 --> 00:45:19.250
things have changed,
you can just pick that,

00:45:19.250 --> 00:45:22.470
and now you get a little new information,
like the fact that this field no

00:45:22.660 --> 00:45:24.680
longer has any meaning in 1394B.

00:45:27.000 --> 00:45:29.200
FiTool knows about all
the registers in the spec.

00:45:29.200 --> 00:45:32.490
Although it doesn't show
anything for the rest of them,

00:45:32.490 --> 00:45:36.130
there are type-in fields over here,
so if you want to change a value

00:45:36.130 --> 00:45:38.970
in some vendor-unique register,
you can still do that.

00:45:39.040 --> 00:45:41.900
Also, if you don't like binary numbering,
you can change that to something

00:45:41.900 --> 00:45:43.000
a little more sensible.

00:45:44.950 --> 00:45:47.600
On the left column over here,
there's a real-time summary of

00:45:47.630 --> 00:45:48.980
each of the ports on this PHY.

00:45:48.980 --> 00:45:51.530
There's also a summary of
what kind of PHY this is.

00:45:51.560 --> 00:45:53.700
We can see this PHY is made by Lucent.

00:45:53.740 --> 00:45:54.670
It has three ports.

00:45:54.790 --> 00:45:57.340
It's capable of S100 through S400.

00:45:57.360 --> 00:45:58.950
This is what the three ports are doing.

00:45:59.050 --> 00:46:01.190
Right now,
none of them is plugged into anything.

00:46:01.200 --> 00:46:04.260
I'm going to connect my
iPod to one of the ports,

00:46:04.270 --> 00:46:07.180
and it immediately shows up on port 1.

00:46:07.180 --> 00:46:09.840
We saw it flicker a little
as the port was negotiated.

00:46:10.700 --> 00:46:15.840
Port 1, the iPod is now switching from
MP3 mode into FireWire Disk mode,

00:46:15.960 --> 00:46:18.140
and it causes a couple bus
resets when that happens.

00:46:18.140 --> 00:46:19.790
So you saw the port change several times.

00:46:19.800 --> 00:46:22.420
But now it has settled
down to an S400 connection.

00:46:22.420 --> 00:46:26.250
Connect and Bias are a summary
of these bits over here.

00:46:26.280 --> 00:46:28.110
But these are showing zero.

00:46:28.110 --> 00:46:29.040
Why is that?

00:46:29.060 --> 00:46:32.100
The bottom eight registers are paged.

00:46:32.100 --> 00:46:35.130
There's a page select...

00:46:35.310 --> 00:46:39.240
They're paged for different
groups of information,

00:46:39.240 --> 00:46:42.010
and there's also a port select
register to see each port.

00:46:42.020 --> 00:46:46.660
So if I ask to see port 1,
now these registers correspond to port 1,

00:46:46.660 --> 00:46:51.610
and you can see connect is 1, bias is 1,
child is 1, and the speed is 400.

00:46:51.620 --> 00:46:53.750
It all agrees with what's
over here in the summary.

00:46:55.090 --> 00:46:56.390
We can go right in and make changes.

00:46:56.400 --> 00:46:58.000
I can click on the disable bit.

00:46:58.160 --> 00:46:59.390
Now that port is disabled.

00:46:59.400 --> 00:47:01.710
The iPod has been unplugged.

00:47:03.110 --> 00:47:04.650
And now it's back.

00:47:04.820 --> 00:47:06.660
We can cause a bus reset.

00:47:06.690 --> 00:47:09.210
That bit is self-clearing,
so the checkbox didn't stay on.

00:47:09.220 --> 00:47:12.320
We can also cause a better
short bus reset down here.

00:47:12.340 --> 00:47:15.140
So you can change a lot
of things in the PHY.

00:47:15.140 --> 00:47:17.340
You can't break anything with this tool.

00:47:17.340 --> 00:47:20.860
You can't damage anything,
but you could get the Mac confused.

00:47:20.860 --> 00:47:23.830
So if you're changing things and
you don't really know what they are,

00:47:23.830 --> 00:47:26.140
you may want to power down
and unplug everything to get

00:47:26.240 --> 00:47:27.550
back to normal operation.

00:47:28.500 --> 00:47:30.890
Now,
I'm going to unplug the iPod and plug the

00:47:31.040 --> 00:47:33.810
cable into this other Mac that has 1394B.

00:47:40.580 --> 00:47:43.260
Because the tower here
is an older system,

00:47:43.260 --> 00:47:45.700
we've established only a 400 connection.

00:47:45.790 --> 00:47:50.700
But now, let me show you how we can
view the PHY in another device.

00:47:50.970 --> 00:47:54.760
The top pop-up menu lets you pick
which FireWire interface to use.

00:47:54.850 --> 00:47:58.290
This Mac has only one built-in,
so it's shown here.

00:47:58.580 --> 00:48:01.700
This pop-up lets you choose
which node you want to look at,

00:48:01.770 --> 00:48:04.400
and it knows how many nodes are
on the bus at any given time.

00:48:04.420 --> 00:48:06.300
Which one is that other Mac?

00:48:06.370 --> 00:48:09.660
Well, we are node 0,
that's what's in register 0,

00:48:09.660 --> 00:48:11.800
so the other guy must be node 1.

00:48:11.800 --> 00:48:13.860
We'll pick node 1.

00:48:13.860 --> 00:48:18.120
All these new registers have appeared
because node 1 is a 1394B node.

00:48:18.140 --> 00:48:21.100
And we can see the general information.

00:48:21.100 --> 00:48:23.140
That PHY was made by TI.

00:48:23.140 --> 00:48:24.830
It also has three ports.

00:48:24.910 --> 00:48:26.780
It's bilingual and it works up to S800.

00:48:27.850 --> 00:48:31.620
Right now, the port that I plugged
into on that PHY is port 2.

00:48:31.620 --> 00:48:33.850
It shows that it's connected at S400.

00:48:33.860 --> 00:48:36.540
And all the new registers have appeared.

00:48:36.540 --> 00:48:39.690
So if I move this over to port 2,
now we see the details of

00:48:39.760 --> 00:48:41.730
that port on the other device.

00:48:44.780 --> 00:48:46.580
So you can learn a whole
lot about what's going on.

00:48:46.580 --> 00:48:49.660
Here's the loop disable bit down
here that Mike mentioned earlier.

00:48:49.670 --> 00:48:52.000
If this port was disabled
in order to break a loop,

00:48:52.010 --> 00:48:54.610
you'd find a 1 in here.

00:48:54.860 --> 00:48:58.540
One thing you can't do, though,
you can't change remote PHY registers.

00:48:58.540 --> 00:49:02.030
I can click on, I can try to turn on
disable on this port,

00:49:02.030 --> 00:49:03.380
nothing happens.

00:49:03.380 --> 00:49:05.520
And down at the bottom,
it's explaining to me that

00:49:05.520 --> 00:49:06.760
that's a non-local PHY.

00:49:06.760 --> 00:49:11.210
1394 doesn't provide any way to
reach out and change the other PHYs.

00:49:11.270 --> 00:49:13.190
That was considered just
a little too dangerous.

00:49:13.350 --> 00:49:15.210
All we can do is look
and see what's going on.

00:49:17.080 --> 00:49:21.160
So this tool runs on any hardware,
just uses the OpenHCI interface.

00:49:21.160 --> 00:49:24.290
Even if you don't have a
PHY problem to diagnose,

00:49:24.310 --> 00:49:27.380
I think you'll find it very interesting
to try this out and poke around and

00:49:27.380 --> 00:49:28.820
see what's happening on your bus.

00:49:28.820 --> 00:49:30.520
Okay, let's go back to the slides.

00:49:38.070 --> 00:49:41.180
We have another new tool to
offer you called FireStarter.

00:49:41.260 --> 00:49:43.130
This tool was designed
for use at plug fests.

00:49:43.180 --> 00:49:46.150
The commercial bus analyzers
can draw a picture of the bus,

00:49:46.200 --> 00:49:48.890
but when you have 63 nodes on there,
which is what we try to

00:49:48.910 --> 00:49:51.200
achieve at a plug fest,
they can take an awful

00:49:51.200 --> 00:49:52.300
long time to do that.

00:49:52.360 --> 00:49:54.290
By the time they've got
the nodes displayed,

00:49:54.360 --> 00:49:55.920
something's probably changed.

00:49:55.930 --> 00:49:59.750
FireStarter can draw a simple but
accurate rendering of the bus topology,

00:49:59.810 --> 00:50:03.190
and it can do it 10 times per second,
so you'll know exactly what

00:50:03.300 --> 00:50:05.140
the bus is doing at any moment.

00:50:05.720 --> 00:50:08.550
FireStarter also provides some
summary information about how

00:50:08.550 --> 00:50:10.930
many nodes are on the bus,
what kind of nodes they are,

00:50:10.930 --> 00:50:12.470
and how long the bus has been stable.

00:50:12.560 --> 00:50:16.920
Here you can see on the right-hand side
the topology of a bus with six nodes,

00:50:16.990 --> 00:50:20.150
and on the left-hand side various
summary information about the bus.

00:50:20.240 --> 00:50:22.540
Here's what it looks like with 63 nodes.

00:50:22.620 --> 00:50:23.990
This is from one of our plug fests.

00:50:24.000 --> 00:50:29.300
You can see we had 4,650 bus
resets until we got to 63 nodes,

00:50:29.390 --> 00:50:33.670
but the bus was then stable for more
than a minute before anything went wrong.

00:50:34.860 --> 00:50:37.330
We have another new tool
called FireWire Busy Bus.

00:50:37.420 --> 00:50:39.990
If you want to make something go wrong,
this may be the tool for you.

00:50:40.260 --> 00:50:42.640
This tool can generate
traffic on the bus.

00:50:42.720 --> 00:50:44.920
It can generate any asynchronous packet.

00:50:45.120 --> 00:50:48.990
It can also generate bus resets,
even generates bus reset storms.

00:50:49.100 --> 00:50:53.350
And it can enable and disable the ports,
just like I did in FiTool,

00:50:53.350 --> 00:50:55.750
automatically to simulate hot plugging.

00:50:55.860 --> 00:50:58.740
So you can leave this tool
running for extended periods

00:50:58.810 --> 00:51:00.710
and see if your device survives.

00:51:01.470 --> 00:51:02.410
There's a rate adjuster.

00:51:02.420 --> 00:51:06.130
You can make it ramp up and down from
total quiet to very intense testing.

00:51:06.130 --> 00:51:10.000
And you can select all the packet speeds,
all the packet types.

00:51:10.000 --> 00:51:12.920
Like the other two,
this tool works on OpenHCI.

00:51:12.920 --> 00:51:14.110
Now, be careful.

00:51:14.110 --> 00:51:16.440
This tool generates random packets.

00:51:16.440 --> 00:51:19.490
The default configuration is fairly safe.

00:51:19.490 --> 00:51:22.810
But if you change the settings,
you can generate random packets

00:51:23.180 --> 00:51:26.720
that write random data into random
addresses in the Mac's memory.

00:51:26.720 --> 00:51:29.480
And we might crash if you do that.

00:51:29.630 --> 00:51:30.750
So, be careful.

00:51:32.760 --> 00:51:35.450
Here's a full screenshot of FFW Busy Bus.

00:51:35.450 --> 00:51:38.090
At the top, you can see the sliders
for adjusting the rate.

00:51:38.180 --> 00:51:42.000
The center has all the check boxes for
turning the individual tests on and off.

00:51:42.180 --> 00:51:45.480
The bottom has the very important
start button and displays what

00:51:45.480 --> 00:51:49.000
the test is doing and some
summary information about the bus.

00:51:49.160 --> 00:51:51.650
And on the left,
we have the same information from FiTool,

00:51:51.750 --> 00:51:56.530
a summary of your Fi and a real-time
status of all the ports on the local Fi.

00:51:56.880 --> 00:51:58.820
Now,
there's one more tool that you may need

00:51:58.900 --> 00:52:03.090
for developing FireWire on Mac OS X,
and that's Firebug.

00:52:03.090 --> 00:52:07.550
And we're finally pleased to
provide Firebug on Mac OS X.

00:52:07.810 --> 00:52:09.420
It is a real-time packet snooper.

00:52:09.420 --> 00:52:12.060
Now, this requires special hardware.

00:52:12.060 --> 00:52:16.200
OHCI doesn't have a snoop function,
so just like on Mac OS 9,

00:52:16.200 --> 00:52:19.560
you need special hardware,
but FireBug can show you every

00:52:19.560 --> 00:52:21.780
packet on the bus in real-time.

00:52:21.780 --> 00:52:24.490
It can decode the protocols
like SPP2 and AVC,

00:52:24.620 --> 00:52:26.950
so you can actually see what's going on.

00:52:26.950 --> 00:52:31.510
It even has bus configuration services,
so that you can set who's the route,

00:52:31.510 --> 00:52:33.600
change the gap count, and so on.

00:52:34.320 --> 00:52:36.070
Now,
at the same time we brought it to 10,

00:52:36.070 --> 00:52:37.280
we made some improvements.

00:52:37.280 --> 00:52:40.220
FireBug can decode more AVC commands.

00:52:40.270 --> 00:52:43.220
It tells you more information
about SPP commands.

00:52:43.220 --> 00:52:45.630
For example,
it can decode the RBC command set,

00:52:45.640 --> 00:52:50.060
common disk operations like read, write,
synchronize cache.

00:52:50.450 --> 00:52:53.210
SPP2 also survives a bus reset
in almost every case now,

00:52:53.210 --> 00:52:58.270
whereas before it hardly ever figured
out what was going on after a bus reset.

00:52:58.720 --> 00:53:00.200
There's a PHY register dump function.

00:53:00.200 --> 00:53:01.740
You can see it in the screenshot there.

00:53:01.740 --> 00:53:04.860
It's like PHY tool, so you don't have to
use two Macs at once.

00:53:04.890 --> 00:53:09.020
You can get the PHY registers dumped
out in text right in Firebug's log.

00:53:09.020 --> 00:53:11.580
Other new features
include node ID filtering,

00:53:11.690 --> 00:53:16.070
so you can view packets only going to,
coming from, or going between whatever

00:53:16.090 --> 00:53:17.330
nodes you select.

00:53:17.340 --> 00:53:19.880
You can get an isochronous summary.

00:53:19.880 --> 00:53:22.700
By default,
Firebug doesn't show isochronous packets

00:53:22.700 --> 00:53:24.920
because it would overwhelm the display.

00:53:24.920 --> 00:53:26.460
There's 8,000 of them per second.

00:53:27.100 --> 00:53:29.330
Even if you have that suppressed,
Firebug will tell you that

00:53:29.330 --> 00:53:30.860
isochronous traffic has started.

00:53:30.860 --> 00:53:33.710
It'll tell you what channel it's on,
what speed it's going at,

00:53:33.730 --> 00:53:36.640
what node it's coming from,
how big the packets are.

00:53:36.640 --> 00:53:40.400
It can even recognize DV and tell
you whether it's NTSC or PAL format.

00:53:40.400 --> 00:53:43.660
So that may be very handy in keeping
track of what's happening on your bus.

00:53:43.660 --> 00:53:46.760
And Firebug running on
Mac OS X supports dual processors.

00:53:46.780 --> 00:53:49.210
We use one processor to
snoop all the packets,

00:53:49.210 --> 00:53:52.060
the other processor to keep
the display up to date.

00:53:52.100 --> 00:53:54.710
Purists may scoff at this
partitioning of work,

00:53:54.720 --> 00:53:56.770
but it works just fine for Firebug.

00:53:57.040 --> 00:53:58.110
Yes.

00:53:59.740 --> 00:54:06.500
All of those tools are available
today in FireWire SDK 17.

00:54:06.500 --> 00:54:10.940
It is live on the web,
but it is an orphan link.

00:54:10.940 --> 00:54:13.440
There's no page you can go
to that actually links to it.

00:54:13.500 --> 00:54:16.120
They updated the whole
developer website on Monday.

00:54:16.120 --> 00:54:19.520
They're still filling in all the details,
but you can get it today.

00:54:19.520 --> 00:54:23.940
Go find FireWire SDK 16,
get that URL for the download,

00:54:23.940 --> 00:54:27.370
change the 6 to a 7, and you're all set.

00:54:27.380 --> 00:54:28.320
I tried it this morning.

00:54:28.410 --> 00:54:29.170
It's really there.

00:54:30.990 --> 00:54:32.990
If you, and within a few days,
the page will actually

00:54:33.010 --> 00:54:33.880
know how to find it.

00:54:33.900 --> 00:54:37.590
Here's where you can go to get the
FireWire standards and specifications,

00:54:37.600 --> 00:54:41.070
the IEEE for FireWire itself,
the Trade Association for

00:54:41.070 --> 00:54:44.610
AVC command sets,
the IIDC camera, which the iSight,

00:54:44.700 --> 00:54:47.710
by the way, uses that standard,
and the ISO.

00:54:47.830 --> 00:54:53.660
If you want to know the format
for DV or other really detailed

00:54:53.660 --> 00:54:55.920
stuff about DV camcorders,
many of those standards

00:54:55.920 --> 00:54:55.920
come from the ISO.

00:54:57.810 --> 00:55:00.540
Oh, here's the-- OK,
we've got the slides out of order.

00:55:00.600 --> 00:55:07.610
Here's the summary of all
the new tools I showed.

00:55:07.610 --> 00:55:07.610
They all require OHCI, except Firebug,
which still needs PCI links.

00:55:08.280 --> 00:55:10.940
They all require Mac OS X,
version 10.2.5 or later.

00:55:10.940 --> 00:55:14.490
Every one of them, when they run,
will displace the existing

00:55:14.940 --> 00:55:16.230
FireWire software.

00:55:16.240 --> 00:55:21.650
This is so the tool won't interfere
with Mac OS X and vice versa.

00:55:21.700 --> 00:55:23.320
So this is just like Firebug on 9.

00:55:23.390 --> 00:55:26.340
You really should have a dedicated
machine running the tool.

00:55:26.340 --> 00:55:29.390
The tool will refuse to launch if it
would cause you to unmount hard drives

00:55:29.390 --> 00:55:31.040
or anything else that might be bad.

00:55:31.740 --> 00:55:32.740
And please be careful.

00:55:32.740 --> 00:55:36.200
These tools touch the hardware
directly in order to do their thing.

00:55:36.200 --> 00:55:38.700
This means they could crash the machine.

00:55:38.700 --> 00:55:40.480
We've done everything we
can to make them solid,

00:55:40.480 --> 00:55:41.170
but they're new.

00:55:41.170 --> 00:55:43.600
I'm sure one of you is going to
find a way to crash the machine.

00:55:43.600 --> 00:55:46.570
So run this on a separate machine,
or at least make backups.

00:55:46.570 --> 00:55:49.010
Don't try to surf the web
and do your email at the same

00:55:49.010 --> 00:55:50.570
time this tool is running.

00:55:50.580 --> 00:55:53.890
Now there's the slide explaining
that they're available today,

00:55:53.890 --> 00:55:55.700
and you have to change the link.

00:55:58.360 --> 00:55:59.390
Okay, let's wrap up.

00:55:59.390 --> 00:56:03.380
Here's all the sessions this
week at WWDC for FireWire.

00:56:03.380 --> 00:56:05.560
FireWire In-Depth was yesterday.

00:56:07.220 --> 00:56:09.730
FireWire Feedback Forum,
together with USB Feedback Forum,

00:56:09.850 --> 00:56:11.020
is later this afternoon.

00:56:11.020 --> 00:56:13.010
Tomorrow,
we have the session on the Reference

00:56:13.020 --> 00:56:14.660
Platform that I mentioned earlier.

00:56:14.660 --> 00:56:19.390
And tomorrow, during the Campus Bash,
we have the FireWire USB and

00:56:19.390 --> 00:56:21.930
Bluetooth Plug and Unplug Fest.

00:56:24.620 --> 00:56:26.260
If you want to talk to Apple,
if you'd like to come

00:56:26.260 --> 00:56:30.570
to a FireWire kitchen,
or if you need to know who to work with,

00:56:30.570 --> 00:56:32.900
Prashant Kanheri,
who will be up here in a moment,

00:56:32.900 --> 00:56:36.040
Guillermo Ortiz are both
available in Developer Relations.

00:56:36.040 --> 00:56:39.030
We also have mailing lists
for FireWire developers.

00:56:39.030 --> 00:56:40.680
These are fairly active.

00:56:40.680 --> 00:56:42.130
You can subscribe.

00:56:42.130 --> 00:56:45.180
Anyone can join at the URL listed here.

00:56:46.650 --> 00:56:48.790
Developers can post questions,
developers can answer

00:56:48.830 --> 00:56:50.940
each other's questions,
which is great, or we will answer

00:56:50.980 --> 00:56:52.080
questions if we have to.

00:56:52.080 --> 00:56:54.780
We also announced
information about new tools,

00:56:54.780 --> 00:56:57.270
new SDKs,
other announcements on this mailing list.

00:56:57.280 --> 00:56:59.670
There's one for FireWire in general,
and there's one for the

00:56:59.670 --> 00:57:01.170
FireWire reference platform.

00:57:04.440 --> 00:57:06.850
I was told yesterday that some of
these links may be out of date,

00:57:06.970 --> 00:57:09.770
possibly because they revamped
the ADC web page yesterday.

00:57:09.950 --> 00:57:13.330
So we'll post an update on the mailing
list later if these aren't quite right.

00:57:13.400 --> 00:57:17.360
There's a document called "Working
with FireWire Device Interfaces."

00:57:17.520 --> 00:57:21.340
This shows how to use the user clients
to access FireWire from user space,

00:57:21.450 --> 00:57:23.630
which is, if you can,
where you want to be

00:57:23.630 --> 00:57:25.400
writing your software.

00:57:25.530 --> 00:57:27.920
This FireWire SDK 17,
as I just described,

00:57:27.920 --> 00:57:30.490
is available for free
public download on the web,

00:57:30.490 --> 00:57:33.390
and it has additional
reference information in it.