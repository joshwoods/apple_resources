WEBVTT

00:00:20.780 --> 00:00:22.530
My name is Miguel Sanchez.

00:00:22.640 --> 00:00:26.440
I'll be doing the first
half of the presentation,

00:00:26.440 --> 00:00:29.440
and then we'll have our
star documentation writer,

00:00:29.440 --> 00:00:32.920
Brent Shank,
come up and do the second half.

00:00:33.620 --> 00:00:38.590
So, if you're in this presentation,
I hope you're interested, one,

00:00:38.590 --> 00:00:41.840
in WebObjects, and two,
that you want to learn how to

00:00:41.840 --> 00:00:44.120
quickly develop your applications.

00:00:44.120 --> 00:00:45.440
How quickly?

00:00:45.440 --> 00:00:50.270
Well, the most optimistic developers
here in the crowd would probably

00:00:50.270 --> 00:00:51.220
want something like this.

00:00:51.220 --> 00:00:54.700
You want a magic button that says,
build my application,

00:00:54.780 --> 00:00:57.720
and then you press that magic button,
and then you get your

00:00:57.720 --> 00:00:59.190
WebObjects application.

00:00:59.760 --> 00:01:02.500
And if you saw the demos,
how many of you were here

00:01:02.500 --> 00:01:04.700
yesterday for the tech overview?

00:01:04.700 --> 00:01:09.500
So, you'll see some of the demos, well,
a lot deeper in this session,

00:01:09.500 --> 00:01:12.750
but you'll see,
you know that we get pretty close

00:01:12.890 --> 00:01:15.380
to this kind of rapid development.

00:01:16.670 --> 00:01:18.100
So we're going to teach
you several things.

00:01:18.120 --> 00:01:22.570
The main is how to get- how to
build WebObjects applications

00:01:22.570 --> 00:01:26.740
within minutes or within seconds,
if you have a very fast compile machine.

00:01:26.740 --> 00:01:32.740
But now, you guys- you're all developers,
so I can't hide things from you.

00:01:32.740 --> 00:01:34.140
You know that it's not that easy.

00:01:34.140 --> 00:01:37.130
I mean, you're ultimately here to
type code at some point.

00:01:37.140 --> 00:01:40.540
So the meat of the application
is to teach you how to do the

00:01:40.540 --> 00:01:45.140
incremental customization of your
WebObjects applications until you

00:01:45.140 --> 00:01:48.250
get your final deployment app.

00:01:48.430 --> 00:01:52.480
And the underlying methodology
we're trying to bring across

00:01:52.480 --> 00:01:57.340
during this session is,
one, a way of developing your application

00:01:57.340 --> 00:02:01.940
that is more data-driven and rule-driven,
and in which you can use your

00:02:02.020 --> 00:02:05.040
traditional WebObjects techniques,
but you're writing less code,

00:02:05.040 --> 00:02:06.680
yet you're achieving a lot more.

00:02:06.770 --> 00:02:10.030
So that's what we want to
get across to you guys.

00:02:10.510 --> 00:02:13.580
You might have heard the term
"direct to star." That's another

00:02:13.580 --> 00:02:18.390
way of referring to the WebObjects,
the rapid development technologies.

00:02:18.500 --> 00:02:22.340
WebObjects has three main kinds of
applications that you can develop.

00:02:22.480 --> 00:02:26.830
You have the traditional
HTML WebObjects front-end application,

00:02:26.980 --> 00:02:30.400
a swing application,
and web service applications.

00:02:30.400 --> 00:02:34.600
Each one of these stacks has
its set of tools and frameworks,

00:02:34.600 --> 00:02:40.350
which we call "direct to something."
We have the direct-to-web technologies,

00:02:40.390 --> 00:02:44.400
the direct-to-Java client,
and the direct-to-web services.

00:02:44.400 --> 00:02:47.760
This presentation is
about that whole last row,

00:02:47.760 --> 00:02:50.710
all the direct-to-star technologies.

00:02:52.180 --> 00:02:55.680
So rapid development is not
one particular application.

00:02:55.680 --> 00:02:57.860
There's no magic button
like I showed you.

00:02:57.860 --> 00:03:01.040
There's a project builder system,
but there's no rapid development

00:03:01.040 --> 00:03:02.070
application anywhere.

00:03:02.100 --> 00:03:05.030
Think of it as a set of tools
and frameworks that help you

00:03:05.110 --> 00:03:07.050
build your applications faster.

00:03:07.080 --> 00:03:09.100
How do we achieve this?

00:03:09.100 --> 00:03:13.100
The main thing we give you is a
lot of pre-built functionality

00:03:13.100 --> 00:03:15.100
and default application behavior.

00:03:15.100 --> 00:03:18.100
So there's a lot of
stuff pre-built for you.

00:03:18.100 --> 00:03:21.770
We also execute the application in
a slightly different way than your

00:03:21.770 --> 00:03:24.090
traditional WebObjects application.

00:03:24.100 --> 00:03:28.340
We rely a lot more on your data
and a description of your data that

00:03:28.340 --> 00:03:33.010
you give us to make decisions at
runtime and help you write less code.

00:03:33.100 --> 00:03:36.850
And it's also a common process
used across the three kinds of

00:03:36.850 --> 00:03:40.670
WebObjects applications like
you saw on the last slide.

00:03:41.530 --> 00:03:45.760
The very, very high level view of how you
develop applications using rapid

00:03:45.800 --> 00:03:51.160
development is what we ask from
you is a description of your data.

00:03:51.390 --> 00:03:54.400
We want you guys to tell us,
"This is my data.

00:03:54.400 --> 00:03:59.580
These are the tables I'm working
with." We're not psychic yet,

00:03:59.620 --> 00:04:02.020
but we're working on that one.

00:04:02.220 --> 00:04:04.830
And then we get a
description of your data,

00:04:04.830 --> 00:04:07.560
you give it to us,
and right away we give you a

00:04:07.560 --> 00:04:13.070
default application running
within seconds if you have a G5.

00:04:13.280 --> 00:04:15.520
But then you come in, right?

00:04:15.710 --> 00:04:16.650
I mean, you're developers.

00:04:16.700 --> 00:04:19.060
You're being paid to write the code,
and you want to customize your

00:04:19.100 --> 00:04:21.310
application to fit your needs.

00:04:21.410 --> 00:04:25.830
So you're going to go through
several steps of iterating until

00:04:25.830 --> 00:04:28.110
you get your final application.

00:04:28.140 --> 00:04:28.580
Okay?

00:04:28.900 --> 00:04:33.550
Now some- let me go back one.

00:04:33.550 --> 00:04:33.550
Now some people-

00:04:34.900 --> 00:04:38.320
Don't think that the first application
we give you is very important,

00:04:38.320 --> 00:04:41.870
because it comes up on
the screen very quickly.

00:04:42.060 --> 00:04:44.460
The important thing to note about
that application is that you

00:04:44.460 --> 00:04:48.460
have a running application from
the very start of your project.

00:04:48.530 --> 00:04:52.100
And those of you that use
some sort of agile process

00:04:52.160 --> 00:04:56.950
development or extreme programming,
you guys know how important it is to have

00:04:57.010 --> 00:05:02.480
something in a running state to get the
immediate feedback and your customers.

00:05:02.670 --> 00:05:05.280
We give you a default application,
and it's a very important

00:05:05.280 --> 00:05:06.480
default application.

00:05:06.480 --> 00:05:10.110
It might not look exactly like the
application you ultimately want,

00:05:10.250 --> 00:05:11.590
but it's running.

00:05:11.710 --> 00:05:15.530
And as you customize,
you customize and it's always running.

00:05:15.710 --> 00:05:18.090
And that is a very,
very big benefit you guys get out of

00:05:18.190 --> 00:05:20.550
using the rapid development technologies.

00:05:20.600 --> 00:05:23.180
So we said,
what we want from you guys is a

00:05:23.180 --> 00:05:25.600
description of your data model.

00:05:25.720 --> 00:05:29.600
This is the common denominator in all
of the rapid development technologies.

00:05:29.600 --> 00:05:33.320
We assume that the data you're
handling can be represented in some

00:05:33.320 --> 00:05:35.600
sort of entity relationship mapping.

00:05:35.600 --> 00:05:38.900
And we also assume that what
you want to do with your data

00:05:38.900 --> 00:05:43.560
are things like inserting,
deleting, searching, listing, editing.

00:05:43.600 --> 00:05:45.540
So that's what we're good for.

00:05:45.680 --> 00:05:50.500
If you're doing some major statistical
analysis or other kinds of stuff,

00:05:50.790 --> 00:05:53.600
we don't really help you that much.

00:05:56.360 --> 00:05:59.680
How do you give us a
description of your data?

00:05:59.680 --> 00:06:01.910
For this,
you use something called an EO model,

00:06:01.910 --> 00:06:04.660
and those of you that
are familiar with EOF,

00:06:04.660 --> 00:06:06.080
this is what EOF is.

00:06:06.080 --> 00:06:09.870
For example,
you would have your data in a database.

00:06:09.890 --> 00:06:12.260
Here's a company database.

00:06:12.380 --> 00:06:15.850
But you know that one of the
benefits of WebObjects is to

00:06:15.850 --> 00:06:17.970
keep you away from the database.

00:06:17.970 --> 00:06:21.370
I mean, you want to ultimately
use your Java objects.

00:06:21.370 --> 00:06:25.800
So there has to be some sort of mapping
definition between those two worlds.

00:06:25.910 --> 00:06:28.440
And you're probably going
to have more tables,

00:06:28.460 --> 00:06:32.380
and there's going to be more objects,
and you have to tell us how they map.

00:06:32.380 --> 00:06:34.470
And there's- more importantly,
there's going to be

00:06:34.470 --> 00:06:37.800
relationships between objects,
which exist at the database level

00:06:37.800 --> 00:06:39.680
as foreign keys and source keys.

00:06:39.770 --> 00:06:42.820
But in your object graph,
you just want to call a company

00:06:42.820 --> 00:06:47.300
method and then to get back an
instance of the company class.

00:06:47.740 --> 00:06:53.980
So the mapping stuff,
that is your data definition.

00:06:53.980 --> 00:06:55.100
And that's what we need from you.

00:06:55.100 --> 00:06:58.600
And we provide tools to
help you build this quickly.

00:06:58.600 --> 00:07:03.910
So if you give us an EO model,
for those of you that are

00:07:04.270 --> 00:07:09.580
more familiar with EOF,
if you give us an EO model,

00:07:09.580 --> 00:07:10.120
we can give you a lot of functionality.

00:07:10.120 --> 00:07:10.120
You need to give us an EO model.

00:07:10.330 --> 00:07:14.330
Now let's jump right in and
introduce the example we'll be using

00:07:14.330 --> 00:07:16.380
throughout the whole presentation.

00:07:16.660 --> 00:07:22.320
I know that Finding Nemo is a good movie,
but I have preferences for

00:07:22.320 --> 00:07:25.100
another animated movie,
the Star Wars series.

00:07:25.100 --> 00:07:27.820
And over the years,
I've been collecting a

00:07:27.820 --> 00:07:29.800
bunch of Star Wars plastic.

00:07:29.800 --> 00:07:32.010
Star Wars collection,
little action figures,

00:07:32.010 --> 00:07:35.670
you've probably seen them in the stores.

00:07:35.820 --> 00:07:38.200
So, memorabilia like magazines and stuff.

00:07:38.200 --> 00:07:39.700
So this is my data set, right?

00:07:39.700 --> 00:07:45.100
We're going to build an application
that allows me to manage my

00:07:45.100 --> 00:07:46.900
Star Wars collection database.

00:07:46.900 --> 00:07:49.690
Does anybody else collect
Star Wars toys here?

00:07:49.720 --> 00:07:51.100
Okay.

00:07:51.270 --> 00:07:55.310
Well,
there's two geeks in this room there.

00:07:57.180 --> 00:07:58.550
So that's my data set.

00:07:58.650 --> 00:08:01.100
I have a database that
represents my collection.

00:08:01.100 --> 00:08:03.840
So I have tables for an item.

00:08:04.000 --> 00:08:07.250
The item table represents-
and each row in the item table

00:08:07.270 --> 00:08:09.120
is one of the toys I have.

00:08:09.310 --> 00:08:12.000
The items represent
characters in the movie,

00:08:12.000 --> 00:08:15.810
so I have a character table
with the normal character names

00:08:16.320 --> 00:08:18.900
that you are familiar with.

00:08:18.990 --> 00:08:20.520
Characters are categorized.

00:08:20.520 --> 00:08:21.660
Are they humanoids?

00:08:21.660 --> 00:08:22.650
Are they droids?

00:08:22.750 --> 00:08:26.040
For my purposes,
I also consider ships to be characters.

00:08:26.280 --> 00:08:30.430
They appeared in a particular movie,
and they showed up at the

00:08:30.430 --> 00:08:32.880
stores in a particular toy line.

00:08:32.880 --> 00:08:36.830
The toy line refers just to the
kind of packaging they came in,

00:08:36.910 --> 00:08:40.230
and how much they cost sometimes.

00:08:40.370 --> 00:08:43.060
So with that,
I'm going to bring up Brent.

00:08:43.120 --> 00:08:45.290
So that's my data set.

00:08:46.220 --> 00:08:48.330
Like I said,
what we ask- so now I'm playing

00:08:48.330 --> 00:08:49.800
the role of the developer.

00:08:49.990 --> 00:08:54.500
I have to give WebObjects a
description of my dataset.

00:08:54.600 --> 00:08:57.720
Let me just show you that I already
have a pre-existing database.

00:08:57.880 --> 00:08:59.640
It's an open-based database.

00:08:59.750 --> 00:09:00.380
There's my data.

00:09:00.380 --> 00:09:03.020
So you would have some of your data.

00:09:03.020 --> 00:09:05.260
If you don't have data,
you would probably have a database

00:09:05.260 --> 00:09:06.710
that you want to eventually use.

00:09:06.750 --> 00:09:10.190
So you would have just your
simple table definitions,

00:09:10.200 --> 00:09:12.050
even if there's no data in it.

00:09:12.290 --> 00:09:13.610
So you have your data.

00:09:14.230 --> 00:09:17.200
Then we use this tool called EOModeler.

00:09:17.960 --> 00:09:20.130
This is where we start
seeing rapid development,

00:09:20.130 --> 00:09:20.530
right?

00:09:20.620 --> 00:09:23.020
It's called EOModeler,
but parts of EOModeler

00:09:23.020 --> 00:09:23.990
are rapid development.

00:09:23.990 --> 00:09:29.160
What we do here is we say,
give us a connection to your database.

00:09:31.400 --> 00:09:35.700
And we ask an- we answer a
set of default questions,

00:09:35.790 --> 00:09:37.980
and we click finish.

00:09:37.980 --> 00:09:40.240
And we create a default mapping for you.

00:09:40.420 --> 00:09:45.170
So you don't have to go in and create all
of this- all of this EO model entities.

00:09:45.290 --> 00:09:48.020
We give you the default
mapping that we think.

00:09:48.020 --> 00:09:50.960
We just go in, read your database schema,
and create an EO model.

00:09:50.960 --> 00:09:53.300
So for our purposes, that's it.

00:09:53.420 --> 00:09:55.900
I mean,
this is all what we- all we want to do.

00:09:57.000 --> 00:10:00.190
And then, this is the entity
relationship view of the model.

00:10:00.190 --> 00:10:04.360
So what do you- what the tool did was,
for each table, we saw that you had-

00:10:04.400 --> 00:10:05.900
we created an entity.

00:10:05.900 --> 00:10:09.780
And for each column in that table,
we created an attribute.

00:10:09.840 --> 00:10:11.180
So that's our mapping.

00:10:11.180 --> 00:10:14.370
Okay, we're going to save the model.

00:10:16.540 --> 00:10:23.930
And then we go to Project Builder,
and we create one of the project types.

00:10:24.000 --> 00:10:26.490
We're going to be using
Direct-to-Web for this first demo.

00:10:26.500 --> 00:10:29.880
So one of the project types we have
is a Direct-to-Web project type.

00:10:30.110 --> 00:10:33.840
Just call it anything.

00:10:35.600 --> 00:10:37.460
The main thing you have to keep
in mind when you're creating a

00:10:37.460 --> 00:10:39.770
direct-to-web project type is,
all we need to know is,

00:10:39.860 --> 00:10:41.440
what is your model?

00:10:41.460 --> 00:10:46.150
And that's the step where Brent said,
this is my model, which we just saved.

00:10:46.570 --> 00:10:50.380
This is the part where we create
the application for you in seconds.

00:10:50.460 --> 00:10:53.090
So we click Next, Finish.

00:10:53.680 --> 00:10:56.240
And it's compiling.

00:10:56.330 --> 00:10:59.360
If we go through the project,
we haven't generated any code for you

00:10:59.360 --> 00:11:05.760
other than the default stult files that
are required in WebObjects applications.

00:11:05.840 --> 00:11:08.300
It's compiling in the background.

00:11:08.350 --> 00:11:10.820
Brent is changing the font
so you guys can see the code.

00:11:10.830 --> 00:11:12.810
We're launching.

00:11:12.810 --> 00:11:15.920
And we have a running application.

00:11:16.170 --> 00:11:16.420
Okay?

00:11:16.420 --> 00:11:18.500
So this is- you saw this yesterday.

00:11:18.500 --> 00:11:19.950
We're going to log in.

00:11:20.080 --> 00:11:24.490
We have a query page where
we can search on all of the

00:11:24.490 --> 00:11:25.920
entities we have in our database.

00:11:25.960 --> 00:11:28.200
We're going to go to the first one,
the characters.

00:11:28.320 --> 00:11:28.930
So we look.

00:11:29.130 --> 00:11:32.150
We get a list of all the
characters in my database.

00:11:32.250 --> 00:11:34.120
If we want to edit a
particular character,

00:11:34.120 --> 00:11:36.000
we click on the edit page.

00:11:36.000 --> 00:11:37.500
We go to the edit page.

00:11:37.670 --> 00:11:39.960
Let's go back to the home page.

00:11:39.960 --> 00:11:42.980
If we want to see all the
pictures in my database,

00:11:43.000 --> 00:11:44.280
go to the photos.

00:11:45.850 --> 00:11:50.350
So those are some of the pictures I have
in my database of the toys I have.

00:11:50.630 --> 00:11:52.560
So that's rapid development.

00:11:52.560 --> 00:11:55.070
You have a fully running
WebObjects application.

00:11:55.170 --> 00:11:58.640
So that's the part we
give you at the start.

00:11:58.650 --> 00:11:59.030
Great.

00:11:59.310 --> 00:12:02.140
But that's not what
I want it to look like.

00:12:02.310 --> 00:12:04.520
So let's start customizing it.

00:12:04.520 --> 00:12:06.980
Let's go back to home first.

00:12:07.490 --> 00:12:09.660
And let's do a very basic customization.

00:12:09.870 --> 00:12:12.770
We go to the item list page.

00:12:13.500 --> 00:12:15.170
And edit, edit item first.

00:12:15.280 --> 00:12:17.630
Just click on any one of those items.

00:12:17.720 --> 00:12:20.390
So we have the edit page for the
item for each one of the toys,

00:12:20.390 --> 00:12:24.620
and we give you all the default fields
we figured out you had in your database.

00:12:24.620 --> 00:12:26.420
But you don't want to show all of them.

00:12:26.500 --> 00:12:27.920
You only want to show three.

00:12:27.920 --> 00:12:29.910
You only want to show
the name of the item,

00:12:29.910 --> 00:12:33.040
the movie it came from,
and the condition that the toy is in.

00:12:33.400 --> 00:12:36.140
So what we do is we click-
Brent just clicked on that button

00:12:36.140 --> 00:12:37.940
on the left that said customize.

00:12:37.940 --> 00:12:44.820
We bring up a little Java applet that
allows you to hide and remove fields.

00:12:44.820 --> 00:12:46.530
So what he's going to
do is he's going to say,

00:12:46.530 --> 00:12:49.150
I don't want to show all of those two,
four, six, eight fields.

00:12:49.150 --> 00:12:50.770
I only want to show seven fields.

00:12:50.780 --> 00:12:54.040
So he goes into the applet,
and he gets rid of all of them

00:12:54.040 --> 00:12:56.680
other than the name of the item,
the movie,

00:12:56.740 --> 00:12:59.150
and the condition that the toy is in.

00:12:59.160 --> 00:12:59.950
Now watch this.

00:12:59.950 --> 00:13:02.660
We haven't written any code,
no recompiling, nothing.

00:13:02.780 --> 00:13:07.470
We click Update in the applet.

00:13:08.170 --> 00:13:10.400
The request goes to the server,
the page refreshes,

00:13:10.400 --> 00:13:12.110
and you see your change.

00:13:12.410 --> 00:13:15.790
So that's also something that
we're going to be talking a lot

00:13:15.810 --> 00:13:17.540
more about in rapid development.

00:13:17.540 --> 00:13:19.200
You see your changes right away.

00:13:19.450 --> 00:13:21.900
This was a very basic customization,
but there would be more

00:13:21.900 --> 00:13:26.270
complex customizations,
and your application is always running.

00:13:27.390 --> 00:13:29.760
Now let's just look at the project.

00:13:29.890 --> 00:13:32.700
For those of you that haven't seen,
I'm sure that most of you have

00:13:32.790 --> 00:13:34.600
probably seen Direct-to-Web,
but for those of you that

00:13:34.610 --> 00:13:37.630
haven't seen Direct-to-Web,
I just want to point out that

00:13:37.630 --> 00:13:40.010
this is not blind code generation.

00:13:40.290 --> 00:13:45.800
We don't have any files in your project
that generate those HTML pages for you.

00:13:45.800 --> 00:13:47.850
We're doing that all
dynamically on the fly,

00:13:47.860 --> 00:13:48.850
behind the scenes.

00:13:48.980 --> 00:13:51.550
So this is not blind code generation.

00:13:51.550 --> 00:13:53.900
So that's the end of the first demo.

00:13:53.900 --> 00:13:55.310
Thanks, Brent.

00:13:55.310 --> 00:13:57.180
Back to slides, please.

00:13:58.350 --> 00:14:00.290
So we just showed you what Direct2Web is.

00:14:00.370 --> 00:14:05.220
Direct2Web is a set of frameworks
and tools that allow you to quickly

00:14:05.220 --> 00:14:07.590
create HTML WebObjects applications.

00:14:07.780 --> 00:14:10.800
That was the first column in that
slide I showed you at the start.

00:14:10.860 --> 00:14:12.100
Okay?

00:14:12.460 --> 00:14:16.530
We do that by giving you a lot
of pre-built page templates.

00:14:16.690 --> 00:14:20.300
And we're driven by the
description of your model,

00:14:20.320 --> 00:14:24.080
data-driven, and we're also driven by a
bunch of rules which we have

00:14:24.400 --> 00:14:27.300
to make decisions at runtime,
so we're rule-driven.

00:14:27.490 --> 00:14:31.300
But ultimately, you can customize your
applications however you want.

00:14:31.350 --> 00:14:34.710
What kind of page
templates do we give you?

00:14:35.440 --> 00:14:40.790
We have the Query All Page Template,
which is automatically configured to show

00:14:40.870 --> 00:14:43.500
all of the tables you have in your model.

00:14:43.550 --> 00:14:47.950
Once you click on a particular search,
we have a list page template where

00:14:48.120 --> 00:14:49.920
we show you all the page results.

00:14:50.050 --> 00:14:53.140
It doesn't show you on this slide,
but it's a multi-page search.

00:14:53.220 --> 00:14:56.980
So if you have a lot of results,
you can paginate through them

00:14:57.020 --> 00:14:58.930
and see all of your results.

00:14:59.070 --> 00:15:03.810
We have an edit relationship page,
where you want to associate

00:15:03.810 --> 00:15:05.950
one object with another.

00:15:06.000 --> 00:15:10.000
We have the edit page.

00:15:10.140 --> 00:15:12.500
Some pages have more
than one look to them.

00:15:12.500 --> 00:15:14.460
For example,
here we have the simple edit page,

00:15:14.600 --> 00:15:16.890
where we just have the fields laid out.

00:15:17.130 --> 00:15:20.840
But we also have the tab edit page,
where you can hide some

00:15:21.170 --> 00:15:23.000
fields in certain tabs.

00:15:23.000 --> 00:15:24.500
So that's at the page level.

00:15:24.500 --> 00:15:26.980
At the property level,
you have all kinds of properties.

00:15:27.020 --> 00:15:29.000
You have dates, numbers, strings.

00:15:29.000 --> 00:15:31.950
So we have a lot of
property level components.

00:15:32.000 --> 00:15:33.990
For example, here I'm showing you
five different kinds.

00:15:34.000 --> 00:15:38.040
We have a normal text field, a hyperlink,
a little embedded browser,

00:15:38.080 --> 00:15:40.990
a collapsible component where
it says four characters,

00:15:41.010 --> 00:15:43.000
a matrix of buttons.

00:15:43.000 --> 00:15:45.520
So we give you a lot of pages,
and we give you a lot of

00:15:45.520 --> 00:15:47.000
property level components.

00:15:47.000 --> 00:15:49.000
And you can combine them
and use them how you want.

00:15:49.000 --> 00:15:53.350
So that's how we achieve
making things faster for you.

00:15:54.290 --> 00:15:56.000
So we have these pages.

00:15:56.000 --> 00:15:58.840
Now you might be wondering, "Okay,
you have these templates

00:15:58.890 --> 00:16:03.030
pre-built for us,
but at what point do you

00:16:03.030 --> 00:16:04.790
decide what to show on them?

00:16:04.900 --> 00:16:09.560
How do you actually configure
them on the fly?" For that,

00:16:09.580 --> 00:16:11.790
we use the rule system.

00:16:12.130 --> 00:16:14.480
Okay,
we make decisions on the fly to show

00:16:14.710 --> 00:16:19.000
exactly the fields that are relevant
to the database that you're handling.

00:16:19.000 --> 00:16:22.990
So think of the rule system
as a basic expert system.

00:16:22.990 --> 00:16:25.000
It's a question and answer system.

00:16:25.000 --> 00:16:27.700
You give it a state, you tell it,
"This is where I am,

00:16:27.700 --> 00:16:31.210
this is what I'm doing,
and I want to know certain things

00:16:31.730 --> 00:16:35.000
about the current state." Okay?

00:16:35.000 --> 00:16:37.950
To get to that,
it searches a collection of rules.

00:16:38.070 --> 00:16:43.000
It's also a recursive system,
so it might find several rules

00:16:43.000 --> 00:16:45.950
along the way before it ultimately
gets the result you want.

00:16:46.000 --> 00:16:49.000
And I'm talking about it here
in the direct-to-web session,

00:16:49.000 --> 00:16:53.130
but it's the same rule system
that is used across all kinds of

00:16:53.280 --> 00:16:55.900
rapid development applications.

00:16:56.400 --> 00:16:57.840
Rule system manages rules.

00:16:57.920 --> 00:16:59.200
What's a rule?

00:16:59.280 --> 00:17:02.550
A rule, in its simplest form,
is something like this.

00:17:02.550 --> 00:17:06.650
We have a condition,
which is pretty much the thing that has

00:17:06.650 --> 00:17:08.380
to be true for the rule to be valid.

00:17:08.380 --> 00:17:10.860
The condition is just a qualifier.

00:17:10.860 --> 00:17:13.710
It says here, well,
this rule is valid when the task is list

00:17:13.710 --> 00:17:15.960
and the entity you're handling is moving.

00:17:15.960 --> 00:17:19.460
And then we have a right-hand side,
which is the value of the rule,

00:17:19.460 --> 00:17:22.160
which is the thing you can derive,
you can deduce,

00:17:22.160 --> 00:17:24.600
the knowledge you want to encapsulate.

00:17:25.670 --> 00:17:28.070
Let's give you a more detailed example.

00:17:28.230 --> 00:17:31.100
How did we get to configure
this page with the rule system?

00:17:31.100 --> 00:17:36.270
We have a template in the
Direct Web Framework that

00:17:36.270 --> 00:17:38.730
lists all of the rows.

00:17:38.730 --> 00:17:41.310
How do we know that you want
those two particular rows,

00:17:41.310 --> 00:17:44.800
that you want the long name of the
movie and the short name of the movie?

00:17:47.160 --> 00:17:51.040
We first initialize the
state that we're in.

00:17:51.160 --> 00:17:55.030
For that, we use an instance of a
class called D2WContext.

00:17:55.350 --> 00:17:57.400
Think of it as a dictionary for now.

00:17:57.600 --> 00:18:00.320
And 90% of the time,
you don't even need to be

00:18:00.350 --> 00:18:03.060
handling a D2WContext directly.

00:18:03.060 --> 00:18:06.430
So this is just for-- so you
understand the behind the scenes of

00:18:06.430 --> 00:18:08.300
what's happening in the rule system.

00:18:08.410 --> 00:18:09.420
We initialize a context.

00:18:09.490 --> 00:18:13.390
We say, the current task we're
executing is listing,

00:18:13.400 --> 00:18:17.460
and the current entity we're
dealing with is a movie.

00:18:17.500 --> 00:18:21.780
And what we want to know is what fields
we have to display in the columns.

00:18:21.860 --> 00:18:24.310
We feed that context
into the rule system.

00:18:24.480 --> 00:18:27.100
The rule system searches
through its rule database,

00:18:27.100 --> 00:18:28.830
firing other rules along the way.

00:18:29.000 --> 00:18:32.010
But it ultimately comes
to something like this.

00:18:32.170 --> 00:18:34.560
And it says, if the task is list and
the entity is movie,

00:18:34.560 --> 00:18:37.880
then the display fields are the long
name and the short name of the movie.

00:18:38.070 --> 00:18:40.660
and he gives you back that result.

00:18:40.990 --> 00:18:44.640
And once we have that result,
we can use that in our page

00:18:44.640 --> 00:18:47.740
templates to configure your page.

00:18:49.000 --> 00:19:51.000
[Transcript missing]

00:19:51.340 --> 00:19:53.760
A more direct way of
accessing the rule system,

00:19:53.760 --> 00:19:57.950
or accessing the rule databases,
by using an application

00:19:57.950 --> 00:19:59.570
called Rule Editor.

00:19:59.620 --> 00:20:01.880
Rules are- don't be overwhelmed by rules.

00:20:01.920 --> 00:20:03.180
Rules are property lists.

00:20:03.350 --> 00:20:06.110
You can open up a rule
file and it's a text file.

00:20:06.180 --> 00:20:11.070
The Rule Editor is a nice way of
displaying those rules as property lists.

00:20:11.450 --> 00:20:14.340
If you open up a rule file,
you get to see all of

00:20:14.340 --> 00:20:16.020
your rules at the top.

00:20:16.210 --> 00:20:19.480
You click on one,
and then for a particular

00:20:19.480 --> 00:20:23.390
rule you select,
you see the qualifier part of your rule,

00:20:23.640 --> 00:20:26.410
and then the value part of the rule,
the value you can derive.

00:20:26.560 --> 00:20:29.760
So these are two ways of
accessing the rule system.

00:20:31.260 --> 00:20:34.290
The rule system is the main thing
that you use to customize your app,

00:20:34.310 --> 00:20:37.300
even though you might use it indirectly.

00:20:37.460 --> 00:20:39.880
You also customize your app
by changing your data model,

00:20:39.880 --> 00:20:42.220
because we're relying on the
description of your data to

00:20:42.220 --> 00:20:45.000
see which things we describe,
we put on the screen.

00:20:45.000 --> 00:20:48.300
So if you put more stuff in your model,
we put more stuff in your page.

00:20:48.470 --> 00:20:51.300
You can add custom rules
to configure further.

00:20:51.300 --> 00:20:53.560
And this is where it starts
getting interesting now.

00:20:53.560 --> 00:20:55.470
You can start,
you can plug in your own custom

00:20:55.560 --> 00:20:58.210
widgets if you don't like the
ones that we provide for you.

00:20:58.210 --> 00:21:01.950
And you can transition into more,
into more traditional

00:21:01.970 --> 00:21:03.880
WebObjects techniques.

00:21:04.880 --> 00:21:06.170
But there's a cost, right?

00:21:06.170 --> 00:21:07.780
Nothing comes for free, right?

00:21:07.780 --> 00:21:10.990
We can't give you all the magic and
then have you all do all your magic

00:21:10.990 --> 00:21:12.840
and all that happen at the same time.

00:21:12.840 --> 00:21:14.440
So just be aware of this equation.

00:21:14.440 --> 00:21:18.020
We're doing all of these
decisions for you at runtime.

00:21:18.020 --> 00:21:20.970
We're trying to be smart about
your model and your rule,

00:21:20.970 --> 00:21:23.360
and we have control of the page template.

00:21:23.360 --> 00:21:27.670
So the more you want for us
to give you that control,

00:21:27.670 --> 00:21:30.740
the less we can do for you, okay?

00:21:30.740 --> 00:21:34.860
So the more dynamic your application is,
the page templates live in our room.

00:21:34.860 --> 00:21:37.100
If you want more access
to those templates,

00:21:37.100 --> 00:21:38.240
we can give it to you.

00:21:38.280 --> 00:21:40.770
But at that point,
you're writing your own code,

00:21:40.770 --> 00:21:43.550
you're writing your own HTML,
and it's harder for us to

00:21:43.550 --> 00:21:45.340
make decisions at runtime.

00:21:45.340 --> 00:21:49.730
So the more you customize,
the less dynamic, you lose some dynamic

00:21:49.730 --> 00:21:52.230
flexibility in your application.

00:21:52.260 --> 00:21:55.830
So the rule of thumb here is that
your application is probably going to

00:21:55.830 --> 00:21:57.900
contain dozens and dozens of pages.

00:21:57.900 --> 00:22:03.160
So don't be eager to get access to
the HTML and to the Java right away.

00:22:03.160 --> 00:22:03.900
Only customize.

00:22:04.880 --> 00:22:08.150
Don't only write code in the parts
that you really are hitting a

00:22:08.150 --> 00:22:10.000
wall with the stuff we give you.

00:22:10.220 --> 00:22:13.020
Leave the other stuff alone,
and then little by little

00:22:13.020 --> 00:22:14.380
customize the pages.

00:22:14.380 --> 00:22:17.170
So you'll get a lot of
benefit out of that.

00:22:17.260 --> 00:22:20.820
Now let me summarize the
direct-to-web process.

00:22:20.880 --> 00:22:26.540
To get an initial application,
you use your modeler.

00:22:27.190 --> 00:22:29.880
You create your definition of your data,
you get a model,

00:22:30.060 --> 00:22:33.760
you feed that model into Project Builder,
and you get a default

00:22:33.760 --> 00:22:35.940
application within one minute.

00:22:36.050 --> 00:22:38.360
How do you start customizing it?

00:22:38.680 --> 00:22:41.930
You use the Direct-to-Web Assistant,
which is the applet that

00:22:41.930 --> 00:22:43.400
runs alongside your app.

00:22:43.400 --> 00:22:45.400
Or you can write more
rules in the rule editor,

00:22:45.400 --> 00:22:48.820
or you can refine your model and we take,
we pick up those changes,

00:22:48.820 --> 00:22:51.180
or you can do some basic HTML changes.

00:22:51.180 --> 00:22:54.900
And then your app starts looking a
little more like what you wanted.

00:22:54.910 --> 00:22:57.240
We're going to do this in a minute.

00:22:57.240 --> 00:23:00.230
And then you can do fairly
advanced customization.

00:23:00.230 --> 00:23:03.570
You can write your own custom
HTML WebObjects components

00:23:03.670 --> 00:23:05.060
to plug in our pages.

00:23:05.200 --> 00:23:07.940
You can write more sophisticated rules.

00:23:07.940 --> 00:23:10.290
Or ultimately,
you can get the full access to the page

00:23:10.360 --> 00:23:12.240
template that we're using to generate it.

00:23:12.310 --> 00:23:13.790
So we give you everything.

00:23:13.790 --> 00:23:17.040
There's your Java, there's your HTML,
you deal with it now.

00:23:17.250 --> 00:23:17.880
Okay?

00:23:18.240 --> 00:23:24.420
So at that point,
you get the application that you want.

00:23:24.480 --> 00:23:26.520
Let's demo this in our second demo.

00:23:26.520 --> 00:23:30.050
So I'm going to ask for
Brent to help me out again.

00:23:30.760 --> 00:23:35.750
You might quit the browser first,
so we can restart from this one.

00:23:36.180 --> 00:23:38.240
So what we're going to do is
we're going to start out with

00:23:38.240 --> 00:23:40.710
the application we just created,
and we're going to get a little

00:23:40.710 --> 00:23:44.800
more sophisticated with our widgets.

00:23:45.180 --> 00:23:50.320
For that, some of the code we'll be
using in the second demo was

00:23:50.320 --> 00:23:54.150
pre-built because that's my code,
like it would be your code in

00:23:54.150 --> 00:23:56.140
your own custom application.

00:23:56.160 --> 00:23:58.160
And it lives in a framework.

00:23:58.160 --> 00:24:01.490
Right now it's a very simple framework,
it's just for demo purposes.

00:24:01.520 --> 00:24:06.330
It contains things like an image which
I'm going to include into my application,

00:24:06.330 --> 00:24:07.080
and a little custom component.

00:24:07.160 --> 00:24:09.160
So it's a framework.

00:24:09.160 --> 00:24:14.090
Now let's go back, hide that framework,
and create a new project,

00:24:14.090 --> 00:24:16.160
a new Direct Web project.

00:24:16.160 --> 00:24:17.160
We're going to be doing the same thing.

00:24:17.160 --> 00:24:21.150
The only reason we're doing it again,
and we're not starting from that project

00:24:21.150 --> 00:24:24.430
we just showed you in the first demo,
is we wanted you to

00:24:24.430 --> 00:24:26.160
be aware of this step.

00:24:26.160 --> 00:24:30.160
And this- Brent is not going to
specify which model we're using.

00:24:30.160 --> 00:24:34.540
He's instead going to be specifying
which framework he wants to add to

00:24:34.610 --> 00:24:37.160
the default Direct Web application.

00:24:37.160 --> 00:24:39.970
And the framework contains the model,
so we're going to pick

00:24:39.970 --> 00:24:41.150
it up automatically.

00:24:41.160 --> 00:24:44.160
So everything here is very similar.

00:24:44.160 --> 00:24:48.050
He's just going by creating
a Direct Web application.

00:24:48.240 --> 00:24:51.290
The only difference is that he
also said that he wants to link

00:24:51.290 --> 00:24:53.160
in this additional framework.

00:24:53.160 --> 00:24:55.750
So we're linking the framework,
but initially we're not doing

00:24:55.750 --> 00:24:57.160
anything with the framework.

00:24:57.170 --> 00:24:59.160
So the application should look the same.

00:24:59.160 --> 00:25:02.160
We're not generating any code yet.

00:25:02.160 --> 00:25:04.450
It's launching right now.

00:25:07.660 --> 00:25:10.560
The only thing that we have in our
project is the reference to- oh no,

00:25:10.560 --> 00:25:14.510
that's in the framework now,
we can't show you that in our project.

00:25:16.700 --> 00:25:21.540
This is the same application
that we had before.

00:25:21.540 --> 00:25:23.700
We just got to it in a
slightly different way.

00:25:23.700 --> 00:25:25.700
We'll navigate around.

00:25:25.700 --> 00:25:26.190
Okay.

00:25:26.190 --> 00:25:30.400
First thing, very simple thing you might
want to change is the overall

00:25:30.400 --> 00:25:31.650
look of all of your pages.

00:25:31.700 --> 00:25:35.700
We give you a blue bar
along the left-hand side.

00:25:35.700 --> 00:25:38.700
Maybe blue is not your favorite color,
maybe you want to do something else.

00:25:38.730 --> 00:25:41.700
So let's do a very simple thing.

00:25:41.750 --> 00:25:45.950
Let's change the look of all the
pages by adding a banner that

00:25:45.950 --> 00:25:47.610
says Star Wars along the top,
because this is my

00:25:47.640 --> 00:25:49.680
Star Wars Collection application.

00:25:49.700 --> 00:25:53.650
One of the components you have in your
project is called the Page Wrapper.

00:25:53.710 --> 00:25:57.690
The Page Wrapper specifies the overall
look and layout of all of your pages.

00:25:57.710 --> 00:26:01.080
In this case, it says there's a blue bar,
there's a menu that always

00:26:01.080 --> 00:26:03.300
shows up on the left,
and then the content

00:26:03.300 --> 00:26:04.570
shows up on the right.

00:26:04.700 --> 00:26:07.630
So we always want this banner
to show up at the very top.

00:26:07.730 --> 00:26:08.700
So what Brent is going to do is he's
going to go ahead and add a new banner.

00:26:08.700 --> 00:26:13.080
is he's going to add an image
component at the very top.

00:26:13.770 --> 00:26:15.490
And he's just going to say,
I want this image,

00:26:15.600 --> 00:26:18.810
the image Star Wars banner,
which is a resource in my framework,

00:26:19.000 --> 00:26:20.900
to show up.

00:26:20.980 --> 00:26:24.250
It's a resource in the
rapid development framework.

00:26:26.040 --> 00:26:29.250
This is another part where rapid
development comes into play.

00:26:29.560 --> 00:26:32.160
We're not doing any code,
we're not doing any recompiles,

00:26:32.240 --> 00:26:34.920
all he's doing is changing
the HTML and saving.

00:26:35.000 --> 00:26:37.750
But WebObjects has something
called rapid turnaround,

00:26:37.750 --> 00:26:40.920
and all he has to do is refresh
the page and we pick up the banner.

00:26:41.060 --> 00:26:45.390
So now that he navigates around,
we have- the banner follows him around,

00:26:45.390 --> 00:26:46.000
okay?

00:26:46.000 --> 00:26:49.400
It's a very simple HTML page,
but I'm sure all of you have some

00:26:49.400 --> 00:26:54.390
sort of graphic designer or something
that- or a group like that in your

00:26:54.390 --> 00:26:58.000
companies where they want you to have
the particular look of the company,

00:26:58.000 --> 00:27:01.000
so you have access to the overall layout.

00:27:01.000 --> 00:27:04.000
Now let's do something more interesting.

00:27:04.000 --> 00:27:07.150
Let's go to the list page for the item.

00:27:08.180 --> 00:27:09.370
Is this the list page for the item?

00:27:09.510 --> 00:27:10.940
Yeah.

00:27:11.090 --> 00:27:14.420
So by default we're showing
you the name of the item,

00:27:14.420 --> 00:27:17.680
the secondary name of the item,
the notes on the item, but you know,

00:27:17.690 --> 00:27:19.940
this is, I mean,
the coolness about this application

00:27:19.940 --> 00:27:21.290
is that you see the images.

00:27:21.340 --> 00:27:22.700
So I want to show the images here.

00:27:23.120 --> 00:27:27.110
So let's add the image
column to this list page.

00:27:27.120 --> 00:27:32.610
So I already have a primary photo
data method in one of my objects.

00:27:32.710 --> 00:27:37.690
I just added using the Web Assistant,
and I click update, and now I'm adding,

00:27:37.690 --> 00:27:41.170
I have all of the default columns
we had plus the image column,

00:27:41.170 --> 00:27:41.760
okay?

00:27:41.760 --> 00:27:44.930
So we have a default,
we have the default image implementation.

00:27:44.980 --> 00:27:46.660
That's great, but you know what?

00:27:46.660 --> 00:27:49.170
This default implementation
isn't very good.

00:27:49.180 --> 00:27:54.940
It's the, we, the images are kind of big,
and the image takes one whole column,

00:27:54.940 --> 00:27:57.880
and the way I want to
develop my application,

00:27:58.180 --> 00:28:01.770
I want all of those four columns, one,
two, three, four,

00:28:02.400 --> 00:28:05.460
to be collapsed into one column,
and I want the layout a little different.

00:28:05.460 --> 00:28:08.370
So I want the image on my left,
and then right alongside the image,

00:28:08.420 --> 00:28:10.140
I want the four fields of the thing.

00:28:10.140 --> 00:28:12.800
We don't give you that in Direct to Web,
okay?

00:28:14.630 --> 00:28:17.270
That's not a problem because you
can write your own custom component

00:28:17.320 --> 00:28:20.200
and plug it into the application.

00:28:20.240 --> 00:28:21.840
We already wrote this custom component.

00:28:21.840 --> 00:28:22.640
It's in our framework.

00:28:22.750 --> 00:28:24.470
It doesn't do much.

00:28:24.720 --> 00:28:29.110
We just didn't write it at this moment
to not have any typing mistakes,

00:28:29.180 --> 00:28:30.940
but it's a very simple component.

00:28:30.960 --> 00:28:34.880
It's going to show you
the image on the left.

00:28:35.050 --> 00:28:38.980
And the four fields that we were showing
as columns right next to the image.

00:28:38.980 --> 00:28:41.010
Show the bindings.

00:28:41.890 --> 00:28:45.780
When you write a custom component,
what you have to be aware

00:28:45.780 --> 00:28:48.740
of is that we- Direct2Web is
going to give you two things:

00:28:48.860 --> 00:28:53.320
the object that we want you to render,
and the key that we want you to render.

00:28:53.320 --> 00:28:56.210
So you're going to get
those two variables in.

00:28:56.360 --> 00:28:58.410
And once you know that
those two things exist,

00:28:58.600 --> 00:29:03.000
you can do whatever you want in your
code and associate the bindings.

00:29:03.140 --> 00:29:04.810
Now how do you use it
in your application?

00:29:05.060 --> 00:29:08.170
This component is already pre-built,
pre-compiled.

00:29:08.350 --> 00:29:11.550
Now what Brent does is-

00:29:11.700 --> 00:29:14.650
He adds,
he removes all of the columns and

00:29:14.650 --> 00:29:17.360
leaves only one particular column.

00:29:17.360 --> 00:29:20.460
And then look at that,
the pop-up he's going to click on.

00:29:20.680 --> 00:29:24.890
The very last entry in the pop-up is,
"I want to use my own custom component."

00:29:25.060 --> 00:29:28.970
So he clicks custom component,
you type in the name of your component,

00:29:28.970 --> 00:29:31.230
and it's your formatted item component.

00:29:31.450 --> 00:29:33.480
We click update.

00:29:35.310 --> 00:29:37.400
And there's your custom component.

00:29:37.540 --> 00:29:39.420
So it's a very simple
component in this case,

00:29:39.450 --> 00:29:41.620
but you might want to have
more sophisticated things.

00:29:41.640 --> 00:29:47.800
I just wanted to show you guys
how to plug in your own HTML.

00:29:48.150 --> 00:29:51.560
This is one of those places where
you're plugging in your thing,

00:29:51.730 --> 00:29:55.740
you're plugging in your HTML and
your little snippet of Java code,

00:29:55.840 --> 00:29:57.780
but you're not getting
full access to the page.

00:29:57.910 --> 00:29:59.060
So it's still dynamic.

00:29:59.130 --> 00:30:02.240
You can still add columns to that
page using the web assistant,

00:30:02.240 --> 00:30:04.230
so you're not getting full access.

00:30:04.440 --> 00:30:07.820
Let's say that you ultimately
get to the point where this page,

00:30:07.820 --> 00:30:10.000
you want it to be a
lot more sophisticated,

00:30:10.000 --> 00:30:13.710
and you just want full access
to that Java and that HTML.

00:30:13.850 --> 00:30:16.770
For that, you go to the Expert setting.

00:30:17.170 --> 00:30:20.500
In direct to in the web assistant,
and one of the options

00:30:20.540 --> 00:30:21.860
there is freeze component.

00:30:21.920 --> 00:30:24.800
Every time you see the word freeze,
we mean give me access

00:30:24.800 --> 00:30:26.930
to the Java and the HTML.

00:30:27.050 --> 00:30:31.490
So you freeze the component,
we go back to the project,

00:30:31.700 --> 00:30:37.290
And you see that we generated
all of this code for you.

00:30:37.660 --> 00:30:38.830
And put it in your project.

00:30:38.920 --> 00:30:41.170
So now you have full
access to the list page.

00:30:41.180 --> 00:30:44.670
You have all of the HTML,
you have all of the Java,

00:30:44.670 --> 00:30:46.150
but now it's yours.

00:30:46.500 --> 00:30:49.500
Now notice that we only
froze the list page.

00:30:49.500 --> 00:30:52.630
If we go to the edit page
or if we go somewhere else,

00:30:52.630 --> 00:30:56.500
we can still use the Web Assistant and
configure our application there.

00:30:56.600 --> 00:30:59.980
But the list page, because we reached the
limits of direct-to-web,

00:30:59.980 --> 00:31:01.490
we wanted full access to it.

00:31:01.550 --> 00:31:03.440
So it's not blind code generation.

00:31:03.500 --> 00:31:06.500
And that's all, that's it for this demo.

00:31:06.500 --> 00:31:08.500
So if we go back to slides.

00:31:11.240 --> 00:31:14.080
So that's the end of
the direct web section.

00:31:14.080 --> 00:31:17.160
Now I'll bring Brent up
to actually speak.

00:31:17.190 --> 00:31:18.250
Sorry.

00:31:18.310 --> 00:31:20.630
And he'll do the Java client
part of the talk.

00:31:21.450 --> 00:31:22.710
Thanks, Miguel.

00:31:30.230 --> 00:31:32.730
Well, Direct Web is great because
we can get HTML applications

00:31:32.740 --> 00:31:34.340
without writing hardly any code.

00:31:34.380 --> 00:31:36.910
But when we want to get
customized the application,

00:31:36.980 --> 00:31:39.560
we can write code,
and we can have access to all

00:31:39.560 --> 00:31:41.450
the HTML and Java that we need.

00:31:41.700 --> 00:31:41.740
But

00:31:42.650 --> 00:31:45.980
HTML interfaces are great,
but sometimes you need a little bit more.

00:31:46.060 --> 00:31:47.800
Sometimes you need a desktop interface.

00:31:47.800 --> 00:31:51.050
Sometimes you want a richer UI,
something that allows your users

00:31:51.050 --> 00:31:53.620
to browse their data more quickly
and in a different kind of way.

00:31:53.630 --> 00:31:57.110
And for that, WebObjects provides a
technology called Java Client.

00:31:57.560 --> 00:31:59.960
So before we talk about
direct-to-Java Client,

00:31:59.960 --> 00:32:01.560
let's talk about Java Client.

00:32:01.560 --> 00:32:05.050
So just like direct-to-web
builds on the HTML frameworks and

00:32:05.050 --> 00:32:09.440
tools that WebObjects provides,
direct-to-Java Client builds on top

00:32:09.440 --> 00:32:11.740
of the Java Client technologies.

00:32:11.740 --> 00:32:14.760
So let's go back for a moment
to our most optimistic idea

00:32:14.760 --> 00:32:16.620
of what rapid development is.

00:32:16.620 --> 00:32:19.780
So just like in direct-to-web,
it would be great if we could have an

00:32:19.780 --> 00:32:23.350
application on the system that just said,
build my application.

00:32:23.360 --> 00:32:25.520
But rather than building
a web application,

00:32:25.520 --> 00:32:27.500
an HTML application,
it could build a web application.

00:32:27.550 --> 00:32:36.920
So we can get you pretty close to this,
just like we do in direct-to-web.

00:32:36.920 --> 00:32:38.400
So let's step back.

00:32:38.400 --> 00:32:39.710
So what is Java Client?

00:32:39.720 --> 00:32:43.010
Well, Java Client allows you to
build distributed applications,

00:32:43.010 --> 00:32:45.570
applications that you
distribute over the web.

00:32:45.580 --> 00:32:48.450
These are three-tier applications
that include a WebObjects

00:32:48.460 --> 00:32:52.000
application server in the middle,
and the WebObjects app server

00:32:52.000 --> 00:32:54.420
accesses the database through
the Enterprise Objects framework.

00:32:54.420 --> 00:32:56.270
And like I said,
these are swing desktop applications

00:32:56.270 --> 00:32:57.520
that you can build on the system.

00:32:57.520 --> 00:32:57.520
So you can build a web application
on the system that you're using,

00:32:57.520 --> 00:32:57.540
and you can build a web application
on the system that you're using.

00:32:57.540 --> 00:32:57.540
And you can build a web application
on the system that you're using,

00:32:57.540 --> 00:32:57.620
and you can build a web application
on the system that you're using.

00:32:57.620 --> 00:32:58.780
So these are the three-tier
applications that users use,

00:32:58.780 --> 00:32:59.910
just like any other
application on their system.

00:32:59.920 --> 00:33:04.460
But what this adds up to are
multi-platform EOF applications.

00:33:04.460 --> 00:33:07.940
So this is one of the huge
advantages of having EOF in Java.

00:33:07.940 --> 00:33:10.600
So rather than be
limited to one platform,

00:33:10.650 --> 00:33:14.200
you have available to you
any Java 2 platform to deploy

00:33:14.220 --> 00:33:16.060
the client application.

00:33:16.060 --> 00:33:18.970
Of course, the middle tier,
the app server,

00:33:18.970 --> 00:33:21.140
accesses the database using EOF.

00:33:21.300 --> 00:33:25.040
And because we have this app server,
it can control and mediate

00:33:25.070 --> 00:33:26.970
all access to the data store.

00:33:27.580 --> 00:33:30.400
So in a two-tier client
server application,

00:33:30.400 --> 00:33:32.820
in which the client has
direct access to the database,

00:33:32.820 --> 00:33:35.820
you don't have as many
opportunities to secure that data.

00:33:35.820 --> 00:33:38.840
But in a three-tier setup,
you have all the control you need.

00:33:38.880 --> 00:33:41.300
And because it's a WebObjects
application server,

00:33:41.350 --> 00:33:43.820
you have the full support
of WebObjects sessions,

00:33:43.820 --> 00:33:46.220
so you can provide users
a customized experience,

00:33:46.220 --> 00:33:48.180
even within these swing desktop apps.

00:33:49.650 --> 00:33:51.820
And of course, these applications,
you can bundle them as

00:33:51.840 --> 00:33:55.700
double-clickable applications or
deploy them through Java Web Start.

00:33:55.780 --> 00:33:57.660
So that's what Java Client is.

00:33:57.730 --> 00:34:00.280
So what does Direct to
Java Client add on top of that?

00:34:00.410 --> 00:34:02.810
Well,
just like Direct to Web allows you to

00:34:02.860 --> 00:34:06.430
build HTML web applications quickly,
Direct to Java Client allows you to

00:34:06.430 --> 00:34:07.890
build swing applications quickly.

00:34:08.010 --> 00:34:12.790
Again, both of these technologies
share a lot of characteristics.

00:34:12.800 --> 00:34:15.180
They're both data and rule-driven.

00:34:15.380 --> 00:34:17.940
But unlike Direct to Web,
which uses components and

00:34:17.940 --> 00:34:21.700
dynamic versions of WebObjects
components to generate HTML,

00:34:21.760 --> 00:34:26.010
Direct to Java Client uses something
we call controllers to generate swing.

00:34:26.340 --> 00:34:28.910
: It relies on the rule system
to generate the user interface.

00:34:28.920 --> 00:34:31.770
So just like you saw Miguel go
through how the rule system

00:34:31.770 --> 00:34:35.180
works and how it figures out how
to generate a particular page,

00:34:35.290 --> 00:34:36.830
Java Client does this the same way.

00:34:36.900 --> 00:34:39.790
It uses the same rule system
and the same set of rules,

00:34:39.790 --> 00:34:42.300
but it produces a swing
interface instead.

00:34:42.900 --> 00:34:46.790
: And just like Direct Web has a number
of different tasks for editing data,

00:34:47.130 --> 00:34:50.300
for editing relationships
and traversing relationships,

00:34:50.360 --> 00:34:52.300
Java Client also has multiple tasks.

00:34:52.300 --> 00:34:55.300
And Java Client introduces some new
tasks that are specific and more

00:34:55.350 --> 00:34:57.300
appropriate to desktop applications.

00:34:57.300 --> 00:34:59.190
We're going to talk about some of those.

00:34:59.300 --> 00:35:01.670
And just like with Direct Web,
Direct to Java Client has

00:35:01.670 --> 00:35:03.280
many customization techniques.

00:35:03.300 --> 00:35:05.300
So if the default app isn't
exactly what you want,

00:35:05.300 --> 00:35:09.810
we provide you a lot of interesting
ways to customize the application.

00:35:10.080 --> 00:35:12.570
So again, this helps you change
your development focus,

00:35:12.620 --> 00:35:14.750
allows you to write to focus
on the important things,

00:35:14.800 --> 00:35:15.760
which are your business logic.

00:35:15.800 --> 00:35:19.760
The important things in writing a desktop
swing app is not writing the swing.

00:35:19.760 --> 00:35:21.000
It's something that has to be done.

00:35:21.000 --> 00:35:23.420
It can be a buggy process,
but we take care of it for you,

00:35:23.540 --> 00:35:26.250
so you can focus on the most
important part of your application,

00:35:26.340 --> 00:35:27.810
which is the business logic.

00:35:29.260 --> 00:35:30.970
So we're going to be working
on a lot of different things.

00:35:30.970 --> 00:35:32.610
We're going to be working on
a lot of different things.

00:35:32.610 --> 00:35:34.250
We're going to be working on
a lot of different things.

00:35:34.250 --> 00:35:35.890
We're going to be working on
a lot of different things.

00:35:35.890 --> 00:35:37.760
And just like with DirectWeb,
you can get a working prototype,

00:35:37.760 --> 00:35:39.040
fully functional in minutes or seconds.

00:35:39.040 --> 00:35:40.500
And I say in hours,
because my idea of a Java client

00:35:40.500 --> 00:35:42.240
prototype is something that
is really fully functional,

00:35:42.240 --> 00:35:43.620
that even can include a
very rich login panel.

00:35:43.690 --> 00:35:44.940
And we provide frameworks
to do all of that,

00:35:44.940 --> 00:35:47.200
so you can have a really
functional prototype in hours.

00:35:47.890 --> 00:35:49.200
So we're going to be working
on a lot of different things.

00:35:49.200 --> 00:35:50.460
We're going to be working on
a lot of different things.

00:35:50.460 --> 00:35:51.670
We're going to be working on
a lot of different things.

00:35:51.790 --> 00:35:53.350
And part of this development focus is
that we allow you to have a complete

00:35:53.350 --> 00:35:55.220
working application throughout
the whole lifecycle of the app.

00:35:57.660 --> 00:36:00.840
Okay, so let's review the
direct-to-Java client process.

00:36:00.840 --> 00:36:03.020
It's very similar to the
direct-to-web process.

00:36:03.020 --> 00:36:04.690
It all starts with a data model.

00:36:05.030 --> 00:36:07.600
You use EOModeler to
create that data model.

00:36:07.600 --> 00:36:09.970
You use Project Builder to
create the default application.

00:36:09.970 --> 00:36:13.940
But what you get instead
is a swing application.

00:36:14.650 --> 00:36:16.070
Customization techniques.

00:36:16.180 --> 00:36:19.440
Just like Direct Web has
an assistant that allows,

00:36:19.440 --> 00:36:23.100
which is a front end to the rule system,
allows you to customize the application,

00:36:23.110 --> 00:36:25.960
we provide something called the
Direct-to-Java Client Assistant.

00:36:26.000 --> 00:36:29.210
So this is actually an application,
a swing application,

00:36:29.210 --> 00:36:32.320
that runs inside of the client
application and allows you

00:36:32.320 --> 00:36:35.840
to make customizations on the
fly without writing any code.

00:36:37.470 --> 00:36:38.970
If you really get comfortable
with the rule system,

00:36:39.040 --> 00:36:41.350
you can actually write your
own rules in a rule editor,

00:36:41.450 --> 00:36:43.500
just like you can with direct web.

00:36:43.500 --> 00:36:45.860
And in the course of customizing React,
you may find that you need

00:36:45.860 --> 00:36:46.900
to refine your EO model.

00:36:46.900 --> 00:36:49.110
Maybe you need to add some
attributes to an entity,

00:36:49.110 --> 00:36:52.580
or maybe you want to make a relationship
that was a 2-1 and too many.

00:36:52.580 --> 00:36:53.180
And you can do that.

00:36:53.180 --> 00:36:56.330
In most cases, we synchronize the changes
you make in your EO model,

00:36:56.400 --> 00:36:59.730
and because we're doing dynamic
user interface generation,

00:36:59.740 --> 00:37:02.480
you see those changes
reflected right away.

00:37:03.360 --> 00:37:07.720
So, Direct to Java Client has some
advanced customization techniques.

00:37:07.850 --> 00:37:11.110
So I talked briefly about the
idea of a controller class.

00:37:11.200 --> 00:37:14.300
The controller class is
analogous to a WoE component.

00:37:14.400 --> 00:37:17.160
And just like you can freeze
and extend and write your own

00:37:17.450 --> 00:37:21.990
WoE components and D2W components
for Direct to Web applications,

00:37:22.150 --> 00:37:24.900
you can write and extend
controller classes in Java Client.

00:37:25.000 --> 00:37:28.180
So if you want total control
over a particular user interface

00:37:28.180 --> 00:37:31.380
in the Java Client application,
we allow you to do that.

00:37:31.990 --> 00:37:33.980
An interesting feature of
Java Client is that you can

00:37:33.980 --> 00:37:36.250
actually use Interface Builder,
the same application that

00:37:36.250 --> 00:37:39.220
you used to build Mac OS X,
Carbon, and Cocoa UIs,

00:37:39.260 --> 00:37:40.840
to build static swing interfaces.

00:37:40.840 --> 00:37:42.960
So we actually write out
swing classes for you,

00:37:43.040 --> 00:37:45.330
and you can integrate these
swing classes into your

00:37:45.330 --> 00:37:47.270
Direct-to-Java Client application.

00:37:47.280 --> 00:37:50.100
And when you do this,
it doesn't mean that your whole

00:37:50.140 --> 00:37:54.000
application suddenly becomes full
of these static swing classes.

00:37:54.000 --> 00:37:58.100
You can target just a particular part,
a particular window of your application,

00:37:58.200 --> 00:38:00.000
so you get the best of both worlds.

00:38:00.110 --> 00:38:02.660
You get the dynamic functionality
of Direct-to-Java Client,

00:38:02.660 --> 00:38:07.160
but in some cases where you need precise,
exact control over the layout of a UI,

00:38:07.160 --> 00:38:08.250
you can get that too.

00:38:10.200 --> 00:38:12.280
If you want to get really
fancy with the rule system,

00:38:12.560 --> 00:38:15.120
you can start to write your
own custom assignment classes.

00:38:15.400 --> 00:38:17.660
We talked a little bit in the
technical overview yesterday

00:38:17.660 --> 00:38:20.310
about inheritance in EOF,
which allows you to think about

00:38:20.310 --> 00:38:22.600
your data in object-oriented terms.

00:38:22.670 --> 00:38:24.440
Well,
you can actually extend the rule system.

00:38:24.440 --> 00:38:27.550
This is something that I've
done to provide some support for

00:38:27.550 --> 00:38:29.740
inheritance in the rule system.

00:38:29.910 --> 00:38:32.710
So, in the end,
you can get a Java client interface

00:38:32.720 --> 00:38:36.400
that looks nothing like what you
get out of the box for free from us,

00:38:36.660 --> 00:38:39.510
but by writing a little swing and
by learning about the rule system,

00:38:39.570 --> 00:38:41.600
you can get the exact interface you want.

00:38:41.600 --> 00:38:44.510
And we're actually going to build
this one that you see on the screen.

00:38:45.450 --> 00:38:47.420
Okay,
so these controllers are very important,

00:38:47.450 --> 00:38:49.800
so they warrant a couple
slides of their own.

00:38:49.800 --> 00:38:52.520
Like I said,
they're analogous to WoW components,

00:38:52.520 --> 00:38:54.640
and they really implement
client functionality.

00:38:54.640 --> 00:38:58.050
And they do this because they're the
glue between your business objects,

00:38:58.050 --> 00:39:01.820
between your data,
and between the user interface.

00:39:01.820 --> 00:39:03.550
So they look at the description
of your data that you

00:39:03.590 --> 00:39:04.760
provide us in your EO model.

00:39:04.950 --> 00:39:08.710
This can be the same EO model that you
use in a direct-to-web application,

00:39:08.710 --> 00:39:12.690
or even in a traditional
WebObjects application of any type.

00:39:12.810 --> 00:39:17.800
So by looking at your EO model,
different types of controllers are

00:39:17.800 --> 00:39:21.240
responsible and generate different
parts of the client application.

00:39:21.380 --> 00:39:23.940
So there are four main
types of controllers.

00:39:24.040 --> 00:39:26.660
There are application-level controllers,
which are responsible for

00:39:26.660 --> 00:39:32.140
bootstrapping the client application,
and are responsible for getting all

00:39:32.140 --> 00:39:34.090
the other controllers up and running.

00:39:34.240 --> 00:39:36.750
There are user
interface-level controllers,

00:39:36.750 --> 00:39:40.850
which are responsible for knowing how
to draw windows or modal dialogues.

00:39:41.100 --> 00:39:44.030
And there are entity-level controllers,
which look at the entities defined

00:39:44.030 --> 00:39:47.820
in your model and create an
appropriate user interface for them.

00:39:48.020 --> 00:39:50.740
And there are property level controllers,
which usually are expressed in

00:39:50.740 --> 00:39:54.260
the client as a particular widget,
whether it's a text field, a text area,

00:39:54.300 --> 00:39:55.400
or an image view.

00:39:55.540 --> 00:39:58.900
And these correspond to the
attributes in your data model.

00:39:59.690 --> 00:40:02.290
So these controllers work
together to form a hierarchy,

00:40:02.470 --> 00:40:06.040
and this hierarchy provides the
complete description of the client

00:40:06.040 --> 00:40:09.560
application and of each user interface
within the client application.

00:40:09.560 --> 00:40:11.810
And we'll look at the director
of Java Client Assistant,

00:40:11.810 --> 00:40:13.990
which actually will show
you the controller hierarchy

00:40:13.990 --> 00:40:15.420
throughout your application.

00:40:15.440 --> 00:40:19.100
So this is a very abstract view of
what the controller hierarchy is.

00:40:21.100 --> 00:40:26.140
So we see that this particular
hierarchy is enclosed by window tags.

00:40:26.190 --> 00:40:30.710
And these aren't the actual tags,
it's just abstract for our purposes here.

00:40:30.720 --> 00:40:34.020
So that window is
encompassed by window tags.

00:40:34.020 --> 00:40:35.880
It also includes an
action button controller,

00:40:35.920 --> 00:40:37.820
which is responsible
for drawing the toolbar,

00:40:37.820 --> 00:40:39.980
and a tab view controller,
which is responsible

00:40:39.980 --> 00:40:41.100
for drawing the tabs.

00:40:41.100 --> 00:40:43.960
So you don't really need to worry
about the details of this right now,

00:40:44.080 --> 00:40:46.400
but if you're curious about
how we build up this interface

00:40:46.400 --> 00:40:48.580
and the components behind it,
we use controllers in

00:40:48.680 --> 00:40:50.010
this controller hierarchy.

00:40:52.420 --> 00:40:54.780
Okay, so, well,
how does all of this happen?

00:40:54.820 --> 00:40:59.020
This is kind of a complicated slide,
but I'm sure some of you are interested.

00:40:59.020 --> 00:41:02.190
So the client application starts up,
and it needs to generate

00:41:02.220 --> 00:41:03.320
a user interface.

00:41:03.320 --> 00:41:04.620
So how does it do this?

00:41:04.620 --> 00:41:07.480
Well, it relies on an object called
the controller factory.

00:41:07.480 --> 00:41:10.950
So it says to the controller factory,
give me a window for something.

00:41:11.240 --> 00:41:15.900
It could be for a particular entity,
or it could be a controller

00:41:15.940 --> 00:41:16.360
for a particular widget.

00:41:17.090 --> 00:41:20.300
Well, the controller factory knows
how to do a lot of things,

00:41:20.360 --> 00:41:24.240
but it needs to rely on the rule
system for a lot of the information.

00:41:24.240 --> 00:41:26.830
So it sends a request to the rule system.

00:41:26.830 --> 00:41:30.040
Now, the rule system lives on the server,
and it lives on the server

00:41:30.040 --> 00:41:32.920
because your EO models and your
rule files live on the server,

00:41:32.920 --> 00:41:35.780
and it's mainly for security
and performance reasons.

00:41:35.780 --> 00:41:41.140
So now you have a sense of where these
objects lie on the client-server divide.

00:41:41.140 --> 00:41:45.940
So the rule system, then,
is contacted by the controller factory.

00:41:46.820 --> 00:41:49.260
And it may need to consult
your rule models and your data

00:41:49.280 --> 00:41:50.720
models for more information.

00:41:50.720 --> 00:41:55.070
So it packages an XML description
of these controllers,

00:41:55.070 --> 00:41:56.990
and it hands it back to
the controller factory.

00:41:57.000 --> 00:42:00.050
And then the controller factory
is responsible for creating this

00:42:00.190 --> 00:42:02.100
hierarchy that we talked about before.

00:42:02.100 --> 00:42:06.180
And in the end, what you get is a user
interface in your application.

00:42:06.180 --> 00:42:08.420
So this is all described
in the documentation.

00:42:08.550 --> 00:42:10.610
Again,
you don't really need to know about it,

00:42:10.610 --> 00:42:14.260
but it gives you a sense of all of the
work that's going on behind the scenes.

00:42:16.220 --> 00:42:18.620
So I said there are a number
of customization techniques

00:42:18.670 --> 00:42:22.350
in Direct to Java Client,
and let's go over them now.

00:42:22.410 --> 00:42:24.240
So there's the Assistant,
and the Assistant is a very

00:42:24.240 --> 00:42:28.100
high-level customization technique,
and it's very low cost.

00:42:28.120 --> 00:42:30.700
And these are listed
roughly in order of cost.

00:42:30.750 --> 00:42:34.600
The more you customize your application
and the more advanced technique you use,

00:42:34.620 --> 00:42:37.280
just like with Direct to Web,
you lose a lot of the

00:42:37.280 --> 00:42:38.900
dynamic flexibility.

00:42:38.900 --> 00:42:42.290
Now the nice part is,
you can make the decisions about- you

00:42:42.330 --> 00:42:47.080
can choose a customization technique
on an interface-by-interface level.

00:42:47.150 --> 00:42:50.590
So you don't have to say, "Well,
I want to freeze the XML controllers

00:42:50.590 --> 00:42:52.770
for my whole application." No,
you can say,

00:42:52.800 --> 00:42:55.470
"This one window is really important,
and I need to have total control

00:42:55.470 --> 00:42:59.320
over this particular window." So you
freeze the XML for that window.

00:42:59.470 --> 00:43:00.870
So let's go through these.

00:43:01.030 --> 00:43:03.970
You can write your own custom rules,
like I said, in Rule Editor.

00:43:04.090 --> 00:43:05.970
You can extend controller classes.

00:43:06.090 --> 00:43:08.790
So all of the windows you
see on the screen are back.

00:43:08.800 --> 00:43:10.500
They're backed by a controller class.

00:43:10.500 --> 00:43:13.300
And if you want to tweak the
functionality of a particular window,

00:43:13.320 --> 00:43:16.130
you can simply subclass one of
these controller classes and

00:43:16.130 --> 00:43:18.700
provide that custom functionality.

00:43:18.700 --> 00:43:21.590
And like I alluded to,
you can actually freeze the

00:43:21.840 --> 00:43:26.660
descriptions of these controllers and
edit the tags manually if you want.

00:43:26.760 --> 00:43:29.940
And you can use Interface Builder,
of course, to build static interfaces.

00:43:30.140 --> 00:43:32.320
And you can actually interact
programmatically with this

00:43:32.380 --> 00:43:33.400
ControllerFactory object.

00:43:33.470 --> 00:43:36.380
So behind the scenes in
a running application,

00:43:36.380 --> 00:43:39.510
the ControllerFactory is
constantly being talked to,

00:43:39.870 --> 00:43:42.940
and the application is
constantly making requests to it.

00:43:43.020 --> 00:43:44.660
But you may want to do
that programmatically.

00:43:44.840 --> 00:43:48.450
It's a very powerful way to
get a particular interface.

00:43:48.490 --> 00:43:50.550
And of course, you can write your own
controller classes.

00:43:50.630 --> 00:43:53.590
And we're going to show you, I think,
all of these customization

00:43:54.000 --> 00:43:55.620
techniques in this demo.

00:43:58.600 --> 00:44:05.000
[Transcript missing]

00:44:07.790 --> 00:44:10.740
I'm going to start a new application.

00:44:10.740 --> 00:44:14.520
I'm going to use the same
model that we used in the HTML,

00:44:14.520 --> 00:44:15.460
the Direct Web application.

00:44:15.460 --> 00:44:18.570
So I'm going to select
Direct to Java Client.

00:44:22.410 --> 00:44:27.400
I'm just going to take
the defaults for now.

00:44:27.500 --> 00:44:30.330
And I'm going to select the same model,
like I said.

00:44:31.270 --> 00:44:33.170
And you notice this WebStart pane here.

00:44:33.270 --> 00:44:37.070
These allow you to configure the
parameters for the JNLP file that

00:44:37.080 --> 00:44:41.040
we dynamically generate for you
that allows you- provides the

00:44:41.140 --> 00:44:43.660
client application without you
having to do anything more about it.

00:44:43.750 --> 00:44:45.940
So I'm going to build and
launch the application.

00:44:46.170 --> 00:44:49.500
And while that's building and launching,
let's just look at what

00:44:49.500 --> 00:44:51.800
Project Builder created for me.

00:44:51.910 --> 00:44:55.950
So this project template is actually
simpler than the direct-to-web

00:44:56.050 --> 00:44:57.800
project that we created.

00:44:57.920 --> 00:45:02.160
It contains just the classes that
WebObjects needs to bootstrap

00:45:02.240 --> 00:45:04.300
a Java client application.

00:45:04.400 --> 00:45:07.200
So there are two web components.

00:45:07.200 --> 00:45:09.830
You see in our resources we
have the Star Wars model and

00:45:09.960 --> 00:45:11.200
one of these rule models.

00:45:11.420 --> 00:45:15.300
But there's really- we're not doing
code generation as Miguel said.

00:45:15.360 --> 00:45:17.270
It's all happening on the fly.

00:45:17.570 --> 00:45:19.400
This is going to start up.

00:45:19.460 --> 00:45:21.800
And you see,
rather than starting in a browser,

00:45:21.800 --> 00:45:26.170
we have this swing application.

00:45:27.600 --> 00:45:30.830
Okay, we'll figure that out in a second.

00:45:30.900 --> 00:45:32.000
And it has a number of
interesting features.

00:45:32.000 --> 00:45:34.400
So I can search for items
in Miguel's collection,

00:45:34.500 --> 00:45:36.940
and I get the results back here.

00:45:37.550 --> 00:45:41.760
I can drill down and look
at the form of one of these.

00:45:42.040 --> 00:45:45.410
But one of the best things you
get for free is undo and redo.

00:45:45.650 --> 00:45:49.060
So I'm just going to change
a couple things here.

00:45:49.160 --> 00:45:51.920
I'm going to change
item name and save it.

00:45:52.350 --> 00:45:55.410
I'm going to select a different
condition for the item.

00:45:57.900 --> 00:45:59.960
And I'm going to select
a different movie.

00:46:00.140 --> 00:46:02.450
Now, Miguel's not going to
like that I'm doing this,

00:46:02.570 --> 00:46:05.590
but because we have full undo and redo,
it's not going to matter.

00:46:05.590 --> 00:46:07.300
So I'm going to undo what I just did.

00:46:07.300 --> 00:46:10.250
So you notice that episode three
changed back to episode five,

00:46:10.250 --> 00:46:12.430
and the condition changed
back to what it was,

00:46:12.460 --> 00:46:13.970
and the item name changed back.

00:46:13.980 --> 00:46:15.500
So you get all of this for free.

00:46:15.500 --> 00:46:18.590
And yes, you can write your own undo
managers and things like that,

00:46:18.690 --> 00:46:20.230
but why do it when we do it for you?

00:46:20.280 --> 00:46:23.310
So that's one of the best
features of Java Client.

00:46:24.750 --> 00:46:25.970
So let's look for a
minute at the Assistant,

00:46:25.970 --> 00:46:27.660
since it's the first customization tool.

00:46:27.660 --> 00:46:30.590
And the first pane I want to draw
your attention to is the XML pane.

00:46:30.590 --> 00:46:34.110
And the XML pane allows you to view
what we call the specifications,

00:46:34.110 --> 00:46:37.240
and these are the controller
hierarchies for each of the user

00:46:37.240 --> 00:46:39.300
interfaces in your application.

00:46:40.700 --> 00:46:42.580
So let's look at this item form window.

00:46:42.580 --> 00:46:44.800
So this is a form window
for an item record.

00:46:44.800 --> 00:46:48.910
And I identify that over here.

00:46:49.320 --> 00:46:51.780
And we can see,
just like you saw on the abstract

00:46:51.780 --> 00:46:54.510
slide about the controller hierarchy,

00:46:54.800 --> 00:46:57.410
We see that it's enclosed
by this frame controller,

00:46:57.410 --> 00:47:00.240
which corresponds to the
window tag on that slide.

00:47:00.240 --> 00:47:02.550
And we have this actions button
controller that corresponds

00:47:02.560 --> 00:47:03.460
to the action buttons.

00:47:03.460 --> 00:47:08.650
So in the Save to File button
here is one way that you can get

00:47:08.920 --> 00:47:12.760
a hold of this XML if you want to
customize it and move things around,

00:47:12.790 --> 00:47:15.540
if you want to do things that the
Assistant doesn't allow you to do.

00:47:15.540 --> 00:47:18.460
Now, we encourage you to use the
Assistant to make all the customizations

00:47:18.460 --> 00:47:20.480
that you possibly can in it,
and then to move on to the

00:47:20.510 --> 00:47:22.190
other customization techniques.

00:47:22.900 --> 00:47:24.740
So let's customize this app.

00:47:24.740 --> 00:47:28.660
So it's nice seeing the results of
my search in this table view here,

00:47:28.660 --> 00:47:32.360
but I really want to see
the photos of these items,

00:47:32.420 --> 00:47:33.940
just like I did in the Direct Web app.

00:47:33.940 --> 00:47:35.740
Well, how do I do that?

00:47:35.810 --> 00:47:39.710
Well, I actually wrote a framework that
provides this custom functionality,

00:47:39.710 --> 00:47:41.710
and I'm going to add it to the project.

00:47:41.780 --> 00:47:44.080
And then we're going to go through,
and I'm going to show you,

00:47:44.080 --> 00:47:47.290
we're going to walk through the framework
so you can understand what it's doing.

00:47:49.020 --> 00:47:51.190
I'm going to add it both to
the application server target

00:47:51.230 --> 00:47:52.760
and the web server target.

00:47:52.810 --> 00:47:57.090
The web server target corresponds to
the client application in this case.

00:47:57.390 --> 00:48:02.010
And because clients today are very smart
and have a lot of processing power,

00:48:02.130 --> 00:48:04.940
we can actually ask the
client to do a lot of things.

00:48:04.960 --> 00:48:10.740
So it makes sense to have the client
perform some of these functions.

00:48:10.970 --> 00:48:14.470
So I'm going to rebuild the project
now that I've included this framework.

00:48:14.850 --> 00:48:18.040
What I expect to see is,
rather than see the results of

00:48:18.040 --> 00:48:21.700
the search in the table view,
I want to see photos.

00:48:21.700 --> 00:48:27.700
So let's bring the framework
up while that's building.

00:48:27.700 --> 00:48:33.000
Takes just a second.

00:48:36.200 --> 00:48:46.110
So again, all I've done is I've added
this framework to the product.

00:48:46.110 --> 00:48:46.110
So what I expect to happen is

00:48:46.530 --> 00:48:51.250
When I search for items,
and I'm going to search for everything,

00:48:51.250 --> 00:48:53.500
you can search with wildcards
and things like that,

00:48:53.630 --> 00:48:55.680
all of the item names
that have "Darth" in them.

00:48:55.830 --> 00:49:01.630
Alright, so you see I get the results
back in this resizable window.

00:49:01.770 --> 00:49:05.590
I can actually click on the results
and see more information about them,

00:49:05.590 --> 00:49:07.700
and I have a tooltip
there and all of that.

00:49:07.700 --> 00:49:08.700
So, how does this happen?

00:49:08.700 --> 00:49:11.980
Well, like I said, this uses a lot of the
advanced Direct-to-Java client

00:49:11.980 --> 00:49:13.700
customization techniques.

00:49:13.700 --> 00:49:15.770
So, let's look at it.

00:49:16.110 --> 00:49:17.820
Let's actually look at the framework.

00:49:17.860 --> 00:49:23.140
So the first thing we do is when
the user clicks the Find button,

00:49:23.160 --> 00:49:27.190
we need to, in a sense,
intercept that request and take control

00:49:27.190 --> 00:49:28.860
of the application at that point.

00:49:28.920 --> 00:49:30.500
So I'm using the rule system to do that.

00:49:30.500 --> 00:49:33.250
So let's open up this rule
file that's in the framework.

00:49:34.210 --> 00:49:39.100
So it says, for the query task,
and we're querying on an item,

00:49:39.100 --> 00:49:40.800
for a controller that's
an entity controller,

00:49:40.960 --> 00:49:45.140
item is an entity in my model,
use a different class.

00:49:45.140 --> 00:49:47.030
So rather than use the
query controller class,

00:49:47.090 --> 00:49:49.490
which is the default,
the EOQueryController class,

00:49:49.490 --> 00:49:53.010
which is the default,
use this custom controller class.

00:49:53.120 --> 00:49:57.260
So if I look at my framework for
a class named QueryController,

00:49:58.880 --> 00:50:00.640
We see that it's a subclass
of EOQueryController.

00:50:00.640 --> 00:50:03.840
So it doesn't do much,
but the most important thing it does

00:50:03.840 --> 00:50:05.370
is it overrides the find method.

00:50:05.380 --> 00:50:08.680
And this allows me to take
control when the user clicks find.

00:50:08.680 --> 00:50:14.340
So I get the fetch specification that
directJavaClient constructs for me.

00:50:14.340 --> 00:50:19.530
So when the user clicks find here,
directJavaClient is constructing

00:50:19.580 --> 00:50:23.240
a description of the data that the
user wants to fetch based on the

00:50:23.240 --> 00:50:26.440
query parameters they've entered.

00:50:27.280 --> 00:50:30.000
So now I'm making an invocation
on the controller factory.

00:50:30.000 --> 00:50:32.240
We talked about this controller
factory object and that you

00:50:32.350 --> 00:50:35.280
can do very powerful things by
interacting with it programmatically.

00:50:35.280 --> 00:50:39.240
So I'm asking it to open
a window for another task.

00:50:39.290 --> 00:50:41.550
And in this case, the task is scroll.

00:50:41.560 --> 00:50:42.840
Well, where does that come from?

00:50:42.840 --> 00:50:45.980
It's not one of the default tasks,
but it's a task that

00:50:45.980 --> 00:50:47.710
I define in my rule file.

00:50:47.720 --> 00:50:52.110
And so what I'm saying with this rule
is that when asked for the scroll task,

00:50:52.320 --> 00:50:52.960
provide a window.

00:50:52.960 --> 00:50:57.580
And the window that I want to provide
is corresponds to the definitions

00:50:57.580 --> 00:50:59.120
in the scroll view component.

00:51:00.940 --> 00:51:03.020
You're all following me?

00:51:03.020 --> 00:51:06.880
So we go to-- back to the framework,
and I have a component

00:51:07.020 --> 00:51:08.920
called scroll view component.

00:51:09.190 --> 00:51:14.100
And it's a D2W component,
so we use D2W templates in

00:51:14.100 --> 00:51:16.900
Java Client as actually the templates
for a lot of these controllers,

00:51:16.900 --> 00:51:21.160
so don't really need to understand that,
but the important thing is

00:51:21.160 --> 00:51:22.860
that this contains frozen XML.

00:51:22.860 --> 00:51:26.120
So this is part of- this is an
XML hierarchy for the description of

00:51:26.410 --> 00:51:28.220
the window that I want to display.

00:51:28.220 --> 00:51:31.100
So it includes a frame
controller with a bunch of tags.

00:51:31.100 --> 00:51:34.810
It includes a single text field
controller with static text.

00:51:35.480 --> 00:51:37.810
But most importantly,
it has this generic controller tag.

00:51:37.810 --> 00:51:41.210
And this controller tag
specifies another class.

00:51:41.260 --> 00:51:43.780
And this class is a scroll
view controller class.

00:51:43.780 --> 00:51:47.290
So again, I look at my project for
scroll view controller.

00:51:47.330 --> 00:51:48.380
Well, what is this?

00:51:48.500 --> 00:51:51.260
It happens to be a subclass
of EOWidgetController.

00:51:51.360 --> 00:51:55.060
And I'm subclassing EOWidgetController
because it already provides

00:51:55.060 --> 00:51:58.230
a lot of the functionality,
a lot of the smarts to actually

00:51:58.230 --> 00:51:59.950
display a swing widget.

00:52:00.060 --> 00:52:01.770
But I want to write a new widget.

00:52:01.850 --> 00:52:04.970
So I override this method
to return a new widget.

00:52:05.060 --> 00:52:07.250
And I don't know much
about writing swing,

00:52:07.250 --> 00:52:09.790
but, you know,
I spent half a day and looked at the

00:52:09.790 --> 00:52:14.330
Sun docs and I could figure enough out to
actually write that scrolling component.

00:52:14.340 --> 00:52:18.010
So here I'm actually writing my
own swing and plugging that widget

00:52:18.010 --> 00:52:19.880
into the client application.

00:52:20.200 --> 00:52:38.600
[Transcript missing]

00:52:43.500 --> 00:52:43.900
Thanks, Brian.

00:52:43.900 --> 00:52:47.480
I'm sorry.

00:52:47.480 --> 00:52:49.760
So we talked about direct to web.

00:52:50.010 --> 00:52:51.850
We talked about direct to Java client.

00:52:52.080 --> 00:52:56.710
The last thing we had on the introductory
slide was direct to web services.

00:52:56.710 --> 00:53:00.420
We won't talk about that other than this
slide because there's a whole session

00:53:00.420 --> 00:53:02.360
on direct to web services on Friday.

00:53:02.470 --> 00:53:08.020
What I want you guys to keep in mind if
you go to this session is the process.

00:53:08.110 --> 00:53:11.120
When you're hearing about direct -- well,
they introduced web services

00:53:11.120 --> 00:53:13.270
a lot more in this session,
but there will be a part of the

00:53:13.270 --> 00:53:16.520
presentation where they talk
about direct to web services.

00:53:16.520 --> 00:53:17.780
So keep the process in mind.

00:53:17.780 --> 00:53:19.420
You're also starting with a model.

00:53:19.420 --> 00:53:21.340
You're also getting a
default app for free.

00:53:21.340 --> 00:53:24.600
And you're also using customization
techniques very similar to

00:53:24.630 --> 00:53:26.280
the ones we showed you here.

00:53:26.280 --> 00:53:27.280
So that's all.

00:53:27.280 --> 00:53:29.930
And if you want to know more
about direct to web services,

00:53:29.930 --> 00:53:31.680
go to session 612 on Friday.

00:53:33.620 --> 00:53:38.060
Summarizing what we talked about today,
we talked about the rapid

00:53:38.100 --> 00:53:42.730
development technologies,
the direct-to-start world.

00:53:42.840 --> 00:53:46.440
You come in at the very
beginning by giving us a model,

00:53:46.440 --> 00:53:49.270
a description of your data.

00:53:49.380 --> 00:53:51.950
You use direct-to-web,
direct-to-Java client,

00:53:51.950 --> 00:53:54.660
or direct-to-web services,
and we give you a default

00:53:54.710 --> 00:53:56.210
application for free.

00:53:56.260 --> 00:53:59.640
You use an assistant,
the special assistant, depending on which

00:53:59.640 --> 00:54:02.260
technology you're using,
but they're going to be

00:54:02.260 --> 00:54:03.600
similar functionality.

00:54:03.600 --> 00:54:06.640
And you start doing basic
customization by doing indirect

00:54:06.640 --> 00:54:08.990
manipulation of the rules.

00:54:09.110 --> 00:54:11.890
And you can get very,
like roll up your sleeves

00:54:11.890 --> 00:54:16.700
and do heavy duty HTML,
Java, XML, all that stuff you guys do

00:54:16.780 --> 00:54:18.720
as WebObjects developers.

00:54:18.720 --> 00:54:23.160
And you can plug in bits and pieces
of your components into a running

00:54:23.190 --> 00:54:28.870
application until you finally get
to your customized application.

00:54:29.070 --> 00:54:32.570
So that's the end of our session today,
the roadmap.

00:54:32.720 --> 00:54:36.090
This is WebObjects Day in this room,
if you haven't noticed.

00:54:36.200 --> 00:54:38.420
We have a bunch of
WebObjects sessions all day,

00:54:38.420 --> 00:54:39.000
I think.

00:54:39.000 --> 00:54:47.000
Sessions relevant to this one are
Advanced DOF at the end of the day here,

00:54:47.290 --> 00:54:51.650
and the Creating Web Services session
on Friday.

00:54:52.900 --> 00:54:54.160
contact page.

00:54:54.170 --> 00:54:57.600
You've probably seen this a lot of times.

00:54:57.640 --> 00:55:01.300
And this one is important.

00:55:01.300 --> 00:55:07.640
Brent has put in a lot of work in
writing a lot of books and documentation

00:55:07.640 --> 00:55:12.640
for the Direct to Start technologies
and the rest of the doc team.

00:55:12.640 --> 00:55:16.250
And he's got some books here,
and we have a book for Direct to Web,

00:55:16.250 --> 00:55:19.600
a book for Direct to Java client,
the Advanced DOF books.

00:55:19.600 --> 00:55:25.600
There's a lot of places to start out.

00:55:25.600 --> 00:55:26.120
And Q&A.

00:55:35.760 --> 00:55:38.080
Put these slides back
while we're in the Q&A,

00:55:38.080 --> 00:55:40.360
if you guys-- because we
never leave them long enough.

00:55:40.360 --> 00:55:41.750
Are you guys--