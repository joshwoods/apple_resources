WEBVTT

00:00:26.840 --> 00:00:28.530
Good afternoon.

00:00:28.530 --> 00:00:32.350
In the history of the
Macintosh operating system,

00:00:32.350 --> 00:00:34.360
there are some defining moments.

00:00:34.360 --> 00:00:42.310
One of those moments was of course 1984,
with the release of the first Macintosh.

00:00:42.360 --> 00:00:48.360
I'm sure everyone here is really fond
of that little black and white screen.

00:00:48.360 --> 00:00:51.220
If you look carefully,
you'll see all the sizes for

00:00:51.220 --> 00:00:55.360
folders expressed for disk
sizes expressed in kilobytes.

00:00:55.360 --> 00:00:59.360
We've gone quite a ways
over the last two decades.

00:00:59.360 --> 00:01:02.550
Now there's another moment
that's very dear to my heart,

00:01:02.720 --> 00:01:08.550
which is 2001, when we released the
first version of Mac OS X,

00:01:08.550 --> 00:01:10.360
version 10.0.

00:01:10.360 --> 00:01:14.360
It already had all the elements
you are now familiar with:

00:01:14.360 --> 00:01:19.360
the Aqua user interface and
the strong Unix underpinnings.

00:01:19.360 --> 00:01:23.920
The reception has been fantastic,
from our users and from you,

00:01:23.920 --> 00:01:27.920
who have brought thousands of
applications to the platform.

00:01:27.920 --> 00:01:32.920
So we felt it was time,
last year at the developers conference,

00:01:32.920 --> 00:01:36.920
to symbolically bury Mac OS 9.

00:01:37.510 --> 00:01:40.040
and that meant that for
development purposes,

00:01:40.040 --> 00:01:42.690
Mac OS X life was over.

00:01:42.690 --> 00:01:45.400
It was time to move on to X.

00:01:45.400 --> 00:01:49.620
And a few months after the
developers conference last year,

00:01:49.620 --> 00:01:54.890
we released Jaguar,
which was probably the most or one

00:01:54.890 --> 00:01:59.400
of the most successful OS releases
Apple has ever had in its history.

00:01:59.400 --> 00:02:02.220
There were lots of features in Jaguar.

00:02:02.760 --> 00:02:06.500
Some were brand new,
revolutionary features and

00:02:06.830 --> 00:02:08.600
some were just evolution.

00:02:08.600 --> 00:02:13.400
We're committed to constantly
improving all our components.

00:02:13.400 --> 00:02:16.400
So now we're moving towards Panfer.

00:02:16.400 --> 00:02:20.910
So what's in store for Panfer?

00:02:21.100 --> 00:03:35.800
[Transcript missing]

00:03:47.350 --> 00:03:52.400
Now, the basics of mobility, of course,
is great portables.

00:03:52.440 --> 00:03:56.640
And we are happy because we have
the best portables in the industry.

00:03:56.910 --> 00:04:00.820
We introduced at the beginning
of the year the 12-inch,

00:04:00.820 --> 00:04:04.180
the 17-inch, fantastic portables.

00:04:04.220 --> 00:04:06.000
But of course,
what you're interested in more

00:04:06.000 --> 00:04:08.040
is what's inside those things.

00:04:08.210 --> 00:04:09.140
So this is an X-ray.

00:04:09.220 --> 00:04:12.300
This is what's really inside
one of those portables.

00:04:12.400 --> 00:04:16.340
So if you notice at
the top of that X-ray,

00:04:16.340 --> 00:04:20.510
there's kind of a funny-looking
bent piece of metal.

00:04:20.850 --> 00:04:22.520
That's the antenna.

00:04:22.520 --> 00:04:26.540
We've been, of course,
the leaders in wireless technology.

00:04:26.690 --> 00:04:33.430
First, with 802.11b, the airport,
11 megabits, of course.

00:04:33.440 --> 00:04:35.840
And more recently,
at the beginning of the year,

00:04:35.840 --> 00:04:39.680
with 802.11g, which goes to 54 megabit.

00:04:39.680 --> 00:04:44.110
That's what we call
export-- airport extreme.

00:04:44.180 --> 00:04:48.100
We are also adding, for Panther, 802.11x.

00:04:48.110 --> 00:04:51.810
Now, the whole naming of those
things is a little confusing,

00:04:51.810 --> 00:04:55.030
all those bizarre letters
that are added after numbers.

00:04:55.120 --> 00:04:59.600
802.11x is actually not
just a wireless protocol.

00:04:59.910 --> 00:05:03.460
It's an authentication protocol
that can be used for all networking.

00:05:03.520 --> 00:05:05.800
And this is where we
put it in the system,

00:05:05.800 --> 00:05:08.430
at the place where it should be,
so that all networking

00:05:08.540 --> 00:05:11.330
can leverage 802.11x.

00:05:11.970 --> 00:05:16.630
Okay, so let's go back to that picture
of the portable and let's focus

00:05:16.690 --> 00:05:21.620
on the modem port and the ethernet
port and the antenna again.

00:05:21.620 --> 00:05:26.520
All those things together
are networking ports.

00:05:26.520 --> 00:05:30.880
So networking is a big
focus of what we do.

00:05:30.880 --> 00:05:36.100
There's a lot of resources that
go into doing networking right.

00:05:36.150 --> 00:05:40.940
And that's really hard because
networking is fundamentally very hard.

00:05:40.980 --> 00:05:48.430
There's a joke that networking is
only one letter away from not working.

00:05:48.430 --> 00:05:50.580
And that's really true.

00:05:50.580 --> 00:05:53.530
And when you do the rehearsals
for this show and you have all

00:05:53.530 --> 00:05:56.850
kinds of networking problems,
the routers that explode

00:05:56.890 --> 00:05:59.050
and all that stuff,
you realize networking is really,

00:05:59.050 --> 00:05:59.670
really hard.

00:05:59.700 --> 00:06:03.090
So because it's so hard,
we make it a system service so

00:06:03.090 --> 00:06:06.580
that if your application is a
document centric application,

00:06:06.580 --> 00:06:09.050
it should not have any networking code.

00:06:09.060 --> 00:06:10.060
We do the networking code.

00:06:10.060 --> 00:06:13.860
So we have a number of new
features in Panfers that your

00:06:13.860 --> 00:06:16.000
application can leverage.

00:06:16.100 --> 00:06:21.440
We're adding IPv6, IPsec,
and based on IPsec,

00:06:21.560 --> 00:06:24.990
we're adding VPN that I'm sure a
lot of you who are in corporate

00:06:25.040 --> 00:06:26.730
environments will enjoy.

00:06:26.780 --> 00:06:29.300
802NX, I already mentioned.

00:06:29.300 --> 00:06:33.990
And something that your application
may actually want to use is what we

00:06:34.080 --> 00:06:36.740
call the advanced reachability API.

00:06:36.780 --> 00:06:39.140
Let's say your application
depends on the server as a whole.

00:06:39.140 --> 00:06:44.380
And one way to make sure that
the service you depend on is

00:06:44.460 --> 00:06:48.050
there is to ask every second,
every minute.

00:06:48.140 --> 00:06:49.620
You just poll and ask.

00:06:49.620 --> 00:06:50.460
This is terrible.

00:06:50.460 --> 00:06:51.150
This is polling.

00:06:51.220 --> 00:06:53.620
This is really bad for
a number of reasons.

00:06:53.690 --> 00:06:57.660
So what we have provided is a
reachability API where you can say,

00:06:57.660 --> 00:06:59.900
hey, I'm interested in this server.

00:06:59.960 --> 00:07:02.610
Call me back when the
reachability change,

00:07:02.650 --> 00:07:06.340
whether the server becomes
reachable or not reachable.

00:07:06.340 --> 00:07:09.240
And one thing which is fantastic
is that we know exactly-- the

00:07:09.410 --> 00:07:14.070
reachability because we are
working as a lowest layer here.

00:07:15.160 --> 00:07:18.420
So I already mentioned
that networking is hard,

00:07:18.420 --> 00:07:22.680
and this is BSD networking at
the lowest level is very tricky.

00:07:22.680 --> 00:07:29.410
And so what we did is we put a layer
on top of the raw BSD networking that

00:07:29.410 --> 00:07:34.000
we call CF network that abstracts
some of the difficulty away.

00:07:34.000 --> 00:07:37.780
And it's an abstraction to
support a number of protocols,

00:07:37.780 --> 00:07:40.660
sockets, DNS,
all the common protocols that

00:07:40.660 --> 00:07:42.820
you use in your application.

00:07:42.820 --> 00:07:47.720
It's also a layer that really meshes
well with your application because

00:07:47.950 --> 00:07:51.670
all the data types that you use in
your application are the same data

00:07:51.670 --> 00:07:54.000
types that are provided by CF network.

00:07:54.160 --> 00:07:57.130
So you have a bag of byte,
you have a string,

00:07:57.270 --> 00:08:02.490
and also it meshes with the event loop,
the run loop of your application.

00:08:02.490 --> 00:08:07.120
So the--all the events coming from
CF network are just events that all

00:08:07.120 --> 00:08:11.080
get merged together in this run loop
and that gets redistributed to--

00:08:11.460 --> 00:08:14.320
wherever you want in your application.

00:08:15.220 --> 00:08:19.340
We added some new functionality
for CF Network in Panfer.

00:08:19.390 --> 00:08:23.820
We have a new host concept and
that's where you can do DNS lookups

00:08:23.960 --> 00:08:29.490
all asynchronous and that's also
where the reachability plugs in.

00:08:29.740 --> 00:08:33.040
So CF network is definitely easier.

00:08:33.040 --> 00:08:34.720
It's also fast.

00:08:34.720 --> 00:08:36.700
Now, why do I say fast?

00:08:36.700 --> 00:08:37.940
Well, we use it.

00:08:37.940 --> 00:08:40.820
We use it in key
applications that are fast.

00:08:40.820 --> 00:08:44.070
If you look, for example, at Safari,
the speed derives from

00:08:44.070 --> 00:08:45.760
the rendering engine,
of course,

00:08:45.760 --> 00:08:48.040
but also from very fast networking.

00:08:48.040 --> 00:08:51.600
All the networking in
Safari is done with CF network.

00:08:51.600 --> 00:08:54.880
That's how we make sure that
what we do is really good.

00:08:54.880 --> 00:09:00.160
And all the other applications
presented here to use CF Network.

00:09:01.060 --> 00:09:06.820
Okay, so let's go back to that picture
and let's focus on another

00:09:06.980 --> 00:09:11.370
interesting rectangle down
there and that's the hard drive.

00:09:11.380 --> 00:09:14.660
That's the storage for your computer.

00:09:14.660 --> 00:09:18.510
Now with mobility,
you have new problems with your storage.

00:09:18.550 --> 00:09:22.600
The first problem that you have
is disconnecting because let's

00:09:22.760 --> 00:09:27.620
say you access the server,
an NFS server, an SMB server,

00:09:27.620 --> 00:09:28.860
an AFP server.

00:09:28.860 --> 00:09:31.890
Now you close the lid and
move to another location,

00:09:31.890 --> 00:09:34.320
you may not have access to the servers.

00:09:34.360 --> 00:09:38.100
So what we are doing in Pantfa
is putting some effort into file

00:09:38.190 --> 00:09:43.580
system mobility to facilitate
disconnection and reconnection.

00:09:43.880 --> 00:09:49.200
So the AFP is--the AFP client
is now reconnecting when

00:09:49.200 --> 00:09:52.320
you move to another locale.

00:09:52.320 --> 00:09:58.840
Now in an industry first,
our NFS also supports mobility.

00:09:58.840 --> 00:10:01.020
This is for all of you
who have been using NFS,

00:10:01.020 --> 00:10:02.820
this is really industry first.

00:10:02.900 --> 00:10:05.790
I mean you--usually when
you connect with NFS,

00:10:05.790 --> 00:10:07.270
you are stuck, okay.

00:10:07.270 --> 00:10:11.610
And you move to another location
where that server is not accessible,

00:10:11.780 --> 00:10:13.960
you have the spinning wheel forever.

00:10:15.700 --> 00:10:21.130
So another problem that you have with
mobility and storage is that you're going

00:10:21.260 --> 00:10:23.300
to evolve the storage on your computer.

00:10:23.300 --> 00:10:26.990
You're going to work on a number
of documents that you have locally.

00:10:27.060 --> 00:10:29.900
Now, at some point,
you want to bring those documents

00:10:30.060 --> 00:10:31.680
back to the rest of the world.

00:10:31.680 --> 00:10:33.870
And so you have this thinking problem.

00:10:34.000 --> 00:10:35.360
Now, this goes both ways.

00:10:35.390 --> 00:10:38.280
The rest of the world also evolves,
and you may have some caches of

00:10:38.360 --> 00:10:42.080
the rest of the world or some
documents from the rest of the world,

00:10:42.320 --> 00:10:44.810
and they are still,
when you reconnect after

00:10:44.810 --> 00:10:47.020
your airplane travel.

00:10:47.020 --> 00:10:50.210
So that's why we have,
over the last year,

00:10:50.450 --> 00:10:55.600
developed new syncing technologies
to help this mobility story,

00:10:55.650 --> 00:10:59.000
to help the whole mobility problem area.

00:10:59.000 --> 00:11:02.790
So we started at the end of last
year with addresses syncing,

00:11:03.190 --> 00:11:05.200
calendar information syncing.

00:11:05.260 --> 00:11:10.450
We added just a few weeks ago bookmarks
syncing for those of you who have

00:11:10.670 --> 00:11:13.680
.Mac and have several computers.

00:11:13.680 --> 00:11:14.800
Now, you can keep the bookmarks.

00:11:14.800 --> 00:11:16.850
So, you can keep the bookmarks
on each computer the same.

00:11:16.930 --> 00:11:19.440
It's really a lifesaver for me.

00:11:19.440 --> 00:11:23.150
Now, new in Pantfor,
and this was touched upon this morning,

00:11:23.210 --> 00:11:29.030
we're adding file syncing with the iDisk
syncing that enables you to keep the

00:11:29.030 --> 00:11:32.520
iDisk the same on all your computers.

00:11:32.870 --> 00:11:36.940
Okay, so let's go back to that
picture and there's those

00:11:36.940 --> 00:11:39.430
bizarre cylinders down there.

00:11:39.440 --> 00:11:40.620
What are they?

00:11:40.620 --> 00:11:44.880
Well, those are all the weights that you
carry when you carry your portable.

00:11:44.880 --> 00:11:47.560
That's where most of the mass is.

00:11:47.560 --> 00:11:49.130
We're in the land of physics here.

00:11:49.280 --> 00:11:50.800
That's your energy source.

00:11:50.800 --> 00:11:54.020
So there's an interesting equation.

00:11:54.020 --> 00:11:58.480
This is the biggest equation
I have in the presentation,

00:11:58.480 --> 00:11:59.250
by the way.

00:11:59.250 --> 00:12:03.450
I won't go any further than that,
which says that if you compute more,

00:12:03.450 --> 00:12:04.800
you consume more energy.

00:12:04.920 --> 00:12:07.820
Any registered transfer that
you do is going to eat a

00:12:07.920 --> 00:12:09.680
little bit of that battery.

00:12:09.680 --> 00:12:12.890
So the more you compute,
the more battery you eat,

00:12:13.010 --> 00:12:15.040
the more energy you consume.

00:12:15.040 --> 00:12:17.440
The same thing goes with the frequencies.

00:12:17.440 --> 00:12:19.720
Actually,
roughly the square of the frequency.

00:12:19.740 --> 00:12:23.340
So if you compute very fast,
you are going to consume a lot more of

00:12:23.340 --> 00:12:26.000
the battery than if you compute slowly.

00:12:26.000 --> 00:12:28.470
So what can we do about that?

00:12:28.480 --> 00:12:32.560
Well,
if you look at that frequency term first,

00:12:32.750 --> 00:12:36.960
the first thing that we can do
is slow down the OS when it's

00:12:37.130 --> 00:12:38.870
not needed to go very fast.

00:12:38.960 --> 00:12:40.150
And so we do that.

00:12:40.150 --> 00:12:40.800
Okay.

00:12:40.800 --> 00:12:45.630
We have this low power mode where we
just don't consume too much energy

00:12:45.720 --> 00:12:47.310
and we slow down the processor.

00:12:47.420 --> 00:12:48.640
We power step back.

00:12:48.640 --> 00:12:51.460
Now let's look at the other term.

00:12:51.530 --> 00:12:53.830
That's the computation.

00:12:54.030 --> 00:12:58.240
And of course, you want to get rid
of all unneeded power.

00:12:58.240 --> 00:13:02.000
So you can use the rich ability
API to avoid that computation.

00:13:02.000 --> 00:13:05.040
Now, there's sometimes some
computations that are needed.

00:13:05.040 --> 00:13:07.110
For example,
polling to have that server to know

00:13:07.110 --> 00:13:08.960
whether that server is online or not.

00:13:08.960 --> 00:13:10.090
That's not needed.

00:13:10.090 --> 00:13:13.230
You can use a rich ability
API to avoid that computation.

00:13:13.320 --> 00:13:19.430
So to summarize how to save that battery,
you should minimize the computation,

00:13:19.440 --> 00:13:22.550
be even driven, and above all,
no polling.

00:13:22.960 --> 00:13:31.170
Okay, so there's a number of recipes here
to be a great citizen for mobility.

00:13:31.170 --> 00:13:36.220
You should adopt all the system
services that we provide as the

00:13:36.220 --> 00:13:39.360
lowest layer for system networking.

00:13:39.360 --> 00:13:44.200
You should use APIs like the
reachability API if that applies.

00:13:44.200 --> 00:13:46.810
You can program at a higher
level using CF network.

00:13:46.810 --> 00:13:50.610
You can performance tune by
having things more synchronous,

00:13:50.610 --> 00:13:52.410
more even driven, more on demand.

00:13:52.410 --> 00:13:54.820
You can use threading because
we have a modern operating

00:13:54.900 --> 00:13:59.420
system that supports threading
in the networking intrinsically.

00:13:59.420 --> 00:14:00.820
And you can be more even driven.

00:14:00.820 --> 00:14:06.340
If you do all that,
you will reach the nirvana for mobility

00:14:06.340 --> 00:14:09.290
which for me is cafe computing.

00:14:11.130 --> 00:14:13.450
Okay, so that was mobility.

00:14:13.450 --> 00:14:18.030
Now, what are you going to do
with all this mobility?

00:14:36.000 --> 00:14:39.470
Reaching people is one of the
activities that we do the most

00:14:39.570 --> 00:14:42.060
on our computers nowadays,
which is fantastic.

00:14:42.100 --> 00:14:44.790
It's human-centric computing.

00:14:44.920 --> 00:14:49.400
So we added a key technology
to reaching people,

00:14:49.550 --> 00:14:51.500
and that's Rendezvous.

00:14:51.510 --> 00:14:55.200
Rendezvous enables you to
discover your neighbors.

00:14:55.730 --> 00:14:59.210
It's auto-discovery,
it's brassibility of the people

00:14:59.210 --> 00:15:01.800
nearby in the networking sense.

00:15:01.800 --> 00:15:06.880
Now, Rendezvous is totally compatible
with existing hardware and software.

00:15:06.880 --> 00:15:10.520
You don't need to change your
routers or anything like that.

00:15:10.580 --> 00:15:13.240
It's all based on standard networking.

00:15:13.240 --> 00:15:15.840
It's all based on TCP IP and DNS.

00:15:15.840 --> 00:15:20.210
It's fundamentally a new way to
use DNS and to build upon that.

00:15:21.460 --> 00:15:23.710
Rendezvous, of course,
is modern and supports

00:15:23.710 --> 00:15:26.350
human-readable names,
not 8-character limit

00:15:26.480 --> 00:15:27.810
or anything like that.

00:15:27.880 --> 00:15:31.280
And it's a key to ad-hoc networking.

00:15:31.320 --> 00:15:35.910
When you don't have a sysadmin that's
going to hook up everything just right

00:15:36.110 --> 00:15:40.340
and give all the IP addresses and put
everything in control and all that stuff.

00:15:40.400 --> 00:15:44.340
When you just have totally ad-hoc,
you just plug in like

00:15:44.340 --> 00:15:46.370
here in this conference.

00:15:46.400 --> 00:15:50.750
This is ad-hoc networking and Rendezvous
is fantastic in those situations.

00:15:52.150 --> 00:15:54.440
Now,
what's very pleasing is that we released

00:15:54.560 --> 00:15:57.260
Rendezvous last year with Jaguar.

00:15:57.260 --> 00:16:01.380
We had adopted it in a
number of applications.

00:16:01.380 --> 00:16:05.180
This year we are using
Rendezvous even more.

00:16:05.180 --> 00:16:10.300
We enhance some of those applications to
leverage even more Rendezvous and we're

00:16:10.300 --> 00:16:12.980
adding new applications into the mix.

00:16:12.980 --> 00:16:16.980
But beyond the adoption,
one thing that is really making

00:16:16.980 --> 00:16:21.480
me happy is the innovation that
has taken place with Rendezvous.

00:16:21.480 --> 00:16:24.160
And that innovation comes from you.

00:16:24.160 --> 00:16:27.540
It comes in different forms.

00:16:27.540 --> 00:16:31.260
For example, you have printers that
have adopted Rendezvous.

00:16:31.260 --> 00:16:34.700
You have games, multiplayer games that
are using Rendezvous.

00:16:34.700 --> 00:16:39.270
You have some devices and you
have some brand new way to do

00:16:39.400 --> 00:16:42.200
collaboration using Rendezvous.

00:16:42.200 --> 00:16:44.700
And that's very exciting to me.

00:16:45.450 --> 00:16:49.620
So Rendezvous is fantastic to find
out who your neighbors are or to

00:16:49.700 --> 00:16:50.820
communicate with your neighbors.

00:16:50.840 --> 00:16:55.100
But there are times where you want
to reach someone who's not nearby.

00:16:55.100 --> 00:16:58.410
And that's when the
address book comes handy.

00:16:58.420 --> 00:17:01.330
So the address book is an
application we've invested a lot

00:17:01.330 --> 00:17:03.060
of effort to make it just right.

00:17:03.120 --> 00:17:07.320
And the address book, of course,
manages all your addresses.

00:17:07.380 --> 00:17:11.070
Now, we have a number of applications
that use the same addresses.

00:17:11.140 --> 00:17:15.210
And as time goes,
we put more and more applications

00:17:15.210 --> 00:17:17.620
that go to the same storage.

00:17:17.620 --> 00:17:20.380
Fundamentally,
the address book is an application

00:17:20.380 --> 00:17:22.760
that uses a database that's underneath.

00:17:22.760 --> 00:17:24.420
And the key here is a database.

00:17:24.420 --> 00:17:27.480
The application is fantastic,
but it's on top of the database.

00:17:27.510 --> 00:17:33.220
That database has a number of APIs that
you can use for your application.

00:17:33.220 --> 00:17:38.030
We consider that the repository of
addresses is a system service that

00:17:38.030 --> 00:17:40.960
we provide for all your applications.

00:17:41.140 --> 00:17:46.260
We want this to become the hub for all
the communication-centric applications.

00:17:46.260 --> 00:17:49.700
And we are doing a lot
of refinements in Panfor.

00:17:49.700 --> 00:17:53.160
We are improving the API,
adding some functionality that

00:17:53.240 --> 00:17:54.780
has been requested here and there.

00:17:54.780 --> 00:17:59.270
One of the functionalities that we
add is what we call the action plugin.

00:17:59.280 --> 00:18:01.980
So let me set this example.

00:18:01.980 --> 00:18:04.260
Let's say I want to call this person.

00:18:04.260 --> 00:18:06.260
I have his address card there.

00:18:06.320 --> 00:18:10.120
And now I need to reach the
phone to call that person.

00:18:10.120 --> 00:18:11.120
The problem is that
I don't have the phone.

00:18:11.120 --> 00:18:12.160
I know that my screen is over there.

00:18:12.160 --> 00:18:13.380
My phone is over there.

00:18:13.510 --> 00:18:16.740
So I can just click at the right place.

00:18:16.800 --> 00:18:18.840
And now I can enlarge the phone.

00:18:18.840 --> 00:18:20.390
And now I can type the phone.

00:18:20.520 --> 00:18:23.630
So this is a functionality that
we've added to the address book.

00:18:23.700 --> 00:18:27.610
And that functionality is
using the action plugin.

00:18:27.720 --> 00:18:32.730
And it's available for all of you to
specify for your data type how you

00:18:32.730 --> 00:18:38.000
want to have-- what action you want
to have happen for that data type.

00:18:38.430 --> 00:18:42.360
Another functionality we've added
is what we call the People Picker,

00:18:42.440 --> 00:18:47.860
which enables you to filter the
database of all addresses and

00:18:47.980 --> 00:18:52.230
select and let the user select
which address they want to have.

00:18:52.230 --> 00:18:56.660
And then that selection is
available through your API.

00:18:56.910 --> 00:19:01.930
Okay, so your application can definitely,
in many cases,

00:19:01.990 --> 00:19:07.580
use those two fundamental technologies,
Rendezvous and Address Book.

00:19:07.890 --> 00:19:11.230
And that's reaching people,
one of the activities we do

00:19:11.240 --> 00:19:13.240
the most on our computers.

00:19:13.350 --> 00:19:15.670
Now let's change the beat.

00:19:30.240 --> 00:19:33.030
So this is my techno session.

00:19:33.030 --> 00:19:36.300
That's really Unix that
I want to talk about.

00:19:36.300 --> 00:19:40.520
So we have now
Mac OS X totally based on Unix.

00:19:40.520 --> 00:19:47.000
This was a bold move and we wanted to
let the world know about that so we ran

00:19:47.000 --> 00:19:52.180
this ad a year ago telling everyone,
"Hey, we are Unix-based."

00:19:52.180 --> 00:19:54.140
Why would we choose Unix?

00:19:54.140 --> 00:19:56.600
For a number of obvious reasons.

00:19:56.600 --> 00:19:58.720
Unix is very, very solid.

00:19:58.770 --> 00:20:00.460
Unix is powering the internet.

00:20:00.460 --> 00:20:03.260
Most of the servers out there,
the internet servers,

00:20:03.430 --> 00:20:05.320
are running Unix computers.

00:20:05.320 --> 00:20:08.420
So that's kind of a
testimony of how solid it is.

00:20:08.420 --> 00:20:10.260
It's very mainstream.

00:20:10.380 --> 00:20:15.230
There's no doubt that you hear
talk about Unix every day nowadays.

00:20:15.230 --> 00:20:17.340
It's quite interesting.

00:20:17.510 --> 00:20:22.000
It was, for us, the fastest way to get
to a number of features.

00:20:22.000 --> 00:20:25.920
No other place we could have
gotten a networking stack that

00:20:25.920 --> 00:20:30.170
has thousands of engineering years
put into it in terms of tuning,

00:20:30.280 --> 00:20:33.960
in terms of being standard compliant,
all those things.

00:20:33.960 --> 00:20:38.360
In fact,
networking is defined on Unix in general.

00:20:38.360 --> 00:20:40.860
And this was also a way for
us to attack new markets,

00:20:40.870 --> 00:20:44.490
markets where Apple traditionally
had not been particularly strong

00:20:44.900 --> 00:20:48.150
and now that we can go towards.

00:20:48.170 --> 00:20:53.070
So with the great mobility that we have,
we have now a dream

00:20:53.070 --> 00:20:54.960
machine for Unix folks.

00:20:54.960 --> 00:20:59.760
It's a portable that you can
take on your conference calls.

00:20:59.760 --> 00:21:03.380
You can do presentation because
you get all the standard software,

00:21:03.380 --> 00:21:05.280
all the productivity software.

00:21:05.460 --> 00:21:08.320
You get PowerPoint but also now Keynote,
of course.

00:21:08.330 --> 00:21:11.620
And you also have Word, you know,
all those things that

00:21:11.650 --> 00:21:12.860
all of us use daily.

00:21:12.970 --> 00:21:15.390
And so some people are really liking it.

00:21:15.480 --> 00:21:18.000
And if you look carefully
at that picture,

00:21:18.000 --> 00:21:23.180
that's James Gosling of JavaFame who,
of course, is using a PowerBook.

00:21:24.130 --> 00:21:27.220
So our Unix is very, very standard.

00:21:27.280 --> 00:21:29.160
We are a very good Unix citizen.

00:21:29.160 --> 00:21:33.090
In fact, if you work to a bookstore
and you look at some titles,

00:21:33.090 --> 00:21:37.540
you will see titles like this
that all apply to our platform.

00:21:37.540 --> 00:21:40.060
So is it perfect?

00:21:40.170 --> 00:21:42.790
Well, we always get a lot of feedback.

00:21:42.870 --> 00:21:44.380
There's always kind of requests.

00:21:44.380 --> 00:21:50.350
And even though everyone is telling us,
yes, it's really a good citizen, I mean,

00:21:50.350 --> 00:21:53.190
I was very surprised to find
everything I would expect.

00:21:53.200 --> 00:21:55.590
So it's always the top of the list.

00:21:55.600 --> 00:21:58.760
And the top of the list for us was X11.

00:21:58.760 --> 00:22:05.870
So X11 is a toolbox,
a windowing toolkit that is very

00:22:05.970 --> 00:22:08.710
ubiquitous in the Unix world.

00:22:08.720 --> 00:22:11.640
I think X11 has been
ported on all the machines,

00:22:11.640 --> 00:22:13.710
all the Unix machines in the world.

00:22:13.710 --> 00:22:17.590
And if you go to the scientific areas,
you find applications that

00:22:17.680 --> 00:22:19.940
are programmed to X11,
something for higher end.

00:22:19.940 --> 00:22:25.980
So we've integrated
X11 right into Panfur.

00:22:25.980 --> 00:22:28.890
And by integration,
I mean that rather than having one

00:22:28.890 --> 00:22:34.210
big window that has all your X11
applications kind of inside that window,

00:22:34.350 --> 00:22:39.580
now you can have X11 applications
that have windows that mix with other

00:22:39.580 --> 00:22:43.840
windows from all the Cocoa apps,
all the Carbon apps.

00:22:44.100 --> 00:22:47.140
So fully integrated with Quartz.

00:22:47.620 --> 00:22:51.780
Another thing that was heavily
invested is to have really,

00:22:51.920 --> 00:22:53.540
really fast X11.

00:22:53.540 --> 00:22:58.130
And especially for doing
OpenGL functionality because a lot

00:22:58.130 --> 00:23:01.110
of the scientific apps do use OpenGL.

00:23:01.120 --> 00:23:06.180
And so those applications didn't want
some insulation layer with OpenGL.

00:23:06.180 --> 00:23:08.330
They wanted to go down to the metal.

00:23:08.630 --> 00:23:10.110
And this is what we have done.

00:23:10.230 --> 00:23:13.750
When your application uses--your
X11 application uses OpenGL,

00:23:13.930 --> 00:23:15.370
it's a native OpenGL.

00:23:17.750 --> 00:23:18.840
Now let's talk about standards.

00:23:19.020 --> 00:23:22.860
So another request that we have
constantly is to add things,

00:23:23.000 --> 00:23:24.680
to add little things here and there.

00:23:24.680 --> 00:23:30.520
And one of the top requests after
X11 was to add a great XML parser.

00:23:30.520 --> 00:23:33.960
So we've looked around and we
asked a lot of people what's the

00:23:33.960 --> 00:23:36.380
best XML parser that we could add.

00:23:36.380 --> 00:23:41.500
And pretty much the consensus
that has formed is libxml2.

00:23:41.500 --> 00:23:45.090
So this is what we're adding in Pound4.

00:23:45.490 --> 00:23:50.060
Another place where we had
some requests was for locales,

00:23:50.110 --> 00:23:55.800
and we added ICU,
the international components for Unicode.

00:23:55.870 --> 00:24:00.390
We're adding WTRT,
which also was heavily requested

00:24:00.500 --> 00:24:05.700
to help you port applications
to Mac OS X and a few others.

00:24:05.700 --> 00:24:08.290
And of course,
there's a constant refresh.

00:24:08.350 --> 00:24:12.600
We are committed to constantly
refresh all the Unix components

00:24:12.600 --> 00:24:14.900
that need to be refreshed.

00:24:15.370 --> 00:24:19.460
One of those things on the list,
on the refresh list, is UFS,

00:24:19.490 --> 00:24:21.130
and that brings me into file systems.

00:24:21.140 --> 00:24:26.200
We added journaling to the file
system last year for the server.

00:24:26.200 --> 00:24:28.660
Now in Panther, it is a standard.

00:24:28.660 --> 00:24:33.360
All Panther systems, by default,
will have a journaling file system.

00:24:33.580 --> 00:24:37.530
This is taking the high-end technology
and making it available for everyone.

00:24:37.540 --> 00:24:39.160
We added NFS locking.

00:24:39.210 --> 00:24:43.300
Quite frankly,
it was a shame that we didn't do locking.

00:24:43.300 --> 00:24:44.180
We fixed that.

00:24:45.320 --> 00:24:49.520
We added mobility for the file systems,
as I already mentioned,

00:24:49.590 --> 00:24:53.780
and we've had a lot of
emphasis on performance.

00:24:53.780 --> 00:24:57.780
Performance of the remote
file systems like SMB,

00:24:57.780 --> 00:25:01.780
NFS, and WebDAV,
but also performance of UFS.

00:25:01.780 --> 00:25:06.480
Now for those of you who use UFS,
you are pretty much at parity

00:25:06.480 --> 00:25:10.780
with HFS+, which is quite a feat.

00:25:11.210 --> 00:25:18.100
Okay, so I'd like to digress a little bit
and talk to you about architecture.

00:25:18.100 --> 00:25:22.920
I've been architecting systems or
being involved with architecting

00:25:22.920 --> 00:25:25.100
systems for over two decades now.

00:25:25.100 --> 00:25:30.550
And I've realized over the last
few years that I'm kind of part

00:25:30.550 --> 00:25:33.100
of the old school of design.

00:25:33.100 --> 00:25:37.390
So what do I mean by old school?

00:25:38.800 --> 00:25:41.300
Oops.

00:25:41.310 --> 00:25:42.090
OK.

00:25:42.250 --> 00:25:47.820
So I started to realize a few
years ago that that's kind

00:25:47.820 --> 00:25:50.120
of the old way to do design.

00:25:50.120 --> 00:25:53.480
Let's say you have like
a subsystem to architect.

00:25:53.480 --> 00:25:57.580
The first thing in the old school
that you do is really try to get

00:25:57.640 --> 00:25:59.850
to the essence of the problem.

00:26:00.170 --> 00:26:03.570
And you create this wonderful
engine that's going to

00:26:03.570 --> 00:26:07.070
just address the problems,
you know, the core problems.

00:26:07.080 --> 00:26:11.570
So you design this engine and the API,
of course, that you have on top of the

00:26:11.580 --> 00:26:13.240
engine for all the applications.

00:26:13.240 --> 00:26:15.670
And you spend a lot of design work there.

00:26:15.820 --> 00:26:20.010
Now, there's some books that says, hey,
you should do top-down design,

00:26:20.010 --> 00:26:20.860
all that stuff.

00:26:20.860 --> 00:26:23.530
But we all know that it's
both top-down and bottoms-up.

00:26:23.690 --> 00:26:25.670
You actually write some
code along the way.

00:26:25.720 --> 00:26:29.040
And then you verify your assumptions
are correct and all that stuff.

00:26:29.070 --> 00:26:31.380
But essentially,
this is the design phase.

00:26:32.120 --> 00:26:35.450
After that, you write a lot of code.

00:26:35.460 --> 00:26:38.910
And that can take months because
it's brand new piece of code.

00:26:38.920 --> 00:26:41.590
And so we all know that
every 10 lines or so,

00:26:41.590 --> 00:26:42.920
you make a mistake.

00:26:42.920 --> 00:26:45.740
And you have to debug, find that mistake.

00:26:45.740 --> 00:26:49.080
And even with something like Xcode,
it can take a bit of time.

00:26:49.120 --> 00:26:53.000
So then you have this
system that's perfect.

00:26:53.000 --> 00:26:53.860
OK.

00:26:53.860 --> 00:26:57.020
You have it just perfectly
integrated to your system.

00:26:57.020 --> 00:26:58.360
You are very happy with it.

00:26:58.360 --> 00:26:59.910
And you say, well,
now I need to connect to

00:26:59.950 --> 00:27:01.530
the rest of the world.

00:27:01.550 --> 00:27:05.990
That's really ugly because the rest of
the world has all those legacy systems.

00:27:06.060 --> 00:27:08.780
There's those standards
you need to connect to.

00:27:08.780 --> 00:27:11.820
And that's where you need
to write adapter code.

00:27:11.820 --> 00:27:13.660
This is tasteless.

00:27:13.660 --> 00:27:15.920
And you write all those adapter codes.

00:27:15.920 --> 00:27:17.860
And finally,
you have the systems that works

00:27:17.900 --> 00:27:22.040
well for your system and that
integrates with the rest of the world.

00:27:22.290 --> 00:27:25.360
Now,
I think there's a new way to do that.

00:27:25.600 --> 00:27:27.800
And the new way is open source.

00:27:27.800 --> 00:27:30.740
So how does that go with the new way?

00:27:30.960 --> 00:27:33.610
The first thing you
do is you go shopping.

00:27:33.820 --> 00:27:35.230
This is very bizarre.

00:27:35.300 --> 00:27:36.640
You just go shopping.

00:27:36.640 --> 00:27:39.270
The problems that you are trying to
solve probably has been solved by

00:27:39.280 --> 00:27:41.480
quite a lot of folks in the past.

00:27:41.480 --> 00:27:45.800
So you try to identify those bodies
of code that solve the same problems

00:27:45.800 --> 00:27:47.540
that you are trying to solve.

00:27:47.540 --> 00:27:49.480
And you evaluate those bodies of code.

00:27:49.480 --> 00:27:53.500
You evaluate them looking at the
speed of those bodies of code.

00:27:53.500 --> 00:27:54.850
You look at the standardness.

00:27:54.940 --> 00:27:56.420
Are they standard compliant?

00:27:56.420 --> 00:27:59.680
And this is the most
bizarre of all things.

00:27:59.680 --> 00:28:00.230
You look at the reputation.

00:28:00.310 --> 00:28:02.600
They're not the same reputation
that they have on the net.

00:28:02.670 --> 00:28:05.500
This is really like shopping.

00:28:05.500 --> 00:28:09.800
So the next thing that you do is
you write adapters to your system.

00:28:09.800 --> 00:28:12.780
So this is kind of the reverse
of the previous picture.

00:28:12.780 --> 00:28:15.750
The piece of code that you
have is totally standard.

00:28:15.750 --> 00:28:18.420
It totally fits with
the rest of the world.

00:28:18.420 --> 00:28:21.580
Now you are trying to
adapt it to your system.

00:28:21.580 --> 00:28:23.660
So maybe your system has a different UI.

00:28:23.670 --> 00:28:26.160
Maybe your system has
an Aqua user interface.

00:28:26.440 --> 00:28:29.800
That's where you will write some
code to adapt it to your system.

00:28:29.800 --> 00:28:32.220
Now this is not necessarily
a bad thing because you are

00:28:32.290 --> 00:28:34.180
actually going to add value.

00:28:34.180 --> 00:28:37.740
There are some examples that can
come to mind there where you add

00:28:37.740 --> 00:28:41.910
value by making this fantastic user
interface on top of this engine

00:28:41.910 --> 00:28:44.060
that was an open source engine.

00:28:44.060 --> 00:28:47.000
And the last step,
which is very important,

00:28:47.000 --> 00:28:50.380
is to advocate your
changes with the community.

00:28:50.380 --> 00:28:54.070
You don't want to be on a diverging
branch of evolution because guess what?

00:28:54.170 --> 00:28:56.760
The rest of the world will win, not you.

00:28:56.760 --> 00:28:59.220
And so you want to make
sure you are all converged.

00:28:59.220 --> 00:29:04.540
And the best way to advocate
your changes is to make sure that

00:29:04.670 --> 00:29:07.940
you have value in your changes.

00:29:07.940 --> 00:29:12.160
You don't want to do like crazy renaming
of variables and changing everything.

00:29:12.250 --> 00:29:12.950
No, no, no.

00:29:13.060 --> 00:29:13.940
That won't work.

00:29:13.940 --> 00:29:16.700
You want to do the minimal
amount of code that adds value.

00:29:18.320 --> 00:29:20.620
So what are the advantages
of this approach?

00:29:20.920 --> 00:29:22.380
Obviously, this is time to market.

00:29:22.470 --> 00:29:25.810
You no longer have the downtime
of going away for a few months

00:29:25.920 --> 00:29:27.750
and writing all this new code.

00:29:27.760 --> 00:29:33.050
Also, it's a lot more reliable,
which sometimes may be misunderstood,

00:29:33.050 --> 00:29:36.200
but the open source code
is actually very reliable,

00:29:36.200 --> 00:29:38.560
and this has been proven
in our experience.

00:29:38.560 --> 00:29:41.340
We've done that with lots
and lots of bodies of code,

00:29:41.390 --> 00:29:44.490
and typically,
the open source code has way less

00:29:44.490 --> 00:29:48.160
bugs than the new code that we write,
because the new code

00:29:48.190 --> 00:29:49.700
that we write is new.

00:29:49.900 --> 00:29:51.900
There's no secret here.

00:29:51.900 --> 00:29:56.220
It is also very secure,
very important in this modern age.

00:29:56.220 --> 00:29:59.320
If the code is not open source, hey,
it's closed.

00:29:59.440 --> 00:30:00.580
It's not secure.

00:30:00.580 --> 00:30:02.630
That's pretty much always true.

00:30:04.390 --> 00:30:08.420
And there's a social aspect of
this which I personally like,

00:30:08.430 --> 00:30:10.450
which is this two-way
exchange with the community.

00:30:10.570 --> 00:30:13.450
You get some, you give some back.

00:30:13.760 --> 00:30:18.200
So we are using this strategy, of course,
in Mac OS X.

00:30:18.200 --> 00:30:21.380
We've used that in Jaguar
for a number of components.

00:30:21.380 --> 00:30:23.200
And we are doing that for
more and more components.

00:30:23.200 --> 00:30:24.920
I just listed a few here.

00:30:24.920 --> 00:30:27.200
One of the most noticeable
in this list is,

00:30:27.200 --> 00:30:31.350
of course, KHTML,
which is the rendering engine of Safari.

00:30:31.440 --> 00:30:33.620
But there's many more.

00:30:33.620 --> 00:30:36.740
In fact, you go to any group at Apple,
and pretty much every

00:30:36.740 --> 00:30:40.570
group is incorporating open
source one from another.

00:30:41.510 --> 00:30:46.090
Okay, so in summary with your
application and Unix,

00:30:46.160 --> 00:30:49.120
first,
if your application has been running

00:30:49.120 --> 00:30:52.060
on Unix forever but not on Mac OS X,
bring it.

00:30:52.170 --> 00:30:53.110
Join the party.

00:30:53.110 --> 00:30:55.640
This is the place where things happen.

00:30:55.640 --> 00:31:00.470
And it's easy to port your application
to Mac OS X because Mac OS X is very,

00:31:00.470 --> 00:31:01.520
very standard.

00:31:01.520 --> 00:31:05.180
We've got all the facilities
that you want to help you port.

00:31:05.180 --> 00:31:07.930
Now conversely,
if your application has been

00:31:07.930 --> 00:31:10.890
running on the Mac forever,
now you have some new

00:31:10.890 --> 00:31:12.600
markets where you can expand.

00:31:12.600 --> 00:31:14.650
You can go to the scientific market.

00:31:14.650 --> 00:31:19.480
You can go to the higher ed,
to the enterprise market.

00:31:19.480 --> 00:31:21.390
And the two sides can come in.

00:31:21.560 --> 00:31:24.450
There's some technologies that are
long time Mac OS technologies or

00:31:24.460 --> 00:31:27.710
technologies in your application
and there's some technologies

00:31:27.710 --> 00:31:29.400
that come from the Unix world.

00:31:29.500 --> 00:31:32.760
There's new synergies to explore there.

00:31:32.760 --> 00:31:35.530
And think about
incorporating open source.

00:31:35.580 --> 00:31:38.710
This can save us quite a lot
of time and you end up with

00:31:38.710 --> 00:31:40.000
a better product in the end.

00:31:40.000 --> 00:31:43.660
So this was my techno section.

00:31:53.210 --> 00:31:56.480
At this point I'd like to thank
you to have come from all over

00:31:56.480 --> 00:31:58.700
the world to San Francisco.

00:31:58.770 --> 00:32:03.820
And one reason why you may have come
here is that you went on the web and

00:32:03.820 --> 00:32:09.310
saw this enticing video saying "Come
here to San Francisco!" And that video

00:32:09.310 --> 00:32:12.650
of course features Scott Forstal,
my friend and colleague,

00:32:12.690 --> 00:32:15.880
that is going to take over at this point.

00:32:23.790 --> 00:32:30.700
So now you know that
I only have one nice shirt.

00:32:30.700 --> 00:32:37.560
This is not an intro for me,
this is an intro for Aqua.

00:32:37.660 --> 00:32:41.160
So we believe Aqua is incredibly sexy
and we've worked this year to make it

00:32:41.240 --> 00:32:46.910
even sexier and we've worked to improve
the usability of Mac OS X as a whole.

00:32:46.910 --> 00:32:48.600
So let's get into it.

00:32:48.620 --> 00:32:51.000
We started with the open and save panel.

00:32:51.040 --> 00:32:52.580
Here's the open panel.

00:32:52.600 --> 00:32:57.550
here's the open down here
there's the open now in jaguar

00:32:58.850 --> 00:33:01.560
A few people didn't think it
was the greatest open panel

00:33:01.560 --> 00:33:05.320
they'd ever seen in the back row.

00:33:06.080 --> 00:33:07.340
And we agree.

00:33:07.460 --> 00:33:10.060
The problem with this open
panel is it wasn't user-centric.

00:33:10.330 --> 00:33:11.590
It wasn't human-centric.

00:33:11.770 --> 00:33:13.160
It was all about the computer.

00:33:13.160 --> 00:33:14.780
It was computer-centric.

00:33:14.820 --> 00:33:16.500
I mean,
just to get to your home directory,

00:33:16.500 --> 00:33:18.070
you're four levels down, right?

00:33:18.160 --> 00:33:20.660
You're always scrolling back
and forth trying to find things.

00:33:20.930 --> 00:33:24.400
So one thing we did this year is
we have this brand new finder,

00:33:24.610 --> 00:33:24.830
right?

00:33:25.080 --> 00:33:26.880
A user-centric finder.

00:33:26.920 --> 00:33:31.550
And inspired by this,
we have a brand new open panel as well.

00:33:31.660 --> 00:33:34.590
So the open panel has the same
left column you see in the finder.

00:33:34.590 --> 00:33:38.320
You can get to your documents folder,
your pictures, anything in your home

00:33:38.320 --> 00:33:40.050
directory extremely easily.

00:33:40.140 --> 00:33:41.660
It's right there for you.

00:33:41.660 --> 00:33:44.780
You can also get to your devices.

00:33:44.780 --> 00:33:46.300
And really importantly,
and I've been using this

00:33:46.300 --> 00:33:49.210
for a while and I love it,
you can get to your removable media,

00:33:49.210 --> 00:33:49.740
right?

00:33:49.740 --> 00:33:52.320
So you throw a disk in
or you mount a drive.

00:33:52.320 --> 00:33:55.850
It's right there in your
open panel in your face.

00:33:56.150 --> 00:33:58.500
Another request we have,
which we have for Panther now,

00:33:58.530 --> 00:34:01.350
is we've added ListView.

00:34:01.430 --> 00:34:03.100
So--

00:34:05.700 --> 00:34:07.350
This view is built in.

00:34:07.350 --> 00:34:09.240
We also have a path pop-up up there.

00:34:09.240 --> 00:34:10.760
We have back and forward buttons.

00:34:10.760 --> 00:34:12.820
So we think you're going to love it.

00:34:12.820 --> 00:34:15.960
Now we haven't forgotten about how
you like to customize the open panel,

00:34:15.960 --> 00:34:16.420
right?

00:34:16.420 --> 00:34:18.160
You like to add your own widgets.

00:34:18.160 --> 00:34:21.830
So we have that as well in an
accessory view at the bottom.

00:34:22.040 --> 00:34:24.940
So we've done this in a
binary compatible way.

00:34:24.940 --> 00:34:26.610
There's no new APIs you
should have to worry about.

00:34:26.610 --> 00:34:30.210
Your application should just get
this much improved open panel

00:34:30.300 --> 00:34:32.000
when you run it on Panther.

00:34:32.230 --> 00:34:34.580
Please install the seed
you got this morning.

00:34:34.670 --> 00:34:35.190
Test it out.

00:34:35.190 --> 00:34:38.330
Let us know if there's any issues
because we tried you lots of tricks

00:34:38.330 --> 00:34:42.040
for those of you who are doing crazy
things in your open panels to get

00:34:42.040 --> 00:34:43.890
your controls in the right place.

00:34:43.890 --> 00:34:46.140
We think we've done it, but let us know.

00:34:46.140 --> 00:34:50.700
And of course,
we didn't forget about the save panel.

00:34:50.860 --> 00:34:54.460
So again, we've made it user-centric.

00:34:56.410 --> 00:35:00.180
We've been asked a lot
about that switcher thing.

00:35:00.180 --> 00:35:03.210
People say, hey,
what about that switcher thing?

00:35:05.190 --> 00:35:07.740
Not that switcher thing.

00:35:07.760 --> 00:35:11.420
Although we get asked a lot
about that switcher thing also.

00:35:11.420 --> 00:35:12.840
That switcher thing right there.

00:35:12.970 --> 00:35:15.380
So we have this view
switcher in the finder.

00:35:15.380 --> 00:35:18.380
And we've decided, you know,
it really works well as a control

00:35:18.440 --> 00:35:19.770
in a number of different places.

00:35:19.770 --> 00:35:20.880
So we have it in the finder.

00:35:21.090 --> 00:35:24.240
You notice we have it in iPhoto as well.

00:35:24.240 --> 00:35:27.340
We added it to the address book.

00:35:27.340 --> 00:35:28.950
So we had a lot of requests
from people saying,

00:35:28.950 --> 00:35:30.380
hey, you know, you're using that.

00:35:30.380 --> 00:35:33.420
And we actually had implemented
that ourselves in each of our apps.

00:35:33.420 --> 00:35:36.900
But it clearly was a nice
standard control that you wanted.

00:35:36.900 --> 00:35:40.900
And so for Panther,
it's built into both Carbon and Cocoa.

00:35:40.900 --> 00:35:40.900
You've got it.

00:35:53.700 --> 00:35:59.520
We worked really hard this year to polish
Aqua and make it even that much better.

00:36:06.310 --> 00:36:12.600
Here is Aqua in Jaguar which we thought
was great but we knew we could do

00:36:12.600 --> 00:36:16.520
better and every release we try to
refine it and make it even better.

00:36:16.580 --> 00:36:21.230
The first thing we looked at
were those white corduroy lines.

00:36:23.040 --> 00:36:25.280
We felt they were a little too strong.

00:36:25.310 --> 00:36:28.760
In some places,
you'd look at a window and

00:36:28.760 --> 00:36:31.380
if there was text over it,
it felt more like an interference

00:36:31.380 --> 00:36:34.520
pattern than it did like a nice texture.

00:36:34.610 --> 00:36:39.330
So we went through tons and tons
of different background patterns

00:36:39.470 --> 00:36:41.180
trying to look for something better.

00:36:41.320 --> 00:36:44.520
I mean, sort of like Thomas Edison going
through filaments for a light bulb.

00:36:44.520 --> 00:36:45.440
We threw each one out.

00:36:45.520 --> 00:36:47.640
We threw out different materials.

00:36:47.640 --> 00:36:50.960
We had a mock-up with gold.

00:36:51.670 --> 00:36:54.800
And at the end we settled
for something which is very,

00:36:54.800 --> 00:36:56.030
very subtle.

00:36:56.030 --> 00:36:59.010
You can see it better on your
machine when you install it,

00:36:59.180 --> 00:37:00.240
but here it is.

00:37:00.250 --> 00:37:01.850
So here's Jaguar Panther.

00:37:02.110 --> 00:37:03.640
Jaguar Panther.

00:37:03.640 --> 00:37:05.640
What we've done is we've toned it back.

00:37:05.740 --> 00:37:07.180
It's very, very subtle.

00:37:07.180 --> 00:37:09.560
Your eye sort of notices
that there's something,

00:37:09.560 --> 00:37:11.260
there's a texture there,
there's something elegant,

00:37:11.340 --> 00:37:15.920
but it doesn't get in the way of
readability of text or other elements.

00:37:15.920 --> 00:37:18.320
The next thing we
looked at were the tabs.

00:37:18.320 --> 00:37:22.980
So, you know, these tabs work fine,
but the top felt a little bit clunky.

00:37:23.050 --> 00:37:26.300
And we love the switcher thing
we've added to the tool kits.

00:37:26.300 --> 00:37:28.430
So we looked at that and said,
we can start with that

00:37:28.610 --> 00:37:30.560
and then we can do better.

00:37:30.560 --> 00:37:32.600
We can make a tab out of that.

00:37:32.600 --> 00:37:35.040
You notice the tab here also,
it's a sheet that sits sort of

00:37:35.070 --> 00:37:36.720
awkwardly on top of the window.

00:37:36.940 --> 00:37:38.050
We decided to etch it in.

00:37:38.340 --> 00:37:41.560
So there's the tabs on Jaguar,
there's on Panther.

00:37:41.560 --> 00:37:44.070
So Jaguar Panther.

00:37:47.140 --> 00:37:50.190
I think it's great and the most
important thing for all of you is

00:37:50.500 --> 00:37:55.420
the mantra this year was "Save the
same metrics." So this is the exact

00:37:55.420 --> 00:37:58.200
same metrics as the tab in Jaguar.

00:37:58.200 --> 00:38:00.400
The content region is the same,
the control is the same.

00:38:00.450 --> 00:38:02.820
You don't need to do anything,
you get it for free.

00:38:02.820 --> 00:38:06.610
The next thing we looked
at was the toolbar.

00:38:07.480 --> 00:38:10.810
So there's some apps that use
the toolbar in a way where

00:38:10.910 --> 00:38:12.200
it's more of a view switcher.

00:38:12.200 --> 00:38:14.000
When you click on it,
like in System Preferences,

00:38:14.000 --> 00:38:16.480
it takes you to a given pane.

00:38:16.650 --> 00:38:19.480
But there's no persistent
state in the toolbar in Jaguar

00:38:19.560 --> 00:38:21.800
to show you where you are.

00:38:21.840 --> 00:38:23.640
Now there is.

00:38:23.760 --> 00:38:25.580
So here's Jaguar, here's Panther.

00:38:25.680 --> 00:38:27.770
Persistent state lets
you know where you are.

00:38:27.790 --> 00:38:31.760
There's an API you can adopt for that
if you use the toolbar in that way.

00:38:32.610 --> 00:38:35.500
Next we looked at the title bars.

00:38:35.580 --> 00:38:38.790
The inactive title bar goes translucent.

00:38:38.890 --> 00:38:42.410
Nice use of quarts, bad use of UI.

00:38:43.020 --> 00:38:48.960
To find what windows are inactive,
you have to sort of look around and say,

00:38:48.960 --> 00:38:50.370
well, what windows are translucent?

00:38:50.380 --> 00:38:51.530
And how do you know that?

00:38:51.530 --> 00:38:54.160
Well, it gets a different color depending
on what the background is behind it.

00:38:54.220 --> 00:38:56.820
You look at the untitled there,
and it's a little difficult to read.

00:38:56.820 --> 00:38:58.610
You get interference,
especially if it's over

00:38:58.610 --> 00:38:59.610
another text document.

00:38:59.620 --> 00:39:02.290
So we said, okay,
we're going to take and make the

00:39:02.540 --> 00:39:04.910
inactive title bar windows opaque now.

00:39:05.000 --> 00:39:08.100
Once you do that,
it becomes more difficult to tell

00:39:08.100 --> 00:39:09.970
what the active title bar is.

00:39:10.700 --> 00:39:13.570
So we took the active title bar,
and we add a nice,

00:39:13.980 --> 00:39:15.500
simple gradient on top of it.

00:39:15.560 --> 00:39:16.500
And here it is.

00:39:16.580 --> 00:39:19.380
There's Jaguar, Panther.

00:39:19.380 --> 00:39:21.240
Jaguar, Panther.

00:39:21.240 --> 00:39:22.110
We think you're going to love it.

00:39:24.960 --> 00:39:28.620
The next thing we do is panels.

00:39:28.750 --> 00:39:34.210
So in Jaguar, there's no way for you to
tell if a panel is key.

00:39:34.530 --> 00:39:36.500
Meaning if you hit delete here,
is it going to delete a font

00:39:36.500 --> 00:39:39.490
collection or is it going to delete
characters in your text document?

00:39:39.840 --> 00:39:40.020
Right?

00:39:40.020 --> 00:39:42.240
There was absolutely no distinction.

00:39:42.300 --> 00:39:48.470
What we've done in Panther is there's
now a key state for your panels.

00:39:48.560 --> 00:39:49.860
So here's Jaguar, here's Panther.

00:39:49.860 --> 00:39:50.860
You can actually tell.

00:39:50.910 --> 00:39:53.620
And it turns out there's
three distinct states now.

00:39:53.990 --> 00:39:56.310
There's the key state,
and this in the panel is now key.

00:39:56.310 --> 00:39:58.630
There's the document it's acting on,
which actually has a

00:39:58.700 --> 00:40:00.800
little bit of a gradient,
but it's a very light gradient,

00:40:00.810 --> 00:40:01.940
and that's the main window.

00:40:02.160 --> 00:40:04.400
And then there's the inactive
window in the background.

00:40:04.400 --> 00:40:06.940
Now, you shouldn't have to worry
about this as a developer.

00:40:06.940 --> 00:40:10.360
The toolkit should handle
this for you automatically.

00:40:10.390 --> 00:40:13.400
Unless you're doing wacky stuff
with the toolkits and windows,

00:40:13.400 --> 00:40:16.470
so you should pay attention to make
sure you're not breaking our job of

00:40:16.470 --> 00:40:18.070
doing this automatically for you.

00:40:19.320 --> 00:40:21.200
So that's the third state.

00:40:21.200 --> 00:40:25.110
So here is Aqua in Jaguar,
Aqua in Panther.

00:40:25.110 --> 00:40:29.720
Jaguar, Panther.

00:40:31.550 --> 00:40:37.180
So we heard this year that
size definitely does matter.

00:40:37.200 --> 00:40:39.690
And we've reacted to that.

00:40:39.890 --> 00:40:42.980
You see, we've had our standard controls.

00:40:43.040 --> 00:40:46.340
And the standard controls-- buttons,
sliders, and everything-- work

00:40:46.450 --> 00:40:48.020
great almost everywhere.

00:40:48.020 --> 00:40:51.220
I mean, in most usage,
you want to use the standard controls.

00:40:51.290 --> 00:40:53.920
But some places,
you want to use small controls

00:40:54.430 --> 00:40:56.060
because you're creating a palette.

00:40:56.180 --> 00:40:59.020
So you want to squeeze a
little more into that palette.

00:40:59.080 --> 00:41:03.990
But we found that in some palettes or
pro apps with lots and lots of palettes,

00:41:03.990 --> 00:41:03.990
you

00:41:04.400 --> 00:41:08.140
Even with these small controls,
it feels a little bit cramped.

00:41:08.260 --> 00:41:12.060
And so we got requests to
have even smaller controls.

00:41:12.190 --> 00:41:16.130
So new for Panther,
we're adding mini controls.

00:41:22.000 --> 00:41:27.390
So we still have our
standard size controls,

00:41:27.390 --> 00:41:31.260
our small controls,
and now this suite of mini controls.

00:41:31.260 --> 00:41:33.280
And if you look back
at that palette again,

00:41:33.370 --> 00:41:35.320
here's the palette with
the small controls,

00:41:35.470 --> 00:41:37.130
which looks pretty good.

00:41:37.140 --> 00:41:39.260
Here's the same palette
with mini controls.

00:41:39.360 --> 00:41:42.530
You can really tighten it up
and you save that much space.

00:41:42.700 --> 00:41:44.890
So if your app is the
type that it's a pro app,

00:41:44.890 --> 00:41:47.820
you have lots of palettes,
take advantage of the new

00:41:47.820 --> 00:41:49.290
mini controls in Panther.

00:41:59.140 --> 00:42:02.540
So we're going to help you find
what you're looking for in Panther.

00:42:02.860 --> 00:42:06.180
When we built iTunes,
we found that one of the most

00:42:06.250 --> 00:42:09.610
important elements we added,
one of the most important

00:42:09.610 --> 00:42:12.640
features we built in,
was this.

00:42:12.690 --> 00:42:14.040
It's this great search field.

00:42:14.290 --> 00:42:16.360
There's three elements
to this search field.

00:42:16.410 --> 00:42:20.460
It's fast, it's incremental,
and it's readily accessible.

00:42:20.460 --> 00:42:23.030
It's right there in the main window.

00:42:23.370 --> 00:42:27.410
As we built other applications,
like mail, we found the exact same thing.

00:42:27.420 --> 00:42:30.840
We wanted to have a fast search field,
incremental,

00:42:30.940 --> 00:42:33.020
and right there in the main window.

00:42:33.080 --> 00:42:33.830
Address book.

00:42:34.040 --> 00:42:37.120
Fast, incremental,
right there in the main window.

00:42:37.160 --> 00:42:42.070
iCal has the same thing,
as does the new Finder, right?

00:42:42.080 --> 00:42:45.360
It's one of the really important
features of the new Finder.

00:42:46.400 --> 00:42:47.590
The new font book.

00:42:47.710 --> 00:42:49.840
Great search field built right in.

00:42:49.940 --> 00:42:54.420
Even Xcode is really built around
having great search built right in.

00:42:54.520 --> 00:42:57.180
We found this wasn't just
an element for us to do.

00:42:57.180 --> 00:43:01.700
It's really more about the user
experience of using most applications.

00:43:01.790 --> 00:43:04.790
If you can build great search
right into your application,

00:43:04.790 --> 00:43:06.770
your application will feel better.

00:43:06.770 --> 00:43:09.800
It'll be a better
experience for the user.

00:43:09.850 --> 00:43:11.480
So we're going to help you
out in two ways this year.

00:43:11.790 --> 00:43:14.030
Number one,
we're going to provide the UI.

00:43:14.190 --> 00:43:17.840
There's now a standard search widget
built into both Cocoa and Carbon.

00:43:22.590 --> 00:43:23.530
It looks like this.

00:43:23.750 --> 00:43:27.990
We're branding the rounded
text fields to mean search.

00:43:27.990 --> 00:43:31.080
So if you use a rounded text field,
that's a search field.

00:43:31.350 --> 00:43:32.580
Don't use it to mean anything else.

00:43:32.600 --> 00:43:35.240
It has an optional magnifying glass.

00:43:35.560 --> 00:43:39.100
You can use that to have a drop-down
menu where you can scope your searches,

00:43:39.100 --> 00:43:43.580
where you can save older
searches and someone can choose

00:43:43.580 --> 00:43:45.200
the older searches from there.

00:43:45.200 --> 00:43:46.930
So that's the optional magnifying glass.

00:43:47.500 --> 00:43:50.360
It also has an X in there which clears
the search once someone's typed it.

00:43:50.360 --> 00:43:53.920
So we're providing the UI in both
Cocoa and Carbon for Panther.

00:43:54.000 --> 00:43:56.910
Next, we're providing the engine.

00:43:58.420 --> 00:44:05.540
So we're building in a new framework
into Panther called Search Kit.

00:44:05.700 --> 00:44:10.770
Search Kit is a search engine you
can all use for your applications.

00:44:11.300 --> 00:44:14.770
We already use it for these applications,
so for the finder, for the address book,

00:44:14.860 --> 00:44:16.200
mail, help.

00:44:16.200 --> 00:44:18.200
It works really well.

00:44:18.200 --> 00:44:20.150
So what is SearchKit?

00:44:20.390 --> 00:44:22.700
It's vTwin, but much evolved.

00:44:22.740 --> 00:44:26.080
So back in Mac OS 9,
we had something called vTwin.

00:44:26.080 --> 00:44:27.340
It's a search engine.

00:44:27.340 --> 00:44:30.940
People really liked it,
and we've been moving it forward,

00:44:30.940 --> 00:44:33.500
and we got it to the point now
where we're ready to make it

00:44:33.650 --> 00:44:36.260
public in Mac OS X and fully
support it going forward.

00:44:37.850 --> 00:44:40.290
It supports a bunch of
different kinds of searches.

00:44:40.290 --> 00:44:42.070
So prefix searches,
like you'll see in address

00:44:42.150 --> 00:44:44.350
book in a lot of these apps,
Boolean searches,

00:44:44.860 --> 00:44:47.350
natural language searches
so you can ask a question,

00:44:47.350 --> 00:44:49.260
and even similar documents.

00:44:49.380 --> 00:44:51.770
So if you do a search and it
comes back with a document,

00:44:51.770 --> 00:44:53.550
but that isn't the document
you're looking for,

00:44:53.620 --> 00:44:56.560
but you know the document you're
looking for is similar to that document,

00:44:56.680 --> 00:44:58.720
we'll actually do an
analysis of that document,

00:44:58.780 --> 00:45:01.470
look at all the other
documents you've indexed,

00:45:01.470 --> 00:45:03.300
and return the similar ones.

00:45:03.340 --> 00:45:05.020
And it's fully Unicode based.

00:45:05.020 --> 00:45:10.980
CFString API is built right in so you can
index any of your different languages.

00:45:10.980 --> 00:45:13.820
For Japanese, we actually do some
really difficult work,

00:45:13.830 --> 00:45:16.350
which is we have to do linguistic
analysis to figure out where

00:45:16.350 --> 00:45:18.400
the word boundaries are,
because there aren't

00:45:18.460 --> 00:45:19.680
obvious word boundaries.

00:45:19.680 --> 00:45:22.720
We do that,
all built right into search kit.

00:45:23.600 --> 00:45:26.310
It supports these six document
types right out of the box.

00:45:26.310 --> 00:45:30.450
So text, RTF, RTF with graphics, HTML,
PDF, and even Word.

00:45:30.500 --> 00:45:33.650
But when your application
adopts SearchKit,

00:45:33.650 --> 00:45:38.040
you can add on support for any
type of application that your,

00:45:38.040 --> 00:45:40.440
or any type of document that your
application knows how to parse.

00:45:43.380 --> 00:45:44.710
So that's Aqua.

00:45:44.710 --> 00:45:49.710
We've taken the finder and made it very
user centric instead of computer centric.

00:45:49.800 --> 00:45:53.760
We've taken the open and save panels and
moved them right along with the finder.

00:45:53.790 --> 00:45:56.840
We've added that switcher
thing as a standard widget.

00:45:56.860 --> 00:46:00.160
We've really refined Aqua and we
think you're going to like it.

00:46:00.160 --> 00:46:01.800
We've really tried to
polish every little thing.

00:46:01.800 --> 00:46:04.500
There's a lot of other things
I didn't show you which we polished.

00:46:04.520 --> 00:46:08.540
We've added many controls and
we encourage you to adopt search

00:46:08.540 --> 00:46:11.760
and we've provided both the
search field and a framework to

00:46:11.860 --> 00:46:14.650
help you do the indexing itself.

00:46:18.300 --> 00:46:21.040
I'm not going to moonwalk.

00:46:21.170 --> 00:46:24.310
So for text,
we've done a bunch of things this year.

00:46:25.580 --> 00:46:27.820
Starting with text input for Japanese.

00:46:27.820 --> 00:46:29.820
We've really improved
text input for Japanese.

00:46:29.820 --> 00:46:32.260
The first thing we did was simplify it.

00:46:32.300 --> 00:46:34.970
In Jaguar, you had to go to a bunch
of different menus,

00:46:35.070 --> 00:46:38.180
different palettes to try to
find the right input method.

00:46:38.180 --> 00:46:41.220
In Panther,
there's a single menu for you to go to.

00:46:41.300 --> 00:46:45.380
It has everything you need and
there's a standard single palette

00:46:45.690 --> 00:46:49.810
you can keep on your screen to switch
between the different input modes.

00:46:51.450 --> 00:46:53.610
So we've simplified the UI.

00:46:53.610 --> 00:46:56.810
The next thing we did is
we improved the accuracy.

00:46:56.810 --> 00:46:59.090
We made it a better input method.

00:46:59.370 --> 00:47:01.540
There's two main ways we did this.

00:47:01.590 --> 00:47:04.630
We started off by using
the latent semantic mapping

00:47:04.630 --> 00:47:06.820
technology from our speech team.

00:47:06.870 --> 00:47:12.040
Now, this is the same technology we
use to do junk mail filtering.

00:47:12.040 --> 00:47:14.500
And what we've done is we've
used the latent semantic

00:47:15.350 --> 00:47:19.990
We use it to predictively guess based
on the characters you're typing what

00:47:20.520 --> 00:47:22.240
actual character you're going for.

00:47:22.240 --> 00:47:25.070
So based on the keystrokes you're typing,
what character you're going for.

00:47:25.130 --> 00:47:27.480
And this actually improves
our accuracy quite a bit.

00:47:27.480 --> 00:47:33.120
The next thing we've done is we used the
context in which you're typing to figure

00:47:33.120 --> 00:47:35.180
out what character you're looking for.

00:47:35.310 --> 00:47:38.330
So as you're typing along,
rather than having to guess what

00:47:38.460 --> 00:47:44.090
character you're going for purely
based on the keystrokes you've done,

00:47:44.090 --> 00:47:46.810
we look in the document,
we look around in the

00:47:46.840 --> 00:47:48.540
document for other characters.

00:47:48.540 --> 00:47:52.230
So if the keystrokes you've typed could
resolve in three different characters,

00:47:52.230 --> 00:47:55.840
and you've already typed one of
those characters into your document,

00:47:55.840 --> 00:47:58.240
a line above, we'll guess that character.

00:47:58.330 --> 00:48:03.260
So it helps the user, you know,
get the better characters faster.

00:48:03.270 --> 00:48:06.670
Now the important thing here is you
need to adopt this to help us out.

00:48:06.670 --> 00:48:08.110
So there's a protocol.

00:48:08.110 --> 00:48:12.420
You need to adopt this protocol,
which will vend back the context of

00:48:12.550 --> 00:48:17.570
the document the person's typing in
so it can pick the right characters.

00:48:18.690 --> 00:48:22.600
We've also added a preference for all
of those people who are coming from

00:48:22.600 --> 00:48:28.370
the dark side to the Mac and they still
want to feel comfortable with elements

00:48:28.370 --> 00:48:32.990
of the old crack home and the new home.

00:48:34.410 --> 00:48:38.780
So you can use the same pipe,
but it's now on the Mac,

00:48:38.780 --> 00:48:41.010
and it feels comfortable.

00:48:44.510 --> 00:48:47.280
Font Support.

00:48:47.310 --> 00:48:50.790
We've really simplified
dealing with fonts in Panther.

00:48:51.000 --> 00:48:55.780
The first thing is installing fonts is
as easy as double clicking a font file.

00:48:55.910 --> 00:48:59.090
It comes up with this preview,
you hit install,

00:48:59.100 --> 00:49:01.250
it goes right to the font book.

00:49:01.390 --> 00:49:04.230
So installation, incredibly easy.

00:49:04.840 --> 00:49:08.240
But the access for those fonts
is in the font panel itself.

00:49:08.350 --> 00:49:12.120
So you should build the font panel and
use the font panel in your applications.

00:49:12.280 --> 00:49:15.720
That's where your users
will get at the fonts,

00:49:15.830 --> 00:49:18.140
but they install it
through the font panel,

00:49:18.150 --> 00:49:20.250
or through the font book.

00:49:20.450 --> 00:49:23.140
Next, the font book is for organization.

00:49:23.220 --> 00:49:25.240
So you can create new collections.

00:49:25.330 --> 00:49:27.040
You can populate these collections.

00:49:27.100 --> 00:49:31.490
And again, you access those collections,
you access those fonts through the

00:49:31.530 --> 00:49:34.090
font panel in your application.

00:49:35.260 --> 00:49:37.850
You can also activate
and deactivate fonts.

00:49:37.850 --> 00:49:40.690
So take that font collection we just had,
we deactivate,

00:49:40.690 --> 00:49:43.780
and you'll see it disappears
from the font panel.

00:49:43.780 --> 00:49:47.590
So we really encourage you to use
the font panel as the standard access

00:49:47.950 --> 00:49:49.920
method on the system for fonts.

00:49:49.920 --> 00:49:54.870
However, we know that some of you have
very custom UIs for your fonts,

00:49:54.870 --> 00:49:57.940
and the font panel doesn't
make sense for you.

00:49:57.980 --> 00:50:02.420
So for all of you, in Panther,
we've added a new set of APIs to

00:50:02.420 --> 00:50:05.890
get directly at these collections,
the activation and deactivation of those,

00:50:05.990 --> 00:50:07.070
you can use it directly.

00:50:10.600 --> 00:50:13.740
Text performance.

00:50:13.800 --> 00:50:16.500
There's one thing we heard loud
and clear from you about our

00:50:16.500 --> 00:50:22.780
text performance in Jaguar.

00:50:30.970 --> 00:50:34.400
I see that all the fish fans
have perked up from making

00:50:34.400 --> 00:50:38.130
bongs out of their new cameras.

00:50:42.020 --> 00:50:47.330
They're the only fans where
text feels almost too fast.

00:50:47.820 --> 00:50:52.690
So if you sample your application,
you're going to find that a

00:50:52.700 --> 00:50:58.520
lot of time in your application
is spent dealing with text.

00:50:58.610 --> 00:51:02.010
It's spent laying out the text,
measuring the text,

00:51:02.210 --> 00:51:04.790
drawing it to the screen,
redrawing it when

00:51:04.790 --> 00:51:06.510
there's a window resize.

00:51:06.570 --> 00:51:11.400
And that makes sense because a lot of
what your application does is draw text.

00:51:11.400 --> 00:51:13.810
So this is how we've optimized it.

00:51:15.960 --> 00:51:19.820
All text is drawn in
Translucent in Panther.

00:51:19.930 --> 00:51:22.070
So we looked at that
and we actually said,

00:51:22.080 --> 00:51:24.140
well, here's a great opportunity.

00:51:24.180 --> 00:51:28.150
Because anything we can do to
improve the performance of text is

00:51:28.150 --> 00:51:30.930
going to improve the performance
of every one of your applications

00:51:31.220 --> 00:51:33.030
and of the system as a whole.

00:51:33.060 --> 00:51:35.400
And so we looked at
all this text we draw,

00:51:35.410 --> 00:51:40.660
and we spent a lot of time
optimizing all of this for Panther.

00:51:40.690 --> 00:51:43.920
And I think you're going to be
really pleased with what we have.

00:51:44.220 --> 00:51:46.500
Let's look at the stages where
we went through and optimized.

00:51:46.500 --> 00:51:48.790
We looked at the font system,
so ATS and all the different

00:51:48.790 --> 00:51:50.140
pieces involved there.

00:51:50.170 --> 00:51:53.440
We looked at core graphics and how
we get everything to the screen.

00:51:53.450 --> 00:51:57.040
ATSUI does a lot of the layout
and the Carbon and Cocoa APIs.

00:51:57.060 --> 00:52:01.140
We had a concerted effort this year
where we went through and we optimized

00:52:01.370 --> 00:52:04.670
every single layer of the tech system.

00:52:04.790 --> 00:52:08.650
Then we stood back and we
optimized holistically.

00:52:08.790 --> 00:52:10.800
We looked across
different layers and said,

00:52:10.850 --> 00:52:14.000
"Are there places where ATSUI needs
to leverage the font system directly?

00:52:14.280 --> 00:52:17.460
Is there an impedance mismatch
and can we plug that up with

00:52:17.460 --> 00:52:19.820
some new APIs to make it faster?

00:52:19.880 --> 00:52:23.360
Are there places where Carbon should
talk directly to Core Graphics?" And so

00:52:23.360 --> 00:52:26.240
we optimized across layers as well.

00:52:26.240 --> 00:52:30.300
What I'm pleased to say is
the outcome of this is if you

00:52:30.300 --> 00:52:32.940
look at any of the text APIs,
pretty much from the lowest

00:52:33.040 --> 00:52:35.340
level to the highest level,
they're all more than

00:52:35.600 --> 00:52:38.380
twice as fast in Panther.

00:52:38.380 --> 00:52:40.980
So this is a great achievement.

00:52:44.400 --> 00:52:47.200
There's some places where it's
even much faster than that.

00:52:47.240 --> 00:52:49.260
So it's five or 10 times faster.

00:52:49.260 --> 00:52:53.040
Again, I absolutely encourage you,
please install the new seed and

00:52:53.040 --> 00:52:57.180
see what performance improvements
you get out of the text in Panther.

00:52:57.200 --> 00:53:01.590
We're continuing to optimize text
and will do so until the final

00:53:01.590 --> 00:53:03.500
version of Panther is in the box.

00:53:03.740 --> 00:53:07.290
So you still have time to let us know,
are there any bottlenecks remaining?

00:53:07.390 --> 00:53:13.580
If so, we'll try to improve them
before we go 10.3 with Panther.

00:53:14.200 --> 00:53:15.100
That's text.

00:53:15.100 --> 00:53:18.590
So we've improved the Japanese input.

00:53:18.600 --> 00:53:22.260
We've added great support for
font maintenance and management,

00:53:22.260 --> 00:53:25.290
and most importantly,
a lot of performance work.

00:53:30.060 --> 00:53:32.760
So Carbon, we believe, is a gem,
and we're treating it that

00:53:32.760 --> 00:53:34.200
way and continue to evolve it.

00:53:34.240 --> 00:53:37.730
A lot of what I've already talked
about for things like the switcher

00:53:37.800 --> 00:53:41.040
thing and mini controls are features
that we've added to Carbon this year.

00:53:41.040 --> 00:53:44.720
So I'm just going to talk about a few
specifics for Carbon in this section.

00:53:47.090 --> 00:53:49.550
This is the age of HIVU.

00:53:49.550 --> 00:53:52.170
Last year we introduced HIVU to you.

00:53:52.170 --> 00:53:55.560
We spent a lot of our time this
year improving HIVU and sort of

00:53:55.800 --> 00:53:58.580
making it permeate throughout Carbon.

00:54:01.190 --> 00:54:04.140
Hiview is the future of the HIToolbox.

00:54:04.190 --> 00:54:07.220
So if you have a Carbon application,
adopt Hiview.

00:54:07.270 --> 00:54:10.140
Most of you have already
adopted Carbon Events,

00:54:10.240 --> 00:54:10.800
which is great.

00:54:10.990 --> 00:54:15.080
Hiview is the next step in this progress.

00:54:15.130 --> 00:54:16.920
We've added HITextView.

00:54:17.010 --> 00:54:19.540
So we took MLTE and it's now an Hiview.

00:54:22.290 --> 00:54:25.780
We have HIView based menus,
so it's much easier for

00:54:25.780 --> 00:54:29.770
you to extend menus,
for you to add your own functionality.

00:54:29.920 --> 00:54:32.900
If you saw this morning,
we have this action menu in the

00:54:33.120 --> 00:54:36.760
finder and allows you to set
different colors for labels.

00:54:36.900 --> 00:54:41.330
That's all done through the use
of the new HIView based menus.

00:54:41.560 --> 00:54:43.300
And we've added great layout support.

00:54:43.600 --> 00:54:46.880
So we have springs and rods,
but we also have very

00:54:46.880 --> 00:54:48.160
complex relationships.

00:54:48.240 --> 00:54:52.200
So you can look at different views,
can sort of pay attention to each other,

00:54:52.200 --> 00:54:54.790
and when the window resizes,
they can resize in very complex

00:54:54.900 --> 00:54:57.500
relationships whatever you
need for your applications.

00:54:57.500 --> 00:55:00.890
And it's much faster,
which is another theme of

00:55:00.980 --> 00:55:04.920
the HIToolbox this year:
performance optimizations.

00:55:05.130 --> 00:55:08.560
We have a complete set
of Quartz theme APIs.

00:55:08.650 --> 00:55:12.560
So we used to use Quartz in our layer.

00:55:12.590 --> 00:55:14.560
Then we'd go through Quick Draw and
we'd go back to Quartz.

00:55:14.570 --> 00:55:15.510
And it was a little slow.

00:55:15.600 --> 00:55:19.380
We now have top to bottom,
a complete path, which is all Quartz.

00:55:19.510 --> 00:55:21.990
We encourage you to take advantage of it.

00:55:23.410 --> 00:55:25.120
It's much, much faster.

00:55:25.160 --> 00:55:26.620
Data Browser.

00:55:26.650 --> 00:55:29.920
Data Browser, we heard from you,
wasn't fast enough.

00:55:29.950 --> 00:55:34.540
We made it 25% faster to add new items,
80% faster to remove items,

00:55:34.560 --> 00:55:39.720
and if you have very large data sets,
it is much, much, much faster.

00:55:40.020 --> 00:55:41.960
Much.

00:55:41.990 --> 00:55:44.800
And it now supports
compositing mode as well.

00:55:45.900 --> 00:55:48.670
We've also really
improved window resizing,

00:55:48.770 --> 00:55:50.520
so it's at least 30% faster.

00:55:50.520 --> 00:55:53.480
In most cases,
if you have a fully composited window,

00:55:53.480 --> 00:55:54.420
it's even faster.

00:55:54.510 --> 00:55:57.250
So we encourage you to have
your app be fully composited.

00:55:57.250 --> 00:55:59.170
It's Carbon.

00:56:12.270 --> 00:56:17.380
So we think you'd be loco not to
use Cocoa for a new application.

00:56:19.290 --> 00:56:21.610
All right, again, just like Carbon,
we've added a lot of

00:56:21.700 --> 00:56:26.040
things to Cocoa this year,
but I'm going to talk about just one.

00:56:26.550 --> 00:56:31.190
So stepping back,
there's a standard developer paradigm

00:56:31.520 --> 00:56:33.310
called model view controller,
right?

00:56:33.320 --> 00:56:34.750
And so most of you
probably know what this is,

00:56:34.880 --> 00:56:39.050
but you take your application,
you separate out the UI piece,

00:56:39.050 --> 00:56:44.340
which is your view from the model piece,
your data, and there's this controller

00:56:44.340 --> 00:56:46.060
layer in between,
which pretty much is the glue

00:56:46.060 --> 00:56:47.310
that moves things back and forth.

00:56:47.320 --> 00:56:53.530
So Cocoa has had a model in NSDocument,
and it also had a view in NSView,

00:56:53.530 --> 00:56:55.990
but it hasn't had a controller layer.

00:56:56.730 --> 00:57:00.730
What this means is you've had to write
a lot of glue in your applications

00:57:01.060 --> 00:57:02.450
to do that controller layer.

00:57:02.460 --> 00:57:06.780
I'm happy to say that for Panther,
we're adding a controller layer.

00:57:06.780 --> 00:57:08.480
NSController.

00:57:11.720 --> 00:57:13.800
So why should we do a controller layer?

00:57:13.800 --> 00:57:17.290
OK, this is up to 10,000 feet now.

00:57:17.790 --> 00:57:22.750
Our goal as a platform
vendor is to make you

00:57:23.020 --> 00:57:25.550
The most efficient developer
you possibly can be.

00:57:25.560 --> 00:57:30.770
We want you, when you have a new idea,
to implement that idea on Mac OS X first

00:57:30.770 --> 00:57:32.990
and get it done the fastest possible.

00:57:33.000 --> 00:57:34.470
So that's our goal.

00:57:34.480 --> 00:57:40.470
We believe that Cocoa,
that the shortest distance between a

00:57:40.560 --> 00:57:45.540
brand new idea and an app implementing
that idea is Cocoa on Mac OS X.

00:57:45.540 --> 00:57:47.270
So what do we do to that end?

00:57:47.300 --> 00:57:50.280
Number one, we provide all the
standard functionality.

00:57:50.880 --> 00:57:54.650
So we provide views and controls
and text views and collection

00:57:54.650 --> 00:57:56.530
classes and on and on and on.

00:57:56.540 --> 00:58:00.200
Cocoa is our advanced object-oriented
framework and it provides all

00:58:00.200 --> 00:58:02.080
that standard functionality.

00:58:02.080 --> 00:58:06.830
The next thing we do is we continue
to try to eliminate redundant code.

00:58:06.840 --> 00:58:09.430
So if we see that several
applications are trying to

00:58:09.430 --> 00:58:12.670
do a certain thing with text,
we add new APIs to the text

00:58:12.760 --> 00:58:14.320
system to help you out.

00:58:14.380 --> 00:58:19.510
But this year, we sat back and said,
can we do more?

00:58:20.360 --> 00:58:23.320
And inspired by a couple
technologies Apple's had,

00:58:23.320 --> 00:58:29.470
EOF and WebObjects,
we've added a whole new layer which

00:58:30.010 --> 00:58:33.050
eliminates an entire class of glue code.

00:58:37.400 --> 00:58:38.950
So we're getting rid of the glue code.

00:58:39.040 --> 00:58:40.830
So what is this glue code?

00:58:40.900 --> 00:58:45.120
You know when you're writing an
application and a user updates a value

00:58:45.310 --> 00:58:48.280
in a text field and then you need
to write this glue code which goes

00:58:48.280 --> 00:58:50.600
and updates your model based on it.

00:58:50.620 --> 00:58:52.820
You don't have to write
that code anymore.

00:58:52.840 --> 00:58:53.860
It's gone.

00:58:53.880 --> 00:58:58.030
The controller layer we provide
does that automatically for you.

00:58:58.510 --> 00:59:01.540
When your model changes,
you have to have glue code which then

00:59:01.540 --> 00:59:04.400
reflects that new value in the UI.

00:59:04.470 --> 00:59:07.890
You no longer have to
write that code in Panther.

00:59:07.890 --> 00:59:11.000
The controller layer takes
care of that for you.

00:59:11.560 --> 00:59:16.260
You might have a couple UI elements
or multiple UI elements all

00:59:16.260 --> 00:59:19.500
reflecting the same data value,
the same model.

00:59:19.500 --> 00:59:22.560
And you have to write all this
code where if it changes one place,

00:59:22.560 --> 00:59:24.570
you synchronize all the other ones
so they don't get out of sync,

00:59:24.650 --> 00:59:26.500
so you see the same value everywhere.

00:59:26.620 --> 00:59:28.500
You no longer have to
write any code for that.

00:59:28.500 --> 00:59:32.490
It's all done automatically
in the controller layer.

00:59:33.020 --> 00:59:35.820
And sometimes the user will
click to change something.

00:59:35.820 --> 00:59:40.300
For instance, you have a table view,
a big list of values

00:59:40.390 --> 00:59:41.650
with multiple columns.

00:59:41.760 --> 00:59:43.930
And depending on which
column the user clicks on,

00:59:44.160 --> 00:59:45.820
you sort by that column.

00:59:45.940 --> 00:59:50.150
You've had to write all this glue code
to do sorting for your table views.

00:59:50.260 --> 00:59:51.770
No longer.

00:59:51.900 --> 00:59:57.920
The controller layer now supports
sorting out of the box for free.

01:00:03.070 --> 01:00:06.390
and of course we didn't forget
that if we're doing it we

01:00:06.460 --> 01:00:08.600
better integrate it into IB.

01:00:08.680 --> 01:00:12.940
So Interface Builder in the past has
supported hooking up targets and actions

01:00:13.410 --> 01:00:18.580
meaning you could tie your UI directly
to the controller layer you were writing.

01:00:18.600 --> 01:00:22.580
In Panther you tie your
UI directly to your data,

01:00:22.770 --> 01:00:23.980
directly to your model.

01:00:23.980 --> 01:00:26.960
You don't have to write any of
that controller glue in between.

01:00:27.050 --> 01:00:30.080
It's all provided by this new
controller layer in Cocoa.

01:00:30.110 --> 01:00:32.110
That's the controller layer.

01:00:39.420 --> 01:00:41.320
Alright, let's talk about the internet.

01:00:41.340 --> 01:00:42.800
We'll start off with Sherlock.

01:00:42.930 --> 01:00:44.210
So what is Sherlock?

01:00:44.400 --> 01:00:49.220
Sherlock is a web
services host application.

01:00:49.350 --> 01:00:53.130
So you can write, quickly write,
a web service, a client side of a web

01:00:53.130 --> 01:00:56.420
service as a Sherlock channel.

01:00:56.460 --> 01:00:59.850
It'll run inside of Sherlock and
you'll get this great client side

01:01:00.060 --> 01:01:02.120
experience for that web service.

01:01:02.170 --> 01:01:04.720
So an XML feed or an HTML feed.

01:01:04.760 --> 01:01:05.880
You can get that right inside here.

01:01:05.880 --> 01:01:10.480
So here's an example of one of the ones
we've written for our movie channel.

01:01:10.510 --> 01:01:16.510
It seems that we're required by our
CEO to have everything be Nemo this year.

01:01:16.960 --> 01:01:20.100
So, you know,
this is a nice standard channel.

01:01:20.170 --> 01:01:24.700
What we found this year is that more
of you have been writing channels.

01:01:24.770 --> 01:01:28.950
And so we needed a way to
organize these channels.

01:01:29.080 --> 01:01:34.490
So we used the same library organization
mechanism that we have in Safari and

01:01:34.490 --> 01:01:36.480
have brought it into Sherlock.

01:01:36.590 --> 01:01:37.740
So we now have that.

01:01:37.800 --> 01:01:39.910
The most important one of
those collections on the left,

01:01:39.910 --> 01:01:42.200
though, is this one.

01:01:42.240 --> 01:01:45.120
This is a dynamic collection.

01:01:45.330 --> 01:01:49.970
It's a dynamic collection of every
channel which appears either on DMOZ,

01:01:49.970 --> 01:01:53.750
and DMOZ is an open directory,
sort of the Yahoo of open directories.

01:01:53.800 --> 01:01:56.200
They collect things,
they collect Sherlock channels.

01:01:56.200 --> 01:02:00.840
So if your channel appears on DMOZ,
or you submit it directly to us,

01:02:00.980 --> 01:02:04.550
it'll appear in everyone's
copy of Sherlock dynamically

01:02:04.550 --> 01:02:06.200
every time they launch it.

01:02:06.200 --> 01:02:10.200
So this is the way for you to get
your channels out to everyone else.

01:02:10.200 --> 01:02:13.870
That's Sherlock.

01:02:21.020 --> 01:02:22.200
Safari.

01:02:22.440 --> 01:02:26.750
When we built Safari,
we had five main goals.

01:02:26.840 --> 01:02:28.920
The first two were performance-related.

01:02:29.000 --> 01:02:30.960
It had to be fast.

01:02:30.960 --> 01:02:33.010
It had to be fast.

01:02:33.080 --> 01:02:35.240
And it had to be small.

01:02:35.350 --> 01:02:39.620
So we've succeeded on these two goals,
and Safari is the fastest

01:02:39.620 --> 01:02:41.870
browser on the Mac,
as you know.

01:02:41.870 --> 01:02:44.160
Most of you probably use it.

01:02:44.510 --> 01:02:46.600
And I get asked a lot, well,
how did we succeed on it?

01:02:46.600 --> 01:02:48.180
How did we make it small and fast?

01:02:48.280 --> 01:02:49.270
What did we do?

01:02:49.350 --> 01:02:50.880
So let me take you through
that just a little bit,

01:02:50.960 --> 01:02:52.380
because it wasn't magic.

01:02:52.510 --> 01:02:55.240
And I think this might help
you understand what we did.

01:02:55.380 --> 01:02:58.600
So it'll help you make your
applications fast as well.

01:03:02.370 --> 01:03:06.320
Most importantly,
we made performance the most

01:03:06.420 --> 01:03:08.460
important feature of the application.

01:03:08.520 --> 01:03:13.480
This is one of those things where for
engineers to actually work on things,

01:03:13.480 --> 01:03:16.330
you have to make it a feature
that they're going to measure it

01:03:16.340 --> 01:03:18.830
against or else they're going to
sort of ignore it until the end.

01:03:18.840 --> 01:03:23.180
So we made it the most important
feature for everyone on the team.

01:03:23.180 --> 01:03:25.760
We started with a small code base.

01:03:25.880 --> 01:03:28.280
If you have a small code base,
you're running less code.

01:03:28.280 --> 01:03:31.580
It also means you can get your
head around all that code code,

01:03:31.600 --> 01:03:34.310
so you can optimize the entire thing.

01:03:34.820 --> 01:03:37.700
And this is probably the one
which is the most controversial.

01:03:37.700 --> 01:03:40.700
It's the first project I've
seen actually that does this.

01:03:40.700 --> 01:03:45.700
We allowed no performance
regressions from build to build.

01:03:46.180 --> 01:03:47.700
Period.

01:03:47.700 --> 01:03:50.620
So even when an engineer

01:03:51.550 --> 01:03:54.950
implemented some new feature and
they checked that new feature

01:03:55.050 --> 01:03:58.780
into the code base and we
built that and we measured it.

01:03:58.840 --> 01:04:01.740
If our page load times
got any slower at all,

01:04:01.810 --> 01:04:05.000
we checked that back out of
the main trunk of the code.

01:04:05.000 --> 01:04:08.160
The engineer had to find a way
to make it to implement it again

01:04:08.410 --> 01:04:10.840
without any performance regressions.

01:04:10.900 --> 01:04:14.590
Or they could be tricky and go optimize
a different part of the system,

01:04:14.590 --> 01:04:17.670
a different part of the
application and check it back

01:04:17.670 --> 01:04:19.910
in so it still didn't regress.

01:04:20.230 --> 01:04:21.360
That was the rule.

01:04:27.240 --> 01:04:29.960
Now you can't tell people that up
front because they put really slow

01:04:29.960 --> 01:04:32.720
stuff all over the place and the
sleeps come out as they add features.

01:04:35.360 --> 01:04:38.290
So we measured constantly
to know where we were also.

01:04:38.300 --> 01:04:39.820
This was really important.

01:04:39.840 --> 01:04:43.000
We hand-timed things,
we sampled running processes,

01:04:43.100 --> 01:04:45.320
we built automated tests,
and we created charts,

01:04:45.400 --> 01:04:48.160
charts all over the place,
so we saw what was happening

01:04:48.160 --> 01:04:49.380
with our performance.

01:04:49.450 --> 01:04:51.540
So we were never surprised.

01:04:51.550 --> 01:04:53.220
You know,
a chart would come out every day or every

01:04:53.220 --> 01:04:56.630
other day whenever there was a build,
and if we saw there was a blip

01:04:56.630 --> 01:05:00.570
going the wrong direction,
we'd check that code back out.

01:05:00.750 --> 01:05:03.500
There's a lot of great tools
in the system and we use them.

01:05:03.500 --> 01:05:07.180
So Sampler's a really good tool to
find out where you're using CPU time.

01:05:07.210 --> 01:05:10.000
Malik Debug and Heap are
great for memory usage.

01:05:10.100 --> 01:05:12.930
Quartz Debug, if you haven't run it,
is fantastic for finding

01:05:12.930 --> 01:05:14.300
your drawing problems.

01:05:14.300 --> 01:05:17.010
If you're drawing a control two times,
three times, four times,

01:05:17.150 --> 01:05:20.210
if you're drawing it multiple times,
Quartz Debug will flash it right in

01:05:20.280 --> 01:05:24.480
your face and let you know that you're
drawing something multiple times.

01:05:24.530 --> 01:05:28.200
FS Usage tells you how often
you're touching the file system.

01:05:28.200 --> 01:05:31.860
And the more you touch the file system,
the more your application

01:05:31.930 --> 01:05:36.240
runs at the speed of the disk
instead of the speed of the G5.

01:05:36.240 --> 01:05:38.840
And trust me,
the G5 is faster than your disk.

01:05:38.840 --> 01:05:43.730
So run FS Usage and cut down the number
of times you're touching the disk.

01:05:43.870 --> 01:05:45.560
And there's a lot of other tools.

01:05:45.560 --> 01:05:47.860
We ran all the tools.

01:05:48.530 --> 01:05:51.120
This one I think is one
of the most important.

01:05:51.120 --> 01:05:54.400
We built performance tests
directly into the application.

01:05:54.400 --> 01:06:00.190
That means that anyone internally running
Safari throughout the entire development

01:06:00.190 --> 01:06:02.400
cycle could run the performance tests.

01:06:02.400 --> 01:06:05.320
That means I could run them, and I did.

01:06:05.320 --> 01:06:08.500
Each time I got a new version of Safari,
I would run the PLT,

01:06:08.500 --> 01:06:10.480
I would run the tests
that were built right in,

01:06:10.550 --> 01:06:12.460
I would see what the
speed was on my machine,

01:06:12.460 --> 01:06:14.520
I knew what it was supposed to be,
I would know if it got any slower,

01:06:14.520 --> 01:06:16.380
and if it did, I'd call someone.

01:06:17.400 --> 01:06:21.770
So, building tests directly
into your application is,

01:06:21.820 --> 01:06:25.460
I mean, I can't overstate this,
if you look at applications

01:06:25.550 --> 01:06:28.400
where people have done this,
those are generally fast applications.

01:06:28.400 --> 01:06:30.360
So what are the lessons we learned?

01:06:30.380 --> 01:06:32.310
Make performance a priority.

01:06:32.310 --> 01:06:34.390
If you do, your app will be fast.

01:06:35.870 --> 01:06:38.510
Use the right API for the job.

01:06:38.510 --> 01:06:41.300
This is one of those things
where it should be obvious,

01:06:41.300 --> 01:06:44.340
but we have lots of APIs on our system.

01:06:44.540 --> 01:06:47.720
And some of them are generic
and do a good job of a large

01:06:47.720 --> 01:06:49.140
amount of functionality.

01:06:49.270 --> 01:06:52.540
For instance,
we have APIs that are meant for a large

01:06:52.540 --> 01:07:00.600
editable text view and it's meant to
handle bidirectional Unicode text.

01:07:00.660 --> 01:07:00.680
Right?

01:07:00.690 --> 01:07:04.960
So this is great, but it's not great if
you're drawing a label.

01:07:04.960 --> 01:07:11.320
So we've added optimized APIs for
certain smaller pieces of functionality.

01:07:11.380 --> 01:07:15.280
So when you're going through and you find
an API that solves the need you want,

01:07:15.280 --> 01:07:19.390
keep reading through that header
file to see if there's anything else

01:07:19.480 --> 01:07:21.700
we've added just for your usage.

01:07:21.710 --> 01:07:25.110
Use the right API for the job and
you'll get better performance.

01:07:25.140 --> 01:07:27.230
Measure, measure, measure.

01:07:27.700 --> 01:07:30.210
Measure to find where
your bottlenecks are.

01:07:30.470 --> 01:07:32.400
Measure to find if the new API you're
using is going to be a good one.

01:07:32.400 --> 01:07:32.400
Measure to find if the new API you're
using is going to be a good one.

01:07:32.400 --> 01:07:32.400
Measure to find if the new API you're
using is going to be a good one.

01:07:32.400 --> 01:07:32.400
Measure to find if the new API you're
using is going to be a good one.

01:07:32.400 --> 01:07:32.470
Measure to find if the new API you're
using is going to be a good one.

01:07:32.480 --> 01:07:33.400
Measure to find if the new API you're
using is going to be a good one.

01:07:33.400 --> 01:07:34.370
Measure to find if the new API you're
using is going to be a good one.

01:07:34.380 --> 01:07:35.400
Measure to find if the new API you're
using is going to be a good one.

01:07:35.400 --> 01:07:35.940
Measure to find if the new API you're
using is better for the job and

01:07:35.940 --> 01:07:38.520
measure to prove to yourself after
you've made the optimization that it

01:07:38.520 --> 01:07:40.330
actually made your application faster.

01:07:41.690 --> 01:07:42.550
and never regress.

01:07:42.650 --> 01:07:45.930
Again, this was controversial,
but it really helped us nail it.

01:07:46.190 --> 01:07:50.440
Instead of trying to optimize at the end,
we were optimizing the entire time,

01:07:50.440 --> 01:07:54.510
so we made architectural changes
that would make the app fast.

01:07:54.620 --> 01:07:56.180
Alright, let's get back to the goals.

01:07:56.290 --> 01:07:58.750
The next goal, we want it to be native,
so we want it to be a

01:07:58.880 --> 01:08:03.240
great Mac OS X citizen,
leverage all the features we have

01:08:03.350 --> 01:08:05.470
on the system like CF Network,

01:08:06.150 --> 01:08:08.990
We wanted it to be real
world standards compliant.

01:08:08.990 --> 01:08:11.540
So of course we wanted to support
all the standard buzzwords,

01:08:11.540 --> 01:08:14.680
all the standard, you know,
the standard standards.

01:08:14.680 --> 01:08:19.170
But if you go to eBay and, you know,
I don't know if anyone's here from eBay.

01:08:19.410 --> 01:08:21.740
If you go to eBay and it
doesn't render for you,

01:08:21.740 --> 01:08:24.370
even if it's not following a standard,
it, you want it to render,

01:08:24.370 --> 01:08:25.670
you don't care.

01:08:25.690 --> 01:08:28.790
And so we made sure that all the
sites out there would render.

01:08:28.790 --> 01:08:32.270
We wanted real world
standards compliance.

01:08:32.500 --> 01:08:36.140
But most important for you,
one of our main goals from the

01:08:36.140 --> 01:08:39.390
moment we started this project
was that it be embeddable.

01:08:39.400 --> 01:08:45.770
Our goal was to be able to open this up
and have you embed everything about the

01:08:45.770 --> 01:08:48.340
guts of Safari into your applications.

01:08:48.400 --> 01:08:51.660
So let's look at that.

01:08:51.920 --> 01:08:54.040
Here's Safari.

01:08:54.040 --> 01:08:56.040
Here's the way we built it.

01:08:56.170 --> 01:09:01.020
Safari itself is just a thin
layer on the top of this stack.

01:09:01.350 --> 01:09:03.960
Everything else are public APIs.

01:09:03.960 --> 01:09:06.020
So we start with the
standard BSD sockets.

01:09:06.020 --> 01:09:08.990
CF Network is where we
implement most of our protocols,

01:09:08.990 --> 01:09:11.360
and Bertrand talked about that earlier.

01:09:12.740 --> 01:09:14.290
Foundation URL APIs.

01:09:14.350 --> 01:09:18.370
So Foundation has been
greatly enhanced in Panther.

01:09:18.370 --> 01:09:20.730
It has fantastic URL loading.

01:09:20.840 --> 01:09:23.360
It's much enhanced from Jaguar.

01:09:23.360 --> 01:09:27.310
It has automatic content caching.

01:09:28.210 --> 01:09:31.260
It supports standard
authentication schemes.

01:09:31.350 --> 01:09:32.600
It has extensible streams.

01:09:32.640 --> 01:09:33.940
So we now have a stream object.

01:09:33.940 --> 01:09:34.870
You can subclass it.

01:09:34.880 --> 01:09:36.800
You can extend it.

01:09:37.620 --> 01:09:41.180
We provide all the standard protocols,
but you can extend that

01:09:41.180 --> 01:09:43.620
with custom protocols.

01:09:43.620 --> 01:09:44.620
And we support cookies.

01:09:44.620 --> 01:09:47.620
C is for cookie,
that's good enough for me.

01:09:50.360 --> 01:09:53.780
I've got a four year old.

01:09:53.820 --> 01:09:54.780
Alright, WebKit.

01:09:54.780 --> 01:09:56.690
Let's look inside WebKit.

01:09:57.490 --> 01:10:00.880
This is Safari.

01:10:00.880 --> 01:10:02.340
This is WebKit.

01:10:02.450 --> 01:10:06.160
WebKit is that content region of Safari.

01:10:06.230 --> 01:10:07.670
You can build it into your applications.

01:10:07.720 --> 01:10:10.780
We built it directly into Mail,
so Mail now has much

01:10:10.780 --> 01:10:14.950
better HTML rendering,
but this is WebKit.

01:10:15.400 --> 01:10:18.670
Most important for you,
you can build it into your application.

01:10:18.820 --> 01:10:23.790
So WebKit is that content
region and more of Safari.

01:10:23.880 --> 01:10:27.630
We support standards,
so here's all the buzzwords that HTML4,

01:10:27.750 --> 01:10:32.660
XML, I'm not going to read to you,
but we support all the standards.

01:10:32.660 --> 01:10:36.770
And we are a member of the W3C and are
actively working on new standards which

01:10:36.890 --> 01:10:40.470
we'll support as the W3C decides on them.

01:10:40.700 --> 01:10:41.600
That's WebKit.

01:10:41.840 --> 01:10:44.050
Let's look inside it for a moment.

01:10:44.070 --> 01:10:47.310
There's two main pieces inside of WebKit.

01:10:47.360 --> 01:10:49.490
It's WebCore and JavaScript Core.

01:10:49.600 --> 01:10:54.600
So WebCore is the open
source KHTML library.

01:10:54.700 --> 01:10:58.060
We encourage you to become members
of the open source community,

01:10:58.350 --> 01:11:00.780
contribute to this the same
way we're contributing to it,

01:11:00.860 --> 01:11:03.190
and it will benefit all of us.

01:11:03.710 --> 01:11:07.030
JavaScript Core is KJS,
again the open source

01:11:07.090 --> 01:11:08.560
version of the library.

01:11:08.630 --> 01:11:09.950
We encourage you to support it.

01:11:12.230 --> 01:11:15.580
Now one thing we've been telling you
for the last few years is if you're

01:11:15.580 --> 01:11:19.580
building a brand new application,
you should go find some open

01:11:19.580 --> 01:11:23.510
source code that's great and then
if it's a brand new application,

01:11:23.510 --> 01:11:25.570
build a beautiful Cocoa UI on top of it.

01:11:25.610 --> 01:11:28.700
It's the fastest way for you to
get your application out the door.

01:11:28.820 --> 01:11:31.060
It's exactly what we did here.

01:11:31.120 --> 01:11:35.140
KJS is C++, WebCore is C++,
both open source.

01:11:35.470 --> 01:11:39.250
We used Objective C++ and WebKit to
marry the whole thing together and

01:11:39.340 --> 01:11:41.610
build this beautiful UI called Safari.

01:11:43.540 --> 01:11:48.340
But the important thing for you is
WebCore and JavaScript Core are pieces

01:11:48.570 --> 01:11:53.610
and implementation details of WebKit,
but for you, the API to use on

01:11:53.610 --> 01:11:56.190
Mac OS X is WebKit itself.

01:11:57.350 --> 01:12:00.750
So this is WebKit,
and that is where it falls in the stack.

01:12:00.760 --> 01:12:04.550
We've taken and built Safari in
such a way that you can take

01:12:04.650 --> 01:12:09.080
advantage of almost all of the
APIs directly in your application.

01:12:09.180 --> 01:12:12.460
And to show that,
I'd like to bring Richard Williamson,

01:12:12.460 --> 01:12:16.330
engineer extraordinaire,
up on stage to blow you away with

01:12:16.330 --> 01:12:18.760
how easy it is to use WebKit.

01:12:25.200 --> 01:12:27.380
Hi.

01:12:27.380 --> 01:12:29.380
So I'm going to give
you a demo of WebKit.

01:12:29.420 --> 01:12:32.890
And what better way to do that
than to build a web browser?

01:12:33.020 --> 01:12:34.920
So let's get started.

01:12:37.450 --> 01:12:42.480
I'm going to launch Interface
Builder and start a new application.

01:12:42.580 --> 01:12:46.990
And you'll notice that Interface
Builder has a new palette.

01:12:47.480 --> 01:12:49.740
The WebKit palette.

01:12:49.820 --> 01:12:53.080
This palette has a single class on it.

01:12:53.230 --> 01:12:55.550
It's called the WebView.

01:12:55.650 --> 01:12:59.470
Let's add a WebView to our window.

01:12:59.580 --> 01:13:01.280
Resize it.

01:13:03.590 --> 01:13:08.100
Set some resize flags
on the web view itself.

01:13:08.230 --> 01:13:11.320
Now,
how do I load a URL into this web view?

01:13:11.550 --> 01:13:13.540
I'll use a text field.

01:13:14.790 --> 01:13:19.460
Drag out a text field,
place it in the window,

01:13:19.520 --> 01:13:22.420
and using the normal
target action mechanism,

01:13:22.510 --> 01:13:24.550
connect it to the web view.

01:13:25.890 --> 01:13:29.290
Now I'd like to add a
few more... This is good,

01:13:29.300 --> 01:13:30.900
but I'd like to add a few more features.

01:13:30.990 --> 01:13:33.410
Maybe a back and a forward button.

01:13:34.160 --> 01:13:38.340
So let's drag out a back button,
place it in the window,

01:13:38.350 --> 01:13:40.380
and a forward button.

01:13:40.410 --> 01:13:43.210
Give these buttons labels-- back,

01:13:43.780 --> 01:13:45.310
Forward.

01:13:45.310 --> 01:13:49.480
And again, using target action,
connect them to the web view.

01:13:56.030 --> 01:14:02.930
And finally, I'm going to set the resize
flags on these widgets.

01:14:09.280 --> 01:14:11.200
That's it.

01:14:11.200 --> 01:14:12.450
I haven't written any code.

01:14:12.570 --> 01:14:14.230
Nothing's compiled.

01:14:14.320 --> 01:14:16.200
Let's go ahead and test this.

01:14:16.200 --> 01:14:22.890
How about checking out Apple's site?

01:14:40.310 --> 01:14:42.040
So Scott's going to sign
for one of these G5s,

01:14:42.040 --> 01:14:42.460
I hope.

01:14:42.460 --> 01:14:48.280
So back and forward, these buttons work.

01:14:48.410 --> 01:14:50.800
You'll notice, though,
a few things aren't quite right.

01:14:50.830 --> 01:14:55.330
The URL in the text field
doesn't update as I navigate.

01:14:57.540 --> 01:15:02.960
And the back/forward buttons don't
disable and enable as I'd expect.

01:15:03.010 --> 01:15:06.410
Now we all know this point,
to really make an application work,

01:15:06.410 --> 01:15:08.430
you write lots of glue code.

01:15:08.560 --> 01:15:10.610
Glue code be gone.

01:15:13.300 --> 01:15:15.800
So I'm going to add these features,
enable and disable the

01:15:15.800 --> 01:15:19.050
back/forward button,
update the URL in the text field,

01:15:19.050 --> 01:15:22.960
and also show a progress indicator
without writing any code.

01:15:23.010 --> 01:15:26.630
And I'm going to do this using
the new controller technology.

01:15:27.530 --> 01:15:31.840
So the first thing we'll
do is create a controller.

01:15:32.220 --> 01:15:35.640
Now going back to the text field,
what I'd like to do is share

01:15:35.640 --> 01:15:39.770
the same underlying URL for the
web view and for the text field.

01:15:39.830 --> 01:15:43.060
As I navigate, I'd like to update
that in the text field.

01:15:43.170 --> 01:15:47.760
So we're going to bind the URL to
both the web view and the text field.

01:15:47.830 --> 01:15:51.520
But first let me disconnect
the target action.

01:15:52.410 --> 01:15:55.200
Then I'm going to go to
the new bindings inspector.

01:15:55.290 --> 01:16:00.220
And this lets me bind properties to
the various elements that are selected.

01:16:00.330 --> 01:16:05.410
In this case, I'm going to bind the
value of the text field

01:16:06.200 --> 01:16:08.810
to the mainframe URL.

01:16:09.000 --> 01:16:11.410
Now for the back and forward buttons,

01:16:11.890 --> 01:16:16.000
I'm going to associate their
enabled state with properties on

01:16:16.000 --> 01:16:21.070
the web view that tell me whether
or not I can go back or forward.

01:16:28.070 --> 01:16:31.570
And then finally,
I'd like to add a progress indicator

01:16:31.810 --> 01:16:34.200
so I know when the page is loading.

01:16:38.540 --> 01:16:42.570
And we'll make this progress
indicator determinant.

01:16:42.610 --> 01:16:45.730
Its value will go from 0 to 1.

01:16:48.210 --> 01:16:50.350
And let's bind it.

01:16:50.430 --> 01:16:53.630
Its value again will come
from the web view controller,

01:16:53.730 --> 01:16:55.780
estimated progress.

01:16:55.870 --> 01:16:58.210
We set the resize flags.

01:16:58.770 --> 01:16:59.690
Now we have another browser.

01:16:59.840 --> 01:17:03.130
Again, no glue code, nothing compiled.

01:17:03.210 --> 01:17:05.700
Let's test it.

01:17:05.700 --> 01:17:14.180
This time, I'm going to go to the
mandatory Pixar site.

01:17:19.900 --> 01:17:22.480
And let me emphasize,
the content you see here is exactly the

01:17:22.480 --> 01:17:25.140
same content you would see in Safari.

01:17:25.270 --> 01:17:27.570
Let's check out a trailer.

01:17:50.000 --> 01:17:54.110
So the back and forward buttons
enable and disable as we expect and

01:17:54.110 --> 01:17:58.700
as I navigate the URL is correctly
reflected in the text field.

01:17:59.380 --> 01:18:02.160
That's the WebKit and the
controller technology.

01:18:02.210 --> 01:18:04.350
Thank you.

01:18:13.010 --> 01:18:15.040
There are more in-depth
sessions on both of these areas,

01:18:15.110 --> 01:18:19.000
so I encourage you strongly to go out
and check out the more in-depth sessions.

01:18:19.040 --> 01:18:19.470
Thanks, Scott.

01:18:20.580 --> 01:18:21.730
Thanks, Richard.

01:18:21.910 --> 01:18:23.360
All right.

01:18:24.380 --> 01:18:25.980
So that's the architecture.

01:18:26.010 --> 01:18:29.730
The web kit is available
to both Carbon and Cocoa.

01:18:31.480 --> 01:18:36.660
It's available on both
Jaguar and Panther,

01:18:36.700 --> 01:18:38.840
and it's available today.

01:18:38.840 --> 01:18:42.160
You can download the SDK,
the 1.0 SDK for Jaguar today

01:18:42.160 --> 01:18:44.400
and ship your apps on it.

01:18:44.520 --> 01:18:47.700
So what we've done is we've
taken Safari and we've opened up

01:18:47.760 --> 01:18:51.150
the engine and given it to you
to embed in your applications.

01:18:51.240 --> 01:18:53.000
With that,
I'd like to turn it back to Bertrand.

01:18:53.050 --> 01:18:53.900
Thanks.

01:18:53.900 --> 01:18:57.700
Thanks Scott.

01:19:01.590 --> 01:19:04.850
So we are running a little late
and there's so much in Pantfer,

01:19:04.940 --> 01:19:11.430
so I thought I'd take a few things and
put them together in the Pantfer Parade.

01:19:11.750 --> 01:19:16.340
So ladies and gentlemen,
the Pantfer Parade!

01:19:22.800 --> 01:19:25.250
Okay, enough of that.

01:19:25.260 --> 01:19:29.350
So the first technology
I chose is ColorSync.

01:19:29.350 --> 01:19:31.810
ColorSync is about color correct images.

01:19:31.810 --> 01:19:35.970
And it's really a shame if you go
to a real life safari in Africa,

01:19:36.110 --> 01:19:39.480
take this picture of this lion,
and you open it with several

01:19:39.480 --> 01:19:43.220
apps and it doesn't look the
same in the different apps.

01:19:43.220 --> 01:19:46.700
So it's really a shame because
we have this great technology,

01:19:46.700 --> 01:19:50.120
ColorSync, and we've made it really
fast over the last few years.

01:19:50.120 --> 01:19:53.340
So that there's no excuse
for not using ColorSync.

01:19:53.340 --> 01:19:56.820
Now, I know that many of you have not
used ColorSync because it was a

01:19:56.820 --> 01:19:59.990
little too hard because by default,
ColorSync was off.

01:19:59.990 --> 01:20:01.640
We've changed the default.

01:20:01.640 --> 01:20:03.360
Now ColorSync is on.

01:20:03.450 --> 01:20:08.200
And so you automatically get the
benefits of ColorSync and you can--if

01:20:08.200 --> 01:20:13.220
you have a color-specific application,
turn it off with a little more code now.

01:20:13.220 --> 01:20:17.980
And QuickTime Graphics Importer
supports that philosophy as well.

01:20:17.980 --> 01:20:21.040
Another long-time technology
we've had is AppleScript.

01:20:21.540 --> 01:20:25.930
AppleScript is a blessed technology
for our end users who want to

01:20:26.080 --> 01:20:28.420
automate certain workflows.

01:20:28.420 --> 01:20:32.940
We also use that in a lot
of the publishing space.

01:20:32.980 --> 01:20:34.920
So there's two sides to AppleScript.

01:20:34.920 --> 01:20:39.760
There's a supplier side providing
scriptability and there's the

01:20:39.760 --> 01:20:42.790
consumer side using scriptability.

01:20:43.320 --> 01:20:45.840
For the supplier side,
obviously you need to make your

01:20:45.840 --> 01:20:47.420
application Apple Scriptable.

01:20:47.420 --> 01:20:51.440
And that's not too much work,
but you have to go do that.

01:20:51.520 --> 01:20:54.570
Now for the consumer side,
what's really beautiful is that

01:20:54.570 --> 01:20:58.280
you can use and leverage the other
applications that are Apple Scriptable.

01:20:58.280 --> 01:21:01.660
And we've made more and more
applications Apple Scriptable.

01:21:01.660 --> 01:21:05.660
We've enhanced the terminology
in all those applications.

01:21:05.680 --> 01:21:10.030
We also added a facility to do
UI scripting so that even if you haven't

01:21:10.030 --> 01:21:14.990
made your application Scriptable,
it will work with Apple Script.

01:21:15.060 --> 01:21:17.260
Other technology, Veclib.

01:21:17.310 --> 01:21:19.840
Veclib is fast math.

01:21:19.980 --> 01:21:22.240
It's really, really super fast math.

01:21:22.260 --> 01:21:24.610
It's used in all kinds of contexts.

01:21:24.610 --> 01:21:27.160
It's used for linear algebra,
so of course something

01:21:27.170 --> 01:21:28.700
like Mathematica uses that.

01:21:28.760 --> 01:21:32.710
But something that's not obvious
is that even our little junk mail

01:21:32.710 --> 01:21:35.120
filter in mail uses linear algebra.

01:21:35.680 --> 01:21:39.060
It's used for signal processing,
all those FFTs for audio,

01:21:39.410 --> 01:21:40.840
big nums for crypto.

01:21:40.840 --> 01:21:45.520
And what we've done in Panfer,
we've optimized Veclib for the G5.

01:21:45.640 --> 01:21:50.260
Now we added another technology
that we called V-Image,

01:21:50.440 --> 01:21:53.460
which is now fast math,
but for 2D arrays.

01:21:53.560 --> 01:21:55.150
This is for graphics, of course.

01:21:55.230 --> 01:21:59.190
It's for doing convolution operations,
morphology operations,

01:21:59.280 --> 01:22:01.850
all those things that I don't
know what they really,

01:22:01.850 --> 01:22:02.440
really mean.

01:22:02.440 --> 01:22:04.310
Or I don't understand
the math underneath them.

01:22:04.410 --> 01:22:05.680
But what I can say is that it's really,
really fast math.

01:22:05.680 --> 01:22:07.020
What I can show you is some pictures.

01:22:07.020 --> 01:22:08.340
This is an example of blur.

01:22:08.490 --> 01:22:10.260
Hopefully you can see it's blurred.

01:22:10.440 --> 01:22:12.300
An example of embossing.

01:22:13.660 --> 01:22:16.610
Another technology that we have is DVD.

01:22:16.700 --> 01:22:19.240
We have had the DVD player for a while.

01:22:19.240 --> 01:22:23.750
We've made that DVD player functionality
available to your application.

01:22:23.750 --> 01:22:27.580
So if you want to embed usage
of a DVD in your application,

01:22:27.710 --> 01:22:33.350
for example, for training or whatever,
now you can do it by using those APIs.

01:22:34.510 --> 01:22:37.610
Another technology is, of course,
QuickTime.

01:22:37.740 --> 01:22:39.610
We've seen a notary shot.

01:22:39.620 --> 01:22:42.330
And QuickTime is embedded in Mac OS X.

01:22:42.330 --> 01:22:44.670
We embed the latest QuickTime.

01:22:44.670 --> 01:22:48.820
We have focused for this
release a lot on infrastructure.

01:22:48.840 --> 01:22:52.690
A lot of you have asked to
have threat-safe QuickTime.

01:22:52.780 --> 01:22:56.520
And now in Panther,
QuickTime will be threat-safe for

01:22:56.520 --> 01:22:59.840
static images and for playing movies.

01:22:59.880 --> 01:23:03.280
We have full support for Unicode.

01:23:03.380 --> 01:23:07.540
And we've gutted the audio
infrastructure underneath QuickTime to

01:23:07.540 --> 01:23:09.600
replace that with Core Audio.

01:23:09.600 --> 01:23:11.240
Now that brings me to Core Audio.

01:23:11.240 --> 01:23:14.100
Core Audio has been a wonderful
technology on Mac OS X.

01:23:14.100 --> 01:23:17.740
One reason is that it has
been conceived from the ground

01:23:17.850 --> 01:23:19.820
up to be a great X citizen.

01:23:19.820 --> 01:23:22.070
Now we're adding features to Core Audio.

01:23:22.190 --> 01:23:23.990
We're adding surround support.

01:23:24.080 --> 01:23:27.900
And we're enhancing the real-time
effects and want to encourage all

01:23:27.900 --> 01:23:31.200
of you to bring new audio units,
which is real-time effects,

01:23:31.330 --> 01:23:32.620
to the platform.

01:23:32.620 --> 01:23:32.670
Thank you.

01:23:33.420 --> 01:23:35.020
We are supporting new formats.

01:23:35.360 --> 01:23:38.290
And we make it really, really,
really fast.

01:23:38.450 --> 01:23:40.610
It has very small latency.

01:23:40.700 --> 01:23:44.240
And it also consumes
very little CPU to play.

01:23:44.240 --> 01:23:47.860
And, for example, on Gigahertz PowerBook,
you can play AAC,

01:23:47.860 --> 01:23:50.480
which is what we use for
the Apple Music Store,

01:23:50.480 --> 01:23:53.560
of course,
with less than a percent of the CPU.

01:23:53.560 --> 01:23:58.510
So that means you have 99% of the
CPU for the rest of your application.

01:24:00.140 --> 01:24:02.610
Another technology that we
have is a window manager,

01:24:02.720 --> 01:24:04.250
Quartz Extreme.

01:24:04.260 --> 01:24:08.810
The vision behind Quartz and Quartz
Extreme is to have Hollywood effects

01:24:09.100 --> 01:24:11.000
right on everyone's desktop.

01:24:11.040 --> 01:24:12.920
And we are really moving
in that direction.

01:24:12.990 --> 01:24:16.000
And some of the features that
you saw demo this morning,

01:24:16.000 --> 01:24:20.000
like Exposé,
totally leverage this kind of facility.

01:24:20.090 --> 01:24:24.220
Now, what we've done,
Core Graphics is the API to Quartz,

01:24:24.220 --> 01:24:27.000
and we have rounded it a little more.

01:24:27.000 --> 01:24:30.000
We've added a lot of the functions
that you've been requesting.

01:24:30.130 --> 01:24:33.100
So, little functions here and
there to do shadowing,

01:24:33.150 --> 01:24:35.990
to screen scrap, you know,
all those things.

01:24:36.000 --> 01:24:40.280
Now, we also added some
brand new areas of API,

01:24:40.280 --> 01:24:46.000
notably the PostScript to PDF converter,
and some APIs to deal with PDF.

01:24:46.000 --> 01:24:50.000
Both PDF in terms of
the document structure.

01:24:50.000 --> 01:24:54.960
We've all those nodes, the document tree,
and with PDF in terms of what gets drawn,

01:24:54.980 --> 01:24:55.980
the pages.

01:24:56.000 --> 01:24:59.000
So, you can access the pages
that are getting drawn.

01:24:59.000 --> 01:25:02.910
Another technology in the
graphics land is OpenGL.

01:25:03.000 --> 01:25:05.780
Now, OpenGL is, of course,
hardware accelerated.

01:25:06.020 --> 01:25:08.990
It's 3D imaging, and it's used for games.

01:25:09.000 --> 01:25:12.000
I mean,
most of the common games use OpenGL.

01:25:12.000 --> 01:25:15.040
But one thing that I'd like
you to think about is that

01:25:15.040 --> 01:25:17.000
OpenGL is not just for games.

01:25:17.000 --> 01:25:20.000
You can use OpenGL to your
advantage for your application.

01:25:20.000 --> 01:25:24.000
You can use OpenGL to get to the
next level of great user interface.

01:25:24.050 --> 01:25:29.000
And my favorite application, of course,
is Keynote that totally leverages OpenGL.

01:25:30.290 --> 01:25:35.360
Now the last technology that
I have is world readiness.

01:25:35.410 --> 01:25:39.220
Now we've had an effort since
the inception of Mac OS X to

01:25:39.280 --> 01:25:41.720
be a great global citizen.

01:25:41.720 --> 01:25:44.610
We have devised this technology
that we call app packaging,

01:25:44.740 --> 01:25:48.560
which is really fundamentally
an object-oriented concept.

01:25:48.560 --> 01:25:53.480
All the languages supported by your
application go along the application.

01:25:53.540 --> 01:25:55.720
We use that for all kinds of plugins.

01:25:55.720 --> 01:25:58.370
Our frameworks are packaged that way.

01:25:58.370 --> 01:26:01.740
And I am very pleased that
all of you have adopted that

01:26:01.810 --> 01:26:03.820
packaging in your applications.

01:26:03.820 --> 01:26:06.950
So our users out there in
the world really enjoy that.

01:26:07.020 --> 01:26:10.300
We are doing just more of it
with more support for locales,

01:26:10.370 --> 01:26:11.920
languages, and font.

01:26:11.920 --> 01:26:15.420
It's easy to internationalize on 10.

01:26:15.430 --> 01:26:18.920
So this is a very,
very quick panther parade.

01:26:18.920 --> 01:26:23.500
Ladies and gentlemen,
thank you for going along

01:26:23.500 --> 01:26:24.560
that panther parade.

01:26:24.940 --> 01:26:29.440
And now I'm going to conclude.

01:26:29.440 --> 01:26:35.880
So we've gone through a tour of a lot
of the developer features of panther.

01:26:35.880 --> 01:26:43.920
And the transition from nine is over
for all of us for development purposes.

01:26:44.070 --> 01:26:44.530
Thank you.

01:26:44.530 --> 01:26:47.220
Thank you for bringing thousands
of applications onto the

01:26:47.220 --> 01:26:50.320
planet and onto the platform.

01:26:50.320 --> 01:26:54.560
Now we have some next challenges.

01:26:54.560 --> 01:26:54.560
What are the next challenges?

01:26:54.940 --> 01:26:57.340
What are the next
challenges for all of us?

01:26:57.340 --> 01:26:59.080
It's to strive for excellence.

01:26:59.080 --> 01:27:01.440
What do I mean striving for excellence?

01:27:01.580 --> 01:27:04.250
The number one thing that
I mean is performance.

01:27:04.330 --> 01:27:07.950
We should all make all our
applications more performings.

01:27:07.950 --> 01:27:10.780
There's always some extra
speed to gain there.

01:27:10.780 --> 01:27:13.690
And the key to do that is to think 10,
not 9.

01:27:13.760 --> 01:27:18.120
A lot of the codes that we have
originated on 9 and was moved from 9.

01:27:18.120 --> 01:27:21.490
We need to think,
get rid of all the dependencies on 9,

01:27:21.490 --> 01:27:24.710
all the conceptual
dependencies on 9 and think 10,

01:27:24.710 --> 01:27:25.820
10, 10.

01:27:25.820 --> 01:27:29.240
We have great performance tools that
should be used and that can be used

01:27:29.240 --> 01:27:31.200
to address the performance issues.

01:27:31.240 --> 01:27:33.920
And performance does make a difference.

01:27:34.040 --> 01:27:36.190
Safari has a great streamlined UI.

01:27:36.390 --> 01:27:38.120
It has snapback and all those things.

01:27:38.270 --> 01:27:41.060
But fundamentally, it's fast, fast, fast.

01:27:41.190 --> 01:27:42.700
That's what users love.

01:27:42.700 --> 01:27:44.340
Now fast is not everything.

01:27:44.440 --> 01:27:46.550
Of course, there's functionality.

01:27:46.550 --> 01:27:48.870
And one of the keys to add value,
of course,

01:27:48.980 --> 01:27:51.820
to differentiate your application
from your competitors.

01:27:51.820 --> 01:27:56.800
And one way to do that is to adopt and
integrate the basic system services,

01:27:56.820 --> 01:27:58.610
the basic system frameworks.

01:27:58.680 --> 01:28:02.860
They give you an extra bit of lift, OK,
to your application.

01:28:02.860 --> 01:28:05.480
And you can focus on the higher
level of your application,

01:28:05.480 --> 01:28:09.560
the higher level functionality rather
than having to reinvent the wheel.

01:28:09.560 --> 01:28:12.210
It's more value with less code.

01:28:12.390 --> 01:28:15.350
I hope you will enjoy
our pre-release of Manfr.

01:28:15.350 --> 01:28:16.520
We've worked hard for it.

01:28:16.780 --> 01:28:17.100
Thank you.