WEBVTT

00:00:26.660 --> 00:00:27.930
Good morning, everybody.

00:00:27.990 --> 00:00:30.980
I hope you guys had a nice lunch,
a good nap, or a session,

00:00:30.980 --> 00:00:33.060
depending on how awake you were.

00:00:33.140 --> 00:00:37.090
And hey, that wasn't a joke.

00:00:38.360 --> 00:00:42.090
So we're here going to talk about
WebObjects and creating web services.

00:00:42.150 --> 00:00:44.340
This is session 6.2.4.

00:00:44.360 --> 00:00:48.790
If any of the above sounded wrong,
you're probably in the wrong room.

00:00:51.080 --> 00:00:54.390
As our nice,
friendly voice of God introduced me,

00:00:54.400 --> 00:00:55.240
I'm Karl Hsu.

00:00:55.240 --> 00:00:58.450
I work in WebObjects engineering,
and I'll be doing the first

00:00:58.460 --> 00:00:59.800
half of this presentation.

00:00:59.800 --> 00:01:03.180
The second half of the presentation
will be done by my compatriot,

00:01:03.180 --> 00:01:04.520
Ron Lue-Saang.

00:01:04.630 --> 00:01:07.190
He's the friendly Jamaican-Chinese guy.

00:01:07.990 --> 00:01:11.430
So we have to have the obligatory
what you will learn in this

00:01:11.460 --> 00:01:14.100
session slide because...

00:01:14.380 --> 00:01:15.790
They told us.

00:01:15.940 --> 00:01:16.400
All right.

00:01:16.540 --> 00:01:17.300
So web services.

00:01:17.300 --> 00:01:20.290
We're going to talk very briefly
about what a web service is.

00:01:20.320 --> 00:01:23.700
In our case,
when we talk about web services,

00:01:23.700 --> 00:01:25.620
we're going with a stricter definition.

00:01:25.620 --> 00:01:29.080
I mean, technically,
web services is anything where

00:01:29.220 --> 00:01:33.190
you invoke services over the web,
but we're going to specifically talk

00:01:33.190 --> 00:01:36.260
about the standards-based web services
that WebObjects provides and uses.

00:01:36.260 --> 00:01:40.480
We'll talk a little bit about
practical applications of web services,

00:01:40.670 --> 00:01:46.520
why you would use web services in
lieu of just a regular HTTP Connect or

00:01:46.520 --> 00:01:49.810
Corbo or anything else like that.

00:01:50.170 --> 00:01:52.260
Then, finally,
we get to the meat of the matter.

00:01:52.320 --> 00:01:54.830
We'll talk about WebObjects
and web services,

00:01:54.840 --> 00:01:58.430
WebObjects as a server,
WebObjects as a client, and finally,

00:01:58.430 --> 00:02:03.100
about the crown jewels for web services
and WebObjects direct to web services.

00:02:03.190 --> 00:02:06.300
Hopefully, that will be a relief to those
of you who have been going to the

00:02:06.300 --> 00:02:10.190
WebObjects sessions and not actually
hearing a whole lot about WebObjects.

00:02:11.130 --> 00:02:15.090
So in a single sentence,
what are web services?

00:02:15.500 --> 00:02:19.880
Web services are remote procedure
calls for the internet era,

00:02:19.970 --> 00:02:21.750
and they're XML-based.

00:02:21.810 --> 00:02:24.220
The goal, I think,
in that one sentence was to hit as many

00:02:24.230 --> 00:02:26.220
little buzzwords as you possibly can.

00:02:26.220 --> 00:02:29.480
It'll sound great to managers, IT people.

00:02:29.480 --> 00:02:31.410
It's fantastic.

00:02:31.590 --> 00:02:37.410
There are a bunch of standards and specs
in the official web services sphere.

00:02:37.630 --> 00:02:41.600
There's description of the
web service in the WSDL,

00:02:41.720 --> 00:02:44.670
which is the
Web Services Description Language.

00:02:44.890 --> 00:02:48.860
There's discovery of a web service,
how you find what web services

00:02:48.860 --> 00:02:51.900
exist and how do you find
the information about them,

00:02:51.900 --> 00:02:53.900
and that's the UDDI,
which stands for something

00:02:53.900 --> 00:02:54.820
I can't remember.

00:02:55.080 --> 00:03:00.370
Universal Discovery Definition
and Interface or Interrogation,

00:03:00.370 --> 00:03:02.340
something like that.

00:03:03.010 --> 00:03:03.850
Nobody calls it that.

00:03:03.920 --> 00:03:05.100
Nobody remembers what it's called.

00:03:05.100 --> 00:03:06.900
Everybody just says UDDI.

00:03:06.900 --> 00:03:09.890
So when you hear that
buzzword floating around,

00:03:09.900 --> 00:03:10.900
you know what it is.

00:03:10.900 --> 00:03:13.890
Ah, that's discovery.

00:03:13.900 --> 00:03:16.740
The encoding of the web service itself.

00:03:16.930 --> 00:03:20.670
When you send XML back and forth,
you have to agree on a particular

00:03:20.670 --> 00:03:21.890
way that the XML will look.

00:03:21.900 --> 00:03:24.750
That's SOAP,
the Simple Object Access Protocol.

00:03:24.900 --> 00:03:26.900
And finally, the transport.

00:03:26.900 --> 00:03:31.900
When you send the XML and receive it,
you have to do it over something,

00:03:31.910 --> 00:03:33.900
over the wire, whatever.

00:03:33.900 --> 00:03:35.900
And those vary.

00:03:35.900 --> 00:03:37.900
That's probably the most flexible
part about the whole thing.

00:03:37.900 --> 00:03:41.020
But the two most common,
the two that are defined

00:03:41.020 --> 00:03:44.900
in the spec itself,
are HTTP and SMTP.

00:03:44.900 --> 00:03:48.910
WebObjects in particular
mostly deals with HTTP.

00:03:49.690 --> 00:03:51.990
So let's go a little bit over
the parts of a web service.

00:03:52.050 --> 00:03:54.640
When people talk about a web service,
they typically talk

00:03:54.910 --> 00:03:56.400
about three major parts.

00:03:56.470 --> 00:04:00.320
There's the WSDL, and the WSDL, the WSDL,
is a contract.

00:04:00.550 --> 00:04:02.840
It defines everything
about your web service.

00:04:02.990 --> 00:04:06.940
You can sort of think about it
as the interface to a class.

00:04:07.100 --> 00:04:11.110
When you publish a web service,
you publish the WSDL to it,

00:04:11.110 --> 00:04:16.360
and that's what the client uses to
know how to talk to the web service.

00:04:16.430 --> 00:04:20.210
There are a number of tools out there
that can also use the WSDL to generate

00:04:20.210 --> 00:04:23.970
stub classes and so on and so forth.

00:04:24.080 --> 00:04:28.690
The service itself consists of a set of
operations and invocation information.

00:04:28.700 --> 00:04:33.340
It's the, again, in an analogy,
it's the class itself.

00:04:33.550 --> 00:04:35.990
It can hold state or
whatever you need it to do.

00:04:36.060 --> 00:04:40.990
The operations exist within a service.

00:04:41.540 --> 00:04:43.240
That's something to keep in mind.

00:04:43.240 --> 00:04:46.900
A single service can
have multiple operations.

00:04:46.900 --> 00:04:49.290
It's sort of a grouping,
because a service exists

00:04:49.350 --> 00:04:50.790
at a certain point.

00:04:50.800 --> 00:04:56.020
It exists at a certain URL,
and then you can invoke multiple

00:04:56.020 --> 00:04:57.480
operations at that point.

00:04:57.480 --> 00:05:01.040
Those are analogous to methods.

00:05:01.610 --> 00:05:02.850
Let's take a quick look at the WSDL.

00:05:03.010 --> 00:05:05.000
It's the Web Services Definition
Language.

00:05:05.000 --> 00:05:07.970
It's also defined in XML,
and it basically defines everything

00:05:08.060 --> 00:05:10.840
you need to invoke a web service.

00:05:11.000 --> 00:05:14.000
It's the structure of
the web service itself.

00:05:14.160 --> 00:05:17.500
It defines data types that
are used in the web services,

00:05:17.580 --> 00:05:19.960
not only the standard
set of data types - ints,

00:05:20.050 --> 00:05:24.990
strings, dictionaries,
whatnot - but also custom data types

00:05:25.000 --> 00:05:28.460
that you may have for your web service.

00:05:28.550 --> 00:05:31.320
EO Global IDs, whatever.

00:05:31.450 --> 00:05:37.030
It defines message types - requests,
responses, error messages,

00:05:37.150 --> 00:05:39.940
anything that you might send,
what you're supposed to send,

00:05:39.940 --> 00:05:41.770
and what you might get back.

00:05:41.870 --> 00:05:44.470
It talks about the available
operations on that web service.

00:05:44.590 --> 00:05:45.900
What can you do with it?

00:05:46.020 --> 00:05:47.380
Can I add something?

00:05:47.380 --> 00:05:49.380
Can I--

00:05:49.590 --> 00:05:52.210
You know, invoke a particular method
that will return some status,

00:05:52.210 --> 00:05:52.750
whatever.

00:05:52.800 --> 00:05:54.000
It's all in there.

00:05:54.070 --> 00:05:56.300
It defines where that
service is actually located,

00:05:56.330 --> 00:06:01.190
the URL or address that you
would invoke that web service at.

00:06:01.200 --> 00:06:04.300
And finally,
it talks about the transport bindings.

00:06:04.520 --> 00:06:08.820
Most of the time,
for WebObjects in particular,

00:06:08.820 --> 00:06:08.820
that will be HTTP.

00:06:13.450 --> 00:06:14.900
Let's talk a bit about SOAP.

00:06:14.960 --> 00:06:18.580
It's the Simple Object Access Protocol.

00:06:19.380 --> 00:06:21.800
This is basically the protocol.

00:06:21.800 --> 00:06:25.840
When you send the XML across the wire,
you can think of this a little bit

00:06:26.300 --> 00:06:28.960
like the meta-schema for what you're
actually going to send across.

00:06:28.960 --> 00:06:34.800
It defines the language in which
you will define your web service.

00:06:34.800 --> 00:06:39.500
It splits up the message layout itself.

00:06:39.500 --> 00:06:44.790
So each SOAP envelope will then have a
header in which you can stuff ancillary

00:06:44.790 --> 00:06:47.920
information about the web service itself.

00:06:48.060 --> 00:06:52.430
In a particular invocation, for instance,
it might include routing information

00:06:52.450 --> 00:06:54.450
or session-based information.

00:06:54.460 --> 00:06:58.950
And then the body itself,
which is where the bulk of

00:06:58.950 --> 00:07:02.830
the data that's going back and
forth across the wire is kept.

00:07:02.960 --> 00:07:08.050
The SOAP standard defines
several transport protocols,

00:07:08.050 --> 00:07:11.190
HTTP and SMTP,
but it leaves it open for plug-in.

00:07:11.200 --> 00:07:14.190
They're not tied to a
particular protocol.

00:07:14.190 --> 00:07:17.820
You could conceivably write a web
service that required somebody to

00:07:17.860 --> 00:07:21.120
write down the XML on a piece of paper,
run to your neighbor's house,

00:07:21.120 --> 00:07:23.570
and give it to them and run back.

00:07:23.690 --> 00:07:29.370
It wouldn't be very effective,
but it would technically be within spec.

00:07:29.610 --> 00:07:31.980
Just to show you,
just because it's a spec

00:07:32.050 --> 00:07:34.480
doesn't mean that it works.

00:07:34.830 --> 00:07:37.960
It's, you know, a lot like statistics.

00:07:38.240 --> 00:07:40.640
It supports synchronous
and asynchronous modes.

00:07:40.810 --> 00:07:43.340
You can do the standard sort of HTTP way.

00:07:43.340 --> 00:07:45.690
You send a response.

00:07:46.030 --> 00:07:49.500
The service does whatever it's doing,
and then it sends you the - I'm sorry,

00:07:49.500 --> 00:07:51.780
you send a request.

00:07:55.740 --> 00:07:59.700
I'm sorry, I'm not worthy.

00:07:59.700 --> 00:08:03.580
You send a request, it gets processed,
and it sends a response.

00:08:03.680 --> 00:08:07.420
There are also asynchronous
modes in which the server may

00:08:07.420 --> 00:08:11.890
poll a client for a request or
for data and so on and so forth.

00:08:12.480 --> 00:08:14.250
An interesting thing at this
point is that there are two

00:08:14.250 --> 00:08:16.090
major styles of web service.

00:08:16.260 --> 00:08:19.500
There's an RPC style of web service,
and there's a document

00:08:19.500 --> 00:08:20.750
style of web service.

00:08:20.890 --> 00:08:24.800
Most people, I think,
would like to be using an RPC style.

00:08:24.800 --> 00:08:28.910
The RPC style is invoked very
much like a remote procedure call.

00:08:29.080 --> 00:08:30.460
That would be RPC.

00:08:30.780 --> 00:08:34.700
You invoke a method,
you pass arguments in a particular order,

00:08:34.700 --> 00:08:36.690
and you get back a response.

00:08:36.740 --> 00:08:39.040
Document style is a
little bit more flexible,

00:08:39.070 --> 00:08:40.110
but it's also more annoying.

00:08:40.110 --> 00:08:40.670
It's more work.

00:08:40.810 --> 00:08:43.690
You essentially say,
"I'm going to send you XML soup

00:08:43.750 --> 00:08:46.950
in some privately-defined format.

00:08:46.990 --> 00:08:50.860
You muck with it and send me back more
XML in a privately-defined format,

00:08:50.870 --> 00:08:55.130
and we'll kind of negotiate it
there." This actually negates

00:08:55.210 --> 00:08:59.160
a large point of web services,
which is easy negotiation and

00:08:59.160 --> 00:09:03.360
easy understanding of what you're
actually sending and receiving.

00:09:04.170 --> 00:09:06.600
So this is a really quick example.

00:09:06.600 --> 00:09:10.080
I mean, you can sort of see,
if I wanted to find an RPC service,

00:09:10.190 --> 00:09:13.570
it's very analogous to
a class and a method.

00:09:13.700 --> 00:09:16.840
You receive optional arguments,
you return something.

00:09:16.840 --> 00:09:22.290
In the case of a document service,
you just get, basically, in our case,

00:09:22.290 --> 00:09:25.920
you would get a DOM tree,
and you would have to return

00:09:25.960 --> 00:09:27.770
something very similar.

00:09:29.430 --> 00:09:32.480
So, problems solved by web services.

00:09:32.740 --> 00:09:38.100
The major bonus of web service is that
it's very clean information transfer.

00:09:38.130 --> 00:09:42.690
There are a number of services out there,
Watson, for instance, where,

00:09:42.880 --> 00:09:45.110
at least initially,
I'm not sure about now,

00:09:45.210 --> 00:09:47.300
the whole point was that
it would screen scrape.

00:09:47.300 --> 00:09:49.500
It would hit a website,
get back the HTML,

00:09:49.500 --> 00:09:53.880
and it would have to then parse its way
through the HTML looking just for the

00:09:53.880 --> 00:09:56.950
information that you're looking for.

00:09:57.150 --> 00:10:01.200
That's bad because it means--it
means that if they decide to

00:10:01.230 --> 00:10:04.600
change the look of the site,
if they say, "You know what?

00:10:04.600 --> 00:10:05.600
We're gonna do something nice.

00:10:05.600 --> 00:10:06.980
We're gonna put an ad here.

00:10:07.100 --> 00:10:10.100
We're gonna move this search field
around," or something like that,

00:10:10.100 --> 00:10:11.100
you're totally bored, right?

00:10:11.100 --> 00:10:13.090
And sites change all the time.

00:10:13.100 --> 00:10:17.100
Part of the point is that, you know,
the display is fluid.

00:10:17.100 --> 00:10:22.090
It also means that it doesn't
dictate any sort of display or usage.

00:10:22.240 --> 00:10:26.060
You can expose the information,
you expose the service,

00:10:26.140 --> 00:10:28.590
and the client can do
whatever they want for it.

00:10:28.740 --> 00:10:30.600
They can present it
directly back to the user.

00:10:30.600 --> 00:10:32.100
They can aggregate it.

00:10:32.100 --> 00:10:34.770
They can do whatever you want.

00:10:35.720 --> 00:10:40.840
Another important thing is that
it's implementation dependent.

00:10:40.930 --> 00:10:46.400
The spec tries to be as clean as possible
so that the server doesn't have to

00:10:46.540 --> 00:10:49.260
know anything at all about the clients.

00:10:49.360 --> 00:10:53.250
And this is what really separates it
in large part from custom solutions,

00:10:53.390 --> 00:10:58.500
things where you just agree on a private
format between you and the client.

00:10:58.610 --> 00:11:00.640
In this case,
you don't need to know anything

00:11:00.640 --> 00:11:04.000
about the client if you're
the server or vice versa.

00:11:04.000 --> 00:11:07.420
It tries to be fluid in a
way that the spec tries to

00:11:07.510 --> 00:11:09.480
encompass pretty much anything.

00:11:09.520 --> 00:11:13.000
So you can have WebObjects written
in Java running on Mac OS X,

00:11:13.120 --> 00:11:17.750
talking to Pearl running on Linux,
or C# running in a .NET-- as a

00:11:17.870 --> 00:11:20.500
.NET client on a Windows machine.

00:11:20.500 --> 00:11:22.500
And you don't have to know what that is.

00:11:22.500 --> 00:11:25.000
As long as you can talk
the web services talk,

00:11:25.000 --> 00:11:28.500
it goes back and forth,
and everybody's happy.

00:11:28.510 --> 00:11:30.810
And finally,
one of the reasons it was created this

00:11:30.890 --> 00:11:32.390
way is that it's firewall-friendly.

00:11:32.400 --> 00:11:35.900
Unlike older iterations,
of things like Corbo and such,

00:11:35.900 --> 00:11:37.720
you don't have to open
up any funny ports.

00:11:37.910 --> 00:11:40.710
You don't have to do anything
interesting to make your system

00:11:40.710 --> 00:11:42.900
administrator really unhappy.

00:11:42.900 --> 00:11:45.900
You basically punch a hole.

00:11:45.900 --> 00:11:47.900
You know, you no longer have to punch
a hole through anything.

00:11:47.900 --> 00:11:50.030
You can just route it right
through your web server the

00:11:50.070 --> 00:11:51.400
way that you would normally.

00:11:51.400 --> 00:11:54.400
And because it fits that well,
that well onto this sort

00:11:54.400 --> 00:11:59.400
of Internet standard,
it makes things much easier to use.

00:11:59.400 --> 00:12:03.150
The best part about it, though,
is that it's human-readable.

00:12:06.410 --> 00:12:08.690
This actually isn't a
very complicated thing.

00:12:08.700 --> 00:12:11.550
I think the best description that
I've ever heard of this is the fact

00:12:11.650 --> 00:12:16.420
that the SOAP XML is human-readable
does not actually guarantee

00:12:16.420 --> 00:12:19.410
that it is readable by humans.

00:12:20.250 --> 00:12:25.640
So you could, in fact,
you could conceivably encrypt

00:12:25.640 --> 00:12:26.530
it or something like that.

00:12:26.530 --> 00:12:28.100
It doesn't really matter.

00:12:28.100 --> 00:12:30.550
I mean, the goal is that you wouldn't
actually have to look at it.

00:12:30.620 --> 00:12:35.480
One of the goals of things like web
services is that the XML is well-defined.

00:12:35.500 --> 00:12:36.800
XML is well-understood.

00:12:36.800 --> 00:12:40.600
The SOAP spec that defines how the
XML is structured is well-understood,

00:12:40.600 --> 00:12:43.770
and it becomes very easy for
you to write tools so that

00:12:43.890 --> 00:12:45.600
machines can talk to machines.

00:12:45.600 --> 00:12:49.400
It doesn't - it's written in XML.

00:12:49.400 --> 00:12:52.790
It's done in XML so that
there are a number of tools

00:12:52.800 --> 00:12:55.120
available to read and write it,
not so that you can

00:12:55.240 --> 00:12:56.590
actually do this by hand.

00:12:56.600 --> 00:12:59.930
Please, if you do, though,
it would be really

00:12:59.930 --> 00:13:02.300
interesting to hear about it.

00:13:02.830 --> 00:13:05.300
Okay, hold on a second.

00:13:05.340 --> 00:13:07.200
It should be obvious by now.

00:13:07.210 --> 00:13:10.450
Participants in a web service,
you have a server and you have a client.

00:13:10.520 --> 00:13:13.400
Often they're called a
provider and a consumer.

00:13:13.400 --> 00:13:15.000
It's just a different name for it.

00:13:15.000 --> 00:13:16.200
Shouldn't have to worry about it.

00:13:16.260 --> 00:13:18.900
Theoretically,
what ends up happening is the

00:13:18.910 --> 00:13:21.700
server will write the web service.

00:13:21.710 --> 00:13:25.500
They then register with some
sort of universal directory,

00:13:25.540 --> 00:13:31.050
and then they publish the WSDL to that,
in a way that's described

00:13:31.090 --> 00:13:32.030
in the directory.

00:13:32.130 --> 00:13:34.000
So you would go to the
directory and you would look up,

00:13:34.000 --> 00:13:39.600
"I want web services that do,"
let's say something really lame,

00:13:39.650 --> 00:13:43.560
"add two numbers together."
And you would get a list of

00:13:43.560 --> 00:13:47.580
URLs for contact information and
WSDL locations for those services.

00:13:47.730 --> 00:13:50.800
And then you could hit those services,
take a look at the WSDL that came back,

00:13:50.980 --> 00:13:54.100
run your client automation thing,
and now you can talk.

00:13:54.230 --> 00:13:55.700
Finally, of course,
the server has to provide

00:13:55.700 --> 00:13:57.770
the web service itself.

00:13:58.110 --> 00:13:59.270
The client does the opposite.

00:13:59.440 --> 00:14:02.300
It has to look up the web
service in a directory.

00:14:02.330 --> 00:14:05.200
It will then configure
itself using the WSDL,

00:14:05.280 --> 00:14:07.000
and it can invoke the web service.

00:14:07.130 --> 00:14:10.490
The configuration using WSDL can
be either dynamic or static.

00:14:10.640 --> 00:14:13.170
There are a number of tools out
there that will generate stubs.

00:14:13.510 --> 00:14:15.790
WebObjects,
the default implementation for

00:14:15.880 --> 00:14:17.290
WebObjects doesn't do that.

00:14:17.300 --> 00:14:20.290
In fact,
it just retrieves the WSDL and then

00:14:20.300 --> 00:14:22.830
tries to be sort of nice about it.

00:14:24.810 --> 00:14:26.160
Very quickly, we'll go over this.

00:14:26.160 --> 00:14:28.040
This is a little bit more specific.

00:14:28.040 --> 00:14:31.490
This sort of is looking at the
web service event flow from

00:14:31.490 --> 00:14:32.740
a WebObjects point of view.

00:14:32.740 --> 00:14:35.420
And I'm not going to talk about
the client side because it's

00:14:35.450 --> 00:14:38.840
essentially a mirror image of
what happens on the server.

00:14:39.550 --> 00:14:42.800
So the client sends its WSDL request.

00:14:42.800 --> 00:14:46.470
The server returns the
WSDL to the client.

00:14:46.710 --> 00:14:49.690
The client will then - I mean,
this can happen offline.

00:14:49.830 --> 00:14:52.300
You can cache the WSDL,
you can keep it in a file,

00:14:52.300 --> 00:14:53.790
use it to generate stubs or whatever.

00:14:53.810 --> 00:14:57.820
That happens - could happen right
before the request and have the

00:14:57.820 --> 00:15:02.600
client dynamically do something to
generate the proper SOAP request.

00:15:02.610 --> 00:15:05.470
Sometimes it happens much earlier.

00:15:06.880 --> 00:15:09.010
So now the client sends a SOAP request.

00:15:09.130 --> 00:15:12.860
The server gets it as XML.

00:15:12.920 --> 00:15:18.000
In WebObjects, we unmarshall the
XML into a set of objects,

00:15:18.000 --> 00:15:19.420
native types.

00:15:19.530 --> 00:15:22.360
We process it.

00:15:22.440 --> 00:15:25.800
We marshal the response back into XML.

00:15:27.220 --> 00:15:29.800
and we return the response to the client.

00:15:29.890 --> 00:15:32.280
Again, it's very simple.

00:15:32.420 --> 00:15:35.280
So let's begin talking about
WebObjects and web services.

00:15:35.580 --> 00:15:39.300
WebObjects uses Axis for its
engine to do web services.

00:15:39.300 --> 00:15:42.770
It's the Apache Extensible
Interaction System.

00:15:43.090 --> 00:15:47.430
I don't know why it's called that,
because it doesn't seem to have anything

00:15:47.510 --> 00:15:50.190
to do with what it actually does.

00:15:50.200 --> 00:15:51.550
It's written by the Apache group.

00:15:51.630 --> 00:15:52.970
It's open source.

00:15:53.040 --> 00:15:55.500
It has support for both
the client and the server,

00:15:55.550 --> 00:15:58.840
and it has automatic WSDL generation.

00:15:59.530 --> 00:16:01.610
We basically stuffed it directly in.

00:16:01.720 --> 00:16:04.180
WebObjects does do some
nice stuff for you.

00:16:04.390 --> 00:16:07.990
It has plug-ins for both session
support and custom serialization

00:16:08.060 --> 00:16:10.030
and deserialization of objects.

00:16:10.300 --> 00:16:12.790
In particular,
all of the basic objects that

00:16:12.790 --> 00:16:15.220
WebObjects is likely to use,
all of our NS collection

00:16:15.220 --> 00:16:18.760
classes and the EOs themselves.

00:16:18.870 --> 00:16:21.500
And of course,
on top of the Access Engine,

00:16:21.500 --> 00:16:25.820
we wrote our coup de grace,
the direct web services.

00:16:25.850 --> 00:16:27.330
And we'll talk about that later.

00:16:27.550 --> 00:16:28.900
Actually, he'll talk about that later.

00:16:30.900 --> 00:16:33.990
So things that we do to you,
specifically the deserializers

00:16:34.030 --> 00:16:38.560
that we have are for NSArray,
data, dictionary, range, time zone,

00:16:38.640 --> 00:16:41.540
enterprise objects, and global ID.

00:16:42.030 --> 00:16:45.180
In a WebObjects application
and on the client,

00:16:45.180 --> 00:16:47.900
they are automatically
registered for you.

00:16:47.980 --> 00:16:50.730
We also provide WSDL for these.

00:16:53.930 --> 00:16:55.900
We also provide - this is
actually one thing that we do

00:16:55.900 --> 00:16:57.200
that should be really nice.

00:16:57.200 --> 00:16:58.170
It's session support.

00:16:58.210 --> 00:17:00.560
We have the custom session
handlers installed on both the

00:17:00.630 --> 00:17:01.900
client and the server side.

00:17:01.900 --> 00:17:06.250
One major lack in the SOAP 1.1
spec is that it doesn't talk at

00:17:06.310 --> 00:17:08.890
all about transaction semantics.

00:17:08.890 --> 00:17:12.900
There's no way to carry on a
conversation about web services.

00:17:13.110 --> 00:17:15.900
When they define the spec,
they sort of assume that each web service

00:17:15.900 --> 00:17:21.870
would be nice and sort of self-contained,
that the answer from one invocation

00:17:21.910 --> 00:17:25.900
would have nothing to do with
the request of another one.

00:17:25.900 --> 00:17:28.350
We felt this was a major lack,
particularly when we were

00:17:28.350 --> 00:17:29.900
trying to deal with databases.

00:17:29.900 --> 00:17:35.480
So what we added was we extended the
session support in WebObjects to support

00:17:35.830 --> 00:17:40.780
sessions through web services so that
you can invoke a web service and have a

00:17:40.780 --> 00:17:41.830
- and store server-specific web services.

00:17:42.900 --> 00:17:44.680
side state.

00:17:44.730 --> 00:17:47.850
Can anybody else say
that three times fast?

00:17:48.510 --> 00:17:48.970
I can't.

00:17:49.000 --> 00:17:50.440
That's okay.

00:17:50.490 --> 00:17:52.100
The other thing we add,
and this is pretty minor,

00:17:52.100 --> 00:17:54.540
is just dynamic registration.

00:17:54.550 --> 00:17:58.140
Access is configured typically
through a set of XML files,

00:17:58.140 --> 00:18:00.750
and we typically don't like to do that.

00:18:00.900 --> 00:18:03.140
So we provided the
WoW Web Service Registrar.

00:18:03.140 --> 00:18:08.060
It's a single call that you can
use to register a web service.

00:18:08.110 --> 00:18:09.100
Okay.

00:18:09.300 --> 00:18:13.070
So really quickly,
I'm just going to run through the demo.

00:18:14.870 --> 00:18:19.750
So we have a demo server,
and you can see Session

00:18:19.750 --> 00:18:22.280
Test Service is the name of my service.

00:18:22.840 --> 00:18:28.580
The service class itself is
not terribly complicated.

00:18:29.100 --> 00:18:41.300
[Transcript missing]

00:18:43.700 --> 00:18:50.220
Text Editing, Syntax Coloring,
and Text Editing.

00:18:50.800 --> 00:18:52.190
Here we go.

00:18:52.340 --> 00:18:53.700
Sorry about that.

00:18:53.790 --> 00:18:54.830
Please forgive me.

00:18:55.070 --> 00:18:58.240
I know not what I do.

00:18:58.470 --> 00:19:00.200
Ah, there we go.

00:19:05.710 --> 00:19:10.100
This is about as simple of
a service as you can get.

00:19:10.100 --> 00:19:13.180
We get the current context,
the WebObjects context.

00:19:13.270 --> 00:19:14.350
We get the session.

00:19:14.500 --> 00:19:18.180
And in our session,
we just store an array of strings,

00:19:18.270 --> 00:19:25.820
basically, so that as we send,
each time we add to that list.

00:19:27.230 --> 00:19:31.340
And finally, application.

00:19:31.540 --> 00:19:34.840
Here's that single line that
I was talking about to register.

00:19:34.840 --> 00:19:37.590
I've actually registered the
session under a different name,

00:19:37.600 --> 00:19:42.130
session test, just to see, you know,
it's doable.

00:19:44.100 --> 00:19:46.200
Okay.

00:19:46.220 --> 00:19:49.200
The client is going to
be a little bit simple.

00:19:49.200 --> 00:19:51.420
What the client is going to do is
it's just going to be-- a front

00:19:51.560 --> 00:19:56.200
end is going to be a WebObjects
application with a text field.

00:19:56.200 --> 00:20:01.130
You're going to add in, type in a string,
hit Enter, and as a response,

00:20:01.200 --> 00:20:04.200
we're going to send back the list
of previously submitted strings.

00:20:04.210 --> 00:20:07.190
This is obviously a very
trivial application.

00:20:11.300 --> 00:20:18.800
So, web service client,
we can get the web service client,

00:20:18.800 --> 00:20:19.520
so on and so forth.

00:20:19.540 --> 00:20:24.090
All right, so let's run these suckers.

00:20:27.710 --> 00:20:35.430
One thing to keep in mind at this point
is that the client - because what I want

00:20:35.440 --> 00:20:40.250
to do is I want to show you what's
happening on the client through something

00:20:40.300 --> 00:20:44.410
called TCP Monitor just to prove that
we're actually going across and so

00:20:44.410 --> 00:20:47.170
you can see what the state looks like.

00:20:47.840 --> 00:20:52.860
I've actually stored the
WSDL locally on the machine,

00:20:52.890 --> 00:20:55.600
and it looks like this.

00:20:58.220 --> 00:21:08.100
You can see here, state test response,
state test return, it returns an array.

00:21:08.350 --> 00:21:10.870
The request takes a string.

00:21:11.960 --> 00:21:14.800
The name of the service is
the Session Test Service.

00:21:14.800 --> 00:21:19.700
The operation is named the State Test,
and it takes a string,

00:21:19.760 --> 00:21:21.910
returns the response,

00:21:22.480 --> 00:21:24.970
takes a request, returns a response.

00:21:24.970 --> 00:21:28.410
Those are the message types
that I was talking about.

00:21:28.460 --> 00:21:29.400
All right.

00:21:29.400 --> 00:21:33.400
So let's hook this up.

00:21:49.900 --> 00:22:11.800
[Transcript missing]

00:22:15.450 --> 00:22:21.800
Sorry,
is the font still too small for this?

00:22:21.810 --> 00:22:23.050
You can see it's a very simple one.

00:22:23.290 --> 00:22:27.320
You have the SOAP envelope itself,
which defines all of the namespaces.

00:22:27.340 --> 00:22:32.380
You have the body and the
string itself encoded.

00:22:32.400 --> 00:22:34.210
On the way back,

00:22:35.410 --> 00:22:36.700
Again, the envelope.

00:22:36.770 --> 00:22:38.800
Here's where the session
support comes in.

00:22:38.970 --> 00:22:41.200
We start sending the session.

00:22:41.200 --> 00:22:42.640
We send the information in the header.

00:22:42.640 --> 00:22:45.280
You can see that we have the session ID,
for those of you who are

00:22:45.280 --> 00:22:47.840
familiar with WebObjects,
and the instance ID.

00:22:47.840 --> 00:22:50.670
In our case, at this point,
since we're running directly,

00:22:50.690 --> 00:22:52.290
there's no instance ID at all.

00:22:53.130 --> 00:22:59.620
If you walk through the rest of them,
it's the same request.

00:23:01.100 --> 00:23:04.500
You can see that we're
simply returning an array.

00:23:04.640 --> 00:23:07.410
Okay, back to slides.

00:23:10.850 --> 00:23:12.840
Let's talk a little bit about
the client really quick.

00:23:12.860 --> 00:23:17.800
It's basically a very thin
convenience API on top of Access.

00:23:18.060 --> 00:23:20.780
While on the server side,
we added direct web services,

00:23:20.810 --> 00:23:24.800
we didn't add anything quite that
complex on top of the client side.

00:23:24.800 --> 00:23:27.800
The custom deserializers and
serializers are available.

00:23:27.800 --> 00:23:28.800
They're registered.

00:23:28.800 --> 00:23:29.770
The session support is registered.

00:23:29.790 --> 00:23:33.430
For security,
you can do HTTPS on the client side to

00:23:33.430 --> 00:23:36.390
connect using the standard Java APIs.

00:23:38.040 --> 00:23:40.700
Going forward, talking about security,
currently,

00:23:40.700 --> 00:23:45.000
the current state of the art for
web services security in terms of,

00:23:45.900 --> 00:23:48.900
The only way to secure connections
is pretty much just HTTPS.

00:23:48.900 --> 00:23:49.390
That's fine.

00:23:49.390 --> 00:23:49.900
It works pretty well.

00:23:49.900 --> 00:23:52.870
There is an industry standard,
WS Security.

00:23:52.930 --> 00:23:57.900
It's been basically Microsoft, IBM,
all the big people are behind it.

00:23:57.900 --> 00:24:00.000
WebObjects doesn't support
that at this point,

00:24:00.070 --> 00:24:00.900
unfortunately.

00:24:00.900 --> 00:24:04.880
We do provide a security
delegate that will get invoked at

00:24:05.110 --> 00:24:08.400
pretty much every single phase,
before the response is sent,

00:24:08.400 --> 00:24:11.900
after the response is sent,
before and after marshaling,

00:24:11.900 --> 00:24:15.030
so that at any point you can
hook in and ask WebObjects to

00:24:15.070 --> 00:24:16.900
do whatever needs to be done.

00:24:17.880 --> 00:24:20.800
And finally,
so I'd like to introduce Ron Lu-Saeng.

00:24:20.800 --> 00:24:25.790
He's our Jamaican-Chinese
WebObjects Engineering Cowboy.

00:24:27.700 --> 00:24:29.940
Man, I hao ma.

00:24:29.940 --> 00:24:30.530
Man.

00:24:30.540 --> 00:24:30.940
Man.

00:24:30.990 --> 00:24:31.280
Man.

00:24:31.390 --> 00:24:31.610
Man.

00:24:31.800 --> 00:24:32.040
Man.

00:24:32.310 --> 00:24:34.440
You know, your hat's out of date.

00:24:34.580 --> 00:24:35.700
It's already obsolete.

00:24:35.730 --> 00:24:37.170
Yeah, it's Panther time now.

00:24:37.330 --> 00:24:40.230
I can only find a
Panther-colored cowboy hat.

00:24:40.300 --> 00:24:43.110
So thanks, Karl.

00:24:44.350 --> 00:24:47.190
Now that Karl has told us everything
we need to know about web services

00:24:47.530 --> 00:24:51.460
and how WebObjects leverages
access to support web services,

00:24:51.490 --> 00:24:53.640
I'll just take the next 20
minutes or so and tell you

00:24:53.890 --> 00:24:57.290
about our kick-ass technology,
direct-to-web services.

00:24:57.440 --> 00:24:59.420
So let's see.

00:24:59.420 --> 00:25:03.490
Actually, let's go to black first.

00:25:03.620 --> 00:25:05.910
I'll just talk a little
bit about three things.

00:25:06.050 --> 00:25:07.600
Three things, basically.

00:25:07.750 --> 00:25:10.220
First,
what is it that Direct Web Services is

00:25:10.220 --> 00:25:11.270
trying to address?

00:25:11.280 --> 00:25:13.240
What problem is it trying to address?

00:25:13.350 --> 00:25:16.580
And also, what technologies went
into Direct Web Services?

00:25:16.680 --> 00:25:21.380
And then I'll give you a cool demo
that has a WebObjects application

00:25:21.650 --> 00:25:26.120
talking to a Cocoa desktop
application via web services.

00:25:26.230 --> 00:25:30.990
So what problem is it that
Direct Web Services solves?

00:25:31.370 --> 00:25:33.540
Basically,
we in the WebObjects department believe

00:25:33.610 --> 00:25:36.760
that our developers write too much code.

00:25:36.810 --> 00:25:40.480
And by that, I mean they write too much
application-specific code.

00:25:40.540 --> 00:25:42.770
They should really be-- we
want our developers to have

00:25:43.250 --> 00:25:47.600
simple lives and simply work on
fine-tuning their business logic.

00:25:47.910 --> 00:25:49.780
So to that end,
we've come up with these rapid

00:25:49.850 --> 00:25:51.440
development technologies.

00:25:51.600 --> 00:25:54.530
And if you're familiar with
direct-to-web or direct-to-Java client,

00:25:54.560 --> 00:25:59.860
then you're probably familiar with the
rule system that we have in WebObjects.

00:25:59.930 --> 00:26:03.110
With direct-to-web services,
we've extended that and added

00:26:03.170 --> 00:26:08.040
to it the access and WebObjects
support for web services,

00:26:08.090 --> 00:26:11.360
and also our fantastic
Enterprise Objects framework,

00:26:11.410 --> 00:26:13.730
and wrapped that in the
rule system that we have.

00:26:13.740 --> 00:26:16.830
If you haven't heard of our rule system,
it's basically a question and answer

00:26:16.830 --> 00:26:22.300
system that lets you infer values from
a set of rules and some contextual info.

00:26:22.360 --> 00:26:25.100
That way,
you can have a really dynamic application

00:26:25.100 --> 00:26:29.340
where a set of rules instead of lots of
code defines your application behavior.

00:26:31.100 --> 00:26:34.840
So the problem that
we're trying to solve is,

00:26:34.840 --> 00:26:36.930
sure,
right now you can build a WebObjects

00:26:36.950 --> 00:26:40.070
application pretty easily that
will vend your business logic

00:26:40.150 --> 00:26:44.240
as a web service using Access,
WebObjects, and EOF.

00:26:44.290 --> 00:26:45.940
But you still have to write some code.

00:26:46.170 --> 00:26:49.780
And usually that code does
one of four things-- create,

00:26:49.790 --> 00:26:54.660
read, update, or delete a bunch of
rows from your database,

00:26:54.660 --> 00:26:56.460
typically called

00:26:57.500 --> 00:27:15.000
[Transcript missing]

00:27:15.630 --> 00:27:18.220
Let's see.

00:27:18.360 --> 00:27:20.180
All right.

00:27:20.440 --> 00:27:25.540
And so then on to what technologies
went into direct web services.

00:27:25.680 --> 00:27:29.510
So Karl's already told you about Axis,
which does all the heavy lifting

00:27:29.590 --> 00:27:30.920
of SOAP messaging for us.

00:27:30.980 --> 00:27:34.600
And he's also told you about how
WebObjects adds session support and,

00:27:34.700 --> 00:27:36.560
of course,
all the load balancing that you expect

00:27:36.690 --> 00:27:39.270
from WebObjects as an application server.

00:27:39.360 --> 00:27:43.120
So between Axis and WebObjects,
we already have a great

00:27:43.210 --> 00:27:45.380
way to talk web services.

00:27:45.440 --> 00:27:49.270
Then on the low end, we also have the
Enterprise Objects Framework,

00:27:49.270 --> 00:27:53.610
which we believe is the best
way for accessing and modifying,

00:27:53.610 --> 00:28:00.070
interacting with business data in
your JNDI or JDBC data sources.

00:28:00.370 --> 00:28:03.230
So, and of course, again,
wrapping all of this in the

00:28:03.230 --> 00:28:07.350
smarts that is the rule system,
we've put together our kick-ass

00:28:07.350 --> 00:28:10.190
crown jewel technology,
direct-to-web services.

00:28:10.300 --> 00:28:13.320
So I'm just going to go to the demo now.

00:28:13.350 --> 00:28:15.590
Can we get demo two, please?

00:28:16.900 --> 00:28:18.310
Cool.

00:28:18.490 --> 00:28:19.900
Just going to start a new project.

00:28:19.920 --> 00:28:22.140
Just like all of our
direct-to-star projects,

00:28:22.140 --> 00:28:27.250
we have a project template
called direct-to-web-services.

00:28:27.260 --> 00:28:32.640
And we'll give it a cool name.

00:28:38.470 --> 00:28:44.600
And we'll add a business logic
framework that I've already built.

00:28:57.500 --> 00:28:59.120
All right.

00:28:59.250 --> 00:29:02.400
Navigational problems, sorry.

00:29:02.490 --> 00:29:03.900
Okay.

00:29:04.040 --> 00:29:06.370
And we'll just go ahead and
build and launch the application.

00:29:06.400 --> 00:29:10.400
So along with the project templates,
we also have assistants.

00:29:10.400 --> 00:29:14.400
Every direct-to-web application,
direct-to-Java client applications,

00:29:14.400 --> 00:29:18.550
and now also direct-to-web services
have assistant applications that

00:29:18.640 --> 00:29:22.770
you use to configure the rules for
your application as a first step for

00:29:22.840 --> 00:29:26.400
specifying behavior of your application.

00:29:26.400 --> 00:29:32.390
So while that's starting up, let's see.

00:29:34.300 --> 00:29:37.070
So it'll bring up a little web browser,
which isn't entirely useful

00:29:37.080 --> 00:29:41.170
for a web services application,
but it tells you that.

00:29:41.250 --> 00:29:46.190
It tells you you should really put
this URL in the web services assistant,

00:29:46.240 --> 00:29:48.020
which I'll do here.

00:29:49.430 --> 00:29:52.060
So now the Assistant is going
to connect to our application,

00:29:52.060 --> 00:29:56.680
and it can already look at all of the
models that are in our application,

00:29:56.730 --> 00:29:58.120
as you can see here.

00:29:58.130 --> 00:30:02.070
And it can also see all of the
services that are already published.

00:30:02.730 --> 00:30:05.280
By default,
we have an aptly named service,

00:30:05.400 --> 00:30:10.060
the WoW default web service
already set up for us.

00:30:10.210 --> 00:30:13.690
We'll go ahead and enable it,
and we'll make one of

00:30:13.690 --> 00:30:15.970
these entities public.

00:30:17.990 --> 00:30:22.160
And over here you can see the service
is already populated by default.

00:30:22.500 --> 00:30:26.960
Every time we add an entity,
we add a few operations

00:30:26.970 --> 00:30:30.900
that do all of those CRUD,
all the CRUD work I talked about earlier.

00:30:31.000 --> 00:30:34.900
Specifically, inserting, searching,
updating, deleting.

00:30:35.010 --> 00:30:38.890
And we also look through the fetch
specifications for your model.

00:30:39.010 --> 00:30:43.600
So we find things like my
named fetch specification

00:30:43.600 --> 00:30:46.500
for find user and login user.

00:30:46.630 --> 00:30:52.480
Just so you can see what
I'm talking about here,

00:30:53.600 --> 00:31:31.800
[Transcript missing]

00:31:32.510 --> 00:31:34.020
So this is an important thing.

00:31:34.080 --> 00:31:37.400
Right now, we're exposing your business
logic as a web service.

00:31:37.400 --> 00:31:41.630
So clients can go and examine the
WSDL that's generated from the service.

00:31:41.690 --> 00:31:44.900
And you don't want them to
necessarily have a really good

00:31:44.940 --> 00:31:47.170
idea of how your data is modeled.

00:31:47.340 --> 00:31:51.930
So you can change the names
to be something less sketchy

00:31:52.070 --> 00:31:54.030
for public consumption.

00:31:54.110 --> 00:31:57.740
So now we'll test this operation.

00:31:58.030 --> 00:32:01.750
and we'll send the changes that we've
made in the Assistant back to the server,

00:32:01.750 --> 00:32:04.210
and it'll be updated in
the rule system there.

00:32:04.360 --> 00:32:08.900
So now we can look for all users
with a first name starting with R.

00:32:10.450 --> 00:32:14.280
Poof, we do get one user.

00:32:14.470 --> 00:32:17.400
Some of this text may be
a little hard to read,

00:32:17.400 --> 00:32:17.400
but--

00:32:17.980 --> 00:32:21.140
You'll see that there's a key
value coding null value here.

00:32:21.280 --> 00:32:22.400
Don't worry about that.

00:32:22.460 --> 00:32:25.470
What's actually happening is
we're sending back a serialized

00:32:25.470 --> 00:32:28.230
EO without the passkey,
as you saw me configure earlier.

00:32:28.240 --> 00:32:31.110
On the client side here,
because this is also using

00:32:31.110 --> 00:32:34.700
WebObjects technology,
we can actually create a

00:32:34.870 --> 00:32:39.320
real EO on the client side,
but it doesn't have the passkey set yet.

00:32:39.390 --> 00:32:43.120
So if we don't want to see
these values in our client,

00:32:43.160 --> 00:32:47.700
or especially if our client is
in a WebObjects application,

00:32:47.700 --> 00:32:51.230
we can go ahead and turn
on returning SOAP struct.

00:32:51.240 --> 00:32:54.800
This makes it a little bit cleaner
for non-WebObjects clients.

00:32:54.800 --> 00:32:59.200
Alternatively, it makes it a little less
efficient for WebObjects clients,

00:32:59.200 --> 00:33:00.680
so there's a trade-off there.

00:33:00.700 --> 00:33:07.600
Actually, let's go ahead and add
messages as a public operation.

00:33:07.600 --> 00:33:09.120
You can see we've created
some operations here.

00:33:09.120 --> 00:33:11.120
Let's go ahead and turn on
the insert message operation.

00:33:11.120 --> 00:33:11.120
We don't want clients to automatically
create the creation date for the

00:33:11.120 --> 00:33:11.120
messages that they're inserting,
so we'll take that out.

00:33:11.120 --> 00:33:23.230
We'll just say we need a subject,
a recipient to send it to by address,

00:33:24.140 --> 00:33:38.730
and let's add the sender's
address and a message.

00:33:39.030 --> 00:33:42.420
And then for return values,
we don't really need to return anything.

00:33:42.810 --> 00:33:44.930
Just insert it and be done with it.

00:33:45.020 --> 00:33:48.680
Then we'll enable the operation,
turn on SOAPstruct returning

00:33:48.680 --> 00:33:50.140
just for the heck of it.

00:33:50.200 --> 00:33:53.730
And let's try this out.

00:33:53.840 --> 00:33:55.230
Ah, OK.

00:33:55.390 --> 00:33:57.710
Forgot to change this.

00:33:58.700 --> 00:34:03.110
Because we've gone and
reverse-engineered kind of the

00:34:03.110 --> 00:34:08.190
fetch specification in my model,
I actually choose the names for the

00:34:08.200 --> 00:34:13.390
key value bindings in the model,
which are not very kosher as

00:34:13.390 --> 00:34:16.110
far as web services names go.

00:34:16.120 --> 00:34:19.390
So I'll go ahead and
change these as well.

00:34:20.530 --> 00:34:22.840
And so you notice there,
we can actually do a little bit

00:34:22.840 --> 00:34:25.670
of validation for you to make sure
that you're not going to end up

00:34:25.670 --> 00:34:27.800
publishing a WSDL that isn't valid.

00:34:27.800 --> 00:34:33.060
So again, let's go back and test the
insert message operation.

00:34:33.100 --> 00:34:36.200
Let's take a look at the
WSDL for this service,

00:34:36.200 --> 00:34:37.700
the entire service, just for fun.

00:34:37.700 --> 00:34:42.590
This is the sort of thing that we don't
want you guys to have to worry about.

00:34:42.600 --> 00:34:47.100
This is precisely the sort of thing that
Direct Web Services handles for you.

00:34:47.100 --> 00:34:51.190
It will dynamically figure out
what parameters you set as input

00:34:51.510 --> 00:34:56.100
and output parameters and merge
those into a WSDL for your service.

00:34:56.400 --> 00:35:06.270
Let's say hello to Karl from me.

00:35:06.700 --> 00:35:08.710
Wait for it, Karl.

00:35:11.350 --> 00:35:13.300
Okay.

00:35:13.380 --> 00:35:14.730
And we get an exception.

00:35:14.840 --> 00:35:24.080
So what's happened here is it claims
that the creation date is... Yeah,

00:35:24.080 --> 00:35:25.150
so we got an exception.

00:35:25.260 --> 00:35:28.570
So now we know that we need
to start debugging our app.

00:35:31.770 --> 00:35:33.560
All right.

00:35:33.730 --> 00:35:37.000
Yes, I believe this was expected,
but this isn't the exception I expected.

00:35:37.170 --> 00:35:40.440
So, in any case,
I can move on to starting

00:35:40.440 --> 00:35:45.200
up an application that...

00:35:48.200 --> 00:36:00.000
[Transcript missing]

00:36:02.060 --> 00:36:04.470
I've gone ahead and turned
off WoW Auto Open in

00:36:04.470 --> 00:36:06.600
Browser and set the port.

00:36:06.620 --> 00:36:12.870
I'll also add a couple of
rules to our rule model file.

00:36:13.300 --> 00:36:15.910
This part I want to emphasize.

00:36:16.210 --> 00:36:22.470
For editing rules in your application,
please add a new file.

00:36:23.050 --> 00:36:27.130
and name it d2w.modelfile
like I've named it here.

00:36:27.130 --> 00:36:28.160
So you'll get this.

00:36:28.210 --> 00:36:29.210
Edit this file.

00:36:29.420 --> 00:36:33.730
Do not edit the user.d2wmodelfile,
which is edited by the assistant for you.

00:36:33.940 --> 00:36:34.920
They're two separate files.

00:36:34.920 --> 00:36:39.530
You should edit the
d2wmodelfile with rule editor.

00:36:40.620 --> 00:36:47.310
So what I'm going to do
is change the location

00:36:47.700 --> 00:37:12.100
[Transcript missing]

00:37:12.650 --> 00:37:16.470
is so I can show you all of
the cool XML that goes back and

00:37:16.630 --> 00:37:19.700
forth through a TCP monitor.

00:37:22.500 --> 00:37:37.900
[Transcript missing]

00:37:42.010 --> 00:37:44.240
Connect.

00:37:44.280 --> 00:37:45.590
We'll still connect through 8.8.8.8.

00:37:45.680 --> 00:37:48.780
We could connect through 7.7.7.7,
but then you'd get a little

00:37:48.790 --> 00:37:50.630
bit more garbledy-gook.

00:37:50.900 --> 00:37:52.640
All right.

00:37:52.660 --> 00:37:59.980
And here we can search
for all of our users.

00:38:08.580 --> 00:38:12.730
So one of the things that I've
already gone and done is change

00:38:12.800 --> 00:38:15.130
the return type for arrays.

00:38:15.510 --> 00:38:18.740
You can change how things get
serialized out simply by adding a

00:38:18.740 --> 00:38:22.140
call to the WoW Web Service Registrar.

00:38:22.240 --> 00:38:28.000
What I've done is make the
XML that we return simpler and

00:38:28.000 --> 00:38:31.940
more Cocoa web services friendly.

00:38:32.010 --> 00:38:36.460
That's why the client
here didn't like it.

00:38:38.830 --> 00:38:43.470
So I'm going to add this to one of the
download sites after this conference

00:38:43.900 --> 00:38:46.660
so you can actually try this code out.

00:38:46.780 --> 00:38:50.660
Basically, we tell it that if we're
serializing out an array,

00:38:50.740 --> 00:38:58.300
it should serialize it out with the
UR type instead of as SOAP_ENC_ARRAY.

00:38:58.380 --> 00:39:02.220
So we can dynamically change how
things are serialized and deserialized,

00:39:02.290 --> 00:39:05.140
as well as which serializers get used.

00:39:05.190 --> 00:39:07.810
And another thing...

00:39:08.920 --> 00:39:17.570
Thanks to our dynamic deployment stuff,
we can change how the response is encoded

00:39:18.070 --> 00:39:20.710
as far as the entire SOAP message.

00:39:20.860 --> 00:39:23.620
One of the things I'm going to
do in order to make this more

00:39:23.710 --> 00:39:28.050
friendly for Cocoa Web Services is
add my Cocoa response handler

00:39:28.110 --> 00:39:32.350
here into the response chain.

00:39:32.590 --> 00:39:38.060
By copying this line
into the response bit,

00:39:38.800 --> 00:40:01.300
[Transcript missing]

00:40:01.500 --> 00:40:12.700
[Transcript missing]

00:40:14.780 --> 00:40:23.420
Okay, so I have a few classes in here
that were generated by WSMakeStubs,

00:40:23.550 --> 00:40:27.940
which is located in /developertools,
which takes a bunch of WSDL and

00:40:27.940 --> 00:40:31.300
generates some Objective-C or
AppleScript or one other,

00:40:31.300 --> 00:40:35.010
I believe just CF code,
that lets you invoke the

00:40:35.020 --> 00:40:36.970
web service really easily.

00:40:36.980 --> 00:40:39.840
You don't have to write
as much of this stuff.

00:40:42.180 --> 00:40:47.010
I'm going to make sure
that I use a valid name.

00:40:54.300 --> 00:41:03.500
[Transcript missing]

00:41:05.680 --> 00:41:09.200
So here our server is running,
so we'll hide that.

00:41:09.260 --> 00:41:11.420
And we'll get rid of this.

00:41:14.460 --> 00:41:20.580
Basically,
what this Cocoa application will do,

00:41:20.580 --> 00:41:24.530
one of the things it can do is log in to

00:41:29.110 --> 00:41:32.540
Log into our web service
using just a simple name and

00:41:32.630 --> 00:41:34.800
password and find a global ID.

00:41:34.860 --> 00:41:38.210
This global ID, then,
you can pass back as a key to

00:41:38.210 --> 00:41:40.990
other web services invocations.

00:41:41.000 --> 00:41:43.930
Similarly,
you could conceivably return a session

00:41:44.250 --> 00:41:49.000
ID or something else like that that
lets the following operation invocations

00:41:49.000 --> 00:41:53.370
do something more intelligent,
kind of contextual information.

00:41:54.000 --> 00:41:55.530
So here's my app.

00:41:55.600 --> 00:41:59.750
What I'll do is I'll check my email.

00:42:00.000 --> 00:42:00.900
There's nothing there.

00:42:01.000 --> 00:42:02.590
That's fine.

00:42:02.720 --> 00:42:06.290
Let me try sending Karl a message.

00:42:15.260 --> 00:42:18.230
Let's take a look at the
important debugging tool,

00:42:18.230 --> 00:42:19.200
TCP Monitor.

00:42:19.200 --> 00:42:26.160
TCP Monitor debugging . Oh,
I've done something very silly and not

00:42:26.170 --> 00:42:30.880
included... This in my build target.

00:42:31.250 --> 00:42:32.200
Hang on.

00:42:32.200 --> 00:42:41.980
So we'll give this one more try.

00:42:57.700 --> 00:42:59.700
And that definitely seems to have worked.

00:42:59.700 --> 00:43:01.100
Let me check first.

00:43:01.100 --> 00:43:01.970
Oh, OK.

00:43:02.250 --> 00:43:09.390
So here we've gone across-- let me
check again so you don't miss it-- and

00:43:09.390 --> 00:43:12.100
sent a clear text name and password.

00:43:12.140 --> 00:43:13.880
Don't do this.

00:43:14.800 --> 00:43:21.000
and replied with a bunch of messages
that are encoded specifically for Cocoa.

00:43:21.090 --> 00:43:22.600
You could do this for any other client.

00:43:22.600 --> 00:43:24.850
Dotnet has worked.

00:43:24.980 --> 00:43:29.800
We could do this for regular
AppleScript clients as well.

00:43:29.850 --> 00:43:32.870
And if I send myself a message--

00:43:43.410 --> 00:43:53.310
We can see that we first log in,
finding the name of the recipient here.

00:43:56.570 --> 00:43:59.090
And getting the global ID.

00:43:59.460 --> 00:44:02.710
This is an encoding of a global
ID so that we can use it later

00:44:03.180 --> 00:44:05.400
when we send the actual message.

00:44:05.440 --> 00:44:11.790
So this is a two-step process
for this specific web service.

00:44:12.590 --> 00:44:17.900
Here you can see we've sent a global
ID for the recipient and the sender.

00:44:17.930 --> 00:44:20.560
And I can check my mail again.

00:44:20.830 --> 00:44:23.660
and see that we indeed
did get the message.

00:44:23.990 --> 00:44:29.060
One of the other things that
Karl alluded to was session support

00:44:29.850 --> 00:44:32.980
and how that enables transactions
for direct web services and

00:44:33.200 --> 00:44:35.330
WebObjects web services in general.

00:44:35.440 --> 00:44:39.520
You'll notice when I check
the service panel here,

00:44:39.600 --> 00:44:44.760
we have a little checkbox for
allows transactions or not.

00:44:44.760 --> 00:44:44.760
With that enabled,

00:44:45.180 --> 00:44:49.800
We can go and check any of
these and look in the WSDL.

00:44:49.880 --> 00:44:53.480
There will be three extra operations.

00:44:54.280 --> 00:44:59.240
Begin and commit and roll
back transactions operations.

00:44:59.320 --> 00:45:02.410
This way,
a web service client can explicitly

00:45:02.540 --> 00:45:07.600
ask for session state to be kept on the
server for the remaining transactions.

00:45:07.780 --> 00:45:10.360
Once they initiate a begin
transaction operation,

00:45:10.720 --> 00:45:13.620
sending simply begin
transaction to the server,

00:45:13.760 --> 00:45:16.800
we keep the session alive,
reply with some session

00:45:16.800 --> 00:45:20.270
headers in the SOAP message,
which the client hangs onto.

00:45:20.350 --> 00:45:23.810
Simply forwarding those message
headers to the server awakens the

00:45:23.810 --> 00:45:25.860
correct session for the client.

00:45:25.880 --> 00:45:31.120
So you can do things like keeping
a bunch of changes in the editing

00:45:31.170 --> 00:45:34.490
context on the server going,
keep making changes without

00:45:34.490 --> 00:45:38.660
committing them to the database
until a commit transaction is sent.

00:45:38.740 --> 00:45:40.770
So that's it.

00:45:41.010 --> 00:45:44.630
And I think that was all.

00:45:44.800 --> 00:45:50.260
Oh, as far as extending the
frameworks here -- how much time?

00:45:51.730 --> 00:45:55.630
Extending the framework,
you can see we have all the default

00:45:55.700 --> 00:45:57.680
services and default operations.

00:45:57.870 --> 00:45:59.800
You can also create your own.

00:45:59.980 --> 00:46:04.330
You can see you can create a
new service and change its name.

00:46:06.610 --> 00:46:10.060
As well as creating a
new operation for it.

00:46:10.190 --> 00:46:13.020
We bring up a new operation dialogue.

00:46:15.060 --> 00:46:20.340
Name the operation and define
which entity it works with.

00:46:20.380 --> 00:46:23.240
All of these changes are saved
in the rule system so that simply

00:46:23.240 --> 00:46:28.680
by invoking an operation by name,
WebObjects will automatically

00:46:28.680 --> 00:46:33.320
know what entity the operation is
meant for and whether it should be

00:46:33.330 --> 00:46:39.150
inserting or deleting or updating
new records in the editing context.

00:46:39.290 --> 00:46:44.640
So we can add a search user
operation named "Have Fun,"

00:46:44.700 --> 00:46:48.660
change the parameters and...

00:46:49.820 --> 00:46:54.540
Let's play with any of these
settings until we get it just right,

00:46:54.650 --> 00:46:57.180
at which point we might want
to actually make some small

00:46:57.180 --> 00:46:59.660
tweaks into how it's working.

00:46:59.740 --> 00:47:02.470
At that point,
we can actually freeze the operation.

00:47:02.630 --> 00:47:06.210
This generates real source code.

00:47:06.320 --> 00:47:10.490
We can name the operation "source."

00:47:12.200 --> 00:47:17.210
And then we go and generate
the source for you.

00:47:18.310 --> 00:47:22.800
For everything that you would need for
actually doing what is done by default.

00:47:22.850 --> 00:47:26.510
We also generate a static
WSDL page that you can edit.

00:47:30.890 --> 00:47:36.980
So we've generated a lot of code,
and it does the same thing.

00:47:37.040 --> 00:47:37.910
Boring.

00:47:38.130 --> 00:47:41.290
Next, I'd like to simply--

00:47:41.950 --> 00:47:44.720
I'd rather just subclass the
existing operations and only tweak

00:47:44.820 --> 00:47:47.720
the little things that I need,
rather than having to

00:47:47.720 --> 00:47:49.460
manage a set of source.

00:47:49.520 --> 00:47:52.830
If I really needed it,
this would be useful, but in my case,

00:47:52.830 --> 00:47:57.350
I typically just want to change the
return object by one little amount.

00:47:57.500 --> 00:48:05.150
So instead of freezing an operation,
I can create a new operation here,

00:48:05.220 --> 00:48:09.160
name it a simple subclass.

00:48:13.100 --> 00:48:17.100
And same settings.

00:48:17.100 --> 00:48:21.180
And you'll notice that once we
froze the previous operation,

00:48:21.210 --> 00:48:25.660
we can no longer edit any of
these arguments and return values.

00:48:25.680 --> 00:48:28.040
So you have to get it
right before you freeze it.

00:48:28.070 --> 00:48:30.130
You can unfreeze,
but you still have to throw

00:48:30.130 --> 00:48:32.290
out your original source.

00:48:33.180 --> 00:48:38.140
When we subclass,
you'll see we still get the dynamic

00:48:38.140 --> 00:48:42.620
system here in order to configure
arguments and return types.

00:48:42.680 --> 00:48:47.170
Now,
subclassing involves one little thing.

00:48:47.710 --> 00:48:51.220
There is a template that
ships with WebObjects,

00:48:51.280 --> 00:48:56.900
and it lives in developer, documentation,
WebObjects, web services, templates.

00:48:57.520 --> 00:49:05.330
I'm going to simply copy that with
this cute little script I wrote.

00:49:07.630 --> 00:49:11.560
I'm going to copy that into
Developer Project Builder Extras,

00:49:11.620 --> 00:49:13.720
File Templates, WebObjects.

00:49:13.920 --> 00:49:16.490
Just read the directions
in the readme here.

00:49:19.860 --> 00:49:22.300
So now that I've copied
that template there,

00:49:22.310 --> 00:49:26.130
I can go and create a new--

00:49:27.310 --> 00:49:30.540
Direct-to-Web
Service Operations subclass.

00:49:30.640 --> 00:49:32.510
We'll name it...

00:49:40.100 --> 00:49:45.560
And you can see now we have
something much simpler than this,

00:49:45.560 --> 00:49:47.820
but it does pretty much the same thing.

00:49:47.820 --> 00:49:53.860
All you need to do is tell the - or
define your operation to subclass

00:49:53.860 --> 00:49:59.100
one of our other operation types,
search or insert or delete operation.

00:49:59.100 --> 00:50:05.180
This one is going to be a search service,
search operation, and here I can -

00:50:07.600 --> 00:50:13.300
[Transcript missing]

00:50:14.060 --> 00:50:17.800
One of the things that we
get when we're invoked,

00:50:17.910 --> 00:50:23.410
when an operation is invoked,
is a set of input part values.

00:50:23.730 --> 00:50:27.430
These are the values that the client
has actually sent to the server.

00:50:27.720 --> 00:50:32.030
And we'll also have to
register this service,

00:50:32.100 --> 00:50:34.800
this operation, with the rule system.

00:50:34.800 --> 00:50:46.090
The way we do that is editing, again,
the D2W model file.

00:50:46.090 --> 00:50:46.090
And we'll say,

00:50:50.450 --> 00:50:58.680
When the operation name that's
invoked is... Say hello.

00:50:58.730 --> 00:51:00.210
Don't ask me where I come
up with these names.

00:51:00.230 --> 00:51:01.980
I don't know either.

00:51:04.450 --> 00:51:10.260
Then the operation class that should
be invoked is my happy-happy class.

00:51:10.260 --> 00:51:14.220
And a very similar rule needs to
be used in order to tell the rule

00:51:14.220 --> 00:51:17.010
system that it is a dynamic operation.

00:51:17.010 --> 00:51:22.620
Oh, I didn't need to do that.

00:51:22.620 --> 00:51:25.920
Copy-paste is a wonderful thing.

00:51:29.890 --> 00:51:32.620
Okay, so Operation Class Name is set.

00:51:32.690 --> 00:51:35.300
Is Operation Frozen is set to false.

00:51:35.300 --> 00:51:43.040
Save, stop, and build.

00:51:44.900 --> 00:51:49.760
And then we can go back to the Assistant,
disconnect, wait for the application

00:51:49.760 --> 00:51:52.440
to warm up again,
and then once we've connected,

00:51:52.440 --> 00:51:55.970
we can start configuring this new
operation that you'll see there.

00:51:59.600 --> 00:52:11.000
[Transcript missing]

00:52:15.800 --> 00:52:18.880
And you can see we can
still edit the arguments,

00:52:18.880 --> 00:52:21.940
return types,
and which service it's associated with,

00:52:21.940 --> 00:52:24.850
whereas the frozen one
is still just frozen.

00:52:24.860 --> 00:52:32.110
We'll go ahead and add
subject and a recipient as...

00:52:32.480 --> 00:52:42.820
"Input parameters and change these,
and the creation date, and the sender.

00:52:42.890 --> 00:52:45.770
So lots of little parameters."

00:52:46.830 --> 00:52:50.560
Oh, I have to make these public.

00:52:50.750 --> 00:52:54.460
Another security feature reminding
you that you must make these things

00:52:54.630 --> 00:52:57.830
public before anybody can invoke them.

00:53:15.460 --> 00:53:18.400
So we can at least set the subject.

00:53:18.400 --> 00:53:24.120
We'll probably get an exception
saying that we don't have the

00:53:24.120 --> 00:53:27.300
serializer for the response type,
but here you can see on the server

00:53:27.340 --> 00:53:31.840
side that we did in fact get some
input part values that we can

00:53:31.840 --> 00:53:34.360
futz with before invoking super.

00:53:34.550 --> 00:53:37.710
So this way we still don't have to do
all of the work of actually inserting

00:53:37.710 --> 00:53:39.640
or searching or deleting or whatever.

00:53:39.810 --> 00:53:44.180
We can just tune little parameters
of the operation to suit our needs.

00:53:44.180 --> 00:53:49.160
And with that,
I'd like to go back to the slides.

00:53:56.320 --> 00:53:57.300
That's it.

00:53:57.300 --> 00:54:00.500
Direct web services,
web services made easy,

00:54:00.500 --> 00:54:04.540
based on the Access and WebObjects
support for web services,

00:54:04.550 --> 00:54:07.290
using EOF so that you don't have
to write any of the CRUD code,

00:54:07.290 --> 00:54:10.980
and using the rule system to
define the parameters and the

00:54:10.980 --> 00:54:13.200
behavior of your application.

00:54:13.280 --> 00:54:15.940
With that,
I'd like to bring Karl back up.

00:54:20.700 --> 00:54:22.700
Another demo, but I did that one.

00:54:22.700 --> 00:54:23.700
There we go.

00:54:23.700 --> 00:54:24.700
Back, back.

00:54:24.700 --> 00:54:30.520
Thank you, Ron.

00:54:30.700 --> 00:54:32.700
So, running a little short on time.

00:54:32.700 --> 00:54:32.700
That's okay.

00:54:32.700 --> 00:54:34.700
Let's talk really quick.

00:54:34.920 --> 00:54:37.930
There are some deployment
considerations when you're deploying

00:54:37.930 --> 00:54:39.700
web services through WebObjects.

00:54:39.700 --> 00:54:43.660
He talked about, a little bit,
about session support and load balancing.

00:54:43.720 --> 00:54:47.850
We do support multiple instances of
WebObjects vending web services and

00:54:47.850 --> 00:54:49.700
then load balancing between them.

00:54:49.700 --> 00:54:52.630
The key to that, though,
is that the load balancing

00:54:52.700 --> 00:54:54.700
is based on cookie support.

00:54:54.930 --> 00:54:58.790
The client--we basically send
which instance you should be

00:54:58.790 --> 00:55:00.700
talking to back as an HTTP cookie.

00:55:00.700 --> 00:55:02.910
So the client has to be
able to understand that and

00:55:02.910 --> 00:55:04.700
vend it back to us properly.

00:55:04.700 --> 00:55:08.690
Otherwise, the whole transaction session
thing breaks down entirely.

00:55:08.700 --> 00:55:10.700
So that's one thing to keep in mind.

00:55:10.950 --> 00:55:12.700
The WSDL location,
you generally want to simply

00:55:12.700 --> 00:55:14.660
publish a single WSDL.

00:55:14.700 --> 00:55:16.700
It's nice that we
dynamically generate it,

00:55:16.700 --> 00:55:20.680
and it means it's easy to change,
but it's probably best if you simply

00:55:20.700 --> 00:55:22.700
put it up on a web server and then
reference it directly from there.

00:55:22.700 --> 00:55:27.220
It probably shouldn't change all
that often because a lot of people do

00:55:27.220 --> 00:55:28.700
things like generate stubs off of it.

00:55:28.700 --> 00:55:31.700
So if you change it,
you will break the client.

00:55:32.140 --> 00:55:35.140
Finally, we talked about registration.

00:55:35.140 --> 00:55:40.160
UDDI was designed to be
this sort of analog to DNS,

00:55:40.160 --> 00:55:43.590
or the phone book,
where all sorts of web services

00:55:43.630 --> 00:55:46.830
operations would register
in this gigantic directory

00:55:46.830 --> 00:55:50.920
that was all over the world,
and everybody would look up stuff there.

00:55:51.020 --> 00:55:53.000
So far, it hasn't really caught on.

00:55:53.000 --> 00:55:55.120
It's beginning to build
a little bit of momentum.

00:55:55.120 --> 00:55:58.440
It's in the GH2EE 1.4 spec, and so on.

00:55:58.570 --> 00:56:01.310
But it's still not this giant--

00:56:01.560 --> 00:56:05.260
and the original authors had intended.

00:56:05.300 --> 00:56:08.840
In lieu of that, a lot of companies use
web services internally,

00:56:09.090 --> 00:56:10.900
and in order to publish
their web services,

00:56:10.900 --> 00:56:14.910
they either have an internal UDDI server
- there are a number of free UDDI servers

00:56:14.910 --> 00:56:18.550
out there - or they do something
simple like the web page or something

00:56:18.550 --> 00:56:20.780
like the way XMethods would do it.

00:56:20.780 --> 00:56:23.650
Or just word of mouth - you
send an email out saying,

00:56:23.650 --> 00:56:25.880
"Hey guys, I've published a web service.

00:56:25.880 --> 00:56:28.790
The WSDL kit is available at blah."

00:56:30.860 --> 00:56:36.670
So web services, in two words,
even less than the one sentence,

00:56:36.670 --> 00:56:37.960
it's Internet RPC.

00:56:38.000 --> 00:56:41.800
It has lots and lots
and lots of acronyms.

00:56:41.810 --> 00:56:44.270
Hopefully you know a little
bit more about them now,

00:56:44.430 --> 00:56:45.880
but that's okay.

00:56:46.040 --> 00:56:50.000
The goal for us, of course, was that,
you know, much of that could be skipped,

00:56:50.060 --> 00:56:53.580
that we would try to do as much
of that as possible for you.

00:56:54.520 --> 00:56:57.500
They would like it to be located
and registered in a UDDI server,

00:56:57.500 --> 00:56:59.580
and because we're
talking about standards,

00:56:59.670 --> 00:57:01.440
we're kind of going to
go in that direction.

00:57:01.440 --> 00:57:04.770
It's described by the WSDL.

00:57:04.780 --> 00:57:09.800
It's sent as SOAP-encoded
XML over HTTP or SMTP,

00:57:09.800 --> 00:57:15.190
snail mail, carrier pigeon, whatever.

00:57:15.850 --> 00:57:17.470
Hey, don't knock the carrier pigeons.

00:57:17.530 --> 00:57:20.700
They were very efficient and cheap.

00:57:20.790 --> 00:57:24.400
You try laying a T1 line
versus getting a bird.

00:57:25.210 --> 00:57:28.520
So WebObjects itself,
at a very fundamental layer,

00:57:28.590 --> 00:57:32.340
very basically adds
transactions and type support.

00:57:32.380 --> 00:57:32.950
And that's good.

00:57:33.020 --> 00:57:34.000
That's helpful.

00:57:34.070 --> 00:57:37.100
The big thing for us is that
we add direct-to-web services.

00:57:37.230 --> 00:57:39.200
And this is something
I really want to stress.

00:57:39.200 --> 00:57:44.540
Direct-to-web services
provides you with automatic,

00:57:44.540 --> 00:57:47.480
comprehensive,
and very easy-to-configure web

00:57:47.480 --> 00:57:49.740
services for your entire database.

00:57:49.740 --> 00:57:54.980
You no longer have to go through and
figure out what you need to write,

00:57:54.980 --> 00:57:57.230
how do I access this, how do I expose it.

00:57:57.310 --> 00:58:00.300
You basically point direct-to-web
services at your database,

00:58:00.300 --> 00:58:03.370
bring up the assistant,
do a little bit of clicking and

00:58:03.420 --> 00:58:07.740
pointing and checking and unchecking,
and you can expose your entire

00:58:07.740 --> 00:58:09.340
database with transaction support.

00:58:09.340 --> 00:58:11.260
It looks transparent to people.

00:58:11.330 --> 00:58:13.260
They can say, "Let's start a transaction.

00:58:13.290 --> 00:58:17.290
Add some stuff, modify some things,
set up some relationship.

00:58:17.340 --> 00:58:19.340
When you're done,
check if everything's working.

00:58:19.340 --> 00:58:21.340
Check if everything's in a good state.

00:58:21.340 --> 00:58:23.330
If so, commit.

00:58:23.330 --> 00:58:23.340
If not, roll it back.

00:58:23.590 --> 00:58:25.340
It's beautiful.

00:58:25.390 --> 00:58:28.160
I believe, actually,
that it's even better than

00:58:28.160 --> 00:58:29.340
something like direct-to-web.

00:58:29.340 --> 00:58:31.340
When you build something
like direct-to-web,

00:58:31.340 --> 00:58:31.340
you're generating a UI.

00:58:31.340 --> 00:58:34.260
And then you have to tweak
the UI so it looks good,

00:58:34.260 --> 00:58:37.340
so it fits in with your site
and everything else like that.

00:58:37.460 --> 00:58:41.340
With direct-to-web services,
it's just the information.

00:58:41.340 --> 00:58:45.320
Your database is exposed directly.

00:58:45.440 --> 00:58:47.320
It can be used by multiple clients.

00:58:47.390 --> 00:58:48.940
It can be used by clients
you've never heard of.

00:58:48.940 --> 00:58:50.880
It can be used by clients you
don't know or don't recognize,

00:58:50.940 --> 00:58:52.890
can't read.

00:58:52.980 --> 00:58:54.920
It's that easy.

00:58:54.940 --> 00:58:58.790
And it's something that we would really,
really like people to take advantage of.