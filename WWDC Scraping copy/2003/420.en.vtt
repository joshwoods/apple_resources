WEBVTT

00:00:26.190 --> 00:00:27.000
Good morning.

00:00:27.150 --> 00:00:30.050
Thanks for coming out at 9
o'clock on Friday morning,

00:00:30.120 --> 00:00:32.690
especially after the
beer bash last night.

00:00:33.300 --> 00:00:37.720
There's one point of order I'd like
to just mention before we start.

00:00:37.870 --> 00:00:39.440
The network's down.

00:00:39.580 --> 00:00:43.200
Apparently over in Moscone,
they cut through the OC3.

00:00:43.200 --> 00:00:45.110
So no network today.

00:00:45.200 --> 00:00:49.170
We have a few backup strategies,
and I hope they'll work,

00:00:49.240 --> 00:00:54.190
but please bear with us if there
are a few glitches during the demos.

00:00:59.340 --> 00:01:02.660
So there have been several
sessions on the WebKit technologies

00:01:02.660 --> 00:01:06.260
at the conference so far,
and you've probably seen

00:01:06.260 --> 00:01:10.700
overviews about WebKit and
Safari and how Safari uses WebKit.

00:01:10.800 --> 00:01:14.960
What I'm going to do in this session is
drill down a bit into the WebKit APIs and

00:01:14.960 --> 00:01:20.950
show you a few specific features and some
code demos to explain how to use WebKit.

00:01:22.900 --> 00:01:26.740
As you all know,
Safari was a great success,

00:01:26.790 --> 00:01:30.280
and we're going to bring that
success to you through WebKit.

00:01:31.850 --> 00:01:33.940
So what is WebKit?

00:01:34.070 --> 00:01:39.340
WebKit is a framework that's installed on
your system when you install Safari 1.0,

00:01:39.480 --> 00:01:42.700
and it's also included with Panther.

00:01:42.740 --> 00:01:47.300
And it allows you to embed web content:
HTML, images,

00:01:47.430 --> 00:01:54.220
plugin content like QuickTime, Java,
Flash, and it entirely encapsulates

00:01:54.220 --> 00:01:56.330
the open source engine.

00:01:57.160 --> 00:02:00.520
Now I want to drill down into
a demo pretty quickly here.

00:02:00.590 --> 00:02:04.920
And like I said, no network connection.

00:02:05.020 --> 00:02:07.590
So we'll see how this goes.

00:02:10.800 --> 00:02:14.420
Now, good demos tend to flow
up the management chain.

00:02:14.440 --> 00:02:19.610
So some of the other sessions
have shown you this demo already,

00:02:19.610 --> 00:02:21.300
the Codeless Browser.

00:02:21.420 --> 00:02:23.800
But I want to use this demo
to illustrate some points.

00:02:24.020 --> 00:02:26.580
So I'm going to build the
Codeless Browser for you.

00:02:26.580 --> 00:02:29.580
How many of you saw this demo before,
the Codeless Browser demo?

00:02:29.640 --> 00:02:30.580
OK.

00:02:30.680 --> 00:02:33.300
Do you want to see it again?

00:02:33.400 --> 00:02:34.810
Yeah, OK, OK.

00:02:34.930 --> 00:02:36.990
No?

00:02:41.600 --> 00:02:46.160
I'll try and move quickly and show you
a few different things in this demo.

00:02:46.420 --> 00:02:49.230
So I'm going to launch Interface
Builder and show you the new palette,

00:02:49.240 --> 00:02:50.800
the WebKit palette.

00:02:50.830 --> 00:02:53.970
And this palette has
a single class on it,

00:02:53.970 --> 00:02:55.230
the WebView.

00:02:56.810 --> 00:02:59.860
And this little rectangle,
this deceptively simple rectangle,

00:02:59.860 --> 00:03:02.320
really is your high-level
view into the WebKit.

00:03:02.330 --> 00:03:05.910
It's where the web content will be shown.

00:03:20.770 --> 00:03:20.770
What I'm going to do is hook this up to
a text field using the normal--actually,

00:03:20.770 --> 00:03:20.770
let's skip the target action and go
directly to the binding technology.

00:03:20.770 --> 00:03:20.770
So I'll create a--

00:03:21.760 --> 00:03:24.590
I'm going to use the
controller for the web view.

00:03:24.690 --> 00:03:32.510
And I'm going to bind the text
field to the mainframe's URL.

00:03:34.470 --> 00:03:37.830
And what this will allow me to do is
keep the web view and the text field

00:03:37.840 --> 00:03:42.200
in sync as I navigate around a page.

00:03:42.630 --> 00:03:46.310
Now, one thing you haven't seen before is
showing the favorite icon for a page.

00:03:46.580 --> 00:03:50.300
So in Safari's address bar,
sometimes we show an icon for a URL.

00:03:50.650 --> 00:03:52.100
That's called a favicon.

00:03:52.300 --> 00:03:57.280
So I'm going to hook up
a favicon for this demo.

00:04:12.550 --> 00:04:12.550
I'll place that in the window.

00:04:12.550 --> 00:04:12.550
And I'll bind that to
the icon for the page.

00:04:12.550 --> 00:04:12.550
And then let's add some
back/forward buttons.

00:04:20.320 --> 00:04:26.050
and then we'll bind the back
and forward buttons to the

00:04:26.680 --> 00:04:28.790
The Web Controller.

00:04:28.790 --> 00:04:32.670
So that when we know we can go back,
they'll be enabled

00:04:33.860 --> 00:04:36.070
and disabled as appropriate.

00:04:36.070 --> 00:04:38.910
So that's pretty much it.

00:04:38.990 --> 00:04:41.750
Let me set the resize
flags for these things.

00:04:52.510 --> 00:04:52.510
And then we'll test the interface.

00:04:52.510 --> 00:04:52.510
And hopefully we'll have some degree
of net connection so I can show you

00:04:54.020 --> 00:04:59.970
Some of the capabilities of WebKit.

00:04:59.970 --> 00:04:59.970
Let's go ahead and test this interface.

00:05:00.520 --> 00:05:09.100
Now, what I'd like to do is attempt
to access this local web server.

00:05:09.470 --> 00:05:13.580
that we just set up five
minutes before the presentation.

00:05:13.640 --> 00:05:17.010
And let's hope that it is running.

00:05:19.050 --> 00:05:27.510
So I'm going to just cut and paste
the URL directly out of Safari into--

00:05:28.780 --> 00:05:30.320
There we go.

00:05:30.450 --> 00:05:31.300
Woo-hoo.

00:05:31.390 --> 00:05:32.990
Worked.

00:05:33.070 --> 00:05:36.600
Forgot to set the resize
flags on the text field.

00:05:36.790 --> 00:05:39.510
So let me go ahead and just do that.

00:05:41.480 --> 00:05:47.740
So that's a quick overview of the
high-level capabilities of the WebView.

00:05:47.920 --> 00:05:50.900
Now, I'd like to ask somebody
to come up on stage.

00:05:50.900 --> 00:05:54.820
We're going to attempt to use a modem
to connect to the World Wide Web.

00:05:55.200 --> 00:05:58.890
So you may not see the speed of --

00:05:59.080 --> 00:06:01.470
What you're used to with Safari,
but at least we'll get some

00:06:01.590 --> 00:06:04.370
external connection to the web.

00:06:07.680 --> 00:06:13.490
So, slides please.

00:06:13.560 --> 00:06:15.980
Could you switch to the slides please?

00:06:18.760 --> 00:06:19.270
slides?

00:06:19.420 --> 00:06:19.830
Cue slides?

00:06:19.890 --> 00:06:22.940
Thank you.

00:06:23.000 --> 00:06:28.510
So I'm going to recap the design goals,
a few of the design goals of the WebKit.

00:06:28.550 --> 00:06:30.970
Some of these you may have heard before.

00:06:31.320 --> 00:06:33.270
First and most importantly,
we wanted to support a

00:06:33.270 --> 00:06:38.600
world-class web browser,
and we think we've done that with Safari.

00:06:38.750 --> 00:06:42.120
Secondly,
and very importantly for this discussion,

00:06:42.180 --> 00:06:44.110
we wanted to support embedding.

00:06:44.110 --> 00:06:46.790
So that's what the WebKit's all about.

00:06:46.920 --> 00:06:51.690
And you get the same benefits that
Safari has in terms of high performance:

00:06:51.770 --> 00:06:55.490
small footprint, fast loading,
fast rendering,

00:06:55.580 --> 00:06:59.290
and excellent standard support
that Apple is really committed to

00:06:59.400 --> 00:07:02.840
continuing to enhance and extend and,
very importantly, too,

00:07:02.900 --> 00:07:04.520
a simple and flexible API.

00:07:04.520 --> 00:07:07.940
Now, you've seen how simple it is,
but often simple means

00:07:07.940 --> 00:07:09.800
limited and inflexible.

00:07:09.800 --> 00:07:13.810
We think the WebKit API,
even though at the surface level is very,

00:07:13.810 --> 00:07:16.090
very simple,
it provides you with enough hooks

00:07:16.120 --> 00:07:21.370
to really extend and customize as
appropriate in your applications.

00:07:22.920 --> 00:07:25.240
So I'm really going to
focus on this design goal,

00:07:25.370 --> 00:07:27.910
embedding, for this discussion.

00:07:29.370 --> 00:07:31.890
This is a high-level overview
of the architecture of WebKit,

00:07:32.020 --> 00:07:35.900
and it illustrates how WebKit entirely
encapsulates the open-source

00:07:36.270 --> 00:07:39.590
internals of WebKit KHTML.

00:07:39.680 --> 00:07:42.560
And we depend on a few
key system frameworks:

00:07:42.690 --> 00:07:46.550
the AppKit for native Cocoa widgets,
Core Graphics for

00:07:46.550 --> 00:07:52.400
hardware-accelerated rendering,
and Foundation for fast URL loading.

00:07:52.930 --> 00:07:57.900
Now even though Apple focuses on
the WebKit in terms of its API,

00:07:57.940 --> 00:08:01.850
we are committed to extending
and enhancing KHTML.

00:08:02.460 --> 00:08:09.720
Now, laid above this is a C API that
facilitates using the WebKit classes

00:08:09.720 --> 00:08:13.270
and technology in common applications.

00:08:15.530 --> 00:08:20.330
So as you already know, probably,
the WebKit is based on KHTML,

00:08:20.330 --> 00:08:22.380
and the WebKit is an umbrella framework.

00:08:22.520 --> 00:08:26.920
And embedded inside the umbrella
framework are two sub-frameworks,

00:08:27.150 --> 00:08:29.790
WebCore and JavaScript Core.

00:08:29.860 --> 00:08:33.750
As you know, probably, at this point,
they're open source,

00:08:33.800 --> 00:08:36.390
and they include Apple's work on KHTML.

00:08:36.510 --> 00:08:42.230
Now, a really important point is that
we're not supporting the WebCore API,

00:08:42.410 --> 00:08:45.370
which you can see if you
download the WebCore table.

00:08:45.690 --> 00:08:47.400
We're not supporting
that as a public API.

00:08:47.400 --> 00:08:50.000
It will change in the future.

00:08:50.110 --> 00:08:53.450
So instead,
use the WebKit API if you want to embed

00:08:53.450 --> 00:08:56.420
this technology in your applications.

00:08:59.560 --> 00:09:04.780
So I'm going to focus on
these key concepts when

00:09:04.780 --> 00:09:06.860
I talk about the WebKit now.

00:09:06.860 --> 00:09:09.650
Now, this isn't the only set of
functionality provided in the WebKit,

00:09:09.770 --> 00:09:12.430
but if you understand
these four basic ideas,

00:09:12.430 --> 00:09:15.680
you can really start to use the WebKit.

00:09:15.700 --> 00:09:19.700
Views -- that's how things
actually get rendered on screen.

00:09:19.860 --> 00:09:24.230
Web frames, which is how we represent
an individual frame.

00:09:24.230 --> 00:09:27.020
How you get data into the WebKit.

00:09:27.100 --> 00:09:30.040
And finally, the delegates,
which is our mechanism

00:09:30.040 --> 00:09:32.010
for extending the API.

00:09:32.410 --> 00:09:35.430
So for the next few slides,
please keep this diagram in mind.

00:09:35.530 --> 00:09:38.140
This--I'm going to come back
to this so you don't have to

00:09:38.220 --> 00:09:40.230
understand it all right now,
but this is where we're going

00:09:40.240 --> 00:09:42.140
to go for the next few slides.

00:09:42.250 --> 00:09:45.770
These are the classes and the
relationships between the classes

00:09:45.770 --> 00:09:47.650
that we're going to talk about.

00:09:48.460 --> 00:09:51.940
And to talk about the classes,
I'd like to use an HTML document,

00:09:51.940 --> 00:09:54.600
a really simple document on
the left side of the screen.

00:09:54.750 --> 00:09:57.640
On the right side of the screen,
I'm going to talk about the classes

00:09:57.830 --> 00:10:01.790
that represent the various different
aspects of that HTML document.

00:10:01.920 --> 00:10:05.230
So first up, WebView,
which you've seen already in

00:10:05.230 --> 00:10:08.630
the Codeless Browser demo.

00:10:08.740 --> 00:10:12.260
It is the rectangle that will
show you the content that's

00:10:12.260 --> 00:10:15.020
represented by your web page.

00:10:15.840 --> 00:10:19.810
Now, web pages are a little bit more
detailed than simple documents.

00:10:19.910 --> 00:10:24.540
Web pages can actually be compound
documents as represented by a frame set.

00:10:24.580 --> 00:10:29.140
So in this case, we have a really simple
frame set with two subframes.

00:10:29.310 --> 00:10:33.870
We represent a frame with
a class called WebFrame.

00:10:35.090 --> 00:10:39.170
Now, there's not a one-to-one
correspondence between a web frame

00:10:39.750 --> 00:10:43.190
and an HTML frame or an iFrame.

00:10:43.840 --> 00:10:47.360
We use a web frame even for
frameless documents to represent

00:10:47.360 --> 00:10:48.740
what we call the mainframe.

00:10:48.880 --> 00:10:54.340
So a web view will always
have at least one web frame,

00:10:54.460 --> 00:10:55.400
the mainframe.

00:10:55.520 --> 00:10:58.830
In this particular example,
there are three frames: the mainframe,

00:10:58.830 --> 00:11:04.810
and a web frame representing A.html,
and a web frame representing B.html.

00:11:06.740 --> 00:11:12.170
WebFrames, in turn, have two pieces,
what we call the Web Data Source and

00:11:12.290 --> 00:11:13.520
the Web Frame View.

00:11:13.660 --> 00:11:18.410
The Data Source holds the data,
the actual bytes that represent

00:11:18.410 --> 00:11:21.490
the document or the image,
whatever else is being

00:11:21.510 --> 00:11:22.800
shown in a Web Frame.

00:11:23.000 --> 00:11:26.280
And the Web Frame View is the
piece that does the rendering.

00:11:27.770 --> 00:11:30.260
There's a little bit more detail.

00:11:30.380 --> 00:11:36.000
So web documents can actually
be various different data types,

00:11:36.010 --> 00:11:38.600
various different MIME types
can be represented in a frame.

00:11:38.600 --> 00:11:42.560
In this case,
an HTML document and a JPEG.

00:11:42.600 --> 00:11:48.870
So for each different MIME type
that can be shown in a web frame,

00:11:48.870 --> 00:11:52.080
we have MIME type specific classes.

00:11:52.080 --> 00:11:55.530
These are actually protocols that are
implemented on private classes in WebKit.

00:11:55.600 --> 00:12:02.730
So the web data source has a web document
representation that's MIME type specific,

00:12:02.860 --> 00:12:06.590
and the web frame view has
a MIME type specific view,

00:12:06.600 --> 00:12:09.000
the web document view.

00:12:09.560 --> 00:12:14.700
So if you understand these core classes,
you really understand WebKit.

00:12:14.810 --> 00:12:18.790
Again, this is a summary of the classes
and the relationship to each other.

00:12:18.890 --> 00:12:21.300
You see we have the WebView,
and underneath the WebView we have

00:12:21.300 --> 00:12:26.620
a hierarchy of web frames that
represent the frame set on a page,

00:12:26.620 --> 00:12:29.290
or the iframes on a page,
or even just the main

00:12:29.290 --> 00:12:30.900
frame of a document.

00:12:32.660 --> 00:12:35.940
So how do you get data into the WebKit?

00:12:36.040 --> 00:12:40.400
Well, we use the new
Foundation URL loading mechanism,

00:12:40.410 --> 00:12:41.840
and there was a great
talk on that yesterday.

00:12:41.840 --> 00:12:44.500
I hope you had a chance to see that.

00:12:44.510 --> 00:12:49.110
And the two key classes that
show up in the WebKit API are the

00:12:49.110 --> 00:12:52.490
NSURL request and the NSURL response.

00:12:52.530 --> 00:12:55.500
The request represents a
response to go get data,

00:12:55.520 --> 00:13:00.480
and the response is the reply
once you receive that data.

00:13:00.500 --> 00:13:03.520
The session on this has
already happened yesterday,

00:13:03.520 --> 00:13:06.500
but I encourage you to go
back and look at it on DVD.

00:13:09.650 --> 00:13:12.200
So how do you initiate a load?

00:13:12.250 --> 00:13:14.290
You initiate a load on a web frame.

00:13:14.300 --> 00:13:17.490
Typically what you'll do is get
the main frame off the web view

00:13:17.490 --> 00:13:19.760
and tell that to load data.

00:13:19.900 --> 00:13:22.540
And you can load data
in one of three ways.

00:13:22.720 --> 00:13:24.860
You can use a request.

00:13:24.860 --> 00:13:27.750
Typically if you're going to go
and get a resource off the web,

00:13:27.870 --> 00:13:29.680
you'd use a URL request.

00:13:29.800 --> 00:13:31.500
You can specify string data.

00:13:31.590 --> 00:13:34.540
You can actually create a
little HTML page and place

00:13:34.540 --> 00:13:36.310
that right into a web view.

00:13:36.660 --> 00:13:39.260
Or alternatively, you can use NSData.

00:13:39.380 --> 00:13:43.250
And you could even, for example,
provide image data, raw image data,

00:13:43.370 --> 00:13:48.310
to a web frame, specify the MIME type,
and we'll correctly decode that and

00:13:48.310 --> 00:13:50.640
do our best to render that image.

00:13:51.410 --> 00:13:53.880
And of course,
all aspects of loading at the

00:13:53.950 --> 00:13:56.540
frame level can be monitored.

00:13:58.370 --> 00:14:03.830
So not only can web pages
be compound documents,

00:14:03.830 --> 00:14:12.310
but a single web page typically
has many sub-resources-- images,

00:14:12.310 --> 00:14:12.310
CSS, JavaScript,

00:14:12.790 --> 00:14:17.060
We even consider subframes
resources in a certain sense.

00:14:17.110 --> 00:14:19.330
Now, these resources are loaded
automatically for you.

00:14:19.340 --> 00:14:22.940
You don't have to do anything to
have WebKit load resources for you.

00:14:22.940 --> 00:14:24.700
It happens behind the scenes.

00:14:24.700 --> 00:14:28.750
But you can, if you wish to,
monitor the load of these

00:14:28.790 --> 00:14:33.700
subresources and even change
the loading of these resources.

00:14:33.740 --> 00:14:35.700
You can redirect URLs to
completely different sites.

00:14:35.700 --> 00:14:37.700
You can change the caching mechanisms.

00:14:37.700 --> 00:14:41.500
You have complete flexibility
about how these subresources

00:14:41.500 --> 00:14:43.290
are loaded if you want to.

00:14:44.990 --> 00:14:49.280
So I'd like to actually jump down
into some code before we go back

00:14:49.280 --> 00:14:53.180
to another demo and show you how
easy it is to create a web view.

00:14:53.220 --> 00:14:55.060
Now typically you would do
this with Interface Builder.

00:14:55.220 --> 00:14:56.450
You wouldn't have to write this code.

00:14:56.540 --> 00:14:59.930
But if you want to,
this is how you would create a web view.

00:14:59.990 --> 00:15:05.280
You simply alloc an initWithFrame
like any other NSView and then

00:15:05.330 --> 00:15:07.680
add that to your view hierarchy,
depending upon how your

00:15:07.680 --> 00:15:09.920
application is set up.

00:15:12.420 --> 00:15:18.690
Then to load data, you typically get the
mainframe of the web view and

00:15:20.220 --> 00:15:24.000
Create a request and
then load that request.

00:15:24.050 --> 00:15:25.790
It's as simple as that.

00:15:26.550 --> 00:15:31.040
Alternatively, in this example,
I've created a little HTML fragment.

00:15:31.210 --> 00:15:36.830
And the WebKit engine, the KHTML engine,
is really--

00:15:37.110 --> 00:15:39.380
is smart enough to
understand fragments of HTML.

00:15:39.460 --> 00:15:41.560
So in this case, it's really malformed.

00:15:41.600 --> 00:15:43.820
There's not even an HTML tag.

00:15:43.860 --> 00:15:46.850
But the WebKit engine will still
go ahead and render this correctly.

00:15:52.490 --> 00:15:56.750
So one more code example
before we jump to a demo.

00:15:57.070 --> 00:16:02.810
This is a little snippet that shows
you how to extract the HTML source

00:16:03.340 --> 00:16:07.400
off the data source's representation
once a document is loaded.

00:16:07.400 --> 00:16:09.360
So in this case,
I simply get the mainframe.

00:16:09.450 --> 00:16:11.400
I get the data source off the mainframe.

00:16:11.400 --> 00:16:15.400
I get its representation,
which again is MIME type specific.

00:16:15.400 --> 00:16:19.240
And I ask that if it's capable
of providing document source,

00:16:19.510 --> 00:16:22.360
because if it's an image,
a JPEG for example,

00:16:22.410 --> 00:16:24.400
it won't be able to provide
me with document source.

00:16:24.400 --> 00:16:28.360
I get the document source,
and then I log it to the console.

00:16:29.750 --> 00:16:33.390
So the demo I'd like to
show you next highlights one

00:16:33.460 --> 00:16:37.250
specific aspect of the WebKit,
which I think is really interesting and

00:16:37.250 --> 00:16:40.380
allows for some creative opportunities.

00:16:40.490 --> 00:16:43.440
Hopefully it will inspire you
to think about different ways to

00:16:43.440 --> 00:16:45.250
use WebKit in your applications.

00:16:46.180 --> 00:16:50.150
So one thing we get asked a lot is
how do I interact with the document?

00:16:50.230 --> 00:16:55.010
If I load a document in WebKit,
in my application code,

00:16:55.120 --> 00:16:57.520
how can I change the document?

00:16:57.520 --> 00:16:59.380
How can I modify the DOM?

00:16:59.380 --> 00:17:03.830
Well, the way you do that is to execute
JavaScript in the document's context.

00:17:04.330 --> 00:17:09.040
And a typical approach to this is in the
content that you may display via WebKit,

00:17:09.040 --> 00:17:11.170
define a JavaScript function.

00:17:11.170 --> 00:17:15.880
And then from your application code,
invoke that JavaScript function.

00:17:16.330 --> 00:17:19.680
And as I said,
you can use this to modify the DOM of

00:17:19.680 --> 00:17:22.800
the document in pretty creative ways.

00:17:22.930 --> 00:17:28.570
So this is a little code example
that shows an HTML page with a

00:17:28.690 --> 00:17:34.700
JavaScript snippet that has a
function to find an element on a page,

00:17:34.740 --> 00:17:38.400
in this case an image element,
using the standard

00:17:38.400 --> 00:17:40.550
DOM API getElementById.

00:17:40.800 --> 00:17:43.050
And then it modifies the image width.

00:17:43.120 --> 00:17:46.040
Now, by default, when you modify one
dimension of an image,

00:17:46.100 --> 00:17:49.350
both the width and the height
of that image will change.

00:17:49.460 --> 00:17:52.470
So this effectively
scales down the image.

00:17:56.550 --> 00:17:58.970
How do you invoke that
from your application code?

00:17:59.160 --> 00:18:02.420
This is how,
with this little piece of Objective-C.

00:18:02.750 --> 00:18:07.050
I create a string that represents
the JavaScript I'd like to execute,

00:18:07.090 --> 00:18:11.250
and then I simply tell the WebView,
"Execute this string," and that

00:18:11.360 --> 00:18:15.500
will execute the JavaScript in
the context of the document.

00:18:15.570 --> 00:18:17.830
So let's go ahead and do a demo of this.

00:18:26.110 --> 00:18:27.790
Am I actually live on the net?

00:18:28.060 --> 00:18:29.000
Sure.

00:18:29.250 --> 00:18:29.980
Okay.

00:18:30.080 --> 00:18:31.440
Before we do this,
let me try and show you another piece

00:18:31.510 --> 00:18:36.000
of the demo I would have liked to have
shown you earlier had the net been up.

00:18:36.000 --> 00:18:37.890
And bear with me if it doesn't work.

00:18:38.050 --> 00:18:41.270
We're on a modem,
and it's been a long time

00:18:41.330 --> 00:18:44.000
since I've used a modem.

00:18:44.190 --> 00:18:47.500
So who knows what the speed will be like.

00:18:52.110 --> 00:18:54.030
Isn't it back by the way?

00:18:54.310 --> 00:18:55.130
Are we?

00:18:55.230 --> 00:18:57.110
No, we're not?

00:18:57.110 --> 00:18:57.110
Okay.

00:18:59.720 --> 00:19:02.960
So this is a site that I don't
know if you've been to,

00:19:03.120 --> 00:19:05.200
brainjaw.com.

00:19:05.260 --> 00:19:07.800
And is it going to load?

00:19:07.840 --> 00:19:09.960
I don't think it's going to load.

00:19:14.400 --> 00:19:20.700
Okay, so give it a few more seconds.

00:19:20.720 --> 00:19:22.400
Loading, loading, loading.

00:19:22.400 --> 00:19:30.200
No, we're not going to get
to see anything there.

00:19:30.200 --> 00:19:30.200
So let me --

00:19:31.860 --> 00:19:35.800
Exit Interface Builder.

00:19:35.800 --> 00:19:38.480
Okay, how about we force
quit Interface Builder?

00:19:38.600 --> 00:19:39.770
Time to move on.

00:19:40.120 --> 00:19:41.000
Force quit.

00:19:41.400 --> 00:19:41.900
Bye-bye.

00:19:42.070 --> 00:19:43.530
Okay.

00:19:43.890 --> 00:19:49.970
So let me bring up a project in Xcode.

00:19:53.100 --> 00:19:58.200
[Transcript missing]

00:20:01.700 --> 00:20:18.000
[Transcript missing]

00:20:18.440 --> 00:20:22.380
So let me go ahead and just show you the
content that I'm going to display here.

00:20:22.510 --> 00:20:23.600
This content's kind of interesting.

00:20:23.600 --> 00:20:27.620
It's three divs, and they're layered,
and one of the divs has a

00:20:27.620 --> 00:20:31.900
transparent image in it,
so you can see this nice transparency.

00:20:31.900 --> 00:20:36.210
Gives you a sense of some of the
advanced features of our engine.

00:20:36.810 --> 00:20:40.200
Now what I'd like to do is add a
couple of buttons to this window.

00:20:40.260 --> 00:20:42.920
And when I click those buttons,
I'd like to zoom the

00:20:42.920 --> 00:20:44.460
picture of the spider.

00:20:44.600 --> 00:20:47.700
Now this spider happens to be
the mascot of the Safari team

00:20:47.700 --> 00:20:49.450
before we had the nice compass.

00:20:49.600 --> 00:20:52.120
We used this internally for a long time.

00:20:53.440 --> 00:20:57.900
So let me go ahead and add those
two buttons in Interface Builder.

00:20:57.900 --> 00:21:02.890
I'm going to shrink this
window a little bit.

00:21:03.070 --> 00:21:05.480
And I'm going to add a button to zoom in.

00:21:05.520 --> 00:21:11.650
Don't need the capital N.

00:21:11.910 --> 00:21:14.410
And a button to zoom out.

00:21:18.830 --> 00:21:20.970
Then we'll go ahead and connect these.

00:21:21.080 --> 00:21:23.290
Zoom in and zoom out.

00:21:23.390 --> 00:21:25.780
And what I'm connecting these
to is just a simple custom

00:21:25.870 --> 00:21:27.270
class that's been instantiated.

00:21:27.500 --> 00:21:29.380
It's called Zuma.

00:21:29.870 --> 00:21:31.790
Now let's write these methods
that we've just connected.

00:21:31.860 --> 00:21:33.900
Zoom in and zoom out.

00:21:34.030 --> 00:21:37.470
So I'm going to go back
to-- let me just save that.

00:21:39.790 --> 00:21:46.590
I'm going to go back to Xcode
and bring up some source code.

00:21:46.660 --> 00:21:53.520
Now this is a pretty simple class.

00:21:55.510 --> 00:21:56.940
Hello.

00:21:56.940 --> 00:22:01.350
Okay, let's try bringing that up
in the next little window.

00:22:02.210 --> 00:22:06.520
So the first thing this class does is--
and it's awake from Nib method-- is

00:22:06.520 --> 00:22:10.850
it loads the template that we're going
to display for that HTML document.

00:22:10.920 --> 00:22:18.290
And this just uses the normal
Cocoa bundle and string functions.

00:22:18.690 --> 00:22:23.710
So then we go ahead and invoke
the mainframe load HTML string

00:22:24.140 --> 00:22:25.450
to load that template.

00:22:25.590 --> 00:22:29.930
Let me just show you the document
really quickly that we're going to load.

00:22:31.970 --> 00:22:35.590
This is simple HTML that
has some styling,

00:22:35.690 --> 00:22:41.110
has some script,
a zoom in and a zoom out method.

00:22:41.720 --> 00:22:47.350
And this is the image element
that we're going to reference.

00:22:47.780 --> 00:22:53.070
Backup in our JavaScript when
we change the width and height.

00:22:59.180 --> 00:23:05.340
To add the zoom in and zoom out actions,
I'm going to scroll down to

00:23:05.340 --> 00:23:08.120
this code and just enable it.

00:23:10.020 --> 00:23:11.570
You can see it's pretty simple.

00:23:11.650 --> 00:23:13.900
I have the web view.

00:23:13.910 --> 00:23:16.400
String by evaluating
JavaScript from string.

00:23:16.420 --> 00:23:19.790
Zoom image in, and I pass in the name
of the image element that

00:23:19.790 --> 00:23:23.900
I want to find and invoke it.

00:23:23.900 --> 00:23:26.470
So let's go ahead and build.

00:23:31.370 --> 00:23:35.860
And once it's linked, we'll run it.

00:23:36.000 --> 00:23:39.100
I guess I have to quit it first.

00:23:42.690 --> 00:23:44.600
There we have it.

00:23:44.600 --> 00:23:52.770
I forgot to set the resize flags again,
but I can zoom in, zoom out.

00:23:54.130 --> 00:23:55.810
And of course,
you can use the same technique

00:23:56.340 --> 00:23:58.820
to modify any aspect of the page.

00:23:59.010 --> 00:24:03.780
It's not just limited to
this particular feature.

00:24:14.150 --> 00:24:14.150
So what I'd like to do now is
to--let me just clean up a little

00:24:14.150 --> 00:24:14.150
bit and then go back to the slides.

00:24:24.220 --> 00:24:27.640
So we've covered the important
classes of the WebKit:

00:24:27.670 --> 00:24:31.870
the WebView, the WebFrame,
the DataSource, the FrameView.

00:24:32.430 --> 00:24:36.050
The next really big set of important
functionality are the delegates.

00:24:36.150 --> 00:24:42.700
And unlike most other Cocoa delegates,
where there's one delegate per class,

00:24:42.700 --> 00:24:45.880
we actually have four
delegates per class,

00:24:45.890 --> 00:24:48.230
per web view, I should say.

00:24:48.970 --> 00:24:54.780
And this is how we control
most aspects of the WebKit.

00:24:55.080 --> 00:25:00.870
Each delegate can implement methods that
are defined by an informal protocol.

00:25:00.880 --> 00:25:04.240
And for those of you that aren't
familiar with informal protocols,

00:25:04.290 --> 00:25:08.000
this is really just an interface
with methods that may be optionally

00:25:08.000 --> 00:25:09.780
implemented on your class.

00:25:09.960 --> 00:25:13.040
And again, I emphasize optional because
you don't have to implement any

00:25:13.040 --> 00:25:14.490
delegates to make WebKit work.

00:25:14.560 --> 00:25:17.400
It's only if you want
to customize behavior.

00:25:17.520 --> 00:25:19.720
And as I mentioned,
all of the delegates are

00:25:19.720 --> 00:25:21.170
managed by the WebView.

00:25:22.330 --> 00:25:27.100
So going back to our previous diagram,
these four delegates fit

00:25:27.100 --> 00:25:29.000
into the web view like this.

00:25:29.000 --> 00:25:32.560
And I'll come back to this diagram again,
but this is where we're going.

00:25:34.560 --> 00:25:38.380
Those four delegates are
the WebFrame load delegate.

00:25:38.420 --> 00:25:43.770
It monitors the progress of a
document load at the document level.

00:25:44.210 --> 00:25:47.490
The Web Resource Load Delegate,
and it will let you look at each

00:25:47.530 --> 00:25:52.540
individual image and CSS file
and JavaScript file as it loads.

00:25:52.640 --> 00:25:55.460
The Web Policy Delegate,
which gives you a great amount

00:25:55.560 --> 00:25:59.600
of flexibility about how you
want to manage link traversal.

00:25:59.630 --> 00:26:02.000
So the user clicks on a link,
what happens next?

00:26:02.240 --> 00:26:05.100
The Policy Delegate will
let you handle that.

00:26:05.170 --> 00:26:06.600
And the Web UI Delegate.

00:26:06.750 --> 00:26:09.220
The Web UI Delegate is
responsible for managing all of

00:26:09.230 --> 00:26:13.140
the Chrome related to a window,
and also the window itself,

00:26:13.250 --> 00:26:15.880
as well as handling
JavaScript interaction for

00:26:15.880 --> 00:26:18.530
things like status and alerts.

00:26:22.480 --> 00:26:29.270
So when you load a document over the web,
it's actually a relatively

00:26:29.270 --> 00:26:34.260
complicated process,
or detailed process, I should say.

00:26:34.340 --> 00:26:38.900
And at the simple level,
it's described by these four states.

00:26:39.030 --> 00:26:41.340
You start loading a document.

00:26:41.700 --> 00:26:44.310
We have this notion of a
document being committed,

00:26:44.310 --> 00:26:46.290
and I'll come back to that in a second.

00:26:46.370 --> 00:26:51.060
The document finishing loading,
or it's being done,

00:26:51.120 --> 00:26:54.850
and then finally the document going away,
being closed.

00:26:54.950 --> 00:26:57.850
Now what's this committed thing?

00:26:57.850 --> 00:26:57.850
Well,

00:26:58.440 --> 00:27:00.300
The web tends to be error-prone.

00:27:00.430 --> 00:27:05.100
So typically,
if you initiate a load of a document,

00:27:05.290 --> 00:27:08.100
and for whatever reason
the server doesn't respond,

00:27:08.100 --> 00:27:10.520
we don't get any data back,

00:27:10.660 --> 00:27:13.260
That document isn't committed.

00:27:13.320 --> 00:27:17.590
It's really a provisional load until
you reach this committed stage.

00:27:17.630 --> 00:27:21.280
It's only once we receive some
data back from the server that the

00:27:21.280 --> 00:27:25.200
load becomes really valid and you
can progress to the next stages.

00:27:25.370 --> 00:27:30.100
So this notion of provisional and
committed really is very important

00:27:30.100 --> 00:27:33.190
during the loading stages of a document.

00:27:33.740 --> 00:27:36.480
Things get even more detailed, though.

00:27:36.550 --> 00:27:38.090
Before you can get to
the committed stage,

00:27:38.220 --> 00:27:41.130
often a server may redirect you
to an entirely different site.

00:27:41.250 --> 00:27:44.030
So you enter one URL,
and the server redirects you to

00:27:44.030 --> 00:27:46.600
an entirely different location.

00:27:46.620 --> 00:27:50.600
And we'll give the frame load delegate
an indication when this happens.

00:27:50.600 --> 00:27:51.950
And this can happen one or more times.

00:27:52.020 --> 00:27:55.450
You can get redirected to several
servers before you get to the final

00:27:55.450 --> 00:27:57.760
page that's going to be shown.

00:27:58.350 --> 00:28:00.540
There's yet more detail.

00:28:00.540 --> 00:28:06.000
So to provide good user
feedback during a page load,

00:28:06.110 --> 00:28:08.840
what you'd often like to
do is show perhaps the page

00:28:09.070 --> 00:28:10.950
title or the favorite icon.

00:28:11.100 --> 00:28:15.540
So we'll give you delegate callbacks
when we receive that information.

00:28:16.620 --> 00:28:19.470
And then finally,
even after a document is loaded,

00:28:19.600 --> 00:28:22.880
the user might want to navigate
to a link within a page,

00:28:23.000 --> 00:28:25.000
an anchor point within a page.

00:28:25.090 --> 00:28:27.320
So we'll tell you when that happens.

00:28:27.580 --> 00:28:29.950
And finally,
the last notification that the

00:28:29.950 --> 00:28:33.500
frame load delegate receives is
if a client redirect happens.

00:28:33.500 --> 00:28:36.500
For example,
it might be a meta-redirect on a page.

00:28:36.500 --> 00:28:40.360
And that you might be redirected
to another site entirely.

00:28:40.540 --> 00:28:43.450
Or perhaps JavaScript might
change the location of a page.

00:28:43.590 --> 00:28:48.430
So all of these events are sent
to the WebFrame load delegate.

00:28:50.320 --> 00:28:54.610
Now, the Web Resource Load Delegate is,
again, the delegate that receives

00:28:54.610 --> 00:29:00.310
messages about loads of images,
CSS, JavaScript.

00:29:00.330 --> 00:29:07.220
And it has these four set of methods that
are sent to the resource load delegate.

00:29:07.220 --> 00:29:10.210
When we send the initial request,
and at this point you have an

00:29:10.210 --> 00:29:13.940
opportunity to look at the request,
modify it in whatever way you choose,

00:29:13.970 --> 00:29:16.150
including canceling the request entirely.

00:29:16.300 --> 00:29:18.560
You can add headers,
you can change the URL,

00:29:18.620 --> 00:29:20.450
you can do whatever you want.

00:29:21.190 --> 00:29:26.340
Then you receive a callback telling
you that the server has responded.

00:29:26.340 --> 00:29:29.100
And again, you have a chance to
look at the response.

00:29:29.220 --> 00:29:34.740
And for those of you that are familiar
with the NSURL response and request APIs,

00:29:34.960 --> 00:29:38.050
this should be very familiar to you.

00:29:38.440 --> 00:29:40.970
Then after the response,
you get a number of callbacks

00:29:41.160 --> 00:29:44.300
for each data packet that
we receive from the server.

00:29:44.300 --> 00:29:46.830
In fact,
you may receive multiple of those,

00:29:46.880 --> 00:29:49.300
depending upon how the server responds.

00:29:49.300 --> 00:29:52.300
And then finally,
when the resource is finished loading,

00:29:52.300 --> 00:29:54.930
you get a done message.

00:29:57.590 --> 00:29:58.660
The policy delegate.

00:29:58.750 --> 00:30:01.630
This delegate's a little different
than the other delegates.

00:30:01.740 --> 00:30:03.920
The other delegates mostly
are just callbacks to tell

00:30:04.140 --> 00:30:06.200
you about things happening.

00:30:06.570 --> 00:30:08.900
The policy delegate actually
asks you a question:

00:30:08.900 --> 00:30:12.920
"What should I do when
navigation happens?

00:30:13.110 --> 00:30:15.610
Tell me how I should respond."

00:30:15.780 --> 00:30:18.140
And the response can be asynchronous.

00:30:18.260 --> 00:30:21.080
So you can put up modal dialogues,
wait for user response,

00:30:21.130 --> 00:30:24.200
and then tell WebKit how to continue.

00:30:24.300 --> 00:30:28.000
And for each of the methods that
we send to the policy delegate,

00:30:28.060 --> 00:30:30.340
there are three possible choices.

00:30:30.560 --> 00:30:32.840
Go ahead and use it
as you normally would,

00:30:32.910 --> 00:30:34.540
the default policy.

00:30:34.650 --> 00:30:35.740
Ignore it.

00:30:35.850 --> 00:30:36.950
Stop whatever you're doing.

00:30:37.190 --> 00:30:39.630
Drop this load on the floor.

00:30:39.720 --> 00:30:40.750
Or download.

00:30:40.960 --> 00:30:44.750
Download the URL to disk.

00:30:47.210 --> 00:30:49.900
So the policy delegate is
consulted at least three times

00:30:50.100 --> 00:30:52.250
during the document load.

00:30:52.450 --> 00:30:55.090
Initially, it's asked,
"Should I open this URL in

00:30:55.090 --> 00:30:58.410
a new window?" And if so,
the UI delegate comes into play.

00:30:58.720 --> 00:31:02.130
Remember, it's the thing responsible
for managing windows.

00:31:02.510 --> 00:31:04.680
Should I go ahead and
handle this request?

00:31:04.790 --> 00:31:08.350
This gives the policy delegate a
chance to look at the request details,

00:31:08.590 --> 00:31:10.790
potentially present the
user with a dialogue like,

00:31:11.060 --> 00:31:13.620
"This is an HTTPS request.

00:31:13.870 --> 00:31:17.480
Do you really want to do
that?" And then finally,

00:31:17.480 --> 00:31:20.980
based on the MIME type that we receive,
and this happens after

00:31:20.980 --> 00:31:23.250
we send the request,
we get the response

00:31:23.250 --> 00:31:27.130
back with the MIME type,
what should I do with the MIME type?

00:31:27.400 --> 00:31:32.700
This may be the location, for example,
that you hand off a request

00:31:32.770 --> 00:31:38.040
to launch services to handle
opening the request externally.

00:31:40.320 --> 00:31:41.690
UI delegate.

00:31:41.690 --> 00:31:46.180
The UI delegate is probably the
fattest delegate in terms of

00:31:46.190 --> 00:31:47.560
the total number of methods.

00:31:47.560 --> 00:31:49.820
And is responsible for all of the Chrome.

00:31:49.890 --> 00:31:53.530
So in Safari this is the thing
that opens up a new window.

00:31:53.540 --> 00:31:58.800
It manages the status bar at
the bottom of the Safari window.

00:31:58.800 --> 00:32:02.100
It manages the toolbar
at the top of the window.

00:32:02.180 --> 00:32:04.880
And it presents JavaScript alerts.

00:32:04.880 --> 00:32:08.410
And this allows you to
modify the context menus.

00:32:08.510 --> 00:32:12.220
So if you control click or for
those people with two mice,

00:32:12.220 --> 00:32:17.510
right click on an element,
the UI delegate is referenced.

00:32:19.470 --> 00:32:21.940
So back to this diagram.

00:32:22.100 --> 00:32:26.260
This is what we've covered so far:
the classes, the core classes of WebKit,

00:32:26.460 --> 00:32:29.250
and the delegates of WebView.

00:32:30.200 --> 00:32:36.330
The WebFrame Load Delegate lets you
monitor the load at a document level.

00:32:36.420 --> 00:32:41.090
The WebResource Load Delegate lets
you monitor loading per resource.

00:32:41.180 --> 00:32:44.700
The WebPolicy Delegate,
which lets you intervene to

00:32:44.700 --> 00:32:47.060
manage navigation actions.

00:32:47.150 --> 00:32:53.000
And the WebUI Delegate,
which lets you manage the UI Chrome.

00:32:53.130 --> 00:32:56.210
So I'd like to go back to a demo.

00:33:02.790 --> 00:33:03.530
Oh, are we back?

00:33:03.540 --> 00:33:08.320
Exciting.

00:33:08.460 --> 00:33:11.490
Oh, it's modem, it's just modem.

00:33:11.500 --> 00:33:12.070
Oh.

00:33:12.340 --> 00:33:15.410
Okay.

00:33:17.460 --> 00:33:24.900
Well, let me take a step on the
wild side and try-- OK,

00:33:24.900 --> 00:33:25.490
just in Safari.

00:33:25.500 --> 00:33:28.400
I want to show you this page
because I think it's really cool.

00:33:31.550 --> 00:33:35.800
I'll do it in Safari, but remember,
that rectangle in Safari is the same

00:33:35.800 --> 00:33:38.340
rectangle that you would see in WebKit.

00:33:38.380 --> 00:33:44.490
So what you can do in Safari,
you can do in WebKit.

00:33:47.220 --> 00:33:52.310
And this demo highlights some of
the amazing things that you can

00:33:52.310 --> 00:33:53.740
do with modern web standards.

00:33:53.880 --> 00:33:59.320
This is just simple HTML and JavaScript.

00:34:01.950 --> 00:34:03.980
Pretty cool, huh?

00:34:04.030 --> 00:34:09.190
Minimize windows, expand them,
close them.

00:34:10.500 --> 00:34:13.120
So think about this when you're
thinking about WebKit applications.

00:34:13.170 --> 00:34:15.550
It's not just for web browsing.

00:34:15.650 --> 00:34:20.800
You can use the power of HTML, CSS,
and JavaScript in marvelous and creative

00:34:20.800 --> 00:34:22.960
ways that we can't even anticipate yet.

00:34:23.030 --> 00:34:26.710
I think that there will probably
be 20 browsers on version

00:34:26.710 --> 00:34:28.780
tracker in the next few months.

00:34:28.880 --> 00:34:32.030
But we think Safari is pretty good,
and I'm sure there are going to

00:34:32.030 --> 00:34:33.440
be other good browsers out there.

00:34:33.570 --> 00:34:37.270
But think about other ways to use WebKit.

00:34:39.320 --> 00:34:43.200
Okay, back to the demo.

00:34:43.300 --> 00:34:48.190
So what I'd like to do is go back to the

00:34:48.310 --> 00:34:51.340
image zoomer demo and add a context menu.

00:34:51.340 --> 00:34:55.650
So I had buttons at the top of the
screen to zoom in and zoom out.

00:34:55.780 --> 00:34:59.510
What about using a context menu
to zoom in and out on that image,

00:34:59.560 --> 00:35:01.240
but only when I mouse over an image?

00:35:01.530 --> 00:35:03.300
Let's do that.

00:35:05.900 --> 00:35:08.300
So I'm going to bring up the
source again for the image zoomer.

00:35:08.300 --> 00:35:14.560
And the first thing
I need to do is set up

00:35:16.280 --> 00:35:17.860
A delegate.

00:35:17.930 --> 00:35:22.020
And I'm going to just add that code.

00:35:22.700 --> 00:35:24.900
up in the wake from nib method.

00:35:24.900 --> 00:35:25.700
It's as simple as that.

00:35:25.700 --> 00:35:30.530
I'm setting self as the UI delegate.

00:35:32.590 --> 00:35:37.410
And then the one method that I care
about for this demo is the method

00:35:37.630 --> 00:35:41.900
that lets the UI delegate specify

00:35:44.460 --> 00:35:47.240
The context menu.

00:35:47.270 --> 00:35:52.460
So in this case,
if you're familiar with Cocoa,

00:35:52.460 --> 00:35:54.800
you'll be familiar with this code here.

00:35:54.840 --> 00:36:01.550
And the expected response of this method,
WebView context menu items for element,

00:36:01.630 --> 00:36:04.440
default menu items,
is an array that contains the menu

00:36:04.440 --> 00:36:08.680
items that are going to be shown
when you context click on an item.

00:36:08.820 --> 00:36:12.710
So in this case, I only care about

00:36:13.070 --> 00:36:32.450
Image URL Keys.

00:36:32.450 --> 00:36:32.450
So if the click is over an image URL,
I'm going to go ahead and

00:36:32.450 --> 00:36:32.450
construct two menu items,
zoom in and zoom out,

00:36:32.450 --> 00:36:32.450
and return that array.

00:36:32.450 --> 00:36:32.450
Otherwise, I return nil.

00:36:32.450 --> 00:36:32.450
So we'll get no context menus unless
the user right-clicks on an image.

00:36:33.520 --> 00:36:36.000
Let me go ahead and build this.

00:36:36.130 --> 00:36:38.030
Save all files, yes.

00:36:38.200 --> 00:36:40.860
Build.

00:36:40.860 --> 00:36:44.180
And then once it's linked,
we'll go ahead and run it again.

00:36:46.140 --> 00:36:50.880
So, zoom in, zoom out, buttons,
but now if I hold down the control key,

00:36:50.920 --> 00:36:52.160
I have a context menu.

00:36:52.270 --> 00:36:54.400
Zoom in, I get the same behavior.

00:36:54.480 --> 00:36:57.800
Zoom out.

00:36:57.810 --> 00:36:59.630
Simple as that.

00:37:01.700 --> 00:37:04.560
So this is an interesting demo,
but it's somewhat contrived.

00:37:04.600 --> 00:37:06.390
Would you ever really want to do this?

00:37:06.570 --> 00:37:07.890
Probably not.

00:37:08.090 --> 00:37:12.280
But the same technique can be used in an
application that's actually on the SDK,

00:37:12.280 --> 00:37:16.330
which is useful actually as an
application in its own right.

00:37:16.410 --> 00:37:18.610
I'm going to show you
that application now.

00:37:18.710 --> 00:37:24.480
And the entire source code for this
application is available on the SDK.

00:37:24.480 --> 00:37:25.870
Let's go ahead and hide others.

00:37:26.880 --> 00:37:31.420
And this is a browsing application
that lets you browse pictures.

00:37:31.480 --> 00:37:36.170
And I often use this when I'm trolling
for icons to use in my applications.

00:37:36.220 --> 00:37:38.880
So I'm going to open up
the applications directory.

00:37:38.880 --> 00:37:42.690
And on the left side of the screen,
we see a list of the applications,

00:37:42.690 --> 00:37:44.140
kind of like a finder.

00:37:44.140 --> 00:37:52.220
And I can drill down into --
let's take a look at iPhoto.

00:37:52.220 --> 00:37:52.220
I can drill down into --

00:37:52.400 --> 00:38:06.700
[Transcript missing]

00:38:08.480 --> 00:38:09.890
It's really useful for looking at images.

00:38:10.010 --> 00:38:15.340
So if I can even zoom in,
click back and forth,

00:38:15.380 --> 00:38:17.500
and you get a lot of the features which
I'm not going to talk about today,

00:38:17.500 --> 00:38:19.000
like back and forward and history.

00:38:19.050 --> 00:38:22.650
These things are relevant for
applications other than web browsers.

00:38:22.820 --> 00:38:25.580
So if I go back, you know,
I really set up a nice

00:38:25.720 --> 00:38:27.410
little back-forward.

00:38:27.420 --> 00:38:33.670
Let me show you some pictures that
I took this weekend at Oakland Zoo.

00:38:40.390 --> 00:38:45.390
This demo actually makes
use of a custom protocol,

00:38:45.470 --> 00:38:46.210
believe it or not.

00:38:46.470 --> 00:38:50.360
The URLs for these pages
aren't HTTP or file URLs.

00:38:50.580 --> 00:38:53.970
They're a custom protocol,
and that protocol is interpreted to

00:38:53.970 --> 00:38:57.700
generate on-the-fly HTML content.

00:38:58.660 --> 00:39:01.940
As I click on a link,
this is actually what I call a

00:39:02.030 --> 00:39:08.030
picture browser protocol that
lets me generate the wrapper

00:39:08.030 --> 00:39:10.630
HTML for this particular content.

00:39:11.260 --> 00:39:14.350
So I encourage you to take a look
at that application for tips and

00:39:14.410 --> 00:39:15.660
techniques about how to use WebKit.

00:39:23.290 --> 00:39:24.820
There's one more demo
I'd like to show you.

00:39:24.880 --> 00:39:30.560
And this is, again,
a demo that is available on the SDK.

00:39:30.560 --> 00:39:33.480
The full source of it
is available on the SDK.

00:39:33.670 --> 00:39:35.200
And this is more of a
traditional browser.

00:39:35.200 --> 00:39:40.920
It really tries to show you the
capabilities from a browser perspective.

00:40:04.020 --> 00:40:04.020
Let me fire up this.

00:40:04.020 --> 00:40:04.020
It's called the mini browser.

00:40:04.020 --> 00:40:04.020
That's the name on the SDK.

00:40:04.020 --> 00:40:04.020
Let me go ahead and run it for you now.

00:40:04.020 --> 00:40:04.020
And I guess I'm still on the modem,
so speedy Safari isn't

00:40:04.020 --> 00:40:04.020
so speedy on a modem,
but it's still pretty good on a modem.

00:40:04.020 --> 00:40:04.020
So I have a lot of the features
that I normally expect.

00:40:04.020 --> 00:40:04.020
I can --

00:40:04.420 --> 00:40:06.600
You know, make text bigger,
if there is any text.

00:40:06.700 --> 00:40:08.440
On this page, there isn't too much text.

00:40:08.590 --> 00:40:10.180
Smaller.

00:40:10.910 --> 00:40:14.000
Now, one thing you'll notice though is
that I don't get a lot of feed--oh,

00:40:14.000 --> 00:40:15.580
this is actually good.

00:40:15.580 --> 00:40:18.310
A slow link,
I can show progress feedback better

00:40:18.710 --> 00:40:21.220
because it takes so long to load.

00:40:21.400 --> 00:40:25.290
So if I go to another page,
take a look at the title bar there.

00:40:25.760 --> 00:40:26.540
This is loading.

00:40:26.540 --> 00:40:29.600
Loading, loading, loading.

00:40:29.760 --> 00:40:32.600
We've got the title,
but I'd like to provide

00:40:32.600 --> 00:40:35.690
a bit more feedback,
maybe a counter that shows me the

00:40:35.690 --> 00:40:38.400
number of resources that are loading.

00:40:38.400 --> 00:40:39.540
One of 40.

00:40:39.810 --> 00:40:43.190
That would progress as
I load additional resources.

00:40:44.040 --> 00:40:46.750
And at least it would give me some
idea that the page is still loading.

00:40:46.760 --> 00:40:50.200
That's actually pretty good on a modem.

00:40:50.200 --> 00:40:52.300
Okay.

00:40:52.300 --> 00:40:55.350
So let me go ahead and
add those features.

00:41:00.030 --> 00:41:06.730
So what I'm going to do to enable
these features is extend the

00:41:06.730 --> 00:41:11.990
document for the mini browser
to be a resource load delegate.

00:41:12.090 --> 00:41:15.500
Remember, the resource load delegate is
the thing that gets notified as

00:41:15.500 --> 00:41:18.330
resources arrive over the net.

00:41:35.310 --> 00:41:35.310
And I think there'll
be some code down here.

00:41:35.310 --> 00:41:35.310
Yeah, look at that.

00:41:35.310 --> 00:41:35.310
Okay.

00:41:35.310 --> 00:41:35.310
Let me cut and paste this code again.

00:41:35.310 --> 00:41:35.310
And I'm going to set up the document
as the resource load delegate.

00:41:37.970 --> 00:41:44.280
Now, there's actually more than just
one method here to do this.

00:41:44.320 --> 00:41:48.520
You enable this code,
and I'll just talk you through the code.

00:41:50.480 --> 00:41:51.400
We don't need that.

00:41:51.400 --> 00:41:53.900
That won't compile.

00:41:53.900 --> 00:41:58.520
So the first method is
identifier for initial request.

00:41:58.580 --> 00:42:01.400
Now, why do we need an identifier?

00:42:01.400 --> 00:42:03.520
Why can't we just use the request?

00:42:03.580 --> 00:42:06.690
Well, requests can actually change.

00:42:06.690 --> 00:42:07.760
They can mutate.

00:42:07.760 --> 00:42:09.270
They can be redirected.

00:42:09.390 --> 00:42:13.360
And what you often want to do is
identify the notion of a resource

00:42:13.360 --> 00:42:17.730
independent of those redirects
or modification of the request.

00:42:17.730 --> 00:42:21.750
So the identifier will remain
constant throughout a resource load,

00:42:22.030 --> 00:42:23.780
even if the request changes.

00:42:23.920 --> 00:42:28.540
So you can use this kind of as your own
tag to track a particular resource load.

00:42:28.540 --> 00:42:31.500
And in this case,
we're just going to allocate an NSNumber.

00:42:31.670 --> 00:42:33.490
It can be an arbitrary object,
whatever you want.

00:42:33.520 --> 00:42:35.200
WebKit doesn't care about the identifier.

00:42:35.200 --> 00:42:37.500
It just lets you specify it.

00:42:39.100 --> 00:42:44.500
So then you get notified that
we're about to send the request.

00:42:44.530 --> 00:42:45.700
We'll send request.

00:42:45.760 --> 00:42:49.350
And at this point,
you can modify the request,

00:42:49.450 --> 00:42:52.540
change it in whatever way you choose.

00:42:52.540 --> 00:42:54.520
And there's a lot of flexibility here.

00:42:54.520 --> 00:42:55.950
Change the caching policy.

00:42:56.050 --> 00:42:57.210
You can add headers.

00:42:57.260 --> 00:42:59.110
You can disable cookie management.

00:42:59.220 --> 00:43:00.220
Whatever you want.

00:43:00.220 --> 00:43:03.320
You can really modify the request.

00:43:03.480 --> 00:43:07.470
So what we're going to do is
just update the resource status.

00:43:07.670 --> 00:43:10.230
And I'll show you this
method in a second.

00:43:10.230 --> 00:43:12.970
But it really just modifies
the title of the window.

00:43:13.090 --> 00:43:14.740
And then we return the same request.

00:43:14.870 --> 00:43:19.570
So we let WebKit go ahead and
handle it as it normally would.

00:43:20.680 --> 00:43:24.800
Next method, Git fail loading with error.

00:43:24.920 --> 00:43:28.730
It sent you, if there's an error,
and you're free to do whatever

00:43:28.900 --> 00:43:30.250
you want with that error.

00:43:30.260 --> 00:43:32.860
And the error object,
it's not just a code,

00:43:32.900 --> 00:43:34.940
it's a fully-fledged NSError object.

00:43:34.940 --> 00:43:38.900
It has a localized description.

00:43:38.900 --> 00:43:38.900
You can present that in a dialog box.

00:43:39.110 --> 00:43:42.980
What we're going to do is just count,
increment a counter to indicate

00:43:43.060 --> 00:43:44.800
that the resource failed.

00:43:44.800 --> 00:43:48.820
And again,
we're going to update the title bar

00:43:48.820 --> 00:43:52.110
with that update resource status.

00:43:53.000 --> 00:43:55.160
You get this message,
"Did finish loading from data

00:43:55.160 --> 00:43:59.700
source," when the load completes.

00:43:59.840 --> 00:44:03.390
So let me just show you
the update resource status.

00:44:04.940 --> 00:44:07.570
method.

00:44:07.680 --> 00:44:09.970
All it's going to do is,
if there's a failed count,

00:44:09.970 --> 00:44:12.700
it's going to construct a string

00:44:13.000 --> 00:44:14.670
and tell you about those errors.

00:44:14.730 --> 00:44:16.770
If there isn't a fail count,
it's going to just construct

00:44:16.850 --> 00:44:21.730
a string that says,
"Loaded X of X," or "X of N."

00:44:22.340 --> 00:44:24.950
Let's go ahead and build this.

00:44:24.950 --> 00:44:26.110
Which build button should I click?

00:44:26.240 --> 00:44:27.240
This one or this one?

00:44:27.430 --> 00:44:29.240
Okay, save all.

00:44:29.240 --> 00:44:31.130
So many options to build.

00:44:31.130 --> 00:44:33.240
Did it build?

00:44:33.240 --> 00:44:35.760
There we go.

00:44:35.760 --> 00:44:37.230
Okay.

00:44:37.230 --> 00:44:37.230
I'm still running.

00:44:40.910 --> 00:44:44.180
Okay, so now,
take a look at the title bar.

00:44:44.200 --> 00:44:45.380
Loaded 41 of 41.

00:44:45.380 --> 00:44:49.980
It's amazing the number of
resources on some of these pages.

00:45:19.520 --> 00:45:19.520
Let's just go to a couple -- oh, look,
two resource errors.

00:45:19.520 --> 00:45:19.520
So -- oh,
and the other thing that was interesting,

00:45:19.520 --> 00:45:19.520
you might have noticed
that the total changed.

00:45:19.520 --> 00:45:19.520
That's because the number of
concurrent loads actually,

00:45:19.520 --> 00:45:19.520
you know, may change over time because
the WebKit loads images as it

00:45:19.520 --> 00:45:19.520
encounters them as it passes a page.

00:45:19.520 --> 00:45:19.520
Okay.

00:45:19.520 --> 00:45:19.520
So that's the mini-browser demo.

00:45:26.910 --> 00:45:33.190
So the last topic I'd like to cover
in the remaining minutes is the C API.

00:45:34.300 --> 00:45:38.200
And the WebKit is an
Objective-C COCA framework,

00:45:38.310 --> 00:45:39.300
no doubt about that.

00:45:39.440 --> 00:45:43.160
But we've gone to some effort
to make the same technology

00:45:43.160 --> 00:45:45.960
available via Carbon applications.

00:45:46.110 --> 00:45:49.450
And the way we've done this is to
create an HI view that actually

00:45:49.450 --> 00:45:51.440
really is backed by a WebView.

00:45:51.590 --> 00:45:56.340
So you can use the WebKit technology
in your Carbon applications.

00:45:56.510 --> 00:45:59.610
But if you really want to drill down
into some of the advanced features,

00:45:59.730 --> 00:46:03.630
you will have to write
Objective-C or Objective-C++.

00:46:05.870 --> 00:46:11.610
This is a little C snippet, code snippet,
of how you would construct

00:46:11.610 --> 00:46:16.030
a web view using the C APIs.

00:46:16.100 --> 00:46:19.300
You simply create it,
HIA web view create.

00:46:20.130 --> 00:46:24.510
And then the next few lines of code
will just modify the frame of the

00:46:24.520 --> 00:46:30.740
web view to correspond to the content
view of the main view of your window.

00:46:30.840 --> 00:46:35.060
And then finally,
you add the web view as a sub-view

00:46:35.160 --> 00:46:37.910
of the root of your window.

00:46:38.350 --> 00:46:43.000
So what I'd like to do
now is to show you a demo

00:46:44.710 --> 00:46:46.600
of a few of these Carbon applications.

00:46:46.600 --> 00:46:52.590
Now, in the SDK, we have full source
code for the Carbon web,

00:46:52.940 --> 00:46:58.750
browser, which is a Carbon application,
and

00:47:00.150 --> 00:47:03.060
It isn't just a simple
Carbon application.

00:47:03.060 --> 00:47:07.850
We've actually done a lot of code to
provide adapters to Carbon events.

00:47:07.920 --> 00:47:13.240
So you can use this as a model for how to
interact with WebKit via Carbon events.

00:47:13.270 --> 00:47:19.290
And I encourage you to take a
look at the source code for that.

00:47:21.000 --> 00:47:28.300
[Transcript missing]

00:47:30.500 --> 00:47:31.230
and Vsource.

00:47:31.470 --> 00:47:33.650
But the source actually
gets logged to the console,

00:47:33.850 --> 00:47:35.900
not in a separate window.

00:47:38.550 --> 00:47:42.690
And the other demo that I'd like to
show you is the Carbon Downloader.

00:47:43.100 --> 00:47:51.040
And this uses actually the foundation
APIs to download a URL to the desktop.

00:47:55.400 --> 00:48:06.900
[Transcript missing]

00:48:07.580 --> 00:48:12.360
And one final note about the SDK.

00:48:12.360 --> 00:48:13.890
It does work on 10.2.

00:48:13.930 --> 00:48:17.250
In fact, the SDK is designed to
be installed on 10.2.

00:48:17.370 --> 00:48:21.500
So you must first install Safari 1.0
and then the SDK on top of that.

00:48:21.500 --> 00:48:26.500
And I gather there are some problems
installing the SDK on Panther.

00:48:26.500 --> 00:48:30.500
So what you can do is just
copy the headers from -- no?

00:48:30.500 --> 00:48:32.460
The headers are okay.

00:48:32.500 --> 00:48:33.490
The headers are okay.

00:48:33.500 --> 00:48:34.500
Yeah, I was wrong.

00:48:34.590 --> 00:48:36.140
On Panther,
you don't have to do anything.

00:48:36.320 --> 00:48:38.980
You get the SDK built in.

00:48:39.890 --> 00:48:42.030
And as I mentioned,
there are several examples that

00:48:42.150 --> 00:48:45.680
are quite comprehensive in the SDK,
and there'll be more to come.

00:48:45.740 --> 00:48:49.360
And if there's anything in particular
you'd like us to see or like us

00:48:49.360 --> 00:48:53.180
to write for you as examples,
please let us know.

00:48:53.300 --> 00:48:56.370
It also includes conceptual
and reference documentation

00:48:56.370 --> 00:48:59.560
that's pretty comprehensive,
and it's available now,

00:48:59.670 --> 00:49:04.950
actually as of Monday, I believe,
for download from ADC.

00:49:06.140 --> 00:49:10.520
For more information,
you can look at the ADC website.

00:49:10.680 --> 00:49:14.530
There's actually a number of
topical tech notes on there.

00:49:14.670 --> 00:49:19.150
One of interest is,
how do I detect whether or

00:49:19.150 --> 00:49:21.870
not the SDK is installed?

00:49:22.080 --> 00:49:23.740
So for example,
if I want to build an application

00:49:23.740 --> 00:49:26.610
to depend on this technology,
how can I know that my clients

00:49:26.920 --> 00:49:29.140
actually have WebKit installed?

00:49:29.480 --> 00:49:33.030
So there's actually a little code
sample that shows you how to do that,

00:49:33.030 --> 00:49:35.200
which is, I think, pretty helpful.

00:49:35.200 --> 00:49:40.470
The WebKit reference for Objective-C,
the WebKit reference for C,

00:49:40.620 --> 00:49:43.750
and the URL loading
material is also up there.

00:49:45.130 --> 00:49:50.030
The HTML, CSS,
and JavaScript technologies

00:49:50.040 --> 00:49:52.560
are great for webkit.

00:49:52.560 --> 00:49:57.500
I encourage you to look at these
great books for more information

00:49:57.500 --> 00:49:59.300
about those technologies.

00:50:00.990 --> 00:50:04.140
and contact John Glancy
for any questions.

00:50:04.160 --> 00:50:06.140
So I think that's it for the slides.

00:50:06.370 --> 00:50:07.070
So Q&A.