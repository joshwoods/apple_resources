WEBVTT

00:00:21.030 --> 00:00:21.590
Good afternoon.

00:00:21.590 --> 00:00:23.410
I'm Travis Brown,
the graphics and imaging

00:00:23.410 --> 00:00:25.310
evangelist at Apple,
and it's my pleasure to

00:00:25.310 --> 00:00:28.740
welcome you to session 210,
which is printing.

00:00:28.740 --> 00:00:32.120
So what we're going to be
talking about in this session is

00:00:32.120 --> 00:00:35.980
pretty much the culmination of
a lot of work that we've been,

00:00:35.980 --> 00:00:37.640
hard work that we've been
doing in the printing system.

00:00:37.640 --> 00:00:41.020
Because when we originally
shipped Mac OS 10.0,

00:00:41.170 --> 00:00:45.460
we obviously got a lot of feedback
at the first WWC three years ago,

00:00:45.460 --> 00:00:49.210
where developers wanted a system that
was far more open and far more flexible.

00:00:49.820 --> 00:00:52.020
Even though we had planned
long term to build out a lot

00:00:52.020 --> 00:00:54.890
of these developer features,
we heard loud and clear that you

00:00:54.950 --> 00:00:56.820
guys wanted access to the system now.

00:00:56.820 --> 00:00:59.380
So last year we actually made
a pretty dramatic change.

00:00:59.400 --> 00:01:02.030
We actually took our printing
system and swapped a very

00:01:02.030 --> 00:01:06.540
significant portion of it to an open
source architecture called CUPS,

00:01:06.540 --> 00:01:07.900
or the Common Unix Printing System.

00:01:07.940 --> 00:01:10.650
And this new openness has given
us tremendous new capabilities

00:01:10.690 --> 00:01:14.530
for both the users and developers,
things like IPP-based printing,

00:01:14.530 --> 00:01:17.320
for example,
and also an extensible filter

00:01:17.400 --> 00:01:19.770
architecture that gives developers
an opportunity to refactor

00:01:19.770 --> 00:01:23.090
many classes of applications,
such as rips and output systems

00:01:23.090 --> 00:01:25.880
that can merely be plugged
into the CUPS print path.

00:01:26.020 --> 00:01:29.040
And what we've really focused
on this year for Panther is

00:01:29.250 --> 00:01:31.590
doing the fit and finish work,
continuing how we're

00:01:31.590 --> 00:01:34.330
integrating these pieces,
and then doing new enhancements

00:01:34.420 --> 00:01:35.790
on top of the integration.

00:01:35.860 --> 00:01:38.250
So that's what we're going
to focus on this session.

00:01:38.350 --> 00:01:40.020
It's my pleasure to
invite Rich Blanchard,

00:01:40.090 --> 00:01:42.500
the engineering manager
for the printing team,

00:01:42.500 --> 00:01:44.170
to the stage to take you
through the presentation.

00:01:48.300 --> 00:01:49.300
Thank you, Travis.

00:01:49.300 --> 00:01:51.530
I think Travis just gave my talk.

00:01:51.650 --> 00:01:53.860
That was really good.

00:01:54.760 --> 00:01:57.640
I am the engineering manager
for printing at Apple,

00:01:57.640 --> 00:02:00.520
and I want to thank all of you for
coming to our 2003 printing update.

00:02:00.520 --> 00:02:02.870
I actually have a double
thank you for all of you who

00:02:02.880 --> 00:02:04.500
actually attended last year.

00:02:04.500 --> 00:02:05.860
Last year, there were a lot of fireworks.

00:02:05.910 --> 00:02:09.840
I had the dubious pleasure of announcing
that we were changing 75% of the printing

00:02:09.910 --> 00:02:13.500
system and listening to all of you sort
of drop your jaws in one smooth motion.

00:02:13.520 --> 00:02:14.560
It was very nice.

00:02:14.740 --> 00:02:16.820
We replaced half of our
printing system last year.

00:02:16.820 --> 00:02:18.010
The whole back half went away.

00:02:18.120 --> 00:02:20.700
We replaced it with open source CUPS,
as Travis explained.

00:02:20.700 --> 00:02:23.540
Along with CUPS came a brand new printer
driver architecture to sit next to the

00:02:23.580 --> 00:02:25.950
printer driver architecture we had,
so we doubled the number of

00:02:26.030 --> 00:02:27.240
printer driver architectures.

00:02:27.240 --> 00:02:28.210
Always a good thing.

00:02:28.220 --> 00:02:30.830
We rewrote our print center
application in Cocoa,

00:02:30.830 --> 00:02:33.360
so that was a brand new
rewrite of our major UI piece

00:02:33.360 --> 00:02:35.040
that we present to the user.

00:02:35.040 --> 00:02:37.060
So it was very exciting.

00:02:37.060 --> 00:02:40.260
There was a lot of concern from
the developers that we were

00:02:40.430 --> 00:02:43.320
changing so much for Jaguar,
but we were able to do it,

00:02:43.380 --> 00:02:44.630
and I was very happy.

00:02:44.720 --> 00:02:47.050
After the talk last year,
I spent about two weeks having

00:02:47.080 --> 00:02:49.440
this nightmare that I would
have to come back this year,

00:02:49.440 --> 00:02:51.990
sit back in front of you again,
and in my best Yogi Berra voice

00:02:51.990 --> 00:02:55.560
explain how I was changing the other
75% of the print system this year.

00:02:55.590 --> 00:02:57.510
But luckily, we don't have to do that.

00:02:57.510 --> 00:03:00.770
This year, again, as Travis explained,
we're just evolving what

00:03:00.880 --> 00:03:01.940
we changed last year.

00:03:01.940 --> 00:03:04.790
We're taking some CUPS features
that we didn't have UI for,

00:03:04.790 --> 00:03:07.010
and we're putting new UI on top of it.

00:03:07.080 --> 00:03:09.640
Print center is going to
evolve a little bit internally.

00:03:09.750 --> 00:03:13.240
It's not changing, but you'll see desktop
printers back again in Panther.

00:03:13.240 --> 00:03:13.920
Wow.

00:03:16.010 --> 00:03:17.110
told you there was a reason
we were going to do it.

00:03:17.140 --> 00:03:20.460
And we're working on the printer driver
architecture that comes with CUPS to

00:03:20.470 --> 00:03:23.820
make that as powerful as the existing
printer architecture we had before CUPS.

00:03:26.060 --> 00:03:28.000
But primarily,
we've been focusing on PDF.

00:03:28.000 --> 00:03:30.100
If you've gone to all the
sessions at this conference,

00:03:30.100 --> 00:03:32.320
you've heard again and again,
especially in the graphic sessions,

00:03:32.320 --> 00:03:34.300
PDF is what Mac OS X is all about.

00:03:34.320 --> 00:03:36.480
Mac OS X is built on top of Quartz.

00:03:36.650 --> 00:03:38.840
Quartz is built on top
of a PDF imaging model.

00:03:38.840 --> 00:03:41.980
A PDF imaging model can import
and export PDF documents.

00:03:42.000 --> 00:03:44.650
For your applications,
if you want your application

00:03:44.730 --> 00:03:47.370
to really do well on Mac OS X,
you have to embrace Quartz.

00:03:47.480 --> 00:03:51.120
And that means leaving behind some
APIs you're probably very comfortable.

00:03:51.120 --> 00:03:54.110
It means using Quartz
instead of QuickDraw.

00:03:54.120 --> 00:03:56.730
And for printing,
it means using the PDF printing

00:03:56.790 --> 00:03:59.490
path instead of our LaserEyedR8
legacy printing path.

00:03:59.540 --> 00:04:02.320
Now, that's actually a dirty
little secret we have,

00:04:02.320 --> 00:04:03.330
and some of you may not know that.

00:04:03.410 --> 00:04:06.360
There are actually two ways
to print inside of Mac OS X.

00:04:06.360 --> 00:04:09.060
The PDF printing path is
our preferred printing path.

00:04:09.120 --> 00:04:12.000
Its defining characteristic
is the fact that after your

00:04:12.000 --> 00:04:15.330
application is done drawing,
the end result is a PDF spool file.

00:04:15.340 --> 00:04:17.700
Now,
your application can draw with QuickDraw.

00:04:17.700 --> 00:04:20.460
We'll take those QuickDraw calls,
we'll convert them into Quartz calls,

00:04:20.460 --> 00:04:23.100
and Quartz will spool out a PDF for us,
and we'll have that PDF spool file.

00:04:23.100 --> 00:04:24.060
You can draw directly.

00:04:24.120 --> 00:04:27.420
You can draw directly with Quartz,
or you can use Coco's NSDrawing commands,

00:04:27.440 --> 00:04:30.440
which are implemented via Quartz and,
again, spool out PDF.

00:04:30.440 --> 00:04:32.270
This is our good printing path.

00:04:32.350 --> 00:04:33.910
This is the printing path we
would like you all to use.

00:04:35.700 --> 00:04:38.050
Well, if there's a good printing path,
there's got to be another printing path.

00:04:38.080 --> 00:04:40.800
And that's our LaserWrite
Legacy Printing Path.

00:04:40.800 --> 00:04:45.040
This was created for 10.0,
and its primary purpose was to

00:04:45.240 --> 00:04:48.100
ease the transition for our desktop
publishing applications that

00:04:48.100 --> 00:04:50.160
were carbon-based onto Mac OS X.

00:04:50.160 --> 00:04:51.670
And it did a great job for that.

00:04:51.700 --> 00:04:53.800
To make it different from
the PDF printing path,

00:04:53.930 --> 00:04:57.210
what's different about this is we
actually generate a PIC spool file.

00:04:57.220 --> 00:05:01.520
This is exactly the same spool file as
we generated in OS 9 from LaserWrite 8.

00:05:01.920 --> 00:05:04.990
So those desktop publishing
applications that were comfortable

00:05:04.990 --> 00:05:06.840
with LaserWrite 8 work on Mac OS X.

00:05:06.840 --> 00:05:09.920
It's only available for
PostScript printers.

00:05:09.940 --> 00:05:13.650
The defining characteristics here,
the reason people use this,

00:05:13.650 --> 00:05:15.830
is because they can generate
PostScript picture comments

00:05:15.830 --> 00:05:17.250
embedded within their QuickDraw.

00:05:17.260 --> 00:05:20.280
And so they only can use
PostScript picture comments if they're

00:05:20.280 --> 00:05:22.120
printing to a PostScript printer.

00:05:25.520 --> 00:05:27.070
The next point's a sore one.

00:05:27.160 --> 00:05:29.350
And I wasn't sure how to get to it.

00:05:29.420 --> 00:05:32.260
And so the way I usually do a talk,
when there's a sore point,

00:05:32.260 --> 00:05:33.580
I try and distract you.

00:05:33.580 --> 00:05:34.640
So instead, I have a story.

00:05:34.640 --> 00:05:37.440
And in the story is hidden this analogy.

00:05:37.440 --> 00:05:38.800
And I'm going to try and get this right.

00:05:38.800 --> 00:05:39.120
We'll see.

00:05:39.120 --> 00:05:41.930
So this story is about two friends,
old baseball friends.

00:05:41.940 --> 00:05:42.900
They've been friends forever.

00:05:42.900 --> 00:05:45.410
And it's Bruce and Fred.

00:05:45.440 --> 00:05:46.960
And they've been friends forever.

00:05:46.960 --> 00:05:48.800
They've spent their whole
lives going to Giants games.

00:05:48.800 --> 00:05:50.420
And after the Giants game,
going home and talking

00:05:50.420 --> 00:05:51.520
about the Giants game.

00:05:51.520 --> 00:05:52.090
And they loved it.

00:05:52.100 --> 00:05:53.690
Decade after decade, they do this.

00:05:53.780 --> 00:05:54.980
Now they're in their 80s.

00:05:55.110 --> 00:05:56.220
They go to a Giants game together.

00:05:56.220 --> 00:05:57.440
They go to the bar afterwards.

00:05:57.500 --> 00:05:58.700
They're talking about the Giants game.

00:05:58.700 --> 00:06:00.380
And Fred suddenly looks concerned.

00:06:00.400 --> 00:06:02.620
Looks at Bruce and goes, you know,
we're getting up there.

00:06:02.620 --> 00:06:04.610
And I've kind of come to
grips with the fact that we're

00:06:04.610 --> 00:06:06.000
going to be passing away soon.

00:06:06.000 --> 00:06:06.660
And that's fine.

00:06:06.660 --> 00:06:07.480
I can do that.

00:06:07.580 --> 00:06:08.810
But boy, I'm going to miss baseball.

00:06:08.820 --> 00:06:10.620
You know,
you think there's baseball in heaven?

00:06:10.620 --> 00:06:11.950
And he was really concerned about it.

00:06:11.960 --> 00:06:13.680
And Bruce said, well, you know,
I'm not sure.

00:06:13.680 --> 00:06:14.740
And he was worried about
comforting his friend.

00:06:14.740 --> 00:06:15.260
He said, I'll tell you what.

00:06:15.280 --> 00:06:15.830
We'll make a pact.

00:06:16.230 --> 00:06:18.420
Whoever dies first will go up to heaven,
look around,

00:06:18.420 --> 00:06:21.180
figure out what the baseball story is,
and come back and report to the survivor.

00:06:21.180 --> 00:06:22.100
And they agree.

00:06:22.100 --> 00:06:22.870
And Fred felt better.

00:06:25.080 --> 00:06:28.300
He died in his sleep, went up to heaven,
looked around, figured out whether there

00:06:28.300 --> 00:06:31.030
was baseball in heaven,
sent his spirit back to report to Fred.

00:06:31.040 --> 00:06:32.080
Woke him up in the middle of the night.

00:06:32.200 --> 00:06:32.510
Fred wakes up.

00:06:32.590 --> 00:06:33.020
Oh, my God.

00:06:33.020 --> 00:06:33.800
He says, don't worry about it.

00:06:33.800 --> 00:06:34.060
I died.

00:06:34.060 --> 00:06:34.480
I went to heaven.

00:06:34.480 --> 00:06:34.940
It's fine.

00:06:34.940 --> 00:06:36.640
I checked on baseball, though.

00:06:36.680 --> 00:06:38.060
Fred goes, oh, well, thank you.

00:06:38.060 --> 00:06:39.140
What's the story with baseball?

00:06:39.240 --> 00:06:41.690
He goes, well,
I've got good news and I've got bad news.

00:06:41.700 --> 00:06:43.740
The good news is heaven has baseball.

00:06:43.740 --> 00:06:44.890
In fact, they play every day.

00:06:44.900 --> 00:06:47.740
The bad news is you're
pitching next Wednesday.

00:06:47.740 --> 00:06:48.980
So.

00:06:51.310 --> 00:06:55.240
The bad news is we have
a compatibility path.

00:06:55.340 --> 00:06:57.270
We have this laser-rider
legacy printing path.

00:06:57.340 --> 00:06:58.170
It's available on Panther.

00:06:58.260 --> 00:06:59.690
It's been available since 10.0.

00:06:59.690 --> 00:07:02.270
The bad news is you have to
worry about its life expectancy.

00:07:02.280 --> 00:07:04.280
This is, as of today, deprecated.

00:07:04.390 --> 00:07:06.370
It doesn't mean it's going away.

00:07:06.370 --> 00:07:08.340
We ensure binary compatibility for you.

00:07:08.350 --> 00:07:09.610
That's a big thing for us.

00:07:09.720 --> 00:07:11.820
So if your application
uses this printing path,

00:07:11.820 --> 00:07:12.570
you're fine.

00:07:13.450 --> 00:07:15.340
The deprecated means we're not
going to be spending work on this.

00:07:15.350 --> 00:07:16.780
We're not going to be
trying to improve this.

00:07:16.780 --> 00:07:18.720
If you have a new
feature you want on this,

00:07:18.720 --> 00:07:22.290
be prepared for us to tell you you should
really go use the PDF printing path.

00:07:24.660 --> 00:07:25.540
So that was the sore point.

00:07:25.540 --> 00:07:26.100
Everybody get that?

00:07:26.100 --> 00:07:26.340
All right.

00:07:26.360 --> 00:07:29.250
So that means we want you to
use this PDF printing path.

00:07:29.320 --> 00:07:30.340
Well, how do you do it?

00:07:30.380 --> 00:07:32.080
Well, the answer is you don't
have to do anything.

00:07:32.080 --> 00:07:33.750
It is our default printing
path in the system.

00:07:33.760 --> 00:07:36.080
So if you just have a
normal printing application,

00:07:36.120 --> 00:07:38.220
you're on the PDF printing path,
and you're fine.

00:07:38.250 --> 00:07:40.810
And again, you can draw with QuickDraw
or Cocoa or Quartz.

00:07:43.330 --> 00:07:45.460
To get into trouble,
to use the Laser Iterate legacy path,

00:07:45.500 --> 00:07:47.740
you actually have to do work,
and we try and help you get in

00:07:47.740 --> 00:07:49.950
trouble because we have sample
code that shows you how to get

00:07:50.070 --> 00:07:51.300
into trouble very helpfully.

00:07:51.300 --> 00:07:54.600
But the idea is when your application
prints or the user prints and

00:07:54.740 --> 00:07:58.090
that print dialog rolls back up,
your application makes the call

00:07:58.090 --> 00:08:00.650
into the print system and says,
"Hey, what are the spool file formats

00:08:00.800 --> 00:08:04.800
I'm allowed to print to given the
printer that the user is targeting

00:08:04.800 --> 00:08:07.850
and given the print settings that
he's targeting?" And if the user has

00:08:07.850 --> 00:08:11.360
printed to a raster printer or selected
preview or selected save as PDF,

00:08:11.380 --> 00:08:13.590
we're going to say, "Hey,
the only spool file

00:08:13.680 --> 00:08:16.720
available to you is PDF,
the good printing path." But if

00:08:16.720 --> 00:08:18.970
they said print and they're
targeting a PostScript printer,

00:08:18.970 --> 00:08:20.890
then we're going to say, "Well,
there's two.

00:08:20.900 --> 00:08:23.230
You can either do the PDF printing
path or you can generate this

00:08:23.390 --> 00:08:26.230
PIC spool file on the Laser Iterate
legacy printing path." And so

00:08:26.230 --> 00:08:28.330
what you have to do to figure out,
and many of you may not

00:08:28.330 --> 00:08:30.340
know in your applications,
whether you're in trouble,

00:08:30.440 --> 00:08:32.660
whether you're pitching next Wednesday,
is to look for this code

00:08:32.800 --> 00:08:33.540
that's at the bottom.

00:08:33.710 --> 00:08:37.000
Look for this PM session set
document format generation call.

00:08:37.000 --> 00:08:37.870
Do a grep for that.

00:08:38.000 --> 00:08:40.510
If you see that,
you're on the deprecated printing path,

00:08:40.580 --> 00:08:43.500
you're going to keep working,
but you're not going to be able

00:08:43.500 --> 00:08:46.980
to take advantage of some of the
important features of the system.

00:08:47.380 --> 00:08:49.060
What are those important
features in the printing system?

00:08:49.060 --> 00:08:52.070
Well,
I'm going to spend a great many slides

00:08:52.150 --> 00:08:53.790
going over these different benefits.

00:08:53.840 --> 00:08:56.980
And because you're going to fall
into two groups as developers,

00:08:56.980 --> 00:08:58.560
there are going to be those of
you who are on the LaserWriter

00:08:58.560 --> 00:09:00.220
8 legacy printing path,
and there are going to be

00:09:00.220 --> 00:09:02.020
those of you who are not,
who are on the PDF printing path.

00:09:02.120 --> 00:09:03.190
These slides have a dual purpose.

00:09:03.240 --> 00:09:05.720
If you're using the
compatibility printing path,

00:09:05.820 --> 00:09:08.110
the legacy printing path,
the slides are intended to show you

00:09:08.150 --> 00:09:10.500
how great it would be if you instead
switched printing paths and went

00:09:10.670 --> 00:09:11.920
back onto the PDF printing path.

00:09:11.960 --> 00:09:14.860
If you're already there,
it's a pat on the back, one.

00:09:15.450 --> 00:09:17.050
Two,
it's also a way to tell you some of the

00:09:17.140 --> 00:09:19.280
features that you can get because you're
already on this good printing path,

00:09:19.350 --> 00:09:22.350
ways you can leverage Quartz
and give the user new features.

00:09:24.590 --> 00:09:26.900
These advantages fall
into six categories.

00:09:27.010 --> 00:09:29.390
Talk about the unified imaging
model you get on the printing path,

00:09:29.390 --> 00:09:33.030
the ability to give the user
a preview from any of your

00:09:33.040 --> 00:09:34.910
applications and a good preview,
save as PDF,

00:09:35.030 --> 00:09:38.400
always an important user feature,
the new PDF workflow feature that

00:09:38.480 --> 00:09:42.510
we made available in Jaguar 10.2.4,
access to Quartz from even your

00:09:42.670 --> 00:09:46.180
QuickDraw-based Carbon application,
and the new Quartz filters,

00:09:46.180 --> 00:09:47.560
how you can use them.

00:09:49.470 --> 00:09:52.200
So the unified imaging model.

00:09:52.220 --> 00:09:55.840
If you are on the PDF printing path,
you only need one rendering

00:09:55.840 --> 00:09:56.900
loop inside your application.

00:09:56.900 --> 00:09:59.240
That rendering loop can draw your
view of the document to screen,

00:09:59.240 --> 00:10:01.080
it can draw it when it's
printed to a raster printer,

00:10:01.080 --> 00:10:03.500
and it can draw it when it's
printed to a PostScript printer.

00:10:03.500 --> 00:10:05.310
This is good if you're a developer.

00:10:05.380 --> 00:10:07.740
If you're on the LaserWriter
8 legacy printing path,

00:10:07.740 --> 00:10:11.010
the reason you have that LaserWriter
8 legacy printing path is because your

00:10:11.010 --> 00:10:14.150
application knows how to generate a
view of its document extremely well if

00:10:14.150 --> 00:10:17.870
it's printing to a PostScript printer,
because that's why you're on that path.

00:10:17.950 --> 00:10:19.310
You're going to generate
PostScript picture comments on that path.

00:10:19.400 --> 00:10:23.190
embed them inside of the Quickdraw.

00:10:24.500 --> 00:10:25.570
But you also have to handle
this PDF printing path if you're

00:10:25.630 --> 00:10:26.440
printing to a raster printer.

00:10:26.440 --> 00:10:29.500
That means you have a suboptimal
or a poor rendering path

00:10:29.500 --> 00:10:31.660
for these raster printers.

00:10:31.750 --> 00:10:34.180
So you've got two paths
and one of them is bad.

00:10:34.910 --> 00:10:36.730
So we want you,
if you're on the PDF printing path,

00:10:36.730 --> 00:10:38.090
to use that single rendering loop.

00:10:38.350 --> 00:10:39.940
The other thing is you don't know
where your PDF is going to go.

00:10:39.940 --> 00:10:41.900
You think you're printing,
but maybe you're not.

00:10:42.510 --> 00:10:43.880
You don't know what's at the
other end of the print system,

00:10:43.940 --> 00:10:44.500
especially with CUPS.

00:10:44.700 --> 00:10:48.090
We can put all sorts of CUPS filters
out there that are combining PDFs

00:10:48.090 --> 00:10:51.620
or spitting them up on some sort of
screen for display before they print.

00:10:52.330 --> 00:10:54.360
And if you're using the
laser-rider compatibility path,

00:10:54.360 --> 00:10:57.100
nobody's going to be able to show the
PDF because you didn't generate a PDF.

00:10:57.310 --> 00:10:59.780
If you're on the PDF printing path,
you can.

00:11:00.480 --> 00:11:04.040
Preview, in Mac OS X,
all applications get preview,

00:11:04.060 --> 00:11:05.120
and they get a great preview.

00:11:05.140 --> 00:11:08.300
That PDF that you spool opens up
inside the preview application,

00:11:08.300 --> 00:11:11.160
which has lots of new
features inside of Panther.

00:11:11.160 --> 00:11:12.700
In particular,
it has search capabilities,

00:11:12.700 --> 00:11:13.950
it has soft proofing.

00:11:14.250 --> 00:11:17.140
So the preview application's
getting more and more powerful.

00:11:17.190 --> 00:11:20.960
If you don't know how to generate a
good PDF rendition of your document,

00:11:20.980 --> 00:11:23.780
then what you're gonna get
inside of preview is not gonna

00:11:23.870 --> 00:11:25.240
make the user very happy.

00:11:25.270 --> 00:11:28.300
The applications that use the laser
writer legacy printing path have

00:11:28.340 --> 00:11:30.120
two solutions to this problem.

00:11:30.140 --> 00:11:32.940
User hits preview, they ask,
what are the available spool paths?

00:11:32.970 --> 00:11:36.220
We tell them only PDF, they panic,
and they raster their whole document,

00:11:36.220 --> 00:11:37.060
and they give that to us.

00:11:37.060 --> 00:11:39.800
So you get one big raster image of
what they think that should look like.

00:11:39.810 --> 00:11:42.000
The user gets that in preview,
they zoom in, they go, oh,

00:11:42.000 --> 00:11:43.180
that doesn't look right.

00:11:43.210 --> 00:11:45.960
Or they save it, and they go, oh man,
where'd those four megabytes come from,

00:11:45.960 --> 00:11:45.960
right?

00:11:45.960 --> 00:11:47.290
It was just one text document.

00:11:47.460 --> 00:11:50.770
So that's a poor substitute for having,
or to having a good

00:11:50.800 --> 00:11:52.760
PDF rendition of your document.

00:11:52.770 --> 00:11:55.720
Users complain, and so the second step,
or second refinement that some of

00:11:55.720 --> 00:11:58.980
these applications are doing is they're
just disabling the preview button.

00:11:59.060 --> 00:12:03.260
So, throughout OS X,
every application has preview,

00:12:03.260 --> 00:12:05.140
except for yours, 'cause you disabled it.

00:12:05.140 --> 00:12:06.830
That's not good.

00:12:07.000 --> 00:15:58.800
[Transcript missing]

00:15:58.990 --> 00:16:00.200
Unix tools are also supported.

00:16:00.200 --> 00:16:01.140
You can write a Unix tool.

00:16:01.140 --> 00:16:03.670
We'll be talking about these more later,
so I'm going to skip past that.

00:16:03.780 --> 00:16:04.800
You can write Apple scripts.

00:16:04.800 --> 00:16:07.800
The Apple script PDF workflow is
unique in that the Apple script

00:16:07.800 --> 00:16:10.980
actually executes inside of the
application that's printing.

00:16:10.980 --> 00:16:13.230
So if you have UI that you
want to present to the user,

00:16:13.230 --> 00:16:15.970
but you want it to look like it's
coming from that application,

00:16:15.970 --> 00:16:18.560
you can use an Apple script to do it,
and the Apple script will

00:16:18.610 --> 00:16:19.590
run with inside that.

00:16:19.590 --> 00:16:21.620
And then new in Panther,
we have Quartz filters

00:16:21.650 --> 00:16:23.150
for processing PDF files.

00:16:25.400 --> 00:16:26.140
So PDF workflow.

00:16:26.140 --> 00:16:31.760
PDF workflow tool is any file that
is sitting inside that PDF services

00:16:31.760 --> 00:16:35.540
directory that has its executable
bit set and is not an application.

00:16:35.540 --> 00:16:38.250
Now, you can write these in C,
but you don't have to.

00:16:38.250 --> 00:16:41.640
An executable tool in Unix can be
written in these interpret languages

00:16:41.690 --> 00:16:44.510
that we have built into the system,
Python, Perl, Ruby,

00:16:44.640 --> 00:16:45.860
or even shell scripts.

00:16:45.900 --> 00:16:47.990
So what I have to do is
write one of these scripts,

00:16:47.990 --> 00:16:50.390
drop it in the right folder,
and now there's this new tool

00:16:50.390 --> 00:16:52.920
available to the user from
the PDF workflow pop-up menu.

00:16:53.920 --> 00:16:56.630
And the tools actually get a little
bit more information than some of

00:16:56.630 --> 00:16:57.990
the other items we talked about.

00:16:58.000 --> 00:16:59.630
They get three command line arguments.

00:16:59.630 --> 00:17:02.320
They get a title, which is the user's
title of the document.

00:17:02.320 --> 00:17:04.610
All too often, that's untitled,
so make sure you set your

00:17:04.610 --> 00:17:07.580
document name if you're writing
an application before you print.

00:17:07.580 --> 00:17:08.920
You get the CUPS set of options.

00:17:09.030 --> 00:17:11.640
It tells you everything that came
out of that print dialog that

00:17:11.640 --> 00:17:14.700
the user might have selected,
and you get the path to the PDF file.

00:17:16.370 --> 00:17:19.120
So what's exciting about writing
these tools via the PDF workflow is

00:17:19.150 --> 00:17:22.240
it fits in real well with another
technology we announced this week,

00:17:22.300 --> 00:17:23.510
which is Quartz scripting.

00:17:23.540 --> 00:17:26.820
And for those of you who missed it,
the quick two-sentence description is

00:17:26.820 --> 00:17:30.890
Quartz scripting is the language bindings
for Quartz and also QuickTime and

00:17:31.180 --> 00:17:35.790
also parts of AppKit that lets you
write something like a Python script

00:17:35.790 --> 00:17:37.630
and call directly into Quartz.

00:17:37.700 --> 00:17:39.220
So you can take advantage
of Quartz without having to

00:17:39.220 --> 00:17:40.240
write a compiled application.

00:17:41.210 --> 00:17:44.560
So as an example, what I've written here
is a PDF workflow item,

00:17:44.560 --> 00:17:47.790
a script, Python script,
that will take that PDF that comes

00:17:47.800 --> 00:17:51.370
out of your application and render,
rasterize each page as a CMYK image

00:17:51.450 --> 00:17:52.820
and store it off as a TIFF.

00:17:52.880 --> 00:17:55.490
So, you know,
that's a pretty serious application.

00:17:55.550 --> 00:17:57.160
If somebody asked you
to write that and said,

00:17:57.160 --> 00:17:58.920
okay, take a PDF file and
generate TIFFs for it,

00:17:58.920 --> 00:18:00.430
I don't know how long it would take.

00:18:00.500 --> 00:18:02.050
You know, it's...

00:18:17.780 --> 00:18:17.780
Yeah, it's certainly a couple hours,
or the four minutes it would take you to

00:18:17.780 --> 00:18:17.780
actually do it with this court scripting.

00:18:17.780 --> 00:18:17.780
So just to walk through this,
you can see this first slide.

00:18:17.780 --> 00:18:17.780
All this code does is make sure it
has the right number of arguments.

00:18:17.780 --> 00:18:17.810
So this is a two-slide example,
and the first slide has no content.

00:18:21.380 --> 00:18:25.920
So here's the real work of
creating these TIFF files.

00:18:25.960 --> 00:18:28.290
First thing you want to do is open
up that PDF file that was handed

00:18:28.290 --> 00:18:30.000
in to you from the print system.

00:18:30.070 --> 00:18:32.000
So that's CG PDF document
create with provider.

00:18:32.000 --> 00:18:33.990
Now you have this PDF document reference.

00:18:33.990 --> 00:18:35.890
You're going to loop over all
the pages in that PDF document.

00:18:36.000 --> 00:18:38.950
Very simple for loop to go
through the number of pages.

00:18:38.990 --> 00:18:41.670
And on each page you're going
to figure out how big that page

00:18:41.670 --> 00:18:45.000
is because you want to create a
raster image to hold that document.

00:18:46.080 --> 00:18:49.490
You create a Quartz context
that's backed by a raster buffer.

00:18:49.750 --> 00:18:52.750
This particular case we tell it
we want a CMYK raster buffer,

00:18:52.750 --> 00:18:54.000
the correct size.

00:18:54.000 --> 00:18:57.000
And then we tell Quartz
to draw that PDF page.

00:18:57.000 --> 00:19:00.970
And magically we now have a
rasterized rendition of that PDF page.

00:19:01.790 --> 00:19:03.580
We pick some path,
some file that we're going

00:19:03.580 --> 00:19:04.320
to store the TIFF in.

00:19:04.490 --> 00:19:06.570
And then again, this is like magic,
at least to me.

00:19:06.570 --> 00:19:08.700
You tell the context, okay,
take your bits and write

00:19:08.700 --> 00:19:09.890
them out as a TIFF file.

00:19:09.990 --> 00:19:11.000
And you're done.

00:19:12.050 --> 00:19:13.100
So you can now take this,
drop it in your PDF service,

00:19:13.100 --> 00:19:14.000
and then you can go ahead and print it.

00:19:14.190 --> 00:19:14.620
So you can now take this,
drop it in your PDF service,

00:19:14.620 --> 00:19:14.940
and then you can go ahead and print it.

00:19:15.060 --> 00:19:16.960
and you have this new
feature for your user.

00:19:16.980 --> 00:19:20.480
We're gonna give this demo of this
working and some other PDF workflows.

00:19:20.480 --> 00:19:23.290
Alan Beck's gonna come up and
help me out and show some of this.

00:19:23.320 --> 00:19:27.990
So we're gonna go to demo one, please.

00:19:31.230 --> 00:19:36.230
So we have a keynote presentation
we're going to use as a demo

00:19:36.230 --> 00:19:39.670
here throughout our demos today.

00:19:45.700 --> 00:19:45.700
A little baseball one,
somehow keeping with the theme.

00:19:45.700 --> 00:19:45.700
And the idea is the user
might go to the print dialog.

00:19:48.370 --> 00:19:50.060
And we've populated
that PDF service file,

00:19:50.100 --> 00:19:52.200
so now we have this different
look at the print dialog.

00:19:52.210 --> 00:19:57.060
So you can click on the workflow items,
and you see convert to CMYK TIFFs.

00:20:07.340 --> 00:20:27.180
So that's that particular workflow.

00:20:27.180 --> 00:20:31.050
This other demo of workflow I want
to do is one that I've tried in

00:20:31.050 --> 00:20:34.200
two other talks I've given and
I've always had internet problems,

00:20:34.200 --> 00:20:37.140
so this could be the first
successful launch of this one.

00:20:37.170 --> 00:20:39.140
This is an Apple script.

00:20:39.140 --> 00:20:42.910
It opens up the
PDF document in Illustrator.

00:20:42.910 --> 00:20:45.710
If any of you use Illustrator,
Illustrator has this incredible

00:20:46.070 --> 00:20:47.950
Apple script dictionary
for manipulating PDFs.

00:20:47.950 --> 00:20:49.830
I looked at that thing and I was amazed.

00:20:49.830 --> 00:20:51.030
It still just amazes me.

00:20:51.030 --> 00:20:52.560
It's incredibly useful.

00:20:52.560 --> 00:20:55.410
So it opens up in Illustrator,
walks through all of the

00:20:55.410 --> 00:20:58.270
text that's in the PDF,
takes a text run, gets it,

00:20:58.270 --> 00:21:02.400
then uses Babelfish on the internet to
get a translation for that text run,

00:21:02.620 --> 00:21:05.610
gets Spanish, pulls it back and then has
Illustrator change that text

00:21:05.730 --> 00:21:06.880
run for its Spanish rendition.

00:21:06.880 --> 00:21:10.800
So the result is it will convert to
Spanish if we have internet access.

00:21:10.890 --> 00:21:13.670
And it's kind of fun to watch.

00:21:16.020 --> 00:21:18.160
So there it is, opened up in Illustrator.

00:21:18.180 --> 00:21:20.260
It goes there, and now you're in Spanish.

00:21:25.500 --> 00:21:27.990
And again, a user can do this,
or you can write these kind of scripts

00:21:27.990 --> 00:21:29.080
and provide them for your users.

00:21:29.080 --> 00:21:30.480
So we're going to try one more, I think.

00:21:30.530 --> 00:21:32.200
This other demo I like.

00:21:32.200 --> 00:21:36.530
Generally, these workflow items take that
PDF and use it as the source.

00:21:36.670 --> 00:21:37.810
They optimize it.

00:21:37.810 --> 00:21:39.070
They translate it.

00:21:39.070 --> 00:21:40.940
They do something like this.

00:21:41.000 --> 00:21:42.340
This other demo is a little different.

00:21:42.340 --> 00:21:46.040
All I wanted to do today was to show
you some text that said WWDC 2003.

00:21:46.130 --> 00:21:47.660
But that's kind of boring.

00:21:47.660 --> 00:21:51.510
So what I did is I took the PDF and
I used it as a pattern to fill in a

00:21:51.750 --> 00:21:54.040
background and then fill in the text.

00:21:54.080 --> 00:21:55.280
And you can see what that looks like.

00:21:57.900 --> 00:21:59.290
This one takes a little
bit more processing,

00:21:59.290 --> 00:21:59.880
but not too bad.

00:21:59.900 --> 00:22:01.260
So we have a pattern.

00:22:01.260 --> 00:22:04.850
We filled the whole page with that one
page from the keynote presentation.

00:22:04.850 --> 00:22:05.840
It's the background.

00:22:05.840 --> 00:22:08.360
We used an opacity of maybe 0.2.

00:22:08.360 --> 00:22:09.540
And then we drew this text.

00:22:09.680 --> 00:22:11.730
And we drew the text
using that same pattern,

00:22:11.730 --> 00:22:13.220
but with a 1.0 opacity.

00:22:13.320 --> 00:22:14.880
And it's kind of cool if you look.

00:22:14.880 --> 00:22:18.210
You'll see that there's a continuous,
because we're using patterns,

00:22:18.340 --> 00:22:21.140
runs from the whitish areas of
the document into the letters,

00:22:21.140 --> 00:22:22.400
which are now bolder.

00:22:22.400 --> 00:22:26.460
So you don't have to use your
PDF documents as the source.

00:22:26.460 --> 00:22:27.880
You can actually use
them for special effects.

00:22:27.900 --> 00:22:29.810
And I had some other cool
things I was doing with this.

00:22:29.810 --> 00:22:31.860
I was taking source code and
running it through this thing.

00:22:31.950 --> 00:22:33.560
So you get source code
whipping through the letters.

00:22:33.560 --> 00:22:35.010
Whatever you could imagine.

00:22:35.010 --> 00:22:36.290
iPhoto was another one.

00:22:36.290 --> 00:22:37.600
So thank you, Alan.

00:22:47.140 --> 00:22:48.880
All right, so we're going to move back
on to some of the advantages.

00:22:48.880 --> 00:22:49.760
We're done with workflow.

00:22:49.760 --> 00:22:50.720
This is a big one.

00:22:50.720 --> 00:22:54.440
This is one of the ones where the people
who are already on the PDF path don't

00:22:54.440 --> 00:22:56.300
have to pat themselves on the back.

00:22:56.520 --> 00:23:00.230
This is one of those advantages you get
and things you can take advantage of.

00:23:00.270 --> 00:23:03.070
If you're on the PDF printing path,
you can draw, or you are already drawing

00:23:03.620 --> 00:23:05.650
probably if you're a
Carbon application with Quick Draw,

00:23:05.650 --> 00:23:07.700
but you can,
if you have new graphics or something,

00:23:07.740 --> 00:23:09.680
new feature you want to
put in your application,

00:23:09.680 --> 00:23:10.390
draw with Quartz.

00:23:10.620 --> 00:23:12.770
You might want to draw with
Quartz because you want to render

00:23:12.900 --> 00:23:16.130
a PDF document inside of your
traditional Carbon application.

00:23:16.730 --> 00:23:17.300
That's pretty cool.

00:23:17.300 --> 00:23:18.530
You might want to use transparency.

00:23:18.530 --> 00:23:19.780
Also pretty cool.

00:23:19.780 --> 00:23:21.930
And it's an easy way for a
Carbon application to start

00:23:22.240 --> 00:23:23.460
transitioning to using Quartz.

00:23:23.460 --> 00:23:24.550
It's just piecemeal.

00:23:24.570 --> 00:23:27.420
It's also a great way
to efficiently draw.

00:23:27.420 --> 00:23:29.470
There are some things you can
draw much more efficiently in

00:23:29.470 --> 00:23:31.780
Quartz when they're going to a
PDF file than you can in Quick Draw.

00:23:31.860 --> 00:23:33.240
We're going to look at some of those.

00:23:34.680 --> 00:23:36.360
So first,
how do you mix quick draw and quartz?

00:23:36.360 --> 00:23:38.730
We showed this, I think,
two years ago first.

00:23:38.730 --> 00:23:39.750
But it's incredibly simple.

00:23:39.840 --> 00:23:41.650
You have a graph port,
and that's what you're normally

00:23:41.650 --> 00:23:43.200
printing into or drawing to the screen.

00:23:43.200 --> 00:23:44.640
That's the quick draw graph port.

00:23:44.640 --> 00:23:47.620
And you make this call,
QD begin CG context.

00:23:47.620 --> 00:23:49.340
And what you're really saying
when you make that call is,

00:23:49.340 --> 00:23:50.330
well, here's this graph port.

00:23:50.330 --> 00:23:50.890
I'm done with it.

00:23:50.890 --> 00:23:52.070
Why don't you hold on to it for a while?

00:23:52.070 --> 00:23:54.070
I'm not really done with it,
but I'm done with it for now.

00:23:54.070 --> 00:23:56.750
Give me a quartz context
that I can draw into.

00:23:56.830 --> 00:23:58.260
Your graph port becomes disabled.

00:23:58.330 --> 00:24:00.020
Anything you draw on there doesn't work.

00:24:00.030 --> 00:24:02.850
And now you have the CG context,
and you have all the CG open to you.

00:24:03.980 --> 00:24:06.580
That CG context is freshly initialized,
so there's no sharing of

00:24:06.580 --> 00:24:09.130
state between that CG context
and your quick draw drawing,

00:24:09.130 --> 00:24:11.670
so you don't have to worry
about any strange interactions,

00:24:11.690 --> 00:24:13.170
no pen colors, none of that.

00:24:13.210 --> 00:24:15.720
And every time you call us,
you get a fresh instantiation,

00:24:15.720 --> 00:24:18.980
so you can draw independent pieces of
your drawing without any crossover.

00:24:18.980 --> 00:24:22.100
When you're done drawing with quartz,
you call CGN CG context.

00:24:22.100 --> 00:24:23.880
Your graph port becomes hot again.

00:24:23.880 --> 00:24:26.540
Your CG context is no longer valid,
and you can go back to

00:24:26.540 --> 00:24:28.010
drawing with quick draw.

00:24:28.010 --> 00:24:30.410
Again,
this has been available since 10.1,

00:24:30.410 --> 00:24:32.950
and we have a very nice sample
that's available on the web.

00:24:33.040 --> 00:24:36.550
on developer.apple.com/printing.

00:24:37.450 --> 00:24:39.740
There are a couple things to be
careful of when you're mixing.

00:24:39.740 --> 00:24:44.930
One of them is that QuickDraw and Quartz,
they don't agree on which way is up.

00:24:45.050 --> 00:24:48.960
So QuickDraw likes to have that Y axis
running down from the top of the port,

00:24:48.960 --> 00:24:51.420
and Quartz likes to have it running
up from the bottom left of the port.

00:24:51.420 --> 00:24:53.880
So this can be a problem
if you're not expecting it,

00:24:54.010 --> 00:24:55.700
but now you are, so no problem.

00:24:55.700 --> 00:24:57.940
And it's actually very easy to handle.

00:24:57.940 --> 00:25:00.850
All you have to do is tell Quartz
that you want to flip things.

00:25:00.950 --> 00:25:04.290
So you just have a scale back up to
the top left corner of your graph port,

00:25:04.350 --> 00:25:07.090
and you flip that Y coordinate,
and now the two match.

00:25:07.300 --> 00:25:09.170
Don't draw text,
because it'll be upside down,

00:25:09.170 --> 00:25:10.640
but everything else will be fine.

00:25:10.640 --> 00:25:12.530
And text is pretty easy, too.

00:25:12.530 --> 00:25:15.340
You can use ATS to flip
the text scale as well.

00:25:15.340 --> 00:25:19.490
So two, three magic lines,
and all of a sudden you're mixing

00:25:19.530 --> 00:25:23.060
Quartz and QuickDraw and having
some great drawing applications.

00:25:23.060 --> 00:25:24.210
And this isn't hypothetical.

00:25:24.320 --> 00:25:26.910
This isn't something, boy,
it would be cool if everybody did.

00:25:26.920 --> 00:25:30.300
There are major applications that
mix Quartz with QuickDraw and

00:25:30.300 --> 00:25:32.130
do it to generate new features.

00:25:32.230 --> 00:25:32.960
And this is Excel.

00:25:33.020 --> 00:25:34.010
I love this example.

00:25:34.060 --> 00:25:35.280
Their charting package is amazing.

00:25:35.280 --> 00:25:37.280
It has some incredible
shading and transparancy.

00:25:37.280 --> 00:25:38.470
They do it with Quartz.

00:25:38.470 --> 00:25:41.700
Even though this is a major
Carbon QuickDraw-based application,

00:25:41.700 --> 00:25:45.070
they were able to mix the two and
have this really great feature.

00:25:45.140 --> 00:25:46.740
So you can do this, too,
and they've been doing

00:25:46.740 --> 00:25:47.680
this since they shipped.

00:25:50.560 --> 00:25:57.550
Richard Blazchard:
So that's access to Quartz.

00:25:57.550 --> 00:25:57.640
That's mixing Quartz with Quick Draw.

00:25:57.650 --> 00:25:57.800
Once you start doing that,
you can also start drawing more

00:25:57.800 --> 00:25:58.340
efficiently because you're using
Quartz rather than the Quick Draw.

00:25:58.400 --> 00:26:01.550
In order to explain how that works,
I have to give this brief two-sentence,

00:26:01.580 --> 00:26:04.120
worth no more than that,
overview of what a

00:26:04.190 --> 00:26:05.830
PDF document looks like.

00:26:05.900 --> 00:26:08.490
A PDF document is made up
of a set of page streams,

00:26:08.490 --> 00:26:10.340
one for each page in the document.

00:26:10.600 --> 00:26:12.260
Those page streams are
the drawing commands,

00:26:12.310 --> 00:26:14.060
what it takes to render that document.

00:26:14.140 --> 00:26:17.290
But a page stream is allowed to reach
out of itself back to this object,

00:26:17.390 --> 00:26:20.680
X object part of the document,
where maybe big parts or big images

00:26:20.820 --> 00:26:22.660
in particular might be stored.

00:26:22.760 --> 00:26:25.940
So they can be used out of line so the
drawing stream can be more efficient.

00:26:26.080 --> 00:26:28.420
So you generally get something
like this diagram where each

00:26:28.620 --> 00:26:31.440
page stream has references into
this other part of the document,

00:26:31.450 --> 00:26:33.310
into the object part of the document.

00:26:34.300 --> 00:28:32.100
[Transcript missing]

00:28:32.580 --> 00:28:35.920
And then we loop over all the
documents in the original PDF,

00:28:36.020 --> 00:28:38.260
the one that's coming from
your application printing.

00:28:38.320 --> 00:28:40.240
We find the bottom right corner.

00:28:40.430 --> 00:28:42.380
We call begin page in
the PDF we're creating.

00:28:42.380 --> 00:28:44.340
We draw the page that's coming into us.

00:28:44.340 --> 00:28:45.810
We draw the image.

00:28:45.810 --> 00:28:47.220
And we call end page.

00:28:47.280 --> 00:28:50.300
And when this is done executing,
you've got a brand new document that

00:28:50.360 --> 00:28:52.280
is now stamped and is efficiently done.

00:28:55.620 --> 00:28:58.380
So images are cool,
and images are the most common case

00:28:58.400 --> 00:29:00.020
of redundant drawing we see in PDFs.

00:29:00.200 --> 00:29:05.260
And both iPhoto and Keynote both
had problems where they were not

00:29:05.260 --> 00:29:08.200
efficiently using CGM address,
and so their resulting PDFs were

00:29:08.200 --> 00:29:10.000
not as optimal as you might like.

00:29:10.100 --> 00:29:11.900
They fixed those,
and now you get much smaller PDFs

00:29:11.900 --> 00:29:13.810
out of both those applications,
which is great,

00:29:14.270 --> 00:29:15.950
especially if you're printing
contacts out of iPhoto and you

00:29:16.010 --> 00:29:17.140
print the same thing 20 times.

00:29:17.140 --> 00:29:19.210
You don't want 20 times 5 megs.

00:29:19.210 --> 00:29:20.000
It's just not good.

00:29:20.000 --> 00:29:22.050
But you can do the same
thing with PDF drawing.

00:29:22.050 --> 00:29:23.300
So this is actually exciting.

00:29:24.120 --> 00:29:26.120
What you can do is capture
a set of PDF drawing,

00:29:26.120 --> 00:29:29.260
quartz drawing,
with CG PDF Context Create.

00:29:29.260 --> 00:29:32.140
That's a context that anything you draw
into it will be turned into a PDF stream.

00:29:32.140 --> 00:29:36.300
Capture your PDF, create a PDF document
from that captured PDF.

00:29:36.300 --> 00:29:38.130
That's a CG PDF create with provider.

00:29:38.140 --> 00:29:41.730
And then wherever you need that
logo or that footer or that

00:29:41.730 --> 00:29:45.200
form throughout your document,
you just call CG Context

00:29:45.200 --> 00:29:47.350
Draw PDF Document,
and it will draw that

00:29:47.350 --> 00:29:50.760
PDF again and again,
but that drawing will be shared.

00:29:50.760 --> 00:29:52.390
So again,
that footer will only appear once in

00:29:52.390 --> 00:29:53.880
the objects portion of the document.

00:29:53.900 --> 00:29:57.000
And again,
you can only do this with quarts.

00:29:57.700 --> 00:30:02.390
So our last advantage is something
that's new inside of Panther.

00:30:02.510 --> 00:30:03.930
It's Quartz Filters.

00:30:03.930 --> 00:30:05.870
And this, again,
is the printing guy's rendition

00:30:05.870 --> 00:30:07.100
of what Quartz Filters are.

00:30:07.100 --> 00:30:09.170
If you go to the Color Sync session,
they'll give you the real answer.

00:30:09.170 --> 00:30:10.060
This is what I think it is.

00:30:10.120 --> 00:30:14.000
It takes a PDF document and it
breaks it into three streams.

00:30:14.000 --> 00:30:18.000
They'll tell you there's really four,
but there's three.

00:30:18.000 --> 00:30:19.180
It breaks it into images.

00:30:19.180 --> 00:30:22.480
So everything out of a PDF document
that's an image goes into one stream.

00:30:22.480 --> 00:30:24.320
Everything that's text
goes into another stream.

00:30:24.320 --> 00:30:26.970
And everything that's vector-based
drawing goes into a third stream.

00:30:27.460 --> 00:30:31.060
Each of those streams can be separately
processed by a Color Sync profile.

00:30:31.060 --> 00:30:35.900
So you can change the color of
images or the rendering intent of

00:30:35.900 --> 00:30:40.420
images different than you do text,
different than you do vectors.

00:30:40.460 --> 00:30:44.260
The image step or the image
stream actually has a second step,

00:30:44.540 --> 00:30:47.830
which is an image processing
step that can do resampling,

00:30:47.830 --> 00:30:48.990
compression.

00:30:48.990 --> 00:30:51.500
And then all three of those
streams are stuck back together

00:30:51.500 --> 00:30:52.860
and you generate a PDF file.

00:30:52.860 --> 00:30:55.950
So this is a way to purpose PDF files.

00:30:56.840 --> 00:30:59.090
So you can imagine something
that has three different

00:30:59.170 --> 00:31:00.640
profiles in this Quartz Filter.

00:31:00.820 --> 00:31:03.840
All of those profiles convert
the colors into web-safe colors.

00:31:03.840 --> 00:31:07.490
The image stream up on the top has
a step where it downsamples all

00:31:07.550 --> 00:31:11.650
of your images to say 100 DPI and
then stuffs it back into a PDF.

00:31:11.900 --> 00:31:14.350
And what that Quartz
Filter has done is turned your,

00:31:14.350 --> 00:31:16.490
what some people will
tell you is a big PDF,

00:31:16.490 --> 00:31:19.770
your digital master PDF,
and it's purposed it for web viewing.

00:31:19.960 --> 00:31:23.130
So you can do Quartz Filters or
you get to use Quartz Filters if

00:31:23.130 --> 00:31:25.260
you print on the PDF printing path.

00:31:26.460 --> 00:31:29.130
When you're printing,
there's a new ColorSync panel in

00:31:29.130 --> 00:31:33.200
the print dialog that'll show you an
available set of Quartz Filters and

00:31:33.200 --> 00:31:36.000
allow you to create your own Quartz
Filters inside of the ColorSync utility.

00:31:36.060 --> 00:31:39.350
So you can print and force all your
images to go to sepia or whatever

00:31:39.360 --> 00:31:40.960
else you can think of to create.

00:31:41.080 --> 00:31:43.720
We also use it for
host-based color matching.

00:31:43.820 --> 00:31:47.700
When you print in Panther to
a color PostScript laser,

00:31:47.730 --> 00:31:50.620
we can do color matching on the host,
which we used to do all the

00:31:50.730 --> 00:31:52.640
color matching in the printer,
which was great.

00:31:52.640 --> 00:31:54.740
It was device independent and
I was a big proponent of it.

00:31:54.880 --> 00:31:56.080
It was slow and the printers had bugs.

00:31:56.080 --> 00:31:57.880
And people would complain.

00:31:57.880 --> 00:32:00.360
So being a proponent
of it didn't save it.

00:32:00.460 --> 00:32:03.430
So we now have host-based color matching
where we can do all this stuff on your

00:32:03.430 --> 00:32:05.230
faster CPU and do the translations.

00:32:05.280 --> 00:32:09.370
Preview can also use the Quartz Filters.

00:32:09.480 --> 00:32:11.730
Save as PDF can use Quartz Filters.

00:32:11.850 --> 00:32:13.620
So you can just put one in
your PDF services folder,

00:32:13.620 --> 00:32:15.450
select it,
and it'll do whatever kind of purposing

00:32:15.450 --> 00:32:16.950
you set up that Quartz Filter to do.

00:32:16.980 --> 00:32:18.630
And that was PDF workflow.

00:32:18.690 --> 00:32:20.480
So we've got a quick demo.

00:32:20.480 --> 00:32:22.680
Alan's going to come up and
help me again of soft proofing.

00:32:22.680 --> 00:32:23.630
This is new in Panther.

00:32:23.680 --> 00:32:25.700
We're going to look at soft proofing.

00:32:25.700 --> 00:32:27.820
And we're going to look a little
bit at some of the filters that

00:32:27.820 --> 00:32:30.490
are built in related to ColorSync.

00:32:30.660 --> 00:32:32.210
Double one, thank you.

00:32:32.250 --> 00:32:34.100
We'll go back to keynote again.

00:32:34.890 --> 00:32:36.100
Recognize this document?

00:32:36.100 --> 00:32:39.170
Let me guess.

00:32:39.770 --> 00:32:40.700
Let's go ahead and print.

00:32:41.140 --> 00:32:49.490
Richard Blanchard:
Hopefully we have selected

00:32:49.940 --> 00:32:50.380
a monochrome printer.

00:32:50.380 --> 00:32:50.380
Yes.

00:32:50.380 --> 00:32:50.380
It is a laser R8500.

00:32:50.380 --> 00:32:50.380
Let's go ahead and hit preview.

00:32:52.070 --> 00:32:54.570
And here it is, a mono laser.

00:32:54.580 --> 00:32:56.490
It is showing the grayscale image.

00:32:56.490 --> 00:32:58.960
And here there's a new
checkbox down here.

00:32:58.960 --> 00:32:59.740
We're going to turn it off.

00:32:59.740 --> 00:33:05.860
And this is what you would
normally get for the preview.

00:33:05.860 --> 00:33:09.230
And you just turn it off and on again
just to see exactly what you get.

00:33:09.760 --> 00:33:12.980
So what's important here with the
PDF preview is we've sent over

00:33:12.980 --> 00:33:14.480
to preview your digital master.

00:33:14.480 --> 00:33:15.760
It's captured all of your content.

00:33:15.760 --> 00:33:18.060
But we've also sent along with it
the profile for that device that

00:33:18.230 --> 00:33:20.870
you were going to be printing to,
in this case a monochrome device.

00:33:20.870 --> 00:33:23.020
And preview can show it either way.

00:33:23.020 --> 00:33:26.590
It can apply that output profile
that would represent your printer

00:33:26.590 --> 00:33:28.280
and show you in monochrome.

00:33:28.280 --> 00:33:31.060
Or it can take it off, take that off,
and show you what that

00:33:31.060 --> 00:33:32.630
digital master looked like.

00:33:32.630 --> 00:33:34.550
So you can use this also for
color printers to see what the

00:33:34.650 --> 00:33:36.020
gamut looks like on your printer.

00:33:39.240 --> 00:33:41.080
Somebody likes this.

00:33:41.690 --> 00:33:44.100
So we're going to look at some
of the ColorSync filters now.

00:33:44.100 --> 00:33:46.400
Go to the ColorSync panel.

00:33:47.640 --> 00:33:48.400
ColorSync panel.

00:33:48.400 --> 00:33:49.900
Let's go up and see.

00:33:49.900 --> 00:33:53.480
Let's go ahead and add
the ColorSync filters,

00:33:53.550 --> 00:33:57.700
which will bring us to
the ColorSync utility.

00:33:57.770 --> 00:34:01.880
And here is our PDF.

00:34:04.970 --> 00:34:17.400
There was the black and white, blue tone,
I won't say that word, gray tone.

00:34:19.420 --> 00:34:23.340
So again,
what's important here is digital master

00:34:23.560 --> 00:34:26.120
everything your application drew,
pipe through this quartz

00:34:26.120 --> 00:34:28.730
filter to change what's viewed
on screen or what's printed,

00:34:28.730 --> 00:34:33.820
but we didn't touch
your original document.

00:34:38.700 --> 00:34:45.090
We're going back to slides.

00:34:45.090 --> 00:34:45.090
So we'll go back over to the slides.

00:34:54.250 --> 00:34:56.200
So those were the advantages.

00:34:56.280 --> 00:34:57.330
Unified imaging model.

00:34:57.380 --> 00:34:59.430
Your application is easier to write
because you have one rendering loop.

00:34:59.500 --> 00:35:01.200
Your PDFs that come
out can be repurposed.

00:35:01.350 --> 00:35:03.880
The user can redirect them between
PostScript and raster printers.

00:35:03.880 --> 00:35:04.460
Preview.

00:35:04.460 --> 00:35:07.530
Your users get good preview
of your application's drawing.

00:35:07.530 --> 00:35:08.840
They appreciate that.

00:35:08.860 --> 00:35:09.540
Save as PDF.

00:35:09.570 --> 00:35:12.080
They can capture your
document output and reuse it,

00:35:12.080 --> 00:35:14.170
send it to people via mail or whatever.

00:35:14.170 --> 00:35:14.910
PDF workflow.

00:35:14.910 --> 00:35:17.100
They can post-process
it and purpose that PDF.

00:35:17.100 --> 00:35:17.820
Access to Quartz.

00:35:17.820 --> 00:35:19.960
If you're on the PDF printing path,
your application can do

00:35:19.960 --> 00:35:22.130
more interesting drawing,
and you can use Quartz filters,

00:35:22.140 --> 00:35:24.080
which are going to be
very exciting moving on.

00:35:24.100 --> 00:35:25.240
Thank you.

00:35:27.180 --> 00:35:28.920
So why isn't everybody
on the PDF printing path?

00:35:28.920 --> 00:35:31.760
Well, there's two reasons that
people generally give me.

00:35:31.760 --> 00:35:34.010
They tell me they can't get
there because their application

00:35:34.040 --> 00:35:37.720
depends upon the ability to
import EPS and to print EPS files.

00:35:37.720 --> 00:35:40.110
EPS encapsulated PostScript,
therefore they need to

00:35:40.230 --> 00:35:42.920
generate PostScript,
therefore they need the LaserWriter

00:35:42.920 --> 00:35:45.690
legacy printing path so they
can generate PostScript picture

00:35:45.690 --> 00:35:47.220
comments into QuickDraw.

00:35:47.220 --> 00:35:48.260
So that's one.

00:35:48.260 --> 00:35:51.120
The other one is their application
generates all its own PostScript.

00:35:51.120 --> 00:35:53.950
They don't want to deal with Quartz,
they just have a PostScript rendition

00:35:53.950 --> 00:35:55.500
and that's what they want to print.

00:35:55.500 --> 00:35:58.850
A lot of desktop publishing applications
fall under this and more and more of the

00:35:58.920 --> 00:36:02.600
Unix applications that are moving over
to Mac OS X fall under this category.

00:36:02.600 --> 00:36:04.970
They're used to generating
all their own PostScript and

00:36:04.970 --> 00:36:06.330
that's what they want to do.

00:36:06.790 --> 00:36:07.920
Well, supporting EPS is easy.

00:36:07.920 --> 00:36:10.740
I can handle that first
complaint or that first concern.

00:36:10.740 --> 00:36:12.040
You can go to Cocoa.

00:36:12.040 --> 00:36:12.600
All right.

00:36:12.610 --> 00:36:14.660
You don't want to take your
Carbon application to Cocoa.

00:36:14.720 --> 00:36:18.940
But if you did, there is NSEPS image rep,
and that'll take care of you in Cocoa.

00:36:18.940 --> 00:36:21.780
But if you want to stay with Carbon,
there is a call,

00:36:21.780 --> 00:36:26.180
and it took two engineers to type,
PMCG image create with EPS data provider.

00:36:27.000 --> 00:36:30.010
What that call does is you
give it a data provider.

00:36:30.010 --> 00:36:34.250
This is a way to give Core Graphics
the EPS postscript portion of the EPS,

00:36:34.260 --> 00:36:37.870
and you give it an image rep,
which is an image that represents

00:36:37.980 --> 00:36:40.050
the preview portion of your EPS.

00:36:40.130 --> 00:36:41.970
In other words,
if we can't render the postscript,

00:36:41.990 --> 00:36:43.340
this is what we're going to draw.

00:36:43.340 --> 00:36:46.280
It combines those two things up
into one wrapper and gives you

00:36:46.280 --> 00:36:48.130
back this new composite image rep.

00:36:48.130 --> 00:36:50.100
That composite image rep is smart.

00:36:50.120 --> 00:36:52.520
When you draw with that
composite image rep,

00:36:52.690 --> 00:36:55.720
the system, Quartz,
will either use the postscript that's

00:36:55.720 --> 00:36:56.470
wrapped up in the EPS data provider,
or it will give you

00:36:56.520 --> 00:36:56.980
the EPS data provider.

00:36:57.000 --> 00:36:58.470
Or it will use the preview image.

00:36:58.470 --> 00:37:02.000
So if you go to screen, say, in Jaguar,
because this call is available in Jaguar,

00:37:02.000 --> 00:37:03.110
it will use the preview.

00:37:03.110 --> 00:37:05.490
If you go to a raster printer,
it will use the preview.

00:37:05.490 --> 00:37:09.150
If you go to a postscript printer,
it will use the encapsulated postscript.

00:37:09.200 --> 00:37:10.430
This is incredibly powerful.

00:37:10.490 --> 00:37:13.220
All you have to do is use this,
and all of a sudden you have EPS support,

00:37:13.220 --> 00:37:15.570
and then you've lost that one
reason you gave me why you can't

00:37:15.570 --> 00:37:17.000
be on the PDF printing path.

00:37:17.020 --> 00:37:20.150
The Apple Works guys lost their one
reason why they couldn't be on the path.

00:37:20.230 --> 00:37:21.180
So they've now moved.

00:37:21.220 --> 00:37:22.670
I don't even remember what version.

00:37:22.750 --> 00:37:25.190
It was a while ago,
but they were one of those applications

00:37:25.190 --> 00:37:26.980
that complained they needed support.

00:37:27.000 --> 00:37:29.080
They didn't have support EPS,
so they were on the legacy printing path.

00:37:29.110 --> 00:37:30.990
They used this call, they got off,
and now they're a

00:37:30.990 --> 00:37:32.220
PDF printing application.

00:37:35.120 --> 00:37:36.780
Oh, wait, there are some other
people who use this call.

00:37:36.780 --> 00:37:38.860
Again, this is a Microsoft application.

00:37:38.860 --> 00:37:40.700
I use them because, again,
they're a great example of

00:37:40.700 --> 00:37:42.610
a large Carbon application
that's QuickDraw-based.

00:37:42.610 --> 00:37:43.610
They had to support EPS.

00:37:43.810 --> 00:37:45.490
They used that call so
that they can render.

00:37:45.490 --> 00:37:47.390
They'll show the preview
image here on screen,

00:37:47.390 --> 00:37:49.320
and when they print this
to a PostScript printer,

00:37:49.410 --> 00:37:50.740
you'll get the EPS output.

00:37:53.280 --> 00:37:55.690
So the slightly harder case is
the applications that generate

00:37:55.690 --> 00:37:56.810
all their own PostScript.

00:37:56.820 --> 00:37:58.190
Well, they have two choices.

00:37:58.380 --> 00:38:00.540
They can use that LaserWriter
8 legacy printing path.

00:38:00.540 --> 00:38:02.980
And what they have to do when they
do it is take their PostScript,

00:38:03.070 --> 00:38:05.600
put it in PostScript picture
comments so that the printer driver,

00:38:05.600 --> 00:38:08.800
the PostScript printer driver we have,
will intermix its generated PostScript,

00:38:08.920 --> 00:38:11.090
because it's also converting
QuickDraw into PostScript,

00:38:11.090 --> 00:38:13.300
with the application's
generated PostScript.

00:38:13.300 --> 00:38:16.050
And that's a very complicated,
convoluted,

00:38:16.050 --> 00:38:18.840
lots of other words I could think of,
process.

00:38:18.990 --> 00:38:22.100
And the only way it works
is because it worked once.

00:38:22.240 --> 00:38:23.670
You fool with your
application until it works,

00:38:23.670 --> 00:38:24.840
and then you stop and you're done.

00:38:24.840 --> 00:38:27.960
And you can now intermix your
application's PostScript with

00:38:28.090 --> 00:38:29.300
the driver's PostScript.

00:38:29.300 --> 00:38:31.690
And anybody who's done this,
things like SpaceHack and

00:38:31.790 --> 00:38:35.210
PSBeginNoSave and flushing the QuickDraw
state are not a mystery to you.

00:38:35.230 --> 00:38:37.240
And I apologize that you had
to learn all of those things.

00:38:37.240 --> 00:38:40.090
It would be better if you could
generate the entire PostScript job.

00:38:40.130 --> 00:38:41.630
That's what you want to do anyway.

00:38:41.640 --> 00:38:43.580
You'd rather get the
driver out of your way.

00:38:43.590 --> 00:38:46.110
But up until Panther,
there's been no way to print that.

00:38:46.130 --> 00:38:47.600
You generate your whole PostScript job.

00:38:47.660 --> 00:38:48.380
How do you get to it?

00:38:48.470 --> 00:38:50.600
Well, we have these new job
submission APIs in Panther.

00:38:51.280 --> 00:38:53.480
And they allow you to hand a whole
file to the print system and say,

00:38:53.650 --> 00:38:55.720
get this to the printer for me, please.

00:38:55.720 --> 00:38:57.980
We can't get any file to the printer,
so there actually has to be a

00:38:57.980 --> 00:38:59.520
query you have to make first.

00:38:59.520 --> 00:39:01.190
PmPrinter, get mime types.

00:39:01.260 --> 00:39:03.110
You pass in the printer
you want to print to.

00:39:03.160 --> 00:39:05.060
You pass in the print settings
that came out of the user's

00:39:05.060 --> 00:39:06.920
interaction with the print dialog.

00:39:06.920 --> 00:39:09.720
And you get back a set of
strings that are mime types.

00:39:09.720 --> 00:39:12.270
For those settings on this printer,
here are all of the mime

00:39:12.270 --> 00:39:14.800
types that you can give us,
the file types you can give us.

00:39:14.820 --> 00:39:16.280
So you scan that.

00:39:16.280 --> 00:39:18.350
And if you find the mime type you like,
PostScript in the case

00:39:18.410 --> 00:39:20.320
we're talking about,
you then call PmPrinter print with file.

00:39:20.320 --> 00:39:22.160
And you hand the print file in.

00:39:22.190 --> 00:39:24.980
We'll take it,
throw it over into the print server,

00:39:24.990 --> 00:39:26.120
and you're done.

00:39:27.270 --> 00:39:28.990
So what kind of MIME types can
we take besides PostScript?

00:39:29.080 --> 00:39:30.590
Well,
we'll deal with PostScript ones first.

00:39:30.590 --> 00:39:31.970
There's actually two
PostScript MIME types

00:39:32.030 --> 00:39:33.020
that are of interest.

00:39:33.580 --> 00:39:34.310
Application PostScript.

00:39:34.310 --> 00:39:36.320
This is what we call
non-finished PostScript.

00:39:36.460 --> 00:39:39.260
If you pass us something with
MIME type Application PostScript,

00:39:39.340 --> 00:39:41.720
we will take the print settings
that the user asked for,

00:39:41.720 --> 00:39:44.780
we will generate PostScript features,
and we'll interject them into

00:39:44.780 --> 00:39:47.770
your PostScript via DSC comments
at the beginning of the document.

00:39:47.770 --> 00:39:49.660
So this is a way,
if you don't want to deal with

00:39:49.720 --> 00:39:52.850
feature code but you want to generate
all your own PostScript rendering,

00:39:52.910 --> 00:39:54.650
you can use that MIME type.

00:39:54.900 --> 00:39:58.390
If you really don't want us involved,
use application then Cups PostScript.

00:39:58.390 --> 00:40:00.620
That's called raw PostScript or
finished PostScript.

00:40:00.810 --> 00:40:02.390
You give that to us,
and it just goes right to

00:40:02.450 --> 00:40:03.500
the PostScript printer.

00:40:03.500 --> 00:40:04.160
We're done.

00:40:04.160 --> 00:40:05.410
You can also pass us PDF.

00:40:05.410 --> 00:40:07.560
If you have a PDF rendition
of your document,

00:40:07.560 --> 00:40:09.940
give it to us,
and we'll get it to the printer.

00:40:09.940 --> 00:40:16.060
Image types, GIF, JPEG, TIFF,
lots of different text types, plain, RTF,

00:40:16.060 --> 00:40:19.860
even HTML, thanks to AppKit,
and Cups Raw.

00:40:19.860 --> 00:40:21.840
Cups Raw is really for
the printer vendors,

00:40:21.970 --> 00:40:24.540
but what Cups Raw says is
don't process file at all.

00:40:24.600 --> 00:40:24.880
Just don't process file at all.

00:40:24.950 --> 00:40:25.600
Just send it to the printer.

00:40:25.600 --> 00:40:27.830
It's usually going to be
printer-specific escape codes

00:40:27.830 --> 00:40:30.760
that you want to send down to have
the printer do something specific.

00:40:30.760 --> 00:40:32.040
And there are lots more.

00:40:32.040 --> 00:40:34.250
If you actually make that call,
you'll get a list of

00:40:34.250 --> 00:40:35.710
about 20-plus MIME types.

00:40:37.760 --> 00:40:38.310
So who would use this?

00:40:38.390 --> 00:40:40.690
Well, Preview is actually one of the
clients on Panther for this.

00:40:41.270 --> 00:40:44.340
As I mentioned,
Preview in Panther is enhanced.

00:40:44.340 --> 00:40:47.460
Right now, when you click Preview,
your PDF document spools.

00:40:47.490 --> 00:40:48.650
It opens up in Preview.

00:40:48.680 --> 00:40:49.310
There it is.

00:40:49.310 --> 00:40:52.020
Preview's got the PDF file
that you just generated.

00:40:52.120 --> 00:40:53.870
On Jaguar,
when you tell Preview to print,

00:40:53.870 --> 00:40:54.500
what does it do?

00:40:54.590 --> 00:40:57.380
Well, it dutifully uses Quartz,
asks Quartz to render that

00:40:57.380 --> 00:41:00.040
PDF document into a context,
which will create PDF.

00:41:00.040 --> 00:41:03.440
So you end up going PDF to
Quartz calls to PDF.

00:41:03.440 --> 00:41:06.740
And that's why when you print from a
print preview in Preview on Jaguar,

00:41:06.780 --> 00:41:09.850
your 100-page document,
you get to watch it spool as it goes

00:41:10.160 --> 00:41:12.000
through that conversion for each page.

00:41:12.000 --> 00:41:13.620
In Panther, it doesn't do that anymore.

00:41:13.620 --> 00:41:14.430
It's got this file.

00:41:14.440 --> 00:41:16.520
So it just asks us, hey,
can I get PDF to this printer?

00:41:16.520 --> 00:41:17.430
We always say yes for PDF.

00:41:17.540 --> 00:41:18.990
And it goes, okay, here's the file.

00:41:19.000 --> 00:41:20.200
And the user sees no spooling.

00:41:20.200 --> 00:41:21.480
It's instantaneous.

00:41:22.140 --> 00:41:22.920
And it's great.

00:41:22.920 --> 00:41:25.340
They're also going to
do it for PDF files.

00:41:25.490 --> 00:41:26.920
They don't do that in the seed right now.

00:41:26.920 --> 00:41:29.980
But for Panther, you'll be able to open
up a PDF file in Preview.

00:41:29.980 --> 00:41:31.990
And when you say print,
the file gets copied

00:41:32.150 --> 00:41:33.220
over to the print server.

00:41:33.240 --> 00:41:34.140
And that's all.

00:41:36.000 --> 00:41:38.490
So the big advantage is it removes
spool timing from printing,

00:41:38.490 --> 00:41:39.960
and the users are very happy.

00:41:40.050 --> 00:41:44.120
That's a dramatic portion of printing
times or your spooling times.

00:41:45.640 --> 00:41:48.460
All right, so Mac OS X has this
PDF-based graphics system.

00:41:48.460 --> 00:41:50.250
We really want you to use
the PDF printing path so you

00:41:50.250 --> 00:41:51.190
can take advantage of it.

00:41:51.240 --> 00:41:53.400
If you can't,
we have the job submission APIs.

00:41:53.400 --> 00:41:54.440
They're very cool.

00:41:54.440 --> 00:41:57.500
We hope they're going to let you get
off of that legacy printing path.

00:41:57.590 --> 00:41:59.030
And if they don't,
tell us why they don't.

00:41:59.030 --> 00:42:00.810
We'll add more API,
and we'll do what we can to get you

00:42:00.810 --> 00:42:02.210
off of that legacy printing path.

00:42:03.640 --> 00:42:06.010
Once you're off, especially once you're
on the PDF printing path,

00:42:06.040 --> 00:42:07.210
you can grow as the OS grows.

00:42:07.220 --> 00:42:09.310
Applications that use
the PDF printing path,

00:42:09.310 --> 00:42:11.130
as Panther comes out,
or at least Jaguar got

00:42:11.330 --> 00:42:13.660
PDF workflow with Panther,
they get Quartz filters,

00:42:13.810 --> 00:42:15.920
Quartz scripting,
and more stuff in the future as

00:42:15.930 --> 00:42:18.610
we enhance Quartz and we enhance
the PDF part of the system.

00:42:18.700 --> 00:42:19.680
You get that for free.

00:42:19.680 --> 00:42:22.500
So hopefully that's a good
reason to be over there.

00:42:24.960 --> 00:42:27.700
All right, so we're a PDF-based system.

00:42:27.700 --> 00:42:29.700
We're very proud of our PDF support.

00:42:29.700 --> 00:42:31.510
But there are some legacy formats.

00:42:31.570 --> 00:42:34.780
It's actually kind of nice to be up here
and call PostScript a legacy format.

00:42:34.780 --> 00:42:36.020
But that's the way we view it.

00:42:36.020 --> 00:42:38.900
And it would be great if we
had some support for that

00:42:38.900 --> 00:42:40.490
legacy format in this OS.

00:42:40.500 --> 00:42:43.780
It would be great if you could take
a rendered EPS and actually show the

00:42:43.990 --> 00:42:47.840
vector rendition of that rather than that
crummy preview that comes with the EPS.

00:42:47.840 --> 00:42:50.820
It would be great if you could print a
PostScript file onto a raster printer.

00:42:50.830 --> 00:42:52.800
Take that $100 raster printer,
plug it in.

00:42:52.890 --> 00:42:54.560
Why isn't it a PostScript printer?

00:42:55.010 --> 00:42:57.070
And it would be good if you were great
if you could take a PostScript file

00:42:57.170 --> 00:43:00.240
and convert it to PDF so you could
use the rest of the Mac OS X to

00:43:00.260 --> 00:43:02.080
handle and process that PDF.

00:43:02.080 --> 00:43:03.520
And you can.

00:43:03.590 --> 00:43:05.500
And Panther,
and this is incredibly exciting,

00:43:05.500 --> 00:43:07.320
we have this
Panther PostScript converter,

00:43:07.320 --> 00:43:09.420
and it's a PostScript level
3 interpreter.

00:43:09.420 --> 00:43:12.260
And it converts PostScript files to PDF.

00:43:12.260 --> 00:43:14.870
It does not rasterize PostScript.

00:43:14.870 --> 00:43:16.890
It is not a PostScript RIP.

00:43:16.980 --> 00:43:19.280
It's a PostScript converter.

00:43:19.280 --> 00:43:24.040
It does the best job it can converting
your PostScript directly into PDF.

00:43:24.040 --> 00:43:24.880
And that's what we're going to be doing.

00:43:24.900 --> 00:43:26.460
That's it.

00:43:27.810 --> 00:43:31.640
But we do have something in the
system that can rasterize PDF.

00:43:31.640 --> 00:43:32.700
We have Quartz.

00:43:32.790 --> 00:43:35.960
So you could imagine writing
something that took a PostScript file,

00:43:35.960 --> 00:43:38.710
ran it through this PostScript converter
that's now in Panther,

00:43:38.710 --> 00:43:41.090
get the PDF file,
use that resulting PDF file,

00:43:41.250 --> 00:43:43.650
feed it to Quartz,
and have Quartz generate the raster,

00:43:43.650 --> 00:43:45.770
just like we saw earlier
when we were generating those

00:43:45.770 --> 00:43:47.280
TIFF raster files from PDF.

00:43:47.280 --> 00:43:49.170
So you could write this,
and there's actually

00:43:49.230 --> 00:43:54.380
Core Graphics APIs to call this
PostScript to PDF converter.

00:43:55.740 --> 00:43:58.540
I really wanted to show you guys how you
could write your own PostScript RIP and

00:43:58.710 --> 00:44:02.000
I really wanted to do it in one slide,
but I couldn't find a

00:44:02.000 --> 00:44:03.420
guilt-free font to use.

00:44:03.540 --> 00:44:07.160
So I'm going to give you the
two-slide PostScript interpreter.

00:44:07.160 --> 00:44:08.960
The first slide doesn't do a whole lot.

00:44:08.960 --> 00:44:11.720
This is a little tool called
PSRIP that takes a PostScript file

00:44:11.720 --> 00:44:14.650
and takes a TIFF base and that
TIFF base is the base name that

00:44:14.650 --> 00:44:16.250
we're going to create for your file.

00:44:16.250 --> 00:44:17.650
So if you call it out,
we're going to create

00:44:17.760 --> 00:44:20.720
out.1.TIFF and out.2.TIFF.

00:44:20.720 --> 00:44:24.010
So the first thing you do is you
take that PS file and you create this

00:44:24.040 --> 00:44:28.490
data provider and that's what Quartz
Core Graphics is going to suck on to

00:44:28.490 --> 00:44:30.280
get the PostScript out of the file.

00:44:30.280 --> 00:44:31.260
Create a PDF consumer.

00:44:31.360 --> 00:44:33.530
That's where it's going to
write the PDF that it's going to

00:44:33.690 --> 00:44:35.580
get as a result of converting.

00:44:35.580 --> 00:44:39.140
We create a converter instance
and we pass it the two things.

00:44:39.160 --> 00:44:41.060
Here's the PS provider
to get the PostScript.

00:44:41.110 --> 00:44:43.210
Here's the consumer to write the PDF,
call it.

00:44:43.360 --> 00:44:44.810
It'll tell you if it succeeded or not.

00:44:44.810 --> 00:44:45.810
It might fail, right?

00:44:45.890 --> 00:44:47.300
There might be a PostScript error.

00:44:47.300 --> 00:44:48.670
It might not be a PostScript file.

00:44:48.800 --> 00:44:49.530
It can fail.

00:44:49.530 --> 00:44:51.980
But if it succeeds,
we've got a PDF rendition

00:44:51.980 --> 00:44:52.470
of that PostScript file.

00:44:52.520 --> 00:44:55.870
And now all we have to do is get to
bits and we have the exact same code

00:44:55.880 --> 00:44:57.680
we had earlier today to go to TIF.

00:44:57.740 --> 00:45:00.240
Loop over the pages,
create a bitmap context for each

00:45:00.240 --> 00:45:04.460
one of those pages in the PDF,
draw it, and then tell that context to

00:45:04.460 --> 00:45:06.740
write out its bits into TIF.

00:45:06.740 --> 00:45:11.040
And so there's your two slide,
dozen line, in Python interpreted

00:45:11.210 --> 00:45:14.500
PostScript interpreter,
which I thought was pretty exciting.

00:45:19.200 --> 00:45:21.620
But you might not want to write your
own PostScript interpreter every day,

00:45:21.620 --> 00:45:22.440
although it is easy.

00:45:22.440 --> 00:45:26.040
We have the converter integrated
into the system as well.

00:45:26.040 --> 00:45:30.640
I mentioned earlier Cocoa's
EPS image rep that can show for

00:45:30.750 --> 00:45:32.250
Cocoa applications EPS files.

00:45:32.260 --> 00:45:36.180
Well, it now, with the converter,
will show the vector rendition.

00:45:36.180 --> 00:45:38.480
It'll actually convert
that EPS file into PDF,

00:45:38.480 --> 00:45:39.760
and it'll show that PDF rendition.

00:45:39.760 --> 00:45:43.720
So now Cocoa applications can have this
incredible view of your EPS documents.

00:45:43.800 --> 00:45:46.240
PostScript jobs can be
printed to raster printers.

00:45:46.240 --> 00:45:49.030
We have this great printer
server in the system.

00:45:49.300 --> 00:45:52.900
And in Panther,
it can take in jobs over IPP, LPD,

00:45:52.900 --> 00:45:53.720
or SMB.

00:45:53.720 --> 00:45:55.760
So there are lots of ways
to get jobs into the system.

00:45:55.760 --> 00:45:58.210
And now that we have a
PostScript converter and

00:45:58.340 --> 00:46:00.710
then a PDF rasterizer,
so essentially you can hook

00:46:00.830 --> 00:46:04.040
those two things together and get
from PostScript all the way to

00:46:04.050 --> 00:46:07.230
raster for your raster printer,
schools can set up a lab,

00:46:07.390 --> 00:46:12.660
can put in their $100 photo printer,
attach it to a client,

00:46:12.660 --> 00:46:18.010
Mac OS X Panther system, share it,
and print to it from Unix, Windows,

00:46:18.270 --> 00:46:18.980
Mac OS 9.

00:46:19.200 --> 00:46:21.200
So you can send that
to your Raster printer.

00:46:21.200 --> 00:46:23.160
So it's great for schools and
great for printer vendors,

00:46:23.200 --> 00:46:23.200
right?

00:46:23.350 --> 00:46:25.130
You don't have to go
license or rip anymore.

00:46:25.220 --> 00:46:27.180
You shouldn't have to,
or should be good enough.

00:46:27.200 --> 00:46:29.200
And then, of course,
the job submission APIs.

00:46:29.200 --> 00:46:31.180
If you have a raster printer
with this in the system,

00:46:31.180 --> 00:46:33.200
you ask, a raster printer will say, "Yes,
I take PostScript."

00:46:33.200 --> 00:46:35.200
You pass in PostScript,
and we'll get it to the printer for you.

00:46:35.200 --> 00:46:37.200
So that's the job submission API.

00:46:37.300 --> 00:46:39.200
And then, of course,
the job submission API.

00:46:39.270 --> 00:46:41.200
So if you have a Raster printer
with this in the system,

00:46:41.200 --> 00:46:42.590
you ask, a Raster printer will say, "Yes,
I take PostScript."

00:46:42.770 --> 00:46:44.760
So, Alan Beck, one more time.

00:46:44.800 --> 00:46:47.320
We're going to look at some of the places
where this is integrated in the system.

00:46:47.320 --> 00:46:51.950
Cocoa EPS support, which I mentioned,
and then opening up some documents.

00:46:55.800 --> 00:46:59.600
First of all,
let's first take an EPS document

00:47:00.400 --> 00:47:06.930
and we'll just drag it on to
preview and it's going to quickly --

00:47:07.000 --> 00:47:17.100
[Transcript missing]

00:47:20.590 --> 00:47:22.520
: Okay, see you at bat.

00:47:22.520 --> 00:47:25.250
And just go ahead and paste it in.

00:47:25.410 --> 00:47:27.740
See, it is a true PDF image.

00:47:27.740 --> 00:47:29.330
You can grow it.

00:47:29.600 --> 00:47:33.600
Let's see,
let's rotate it around like this.

00:47:33.600 --> 00:47:39.190
Then we can even, where is it,
show inspector.

00:47:42.820 --> 00:47:48.080
Let's just get it correct.

00:47:48.080 --> 00:47:49.650
There we go.

00:47:49.720 --> 00:47:54.370
So it is a true PDF image inside Keynote.

00:47:55.330 --> 00:47:58.340
So an application that knows
absolutely nothing about EPS can

00:47:58.340 --> 00:48:02.220
take the results of an EPS,
composite it, rotate it,

00:48:02.220 --> 00:48:07.500
deal with it as if it were and it is
a PDF representation of that graphic.

00:48:07.500 --> 00:48:09.140
So that's pretty good.

00:48:09.140 --> 00:48:10.180
But we also have PostScript support.

00:48:11.610 --> 00:48:12.860
This is a PS file.

00:48:13.070 --> 00:48:15.730
Let's just drop it on
the text edit to see,

00:48:15.740 --> 00:48:19.040
yes, it is a true percent bang PS Adobe.

00:48:20.310 --> 00:48:24.380
And we will just drop
that onto preview again.

00:48:24.380 --> 00:48:26.370
It's going to convert it.

00:48:33.200 --> 00:48:47.200
[Transcript missing]

00:48:52.800 --> 00:48:54.440
We did so good.

00:48:54.500 --> 00:48:57.560
We were doing so good.

00:48:57.580 --> 00:48:58.060
That's right.

00:48:58.060 --> 00:48:59.610
So I'll talk you through that.

00:48:59.630 --> 00:49:03.760
So what would have happened,
Preview got wedged there a little bit.

00:49:03.760 --> 00:49:07.160
You drag that PostScript document
or even double-click it.

00:49:07.160 --> 00:49:10.240
It converts the whole thing into PDF,
and Preview can show you that PDF.

00:49:10.240 --> 00:49:12.260
Now,
PDF has some great new features in it.

00:49:12.300 --> 00:49:13.820
You can search a PDF document.

00:49:13.820 --> 00:49:16.600
So you can actually then result
in search a PostScript document

00:49:16.640 --> 00:49:18.840
because it's converted into PDF,
and now the search capabilities

00:49:18.840 --> 00:49:20.130
and Preview is available.

00:49:20.310 --> 00:49:23.280
Preview lets you select text and
copy and paste out of Preview.

00:49:23.280 --> 00:49:26.280
So again, you take your PostScript file,
convert it into PDF,

00:49:26.280 --> 00:49:29.020
bring it into Preview,
and copy and paste text out of it.

00:49:29.030 --> 00:49:29.810
Think we're still wedged?

00:49:29.840 --> 00:49:29.840
We're still wedged.

00:49:31.850 --> 00:49:32.790
That's all right.

00:49:32.800 --> 00:49:33.880
Let's go on.

00:49:33.880 --> 00:49:34.280
That's all right.

00:49:34.280 --> 00:49:36.480
We'll go back to the slides.

00:49:36.480 --> 00:49:39.770
You all have your own Panther,
so you can try this at home

00:49:39.770 --> 00:49:41.710
and reboot when it gets stuck.

00:49:46.000 --> 00:49:48.400
All right, so that is the PDF sermon.

00:49:48.400 --> 00:49:53.100
We also have some new
APIs that are in the system.

00:49:53.800 --> 00:49:55.410
This is by popular request.

00:49:55.410 --> 00:49:57.620
We have this new PM Paper API.

00:49:57.620 --> 00:50:00.440
We've had a PM Page formatted
instance for a while,

00:50:00.440 --> 00:50:01.720
object for a while.

00:50:01.720 --> 00:50:04.990
That's the result,
the PM Page format of page setup.

00:50:05.080 --> 00:50:07.920
When that dialog goes away,
there's the PM Page format object that

00:50:07.920 --> 00:50:11.150
captures the paper that was selected,
the targeted printer, the scale,

00:50:11.150 --> 00:50:12.360
and the orientation.

00:50:12.360 --> 00:50:15.930
PM Paper is part of that PM Page format,
and it's going to capture just

00:50:15.980 --> 00:50:19.200
the physical characteristics
of the paper that was picked.

00:50:19.200 --> 00:50:22.830
So it's just the physical paper size,
and it's just the margins.

00:50:23.610 --> 00:50:25.480
There's some attributes that you can get.

00:50:25.510 --> 00:50:27.030
Again, the ID, the name, the height,
the width.

00:50:27.140 --> 00:50:28.730
And you can get,
and this is the important part,

00:50:28.730 --> 00:50:30.640
the list of papers that
are supported by a printer.

00:50:30.640 --> 00:50:33.760
So if you really want to know what
a particular printer supports,

00:50:33.760 --> 00:50:37.230
what their real physical paper sizes are,
PM Printer get paper list.

00:50:37.280 --> 00:50:39.580
But what people really want
to do is they want to end up

00:50:39.700 --> 00:50:42.960
creating their own page format for
whatever their crazy paper size is.

00:50:43.020 --> 00:50:45.600
So the steps are create
yourself a PM Paper to represent

00:50:45.600 --> 00:50:47.730
the physical dimensions,
and then from that you

00:50:47.930 --> 00:50:49.310
can create a page format.

00:50:49.320 --> 00:50:53.480
So PM Paper create lets you
create your 12-inch by 2-mile.

00:50:53.480 --> 00:50:53.530
So that's the first step.

00:50:53.580 --> 00:50:54.580
paper size.

00:50:54.580 --> 00:50:56.190
It's all up to you.

00:50:58.400 --> 00:50:59.890
Also some side APIs, PPD APIs.

00:50:59.890 --> 00:51:02.690
Again, this is only for a specific
class of applications,

00:51:02.690 --> 00:51:04.270
but we're installers, in fact.

00:51:04.450 --> 00:51:08.400
We now have ways for you to
get the installed set of PPDs.

00:51:08.600 --> 00:51:11.060
Once you get the installed set of
PPDs and you find one you like,

00:51:11.060 --> 00:51:14.380
you can ask for one that's localized
appropriately for the current user.

00:51:15.260 --> 00:51:16.810
And most of our PPDs are compressed.

00:51:16.860 --> 00:51:19.120
We zip them,
and you don't have to worry about that.

00:51:19.120 --> 00:51:20.800
All you do is call PM copy PPD data.

00:51:20.800 --> 00:51:23.290
We'll unzip it if we need to,
or we'll just give you the

00:51:23.290 --> 00:51:24.370
raw data if it's available.

00:51:24.410 --> 00:51:28.950
So these three APIs allow you to do
things with PPDs just like we do.

00:51:30.360 --> 00:51:31.420
Cups Update.

00:51:31.420 --> 00:51:35.740
So that whole part of the talk was about
the left-hand side of this diagram.

00:51:35.740 --> 00:51:37.260
It was the user space part of printing.

00:51:37.260 --> 00:51:40.600
There's the whole right side,
which is what we changed last year.

00:51:40.600 --> 00:51:41.760
It's the Cups D server.

00:51:41.850 --> 00:51:45.000
It's the print server where your
documents go and then start running

00:51:45.000 --> 00:51:47.200
with all these different crazy user IDs.

00:51:47.200 --> 00:51:50.450
The daemon running as root and your
filters running as this LP user and then

00:51:50.450 --> 00:51:52.240
your back end's running again as root.

00:51:52.410 --> 00:51:55.520
That's where your jobs go when
they've left your user application.

00:51:56.280 --> 00:51:57.700
So what's going on with Cups?

00:51:57.850 --> 00:52:01.740
Well, for Cups in Jaguar,
we shipped Cups 1.1.15.

00:52:01.740 --> 00:52:04.420
And over the last year,
as we were doing Jaguar updates,

00:52:04.420 --> 00:52:07.280
we've moved back important
security fixes and important bug

00:52:07.290 --> 00:52:11.310
fixes from the Cups mainline,
which was going .16, .17, .18,

00:52:11.310 --> 00:52:13.030
back onto our .15 base.

00:52:13.120 --> 00:52:15.630
A lot of people didn't understand
this and were complaining that

00:52:15.630 --> 00:52:17.040
we were stagnating our Cups base.

00:52:17.040 --> 00:52:17.860
It wasn't true.

00:52:17.860 --> 00:52:20.320
We just had a stable base we liked,
the .15 base,

00:52:20.320 --> 00:52:22.770
and we were putting important
bug fixes on top of it.

00:52:22.820 --> 00:52:25.920
And because our Cups base
is available in Darwin,

00:52:26.160 --> 00:52:28.710
and because it's live every day,
there was no reason for

00:52:28.710 --> 00:52:29.400
people to get confused.

00:52:29.400 --> 00:52:32.260
You can go there any given day and
see what we checked in any given day.

00:52:32.260 --> 00:52:34.560
We went to Cups to be
incredibly transparent,

00:52:34.560 --> 00:52:36.980
to be incredibly open for our developers,
and we are.

00:52:36.980 --> 00:52:40.640
And people should feel comfortable
going there and seeing what we're doing.

00:52:40.640 --> 00:52:42.910
You might have gotten some
early hints about facts,

00:52:42.970 --> 00:52:44.600
and there's some other
interesting things you might see

00:52:44.600 --> 00:52:45.870
as we check things in and out.

00:52:45.880 --> 00:52:49.280
Panther is moving away
from that .15 base.

00:52:49.390 --> 00:52:50.640
It's moving up to 1.119.

00:52:52.400 --> 00:52:53.270
There you go.

00:52:53.460 --> 00:52:55.220
There's some people who are not
happy with just our bug fixes,

00:52:55.220 --> 00:52:55.880
but that's okay.

00:52:55.880 --> 00:52:58.740
So all the way up to 1.1.19,
which is the latest CUPS right now.

00:52:58.850 --> 00:53:01.060
If there's a 1.1.20 in
the right time frame,

00:53:01.060 --> 00:53:02.730
I could see us possibly going to that.

00:53:02.900 --> 00:53:04.680
We pick up some new PPD support.

00:53:04.730 --> 00:53:07.390
The PPD parser in
CUPS is much more strict.

00:53:08.950 --> 00:53:11.960
Richard Blazcharg: So,
we're building some of our fax support

00:53:12.220 --> 00:53:13.780
on top of the CUPS's fax support.

00:53:13.860 --> 00:53:16.580
There's TBCP support,
so we can do some better binary

00:53:16.590 --> 00:53:18.510
printing over different channels.

00:53:18.580 --> 00:53:21.270
And there's some denial
of service security fixes.

00:53:21.270 --> 00:53:24.720
We picked up almost all of the
security fixes that were CUPS-related

00:53:24.720 --> 00:53:27.400
during the Jaguar timeframe,
except for this final

00:53:27.540 --> 00:53:31.490
batch of denial of service,
which we're going to pick up for Panther.

00:53:34.300 --> 00:53:34.740
Got this one?

00:53:34.740 --> 00:53:35.500
Provide fixes.

00:53:35.500 --> 00:53:38.720
We've been live with our
CUPS repository for over a year now,

00:53:38.720 --> 00:53:42.020
and I've had one person, one developer,
send us a bug fix.

00:53:42.180 --> 00:53:43.030
And it was a great bug fix.

00:53:43.150 --> 00:53:45.740
He found a real bug in the daemon,
provided the fix, we took it,

00:53:45.880 --> 00:53:47.970
we fed it back to the mainline,
and it was great.

00:53:48.010 --> 00:53:50.460
And it would be great if some more,
especially some of our printer vendors

00:53:50.460 --> 00:53:52.820
were looking in there and got used
to going there to find some answers,

00:53:52.820 --> 00:53:53.790
because it's all there.

00:53:53.790 --> 00:53:55.600
In fact,
I get a lot of questions that ask me

00:53:55.600 --> 00:53:58.800
some nuances of the way the daemon works,
and the general answer is, well,

00:53:58.800 --> 00:53:59.840
you know, I don't know.

00:53:59.840 --> 00:54:00.400
Sorry.

00:54:00.400 --> 00:54:01.620
But, you know, there's the source.

00:54:01.690 --> 00:54:01.980
Go look.

00:54:02.050 --> 00:54:04.180
And I actually had one developer tell me,
oh, yeah, it's the daemon.

00:54:04.200 --> 00:54:06.440
It's the typical open source answer,
and kind of blew it off.

00:54:06.560 --> 00:54:07.300
But no, there's source code.

00:54:07.300 --> 00:54:08.050
You'll figure out how it works.

00:54:08.050 --> 00:54:08.890
It's good.

00:54:10.280 --> 00:54:11.370
So what are we doing with CUPS?

00:54:11.480 --> 00:54:14.400
Well, we've got new UI to support
some of the CUPS features.

00:54:14.400 --> 00:54:15.380
CUPS is very powerful.

00:54:15.380 --> 00:54:18.210
We only bring out certain features,
but we have SMB printing support.

00:54:18.330 --> 00:54:19.630
We're bringing out UI for that.

00:54:19.680 --> 00:54:22.210
Most of our users wanted and figured
out how to do it with Jaguar.

00:54:22.210 --> 00:54:22.940
That was great.

00:54:23.080 --> 00:54:26.080
We have direct socket and IPP printing,
so we have UI to create

00:54:26.080 --> 00:54:27.440
printers based on those.

00:54:27.440 --> 00:54:28.580
We have printer pools.

00:54:28.630 --> 00:54:29.930
This is one of my favorites.

00:54:29.930 --> 00:54:31.440
It's definitely an edge case.

00:54:31.490 --> 00:54:33.840
But a printer pool allows you
to take a set of print queues,

00:54:33.840 --> 00:54:36.650
bind them up into one virtual queue,
and as jobs come into that queue,

00:54:36.650 --> 00:54:39.180
it round-robin them to the
first available printer.

00:54:40.600 --> 00:54:42.800
I particularly like this because I was
at Siebold a year and a half ago,

00:54:42.800 --> 00:54:45.080
maybe, and a professional photographer
came up to me and said,

00:54:45.080 --> 00:54:45.940
"Hey, you know, I really like CUPS.

00:54:46.020 --> 00:54:48.200
I like what you've done,
but I've got these eight photo printers.

00:54:48.200 --> 00:54:50.890
They're all identical,
and my job depends on printing as

00:54:50.890 --> 00:54:54.120
fast as I can to these printers."
And so here's his answer.

00:54:54.150 --> 00:54:54.970
It's coming in Panther.

00:54:54.970 --> 00:54:56.720
He'll be able to just
print to this virtual pool,

00:54:56.720 --> 00:54:58.370
and he'll find the
first available printer,

00:54:58.370 --> 00:55:01.070
and he can get all eight of his
printers going at the exact same time.

00:55:01.070 --> 00:55:02.620
It's a very cool feature.

00:55:02.620 --> 00:55:06.770
And then TBCP will
have UI to enable that.

00:55:06.980 --> 00:55:09.760
We're adding a lot of new support
for CUPS-based printer drivers.

00:55:09.760 --> 00:55:12.980
As I mentioned earlier in the talk,
we have two printer driver architectures.

00:55:12.980 --> 00:55:14.800
We have the CUPS-based printer
drivers and we have the older

00:55:14.800 --> 00:55:15.930
Tioga-based printer drivers.

00:55:15.930 --> 00:55:19.090
We're working to get the CUPS-based
printer drivers so they have the same,

00:55:19.140 --> 00:55:21.640
if not more, set of features that
are available in Tioga.

00:55:21.640 --> 00:55:24.580
And primarily we're doing that
by adding some new support

00:55:24.580 --> 00:55:26.120
for some new PPD keywords.

00:55:26.140 --> 00:55:27.410
Here are four of them.

00:55:27.410 --> 00:55:30.670
They allow a CUPS-based printer
driver to specify the color sync

00:55:30.930 --> 00:55:34.530
profile that color should be
converted to before it's handed to it.

00:55:35.160 --> 00:55:38.880
Richard Blaencharg What's really great
about this particular implementation

00:55:39.210 --> 00:55:41.060
is that you can provide a CMYK profile.

00:55:41.060 --> 00:55:43.120
So you can say,
here's my printer driver and I really

00:55:43.120 --> 00:55:44.530
want colors in the CMYK space.

00:55:44.580 --> 00:55:48.030
And if the application draws in CMYK,
we will get those CMYK colors all the

00:55:48.030 --> 00:55:51.830
way from the application to the printer
without going through any RGB knot hole,

00:55:51.830 --> 00:55:53.990
without any of these funny conversions.

00:55:53.990 --> 00:55:57.470
It's CMYK all the way to CMYK if that's
what the application started with.

00:55:57.540 --> 00:56:01.270
We have a new link in the PPDs
for print dialog extensions.

00:56:01.270 --> 00:56:05.040
So a CUPS-based printer driver can now
have its own UI in the print dialog.

00:56:05.160 --> 00:56:06.920
It can link to a printer utility.

00:56:06.920 --> 00:56:09.470
So the user in the printer setup
utility can click on a printer and say,

00:56:09.470 --> 00:56:10.620
hey, launch the utility.

00:56:10.620 --> 00:56:11.710
And we'll know which utility you want.

00:56:11.740 --> 00:56:12.880
And it can have an icon.

00:56:12.880 --> 00:56:14.600
You're not a printer driver
until you have an icon.

00:56:16.260 --> 00:56:17.860
Going forward,
we're going to be focused on

00:56:17.860 --> 00:56:19.580
CUPS-based printer drivers.

00:56:19.590 --> 00:56:22.500
We're going to support the
Tioga-based printer drivers,

00:56:22.560 --> 00:56:23.440
but that's not our focus.

00:56:23.530 --> 00:56:25.180
We're going to be putting all
our effort into the CUPS stuff.

00:56:25.260 --> 00:56:26.690
We're going to be making
that more and more powerful.

00:56:26.780 --> 00:56:28.550
So if you have a
Tioga-based printer driver,

00:56:28.550 --> 00:56:30.050
we're not going to leave you behind.

00:56:30.060 --> 00:56:33.720
We're not going to purposely break you,
but we want you on the

00:56:33.840 --> 00:56:38.010
CUPS printing path,
especially for some of your new drivers.

00:56:38.020 --> 00:56:40.280
And if there's something there,
something you do with the Tioga

00:56:40.280 --> 00:56:42.530
printer driver that you can't
do with the CUPS printer driver,

00:56:42.530 --> 00:56:44.430
please let us know,
and we'll work to fix that.

00:56:46.650 --> 00:56:49.040
There are a couple open source
printer projects that have been

00:56:49.040 --> 00:56:50.510
great for us over the last year.

00:56:50.730 --> 00:56:53.740
GIMP Print and HPIJS are two of them.

00:56:54.150 --> 00:56:58.010
Open source projects generally,
because the vendors do a good job

00:56:58.220 --> 00:57:00.290
supporting their most current models,
are important for some

00:57:00.330 --> 00:57:01.440
of the legacy printers.

00:57:01.490 --> 00:57:03.050
But because they're
CUPS-based printer drivers,

00:57:03.180 --> 00:57:05.830
they also allow the user access
to some features that are only

00:57:05.830 --> 00:57:07.480
available for CUPS printer drivers.

00:57:07.530 --> 00:57:09.810
Most of the printer drivers available
from the major vendors are the

00:57:09.810 --> 00:57:11.980
older Tiago-based printer drivers.

00:57:12.280 --> 00:57:13.260
GIMP Print is in Panther.

00:57:13.340 --> 00:57:14.230
This was a big deal.

00:57:14.300 --> 00:57:17.060
I have a huge thanks that go
out to the GIMP Print team.

00:57:17.060 --> 00:57:19.790
Robert Krawitz,
who organizes that team and runs it.

00:57:19.820 --> 00:57:22.370
It's an incredibly vibrant team.

00:57:23.100 --> 00:57:25.220
They have a SourceForge home.

00:57:25.220 --> 00:57:27.300
Lots of bug reports go in there.

00:57:27.300 --> 00:57:29.320
They address them incredibly quickly.

00:57:29.320 --> 00:57:31.200
In fact, if any bugs get stuck,
it's because they're

00:57:31.260 --> 00:57:32.210
usually assigned to me.

00:57:32.220 --> 00:57:33.170
Their team is great.

00:57:33.200 --> 00:57:38.090
There's also been this incredible support
for the Mac OS X version of GIMP Print,

00:57:38.100 --> 00:57:42.780
which means a great installer,
de-installer, documentation.

00:57:42.780 --> 00:57:44.790
And that's all been
done by Tyler Blessing,

00:57:44.790 --> 00:57:47.090
who's favored us all this
week with being a VIP for us

00:57:47.130 --> 00:57:48.700
and coming to the conference.

00:57:49.080 --> 00:57:50.480
You see him in the hallway,
make sure you thank him.

00:57:50.480 --> 00:57:55.940
By himself, he's brought support for over
500 printers to Mac OS X.

00:57:55.940 --> 00:57:56.910
That's one man.

00:58:01.920 --> 00:58:05.880
So we had printing in 2002,
changed the whole print system.

00:58:05.950 --> 00:58:07.520
2003, we're just evolving.

00:58:07.570 --> 00:58:09.780
What are we going to be
looking forward in 2004?

00:58:09.830 --> 00:58:11.880
We're going to keep our focus on PDF.

00:58:11.920 --> 00:58:14.000
We're going to bring more
and more new features,

00:58:14.150 --> 00:58:17.290
more and more optimizations
to that PDF printing path.

00:58:17.390 --> 00:58:19.720
If you want new features,
please get on that path.

00:58:19.810 --> 00:58:23.160
Please let us know what great
features you'd like out of PDF.

00:58:23.250 --> 00:58:25.160
File size is one we always hear,
but if you have other things,

00:58:25.210 --> 00:58:26.160
please let us know.

00:58:26.200 --> 00:58:28.060
CUPS 1.2,
that's still out there on the horizon.

00:58:28.060 --> 00:58:30.190
When it's available,
we're going to be moving to that.

00:58:30.290 --> 00:58:33.520
CUPS 2 offers some important
accounting features,

00:58:33.660 --> 00:58:36.140
some back-end bidirectional
communications features.

00:58:36.260 --> 00:58:37.740
It's going to be incredibly exciting.

00:58:37.900 --> 00:58:39.660
There are-- well, there's a source tree.

00:58:39.660 --> 00:58:42.460
You can go out there and see what's
already been done and follow it.

00:58:42.490 --> 00:58:44.760
And we're going to be focusing
on CUPS-based drivers.

00:58:44.960 --> 00:58:47.870
So that's going to be
2004 when I come back.

00:58:48.530 --> 00:58:50.520
For more information,
we actually have a lot of

00:58:50.580 --> 00:58:51.680
printing documentation.

00:58:51.690 --> 00:58:54.320
Just to give you a quick overview of it,
we have the overview

00:58:54.320 --> 00:58:55.200
of the printing system.

00:58:55.200 --> 00:58:59.000
It's a little dated,
but most of what's in there is true.

00:58:59.000 --> 00:59:02.640
We have separate documents for
supporting printing for Carbon and Cocoa.

00:59:02.640 --> 00:59:06.190
We have documentation for
writing print dialog UI.

00:59:08.270 --> 00:59:10.820
references for the Carbon printing
and for writing plugins,

00:59:10.820 --> 00:59:14.310
descriptions of how we use
PostScript printer description files.

00:59:14.390 --> 00:59:17.210
So if you wonder how we use PPDs,
there's a document that explains it.

00:59:17.280 --> 00:59:21.710
How to create presets for iPhoto,
how to use the workflow feature and

00:59:21.710 --> 00:59:23.000
how to write new workflow items.

00:59:23.020 --> 00:59:26.000
There's the CUPS software programming
manual if you want to know how

00:59:26.140 --> 00:59:27.250
CUPS itself works below us.

00:59:27.360 --> 00:59:31.060
And then there's our developer site,
developer.apple.com slash printing,

00:59:31.060 --> 00:59:32.950
and there's just a lot of
documentation off of that.

00:59:33.060 --> 00:59:34.560
So please go to these references.

00:59:34.580 --> 00:59:36.760
I think you'll find a lot of
interesting documentation,

00:59:37.080 --> 00:59:39.010
and then we have some
good sample code as well.

00:59:39.020 --> 00:59:41.000
Sample code will show
you how to use Sheets.

00:59:42.300 --> 00:59:43.240
That's always a great touch.

00:59:43.240 --> 00:59:46.760
How to mix Quartz with
your Carbon Quickdraw

00:59:46.760 --> 00:59:50.200
application and a PDE project,
how to write a print dialog extension.

00:59:50.200 --> 00:59:51.800
So please go look at those.

00:59:51.800 --> 00:59:55.620
Travis, I think, will come up and talk
you through the roadmap.

00:59:58.440 --> 00:59:59.400
Thank you, Richard.

00:59:59.400 --> 01:00:04.860
Actually, what I'm going to do is,
since those were some pretty long URLs,

01:00:04.860 --> 01:00:07.140
since we only really
have one day of sessions,

01:00:07.140 --> 01:00:09.770
I'll skip to that,
and then I'll go back to the URLs.

01:00:09.770 --> 01:00:12.200
We can be in the Q&A so you
have time to copy them down.

01:00:12.890 --> 01:00:15.950
So we're pretty much left
with just Friday's sessions,

01:00:15.990 --> 01:00:19.660
which a lot of them are going to be,
for example, court services,

01:00:19.660 --> 01:00:22.360
which relates to essentially
managing displays on Mac OS X,

01:00:22.360 --> 01:00:23.780
and that's Friday morning.

01:00:23.780 --> 01:00:26.400
Then we have one more OpenGL session,
this one hosted by ATI,

01:00:26.400 --> 01:00:29.130
who is our hardware partner,
who's going to be showing us all the

01:00:29.130 --> 01:00:33.100
latest visual effects you can accomplish
using their hardware and programmability.

01:00:33.100 --> 01:00:36.600
We also have a session on
Mac OS X accessibility.

01:00:36.600 --> 01:00:38.300
This will be an interesting session.

01:00:38.300 --> 01:00:40.770
If you want to ensure that
users with disability can

01:00:40.840 --> 01:00:43.740
successfully... use your software.

01:00:43.740 --> 01:00:46.830
And then obviously we have the feedback
forum where you can feel free to come

01:00:46.910 --> 01:00:53.170
and give us feedback on the sessions,
and also questions, issues you have with

01:00:53.240 --> 01:00:56.980
Mac OS X printing in general,
that we can often incorporate

01:00:56.980 --> 01:01:00.340
into our planning for the next
major release of Mac OS X.

01:01:00.340 --> 01:01:04.570
So let me invite the printing
team so we can get our Q&A going.