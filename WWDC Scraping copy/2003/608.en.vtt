WEBVTT

00:00:30.640 --> 00:00:31.210
Very exciting.

00:00:31.210 --> 00:00:34.820
I'd like to thank you guys for
coming here so early in the morning.

00:00:34.820 --> 00:00:38.910
I see a crowd like this, and I think,
all right, job security.

00:00:38.920 --> 00:00:45.820
So my name is Matt Drance,
and I work in developer tech support.

00:00:45.820 --> 00:00:50.300
So for all of you who may
be submitting tech support

00:00:50.580 --> 00:00:54.150
incidents to DTS at Apple.com,
there's a 50-50 chance that

00:00:54.150 --> 00:00:55.100
you'll be talking to me.

00:00:55.100 --> 00:00:57.660
The other chance is that you'll
be talking to Ted Jucevic,

00:00:57.660 --> 00:01:00.800
who will be up here a little later to
give the other half of this presentation.

00:01:03.090 --> 00:01:04.540
So, what are we doing today?

00:01:04.540 --> 00:01:05.340
What are we talking about?

00:01:05.340 --> 00:01:10.010
So, Apple has been trying to convey the
message as much as possible that

00:01:10.010 --> 00:01:13.410
we feel that Java applications are
first-class citizens on Mac OS X.

00:01:13.420 --> 00:01:18.410
We offer a lot of tricks and tips
and techniques that you can use

00:01:18.540 --> 00:01:22.160
to improve the user experience
of your Java app on Mac OS X,

00:01:22.160 --> 00:01:25.830
make it feel as Mac-like as possible,
and we also have a lot of deployment

00:01:25.940 --> 00:01:28.820
options for your end-user desktop
applications that we're going

00:01:28.820 --> 00:01:29.790
to be talking about today.

00:01:29.800 --> 00:01:34.810
And most of the technical details in
this talk will be regarding the 141

00:01:34.810 --> 00:01:39.500
J2SE that's now available for Mac OS X,
Jaguar, and of course Panther.

00:01:39.500 --> 00:01:42.200
For Jaguar,
it's available in software update,

00:01:42.200 --> 00:01:45.500
and there's also a developer
update with tools and headers and

00:01:45.500 --> 00:01:49.080
such that you can get from the
ADC website at connect.apple.com.

00:01:51.090 --> 00:01:54.040
So, what specifically are we going
to be talking about today?

00:01:54.040 --> 00:01:58.580
I'm going to talk a little bit about
some pertinent directories on Mac OS X,

00:01:58.580 --> 00:02:01.680
where to put certain files,
and where to find things.

00:02:01.680 --> 00:02:04.120
I'm going to talk about the
Aqua look and feel for Swing.

00:02:04.120 --> 00:02:06.000
Just out of curiosity,
how many people were at the

00:02:06.140 --> 00:02:07.390
State of the Union talk on Monday?

00:02:07.400 --> 00:02:09.400
Okay, a lot of you.

00:02:09.440 --> 00:02:12.000
So I'll run through that,
since you saw most of it already.

00:02:12.000 --> 00:02:15.910
And I'm going to talk about some
cross-platform UI programming techniques

00:02:16.030 --> 00:02:18.500
that will benefit you on the Mac,
as well as on Windows or Linux,

00:02:18.570 --> 00:02:20.310
or anywhere else you're
looking to deploy and develop.

00:02:21.000 --> 00:02:23.740
And I'm going to talk about some
specific things that you can

00:02:23.740 --> 00:02:27.390
do for Mac OS X to make things
adhere better to the Aqua human

00:02:27.390 --> 00:02:30.450
interface guidelines standards,
just really make your Java app as

00:02:30.510 --> 00:02:34.110
indistinguishable as possible from
a Cocoa or Carbon application.

00:02:34.120 --> 00:02:36.380
And Ted will come up a little later.

00:02:36.380 --> 00:02:39.180
He'll talk about some of the runtime
properties that we have available

00:02:39.180 --> 00:02:42.120
on Mac OS X and all the deployment
options available to you as a developer.

00:02:44.420 --> 00:02:47.240
So where things are.

00:02:47.300 --> 00:02:50.620
Like I said, we're now shipping,
or we now have available

00:02:50.750 --> 00:02:53.080
the 141 SDK for Mac OS X.

00:02:53.410 --> 00:02:56.720
If developers are coming
over from other platforms,

00:02:56.840 --> 00:03:00.940
typically we see a lot of shell
script-based applications.

00:03:00.990 --> 00:03:05.300
And one of the more important areas
and locations for running a Java app

00:03:05.380 --> 00:03:07.160
is the concept of a Java home.

00:03:07.160 --> 00:03:10.540
So you can get to things like Java and
Java C and so on and so forth.

00:03:10.580 --> 00:03:14.580
So on Mac OS X,
we have an easily rememberable

00:03:14.580 --> 00:03:18.180
and placeable symbolic link that
you can see up on the screen

00:03:18.180 --> 00:03:20.700
here called /library/java/home.

00:03:20.720 --> 00:03:23.900
And from there, you can go down to bin
and view Java and Java C,

00:03:23.900 --> 00:03:25.300
et cetera, et cetera.

00:03:25.300 --> 00:03:31.380
And this will always be pointing to the
current version of Java on Mac OS X.

00:03:31.380 --> 00:03:32.770
So currently, that's 141.

00:03:32.890 --> 00:03:35.570
Previously on 10.1, that pointed to 131.

00:03:35.620 --> 00:03:38.580
So that's something that you'll never
have to update in your applications.

00:03:38.580 --> 00:03:40.320
You'll always get the newest version.

00:03:40.340 --> 00:03:43.010
And as far as extensions
and JNI directories,

00:03:43.150 --> 00:03:46.270
that's I guess the equivalent
of other platforms would be a

00:03:46.280 --> 00:03:48.570
libx or a java.library.path.

00:03:48.600 --> 00:03:51.070
On Mac OS X,
you can just drop your JNI libraries

00:03:51.080 --> 00:03:55.250
or your extension jars in library
Java extensions off the root,

00:03:55.270 --> 00:03:57.990
as well as off the home directory,
the user's home directory.

00:03:58.100 --> 00:04:01.040
So if you have some jars or
JNI libraries that you don't want

00:04:01.040 --> 00:04:03.450
available to the entire system,
that you just want within

00:04:03.450 --> 00:04:06.150
the scope of a single user,
you can drop them there.

00:04:06.620 --> 00:04:10.450
As far as doing JNI work or
VM invocation work with native code,

00:04:10.450 --> 00:04:15.700
the VM headers are available
inside the Java VM framework.

00:04:15.700 --> 00:04:16.980
You can see the path up here.

00:04:16.980 --> 00:04:20.630
If you're doing development with Xcode,
or formerly known as Project Builder,

00:04:20.700 --> 00:04:23.420
all you need to do is add the
Java VM framework to your project,

00:04:23.420 --> 00:04:25.470
and the headers will
immediately be added,

00:04:25.470 --> 00:04:29.020
and you don't need to do any additions
to your paths or anything like that.

00:04:30.480 --> 00:04:32.360
So let's talk a little bit
about the Aqua look and feel.

00:04:32.360 --> 00:04:36.600
A lot of you have already seen this since
you've been to the State of the Union,

00:04:36.600 --> 00:04:37.680
but I'm going to run through it anyway.

00:04:37.680 --> 00:04:42.100
Aqua is the default swing look and
feel for Java apps on Mac OS X.

00:04:42.100 --> 00:04:45.620
We have some extra tweaks in there,
like the screen menu bar,

00:04:45.620 --> 00:04:49.380
putting the menu bar for J frames,
like we like to say,

00:04:49.380 --> 00:04:50.300
where it's supposed to be.

00:04:50.300 --> 00:04:54.880
We animate the default buttons
on J frames and root panes.

00:04:55.000 --> 00:04:58.120
We animate the indeterminate
progress bar with the,

00:04:58.120 --> 00:05:01.990
I guess,
the barbershop stripe animation that

00:05:01.990 --> 00:05:03.710
you see on Cocoa and Carbon apps.

00:05:03.840 --> 00:05:07.950
There's a little bit on component sizing
that you might need to get used to.

00:05:08.100 --> 00:05:10.940
In certain places,
we size our components the way the

00:05:11.120 --> 00:05:13.260
Aqua specs suggest that they be.

00:05:13.260 --> 00:05:16.230
So, for example,
the picture behind me here is of

00:05:16.230 --> 00:05:18.290
a J combo box in a border layout.

00:05:18.300 --> 00:05:21.660
And you can see the
window below is in metal,

00:05:21.660 --> 00:05:25.130
and the J combo box's button
expands to the size of... the

00:05:25.130 --> 00:05:27.380
complete eastern container there.

00:05:27.400 --> 00:05:30.530
The Aqua version... Something's
going on over there.

00:05:30.540 --> 00:05:35.970
The Aqua version is basically sized
down to how you would expect it to look

00:05:36.040 --> 00:05:38.250
in an Aqua application on Mac OS X.

00:05:38.270 --> 00:05:41.940
So there's things like that that
you might need... that you might

00:05:42.180 --> 00:05:45.400
see change from platform to
platform as you move over to X.

00:05:45.400 --> 00:05:50.520
And we do similar things with
J buttons and with tabs in J tab panes,

00:05:50.600 --> 00:05:51.980
and that's something I'll be
showing you in a little while.

00:05:52.020 --> 00:05:56.380
Speaking of J tab panes,
one of the other parts of the

00:05:56.380 --> 00:05:59.780
Aqua specs suggests that tabs,
no matter how many of them you have,

00:05:59.890 --> 00:06:00.630
be in a single row.

00:06:01.020 --> 00:06:07.460
Other look and feels like metal and
windows and... What's the slash one?

00:06:07.460 --> 00:06:07.960
Motif.

00:06:08.230 --> 00:06:10.930
Have support for multiple rows of tabs.

00:06:10.990 --> 00:06:12.870
Aqua does not like that.

00:06:12.940 --> 00:06:16.420
So with our Aqua look and feel for swing,
we made a single row of tabs,

00:06:16.420 --> 00:06:19.160
and the problem there is if what if you
have more tabs than fit on the window?

00:06:19.280 --> 00:06:20.470
That's the whole point of multiple rows.

00:06:20.620 --> 00:06:24.010
So we created a navigation control
in 1.4 that will drop a menu down

00:06:24.120 --> 00:06:24.760
for all the tabs that you can use.

00:06:24.760 --> 00:06:28.350
You can't see and that will allow
the user to jump across to the tab

00:06:28.410 --> 00:06:29.680
that they may or may not want to see.

00:06:30.050 --> 00:06:34.550
These names of the tabs, of course,
aren't very descriptive, but...

00:06:35.730 --> 00:06:38.250
So I'm just going to pull up a demo here.

00:06:38.260 --> 00:06:40.400
It shows you all the
things I'm talking about.

00:06:40.480 --> 00:06:42.990
I understand that we've had
quite a few questions about

00:06:43.130 --> 00:06:44.620
tabs in the last couple of days.

00:06:44.680 --> 00:06:50.640
So I figured we should maybe show
off what we've got here in 1.4.

00:06:51.500 --> 00:06:54.680
So this is a very simple demo,
simply showing off what

00:06:54.680 --> 00:06:55.780
we have here in Aqua.

00:06:55.780 --> 00:06:57.490
This is how the tabs look.

00:06:57.490 --> 00:07:01.770
This is the standard font that you
would see in a Cocoa application.

00:07:01.860 --> 00:07:05.480
And keep in mind that if a
new OS were to come out and,

00:07:05.480 --> 00:07:10.980
say, change the layout and font size and
type of all your controls and labels,

00:07:10.980 --> 00:07:15.300
and I can't imagine why
something like that would happen,

00:07:15.300 --> 00:07:19.460
you'll get all that stuff for
free if you use Aqua Swing.

00:07:19.460 --> 00:07:21.420
You don't really need to give much.

00:07:21.580 --> 00:07:22.340
You don't care to any of that stuff.

00:07:22.380 --> 00:07:24.980
So change the look and feel to metal.

00:07:24.980 --> 00:07:28.360
And one of the things you notice
right away is that the tab icon

00:07:28.360 --> 00:07:33.730
size changed over here on my tab.

00:07:33.920 --> 00:07:37.710
And my menu bar went
down to the bottom here.

00:07:37.740 --> 00:07:43.120
So one of the things that Mac OS X does,
and I'll go back to this tab icon.

00:07:43.120 --> 00:07:44.440
This is the icon that I'm using here.

00:07:44.440 --> 00:07:46.690
And it's the same one that
I'm using at the top here.

00:07:46.850 --> 00:07:51.460
And that is being shrunk down
by Aqua to have the tabs obey.

00:07:51.510 --> 00:07:53.290
So you only get one size of tabs.

00:07:53.360 --> 00:07:56.100
I know there are some people who were
hoping there were multiple sizes.

00:07:56.100 --> 00:07:57.830
I'm sorry to say that there aren't.

00:07:58.050 --> 00:08:03.840
And left, right, bottom placement,
this is just regular Java calls.

00:08:03.840 --> 00:08:05.830
I can't remember what the
specific call was for the tab

00:08:05.830 --> 00:08:06.960
pane to set the alignment.

00:08:06.960 --> 00:08:09.980
But it behaves as you
would expect in Aqua.

00:08:09.980 --> 00:08:15.490
And we have toolbar buttons,
the toggle buttons as you would expect,

00:08:15.610 --> 00:08:17.440
toolbar toggle buttons.

00:08:17.500 --> 00:08:19.930
We've got default buttons,
and you can see the animation.

00:08:20.020 --> 00:08:20.580
Can you?

00:08:20.580 --> 00:08:21.270
Oh, good.

00:08:21.380 --> 00:08:22.090
It's coming out well.

00:08:22.100 --> 00:08:24.850
And as you would expect,
I hit the enter key,

00:08:24.950 --> 00:08:28.320
and the button is activated,
and so on and so forth.

00:08:28.440 --> 00:08:30.700
And here are my progress bars.

00:08:30.700 --> 00:08:34.570
But my indeterminate
progress bar seems to...

00:08:34.740 --> 00:08:37.140
That may be a bug on my part.

00:08:37.300 --> 00:08:39.730
Let's see if I remembered to
actually turn it on or not.

00:08:39.760 --> 00:08:40.530
Oh, there it is.

00:08:42.560 --> 00:08:45.270
So this is the indeterminate
progress bar at the top,

00:08:45.270 --> 00:08:48.790
and it animates as you would
expect it to as a Carbon or

00:08:48.840 --> 00:08:50.680
Cocoa application would do.

00:08:50.680 --> 00:08:53.260
And at the bottom,
we have the determinate progress bar.

00:08:53.260 --> 00:08:55.960
And they still actually animate
as you move the window around,

00:08:55.960 --> 00:08:56.640
which is kind of neat.

00:08:56.640 --> 00:08:58.680
That's something that
didn't happen in 1.3.1.

00:08:58.680 --> 00:09:02.100
And that's one of our advantages
from being a Coco-based UI now

00:09:02.100 --> 00:09:05.060
instead of a Carbon-based UI.

00:09:05.060 --> 00:09:06.510
I think that's enough.

00:09:06.600 --> 00:09:08.980
Can we go back to the slides, please?

00:09:08.980 --> 00:09:10.460
All right.

00:09:11.200 --> 00:09:15.180
So let's talk a little bit about
cross-platform programming techniques.

00:09:15.280 --> 00:09:18.020
There's a lot of things that I see
working with a lot of developers.

00:09:18.020 --> 00:09:22.200
How many developers do we have here that
are new to the Mac or looking at the

00:09:22.200 --> 00:09:26.130
Macintosh and coming over to Mac OS X?

00:09:27.700 --> 00:09:32.360
So most of this crowd are people who
are primarily Mac OS X Java developers.

00:09:32.410 --> 00:09:33.600
That's great.

00:09:33.880 --> 00:09:34.290
Excellent.

00:09:34.510 --> 00:09:37.030
But I'd like to extend a warm welcome
to the people who are coming over,

00:09:37.100 --> 00:09:37.480
too.

00:09:37.530 --> 00:09:40.500
Last year,
the crowd was mostly Windows and

00:09:40.590 --> 00:09:42.630
Solaris people coming over to the Mac.

00:09:42.760 --> 00:09:44.560
So it's great to see a crowd this big.

00:09:44.800 --> 00:09:49.480
So this list of tips and
tricks that I came up with,

00:09:49.530 --> 00:09:52.470
basically I put together from working
with a lot of developers coming over

00:09:52.470 --> 00:09:56.020
to the platform and looking at some
common mistakes or preconceptions

00:09:56.100 --> 00:10:00.700
that they had in their heads about
how Java behaved on every platform.

00:10:00.750 --> 00:10:03.320
And actually, some of it I've changed
in the last 18 hours,

00:10:03.380 --> 00:10:07.600
just from my experience in
the Java lab downstairs.

00:10:07.680 --> 00:10:11.630
So that's how committed I am to you.

00:10:14.070 --> 00:10:15.920
So let's talk a little bit
about working with components.

00:10:15.920 --> 00:10:16.880
This is kind of fuzzy.

00:10:16.880 --> 00:10:19.210
But generally,
you want to do as little as

00:10:19.210 --> 00:10:21.770
possible when you're styling and
sizing your components in Swing.

00:10:21.780 --> 00:10:25.940
If you need to ask,
if you need to figure out,

00:10:25.940 --> 00:10:29.140
you're making a custom component,
you want to know how big to make it,

00:10:29.140 --> 00:10:30.520
you want to know what color
to make the background,

00:10:30.520 --> 00:10:32.950
you want to know what font to
be using or what kind of icons

00:10:32.950 --> 00:10:34.900
to be using for a checkbox,
for example.

00:10:34.900 --> 00:10:37.070
Or, you know,
get the Stripe background that

00:10:37.070 --> 00:10:38.780
you see in all the Aqua controls.

00:10:38.780 --> 00:10:45.400
You can usually ask the UI manager
what to do for these kinds of things.

00:10:45.480 --> 00:10:47.390
And all these properties
that I have here,

00:10:47.480 --> 00:10:51.250
for example, the combo box background,
the J checkbox, menu item, check icon,

00:10:51.250 --> 00:10:53.480
those are all Swing standard properties.

00:10:53.480 --> 00:10:54.930
Those aren't Mac-specific things.

00:10:55.030 --> 00:10:57.530
One of the greatest things
to do as a Swing developer,

00:10:57.530 --> 00:11:00.880
something that I did very early on
when I started to work at Apple,

00:11:00.880 --> 00:11:04.880
is just write a little unit
test that calls UI manager,

00:11:04.900 --> 00:11:08.120
get defaults, and just dump all the
keys and values of those.

00:11:08.120 --> 00:11:12.300
And that can do you a lot of good
if you're looking to create custom

00:11:12.300 --> 00:11:16.400
components and you don't know how
to make the Aqua Stripe background,

00:11:16.400 --> 00:11:16.810
for example.

00:11:16.880 --> 00:11:18.140
You don't know what font to use.

00:11:18.150 --> 00:11:20.000
You don't know what icons
to use for a checkbox,

00:11:20.100 --> 00:11:20.780
for example.

00:11:20.800 --> 00:11:24.020
And as far as sizing and placement,
really the easiest thing,

00:11:24.020 --> 00:11:27.540
the best thing that I can tell you
to do is use the layout managers.

00:11:27.560 --> 00:11:29.460
Layout managers do most
of the work for you.

00:11:29.460 --> 00:11:30.640
They take care of spacing.

00:11:30.670 --> 00:11:31.710
They take care of size.

00:11:31.770 --> 00:11:34.840
Our layout managers, unless you,
you know, customize,

00:11:34.840 --> 00:11:37.960
and specifically do their
best to size and space things

00:11:37.960 --> 00:11:39.910
according to the Aqua HI spec.

00:11:40.080 --> 00:11:42.800
And they respect preferred
size in the most case.

00:11:42.800 --> 00:11:46.200
You usually want to make sure
you're using a layout manager at

00:11:46.200 --> 00:11:49.720
the lowest level that respects
the preferred size of a button,

00:11:49.720 --> 00:11:50.720
for example.

00:11:50.720 --> 00:11:52.830
The first one that comes
to mind is flow layout,

00:11:52.830 --> 00:11:53.510
obviously.

00:11:56.510 --> 00:11:58.760
So I want to talk a little
bit about JDesktopPane.

00:11:58.760 --> 00:12:01.340
I don't see a lot of people
using it that much anymore,

00:12:01.340 --> 00:12:02.790
but I just wanted to mention it.

00:12:03.060 --> 00:12:05.900
Our big mantra is just
say no to JDesktopPane.

00:12:05.920 --> 00:12:09.720
The real reason is there's really just
no equivalent to it on the Macintosh.

00:12:09.900 --> 00:12:12.400
Carbon and Cocoa have no
concept of an MDI interface.

00:12:12.400 --> 00:12:16.240
And it's very confusing to a user,
and I'll show you what

00:12:16.240 --> 00:12:17.000
I mean in a second.

00:12:17.000 --> 00:12:18.910
There are plenty of alternatives to it.

00:12:18.960 --> 00:12:21.780
Like I said, I don't see a lot of
people using it anymore.

00:12:21.780 --> 00:12:23.940
Most people are using,
at least on the Mac,

00:12:24.020 --> 00:12:27.500
either just the multiple frame case,
if you have a document-based

00:12:27.500 --> 00:12:32.750
application like a text editor,
or with applications like JBuilder,

00:12:32.750 --> 00:12:37.920
LimeWire, Project Builder, iTunes,
all these other ones have not

00:12:37.920 --> 00:12:40.810
necessarily just one window,
but a single frame that has a

00:12:40.810 --> 00:12:43.260
bunch of different containers
that move in and out,

00:12:43.260 --> 00:12:45.170
and navigation tabs and stuff like that.

00:12:45.230 --> 00:12:48.660
And that's perfectly acceptable,
and we definitely encourage

00:12:48.660 --> 00:12:49.790
that kind of development.

00:12:49.800 --> 00:12:52.470
So this is what I was
talking about a second ago.

00:12:52.480 --> 00:12:55.060
You can see the JDesktopPane up here,
and there's a window over

00:12:55.120 --> 00:12:57.730
here with the taxi cab,
and it appears to be dragged

00:12:57.920 --> 00:13:01.870
off-screen or just over to the right,
and there's BBEdit in the background,

00:13:01.880 --> 00:13:04.070
and you would expect, you know,
my grandmother might expect

00:13:04.200 --> 00:13:06.170
that the other side of that
window should be over BBEdit,

00:13:06.180 --> 00:13:08.240
but we don't know where
that window has gone.

00:13:08.240 --> 00:13:08.780
It's vanished.

00:13:08.780 --> 00:13:11.360
And, you know,
we also have two docks here, and,

00:13:11.360 --> 00:13:16.020
you know, I don't know where
I minimized one window to,

00:13:16.020 --> 00:13:18.090
if it's down in this dock or
if it's in this other one.

00:13:18.100 --> 00:13:21.720
It's really kind of counterintuitive,
and it doesn't really look

00:13:21.720 --> 00:13:23.820
like a Mac OS X application,
in my opinion.

00:13:23.850 --> 00:13:27.220
So our advice is, Stay away.

00:13:29.710 --> 00:13:31.550
So let's talk about menu shortcuts now.

00:13:31.560 --> 00:13:33.060
This is something that I still see a lot.

00:13:33.060 --> 00:13:34.650
I talked about it last year.

00:13:34.910 --> 00:13:37.840
But we have a new
generation of developers,

00:13:37.840 --> 00:13:39.490
I guess, who maybe weren't here.

00:13:39.820 --> 00:13:46.550
So one of the biggest things I see with
menu development is that people just--

00:13:46.640 --> 00:13:48.640
Typically, from doing development
primarily on Windows,

00:13:48.640 --> 00:13:52.520
see the control key as the shortcut,
and they hard-code the control

00:13:52.520 --> 00:13:53.430
key as the menu shortcut.

00:13:53.460 --> 00:13:55.090
That's really not the thing to do.

00:13:55.100 --> 00:13:57.190
There's a much easier way of doing it.

00:13:57.290 --> 00:13:59.470
You can just ask the toolkit,
the AWT toolkit,

00:13:59.560 --> 00:14:03.980
to get the menu shortcut key mask,
and it'll return control

00:14:03.980 --> 00:14:04.720
for you on Windows.

00:14:04.720 --> 00:14:07.360
It'll return control for you on Linux.

00:14:07.400 --> 00:14:10.130
It'll return command or meta on the Mac.

00:14:10.220 --> 00:14:11.650
And this is one call
that you need to make.

00:14:11.710 --> 00:14:14.860
You don't need to check your OS version
or OS vendor or anything like that,

00:14:14.860 --> 00:14:16.280
and you'll get it every time.

00:14:16.610 --> 00:14:19.310
You're basically pushing the
work off to the host platform,

00:14:19.310 --> 00:14:21.960
which is really what Java's
supposed to be doing.

00:14:21.960 --> 00:14:27.110
Another thing we would suggest is
checking out the Aqua HI guidelines to

00:14:27.110 --> 00:14:31.020
find out what letter shortcuts to use,
things like S for save and O for open.

00:14:31.020 --> 00:14:34.820
We've got a big grid there for what
the standard application things are.

00:14:34.840 --> 00:14:37.750
So you can make your app look
exactly like BBEdit or Xcode,

00:14:37.790 --> 00:14:39.240
if that's what you want.

00:14:39.280 --> 00:14:42.820
So what's the other thing?

00:14:42.850 --> 00:14:43.500
Mnemonics.

00:14:43.640 --> 00:14:48.140
This is just a... cosmetic
thing worth mentioning.

00:14:48.140 --> 00:14:51.130
The Aqua Human Interface guideline
really makes no mention of mnemonics.

00:14:51.140 --> 00:14:54.510
And they will work in
Aqua Swing if you use them,

00:14:54.510 --> 00:14:55.900
with the exception of
the screen menu bar.

00:14:55.900 --> 00:14:58.480
If you have mnemonics in your
menu items in the screen menu bar,

00:14:58.480 --> 00:15:00.940
as soon as it goes up there,
we're not going to paint them anymore.

00:15:00.940 --> 00:15:04.740
Because that's kind of our prerogative
to conform to the HI guidelines.

00:15:04.740 --> 00:15:06.470
If you have them, you know,
with other controls

00:15:06.470 --> 00:15:08.330
or anything like that,
they'll still be painted.

00:15:08.430 --> 00:15:13.100
But for menu mnemonics,
we really suggest either conditionally

00:15:13.100 --> 00:15:16.380
placing them or not using them
at all if you're targeting them.

00:15:16.600 --> 00:15:18.110
math.

00:15:19.040 --> 00:15:22.720
So contextual menus and mouse clicks,
right clicks, control clicks.

00:15:22.720 --> 00:15:24.980
That's the trick, isn't it?

00:15:25.100 --> 00:15:25.500
Which is it?

00:15:25.560 --> 00:15:27.460
So it could be either.

00:15:27.460 --> 00:15:29.170
It depends on what kind
of mouse your user has.

00:15:29.180 --> 00:15:30.790
And as a developer,
you don't know who's going

00:15:30.790 --> 00:15:31.690
to be using your application.

00:15:31.720 --> 00:15:33.380
So this can get to be a mess.

00:15:33.380 --> 00:15:37.280
Fortunately,
Sun has provided an easy method for this,

00:15:37.300 --> 00:15:40.100
very similar to the menu shortcut mask,
called isPopupTrigger.

00:15:40.100 --> 00:15:42.960
You ask the mouse event,
should I be showing a pop-up here?

00:15:42.960 --> 00:15:44.300
And it tells you true or false.

00:15:44.300 --> 00:15:46.710
It, again,
defers the work to the host platform,

00:15:46.720 --> 00:15:48.020
and that's all you have to do about it.

00:15:48.440 --> 00:15:51.280
No checking for masks or button
numbers or anything like that.

00:15:51.320 --> 00:15:54.100
The only trick is that
you typically want to,

00:15:54.100 --> 00:15:56.320
in your mouse listener,
put this in the mouse pressed

00:15:56.470 --> 00:15:58.130
and the mouse released methods.

00:15:58.180 --> 00:16:00.180
On Windows, it does it in one.

00:16:00.180 --> 00:16:01.780
I believe Windows does
it in mouse released.

00:16:01.780 --> 00:16:03.270
And on the Mac,
I believe it's mouse pressed.

00:16:03.280 --> 00:16:04.380
I might have them backwards.

00:16:04.380 --> 00:16:06.960
The idea is use both.

00:16:07.030 --> 00:16:10.610
And, you know, again,
control left is not button two.

00:16:10.620 --> 00:16:12.400
So those don't register the same events.

00:16:12.490 --> 00:16:14.460
On the Mac, you know,
all Macs come with a one-button mouse.

00:16:14.520 --> 00:16:17.360
So typically,
the pop-up trigger is a control click.

00:16:18.050 --> 00:16:20.250
Somebody buys a two-button mouse later,
and then they have the right

00:16:20.310 --> 00:16:21.420
click as the pop-up trigger.

00:16:21.420 --> 00:16:22.810
That is not the same event in Java.

00:16:22.860 --> 00:16:25.600
So you really should use this
abstracted method because then

00:16:25.600 --> 00:16:26.510
you don't have to worry about it.

00:16:29.110 --> 00:16:31.950
So I wanted to talk
quickly about file access.

00:16:32.020 --> 00:16:37.180
I'm kind of being really
high-level and abstract here.

00:16:37.180 --> 00:16:38.620
You know,
there's different cases all the time.

00:16:38.620 --> 00:16:42.560
But really try not to hard-code file
paths when you're getting to things.

00:16:42.630 --> 00:16:44.300
Use things like file dialogues.

00:16:44.320 --> 00:16:48.220
Use the user directory and the user home.

00:16:48.220 --> 00:16:52.780
Use the file separator system property,
which gives you either a forward

00:16:52.870 --> 00:16:57.750
slash or a backslash or whatever is
appropriate for the host platform.

00:16:58.380 --> 00:17:00.800
If you have things like image
files or anything that you need

00:17:00.800 --> 00:17:03.500
to load into your application,
it's very easy to just put those on the

00:17:03.620 --> 00:17:08.200
class path and then get to them using
calls like classloader.getsystemresource.

00:17:08.200 --> 00:17:10.660
There are a bunch of
equivalent calls like that.

00:17:10.790 --> 00:17:14.210
And basically,
you can access anything on the class

00:17:14.210 --> 00:17:15.460
path that'll do that kind of thing.

00:17:15.460 --> 00:17:18.560
And it's really handy to use with
things like image icons or images.

00:17:18.560 --> 00:17:21.800
And then you don't have to use
any kind of file path at all.

00:17:21.800 --> 00:17:22.740
You just use the file name.

00:17:22.760 --> 00:17:23.720
And that's really handy.

00:17:27.090 --> 00:17:28.440
So a little bit about image formats.

00:17:28.440 --> 00:17:29.490
This is something that's come up.

00:17:29.560 --> 00:17:32.290
This is more of a performance issue,
but since it deals with platform

00:17:32.770 --> 00:17:35.500
differences in image formats,
I wanted to bring it up.

00:17:35.560 --> 00:17:40.690
An index color model in particular
on Mac OS X is just not native or

00:17:40.690 --> 00:17:42.850
not acceptable to core graphics.

00:17:42.920 --> 00:17:46.120
So regardless of what we do in Java,
those kind of images are

00:17:46.210 --> 00:17:47.580
going to perform badly.

00:17:47.630 --> 00:17:51.600
Core graphics also prefers
images or color models with

00:17:51.600 --> 00:17:53.740
an alpha value specified.

00:17:54.280 --> 00:17:55.940
When you're working
with a buffered image,

00:17:56.060 --> 00:17:59.970
we suggest that you use the appropriate
methods like create image or the

00:18:00.040 --> 00:18:02.050
best is create compatible image.

00:18:02.130 --> 00:18:05.950
Again, that'll push the work off
to the host platform to...

00:18:08.700 --> 00:18:25.200
[Transcript missing]

00:18:25.300 --> 00:18:42.900
[Transcript missing]

00:18:43.190 --> 00:18:46.750
So I'm going to talk a little
bit about coding for Mac OS X,

00:18:46.830 --> 00:18:50.600
things that you can do specifically
on the Mac without a whole lot

00:18:50.600 --> 00:18:54.860
of impact on your code base and
on the way you deploy or develop.

00:18:54.960 --> 00:18:57.810
I'm going to talk about
illustrating document changes,

00:18:57.890 --> 00:19:01.500
scroll bar policies, toolbar buttons,
file dialogues,

00:19:01.510 --> 00:19:04.780
our new extended AWT API for
doing things like handling the

00:19:04.840 --> 00:19:07.890
items in the application menu,
opening documents that you

00:19:07.980 --> 00:19:09.320
may want to write or save to.

00:19:09.320 --> 00:19:12.890
And I'm going to talk about the
Apple extended IO class also.

00:19:13.100 --> 00:19:14.740
So document changes.

00:19:14.750 --> 00:19:17.950
First off, you may notice anybody
who's working on Mac OS X,

00:19:18.020 --> 00:19:21.030
if you're working in BBEdit or
Project Builder or anything like that,

00:19:21.100 --> 00:19:23.230
you notice whenever
you have unsaved work,

00:19:23.230 --> 00:19:25.400
you get a little black
dot in the close box.

00:19:25.500 --> 00:19:27.190
Well, believe it or not,
you can do that with

00:19:27.190 --> 00:19:28.230
your Java application.

00:19:28.240 --> 00:19:30.850
We've added a little client
property to JFrames and

00:19:30.850 --> 00:19:32.760
I believe JInternalFrames also.

00:19:32.760 --> 00:19:36.610
You just get the root pane and you
set a client property called window

00:19:36.610 --> 00:19:38.730
modified to either true or false.

00:19:38.840 --> 00:19:42.240
And then we'll just immediately paint
that little black dot in the close box.

00:19:42.340 --> 00:19:43.040
So if you have a document.

00:19:43.140 --> 00:19:44.780
If you have a client-based application,
you want to do this kind of thing.

00:19:44.780 --> 00:19:46.600
It's very simple and it's instantaneous.

00:19:46.600 --> 00:19:48.330
There's really not a lag
or anything like that.

00:19:48.350 --> 00:19:51.330
You don't need to do any kind
of threading games to make

00:19:51.330 --> 00:19:53.220
sure the AWT has been updated.

00:19:53.220 --> 00:19:54.170
It's pretty instantaneous.

00:19:55.990 --> 00:19:56.950
So scroll bar policies.

00:19:57.080 --> 00:20:01.540
The Aqua HI guidelines talk about if you
have a window with scrollable content,

00:20:01.660 --> 00:20:05.610
with potentially scrollable content,
even if your content's not

00:20:05.610 --> 00:20:09.310
moving off the complete area yet,
you should show the

00:20:09.430 --> 00:20:12.600
scroll bars at all times,
even if at the time they're disabled.

00:20:12.770 --> 00:20:15.880
So on the left,
I have an example of somebody who's

00:20:16.050 --> 00:20:20.820
read the HI guidelines and set their
scroll bar policies to true or always

00:20:20.830 --> 00:20:25.090
for vertical and horizontal because they
expect that the content will at some

00:20:25.180 --> 00:20:26.960
point go both down and to the right.

00:20:27.000 --> 00:20:31.110
And on the right is somebody who didn't
read the Aqua HI guidelines or fell

00:20:31.380 --> 00:20:34.060
asleep during this talk and didn't do so.

00:20:36.080 --> 00:20:37.720
So I want to talk about toolbar buttons,
too.

00:20:37.720 --> 00:20:39.960
If you put a J button
in a J toolbar in Aqua,

00:20:39.960 --> 00:20:43.060
you'll get the square
toolbar-style button,

00:20:43.060 --> 00:20:43.840
as you'd expect.

00:20:43.840 --> 00:20:46.530
Some people want toolbar-style
buttons without a J toolbar.

00:20:46.540 --> 00:20:49.560
And to do that,
it's another client property.

00:20:49.560 --> 00:20:54.960
You simply put client property and
set J button.button type to toolbar.

00:20:54.960 --> 00:20:58.440
And in my Aqua demo,
you might have noticed that I had

00:20:58.440 --> 00:21:00.650
a toolbar button just floating
around in a J panel there.

00:21:00.730 --> 00:21:02.030
And that's exactly what I did.

00:21:04.430 --> 00:21:05.260
So file dialogs.

00:21:05.410 --> 00:21:07.980
This is something that came
up in the lab a couple times.

00:21:08.000 --> 00:21:12.570
So a lot of people are inclined to use
JfileChooser because they're using Swing,

00:21:12.580 --> 00:21:14.570
and this is in the JavaX.Swing package.

00:21:14.600 --> 00:21:17.670
But we really suggest
using the AWT file dialog.

00:21:17.680 --> 00:21:20.750
And the reason for that is that
it's very simply a heavyweight.

00:21:20.900 --> 00:21:23.480
So it's going to use the OS file dialog.

00:21:23.480 --> 00:21:27.000
You're going to get the column
view in Jaguar or in Panther.

00:21:27.000 --> 00:21:29.040
I'm not sure what they're
calling it in Panther anymore,

00:21:29.040 --> 00:21:31.000
but there's a whole new
file dialog in Panther.

00:21:31.000 --> 00:21:33.660
And if you use the AWT file
dialog in your Java apps,

00:21:33.660 --> 00:21:36.750
when your Java app gets moved on
to a system with Panther on it,

00:21:36.810 --> 00:21:37.980
you will get that file dialog.

00:21:37.980 --> 00:21:41.250
You won't need to wait for
us to rewrite JfileChooser to

00:21:41.250 --> 00:21:44.120
look like the Panther dialog,
for example.

00:21:44.180 --> 00:21:48.130
And you do that with a
simple system property,

00:21:48.130 --> 00:21:51.460
Apple AWT use file dialog packages.

00:21:51.460 --> 00:21:53.690
By the way, I didn't mention this at
the beginning of the talk.

00:21:53.860 --> 00:21:56.820
If people are inclined to write
this stuff down furiously,

00:21:56.820 --> 00:21:59.940
you don't need to worry about
it because it is all on the web.

00:22:00.570 --> 00:22:02.070
And we'll be giving you a link later.

00:22:02.120 --> 00:22:04.690
So if you've been cursing
me for moving too fast,

00:22:05.200 --> 00:22:06.810
please don't worry about it.

00:22:06.920 --> 00:22:12.100
And basically this file dialog
packages lets you not navigate

00:22:12.590 --> 00:22:16.150
inside .app and .package files.

00:22:16.620 --> 00:22:19.660
Normally those are technically folders.

00:22:19.900 --> 00:22:24.380
So a dumb file dialog might try to go
into those and navigate the contents

00:22:24.380 --> 00:22:26.550
and resources and so on and so forth.

00:22:26.610 --> 00:22:29.350
So if you set this property,
you can actually select those as files,

00:22:29.440 --> 00:22:30.040
which might be something
that you want to do.

00:22:30.040 --> 00:22:32.680
that you want to do in your application.

00:22:35.040 --> 00:22:37.960
So now I want to talk about
our extended AWT APIs.

00:22:37.960 --> 00:22:40.300
This is the replacement
for the MRJ Toolkit.

00:22:40.440 --> 00:22:44.580
For those who might have been around
long enough to know those APIs,

00:22:44.580 --> 00:22:47.720
there's basically two real classes
that you need to know about.

00:22:47.960 --> 00:22:53.340
There's the Apple EAWT application,
which has two important methods.

00:22:53.340 --> 00:22:56.220
One of them is to set the
preferences menu to enabled,

00:22:56.220 --> 00:23:00.540
and that, like it sounds,
enables the preferences menu item.

00:23:00.540 --> 00:23:04.960
And there's another method
called AddApplicationListener.

00:23:05.020 --> 00:23:08.360
And what that does is this is your
hook into being able to handle all

00:23:08.360 --> 00:23:12.890
the items in the application menu,
things like the About application,

00:23:12.940 --> 00:23:15.200
the preferences, and the Quit menu item.

00:23:15.200 --> 00:23:19.000
And you would do that with
the ApplicationAdapter class.

00:23:19.120 --> 00:23:21.260
There's also an interface
called ApplicationListener.

00:23:21.260 --> 00:23:23.700
But, you know,
in the standard event model

00:23:24.160 --> 00:23:26.250
like they have in Java,
they have adapters for

00:23:26.370 --> 00:23:27.220
almost every listener.

00:23:27.220 --> 00:23:28.290
We've done the same thing.

00:23:28.300 --> 00:23:30.520
And we really suggest that
you extend the adapter class.

00:23:30.540 --> 00:23:33.770
just to make your code
a little more readable.

00:23:34.860 --> 00:23:37.570
So,
as far as handling system Apple events,

00:23:37.670 --> 00:23:42.000
there are some extra methods available
to you in the application listener,

00:23:42.000 --> 00:23:43.060
the application adapter.

00:23:43.060 --> 00:23:47.680
There's the open application event,
which basically once the UI is finished

00:23:47.790 --> 00:23:51.910
loading and the open application
Apple event's been received by the app,

00:23:52.010 --> 00:23:55.280
you can basically register a callback
if there's anything you want to do,

00:23:55.280 --> 00:23:59.960
like pull up a tip of the day or a
splash screen or anything like that.

00:24:00.450 --> 00:24:03.700
And new to the Java update that
was available as of Friday,

00:24:03.860 --> 00:24:05.710
there's a reopen application.

00:24:05.720 --> 00:24:08.940
And this is what happens
when you click on the dock,

00:24:08.940 --> 00:24:13.280
like if you have no windows open in
Safari and you focus Safari up to the

00:24:13.280 --> 00:24:16.800
front by clicking on its dock icon,
you'll notice that it

00:24:16.800 --> 00:24:19.460
brings up a blank window,
where BBEdit does the same thing

00:24:19.570 --> 00:24:21.090
and TextEdit does the same thing.

00:24:21.140 --> 00:24:22.950
And that's a reopen application event.

00:24:22.960 --> 00:24:26.070
So, you can receive that reopen
application event and decide to put

00:24:26.070 --> 00:24:27.910
up your own blank window if you want.

00:24:29.270 --> 00:24:33.180
There's also an open file handler,
which this is kind of cool.

00:24:33.180 --> 00:24:36.970
This is something that really isn't
doable too easily on other platforms.

00:24:36.980 --> 00:24:40.260
It'll let you register document
types for your application.

00:24:40.300 --> 00:24:43.800
If you have a document-based app and
you want to be able to double-click

00:24:43.920 --> 00:24:47.470
your documents or drag them over
the application icon and have the

00:24:47.470 --> 00:24:51.430
application launch and open in your app,
this is how you would do that.

00:24:51.520 --> 00:24:52.430
This is your hook-in to that.

00:24:52.440 --> 00:24:54.020
It's basically a hook-in
to launch services.

00:24:54.020 --> 00:24:56.280
And so there's two parts of it.

00:24:56.280 --> 00:24:59.120
You register the handle open file method.

00:24:59.120 --> 00:25:00.130
You implement that method.

00:25:00.170 --> 00:25:02.860
And then you have to go into
the Info.plist and register

00:25:02.860 --> 00:25:05.880
your CFBundle document types,
which is there's nothing

00:25:05.880 --> 00:25:07.190
Java-specific about that.

00:25:07.290 --> 00:25:09.500
That's just part of the
standard Mac OS X documentation.

00:25:09.500 --> 00:25:12.700
So if you go over to the
bundle services documentation,

00:25:12.710 --> 00:25:17.600
find out how to tell launch services
what kind of document you want to own,

00:25:17.600 --> 00:25:18.980
and then you're ready to go.

00:25:18.980 --> 00:25:20.820
And there's a print file handler.

00:25:20.820 --> 00:25:24.700
So if you're receiving Apple events from
another application or from the finder,

00:25:24.700 --> 00:25:28.590
you highlight it and say, print,
this is another hook-in for you

00:25:28.590 --> 00:25:31.570
to handle that event and maybe
print a file from the finder.

00:25:31.600 --> 00:25:36.580
One other call worth mentioning is
the get mouse location on screen.

00:25:36.580 --> 00:25:37.870
This is in the application class.

00:25:37.880 --> 00:25:39.820
And this basically lets you
get the coordinates of the

00:25:39.910 --> 00:25:40.990
mouse anywhere on screen.

00:25:41.000 --> 00:25:42.900
Why is that so special?

00:25:42.900 --> 00:25:46.640
Well, you could use a listener on your
window or on your components or

00:25:46.720 --> 00:25:49.540
anything like that to get the location,
but that's only going to work while

00:25:49.540 --> 00:25:52.190
the mouse is above that component,
while it's in the real estate

00:25:52.190 --> 00:25:53.420
that that component occupies.

00:25:53.530 --> 00:25:55.680
So this method will let you
do it anywhere on the screen,

00:25:56.060 --> 00:25:57.520
if it's not in Java real estate.

00:25:57.610 --> 00:26:00.590
And some application developers,
especially in the education space,

00:26:00.600 --> 00:26:01.850
tend to want to do that kind of thing.

00:26:04.380 --> 00:26:07.520
So one other thing worth mentioning
is the Cocoa component class.

00:26:07.540 --> 00:26:10.640
This is something that I think
Scott mentioned in the State of

00:26:10.690 --> 00:26:12.410
the Union the other day.

00:26:12.420 --> 00:26:16.220
It basically allows you
to embed any custom NSVU,

00:26:16.220 --> 00:26:19.250
any Cocoa component inside
your Java application.

00:26:19.300 --> 00:26:22.730
So it'll allow you to do things,
you know, some simple native drawing.

00:26:22.740 --> 00:26:27.680
We also have a sample code
for the QD Cocoa component

00:26:27.680 --> 00:26:31.440
on our developer website,
and that's actually what Scott demoed

00:26:31.440 --> 00:26:35.870
to you on Monday using the iSight and
the Sequence Grabber from QuickTime.

00:26:35.880 --> 00:26:41.170
And since it's part of our pure Java API,
it's also available to

00:26:41.170 --> 00:26:42.390
applets and Java Web Start.

00:26:42.400 --> 00:26:45.750
And to find out more about this,
you can go to our

00:26:45.750 --> 00:26:49.970
Java Native Integration talk,
session 620, which is on Friday,

00:26:49.970 --> 00:26:50.590
I believe.

00:26:54.290 --> 00:26:55.120
Thursday, okay.

00:26:55.120 --> 00:26:58.710
And one last class, the extended I.O.

00:26:58.770 --> 00:27:00.640
class, the file manager.

00:27:00.640 --> 00:27:04.980
Now, this is something that if you're new
to the platform or if you're 10 only,

00:27:04.980 --> 00:27:06.340
it's probably not very
interesting to you.

00:27:06.340 --> 00:27:10.080
This is basically our preservation
of Mac OS 9 functionality

00:27:10.080 --> 00:27:11.120
for people who needed it.

00:27:11.540 --> 00:27:17.340
The find folder method for things
like the preferences folder constant

00:27:17.340 --> 00:27:21.420
defined in the Mac events headers
and the applications folder,

00:27:21.420 --> 00:27:26.300
for example, to set and get file creator
and file type stuff,

00:27:26.410 --> 00:27:27.300
old resource stuff.

00:27:27.340 --> 00:27:29.600
That's stuff that you don't
need to do on Mac OS X.

00:27:29.600 --> 00:27:32.310
If you have legacy stuff from
Mac OS 9 that you're trying to bring

00:27:32.310 --> 00:27:35.050
over and you're still dependent
on certain things like that,

00:27:35.060 --> 00:27:36.240
this is the class you want to use.

00:27:36.280 --> 00:27:40.550
And it also gives you a method for
opening URLs with the default browser.

00:27:40.710 --> 00:27:43.400
But again,
that's something that you might not

00:27:43.400 --> 00:27:46.820
really need to do because on Mac OS X,
you can simply pass open

00:27:46.820 --> 00:27:49.800
and a URL to the terminal,
and that will talk to launch services

00:27:49.800 --> 00:27:51.180
and launch whatever browser you want.

00:27:51.300 --> 00:27:53.160
And to get to that from Java,
you just pass the file,

00:27:53.290 --> 00:27:57.490
in those two strings to runtime exec,
and you're done.

00:27:59.020 --> 00:28:03.100
So now I want to do a little demo to
you about-- just basically show you

00:28:03.150 --> 00:28:09.920
about use of the application menu and
the application adapter and listeners.

00:28:10.040 --> 00:28:11.680
So this is my little text editor.

00:28:11.680 --> 00:28:17.140
I'm afraid it's not too feature rich,
but it gets the job done.

00:28:17.200 --> 00:28:21.740
By creating a document here,
simple text editor,

00:28:22.000 --> 00:28:24.400
Hello, WWDC.

00:28:24.400 --> 00:28:28.280
And you can see I don't
have spell checking in here.

00:28:28.400 --> 00:28:31.040
So I can save this and
write it out to the desktop.

00:28:31.150 --> 00:28:33.640
Here's my AWT file dialog.

00:28:33.640 --> 00:28:36.650
It doesn't look like it's switched
over to native or anything like that,

00:28:36.650 --> 00:28:39.540
but it does look exactly
like a Mac OS X file dialog.

00:28:39.680 --> 00:28:44.290
So I'm going to save it on
the desktop as test file.

00:28:45.260 --> 00:28:46.650
And there it is on the desktop.

00:28:46.780 --> 00:28:51.350
So this is part of what I did with
the Info.plist and the handling

00:28:51.350 --> 00:28:53.080
of the Open File application.

00:28:53.160 --> 00:28:54.780
So I can quit out of
this application now,

00:28:54.780 --> 00:28:58.310
and I can just double-click the document,
and it'll launch up my Java app

00:28:58.440 --> 00:29:03.000
and open up the document,
as if it were written in Carbon or Cocoa.

00:29:03.080 --> 00:29:04.560
Very simple.

00:29:04.580 --> 00:29:08.660
And really, the way that I do this,
it's not particularly pleasant,

00:29:08.660 --> 00:29:10.150
unfortunately.

00:29:12.360 --> 00:29:18.320
There's a very simple but hard
to get used to document format.

00:29:23.200 --> 00:29:52.300
[Transcript missing]

00:29:52.520 --> 00:29:57.460
So as far as the reopen event,
so I'm going to go over to Safari here,

00:29:57.460 --> 00:29:59.940
and now my text editor
is not in the background.

00:29:59.940 --> 00:30:03.240
So I'm going to click on the dock,
and now the reopen event

00:30:03.340 --> 00:30:05.100
has been passed through.

00:30:05.100 --> 00:30:08.870
And you can see that a
new window came up for me.

00:30:08.880 --> 00:30:11.580
That was what I did by registering
for the reopen callback.

00:30:11.580 --> 00:30:12.800
I created a new window.

00:30:13.970 --> 00:30:16.000
And, you know,
I tied it up to the preferences.

00:30:16.000 --> 00:30:17.340
So this is what I did.

00:30:17.350 --> 00:30:20.090
I called set preferences
menu item enabled,

00:30:20.090 --> 00:30:24.180
and I did a handle preferences,
brought up my preferences dialog,

00:30:24.180 --> 00:30:27.180
and I've got the reopen
preference set here.

00:30:27.180 --> 00:30:30.400
So if I set that,
it shouldn't create a new window anymore.

00:30:30.400 --> 00:30:32.110
Functional preferences.

00:30:32.120 --> 00:30:34.670
And then there's the
about handler up here.

00:30:34.670 --> 00:30:36.680
Just create a simple about box.

00:30:36.700 --> 00:30:39.870
And last but not least, of course,
is the quit item.

00:30:39.880 --> 00:30:43.770
Now the quit menu item will, by default,
call system.exe.

00:30:43.850 --> 00:30:49.490
So it's in your best interest to
override the handle quit method in

00:30:49.490 --> 00:30:52.480
case you have things going on with

00:30:53.800 --> 00:31:26.500
[Transcript missing]

00:31:27.350 --> 00:31:29.910
So,
I just showed you a bunch of Apple APIs,

00:31:30.140 --> 00:31:33.140
Apple-specific APIs,
and some of you might be saying, oh,

00:31:33.140 --> 00:31:34.290
great, they're locking us in.

00:31:34.300 --> 00:31:35.530
Absolutely not.

00:31:35.750 --> 00:31:39.480
There's no reason for you to be
able to do this and not be locked

00:31:39.480 --> 00:31:41.850
and be locked into the platform.

00:31:41.850 --> 00:31:44.620
You don't need to worry about
client or runtime properties.

00:31:44.620 --> 00:31:46.570
You can set those,
and if another platform

00:31:46.820 --> 00:31:49.530
is not looking for them,
it's not looking for them.

00:31:49.530 --> 00:31:51.240
Nothing's going to happen.

00:31:52.060 --> 00:31:55.480
As far as use of the APIs, well,
very simple.

00:31:55.480 --> 00:32:00.110
The easiest thing to do would be just
to isolate all those handler methods

00:32:00.110 --> 00:32:05.180
in a separate class that you register
with a simple static method and,

00:32:05.210 --> 00:32:10.310
you know,
like a factory type of method that

00:32:10.410 --> 00:32:13.260
you simply call from reflection,
either in your main method

00:32:13.300 --> 00:32:15.030
or in the constructor,
your main class,

00:32:15.030 --> 00:32:16.750
wherever your initialization code is.

00:32:16.820 --> 00:32:20.480
Just use class for a name to bring it up,
and, you know, basically,

00:32:20.480 --> 00:32:23.700
if it's not there, then it won't load.

00:32:23.970 --> 00:32:27.220
But if you load the class statically,
what happens is, you know,

00:32:27.220 --> 00:32:31.520
Java will try to recognize the
application adapter that it's extended.

00:32:31.520 --> 00:32:34.300
You'll get a bunch of no class
def found errors on Windows,

00:32:34.300 --> 00:32:34.960
and you don't want that.

00:32:34.980 --> 00:32:37.260
So,
if you use reflection to load these up,

00:32:37.260 --> 00:32:40.230
things should be fine,
and we've got a sample that does this.

00:32:40.230 --> 00:32:43.870
It's called OS X Adapter,
and it's on our sample code website.

00:32:46.010 --> 00:32:47.870
So at this point,
I want to bring Ted up to

00:32:47.940 --> 00:32:50.860
talk about runtime properties
and deployment options,

00:32:50.960 --> 00:32:51.750
the other half of the talk.

00:32:51.760 --> 00:32:52.500
Ted?

00:32:52.500 --> 00:32:53.140
Great.

00:32:53.140 --> 00:32:54.100
Thanks, Matt.

00:32:54.100 --> 00:32:56.100
Good job.

00:32:56.100 --> 00:32:58.050
Good job.

00:32:59.500 --> 00:33:00.010
All right.

00:33:00.030 --> 00:33:04.680
So what I'm going to talk to you
about are just runtime properties

00:33:04.680 --> 00:33:08.280
that you can set on your application
without having to recompile.

00:33:08.280 --> 00:33:11.250
So say you've already deployed
on Windows or something

00:33:11.250 --> 00:33:12.880
like that or Solaris Linux.

00:33:12.930 --> 00:33:15.930
These are properties that
you can set that will give

00:33:16.130 --> 00:33:19.230
you Aqua-type functionality,
but you don't have to

00:33:19.290 --> 00:33:21.290
rebuild and stuff like that.

00:33:21.290 --> 00:33:25.910
These, of course,
will go into the Java properties key

00:33:25.970 --> 00:33:29.480
in the Info.plist or the Java 141.x.

00:33:29.500 --> 00:33:33.520
So you can set up your own
plugin settings application.

00:33:33.520 --> 00:33:37.180
Now, you can also pass these
in on the command line,

00:33:37.180 --> 00:33:38.850
something like that.

00:33:38.850 --> 00:33:43.200
So if you're doing something
like J2EE stuff or something,

00:33:43.380 --> 00:33:44.620
you can pass it in.

00:33:44.620 --> 00:33:45.380
But I'm going to go ahead
and show you how to do that.

00:33:45.760 --> 00:33:48.380
For the most part,
we prefer application bundles and

00:33:48.380 --> 00:33:49.980
stuff like that versus a shell script.

00:33:50.000 --> 00:33:53.040
So one of these is the
Aqua look and feel,

00:33:53.040 --> 00:33:54.300
the screen menu bar.

00:33:54.300 --> 00:33:59.920
All you have to do is set the
Aqua LAF use screen menu bar to true,

00:33:59.920 --> 00:34:02.660
and it'll actually move
the screen menu bar,

00:34:02.660 --> 00:34:04.620
or the menu bar, up to the screen level.

00:34:04.620 --> 00:34:07.280
Normally in, say,
like a swing application,

00:34:07.300 --> 00:34:11.030
it's actually in the frame itself.

00:34:11.890 --> 00:34:17.360
And with this, you can actually get what
you'd expect on a Macintosh.

00:34:19.010 --> 00:34:20.340
The resize control.

00:34:20.340 --> 00:34:24.210
Down here in the bottom left-hand corner,
you can see I have this little

00:34:24.210 --> 00:34:27.830
textured surface saying,
you know, you can drag this to resize it.

00:34:27.940 --> 00:34:30.650
You can add that on, again,
with the property by just setting

00:34:30.650 --> 00:34:34.320
that true and without having
to recompile your application.

00:34:34.440 --> 00:34:38.290
And, of course, if you want the brushed
metal look and feel,

00:34:39.700 --> 00:34:56.200
[Transcript missing]

00:34:57.000 --> 00:36:39.300
[Transcript missing]

00:36:40.830 --> 00:36:44.850
And if you didn't get this copied down,
come up afterwards and we can

00:36:44.850 --> 00:36:46.290
actually just give you that.

00:36:46.340 --> 00:36:48.420
So full screen mode.

00:36:48.480 --> 00:36:53.820
You know, it's a new feature in 1.4.1,
and we actually have a few properties

00:36:53.820 --> 00:36:58.060
that you can use when developing
your application and also when

00:36:58.060 --> 00:36:59.870
you're deploying your application.

00:36:59.880 --> 00:37:05.870
The top two, the fake full screen,
or the top one,

00:37:05.880 --> 00:37:10.180
what that does is it will give you a
window that's the size of your screen,

00:37:10.510 --> 00:37:13.030
but it doesn't actually, you know,
grab the whole screen.

00:37:13.040 --> 00:37:16.590
That's useful in debugging to, you know,
if you want to switch to your

00:37:16.590 --> 00:37:17.730
debugger and stuff like that.

00:37:17.840 --> 00:37:20.980
It's not,
you're not grabbing the whole screen.

00:37:20.980 --> 00:37:25.070
The second one,
the Apple AWT full screen fade.

00:37:25.080 --> 00:37:29.200
When we go to a full screen mode,
if you're changing resolution,

00:37:29.230 --> 00:37:32.070
we actually do a really nice
fade to it and stuff like that.

00:37:32.120 --> 00:37:36.570
If you're not changing the resolution,
we just go straight to full screen mode.

00:37:36.600 --> 00:37:41.140
But if you want that nice fade,
set this property to true and

00:37:41.140 --> 00:37:44.310
we'll do the nice fade for you.

00:37:44.860 --> 00:37:49.460
Another one, the third one,
the full-screen capture all displays,

00:37:49.470 --> 00:37:52.160
what that does is,
and that one's true by default,

00:37:52.160 --> 00:37:54.960
is when you go into full-screen mode,
if you have multiple monitors,

00:37:54.960 --> 00:37:56.900
we also black out those monitors.

00:37:56.920 --> 00:37:59.900
If, say,
like you wanted to have full-screen

00:37:59.900 --> 00:38:03.740
on one monitor and then have like
a borderless window on another

00:38:03.740 --> 00:38:07.270
monitor to make it look like you
have two full-screen windows,

00:38:07.270 --> 00:38:09.140
you'd want to set that to false.

00:38:09.140 --> 00:38:10.290
I didn't know that.

00:38:11.080 --> 00:38:14.620
And then, of course,
if you're going for a full kiosk

00:38:14.650 --> 00:38:17.720
mode type application and you don't
want the cursor up there at all,

00:38:17.720 --> 00:38:20.840
the last property,
you can set that to false,

00:38:20.840 --> 00:38:22.910
and that'll take care of that for you.

00:38:22.940 --> 00:38:25.580
Again, these are all documented
up on our website,

00:38:25.580 --> 00:38:27.510
so you don't have to write
them down if you don't want to.

00:38:31.200 --> 00:38:32.260
So window positioning.

00:38:32.260 --> 00:38:41.160
We have a couple of properties that we
have set for the Aqua to make things work

00:38:41.250 --> 00:38:44.600
as people would expect on the Mac OS X,
but at times they cause

00:38:44.680 --> 00:38:48.180
problems with developers when
they're writing their software,

00:38:48.180 --> 00:38:53.310
and so we add these properties so that
you can actually change how it works.

00:38:53.420 --> 00:38:58.920
So the force-safe creation,
if that was true,

00:38:59.500 --> 00:39:02.280
what it would do is if you were
to create the window off-screen,

00:39:07.490 --> 00:39:10.570
You can actually set that to true,
and it would force it

00:39:10.570 --> 00:39:12.260
to be on the screen.

00:39:14.390 --> 00:39:16.760
And then the second one,
for safe programming position,

00:39:16.760 --> 00:39:18.120
that one is true.

00:39:18.120 --> 00:39:21.580
And what that does is tries to
prevent you from accidentally

00:39:21.580 --> 00:39:23.200
pushing it off the screen,
the window.

00:39:23.200 --> 00:39:28.010
Now, some people actually like to create
windows off-screen and push windows

00:39:28.010 --> 00:39:31.020
off-screen so that they can do
rendering to it and then move it

00:39:31.020 --> 00:39:32.070
on-screen and stuff like that.

00:39:32.120 --> 00:39:36.000
If so,
you might want to set this to false.

00:39:37.280 --> 00:39:41.500
And then also, to keep the user from
moving things off-screen,

00:39:41.500 --> 00:39:43.270
we also have a property for that.

00:39:43.320 --> 00:39:46.400
If you want the user to be able
to move things off-screen and

00:39:46.400 --> 00:39:49.500
maybe not be able to get to them,
you can set that to true.

00:39:51.840 --> 00:39:55.960
So all those properties, again,
now you can set all those

00:39:55.960 --> 00:39:59.710
properties without affecting,
you know, recompiling your application.

00:39:59.740 --> 00:40:06.090
So if you bring your application over to
Mac OS X and you don't want to recompile,

00:40:06.090 --> 00:40:06.090
you

00:40:06.400 --> 00:40:30.700
[Transcript missing]

00:40:31.050 --> 00:40:37.100
We do have double-clickable jar support,
but unless you just have a single jar

00:40:37.100 --> 00:40:43.410
and you don't have any support files,
it'll definitely work,

00:40:43.530 --> 00:40:45.110
but it's just not the recommended way.

00:40:45.120 --> 00:40:46.700
The icon is not custom.

00:40:46.700 --> 00:40:49.890
It doesn't look like an
application and stuff like that.

00:40:49.960 --> 00:40:53.330
And of course, you have shell scripts,
but we really discourage that

00:40:53.390 --> 00:40:57.120
unless you're doing some enterprise
deployment or something like that.

00:40:57.220 --> 00:40:59.160
So I'm not really even
going to talk about it.

00:41:00.420 --> 00:41:02.530
Safari, of course, 1.0.

00:41:02.530 --> 00:41:05.500
You get full JDK 1.4.1 support.

00:41:07.120 --> 00:41:10.600
We have the Java plugin
available for Safari.

00:41:11.010 --> 00:41:14.670
And by default,
you get the Aqua look and feel for free,

00:41:14.670 --> 00:41:16.830
as in all applets.

00:41:21.410 --> 00:41:24.360
can be affected in the
Java plugin settings application.

00:41:24.360 --> 00:41:27.250
If you want to,
if you want to set a default

00:41:27.260 --> 00:41:30.140
property or something like that,
you can do that in this

00:41:30.140 --> 00:41:32.590
Java plugin settings application.

00:41:32.610 --> 00:41:35.800
It's actually in the application
utilities Java folder.

00:41:35.800 --> 00:41:41.470
And you can manage your certificates,
Java console, jar caching,

00:41:41.470 --> 00:41:43.240
all that in there.

00:41:43.240 --> 00:41:47.380
And actually, we have another session
tomorrow that you can go to.

00:41:47.380 --> 00:41:50.060
And Scott will go into
more detail about it.

00:41:51.720 --> 00:41:55.800
will show you the Java console and
all the cool debugging and stuff like

00:41:55.910 --> 00:41:58.860
that we now have for Safari and 141.

00:41:58.860 --> 00:42:02.380
So Java Web Start is...

00:42:04.310 --> 00:42:05.370
Well, I'll go ahead and explain it.

00:42:05.480 --> 00:42:07.140
It's for application deployment.

00:42:07.140 --> 00:42:10.910
It's a way that you can actually
deploy an application over the web,

00:42:10.910 --> 00:42:14.620
but what you just do is you
start with a link on a web page,

00:42:14.620 --> 00:42:18.300
your user clicks on that link,
and then the separate

00:42:18.300 --> 00:42:19.780
application launches.

00:42:19.780 --> 00:42:22.340
You can actually pull your
applications out of the browser,

00:42:22.350 --> 00:42:23.120
your applets.

00:42:23.120 --> 00:42:26.060
It's really kind of nice if
the browser is causing issues,

00:42:26.060 --> 00:42:28.970
you can just have a separate
deployable application.

00:42:29.880 --> 00:42:33.780
The other cool thing is that if the
user is disconnected from the web,

00:42:33.790 --> 00:42:36.100
if the application is set up properly,
he can still run,

00:42:36.100 --> 00:42:37.980
or they can still run the application.

00:42:37.980 --> 00:42:42.660
Your icon that you set in the JNLP file,
we actually will use that in the doc

00:42:42.850 --> 00:42:45.440
when you're running your application.

00:42:47.090 --> 00:42:51.600
And there is also a preference
application for the Java Web Start.

00:42:51.600 --> 00:42:54.560
It's also in the
Application Utilities Java folder.

00:42:54.560 --> 00:42:58.450
It's called the Java Web Start,
and that's what it is.

00:42:58.480 --> 00:43:02.120
And that has a Java console,
just like the applets does.

00:43:02.210 --> 00:43:05.180
You can manage your
certificates in there.

00:43:05.180 --> 00:43:08.330
And you can also configure,
when you launch a

00:43:08.330 --> 00:43:12.350
Java Web Start application
maybe two or three times,

00:43:12.350 --> 00:43:15.880
what we'll do is we'll actually
create one on the desktop for you.

00:43:16.200 --> 00:43:19.410
If that's something that you don't want,
you can actually disable

00:43:19.410 --> 00:43:21.220
that in this application.

00:43:21.220 --> 00:43:23.960
And then, you know,
everything will just work.

00:43:23.990 --> 00:43:28.300
You have to go back to this application
to run your Java Web Start applications

00:43:28.300 --> 00:43:30.100
or click on the link again.

00:43:31.680 --> 00:43:33.810
And again,
there's more information about this

00:43:33.870 --> 00:43:39.300
tomorrow in the 6.19 Java in the Web,
so definitely attend that if you want.

00:43:39.340 --> 00:43:44.760
So the next one that we're going to
talk about is the application bundle.

00:43:46.880 --> 00:43:50.040
Now, what this is,
is like Matt was saying,

00:43:50.040 --> 00:43:53.350
is application bundles on
Mac OS X are actually folders.

00:43:53.360 --> 00:43:59.380
And this is actually one of the folders
opened up so that I can kind of give you

00:43:59.380 --> 00:44:02.420
a tour of it in the Java perspective.

00:44:02.440 --> 00:44:07.580
So the first thing on the
list is the contents folder,

00:44:07.580 --> 00:44:10.030
and pretty much
everything goes into that,

00:44:10.060 --> 00:44:12.360
and that's just the root folder
within the application bundle.

00:44:13.630 --> 00:44:16.270
The top one, InfoPList,
I'm going to come back to that.

00:44:16.330 --> 00:44:20.160
That's actually the one that configures
everything and says where everything is,

00:44:20.160 --> 00:44:22.230
and I'll go into detail about that one.

00:44:22.240 --> 00:44:28.570
The next one down, the Java application,
which is in the Mac OS folder...

00:44:28.990 --> 00:44:33.600
What that is is actually a native
stub that we use to launch the JVM,

00:44:33.600 --> 00:44:36.290
read the properties in the
Info.plist and stuff like that,

00:44:36.360 --> 00:44:38.220
and get your application up and running.

00:44:38.220 --> 00:44:43.340
If you use JARbundler or Xcode,
we place that for you.

00:44:43.340 --> 00:44:46.560
We actually have documentation for where
you can get that if you want to create

00:44:46.570 --> 00:44:48.000
your own bundles or something like that.

00:44:49.630 --> 00:44:54.480
Next one, the package info,
that's your type and creator on Mac OS X.

00:44:54.480 --> 00:44:57.150
It's not Java-specific,
but it's something that you'll

00:44:57.210 --> 00:45:00.000
definitely want to look into.

00:45:01.620 --> 00:45:03.940
And then underneath that
is the resources directory.

00:45:03.940 --> 00:45:10.560
Now, if you've gone to any of the
localization talks for Mac OS X,

00:45:10.560 --> 00:45:13.000
you'll see that, you know,
if you have these folders

00:45:13.000 --> 00:45:16.440
in your resources directory,
what'll happen is when you

00:45:16.480 --> 00:45:19.290
launch your application,
we actually look at the

00:45:19.290 --> 00:45:23.260
international settings of your,
in your system preferences,

00:45:23.260 --> 00:45:28.000
and we kind of go down the list that
you have in your system preferences,

00:45:28.000 --> 00:45:31.720
and when we find a match with
one that you have in this folder,

00:45:31.720 --> 00:45:36.480
we'll actually invoke
the JVM with that locale,

00:45:36.480 --> 00:45:40.830
that font,
the keyboard all set up for you.

00:45:40.880 --> 00:45:45.530
And so you can actually set up your
application so that if you have the fonts

00:45:45.570 --> 00:45:49.510
and you have dialogues all set up for,
say, Japanese or French or

00:45:49.510 --> 00:45:53.000
something like that,
that on somebody's system where

00:45:53.000 --> 00:45:55.360
they want it to come up in French,
it'll just happen,

00:45:55.360 --> 00:45:57.750
it'll just work in a very Macintosh way.

00:45:59.600 --> 00:46:29.100
[Transcript missing]

00:46:29.470 --> 00:46:32.000
You just have a single application icon.

00:46:32.000 --> 00:46:35.360
You don't have a bunch of
different icons in a folder,

00:46:35.360 --> 00:46:38.580
and the end user doesn't have to figure
out which file to double-click on.

00:46:38.580 --> 00:46:42.780
Also, when they move things around,
they're just dragging a

00:46:42.780 --> 00:46:44.290
single application and stuff.

00:46:44.340 --> 00:46:49.380
And so what we encourage you to do is put
everything in that folder if you want,

00:46:49.380 --> 00:46:54.830
like, C utilities, preferences,
et cetera.

00:46:54.840 --> 00:46:57.180
And I'll be showing you that again.

00:46:57.180 --> 00:46:59.880
And then, of course,
there's the Java application icon.

00:46:59.880 --> 00:47:04.480
What that is is that's the icon for your
application when it's on the desktop.

00:47:04.480 --> 00:47:07.520
We have a default one that
we actually provide for you,

00:47:07.540 --> 00:47:09.850
and I'll be showing you that.

00:47:11.810 --> 00:47:14.080
So this is the info P list,
and this is the one I told

00:47:14.080 --> 00:47:15.100
you I'd be coming back to.

00:47:15.100 --> 00:47:20.880
So this is the one that actually controls
everything for... This is...I mean,

00:47:20.880 --> 00:47:25.180
it's also system-wide, where you can set,
like, your bundle name, your icon,

00:47:25.180 --> 00:47:26.130
and stuff like that.

00:47:26.200 --> 00:47:28.880
But inside of there,
there's actually a Java dictionary.

00:47:28.880 --> 00:47:34.210
And that Java dictionary is useful
for setting your class path,

00:47:34.280 --> 00:47:38.100
your main class, your properties,
arguments, the main stuff like that.

00:47:39.090 --> 00:47:43.150
Now, there's two, I guess,
shortcuts or macros that we use in there.

00:47:43.160 --> 00:47:47.460
The app package,
and that is a... when you use

00:47:47.460 --> 00:47:50.300
this within the info P list
within the Java dictionary,

00:47:50.300 --> 00:47:54.120
that is the path to the inside
folder of your application package.

00:47:54.120 --> 00:47:57.500
So if the person moves things
around on your hard drive,

00:47:57.550 --> 00:48:00.830
you always have a path to
it on their hard drive.

00:48:00.880 --> 00:48:03.160
So if they decide they don't want
this in the applications folder,

00:48:03.160 --> 00:48:05.540
they want it on their desktop
or something like that,

00:48:05.620 --> 00:48:08.920
it's not...you'll still be able
to find everything relative.

00:48:09.000 --> 00:48:12.830
Now, the Java root,
what that does is that actually

00:48:12.900 --> 00:48:16.960
points to the Java folder
inside the application bundle.

00:48:20.690 --> 00:48:23.770
And so a lot of times what you'll do
is you'll use this on your class path

00:48:23.900 --> 00:48:28.790
because you'll use Java root slash and
then your jars for your class path.

00:48:28.870 --> 00:48:31.680
And then that way it's always
pointing to the Java folder.

00:48:34.420 --> 00:48:41.010
So the working directory is
a key that typically the...

00:48:41.160 --> 00:48:43.810
When you double-click your application,
the user.dir property,

00:48:43.810 --> 00:48:47.360
your working directory,
is just inside the application package.

00:48:47.380 --> 00:48:52.470
Now, what you can do is set the working
directory to the Java root,

00:48:52.500 --> 00:48:55.400
and that will make it so
everything is in the Java folder,

00:48:55.400 --> 00:48:58.130
like I was telling you earlier,
and so you can put your support

00:48:58.190 --> 00:48:59.450
files and stuff like that.

00:48:59.500 --> 00:49:02.600
I'll actually be showing
you that in my demo,

00:49:02.600 --> 00:49:08.070
but I pretty much always set that,
but we leave you the option so

00:49:08.660 --> 00:49:11.340
that if you didn't want to set
that as your working directory,

00:49:11.340 --> 00:49:13.760
you can set it to something else.

00:49:13.760 --> 00:49:16.660
Now, the JVM version is the next one.

00:49:17.250 --> 00:49:19.490
This key is,

00:49:19.800 --> 00:49:30.700
[Transcript missing]

00:49:31.610 --> 00:49:36.820
And I have a list up here that kind
of shows how things would work.

00:49:36.870 --> 00:49:41.590
So if you only specify 1.4.1,
then you would only run on 1.4.1.

00:49:41.640 --> 00:49:45.830
If you 1.3.1, same thing, only 1.3.1.

00:49:45.860 --> 00:49:50.220
If, say, you wanted to run in
all variations of 1.4,

00:49:50.220 --> 00:49:52.740
you can use the 1.4 star.

00:49:52.740 --> 00:50:01.340
And if you want to run on 1.4, 1.5, 1.6,
on and on, you could use the 1.4 plus.

00:50:01.340 --> 00:50:06.670
Now, this is something that you're going
to have to think about because...

00:50:07.100 --> 00:50:26.400
[Transcript missing]

00:50:26.910 --> 00:50:31.070
is because, say,
you have the 131 value in there,

00:50:31.190 --> 00:50:32.970
and 132 comes out.

00:50:33.040 --> 00:50:36.660
131 will no longer be
available on your system.

00:50:36.680 --> 00:50:42.590
And if you lock yourself into 131 or,
say, 141, then when an updated

00:50:42.760 --> 00:50:47.070
version of Java comes out,
your application will no longer run.

00:50:47.080 --> 00:50:49.680
So that's why I have
those Xs on there saying,

00:50:49.680 --> 00:50:52.040
probably don't want these.

00:50:54.520 --> 00:50:57.120
So localization,
I talked a little bit about this when

00:50:57.120 --> 00:50:58.800
I was describing the application bundle.

00:50:58.800 --> 00:51:02.620
In the international panel
of your system preferences,

00:51:02.620 --> 00:51:07.400
you can set your preferred locale
and the hierarchy and stuff.

00:51:07.420 --> 00:51:11.990
And then I showed you the
LPROJ folders and the resources.

00:51:12.020 --> 00:51:16.420
Now, you don't have to actually
have anything in those folders.

00:51:16.420 --> 00:51:20.280
All you have to do is create the folders,
and then we just assume that your

00:51:20.280 --> 00:51:23.480
application is capable of handling those.

00:51:24.420 --> 00:51:29.300
Double-clickable jars just
get the default locale,

00:51:29.300 --> 00:51:32.220
so the top one that they have selected
in their international preferences.

00:51:32.220 --> 00:51:37.360
If, say, they have Japanese selected,
then a double-clickable jar will

00:51:37.360 --> 00:51:43.890
automatically be invoked in the
Japanese with the Japanese fonts

00:51:43.900 --> 00:51:45.460
and the keyboard and all that.

00:51:48.870 --> 00:51:53.440
Now, the Info.plist,
we used to have a property that we

00:51:53.440 --> 00:51:57.650
would set for your application name
in the upper left-hand corner of the

00:51:57.650 --> 00:52:00.320
application window or the menu bar.

00:52:00.320 --> 00:52:05.710
But we're actually recommending
now that you just use the standard

00:52:05.710 --> 00:52:09.010
Info.plist bundles CFBundle name.

00:52:09.040 --> 00:52:12.500
And if that value is set,
we'll actually grab that value.

00:52:12.500 --> 00:52:16.430
The cool thing about using the
CFBundle name is it's localizable.

00:52:16.460 --> 00:52:21.550
So you can have your English name
of your application up in the

00:52:21.550 --> 00:52:26.560
menu bar on an English system,
and then you can have the French or

00:52:26.560 --> 00:52:28.610
German one on the other systems.

00:52:28.640 --> 00:52:31.950
And so it all just looks
like what they expect it to.

00:52:31.960 --> 00:52:34.620
Also,
if you use the localized CFBundle names,

00:52:34.620 --> 00:52:39.320
their names will actually change on
the desktop to reflect the same thing.

00:52:39.320 --> 00:52:42.620
So the name in the menu bar
matches what's on the desktop.

00:52:46.210 --> 00:52:50.520
So Xcode,
they haven't been focusing on Java,

00:52:50.520 --> 00:52:53.060
but they will for the
future builds at Xcode.

00:52:53.060 --> 00:52:59.620
But it still works great for developing
and deploying applications for Mac OS X.

00:52:59.620 --> 00:53:00.610
I use it a lot.

00:53:00.640 --> 00:53:06.100
And it's got GDB and
JDB integrated into it,

00:53:06.100 --> 00:53:07.880
or a variation of the JDB.

00:53:07.880 --> 00:53:12.560
And so you can develop native code
and Java code in the same application.

00:53:13.110 --> 00:53:17.010
We actually have quite a few samples on
our developer website that show that.

00:53:17.060 --> 00:53:23.320
If, say, you want to debug Java and
native code at the same time,

00:53:23.340 --> 00:53:26.780
what people typically do
is they'll use the JDB,

00:53:26.780 --> 00:53:32.690
the Java debugger, in Xcode,
and then GDB from the command line.

00:53:32.740 --> 00:53:36.180
And so that you can attach the processes,
and you can actually be stepping

00:53:36.180 --> 00:53:38.170
through your native code,
and then when you code

00:53:38.170 --> 00:53:41.140
across the JNI bridge,
step through the Java code also.

00:53:43.250 --> 00:53:48.520
Of course, Xcode has the graphical
interface for GDB and JDB,

00:53:48.520 --> 00:53:50.490
so that's really nice.

00:53:50.500 --> 00:53:52.620
I mean,
I have used the command line version,

00:53:52.620 --> 00:53:55.460
but this is much easier than
trying to remember things.

00:53:55.460 --> 00:53:59.880
If you have jars that you want
to include in your application,

00:53:59.920 --> 00:54:02.220
you can either have them
included in the application

00:54:02.220 --> 00:54:06.280
bundle within that Java folder,
or you can actually have it merge

00:54:06.340 --> 00:54:09.850
the jars in so you can have just one
giant jar in your application folder.

00:54:11.340 --> 00:54:14.290
And of course, Xcode is available for
deploying applications,

00:54:14.310 --> 00:54:15.440
applets, jars.

00:54:15.440 --> 00:54:19.900
You can do pretty much anything with it.

00:54:19.960 --> 00:54:23.120
You can do Java Web Start,
but we don't actually have a

00:54:23.120 --> 00:54:25.440
template for doing Web Start stuff.

00:54:25.630 --> 00:54:28.340
But of course,
you can do any Java or native code.

00:54:30.290 --> 00:54:31.010
So, Jar Bundler.

00:54:31.020 --> 00:54:33.500
I don't have many lines on it,
but it's actually a great tool,

00:54:33.500 --> 00:54:35.070
and I'm going to give
you a demo about it.

00:54:35.160 --> 00:54:39.220
This is our application builder.

00:54:39.220 --> 00:54:41.290
This is the one that was
telling me about if you didn't

00:54:41.290 --> 00:54:45.020
want to recompile your stuff,
this is the application that you'd want

00:54:45.040 --> 00:54:47.140
to use to package up your application.

00:54:47.140 --> 00:54:52.000
One of the things that we have done is
if there's a developer that we're very

00:54:52.000 --> 00:54:54.810
interested in bringing to our platform,
if their application is

00:54:54.910 --> 00:54:59.240
written in pure Java,
we'll invite them over for a meeting,

00:54:59.920 --> 00:55:02.630
and we'll download their
Windows application or their

00:55:02.630 --> 00:55:06.560
Linux version of their application,
copy all the jars over to Mac OS X,

00:55:06.560 --> 00:55:10.640
use Jar Bundler to package it up,
and then when we're meeting with

00:55:10.640 --> 00:55:13.220
them to discuss them bringing
their application to Mac OS X,

00:55:13.220 --> 00:55:14.950
we actually show them
to them running on it.

00:55:14.960 --> 00:55:19.010
It's quite influential when you do that.

00:55:19.080 --> 00:55:21.760
So, like I said,
it's a quick port solution.

00:55:21.760 --> 00:55:26.660
So, let's go over to the demo machine,
and I'll actually show

00:55:26.700 --> 00:55:28.890
you a version of that.

00:55:29.640 --> 00:55:31.180
So, this is Robocode.

00:55:31.180 --> 00:55:32.250
I downloaded it off the web.

00:55:32.260 --> 00:55:35.840
It's actually a pretty cool
application that after WWDC,

00:55:35.840 --> 00:55:40.300
I'm going to actually learn to
use and write some tanks for.

00:55:40.300 --> 00:55:43.930
But as you can see,
this folder is how on most

00:55:44.200 --> 00:55:47.360
platforms applications are deployed.

00:55:47.360 --> 00:55:51.620
And for some people,
it's not exactly clear that

00:55:51.630 --> 00:55:57.590
if you double-click this jar,
this is how you launch the application.

00:55:59.360 --> 00:56:01.530
So, as you see, it is coming up.

00:56:01.600 --> 00:56:06.040
We picked the name of the main
class for the application name,

00:56:06.040 --> 00:56:08.660
but none of these
properties are set for Aqua.

00:56:08.660 --> 00:56:11.530
You get the Aqua look and feel,
but you don't get the screen menu

00:56:11.530 --> 00:56:13.040
bar and stuff like that with the jar.

00:56:13.040 --> 00:56:20.030
So, let me actually show you how we can
package this up and make an application

00:56:20.120 --> 00:56:23.350
that somebody would expect on Mac OS X.

00:56:23.360 --> 00:56:26.470
And then we can also add the
properties and stuff like that

00:56:26.580 --> 00:56:29.100
to move the screen menu bar.

00:56:29.100 --> 00:56:33.220
And do, well, I'll show you all that.

00:56:33.260 --> 00:56:35.360
So, this is JAR Bundler.

00:56:35.360 --> 00:56:38.410
This is in the developer
tools for the 1.4.1 update.

00:56:38.420 --> 00:56:39.730
Okay.

00:56:40.150 --> 00:56:47.770
and what you can do is say, all right,
we know that the main class is in the...

00:56:49.280 --> 00:56:51.740
is in the Robocode jar,
so let's just go ahead

00:56:51.740 --> 00:56:52.580
and select that jar.

00:56:52.580 --> 00:56:55.660
It actually picks the main class for me.

00:56:55.660 --> 00:56:59.260
I think it reads it out of the manifest,
and then if not,

00:56:59.280 --> 00:57:00.530
it'll actually search through there.

00:57:00.540 --> 00:57:02.690
And there's actually,
it searched through and

00:57:02.790 --> 00:57:05.390
found a couple other mains,
but we'll just go with the real one.

00:57:05.400 --> 00:57:08.360
If there's arguments to main
that you want to pass in,

00:57:08.360 --> 00:57:09.740
you can set these in here.

00:57:10.620 --> 00:57:12.540
We, of course,
we want the screen menu bar.

00:57:12.540 --> 00:57:15.400
Simple checkbox,
but what this is doing is it's

00:57:15.400 --> 00:57:19.180
actually setting that property for
you that I talked about earlier

00:57:19.290 --> 00:57:21.000
to use the screen menu bar.

00:57:21.000 --> 00:57:24.740
And then this is the JVM version.

00:57:24.740 --> 00:57:29.150
For this one,
I'm fully expecting it to work with 1.5,

00:57:29.240 --> 00:57:34.100
1.6, and beyond, so I'm going to leave
it with 1.4+. Again,

00:57:34.100 --> 00:57:40.600
if you want to restrict it to this 1.4.x,
you can use the 1.4.6.

00:57:40.620 --> 00:57:41.990
star.

00:57:43.030 --> 00:57:50.820
So this sets up the class path,
and as you can see, I have the Java root

00:57:50.820 --> 00:57:52.540
and the Robocode jar.

00:57:52.540 --> 00:57:55.450
That's how it will be
defined in the infop list.

00:57:55.540 --> 00:57:57.930
If there's properties
that you want to add,

00:57:57.930 --> 00:58:01.650
say like if you wanted to add, say,
the brushed metal or something like that,

00:58:01.720 --> 00:58:04.560
you can add it by using
this button right here.

00:58:04.560 --> 00:58:07.370
You just set the key
value and stuff like that.

00:58:07.600 --> 00:58:10.800
So the CFBundle name,
that's what I was talking to you about,

00:58:10.910 --> 00:58:14.100
is the localizable property
for the application name.

00:58:14.100 --> 00:58:16.080
We'll just call this Robocode.

00:58:16.080 --> 00:58:20.910
I'm going to set the working directory
to inside the application package,

00:58:20.910 --> 00:58:23.720
so it's actually inside the jar folder.

00:58:23.720 --> 00:58:26.620
And then if you want
to set the heap size,

00:58:26.670 --> 00:58:30.510
the maximum heap size,
these are all strings for the

00:58:30.530 --> 00:58:36.040
infop list that are Mac-specific
for your type and creator.

00:58:36.040 --> 00:58:38.140
And... And stuff.

00:58:38.160 --> 00:58:40.520
So, and as you saw,
I'm not using the about

00:58:40.520 --> 00:58:42.360
menu name property anymore.

00:58:42.360 --> 00:58:47.160
We're actually recommending people
use the bundle name instead.

00:58:47.160 --> 00:58:48.490
And...

00:58:48.940 --> 00:58:52.430
So let's go ahead and create
this application on a desktop.

00:58:52.450 --> 00:58:54.500
Robocode.

00:58:54.790 --> 00:58:57.850
Let's actually put it on the desktop.

00:58:58.070 --> 00:59:00.280
And this is going to
create a double-clickable

00:59:00.280 --> 00:59:01.640
application package for you.

00:59:01.660 --> 00:59:04.560
Now, this package is something
that you could just put on,

00:59:04.560 --> 00:59:08.130
say, a CD or something like that,
and they can just drag and stall

00:59:08.130 --> 00:59:09.820
to the applications folder.

00:59:09.820 --> 00:59:13.690
Everything, again,
is relative to the application package,

00:59:13.700 --> 00:59:15.590
so wherever they put it,
it doesn't matter.

00:59:15.600 --> 00:59:20.720
Now, what I'm going to do is copy
the rest of these files,

00:59:20.740 --> 00:59:23.890
the support files,
into the application bundle.

00:59:23.900 --> 00:59:26.980
And using the pop-up,
you select Show Package Contents,

00:59:27.990 --> 00:59:30.940
Contents, Resources, and Java.

00:59:30.940 --> 00:59:34.110
And let's just grab this all.

00:59:34.120 --> 00:59:37.980
I'll just replace that same jar
that I actually already copied over.

00:59:37.980 --> 00:59:43.160
So, now, if I had actually written
the Robocode application,

00:59:43.160 --> 00:59:46.860
I would probably know which of these
files I actually need and which I don't.

00:59:46.920 --> 00:59:49.990
But since I didn't write it,
I just threw everything in there.

00:59:50.000 --> 00:59:53.680
And it's not an issue.

00:59:53.680 --> 00:59:56.440
But if you're deploying
your application...

00:59:58.400 --> 01:00:17.300
[Transcript missing]

01:00:17.470 --> 01:00:21.810
I didn't set the, I didn't recompile it,
so I didn't add like a preferences

01:00:21.810 --> 01:00:22.840
menu or something like that.

01:00:22.920 --> 01:00:26.800
So let's go ahead and actually
just go ahead and run this thing.

01:00:26.800 --> 01:00:31.540
And you'll see why I want to
play around with this afterwards.

01:00:31.540 --> 01:00:38.120
And then I heard that there was a way,
no, let's go ahead and start the battle.

01:00:38.140 --> 01:00:41.110
This kind of reminds me
of the old Core War game,

01:00:41.120 --> 01:00:42.530
except it's much more graphical.

01:00:44.020 --> 01:00:47.340
Basically,
you write applications or little

01:00:47.340 --> 01:00:50.110
tanks that go around and shoot
each other and stuff like that.

01:00:50.140 --> 01:00:55.850
Now, I'm running on top of
the 102 developer update,

01:00:55.860 --> 01:01:03.160
and you can see that graphics performance
is getting much better on Mac OS X.

01:01:03.160 --> 01:01:06.340
So if you're having any problems
with graphics performance,

01:01:06.340 --> 01:01:08.540
I'd definitely recommend
downloading that update from

01:01:08.880 --> 01:01:11.990
connect.apple.com and trying it out.

01:01:13.900 --> 01:01:15.650
So that's the end of the demo.

01:01:15.710 --> 01:01:19.750
Let's go back to the slides.

01:01:21.510 --> 01:01:25.400
So where's this documentation that
we've been telling you about so that

01:01:25.400 --> 01:01:26.720
you don't have to write things down?

01:01:26.740 --> 01:01:32.200
If you go to our ADC home,
connect.apple.com,

01:01:32.200 --> 01:01:37.830
you can actually download
the documentation from there.

01:01:37.840 --> 01:01:42.040
You can also, if you go to
developer.apple.com slash java,

01:01:42.040 --> 01:01:45.840
I try and keep all the web page up
to date with the latest documentation

01:01:45.840 --> 01:01:48.320
that our text pub people put out.

01:01:49.340 --> 01:01:53.300
But if for some reason I fall behind,
click on the documentation link,

01:01:53.310 --> 01:01:55.580
and you'll have all their stuff,
including their history

01:01:55.760 --> 01:01:56.830
for the previous releases.

01:01:56.840 --> 01:02:03.800
There's a great FAQ that Matt maintains,
and this...

01:02:05.990 --> 01:02:08.750
will save a lot of people
time if they just read this.

01:02:08.750 --> 01:02:12.510
A lot of the questions that
are asked on the Java dev list,

01:02:12.510 --> 01:02:13.970
they've already been answered on there.

01:02:13.970 --> 01:02:18.990
I'd recommend looking at it before
really doing any development at all.

01:02:20.940 --> 01:02:24.720
Other resources,
Enterprise Java on Mac OS X.

01:02:24.720 --> 01:02:29.790
This is, of course,
on the developer.apple.com/java page,

01:02:29.960 --> 01:02:34.550
but there's also--that's a
direct link to where the file is.

01:02:34.770 --> 01:02:40.040
The ADC developer site,
developer.apple.com/java,

01:02:40.040 --> 01:02:44.470
that's the one I maintain,
try and keep up to date for you.

01:02:44.800 --> 01:02:49.340
And then just the
Java developer documentation.

01:02:49.940 --> 01:02:53.600
Just go to developerapple.com,
click on the documentation,

01:02:53.600 --> 01:02:55.540
and then there'll be a
link to the Java stuff.

01:02:58.690 --> 01:03:00.310
So what next?

01:03:00.340 --> 01:03:06.440
Later, we have the desktop and
server migration to Mac OS X,

01:03:06.440 --> 01:03:12.720
Java native integration on Mac OS X,
deploying on XServe,

01:03:12.770 --> 01:03:15.350
and the feedback forum.

01:03:15.360 --> 01:03:17.600
If you have issues, questions,
stuff like that,

01:03:17.650 --> 01:03:19.260
bring it to the feedback forum.

01:03:19.260 --> 01:03:23.280
We definitely want to hear all
your comments at that forum.

01:03:23.280 --> 01:03:24.510
All right.

01:03:24.820 --> 01:03:27.340
Who to contact if you
have more questions,

01:03:27.340 --> 01:03:28.010
stuff like that.

01:03:28.080 --> 01:03:32.760
If you have business questions
or you're running into issues,

01:03:32.760 --> 01:03:35.360
you know, you go ahead and send
something to Alan Samuel,

01:03:35.360 --> 01:03:35.960
Bob Fraser.

01:03:35.960 --> 01:03:37.340
They'll hook you up
with the right people,

01:03:37.340 --> 01:03:38.750
probably with Matt and I.

01:03:38.760 --> 01:03:44.230
We actually have the page
I've been repeating about,

01:03:44.320 --> 01:03:46.690
the developer.apple.com.java page.

01:03:46.700 --> 01:03:49.080
That's where, like,
if any new updates are posted

01:03:49.080 --> 01:03:51.020
or something like that,
we announce it on that page.

01:03:52.340 --> 01:03:56.910
And then this is an invaluable tool,
the developer mailing

01:03:56.910 --> 01:04:00.900
list at list.apple.com,
the Java dev mailing list.

01:04:00.920 --> 01:04:05.310
I keep an archive of every
single email on that list.

01:04:05.340 --> 01:04:08.260
And working in DTS,
it's actually kind of funny.

01:04:08.260 --> 01:04:12.200
We'll get a bunch of questions,
we'll get questions sent in that people

01:04:12.260 --> 01:04:13.680
have answered on that list before.

01:04:13.680 --> 01:04:16.870
And so rather than waiting
for us to answer the question,

01:04:16.880 --> 01:04:19.600
if people just searched the
archive or kept an archive,

01:04:19.980 --> 01:04:22.980
most of the questions are
actually answered on there.

01:04:23.000 --> 01:04:26.380
When that happens,
we just usually send the answer

01:04:26.380 --> 01:04:29.540
back to the people and don't charge.