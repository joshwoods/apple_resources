WEBVTT

00:00:12.970 --> 00:00:14.450
This is a fantastic turnout.

00:00:14.670 --> 00:00:18.560
I think this really shows how
much pent-up demand there is for

00:00:19.080 --> 00:00:21.000
networking that's easier to use.

00:00:21.210 --> 00:00:24.800
It's really exciting to
see so many people here.

00:00:26.140 --> 00:00:30.340
So, we've got a lot of material to
cover right now and I'm going to

00:00:30.340 --> 00:00:31.750
try to get through it quickly.

00:00:32.270 --> 00:00:36.580
I want to cover why we're doing this,
why we're here.

00:00:36.760 --> 00:00:38.950
Once I've identified the
problem we're trying to solve,

00:00:39.090 --> 00:00:41.940
I want to talk about what
we're going to do about it,

00:00:42.180 --> 00:00:45.980
and then I want to talk about how
we're going to achieve those goals.

00:00:46.150 --> 00:00:52.260
And if I manage to convince
you all how great this is,

00:00:52.260 --> 00:00:53.380
then you'll be interested in
the APIs at the end to tell

00:00:53.380 --> 00:00:53.380
you how to make use of this.

00:00:54.760 --> 00:00:57.980
So we'll start off with the why.

00:00:58.030 --> 00:01:01.810
Over the last couple of decades,
the world has seen a huge list of

00:01:01.930 --> 00:01:05.500
competing wide area networking protocols.

00:01:05.540 --> 00:01:09.240
And the good news is that all of
those have gone away and died.

00:01:09.450 --> 00:01:11.780
TCP/IP has won.

00:01:12.010 --> 00:01:14.770
The one that is kind of still
hanging on there is AppleTalk,

00:01:14.910 --> 00:01:17.440
and it's hanging on
because of ease of use.

00:01:17.440 --> 00:01:21.400
If you're a vendor that makes a printer,
a network printer,

00:01:21.500 --> 00:01:25.210
you still have to put an AppleTalk stack
in it because your Mac customers won't

00:01:25.210 --> 00:01:29.300
buy it unless they can just browse in
the chooser and find it and print on it.

00:01:29.480 --> 00:01:32.370
Now, we want to get rid of AppleTalk.

00:01:32.470 --> 00:01:34.450
We don't want to get rid of
AppleTalk because it's bad.

00:01:34.630 --> 00:01:38.750
It was a great protocol 15 years ago,
but we want to get rid of it because

00:01:38.850 --> 00:01:42.060
it's a big burden to Apple to have
to support two protocol stacks.

00:01:42.200 --> 00:01:46.060
It's a big burden to the printer vendors
to have to support two protocol stacks.

00:01:46.140 --> 00:01:49.590
If you're writing a network game,
it's a big burden to have

00:01:49.590 --> 00:01:51.200
to do AppleTalk and IP.

00:01:51.360 --> 00:01:52.820
IP is one.

00:01:52.890 --> 00:01:55.510
Let's do everything
with one protocol stack.

00:01:57.740 --> 00:02:00.130
So let's consider the local area.

00:02:00.230 --> 00:02:02.570
Similar kind of proliferation
of different kind of

00:02:02.610 --> 00:02:04.460
interfaces and connectors.

00:02:04.500 --> 00:02:08.250
And the good news is,
they're all gone as well.

00:02:10.080 --> 00:02:12.140
What do we have today?

00:02:12.230 --> 00:02:15.950
We have even more
different local connectors.

00:02:16.860 --> 00:02:19.700
20 years ago--I'm talking
about 20 years ago,

00:02:19.700 --> 00:02:23.200
before the Macintosh even
existed--you went to your computer

00:02:23.200 --> 00:02:27.430
store and you bought a dot matrix
printer and it had a parallel port.

00:02:27.550 --> 00:02:30.040
And every personal computer
had a parallel port.

00:02:30.080 --> 00:02:32.290
You take it home, you plug it in,
it works.

00:02:32.330 --> 00:02:35.590
You get this nice mono-spaced
80 column text out of it.

00:02:35.630 --> 00:02:37.770
I'm not commenting on the
quality of the printing,

00:02:37.950 --> 00:02:39.860
but there was only one way to plug it in.

00:02:39.980 --> 00:02:45.210
Now you get printers that connect by USB,
by firewire, by ethernet.

00:02:45.550 --> 00:02:49.720
A lot of high-end printers have the
little IRDA infrared window on them.

00:02:49.720 --> 00:02:52.310
You can print over wireless.

00:02:52.790 --> 00:02:56.780
What is the networking community
doing about this problem?

00:02:56.940 --> 00:02:59.160
We're adding more ways to print.

00:03:01.500 --> 00:03:04.290
Now, Bluetooth is a great technology.

00:03:04.320 --> 00:03:07.700
The hardware guys came
up with a very small,

00:03:07.700 --> 00:03:13.490
low-power chip that communicates
over short distances.

00:03:13.580 --> 00:03:16.880
It's low cost, it's low power,
it's small, it's great.

00:03:16.940 --> 00:03:22.030
But the problem then is that they
invented an entire scheme of addressing,

00:03:22.220 --> 00:03:25.380
naming, service discovery, browsing,
printing protocols,

00:03:25.550 --> 00:03:29.470
file exchange to go with that
cool new piece of hardware.

00:03:29.580 --> 00:03:32.710
So we have Bluetooth file exchange.

00:03:32.790 --> 00:03:35.160
We have FireWire file exchange.

00:03:35.390 --> 00:03:37.140
Most of you have probably
never even used it,

00:03:37.140 --> 00:03:37.980
but it exists.

00:03:38.040 --> 00:03:40.880
There's a tool for doing
file transfer over FireWire.

00:03:41.040 --> 00:03:44.220
You may remember the IR file exchange.

00:03:44.270 --> 00:03:47.870
A hundred years from now,
our grandchildren are going to be here at

00:03:47.870 --> 00:03:52.310
the developer conference being introduced
to the new hyperspace communication

00:03:52.310 --> 00:03:54.840
with its hyperspace file transfer tool.

00:03:54.930 --> 00:03:58.870
We need to stop reinventing
the world over and over again.

00:03:58.960 --> 00:04:01.410
You know the cliche about standing
on the shoulders of giants.

00:04:01.490 --> 00:04:06.910
Well, in the networking world,
it's sad to say that the networking

00:04:06.910 --> 00:04:11.280
world achieves what it does by
standing on the toes of giants.

00:04:12.010 --> 00:04:14.600
We need to stop reinventing the wheel.

00:04:14.690 --> 00:04:17.310
So what are we going to do about this?

00:04:18.210 --> 00:04:20.060
In the wide area, it's clear what we did.

00:04:20.090 --> 00:04:23.980
We picked a single protocol and
we used that for everything.

00:04:24.100 --> 00:04:26.240
Can we do the same thing for
local area communications?

00:04:26.240 --> 00:04:29.420
If we could pick just one,
that would be a big improvement.

00:04:29.550 --> 00:04:32.540
We'd have one protocol for
wide area and one for local.

00:04:32.590 --> 00:04:34.100
Big improvement.

00:04:34.200 --> 00:04:36.310
But maybe we can do better than that.

00:04:36.390 --> 00:04:39.200
Maybe we can pick one
protocol for everything.

00:04:39.200 --> 00:04:41.910
IP is clearly the one
protocol candidate here,

00:04:41.910 --> 00:04:45.020
so can we use that for local
communications as well?

00:04:45.100 --> 00:04:50.030
So I'm going to talk about how.

00:04:51.910 --> 00:04:53.140
before we get into the timetable.

00:04:53.140 --> 00:04:58.810
When I talk about using IP for local
communications in the same environment

00:04:58.810 --> 00:05:02.380
you currently use a USB cable today,
a lot of you are probably thinking,

00:05:02.380 --> 00:05:03.140
he's crazy.

00:05:03.140 --> 00:05:06.150
Nobody wants to be typing in
IP addresses and subnet masks

00:05:06.190 --> 00:05:09.630
and default gateways and all that
nonsense just to plug in a printer.

00:05:09.630 --> 00:05:12.600
And you're absolutely right,
nobody wants to do that.

00:05:12.840 --> 00:05:16.110
And it's because of that
perception of IP that easier

00:05:16.590 --> 00:05:19.040
alternatives keep being invented.

00:05:19.180 --> 00:05:24.340
But the question is,
can we make IP as easy to use as USB?

00:05:25.690 --> 00:05:30.020
Several people have been asking questions
about how Apple thinks it's going to

00:05:30.070 --> 00:05:32.440
impose this standard on the world.

00:05:32.440 --> 00:05:34.810
And it's not that way around at all.

00:05:35.190 --> 00:05:38.740
This started quite some time ago.

00:05:38.780 --> 00:05:41.540
In fact, I've been working on this
since before I came to Apple.

00:05:41.600 --> 00:05:44.980
And when Apple came to me and said,
"Why don't you come and work

00:05:45.080 --> 00:05:48.230
for us?" Their pitch was,
"Can you think of any company that is

00:05:48.590 --> 00:05:52.320
going to give you as much encouragement
for your ease of use ideas as Apple?"

00:05:52.320 --> 00:05:54.000
And that was pretty compelling.

00:05:54.180 --> 00:05:57.620
So that's why I came to
Apple to carry on this work.

00:05:57.970 --> 00:06:03.880
For me, the roots of this starts back in
1977 when I was still a PhD student,

00:06:03.880 --> 00:06:08.130
and we were discussing how hard
IP was to use on a Macintosh

00:06:08.210 --> 00:06:12.820
mailing list called NetThinkers,
and we came up with this proposal

00:06:13.200 --> 00:06:19.590
to just take AppleTalk name-binding
protocol and run it over IP,

00:06:19.590 --> 00:06:19.590
and I'll talk a little
bit more about that later.

00:06:20.260 --> 00:06:25.540
The next year in 1998 at an IETF meeting,
I was talking to a guy from

00:06:25.550 --> 00:06:29.870
Microsoft in a bar about how we
ought to make networking easier,

00:06:29.870 --> 00:06:32.440
and he had a proposal,
and I thought it was cool,

00:06:32.440 --> 00:06:33.510
and we agreed on it.

00:06:33.740 --> 00:06:38.520
And later that summer,
we shipped IPv4 link local addressing

00:06:38.520 --> 00:06:41.380
in Windows 98 and in MacÂ OS 8.5.

00:06:41.880 --> 00:06:45.290
Later that same year,
the discussions about browsing and

00:06:45.290 --> 00:06:50.180
MVP kind of evolved into multicast DNS,
which I will explain.

00:06:50.490 --> 00:07:13.370
And the IETF community realized
that maybe there was enough interest

00:07:13.370 --> 00:07:13.370
in this to form a working group.

00:07:13.370 --> 00:07:13.370
So we had a Birds of a
Feather session in March '99.

00:07:13.370 --> 00:07:13.370
We had a second BOF session in July,
and at the end of '99,

00:07:13.370 --> 00:07:13.370
the Zero Configuration
Working Group was officially formed.

00:07:13.370 --> 00:07:13.370
I don't actually remember volunteering
to be chairman of that working group,

00:07:13.370 --> 00:07:13.370
but somehow it happened, and so...

00:07:13.570 --> 00:07:17.500
Almost three years later,
Apple has now made a public

00:07:17.500 --> 00:07:21.480
commitment to this and announced
it under the name Rendezvous.

00:07:21.570 --> 00:07:23.790
Lots of people have been asking
what is the relationship.

00:07:23.900 --> 00:07:30.070
Rendezvous is Apple's name for ZeroConf,
just like Airport is

00:07:30.070 --> 00:07:30.070
Apple's name for 802.11.

00:07:32.530 --> 00:07:36.140
So the job of the working group,
before we even designed protocols,

00:07:36.280 --> 00:07:40.000
was to get the IETF community to
agree on what the problem was.

00:07:40.040 --> 00:07:43.540
And if you've ever tried to get a
thousand people to agree on something,

00:07:43.540 --> 00:07:46.240
you'll know that that
can be a slow process.

00:07:46.310 --> 00:07:49.920
But it's an important process because
one person standing up and saying,

00:07:49.920 --> 00:07:52.920
"I think this is the answer,"
doesn't necessarily mean very much.

00:07:52.950 --> 00:07:55.680
But if you can get people to agree
that that's the right answer,

00:07:55.790 --> 00:07:58.130
then the industry can make progress.

00:07:58.190 --> 00:08:01.040
And the working group agreed
on three requirements:

00:08:01.090 --> 00:08:03.000
addressing, naming, and browsing.

00:08:03.120 --> 00:08:07.180
And those are the three things I'm
going to talk about in more detail.

00:08:07.180 --> 00:08:11.420
We have a draft,
which is the IETF mechanism for producing

00:08:11.420 --> 00:08:13.760
documents that will become RFCs.

00:08:13.760 --> 00:08:16.800
That draft is on version 10,
which kind of gives you an idea

00:08:16.800 --> 00:08:18.440
of how contentious this has been.

00:08:20.320 --> 00:08:26.080
And that draft lays out the reasoning
behind these three requirements.

00:08:26.120 --> 00:08:28.970
Information about the Zero Configuration
Working Group can be found

00:08:29.070 --> 00:08:31.930
at the zeroconf.org website.

00:08:32.930 --> 00:08:36.460
So the first leg of ZeroConf is
linked local addressing.

00:08:36.550 --> 00:08:39.890
You can't do much IP networking
if you don't have an address.

00:08:39.940 --> 00:08:41.980
So that's the first problem.

00:08:42.060 --> 00:08:45.310
Now, everything I want to
talk about today is very,

00:08:45.310 --> 00:08:46.380
very simple.

00:08:46.450 --> 00:08:50.200
This is not fancy and complicated and
big PowerPoint slides with architecture

00:08:50.220 --> 00:08:54.060
diagrams with boxes and arrows to
impress my boss and get a pay rise.

00:08:54.150 --> 00:08:57.710
What we want to do is do the
simplest thing to get the

00:08:57.710 --> 00:09:00.110
job done and make a solution.

00:09:00.230 --> 00:09:04.340
And this is not so much for Apple's
benefit as it is for everybody else's.

00:09:04.430 --> 00:09:07.520
Because when you've got a gigahertz
processor and a gigabyte of RAM,

00:09:07.610 --> 00:09:09.850
most software problems are fairly easy.

00:09:09.950 --> 00:09:12.710
But if you're making
a $50 inkjet printer,

00:09:12.810 --> 00:09:15.570
you don't have that luxury of
inefficient bloated software.

00:09:15.890 --> 00:09:19.500
So there's no benefit to
Apple if this only works on Macs.

00:09:19.580 --> 00:09:23.220
We need this to be running in all the
little peripheral devices as well.

00:09:23.360 --> 00:09:26.850
So what's the simplest possible
solution we could think of?

00:09:27.250 --> 00:09:30.120
Taking our lead from AppleTalk,
which did this very well,

00:09:30.120 --> 00:09:33.070
pick a random address,
send an ARP request.

00:09:33.270 --> 00:09:36.160
If nobody answers,
I guess no one's using that address.

00:09:36.190 --> 00:09:37.800
You can have it.

00:09:37.950 --> 00:09:39.340
So that was simple.

00:09:39.460 --> 00:09:43.070
If you go home from this session today
thinking that wasn't very impressive,

00:09:43.250 --> 00:09:45.100
everything he said was really obvious.

00:09:45.240 --> 00:09:49.750
Then you got the point of the session,
right?

00:09:49.750 --> 00:09:49.750
This is supposed to be simple.

00:09:51.290 --> 00:09:54.010
So IANA,
the Internet Assigned Numbers Authority,

00:09:54.110 --> 00:09:58.460
has reserved a range of
65,000 IP addresses for this

00:09:58.560 --> 00:10:00.300
specific link local use.

00:10:00.370 --> 00:10:04.510
And that's the 169.254 address range.

00:10:04.730 --> 00:10:08.240
You may have seen this already because
this has been shipping for a while,

00:10:08.240 --> 00:10:11.430
and a lot of people have the
perception that when they see

00:10:11.610 --> 00:10:15.950
169.254 in the control panel,
that means networking is broken.

00:10:16.170 --> 00:10:21.230
And it's understandable why
you would think that because

00:10:21.650 --> 00:10:24.180
Link Local Addressing is like
one leg of a three-legged stool,

00:10:24.260 --> 00:10:27.610
and when you only see the one leg,
it doesn't look like a very good stool.

00:10:27.760 --> 00:10:31.160
So I'm here today to show
you the other two legs,

00:10:31.260 --> 00:10:34.070
and hopefully the whole
picture will make sense.

00:10:34.650 --> 00:10:37.850
I also want to say that IPv6
already has linked local addressing.

00:10:37.990 --> 00:10:43.160
This is not competing with IPv6,
but this is a pragmatic realization

00:10:43.160 --> 00:10:48.640
that many of the vendors making
hardware devices today putting IPv4

00:10:48.640 --> 00:10:51.040
in are not ready to move to IPv6.

00:10:51.040 --> 00:10:52.360
So this is an interim solution.

00:10:52.360 --> 00:10:56.020
We hope two years from now
we'll all be running IPv6.

00:10:56.020 --> 00:10:59.680
But in the meantime,
we have something that

00:10:59.680 --> 00:10:59.680
works for v4 as well.

00:11:01.070 --> 00:11:04.090
So the second layer
of ZeroConf is naming.

00:11:04.350 --> 00:11:06.980
There's not much point having
a random IP address if no

00:11:06.980 --> 00:11:08.310
one else knows what it is.

00:11:08.380 --> 00:11:11.980
I mean, sure, you can read it out to the
person next to you and they

00:11:11.980 --> 00:11:15.970
can type it in and that works,
but it's not the experience we want.

00:11:16.580 --> 00:11:20.530
The conventional Internet usage
model is you type in a host name.

00:11:20.610 --> 00:11:24.400
You type in the web browser,
you type FTP host name, Telnet host name,

00:11:24.400 --> 00:11:26.760
Ping host name,
and there's a system called

00:11:26.760 --> 00:11:29.650
DNS that looks up the address
that goes with that name.

00:11:29.800 --> 00:11:35.950
So keeping with the spirit
of not inventing anything

00:11:35.950 --> 00:11:35.950
new if we don't have to,

00:11:36.260 --> 00:11:40.140
Can we do something very,
very similar to DNS?

00:11:40.170 --> 00:11:49.430
And what we're proposing doing there is
just like with the addressing that we

00:11:49.430 --> 00:11:49.440
carved off a chunk of addresses that are
designated special use local addresses,

00:11:49.670 --> 00:11:52.290
We're talking about carving off
a subtree of the DNS namespace.

00:11:52.300 --> 00:11:58.390
So any name that ends in
local.arpa is a link local name,

00:11:58.690 --> 00:12:00.540
only relevant on the local link.

00:12:00.540 --> 00:12:03.400
You resolve it by sending
a query by multicast,

00:12:03.400 --> 00:12:08.680
not by sending a query to your
normal conventional DNS server.

00:12:08.680 --> 00:12:11.360
The packet format is
exactly the same as DNS.

00:12:11.360 --> 00:12:13.140
The records in the packet
are exactly the same.

00:12:13.140 --> 00:12:18.900
The only difference is you send it to
the link local DNS multicast address.

00:12:18.900 --> 00:12:22.530
And every machine on the network
runs a little responder just

00:12:22.630 --> 00:12:24.820
like the AppleTalk MVP responder.

00:12:24.820 --> 00:12:27.910
And when you see a request
that's asking for your name,

00:12:27.910 --> 00:12:29.210
you send an answer.

00:12:29.450 --> 00:12:33.050
Right now, we're using local.arpa
because the IETF kind of

00:12:33.050 --> 00:12:37.180
logically owns the arpa domain,
and we're more free to play

00:12:37.300 --> 00:12:39.420
underneath that subdomain.

00:12:39.460 --> 00:12:42.800
Ideally, we would like it to be
named ending in .local,

00:12:42.830 --> 00:12:45.290
and by the time this
standard is finished,

00:12:45.330 --> 00:12:47.080
we hope it will be .local.

00:12:47.180 --> 00:12:50.200
But for the Jaguar seed
you've got right now,

00:12:50.200 --> 00:12:51.790
it's local.arpa.

00:12:53.790 --> 00:12:57.190
There's a website specifically
about multicast DNS as well,

00:12:57.190 --> 00:13:01.180
and there's also an internet
draft describing how that works.

00:13:04.680 --> 00:13:08.070
So multicast DNS has a client
side and a responder side.

00:13:08.360 --> 00:13:11.960
The multicast DNS responder
is on your Jaguar preview CDs,

00:13:12.020 --> 00:13:16.240
and the client is also
on your Jaguar CDs.

00:13:16.260 --> 00:13:19.750
So if you type hostname.local.arpa
into your web browser,

00:13:19.820 --> 00:13:23.650
it will do a multicast and connect.

00:13:23.680 --> 00:13:25.910
I'm going to show you that right now.

00:13:31.660 --> 00:13:32.750
So here I've got a product.

00:13:32.820 --> 00:13:34.600
Many of you probably have
things like this at home.

00:13:34.600 --> 00:13:38.840
This is a Linksys firewall
home router thing.

00:13:38.940 --> 00:13:42.770
Very nice product,
four port Ethernet hub, no screen,

00:13:42.910 --> 00:13:43.760
no keyboard.

00:13:44.040 --> 00:13:45.060
How do you configure this thing?

00:13:45.260 --> 00:13:52.590
Well, 20 years ago,
devices like this would have

00:13:52.590 --> 00:13:52.590
a serial port and you'd plug
a VT100 terminal into them.

00:13:52.870 --> 00:13:55.380
In the 1990s,
the web browser kind of became

00:13:55.380 --> 00:13:57.700
the VT100 terminal of the '90s.

00:13:57.700 --> 00:14:00.640
It was the universal interface
you'd expect everybody to have,

00:14:00.850 --> 00:14:02.160
and that's great.

00:14:02.210 --> 00:14:04.480
But what do I type into my web browser?

00:14:04.480 --> 00:14:07.000
How do I know what IP address this has?

00:14:07.760 --> 00:14:10.690
The manual on page 38 tells
you the address it comes

00:14:10.770 --> 00:14:14.600
configured from the factory,
but somebody could change that,

00:14:14.600 --> 00:14:16.100
and how would you know?

00:14:16.150 --> 00:14:20.690
And maybe it uses DHCP, but if it does,
you don't know what address it got,

00:14:20.690 --> 00:14:23.260
and there's little hole you
can stick a pin in to reset it,

00:14:23.310 --> 00:14:25.300
but it's not quite clear what that does.

00:14:25.350 --> 00:14:27.520
It's a big hassle.

00:14:27.520 --> 00:14:29.610
So this is what we'd like.

00:14:34.900 --> 00:14:36.660
I want to emphasize something here today.

00:14:36.660 --> 00:14:39.620
The only aspect of the demo
here that's rigged are the

00:14:40.020 --> 00:14:41.820
products that Apple don't make.

00:14:41.860 --> 00:14:44.380
Everything that's running on
Jaguar is absolutely real.

00:14:44.660 --> 00:14:52.880
And if the hardware vendors in
this room want to put multicast

00:14:52.880 --> 00:14:53.450
responders in their products,
they will work just like

00:14:53.450 --> 00:14:53.450
this on real Jaguar systems.

00:14:58.790 --> 00:15:04.620
So I want to connect to my
Linksys router to configure it.

00:15:04.670 --> 00:15:06.980
I type Linksys.local.arpa.

00:15:07.370 --> 00:15:09.860
That tells my Mac to multicast it.

00:15:09.950 --> 00:15:11.070
I hit return.

00:15:11.090 --> 00:15:13.350
We're talking to the Linksys router.

00:15:22.360 --> 00:15:28.000
Okay, back to the slides, please.

00:15:28.140 --> 00:15:31.890
So you hardware guys can
do this today and ship it.

00:15:32.060 --> 00:15:36.660
The multicast DNS lookup
capability even exists in OS 9,

00:15:36.660 --> 00:15:39.540
so you can ship a product that
does this today and actually

00:15:39.560 --> 00:15:41.080
get some benefit from it.

00:15:46.310 --> 00:15:50.790
So what we've achieved here is we've
kind of reached parity with conventional

00:15:51.840 --> 00:15:55.690
Unix command line user interface,
which is to say,

00:15:55.810 --> 00:15:58.290
someone has to tell you what to type,
and you have to type it

00:15:58.290 --> 00:16:00.250
and not make any mistakes.

00:16:00.530 --> 00:16:05.070
And if you get it wrong, it doesn't work,
and you don't know why.

00:16:05.070 --> 00:16:05.070
So --

00:16:05.630 --> 00:16:09.300
It's a huge step forward than
having to guess random IP addresses,

00:16:09.450 --> 00:16:11.340
but we still want to do more.

00:16:11.540 --> 00:16:16.120
And the great thing was we managed to
convince the ITF Working Group to not

00:16:16.150 --> 00:16:20.030
just accept parity with the current
state of conventional IP networking,

00:16:20.040 --> 00:16:26.810
but to raise the bar and do
something that AppleTalk always did,

00:16:26.810 --> 00:16:26.810
and that's browsing the network.

00:16:27.090 --> 00:16:30.330
And the IETF Working Group has agreed
that that will be listed as one of the

00:16:30.330 --> 00:16:36.080
fundamental requirements to qualify
as Zero Configuration Networking.

00:16:36.170 --> 00:16:39.600
We are not the first people
to think this was a good idea.

00:16:40.600 --> 00:16:45.460
Over the last two decades,
history is littered with the corpses of

00:16:45.460 --> 00:16:48.280
failed attempts to do browsing over IP.

00:16:48.570 --> 00:16:57.110
It seems like every permutation
of the words "service discovery

00:16:57.110 --> 00:16:57.110
resource location" in every possible
order have all been used up.

00:16:58.900 --> 00:17:00.530
And the list goes on and on.

00:17:00.770 --> 00:17:06.590
And I apologize if somebody's
favorite protocol is listed

00:17:06.600 --> 00:17:09.350
here as not being a success.

00:17:09.720 --> 00:17:13.080
But as far as I'm concerned,
until I can go to the computer shop

00:17:13.440 --> 00:17:16.610
and buy a printer that does this stuff,
then it's not real.

00:17:16.780 --> 00:17:23.950
I also apologize if anybody's
favorite failure is not on this list,

00:17:23.950 --> 00:17:26.290
but we only have an hour, so I had to...

00:17:28.250 --> 00:17:31.420
So why did all these things fail?

00:17:31.480 --> 00:17:33.820
I think it was a couple of reasons.

00:17:33.900 --> 00:17:35.670
They couldn't keep things simple.

00:17:35.910 --> 00:17:38.330
Appletalk NBP is very, very simple.

00:17:38.450 --> 00:17:41.000
And it's classic second system syndrome.

00:17:41.000 --> 00:17:43.470
When you come to repeat something,
you keep throwing in all the

00:17:43.470 --> 00:17:45.340
features you wish you had first time.

00:17:45.430 --> 00:17:49.250
And they get so complicated that
the only way to make these things

00:17:49.250 --> 00:17:50.850
work is with exhaustive testing.

00:17:51.020 --> 00:17:56.870
But if you've got 450 companies,
that's the 100,000 testing matrix.

00:17:57.040 --> 00:17:59.640
You can't do all that
by exhaustive testing.

00:17:59.730 --> 00:18:02.400
You're going to have situations
where a customer buys a product

00:18:02.400 --> 00:18:05.140
from company A and company B,
and they need to work together,

00:18:05.140 --> 00:18:07.860
even though they've never
been tested together before.

00:18:07.930 --> 00:18:11.200
And the only way you get
that is through simplicity.

00:18:11.350 --> 00:18:15.090
The other reason I think they
failed is they made a couple

00:18:15.090 --> 00:18:17.680
of fundamental mistakes.

00:18:17.740 --> 00:18:19.320
They're very device-centric.

00:18:19.590 --> 00:18:22.210
Because if you make hardware,
you think in terms of

00:18:22.300 --> 00:18:24.800
things you can kick,
and you say,

00:18:25.340 --> 00:18:27.320
I want to find the
devices on the network.

00:18:27.500 --> 00:18:28.890
Okay, it's a device.

00:18:28.970 --> 00:18:32.020
Now I need to talk to it
and find out what it does.

00:18:32.060 --> 00:18:35.380
And then it becomes very complicated
because this might be a device

00:18:35.380 --> 00:18:38.290
you've never heard of before,
so now you need to invent this

00:18:38.380 --> 00:18:41.180
kind of description language
to describe what it does,

00:18:41.200 --> 00:18:43.790
and things get very
complicated very quickly.

00:18:44.550 --> 00:18:49.540
The important thing that AppleTalk did,
the real insight, is that people aren't

00:18:49.540 --> 00:18:51.730
interested in finding devices.

00:18:51.860 --> 00:18:53.820
They're interested in finding services.

00:18:53.880 --> 00:18:54.800
I want to print.

00:18:55.090 --> 00:18:57.300
Find me things that can print.

00:18:57.340 --> 00:19:01.670
I don't care what kind of thing they are,
whether it's an all-in-one or

00:19:01.780 --> 00:19:03.760
laser or inkjet or whatever.

00:19:03.800 --> 00:19:09.710
I've got a client that speaks
a particular printing protocol.

00:19:09.710 --> 00:19:09.710
Find me all the things
that I can talk to.

00:19:10.430 --> 00:19:13.000
The other mistake that these
protocols made is they failed to

00:19:13.000 --> 00:19:16.340
understand that browsing and use
are two different operations.

00:19:16.540 --> 00:19:18.840
When you look in the chooser
for a printer you're browsing,

00:19:18.990 --> 00:19:20.340
you find its name.

00:19:20.510 --> 00:19:22.540
You do that once, typically.

00:19:22.740 --> 00:19:25.340
Every day after that,
when you hit Command-P,

00:19:25.480 --> 00:19:27.630
you're taking that name
and looking up its address.

00:19:27.740 --> 00:19:29.100
And that's the second step.

00:19:29.220 --> 00:19:32.240
And when I get further on,
it will become evident why

00:19:32.240 --> 00:19:34.340
that's a significant difference.

00:19:34.500 --> 00:19:36.560
The sad thing is,
they could have learned this

00:19:36.560 --> 00:19:40.560
just by copying AppleTalk,
but a lot of people working

00:19:40.560 --> 00:19:42.800
in the IP community,
certainly back then,

00:19:42.960 --> 00:19:45.330
didn't think AppleTalk did anything
interesting and didn't think it

00:19:45.340 --> 00:19:46.560
was worth learning what it did.

00:19:46.660 --> 00:19:51.060
And I think that's why they missed
these fundamental requirements.

00:19:51.590 --> 00:19:53.460
So we want browsing.

00:19:53.480 --> 00:19:55.610
Now the question is,
the working group has already

00:19:55.610 --> 00:19:58.120
agreed that we need multicast DNS,
we need naming when

00:19:58.120 --> 00:20:01.360
there isn't a DNS server,
just like we need addressing

00:20:01.360 --> 00:20:04.010
when there isn't a DHCP server.

00:20:04.240 --> 00:20:07.600
None of this is opposed to DHCP or DNS.

00:20:07.600 --> 00:20:10.100
Those are both great protocols.

00:20:10.320 --> 00:20:13.930
The focus of zero conf is that
if you don't have a DHCP server,

00:20:14.100 --> 00:20:16.410
your computer should do
something more than throw up

00:20:16.410 --> 00:20:18.950
an error message saying help,
no DHCP server.

00:20:19.360 --> 00:20:23.910
Because, like this situation,
that Linksys is my DHCP server.

00:20:23.960 --> 00:20:28.530
If I can't talk to it to configure
it to turn on the DHCP server,

00:20:28.870 --> 00:20:30.340
then I don't have one.

00:20:30.340 --> 00:20:30.340
So, I

00:20:30.600 --> 00:20:32.010
So these are complementary.

00:20:32.010 --> 00:20:34.080
They're not trying to change existing IP.

00:20:34.140 --> 00:20:38.440
They're trying to fill a big gap
where existing IP does nothing.

00:20:38.540 --> 00:20:40.220
So we have multicast DNS.

00:20:40.300 --> 00:20:42.810
That code is going to be in the device.

00:20:42.890 --> 00:20:46.940
Rather than write a whole
bunch of different code,

00:20:47.260 --> 00:20:49.690
maybe we could reuse that code.

00:20:49.870 --> 00:20:53.240
I talked earlier about NBP over IP.

00:20:53.300 --> 00:20:56.160
And in the discussions at the IETF,
somebody came up with a

00:20:56.160 --> 00:20:58.900
very good idea and said,
"You know, trying to put AppleTalk on

00:20:58.900 --> 00:21:00.400
IP is like mixing oil and water.

00:21:00.400 --> 00:21:01.390
It'll never go.

00:21:01.490 --> 00:21:02.450
The IETF will hate it.

00:21:02.570 --> 00:21:05.060
They'll say it's an alien
protocol." But maybe,

00:21:05.130 --> 00:21:08.730
just maybe,
the DNS protocol is semantically

00:21:08.730 --> 00:21:13.430
rich enough to carry the exact same
information that you would have put

00:21:13.430 --> 00:21:15.500
in an NBP packet using DNS format.

00:21:15.570 --> 00:21:17.260
And that seemed like a
really interesting idea.

00:21:17.260 --> 00:21:20.960
And it took us a while to work
out the answer to that question.

00:21:21.630 --> 00:21:25.260
But suddenly we realized that we
don't even need to change DNS.

00:21:25.260 --> 00:21:29.740
There are three useful facilities
in DNS that are well known,

00:21:29.890 --> 00:21:32.530
but they've never been put
together in quite this way before.

00:21:32.630 --> 00:21:35.640
The first one is that DNS can
return multiple answers.

00:21:35.760 --> 00:21:38.230
If you have a multi-homed host,
you look up its address,

00:21:38.240 --> 00:21:40.860
you don't get back one address,
you get back a list.

00:21:40.890 --> 00:21:42.460
Everybody's familiar with that.

00:21:42.520 --> 00:21:44.980
Every DNS server does that.

00:21:45.080 --> 00:21:47.880
The second feature of
DNS is pointer records.

00:21:47.950 --> 00:21:51.610
A PTR record is what you normally
see used for doing a reverse lookup,

00:21:51.700 --> 00:21:53.570
when you want to go
from address to a name.

00:21:53.730 --> 00:21:56.900
But in fact,
a PTR record is a generic pointer,

00:21:56.960 --> 00:22:00.830
a link from somewhere in the
DNS name hierarchy to somewhere else.

00:22:00.940 --> 00:22:03.300
So that's a facility
that we're going to use.

00:22:03.380 --> 00:22:06.380
And the third feature is
something called SRV records,

00:22:06.380 --> 00:22:07.560
service records.

00:22:07.650 --> 00:22:10.300
Normally when you look up a host name,
you get the address.

00:22:10.360 --> 00:22:13.540
You look up www.apple.com,
you get the address where

00:22:13.540 --> 00:22:14.900
that service is running.

00:22:14.970 --> 00:22:16.300
But not the port number.

00:22:16.410 --> 00:22:18.590
And that's why everything has
to have well-known port numbers.

00:22:18.650 --> 00:22:22.990
Web servers always run on port 80
because the DNS doesn't tell you.

00:22:23.130 --> 00:22:25.190
The DNS tells you the address,
but it misses that last

00:22:25.190 --> 00:22:26.200
bit of information.

00:22:26.350 --> 00:22:30.440
SRV records fix that deficiency in DNS.

00:22:30.850 --> 00:22:34.020
SRV records are supported in bind 8,
bind 9.

00:22:34.220 --> 00:22:35.760
They've been around for about five years.

00:22:35.900 --> 00:22:38.200
So that's not a new invention.

00:22:38.380 --> 00:22:41.710
Putting these three things together,
we get something that nobody ever

00:22:41.710 --> 00:22:44.800
thought you could do with DNS before,
and that's browsing.

00:22:47.010 --> 00:22:51.130
So here's how I browse for
printers on the network.

00:22:51.130 --> 00:22:55.730
And there's a very subtle point that
I want to draw attention to here.

00:22:57.060 --> 00:22:59.590
If you want to design
networking protocols that work,

00:22:59.660 --> 00:23:03.350
you have to have a behavioral
model of protocols,

00:23:03.410 --> 00:23:06.990
which is, if it walks like a duck
and it quacks like a duck,

00:23:07.080 --> 00:23:08.040
it's a duck.

00:23:08.120 --> 00:23:11.950
It doesn't matter how that
protocol is implemented.

00:23:12.070 --> 00:23:16.100
So if you're an AFP client,
you want to talk to AFP servers.

00:23:16.190 --> 00:23:19.800
You don't care whether it's a
Mac server or a Windows machine or

00:23:19.800 --> 00:23:21.750
a Unix machine running NetAtalk.

00:23:22.120 --> 00:23:26.310
If it talks the protocol properly,
you're willing to talk to it.

00:23:26.470 --> 00:23:29.340
And this query here is saying
something very specific.

00:23:29.380 --> 00:23:35.380
It's saying I am looking for
services that speak the LPR protocol

00:23:36.100 --> 00:23:39.520
over TCP on my local network.

00:23:39.580 --> 00:23:46.240
And _printer there is the official
IANA protocol name for the LPR protocol.

00:23:46.310 --> 00:23:49.390
That doesn't mean generically
all printers in a sense that

00:23:49.400 --> 00:23:50.380
human beings think of them.

00:23:50.380 --> 00:23:53.760
That means specifically things
that implement the LPR protocol.

00:23:53.820 --> 00:23:55.960
That's the query because
I've got an LPR client.

00:23:56.030 --> 00:23:58.650
I want to find things it can talk to.

00:23:59.490 --> 00:24:02.480
And here are the answer,
or answers that come back.

00:24:02.480 --> 00:24:05.030
Because all the devices on the
network run their own responder,

00:24:05.100 --> 00:24:08.550
with multicast DNS you can get
a collection of responses back.

00:24:08.660 --> 00:24:17.060
And here, the result for that PTR lookup,
we have four names: sales.printer.tcp,

00:24:17.270 --> 00:24:19.710
marketing, engineering,
and third floor copy room.

00:24:19.940 --> 00:24:25.440
Now you see we have uppercase, lowercase,
spaces, in fact it's all UTF-8,

00:24:25.440 --> 00:24:26.980
kanji characters.

00:24:27.380 --> 00:24:29.240
DNS supports all that.

00:24:29.370 --> 00:24:31.340
Conventional host names don't.

00:24:31.440 --> 00:24:34.560
Host names have to be letters, digits,
and hyphens, no spaces,

00:24:34.650 --> 00:24:36.610
because you have to type
them on the command line.

00:24:36.660 --> 00:24:39.090
But these are not host names,
these are service names,

00:24:39.130 --> 00:24:42.020
so they're not bound by those
normal restrictions for host names.

00:24:44.370 --> 00:24:48.750
The first label of each of these
names is the user-friendly name

00:24:48.790 --> 00:24:50.960
that you display on the screen.

00:24:51.030 --> 00:24:54.580
The user-friendly name isn't a separate
attribute because any time that the

00:24:54.580 --> 00:24:57.900
real name of something and the name
you display are not the same thing,

00:24:58.170 --> 00:24:59.860
then you get weird inconsistencies.

00:25:00.030 --> 00:25:02.400
So there's a hard
one-to-one mapping here.

00:25:02.420 --> 00:25:05.400
Its DNS name is what you
display on the screen.

00:25:05.440 --> 00:25:08.410
And we have a graphical version of this.

00:25:08.410 --> 00:25:12.090
If this looks a bit
reminiscent of the old chooser,

00:25:12.090 --> 00:25:13.480
that's not a coincidence.

00:25:14.300 --> 00:25:19.990
We have services, we have domains,
which are equivalent to zones,

00:25:20.110 --> 00:25:23.200
and then we have the services
that we found in that domain.

00:25:25.890 --> 00:25:30.610
So a service name has three components
which intentionally mirror the three

00:25:30.610 --> 00:25:32.910
components of an AppleTalk MVP name.

00:25:32.980 --> 00:25:35.360
That's the name of the service,
the type of the service,

00:25:35.490 --> 00:25:38.400
and the zone or domain where it lives.

00:25:38.540 --> 00:25:42.690
in multicast DNS service discovery,
the first label is the name,

00:25:42.910 --> 00:25:47.000
the second two labels
are the protocol name.

00:25:47.000 --> 00:25:50.540
That syntax with the underscores,
underscore print dot underscore TCP,

00:25:50.760 --> 00:25:55.210
that's not our invention,
that's borrowed from the SRV RFC.

00:25:55.610 --> 00:25:58.900
Because I'll--I've said this
before and I'll repeat it.

00:25:59.010 --> 00:26:00.660
We're not trying to
invent new stuff here.

00:26:00.750 --> 00:26:03.100
Anywhere something
exists that we can use,

00:26:03.100 --> 00:26:04.560
we'll borrow that.

00:26:04.560 --> 00:26:08.140
And the rest of the name
is the conventional domain,

00:26:08.180 --> 00:26:12.540
could be apple.com, stanford.edu,
whatever.

00:26:13.080 --> 00:26:14.590
And there's the example repeated.

00:26:14.590 --> 00:26:17.890
We've got the name, we've got the type,
and we've got the domain.

00:26:17.950 --> 00:26:20.200
If the domain is local.arpa,
that means multicast

00:26:20.200 --> 00:26:21.220
on the local network.

00:26:21.240 --> 00:26:23.900
But if the name is apple.com,
it means send this query to

00:26:23.900 --> 00:26:26.840
the regular Apple name server
just like any other query.

00:26:26.920 --> 00:26:30.400
And you can use standard Unix tools
like NSLookup to do these queries.

00:26:30.500 --> 00:26:35.270
You don't have to change
a single line of C.

00:26:35.270 --> 00:26:35.270
This already works with
the tools you have.

00:26:38.500 --> 00:26:41.300
So I want to stress this
thing about service types.

00:26:41.410 --> 00:26:43.090
They're not human-readable strings.

00:26:43.200 --> 00:26:46.000
They're opaque identifiers
that name protocols.

00:26:46.050 --> 00:26:49.390
And that list of protocol
names is maintained by IANA.

00:26:49.390 --> 00:26:53.610
And there's a list of
them on their website.

00:26:53.970 --> 00:26:56.630
And if you want one of your
own for your own protocol,

00:26:56.790 --> 00:27:00.710
getting a name and a default well-known
port assigned is really easy.

00:27:00.710 --> 00:27:02.830
Just fill in the form,
answer a few questions,

00:27:02.830 --> 00:27:06.430
and you can get a port number
and a protocol name of your own.

00:27:08.530 --> 00:27:12.120
So one of the questions that
have been asked an awful lot is,

00:27:12.350 --> 00:27:14.600
"We don't want all this
AppleTalk stuff on IP.

00:27:14.600 --> 00:27:16.400
AppleTalk's really
chatty and it's horrible,

00:27:16.400 --> 00:27:21.160
and now you're doing that to IP as
well." And the answer is we're not.

00:27:21.200 --> 00:27:24.370
We have been very,
very careful not to have some

00:27:24.370 --> 00:27:26.650
of those problems of AppleTalk.

00:27:26.940 --> 00:27:32.110
When AppleTalk was designed
more than 15 years ago,

00:27:32.120 --> 00:27:34.510
what it did was appropriate,
but we have better technology now.

00:27:39.270 --> 00:27:42.240
So the demon that's running in
the background on your Jaguar

00:27:42.240 --> 00:27:45.680
machine is aggressively caching
all the information it sees.

00:27:45.780 --> 00:27:51.140
Replies are sent by multicast,
so if one person is looking for printers,

00:27:51.220 --> 00:27:54.350
then other people get to see the
responses and store those in the cache.

00:27:54.460 --> 00:27:57.230
So if they later look for printers,
they don't have to ask

00:27:57.240 --> 00:27:58.650
the same question again.

00:27:59.100 --> 00:28:01.300
With AppleTalk,
if you're looking for printers,

00:28:01.330 --> 00:28:03.720
you send an MVP query saying,
"I'm looking for printers,"

00:28:03.770 --> 00:28:05.230
and you get 50 responses.

00:28:05.440 --> 00:28:07.510
And a second later, you say,
"I'm looking for printers," and

00:28:07.510 --> 00:28:09.200
you get another 50 responses.

00:28:09.390 --> 00:28:10.560
It's very inefficient.

00:28:10.630 --> 00:28:14.560
With multicast DNS service discovery,
the query includes a list

00:28:14.560 --> 00:28:16.560
of answers you already know.

00:28:16.670 --> 00:28:19.000
So you do a query, you get 50 answers.

00:28:19.070 --> 00:28:23.270
Then you issue another query with
those 50 answers embedded in it,

00:28:23.270 --> 00:28:26.790
and all you get then is maybe
the one or two that you missed.

00:28:26.830 --> 00:28:29.000
So that's much more efficient.

00:28:29.410 --> 00:28:33.770
If you've got two machines on the
network that have the same information,

00:28:33.840 --> 00:28:38.190
then when one sees the other answer,
it will suppress its own reply.

00:28:38.420 --> 00:28:40.900
If you've got two people
browsing for printers,

00:28:41.040 --> 00:28:43.690
when I see you ask for printers,
I'll suppress my own question

00:28:43.700 --> 00:28:47.000
because there's no point in me
asking the same question as you.

00:28:48.170 --> 00:28:56.110
When I open a printer browser,
or whatever,

00:28:56.460 --> 00:28:57.820
I keep talking about printers
because printers is a concrete

00:28:57.820 --> 00:28:57.820
example of something that
we all deal with day to day,

00:28:57.820 --> 00:28:57.820
but

00:28:57.890 --> 00:29:01.200
The real potential of ZeroConf is much,
much broader than that,

00:29:01.320 --> 00:29:04.960
but I want to try to keep this
grounded in reality for this talk.

00:29:05.650 --> 00:29:07.930
I think a lot of you out there
are already thinking of cool

00:29:07.960 --> 00:29:10.610
things you could do with this and
cool new products you can make.

00:29:10.730 --> 00:29:13.060
And that's really what's
exciting about this.

00:29:13.220 --> 00:29:16.560
It's not just about making
current products easier to use.

00:29:16.670 --> 00:29:19.950
It's about enabling whole new kinds
of products that you wouldn't have

00:29:20.180 --> 00:29:23.770
dreamed of making before because the
support costs would have killed you.

00:29:23.980 --> 00:29:27.350
But now they've become viable,
and that's what's exciting.

00:29:28.120 --> 00:29:31.240
So when I open a browser
looking for some service,

00:29:31.290 --> 00:29:33.040
I don't keep pounding on the network.

00:29:33.100 --> 00:29:34.990
I send a query, and I wait a second.

00:29:34.990 --> 00:29:37.020
I send another two seconds, four seconds.

00:29:37.220 --> 00:29:40.150
It backs off exponentially down
to a kind of quiescent rate

00:29:40.150 --> 00:29:41.660
of about one query an hour.

00:29:41.850 --> 00:29:45.210
So very low load on the network.

00:29:45.820 --> 00:29:48.330
So the question you might ask is
if I'm only asking once an hour

00:29:48.380 --> 00:29:51.030
and somebody plugs a printer in,
am I going to have to wait

00:29:51.070 --> 00:29:52.300
an hour before I see it?

00:29:52.430 --> 00:29:56.190
And the answer to that is whenever a
new service starts up on the network,

00:29:56.190 --> 00:29:59.760
it announces its presence with
the same kind of algorithm,

00:29:59.760 --> 00:30:02.720
one second, two, four, eight,
backing off,

00:30:02.720 --> 00:30:05.980
so that it sends about ten packets
spaced over about an hour and

00:30:05.980 --> 00:30:07.450
then it doesn't announce anymore.

00:30:07.450 --> 00:30:10.120
But that means that when a
new service comes online,

00:30:10.230 --> 00:30:13.770
you get to find about it in a
timely fashion without pounding on

00:30:13.770 --> 00:30:16.700
the network polling all the time.

00:30:16.740 --> 00:30:21.250
So a lot of work has gone
into improving the efficiency

00:30:22.880 --> 00:30:24.050
So I've talked about the browsing.

00:30:24.050 --> 00:30:27.190
I've talked about finding the name
of the service you want to use.

00:30:27.280 --> 00:30:30.730
And remember I said,
service discovery is a two-step process.

00:30:30.940 --> 00:30:32.550
There's browsing and then there's using.

00:30:32.560 --> 00:30:35.590
Now I'm going to talk
about the using stage.

00:30:37.040 --> 00:30:41.580
So we found a name:
sales.printer.tcp.local.arpa.

00:30:41.720 --> 00:30:43.460
Well, what is that the name of?

00:30:43.760 --> 00:30:46.740
That is the name of a DNS service
record that describes how

00:30:46.740 --> 00:30:48.430
you can reach the service.

00:30:48.590 --> 00:30:51.990
With DHCP,
the address might change day to day.

00:30:52.170 --> 00:30:55.380
With dynamically allocated ports,
it might not be in the

00:30:55.500 --> 00:30:56.940
same TCP port every day.

00:30:57.220 --> 00:31:01.870
But DNS SRV records let you look that
up on demand and get fresh information.

00:31:01.980 --> 00:31:06.320
So here's the query that I send,
and here's the answer that I get.

00:31:06.400 --> 00:31:14.620
The sales printer today is on port
515 on IP address 16925412.34,

00:31:14.940 --> 00:31:20.000
and the Q name for that printer is LPT1.

00:31:20.050 --> 00:31:22.960
I could actually move that printer
to a different print server,

00:31:23.060 --> 00:31:25.760
which may be using a
different LPR Q name,

00:31:25.820 --> 00:31:27.770
but by putting this
information in the DNS,

00:31:28.040 --> 00:31:30.500
you can hit Command-P,
and you're still printing

00:31:30.500 --> 00:31:31.400
on your default printer.

00:31:31.410 --> 00:31:31.860
You don't need a different LPR.

00:31:31.860 --> 00:31:31.860
You can just use the same LPR.

00:31:31.860 --> 00:31:34.350
need to be aware of the fact
that the administrator has

00:31:34.350 --> 00:31:36.390
reorganized the network.

00:31:38.540 --> 00:31:41.860
So now we're going to do another demo.

00:31:41.900 --> 00:31:46.250
Typing stuff in to connect to this
Linksys router was all very well,

00:31:46.250 --> 00:31:48.730
but it would be much
nicer to browse for it.

00:31:54.920 --> 00:31:58.680
So let's look for things on
this network that speak HTTP.

00:31:58.780 --> 00:32:00.200
Oh, there we are.

00:32:00.270 --> 00:32:01.600
And I talked about UTF-8.

00:32:01.670 --> 00:32:04.040
Everybody says, "Oh,
we're international." I just wanted

00:32:04.060 --> 00:32:06.260
to show that we really mean it.

00:32:06.300 --> 00:32:07.560
We have some Japanese text there.

00:32:07.560 --> 00:32:09.680
I think that says "Japanese" in kanji.

00:32:09.750 --> 00:32:13.500
I don't speak Japanese,
but somebody can correct me if I'm wrong.

00:32:13.660 --> 00:32:16.680
So when I select that,
we get its address.

00:32:16.680 --> 00:32:18.460
We get the port number.

00:32:18.460 --> 00:32:19.730
Click Connect.

00:32:19.730 --> 00:32:22.950
Now we didn't even need
to know what to type.

00:32:22.950 --> 00:32:24.430
We just browse for it.

00:32:28.770 --> 00:32:31.820
So I brought some other
cool toys as well.

00:32:31.890 --> 00:32:35.060
This is a wonderful little
camera made by Axis.

00:32:35.110 --> 00:32:36.960
This thing runs Linux.

00:32:37.180 --> 00:32:40.920
It's got a web server in it,
an Ethernet port on the back.

00:32:41.880 --> 00:32:43.560
Cost about $400.

00:32:43.610 --> 00:32:48.560
Takes about four hours to set it up.

00:32:48.560 --> 00:32:50.270
But what if this had multicast DNS?

00:32:50.520 --> 00:32:53.570
I take my cable, I plug it in.

00:32:56.090 --> 00:32:58.020
Link Flight comes on.

00:32:58.510 --> 00:33:02.010
And give it a few seconds.

00:33:21.810 --> 00:33:26.490
That was so cool, I bought another one.

00:33:26.490 --> 00:33:31.390
Let's give that a second,
see if that shows up.

00:33:41.320 --> 00:33:48.760
Okay, back to the slides.

00:33:48.860 --> 00:33:56.530
So,
browsing with DNS is a system-provided

00:33:56.530 --> 00:33:56.530
API in your Jaguar seed

00:33:57.000 --> 00:34:00.620
DNSserviceDiscovery.h is
the name of the header file.

00:34:00.780 --> 00:34:04.260
I'm going to talk about the APIs,
but you can find that on the disk.

00:34:04.350 --> 00:34:09.690
We have a little bit of sample
code on the Apple developer site.

00:34:10.660 --> 00:34:13.970
If you're making a hardware device
and you want to put this in,

00:34:14.130 --> 00:34:15.570
there's a couple of ways you can do it.

00:34:15.720 --> 00:34:18.100
You can read the draft and implement it,
and that's fine.

00:34:18.100 --> 00:34:19.820
This is an open standard.

00:34:19.960 --> 00:34:24.480
But if you want to save time,
save development time

00:34:24.480 --> 00:34:24.480
and save debugging time,

00:34:25.300 --> 00:34:27.040
We're willing to give
you the source code.

00:34:27.150 --> 00:34:30.350
When Jaguar ships,
all of this source code for

00:34:30.360 --> 00:34:34.740
the Jaguar MB&S responder in
portable C will be in Darwin.

00:34:34.810 --> 00:34:38.040
If you're a hardware vendor
that's really in a hurry to ship

00:34:38.150 --> 00:34:42.050
a product before that time frame,
contact Tom Weyer and we can give you

00:34:42.050 --> 00:34:44.370
an advance copy of that source code.

00:34:44.540 --> 00:34:47.710
We don't have the resources to
support every company doing that,

00:34:47.710 --> 00:34:50.350
but a small number,
if you've got products you really want

00:34:50.550 --> 00:34:53.290
to ship and you're excited about this,
by all means contact

00:34:53.430 --> 00:34:55.200
Tom and we'll work with you.

00:35:02.550 --> 00:35:05.200
find out more about what this is doing,
because you don't really believe me,

00:35:05.330 --> 00:35:07.110
you can look at this stuff in EtherPeak.

00:35:07.110 --> 00:35:09.840
That's the cool thing about
using a standard packet format,

00:35:09.900 --> 00:35:14.260
is that EtherPeak already knows how
to debug and decode DNS packets.

00:35:14.260 --> 00:35:20.220
The only thing it doesn't know is
that multicast DNS is using port 5353.

00:35:20.420 --> 00:35:25.440
So you just need to open your
IETF.dcd decoder file with whatever

00:35:25.440 --> 00:35:29.300
favorite text editor you want,
find the line that

00:35:29.300 --> 00:35:33.030
recognizes DNS packets,
and duplicate that and make

00:35:33.230 --> 00:35:38.140
another recognizer that says 14E9,
which is 5353 in hex,

00:35:38.340 --> 00:35:40.000
go to the DNS decoder.

00:35:40.160 --> 00:35:41.300
You don't need to write all that down.

00:35:41.300 --> 00:35:43.710
The instructions are on the
multicastdns.org website.

00:35:43.710 --> 00:35:45.460
But you put that one
line in your decoder,

00:35:45.460 --> 00:35:49.090
you can look at all the packets
that your Jaguar seeds are sending

00:35:49.160 --> 00:35:51.010
out and see exactly what they're

00:35:53.630 --> 00:35:57.490
So, ZeroConf is cool for Apple,
but we really have it easy because

00:35:57.520 --> 00:36:01.600
we have computers that have got
screens and keyboards on them.

00:36:01.600 --> 00:36:04.940
So, setting them up is,
relatively speaking,

00:36:04.990 --> 00:36:07.400
not as hard as it is for
somebody who's got a device

00:36:07.400 --> 00:36:09.180
without a screen and a keyboard.

00:36:09.360 --> 00:36:13.730
So, the router, the cable modem,
airport base station,

00:36:13.740 --> 00:36:16.400
anything like that is a
perfect candidate for this.

00:36:16.450 --> 00:36:20.220
Network printers, the video camera,
another example.

00:36:20.260 --> 00:36:21.160
Rack mount servers.

00:36:21.220 --> 00:36:23.560
I don't know whether any of you
guys have been into a data center,

00:36:23.680 --> 00:36:25.320
but it's crazy what they have there.

00:36:25.380 --> 00:36:27.880
They have the racks of servers,
they have all the

00:36:27.880 --> 00:36:32.220
spaghetti ethernet wiring,
and they have spaghetti serial port

00:36:32.220 --> 00:36:37.240
wiring going to like a Livingston port
master or a Cisco 3600 so that they

00:36:37.240 --> 00:36:38.810
can sit with their serial terminal.

00:36:39.030 --> 00:36:41.870
And they've got like a logical
serial network where they can log

00:36:41.880 --> 00:36:46.240
in to any server over the serial
port to type commands to it.

00:36:46.300 --> 00:36:48.860
And for the disk arrays,
they've got a fiber channel network.

00:36:48.950 --> 00:36:50.060
So,
they're running three parallel networks.

00:36:50.060 --> 00:36:52.120
They're running three parallel
networks through their data center.

00:36:52.180 --> 00:36:54.200
All of this could be done over IP.

00:36:54.250 --> 00:36:56.180
With zeroConf,
you don't need the serial ports.

00:36:56.240 --> 00:36:58.350
You can just telnet or SSH to the server.

00:36:58.630 --> 00:37:01.420
It doesn't matter if its
IP configuration is messed up,

00:37:01.470 --> 00:37:04.900
because if it has a linked local address,
you can talk to it anyway to fix

00:37:05.280 --> 00:37:08.310
its standard IP configuration.

00:37:08.770 --> 00:37:12.660
There's also an ITF working group
working on doing SCSI over IP,

00:37:12.660 --> 00:37:15.430
because what a lot of the disk
people have realized is that their

00:37:15.430 --> 00:37:17.620
expertise is in making really,
really good hard disks,

00:37:17.620 --> 00:37:20.320
not in making communication technologies.

00:37:20.320 --> 00:37:24.240
So they've kind of said, well, listen,
we'll let you gigabit Ethernet

00:37:24.330 --> 00:37:28.020
guys and 10 gigabit Ethernet guys
build the cool network hardware,

00:37:28.020 --> 00:37:29.130
and we'll just build the disks.

00:37:29.180 --> 00:37:32.620
So there is a move right now,
and it is a move.

00:37:32.680 --> 00:37:35.400
It may be a couple of years away
before you see products that do this,

00:37:35.510 --> 00:37:39.440
but there is a move to running everything
over IP so that you have one cable

00:37:39.440 --> 00:37:41.000
going into that server instead of three.

00:37:44.370 --> 00:37:46.690
A lot of you may have TiVos in the house.

00:37:46.780 --> 00:37:49.020
When people get a TiVo,
they like it so much they buy a

00:37:49.020 --> 00:37:50.420
second one for the bedroom TV.

00:37:50.420 --> 00:37:52.130
And then what's the
problem that you have?

00:37:52.210 --> 00:37:55.170
You've got the shows
recorded on the wrong TiVo.

00:37:55.300 --> 00:37:58.070
Networking home appliances
like this is going to be a

00:37:58.070 --> 00:38:00.040
huge application for ZeroConf.

00:38:00.110 --> 00:38:03.880
And there are many, many more,
which I'm sure you're

00:38:03.990 --> 00:38:05.270
already thinking of.

00:38:05.550 --> 00:38:08.680
I had a bunch of examples here of things
that I thought would be cool products,

00:38:08.730 --> 00:38:11.800
but every time I said them, Steve said,
"Ooh, that's a good product.

00:38:11.800 --> 00:38:19.830
Don't tell them about that." So I'll
have to leave that to your imagination.

00:38:22.290 --> 00:38:26.430
So now, Eric's going to help
me with another demo.

00:38:26.530 --> 00:38:30.410
Browsing to find a
service is really cool,

00:38:30.410 --> 00:38:36.470
but this is zero configuration,
not little bit of configuration

00:38:36.490 --> 00:38:39.030
or easy configuration.

00:38:39.030 --> 00:38:39.030
So,

00:38:40.660 --> 00:38:43.790
I want to show you a demo here
which some of you have seen before,

00:38:43.790 --> 00:38:49.140
but we have a bit more time now to
tell you exactly what's going on.

00:38:49.180 --> 00:38:51.280
I have a document here.

00:38:52.500 --> 00:38:59.600
To prove this is live,
on the corner here.

00:38:59.600 --> 00:38:59.600
Can I get your name?

00:38:59.600 --> 00:38:59.600
Howard.

00:38:59.600 --> 00:38:59.600
Howard, okay.

00:39:02.250 --> 00:39:04.700
I know Howard,
but he was the first person I saw say,

00:39:04.700 --> 00:39:07.310
"We'll use Howard,
but this is not rigged."

00:39:09.000 --> 00:39:09.890
So type in howd.

00:39:09.980 --> 00:39:13.060
Now I'm going to print this document.

00:39:13.180 --> 00:39:17.450
But you see,
I just bought this Mac in my scenario.

00:39:17.710 --> 00:39:18.900
I don't have a printer.

00:39:18.970 --> 00:39:20.360
It's never had a printer.

00:39:20.370 --> 00:39:22.010
It's never had a print queue.

00:39:22.160 --> 00:39:25.720
So I go down to my computer
store and I buy a printer.

00:39:25.850 --> 00:39:27.480
This printer's never
been turned on before.

00:39:27.500 --> 00:39:31.810
It's never been configured.

00:39:31.810 --> 00:39:31.810
Can we plug in the printer, Eric?

00:39:33.930 --> 00:39:36.290
Now you're thinking,
I've got my computer,

00:39:36.290 --> 00:39:39.240
I've got my printer,
they're plugged in with a cable.

00:39:39.560 --> 00:39:41.940
What does the computer
think I want to do with it?

00:39:42.650 --> 00:39:46.050
That's what I want to do with it.

00:39:50.200 --> 00:39:58.200
One finger, hit the return key,
and we'll see whether that works.

00:39:58.200 --> 00:39:59.660
The printer might take
a minute to warm up.

00:39:59.690 --> 00:40:02.290
Oh, no.

00:40:23.240 --> 00:40:26.080
So I want to stress
that this is not rigged.

00:40:26.180 --> 00:40:27.030
This is real.

00:40:27.090 --> 00:40:29.320
You put a multicast
responder in your printers,

00:40:29.450 --> 00:40:31.100
they will do this with Jaguar.

00:40:31.100 --> 00:40:32.970
Thank you, Eric.

00:40:33.100 --> 00:40:41.720
Okay, so let's move on.

00:40:48.800 --> 00:40:50.400
Actually,
there's one more thing I want to do.

00:40:50.430 --> 00:40:51.570
Eric, do you have your laptop there?

00:40:51.600 --> 00:40:58.600
Yeah, I've got it.

00:40:58.600 --> 00:41:01.600
Why don't you plug that
Ethernet cable into your laptop?

00:41:01.600 --> 00:41:07.670
You can open it up.

00:41:13.340 --> 00:41:15.410
Eric told me earlier he had
a file he wanted to give me,

00:41:15.410 --> 00:41:18.170
and we've talked about all
these file copying tools.

00:41:18.180 --> 00:41:21.200
So,
I'm not going to touch the keyboard here.

00:41:21.420 --> 00:41:24.200
Let's see what this is doing.

00:41:24.560 --> 00:41:27.790
Oh, that's the disk of Eric's laptop.

00:41:33.430 --> 00:41:34.300
Thanks, Eric.

00:41:34.300 --> 00:41:43.940
So now I hope I've convinced
you that this is cool stuff.

00:41:44.250 --> 00:41:48.180
I'm going to tell you about the
APIs that you can use in Jaguar

00:41:48.180 --> 00:41:50.140
to use this in your products.

00:41:50.290 --> 00:41:52.430
Back to the slides, please.

00:41:52.430 --> 00:41:52.430
Thank you.

00:41:55.640 --> 00:41:58.990
So, there are APIs at various
levels you can use.

00:41:59.310 --> 00:42:04.450
The lowest level API sends marker
messages to the MDNS responder daemon.

00:42:04.590 --> 00:42:10.860
You can use this in standard Unix
tools like Apache that aren't linking

00:42:10.860 --> 00:42:14.000
with the rest of the OS X framework.

00:42:14.040 --> 00:42:18.780
All of the APIs here take
a common kind of format,

00:42:18.800 --> 00:42:24.280
which is you make some call,
DNS service something,

00:42:24.320 --> 00:42:27.620
and it returns you a
DNS server discovery ref.

00:42:27.890 --> 00:42:32.300
From that ref, you extract a mark port,
which you have to listen for messages on.

00:42:32.300 --> 00:42:34.440
You can add it to a mark port group.

00:42:34.570 --> 00:42:39.160
You can create a CF mark port from
it and add it to your CF run loop if

00:42:39.170 --> 00:42:41.960
you've got a run loop application.

00:42:42.020 --> 00:42:43.920
And whenever you get a
message on that port,

00:42:43.920 --> 00:42:46.450
it's your responsibility
to call DNServiceDiscovery,

00:42:46.450 --> 00:42:47.100
handle reply.

00:42:47.390 --> 00:42:49.200
And then when you're finished,
you deallocate.

00:42:49.330 --> 00:42:52.500
So here are the three
APIs I want to talk about.

00:42:52.730 --> 00:42:54.000
You have a service.

00:42:54.100 --> 00:42:58.560
You're running a web server, SSH daemon,
a game, whatever it is.

00:42:58.560 --> 00:43:01.100
You want to advertise that that's
existing on the network and

00:43:01.100 --> 00:43:03.790
listening for incoming connections.

00:43:04.160 --> 00:43:06.500
You give the name, the type, the domain.

00:43:06.500 --> 00:43:09.150
For now,
I suggest you just pass empty string

00:43:09.160 --> 00:43:10.540
for the domain to mean the default.

00:43:10.560 --> 00:43:15.600
In the shipping version of Jaguar,
you'll be able to register on unicast

00:43:15.680 --> 00:43:19.300
domains as well as on local multicast,
but for now, stick to local multicast.

00:43:19.340 --> 00:43:22.650
You pass the port number you're
using because you may not be

00:43:22.650 --> 00:43:23.850
using the well-known port.

00:43:23.900 --> 00:43:27.200
You have a text record,
which you can use for any additional

00:43:27.270 --> 00:43:29.350
information that your protocol needs.

00:43:29.360 --> 00:43:31.850
In the case of the
HTTP for the web server,

00:43:31.980 --> 00:43:34.860
that additional information was the
path of the URL you want to fetch.

00:43:34.960 --> 00:43:38.980
And you also pass a function
pointer for a callback function,

00:43:38.980 --> 00:43:41.680
which will be called if
there's a name conflict.

00:43:41.680 --> 00:43:45.300
If someone else is using your name,
you'll get called,

00:43:45.300 --> 00:43:48.520
and that's your opportunity to either
programmatically generate a new name

00:43:48.520 --> 00:43:52.380
just by incrementing a digit on the end,
or you can prompt the user and say,

00:43:52.380 --> 00:43:55.580
Stuart's computer is already
in use on this network.

00:43:55.580 --> 00:43:56.510
Please pick a different name.

00:43:56.510 --> 00:43:57.420
Your choice.

00:44:00.200 --> 00:44:02.380
For browsing,
you tell it the type and the

00:44:02.390 --> 00:44:05.400
domain you're looking for,
and it gives you callbacks telling

00:44:05.600 --> 00:44:06.940
you when it finds services.

00:44:08.290 --> 00:44:10.950
You'll see the template here is
very similar to the last one.

00:44:11.030 --> 00:44:12.390
It's just that you
don't provide the name,

00:44:12.390 --> 00:44:15.220
the port,
and the text record because that's what

00:44:15.320 --> 00:44:16.640
you're going to learn in the reply.

00:44:16.910 --> 00:44:20.840
Once you've browsed and found a service
and maybe stored that in a preference

00:44:20.970 --> 00:44:24.000
file or whatever you want to do with it,
when it's time to use that service,

00:44:24.020 --> 00:44:27.200
you need to resolve it
to get an IP address.

00:44:27.260 --> 00:44:30.180
And there you give the name, the type,
and the domain,

00:44:30.180 --> 00:44:33.820
and when the service resolves,
normally very quickly,

00:44:33.820 --> 00:44:37.280
normally in a millisecond or two,
your callback gets called.

00:44:37.280 --> 00:44:40.980
The reason it's an asynchronous
callback API is because if the Ethernet

00:44:40.980 --> 00:44:44.180
cable's being unplugged or something
else has gone wrong with the network,

00:44:44.180 --> 00:44:45.700
it may not complete immediately.

00:44:46.150 --> 00:44:48.710
And users hate it when the
whole UI freezes because

00:44:49.070 --> 00:44:50.190
something isn't working.

00:44:50.200 --> 00:44:53.500
So if you want to give your
customers a pleasant experience,

00:44:53.520 --> 00:44:55.280
you need to make everything asynchronous.

00:44:55.280 --> 00:44:58.910
If there's a lengthy operation,
put up a dialogue with a cancel

00:44:58.910 --> 00:45:00.780
button so that they're in control.

00:45:00.780 --> 00:45:04.800
There's nothing users hate more than
seeing the spinning pizza of death and

00:45:04.800 --> 00:45:06.150
not being able to do anything about it.

00:45:12.090 --> 00:45:14.760
So that's the simplest low-level API.

00:45:14.790 --> 00:45:18.130
And if you're writing a simple
daemon that doesn't link

00:45:18.130 --> 00:45:20.840
with any other frameworks,
that may be the best one for you.

00:45:20.900 --> 00:45:23.510
But we have some other choices as well.

00:45:24.700 --> 00:45:27.730
So moving one level up
from the Markport API,

00:45:27.730 --> 00:45:32.400
CFNet Services provides a very
nice API that fits in much more

00:45:32.400 --> 00:45:38.670
nicely with the programming model
of the rest of Core Foundation.

00:45:38.850 --> 00:45:41.670
And moving forwards,
you'll expect to see new

00:45:41.670 --> 00:45:45.200
functionality and more ease of
use happening at that layer.

00:45:45.370 --> 00:45:48.830
Above that,
Directory Services and NSL are also

00:45:48.860 --> 00:45:53.540
clients of that same CFNet Services API.

00:45:53.540 --> 00:45:58.660
Right now, you can use things like the
NSL browser to access multicast DNS,

00:45:58.660 --> 00:46:01.400
but you don't get all
of the functionality.

00:46:01.400 --> 00:46:03.900
For instance, you can browse the
network and find services,

00:46:03.900 --> 00:46:07.040
but when you select them,
what's returned is a resolved

00:46:07.040 --> 00:46:10.340
URL with an embedded IP address in it,
which is great if you want

00:46:10.440 --> 00:46:13.140
to use the service right now,
but if you want to save that

00:46:13.140 --> 00:46:16.100
away in a preference file,
saving an IP address is not good.

00:46:16.100 --> 00:46:17.620
You want to save the name.

00:46:17.800 --> 00:46:22.350
So there are plans for adding that
support in Directory Services and NSL,

00:46:22.360 --> 00:46:24.060
but not in the Jaguar timeframe.

00:46:25.510 --> 00:46:28.530
So now I'd like to invite Jeremy Wyld
to come up and tell you the

00:46:28.560 --> 00:46:31.350
details about the CFNet services.

00:46:35.500 --> 00:46:36.480
Thank you.

00:46:36.480 --> 00:46:41.750
So I just want to talk briefly up here,
and then we'll get Stuart back up,

00:46:42.290 --> 00:46:43.600
talk some more.

00:46:43.850 --> 00:46:47.940
I want to talk to you about a set of
APIs called CFNet Services that are

00:46:47.940 --> 00:46:50.500
located in the CFNetwork framework.

00:46:50.640 --> 00:46:54.030
In order to do that,
I need to quickly give you a

00:46:54.330 --> 00:46:57.150
one-slide overview about CFNetwork.

00:46:57.150 --> 00:47:01.840
CFNetwork is an abstraction of
common networking protocols:

00:47:01.900 --> 00:47:05.500
SSL, HTTP, and of course, Rendezvous.

00:47:11.940 --> 00:47:17.660
CF network is built and written
in the style of core foundation.

00:47:17.680 --> 00:47:22.660
That means we have CF types,
we create CF types, we use CF types,

00:47:22.710 --> 00:47:27.700
and then you get the use of the core
foundation's reference counting,

00:47:27.740 --> 00:47:30.520
so CF retain, CF release.

00:47:30.670 --> 00:47:36.040
CF Network is located in the
Core Services umbrella framework,

00:47:36.040 --> 00:47:39.430
so that's what you'll link against
in order to get this stuff.

00:47:41.200 --> 00:47:46.050
To underline CF Network,
all of Apple uses CF Network for its

00:47:46.690 --> 00:47:50.100
underlying networking protocol usages.

00:47:50.100 --> 00:47:54.290
So,
applications and frameworks like Mail,

00:47:54.380 --> 00:48:03.050
iChat, NS Services located in Foundation,
and then also NSL uses CF Network.

00:48:03.130 --> 00:48:08.100
This, of course,
is where CF Net Services is located.

00:48:08.100 --> 00:48:14.340
CF Net Services is your abstraction
layer for performing your rendezvous,

00:48:14.540 --> 00:48:15.850
DNS discovery APIs.

00:48:16.100 --> 00:48:19.220
We have two types, two CF types.

00:48:19.350 --> 00:48:23.100
We have a CF Net Service and
a CF Net Service Browser.

00:48:23.100 --> 00:48:26.600
A Net Service represents single
entity then on the network,

00:48:26.600 --> 00:48:30.160
and then the Net Service Browser
represents search for

00:48:30.170 --> 00:48:32.420
those services or domains.

00:48:35.320 --> 00:48:37.780
So these two objects,
how do you go about using them?

00:48:38.040 --> 00:48:42.380
There's one usage model
for both these objects.

00:48:42.590 --> 00:48:44.540
You're going to create them,
you're going to schedule

00:48:44.540 --> 00:48:47.110
them on a run loop,
then you're going to tell them

00:48:47.240 --> 00:48:48.440
to perform whatever they do.

00:48:48.440 --> 00:48:50.920
You tell them to run,
and then you sit back and wait to

00:48:50.930 --> 00:48:52.800
handle the callbacks as they occur.

00:48:52.880 --> 00:48:55.000
There's going to be three main
tasks that you're going to want to

00:48:55.000 --> 00:48:56.390
perform when using these objects.

00:48:56.400 --> 00:48:58.880
You're going to want to
advertise your service,

00:48:59.130 --> 00:49:02.860
you're going to want to find services
that are published on the network,

00:49:02.860 --> 00:49:05.280
and finally you're going to
want to connect to and use

00:49:05.280 --> 00:49:06.600
a service on the network.

00:49:06.800 --> 00:49:11.190
So what I want to do is
take a sample HTTP server,

00:49:11.230 --> 00:49:13.700
I'm going to walk through some code,
you can just assume

00:49:13.700 --> 00:49:16.090
that this HTTP server,
like Stuart showed,

00:49:16.100 --> 00:49:17.500
is just listening on the network.

00:49:17.680 --> 00:49:19.600
There's no pre-advertised port.

00:49:19.600 --> 00:49:22.940
We don't tell someone
that's listening on port 80.

00:49:23.450 --> 00:49:28.540
So here I'm going to
register our service.

00:49:28.590 --> 00:49:31.260
We create the object,
we schedule it on a run loop,

00:49:31.540 --> 00:49:33.890
and then we tell it to register.

00:49:34.350 --> 00:49:38.130
The things that I want to point out here,
we're registering it on local domain

00:49:38.130 --> 00:49:39.660
indicated by the empty string.

00:49:39.910 --> 00:49:41.050
We're doing HTTP.

00:49:41.050 --> 00:49:42.570
We've given some name.

00:49:42.800 --> 00:49:43.760
It could be the name of the computer.

00:49:43.760 --> 00:49:46.240
It could be something we asked the user.

00:49:46.380 --> 00:49:49.150
But the one important
note here is the port.

00:49:49.310 --> 00:49:51.550
Assume the port to be opaque.

00:49:51.680 --> 00:49:54.000
In this case,
just assume we want and asked the

00:49:54.000 --> 00:49:56.160
port for its local binding address.

00:49:56.270 --> 00:49:58.900
We're just going to
register it on the network.

00:49:59.000 --> 00:50:01.640
At some point in the future,
we're going to get an

00:50:01.640 --> 00:50:03.120
error for some reason.

00:50:04.560 --> 00:50:07.490
The most common,
or the most important error

00:50:07.600 --> 00:50:09.510
that you'll want to really,
uh,

00:50:10.750 --> 00:50:14.940
Take account for is the name collision.

00:50:14.940 --> 00:50:19.240
So someone else on the network
has a service registered by the

00:50:19.240 --> 00:50:20.650
same name on the same domain.

00:50:20.820 --> 00:50:23.460
At that point you want
to formulate a new name.

00:50:23.460 --> 00:50:27.250
So you could add a one or a two
to the end or you could prompt

00:50:27.250 --> 00:50:29.450
the user and ask for a new name.

00:50:30.140 --> 00:50:32.130
Either way we'll go
ahead and register it.

00:50:32.130 --> 00:50:36.140
And finally we just go ahead
and clean up the object.

00:50:36.140 --> 00:50:38.920
So we've got this service
registered on the network.

00:50:38.920 --> 00:50:41.520
There's going to be someone out
there that wants to use your service.

00:50:41.520 --> 00:50:45.320
Or hopefully they want
to use your service.

00:50:45.320 --> 00:50:46.130
Very similar.

00:50:46.250 --> 00:50:48.260
We create the object.

00:50:49.370 --> 00:50:52.120
We schedule it on a run loop.

00:50:52.120 --> 00:50:53.740
We tell it to go find services.

00:50:53.740 --> 00:50:58.190
So we're telling it to go find
services of the HTTP type.

00:50:59.170 --> 00:51:01.390
Hopefully we'll find
things on the network,

00:51:01.390 --> 00:51:03.700
things will go away, our callback fires.

00:51:03.700 --> 00:51:07.490
We're going to be told to add items
to a local caching list or remove

00:51:07.490 --> 00:51:10.100
items from a local caching list.

00:51:10.100 --> 00:51:12.210
And I'll do just that.

00:51:12.940 --> 00:51:19.180
Now, the one thing to note here is this
KCF Net Service More Coming flag.

00:51:19.180 --> 00:51:22.670
This is used to indicate that very
soon after you return from this call,

00:51:22.750 --> 00:51:25.300
you're going to get this call again.

00:51:25.310 --> 00:51:29.640
This is to handle large networks
where you have lots of services on it.

00:51:29.640 --> 00:51:32.590
So instead of having one of those
apps that flickers every time

00:51:32.660 --> 00:51:35.440
something comes in and goes away,
this will help you prevent that.

00:51:35.620 --> 00:51:39.650
So you wait to do the update when
you don't get this flag then.

00:51:39.780 --> 00:51:43.250
So we've got one registered.

00:51:43.320 --> 00:51:45.940
We've got someone out
there finding these things.

00:51:45.940 --> 00:51:48.570
At some point, someone's going to say,
"I want to use that service,"

00:51:48.770 --> 00:51:51.340
like Stuart did in his browser.

00:51:51.760 --> 00:51:54.940
How are they going to connect
to and resolve that thing?

00:51:54.960 --> 00:51:58.640
This is very,
very similar to the registration.

00:51:58.640 --> 00:52:03.340
Instead of performing the register,
we're going to perform a resolve.

00:52:03.340 --> 00:52:07.200
The other thing to note here is
that we're creating the object

00:52:07.320 --> 00:52:09.380
with a zero for the port value.

00:52:09.750 --> 00:52:12.260
The port is not important
when we're resolving.

00:52:12.330 --> 00:52:17.060
We're going to go to the network
and ask it for this thing's address,

00:52:17.060 --> 00:52:20.140
which will have the port in the address.

00:52:20.140 --> 00:52:24.590
So at some point in the future,
that thing is found on the network.

00:52:25.930 --> 00:52:31.380
Our callback fires were going to
be given an address inside of the

00:52:31.380 --> 00:52:34.460
CFNet service that we were looking up.

00:52:34.510 --> 00:52:40.130
Now the thing to note is that this stuff
is inherently multi-homing supported.

00:52:40.230 --> 00:52:44.790
So when we call to get the
address from the Net service,

00:52:44.830 --> 00:52:47.040
we'll get an array of addresses.

00:52:47.080 --> 00:52:50.090
And then the right thing really to do is
go through each one of those addresses,

00:52:50.110 --> 00:52:53.290
trying to find the one that
will eventually connect for you.

00:52:54.140 --> 00:53:00.140
Um, the values or pieces of data that
are inside the array are simply

00:53:00.140 --> 00:53:03.210
SOC adders that are wrapped as CFDatas.

00:53:04.110 --> 00:53:09.310
Had we not gotten a no-error response,
we simply clean up our object,

00:53:09.310 --> 00:53:10.700
toss it away.

00:53:10.700 --> 00:53:13.720
So that is a quick
overview of CFNet services,

00:53:13.810 --> 00:53:14.370
how to use them.

00:53:14.490 --> 00:53:17.500
I invite you to go and look
at the headers in CFNetwork.

00:53:17.750 --> 00:53:23.730
And I would also suggest that
you try getting notes or seeing

00:53:23.730 --> 00:53:30.040
the sessions 805 and 808,
which covers CFNetwork and

00:53:30.040 --> 00:53:30.040
CFRunLoop and CFStreams.

00:53:47.230 --> 00:53:48.860
So what's next for you guys?

00:53:48.970 --> 00:53:52.710
If you're software developers,
use the Jaguar APIs.

00:53:53.000 --> 00:53:58.000
If you're hardware developers,
build ZeroConf into your products so

00:53:58.000 --> 00:54:01.110
that everything can talk to each other.

00:54:01.110 --> 00:54:01.110
And

00:54:01.920 --> 00:54:03.060
This is not just for Macs.

00:54:03.220 --> 00:54:07.850
One of the great things about multicast
DNS is you can write an application

00:54:07.850 --> 00:54:12.530
that sends and receives those packets,
so you're not hostage to the operating

00:54:12.540 --> 00:54:14.400
system vendor providing the support.

00:54:14.410 --> 00:54:18.350
This is not like something like
TCP that's got to be in the operating

00:54:18.350 --> 00:54:20.660
system before you can use it.

00:54:20.670 --> 00:54:23.870
I'd like to invite Bob Bradley to
come up on the stage.

00:54:23.960 --> 00:54:25.990
Bob works on airport.

00:54:25.990 --> 00:54:31.580
Bob has been responsible for the
Windows airport configuration tool

00:54:31.580 --> 00:54:33.890
and a bunch of other airport software.

00:54:34.070 --> 00:54:39.360
So I've just said that you
could make this work on Windows.

00:54:39.360 --> 00:54:43.300
I want to show you that it does.

00:54:47.110 --> 00:54:50.020
So, very quick demo,
but we have multicast

00:54:50.150 --> 00:54:51.940
DNS running on Windows.

00:54:51.990 --> 00:54:55.470
Of course, that means we have multicast
DNS running in the firmware of

00:54:55.560 --> 00:54:57.210
the airport base station as well.

00:54:57.550 --> 00:55:01.540
This is 3,000 lines of very portable C,
so it should be easy for just

00:55:01.580 --> 00:55:03.100
about any hardware vendor.

00:55:03.100 --> 00:55:06.300
If you've got a processor and firmware,
you should be able to fit this in.

00:55:06.340 --> 00:55:07.860
Thank you, Bob.

00:55:18.480 --> 00:55:19.790
Here are some interesting sessions.

00:55:19.840 --> 00:55:22.400
Now, these are all in the past,
but you can get these on DVD.

00:55:22.400 --> 00:55:25.180
If you want to find out
more about networking and

00:55:25.530 --> 00:55:30.300
specifically the CF network APIs,
those sessions are available on DVD.

00:55:34.170 --> 00:55:37.250
If you've got questions,
specifically if you want to

00:55:37.500 --> 00:55:41.770
get the Apple source code,
contact Tom Weyer about that.

00:55:45.510 --> 00:55:49.400
On your preview Jaguar
seed CDs that you have,

00:55:49.480 --> 00:55:54.020
dnsservicesdiscovery.h
is the low level APIs.

00:55:54.050 --> 00:55:59.900
There is also sample code showing how to
use the high level CFNet service APIs.

00:55:59.900 --> 00:56:04.540
For general information about the IETF,
go to the IETF website.

00:56:04.670 --> 00:56:07.570
The IETF is a completely
open organization.

00:56:07.700 --> 00:56:09.210
There are no membership fees.

00:56:09.320 --> 00:56:12.760
If you're interested in Zeroconf,
please sign up for the mailing list,

00:56:13.330 --> 00:56:16.910
participate in the discussions,
because that's how the work gets done.

00:56:16.980 --> 00:56:21.680
If you want to register your own
port number and protocol name,

00:56:21.800 --> 00:56:24.020
go to the IANA website.

00:56:24.020 --> 00:56:27.210
And if you just want to find out
more about how all this stuff works,

00:56:27.210 --> 00:56:33.000
zeroconf.org, multicastdns.org,
and dnsservicesdiscovery, dnssd.org,

00:56:33.040 --> 00:56:35.710
give you information about that.