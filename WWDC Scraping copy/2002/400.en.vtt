WEBVTT

00:00:01.540 --> 00:00:05.400
Please welcome Vice President of
Development Technologies,

00:00:05.400 --> 00:00:08.310
Ted Goldstein.

00:00:12.600 --> 00:00:14.980
So I don't even know if that
was a long enough break for

00:00:15.060 --> 00:00:16.740
people to forget my name.

00:00:16.740 --> 00:00:24.880
So we're going to go through this
pretty quickly because Java on Mac OS X,

00:00:24.880 --> 00:00:25.940
it just works.

00:00:25.940 --> 00:00:26.790
It just works great.

00:00:26.960 --> 00:00:30.900
And I think that really the
questions that came up in between

00:00:30.900 --> 00:00:33.460
the last session and here,
people talk about, well,

00:00:33.460 --> 00:00:35.260
so if you're putting
efforts into Objective-C,

00:00:35.260 --> 00:00:38.720
you're taking efforts away from Java,
maybe you're going to drop Java,

00:00:38.720 --> 00:00:40.170
maybe you're going to drop Objective-C.

00:00:40.250 --> 00:00:45.000
And I think it's important to realize
that Apple is not a small little company,

00:00:45.160 --> 00:00:45.290
right?

00:00:45.350 --> 00:00:48.780
We can do many things and
appeal to many people and really

00:00:48.780 --> 00:00:50.580
have a very rich commitment.

00:00:50.640 --> 00:00:54.380
And I'll talk a little bit about
some signs that you can see

00:00:54.400 --> 00:00:56.740
of Apple's commitment to Java.

00:00:56.840 --> 00:01:00.480
We'll talk, of course,
about Java on Mac OS X and give you kind

00:01:00.480 --> 00:01:07.400
of a roadmap through WWDC of sessions
and a roadmap of where we are going

00:01:07.410 --> 00:01:10.100
with Java and the pathway forward.

00:01:10.180 --> 00:01:12.400
to 1.4.

00:01:12.630 --> 00:01:15.600
So, without further ado,
why Java at Apple?

00:01:15.600 --> 00:01:20.450
Well, Java is Apple's cross-platform
development strategy.

00:01:20.530 --> 00:01:22.740
We think that certainly
in this marketplace,

00:01:22.740 --> 00:01:26.600
many developers need to develop
applications for Macintosh

00:01:26.600 --> 00:01:27.920
and for other platforms.

00:01:28.020 --> 00:01:31.300
And Java fulfills this
function not just well,

00:01:31.420 --> 00:01:32.870
but incredibly well.

00:01:32.990 --> 00:01:36.000
And that's because it has
some fabulous features.

00:01:36.000 --> 00:01:39.130
It's binary portability,
it's reliability because

00:01:39.130 --> 00:01:42.000
it is a well-safed and
semantically checked language,

00:01:42.050 --> 00:01:44.490
which actually helps the
first feature as well.

00:01:44.550 --> 00:01:49.370
The fact is that many machine problems,
many times when you write perhaps

00:01:49.370 --> 00:01:52.150
a C program for one machine
architecture but bring it over

00:01:52.150 --> 00:01:56.080
to another machine architecture,
you find and discover all sorts

00:01:56.080 --> 00:02:00.500
of flaws in how you programmed it
that you were not actually writing

00:02:00.740 --> 00:02:03.000
in a machine-independent way.

00:02:03.000 --> 00:02:08.370
Java is designed from the
beginning so that it is portable,

00:02:08.370 --> 00:02:11.400
it is safe, and it is reliable.

00:02:11.570 --> 00:02:15.030
It is secure when you want to develop
web-based applications or applications

00:02:15.110 --> 00:02:17.900
that are incrementally built,
that load themselves and is

00:02:17.900 --> 00:02:23.500
composed of frameworks and piece
parts from multiple vendors.

00:02:23.500 --> 00:02:25.500
And of course, very importantly,
it is popular.

00:02:25.500 --> 00:02:30.660
There are many feet of books on
Java and there are many other components

00:02:30.660 --> 00:02:35.630
and reusable systems that you can
use to make a great Java system.

00:02:35.840 --> 00:02:39.040
And then again,
Java works great on Mac OS X.

00:02:39.130 --> 00:02:42.660
And you'll see in what we talk about
that there are similarities in the

00:02:42.790 --> 00:02:47.840
fundamental design of the Mac OS X system
and of Java that are inherently similar,

00:02:47.970 --> 00:02:52.330
that have allowed for these two
great environments and great

00:02:52.330 --> 00:02:55.090
platforms to work well together.

00:02:55.550 --> 00:02:58.550
So don't believe just my word for it.

00:02:58.560 --> 00:03:02.470
Hitesh Seth in the
Java Developer Journal writes,

00:03:02.470 --> 00:03:06.990
"There's been a dramatic shift in Apple's
strategy toward Java support in Mac OS,

00:03:06.990 --> 00:03:12.010
and it could jumpstart the deployment
of Java-based applications and services

00:03:12.140 --> 00:03:15.980
on a user-friendly consumer operating
system." We think this is key.

00:03:16.210 --> 00:03:22.810
This marriage of X and Mac OS, really,
we think we're doing a pretty fabulous

00:03:22.810 --> 00:03:25.490
job at enterprise applications.

00:03:25.680 --> 00:03:28.580
Now the frontier is on
shrink-wrapped apps,

00:03:28.610 --> 00:03:30.840
where people are developing
applications that are going

00:03:30.840 --> 00:03:32.190
into the consumer marketplace.

00:03:32.330 --> 00:03:37.780
And I think you'll see some examples
of why we believe that's possible now.

00:03:37.930 --> 00:03:42.590
Peter Coffey, the well-named,
writes in E-Week,

00:03:42.650 --> 00:03:44.680
"Apple has done a tremendous job
of making Java a more efficient

00:03:44.680 --> 00:03:44.680
and more efficient way of
developing and deploying Java.

00:03:44.680 --> 00:03:47.260
And Java code run well,
really well on the Mac,

00:03:47.260 --> 00:03:51.890
supporting such refinements as hardware
graphics acceleration and anti-aliasing

00:03:52.120 --> 00:03:57.130
in a way that's completely transparent to
the programmer." If you think about it,

00:03:57.130 --> 00:04:00.120
it really is our job to
make your lives easy.

00:04:00.370 --> 00:04:04.390
Part of that has got to be that we
take these features of the fabulous

00:04:04.390 --> 00:04:10.570
Quartz graphics engine and the Quartz
system and really use it to the full

00:04:10.700 --> 00:04:14.600
advantage and really to take things
like OpenGL and really make it so that

00:04:14.600 --> 00:04:18.020
these are are simple and easy to use.

00:04:18.710 --> 00:04:20.230
Apple drinks our own Java.

00:04:20.240 --> 00:04:24.690
We use Java ourselves in many,
many systems, actually, not just three,

00:04:24.700 --> 00:04:26.990
but I'm going to talk
only about three today.

00:04:27.000 --> 00:04:30.140
When you go into one of our
beautiful new Apple retail stores,

00:04:30.170 --> 00:04:31.800
take a look at that point-of-sale system.

00:04:31.820 --> 00:04:36.700
That cash register is a Java application.

00:04:36.710 --> 00:04:42.700
In fact,
all of Apple's business runs on Java.

00:04:42.700 --> 00:04:47.400
Apple uses SAP and SAP client
applications written in Java for all

00:04:47.400 --> 00:04:50.850
of our sales automation and order
tracking and really just managing

00:04:50.850 --> 00:04:53.080
the whole inventory and parts pieces.

00:04:53.200 --> 00:04:55.500
And that has been a fabulous
piece of the system.

00:04:55.600 --> 00:04:57.710
So really,
when you buy a Macintosh today,

00:04:57.710 --> 00:05:00.490
some part of that order,
probably most of that order,

00:05:00.510 --> 00:05:03.500
has transited through a
Java application environment.

00:05:03.500 --> 00:05:08.440
And then thirdly, and most recently,
we've introduced off our Mac.com,

00:05:08.440 --> 00:05:10.500
our iTool system, Webmail.

00:05:10.500 --> 00:05:14.500
And that's available and able to
access your Mac.com email account.

00:05:14.500 --> 00:05:16.770
And that uses Java and
WebObject Server that we'll

00:05:16.770 --> 00:05:18.300
be talking more about as well.

00:05:18.300 --> 00:05:21.040
So really,
we've used Java for multiple things,

00:05:21.040 --> 00:05:26.000
not just our own internal applications,
but also in helping us choose what

00:05:26.000 --> 00:05:30.500
applications we want and how we
interact with the rest of the world.

00:05:31.600 --> 00:08:01.600
[Transcript missing]

00:08:02.230 --> 00:08:03.690
Two more features.

00:08:03.770 --> 00:08:07.830
So if you use this,
you also get the ability

00:08:08.000 --> 00:08:10.010
to--you also get JAR caching.

00:08:10.180 --> 00:08:14.300
What that means is that the JAR file,
which represents the applets,

00:08:14.300 --> 00:08:17.950
which is the container for the applet,
is kept on the system and is

00:08:17.950 --> 00:08:20.300
cached and shared across browsers.

00:08:20.470 --> 00:08:22.600
And it also has a new developer console.

00:08:22.750 --> 00:08:23.650
This is a new feature.

00:08:23.830 --> 00:08:29.490
The Java plugin is a new feature for
Jaguar that we encourage people to use.

00:08:30.620 --> 00:08:34.740
On top of all that,
we then do a bunch of optimizations.

00:08:34.910 --> 00:08:37.740
The Acqua look and feel
means that when you use a

00:08:37.740 --> 00:08:41.960
Java application-- How many people,
by the way, saw the WebObjects

00:08:41.960 --> 00:08:43.260
demonstration previously?

00:08:43.260 --> 00:08:44.870
Just before now.

00:08:45.140 --> 00:08:46.500
What that--you know,
you could see that it was

00:08:46.500 --> 00:08:51.160
clearly an Acqua interface,
but it is 100% pure Java application.

00:08:51.300 --> 00:08:54.800
Using JAR files,
a well-formatted JAR file with the

00:08:54.800 --> 00:08:58.500
correct manifest in it will actually
be double-clickable on the platform.

00:08:58.500 --> 00:09:01.500
Just two clicks, you know, bam,
it's up and running.

00:09:01.600 --> 00:09:04.870
And as well,
we support JAR files stored in the

00:09:04.870 --> 00:09:08.740
Mac OS X bundle format for when
you need to ship many resources

00:09:08.740 --> 00:09:11.070
that are more complicated.

00:09:11.450 --> 00:09:15.910
Another very important feature that is,
I think, special about Java on the

00:09:15.910 --> 00:09:18.830
Mac OS X is the sharing technology.

00:09:18.950 --> 00:09:23.250
It essentially is the equivalent
of shared libraries that allow for

00:09:23.380 --> 00:09:29.290
about six or seven megabytes of
the common class file information,

00:09:29.290 --> 00:09:32.420
the Java Foundation classes,
to be shared between one

00:09:32.420 --> 00:09:34.200
Java application and another.

00:09:34.290 --> 00:09:38.230
So this improves responsiveness
means that the incremental overhead

00:09:38.230 --> 00:09:42.200
for additional Java applications
is much less on the Macintosh.

00:09:42.250 --> 00:09:45.570
Although this is a technology
that we've given back to Sun,

00:09:45.570 --> 00:09:49.400
and we hope that Sun will be including
it in other platforms as well,

00:09:49.400 --> 00:09:51.070
it started here first.

00:09:52.700 --> 00:09:56.310
Graphics, of course,
are crucial and critical to how we

00:09:56.310 --> 00:09:58.360
believe people should use the Macintosh.

00:09:58.480 --> 00:10:01.700
So, of course,
we have the Quartz-based Java 2D system

00:10:01.700 --> 00:10:05.900
and Quartz Extreme interfaces,
which really take advantage

00:10:05.900 --> 00:10:07.100
of hardware acceleration.

00:10:07.200 --> 00:10:10.230
But above and beyond that,
we've gone and used

00:10:10.230 --> 00:10:13.000
OpenGL whenever possible,
when you have enough

00:10:13.000 --> 00:10:16.410
video RAM on your box,
to really accelerate everything,

00:10:16.410 --> 00:10:18.360
all the way down to the texture mapping.

00:10:18.360 --> 00:10:22.350
And there are sessions later in the
week that will go into more detail

00:10:22.350 --> 00:10:24.400
about these terrific features.

00:10:24.530 --> 00:10:28.500
So, given this,
what I want to do is invite Alan Samuel,

00:10:28.720 --> 00:10:31.700
our Java evangelist,
up to show a little bit

00:10:31.700 --> 00:10:33.560
about actual applications.

00:10:33.560 --> 00:10:35.800
Because this is not just
about the technologies,

00:10:35.970 --> 00:10:39.060
but also about what people do with
it to create great shrink-wrap apps.

00:10:39.060 --> 00:10:39.720
Alan?

00:10:39.830 --> 00:10:41.490
Thank you, Ted.

00:10:47.090 --> 00:10:49.330
So I'm supposed to be
showing you guys a demo,

00:10:49.710 --> 00:10:50.000
right?

00:10:50.000 --> 00:10:54.000
It looks like I'm doing a
presentation myself here.

00:10:54.120 --> 00:10:56.550
This little application right here,
I don't know... Hey, Alan?

00:10:56.660 --> 00:10:56.760
Yeah?

00:10:56.760 --> 00:10:58.400
That's not right.

00:10:58.400 --> 00:10:59.490
What's not right?

00:10:59.500 --> 00:11:02.760
You're not Minister of Java Evangelion,
you're Chief Minister of Java Evangelion.

00:11:02.760 --> 00:11:05.900
Oh, let me correct that here.

00:11:05.900 --> 00:11:10.300
If you guys take a look and
look at the application here

00:11:10.330 --> 00:11:12.950
that I'm working in here,
this is actually... oh,

00:11:13.030 --> 00:11:13.750
let me spell it right.

00:11:13.780 --> 00:11:14.730
You're the Chef.

00:11:14.770 --> 00:11:16.350
Chef, right?

00:11:16.370 --> 00:11:18.430
How about that?

00:11:18.480 --> 00:11:20.010
This is actually ThinkFree Office.

00:11:20.040 --> 00:11:23.680
ThinkFree Office is an application
written by a Korean developer.

00:11:23.700 --> 00:11:27.740
The idea here is this is a
complete Office compatible suite,

00:11:27.830 --> 00:11:33.240
so it can read and write all of
Microsoft Office file formats.

00:11:33.670 --> 00:11:36.720
Now, the really interesting thing here
is you'll see you've got all the

00:11:36.730 --> 00:11:38.820
correct placement for the menu bars.

00:11:38.820 --> 00:11:42.070
The interface itself is
in the Aqua look and feel,

00:11:42.070 --> 00:11:43.860
so it is a swing application.

00:11:43.890 --> 00:11:45.720
Some of the value that
ThinkFree actually adds,

00:11:45.720 --> 00:11:48.600
beyond what you get today
currently with Microsoft Office,

00:11:48.600 --> 00:11:51.560
is the fact that they actually
localize for several languages that

00:11:51.560 --> 00:11:54.890
you currently don't have available
to you if you were to go out and

00:11:55.010 --> 00:11:58.130
purchase Microsoft Office's products.

00:11:58.280 --> 00:12:00.640
The cool thing here is I just want to
show you that we could actually use a

00:12:00.640 --> 00:12:06.100
100% pure Java application to be able
to do our presentations here today.

00:12:06.100 --> 00:12:09.100
This actual application was not
actually written on our platform.

00:12:09.100 --> 00:12:13.260
It was written somewhere else and
was easily taken over to Mac OS X.

00:12:13.290 --> 00:12:14.360
So this is kind of great.

00:12:14.360 --> 00:12:15.080
This is kind of fun.

00:12:15.080 --> 00:12:15.080
Now I'm showing you some of the
features that we've got here.

00:12:15.080 --> 00:12:17.320
Now I'm showing you some
of the productivity stuff.

00:12:17.320 --> 00:12:20.480
Now let's get down to what
I would really be doing if I was

00:12:20.480 --> 00:12:22.320
up here and having a good time.

00:12:22.320 --> 00:12:24.420
And that would probably
be playing a game.

00:12:24.420 --> 00:12:26.460
Now let me tell you a story
about this particular developer.

00:12:26.460 --> 00:12:31.580
This is actually a Japanese developer,
CyberStep.

00:12:31.580 --> 00:12:37.160
The story about these guys,
I met CyberStep at Java 1 Japan.

00:12:37.160 --> 00:12:39.920
We actually came off the stage.

00:12:39.920 --> 00:12:41.420
I did a presentation there.

00:12:41.420 --> 00:12:44.920
They walked up to me and they showed
me this massive multiplayer game,

00:12:45.010 --> 00:12:48.050
completely written in
Java on a Windows laptop.

00:12:48.110 --> 00:12:49.030
I went, "Hey, that's great.

00:12:49.040 --> 00:12:51.530
What do you guys need to
make this happen?" We sat

00:12:51.530 --> 00:12:52.680
down and we talked with them.

00:12:52.680 --> 00:12:55.270
And the only real specific
technology that they had that was

00:12:55.270 --> 00:12:58.470
outside the Java specifications,
they had written some of their own

00:12:58.470 --> 00:13:01.040
JNI libraries to call out to OpenGL.

00:13:01.060 --> 00:13:03.750
So they had done their
own glue work there.

00:13:03.780 --> 00:13:04.920
So we sat down with them.

00:13:04.920 --> 00:13:07.880
We spent an hour in the
booth at Java 1 Japan.

00:13:07.910 --> 00:13:09.260
And this is what we got.

00:13:09.290 --> 00:13:11.580
I'm going to give you guys a
little example of this here.

00:13:11.580 --> 00:13:14.750
I'm going to go down
to game settings here.

00:13:16.740 --> 00:13:18.240
I'm going to put this on full screen.

00:13:18.240 --> 00:13:23.410
Now remember,
this is a full-blown Java application.

00:13:23.550 --> 00:13:27.040
A lot of cases people don't believe me.

00:13:27.040 --> 00:13:28.090
We'll pick a little character here.

00:13:28.100 --> 00:13:31.100
We'll pick, I don't know,
who should we pick here?

00:13:31.100 --> 00:13:34.180
Let's pick,
we'll go back to this guy here.

00:13:35.900 --> 00:13:40.340
This is an anime-style game,
typical Japanese application here.

00:13:40.340 --> 00:13:43.000
Let's see if I can
play a little bit here.

00:13:49.300 --> 00:13:55.400
[Transcript missing]

00:13:58.910 --> 00:14:01.700
If I could get rid of my gun,
I could go get that head and throw

00:14:01.700 --> 00:14:04.400
that at all the little people here.

00:14:09.000 --> 00:14:11.380
Let me get in here and battle a
little bit and see if I don't get

00:14:11.380 --> 00:14:14.110
beaten up by some of these women.

00:14:16.900 --> 00:14:19.900
The whole point here, I mean,
if we look at this sort of game,

00:14:19.900 --> 00:14:23.300
is that this is the type of
application that you guys can build,

00:14:23.300 --> 00:14:26.900
anybody can build,
with Java and Mac OS X.

00:14:26.900 --> 00:14:30.070
I personally was pretty amazed
when we saw the sort of solutions

00:14:30.070 --> 00:14:31.890
that these guys were developing.

00:14:31.900 --> 00:14:35.590
Just to let you know, the company here,
CyberStep,

00:14:35.590 --> 00:14:38.900
who built this particular game,
actually they're a middleware company.

00:14:38.900 --> 00:14:41.580
They're actually going to be selling
this as an engine that's currently

00:14:41.580 --> 00:14:45.900
in beta for anybody that wants to do
massive multiplayer game development.

00:14:45.900 --> 00:14:49.900
So these are all the types of services
that are available to you guys today,

00:14:49.900 --> 00:14:52.890
the sort of solutions that we
expect to see on the platform.

00:14:52.900 --> 00:14:55.890
Later on, you're actually going to
see some excellent demos.

00:14:55.900 --> 00:15:01.260
I don't want to steal anybody's thunder,
but that's just a look at some of

00:15:01.350 --> 00:15:04.900
the things that you guys are doing,
and keep it coming.

00:15:04.980 --> 00:15:06.990
That's basically what I want to say,
keep coming up with great

00:15:06.990 --> 00:15:07.900
solutions like this.

00:15:07.900 --> 00:15:11.870
Can we go ahead and go back to slides?

00:15:14.400 --> 00:15:23.000
[Transcript missing]

00:15:24.120 --> 00:15:26.060
Oh, it was over there.

00:15:26.060 --> 00:15:26.940
Thank you, Ted.

00:15:26.940 --> 00:15:28.100
I better not throw this.

00:15:31.630 --> 00:15:33.500
Let's talk a little bit about
some of the tools that are

00:15:33.560 --> 00:15:35.210
available on our platform today.

00:15:35.330 --> 00:15:38.040
I'm sure you've seen a lot of sessions
so far covering Project Builder,

00:15:38.040 --> 00:15:41.630
our excellent integrated development IDE,
but let's talk about some of the

00:15:41.630 --> 00:15:45.500
other language-specific IDEs that
are out there and available today.

00:15:45.630 --> 00:15:47.530
One of which I'll mention
right off the gate,

00:15:47.530 --> 00:15:50.440
which is Borland's JBuilder
and their Optimize-It product.

00:15:50.520 --> 00:15:54.270
One of the things that you do have
with Borland if you're interested

00:15:54.270 --> 00:15:58.050
in purchasing the JBuilder product
is we do have a significant discount

00:15:58.050 --> 00:15:59.500
available to all ADC members.

00:15:59.500 --> 00:16:02.750
That's a great benefit of
being a member of our program,

00:16:02.800 --> 00:16:05.500
so you'll be able to
get that at a discount.

00:16:05.500 --> 00:16:09.490
Optimize-It is another excellent
tool that Borland recently acquired.

00:16:09.500 --> 00:16:16.500
IntelliJ's IDE, Sun, NetBeans,
and Forte for Java.

00:16:16.500 --> 00:16:20.500
Also IBM has an Eclipse
IDE that's recently out,

00:16:20.500 --> 00:16:22.470
and of course MetroWorks
Code Warrior for those of you

00:16:22.570 --> 00:16:24.390
that saw the last presentation.

00:16:24.500 --> 00:16:27.500
These are just a host of some of
the solutions that are available.

00:16:27.500 --> 00:16:31.890
We couldn't obviously cover all of
the solutions that are available

00:16:31.890 --> 00:16:35.180
today on Mac OS X and Java,
but with more and more tools out

00:16:35.180 --> 00:16:38.430
there in the Java space actually
being written in Java themselves,

00:16:38.430 --> 00:16:42.500
the story of bringing those folks
over to Mac OS X is much easier.

00:16:42.500 --> 00:16:45.690
I think as more and more
people move to pure Java,

00:16:45.780 --> 00:16:50.450
we're going to get more and more
tools obviously on our platform.

00:16:50.580 --> 00:16:55.330
With that,
I'm going to go ahead and bring up...

00:16:58.110 --> 00:17:00.190
Let me go the other way here.

00:17:00.200 --> 00:17:02.070
I'm going the wrong way.

00:17:04.060 --> 00:17:07.880
I'm going to go ahead and bring up
Devon Poolman of Zero-G Software.

00:17:07.880 --> 00:17:11.710
And Devon is going to give you a
demonstration of Install Anywhere.

00:17:11.870 --> 00:17:16.020
Now, hopefully all of you know that
you do have Install Anywhere

00:17:16.020 --> 00:17:18.950
in the bag and you've had a
chance to sample your chocolate.

00:17:19.050 --> 00:17:23.900
So I think you have
Devon to thank for that.

00:17:29.040 --> 00:17:32.580
Well, today,
Zero-G and Install Anywhere is releasing

00:17:32.680 --> 00:17:34.380
Install Anywhere Mac OS X Edition.

00:17:34.380 --> 00:17:36.720
It's a brand new edition
for Install Anywhere for

00:17:36.720 --> 00:17:38.780
the Install Anywhere family.

00:17:38.780 --> 00:17:43.090
And as Alan mentioned,
you'll find the Cocoa version,

00:17:43.090 --> 00:17:45.280
we call it, in your bags.

00:17:45.280 --> 00:17:48.080
And if you are not a attendee,
maybe an exhibitor,

00:17:48.080 --> 00:17:50.170
please feel free to drop by our booth.

00:17:50.170 --> 00:17:52.980
We do have some extras.

00:17:52.980 --> 00:17:55.320
But Mac OS X Edition is
very important to Zero-G,

00:17:55.320 --> 00:17:58.620
and I think it's important to
developers for two reasons.

00:17:58.680 --> 00:18:02.760
One is, well,
it's generally a perfect fit.

00:18:02.760 --> 00:18:05.520
It's Install Anywhere in Mac OS X.

00:18:05.700 --> 00:18:07.350
Mac OS X backend is Unix.

00:18:07.350 --> 00:18:10.860
Install Anywhere has been
doing Unix development,

00:18:10.860 --> 00:18:14.160
Unix installations for
over five years now.

00:18:14.240 --> 00:18:17.150
On top of that,
Install Anywhere is built on Java.

00:18:17.150 --> 00:18:22.440
Java being a virtually native
API on Mac OS X makes it very easy

00:18:22.440 --> 00:18:25.680
to run and operate on Mac OS X.

00:18:25.700 --> 00:18:26.910
I'm gonna go ahead and start off here.

00:18:27.030 --> 00:18:29.590
By showing how easy it is to
work with Install Anywhere,

00:18:29.590 --> 00:18:33.860
we're gonna start with installing a
demo application called Office Suite.

00:18:33.870 --> 00:18:36.490
Now,
this application is a Java application,

00:18:36.510 --> 00:18:40.470
but Install Anywhere is equally capable
for deploying your Cocoa application,

00:18:40.470 --> 00:18:43.810
your Carbon application,
whatever you need to do.

00:18:43.900 --> 00:18:45.640
So here's the basic designer.

00:18:45.730 --> 00:18:49.700
In adding files to Install Anywhere,
it's as simple as just dragging

00:18:49.700 --> 00:18:52.560
and dropping into our designer.

00:18:52.560 --> 00:18:55.320
And we have kind of a what you
see is what you get layout.

00:18:55.320 --> 00:18:56.650
We can move stuff around.

00:18:56.650 --> 00:19:00.160
And this shows you exactly
what's going to be installed.

00:19:00.190 --> 00:19:02.360
Additionally,
as this is a Java application,

00:19:02.370 --> 00:19:06.070
we can look at some of the Java-specific
features in Install Anywhere,

00:19:06.070 --> 00:19:09.010
such as automatically
setting the class path.

00:19:10.110 --> 00:19:12.320
and creating a launcher
for our application.

00:19:12.460 --> 00:19:14.080
In this case,
it's even going to automatically

00:19:14.080 --> 00:19:16.240
search our main classes.

00:19:16.330 --> 00:19:18.790
And it'll pop up here,
and we'll see Office Suite,

00:19:18.890 --> 00:19:21.000
which is my application.

00:19:21.490 --> 00:19:26.040
and I'm even going to add an icon
for this particular application.

00:19:26.040 --> 00:19:28.110
Go ahead and select that.

00:19:30.200 --> 00:19:32.290
and that's how we just add our files,
very simply.

00:19:32.380 --> 00:19:34.840
And customizing our install
is also very simple.

00:19:34.930 --> 00:19:36.060
We have our pre-install steps.

00:19:36.100 --> 00:19:38.900
You can see our important note,
our introduction.

00:19:38.970 --> 00:19:40.540
And we can also control
the look and feel,

00:19:40.540 --> 00:19:43.340
which is very important
for Mac OS X developers.

00:19:43.340 --> 00:19:45.860
We can control and view the look
and feel inside of our project.

00:19:46.040 --> 00:19:48.300
So I'm going to select a
different background image.

00:19:48.360 --> 00:19:50.320
It's fully skinnable.

00:19:53.820 --> 00:19:56.780
and we can even preview
directly inside of the designer,

00:19:56.820 --> 00:19:59.520
see what your installer
is going to look like.

00:20:00.300 --> 00:20:02.220
From that point,
all I need to do is click Build,

00:20:02.220 --> 00:20:06.340
and it's going to go ahead and build,
in this case, a web installer.

00:20:06.360 --> 00:20:08.640
Got one precooked right here.

00:20:09.150 --> 00:20:13.890
And the web installer includes
not just your downloadable,

00:20:14.110 --> 00:20:18.260
executable installer,
but also a nice web page in Java applet

00:20:18.300 --> 00:20:22.260
that makes it easy for your end users
to download and run the installer.

00:20:22.360 --> 00:20:24.650
All you need to do is
click on the button.

00:20:24.860 --> 00:20:28.080
The applet will run, download,
and launch the installer.

00:20:28.120 --> 00:20:31.390
And now here we have the
installer that we created.

00:20:31.590 --> 00:20:34.240
We're localized to 29
different languages.

00:20:34.350 --> 00:20:36.130
And as we click through,
you'll see we have the

00:20:36.130 --> 00:20:37.760
nice Aqua look and feel.

00:20:37.850 --> 00:20:40.600
Thanks to Java, it comes very easy to us.

00:20:41.570 --> 00:20:44.360
Here we get to see the basic installer.

00:20:44.430 --> 00:20:47.290
As it walks us through,
you can see the steps we take.

00:20:47.320 --> 00:20:50.100
The readme we have here
has full HTML support,

00:20:50.100 --> 00:20:52.720
including links that actually pop out.

00:20:52.800 --> 00:20:53.800
We'll continue to click through.

00:20:53.800 --> 00:20:55.100
We'll install this application.

00:20:55.100 --> 00:20:57.920
And here's one of the features
that's unique to Install Anywhere,

00:20:58.040 --> 00:21:01.200
which is the ability to install
our alias directly to the dock.

00:21:01.310 --> 00:21:04.100
So we'll see that as we
go through installation.

00:21:04.180 --> 00:21:07.830
Click Install, and once again you'll see
our nice Aqua progress bar.

00:21:07.940 --> 00:21:12.310
And here's our new shortcut,
our new alias.

00:21:12.310 --> 00:21:12.310
Excuse me.

00:21:15.810 --> 00:21:18.940
Now that our application is installed,
mind you this was a Java application,

00:21:18.940 --> 00:21:21.240
we created a native launcher for it.

00:21:21.270 --> 00:21:23.760
You click and we'll see here's
our Office Suite application

00:21:23.760 --> 00:21:25.960
1.0 and that's it.

00:21:27.680 --> 00:21:30.600
Now, that's client installers
for Install Anywhere,

00:21:30.720 --> 00:21:34.920
but Install Anywhere is equally
capable of building installers

00:21:34.920 --> 00:21:38.590
for your client applications,
but also your server applications.

00:21:38.650 --> 00:21:42.880
And some of the new features in this
latest release make it very easy

00:21:42.880 --> 00:21:45.600
to do your server-side deployment.

00:21:45.600 --> 00:21:49.420
One of the features specific to
Install Anywhere 5 that's brand new

00:21:49.430 --> 00:21:53.850
and great for server-side deployment
is Merge Module technology that

00:21:53.850 --> 00:21:56.600
allows you to OEM your installers,
to build suite installers.

00:21:56.600 --> 00:22:00.120
And in this case,
it allows us to pull in a component that

00:22:00.120 --> 00:22:02.600
is going to be part of our installer.

00:22:02.600 --> 00:22:07.400
In this example,
what I want to do is I want to

00:22:07.670 --> 00:22:12.610
I want to go ahead and build a
web application and deploy it,

00:22:12.900 --> 00:22:15.540
but I want to deploy it on Tomcat.

00:22:15.540 --> 00:22:19.640
And all I need to do is
import a Tomcat merge module.

00:22:19.640 --> 00:22:23.400
And a merge module is just a
self-contained installer component.

00:22:24.310 --> 00:22:27.540
I go ahead and select the Merge module,
in this case the Tomcat.

00:22:27.570 --> 00:22:29.530
It's going to load in
all those resources,

00:22:29.530 --> 00:22:34.090
ask me where I want to put them,
and I can load all sorts of different

00:22:34.950 --> 00:22:38.570
And just by doing that,
what it's done is it's populated all the

00:22:38.580 --> 00:22:41.570
Tomcat files and resources necessary,
all the information it

00:22:41.570 --> 00:22:43.000
needs to install Tomcat.

00:22:43.140 --> 00:22:47.200
All I need to do is just drag and drop
my WAR file into the web apps directory,

00:22:47.380 --> 00:22:49.760
build my installer, and I'm done.

00:22:49.870 --> 00:22:53.140
So that's Install Anywhere:
Building Client and Server Installers.

00:22:53.250 --> 00:22:53.740
Great tool.

00:22:53.740 --> 00:22:56.030
I hope you guys find it useful.

00:22:56.040 --> 00:22:58.550
If you have questions,
please feel free to come by our booth.

00:22:58.560 --> 00:22:59.990
We're in the exhibitors hall.

00:23:00.090 --> 00:23:01.830
And that's about it.

00:23:01.950 --> 00:23:03.060
Thank you very much, Deven.

00:23:03.060 --> 00:23:04.760
Thank you, Alan.

00:23:09.440 --> 00:23:14.380
So, sort of in the cavalcade of tools,
the next tool I want to bring up is

00:23:14.380 --> 00:23:16.830
Techadance with their new Magic product.

00:23:16.860 --> 00:23:20.810
I want to bring up Pete Deemer,
their CEO.

00:23:21.130 --> 00:23:24.110
Sort of similar to some
of the other stories,

00:23:24.250 --> 00:23:28.220
I met these guys when I was
at Java 1 in San Francisco,

00:23:28.220 --> 00:23:32.450
literally walking by the
booth and saw the product.

00:23:32.450 --> 00:23:38.510
And unfortunately at that time it
wasn't actually running on our platform,

00:23:38.510 --> 00:23:42.820
but after a loan of a CPU and,
I don't know, a day or so,

00:23:42.820 --> 00:23:43.750
I'm sure you'll tell the story, Pete,
we had it on Mac OS X.

00:23:43.750 --> 00:23:43.750
So I'll go ahead and turn it over to you.

00:23:44.080 --> 00:23:44.700
Great.

00:23:44.820 --> 00:23:48.760
Well,
Tekadence Magic is a new visual authoring

00:23:48.760 --> 00:23:51.740
tool for building Java software.

00:23:51.850 --> 00:23:56.220
As we see it, Java is sort of like a
100-story skyscraper.

00:23:56.380 --> 00:24:00.510
The entrance is three stories up,
above ground level.

00:24:00.510 --> 00:24:05.340
And unfortunately, that works to the
benefit of less powerful,

00:24:05.340 --> 00:24:09.030
non-portable environments
like Visual Basic.

00:24:09.230 --> 00:24:14.430
And we created Tech-at-its-Magic to
directly address this market need,

00:24:14.430 --> 00:24:19.600
which is for an accessible,
easy-to-use tool for building 100%

00:24:19.670 --> 00:24:25.820
pure Java applications with the
portability and power that Java offers.

00:24:25.950 --> 00:24:28.300
So,
for a little bit more on our technology,

00:24:28.300 --> 00:24:31.070
I'm going to turn it over to Sean Allen,
our CTO.

00:24:31.170 --> 00:24:33.160
Hi there.

00:24:33.160 --> 00:24:33.160
Thanks, Pete.

00:24:33.750 --> 00:24:36.580
Prior to co-founding TechAdents,
I actually worked at

00:24:36.760 --> 00:24:40.590
Apple Computer for about 10 years,
becoming a QuickTime engineer,

00:24:40.590 --> 00:24:41.540
which was fun.

00:24:41.540 --> 00:24:46.540
Added some of the Wired Movies
technology to QuickTime.

00:24:46.540 --> 00:24:49.150
About two years ago,
I got together with Jared Kaplan

00:24:49.150 --> 00:24:53.400
and Matthew Peterson out here to
try to apply our experience with

00:24:53.400 --> 00:24:59.310
runtime engines and authoring tools
to create a solution to make creating

00:24:59.420 --> 00:25:02.240
software easier for everyone.

00:25:02.240 --> 00:25:06.280
The result of this effort
was TechAdents Magic.

00:25:06.280 --> 00:25:09.930
And Magic's basically based on standards.

00:25:10.270 --> 00:25:12.070
Our file format is XML.

00:25:12.090 --> 00:25:15.710
A runtime engine basically
builds a live object model out

00:25:15.710 --> 00:25:18.790
of precompiled Java objects,
which you kind of wire

00:25:18.790 --> 00:25:20.310
together with JavaScript.

00:25:20.310 --> 00:25:22.390
But the output is a
pure Java application.

00:25:22.390 --> 00:25:25.600
Magic itself is a pure Java application.

00:25:25.610 --> 00:25:27.980
Magic's sort of like a modern hypercard.

00:25:27.980 --> 00:25:33.340
In a way, it enables non-technical users
to create applications without

00:25:33.340 --> 00:25:35.930
a lot of scripting knowledge.

00:25:35.960 --> 00:25:40.860
But we also think that Magic's
really nice to use alongside an IDE.

00:25:40.860 --> 00:25:45.340
So you can do some source code
level coding in the IDE and then

00:25:45.340 --> 00:25:49.930
combine it with what you build in
Magic to create things quickly.

00:25:51.250 --> 00:25:53.780
We really like Magic on Mac OS X.

00:25:53.780 --> 00:25:59.560
It can take advantage of QuickTime,
Java Web Start, and other things like

00:25:59.560 --> 00:26:00.700
the Aqua look and feel.

00:26:00.730 --> 00:26:04.890
And also the tools
provided with Mac OS X,

00:26:04.900 --> 00:26:07.890
creating content such as iMovie, iTunes,
and iPhoto,

00:26:07.890 --> 00:26:09.730
work really nicely with Magic.

00:26:09.870 --> 00:26:12.090
So I'm going to turn it
over to Jared Kaplan,

00:26:12.160 --> 00:26:16.220
who's going to talk
about how it got to OS X.

00:26:16.270 --> 00:26:18.180
Jared Kaplan:
Our first attempt at porting Magic to

00:26:18.310 --> 00:26:22.270
OS X came after we released the
Windows beta version of our software.

00:26:22.360 --> 00:26:25.700
And what actually happened was that a
few of our users took it upon themselves

00:26:25.790 --> 00:26:29.000
to just copy the jars over from their
Windows machine onto their Macs.

00:26:29.160 --> 00:26:31.530
And of course, we tried it,
and we were like, you know, wow,

00:26:31.530 --> 00:26:32.980
it actually works just like that.

00:26:32.980 --> 00:26:36.820
And the amazing thing is that
Magic's a pretty big application.

00:26:36.840 --> 00:26:39.160
It's about 800 class files.

00:26:39.210 --> 00:26:41.920
And it took us about two years
to develop the PC version.

00:26:41.970 --> 00:26:45.440
And less than a week, we actually got a
complete Mac version done.

00:26:45.440 --> 00:26:46.760
And I think that's really important.

00:26:50.900 --> 00:26:54.140
I think that's really important
because that really shows how quickly

00:26:54.140 --> 00:26:59.600
that you can port a Java application
and how easy it is to do.

00:27:00.050 --> 00:27:06.410
Great, so let's build a Java application
using Teknins Magic for OS X.

00:27:06.410 --> 00:27:09.720
This is the Magic object browser,
and right now our application

00:27:09.720 --> 00:27:11.340
just has a single object in it.

00:27:11.340 --> 00:27:14.880
It's a window, and these are the
properties of that object.

00:27:14.890 --> 00:27:18.540
Let's go into the visual editor just
by double-clicking on the window.

00:27:18.590 --> 00:27:21.320
And I'm going to bring up a
scrapbook of pre-built objects.

00:27:21.330 --> 00:27:25.440
We supply 80-plus objects across all
of these different categories to get

00:27:25.610 --> 00:27:27.650
you started with your development.

00:27:27.760 --> 00:27:31.240
Let's bring up our
scrapbook of UI objects,

00:27:31.510 --> 00:27:37.200
and let's bring in a -- start
with a tab pane container.

00:27:37.200 --> 00:27:43.900
And let's drag in a couple tab panes.

00:27:43.900 --> 00:27:43.900
And let's drag in a couple of tab panes.

00:27:46.560 --> 00:27:53.090
and let's bring in a slider
and a couple buttons.

00:27:55.630 --> 00:27:58.900
Now, with Magic,
you're not constrained to working

00:27:59.030 --> 00:28:01.180
with our collection of objects.

00:28:01.180 --> 00:28:03.690
You can very easily
import external objects.

00:28:03.770 --> 00:28:07.340
For example,
let's bring in a QuickTime movie.

00:28:07.340 --> 00:28:10.790
We're just going to drag
and drop it straight into...

00:28:11.260 --> 00:28:13.200
Manage the drag and drop here.

00:28:13.200 --> 00:28:15.960
We're going to drag and drop it
straight into our visual editor,

00:28:15.960 --> 00:28:19.500
and it recognizes it
as a QuickTime movie.

00:28:19.600 --> 00:28:21.700
And one of the really neat
things about Magic is we're

00:28:21.820 --> 00:28:24.100
building a live application here.

00:28:24.100 --> 00:28:27.000
We're working with
pre-compiled Java objects.

00:28:27.110 --> 00:28:30.280
What this means is that there's
no compile step necessary.

00:28:30.380 --> 00:28:32.500
At any time,
we can see our application running live

00:28:32.500 --> 00:28:34.350
just by clicking on our preview tool.

00:28:34.440 --> 00:28:38.200
The video runs and the
UI is fully functional.

00:28:38.280 --> 00:28:41.440
And while we're working
in this visual editor,

00:28:41.500 --> 00:28:45.500
we're also constructing a hierarchy
of objects in the object browser.

00:28:45.500 --> 00:28:49.770
And we can actually go in directly
and edit any of those properties.

00:28:49.860 --> 00:28:52.410
We're actually going to build a little...

00:28:56.100 --> 00:30:27.800
[Transcript missing]

00:30:28.980 --> 00:30:33.610
and we support not simply
standalone objects,

00:30:33.610 --> 00:30:36.180
but we also have something
called compound objects.

00:30:36.210 --> 00:30:40.640
And compound objects are combinations
of objects that you encapsulate

00:30:40.990 --> 00:30:44.740
into packages and can reuse
or exchange with other users.

00:30:44.850 --> 00:30:48.260
So in this case,
I'm going to drag and drop a compound

00:30:48.260 --> 00:30:52.100
object that does a couple of different
things onto our flash graphic.

00:30:52.100 --> 00:30:53.830
You'll see it present there.

00:30:53.910 --> 00:30:58.350
I'm also going to put a drag modifier
on our video window and a drag

00:30:58.350 --> 00:31:01.680
modifier on our flash graphic so
that those will now be draggable.

00:31:01.680 --> 00:31:03.600
So let's go into the preview tool.

00:31:03.670 --> 00:31:05.680
And we have the scrub control.

00:31:05.680 --> 00:31:09.490
We see our flash graphic animating
and the alpha level changing.

00:31:09.570 --> 00:31:12.480
And we can click and drag.

00:31:12.680 --> 00:31:14.720
We also have a little sound there.

00:31:14.720 --> 00:31:17.820
So,
now this is part of a cool application,

00:31:17.830 --> 00:31:21.000
but I think we need
something a little extra.

00:31:21.080 --> 00:31:24.910
And we're going to do that with the
third major type of external object

00:31:24.910 --> 00:31:29.100
that you can import into Magic,
and that's Java code.

00:31:29.230 --> 00:31:31.700
So let's say we have a jar file.

00:31:31.700 --> 00:31:36.330
This is just a simple
text-to-speech synthesizer.

00:31:36.390 --> 00:31:38.680
We're going to just drag and
drop that jar straight in.

00:31:38.790 --> 00:31:40.880
We're going to import it as a Java class.

00:31:40.880 --> 00:31:48.050
And I'm actually going to define
the class that we want to expose.

00:31:48.120 --> 00:31:50.160
And the speech class has two methods.

00:31:50.160 --> 00:31:53.640
We use reflection to expose those.

00:31:53.640 --> 00:31:59.540
And now I'm just simply going to drag and
drop a text field into my tab pane there.

00:31:59.540 --> 00:32:04.970
And I'm going to patch the text
value property from the text field

00:32:05.040 --> 00:32:09.540
to the say method of that Java class.

00:32:09.540 --> 00:32:10.840
So, this is our application.

00:32:10.840 --> 00:32:16.400
Now let's publish it and run it
as a standalone Java jar file.

00:32:16.400 --> 00:32:17.650
We just choose publish.

00:32:17.900 --> 00:32:21.960
Right now we support Java Web Start,
Java applications.

00:32:22.040 --> 00:32:25.050
Shortly we're going to be offering
Java source code generation,

00:32:25.050 --> 00:32:27.750
as well as a couple
of other enhancements.

00:32:27.840 --> 00:32:32.820
So, a whole range of different
destinations that you can publish to.

00:32:32.940 --> 00:32:36.600
Today, though, we're going to publish to
just the standalone jar file.

00:32:36.600 --> 00:32:36.610
And we'll call this experience WWDC.

00:32:36.610 --> 00:32:38.600
And we're going to call this
the Java source code generation.

00:32:38.600 --> 00:32:38.840
And we're going to call
this experience WWDC.

00:32:38.840 --> 00:32:39.310
And we're going to call this
the Java source code generation.

00:32:39.310 --> 00:32:39.840
And we're going to call
this experience WWDC.

00:32:39.840 --> 00:32:43.340
And let's hit OK.

00:32:43.340 --> 00:32:47.320
And while we're publishing,
I did want to mention this

00:32:47.340 --> 00:32:50.770
is the Mac OS X version is
available from our website,

00:32:50.770 --> 00:32:52.420
which is techadence.com.

00:32:52.430 --> 00:32:54.880
And it's a 90-day free trial.

00:32:54.900 --> 00:33:00.400
And it just works great on OS X.

00:33:00.530 --> 00:33:06.140
So let's, let's go and pull up that jar
file that we just generated and

00:33:06.140 --> 00:33:08.500
take a look at our application.

00:33:09.740 --> 00:33:10.550
and here it is.

00:33:10.620 --> 00:33:16.180
We have our scrub control and
the draggable video and our nifty

00:33:16.520 --> 00:33:19.030
beat loop and animating graphic.

00:33:19.030 --> 00:33:27.320
And now let's go take a look
at that Java code we inserted.

00:33:27.320 --> 00:33:27.320
Download your copy to

00:33:27.360 --> 00:33:37.060
and David Koehn.

00:33:37.060 --> 00:33:38.240
Thank you for your attention today.

00:33:38.240 --> 00:33:38.240
And give it a try.

00:33:42.400 --> 00:33:45.240
I want to thank both Zero-G and
Techadance for showing us

00:33:45.240 --> 00:33:48.360
some really great stuff.

00:33:48.400 --> 00:33:52.440
With that, I'm going to go ahead and
bring up Ted Goldstein.

00:33:55.340 --> 00:34:00.280
So, Alan, how can people learn
more about Techadence,

00:34:00.460 --> 00:34:04.190
the website,
and are they here at the show, too?

00:34:04.700 --> 00:34:06.900
but it's techadence.com.

00:34:06.900 --> 00:34:11.720
They'll be up front after the session's
over if anybody wants to talk to them.

00:34:11.760 --> 00:34:14.240
And Zero-G will also be up here, too.

00:34:14.240 --> 00:34:14.730
Great.

00:34:14.740 --> 00:34:15.690
Thank you.

00:34:15.740 --> 00:34:21.040
So let's talk about what
do we do on top of 1.3.1.

00:34:21.040 --> 00:34:23.840
Well, you saw QuickTime being used.

00:34:23.840 --> 00:34:25.560
It's using the QuickTime for
Java interface.

00:34:25.560 --> 00:34:30.720
We have these terrific
Apple technologies that synergize

00:34:30.760 --> 00:34:34.040
very nicely with the Java interfaces.

00:34:34.700 --> 00:34:39.050
Although we didn't show it today,
there is the project

00:34:39.050 --> 00:34:42.400
builder user interface,
excuse me, programming environment,

00:34:42.400 --> 00:34:44.210
interactive development environment.

00:34:44.220 --> 00:34:49.260
We have provided a bridge to
our Cocoa and Objective-C world,

00:34:49.260 --> 00:34:52.620
which allows you to leverage the
Cocoa and core services frameworks.

00:34:52.690 --> 00:34:57.480
From Sun, we've packaged some very
important 1.4 features,

00:34:57.480 --> 00:35:01.080
because we can,
and include them as part of the 1.3.1

00:35:01.080 --> 00:35:03.080
package until we have 1.4 available.

00:35:03.080 --> 00:35:05.220
And that includes things like Java,
WebStart,

00:35:05.310 --> 00:35:07.520
and the Java Secure Sockets extension.

00:35:07.520 --> 00:35:12.360
These features,
they work fine in the 1.3.1 environment.

00:35:12.360 --> 00:35:15.960
In the WebStart case,
they allow you to build double-clickable

00:35:15.960 --> 00:35:17.580
web-based applications as well.

00:35:17.600 --> 00:35:23.400
And altogether,
I think we've done a very good job of

00:35:23.420 --> 00:35:29.000
just making the small things work and
feel really just terrific together.

00:35:30.730 --> 00:35:35.400
On the server side,
we have two very important stories.

00:35:35.400 --> 00:35:39.540
There's Apache Tomcat that's included
in the Mac OS X server platform.

00:35:39.610 --> 00:35:46.640
And it, of course, is a Java application
environment for JSPs.

00:35:46.750 --> 00:35:51.990
We ship our virtual machine tuned
for server applications on the

00:35:52.020 --> 00:35:55.670
server in the Jaguar release.

00:35:55.810 --> 00:35:58.990
The, uh, uh, uh,
but we've taken a very different stance.

00:35:59.000 --> 00:36:02.200
We haven't developed our own J2EE server.

00:36:02.300 --> 00:36:07.540
And that's because what we find is so
many other J2EE app servers come to

00:36:07.540 --> 00:36:09.700
the platform and work extremely well.

00:36:09.860 --> 00:36:15.700
So, that includes Primati and Lutris, uh,
JBoss and Orion, and Trifork.

00:36:15.700 --> 00:36:18.700
The story behind Trifork is yet
another one of these Java 1 stories

00:36:18.700 --> 00:36:22.680
where we were walking the halls,
we found a new guy, we said, "Hi,

00:36:22.710 --> 00:36:25.680
why don't you come on and, and,
and port over?" And they said, "What,

00:36:25.790 --> 00:36:29.700
you mean right now?" I said,
"Now's okay." Um, and within an hour,

00:36:29.700 --> 00:36:31.700
right, it was about two hours
before my Java 1 talk,

00:36:31.700 --> 00:36:34.700
uh, within an hour,
they were up and running.

00:36:34.700 --> 00:36:36.850
They had ported, uh,
they had a little bit

00:36:36.860 --> 00:36:39.690
of JNI code as well for,
for their I/O acceleration.

00:36:39.720 --> 00:36:43.970
The, the, uh, the Java lines of code,
I think, changed one path name, and,

00:36:43.970 --> 00:36:45.700
and bam, they were up and running.

00:36:45.700 --> 00:36:49.700
Um, we think this is a truly tremendous
facet about the platform.

00:36:49.700 --> 00:36:53.700
And I think you'll see more J2EE app
servers coming to the platform as well.

00:36:53.700 --> 00:36:55.700
It's a very rich environment.

00:36:55.700 --> 00:36:58.700
It's one that, uh, that, uh, we think is,
is extremely healthy.

00:36:58.700 --> 00:37:03.690
And, and, um, uh, the comments, uh, I,
I think, I think you'll, you'll,

00:37:03.720 --> 00:37:06.700
you'll be very pleased with
any of these J2EE servers.

00:37:06.700 --> 00:37:10.640
Now, Apple has its own WebObjects
application server.

00:37:10.700 --> 00:37:13.730
And this is a technology that has,
was originally developed at

00:37:13.730 --> 00:37:15.700
Next and comes down to us,
uh, today,

00:37:15.700 --> 00:37:18.670
and is now written in 100% pure Java.

00:37:18.760 --> 00:37:22.700
And we think of it as really combining
the best features of both Java and J2EE.

00:37:22.700 --> 00:37:28.470
And, uh, uh, some of the,
the previous work done, uh, before.

00:37:28.740 --> 00:37:31.580
And with that, to tell you more about it,
I want to invite, uh,

00:37:31.580 --> 00:37:32.700
Toni Trujillo-Villan.

00:37:32.700 --> 00:37:35.700
Toni is, uh,
our director of WebObjects engineering,

00:37:35.700 --> 00:37:37.640
and she'll give us a,
a tour of WebObjects.

00:37:37.700 --> 00:37:39.820
Toni Trujillo-Villan: Thank you.

00:37:45.300 --> 00:37:46.960
Thank you, Ted.

00:37:46.960 --> 00:37:49.030
So what is WebObjects?

00:37:49.080 --> 00:37:52.300
Well, in addition to being
Apple's best kept secret,

00:37:52.430 --> 00:37:55.520
WebObjects delivers everything
that you need to create a

00:37:55.520 --> 00:37:57.800
complete three-tier application.

00:37:57.920 --> 00:38:01.800
That includes an IDE,
a database mapping tool,

00:38:01.880 --> 00:38:05.210
and page layout and GUI design
tools to help you create your

00:38:05.210 --> 00:38:07.300
application's user interface.

00:38:07.350 --> 00:38:09.640
WebObjects' powerful
combination of tools,

00:38:09.870 --> 00:38:13.330
frameworks,
and rapid design technologies drastically

00:38:13.400 --> 00:38:16.450
decrease the complexity to develop,
deploy,

00:38:16.450 --> 00:38:19.480
and extend your Java server application.

00:38:19.570 --> 00:38:23.010
The key payoff for you is that WebObjects
does a lot of the work for you,

00:38:23.200 --> 00:38:25.170
so you end up writing a lot less code.

00:38:25.330 --> 00:38:27.940
And writing a lot less
code means less testing,

00:38:28.050 --> 00:38:30.860
maintenance, and support down the road.

00:38:33.780 --> 00:38:36.690
Enterprise Object Frameworks,
more commonly known as EOF,

00:38:36.730 --> 00:38:39.700
is really the crown jewel of web objects.

00:38:39.770 --> 00:38:43.700
EOF basically takes care of all
your connectivity needs for you.

00:38:43.710 --> 00:38:48.200
The key feature of EOF is the ability
to do object relational mapping.

00:38:48.340 --> 00:38:50.700
So what is object relational mapping?

00:38:50.700 --> 00:38:54.690
Basically, it's the concept of taking raw
data from your relational database

00:38:54.780 --> 00:38:56.700
and mapping it into objects.

00:38:56.750 --> 00:39:00.900
Then EOF transparently syncs up
the data from your data source with

00:39:01.220 --> 00:39:03.700
the objects in your application.

00:39:03.700 --> 00:39:06.910
Then using some
object-oriented programming,

00:39:07.150 --> 00:39:10.690
you can integrate your business logic.

00:39:10.760 --> 00:39:14.380
and you can do things like consistency
checking and database val- excuse me,

00:39:14.500 --> 00:39:16.240
data validation.

00:39:16.280 --> 00:39:20.190
The beauty of all this is you never
have to write a single line of SQL.

00:39:20.310 --> 00:39:23.680
EOF will take care of
all the calls for you.

00:39:25.550 --> 00:39:28.940
On top of EOF,
we include additional tools and

00:39:29.090 --> 00:39:32.940
frameworks that will help you
rapidly develop your application.

00:39:33.140 --> 00:39:37.430
Using rule-based programming,
you can create a complete WebObjects

00:39:37.510 --> 00:39:39.840
application based on your data model.

00:39:39.900 --> 00:39:44.300
And then you can tweak your
application's user interface and

00:39:44.300 --> 00:39:47.810
the way your application behaves
by simply adding a couple new

00:39:47.810 --> 00:39:52.500
rules or modifying existing rules,
instead of writing any code.

00:39:54.190 --> 00:39:58.620
We ship three distinctive rule-based
programming technologies with

00:39:58.620 --> 00:40:03.390
WebObjects that support the
most common application types.

00:40:03.500 --> 00:40:07.260
The first one is Direct-to-Web,
which is used to create

00:40:07.260 --> 00:40:09.330
HTML applications.

00:40:09.450 --> 00:40:11.440
The second one is a new
feature that we're working on

00:40:11.440 --> 00:40:12.700
called Direct-to-Web Services.

00:40:12.700 --> 00:40:15.000
And for those of you that were here
at the session prior to this one,

00:40:15.000 --> 00:40:16.640
you saw an example of that.

00:40:16.780 --> 00:40:20.380
Direct-to-Web Services is used
to automate the creation of web

00:40:20.380 --> 00:40:22.590
service based on your data model.

00:40:22.700 --> 00:40:25.360
The third technology is
called Direct-to-Java Client,

00:40:25.470 --> 00:40:28.940
and it's used to create rich,
platform-independent desktop

00:40:28.940 --> 00:40:31.100
applications based on Swing.

00:40:31.260 --> 00:40:34.450
And Direct-to-Java Client is used
in a three-tier architecture,

00:40:34.720 --> 00:40:37.990
but we've been working to extend this
technology to a two-tier architecture,

00:40:38.010 --> 00:40:40.000
something we think that
you'll really like.

00:40:40.130 --> 00:40:42.850
So with that,
I'd like to invite Andreas Wendker,

00:40:43.030 --> 00:40:45.680
the manager of the
Rapid Development Engineering team,

00:40:45.700 --> 00:40:47.840
up to give you a demo.

00:40:48.690 --> 00:40:49.710
Thank you, Toni.

00:40:52.000 --> 00:40:54.220
So for this presentation,
I'm going to use the alpha

00:40:54.280 --> 00:40:56.980
version of the Next Web Objects
release we are planning to ship,

00:40:56.980 --> 00:41:00.100
and I'm going to use a database
that stores real estate data.

00:41:00.190 --> 00:41:03.740
You can actually see the most important
tables of this database on the screen

00:41:03.740 --> 00:41:05.860
right now in our database modeling tool.

00:41:05.950 --> 00:41:10.900
And as you can see,
there are tables that store information

00:41:11.360 --> 00:41:15.000
about persons in different roles,
like agents and customers.

00:41:15.110 --> 00:41:18.050
There's a table for listing
properties with the number of

00:41:18.050 --> 00:41:20.000
bedrooms and bathrooms and prices.

00:41:20.080 --> 00:41:24.000
And there are tables for addresses,
features, and photos of listings.

00:41:24.000 --> 00:41:27.750
What I would like to do now is take
this database model and run it through

00:41:27.750 --> 00:41:32.890
a project builder assistant to create
a rule-based swing application.

00:41:36.500 --> 00:41:41.500
So I'm going to create a new project
and select the right template for it.

00:41:41.550 --> 00:41:43.730
Then ask before name.

00:41:48.710 --> 00:41:51.230
The next question is what kind of
additional JAR files I want to use.

00:41:51.400 --> 00:41:54.360
I don't need any for this demonstration,
so I'm going to just skip this step.

00:41:54.520 --> 00:41:57.990
And then I'm going to add the
database model for this real

00:41:57.990 --> 00:42:00.310
estate database to my application.

00:42:02.510 --> 00:42:05.770
The last step is just a
question whether I want to

00:42:05.830 --> 00:42:08.400
build and launch my project now.

00:42:08.470 --> 00:42:10.480
Project Builder now created this
project for me and the assistant

00:42:10.480 --> 00:42:15.340
automatically triggered that it
compiles and then starts afterwards.

00:42:15.340 --> 00:42:18.300
While I'm talking to you right now,
web objects in our rule system

00:42:18.300 --> 00:42:20.830
are actually hard at work to
analyze the database and to come

00:42:20.910 --> 00:42:24.810
up with a user interface that
is appropriate for the data.

00:42:24.890 --> 00:42:27.720
The first window, as you can see,
that it presents me with is

00:42:27.740 --> 00:42:31.160
a query window that I use to
search for the different persons,

00:42:31.160 --> 00:42:35.980
administrators, agents, customers,
and most importantly, listings.

00:42:35.980 --> 00:42:40.570
Let me just pretend to be a customer that
wants to search for a house right now,

00:42:40.570 --> 00:42:43.130
and maybe I want to search
a house in Cupertino.

00:42:44.120 --> 00:42:46.620
So the database offers
me four properties here,

00:42:46.620 --> 00:42:49.280
and oops, they are all very expensive.

00:42:49.300 --> 00:42:54.340
Well, maybe I need to do another search.

00:42:54.340 --> 00:42:55.840
That looks a little better.

00:42:55.860 --> 00:42:58.750
Let me look at some detail
for the first one here.

00:43:01.300 --> 00:43:03.300
It's in Cupertino, that's good.

00:43:03.300 --> 00:43:06.400
It has two stories and air conditioning.

00:43:06.400 --> 00:43:07.680
Even has a nice photo.

00:43:07.700 --> 00:43:10.760
So maybe I should call the
agent and make an appointment.

00:43:10.860 --> 00:43:11.730
My name is Toni.

00:43:11.730 --> 00:43:14.530
Let me see if I can find
some more detail for this.

00:43:14.660 --> 00:43:17.140
She definitely looks
like I can work with her.

00:43:17.230 --> 00:43:18.580
And there's her phone number.

00:43:18.860 --> 00:43:20.440
But wait, I don't have to call her.

00:43:20.440 --> 00:43:21.570
She's right here.

00:43:22.540 --> 00:43:24.820
So as you saw,
this was actually a realistic

00:43:24.820 --> 00:43:27.810
demonstration of our rule-based
technologies with just a

00:43:27.810 --> 00:43:30.550
database model and a couple
of clicks in Project Builder.

00:43:30.660 --> 00:43:33.560
I was able to create a fully-featured
Swing desktop application that

00:43:33.560 --> 00:43:36.190
I can now use as a starting
point for my development process.

00:43:36.440 --> 00:43:37.980
Thank you, Toni.

00:43:43.130 --> 00:43:46.340
Thank you, Andreas.

00:43:46.430 --> 00:43:48.680
So when you develop with WebObjects,
you have your choice of

00:43:48.720 --> 00:43:50.240
deployment platforms.

00:43:50.260 --> 00:43:54.340
You can deploy to a J2SE server
application that we ship with WebObjects

00:43:54.340 --> 00:43:59.450
or any J2EE server applications,
where WebObjects can run side by

00:43:59.450 --> 00:44:02.290
side with other J2EE applications.

00:44:02.480 --> 00:44:04.730
With either one of these
deployment scenarios,

00:44:04.740 --> 00:44:09.690
you can create a flexible,
scalable deployment configuration.

00:44:10.710 --> 00:44:13.600
WebObject ships as a standalone
product with development tools

00:44:13.600 --> 00:44:15.300
and a deployment license.

00:44:15.310 --> 00:44:19.590
Our deployment packages are also
bundled with Mac OS X Server.

00:44:20.510 --> 00:44:24.570
and to ensure that WebObjects is
no longer Apple's best kept secret,

00:44:24.590 --> 00:44:28.470
we have 17 sessions this year at
the Developer Conference so you can

00:44:28.530 --> 00:44:30.780
find out more about this technology.

00:44:30.900 --> 00:44:35.430
All of our sessions are located
in room A1 throughout the week.

00:44:35.430 --> 00:44:35.430
Thanks.

00:44:41.670 --> 00:44:44.880
So I don't know if it was clear,
but zero lines of code.

00:44:44.890 --> 00:44:47.030
Zero lines of code.

00:44:47.580 --> 00:44:50.150
And I think that's one of the amazing
things about when you have this kind of

00:44:50.150 --> 00:44:55.040
rule-based systems is that really many
applications really are a transformation

00:44:55.040 --> 00:44:59.430
of the schema and the database into
the model that's being presented.

00:44:59.700 --> 00:45:01.900
And the first cut of
application is not bad,

00:45:02.010 --> 00:45:02.330
right?

00:45:02.710 --> 00:45:04.500
It's pretty usable.

00:45:04.500 --> 00:45:08.490
Then you can go on and refine it
and tailor it to suit you yourself.

00:45:08.640 --> 00:45:11.290
So I think it's a very
impressive technology.

00:45:11.390 --> 00:45:14.500
If you haven't taken a
look at WebObjects before,

00:45:14.500 --> 00:45:18.280
I really highly recommend
you check it out.

00:45:20.420 --> 00:45:23.860
The next thing I want to talk
about is raising the bar on Java.

00:45:23.930 --> 00:45:28.540
We talked about this morning at Steve's
keynote how we want to raise the bar on

00:45:28.540 --> 00:45:30.490
development tools and the environment.

00:45:30.600 --> 00:45:32.020
We also want to raise the bar on Java.

00:45:32.270 --> 00:45:36.160
We're doing everything extremely well,
but we can still do things better.

00:45:36.260 --> 00:45:39.140
You can still see that there's
a short pause in startup times.

00:45:39.240 --> 00:45:41.260
We want to get even better
fidelity with Acquia.

00:45:41.260 --> 00:45:45.630
I think it's very hard for people to even
see that there is any lack of change,

00:45:45.730 --> 00:45:49.440
but our goal is to be
perfect with Acquia.

00:45:49.540 --> 00:45:51.830
We want to, of course,
use less memory on the platform

00:45:51.840 --> 00:45:54.910
so that you can fit many,
many Java applications simultaneously,

00:45:55.040 --> 00:45:57.460
and that makes it extremely good
for shrink wrap applications.

00:45:57.550 --> 00:46:02.340
Now, Java app is probably still bigger
than its Cocoa Objective-C equivalent,

00:46:02.340 --> 00:46:05.630
but nevertheless,
it's still extremely usable.

00:46:05.700 --> 00:46:08.760
I think one of the most important
things that people have asked for

00:46:08.820 --> 00:46:11.920
that we do is we want to better
track Sun's release schedule.

00:46:12.100 --> 00:46:16.590
Right now, we're shipping 1.3.1,
and we would, of course,

00:46:16.670 --> 00:46:18.570
prefer to be on 1.4.

00:46:18.580 --> 00:46:20.810
We want to think about
how we want to do that.

00:46:20.980 --> 00:46:23.970
Of course, better integration with the
rest of the desktop features,

00:46:23.970 --> 00:46:27.510
things like drawers and other
kinds of components that really are

00:46:27.740 --> 00:46:31.620
part of what you expect from the
Mac OS X environment that are not

00:46:31.640 --> 00:46:36.160
necessarily part of what most people
tend to think of as Java native things,

00:46:36.160 --> 00:46:37.960
so that, for example,
you can write a system

00:46:37.960 --> 00:46:39.620
preferences panel with Java.

00:46:39.720 --> 00:46:44.410
Our goal really is to raise the
bar on Java so that it is 100%

00:46:44.510 --> 00:46:47.530
everything possible on the platform.

00:46:47.810 --> 00:46:49.500
There is a course associated with this.

00:46:49.620 --> 00:46:54.740
We have to delay the 1.4 release
until we can shift the foundation

00:46:54.740 --> 00:46:59.000
of Java away and off of Carbon today
and into a Cocoa environment.

00:46:59.130 --> 00:47:02.040
And this includes things like
shifting the threading model.

00:47:02.040 --> 00:47:05.630
Today we are very tightly tied into
the Carbon way of doing things.

00:47:05.740 --> 00:47:09.560
Many of the applications that themselves
are implemented today using Carbon are

00:47:09.560 --> 00:47:11.230
facing some of the same issues.

00:47:11.320 --> 00:47:13.850
Nevertheless,
it's time now for Java to do this,

00:47:13.970 --> 00:47:18.740
to really make the transition
from Carbon onto a full Cocoa,

00:47:18.740 --> 00:47:22.260
shall we say, environment where we
can leverage and such.

00:47:22.360 --> 00:47:27.670
So, to give you a quick roadmap,
what we have today on the website,

00:47:27.790 --> 00:47:28.700
I believe, is that correct?

00:47:28.780 --> 00:47:29.440
Yes.

00:47:29.530 --> 00:47:31.440
I wanted to make sure.

00:47:31.440 --> 00:47:36.260
We have the 1.4.0 virtual
machine working today,

00:47:36.420 --> 00:47:40.170
but it's using the 1.3.1
user interface classes.

00:47:40.330 --> 00:47:44.010
And so this is an interesting thing
because it also means that we are

00:47:44.010 --> 00:47:48.180
actually beginning support for multiple
VMs on the platform for developer

00:47:48.180 --> 00:47:49.880
mode and to make that work possible.

00:47:49.950 --> 00:47:53.480
And we want to get your feedback
as to whether or not you think this

00:47:53.480 --> 00:47:57.150
is something which we should be
doing for our production release.

00:47:57.470 --> 00:48:01.170
We will beta later in the year
the 1.4 virtual machine with

00:48:01.210 --> 00:48:03.510
the 1.4 user interface classes.

00:48:03.770 --> 00:48:06.790
And I say 1.4.x in the slide,
meaning that we don't know whether

00:48:06.790 --> 00:48:09.320
we should be on 1.4.1 or 1.4.2.

00:48:09.320 --> 00:48:15.100
I think a lot depends upon Sun's
release schedule and the way that they

00:48:15.490 --> 00:48:18.910
are seeing their releases shape up.

00:48:18.930 --> 00:48:23.400
So, really, we want to get synchronized,
if you will, so that, in fact,

00:48:23.470 --> 00:48:27.950
it's a very simple port to take the
change set and to bring it over.

00:48:27.960 --> 00:48:31.960
That re-architecting is ongoing
now and is fundamental to the

00:48:31.980 --> 00:48:35.840
commitment we want to make to you,
that we are mindful of

00:48:35.950 --> 00:48:38.360
your desires to have 1.4.0.

00:48:38.490 --> 00:48:41.080
And what we are doing
here is to give you,

00:48:41.080 --> 00:48:45.550
in fact, I think, the most versatile and
best Java possible.

00:48:45.560 --> 00:48:47.960
So, that's the road to 1.4.

00:48:52.690 --> 00:48:54.850
One more thing.

00:48:54.980 --> 00:48:59.620
You know, as some of you may know,
I'm originally from Sun Microsystems,

00:48:59.620 --> 00:49:03.990
and I'd like to invite my
old friend James Gosling up.

00:49:11.810 --> 00:49:12.790
and James Goldstein.

00:49:12.840 --> 00:49:17.760
Good afternoon, Ted, or good evening,
or... James is a long-time Mac user.

00:49:17.840 --> 00:49:18.800
Where's your titanium, James?

00:49:18.800 --> 00:49:22.800
It's sitting in my bag there
with a basically dead battery.

00:49:22.800 --> 00:49:24.800
Battery exchange.

00:49:24.800 --> 00:49:25.790
That's what we've got to do.

00:49:25.860 --> 00:49:28.570
Well, you know, it's the end of the day,
and I've been sitting

00:49:28.570 --> 00:49:34.250
there hacking along,
and in between the good bits, you know,

00:49:34.290 --> 00:49:35.800
I actually get some work done.

00:49:35.920 --> 00:49:42.390
But Ted had actually asked me to
come here and say a little bit about,

00:49:42.420 --> 00:49:44.800
you know, why I do--why I use a Mac.

00:49:44.800 --> 00:49:47.400
And in some sense, you know,
my purpose of coming

00:49:47.520 --> 00:49:51.330
here is to say to Apple,
you know, thanks for giving me the

00:49:51.330 --> 00:49:52.800
freedom to buy a Mac.

00:49:52.800 --> 00:49:56.340
I mean, I'm...

00:49:58.110 --> 00:50:03.640
I'm one of these people who doesn't
have the luxury of being able to

00:50:03.700 --> 00:50:05.650
deploy software just on the Mac.

00:50:05.650 --> 00:50:10.360
Stuff that I write has to run
on a lot of different places.

00:50:10.510 --> 00:50:20.540
One of the sad tragedies of the world
is that if you're going to buy a laptop,

00:50:20.540 --> 00:50:23.090
most of them are infected.

00:50:23.100 --> 00:50:34.300
And, you know, ever since OS X came out,
and then once the really

00:50:34.300 --> 00:50:38.980
nice Java VM came out,
all of a sudden there was a machine

00:50:38.980 --> 00:50:43.680
that both I could do my job on
and it didn't make my skin crawl,

00:50:43.990 --> 00:50:47.450
which I felt was a wonderful combination.

00:50:47.470 --> 00:50:51.380
I mean, there are a lot of things
to love about Macs.

00:50:51.380 --> 00:50:56.920
I mean, I'm a little bit of a Mac user,
but I'm also sort of a closet Linux user.

00:50:56.920 --> 00:51:00.460
And, to a large extent, actually,
these days I'm more an ex-Linux

00:51:00.460 --> 00:51:03.880
user than anything else,
because I've sort of come

00:51:03.880 --> 00:51:08.410
to think of Mac OS X as sort
of Linux with QA and taste.

00:51:14.500 --> 00:54:18.100
[Transcript missing]

00:54:18.300 --> 00:57:24.200
[Transcript missing]

00:57:24.500 --> 01:00:11.400
[Transcript missing]

01:00:12.000 --> 01:01:52.400
[Transcript missing]

01:01:53.370 --> 01:01:59.790
The user community that was used to
guide the design was a bunch of bankers.

01:01:59.800 --> 01:02:08.100
So it's like if you're targeting bankers,
you get something that

01:02:08.100 --> 01:02:11.300
looks like the bank.

01:02:11.300 --> 01:02:20.880
And, you know, using any old Java app,
the first app I ever tried

01:02:20.890 --> 01:02:23.740
to run on a Mac was NetBeans.

01:02:23.740 --> 01:02:28.540
And, you know, I had one of the standard,
you know, really good experiences,

01:02:28.560 --> 01:02:36.270
namely I copied over the Windows release,
wrote a little shell script to launch it,

01:02:36.300 --> 01:02:36.980
and it just ran.

01:02:39.300 --> 01:02:43.970
and that's predominantly the
experience that people have.

01:02:43.970 --> 01:02:47.190
Unless they've done some JNI stuff,
things just run.

01:02:47.200 --> 01:02:50.600
So you heard it from James Gosling:
things just run.

01:02:50.600 --> 01:02:51.420
All right.

01:02:51.610 --> 01:02:52.100
Thanks, Ted.

01:02:52.100 --> 01:02:53.080
Thank you very much.

01:02:53.120 --> 01:02:54.680
Thanks.

01:02:59.500 --> 01:03:04.530
So very glad to have James on
board and to be using Mac as his

01:03:04.540 --> 01:03:07.500
personal productivity device.

01:03:07.580 --> 01:03:13.620
I want to invite Alan Samuels
up to give the roadmap again and

01:03:14.020 --> 01:03:17.750
discuss what else we will find,
and I think we may actually

01:03:17.810 --> 01:03:19.720
have a little time for some Q&A.

01:03:21.400 --> 01:06:49.000
[Transcript missing]

01:06:51.500 --> 01:07:03.400
[Transcript missing]