WEBVTT

00:00:02.980 --> 00:00:05.560
Ladies and gentlemen,
please welcome Technology Manager for

00:00:05.610 --> 00:00:08.970
Development Tools,
Godfrey DiGiorgi.

00:00:12.740 --> 00:00:13.260
Good afternoon.

00:00:13.260 --> 00:00:15.360
It's good to see so
many of you here today.

00:00:15.400 --> 00:00:18.550
I hope the show has been
running well for you so far.

00:00:18.950 --> 00:00:21.890
Yesterday in our
development tools overview,

00:00:21.890 --> 00:00:26.600
we talked about the fact that we build
on standard technology and standards.

00:00:26.700 --> 00:00:32.060
And many people new to Mac OS X have
been encountering the command-line

00:00:32.160 --> 00:00:34.140
tool set of UNIX for the first time.

00:00:34.280 --> 00:00:37.260
Just out of curiosity,
let's use the applause meter.

00:00:37.260 --> 00:00:41.390
How many people here are coming to
Mac OS X from a UNIX environment?

00:00:43.680 --> 00:00:44.760
It's about there.

00:00:44.770 --> 00:00:49.550
How many people are investigating the
UNIX tools from a Mac OS environment?

00:00:50.500 --> 00:00:52.220
That's about there.

00:00:52.280 --> 00:00:54.000
That's about what I expected.

00:00:54.090 --> 00:00:56.670
So without further ado,
let me introduce Stan Shebs,

00:00:56.670 --> 00:00:58.930
our senior engineer in core tools.

00:00:59.000 --> 00:01:01.890
And he's well known in
the open source community.

00:01:07.380 --> 00:01:08.780
Hello, everybody.

00:01:08.780 --> 00:01:12.430
Does this-- Can everybody hear me?

00:01:12.480 --> 00:01:14.590
Okay.

00:01:14.590 --> 00:01:14.590
So...

00:01:14.720 --> 00:01:19.930
Wanted to start off by going
through the basic thing we're

00:01:19.930 --> 00:01:24.710
going to be talking about today,
which is the fact that Mac OS X has

00:01:24.710 --> 00:01:26.470
a full set of command-line tools.

00:01:26.480 --> 00:01:29.930
We use these tools to
speed our OS X ports,

00:01:30.070 --> 00:01:32.610
especially coming from UNIX.

00:01:33.620 --> 00:01:37.550
And what it does is it gives us,
the command-line tools also give us a

00:01:37.550 --> 00:01:42.890
familiar place for UNIX applications,
both for compiling them and then for

00:01:42.980 --> 00:01:45.260
running them once we've compiled them.

00:01:49.890 --> 00:01:53.300
So the specific topics,
I'm going to go over how to build

00:01:53.300 --> 00:01:57.730
and debug using command-line tools,
talk something about what the tools

00:01:58.120 --> 00:02:02.280
are available on a standard system
with the developer tools installed,

00:02:02.420 --> 00:02:06.230
talk about some of the unique
features of the command-line tools,

00:02:06.230 --> 00:02:11.130
go a little bit into porting issues,
although not in great depth because

00:02:11.130 --> 00:02:15.640
there's another session for that,
and then also to talk something

00:02:15.640 --> 00:02:15.970
about the documentation
resources that are available.

00:02:17.500 --> 00:05:25.800
[Transcript missing]

00:05:26.510 --> 00:05:31.630
Another thing that having the command
line available on Macs now is that

00:05:31.630 --> 00:05:34.240
it gives us a lot of leverage.

00:05:34.260 --> 00:05:38.160
30 years of development on
UNIX from everything from servers

00:05:38.160 --> 00:05:43.420
to scientific applications to
educational things and so forth,

00:05:43.810 --> 00:05:46.610
there's actually an amazing
number of tools that have

00:05:46.610 --> 00:05:49.970
been developed and delivered,
both large and small.

00:05:49.980 --> 00:05:56.080
And so a lot of that stuff will simply
just work on Mac OS and Mac OS X.

00:05:56.450 --> 00:06:00.700
And this is actually the first time
that things just worked on Mac OS X.

00:06:04.360 --> 00:06:08.570
So to get started with all that,
we have a terminal program.

00:06:08.570 --> 00:06:09.690
And this is an application.

00:06:09.700 --> 00:06:16.170
If you go to Applications, Utilities,
there's a terminal icon in there.

00:06:16.260 --> 00:06:19.700
It's also located at
/applications/utilities/terminal.app,

00:06:19.810 --> 00:06:24.220
but of course that doesn't really
do you much good because that's

00:06:24.230 --> 00:06:30.910
the command line path and you can't
type open /applications/whatever

00:06:30.920 --> 00:06:34.390
until you have a terminal window.

00:06:34.500 --> 00:06:37.330
Anyway, so that's just to show you where
it is and you can actually CD down

00:06:37.360 --> 00:06:40.650
to that and just see what the
terminal program is made up of.

00:06:41.000 --> 00:06:43.790
So Terminal,
how many people here have not seen

00:06:43.900 --> 00:06:46.590
Terminal or not used Terminal,
let me ask?

00:06:46.770 --> 00:06:49.280
How many people have not used Terminal?

00:06:49.750 --> 00:06:50.230
Okay, good.

00:06:50.310 --> 00:06:52.370
So everybody's actually seen all
this and this is all redundant.

00:06:52.400 --> 00:06:55.800
Anyway, in case you didn't know it,
you can open up multiple windows.

00:06:55.800 --> 00:06:58.070
Each window runs a separate
instance of the shell,

00:06:58.070 --> 00:07:00.280
and I'll talk about the
shell more in a moment.

00:07:00.280 --> 00:07:04.320
It gives you lots of preferences,
and it is available on all systems.

00:07:04.450 --> 00:07:07.010
So you can go to somebody's
strange OS X system,

00:07:07.010 --> 00:07:09.630
whether or not it has
the Dev Tools installed,

00:07:09.650 --> 00:07:11.600
and Terminal will be there.

00:07:14.440 --> 00:07:20.960
So now Sean Faagan is going to give
us a demo of the Terminal program.

00:07:21.020 --> 00:07:24.790
Not that anybody needs it,
but Sean has a few tricks up his sleeve.

00:07:31.400 --> 00:07:34.250
and John I can hear that, okay.

00:07:34.360 --> 00:07:37.670
I had hoped that there would
be fewer people who didn't

00:07:37.670 --> 00:07:38.800
know the Terminal application.

00:07:38.800 --> 00:07:42.660
I'd give a spiffy demo of it,
but you all know about it, so...

00:07:44.920 --> 00:07:46.900
Here's where you get to it.

00:07:47.150 --> 00:07:52.370
It's under Utilities, Terminal,
and everyone knows about Console too,

00:07:52.370 --> 00:07:52.960
right?

00:07:54.040 --> 00:07:56.000
and All right.

00:07:56.190 --> 00:07:58.000
Let's make the font larger.

00:07:58.000 --> 00:08:01.000
I'm going to be using this later
so I have to set it up anyway.

00:08:01.000 --> 00:08:07.420
The display,
set font to something larger.

00:08:07.420 --> 00:08:09.670
Let's go 14 point.

00:08:12.130 --> 00:08:13.080
How's that?

00:08:13.110 --> 00:08:15.390
Can everyone see it except
for the windows in front?

00:08:15.450 --> 00:08:16.850
Great.

00:08:16.910 --> 00:08:19.680
The other thing I was going to do,
there is, as Stan alluded,

00:08:19.720 --> 00:08:22.060
there is the open command,
which is kind of like

00:08:22.130 --> 00:08:23.210
double-clicking something.

00:08:23.340 --> 00:08:27.390
You do that,
finder brings up the root directory.

00:08:29.880 --> 00:08:33.910
And the other thing I was going to
show is people get a big kick out of

00:08:33.970 --> 00:08:44.000
setting the terminal transparency to,
well, something semi-transparent.

00:08:46.000 --> 00:09:17.800
[Transcript missing]

00:09:23.300 --> 00:09:26.640
Okay, so let us all recite the catechism.

00:09:26.650 --> 00:09:29.370
We say emacs foo.c.

00:09:29.400 --> 00:09:31.850
We cat it out just so
you can see what you did.

00:09:32.160 --> 00:09:33.930
We say cc.

00:09:33.970 --> 00:09:37.300
We do add a dash g because we're
going to run the debugger in a moment.

00:09:37.300 --> 00:09:41.360
We say a.out because by default the
name of the executable is a.out.

00:09:41.470 --> 00:09:45.910
We put dot slash because we want to
run the one in our current directory

00:09:45.910 --> 00:09:50.490
and not some other a.out that might
be somewhere out in the system that

00:09:50.490 --> 00:09:50.490
our search path is going to find us.

00:09:50.800 --> 00:10:09.800
[Transcript missing]

00:10:10.320 --> 00:10:11.410
and that's pretty much all you need.

00:10:11.470 --> 00:10:14.880
That's the command line tools.

00:10:14.880 --> 00:10:18.240
So now we're done and you can all
go out in the halls now and tell

00:10:18.240 --> 00:10:20.750
everybody about the amazingly
short command line tool session.

00:10:24.970 --> 00:10:27.970
Okay, but nobody's getting up,
so I'll go into a little bit more

00:10:27.970 --> 00:10:30.690
detail on some of the things.

00:10:31.020 --> 00:10:34.540
So the shells, the shell is basically
a command interpreter.

00:10:34.540 --> 00:10:36.900
It's just a traditional UNIX-y term.

00:10:36.900 --> 00:10:43.800
One of the curiosities of UNIX,
shall we say, is that there are a number

00:10:43.800 --> 00:10:46.590
of different shells that have
been developed over the years.

00:10:46.610 --> 00:10:49.140
Since a shell is just
a normal UNIX program,

00:10:49.140 --> 00:10:52.760
it's actually possible to have
many different shells running at

00:10:52.760 --> 00:10:54.720
the same time on a UNIX system.

00:10:54.900 --> 00:10:58.000
And so people take advantage
of that and they invent shells.

00:10:58.000 --> 00:10:59.330
There are shells written in Scheme.

00:10:59.340 --> 00:11:02.840
There are shells that use funny syntaxes.

00:11:03.270 --> 00:11:07.290
But there's two main families
of shells that you'll find,

00:11:07.290 --> 00:11:09.950
and both of these are
installed by default.

00:11:10.010 --> 00:11:14.710
The original family is called the
Born Shell after the Bell Labs guy

00:11:14.710 --> 00:11:19.850
that originally put it together,
and it has a specific syntax

00:11:19.850 --> 00:11:23.020
that you'll hear referred
to as the Born Shell syntax.

00:11:23.100 --> 00:11:25.910
Since it was installed as bin-sh,
you'll also see it

00:11:26.180 --> 00:11:27.740
referred to as just bin-sh.

00:11:28.600 --> 00:11:31.710
Now, it turns out we have a couple
implementations of that.

00:11:32.090 --> 00:11:33.650
One's called ZSH.

00:11:33.710 --> 00:11:37.120
That's the default for 10.1 and earlier.

00:11:37.120 --> 00:11:43.320
For 10.2 and later, for Jaguar,
excuse me, Jaguar and later,

00:11:43.320 --> 00:11:44.570
we have Bash.

00:11:44.920 --> 00:11:48.400
Bash is the GNU project's
reimplementation of the Born Shell.

00:11:48.400 --> 00:11:52.560
It's short for the Born Again Shell.

00:11:52.560 --> 00:11:54.610
Ha, ha, ha.

00:11:54.910 --> 00:11:56.760
Anyway, it has,
among other nice properties,

00:11:56.820 --> 00:12:00.430
it's quite a bit faster than the ZSH.

00:12:00.610 --> 00:12:03.520
The syntax, though,
that is not necessarily

00:12:03.520 --> 00:12:06.640
to everybody's taste,
and there's another family of

00:12:06.640 --> 00:12:10.300
shells that people have used,
which is called the C shell.

00:12:10.300 --> 00:12:13.060
Originally comes from Berkeley Unix.

00:12:13.060 --> 00:12:17.700
And the incarnation that we
use on OS X is called TCSH.

00:12:17.700 --> 00:12:22.280
And it's the one I personally prefer.

00:12:22.280 --> 00:12:26.200
In general, the commands that's over look
the same between the two.

00:12:26.200 --> 00:12:29.330
So in some ways, a matter of taste is,
how do you like to do loops,

00:12:29.420 --> 00:12:32.810
and how do you like to
quote things and so forth.

00:12:33.140 --> 00:12:37.160
So you have to be kind of an
aficionado maybe to decide

00:12:37.160 --> 00:12:38.860
which one you really prefer.

00:12:38.860 --> 00:12:43.650
Usually most people it's good enough
just to pick whatever you get by default.

00:12:46.100 --> 00:12:52.900
[Transcript missing]

00:12:55.610 --> 00:13:01.290
Since I'm up here and I had
to put together the slides,

00:13:01.290 --> 00:13:03.640
I got to decide which one was
going to be the one true editor.

00:13:06.030 --> 00:13:08.030
So we'll talk about Emacs first.

00:13:08.090 --> 00:13:14.030
Emacs is an editor that's been
around for a very long time,

00:13:14.130 --> 00:13:17.760
since actually long before UNIX, well,
not long before UNIX is,

00:13:17.760 --> 00:13:19.600
but somewhat before UNIX existed.

00:13:19.600 --> 00:13:24.130
And it was actually originally
developed on ITS machines at MIT.

00:13:24.130 --> 00:13:25.670
That's how old it is.

00:13:25.760 --> 00:13:28.240
It's highly customizable.

00:13:28.240 --> 00:13:32.850
It actually has a Lisp-like
language inside that you

00:13:32.850 --> 00:13:34.470
use to program its behavior.

00:13:35.180 --> 00:13:40.320
And people have used that over the years
to build in quite a lot of good features.

00:13:40.350 --> 00:13:43.010
For instance,
Emacs' knowledge of C syntax

00:13:43.020 --> 00:13:44.640
is actually pretty good.

00:13:44.700 --> 00:13:49.080
So if you hit a tab to go to a new line,
and the new line doesn't jump

00:13:49.080 --> 00:13:52.930
over to where you think it should,
you've probably made a mistake

00:13:53.050 --> 00:13:54.860
in your code somewhere up front.

00:13:54.860 --> 00:13:57.070
And it's best to,
instead of arguing with Emacs,

00:13:57.220 --> 00:13:59.520
to go back and find out where
you typed the extra brace,

00:13:59.520 --> 00:14:02.790
or forgot to close a comment,
or what have you.

00:14:03.480 --> 00:14:07.800
So on 10.1,
we have the standard version is 20.7,

00:14:07.800 --> 00:14:11.560
and I believe it's something like a
20.8 or something like that for Jaguar.

00:14:13.390 --> 00:14:17.160
This is a single window editor,
so it just sits inside a terminal window.

00:14:17.160 --> 00:14:19.170
It doesn't open up multiple
windows of its own.

00:14:19.180 --> 00:14:23.520
There's an X11 version
that's downloadable also,

00:14:23.520 --> 00:14:26.850
but you have to, of course,
be running an X server for that.

00:14:28.510 --> 00:14:34.920
So because we value diversity,
we also provide VI.

00:14:35.200 --> 00:14:38.340
You know, that's interesting.

00:14:38.340 --> 00:14:39.940
There wasn't any applause for Emacs.

00:14:42.800 --> 00:14:43.800
This is bad.

00:14:43.800 --> 00:14:46.800
I've got a tough audience here.

00:14:46.800 --> 00:14:49.570
I have a good story to tell about VI.

00:14:49.970 --> 00:14:54.830
I actually used VI full-time
for about a year,

00:14:55.200 --> 00:14:56.670
about 20 years ago.

00:14:56.670 --> 00:15:01.010
Then I switched over to Emacs and
have been using it ever since.

00:15:01.030 --> 00:15:04.080
Coming back to Apple,
every so often I get stuck

00:15:04.210 --> 00:15:06.890
using VI for whatever reason.

00:15:06.890 --> 00:15:12.110
After 20 years,
I still remember all the VI commands.

00:15:13.560 --> 00:15:17.400
So that's a good thing about VI.

00:15:17.400 --> 00:15:19.270
The commands are easy to learn.

00:15:19.320 --> 00:15:20.400
Things are fairly straightforward.

00:15:20.400 --> 00:15:22.200
It doesn't have all the flexibility.

00:15:22.510 --> 00:15:25.280
Now a couple of people at Apple said,
"Well, what about Vim?" Okay,

00:15:25.280 --> 00:15:27.510
there is an improved
version of VI called Vim.

00:15:27.720 --> 00:15:32.670
It has a lot of this customizability,
but you have to get it by downloading.

00:15:32.680 --> 00:15:34.000
It's not in Jaguar.

00:15:34.490 --> 00:15:37.060
Other than completing,
I'll mention we have things like Pico

00:15:37.060 --> 00:15:38.860
that's also installed in the system.

00:15:38.860 --> 00:15:40.880
Again,
there's literally dozens of editors

00:15:40.980 --> 00:15:44.060
available for the download if
there's something else you prefer.

00:15:44.060 --> 00:15:49.440
And Sean has a demo of Emacs.

00:15:55.060 --> 00:15:58.690
This is just a quick and simple setup.

00:15:58.790 --> 00:16:00.000
It is a UNIX system.

00:16:00.000 --> 00:16:06.200
Write a file.

00:16:06.200 --> 00:16:08.310
Use real paths.

00:16:13.000 --> 00:16:16.010
Everyone knows this program,
and unlike Stan's,

00:16:16.020 --> 00:16:18.500
I have a proper return value.

00:16:21.500 --> 00:16:25.740
That's because those of us who
use VI know to follow standards.

00:16:25.740 --> 00:16:28.500
There's the compiler.

00:16:28.620 --> 00:16:29.990
It's awfully quick on this machine.

00:16:30.000 --> 00:16:32.290
Head on out.

00:16:32.340 --> 00:16:34.320
And for people who like this.

00:16:34.320 --> 00:16:40.820
And we can say... Come on,
where's the applause?

00:16:49.200 --> 00:17:11.000
[Transcript missing]

00:17:12.460 --> 00:17:16.220
and David There's also an
Aqua version of Emacs which was

00:17:16.350 --> 00:17:18.830
done from the Next Step version.

00:17:19.010 --> 00:17:21.980
Unfortunately,
I didn't bring it so I can't show that.

00:17:26.900 --> 00:17:28.440
Thank you, Sean.

00:17:28.440 --> 00:17:31.610
So if you send your
email address to Sean,

00:17:31.610 --> 00:17:35.860
he will personally send you a
copy of this cool Emacs that

00:17:35.860 --> 00:17:38.340
I was hoping you would demo.

00:17:38.340 --> 00:17:43.510
This would actually be one that
would be a better Emacs to use.

00:17:43.510 --> 00:17:46.270
If we can get that
folded into the system,

00:17:46.270 --> 00:17:48.630
I'm hoping we'll be able to
do that in a future version.

00:17:48.640 --> 00:17:50.910
The multiple windows,
Emacs with running inside a

00:17:51.140 --> 00:17:52.370
terminal window is convenient.

00:17:52.480 --> 00:17:53.720
You can run it over the net.

00:17:53.720 --> 00:17:55.560
You can do all that kind of good stuff.

00:17:56.120 --> 00:17:59.120
But having a multiple window Emacs
with the buffers and mouse sensitivity

00:17:59.220 --> 00:18:00.780
is actually a really good thing.

00:18:03.400 --> 00:18:06.240
Okay, so we'll cover a little
bit about languages.

00:18:06.260 --> 00:18:09.800
We have, of course, C, we have C++,
we have Objective-C,

00:18:09.800 --> 00:18:12.350
and we have Objective-C++.

00:18:13.000 --> 00:18:13.880
We have Java.

00:18:14.190 --> 00:18:17.340
This is based on Sun's Java 1.3.1.

00:18:17.340 --> 00:18:19.980
There's a full set of
the command-line tools,

00:18:20.020 --> 00:18:22.440
jikes and so forth, that you can run.

00:18:22.440 --> 00:18:26.100
We have a number of
interpreted type languages.

00:18:26.100 --> 00:18:31.900
We have Perl, Tickle, PHP,
and in Jaguar there will also be Python.

00:18:32.050 --> 00:18:34.780
For 10.1 you'd have to download it.

00:18:35.200 --> 00:18:39.030
The third parties also have
command-line versions of their tools.

00:18:39.030 --> 00:18:42.520
There is a command-line version
of MetroWorks and there's command

00:18:42.800 --> 00:18:44.540
lines for for ABSOX Fortran.

00:18:44.540 --> 00:18:48.390
In addition, you can download G77s,
the Fortran compiler.

00:18:48.390 --> 00:18:52.120
How many people want it to
be a standard part of Jaguar?

00:18:55.350 --> 00:19:02.100
It hasn't been decided yet,
but it's a commonly requested item,

00:19:02.160 --> 00:19:04.730
and so it's quite possible
to still be able to do that.

00:19:06.670 --> 00:19:11.280
So there's also some nutcases that
have been working on Ada for OS X.

00:19:11.280 --> 00:19:13.840
Where are the nutcases?

00:19:13.910 --> 00:19:15.260
I know they're in this
audience somewhere.

00:19:16.870 --> 00:19:21.900
and It actually is
working just as a very,

00:19:21.900 --> 00:19:24.260
very short time ago.

00:19:24.300 --> 00:19:26.790
They're actually starting
to work on how to get it

00:19:26.850 --> 00:19:29.150
integrated into Project Builder.

00:19:29.260 --> 00:19:31.600
But the command line
stuff is there already.

00:19:31.900 --> 00:19:35.080
Probably not going to be a
standard thing in Jaguar.

00:19:36.140 --> 00:19:39.870
We can also download versions
of LISP and Scheme and so forth.

00:19:39.870 --> 00:19:42.680
There's quite a few languages
that have been ported to OS X.

00:19:46.270 --> 00:19:49.290
So our build tool options,
as Sean alluded,

00:19:49.290 --> 00:19:52.140
there are basically two kinds of makes.

00:19:52.240 --> 00:19:53.580
GNU make is a standard.

00:19:53.580 --> 00:19:57.460
There's also a BSD make,
but it's pretty much for compatibility.

00:19:57.460 --> 00:20:00.230
And actually,
I personally don't know of any tools

00:20:00.230 --> 00:20:03.680
that require the use of BSD make,
but I know that such exist.

00:20:03.680 --> 00:20:07.240
There's also a command-line
tool called JAM,

00:20:07.240 --> 00:20:11.440
which is the underlying
make-type tool for PBX build,

00:20:11.440 --> 00:20:15.790
which is a command-line
version of Project Builder.

00:20:16.200 --> 00:20:19.930
So it sounds kind of odd, you know,
why would you have a command-line

00:20:19.930 --> 00:20:21.110
tool for Project Builder?

00:20:21.470 --> 00:20:25.240
Well, it has an advantage in a work
group where you say you have

00:20:25.370 --> 00:20:28.560
some people using IDE and some
people using the command line,

00:20:28.560 --> 00:20:31.410
or if you have a situation
where you need to run,

00:20:31.410 --> 00:20:34.770
say, a nightly script,
and you don't want to have to make

00:20:34.790 --> 00:20:38.350
your most junior guy come in and
click on the mouse in the middle of

00:20:38.350 --> 00:20:40.270
the night to get something to run.

00:20:41.770 --> 00:20:47.360
So, you can also SSH into a machine
and run PBX build there.

00:20:47.360 --> 00:20:50.220
So, PBX build is very convenient.

00:20:50.220 --> 00:20:53.580
The Project Builder projects
are actually in a text form.

00:20:53.580 --> 00:20:55.910
They're XML syntax and
they're textual files.

00:20:55.920 --> 00:20:58.680
And the truly brave can
actually edit them manually,

00:20:58.680 --> 00:21:00.840
but officially we don't recommend it.

00:21:00.940 --> 00:21:03.800
But if you're truly brave, truly brave.

00:21:03.880 --> 00:21:08.280
Okay, I should also note that
Apple's Jam is extended from

00:21:08.350 --> 00:21:10.800
the net version to support PB.

00:21:10.800 --> 00:21:14.610
So, if you download a net version of Jam,
don't expect to be able to drop it

00:21:14.610 --> 00:21:16.880
in on top of the Jam that we supply.

00:21:20.940 --> 00:21:26.960
Other useful tools,
we have about 400 or 500,

00:21:26.960 --> 00:21:29.680
I think in Jaguar it's actually
closer to over 500 now,

00:21:29.690 --> 00:21:32.250
tools in slash bin and slash user bin.

00:21:32.280 --> 00:21:36.420
And the collection of tools
most resembles FreeBSD.

00:21:36.420 --> 00:21:41.560
There's CVS, RCS,
and SCCS for source code control.

00:21:41.560 --> 00:21:45.210
CVS is perhaps the most
commonly used of those.

00:21:45.680 --> 00:21:48.140
There are a lot of projects
that run on the net,

00:21:48.320 --> 00:21:52.470
open source projects will use CVS over
the network to manage their code.

00:21:54.310 --> 00:21:58.850
For people at old UNIX types
that use the old TROF,

00:21:58.850 --> 00:22:03.090
NROF formatting tools,
those are actually all still there.

00:22:03.090 --> 00:22:07.080
At this point, their main use is to
format the man pages.

00:22:07.080 --> 00:22:10.860
I'm not sure that anybody actually writes
new stuff in them outside of man pages.

00:22:10.860 --> 00:22:13.740
But they're all there if
you love that kind of stuff.

00:22:14.650 --> 00:22:17.030
We have Lex and Yak for
compiler generation.

00:22:17.080 --> 00:22:19.940
We have the GNU equivalents
Flex and Bison.

00:22:19.970 --> 00:22:24.980
We also have a lot of tools that are
more expected to manipulate object files,

00:22:24.980 --> 00:22:26.560
do fairly low-level things.

00:22:26.580 --> 00:22:29.440
There's RanLib and AR,
which I'll talk more about in a bit.

00:22:29.450 --> 00:22:31.440
The assembler is called AS.

00:22:31.460 --> 00:22:38.190
It generally resembles the GNU syntax,
but it's evolved somewhat,

00:22:38.190 --> 00:22:42.230
so it's a good idea to check the
OS X assembler manual if you're

00:22:42.230 --> 00:22:44.310
getting into assembly code.

00:22:44.900 --> 00:22:47.700
For the old Mac heads,
the syntax is somewhat

00:22:47.800 --> 00:22:50.620
different from PPC-ASM,
so you should be aware of that.

00:22:50.720 --> 00:22:55.460
O-Tool is the tool we use instead
of ObjDump to dump out object

00:22:55.460 --> 00:22:57.310
files to get the contents of them.

00:22:57.320 --> 00:23:00.510
And you can do man-o-tool
to find out more about it.

00:23:00.660 --> 00:23:03.630
We also have things like AutoConf,
which I'll also talk more about.

00:23:08.730 --> 00:23:12.200
Okay, shifting gears a little
bit to talk about APIs.

00:23:12.200 --> 00:23:16.770
We implement most of POSIX, okay,
but we don't implement all of POSIX,

00:23:16.830 --> 00:23:19.750
and we want you to report
POSIX nonconformance

00:23:19.860 --> 00:23:21.470
wherever you find it.

00:23:21.500 --> 00:23:24.670
Now,
POSIX applies to both command-line tools

00:23:24.670 --> 00:23:27.350
as well as to programming interfaces.

00:23:27.350 --> 00:23:30.390
So, for instance,
if LS-L doesn't operate as

00:23:30.390 --> 00:23:33.930
you would expect it to do
on a different UNIX machine,

00:23:33.930 --> 00:23:38.580
you know, that is a bug in the
command-tool side of the program.

00:23:38.650 --> 00:23:41.110
of the POSIX specification.

00:23:41.260 --> 00:23:44.440
and then the anything that doesn't
operate like what a quote normal

00:23:44.440 --> 00:23:50.080
UNIX machine operates like would be
a non-conformance in the POSIX API.

00:23:52.200 --> 00:23:54.750
and So we'll get to POSIX eventually,
I think,

00:23:54.750 --> 00:23:59.770
but it's certainly not the case in 10.1,
it's not the case in 10.2.

00:23:59.960 --> 00:24:02.440
Other APIs, we do OpenGL and GLUT.

00:24:02.440 --> 00:24:06.960
From personal experience,
I think things come over quite readily,

00:24:07.140 --> 00:24:08.800
very little change required.

00:24:10.400 --> 00:24:12.720
We also have Carbon and Cocoa for GUI,
which, of course,

00:24:12.790 --> 00:24:14.340
you've heard nonstop about here.

00:24:14.340 --> 00:24:19.230
There's also a different API,
which is I/O Kit, that's used for drivers

00:24:19.230 --> 00:24:20.410
and kernel extensions.

00:24:20.420 --> 00:24:23.980
And I/O Kit is a C++
object-oriented thing.

00:24:23.980 --> 00:24:28.380
It's actually kind of interesting to
use C++ at the device driver level.

00:24:28.380 --> 00:24:32.980
It makes it possible to write
very small drivers and be able

00:24:32.980 --> 00:24:33.960
to share most of the code.

00:24:34.360 --> 00:24:39.140
And for anybody that's ever tried
their hand at a Linux device driver,

00:24:39.140 --> 00:24:40.350
you'll really appreciate that.

00:24:40.400 --> 00:24:44.200
We provide a lot of the common code,
and you only have to write the

00:24:44.200 --> 00:24:45.560
stuff that's unique to your device.

00:24:47.270 --> 00:24:49.870
We also provide,
not as a standard part of OS X,

00:24:49.870 --> 00:24:54.230
but we have a couple different
X11 systems available.

00:24:54.230 --> 00:24:58.460
So if users can run a server,
then X11 apps can run

00:24:58.460 --> 00:25:00.610
on those machines also.

00:25:04.620 --> 00:25:08.900
So APIs are provided by what
are known as frameworks.

00:25:08.900 --> 00:25:12.820
And I have to apologize for
doing a graphics on this.

00:25:12.820 --> 00:25:14.430
This is the only graphics in the talk.

00:25:14.530 --> 00:25:18.480
Command line guys don't
need no stinking graphics.

00:25:18.490 --> 00:25:21.650
But this one looked good and I said,
oh sure, why not.

00:25:23.300 --> 00:25:28.730
Okay, so a framework is basically Apple's
answer to the problem of managing shared

00:25:28.730 --> 00:25:32.820
libraries and headers and resources
that go along with those libraries.

00:25:32.920 --> 00:25:37.600
So what it actually looks like on
the system is you'll have something

00:25:37.600 --> 00:25:39.600
for a framework called Foo.

00:25:39.600 --> 00:25:41.280
You'll have a Foo.framework.

00:25:41.360 --> 00:25:44.430
Inside that,
you'll have the shared library proper,

00:25:44.430 --> 00:25:46.750
which will usually just be called Foo.

00:25:46.780 --> 00:25:50.180
And if you did the file command,
the file command tells

00:25:50.310 --> 00:25:51.860
you what's in a file.

00:25:52.610 --> 00:25:54.630
And the file command says
this is an executable.

00:25:54.640 --> 00:25:58.740
Well, in some sense, it's an executable,
but you don't execute it by itself.

00:25:58.830 --> 00:25:59.860
It's just a shared library.

00:25:59.860 --> 00:26:01.370
That's just how it happens to be marked.

00:26:01.460 --> 00:26:03.860
There's also a subdirectory
called headers.

00:26:03.860 --> 00:26:05.730
All the headers sit in that,
and there's a subdirectory

00:26:05.860 --> 00:26:06.460
called resources.

00:26:06.560 --> 00:26:11.630
And the resources are things like
strings that you might localize or

00:26:11.690 --> 00:26:13.360
other information about the framework.

00:26:13.360 --> 00:26:16.580
And these are all text files, again,
in XML syntax.

00:26:16.580 --> 00:26:19.990
And you can edit them
if you're feeling brave.

00:26:21.990 --> 00:26:24.840
So, another detail about frameworks,
if you actually go wandering

00:26:24.840 --> 00:26:27.390
around looking at the framework,
you notice that a bunch

00:26:27.520 --> 00:26:28.380
of stuff is symlinked.

00:26:28.380 --> 00:26:33.770
And when I say headers there,
headers technically is a symlink to

00:26:33.770 --> 00:26:36.560
versions and then say A and then headers.

00:26:36.680 --> 00:26:41.140
And this is a versioning mechanism
that frameworks have that in practice

00:26:41.140 --> 00:26:43.020
is not really used very much.

00:26:43.160 --> 00:26:46.030
The most you'll notice is when you try
and look at the headers and it says,

00:26:46.030 --> 00:26:47.610
oh, well, this is just a symlink.

00:26:47.680 --> 00:26:49.460
And then you have to say,
look at headers slash,

00:26:49.570 --> 00:26:51.040
and that'll show you what's inside.

00:26:51.900 --> 00:26:55.050
So that's just something
to know about frameworks.

00:26:56.090 --> 00:27:04.970
To use them, you'll say include foo/foo.h
in your source code.

00:27:05.100 --> 00:27:06.760
I'm sure some of you are
looking at it and thinking,

00:27:06.760 --> 00:27:09.910
"Isn't that confusing if
you had something like user

00:27:09.910 --> 00:27:12.760
include foo/foo.h?" Actually,
yes.

00:27:12.760 --> 00:27:15.240
There is an ambiguity there.

00:27:15.240 --> 00:27:18.830
They chose this framework
syntax before I came along,

00:27:18.830 --> 00:27:23.420
so I would have told them to use
something like foo;foo.h or something

00:27:23.450 --> 00:27:24.600
that wasn't so obviously a path.

00:27:25.180 --> 00:27:29.740
But anyway, we luck out most of the time
because user include doesn't

00:27:29.740 --> 00:27:33.310
have a foo subdirectory in it,
so this thing doesn't get confused.

00:27:33.320 --> 00:27:38.550
Is that some of that capital letters?

00:27:38.580 --> 00:27:39.810
Yeah.

00:27:44.330 --> 00:27:47.190
uppercase, lowercase, that's a non-issue.

00:27:47.200 --> 00:27:49.160
It's basically a convention thing.

00:27:50.900 --> 00:28:02.100
[Transcript missing]

00:28:02.900 --> 00:28:11.300
Most of the frameworks live in
/systems/library/frameworks.

00:28:11.300 --> 00:28:11.310
There's about 40 or 50 of them, I guess.

00:28:11.420 --> 00:28:15.790
However, most of the system stuff,
the standard UNIX system stuff,

00:28:15.790 --> 00:28:17.420
doesn't live in the frameworks.

00:28:17.420 --> 00:28:21.600
That's the normal headers, POSIX headers,
live in slash user include.

00:28:21.600 --> 00:28:22.870
They look the same as always.

00:28:22.940 --> 00:28:28.950
If anybody remembers the
public beta and earlier stages,

00:28:28.950 --> 00:28:32.000
there was actually a, quote,
system framework.

00:28:32.000 --> 00:28:36.260
And all the headers actually lived
in system library frameworks,

00:28:36.410 --> 00:28:38.280
and user include was sort of symlinks.

00:28:39.140 --> 00:28:41.500
In practice,
that turned out to be kind of confusing,

00:28:41.500 --> 00:28:45.160
and so we essentially ditched
the whole system framework idea.

00:28:45.160 --> 00:28:51.010
And the only remnant now is that
if you look at the user lib,

00:28:51.020 --> 00:28:53.290
you'll see a reference to,
or you'll see a copy of the

00:28:53.390 --> 00:28:59.260
file user lib lib system dot a,
or sorry, lib system dot b dot dilib

00:28:59.300 --> 00:29:00.700
or something like that.

00:29:00.970 --> 00:29:04.750
And that is the standard C library
and all the stuff that goes in it.

00:29:04.840 --> 00:29:07.650
And it still has the syntax
as if it were a framework.

00:29:09.240 --> 00:29:13.590
Anyway, to define your own frameworks,
you need to, well,

00:29:13.590 --> 00:29:18.070
you can stick them in system library
frameworks so they can be erased

00:29:18.070 --> 00:29:21.350
by the next OS X software update,
or, I'm sorry,

00:29:21.800 --> 00:29:38.600
[Transcript missing]

00:29:42.010 --> 00:29:42.920
So moving on again.

00:29:42.920 --> 00:29:46.680
So the compiler is GCC.

00:29:46.700 --> 00:29:48.420
And we get this question a lot.

00:29:48.420 --> 00:29:50.910
I think pretty much everybody's
worked it out by now.

00:29:50.920 --> 00:29:53.010
But the compiler is GCC.

00:29:53.020 --> 00:29:57.590
You do not need to download from
the FSF and try to build GCC in

00:29:57.670 --> 00:30:01.550
order to get started because you'll
almost certainly be disappointed.

00:30:01.580 --> 00:30:03.250
We have a lot of extensions to GCC.

00:30:03.260 --> 00:30:06.220
Some of those extensions,
like the framework lookup,

00:30:06.320 --> 00:30:09.480
are fairly important for
doing anything on OS X.

00:30:10.340 --> 00:30:13.460
So whether those things
will make it into FSF GCC,

00:30:13.490 --> 00:30:14.260
we don't know.

00:30:14.260 --> 00:30:16.200
It's kind of a thing unique to the Mac.

00:30:16.200 --> 00:30:19.570
And the rest of the world isn't
necessarily that enthusiastic

00:30:19.690 --> 00:30:20.970
about adopting this stuff.

00:30:21.020 --> 00:30:24.310
But by and large,
the usual GCC options work.

00:30:25.720 --> 00:30:27.800
We do have a number
of additional options.

00:30:27.800 --> 00:30:31.050
Most of them are distinct
to Mac programming,

00:30:31.050 --> 00:30:35.500
so you won't need them for the
porting of UNIX applications.

00:30:35.500 --> 00:30:38.130
And for Mac applications,
most of that stuff will

00:30:38.130 --> 00:30:39.430
have worked already.

00:30:39.440 --> 00:30:43.380
That is, if you used it previously
on OS 9 application,

00:30:43.380 --> 00:30:47.720
Pragmas and so forth, they'll work pretty
much the same on OS X.

00:30:49.440 --> 00:30:52.860
I just wanted to call your attention
to a couple interesting options.

00:30:52.860 --> 00:30:58.170
We have a -f altavec that
enables all the altavec support.

00:30:58.590 --> 00:31:01.260
By default,
because altavec actually makes

00:31:01.440 --> 00:31:06.400
the symbol vector into a keyword.

00:31:06.400 --> 00:31:11.390
If you had a program with
the variable called vector,

00:31:11.460 --> 00:31:14.550
you turn on f altavec
and it kind of chokes.

00:31:15.620 --> 00:31:17.120
We made that an option.

00:31:17.120 --> 00:31:19.380
You have to actually
explicitly request -f altavec.

00:31:19.400 --> 00:31:20.950
to VEC.

00:31:21.530 --> 00:31:24.740
So, if you're porting anything,
and there's probably not

00:31:24.880 --> 00:31:27.360
too much of this code,
if you're porting from a

00:31:27.360 --> 00:31:30.810
PowerPC Linux where they had
a Motorola version of the

00:31:30.870 --> 00:31:35.400
AltaVec support added to GCC,
they called that option dash FVec.

00:31:35.400 --> 00:31:38.710
And we renamed it to AltaVec because
that was a little bit more accurate.

00:31:38.710 --> 00:31:41.980
And so that would be what
you'd change the FVec into.

00:31:43.770 --> 00:31:46.940
Another option in the compiler session
we'll talk about is some more depth.

00:31:47.000 --> 00:31:50.430
There's a -mdynamicnopic
that you might want to add to

00:31:50.510 --> 00:31:52.690
when building applications.

00:31:52.690 --> 00:31:55.620
It saves a couple of instructions,
but it makes your

00:31:55.720 --> 00:31:57.620
application not relocatable.

00:31:57.660 --> 00:32:00.160
This is fine for applications.

00:32:00.160 --> 00:32:04.600
You wouldn't want to do this all the
time because the shared libraries

00:32:04.600 --> 00:32:08.750
you actually want to be able to
relocate around an application's

00:32:08.830 --> 00:32:13.200
address space as the dynamic library
gets loaded and unloaded by the OS.

00:32:16.210 --> 00:32:20.290
So to build libraries,
it depends on whether you want to

00:32:20.290 --> 00:32:24.800
do a statically linked library,
a traditional archive format,

00:32:24.930 --> 00:32:27.170
or a dynamic library.

00:32:27.790 --> 00:32:32.180
To build a static library, you use AR,
another old UNIX program,

00:32:32.280 --> 00:32:37.270
and then you use RanLib on the
result to make that into a,

00:32:37.530 --> 00:32:40.700
essentially to add a table of contents.

00:32:41.330 --> 00:32:44.300
This is something that you don't
normally do on a Linux machine,

00:32:44.300 --> 00:32:48.300
so that's a little bit of a departure
for people that are familiar with Linux.

00:32:49.520 --> 00:32:53.000
The other way to build a library is to
make it a dynamically linked library.

00:32:53.000 --> 00:32:55.280
That's the library that
underlies the framework.

00:32:55.350 --> 00:32:59.890
And there we use the
option cc-dynamiclib.

00:33:00.150 --> 00:33:02.130
and then all the right things
happen behind the scenes.

00:33:02.220 --> 00:33:06.630
Now, one way to cover this up,
and quite a few heavily ported

00:33:06.630 --> 00:33:10.590
applications know how to do this,
there is a system of shell

00:33:10.590 --> 00:33:14.790
scripts called LibTool,
which tries to give a

00:33:14.920 --> 00:33:20.600
platform-independent mechanism
for building libraries.

00:33:20.600 --> 00:33:25.080
One of the unfortunate things about
the many Unix variants in the world

00:33:25.080 --> 00:33:29.200
is that while they all call their
compiler CC and they all use dash

00:33:29.200 --> 00:33:34.130
G to say output debugging info,
somehow that never quite happened

00:33:34.140 --> 00:33:35.540
for building of shared libraries.

00:33:35.540 --> 00:33:38.660
On one system it's dash R,
another one's dash shared,

00:33:38.660 --> 00:33:41.060
for us it's dash dynamic lib, etc.

00:33:41.060 --> 00:33:46.680
The LibTool is basically a wrapper,
and it's a shell script,

00:33:46.680 --> 00:33:50.410
that wraps around the compiler
and the linker invocations to pass

00:33:50.430 --> 00:33:54.710
the correct kinds of options for
the platform you're running on.

00:33:56.170 --> 00:33:57.860
So it's a very handy thing.

00:33:57.930 --> 00:34:00.390
For porting,
the main thing that you have to worry

00:34:00.390 --> 00:34:03.070
about is updating the lib tool bits.

00:34:03.140 --> 00:34:06.920
There's a standard that
comes from the GNU project,

00:34:06.920 --> 00:34:12.750
GNU.org, and most projects have fairly
up-to-date lib tool bits and

00:34:12.760 --> 00:34:18.920
they know about Darwin OS X,
but I've seen a couple where

00:34:18.920 --> 00:34:20.290
they've been out of date and the
right thing to do is to update.

00:34:21.610 --> 00:34:25.080
and speaking of Darwin,
another thing to know about is the

00:34:25.200 --> 00:34:28.100
different versions of the system.

00:34:28.100 --> 00:34:31.940
You've heard this a bunch of times,
lower layer system is called Darwin.

00:34:31.940 --> 00:34:34.490
Darwin basically consists
of the open source part,

00:34:34.690 --> 00:34:37.590
few or no frameworks,
I think core foundation is probably

00:34:37.600 --> 00:34:40.880
the only framework that's actually
in Darwin and none of the GUI stuff.

00:34:42.880 --> 00:34:45.670
This matters because there's two
different kinds of tools that

00:34:45.690 --> 00:34:47.700
you use to get version numbers.

00:34:47.760 --> 00:34:51.100
One of the tools is called SW_VERSE.

00:34:51.170 --> 00:34:55.040
That reports the Mac OS X version,
such as 10.1.3.

00:34:55.090 --> 00:34:57.180
It also, underneath,
reports a build number,

00:34:57.230 --> 00:34:59.820
something like a 5P64.

00:34:59.870 --> 00:35:05.400
That's the way to identify
an exact build image.

00:35:05.720 --> 00:35:07.880
Most of the time that really
only matters to people,

00:35:07.920 --> 00:35:12.230
say, getting seeds where it's different
than the final release number.

00:35:12.520 --> 00:35:15.350
The other tool,
and this is a UNIX standard tool,

00:35:15.350 --> 00:35:16.550
is called UNAME.

00:35:16.550 --> 00:35:20.370
You can say UNAME-A and it will
give you the Darwin version number.

00:35:20.380 --> 00:35:24.860
There's a little chart
showing how they match up.

00:35:25.060 --> 00:35:29.520
Mac OS X-O is Darwin 1.3.1, 10.1 is 1.4.

00:35:29.520 --> 00:35:33.810
Then,
for reasons that seemed good at the time,

00:35:33.810 --> 00:35:37.580
but they still seem good,
we bumped the numbers so that the

00:35:37.580 --> 00:35:42.380
software update to 10.1.1 changed
the Darwin version number to 10.1.1.

00:35:42.510 --> 00:35:45.180
There were a few people
surprised by that,

00:35:45.180 --> 00:35:46.340
let me tell you.

00:35:46.340 --> 00:35:50.890
Not often you get a major version number
change by doing a software update.

00:35:50.940 --> 00:35:53.690
Anyway,
the purpose of that actually was to

00:35:53.690 --> 00:35:57.620
align the Darwin version numbers with
the build numbers used internally.

00:35:57.620 --> 00:36:02.690
So when I say 10.1 is base 5P whatever,
the Darwin is a version 5

00:36:02.870 --> 00:36:04.590
to go along with that 5.

00:36:04.620 --> 00:36:09.100
So to take an example, in Jaguar,
your systems, you name dash A,

00:36:09.100 --> 00:36:11.560
will say it's a Darwin 6.0.

00:36:12.630 --> 00:36:17.670
And do along with 10.2 as
an OS X version number.

00:36:20.260 --> 00:36:24.990
The reason this matters is because
it ties into one of the very common

00:36:25.110 --> 00:36:27.850
ways of doing handling ports,
which is to use GNU's

00:36:27.850 --> 00:36:29.640
configure and make process.

00:36:31.770 --> 00:36:34.400
and There's a lot of
stuff to go into here.

00:36:34.400 --> 00:36:38.190
We don't really have time
to go into it in any depth.

00:36:38.290 --> 00:36:41.120
Makefiles are basically not
adequate for really large or

00:36:41.120 --> 00:36:43.640
complicated software projects.

00:36:43.640 --> 00:36:49.090
So what the GNU project adopted years
ago was a process of editing the

00:36:49.090 --> 00:36:51.750
Makefile to adapt it to the system.

00:36:51.750 --> 00:36:54.820
And the shell script,
which started out as a

00:36:54.820 --> 00:36:58.620
couple-page shell script,
and is now like 100 pages long

00:36:58.620 --> 00:37:00.490
if you ever printed it out.

00:37:00.580 --> 00:37:04.920
But the configure script will
essentially edit the Makefile and take

00:37:05.290 --> 00:37:09.070
care of any system dependencies or
user-chosen options or what have you,

00:37:09.070 --> 00:37:12.330
and edit the Makefile so that the
right thing will happen for the system.

00:37:13.860 --> 00:37:16.790
and this is why in many of these
projects you can actually pull the

00:37:16.790 --> 00:37:21.760
source code down off the FTP site,
take it on to your OS X system,

00:37:21.760 --> 00:37:25.280
even if the code has never been ported
before and many of them just work.

00:37:25.360 --> 00:37:28.660
Configure knows how to dig
around and user include.

00:37:28.700 --> 00:37:32.500
It knows how to turn if-def's on and off
depending on what a system has on it.

00:37:32.530 --> 00:37:34.200
Edits the make file appropriately.

00:37:34.240 --> 00:37:37.840
When you run make,
all those things are taken into account

00:37:37.840 --> 00:37:40.670
and the program produces the executable.

00:37:41.720 --> 00:37:45.930
So one of the ways, though,
in which that could fail is if the

00:37:46.070 --> 00:37:51.060
guessing part about what system
you're running on is incorrect.

00:37:51.200 --> 00:38:05.000
[Transcript missing]

00:38:05.500 --> 00:38:29.300
[Transcript missing]

00:38:29.940 --> 00:38:33.710
and then later on the configure script
can then make a test based on that.

00:38:33.710 --> 00:38:39.880
Is this a version that supports a feature
in C-type.h or something like that.

00:38:39.980 --> 00:38:43.960
Anyway, config.guess for many projects
nowadays is up-to-date enough to

00:38:43.960 --> 00:38:47.530
recognize Darwin as a platform,
but not always.

00:38:47.810 --> 00:38:51.790
And if yours is one of the unlucky guys,
then you want to get the two scripts,

00:38:51.960 --> 00:38:56.300
config.guess and config.sub,
from the GNU organization.

00:38:56.320 --> 00:39:00.900
And I put there the URL that actually
gives you to the CVS web where

00:39:00.900 --> 00:39:03.050
it shows you the latest version.

00:39:03.360 --> 00:39:04.930
Since these two scripts
are self-contained,

00:39:04.940 --> 00:39:09.430
it's generally always okay just
to take those scripts and drop

00:39:09.520 --> 00:39:11.140
them into an existing project.

00:39:13.150 --> 00:39:14.800
Another thing to help you
get started on porting,

00:39:14.800 --> 00:39:17.940
some projects do want to see GCC.

00:39:17.940 --> 00:39:19.850
They actually invoke GCC by name.

00:39:19.850 --> 00:39:25.300
It's convenient to symlink CC to GCC,
C++ to G++.

00:39:25.300 --> 00:39:29.300
This will be done in Jaguar.

00:39:29.310 --> 00:39:31.410
If you look at Jaguar,
it's already got those symlinks,

00:39:31.460 --> 00:39:33.350
so this is strictly a 10.1 issue now.

00:39:35.650 --> 00:39:38.940
Now the other thing that people
often ask about is they want

00:39:39.050 --> 00:39:40.600
some kind of predefined macro.

00:39:40.600 --> 00:39:43.730
And we don't have a predefined macro.

00:39:43.820 --> 00:39:48.240
Partly the reason is historical,
partly it's a policy thing.

00:39:48.240 --> 00:39:52.850
The macro that we would use would
inevitably get confused with,

00:39:52.910 --> 00:39:57.430
say, different generation of Next Step,
which doesn't really matter much anymore,

00:39:57.430 --> 00:40:01.120
but it did up until fairly recently,
and other versions of

00:40:01.120 --> 00:40:03.240
Apple's systems as well.

00:40:03.240 --> 00:40:05.950
So in general,
what we recommend is either to

00:40:05.980 --> 00:40:08.900
test for the features directly,
and I'll talk about

00:40:08.900 --> 00:40:12.170
that more in a minute,
or to essentially insist

00:40:12.170 --> 00:40:16.920
that the user add a dash,
a define of Mac OS X as a symbol and

00:40:16.920 --> 00:40:21.030
then use that in your code if you
absolutely have to do it that way.

00:40:24.870 --> 00:40:29.430
So there are interfaces
that have to be ported,

00:40:29.440 --> 00:40:31.760
despite all the command-line emphasis.

00:40:31.860 --> 00:40:33.600
Curses just works.

00:40:33.640 --> 00:40:35.800
Curses are built into
the system framework.

00:40:35.800 --> 00:40:37.040
It's already all there.

00:40:37.040 --> 00:40:40.260
I haven't personally experienced
any problems with bringing over

00:40:40.270 --> 00:40:41.710
a piece of code that uses curses.

00:40:41.720 --> 00:40:47.840
There are now aquified
versions of TickleTK and of QT.

00:40:47.840 --> 00:40:54.300
So you can actually write a tickle
script that brings up the lickable

00:40:54.300 --> 00:40:56.670
buttons and and all that good stuff.

00:40:57.670 --> 00:41:01.870
X11 is available if your users
are willing to run an X11 server.

00:41:01.870 --> 00:41:03.500
In something like a
university environment,

00:41:03.500 --> 00:41:05.480
that would be a very
reasonable thing to do.

00:41:05.480 --> 00:41:07.440
Those are available.

00:41:07.440 --> 00:41:10.180
The distributions are
commonly readily available.

00:41:10.180 --> 00:41:11.100
There's X386.

00:41:11.230 --> 00:41:13.000
There's a commercial package from Tenon.

00:41:14.600 --> 00:41:26.300
[Transcript missing]

00:41:26.500 --> 00:41:30.200
The OpenGL framework is
called OpenGL.framework,

00:41:30.200 --> 00:41:33.970
which means you include OpenGL/GL.h.

00:41:34.110 --> 00:41:39.940
So one way is to change the source
code if def every include of GL slash

00:41:40.640 --> 00:41:45.540
or the other alternative might be
to actually add a GL subdirectory to

00:41:45.540 --> 00:41:49.500
user include and make symlinks from
there to the OpenGL.framework headers.

00:41:53.150 --> 00:41:56.250
Some more common problems
that people run into.

00:41:56.260 --> 00:42:00.040
The compiler uses pre-compiled headers.

00:42:00.040 --> 00:42:01.800
These pre-compiled headers win big time.

00:42:01.800 --> 00:42:06.660
They're like a 4x speed improvement
for compiling Cocoa things.

00:42:06.890 --> 00:42:09.840
As it happens,
relatively little Unix code that

00:42:09.950 --> 00:42:12.940
you're bringing over uses Cocoa,
amazingly enough.

00:42:13.230 --> 00:42:16.760
And so you're actually not
really getting any benefit from

00:42:16.770 --> 00:42:18.890
using pre-compiled headers.

00:42:18.900 --> 00:42:22.130
And the preprocessor,
this mechanism works by using

00:42:22.190 --> 00:42:26.080
an intelligent preprocessor,
sort of intelligent anyway.

00:42:26.080 --> 00:42:31.950
And it takes extra time to preprocess
when doing its thinking about whether

00:42:31.950 --> 00:42:35.140
to use the pre-compiled header or not.

00:42:36.010 --> 00:42:39.820
So as it turns out,
it basically has no upsides and all kinds

00:42:39.900 --> 00:42:42.650
of downsides when doing Unix porting.

00:42:42.660 --> 00:42:46.010
And so we have an option no
CPP pre-comp that basically

00:42:46.110 --> 00:42:48.160
switches back to using GNU CPP.

00:42:50.720 --> 00:42:53.280
Other things you'll run into,
there's missing declarations.

00:42:53.280 --> 00:42:56.200
There's some that we know about that
are going to be fixed in Jaguar,

00:42:56.200 --> 00:42:57.810
and there's probably others
we haven't heard about,

00:42:58.030 --> 00:43:01.360
and they're going to be fixed
in whatever comes after Jaguar.

00:43:01.360 --> 00:43:03.370
Ditto for missing functions.

00:43:03.470 --> 00:43:07.660
One way to deal with that
is to re-implement them,

00:43:07.660 --> 00:43:10.020
conditionalize them when
they're running on OS X.

00:43:10.020 --> 00:43:13.470
Sometimes you have to
if-def the functionality,

00:43:13.470 --> 00:43:14.140
alas.

00:43:15.700 --> 00:43:17.540
Another thing that can
happen is extra definitions.

00:43:17.550 --> 00:43:24.180
The system framework, lib system,
has a lot of stuff glued into it.

00:43:24.180 --> 00:43:27.110
As I mentioned,
the curses library is glued into it.

00:43:27.290 --> 00:43:29.650
If you have a program that
can't be linked with curses,

00:43:29.650 --> 00:43:33.240
that you don't normally
expect to link with curses,

00:43:33.320 --> 00:43:37.180
and so you reuse goto xy or
some other curses function,

00:43:37.180 --> 00:43:40.040
then you'll get something
back from the linker saying,

00:43:40.040 --> 00:43:43.790
warning, multiple definitions of goto xy.

00:43:43.790 --> 00:43:44.760
You're saying,

00:43:46.910 --> 00:43:49.200
The only one I know of is mine.

00:43:49.460 --> 00:43:51.180
It is a warning.

00:43:51.180 --> 00:43:53.840
It's not a fatal flaw.

00:43:53.980 --> 00:43:58.670
The linker complains because
Mac developers expect it to complain.

00:43:58.680 --> 00:44:04.970
We have an option called multiply
define suppress that you can feed to the

00:44:05.380 --> 00:44:07.890
compiler and it gets passed on to linker
and that will stop the complaints.

00:44:08.430 --> 00:44:10.440
Another one that I've seen
in that same category,

00:44:10.580 --> 00:44:14.250
we have an implementation in GetOpt,
which is used to get command-line

00:44:14.250 --> 00:44:16.640
options in a standardized fashion.

00:44:16.660 --> 00:44:21.240
The lib system has a version of GetOpt,
and they had a lot of GNU tools

00:44:21.240 --> 00:44:24.380
link in their own copy of GetOpt,
so you had also warnings

00:44:24.380 --> 00:44:25.650
about duplicates there.

00:44:29.750 --> 00:44:32.400
Getting a little bit weird.

00:44:32.490 --> 00:44:37.570
So how many people knew about
designated initializers already?

00:44:39.530 --> 00:44:41.280
Yeah, that's about what I thought.

00:44:41.300 --> 00:44:45.450
They've been in GNU/C for about 10 years,
and they're basically a way to

00:44:45.630 --> 00:44:49.640
fill in an array positionally,
which is kind of cool.

00:44:49.640 --> 00:44:52.850
No need to have Cs of zeros trying
to get down to the one element you

00:44:52.850 --> 00:44:57.670
want to fill in with the character
code of A or something like that.

00:44:58.520 --> 00:44:59.360
and David L.

00:44:59.360 --> 00:45:04.180
It turns out that C99 actually has
picked up this GNU extension and it's

00:45:04.230 --> 00:45:08.160
now actually a standard part of language,
except they added an equal sign.

00:45:08.320 --> 00:45:10.870
Anyway, as it happens,
and for technical reasons that

00:45:10.870 --> 00:45:14.200
I'll be happy to rant about offline
should anybody be interested,

00:45:14.200 --> 00:45:17.960
our 295-based compiler
can't deal with this,

00:45:17.960 --> 00:45:19.520
and it will give you lots of errors.

00:45:19.520 --> 00:45:23.460
One way in which we noticed this
was in GCC version 3 itself,

00:45:23.490 --> 00:45:27.300
which uses designated initializers now,
and it complained.

00:45:27.300 --> 00:45:32.340
So this will be fixed in 3.1,
so it will no longer be an issue.

00:45:34.150 --> 00:45:37.000
DLopen is also something
that's occasionally requested.

00:45:37.000 --> 00:45:41.470
This is to open a dynamic
library programmatically.

00:45:41.470 --> 00:45:45.640
I can't remember if it's a POSIX feature,
but it's fairly common among

00:45:45.800 --> 00:45:48.060
UNIX systems in one form or another.

00:45:48.060 --> 00:45:52.500
It's not directly available, and in fact,
for technical reasons,

00:45:52.500 --> 00:45:56.520
it can't be totally emulated
by the Mach dynamic load stuff.

00:45:56.600 --> 00:45:59.080
So, in general,
what people have been doing is

00:45:59.080 --> 00:46:01.950
they emulate the functionality,
whichever part of the

00:46:01.950 --> 00:46:03.330
functionality they happen to need.

00:46:05.200 --> 00:46:08.860
Another thing that people
have bumped into is P-threads.

00:46:08.860 --> 00:46:12.050
We have P-threads,
but we don't have complete P-threads.

00:46:12.140 --> 00:46:15.200
Or perhaps a better way to say it
is we don't have all the P-thread

00:46:15.200 --> 00:46:18.590
options that all the P-thread
implementations in the world have,

00:46:18.710 --> 00:46:21.100
and so people have run
into missing options.

00:46:21.330 --> 00:46:27.560
Again, sometimes you can emulate,
sometimes you'll just have to send

00:46:27.560 --> 00:46:30.500
a bug report to Apple and say,
"Resend it every week

00:46:30.500 --> 00:46:30.500
until something happens."

00:46:32.300 --> 00:46:33.100
Feel free.

00:46:33.340 --> 00:46:38.150
We use eight-digit numbers for radar,
so there's plenty left.

00:46:41.320 --> 00:46:44.420
We're only up to about 29 million,
I guess.

00:46:44.420 --> 00:46:52.150
Anyway, namespace conflicts.

00:46:52.420 --> 00:46:56.700
It's always been possible that there
are a lot of namespace conflicts

00:46:56.880 --> 00:46:59.020
because of the way Maco works.

00:46:59.020 --> 00:47:01.320
In practice,
I haven't actually seen as many

00:47:01.440 --> 00:47:03.800
namespace conflicts as one might expect.

00:47:03.860 --> 00:47:07.800
In any case, if you run into this,
the way you'll see this is

00:47:07.800 --> 00:47:10.930
that you'll have a function,
it'll report a conflict.

00:47:11.210 --> 00:47:14.140
There's no documentation on the
function it's conflicting with.

00:47:14.140 --> 00:47:16.560
It's just in some framework.

00:47:16.560 --> 00:47:20.280
One way to deal with this then is
to use the option-2 level namespace,

00:47:20.280 --> 00:47:26.350
which introduces and makes
non-exported functions invisible.

00:47:26.910 --> 00:47:32.470
Like I said, it happens to some people,
it doesn't happen that often.

00:47:32.470 --> 00:47:35.990
But you'll know it if it does because
you have a conflict between symbol

00:47:35.990 --> 00:47:38.220
names and there's no way to fix it.

00:47:38.200 --> 00:48:22.900
[Transcript missing]

00:48:26.060 --> 00:48:29.200
So, Sean is going to give us a demo.

00:48:29.230 --> 00:48:31.570
Now,
I think the way he described it more,

00:48:31.570 --> 00:48:37.450
he was going to do all of
Mozilla and in 15 keystrokes.

00:48:37.880 --> 00:48:40.580
You rea- I don't think.

00:48:40.580 --> 00:48:44.910
Alright, what I was just going to
show here was something using

00:48:44.940 --> 00:48:47.050
configure that ran into problems.

00:48:47.220 --> 00:48:50.010
I don't know if anyone's
familiar with it,

00:48:50.050 --> 00:48:51.680
if anyone used rdist.

00:48:52.280 --> 00:48:54.440
Artist is like rsync,
which is built in the system,

00:48:54.440 --> 00:48:57.200
only where rsync pulls, artist pushes.

00:48:57.320 --> 00:49:03.000
A while ago, I had a request for artist,
and I supplied it for someone.

00:49:03.190 --> 00:49:04.790
It almost but not quite worked.

00:49:04.910 --> 00:49:06.360
Artist 7 almost not quite worked.

00:49:06.450 --> 00:49:08.190
Artist 6 just worked.

00:49:08.380 --> 00:49:10.630
I've already configured this
because it takes a while.

00:49:10.760 --> 00:49:15.810
We do a make, and it runs for a while.

00:49:16.400 --> 00:49:31.400
[Transcript missing]

00:49:35.210 --> 00:49:36.590
These are what my disks look like.

00:49:36.770 --> 00:49:39.090
Can people read that or
should I increase the size?

00:49:39.100 --> 00:49:42.710
All right.

00:49:44.140 --> 00:49:46.400
Setfop, that's 14.

00:49:46.400 --> 00:49:47.140
How about 18?

00:49:47.140 --> 00:49:48.200
Oh, there we go.

00:49:51.450 --> 00:49:53.600
All right.

00:49:53.930 --> 00:49:57.040
As you see, the first set of patches are
to the configure.in file,

00:49:57.040 --> 00:49:59.740
which is what autoconf uses to
generate the configure script,

00:49:59.830 --> 00:50:00.800
which you should then run.

00:50:00.800 --> 00:50:04.700
Most systems,
for those who are aware of them,

00:50:04.740 --> 00:50:06.440
configure comes already.

00:50:06.440 --> 00:50:07.780
You just run configure.

00:50:07.780 --> 00:50:11.140
However, if you are the developer,
you need to create the script

00:50:11.340 --> 00:50:12.780
that generates configure.

00:50:12.780 --> 00:50:18.280
There were some problems with
statfs in the original version,

00:50:18.280 --> 00:50:20.080
and this does the right thing.

00:50:20.080 --> 00:50:22.570
The other one worked,
it just wasn't as good, I thought.

00:50:23.430 --> 00:50:25.370
And there's more of this configure stuff.

00:50:25.420 --> 00:50:29.490
And there was an include of malloc.h.

00:50:29.490 --> 00:50:34.020
malloc.h is not a standard include file.

00:50:34.020 --> 00:50:35.420
You should not use it.

00:50:35.420 --> 00:50:40.850
And lastly,
artist used a function called setmode,

00:50:40.850 --> 00:50:42.760
despite the fact that
ANSI described it as setmode.

00:50:42.760 --> 00:50:47.910
So, there was that.

00:50:51.520 --> 00:50:52.500
and John Lennon.

00:50:52.500 --> 00:50:53.500
Thank you.

00:50:54.060 --> 00:51:02.500
. . . . . . . . .

00:51:04.800 --> 00:51:09.690
Anyway, autoconf to generate it.

00:51:09.730 --> 00:51:13.850
Run it again, and as everyone would see,
it just...

00:51:15.550 --> 00:51:21.340
This did not happen in my previous tests,
I'm sorry.

00:51:21.340 --> 00:51:24.130
But it worked.

00:51:27.660 --> 00:51:28.600
I do apologize.

00:51:28.600 --> 00:51:30.300
Anyway.

00:51:30.300 --> 00:51:32.330
That's generally,
I actually had to search for

00:51:32.330 --> 00:51:35.540
a while to find a well-known
program that would not compile.

00:51:35.540 --> 00:51:39.780
Most things you just run configure
and make and they do just work.

00:51:45.720 --> 00:51:46.430
Didn't I do that?

00:51:46.430 --> 00:51:49.400
Yes, in fact I did.

00:51:49.480 --> 00:51:50.110
Oh, no you didn't.

00:51:50.170 --> 00:51:51.540
Thank you.

00:51:51.540 --> 00:51:52.580
I am stupid today.

00:51:55.300 --> 00:51:56.120
Yeah, teamwork is good.

00:51:56.400 --> 00:51:56.640
Yeah.

00:51:56.640 --> 00:51:59.420
Wow, you're smarter than me.

00:51:59.470 --> 00:52:01.380
Voila, it works.

00:52:06.930 --> 00:52:08.800
Yeah,
so that's an example of how you deal

00:52:08.820 --> 00:52:10.800
with things that can be--and I did,
by the way,

00:52:10.800 --> 00:52:15.330
send the patches to this back to the
artist 7 maintainer and I have not

00:52:15.330 --> 00:52:21.860
checked recently if he folded them in
but they were small so I presume he did.

00:52:21.980 --> 00:52:22.820
Back to Stan.

00:52:23.090 --> 00:52:24.810
Thank you, Sean.

00:52:28.960 --> 00:52:32.140
So that's a, you know,
very nearly a perfect example

00:52:32.140 --> 00:52:36.040
of what actually happens,
including remembering to rerun Configure

00:52:36.040 --> 00:52:37.300
when you make these kinds of changes.

00:52:37.360 --> 00:52:40.850
Now, if the thing that Sean did
looked like gobbledygook,

00:52:40.860 --> 00:52:46.200
you know, there's actually a,
it is documented how to do this stuff,

00:52:46.370 --> 00:52:47.370
and that's what I was
going to talk about.

00:52:47.590 --> 00:52:56.090
The tool is called Autoconf,
and Autoconf is, how should I say, weird.

00:52:57.700 --> 00:53:00.000
There's a macro process called M4.

00:53:00.000 --> 00:53:02.740
The syntax is bizarre.

00:53:04.680 --> 00:53:07.370
The only excuse I can think of is that
it was developed incrementally over

00:53:07.410 --> 00:53:11.960
a number of years and so it's more
as accreted as much as anything else.

00:53:11.980 --> 00:53:14.910
But what AutoConf does
though is very powerful,

00:53:14.910 --> 00:53:18.890
which is it essentially directly
tests your system to find

00:53:19.240 --> 00:53:20.760
out what things are present.

00:53:20.820 --> 00:53:25.720
So for instance, you need to know whether
ctype.h is present.

00:53:25.720 --> 00:53:34.040
ANSI requires an ISO requires
that ctype.h be present.

00:53:34.060 --> 00:53:37.240
It's not necessarily the case that
every machine in the world has one.

00:53:37.270 --> 00:53:42.250
So what AutoConf does is it basically
synthesizes a one-line C program that

00:53:42.250 --> 00:53:46.140
just says include angle bracket ctype.h,
compiles it,

00:53:46.140 --> 00:53:47.720
and sees what the compiler said.

00:53:47.820 --> 00:53:49.640
Compiler errors out, guess what?

00:53:49.640 --> 00:53:52.970
Either ctype.h is not there or
it has a mistake in it and you

00:53:52.970 --> 00:53:54.830
don't want to use it anyway.

00:53:54.910 --> 00:53:59.840
So it then turns on a flag,
depending on how you can set up things,

00:54:00.100 --> 00:54:03.480
says something like
ctype.h not available.

00:54:03.480 --> 00:54:07.470
And then in your code you would say
something like if ctype.h available,

00:54:07.560 --> 00:54:11.280
include ctype.h else do something else,
whatever it is you need

00:54:11.280 --> 00:54:12.560
to do in your program.

00:54:13.000 --> 00:54:17.800
So the auto-conf mechanism is
essentially 100% accurate for

00:54:17.800 --> 00:54:18.990
the system you're building on.

00:54:19.000 --> 00:54:23.170
Now, it's not quite so accurate if you
need to build on a range of systems.

00:54:23.260 --> 00:54:26.480
If you're, say,
on a Jaguar system and you need

00:54:26.480 --> 00:54:30.690
to build something that works on
10.1 and Jaguar and future systems,

00:54:30.700 --> 00:54:33.690
you may have to think a little bit
harder about how to make that work.

00:54:33.800 --> 00:54:38.100
One of the things we have available
as of Jaguar is a new header

00:54:38.100 --> 00:54:40.900
file called availabilitymacros.h.

00:54:41.500 --> 00:54:46.970
And this will have a set of macros that
essentially define what's available

00:54:46.980 --> 00:54:48.440
in different versions of the OS.

00:54:48.540 --> 00:54:52.480
It has macros that are like half a
page long and they read something like,

00:54:52.670 --> 00:54:57.690
if Mac OS X 1.0 but not 10.2,
things like that.

00:54:57.960 --> 00:54:59.370
That's how they literally read.

00:54:59.420 --> 00:55:03.240
So you can use those to make something
that works across multiple versions

00:55:03.240 --> 00:55:06.520
should it be using features that
change from one version to the next.

00:55:08.540 --> 00:55:11.310
But anyway, the fortunate thing,
the nice thing about AutoConf is that

00:55:11.310 --> 00:55:14.230
it actually has a book describing it.

00:55:14.230 --> 00:55:16.540
And it was just published
a couple years ago.

00:55:16.540 --> 00:55:20.900
And it's just a standard book,
readily available.

00:55:20.900 --> 00:55:24.670
In fact, I noticed last fall in
Las Vegas in Borders Bookstore,

00:55:24.780 --> 00:55:28.280
which is not exactly what you
think of as the high-tech mecca,

00:55:28.350 --> 00:55:28.980
okay?

00:55:28.980 --> 00:55:31.440
Not Las Vegas and not
really Borders either.

00:55:31.440 --> 00:55:35.490
And they had in the entryway
where everybody coming into,

00:55:35.620 --> 00:55:39.790
going out of the store has,
and they had large numbers of this

00:55:39.990 --> 00:55:43.420
book on display for everybody to
see as they're going in and out.

00:55:44.010 --> 00:55:45.890
And I'm going, you know,
there must be a lot of

00:55:45.890 --> 00:55:47.610
AutoConf experts in Las Vegas now.

00:55:49.300 --> 00:56:03.200
[Transcript missing]

00:56:03.600 --> 00:56:07.660
This also describes AutoMake,
which is a way to synthesize

00:56:07.660 --> 00:56:10.500
Make files that a number of
people are using nowadays.

00:56:10.500 --> 00:56:13.800
And it also describes LibTool,
which I talked about earlier.

00:56:13.800 --> 00:56:17.830
It actually has a lot of stuff
about the inner secrets of LibTool.

00:56:20.120 --> 00:56:23.180
Some caveats to go along with it.

00:56:23.180 --> 00:56:24.340
So, you can be root.

00:56:24.350 --> 00:56:29.180
Is there anybody that does not
know how to become root on OS X?

00:56:29.690 --> 00:56:29.840
Good.

00:56:30.070 --> 00:56:30.280
Okay.

00:56:30.280 --> 00:56:34.060
Anyway, but now that you've created root,
you have all these responsibilities

00:56:34.060 --> 00:56:34.890
to go along with it.

00:56:35.020 --> 00:56:39.310
In particular,
it's very tempting to dink around

00:56:39.320 --> 00:56:42.190
with the system to try and get
it to compile your program.

00:56:42.220 --> 00:56:47.430
We do not recommend this in general
because you'll take that program over

00:56:47.430 --> 00:56:49.960
and somebody else will try and build it,
and they will not have the

00:56:49.960 --> 00:56:51.420
modifications on their system.

00:56:51.420 --> 00:56:57.470
So that's why we're doing sim linking
GCC to CC in the system so that

00:56:57.620 --> 00:57:00.180
every system will behave this way.

00:57:00.180 --> 00:57:04.630
I mentioned before about sim linking,
adding user include GL slash

00:57:04.790 --> 00:57:06.580
GL dot H to user include.

00:57:06.620 --> 00:57:10.610
Again, if somebody doesn't change
their system in that way,

00:57:10.810 --> 00:57:12.320
that will fail for them.

00:57:12.320 --> 00:57:14.870
So if you do this,
you need to come up with some way to,

00:57:14.970 --> 00:57:17.470
say,
have a script they can run as root and

00:57:17.470 --> 00:57:20.040
modify their system in the same way.

00:57:22.140 --> 00:57:25.900
Another thing to be aware of,
Maco object files are very different.

00:57:25.960 --> 00:57:34.670
They are a little bit like ELF,
they're a little bit like... I'm sorry,

00:57:34.670 --> 00:57:34.670
I don't have anything as
exciting as whatever they're...

00:57:35.300 --> 00:57:44.000
[Transcript missing]

00:57:45.200 --> 00:58:43.500
[Transcript missing]

00:58:43.760 --> 00:58:44.480
is... Pardon?

00:58:44.480 --> 00:58:46.120
Oh, Python.

00:58:46.120 --> 00:58:46.480
That's right.

00:58:46.480 --> 00:58:46.990
Okay.

00:58:46.990 --> 00:58:47.820
I'm sorry.

00:58:47.820 --> 00:58:49.360
Incorrectly slandering Perl.

00:58:49.360 --> 00:58:54.320
It's Python that I want to slander.

00:58:54.320 --> 00:58:54.320
Okay.

00:58:54.510 --> 00:59:00.240
and actually there was another
similar case that actually happens

00:59:00.240 --> 00:59:04.520
in the GCC sources themselves,
but they have a library called libffi,

00:59:04.520 --> 00:59:07.560
which is supposed to call
from Java to native C code,

00:59:07.660 --> 00:59:12.980
and somebody in there just had to have a
mips.s lowercase and a mips.s uppercase.

00:59:12.980 --> 00:59:18.780
So you check this out from
the FSF onto your HFS volume,

00:59:18.780 --> 00:59:20.640
and CVS doesn't like it at all.

00:59:21.720 --> 00:59:22.990
It says you've got a conflicting file.

00:59:23.000 --> 00:59:25.520
Every time you check it out or update,
you've got a conflicting file.

00:59:25.520 --> 00:59:27.000
Yes, I know it's a conflicting file.

00:59:27.000 --> 00:59:28.720
And it works fine on UFS.

00:59:28.720 --> 00:59:31.570
So if you're not aware,
your buddy that just happened to be

00:59:31.660 --> 00:59:35.200
building something on a UFS partition,
everything works fine,

00:59:35.200 --> 00:59:37.890
and on yours it messes up
for some strange reason.

00:59:41.670 --> 00:59:46.600
So to talk a little bit about debugging,
Mac OS X debugger is GDB.

00:59:46.600 --> 00:59:50.200
It's currently based
on the FSF 5.0 release.

00:59:50.250 --> 00:59:52.920
And for Jaguar,
I believe it's based on 5.1.

00:59:52.920 --> 00:59:53.450
Is that right?

00:59:53.480 --> 00:59:53.660
Yeah.

00:59:53.660 --> 00:59:57.400
And it has a lot of additional commands.

00:59:57.480 --> 00:59:59.560
Don't have space to go into them all.

00:59:59.630 --> 01:00:02.700
There's a session on Friday that
we'll talk about that.

01:00:02.850 --> 01:00:05.360
We have a future breakpoint
that you can set for code that

01:00:05.520 --> 01:00:06.830
hasn't been loaded in yet.

01:00:06.840 --> 01:00:09.080
We can print an obc object.

01:00:09.160 --> 01:00:11.550
And actually,
it's almost like a refurbishment.

01:00:11.680 --> 01:00:13.720
reflection kind of thing.

01:00:13.780 --> 01:00:18.700
You can ask for information on
all kinds of properties of Mach,

01:00:19.090 --> 01:00:20.700
such as the Mach tasks.

01:00:20.970 --> 01:00:24.500
I found info Mach tasks to be kind
of interesting because it actually

01:00:24.610 --> 01:00:27.700
lists all the tasks including the
ones that don't belong to you.

01:00:27.700 --> 01:00:30.640
But I didn't actually go in and
try to see what I could do to the

01:00:30.700 --> 01:00:32.320
tasks that don't belong to me.

01:00:32.320 --> 01:00:34.240
That seemed like an opportunity.

01:00:38.610 --> 01:00:40.930
We've heard quite a
bit about GCC3 already.

01:00:40.930 --> 01:00:45.260
I'll just cover a couple bits that
are specific to the command line.

01:00:45.260 --> 01:00:49.040
The old one is based on 295.

01:00:49.040 --> 01:00:52.560
The new one will be based on 3.1,
unless the FSFP will drag their

01:00:52.670 --> 01:00:55.450
feet any longer on the 3.1 release.

01:00:56.040 --> 01:00:59.190
We have the optimization C++ conformance.

01:00:59.300 --> 01:01:02.520
We have what's called
PFE for precompiled headers.

01:01:02.520 --> 01:01:03.620
It's a different strategy.

01:01:03.620 --> 01:01:06.960
I forgot to mention the
command-line option.

01:01:06.960 --> 01:01:12.620
The command-line options are "-dump
pch to write out the headers and then

01:01:12.630 --> 01:01:15.550
"-load pch to load them in again.

01:01:15.600 --> 01:01:19.040
The release notes for Jaguar
will go into that in more depth.

01:01:22.480 --> 01:01:24.860
There is something that's important
to know about this though,

01:01:24.970 --> 01:01:29.640
which is in this transitional period,
there are a number of places

01:01:29.750 --> 01:01:31.640
where you can get hosed by GCC3.

01:01:32.000 --> 01:01:34.800
For instance, its optimization
characteristics are different.

01:01:34.940 --> 01:01:38.850
O3, for instance, will inline code,
could cause your program to bloat.

01:01:39.000 --> 01:01:47.750
There are C++ conformance issues where
GCC2 let things go and GCC3 says,

01:01:47.750 --> 01:01:49.270
"Uh-uh, not going to allow that."

01:01:49.680 --> 01:01:52.840
So your code simply fails to compile.

01:01:52.850 --> 01:01:55.900
Indeed, in our very own OS X sources,
we ran into a few of those and

01:01:55.950 --> 01:01:58.180
people had to go fix their code.

01:01:58.200 --> 01:02:02.570
Anyway, so as a workaround,
we set things up so that both

01:02:02.710 --> 01:02:04.760
compilers will be available in Jaguar.

01:02:04.780 --> 01:02:10.820
And this will be true of the ship Jaguar
as well as the previews that you have.

01:02:10.890 --> 01:02:15.630
So the rule is 2952 is always going
to be available at userbin/gcc2.

01:02:15.630 --> 01:02:18.640
That's the permanent
home of the executable.

01:02:18.650 --> 01:02:23.180
Latest of the version 3,
this will go for 3.2, 3.3 or whatever,

01:02:23.180 --> 01:02:25.500
userbin/gcc3.

01:02:25.510 --> 01:02:30.080
Then we take userbin/cc and gc and
we symlink to one or the other.

01:02:30.090 --> 01:02:33.570
And then to switch back and forth,
we have a script called gccselect.

01:02:33.740 --> 01:02:36.480
And you just say gcselect2, gcselect3.

01:02:36.500 --> 01:02:39.020
And this will flip all the symlinks.

01:02:39.080 --> 01:02:44.020
So you can have a makefile that,
if it refers to gc2 literally,

01:02:44.040 --> 01:02:45.760
then you can just,
you can always refer to that.

01:02:45.760 --> 01:02:47.680
You don't have to worry
about the switching.

01:02:47.680 --> 01:02:51.220
Anything where you just want to
refer to cc and try it both ways,

01:02:51.270 --> 01:02:52.230
select script is available.

01:02:52.450 --> 01:02:54.240
And again,
that's something where it's going

01:02:54.240 --> 01:02:57.560
to be part of Jaguar for some time.

01:02:59.460 --> 01:03:02.760
For Project Builder,
we do have a way to pull in legacy

01:03:02.760 --> 01:03:04.800
targets into Project Builder.

01:03:04.890 --> 01:03:06.790
It sets up a lot of defaults and flags.

01:03:06.790 --> 01:03:09.290
It gives you easier
access to documentation.

01:03:09.350 --> 01:03:13.700
As I mentioned earlier,
there is a PBX build command.

01:03:13.700 --> 01:03:14.300
Sean will do the demo.

01:03:14.300 --> 01:03:22.240
I have to apologize for
showing the GUI in this.

01:03:31.800 --> 01:03:38.510
This was actually the largest part of
the demo and I was going to demonstrate,

01:03:38.510 --> 01:03:38.510
if I

01:03:43.100 --> 01:03:45.100
I lost my terminal, didn't I?

01:03:45.140 --> 01:03:50.460
Sorry.

01:03:50.460 --> 01:03:53.210
And I forgot to change that too.

01:03:54.940 --> 01:03:58.020
But it's real easy to do so if we
remember the command and can read it.

01:03:58.180 --> 01:03:59.140
Alt, right.

01:03:59.180 --> 01:04:02.090
True aficionados put
Terminal in their startup.

01:04:11.500 --> 01:04:18.190
I can never remember the path to the
project builder script-- or program,

01:04:18.190 --> 01:04:20.010
I should say, so...

01:04:30.100 --> 01:04:31.410
Project Builder.

01:04:31.670 --> 01:04:35.130
As Stan just said,
one of the things you can

01:04:35.130 --> 01:04:39.720
do is use Project Builder to
build a legacy application,

01:04:39.890 --> 01:04:43.720
which is your normal
UNIX-type application.

01:04:43.750 --> 01:04:45.280
So we'll do that.

01:04:45.280 --> 01:04:47.610
Set all the defaults here.

01:04:47.610 --> 01:04:48.390
Great.

01:04:48.390 --> 01:04:51.160
We don't need the release notes.

01:04:51.240 --> 01:04:53.170
Create a new project.

01:04:53.170 --> 01:04:56.430
We're going to create an empty project
because it's not one of the others.

01:04:56.900 --> 01:05:01.350
and David The thing I'm going
to be wrapping this round is

01:05:01.360 --> 01:05:03.680
the GNU Hello World program.

01:05:03.680 --> 01:05:05.850
And you may think that
a Hello World program

01:05:05.940 --> 01:05:08.890
wouldn't be very complex,
but this is GNU.

01:05:08.900 --> 01:05:14.750
So what did I call it?

01:05:18.810 --> 01:05:21.700
Now, first thing we need to
do is get the files.

01:05:21.700 --> 01:05:25.740
And I have this under new project,
add files.

01:05:25.740 --> 01:05:27.210
Thank you.

01:05:30.470 --> 01:05:32.580
There are the files that I've gotten.

01:05:32.640 --> 01:05:34.480
Just select them all.

01:05:34.520 --> 01:05:36.090
Add.

01:05:37.380 --> 01:05:40.340
We want to copy rather
than just refer to them,

01:05:40.340 --> 01:05:42.800
so that we'll copy the files in there.

01:05:43.060 --> 01:05:43.390
We're all done.

01:05:43.390 --> 01:05:44.650
Actually, we're not.

01:05:44.690 --> 01:05:47.760
The first thing you need to do
with the GNU Hello World program

01:05:47.760 --> 01:05:49.000
is you need to configure it.

01:05:49.000 --> 01:05:52.470
So we will add a new target.

01:05:53.400 --> 01:06:04.500
[Transcript missing]

01:06:05.250 --> 01:06:10.980
and Ben Sch will be the program managers.

01:06:11.270 --> 01:06:16.600
and the action is ./configure and we
need to tell it which directory to use.

01:06:16.600 --> 01:06:17.420
And it's already there.

01:06:17.540 --> 01:06:19.200
We're all done.

01:06:19.290 --> 01:06:20.900
Don't sit there.

01:06:20.960 --> 01:06:24.120
And now let's build it.

01:06:24.500 --> 01:06:28.260
And as you can see, it ran configure.

01:06:28.260 --> 01:06:31.980
That was almost as easy as
doing it from the command line.

01:06:33.230 --> 01:06:34.820
Now that we've done the configure,
however,

01:06:34.940 --> 01:06:37.070
we actually want to build the program.

01:06:37.110 --> 01:06:39.620
So we do a new target, again,
a legacy makefile.

01:06:39.730 --> 01:06:46.340
Let's call this one
hello because that's what

01:06:46.610 --> 01:06:48.540
All the actions are right.

01:06:48.540 --> 01:06:51.590
We want to set the directory because
otherwise it will use the build directory

01:06:51.590 --> 01:06:53.600
and the program wouldn't be there.

01:06:53.940 --> 01:06:55.590
Now, we build.

01:06:55.590 --> 01:06:59.970
Oops,
first we have to select the right target.

01:07:00.300 --> 01:07:02.300
and Let's try building it again.

01:07:02.300 --> 01:07:03.300
And there.

01:07:03.300 --> 01:07:05.540
And now we can run it.

01:07:05.540 --> 01:07:05.540
Accept.

01:07:05.870 --> 01:07:08.690
We have not set the executable,
so there's nothing to run.

01:07:08.730 --> 01:07:11.170
Setting the executable is easy.

01:07:12.500 --> 01:07:24.100
[Transcript missing]

01:07:25.700 --> 01:07:35.300
[Transcript missing]

01:07:45.160 --> 01:07:48.680
Build and Run.

01:07:49.740 --> 01:07:51.370
And look, it printed "Hello World!"

01:07:54.530 --> 01:07:57.340
Now that might seem like a whole
lot of work for just Hello World,

01:07:57.350 --> 01:07:58.780
and you'd probably be right.

01:07:58.780 --> 01:08:01.680
However,
if you have a more complicated program,

01:08:01.680 --> 01:08:06.600
you could then use this to set the,
use the nice graphical

01:08:06.600 --> 01:08:09.240
interface to the debugger,
which I admit is pretty nice,

01:08:09.240 --> 01:08:12.130
and almost as nice as Emacs
interface to the debugger,

01:08:12.130 --> 01:08:14.020
which is my personal favorite.

01:08:14.020 --> 01:08:19.080
There's always VI's
interface to the debugger.

01:08:19.100 --> 01:08:21.600
Bang bang GDB.

01:08:21.600 --> 01:08:24.900
And voila, and that's my demo.

01:08:24.900 --> 01:08:26.290
I think that's it.

01:08:35.600 --> 01:08:42.600
The interesting part about
GNU Hello is it's actually a template.

01:08:42.600 --> 01:08:46.100
It's not to the point
that it does anything,

01:08:46.100 --> 01:08:49.400
but it provides a template for what a
GNU program is supposed to look like.

01:08:50.800 --> 01:09:01.900
[Transcript missing]

01:09:06.040 --> 01:09:07.000
Thank you, Stan and Sean.

01:09:07.000 --> 01:09:10.400
Unfortunately,
we have extremely little time.

01:09:10.400 --> 01:09:13.270
We started late due to a
small electrical problem,

01:09:13.270 --> 01:09:15.770
so we will not have time today for Q&A.

01:09:15.850 --> 01:09:18.840
Just for your information,
technical documentation command

01:09:18.840 --> 01:09:22.100
line tools all have man pages,
and you obtain that man page at

01:09:22.100 --> 01:09:25.130
the terminal prompt man tool name,
as on any Unix system.

01:09:25.130 --> 01:09:28.430
There are reference documentation
also in the developer

01:09:28.430 --> 01:09:32.410
documentation dev tools directory,
and there's specific detailed

01:09:32.410 --> 01:09:36.020
information for the compiler,
preprocessor, GDB, the macro runtime,

01:09:36.110 --> 01:09:40.550
and these are all available
in PDF and HTML forms.

01:09:41.000 --> 01:09:44.780
More information is available
through various URL tools.

01:09:44.810 --> 01:09:48.150
These are all wrapped together
onto the master URL list,

01:09:48.430 --> 01:09:50.110
which we list

01:09:50.360 --> 01:09:51.300
for everyone.

01:09:51.300 --> 01:09:52.050
A roadmap.

01:09:52.060 --> 01:09:53.600
Next sessions to look at.

01:09:53.600 --> 01:09:57.070
For porting UNIX apps to Mac OS X,
there's a session immediately

01:09:57.190 --> 01:09:59.300
following this in Civic Auditorium.

01:09:59.300 --> 01:10:04.280
We have a feedback forum for technical
documentation tomorrow as well as the

01:10:04.280 --> 01:10:09.140
first of our project builder forums
and our performance tools tomorrow.

01:10:09.200 --> 01:10:11.740
I'd be delighted to see you all there.

01:10:11.740 --> 01:10:15.100
And with that,
we're going to have to end the session

01:10:15.170 --> 01:10:16.790
because we are already over time.

01:10:16.790 --> 01:10:16.790
Thank you very much for attending.