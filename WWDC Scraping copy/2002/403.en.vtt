WEBVTT

00:00:12.680 --> 00:00:17.120
So today, this is sort of a layered look
at the Java deployment options

00:00:17.120 --> 00:00:18.750
that are available to you.

00:00:18.780 --> 00:00:21.250
You can build a
double-clickable application,

00:00:21.270 --> 00:00:24.850
you can build a WebStart application,
or you can build an applet and

00:00:24.950 --> 00:00:28.780
deploy it either through a web
browser or through Applet Launcher.

00:00:30.810 --> 00:00:32.520
For this talk,
we're going to focus on the

00:00:32.610 --> 00:00:36.680
right two-thirds of this chart,
specifically WebStart and applets.

00:00:38.550 --> 00:00:43.550
If we focus a little bit
more on applets today,

00:00:43.550 --> 00:00:47.000
you see that if you have an applet
that you're trying to deploy,

00:00:47.000 --> 00:00:48.780
you have a couple of
options available to you.

00:00:49.040 --> 00:00:51.120
You can use Internet Explorer.

00:00:51.120 --> 00:00:54.120
You can use any other application
that takes advantage of the

00:00:54.170 --> 00:00:55.680
Java embedding framework.

00:00:55.680 --> 00:00:58.830
Or you can use Applet Launcher,
which is available in

00:00:58.830 --> 00:01:00.520
applications utilities.

00:01:01.970 --> 00:01:05.540
Now Internet Explorer and
other applications work atop

00:01:05.650 --> 00:01:08.900
the embedding framework,
which ultimately works on top

00:01:08.900 --> 00:01:12.260
of sun.applet.appletviewer.

00:01:12.690 --> 00:01:16.010
Applet Launcher talks directly
to sun.applet.appletviewer,

00:01:16.120 --> 00:01:20.380
and you get a good, basic,
double-clickable Applet Launcher.

00:01:24.520 --> 00:01:26.580
So,
how should you code your web page if you

00:01:26.610 --> 00:01:28.540
want an applet to show up inside of that?

00:01:29.500 --> 00:01:31.360
Well, for us it's pretty easy.

00:01:31.360 --> 00:01:32.950
You just use the applet tag.

00:01:32.950 --> 00:01:37.270
You know, you go to Sun's tutorial,
read up about how to deploy applets,

00:01:37.270 --> 00:01:38.860
how to get applets to show up.

00:01:38.940 --> 00:01:43.880
Everything you see on Sun's
website is exactly what you need

00:01:44.180 --> 00:01:46.920
to do right now in Mac OS X.

00:01:49.290 --> 00:01:50.460
Some things to remember.

00:01:50.490 --> 00:01:56.180
Remember that the AWT widgets
have the Aqua look and feel.

00:01:56.200 --> 00:01:58.380
Therefore,
it's a really bad thing to hard code

00:01:58.830 --> 00:02:01.400
component sizes into your applet.

00:02:01.430 --> 00:02:04.710
A Aqua button is not going to
be the same size as a window

00:02:04.710 --> 00:02:06.600
button or a motif button.

00:02:08.930 --> 00:02:11.490
Furthermore,
if you use some JavaScript to

00:02:11.490 --> 00:02:16.570
detect what platform you're on,
know that if you've detected Mac OS X,

00:02:16.570 --> 00:02:20.080
you have Java 1.3.1.

00:02:20.080 --> 00:02:21.880
You don't have to ask
if there's a plug-in.

00:02:21.880 --> 00:02:24.780
You don't have to ask what
browser you're running on.

00:02:24.790 --> 00:02:28.270
You can just know that
you're running on Mac OS X.

00:02:33.000 --> 00:02:36.200
If you're writing an
applet in a browser today,

00:02:36.200 --> 00:02:39.400
you should know that you have pretty
much the same functionality as

00:02:39.400 --> 00:02:43.890
you can get out of UserBin Applet
Viewer or the Applet Launcher.

00:02:43.940 --> 00:02:46.850
By this, it means that your applet
will get the basic init,

00:02:46.910 --> 00:02:53.760
start, stop,
respond to events the way you want it to.

00:02:53.760 --> 00:02:53.760
The main addition

00:02:55.930 --> 00:03:01.100
First you should know that all outputs,
system.out, system.air,

00:03:01.100 --> 00:03:03.500
goes to the console application.

00:03:05.970 --> 00:03:10.870
The additional thing is that we support
signed applets inside Internet Explorer.

00:03:11.100 --> 00:03:13.440
You can use Netscape or
Internet Explorer-style signing.

00:03:14.800 --> 00:03:17.020
If you sign your applet
to work on Windows,

00:03:17.020 --> 00:03:20.340
it will work on Mac OS X without
any modification.

00:03:20.340 --> 00:03:23.510
Use an RSA-style signature
for your JAR files.

00:03:27.010 --> 00:03:30.500
And that is actually the main
functionality that we provide

00:03:30.500 --> 00:03:33.460
over and above what you can get
with the basic applet viewer.

00:03:36.320 --> 00:03:38.620
Now Java WebStart,
which is something we first

00:03:38.620 --> 00:03:42.630
started shipping in Mac OS 10.1,

00:03:43.900 --> 00:03:46.990
Java WebStart is an application
as opposed to an applet

00:03:47.090 --> 00:03:48.700
deployment technology.

00:03:48.700 --> 00:03:52.750
I put it that way because, yes,
you can deploy applets

00:03:52.960 --> 00:03:54.550
with Java WebStart.

00:03:55.030 --> 00:04:00.720
It's much more powerful than
an applet deployment mechanism.

00:04:00.720 --> 00:04:06.060
So I think if you have something that
really needs to be an application,

00:04:06.060 --> 00:04:08.130
you should really start taking
a look at Java WebStart.

00:04:11.370 --> 00:04:12.940
gives you one-click
launching from the browser.

00:04:13.010 --> 00:04:17.800
You click from a JNLP file
link in a web page,

00:04:17.830 --> 00:04:20.440
it will launch Java WebStart,
your application will start up,

00:04:20.450 --> 00:04:22.480
and all the resources will
start downloading for you.

00:04:24.770 --> 00:04:27.550
Scott Adler,
and it's got a dynamic updating

00:04:27.550 --> 00:04:29.900
mechanism built into it already.

00:04:32.450 --> 00:04:34.760
I call it platform neutral
but not platform ignorant.

00:04:34.760 --> 00:04:39.460
By that I mean that you can set
up your WebStart application.

00:04:39.460 --> 00:04:42.950
You can configure it
such that on Mac OS X,

00:04:43.050 --> 00:04:47.020
if there are some additional
features that you want to provide,

00:04:47.120 --> 00:04:50.140
like say you only want to
provide only QuickTime for Java,

00:04:50.310 --> 00:04:52.650
where it makes sense, for example.

00:04:52.860 --> 00:04:56.830
Well, on Mac OS X and Windows,
you can do that and you can ease

00:04:56.830 --> 00:05:02.230
the download burden on your user by
only configuring the applications

00:05:02.240 --> 00:05:04.700
so that only those platforms
get those specific resources.

00:05:04.740 --> 00:05:07.470
We'll talk briefly about how to do that.

00:05:09.530 --> 00:05:13.400
The best advice I can offer you is you
should use WebStart when the browser

00:05:13.400 --> 00:05:15.940
and its limitations get in the way.

00:05:16.710 --> 00:05:22.780
WebStart will let you read and
write files from the user's disk,

00:05:22.860 --> 00:05:25.430
it will let you print,
it will do a lot of the things that an

00:05:25.430 --> 00:05:28.100
applet normally just will not let you do.

00:05:28.100 --> 00:05:31.820
You can do this from an
unsigned WebStart application,

00:05:31.820 --> 00:05:36.900
but you can take advantage of
WebStart's functionality that will

00:05:37.070 --> 00:05:39.350
let you ask the user if it's all
right to do these things first.

00:05:39.400 --> 00:05:44.080
as opposed to an applet where you just
get a security exception saying no.

00:05:48.090 --> 00:05:50.410
Remember that on Mac OS X,
the end-user's desktop is

00:05:50.500 --> 00:05:53.040
already ready to go for a
WebStart application deployment.

00:05:53.040 --> 00:05:56.780
They don't have to go to any
website and download a package,

00:05:56.790 --> 00:05:57.840
download a Java VM.

00:05:57.840 --> 00:05:58.710
It's all just there.

00:05:58.730 --> 00:06:00.850
You can use it out of the box.

00:06:03.080 --> 00:06:05.780
Now, in most deployment situations,
there's no special server

00:06:05.780 --> 00:06:06.860
support needed either.

00:06:06.860 --> 00:06:11.480
You can just put your JNLP file and
the JAR files up on your web server,

00:06:11.570 --> 00:06:14.680
and they will download,
and you're ready to go.

00:06:14.680 --> 00:06:16.480
WebStart can download them.

00:06:16.510 --> 00:06:19.520
Now,
if you do use Apache on OS X and Puma,

00:06:19.730 --> 00:06:23.160
you will need to configure Apache so
that it knows how to send out the

00:06:23.160 --> 00:06:25.220
correct MIME type for the JNLP file.

00:06:25.330 --> 00:06:27.150
That's being fixed in Jaguar.

00:06:27.150 --> 00:06:30.510
You won't have to do anything about that.

00:06:34.150 --> 00:06:38.840
And I mentioned here there are optional
deployment tools available from Sun.

00:06:38.840 --> 00:06:41.600
You can set up what's
called a download server.

00:06:41.600 --> 00:06:46.420
It'll let you do things like,
you can set up things called jar dips,

00:06:46.420 --> 00:06:49.960
so you can download only the portions
of the jar files that have changed.

00:06:49.990 --> 00:06:50.960
That's all pure Java.

00:06:50.960 --> 00:06:54.520
That's all operable from a servlet
which you can install and it'll just

00:06:58.900 --> 00:07:02.740
As I mentioned, you can install
Mac OS X-specific resources.

00:07:02.760 --> 00:07:04.880
And to do that, it's very easy.

00:07:04.910 --> 00:07:09.200
In your JNLP file,
you add another resources tag,

00:07:09.450 --> 00:07:12.770
I'm sorry, another resources element,
and it has an attribute

00:07:12.770 --> 00:07:14.310
of OS equals Mac OS X.

00:07:14.320 --> 00:07:16.110
That's all you need to do.

00:07:16.320 --> 00:07:18.500
And in that,
you can add any additional jars,

00:07:18.500 --> 00:07:22.120
any additional images,
properties that only apply to Mac OS X,

00:07:22.130 --> 00:07:22.900
and so on.

00:07:26.300 --> 00:07:33.020
Now, this is just sort of
a bigger picture view.

00:07:33.720 --> 00:07:40.300
That attribute corresponds
to the OS.name property.

00:07:40.300 --> 00:07:41.690
So if you want to do
this on other platforms,

00:07:41.750 --> 00:07:47.990
just know what the OS.name is,
and you can set up your JNLP for just

00:07:48.200 --> 00:07:51.320
about any platform you need to deploy on.

00:07:53.860 --> 00:07:56.100
An important distinction,
we do not support the

00:07:56.130 --> 00:07:57.100
downloading of a JRE.

00:07:57.100 --> 00:08:01.540
That's because the Java has already
been installed for you on OS X.

00:08:02.100 --> 00:08:05.280
If you try to request a
version that doesn't exist,

00:08:05.320 --> 00:08:06.050
you will get an error.

00:08:06.200 --> 00:08:08.500
I'm sorry, the user will get an error.

00:08:08.580 --> 00:08:12.910
And it'll handle the
situation gracefully,

00:08:12.920 --> 00:08:15.310
is what we're trying to say here.

00:08:16.910 --> 00:08:23.550
Now with 1.4,
the pre-release that's available today,

00:08:23.920 --> 00:08:27.070
We have not updated WebStart or
haven't really done anything to

00:08:27.070 --> 00:08:31.600
specifically support that 1.4.

00:08:32.020 --> 00:08:35.220
I think by the time Jaguar ships
will be ready to be able to deal

00:08:35.220 --> 00:08:38.140
with that switching as needed.

00:08:41.400 --> 00:08:44.080
Now remember that in a
WebStart application,

00:08:44.150 --> 00:08:46.680
you can also include native libraries.

00:08:46.680 --> 00:08:51.280
Those native libraries must be bundled
in a jar file and they must be signed.

00:08:51.280 --> 00:08:55.120
Now on Mac OS X,
all your JNI libraries end in .jnilib.

00:08:55.120 --> 00:08:57.090
So that's what we will look for.

00:08:57.250 --> 00:09:00.720
It has to end in .jnilib for
us to load it as a native

00:09:00.720 --> 00:09:03.180
resource for your application.

00:09:05.380 --> 00:09:07.230
Okay, right now I want to
bring up Sean Allen and

00:09:07.310 --> 00:09:08.750
Jared Kaplan from TechEdence.

00:09:08.750 --> 00:09:11.120
We're going to show you,
you've seen some of their

00:09:11.150 --> 00:09:13.880
demos in earlier sessions,
and they're going to show you about

00:09:13.880 --> 00:09:16.340
how you can use TechEdence with
WebStart and some of the other cooler

00:09:16.340 --> 00:09:17.860
features that are available to you.

00:09:22.600 --> 00:09:28.700
So we're here from TechEdence to show
you our application authoring tool,

00:09:28.700 --> 00:09:33.400
which creates Java applications.

00:09:33.400 --> 00:09:37.340
Basically what we can do is
build applications out of

00:09:37.460 --> 00:09:41.360
pre-compiled Java objects,
and our engine sort of lets these

00:09:41.400 --> 00:09:47.180
applications be a living thing that
can be manipulated easily at runtime

00:09:47.220 --> 00:09:50.600
and wired together using JavaScript.

00:09:50.600 --> 00:09:53.620
I think you're on the... You're all set.

00:09:53.660 --> 00:09:53.660
Go ahead.

00:09:53.660 --> 00:09:54.660
Am I live?

00:09:54.730 --> 00:09:56.660
Yeah, go ahead.

00:09:56.660 --> 00:09:57.660
Okay.

00:09:57.660 --> 00:10:00.900
So we're just going to -- the
reason we're here at this session

00:10:00.900 --> 00:10:05.160
is because we can publish using
Java WebStart as an option.

00:10:05.300 --> 00:10:08.970
So what you're looking at
here is our object browser,

00:10:08.970 --> 00:10:12.440
and it basically has a default
template with a window,

00:10:12.440 --> 00:10:14.730
and if you click on the window,
you see the properties.

00:10:14.810 --> 00:10:18.280
So we have a property editor,
and you can turn down the window and

00:10:18.280 --> 00:10:20.720
see the objects below it and so on.

00:10:20.800 --> 00:10:24.330
And if we open the window,
we can actually edit the

00:10:24.330 --> 00:10:26.720
window in the spatial editor.

00:10:27.480 --> 00:10:32.140
So if we go to the scrapbooks,
Magic comes with about 80 sort of

00:10:32.240 --> 00:10:36.400
atomic objects that you can use
to build other objects out of.

00:10:36.400 --> 00:10:42.400
They support user interface
as well as importing Java code

00:10:42.400 --> 00:10:45.400
and web services and media.

00:10:45.400 --> 00:10:48.360
And so first off,
maybe we'll just drag out a

00:10:48.360 --> 00:10:56.390
couple simple UI elements,
maybe a slider and a couple of buttons.

00:10:58.450 --> 00:11:02.930
So as we drop the button
and drag and drop it in,

00:11:02.930 --> 00:11:07.200
and the slider as well,
you can see that the application's

00:11:07.200 --> 00:11:09.840
actually sort of being built live.

00:11:09.840 --> 00:11:14.040
If you go to the instant preview mode,

00:11:15.340 --> 00:11:17.480
The buttons are going
to be live right away,

00:11:17.480 --> 00:11:20.220
so we can see that they're going to work.

00:11:20.360 --> 00:11:23.400
But what we'll do is import
some media really quickly.

00:11:23.400 --> 00:11:26.840
If we can grab a
QuickTime movie and drop it in.

00:11:28.890 --> 00:11:33.120
We like running Magic on OS X because
we can take advantage of the QuickTime,

00:11:33.200 --> 00:11:38.150
the AquaUI,

00:11:38.650 --> 00:11:41.600
Java WebStart,
all bundled and ready to go.

00:11:41.630 --> 00:11:44.420
So Jared just brought
in a QuickTime movie.

00:11:44.460 --> 00:11:50.190
And now to add some functionality easily,
he's going to use the patch tool to

00:11:50.190 --> 00:11:53.620
select and patch the slider and the
buttons to properties of the movie.

00:11:53.620 --> 00:11:58.960
So as he clicks on the slider,
he can choose the percentage value

00:11:58.960 --> 00:12:02.950
of the slider and then control any
object that's on the screen here

00:12:02.950 --> 00:12:04.860
so he can control the current time.

00:12:04.880 --> 00:12:12.390
And then he's going to hook up the
buttons to start and stop the movie.

00:12:13.000 --> 00:12:31.800
[Transcript missing]

00:12:32.190 --> 00:12:34.760
So that's sort of showing some
media and some UI elements,

00:12:34.880 --> 00:12:37.860
but we wanted to show some web services.

00:12:37.930 --> 00:12:43.420
So let's try doing --
bringing in some web services.

00:12:43.700 --> 00:12:48.730
Yeah, I think I'll just build a simple
web service application here.

00:12:48.870 --> 00:12:51.980
I'll start off just by
creating a new document.

00:12:52.740 --> 00:12:55.730
When we create a new document,
we have a bunch of preset

00:12:55.730 --> 00:12:58.060
templates that are made.

00:12:58.060 --> 00:13:02.190
We'll just start off by creating
a new basic application.

00:13:03.500 --> 00:13:09.090
And we get, you can see here,
a new empty template application.

00:13:09.320 --> 00:13:16.110
What I want to do is bring in
another type of media here.

00:13:16.500 --> 00:13:18.410
It's a web service description file.

00:13:18.470 --> 00:13:20.420
It's a WSDL.

00:13:20.470 --> 00:13:23.340
And I'm going to bring
in a pretty simple one.

00:13:23.340 --> 00:13:26.760
Most of these web services that
we pulled off of X methods,

00:13:26.760 --> 00:13:30.500
so they're just standard services
available out there already.

00:13:30.500 --> 00:13:34.330
So when I drag in the WSDL file,
you can see it gives me an option to

00:13:34.330 --> 00:13:36.480
import it as a web service object.

00:13:36.580 --> 00:13:38.510
So I'll select that.

00:13:48.600 --> 00:13:51.320
And you can see it shows up
here in the window editor.

00:13:51.550 --> 00:13:55.550
Also, in the structure view,
you'll see the web service object here.

00:13:55.570 --> 00:14:00.000
And what it does is parses out WSDL file
and pulls out all the methods that

00:14:00.000 --> 00:14:02.060
are available in the web service.

00:14:02.060 --> 00:14:05.840
And here you can see a get
traffic method and just an

00:14:05.840 --> 00:14:08.980
asynchronous result of that service.

00:14:09.080 --> 00:14:11.990
And so what we'll do is just
go ahead and bring back up

00:14:11.990 --> 00:14:14.030
that user interface scrapbook.

00:14:14.040 --> 00:14:19.980
And what I want to do is
bring out a text field.

00:14:19.980 --> 00:14:23.830
Now I know that this web service,
what it does is it takes a highway

00:14:23.830 --> 00:14:29.820
number and it'll go out and find the
traffic information for that highway.

00:14:29.840 --> 00:14:32.860
And so using that patch tool that
Sean was talking about earlier,

00:14:32.880 --> 00:14:38.860
I'll just select the text field
and choose to take the text value.

00:14:38.860 --> 00:14:43.890
And I'll just connect it right into that
web service into the get traffic method.

00:14:44.670 --> 00:14:51.590
And now what I need to do is bring
out another text area that we can

00:14:51.820 --> 00:14:55.600
put the results in from that service.

00:14:55.600 --> 00:14:56.990
So I'll do that.

00:14:57.020 --> 00:15:00.330
Resize this, make it a little bit bigger.

00:15:00.600 --> 00:15:05.000
And then patch from that web
service object the result.

00:15:05.020 --> 00:15:08.820
And just take that value
and patch it right into the

00:15:09.280 --> 00:15:11.820
text value of the text area.

00:15:11.910 --> 00:15:14.040
And so now when we go
into the preview mode,

00:15:14.110 --> 00:15:19.310
you can see what the
traffic's like on 101.

00:15:26.700 --> 00:15:32.200
[Transcript missing]

00:15:41.340 --> 00:15:48.910
If we had a network cable,
that was plugged into the...

00:16:12.200 --> 00:16:17.130
When we are connected to the
network and that's working,

00:16:17.160 --> 00:16:19.200
that's how you do it.

00:16:19.200 --> 00:16:28.020
At least you know it's
not a canned demo now.

00:16:28.020 --> 00:16:30.940
Our software actually,
sometimes it doesn't

00:16:33.620 --> 00:16:35.660
So I guess what -- no,
we don't have that web

00:16:35.660 --> 00:16:36.900
service to show you.

00:16:36.900 --> 00:16:40.690
I can show you actually a similar thing.

00:16:40.770 --> 00:16:43.700
Besides bringing in web services,
we actually -- we can also bring

00:16:43.750 --> 00:16:47.310
in just Java code directly,
and it's handled in a

00:16:47.370 --> 00:16:49.460
really similar fashion.

00:16:49.460 --> 00:16:54.940
So if we had, say, a Java class we wrote,
stuck it in a jar, and it actually,

00:16:54.940 --> 00:16:57.580
you know,
could fake it and return a web service,

00:16:57.580 --> 00:16:58.720
I could show you that.

00:16:58.820 --> 00:17:01.290
But what we have here
is a text-to-speech jar.

00:17:01.350 --> 00:17:05.100
So I'll drag that in the same
way that I did the web service.

00:17:05.100 --> 00:17:08.920
And when I bring that in,
you see it shows here I can

00:17:08.920 --> 00:17:11.030
import it as a Java class.

00:17:11.030 --> 00:17:12.470
So I'll do that.

00:17:12.850 --> 00:17:17.850
And since this is a JAR file,
we have to specify the actual

00:17:17.850 --> 00:17:20.470
class file within the JAR.

00:17:20.800 --> 00:17:24.930
You can see here,
similar to the web services,

00:17:24.930 --> 00:17:29.690
this just uses reflection
and finds the public methods

00:17:29.720 --> 00:17:31.800
available in that Java class.

00:17:31.930 --> 00:17:36.040
This class here has the
same method and a stop.

00:17:36.110 --> 00:17:39.610
What I'll do is go back to the window.

00:17:40.630 --> 00:17:47.490
Instead of patching the
text to that web service,

00:17:47.660 --> 00:17:52.220
let's just patch it into
the Java class instead,

00:17:52.220 --> 00:17:57.300
because hopefully that
will do something exciting.

00:17:59.700 --> 00:18:03.790
And of course,
we don't have the audio hooked

00:18:03.790 --> 00:18:07.410
up either on the machine,
so...

00:18:14.900 --> 00:18:20.500
[Transcript missing]

00:18:22.700 --> 00:18:25.460
We have Java code that we can import.

00:18:25.590 --> 00:18:29.250
But really, you guys are all here
to see the WebStart,

00:18:29.250 --> 00:18:33.320
and hopefully we can get that to work.

00:18:43.500 --> 00:18:48.230
Let me go real quick to the WebStart,
and then if we can get

00:18:48.230 --> 00:18:51.970
the network working,
we can show you the web services after.

00:19:08.330 --> 00:19:15.080
So this is a game that Matthew created,
sort of a Tetris-like game that

00:19:15.080 --> 00:19:20.460
we... This is the obligatory Tetris--
authored Tetris application that

00:19:20.490 --> 00:19:22.800
every authoring tool has to make.

00:19:22.820 --> 00:19:29.670
And if we bring up the
window object here...

00:19:37.120 --> 00:19:42.860
You can see here there's the pretty
complicated looking application,

00:19:42.860 --> 00:19:48.770
but if we go ahead and run it,
you can see here we have a...

00:19:50.170 --> 00:19:55.150
It actually has some nice sounds,
but you're not going to get to hear them.

00:19:58.220 --> 00:20:02.440
So you can see we have a pretty nice
working Tetris application here.

00:20:02.490 --> 00:20:07.140
And when you're done authoring
an application in Magic,

00:20:07.200 --> 00:20:11.830
what you'll do is go into the publish,

00:20:13.160 --> 00:20:16.650
You can see we have different
formats that we can publish in.

00:20:16.740 --> 00:20:20.200
Here you see a standalone document,
a Java application.

00:20:20.200 --> 00:20:24.930
The Java application will just
publish a standalone JAR file.

00:20:24.940 --> 00:20:27.890
But what we're interested in
here today is the WebStart.

00:20:27.900 --> 00:20:31.690
I already have the
WebStart application selected.

00:20:31.720 --> 00:20:35.690
I can come here and you can see that we
have some properties that we can set up.

00:20:35.770 --> 00:20:40.560
This is the information that
just gets put into the JNLP file.

00:20:40.590 --> 00:20:44.910
We have a description we can set,
the company information,

00:20:45.010 --> 00:20:49.060
and the home page,
which is the link in the

00:20:49.060 --> 00:20:53.760
WebStart application,
what will show up for that application,

00:20:53.810 --> 00:20:55.800
and an icon file.

00:20:55.820 --> 00:21:01.480
Let me actually just go in
and reselect that icon file.

00:21:17.480 --> 00:21:22.400
I'm going to just choose
a GIF file for the icon.

00:21:22.400 --> 00:21:24.400
And you can specify code base.

00:21:24.400 --> 00:21:28.280
What happens when we publish
the WebStart application,

00:21:28.280 --> 00:21:32.590
we publish it to the local
file system with a template

00:21:32.590 --> 00:21:37.770
HTML file and a JNLP file,
but we also publish a JNLP file and a

00:21:37.770 --> 00:21:44.100
template file with setup for whichever,
for a remote code base if you're going

00:21:44.100 --> 00:21:51.380
to end up pushing it onto a server.

00:21:51.380 --> 00:21:51.380
So I'll go ahead and start with the JNLP

00:21:52.800 --> 00:21:58.670
Let's make sure I'm publishing
this to the home folder.

00:22:04.780 --> 00:22:07.700
Okay, so now that I have that set up,
I can just go ahead and publish.

00:22:07.700 --> 00:22:15.460
And what it's doing while it's
publishing is just going through

00:22:15.460 --> 00:22:21.530
the application that you built and
collecting all the class files that was

00:22:21.530 --> 00:22:29.580
used in your application and collecting
all the resources and media and

00:22:29.580 --> 00:22:32.470
creating a new JAR file out of that.

00:22:44.490 --> 00:22:47.170
So while it's publishing,
I'll just mention this is

00:22:47.180 --> 00:22:49.760
basically our beta trial version.

00:22:49.760 --> 00:22:54.160
It's available if people are
interested in checking it out.

00:22:54.160 --> 00:22:58.240
You can go to our website,
which is techadents.com,

00:22:58.240 --> 00:22:59.940
and you can download it if you want.

00:22:59.940 --> 00:23:04.560
And we have a user forum where you
could even give us feedback if you like.

00:23:04.690 --> 00:23:10.440
So here you can see we've published to
a local directory on the file system,

00:23:10.440 --> 00:23:18.190
and there's the local
HTML template that we can launch.

00:23:29.600 --> 00:23:33.500
And here we have a simple template
that you can modify if you want.

00:23:33.500 --> 00:23:37.560
Go ahead and launch.

00:23:58.770 --> 00:24:03.540
I was complaining about not knowing
the signer of the application.

00:24:03.540 --> 00:24:05.610
Just start it.

00:24:17.860 --> 00:24:22.000
And there you have it.

00:24:22.020 --> 00:24:25.470
A WebStart application that
was pretty easy to make.

00:24:33.890 --> 00:24:35.640
So I think that's about
all we're going to show,

00:24:35.640 --> 00:24:36.880
but we're going to be around.

00:24:36.880 --> 00:24:40.580
If anyone wants to talk afterwards,
we'll hang out after the session.

00:24:40.580 --> 00:24:41.800
Thanks a lot.

00:24:41.800 --> 00:24:43.460
Thanks.

00:24:48.140 --> 00:24:49.880
I feel like all you folks
are in push-ups right now,

00:24:49.880 --> 00:24:50.990
but I don't think you want to see that.

00:24:51.040 --> 00:24:56.010
So right now I want to hand
it over to Scott Adler,

00:24:56.180 --> 00:24:58.590
who's going to talk about the
embedding framework and some of the

00:24:58.590 --> 00:25:00.600
features of applets and embedding.

00:25:09.730 --> 00:25:12.030
So the embedding framework.

00:25:12.310 --> 00:25:16.110
The embedding framework is something
we built when we moved to Mac OS X so

00:25:16.480 --> 00:25:22.270
that you can actually embed applications
into--embed applets into browsers.

00:25:22.900 --> 00:25:25.660
It sits with all the other frameworks.

00:25:25.670 --> 00:25:29.900
That's where it is if you want to use
the terminal and look for it or however.

00:25:30.530 --> 00:25:34.260
Specifically, built for embedding applets
into Carbon applications.

00:25:34.410 --> 00:25:36.670
I'm saying this because we have a lot
of people who are trying to use the

00:25:36.730 --> 00:25:40.360
embedding framework for other things that
it wasn't actually built and tested for.

00:25:40.360 --> 00:25:43.900
Feel free to try that out,
but what we're building this for is

00:25:43.940 --> 00:25:46.410
for embedding applets into browsers.

00:25:49.460 --> 00:25:53.900
The main clients are web browsers.

00:25:53.900 --> 00:25:57.310
How would you use the embedding API?

00:25:57.350 --> 00:25:59.950
If you look inside of there,
there's a whole bunch of

00:25:59.960 --> 00:26:01.400
header files and things.

00:26:01.590 --> 00:26:07.380
You want to know how you actually
would create your own applet container.

00:26:07.410 --> 00:26:09.600
First thing you have to do is
you have to create the Java VM,

00:26:09.680 --> 00:26:12.720
because you're going to own the Java VM.

00:26:12.720 --> 00:26:14.270
That means you should create one of them.

00:26:14.270 --> 00:26:17.430
If you're doing a whole bunch of applets,
you create one, you let each applet run,

00:26:17.430 --> 00:26:21.390
and then you get rid of that
when your application quits.

00:26:22.280 --> 00:26:26.070
Next is, there's this thing called
the JNI environment.

00:26:26.140 --> 00:26:29.630
That is the context that you
have to pass into all these,

00:26:29.660 --> 00:26:33.100
to our embedding framework
every time you talk to us.

00:26:33.150 --> 00:26:36.000
You have to tell us what is
the environment for this VM,

00:26:36.000 --> 00:26:38.410
because we don't own the VM,
you own the VM.

00:26:40.900 --> 00:26:44.680
Then you actually create the applet
and you actually will fill out some

00:26:44.680 --> 00:26:47.160
structures talking about things
that you've parsed out of the

00:26:47.160 --> 00:26:50.070
applet tag because you're a browser,
you've just parsed that applet tag,

00:26:50.150 --> 00:26:52.290
and you're going to tell us what to do.

00:26:52.480 --> 00:26:54.300
So you create the applet.

00:26:54.580 --> 00:26:56.570
Then you actually create a control.

00:26:56.650 --> 00:26:59.650
This is the representation
of the screen space that the

00:26:59.750 --> 00:27:01.350
applet is going to take up.

00:27:01.350 --> 00:27:04.480
It's very well documented
inside of javacontrol.h,

00:27:04.480 --> 00:27:06.550
what that createJavaControl does.

00:27:06.660 --> 00:27:09.970
That returns you a Carbon control back,
and you use that as a

00:27:09.970 --> 00:27:13.530
Carbon control in many ways,
except for the ways that we have to

00:27:13.530 --> 00:27:16.440
differ from the way Carbon controls work.

00:27:16.970 --> 00:27:20.740
Mostly because Carbon is
cooperatively threaded,

00:27:20.740 --> 00:27:23.940
and Java is preemptively threaded.

00:27:24.500 --> 00:27:30.130
That leads to many issues when
you make a call in Carbon,

00:27:30.130 --> 00:27:34.150
you expect that nothing's going
to happen between when that call

00:27:34.300 --> 00:27:35.500
starts and when that call stops.

00:27:35.630 --> 00:27:38.950
What actually happens is we
might be painting the whole

00:27:38.950 --> 00:27:42.110
time while that's happening,
and we get to some of that.

00:27:42.480 --> 00:27:45.140
So during the lifetime of an applet,
first,

00:27:45.200 --> 00:27:47.050
we automatically init the applet for you.

00:27:47.050 --> 00:27:47.720
You've created it.

00:27:47.720 --> 00:27:48.300
It's been inited.

00:27:48.300 --> 00:27:51.100
You just have to tell us to start it.

00:27:52.110 --> 00:27:53.670
Then you have to move
and clip it together.

00:27:53.830 --> 00:27:58.220
These are actually separate calls in
terms of typical control manager calls.

00:27:58.220 --> 00:28:01.280
You actually would move and
clip it so that we can all do

00:28:01.280 --> 00:28:02.520
this in one atomic operation.

00:28:02.540 --> 00:28:05.030
Because, like I said,
we could be preemptively drawing,

00:28:05.030 --> 00:28:06.850
and that could stop your
cooperative threads,

00:28:06.930 --> 00:28:08.960
and we could just start
blasting to the screen.

00:28:08.960 --> 00:28:10.590
If you don't move us and
clip us at the same time,

00:28:10.660 --> 00:28:12.690
if you move us, then you clip us,
we're going to draw all over

00:28:12.820 --> 00:28:14.900
the place because we haven't
been clipped correctly.

00:28:14.900 --> 00:28:17.700
So you have to use this instead
of the control manager APIs.

00:28:19.250 --> 00:28:22.900
Instead of calling Draw1Control,
you're going to call DrawJavaControl

00:28:23.150 --> 00:28:27.640
because we need a way in,
which you'll see in a second.

00:28:27.820 --> 00:28:28.840
And then asynchronous drawing.

00:28:28.920 --> 00:28:31.840
This is, again,
the big problem we have in interacting

00:28:31.840 --> 00:28:35.930
between these frameworks is you've got,
let's say,

00:28:35.930 --> 00:28:39.560
an applet that's drawing an animation.

00:28:39.560 --> 00:28:41.610
So you're just drawing
like crazy on Java threads.

00:28:41.650 --> 00:28:44.860
You're calling paint over
and over and over again.

00:28:44.960 --> 00:28:46.680
The Carbon application decides,
you know what,

00:28:46.680 --> 00:28:48.520
we're going to live resize you now.

00:28:48.570 --> 00:28:51.750
If we keep painting,
you're not going to be able to tell us,

00:28:51.750 --> 00:28:55.680
hey, you're not supposed to be painting
now if we didn't have these APIs.

00:28:55.680 --> 00:28:57.980
So you actually stop us from
painting while you're doing

00:28:57.980 --> 00:29:00.000
things like live scrolling,
live resizing.

00:29:00.040 --> 00:29:02.360
You'll know when the good
places are for us to draw again,

00:29:02.370 --> 00:29:04.300
and you'll give a call
to draw Java control.

00:29:04.300 --> 00:29:06.440
And then when you're done, you'll say,
OK, I'm done.

00:29:06.480 --> 00:29:08.120
Start us back up and
we'll start animating.

00:29:08.150 --> 00:29:10.740
And you can actually see this if you
run Internet Explorer and you load

00:29:10.740 --> 00:29:13.690
any animations and you just grab
the grow box or something like that.

00:29:13.690 --> 00:29:16.880
You'll see sometimes animations
seem to slow down a little bit,

00:29:16.880 --> 00:29:21.200
but at least they aren't overdrawing
all portions of the screen.

00:29:22.450 --> 00:29:24.700
and then to end of life the applet.

00:29:24.720 --> 00:29:25.940
You stop it, you destroy it.

00:29:25.990 --> 00:29:26.860
Pretty straightforward.

00:29:26.900 --> 00:29:28.160
Then you get rid of the VM.

00:29:31.020 --> 00:29:33.000
So, embedding applets, the summary.

00:29:33.000 --> 00:29:35.960
So, this summary is a very
interesting summary,

00:29:35.960 --> 00:29:37.280
and it'll talk about
some of our features.

00:29:37.280 --> 00:29:41.420
And the summary is that the new
Java Internet plug-in should

00:29:41.750 --> 00:29:44.050
eliminate the need for all
that stuff I just talked about.

00:29:44.270 --> 00:29:47.100
And that's really important to us,
because the fact that

00:29:47.100 --> 00:29:49.910
I had two slides on it,
and it's pretty complicated,

00:29:49.940 --> 00:29:52.360
and there are a lot of
issues with frameworks,

00:29:52.370 --> 00:29:56.010
we don't want you to have to deal
with that as browser vendors.

00:29:56.620 --> 00:29:59.970
And so, we're planning on providing an
Internet plug-in that will take

00:30:00.160 --> 00:30:03.130
care of almost all the needs
of the embedding framework.

00:30:06.370 --> 00:30:09.050
So now we'll talk a little
bit about where we're going.

00:30:09.210 --> 00:30:11.760
You've seen this sort of slide before.

00:30:11.760 --> 00:30:14.150
The one thing I wanted
to point out is that,

00:30:14.360 --> 00:30:16.740
and Scott will talk
about this a little more,

00:30:16.820 --> 00:30:20.740
is this double-clickable application
area here has sort of slid in

00:30:20.740 --> 00:30:23.420
under WebStart applications,
which means that we're going

00:30:23.470 --> 00:30:26.970
to have some good news about
WebStart applications here.

00:30:29.970 --> 00:30:32.940
So in terms of applets,
where we're going.

00:30:32.940 --> 00:30:35.870
So I talked a little bit
about the Internet plug-in,

00:30:36.280 --> 00:30:41.270
and you'll see here that these
are the new pieces to this slide,

00:30:41.270 --> 00:30:42.800
to this stack.

00:30:42.800 --> 00:30:46.440
And the things we've added is
the Sun Java plug-in code and

00:30:46.440 --> 00:30:48.440
the Java Internet plug-in.

00:30:48.440 --> 00:30:50.640
And what you'll see is
that Internet Explorer,

00:30:50.640 --> 00:30:53.300
the way it exists right now,
it'll use some things using the

00:30:53.300 --> 00:30:55.630
embedding framework and some
things using the Internet plug-in,

00:30:55.640 --> 00:30:58.630
depending on tags,
and we'll get a little bit more on that.

00:30:58.670 --> 00:31:02.290
There's all these Netscape 4.0
compatible plug-in browsers out there,

00:31:02.370 --> 00:31:05.940
and they'll all just use the
Internet plug-in and get that for free.

00:31:05.940 --> 00:31:08.190
And then there's the other
embedding applications,

00:31:08.190 --> 00:31:10.650
and those will still use
the embedding framework,

00:31:10.660 --> 00:31:13.520
but we're hoping that everyone
moves over to the Internet plug-in.

00:31:13.540 --> 00:31:16.460
And then the fact that Sun's
Java plug-in code that we've taken,

00:31:16.580 --> 00:31:19.000
we've put underneath
the embedding framework,

00:31:19.000 --> 00:31:21.500
means everyone,
without any modifications,

00:31:21.560 --> 00:31:24.510
now get all the new features
of the Internet plug-in.

00:31:24.630 --> 00:31:25.580
So there are a bunch of features.

00:31:25.580 --> 00:31:26.120
We'll get into that.

00:31:26.120 --> 00:31:27.300
Yeah.

00:31:30.980 --> 00:31:35.100
So Internet Explorer's applet viewer,
this is what I explained

00:31:35.100 --> 00:31:36.500
in this last slide,
will be based on the

00:31:36.510 --> 00:31:37.860
Java plug-in applet viewer.

00:31:37.900 --> 00:31:41.660
So the thing that most people
use when they get Mac OS X out

00:31:41.660 --> 00:31:45.550
of the box is they run IE,
they go to some website, it has a game,

00:31:45.560 --> 00:31:47.580
and it runs our embedding framework.

00:31:47.580 --> 00:31:51.890
So you will now get the Java plug-in
applet viewer inside of there.

00:31:53.220 --> 00:31:55.860
You actually get some good user
feedback when you're loading applets.

00:31:55.860 --> 00:31:58.310
There are some things that are drawn
in Java that say loading certain things

00:31:58.370 --> 00:32:00.090
or progress bars and stuff like that.

00:32:00.100 --> 00:32:06.370
So it's pretty good instead of just
waiting and not knowing what's going on.

00:32:06.420 --> 00:32:10.180
There's a lot better signed applet
support inside of the plug-in itself.

00:32:11.530 --> 00:32:15.670
And then the biggest new feature
for developers is the Java console.

00:32:15.680 --> 00:32:18.530
And this is an optional
thing you can turn on.

00:32:18.690 --> 00:32:22.260
It's interactive,
meaning that when you load an applet,

00:32:22.580 --> 00:32:24.150
the first time you load
an applet on the browser,

00:32:24.240 --> 00:32:25.780
this will pop up if you
have the preference set.

00:32:25.950 --> 00:32:28.140
And we don't want users
setting this preference,

00:32:28.140 --> 00:32:30.230
so we ship it default off,
and you can set it using

00:32:30.240 --> 00:32:31.960
some of our other tools.

00:32:31.980 --> 00:32:33.640
And it's an interactive console.

00:32:33.640 --> 00:32:36.580
So when it comes up,
all of the thread info,

00:32:36.580 --> 00:32:40.140
if you want to find out about it,
if you want to force garbage collection,

00:32:40.220 --> 00:32:42.780
if you want to look at details of
what's going on inside your applets,

00:32:42.780 --> 00:32:44.440
because it can be kind of confusing.

00:32:44.450 --> 00:32:47.360
And since you're not an application,
you don't own this stuff.

00:32:47.380 --> 00:32:48.580
The browser owns the VM.

00:32:48.590 --> 00:32:51.050
This actually gives you a
window into seeing the VM,

00:32:51.050 --> 00:32:53.000
seeing all your stack traces here.

00:32:53.050 --> 00:32:58.560
It's pretty neat, and you can see,
we'll show a little bit of it in a demo.

00:32:58.560 --> 00:33:00.800
System out and system error go here.

00:33:00.800 --> 00:33:02.940
Logging and tracing is
a big feature of this.

00:33:02.940 --> 00:33:05.230
You can set log levels on your logging.

00:33:05.230 --> 00:33:08.200
You can log different actions,
and then you can set log

00:33:08.200 --> 00:33:09.420
levels and see what's going on.

00:33:09.450 --> 00:33:13.190
what is outputting and Scott will
show a little more about that.

00:33:13.770 --> 00:33:17.460
The Java plug-in settings we're
going to include in Jaguar also.

00:33:17.460 --> 00:33:21.730
And this is where you set things
related to this plug-in specifically.

00:33:21.730 --> 00:33:23.940
And you see the very
first one is--I mean,

00:33:23.940 --> 00:33:26.140
the very second one is
show the Java console.

00:33:26.140 --> 00:33:27.990
So that lets you turn off that console.

00:33:27.990 --> 00:33:29.000
It'll ship with it off.

00:33:29.230 --> 00:33:33.790
But if you need to turn it on,
this is where you find it.

00:33:34.090 --> 00:33:36.570
It's gonna be--it's planned to
be an application_utilities.

00:33:36.660 --> 00:33:39.480
It lets you set the VM arguments,
so this whole text field here

00:33:39.580 --> 00:33:42.430
lets you set things like,
do you happen to know that

00:33:42.430 --> 00:33:45.160
you're gonna be shipping this
large intranet application,

00:33:45.160 --> 00:33:50.670
so you have to increase the VM heap size,
because Java still has this set limit on

00:33:50.780 --> 00:33:53.760
the VM heap so that it doesn't overrun,
take over the whole system,

00:33:53.760 --> 00:33:55.340
especially applets.

00:33:55.360 --> 00:33:57.840
You don't want a bad applet to show
up and just start allocating memory

00:33:57.840 --> 00:34:00.740
and just bring down everything.

00:34:00.740 --> 00:34:02.140
And there's a whole
bunch of other things.

00:34:02.140 --> 00:34:05.740
There are other panels in there,
and we'll get a little more into that.

00:34:07.260 --> 00:34:08.790
The Java Internet plug-in.

00:34:08.950 --> 00:34:12.210
We're separating what Sun's plug-in
is from the Internet plug-in.

00:34:12.360 --> 00:34:18.090
The Internet plug-in is the Netscape
4.0 style plug-in that we've now wrapped

00:34:18.340 --> 00:34:20.710
our embedding framework inside of there.

00:34:20.710 --> 00:34:22.090
You don't have to deal with it.

00:34:22.090 --> 00:34:24.820
You just deal with this
Netscape 4.0 style plug-in.

00:34:27.320 --> 00:34:30.220
So any of these apps,
any of these browsers that support

00:34:30.270 --> 00:34:32.190
Netscape 4.0 plug-ins should just work.

00:34:32.200 --> 00:34:37.770
It's all based on the 13103
release of the plug-in.

00:34:42.260 --> 00:34:46.660
So now we're getting into the
messy world of the Internet.

00:34:46.660 --> 00:34:49.190
The thing about the Internet is
that when the Internet started,

00:34:49.300 --> 00:34:52.470
it started this thing called NetTime,
that like every week was like

00:34:52.470 --> 00:34:53.860
a year or something like that.

00:34:54.140 --> 00:34:56.200
And so the Internet's really old now.

00:34:56.200 --> 00:34:59.520
And we're suffering from that because
the Internet went through all this

00:34:59.520 --> 00:35:01.400
stuff of how do you use applets?

00:35:01.400 --> 00:35:02.540
Well, you use the applet tag.

00:35:02.540 --> 00:35:05.800
Then along came the Java plug-in,
and you had to use the embed

00:35:05.800 --> 00:35:07.960
tag and the object tag.

00:35:07.960 --> 00:35:11.180
And then this big company from
Seattle came along and said,

00:35:11.180 --> 00:35:13.620
"We don't want that to work
anymore," so Sun made it work

00:35:13.670 --> 00:35:15.340
with the applet tag again.

00:35:15.340 --> 00:35:17.340
So there's this whole
confusion of what's out there.

00:35:17.340 --> 00:35:21.920
And there's web pages that do everything,
all these different things.

00:35:21.920 --> 00:35:25.330
So people ask me,
"What are we supposed to

00:35:25.340 --> 00:35:28.840
do?" And so we're encouraging
people to use the applet tag.

00:35:29.190 --> 00:35:31.720
That hopefully will be
the future of applets.

00:35:31.730 --> 00:35:33.110
Again, we're not defining this.

00:35:33.130 --> 00:35:36.410
We're trying to follow what other
people are doing and make sure that

00:35:36.460 --> 00:35:38.670
you guys can deploy where you need to.

00:35:39.080 --> 00:35:43.610
Some older browsers,
they actually don't use the

00:35:43.610 --> 00:35:44.900
plug-in for the applet tag.

00:35:44.900 --> 00:35:48.980
So on our platform,
like Internet Explorer,

00:35:49.040 --> 00:35:52.430
they take the applet tag and
they use the embedding framework.

00:35:52.520 --> 00:35:54.280
In the future,
hopefully they'll change this and

00:35:54.280 --> 00:35:56.940
they'll use our Internet plug-in,
but they may not.

00:35:56.940 --> 00:35:59.040
And if they're not using
the Internet plug-in,

00:35:59.050 --> 00:35:59.840
they own the VM.

00:35:59.840 --> 00:36:03.010
It's up to them to do things like
get those VM parameter options and

00:36:03.010 --> 00:36:06.940
things like that from the plug-in.

00:36:06.940 --> 00:36:09.780
What we're really hoping is that all the
browser vendors move their applet tag

00:36:09.780 --> 00:36:13.420
to actually use the correct MIME type
and just hand this off to the plug-in.

00:36:13.420 --> 00:36:15.970
And then it'll be a consistent
user interface based,

00:36:16.010 --> 00:36:19.280
whether you use the applet
tag or the embed tag.

00:36:21.010 --> 00:36:24.240
Now, if you want to force
people to use the plug-in,

00:36:24.240 --> 00:36:26.700
you can use the object
and the embed tags.

00:36:26.700 --> 00:36:29.980
And that obviously will go through
the browser and load a plug-in for

00:36:29.980 --> 00:36:32.040
whatever MIME type you specify.

00:36:32.350 --> 00:36:36.320
And to do this, it actually was a pretty
hard thing for people to do.

00:36:36.320 --> 00:36:38.000
You don't want to go
type in all your code.

00:36:38.000 --> 00:36:42.110
So Sun provides a thing called the
HTML converter that will convert

00:36:42.190 --> 00:36:46.140
old applet tags into this new
object and embed tag framework.

00:36:46.140 --> 00:36:49.820
Now, it's confusing for me to say the
new object and embed tag framework

00:36:50.070 --> 00:36:54.140
because it was new a year ago or so,
and it's already going a little bit out

00:36:54.140 --> 00:36:58.380
of style because they're encouraging
people to move back to applet.

00:36:58.380 --> 00:37:01.150
So even on Windows,
it's very confusing because

00:37:01.160 --> 00:37:03.380
if you're on older browsers,
the plug-in won't work

00:37:03.380 --> 00:37:05.980
with the applet tag,
and on newer browsers it will.

00:37:05.980 --> 00:37:08.770
So it's kind of a confusing thing,
but we're encouraging people

00:37:08.850 --> 00:37:10.000
to use the applet tag.

00:37:10.000 --> 00:37:12.340
If you want to use the
object and the embed tag,

00:37:12.340 --> 00:37:12.920
you can.

00:37:14.510 --> 00:37:17.200
So just to give you a little
overview of where this is,

00:37:17.200 --> 00:37:20.000
there's browsers and tags
and what different things

00:37:20.100 --> 00:37:21.280
work in different browsers.

00:37:21.280 --> 00:37:25.530
On Mac OS X, we have IE 5.1,
and with Appletag,

00:37:25.540 --> 00:37:27.640
it uses the Java embedding framework.

00:37:27.900 --> 00:37:31.080
Other--if you want to get to the plug-in,
you use the object tag.

00:37:32.750 --> 00:37:35.740
Netscape and Mozilla.

00:37:35.740 --> 00:37:39.320
The applet tag, by default,
gets pushed the same way as the embed

00:37:39.320 --> 00:37:43.970
tag does with a built-in MIME type
of application X Java applet.

00:37:44.280 --> 00:37:45.920
So that just works with our plug-in.

00:37:46.040 --> 00:37:49.110
And then the other tags,
they look at the embed tag and

00:37:49.110 --> 00:37:52.470
they ignore the object tag,
they look at the embed tag.

00:37:53.210 --> 00:37:56.400
Opera is very similar
to the way IE works.

00:37:56.440 --> 00:37:59.740
This is just sort of sampling
of browsers that I've found.

00:37:59.740 --> 00:38:02.230
Java embedding framework
they use for the applet tag.

00:38:02.270 --> 00:38:04.300
They're still working
on their support there,

00:38:04.300 --> 00:38:06.520
which is one of the reasons
why we're trying to get the

00:38:06.520 --> 00:38:08.830
Internet plug-in to work,
because not all developers

00:38:08.860 --> 00:38:10.230
have an easy time with this.

00:38:10.230 --> 00:38:12.110
And then they use the object tag.

00:38:13.040 --> 00:38:15.960
And then there's the
latest IE on Windows,

00:38:16.020 --> 00:38:21.430
which the applet tag goes to, who knows,
goes to the 1.1 VM if

00:38:21.430 --> 00:38:22.550
the user's downloaded it.

00:38:22.760 --> 00:38:25.430
If they set a preference,
they could go to the plug-in.

00:38:25.430 --> 00:38:27.250
It depends on what the
user might have done.

00:38:27.250 --> 00:38:30.360
So it's not totally sure
what will happen there.

00:38:30.360 --> 00:38:33.710
And then if you use the object tag,
you can specify VM versions

00:38:33.710 --> 00:38:35.010
and things like that.

00:38:35.080 --> 00:38:39.780
So it's very similar to the way the
object tag works on IE5 on the Mac.

00:38:42.500 --> 00:38:44.850
So now I want to show a little
bit of the Java plug-in.

00:38:44.910 --> 00:38:46.540
So if we can go to the
second machine here.

00:38:50.280 --> 00:38:52.200
Oh, I do it.

00:38:52.200 --> 00:38:53.580
Aha.

00:38:53.580 --> 00:38:54.600
There we go.

00:38:54.770 --> 00:38:55.480
Cool.

00:38:55.480 --> 00:39:00.510
So this is Jaguar with the,
I think it's the same as

00:39:00.510 --> 00:39:04.180
what we shipped to you guys.

00:39:04.180 --> 00:39:06.280
And I've got a bunch of browsers on here.

00:39:06.350 --> 00:39:10.700
And I'm going to show browsers other
than Internet Explorer for a change.

00:39:10.700 --> 00:39:14.440
And so let's start by looking at Opera.

00:39:14.440 --> 00:39:16.400
I've already got some of these loaded.

00:39:16.400 --> 00:39:19.000
So in Opera,
I'm going to look at this one.

00:39:19.160 --> 00:39:20.130
So this is Opera.

00:39:20.520 --> 00:39:23.320
This I just downloaded
from their website.

00:39:23.320 --> 00:39:26.810
I didn't make any changes
to their application.

00:39:26.810 --> 00:39:29.370
I, it just uses the Internet plug-in.

00:39:29.740 --> 00:39:32.320
This actually has,
I don't know if you can read the,

00:39:32.360 --> 00:39:34.830
I don't know if you can read the URL,
but it's an embed tag.

00:39:34.860 --> 00:39:39.580
It's actually being pulled down over
the Internet from my home server.

00:39:39.580 --> 00:39:40.830
And it's just working.

00:39:40.840 --> 00:39:43.070
And that's what we expect
to happen with this.

00:39:43.070 --> 00:39:45.520
It even has,
let's see if this loops around again.

00:39:45.600 --> 00:39:47.170
It should have interactivity.

00:39:47.180 --> 00:39:47.620
Yeah.

00:39:47.800 --> 00:39:50.480
So this applet has some
mouse overs and things.

00:39:50.480 --> 00:39:53.270
So if I mouse over here,
it pauses and I can click on it.

00:39:53.270 --> 00:39:54.960
And if I'm actually, yeah, I'm connected.

00:39:55.000 --> 00:39:55.630
That's cool.

00:39:56.090 --> 00:39:58.660
So I got to the Apple page.

00:39:58.670 --> 00:40:02.050
So it's got a couple things in here that,
things you expect to see in applets.

00:40:02.140 --> 00:40:05.010
I specified, this is just a little
customizable applet.

00:40:05.010 --> 00:40:07.800
So I decided it would be nice
to have it snow in Florida where

00:40:07.900 --> 00:40:09.030
the shuttle launches.

00:40:09.080 --> 00:40:10.010
So you can do that.

00:40:10.140 --> 00:40:14.730
So, so that's just an example of the
plug-in working right here in,

00:40:14.730 --> 00:40:15.480
in Opera.

00:40:15.620 --> 00:40:20.120
So an interesting thing I downloaded the
other day is this program called Chimera,

00:40:20.120 --> 00:40:23.320
which is called Navigator,
but the project is Chimera.

00:40:23.650 --> 00:40:27.580
And it's taking Mozilla's
rendering engine and wrapping it

00:40:27.580 --> 00:40:29.460
inside of a Cocoa environment.

00:40:29.460 --> 00:40:32.620
So it's, it's basically Mozilla,
but using Cocoa.

00:40:32.830 --> 00:40:37.970
So this is kind of cool because this is,
again, they just, this is version 2.4,

00:40:38.120 --> 00:40:38.610
24.

00:40:38.610 --> 00:40:40.910
I'm not sure how the
version numbers work,

00:40:41.000 --> 00:40:43.470
but they,
they released this last week sometime.

00:40:43.560 --> 00:40:46.310
And this was their first release that
actually worked with Netscape plug-ins.

00:40:46.360 --> 00:40:50.600
And I just loaded up
this one applet that has,

00:40:50.600 --> 00:40:53.400
you know, it's just a little display
applet and it just worked here.

00:40:53.400 --> 00:40:55.750
So it was, it was pretty cool to
see that that works.

00:40:55.760 --> 00:40:58.190
This is, again,
I didn't talk to the developers.

00:40:58.260 --> 00:41:02.480
I just went to their website,
downloaded it, tried it out.

00:41:02.480 --> 00:41:03.900
So that's a little applet there.

00:41:03.900 --> 00:41:06.210
We can, and then there's one other one.

00:41:06.210 --> 00:41:08.280
Let's see.

00:41:08.280 --> 00:41:10.610
And then in Mozilla itself,

00:41:12.830 --> 00:41:17.550
Let's see, Mozilla, make a new... Yikes.

00:41:17.550 --> 00:41:18.210
Okay.

00:41:18.220 --> 00:41:21.210
So in Mozilla here,
I'll just go to my site.

00:41:25.600 --> 00:41:34.900
[Transcript missing]

00:41:35.400 --> 00:41:36.840
Let's see.

00:41:36.840 --> 00:41:41.790
Okay, so I play here and I...

00:41:48.000 --> 00:41:51.000
For those video game diehards out there,
you'll notice all the differences

00:41:51.000 --> 00:41:52.560
between this and the real game.

00:41:52.560 --> 00:41:55.000
It's pretty cool.

00:41:55.000 --> 00:41:55.660
This is all running on Jaguar.

00:41:55.660 --> 00:41:58.440
These aren't applications
we touched at all.

00:41:58.440 --> 00:42:01.540
With Mozilla,
I just wanted to point out that the guys

00:42:01.600 --> 00:42:06.680
at Netscape are actually working on a
really good implementation of the plug-in

00:42:06.720 --> 00:42:09.240
on top of our embedding framework.

00:42:09.240 --> 00:42:12.190
Some of the good things there is
that they're doing more than you can

00:42:12.190 --> 00:42:18.680
do inside of the Netscape or OAPX.

00:42:18.720 --> 00:42:23.180
I just wanted to point out really
quickly that we do have the Java console

00:42:23.190 --> 00:42:25.040
running here in the background.

00:42:25.040 --> 00:42:28.240
I just hid that out of this browser,
but you could look at things

00:42:28.260 --> 00:42:30.230
in the console if you want.

00:42:30.240 --> 00:42:32.370
All the dumps are going there.

00:42:32.470 --> 00:42:36.310
You could print out your entire
thread list if you want here,

00:42:36.450 --> 00:42:40.000
and there's nothing running,
so that's not that exciting.

00:42:40.000 --> 00:42:41.100
You can look at a lot of stuff.

00:42:41.100 --> 00:42:44.040
We could actually look at our memory
usage when we're not running it all,

00:42:44.110 --> 00:42:45.770
and I think that's M.

00:42:45.800 --> 00:42:50.660
Here we've got some stuff sitting around
because they haven't shut down the VM.

00:42:50.730 --> 00:42:51.870
That's about it for the demos.

00:42:51.870 --> 00:42:55.920
If we can go back to slides,
which I still do,

00:42:55.920 --> 00:42:58.230
and I'll bring it back to Scott.

00:42:58.310 --> 00:42:59.720
Thank you.

00:42:59.720 --> 00:43:00.540
Thanks, Scott.

00:43:05.470 --> 00:43:06.850
All right,
now I'm going to spend a little bit

00:43:06.860 --> 00:43:09.860
of time talking about some of the
additional new features in the plug-in.

00:43:10.080 --> 00:43:12.950
And the first of these is jar caching.

00:43:13.610 --> 00:43:18.920
Now, if you've used this on Windows,
you know that jar caching lets you

00:43:18.950 --> 00:43:23.990
store jar files from your applet on
the user's hard drive for later use.

00:43:24.160 --> 00:43:27.100
It's very similar to the jar
caching that we had in the older

00:43:27.110 --> 00:43:30.700
version of MRJ from the OS 9 days.

00:43:32.200 --> 00:43:35.630
You may need to modify your
HTML to get it to work.

00:43:35.720 --> 00:43:38.300
I say may because if you've
already done it on Windows,

00:43:38.300 --> 00:43:41.060
you shouldn't have to
do anything on the Mac.

00:43:44.010 --> 00:43:47.080
The cache is stored on a per-user
basis in their home directory

00:43:47.090 --> 00:43:48.320
and library cache is Java.

00:43:48.320 --> 00:43:53.410
The reason we did that is to make it so
that the user can go in there and clean

00:43:53.410 --> 00:43:57.560
up after the applets after a while,
if necessary.

00:44:00.400 --> 00:44:04.300
Let's talk a little bit about the
HTML changes that you may need to make.

00:44:04.300 --> 00:44:07.580
First of all,
if you want to turn on the JAR cache,

00:44:07.580 --> 00:44:10.920
you have to have a param in your
applet that says cache option

00:44:10.920 --> 00:44:12.740
and with the value of plug-in.

00:44:13.040 --> 00:44:16.290
You must have this or you
will not get JAR caching.

00:44:19.580 --> 00:44:25.430
The next thing, you need to specify the
jars that you want cached.

00:44:25.640 --> 00:44:27.500
That's just a comma-separated list.

00:44:27.500 --> 00:44:31.080
Param name is cache_archive.

00:44:34.760 --> 00:44:36.840
And finally, an optional tag.

00:44:36.950 --> 00:44:38.380
Actually, I think I reversed this.

00:44:38.380 --> 00:44:41.840
If you want caching,
you need cache archive.

00:44:41.840 --> 00:44:45.380
The cache version param, that's optional.

00:44:45.380 --> 00:44:52.180
And what you do with the cache version
is that you have a list of version

00:44:52.700 --> 00:44:57.330
specifiers that map one for one with
everything in the cache archive.

00:44:57.330 --> 00:45:00.760
If they don't match one for one,
you'll get an error in the applet viewer.

00:45:04.140 --> 00:45:05.710
A little bit more about
the cache version.

00:45:05.710 --> 00:45:07.660
You don't have to modify your JAR file.

00:45:07.680 --> 00:45:11.720
All you're doing is you're modifying your
HTML so that you can tell the browser,

00:45:11.940 --> 00:45:15.770
the version that I think that I have
on the server is this specific version.

00:45:15.770 --> 00:45:18.660
If that's newer than what's
on the user's machine,

00:45:18.660 --> 00:45:20.750
the Apple viewer will download it.

00:45:24.500 --> 00:45:28.700
If you don't specify the cast version,
by default you use a head request.

00:45:28.700 --> 00:45:31.380
I'm sorry,
the Apple viewer will use a head request

00:45:31.380 --> 00:45:37.170
and do an if-modified-since lookup.

00:45:37.420 --> 00:45:41.030
That's not a big deal,
but that's some network overhead.

00:45:41.030 --> 00:45:44.160
So if you want to cut down
on the network traffic,

00:45:44.160 --> 00:45:46.930
use the cache version,
and that'll save you some trouble.

00:45:49.740 --> 00:45:53.830
And note that the jars that you specify
in the cache archivers are going to be

00:45:53.840 --> 00:45:57.840
searched first as far as the search path,
as the class path goes.

00:45:57.840 --> 00:46:02.050
Use the cache archive first and then
we use what's in the archive tag.

00:46:03.230 --> 00:46:05.250
Now, we know that 1.4 is out.

00:46:05.500 --> 00:46:08.790
Jar caching changed a little bit in 1.4,
and we're going to be

00:46:08.800 --> 00:46:10.560
moving to this eventually,
but I want to let you know what

00:46:10.560 --> 00:46:11.630
the differences are right now.

00:46:13.400 --> 00:46:15.430
The jars in the archive
parameter are not cached.

00:46:15.460 --> 00:46:20.140
You must use the cache archive
param to get the caching to work.

00:46:21.420 --> 00:46:23.950
There's an additional parameter
called cache version EX.

00:46:24.030 --> 00:46:27.990
I won't go into what that does,
but just know that we don't support it.

00:46:28.040 --> 00:46:28.550
We'll ignore it.

00:46:28.590 --> 00:46:30.920
It won't give you an error,
but we don't support it in 1.3.1.

00:46:30.920 --> 00:46:32.520
We don't have JAR indexing.

00:46:32.530 --> 00:46:34.900
That's, again, a 1.4 feature.

00:46:37.610 --> 00:46:40.760
If you use the cache archive and
the cache version params now,

00:46:40.770 --> 00:46:44.340
that'll be your best compatibility
route for 1.4 when we're ready to

00:46:44.780 --> 00:46:48.730
support the 1.4 caching mechanism.

00:46:51.580 --> 00:46:54.630
Talk a little bit about
HTTPS connections.

00:46:54.780 --> 00:46:57.280
There's no new bug here because it
really hasn't changed since Puma.

00:46:59.030 --> 00:47:00.680
Again,
if you want to make a secure connection,

00:47:00.680 --> 00:47:06.530
just make a HTTPS URL and ask
for a URL connection out of it.

00:47:06.740 --> 00:47:10.590
This is exactly the same thing
that you do right now in 10.1.

00:47:13.300 --> 00:47:15.370
No additional initialization is needed.

00:47:15.600 --> 00:47:18.760
We set up JSSE for you
already in the browser.

00:47:18.870 --> 00:47:21.830
Just go ahead and ask for a
connection and you'll get it.

00:47:23.350 --> 00:47:27.400
As I mentioned,
support is provided by JSSE.

00:47:27.450 --> 00:47:31.440
And JSSE is an interesting
package in itself,

00:47:31.440 --> 00:47:33.360
and that's why I put this URL up here.

00:47:33.390 --> 00:47:36.860
You get a lot of good information
about where it stores its

00:47:36.860 --> 00:47:44.070
certificates and other properties
that apply to using JSSE.

00:47:44.630 --> 00:47:48.320
Now,
as far as certificates go with HTTPS,

00:47:52.510 --> 00:47:55.220
JSSC provides you a number
of certificates by default.

00:47:55.260 --> 00:47:57.800
These are a lot of CAs.

00:47:58.000 --> 00:48:02.890
They're just a basic set of certificate
authorities that are provided for you.

00:48:02.890 --> 00:48:06.230
If you need to add your own,
go to Library, Java Home, Lib Security,

00:48:06.230 --> 00:48:08.820
CACerts,
and you'll need to use the key tool

00:48:08.820 --> 00:48:11.140
to import those into that file.

00:48:11.410 --> 00:48:14.920
As you can imagine, that's not the most
friendly way to do things.

00:48:14.920 --> 00:48:16.440
We're working on a better mechanism.

00:48:16.440 --> 00:48:18.300
We don't have anything we
can talk about right now,

00:48:18.300 --> 00:48:21.590
but we are looking into doing this,
making this better.

00:48:24.200 --> 00:48:25.600
Talk about sign jar support.

00:48:25.600 --> 00:48:26.740
There are a few new things here.

00:48:26.920 --> 00:48:29.000
Not a lot, but a few.

00:48:29.170 --> 00:48:33.610
SSL certificates are not the
same as sign jar certificates.

00:48:33.610 --> 00:48:39.900
They're similar in nature,
but they're used in different ways.

00:48:40.680 --> 00:48:43.940
Again, sign jars continue to work
exactly like they did in 10.1.

00:48:43.940 --> 00:48:46.720
There's no change to the
support that we had before.

00:48:46.720 --> 00:48:50.980
The slight difference is that
if the user decides they want

00:48:50.980 --> 00:48:53.970
to always trust that file,
that jar file,

00:48:53.980 --> 00:48:56.670
we're going to store it now
in your preferences folder

00:48:56.730 --> 00:49:00.080
with a more readable name,
Java plug-in certificates 131.

00:49:04.780 --> 00:49:07.430
You can also take a look at the
JAR certificates that have been

00:49:07.490 --> 00:49:10.130
accepted in the Settings application.

00:49:10.290 --> 00:49:12.890
Basically,
it will give a list of all the people

00:49:12.890 --> 00:49:17.600
that sent you a sign jar certificate
so you can keep track of what you've

00:49:17.680 --> 00:49:23.190
trusted and what you need to pay
attention to when you're running applets.

00:49:25.320 --> 00:49:29.500
Okay, switching gears very quickly since
I'm running out of time here.

00:49:30.180 --> 00:49:33.450
Java WebStart today

00:49:33.760 --> 00:49:36.560
I want to talk a little bit
about how it works today.

00:49:36.630 --> 00:49:39.690
You go to a website that's
got a JNLP link on it.

00:49:39.760 --> 00:49:42.670
Click on the link.

00:49:42.750 --> 00:49:45.280
We download the JNLP file.

00:49:45.820 --> 00:49:49.020
It gets fed through Java WebStart,
and you get your

00:49:49.020 --> 00:49:50.820
Java WebStart application up and running.

00:49:52.690 --> 00:49:54.900
Well, here's where we're going
with Java WebStart.

00:49:54.930 --> 00:49:57.900
Again,
you'll have the link in your web browser.

00:49:57.930 --> 00:49:59.600
You'll click on the link.

00:49:59.770 --> 00:50:02.510
We'll download to a JNLP file.

00:50:04.510 --> 00:50:07.240
We're going to provide the
ability to make a double-clickable

00:50:07.240 --> 00:50:10.220
application out of that JNLP file.

00:50:11.310 --> 00:50:15.270
And, once you make that
double-clickable application,

00:50:15.270 --> 00:50:19.090
the next time the user double-clicks or
clicks on that link in the web browser,

00:50:19.090 --> 00:50:20.710
we'll go straight to that application.

00:50:20.890 --> 00:50:23.990
We won't have
Java WebStart involved at all.

00:50:25.850 --> 00:50:30.200
Talk a little bit about what's
going on here in detail.

00:50:30.200 --> 00:50:34.080
A user will be able to create a
double-clickable application from

00:50:34.080 --> 00:50:36.320
the downloaded WebStart application.

00:50:36.320 --> 00:50:40.010
So if you go into Java WebStart and you
look at the Cached Application panel,

00:50:40.010 --> 00:50:44.280
you'll be able to select an application,
go up into the menu and

00:50:44.360 --> 00:50:46.120
choose Create Application.

00:50:46.120 --> 00:50:51.300
You'll get a double-clickable application
wherever the user wants to save it.

00:50:51.320 --> 00:50:54.800
Now this is similar in
functionality to what's called

00:50:54.800 --> 00:50:58.740
the Local Install mechanism,
what WebStart calls Local Install.

00:50:58.740 --> 00:51:00.900
This is standard across platforms.

00:51:00.900 --> 00:51:04.500
We've chosen to implement this as
a double-clickable application.

00:51:04.500 --> 00:51:07.300
And by doing it that way,
we get some nice benefits that I'll talk

00:51:07.300 --> 00:51:09.390
about when I show you a demonstration.

00:51:12.740 --> 00:51:16.340
It's done automatically via WebStart.

00:51:16.360 --> 00:51:19.170
By default, it's set up to ask the user
if they want to do this,

00:51:19.180 --> 00:51:20.810
if they've run the application twice.

00:51:20.810 --> 00:51:24.880
I'll show you an example
of that in a moment.

00:51:25.680 --> 00:51:27.000
We'll use your WebStart icon.

00:51:27.000 --> 00:51:30.450
Remember that you have to specify,
or you can specify,

00:51:30.450 --> 00:51:36.010
a GIF or JPEG as part of your
JNLP specification for your application.

00:51:36.040 --> 00:51:41.130
We'll take that, download it,
turn it into a .icns file,

00:51:41.280 --> 00:51:44.680
and use that as the application's icon.

00:51:50.210 --> 00:51:52.490
And finally,
it is a double-clickable application,

00:51:52.500 --> 00:51:54.680
but it's a very small application.

00:51:54.690 --> 00:51:57.440
The actual resources for that
application are downloaded

00:51:57.470 --> 00:51:59.960
into the user's WebStart cache,
and it's stored on a

00:52:00.080 --> 00:52:01.300
per-user basis in the cache.

00:52:06.120 --> 00:52:08.980
Now, as I said,
it's a double-clickable application,

00:52:08.980 --> 00:52:10.400
so you'll be able to customize this.

00:52:10.400 --> 00:52:11.920
That means it's got a plist.

00:52:11.970 --> 00:52:14.130
That means it's got some
properties that you can set.

00:52:15.360 --> 00:52:17.300
So for those of you that
have thought in the past,

00:52:17.480 --> 00:52:20.820
well, how am I going to, you know,
there's an ambiguity in

00:52:20.820 --> 00:52:23.440
the JLP specification about
when properties get set.

00:52:23.700 --> 00:52:25.930
Well,
by making a double-clickable application,

00:52:25.930 --> 00:52:28.940
you'll be able to set some of
those properties at launch time.

00:52:34.440 --> 00:52:37.100
And you'll find out a lot more
about customizing applications

00:52:37.100 --> 00:52:37.810
in the next session.

00:52:37.820 --> 00:52:39.620
That's over in room
J when we're done here.

00:52:42.190 --> 00:52:43.210
All right,
right now I'm going to show you

00:52:43.220 --> 00:52:46.360
a demonstration of some of these
features that I just talked about.

00:52:46.400 --> 00:52:54.120
And in particular, the application,
or I'm sorry,

00:52:54.120 --> 00:52:55.530
the applet that I'm going to show here

00:52:57.830 --> 00:53:02.240
If you were at WWDC last year,
you saw a demonstration of

00:53:02.280 --> 00:53:03.680
the Java speech framework.

00:53:03.680 --> 00:53:09.910
I'm going to write an applet that
uses that speech framework just as a

00:53:09.910 --> 00:53:13.960
demonstration to show off some features.

00:53:14.060 --> 00:53:16.020
If you know anything
about the text-to-speech,

00:53:16.120 --> 00:53:17.180
that's native code.

00:53:17.180 --> 00:53:21.990
If you're going to use native
code or JDIRECT in your applet,

00:53:21.990 --> 00:53:24.760
you need to sign that applet.

00:53:24.760 --> 00:53:30.480
This is going to show you an example of
a signed applet and how that would appear

00:53:30.480 --> 00:53:34.330
to the end user and some things that
you can look at yourself as a developer.

00:53:35.860 --> 00:53:39.170
I'm also going to demonstrate
JAR caching in this example as well.

00:53:39.200 --> 00:53:44.720
The reason why you would
do that is in this case,

00:53:44.720 --> 00:53:50.710
you see I've turned on the cache with
the cache option in the first param.

00:53:50.710 --> 00:53:55.130
I've got an archive
here of the speech demo.

00:53:55.260 --> 00:53:57.880
That's what I'm going
to build in my applet.

00:53:57.880 --> 00:54:01.180
The last thing is the
javaspeechframework.jar.

00:54:01.180 --> 00:54:06.690
That's the speech framework jar that you
can download off of connect.apple.com.

00:54:06.860 --> 00:54:10.840
That comes out to about a 750K JAR file.

00:54:10.840 --> 00:54:13.870
A lot of users,
DSL isn't that widespread and you

00:54:14.010 --> 00:54:16.890
still have a lot of 56K connections.

00:54:16.890 --> 00:54:21.430
That's a pretty good chunk of
code to be downloading every time.

00:54:21.940 --> 00:54:26.330
That's the kind of thing that
makes sense to cache on the

00:54:26.330 --> 00:54:29.220
user's machine for later use.

00:54:29.220 --> 00:54:35.830
There's a lot of things
that you can do with this.

00:54:35.830 --> 00:54:35.830
I'm going to show you how to do this.

00:54:35.830 --> 00:54:35.830
I'm

00:54:36.800 --> 00:54:43.800
This is the Jaguar version
of Project Builder,

00:54:43.800 --> 00:54:44.860
and I've added a shell
script at the end that throws

00:54:44.860 --> 00:54:53.310
everything into one directory,
and it's going to assign

00:54:53.380 --> 00:54:58.320
the two jar files,
one that I'm creating and one

00:54:58.320 --> 00:55:00.900
that I'm using as a library.

00:55:00.900 --> 00:55:03.030
And I've just built a, I don't

00:55:03.820 --> 00:55:07.360
Let's move that up here so you
can see it a little bit better.

00:55:07.360 --> 00:55:12.550
And I've just built a simple file of
keys that I used to sign the jar file.

00:55:12.740 --> 00:55:16.150
So I'm going to go ahead and build

00:55:20.700 --> 00:55:34.500
[Transcript missing]

00:55:39.620 --> 00:55:46.900
So what I've done is I've put my
applet on my homepage.mac website.

00:55:47.040 --> 00:55:51.310
And now you can see that
I've signed the jar file.

00:55:51.560 --> 00:55:54.640
And now we've got a slightly
different dialogue than we,

00:55:54.640 --> 00:55:56.770
that we used to have in PUMA.

00:55:56.770 --> 00:55:58.500
And it's a little bit friendlier,
a little easier to read.

00:55:58.500 --> 00:56:04.680
You can look at the details of
the certificate if you need to.

00:56:05.100 --> 00:56:05.770
Who signed it?

00:56:05.870 --> 00:56:08.370
Where it came from?

00:56:08.370 --> 00:56:10.130
What organization?

00:56:10.130 --> 00:56:10.810
Things like that.

00:56:12.660 --> 00:56:17.840
For this particular example,
I'm going to say grant this session.

00:56:24.010 --> 00:56:31.030
You know, nice and simple,
we have... We have no sound.

00:56:31.290 --> 00:56:32.210
No sound.

00:56:38.620 --> 00:56:41.840
Well, you're going to have to take my
word for it that this speaks,

00:56:41.840 --> 00:56:45.490
because this is speaking
in the demonstrations here.

00:56:45.500 --> 00:56:55.500
Volume's up.

00:56:55.500 --> 00:56:57.500
I'm not sure what's going on.

00:57:11.880 --> 00:57:15.960
Now we've tried this.

00:57:15.960 --> 00:57:16.940
I know we've tried this.

00:57:23.860 --> 00:57:24.180
There you go.

00:57:24.260 --> 00:57:30.200
I sure like being inside
this fancy computer.

00:57:30.200 --> 00:57:31.200
There you go.

00:57:31.280 --> 00:57:33.910
Just to prove that it does indeed work.

00:57:34.090 --> 00:57:34.390
Thank you.

00:57:39.840 --> 00:57:42.450
Okay, now,
I'm also going to show you some

00:57:42.550 --> 00:57:43.700
features of the Java console.

00:57:43.700 --> 00:57:46.140
Since it came up pretty quickly,
we're going to reload this applet

00:57:46.170 --> 00:57:47.310
and show you some things about it.

00:57:48.840 --> 00:57:51.700
So first of all,
I'm going to set the log level to 2,

00:57:51.700 --> 00:57:55.710
and we're going to get some basic
and networking-related messages.

00:57:56.060 --> 00:57:57.150
So I'm going to refresh the applet.

00:57:57.220 --> 00:58:02.970
Now you see that we're getting
a trace of the what's going on

00:58:03.100 --> 00:58:11.700
[Transcript missing]

00:58:15.600 --> 00:58:17.250
Typically,
this will help you figure out if

00:58:17.260 --> 00:58:20.380
something goes wrong in your init
method or in your applet start,

00:58:20.380 --> 00:58:22.990
you'll be able to figure out when,
what's being called,

00:58:23.050 --> 00:58:25.960
so you know where the problem
is actually coming into play.

00:58:27.900 --> 00:58:30.710
And here,
this level of logging also tells you

00:58:30.850 --> 00:58:33.140
what's going on with the JAR cache.

00:58:33.550 --> 00:58:39.190
So as you see that I've asked to try
to archive Java Speech Framework.

00:58:39.360 --> 00:58:40.450
We're going to see if it's up to date.

00:58:40.730 --> 00:58:43.520
And I didn't use the
cache version option,

00:58:43.520 --> 00:58:46.850
so we're going to look at the timestamp.

00:58:49.060 --> 00:58:52.670
The last modified, it hasn't changed.

00:58:52.770 --> 00:58:55.460
I put it up there a few days ago
and I haven't changed it since.

00:58:55.460 --> 00:58:58.690
And we've run it on this machine once,
so it's already in the

00:58:58.720 --> 00:59:00.300
cache and it's up to date.

00:59:00.440 --> 00:59:04.290
So you've got lots of good information
about what's going on in the cache.

00:59:06.760 --> 00:59:10.200
So now,
I'm going to take the level up to three.

00:59:10.220 --> 00:59:12.010
Now I'll get some security
information as well.

00:59:12.150 --> 00:59:14.250
So I'm going to do a refresh.

00:59:15.310 --> 00:59:19.310
And you can see that we've got tons
of information about security and

00:59:19.310 --> 00:59:21.850
certificates and things that are,
you know,

00:59:22.180 --> 00:59:24.000
shows you where the
comparisons are going on,

00:59:24.000 --> 00:59:25.770
lets you look at the details
of the certificates that

00:59:25.770 --> 00:59:26.680
are being compared against.

00:59:30.250 --> 00:59:34.780
Okay, I'm going to very quickly show you
Java WebStart since that's one of the

00:59:34.850 --> 00:59:36.580
interesting things that we've done here.

00:59:36.600 --> 00:59:39.280
Okay.

00:59:44.480 --> 00:59:46.900
So a friend of mine comes along and says,
hey,

00:59:46.900 --> 00:59:50.100
I got this cool tool called SmartCVS.

00:59:50.100 --> 00:59:53.100
And it's a graphical CVS client.

00:59:53.900 --> 00:59:55.790
And here's the link down here, SmartCVS.

00:59:55.790 --> 00:59:57.900
We're going to download it.

00:59:57.910 --> 01:00:01.380
And, bad example,

01:00:02.530 --> 01:00:05.380
So as you can see,
I've already run SmartCVS twice and we've

01:00:05.520 --> 01:00:08.260
created a desktop application for it.

01:00:08.310 --> 01:00:12.510
And it's gone right into,
it's created the application.

01:00:27.200 --> 01:00:35.000
[Transcript missing]

01:00:42.600 --> 01:00:44.000
All right, we'll try this one more time.

01:00:44.040 --> 01:00:49.000
Okay, we didn't find an application,
so we're going to

01:00:49.000 --> 01:00:50.030
launch it the usual way.

01:00:50.250 --> 01:00:53.660
WebStart wants unlimited access,
so I'll say yes and go ahead.

01:00:56.000 --> 01:00:57.310
We'll cancel out of that.

01:00:57.310 --> 01:01:00.040
Okay, now tomorrow I come along
and I need to run it again,

01:01:00.040 --> 01:01:02.010
so I'll click on a link
and we'll download it.

01:01:05.800 --> 01:01:08.890
And WebStart's going to say, "Hey,
you've run this twice.

01:01:08.890 --> 01:01:14.920
Do you want me to create an
application for you?" So I'll say yes.

01:01:14.920 --> 01:01:16.440
And I'm going to put it on the desktop.

01:01:16.530 --> 01:01:19.170
Let's call it SmartCBS Beta.

01:01:21.800 --> 01:01:37.100
[Transcript missing]

01:01:37.390 --> 01:01:39.300
Cancel that and click all that.

01:01:39.600 --> 01:01:44.650
And I can just click on that and
launch it like a regular application.

01:01:48.800 --> 01:01:51.470
It's also got a plist I can
modify so I can start working

01:01:51.470 --> 01:01:52.490
around with that as well.

01:01:52.520 --> 01:01:58.030
And that's it for Java WebStart.

01:02:06.110 --> 01:02:09.210
So to sum up, which should you choose,
Applets or WebStart?

01:02:09.220 --> 01:02:12.470
Well, it's only for you to decide.

01:02:14.210 --> 01:02:16.960
We hope we've given you enough
information to start figuring out for

01:02:16.960 --> 01:02:20.040
yourself what's the right thing to do.

01:02:20.060 --> 01:02:21.960
If you're working on a web browser,
we want you to support

01:02:22.010 --> 01:02:23.000
the Java Internet plug-in.

01:02:27.100 --> 01:02:28.820
And finally,
here are the remaining Java sessions.

01:02:28.820 --> 01:02:31.140
If you head over to
Room J when we're done here,

01:02:31.140 --> 01:02:34.560
you can look into tailoring
Java applications.

01:02:34.560 --> 01:02:37.590
Good things to see there.

01:02:37.850 --> 01:02:41.960
You see all the details about
the other remaining sessions.

01:02:42.700 --> 01:02:45.720
For more information,
if you want WebStart information,

01:02:45.720 --> 01:02:49.370
you can start at our page
on developer.apple.com.

01:02:49.490 --> 01:02:53.870
I'll bring this page up again
for Q&A at the Q&A session.

01:02:53.880 --> 01:02:57.400
How to get documentation.

01:02:59.600 --> 01:03:02.040
and you've seen all these before as well.

01:03:02.040 --> 01:03:07.040
A man to talk to is Alan Samuel as
always for any non-technical or

01:03:07.440 --> 01:03:08.710
business-related information.