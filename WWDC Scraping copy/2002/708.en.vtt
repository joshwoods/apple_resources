WEBVTT

00:00:00.000 --> 00:00:10.200
[Transcript missing]

00:00:10.600 --> 00:00:14.070
I know it's early and it's Thursday,
and I guess a lot of people might

00:00:14.160 --> 00:00:16.360
have stayed up late watching
Lord of the Rings last night.

00:00:16.360 --> 00:00:18.750
So I'm Jeff Glasson.

00:00:18.860 --> 00:00:22.380
I'm the manager of the
WebObjects Core Frameworks team,

00:00:22.380 --> 00:00:26.370
and I'm going to be talking for about
25 minutes about the EJB features

00:00:26.640 --> 00:00:28.800
that are part of WebObjects,
and then I'll bring up

00:00:28.800 --> 00:00:32.990
Stefan Reich and Arti Wilhout,
who will go through some demos.

00:00:35.040 --> 00:00:39.580
Okay, so what kind of--this
is not an intro course.

00:00:39.820 --> 00:00:43.260
We're going to make a few assumptions
that you have a basic understanding

00:00:43.260 --> 00:00:46.410
of WebObjects that you should
have gotten this week so far if

00:00:46.410 --> 00:00:48.300
you've attended the other sessions.

00:00:48.420 --> 00:00:51.340
And also,
I'm going to assume that you have a

00:00:51.340 --> 00:00:54.300
basic knowledge of what EJB and J2EE is.

00:00:54.380 --> 00:00:58.340
This is not an intro to J2EE or
definition of EJB terms.

00:00:58.340 --> 00:01:02.190
We're just going to talk about
the integration of EJB and

00:01:02.190 --> 00:01:04.460
WebObjects and what we've done.

00:01:06.580 --> 00:01:10.340
What we are going to go over, though,
is how EJB and EOF are complementary,

00:01:10.340 --> 00:01:14.810
not competing technologies,
and how having an EJB container benefits

00:01:14.810 --> 00:01:17.220
WebObjects applications and you,
the developers.

00:01:17.220 --> 00:01:20.800
And I'm going to try to get you
to understand how to develop

00:01:20.870 --> 00:01:23.360
and deploy EJBs using our tools.

00:01:26.320 --> 00:01:29.690
So again, we're not going to cover how to
design beans or how to implement

00:01:29.690 --> 00:01:33.720
beans in general or go over some
J2EE design patterns or sun blueprints.

00:01:33.720 --> 00:01:36.140
That's an exercise for the reader.

00:01:39.670 --> 00:01:42.040
So here's the order of things.

00:01:42.140 --> 00:01:45.840
We're going to go over some of the
strengths of EOF and EJB and how they

00:01:45.990 --> 00:01:49.000
complement each other or compete,
as we'll discover.

00:01:49.140 --> 00:01:55.160
We'll go over the specific EJB container
implementation that we put in WebObjects.

00:01:55.240 --> 00:01:57.970
We'll be going over how we
integrated that into the product.

00:01:58.110 --> 00:02:02.940
We'll have lots of demos,
and then we'll go over some

00:02:02.940 --> 00:02:06.350
tips and tricks for debugging,
and then we should have time for Q&A.

00:02:08.600 --> 00:02:09.300
You'll have to excuse me.

00:02:09.300 --> 00:02:12.070
I'm getting over a cold,
so I may be coughing a lot during this.

00:02:12.080 --> 00:02:21.090
So when you talk about EJB,
you talk about there's a

00:02:21.090 --> 00:02:23.710
number of versions of EJB that
have been shipped by Sun.

00:02:23.720 --> 00:02:26.560
What we've done is we've
bundled an EJB 1.1 compatible

00:02:26.650 --> 00:02:28.220
container with the product.

00:02:28.280 --> 00:02:33.260
The reason we did that is that right
now the current component marketplace

00:02:33.270 --> 00:02:36.350
out there is based on EJB 1.1 beans.

00:02:36.360 --> 00:02:38.830
And the primary driver for us,
including EJB,

00:02:38.900 --> 00:02:42.020
as part of the WebObjects product,
was for you to be able to take

00:02:42.020 --> 00:02:45.380
pre-written beans and integrate
them into your applications.

00:02:45.380 --> 00:02:49.260
One important thing to note is the
container is not Sun certified,

00:02:49.260 --> 00:02:53.160
so we are believed to
be EJB 1.1 compatible,

00:02:53.160 --> 00:02:55.900
but we are not J2EE compliant.

00:03:00.550 --> 00:03:04.080
So,
if you went to the intro to EOF session,

00:03:04.080 --> 00:03:07.680
I believe it was Tuesday afternoon,
you kind of got an

00:03:07.680 --> 00:03:09.860
overview of what EOF is.

00:03:09.920 --> 00:03:13.240
There's some more EOF sessions
later in the day today,

00:03:13.240 --> 00:03:16.960
but I wanted to go over some strengths
that EOF brings to the table.

00:03:16.960 --> 00:03:20.560
One of the big things is that your
business logic and your EOs are

00:03:20.850 --> 00:03:23.160
completely data source independent.

00:03:23.490 --> 00:03:25.980
If you've used EOF,
you know that you don't have to change

00:03:26.060 --> 00:03:30.490
your code at all if you're writing,
if you swap your database out.

00:03:30.580 --> 00:03:33.550
If you want to talk to JNDI,
you don't know that it's

00:03:33.550 --> 00:03:35.870
JNDI really in your business logic.

00:03:35.880 --> 00:03:39.170
We hide all the database specifics,
such as SQL generation and

00:03:39.230 --> 00:03:40.800
primary key generation.

00:03:40.800 --> 00:03:44.080
You can change your schema,
meaning edit your model

00:03:44.080 --> 00:03:46.060
without changing your code.

00:03:46.060 --> 00:03:48.280
So you can add a new column,
generate a table,

00:03:48.280 --> 00:03:51.270
your business logic necessarily
doesn't have to change.

00:03:52.860 --> 00:03:54.650
Relationships are handled
automatically for you.

00:03:54.800 --> 00:03:56.920
As you've seen in the real
estate demonstrations,

00:03:56.920 --> 00:04:01.180
you can have listings
and agents and customers.

00:04:01.180 --> 00:04:03.450
And the relationships and the
joins are all handled for you

00:04:03.450 --> 00:04:04.970
automatically by the EOF frameworks.

00:04:05.060 --> 00:04:08.090
We have a great set of
rapid development tools.

00:04:08.180 --> 00:04:11.850
The direct-to-web, direct-to-Java client,
direct-to-web services

00:04:11.850 --> 00:04:13.220
are good examples of that.

00:04:13.230 --> 00:04:17.220
And let you prototype and develop
applications very quickly.

00:04:17.220 --> 00:04:20.010
And another big strength
of EOF is the model's been

00:04:20.010 --> 00:04:21.930
optimized for in-process use.

00:04:22.380 --> 00:04:26.730
What I mean by that is that

00:04:26.880 --> 00:04:30.460
We have really good caching,
and we assume that everything

00:04:30.460 --> 00:04:33.780
happens in a single application.

00:04:33.950 --> 00:04:36.590
So we can batch up
requests to the database,

00:04:36.690 --> 00:04:39.210
and we can be very intelligent
about how we query the database

00:04:39.280 --> 00:04:40.560
and keep a lot of state around.

00:04:42.920 --> 00:04:44.580
So what about EJB?

00:04:44.690 --> 00:04:50.770
So EJB has got a very strong
transaction security model.

00:04:50.910 --> 00:04:53.910
What that means is they have,
the architecture's been

00:04:53.910 --> 00:04:57.860
designed for distributed
two-phase commit transactions,

00:04:57.970 --> 00:05:02.500
and corpus security's built into this,
and all kinds of other bigger

00:05:02.500 --> 00:05:07.860
enterprise scale models.

00:05:07.990 --> 00:05:10.270
It's been designed for
multi-client remote access.

00:05:10.340 --> 00:05:14.240
Another reason there's two-phase commit
there is you can have really distributed

00:05:14.240 --> 00:05:18.140
things and everybody can talk to it,
and the transaction manager

00:05:18.160 --> 00:05:21.470
and the EJB container handles
the concurrency for you.

00:05:21.560 --> 00:05:24.350
You get a lot of access
to third-party beans.

00:05:24.350 --> 00:05:27.460
There is an emerging
marketplace out there.

00:05:27.630 --> 00:05:30.380
Shopping cart beans
are starting to pop up.

00:05:30.500 --> 00:05:34.000
SAP's got beans, for example,
to talk to them.

00:05:34.000 --> 00:05:37.620
There's a number of things that you
can just plug in and drop into your

00:05:37.620 --> 00:05:40.000
application without having to write it.

00:05:40.140 --> 00:05:42.990
And then there's other data sources
that you can access through that,

00:05:42.990 --> 00:05:45.440
such as using the JCA architecture.

00:05:45.520 --> 00:05:49.220
I think SAP, again, is another example of
what they have there.

00:05:49.310 --> 00:05:53.040
And also JMS is possible also.

00:05:53.040 --> 00:05:57.340
It's built on top of RMI IIOP,
which allows any programming

00:05:57.340 --> 00:06:00.800
language client to access it
through a corba-like interface.

00:06:00.940 --> 00:06:04.080
And the biggest strength is
it is considered standard

00:06:04.100 --> 00:06:06.890
as far as J2EE is concerned.

00:06:09.610 --> 00:06:12.500
So why do we add this to the product?

00:06:12.500 --> 00:06:15.140
Well, as you saw,
there are different strains.

00:06:15.260 --> 00:06:17.200
They really are not the same.

00:06:17.200 --> 00:06:21.740
Yes, they're both ways to access
data from an application,

00:06:21.740 --> 00:06:27.550
persistent data, but it is not,
you don't use it the same way.

00:06:27.670 --> 00:06:30.270
So what we wanted to do is we
wanted to leverage the existing

00:06:30.330 --> 00:06:33.770
EJB component marketplace and allow
people to take these beans that are

00:06:33.770 --> 00:06:38.400
starting to appear and plop them
into their WebObjects application.

00:06:38.400 --> 00:06:41.780
It also complements the servlet support
that we added to WebObjects 5.1.

00:06:41.790 --> 00:06:47.530
So if you are a J2EE customer already,
you can deploy your WebObjects

00:06:47.630 --> 00:06:50.520
application as a servlet,
and it makes perfect sense that

00:06:50.900 --> 00:06:55.030
you would want to access EJB and
some other J2EE services also.

00:06:55.170 --> 00:06:58.650
And this also gives us a chance to
provide a complete solution from Apple so

00:06:58.650 --> 00:07:02.460
you don't have to go out and buy someone
else's container if you don't want to.

00:07:02.620 --> 00:07:06.340
So you can take Tomcat and
MacÂ OSÂ X Server with WebObjects

00:07:06.340 --> 00:07:10.540
5.1 and have pretty close to
a J2EE compatible solution.

00:07:10.730 --> 00:07:13.940
Almost said compliant,
which would have been a big mistake.

00:07:15.700 --> 00:07:17.290
So what did we choose?

00:07:17.420 --> 00:07:20.440
We investigated a lot
of various solutions,

00:07:20.440 --> 00:07:22.170
including writing one ourself.

00:07:22.170 --> 00:07:26.200
But as you guys probably know,
it's pretty complicated,

00:07:26.200 --> 00:07:29.890
and we would need a large
engineering staff to do that.

00:07:30.020 --> 00:07:34.030
So we looked at what was out
there in the open source world

00:07:34.040 --> 00:07:38.500
and the commercial world and tried
to weigh into what we wanted.

00:07:38.630 --> 00:07:41.230
Some of the requirements that we
needed were that the container

00:07:41.300 --> 00:07:42.930
needed to be self-contained.

00:07:42.940 --> 00:07:47.730
And what that means is that we
wanted a pluggable container.

00:07:47.730 --> 00:07:53.180
A lot of the open or freely available or
even commercial products out there today,

00:07:53.470 --> 00:07:56.970
their EJB container is very tightly
integrated into their application

00:07:56.970 --> 00:07:58.960
server and not easily separable.

00:07:59.110 --> 00:08:02.290
We wanted to make sure that we
were able to keep the Web component

00:08:02.290 --> 00:08:05.200
model that we have as part of
WebObjects that you guys have known

00:08:05.200 --> 00:08:07.670
and loved for the number of years.

00:08:07.780 --> 00:08:10.210
And so it was very important
to us that this was a modular,

00:08:10.270 --> 00:08:12.010
pluggable,
extensible container that we could

00:08:12.010 --> 00:08:13.200
easily drop into the container.

00:08:13.200 --> 00:08:15.830
That we could easily drop into the
existing product without a lot of

00:08:15.840 --> 00:08:18.560
rework and compatibility problems.

00:08:18.660 --> 00:08:22.650
And we really wanted
RMI IIOP support for that also,

00:08:22.900 --> 00:08:27.850
to allow other systems to
talk easily to the beans.

00:08:28.520 --> 00:08:32.700
So that really only left this one choice,
as far as we could tell.

00:08:33.000 --> 00:08:34.200
It's called OpenEJB.

00:08:34.200 --> 00:08:36.800
It's an open source project.

00:08:36.800 --> 00:08:39.060
It lives on SourceForge.

00:08:39.150 --> 00:08:42.870
And it is a standalone
EJB 1.1 compatible container.

00:08:42.980 --> 00:08:45.560
And all of the services
that the EJB container

00:08:45.560 --> 00:08:48.490
requires are pluggable by us,
the integrator.

00:08:48.730 --> 00:08:52.020
What that means is we were free to choose
the transaction manager that we wanted,

00:08:52.020 --> 00:08:54.980
the orb that we wanted,
the persistence manager support,

00:08:55.080 --> 00:08:58.930
and all of the associated services
we were able to pick and choose and

00:08:59.110 --> 00:09:01.040
integrate that into the product.

00:09:01.230 --> 00:09:02.910
It has a rapid development mode.

00:09:03.140 --> 00:09:09.800
That means that you are able to quickly
turn around and iterate on your bean.

00:09:09.800 --> 00:09:15.530
That's actually something that's
not in WebObjects 5.1 but is

00:09:15.530 --> 00:09:19.040
planned for a forthcoming release.

00:09:19.040 --> 00:09:24.090
It also has a pretty efficient small
footprint as far as EJB is concerned.

00:09:24.270 --> 00:09:26.380
It's not very heavyweight.

00:09:26.640 --> 00:09:30.320
And it does come built in
with the RMI IIOP support.

00:09:30.360 --> 00:09:35.340
Excuse me.

00:09:39.590 --> 00:09:41.480
So what did we pick for services?

00:09:41.770 --> 00:09:43.960
These are also open source projects.

00:09:43.990 --> 00:09:47.720
We picked OpenOrb,
which is a Corba compliant orb.

00:09:47.790 --> 00:09:49.800
Tyrex is a transaction manager.

00:09:49.890 --> 00:09:53.200
Tyrex is actually used in a number
of other commercial products,

00:09:53.200 --> 00:09:55.720
including JBoss,
and I think Sun uses it in

00:09:55.720 --> 00:09:58.340
some of the Netscape stuff.

00:09:58.540 --> 00:10:03.790
And Castor is a persistence manager,
which allows us to manage

00:10:03.900 --> 00:10:04.900
database connections.

00:10:05.030 --> 00:10:07.790
Tyrex and Castor kind of interplay
with each other for connection

00:10:07.900 --> 00:10:10.410
pooling and transaction management.

00:10:11.910 --> 00:10:15.680
So what OpenEJB is not is it is
not a product that competes with

00:10:15.680 --> 00:10:21.820
WebLogic or some of the other heavy
duty commercial grade J2EE servers.

00:10:21.950 --> 00:10:25.240
It really is intended for you,
the developer,

00:10:25.400 --> 00:10:31.950
to develop beans and prototype and test
beans or use it in small deployments.

00:10:34.740 --> 00:10:41.700
So kind of go over a little bit of
how we plug this into the product.

00:10:41.700 --> 00:10:46.220
At the tops of WebObjects application,
the big box in the middle is

00:10:46.220 --> 00:10:50.400
kind of an illustration to
try and show what OpenEJB is.

00:10:50.440 --> 00:10:52.880
So when we talk about an EJB container,
we're really talking

00:10:52.880 --> 00:10:54.550
about multiple containers.

00:10:54.770 --> 00:10:57.370
There are different bean types,
as you may know,

00:10:57.370 --> 00:11:01.210
and EJB 1.1 supports four
different types of beans.

00:11:01.260 --> 00:11:06.090
So stateful and stateless session beans,
and entity beans of two varieties,

00:11:06.150 --> 00:11:09.460
container managed persistence
and bean managed persistence.

00:11:09.460 --> 00:11:14.180
And so those all kind of live in
separate spaces in the big EJB container.

00:11:14.480 --> 00:11:19.000
The EJB container talks to transaction
manager services using JTA,

00:11:19.000 --> 00:11:22.450
and it talks to other
resources like the orb.

00:11:22.460 --> 00:11:27.710
And up on top, you can either talk
RMI IOP to your application,

00:11:28.120 --> 00:11:32.120
or plan for the next
release is an intra-VM,

00:11:32.120 --> 00:11:35.000
lightweight, fast,
low-latency thing if you want

00:11:35.090 --> 00:11:38.600
to just have a single process
talking to your container.

00:11:38.600 --> 00:11:41.670
And I think I'll go into that
a little bit later about how we

00:11:41.940 --> 00:11:43.640
actually launch the container.

00:11:47.150 --> 00:11:52.920
So the container, actually,
when you start-- instantiate a container

00:11:52.920 --> 00:11:56.730
in your WebObjects application,
we actually start the container in the

00:11:56.930 --> 00:11:59.410
same VM as your WebObjects application.

00:11:59.630 --> 00:12:02.600
which means you have low
latency to talk to the beans.

00:12:02.700 --> 00:12:04.660
There's no security issues because
you're not really dealing with

00:12:04.730 --> 00:12:06.000
requests coming in over the network.

00:12:06.110 --> 00:12:08.420
You're in complete control of everything.

00:12:08.420 --> 00:12:10.090
And it's real simple to deploy.

00:12:10.340 --> 00:12:12.940
You deploy it just like you would
deploy a WebObjects application.

00:12:13.090 --> 00:12:17.350
Just launch it or deal
with monitor and task D.

00:12:19.700 --> 00:12:20.380
Excuse me.

00:12:20.450 --> 00:12:23.920
So we also,
in addition to supplying the container,

00:12:23.920 --> 00:12:25.700
we provided a number of new tools.

00:12:25.700 --> 00:12:30.660
EJB components are actually represented
as frameworks to match the web component

00:12:30.660 --> 00:12:33.860
model and the other frameworks that
you're familiar with if you're a

00:12:33.860 --> 00:12:35.880
Cocoa developer or MacÂ OSÂ X developer.

00:12:35.880 --> 00:12:39.560
We've added assistance to
Project Builder for helping create beans.

00:12:39.560 --> 00:12:43.000
We've added support to the build
system to generate the deployment

00:12:43.000 --> 00:12:46.500
descriptors and the configuration files,
and we'll go into that in

00:12:46.500 --> 00:12:48.930
excruciating detail during the demos.

00:12:49.700 --> 00:12:53.640
We also, as I mentioned earlier,
start the container automatically

00:12:54.020 --> 00:12:55.180
at launch time for you.

00:12:55.180 --> 00:12:58.260
And again, we'll go into a little bit
more detail of that later.

00:12:58.260 --> 00:13:02.330
And we provide a tool that's run by
the assistance called OpenEJBTool that

00:13:02.580 --> 00:13:06.990
actually generates the XML deployment
descriptors and the configuration files,

00:13:06.990 --> 00:13:09.510
or sorry,
generates the configuration files

00:13:09.510 --> 00:13:12.630
for the container out of your
bean deployment descriptors.

00:13:12.640 --> 00:13:15.930
And new, which we'll preview for
you a little bit later,

00:13:16.090 --> 00:13:18.390
is a new tool called EO Bean Builder.

00:13:18.420 --> 00:13:21.650
And what that will do... It'll
allow you to generate entity beans

00:13:21.650 --> 00:13:25.040
from your EO models without you
having to write any code at all.

00:13:25.040 --> 00:13:27.880
It'll actually do all the
deployment descriptor generation,

00:13:27.880 --> 00:13:31.110
all the class file generation for you,
and give you a fully functional

00:13:31.140 --> 00:13:35.980
entity bean without you having to
write any SQL or wonderful JSP code.

00:13:36.040 --> 00:13:40.530
Or, sorry, EJB instantiation code.

00:13:41.910 --> 00:13:45.310
So why put the EJBs in a framework?

00:13:45.600 --> 00:13:51.830
In addition to it being consistent
with the way the rest of WebObjects

00:13:51.920 --> 00:13:57.880
applications are developed,
we wanted to make it very easy for you to

00:13:57.880 --> 00:14:02.270
just drag and drop it in Project Builder.

00:14:02.270 --> 00:14:02.270
So...

00:14:02.440 --> 00:14:06.120
A component in EJB should be
thought of as a framework in the

00:14:06.120 --> 00:14:09.110
MacÂ OSÂ X project builder model.

00:14:09.870 --> 00:14:11.880
and it works just like
any other framework.

00:14:11.970 --> 00:14:15.020
You just drop it and add it to your
project and Project Builder's build

00:14:15.130 --> 00:14:16.760
system will do the right thing.

00:14:16.900 --> 00:14:19.210
There is a new project type we
added in Project Builder that

00:14:19.210 --> 00:14:20.780
allows you to create frameworks.

00:14:20.830 --> 00:14:23.480
We'll go through that in the demo.

00:14:23.480 --> 00:14:26.410
One important thing is there's
no container-specific information

00:14:26.410 --> 00:14:28.690
contained in the EJB framework.

00:14:28.690 --> 00:14:32.130
And so what that means is if
you build an EJB framework using

00:14:32.130 --> 00:14:35.150
our build system and our tools,
you're able to take the generated jars

00:14:35.250 --> 00:14:39.120
and deployment descriptors from that
framework and put them and move them

00:14:39.200 --> 00:14:41.120
over to a different EJB container.

00:14:41.390 --> 00:14:43.960
We generate separate jars for
interfaces and implementation,

00:14:43.960 --> 00:14:46.420
meaning the server side
and the client side.

00:14:46.420 --> 00:14:51.070
And as I just mentioned,
the jars are exportable to any container.

00:14:55.570 --> 00:14:57.380
So we actually can do beans two ways.

00:14:57.380 --> 00:15:00.870
We can import existing compiled
beans with an assistant that

00:15:01.090 --> 00:15:03.720
lets you specify jar files.

00:15:03.720 --> 00:15:06.370
And then the project builder will
then--the assistant will then create

00:15:06.370 --> 00:15:11.260
the necessary framework and associated
deployment descriptors and all the other

00:15:11.330 --> 00:15:16.470
infrastructure that project builder needs
to recognize it as a framework in a bean.

00:15:16.470 --> 00:15:18.670
Or you can develop beans from source.

00:15:18.950 --> 00:15:23.470
You can start as an empty framework and
create whatever you want from source,

00:15:23.470 --> 00:15:24.170
any of the four bean types.

00:15:26.310 --> 00:15:27.580
So how do you import a bean?

00:15:27.580 --> 00:15:32.200
You can actually have more
than one bean in a framework.

00:15:32.200 --> 00:15:34.040
You just specify them in the assistant.

00:15:34.040 --> 00:15:35.720
We'll go through all
this in the demo later.

00:15:35.720 --> 00:15:37.600
You specify beans in the assistant.

00:15:37.600 --> 00:15:41.000
It'll merge the jars and the deployment
descriptors and all the fun stuff,

00:15:41.140 --> 00:15:44.400
and you can deal with it if
you want manually afterwards.

00:15:44.400 --> 00:15:47.670
But we actually do a pretty good job
of merging the deployment descriptors

00:15:47.760 --> 00:15:50.860
and letting you just drop things
in without having to modify them.

00:15:50.880 --> 00:15:53.640
It'll generate the
RMI stubs if necessary.

00:15:53.640 --> 00:15:54.820
It's actually an option.

00:15:55.340 --> 00:15:58.240
We make it an option because
actually the RMI generator,

00:15:58.240 --> 00:16:01.240
the stub generator, actually is a fairly
time-consuming process,

00:16:01.240 --> 00:16:02.740
as you'll see during the demo.

00:16:02.740 --> 00:16:05.860
And if you're doing the intra-VM
deployment for rapid turnaround,

00:16:05.860 --> 00:16:09.040
you probably don't want to wait the
time for those stubs to compile.

00:16:09.040 --> 00:16:12.880
One of the new things we're
thinking about adding for the

00:16:12.880 --> 00:16:16.760
next release is a hook to let
you add a bean verification tool.

00:16:16.760 --> 00:16:19.560
We don't actually ship
the verification tool,

00:16:19.560 --> 00:16:22.180
but it's available from the
Sun Reference implementation.

00:16:22.180 --> 00:16:26.710
But you can... What that verification
tool does is it makes sure all the

00:16:26.710 --> 00:16:31.800
right things that a bean requires in
the interface are properly in your bean,

00:16:31.800 --> 00:16:34.100
things that can't be
checked at compile time.

00:16:34.100 --> 00:16:37.950
And it generates a framework
ready for you to leave,

00:16:38.150 --> 00:16:39.900
ready to use and drop
into your application.

00:16:42.880 --> 00:16:45.980
So if you want to develop from source,
again, we have assistants that create

00:16:45.980 --> 00:16:48.740
the template classes for
all four of the bean types.

00:16:48.890 --> 00:16:51.670
PB maintains the deployment
descriptor for you.

00:16:51.780 --> 00:16:53.830
And again,
you have an option of generating

00:16:53.940 --> 00:16:55.360
RMI stubs if you want.

00:16:55.450 --> 00:16:57.060
And again, there's a hook.

00:16:57.180 --> 00:16:59.520
We're planning to generate
verification tools.

00:16:59.680 --> 00:17:06.500
It's actually probably more important
to verify beans that you're writing

00:17:06.500 --> 00:17:06.920
from scratch than beans that
you've bought or have precompiled.

00:17:10.830 --> 00:17:15.750
So how do you create an app now that
you have these beans in the framework?

00:17:15.850 --> 00:17:17.860
There's an option,
as you've probably seen if you've been

00:17:17.860 --> 00:17:20.570
in some of the other sessions where
we've been going through creating apps,

00:17:20.570 --> 00:17:21.820
where we've been kind of glossed over.

00:17:21.820 --> 00:17:23.600
There's a little check box
that says "Deploy as an

00:17:23.640 --> 00:17:27.050
EJB container." So what that does,
if you check that box on your

00:17:27.050 --> 00:17:30.630
Web Application Assistant,
is it will add all the required

00:17:30.630 --> 00:17:34.470
EJB frameworks for runtime,
and it will create all the container

00:17:34.470 --> 00:17:37.700
configuration files in XML that
the container needs to run,

00:17:37.840 --> 00:17:40.960
and then it just adds them
to the project for you.

00:17:40.960 --> 00:17:45.060
One important thing to remember is
in order to best make use of this,

00:17:45.060 --> 00:17:47.990
you should make sure that your bean
frameworks are all compiled first,

00:17:47.990 --> 00:17:51.770
because the assistant needs to
have the deployment descriptors

00:17:51.770 --> 00:17:55.350
from the bean frameworks in order
to really generate as best it can

00:17:55.380 --> 00:17:57.340
the other XML configuration files.

00:18:01.270 --> 00:18:06.840
So, as I mentioned earlier,
we start the container automatically when

00:18:06.910 --> 00:18:09.380
you launch your WebObjects application.

00:18:09.490 --> 00:18:13.040
And the way we do that is that's
actually another framework called

00:18:13.040 --> 00:18:16.960
Java EJB Activation Framework that
its initializer will actually launch

00:18:16.960 --> 00:18:19.880
and configure the container for you.

00:18:20.350 --> 00:18:26.150
It's used whether or not you're
using intra-VM mode or RMI mode.

00:18:26.150 --> 00:18:29.490
There's a lot of options to
control the container and logging,

00:18:29.490 --> 00:18:32.150
which I think we will show at
the end of one of the demos.

00:18:36.070 --> 00:18:39.940
OpenEJBTool is a tool that we
wrote that runs at build time,

00:18:39.940 --> 00:18:44.110
excuse me, at assistant time,
that creates a deployment

00:18:44.110 --> 00:18:50.180
descriptor for the EJB container,
or sorry, creates the configuration

00:18:50.180 --> 00:18:51.510
files that the container needs.

00:18:51.630 --> 00:18:55.450
The deployment descriptors are actually
already created in the frameworks.

00:18:55.540 --> 00:18:59.100
There's a slide in a little bit that
actually shows all these wonderful

00:18:59.100 --> 00:19:01.880
XML files that get generated for you.

00:19:02.050 --> 00:19:05.930
It also has templates for the
other XML files that are needed,

00:19:05.950 --> 00:19:08.570
such as things that can't
be filled in automatically,

00:19:08.570 --> 00:19:11.810
like your database connection
dictionary information,

00:19:11.810 --> 00:19:14.630
or specifics for container
managed persistence that you

00:19:14.710 --> 00:19:20.460
actually need to fill in by hand,
like which column in the table

00:19:20.460 --> 00:19:23.990
maps to which field in your CMPB.

00:19:25.370 --> 00:19:29.930
So here's a list of the files
that are generated for you.

00:19:30.060 --> 00:19:33.700
There's actually five files
that manage the container.

00:19:33.840 --> 00:19:36.240
Five, not four.

00:19:36.360 --> 00:19:39.350
There are two that are
required in all cases.

00:19:39.560 --> 00:19:42.670
The names are rather long,
but you shouldn't have

00:19:42.770 --> 00:19:43.890
to worry about them.

00:19:44.000 --> 00:19:46.760
The top two,
the Transaction Manager Configuration,

00:19:46.900 --> 00:19:50.800
is really kind of an overriding
thing that manages TIREX and

00:19:50.900 --> 00:19:53.180
its connection pooling.

00:19:53.180 --> 00:19:58.180
OpenEJB Configuration is the
overall container management,

00:19:58.260 --> 00:20:02.760
which specifies which
beans will be deployed,

00:20:02.850 --> 00:20:03.280
other things.

00:20:03.280 --> 00:20:06.620
And we'll go through the XML files.

00:20:06.720 --> 00:20:08.310
Not in too much detail,
but we'll show you the

00:20:08.420 --> 00:20:09.940
files during the demos.

00:20:10.050 --> 00:20:14.280
If you do container manage persistence,
there's a number of other required files

00:20:14.280 --> 00:20:20.110
to specify data sources and specify
tables mapping to fields in the beans.

00:20:20.160 --> 00:20:24.550
And those are the ones that you're
most likely going to have to tweak

00:20:24.660 --> 00:20:26.980
by hand when you deploy the beans.

00:20:26.980 --> 00:20:29.980
We fill in placeholders for you,
so they're fairly obvious for

00:20:30.160 --> 00:20:32.430
you where it needs to be edited.

00:20:33.700 --> 00:20:36.380
So what are some limitations
with what we have today?

00:20:36.400 --> 00:20:39.590
I guess the biggest limitation
right now is that EOF and EJB are

00:20:40.090 --> 00:20:42.870
really two separate things in
this release of the product.

00:20:43.040 --> 00:20:45.680
They don't understand
each other's transactions.

00:20:45.710 --> 00:20:50.660
And what I mean by that is that
EOF has a very strong caching

00:20:50.660 --> 00:20:54.170
model in the editing context,
and it doesn't talk to the

00:20:54.340 --> 00:20:56.780
transaction manager at all.

00:20:56.790 --> 00:20:59.870
And so if a bean comes in and
modifies a database table out from

00:20:59.870 --> 00:21:03.780
underneath the EOF side of your
application or a different application,

00:21:03.810 --> 00:21:05.620
you potentially have stale data.

00:21:05.620 --> 00:21:09.170
It's pretty much the same problem you
have today if you have multiple instances

00:21:09.280 --> 00:21:11.160
talking to the same database in EOF.

00:21:11.160 --> 00:21:14.470
And I think Steve's going to be
talking about something with that in

00:21:14.470 --> 00:21:17.840
the advanced EOF session later this
afternoon on how to deal with optimistic

00:21:17.930 --> 00:21:19.700
locking failures and concurrency issues.

00:21:19.800 --> 00:21:21.820
So you might want to come back for that.

00:21:22.280 --> 00:21:25.580
I think it's 5 o'clock this afternoon,
right?

00:21:25.940 --> 00:21:28.210
So because of this,
we don't support writing

00:21:28.220 --> 00:21:30.970
EOF code inside your EJBs.

00:21:30.980 --> 00:21:32.980
If you're going to write a bean,
you're going to write a bean

00:21:32.980 --> 00:21:35.880
using the J2EE APIs today.

00:21:36.010 --> 00:21:40.080
You probably can get away with a
little bit of EOF code if you're really

00:21:40.180 --> 00:21:42.640
careful and know what you're doing,
but it's real easy to get

00:21:42.640 --> 00:21:44.020
into trouble right now.

00:21:44.100 --> 00:21:47.710
And so we really do not
recommend you doing that.

00:21:48.280 --> 00:21:50.160
And again,
the last bullet point to drive it

00:21:50.200 --> 00:21:54.020
home is that there's no notifications
at all between EOF and EJB,

00:21:54.020 --> 00:21:56.270
and that's the reason we don't
recommend mixing these two

00:21:56.410 --> 00:21:57.550
things together right now.

00:22:00.470 --> 00:22:02.400
So that's kind of the overview.

00:22:02.400 --> 00:22:05.540
I wanted to bring up
Stefan Reich and RD Wilhoyt.

00:22:05.540 --> 00:22:11.470
And Stefan's going to talk through
some demos while RD drives them.

00:22:19.170 --> 00:22:20.740
Thank you, Jeff.

00:22:20.840 --> 00:22:24.880
Good morning and welcome to
the second part of our session,

00:22:24.930 --> 00:22:26.900
the technical overview.

00:22:27.390 --> 00:22:31.940
We will go through three
demos in the next 30 minutes,

00:22:31.970 --> 00:22:34.950
and we will show you the
everyday use of the product.

00:22:35.010 --> 00:22:37.880
So let's start with the first demo now.

00:22:40.960 --> 00:22:46.660
We will bring up Project Builder
and create a new EJB framework.

00:22:46.730 --> 00:22:48.990
So as Jeff mentioned already,
we have a new framework

00:22:49.080 --> 00:22:51.220
type called EJB framework.

00:22:51.470 --> 00:22:56.190
And we create a new one,
fill in the blanks here.

00:22:57.580 --> 00:23:01.330
And also we have two choices
to create an EJB framework.

00:23:01.410 --> 00:23:05.000
One choice is to create a development
type framework from source.

00:23:05.070 --> 00:23:08.000
The other one is to basically
deploy an EJB component that you

00:23:08.000 --> 00:23:10.100
bought off the shelf from somewhere.

00:23:10.190 --> 00:23:12.650
So for this first demo,
we will create a new one.

00:23:12.710 --> 00:23:15.410
We will create a new source file here.

00:23:16.780 --> 00:23:22.650
And this screen shows you the project
builder support for development.

00:23:22.770 --> 00:23:24.690
We have four different bean types,
of course.

00:23:24.800 --> 00:23:29.700
The stateless and stateful session bean,
the CMP, and the BMP entity bean.

00:23:29.700 --> 00:23:36.410
And for this demo, we just use a simple
stateless session bean.

00:23:37.700 --> 00:23:41.840
So of course we can fill in
the name and the package name.

00:23:41.840 --> 00:23:47.710
And let's have a look at what
project builder renovated for us.

00:23:49.430 --> 00:23:53.300
So we have three files that
were created automatically.

00:23:53.400 --> 00:23:56.340
We have the bean implementation,
the remote interface,

00:23:56.440 --> 00:23:58.420
and the home interface.

00:23:58.560 --> 00:24:01.710
So let's have a look at the
bean implementation first.

00:24:03.500 --> 00:24:08.450
As you can see,
we have the necessary EJB create method.

00:24:08.540 --> 00:24:13.860
We have all of the methods that are
required by the session bean interface.

00:24:13.970 --> 00:24:15.900
And there is nothing
really interesting here.

00:24:15.900 --> 00:24:18.630
It's just a simple state of session bean.

00:24:18.740 --> 00:24:22.470
And we will just uncomment
the code that's automatically

00:24:23.060 --> 00:24:29.940
basically serves as a template for you to
remember how to pull in business logic.

00:24:30.120 --> 00:24:34.540
So we uncomment this,
and we move on to the remote interface.

00:24:35.420 --> 00:24:40.840
The remote interface is, as you know,
the place to place business methods,

00:24:40.900 --> 00:24:42.080
business logic.

00:24:42.170 --> 00:24:45.950
And this is, of course,
empty because Project Builder

00:24:45.950 --> 00:24:47.680
doesn't know by default how

00:24:47.950 --> 00:24:50.030
What business logic
you want to implement,

00:24:50.050 --> 00:24:52.260
unless it can read your mind,
and project builder is

00:24:52.260 --> 00:24:54.260
definitely not there yet.

00:24:54.440 --> 00:24:57.140
So, let's uncomment this one method.

00:24:59.110 --> 00:25:01.440
and move on to the home interface.

00:25:01.560 --> 00:25:05.040
And of course,
that's not very exciting either.

00:25:05.140 --> 00:25:08.650
It has the create method,
the standard stateful session bean

00:25:08.650 --> 00:25:12.340
create method that takes no arguments.

00:25:12.450 --> 00:25:15.510
Now let's have a quick look
at the deployment descriptor.

00:25:19.730 --> 00:25:21.560
As you can see,
Project Builder already filled

00:25:21.560 --> 00:25:23.480
in all the necessary information.

00:25:23.480 --> 00:25:27.450
Since we have the templates
ready for every single bean,

00:25:27.450 --> 00:25:31.840
Project Builder knows enough to
fill in everything that's required.

00:25:31.890 --> 00:25:35.760
And now let's simply hit compile.

00:25:39.500 --> 00:25:42.740
We move on and create a new
WebObjects application that will

00:25:42.740 --> 00:25:46.500
link against the framework and call
into the bean that we generated.

00:25:46.500 --> 00:25:52.420
So again, we fill in the project name.

00:25:56.130 --> 00:26:00.240
And Jeff already showed a
slide that covers this option,

00:26:00.240 --> 00:26:02.000
deploy as an EJB container.

00:26:02.020 --> 00:26:07.520
What this does is it will fit in
a couple of predefined frameworks

00:26:07.520 --> 00:26:10.980
already and make your life easier.

00:26:10.990 --> 00:26:12.730
Let's check that.

00:26:13.960 --> 00:26:16.140
And we skip all the web services support.

00:26:16.230 --> 00:26:17.900
This is not the session for web services.

00:26:20.500 --> 00:26:24.100
And for the EOF adapters,
if you use EOF and EJB side by side,

00:26:24.140 --> 00:26:25.940
you need to select JDBC adapter.

00:26:25.940 --> 00:26:29.290
We are using only EJB here,
so you don't need it.

00:26:31.700 --> 00:26:35.450
Now, as you can see,
Project Builder already added the

00:26:35.450 --> 00:26:37.540
necessary frameworks for EJB support.

00:26:37.540 --> 00:26:41.600
We have the OpenEJB framework,
we have the activation framework,

00:26:41.710 --> 00:26:47.340
and we have all of the other pieces
that are required for the EJB to work.

00:26:47.550 --> 00:26:51.280
The only thing we are going to
add now is the business logic,

00:26:51.300 --> 00:26:54.310
the framework that we just created.

00:26:56.020 --> 00:26:59.000
This will enable Project Builder
to create all of the necessary

00:26:59.400 --> 00:27:03.960
container files so that the container
can be configured and launched.

00:27:06.890 --> 00:27:07.530
That's it, finished.

00:27:07.530 --> 00:27:16.110
Now the first thing that we have to do
now is to change the database setup.

00:27:17.470 --> 00:27:18.840
We have only the stateful session bean.

00:27:18.840 --> 00:27:22.400
We don't need a database,
so we will just remove

00:27:24.450 --> 00:27:29.400
the database template that
Project Builder created for us.

00:27:30.190 --> 00:27:31.790
There we go.

00:27:34.070 --> 00:27:38.110
And now we will add some demo code
that will actually look up the bean

00:27:38.750 --> 00:27:42.890
and call the hello method that we
created on the StatefulSession bean.

00:27:46.040 --> 00:27:48.660
So after we compile and
run the application,

00:27:48.670 --> 00:27:51.460
we will make use of
the rapid development,

00:27:51.570 --> 00:27:56.480
the rapid turnaround support that's
present in WebObjects applications.

00:27:56.480 --> 00:28:03.490
And we will just type in a
little HTML text and connect.

00:28:04.060 --> 00:28:06.720
Connect the HTML with our EJB.

00:28:06.720 --> 00:28:11.030
We just use a whole string for it
that will actually call into the

00:28:11.130 --> 00:28:16.230
main component and extracts the data
and displays them in our browser.

00:28:16.240 --> 00:28:25.520
So the application is running already.

00:28:25.520 --> 00:28:27.150
The first screen was blank.

00:28:34.000 --> 00:28:39.960
The second screen is blank.

00:28:51.900 --> 00:28:52.940
You're trying to get me in trouble.

00:28:52.940 --> 00:28:58.290
Okay, so look, it's almost working.

00:29:00.400 --> 00:29:07.790
And we will just consider
this demo to be finished.

00:29:07.820 --> 00:29:10.190
So that shows you--

00:29:13.210 --> 00:29:17.700
Rebuilding.

00:29:17.800 --> 00:29:22.690
So the essence of the first demo
is you can create an EJB framework

00:29:23.050 --> 00:29:24.730
from the source template.

00:29:24.740 --> 00:29:28.740
And then you use it in your
WebObjects application.

00:29:28.740 --> 00:29:31.240
Set up the project right from the start.

00:29:31.240 --> 00:29:33.430
Yay!

00:29:35.000 --> 00:29:37.720
You set up your WebObjects
application right from the start

00:29:37.720 --> 00:29:44.760
to link in the right frameworks,
and that's all you need to do.

00:29:44.770 --> 00:29:47.120
So we move on to the slides again.

00:29:47.180 --> 00:29:48.750
Thank you, Arlene.

00:29:51.910 --> 00:29:55.960
Jeff already talked briefly about
a new tool that we provide with

00:29:56.100 --> 00:30:00.690
hopefully the next available release.

00:30:01.330 --> 00:30:10.880
It's very awkward to hand program
entity beans from your database layout.

00:30:11.000 --> 00:30:13.270
And that's exactly what
EO Bean Builder does.

00:30:13.350 --> 00:30:19.900
It basically takes a database layout
that is represented in an EO model,

00:30:19.910 --> 00:30:25.250
and it generates all of the files
that are necessary to deploy your

00:30:25.250 --> 00:30:28.200
database schema to convert it
into an enterprise Java bean.

00:30:29.720 --> 00:30:37.210
So we have a wide range of options
to translate the model into an EJB.

00:30:37.720 --> 00:30:41.060
and we will go into
details in the next demo.

00:30:41.240 --> 00:30:45.000
Currently, there's only one major
limitation of the tool,

00:30:45.000 --> 00:30:48.290
and it cannot handle
relationship-- that is,

00:30:48.440 --> 00:30:52.700
it cannot handle
relationships automatically.

00:30:52.880 --> 00:30:58.120
The two will try and make the best
effort to get you as far as you can,

00:30:58.130 --> 00:31:02.300
but after that you have to model
the relationships by yourself.

00:31:02.300 --> 00:31:03.610
And we will just demo it right now.

00:31:08.810 --> 00:31:15.800
So we will take the
EO model that you see here.

00:31:15.800 --> 00:31:48.400
[Transcript missing]

00:31:49.240 --> 00:31:56.770
So we move on and launch the tool
and load this specific model.

00:32:01.200 --> 00:32:03.160
Here we go.

00:32:03.160 --> 00:32:05.660
We select the only data
type that we configured,

00:32:05.660 --> 00:32:12.710
the only entity, and now we come to the
fine-grained setup for the EJB.

00:32:13.000 --> 00:32:14.860
So as you can see,
you can change all of the

00:32:14.990 --> 00:32:17.860
class names that are generated.

00:32:17.960 --> 00:32:20.130
You can control some--

00:32:20.150 --> 00:32:23.440
For project-based options
like the package name,

00:32:23.440 --> 00:32:27.770
you can add a legal disclaimer
or an RCS ID or whatever you want

00:32:27.970 --> 00:32:32.380
that is prepended in every file.

00:32:32.830 --> 00:32:36.280
Also, it's very important for you to
choose the primary key class.

00:32:36.430 --> 00:32:40.360
So if you have an integer representation
of your primary key class,

00:32:40.490 --> 00:32:44.400
you will probably want it
to map to the Java integer.

00:32:44.490 --> 00:32:47.860
If you have a component primary key,
you need to map it to the

00:32:48.310 --> 00:32:51.820
primary key class that will be
automatically generated with

00:32:51.830 --> 00:32:53.940
all the primary key attributes.

00:32:54.650 --> 00:33:01.060
Then we have a larger section on how
you can configure your BMP support.

00:33:01.750 --> 00:33:04.680
And in the first box, yes,
we want to generate a

00:33:04.680 --> 00:33:06.880
BMP file to show off

00:33:08.550 --> 00:33:12.430
What ugly code you are spared to program.

00:33:12.430 --> 00:33:13.880
We are not going to
change the class name.

00:33:14.050 --> 00:33:18.380
You can configure the JNDI data
source name to something that is more

00:33:19.100 --> 00:33:26.900
[Transcript missing]

00:33:27.830 --> 00:33:34.430
The next checkbox would enable you to
reuse business logic that you implemented

00:33:34.620 --> 00:33:38.460
in a CMP version of the entity.

00:33:38.570 --> 00:33:43.650
And just by inheritance,
you wouldn't need to write

00:33:43.770 --> 00:33:46.860
all your business logic once
again in the BMP version.

00:33:47.040 --> 00:33:49.390
So we don't care about this now.

00:33:51.060 --> 00:33:56.210
The third major option is controlling
support for data access object classes,

00:33:56.210 --> 00:33:58.600
or DAO classes in short.

00:33:58.620 --> 00:34:01.780
As you all know,
this is a Sun Blueprint pattern that

00:34:01.780 --> 00:34:07.100
allows you to apply database-specific
optimizations for your BMP entity beans.

00:34:07.100 --> 00:34:09.930
And we want to show this, so we check it.

00:34:10.020 --> 00:34:12.900
And of course,
if you need a findAll method

00:34:12.920 --> 00:34:16.780
that finds all of the entities
in your database table,

00:34:16.780 --> 00:34:18.790
of course,
your bean builder can help you there.

00:34:18.800 --> 00:34:20.450
And let's check it.

00:34:22.110 --> 00:34:24.250
The CMP support is very short.

00:34:24.450 --> 00:34:29.920
There is not much to configure here
because it's really quite easy.

00:34:30.020 --> 00:34:33.000
And we are finished with this week.

00:34:35.220 --> 00:34:40.250
So the next step is to
actually choose a directory,

00:34:40.250 --> 00:34:43.500
and your bean builder will
dump the files in there.

00:34:44.780 --> 00:34:48.560
So the idea is that we have tight
integration with Project Builder,

00:34:48.560 --> 00:34:52.040
and that we use an empty framework
that we already pre-created.

00:34:54.310 --> 00:34:59.350
to hold all the files so that we
can easily rebuild the project and

00:34:59.350 --> 00:35:04.110
basically are ready to deploy the bean.

00:35:04.110 --> 00:35:04.110
Okay.

00:35:04.940 --> 00:35:10.500
So the tool is a little bit verbose
on-- it shows you what it does,

00:35:10.500 --> 00:35:11.740
and it's happy.

00:35:11.760 --> 00:35:12.240
Very good.

00:35:12.240 --> 00:35:14.240
So we are happy also.

00:35:14.450 --> 00:35:19.770
And we move on and have a look at all the
files that have been created by the tool.

00:35:21.610 --> 00:35:24.730
So we first start with
the remote interface.

00:35:24.870 --> 00:35:28.600
The remote interface contains, of course,
all of the getter and setter

00:35:28.740 --> 00:35:31.410
methods for each attribute.

00:35:31.910 --> 00:35:33.690
Except, of course,
for primary key attributes

00:35:33.880 --> 00:35:35.540
and read-only attributes.

00:35:35.540 --> 00:35:42.160
So, of course, all of the methods follow
the Java Bean convention with

00:35:42.330 --> 00:35:43.660
Prepend of Get and Set.

00:35:43.710 --> 00:35:45.800
So that's not very exciting.

00:35:45.800 --> 00:35:48.480
So let's move on to the BMP bean.

00:35:52.720 --> 00:35:56.600
So we selected the
generate DAO class option.

00:35:56.740 --> 00:36:00.590
That means now that in
our BMP implementation,

00:36:01.330 --> 00:36:08.540
Every database access will be
delegated to our DAO class.

00:36:08.720 --> 00:36:14.290
So therefore,
this implementation is relatively empty.

00:36:15.210 --> 00:36:21.110
and contains only the fields
that have been generated that

00:36:21.170 --> 00:36:23.170
are mapped to the attributes.

00:36:23.280 --> 00:36:26.400
So we have two EJB create methods,
one that takes only

00:36:26.400 --> 00:36:29.740
the required arguments,
and one that takes all of

00:36:29.740 --> 00:36:31.520
the arguments of our entity.

00:36:35.020 --> 00:36:40.770
Then let's go,
we have our findAll method here.

00:36:40.770 --> 00:36:44.170
And let's move down to the
setEntityContext method.

00:36:44.690 --> 00:36:51.760
This is how you declare the
specific database optimization

00:36:51.910 --> 00:36:55.420
or database-specific
DAO class in your project.

00:36:55.440 --> 00:37:02.330
In this section, you see that the bean is
looking for an environment entry

00:37:02.330 --> 00:37:04.460
called param DAO class name.

00:37:04.460 --> 00:37:08.470
It will generate,
it will instantiate whatever

00:37:08.470 --> 00:37:13.340
class name you configure here
and use it as the DAO class.

00:37:15.440 --> 00:37:21.130
So we actually implement or we
generate two different default classes.

00:37:21.250 --> 00:37:23.860
One is the default

00:37:24.200 --> 00:37:30.500
Non-optimized version and currently we
create also an Oracle optimized version.

00:37:30.610 --> 00:37:33.050
Now let's move on to

00:37:35.210 --> 00:37:39.030
The JDBC DAO implementation.

00:37:39.030 --> 00:37:42.760
So as you've seen, EJB create method,
EJB load, EJB store,

00:37:42.760 --> 00:37:47.340
all these methods are delegated to
the DAO option--to the DAO object.

00:37:47.430 --> 00:37:52.250
And here we have the full
beauty of SQL and JDBC.

00:37:52.390 --> 00:37:54.300
This is what the tool does for you.

00:37:54.300 --> 00:38:00.800
It generates all of the nasty code that
you don't like to program yourself.

00:38:00.890 --> 00:38:03.200
And of course,
since this is generated code,

00:38:03.340 --> 00:38:04.640
you don't need to debug it.

00:38:04.730 --> 00:38:06.300
You can just use it out of the box.

00:38:06.420 --> 00:38:12.290
And you've seen it took you like five
minutes to configure it from your

00:38:12.290 --> 00:38:15.330
model to the bean implementation.

00:38:16.970 --> 00:38:21.900
Okay, I think that's enough nasty stuff.

00:38:21.900 --> 00:38:25.850
And now we move on to the Oracle version.

00:38:25.850 --> 00:38:25.850
So,

00:38:26.790 --> 00:38:31.130
This class adds automatic
primary key support to our

00:38:31.140 --> 00:38:33.500
generic JDBC implementation.

00:38:33.700 --> 00:38:37.880
So your business code doesn't
have to deal with this at all.

00:38:37.880 --> 00:38:42.480
What it does,
it uses an Oracle sequence to select

00:38:43.170 --> 00:38:47.940
automatically the unique primary key,
primary key code.

00:38:48.580 --> 00:38:55.020
and calls in its superclass,
the generic JDBC class,

00:38:55.020 --> 00:39:01.360
and finally does the create method,
does the creation of the bean.

00:39:01.450 --> 00:39:01.680
Good.

00:39:01.870 --> 00:39:04.680
Let's have a look at the
deployment descriptor.

00:39:07.710 --> 00:39:10.100
Of course,
the tool knows everything that's needed

00:39:10.480 --> 00:39:14.700
to generate the two entries that are
present in this deployment descriptor,

00:39:14.800 --> 00:39:18.120
one for the BMP version of the
bean and one for the CMP version.

00:39:19.670 --> 00:39:23.060
And here you can also see
again how you set up the JDBC,

00:39:23.130 --> 00:39:26.790
the environment entry to configure

00:39:28.320 --> 00:39:33.600
The actual class that's used
for the database delegation.

00:39:33.730 --> 00:39:37.460
So in our case, of course,
we use the data type DAO JDBC,

00:39:37.460 --> 00:39:40.130
the generic JDBC class.

00:39:41.300 --> 00:39:44.920
Then let's quickly
browse the CMP version.

00:39:45.030 --> 00:39:49.900
All of the CMP fields are declared here,
everything that is needed

00:39:50.230 --> 00:39:52.480
for deploying the bean.

00:39:52.520 --> 00:39:57.890
We can have a look at the
transactional attributes.

00:39:58.010 --> 00:40:00.390
Also, we provided a default.

00:40:01.800 --> 00:40:23.900
[Transcript missing]

00:40:28.620 --> 00:40:33.670
So here are some development
tips that we would like to share.

00:40:33.810 --> 00:40:39.890
We have seen that EOModeler is very
suitable to model your database

00:40:39.890 --> 00:40:46.350
schema and that it provides access,
for example,

00:40:46.910 --> 00:40:50.140
helpful functions, for example,
for primary key generation.

00:40:50.140 --> 00:40:52.840
We've seen that in the Oracle case.

00:40:52.910 --> 00:40:57.720
And we would encourage you
to use EOModeler even in

00:40:57.720 --> 00:41:01.260
the--even for EJB development.

00:41:01.950 --> 00:41:07.650
After you created your EO model,
we encourage you to use EO Bean Builder.

00:41:08.160 --> 00:41:11.220
for entity bean generation.

00:41:11.250 --> 00:41:15.830
EO Bean Builder will really save you a
great deal of time and even more time

00:41:15.880 --> 00:41:19.040
on debugging that you don't have to do.

00:41:20.670 --> 00:41:26.780
We also recommend to basically make
it easier for you to resynchronize

00:41:27.110 --> 00:41:33.380
possible schema changes to implement
all of the business-related constraints,

00:41:33.490 --> 00:41:35.510
for example, on

00:41:35.830 --> 00:41:38.900
on data values in session beans.

00:41:39.060 --> 00:41:43.730
That way you can easily resynchronize
and you don't have to change,

00:41:43.910 --> 00:41:47.790
you don't have to start and
maintain the code that's generated.

00:41:48.970 --> 00:41:52.750
Finally, and I think that's a
very important point,

00:41:52.750 --> 00:41:56.770
we encourage you to use a
deployment verification tool.

00:41:57.460 --> 00:42:00.560
Although our container
doesn't come with one,

00:42:00.560 --> 00:42:05.620
there is one freely available in
the Sun reference implementation.

00:42:05.770 --> 00:42:09.660
And that's actually the best
choice because it's the official

00:42:10.450 --> 00:42:13.340
interpretation of the rules from Sun.

00:42:13.440 --> 00:42:16.250
We have provided hooks in our
build system that will actually

00:42:16.250 --> 00:42:19.040
make it possible to choose
your specific deployment tool,

00:42:19.040 --> 00:42:23.020
deployment verification
tool that you want to use.

00:42:23.190 --> 00:42:27.570
And the second point is
how you can change it,

00:42:27.720 --> 00:42:29.340
how you can configure
it in Project Builder.

00:42:31.920 --> 00:42:37.680
So wherever there's development,
unfortunately there's debugging.

00:42:37.680 --> 00:42:42.930
And we have, also we have a couple
of options how you can

00:42:45.460 --> 00:42:50.240
How you can just have a look at,
on what's going on behind

00:42:50.240 --> 00:42:54.040
the scenes without actually
having to start a debugger.

00:42:54.040 --> 00:42:57.270
We have a verbose mode
that the container,

00:42:57.270 --> 00:43:03.890
that the container has that you can
enable by using both EJB container debug.

00:43:04.160 --> 00:43:08.360
And this will tell you exactly which
method is invoked on which bean.

00:43:08.360 --> 00:43:11.900
And we will show that
later in the next demo.

00:43:12.670 --> 00:43:19.110
Also, if you cannot pin down a possible
problem using the first option,

00:43:19.240 --> 00:43:21.140
you can start using the second option.

00:43:21.220 --> 00:43:25.810
And this will give you a very
detailed overview of what's

00:43:25.940 --> 00:43:27.840
going on in the Java layer.

00:43:27.960 --> 00:43:31.640
So, for example,
in the most verbose mode,

00:43:31.720 --> 00:43:35.190
which is debug level 5,

00:43:36.110 --> 00:43:39.060
You are able to see every
single JEOP request message

00:43:39.220 --> 00:43:41.800
that goes back and forth.

00:43:41.910 --> 00:43:44.120
So there you can see

00:43:44.660 --> 00:43:51.310
For example, which strings or which data
is really going over the wire.

00:43:51.560 --> 00:43:57.700
And also, it will generate,
it will enable verbose exception logging.

00:43:58.400 --> 00:44:02.830
Very important is that
if you see problems,

00:44:02.830 --> 00:44:05.400
use project-builder debug support.

00:44:05.900 --> 00:44:09.920
I have had great success
in narrowing down problems.

00:44:10.150 --> 00:44:16.450
You can set breakpoints in the
EJB frameworks and basically have it

00:44:16.460 --> 00:44:19.040
run down until your problem occurs.

00:44:21.220 --> 00:44:26.330
forthcoming is log4j logging for
all of the involved components

00:44:26.690 --> 00:44:28.900
that will enable you to

00:44:29.520 --> 00:44:33.240
basically pass the locks to any--
basically to the-- for example,

00:44:33.240 --> 00:44:39.890
to the console or have it locked
to an SNMP system and such.

00:44:42.320 --> 00:44:47.740
So we switch to the next demo,
which will be PetStore.

00:44:47.740 --> 00:44:52.200
And it will demonstrate how you can,
how you can hook in Tomcat and

00:44:52.420 --> 00:44:58.960
the EJB container together to,
to have a very advanced deployment.

00:44:58.960 --> 00:45:02.810
This is not,
this is not a very common use case,

00:45:02.850 --> 00:45:07.280
but it shows you that you can do it,
basically.

00:45:08.300 --> 00:45:10.700
So the first thing, of course,
like in the first demo that we

00:45:10.700 --> 00:45:14.580
have to do is we wrap all of the
EJB components involved in this

00:45:14.600 --> 00:45:17.600
example in an EJB framework.

00:45:17.720 --> 00:45:23.110
And PetSol comes with
seven EJB components.

00:45:23.620 --> 00:45:26.770
So in order not to make
the demo a little shorter,

00:45:26.770 --> 00:45:29.320
we have already created

00:45:29.950 --> 00:45:33.940
Five of them, or six.

00:45:33.950 --> 00:45:38.090
And we will only show you how
to add the last component.

00:45:38.570 --> 00:45:43.220
So now we will use the useJarFile
option to tell Project Builder

00:45:43.220 --> 00:45:46.700
to include a binary EJB component
into our build system.

00:45:49.980 --> 00:45:54.390
As you can see, we have separate
representation for the bean.

00:45:54.420 --> 00:45:57.550
We have the client side,
which only contains the required

00:45:57.550 --> 00:46:00.710
interface to access the bean,
and the second,

00:46:00.710 --> 00:46:04.090
the second jar contains the
implementation and everything

00:46:04.380 --> 00:46:07.300
the bean needs to be deployed.

00:46:12.150 --> 00:46:17.860
So now we have to create a new
WebObjects application that wraps

00:46:17.860 --> 00:46:23.040
the EJB framework and provides
the automatic container start.

00:46:23.670 --> 00:46:29.540
We will use a pre-compiled
version of this framework to

00:46:29.540 --> 00:46:31.860
make the demo a little shorter.

00:46:31.900 --> 00:46:33.510
And...

00:46:34.460 --> 00:46:39.750
As in the first demo,
we will use deploy as an EJB container.

00:46:39.850 --> 00:46:41.690
No web services.

00:46:41.860 --> 00:46:43.170
No framework.

00:46:43.270 --> 00:46:48.070
And now, again,
we need to add the EJB framework here.

00:46:48.610 --> 00:46:52.200
So that Project Builder can go
ahead and create the necessary

00:46:52.500 --> 00:46:55.720
container-specific files for us.

00:46:59.410 --> 00:47:02.710
So since this example
actually requires a database,

00:47:02.710 --> 00:47:05.820
we need to change the database setup

00:47:07.120 --> 00:47:10.730
and we will do that in the Transaction
Manager configuration file.

00:47:10.830 --> 00:47:15.510
This file holds all of the databases
that are involved in your EJB application

00:47:15.820 --> 00:47:22.610
and it also allows you to configure
connection limit and stuff like that.

00:47:23.870 --> 00:47:26.370
So as you can see,
we have a JDBC database configured

00:47:26.470 --> 00:47:30.890
and the Java mail support.

00:47:34.090 --> 00:47:38.440
Now we need to add some launch options
that will allow us to control the

00:47:38.440 --> 00:47:41.480
behavior of the EJB container better.

00:47:42.440 --> 00:47:46.070
And we add, for example,
the-- the VOR EJB name

00:47:46.070 --> 00:47:50.140
service port parameter,
which allows us to start

00:47:50.660 --> 00:47:54.100
The Cobber name service that is launched
automatically as part of the container

00:47:54.100 --> 00:47:56.750
start on a specific port number.

00:47:56.830 --> 00:47:59.720
This is required so that
the server container can

00:47:59.740 --> 00:48:02.180
actually find the namespace.

00:48:02.590 --> 00:48:08.000
We also included the verbose
debugging level option so that

00:48:08.000 --> 00:48:11.880
you can see what the servit--what
the servit here actually invokes.

00:48:15.260 --> 00:48:17.440
So I think we are ready here.

00:48:17.550 --> 00:48:20.940
In the background,
there is a Cloudscape database

00:48:20.940 --> 00:48:24.800
running that has all of the
necessary tables created.

00:48:24.910 --> 00:48:31.460
And we have also Tomcat 403 running,
which didn't need to have changed at all.

00:48:31.580 --> 00:48:35.320
We just took it from the web and...

00:48:36.310 --> 00:48:42.400
created the necessary configuration
setup for Tomcat and that was it.

00:48:43.090 --> 00:48:50.610
You can use the off-the-shelf
binary distributions from Tomcat

00:48:50.640 --> 00:48:55.520
now to access our container.

00:48:56.590 --> 00:49:01.780
What we've done to set up the web
tier is we unjarred the petstore.wav

00:49:01.780 --> 00:49:06.750
file in the web apps directory,
and then we had to add,

00:49:06.870 --> 00:49:12.770
or we had to patch two files that,
two XML files that didn't conform

00:49:12.770 --> 00:49:16.100
to their own DTD to make it work.

00:49:16.100 --> 00:49:20.200
Also we had to add the JDBC drivers
because the server tier

00:49:20.270 --> 00:49:22.730
actually accesses the database

00:49:23.620 --> 00:49:27.030
at the beginning to
create all of the tables.

00:49:27.030 --> 00:49:30.510
And that was all that was
required to make the example work.

00:49:31.690 --> 00:49:34.660
So here we have PetStore.

00:49:34.740 --> 00:49:38.500
In the first one that
we're going to show,

00:49:38.590 --> 00:49:40.490
you will see that

00:49:41.310 --> 00:49:44.700
All of the pages are very, very slow.

00:49:44.820 --> 00:49:48.680
And we went through it a second time,
and you will see that this

00:49:48.680 --> 00:49:52.360
is mostly because all of the
JSP pages have to be compiled,

00:49:52.460 --> 00:49:56.550
and there is a lot going on behind
the scenes that you don't see here.

00:49:57.440 --> 00:50:01.740
In the window above,
you can see that whenever

00:50:01.740 --> 00:50:04.260
a D clicks something,
that there are methods

00:50:04.370 --> 00:50:06.800
involved on the EJB container.

00:50:06.940 --> 00:50:09.520
So this is the output that you see.

00:50:10.240 --> 00:50:13.880
When you turn on the debugging
mode and when you have to

00:50:14.130 --> 00:50:16.080
nail down possible problems.

00:50:16.080 --> 00:50:20.810
Of course,
if you have to nail down problems,

00:50:20.810 --> 00:50:24.570
you will see verbose,
you will see verbose exception traces

00:50:24.570 --> 00:50:27.280
that will point you to the error.

00:50:28.350 --> 00:50:31.020
So apparently,
the server container wants to

00:50:31.020 --> 00:50:34.370
have a lot of details here.

00:50:35.890 --> 00:50:39.140
and we just go ahead and buy stuff.

00:50:39.220 --> 00:50:39.870
What are you buying?

00:50:40.040 --> 00:50:42.090
10,000 finches or something?

00:50:42.170 --> 00:50:43.740
Good?

00:50:43.750 --> 00:50:44.700
I like birds.

00:50:44.790 --> 00:50:45.590
Good.

00:50:45.600 --> 00:50:47.990
I'm going to have to take
a look at that budget.

00:50:48.080 --> 00:50:48.630
Oh, well.

00:50:48.800 --> 00:50:50.440
Hmm.

00:50:50.510 --> 00:50:52.370
I thought it was free.

00:50:58.960 --> 00:51:03.910
This is the standard demo that every
application server vendor shows off.

00:51:04.140 --> 00:51:08.600
to show that the container
runs the PEDSOR example.

00:51:08.600 --> 00:51:12.750
Of course, we're running PEDSOR 1.1.2,
which is the latest PEDSOR version

00:51:12.870 --> 00:51:14.810
that runs on EJB 1.1.

00:51:19.410 --> 00:51:23.340
Now we go through it a second time,
and you will see that everything is

00:51:23.340 --> 00:51:27.660
pretty fast now that the container,
basically both of the container,

00:51:27.680 --> 00:51:29.700
have actually warmed up.

00:51:37.970 --> 00:51:40.300
I think that's enough.

00:51:40.300 --> 00:51:41.380
So this concludes our demo.

00:51:41.380 --> 00:51:43.020
Thank you, Ali.

00:51:48.340 --> 00:51:52.560
And we now return to
the executive summary.

00:51:52.680 --> 00:51:54.570
So what have we learned?

00:51:54.970 --> 00:51:59.810
So the key message today is that
our EJB integration is ready for

00:51:59.810 --> 00:52:01.590
both development and deployment.

00:52:01.670 --> 00:52:05.160
As you have seen,
Petzl runs a large variety of

00:52:05.170 --> 00:52:08.260
applications run without any problems.

00:52:08.370 --> 00:52:10.030
And this is the key message.

00:52:10.150 --> 00:52:14.940
You have a lot of development and
deployment support from WebObjects

00:52:15.070 --> 00:52:17.170
and from the EJB container.

00:52:18.540 --> 00:52:23.770
The second message you should take home
is that we have strong tool support,

00:52:23.770 --> 00:52:27.580
the EO Bean Builder, the EO Modeler that
makes your life easier.

00:52:27.580 --> 00:52:31.360
And thirdly,
we have learned that EJB and EOF are

00:52:31.360 --> 00:52:36.100
actually supplementing each other,
that by adding EJB to our

00:52:36.100 --> 00:52:40.580
WebObjects application,
we have a real value add.

00:52:46.700 --> 00:52:48.600
That's a new slide.

00:52:48.790 --> 00:52:55.680
So if you want to if you want to have
a new look or a look at the current

00:52:56.200 --> 00:53:08.800
[Transcript missing]

00:53:10.830 --> 00:53:12.600
Now we have the end titles.

00:53:12.750 --> 00:53:14.800
The WebObjects app is open until 6 p.m.

00:53:14.800 --> 00:53:16.660
today and tomorrow, the whole day.

00:53:16.660 --> 00:53:18.930
You can play around.

00:53:18.940 --> 00:53:22.240
You don't have access to the
EOModeler tool that I showed,

00:53:22.240 --> 00:53:26.590
but you have access to the
currently shipping version.

00:53:29.970 --> 00:53:33.610
Very important for us,
please give us feedback on

00:53:34.310 --> 00:53:37.470
all aspects of WebObjects,
including, of course, the EJB support.

00:53:39.570 --> 00:53:44.840
and I'm waiting for you all
to show up at 3:30 tomorrow.

00:53:44.930 --> 00:53:46.600
Who to contact?

00:53:46.600 --> 00:53:52.700
Tony or Bob at WebObjects@apple.com
or if you need professional advice

00:53:52.700 --> 00:53:56.550
on support or on development,
please go ahead and contact

00:53:56.580 --> 00:53:58.890
Apple Professional Services.

00:54:00.790 --> 00:54:04.640
For more information, we have, of course,
our website.

00:54:04.730 --> 00:54:06.320
We have--

00:54:07.190 --> 00:54:10.880
We have all the developer
documentation online,

00:54:10.880 --> 00:54:15.760
and we have a couple of other places
where you can find various documentation,

00:54:15.790 --> 00:54:17.980
various information about our product.

00:54:21.240 --> 00:54:24.820
If you're interested in OpenEJB itself,
please have a look at

00:54:24.840 --> 00:54:27.670
openejb.sourceforge.net.

00:54:27.680 --> 00:54:31.560
There you can see what's
going on the latest.

00:54:32.120 --> 00:54:34.400
The latest news, basically.

00:54:34.410 --> 00:54:36.290
Kessler and Tyrex have their own website.

00:54:36.420 --> 00:54:40.430
They are hosted at exolab.org
if you're interested.

00:54:40.530 --> 00:54:44.600
And of course,
if you need generic EJB advice,

00:54:44.750 --> 00:54:48.830
there are many books out there
and there are even more web links.

00:54:50.810 --> 00:54:57.080
Our documentation staff has
created a special EJB book that

00:54:57.080 --> 00:55:00.740
describes our EJB integration.

00:55:00.840 --> 00:55:04.760
The project will support
everything that we showed today.

00:55:04.880 --> 00:55:05.610
Please go ahead and read it.

00:55:05.670 --> 00:55:08.550
It's available online and on the CD.

00:55:10.860 --> 00:55:14.490
And of course,
the documentation is the freshest

00:55:14.490 --> 00:55:16.380
documentation is always online.

00:55:16.480 --> 00:55:19.610
Both PDF and HTML are there.

00:55:19.680 --> 00:55:23.790
You can print it on
demand if you want to.

00:55:23.870 --> 00:55:27.940
We have all of the required
documentation on the CD and in the box.

00:55:27.940 --> 00:55:34.150
And the latest and breaking
news are in the ADC newsletter.