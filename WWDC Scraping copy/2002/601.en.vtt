WEBVTT

00:00:14.370 --> 00:00:15.560
Good morning, everybody.

00:00:15.560 --> 00:00:21.240
Welcome out to the QuickTime Session 601,
How to Make Your Applications

00:00:21.240 --> 00:00:22.160
QuickTime-Savvy.

00:00:22.160 --> 00:00:24.690
My name is Ian Riitchie.

00:00:24.700 --> 00:00:27.890
I'm part of the
QuickTime engineering team.

00:00:28.220 --> 00:00:31.960
I have the pleasure of engineering
some of the engineers on this team.

00:00:31.960 --> 00:00:39.390
Now, today we're going to present some
ideas to use some techniques.

00:00:39.760 --> 00:00:43.860
To help you leverage
the power of QuickTime,

00:00:43.860 --> 00:00:46.080
and now you may wonder, well,
why QuickTime?

00:00:46.080 --> 00:00:50.200
We were told that some people
that will be attending this

00:00:50.200 --> 00:00:53.680
show will be new to the OS,
will be new to QuickTime,

00:00:53.680 --> 00:00:57.990
and that we should give a roadmap,
sort of an intro session of...

00:00:59.200 --> 00:01:11.000
[Transcript missing]

00:01:11.700 --> 00:01:22.500
[Transcript missing]

00:01:23.390 --> 00:01:26.310
There's thousands of titles
out there and you wonder,

00:01:26.310 --> 00:01:28.060
well, why was it so popular?

00:01:28.200 --> 00:01:30.710
And he talked about extensibility.

00:01:30.860 --> 00:01:33.970
Let me go a little bit more into
the extensibility side of it.

00:01:34.100 --> 00:01:43.940
If you have a video card that's unique
to your company and you want it to

00:01:43.970 --> 00:01:43.970
work with the rest of QuickTime,
will you write a VDIG?

00:01:43.970 --> 00:01:43.970
And a

00:01:44.730 --> 00:01:47.800
It'll be able to play your VDIG then,
we'll talk to the card,

00:01:47.800 --> 00:01:50.300
capture the video,
give it to the sequence grabber,

00:01:50.300 --> 00:01:53.720
that will then work with Final Cut,
that'll work with sample

00:01:53.780 --> 00:01:57.010
apps that we've gotten,
Adobe Premiere.

00:01:59.540 --> 00:02:03.290
And as you've seen,
QuickTime has a lot of video compression

00:02:03.290 --> 00:02:07.000
and decompression technology in it.

00:02:07.110 --> 00:02:08.830
We didn't write all these.

00:02:08.930 --> 00:02:11.970
Other people out there would
specialize on their code,

00:02:12.080 --> 00:02:15.120
write really great algorithms,
and then wrap it in a codec and ship

00:02:15.120 --> 00:02:18.640
it as part of the QuickTime technology.

00:02:18.680 --> 00:02:20.610
Either we would license
it or you'd be part of the

00:02:20.650 --> 00:02:22.100
third-party component program.

00:02:22.210 --> 00:02:25.900
And users out there would be
able to use your software.

00:02:25.900 --> 00:02:29.500
What we've done is we've set it
up so that you can specialize

00:02:29.500 --> 00:02:36.050
on what you're really good at,
and everybody else takes advantage of it.

00:02:36.190 --> 00:02:39.590
Today what we'd like to show you is

00:02:40.210 --> 00:02:45.040
How you can, if you do these few calls,
a little bit of code

00:02:45.040 --> 00:02:49.620
in your applications,
you'll be able to take advantage

00:02:49.820 --> 00:02:53.750
of a lot of work that we've done,
leveraging.

00:02:53.870 --> 00:02:59.080
There's a martial arts technique
that follows along this.

00:02:59.310 --> 00:03:00.550
What is it called?

00:03:00.790 --> 00:03:05.170
Where you use your
opponent's energy against it?

00:03:05.170 --> 00:03:05.870
Judo.

00:03:05.870 --> 00:03:08.510
Yeah, so we could call it QuickTime Judo.

00:03:13.950 --> 00:03:15.900
The situation is completely cross-office.

00:03:15.900 --> 00:03:17.660
Our product is not
machine-hard updates with you.

00:03:17.660 --> 00:03:20.650
Our competitors are jacks and ways
to devour our remaining workmanship.

00:03:20.650 --> 00:03:21.900
We have no protein.

00:03:21.900 --> 00:03:24.180
Our shareholders have a hand in this,
and I am in for it.

00:03:24.180 --> 00:03:25.090
All engineers go.

00:03:27.000 --> 00:03:29.000
and you just say the company.

00:03:29.000 --> 00:03:32.090
It must have been a disaster
to have any new features.

00:03:32.090 --> 00:03:33.000
We need multimedia integration.

00:03:33.000 --> 00:03:37.000
Movie playback, capture, still image,
import, and export, and interactivity.

00:03:37.000 --> 00:03:39.000
As the hot schools get on,
it's expected that

00:03:39.030 --> 00:03:41.000
YouTube will strike for code.

00:03:41.000 --> 00:03:42.990
And we should.

00:03:43.000 --> 00:03:45.000
I hope to have you covered.

00:03:45.000 --> 00:03:47.150
It is not possible.

00:03:52.100 --> 00:03:54.660
As my panel,
I gain instant access to a vast number

00:03:54.660 --> 00:03:56.640
of movies and still image formats.

00:03:56.640 --> 00:04:01.100
I must learn the ways of QuickTime if
I can fulfill the master's task in time.

00:04:02.900 --> 00:04:05.900
and beginning to see
more clearly already.

00:04:05.900 --> 00:04:09.730
Off the tables,
inverse discrete cosine transforms.

00:04:09.740 --> 00:04:12.600
I won't be able to do battle
with such audible moments.

00:04:12.650 --> 00:04:15.830
How I've mastered foreign
video concepts in two weeks.

00:04:15.830 --> 00:04:18.770
I must read with great
speed and probably sleep.

00:04:20.740 --> 00:04:25.410
I'd like to bring on Brad Ford and
Jon Summers to give you

00:04:25.410 --> 00:04:27.270
guys an intro to Movies 101.

00:04:27.290 --> 00:04:28.120
Thank you.

00:04:37.600 --> 00:04:39.400
Good morning,
and welcome out to Movies 101,

00:04:39.400 --> 00:04:42.160
which is the polite,
politically correct title.

00:04:42.160 --> 00:04:44.740
I like to refer to it
as QuickTime Boot Camp.

00:04:44.760 --> 00:04:48.450
We've been given the arduous
task of explaining to you the

00:04:48.450 --> 00:04:51.410
minimal calls you need to know,
the basics,

00:04:51.410 --> 00:04:54.000
to get a QuickTime-savvy app running.

00:04:54.000 --> 00:04:56.360
Now, who will this be pertinent to?

00:04:56.360 --> 00:05:02.020
Like Ian alluded to, we have, hopefully,
a lot of new people to the platform

00:05:02.020 --> 00:05:04.850
and a lot of new people to QuickTime,
QuickTime newbies.

00:05:05.020 --> 00:05:07.880
For those of you who have not
programmed in QuickTime before,

00:05:07.880 --> 00:05:10.310
all of this information
will be pertinent.

00:05:10.320 --> 00:05:12.470
We probably also have
some veterans out there,

00:05:12.520 --> 00:05:16.070
people who have been programming
QuickTime for five or ten years.

00:05:16.080 --> 00:05:18.430
All of this information is pertinent.

00:05:18.440 --> 00:05:21.870
Don't go to sleep,
because we are going to interlace

00:05:22.360 --> 00:05:25.850
brand new QuickTime 6 API calls
that you should be aware of and

00:05:25.990 --> 00:05:27.790
you'll be interested in knowing.

00:05:29.400 --> 00:05:35.140
So let's start with a very high
level overview of what a movie is.

00:05:35.140 --> 00:05:39.110
Suspend reality for a moment and forget
everything that you know about a movie.

00:05:39.150 --> 00:05:42.620
Because in QuickTime's world,
a movie has nothing to do

00:05:42.620 --> 00:05:44.700
with $8 seats or popcorn.

00:05:44.760 --> 00:05:48.090
A QuickTime movie is more
like a card catalog drawer.

00:05:48.090 --> 00:05:49.940
You've seen card catalogs before.

00:05:50.060 --> 00:05:52.940
They're the things over in the
corner at the libraries that no one

00:05:52.940 --> 00:05:55.930
uses because there's a computer next
to them that does the same thing.

00:05:55.930 --> 00:05:59.520
But 10 or 15 years ago,
people used to use a card catalog.

00:05:59.520 --> 00:06:02.980
And the idea behind it is you have
thousands of books and you don't

00:06:02.980 --> 00:06:07.160
know where to find anything unless
you have an organizing abstraction

00:06:07.160 --> 00:06:09.530
that tells you where to find things.

00:06:09.650 --> 00:06:10.980
That's what a QuickTime movie is.

00:06:11.010 --> 00:06:12.360
It's no more than a catalog.

00:06:12.540 --> 00:06:13.470
So think of a drawer.

00:06:13.510 --> 00:06:15.040
It's got index cards in it.

00:06:15.070 --> 00:06:17.540
Each one of these index
cards points to a book.

00:06:17.540 --> 00:06:20.630
So you can think of the books
as being the actual data that

00:06:20.830 --> 00:06:22.260
you would want to look up.

00:06:22.260 --> 00:06:27.390
And the index cards are
tracks in a QuickTime movie.

00:06:27.440 --> 00:06:30.040
QuickTime supports a bunch
of different types of tracks:

00:06:30.040 --> 00:06:33.160
video, audio, MIDI, sprites.

00:06:33.160 --> 00:06:38.470
And all of these tracks you can think
of as being a separate index card

00:06:38.470 --> 00:06:42.700
that points to books that will show
you where to get the actual data.

00:06:45.710 --> 00:06:50.880
So a QuickTime movie is actually
a catalogue of media resources.

00:06:51.210 --> 00:06:56.340
It contains a list of tracks
which tell us what the media is,

00:06:56.450 --> 00:06:59.620
where the media can be located,
and when to play the media.

00:07:01.420 --> 00:07:07.500
You'll notice that a QuickTime movie
is not a QuickTime movie file.

00:07:08.280 --> 00:07:12.410
The media data references,
the media data samples

00:07:12.410 --> 00:07:14.080
do not necessarily...

00:07:14.410 --> 00:07:19.540
need to live in the same media storage
unit as the actual QuickTime movie.

00:07:23.210 --> 00:07:28.690
Okay, let's give a quick demo on Demo
Machine 1 that illustrates this point.

00:07:28.700 --> 00:07:33.620
Okay, so I hope you like this analogy
of the card catalog and the index

00:07:33.620 --> 00:07:36.200
cards because you're going to
hear it over and over and over,

00:07:36.200 --> 00:07:37.590
so get used to it if you hate it.

00:07:37.680 --> 00:07:43.480
I've brought up one of the
old QuickTime stupid movies.

00:07:43.480 --> 00:07:45.880
This is a tradition every
year to have a stupid movie,

00:07:45.880 --> 00:07:48.670
and it's a lot cheaper than
trying to get a Spider-Man trailer

00:07:48.680 --> 00:07:50.840
or something like that,
so here we go.

00:07:50.840 --> 00:07:53.840
This is an actual QuickTime movie
that actually plays.

00:07:53.840 --> 00:07:55.830
♪

00:07:57.900 --> 00:07:59.140
Well, I'm done programming it for today.

00:07:59.140 --> 00:08:01.620
I think I'll relax
with some QuickTime TV.

00:08:01.620 --> 00:08:03.070
I've got kickboxing.

00:08:03.080 --> 00:08:04.140
I've got some.

00:08:04.140 --> 00:08:08.400
Okay, let's look at a little bit of
information about this movie.

00:08:08.400 --> 00:08:12.600
First thing we'll notice is that, okay,
64.4 megabytes on disk.

00:08:12.640 --> 00:08:16.660
That's really big for just a catalog,
so the light should go off in your head.

00:08:16.680 --> 00:08:17.940
This isn't just the catalog.

00:08:17.940 --> 00:08:22.620
This is the card catalog drawer and the
books all wrapped up into one big file.

00:08:22.740 --> 00:08:25.180
This is also known as
a self-contained movie,

00:08:25.180 --> 00:08:29.030
where you get the media data and
the catalog in the same file.

00:08:29.040 --> 00:08:31.250
You don't have to do it this way,
but this is the most

00:08:31.250 --> 00:08:32.500
portable way of doing it.

00:08:32.560 --> 00:08:34.620
So if you're going to download
something from the Internet,

00:08:34.620 --> 00:08:36.170
this is the way you'll usually find them.

00:08:36.180 --> 00:08:39.520
The catalog and the books
all in one big file.

00:08:39.540 --> 00:08:41.870
But we can play around with this.

00:08:41.880 --> 00:08:45.200
So, for instance, in QuickTime Player,
I'm able to perform

00:08:45.240 --> 00:08:47.140
some editing functions.

00:08:47.140 --> 00:08:49.640
I'm just going to go ahead
and grab the whole movie,

00:08:49.640 --> 00:08:54.140
select all, I'm going to copy it,
And then I'm gonna make a

00:08:54.140 --> 00:08:57.290
new movie and paste it in.

00:08:57.750 --> 00:09:00.670
And so this is now untitled one,
and I'm going to say save.

00:09:00.710 --> 00:09:04.940
Notice I get two things I can do with it.

00:09:04.940 --> 00:09:08.450
I can either save normally,
allowing dependencies.

00:09:08.480 --> 00:09:11.470
What that means is it just
gives you the catalog.

00:09:11.510 --> 00:09:15.220
Copies down the information from the
card catalog index card and writes

00:09:15.310 --> 00:09:17.120
that little bit out to a new file.

00:09:17.120 --> 00:09:20.330
If you make the movie self-contained,
notice it's going to

00:09:20.330 --> 00:09:22.550
be 64 megabytes again,
because it's going to

00:09:22.550 --> 00:09:23.670
write all the data out.

00:09:23.670 --> 00:09:27.120
If I had made an edit list,
if I had taken little chunks,

00:09:27.120 --> 00:09:30.100
think of them as little
sections of the books,

00:09:30.100 --> 00:09:33.460
you know, page 100 to 114,
it would do the same thing.

00:09:33.460 --> 00:09:37.300
It would just take the little chunks
that it needed from the sample media,

00:09:37.340 --> 00:09:38.800
write it out to a new file.

00:09:38.810 --> 00:09:41.980
Let's save it normally,
allowing dependencies.

00:09:42.890 --> 00:09:45.470
So I gave it the beautiful
title of Untitled One.

00:09:45.470 --> 00:09:46.360
Way to go, Brad.

00:09:46.380 --> 00:09:52.460
And let's play a little bit of it.

00:09:53.800 --> 00:09:54.800
and the rest of the team.

00:09:54.800 --> 00:09:55.800
Amazingly, it plays.

00:09:55.800 --> 00:09:59.720
But let's investigate a little bit.

00:09:59.800 --> 00:10:00.800
48K.

00:10:00.800 --> 00:10:03.170
So now it's just the catalog.

00:10:03.240 --> 00:10:06.750
Just the information that you
need and it's pointing to the

00:10:06.750 --> 00:10:08.560
books that are in file one.

00:10:08.670 --> 00:10:12.210
Okay, just to show you that there
are no tricks up my sleeve,

00:10:12.240 --> 00:10:14.610
I am going to close that.

00:10:14.970 --> 00:10:20.020
I'm going to delete the Seating for
Dummies movie and I'm going to try to

00:10:20.020 --> 00:10:23.870
open Untitled and is going to yell at me.

00:10:25.720 --> 00:10:27.460
Well, first it's going to
search for a long time,

00:10:27.460 --> 00:10:28.700
and then it's going to yell at me.

00:10:28.730 --> 00:10:29.500
But you get the idea.

00:10:29.500 --> 00:10:31.010
The books are no longer there.

00:10:31.180 --> 00:10:33.940
We now have a card catalog
that points nowhere.

00:10:34.020 --> 00:10:36.380
So let's go back to the slides.

00:10:41.180 --> 00:10:43.100
Okay, where does movie data come from?

00:10:43.100 --> 00:10:46.340
Now let's talk a little bit
about the books themselves.

00:10:46.380 --> 00:10:50.470
A QuickTime library is a lot more
flexible than a library that you would

00:10:50.470 --> 00:10:55.880
go to in real life because the books
don't have to be stored in the library.

00:10:56.100 --> 00:11:01.130
The data that you would want to bring
into your movie or call from your movie

00:11:01.580 --> 00:11:04.430
can be located any number of places.

00:11:04.440 --> 00:11:05.330
We'll talk about four of them.

00:11:05.510 --> 00:11:06.450
Local storage.

00:11:06.450 --> 00:11:10.250
It can be stored in a disk file,
not necessarily a .mov file.

00:11:10.740 --> 00:11:14.660
QuickTime can import a lot of
other file formats in place.

00:11:14.820 --> 00:11:18.730
What that means is it doesn't need to
turn them into a QuickTime movie first.

00:11:18.760 --> 00:11:21.830
For instance, an MPEG file, MPEG-2,
MPEG-4.

00:11:22.260 --> 00:11:25.650
These files can all be opened
in place without writing some

00:11:25.760 --> 00:11:27.900
QuickTime specific data to them.

00:11:28.110 --> 00:11:29.480
So you can get it from a disk file.

00:11:29.690 --> 00:11:34.390
You can get it from a remote source URL,
such as an HTTP server or

00:11:34.530 --> 00:11:37.220
an RTSP streaming server.

00:11:37.220 --> 00:11:39.760
You can also get a
movie that's in memory.

00:11:39.820 --> 00:11:43.110
If it's already been loaded,
you have a handle to it,

00:11:43.110 --> 00:11:46.350
you have a pointer to it,
you can reference that media

00:11:46.450 --> 00:11:48.180
in your catalog as well.

00:11:48.210 --> 00:11:51.080
And here's the real selling point for me.

00:11:51.100 --> 00:11:53.510
Different pieces can come
from different places.

00:11:53.610 --> 00:11:57.860
So you can have one part of it
coming from an RTSP streaming server.

00:11:57.870 --> 00:12:02.020
You can have a flash track coming
from an HTTP streaming server.

00:12:02.020 --> 00:12:04.940
You can have a voiceover coming
from a local file on disk,

00:12:04.960 --> 00:12:05.160
all in the same movie,
because these are all

00:12:05.160 --> 00:12:05.340
just separate files.

00:12:05.340 --> 00:12:05.880
So you can have a movie
that's already been loaded,

00:12:05.880 --> 00:12:06.340
you have a handle to it,
you have a pointer to it,

00:12:06.340 --> 00:12:06.340
you have a reference to that
media in your catalog as well.

00:12:06.340 --> 00:12:07.340
And here's the real selling point for me.

00:12:07.340 --> 00:12:07.340
You can get it from a disk file
or an RTSP streaming server.

00:12:07.340 --> 00:12:07.750
You can get it from a disk file as well.

00:12:07.750 --> 00:12:08.190
And here's the real selling point for me.

00:12:08.320 --> 00:12:08.750
You can have a movie
that's already been loaded,

00:12:08.750 --> 00:12:09.460
you have a flash track coming
from an RTSP streaming server.

00:12:09.500 --> 00:12:10.150
You can have a flash track coming
from an RTSP streaming server.

00:12:10.150 --> 00:12:10.630
And here's the real selling point for me.

00:12:10.630 --> 00:12:11.150
You can have a movie
that's already been loaded,

00:12:11.150 --> 00:12:11.340
you have a flash

00:12:15.110 --> 00:12:18.440
So we'll take a high-level
view of what we'll need to do

00:12:18.440 --> 00:12:20.760
to become QuickTime 6 savvy.

00:12:20.760 --> 00:12:23.460
Working with movies,
the first thing we need

00:12:23.460 --> 00:12:26.350
to do is initialize the
QuickTime toolbox with Enter Movies.

00:12:26.350 --> 00:12:30.390
We're going to show you how you
can open movies from any location.

00:12:30.390 --> 00:12:34.700
Once you've opened the movie,
then you need to give QuickTime,

00:12:34.700 --> 00:12:37.730
which is a toolbox for
dealing with time-based media,

00:12:37.730 --> 00:12:39.450
you need to give it processing time.

00:12:39.550 --> 00:12:40.900
So we'll talk about that.

00:12:40.920 --> 00:12:45.800
Then, for movie playback and editing,
we'll show you the importance

00:12:45.800 --> 00:12:48.710
of attaching a movie
controller to the movie.

00:12:48.800 --> 00:12:52.140
When you've done your edits,
then we'll show you how you

00:12:52.140 --> 00:12:53.810
need to save your movie.

00:12:53.940 --> 00:12:57.220
Note that applications should
not call exit to movies when

00:12:57.470 --> 00:12:59.760
they're closing the application.

00:12:59.880 --> 00:13:05.080
Exit to movies really should be called
if you are writing a component and

00:13:05.080 --> 00:13:09.340
that component has called Enter Movies,
you should balance that

00:13:09.340 --> 00:13:11.130
call with an exit to movies.

00:13:11.130 --> 00:13:12.680
So take out that exit to movies.

00:13:12.680 --> 00:13:14.960
in your applications.

00:13:17.610 --> 00:13:22.930
Now, just to show you that QuickTime,
a QuickTime movie is actually

00:13:23.040 --> 00:13:28.950
a catalogue of media and does
not play the media in the...

00:13:29.420 --> 00:13:33.470
In the order that the media is
actually in the media storage,

00:13:33.650 --> 00:13:41.200
we'll go back a few slides and
we'll talk about where does

00:13:41.200 --> 00:13:41.200
QuickTime media come from?

00:13:41.450 --> 00:13:45.580
There are a couple of locations here,
local storage, remote, and from memory.

00:13:45.580 --> 00:13:49.180
But that's not all the places that
QuickTime movies can come from.

00:13:49.820 --> 00:13:58.190
And in order to specify that location,
we have a data reference.

00:13:58.190 --> 00:13:58.190
This is an abstract location specifier.

00:13:58.850 --> 00:14:03.330
QuickTime developers are used
to the file manager-based calls,

00:14:03.330 --> 00:14:05.240
such as Open Movie File.

00:14:05.240 --> 00:14:09.860
Now with the abstracted family
of calls using a data reference,

00:14:09.860 --> 00:14:14.800
you can now specify movie
locations from anywhere.

00:14:14.980 --> 00:14:19.080
A data reference is a
handle to a data structure.

00:14:20.190 --> 00:14:26.690
The DataRefType specifies the accessor
component that is required to read the

00:14:27.340 --> 00:14:30.730
Data source.

00:14:30.730 --> 00:14:36.790
Therefore,
a data reference specifies location,

00:14:36.790 --> 00:14:36.790
and a data ref type
specifies the accessor,

00:14:36.790 --> 00:14:36.790
and that...

00:14:37.460 --> 00:14:43.960
That returns an instance of a data
handler component which knows where the

00:14:43.960 --> 00:14:46.750
data is stored and how to read the data.

00:14:46.760 --> 00:14:54.640
For example, local file storage,
a data reference is...

00:14:55.020 --> 00:14:58.720
is a handle to a structure
of an alias record.

00:14:59.030 --> 00:15:04.620
This alias handle plus
the data ref type alias

00:15:05.120 --> 00:15:10.180
Allows us to use an alias data handler
to return the data from the file.

00:15:14.590 --> 00:15:17.780
Now that we have specified
the location of the movie,

00:15:17.780 --> 00:15:19.460
how do we open the movie?

00:15:19.460 --> 00:15:22.450
We open the movie with
new movie from data ref.

00:15:22.500 --> 00:15:27.550
This is a general form of the file
manager based new movie from file.

00:15:27.680 --> 00:15:29.860
Notice that we,
new movie from data ref takes

00:15:29.910 --> 00:15:34.090
a data ref and a data ref type
and returns a movie catalog.

00:15:34.090 --> 00:15:38.020
Note that we do not need
to call open movie file,

00:15:38.060 --> 00:15:39.680
close movie file.

00:15:39.680 --> 00:15:43.670
New movie from data ref
opens the movie storage,

00:15:43.720 --> 00:15:47.340
loads the movie catalog,
then closes the movie storage for us.

00:15:53.560 --> 00:15:57.620
Now we'll have a demo on Demo 1 to
actually show how you can actually

00:15:58.210 --> 00:15:59.940
write your own data handler.

00:15:59.940 --> 00:16:03.290
This is a demonstration of how
to get QuickTime movies which

00:16:03.290 --> 00:16:05.070
are stored inside a database.

00:16:05.510 --> 00:16:06.240
Right.

00:16:06.380 --> 00:16:10.990
This is an interesting plug on the things
you can do with... Can we have Demo 1,

00:16:10.990 --> 00:16:10.990
please?

00:16:14.090 --> 00:16:15.870
Okay,
this is sort of an interesting plug on

00:16:15.870 --> 00:16:20.620
what you can do with QuickTime when we
haven't even foreseen this possibility.

00:16:20.640 --> 00:16:22.760
You should not be afraid
of data references.

00:16:22.760 --> 00:16:24.080
Data references are your friends.

00:16:24.120 --> 00:16:27.600
You can continue to think of them
as aliases to files if all you're

00:16:27.600 --> 00:16:29.440
working on are file-based things.

00:16:29.440 --> 00:16:34.620
But they buy you a lot of things
that you wouldn't get otherwise.

00:16:34.620 --> 00:16:38.520
So you should use data references
and use these newer APIs.

00:16:38.520 --> 00:16:43.240
One such instance is this very
cool thing called FrontBase.

00:16:43.760 --> 00:16:48.890
FrontBase is a relational database server
put out by a company called FrontBase,

00:16:48.920 --> 00:16:50.140
and it's very QuickTime savvy.

00:16:50.140 --> 00:16:52.680
They've done some very cool
things with QuickTime movies.

00:16:52.680 --> 00:16:56.450
Most databases,
if they are storing a lot of files,

00:16:56.450 --> 00:16:59.980
you'll have references
to them in a database.

00:17:00.020 --> 00:17:02.380
You know, where the file is,
the name of it,

00:17:02.380 --> 00:17:04.000
the duration of the movie.

00:17:04.000 --> 00:17:08.630
But what FrontBase is doing is storing
the whole movie in the database.

00:17:08.640 --> 00:17:13.130
So once you put it in the database,
you can't pull it out anymore.

00:17:13.320 --> 00:17:14.400
It's not a .mov file.

00:17:14.400 --> 00:17:16.890
It's in the database
as this one big blob.

00:17:16.940 --> 00:17:20.780
So let's go ahead and
start up the server.

00:17:20.780 --> 00:17:25.030
And we'll click on this and show you...

00:17:25.130 --> 00:17:26.090
and more.

00:17:26.100 --> 00:17:30.870
So, I've made a table in here
called Streamable Movie,

00:17:30.870 --> 00:17:34.140
and it has two fields in this table.

00:17:34.140 --> 00:17:36.640
There's a file name field
and a movie content field.

00:17:36.640 --> 00:17:38.880
One of them is the name
that I gave to the movie,

00:17:38.900 --> 00:17:42.260
and one of them is the actual movie,
which I uploaded into the database.

00:17:42.460 --> 00:17:45.420
Now, once it's there,
there's no way to pull it out because

00:17:45.420 --> 00:17:47.870
it's not a file on disk anymore,
an MOV file.

00:17:47.870 --> 00:17:49.880
It's not an HTTP streaming server.

00:17:49.880 --> 00:17:51.230
It's nothing of the sort.

00:17:51.370 --> 00:17:52.820
It's from a database.

00:17:52.940 --> 00:17:55.310
So what did the front base people do?

00:17:55.690 --> 00:17:59.560
They wrote their own data
handler that grabs movies from

00:17:59.560 --> 00:18:01.620
their database as requested.

00:18:01.720 --> 00:18:02.580
Let's try that.

00:18:02.630 --> 00:18:08.520
Here's a little Cocoa application
that just demos how they do this.

00:18:08.590 --> 00:18:11.780
There's no other way to get these movies
out of the database except by using

00:18:12.180 --> 00:18:14.820
the data ref and the data handler.

00:18:21.900 --> 00:18:23.140
Wow, that guy can play.

00:18:23.140 --> 00:18:29.480
So, Jon,
what's happening under the hood here?

00:18:29.480 --> 00:18:32.710
So what's happening is...

00:18:34.720 --> 00:18:40.720
We've used New Movie from DataRef
with a data reference which tells

00:18:40.830 --> 00:18:44.630
location in the database of this movie.

00:18:44.920 --> 00:18:48.140
That is the file name,
the name of the movie.

00:18:48.690 --> 00:18:52.170
Also we have used a DataRef type

00:18:52.440 --> 00:18:57.510
which specifies the front-base
custom data handler.

00:18:57.860 --> 00:19:00.970
These two,
this combination gives us a data

00:19:01.060 --> 00:19:05.860
handler of the custom data handler,
of FrontBase's custom data handler.

00:19:07.100 --> 00:19:11.320
Once we have the movie catalog
from new movie from DataRef,

00:19:11.320 --> 00:19:13.350
we have a slight problem.

00:19:13.350 --> 00:19:19.280
The data references inside the movie
catalog refer back to the original movie

00:19:19.280 --> 00:19:22.130
file that was imported into the database.

00:19:22.160 --> 00:19:27.040
So before we can work with the movie,
we have to go through all the

00:19:27.040 --> 00:19:31.710
media handlers and reset the data
reference to use the front-based

00:19:32.280 --> 00:19:34.640
custom data action handler.

00:19:35.210 --> 00:19:40.950
Now,
as QuickTime requests data to display,

00:19:40.990 --> 00:19:43.520
the data handler goes to the
database and actually makes byte

00:19:43.600 --> 00:19:45.330
range calls into that data blob.

00:19:45.360 --> 00:19:50.440
So, as you can see... So, for instance,
you can... It's not just downloading

00:19:50.440 --> 00:19:51.670
the whole thing as a blob.

00:19:51.680 --> 00:19:53.440
We have random access to it.

00:19:53.440 --> 00:19:57.220
The data handler goes out and it finds
the new frames that are requested when

00:19:57.230 --> 00:19:59.320
I scrub around or go to a new position.

00:19:59.320 --> 00:20:02.400
It's not quite as fast as Instant On,
but still pretty good.

00:20:03.300 --> 00:20:06.910
All right, so let's go back to slides.

00:20:11.350 --> 00:20:11.710
Okay.

00:20:11.720 --> 00:20:14.500
Now the ever-important
topic of movie controllers.

00:20:14.560 --> 00:20:17.110
Movie controllers are a
hugely functional object.

00:20:17.320 --> 00:20:19.580
What we're going for here
is maximum efficiency.

00:20:19.600 --> 00:20:24.160
When you want to build a QuickTime-savvy
application and you want to get a lot of

00:20:24.160 --> 00:20:28.140
work done with a minimal amount of code,
use movie controllers.

00:20:28.140 --> 00:20:29.550
This is not market speak.

00:20:29.680 --> 00:20:33.630
This is not me trying to push something
on you because I like movie controllers.

00:20:33.700 --> 00:20:37.730
If you want to get a lot of work done,
attach a movie controller to your movie.

00:20:37.740 --> 00:20:40.570
You'll get the most bang
for the buck doing so.

00:20:40.690 --> 00:20:41.610
So movie controllers.

00:20:41.700 --> 00:20:43.770
Once you've opened your movie,
for instance using

00:20:43.860 --> 00:20:47.040
New Movie from DataRef,
you attach a new movie controller

00:20:47.040 --> 00:20:51.570
to it using New Movie Controller,
and then you can run your event loop.

00:20:51.770 --> 00:20:54.740
There's a special call
called MCIsPlayerEvent.

00:20:54.900 --> 00:20:58.620
If you're used to the old wait
next event based application loop,

00:20:58.620 --> 00:21:03.200
then you're used to having some big
switch statement where you handle events.

00:21:03.310 --> 00:21:07.220
Well, all you have to do is plug
in MCIsPlayerEvent before you

00:21:07.220 --> 00:21:08.980
handle the event yourself.

00:21:09.010 --> 00:21:10.580
What MCIsPlayerEvent does is it
will send you a message that says

00:21:10.580 --> 00:21:15.140
it gives QuickTime a chance to look
at the event before you process it,

00:21:15.170 --> 00:21:18.040
and QuickTime will say to you, "Yeah,
I know that guy.

00:21:18.040 --> 00:21:20.790
That's my event." Or it'll say,
"I have no idea what this is.

00:21:20.800 --> 00:21:23.880
You handle it yourself."
And so it gives you a lot of

00:21:24.240 --> 00:21:26.580
automatic processing of events.

00:21:26.610 --> 00:21:29.290
When you're finished,
here's another little important thing.

00:21:29.290 --> 00:21:31.550
Dispose of your movie controller first.

00:21:31.600 --> 00:21:35.040
If you've attached it to your movie,
don't dispose of the movie first.

00:21:35.070 --> 00:21:36.990
That will be bad.

00:21:37.700 --> 00:21:41.270
Okay,
a lot of developers have expressed to me,

00:21:41.410 --> 00:21:45.770
you know, that they're afraid to use a
movie controller because they

00:21:45.860 --> 00:21:47.180
don't want that stock look.

00:21:47.340 --> 00:21:50.250
They don't want their application to
look like everybody else's application.

00:21:50.260 --> 00:21:54.300
Well, a movie controller is not the same
thing as a movie controller bar.

00:21:54.300 --> 00:21:57.700
I think the movie controller bar
is fantastic because it puts a lot

00:21:57.700 --> 00:22:00.100
of functionality into 16 pixels.

00:22:00.100 --> 00:22:02.500
But if you don't want to use it,
you don't have to.

00:22:02.500 --> 00:22:05.960
You can still use a movie
controller without showing the bar.

00:22:06.060 --> 00:22:08.500
You can make it invisible
and still use all of the

00:22:08.500 --> 00:22:12.300
functionality in this great object,
this delegate object.

00:22:12.300 --> 00:22:14.990
Okay,
now I'm going to give you four compelling

00:22:14.990 --> 00:22:17.300
reasons to use movie controllers.

00:22:17.300 --> 00:22:20.020
First one,
at the risk of sounding redundant,

00:22:20.250 --> 00:22:21.660
they simplify control.

00:22:21.860 --> 00:22:23.560
They are, after all, controllers.

00:22:23.970 --> 00:22:27.800
There is a wonderful
call called MCDoAction.

00:22:27.800 --> 00:22:31.660
In a library as large as QuickTime,
where you have, you know,

00:22:31.660 --> 00:22:35.800
well over 2,000 function calls,
it's nice to know that there is one

00:22:35.800 --> 00:22:40.130
call that you can use that does,
I believe, 77 different things.

00:22:40.140 --> 00:22:43.560
So with MCDoAction,
you give it your movie controller,

00:22:43.900 --> 00:22:48.140
then you put in an action,
be it action pre-roll and play,

00:22:48.140 --> 00:22:50.880
action go to time, set keys enabled,
whatever.

00:22:51.230 --> 00:22:57.540
And then the third parameter becomes
your context-specific information,

00:22:57.540 --> 00:22:59.030
your parameter that
you need for that one.

00:22:59.040 --> 00:23:01.030
For instance,
if you want to play your movie

00:23:01.030 --> 00:23:05.540
using a movie controller,
you use MCAction pre-roll and play and

00:23:05.540 --> 00:23:07.810
then give it at a fixed rate to play at.

00:23:08.760 --> 00:23:12.350
Okay, here's probably the most compelling
reason to use movie controllers.

00:23:12.550 --> 00:23:14.440
Some things will not work without them.

00:23:14.490 --> 00:23:17.860
If you want to do interactivity,
it's not an option.

00:23:18.090 --> 00:23:20.870
You have to use movie controllers
because there's no other way to do it.

00:23:20.930 --> 00:23:25.390
You have to use the movie controllers
to get those events to do intermovie

00:23:25.530 --> 00:23:28.020
communication and work with sprites.

00:23:28.020 --> 00:23:31.680
With QuickTime VR,
you sort of implicitly need a controller

00:23:31.680 --> 00:23:36.450
because you don't play a VR movie,
you sort of play with a VR movie.

00:23:36.450 --> 00:23:38.480
So without a controller,
it wouldn't really make sense.

00:23:39.180 --> 00:23:42.080
Streaming you can do
without a movie controller,

00:23:42.080 --> 00:23:45.420
but it's really hard,
and you have to do a lot of code

00:23:45.590 --> 00:23:49.150
by yourself that's taken care of
automatically with a movie controller.

00:23:49.280 --> 00:23:52.420
So I would advise you to use
a movie controller if you're

00:23:52.420 --> 00:23:54.070
going to use streaming.

00:23:54.840 --> 00:23:57.040
The second thing you can do with them,
so you can control,

00:23:57.040 --> 00:23:58.590
you can also query your movie.

00:23:58.600 --> 00:24:01.830
You can get movie information
using your movie controller object,

00:24:01.830 --> 00:24:04.010
like MCGetCurrentTime.

00:24:04.190 --> 00:24:06.680
There's also one called
MCGetControllerInfo.

00:24:06.680 --> 00:24:09.030
This is mostly used for adjusting menus.

00:24:09.050 --> 00:24:13.530
So let's say you have an edit menu that
you need to adjust on the fly based on

00:24:13.670 --> 00:24:15.300
whether or not your movie is playing.

00:24:15.320 --> 00:24:21.020
You can use MCGetControllerInfo,
pass in any flags, whatever the,

00:24:21.190 --> 00:24:26.650
you know, you have a long that's flags,
and it gives back to you these

00:24:26.650 --> 00:24:28.880
flags and you can compare
them with whatever you want.

00:24:29.160 --> 00:24:33.860
For instance, MCInfo is playing,
or is looping, or has sound.

00:24:34.000 --> 00:24:37.620
These will tell you what you want to know
about your movie and you can adjust your

00:24:37.620 --> 00:24:39.910
menus based on what it gives you back.

00:24:39.940 --> 00:24:44.030
The third reason that you would want to
use controllers is that there's a very

00:24:44.180 --> 00:24:46.500
simple mechanism for providing callbacks.

00:24:46.880 --> 00:24:48.630
This is customization.

00:24:48.640 --> 00:24:52.040
So if you don't like the custom
way QuickTime does something,

00:24:52.250 --> 00:24:55.940
you can change it by intercepting
an event before it gets handled

00:24:55.980 --> 00:24:58.130
by QuickTime and change it around.

00:24:58.380 --> 00:25:00.980
One simple example
that I can think of is,

00:25:00.980 --> 00:25:04.760
for instance, in QuickTime,
in a QuickTime movie,

00:25:04.760 --> 00:25:08.460
if you click on the portion of
the movie where it's being shown,

00:25:08.540 --> 00:25:09.200
it stops.

00:25:09.300 --> 00:25:11.390
A lot of people don't like that.

00:25:11.460 --> 00:25:13.370
They want it to just keep
playing no matter if people

00:25:13.480 --> 00:25:14.550
click on the movie or not.

00:25:14.780 --> 00:25:17.840
Well, if you set up an action filter,
like, for instance,

00:25:17.950 --> 00:25:21.570
my action filter callback,
then it will intercept these events

00:25:21.860 --> 00:25:23.630
before they get to QuickTime.

00:25:23.960 --> 00:25:27.840
And you could intercept, say,
MC action movie click,

00:25:28.050 --> 00:25:31.890
and you could make it into a null
event and it would then discard it.

00:25:32.010 --> 00:25:34.240
And it would say, "Yes,
I handled the event.

00:25:34.290 --> 00:25:36.440
Keep on doing whatever you were doing."

00:25:37.720 --> 00:25:40.290
The last one is tasking
with movie controllers.

00:25:40.290 --> 00:25:42.820
If you've worked with
QuickTime a little bit,

00:25:42.820 --> 00:25:46.060
you know that it needs time to
process the movie information

00:25:46.060 --> 00:25:47.480
that it's working on.

00:25:47.520 --> 00:25:50.400
You can use a lower level
call such as TaskMovie,

00:25:50.560 --> 00:25:54.170
but you don't have to use those
if you're using a movie controller

00:25:54.230 --> 00:25:56.570
because you can use MCIsPlayerEvent.

00:25:56.590 --> 00:25:59.530
If you use that call,
it will task movie for you.

00:25:59.530 --> 00:26:04.610
It will make that call and it will give
your movie sufficient processing time.

00:26:04.660 --> 00:26:10.270
There's also a new API in QuickTime 6
that gives more efficient processing

00:26:10.280 --> 00:26:15.880
time to QuickTime and it lets you
know how often to call QuickTime,

00:26:15.900 --> 00:26:18.200
but I'm not going to steal
the thunder of people who are

00:26:18.200 --> 00:26:21.820
going to talk about that later,
so more on that later.

00:26:21.920 --> 00:26:24.810
One of the other great things that
attaching a movie controller to a movie

00:26:24.810 --> 00:26:30.910
gives you is you immediately get a
nice professional support that you can

00:26:30.990 --> 00:26:33.080
actually now support movie editing.

00:26:33.080 --> 00:26:37.280
As you can see, if you turn movie editing
on with MC-enabled editing,

00:26:37.280 --> 00:26:41.990
then there's a mapping from
high-level edit commands,

00:26:42.090 --> 00:26:45.720
menu edit commands, to MC functions.

00:26:45.720 --> 00:26:50.100
Not only do you get cut, copy, paste,
but you also get undo.

00:26:54.790 --> 00:27:01.380
Adding media samples is a simple matter
of calling beginMediaEdits in order to

00:27:01.380 --> 00:27:03.750
prepare the movie storage for write.

00:27:03.750 --> 00:27:05.770
QuickTime opens the
movie storage for write.

00:27:05.800 --> 00:27:11.240
You add media samples,
you add compressed media samples along

00:27:11.240 --> 00:27:15.720
with descriptions of what the media
is and the duration of the media.

00:27:15.720 --> 00:27:20.860
Then, when you've finished your editing,
you close the media for write.

00:27:20.860 --> 00:27:25.700
Then it's important to call
insertMedia into track.

00:27:25.810 --> 00:27:30.940
This is very much like updating
your card catalog index to

00:27:30.940 --> 00:27:32.940
actually point to the books.

00:27:32.950 --> 00:27:36.930
And this then associates
the media with the track.

00:27:38.960 --> 00:27:40.660
New movie from scratch.

00:27:40.790 --> 00:27:45.790
We can create a new movie with create
movie storage using our old friend,

00:27:45.990 --> 00:27:49.340
the data reference and data ref type.

00:27:49.410 --> 00:27:53.290
This returns an empty movie catalog.

00:27:53.870 --> 00:27:57.280
Then we can add tracks and media.

00:27:57.350 --> 00:28:03.400
Then we add the movie
catalog into the storage.

00:28:03.460 --> 00:28:08.410
Then, when we're finished,
we use close movie storage to close.

00:28:08.620 --> 00:28:13.890
You'll notice these calls
are new in QuickTime 6.

00:28:13.890 --> 00:28:13.890
This is because

00:28:15.450 --> 00:28:21.070
QuickTime has always had a file
manager-based way of finding movies,

00:28:21.070 --> 00:28:22.720
movie location.

00:28:22.720 --> 00:28:26.020
Now, with data references,

00:28:26.340 --> 00:28:31.340
We now have the movie storage API,
which is a more generic way of

00:28:31.340 --> 00:28:35.150
accessing movie data locations.

00:28:38.500 --> 00:28:42.160
Then, when you've finished editing,
you want to save your movie.

00:28:42.160 --> 00:28:46.420
You can update the catalog,
which is just to synchronize

00:28:46.530 --> 00:28:51.190
the in-memory model of the
movie back to the movie storage.

00:28:51.600 --> 00:28:55.490
We can also flatten a movie with
Flatten Movie Data to Data Ref,

00:28:55.490 --> 00:29:00.000
which actually then trims the media
data so that only the data that

00:29:00.000 --> 00:29:04.010
is referenced by the catalog is
in a self-contained media storage.

00:29:04.080 --> 00:29:07.020
Then we can also export...

00:29:08.750 --> 00:29:12.170
We can export a QuickTime movie
to a native media format,

00:29:12.200 --> 00:29:15.080
such as you might have an AFF file,
AIFF file,

00:29:15.080 --> 00:29:17.900
which you can then bring into QuickTime.

00:29:17.900 --> 00:29:19.100
QuickTime can import that.

00:29:19.200 --> 00:29:20.520
It will create a temporary catalog.

00:29:20.520 --> 00:29:22.420
You can edit that movie.

00:29:22.420 --> 00:29:27.460
Then you can save that back out
as the native media file format.

00:29:31.670 --> 00:29:32.590
There you have it.

00:29:32.590 --> 00:29:34.460
Congratulations, Movies 101 graduates.

00:29:34.570 --> 00:29:37.020
You now know all the basics that
you need to know to get a basic

00:29:37.040 --> 00:29:38.590
QuickTime-Savvy application.

00:29:38.970 --> 00:29:41.770
Thanks.

00:29:51.900 --> 00:29:53.900
and the success is finally mine.

00:29:53.900 --> 00:29:56.900
Behold,
I can open and play a DB movie file.

00:29:56.900 --> 00:30:00.040
Yes, Jon-Sa, but can you open dozens of
video and audio formats with

00:30:00.040 --> 00:30:01.400
a single set of API calls?

00:30:01.400 --> 00:30:02.400
No, you cannot.

00:30:02.400 --> 00:30:08.470
I, on the other hand,
have discovered the way

00:30:08.470 --> 00:30:08.470
of the data handler.

00:30:08.470 --> 00:30:08.470
Aye, data handlers.

00:30:08.810 --> 00:30:10.180
Excellent.

00:30:10.180 --> 00:30:15.770
Let's bring up Tom Dowdy to tell us
a little bit about video processing.

00:30:21.830 --> 00:30:25.260
Thanks Ian.

00:30:25.320 --> 00:30:28.390
Jon and Brad talked about
where do you-- creating a movie

00:30:28.450 --> 00:30:32.980
from scratch or modifying a
movie by adding samples to it.

00:30:32.980 --> 00:30:35.680
One of the common questions
we get is where else could

00:30:35.680 --> 00:30:37.280
you get these samples from?

00:30:37.920 --> 00:30:40.020
QuickTime has built-in
support for capture,

00:30:40.020 --> 00:30:44.120
compression, import,
and export that abstract away from

00:30:44.120 --> 00:30:47.980
your application the details of
particular types of video input,

00:30:48.180 --> 00:30:50.170
output, compression formats, etc.

00:30:53.470 --> 00:30:57.150
Capture is a very important
part of QuickTime,

00:30:57.150 --> 00:30:59.980
and the structure that you need to
understand in order to perform capture

00:31:00.090 --> 00:31:01.230
is called the sequence grabber.

00:31:01.240 --> 00:31:04.840
The sequence grabber provides an
abstraction from your application

00:31:04.980 --> 00:31:07.930
that allows you to capture
any number of media types,

00:31:07.930 --> 00:31:11.920
audio and video being the most common,
but it does support an unlimited

00:31:12.220 --> 00:31:14.740
number of types that can
be captured simultaneously.

00:31:16.320 --> 00:31:19.800
The quintessential source code for
showing how to use the Sequence Criber,

00:31:19.830 --> 00:31:22.470
it's really a little bit too
much to go into detail here,

00:31:22.490 --> 00:31:25.690
is called HackTV,
it's available on Apple's website.

00:31:28.620 --> 00:31:35.600
Video compression is another
important area of QuickTime.

00:31:35.680 --> 00:31:38.280
Your application can perform
video processing on the video

00:31:38.280 --> 00:31:42.190
before it's been compressed,
but after it has been captured.

00:31:42.430 --> 00:31:46.400
You can process a live
video and store it.

00:31:46.490 --> 00:31:49.000
You can take an existing movie,
process it,

00:31:49.060 --> 00:31:50.360
and store it back into a new movie.

00:31:50.360 --> 00:31:55.160
Or you can perform video processing
while movies are being played back.

00:31:55.830 --> 00:31:58.700
If you're interested in
doing processing on videos,

00:31:58.700 --> 00:32:04.120
such as perhaps alpha overlays,
displaying a video bug, doing effects or

00:32:04.120 --> 00:32:09.860
crossfades between videos,
session 602, which follows this session,

00:32:09.860 --> 00:32:12.660
gives more information about this.

00:32:16.350 --> 00:32:20.520
Another important aspect of QuickTime is
the ability to open multiple file

00:32:20.520 --> 00:32:23.900
types or save out different file types.

00:32:24.010 --> 00:32:27.690
The movie import and export
components within QuickTime

00:32:28.260 --> 00:32:31.360
Allow your application to perform
this importing and exporting

00:32:31.360 --> 00:32:35.480
without knowing the specific details
of each particular file type.

00:32:35.540 --> 00:32:38.880
This means that when new file
types are added by QuickTime,

00:32:38.880 --> 00:32:41.680
your application gains
immediate support for them.

00:32:41.760 --> 00:32:45.340
For example, when we added MPEG-4,
even though it's a very

00:32:45.770 --> 00:32:48.700
different file type,
applications that are using the

00:32:48.700 --> 00:32:53.240
normal QuickTime calls for opening
files and exporting files immediately

00:32:53.240 --> 00:32:56.800
gain the ability to import and export
those files into the MPEG-4 format.

00:32:58.880 --> 00:33:03.240
In addition, there's facilities within
QuickTime for outputting a movie

00:33:03.240 --> 00:33:05.490
directly to an analog video source.

00:33:05.550 --> 00:33:08.330
This is sometimes called print-to-video.

00:33:09.170 --> 00:33:11.950
Also,
all of these import and export functions

00:33:11.960 --> 00:33:16.900
have built-in user interfaces within
QuickTime your application can call on,

00:33:16.900 --> 00:33:19.940
so you don't have to have specific
dialogues that you construct for

00:33:20.060 --> 00:33:21.810
configuring the user's options.

00:33:21.840 --> 00:33:25.420
But, if you're an application that's
perhaps command-line oriented

00:33:25.420 --> 00:33:28.430
or does batch processing,
the same settings are also

00:33:28.430 --> 00:33:30.680
available for you to set via an API.

00:33:30.680 --> 00:33:35.230
Again, if you're interested in import,
export, and print-to-video, session 602,

00:33:35.250 --> 00:33:37.960
which follows this session,
has a lot more detail.

00:33:39.100 --> 00:33:41.030
Ian?

00:33:44.130 --> 00:33:44.440
Hi.

00:33:44.440 --> 00:33:46.700
Make sure you go to that
session this afternoon.

00:33:46.700 --> 00:33:48.000
It's going to be really great.

00:33:48.020 --> 00:33:52.980
Now let's bring up Sam Bushell,
or just before that.

00:33:54.500 --> 00:33:56.500
Let's see what our friends are up to.

00:33:56.500 --> 00:33:58.500
Video capture and processing.

00:33:58.500 --> 00:34:01.500
Thank you, QuickTime team,
for again illuminating my understanding.

00:34:01.500 --> 00:34:05.500
Integrative effects and video acquisition
is as easy as snapping my fingers.

00:34:05.500 --> 00:34:08.500
The concept is comparably simple.

00:34:08.500 --> 00:34:10.500
I write fewer lines of code.

00:34:10.500 --> 00:34:12.500
QuickTime performs the dirty work
while I receive all the credit.

00:34:12.500 --> 00:34:15.490
Ha ha, QuickTime has filled me
with much self-confidence.

00:34:15.500 --> 00:34:19.500
Perhaps QuickTime will also bring me
much more success with the ladies.

00:34:19.500 --> 00:34:21.400
Okay.

00:34:21.500 --> 00:34:24.370
Sam Bushell.

00:34:27.600 --> 00:34:28.600
Good morning.

00:34:28.600 --> 00:34:30.270
Yes, my name is Sam Bushell.

00:34:30.270 --> 00:34:37.000
I'm here to tell you a little
bit about a basic introduction

00:34:37.000 --> 00:34:37.000
to QuickTime still image support.

00:34:38.360 --> 00:34:41.960
QuickTime still image support
consists of two classes of component,

00:34:42.180 --> 00:34:45.080
graphics importers, which are used for
drawing still image files,

00:34:45.090 --> 00:34:47.250
and graphics exporters,
which are used for

00:34:47.250 --> 00:34:48.690
creating still image files.

00:34:48.700 --> 00:34:52.300
Both of these component types are
designed with the philosophy of

00:34:52.300 --> 00:34:56.510
making them easy to start using and
then to have extra calls that you

00:34:56.520 --> 00:35:00.650
can make as an opt-in to get to more
powerful features and functionality.

00:35:02.500 --> 00:35:07.690
What I'm going to go through here
is a brief introduction to how

00:35:07.720 --> 00:35:11.000
to call or how to start calling
both of these kinds of components.

00:35:11.100 --> 00:35:13.140
And then I'll briefly touch
on some of the more advanced

00:35:13.300 --> 00:35:14.800
features that are available.

00:35:14.900 --> 00:35:17.890
And then I'll show you a brief demo
of some sample code that I personally

00:35:17.890 --> 00:35:20.100
recommend to have a look at.

00:35:20.210 --> 00:35:23.280
So, to draw still image files,
first you need to get a

00:35:23.330 --> 00:35:25.500
graphics importer component.

00:35:25.800 --> 00:35:26.800
There are a bunch of APIs.

00:35:26.800 --> 00:35:34.710
There's one that's FS-based,
but in order to gain FSRef support,

00:35:34.730 --> 00:35:43.680
you should consider using data references
that you've made from an alias handle,

00:35:43.680 --> 00:35:43.680
as we discussed,
and passing in the alias type.

00:35:43.680 --> 00:35:43.680
When you pass, once you've called this,

00:35:44.610 --> 00:36:06.890
Image Compression Manager will search for
a graphics importer that's appropriate

00:36:06.890 --> 00:36:06.890
for the file that you've pointed it at.

00:36:06.890 --> 00:36:06.890
It'll search based on the file type,
if there is one, the file name suffix,

00:36:06.890 --> 00:36:06.890
if there is one, the MIME type,
if one is known by the data reference,

00:36:06.890 --> 00:36:06.890
or can be inferred from other
information that the data

00:36:06.890 --> 00:36:06.890
handler knows how to deal with.

00:36:06.890 --> 00:36:06.890
And it'll even look at some of the
data inside the file if necessary.

00:36:07.350 --> 00:36:10.070
If it fails,
it will return an error and the

00:36:10.070 --> 00:36:12.200
graphics input will be zero.

00:36:12.200 --> 00:36:20.290
At this point,
you can find out more information

00:36:20.290 --> 00:36:20.290
about the data reference.

00:36:20.290 --> 00:36:20.290
You can find out about the image file.

00:36:20.530 --> 00:36:23.840
You can ask for information
about the dimensions,

00:36:24.010 --> 00:36:26.870
the color space, metadata, and so forth.

00:36:27.310 --> 00:36:30.000
But in this simple example,
I'm going to pretend that we already

00:36:30.000 --> 00:36:31.710
know where we want to draw the image.

00:36:32.090 --> 00:36:38.120
And so we'll set the location
for it to draw with the graphics

00:36:38.120 --> 00:36:38.120
import setDeskDirectCall.

00:36:38.700 --> 00:36:40.060
After that, we're ready.

00:36:40.060 --> 00:36:46.660
We can just draw it on the screen,
and next time we...

00:36:50.420 --> 00:36:51.830
Next time it's appropriate for
that to appear on the screen,

00:36:51.830 --> 00:36:52.300
it'll appear.

00:36:52.300 --> 00:36:56.220
You can draw again and again if you need.

00:36:56.220 --> 00:36:57.760
You could change the location.

00:36:57.760 --> 00:36:58.850
You can ask for more information.

00:36:58.940 --> 00:37:07.060
You can hang on to the graphics
importer component while you need it,

00:37:07.060 --> 00:37:08.210
but when you're done with it,
you should close the component

00:37:08.210 --> 00:37:08.210
and release the storage
that it's held around.

00:37:09.210 --> 00:37:13.060
With this simple piece of code,
it doesn't actually know about

00:37:13.060 --> 00:37:14.850
a particular file format.

00:37:14.850 --> 00:37:18.060
The data reference type is
not the type of the file,

00:37:18.060 --> 00:37:20.130
as some people initially think.

00:37:20.490 --> 00:37:27.080
It's the type of the data reference.

00:37:27.080 --> 00:37:27.080
So for an alias handle,
data ref type is alias.

00:37:28.430 --> 00:37:32.100
So this piece of code can work
for a whole bunch of different

00:37:32.100 --> 00:37:34.240
image file formats based on the
available graphics importers.

00:37:34.260 --> 00:37:38.760
These are the formats that you'd
be able to use in QuickTime 5.

00:37:38.760 --> 00:37:41.530
As you would have seen this morning,
we've added a JPEG 2000 to

00:37:41.530 --> 00:37:42.980
this list for QuickTime 6.

00:37:45.980 --> 00:37:53.320
Other things that
graphics importers can do.

00:37:53.320 --> 00:37:53.320
What we showed there was how to...

00:37:53.430 --> 00:37:56.560
Specify a rectangle for
drawing the image in upright.

00:37:56.560 --> 00:38:01.940
But you can also choose to pass
a transformation matrix that can

00:38:02.000 --> 00:38:03.900
give you more accurate positioning.

00:38:03.900 --> 00:38:06.040
You can even rotate or put
the image in perspective.

00:38:06.130 --> 00:38:09.630
I should point out that in QuickTime 6,
we've done a bunch of good work to

00:38:10.110 --> 00:38:14.600
improve the quality that you can
achieve with rotation and perspective,

00:38:14.600 --> 00:38:18.100
which you can read more
about in our documentation.

00:38:18.100 --> 00:38:19.080
But that's really neat.

00:38:19.150 --> 00:38:22.030
Graphics importers support
a variety of transfer modes,

00:38:22.110 --> 00:38:25.150
such as quick-draw transfer
modes and also some other ones,

00:38:25.150 --> 00:38:26.760
such as alpha composition.

00:38:26.800 --> 00:38:29.320
They support arbitrary
clipping to a region.

00:38:29.320 --> 00:38:31.290
They'll let you read metadata out.

00:38:31.550 --> 00:38:36.010
An important kind of metadata
that's coming up on the scene

00:38:36.510 --> 00:38:39.450
is exif metadata in exif files.

00:38:39.480 --> 00:38:42.970
Who here has a digital camera that
they purchased in the last five years?

00:38:42.970 --> 00:38:45.220
That's a large number of people.

00:38:46.330 --> 00:38:49.710
If your camera makes JPEG files,
those JPEG files are almost

00:38:49.710 --> 00:38:51.770
certainly actually exif files.

00:38:51.790 --> 00:38:56.510
Exif doesn't define how to do
compression so much as it defines

00:38:56.520 --> 00:38:58.920
how to lay out metadata in the file.

00:38:58.920 --> 00:39:02.340
And there are particular kinds
of camera-oriented metadata,

00:39:02.380 --> 00:39:05.800
such as flash, exposure time,
those kinds of things are stored

00:39:05.880 --> 00:39:07.750
in the metadata for exif files.

00:39:07.760 --> 00:39:10.840
Graphics importers can also support
multiple images in some files.

00:39:10.860 --> 00:39:13.560
The relationship between
those different images varies.

00:39:13.560 --> 00:39:15.600
For a Photoshop file,
there's different layers.

00:39:15.620 --> 00:39:17.120
For a TIFF file, there might be pages.

00:39:17.120 --> 00:39:18.240
For a PDF, there might be pages.

00:39:18.240 --> 00:39:20.820
Exif files have the main
image and then a thumbnail.

00:39:20.820 --> 00:39:24.280
Graphics importers are also
extensible by third parties.

00:39:24.280 --> 00:39:26.490
There's a company
called Escape in Greece,

00:39:26.500 --> 00:39:30.440
for example,
which sell a graphics importer

00:39:30.560 --> 00:39:34.640
component for DICOM images,
which are used in medical imaging.

00:39:34.640 --> 00:39:39.840
For creating still image files,
the API is still very similar.

00:39:39.840 --> 00:39:42.550
You have to choose
which graphics importer,

00:39:42.550 --> 00:39:45.590
graphics exporter you
want based on the chalk.

00:39:45.770 --> 00:39:48.350
You have to choose what choice
of file type you want to create.

00:39:48.350 --> 00:39:49.800
You open the component directly.

00:39:49.890 --> 00:39:51.860
Then you tell it where
the image comes from.

00:39:51.860 --> 00:39:54.040
It might come from a G world
or from a picture or from

00:39:54.040 --> 00:39:55.340
another graphics importer.

00:39:55.600 --> 00:39:58.350
You tell it where the
output should go to,

00:39:58.630 --> 00:40:02.420
which might be a handle, a file,
or a data reference.

00:40:02.700 --> 00:40:06.250
You tell it to perform the export,
and it might actually tell you if you'd

00:40:06.250 --> 00:40:09.070
like to know how much data was created,
and then when you're done,

00:40:09.070 --> 00:40:10.000
you close the component.

00:40:11.360 --> 00:40:13.760
With that amount of code,
you can write a bunch of

00:40:13.760 --> 00:40:15.160
different file formats.

00:40:15.180 --> 00:40:17.800
This list keeps growing as
third parties extend it,

00:40:17.930 --> 00:40:21.030
and we're extending it with
JPEG 2000 and so forth.

00:40:21.100 --> 00:40:23.780
Other things that
graphics exporters can do,

00:40:24.040 --> 00:40:27.050
they can provide a user dialog
for the user interface to

00:40:27.090 --> 00:40:29.430
access format-specific features.

00:40:29.440 --> 00:40:31.460
They can store metadata in the file.

00:40:31.460 --> 00:40:33.840
They can write thumbnails.

00:40:33.840 --> 00:40:36.880
And they're also extensible
by third parties.

00:40:37.770 --> 00:40:41.480
So I'd like to show you a quick
demo of some sample code that's

00:40:41.550 --> 00:40:43.790
up on the QuickTime website,
on the Apple site.

00:40:43.800 --> 00:40:46.160
This is called Improve Your Image.

00:40:46.200 --> 00:40:49.360
It's over on Demo 1,
which I should wake up.

00:40:49.470 --> 00:40:52.880
So I didn't have to write
anything fancy here.

00:40:52.880 --> 00:40:56.240
I did change some of the images so
that it's some more interesting things,

00:40:56.290 --> 00:40:58.980
because I like to show pictures
that I take on holiday in Australia.

00:40:58.980 --> 00:41:01.680
So let's come back.

00:41:05.600 --> 00:41:06.600
and many more.

00:41:06.600 --> 00:41:13.560
So let's have a look at a couple
of lines of code to draw a picture.

00:41:13.590 --> 00:41:15.700
Can you see the kangaroo?

00:41:16.060 --> 00:41:18.960
Well, scaling the image is very easy
just by changing the rectangle,

00:41:19.110 --> 00:41:21.560
but with a very small
amount of further code,

00:41:21.620 --> 00:41:25.060
you could just rotate it or
put the image into a non-app-on

00:41:25.060 --> 00:41:28.480
transformation such as perspective.

00:41:28.480 --> 00:41:30.470
This kind of transformation
is particularly improved.

00:41:30.510 --> 00:41:32.800
It used to be point sampling
in QuickTime 5 and before.

00:41:32.970 --> 00:41:36.250
Now it might be bilinear interpolation
or bicubic interpolation,

00:41:36.250 --> 00:41:37.860
perhaps with anti-aliasing.

00:41:38.100 --> 00:41:40.960
Looks really good.

00:41:40.960 --> 00:41:44.380
QuickTime can also perform
alpha composition for you.

00:41:44.380 --> 00:41:49.940
Here's a picture of a beach and a
picture of an old mascot of ours.

00:41:49.980 --> 00:41:52.990
With a normal transfer mode,
you see a white box around the image.

00:41:52.990 --> 00:41:56.030
With the transparent transfer mode,
we do a key color,

00:41:56.080 --> 00:41:59.660
but that gives you halos and maybe
takes out pieces of your image.

00:41:59.660 --> 00:42:01.720
But this image actually
has an alpha channel.

00:42:01.720 --> 00:42:03.800
The important point here is
that alpha composition is a very

00:42:03.800 --> 00:42:03.800
important component of the image.

00:42:04.000 --> 00:42:08.360
Alpha composition is an orthogonal
feature from the transformation matrix.

00:42:08.360 --> 00:42:11.140
So we can actually rotate the
image and still have it composed

00:42:11.360 --> 00:42:13.240
on the image on the background.

00:42:13.750 --> 00:42:19.450
Briefly, because I'm running out of time,
let me show you some...

00:42:19.650 --> 00:42:23.130
Support for layered images in Photoshop.

00:42:23.130 --> 00:42:27.600
Here's a slightly doctored image
of a wallaby using an iMac.

00:42:27.600 --> 00:42:30.960
I'm going to go through the
different layers in the file.

00:42:30.960 --> 00:42:34.430
Individually, there's a background,
there's the shadow underneath the iMac,

00:42:34.430 --> 00:42:36.380
there's the iMac itself,
and then there's the

00:42:36.380 --> 00:42:37.630
wallaby brought back in.

00:42:37.660 --> 00:42:41.320
And now I'm going to use QuickTime to
draw them without erasing in between.

00:42:41.320 --> 00:42:45.280
And this time we see the background,
the shadow, the iMac.

00:42:46.350 --> 00:42:48.980
And this is more or less the same
image as we saw in the first place,

00:42:48.980 --> 00:42:52.300
but composed by making QuickTime calls
to the graphics importers.

00:42:52.320 --> 00:42:56.780
So that's all I have time to demonstrate,
but I recommend having a look at

00:42:57.060 --> 00:43:01.390
this sample code if you want to find
interesting things that you can do

00:43:01.390 --> 00:43:02.860
very easily with graphics importers.

00:43:02.860 --> 00:43:04.390
Thank you very much.

00:43:04.440 --> 00:43:06.590
I might have to step back.

00:43:13.280 --> 00:43:14.800
We can bring up the slide machine,
please.

00:43:14.820 --> 00:43:18.220
Thank you very much, Sam.

00:43:18.220 --> 00:43:19.670
Yeah, and that sample code, go out.

00:43:19.680 --> 00:43:22.630
We'll have a link at the,
or a slide at the end of this that'll

00:43:22.630 --> 00:43:25.240
tell you where to go and get lots of the
sample code that we've covered today.

00:43:25.240 --> 00:43:27.300
But hopefully you're
getting the impression that,

00:43:27.300 --> 00:43:29.920
hey, I do a little bit of work
and I get a big payoff.

00:43:29.980 --> 00:43:31.190
That's where we're trying to go.

00:43:31.200 --> 00:43:32.560
Let's see how our friends are doing.

00:43:38.720 --> 00:43:41.350
With sufficient cunning and
lightning-swift reading,

00:43:41.350 --> 00:43:44.280
I may succeed in devising
an image-savvy framework.

00:43:44.310 --> 00:43:46.500
But I must make haste.

00:43:56.100 --> 00:44:01.900
[Transcript missing]

00:44:05.600 --> 00:44:08.570
Understanding, JPEG, TIFF, GIF,
Photoshop.

00:44:08.570 --> 00:44:11.570
QuickTime handles them
all for me automatically.

00:44:11.570 --> 00:44:14.070
Import and export are
mine for the taking.

00:44:14.070 --> 00:44:16.640
Thank you, oh wise red-headed sage.

00:44:21.580 --> 00:44:24.980
Now I'd like to bring Tim Monroe up
here to discuss interactivity with us.

00:44:25.290 --> 00:44:27.130
Thank you, Tim Monroe.

00:44:31.410 --> 00:44:32.940
Thank you.

00:44:32.940 --> 00:44:36.930
In addition to the linear media formats
that we've seen and still image formats,

00:44:37.050 --> 00:44:40.720
QuickTime also supports what
we call interactive movies.

00:44:40.810 --> 00:44:45.680
What's special about these is they
don't just play frames over time.

00:44:45.680 --> 00:44:49.250
Instead,
they respond to the user events such

00:44:49.310 --> 00:44:51.890
as mouse input or keyboard events.

00:44:51.930 --> 00:44:56.830
With a well-made interactive movie,
these events can trigger various

00:44:56.890 --> 00:45:00.430
actions that give you dynamic feedback.

00:45:00.530 --> 00:45:03.470
And QuickTime supports two
basic interactive types,

00:45:03.470 --> 00:45:07.600
namely QuickTime VR tracks
and flash tracks.

00:45:07.600 --> 00:45:11.200
In addition to those
intrinsically interactive types,

00:45:11.200 --> 00:45:15.780
there are two other media types that
we can add dynamic behaviors to,

00:45:15.780 --> 00:45:17.760
what I call scriptable.

00:45:17.840 --> 00:45:21.170
These are text tracks and sprite tracks.

00:45:21.180 --> 00:45:23.520
And as we've seen,
QuickTime is an extensible architecture,

00:45:23.520 --> 00:45:25.510
so if you're really into
this interactive stuff,

00:45:25.510 --> 00:45:26.080
you can add your own.

00:45:26.080 --> 00:45:26.140
So, if you're really into
this interactive stuff,

00:45:26.140 --> 00:45:26.140
you can add your own.

00:45:26.140 --> 00:45:26.690
So, if you're really into
this interactive stuff,

00:45:26.730 --> 00:45:27.100
you can add your own media types.

00:45:27.200 --> 00:45:31.020
Some examples here would be 3D media,
for instance.

00:45:31.090 --> 00:45:34.000
Let's take an easy demo of
some interactive movies.

00:45:34.000 --> 00:45:38.040
Can we have the demo machine up?

00:45:38.040 --> 00:45:42.450
Where did they go?

00:45:48.000 --> 00:45:50.590
Here's a simple example of
a QuickTime VR panorama.

00:45:50.640 --> 00:45:53.060
As you can see, I'm sort of standing
out there in the desert.

00:45:53.060 --> 00:45:57.100
And by clicking and dragging the mouse,
I can move around within the panorama.

00:45:57.150 --> 00:46:00.010
So I, as the user,
have control over what I'm

00:46:00.010 --> 00:46:02.200
seeing at any particular time.

00:46:02.210 --> 00:46:05.740
I can also use the keyboard
to zoom in and zoom out.

00:46:05.820 --> 00:46:08.980
And as you can see,
when I move my cursor over

00:46:08.980 --> 00:46:12.500
this area of the movie,
it turns into an arrow.

00:46:12.500 --> 00:46:15.240
If I click that, I go to a new node.

00:46:15.250 --> 00:46:17.070
So here we have a multi-node panorama.

00:46:18.730 --> 00:46:23.360
Another type of QuickTime VR movie
is what we call an object movie.

00:46:23.630 --> 00:46:26.720
This is sort of where I'm
controlling the object.

00:46:26.810 --> 00:46:28.360
I can move it around.

00:46:28.380 --> 00:46:30.570
Again, I can zoom in, zoom out.

00:46:30.570 --> 00:46:35.080
So I'm in control here.

00:46:35.700 --> 00:46:38.800
Another media type, as I mentioned,
was Flash.

00:46:38.950 --> 00:46:41.580
Here's an off-the-shelf Flash movie.

00:46:41.580 --> 00:46:44.260
Again,
the passage of time is irrelevant here.

00:46:44.260 --> 00:46:47.920
I'm in control as I move the
cursor over various objects here.

00:46:47.920 --> 00:46:53.480
I can then drag them around and
create a nice little eggplant.

00:46:56.610 --> 00:46:59.740
We can get Flash movies that
have more dynamism in them.

00:46:59.880 --> 00:47:02.750
Here's one where I've got
sort of this pulsating square.

00:47:03.240 --> 00:47:05.920
I can use controls
here to move it around.

00:47:06.240 --> 00:47:07.860
I can make it larger.

00:47:07.910 --> 00:47:11.180
I can move it to a random location.

00:47:11.250 --> 00:47:13.000
And so forth.

00:47:14.070 --> 00:47:15.950
and one note, two more examples.

00:47:15.950 --> 00:47:20.380
This is a sprite track,
so I've got a graphic image.

00:47:20.380 --> 00:47:22.870
As you can see,
the one penguin is changing

00:47:22.870 --> 00:47:24.430
its location over time.

00:47:24.430 --> 00:47:26.830
When it gets to the bottom,
it jumps back up.

00:47:26.830 --> 00:47:29.330
If I click on that penguin,
he'll blink his eyes,

00:47:29.330 --> 00:47:31.590
and the other penguin will start moving.

00:47:31.590 --> 00:47:35.360
And also, you can see that sort of hidden
down here are some controls.

00:47:35.360 --> 00:47:40.390
I can move the penguin back to his start,
move him to the end, and so forth.

00:47:41.620 --> 00:47:43.240
Again, I'm in control.

00:47:43.240 --> 00:47:46.080
What I do to the movie
is what makes it go.

00:47:46.210 --> 00:47:48.460
Here's another example,
and this one I really like.

00:47:48.550 --> 00:47:52.380
This is just a graphic image
using one of the effects to

00:47:52.380 --> 00:47:54.140
give a ripple effect to it.

00:47:54.140 --> 00:47:58.990
And again, if I click there,
I get a nice little ripple as if I had

00:47:59.000 --> 00:48:01.550
thrown a stone in at the penguin.

00:48:01.630 --> 00:48:04.110
OK, back to slides, please.

00:48:06.630 --> 00:48:08.600
What's distinctive about
interactive movies?

00:48:08.660 --> 00:48:10.940
As Brad mentioned earlier,
when I'm working with

00:48:10.940 --> 00:48:13.450
an interactive movie,
I have to have a movie controller.

00:48:13.490 --> 00:48:19.420
Also, objects within the movie,
such as the, uh,

00:48:20.040 --> 00:48:24.520
The Penguin That I Clicked On can send
actions to other objects in the movie,

00:48:24.660 --> 00:48:28.300
or indeed, I can send actions to other
movies that I have open.

00:48:28.300 --> 00:48:32.220
That's a very powerful capability
that we call intermovie communication.

00:48:32.280 --> 00:48:34.490
And can I have the demo machine back?

00:48:37.330 --> 00:48:40.040
Let's take a quick look at one of those.

00:48:40.100 --> 00:48:42.700
Here I'm going to open two movies.

00:48:43.050 --> 00:48:44.560
We have our ripple penguin again.

00:48:44.560 --> 00:48:47.180
You can see he's still
responding to my clicks.

00:48:47.180 --> 00:48:50.000
Over here I have a
similar looking penguin.

00:48:50.000 --> 00:48:53.200
He doesn't have any rippling,
but when I click him,

00:48:53.240 --> 00:48:54.400
the other penguin has disappeared.

00:48:54.400 --> 00:49:00.890
So a message is being sent from the
one movie to the other movie saying,

00:49:00.890 --> 00:49:08.180
please toggle your visibility state,
and I can make him disappear as I like.

00:49:08.430 --> 00:49:09.260
Back to slides, please.

00:49:13.330 --> 00:49:17.760
Okay, another nice feature which
is not really interactive,

00:49:17.760 --> 00:49:20.580
but which seems to go
along with interactivity,

00:49:20.590 --> 00:49:21.680
are skinned movies.

00:49:21.680 --> 00:49:26.020
A skinned movie is a movie window
with a custom window shape.

00:49:26.110 --> 00:49:28.590
So that's really what's
involved with a skinned movie.

00:49:30.280 --> 00:49:33.010
When we do that,
we don't get our standard window frame.

00:49:33.020 --> 00:49:34.120
We don't get a title bar.

00:49:34.120 --> 00:49:36.070
We don't get any of
those nice Aqua buttons.

00:49:36.070 --> 00:49:39.020
We don't get anything
to drag it around by.

00:49:39.020 --> 00:49:41.290
So we've got to define those behaviors.

00:49:41.300 --> 00:49:44.450
The nice thing about a skin
movie is it allows you,

00:49:44.450 --> 00:49:47.480
the content creator,
to specify the entire look

00:49:47.610 --> 00:49:49.230
and feel of that movie.

00:49:49.230 --> 00:49:51.880
You're not stuck in this
rectangular box anymore.

00:49:51.880 --> 00:49:53.860
You can do more interesting things.

00:49:55.280 --> 00:49:57.840
Now, because you're not
getting a controller bar,

00:49:57.970 --> 00:50:00.560
you may need to supply some
controls for the user to be

00:50:00.560 --> 00:50:02.280
able to manipulate the movie.

00:50:02.280 --> 00:50:05.560
And I think we're ready for a demo,
so let's take a demo

00:50:05.560 --> 00:50:09.520
of a few simple skins.

00:50:10.920 --> 00:50:13.600
Here's a couple done by Totally Hip.

00:50:13.680 --> 00:50:17.960
Here we have a movie window
that is submarine-shaped,

00:50:17.960 --> 00:50:20.140
and inside of here is a video.

00:50:20.270 --> 00:50:23.050
This is actually a flash track
that is providing the rest

00:50:23.150 --> 00:50:25.560
of the graphic elements here.

00:50:25.680 --> 00:50:29.050
You'll notice the little propeller
down here is turning around,

00:50:29.190 --> 00:50:32.990
and this movie has a cool
feature that if I click here,

00:50:32.990 --> 00:50:36.760
the escape button,
it will close the window.

00:50:36.760 --> 00:50:39.530
Let's take one more example.

00:50:40.210 --> 00:50:42.160
Here's a fairly complicated Flash skin.

00:50:42.160 --> 00:50:43.380
It's got some things up here.

00:50:43.380 --> 00:50:44.900
I can select various.

00:50:44.900 --> 00:50:47.000
Let's try some still images.

00:50:47.080 --> 00:50:49.890
Got some nice 3D models here.

00:50:50.270 --> 00:50:52.360
There's the hip bot.

00:50:52.360 --> 00:50:55.040
This movie is kind of cool because it
can go out and query the environment.

00:50:55.090 --> 00:50:57.720
You can see it knows that
I'm running on a Macintosh.

00:50:58.000 --> 00:51:00.690
It knows that my haircut is punk,
whatever that is.

00:51:00.810 --> 00:51:03.510
And it knows that I'm
running on QuickTime 6 here.

00:51:03.580 --> 00:51:06.000
OK, back to slides.

00:51:06.800 --> 00:51:13.700
[Transcript missing]

00:51:15.110 --> 00:51:16.780
You amaze me with your
technical wizardry.

00:51:16.780 --> 00:51:19.580
Master,
is the level of carnage satisfactory?

00:51:19.580 --> 00:51:21.660
Yes, it is most gratifying.

00:51:24.200 --> 00:51:48.300
[Transcript missing]

00:51:57.710 --> 00:52:00.880
Okay, you'll notice that I haven't
shown you any code to figure out,

00:52:00.910 --> 00:52:05.300
so you can incorporate
interactivity into your application.

00:52:05.340 --> 00:52:10.700
The reason for that is that if you've
written your application right,

00:52:10.760 --> 00:52:14.050
these kinds of interactive
movies will play automatically.

00:52:14.160 --> 00:52:16.220
There's really nothing
special you need to do.

00:52:16.220 --> 00:52:20.030
Now, there is some stuff that you can
do extra to make your application

00:52:20.030 --> 00:52:23.230
a little more interactive savvy,
and I'll talk about that

00:52:23.230 --> 00:52:25.200
later in session 604 today.

00:52:26.120 --> 00:52:29.290
Now, I want to shift gears a little
bit and talk about writing

00:52:29.290 --> 00:52:31.440
cross-platform QuickTime applications.

00:52:31.520 --> 00:52:35.940
So, you've got some code that opens,
plays QuickTime movies.

00:52:35.940 --> 00:52:39.950
What do you need to do to make sure
that it's portable to other systems?

00:52:39.960 --> 00:52:42.550
In particular,
what I'm thinking is perhaps you have

00:52:42.550 --> 00:52:46.520
an application that runs on Macintosh,
and you'd like to be able to port

00:52:46.690 --> 00:52:51.460
it to Windows so that it runs there
and greatly increases your sales.

00:52:53.590 --> 00:52:56.020
QuickTime in Windows is
a very good story.

00:52:56.220 --> 00:52:59.490
Since QuickTime 3,
we've had identical programming

00:52:59.490 --> 00:53:01.220
APIs on the two platforms.

00:53:01.220 --> 00:53:04.870
The idea being that you can
code once and deliver this on

00:53:04.920 --> 00:53:06.480
both Macintosh and Windows.

00:53:06.510 --> 00:53:09.460
In order to do this,
we've had to make what we

00:53:09.620 --> 00:53:13.450
call Macintosh data types,
such as handles, pointers,

00:53:13.540 --> 00:53:16.260
off-screen G-worlds,
available on Windows as

00:53:16.260 --> 00:53:17.700
well as on Macintosh.

00:53:17.700 --> 00:53:20.810
So, for instance,
the few lines of code that I've got here,

00:53:20.810 --> 00:53:22.660
I could put into my application.

00:53:22.700 --> 00:53:25.200
I'm allocating a buffer,
and then later I'm

00:53:25.200 --> 00:53:26.670
getting rid of the buffer.

00:53:27.100 --> 00:53:31.890
That code works as well on
Windows as it does on Macintosh.

00:53:32.760 --> 00:53:36.330
This magic is provided by this thing
called the QuickTime Media Layer.

00:53:36.350 --> 00:53:39.720
And essentially what they did was
take a whole lot of the Macintosh

00:53:39.820 --> 00:53:44.060
operating system and shove it into
a library that works on Windows.

00:53:44.060 --> 00:53:48.780
And I've listed here a few of the
various managers that you can call on

00:53:48.780 --> 00:53:54.030
Windows because you might need those
to do your QuickTime programming.

00:53:55.320 --> 00:53:56.180
Very important point.

00:53:56.240 --> 00:53:59.560
A lot of people like to say that
QTML is not a porting layer.

00:53:59.560 --> 00:54:01.390
Well, that's a little bit of a lie.

00:54:01.400 --> 00:54:05.490
QuickTime, QTML is not a general
purpose porting layer.

00:54:05.490 --> 00:54:08.200
So you can't think, oh,
I've got an application

00:54:08.260 --> 00:54:10.990
that runs on Macintosh,
I'll just use this QTML to

00:54:10.990 --> 00:54:12.920
get it to work under Windows.

00:54:12.920 --> 00:54:14.630
In general, that won't work.

00:54:14.720 --> 00:54:18.080
What QTML is,
is a special purpose porting layer.

00:54:18.080 --> 00:54:21.900
It's designed to allow you to
take your QuickTime code and move

00:54:22.090 --> 00:54:24.620
it to Windows easily and quickly.

00:54:25.310 --> 00:54:30.130
So you can write the code once,
deliver it on multiple platforms.

00:54:30.790 --> 00:54:33.660
Now I want to talk about a few
porting issues that you'll run into,

00:54:33.660 --> 00:54:37.610
because of course nothing is
ever as easy as we say it is.

00:54:38.400 --> 00:54:39.400
and there are four in particular.

00:54:39.400 --> 00:54:42.260
Let's talk about namespace conflicts.

00:54:42.340 --> 00:54:45.620
Turns out that Macintosh
had some various functions,

00:54:45.620 --> 00:54:48.990
for instance, show window that you
use to show a window.

00:54:49.000 --> 00:54:51.230
When the people in
Redmond did their APIs,

00:54:51.350 --> 00:54:54.300
they thought, what do we call it when
we want to show a window?

00:54:54.300 --> 00:54:55.800
How about show window?

00:54:55.800 --> 00:54:59.170
Well, so we've got show
window on two platforms.

00:54:59.190 --> 00:55:03.640
When you try and compile your Mac code
that calls show window for Windows,

00:55:03.640 --> 00:55:05.320
you'll get a compiler error.

00:55:05.980 --> 00:55:06.710
What do you do?

00:55:06.710 --> 00:55:10.080
Just stick Mac on the front of it and
everything will work out perfectly.

00:55:10.080 --> 00:55:14.250
So a certain number of Mac APIs,
this list is not exhaustive,

00:55:14.270 --> 00:55:19.570
have been renamed to make them available
on Windows as well as on Macintosh.

00:55:21.710 --> 00:55:23.160
Indian issues.

00:55:23.230 --> 00:55:27.320
Macintosh was originally
a Big Indian platform.

00:55:27.380 --> 00:55:30.380
This shows up in that data
in a QuickTime movie file is

00:55:30.380 --> 00:55:32.110
stored in Big Indian format.

00:55:32.200 --> 00:55:36.770
Big Indian means that the most
significant byte of multi-byte

00:55:37.160 --> 00:55:39.710
data is stored lowest in memory.

00:55:40.400 --> 00:55:43.260
Windows runs on little Indian platforms.

00:55:43.330 --> 00:55:46.150
That is to say,
where the most significant byte

00:55:46.150 --> 00:55:48.100
is stored highest in memory.

00:55:52.090 --> 00:55:54.340
Now in general,
you don't need to worry about the

00:55:54.340 --> 00:55:56.240
endianness of any multibyte data.

00:55:56.290 --> 00:55:59.000
If I have some parameters that
I pass to a QuickTime function,

00:55:59.000 --> 00:56:02.020
or if I call a QuickTime function
to get some data back,

00:56:02.120 --> 00:56:05.600
it's going to be in native endian format.

00:56:05.650 --> 00:56:09.100
That is to say,
in the format that is appropriate

00:56:09.100 --> 00:56:11.000
for the host processor.

00:56:12.250 --> 00:56:15.160
Occasionally, however,
you do need to worry about

00:56:15.160 --> 00:56:17.080
the format of multibyte data.

00:56:17.170 --> 00:56:19.940
Typically,
this happens when QuickTime gives

00:56:19.980 --> 00:56:23.780
you a chunk of data that it
doesn't know the structure of.

00:56:23.940 --> 00:56:26.440
One good example here
is with movie user data.

00:56:26.440 --> 00:56:31.230
Here I have some lines of code
that show how you get what's called

00:56:31.230 --> 00:56:33.830
movie user data from a movie file.

00:56:34.020 --> 00:56:37.580
And in this particular case,
I'm asking it for the piece

00:56:37.580 --> 00:56:39.920
of user data of type WLOC.

00:56:39.960 --> 00:56:46.230
This is added to a movie to let you know
where to put the window on the screen.

00:56:46.540 --> 00:56:50.350
Now, QuickTime does not know
the structure of that data.

00:56:50.450 --> 00:56:53.200
So when you get it back,
you need to swap the bytes

00:56:53.300 --> 00:56:57.080
of that to make sure that it
is in native Indian format.

00:56:57.110 --> 00:57:00.460
And you can see that I'm
using a macro Indian S16,

00:57:00.480 --> 00:57:01.220
B to N.

00:57:01.220 --> 00:57:02.900
That is to say, big to native.

00:57:05.890 --> 00:57:09.000
Now, byte swapping is only an
issue for multibyte data,

00:57:09.090 --> 00:57:12.090
but not for C or Pascal strings,
even though they're multibyte.

00:57:12.470 --> 00:57:15.800
They're treated as arrays
of single byte characters.

00:57:15.940 --> 00:57:19.560
It's necessary only when you're
transferring data between

00:57:19.560 --> 00:57:22.600
RAM and some external container,
such as a file.

00:57:22.790 --> 00:57:26.610
And the best advice here is
simply use the macros that

00:57:26.730 --> 00:57:29.790
you find in the header file,
Indian.h.

00:57:31.140 --> 00:57:33.800
The QuickTime Media Layer supports
the Resource Manager,

00:57:33.800 --> 00:57:37.720
so if you have data such as
user interface data or any type

00:57:37.800 --> 00:57:41.740
of data stored in a resource,
you can use QTML on

00:57:41.740 --> 00:57:43.640
Windows to read that data.

00:57:43.640 --> 00:57:49.520
The gotcha here is that on Macintosh,
when you open an application,

00:57:49.630 --> 00:57:53.490
the application's resource fork
is automatically opened for you.

00:57:54.000 --> 00:57:55.350
On Windows, that's not true.

00:57:55.350 --> 00:58:00.600
You need to go through some code like
this to make your resources available to

00:58:00.600 --> 00:58:02.280
you when you're running under Windows.

00:58:04.580 --> 00:58:07.440
Once again,
QuickTime tries hard to give you back

00:58:07.440 --> 00:58:12.200
the information that you want in a
native Indian format so that you don't

00:58:12.200 --> 00:58:14.540
need to worry about these issues.

00:58:14.590 --> 00:58:17.900
If you have a custom resource, however,
where QuickTime doesn't

00:58:17.900 --> 00:58:20.910
know the structure,
all it's going to do is give you back

00:58:20.910 --> 00:58:22.640
the chunk of data that's in the resource.

00:58:22.650 --> 00:58:25.830
You will then,
if you're running under Windows,

00:58:25.900 --> 00:58:31.270
need to make sure that that data
is in a format that you can handle.

00:58:31.570 --> 00:58:34.560
So there's a couple of ways
you can handle that issue.

00:58:34.560 --> 00:58:37.760
A very simple way is to install
what's called a resource flipper,

00:58:37.870 --> 00:58:42.460
and this is a callback procedure that
the resource manager will call when

00:58:42.460 --> 00:58:44.620
you ask it to read that kind of data.

00:58:44.620 --> 00:58:47.920
It will then call your function,
you do your flipping,

00:58:47.920 --> 00:58:49.640
and it gives you back that.

00:58:50.380 --> 00:58:53.420
Alternatively, you can just get back
the raw block of data,

00:58:53.420 --> 00:58:57.200
and you know the structure of that
data because it's your custom resource,

00:58:57.200 --> 00:59:00.100
so you can just flip whatever fields
you need at the time you need them.

00:59:02.150 --> 00:59:05.380
One last thing is QuickTime puts
up a lot of dialogues as

00:59:05.380 --> 00:59:06.730
part of its user interface.

00:59:06.740 --> 00:59:09.600
This is really cool because
you get all this UI for free.

00:59:09.600 --> 00:59:12.750
Under Windows,
you need to jump through a hoop

00:59:12.830 --> 00:59:16.820
because you can't handle these
in the standard Macintosh way.

00:59:16.820 --> 00:59:21.110
So what you'll need to do is either
install what's called a modeless

00:59:21.110 --> 00:59:24.640
dialogue callback procedure,
or, alternatively,

00:59:24.700 --> 00:59:29.730
if you have a fairly complex dialogue,
you should consider just re-implementing

00:59:29.730 --> 00:59:31.900
it using the standard Windows APIs.

00:59:32.100 --> 00:59:33.390
Amen.

00:59:34.080 --> 00:59:36.020
Let me say just a few words about Carbon.

00:59:36.020 --> 00:59:38.550
If you have some code
that was pre-Carbon,

00:59:38.550 --> 00:59:40.080
you want to move it under Carbon.

00:59:40.080 --> 00:59:45.490
The thing here to worry about, of course,
is that a lot of the data structures

00:59:45.660 --> 00:59:47.720
are no longer transparent.

00:59:47.720 --> 00:59:50.520
They're opaque,
so you need to use accessor

00:59:50.740 --> 00:59:53.430
functions to get at them,
such as if I want to get

00:59:53.560 --> 00:59:57.060
a menu ID pre-Carbon,
I could just dereference the menu

00:59:57.060 --> 00:59:59.660
handle and look at the menu ID field.

00:59:59.700 --> 01:00:01.460
Under Carbon, I can't do that.

01:00:01.570 --> 01:00:03.040
They've given me an accessor function.

01:00:03.730 --> 01:00:06.780
That accessor function is
not available under QTML,

01:00:06.780 --> 01:00:11.470
so you can define your own
macro here to handle that.

01:00:11.470 --> 01:00:13.020
And I'm done.

01:00:13.270 --> 01:00:13.870
Thank you very much.

01:00:13.880 --> 01:00:19.960
Thank you, Tim Monroe.

01:00:27.700 --> 01:00:29.500
The master will be so pleased with me.

01:00:29.500 --> 01:00:32.480
I have implemented my code
in a cross-platform manner.

01:00:32.480 --> 01:00:37.080
My code runs on Atari,
as well as vintage Commodore machines.

01:00:37.080 --> 01:00:40.070
Tim Monroe has taught me
the way of Indian flipping.

01:00:40.070 --> 01:00:43.160
With my newfound knowledge,
I can write my code once for

01:00:43.160 --> 01:00:45.000
both Windows and Macintosh.

01:00:45.000 --> 01:00:48.260
QuickTime Judo flows
strongly through my veins.

01:00:51.460 --> 01:00:53.540
Let's bring up Greg Chapman.

01:00:53.540 --> 01:00:57.660
He will discuss some issues
and enhancements that we made

01:00:57.710 --> 01:00:59.000
around tasking QuickTime.

01:00:59.000 --> 01:01:00.990
Greg.

01:01:06.110 --> 01:01:07.050
You can hear me?

01:01:07.050 --> 01:01:08.490
Yes.

01:01:08.770 --> 01:01:11.640
There's always the question
that we always get asked,

01:01:11.650 --> 01:01:14.970
how often should I call
QuickTime to give it time?

01:01:14.980 --> 01:01:21.520
And I'm sure there are several
people in the room here who

01:01:21.520 --> 01:01:21.520
have asked that question before,
and you never really get a

01:01:21.520 --> 01:01:21.520
very satisfactory answer.

01:01:22.020 --> 01:01:25.300
Inside Mac QuickTime says you
should task QuickTime regularly

01:01:25.300 --> 01:01:27.130
and as often as possible.

01:01:27.140 --> 01:01:31.410
Okay,
there's a lot of folklore about this.

01:01:33.050 --> 01:01:35.310
The problem is that if
you task it too little,

01:01:35.430 --> 01:01:38.860
you'll be okay on some movies,
but on more CPU-intensive movies,

01:01:38.940 --> 01:01:40.380
you'll have a problem.

01:01:40.380 --> 01:01:44.050
Some of the folklore is things like,
well, if the movie's not playing,

01:01:44.050 --> 01:01:45.480
then I don't need to task it.

01:01:45.600 --> 01:01:47.350
So I can see what the movie rate is.

01:01:47.350 --> 01:01:49.330
If it's zero, I don't need to task it.

01:01:49.350 --> 01:01:49.810
Wrong.

01:01:49.810 --> 01:01:50.940
Big time wrong.

01:01:51.080 --> 01:01:53.150
You saw a lot of movies
that Tim Monroe showed

01:01:53.150 --> 01:01:57.940
you that were not playing,
but there was a lot of stuff going on.

01:01:57.940 --> 01:02:00.740
You need to continue to task
QuickTime when the movie's playing.

01:02:00.740 --> 01:02:04.370
A lot of people think you need to task it
once per every frame in the video track.

01:02:04.370 --> 01:02:05.570
This is also incorrect.

01:02:05.570 --> 01:02:07.680
That's a little bit overkill in general.

01:02:07.680 --> 01:02:14.410
But QuickTime 6 helps you,
because there's got to be a better way.

01:02:16.030 --> 01:02:18.730
New in QuickTime 6,
we have an API that you

01:02:18.730 --> 01:02:22.510
can use to find out when
QuickTime needs to be tasked next.

01:02:22.520 --> 01:02:24.740
So you call it each time.

01:02:24.740 --> 01:02:27.430
If you're a WaitNext event-based app,
you call it every time before

01:02:27.430 --> 01:02:28.720
you call WaitNext event.

01:02:28.720 --> 01:02:31.320
You say, you know, how many ticks should
I pass to WaitNext event

01:02:31.320 --> 01:02:34.370
so that I'll wake up again,
pass a null event to QuickTime.

01:02:34.380 --> 01:02:36.740
If you're a
Carbon Event Loop timer-based app,

01:02:36.890 --> 01:02:40.550
you can call it to schedule a timer
that you use to task QuickTime.

01:02:40.560 --> 01:02:42.720
We have working sample code available.

01:02:42.720 --> 01:02:44.230
There will be a URL at
the end of the session.

01:02:45.920 --> 01:02:50.260
but again you shouldn't even have
to do this i mean this is this is

01:02:50.900 --> 01:02:52.560
You shouldn't have to do this.

01:02:52.750 --> 01:02:55.120
So on Mac OS X,
we have some higher level abstractions.

01:02:55.200 --> 01:02:57.460
For Cocoa, we have NSMovieView.

01:02:57.460 --> 01:02:58.980
Now, this got smarter with QuickTime 6.

01:02:59.030 --> 01:03:02.190
NSMovieView has handled the tasking
of QuickTime for you in the past.

01:03:02.190 --> 01:03:05.700
Now it knows about this new API,
it uses it,

01:03:05.940 --> 01:03:11.620
and you'll only use the CPU that you
need to play this particular movie.

01:03:11.620 --> 01:03:15.930
For Carbon,
we have a brand new thing in QuickTime 6

01:03:15.930 --> 01:03:17.200
called the Carbon Movie Control.

01:03:17.200 --> 01:03:17.200
This is really cool.

01:03:18.140 --> 01:03:21.060
It's a first-class Carbon control.

01:03:21.150 --> 01:03:21.930
Put it in a window.

01:03:22.010 --> 01:03:25.640
It'll manage the playback
manipulation of your QuickTime movies.

01:03:25.700 --> 01:03:29.150
It always creates a movie controller,
but of course that can be hidden.

01:03:29.270 --> 01:03:32.600
So you don't even need to deal with the
movie controller if you don't want to.

01:03:32.600 --> 01:03:35.560
Carbon movie control
will do that for you.

01:03:35.560 --> 01:03:40.660
It handles all the events,
mouse and keyboard events.

01:03:40.660 --> 01:03:43.310
It can participate in the
edit menu and in edit command

01:03:43.310 --> 01:03:43.310
handling if you want it to.

01:03:44.140 --> 01:03:46.370
And of course,
you can install event handlers as well

01:03:46.380 --> 01:03:50.650
to customize the behavior of the control.

01:03:52.130 --> 01:04:00.820
and Assuming you've created a window and
you've done a new movie from DataRef,

01:04:00.860 --> 01:04:02.010
and you've

01:04:02.560 --> 01:04:03.600
You say, create movie control.

01:04:03.600 --> 01:04:06.750
Pass it the window you want to put it in,
you pass it the movie

01:04:06.750 --> 01:04:10.080
you want it to control,
and it hands you back a Carbon control.

01:04:10.080 --> 01:04:13.270
You run your application event loop,
and that's it.

01:04:14.820 --> 01:04:16.710
Nothing further in your
app you need to do unless,

01:04:16.730 --> 01:04:18.320
of course,
you want to customize the behavior.

01:04:18.320 --> 01:04:19.840
We have working sample code.

01:04:19.900 --> 01:04:22.860
Check this out.

01:04:22.940 --> 01:04:24.370
Let's go to demo one.

01:04:36.300 --> 01:04:37.920
This app is a very simple app.

01:04:37.990 --> 01:04:39.240
It doesn't even have file open.

01:04:39.240 --> 01:04:42.360
When it comes up,
it brings up Nav Services,

01:04:42.390 --> 01:04:44.680
says what movie do you want to open.

01:04:46.700 --> 01:04:48.480
and others.

01:04:48.480 --> 01:04:53.680
We're going to stretch this window out.

01:04:53.680 --> 01:04:58.740
Like I said, it's not a very smart app.

01:04:58.740 --> 01:05:02.310
He just created a movie control,
a Carbon movie control,

01:05:02.310 --> 01:05:02.310
and started his app event loop.

01:05:02.310 --> 01:05:02.310
So you've got full-on playback.

01:05:02.310 --> 01:05:02.310
Jump around.

01:05:04.700 --> 01:05:05.430
to do.

01:05:05.430 --> 01:05:07.000
It's all there.

01:05:07.000 --> 01:05:12.880
Now that was fairly straightforward,
but let's see what happens.

01:05:12.880 --> 01:05:15.890
If you pass in,
I don't know if you noticed in

01:05:16.120 --> 01:05:20.050
the create movie controller call,
there was a flags where it

01:05:20.050 --> 01:05:21.520
was being passed in zero.

01:05:21.530 --> 01:05:24.040
Well,
if you pass in one flag that says "oh,

01:05:24.040 --> 01:05:29.430
and I want to edit too," that's the
only difference between these two apps,

01:05:29.430 --> 01:05:30.040
and you

01:05:31.900 --> 01:05:38.300
Same thing, but I have full-on editing.

01:05:38.320 --> 01:05:40.460
Hang on, let's just go here.

01:05:40.510 --> 01:05:42.900
We'll select this.

01:05:43.400 --> 01:05:57.900
[Transcript missing]

01:06:02.100 --> 01:06:03.500
No code in the app doing this.

01:06:03.500 --> 01:06:04.860
This is just a control in a window.

01:06:04.860 --> 01:06:06.710
The control is handling
all of that for you.

01:06:06.940 --> 01:06:11.500
Okay, back to slides.

01:06:17.800 --> 01:06:19.350
Now we're going to bring up Ian again.

01:06:19.350 --> 01:06:19.790
Sorry.

01:06:19.850 --> 01:06:22.800
Thank you, Greg.

01:06:22.800 --> 01:06:28.340
Greg wrote the tasking mechanism
we have in QuickTime 6,

01:06:28.340 --> 01:06:31.140
and it saved a lot of CPU usage.

01:06:31.140 --> 01:06:32.800
The QuickTime player uses it.

01:06:32.830 --> 01:06:37.130
Also, he mentioned in Cocoa,
we are committed in QuickTime to

01:06:37.130 --> 01:06:39.590
increasing the support in Cocoa.

01:06:39.620 --> 01:06:43.130
I'm wondering how many
people out here use Cocoa?

01:06:43.130 --> 01:06:44.350
Oh, very good.

01:06:44.350 --> 01:06:46.150
How many people are
planning on using Cocoa?

01:06:47.200 --> 01:06:54.040
Adrian Baerlocher, let's introduce him.

01:06:54.040 --> 01:06:58.070
He's an engineer on our team,
started about a year ago.

01:07:00.950 --> 01:07:02.600
He'll tell you about the
QuickTime Broadcaster

01:07:02.720 --> 01:07:03.860
that he's been working on.

01:07:03.860 --> 01:07:05.510
Good morning.

01:07:05.520 --> 01:07:11.380
So QuickTime Broadcaster is a
new application we're working

01:07:11.380 --> 01:07:15.740
on for broadcasting live events
using Mac OS X and a camera.

01:07:15.740 --> 01:07:20.640
It's a Cocoa application that
uses many components of QuickTime.

01:07:20.640 --> 01:07:24.560
And what we did is we wrote a
set of Objective-C classes that

01:07:24.560 --> 01:07:26.160
wrap many of these components.

01:07:26.160 --> 01:07:28.920
For example, the sequence grabbers,
standard compression,

01:07:28.920 --> 01:07:30.120
and the broadcast APIs.

01:07:30.900 --> 01:07:33.600
So let's get right into the demo.

01:07:33.600 --> 01:07:37.430
Could I demo one on both screens, please?

01:07:41.300 --> 01:07:47.250
Okay, so here we have the broadcaster
in its simplified view.

01:07:47.570 --> 01:07:51.500
In this view,
we hide most of the settings,

01:07:51.500 --> 01:07:51.500
and you just select

01:07:52.200 --> 01:07:54.930
A set of presets,
and we're going to provide some

01:07:55.050 --> 01:07:59.400
presets with this application,
settings that we think are really good.

01:07:59.440 --> 01:08:01.370
Presets are just a subset
of all the settings.

01:08:01.490 --> 01:08:05.760
So, for example, we have an audio, video,
and network presets.

01:08:05.760 --> 01:08:11.960
For those of you that want to do your
own presets or just change the settings,

01:08:11.970 --> 01:08:16.650
you can show details,
and then we have settings galore.

01:08:16.720 --> 01:08:18.690
We have all the standard
compressors supported by QuickTime.

01:08:18.840 --> 01:08:22.280
And same with the devices,
we're using the sequence grabbers,

01:08:22.280 --> 01:08:25.450
so those IIDC cameras you
learned about this morning,

01:08:25.450 --> 01:08:27.880
they'll work with this application.

01:08:29.130 --> 01:08:31.490
So let's try a broadcast.

01:08:31.490 --> 01:08:34.940
Could I have demo one on the
screen on my right and demo

01:08:34.940 --> 01:08:36.800
two on the screen on my left,
please?

01:08:41.960 --> 01:08:45.710
Okay, so let's start this one up.

01:08:45.790 --> 01:08:48.420
We have some interesting content.

01:09:05.700 --> 01:09:30.900
[Transcript missing]

01:09:43.880 --> 01:09:46.450
And if you want to try
this application out,

01:09:46.560 --> 01:09:49.460
it comes pre-installed
with Jaguar Server,

01:09:49.460 --> 01:09:52.900
which is on two of the CDs you
received here this week.

01:09:52.980 --> 01:09:54.560
Thanks.

01:09:54.560 --> 01:09:55.180
Back to you.

01:09:55.180 --> 01:09:57.180
Thank you, Adrian.

01:10:02.730 --> 01:10:04.460
The two weeks are almost up.

01:10:04.460 --> 01:10:05.200
My mind is uneasy.

01:10:05.200 --> 01:10:09.090
I desire a refreshing warm beverage.

01:10:12.100 --> 01:10:14.740
have brought you liquid
sustenance to quench your thirst.

01:10:14.740 --> 01:10:15.360
Thank you.

01:10:15.360 --> 01:10:16.000
Ah!

01:10:16.000 --> 01:10:18.540
This beverage is
scalding and caffeinated.

01:10:18.540 --> 01:10:19.560
I cannot drink it.

01:10:24.900 --> 01:10:45.900
[Transcript missing]

01:10:51.110 --> 01:10:52.140
Okay, don't leave yet.

01:10:52.140 --> 01:10:54.440
There's still more to come.

01:10:54.540 --> 01:10:57.300
Throughout the day,
we'll be doing QuickTime sessions

01:10:57.300 --> 01:10:58.740
and also on Friday.

01:10:58.740 --> 01:11:03.290
Those of you that want to develop
your own QuickTime components,

01:11:03.360 --> 01:11:06.780
we talked about the extensibility,
you could write your own

01:11:06.780 --> 01:11:08.900
media handlers or codex,
tons of codex.

01:11:09.000 --> 01:11:11.140
Please go to the session
on Friday at 9:00 a.m.

01:11:11.390 --> 01:11:13.940
Please stick around after lunch,
come back in this hall today.

01:11:13.940 --> 01:11:16.310
We have a lot more and even
more interesting things

01:11:16.390 --> 01:11:17.600
to show this afternoon.

01:11:17.720 --> 01:11:20.810
On Friday, there will also be a session
on QuickTime for the web.

01:11:20.810 --> 01:11:24.070
Let me point Thursday afternoon at
2:00 in the Civic Center for those of

01:11:24.070 --> 01:11:27.100
you that are dealing with streaming
issues and want to learn more about

01:11:27.100 --> 01:11:29.320
the new QuickTime streaming server,
please go there and of

01:11:29.320 --> 01:11:30.960
course our feedback session.

01:11:31.000 --> 01:11:34.200
And oh, Jeff Lowe,
you want to contact him with all your

01:11:34.200 --> 01:11:36.340
developer tech support questions.

01:11:36.460 --> 01:11:38.580
You'll see this slide often today.

01:11:38.580 --> 01:11:41.620
For more information,
we have the sample code out there.

01:11:41.620 --> 01:11:43.530
And please,
please take advantage of this.

01:11:43.600 --> 01:11:46.360
We're bringing the engineers
on site here to work with you.

01:11:46.440 --> 01:11:48.920
Come with your code, sit down with us,
have a chat,

01:11:48.920 --> 01:11:51.910
and let us write the stuff for you to
get it working inside your application.

01:11:51.920 --> 01:11:55.150
You won't get many
opportunities like this.

01:11:55.160 --> 01:11:55.890
So please do this.

01:11:55.920 --> 01:11:56.920
Oh.

01:11:56.920 --> 01:12:00.920
Can I stop?

01:12:00.920 --> 01:12:09.520
If you can take the babble from my hand,
it will be time for you to leave.

01:12:20.510 --> 01:12:22.140
What an unfortunate lot is mine.

01:12:22.140 --> 01:12:26.260
If only I had leveraged the power of
QuickTime's robust developer APIs,

01:12:26.260 --> 01:12:29.830
I might have pleased my master
and earned the right to go home

01:12:29.830 --> 01:12:32.800
and change out of this wretched,
smelly gee.

01:12:32.800 --> 01:12:36.770
Grasshopper,
if you can take the pebble from my hand,

01:12:36.770 --> 01:12:39.170
it will be time for you to leave.

01:12:39.280 --> 01:12:49.540
It is time for you to leave.

01:12:50.500 --> 01:12:51.440
Zang.