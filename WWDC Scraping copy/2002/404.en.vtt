WEBVTT

00:00:09.110 --> 00:00:10.600
Okay.

00:00:10.600 --> 00:00:11.200
Hi, everyone.

00:00:11.200 --> 00:00:13.310
So, end of the day Tuesday.

00:00:13.460 --> 00:00:15.530
How's everybody holding up?

00:00:19.190 --> 00:00:20.660
Glad to hear it.

00:00:20.790 --> 00:00:24.040
So, my name is Matt Drance.

00:00:24.090 --> 00:00:26.950
I'm a Java guy in developer tech support.

00:00:31.720 --> 00:00:35.070
So if you write in a
Java problem to DTS at Apple.com,

00:00:35.240 --> 00:00:36.840
there's a pretty good chance
you'll be talking to me.

00:00:36.860 --> 00:00:38.880
And after I'm done talking,
hopefully you'll think

00:00:38.880 --> 00:00:39.810
that's a good thing.

00:00:41.800 --> 00:00:45.550
So welcome to session 404,
Tailoring Java Applications for Mac OS X.

00:00:45.560 --> 00:00:47.940
And what are we going to
be talking about today?

00:00:54.810 --> 00:00:59.700
There's a couple things
we... There we go.

00:00:59.700 --> 00:01:03.690
A couple things we want to
talk about at 5:00 today.

00:01:03.920 --> 00:01:07.700
First thing, which is the goal of all of
our Java sessions this week,

00:01:07.820 --> 00:01:11.700
is to make your Java applications
first-class citizens on Mac OS X.

00:01:11.920 --> 00:01:15.660
Second thing would be to take
advantage of some features

00:01:15.760 --> 00:01:18.700
that are specific to Mac OS X,
only available here,

00:01:18.750 --> 00:01:21.320
but available to you through Java.

00:01:21.520 --> 00:01:24.200
And with those two things in mind,
because it's Java,

00:01:24.200 --> 00:01:27.190
we want you to still be able to maintain
your cross-platform compatibility while

00:01:27.650 --> 00:01:29.340
taking advantage of these special things.

00:01:30.970 --> 00:01:33.690
So specifically,
what are we going to be talking about?

00:01:33.950 --> 00:01:37.790
First thing I'm going to go over
is some general cross-platform

00:01:37.870 --> 00:01:40.200
development practices,
things you should be keeping in

00:01:40.460 --> 00:01:42.980
mind whether you're supporting
Mac or Windows or Linux or

00:01:43.780 --> 00:01:46.930
anywhere you want to deploy.

00:01:47.030 --> 00:01:51.760
Then I'm going to go over some
techniques for deployment on Mac OS X.

00:01:52.580 --> 00:01:54.500
And then we're going to go a
little deeper and more specific

00:01:54.500 --> 00:01:57.400
into enhancements and special
features that you can take

00:01:57.400 --> 00:01:58.630
advantage of on this platform.

00:02:00.480 --> 00:02:02.240
So if you've been to the
other Java sessions today,

00:02:02.240 --> 00:02:05.900
you've probably seen
this diagram up here.

00:02:05.900 --> 00:02:09.630
And what we're going to be focusing on
in this session is the desktop area,

00:02:09.630 --> 00:02:11.110
or the double-clickable applications.

00:02:13.470 --> 00:02:16.160
So, moving on to the
cross-platform practices.

00:02:16.160 --> 00:02:18.700
I'm going to jump right into code.

00:02:18.700 --> 00:02:21.560
We're not going to talk about features
or the future or anything like that.

00:02:21.560 --> 00:02:22.980
I'm going to talk about
things you can do right now.

00:02:23.020 --> 00:02:26.000
In particular,
I'm going to talk about menu shortcuts,

00:02:26.250 --> 00:02:28.810
contextual menus,
JDesktop pane and using multiple

00:02:28.810 --> 00:02:32.420
document interface-based GUIs,
and just things to keep in mind when

00:02:32.420 --> 00:02:36.920
you're placing your components or
generating or painting custom components.

00:02:37.220 --> 00:02:41.270
And I'm going to be using a do and don't
format for these tips because basically

00:02:41.370 --> 00:02:45.450
I've constructed this talk based on a
lot of developers who have come over to

00:02:45.450 --> 00:02:49.830
the Mac from Windows or another platform
with their Java applications and kind of

00:02:49.840 --> 00:02:52.230
seen things that have jumped out at me.

00:02:54.260 --> 00:02:55.510
So we're going to start
off with menu shortcuts.

00:02:55.580 --> 00:02:58.990
And for all of you who
are just out of curiosity,

00:02:59.000 --> 00:03:03.030
do we have anybody in here who's
actually a Java developer mainly

00:03:03.030 --> 00:03:06.900
on Windows and is coming over here
just kind of to explore the Mac?

00:03:06.900 --> 00:03:07.850
And excellent.

00:03:08.360 --> 00:03:08.530
Welcome.

00:03:08.590 --> 00:03:09.490
Glad to have you here.

00:03:11.770 --> 00:03:14.370
So as Java developers,
most of you probably realize

00:03:14.410 --> 00:03:18.690
that on different platforms,
keyboard shortcuts for

00:03:18.690 --> 00:03:20.390
menus use different keys.

00:03:21.870 --> 00:03:22.800
So why is that a problem for you?

00:03:22.800 --> 00:03:24.400
Well,
if you're writing one Java application

00:03:24.400 --> 00:03:28.030
that you want to run on multiple
platforms and you want it to

00:03:28.030 --> 00:03:32.100
behave the way a normal application
would on that host platform,

00:03:32.280 --> 00:03:34.400
you need to specify
the right shortcut key.

00:03:34.400 --> 00:03:38.090
On Windows you have control,
and on the Mac you use the

00:03:38.090 --> 00:03:40.720
Apple key or the command key.

00:03:40.720 --> 00:03:41.340
So how do you know?

00:03:41.450 --> 00:03:42.480
How do you know you're on a Mac?

00:03:42.490 --> 00:03:43.680
How do you know you're on Windows?

00:03:43.680 --> 00:03:45.520
How do you know which key to use?

00:03:45.570 --> 00:03:48.670
Well, the good thing is that
it doesn't really matter.

00:03:48.790 --> 00:03:52.290
Not a lot of people know about this,
but there's an abstracted call

00:03:52.330 --> 00:03:56.510
in the Java AWT Toolkit class
called GetMenuShortcutKeyMask.

00:03:56.610 --> 00:04:00.250
And what this does is basically
defers to the host platform's toolkit

00:04:00.410 --> 00:04:03.890
implementation and finds out what
the proper shortcut key should be.

00:04:04.030 --> 00:04:06.780
So you make this one call
in your Java application,

00:04:06.780 --> 00:04:11.080
and on Windows it'll return ControlMask,
on the Mac it'll return MetaMask,

00:04:11.080 --> 00:04:13.420
which is what evaluates the command.

00:04:14.180 --> 00:04:16.920
So this is great because this
is really Java at its best.

00:04:17.220 --> 00:04:20.720
Basically, you're saying,
I don't care what platform I'm on,

00:04:20.720 --> 00:04:22.300
I want this app to behave properly.

00:04:23.730 --> 00:04:25.440
And Java takes care of it for you.

00:04:25.570 --> 00:04:27.600
It's less work,
it's only one line of code,

00:04:27.600 --> 00:04:29.150
you don't have to figure out
which platform you're on,

00:04:29.150 --> 00:04:31.490
you don't have to figure
out what the right key is.

00:04:31.570 --> 00:04:33.140
It's more accurate.

00:04:33.270 --> 00:04:36.730
If for some reason,
Sun in Java 1.6 decides to either kill

00:04:36.860 --> 00:04:40.790
the meta mask or suddenly announce
support for the command key with a

00:04:40.930 --> 00:04:44.290
new mask and then we adapt to that
and you've been hard coding meta,

00:04:44.320 --> 00:04:45.640
you might be in some trouble.

00:04:45.950 --> 00:04:48.460
You won't be if you use this call.

00:04:48.460 --> 00:04:49.370
And like I said, it's portable.

00:04:49.370 --> 00:04:51.610
It'll work the right way on

00:04:53.240 --> 00:04:55.600
So the alternative to
using this would be,

00:04:55.600 --> 00:04:57.360
like I said,
hard coding the modifier key.

00:04:57.360 --> 00:04:58.630
I'm on Windows.

00:04:58.870 --> 00:05:02.200
Windows is the only place I'll ever be,
so I'm sending control

00:05:02.200 --> 00:05:03.120
for my menu shortcut.

00:05:03.120 --> 00:05:04.610
It's the same on the Mac, right?

00:05:04.620 --> 00:05:05.390
No, not really.

00:05:06.900 --> 00:05:10.930
So most people, when they come over,
they do their best to kind of

00:05:10.930 --> 00:05:13.240
detect what platform they're on.

00:05:13.240 --> 00:05:14.460
They set control if it's Windows.

00:05:14.460 --> 00:05:16.260
They set meta if it's Mac.

00:05:16.320 --> 00:05:18.730
And that does work,
but it's a little more extra work.

00:05:18.790 --> 00:05:21.070
And if you were working
from Windows initially,

00:05:21.070 --> 00:05:23.800
setting control,
you decide you want to come over to Mac,

00:05:23.800 --> 00:05:26.830
you've got to reopen your source
tree and include that condition

00:05:26.830 --> 00:05:28.860
everywhere you made a menu shortcut.

00:05:28.860 --> 00:05:30.540
If you did the toolkit
call in the first place,

00:05:30.540 --> 00:05:32.380
you don't ever have to
worry about that again.

00:05:32.860 --> 00:05:35.180
So I'm going to show you
a quick example of this.

00:05:35.180 --> 00:05:36.970
This is the code that you would use.

00:05:36.970 --> 00:05:39.760
It's only actually two lines,
but because I want you

00:05:39.760 --> 00:05:42.190
to be able to read it,
it wraps to about ten.

00:05:42.190 --> 00:05:44.730
Just create the J menu item,
set the accelerator,

00:05:44.860 --> 00:05:48.210
and normally just generate a keystroke,
but instead of explicitly

00:05:48.430 --> 00:05:51.690
saying control or meta,
you would just make the toolkit call.

00:05:51.700 --> 00:05:56.530
So with that, I'd like to move over
to the demo machine.

00:05:56.530 --> 00:06:00.650
And the screensaver went on,
even though I told it not to.

00:06:03.090 --> 00:06:04.590
So I've got a couple applications here.

00:06:04.600 --> 00:06:07.900
The first one's going to be
dealing with menu shortcuts.

00:06:07.900 --> 00:06:11.510
So I've written a very
simple text editor here,

00:06:11.580 --> 00:06:18.230
and I try to model it after the kind
of things I normally see on Windows.

00:06:18.230 --> 00:06:18.230
So,
I've got a couple of applications here.

00:06:24.930 --> 00:06:27.130
And it's got all your standard things.

00:06:27.140 --> 00:06:37.050
It's got boldface or maybe underline,
italic, etc., etc.

00:06:37.520 --> 00:06:40.510
But we go to the menus,
and this is what I like

00:06:40.510 --> 00:06:42.600
to call the carrot farm.

00:06:42.670 --> 00:06:44.390
When I come over,
a lot of times we work with

00:06:44.390 --> 00:06:47.580
some developers from Windows,
they bring their application over.

00:06:47.820 --> 00:06:52.620
Most of the time it looks and works fine,
comes up, but we see all these control

00:06:53.290 --> 00:06:55.090
icons all over the place.

00:06:55.150 --> 00:06:59.680
And what's the best yardstick
for Macintosh UI is the finder.

00:06:59.680 --> 00:07:02.300
You'll see that you may
never have noticed it,

00:07:02.300 --> 00:07:06.300
but every single menu shortcut on
the Macintosh is command based.

00:07:06.300 --> 00:07:10.920
It may have an additional mask,
but everything's using command

00:07:12.140 --> 00:07:14.940
So this is a perfect example of
what you could have avoided if you

00:07:14.940 --> 00:07:16.330
had been using the toolkit call.

00:07:16.340 --> 00:07:20.590
We can go back to the slides.

00:07:24.970 --> 00:07:26.540
Moving on to contextual menus.

00:07:26.680 --> 00:07:29.340
Contextual menus has another
sort of abstracted call

00:07:29.340 --> 00:07:33.890
similar to the toolkit mask,
which is mouseEvent.isPopupTrigger.

00:07:34.070 --> 00:07:38.150
Now this is another call that just
defers to the host OS to find out

00:07:38.250 --> 00:07:43.070
what kind of thing is supposed
to bring up a contextual menu.

00:07:43.920 --> 00:07:46.920
Now, that seems pretty simple,
but I've seen a lot of people do

00:07:46.930 --> 00:07:50.040
things like check on the mouse event
whether the control key is down,

00:07:50.040 --> 00:07:53.770
which is what triggers the
contextual menu on a Mac,

00:07:53.970 --> 00:07:54.800
control click.

00:07:54.920 --> 00:07:58.520
Or the button to mask, for example,
on Windows, right click brings down

00:07:58.570 --> 00:07:59.800
the contextual menu.

00:07:59.800 --> 00:08:03.040
You make the is pop-up trigger call,
similar to the control meta

00:08:03.040 --> 00:08:04.800
issue with the menu shortcuts.

00:08:04.800 --> 00:08:07.760
You make one call,
everything's taken care of,

00:08:07.880 --> 00:08:12.790
you don't have to worry about where you
are or what you're supposed to be doing.

00:08:12.790 --> 00:08:12.790
Now, there is one caveat.

00:08:13.380 --> 00:08:15.520
And that's when the pop-up
trigger is recognized.

00:08:15.610 --> 00:08:18.760
And this is something I've seen on
Java dev a couple times and hopefully

00:08:18.770 --> 00:08:20.280
this will put it to rest finally.

00:08:20.300 --> 00:08:24.560
There are two different
mouse event calls,

00:08:24.560 --> 00:08:26.640
mouse released and mouse pressed,
and there are two different

00:08:26.640 --> 00:08:30.300
areas where the pop-up trigger
is actually recognized,

00:08:30.300 --> 00:08:31.190
actually occurring.

00:08:31.300 --> 00:08:33.120
On Windows it occurs
on the mouse released,

00:08:33.120 --> 00:08:35.120
and on the Mac it occurs
on the mouse pressed.

00:08:35.300 --> 00:08:39.300
So in order to have these contextual
menus work on both platforms,

00:08:39.300 --> 00:08:42.880
you just want to basically
do your contextual menu

00:08:42.880 --> 00:08:45.300
logic in both of these calls.

00:08:45.330 --> 00:08:48.110
Here's a quick code example of that.

00:08:48.380 --> 00:08:50.260
As you can see,
I've got the logic down at the bottom.

00:08:50.260 --> 00:08:53.790
Well, it's kind of pseudo-code, but,
and I'm calling it both in mouse pressed

00:08:53.790 --> 00:08:55.730
and mouse released in my mouse listener.

00:08:55.740 --> 00:08:58.050
And there's no repercussions
to doing it in both places.

00:08:58.100 --> 00:08:59.730
The right platform will
call the right method.

00:08:59.730 --> 00:09:01.630
It's never going to get called
twice or anything like that.

00:09:04.290 --> 00:09:07.540
So now we're going to talk a little
bit about JDesktop panes and MDI,

00:09:07.540 --> 00:09:08.700
JInternalFrames.

00:09:08.700 --> 00:09:12.720
And if,
for those of you who are Mac users,

00:09:12.720 --> 00:09:17.310
you probably know that the
MDI layout is not too Mac-like.

00:09:17.310 --> 00:09:21.080
A lot of Mac users expect to see
things like a single container,

00:09:21.080 --> 00:09:24.960
something like Project Builder,
where there's a dynamic container

00:09:24.960 --> 00:09:29.110
that does manage multiple files,
but everything's in front of the user.

00:09:29.110 --> 00:09:32.420
Things aren't suddenly
disappearing off the screen.

00:09:32.940 --> 00:09:35.380
or, of course, just free-floating frames
all over the place.

00:09:37.750 --> 00:09:41.560
So, in the interest of being compatible
with the Mac look and feel,

00:09:41.560 --> 00:09:44.220
we would suggest that if you're
doing something like word

00:09:44.310 --> 00:09:48.330
processing or image editing,
that if you have multiple documents

00:09:48.370 --> 00:09:51.810
you need to keep open at the same time,
we suggest you either use multiple

00:09:52.190 --> 00:09:56.050
separate free-floating J-frames
or a single dynamic container,

00:09:56.050 --> 00:09:58.460
kind of like what J-Builder uses.

00:09:58.460 --> 00:10:01.590
You have one view panel that updates
based on the file you selected,

00:10:01.700 --> 00:10:03.970
or Project Builder does
a very similar thing.

00:10:04.020 --> 00:10:07.540
Or you could do something like
an application like LimeWire,

00:10:07.540 --> 00:10:08.540
which LimeWire does.

00:10:08.540 --> 00:10:10.040
And basically they have a
bunch of different panes

00:10:10.040 --> 00:10:14.280
that are separated by tabs,
but it's in one single parent container.

00:10:14.280 --> 00:10:20.920
And to show you what I'm talking about,
I'm going to do another quick demo.

00:10:28.190 --> 00:10:31.840
So what I did was I took the
logic from our text editor,

00:10:31.840 --> 00:10:35.520
this is going to be a common theme here,
and I put it into another application.

00:10:35.620 --> 00:10:37.820
Now, there's,
you'll see that there's just something

00:10:37.920 --> 00:10:41.660
about this app that doesn't seem right.

00:10:41.660 --> 00:10:41.660
And, you know, I'm going to go ahead

00:10:43.030 --> 00:10:46.040
Now, there are things here
like... This still works.

00:10:46.110 --> 00:10:47.860
It's still my...

00:10:51.150 --> 00:10:52.000
Still my text editor.

00:10:52.000 --> 00:10:57.960
I can still do things like bold
and italics and stuff like that.

00:10:58.320 --> 00:11:01.830
Then I start to move
things around a little bit,

00:11:01.830 --> 00:11:04.900
and all of a sudden my frame is gone.

00:11:04.900 --> 00:11:06.260
Now, you guys are all power users.

00:11:06.260 --> 00:11:07.300
You're all developers.

00:11:07.360 --> 00:11:10.220
This probably is no big thing to you.

00:11:10.290 --> 00:11:14.200
But a Mac user very possibly has
never experienced this before.

00:11:14.200 --> 00:11:17.910
And they might get pretty confused
that they're expected to be able to

00:11:17.910 --> 00:11:20.110
move their frame all over the desktop

00:11:20.700 --> 00:11:22.640
and they find it disappearing on them.

00:11:22.700 --> 00:11:25.330
Gets even more confusing if
we were to go over to Metal.

00:11:25.340 --> 00:11:27.740
I'm sorry, not Metal, Aqua.

00:11:29.350 --> 00:11:32.140
Now,
we're going to do something like this,

00:11:32.140 --> 00:11:33.860
and then I'm going to
bring up a finder window.

00:11:33.860 --> 00:11:36.300
These two windows look really similar.

00:11:36.300 --> 00:11:38.580
This one I can move all over the place,
this one I cannot.

00:11:38.580 --> 00:11:40.590
This one I can bring over into limbo.

00:11:40.730 --> 00:11:44.360
It gets even more interesting
when we minimize our windows.

00:11:44.360 --> 00:11:45.900
I'm going to bring my finder window down.

00:11:45.900 --> 00:11:47.670
It goes into the dock where I expect.

00:11:47.670 --> 00:11:50.860
Now I'm going to minimize this
window and work on some other ones.

00:11:51.330 --> 00:11:56.690
And now we have a magical new doc just
within the context of our application.

00:11:56.820 --> 00:12:00.460
And this is actually a great
feature because we have an

00:12:00.560 --> 00:12:03.140
aquified doc for JDesktop Paints.

00:12:03.140 --> 00:12:07.050
But in the interest of
making grand...grandmas

00:12:07.050 --> 00:12:11.100
not confused as possible,
this can get pretty freaky.

00:12:11.100 --> 00:12:15.330
This new doc of course moves
around with the parent frame and

00:12:15.330 --> 00:12:16.090
you either have a user who's very
confused and not sure which...what

00:12:16.390 --> 00:12:17.630
Windows is going to go where?

00:12:17.840 --> 00:12:21.480
Or they suddenly think that they can
move the dock around wherever they want.

00:12:23.030 --> 00:12:27.020
So in the best interest of
looking the best on all platforms,

00:12:27.200 --> 00:12:31.470
we'd suggest you stay away from the
JDesktop pane because it really only

00:12:31.470 --> 00:12:35.900
resembles that one platform that
most of the people in this conference

00:12:35.940 --> 00:12:38.380
probably are not the biggest fans of.

00:12:39.770 --> 00:12:43.940
Now the one thing about using
a JDesktop pane that I hear

00:12:43.940 --> 00:12:45.680
from a lot of people is that,
well,

00:12:45.680 --> 00:12:50.310
the thing the JDesktop pane lets them
do is use a single J menu bar to control

00:12:50.310 --> 00:12:53.090
all the frames that are in there,
or namely just the one

00:12:53.100 --> 00:12:57.170
that's in the front,
but that's good enough.

00:12:57.240 --> 00:12:59.630
I hear that,
and that'll be something we're going

00:12:59.640 --> 00:13:01.580
to be talking about in a few minutes.

00:13:02.620 --> 00:13:03.600
Demo's gone.

00:13:03.600 --> 00:13:07.480
So now the last thing I want to talk
about as far as compatibility is the

00:13:07.480 --> 00:13:13.540
specifics of moving things around,
placing components, sizing components,

00:13:13.640 --> 00:13:14.600
designing them.

00:13:15.210 --> 00:13:17.320
The thing you need to keep in mind,
especially with swing,

00:13:17.320 --> 00:13:19.320
is that not all look
and feels are the same.

00:13:19.320 --> 00:13:22.130
Metal is different from windows,
is different from motif,

00:13:22.130 --> 00:13:23.410
is different from Aqua.

00:13:25.470 --> 00:13:27.520
So one of the things that we really,
really think you should do,

00:13:27.520 --> 00:13:30.670
and this seems like a no-brainer,
but a lot of people don't do it,

00:13:30.730 --> 00:13:32.090
is use layout managers.

00:13:32.100 --> 00:13:36.600
Don't go to the trouble of
setting explicit XY coordinates

00:13:36.600 --> 00:13:38.750
for your components.

00:13:38.790 --> 00:13:41.900
Sometimes you would want to do that,
but you can run into a lot of trouble

00:13:41.900 --> 00:13:45.260
if you suddenly move over to another
platform that has another default

00:13:45.260 --> 00:13:48.470
look and feel that has different
button sizes and things like that.

00:13:48.520 --> 00:13:51.550
You'll suddenly find things
painting over each other,

00:13:51.550 --> 00:13:54.940
overlapping, ending up in places
that you didn't expect.

00:13:54.980 --> 00:13:57.740
If you use a layout manager,
things might change as you

00:13:57.880 --> 00:14:01.520
move across look and feels,
but it will still at least conform to

00:14:01.640 --> 00:14:05.100
the same general layout that you set,
because you're using a layout

00:14:05.100 --> 00:14:06.350
manager and you know how it behaves.

00:14:06.420 --> 00:14:10.190
And we also would suggest that
you didn't use your own colors or

00:14:10.190 --> 00:14:14.500
fonts or shapes or anything like
that for your custom components.

00:14:14.500 --> 00:14:17.490
We would suggest that you query
the UI manager and find out what

00:14:17.490 --> 00:14:20.180
the color for a button should be,
what the font should be

00:14:20.180 --> 00:14:22.550
for the look and feel,
and things like that.

00:14:23.960 --> 00:14:27.000
Perfect example of this is,
I don't have a demo for it,

00:14:27.000 --> 00:14:29.790
but we were at Java 1
a couple months ago,

00:14:29.870 --> 00:14:32.580
and we had a Java compatibility lab,
much like the one we have

00:14:32.790 --> 00:14:33.940
in Room M downstairs.

00:14:34.000 --> 00:14:36.720
Feel free to say hello.

00:14:37.060 --> 00:14:40.820
And we had a guy who came over,
I can't remember what developer,

00:14:40.850 --> 00:14:42.590
I can't remember what company
the developer was from,

00:14:42.590 --> 00:14:45.620
but he had a bunch of applets that he was
used to running in Windows and Solaris.

00:14:45.620 --> 00:14:47.390
He wanted to come over
and try them on Mac OS X.

00:14:47.400 --> 00:14:50.310
They came up pretty well and
they worked and everything.

00:14:50.310 --> 00:14:53.170
But he had basically a
tabbed pane interface.

00:14:53.240 --> 00:14:54.760
He had two tabs.

00:14:54.870 --> 00:14:59.900
And in Metal and Motif and Windows,
the tabs can start from the left,

00:15:00.160 --> 00:15:03.040
all the way on the left of the pane,
and they move to the right.

00:15:03.430 --> 00:15:03.840
That's fine.

00:15:03.850 --> 00:15:06.210
On Aqua, they're centered,
as some of you may or

00:15:06.210 --> 00:15:07.650
may not have noticed.

00:15:08.330 --> 00:15:11.660
Tabs in Aqua are centered,
and even as you add one of them,

00:15:11.660 --> 00:15:13.380
you can have one and you can have six.

00:15:13.380 --> 00:15:15.490
They just all start to
spread out from the middle.

00:15:15.490 --> 00:15:18.170
And this, to most people,
would never be a problem,

00:15:18.170 --> 00:15:21.580
but for him it was because he was
painting either a label or a specific

00:15:21.610 --> 00:15:25.240
button right in the center of the
real estate where the tabs should be.

00:15:25.240 --> 00:15:29.130
Now, it was fine for him on Metal and
Windows and Motif because he knew

00:15:29.130 --> 00:15:33.050
his two tabs would be on the left
and he knew how big the tabs were.

00:15:33.460 --> 00:15:36.960
So he just did some math and he just
plopped that label right in there.

00:15:36.960 --> 00:15:41.000
So he came over to
Mac OS X and his label's gone.

00:15:41.000 --> 00:15:44.670
And he was actually pretty irate.

00:15:45.340 --> 00:15:47.000
He thought that we did something bad.

00:15:47.000 --> 00:15:47.960
He thought we broke Java.

00:15:47.960 --> 00:15:49.820
He was going to tell Sun on us.

00:15:49.940 --> 00:15:54.860
And I guess I can understand
him being frustrated,

00:15:54.910 --> 00:15:57.640
but the fact is that look
and feels are different.

00:15:57.660 --> 00:16:01.500
And that Sun has no specification
saying where tabs should be.

00:16:01.600 --> 00:16:04.910
And if some other company comes out
with a third-party look and feel that

00:16:04.910 --> 00:16:08.690
some power user decides to set for their
default on Mac OS X or Linux or whatever,

00:16:08.760 --> 00:16:11.320
you might have a heck of a time
running into things like that.

00:16:11.480 --> 00:16:13.510
So really,
you should really use layout managers,

00:16:13.590 --> 00:16:14.810
and you can avoid problems like this.

00:16:16.910 --> 00:16:19.340
So that's about it for the
compatibility practices.

00:16:19.340 --> 00:16:21.480
I'm going to move on to
application deployment,

00:16:21.570 --> 00:16:26.090
things you can do to drop your
applications on a Mac OS X computer.

00:16:26.180 --> 00:16:29.840
And the most obvious, of course,
is the double clickable application,

00:16:29.840 --> 00:16:30.540
the dot app bundle.

00:16:30.540 --> 00:16:34.540
If you're working in Project Builder,
you've already got this.

00:16:34.600 --> 00:16:37.530
You may not even know it,
but you click build and

00:16:37.530 --> 00:16:39.130
run in Project Builder.

00:16:39.130 --> 00:16:39.690
You're

00:16:40.220 --> 00:16:41.760
Java files are compiled.

00:16:41.760 --> 00:16:45.400
You get a JAR file built,
and that's thrown into a .app bundle,

00:16:45.470 --> 00:16:46.540
double-clickable by the user.

00:16:46.540 --> 00:16:49.390
You can pull it out of the build
directory and put it in an installer,

00:16:49.390 --> 00:16:50.480
and you're ready to go.

00:16:50.670 --> 00:16:53.960
If you're developing
using some other IDE,

00:16:53.960 --> 00:16:56.770
developing on another platform,
and you want to, you know,

00:16:57.020 --> 00:16:59.680
have an application that's
as Mac-like as possible,

00:16:59.680 --> 00:17:03.070
we have something called MRJ App Builder
that comes with our developer tools.

00:17:03.680 --> 00:17:06.950
And you can drag your JAR files
right into MRJ App Builder,

00:17:06.950 --> 00:17:09.430
automatically adds them
to your class path,

00:17:09.610 --> 00:17:13.150
it generates an Info.plist for
your runtime properties,

00:17:13.180 --> 00:17:15.820
and you click build application,
and there you go,

00:17:15.940 --> 00:17:17.490
you have your .app bundle.

00:17:17.500 --> 00:17:19.950
And for those of you who
feel particularly tough,

00:17:20.210 --> 00:17:22.550
you can go ahead and build
your .app on your own,

00:17:22.550 --> 00:17:24.760
because after all, it is just a folder.

00:17:24.760 --> 00:17:29.700
And we have a bunch of bundle services
documentation on the developer website,

00:17:29.760 --> 00:17:32.850
which is under techpubs, macos10,
and from there you

00:17:32.850 --> 00:17:33.500
click on documentation.

00:17:33.680 --> 00:17:35.180
documentation essentials.

00:17:35.300 --> 00:17:37.820
You can find out a lot
about how the bundles work.

00:17:38.250 --> 00:17:39.530
And of course, there's Java Web Start.

00:17:39.690 --> 00:17:43.360
If you were coming from the
Java in the browser session,

00:17:43.360 --> 00:17:46.670
I don't want to talk too much about it,
but there is a particularly cool

00:17:46.780 --> 00:17:49.920
new feature that's coming out,
which of course is the

00:17:49.950 --> 00:17:52.100
desktop install on Web Start.

00:17:52.100 --> 00:17:54.640
Once the user has
downloaded an application,

00:17:54.650 --> 00:17:57.440
they can optionally have it
installed down on the desktop

00:17:57.560 --> 00:17:58.960
as a double clickable app.

00:17:59.010 --> 00:18:03.350
And that's why you see Web Start kind
of creeping into the double clickable

00:18:03.410 --> 00:18:07.060
applications area in that diagram
I showed you in the beginning.

00:18:07.970 --> 00:18:11.330
And as a last resort,
we have the double-clickable JAR.

00:18:11.570 --> 00:18:16.220
If your JAR file has a legitimate
manifest that specifies a main class,

00:18:16.350 --> 00:18:18.270
the user can just double-click
it in Finder and your

00:18:18.290 --> 00:18:19.660
application will come up fine.

00:18:22.670 --> 00:18:25.040
So when you're installing on Mac OS X,
there are some directories that you

00:18:25.140 --> 00:18:26.550
probably want to or need to know about.

00:18:26.550 --> 00:18:29.950
The first, of course,
is the magical Java home.

00:18:30.520 --> 00:18:33.960
This is something that a lot
of Windows Solaris script-based

00:18:34.040 --> 00:18:37.620
installers need to find out when
they're building their startup script.

00:18:37.620 --> 00:18:42.110
And because we know where
Java is on every Mac OS X system,

00:18:42.110 --> 00:18:44.320
because we're the ones who install it,
you can count on that

00:18:44.320 --> 00:18:48.070
Java home being library,
slash library, slash Java, slash home.

00:18:48.580 --> 00:18:51.540
As far as extension libraries
that you may want to install,

00:18:51.540 --> 00:18:54.250
you can likewise put
those into slash library,

00:18:54.280 --> 00:18:56.300
slash Java, slash extensions.

00:18:56.300 --> 00:18:59.960
And this is going to be the
functional equivalent of what would

00:18:59.960 --> 00:19:03.710
be libxed off of the Java home
directory on other platforms.

00:19:03.710 --> 00:19:05.380
But we would encourage
you to use this one.

00:19:05.470 --> 00:19:06.870
I'll get to that in the next slide.

00:19:07.060 --> 00:19:10.210
And you can also do Java extension
installation on a user level,

00:19:10.210 --> 00:19:13.580
which is basically the same path,
but it's off of the user's home,

00:19:13.640 --> 00:19:16.210
as opposed to the system level,
the system root,

00:19:16.210 --> 00:19:18.550
which would be available to all users.

00:19:18.580 --> 00:19:19.580
Thank you.

00:19:21.080 --> 00:19:23.900
So you should really take note of
these directories if you didn't

00:19:23.900 --> 00:19:26.900
know them before and you're
looking to install on Mac OS X,

00:19:27.050 --> 00:19:30.710
especially the extensions directories,
because the basic idea is that these are

00:19:30.710 --> 00:19:35.590
part of the boot class path and they will
be included as third-party libraries.

00:19:35.830 --> 00:19:39.540
The reason you should really remember
them is because if you went to the old

00:19:39.540 --> 00:19:44.050
Windows habits or the Sun JDK habits
and installed things in libx,

00:19:44.050 --> 00:19:47.200
you might run,
you will run into problems when we

00:19:47.200 --> 00:19:50.980
update the Java VM through software
update because basically we have

00:19:50.980 --> 00:19:54.270
a versioning system with multiple
directories and we move up and we

00:19:54.340 --> 00:19:58.320
basically will install a new Java root.

00:19:58.460 --> 00:20:01.590
That will leave your old directories
and your old libx directory behind.

00:20:01.710 --> 00:20:04.150
So you want to use,
the library Java extensions, however,

00:20:04.150 --> 00:20:06.160
will be properly updated
to the new version.

00:20:06.320 --> 00:20:08.350
So you want to use the above
directory and not libx.

00:20:08.350 --> 00:20:11.600
Basically you don't want to put
anything into or below Java home.

00:20:11.810 --> 00:20:14.730
But you can count on it as a
symbolic link to get to your

00:20:14.730 --> 00:20:17.590
Java and Java C executables.

00:20:19.300 --> 00:20:23.120
So now I want to talk about
your basic runtime properties,

00:20:23.120 --> 00:20:26.610
the things you would set and get
using system get property later on.

00:20:26.620 --> 00:20:31.560
On most platforms,
you would specify those at the command

00:20:31.560 --> 00:20:33.750
line using dash D or anything like that,
and of course you can

00:20:33.750 --> 00:20:35.760
do that on Mac OS X too,
because we have the terminal.

00:20:35.760 --> 00:20:39.720
Now on double clickable applications,
you can also specify these

00:20:39.870 --> 00:20:42.250
properties in the Info.plist file.

00:20:42.250 --> 00:20:45.700
Info.plist, for those of you who have
never dug around in it,

00:20:45.780 --> 00:20:50.520
it's a hierarchical XML based properties
file based on small dictionary tags,

00:20:50.530 --> 00:20:53.060
and there's a Java dictionary,
and then a property

00:20:53.060 --> 00:20:54.850
sub-dictionary of that,
and that's where you would

00:20:54.860 --> 00:20:55.920
include your runtime properties.

00:20:58.540 --> 00:21:02.860
So what I'm going to show you
right now is how you would go about

00:21:03.590 --> 00:21:05.980
setting those in Project Builder.

00:21:05.980 --> 00:21:07.680
This is another question
that comes up a lot.

00:21:07.870 --> 00:21:10.980
A lot of people have been building their
applications and manually going into the

00:21:11.030 --> 00:21:16.190
bundle and editing their Info.plist file,
and I promise you don't have to do that.

00:21:17.730 --> 00:21:21.410
So this is just a quick variation
of the Hello World project that

00:21:21.490 --> 00:21:24.860
comes up when you start a new
swing project in Project Builder.

00:21:24.940 --> 00:21:27.000
I'm going to run it right now.

00:21:27.580 --> 00:21:30.220
And bear with me here,
this isn't a very real world example,

00:21:30.220 --> 00:21:32.740
but just want to be quick.

00:21:35.040 --> 00:21:35.950
Now it says hello world.

00:21:36.040 --> 00:21:39.150
Anybody who's used Project Builder
has seen this application before.

00:21:39.150 --> 00:21:42.570
But what's happening is this,
this string is being pulled from a

00:21:42.570 --> 00:21:49.240
system property that I'm setting using
a runtime property in the application.

00:21:49.360 --> 00:21:52.270
And if I want to change this text,
I'm going to have to do a

00:21:53.170 --> 00:21:54.740
Basically,
we're going to go into Project Builder,

00:21:54.740 --> 00:21:58.060
go to the Project menu, go down to Edit,
Active Target.

00:21:58.180 --> 00:22:02.170
I'm going to click the
Application Settings tag,

00:22:02.200 --> 00:22:04.100
go to Expert, and

00:22:04.960 --> 00:22:07.510
These are all our info P list properties.

00:22:07.550 --> 00:22:08.890
This is our Java dictionary.

00:22:08.900 --> 00:22:10.340
I'm going to open that.

00:22:10.480 --> 00:22:11.710
There's properties.

00:22:11.710 --> 00:22:12.520
Go down there.

00:22:12.610 --> 00:22:14.220
I see a couple properties here.

00:22:14.530 --> 00:22:18.640
And here's the property that I put in,
the WWDC.hello message.

00:22:18.690 --> 00:22:21.460
And we're just going to change this.

00:22:21.460 --> 00:22:22.850
Say hello WWDC.

00:22:22.890 --> 00:22:24.990
I didn't change any code.

00:22:25.030 --> 00:22:29.210
This normally would be a dash
D property on the command

00:22:30.140 --> 00:22:32.150
And there, our text is different.

00:22:32.360 --> 00:22:36.460
So for those of you who didn't think
that could be done using Project Builder,

00:22:36.460 --> 00:22:39.870
who are opening up your
Info.plist and bbedit,

00:22:40.000 --> 00:22:42.180
your days of woe are over.

00:22:42.450 --> 00:22:46.090
Okay, back to the slides.

00:22:49.280 --> 00:22:51.620
So now we're going to start talking
about the Mac OS X specifics.

00:22:51.620 --> 00:22:57.240
Things like, very important,
detecting a Macintosh client,

00:22:57.240 --> 00:22:59.640
or more specifically something that's
using Aqua as its look and feel.

00:22:59.640 --> 00:23:01.980
There are some things,
I tried my best to give you

00:23:01.980 --> 00:23:04.880
things that would work on both
platforms as well as possible,

00:23:04.990 --> 00:23:08.540
but there are some times when you're
going to need to find out what platform

00:23:08.540 --> 00:23:10.690
you're on and do one thing or another.

00:23:10.730 --> 00:23:13.800
And we'll tell you what
the best way to do that is.

00:23:14.580 --> 00:23:16.780
I'm going to talk about taking
advantage of Aqua in general as a

00:23:16.790 --> 00:23:18.040
look and feel for your swing apps.

00:23:18.040 --> 00:23:22.370
I'm going to talk about some Mac-specific
runtime properties that we specified

00:23:22.510 --> 00:23:24.510
just earlier in Project Builder.

00:23:24.560 --> 00:23:27.390
I'm going to talk about the application
menu and the MRJ handler interfaces

00:23:27.480 --> 00:23:29.130
we provide to take advantage of those.

00:23:29.170 --> 00:23:33.500
And some of the Mac OS X native services
that are available to you through Java.

00:23:34.980 --> 00:23:36.490
So how do we find out if
we're running on a Mac?

00:23:36.550 --> 00:23:41.060
A lot of people typically know
about the OS.name property,

00:23:41.060 --> 00:23:43.460
which is a standard Java property
on all virtual machines.

00:23:43.460 --> 00:23:46.390
And usually people just get that,
they get the string back,

00:23:46.390 --> 00:23:50.020
and then they parse it for Mac or Win,
and they find out what they're on.

00:23:50.150 --> 00:23:51.600
And, you know, it typically works.

00:23:51.690 --> 00:23:55.160
And it's probably safe to,
because we're probably not going to

00:23:55.160 --> 00:23:57.510
take the Mac out of Mac OS anytime soon.

00:23:58.860 --> 00:24:03.340
But it is a little,
it is a little potentially unreliable

00:24:03.390 --> 00:24:07.920
because you're doing string parsing.

00:24:07.920 --> 00:24:07.920
A better way to do it is to use
a string that's not on the Mac.

00:24:08.120 --> 00:24:10.420
would be to simply get
the MRJ version property.

00:24:10.420 --> 00:24:11.470
And what is this property?

00:24:11.500 --> 00:24:13.470
This is something that we
set when we launched Java.

00:24:15.020 --> 00:24:16.620
And it evaluates to a number, of course.

00:24:16.660 --> 00:24:18.940
And the number's not really important.

00:24:18.940 --> 00:24:20.720
What's important is that
the number is there.

00:24:20.760 --> 00:24:24.580
This is a property that's only set
through the system on Mac OS X.

00:24:24.580 --> 00:24:27.820
If you're on Windows and you
make a request for this property,

00:24:27.820 --> 00:24:29.280
you get null.

00:24:29.280 --> 00:24:30.500
And that's how you know
you're not on a Mac.

00:24:30.560 --> 00:24:31.650
If it's not null, you are.

00:24:31.660 --> 00:24:35.080
And the other good thing about this
is that it's available to applets.

00:24:35.180 --> 00:24:41.000
We've modified the security settings for
property access to applets in the sandbox

00:24:41.000 --> 00:24:43.630
so that you can check this version,
because there are a lot of people

00:24:43.630 --> 00:24:47.020
who are doing applet stuff,
and they do different things on Windows,

00:24:47.020 --> 00:24:47.940
different things on Mac.

00:24:48.000 --> 00:24:51.300
So this is our way of making it
easier for you to come to the

00:24:51.360 --> 00:24:54.580
Macintosh if you didn't have a
signature or a certificate before.

00:24:56.780 --> 00:24:59.160
And to go a step further,
if there's something that you want

00:24:59.160 --> 00:25:03.100
to specifically do if you're using
Aqua as opposed to just being on a Mac.

00:25:04.800 --> 00:25:05.980
You don't need to know the class name.

00:25:05.980 --> 00:25:09.740
You don't need to know the fully
qualified package and class that

00:25:09.740 --> 00:25:11.040
we use for our look and feel.

00:25:11.040 --> 00:25:13.360
All you need to do is
query the UI manager.

00:25:13.360 --> 00:25:16.180
Once you've determined you're on a Mac,
query the UI manager for the

00:25:16.180 --> 00:25:17.580
system look and feel class name.

00:25:17.580 --> 00:25:21.040
You'll get the fully qualified class
name for the Aqua look and feel.

00:25:21.040 --> 00:25:24.090
And then you can just compare that
to the look and feel that's currently

00:25:24.090 --> 00:25:26.360
running using UIManager.getLookAndFeel.

00:25:26.360 --> 00:25:28.350
So you combine these two things.

00:25:28.440 --> 00:25:32.410
If MRJ version is not equal to null,
if get system look and feel class

00:25:32.500 --> 00:25:35.250
name is equal to look and feel,
that means you're on a

00:25:35.250 --> 00:25:37.210
Macintosh and you're using Aqua.

00:25:40.130 --> 00:25:42.230
So let's talk about Aqua.

00:25:42.270 --> 00:25:44.880
As most of you probably know,
Aqua on Mac OS X is absolutely free.

00:25:44.880 --> 00:25:47.090
It's the default look and
feel for swing applications.

00:25:47.090 --> 00:25:49.300
If you're using AWT,
which is heavyweight,

00:25:49.300 --> 00:25:52.540
obviously you're going to be pulling
out of the Aqua native resources.

00:25:52.590 --> 00:25:55.410
You get things like the
animated default button,

00:25:55.740 --> 00:25:58.380
translucent menus, G&E effect, etc., etc.

00:26:00.500 --> 00:26:02.520
And one of the other things
that comes with using Aqua is

00:26:02.520 --> 00:26:06.340
there's actually a very,
very interesting document called

00:26:06.470 --> 00:26:09.380
the Aqua Human Interface Guidelines,
which is usually intended for

00:26:09.380 --> 00:26:10.870
people writing Carbon and CoCoLapse.

00:26:12.500 --> 00:26:15.200
And we've abstracted most
of these things for you when

00:26:15.200 --> 00:26:17.510
you're using Layout Managers.

00:26:18.920 --> 00:26:21.880
But it's actually a very good read,
especially if for some reason

00:26:21.880 --> 00:26:24.460
you want to be a Mac programmer
and you're not interested in,

00:26:24.460 --> 00:26:26.130
you know,
you're not interested in necessarily

00:26:26.250 --> 00:26:30.440
portability and the only language
you know is Java and you want to

00:26:30.450 --> 00:26:33.190
make a real kick-ass Mac application.

00:26:33.370 --> 00:26:36.240
You can go ahead and read this
document and find out a lot of

00:26:36.240 --> 00:26:39.950
really subtle things about control
placement and sizing and stuff like

00:26:39.950 --> 00:26:41.730
that that you may not have known.

00:26:41.740 --> 00:26:43.330
So what's an example of this?

00:26:43.330 --> 00:26:46.480
An example of the guidelines,
they state that scroll bars in

00:26:46.680 --> 00:26:49.900
Aqua should always be visible
regardless of what's happening.

00:26:49.900 --> 00:26:53.020
If you have a window that might
at some point show a scroll bar,

00:26:53.090 --> 00:26:56.000
you should show it from the
very beginning and obviously

00:26:56.000 --> 00:26:57.730
show it as initially disabled.

00:26:57.730 --> 00:27:00.060
And the reason for this
is that Java doesn't,

00:27:00.060 --> 00:27:03.250
Java swing doesn't
normally have a scroll bar.

00:27:03.300 --> 00:27:03.960
It doesn't have this behavior.

00:27:03.960 --> 00:27:08.980
If you have a J scroll pane and,
for example, in a text editor,

00:27:08.980 --> 00:27:11.620
you won't see the scroll bar until
you start to run off the bottom.

00:27:11.620 --> 00:27:14.150
And then the scroll bar will
suddenly appear and it'll actually

00:27:14.150 --> 00:27:16.570
shift the content in because
it needs to take up some more real

00:27:16.570 --> 00:27:18.300
estate to create that scroll bar.

00:27:19.660 --> 00:27:22.290
So if you automatically set
the JScrollPane policy to

00:27:22.310 --> 00:27:25.070
always show the scroll bar,
you won't have that kind of

00:27:25.070 --> 00:27:28.450
graphical jump that occurs when
the scroll bar suddenly appears.

00:27:28.570 --> 00:27:32.360
And that's mainly the reason that the
HI guidelines specify that for Aqua.

00:27:32.360 --> 00:27:33.920
And how do you do that in Java?

00:27:33.920 --> 00:27:34.870
It's really easy.

00:27:34.960 --> 00:27:38.060
Here we started our JScrollPane
and there's two quick lines,

00:27:38.060 --> 00:27:41.550
set vertical scroll bar policy,
set horizontal scroll bar policy.

00:27:41.700 --> 00:27:43.000
Set those to always be on.

00:27:43.030 --> 00:27:45.880
Now believe it or not,
there are some Mac users who really

00:27:45.880 --> 00:27:47.810
pay attention to this kind of stuff.

00:27:47.810 --> 00:27:53.390
And if you get flamed,
Don't say I didn't tell you.

00:27:54.140 --> 00:27:56.440
But the other advantage of
this is this is a very low,

00:27:56.490 --> 00:28:00.670
you know, it's a low risk,
low maintenance thing that you can

00:28:00.670 --> 00:28:04.000
do to really just kind of make the,
make your Java app look as much

00:28:04.000 --> 00:28:06.000
like a native Mac app as possible.

00:28:06.000 --> 00:28:09.990
And people on Windows probably wouldn't
notice that you did or didn't do this.

00:28:10.590 --> 00:28:13.490
So let's talk about some of
the specific runtime properties

00:28:14.030 --> 00:28:15.140
that are here on Mac OS X.

00:28:16.870 --> 00:28:20.880
We've got, of course,
properties for file dialogs to

00:28:20.880 --> 00:28:23.130
handle package and app bundles.

00:28:23.610 --> 00:28:24.910
Now, normally those are folders.

00:28:24.930 --> 00:28:27.410
So Java needs to know
what to do with those.

00:28:27.410 --> 00:28:30.380
Should they be treated as folders
that you can navigate into,

00:28:30.470 --> 00:28:32.860
or should they be treated
as selectable files?

00:28:33.760 --> 00:28:38.980
Now, we also have similar properties for
the swing version of file dialog,

00:28:38.980 --> 00:28:39.910
JFileChooser.

00:28:40.120 --> 00:28:43.700
Those aren't runtime properties
that you would put in InfoPlist.

00:28:43.700 --> 00:28:48.090
Those are properties that you would
put on a per instance basis using Java.

00:28:49.420 --> 00:28:50.560
That would be the demo machine.

00:28:50.560 --> 00:28:52.780
Can we get the slides back?

00:28:52.850 --> 00:28:54.020
Thank you.

00:28:57.760 --> 00:28:59.700
Where was I?

00:28:59.700 --> 00:29:03.590
Yeah,
you set the J file chooser properties

00:29:03.770 --> 00:29:08.690
using the put client property method
that's available to all swing classes.

00:29:08.720 --> 00:29:11.750
Now, I'm mentioning both,
but we usually suggest people

00:29:11.750 --> 00:29:14.440
use the AWT file dialog,
and that's just basically

00:29:14.820 --> 00:29:18.520
because it's a native link,
it uses the navigation services dialog,

00:29:18.520 --> 00:29:20.650
you get the nice column navigation.

00:29:20.760 --> 00:29:25.960
J file chooser is completely abstracted,
so it just uses a generic tree navigation

00:29:25.960 --> 00:29:27.680
UI that's available to all swing classes.

00:29:27.700 --> 00:29:30.970
that's not really familiar to the Mac.

00:29:33.050 --> 00:29:36.620
There's also the small tabs property,
which a lot of people make use of.

00:29:36.670 --> 00:29:39.900
I'm mentioning this because tabs
on Aqua are definitely bigger

00:29:39.900 --> 00:29:41.990
than they are on other platforms.

00:29:42.240 --> 00:29:44.500
So a lot of people like to use
this property to kind of have

00:29:44.500 --> 00:29:47.430
their UI be a little more in
sync with the way it looks on,

00:29:47.430 --> 00:29:49.900
in the metal looking field or on Windows.

00:29:49.900 --> 00:29:54.450
And the other reason that we did
it is because the HI guidelines

00:29:54.450 --> 00:29:59.300
specify that you should have
two different tab sizes in Aqua.

00:30:00.800 --> 00:30:05.580
We also have switches for anti-aliasing
of graphics and text using

00:30:05.690 --> 00:30:07.800
Quartz and hardware acceleration.

00:30:07.800 --> 00:30:12.510
If you went to Gerard's session,
I believe, this morning,

00:30:12.510 --> 00:30:16.110
he could tell you about a lot of the
new things that we're doing with that.

00:30:16.420 --> 00:30:18.350
and there's,
this is just the tip of the iceberg.

00:30:18.400 --> 00:30:21.130
There are a lot of Mac specific
properties in Mac OS X and I would

00:30:21.620 --> 00:30:22.990
encourage you to go to the web.

00:30:23.310 --> 00:30:25.640
I'll have a link to this tech
note later but the tech note

00:30:25.640 --> 00:30:27.270
is number two oh three one.

00:30:27.920 --> 00:30:29.300
So, what's the big one?

00:30:29.300 --> 00:30:32.390
What's the big Mac property
that everybody likes to use?

00:30:32.480 --> 00:30:35.240
It, of course,
would be the screen menu bar.

00:30:35.320 --> 00:30:36.000
And what's the problem here?

00:30:36.000 --> 00:30:40.890
The problem is that swing J menus,
swing J menu bars are associated

00:30:41.300 --> 00:30:42.830
with a specific J frame.

00:30:42.870 --> 00:30:44.730
They appear inside the frame.

00:30:44.730 --> 00:30:46.340
And that's not very Mac-like at all.

00:30:46.340 --> 00:30:48.680
Every Mac application has
always had the J menu,

00:30:48.680 --> 00:30:51.100
has had its menu bar at
the top of the screen.

00:30:51.230 --> 00:30:54.540
So we've inserted a runtime property
that will very simply let you do that.

00:30:54.540 --> 00:30:56.260
You don't have to do any different code.

00:30:56.260 --> 00:30:58.990
You call sit J menu bar and we
put it up at the top of the screen

00:30:59.050 --> 00:31:00.430
where we like to say it belongs.

00:31:02.210 --> 00:31:04.310
So what are the potential
problems with this?

00:31:04.580 --> 00:31:11.000
Well, if you take my advice from a few
slides back where I suggested

00:31:11.000 --> 00:31:13.360
you use multiple J frames,

00:31:13.750 --> 00:31:16.630
You have the issue of, yes,
we bring it to the top,

00:31:16.980 --> 00:31:19.810
but every menu bar is still
tied to a single frame.

00:31:19.810 --> 00:31:22.860
So what happens when we have two
frames and only one menu bar?

00:31:23.070 --> 00:31:25.080
Menu bar will suddenly disappear.

00:31:25.190 --> 00:31:25.940
So how do we do this?

00:31:26.060 --> 00:31:29.380
How do we, how do we create the illusion
of a system-wide menu bar?

00:31:29.380 --> 00:31:31.320
Because Java doesn't have one.

00:31:31.940 --> 00:31:33.190
Basically, you can do a bunch of things.

00:31:33.200 --> 00:31:36.240
You can have one JMenuBar that
you throw around every frame

00:31:36.240 --> 00:31:39.200
based on which one is in focus,
and that doesn't work out too well.

00:31:39.200 --> 00:31:40.940
Believe me, I've tried it.

00:31:41.020 --> 00:31:46.630
And you could also have a menu,
a factory sort of thing

00:31:46.630 --> 00:31:50.290
where you create a J,
a new JMenuBar identical for

00:31:50.290 --> 00:31:52.210
every frame that you made.

00:31:52.210 --> 00:31:52.210
And, you know, you can

00:31:53.160 --> 00:31:58.280
I'm going to show you a little bit of
what that might look like right now.

00:32:02.430 --> 00:32:09.140
So I'm going to go back to...
We don't need that anymore.

00:32:10.330 --> 00:32:11.870
I'm going to go back to
that swing application we

00:32:11.870 --> 00:32:13.100
used last time real quickly.

00:32:13.100 --> 00:32:18.930
I'm going to edit my
runtime properties again.

00:32:20.320 --> 00:32:22.450
Now, if you're using Project Builder,
you don't need to worry about

00:32:22.520 --> 00:32:23.600
the screen menu bar property.

00:32:23.600 --> 00:32:25.090
It's actually set by default.

00:32:25.180 --> 00:32:27.950
And you'll probably notice that
I turned it off because I knew

00:32:27.950 --> 00:32:29.600
I was going to come back here.

00:32:31.390 --> 00:32:36.350
And new screen menu bar is set to true,
so maybe it's already there.

00:32:42.270 --> 00:32:43.880
So this is what it looks like.

00:32:44.040 --> 00:32:47.760
Looks much more like a
normal Mac application.

00:32:49.100 --> 00:32:52.730
And I can show you this as a contrast.

00:32:52.760 --> 00:32:56.800
This is our other application
straight out of Windows.

00:32:57.740 --> 00:32:59.630
and this one has the menu
bar tied to the frame.

00:32:59.640 --> 00:33:00.780
This one's up at the top.

00:33:00.900 --> 00:33:02.400
So everything's great, right?

00:33:02.540 --> 00:33:03.740
Not really.

00:33:03.860 --> 00:33:05.400
So here's my second frame.

00:33:05.400 --> 00:33:06.600
I'm still in the same application.

00:33:06.600 --> 00:33:07.900
I just want to work on another document.

00:33:07.900 --> 00:33:08.840
Now my menu bar's gone.

00:33:08.950 --> 00:33:10.650
Well, what happened?

00:33:10.970 --> 00:33:12.030
So what's the best way of doing this?

00:33:12.110 --> 00:33:14.690
How do we solve this problem?

00:33:14.810 --> 00:33:17.740
Well, like I said,
you can just make a factory.

00:33:18.300 --> 00:33:23.320
That generates a new identical menu bar
for all of your frames and sets it to

00:33:23.430 --> 00:33:25.110
that frame when you create a new one.

00:33:25.230 --> 00:33:28.190
And this is half the problem.

00:33:28.330 --> 00:33:31.700
So here's my text editor.

00:33:33.510 --> 00:33:36.560
And I'll create a new, another new,
another new.

00:33:36.590 --> 00:33:39.070
So, all these JFrames now have menus.

00:33:39.070 --> 00:33:41.400
Now this is nothing really special.

00:33:41.400 --> 00:33:44.010
I mean,
anybody who's done Java before has

00:33:44.010 --> 00:33:46.700
probably done some sort of factory thing.

00:33:46.700 --> 00:33:48.430
This is not that big a deal.

00:33:48.450 --> 00:33:51.140
And you know, of course it's functional.

00:33:51.140 --> 00:33:53.300
I'm not, I'm not a...

00:33:56.000 --> 00:33:58.490
I'm not bluffing you.

00:33:58.610 --> 00:34:02.900
But what happens is it's very
easy to just assign an identical

00:34:02.900 --> 00:34:06.000
J menu bar to every frame and
have it work with all the actions.

00:34:06.010 --> 00:34:10.460
You get into the gray area where
we have things like checkbox

00:34:10.460 --> 00:34:12.990
items and stateful things.

00:34:13.330 --> 00:34:21.920
So this is the autosave checkbox
on the menu bar for frame two.

00:34:21.920 --> 00:34:22.300
Now there's absolutely no reason

00:34:22.560 --> 00:34:25.940
For that to be checked when
I go over to frame number three,

00:34:25.940 --> 00:34:29.700
because it's a separate menu bar,
even though it looks the same.

00:34:29.700 --> 00:34:31.490
It's a separate menu bar
for a separate frame.

00:34:31.500 --> 00:34:34.270
So what happens when we want to have
application global things like this?

00:34:34.270 --> 00:34:37.370
Well, through the use of actions
and property change listeners,

00:34:37.370 --> 00:34:39.750
which is what I'm using here,
you can see that I check

00:34:39.750 --> 00:34:41.710
it in one window,
it shows up in the other,

00:34:41.710 --> 00:34:44.730
which is very similar to how
something like bbedit would work.

00:34:44.800 --> 00:34:47.490
And I uncheck it over here, it's gone.

00:34:47.490 --> 00:34:48.870
Check it again.

00:34:48.870 --> 00:34:52.380
So basically the state of these menu
items is the same as it is in the other.

00:34:52.400 --> 00:34:55.270
And the state of this is being
ricocheted through all the menu bars.

00:34:55.270 --> 00:34:57.250
So it really creates
the illusion of having.

00:34:58.760 --> 00:35:00.940
A single application global menu bar.

00:35:00.970 --> 00:35:05.130
And once we get into synchronizing state,
we can have all kinds of fun

00:35:05.130 --> 00:35:08.170
with things like menu item groups
for J Radio button menu items,

00:35:08.260 --> 00:35:13.040
and that opens the door for us to create
another part of the Aqua HI guidelines,

00:35:13.040 --> 00:35:13.930
which is the window menu.

00:35:15.370 --> 00:35:18.420
So right here,
I've got every one of these

00:35:18.600 --> 00:35:20.990
frames that gets created.

00:35:21.830 --> 00:35:26.400
registered with this menu manager
factory that is automatically adding

00:35:26.400 --> 00:35:27.880
these windows to the window menu.

00:35:27.930 --> 00:35:31.130
And of course it's adding them to all
eight window menus because I'm moving

00:35:31.130 --> 00:35:33.260
across and these are all separate menus.

00:35:33.260 --> 00:35:36.340
So I can minimize,
I can select this and bring

00:35:36.340 --> 00:35:39.090
it to the front and it will
select the proper window.

00:35:39.090 --> 00:35:44.750
And this is all mainly property change
listener and action signalization.

00:35:44.920 --> 00:35:48.480
So if I do something
like bringing this up,

00:35:49.030 --> 00:35:52.320
We can do bring all to front now,
and we can do it only for

00:35:52.910 --> 00:35:54.770
windows that aren't in the dock.

00:35:54.840 --> 00:35:59.500
And so the cool thing about this
particular sample is that once you

00:35:59.800 --> 00:36:03.840
conform to what this needs to do,
and basically it needs to use actions,

00:36:03.840 --> 00:36:07.530
and actions are nothing non-standard,
you make a single call to

00:36:07.750 --> 00:36:12.080
register your window with the
menu manager as a developer who

00:36:12.180 --> 00:36:14.720
would use something like this.

00:36:14.720 --> 00:36:17.600
And the window menu just kind of does
its own business absolutely for free.

00:36:17.670 --> 00:36:21.790
There's nothing you need to do to
state how you want it to behave,

00:36:21.790 --> 00:36:28.560
to state which window to minimize when
I click Apple M or anything like that.

00:36:28.560 --> 00:36:32.570
And this will be up on the site
as sample code for those of you

00:36:32.570 --> 00:36:38.080
who are particularly interested
in doing a multiple frame.

00:36:38.410 --> 00:36:39.860
Mac Application in Java.

00:36:39.860 --> 00:36:42.080
It's something that shows
up on the list a lot.

00:36:42.370 --> 00:36:44.550
So keep an eye out for that.

00:36:47.080 --> 00:36:48.860
So let's move on and talk
about the application menu.

00:36:48.860 --> 00:36:51.900
There are three general interfaces.

00:36:51.900 --> 00:36:57.550
You'll notice on Mac OS X you have
menu with the application's name,

00:36:58.970 --> 00:37:01.690
There's an about menu item,
there's a preferences menu item,

00:37:01.700 --> 00:37:03.220
and a quit menu item.

00:37:03.310 --> 00:37:04.740
And how do you take advantage of those?

00:37:04.890 --> 00:37:07.820
Well,
you can implement these three interfaces.

00:37:09.000 --> 00:37:10.970
and basically implement
the proper methods,

00:37:11.070 --> 00:37:15.590
handle about for the about handler,
handle quit for the quit handler, etc.

00:37:15.790 --> 00:37:19.690
And then you register them
with the Mac OS runtime using

00:37:19.730 --> 00:37:21.260
the MRJ application utils.

00:37:21.970 --> 00:37:25.560
Register, quit about, prefs, hamlet,
call.

00:37:27.510 --> 00:37:30.480
And basically what this allows
you to do is do some handling

00:37:30.780 --> 00:37:33.900
when the menu item is triggered.

00:37:33.900 --> 00:37:35.450
You select about,
you can bring up dialogue,

00:37:35.450 --> 00:37:38.430
you select quit,
you can do some clean up work on

00:37:38.510 --> 00:37:41.320
whatever windows you have open,
you do preferences,

00:37:41.320 --> 00:37:43.070
you can bring up preferences.

00:37:44.700 --> 00:37:46.460
The only thing about this
that you might want to do is,

00:37:46.570 --> 00:37:48.460
you know, most people,
because there's no application

00:37:48.460 --> 00:37:51.090
menu on other platforms,
a lot of people put

00:37:51.090 --> 00:37:53.740
exit in the file menu,
for example.

00:37:53.740 --> 00:37:56.090
So if you don't want to,
if you want to avoid confusion,

00:37:56.090 --> 00:37:58.930
you might want to place these
special menu items conditionally.

00:38:00.400 --> 00:38:06.600
[Transcript missing]

00:38:07.350 --> 00:38:09.630
How would you keep compatibility
if you were going to use these?

00:38:09.680 --> 00:38:12.900
Because these are
Macintosh-specific packages.

00:38:12.910 --> 00:38:15.100
They're COM, Apple, MRJ packages.

00:38:15.100 --> 00:38:16.540
They're Mac-specific APIs.

00:38:16.540 --> 00:38:20.260
Well, we have a stubs jar that you can
download from the developer website

00:38:20.260 --> 00:38:23.440
that you can basically include
if you're building on Windows,

00:38:23.440 --> 00:38:25.460
if you want to deploy somewhere else.

00:38:25.530 --> 00:38:29.000
You just include the zip when you're
building and when you're installing.

00:38:29.000 --> 00:38:33.940
And basically those calls will
evaluate to no ops on a platform

00:38:34.180 --> 00:38:37.100
that doesn't have a Mac OS runtime.

00:38:41.100 --> 00:38:43.930
Like I said,
including these files will make

00:38:43.950 --> 00:38:45.360
everything work pretty well.

00:38:46.750 --> 00:38:48.660
So at this point,
I want to bring Scott up,

00:38:48.660 --> 00:38:51.970
and he's going to talk about some
of the native services that we

00:38:51.970 --> 00:38:53.640
have available to Java programs.

00:38:53.640 --> 00:38:55.730
Thanks, Matt.

00:38:59.290 --> 00:39:02.800
So I'm going to talk a little bit
about the bundled Mac OS X services,

00:39:02.800 --> 00:39:07.430
and these are things that we've put into
Java that are Mac OS X-specific services

00:39:07.470 --> 00:39:09.980
that we've given you access to from Java.

00:39:09.980 --> 00:39:14.330
You've probably seen these shown
in a couple other sessions,

00:39:14.330 --> 00:39:16.580
so it's probably not new to you,
so I'll kind of zip through them.

00:39:16.660 --> 00:39:19.150
The first is we took the
Carbon Text-to-Speech framework,

00:39:19.250 --> 00:39:21.960
and as an experiment we
wrapped it in Java classes,

00:39:22.020 --> 00:39:25.180
and then we did all the work
of doing the JDIRECT calls and

00:39:25.180 --> 00:39:29.480
things directly to that framework,
and then hooked that up so that you can

00:39:29.480 --> 00:39:34.140
easily create a synthesizer and just
give it text that you want to speak.

00:39:34.140 --> 00:39:36.450
We also have the
Carbon Speech Recognition engine,

00:39:36.480 --> 00:39:38.810
so you can actually use
speech recognition in your

00:39:38.810 --> 00:39:40.280
Java applications if you want.

00:39:40.280 --> 00:39:43.030
We keep saying Carbon because
that's where this came from,

00:39:43.030 --> 00:39:47.360
and if you saw Scott Forstall's keynote,
you know that you can actually mix and

00:39:47.360 --> 00:39:50.880
match a lot of things from different
services from different frameworks.

00:39:50.880 --> 00:39:53.030
And so we're pulling
some stuff out of Carbon,

00:39:53.030 --> 00:39:56.480
and then leads gracefully into
the Cocoa Spelling Framework,

00:39:56.810 --> 00:40:00.160
which this is actually kind
of a cool integration feature,

00:40:00.260 --> 00:40:03.420
because we took this
Cocoa Spelling Framework,

00:40:03.550 --> 00:40:08.430
and the way it was integrated is
we integrated it into JText panes

00:40:08.600 --> 00:40:13.080
and JText areas so that you could
automatically just attach the spelling

00:40:13.080 --> 00:40:16.400
framework to your text panes and
text areas and things like that.

00:40:16.550 --> 00:40:20.010
And it's a couple lines of code for you,
but you don't have to

00:40:20.010 --> 00:40:21.680
change all of your handling.

00:40:21.770 --> 00:40:26.060
We handle the way that we draw the
red underlines and things like that.

00:40:26.120 --> 00:40:26.120
So it's a good example
of how we can do that.

00:40:26.270 --> 00:40:29.240
It's a good example of
how you can do this stuff.

00:40:29.920 --> 00:40:33.490
Again, both are additions.

00:40:33.670 --> 00:40:36.300
The spelling framework is
really the addition to Swing,

00:40:36.300 --> 00:40:40.670
but they're additions
to the Java platform.

00:40:41.050 --> 00:40:42.920
And you can get them
from connect.apple.com.

00:40:42.920 --> 00:40:45.500
We had some issues with our
installers and we fixed those,

00:40:45.660 --> 00:40:49.130
so the new version should be up there
and you should be able to install

00:40:49.130 --> 00:40:50.910
them and play around with them.

00:40:51.880 --> 00:40:55.260
So I'll just show you a quick demo of it.

00:40:55.300 --> 00:40:57.720
I was assured that it was on this
machine and we were all hooked up,

00:40:57.880 --> 00:40:58.700
so let's see.

00:40:59.450 --> 00:41:05.140
So this,
I took Matt's demo program and just added

00:41:05.140 --> 00:41:06.940
to it the speech and spelling framework.

00:41:07.080 --> 00:41:10.800
A couple lines of code in all cases,
basically.

00:41:10.840 --> 00:41:14.800
And so in this case,
I could type in something saying,

00:41:18.670 --> 00:41:20.560
And I could say speak all.

00:41:20.730 --> 00:41:23.340
Steve Jobs doesn't like this voice.

00:41:23.400 --> 00:41:25.840
And you can all be deafened by that.

00:41:25.840 --> 00:41:27.230
I understand why he doesn't like it.

00:41:27.330 --> 00:41:28.840
So that was just really simple.

00:41:28.840 --> 00:41:34.140
So all we have is this--all I did is
I grabbed the text out of this text

00:41:34.140 --> 00:41:35.920
pane and threw it to my synthesizer.

00:41:36.000 --> 00:41:37.830
It was probably three lines of code.

00:41:37.840 --> 00:41:40.260
Speak selected, just as easy.

00:41:40.600 --> 00:41:42.340
Like.

00:41:42.710 --> 00:41:46.190
Oh, that's not too big a space,
but... Jobs, jobs.

00:41:46.310 --> 00:41:47.700
So that's really easy.

00:41:47.700 --> 00:41:49.130
I mean, it's just standard Java stuff.

00:41:49.280 --> 00:41:54.200
All I had to do was install
our speech framework onto here,

00:41:54.200 --> 00:41:55.640
which is just dropping a jar in place.

00:41:55.840 --> 00:41:57.200
That's it.

00:41:57.200 --> 00:41:58.200
And then let's see.

00:41:58.200 --> 00:42:00.160
What else?

00:42:00.400 --> 00:42:03.190
So I can do--okay,
so that's all for speech.

00:42:03.200 --> 00:42:08.170
For spelling,
I can do things like misspell some words.

00:42:08.220 --> 00:42:10.200
That spells--that's better.

00:42:10.200 --> 00:42:12.050
And...

00:42:13.180 --> 00:42:16.820
And then I can say spell check all text.

00:42:16.990 --> 00:42:17.920
And there we go.

00:42:17.980 --> 00:42:20.810
We just got underlines on
all the things where we're,

00:42:20.810 --> 00:42:22.100
where we've made mistakes.

00:42:22.100 --> 00:42:28.120
And if I hold down the modifier key,
which we, is gotten correctly on this,

00:42:28.120 --> 00:42:31.800
on basic swing stuff, and I click,
I get contextual menus

00:42:31.800 --> 00:42:33.040
right here in place.

00:42:33.170 --> 00:42:34.590
And I didn't add this myself.

00:42:34.590 --> 00:42:37.320
This was all done in the,
in the spelling framework

00:42:37.320 --> 00:42:38.980
that is what I installed.

00:42:38.980 --> 00:42:44.150
All I did was I said attach a spelling,
attach spelling to this component,

00:42:44.150 --> 00:42:47.450
maybe one line of code,
and automatically it's added to here.

00:42:47.460 --> 00:42:51.160
There's nothing custom to this
J text area that's in here.

00:42:51.160 --> 00:42:56.570
So I can also do things like I can
turn on spell checking while typing.

00:42:56.570 --> 00:42:58.790
And if I remember this correctly,
I can do

00:42:59.450 --> 00:43:04.200
As soon as I... There's some small
characters it doesn't mark because

00:43:04.200 --> 00:43:07.650
it thinks you're doing acronyms,
but when you start making

00:43:07.650 --> 00:43:10.590
mistakes and I can...

00:43:11.680 --> 00:43:16.660
Do that and just correct those in line
and it should just correct them there.

00:43:16.730 --> 00:43:17.860
That's the whole thing.

00:43:25.460 --> 00:43:29.060
So those are two examples of
things that we installed that

00:43:29.060 --> 00:43:31.660
we've bundled for you in Java.

00:43:31.660 --> 00:43:33.160
Now,
there's a whole bunch of other native

00:43:33.160 --> 00:43:34.780
libraries that you want to get access to.

00:43:34.780 --> 00:43:37.580
So you may have native
libraries of your own.

00:43:37.580 --> 00:43:40.870
You may want to get to frameworks
that already exist on the Mac.

00:43:40.920 --> 00:43:42.020
So how do you do that?

00:43:42.060 --> 00:43:45.050
And the standard way to do
that in Java is to use JNI.

00:43:45.060 --> 00:43:47.220
And you want access to native code.

00:43:47.220 --> 00:43:48.950
You write JNI for it.

00:43:49.260 --> 00:43:53.420
You run the JNI header creator,
and you create all this glue

00:43:53.420 --> 00:43:56.640
that lets you get to C functions
and all that fun stuff.

00:43:56.710 --> 00:43:57.540
It's very standard.

00:43:57.540 --> 00:44:00.870
It's not simple to do, but you can do it.

00:44:00.920 --> 00:44:01.810
A lot of people do it.

00:44:01.860 --> 00:44:06.240
If any of you saw the E-Beam demo,
they used a little bit of JNI to

00:44:06.240 --> 00:44:09.980
get to the USB port because they
wanted to use the native USB drivers

00:44:09.980 --> 00:44:13.110
because there weren't good enough
ones available in Java yet.

00:44:13.140 --> 00:44:16.320
So they just had a USB driver,
and they wrote some JNI,

00:44:16.320 --> 00:44:18.540
and the rest of their
app is all pure Java,

00:44:18.540 --> 00:44:20.430
but they just have this tiny
little bit that talks to it,

00:44:20.460 --> 00:44:23.400
and it ends up creating sockets
for them for a USB connection.

00:44:24.840 --> 00:44:26.990
And so this is a really
good standard thing.

00:44:27.020 --> 00:44:31.580
And then we have JDIRECT3,
which is specific to Mac OS X.

00:44:31.580 --> 00:44:35.150
And obviously you're
talking to native libraries,

00:44:35.260 --> 00:44:37.320
so if you're talking to
native libraries on Mac OS X,

00:44:37.320 --> 00:44:40.180
you already are
platform-specific in some ways,

00:44:40.180 --> 00:44:42.080
so it doesn't hurt to use JDIRECT3.

00:44:42.080 --> 00:44:45.110
And it's really easy access
to your native libraries.

00:44:45.190 --> 00:44:48.080
And the big thing is that you don't
have to create glue to do this.

00:44:48.200 --> 00:44:52.780
We do the glue creation for you,
so it's a little easier to handle there.

00:44:53.600 --> 00:44:56.040
So a little talk about
some of our old APIs.

00:44:56.040 --> 00:44:58.740
We talked a little bit,
and we haven't really

00:44:58.770 --> 00:45:02.100
mentioned 1.4 at all,
and we kind of want to mention

00:45:02.190 --> 00:45:03.730
it here in this context.

00:45:03.730 --> 00:45:08.940
1.4 drag and drop has actually been
improved significantly over our 1.1,

00:45:08.940 --> 00:45:11.820
1.2, and 1.3 implementations.

00:45:11.820 --> 00:45:16.020
And it's time for us to get on to
the 1.4 drag and drop bandwagon.

00:45:16.020 --> 00:45:19.390
So we're planning on deprecating
the MRJ drag and drop.

00:45:19.390 --> 00:45:22.280
What that means is we have
some work cut out for us,

00:45:22.370 --> 00:45:26.280
which is we want to give you the
functionality that's inside of

00:45:26.410 --> 00:45:28.540
MRJ drag and drop on top of 1.4.

00:45:28.540 --> 00:45:32.510
So we're planning on extending what's
in 1.4 to give you the multiple items

00:45:32.530 --> 00:45:35.930
drag that you get with MRJ drag and
drop and interaction with the finder

00:45:36.040 --> 00:45:38.100
and that kind of drag and drop support.

00:45:38.100 --> 00:45:38.910
So we know you need that.

00:45:38.910 --> 00:45:40.900
We know we're going to give it,
but we're going to give it to

00:45:40.900 --> 00:45:43.090
you as an extension to 1.4,
and we're planning on

00:45:43.090 --> 00:45:44.520
deprecating MRJ drag and drop.

00:45:47.610 --> 00:45:49.050
And then MRJ file utils.

00:45:49.060 --> 00:45:52.340
Those were a carryover
back from Mac OS 9,

00:45:52.340 --> 00:45:57.090
and they handle things like
type and creator setting and

00:45:57.090 --> 00:45:59.730
a lot of nine specific things.

00:45:59.740 --> 00:46:01.480
And we're planning on
also deprecating these.

00:46:01.500 --> 00:46:05.510
And if there's anything specific in
there that you need as another solution,

00:46:05.510 --> 00:46:09.130
we're going to extend the existing
file classes and possibly make a new

00:46:09.140 --> 00:46:13.350
Mac file kind of object that talks
about anything that's specific to files.

00:46:13.470 --> 00:46:16.230
But the MRJ file utils are
kind of old and outdated,

00:46:16.230 --> 00:46:19.600
and they're sort of a source
of problems for us on Mac OS X.

00:46:23.340 --> 00:46:24.300
Back to Matt.

00:46:24.890 --> 00:46:25.210
Okay.

00:46:25.300 --> 00:46:26.620
Thanks a lot, Scott.

00:46:26.620 --> 00:46:29.080
Scott has been doing the marathon today.

00:46:29.080 --> 00:46:30.740
He's been presenting for
three hours straight,

00:46:30.750 --> 00:46:31.180
I think.

00:46:31.180 --> 00:46:35.380
So, yeah, give him a hand,
ladies and gentlemen.

00:46:35.380 --> 00:46:37.050
Scott Adler.

00:46:38.720 --> 00:46:40.250
Thanks a lot, Scott.

00:46:40.370 --> 00:46:45.580
So it looks like I talk too fast because
we are already at our summary points.

00:46:45.580 --> 00:46:47.360
So what do we want you
to take away from this?

00:46:47.370 --> 00:46:49.380
We want you to use Aqua.

00:46:49.690 --> 00:46:51.600
It's pretty hard not to, actually.

00:46:51.600 --> 00:46:54.240
You need to do a lot of work to set
a look and feel other than Aqua.

00:46:54.240 --> 00:46:55.570
So we would recommend
that you don't do it,

00:46:55.570 --> 00:46:56.940
because we think it looks pretty good.

00:46:59.280 --> 00:47:02.340
And use the cross-platform programming
techniques that I suggested.

00:47:02.340 --> 00:47:04.300
There are a lot more than
the ones I mentioned.

00:47:04.300 --> 00:47:05.840
I thought I wasn't going
to have enough time,

00:47:05.840 --> 00:47:08.150
so I cut some of them down.

00:47:09.800 --> 00:47:11.820
And feel free to take advantage
of some of the features we

00:47:11.820 --> 00:47:13.240
were talking about in Mac OS X.

00:47:13.240 --> 00:47:16.720
The ones that are specific,
the ones that might be

00:47:16.720 --> 00:47:22.910
subjected to locking you in,
go ahead and add them conditionally.

00:47:23.630 --> 00:47:24.860
So where do you go from here?

00:47:24.860 --> 00:47:28.180
You can get the speech and spelling
frameworks as well as any seeds that

00:47:28.190 --> 00:47:31.400
might be coming out at connect.apple.com,
which is the ADC website.

00:47:31.400 --> 00:47:34.640
You can use your Apple developer
connection login and password.

00:47:34.640 --> 00:47:39.000
You can go to our developer Java section,
which should be having some new

00:47:39.000 --> 00:47:41.430
documentation coming out with Jaguar.

00:47:41.550 --> 00:47:43.380
Be on the lookout for that.

00:47:43.610 --> 00:47:46.120
And there's of course the
Java dev mailing list.

00:47:46.290 --> 00:47:48.820
For those of you who are not familiar
with the list and not using it,

00:47:48.820 --> 00:47:50.220
it's an excellent resource.

00:47:50.220 --> 00:47:52.560
There are a lot of really
intelligent people on it who

00:47:52.610 --> 00:47:53.580
answer a lot of questions.

00:47:53.600 --> 00:47:56.230
You know a lot about
Java programming on the Mac.

00:47:56.230 --> 00:47:58.180
Many of them don't even work for Apple.

00:48:01.200 --> 00:48:05.160
and myself and Ted,
who's another Java DTS fellow,

00:48:05.160 --> 00:48:06.100
monitor this list.

00:48:06.100 --> 00:48:07.200
We answer it also.

00:48:07.230 --> 00:48:10.930
And our engineers also are pretty
actively posting to it when

00:48:10.930 --> 00:48:15.080
somebody's not breathing down
their necks to release something.

00:48:15.280 --> 00:48:19.500
And of course,
if you fell asleep during this session,

00:48:19.500 --> 00:48:23.060
I would be happy to answer your
questions later at the low,

00:48:23.060 --> 00:48:26.720
low price of one developer incident
with an email to DTS at Apple.com.

00:48:28.980 --> 00:48:30.560
So,
where can you get some more information?

00:48:30.560 --> 00:48:35.330
I already made a reference to the
tech note on the developer website,

00:48:35.330 --> 00:48:37.670
and these are all off
developer.apple.com.

00:48:37.800 --> 00:48:41.970
2031 is the one that talks about
all our runtime properties,

00:48:41.970 --> 00:48:45.400
everything that you can
set to change things.

00:48:45.430 --> 00:48:48.750
A kind of print version of what we
talked about today will be available

00:48:48.780 --> 00:48:50.480
on the web at the end of this week.

00:48:50.610 --> 00:48:53.630
It's probably a subset,
but there will be the kind of code

00:48:53.630 --> 00:48:55.810
snippets that I mentioned here.

00:48:55.810 --> 00:48:59.740
And we also have a newer
MRJ toolkit stubs because with

00:48:59.740 --> 00:49:04.510
the Java 131 update that shipped,
I guess, around February,

00:49:04.510 --> 00:49:07.100
we included support
for the prefs handler,

00:49:07.250 --> 00:49:09.070
and that was a new
addition to the Mac OS,

00:49:09.140 --> 00:49:10.710
and we didn't update the stubs yet.

00:49:10.820 --> 00:49:12.220
So the stubs are now updated.

00:49:12.300 --> 00:49:15.360
You should be able to get them
off the sample code section

00:49:15.360 --> 00:49:17.020
of the developer website.

00:49:17.300 --> 00:49:19.180
Where do we go from here?

00:49:19.210 --> 00:49:22.040
You can go to Room C for
Java Web Services.

00:49:22.100 --> 00:49:23.440
Tomorrow at 10:30.

00:49:23.550 --> 00:49:27.950
Tomorrow at 3:30,
we have some virtual machine internals.

00:49:28.680 --> 00:49:34.830
In Room C Friday,
there's a Java performance section,

00:49:34.830 --> 00:49:37.910
which I believe is talking about
things that you can do as well as

00:49:37.910 --> 00:49:40.760
things that we're doing to enhance
performance of Java on Mac OS X.

00:49:40.760 --> 00:49:44.500
And very important, something that I hope
everybody shows up to,

00:49:44.500 --> 00:49:46.870
is the feedback forum
tomorrow at 5 o'clock.

00:49:46.960 --> 00:49:49.380
We really want to hear
everything that you have to say.

00:49:49.380 --> 00:49:52.870
People are usually very vocal and active,
and I really appreciate that.

00:49:52.920 --> 00:49:54.580
And I would encourage you to continue.

00:49:54.580 --> 00:49:55.790
Thank you.

00:49:56.420 --> 00:49:57.250
And who to contact?

00:49:57.330 --> 00:49:58.100
Alan is the man.

00:49:58.100 --> 00:49:59.170
Alan is always the man.

00:49:59.170 --> 00:50:00.860
And he actually answers emails.

00:50:00.860 --> 00:50:02.270
Feel free to speak to him.