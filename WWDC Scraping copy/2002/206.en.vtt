WEBVTT

00:00:01.930 --> 00:00:05.310
Ladies and gentlemen,
please welcome HI Toolbox

00:00:05.310 --> 00:00:08.810
Engineer Guy Fullerton.

00:00:12.560 --> 00:00:16.200
I'm Guy, but he just told you that,
so don't need to be told again.

00:00:16.260 --> 00:00:18.260
I got two things to say.

00:00:18.320 --> 00:00:19.130
The first is no food comas.

00:00:19.140 --> 00:00:21.180
I know you're just coming back
from lunch and you're probably

00:00:21.180 --> 00:00:23.430
sitting there with a big,
you know, meal in your stomach.

00:00:23.510 --> 00:00:26.270
So if you need to, get up, jump around,
get some energy,

00:00:26.380 --> 00:00:27.620
because I got a long session.

00:00:27.860 --> 00:00:31.410
Second thing I need to tell you is that
if you saw Ed's session before lunch,

00:00:31.450 --> 00:00:33.100
you know that I have no demos.

00:00:33.100 --> 00:00:35.180
And right now some of you are thinking,
no demos.

00:00:35.180 --> 00:00:36.060
No, that's right.

00:00:36.160 --> 00:00:36.970
I have no demos.

00:00:36.970 --> 00:00:39.820
That's because I've got tons
of content to talk about.

00:00:39.820 --> 00:00:43.390
Ed talked about a lot of stuff in
a high level overview sort of way.

00:00:43.550 --> 00:00:46.950
And I'm going to talk about stuff
from sort of a low level technical

00:00:46.950 --> 00:00:50.520
perspective and show you how to
implement a lot of the things he showed.

00:00:50.520 --> 00:00:52.870
So before I go into details
on the new stuff in Jaguar,

00:00:52.940 --> 00:00:56.380
first thing I want to point out is some
cool stuff we worked on in the Appearance

00:00:56.380 --> 00:00:59.750
Manager and that we're currently
working on in the Appearance Manager.

00:00:59.870 --> 00:01:02.730
The first thing is a radical
improvement in theme text drawing

00:01:02.740 --> 00:01:04.420
speed in the Appearance Manager.

00:01:04.530 --> 00:01:08.400
If you've been using the theme
text drawing APIs in 10.0 and 10.1,

00:01:08.400 --> 00:01:10.400
you know they're pretty
horrendously slow.

00:01:10.490 --> 00:01:13.720
So for Jaguar, we improved our caching
just tremendously.

00:01:13.800 --> 00:01:19.460
We started making more efficient
use of the Atsui text drawing APIs.

00:01:19.460 --> 00:01:23.520
And we basically got a two times
performance increase in Jaguar.

00:01:23.550 --> 00:01:24.820
The green bars are Jaguar.

00:01:24.820 --> 00:01:28.460
Obviously the blue bars are 10.1.

00:01:29.100 --> 00:01:31.980
So another thing that we're currently
working on is some improvements

00:01:32.070 --> 00:01:34.270
to the Appearance Manager.

00:01:34.500 --> 00:01:36.580
If you've used the Appearance
Manager drawing primitives,

00:01:36.690 --> 00:01:41.390
you've probably run into
a couple of problem areas.

00:01:41.470 --> 00:01:44.700
If you use a lot of theme drawing
primitives to draw your widgets,

00:01:44.770 --> 00:01:47.290
you probably notice that the
performance is kind of crummy.

00:01:47.370 --> 00:01:51.160
And the main reason for that is
the Appearance Manager APIs are

00:01:51.160 --> 00:01:52.860
inherently Quick Draw based.

00:01:52.950 --> 00:01:54.880
When you call one of these APIs,
they assume you've got a

00:01:54.880 --> 00:01:55.960
Quick Draw port around.

00:01:55.960 --> 00:01:58.360
They assume that port's configured
with the right clip region,

00:01:58.360 --> 00:02:00.460
right pen settings, and all that stuff.

00:02:00.540 --> 00:02:03.450
But internally,
our implementation is implemented

00:02:03.510 --> 00:02:05.660
in terms of core graphics and cores.

00:02:05.770 --> 00:02:08.360
And that means before we
actually do the render,

00:02:08.360 --> 00:02:10.410
we have to do a fairly
expensive sync from the

00:02:10.520 --> 00:02:13.730
Quick Draw port to the CG context.

00:02:13.890 --> 00:02:16.800
Also,
the Appearance Manager APIs are full

00:02:16.800 --> 00:02:18.590
of other Quick Draw data structures.

00:02:18.640 --> 00:02:20.570
If you pass a rectangle
into the Appearance Manager,

00:02:20.770 --> 00:02:23.450
it's a classic Quick Draw rectangle.

00:02:23.500 --> 00:02:24.930
It's a 16-bit coordinate system.

00:02:25.060 --> 00:02:27.190
It's not exactly the most
modern coordinate system.

00:02:27.250 --> 00:02:30.800
Every framework out there works
around this by implementing

00:02:31.050 --> 00:02:33.130
their own bigger rectangle type.

00:02:33.250 --> 00:02:35.690
So the fact that the Appearance
Manager does this is kind of crummy.

00:02:35.850 --> 00:02:40.390
And the third problem area is
the use of theme erase UPPs.

00:02:40.460 --> 00:02:43.720
A lot of the drawing primitives
require you to pass in an erase proc

00:02:43.990 --> 00:02:47.400
so that you can erase behind whatever
image you're ultimately going to draw.

00:02:47.510 --> 00:02:53.580
And this ultimately ends up giving you
this sort of Aqua misaligned pattern

00:02:53.580 --> 00:02:57.400
problem that I'm sure you've all seen
when you ported your apps to Mac OS X.

00:02:57.400 --> 00:03:01.400
So what we're currently working on
is eliminating all those problems.

00:03:01.400 --> 00:03:03.910
We've got a new suite of
Appearance Manager APIs that

00:03:03.910 --> 00:03:05.400
are still in development.

00:03:05.400 --> 00:03:07.400
I don't know if these are
going to make Jaguar or not,

00:03:07.400 --> 00:03:09.400
but we're working hard
to try to pull that off.

00:03:09.400 --> 00:03:11.390
We work entirely in
terms of core graphics.

00:03:11.440 --> 00:03:14.500
Instead of assuming that you've
got a Quick Draw port around,

00:03:14.520 --> 00:03:18.400
you must pass in a core graphics
context ref so we can do our render.

00:03:18.400 --> 00:03:21.360
And the ultimate benefit here is
that we can just take that context,

00:03:21.450 --> 00:03:23.440
go right to our low-level
rendering routines,

00:03:23.510 --> 00:03:24.400
and blit really, really fast.

00:03:24.400 --> 00:03:26.400
So these are much, much faster.

00:03:26.630 --> 00:03:29.770
Instead of taking Quick Draw types,
they all take floating

00:03:29.770 --> 00:03:31.400
point coordinate types.

00:03:31.400 --> 00:03:34.400
We've got a hi-rect and
an hi-point definition.

00:03:34.420 --> 00:03:38.400
I think you can find those
in Carbonevents core.h.

00:03:38.400 --> 00:03:40.390
But fundamentally,
these are just rectangles and points

00:03:40.400 --> 00:03:42.400
that use a floating point parameter.

00:03:42.400 --> 00:03:46.400
So we get rid of the 16-point
coordinate space issue.

00:03:46.580 --> 00:03:49.390
And they also do not
have theme erase procs.

00:03:49.400 --> 00:03:51.350
These are set up to work
with the HIView model.

00:03:51.550 --> 00:03:54.400
If you had a chance to
see that earlier today,

00:03:54.400 --> 00:03:56.400
you know that in HIView,
there is no erase.

00:03:56.400 --> 00:03:57.400
You only draw.

00:03:57.400 --> 00:04:00.400
Therefore, our new Appearance
Manager APIs just draw.

00:04:00.400 --> 00:04:02.150
So you never have to worry
about the pattern misalignment

00:04:02.150 --> 00:04:03.400
problems or providing erase procs.

00:04:03.520 --> 00:04:05.970
And the fact that we're putting some
new APIs in place allows us to solve

00:04:06.020 --> 00:04:08.300
some of the other nagging problems,
like right now,

00:04:08.440 --> 00:04:11.400
there's no way to draw a pulsing
button with the appearance primitives,

00:04:11.400 --> 00:04:14.400
whereas these new
APIs will let you do that.

00:04:16.120 --> 00:04:18.500
So,
jumping into the new features for Jaguar.

00:04:18.600 --> 00:04:20.000
We've got a toolbar control.

00:04:20.630 --> 00:04:24.150
Really, really full-featured,
handles a lot of stuff for you.

00:04:24.200 --> 00:04:26.970
It's going to handle all
the event handling stuff,

00:04:27.110 --> 00:04:28.990
drag and drop, all those things.

00:04:29.050 --> 00:04:31.050
Puts up a configuration
sheet automatically,

00:04:31.050 --> 00:04:33.230
lets the user rearrange
all the toolbar items.

00:04:33.300 --> 00:04:34.820
All of that is automatic.

00:04:34.980 --> 00:04:36.800
Does the animation when appropriate.

00:04:36.970 --> 00:04:39.000
It's totally customizable.

00:04:39.000 --> 00:04:40.360
You can add your own toolbar items.

00:04:40.360 --> 00:04:42.990
You can add your own toolbar item
views and all that kind of stuff.

00:04:43.080 --> 00:04:47.000
And perhaps one of the best things about
it is it's got an auto-save feature.

00:04:47.080 --> 00:04:48.820
If you create a toolbar and
you want it to auto-save,

00:04:48.860 --> 00:04:50.950
you can just configure it up that way,
and I'll show you how

00:04:50.950 --> 00:04:52.000
to do that in a second.

00:04:52.000 --> 00:04:54.000
You configure it up that way.

00:04:54.000 --> 00:04:56.150
And any time the user makes
a change to the toolbar,

00:04:56.150 --> 00:04:58.600
the toolbar will automatically
save those changes to your

00:04:58.600 --> 00:04:59.990
application's preferences.

00:05:00.000 --> 00:05:02.850
And the next time your application
launches and you create another

00:05:02.850 --> 00:05:05.200
one of the same toolbar,
the toolbar will go to the preference,

00:05:05.310 --> 00:05:06.670
fetch the settings,
and you'll have the user's

00:05:06.710 --> 00:05:07.990
settings automatically.

00:05:08.000 --> 00:05:09.000
You don't have to make changes.

00:05:09.000 --> 00:05:11.100
manage that yourself.

00:05:11.980 --> 00:05:14.340
So the toolbar isn't really a control.

00:05:14.340 --> 00:05:16.940
So it was a little bit of a
misnomer on the other slide.

00:05:17.100 --> 00:05:17.940
But it's got its own header.

00:05:17.940 --> 00:05:19.650
It's hitoolbar.h.

00:05:19.660 --> 00:05:22.640
And the reason I say it's not really
a control is because the toolbar

00:05:22.670 --> 00:05:25.900
is implemented with the model view
controller sort of architecture.

00:05:25.970 --> 00:05:29.880
So the toolbar that you generate via
the APIs is really the controller.

00:05:30.020 --> 00:05:34.080
The control or the view will
get created dynamically as it's

00:05:34.080 --> 00:05:35.800
needed and put into the window.

00:05:35.900 --> 00:05:37.900
And I'll talk a little
bit more about that later.

00:05:37.900 --> 00:05:42.100
One other thing to mention, like I said,
you can create custom toolbar

00:05:42.100 --> 00:05:45.810
item views to represent wholly
custom items in your toolbar.

00:05:45.890 --> 00:05:49.850
All of your custom toolbar
item views must be HIV savvy.

00:05:49.900 --> 00:05:54.500
So if you need to, get the DVDs,
check out the HIV session.

00:05:54.590 --> 00:05:57.400
Ed talked an awful lot about that.

00:05:58.070 --> 00:05:59.490
So creating a toolbar is really,
really simple.

00:05:59.540 --> 00:06:01.430
Let me run through how to do that.

00:06:01.440 --> 00:06:04.590
We've got an HI Toolbar Create API,
really creative, but, you know,

00:06:04.610 --> 00:06:06.100
gets the point across, right?

00:06:06.190 --> 00:06:10.400
The first parameter you pass to
that is the toolbar's identifier.

00:06:10.530 --> 00:06:15.900
This identifier uniquely represents that
toolbar within your application space.

00:06:15.980 --> 00:06:17.800
This is important for two reasons.

00:06:17.940 --> 00:06:20.460
The first reason is that you might
actually have two different kinds

00:06:20.460 --> 00:06:23.130
of toolbars in your application,
one for document windows and

00:06:23.220 --> 00:06:26.140
some other kind of toolbar for
some other aspect of your app,

00:06:26.220 --> 00:06:28.640
you know, maybe your preferences dialog
or something like that.

00:06:28.750 --> 00:06:32.020
And these identifiers can
keep those toolbars distinct.

00:06:32.260 --> 00:06:35.200
The second reason is that
when a toolbar is auto-save,

00:06:35.410 --> 00:06:38.330
is set to auto-save,
we use this identifier as part

00:06:38.500 --> 00:06:42.540
of the key to which we save
the data in your preferences.

00:06:42.960 --> 00:06:45.700
So as you can see,
I've set up this toolbar to autosave.

00:06:45.730 --> 00:06:49.560
The next parameter is actually
a list of attributes for you

00:06:49.620 --> 00:06:50.600
to configure the toolbar.

00:06:50.720 --> 00:06:52.900
In this particular case, I've said,
you know, hey, toolbar,

00:06:52.900 --> 00:06:55.360
please autosave for me,
and please allow the user

00:06:55.360 --> 00:06:56.900
to configure the toolbar.

00:06:57.040 --> 00:06:59.080
There's a whole bunch of
different options you can pass in,

00:06:59.080 --> 00:07:00.880
but these are probably
the most common ones.

00:07:00.900 --> 00:07:03.720
And when you call it,
you get an HIToolbarRef.

00:07:03.900 --> 00:07:08.900
And HIToolbarRef is just an HI object
subclass that represents the toolbar,

00:07:08.900 --> 00:07:10.890
and it sort of floats off in limbo.

00:07:10.900 --> 00:07:13.890
This is not necessarily
a view--it is not a view.

00:07:13.890 --> 00:07:15.900
And at this point,
it's not even associated

00:07:15.900 --> 00:07:18.290
with any window yet.

00:07:18.810 --> 00:07:20.700
Now, the next step I'm just going
to have to hand wave over.

00:07:20.700 --> 00:07:23.460
I'm going to talk more about
toolbar delegates in a few minutes,

00:07:23.460 --> 00:07:26.820
but fundamentally what I'm doing
here is I know I've already

00:07:26.830 --> 00:07:30.070
created a toolbar delegate,
and I'm just going to associate

00:07:30.070 --> 00:07:32.200
that delegate with the toolbar.

00:07:32.690 --> 00:07:35.790
So once you create a toolbar,
like I said, it's off in limbo someplace.

00:07:35.920 --> 00:07:37.550
Now you need to put it in a window.

00:07:37.670 --> 00:07:39.830
You do that with setWindowToolbar.

00:07:39.930 --> 00:07:42.140
So in this case,
I'm taking one of my document windows

00:07:42.140 --> 00:07:44.560
and slamming the toolbar into it.

00:07:44.690 --> 00:07:48.890
Now, setWindowToolbar has two
kind of cool points about it.

00:07:49.000 --> 00:07:51.910
One is that an individual
toolbar can actually be

00:07:51.910 --> 00:07:53.610
associated with lots of windows.

00:07:53.700 --> 00:07:56.020
So you can call
setWindowToolbar repeatedly,

00:07:56.020 --> 00:07:59.890
and the toolbar will make sure that the
view representation of that toolbar will

00:07:59.890 --> 00:08:03.700
stay in sync amongst all those windows
that share that toolbar reference.

00:08:03.790 --> 00:08:06.710
The other important thing to note
about setWindowToolbar is that

00:08:07.060 --> 00:08:11.160
since an HI toolbar is an HI object,
which also implies that

00:08:11.160 --> 00:08:14.990
it's a CF type ref,
setWindowToolbar will retain the toolbar.

00:08:15.080 --> 00:08:18.820
And that becomes important
in just a second.

00:08:18.920 --> 00:08:21.010
So after you've associated
a toolbar with a window,

00:08:21.010 --> 00:08:24.350
you probably want the toolbar
widget in your window structure.

00:08:24.430 --> 00:08:26.450
You can do that with
changeWindow attributes.

00:08:26.560 --> 00:08:29.910
And we've implemented a new
kwindowToolbar button that's an

00:08:29.910 --> 00:08:31.460
attribute for you to turn on.

00:08:31.460 --> 00:08:33.760
We don't do this automatically for
you because we know there might

00:08:33.800 --> 00:08:36.650
be some cases when you don't want
that toolbar to be toggleable.

00:08:36.700 --> 00:08:40.460
A preferences dialog, for instance,
might always need to have the toolbar.

00:08:40.530 --> 00:08:42.030
So in that case,
you wouldn't want to change window

00:08:42.030 --> 00:08:43.460
attributes to put the widget on.

00:08:43.460 --> 00:08:47.600
It would be misleading the user that
they could turn the toolbar off.

00:08:48.600 --> 00:08:51.530
Now, most toolbars allow the user
to either configure it or add

00:08:51.530 --> 00:08:53.500
items to it via drag and drop.

00:08:53.580 --> 00:08:57.140
And the toolbar will only do
its drag and drop work if the

00:08:57.250 --> 00:09:00.250
control manager's standard drag
and drop handling is turned on.

00:09:00.380 --> 00:09:03.100
So to turn that on,
you call the longest name in the toolbox.

00:09:03.100 --> 00:09:05.440
And I'm not gonna say it,
'cause I'll say it wrong.

00:09:05.510 --> 00:09:09.150
And turn on standard control
manager drag handling.

00:09:09.250 --> 00:09:11.060
And since I'm kind of
in a toolbar creation,

00:09:11.070 --> 00:09:14.000
window creation kind of mode,
I want to make sure this toolbar is shown

00:09:14.000 --> 00:09:15.960
by default in my particular window here.

00:09:16.110 --> 00:09:18.960
So I call this Show/Hide
Window Toolbar API.

00:09:19.090 --> 00:09:22.590
Not only can that programmatically
hide or show the toolbar,

00:09:22.720 --> 00:09:25.320
but the third parameter
to the API-- in this case,

00:09:25.320 --> 00:09:28.730
I'm passing false-- represents whether
or not I want the toolbar to animate as

00:09:28.860 --> 00:09:31.300
it comes down from the top of the window.

00:09:31.430 --> 00:09:33.920
So in this particular case,
which is kind of example code of

00:09:33.920 --> 00:09:36.360
creating a window the first time,
I just want to show the

00:09:36.360 --> 00:09:37.460
toolbar and be done with it.

00:09:37.460 --> 00:09:39.630
It doesn't need to animate.

00:09:40.020 --> 00:09:42.330
And finally,
I'm going to release my toolbar instance.

00:09:42.400 --> 00:09:45.980
And this is okay, like I said,
because when you call setWindowToolbar,

00:09:46.100 --> 00:09:47.560
the window had retained the toolbar.

00:09:47.680 --> 00:09:50.880
And my call of CF release here just says,
okay, I'm done with my local variable,

00:09:50.920 --> 00:09:52.900
but that toolbar still
exists in the window.

00:09:52.900 --> 00:09:54.890
You might not want to release it.

00:09:54.910 --> 00:10:00.450
Maybe you want to keep a global around
with a reference to your toolbar,

00:10:00.450 --> 00:10:04.150
but you really don't need to
because you can actually get

00:10:04.150 --> 00:10:04.150
any toolbar that's associated
with any window if you want to.

00:10:05.340 --> 00:10:09.690
So now I've got to come
back to toolbar delegates.

00:10:09.770 --> 00:10:11.600
So in the model view
controller architecture,

00:10:11.600 --> 00:10:14.100
the toolbar instance is pretty
much like the controller.

00:10:14.610 --> 00:10:18.190
And it's going to create views as
necessary and put them in your window.

00:10:18.270 --> 00:10:21.940
And the delegate is kind of the boss
of the toolbar in that it decides

00:10:21.940 --> 00:10:24.200
what exactly can go in that toolbar.

00:10:24.200 --> 00:10:29.190
So it's kind of the bridge
that allows you to plug the

00:10:29.190 --> 00:10:29.190
model into the controller.

00:10:29.470 --> 00:10:32.490
Now, as the boss of the toolbar,
it gets to do a couple different things.

00:10:32.570 --> 00:10:36.180
It gets to define the default
set of toolbar items that

00:10:36.350 --> 00:10:37.560
can be in that toolbar.

00:10:37.650 --> 00:10:40.350
And that default set is what would appear
in a toolbar the very first time one

00:10:40.450 --> 00:10:44.600
of those toolbars is ever created by a
user that hasn't saved off the auto-save

00:10:44.600 --> 00:10:46.550
configuration stuff in their preferences.

00:10:46.640 --> 00:10:49.420
And it's also represented in
the toolbar configuration sheet.

00:10:49.550 --> 00:10:50.940
Down at the bottom of
the configuration sheet,

00:10:50.940 --> 00:10:54.170
there's usually a default set item
that the user can drag as a whole and

00:10:54.170 --> 00:10:55.890
drop it in the toolbar to configure it.

00:10:55.990 --> 00:11:00.710
Well, the delegate gets to decide
what that default set is.

00:11:00.800 --> 00:11:04.140
The delegate also gets to decide
what the whole allowable set of

00:11:04.150 --> 00:11:05.950
items are for a given toolbar.

00:11:06.040 --> 00:11:09.660
And that allowable set is also
reflected in the configuration sheet

00:11:09.810 --> 00:11:12.850
because each of the allowable items
will be shown in the configuration

00:11:12.980 --> 00:11:16.100
sheet so the user can drag them
out and add them to the toolbar.

00:11:16.160 --> 00:11:19.650
And finally,
the delegate's third responsibility is

00:11:19.650 --> 00:11:22.320
to actually create the toolbar items.

00:11:22.400 --> 00:11:25.790
And we do this via a delegate
simply for efficiency.

00:11:25.800 --> 00:11:32.490
There may be times when a user
has just decided to not show any

00:11:32.490 --> 00:11:35.900
toolbars anywhere in your application,
even though you've associated

00:11:35.900 --> 00:11:37.150
them with your various windows.

00:11:37.200 --> 00:11:39.990
And therefore,
you don't want the overhead of having

00:11:40.000 --> 00:11:44.050
all these toolbar items around in
memory because they're not being shown.

00:11:44.100 --> 00:11:46.630
So the fact that we've got a
delegate that is specifically

00:11:46.630 --> 00:11:49.770
asked to create toolbar items when
they're necessary means you're not

00:11:49.770 --> 00:11:51.570
going to have any of that overhead.

00:11:52.610 --> 00:11:56.440
So Delegate does its job by handling
four different Carbon events.

00:11:56.520 --> 00:12:00.940
The first two, getDefaultIdentifiers and
getAllowedIdentifiers,

00:12:00.990 --> 00:12:03.950
lets the delegate get to decide
what shows up in that config sheet,

00:12:04.010 --> 00:12:05.490
what's allowed, what's the default set.

00:12:05.510 --> 00:12:09.850
And the delegate simply responds
to this by passing back a

00:12:09.930 --> 00:12:13.190
list of item identifiers,
which are kind of like

00:12:13.420 --> 00:12:14.500
toolbar identifiers.

00:12:14.500 --> 00:12:17.440
They're just these unique strings which
uniquely identify the types of items.

00:12:17.500 --> 00:12:19.820
Oh, actually, before I go any further,
one thing I forgot,

00:12:19.820 --> 00:12:21.500
let me see if it's on the previous slide.

00:12:21.690 --> 00:12:24.450
Yeah, the toolbar delegate
can be any HI object.

00:12:24.500 --> 00:12:26.500
It really doesn't matter what it is.

00:12:26.500 --> 00:12:28.430
The toolbar could care less.

00:12:28.550 --> 00:12:32.370
The toolbar just needs an HI object so
it can send these events to the delegate.

00:12:32.500 --> 00:12:35.140
So you might decide that
the delegate is a window,

00:12:35.140 --> 00:12:37.500
or it could be your
application HI object,

00:12:37.500 --> 00:12:40.500
or it could just be any other
HI object you feel like devising,

00:12:40.560 --> 00:12:43.440
or it could even be the toolbar itself,
just so long as the appropriate

00:12:43.510 --> 00:12:45.500
handlers are on that HI object.

00:12:45.500 --> 00:12:47.500
Okay, so coming back to the delegate.

00:12:47.500 --> 00:12:52.580
The other two events the delegate must
handle are createItemWithIdentifier

00:12:52.580 --> 00:12:54.500
and createItemFromDrag.

00:12:54.500 --> 00:12:57.470
And these are the hooks that
allow a delegate to decide,

00:12:57.560 --> 00:13:01.480
give the delegate the chance to create
the various sorts of toolbar items.

00:13:01.560 --> 00:13:03.650
And you handle it simply
by creating a toolbar item,

00:13:03.650 --> 00:13:06.150
putting it in the Carbon event,
and returning so that it gets

00:13:06.150 --> 00:13:07.500
passed back to the toolbar.

00:13:07.500 --> 00:13:11.790
The toolbar will then take that
item and add it to the view.

00:13:11.970 --> 00:13:14.560
So what exactly are these toolbar items?

00:13:14.600 --> 00:13:16.520
Well, fundamentally,
they are things that are

00:13:16.520 --> 00:13:19.650
represented in the toolbar,
but they're not the views themselves.

00:13:19.660 --> 00:13:22.200
They're just these,
I don't want to say ephemeral,

00:13:22.270 --> 00:13:24.790
but they're just these things
out in space that represent

00:13:24.790 --> 00:13:27.900
what a toolbar item could be,
could be visually represented as.

00:13:28.080 --> 00:13:31.890
And every toolbar item has four different
pieces of data associated with it.

00:13:31.890 --> 00:13:34.900
The first is the identifier,
the toolbar identifier.

00:13:34.900 --> 00:13:37.670
Like I mentioned before,
this is just a unique string

00:13:38.000 --> 00:13:41.900
that uniquely identifies
that toolbar item's purpose.

00:13:41.900 --> 00:13:46.370
That string might get saved out to
your application's preferences file

00:13:46.370 --> 00:13:48.900
if your toolbar is set up to autosave.

00:13:48.900 --> 00:13:52.090
And you, the delegate will receive that
string when asked to create

00:13:52.090 --> 00:13:53.900
a particular toolbar item.

00:13:53.900 --> 00:13:55.860
Toolbar items also
have labels and images.

00:13:55.860 --> 00:13:58.230
I mean, obviously,
you want all of your toolbar items

00:13:58.230 --> 00:13:59.810
to show something in the toolbar.

00:13:59.890 --> 00:14:02.900
And they also have a command
ID associated with them.

00:14:03.090 --> 00:14:06.010
Now, this command ID is sent out
in much the same way as a push

00:14:06.110 --> 00:14:07.900
button sends out a command ID.

00:14:08.090 --> 00:14:11.900
When you click on a toolbar item,
it sends that command out.

00:14:11.990 --> 00:14:14.900
It propagates up the view hierarchy,
and somebody's going to handle it.

00:14:14.900 --> 00:14:18.830
Actually, something Ed showed in the
previous session is also in here.

00:14:18.910 --> 00:14:21.890
When you click on a toolbar item,
before we send out the command ID,

00:14:21.890 --> 00:14:23.900
we send out another Carbon event.

00:14:23.920 --> 00:14:27.070
And I forget what it is specifically,
but it's something like K toolbar

00:14:27.070 --> 00:14:30.800
item pressed or something like that,
which gives you a chance to hook in

00:14:31.100 --> 00:14:34.900
to a toolbar item getting clicked
before this command gets sent out.

00:14:34.900 --> 00:14:38.890
Toolbar items can also have
submenus associated with them.

00:14:38.890 --> 00:14:39.420
And if you've got a submenu
associated with the toolbar,

00:14:39.440 --> 00:14:39.880
you can also send out a toolbar item.

00:14:39.910 --> 00:14:40.860
And that's something
that's really important.

00:14:40.940 --> 00:14:41.900
So, let's look at this.

00:14:41.900 --> 00:14:43.900
It's going to show up two places.

00:14:43.910 --> 00:14:45.810
We will display it and track
it automatically when you

00:14:45.810 --> 00:14:46.890
click on the toolbar item.

00:14:46.900 --> 00:14:50.660
And in the overflow menu that sometimes
shows up if your window is too

00:14:50.660 --> 00:14:56.090
narrow to fit all your toolbar items,
your items submenu will show up as a

00:14:56.090 --> 00:15:00.890
submenu of the menu item that represents
that toolbar item in the overflow menu.

00:15:00.900 --> 00:15:02.900
I said that right.

00:15:02.900 --> 00:15:06.010
Trust me.

00:15:07.150 --> 00:15:09.670
Every toolbar item also has a
set of attribute bits to allow

00:15:09.670 --> 00:15:12.040
you to configure its behavior.

00:15:12.040 --> 00:15:15.500
And these are-- I think all of them,
if not the majority of them.

00:15:15.500 --> 00:15:19.630
The first is whether or not you want to
allow duplicates of that toolbar item.

00:15:19.740 --> 00:15:23.960
Now, most toolbar items only need to
show up once in a given toolbar.

00:15:23.960 --> 00:15:26.780
For instance, if you're in the Finder,
you really only want one trash

00:15:26.890 --> 00:15:28.800
can in the Finder's toolbar.

00:15:28.960 --> 00:15:31.260
But there are some
sorts of toolbar items,

00:15:31.260 --> 00:15:34.360
such as the URL item that
Ed added in his demo,

00:15:34.460 --> 00:15:36.660
that you want to be able
to show up multiple times,

00:15:36.780 --> 00:15:40.160
because it's not the item itself
that is the important part.

00:15:40.160 --> 00:15:41.860
It's the function that
happens within the item,

00:15:41.860 --> 00:15:45.760
and that function might be different,
even though it's the same toolbar item,

00:15:45.760 --> 00:15:47.990
at least by ID.

00:15:48.610 --> 00:15:50.890
Another attribute is the
Cannot Remove attribute.

00:15:50.980 --> 00:15:54.000
The best example of this is
probably in the System Preferences.

00:15:54.090 --> 00:15:56.260
The Show All icon in the
top left-hand corner of

00:15:56.300 --> 00:15:58.010
System Preferences is always there.

00:15:58.290 --> 00:15:59.970
You never want users to
be able to remove it,

00:16:00.050 --> 00:16:02.730
because if they remove it,
there's no way to show all.

00:16:02.880 --> 00:16:07.840
So one way to do that would be to set
the Cannot Remove Toolbar Item attribute.

00:16:08.000 --> 00:16:10.600
And likewise,
that Show All button is also all the way

00:16:10.600 --> 00:16:14.200
on the left-hand side of the toolbar,
so that the user always has a very

00:16:14.210 --> 00:16:16.520
consistent place to go to to look for it.

00:16:16.540 --> 00:16:19.730
We've got an attribute called Anchor
to the Left Side that you can use

00:16:19.730 --> 00:16:22.040
to get that same sort of behavior.

00:16:22.240 --> 00:16:27.970
Now, some toolbar items are separators,
and that has two basic meanings.

00:16:28.040 --> 00:16:33.030
One, it allows the toolbar item a little
bit more flexibility when it draws.

00:16:33.180 --> 00:16:37.630
But two, it will show up as a separator
in the Overflow menu if

00:16:37.690 --> 00:16:39.950
that needs to be displayed.

00:16:40.260 --> 00:16:43.860
And finally, kind of a subtle point,
like I was saying before,

00:16:43.880 --> 00:16:46.910
when a toolbar item is clicked,
it's going to send out a command

00:16:46.910 --> 00:16:48.540
to your control hierarchy.

00:16:48.590 --> 00:16:51.040
But it can generally do
that in one of two ways.

00:16:51.080 --> 00:16:54.150
By default,
the command will first be sent to the

00:16:54.150 --> 00:16:57.180
toolbar item view that was clicked,
and then that view's parent,

00:16:57.250 --> 00:17:00.040
and then that view's grandparent,
and so on up the containment hierarchy.

00:17:00.150 --> 00:17:03.400
And if nobody handles it,
it'll eventually get to the application.

00:17:03.610 --> 00:17:07.640
But another very popular way to send
commands is through the user focus chain.

00:17:07.670 --> 00:17:11.630
So you can set a toolbar item to please
send your command to the user focus.

00:17:11.640 --> 00:17:14.170
And when you click on it,
instead of going through the

00:17:14.170 --> 00:17:16.230
view containment hierarchy,
it's actually going to

00:17:16.290 --> 00:17:17.600
go to the user focus,
which is, you know,

00:17:17.600 --> 00:17:20.140
an edit field or some other
control that's got focus.

00:17:20.200 --> 00:17:24.790
One good example of the use of this might
be a cut toolbar item that's going to

00:17:24.870 --> 00:17:26.350
do a cut copy paste sort of operation.

00:17:26.400 --> 00:17:29.490
You don't want that to go to the
normal view containment hierarchy.

00:17:29.500 --> 00:17:31.980
You want to make sure that hits
the user focus so it actually

00:17:31.980 --> 00:17:34.340
performs the right cut operation.

00:17:35.490 --> 00:17:37.030
And of course,
the system is going to provide the

00:17:37.180 --> 00:17:39.140
standard sorts of toolbar items for you.

00:17:39.230 --> 00:17:40.570
You know, we have all the basics.

00:17:40.700 --> 00:17:44.200
We've got a space separator line,
the flexible space,

00:17:44.200 --> 00:17:47.500
which allows things to show up on
the right-hand side of the toolbar,

00:17:47.570 --> 00:17:50.890
and a configuration button, which,
when clicked, will automatically bring up

00:17:50.890 --> 00:17:53.730
the configuration sheet to let
the user rearrange everything.

00:17:53.790 --> 00:17:58.100
And each one of these has a unique
identifier string that's in the header

00:17:58.190 --> 00:17:59.970
that you can use to specify that.

00:18:00.150 --> 00:18:02.430
Perhaps in your delegate, you know,
you want to make sure that the

00:18:02.500 --> 00:18:06.100
default set of items has maybe
one toolbar item off on the left,

00:18:06.100 --> 00:18:09.080
and then a separator, and then a space,
maybe another item in a flexible space.

00:18:09.160 --> 00:18:11.870
You can do that with our
standard identifiers.

00:18:12.920 --> 00:18:16.350
But toolbar items are more
interesting when they actually have

00:18:16.350 --> 00:18:18.290
your application content in them.

00:18:18.390 --> 00:18:20.950
So let me show you quickly how you
would create a toolbar item with

00:18:20.950 --> 00:18:23.460
your own custom icon and label.

00:18:23.460 --> 00:18:24.480
It's pretty straightforward.

00:18:24.580 --> 00:18:27.150
You call HIToolbarItemCreate.

00:18:27.150 --> 00:18:29.290
And the first piece of
information you need to pass

00:18:29.290 --> 00:18:31.040
to it is the unique identifier.

00:18:31.140 --> 00:18:33.780
So before I go any further,
this sort of code might be something

00:18:33.780 --> 00:18:37.690
you would write in your delegate to
handle the item creation Carbon events,

00:18:37.690 --> 00:18:38.630
for instance.

00:18:38.740 --> 00:18:41.680
So you give it its unique identifier.

00:18:41.710 --> 00:18:43.800
And then you configure the
various attributes you want.

00:18:43.900 --> 00:18:46.590
In this case,
I'm creating a sort toolbar item.

00:18:46.700 --> 00:18:48.590
And I want to make sure
that goes to the user focus,

00:18:48.690 --> 00:18:51.040
so I set that attribute.

00:18:51.150 --> 00:18:56.240
And it hands me back an HIToolbarItemRef,
which is an HI object like any other.

00:18:56.360 --> 00:18:58.260
And then I go and configure
it a little bit more.

00:18:58.280 --> 00:19:00.970
I want to say, "Okay, hey,
your command ID is this." And I've

00:19:00.970 --> 00:19:03.700
got my sort command already
defined in one of my headers.

00:19:03.700 --> 00:19:06.040
So I assign that to the toolbar item.

00:19:06.140 --> 00:19:08.430
And then I give it a label,
which is simply a CFString.

00:19:08.730 --> 00:19:10.840
And this is probably
a bad coding example,

00:19:10.840 --> 00:19:14.060
because generally, since this is a string
displayed in your interface,

00:19:14.060 --> 00:19:15.960
you would not want to use a
constant like I'm doing here.

00:19:15.960 --> 00:19:19.460
You want to make sure you get a localized
string from your bundle and all that.

00:19:19.610 --> 00:19:22.300
And then you want to set the
image for the toolbar item.

00:19:22.300 --> 00:19:24.750
So in this case,
I've gone off and rendered my image,

00:19:24.830 --> 00:19:28.900
perhaps with-- I think the API name is,
you know, CGCreateImage from Pixmaps

00:19:28.900 --> 00:19:29.600
or something like that.

00:19:29.600 --> 00:19:31.940
You might have another way that
you want to create your image.

00:19:32.040 --> 00:19:33.700
But you associate your
image with the toolbar,

00:19:33.700 --> 00:19:36.430
and that's going to get
rendered automatically.

00:19:37.860 --> 00:19:41.940
But you may have even
bigger needs than that.

00:19:41.940 --> 00:19:46.190
Not all toolbar items are just simple
icons with labels underneath them.

00:19:46.280 --> 00:19:49.730
Some might need to be more complex,
such as edit fields or the

00:19:49.860 --> 00:19:53.270
finder's view style switcher,
or who knows what you're

00:19:53.270 --> 00:19:54.100
going to dream up.

00:19:54.100 --> 00:19:56.250
We allow that as well.

00:19:56.660 --> 00:20:00.960
And the way you achieve that is
through subclassing each toolbar item.

00:20:01.360 --> 00:20:07.700
So by default, every toolbar item--well,
step back one bit.

00:20:07.750 --> 00:20:10.370
When a toolbar item needs
to be represented by a view,

00:20:10.370 --> 00:20:13.200
that toolbar item will be sent
a Carbon event asking it to

00:20:13.200 --> 00:20:14.880
please create the view for me.

00:20:14.880 --> 00:20:17.070
And by default,
the view that's created is

00:20:17.080 --> 00:20:20.090
simply one that draws an image
and a label underneath it.

00:20:20.090 --> 00:20:23.630
If you want to change that behavior,
you subclass HIToolbarItem

00:20:23.630 --> 00:20:27.620
to override the
KEventToolbarItemCreateCustomView Carbon

00:20:27.620 --> 00:20:28.240
event.

00:20:28.310 --> 00:20:31.400
And now you can create whatever you want.

00:20:31.400 --> 00:20:35.740
The only condition we've got
is that it must be an HIView.

00:20:35.740 --> 00:20:39.070
It must be HIViewsavvy,
be ready to draw with core graphics,

00:20:39.070 --> 00:20:43.200
be ready to call the HIView bounds
and frame getting APIs as necessary,

00:20:43.200 --> 00:20:44.710
and do all that stuff.

00:20:44.770 --> 00:20:49.180
And the other requirement is it needs to
support KEventControlGetSizeConstraints.

00:20:49.180 --> 00:20:52.460
That's a Carbon event we added
to the control suite in Jaguar,

00:20:52.510 --> 00:20:56.990
which is used by the toolbar when
it's dynamically repositioning things.

00:20:57.000 --> 00:20:58.700
You know,
the toolbar needs to know how big a

00:20:58.700 --> 00:20:59.500
given item is so it can shove stuff over.

00:20:59.560 --> 00:21:03.740
Figure out when to display the
overflow menu and things like that.

00:21:03.740 --> 00:21:07.960
So you need to make sure your
view supports that Carbon event.

00:21:07.960 --> 00:21:11.630
One important thing to note,
on the Jaguar WWDC seed that we gave you,

00:21:11.630 --> 00:21:17.000
I don't think any of our standard
views support this Carbon event yet.

00:21:17.000 --> 00:21:18.970
So if you're going to try to
take one of our existing views

00:21:18.990 --> 00:21:21.220
and slap it in a toolbar and
you see weird things happening,

00:21:21.220 --> 00:21:23.980
it's probably because you need
to support this Carbon event.

00:21:23.980 --> 00:21:27.750
So wire that up too when you're
playing around with the seed.

00:21:30.160 --> 00:21:33.110
So in general,
the toolbar is going to handle item

00:21:33.110 --> 00:21:36.940
creation for you basically by sending
Carbon events to the delegate.

00:21:37.030 --> 00:21:40.690
And that will probably
serve 95% of your needs.

00:21:40.760 --> 00:21:43.590
But there may be some cases
where you find that you need

00:21:43.670 --> 00:21:46.580
to add some items on the fly,
or perhaps you don't want to use

00:21:46.580 --> 00:21:48.100
the toolbar's auto-saving feature.

00:21:48.100 --> 00:21:50.600
You want to load your toolbar
items from someplace else,

00:21:50.640 --> 00:21:52.420
and so you need to build
them up on the fly.

00:21:52.530 --> 00:21:54.380
You can do that with a
set of very simple APIs.

00:21:54.450 --> 00:21:57.460
You can append items,
insert them anywhere in the toolbar,

00:21:57.540 --> 00:21:59.920
or remove them if you need to.

00:22:00.840 --> 00:22:03.670
And to make your life even easier,
the window is going to take

00:22:03.830 --> 00:22:06.540
care of some of the toolbar
management for you automatically.

00:22:06.650 --> 00:22:09.070
So, for instance,
if you want to support a hide/show

00:22:09.100 --> 00:22:12.860
toolbar item in your menu bar,
or maybe even a configure

00:22:12.860 --> 00:22:16.740
toolbar item in your menu bar,
you can put standard commands behind

00:22:16.740 --> 00:22:19.770
those menu items in your menu bar,
and when the user

00:22:19.790 --> 00:22:23.040
chooses those menu items,
the window will receive the event

00:22:23.390 --> 00:22:25.840
and automatically bring up the
configuration sheet in the toolbar,

00:22:25.840 --> 00:22:27.700
or hide or show it as appropriate.

00:22:27.700 --> 00:22:30.000
And you're not limited to just
putting these commands in the menus.

00:22:30.000 --> 00:22:33.140
You can put those commands in
other controls if you want.

00:22:36.080 --> 00:22:40.050
So another cool new control we've
introduced for Jaguar is the combo box.

00:22:40.160 --> 00:22:41.530
Totally full featured.

00:22:41.540 --> 00:22:44.350
We looked at many other combo box APIs.

00:22:44.450 --> 00:22:46.680
We tried to get the best of
every world we possibly could,

00:22:46.780 --> 00:22:49.200
talk to our HI designers,
figure out the right

00:22:49.200 --> 00:22:50.380
way to display the list.

00:22:50.470 --> 00:22:54.160
And what we found out was there's
about 10 zillion permutations

00:22:54.160 --> 00:22:55.760
of how to do these things.

00:22:55.860 --> 00:22:58.490
So we allow you to do
just about all those.

00:22:58.580 --> 00:23:00.340
You can auto complete the text.

00:23:00.550 --> 00:23:02.700
You can have the list sorted.

00:23:02.700 --> 00:23:04.160
You can control the list dimensions.

00:23:04.160 --> 00:23:06.800
You can control when the list pops
up and all these kinds of things.

00:23:06.920 --> 00:23:08.800
All through a very simple API.

00:23:08.950 --> 00:23:11.910
Now fundamentally,
you create one of these combo

00:23:12.060 --> 00:23:14.590
boxes through HIComboBoxCreate.

00:23:14.810 --> 00:23:18.200
Again, a very boring name,
but it gets the job done.

00:23:18.320 --> 00:23:21.340
So one important thing to note
about this API before I describe

00:23:21.340 --> 00:23:24.500
it anymore is the fact that
it's going to create an HI view.

00:23:24.500 --> 00:23:26.740
And by default--well, not by default.

00:23:26.980 --> 00:23:30.200
When you create an HI view,
it's not associated with any window.

00:23:30.200 --> 00:23:31.800
It's out in limbo someplace.

00:23:31.800 --> 00:23:32.600
And it's not going to be displayed.

00:23:32.600 --> 00:23:34.850
It's not going to be displayed or even
be able to be tracked or anything like

00:23:35.100 --> 00:23:36.600
that until you put it in a window.

00:23:36.680 --> 00:23:39.110
And you simply put it in a
window by embedding it into the

00:23:39.170 --> 00:23:43.320
appropriate parent view in whatever
window you want to put it into.

00:23:44.090 --> 00:23:48.000
So when you call HIComboBoxCreate,
you need to supply a couple things.

00:23:48.060 --> 00:23:49.790
You give it some default
text for the edit field,

00:23:49.790 --> 00:23:51.500
if you feel like giving it default text.

00:23:51.660 --> 00:23:54.000
And you give it an array of
items to populate the list.

00:23:54.000 --> 00:23:55.690
And that's pretty much about it.

00:23:55.800 --> 00:23:58.480
You can pass in attributes to vary
behaviors and stuff like that.

00:23:58.480 --> 00:24:01.100
But we've also got a suite of
APIs that let you customize

00:24:01.100 --> 00:24:03.640
the behavior on the fly,
alter list items on the fly,

00:24:03.640 --> 00:24:05.970
add and remove them,
and do various things.

00:24:05.990 --> 00:24:08.000
It's really, really easy to use.

00:24:08.000 --> 00:24:09.870
This screenshot,
I think I threw something

00:24:09.870 --> 00:24:12.430
together in about two minutes
to make the screenshot work.

00:24:12.430 --> 00:24:14.000
So it's really, really simple.

00:24:16.190 --> 00:24:18.210
So another view that I talked
about is the scroll view.

00:24:18.230 --> 00:24:20.090
We finally got a scroll view in Carbon.

00:24:20.100 --> 00:24:21.370
It's really, really cool.

00:24:21.450 --> 00:24:23.200
It does all kinds of stuff for you.

00:24:23.200 --> 00:24:24.800
It makes your life really, really easy.

00:24:24.800 --> 00:24:27.370
I'm probably going to change data
browser to start using the scroll

00:24:27.370 --> 00:24:29.600
view to simplify some stuff,
and that will allow me to fix data

00:24:29.600 --> 00:24:31.200
browser bugs a little bit more quickly,
too.

00:24:31.200 --> 00:24:35.860
So that will be good for everybody.

00:24:35.860 --> 00:24:41.340
So simply speaking,
the scroll view is a way to allow the

00:24:41.400 --> 00:24:45.460
toolbox to scroll some larger canvas,
some larger image, or maybe a text flow

00:24:45.460 --> 00:24:46.060
or something like that.

00:24:46.060 --> 00:24:47.790
Within a small space.

00:24:48.070 --> 00:24:51.660
And the toolbox is going to manage
the scroll bars for you automatically.

00:24:51.660 --> 00:24:54.620
It'll deal with everything if
the scroll view gets smaller.

00:24:54.620 --> 00:24:56.660
It's just really, really easy to use.

00:24:56.660 --> 00:25:01.050
You create one of these scroll
views with hiscrollviewcreate.

00:25:01.100 --> 00:25:05.900
And again, because this is an HI view,
it's not bound to any window.

00:25:05.900 --> 00:25:07.450
So then you would embed it.

00:25:07.600 --> 00:25:09.900
You would, yeah,
I guess embed's the right word.

00:25:09.900 --> 00:25:13.500
It's any parent view that you wanted.

00:25:13.810 --> 00:25:15.480
Uh, let's see.

00:25:15.540 --> 00:25:16.890
All right, so-- Oh, right.

00:25:16.940 --> 00:25:20.900
And after you've created
this scroll view,

00:25:21.130 --> 00:25:25.460
You need to embed your canvas or
your content into the scroll view.

00:25:25.590 --> 00:25:29.610
And your content is any other view,
so long as that view

00:25:29.610 --> 00:25:30.940
supports a certain protocol.

00:25:30.970 --> 00:25:33.660
Now,
what do I mean by a content or a canvas?

00:25:33.660 --> 00:25:36.040
This kind of gives you an idea
of what I'm talking about.

00:25:36.170 --> 00:25:38.030
The scroll view is what
I showed on that first slide.

00:25:38.100 --> 00:25:42.290
It's just the fully opaque part
of the picture here with the

00:25:42.290 --> 00:25:43.480
image in it and the scroll bars.

00:25:43.610 --> 00:25:44.840
That's the whole scroll view.

00:25:44.970 --> 00:25:48.450
Whereas your canvas is the larger flow,
i.e., the image that

00:25:48.450 --> 00:25:50.180
we're showing behind that.

00:25:51.820 --> 00:25:54.840
And the way this all works is simply
by making sure your Canvas view

00:25:54.940 --> 00:25:57.900
supports the scroll view protocol.

00:25:58.990 --> 00:26:01.980
So the ScrollView protocol
is a set of three events,

00:26:01.980 --> 00:26:06.990
and the first of which is, "Hey, Canvas,
get me your info," and that's the

00:26:06.990 --> 00:26:09.520
KEVENT_SCROLLable_GetInfo Carbon event.

00:26:12.470 --> 00:26:16.270
So when your canvas receives that event,
you need to supply a set of information

00:26:16.360 --> 00:26:19.800
that describes how big the canvas is.

00:26:19.800 --> 00:26:23.280
You're going to tell it literally
the pixels wide and pixels high,

00:26:23.280 --> 00:26:25.560
or in fact it doesn't
even have to be pixels.

00:26:25.560 --> 00:26:27.510
It can be in whatever unit you want.

00:26:27.520 --> 00:26:30.700
You need to tell where
you're scrolled to right now,

00:26:30.700 --> 00:26:34.600
how much you want to scroll,
if the user clicks in the arrows in

00:26:34.600 --> 00:26:37.900
the page up and page down parts of
the scroll bar and stuff like that,

00:26:37.910 --> 00:26:40.230
as well as how much are
you showing right now.

00:26:40.370 --> 00:26:43.950
And that allows us to use proportional
scroll bar thumbs and things like that.

00:26:45.720 --> 00:26:49.010
And so you'll receive this event any
time the scroll view needs to rebuild

00:26:49.010 --> 00:26:52.990
its scroll bars or rethink the way
it's laying out and stuff like that.

00:26:53.110 --> 00:26:55.600
The next event your canvas
is going to receive is the

00:26:55.600 --> 00:26:58.350
KEventsScrollableScrollToCarbon event.

00:26:58.430 --> 00:27:00.860
And simply speaking,
this Carbon event is sent to your

00:27:00.860 --> 00:27:03.350
canvas as a request to scroll now,
do it now, right?

00:27:03.430 --> 00:27:06.100
The user has just clicked
the thumb and dragged down.

00:27:06.180 --> 00:27:08.890
And the scroll view knows that because
it owns the scroll bar and has an

00:27:08.890 --> 00:27:10.500
action proc associated with it.

00:27:10.530 --> 00:27:12.760
So then it sends your canvas
the ScrollToCarbon event.

00:27:12.760 --> 00:27:16.410
It knows how many units you need to
scroll and whatever your unit space is.

00:27:16.500 --> 00:27:19.320
And so your job is just
to move your content.

00:27:19.410 --> 00:27:22.480
And so that might be as
simple as redrawing or to

00:27:22.480 --> 00:27:26.750
make your life even easier,
we have this HIViewScrollRect API.

00:27:26.810 --> 00:27:29.810
Ed showed off the power of
this API in one of his demos,

00:27:29.820 --> 00:27:33.220
but the subtlety might have
not quite been apparent.

00:27:33.310 --> 00:27:37.030
Essentially what this API lets
you do is take any view and

00:27:37.060 --> 00:27:39.000
say scroll it by this amount.

00:27:39.050 --> 00:27:42.760
And the HIView mechanism will do the
right thing with respect to the amount

00:27:42.760 --> 00:27:42.760
of scrolls that you need to scroll.

00:27:42.800 --> 00:27:44.740
So it will do the scroll rect to
speed and efficiency as best it can.

00:27:44.760 --> 00:27:48.210
It will kind of do a scroll
rect like operation on all the

00:27:48.210 --> 00:27:50.090
bits that are easily scrollable.

00:27:50.120 --> 00:27:54.260
But then it takes all the revealed areas
and makes sure to invalidate those.

00:27:54.260 --> 00:27:58.280
As well as making sure that any content
that happened to be on top of you,

00:27:58.410 --> 00:28:01.000
like maybe a peer view that
was above you in z order.

00:28:01.020 --> 00:28:04.600
Or, you know, a peer of your parent,
anybody that's above you

00:28:04.600 --> 00:28:06.120
in the HIView z order.

00:28:06.120 --> 00:28:09.050
And invalidate that area because
that needs to get redrawn.

00:28:09.060 --> 00:28:11.780
So in an optimal case,
it's going to do a really

00:28:11.790 --> 00:28:13.760
flas-- really fast blit.

00:28:13.760 --> 00:28:15.260
But if it needs to,
it'll jump through a few more hoops

00:28:15.260 --> 00:28:17.880
to make sure invalidation happens.

00:28:19.280 --> 00:28:23.740
So the last Carbon event is the k-event
scrollable info changed Carbon event.

00:28:23.740 --> 00:28:27.010
And this is not one that your
canvas is going to receive,

00:28:27.010 --> 00:28:29.740
but it's one that your canvas must send.

00:28:29.740 --> 00:28:33.740
There's occasionally times when
a canvas changes in some fashion.

00:28:33.740 --> 00:28:36.940
For instance,
your canvas might be a huge text

00:28:36.940 --> 00:28:39.060
editing engine of some type.

00:28:39.100 --> 00:28:43.260
And as the user's typing,
the height of your total pay--or all

00:28:43.260 --> 00:28:46.970
of your text is getting longer and
longer and longer or maybe the user

00:28:46.970 --> 00:28:50.020
goes and changes the font setting and
that completely causes re-layouts.

00:28:50.160 --> 00:28:53.940
Now your document's twice as long,
twice as wide, who knows what.

00:28:53.970 --> 00:28:56.770
But now you need to make sure
the scroll view scroll bars

00:28:57.020 --> 00:28:58.900
are updated to reflect reality.

00:28:58.940 --> 00:29:01.640
And you do that by sending the
k-event scrollable info changed

00:29:01.670 --> 00:29:03.390
Carbon event to the scroll view.

00:29:03.430 --> 00:29:06.840
The scroll view will see that and say,
"Ah, okay, I know you've changed." So it

00:29:06.840 --> 00:29:09.790
immediately turns around and says,
"Hey, give me your info." And in fact,

00:29:09.850 --> 00:29:12.880
it might not even immediately
turn around and ask for your info.

00:29:12.880 --> 00:29:15.980
It might defer that until
later if it needs to.

00:29:15.980 --> 00:29:18.360
One important thing to note-- So,
we haven't implemented

00:29:18.360 --> 00:29:19.880
this in the Jaguar seed.

00:29:19.960 --> 00:29:22.050
In fact,
we just found out about the need for

00:29:22.050 --> 00:29:25.900
it last week--or earlier this week,
I guess, as we were getting ready

00:29:25.900 --> 00:29:27.200
for one of the demos.

00:29:27.230 --> 00:29:29.590
So we'll have this in
by the time we ship.

00:29:30.970 --> 00:29:32.260
So another really,
really cool thing I want

00:29:32.260 --> 00:29:33.040
to talk about is drawers.

00:29:33.140 --> 00:29:34.280
Yeah, we've got drawers in Carbon.

00:29:34.280 --> 00:29:34.940
It's really cool.

00:29:34.940 --> 00:29:35.700
You know what they are.

00:29:35.700 --> 00:29:36.790
You've seen them in mail.

00:29:36.890 --> 00:29:38.900
You want to use them, and now you can.

00:29:38.970 --> 00:29:41.200
And it's really, really simple.

00:29:42.620 --> 00:29:44.970
There's not a whole lot of
new APIs in the drawer API.

00:29:45.050 --> 00:29:47.840
In fact, you create a drawer like
you create any other window.

00:29:47.840 --> 00:29:49.430
You call create new window.

00:29:49.520 --> 00:29:52.610
And we've got a brand new window class
called kDrawerWindowClass that defines,

00:29:52.660 --> 00:29:55.600
you know, the right frame and all the
right look and stuff like that.

00:29:55.600 --> 00:29:57.480
So you create it.

00:29:57.590 --> 00:30:00.840
And then in all likelihood,
you want your drawer to have the

00:30:00.840 --> 00:30:02.810
appropriate theme background.

00:30:02.810 --> 00:30:07.650
And we've got an appearance manager theme
brush called kThemeBrushDrawerBackground

00:30:07.710 --> 00:30:09.090
that you can associate with your window
and it'll do the right stripey pattern.

00:30:09.750 --> 00:30:12.800
And then after you've created the drawer,
you need to bind it to a parent window.

00:30:12.870 --> 00:30:16.970
And that parent window is the one
out of which the drawer slides.

00:30:17.040 --> 00:30:19.340
In this case,
I've got a document window in my app,

00:30:19.380 --> 00:30:20.680
and I want to associate
the drawer with it.

00:30:20.700 --> 00:30:23.460
So it's just a really
quick and easy step.

00:30:23.510 --> 00:30:25.960
And after that, you're pretty much done.

00:30:26.000 --> 00:30:27.540
Now, you might want to
configure it a little bit,

00:30:27.560 --> 00:30:30.190
and we've got a couple configuration
APIs if you need to use them.

00:30:30.310 --> 00:30:32.650
But generally speaking,
just creating the drawer and

00:30:32.650 --> 00:30:35.160
binding it to the window is enough.

00:30:35.390 --> 00:30:39.520
So the first configuration
API is setDrawerPreferredEdge.

00:30:39.830 --> 00:30:43.990
By default, when a drawer slides
out of a parent window,

00:30:43.990 --> 00:30:47.290
the edge it slides out from
is based on two things.

00:30:47.300 --> 00:30:50.150
It's based on the system direction,
whether it's a left-to-right

00:30:50.170 --> 00:30:52.680
language or a right-to-left language,
and it's also based on the

00:30:52.680 --> 00:30:54.150
amount of screen real estate,
right?

00:30:54.240 --> 00:30:56.390
If a drawer would normally try
to slide out of the right side,

00:30:56.390 --> 00:30:58.040
but there's not enough
room on the right side,

00:30:58.080 --> 00:30:59.800
it'll shoot out the
left side or whatever.

00:30:59.800 --> 00:31:03.630
But if you want to change that behavior,
or even make the drawer slide out

00:31:03.630 --> 00:31:07.000
of the bottom or even the top of
your window if you have that need,

00:31:07.000 --> 00:31:09.800
you can use the
SetDrawerPreferredEdge API.

00:31:10.630 --> 00:31:17.850
Now, the other configuration
API that's specific to drawers

00:31:17.890 --> 00:31:17.890
is called setDrawerOffsets.

00:31:18.280 --> 00:31:22.730
Left to its own devices,
a drawer will appear with its top

00:31:22.730 --> 00:31:26.340
edge aligned with the top edge
of your window's content and the

00:31:26.410 --> 00:31:29.360
bottom edge aligned with the bottom
edge of your window's content.

00:31:29.470 --> 00:31:33.190
But if you need to change this behavior,
you can do that with set drawer offsets.

00:31:33.200 --> 00:31:35.790
You know, for whatever reason,
if you have 50 pixels down at the

00:31:35.800 --> 00:31:39.590
bottom of your window that you
don't want the drawer to be sort

00:31:39.590 --> 00:31:42.540
of overlapping linearly with,
you don't have to.

00:31:42.540 --> 00:31:45.380
You can just say, "Hey,
have your bottom edge be 50

00:31:45.380 --> 00:31:46.990
pixels up from the bottom."

00:31:47.290 --> 00:31:50.450
And also by default,
when you resize the parent window,

00:31:50.450 --> 00:31:53.420
a drawer will resize with
the parent window subject to

00:31:53.420 --> 00:31:55.160
the offsets you've supplied.

00:31:55.160 --> 00:31:58.160
If you want to constrain the drawer
with respect to its resizing,

00:31:58.160 --> 00:32:00.560
you can do it one of two different ways.

00:32:00.580 --> 00:32:02.940
If you call setWindowResizeLimits,
which is just a normal

00:32:02.940 --> 00:32:04.890
window manager API,
you can set whatever

00:32:04.890 --> 00:32:06.900
resize limits you want,
min and a max,

00:32:06.980 --> 00:32:09.000
and the drawer will respect that.

00:32:09.000 --> 00:32:11.260
And likewise,
we send out a pair of Carbon events,

00:32:11.260 --> 00:32:13.800
getMinimumSize and
getMaximumSize Carbon events,

00:32:13.840 --> 00:32:16.520
so that if you need to determine
your drawer's minimum and

00:32:16.520 --> 00:32:19.430
maximum size dynamically,
you can just attach a Carbon event

00:32:19.430 --> 00:32:22.020
handler to your drawer window,
listen to those Carbon events,

00:32:22.090 --> 00:32:25.180
respond with the right values,
and the toolbox will do all

00:32:25.260 --> 00:32:27.320
the right stuff for you.

00:32:29.010 --> 00:32:33.300
So drawer event handling is
kind of a three part story.

00:32:33.370 --> 00:32:36.390
The best version of the story comes when
you use the standard window handlers and

00:32:36.390 --> 00:32:38.050
as much of Carbon events as possible.

00:32:38.080 --> 00:32:40.360
Because when you use the
standard window handlers,

00:32:40.420 --> 00:32:43.900
all the interaction happens for free.

00:32:44.070 --> 00:32:49.180
But if you need to use
more wait next event driven

00:32:49.810 --> 00:32:50.800
Event flow.

00:32:50.810 --> 00:32:51.710
You can do that too.

00:32:51.820 --> 00:32:54.390
You just need to make sure you
handle it like any other window.

00:32:54.400 --> 00:32:57.920
You know, you call handle control click,
find control, you know,

00:32:57.970 --> 00:33:01.390
do all those various things
that you're used to doing.

00:33:01.540 --> 00:33:05.030
But one thing to keep in mind
is that the K event window draw

00:33:05.030 --> 00:33:08.800
content Carbon event is required
to make the drawer work properly.

00:33:08.890 --> 00:33:10.660
But that's got kind of an asterisk on it.

00:33:10.760 --> 00:33:12.410
So first some background.

00:33:12.490 --> 00:33:15.600
When a drawer first slides
out of its parent window,

00:33:15.600 --> 00:33:18.650
it needs to have content in it.

00:33:18.680 --> 00:33:21.990
It's not like you're going to receive an
update event as it's sliding out and get

00:33:22.020 --> 00:33:25.360
a chance to paint each stripe of each
frame of the animation as it slides out.

00:33:25.360 --> 00:33:26.900
That'd be kind of crazy.

00:33:26.990 --> 00:33:30.190
So we send this Carbon event to the
drawer in an effort to pre-render the

00:33:30.190 --> 00:33:33.390
drawer so that it can slide out in
one fell swoop and be nice and smooth

00:33:33.460 --> 00:33:36.660
and have a pretty image there already.

00:33:36.760 --> 00:33:41.170
Now the big asterisk I was talking about
with respect to this is that if you're

00:33:41.170 --> 00:33:46.220
using a full-blown compositing window,
you've turned HIView on for that window,

00:33:46.330 --> 00:33:47.520
you don't need to worry about
the draw content Carbon event.

00:33:47.520 --> 00:33:49.360
Carbon event,
because HIV is going to take

00:33:49.360 --> 00:33:51.940
care of all the drawing for you.

00:33:52.220 --> 00:33:54.630
And in fact,
draw content is not even required if

00:33:54.630 --> 00:33:58.740
you're a standard window handler--sorry,
if you're using the standard window

00:33:58.740 --> 00:34:02.940
handler on that drawer and all you
have is controls in that window,

00:34:02.940 --> 00:34:05.370
the standard window handler will
make sure that the draw content

00:34:05.380 --> 00:34:07.130
Carbon event gets serviced automatically.

00:34:07.130 --> 00:34:09.890
So that'll just happen for free.

00:34:11.480 --> 00:34:13.770
And so you've created a drawer,
you've bound it to the window,

00:34:13.840 --> 00:34:15.990
and in some fashion you need to
make it accessible to the user.

00:34:16.010 --> 00:34:17.460
You need to slide it in and out.

00:34:17.550 --> 00:34:18.760
There's two different ways to do that.

00:34:18.760 --> 00:34:22.230
We've got a high level
API and a low level API.

00:34:22.320 --> 00:34:24.110
The high level API is ToggleDrawer.

00:34:24.370 --> 00:34:25.130
Really straightforward.

00:34:25.230 --> 00:34:27.710
You just pass in your
drawer and that's it.

00:34:27.800 --> 00:34:29.060
The drawer already knows its state.

00:34:29.060 --> 00:34:30.800
It knows if it's closed,
it knows if it's open,

00:34:30.800 --> 00:34:31.840
and it does the reverse.

00:34:31.840 --> 00:34:34.240
It's going to animate and slide out.

00:34:34.340 --> 00:34:36.980
The important note about
ToggleDrawer is that it operates

00:34:36.980 --> 00:34:38.440
completely asynchronously.

00:34:38.540 --> 00:34:41.840
So as soon as you call ToggleDrawer,
that API is going to return,

00:34:41.840 --> 00:34:45.810
control goes back to your application,
and the drawer is basically

00:34:45.810 --> 00:34:48.170
going to slide out on a timer.

00:34:48.270 --> 00:34:50.830
So in order for the drawer
to actually slide out,

00:34:51.130 --> 00:34:53.580
you need to make sure you go back
into your normal event processing.

00:34:53.580 --> 00:34:55.740
You know, call wait next event or
run application-- well,

00:34:55.740 --> 00:34:57.800
if you called run application event loop,
you don't have to worry about this.

00:34:57.800 --> 00:35:02.950
But call wait next event is appropriate
to make sure timers fire and things like

00:35:02.950 --> 00:35:05.440
that happen so the drawer slides out.

00:35:05.510 --> 00:35:08.400
The lower level APIs give
you not only configurability,

00:35:08.400 --> 00:35:11.590
but they also allow you to slide the
drawer synchronously if you need to.

00:35:11.600 --> 00:35:14.150
OpenDrawer and ClosedDrawer
obviously do what they say.

00:35:14.160 --> 00:35:17.600
You just pass the drawer and you
pass some configuration information.

00:35:17.600 --> 00:35:19.560
You know, you can make it
synchronous if you need to,

00:35:19.560 --> 00:35:22.050
if you've got that need.

00:35:24.670 --> 00:35:28.420
So sometimes it's not enough to
just open or close the drawer.

00:35:28.610 --> 00:35:32.350
Parts of your application may need
to update its interface based on

00:35:32.350 --> 00:35:34.310
whether the drawer is open or closed.

00:35:34.370 --> 00:35:37.830
You might want to change the state of
a menu item in the menu bar to switch

00:35:37.830 --> 00:35:40.930
from open drawer to closed drawer,
or who knows what.

00:35:41.010 --> 00:35:43.260
And to that end,
we've added a set of four

00:35:43.260 --> 00:35:47.570
Carbon events that you can listen
to to basically be notified when

00:35:47.570 --> 00:35:49.580
something's happening to the drawer.

00:35:49.650 --> 00:35:53.030
When you call an API like
toggleDrawer when a drawer is closed,

00:35:53.180 --> 00:35:56.120
or if you just call openDrawer,
we're immediately going to send

00:35:56.140 --> 00:36:00.640
a K event window drawer opening
Carbon event to the drawer window,

00:36:00.700 --> 00:36:02.530
and I think to the application as well.

00:36:02.540 --> 00:36:05.150
And if you're listening for that,
you can do whatever

00:36:05.150 --> 00:36:06.440
updating you need to do.

00:36:06.590 --> 00:36:09.800
And likewise, once the drawer has
completely finished opening,

00:36:09.800 --> 00:36:12.440
we're going to send the K event
window drawer opened Carbon event,

00:36:12.440 --> 00:36:13.900
past tense.

00:36:13.900 --> 00:36:15.930
So you can do whatever
you need to do there.

00:36:16.070 --> 00:36:18.320
And likewise,
we've got two other Carbon events for

00:36:18.320 --> 00:36:22.640
drawer closing and drawer closed as well.

00:36:25.100 --> 00:36:27.450
So the Services menu is really,
really cool.

00:36:27.460 --> 00:36:31.080
It's not specifically a new
Jaguar feature per se because

00:36:31.080 --> 00:36:33.730
we shipped it in Mac OS X1.

00:36:33.830 --> 00:36:35.330
But it's cool for two main reasons.

00:36:35.410 --> 00:36:39.060
It's really cool for users
because they may want some

00:36:39.060 --> 00:36:41.930
functionality in your application,
but for whatever reason you

00:36:41.930 --> 00:36:43.500
couldn't get it out in this release.

00:36:43.590 --> 00:36:45.350
But there might be a service
out there that can provide

00:36:45.450 --> 00:36:46.650
that functionality for them.

00:36:46.750 --> 00:36:49.560
So it kind of in a way gives users,
you know,

00:36:49.560 --> 00:36:51.960
free functionality in your application.

00:36:52.050 --> 00:36:54.380
And it's really cool from a
developer perspective because

00:36:54.550 --> 00:36:56.270
it's really easy to support.

00:36:56.370 --> 00:37:00.010
And at the same time, it gets this free
functionality out there.

00:37:00.020 --> 00:37:01.690
You know, you can now say, "Hey,
I'm services savvy.

00:37:01.700 --> 00:37:03.860
I'm integrated with this app
or that app." Or in this case,

00:37:03.860 --> 00:37:05.200
you know, you're integrated with mail.

00:37:05.200 --> 00:37:07.880
You can now mail text directly
out of some word processing

00:37:07.880 --> 00:37:10.310
document or something like that.

00:37:11.540 --> 00:37:13.130
So there's two pieces to services.

00:37:13.190 --> 00:37:16.060
The service clients,
which are your applications,

00:37:16.060 --> 00:37:17.460
it's your productivity app.

00:37:17.550 --> 00:37:19.540
And there's also service providers.

00:37:19.680 --> 00:37:22.370
First I want to talk
about service clients.

00:37:22.740 --> 00:37:26.700
Service clients do their work via a
set of three different Carbon events

00:37:26.700 --> 00:37:28.940
that seem very much copy/paste like.

00:37:28.940 --> 00:37:32.650
Well, because they're basically
copy and paste operations.

00:37:32.720 --> 00:37:35.300
But there's one other Carbon event
that's important and isn't

00:37:35.300 --> 00:37:39.260
exactly copy and paste like,
and that's kEventServiceGetTypes.

00:37:39.290 --> 00:37:44.050
Your application will be sent this
GetTypes Carbon event when a service is

00:37:44.050 --> 00:37:45.790
considering looking at your interface.

00:37:45.790 --> 00:37:48.370
Essentially when the user pulls
down the service menu and the

00:37:48.410 --> 00:37:51.400
service's engine needs to figure out
which menu item should be enabled

00:37:51.400 --> 00:37:54.630
and disabled and stuff like that,
they'll send this Carbon event

00:37:54.640 --> 00:37:55.880
to your application.

00:37:56.230 --> 00:37:58.920
So your application has two
different responsibilities when

00:37:58.930 --> 00:38:00.460
it receives this Carbon event.

00:38:00.460 --> 00:38:04.800
You need to explain what data
you can immediately export now.

00:38:04.800 --> 00:38:08.080
And that's fundamentally
asking the question,

00:38:08.080 --> 00:38:10.130
what does the user have
selected right now?

00:38:10.200 --> 00:38:12.420
So if you're a basic text
editing application and the

00:38:12.420 --> 00:38:14.770
user's got some text selected,
you might say, hey,

00:38:14.770 --> 00:38:17.520
I can give you text and I can
give you Unicode text and styled

00:38:17.520 --> 00:38:20.550
text and who knows how many other
varieties of text you want to offer.

00:38:20.580 --> 00:38:21.930
You can hand that over.

00:38:21.930 --> 00:38:25.820
But if you're a really, really rich,
full-featured text editor and

00:38:25.820 --> 00:38:28.910
maybe you support QuickTime movies,
and in fact the user's got a

00:38:28.910 --> 00:38:32.190
QuickTime movie in your document
and it's selected right now,

00:38:32.320 --> 00:38:35.750
and you received this Carbon event,
you'd not only want to return

00:38:35.810 --> 00:38:40.060
text if that's what's selected,
but you'll also want to return movie.

00:38:40.060 --> 00:38:42.120
And likewise,
the other responsibility you

00:38:42.160 --> 00:38:44.990
have is a definition of what
flavors you can receive right now.

00:38:44.990 --> 00:38:47.390
So in this case of a really,
really full-featured text editor,

00:38:47.410 --> 00:38:51.070
you might say these three varieties
of text and you might say movie and

00:38:51.160 --> 00:38:54.590
JPEG and PICT and various other image
types and maybe sound or whatever,

00:38:54.610 --> 00:38:58.740
but it's just up to you to say, hey,
these are the things I could accept

00:38:58.810 --> 00:39:01.780
in sort of a paste-like operation.

00:39:01.800 --> 00:39:06.500
And the way you report this
information are via arrays of strings.

00:39:06.500 --> 00:39:09.590
This event comes in with
two mutable arrays that you

00:39:09.590 --> 00:39:11.500
can look at and manipulate.

00:39:11.500 --> 00:39:14.000
And it's your job to just fill that
up with the appropriate strings.

00:39:14.110 --> 00:39:16.320
So what are the appropriate strings?

00:39:16.330 --> 00:39:17.390
Well, traditionally,
Carbon applications are not necessarily

00:39:17.440 --> 00:39:18.720
the same as the other types of text.

00:39:18.780 --> 00:39:20.340
So you can see that the two options
have dealt with the notion of

00:39:20.340 --> 00:39:22.430
flavors in terms of OS types,
right?

00:39:22.510 --> 00:39:25.400
PICT, M-O-O-V-T-E-X-T or whatever.

00:39:25.400 --> 00:39:30.530
But in order to be compatible with
the existing services implementation,

00:39:30.580 --> 00:39:32.760
which was originally born
from Cocoa and whatnot,

00:39:32.760 --> 00:39:36.510
they use these NSStrings to
represent the flavor types,

00:39:36.780 --> 00:39:40.380
you need to convert those OS types
into the appropriate string.

00:39:40.380 --> 00:39:43.020
And you do that with create
type string with OS type.

00:39:43.020 --> 00:39:46.300
So if you can accept as paste text,
you would simply call create

00:39:46.430 --> 00:39:48.180
type string with OS type,
paste text,

00:39:48.180 --> 00:39:50.920
it's going to hand you back a string,
stick that string in the array,

00:39:50.930 --> 00:39:53.670
and you return from your
Carbon event handler.

00:39:54.550 --> 00:39:57.180
So then there's two events
that get sent to you when a

00:39:57.180 --> 00:39:58.940
service is actually invoked.

00:39:58.940 --> 00:40:00.730
The first is KEventServiceCopy.

00:40:00.740 --> 00:40:03.700
And this may not always get sent to you,
but I'll explain more why later

00:40:03.700 --> 00:40:05.490
when I talk about service providers.

00:40:05.500 --> 00:40:10.570
KEventServiceCopy is a request for
you to package up the selection

00:40:10.570 --> 00:40:13.180
and hand it off to the service.

00:40:13.400 --> 00:40:16.350
So in this Carbon event,
you'll find a scrap ref.

00:40:16.450 --> 00:40:20.660
And just like using the normal
Scrap Manager APIs in Carbon events,

00:40:20.760 --> 00:40:24.000
you just package up all your data,
put it in that scrap ref, and return.

00:40:24.110 --> 00:40:26.200
And then the system goes off
and talks to the service.

00:40:26.340 --> 00:40:29.590
And then you might also be sent a
K event service paste Carbon event,

00:40:29.680 --> 00:40:33.340
which is a request to, hey,
I've just modified this data for you,

00:40:33.340 --> 00:40:35.430
or actually the service has
just modified this data for you.

00:40:35.710 --> 00:40:37.540
Please,
please put it into your interface.

00:40:37.540 --> 00:40:40.850
So you simply handle this event by taking
the scrap ref out of the Carbon event,

00:40:40.990 --> 00:40:42.600
extracting whatever
data you want out of it,

00:40:42.760 --> 00:40:46.640
and replacing the current
selection with that data.

00:40:47.840 --> 00:40:50.870
Service providers can also
be Carbon applications,

00:40:50.870 --> 00:40:53.700
and they take maybe a little
bit more work to put together,

00:40:53.700 --> 00:40:56.790
but only because you need
to modify your Info.plist.

00:40:56.800 --> 00:40:59.800
There's two things you need
to do to your Info.plist.

00:40:59.820 --> 00:41:03.800
One is something you probably have
already done if you have an Info.plist,

00:41:03.800 --> 00:41:06.800
and that's sort of make sure
you've got a CFBundle identifier.

00:41:06.800 --> 00:41:11.780
The CFBundle identifier is simply the
bundle packaged app replacement for

00:41:11.860 --> 00:41:14.800
the notion of an application signature.

00:41:14.800 --> 00:41:16.800
You probably have one already,
but if you don't,

00:41:16.800 --> 00:41:20.500
you need to make sure you add one
in order to be a service provider.

00:41:20.730 --> 00:41:24.520
The second thing you need to do
is describe the set of services

00:41:24.900 --> 00:41:27.600
your service can perform.

00:41:27.770 --> 00:41:32.100
And you do that by adding the
NSServices key to your Info.plist.

00:41:32.260 --> 00:41:36.100
The data in this key is an array
of dictionaries where every item

00:41:36.100 --> 00:41:40.600
in the array is one service that
your overall provider can perform.

00:41:40.780 --> 00:41:43.080
Every dictionary has four pieces of data.

00:41:43.090 --> 00:41:44.560
It's got a message identifier.

00:41:44.600 --> 00:41:47.590
That's simply an identifier
string that uniquely identifies

00:41:47.590 --> 00:41:49.600
that service to your provider,
right?

00:41:49.600 --> 00:41:52.330
I mean, if you're a service that can
do four different things,

00:41:52.330 --> 00:41:55.230
you need to have four different
unique ID strings because you're

00:41:55.230 --> 00:41:57.600
going to be sent this identifier
when asked to perform that service.

00:41:57.600 --> 00:42:01.600
So it allows you to sort of uniquely
tell what thing the user's picked.

00:42:01.600 --> 00:42:04.600
The next thing you need to put in
the dictionary is the menu item text.

00:42:04.600 --> 00:42:06.580
Obviously,
it's going to show up in the menu.

00:42:06.610 --> 00:42:08.550
And then you have two different lists.

00:42:08.830 --> 00:42:11.600
The list of send types and return types.

00:42:11.740 --> 00:42:16.600
Send types are the types of data that
you can accept into your service.

00:42:16.600 --> 00:42:18.600
You know, in the case of the example
I was showing before,

00:42:18.650 --> 00:42:22.770
mail text, it would say, "Hey,
I can take text and Unicode text and

00:42:22.860 --> 00:42:27.970
various other types." The return types
are the list of data types that you

00:42:27.970 --> 00:42:31.600
can actually hand back after you've
performed whatever your service is.

00:42:31.600 --> 00:42:34.000
And it's possible that you might not
even have any send types or might

00:42:34.000 --> 00:42:36.560
not even have any return types,
but you'll definitely

00:42:36.560 --> 00:42:37.600
have one or the other.

00:42:37.700 --> 00:42:43.600
Some services are only data returners.

00:42:43.600 --> 00:42:45.440
For instance,
there might be a service which

00:42:45.440 --> 00:42:47.600
is "Paste my signature into
this whatever it is," right?

00:42:47.600 --> 00:42:52.590
"Paste my signature into your document."
Whereas you might have the inverse,

00:42:52.600 --> 00:42:55.900
which is the mail text service item,
which is, "Hey,

00:42:56.050 --> 00:42:57.600
the user's got something selected.

00:42:57.600 --> 00:42:58.590
Just go do something with it.

00:42:58.640 --> 00:43:00.590
I'm not going to hand them anything back.

00:43:00.590 --> 00:43:02.600
I'm just going to do something with it."

00:43:04.140 --> 00:43:06.100
So once you've created your
service provider application

00:43:06.100 --> 00:43:08.510
and built up its Info.plist,
you need to make sure it's

00:43:08.510 --> 00:43:09.260
put in the right place.

00:43:09.260 --> 00:43:12.620
Otherwise, the service engine won't
be able to find it.

00:43:12.710 --> 00:43:15.360
It can pretty much go in any
of the standard system paths

00:43:15.430 --> 00:43:19.200
that end in /applications or
into system library services.

00:43:19.310 --> 00:43:21.860
And that just simply makes sure
that the engine knows where to look.

00:43:21.860 --> 00:43:24.500
The engine doesn't want to scan every
single place on your hard drive looking

00:43:24.500 --> 00:43:27.330
because that would just take too long.

00:43:28.500 --> 00:43:31.680
So when your service has one
of its menu items chosen,

00:43:31.680 --> 00:43:36.390
your service app will receive the
KEVENT service perform Carbon event.

00:43:36.400 --> 00:43:38.400
It's got two pieces of data in it.

00:43:38.400 --> 00:43:40.800
The message identifier,
which is that string that uniquely

00:43:40.800 --> 00:43:43.400
identifies that particular service
that your provider can perform.

00:43:43.400 --> 00:43:46.390
And a scrap ref containing
the data from the application,

00:43:46.400 --> 00:43:49.400
the front most application that
the user was interacting with.

00:43:49.400 --> 00:43:52.400
And that gives your service
a chance to do its work.

00:43:52.400 --> 00:43:54.400
If you're interested in
processing the incoming data,

00:43:54.400 --> 00:43:55.340
you can do that.

00:43:55.420 --> 00:43:58.620
If you have outgoing data,
you can put your outgoing

00:43:58.880 --> 00:44:00.340
data into the scrap ref.

00:44:00.450 --> 00:44:03.500
But like any good scrap ref client,
before you modify a scrap ref,

00:44:03.600 --> 00:44:05.400
you need to call clear scrap first.

00:44:05.400 --> 00:44:08.400
So you clear scrap, modify the scrap ref
to have the new data,

00:44:08.400 --> 00:44:10.290
then you return, your service is done.

00:44:10.400 --> 00:44:13.360
The front most application's
been affected in whatever

00:44:13.370 --> 00:44:14.790
way you wanted them to.

00:44:15.540 --> 00:44:18.090
And like I said,
services is nothing new for Jaguar.

00:44:18.160 --> 00:44:20.120
It's been out there since 10.1.

00:44:20.120 --> 00:44:23.180
We try to put HeaderDoc in all of
our headers as much as we can to

00:44:23.180 --> 00:44:25.000
make it really easy on you guys.

00:44:25.070 --> 00:44:28.300
And services is really,
really well documented in Carbonevents.h.

00:44:28.390 --> 00:44:32.760
And we've got some documentation online
on the developer Applecom website.

00:44:32.890 --> 00:44:36.970
It's in the menu manager someplace,
and I'll blab a few more seconds in

00:44:36.990 --> 00:44:39.170
case you're copying down this URL.

00:44:41.680 --> 00:44:44.900
Alright,
so the next really cool thing for Jaguar

00:44:44.960 --> 00:44:47.400
is our expanded keyboard navigation.

00:44:47.430 --> 00:44:48.710
And it's kind of a big topic.

00:44:48.790 --> 00:44:51.000
It goes beyond just controls,
even though that's what

00:44:51.000 --> 00:44:52.730
I'm showing up here.

00:44:55.700 --> 00:45:00.200
So keyboard navigation is sort of
born out of Section 508 compliance.

00:45:00.220 --> 00:45:03.290
If you haven't heard that term yet,
Section 508 compliance is a set of

00:45:03.290 --> 00:45:07.570
requirements in order to make system
software and applications accessible

00:45:07.630 --> 00:45:11.920
to users that need alternative
means to either manipulate or use

00:45:11.920 --> 00:45:14.160
a computer and stuff like that.

00:45:14.160 --> 00:45:17.100
And Section 508 says, hey,
you can't force people

00:45:17.100 --> 00:45:18.290
to always use the mouse.

00:45:18.530 --> 00:45:21.570
So we try to make it so that
users can use the keyboard if

00:45:21.640 --> 00:45:23.360
that's all they want to do.

00:45:23.380 --> 00:45:25.810
And this isn't just for
accessibility purposes.

00:45:25.840 --> 00:45:27.800
This is just a really
widely requested feature,

00:45:27.800 --> 00:45:28.000
right?

00:45:28.000 --> 00:45:31.240
I mean, I'm a huge keyboard user myself,
and I hate the fact that I've got to

00:45:31.240 --> 00:45:33.950
take the hand off the keyboard and go
use the mouse and do stuff like that.

00:45:34.000 --> 00:45:36.590
And I know a lot of you
have the same opinion.

00:45:36.630 --> 00:45:39.140
So this just gives, you know,
everybody a cool feature

00:45:39.140 --> 00:45:40.120
that they can use.

00:45:40.120 --> 00:45:42.820
And you can do a bunch of things
with the keyboard now in Jaguar.

00:45:42.840 --> 00:45:45.660
You can navigate the menu bar,
bring up the menus, switch between them,

00:45:45.660 --> 00:45:48.360
go up and down items, choose items,
stuff like that.

00:45:48.390 --> 00:45:51.260
You can switch between
windows in two different ways.

00:45:51.280 --> 00:45:53.020
You can switch between just
the windows in an application,

00:45:53.030 --> 00:45:58.000
or you can switch between all windows on
the system in the appropriate Z order.

00:45:58.020 --> 00:46:01.550
And most importantly,
you can interact with virtually every

00:46:01.550 --> 00:46:04.020
control on the system via the keyboard.

00:46:04.020 --> 00:46:06.460
The reason I say virtually is
that there's some controls that

00:46:06.490 --> 00:46:09.760
just don't warrant interaction,
like the progress bar spinning arrows.

00:46:09.780 --> 00:46:11.810
You know,
you can't click on those anyway,

00:46:11.840 --> 00:46:14.160
so of course those don't
support keyboard now.

00:46:15.990 --> 00:46:18.150
So one of the cool bits about
the whole keyboard nav story

00:46:18.160 --> 00:46:19.840
is that most of it's for free.

00:46:19.840 --> 00:46:23.320
The menu stuff is gonna happen
basically behind your back.

00:46:23.470 --> 00:46:25.290
Your application's never
gonna need to worry about it.

00:46:25.410 --> 00:46:27.160
The menus will just pop
up in your application.

00:46:27.160 --> 00:46:28.900
You can navigate them without any work.

00:46:28.900 --> 00:46:32.960
The only people that will need work are
those that do custom menu definitions.

00:46:32.960 --> 00:46:35.340
And I know there's not
a lot of you out there,

00:46:35.340 --> 00:46:38.660
but we've got some
documentation in menus.h.

00:46:38.700 --> 00:46:41.250
One of the existing menu
manager Carbon events,

00:46:41.260 --> 00:46:42.760
and, you know,
I'm spacing on it right now,

00:46:42.760 --> 00:46:44.440
but if you have this
need come up after me,

00:46:44.440 --> 00:46:47.700
I can tell you exactly
which Carbon event it is.

00:46:47.810 --> 00:46:50.700
It's one we've been sending
out for quite a while.

00:46:50.700 --> 00:46:54.900
We repurposed that to allow us to
keyboard nav even in custom menu devs,

00:46:54.900 --> 00:46:56.920
so you can do that too.

00:46:58.270 --> 00:47:02.960
Window keyboard navigation
is also mostly for free.

00:47:03.070 --> 00:47:06.860
We tried to make this
as free as possible.

00:47:07.110 --> 00:47:09.800
And in fact,
it will work in your application,

00:47:09.800 --> 00:47:12.490
unless you're doing something
so amazingly obscure that

00:47:12.490 --> 00:47:13.470
it trips up our code.

00:47:13.600 --> 00:47:16.920
But if you need to customize
its behavior because you're

00:47:16.920 --> 00:47:19.400
seeing strange things go on,
like, okay,

00:47:19.400 --> 00:47:21.920
the right window didn't come forward
because I'm doing some weird things with

00:47:21.970 --> 00:47:24.300
window groups or something like that,
and you find that you need

00:47:24.300 --> 00:47:27.020
to customize our behavior,
you can do that with a

00:47:27.030 --> 00:47:27.990
pair of Carbon events.

00:47:28.000 --> 00:47:31.250
We have a focus next document window
and a focus next floating window event

00:47:31.250 --> 00:47:32.990
that gets sent to the application.

00:47:33.040 --> 00:47:36.780
There are some fairly strict
requirements to how you can respond

00:47:36.780 --> 00:47:40.600
or what you can do when you respond
to one of these Carbon events.

00:47:40.700 --> 00:47:44.730
And we've got that outlined
in carbonevents.h by each of

00:47:44.760 --> 00:47:46.750
these events in the header.

00:47:46.900 --> 00:47:47.930
So take a look at that.

00:47:48.030 --> 00:47:49.600
Most of you will never
need to worry about this,

00:47:49.600 --> 00:47:52.910
because the window switching is
just going to happen for free.

00:47:54.150 --> 00:47:57.740
So now that we have toolbars in Windows,
we need a way to key

00:47:57.740 --> 00:47:59.240
nav up to the toolbar.

00:47:59.240 --> 00:48:04.000
And we don't want the toolbar to be part
of the normal focus chain of controls,

00:48:04.000 --> 00:48:07.000
because generally users just
use it to click on and whatnot.

00:48:07.000 --> 00:48:10.450
But we've got a hotkey now that can
transfer the focus from the content

00:48:10.490 --> 00:48:13.550
area of your window up to the toolbar,
and another hotkey which

00:48:13.550 --> 00:48:16.000
transfers it from the toolbar
down to the content area.

00:48:16.000 --> 00:48:18.340
And in fact,
you can see them right there.

00:48:18.340 --> 00:48:21.000
K event window focus toolbar
moves it to the toolbar,

00:48:21.000 --> 00:48:23.000
and content moves it to the content.

00:48:23.000 --> 00:48:27.000
This also is going to
happen behind your back,

00:48:27.000 --> 00:48:30.070
and you may find you need
to customize the behavior,

00:48:30.070 --> 00:48:33.900
because our implementation that we do
for you automatically does not support

00:48:34.050 --> 00:48:38.000
any focusing you might do in your totally
custom content areas of your application.

00:48:38.000 --> 00:48:40.920
We can only deal with controls and views.

00:48:41.040 --> 00:48:43.710
So we will, of course,
take focus away from a text

00:48:43.760 --> 00:48:46.990
field in your content area
and move it up to the toolbar.

00:48:47.000 --> 00:48:50.400
But if you're rolling your own text
editor for your own text fields,

00:48:50.520 --> 00:48:52.000
or, you know, who knows,
you've got your own list box

00:48:52.000 --> 00:48:52.930
that can take care of that,
you've got your own list

00:48:52.940 --> 00:48:55.890
box that can take focus,
if that's not implemented as a control,

00:48:56.000 --> 00:48:59.540
we have no way to tell that thing, "Hey,
stop focusing." So it's your

00:48:59.620 --> 00:49:01.950
responsibility to listen
to the K event window focus

00:49:01.950 --> 00:49:05.000
toolbar Carbon event and say,
"Oh, okay,

00:49:05.000 --> 00:49:08.240
the window's about to focus the toolbar,
so I need to make sure to relinquish the

00:49:08.360 --> 00:49:12.000
focus on my content area." Or vice versa,
right?

00:49:12.000 --> 00:49:14.400
The focus is in the toolbar,
and the user presses the hotkey

00:49:14.400 --> 00:49:16.000
to bring it back to the content.

00:49:16.000 --> 00:49:18.520
All we know how to focus
are controls and views,

00:49:18.520 --> 00:49:20.840
and if there are none
of those in your window,

00:49:21.160 --> 00:49:22.970
well,
we're not really going to focus anything.

00:49:23.090 --> 00:49:27.000
So you need to make sure to listen to the
K event window focus content Carbon event

00:49:27.000 --> 00:49:30.000
to focus any totally custom stuff you do.

00:49:32.750 --> 00:49:36.260
Now, like I said,
lots of controls are keyboard navigable,

00:49:36.270 --> 00:49:40.600
and we try to make this as easy to adopt
in your own custom controls as possible.

00:49:40.620 --> 00:49:43.190
And since HIView,
we're trying to make HIView

00:49:43.190 --> 00:49:46.040
a lot more prevalent,
we think a lot of you will need

00:49:46.040 --> 00:49:47.590
to adopt this functionality.

00:49:47.600 --> 00:49:51.600
Let me give you a little
bit of background first.

00:49:51.600 --> 00:49:53.760
Before everybody freaks
out thinking that,

00:49:53.760 --> 00:49:55.600
"Oh my gosh,
I'm going to be tabbing everywhere,

00:49:55.600 --> 00:49:57.020
and I'm not going to be able
to get to my text fields." No,

00:49:57.200 --> 00:50:00.590
there's actually two modes in Jaguar.

00:50:00.590 --> 00:50:02.720
There's the traditional
keyboard focusing mode,

00:50:02.720 --> 00:50:05.660
which only focuses traditionally
focusable controls,

00:50:05.660 --> 00:50:07.570
like, you know, edit fields, list boxes,
and things like that.

00:50:07.630 --> 00:50:09.820
And then there's this
full keyboard nav mode,

00:50:09.820 --> 00:50:11.600
which says, "Focus everything.

00:50:11.600 --> 00:50:13.910
Try to focus everything possible,
because I don't want to use

00:50:13.970 --> 00:50:16.980
the mouse." And in that case,
we're going to focus everything:

00:50:16.980 --> 00:50:20.810
push buttons, check boxes, radio buttons,
pop-ups, you know, what have you,

00:50:20.880 --> 00:50:22.560
tab controls, all that stuff.

00:50:22.680 --> 00:50:25.560
And you can toggle the
setting two different ways.

00:50:25.600 --> 00:50:28.600
You can toggle it globally
by going to the system prefs,

00:50:28.600 --> 00:50:30.600
and I think it's in the keyboard
pane of the system prefs.

00:50:30.800 --> 00:50:32.600
There's a full keyboard nav checkbox.

00:50:32.600 --> 00:50:32.600
You check that.

00:50:32.600 --> 00:50:34.670
Now all of a sudden,
all the windows and all the

00:50:34.670 --> 00:50:37.580
applications that come up will
be fully keyboard navigable.

00:50:37.600 --> 00:50:42.080
Or, you can actually toggle that
setting kind of transiently

00:50:42.230 --> 00:50:44.600
on a window-by-window basis.

00:50:44.600 --> 00:50:48.600
There's a hotkey, Control-F7,
that when a window is frontmost,

00:50:48.600 --> 00:50:50.950
and you press Control-F7,
it toggles the global setting

00:50:50.950 --> 00:50:52.600
for the lifetime of that window.

00:50:52.600 --> 00:50:54.600
And if you want to toggle it back,
you just hit Control-F7 again.

00:50:54.600 --> 00:50:55.920
in.

00:50:57.110 --> 00:50:58.510
Okay, so now the nitty gritty.

00:50:58.520 --> 00:51:01.930
If you've got an existing C-Def and
you want to make it keyboard focusable,

00:51:01.980 --> 00:51:03.630
that's pretty straightforward.

00:51:03.630 --> 00:51:06.940
We already have a control set focus
part Carbon event that's sent to your

00:51:06.940 --> 00:51:08.750
control and we want it to try to focus.

00:51:08.750 --> 00:51:12.650
We've been doing this for a while,
since 10.0, which is one of the standard

00:51:12.650 --> 00:51:15.720
control Carbon events we send out,
but we've added a new parameter

00:51:15.720 --> 00:51:18.920
for Jaguar and that's the
focus everything parameter.

00:51:19.260 --> 00:51:21.890
Basically,
that's an indication of what the

00:51:21.890 --> 00:51:25.840
focus everything full keyboard
nav mode is with respect to the

00:51:25.840 --> 00:51:27.300
window that your control is in.

00:51:27.380 --> 00:51:29.540
So if you're a traditionally
focusable control,

00:51:29.540 --> 00:51:31.080
like an edit field or
something like that,

00:51:31.180 --> 00:51:33.520
you don't even have to look at
the focus everything parameter,

00:51:33.550 --> 00:51:33.880
right?

00:51:33.880 --> 00:51:36.490
You're always going to accept
the focus regardless of whether

00:51:36.490 --> 00:51:37.680
full keyboard nav is on.

00:51:37.680 --> 00:51:40.730
But if you're not one of these
traditionally focusable controls,

00:51:40.730 --> 00:51:43.540
like some sort of custom button,
you want to look at the state of

00:51:43.550 --> 00:51:44.930
the focus everything parameter.

00:51:44.940 --> 00:51:47.930
And if you're gaining focus,
you want to make sure you

00:51:47.930 --> 00:51:51.380
only gain focus if the focus
everything parameter is true.

00:51:51.560 --> 00:51:54.560
However,
if you're being asked to lose focus,

00:51:54.700 --> 00:51:57.240
perhaps because somebody's
asking you to focus to the next

00:51:57.290 --> 00:51:59.800
part and you have no next part,
you don't want to care about

00:51:59.870 --> 00:52:01.180
the focus everything parameter.

00:52:01.300 --> 00:52:04.430
You want to make sure you can
always lose focus regardless of

00:52:04.550 --> 00:52:07.200
whether full keyboard nav is on.

00:52:09.040 --> 00:52:10.890
So once you're focused,
there's two things you

00:52:10.890 --> 00:52:11.880
should probably do.

00:52:11.950 --> 00:52:14.250
Obviously,
the whole point of being focused is

00:52:14.310 --> 00:52:16.000
so you can respond to keyboard events.

00:52:16.180 --> 00:52:20.400
So the event you generally want to
listen to if you're only interested in,

00:52:20.410 --> 00:52:22.790
say for instance,
the push button is really only

00:52:22.790 --> 00:52:25.990
interested in the space bar because
that's the equivalent of a mouse click.

00:52:25.990 --> 00:52:29.000
You would want to listen to
K-Event Keyboard Raw Key Down.

00:52:29.000 --> 00:52:32.300
This just tells you at the lowest level,
hey, this key was pressed.

00:52:32.360 --> 00:52:35.000
It gives you a chance to act on that.

00:52:35.090 --> 00:52:38.880
And generally, for simple controls,
you can act simply by

00:52:38.880 --> 00:52:41.000
calling HIV simulate click.

00:52:41.000 --> 00:52:43.000
HIV simulate click is pretty cool.

00:52:43.000 --> 00:52:45.990
You can think of it sort of as a
wrapper around highlight control,

00:52:46.000 --> 00:52:46.950
right?

00:52:46.990 --> 00:52:48.830
Because to simulate a
click on a push button,

00:52:48.840 --> 00:52:52.350
we want to say, hey, button,
highlight your button part and

00:52:52.350 --> 00:52:54.730
then wait a short time and then
unhighlight your button part and

00:52:54.810 --> 00:52:56.000
then pretend like it was clicked.

00:52:56.000 --> 00:52:58.300
So in that way, it's kind of a wrapper
around highlight control.

00:52:58.300 --> 00:53:03.220
But the best part about it is
this API behaves the same as,

00:53:03.220 --> 00:53:04.980
say, handle control click,
but it's not the same as, say,

00:53:04.980 --> 00:53:04.980
handle control click.

00:53:05.000 --> 00:53:10.370
So if you call HIV simulate
click on a push button that has

00:53:10.530 --> 00:53:15.340
a command ID associated with it,
that command ID will be sent out in

00:53:15.460 --> 00:53:17.600
the appropriate way for the button.

00:53:20.100 --> 00:53:24.100
So since we're now focusing more,
you might find when we

00:53:24.100 --> 00:53:28.200
actually ship Jaguar,
I've got to get to a side note here,

00:53:28.390 --> 00:53:31.760
you might find that the
focus order is a little off.

00:53:31.760 --> 00:53:35.540
In Jaguar, what we intend to do is a
spatial keyboard navigation

00:53:35.550 --> 00:53:37.480
focus order determination stuff.

00:53:37.550 --> 00:53:41.100
And I've got an algorithm that mostly
worked until I found an infinite loop.

00:53:41.250 --> 00:53:44.710
So for the seed, yeah,
for the seed that's turned off,

00:53:44.880 --> 00:53:47.400
basically now we do a
really stupid focus order,

00:53:47.400 --> 00:53:49.960
which is based on peer order
in the control hierarchy.

00:53:49.960 --> 00:53:51.900
And in fact,
it doesn't even support backward focus,

00:53:51.900 --> 00:53:54.120
because I just had to submit
the bug fix for the build.

00:53:54.160 --> 00:53:57.860
But when we actually ship,
it's going to be a

00:53:57.860 --> 00:53:59.630
spatial navigation order.

00:53:59.710 --> 00:54:02.840
And we're going to determine
that as best we can.

00:54:02.960 --> 00:54:05.140
But you might find that our
best determination isn't

00:54:05.140 --> 00:54:06.780
exactly perfect for your needs.

00:54:06.890 --> 00:54:10.300
So we want to allow you to
customize the focus order.

00:54:10.300 --> 00:54:12.550
And you can do that two different ways.

00:54:12.620 --> 00:54:15.800
A parent is actually--sorry,
a parent view, a parent control,

00:54:15.890 --> 00:54:17.290
is actually in charge of the focus order.

00:54:17.390 --> 00:54:19.380
And we have a focus order
for the children within it.

00:54:19.430 --> 00:54:23.140
To that end,
we send a control get next focused

00:54:23.140 --> 00:54:26.360
candidate to the parent view whenever
we're trying to move away from

00:54:26.460 --> 00:54:28.000
one control to another control.

00:54:28.010 --> 00:54:30.290
So it lets the parent sort
of decide what's going on.

00:54:30.400 --> 00:54:34.500
So if you are, you know,
like a user pain sort of thing,

00:54:34.500 --> 00:54:36.860
where you're organizing a
group of other controls,

00:54:36.890 --> 00:54:38.630
and you want to determine
their focus order,

00:54:38.690 --> 00:54:40.360
you can respond to that Carbon event.

00:54:40.420 --> 00:54:44.300
Another higher level way to do this
is actually with a set of APIs.

00:54:44.330 --> 00:54:48.120
Given any view, you can say,
"This view is your next

00:54:48.210 --> 00:54:51.400
view." And then the focusing
subsystem will be overridden,

00:54:51.400 --> 00:54:54.000
and we'll make sure to go
to the order you specify.

00:54:54.120 --> 00:54:56.690
And likewise, you can say,
"Given any parent view,

00:54:56.880 --> 00:55:00.330
please focus this child first." So,
you know, if you have a control that

00:55:00.330 --> 00:55:02.190
you want to make sure is
always focused in your window,

00:55:02.200 --> 00:55:03.900
you're probably going to get
one of the routes and say,

00:55:03.900 --> 00:55:06.120
"Hey,
this is your first child." And we'll make

00:55:06.280 --> 00:55:08.600
sure to start the order with that one.

00:55:10.720 --> 00:55:12.540
So Carbon is far from dead.

00:55:12.540 --> 00:55:17.120
Carbon is still way alive,
and Carbon will be alive for a long time.

00:55:17.120 --> 00:55:20.590
We're trying to throw all these new
cool features out there for you.

00:55:20.590 --> 00:55:22.410
We want you to adopt
them as best you can,

00:55:22.410 --> 00:55:25.040
because they're going to
make great Aqua applications.

00:55:25.150 --> 00:55:26.940
And besides, you've got a week before
Episode Two comes out,

00:55:26.940 --> 00:55:29.540
and you need something to do between
going to Toys R Us and buying toys,

00:55:29.540 --> 00:55:31.750
or at least I need something
to do between those trips.

00:55:31.820 --> 00:55:34.210
And likewise, once you get there and
you're standing in line,

00:55:34.210 --> 00:55:36.500
bring your power books and
you can code this stuff too.

00:55:36.500 --> 00:55:37.380
It's really simple.

00:55:37.380 --> 00:55:39.670
I swear to you, if you're waiting two
hours for the movie,

00:55:39.670 --> 00:55:42.100
you can probably get drawers
implemented in your application.

00:55:42.180 --> 00:55:43.970
We're making it as easy
as we possibly can,

00:55:44.010 --> 00:55:46.600
so I want you to get out there
and implement this stuff,

00:55:46.600 --> 00:55:49.410
and it'll make really,
really great applications.

00:55:50.230 --> 00:55:52.380
And we've already got
documentation out there.

00:55:52.380 --> 00:55:55.860
On the--I don't know if this
stuff is on the CD or not,

00:55:55.880 --> 00:55:57.100
or if it's on the site.

00:55:57.220 --> 00:56:00.020
Anyway, we've got preliminary
documentation on HI objects.

00:56:00.130 --> 00:56:02.100
It talks about how to manage them,
how to subclass them,

00:56:02.100 --> 00:56:03.100
and stuff like that.

00:56:03.230 --> 00:56:05.760
An HI view reference,
which talks about some of the

00:56:05.760 --> 00:56:09.090
subtleties of using our new HI view and
compositing mode and stuff like that.

00:56:09.200 --> 00:56:12.100
And finally,
we've got a reference on HI toolbar.

00:56:12.100 --> 00:56:15.140
And a lot of this stuff also,
like I said, has HeaderDoc documentations

00:56:15.140 --> 00:56:16.100
in the relevant headers.

00:56:16.100 --> 00:56:17.100
So look there, you know.

00:56:17.100 --> 00:56:19.100
In all likelihood,
you might find your questions answered

00:56:19.100 --> 00:56:21.100
smack dab in the middle of the headers.

00:56:21.100 --> 00:56:25.100
Now, some of the sessions on the
roadmap already happened.

00:56:25.100 --> 00:56:28.100
But if you need a refresher course
on either HI view or HI object,

00:56:28.100 --> 00:56:32.100
get the DVDs and take a quick
ponder at those sessions.

00:56:32.100 --> 00:56:35.530
And we can't stress enough how
much HI view and HI object and

00:56:35.530 --> 00:56:38.090
Carbon events are the future of Carbon.

00:56:38.270 --> 00:56:40.680
All the new features we're
doing are going to have hooks

00:56:40.680 --> 00:56:42.100
in terms of Carbon events.

00:56:42.100 --> 00:56:44.070
They're probably going to be HI objects.

00:56:44.100 --> 00:56:46.100
And if you want to alter their behaviors,
you're going to need more than one.

00:56:46.100 --> 00:56:48.100
And you don't even know how
to subclass these things.

00:56:48.100 --> 00:56:50.250
So, you know,
I suggest you get on the ball there and

00:56:50.250 --> 00:56:52.100
start checking out those technologies.

00:56:52.100 --> 00:56:55.160
We already also had a migrating
to Carbon events session,

00:56:55.160 --> 00:56:58.130
which is a good refresher course
if you need just the basics on how

00:56:58.200 --> 00:57:00.140
to install Carbon event handlers,
how to deal with adding

00:57:00.220 --> 00:57:03.100
parameters to events,
getting parameters out of events.

00:57:03.100 --> 00:57:05.830
And immediately after my session,
we've got an improving performance

00:57:05.830 --> 00:57:07.060
with Carbon events session.

00:57:07.100 --> 00:57:09.620
It's a good refresher course on,
you know, okay,

00:57:09.620 --> 00:57:12.100
my app is still eating a lot of time.

00:57:12.100 --> 00:57:15.100
When I run top, oh,
I see it's using 89% of the CPU.

00:57:15.100 --> 00:57:17.520
This session will show you
how to eliminate those kinds

00:57:17.520 --> 00:57:19.380
of problems and be a really,
really good citizen with

00:57:19.380 --> 00:57:21.100
respect to the processor.

00:57:21.100 --> 00:57:23.570
And finally, tomorrow,
I'm going to talk an awful

00:57:23.570 --> 00:57:25.100
lot about accessibility.

00:57:25.100 --> 00:57:28.040
I probably should have put another
session on here on the roadmap.

00:57:28.180 --> 00:57:30.970
Before my session tomorrow at 3:30,
there's the accessibility

00:57:30.970 --> 00:57:32.090
overview at 2:00 p.m.

00:57:32.100 --> 00:57:34.060
If you're planning on coming
to my session at 3:30,

00:57:34.150 --> 00:57:35.650
please go to the 2:00 p.m.

00:57:35.650 --> 00:57:37.330
one first,
because it's going to lay a lot of

00:57:37.330 --> 00:57:39.040
foundations and talk about the concepts.

00:57:39.100 --> 00:57:42.100
But then stay for my
accessibility in Carbon session,

00:57:42.100 --> 00:57:43.980
because it's really, really cool.

00:57:44.100 --> 00:57:48.210
You can now inspect interfaces of
various applications on the system,

00:57:48.210 --> 00:57:50.100
whether or not they're Carbon or Cocoa.

00:57:50.100 --> 00:57:53.180
And you're probably going to want your
application to be wired up to this,

00:57:53.260 --> 00:57:56.270
because, well,
you might be limited from selling your

00:57:56.270 --> 00:58:01.100
application in only certain areas if
you're not accessibility compliant.

00:58:01.110 --> 00:58:03.790
So please check that out.

00:58:04.160 --> 00:58:05.780
and Xavier is our evangelist.

00:58:05.860 --> 00:58:08.660
If you have any questions or
problems or bug reports or whatever,

00:58:08.660 --> 00:58:09.640
send him an email.

00:58:09.640 --> 00:58:12.900
He's a really good guy and he
will handle that stuff for you.

00:58:12.950 --> 00:58:15.700
And in fact, I want to bring him up here
to lead us through some Q&A.