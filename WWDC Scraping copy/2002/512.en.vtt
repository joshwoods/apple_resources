WEBVTT

00:00:04.550 --> 00:00:05.820
Good afternoon.

00:00:05.970 --> 00:00:07.740
Thank you very much for coming.

00:00:07.750 --> 00:00:11.770
This is session 512,
Game Solutions Open Play with

00:00:11.770 --> 00:00:13.590
NetSprocket.

00:00:13.700 --> 00:00:18.100
And today we have a very special
celebrity guest for you who will share

00:00:18.100 --> 00:00:24.400
with us his knowledge and expertise
about network playing and open source.

00:00:24.400 --> 00:00:30.890
I'm very happy to welcome to the stage,
from IdeaS to the Deep, Lane Roathe.

00:00:35.830 --> 00:00:37.070
Thanks.

00:00:37.110 --> 00:00:37.710
All right.

00:00:37.770 --> 00:00:41.670
As he said, I'm Lane.

00:00:41.670 --> 00:00:46.350
We're going to cover
OpenPlay with NetSprockets.

00:00:48.110 --> 00:00:52.400
So, as an introduction, what is OpenPlay?

00:00:52.410 --> 00:00:55.100
OpenPlay is part of
Apple's open source effort,

00:00:55.100 --> 00:01:02.880
the Darwin group of open source projects.

00:01:02.880 --> 00:01:02.880
It is a

00:01:04.070 --> 00:01:06.990
has been out for a couple years
and we'll go into more about

00:01:07.030 --> 00:01:08.230
where the open source effort is.

00:01:08.740 --> 00:01:14.200
We'll also discuss the APIs briefly.

00:01:14.200 --> 00:01:19.670
I will go through an actual
example of the NetSprocket

00:01:20.160 --> 00:01:23.000
API and how to use it in code.

00:01:23.300 --> 00:01:30.900
[Transcript missing]

00:01:31.350 --> 00:01:38.010
will give you a demo of a couple of
a application that uses OpenPlay.

00:01:38.220 --> 00:01:44.990
will also cover a little bit on
how OpenPlay and its APIs compare

00:01:44.990 --> 00:01:48.100
to some of the other networking
APIs that are available.

00:01:48.100 --> 00:01:49.980
And then we'll wrap up.

00:01:53.680 --> 00:01:58.310
Okay, so as I said,
it's one of the open source

00:01:58.420 --> 00:01:59.770
projects that Apple has put out.

00:02:00.000 --> 00:02:03.350
Whoa, a little bit too far.

00:02:03.570 --> 00:02:10.180
It's a collection of protocol and
platform independent APIs that

00:02:10.180 --> 00:02:11.430
consists of three layers.

00:02:11.540 --> 00:02:15.090
There's a game layer,
which is the NetSprocket layer.

00:02:15.300 --> 00:02:18.990
That was formerly a
separate set of libraries.

00:02:19.060 --> 00:02:21.110
It's now integrated.

00:02:21.590 --> 00:02:26.880
is a high-level, easiest-to-use,
and can be used to get actual

00:02:26.880 --> 00:02:32.500
networking going in a day,
if not just a few hours.

00:02:32.720 --> 00:02:35.330
There's a set of protocol APIs.

00:02:35.330 --> 00:02:39.980
That is the basic OpenPlay API that
everybody has known previously.

00:02:39.980 --> 00:02:45.680
And it is basically a set of
APIs for talking to some type of

00:02:45.680 --> 00:02:49.580
transport protocol and sending
and receiving information.

00:02:49.700 --> 00:02:57.990
The NetModule APIs are what is used to
wrap each protocol API that the system

00:02:57.990 --> 00:03:02.160
has into a set of common API calls.

00:03:05.710 --> 00:03:12.240
So, a little bit of history on
OpenPlay and its contained NetSprocket.

00:03:12.270 --> 00:03:14.030
OpenPlay started out as Uber.

00:03:14.290 --> 00:03:19.360
It was developed by Bungie
with cooperation from Apple.

00:03:19.360 --> 00:03:23.910
And they designed it from the ground
up to be running on multiple platforms

00:03:23.960 --> 00:03:26.650
and using multiple protocols.

00:03:26.770 --> 00:03:30.510
NetSprocket started its life
out as part of the GameSprockets

00:03:30.510 --> 00:03:34.280
collection under OS 8 and 9.

00:03:34.340 --> 00:03:39.200
It was originally based on OpenTransport
and therefore would obviously

00:03:39.200 --> 00:03:42.820
only work under classic Mac OS.

00:03:43.820 --> 00:03:48.710
Today's OpenPlay has made
a lot of strides over where

00:03:48.710 --> 00:03:50.490
it has been even a year ago.

00:03:51.020 --> 00:03:55.780
It has integrated the
NetSprocket API set,

00:03:56.130 --> 00:03:58.700
so it's no longer part
of the game sprockets,

00:03:58.700 --> 00:04:00.700
it's now part of OpenPlay.

00:04:00.700 --> 00:04:03.640
NetSprocket is therefore
now cross-platform,

00:04:03.740 --> 00:04:06.700
whereas before it would
only work under Mac OS,

00:04:06.700 --> 00:04:10.700
it now works everywhere
that OpenPlay works.

00:04:10.700 --> 00:04:14.640
NetSprocket is also backward
compatible with the 1.7 libraries,

00:04:14.700 --> 00:04:18.820
so that if you have games out there that
you want to update to the newest one,

00:04:19.030 --> 00:04:24.180
you can replace the NetSprocket
library and anybody who still has

00:04:24.180 --> 00:04:28.490
the older versions of NetSprockets
will continue to be able to use it.

00:04:29.270 --> 00:04:33.700
The open source community has become
very active over the past year.

00:04:33.730 --> 00:04:38.510
There's been a lot of contributions,
a lot of new example applications,

00:04:38.580 --> 00:04:44.950
testing, some new documentation,
and a lot of individual effort

00:04:44.950 --> 00:04:49.670
on a few people to really
move the project forward.

00:04:50.330 --> 00:04:53.560
It's now being used in
several shipping titles,

00:04:53.560 --> 00:04:57.390
and we'll give you a list in
a little bit of some of those.

00:04:57.560 --> 00:05:03.190
And those titles have been testing
Openplay for a whole bunch of

00:05:03.220 --> 00:05:07.370
different types of networking,
and it's working very well.

00:05:07.720 --> 00:05:12.900
In addition,
there is now a POSIX version of Openplay.

00:05:13.000 --> 00:05:19.460
And that means that there's now an
Openplay that is native to Mac OS X.

00:05:19.550 --> 00:05:22.000
It does not use Carbon.

00:05:22.320 --> 00:05:25.700
There is also a version now for Linux.

00:05:25.700 --> 00:05:30.500
In addition, the Windows version,
which used to use a Windows-centric API,

00:05:30.500 --> 00:05:34.200
has been converted to use
the POSIX networking module

00:05:34.200 --> 00:05:37.550
because it fixed several bugs.

00:05:40.350 --> 00:05:46.970
Okay, so the open source effort,
although moving forward and actively

00:05:47.220 --> 00:05:51.300
being maintained and improved,
can always use help.

00:05:51.470 --> 00:05:56.500
We recently did a 2.1 release,
and this release included

00:05:57.090 --> 00:06:01.410
some fixes to the way that
NetSprockets gathered messages,

00:06:01.710 --> 00:06:08.100
and this fixed a lot of hard-to-reproduce
dropped packet problems.

00:06:08.100 --> 00:06:13.240
It also included the POSIX build.

00:06:13.300 --> 00:06:15.820
It included a couple of new programs.

00:06:15.840 --> 00:06:21.300
There's a NetSprocket stress testing
application and a new example program.

00:06:21.400 --> 00:06:22.480
Amen.

00:06:22.900 --> 00:06:27.350
So if you are interested in helping
us out in order to move this project

00:06:27.350 --> 00:06:31.040
forward and make it even better,
there's a couple things you can do.

00:06:31.040 --> 00:06:33.490
You can visit the open source pages.

00:06:33.500 --> 00:06:37.310
If you get the project and
you start working with it,

00:06:37.310 --> 00:06:41.820
you make any modifications,
please be sure to submit those to us.

00:06:41.840 --> 00:06:44.830
And then, of course,
the one thing that we really

00:06:44.860 --> 00:06:49.720
haven't focused on is documentation,
so if you guys are using it

00:06:49.960 --> 00:06:55.190
and you see there's a lack of a
documented feature or some errors,

00:06:55.240 --> 00:06:59.550
you can tell us about them and
even better submit the changes.

00:06:59.560 --> 00:07:01.390
That would really help us out as well.

00:07:04.070 --> 00:07:08.210
Alright,
so what is the purpose of OpenPlay?

00:07:08.350 --> 00:07:09.280
We'll cover that.

00:07:09.440 --> 00:07:13.960
We'll cover a little bit
about the different API layers

00:07:13.960 --> 00:07:16.380
and what they are used for.

00:07:16.380 --> 00:07:22.620
And then we'll go on into the
actual usage of those APIs.

00:07:24.690 --> 00:07:34.790
The whole purpose of OpenPlay is
to give developers a way of

00:07:34.790 --> 00:07:35.920
getting networking into their code,
and specifically games.

00:07:36.130 --> 00:07:45.150
is a multi-task networked application
that is designed to help developers to

00:07:45.150 --> 00:07:45.150
integrate NetSprocket and OpenPlay in
as easy a manner as possible so

00:07:45.150 --> 00:07:45.150
that you guys can concentrate on the
games and not writing network code.

00:07:45.740 --> 00:07:49.070
is a platform that is
designed to be cross-platform,

00:07:49.070 --> 00:07:52.620
and we're working very hard to make
sure that that continues to happen.

00:07:53.220 --> 00:07:58.330
It currently runs on Mac OS 8, 9, and 10.

00:07:58.470 --> 00:08:01.700
It runs under Windows,
and it now runs under

00:08:01.700 --> 00:08:03.520
Linux with the 2.1 release.

00:08:03.730 --> 00:08:08.700
There are a couple people working on
actual Unix builds for it as well.

00:08:08.740 --> 00:08:13.510
And the main reason for the
Linux and the Unix builds would be,

00:08:13.510 --> 00:08:15.010
for instance, servers.

00:08:15.660 --> 00:08:18.670
It is also meant to be
protocol independent.

00:08:19.050 --> 00:08:22.480
And while that isn't a
huge issue right now,

00:08:22.530 --> 00:08:26.750
it does mean that if for some
reason one of the NetModules that

00:08:26.840 --> 00:08:30.570
we provide does not work for you,
you want to use a

00:08:30.570 --> 00:08:35.980
different TCP/IP protocol,
for instance, you can simply write a new

00:08:35.980 --> 00:08:39.880
NetModule and drop it in a
replacement of the existing one.

00:08:39.880 --> 00:08:42.990
For instance,
that is what we did with the

00:08:43.110 --> 00:08:48.290
Windows one to fix the problems
in the Windows TCP/IP layer.

00:08:48.430 --> 00:08:52.200
There is also AppleTalk support,
but that is only available

00:08:52.200 --> 00:08:54.460
right now for Mac OS 8 and 9.

00:08:54.480 --> 00:09:00.800
If anybody is really up on AppleTalk and
would like to provide us a Windows and

00:09:00.800 --> 00:09:04.380
a Mac OS X client version of that,
that would be really great.

00:09:04.380 --> 00:09:11.440
Is somebody down there
going to volunteer?

00:09:11.590 --> 00:09:14.790
There are three layers available,
as I said earlier.

00:09:16.920 --> 00:09:20.820
Let's get back there.

00:09:20.820 --> 00:09:22.170
Okay.

00:09:22.210 --> 00:09:31.400
They fit into your application
as this diagram shows.

00:09:31.400 --> 00:09:31.490
At the very bottom is the
networking solution provided

00:09:31.490 --> 00:09:31.490
by the operating system.

00:09:31.490 --> 00:09:31.490
One or more

00:09:32.620 --> 00:09:36.340
Talking to that are the net modules,
and they talk to the appropriate

00:09:36.340 --> 00:09:38.610
protocol for that net module.

00:09:38.620 --> 00:09:42.030
The protocol interface,
which is basically where you talk to to

00:09:42.030 --> 00:09:45.920
do your sending and receiving of data,
talks to the net module

00:09:46.320 --> 00:09:48.730
that is active at that time.

00:09:48.740 --> 00:09:51.560
And NetSprocket,
which is the easiest-to-use

00:09:51.560 --> 00:09:53.860
layer and provides a lot of
high-level functionality,

00:09:53.860 --> 00:09:57.150
uses the protocol layer to
do all of its networking.

00:09:57.160 --> 00:10:03.380
Your application can talk to any
one or more of the OpenPlay APIs at

00:10:03.490 --> 00:10:05.310
any time in your program.

00:10:05.320 --> 00:10:09.590
You can also, at the same time,
use any of the low-level OS networking

00:10:09.600 --> 00:10:11.060
that you may want to use.

00:10:15.450 --> 00:10:20.390
Okay,
so NetSprocket is your highest level one.

00:10:20.400 --> 00:10:26.400
It manages information about games,
players, player groups.

00:10:26.400 --> 00:10:30.400
Again,
it uses the protocol API for networking.

00:10:30.780 --> 00:10:33.390
It's very easy to implement and use.

00:10:33.430 --> 00:10:37.600
There's not a whole lot of information
that you have to set up for it.

00:10:37.660 --> 00:10:44.350
There's very simple APIs that allow
you to get the networking up and going.

00:10:45.700 --> 00:10:50.790
Without having to delve into all the
power that NetSprocket API provides.

00:10:51.160 --> 00:10:54.120
is a multi-task network of software
and software development tools

00:10:54.350 --> 00:10:57.100
that are used to deliver and
manage the data of NetSprocket.

00:10:57.100 --> 00:10:58.820
In addition,
NetSprocket handles all of the

00:10:58.820 --> 00:10:59.800
byte swapping requirements for
the transportation of your data,

00:10:59.840 --> 00:11:08.900
meaning that the headers used to send and
receive data and the type information,

00:11:08.900 --> 00:11:11.900
etc., are all byte swapped for you.

00:11:11.980 --> 00:11:15.470
So all you have to do is
worry about your data.

00:11:15.470 --> 00:11:17.400
You don't have to worry about any of
the data that NetSprocket handles.

00:11:18.640 --> 00:11:41.890
is a very popular platform for networking
and networking for the Internet.

00:11:41.890 --> 00:11:41.890
It also handles the reassembly of
packets for reliable streaming,

00:11:41.890 --> 00:11:41.890
which if you are using sprockets or
if you're using the protocol API,

00:11:41.890 --> 00:11:41.890
you have to worry about collecting
your data yourself and putting

00:11:41.890 --> 00:11:41.890
it into meaningful packets.

00:11:41.890 --> 00:11:41.890
If you're using NetSprocket,
everything you get is a complete packet.

00:11:43.690 --> 00:11:47.760
The protocol API is basically
a simple abstraction layer

00:11:47.760 --> 00:11:50.600
over the different protocols.

00:11:50.600 --> 00:11:54.520
It uses the NetModule API in
order to have a simple,

00:11:54.520 --> 00:12:00.540
consistent API for all of
the protocols that it uses.

00:12:00.540 --> 00:12:05.460
It's a little bit easier to use than the
base underlying operating system APIs.

00:12:05.520 --> 00:12:08.140
It does some things for
you that they do not.

00:12:08.140 --> 00:12:11.500
But again,
it's basically just a wrap around them,

00:12:11.630 --> 00:12:15.790
so you will have to do more
work than with net sprockets.

00:12:16.100 --> 00:12:39.600
[Transcript missing]

00:12:40.960 --> 00:12:45.460
The NetModule APIs,
being a wrapper around

00:12:45.580 --> 00:12:51.390
the base low-level APIs,
are very rarely used by applications.

00:12:51.450 --> 00:12:57.370
They're mainly just there for protocol,
but if you need to use them, that's fine.

00:12:57.690 --> 00:13:05.660
They do contain a few specific calls for
each type of protocol that they wrap.

00:13:06.000 --> 00:13:27.500
[Transcript missing]

00:13:29.480 --> 00:13:35.240
We're going to go over some example code,
and this is new to the 2.1 release.

00:13:35.240 --> 00:13:36.480
It wasn't in previous releases.

00:13:36.480 --> 00:13:41.820
It was designed from the ground up
to be an actual example program to

00:13:41.930 --> 00:13:44.720
be easy to follow and easy to use.

00:13:44.720 --> 00:13:48.900
It should be able to drop into your game.

00:13:48.900 --> 00:13:53.830
You would need to change a few functions,
put in some hooks for

00:13:53.830 --> 00:13:57.580
handling your messages,
and be ready to go.

00:13:57.970 --> 00:14:01.330
My goal in writing that code was
to give you guys something that in

00:14:01.650 --> 00:14:04.830
two or three hours you could have
a networking game up and running.

00:14:06.900 --> 00:14:09.480
So obviously it's well
documented in the code as well.

00:14:09.480 --> 00:14:14.980
There are both NetSprock
API and Protocol API examples.

00:14:14.980 --> 00:14:20.080
They're wrapped around a fully
functional client-host game.

00:14:20.080 --> 00:14:21.920
You know, it's very simple.

00:14:21.920 --> 00:14:25.550
It's text-based so that it will
run on Linux and whatever else.

00:14:25.560 --> 00:14:29.040
But it does show you how to
handle players coming in,

00:14:29.040 --> 00:14:32.230
going out,
sending messages back and forth, and,

00:14:32.230 --> 00:14:34.960
you know, some basic error recovery.

00:14:35.860 --> 00:14:40.530
So it should have all the basics that
you need to get a networking game going.

00:14:40.540 --> 00:14:45.290
And it's all factored out
nicely into separate files.

00:14:45.300 --> 00:14:49.650
So all the NetSprocket code is in
one file by itself that's meant to

00:14:49.680 --> 00:14:51.580
be able to be dropped into your code.

00:14:51.600 --> 00:14:53.420
Same thing for the Protocol API.

00:14:53.420 --> 00:14:55.120
It's in a separate file by itself.

00:14:56.670 --> 00:14:59.640
So again,
the whole goal of this was to create

00:14:59.640 --> 00:15:05.470
something that programmers could use as a
starting point in their own applications.

00:15:05.470 --> 00:15:11.370
Whereas existing examples previous to
2.1 mainly showed you interesting usages

00:15:11.430 --> 00:15:16.180
of APIs and kind of documented them,
but they were mainly test apps.

00:15:18.960 --> 00:15:25.900
So, we're going to cover the
NetSprocket API in actual code next.

00:15:25.900 --> 00:15:30.950
This is all taken from the
example one source base,

00:15:30.990 --> 00:15:33.540
although it has been hacked
up quite a bit in order to fit

00:15:33.540 --> 00:15:34.900
into this slide presentation.

00:15:34.900 --> 00:15:41.870
If you're wanting to see the actual code
and what it looks like in the compilable,

00:15:42.030 --> 00:15:44.560
runnable state,
be sure to look at the source

00:15:44.900 --> 00:15:49.100
code that is in the example
one folder in the source demo.

00:15:50.100 --> 00:16:03.100
[Transcript missing]

00:16:04.900 --> 00:16:06.800
Okay.

00:16:07.000 --> 00:16:08.520
First thing you're going to
want to do if you're going to

00:16:08.530 --> 00:16:10.020
use NetSprocket is start it up.

00:16:10.790 --> 00:16:13.400
But before you do that,
you should probably make sure

00:16:13.400 --> 00:16:16.680
that the OpenPlay library is
actually available to be used.

00:16:16.680 --> 00:16:25.020
And one of the easiest ways to do
that is just make sure that the

00:16:25.020 --> 00:16:25.340
NetSprocket initialize function
has been linked against your app.

00:16:27.090 --> 00:16:30.370
Then it's just one simple call
to get NetSprocket started up,

00:16:30.450 --> 00:16:33.060
and that's the initialized call.

00:16:33.060 --> 00:16:40.070
In previous releases of NetSprocket,
there was a lot of variables for

00:16:40.330 --> 00:16:45.820
memory usage and stuff that you could
set in order to make NetSprocket

00:16:45.820 --> 00:16:48.380
more stable in your application.

00:16:48.380 --> 00:16:52.560
We've totally redone the memory
usage in the 2.1 release.

00:16:52.560 --> 00:16:55.060
The default values
should now always work.

00:16:55.160 --> 00:16:56.560
You should not have to mess with those.

00:16:57.000 --> 00:16:59.810
The only thing you should
really need to set is your

00:16:59.850 --> 00:17:02.710
unique identifier for your game.

00:17:02.720 --> 00:17:05.370
In almost all cases,
this is going to be your

00:17:05.370 --> 00:17:06.820
application's creator code.

00:17:10.700 --> 00:17:13.540
Once you've initialized it,
you're ready to start using it.

00:17:13.540 --> 00:17:17.340
We're going to start by
creating a server connection and

00:17:17.340 --> 00:17:20.100
listening on a port for clients.

00:17:20.250 --> 00:17:26.900
So you're going to have to build a
protocol reference list to be used.

00:17:27.020 --> 00:17:30.240
So first of all,
you're going to create the new list.

00:17:30.880 --> 00:17:32.960
Then you're going to create a protocol.

00:17:32.980 --> 00:17:36.110
In the example programs,
we only use the IP protocol

00:17:36.360 --> 00:17:39.960
since it's the only one available
across all the platforms.

00:17:39.980 --> 00:17:42.610
When you create the IP protocol,
you're going to pass it in the

00:17:42.720 --> 00:17:45.000
port that you want to listen on.

00:17:46.450 --> 00:17:53.850
is a software developer who has
been working on the NetSprocket

00:17:53.850 --> 00:17:53.850
platform for over a decade.

00:17:56.850 --> 00:18:00.020
and OpenPlay are cross-platform,
open source networking

00:18:00.110 --> 00:18:02.160
APIs targeted at game developers.

00:18:04.750 --> 00:18:07.530
First thing you're going to do
is pass it where you want the

00:18:07.580 --> 00:18:08.620
game reference to be stored.

00:18:08.670 --> 00:18:11.600
And the game reference is going
to be how you talk to NetSprocket

00:18:11.930 --> 00:18:14.740
in order to send messages,
receive messages,

00:18:14.740 --> 00:18:18.770
get information about games, users,
all that good stuff.

00:18:20.590 --> 00:18:25.190
Then you're going to pass the pointer
to your reference list that you created.

00:18:25.190 --> 00:18:28.340
You're going to tell it how
many players in this game,

00:18:28.340 --> 00:18:32.270
what the maximum number of players
are in this particular game.

00:18:32.410 --> 00:18:38.280
is a non-profit organization that
has been involved in the development

00:18:38.280 --> 00:18:38.280
and development of NetSprocket.

00:18:38.800 --> 00:18:52.400
[Transcript missing]

00:18:53.400 --> 00:19:02.020
is a game developer who has
been working on a number of

00:19:02.020 --> 00:19:07.720
applications for NetSprocket.

00:19:07.720 --> 00:19:08.310
He is the director of
the NetSprocket team.

00:19:08.310 --> 00:19:08.310
He is the head of the NetSprocket team.

00:19:08.310 --> 00:19:08.310
He is the

00:19:09.900 --> 00:19:13.390
and OpenPlay are cross-platform,
open source networking

00:19:13.420 --> 00:19:15.640
APIs targeted at game developers.

00:19:19.460 --> 00:19:25.800
So, to start up a client,
all you have to do to get the

00:19:25.830 --> 00:19:29.990
basic point started is to tell
it the IP address and port,

00:19:30.230 --> 00:19:31.840
assuming that you're talking to IP.

00:19:31.840 --> 00:19:36.230
And those are C-springs that you pass in.

00:19:37.800 --> 00:19:44.260
is a multi-task, multi-task,
multi-task software that is

00:19:44.260 --> 00:19:44.260
designed to help developers

00:19:44.420 --> 00:19:49.250
is a multi-task,
multi-task server that is

00:19:49.510 --> 00:19:52.900
designed to serve the game.

00:19:52.990 --> 00:19:54.060
It is designed to serve the
game in a way that is easy to

00:19:54.060 --> 00:19:54.060
understand and easy to understand.

00:19:54.060 --> 00:19:54.060
It is designed to serve the
game in a way that is easy to

00:19:54.060 --> 00:19:54.060
understand and easy to understand.

00:19:54.810 --> 00:20:04.360
is a multi-task network of software
and software development tools.

00:20:04.600 --> 00:20:12.330
It is a multi-task network of software
and software development tools.

00:20:12.330 --> 00:20:12.330
It is a multi-task network of software
and software development tools.

00:20:13.720 --> 00:20:18.060
Once you're in that join process,
your client has tried to

00:20:18.140 --> 00:20:19.600
connect to the server.

00:20:19.640 --> 00:20:22.450
It's going to send it a
message requesting it to be

00:20:22.510 --> 00:20:24.990
allowed to join that game.

00:20:25.190 --> 00:20:29.140
So, you're going to want to loop through
looking for messages telling you whether

00:20:29.140 --> 00:20:32.770
that request is going to succeed or fail.

00:20:32.890 --> 00:20:43.610
is a multi-task network of open
source networking APIs that are

00:20:43.610 --> 00:20:43.610
designed to serve as a network

00:20:44.720 --> 00:20:47.650
The best message you can get, of course,
is you're join approved.

00:20:47.750 --> 00:20:49.740
And that just means that
your game connected,

00:20:49.850 --> 00:20:52.330
the host saw the connection,
and approved your client

00:20:52.460 --> 00:20:54.570
to start into the game.

00:20:54.660 --> 00:20:56.940
Set your flags to start
the game up to true,

00:20:57.020 --> 00:20:58.030
and you're done.

00:21:00.490 --> 00:21:03.680
You also can get a couple of
reasons that the request can fail.

00:21:03.680 --> 00:21:05.940
Your join denied is the most common.

00:21:05.940 --> 00:21:09.360
That could be because the game is full,
the password didn't match.

00:21:09.360 --> 00:21:14.070
If the game has banning,
maybe your name has been

00:21:14.070 --> 00:21:15.520
banned for some reason.

00:21:15.520 --> 00:21:21.160
You may also get a game terminate
if the host happened to quit at

00:21:21.200 --> 00:21:23.240
the same time you tried to join.

00:21:23.240 --> 00:21:26.080
And then you can also get the
error message if there was

00:21:26.180 --> 00:21:28.100
some other error that happened.

00:21:28.430 --> 00:21:30.680
In that case,
you just set your join flag to false,

00:21:30.680 --> 00:21:31.650
and you're also done.

00:21:33.830 --> 00:21:40.530
is a well-known network
of software developers.

00:21:40.530 --> 00:21:45.120
Once you have looked at a message,
you want to release the message because

00:21:45.120 --> 00:21:45.120
when NetSprocket sends it to you,
it actually sends you a handle and

00:21:45.120 --> 00:21:45.120
you want to free that memory up.

00:21:45.130 --> 00:21:48.880
As this slide says,
in the example program,

00:21:48.880 --> 00:21:50.900
to save code and make
everything a little bit easier,

00:21:50.900 --> 00:21:54.100
we put all the message
reading into one function,

00:21:54.100 --> 00:21:56.750
and we use the same function
from both the join request and

00:21:56.780 --> 00:21:59.170
the application's main loop.

00:22:01.680 --> 00:22:04.000
Sending messages is fairly easy.

00:22:04.010 --> 00:22:07.600
All you have to do is to
have a little message packet.

00:22:07.600 --> 00:22:13.120
At the start of every message packet is
going to be a NetSprocket message header.

00:22:13.120 --> 00:22:17.530
This contains everything that
NetSprocket needs in order to send

00:22:17.530 --> 00:22:20.540
and receive and parse these messages.

00:22:21.500 --> 00:22:49.900
[Transcript missing]

00:22:51.520 --> 00:22:55.560
is a multi-task, multi-task, multi-task,
multi-task, multi-task, multi-task,

00:22:55.560 --> 00:22:58.480
multi-task, multi-task, multi-task,
multi-task.

00:22:58.480 --> 00:22:59.690
And to do that,
in the function where we're getting

00:22:59.690 --> 00:22:59.690
requested to send a message,
we get the length of the message

00:22:59.690 --> 00:22:59.690
that we're going to send.

00:23:00.700 --> 00:23:23.800
[Transcript missing]

00:23:24.650 --> 00:23:28.270
and OpenPlay are cross-platform,
open source networking

00:23:29.190 --> 00:23:31.580
APIs targeted at game developers.

00:23:36.590 --> 00:23:54.410
is a platform for networking and
networking for all kinds of users.

00:23:54.410 --> 00:23:54.410
It is a platform for networking and
networking for all kinds of users.

00:23:54.600 --> 00:24:24.800
[Transcript missing]

00:24:26.930 --> 00:24:30.990
Then you're going to set
the NetSprocket header size,

00:24:30.990 --> 00:24:34.360
and that size is going to include
the entire size of the packet,

00:24:34.440 --> 00:24:39.980
and that's how NetSprocket knows how
much data to send over the connection.

00:24:40.430 --> 00:24:47.880
is a multi-task network of
software and software development

00:24:47.880 --> 00:24:47.880
tools that can be used to

00:24:48.380 --> 00:24:56.290
is a multi-task network of open
source networking APIs that are

00:24:56.290 --> 00:24:56.290
designed to be able to provide

00:24:56.700 --> 00:25:11.100
[Transcript missing]

00:25:13.080 --> 00:25:16.590
You can also have normal messages,
which are datagrams.

00:25:16.730 --> 00:25:19.080
They are one-try messages.

00:25:19.120 --> 00:25:21.670
They're sent out immediately
when you ask for them to be sent,

00:25:21.870 --> 00:25:23.710
but you do not know if they're
going to get there or not.

00:25:24.480 --> 00:25:28.500
So if that's important to you,
you either want to use the

00:25:28.500 --> 00:25:33.280
registered or you want to have
packet tracking on your own.

00:25:34.400 --> 00:25:39.810
You can also have a junk message,
which is low priority messages.

00:25:39.860 --> 00:25:42.720
If you have a very busy game
and you want to send out like

00:25:43.170 --> 00:25:47.030
little taunts or something,
that would be a good junk message because

00:25:47.110 --> 00:25:51.550
they are only sent when there's not,
when the bandwidth is not being used.

00:25:51.810 --> 00:25:56.180
Therefore, if you have a lot of
movement data being sent,

00:25:56.400 --> 00:26:06.150
is a software developer at
the University of Michigan.

00:26:06.150 --> 00:26:06.150
He is the founder and CEO of NetSprocket.

00:26:08.850 --> 00:26:16.440
is a multi-task platform that offers
a wide range of services and services

00:26:16.540 --> 00:26:20.440
that are available for all players.

00:26:20.440 --> 00:26:28.590
You can access the services and services
and services in the NetSpocket app.

00:26:28.590 --> 00:26:33.180
You can also use the NetSpocket
app to access the services and

00:26:33.180 --> 00:26:33.180
services in the NetSpocket app.

00:26:33.350 --> 00:26:36.540
For this,
you get information about the game,

00:26:36.540 --> 00:26:39.960
and then you simply index
into the structure and return

00:26:39.960 --> 00:26:42.190
the value that is there.

00:26:42.370 --> 00:26:47.610
The OpenPlay.h file has
all the structures defined,

00:26:47.870 --> 00:26:52.560
so you can look into that file to
figure out what structures and what

00:26:52.560 --> 00:26:54.640
information is available in each.

00:26:54.660 --> 00:27:00.110
You can get information about groups,
players, and games in a similar fashion.

00:27:01.860 --> 00:27:05.600
Now, once you have everybody set up,
you're connected,

00:27:05.710 --> 00:27:07.240
you're going to be running
your main game loop.

00:27:07.320 --> 00:27:10.400
And in that loop,
you want to call a function to get your

00:27:10.400 --> 00:27:16.900
messages and handle each of the different
messages that you're going to receive.

00:27:17.520 --> 00:27:22.740
is a software developer at
the University of Missouri.

00:27:22.740 --> 00:27:22.740
He is the founder and CEO of NetSprocket.

00:27:23.430 --> 00:27:26.420
You're going to have two
basic types of messages.

00:27:26.420 --> 00:27:29.100
You're going to have
NetSprocket type messages,

00:27:29.100 --> 00:27:32.240
and these are going to be messages
like a player has left the game,

00:27:32.240 --> 00:27:37.690
a player has joined the game,
the host has terminated the game.

00:27:40.400 --> 00:27:47.200
Those NetSprocket message types, again,
are defined in OpenPlay.h.

00:27:47.200 --> 00:27:51.380
The example program handles all
the basic types in the game,

00:27:51.380 --> 00:27:55.320
plus it gives you a switch
statement pre-built with every

00:27:55.320 --> 00:27:58.240
message type already in it,
even though it may not handle every

00:27:58.240 --> 00:28:01.090
single one of them for that game.

00:28:02.000 --> 00:28:05.960
You're also going to have
application-defined messages.

00:28:06.080 --> 00:28:08.840
You know, shot fired, player moved.

00:28:09.520 --> 00:28:15.340
In this example, there are messages
that are just messages.

00:28:15.650 --> 00:28:19.840
There are questions that would be
asked and answers that would be given.

00:28:19.900 --> 00:28:24.860
And again,
when you're done with the message,

00:28:24.880 --> 00:28:27.430
be sure to release it.

00:28:29.940 --> 00:28:35.320
When you're ready to quit the
game or just end the game,

00:28:35.320 --> 00:28:39.050
you simply need to dispose of the game.

00:28:40.290 --> 00:28:43.260
In this case, we're passing it the
forced termination flag.

00:28:43.290 --> 00:28:48.030
This means that you do not
want to wait for anything,

00:28:48.120 --> 00:28:51.160
shut the game down, and go on.

00:28:51.190 --> 00:28:58.950
And if you're the host,
this would force all the clients to quit,

00:28:58.950 --> 00:28:58.950
and it would send them a
host terminated message.

00:29:02.400 --> 00:29:05.560
If you are hosting a game,
you then have a few more things

00:29:05.560 --> 00:29:08.200
to do because you created some
information earlier in order to be

00:29:08.250 --> 00:29:10.020
able to start that hosting process.

00:29:10.020 --> 00:29:14.680
You're going to want to go through
and free up all that information.

00:29:14.680 --> 00:29:16.730
The first thing you're going
to do is get the number of

00:29:16.900 --> 00:29:20.660
protocols that are in the list,
and this is the way you should do that.

00:29:20.970 --> 00:29:24.820
Don't assume that something
hasn't been added to the list.

00:29:24.830 --> 00:29:28.540
In a later version of NetSprocket,
maybe protocols are added to

00:29:28.590 --> 00:29:33.150
the list without your knowledge,
So be sure to use the list count and

00:29:33.160 --> 00:29:35.960
not assume that you know what it is.

00:29:37.250 --> 00:29:43.440
is a multi-task, multi-task, multi-task,
multi-task, multi-task, multi-task,

00:29:43.440 --> 00:29:46.520
multi-task, multi-task, multi-task.

00:29:46.520 --> 00:29:50.730
For each item in the list reference,
you are going to want to

00:29:50.730 --> 00:29:52.930
get the protocol reference.

00:29:52.930 --> 00:29:57.190
You are going to want to remove
that reference from the list.

00:29:57.390 --> 00:29:59.790
That doesn't free the reference.

00:29:59.790 --> 00:29:59.790
It just removes it from that list.

00:29:59.790 --> 00:29:59.790
Then you can actually dispose
of that protocol reference.

00:30:01.200 --> 00:30:23.500
[Transcript missing]

00:30:24.250 --> 00:30:27.340
So we're going to cover a little
bit about the protocol usage now.

00:30:27.340 --> 00:30:31.720
The protocol usage,
or the protocol API usage,

00:30:31.720 --> 00:30:35.080
is a bit more complicated,
and I couldn't make it fit into a nice

00:30:35.080 --> 00:30:37.570
little slide presentation very well.

00:30:37.580 --> 00:30:42.060
So we're going to cover this
a little bit in the abstract.

00:30:42.060 --> 00:30:47.920
It follows the same general
format as the NetSprocket API,

00:30:47.920 --> 00:30:51.100
because that's how we arranged
it in the example code,

00:30:51.100 --> 00:30:53.200
so that it would be easier to understand.

00:30:54.200 --> 00:30:59.260
There's a lot of issues it has to deal
with that the NetSprocket code does not,

00:30:59.350 --> 00:31:03.570
so that is one of the
reasons why it doesn't fit.

00:31:06.760 --> 00:31:22.050
and OpenPlay are cross-platform,
open source networking

00:31:22.050 --> 00:31:31.650
APIs targeted at game developers.

00:31:31.650 --> 00:31:31.650
NetSprocket and
OpenPlay are cross-platform,

00:31:31.650 --> 00:31:31.650
open source networking
APIs targeted at game developers.

00:31:35.720 --> 00:31:39.130
So if you're going to start up a server,
you're going to have to create

00:31:39.130 --> 00:31:40.880
a protocol configuration.

00:31:40.930 --> 00:31:45.470
And protocol create
config is what does that.

00:31:45.600 --> 00:31:50.610
It basically creates something similar
to a protocol reference in NetSprocket.

00:31:50.610 --> 00:31:55.840
There's a string that you can
retrieve with each reference that is

00:31:55.840 --> 00:32:02.470
a C string and it has a lot of the
basic things like IP address equals,

00:32:02.470 --> 00:32:04.710
port equals, etc.

00:32:05.000 --> 00:32:07.220
is a very popular
platform for networking.

00:32:07.220 --> 00:32:09.610
Once you get that on the host side,
you're going to want to replace

00:32:09.610 --> 00:32:12.900
the port in the string with the
port that you want to listen to,

00:32:12.900 --> 00:32:18.400
because what will be there
will be just the default one

00:32:18.400 --> 00:32:18.400
that the protocol API created.

00:32:19.100 --> 00:32:35.100
[Transcript missing]

00:32:35.980 --> 00:32:36.900
is a host of NetSprocket.

00:32:36.900 --> 00:32:39.900
If you are a host that also
wants to play on that game,

00:32:39.900 --> 00:32:44.010
you're going to have to create a separate
client connection to yourself so that

00:32:44.020 --> 00:32:46.510
you can receive and send information.

00:32:49.560 --> 00:32:52.140
For a client, it starts out very similar.

00:32:52.140 --> 00:32:55.600
You're going to create
a config reference.

00:32:55.720 --> 00:32:58.490
You're going to retrieve
the string for that.

00:32:58.620 --> 00:33:00.440
In this case,
you're going to want to replace

00:33:00.440 --> 00:33:03.620
the IP address and the port to
match what the server expects.

00:33:03.620 --> 00:33:07.400
In the example code,
there is a function for

00:33:07.400 --> 00:33:09.840
making this a lot easier.

00:33:09.840 --> 00:33:15.160
You pass it in the string identifier
that you want to replace and

00:33:15.450 --> 00:33:20.050
the value you want to replace
that reference's value with.

00:33:22.180 --> 00:33:25.340
So, again,
you create a new protocol config,

00:33:25.470 --> 00:33:28.490
and then you open an
endpoint to the server.

00:33:30.870 --> 00:33:36.060
Sending messages with protocol API is
a little bit different in that you

00:33:36.060 --> 00:33:38.060
have to do everything yourself.

00:33:38.090 --> 00:33:42.800
All you have is an endpoint
to another computer.

00:33:42.800 --> 00:33:47.260
So if you're going to send information,
you need to create the header yourself,

00:33:47.320 --> 00:33:51.650
and that header needs to have all
the information you need in order

00:33:51.650 --> 00:33:54.580
to send and receive that message.

00:33:54.580 --> 00:33:57.380
The length of the
message may be important,

00:33:57.380 --> 00:33:58.260
it may not.

00:33:58.830 --> 00:34:02.580
The type of message should probably
be in there unless you have some

00:34:02.580 --> 00:34:04.140
other way of identifying them.

00:34:04.140 --> 00:34:06.750
So you're going to...

00:34:08.170 --> 00:34:17.180
is a platform for you to use to
create and manage your own NetSpot.

00:34:17.180 --> 00:34:17.180
You can use it to

00:34:17.300 --> 00:34:29.610
is a multi-task network of
software and software development,

00:34:29.610 --> 00:34:29.610
and is a multi-task network of
software and software development.

00:34:30.050 --> 00:34:33.080
You are going to send out the
packet with protocol send packet.

00:34:33.140 --> 00:34:36.990
And if you have a bunch
of clients connected,

00:34:37.000 --> 00:34:38.900
instead of one call,
you are going to have to

00:34:39.120 --> 00:34:41.710
go through your own loop.

00:34:41.900 --> 00:34:44.580
is sending out packets to
each individual client.

00:34:44.830 --> 00:34:47.920
This means, of course,
that you have to keep track of in your

00:34:47.920 --> 00:34:51.890
game how many clients are connected,
what their endpoints are,

00:34:51.940 --> 00:34:58.090
and all that other information
that NetSprocket handles for you.

00:35:03.620 --> 00:35:07.160
Here's one of the things where
the complexity issues come up.

00:35:07.200 --> 00:35:09.920
All your messages are received
in a callback function that

00:35:09.980 --> 00:35:12.260
is called an interrupt time.

00:35:12.870 --> 00:35:17.040
The protocol API has an interrupt
firing that is looking for

00:35:17.080 --> 00:35:19.800
incoming data on all the endpoints.

00:35:19.800 --> 00:35:23.330
And when it gets it,
it's going to call your callback

00:35:23.350 --> 00:35:26.360
function for you to handle that data.

00:35:27.110 --> 00:35:34.100
is a software developer at
the University of Michigan.

00:35:34.100 --> 00:35:34.100
He is the CEO of NetSprocket.

00:35:34.660 --> 00:35:36.510
is a multi-task network.

00:35:36.660 --> 00:35:40.870
The data is not going to be
handled for you by the protocol

00:35:40.870 --> 00:35:40.870
APIs like it is in NetSprocket.

00:35:41.580 --> 00:35:44.170
In the example program,
there's a linked list that's

00:35:44.170 --> 00:35:46.910
used to handle the messages,
and as they come in,

00:35:46.950 --> 00:35:50.580
they get added to the linked list,
and in the main application,

00:35:50.580 --> 00:35:56.760
the linked list is transversed in
order to retrieve the messages.

00:35:56.840 --> 00:36:02.420
You want to do as little as possible,
of course, in your callback function.

00:36:02.810 --> 00:36:10.000
So, there's a couple codes that the
protocol API uses when talking

00:36:10.000 --> 00:36:13.260
to your callback function.

00:36:13.260 --> 00:36:21.960
It tells you why you're getting called
and what information you're being sent,

00:36:21.960 --> 00:36:21.960
and all that's documented in
the OpenPlay documentation as

00:36:21.960 --> 00:36:21.960
well as in the OpenPlay.h file.

00:36:22.200 --> 00:36:44.000
[Transcript missing]

00:36:44.540 --> 00:36:47.480
is a very popular
platform for networking.

00:36:47.810 --> 00:36:51.350
There is a function called
protocol receive packet.

00:36:51.350 --> 00:36:54.160
That is how you get the
information from your endpoint.

00:36:54.570 --> 00:37:01.920
is a global network of software
and software developers that are

00:37:01.920 --> 00:37:01.920
committed to the development,

00:37:02.440 --> 00:37:03.680
is a non-profit organization that is
committed to helping developers to

00:37:03.680 --> 00:37:04.700
create and manage their own And then,
of course,

00:37:04.700 --> 00:37:08.560
because you are in an interrupt,
you really don't want to handle any

00:37:08.560 --> 00:37:09.400
messages in the callback function.

00:37:09.400 --> 00:37:16.040
You want to queue them up and let the
main loop or a separate thread handle

00:37:16.090 --> 00:37:20.950
those for you so that you use as little
time in the interrupt as possible.

00:37:23.850 --> 00:37:27.270
So when you're finished,
shutting down requires

00:37:27.270 --> 00:37:28.540
a little bit of work.

00:37:28.610 --> 00:37:31.700
You have to go through and close all
your endpoints that have been created.

00:37:31.700 --> 00:37:36.440
The server is going to have to go
through looping through all the connected

00:37:36.510 --> 00:37:38.890
clients and close each endpoint.

00:37:38.890 --> 00:37:40.530
It's opened up to every client.

00:37:40.700 --> 00:37:44.700
The clients are going to
have to do a little bit less.

00:37:44.700 --> 00:37:49.040
They should only have one or
two endpoints open to the host.

00:37:49.410 --> 00:37:54.770
And then once you've actually told
Protocol API to close those endpoints,

00:37:54.870 --> 00:38:01.300
you need to loop through a little
message handling loop and wait for

00:38:01.300 --> 00:38:04.180
those endpoints to actually close down.

00:38:04.230 --> 00:38:08.660
Because you will probably get
some termination packets and other

00:38:08.660 --> 00:38:15.620
information that you want to make sure
you empty all of the endpoint buffers

00:38:15.620 --> 00:38:18.220
before you actually leave your app.

00:38:18.260 --> 00:38:23.560
and OpenPlay are cross-platform,
open source networking

00:38:23.560 --> 00:38:26.960
APIs targeted at game developers.

00:38:28.400 --> 00:38:34.180
The OpenPlay API calling
your callback function.

00:38:34.180 --> 00:38:34.180
That would end up in badness.

00:38:34.430 --> 00:38:44.120
is a global network of open source
networking APIs that are used to support

00:38:44.120 --> 00:38:44.120
and manage open source networking.

00:38:45.750 --> 00:38:50.220
So, protocol API in summary,
it's more complex as

00:38:50.220 --> 00:38:54.810
compared to NetSprocket,
a little bit less complex

00:38:54.810 --> 00:39:01.700
as compared to the raw,
like OpenTransport or Sockets usage.

00:39:02.240 --> 00:39:07.780
You have to be really careful
with your callback function.

00:39:08.110 --> 00:39:09.690
That is the thing that's
going to really end up being

00:39:09.900 --> 00:39:26.800
[Transcript missing]

00:39:28.160 --> 00:39:33.330
The example code is on the 2.1
release available on the website.

00:39:33.410 --> 00:39:37.960
It handles all of this
stuff that I've mentioned,

00:39:37.960 --> 00:39:42.440
including memory interrupt safe routines,
replacing information in

00:39:42.440 --> 00:39:47.000
the protocol config strings,
reassembling the packet.

00:39:47.000 --> 00:39:51.990
It is not handled, however,
because the demo uses only datagrams.

00:39:52.400 --> 00:39:54.920
and OpenPlay are cross-platform,
open source networking

00:39:54.930 --> 00:39:56.620
APIs targeted at game developers.

00:39:59.160 --> 00:40:02.560
has mentioned before there's a lot of
products right now that are shipping

00:40:02.560 --> 00:40:04.900
that use OpenPlay or NetSprocket APIs.

00:40:04.900 --> 00:40:09.950
This is a partial list and there's
more that are in development

00:40:10.570 --> 00:40:17.530
and we expect there to be quite
a few more over the next year.

00:40:17.530 --> 00:40:17.530
So,

00:40:24.150 --> 00:40:32.000
Now I'm going to give
you a demonstration here.

00:40:32.480 --> 00:40:37.140
Alright,
what we have running here is GameSmith.

00:40:37.190 --> 00:40:40.560
It uses NetSprocket to
do all of its networking,

00:40:40.610 --> 00:40:46.090
and it makes good use of almost
every part of the NetSprocket APIs.

00:40:47.310 --> 00:40:49.950
is a game-finding service.

00:40:50.030 --> 00:40:53.160
One of the very cool things it
does is that it uses groups in

00:40:53.160 --> 00:40:55.200
NetSprocket to handle rooms.

00:40:55.270 --> 00:40:58.200
So when you move from room to room,

00:40:58.260 --> 00:41:02.290
What GameSmith does is it moves
that player into another group,

00:41:02.290 --> 00:41:06.130
and that's how the user interface
knows who's in what room,

00:41:06.130 --> 00:41:08.730
is by the NetSprocket groups.

00:41:08.820 --> 00:41:12.530
So if you have a game that
you want to have multiple

00:41:12.530 --> 00:41:17.910
people doing different things,
groups are a great usage for that.

00:41:18.300 --> 00:41:35.900
[Transcript missing]

00:41:41.900 --> 00:41:47.740
So, you'll notice I gave both of
those a password and those were

00:41:47.740 --> 00:41:54.250
the passwords that were passed in
from that dialog to NetSprocket.

00:41:54.540 --> 00:41:57.050
The game is really quite complex.

00:41:57.120 --> 00:42:00.200
It needed this one gigahertz
machine and the powerful graphics

00:42:00.200 --> 00:42:03.260
card to handle all the 3D text.

00:42:04.800 --> 00:42:11.090
Basically, question answers,
you type an answer, type an answer,

00:42:12.400 --> 00:42:23.100
[Transcript missing]

00:42:23.500 --> 00:42:48.900
[Transcript missing]

00:42:51.930 --> 00:43:10.830
will be a little bit more
in depth on the topic.

00:43:10.900 --> 00:43:10.900
So, a little overview on different
APIs and how they compare

00:43:10.900 --> 00:43:10.900
to OpenPlay and its APIs.

00:43:10.900 --> 00:43:10.900
We'll do a little bit on DirectPlay and
OpenTransport and Sockets.

00:43:11.650 --> 00:43:25.290
will be presenting his presentation
on the NetSprocket and OpenPlay.

00:43:25.290 --> 00:43:25.290
He will also be presenting
his presentation on the

00:43:25.290 --> 00:43:25.290
NetSprocket and OpenPlay.

00:43:26.670 --> 00:43:33.380
So, for direct play,
some of the similarities would be that

00:43:34.160 --> 00:43:41.280
The DirectPlay API set compares most
closely to the NetSprocket API set.

00:43:41.330 --> 00:43:44.150
They're both high-level APIs.

00:43:44.210 --> 00:43:48.930
They both handle things like games,
players, groups,

00:43:49.230 --> 00:43:56.880
and all the basic requirements of passing
messages for the game back and forth.

00:43:57.380 --> 00:44:01.250
and NetSprocket provide about the
same type of message flexibility

00:44:01.350 --> 00:44:04.210
as far as sending in reliable
and unreliable type packets.

00:44:04.300 --> 00:44:11.080
They both do the important job of
handling message reassembly for you.

00:44:11.160 --> 00:44:16.580
So if you're looking at
DirectPlay applications and you're

00:44:16.630 --> 00:44:21.670
wanting to use OpenPlay instead,
then NetSprocket API would

00:44:21.800 --> 00:44:24.490
probably be the best fit for that.

00:44:25.530 --> 00:44:30.130
will be talking about some of the pros to
using OpenPlay as opposed to DirectPlay.

00:44:30.600 --> 00:44:34.130
Obviously, one,
it's platform independent,

00:44:34.130 --> 00:44:39.890
so it will run on a lot of different
platforms that DirectPlay will not.

00:44:40.200 --> 00:44:43.500
is also going to handle byte
swapping issues for you where,

00:44:43.500 --> 00:44:49.090
of course, DirectPlay will not because it
doesn't have to worry about that ever.

00:44:50.560 --> 00:44:54.100
OpenPlay's NetSprocket
API is easier to use.

00:44:54.360 --> 00:44:58.700
There's fewer calls that are
needed to get it going and have

00:44:58.700 --> 00:45:02.910
your game actually up and running.

00:45:03.050 --> 00:45:05.250
It's also less vulnerable
to system upgrades.

00:45:05.460 --> 00:45:08.770
If somebody installs a
new version of DirectX,

00:45:09.240 --> 00:45:12.840
your DirectPlay app may or
may not work depending on what

00:45:12.860 --> 00:45:14.560
they changed in DirectPlay.

00:45:15.410 --> 00:45:19.460
also provides low and high level APIs.

00:45:19.640 --> 00:45:24.480
So while the high level API may
not provide everything you want,

00:45:24.500 --> 00:45:28.220
you can always go down directly
to one of the lower level

00:45:28.220 --> 00:45:30.970
APIs to get that functionality.

00:45:32.160 --> 00:45:34.470
And, of course,
another big benefit is that the

00:45:34.580 --> 00:45:40.040
OpenPlay project is open source,
meaning that you have full access

00:45:40.040 --> 00:45:42.700
to everything about the API.

00:45:42.700 --> 00:45:47.180
If you need to add features,
you find a bug that you need to fix,

00:45:47.180 --> 00:45:50.070
it's all there and available for you.

00:45:50.120 --> 00:45:57.000
It's also a good point if you may
need to port it to another system,

00:45:57.650 --> 00:46:03.460
like a console,
or if there's a future OS system

00:46:03.460 --> 00:46:07.440
that you end up wanting to support,
you'll be able to do that.

00:46:11.280 --> 00:46:14.710
There are some cons,
and we'll cover those a

00:46:14.710 --> 00:46:17.350
little bit briefly here.

00:46:17.410 --> 00:46:22.500
OpenPlay's user interface is
not as robust as DirectPlay's.

00:46:22.590 --> 00:46:26.830
It's actually a very
simple user interface,

00:46:27.040 --> 00:46:32.030
but since most games actually want
to put up their own user interface,

00:46:32.110 --> 00:46:33.650
it's usually not a big deal.

00:46:33.750 --> 00:46:36.920
But if it is for you,
that might be a consideration.

00:46:38.580 --> 00:46:43.400
DirectPlay has a voice functionality
where you can talk to a microphone

00:46:43.400 --> 00:46:47.030
and it will transmit that to the
players in a game and give you chat

00:46:47.460 --> 00:46:49.730
over voice kind of functionality.

00:46:49.870 --> 00:46:51.860
OpenPlay does not provide this.

00:46:52.180 --> 00:46:53.380
There's nothing that is preventing it.

00:46:53.500 --> 00:46:58.470
It's mainly the voice compression
codec that is missing.

00:46:58.540 --> 00:47:03.480
So if that's an important thing to you,
OpenPlay may not fit very well.

00:47:03.500 --> 00:47:10.490
There's a few things that DirectPlay has
functionality-wise that OpenPlay doesn't.

00:47:10.490 --> 00:47:15.490
There's some statistical things
like how much traffic am I sending,

00:47:15.500 --> 00:47:21.020
what's the ping time,
a little bit of that kind of statistical

00:47:21.260 --> 00:47:24.190
gathering that OpenPlay does not.

00:47:24.500 --> 00:47:27.200
Of course,
some enterprising developer can

00:47:27.250 --> 00:47:31.500
obviously add that to the code and
submit it back to the community.

00:47:31.510 --> 00:47:32.990
. .

00:47:35.000 --> 00:47:39.470
The OpenPlay community is going to be
smaller than the DirectX community.

00:47:39.630 --> 00:47:43.200
There's not as many developers out there,
so it may or may not be

00:47:43.280 --> 00:47:44.770
harder to find information.

00:47:44.950 --> 00:47:47.200
So far,
all the requests to the OpenPlay list

00:47:47.590 --> 00:47:50.940
have been able to be answered,
but that might be an

00:47:51.000 --> 00:47:53.580
issue for some developers.

00:47:53.900 --> 00:48:23.300
[Transcript missing]

00:48:26.220 --> 00:48:32.810
So, if you're going to be porting
a DirectPlay application,

00:48:32.920 --> 00:48:35.850
Again, I would suggest that you look
at using the NetSprocket APIs.

00:48:36.000 --> 00:48:44.210
They're going to match up most closely to
what the DirectPlay application is using,

00:48:44.210 --> 00:48:46.560
and I believe that that's
pretty much what all of the

00:48:46.800 --> 00:48:53.050
Mac porting houses currently use,
is the NetSprocket APIs.

00:48:53.690 --> 00:48:58.560
If you have not done a
NetSprocket game before,

00:48:58.560 --> 00:49:03.020
I would obviously look at the new
NetSprocket example code so that you

00:49:03.020 --> 00:49:08.600
can come up to speed most quickly and
get a better idea of how it fits into

00:49:09.120 --> 00:49:12.790
matching up with that direct play usage.

00:49:13.600 --> 00:49:20.500
is a very good idea to
factor out the code.

00:49:20.500 --> 00:49:22.430
Initially, that's going to take a
little bit more time,

00:49:22.700 --> 00:49:25.890
but once you have everything
into one or two files,

00:49:25.910 --> 00:49:31.860
it's a lot easier to control the
access and therefore port it.

00:49:32.980 --> 00:49:40.700
is a multi-task platform that offers a
wide range of support for all types of

00:49:41.500 --> 00:50:11.500
[Transcript missing]

00:50:13.110 --> 00:50:16.060
Okay, we're going to do basically the
same thing in comparing it to

00:50:16.070 --> 00:50:20.160
the OpenTransport and Sockets.

00:50:21.600 --> 00:50:37.300
[Transcript missing]

00:50:37.620 --> 00:50:41.280
is a very popular network
of network functions,

00:50:41.280 --> 00:50:45.130
so it's going to be pretty
similar in using those.

00:50:45.490 --> 00:50:49.770
They both have the datagram
and stream type connections.

00:50:50.030 --> 00:50:53.430
They all use the TCP/IP transport system.

00:50:55.490 --> 00:51:01.100
is a developer of
NetSprocket and OpenPlay.

00:51:01.100 --> 00:51:07.060
He is the founder of
NetSprocket and OpenPlay.

00:51:07.130 --> 00:51:13.060
He is the founder of
NetSprocket and OpenPlay.

00:51:13.100 --> 00:51:15.870
He is the founder of
NetSprocket and OpenPlay.

00:51:15.870 --> 00:51:15.870
He is the founder of
NetSprocket and OpenPlay.

00:51:16.320 --> 00:51:17.290
is a developer at OpenPlay.

00:51:17.300 --> 00:51:22.020
A lot of the details in OpenPlay are
handled for you that you must handle

00:51:22.020 --> 00:51:27.750
yourself if you are using one of
these lower level APIs directly.

00:51:28.090 --> 00:51:31.390
and OpenPlay are cross-platform.

00:51:31.460 --> 00:51:32.800
And while, for instance,
Sockets is cross-platform to

00:51:32.800 --> 00:51:37.610
a lot of different things,
OpenPlay is cross-platform

00:51:38.000 --> 00:51:39.000
to a much higher degree.

00:51:39.000 --> 00:51:45.470
There's not little things about
each platform that are different.

00:51:45.480 --> 00:51:47.430
It's the same on each one.

00:51:47.430 --> 00:51:53.290
And if you're thinking about, like,
OpenTransport, of course,

00:51:53.290 --> 00:51:55.510
OpenTransport's not very
cross-platform at all.

00:51:56.070 --> 00:52:02.100
It also has, of course,
its own set of unique features that

00:52:02.280 --> 00:52:07.500
should help you get your game up and
going networking-wise quicker than

00:52:07.500 --> 00:52:13.270
if you were to use an open transport
or sockets type low-level interface.

00:52:13.700 --> 00:52:23.550
is a member of the OpenPlay community.

00:52:23.550 --> 00:52:23.550
He is the CEO of NetSprocket.

00:52:24.160 --> 00:52:27.920
While this hasn't gotten
completely functional on TCP/IP,

00:52:27.950 --> 00:52:31.380
we have got it working
to a pretty good extent.

00:52:31.470 --> 00:52:36.000
And if you're playing on a local LAN,
you don't have to have some special

00:52:36.000 --> 00:52:42.970
type of functionality that you have to
write if you're using a lower level API.

00:52:43.640 --> 00:52:49.160
is a multi-task network
of software and software

00:52:49.160 --> 00:52:49.160
development tools that are used to

00:52:51.390 --> 00:52:51.910
Some of the cons.

00:52:52.000 --> 00:52:58.590
You're not going to have the
full control of your networking

00:52:58.590 --> 00:53:02.480
access that you would have if you
were using the lowest-level API.

00:53:02.480 --> 00:53:06.300
So if that's going to be
critically important to you,

00:53:06.300 --> 00:53:08.740
that may be a reason that
OpenPlay wouldn't work.

00:53:08.740 --> 00:53:12.600
It's also going to add a small amount
of overhead because it's doing some

00:53:12.600 --> 00:53:14.130
of the things that it does for you.

00:53:14.160 --> 00:53:19.530
This overhead has not proven
to be a major deal in any of

00:53:19.530 --> 00:53:22.620
the games or any of the testing
applications that we have seen,

00:53:22.620 --> 00:53:26.200
but obviously it does
add some overhead to it.

00:53:26.300 --> 00:53:31.400
So if you're in a really data-driven,
critical application,

00:53:31.400 --> 00:53:32.940
that might be an issue.

00:53:34.500 --> 00:53:38.250
also might be overkill for
some really simple usage.

00:53:38.290 --> 00:53:40.500
If you're just doing
something really simple,

00:53:40.500 --> 00:53:44.990
you may not need all of
OpenPlay's functionality.

00:53:45.800 --> 00:53:48.440
is also not fully optimized,
which I would hope all of

00:53:48.500 --> 00:53:51.010
the low-level APIs are.

00:53:51.990 --> 00:54:03.320
and OpenPlay are cross-platform,
open source networking

00:54:03.320 --> 00:54:10.520
APIs targeted at game developers.

00:54:10.520 --> 00:54:10.520
This is a broad array of topics related
to NetSprocket and OpenPlay on Mac OS X.

00:54:10.520 --> 00:54:10.520
NetSprocket and
OpenPlay are cross-platform,

00:54:10.520 --> 00:54:10.520
open source networking
APIs targeted at game developers.

00:54:10.520 --> 00:54:10.520
This is a broad array of topics related
to NetSprocket and OpenPlay on Mac OS X.

00:54:10.600 --> 00:54:27.700
[Transcript missing]

00:54:31.310 --> 00:54:33.700
So, porting hints.

00:54:33.730 --> 00:54:36.190
First thing again,
look at the new example program

00:54:36.380 --> 00:54:41.300
so that you can get a good idea of
how it fits to what you're porting.

00:54:41.350 --> 00:54:44.240
Factor out your networking code
so that you only have one thing

00:54:44.390 --> 00:54:48.380
to touch and not a whole bunch of
things scattered throughout the code.

00:54:48.530 --> 00:54:52.050
If you're looking for something
that's as similar to the OpenTransport

00:54:52.050 --> 00:54:55.760
or Sockets usage as you can get,
you want to be looking

00:54:55.760 --> 00:54:58.290
at the protocol APIs.

00:54:58.720 --> 00:55:00.600
is a very popular networker.

00:55:00.600 --> 00:55:03.250
However, it may benefit you to
rewrite the networking,

00:55:03.330 --> 00:55:07.600
especially if you can factor it out
using the NetSprocket APIs because the

00:55:07.600 --> 00:55:17.130
NetSprocket APIs are going to be a lot
easier to use and they are a little bit

00:55:17.130 --> 00:55:18.500
quicker to get implemented and running.

00:55:21.720 --> 00:55:27.840
So, starting to wrap this thing up,
one thing that everybody should

00:55:27.980 --> 00:55:32.010
keep in mind is that OpenPlay and
NetSprocket have merged in the past.

00:55:32.100 --> 00:55:33.720
Like I said, they were separate projects.

00:55:33.720 --> 00:55:34.770
They're now one project.

00:55:34.900 --> 00:55:39.320
So, when you think of OpenPlay,
it's both.

00:55:39.930 --> 00:55:44.360
The base idea of OpenPlay is
to make networking easy,

00:55:44.600 --> 00:55:46.900
and of course we hope we've done that.

00:55:46.900 --> 00:55:50.120
If there's things you find that
are missing from those APIs,

00:55:50.120 --> 00:55:54.040
be sure to let us know
or contribute changes.

00:55:54.550 --> 00:56:00.770
gives you a choice of high and low
level APIs that you can work with.

00:56:01.030 --> 00:56:04.670
of course it's also cross-platform,
which is one of the big things that we're

00:56:04.800 --> 00:56:07.960
trying to keep everybody informed of.

00:56:08.000 --> 00:56:12.860
Protocol independent,
and you can also write new protocol

00:56:12.860 --> 00:56:16.100
modules if you find a need for one.

00:56:16.500 --> 00:56:19.590
is an open source project
and it has active members

00:56:19.860 --> 00:56:22.470
and an active mailing list.

00:56:22.900 --> 00:56:38.900
[Transcript missing]

00:56:39.750 --> 00:56:43.600
And if you use the
OpenPlay project in your code,

00:56:43.640 --> 00:56:47.210
be sure to let me know or
somebody on the list know,

00:56:47.460 --> 00:56:52.010
because you never know when your name
will appear on a slide at a show.

00:56:54.000 --> 00:56:56.000
The technical documentation
that is available.

00:56:56.000 --> 00:57:00.460
We have the NetSprocket
1.7 documentation.

00:57:00.460 --> 00:57:02.060
It's a little bit out of date.

00:57:02.140 --> 00:57:08.630
And if you look at testing.rtf,
it will tell you pretty much where

00:57:08.710 --> 00:57:12.920
we stand in the terms of how our
functionality matches up with the 1.7.

00:57:12.920 --> 00:57:19.210
And you should always refer
to the OpenPlay.h file if you

00:57:19.310 --> 00:57:23.340
find something that doesn't
compile from the documentation.

00:57:23.620 --> 00:57:25.960
I know that there's a few
constants that have been renamed,

00:57:25.960 --> 00:57:26.540
for instance.

00:57:26.580 --> 00:57:30.240
But for the most part,
the 1.7 documentation does still apply.

00:57:31.810 --> 00:57:35.410
The OpenPlay API is a new
document that was written recently

00:57:35.700 --> 00:57:36.840
by one of our contributors.

00:57:36.840 --> 00:57:41.400
It's a pretty good general
description of using the protocol API.

00:57:41.460 --> 00:57:42.700
It's very well done.

00:57:43.100 --> 00:57:48.700
There is the older API reference
for the protocol interface as well.

00:57:49.150 --> 00:57:53.620
And if you were looking at writing
modules or using the module interface,

00:57:53.790 --> 00:57:55.430
there's the writing op-net modules.

00:57:55.460 --> 00:58:01.700
And all of those are in the documentation
folder when you get the OpenPlay archive.

00:58:03.440 --> 00:58:08.840
So, here's a bunch of sessions that
somehow relate to this one.

00:58:08.850 --> 00:58:12.320
And if you had a time machine,
you could go back and catch

00:58:12.320 --> 00:58:14.080
each and every one of them.

00:58:16.960 --> 00:58:20.800
If you do not have a time machine,
the next best thing you can do is get

00:58:21.000 --> 00:58:25.530
the DVD set and all of these sessions
in their full length are on there.

00:58:28.640 --> 00:58:32.340
So there are a few sessions that are
still happening today and tomorrow.

00:58:32.390 --> 00:58:37.710
Open, the advanced OpenGL sessions here.

00:58:37.960 --> 00:58:41.170
and the core networking session
would also be a good one if

00:58:41.230 --> 00:58:43.590
you're interested in networking.

00:58:45.700 --> 00:59:05.400
[Transcript missing]

00:59:06.190 --> 00:59:09.900
is the Darwin project manager.

00:59:10.040 --> 00:59:13.860
If you have questions that aren't
code related but are more related

00:59:13.860 --> 00:59:17.090
to the Darwin project or the
OpenPlay open source effort,

00:59:17.090 --> 00:59:19.100
you can direct those questions to him.

00:59:19.100 --> 00:59:21.540
If you send them to me,
it's not a big deal.

00:59:21.680 --> 00:59:25.420
I'll forward them to him.

00:59:25.420 --> 00:59:25.420
I might even be able to answer them.

00:59:27.040 --> 00:59:29.760
is the first developer
to launch NetSprocket.

00:59:29.840 --> 00:59:33.190
For the most up-to-date information,
you should go to the

00:59:33.190 --> 00:59:34.780
OpenPlay project page.

00:59:34.820 --> 00:59:39.500
This is the new URL that they've set up.

00:59:40.680 --> 00:59:44.940
This will have the latest
release package on it.

00:59:44.940 --> 00:59:48.600
In fact, right now it does have
the 2.1 release on it.

00:59:48.600 --> 00:59:49.600
It's 2.1 R1.

00:59:49.790 --> 00:59:52.430
There are two packages available there.

00:59:52.540 --> 00:59:55.500
There's the builds and the source code.

00:59:55.580 --> 00:59:58.790
And there's also the mailing
list link and so forth.