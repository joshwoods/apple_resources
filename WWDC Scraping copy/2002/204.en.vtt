WEBVTT

00:00:00.520 --> 00:00:04.300
Ladies and gentlemen,
please welcome Mac OS X Evangelist,

00:00:04.460 --> 00:00:07.050
Xavier Legros.

00:00:12.300 --> 00:00:13.560
Hi, everybody.

00:00:13.600 --> 00:00:14.600
Good morning, should I say?

00:00:14.600 --> 00:00:16.600
Bonjour.

00:00:16.600 --> 00:00:24.540
I'd like to welcome you to session 204,
HIToolbox: An Architectural Overview.

00:00:24.600 --> 00:00:26.570
Well, actually...

00:00:26.710 --> 00:00:28.450
I'd like to welcome you
to the HIToolbox Day.

00:00:28.450 --> 00:00:31.700
If you're a Carbon developer,
today is really your day.

00:00:31.820 --> 00:00:35.850
And HIToolbox brought
you on the platform,

00:00:35.850 --> 00:00:38.700
and for that,
that was actually a great step forward.

00:00:38.870 --> 00:00:41.060
So now on Mac OS X, it's great.

00:00:41.290 --> 00:00:44.700
But you've seen only
the tip of the iceberg.

00:00:44.700 --> 00:00:47.050
We showed you Carbon events,
so you can use them in your

00:00:47.050 --> 00:00:48.700
application when you brought them,
you know, on Mac OS X.

00:00:48.700 --> 00:00:52.740
We showed you Unicode support, like,
you know, the Draw Theme Text Box APIs,

00:00:52.740 --> 00:00:53.560
for instance.

00:00:54.140 --> 00:00:55.690
Some new controls.

00:00:55.870 --> 00:00:58.700
But at the same time that you guys
were porting your application,

00:00:58.710 --> 00:01:01.500
the toolbox has been
through a lot of changes,

00:01:01.830 --> 00:01:03.650
and really a lot of changes.

00:01:03.700 --> 00:01:06.700
A complete new architecture
has been implemented,

00:01:06.760 --> 00:01:09.210
and until today,
we haven't been able to show you,

00:01:09.210 --> 00:01:11.700
actually, the future of a toolbox.

00:01:11.700 --> 00:01:13.690
So in fact, today,
we're going to be discussing

00:01:13.690 --> 00:01:14.630
a brand new toolbox.

00:01:14.700 --> 00:01:18.830
And for that, we'll start with this first
section that's going to be

00:01:18.830 --> 00:01:20.700
talking about HI objects.

00:01:20.700 --> 00:01:23.700
And in here, this is very cool,
because what's a HI object?

00:01:23.710 --> 00:01:28.700
A HI object is truly all toolbox objects
now are going to be an HI object.

00:01:28.700 --> 00:01:32.700
That means you as a developer are
going to be able to subclass a control.

00:01:32.930 --> 00:01:35.740
That means it's going to make
easier integration in your code,

00:01:35.880 --> 00:01:38.970
and it's going to be easier
for us as well to create new

00:01:39.010 --> 00:01:41.380
features and new controls.

00:01:41.890 --> 00:01:44.140
And Ed will be talking about this.

00:01:44.220 --> 00:01:45.600
After that, we'll have a session,
I think,

00:01:45.600 --> 00:01:47.850
at 10:00 that will discuss HIView.

00:01:47.910 --> 00:01:49.540
HIView is really, really cool.

00:01:49.540 --> 00:01:51.100
We've been waiting for
it for a long time,

00:01:51.100 --> 00:01:54.050
and today we're going to be
showing you what we've been doing.

00:01:54.170 --> 00:01:56.140
It's a one-pass drawing model.

00:01:56.220 --> 00:01:59.620
It's going to be able to use
Core graphics directly or Quick Draw for,

00:01:59.660 --> 00:02:02.290
like, you know, compatibility paths.

00:02:02.420 --> 00:02:05.780
The cool thing is that now, once again,
each object is going

00:02:05.780 --> 00:02:07.290
to be its view as well.

00:02:07.390 --> 00:02:09.880
So you're going to do, like,
your own clipping, what happens,

00:02:09.880 --> 00:02:12.630
and it's going to manage its own drawing,
so you'll be called-- if you

00:02:12.670 --> 00:02:15.200
want to use CG2-- do your
own drawing inside your view,

00:02:15.320 --> 00:02:16.550
and each object's going to be a view.

00:02:16.670 --> 00:02:19.400
There are many advantages behind this.

00:02:19.510 --> 00:02:21.500
And of course, what will be the toolbox?

00:02:21.610 --> 00:02:22.890
We have new controls.

00:02:23.030 --> 00:02:25.860
And because of this new
architecture that we have,

00:02:25.960 --> 00:02:27.360
we're going to be able to, like,
you know,

00:02:27.500 --> 00:02:30.860
add new controls to the toolbox easily,
and for you as well,

00:02:30.860 --> 00:02:33.610
you're going to be able to, like,
improve your application and use all

00:02:33.610 --> 00:02:36.580
these new features in a brand-new manner.

00:02:38.870 --> 00:02:42.600
So today really, it's the end of the
toolbox the way we know it.

00:02:42.600 --> 00:02:45.930
And to present you this new feature,
who better than Monsieur Ed,

00:02:46.030 --> 00:02:48.610
the engineer formerly known as Ed Voas,
to present this.

00:02:49.050 --> 00:02:50.600
Thank you.

00:02:57.640 --> 00:03:02.940
Good morning.

00:03:03.010 --> 00:03:04.040
Okay.

00:03:04.160 --> 00:03:08.300
So like Xavier said, you know,
Carbon got you onto Mac OS X,

00:03:08.520 --> 00:03:10.180
but that's not it for Carbon.

00:03:10.270 --> 00:03:12.640
We have a lot more stuff
we want to work on,

00:03:12.640 --> 00:03:14.140
a lot more stuff we want to do.

00:03:14.240 --> 00:03:17.920
And the purpose of this session is to
kind of take you back from where we

00:03:17.920 --> 00:03:22.960
were and step you through the different
Mac OS releases and tell you all the

00:03:23.030 --> 00:03:28.090
great things that we've been working on
and how they fit in and why we are where

00:03:28.090 --> 00:03:30.940
we are today and where we're going.

00:03:31.440 --> 00:03:35.380
So in part of this,
the second half of this session,

00:03:35.380 --> 00:03:39.260
we'll focus on our new
foundation of the HI Toolbox,

00:03:39.330 --> 00:03:41.450
which is based on HI Object.

00:03:41.450 --> 00:03:44.450
And we'll learn about
why that's important.

00:03:46.050 --> 00:03:48.940
Okay, first let's get some
terminology out of the way.

00:03:49.010 --> 00:03:50.940
What is HIToolbox?

00:03:50.980 --> 00:03:56.110
Well, basically, it is a user interface
environment for Carbon.

00:03:56.970 --> 00:04:00.560
So we do everything with
respect to appearance,

00:04:00.640 --> 00:04:03.790
events, controls, all on-screen widgets,
everything.

00:04:03.880 --> 00:04:06.920
If you have a user interface,
you are using the HIToolbox

00:04:07.040 --> 00:04:09.200
either directly or indirectly.

00:04:09.200 --> 00:04:12.700
We're also called the High Level Toolbox,
and I might use those

00:04:12.760 --> 00:04:16.950
phrases interchangeably,
so they both mean the same thing.

00:04:17.780 --> 00:04:21.100
And what we're about is very simple.

00:04:21.190 --> 00:04:29.470
We want to make it as easy as possible
to create a great Carbon application.

00:04:30.120 --> 00:04:34.160
We want to provide lots of free,
standard functionality while allowing

00:04:34.160 --> 00:04:37.230
you to customize it as you need to.

00:04:38.130 --> 00:04:42.100
We're also trying to develop
an object-oriented approach.

00:04:42.200 --> 00:04:45.840
Now, one could argue that, you know,
even back in 1984, there was kind of an

00:04:45.840 --> 00:04:47.370
object-oriented approach.

00:04:47.470 --> 00:04:51.140
It wasn't driven through an
object-oriented language or runtime,

00:04:51.250 --> 00:04:53.880
but they had controls, windows,
and you had basically

00:04:53.960 --> 00:04:55.610
routines to operate on them.

00:04:55.700 --> 00:04:59.880
And now with HIObject,
we're taking that a step further.

00:05:00.360 --> 00:05:02.670
As I mentioned, it's easier to customize.

00:05:02.670 --> 00:05:06.720
And above all, we want to make it really
fun and exciting to write a

00:05:06.770 --> 00:05:09.570
Carbon application for Mac OS X.

00:05:10.680 --> 00:05:12.440
Let's go through some history.

00:05:12.570 --> 00:05:14.260
First, Mac OS 8.

00:05:14.390 --> 00:05:16.090
This is kind of where we started.

00:05:16.190 --> 00:05:19.800
In that release,
we introduced the Platinum Appearance.

00:05:19.900 --> 00:05:24.050
We also introduced a lot of new controls,
things like progress bars, sliders,

00:05:24.420 --> 00:05:25.570
tab control.

00:05:25.630 --> 00:05:29.240
I think we had over 20 new
controls in that release.

00:05:29.360 --> 00:05:32.360
We introduced the concept
of keyboard focus,

00:05:32.360 --> 00:05:36.640
so you could actually have a visual
focus for controls and be able

00:05:36.640 --> 00:05:41.990
to arbitrate between different
controls using the focus APIs.

00:05:42.040 --> 00:05:45.250
We also introduced
rudimentary control embedding,

00:05:45.360 --> 00:05:48.790
which is a precursor to HIView,
which will be in the second

00:05:48.790 --> 00:05:50.470
session this morning.

00:05:51.320 --> 00:05:54.870
And we introduce nice user
features like live scrolling,

00:05:54.870 --> 00:05:57.150
which developers can take advantage of.

00:05:57.270 --> 00:05:58.050
But that wasn't good enough.

00:05:58.190 --> 00:06:01.200
We knew we had a lot more
stuff we needed to do.

00:06:01.310 --> 00:06:03.090
And that takes us to Mac OS 8.5.

00:06:03.090 --> 00:06:06.110
In that,
we had the full appearance manager

00:06:06.380 --> 00:06:10.200
with all of the different primitives
that it was possible to draw.

00:06:10.460 --> 00:06:13.100
We actually took the
High Level Toolbox native,

00:06:13.190 --> 00:06:14.180
and this is a big deal.

00:06:14.200 --> 00:06:18.980
Prior to this, the toolbox was still
written in 68k assembler.

00:06:18.980 --> 00:06:22.650
We rewrote it in C, ported it,
and this was actually a good

00:06:22.650 --> 00:06:25.920
thing because this was the
basis for our Mac OS X toolbox.

00:06:26.200 --> 00:06:29.720
It's a very, very important move for us.

00:06:30.390 --> 00:06:36.300
We also introduced lots of features
that had been in third party apps,

00:06:36.310 --> 00:06:37.730
but we actually pulled
them into the toolbox,

00:06:37.880 --> 00:06:39.510
things like floating windows.

00:06:39.600 --> 00:06:41.600
We also introduced new
concepts like the window proxy,

00:06:41.600 --> 00:06:47.130
something that kind of was seen in
the finder only prior to Mac OS 8.5.

00:06:47.260 --> 00:06:49.290
We opened it up for all developers.

00:06:49.300 --> 00:06:51.930
And we introduced interesting
concepts like properties,

00:06:51.970 --> 00:06:54.200
extensible properties
on all toolbox objects.

00:06:54.340 --> 00:06:58.150
So windows controls and menus all
could have these properties that

00:06:58.150 --> 00:07:00.290
developers could attach to these things.

00:07:00.390 --> 00:07:03.270
And at the time we just called
them refcons on steroids.

00:07:03.270 --> 00:07:06.390
But that even wasn't good enough.

00:07:06.720 --> 00:07:09.460
So that takes us to Mac OS 9.

00:07:09.550 --> 00:07:13.320
So we introduced things like
Control Drag and Drop and,

00:07:13.320 --> 00:07:14.800
well, that's about it.

00:07:14.900 --> 00:07:17.960
We didn't really do much else
because we were kind of busy.

00:07:19.230 --> 00:07:22.390
We were busy working on Mac OS X.

00:07:22.520 --> 00:07:26.510
And this is where the big
change for us started.

00:07:27.330 --> 00:07:33.430
First big thing is we actually took the
toolbox and ported it onto Mach and BSD.

00:07:34.580 --> 00:07:38.080
We also added data structure opacity,
and this is a huge deal.

00:07:38.180 --> 00:07:43.000
While it might not seem like a big deal,
it was huge to us because now our

00:07:43.000 --> 00:07:46.300
data structures were inaccessible
and we could actually change the

00:07:46.350 --> 00:07:50.690
implementation under the hood
without affecting your application.

00:07:51.090 --> 00:07:52.640
We introduced Carbon events.

00:07:52.730 --> 00:07:54.960
Again, this was a huge deal.

00:07:55.080 --> 00:08:00.420
We actually came out with a new event
system that was much better than the

00:08:00.520 --> 00:08:03.410
previous Wait Next Event mechanism.

00:08:04.380 --> 00:08:11.630
And it's a point of, uh, of, uh... Well,
Carbon Events is basically like,

00:08:11.710 --> 00:08:14.440
you could consider it to be the
entire nervous system of the toolbox.

00:08:14.460 --> 00:08:15.440
I mean, it is pervasive.

00:08:15.440 --> 00:08:16.430
We use it everywhere.

00:08:16.530 --> 00:08:19.940
It's an example of where we have
one API to do many different things.

00:08:19.940 --> 00:08:22.820
And once you learn the one API,
you're pretty much comfortable

00:08:23.160 --> 00:08:25.760
in different areas.

00:08:25.900 --> 00:08:29.000
Um, I want to talk about Aqua.

00:08:29.770 --> 00:08:33.770
Through the Appearance Manager,
we actually aided the move to Aqua.

00:08:33.880 --> 00:08:36.200
And in Mac OS X, we added the Aqua look.

00:08:36.260 --> 00:08:39.300
And we also enabled certain
features that were Aqua-specific,

00:08:39.350 --> 00:08:40.890
like Sheets.

00:08:41.310 --> 00:08:42.840
We also added window buffering.

00:08:42.930 --> 00:08:44.940
On Mac OS X we kind of
take this for granted.

00:08:45.050 --> 00:08:47.980
This is kind of a big deal
because window buffering got

00:08:47.980 --> 00:08:49.590
rid of update event flicker.

00:08:49.700 --> 00:08:51.420
We don't have to worry
about that stuff anymore.

00:08:51.560 --> 00:08:54.470
And we're able to do all types of cool
quartz compositing because of this.

00:08:54.510 --> 00:08:58.010
You can have translucent windows
and all types of cool stuff that we

00:08:58.010 --> 00:09:00.140
could only dream about before this.

00:09:00.250 --> 00:09:02.590
And we introduced other developer
features such as window groups.

00:09:02.610 --> 00:09:04.500
You could actually group
windows together and actually

00:09:04.500 --> 00:09:07.100
move them as a physical unit,
or you could actually change the layering

00:09:07.100 --> 00:09:11.330
of windows if our standard window layers,
like floating document modal layers,

00:09:11.340 --> 00:09:15.140
weren't good enough.

00:09:15.230 --> 00:09:17.280
But even that wasn't good enough.

00:09:19.820 --> 00:09:22.890
Biggest thing we worked on
in 10.1 was performance.

00:09:22.990 --> 00:09:25.480
That was the focus of Mac OS 10.1.

00:09:25.480 --> 00:09:28.590
And in that,
we made dramatic improvements.

00:09:28.700 --> 00:09:32.540
If you were to do live resize
speed in ListView in the

00:09:32.540 --> 00:09:36.930
Finder in 10.0 and in 10.1,
you'd see an enormous difference.

00:09:37.000 --> 00:09:39.560
We did a lot of work there.

00:09:39.700 --> 00:09:42.670
We also added a couple of features.

00:09:43.390 --> 00:09:44.740
Such as services.

00:09:44.840 --> 00:09:51.060
So services is something that in 10.0
was only accessible to Cocoa clients.

00:09:51.130 --> 00:09:55.250
In 10.1 and forward,
it's accessible to Carbon clients.

00:09:55.340 --> 00:10:02.230
And during the 10.1 timeframe,
we were making a lot of internal changes.

00:10:02.350 --> 00:10:05.270
And most of these changes were
geared toward what we're going

00:10:05.420 --> 00:10:06.970
to be talking about today.

00:10:10.950 --> 00:10:14.570
All the stuff that we've talked about
so far still isn't where we want to be.

00:10:14.630 --> 00:10:17.990
There's still ways that we can refine
ourselves and make the toolbox better.

00:10:18.160 --> 00:10:19.150
We aren't done.

00:10:19.240 --> 00:10:21.750
Just because you get
on to 10 and that's it,

00:10:21.750 --> 00:10:22.810
we are not done.

00:10:22.980 --> 00:10:25.640
We have a lot more stuff to do.

00:10:25.830 --> 00:10:29.210
Talk about some of the things
that are still kind of problematic

00:10:29.260 --> 00:10:30.800
even in the shipping Mac OS.

00:10:31.510 --> 00:10:35.120
It's still a little hard to overwrite
some default behaviors here and there.

00:10:35.120 --> 00:10:39.500
And it's kind of a pain
to write custom controls.

00:10:39.630 --> 00:10:42.660
Plus on top of that,
there's a different defproc model

00:10:42.960 --> 00:10:45.440
for each manager that we support.

00:10:45.500 --> 00:10:50.240
And a widget set that didn't
completely match that of Coco's.

00:10:52.940 --> 00:10:56.360
Well, we fixed all of this.

00:10:56.490 --> 00:11:01.700
In the Jaguar Toolbox,
we have a lot of new features,

00:11:01.740 --> 00:11:03.990
and I think they're
going to blow your mind.

00:11:04.300 --> 00:11:06.260
First, is a new view architecture.

00:11:06.510 --> 00:11:08.340
We actually have a real view system now.

00:11:08.530 --> 00:11:10.010
It's called HIView.

00:11:10.010 --> 00:11:13.540
And that is the focus of the
entire second session of today.

00:11:14.530 --> 00:11:17.740
We've added accessibility APIs,
and these are important.

00:11:17.740 --> 00:11:20.090
And we're going to cover this
a little bit in a second.

00:11:20.970 --> 00:11:22.010
We also introduced new controls.

00:11:22.090 --> 00:11:23.390
We have the Combo Box.

00:11:23.420 --> 00:11:24.710
We have the Toolbar Control.

00:11:24.820 --> 00:11:26.850
We added drawers.

00:11:27.080 --> 00:11:30.180
And finally,
we've actually unified all of our

00:11:30.180 --> 00:11:34.500
toolbox objects under this HI object
thing that I keep talking about.

00:11:34.620 --> 00:11:36.370
And the whole goal there
is reduce and simplify.

00:11:36.640 --> 00:11:39.830
What we want to do is make one concept
and then just use it everywhere.

00:11:39.920 --> 00:11:44.210
And once you learn the concept,
it's easy to just go from there.

00:11:45.080 --> 00:11:48.770
And this whole time,
what we're trying to do is migrate

00:11:49.440 --> 00:11:52.480
from being a toolbox to a framework.

00:11:53.420 --> 00:11:58.030
So, what we want to be is not just a
collection of routines where maybe

00:11:58.030 --> 00:12:00.600
if I call them in the right order
something magical will happen,

00:12:00.700 --> 00:12:03.580
but rather something where we're
just going to run your app and

00:12:03.580 --> 00:12:07.080
you just tap in where appropriate
for your application and do the

00:12:07.120 --> 00:12:09.870
interesting things that you do.

00:12:10.590 --> 00:12:15.450
And to facilitate this,
we've added things like embedding,

00:12:15.450 --> 00:12:17.060
lots of new controls, Carbon events.

00:12:17.060 --> 00:12:21.800
Carbon events was critical to what
you're going to hear about today.

00:12:21.910 --> 00:12:24.450
It is effectively our messaging system.

00:12:25.380 --> 00:12:26.660
And of course the new View Architecture.

00:12:26.660 --> 00:12:28.080
And we have more planned in the future.

00:12:28.110 --> 00:12:31.500
We'd love to do things like
document model and other things.

00:12:32.290 --> 00:12:34.830
So what is this new HIToolbox
going to bring to you?

00:12:34.910 --> 00:12:38.850
Let's talk first about
the View System briefly.

00:12:39.110 --> 00:12:44.000
Again, HIView, composited drawing.

00:12:44.100 --> 00:12:46.840
We do one pass drawing
in a composited fashion.

00:12:46.980 --> 00:12:51.340
CG or quartz drawing is
the native drawing model.

00:12:51.570 --> 00:12:53.460
You can use Quick Draw though.

00:12:53.680 --> 00:12:57.120
We use floating point coordinates,
which means we're out of the

00:12:57.120 --> 00:13:00.310
sixteen bit quick draw barrier.

00:13:00.990 --> 00:13:03.250
is not something that you want
to go subpixel happy with,

00:13:03.250 --> 00:13:06.470
because the toolbox largely
still deals in integer-based

00:13:06.630 --> 00:13:07.540
bounds and stuff like that.

00:13:07.540 --> 00:13:09.780
So if you started to
do things in subpixels,

00:13:09.820 --> 00:13:14.320
we might do something interesting to
some of the things you wanted to do.

00:13:14.440 --> 00:13:16.140
And it fully supports overlapping views.

00:13:16.280 --> 00:13:18.620
And as I mentioned,
we have a whole session on this.

00:13:18.720 --> 00:13:22.910
I urge you to see it.

00:13:22.910 --> 00:13:22.910
Accessibility.

00:13:23.420 --> 00:13:27.680
Accessibility is important because
it allows application developers who

00:13:27.680 --> 00:13:32.900
provide assistive applications to
actually peek inside your applications

00:13:32.970 --> 00:13:34.960
and kind of see what's going on.

00:13:35.080 --> 00:13:38.120
For example,
an application can peer inside your

00:13:38.180 --> 00:13:42.500
application and see all the windows
and then see all the controls in there.

00:13:42.600 --> 00:13:46.400
And they can actually see what actions
each of those controls can provide.

00:13:46.500 --> 00:13:50.470
And then they can tell the
application to provide those actions.

00:13:50.720 --> 00:13:52.800
And it's in a safe and
well-supported manner.

00:13:54.560 --> 00:13:56.740
So you can do high level
actions like press buttons,

00:13:56.740 --> 00:13:59.040
select the menu item, things like that.

00:13:59.150 --> 00:14:02.310
And then the other side is that
there are APIs for your application

00:14:03.030 --> 00:14:08.970
to allow these accessible-- or
these accessible solutions to get

00:14:08.970 --> 00:14:12.260
at the stuff in your application to
make your application accessible,

00:14:12.260 --> 00:14:14.600
just like we're trying to
make the toolbox accessible.

00:14:14.690 --> 00:14:16.360
This is really important,
and we have multiple

00:14:16.490 --> 00:14:19.650
sessions on this this week,
and I urge you to see them.

00:14:21.270 --> 00:14:23.070
And then we have, as I mentioned,
new controls.

00:14:23.180 --> 00:14:25.480
We have the ComboBox,
something that's been missing

00:14:25.660 --> 00:14:26.760
from Mac OS for years.

00:14:26.860 --> 00:14:32.200
The Toolbar, the same basic toolbar
that you see in Cocoa.

00:14:32.200 --> 00:14:35.900
And Drawers,
like you would see in the Mail.app.

00:14:35.980 --> 00:14:37.040
All right.

00:14:37.190 --> 00:14:39.500
So I'm my own demo boy today.

00:14:39.620 --> 00:14:42.760
So let's go over and take a
look at some of this stuff.

00:14:47.280 --> 00:14:51.770
Now, you should,
uh... That's Kurt's computer.

00:14:51.950 --> 00:14:55.540
Uh, you should be aware that I've
never given a demo in my life.

00:14:55.590 --> 00:14:57.700
I mean, I've done this for years now
and I've never done this,

00:14:57.700 --> 00:15:00.120
so be gentle.

00:15:01.700 --> 00:15:04.500
No pushups.

00:15:04.590 --> 00:15:05.230
All right.

00:15:05.590 --> 00:15:07.900
First thing you see on
screen is a toolbar.

00:15:07.900 --> 00:15:09.000
It's pretty cool, huh?

00:15:09.130 --> 00:15:09.900
All right.

00:15:10.020 --> 00:15:12.640
And it does all the toolbar stuff, right?

00:15:12.680 --> 00:15:14.640
You can hide it and you can show it.

00:15:14.740 --> 00:15:18.870
And if you hold down the command key,
you can drag things around and they move.

00:15:20.210 --> 00:15:24.170
and if you drag them off they poof.

00:15:24.230 --> 00:15:29.660
Um, we also have a couple of concepts,
um, such as, uh,

00:15:29.880 --> 00:15:31.220
items that can't be removed.

00:15:31.220 --> 00:15:34.210
So, for example, I have this thing which
just says can't remove me.

00:15:34.330 --> 00:15:37.120
And no matter how hard I, I try,
I can't remove it.

00:15:37.120 --> 00:15:41.740
I can move it around,
but I just can't actually remove it.

00:15:41.740 --> 00:15:43.310
We also have a concept of anchored items.

00:15:43.440 --> 00:15:47.470
And anchored items allow you to say,
this item should be over on the

00:15:47.860 --> 00:15:50.180
left and it is completely immovable.

00:15:50.180 --> 00:15:51.180
And that's what this one is.

00:15:51.180 --> 00:15:53.880
And no matter how hard I try
to drag it out of there,

00:15:53.880 --> 00:15:55.580
I can't drag it out of there.

00:15:55.580 --> 00:15:56.550
All right.

00:15:56.650 --> 00:16:00.860
The next thing the toolbar
supports is context menu.

00:16:00.860 --> 00:16:03.960
And from there,
you can actually change the style.

00:16:03.960 --> 00:16:05.940
I can have icon and text.

00:16:05.960 --> 00:16:07.120
I can have icon.

00:16:07.230 --> 00:16:08.640
I can have text.

00:16:08.650 --> 00:16:11.940
But something new in Jaguar is you
can actually say use small icons.

00:16:11.940 --> 00:16:13.620
And we use slightly smaller things.

00:16:13.620 --> 00:16:17.470
So you can actually have
a small icon toolbar now.

00:16:17.600 --> 00:16:33.600
[Transcript missing]

00:16:37.400 --> 00:16:40.000
Okay, one of the other tricks for the
toolbar button is if you hold

00:16:40.000 --> 00:16:43.840
down Command Option and click it,
you get the configuration sheet.

00:16:43.980 --> 00:16:46.200
Now you can also use the
context menu to get this.

00:16:46.300 --> 00:16:51.270
And the configuration sheet is
transparent and kind of neat,

00:16:51.270 --> 00:16:52.610
and it does all the things you'd expect.

00:16:52.750 --> 00:16:54.960
For example,
you can change the thing to text,

00:16:55.160 --> 00:16:57.970
text only, use small icons,
just like you can from the context

00:16:58.090 --> 00:16:59.960
menu or from the toolbar button.

00:17:00.070 --> 00:17:03.760
And you can tell it to replace
this with a default set and

00:17:03.760 --> 00:17:06.190
go back and everything's fine.

00:17:07.880 --> 00:17:09.300
You can also just add items.

00:17:09.300 --> 00:17:12.170
So you can drag things in,
like I'm going to drag this in,

00:17:12.170 --> 00:17:15.790
drag this in, and even this.

00:17:18.320 --> 00:17:21.830
And that's all great.

00:17:21.830 --> 00:17:23.840
Then if I resize,
I have the clipped items indicator,

00:17:23.840 --> 00:17:28.520
so the overflow indicator here,
so I see all the things that I saw.

00:17:28.700 --> 00:17:31.100
If I choose customize,
customize is a standard item that

00:17:31.310 --> 00:17:36.800
we just give you in the toolbox,
and if I select it, it just works.

00:17:36.940 --> 00:17:38.520
The app is not doing any of this.

00:17:38.550 --> 00:17:40.300
This is completely under
control of the toolbox.

00:17:40.540 --> 00:17:45.300
All this app does is bring up a
window and attach the toolbar.

00:17:45.300 --> 00:17:45.300
That's it.

00:17:52.900 --> 00:17:56.660
Okay.

00:17:56.670 --> 00:17:58.740
So it's important to note
that this toolbar has a lot of

00:17:58.740 --> 00:18:01.000
functionality and it's all for free.

00:18:01.000 --> 00:18:03.540
You know, as I mentioned,
the app doesn't do anything

00:18:03.540 --> 00:18:05.020
to actually make this happen.

00:18:05.020 --> 00:18:06.460
Not one thing.

00:18:07.260 --> 00:18:09.590
The only thing it has to do
is provide certain information

00:18:09.680 --> 00:18:12.370
for like default items,
allowable items, and things that should

00:18:12.370 --> 00:18:13.800
appear in the config sheet.

00:18:13.880 --> 00:18:16.960
All of these protocols and things
are actually described in the new

00:18:17.110 --> 00:18:19.830
controls and services session,
which is this afternoon.

00:18:21.040 --> 00:18:24.020
So I have my little M logo here,
and just by adding it to my

00:18:24.020 --> 00:18:26.180
toolbar I've gained 100 horsepower.

00:18:26.260 --> 00:18:28.000
But if I click it, I get a drawer.

00:18:28.000 --> 00:18:30.000
So check it out.

00:18:30.130 --> 00:18:32.940
In this drawer,
I can actually do fun stuff with.

00:18:32.940 --> 00:18:34.990
I can resize it,
I can just close it again,

00:18:35.240 --> 00:18:36.440
open it back up.

00:18:36.490 --> 00:18:37.990
I could change its orientation.

00:18:37.990 --> 00:18:40.090
It could come out there.

00:18:40.120 --> 00:18:42.000
How about the bottom?

00:18:42.000 --> 00:18:44.100
Ooh, neat.

00:18:44.100 --> 00:18:44.100
Okay.

00:18:44.780 --> 00:18:45.800
That's drawers.

00:18:45.930 --> 00:18:46.400
Very easy.

00:18:46.590 --> 00:18:50.100
The API is extremely simple
and very easy to use.

00:18:50.280 --> 00:18:51.740
ComboBox.

00:18:51.860 --> 00:18:53.330
Yes.

00:18:53.460 --> 00:18:56.090
It's a real ComboBox.

00:18:58.210 --> 00:19:00.780
But I bet we don't probably do a
good job of this pop down list and it

00:19:00.780 --> 00:19:04.100
probably doesn't have a scroll bar.

00:19:04.170 --> 00:19:04.920
Oh, it does.

00:19:05.020 --> 00:19:05.890
Oh, look at that.

00:19:05.990 --> 00:19:09.140
Yeah, but it probably doesn't do type
select or anything like that.

00:19:09.190 --> 00:19:10.920
Oh, it does.

00:19:10.920 --> 00:19:12.500
It also supports auto sort.

00:19:12.650 --> 00:19:14.700
Uh, you can have the
disclosure of this thing,

00:19:14.700 --> 00:19:18.210
uh, be configurable so that it won't auto
disclose or it will auto disclose.

00:19:18.210 --> 00:19:22.030
You can have the, you can define, uh,
just how many items you want

00:19:22.030 --> 00:19:23.700
to show up in the combo box.

00:19:23.700 --> 00:19:26.220
It's highly configurable.

00:19:26.220 --> 00:19:27.210
And it's very cool.

00:19:29.780 --> 00:19:31.030
That's neat.

00:19:31.070 --> 00:19:35.700
A couple other things I wanted to show
you are things that we've added as well,

00:19:35.800 --> 00:19:38.210
but kind of more minor things.

00:19:38.710 --> 00:19:40.460
2 views that we've added.

00:19:40.460 --> 00:19:42.450
We have an image view and a scroll view.

00:19:42.590 --> 00:19:44.080
We actually have a scroll view.

00:19:44.220 --> 00:19:45.520
Do you understand?

00:19:45.540 --> 00:19:46.110
This is cool.

00:19:46.190 --> 00:19:47.460
All right.

00:19:48.980 --> 00:19:51.090
So the first is an image view.

00:19:51.090 --> 00:19:52.290
And it's very simple.

00:19:52.450 --> 00:19:56.570
It draws an image,
but it does it with quartz.

00:19:56.570 --> 00:19:56.570
Um,

00:19:56.880 --> 00:19:58.790
And in this specific
example we're just showing,

00:19:58.810 --> 00:20:00.440
uh, front of a car here.

00:20:00.550 --> 00:20:03.140
Um, but that's pretty much all it does.

00:20:03.140 --> 00:20:04.170
It just draws an image.

00:20:04.320 --> 00:20:08.140
But it has a specific property and
that is that we've actually defined it

00:20:08.140 --> 00:20:10.240
and given it the scrollable protocol.

00:20:10.340 --> 00:20:13.800
And so we can actually embed it into
a scroll view and it scrolls fine.

00:20:13.800 --> 00:20:15.560
And it does all types of neat stuff.

00:20:15.640 --> 00:20:17.410
We're actually gonna
demonstrate the scroll view,

00:20:17.490 --> 00:20:20.390
uh, a little bit more in the HIV session,
'cause I have some specific things, uh,

00:20:20.390 --> 00:20:21.940
related to views that I wanna talk about.

00:20:22.270 --> 00:20:23.350
But, it's a scroll view!

00:20:23.350 --> 00:20:24.700
Okay.

00:20:24.800 --> 00:20:26.270
All right, that's it for that.

00:20:26.460 --> 00:20:27.430
Let's go back to slides.

00:20:37.960 --> 00:20:39.900
Let's start talking about HIObject.

00:20:40.030 --> 00:20:42.140
This is your new best friend.

00:20:42.240 --> 00:20:47.880
This is the common base class from
which everything we do derives.

00:20:48.690 --> 00:20:54.990
Before the Jaguar release,
every toolbox manager had a different

00:20:54.990 --> 00:20:57.390
implementation for the item.

00:20:57.550 --> 00:21:00.310
So, for example,
Windows had its own little data structure

00:21:00.460 --> 00:21:02.100
and it was cute and all that stuff.

00:21:02.100 --> 00:21:05.460
The control manager had its thing
and menu manager had its thing.

00:21:05.560 --> 00:21:06.660
Now they're all the same.

00:21:06.760 --> 00:21:08.680
They're all HI objects.

00:21:08.900 --> 00:21:12.210
And, you know, the old way,
we had to do property APIs three times.

00:21:12.340 --> 00:21:14.470
We actually had three copies
of the exact same code in three

00:21:14.470 --> 00:21:15.830
different places of the toolbox.

00:21:15.830 --> 00:21:18.310
So we can get rid of all that stuff now.

00:21:18.600 --> 00:21:19.600
And unify it.

00:21:19.600 --> 00:21:21.640
We had different defproc models.

00:21:21.640 --> 00:21:23.600
Now we have one.

00:21:23.600 --> 00:21:26.470
And we have different ways
of doing retain release.

00:21:26.560 --> 00:21:28.300
Does anybody know what clone window does?

00:21:28.400 --> 00:21:31.860
Well, it actually does a ref count,
but it doesn't sound like it does,

00:21:31.860 --> 00:21:31.860
does it?

00:21:34.010 --> 00:21:35.900
And jaguar, we've unified all this.

00:21:35.980 --> 00:21:38.760
We now have a common base
class for all of our objects.

00:21:38.920 --> 00:21:43.840
This was something that was pretty
much impossible to do before Mac OS X.

00:21:43.990 --> 00:21:45.580
And there's a couple of reasons why.

00:21:45.750 --> 00:21:49.330
One, we were still in 68k assembly,
so it was kind of a pain.

00:21:49.470 --> 00:21:52.640
Two, there was no way for
us to have a C++ class,

00:21:52.790 --> 00:21:56.880
and the reason for that is because
if we wanted to have custom defprocs,

00:21:57.020 --> 00:22:00.470
like custom controls,
we couldn't have a C++ hierarchy

00:22:00.570 --> 00:22:03.640
because of one big reason,
and that was that all of

00:22:03.640 --> 00:22:05.080
the C defs were in handles.

00:22:05.290 --> 00:22:08.820
They were in these big handle blocks,
and they would move around,

00:22:08.820 --> 00:22:12.260
and there's no way you can have a
pointer-based C++ hierarchy that way.

00:22:12.380 --> 00:22:14.050
So it was really holding us back.

00:22:14.180 --> 00:22:16.140
The other thing was that you
could get right at our data

00:22:16.140 --> 00:22:18.910
structures and poke at things,
and we wouldn't know that you did it.

00:22:19.040 --> 00:22:23.260
Now that we've sealed things off,
made our data structures opaque,

00:22:23.410 --> 00:22:25.670
and we're on a...

00:22:26.430 --> 00:22:30.830
on this new OS with all this nifty stuff
and better memory management and we've

00:22:30.830 --> 00:22:33.540
gotten rid of handle-based defprocs,
we can really start

00:22:33.540 --> 00:22:35.040
to do some cool stuff.

00:22:35.190 --> 00:22:40.280
So we have one base class
from which all things derive.

00:22:40.610 --> 00:22:43.500
We actually have polymorphic functions,
which you can call them.

00:22:43.500 --> 00:22:45.500
I'll go through some of them later.

00:22:45.500 --> 00:22:48.490
And this is the birth of HIObject.

00:22:48.920 --> 00:22:50.400
What is it?

00:22:50.550 --> 00:22:53.980
Well, I've already said the first
point about three times now.

00:22:55.310 --> 00:23:00.160
But the most important thing is
that you can subclass from HIObject.

00:23:00.160 --> 00:23:05.190
And one little nifty thing is that
HIObjects are actually based on CF types,

00:23:05.240 --> 00:23:06.860
in a sense.

00:23:06.860 --> 00:23:10.790
This means that any HIObject
can be put in any CF collection.

00:23:10.790 --> 00:23:11.800
You just put it in.

00:23:11.800 --> 00:23:14.950
You don't have to worry about special
retain-release callbacks or any of that.

00:23:14.970 --> 00:23:17.320
You just pass the
standard CF callbacks and,

00:23:17.390 --> 00:23:19.830
and then it just takes care of it.

00:23:19.980 --> 00:23:22.030
And it's pretty cool because this
means you can have a dictionary

00:23:22.030 --> 00:23:24.160
with all types of disparate types,
and some of those types could

00:23:24.340 --> 00:23:26.820
could actually be HI objects.

00:23:26.990 --> 00:23:28.600
Very cool.

00:23:32.820 --> 00:23:37.550
HIObject is our object model.

00:23:37.640 --> 00:23:39.650
HIToolbox has an object model.

00:23:39.930 --> 00:23:42.680
It's called HIObject.

00:23:45.000 --> 00:23:51.380
So, the way to think about this is
that HIObject is the object.

00:23:51.480 --> 00:23:55.000
Well, HIObject and CarbonEvents
are like objects and methods.

00:23:55.000 --> 00:23:57.500
It's exactly the same,
and that's the way, that's our approach.

00:23:57.630 --> 00:24:01.380
So, to communicate between HIObjects,
you use CarbonEvents.

00:24:01.800 --> 00:24:04.530
And all HI objects are
implicitly event targets.

00:24:04.670 --> 00:24:08.340
So from any HI object,
you can actually get its event target.

00:24:08.430 --> 00:24:12.000
This has some nifty applications,
actually.

00:24:12.890 --> 00:24:14.550
So what are the advantages to you?

00:24:14.640 --> 00:24:16.240
The first is consistency.

00:24:16.320 --> 00:24:20.240
We have one single API for certain,
doing certain things to HIObjects,

00:24:20.240 --> 00:24:21.730
which is really cool.

00:24:21.800 --> 00:24:24.310
And we do those in a polymorphic way.

00:24:24.440 --> 00:24:27.810
It becomes a lot easier to
implement custom objects,

00:24:27.810 --> 00:24:31.090
because there's only
one mechanism to do so.

00:24:31.100 --> 00:24:33.620
And it also means that you can
actually derive from standard objects.

00:24:33.720 --> 00:24:38.890
It will be possible now to actually
subclass standard system controls.

00:24:39.000 --> 00:24:40.950
Now, you wouldn't be able to
do every single thing,

00:24:41.000 --> 00:24:42.980
you know,
because we don't actually expose

00:24:43.080 --> 00:24:46.340
every single method that we might
have internally as a Carbon event,

00:24:46.340 --> 00:24:48.360
but where we do,
that's where you can tap in.

00:24:48.360 --> 00:24:50.760
So you can do some really cool stuff.

00:24:51.800 --> 00:24:54.360
The important thing is that
all of these changes don't

00:24:54.360 --> 00:24:55.980
really impact your applications.

00:24:55.980 --> 00:24:59.400
Again, due to the opacity of
our data structures now,

00:24:59.490 --> 00:25:03.940
we've basically completely gutted
the toolbox and redone everything.

00:25:04.080 --> 00:25:07.460
And it's, if you looked at the code now
compared to what it used to be,

00:25:07.460 --> 00:25:09.700
you wouldn't recognize it.

00:25:09.700 --> 00:25:10.680
It's that much better.

00:25:10.700 --> 00:25:14.720
And so all these changes will actually
not affect you unless you want to be

00:25:14.790 --> 00:25:16.190
affected by taking advantage of it.

00:25:16.190 --> 00:25:17.460
And of course you want to do that.

00:25:17.460 --> 00:25:22.080
The nifty thing that I mentioned about
the fact that HI objects have an event

00:25:22.110 --> 00:25:24.500
target means that you can actually,
by creating an HI object

00:25:24.500 --> 00:25:27.530
of your own design,
you can now create your own event targets

00:25:27.530 --> 00:25:29.290
and then send events to that thing.

00:25:29.290 --> 00:25:32.030
So you can actually have an event
target which represents your plugin and

00:25:32.030 --> 00:25:33.920
then pass that around to other people.

00:25:34.640 --> 00:25:36.110
Very cool.

00:25:37.480 --> 00:25:41.890
As I mentioned,
Toolbox objects are HI objects.

00:25:41.970 --> 00:25:45.780
This means that things like Control Ref,
the Toolbar, Menus,

00:25:45.910 --> 00:25:51.030
and Windows are actually
typed after HI object.

00:25:51.100 --> 00:25:53.100
It's questionable whether
we'll really typedef them.

00:25:53.100 --> 00:25:55.560
We've started to.

00:25:55.560 --> 00:25:58.340
But that might cause weird little
problems in your code because you might

00:25:58.340 --> 00:26:01.890
have two methods in one class and one
takes a window and one takes a menu,

00:26:02.130 --> 00:26:03.710
otherwise they have the same signature.

00:26:03.880 --> 00:26:05.860
Well, because they're typedef now,
they're the same thing.

00:26:05.860 --> 00:26:07.830
They actually have the
exact same signature.

00:26:07.950 --> 00:26:11.100
So we're unsure whether we're gonna
follow through on that or not.

00:26:11.100 --> 00:26:13.090
But effectively they are the same thing.

00:26:13.100 --> 00:26:18.000
And here's a brief picture of our
hierarchy that we have right now.

00:26:18.080 --> 00:26:21.100
As you can see,
HIObject is the base class.

00:26:21.270 --> 00:26:26.940
And from there we spring windows, views,
menus, toolbar, the toolbar item,

00:26:26.940 --> 00:26:31.030
and we even have an HIObject
for the application.

00:26:31.310 --> 00:26:33.150
And for views,
we have our different views,

00:26:33.210 --> 00:26:37.400
like scroll bars, check boxes,
push buttons, and so on.

00:26:38.790 --> 00:26:39.680
So why would you use this?

00:26:39.850 --> 00:26:41.940
How would you use it?

00:26:41.940 --> 00:26:45.700
The first basic example is you want
to create a custom toolbar item.

00:26:45.710 --> 00:26:47.270
I mean,
most toolbars are pretty boring if

00:26:47.270 --> 00:26:48.340
you just put a bunch of icons in.

00:26:48.340 --> 00:26:49.500
You probably want to do
something interesting,

00:26:49.550 --> 00:26:52.580
like a search field or
all of these other things.

00:26:52.660 --> 00:26:54.860
Well, you can do this by just
creating custom toolbar items.

00:26:54.900 --> 00:26:57.090
And so you can actually
subclass each toolbar item.

00:26:57.100 --> 00:26:59.700
I'm going to show you an
example of that later.

00:26:59.730 --> 00:27:02.460
You can write custom views
in much of the same manner.

00:27:02.530 --> 00:27:05.820
And you can have custom views
in your custom toolbar items.

00:27:05.960 --> 00:27:08.700
And then, of course,
custom event targets, like I mentioned.

00:27:10.620 --> 00:27:11.790
Okay.

00:27:11.880 --> 00:27:13.760
So let's talk a little bit
about what this stuff is,

00:27:13.790 --> 00:27:16.740
how it works, and how to use it.

00:27:18.500 --> 00:27:20.840
So we're gonna talk about
how to register subclasses,

00:27:20.920 --> 00:27:23.040
and how the construction process works.

00:27:23.040 --> 00:27:25.910
We'll talk about instance data
that you would create and how they

00:27:25.910 --> 00:27:27.700
actually relate to each iObject.

00:27:27.950 --> 00:27:32.740
Talk about dynamic casting between
your instance data and an h iObject.

00:27:32.740 --> 00:27:35.610
And we'll cover the
polymorphic functions.

00:27:37.990 --> 00:27:41.260
To create an HI object
of your own design,

00:27:41.430 --> 00:27:46.280
the first thing you have to
do is create your subclass.

00:27:47.000 --> 00:28:04.300
[Transcript missing]

00:28:06.450 --> 00:28:09.460
If you're doing any new work and you
want to take advantage of HIObject,

00:28:09.560 --> 00:28:13.820
though, you have to use this and
not registerToolbox object.

00:28:15.050 --> 00:28:18.770
So what we do here is essentially
you call this function and

00:28:18.770 --> 00:28:21.610
you pass in your class ID.

00:28:21.880 --> 00:28:25.560
You'll also pass the ID of the
class you wish to subclass.

00:28:25.660 --> 00:28:26.800
You can pass any options.

00:28:26.800 --> 00:28:27.560
Well, you really can't.

00:28:27.560 --> 00:28:32.800
You have to pass zero right now,
but maybe in the future.

00:28:32.910 --> 00:28:36.330
And then you pass in an event handler
and a number of events similar to

00:28:36.330 --> 00:28:39.800
the way you would install an event
handler using installEventHandler.

00:28:39.980 --> 00:28:42.370
And what you get back from
all of this is a class ref,

00:28:42.370 --> 00:28:44.800
which you can actually use
later to unregister your class.

00:28:45.000 --> 00:28:46.730
Typically,
you would never unregister your class.

00:28:46.800 --> 00:28:50.070
The only reason you would is
you're a plugin and you need to

00:28:50.070 --> 00:28:50.800
bring a class into existence.

00:28:50.800 --> 00:28:53.800
So you would register your class,
create your instances,

00:28:53.830 --> 00:28:56.860
and then later on you destroy all
your instances and unregister your

00:28:56.920 --> 00:28:58.710
class before your plugin exits.

00:29:00.540 --> 00:29:02.760
Once you've done that,
you can create HI objects.

00:29:02.820 --> 00:29:04.720
And the way you do that
is HI object create.

00:29:04.840 --> 00:29:07.800
We're very original with our API names.

00:29:07.970 --> 00:29:10.240
And all you do is you
just pass in the class ID,

00:29:10.400 --> 00:29:14.440
and the way you get parameters
into your construction,

00:29:14.440 --> 00:29:17.960
so to speak,
is you pass in an actual event,

00:29:17.960 --> 00:29:21.360
an initialized event which gets
sent to your object at a specific

00:29:21.360 --> 00:29:22.460
point during construction.

00:29:22.460 --> 00:29:26.100
And we'll talk about that in a
little more detail in a little bit.

00:29:26.100 --> 00:29:28.200
And what you get out of
this is an HI object ref.

00:29:28.320 --> 00:29:30.560
And this is why we need to
talk about instance data versus

00:29:30.570 --> 00:29:33.800
HI object ref in a little bit,
because no matter what types

00:29:33.800 --> 00:29:36.130
you're actually creating in there,
you always get an HI object ref.

00:29:36.220 --> 00:29:40.540
It's similar to some kind of
virtual constructor concept

00:29:40.540 --> 00:29:44.440
where you might construct some
object of some derived class,

00:29:44.440 --> 00:29:47.820
but you still get back a
pointer to the base class.

00:29:49.400 --> 00:29:52.490
So here's just a brief example
of subclassing a toolbar item.

00:29:52.500 --> 00:29:55.730
We'll show an explicit
example a little bit later.

00:29:55.880 --> 00:30:00.020
So all we're doing here is we have some
custom ID and we're just using like

00:30:00.120 --> 00:30:02.300
Java namespacing to define the ID here.

00:30:02.300 --> 00:30:06.310
And we just pass in as
the first parameter.

00:30:06.800 --> 00:30:12.100
And we're subclassing the toolbar item,
so we pass in khitoolbaritemclassid.

00:30:12.150 --> 00:30:13.500
We have no options.

00:30:13.500 --> 00:30:17.620
We specify our class handler,
the events that we want to handle,

00:30:17.710 --> 00:30:20.520
and we get back our class ref.

00:30:22.970 --> 00:30:25.000
Now we're going to talk about how
all those things work and how the

00:30:25.010 --> 00:30:27.440
event handlers work in a little bit.

00:30:27.470 --> 00:30:29.140
And we're going to start
to get into it here,

00:30:29.140 --> 00:30:30.700
at the very beginning.

00:30:30.850 --> 00:30:33.330
HA Object Construction.

00:30:33.630 --> 00:30:34.740
How do we create these things?

00:30:34.740 --> 00:30:39.260
Well, like C++,
we create things bottom up.

00:30:39.330 --> 00:30:43.160
So we always create superclass
before we create subclass.

00:30:43.290 --> 00:30:44.660
And we do it two-phase.

00:30:44.810 --> 00:30:48.210
We do a construct phase and
then an initialize phase.

00:30:49.570 --> 00:30:54.110
And the three most important
events to deal with are

00:30:54.110 --> 00:31:00.120
k-event-hi-object-construct,
initialize, and destruct.

00:31:00.330 --> 00:31:04.440
And in fact,
construct and destruct are required.

00:31:04.500 --> 00:31:08.550
If you attempt to register a class
that does not specify these in its

00:31:08.550 --> 00:31:11.950
event type list that you pass to it,
we will laugh at you

00:31:11.950 --> 00:31:13.480
and give you an error.

00:31:18.200 --> 00:31:20.790
So let's just give you a little
bit of a diagram of that.

00:31:20.790 --> 00:31:23.710
Here we have class bar,
which derives from class foo,

00:31:23.860 --> 00:31:26.160
which derives from hi object.

00:31:26.570 --> 00:31:31.010
What happens is,
first we call hiObject to construct.

00:31:31.240 --> 00:31:32.890
And it does.

00:31:33.290 --> 00:31:36.740
Next, we end up calling foo to construct.

00:31:36.850 --> 00:31:38.500
And it does.

00:31:38.600 --> 00:31:41.150
And, finally, bar.

00:31:41.590 --> 00:31:44.360
And now we're,
we've kind of done all the construction,

00:31:44.470 --> 00:31:46.670
and the object kind of
looks like this now.

00:31:46.780 --> 00:31:49.580
But, that's not a realistic picture.

00:31:49.660 --> 00:31:52.460
In reality,
the picture looks more like this.

00:31:53.120 --> 00:31:55.710
Essentially,
each subclass will wrap the previous

00:31:55.710 --> 00:32:00.090
class by holding onto a reference
to it so that it can obviously

00:32:00.220 --> 00:32:02.720
call base class functionality.

00:32:04.180 --> 00:32:07.270
So the construct event is
actually kind of magical in a way.

00:32:07.340 --> 00:32:11.180
It doesn't get sent to your
event target because you don't

00:32:11.180 --> 00:32:12.620
have an event target yet.

00:32:12.770 --> 00:32:15.360
We haven't actually
constructed the item yet.

00:32:15.730 --> 00:32:20.000
So the way we do this is we actually
call your event handler directly,

00:32:20.070 --> 00:32:22.200
which means we're going to pass
null for the first parameter,

00:32:22.200 --> 00:32:26.100
which is this event handler call
ref magical thingy which you can use

00:32:26.100 --> 00:32:28.220
to call through to next handlers.

00:32:28.220 --> 00:32:30.640
And because we're passing null for that,
that means you can't call

00:32:30.640 --> 00:32:31.740
through to next handlers.

00:32:31.880 --> 00:32:37.120
So it's important to just ignore all that
and just deal with the problem at hand,

00:32:37.120 --> 00:32:40.110
which is constructing your object.

00:32:41.690 --> 00:32:45.290
When you register to your subclass,
you can pass user data.

00:32:45.450 --> 00:32:48.040
That user data gets passed
into your construct event.

00:32:48.160 --> 00:32:51.520
And actually, that is the last time you
will ever see that data.

00:32:51.590 --> 00:32:53.950
And we'll go into why in a second.

00:32:55.790 --> 00:32:58.660
In response to the construct event,
all you do is you create your object,

00:32:58.770 --> 00:33:01.260
whatever that takes,
malloc a block of memory,

00:33:01.260 --> 00:33:04.030
new some object, it doesn't matter.

00:33:04.140 --> 00:33:06.660
And then what you do is you actually
just take that instance and you

00:33:06.660 --> 00:33:10.290
stuff it into the initialize,
I mean, into the construct Carbon event,

00:33:10.290 --> 00:33:13.360
and we will get that back,
and then we're going to use it.

00:33:14.820 --> 00:33:16.800
The instance data that you
return can be anything you want,

00:33:16.800 --> 00:33:17.620
as I mentioned.

00:33:17.740 --> 00:33:18.640
It doesn't matter.

00:33:18.720 --> 00:33:20.660
But you have to make
it type void pointer,

00:33:20.660 --> 00:33:24.100
because we don't know what it is.

00:33:24.720 --> 00:33:27.500
And we use this information in two ways.

00:33:27.630 --> 00:33:29.340
First,
we actually store it off with the class

00:33:29.380 --> 00:33:31.000
ID so we can do dynamic casting later.

00:33:31.010 --> 00:33:33.750
And we'll show you how
to do that in a second.

00:33:35.110 --> 00:33:36.960
The next part is the
more interesting part,

00:33:37.040 --> 00:33:39.900
where we actually take that instance
that you returned to us and we use that

00:33:39.900 --> 00:33:42.160
as your user data in your event handler.

00:33:42.320 --> 00:33:44.640
So that means that once
your object is constructed,

00:33:44.730 --> 00:33:47.420
you will receive your instance
in the user data always.

00:33:47.530 --> 00:33:50.800
That's why I said that the class, um,

00:33:51.100 --> 00:34:01.000
[Transcript missing]

00:34:04.050 --> 00:34:05.340
Okay.

00:34:05.480 --> 00:34:13.020
Just want to kind of clarify
the relationship between your

00:34:13.020 --> 00:34:13.020
instance data and HIObjectRev.

00:34:14.350 --> 00:34:17.400
Basically,
an HIObjectRef is not your instance data.

00:34:17.500 --> 00:34:20.210
It is our base class object.

00:34:20.280 --> 00:34:22.960
So it's kind of unlike C++,
in which case, you know,

00:34:22.960 --> 00:34:25.600
the disk pointer is kind of
the same throughout all of

00:34:25.600 --> 00:34:29.940
the stack there of superclass,
subclass.

00:34:30.030 --> 00:34:31.560
So you need to be able
to get your data back.

00:34:31.720 --> 00:34:32.840
So I have this HIObjectGraph.

00:34:32.890 --> 00:34:34.940
I mean,
that's all HIObjectCreate gave me.

00:34:34.980 --> 00:34:37.090
How do I get my data back out of that?

00:34:37.180 --> 00:34:39.210
And the answer is dynamic casting.

00:34:39.270 --> 00:34:43.310
And we have an API to do that
called HIObjectDynamicCast.

00:34:43.350 --> 00:34:45.190
Again, we're very original.

00:34:45.270 --> 00:34:46.700
So here's an example of it.

00:34:46.760 --> 00:34:50.100
So we have a routine,
and it receives an HIObjectGraph.

00:34:50.130 --> 00:34:54.990
Inside here,
basically all we do is we just pass in,

00:34:55.220 --> 00:34:58.040
we call HIObjectDynamicCast,
we pass in the class ID,

00:34:58.040 --> 00:35:01.350
which would be our class ID,
and passing in the HIObjectGraph,

00:35:01.520 --> 00:35:02.310
and we get out a pointer.

00:35:02.480 --> 00:35:05.010
And this pointer could be whatever.

00:35:05.240 --> 00:35:08.630
Now, technically I should have casted
it to the object type here,

00:35:08.830 --> 00:35:11.120
but it's merely for example.

00:35:11.230 --> 00:35:15.000
So if the pointer comes back null,
then it wasn't a valid cast,

00:35:15.000 --> 00:35:18.080
meaning that this object is
not what you thought it was,

00:35:18.150 --> 00:35:20.000
and you would choose to do nothing.

00:35:20.000 --> 00:35:22.600
Else, we know it's one of our objects,
and now we have our instance data,

00:35:22.600 --> 00:35:25.030
and we can go off and do something cool.

00:35:27.320 --> 00:35:30.540
Okay, let's go into exactly how you
handle the construct event.

00:35:30.750 --> 00:35:33.540
Again,
everything's done through Carbon events.

00:35:33.540 --> 00:35:35.540
Like I said,
it's the nervous system of what we do.

00:35:35.540 --> 00:35:37.540
It permeates everything.

00:35:37.540 --> 00:35:41.700
So here's our Carbon event handler,
and here we are handling the

00:35:41.810 --> 00:35:45.500
K event HI object construct event.

00:35:45.990 --> 00:35:46.900
Here's a close-up.

00:35:47.100 --> 00:35:49.510
So inside here,
first thing we do is we extract

00:35:49.640 --> 00:35:53.300
the HIObject instance parameter
from the event that is incoming.

00:35:53.400 --> 00:35:55.460
This gives you the actual HIObject graph.

00:35:55.840 --> 00:35:58.710
And what you would typically do is
you would take that HIObject graph

00:35:59.280 --> 00:36:03.160
and pass it to your construction
for your particular part of the

00:36:03.160 --> 00:36:05.330
object that you want to create.

00:36:05.330 --> 00:36:07.590
And you would store that off.

00:36:08.590 --> 00:36:10.580
So in this case we're
calling constructMyObject,

00:36:10.640 --> 00:36:13.670
passing in that object ref,
and we get out the

00:36:13.670 --> 00:36:15.800
object that you created.

00:36:15.860 --> 00:36:20.980
And on the flip side, once we call that,
we set the event parameter back in,

00:36:21.210 --> 00:36:22.830
setting it to type void pointer.

00:36:22.970 --> 00:36:25.490
Currently we're actually
reusing the same parameter.

00:36:25.490 --> 00:36:28.530
It's questionable whether
that will change or not.

00:36:29.650 --> 00:36:32.800
Okay, so your object's been constructed,
but you're not really done.

00:36:32.990 --> 00:36:36.990
However, after you've been constructed,
this is when we actually install your

00:36:37.000 --> 00:36:39.930
event handler onto the event target.

00:36:40.520 --> 00:36:42.800
along with your instance
data as the user data.

00:36:42.990 --> 00:36:47.630
So at this point, your object now kind of
has a Vtable installed.

00:36:47.750 --> 00:36:51.590
But there's one more phase we need to do,
and that's initialization.

00:36:52.440 --> 00:36:55.800
So after we've successfully
constructed your subclass,

00:36:55.920 --> 00:37:00.140
the object is sent an initialization
event in a standard Carbon event manner.

00:37:00.230 --> 00:37:03.040
We just get your event target and
send the initialization event.

00:37:03.180 --> 00:37:07.590
And this initialization event
is the initialization event that

00:37:07.590 --> 00:37:10.740
you passed in to HIObjectCreate.

00:37:10.740 --> 00:37:15.650
And this is how you get your
parameters into your object creation.

00:37:16.770 --> 00:37:20.630
It's very important that you
call callNextEventHandler first.

00:37:20.720 --> 00:37:23.750
You have to initialize your
superclass before you can

00:37:23.770 --> 00:37:25.970
proceed with initialization.

00:37:26.540 --> 00:37:29.640
It's slightly unfortunate that
you always have to do this,

00:37:29.710 --> 00:37:33.340
but on the other hand, it's kinda cool,
because what this means is that you

00:37:33.340 --> 00:37:37.220
can actually intercept and augment
the parameters that are meant,

00:37:37.350 --> 00:37:41.460
that are destined for your superclass
and change them in ways kind of

00:37:41.640 --> 00:37:47.000
analogous to the colon operator when,
in a constructor in C++.

00:37:47.170 --> 00:37:50.900
How you can have your constructor
colon and then pass parameters,

00:37:50.900 --> 00:37:54.270
you can actually change the
parameters to your superclass.

00:37:54.270 --> 00:37:54.270
And that's pretty cool.

00:37:54.510 --> 00:37:57.240
And it's important to make sure that
once you've called callnexteventhandler,

00:37:57.260 --> 00:37:59.640
you check to make sure that
the error was no error,

00:37:59.640 --> 00:38:02.520
because otherwise you're
in for a lot of hurt.

00:38:03.110 --> 00:38:06.640
All right, so here's an example of the
code necessary to initialize.

00:38:06.780 --> 00:38:07.990
Very simple.

00:38:08.120 --> 00:38:10.340
Now, the user data has already been set
up to be your instance pointer,

00:38:10.340 --> 00:38:13.840
so you just cast it out of that
and you get your object back.

00:38:14.000 --> 00:38:16.340
And now you simply call nextEventHandler.

00:38:16.410 --> 00:38:18.860
If that went fine,
now we just-- in this case,

00:38:18.860 --> 00:38:21.130
we have a C++ object that we created,
and we just call the

00:38:21.130 --> 00:38:22.940
initialize method on it,
passing the event.

00:38:23.050 --> 00:38:26.230
And in there,
you would extract all the parameters.

00:38:28.920 --> 00:38:31.160
Okay, that's it.

00:38:31.270 --> 00:38:34.430
Now you have an object that can
play in the world of HIObject,

00:38:34.490 --> 00:38:36.260
just like any other object.

00:38:36.370 --> 00:38:37.960
This is very cool.

00:38:38.080 --> 00:38:42.550
And there are a lot of uses
that you can put to this.

00:38:44.790 --> 00:38:48.840
One interesting little thing we can
talk about is debugging support.

00:38:48.970 --> 00:38:53.460
Any object on the system
supports this protocol here.

00:38:54.300 --> 00:38:56.870
which is the kevent hio object
print debug info protocol.

00:38:56.880 --> 00:39:01.670
It's a Carbon event that gets sent to the
handler when hio object print debug info,

00:39:01.670 --> 00:39:03.360
the API, is called.

00:39:03.360 --> 00:39:05.220
And this is pretty cool,
which means it doesn't

00:39:05.220 --> 00:39:08.840
matter if you have a window,
a tool bar, it doesn't matter.

00:39:08.960 --> 00:39:12.380
As long as it's an hio object ref,
you can call hio object print debug info,

00:39:12.660 --> 00:39:16.210
and out in your terminal and
standard out wherever it's directed,

00:39:16.390 --> 00:39:18.270
you'll actually get a
full debugging output.

00:39:18.320 --> 00:39:22.080
You don't have to remember, "Oh,
was it gdb_show_control_info or

00:39:22.080 --> 00:39:24.660
debug_print_window or--" I don't know.

00:39:24.660 --> 00:39:25.660
I don't remember.

00:39:25.660 --> 00:39:26.390
You don't have to remember.

00:39:26.440 --> 00:39:27.660
There's only one thing to remember now.

00:39:27.660 --> 00:39:29.060
hio object print debug info.

00:39:29.180 --> 00:39:30.000
You're done.

00:39:30.000 --> 00:39:32.370
This is part of the beauty of this.

00:39:32.500 --> 00:39:40.500
[Transcript missing]

00:39:43.710 --> 00:39:46.720
We also have some basic polymorphic
functions like you can get

00:39:46.800 --> 00:39:49.700
the class ID from an object.

00:39:49.700 --> 00:39:51.970
You can compare it to something
to make sure it's a known class

00:39:52.050 --> 00:39:53.390
ID if you need to do that.

00:39:53.470 --> 00:39:56.060
You can see if an object is
derived from another class,

00:39:56.100 --> 00:39:57.180
cool stuff like that.

00:39:57.430 --> 00:39:59.220
And of course the most
important one of all,

00:39:59.290 --> 00:40:00.500
hiobject.getEventTarget.

00:40:00.500 --> 00:40:03.640
So you can actually get the
event target from the object.

00:40:03.720 --> 00:40:06.930
And I should note, by the way,
that eventually we're hoping to

00:40:06.990 --> 00:40:10.800
merge event target and hiobject
so that they are one and the same.

00:40:10.970 --> 00:40:15.890
So if you actually call
hiobject.getEventTarget in the future,

00:40:15.910 --> 00:40:19.500
you'll actually get the hiobject
ref that you passed in back.

00:40:22.640 --> 00:40:27.430
So, I mentioned that these
things are CF types,

00:40:27.490 --> 00:40:30.930
and so these questions
have a simple answer.

00:40:31.010 --> 00:40:32.480
You know,
it's not a question of how to put

00:40:32.580 --> 00:40:35.520
your HI object into a collection
or how to retain or release them.

00:40:35.630 --> 00:40:37.580
You just use core foundation.

00:40:37.630 --> 00:40:39.640
You'll notice in the
new stuff that we have,

00:40:39.640 --> 00:40:43.480
we don't have like, HI toolbar release,
HI view release.

00:40:43.770 --> 00:40:45.790
You just call CF release
on it and you're done.

00:40:45.790 --> 00:40:47.160
You don't have to remember new APIs.

00:40:47.180 --> 00:40:47.730
Very easy.

00:40:48.130 --> 00:40:49.770
And like I said,
you can just intermix all of

00:40:49.830 --> 00:40:51.560
this stuff into dictionaries,
arrays,

00:40:51.560 --> 00:40:53.980
and all types That's the neat stuff.

00:40:54.650 --> 00:40:56.740
Eventually, there comes a time in an H.I.

00:40:56.740 --> 00:40:59.290
object's life when it's time to die.

00:40:59.370 --> 00:41:02.590
And when that happens,
and your ref count goes down to zero,

00:41:02.590 --> 00:41:04.770
it's time to go.

00:41:05.410 --> 00:41:23.660
And we destroy things top down,
just like C++.

00:41:23.660 --> 00:41:23.660
And this is convenient for us,
because that's our natural event flow.

00:41:23.660 --> 00:41:23.660
So we just send you an
actual destruct event,

00:41:23.660 --> 00:41:23.660
and that's where you
handle the destruction.

00:41:23.660 --> 00:41:23.660
And I wouldn't call through,
because then you'd be destroying

00:41:23.660 --> 00:41:23.660
your superclasses before
they're probably ready to be.

00:41:24.290 --> 00:41:28.460
And, again, simple code snippet.

00:41:28.540 --> 00:41:30.960
We're handling kevent hiobject destruct.

00:41:30.960 --> 00:41:34.870
We get our object from our user data,
and we just call delete on it,

00:41:34.890 --> 00:41:38.910
because it happens to be a C++ object.

00:41:39.150 --> 00:41:40.000
All right.

00:41:40.050 --> 00:41:42.020
Now I'm going to take you
through a painstaking demo,

00:41:42.020 --> 00:41:50.120
which is just mostly of a code
walkthrough of how to subclass a toolbar

00:41:50.120 --> 00:41:54.800
item and the cool stuff you can do.

00:41:54.800 --> 00:41:54.800
All right.

00:41:59.000 --> 00:42:05.990
Let's just launch this,
which I should have already had launched.

00:42:06.000 --> 00:42:08.000
Okay.

00:42:08.060 --> 00:42:12.240
What we're going to do is we're
going to extend the Carbon toolbar

00:42:12.240 --> 00:42:15.190
that we looked at earlier.

00:42:16.600 --> 00:42:19.080
We're going to do that by
adding a custom toolbar item.

00:42:19.170 --> 00:42:21.100
We're going to see an
example of how to do this.

00:42:21.100 --> 00:42:23.100
This isn't a simple example.

00:42:23.100 --> 00:42:27.100
This example actually
works and does neat stuff.

00:42:27.170 --> 00:42:29.250
It might be a little
hard to follow at times,

00:42:29.390 --> 00:42:31.600
but bear with me.

00:42:31.690 --> 00:42:34.900
We have this custom toolbar
item that we're running.

00:42:35.600 --> 00:42:41.180
First thing we do is to find
the set of events that we want

00:42:41.190 --> 00:42:43.470
to handle for the toolbar.

00:42:44.120 --> 00:42:48.110
You'll notice I'm handling
HIAbject construct,

00:42:48.170 --> 00:42:50.270
initialize, and destruct.

00:42:52.490 --> 00:42:54.260
Can everybody read this, by the way?

00:42:54.330 --> 00:42:57.400
Is that fine?

00:42:57.400 --> 00:42:59.580
That's the HIObject protocol
that we're handling.

00:42:59.610 --> 00:43:01.870
As far as the toolbar protocol,
we handle two events:

00:43:02.000 --> 00:43:04.040
get persistent data and perform action.

00:43:04.130 --> 00:43:06.430
We'll talk about exactly what
those mean in a little bit.

00:43:06.510 --> 00:43:09.780
I'm not going to go too heavy into
what the toolbar stuff is all about,

00:43:09.890 --> 00:43:13.850
because we kind of talk about that in
the new controls and services talk later.

00:43:14.060 --> 00:43:17.740
But I'll kind of give you a
rough feel for how things are.

00:43:18.180 --> 00:43:23.140
The other thing is we have
our custom toolbar class ID.

00:43:23.140 --> 00:43:25.710
And it's just a CFString.

00:43:26.550 --> 00:43:29.300
And our toolbar object is really simple.

00:43:29.310 --> 00:43:31.900
All it does is it holds on to
the toolbar item ref just in

00:43:31.900 --> 00:43:33.790
case it happens to need it.

00:43:34.030 --> 00:43:36.090
and we have a URL in it.

00:43:36.090 --> 00:43:38.600
And the whole purpose of our custom
toolbar item is you'll be able to

00:43:38.680 --> 00:43:43.080
drag a URL into the toolbar and then
click it and have it go to that URL.

00:43:45.210 --> 00:43:46.590
So we have a whole
bunch of functions here,

00:43:46.590 --> 00:43:49.240
and that's great.

00:43:49.500 --> 00:43:51.940
First one is RegisterToolbarItemClass.

00:43:52.130 --> 00:43:53.900
This function...

00:43:55.200 --> 00:43:57.530
It's kind of a one-shot function.

00:43:57.620 --> 00:44:00.860
And here's what we call
HIObjectRegisterSubclass.

00:44:00.860 --> 00:44:04.400
As you can see, I'm registering my custom
toolbar item class ID,

00:44:04.480 --> 00:44:06.450
and it's a subclass
of toolbar item class,

00:44:06.450 --> 00:44:08.200
of toolbar item.

00:44:08.350 --> 00:44:11.200
And I'm passing in my
custom toolbar item handler,

00:44:11.200 --> 00:44:13.960
my event handler,
and my events that I want.

00:44:14.060 --> 00:44:16.060
Now I'm passing zero in
for the user data here,

00:44:16.210 --> 00:44:19.790
but you could pass something
more interesting like

00:44:19.790 --> 00:44:23.590
maybe a construct method,
a static construct method

00:44:23.590 --> 00:44:25.200
for a C++ subclass.

00:44:29.000 --> 00:44:31.230
Below that,
we actually have our public API for

00:44:31.330 --> 00:44:34.080
actually creating one of these things.

00:44:34.880 --> 00:44:41.130
Now, first thing we do in here is we
call registerToolbarItemClass.

00:44:42.710 --> 00:44:45.370
This ensures that whenever
this API is called,

00:44:45.470 --> 00:44:48.530
our toolbar item class is
automatically created for us.

00:44:48.640 --> 00:44:49.540
There are other ways to handle this.

00:44:49.540 --> 00:44:52.940
You can do this at app
initialization or things like that,

00:44:52.940 --> 00:44:55.640
especially if you were going to
create one of these things from a nib.

00:44:55.720 --> 00:45:00.710
One thing I should note is that
we've had for some time in IB the

00:45:00.760 --> 00:45:05.700
concept where you can drag in a custom
view and then give it a class ID,

00:45:05.790 --> 00:45:11.620
and then that would be created
automatically for you when the

00:45:11.700 --> 00:45:15.540
nib is brought into existence.

00:45:15.750 --> 00:45:19.690
That stuff works just
the same with HIObject.

00:45:19.920 --> 00:45:22.510
So that's an example where
you might not call this API,

00:45:22.560 --> 00:45:25.570
but instead you need to know
that the class ID has been

00:45:25.570 --> 00:45:29.520
registered ahead of time so that
IB can go ahead and create it.

00:45:30.600 --> 00:45:35.550
So, the next step is to create
an initialized event.

00:45:37.360 --> 00:45:40.900
It's a slight pain, but it's worth it.

00:45:40.980 --> 00:45:42.060
In this case, we're just creating it.

00:45:42.060 --> 00:45:47.520
It has to be an event class HIObject
and event HIObject initialized.

00:45:47.600 --> 00:45:50.600
If you attempt to call HIObject
create with an event that is not that,

00:45:50.600 --> 00:45:52.780
again, we will laugh at you
and give you an error.

00:45:53.080 --> 00:45:59.220
Now we come to a concept of required
parameters for superclasses.

00:45:59.350 --> 00:46:04.060
Any toolbar item has two required
parameters on construction:

00:46:04.060 --> 00:46:07.300
the identifier and the options.

00:46:07.300 --> 00:46:08.460
Thank you.

00:46:09.420 --> 00:46:12.040
Here's where we set them.

00:46:12.110 --> 00:46:16.370
The identifier we're just
passing from our input parameter.

00:46:16.820 --> 00:46:19.960
The options we're specifying.

00:46:19.960 --> 00:46:21.720
In this case,
we want to allow duplicates.

00:46:21.720 --> 00:46:25.400
That's because we want to make
sure that we can drag multiple

00:46:25.400 --> 00:46:26.040
of these things in there.

00:46:26.040 --> 00:46:28.100
We might have multiple
URLs we want to drag in.

00:46:28.210 --> 00:46:31.190
That's similar to the concept
of the toolbar in the finder.

00:46:31.340 --> 00:46:34.400
The finder has this ability
to drag in file objects.

00:46:34.580 --> 00:46:37.610
Technically, they're all the same type,
but they all represent

00:46:37.610 --> 00:46:38.350
something different.

00:46:38.440 --> 00:46:40.810
In that case,
you want to allow duplicates.

00:46:40.910 --> 00:46:44.340
By default,
the toolbar items don't allow duplicates.

00:46:45.510 --> 00:46:51.660
And it checks duplicates based on,
typically, its identifier.

00:46:51.700 --> 00:46:52.940
I should mention that.

00:46:53.050 --> 00:46:57.540
Or it actually-- there's an hi
object is equal call that will be

00:46:57.540 --> 00:47:01.460
called to test equality further
than that if you need that.

00:47:03.180 --> 00:47:06.240
So, that's our standard parameters.

00:47:06.240 --> 00:47:07.440
We have to add that.

00:47:07.530 --> 00:47:09.440
And here's our parameters.

00:47:09.570 --> 00:47:12.700
Now, we got this URL in,
and we just want to set it in.

00:47:12.700 --> 00:47:17.580
And we set it in as the keventparam
toolbar item config data parameter.

00:47:17.700 --> 00:47:21.210
And we kind of do that for a reason.

00:47:21.730 --> 00:47:26.810
We want construction to be very
similar to when we construct from a

00:47:26.810 --> 00:47:28.740
configuration file in the toolbar.

00:47:28.860 --> 00:47:30.700
And it just so happens
that when that happens,

00:47:30.840 --> 00:47:32.590
that's the parameter name
that gets passed to us.

00:47:32.600 --> 00:47:35.520
So we're just going to reuse that for
our regular construction so that we can

00:47:35.520 --> 00:47:40.350
have one funnel and one way to create
things and make things easy on us.

00:47:41.420 --> 00:47:43.640
So that's how we get our URL in here.

00:47:43.750 --> 00:47:48.140
And the URL can actually come in
as a string or an actual CFURL.

00:47:48.140 --> 00:47:50.190
For this example.

00:47:50.390 --> 00:47:56.180
And finally, we create an instance
of our class called,

00:47:56.320 --> 00:47:58.840
you know,
of our custom toolbar item class.

00:47:58.960 --> 00:48:01.370
And we get back an HA object graph.

00:48:02.280 --> 00:48:05.340
Now let's look at some of
the simple functions in here.

00:48:05.520 --> 00:48:09.490
So when we get called to construct,
actually let me zip down to

00:48:09.670 --> 00:48:10.740
the actual event handler.

00:48:10.740 --> 00:48:13.070
That'll make things a little easier.

00:48:14.370 --> 00:48:16.270
Here's our event handler.

00:48:16.270 --> 00:48:19.890
And the first event we handle
is kevent hiobject construct.

00:48:20.030 --> 00:48:23.110
As I showed in the code snippet,
we actually extract the hiobject

00:48:23.260 --> 00:48:27.000
instance parameter out of this thing,
and we use that to pass into our

00:48:27.000 --> 00:48:29.200
construct custom toolbar item.

00:48:29.200 --> 00:48:32.190
And I actually won't even go into
construct custom toolbar item.

00:48:32.200 --> 00:48:34.740
All it does is malloc a block of
memory and set some fields up.

00:48:34.750 --> 00:48:35.540
Very simple.

00:48:35.540 --> 00:48:38.850
And we get back our item out of that,
and then we actually reset it

00:48:38.850 --> 00:48:42.230
into the event using the same
parameter as type void pointer.

00:48:42.230 --> 00:48:43.940
And as you can see,
I haven't added a constant to the header.

00:48:43.940 --> 00:48:45.810
Anyways.

00:48:46.790 --> 00:48:50.330
After it's constructed,
we want to initialize our object.

00:48:50.560 --> 00:48:53.540
So we actually look for a kEvent,
hIObject, initialize.

00:48:53.680 --> 00:48:55.660
And this is where we will
actually receive the parameters

00:48:55.700 --> 00:49:02.940
that we set in that initialize
event in our other function.

00:49:03.130 --> 00:49:06.090
So let me go to the initialize routine.

00:49:07.460 --> 00:49:08.600
This is our initialize routine.

00:49:08.600 --> 00:49:11.400
We've gotten this event and we call this.

00:49:11.400 --> 00:49:13.710
Before we actually called this,
we've called our superclass

00:49:13.710 --> 00:49:14.310
via call next event handler.

00:49:14.420 --> 00:49:21.090
We know that HIToolbarItem
is now created.

00:49:24.550 --> 00:49:26.660
And actually here's an example in here.

00:49:26.690 --> 00:49:29.720
You can see that we're actually
going to modify or talk to

00:49:29.770 --> 00:49:30.840
the actual HIToolbar item.

00:49:30.840 --> 00:49:33.190
We're actually going to call
HIToolbarItem APIs in here,

00:49:33.300 --> 00:49:36.200
which is the reason we need to hold
onto the HIToolbarItem ref that is

00:49:36.200 --> 00:49:38.400
passed to us in our construct handler.

00:49:38.400 --> 00:49:42.400
So the first thing we do is we just
look for our config data parameter.

00:49:42.400 --> 00:49:43.250
So we get that.

00:49:43.340 --> 00:49:45.400
And that's all fine.

00:49:45.400 --> 00:49:46.510
If we got it,
then what we do is we try to

00:49:46.510 --> 00:49:47.400
determine what type it is.

00:49:47.400 --> 00:49:51.400
If it happens to be a string type,
we create a URL from that.

00:49:51.400 --> 00:49:55.390
If it happens to already be a URL type,
we just retain that.

00:49:55.390 --> 00:49:58.400
And in this code I'm
making a wild assumption.

00:49:58.520 --> 00:50:02.650
And if the parameter isn't there,
we make a reasonable default

00:50:02.650 --> 00:50:05.230
and we set our URL to apple.com.

00:50:05.460 --> 00:50:09.730
The next thing we do is we actually
set the label of the toolbar item

00:50:09.730 --> 00:50:12.040
to just this generic URL item.

00:50:12.140 --> 00:50:15.120
Ideally I'd set it to URL,
but URLs can be arbitrarily long,

00:50:15.230 --> 00:50:18.480
so for this example I'm
being a little bland.

00:50:18.480 --> 00:50:22.480
I'm sorry.

00:50:22.480 --> 00:50:22.480
We set our icon to the URL item,
and we set

00:50:22.890 --> 00:50:26.310
of the toolbar item to just
be the generic URL item.

00:50:26.310 --> 00:50:29.100
And then we set the
help text to be the URL,

00:50:29.160 --> 00:50:33.350
so we can demonstrate some
little help tags in the toolbar.

00:50:34.210 --> 00:50:36.280
So after that,
our item is initialized and it

00:50:36.280 --> 00:50:39.780
just exists in the toolbar and
everything is glorious and happy.

00:50:39.810 --> 00:50:43.940
And then somebody comes
along and clicks on it.

00:50:44.050 --> 00:50:46.320
And when they click on it,

00:50:47.520 --> 00:50:49.260
This event is sent out.

00:50:49.260 --> 00:50:51.000
K event toolbar item perform action.

00:50:51.000 --> 00:50:55.940
In this case, if we have a URL,
we just call ls open CFURL.

00:50:59.160 --> 00:51:03.440
Here's an interesting little event
that we send out to the toolbar.

00:51:03.480 --> 00:51:06.240
If you're doing a custom toolbar item,
you might have custom data.

00:51:06.360 --> 00:51:09.980
In this case,
our custom data is the URL itself.

00:51:09.980 --> 00:51:14.900
So whenever the toolbar
writes its configuration out,

00:51:14.900 --> 00:51:14.900
it's going to be a

00:51:15.460 --> 00:51:18.360
It actually asks you for any extra
data that you might have that it

00:51:18.370 --> 00:51:21.790
might want to write out into this
XML blob that it's about to do.

00:51:21.860 --> 00:51:25.180
The toolbar can be configurable
or non-configurable,

00:51:25.180 --> 00:51:28.440
and it can auto-save the configuration
for you in your application's prefs.

00:51:28.490 --> 00:51:31.890
And if you have it set to auto-save,
then you will get this event.

00:51:31.960 --> 00:51:34.920
In this case,
what we want to do is just call our own

00:51:34.920 --> 00:51:37.200
function to create some persistent data.

00:51:37.260 --> 00:51:40.430
And inside that function,
all we do is we just extract the

00:51:40.430 --> 00:51:42.740
string of the URL and we pass it back.

00:51:42.820 --> 00:51:45.460
Then we just set it
into the parameter here.

00:51:45.510 --> 00:51:47.350
We pass it back as the config data.

00:51:47.410 --> 00:51:50.320
You'll notice the same
parameter name that was incoming

00:51:50.390 --> 00:51:52.110
in the initialize event.

00:51:52.170 --> 00:51:55.080
And then when the
XML stream gets written,

00:51:55.140 --> 00:51:57.420
that string will get
written into it as well.

00:51:57.460 --> 00:52:00.330
And this way,
when the toolbar comes into existence

00:52:00.330 --> 00:52:03.250
again from that configuration,
we will automatically be

00:52:03.250 --> 00:52:05.520
past this config data.

00:52:05.580 --> 00:52:07.990
And we can get our URL back.

00:52:08.020 --> 00:52:09.470
Okay.

00:52:10.040 --> 00:52:12.340
So that's basically the custom item.

00:52:12.450 --> 00:52:15.720
And then in our main here,

00:52:21.760 --> 00:52:26.920
There are a couple places where
we actually reference this.

00:52:27.000 --> 00:52:29.310
We actually use this
My Custom Identifier string.

00:52:29.310 --> 00:52:33.140
Typically it would be Java namespacing,
but I'm just being lazy here.

00:52:33.140 --> 00:52:36.730
Couldn't come up with
anything interesting.

00:52:37.520 --> 00:52:40.160
When the toolbar goes to
configure itself or needs to

00:52:40.210 --> 00:52:42.860
create anything by identifier,
it will ask this concept

00:52:42.860 --> 00:52:43.930
of a toolbar delegate.

00:52:43.940 --> 00:52:46.940
You'll learn more about that
in new controls and services.

00:52:46.940 --> 00:52:49.310
But suffice it to say,
when we're asked to create an

00:52:49.310 --> 00:52:51.840
object of my custom identifier,
what we do is we turn around and

00:52:51.840 --> 00:52:53.640
we create one of our custom items.

00:52:53.730 --> 00:52:57.240
And we pass in the config data that's
actually passed to this function.

00:52:57.380 --> 00:52:59.500
So that's where we hook in that part.

00:52:59.580 --> 00:53:02.260
And then the other thing is we're going
to allow this to happen from a drag.

00:53:02.300 --> 00:53:05.910
So you're going to be able to drag text
into the toolbar and we're going to

00:53:05.910 --> 00:53:07.020
create one of these items out of that.

00:53:07.200 --> 00:53:10.660
So we had to actually add some
code here to go through and

00:53:10.660 --> 00:53:11.880
see if we had any text flavors.

00:53:11.890 --> 00:53:16.040
And if we do, just extract the text,
create a URL out of it,

00:53:16.150 --> 00:53:20.540
and create a custom
toolbar item with that.

00:53:20.680 --> 00:53:22.390
So that's that.

00:53:26.610 --> 00:53:29.000
Okay, so here's our toolbar again.

00:53:29.000 --> 00:53:31.970
And I'd love to know where the doc is.

00:53:32.000 --> 00:53:33.000
Okay, there it is.

00:53:33.100 --> 00:53:34.370
All right.

00:53:34.840 --> 00:53:36.700
So I've actually built this already.

00:53:36.800 --> 00:53:39.900
And all we're gonna do now,
we're just gonna pick a couple of URLs.

00:53:39.930 --> 00:53:41.400
You'll notice there's a
little bit of a delay,

00:53:41.460 --> 00:53:42.600
and then you can add it in.

00:53:42.600 --> 00:53:45.320
And my toolbar item is
created just like that.

00:53:45.380 --> 00:53:48.360
Now, drag another one in.

00:53:52.300 --> 00:54:08.000
[Transcript missing]

00:54:08.190 --> 00:54:10.410
And that's really the power here,
is that you can do anything

00:54:10.790 --> 00:54:12.200
you want with this stuff,
and you can create all

00:54:12.200 --> 00:54:13.600
types of custom stuff.

00:54:13.730 --> 00:54:15.100
From the toolbar item,
you can actually have

00:54:15.100 --> 00:54:16.620
a custom toolbar view.

00:54:16.800 --> 00:54:18.780
So the toolbar item is actually
called whenever we want to

00:54:18.780 --> 00:54:20.820
create the view for the items,
you can actually create

00:54:20.880 --> 00:54:21.680
custom toolbar views.

00:54:21.680 --> 00:54:23.680
And these are all done via HI objects.

00:54:23.840 --> 00:54:29.470
This is the basic knowledge you need
to possess in order to stick with us.

00:54:29.820 --> 00:54:31.240
will be presented through all
of this fun stuff we're going

00:54:31.240 --> 00:54:34.160
to be doing with HiObject,
Hiview, and all of that fun stuff.

00:54:34.280 --> 00:54:37.470
So that's my little toolbar item demo.

00:54:42.870 --> 00:54:45.080
So in summary,
all of the stuff that we've

00:54:45.080 --> 00:54:49.040
been showing you today,
we've been working on for years.

00:54:49.150 --> 00:54:52.710
And I mean, it's been slow coming,
but we're

00:54:52.940 --> 00:54:55.380
You know, now that we're on 10,
and now that we have all of the

00:54:55.380 --> 00:54:59.300
power beneath us that we need,
we can do some amazing things.

00:54:59.300 --> 00:55:01.190
And we're starting to
do these things now.

00:55:01.270 --> 00:55:04.410
I mean, HIObject,
once you start to use it,

00:55:04.410 --> 00:55:07.190
you're going to realize, oh my god.

00:55:07.310 --> 00:55:08.180
This is easy.

00:55:08.180 --> 00:55:10.280
And then when you start to use HFU,
you're gonna go, "Man,

00:55:10.280 --> 00:55:12.180
how did I ever use that control manager?

00:55:12.280 --> 00:55:15.960
I, I,
I can't even comprehend it." And we'll

00:55:15.960 --> 00:55:17.560
demonstrate that in the next session.

00:55:17.640 --> 00:55:19.590
And trust me, you're gonna dig it.

00:55:20.930 --> 00:55:22.910
Now, HIObject is our future.

00:55:22.990 --> 00:55:27.080
We've always talked about Carbon events,
Carbon events, Carbon events.

00:55:27.190 --> 00:55:29.740
HIObject is what Carbon events plug into.

00:55:30.060 --> 00:55:31.900
This is the receptor for Carbon events.

00:55:32.060 --> 00:55:33.890
This is, this completes our object model.

00:55:33.890 --> 00:55:35.900
This is gonna be really cool.

00:55:35.900 --> 00:55:41.660
So, what we need you guys to do is
to at least look at the headers

00:55:42.010 --> 00:55:43.890
and give us your thoughts.

00:55:44.050 --> 00:55:49.390
So we have three headers of interest
on the seed that you receive.

00:55:49.400 --> 00:55:49.900
We have HIObject, HIObject, and HIObject.

00:55:50.900 --> 00:55:53.810
So we're gonna go ahead and look at
the HIObject toolbar and HIOview.

00:55:53.810 --> 00:55:58.400
And if you would, just check 'em out,
see what's there, see what's not there,

00:55:58.400 --> 00:55:59.820
and give us feedback.

00:55:59.880 --> 00:56:04.480
And the person to bother with
that feedback would be Xavier.

00:56:06.260 --> 00:56:11.170
Let's just take you through
the road map quickly.

00:56:11.170 --> 00:56:12.400
After this.

00:56:12.500 --> 00:56:35.500
[Transcript missing]

00:56:35.600 --> 00:56:38.170
Later on this afternoon,
we talk about new controls and services,

00:56:38.170 --> 00:56:41.460
and then we have a special
session on how to improve your

00:56:41.540 --> 00:56:43.500
performance with the Carbon events.

00:56:43.680 --> 00:56:45.320
And there's actually other
tips and tricks in there,

00:56:45.320 --> 00:56:45.600
too.

00:56:45.600 --> 00:56:47.500
It's not fully about Carbon events.

00:56:47.500 --> 00:56:52.680
We actually have some other ways of
getting some performance out of your app.

00:56:53.340 --> 00:56:56.010
We actually have preliminary
documentation on this stuff that

00:56:56.050 --> 00:56:59.540
we're going to be talking about
today on the developer website,

00:56:59.540 --> 00:57:01.040
I believe.

00:57:01.040 --> 00:57:03.930
HivuhiObject and HIToolbar,
they're all preliminary right now.

00:57:03.940 --> 00:57:07.440
There'll be more to come.

00:57:07.440 --> 00:57:09.420
Of course,
there's always Learning Carbon and

00:57:09.420 --> 00:57:11.140
all that fun stuff.