WEBVTT

00:00:04.510 --> 00:00:07.930
This is actually the security
session on Authorization.

00:00:07.980 --> 00:00:08.840
I'm Craig Keithley.

00:00:08.840 --> 00:00:12.000
I'm Apple's security and
cryptography evangelist.

00:00:12.210 --> 00:00:17.830
And today what we're going to talk
about is Authorization in Mac OS X.

00:00:18.530 --> 00:00:21.780
There's a number of areas where
authorization is useful in the

00:00:21.780 --> 00:00:25.890
operating system to check whether or
not you have the rights to do things.

00:00:26.030 --> 00:00:28.000
It's not quite the same
thing as authentication,

00:00:28.000 --> 00:00:32.810
and we'll discuss that in greater detail,
but you can make the operating system,

00:00:32.810 --> 00:00:37.560
you can make the user experience more
secure by using the authorization APIs.

00:00:37.630 --> 00:00:42.560
So having said that,
let me bring out Michael Brouwere

00:00:42.560 --> 00:00:42.560
and he'll talk about this in depth.

00:00:42.560 --> 00:00:42.560
Thanks.

00:00:52.570 --> 00:00:56.000
came to talk about authorization.

00:00:56.000 --> 00:00:57.460
First,
I want to go over some of the things

00:00:57.460 --> 00:01:01.070
that you'll learn in today's session.

00:01:02.330 --> 00:01:08.010
Um, the Authorization API was
put into Mac OS X,

00:01:08.010 --> 00:01:14.710
um, because unlike Mac OS 9,
there's actually, um, privileges

00:01:15.000 --> 00:01:18.740
There's a difference between
applications that run as you,

00:01:18.740 --> 00:01:22.150
as a regular user,
and applications that can modify

00:01:22.150 --> 00:01:26.750
certain parts of the system,
like changing certain system

00:01:26.750 --> 00:01:29.240
configuration parameters.

00:01:29.240 --> 00:01:36.020
There's traditional Unix settings
that you won't be able to modify

00:01:36.110 --> 00:01:38.660
unless you have privileges.

00:01:38.680 --> 00:01:44.800
Now, we tried to create this API in
order to let you manage modifying

00:01:44.900 --> 00:01:51.090
those things in a way that doesn't
necessarily compromise security.

00:01:51.910 --> 00:01:55.830
So, let me go over some of the
things you'll learn today.

00:01:55.830 --> 00:02:00.200
You'll learn how to make applications
that need to access these

00:02:00.210 --> 00:02:02.800
privileged parts of the system.

00:02:02.900 --> 00:02:07.760
We'll also go over how you can make an
installer that can install an application

00:02:07.760 --> 00:02:09.800
that needs to do these things.

00:02:10.060 --> 00:02:14.750
And you'll also learn how to use
these privileged calls that exist

00:02:14.750 --> 00:02:18.800
in OS X without having to run
your entire application as root,

00:02:18.800 --> 00:02:22.780
or as the user with UID 0.

00:02:22.970 --> 00:02:26.220
And I'll go over some of the
reasons why you don't want to run

00:02:26.220 --> 00:02:28.790
your entire application as root.

00:02:30.700 --> 00:02:36.180
So, first I'll talk a little bit
about what authorization is.

00:02:36.290 --> 00:02:40.590
Often when we talk about authorization,
people confuse it with authentication,

00:02:40.610 --> 00:02:44.530
and those are two different things.

00:02:44.630 --> 00:02:50.090
Authentication consists of identifying
the person behind the computer,

00:02:50.300 --> 00:02:55.420
or identifying who's there
currently doing something.

00:02:55.540 --> 00:02:58.370
Authorization, on the other hand,

00:02:58.710 --> 00:03:03.060
is once you've identified what the
user is that's using the system,

00:03:03.060 --> 00:03:06.260
determining whether or not you
should allow him to do something.

00:03:06.300 --> 00:03:11.070
And whatever that something is
that depends on your application.

00:03:11.450 --> 00:03:17.880
I'll talk a little bit about what the
Authorization API does and doesn't do.

00:03:18.000 --> 00:03:21.160
I mean, there's some things that
people wish it would do,

00:03:21.160 --> 00:03:23.240
but we can't right now.

00:03:23.470 --> 00:03:26.530
And so I'll go into a little
bit more detail about the

00:03:26.530 --> 00:03:28.610
Authorization Services API.

00:03:28.820 --> 00:03:32.820
And finally,
I'll cover some examples of how

00:03:33.120 --> 00:03:36.120
not to use it and how to use it.

00:03:36.200 --> 00:03:40.870
We've seen some things come up
from developers and from people

00:03:41.130 --> 00:03:45.830
inside Apple and outside Apple that
they were trying to use the API,

00:03:45.830 --> 00:03:48.450
and we saw some examples
of good ways to use it,

00:03:48.530 --> 00:03:51.060
but we also saw some examples
of bad ways to use it.

00:03:51.200 --> 00:03:57.000
So, in order to kind of cover the
things that have happened,

00:03:57.260 --> 00:04:01.690
the mistakes people have made,
I want to kind of go over that and

00:04:01.690 --> 00:04:07.140
show some of the commonly made mistakes
and show some of the things that you

00:04:07.190 --> 00:04:12.150
can do to avoid those mistakes or
to not have to make those mistakes.

00:04:13.510 --> 00:04:18.380
So, talked a little bit about
authorization versus authentication.

00:04:18.440 --> 00:04:21.710
Want to make sure that
everyone is aware of it.

00:04:21.710 --> 00:04:21.710
So,

00:04:22.540 --> 00:04:26.810
The key goal of the Authorization
API is that you ask for

00:04:26.860 --> 00:04:29.500
permission to do something.

00:04:29.500 --> 00:04:33.310
Normally,
that results in us asking the user

00:04:33.310 --> 00:04:36.400
for an administrative password.

00:04:36.710 --> 00:04:42.400
That is actually the authentication step
that happens below the authorization.

00:04:42.400 --> 00:04:46.710
That doesn't have to be the
way the problem gets resolved.

00:04:46.810 --> 00:04:50.120
It could be something like user
has to insert a smart card or you

00:04:50.120 --> 00:04:54.490
have to present a fingerprint,
which is another form of authentication.

00:04:54.590 --> 00:04:58.780
If you've already authenticated earlier,
it could be that you're automatically

00:04:59.040 --> 00:05:01.960
authorized to do what you're
asking for permission to do.

00:05:02.120 --> 00:05:06.730
So rather than worrying
about who the user is,

00:05:06.830 --> 00:05:10.040
when you're using authorization API,
you just worry about what the

00:05:10.060 --> 00:05:14.250
operation is you're doing and whether
that's allowed at the current time.

00:05:15.000 --> 00:05:17.890
Now, why would you want to use
Authorization Services?

00:05:18.260 --> 00:05:21.490
Because, as you'll see later,
at the point where you would be calling

00:05:21.490 --> 00:05:26.360
Authorization Services in your program,
your program could already

00:05:26.600 --> 00:05:28.340
do what it needs to do.

00:05:28.410 --> 00:05:31.160
I mean,
you already need to have the privileges

00:05:31.160 --> 00:05:35.780
in order to make the change or the call
into the system that you want to make.

00:05:35.910 --> 00:05:40.950
The reason to use Authorization
API is to make an explicit decision

00:05:41.030 --> 00:05:44.860
and to let an administrator
actually configure who can do what,

00:05:44.960 --> 00:05:47.270
rather than having the
application decide,

00:05:47.380 --> 00:05:52.800
"Oh, it's okay when on my iMac at home
I'm changing the network settings.

00:05:52.800 --> 00:05:53.700
That's perfectly fine.

00:05:53.700 --> 00:05:56.420
Anyone should be able to do that,
right?" Well, that's probably true

00:05:56.420 --> 00:05:57.500
in your iMac at home.

00:05:57.630 --> 00:06:00.230
On the other hand,
that's probably not true on

00:06:00.370 --> 00:06:04.390
that same iMac in an educational
situation or in a lab or something,

00:06:04.500 --> 00:06:05.590
where you don't want users just
changing the network settings.

00:06:05.640 --> 00:06:07.400
You want them changing the IP address.

00:06:07.430 --> 00:06:10.300
That's something that the administrator
needs to be able to control.

00:06:10.390 --> 00:06:16.650
So, if you use the Authorization API,
it allows the administrator to make

00:06:16.830 --> 00:06:20.690
the decisions on who can do what,
rather than you as the programmer

00:06:20.700 --> 00:06:26.190
developer of an application that
needs to do privileged operations.

00:06:31.570 --> 00:06:35.040
Another thing is that using
the Authorization API,

00:06:35.040 --> 00:06:38.520
all authorization goes
through a central point.

00:06:38.650 --> 00:06:42.950
Everything funnels through
Authorization Services.

00:06:43.190 --> 00:06:48.150
That makes it easier to audit your
code and the system as a whole,

00:06:48.200 --> 00:06:54.100
because there's one place where all
operations go through before they happen.

00:06:54.340 --> 00:06:56.830
Like I said before,
it makes it configurable and,

00:06:56.830 --> 00:06:58.680
more importantly, securable.

00:06:58.880 --> 00:07:03.240
The default way we ship
OS X out of the box,

00:07:03.440 --> 00:07:07.600
we try to be secure as far as who
can access your machine over the

00:07:07.600 --> 00:07:12.700
network by not running any network
services and things like that.

00:07:12.760 --> 00:07:16.390
We don't really try to be secure as far
as if you're sitting behind the computer,

00:07:16.390 --> 00:07:19.200
you can pretty much do
everything with your computer,

00:07:19.200 --> 00:07:20.360
the default configuration.

00:07:20.410 --> 00:07:25.460
Now, like I said before,
in a lab situation or a school situation,

00:07:25.460 --> 00:07:28.960
different environments,
you might not want the person sitting

00:07:28.960 --> 00:07:32.910
behind the computer to be able to
control everything on that machine.

00:07:33.330 --> 00:07:38.180
So it's securable, it's configurable,
it's flexible.

00:07:38.300 --> 00:07:42.270
And the other main advantage is
you're explicitly making a decision.

00:07:42.620 --> 00:07:47.240
Often, traditionally in Unix and
traditionally in many systems,

00:07:47.580 --> 00:07:50.170
authorization is something
that's kind of done ad hoc.

00:07:50.240 --> 00:07:55.730
If you look at regular Unix login,
the decision whether or not you can

00:07:55.840 --> 00:08:00.190
login depends on whether or not you
can enter a username and password.

00:08:00.200 --> 00:08:02.320
Well,
that's not really doing authorization,

00:08:02.320 --> 00:08:04.190
that's just doing the authentication.

00:08:04.200 --> 00:08:08.530
The step whether it allows you to login
then later is determined by looking

00:08:08.530 --> 00:08:12.630
at some file in some directory saying,
"Is this user listed as one that's

00:08:12.630 --> 00:08:19.400
not allowed to login?" So that
basically makes that you have...

00:08:19.580 --> 00:08:22.790
Um, one method for doing this for login.

00:08:22.940 --> 00:08:25.620
For something else,
like logging in through FTP, um,

00:08:25.800 --> 00:08:29.750
there might be a different file,
and SSH has its own other file.

00:08:29.920 --> 00:08:33.680
So each separate service on
the system has potentially some

00:08:33.680 --> 00:08:37.140
way of doing authorization,
but not every service has it.

00:08:37.240 --> 00:08:42.210
So by having all applications
go through this one API,

00:08:42.420 --> 00:08:48.950
It makes it easier to secure the system
and much easier to see what's happening.

00:08:50.500 --> 00:08:58.450
So, if you were to write an application
that uses Authorization Services,

00:08:58.460 --> 00:09:01.290
there's basically three pieces involved.

00:09:01.410 --> 00:09:05.460
The security server that you see
on the top is part of Mac OS X,

00:09:05.490 --> 00:09:10.100
and it's the central authority
that keeps track of who's allowed

00:09:10.100 --> 00:09:12.510
to do what at any given time.

00:09:12.640 --> 00:09:16.480
Now, your application on the left,

00:09:16.790 --> 00:09:20.310
is just a regular application
running without any privileges.

00:09:20.310 --> 00:09:23.720
Now, within your application wrapper,
you can ship a tool,

00:09:23.720 --> 00:09:27.700
and that tool should be able to
run with elevated privileges.

00:09:27.700 --> 00:09:31.200
Most cases,
it'll be running with user ID 0.

00:09:31.200 --> 00:09:34.190
In certain cases,
it might only need access to be

00:09:34.220 --> 00:09:38.870
in a certain Unix group if all
you need is to write to certain

00:09:38.870 --> 00:09:45.700
directories that are privileged based
on group IDs rather than user IDs.

00:09:45.700 --> 00:09:50.670
Now, when your application wants to
make a change to the system or

00:09:50.670 --> 00:09:55.750
perform some operation that it
wouldn't normally be able to do,

00:09:55.850 --> 00:09:55.860
it--

00:09:56.480 --> 00:10:00.640
First asks the security
server for authorization.

00:10:00.640 --> 00:10:07.390
And what that does is it makes
some state in the security server

00:10:07.390 --> 00:10:10.550
remember that for this authorization,
these things are allowed.

00:10:10.800 --> 00:10:15.110
And the next thing it does is it
launches the tool and passes that

00:10:15.110 --> 00:10:18.200
authorization along to the tool.

00:10:18.240 --> 00:10:20.540
Now, the tool,
that's the very first thing it does,

00:10:20.540 --> 00:10:26.340
it decodes that authorization and checks
the rights of that authorization with

00:10:26.430 --> 00:10:30.140
the security server to make sure that
the app making the request is really

00:10:30.140 --> 00:10:32.520
allowed to do what it's asking for.

00:10:32.720 --> 00:10:37.610
And once it's verified that it's okay,
it goes ahead and performs the operation.

00:10:38.380 --> 00:10:41.090
So,
something I want to say about operation,

00:10:41.140 --> 00:10:47.380
just that wasn't really clear
to some people last year.

00:10:47.690 --> 00:10:53.510
The level of what such operations
should be should be something that

00:10:53.540 --> 00:10:57.310
the user-- the user-visible operation.

00:10:57.430 --> 00:11:02.350
So it would be something like
changing your network settings.

00:11:02.400 --> 00:11:05.900
And that might involve doing five
different system calls into the

00:11:05.900 --> 00:11:09.050
kernel or writing three different
configuration files and restarting

00:11:09.050 --> 00:11:11.360
a daemon and who knows what.

00:11:11.480 --> 00:11:15.540
You want to define that as one operation
because from the user's point of view,

00:11:15.540 --> 00:11:17.350
he's only doing one thing.

00:11:17.410 --> 00:11:20.790
And if you're gonna
ask for authorization,

00:11:20.790 --> 00:11:23.550
which might end up in a
dialog for each operation,

00:11:23.720 --> 00:11:28.810
you really don't want five
dialogs for one user operation.

00:11:31.900 --> 00:11:39.470
So currently,
Authorization API is password-based only.

00:11:41.830 --> 00:11:46.370
: This isn't entirely true
because we will in Jaguar have a

00:11:46.650 --> 00:11:54.790
plugin architecture which isn't
published yet as a public API,

00:11:54.860 --> 00:11:59.140
but if you go to the Darwin sources you
can take a look at that because all the

00:11:59.140 --> 00:12:01.540
authorization API stuff is in Darwin.

00:12:01.540 --> 00:12:06.640
So there is a plugin architecture which,
for one thing,

00:12:06.640 --> 00:12:10.360
allows us to hook up with Kerberos.

00:12:10.360 --> 00:12:14.110
One of the new things we will
be doing as of Jaguar as opposed

00:12:14.200 --> 00:12:18.450
to in 10.1 is we're using
Directory Services rather than NetInfo.

00:12:18.460 --> 00:12:23.270
Out of the box it still uses
NetInfo because out of the box

00:12:23.270 --> 00:12:26.530
Directory Services uses NetInfo.

00:12:26.730 --> 00:12:30.660
If you configure your system to
use some LLAP server or some other

00:12:30.790 --> 00:12:33.910
service for directory services,
Authorization API will

00:12:33.910 --> 00:12:35.400
use that as its backend.

00:12:36.310 --> 00:12:40.540
Also in Jaguar,
some of the lower-level parts of

00:12:40.640 --> 00:12:44.960
the system have been PAMified,
so they'll all use the PAM API,

00:12:44.960 --> 00:12:48.600
and the default configuration
for PAM actually goes through

00:12:48.600 --> 00:12:49.960
the Authorization API.

00:12:49.960 --> 00:12:52.780
So whichever way you configure
the Authorization API,

00:12:52.900 --> 00:12:56.370
all forms of authorization and
authentication on the system

00:12:56.590 --> 00:13:01.390
will go through one funnel,
which is the Authorization Services API.

00:13:02.680 --> 00:13:07.860
So what the Authorization API does
is it answers the "do I have

00:13:07.860 --> 00:13:10.100
the right to do this?" question.

00:13:10.130 --> 00:13:13.370
It doesn't actually give you
the ability to do something

00:13:13.420 --> 00:13:15.780
that you couldn't do before.

00:13:16.100 --> 00:13:20.270
Um,
it basically helps you if your privileged

00:13:20.270 --> 00:13:26.490
tool or component in your application
that potentially could already,

00:13:26.490 --> 00:13:26.490
say, reformat the hard drive,

00:13:27.100 --> 00:13:30.680
Whether it should do that on
behalf of the user is a question,

00:13:30.760 --> 00:13:36.460
because if the user is just some kid
that is using a regular user account and

00:13:36.460 --> 00:13:41.250
not the administrator for that system,
he probably shouldn't be able

00:13:41.250 --> 00:13:43.510
to reformat your hard disk.

00:13:43.700 --> 00:13:50.780
Um,
and it automatically provides the user

00:13:51.170 --> 00:13:51.910
interaction needed if it's needed.

00:13:53.830 --> 00:13:56.880
So what it doesn't do,
like I said before,

00:13:56.980 --> 00:14:00.600
it answers the "Do I have the
right to do this?" question.

00:14:00.600 --> 00:14:03.360
It doesn't enable you to do something
that you couldn't do before.

00:14:03.620 --> 00:14:09.640
And that's because Mac OS X is
not capability-based,

00:14:09.640 --> 00:14:15.330
which basically--Mac OS X is still
traditional Unix in terms of privileges.

00:14:15.480 --> 00:14:18.930
Privileges are based on user ID,
and as far as Unix is concerned,

00:14:18.940 --> 00:14:20.130
there's only two types of users.

00:14:20.140 --> 00:14:23.220
There's non-root users
and there's root users.

00:14:23.320 --> 00:14:26.560
And so authorization services

00:14:26.860 --> 00:14:30.980
assumes that your application is
using the standard Unix model,

00:14:30.980 --> 00:14:36.590
but aids you in making finer-grain
decisions about who can do what.

00:14:39.240 --> 00:14:41.070
So, case study.

00:14:41.220 --> 00:14:46.160
Here's an example of how
OS X could be improved by using

00:14:46.160 --> 00:14:48.190
the Authorization API correctly.

00:14:48.200 --> 00:14:54.640
I'm sure you've all run into the problem
once where you've thrown away something

00:14:54.670 --> 00:14:58.720
in the trash and Finder couldn't
delete it later because you didn't

00:14:58.720 --> 00:15:02.160
have privileges to delete it because of
the file system permissions on Mac OS X.

00:15:02.200 --> 00:15:06.200
Well, if there's something in the
trash that you can't delete,

00:15:06.200 --> 00:15:12.800
it would be--if Finder were to
have a separate tool that knew

00:15:12.800 --> 00:15:16.760
how to empty the trash and use
Authorization Services to determine

00:15:16.760 --> 00:15:20.140
whether or not it should do that,
you could empty the trash even

00:15:20.140 --> 00:15:24.320
if there were files in there
that you couldn't normally write,

00:15:24.320 --> 00:15:27.190
or the directories that you
couldn't normally write,

00:15:27.220 --> 00:15:30.190
because that's what it's--that's what
determines if you can remove a file.

00:15:30.200 --> 00:15:32.180
Um...

00:15:32.470 --> 00:15:35.430
Now, out of the box,
we could maybe even configure it so

00:15:35.430 --> 00:15:38.200
that any user could empty the trash,
because after all,

00:15:38.200 --> 00:15:41.330
even if the administrator
threw something in the trash,

00:15:41.390 --> 00:15:42.590
I should still be able to empty it.

00:15:42.640 --> 00:15:44.310
It's trash after all.

00:15:44.460 --> 00:15:48.060
But in a different environment,
you might want to configure it where,

00:15:48.210 --> 00:15:50.320
well, if you want to empty the trash
and there's stuff in there that

00:15:50.380 --> 00:15:52.600
you couldn't normally throw away,
you have to enter an

00:15:52.600 --> 00:15:54.030
administrator password.

00:15:54.140 --> 00:16:00.410
So by having Finder use the
Authorization API to do this

00:16:00.530 --> 00:16:02.990
operation that essentially,
um,

00:16:03.830 --> 00:16:06.600
is not normally allowed,
but have it use a

00:16:06.600 --> 00:16:08.500
privileged tool to do it.

00:16:08.590 --> 00:16:13.430
We could allow the site administrator
or the user of the computer to determine

00:16:13.760 --> 00:16:16.790
what's needed in order to do this.

00:16:16.840 --> 00:16:19.990
Now, the key thing in this is

00:16:20.450 --> 00:16:22.920
If you were to do this,
you would want to ask for

00:16:22.920 --> 00:16:26.130
permission to empty the trash as
the operation you're going to do,

00:16:26.280 --> 00:16:30.300
rather than asking for permission
to remove each individual file.

00:16:30.350 --> 00:16:35.540
Since the high-level operation the user
is performing is emptying the trash.

00:16:35.590 --> 00:16:37.560
Now, I mean,
you could implement it by calling

00:16:37.560 --> 00:16:40.300
this tool for every file you
encounter that you can't delete.

00:16:40.390 --> 00:16:43.370
If you did it that way,
depending on how the

00:16:43.420 --> 00:16:46.630
system is configured,
the user might end up with 10,000

00:16:46.710 --> 00:16:50.150
dialogues if there's 10,000 files
in the trash that you can't delete.

00:16:50.250 --> 00:16:53.570
So in order to avoid that,
you really want to try and define the

00:16:53.570 --> 00:16:59.500
operations that you ask the authorization
API about as high-level as possible.

00:17:05.240 --> 00:17:12.540
So I'll go into a little more detail
about the Authorization Services itself.

00:17:12.700 --> 00:17:16.200
This is the actual API.

00:17:16.560 --> 00:17:19.210
First thing I'll cover
is naming of rights.

00:17:19.400 --> 00:17:25.120
So in order-- the Authorization
API works with things called rights.

00:17:25.140 --> 00:17:28.130
Now, rights don't actually give
you the right to do something.

00:17:28.290 --> 00:17:32.140
They're just a name for something that,
um...

00:17:33.200 --> 00:17:36.300
That correspond to the
operation you want to perform.

00:17:36.580 --> 00:17:40.600
So you could ask for the right to,
in the example of the finder,

00:17:40.760 --> 00:17:47.540
finder would ask for the right
to system.filesystem.empty.trash,

00:17:47.540 --> 00:17:48.740
or something like that.

00:17:48.840 --> 00:17:50.840
So it would ask for the
right to empty the trash,

00:17:50.950 --> 00:17:53.640
and depending on how it was configured,
it would either get that or

00:17:53.640 --> 00:17:57.240
it would get it after the user
had entered some information,

00:17:57.240 --> 00:17:59.950
or it would be denied.

00:18:01.110 --> 00:18:04.340
The other thing I'll go over
is show an example of how to do

00:18:04.340 --> 00:18:05.740
the application communication.

00:18:05.900 --> 00:18:10.030
So basically how to do the communication
between your application and the tool,

00:18:10.100 --> 00:18:12.170
like I showed in that slide.

00:18:12.800 --> 00:18:19.100
[Transcript missing]

00:18:19.170 --> 00:18:22.720
And finally,
there's one call in Authorization API,

00:18:22.720 --> 00:18:25.610
which is probably the call
that most developers end up

00:18:25.610 --> 00:18:29.100
using and end up ignoring the
rest of Authorization Services,

00:18:29.280 --> 00:18:31.620
which is ExecuteWithPrivileges.

00:18:31.670 --> 00:18:37.700
And ExecuteWithPrivileges really meant
as a sort of patch to be able to install

00:18:37.700 --> 00:18:42.670
privileged components in the system,
but we really encourage developers

00:18:42.700 --> 00:18:45.940
to look at the rest of the
Authorization API and use that and

00:18:45.940 --> 00:18:49.040
try and avoid using execute with
privileges as much as possible.

00:18:51.430 --> 00:18:55.080
and mainly it's intended to be used
during installation and not during

00:18:55.080 --> 00:18:58.370
normal execution of your application.

00:18:59.020 --> 00:19:01.690
So naming of rights.

00:19:01.920 --> 00:19:06.060
We define rights in a
hierarchical namespace.

00:19:06.400 --> 00:19:11.520
We've defined a couple
of top-level domains,

00:19:11.590 --> 00:19:16.350
but we don't have an exhaustive
list of every write that

00:19:16.450 --> 00:19:20.010
you could possibly think of,
since we don't know what your

00:19:20.010 --> 00:19:23.000
application might define as
the operations it needs to do.

00:19:23.040 --> 00:19:26.310
Since we want you to define
higher-level operations,

00:19:26.410 --> 00:19:31.830
we can't really define one for
each low-level system operation.

00:19:31.870 --> 00:19:35.110
So some example write names
that are currently in use

00:19:35.300 --> 00:19:39.230
are system.login.console,
which is essentially when

00:19:39.230 --> 00:19:43.630
your system boots in Jaguar,
login window actually asks for the

00:19:43.760 --> 00:19:45.600
right to log in on the console.

00:19:45.720 --> 00:19:51.170
And that triggers a bunch of things,
amongst which, by default,

00:19:51.190 --> 00:19:53.990
would be the regular login window UI.

00:19:54.070 --> 00:19:56.570
If you configure it differently,
it might actually trigger

00:19:56.570 --> 00:20:01.040
the login window UI with some
additional Kerberos features or,

00:20:01.170 --> 00:20:03.330
depending--if you actually put
the right plugins in place,

00:20:03.330 --> 00:20:07.450
you could completely customize that.

00:20:07.620 --> 00:20:10.370
Another write that's
used is system.login.pam,

00:20:10.480 --> 00:20:15.900
which is actually what Pam uses
to--in the default module for Pam,

00:20:16.050 --> 00:20:21.080
will actually ask the Authorization
API for the right to log in.

00:20:21.160 --> 00:20:26.360
And that's what you end up using if
you SSH into your machine on Jaguar.

00:20:26.490 --> 00:20:29.940
What ends up happening is Pam actually
calls into the Authorization API,

00:20:29.940 --> 00:20:33.520
which in turn goes-- goes back
and calls into Directory Services.

00:20:33.890 --> 00:20:37.270
Again, you can configure that
to do something else.

00:20:38.540 --> 00:20:41.510
Some other examples:
The DVD player app has

00:20:41.510 --> 00:20:43.190
two different rights.

00:20:43.520 --> 00:20:47.800
One is the setRegion.initial,
which is the right to set the

00:20:47.930 --> 00:20:50.290
initial region on your DVD player.

00:20:50.500 --> 00:20:55.250
And the way that's configured out
of the box is anyone can do that.

00:20:55.510 --> 00:20:57.500
It means the first time you
pop a CD into your system,

00:20:57.500 --> 00:21:00.500
anyone can set the region
to the region of that CD.

00:21:00.500 --> 00:21:03.500
And it doesn't ask you for any
administrative password or anything.

00:21:03.500 --> 00:21:06.160
Now, if you want to change the region,
since you can only change the

00:21:06.160 --> 00:21:09.700
region five times or something--I
don't know the exact number-- but

00:21:09.700 --> 00:21:13.690
you can only change the region on
your DVD a certain number of times.

00:21:13.990 --> 00:21:17.810
And after changing it that many times,
you're basically your host because

00:21:17.810 --> 00:21:19.900
you can't use your DVD player anymore.

00:21:20.130 --> 00:21:24.620
So you don't really want your kid
running up and shoving in CDs and

00:21:24.620 --> 00:21:27.280
changing the region five times in a row,
at which point you can

00:21:27.280 --> 00:21:28.690
throw away your PowerBook.

00:21:28.750 --> 00:21:32.980
So in order to change the region,
the default configuration actually

00:21:32.980 --> 00:21:35.530
asks for an administrative password.

00:21:36.160 --> 00:21:39.480
And since that's not something
that people normally do,

00:21:39.490 --> 00:21:43.650
we thought that's probably a good
way to prevent you from accidentally

00:21:43.650 --> 00:21:45.580
changing your region too often.

00:21:45.890 --> 00:21:50.340
Now, another right that's being
used is System.Preferences.

00:21:50.430 --> 00:21:55.900
Currently, that covers all of the
preferences in System.Preferences.

00:21:56.020 --> 00:21:59.970
Hopefully, sometime in the future,
we'll be splitting that into

00:22:00.310 --> 00:22:04.200
finer-grained authorization requests.

00:22:04.410 --> 00:22:10.190
But so right now, you can configure,
for example, whether or not you need to

00:22:10.190 --> 00:22:14.880
be administrator to change
certain system preferences.

00:22:15.000 --> 00:22:19.810
And currently out of the box,
the answer to that is yes.

00:22:19.930 --> 00:22:23.800
The other right, the last one,
is the system.privilege.admin,

00:22:23.810 --> 00:22:27.540
and that's the actual right that
execute with privileges uses,

00:22:27.620 --> 00:22:32.980
which I'll go into a little
more detail in a second.

00:22:34.240 --> 00:22:37.350
Why do you want to do
application communication?

00:22:37.460 --> 00:22:40.590
Why do you want to split
your app and your tool?

00:22:40.600 --> 00:22:47.000
Well, the reason is you don't want to
run your application as root.

00:22:47.160 --> 00:22:50.620
For one thing, that would involve running
the entire app kit or Carbon,

00:22:50.660 --> 00:22:53.540
depending on what type
of application you have,

00:22:53.640 --> 00:22:54.660
with UID0.

00:22:54.780 --> 00:22:58.410
And traditionally, any code you run with
UID0 on a Unix system,

00:22:58.490 --> 00:23:02.660
you want to audit that
code for buffer overruns,

00:23:02.660 --> 00:23:05.480
memory leaks,
all kinds of things that might

00:23:05.750 --> 00:23:07.150
end up compromising the system.

00:23:07.270 --> 00:23:09.740
Well,
you probably also don't want to load

00:23:09.740 --> 00:23:13.880
plug-ins in code that runs as root,
unless you know you can

00:23:14.400 --> 00:23:16.150
trust those plug-ins.

00:23:16.260 --> 00:23:19.540
If you run the entire app
kit or Carbon as root,

00:23:19.880 --> 00:23:24.620
that does all kinds of things that you
probably don't want to do with UID0.

00:23:24.870 --> 00:23:29.220
And in order to avoid having to
audit this massive chunk of code,

00:23:29.220 --> 00:23:33.680
which is what Carbon and
Cocoa are--and they are for a reason,

00:23:33.680 --> 00:23:35.610
because they have lots and lots
of features-- but you don't

00:23:35.610 --> 00:23:39.060
really need all that code to
run with elevated privileges.

00:23:39.060 --> 00:23:43.220
So what you want to do is take
just the core part of your app that

00:23:43.220 --> 00:23:46.970
performs the actual operation that
needs privileges and split that

00:23:47.060 --> 00:23:50.510
off into a separate application.

00:23:51.240 --> 00:23:55.680
You can then use both the APIs in
Authorization Services and

00:23:55.680 --> 00:23:59.700
traditional Unix APIs like pipes,
or you can use Mach ports or CF messages

00:23:59.700 --> 00:24:03.860
or whatever you want to use to
communicate between your application

00:24:03.950 --> 00:24:08.470
and the tool that's performing these
operations on behalf of your application.

00:24:12.120 --> 00:24:18.440
So, recommended way to use the
Authorization API would be in your app,

00:24:18.440 --> 00:24:21.570
and so the app being the
GUI part of your app,

00:24:21.650 --> 00:24:23.770
you create an authorization ref.

00:24:23.970 --> 00:24:26.940
Then there's an optional step, which is,

00:24:27.650 --> 00:24:31.890
If you want to have the nifty UI where
you have like a little lock icon

00:24:32.050 --> 00:24:36.540
and not allow the user to change
anything unless you know that it's

00:24:36.560 --> 00:24:40.980
going to--unless the lock is unlocked,
rather than asking the user for

00:24:41.000 --> 00:24:45.200
permission to do what he's doing
when he hits the save button,

00:24:45.420 --> 00:24:49.420
you use copyrights to figure
out what's currently allowed.

00:24:49.420 --> 00:24:52.660
Copyrights being
authorization copyrights.

00:24:52.780 --> 00:24:56.780
All the Authorization
Services APIs start with authorization.

00:24:57.310 --> 00:25:00.440
So you can figure out whether the
right you need is currently allowed,

00:25:00.440 --> 00:25:02.760
which might be the case,
because depending on how

00:25:02.760 --> 00:25:05.400
the system is configured,
you might already be allowed to do it,

00:25:05.400 --> 00:25:08.760
in which case, that's fine.

00:25:08.760 --> 00:25:10.200
You're done.

00:25:10.560 --> 00:25:16.160
On the other hand, if it's not allowed,
you can do a call to copyrights

00:25:16.330 --> 00:25:19.040
with preauthorization.

00:25:19.060 --> 00:25:20.830
If the user indicates he
wants to make changes,

00:25:20.860 --> 00:25:24.990
so he clicks the little lock button,
you set the preauthorization flag,

00:25:24.990 --> 00:25:27.050
and you ask for the rights you need.

00:25:27.990 --> 00:25:30.330
The only reason you would
ever use preauthorization,

00:25:30.420 --> 00:25:34.160
and the only thing it really does,
is if the configuration

00:25:34.170 --> 00:25:39.010
happens to be such that the
timeout on the writes is zero,

00:25:39.290 --> 00:25:41.880
which means that even
if you preauthorize,

00:25:41.890 --> 00:25:44.770
by the time you turn around and
actually try and perform the operation,

00:25:44.800 --> 00:25:48.100
the user's going to get another dialog,
it won't bother to ask

00:25:48.100 --> 00:25:49.640
the user the first time.

00:25:49.730 --> 00:25:52.350
It'll just say, "Yeah,
it's probably going to succeed later

00:25:52.350 --> 00:25:56.100
when you ask if the user enters the
right password." It's basically just

00:25:56.110 --> 00:26:00.090
to avoid having to ask the user for
his password twice if the Authorization

00:26:00.120 --> 00:26:03.860
Services API knows that by the time
you end up turning around and doing

00:26:03.860 --> 00:26:07.320
the thing you were going to do,
it's going to ask again.

00:26:08.050 --> 00:26:10.290
So that's an optional step, though.

00:26:10.450 --> 00:26:16.600
Then, next thing you do is you pass the
authorization ref to your privileged

00:26:16.600 --> 00:26:21.900
tool or to-- it could be a background--
faceless background app or daemon

00:26:21.900 --> 00:26:24.000
or whatever they call that in Unix.

00:26:24.290 --> 00:26:26.370
And you do that by externalizing
the authorization ref.

00:26:26.440 --> 00:26:30.400
So there's a call you make that turns the
authorization ref into a bag of bytes,

00:26:30.400 --> 00:26:34.450
which you can just pass around
using whatever mechanism you want.

00:26:34.560 --> 00:26:37.010
You want to make sure you use
something that can't be snooped

00:26:37.280 --> 00:26:39.060
by some other application,
though,

00:26:39.060 --> 00:26:45.800
because that authorization ref allows
your tool to perform certain operations.

00:26:45.940 --> 00:26:48.980
So you don't want just anyone
being able to grab that.

00:26:49.980 --> 00:26:54.340
Then in your tool, you call
AuthorizationCreateFromExternalForm that

00:26:54.610 --> 00:26:59.900
takes that externalized ref and turns it
back into a regular authorization ref.

00:26:59.900 --> 00:27:02.460
And then your tool calls
AuthorizationCopyrights,

00:27:02.460 --> 00:27:08.260
which will tell you whether or not
the operation is currently allowed.

00:27:08.300 --> 00:27:11.290
When your tool makes that call,
it should also pass in

00:27:11.290 --> 00:27:12.650
the flag to allow UI.

00:27:12.700 --> 00:27:14.460
The UI won't actually
happen in your tool.

00:27:14.460 --> 00:27:18.120
The UI will happen as part
of Authorization Services in

00:27:18.120 --> 00:27:21.500
a separate process.

00:27:21.580 --> 00:27:24.270
The reason you want to do it there is,
depending on how the timeouts and

00:27:24.270 --> 00:27:29.470
things like that have been configured,
it might be that the UI isn't

00:27:29.470 --> 00:27:32.010
needed until this point.

00:27:32.780 --> 00:27:36.520
And if copyrights tells you, yes,
it's okay to go ahead and do it,

00:27:36.630 --> 00:27:40.690
then your tool can actually perform
the operation you need to do.

00:27:43.160 --> 00:27:48.530
So,
a little bit more on pre-authorization.

00:27:49.460 --> 00:27:53.610
The application is allowed to
pre-authorize for the rights that

00:27:53.920 --> 00:27:55.920
it is going to need later on.

00:27:55.920 --> 00:28:00.160
You still want the tool itself
to always call copyrights just

00:28:00.160 --> 00:28:03.110
before doing the operation,
and at that point it's

00:28:03.110 --> 00:28:04.070
not pre-authorizing.

00:28:04.200 --> 00:28:07.870
The reason you want to do that,
one reason is it might not

00:28:07.870 --> 00:28:11.320
be possible to pre-authorize
depending on the configuration.

00:28:11.490 --> 00:28:16.580
Another reason is you want to keep
the final call to copyrights as

00:28:16.690 --> 00:28:19.700
close to the operation as possible.

00:28:19.800 --> 00:28:23.700
And in order for--if you
enable audit logging,

00:28:23.820 --> 00:28:26.200
in order for that to work,
you don't want an audit log

00:28:26.200 --> 00:28:29.490
entry when the user just asks
for permission to do something.

00:28:29.560 --> 00:28:32.450
You want the audit log entry
when--you want the log entry

00:28:32.540 --> 00:28:34.000
when it actually happens.

00:28:34.150 --> 00:28:37.900
So you want to be able to distinguish
between someone asking for permission

00:28:37.900 --> 00:28:41.330
to go and change something versus
actually changing something.

00:28:41.680 --> 00:28:46.120
And so the final thing is that it
allows for zero-length timeouts without

00:28:46.120 --> 00:28:49.530
double authentication dialogues.

00:28:52.480 --> 00:28:56.000
So then there's the,
what we call temporary solution

00:28:56.000 --> 00:28:58.050
for third party installers.

00:28:58.240 --> 00:29:03.120
It says temporary because, well,
we know we have to provide something

00:29:03.120 --> 00:29:05.170
and this is all we have right now.

00:29:05.400 --> 00:29:08.410
Going forward,
we'd like to make this more secure

00:29:08.410 --> 00:29:12.930
and potentially require maybe that
your application is signed before this

00:29:12.930 --> 00:29:15.300
is even possible or things like that.

00:29:15.400 --> 00:29:20.200
Right now it doesn't and it's kind of,
we have to put this in because

00:29:20.200 --> 00:29:24.650
it's the only way third parties
can get apps on the system that

00:29:24.650 --> 00:29:26.400
can do privileged operations.

00:29:26.400 --> 00:29:30.300
Using execute with privileges, though,
is potentially dangerous because

00:29:30.300 --> 00:29:33.400
the user doesn't really know
what it is you're about to run.

00:29:33.400 --> 00:29:35.600
It could be a virus,
it could be something that

00:29:35.640 --> 00:29:37.340
destroys the entire hard disk.

00:29:37.400 --> 00:29:41.180
So unless they have some way of
trusting the program that's about to

00:29:41.180 --> 00:29:45.400
be run with execute with privileges,
it's fairly dangerous.

00:29:45.400 --> 00:29:49.910
And we're enhancing the UI to make
the user more and more aware of the

00:29:49.910 --> 00:29:55.400
fact that execute with privileges
is a potentially dangerous thing.

00:29:55.530 --> 00:29:59.400
So we really encourage developers
to not use this over and over again.

00:29:59.400 --> 00:30:02.600
So you don't want to use execute
with privileges every time your app

00:30:02.600 --> 00:30:04.400
turns around and does something.

00:30:04.510 --> 00:30:08.790
It's much better to have a tool
that is set UID root but uses the

00:30:08.910 --> 00:30:15.170
authorization API to make sure that it's
allowed to do what it's about to do.

00:30:15.400 --> 00:30:18.740
By making a regular authorization
call rather than using execute

00:30:18.800 --> 00:30:20.400
with privileges each time.

00:30:21.460 --> 00:30:27.010
So the right you ask for in order to
be able to use execute with privileges,

00:30:27.010 --> 00:30:31.790
which you can preauthorize if you want,
is system.privilege.admin.

00:30:34.790 --> 00:30:42.080
So, some of the things that came up
when Richard and some of the other

00:30:42.080 --> 00:30:47.300
people in our group ended up auditing
code that needed to run as root is,

00:30:47.730 --> 00:30:52.230
People writing tools that
actually end up calling a system

00:30:52.230 --> 00:30:57.280
ten times in a row to call,
like, binchamad or bin-- call

00:30:57.280 --> 00:31:03.860
different standard BSD tools or
actually run shell scripts even.

00:31:04.190 --> 00:31:10.260
And there's--if you're writing a
tool that uses--that runs as root,

00:31:10.390 --> 00:31:12.830
whether that's because it got
run by execute with privileges

00:31:13.160 --> 00:31:19.920
or because it set your ID,
you really need to refer to the

00:31:19.920 --> 00:31:24.350
existing security policies and existing
documentation out there in the Unix

00:31:24.350 --> 00:31:29.230
world about things that you should and
shouldn't do in set your ID root code.

00:31:29.400 --> 00:31:33.920
And amongst those things are
never use system or P open.

00:31:34.090 --> 00:31:36.740
And there's lots and lots
of reasons to not do that,

00:31:36.890 --> 00:31:38.940
and I won't go into details about it.

00:31:39.120 --> 00:31:43.620
But rather than calling user binchamad,
you're better off just calling

00:31:43.620 --> 00:31:45.600
the system called chamad to
do what you need it to do.

00:31:45.600 --> 00:31:46.600
Thank you.

00:31:47.140 --> 00:31:50.050
The other thing is,
and I've mentioned this a couple of

00:31:50.050 --> 00:31:53.400
times and I can't mention it enough,
is you really don't want to run

00:31:53.400 --> 00:31:55.100
your entire application as root.

00:31:55.100 --> 00:31:59.350
You really want to split it up and
run as little code as possible with

00:31:59.350 --> 00:32:04.280
elevated privileges because you want to
be able to audit that code that runs as

00:32:04.280 --> 00:32:07.100
root doesn't have any security holes.

00:32:07.450 --> 00:32:12.610
And finally,
and this is something that we've seen a

00:32:12.610 --> 00:32:20.650
lot of examples of where this went wrong,
is don't rely on credentials being shared

00:32:20.700 --> 00:32:24.050
or timeouts being greater than zero.

00:32:24.100 --> 00:32:29.100
What that means is the way we shipped
the authorization configuration,

00:32:29.100 --> 00:32:32.070
which is something that the
owner of the system or the

00:32:32.070 --> 00:32:36.100
system administrator can change,
we shipped it by default where

00:32:36.100 --> 00:32:36.100
the authorizer can change the
authorization configuration.

00:32:36.100 --> 00:32:37.100
So we shipped it by default
where the authorizer can change

00:32:37.100 --> 00:32:37.100
the authorization configuration.

00:32:37.100 --> 00:32:39.530
credentials are shared,
meaning that if you log

00:32:39.530 --> 00:32:44.710
in as an administrator,
there's the notion of an administrator

00:32:44.710 --> 00:32:47.380
credential floating around in the system.

00:32:47.380 --> 00:32:52.980
Any application that then needs
to do some authorization call,

00:32:53.210 --> 00:32:57.700
based on needing an administrator
username and password,

00:32:57.820 --> 00:33:01.610
will use that shared credential
if the rule for that right says,

00:33:01.710 --> 00:33:04.240
yes,
it's okay to use a shared credential,

00:33:04.240 --> 00:33:06.880
which is really convenient
because it provides a sort

00:33:06.880 --> 00:33:08.380
of single sign-on ability.

00:33:08.480 --> 00:33:10.700
Of course, it's not very secure.

00:33:10.700 --> 00:33:14.500
If you really care about security,
you probably don't want to

00:33:14.500 --> 00:33:16.180
enable that shared flag.

00:33:16.180 --> 00:33:20.000
So you can actually go in and
change that and turn that off.

00:33:20.000 --> 00:33:21.990
Now,
it turns out a lot of applications break

00:33:22.050 --> 00:33:26.030
when you do that because what they do
is they'll create an authorization ref,

00:33:26.030 --> 00:33:29.780
ask for certain privileges,
delete the authorization ref,

00:33:29.780 --> 00:33:31.940
recreate a new one,
and assume that the privileges they

00:33:31.940 --> 00:33:33.250
just asked for are still there.

00:33:33.300 --> 00:33:33.300
So, you can actually do that.

00:33:33.300 --> 00:33:33.300
And then you can actually do that
by using the authorization ref.

00:33:33.300 --> 00:33:33.300
And then you can actually do that
by using the authorization ref.

00:33:33.300 --> 00:33:33.300
And then you can actually do that
by using the authorization ref.

00:33:33.300 --> 00:33:33.300
And then you can actually do that
by using the authorization ref.

00:33:33.300 --> 00:33:33.300
And then you can actually do that
by using the authorization ref.

00:33:33.300 --> 00:33:37.220
And then which actually is only
true if that shared flag is set.

00:33:37.240 --> 00:33:40.340
The same is true for timeouts
being greater than zero.

00:33:40.340 --> 00:33:46.120
That particular use case also assumes
the timeouts are greater than zero,

00:33:46.120 --> 00:33:50.980
but even if you don't rely
on things being shared,

00:33:50.980 --> 00:33:53.060
there's still a number of
applications that rely on

00:33:53.060 --> 00:33:54.940
timeouts being greater than zero,
for example,

00:33:54.940 --> 00:33:58.050
by creating an authorization ref
and calling executeWithPrivages

00:33:58.070 --> 00:33:59.010
five times in a row.

00:33:59.040 --> 00:34:02.600
Well, if you do that,
you might end up with five dialogs

00:34:02.600 --> 00:34:05.760
if the timeout is zero or the
timeout is expired by the time you

00:34:05.760 --> 00:34:07.400
get to the next executeWithPrivages.

00:34:07.480 --> 00:34:13.380
So what you really want to do in a
case like that is run your tool once,

00:34:13.380 --> 00:34:16.690
and instead of running those five
commands with executeWithPrivages,

00:34:16.770 --> 00:34:20.560
have your tool perform those five
things as one high-level operation,

00:34:20.560 --> 00:34:23.260
because it's really one high-level
operation that you're doing.

00:34:23.260 --> 00:34:28.440
It could be something like installing
an application or changing your firewall

00:34:28.450 --> 00:34:30.180
settings or something like that.

00:34:32.130 --> 00:34:33.760
So

00:34:37.860 --> 00:34:42.600
So what you do want to do is whenever
you are using XQ with privileges,

00:34:42.600 --> 00:34:45.790
which you really should try not to do,

00:34:46.240 --> 00:34:51.200
: You want to call that at most once.

00:34:51.220 --> 00:34:56.460
So you never want to have more than
one call to execute privileges in the

00:34:56.560 --> 00:35:00.240
entire lifetime of your application.

00:35:00.240 --> 00:35:04.660
Then another thing is it would be good
if you could test with the most secure

00:35:04.780 --> 00:35:06.940
possible version of ETSI authorization.

00:35:07.040 --> 00:35:13.030
ETSI authorization is the configuration
file that lets you configure what happens

00:35:13.090 --> 00:35:15.890
when a user asks for a particular write.

00:35:16.080 --> 00:35:19.170
And I'll show you an example
of the most secure possible

00:35:19.170 --> 00:35:21.990
Azure authorization in the next slide.

00:35:22.060 --> 00:35:25.750
If you set that in Azure authorization
and your app still works and

00:35:25.750 --> 00:35:28.650
only asks for the password once,
then you're fine.

00:35:28.790 --> 00:35:30.290
I've tried it with a number
of things that use it,

00:35:30.400 --> 00:35:36.990
and some of them end up asking for
the password 12 times in a row.

00:35:37.610 --> 00:35:39.040
When you're defining
writes or write names,

00:35:39.040 --> 00:35:42.760
you want to define them for
user-initiated operations,

00:35:42.900 --> 00:35:45.260
not for low-level system operations.

00:35:45.380 --> 00:35:47.720
So in the example of Finder,
you want to define a write

00:35:47.740 --> 00:35:51.100
for system.finder.emptytrash.

00:35:51.130 --> 00:35:54.580
You don't want to define a write
for system.finder.deleteFile,

00:35:54.690 --> 00:35:56.860
at least not for the
emptying the trash case.

00:35:56.950 --> 00:36:01.150
You might have that in a different
place if you actually want to be

00:36:01.150 --> 00:36:04.730
able to delete a file from a place
where you couldn't normally write.

00:36:04.880 --> 00:36:10.350
But if you're doing something,
you don't want to use a write like ask

00:36:10.360 --> 00:36:14.800
for permission to delete one file every
time you delete a file from your trash.

00:36:17.220 --> 00:36:19.650
Here's the ANSI authorization.

00:36:19.960 --> 00:36:23.540
It starts with the plist blurb.

00:36:23.720 --> 00:36:29.360
Then the authorization file is actually
nothing more than a dictionary where

00:36:29.610 --> 00:36:32.650
the keys are prefixes to write names.

00:36:32.970 --> 00:36:38.360
and the values are some of
the following keys-- group.

00:36:38.360 --> 00:36:40.670
The value itself is another dictionary,
and that dictionary

00:36:40.670 --> 00:36:41.720
contains a couple of keys.

00:36:41.760 --> 00:36:45.770
Now, this one, there's the empty key,
which basically matches

00:36:45.780 --> 00:36:47.090
every single write.

00:36:47.150 --> 00:36:50.530
Maps to dictionary,
which requires group admin,

00:36:50.540 --> 00:36:54.640
which basically requires you to enter a
password of a user in the admin group.

00:36:54.710 --> 00:36:58.060
The shared flag is false,
which means that if you

00:36:58.060 --> 00:37:01.870
authenticate in one application,
you won't automatically

00:37:01.870 --> 00:37:04.780
unlock in another application,
and the timeout is set to zero,

00:37:04.800 --> 00:37:10.850
which means that as soon as you make
this call to the authorization API,

00:37:10.970 --> 00:37:14.560
the credential that you obtain
during that call is only

00:37:14.560 --> 00:37:17.280
valid during that computation,
and it's discarded

00:37:17.280 --> 00:37:19.750
immediately afterwards,
which means that every

00:37:19.750 --> 00:37:21.830
time you do something,
the user would have to enter

00:37:21.830 --> 00:37:23.360
his administrator password.

00:37:23.480 --> 00:37:26.960
Now, that's the most paranoid
configuration you can choose,

00:37:27.100 --> 00:37:30.490
but it would be good if you're using
authorization service to actually

00:37:30.500 --> 00:37:33.790
test with this configuration to
make sure your app still behaves

00:37:33.790 --> 00:37:38.240
reasonably under these circumstances.

00:37:40.010 --> 00:37:43.810
So, to go back, rights,
like I said before,

00:37:43.860 --> 00:37:46.420
rights are not capabilities.

00:37:46.860 --> 00:37:52.300
So, it's up to you as the application
developer to develop a tool that

00:37:52.310 --> 00:37:55.320
turns that right into a capability.

00:37:55.630 --> 00:37:59.660
Your tool that runs those privileges
basically makes it into a capability.

00:37:59.690 --> 00:38:02.100
Authorization Services itself doesn't.

00:38:03.170 --> 00:38:07.200
Um, don't run your entire
application as root,

00:38:07.200 --> 00:38:11.290
but limit it to a small
component of your application.

00:38:11.290 --> 00:38:11.290
Can't say that enough.

00:38:11.820 --> 00:38:14.230
When you do that,
you create an authorization ref,

00:38:14.230 --> 00:38:17.630
externalize it, pass it to your tool,
and then check for the

00:38:17.630 --> 00:38:19.310
privileges in your tool.

00:38:19.680 --> 00:38:22.240
and try and keep the amount
of code that runs with UID0

00:38:22.240 --> 00:38:24.780
as small as you possibly can.

00:38:25.290 --> 00:38:30.250
And finally, never run shell scripts,
never call system,

00:38:30.290 --> 00:38:34.200
never call P open in code
that's running as root.

00:38:34.270 --> 00:38:37.960
And in addition to that,
check out some of the documentation

00:38:37.960 --> 00:38:40.610
that's around for BSD and
some other Unix systems about

00:38:40.610 --> 00:38:45.880
writing code running as root,
and some of the do's and don'ts there,

00:38:46.020 --> 00:38:49.710
like checking for buffer
overruns and things like that.

00:38:51.100 --> 00:38:55.500
And so finally we have some resources.

00:38:55.500 --> 00:38:59.470
There's the developer.apple.com
security page,

00:38:59.480 --> 00:39:04.340
which I believe has a link to
the now available documentation

00:39:04.340 --> 00:39:06.890
on Authorization Services.

00:39:07.020 --> 00:39:11.890
And there's CDSA 2.0,
which is all of our security APIs are

00:39:11.890 --> 00:39:16.430
basically layered on top of CDSA,
which is an open group standard

00:39:17.180 --> 00:39:19.210
cryptographic interface.

00:39:19.300 --> 00:39:21.220
It's worth checking out.

00:39:21.520 --> 00:39:22.830
And the PCC.

00:39:22.880 --> 00:39:26.340
This is some of the other
things our group is working on.

00:39:26.780 --> 00:39:32.700
Then there's some other sessions where
you can check out some of these things.

00:39:32.850 --> 00:39:36.800
Tomorrow--no, sorry,
all our other sessions are on Thursday,

00:39:36.800 --> 00:39:39.700
so you can enjoy security
all day Thursday.

00:39:40.010 --> 00:39:42.680
Thursday morning,
there's a talk about CDSA,

00:39:42.760 --> 00:39:46.780
and we'll go over CDSA in general,
about the cryptographic

00:39:46.820 --> 00:39:49.700
services in there,
support for certificates,

00:39:49.970 --> 00:39:53.700
support for making trust decisions,
things like that.

00:39:53.700 --> 00:39:59.240
After that, there's a session about our
higher-level APIs layered on top of

00:39:59.240 --> 00:40:04.800
CDSA for managing X.509 certificates,
for managing trust,

00:40:04.800 --> 00:40:08.690
storing certificates in keychains,
and things like that,

00:40:08.780 --> 00:40:11.700
and generating keys, storing keys,
et cetera.

00:40:11.800 --> 00:40:15.470
And then in the afternoon,
there's a feedback forum,

00:40:15.470 --> 00:40:19.100
and after the feedback forum,
there's a related session

00:40:19.110 --> 00:40:22.700
about Kerberos and Mac OS X,
which I encourage you all to go and see,

00:40:22.700 --> 00:40:26.700
where we'll show some of the--I believe
we'll show some of the integration

00:40:26.700 --> 00:40:30.700
between the authorization API and
Kerberos and how that enables Kerberos,

00:40:30.700 --> 00:40:32.550
like, in login window.