WEBVTT

00:00:02.510 --> 00:00:04.400
Good afternoon.

00:00:04.510 --> 00:00:07.070
Welcome to session 300,
Introduction to Cocoa.

00:00:07.070 --> 00:00:11.130
And this is a kickoff to an entire
track dedicated to what I and many

00:00:11.130 --> 00:00:15.100
others in the room believe to be the
best development platform for Mac OS X.

00:00:15.100 --> 00:00:17.960
We've got a lot to talk about
in a short period of time.

00:00:17.960 --> 00:00:21.490
Since this is the intro session,
we are not going to have Q&A.

00:00:21.490 --> 00:00:24.290
We're going to run the
full length of the session,

00:00:24.320 --> 00:00:25.690
let you get out of here.

00:00:25.690 --> 00:00:28.320
I know for the first day,
probably some of you are

00:00:28.480 --> 00:00:29.980
tired from your travels out,
so let's go ahead and get started.

00:00:33.820 --> 00:00:34.800
My name is Heather Hickman.

00:00:34.800 --> 00:00:38.800
I'm the Cocoa evangelist in the Worldwide
Developer Relations Organization,

00:00:38.870 --> 00:00:43.040
and I by far believe I've had the
coolest job at Apple over the last year.

00:00:43.070 --> 00:00:46.690
That is working with you, developers,
in evangelizing Cocoa.

00:00:50.000 --> 00:00:52.500
We're going to talk a little
bit today about what Cocoa is.

00:00:52.580 --> 00:00:55.100
For many of you,
this is going to be a bit of a review.

00:00:55.100 --> 00:00:57.200
I know you've probably
been looking into Cocoa.

00:00:57.200 --> 00:00:59.760
You must be under a rock if you
haven't heard what Cocoa is yet.

00:00:59.960 --> 00:01:01.090
But, so just bear with me.

00:01:01.220 --> 00:01:04.340
We do have a few surprises in mind
for you folk that are familiar

00:01:04.340 --> 00:01:08.360
already with Objective-C and memory
management and Foundation and AppKit.

00:01:08.460 --> 00:01:14.090
But my assumption is that many of
you have been so consumed in your

00:01:14.140 --> 00:01:17.230
development efforts and bringing
your applications over from Mac OS 9

00:01:17.550 --> 00:01:20.460
that you really haven't had a chance
to take a closer look at Cocoa.

00:01:20.690 --> 00:01:24.220
And this week is going to be
an amazing experience for you,

00:01:24.220 --> 00:01:25.220
so welcome.

00:01:25.520 --> 00:01:27.190
So now a little bit about Cocoa.

00:01:27.190 --> 00:01:29.800
I'm going to go really quickly
because we do have a lot to cover.

00:01:29.800 --> 00:01:32.840
It's a powerful, full-featured,
easy-to-use object-oriented

00:01:32.840 --> 00:01:34.800
development environment for Mac OS X.

00:01:37.500 --> 00:01:41.260
And what that means is rapid
development for you as a developer

00:01:41.530 --> 00:01:43.360
and increased productivity.

00:01:43.400 --> 00:01:46.870
I am seeing amazing things being
done by leveraging the frameworks in

00:01:46.870 --> 00:01:49.460
the developer community right now.

00:01:49.590 --> 00:01:52.280
Students who are developing in Cocoa,
seeing amazing work done.

00:01:52.280 --> 00:01:55.960
We probably all have some application on
our desktop at this time that's written

00:01:56.090 --> 00:01:59.440
by someone under the age of 18 years old.

00:01:59.500 --> 00:02:01.900
It's absolutely amazing.

00:02:04.550 --> 00:02:07.520
The point I'd like to drive home today,
and I hope that you see,

00:02:07.520 --> 00:02:11.740
is that with a little bit of effort
and a lot of creativity on your part,

00:02:11.850 --> 00:02:15.490
I really believe you could have
the next killer application for

00:02:15.560 --> 00:02:17.390
Mac OS X by the end of the year.

00:02:17.400 --> 00:02:19.750
It sounds aggressive,
but some of you are probably

00:02:19.750 --> 00:02:23.400
already leveraging the frameworks,
seeing the benefits that Cocoa provides,

00:02:23.510 --> 00:02:25.290
and you can probably attest to this.

00:02:25.400 --> 00:02:28.750
And I encourage each of you to talk to
other developers here at the conference

00:02:28.850 --> 00:02:30.440
and get the point across as well.

00:02:30.440 --> 00:02:31.180
Cocoa rocks.

00:02:31.180 --> 00:02:32.040
Who thinks so?

00:02:38.880 --> 00:02:40.680
Oh, anyone seen this before?

00:02:40.680 --> 00:02:43.300
Mac OS X system architecture diagram.

00:02:43.300 --> 00:02:45.860
You can see what Cocoa is,
peer to the other

00:02:46.220 --> 00:02:48.600
frameworks on the system,
Java, Carbon.

00:02:50.390 --> 00:02:53.460
So what you're going to learn today is a
little bit about what makes Cocoa unique,

00:02:53.820 --> 00:02:57.320
what is this language called Objective-C,
what is in the Foundation and

00:02:57.320 --> 00:03:00.240
AppKit frameworks,
and then find out a little bit more

00:03:00.240 --> 00:03:04.000
about resources and opportunities
for you to find out more about Cocoa.

00:03:05.810 --> 00:03:11.000
Now, if you've been looking at the
press releases about the show,

00:03:11.000 --> 00:03:14.640
there's been an exciting announcement
as far as Cocoa development

00:03:14.640 --> 00:03:16.280
goes and the Code Warrior tools.

00:03:16.280 --> 00:03:19.600
And to talk more about that,
please welcome to the stage lead

00:03:19.720 --> 00:03:23.340
technical engine—lead technical—no,
what are you?

00:03:23.560 --> 00:03:27.250
You're a technical lead for Mac OS Tools,
Matt Henderson from MetroWorks.

00:03:32.200 --> 00:03:33.200
Hi.

00:03:33.200 --> 00:03:33.490
Thanks, Heather.

00:03:33.510 --> 00:03:36.530
So I'm just going to
give you a quick demo.

00:03:36.530 --> 00:03:40.580
Well, where's my slides?

00:03:44.600 --> 00:03:46.890
Well, I had a slide,
but I guess I've got a demo now.

00:03:47.020 --> 00:03:51.060
So, I hope many of you are already
familiar with CodeWarrior,

00:03:51.060 --> 00:03:54.350
and I hope many of you are obviously
here to become familiar with Cocoa.

00:03:54.360 --> 00:03:57.290
And we're pleased to announce
with the upcoming 8.0 release that

00:03:57.290 --> 00:03:58.850
CodeWarrior now supports Cocoa.

00:03:58.860 --> 00:04:02.680
We've worked very closely with
the Apple Cocoa and Interface

00:04:02.680 --> 00:04:07.150
Builder team to achieve fairly
straightforward integration between

00:04:07.150 --> 00:04:11.030
Interface Builder and CodeWarrior,
so you can use CodeWarrior for

00:04:11.270 --> 00:04:14.060
your build system and Interface
Builder to build your UI.

00:04:14.600 --> 00:04:17.720
And I have here your standard
CodeWarrior project that actually

00:04:17.720 --> 00:04:19.320
builds a simple Cocoa demo.

00:04:19.320 --> 00:04:22.310
And as you see,
we have the usual mainmenu.nib.

00:04:22.310 --> 00:04:23.150
Double-click it.

00:04:23.220 --> 00:04:27.880
It opens the new version of Interface
Builder from the April tool CD.

00:04:31.810 --> 00:04:35.050
So just to show you
some of the integration,

00:04:35.050 --> 00:04:37.700
we have one image here already.

00:04:37.700 --> 00:04:44.690
And we'll go add an image
to the Code Warrior project.

00:04:45.950 --> 00:04:48.440
and just like that,
it's in Interface Builder.

00:04:48.610 --> 00:04:50.270
So we can...

00:04:52.700 --> 00:05:02.100
[Transcript missing]

00:05:04.640 --> 00:05:07.640
In regular Cocoa development,
then run it from Codeware.

00:05:07.640 --> 00:05:10.360
And we're building the
Objective-C stuff and everything.

00:05:10.360 --> 00:05:11.600
You know, all we fix, we have.

00:05:11.600 --> 00:05:16.750
Well, that missed a slide.

00:05:20.380 --> 00:05:25.060
Had the demo gone well,
it would have run.

00:05:25.060 --> 00:05:26.490
We failed,
and I should be doing push-ups.

00:05:26.670 --> 00:05:29.500
But nevertheless,
the point is that Cocoa and Interface

00:05:29.500 --> 00:05:31.340
Builder have been integrated.

00:05:31.340 --> 00:05:33.700
I'm not sure why the demo goofed up.

00:05:33.760 --> 00:05:35.220
But try out our 8.0 release.

00:05:35.220 --> 00:05:37.880
You'll find that there are a
lot of advantages for using

00:05:38.120 --> 00:05:42.150
Cocoa with Code Warrior,
and it'll even further increase

00:05:42.160 --> 00:05:44.500
your productivity above and
beyond what you do with Cocoa.

00:05:44.640 --> 00:05:46.530
Thank you very much.

00:05:54.610 --> 00:05:56.030
So this is what Matt was going to say.

00:05:56.030 --> 00:06:01.270
Would you like to come up
and speak to your slides?

00:06:01.360 --> 00:06:02.920
Yeah, come on up.

00:06:02.960 --> 00:06:05.390
Welcome Matt up to the stage.

00:06:08.040 --> 00:06:11.500
Okay, well, just a brief history.

00:06:11.500 --> 00:06:14.580
We actually,
back in the early days of Rhapsody,

00:06:14.580 --> 00:06:17.000
we added Objective-C support
to our compiler.

00:06:17.000 --> 00:06:21.530
And it's been sort of
sitting there since then.

00:06:21.530 --> 00:06:24.800
It was either late 1997 or early 1998.

00:06:24.800 --> 00:06:26.690
So we haven't really
marketed Cocoa support,

00:06:26.690 --> 00:06:29.730
even though technically we had all
the compiler fundamentals to do it.

00:06:29.820 --> 00:06:35.270
With CodeWarrior IDE 5.0 and CodeWarrior
8 that we're releasing later this month,

00:06:35.310 --> 00:06:37.890
we finally added long file name support.

00:06:38.000 --> 00:06:41.020
The biggest holdup for building
Cocoa was that there were a few

00:06:41.140 --> 00:06:44.280
header files in Cocoa that had
more than 31 character file names,

00:06:44.280 --> 00:06:46.260
which was a limitation of old Mac OS.

00:06:46.260 --> 00:06:48.260
So we fixed that.

00:06:48.920 --> 00:06:51.680
And so now we can build
Cocoa without any problems.

00:06:51.700 --> 00:06:54.570
And as I just tried to
demonstrate was IDE 5.0

00:06:54.580 --> 00:06:56.920
integrates with Interface Builder.

00:06:56.920 --> 00:06:57.990
And it actually does work.

00:06:57.990 --> 00:06:59.910
And I hope you all get the
opportunity to try it out.

00:06:59.980 --> 00:07:02.620
And the demonstration.

00:07:02.640 --> 00:07:07.980
And then we have a number
of events during the show.

00:07:08.000 --> 00:07:10.850
We have a MetroWorks lunch presentation
tomorrow where we're talking a

00:07:10.850 --> 00:07:12.940
little bit about the same stuff.

00:07:13.030 --> 00:07:17.430
We'll have a Birds of a Feather
presentation tomorrow night

00:07:17.560 --> 00:07:20.250
where you have the opportunity to
ask us about whatever you want,

00:07:20.260 --> 00:07:20.990
including Cocoa support.

00:07:21.000 --> 00:07:23.180
We'll have a lot of the CodeWarrior
engineers there talking.

00:07:23.180 --> 00:07:26.610
Open all, not open all week,
but open Tuesday and Wednesday,

00:07:26.610 --> 00:07:30.140
we'll have a CodeWarrior lounge
where you can come and hang out.

00:07:30.140 --> 00:07:31.760
We'll have a pool table.

00:07:31.760 --> 00:07:33.710
And finally, there's a MetroWorks
booth in the exhibit hall.

00:07:33.710 --> 00:07:35.120
And with that,
I'll give it back to Heather.

00:07:35.120 --> 00:07:36.090
Thank you very much.

00:07:40.600 --> 00:07:42.500
and all are going to
get tired of seeing me,

00:07:42.500 --> 00:07:43.160
I'm sorry.

00:07:43.160 --> 00:07:46.550
Next, I'd like to welcome to the stage
someone near and dear to my heart,

00:07:46.550 --> 00:07:46.880
Mr.

00:07:46.880 --> 00:07:48.140
Project Builder.

00:07:48.140 --> 00:07:48.900
Can I say that?

00:07:48.950 --> 00:07:49.600
I won't.

00:07:49.650 --> 00:07:50.570
Forget that I said that.

00:07:50.920 --> 00:07:53.590
Please welcome Mike Ferris.

00:08:10.720 --> 00:08:12.170
is the, yeah, the mic is on.

00:08:12.320 --> 00:08:12.970
Okay, great.

00:08:13.330 --> 00:08:13.580
Hi.

00:08:13.580 --> 00:08:17.370
So, first I want to say that it's
really great to see that CodeWarrior

00:08:17.400 --> 00:08:21.160
is finally supporting Cocoa,
and actually, the demo was running,

00:08:21.160 --> 00:08:25.360
it's just that IB's connection lines were
sitting on top of his running app window,

00:08:25.360 --> 00:08:26.440
so it was working.

00:08:28.440 --> 00:08:31.570
I look forward, actually,
to digging into the Code Warrior when

00:08:31.570 --> 00:08:34.420
it gets released and playing around
a little bit with the Cocoa support.

00:08:35.990 --> 00:08:40.980
So, I'm actually not here today to tell
you about how to use Project Builder

00:08:40.990 --> 00:08:43.140
to develop Cocoa applications.

00:08:43.140 --> 00:08:47.200
Instead, what I want to talk to you
about today is the fact that

00:08:47.370 --> 00:08:49.560
Project Builder is a Cocoa application.

00:08:51.450 --> 00:08:53.520
There'll be sessions later in the week,
Wednesday.

00:08:53.520 --> 00:08:56.900
There's session 903,
Exploring Project Builder,

00:08:56.900 --> 00:08:59.690
if you actually want to
learn how to use our tools.

00:09:05.740 --> 00:09:08.610
Basically,
let me start by giving a little

00:09:08.620 --> 00:09:11.900
bit of an overview of the
structure of Project Builder.

00:09:12.220 --> 00:09:13.840
Project Builder is a pretty big system.

00:09:13.840 --> 00:09:17.360
It's made up of several
different products.

00:09:17.400 --> 00:09:19.300
There's the application itself.

00:09:19.390 --> 00:09:22.880
There's probably about a half
a dozen frameworks that we use,

00:09:22.940 --> 00:09:28.160
another 10 or 12 plug-in bundles,
various command line tools, scripts,

00:09:28.270 --> 00:09:31.880
build system implementation scripts,
all kinds of things.

00:09:31.910 --> 00:09:34.740
We build this with
Project Builder projects,

00:09:34.740 --> 00:09:39.650
and there are about seven of
them that make up the entire IDE.

00:09:39.890 --> 00:09:42.680
The reason that there are seven
is that we want to split our

00:09:42.680 --> 00:09:44.470
projects basically along layers.

00:09:44.560 --> 00:09:48.660
So we have a project that has
all of the lower-level stuff,

00:09:48.660 --> 00:09:51.960
and then one that has all the UI stuff,
and so on and so forth.

00:09:54.690 --> 00:09:58.040
This gives you an idea of the
magnitude of Project Builder.

00:09:58.040 --> 00:10:02.030
Under 300,000 lines of
code in Project Builder.

00:10:02.040 --> 00:10:07.310
The reason that there are under 300,000
lines of code in Project Builder is

00:10:07.340 --> 00:10:10.210
because most of the code is in Cocoa.

00:10:11.140 --> 00:10:13.540
And that's really the point of
what I want to say to you today,

00:10:13.540 --> 00:10:20.950
is that we are able to go as quickly
with Project Builder in terms of

00:10:20.950 --> 00:10:27.640
adding new features and really moving
it forward because we get to leverage

00:10:27.640 --> 00:10:30.110
all the stuff that is in Cocoa.

00:10:32.230 --> 00:10:35.330
So, the title of this slide is
meant to bring to your minds

00:10:35.340 --> 00:10:36.460
a couple of different quotes.

00:10:36.460 --> 00:10:41.220
There's, you know,
on the subject of leverage, Archimedes,

00:10:41.220 --> 00:10:44.590
who said, give me a place to stand
and I can move the world.

00:10:44.600 --> 00:10:50.730
And Sir Isaac Newton said,
if I've seen farther than others,

00:10:50.730 --> 00:10:52.840
it's because I'm standing
on the shoulders of giants.

00:10:55.730 --> 00:10:59.010
Now, actually, Brian Reed once said,
in computer science,

00:10:59.040 --> 00:11:00.840
we stand on each other's feet.

00:11:04.640 --> 00:11:07.370
And I think that Cocoa actually
provides an exception to that rule.

00:11:07.370 --> 00:11:10.740
Cocoa is a giant,
and you can stand on its shoulders.

00:11:12.460 --> 00:11:16.290
These are a few of the classes
in Project Builder that we

00:11:16.290 --> 00:11:20.870
actually use a lot in... Sorry,
a few of the classes in Cocoa that

00:11:20.870 --> 00:11:22.400
we use a lot in Project Builder.

00:11:22.480 --> 00:11:25.240
Not just use,
but we actually subclass and extend

00:11:25.240 --> 00:11:27.500
these things in significant ways.

00:11:27.950 --> 00:11:31.100
You know, we use window controllers
all over the place.

00:11:31.100 --> 00:11:34.910
We use the document system both
for project documents and for file

00:11:34.910 --> 00:11:36.740
documents for the file editor.

00:11:36.800 --> 00:11:40.960
We use the text system
for our code editing.

00:11:40.990 --> 00:11:43.500
You know,
we've added things like syntax coloring,

00:11:43.560 --> 00:11:46.820
auto-indentation,
all kinds of things fairly

00:11:46.820 --> 00:11:49.460
easily to the Cocoa text system.

00:11:50.000 --> 00:11:52.460
We have a lot of extensions
to the tables and outlines.

00:11:52.460 --> 00:11:55.130
We use split views.

00:11:55.130 --> 00:11:58.400
In fact,
that sliding tab thing in Project Builder

00:11:58.400 --> 00:12:00.190
is actually a subclass of NS Split View.

00:12:02.230 --> 00:12:07.820
We make a lot of use of the property
list stuff and key value coding and

00:12:07.820 --> 00:12:10.610
other foundation facilities in Cocoa.

00:12:10.650 --> 00:12:16.400
So I guess the main point here is
that we feel that we get a lot of

00:12:16.470 --> 00:12:20.010
leverage out of being on top of Cocoa.

00:12:22.040 --> 00:12:24.880
I've been doing Cocoa programming
for about 13 or 14 years now,

00:12:24.880 --> 00:12:28.680
and I'm not sure that I would
do programming at this point

00:12:28.680 --> 00:12:30.100
if I couldn't do it in Cocoa.

00:12:30.160 --> 00:12:32.530
So, that's really all I wanted to say.

00:12:35.930 --> 00:12:36.510
Oh, you know what?

00:12:36.620 --> 00:12:38.000
Actually,
there's one more thing I wanted to say.

00:12:38.000 --> 00:12:42.820
We do have several sessions if you do
want to learn about Project Builder.

00:12:42.820 --> 00:12:45.300
There's a 903 Exploring Project Builder.

00:12:45.300 --> 00:12:48.190
There's also 908,
which is a more advanced talk that

00:12:48.190 --> 00:12:50.310
focuses on delivery of your products.

00:12:50.420 --> 00:12:54.380
And then, actually,
a related thing is AppleScript Studio.

00:12:54.380 --> 00:12:58.200
AppleScript Studio is very
related to Project Builder,

00:12:58.200 --> 00:13:00.440
and Interface Builder is
also very related to Cocoa.

00:13:00.440 --> 00:13:03.340
And if you haven't looked at it at all,
I'd really urge you to go see this

00:13:03.350 --> 00:13:05.200
presentation because it's really cool.

00:13:15.540 --> 00:13:19.480
So Project Builder is an example of a
Cocoa application built specifically

00:13:19.590 --> 00:13:21.860
for you guys to develop in Cocoa.

00:13:21.860 --> 00:13:24.890
I thought it'd also be cool to have
representation here from one of our

00:13:24.900 --> 00:13:28.640
engineering teams who actually develops
applications for our customers.

00:13:28.640 --> 00:13:33.380
And this is one of the coolest
applications on the system today.

00:13:33.380 --> 00:13:36.410
I'd like you to please welcome
someone who graciously accepted

00:13:36.410 --> 00:13:39.500
to come and talk about their
Cocoa development experiences,

00:13:39.520 --> 00:13:44.570
Senior Director of New Media Engineering,
Freddie Geier.

00:13:52.300 --> 00:13:55.460
Thanks for the introduction, Heather.

00:13:55.500 --> 00:13:58.560
And as you can hear,
I am not a native English speaker,

00:13:58.560 --> 00:14:01.810
so excuse my really bad English accent.

00:14:01.820 --> 00:14:08.580
Let me share with you just a few words on
the experience we made with Cocoa so far.

00:14:08.580 --> 00:14:16.690
After finishing iDVD1 in February 2001,
the DVD engineering team, by the way,

00:14:16.690 --> 00:14:20.600
all traditional Macintosh
developers at that time,

00:14:21.240 --> 00:14:26.390
reconceived their future development
plans for the next major product releases

00:14:26.410 --> 00:14:29.020
on 10 for iDVD and DVD Studio Pro.

00:14:29.020 --> 00:14:33.750
And as a matter of fact, first of all,
we thought carbonizing

00:14:33.760 --> 00:14:36.060
might be the simplest way.

00:14:36.060 --> 00:14:40.000
But on the other hand,
we had the feeling that this

00:14:40.420 --> 00:14:44.790
approach might be not the right
way to go if you want to develop

00:14:44.790 --> 00:14:47.220
a future-oriented application.

00:14:47.220 --> 00:14:51.020
So we decided to survey an alternative.

00:14:51.020 --> 00:14:55.580
Of course, which is objective-oriented
programming in Cocoa.

00:14:55.580 --> 00:15:00.450
After two weeks of critical
investigations and believe me,

00:15:00.450 --> 00:15:06.080
hours and hours and sometimes nights
of discussions how to proceed,

00:15:06.080 --> 00:15:11.080
it was clear to us that we
don't want to compromise.

00:15:13.140 --> 00:15:23.170
We took the challenge to learn a new
language and started the development of

00:15:23.240 --> 00:15:26.020
our new project in the Cocoa environment.

00:15:26.020 --> 00:15:29.920
Only after seven months,
we released iDVD,

00:15:29.920 --> 00:15:34.800
and hopefully you agree the
app is truly succeeding.

00:15:36.000 --> 00:15:38.300
Living now with Cocoa for
more than a year,

00:15:38.300 --> 00:15:40.990
we are still convinced
that shifting into,

00:15:41.210 --> 00:15:45.540
for us, a new development model was
a really smart decision.

00:15:45.540 --> 00:15:51.040
Today, on daily purpose,
we take benefit of the dynamic binding,

00:15:51.040 --> 00:15:56.720
of much better memory management,
event modeling, app kit,

00:15:56.720 --> 00:16:00.680
and other just native OS X capabilities.

00:16:00.680 --> 00:16:03.490
So my advice to you, go with Cocoa.

00:16:03.800 --> 00:16:04.100
Thanks.

00:16:13.700 --> 00:16:18.790
and Matt Lange,
and I'm going to introduce

00:16:18.790 --> 00:16:21.690
you to the Cocoa APIs.

00:16:24.110 --> 00:16:26.250
So,
something else that I've done over the

00:16:26.250 --> 00:16:30.680
past year as Cocoa evangelist is be list
mom to the Cocoa Dev discussion lists.

00:16:30.800 --> 00:16:34.660
And I don't know how many
of you subscribe and post,

00:16:34.710 --> 00:16:37.620
but oftentimes,
when I see something interesting come up,

00:16:37.690 --> 00:16:39.830
I would just email the
person back off the list,

00:16:39.980 --> 00:16:42.500
of course,
and ask for or solicit more feedback.

00:16:42.500 --> 00:16:47.420
And something I've heard over and
over again from Cocoa developers

00:16:47.800 --> 00:17:00.300
[Transcript missing]

00:17:01.200 --> 00:17:06.830
So I'd like to welcome to the stage
now Adrian Baerlocher from the

00:17:06.840 --> 00:17:11.720
QuickTime engineering team to speak
about QuickTime and Cocoa development.

00:17:16.500 --> 00:17:18.200
Hi,
so I'm actually going to talk a little

00:17:18.200 --> 00:17:20.320
bit about QuickTime Broadcaster.

00:17:20.350 --> 00:17:24.510
This is a new application we're
working on that lets you broadcast live

00:17:24.520 --> 00:17:27.860
events using Mac OS X and a DV camera.

00:17:27.860 --> 00:17:30.190
You can try it out for yourself.

00:17:30.200 --> 00:17:33.020
It comes installed with Jaguar Server.

00:17:33.020 --> 00:17:35.680
It's one of the CDs you'll
receive here this week,

00:17:35.750 --> 00:17:38.460
or I guess two of the
CDs you'll receive here.

00:17:38.460 --> 00:17:43.340
So QuickTime Broadcaster is a
Cocoa application that uses many

00:17:43.340 --> 00:17:46.180
different components in QuickTime.

00:17:46.440 --> 00:17:51.260
Including the sequence grabber,
standard compression, and broadcast APIs.

00:17:51.260 --> 00:17:55.860
We basically writ a set of
Objective-C classes that sits on

00:17:56.010 --> 00:17:59.220
top of these QuickTime components.

00:18:03.390 --> 00:18:08.290
As you can see from the screenshot,
we're not using any of QuickTime's

00:18:08.300 --> 00:18:10.480
Carbon modal dialogues.

00:18:10.480 --> 00:18:16.280
They're all native
Cocoa NS controls and views.

00:18:16.280 --> 00:18:20.160
And one of the great benefits of using
Cocoa is that we were able to prototype

00:18:20.160 --> 00:18:22.090
many different user interfaces.

00:18:22.110 --> 00:18:26.080
For this app alone,
we probably did like half a dozen.

00:18:26.110 --> 00:18:31.540
And most of them were functional.

00:18:31.540 --> 00:18:35.450
And I can speak from personal experience
that Cocoa is very easy to learn

00:18:35.450 --> 00:18:38.890
because basically six months ago,
I didn't know Cocoa.

00:18:38.890 --> 00:18:43.080
And I learned it in that time
and wrote this application.

00:18:43.080 --> 00:18:45.380
So it's a lot of fun.

00:18:45.490 --> 00:18:47.710
The classes are very consistent.

00:18:47.710 --> 00:18:50.300
The framework's very easy to extend.

00:18:50.300 --> 00:18:53.790
And the QuickTime team is
very excited about Cocoa.

00:18:54.680 --> 00:18:58.900
If you'd like to learn more about
QuickTime and QuickTime in Cocoa,

00:18:58.900 --> 00:19:01.100
here's a few great sessions to consider.

00:19:01.100 --> 00:19:06.220
The State of QuickTime in 2002
is an overview of QuickTime over

00:19:06.220 --> 00:19:09.900
the past 10 years and where
we're heading in the future.

00:19:09.900 --> 00:19:13.810
Building QuickTime-savvy
apps discusses how to add

00:19:13.870 --> 00:19:18.220
QuickTime to your applications,
whether they be Cocoa or Carbon.

00:19:18.770 --> 00:19:23.360
Finally, if you want hands-on with
a QuickTime engineer,

00:19:23.360 --> 00:19:26.300
there are hands-on
sessions Tuesday to Friday,

00:19:26.300 --> 00:19:27.380
1 to 4.

00:19:27.380 --> 00:19:28.410
These are great.

00:19:28.420 --> 00:19:30.900
You can bring your source code,
your applications,

00:19:30.900 --> 00:19:32.940
and sit down with QuickTime engineers.

00:19:32.940 --> 00:19:36.920
I'll be there all of
Thursday afternoon from 1 to 4.

00:19:36.920 --> 00:19:39.020
If you have any QuickTime and
Cocoa questions,

00:19:39.020 --> 00:19:40.420
I'd be happy to answer them.

00:19:40.430 --> 00:19:41.100
Thanks.

00:19:49.180 --> 00:19:53.030
Hopefully having Adrian join
us is a sign of things to come.

00:19:53.040 --> 00:19:56.100
I welcome your feedback.

00:19:56.100 --> 00:19:58.870
If you would send it to me,
my contact information will

00:19:58.870 --> 00:20:02.020
be on the screen a bit later,
specific to Cocoa and

00:20:02.020 --> 00:20:04.710
QuickTime development.

00:20:06.290 --> 00:20:10.680
Now, I hope you enjoyed that
parade of engineers talking

00:20:11.050 --> 00:20:12.220
about Cocoa development.

00:20:12.220 --> 00:20:15.750
It was my intent just to
have you realize that,

00:20:15.750 --> 00:20:19.750
in many instances,
learning Objective-C and how to

00:20:19.750 --> 00:20:24.000
leverage the frameworks can be
done in a short period of time.

00:20:24.000 --> 00:20:27.800
And it does take that time to get
used to the idea of object-oriented

00:20:27.920 --> 00:20:31.600
programming and some of the classes that
are available to you in the frameworks.

00:20:31.670 --> 00:20:35.480
But after you've got that down,
you can move pretty quickly to do some

00:20:35.480 --> 00:20:37.800
pretty amazing things on the system.

00:20:37.900 --> 00:20:41.490
So now to share more information,
more of that "What is Objective-C?

00:20:41.490 --> 00:20:45.000
What are these frameworks?" and I'll
come back and visit you a bit later,

00:20:45.160 --> 00:20:48.470
please welcome to the
stage Cocoa DTS engineer,

00:20:48.470 --> 00:20:49.710
Matt Formica.

00:20:55.320 --> 00:20:56.700
Thanks, Heather.

00:20:56.880 --> 00:20:59.260
So as Heather said,
my name is Matthew Formica.

00:20:59.290 --> 00:21:00.750
I work in developer relations.

00:21:00.760 --> 00:21:04.060
I support Cocoa,
as well as development tools.

00:21:04.120 --> 00:21:07.290
And if what we've seen so far
today is perhaps the dessert

00:21:07.420 --> 00:21:10.850
portion of the presentation,
now we'll get into some of the dinner,

00:21:10.970 --> 00:21:13.710
and then maybe we'll come back
for some dessert at the end.

00:21:13.780 --> 00:21:15.650
So let's dive right in.

00:21:16.500 --> 00:21:18.970
So,
some of you may be sitting here today and

00:21:18.970 --> 00:21:22.730
you heard a little bit about Cocoa today,
as well as having perhaps

00:21:22.730 --> 00:21:26.230
heard about Cocoa elsewhere,
and you may be thinking, why

00:21:29.310 --> 00:21:32.340
Is Cocoa going to be overly simplistic?

00:21:32.340 --> 00:21:36.470
Is it going to be like perhaps other
frameworks that maybe lock you into

00:21:36.470 --> 00:21:39.850
one way of doing things or force
me to do things in a certain way?

00:21:40.720 --> 00:21:42.910
On the other hand,
some of you may be sitting

00:21:42.910 --> 00:21:45.200
here today thinking,
I've used other frameworks,

00:21:45.290 --> 00:21:47.560
and they all promise to
reduce complexity in code,

00:21:47.560 --> 00:21:52.230
but I still find myself initializing
line after line of this class,

00:21:52.230 --> 00:21:54.830
or that part of the framework,
or that object,

00:21:54.830 --> 00:21:56.580
or hooking up these widgets.

00:21:56.630 --> 00:21:58.750
Isn't Cocoa going to be like that?

00:21:58.790 --> 00:22:02.150
Well, thankfully, I'm here today to tell
you that it's neither.

00:22:10.700 --> 00:22:12.860
Cocoa is certainly full-featured.

00:22:12.870 --> 00:22:15.670
This is, in fact, the class hierarchy,
and if you can read any of

00:22:15.680 --> 00:22:17.700
the class names on there,
you have better eyes than I do.

00:22:19.410 --> 00:22:22.150
Cocoa provides all the classes
and hooks and callbacks you

00:22:22.150 --> 00:22:23.600
might need to customize things.

00:22:23.600 --> 00:22:28.180
But the nice thing is that, in general,
you don't need to actually interact

00:22:28.180 --> 00:22:29.170
with most of these classes.

00:22:29.180 --> 00:22:32.390
They just do their job
while you do your job.

00:22:39.170 --> 00:22:42.690
This is the Cocoa class hierarchy as
you might think about it in your head.

00:22:42.800 --> 00:22:46.140
It actually consists
of two core frameworks:

00:22:46.240 --> 00:22:49.140
Foundation and AppKit.

00:22:49.750 --> 00:22:53.300
On the left, we have Foundation,
which includes NSObject,

00:22:53.340 --> 00:22:56.800
which is the root object of
the Cocoa class hierarchy.

00:22:56.980 --> 00:22:59.170
and foundation consists of
what we generally think of as

00:22:59.170 --> 00:23:01.700
the non-GUI portion of Cocoa.

00:23:01.750 --> 00:23:05.340
It includes such things as
classes for dealing with values,

00:23:05.370 --> 00:23:08.320
collections, and strings,
as well as classes for

00:23:08.470 --> 00:23:11.930
scripting and accessibility and
working with the file system.

00:23:12.100 --> 00:23:24.900
[Transcript missing]

00:23:25.880 --> 00:23:30.120
The areas that are circled in red are the
ones we'll actually focus in on today.

00:23:30.120 --> 00:23:34.000
Strings, collections,
and OS services from Foundation,

00:23:34.000 --> 00:23:38.250
and user interface, text,
and graphics from AppKit.

00:23:38.490 --> 00:23:41.250
But first,
we have to deal with the question,

00:23:41.250 --> 00:23:42.880
which language to use.

00:23:47.590 --> 00:23:51.030
So the Cocoa APIs themselves are
actually provided in two languages,

00:23:51.030 --> 00:23:52.570
Objective-C and Java.

00:23:54.910 --> 00:23:58.450
Objective-C is a dynamic,
highly object-oriented language that's

00:23:58.740 --> 00:24:02.510
time-tested technology and today is a
part of the Free Software Foundation's

00:24:02.520 --> 00:24:04.610
standard GCC compiler distribution.

00:24:06.400 --> 00:24:09.150
Java is similar to Objective-C in
its dynamic nature,

00:24:09.260 --> 00:24:12.240
and so Apple provides what's
known as the Java Bridge,

00:24:12.240 --> 00:24:15.880
Java interfaces to the
native Objective-C APIs.

00:24:17.620 --> 00:24:21.040
One of the nice things about
Objective-C is that it's a mere

00:24:21.050 --> 00:24:23.040
small superset of standard ANSI C.

00:24:23.040 --> 00:24:26.480
So you can take advantage of
your existing C knowledge,

00:24:26.560 --> 00:24:31.960
as well as leverage existing C++ code
you may have in your Cocoa programs,

00:24:31.960 --> 00:24:35.200
while taking advantage of Objective-C,
where it really counts

00:24:35.200 --> 00:24:36.800
when using the native APIs.

00:24:38.900 --> 00:24:41.400
So the question still remains,
which language to use?

00:24:41.400 --> 00:24:45.750
And the answer is really,
use the language that fits your needs.

00:24:47.290 --> 00:24:51.370
If there are critical Java libraries
that you want to interface with,

00:24:51.390 --> 00:24:54.130
or you have an existing
back-end Java engine that you

00:24:54.200 --> 00:24:56.900
want to take advantage of,
you may find that programming

00:24:56.900 --> 00:24:58.230
Cocoa in Java is the way to go.

00:24:59.690 --> 00:25:02.120
On the other hand,
developers who don't have these

00:25:02.120 --> 00:25:06.370
requirements typically find that the
lower runtime overhead and faster

00:25:06.370 --> 00:25:10.470
performance of Objective-C may
get the language of choice.

00:25:11.230 --> 00:25:16.320
Apple supports both Objective-C and
Java for Cocoa development.

00:25:16.320 --> 00:25:20.380
But we'll focus in on Objective-C today,
and I'd like to take you on a

00:25:20.380 --> 00:25:22.030
brief walkthrough of the language.

00:25:26.850 --> 00:25:29.790
I find, when talking with developers,
that many of them feel like

00:25:29.990 --> 00:25:32.920
when they're first starting with
Cocoa and learning Objective-C,

00:25:33.060 --> 00:25:35.920
that they're concerned about a
ramp-up time to learn the language.

00:25:37.510 --> 00:25:40.930
It turns out that most developers can
learn the language in only a few days.

00:25:40.930 --> 00:25:44.390
That's because it's a small
superset of standard ANSI C,

00:25:44.430 --> 00:25:47.780
with some additional syntax to
handle the dynamic object runtime.

00:25:52.490 --> 00:25:55.800
They often find when they're first
starting that they think they have

00:25:55.860 --> 00:25:58.100
to do everything in a special,
objective C way,

00:25:58.100 --> 00:26:02.350
when actually the standard C way of doing
things is often the right way to go.

00:26:07.910 --> 00:26:12.040
So the really unique thing about
Objective-C is that it's a dynamic,

00:26:12.100 --> 00:26:14.320
has a dynamic runtime.

00:26:14.680 --> 00:26:16.950
And it actually takes advantage
of weak typing as well.

00:26:16.950 --> 00:26:21.100
And this allows you to write
powerful callbacks and handlers that

00:26:21.100 --> 00:26:26.120
take objects of generic type ID to
refer to an object of any class.

00:26:27.900 --> 00:26:31.310
Then, using introspection,
another feature of the language,

00:26:31.390 --> 00:26:34.730
we can actually query those objects
at runtime to determine what

00:26:34.730 --> 00:26:38.240
their capabilities are and make
decisions based on that information.

00:26:43.580 --> 00:26:46.380
Here's what you've all been waiting for,
the unique Objective-C syntax.

00:26:46.440 --> 00:26:51.240
It starts with a left bracket,
and then the object that we're

00:26:51.240 --> 00:26:54.650
going to send a message to,
and then the message name,

00:26:55.220 --> 00:26:58.470
followed by a closing
bracket and a semicolon.

00:26:58.470 --> 00:27:02.530
So in this case, my object is the object
we're sending a message to,

00:27:02.530 --> 00:27:05.170
and do something is the
message we're going to send.

00:27:07.250 --> 00:27:08.450
So what's really going on here?

00:27:08.450 --> 00:27:13.240
Well, it's actually a message being sent,
not a function being called.

00:27:13.250 --> 00:27:17.040
At runtime,
the object will receive this message

00:27:17.040 --> 00:27:20.310
and then decide which method to perform.

00:27:22.120 --> 00:27:24.240
It's almost like all methods are virtual.

00:27:24.240 --> 00:27:27.230
However,
the information is actually cached by

00:27:27.230 --> 00:27:29.040
the system as well for performance.

00:27:34.150 --> 00:27:35.700
Here's a couple more
examples of parameters.

00:27:35.700 --> 00:27:41.440
So in the first case,
we're passing one parameter, other obj,

00:27:41.630 --> 00:27:44.910
to the do with this colon message.

00:27:45.140 --> 00:27:48.980
So note that messages that include
parameters end with colons.

00:27:48.980 --> 00:27:52.440
So the complete message is,
do with this colon.

00:27:52.440 --> 00:27:56.910
It takes one parameter, other obj,
and the message is

00:27:56.910 --> 00:27:59.200
being sent to my object.

00:28:00.690 --> 00:28:02.850
In the second example,
we actually have two parameters,

00:28:02.850 --> 00:28:04.850
and this can easily be
extended to n parameters.

00:28:04.860 --> 00:28:09.030
And the interesting thing to note
here is that we actually intersperse

00:28:09.030 --> 00:28:11.380
the message name with the parameters.

00:28:11.380 --> 00:28:16.640
So do with this colon and this
colon is the complete message name.

00:28:18.310 --> 00:28:21.060
This can very much help make
your code more readable.

00:28:21.060 --> 00:28:25.290
Never again do you have to look at a
function call with 10 comma-separated

00:28:25.290 --> 00:28:28.890
numbers and sit there wondering what
each number refers to or trying to

00:28:29.090 --> 00:28:31.190
match the prototype with the invocation.

00:28:35.350 --> 00:28:37.790
Another thing to note here
is the standard naming

00:28:37.790 --> 00:28:39.260
conventions for Cocoa methods.

00:28:39.360 --> 00:28:42.160
Note that the first
word is not capitalized,

00:28:42.160 --> 00:28:44.840
but each word thereafter in the
message name is capitalized.

00:28:47.830 --> 00:28:52.150
So, do with this colon and do with
this and this colon are what's

00:28:52.770 --> 00:28:54.610
actually known as selectors.

00:28:54.700 --> 00:28:57.770
They are messages
independent of any class,

00:28:58.240 --> 00:29:00.700
which you can actually send to any class.

00:29:00.700 --> 00:29:04.800
And often you will need to
construct selectors when working in

00:29:04.800 --> 00:29:08.490
Objective-C and Cocoa for callbacks.

00:29:11.990 --> 00:29:14.170
Here's what the class
definition looks like.

00:29:14.320 --> 00:29:17.080
Note the pound import on the first line.

00:29:17.180 --> 00:29:22.330
Objective-C does support the standard
#include directive used in C,

00:29:22.470 --> 00:29:26.430
but it has this additional
include directive as well,

00:29:26.510 --> 00:29:28.540
which is what's typically used.

00:29:28.670 --> 00:29:34.110
And what it actually means is the same
thing as a #include with an implicit

00:29:34.290 --> 00:29:40.010
#pragma once to tell the compiler that
each header should only be included once.

00:29:40.880 --> 00:29:48.350
After that,
the class definition itself starts with

00:29:48.540 --> 00:29:48.540
an at-interface and ends with an at-end.

00:29:49.030 --> 00:29:52.050
After the at interface
comes the class name,

00:29:52.050 --> 00:29:56.550
then a colon, and then the class that
we're subclassing from.

00:29:57.530 --> 00:30:00.310
So in this case,
my class is our class name,

00:30:00.310 --> 00:30:02.960
and we're subclassing from NSObject.

00:30:03.820 --> 00:30:06.520
After that comes an opening
curly brace and any instance

00:30:06.520 --> 00:30:08.140
variables that we're declaring.

00:30:08.140 --> 00:30:11.820
Note that we always declare
pointers to Objective-C objects.

00:30:13.730 --> 00:30:19.780
We end with an ending curly brace
and follow this with any methods

00:30:19.780 --> 00:30:21.040
that we may have for this class.

00:30:22.820 --> 00:30:25.340
And with something that may
look curious to you if you

00:30:25.340 --> 00:30:28.460
don't already know Objective-C,
is the leading plus sign or minus

00:30:28.460 --> 00:30:29.840
sign in front of each method.

00:30:29.840 --> 00:30:34.250
This indicates whether the method is
a class method or an instance method,

00:30:34.250 --> 00:30:35.380
respectively.

00:30:37.420 --> 00:30:40.600
After the plus or minus sign comes
the return type in parentheses,

00:30:40.680 --> 00:30:43.600
and then the method name
along with any parameters.

00:30:48.090 --> 00:30:49.150
Here's the class implementation.

00:30:49.160 --> 00:30:54.070
Begins with an at implementation
and ends with an at end.

00:30:56.140 --> 00:30:57.730
There's a couple things
I want to point out here.

00:30:57.730 --> 00:31:00.880
First,
note that in the do-something method,

00:31:00.880 --> 00:31:04.880
we're sending messages to two objects we
haven't talked about up to this point,

00:31:05.440 --> 00:31:07.060
namely self and super.

00:31:09.610 --> 00:31:13.740
Self allows us to refer to ourselves
within a method implementation,

00:31:14.020 --> 00:31:16.160
basically like Java's this object.

00:31:18.020 --> 00:31:21.110
Super, on the other hand,
allows us to refer to a superclass's

00:31:21.110 --> 00:31:24.450
implementation of a method we've
overridden when we want to take

00:31:24.630 --> 00:31:26.620
advantage of default functionality.

00:31:28.100 --> 00:31:31.620
This is very handy sometimes when you
want to take advantage of the standard

00:31:31.620 --> 00:31:34.700
way of doing things and then add some
little bit of delta functionality.

00:31:37.510 --> 00:31:42.060
The other big point to note here
is that you actually don't have to

00:31:42.080 --> 00:31:46.020
declare methods in the class definition
to go ahead and implement them.

00:31:47.300 --> 00:31:50.890
Objective C doesn't suffer from
the fragile base class problem

00:31:50.890 --> 00:31:54.860
to the same degree that C++ does,
so we can present a clean interface

00:31:54.860 --> 00:31:59.030
for the class to users of the class,
and then go ahead and implement

00:31:59.030 --> 00:32:01.830
any additional methods that
we need on the back end.

00:32:10.190 --> 00:32:12.180
So that actually covers
the basics of the language,

00:32:12.260 --> 00:32:13.560
the real foundation of it all.

00:32:14.010 --> 00:32:17.440
But there are two other concepts
which are not quite as foundational,

00:32:17.440 --> 00:32:20.540
but which we still encounter
on a frequent basis when

00:32:20.540 --> 00:32:22.440
developing an Objective-C.

00:32:22.440 --> 00:32:25.050
And I don't have time to go into
examples on them here today,

00:32:25.060 --> 00:32:26.980
but I did want to touch on them briefly.

00:32:28.730 --> 00:32:30.930
The first item is categories.

00:32:30.930 --> 00:32:37.490
Now, categories actually allow you to
add methods to existing classes.

00:32:37.490 --> 00:32:40.800
Now,
that may not sound like anything special,

00:32:40.800 --> 00:32:43.690
but it's the way that we
do this that's really cool,

00:32:43.980 --> 00:32:47.870
because you can actually add these
new methods in your category in

00:32:47.890 --> 00:32:52.170
a different source file than the
original implementation of the class.

00:32:52.880 --> 00:32:55.760
In fact,
you don't have to have the source

00:32:55.760 --> 00:32:59.820
code to the original class at all
to write a category on that class.

00:32:59.820 --> 00:33:02.170
As long as you have
symbols to link against,

00:33:02.170 --> 00:33:03.350
you're good to go.

00:33:05.130 --> 00:33:10.380
Now, you can add instance variables
to a class with a category,

00:33:10.380 --> 00:33:13.620
but you can take advantage of
existing instance variables

00:33:13.620 --> 00:33:15.310
in your category methods.

00:33:16.760 --> 00:33:20.200
And the neat thing is, at runtime,
these methods are just as much

00:33:20.200 --> 00:33:23.390
a part of the class as any
other method on the class is.

00:33:23.460 --> 00:33:26.250
So all your subclasses get to
take advantage of these as well.

00:33:28.970 --> 00:33:31.400
Categories are used very often in Cocoa.

00:33:31.400 --> 00:33:34.220
In fact, many of the methods
you'll use every day are,

00:33:34.340 --> 00:33:36.880
in fact, implemented as categories
in the frameworks.

00:33:36.960 --> 00:33:40.530
But why might you want to write
a category in your application?

00:33:42.000 --> 00:33:44.310
Well,
just think for a moment that you want to

00:33:44.310 --> 00:33:47.280
add a new string manipulation routine to,
say, NSString.

00:33:47.280 --> 00:33:51.700
One way you could do this would
be to write a new function that

00:33:51.810 --> 00:33:53.180
takes an NSString as a parameter.

00:33:53.180 --> 00:33:57.430
But perhaps the more object-oriented
way to do it would be to actually

00:33:57.430 --> 00:34:00.240
write a category on NSString where
you add your new method.

00:34:00.240 --> 00:34:04.240
Then, all your NSStrings automatically
get this behavior,

00:34:04.250 --> 00:34:06.160
as well as your subclasses.

00:34:11.360 --> 00:34:15.400
Protocols are the other concept
we want to talk about here today.

00:34:15.560 --> 00:34:19.050
Protocols allow you to declare
methods not associated with a class,

00:34:19.080 --> 00:34:24.730
but which a class or classes can choose
to implement to conform to the protocol,

00:34:24.810 --> 00:34:27.420
similar to Java's interfaces.

00:34:27.700 --> 00:34:29.690
If you claim to conform
to a protocol and don't,

00:34:29.760 --> 00:34:31.870
you'll actually get an
error at compile time.

00:34:35.090 --> 00:34:36.340
So what are protocols good for?

00:34:36.340 --> 00:34:40.790
Well, protocols allow you to group
objects by functionality when

00:34:41.520 --> 00:34:44.750
functionality and not class hierarchy
is all you really care about.

00:34:47.210 --> 00:34:49.540
So, for example,
you could combine this with weak

00:34:49.540 --> 00:34:54.280
typing to have a parameter to a
method be declared as type ID,

00:34:54.280 --> 00:34:57.050
that is, an object of any type.

00:34:58.310 --> 00:35:01.460
But have it conform to a specific
protocol to ensure that certain

00:35:01.570 --> 00:35:03.270
functionality is present at runtime.

00:35:10.500 --> 00:35:12.630
And then there's this kind
of thing in the middle that

00:35:12.630 --> 00:35:14.050
we call informal protocols.

00:35:14.060 --> 00:35:16.140
And they're categories, really.

00:35:16.140 --> 00:35:20.450
There's no compiler error if you don't
conform to these informal protocols,

00:35:20.460 --> 00:35:22.740
but they do help group functionality.

00:35:22.740 --> 00:35:26.900
There's actually a Cocoa technique
session later on this week where

00:35:26.900 --> 00:35:29.340
they'll go into this in more detail.

00:35:31.450 --> 00:35:33.130
And that's actually the
basics of the language.

00:35:33.150 --> 00:35:37.320
And hopefully if you squint a little bit,
you'll be able to follow along

00:35:37.320 --> 00:35:38.840
with the Objective-C on the slides.

00:35:38.880 --> 00:35:43.950
But now I'd like to turn from the
language Objective-C to the frameworks,

00:35:44.050 --> 00:35:45.980
Foundation and AppKit,
and I'll start with a

00:35:46.000 --> 00:35:46.900
discussion of Foundation.

00:36:00.620 --> 00:36:03.920
As I've said earlier,
Foundation is actually what

00:36:03.920 --> 00:36:07.140
we think of as typically the
non-GUI portion of Cocoa.

00:36:07.190 --> 00:36:09.690
And there are five things
I'd like to talk about in

00:36:09.770 --> 00:36:11.550
relation to Foundation today.

00:36:11.610 --> 00:36:15.000
I'm going to talk about NSObject,
which is the root object of

00:36:15.120 --> 00:36:16.660
the Cocoa class hierarchy.

00:36:16.840 --> 00:36:19.850
I'm going to talk about something that
every application developer will need to

00:36:19.850 --> 00:36:22.640
deal with when working in Objective-C,
which is memory management.

00:36:22.640 --> 00:36:26.830
Then I'm going to dive down into
a few case studies of specific

00:36:26.910 --> 00:36:30.490
classes that you'll either use on
a frequent basis or bump into from

00:36:30.490 --> 00:36:32.770
time to time when using Foundation.

00:36:36.380 --> 00:36:38.700
So first, NSObject.

00:36:38.730 --> 00:36:42.900
NSObject provides base functionality
that just about every other class

00:36:43.000 --> 00:36:44.760
in Cocoa will take advantage of.

00:36:44.780 --> 00:36:48.260
It helps bootstrap your objects
and get them up and running.

00:36:49.160 --> 00:36:52.620
In fact, in Objective-C,
there's no specific syntax

00:36:52.890 --> 00:36:56.760
for working with constructors,
but NSObject does define

00:36:56.870 --> 00:36:59.340
two methods to help here,
alloc and init.

00:37:01.170 --> 00:37:06.570
Alec allocates memory for a new
instance of an object at runtime,

00:37:06.570 --> 00:37:11.970
while Init initializes that
object to default values.

00:37:12.300 --> 00:37:15.290
In your subclasses,
typically you won't override ALEC,

00:37:15.290 --> 00:37:22.160
but you will either override INIT,
write a more complex initializer

00:37:22.160 --> 00:37:24.990
like INIT with FUBAR,
or both.

00:37:25.270 --> 00:37:28.680
Typically, the initializer that takes the
most parameters is what's known

00:37:28.730 --> 00:37:30.270
as the default initializer.

00:37:33.200 --> 00:37:37.780
And this object also provides some
introspection capabilities for Cocoa.

00:37:37.860 --> 00:37:41.200
Methods like responds to selector,
where you can actually ask an

00:37:41.290 --> 00:37:45.310
object at runtime if it knows how
to deal with a certain message.

00:37:47.450 --> 00:37:50.220
And finally,
NSObject has capabilities for

00:37:50.220 --> 00:37:53.920
asking objects what their class is,
or for a string description

00:37:53.920 --> 00:37:55.230
of the contents of an object.

00:37:55.280 --> 00:37:58.790
This can be handy for debugging,
among other things.

00:38:04.050 --> 00:38:07.480
When it comes to memory management,
Cocoa and Objective-C use

00:38:07.480 --> 00:38:09.140
reference counting.

00:38:09.860 --> 00:38:17.990
There are three main messages that
you'll want to pay attention to.

00:38:17.990 --> 00:38:17.990
Retain adds a reference to an object.

00:38:18.300 --> 00:38:22.530
Release decrements it,
and auto-release decrements it later,

00:38:22.530 --> 00:38:24.230
for some definition of later.

00:38:26.030 --> 00:38:28.760
And the rules are really quite simple.

00:38:28.760 --> 00:38:34.740
By convention, only creation methods like
ALEC return retained objects,

00:38:34.740 --> 00:38:37.720
that is,
objects with a retained count of one.

00:38:39.740 --> 00:38:41.880
You can assume that all other
methods will return objects

00:38:41.880 --> 00:38:43.180
that have not been retained.

00:38:43.180 --> 00:38:47.170
If you want the object to stick around,
you need to retain it.

00:38:48.520 --> 00:38:51.000
On the other hand,
when you're done with an object,

00:38:51.040 --> 00:38:55.150
you should call release
to avoid leaking memory.

00:38:56.950 --> 00:38:58.790
When there are no more
references to an object,

00:38:59.170 --> 00:39:02.120
that is,
when its retain count drops to zero,

00:39:02.130 --> 00:39:04.180
the object will be
automatically deallocated.

00:39:08.280 --> 00:39:10.130
Here's a few examples.

00:39:10.220 --> 00:39:13.620
In the first line,
you can see that we nest a call to

00:39:13.620 --> 00:39:16.580
Alec with a call to init with format.

00:39:17.210 --> 00:39:22.230
The alloc call gives us a new instance
in memory of an NSString object,

00:39:22.300 --> 00:39:25.100
which gets passed right
along to initWithFormat,

00:39:25.150 --> 00:39:27.600
which gives it some default values.

00:39:27.680 --> 00:39:32.250
initWithFormat returns the
same new NSString object,

00:39:32.880 --> 00:39:35.600
which gets assigned to myString.

00:39:35.710 --> 00:39:38.920
So myString now has a retain count of 1.

00:39:39.450 --> 00:39:44.400
We then log out to standard out
myString using the NSLOG function.

00:39:44.400 --> 00:39:47.610
And finally,
to avoid memory leaking myString,

00:39:47.610 --> 00:39:50.720
we send it the release message,
deallocating the object.

00:39:56.550 --> 00:40:00.310
So let's turn from memory management
to an example of one of the value

00:40:00.410 --> 00:40:01.890
classes that Foundation provides.

00:40:01.890 --> 00:40:05.290
This class is NSString.

00:40:06.090 --> 00:40:08.390
It's an opaque string class.

00:40:08.500 --> 00:40:11.580
It's used pretty much everywhere
in the Cocoa frameworks.

00:40:11.660 --> 00:40:14.280
And one of its coolest features
is that it provides what's known

00:40:14.280 --> 00:40:20.200
as toll-free bridging to core
foundations CFStringRef type.

00:40:20.610 --> 00:40:24.590
That means that these objects are
actually identical at runtime.

00:40:24.590 --> 00:40:28.110
You can directly cast
from a CFStringRef to an

00:40:28.260 --> 00:40:31.710
NSString and vice versa,
and pass them to methods

00:40:31.730 --> 00:40:33.600
that take one or the other.

00:40:35.910 --> 00:40:38.940
NSString also provides lots of
string manipulation routines

00:40:38.940 --> 00:40:41.550
for your convenience and
is fully Unicode compliant.

00:40:43.160 --> 00:40:46.040
In your code,
you'll want to use the at-quote construct

00:40:46.040 --> 00:40:49.940
to refer to a constant NSString,
very similar to

00:40:50.070 --> 00:40:53.540
Core Foundation's CFSTR macro.

00:40:55.320 --> 00:40:59.330
And finally, like many of the other
classes in Foundation,

00:40:59.330 --> 00:41:04.160
there's actually a mutable or
changeable version of NSString,

00:41:04.160 --> 00:41:06.970
NSMutableString,
that you'll want to use if you're

00:41:07.100 --> 00:41:08.250
changing the string as you go.

00:41:08.260 --> 00:41:12.460
This division between mutable
and immutable was made to allow

00:41:12.460 --> 00:41:16.600
for optimizations to be done on
the immutable version that would

00:41:16.670 --> 00:41:17.960
not have otherwise been possible.

00:41:22.950 --> 00:41:25.850
Here's some NSString examples.

00:41:25.910 --> 00:41:30.170
Some string is first
assigned to the string world!

00:41:30.620 --> 00:41:33.080
using the @quote construct.

00:41:33.140 --> 00:41:38.440
Then, we print out this string,
along with some additional text,

00:41:38.480 --> 00:41:44.750
using NSLog,
and its built-in printf-style

00:41:44.750 --> 00:41:46.510
format specifiers.

00:41:46.510 --> 00:41:46.510
%at refers to an NSString.

00:41:46.940 --> 00:41:50.110
And finally,
we print out some more text on the

00:41:50.190 --> 00:41:54.570
length of the string using NSLOG and
asking the string for its length.

00:41:59.090 --> 00:42:03.830
NSArray is an example of one of the
collection classes that Cocoa provides.

00:42:03.880 --> 00:42:08.030
And NSArray provides optimized
expanding array support.

00:42:08.300 --> 00:42:11.360
And in addition,
it's actually quite fast.

00:42:11.500 --> 00:42:15.820
It'll switch implementations on the fly
at runtime based on your usage patterns.

00:42:18.640 --> 00:42:21.550
Some may see the fact that
NSArray only takes NSObject

00:42:21.550 --> 00:42:23.370
subclasses as a limitation.

00:42:23.370 --> 00:42:28.380
But besides the fact that you can
wrap base types in value classes,

00:42:28.380 --> 00:42:35.290
one of NSArray's advantages is that you
can have objects of any NSObject subclass

00:42:35.290 --> 00:42:38.470
all contained in the same NSArray.

00:42:39.260 --> 00:42:43.260
This can actually be quite powerful,
because you can use, for example,

00:42:43.260 --> 00:42:49.650
an NSEnumerator and an NSArray to
iterate through an NSArray that contains

00:42:49.730 --> 00:42:53.640
objects of lots of different classes,
and then call the same

00:42:53.640 --> 00:42:55.930
message on each object.

00:42:59.280 --> 00:43:01.850
The other nice thing about
NSArrays is they too provide

00:43:01.850 --> 00:43:03.700
various manipulation routines.

00:43:03.700 --> 00:43:07.350
For example,
combining arrays or comparing arrays.

00:43:07.380 --> 00:43:12.090
And NSArrays retain the objects that you
add to them so that you don't have to.

00:43:13.360 --> 00:43:16.720
And finally, like NSString,
you'll want to use the

00:43:16.720 --> 00:43:19.800
mutable version of NSArray,
NSMutableArray,

00:43:19.800 --> 00:43:22.350
if you're changing the array as you go.

00:43:28.280 --> 00:43:30.960
And thirdly,
we come to an example of one of the

00:43:30.960 --> 00:43:33.140
OS services that Foundation provides.

00:43:33.200 --> 00:43:35.260
And this class is NSTask.

00:43:35.280 --> 00:43:39.130
It allows you to launch other
processes to do work for you.

00:43:39.140 --> 00:43:41.910
And then you can interact
with them via Standard In,

00:43:41.910 --> 00:43:45.490
Standard Out, and Standard Air,
and the NSPipe class.

00:43:48.130 --> 00:43:51.240
NSTask is commonly used to
wrap command-line tools or

00:43:51.340 --> 00:43:53.160
shell scripts in a Cocoa GUI.

00:43:54.470 --> 00:43:58.020
And often what you'll do is take your
favorite command line application

00:43:58.020 --> 00:44:02.270
and put a Cocoa interface on it
to increase its user-friendliness.

00:44:02.320 --> 00:44:05.650
And this can be, at times,
the fastest way to port or

00:44:05.650 --> 00:44:08.430
get an application up and
running on the platform.

00:44:10.560 --> 00:44:13.890
Let's take a look at how
you might set up an NS task.

00:44:13.890 --> 00:44:19.320
First, you can see that we're calling
alloc and init to create a new

00:44:19.340 --> 00:44:24.770
instance of an NS task and then
initialize it to default values.

00:44:26.740 --> 00:44:32.450
Then, we send it the set launch path
message to actually tell it what

00:44:33.340 --> 00:44:34.870
application we want it to launch.

00:44:36.770 --> 00:44:39.720
And after this,
we tell it what arguments we

00:44:39.720 --> 00:44:42.690
want to pass to this task,
and those arguments are

00:44:42.690 --> 00:44:44.180
contained in an NSArray.

00:44:44.180 --> 00:44:47.470
Here we're passing just
a couple of flags to LS,

00:44:47.470 --> 00:44:50.280
as well as the director we want to list.

00:44:53.280 --> 00:44:57.200
Finally,
we allocate and init a new NSPipe object

00:44:57.300 --> 00:45:00.470
and set it to be the standard output of
the task so that we can get the results,

00:45:00.510 --> 00:45:02.700
and then we launch the task.

00:45:07.640 --> 00:45:09.690
So that's a quick flyby of Foundation.

00:45:09.690 --> 00:45:13.910
There's obviously a lot more there,
but there are lots of other sessions

00:45:13.910 --> 00:45:15.310
this week where you can find out more.

00:45:15.320 --> 00:45:20.030
I want to turn now to AppKit,
which is the GUI portion of Cocoa.

00:45:20.030 --> 00:45:22.820
And once again, there's five things
I'd like to talk about.

00:45:24.270 --> 00:45:28.870
The first is Model-View-Controller,
often abbreviated MVC,

00:45:28.990 --> 00:45:33.020
which is a standard design
pattern leveraged by Cocoa.

00:45:34.240 --> 00:45:37.690
Then, I'd like to talk a little bit
about some of the application-level

00:45:37.690 --> 00:45:40.420
services that AppKit provides for you.

00:45:40.420 --> 00:45:45.100
And we'll mention briefly the
text and drawing subsystems.

00:45:45.310 --> 00:45:49.160
And finally, we'll get to a discussion of
the event system in Cocoa,

00:45:49.410 --> 00:45:51.840
controls, and conclude with a brief demo.

00:45:56.620 --> 00:45:59.700
So, you don't actually have to
use Model-View-Controller

00:45:59.780 --> 00:46:02.430
in your applications,
but it does really help and

00:46:02.490 --> 00:46:05.850
is leveraged by Cocoa to help
break up your application into

00:46:05.850 --> 00:46:10.330
the parts that do the work,
the parts that display the results,

00:46:10.330 --> 00:46:13.900
and the parts that
interact between the two.

00:46:14.050 --> 00:46:15.360
So the model is the first part.

00:46:15.370 --> 00:46:18.220
This is where your
back-end data is stored,

00:46:18.220 --> 00:46:21.600
and this is the part that actually
gets the job done in your application.

00:46:21.640 --> 00:46:24.650
Typically,
in a cross-platform application,

00:46:24.770 --> 00:46:29.420
the model is the part that goes most
easily from platform to platform.

00:46:32.110 --> 00:46:35.690
And the view part of your application
is actually the antithesis of this.

00:46:36.130 --> 00:46:39.710
These are the buttons and widgets and
sliders that the user interacts with.

00:46:39.760 --> 00:46:44.510
But the view parts of your application
don't actually need to know very

00:46:45.000 --> 00:46:48.950
much about how to store the data
or how to operate on the data.

00:46:50.000 --> 00:46:51.750
And then there's the controller
part of your application.

00:46:51.760 --> 00:46:54.480
This is the part that
talks between the two.

00:46:54.480 --> 00:46:57.450
It serves up data from
the model and displays it,

00:46:57.450 --> 00:47:00.910
hands it off to the view,
and then it parses responses

00:47:00.910 --> 00:47:04.690
from the user in the view and
hands them off to the model.

00:47:06.680 --> 00:47:10.260
This can help enhance code factorization,
encapsulization,

00:47:10.320 --> 00:47:11.620
and reuse in your applications.

00:47:11.620 --> 00:47:14.680
We'll come back to some examples
of Model-View-Controller

00:47:14.680 --> 00:47:16.130
in action in a little bit.

00:47:19.700 --> 00:47:23.360
So, when it comes to handling
application-level services,

00:47:23.360 --> 00:47:27.760
you actually want to use NSApplication,
of all things.

00:47:29.380 --> 00:47:33.100
And you'll interact with NSApplication
through the global NSApp object

00:47:33.280 --> 00:47:34.860
defined for you in your applications.

00:47:37.210 --> 00:47:38.710
NSApp does a lot of work for you.

00:47:38.730 --> 00:47:41.520
It will actually,
upon application launch,

00:47:41.520 --> 00:47:45.990
set up the menu bar, load the main nib,
which is your application's

00:47:46.000 --> 00:47:48.840
user interface file,
handle the dock menu,

00:47:48.840 --> 00:47:50.850
and lots more for you.

00:47:50.850 --> 00:47:55.260
So you'll want to message NSApp when
you want to do application-level tasks.

00:48:03.350 --> 00:48:07.560
For example, you can ask NSApp if your
application is hidden.

00:48:07.560 --> 00:48:11.640
Or, on the other hand,
you could set your application's

00:48:11.750 --> 00:48:14.550
icon image in the dock to
provide feedback to the user.

00:48:21.650 --> 00:48:26.080
Beyond NS application, however,
AppKit provides a slew of functionality

00:48:26.080 --> 00:48:27.620
in a lot of different classes.

00:48:27.620 --> 00:48:31.080
And we don't have time to go
into all the gory details today.

00:48:31.080 --> 00:48:35.880
But I did want to touch briefly
upon perhaps what is a whole

00:48:35.880 --> 00:48:40.620
solar system of classes in AppKit,
which is the Cocoa Tech System.

00:48:42.240 --> 00:48:45.110
The nice thing is that most
developers never have to see or

00:48:45.220 --> 00:48:48.760
work with all these classes because
they're wrapped up in one complete

00:48:48.920 --> 00:48:52.780
international drag-and-drop widget,
NSTextView.

00:48:53.010 --> 00:48:56.020
NS TextView does a ton of
stuff right out of the box.

00:48:56.020 --> 00:49:01.140
Whether it's fonts, images,
spell-checking, the kitchen sink,

00:49:01.140 --> 00:49:04.620
you name it, it's pretty much in there
in some sort of standard,

00:49:04.720 --> 00:49:07.680
reasonable,
default behavior right out of the box.

00:49:09.700 --> 00:49:12.830
But it is a front-end for a bunch
of interlocking text classes,

00:49:13.010 --> 00:49:16.100
and so you can do things like syntax
highlighting or some of the other things

00:49:16.100 --> 00:49:17.780
that Project Builder takes advantage of.

00:49:17.820 --> 00:49:21.400
You can write a complete word
processor using the Cocoa text system.

00:49:25.660 --> 00:49:27.540
There's a session later
this week on Cocoa Text,

00:49:27.540 --> 00:49:30.750
which I encourage you to go pay
attention to if you're interested.

00:49:33.270 --> 00:49:35.910
and turning from text to drawing,
in addition to a complete

00:49:36.010 --> 00:49:40.110
NS view drawing architecture,
there are drawing methods scattered

00:49:40.110 --> 00:49:42.700
throughout the Cocoa class hierarchy.

00:49:42.700 --> 00:49:46.630
Furthermore,
core graphics calls can also be used,

00:49:46.730 --> 00:49:49.870
and there's a Cocoa drawing
session specifically to talk

00:49:49.870 --> 00:49:51.280
about these later this week.

00:50:02.420 --> 00:50:05.140
So now we come to the Cocoa Event System.

00:50:05.260 --> 00:50:09.380
When it comes to events in Cocoa,
NSApplication will handle

00:50:09.450 --> 00:50:10.920
your event loop for you.

00:50:11.040 --> 00:50:14.340
This is actually very similar
to how runApplication event

00:50:14.450 --> 00:50:16.400
loop does on the Carbon side.

00:50:16.570 --> 00:50:19.320
So how does this work?

00:50:21.050 --> 00:50:23.520
So, you have a GUI application.

00:50:23.570 --> 00:50:26.640
You have a window on the
screen with some widgets in it,

00:50:26.640 --> 00:50:29.890
say, a text field, a button, a slider.

00:50:29.890 --> 00:50:34.340
And at runtime,
one of those widgets will be determined

00:50:34.340 --> 00:50:37.210
to be what's called the first responder.

00:50:37.260 --> 00:50:43.100
That is, as NS events get handled and
come in through the system,

00:50:43.360 --> 00:50:46.630
The first responder is the widget
that will get the first chance

00:50:46.820 --> 00:50:49.180
to respond to those events.

00:50:49.700 --> 00:50:53.680
So, oftentimes, perhaps,
the text field in your window

00:50:53.680 --> 00:50:55.960
will be the first responder,
so that key press events

00:50:55.960 --> 00:50:57.550
will go to that text field.

00:50:59.630 --> 00:51:04.530
However, as your application is running,
the first responder can and will

00:51:04.530 --> 00:51:06.070
change on the fly automatically.

00:51:07.510 --> 00:51:10.800
Say, for instance, the user clicks on a
different text field.

00:51:10.820 --> 00:51:14.750
Well, that new text field will then
become the first responder,

00:51:14.750 --> 00:51:19.040
so that all key press events
will now go to that text field.

00:51:24.410 --> 00:51:29.340
So what if a particular widget doesn't
know how to respond to a given event?

00:51:29.380 --> 00:51:33.530
Well, if this happens,
the event is actually sent up the

00:51:33.530 --> 00:51:39.460
responder chain until an object is
found that responds to the event.

00:51:40.320 --> 00:51:41.420
This is actually quite powerful.

00:51:41.420 --> 00:51:47.780
In fact, the first responder and the
responder chain are powerful not

00:51:47.780 --> 00:51:51.230
only because they're very dynamic,
but because of a couple

00:51:51.270 --> 00:51:53.380
of other paradigms,
namely target action and

00:51:53.790 --> 00:51:57.130
targeting the first responder,
which allow the responder chain to

00:51:57.240 --> 00:52:02.190
actually dynamically reconfigure itself
on the fly based on user interaction.

00:52:03.730 --> 00:52:06.840
So, to understand how this works,
we first have to talk about

00:52:06.840 --> 00:52:09.260
controls and target action,
and then we'll come back to

00:52:09.260 --> 00:52:11.060
talking about the first responder.

00:52:15.290 --> 00:52:19.350
Controls and other related classes
typically have two key parts.

00:52:19.400 --> 00:52:23.770
They have an action and a target.

00:52:24.460 --> 00:52:27.610
The action is the message
that will be sent when the

00:52:27.750 --> 00:52:29.210
control is actually triggered.

00:52:31.190 --> 00:52:35.010
Meanwhile,
the target is the object to which

00:52:35.010 --> 00:52:36.370
that action message will be sent.

00:52:37.930 --> 00:52:39.040
Take NSButton, for example.

00:52:39.040 --> 00:52:43.820
You could, for example,
have an NSButton in your application

00:52:44.160 --> 00:52:47.560
wired up to some code you have that,
say, is a document that knows

00:52:47.770 --> 00:52:49.160
how to print itself.

00:52:49.160 --> 00:52:55.720
Thus, when you press that button,
it can send the print action

00:52:55.930 --> 00:52:59.170
message to the document target.

00:53:00.270 --> 00:53:03.050
NS Menu Items work this way as well.

00:53:03.360 --> 00:53:06.940
When you select a menu item
in a Cocoa application,

00:53:06.940 --> 00:53:10.570
it will actually send an action
message to a given target

00:53:11.080 --> 00:53:13.120
that it's been wired up to.

00:53:13.390 --> 00:53:14.280
This is a key point.

00:53:14.280 --> 00:53:20.830
These action messages and targets are
actually wired up in Interface Builder.

00:53:20.830 --> 00:53:24.480
There's no code that you need to write
to hook up your widgets to each other.

00:53:24.490 --> 00:53:26.340
I'll demo this shortly.

00:53:29.300 --> 00:53:33.530
So if that's what controls are,
let's come back to the first responder.

00:53:33.690 --> 00:53:38.700
So we've talked about target inaction,
but the target can actually

00:53:38.820 --> 00:53:41.350
be determined on the fly.

00:53:41.430 --> 00:53:44.800
And this can happen if you
hook up the target in Interface

00:53:45.380 --> 00:53:47.460
Builder to be the first responder.

00:53:47.570 --> 00:53:55.050
Then the action message will be sent to
whoever the first responder happens to

00:53:55.050 --> 00:53:55.430
be at a given point in your application.

00:53:55.690 --> 00:53:57.540
This is actually quite powerful.

00:53:57.630 --> 00:54:01.080
Cut, copy, and paste work this way
in Cocoa applications.

00:54:01.270 --> 00:54:04.580
They actually will send the cut, copy,
or paste action message

00:54:04.790 --> 00:54:07.570
to the first responder,
whatever widget that

00:54:07.570 --> 00:54:09.480
happens to be at that point.

00:54:09.700 --> 00:54:11.560
So if this text field
is the first responder,

00:54:11.560 --> 00:54:13.500
cut, copy, and paste will operate on it.

00:54:14.460 --> 00:54:15.840
If a different one is
the first responder,

00:54:15.840 --> 00:54:19.190
cut, copy,
and paste will operate on that one.

00:54:20.180 --> 00:54:22.630
But what if the first responder
is something that doesn't

00:54:22.630 --> 00:54:24.640
know how to respond at cut,
copy, and paste?

00:54:24.740 --> 00:54:28.380
Well, this is handled for you
automatically as well.

00:54:30.110 --> 00:54:33.280
If you recall,
we talked about introspection

00:54:33.280 --> 00:54:34.890
capabilities a little bit earlier.

00:54:34.890 --> 00:54:38.710
Well,
menu items can actually auto-enable and

00:54:38.710 --> 00:54:41.510
disable themselves on the fly at runtime.

00:54:42.480 --> 00:54:48.200
If a given first responder doesn't know
how to respond to a given action message,

00:54:48.200 --> 00:54:51.940
Cut, Copy, and Paste will automatically
realize that and disable themselves.

00:54:58.010 --> 00:55:02.030
So now we'll move on from the event
system to something that's perhaps a

00:55:02.290 --> 00:55:06.680
more sophisticated widget in Cocoa,
and that is NS TableView,

00:55:06.680 --> 00:55:09.300
something similar to
Carbon's data browser.

00:55:11.310 --> 00:55:16.940
NS Table View is actually a view in
the Model View Controller paradigm.

00:55:17.030 --> 00:55:21.580
So it doesn't store any of
the data that it displays.

00:55:21.610 --> 00:55:23.060
That's up to you.

00:55:23.080 --> 00:55:28.010
You need to write an object that
conforms to the NS Table data

00:55:28.060 --> 00:55:30.750
source informal protocol.

00:55:31.180 --> 00:55:31.900
You write the model.

00:55:31.900 --> 00:55:34.500
And this is really handy.

00:55:34.500 --> 00:55:38.820
This is a really handy separation because
the table view doesn't have to know

00:55:38.820 --> 00:55:42.020
anything about what your data looks like,
really.

00:55:42.020 --> 00:55:45.210
And you, on the other hand,
don't really have to know

00:55:45.410 --> 00:55:46.940
how to draw a table view.

00:55:47.030 --> 00:55:49.960
You just write the part
that you can do best.

00:55:52.900 --> 00:55:56.330
So, what's this about writing an
NS table data source protocol?

00:55:56.650 --> 00:55:59.960
How many methods do we have to
implement to get this to work?

00:56:00.510 --> 00:56:02.420
Well,
if you just have a display-only table,

00:56:02.420 --> 00:56:04.280
there's only two methods to deal with.

00:56:05.800 --> 00:56:08.340
Number of rows in table
view is the first method,

00:56:08.340 --> 00:56:12.890
and you basically just have to respond
with how many rows this table has.

00:56:14.900 --> 00:56:18.330
The second method is table view
object value for table column row.

00:56:18.330 --> 00:56:22.830
And this actually gives
you a column in row,

00:56:22.830 --> 00:56:27.540
and you need to take a look at your
model and respond with whatever

00:56:27.570 --> 00:56:31.680
data should go in a particular cell
in the table view to be displayed.

00:56:33.970 --> 00:56:36.040
That's all well and good if
you have a display-only table.

00:56:36.040 --> 00:56:39.220
But if you want the user to actually
be able to enter data in your table,

00:56:39.220 --> 00:56:40.440
you've got to do more.

00:56:40.460 --> 00:56:42.220
How much more?

00:56:44.050 --> 00:56:44.850
Only one more method.

00:56:44.850 --> 00:56:49.940
This method is table view set
object value for table column row,

00:56:50.140 --> 00:56:52.660
where given an object
value in a column in a row,

00:56:52.660 --> 00:56:55.190
you get a chance to stuff
this back into your model.

00:56:57.160 --> 00:56:59.730
But how does the table view
actually know whether you've

00:56:59.840 --> 00:57:01.310
implemented this method or not?

00:57:01.320 --> 00:57:05.100
Well, once again, it uses introspection.

00:57:05.100 --> 00:57:09.280
It will actually query
your object at runtime,

00:57:09.320 --> 00:57:13.700
ask it if it implements this method,
and if it does, it will be called.

00:57:13.700 --> 00:57:19.300
If not, it won't,
and the table view will automatically

00:57:19.770 --> 00:57:22.180
enable or disable user editing based
on whether you have this method.

00:57:24.530 --> 00:57:27.140
So now to demo in this table view
on some of the other concepts

00:57:27.210 --> 00:57:29.300
we've talked about today,
I'd like to invite Heather Hickman

00:57:29.300 --> 00:57:32.330
to come back on stage to
help me with a brief demo.

00:57:32.800 --> 00:57:34.670
This demo is called MP3 Player.

00:57:34.670 --> 00:57:39.960
It's a small little Cocoa app,
only about 50 lines of code,

00:57:39.960 --> 00:57:43.030
that actually calls
through to an NS task.

00:57:43.520 --> 00:57:47.880
That's actually executing MPG-123,
an open-source MP3 player

00:57:47.880 --> 00:57:50.730
that you can download for
yourself off of freshmeat.net.

00:57:53.140 --> 00:57:56.490
So let's open the
Project Builder project.

00:57:56.590 --> 00:57:58.680
What we'll do first is
take a look at the Nib,

00:57:58.690 --> 00:58:03.000
which is this app's user interface file,
and see what the interface

00:58:03.080 --> 00:58:06.110
looks like for MP3 player.

00:58:10.900 --> 00:58:12.360
There's two main parts
of the interface here.

00:58:12.360 --> 00:58:16.700
First of all, we have a basic window.

00:58:16.700 --> 00:58:20.020
Inside the window,
we have a table view where we actually

00:58:20.020 --> 00:58:22.310
display MP3s that we've dragged in.

00:58:22.320 --> 00:58:26.230
This table view is actually
a custom table view subclass

00:58:26.230 --> 00:58:28.080
that knows how to play MP3s.

00:58:29.660 --> 00:58:33.550
The other user-interface element
we have here is a basic menu bar.

00:58:33.550 --> 00:58:37.430
It has all the standard menu
elements we might expect.

00:58:38.990 --> 00:58:42.190
So if that's the interface,
let's go run the app and

00:58:42.190 --> 00:58:44.140
see how it works right now.

00:58:48.790 --> 00:58:51.680
So, right out of the box, we get a lot of
Cocoa functionality for free.

00:58:51.680 --> 00:58:55.440
The window just easily
knows how to resize itself.

00:58:55.500 --> 00:58:58.290
Oops, there's a button over there.

00:58:58.300 --> 00:58:58.560
I know.

00:58:58.560 --> 00:59:00.070
And... I didn't see that.

00:59:01.470 --> 00:59:03.230
menus just work.

00:59:03.230 --> 00:59:06.280
We even get a default about
box that pulls information out

00:59:06.350 --> 00:59:09.070
of the application to display.

00:59:09.420 --> 00:59:11.360
But we're not really interested
in the user interface.

00:59:11.380 --> 00:59:13.020
We're writing the
application to play music.

00:59:13.030 --> 00:59:16.330
So let's drag in some MP3s.

00:59:17.400 --> 00:59:19.560
So it just parses that,
drops them off on the table,

00:59:19.560 --> 00:59:22.750
and then to play one,
we can just double-click on it.

00:59:29.700 --> 00:59:35.290
You'll notice that actually we are
calling through to MPG-123 because the

00:59:35.290 --> 00:59:41.080
console in the back gives us standard
out and displays the MPG-123 output.

00:59:45.400 --> 00:59:47.310
Okay, so let's take a look at a
little bit of the code here.

00:59:47.310 --> 00:59:51.480
First of all,
we'll take a look at My Controller.

00:59:51.480 --> 00:59:55.190
And this class is actually,
for such a small app,

00:59:55.250 --> 00:59:58.120
a combination of the
model and the controller.

00:59:58.120 --> 01:00:03.890
And there's a few lines
I want to take a look at.

01:00:03.890 --> 01:00:03.890
First of all is this
set double action line.

01:00:04.060 --> 01:00:08.550
Our table view is represented in
our code by the song table object.

01:00:08.550 --> 01:00:10.790
And what we're doing here
is telling it that when we

01:00:10.790 --> 01:00:14.730
double-click a particular row,
we want it to call the play song method

01:00:14.730 --> 01:00:17.040
to actually start playing an MP3.

01:00:18.900 --> 01:00:21.840
The other thing we'll look at here
in the code are the two NS table

01:00:21.840 --> 01:00:26.000
data source protocol methods
that we need to power this table.

01:00:26.000 --> 01:00:29.040
The first one is number
of rows in table view.

01:00:29.040 --> 01:00:35.120
And we can see here that we store our
MP3s in a basic NSArray called songs.

01:00:35.120 --> 01:00:38.700
And so to find out how many rows
this table view should have,

01:00:38.700 --> 01:00:40.050
we just call count.

01:00:42.410 --> 01:00:44.740
In the second method,
we have TableView object

01:00:44.740 --> 01:00:46.150
value for table column row.

01:00:46.160 --> 01:00:48.560
A long name,
but hopefully it makes the code

01:00:48.600 --> 01:00:50.390
easier to read down the road.

01:00:52.050 --> 01:00:53.640
And here, it's quite simple as well.

01:00:53.640 --> 01:00:59.250
Given a particular column and row,
we would just return the appropriate

01:00:59.250 --> 01:01:00.700
item from our songs array.

01:01:03.320 --> 01:01:06.680
So if that's what's driving the array,
what's actually playing the songs?

01:01:06.730 --> 01:01:11.960
Well,
it's the MyTableView table view subclass.

01:01:11.990 --> 01:01:15.290
There's two methods here,
playSong and stopPlaying.

01:01:15.450 --> 01:01:19.660
First thing we do is we ask if we
actually are already playing a song,

01:01:19.690 --> 01:01:21.760
because we don't want to have two
songs playing at the same time.

01:01:21.760 --> 01:01:23.660
We tell the song to stop playing.

01:01:25.220 --> 01:01:30.250
After that, we have some code to actually
calculate a path inside our application

01:01:30.250 --> 01:01:33.040
package that points to MPG123.

01:01:33.040 --> 01:01:37.560
Then we alloc and init
a new NSTask object,

01:01:37.610 --> 01:01:43.950
set its launch path to be the MP3 player,
and then set whatever arguments we want.

01:01:44.000 --> 01:01:46.540
In this case,
just a path to the MP3 we want to play.

01:01:47.990 --> 01:01:52.630
After doing a little more initialization,
we launch the task, playing the song.

01:01:54.680 --> 01:01:55.950
Stop playing is actually even easier.

01:01:55.950 --> 01:02:01.080
If we're actually playing a song,
we just terminate the task and then

01:02:01.520 --> 01:02:03.560
release it to avoid leaking memory.

01:02:05.990 --> 01:02:09.070
So that's the real core guts of the code
that's actually playing the music here.

01:02:09.080 --> 01:02:12.210
But there's a flaw in our user interface.

01:02:13.940 --> 01:02:16.220
What if we get a telephone
call and need to stop the song?

01:02:16.220 --> 01:02:19.200
Well, we actually can't do that
in our interface here,

01:02:19.200 --> 01:02:20.700
short of quitting the application.

01:02:20.700 --> 01:02:24.810
Wouldn't it be nice if we actually
had a button in the window that we

01:02:24.810 --> 01:02:28.250
could press to stop playing the song,
and another button to

01:02:28.260 --> 01:02:29.320
start playing songs?

01:02:31.210 --> 01:02:32.830
Well,
Interface Builder will help us with that.

01:02:32.880 --> 01:02:37.740
Interface Builder provides a complete
palette set for all the different

01:02:37.740 --> 01:02:40.600
widgets that Cocoa provides,
everything from buttons and

01:02:40.600 --> 01:02:42.760
sliders to drawers and text views.

01:02:42.760 --> 01:02:44.950
But what we want are buttons.

01:02:44.960 --> 01:02:48.090
So, we'll drag in a couple of buttons.

01:02:48.100 --> 01:02:52.530
Notice as we drag them in,
these blue lines showing up in our view.

01:02:52.540 --> 01:02:55.020
These are the Aqua guidelines.

01:02:55.400 --> 01:03:00.180
It's Interface Builder helping you
write your applications in conformance

01:03:00.260 --> 01:03:01.620
with the Aqua interface guidelines.

01:03:03.980 --> 01:03:07.530
Now that we have both buttons in place,
we'll change one of them to say

01:03:07.620 --> 01:03:10.490
"play" and the other to say "stop."

01:03:12.230 --> 01:03:15.360
So that's great,
but changing text on buttons doesn't

01:03:15.400 --> 01:03:17.600
actually build in functionality.

01:03:17.600 --> 01:03:20.140
To do that,
we need to wire up these controls

01:03:20.230 --> 01:03:22.090
to their targets and actions.

01:03:22.100 --> 01:03:24.480
So what's involved there?

01:03:24.480 --> 01:03:29.490
Well, it basically just involves control
dragging from the widget to the target.

01:03:29.500 --> 01:03:33.670
Our target in this case is the table
view that knows how to play songs,

01:03:33.680 --> 01:03:36.710
and the action method we're
going to hook up play to is

01:03:36.730 --> 01:03:38.310
the play song action method.

01:03:41.380 --> 01:03:45.140
Then we'll hook up the stop
playing button to the stop

01:03:45.260 --> 01:03:46.350
playing action message.

01:03:48.480 --> 01:03:55.180
will then save this in Interface Builder,
go back to Project Builder,

01:03:55.180 --> 01:03:55.180
and rebuild the project.

01:03:58.630 --> 01:04:03.890
Okay, we'll drag in some songs again.

01:04:03.890 --> 01:04:05.600
And we now find that we can actually
play them by hitting the play button.

01:04:05.600 --> 01:04:18.780
We can stop playing them
by hitting the stop button.

01:04:18.780 --> 01:04:24.640
Thanks, Heather.

01:04:36.500 --> 01:04:39.380
Did you get all that?

01:04:39.380 --> 01:04:41.420
So for those of you that
are brand new to Cocoa,

01:04:41.540 --> 01:04:46.900
I wanted to take this opportunity to
let you know that some time next week,

01:04:46.900 --> 01:04:51.780
on the ADC site,
a little bit earlier in the conference,

01:04:51.780 --> 01:04:54.030
in fact yesterday,
we had an introduction to

01:04:54.040 --> 01:04:57.380
Cocoa Early Bird session,
which is a four hour hands on session

01:04:57.380 --> 01:05:01.880
that's very interactive and you're able
to begin an application and actually

01:05:01.880 --> 01:05:04.120
have that evolve within the four hours.

01:05:04.120 --> 01:05:06.840
And what we did is we
videoed that session.

01:05:06.840 --> 01:05:09.140
We are doing some post
production work on it.

01:05:09.140 --> 01:05:11.990
We're going to divide it into four
segments and we're going to re-deliver

01:05:11.990 --> 01:05:15.990
it streaming off of the ADC site next
week along with the files and the

01:05:15.990 --> 01:05:18.460
exercises included in the session.

01:05:18.460 --> 01:05:22.030
So you will receive an email through
your ADC membership to let you know when

01:05:22.030 --> 01:05:25.210
that's available and we're interested
in seeing your feedback on that.

01:05:25.260 --> 01:05:27.740
So if you didn't catch it all here today,
it's okay.

01:05:31.440 --> 01:05:36.580
Now that being said, documentation,
documentation, documentation.

01:05:36.650 --> 01:05:41.320
This is another topic that I've heard
a lot about as the Cocoa evangelist.

01:05:41.320 --> 01:05:43.840
And I can understand that
documentation makes it a lot

01:05:43.940 --> 01:05:45.840
easier for you to do your job.

01:05:45.840 --> 01:05:48.600
We've got some exciting
announcements here today.

01:05:48.600 --> 01:05:53.380
I'd like to welcome to the stage,
manager in the Cocoa Tech Pubs group,

01:05:53.410 --> 01:05:54.880
Matt Rollefsson.

01:06:03.340 --> 01:06:05.600
Thank you, Heather.

01:06:05.700 --> 01:06:10.190
So I wanted to just say a few
words about documentation because,

01:06:10.190 --> 01:06:12.770
as we all know,
sessions like this are great for

01:06:12.770 --> 01:06:16.400
giving you an overview and giving
you an idea of how things work,

01:06:16.440 --> 01:06:21.000
which is essential to understanding
how to use the technology.

01:06:21.040 --> 01:06:23.980
But when you get down to brass tacks
and have to actually write code,

01:06:24.100 --> 01:06:27.910
you need to know what it looks like,
exactly what every method does,

01:06:28.020 --> 01:06:29.410
and how to call it.

01:06:38.910 --> 01:06:39.960
Oops.

01:06:40.140 --> 01:06:43.300
Except it goes backwards.

01:06:43.300 --> 01:06:46.840
So the first thing I wanted to say is
that there is a lot of content for you.

01:06:46.940 --> 01:06:50.790
We've got a lot of documentation,
chips on the system.

01:06:51.080 --> 01:06:54.030
It's accessible for you
directly on your system.

01:06:54.140 --> 01:06:55.760
If you don't have a
connection to the Internet,

01:06:55.760 --> 01:06:59.150
you can still look at your documentation.

01:06:59.500 --> 01:07:04.390
As of the developer tools CD,
so the April developers tools

01:07:04.390 --> 01:07:07.880
CD that you received today,
we are in fact reference

01:07:08.020 --> 01:07:11.120
API complete for Mac OS X 10.1.

01:07:11.160 --> 01:07:14.980
So, no more description forthcomings
in the reference API.

01:07:21.110 --> 01:07:24.130
We will be working hard over the
coming weeks to make that true

01:07:24.410 --> 01:07:26.490
for the Jaguar release as well.

01:07:26.490 --> 01:07:29.780
On the seed, you'll find that there are
some description forthcomings

01:07:29.780 --> 01:07:33.520
that are back as the engineers
have been introducing new API.

01:07:33.520 --> 01:07:37.080
A lot of the stuff has been documented
in the official documentation.

01:07:37.120 --> 01:07:40.760
Also, there are release notes about
much of the new information.

01:07:41.320 --> 01:07:45.050
Rest assured,
by the time Jaguar actually ships,

01:07:45.070 --> 01:07:50.900
we will include all of the new APIs as
part of the documentation in the

01:07:50.910 --> 01:07:55.680
developer tools that ships with Jaguar.

01:07:56.040 --> 01:08:01.060
There's also a good deal of conceptual
material that's available from

01:08:01.060 --> 01:08:04.970
the website and also on your CD as
part of the programming topics.

01:08:05.080 --> 01:08:08.300
It is not complete,
but there's a lot there.

01:08:08.300 --> 01:08:13.080
It gives you good orientation
to how the system is designed,

01:08:13.080 --> 01:08:14.290
how it's meant to be used.

01:08:14.320 --> 01:08:18.140
And the good news there is that
we're constantly working on that,

01:08:18.220 --> 01:08:19.960
and there's more on the way.

01:08:19.960 --> 01:08:23.630
So we'll be going through
that conceptual material,

01:08:23.630 --> 01:08:27.580
expanding it,
putting out a lot more material for you,

01:08:27.580 --> 01:08:30.200
and your feedback is
definitely appreciated.

01:08:30.200 --> 01:08:33.390
If there are specific areas
that you found the material that

01:08:33.590 --> 01:08:37.300
we have out there is not quite
sufficient to get your job done,

01:08:37.300 --> 01:08:41.180
please let us know at the TechPubs
feedback session later this week

01:08:41.530 --> 01:08:45.160
or by email so that we can best
understand how to focus our efforts

01:08:45.160 --> 01:08:46.910
to help you get your job done.

01:08:50.800 --> 01:08:54.220
As I said,
documentation does ship on your system.

01:08:54.230 --> 01:09:01.380
So to make it more accessible to you and
make it easier to use the documentation,

01:09:01.380 --> 01:09:03.630
we've integrated it with Project Builder.

01:09:03.640 --> 01:09:07.480
And the documentation,
when you do a definition

01:09:07.480 --> 01:09:12.940
search in Project Builder,
if there's documentation available,

01:09:12.940 --> 01:09:14.630
there's a little book icon that shows up.

01:09:15.370 --> 01:09:17.940
Click on that book icon,
and you have access to the doc right

01:09:17.940 --> 01:09:19.760
there from within Project Builder.

01:09:19.760 --> 01:09:22.880
Without having to switch
around to some other system,

01:09:22.880 --> 01:09:27.670
having to go out to a browser on the web,
or go to some other application,

01:09:27.750 --> 01:09:29.660
you can access your
documentation directly.

01:09:29.660 --> 01:09:34.040
You can also get to documentation
from Project Builder's class browser.

01:09:34.040 --> 01:09:37.150
And with Jaguar,
the Project Builder team has

01:09:37.260 --> 01:09:42.560
introduced the ability to do general
text searches of the documentation.

01:09:42.560 --> 01:09:46.880
So you can look through... Search through
the conceptual material right on your

01:09:46.880 --> 01:09:48.810
system without leaving Project Builder.

01:09:51.480 --> 01:09:56.140
So, that's pretty much what
we've got in Mac OS X.

01:09:57.620 --> 01:09:58.360
Yes, Heather?

01:09:58.360 --> 01:09:59.500
Heather Not so soon.

01:09:59.670 --> 01:10:00.690
So, pardon me.

01:10:00.710 --> 01:10:04.750
I'm going to take this opportunity to
ask Raleigh about something that I've

01:10:04.750 --> 01:10:08.440
been hearing about over the last year,
specific to documentation.

01:10:08.510 --> 01:10:12.910
And what's happened with all
that feedback about printed

01:10:12.910 --> 01:10:15.010
API reference for Cocoa?

01:10:15.010 --> 01:10:17.390
Matt Printed API reference?

01:10:17.390 --> 01:10:20.590
Heather Printed API reference, yeah.

01:10:20.590 --> 01:10:21.940
Matt Do you have any idea how many pages,
how many thousands of pages that is?

01:10:21.940 --> 01:10:21.940
Heather

01:10:22.170 --> 01:10:24.850
Yeah, but, I mean,
and I know the work that

01:10:24.850 --> 01:10:27.990
you've been doing in the,
you know, getting rid of the

01:10:28.000 --> 01:10:30.520
description forthcomings,
that's a great thing, right?

01:10:30.520 --> 01:10:32.080
That's an amazing thing.

01:10:33.700 --> 01:10:37.110
But in addition to that,
developers like printed API reference.

01:10:37.240 --> 01:10:38.800
They like to be able to highlight things.

01:10:38.800 --> 01:10:41.220
They like to be able to dog-ear things.

01:10:41.220 --> 01:10:42.860
They like that.

01:10:42.920 --> 01:10:43.720
You're sure?

01:10:43.720 --> 01:10:44.500
I'm positive.

01:10:44.500 --> 01:10:47.160
It doesn't just take up space on
your desk and accumulate dust.

01:10:47.160 --> 01:10:48.010
Well, it does.

01:10:48.010 --> 01:10:48.440
It does.

01:10:48.530 --> 01:10:50.560
It takes up quite a bit
of space on the desk,

01:10:50.560 --> 01:10:53.570
but you know, I get a workout,
putting them back up on the shelf,

01:10:53.570 --> 01:10:57.070
and they make me look smart when
I have that whole API reference.

01:10:57.080 --> 01:10:59.060
So you really want this?

01:10:59.180 --> 01:10:59.830
I really want it.

01:10:59.870 --> 01:11:00.660
I really want it.

01:11:01.100 --> 01:11:02.900
So she says you guys really want this.

01:11:02.900 --> 01:11:05.020
Do you really want printed API reference?

01:11:09.040 --> 01:11:11.250
Okay, okay, I guess we can do that.

01:11:11.250 --> 01:11:12.070
Heather Whoa!

01:11:12.290 --> 01:11:15.290
Matt So, it's my pleasure to
announce that we will,

01:11:15.330 --> 01:11:18.220
in fact,
have hard copy API reference for Cocoa,

01:11:18.390 --> 01:11:21.870
Foundation and AppKit,
both Java and Objective-C,

01:11:21.870 --> 01:11:25.300
available this summer in
print-on-demand online.

01:11:25.300 --> 01:11:29.290
So, look for an ADC announcement
of this sometime this summer

01:11:29.290 --> 01:11:33.260
when we've got Jaguar Final,
all of the APIs complete for it,

01:11:33.370 --> 01:11:37.720
and you'll have these big old homes
on your desk that you can access.

01:11:37.720 --> 01:11:38.950
Heather Woo!

01:11:43.800 --> 01:11:46.790
I had no idea that he was going
to announce that whatsoever.

01:11:46.790 --> 01:11:47.940
No idea.

01:11:53.400 --> 01:11:56.300
Okay, so we've shared a lot
of information today.

01:11:56.300 --> 01:12:00.190
Compared to last year,
we have tons of more

01:12:00.510 --> 01:12:02.880
information to provide to you
over the course of the week.

01:12:02.950 --> 01:12:06.160
You all have it in your schedule,
but this is just a roadmap.

01:12:06.160 --> 01:12:08.840
Please don't miss the 9
o'clock session tomorrow.

01:12:08.840 --> 01:12:11.340
We're going to go into what's
new in the Cocoa frameworks.

01:12:11.460 --> 01:12:15.320
And then from then on, API techniques,
scripting, controls and accessibility,

01:12:15.320 --> 01:12:16.520
it goes on and on and on.

01:12:16.520 --> 01:12:19.870
I'm very interested in speaking
with you on Friday at 5 o'clock.

01:12:19.950 --> 01:12:22.280
I know, I know,
the last session of the conference.

01:12:22.280 --> 01:12:25.220
But that way, I'm only going to get the
really important feedback.

01:12:25.220 --> 01:12:26.910
I had that in mind when I planned this.

01:12:27.010 --> 01:12:30.780
So 5 o'clock on Friday,
feedback forum for Cocoa.

01:12:33.310 --> 01:12:34.340
This is me, H.

01:12:34.420 --> 01:12:36.400
Hickman, at Apple.com.

01:12:36.400 --> 01:12:38.620
If you don't catch me in the
hall during the conference,

01:12:38.630 --> 01:12:40.000
please feel free to send me email.

01:12:40.000 --> 01:12:42.630
I will not be reading it this week,
but shortly after,

01:12:42.630 --> 01:12:44.040
I will get back in touch with you.

01:12:44.040 --> 01:12:46.000
Sometimes, that's a bad thing.

01:12:47.580 --> 01:12:49.840
And then for more information,
I'm very excited.

01:12:49.840 --> 01:12:52.170
If you've picked up your bags
and looked at your coupons,

01:12:52.290 --> 01:12:56.670
you see that everyone that's attending
the conference is getting from O'Reilly

01:12:56.700 --> 01:13:01.300
the new building Cocoa applications,
a step-by-step guide.

01:13:01.300 --> 01:13:03.200
I think that is absolutely amazing.

01:13:03.200 --> 01:13:05.520
Please go pick it up,
share it with people when

01:13:05.640 --> 01:13:09.350
you go back to your offices,
have them ordered off the O'Reilly site.

01:13:09.350 --> 01:13:10.250
Great stuff.

01:13:10.760 --> 01:13:14.780
Heather In addition to the
Cocoa developer documentation,

01:13:14.780 --> 01:13:17.880
we also offer customer training.

01:13:17.880 --> 01:13:22.330
We have an incredible group in our
training organization that's helped

01:13:22.560 --> 01:13:25.860
me extensively over the past year,
and I appreciate their support.

01:13:25.860 --> 01:13:26.900
They've done amazing work.

01:13:27.020 --> 01:13:28.460
They're training our internal engineers.

01:13:28.460 --> 01:13:31.110
If you and your company
are interested in training,

01:13:31.110 --> 01:13:34.790
please go to train.apple.com where
you can get more information.

01:13:34.900 --> 01:13:36.510
Have a great week!