WEBVTT

00:00:04.270 --> 00:00:05.200
Hello, everybody.

00:00:05.210 --> 00:00:06.240
Welcome back.

00:00:06.240 --> 00:00:07.960
And let's get started.

00:00:08.040 --> 00:00:12.840
And I'd like to introduce our
next speaker for introduction

00:00:12.930 --> 00:00:16.150
to WebObjects Tools,
Stan Jirman.

00:00:16.210 --> 00:00:19.170
And joining him will be Tom Naughton.

00:00:31.100 --> 00:00:32.000
Hello, everybody.

00:00:32.000 --> 00:00:34.970
Welcome to Introduction
to WebObjects Tools.

00:00:35.290 --> 00:00:36.090
I'm Stan Jiurman.

00:00:36.380 --> 00:00:39.890
Soon,
Tom will be joining me here up on stage.

00:00:41.170 --> 00:00:42.090
What will you learn?

00:00:42.100 --> 00:00:44.820
Well,
that actually depends quite a lot on you,

00:00:44.950 --> 00:00:47.300
how much notes you will be taking,
whether you're going

00:00:47.300 --> 00:00:48.130
to fall asleep or not.

00:00:48.210 --> 00:00:50.920
I'm going to try to not
make you fall asleep.

00:00:51.030 --> 00:00:53.570
We'll be talking here
about the WebObjects tools.

00:00:53.600 --> 00:00:57.130
What are the tools used to
build WebObjects applications?

00:00:57.140 --> 00:01:01.250
And we'll show you how to
build a very basic application.

00:01:01.650 --> 00:01:05.350
How many of you have been here,
this usual poll,

00:01:05.400 --> 00:01:08.390
how many of you have been
here for the 7.01 session,

00:01:08.450 --> 00:01:10.670
the introduction to WebObjects?

00:01:11.210 --> 00:01:11.630
Most of you.

00:01:11.700 --> 00:01:14.900
Okay,
so you had the humor for the week and

00:01:15.100 --> 00:01:19.780
probably a lot of this will be repeat,
but there will be some new stuff.

00:01:19.850 --> 00:01:21.430
We'll be talking about
the WebObjects Tools.

00:01:21.540 --> 00:01:22.560
What are the WebObjects Tools?

00:01:22.640 --> 00:01:24.080
We have Project Builder.

00:01:24.370 --> 00:01:27.890
Project Builder is the same as
is used by CoreOS for all the

00:01:27.990 --> 00:01:30.760
Carbon and Cocoa applications.

00:01:30.760 --> 00:01:32.280
We have WebObjects Builder.

00:01:32.280 --> 00:01:34.050
We saw that in the
previous session as well.

00:01:34.230 --> 00:01:34.780
EOModeler.

00:01:34.780 --> 00:01:36.830
We will not get too much
into EOModeler here.

00:01:37.270 --> 00:01:41.660
There will be an advanced session that
will discuss EOModeler in great detail.

00:01:41.780 --> 00:01:45.140
We will not be talking about the
EO Bean Builder and the Rule Editor.

00:01:45.140 --> 00:01:48.340
It will be discussed in other sessions.

00:01:49.530 --> 00:01:52.690
First, we will start with an
introduction to EOModeler.

00:01:52.780 --> 00:01:55.320
What is an EOModel?

00:01:55.320 --> 00:01:57.000
What does it do for you?

00:01:57.000 --> 00:02:00.360
And why should you be using it?

00:02:00.410 --> 00:02:02.900
Then we'll get into the
project builder introduction.

00:02:02.960 --> 00:02:04.730
This will be a project
builder introduction from

00:02:04.730 --> 00:02:06.370
a WebObjects perspective.

00:02:06.520 --> 00:02:12.550
There was a project builder
discussion or show before in

00:02:12.580 --> 00:02:16.150
the development tools track.

00:02:16.220 --> 00:02:19.520
We'll examine the resources,
we'll compile a project,

00:02:19.520 --> 00:02:21.710
and we'll launch an application.

00:02:22.550 --> 00:02:25.440
Then we will get into the
WebObjects builder introduction.

00:02:25.440 --> 00:02:29.380
We'll be editing components,
we'll be showing you the

00:02:29.620 --> 00:02:34.180
path view for HTML selection,
and we'll show you binding validation,

00:02:34.180 --> 00:02:36.440
which is a very powerful
and useful feature.

00:02:39.510 --> 00:02:44.020
and we will be doing everything on
the example of a common web app.

00:02:44.020 --> 00:02:47.440
We have a real estate app where if
you're in the market for a house,

00:02:47.560 --> 00:02:49.580
you're probably familiar with that.

00:02:49.890 --> 00:02:51.550
You shop online what
house you would like,

00:02:51.550 --> 00:02:54.030
then you check the price,
especially here in the Bay Area,

00:02:54.110 --> 00:02:58.580
you'll find out you can't
afford it and you're frustrated.

00:02:58.730 --> 00:03:01.180
So, first we'll start with eModeler.

00:03:01.180 --> 00:03:04.590
They put those two things
so close together this year.

00:03:04.590 --> 00:03:07.120
You know, last year we had people running
up and down the stage and so

00:03:07.120 --> 00:03:09.010
they wanted to cage us in.

00:03:09.030 --> 00:03:13.360
And it's really difficult to see things.

00:03:13.360 --> 00:03:16.480
So first eModeler, what is it used to?

00:03:16.480 --> 00:03:18.280
It manages an eO model.

00:03:18.690 --> 00:03:23.160
Enterprise objects, short EOs,
they are Java objects which

00:03:23.160 --> 00:03:25.820
represent records in a database.

00:03:25.880 --> 00:03:28.850
EO modeler manages the EO model,
which is the mapping

00:03:29.150 --> 00:03:32.960
between the database,
which is not object-oriented,

00:03:32.960 --> 00:03:37.340
and your Java application, which is,
hopefully.

00:03:37.400 --> 00:03:40.600
It provides persistent
data store connectivity.

00:03:40.760 --> 00:03:46.050
It maps this data, as I said,
and it also defines relationships.

00:03:46.800 --> 00:03:47.740
Oops, excuse me.

00:03:47.830 --> 00:03:50.130
That's one too many.

00:03:50.140 --> 00:03:53.430
EOModeler provides persistent
data store connectivity.

00:03:53.570 --> 00:03:55.500
Each model...

00:03:59.310 --> 00:04:03.720
Each model is used in WebObjects
application to connect to

00:04:03.820 --> 00:04:04.800
a specific data source.

00:04:04.800 --> 00:04:09.200
You can have multiple models in
one WebObjects application also.

00:04:09.300 --> 00:04:12.720
It maps native data types into
Java types because database

00:04:12.890 --> 00:04:17.740
types are not necessarily
clearly mapped into Java types.

00:04:17.890 --> 00:04:22.620
So here you see varchar becomes a string,
and becomes a number.

00:04:23.840 --> 00:04:28.260
It maps data into objects and there's
usually a one-to-one mapping between

00:04:28.260 --> 00:04:32.780
a table column and an EO attribute.

00:04:33.840 --> 00:04:38.740
It creates templates for you so that
you can plug in special getters,

00:04:38.740 --> 00:04:44.860
setters,
and code validation or data validation.

00:04:44.860 --> 00:04:47.800
And it hides the whole middleware.

00:04:47.990 --> 00:04:50.630
The EO model is just the
little tip of the iceberg,

00:04:50.800 --> 00:04:54.270
the part that, especially when you're
starting out with WebObjects,

00:04:54.400 --> 00:04:56.400
that's the only part that
you need to deal with.

00:04:56.500 --> 00:04:58.950
There's the whole stack of
the two enterprise objects,

00:04:58.950 --> 00:05:01.200
frameworks, EO control, and EO access.

00:05:01.370 --> 00:05:04.270
And that's hidden,
and that does all the work for you.

00:05:05.850 --> 00:05:09.850
So basically the EO Modeler
provides a layer of abstraction

00:05:10.330 --> 00:05:12.670
that minimizes the cost of change.

00:05:12.720 --> 00:05:15.420
So when you change the database,
you actually just adjust a few settings

00:05:15.880 --> 00:05:19.540
in EO Modeler and your application
continues working because that's the

00:05:19.670 --> 00:05:23.040
whole abstraction layer and the rest of
your application should not know anything

00:05:23.040 --> 00:05:25.760
about the database that's being used.

00:05:26.220 --> 00:05:29.050
Now I would like to welcome Tom on stage.

00:05:29.050 --> 00:05:31.000
He will show us EOModeler.

00:05:31.100 --> 00:05:33.100
Tom, thank you.

00:05:33.100 --> 00:05:35.100
Thank you, Stan.

00:05:38.510 --> 00:05:40.420
Tom really loves EOModeler here.

00:05:40.430 --> 00:05:40.540
Oh, yes.

00:05:40.540 --> 00:05:41.980
Everyone loves EOModeler here.

00:05:41.980 --> 00:05:42.800
Yes.

00:05:42.800 --> 00:05:46.260
I'm just going to show you some basic
things that you'll use EOModeler for.

00:05:46.260 --> 00:05:49.410
If you're starting out and
you already have a database,

00:05:49.410 --> 00:05:51.570
the first thing you'll need
is a model so that you can

00:05:51.570 --> 00:05:53.340
start using the EOF framework.

00:05:53.360 --> 00:05:56.870
And EOModeler has a nice assistant
that will reverse engineer

00:05:56.870 --> 00:05:58.770
that database into an EOModel.

00:05:58.780 --> 00:06:03.680
And this is always the standard
beginning EOModeler demo.

00:06:03.680 --> 00:06:06.440
So first you choose the
adapter that you're going to

00:06:06.540 --> 00:06:08.060
use to access your database.

00:06:08.400 --> 00:06:10.140
Then you need to enter the URL.

00:06:10.140 --> 00:06:14.400
And here this is the special time
that we saw in the previous demo.

00:06:14.400 --> 00:06:18.400
We are actually using stickies to
write WebObjects applications as well.

00:06:18.400 --> 00:06:18.890
Yes.

00:06:18.960 --> 00:06:21.750
Stickies is the demoer's crutch.

00:06:21.960 --> 00:06:24.400
It avoids typing in public.

00:06:24.880 --> 00:06:28.910
which can save one a lot of frustration.

00:06:28.910 --> 00:06:31.190
There are various options that you
have in the assistant that helps

00:06:31.200 --> 00:06:32.890
you reverse engineer your database.

00:06:33.010 --> 00:06:35.380
For simplicity,
we're just going to go with

00:06:35.380 --> 00:06:37.130
the basic default options.

00:06:37.140 --> 00:06:38.530
Just click finish here.

00:06:38.620 --> 00:06:40.550
And now it runs out,
it accesses the database,

00:06:40.550 --> 00:06:45.410
it finds all the rows and tables,
and it figures out what the entities are,

00:06:45.410 --> 00:06:47.040
what the relationships are.

00:06:47.120 --> 00:06:51.950
It maps their types to Java types
and creates this model for you.

00:06:52.200 --> 00:06:54.410
The next thing we can do is
take a look at some of the

00:06:54.410 --> 00:06:55.790
things we have in the model.

00:06:55.940 --> 00:07:00.300
This is the real estate example that
you're going to see quite a lot.

00:07:00.380 --> 00:07:03.450
If we look at a listing,
you'll see that there's attributes

00:07:03.450 --> 00:07:06.640
for things that you would expect
to find about a house for sale.

00:07:06.640 --> 00:07:11.120
For example, the bathrooms, the price,
the size of the yard,

00:07:11.120 --> 00:07:12.180
the size of the house.

00:07:12.270 --> 00:07:18.170
And there's a relationship to a user
who's the agent who listed this house.

00:07:18.750 --> 00:07:23.040
Next we can take a look at objects
in the database by clicking on

00:07:23.060 --> 00:07:24.690
the database browser button.

00:07:24.930 --> 00:07:26.690
This brings up

00:07:26.810 --> 00:07:28.920
Just some tables from the
database so that you can make

00:07:28.920 --> 00:07:31.120
sure that your model is working,
make sure that you're

00:07:31.180 --> 00:07:34.290
connecting to the database,
and make sure that the values in the

00:07:34.300 --> 00:07:35.980
database are pretty much what you expect.

00:07:40.820 --> 00:07:43.930
Another thing that you'd probably
want to do next is maybe add some

00:07:43.930 --> 00:07:46.200
custom business logic to your objects.

00:07:46.200 --> 00:07:50.580
The way you do that is you generate
Java code for some of these entities,

00:07:50.580 --> 00:07:53.200
the ones that you want to
add custom behaviors to.

00:07:53.200 --> 00:07:54.620
First, we save the model.

00:07:54.620 --> 00:07:57.790
When you save the model,
EOModeler does a consistency check.

00:07:57.800 --> 00:08:00.980
It looks and makes sure that
everything is kosher in its opinion

00:08:00.980 --> 00:08:03.890
and gives you a list of things that
might be problems down the road.

00:08:03.920 --> 00:08:06.100
I don't really agree with it here.

00:08:06.100 --> 00:08:07.740
What did you screw up this time, Tom?

00:08:09.120 --> 00:08:12.000
It doesn't like that something
is using the name description,

00:08:12.000 --> 00:08:15.560
so whoever designed the database
is in fact the one who screwed up.

00:08:15.650 --> 00:08:16.280
Oh, okay.

00:08:16.280 --> 00:08:18.180
But it's not really a problem.

00:08:18.180 --> 00:08:20.780
All the demos work,
and it's not my fault.

00:08:20.810 --> 00:08:24.300
So we're just going to save,
give it a name,

00:08:24.300 --> 00:08:29.880
save that in the home directory so
that we don't mess up other demos.

00:08:29.880 --> 00:08:33.900
And then you click on
this little Java button,

00:08:33.900 --> 00:08:37.540
and it wants us to specify a class name.

00:08:37.650 --> 00:08:40.160
It's recommending we use
listing because we're generating

00:08:40.160 --> 00:08:41.540
Java for the listing object.

00:08:41.540 --> 00:08:43.490
I'm just going to go ahead and do that.

00:08:43.520 --> 00:08:44.590
All right.

00:08:45.500 --> 00:09:17.500
[Transcript missing]

00:09:18.840 --> 00:09:21.810
I could, let's see,
actually I meant to do

00:09:21.810 --> 00:09:24.960
this on the user object,
but we've done the listing object,

00:09:25.070 --> 00:09:28.590
and I was going to add a method
to get the full name of a user,

00:09:28.590 --> 00:09:32.850
but let's say we wanted a method
that returned the total number

00:09:32.850 --> 00:09:34.960
of bedrooms and bathrooms.

00:09:35.000 --> 00:09:38.950
Let's see.

00:09:40.730 --> 00:09:41.140
Total rooms.

00:09:41.140 --> 00:09:41.840
That probably won't work.

00:09:41.950 --> 00:09:42.340
What's that?

00:09:42.460 --> 00:09:43.740
Total rooms.

00:09:43.860 --> 00:09:44.460
Total rooms.

00:09:44.520 --> 00:09:47.520
Yeah, but I'm running into this
number of class issues.

00:09:47.610 --> 00:09:50.000
Here, let me just do it as
I originally planned,

00:09:50.000 --> 00:09:53.690
because I don't want to
embarrass myself excessively.

00:09:54.400 --> 00:09:57.510
Go back here, choose the user object.

00:09:57.510 --> 00:09:59.530
Users are down here.

00:10:00.800 --> 00:10:05.000
Click to generate Java, use user, save,
and the home directory will be fine.

00:10:05.000 --> 00:10:10.310
Go down here to user Java,
where we in fact do have methods

00:10:10.350 --> 00:10:12.340
for getting a first and last name.

00:10:12.340 --> 00:10:14.440
In there somewhere.

00:10:16.640 --> 00:10:19.400
You could also just find it.

00:10:19.420 --> 00:10:19.700
There you go.

00:10:19.700 --> 00:10:21.240
So first name, and we've got last name.

00:10:21.240 --> 00:10:24.260
And we wanted to add a
method for the full name,

00:10:24.260 --> 00:10:25.590
which I have here in stickies.

00:10:25.590 --> 00:10:28.480
This is why I wanted to
use this particular object,

00:10:28.500 --> 00:10:29.790
because I could just base the code in.

00:10:29.860 --> 00:10:30.340
Nice blue palm.

00:10:30.340 --> 00:10:31.540
Yes, there we go.

00:10:31.540 --> 00:10:31.880
Very visible.

00:10:31.880 --> 00:10:32.340
So there we go.

00:10:32.350 --> 00:10:35.370
So now we have an additional method
that produces a derived attribute

00:10:35.550 --> 00:10:37.000
of the full name of the user.

00:10:37.000 --> 00:10:42.410
Now, you might want to do something like,
when you set the name, you could...

00:10:42.700 --> 00:10:43.900
You know,
make sure that you don't have someone

00:10:43.900 --> 00:10:46.530
else with the same name that conflicts,
maybe unique things.

00:10:46.580 --> 00:10:50.100
You could, when you create a new user,
you could make sure that each customer

00:10:50.100 --> 00:10:54.480
is assigned an agent or other various,
you know, business logic type things.

00:10:54.480 --> 00:10:56.580
So then the last thing
I wanted to show you.

00:10:56.580 --> 00:10:59.930
So let's say you started with a
brand new database that you just

00:10:59.930 --> 00:11:02.800
designed here in your modeler,
and you want to hook it up to

00:11:02.800 --> 00:11:05.510
Oracle and have it generate all
the tables and rows for you.

00:11:05.520 --> 00:11:07.650
You could write readings of SQL,
or you could just have

00:11:07.650 --> 00:11:08.540
your modeler do it.

00:11:08.780 --> 00:11:11.280
You click here, and you specify that,
you know,

00:11:11.430 --> 00:11:14.560
I want to create and drop tables,
and I just basically just want

00:11:14.560 --> 00:11:17.320
to do everything to create the
entire database from scratch,

00:11:17.320 --> 00:11:19.590
and this is all the
SQL that would do that.

00:11:19.640 --> 00:11:22.240
And if I went ahead and executed that,
it would delete everything

00:11:22.250 --> 00:11:24.030
out of the database,
and the rest of the demos

00:11:24.030 --> 00:11:24.980
wouldn't do anything.

00:11:24.980 --> 00:11:26.340
So I won't do that right now.

00:11:26.340 --> 00:11:29.500
But anyway, that was just sort of a quick
overview of what you use your

00:11:29.500 --> 00:11:31.890
modeler for and how it works,
and how it works for you

00:11:31.890 --> 00:11:33.230
and how you work for it.

00:11:33.240 --> 00:11:35.360
Yeah, especially the last part.

00:11:35.360 --> 00:11:35.980
Thank you, Tom.

00:11:35.980 --> 00:11:36.970
Just stay here with us.

00:11:36.980 --> 00:11:38.350
Yeah, I'll sit right down here.

00:11:40.520 --> 00:11:42.120
So let's go back to the slides.

00:11:42.230 --> 00:11:44.860
So much for EModeler.

00:11:45.240 --> 00:11:48.110
We will now turn to Project Builder.

00:11:48.420 --> 00:11:49.740
Project Builder, what is Project Builder?

00:11:49.740 --> 00:11:53.660
Project Builder is the IDE for
all WebObjects 5 applications.

00:11:53.770 --> 00:11:59.080
You use it to manage your resources,
your static data, images,

00:11:59.080 --> 00:12:06.260
and also dynamic components such
as actually EO model files are

00:12:06.260 --> 00:12:09.540
considered database dynamic elements.

00:12:09.610 --> 00:12:14.100
Now in WebObjects 5 we introduced
this new no longer bucket scheme.

00:12:14.100 --> 00:12:17.620
Until then we had those buckets that
all classes had to be together and all

00:12:17.620 --> 00:12:20.000
WebObjects components had to be together,
et cetera.

00:12:20.000 --> 00:12:22.470
Now you can have stuff
all over the place.

00:12:22.570 --> 00:12:26.330
Now if I can take a quick poll,
who likes this new style better?

00:12:26.460 --> 00:12:30.340
Raise your hand if you
like the new style better.

00:12:30.430 --> 00:12:33.100
And for just because maybe
people don't know the difference,

00:12:33.100 --> 00:12:36.780
who would like the old style better,
the buckets, like all classes together

00:12:36.870 --> 00:12:39.440
and all Java components,
I mean web components?

00:12:39.540 --> 00:12:40.020
Nobody.

00:12:40.230 --> 00:12:42.440
You see,
we improved the product big time.

00:12:44.100 --> 00:12:49.280
Project Builder allows you
to edit and debug the code.

00:12:49.280 --> 00:12:54.260
It builds whole
applications or frameworks.

00:12:54.260 --> 00:12:57.180
And it also allows you to
launch and actually be active

00:12:57.180 --> 00:12:59.960
in the debugging procedure.

00:12:59.960 --> 00:13:02.160
Project Builder has two
kinds of assistance that

00:13:02.160 --> 00:13:03.900
are specific to WebObjects.

00:13:03.900 --> 00:13:07.860
There is the project assistance
and there's the file assistance.

00:13:07.900 --> 00:13:11.520
First, what do the project
assistance do for you?

00:13:11.520 --> 00:13:14.090
They help you with completely
new project creation.

00:13:14.100 --> 00:13:19.280
They create, build,
compileable skeleton applications.

00:13:19.420 --> 00:13:23.250
So whatever comes out of a project
assistant is completely compilable.

00:13:23.250 --> 00:13:28.620
It doesn't do much, but it compiles,
which is already a plus.

00:13:28.620 --> 00:13:33.000
And those assistance allow you
to add basic resources to the

00:13:33.120 --> 00:13:35.610
project and also your models.

00:13:35.710 --> 00:13:38.520
Then we have file assistance.

00:13:38.520 --> 00:13:43.600
File assistance are used for
when you already have a project,

00:13:43.600 --> 00:13:46.580
you are editing a project,
and you want to add new files to it,

00:13:46.660 --> 00:13:50.140
such as Java classes,
such as web components,

00:13:50.140 --> 00:13:51.760
and Java client NIPS.

00:13:54.730 --> 00:14:00.140
Since Tom is already camping out here,
why not use his time?

00:14:00.250 --> 00:14:01.290
Get rid of modeler.

00:14:01.300 --> 00:14:02.260
Get rid of modeler.

00:14:02.260 --> 00:14:03.660
We'll not save this time.

00:14:03.790 --> 00:14:04.840
And the sticky.

00:14:04.890 --> 00:14:07.000
We don't need stickies anymore.

00:14:07.030 --> 00:14:10.470
So I'm going to take the database that
I showed you in the last example and

00:14:10.470 --> 00:14:14.610
show you how quickly you can just take
that and generate a working HTML-based

00:14:14.610 --> 00:14:17.160
application using one of the assistants.

00:14:17.160 --> 00:14:19.490
So we're going to make a new project.

00:14:19.690 --> 00:14:20.780
Let's go all the way down to the bottom.

00:14:20.780 --> 00:14:23.420
You get a list of all the
WebObjects assistants.

00:14:23.440 --> 00:14:24.400
There's a variety.

00:14:24.470 --> 00:14:28.560
You can create an EOF application
that uses Cocoa and Java so that you

00:14:28.610 --> 00:14:32.220
can have all the functionality of
EOF and then a nice Cocoa interface.

00:14:32.330 --> 00:14:34.610
We have a bunch of
direct-to-star technologies,

00:14:34.610 --> 00:14:35.460
we call them.

00:14:35.490 --> 00:14:37.580
There are lots of other
sessions that cover that.

00:14:37.620 --> 00:14:41.550
But basically they allow you to
sort of dynamically configure

00:14:41.550 --> 00:14:43.680
your application as it's running.

00:14:43.720 --> 00:14:48.100
And the one I'm going to show you is
kind of an old-fashioned type of example.

00:14:48.270 --> 00:14:54.720
It generates just an HTML page that
you then take over and make pretty.

00:14:54.720 --> 00:14:56.730
So it's called a display
group application.

00:14:56.760 --> 00:15:01.060
A display group is an object that manages
a bunch of objects from a data store.

00:15:01.060 --> 00:15:04.400
So, for example,
it could paginate a long list of data.

00:15:04.410 --> 00:15:06.820
You could say, you know,
I just want to have ten per page and it

00:15:06.830 --> 00:15:10.380
will automatically handle going to the
next page and showing the next group.

00:15:10.420 --> 00:15:14.600
And it does searching and lots
of other handy things for you.

00:15:14.600 --> 00:15:18.000
So we're just going to
call this demo or dem.

00:15:18.330 --> 00:15:19.240
Demo or dem.

00:15:19.240 --> 00:15:20.040
We'll put it in tem.

00:15:20.040 --> 00:15:22.200
No sticky for that, Tom?

00:15:22.200 --> 00:15:23.080
No, no.

00:15:23.080 --> 00:15:24.350
It doesn't really matter.

00:15:24.410 --> 00:15:26.000
It's not important.

00:15:26.000 --> 00:15:27.810
Oops, okay, and I just passed.

00:15:27.810 --> 00:15:31.430
We're not going to deploy it as a J2EE,
on a J2EE-enabled server.

00:15:31.540 --> 00:15:34.710
We're not going to vend
or consume web services.

00:15:34.750 --> 00:15:37.020
We're going to use the JDBC adapter.

00:15:37.060 --> 00:15:41.270
And we're going to add a framework
that contains the real estate

00:15:41.270 --> 00:15:43.820
model and uses the real estate
database that I showed you.

00:15:43.910 --> 00:15:47.040
This framework also has a lot of
business logic already added for the,

00:15:47.040 --> 00:15:50.060
for the,
for the Java real estate database.

00:15:50.080 --> 00:15:52.910
Now, Steve, in the session before,
he was showing a

00:15:53.020 --> 00:15:54.860
relevant demo for Canada.

00:15:54.860 --> 00:15:58.580
This will be a very relevant demo,
or the rest of the session

00:15:58.580 --> 00:16:01.590
will be very relevant to the
Bay Area to get you familiarized

00:16:01.760 --> 00:16:04.350
with the Bay Area house prices,
et cetera.

00:16:04.350 --> 00:16:04.820
So.

00:16:04.820 --> 00:16:06.800
And Stan and I took all these pictures.

00:16:06.800 --> 00:16:07.280
Yes.

00:16:07.280 --> 00:16:09.120
Which you'll see.

00:16:09.120 --> 00:16:11.990
So it found the model that was inside
the framework and listed in the models.

00:16:11.990 --> 00:16:15.750
We could add additional models and
it would use them all together.

00:16:16.390 --> 00:16:20.370
Next, then it's opened the model and
found all the entities within it.

00:16:20.410 --> 00:16:24.490
We're just going to display a
bunch of attributes on a listing.

00:16:24.680 --> 00:16:27.190
We get to choose the
layout for our HTML page.

00:16:27.210 --> 00:16:30.820
I'm going to do a table and
I want to be able to search it.

00:16:30.930 --> 00:16:33.350
So I'm going to have some query fields.

00:16:33.440 --> 00:16:36.270
And I just wanted to
show all the attributes,

00:16:36.270 --> 00:16:37.200
I guess.

00:16:37.940 --> 00:16:40.140
That was a shift click to
select everything and then

00:16:40.140 --> 00:16:41.400
just drag them all over.

00:16:41.400 --> 00:16:44.900
And I'm not traversing relationships
because I just want to show these.

00:16:44.900 --> 00:16:46.510
Now we choose the
attributes for the query.

00:16:46.530 --> 00:16:48.970
I'm just going to be able to
search on number of bedrooms,

00:16:48.970 --> 00:16:53.380
number of bathrooms, selling price would
have to enter a range,

00:16:53.380 --> 00:16:56.150
which would be a lot more complicated.

00:16:56.180 --> 00:16:57.250
And what else?

00:16:57.250 --> 00:17:01.630
I wanted to search on the address
so that we can look for houses in

00:17:01.630 --> 00:17:03.710
San Jose and houses in California.

00:17:03.710 --> 00:17:05.650
That should be good enough for a demo.

00:17:05.720 --> 00:17:06.120
Click finish.

00:17:06.210 --> 00:17:09.950
It makes a project with a web component.

00:17:09.950 --> 00:17:12.500
Start that building.

00:17:12.500 --> 00:17:15.200
It added the framework
down here in frameworks.

00:17:15.200 --> 00:17:18.150
A few Java classes.

00:17:21.970 --> 00:17:25.010
So very soon,
Internet Explorer will pop up.

00:17:25.100 --> 00:17:27.400
I'll show you the application.

00:17:27.400 --> 00:17:30.980
OK, so it basically gave us--
it's got a form with the query

00:17:31.070 --> 00:17:32.900
attributes that I asked for.

00:17:32.900 --> 00:17:36.440
And it's got a table down here that's
currently just got the headers.

00:17:36.500 --> 00:17:39.570
So we're going to search
for houses in California.

00:17:39.580 --> 00:17:41.800
I guess that's probably
going to be all of them.

00:17:44.140 --> 00:17:47.440
And it's not a very pretty table,
but you can go ahead and beautify that,

00:17:47.500 --> 00:17:50.320
pass it over to the artist,
have them draw some pretty pictures,

00:17:50.320 --> 00:17:53.230
and make an appealing interface for it.

00:17:53.260 --> 00:17:56.670
So that was just an example of a project
wizard that'll just get you started

00:17:57.040 --> 00:17:59.000
along the road of building your project.

00:17:59.000 --> 00:18:01.850
We also have some file wizards,
which we'd use to add

00:18:01.850 --> 00:18:03.840
resources to existing projects.

00:18:03.920 --> 00:18:08.050
So, for example,
if we wanted to add a Java class,

00:18:08.050 --> 00:18:13.000
we go down here to WebObjects
Java class and give it a name.

00:18:16.200 --> 00:18:35.650
is able to type.

00:18:35.650 --> 00:18:35.650
And it just adds that to your project.

00:18:35.650 --> 00:18:35.650
You can actually
customize these templates.

00:18:35.650 --> 00:18:35.650
They're just in the project
builder extras folder,

00:18:35.650 --> 00:18:35.650
which you can find out all about in
one of the project builder sessions.

00:18:35.650 --> 00:18:35.650
So if your company has your
own company header and you

00:18:35.650 --> 00:18:35.650
commonly include other packages,
you could add that to templates and

00:18:35.650 --> 00:18:35.650
save yourself a little bit of work.

00:18:36.220 --> 00:18:37.200
That's it?

00:18:37.200 --> 00:18:38.160
That covers assistants.

00:18:38.250 --> 00:18:40.540
I think the basic point here is,
as Tom showed,

00:18:40.620 --> 00:18:44.160
the resulting application is maybe
not the prettiest application,

00:18:44.160 --> 00:18:46.940
but let's face it,
most people on the planet,

00:18:47.000 --> 00:18:51.340
they are much more at ease with
designing a web page to make it beautiful

00:18:51.340 --> 00:18:53.340
than with talking to a database.

00:18:53.390 --> 00:18:55.440
And that's exactly what those
frameworks are all about,

00:18:55.440 --> 00:19:00.000
and those tools help you to
do-- get the hard stuff done.

00:19:00.000 --> 00:19:04.230
And us programmers, at least many of us,
are really not that good with

00:19:04.230 --> 00:19:07.140
beautifying web pages either,
but we can outsource that, right?

00:19:07.140 --> 00:19:07.600
There we go.

00:19:07.600 --> 00:19:09.380
So, okay.

00:19:11.230 --> 00:19:13.340
The next thing is project
structure in Project Builder.

00:19:13.340 --> 00:19:14.420
I already touched on that.

00:19:14.590 --> 00:19:19.430
That has changed quite a lot between
the old WebObjects project types

00:19:19.950 --> 00:19:24.200
and the ones that we introduced
in WebObjects 5 just a year ago.

00:19:24.320 --> 00:19:28.250
The project structure in
Project Builder is target oriented.

00:19:28.820 --> 00:19:33.790
and it's just a modified version
of the OS X normal build system.

00:19:33.790 --> 00:19:36.230
It's a quite substantially
modified version,

00:19:36.230 --> 00:19:40.380
but nevertheless it's
basically the same foundation.

00:19:40.510 --> 00:19:44.380
For those of you who are not familiar
with the build system of WebObjects,

00:19:44.480 --> 00:19:46.040
what is a target?

00:19:46.130 --> 00:19:51.370
A target defines which files
are parts of a particular

00:19:51.450 --> 00:19:53.820
component of a build product.

00:19:53.970 --> 00:19:57.970
One file can be part of
multiple such subproducts,

00:19:58.090 --> 00:19:59.360
such targets.

00:19:59.570 --> 00:20:04.000
For instance,
there's Java components for clients that

00:20:04.000 --> 00:20:07.940
are both on the server and on the client,
so they will be part of

00:20:07.940 --> 00:20:10.930
both or multiple targets.

00:20:11.360 --> 00:20:13.240
This is typical deployment scenario.

00:20:13.260 --> 00:20:15.140
We have an application server.

00:20:15.220 --> 00:20:16.160
We have a web server.

00:20:16.440 --> 00:20:20.480
I would like to point out that these
are probably some old Solaris servers.

00:20:20.570 --> 00:20:23.880
Of course, as of next week, today,
you will be able to buy those nice,

00:20:23.950 --> 00:20:26.800
what Steve showed, this little thing.

00:20:27.220 --> 00:20:29.840
New Apple branded servers.

00:20:29.950 --> 00:20:32.120
Then we have a firewall.

00:20:32.180 --> 00:20:39.770
And then comes the big old intranet
with nice and not so nice clients.

00:20:40.210 --> 00:20:42.650
We have the web server target.

00:20:42.660 --> 00:20:45.260
It was the first machine up there.

00:20:45.530 --> 00:20:47.740
The web server serves the static data.

00:20:47.860 --> 00:20:51.410
The static images, static HTML,
like your price list,

00:20:51.800 --> 00:20:56.120
client-side Java classes,
Java client Nib files,

00:20:56.120 --> 00:21:01.460
and anything that's accessed through
a normal HTML that you could type in,

00:21:01.460 --> 00:21:04.240
and when you type it in again,
it will be still the same thing.

00:21:04.240 --> 00:21:06.870
On the other hand,
there's the application server target.

00:21:06.900 --> 00:21:12.870
That's for all the dynamic content,
such as server-side Java classes,

00:21:12.910 --> 00:21:17.740
which are classes that get
downloaded that stay on the server.

00:21:17.740 --> 00:21:21.030
Web components that get
dynamically built and they're

00:21:21.030 --> 00:21:23.180
displayed in your application.

00:21:23.180 --> 00:21:25.540
Images generated on the fly.

00:21:25.540 --> 00:21:29.470
One of the biggest examples
for that is iCards.

00:21:29.480 --> 00:21:33.170
When you go to Apple's website and
you want to send a cute email with

00:21:33.170 --> 00:21:36.360
a nice card to your mom because
it's Mother's Day coming up,

00:21:36.410 --> 00:21:40.180
and your models, for some strange reason,
they're considered dynamic.

00:21:40.180 --> 00:21:43.960
Now, warning,
do not rename targets and don't really

00:21:44.130 --> 00:21:48.170
mess with them unless you really,
really know what you're doing.

00:21:48.210 --> 00:21:49.550
It's a dangerous thing.

00:21:49.650 --> 00:21:53.590
Tom is more or less the only person known
to man on the planet who can fix them.

00:21:53.620 --> 00:21:55.740
If he's on vacation, we're in trouble.

00:21:55.740 --> 00:21:59.020
So chances are,
if you go and mess with the targets,

00:21:59.100 --> 00:22:02.270
your application will
not get to the better.

00:22:03.750 --> 00:22:07.180
So, Tom, we just said your name,
and since you are Mr.

00:22:07.280 --> 00:22:10.030
Target, don't drop your mic.

00:22:10.110 --> 00:22:11.650
My mic falls to the floor.

00:22:12.010 --> 00:22:13.590
Gravity at its best.

00:22:13.600 --> 00:22:15.570
And then I stepped on it.

00:22:15.580 --> 00:22:17.340
Yeah, let's hope it still works.

00:22:20.210 --> 00:22:20.890
Still works?

00:22:20.930 --> 00:22:21.740
Still works.

00:22:21.790 --> 00:22:23.990
Okay, so targets.

00:22:24.050 --> 00:22:26.890
Let's see, we're going to go back to our
DEMP project that we created earlier

00:22:27.380 --> 00:22:28.940
and just show you the targets in there.

00:22:29.040 --> 00:22:31.050
So as Stan said,
there are two main targets.

00:22:31.140 --> 00:22:35.100
Here, let's click on the targets
tab so you can see them.

00:22:35.320 --> 00:22:38.180
There's the application server
target and the web server target.

00:22:38.180 --> 00:22:40.470
And then one more target
that's kind of the root target,

00:22:40.480 --> 00:22:42.540
really just there to build the other two.

00:22:42.540 --> 00:22:45.720
But it can be a little misleading
because that's always the default

00:22:45.720 --> 00:22:49.940
target that pops up whenever an
add to target panel comes down.

00:22:49.940 --> 00:22:53.240
So I always have to remember
when you're selecting targets,

00:22:53.280 --> 00:22:55.620
the default target probably isn't
where you want to put things.

00:22:55.620 --> 00:22:59.340
You either want to put things on the
application server if it's dynamic and

00:22:59.340 --> 00:23:02.620
needs to be part of your application,
or on the web server if it's going

00:23:02.860 --> 00:23:04.360
to be downloaded to a client.

00:23:04.820 --> 00:23:07.000
So as long as you keep that in mind,
is this going to the client,

00:23:07.040 --> 00:23:09.950
does it belong on the web server,
then you'll be able to choose which

00:23:09.950 --> 00:23:11.680
target to add your resources to.

00:23:11.680 --> 00:23:15.330
So we can click on these targets,
and we get this nice panel that shows

00:23:15.330 --> 00:23:17.500
us everything that's in the target.

00:23:17.500 --> 00:23:23.480
So the application server has all the
Java classes and component resources for

00:23:23.500 --> 00:23:25.700
application and a number of frameworks.

00:23:25.700 --> 00:23:27.300
Look on the web server.

00:23:29.000 --> 00:23:33.860
There are all the frameworks because each
framework can have web server resources.

00:23:33.860 --> 00:23:38.140
And there's a bunch of GIFs that
the assistant put in there for us.

00:23:38.220 --> 00:23:41.930
If we'd actually chosen an option to
add and remove records to the database,

00:23:41.930 --> 00:23:43.790
it puts nice little
buttons with pretty GIFs,

00:23:43.910 --> 00:23:46.200
and it just puts those GIFs
right in your project because

00:23:46.200 --> 00:23:48.240
you've chosen that project type.

00:23:48.240 --> 00:23:51.470
So another way to look at targets
is click on the files tab.

00:23:51.570 --> 00:23:55.900
Then you'll notice along the side
here you have a bunch of check boxes.

00:23:55.900 --> 00:23:58.790
And the check boxes are turned on
for things that are in a target.

00:23:58.970 --> 00:24:01.260
And I just noticed when
I added that Java class,

00:24:01.310 --> 00:24:02.840
I put it in the main target.

00:24:02.880 --> 00:24:03.930
So that's wrong.

00:24:03.940 --> 00:24:05.500
Let's get that out of the main target.

00:24:05.590 --> 00:24:07.400
It would actually go in the
application server target.

00:24:07.400 --> 00:24:09.240
It's actually a very important thing.

00:24:09.240 --> 00:24:13.780
You will see that when you go,
maybe you play with the product down in

00:24:13.780 --> 00:24:16.920
the lab or when you play with it at home,
it's really important to

00:24:16.920 --> 00:24:18.480
which target you add a class.

00:24:18.480 --> 00:24:21.790
You might find yourself, well,
I added a Java file to the project.

00:24:21.880 --> 00:24:23.770
I'm building it, but it's not showing up.

00:24:23.910 --> 00:24:26.530
Make sure you added it
to the right target,

00:24:26.820 --> 00:24:27.260
not to the main one.

00:24:27.260 --> 00:24:30.770
Because the main target is just
a wrapper for the other two,

00:24:30.800 --> 00:24:32.760
which is the web server
and the app server.

00:24:32.760 --> 00:24:35.120
But unfortunately,
PB's interface is to always

00:24:35.120 --> 00:24:36.490
default to the main target.

00:24:36.490 --> 00:24:38.490
So if you just follow
the default behavior,

00:24:38.490 --> 00:24:40.860
it will put it in the wrong target.

00:24:40.940 --> 00:24:43.660
Very important to keep in mind.

00:24:43.660 --> 00:24:45.360
So this is everything that's in
our application server target.

00:24:45.360 --> 00:24:48.950
It's sort of just like the other
target viewer that I showed you,

00:24:48.950 --> 00:24:51.990
except it's easier just to turn
the check boxes on and off,

00:24:51.990 --> 00:24:52.460
I find.

00:24:52.520 --> 00:24:54.720
So take a look at the web server.

00:24:54.720 --> 00:24:54.910
And it's like I showed you before.

00:24:54.920 --> 00:24:55.300
All of the GIFs are in the main target.

00:24:55.300 --> 00:24:55.420
And then you can see that the
main target is the main target.

00:24:55.420 --> 00:24:55.500
So this is everything that's in
our application server target.

00:24:55.520 --> 00:24:55.600
It's sort of just like the other
target viewer that I showed you,

00:24:55.600 --> 00:24:56.590
except it's easier just to turn
the check boxes on and off,

00:24:56.590 --> 00:24:56.840
I find.

00:24:56.840 --> 00:24:59.830
All of the GIFs are in the web server
because they need to be downloaded

00:24:59.950 --> 00:25:04.490
over HTTP and all of the frameworks,
except for a few that we added.

00:25:04.630 --> 00:25:06.240
For example,
the JDBC adapter doesn't need

00:25:06.250 --> 00:25:09.120
to be on the web server because
no one's going to download your

00:25:09.120 --> 00:25:11.060
adapter for talking to the database.

00:25:11.070 --> 00:25:13.210
So it just goes in the
application server target.

00:25:13.220 --> 00:25:16.170
Anyway,
this should give you an idea of what

00:25:16.170 --> 00:25:20.450
goes in which target and how you can move
something from one target to another.

00:25:22.320 --> 00:25:23.200
Well, thank you, Tom.

00:25:23.200 --> 00:25:24.200
Sure, Stan.

00:25:24.320 --> 00:25:26.490
You don't even need to sit down
because this will be just one

00:25:26.530 --> 00:25:28.910
slide before you do the next demo.

00:25:30.590 --> 00:25:32.620
One picture says more
than a thousand words,

00:25:32.760 --> 00:25:36.230
so we'll let you do the magic soon.

00:25:36.550 --> 00:25:38.200
Let's get to WebObjects Builder.

00:25:38.270 --> 00:25:42.480
We saw already a demo of WebObjects
Builder in the previous session,

00:25:42.480 --> 00:25:44.500
and we'll see now another one.

00:25:44.580 --> 00:25:46.730
What is WebObjects Builder used for?

00:25:46.880 --> 00:25:52.060
For editing of HTML,
binding of HTML objects to your project,

00:25:52.180 --> 00:25:56.040
the dynamic connections,
integration with your model,

00:25:56.120 --> 00:26:01.100
of the EO model into your HTML pages,
and it integrates with Project Builder.

00:26:01.100 --> 00:26:03.540
So both applications,
Project Builder and WebObjects Builder,

00:26:03.540 --> 00:26:07.870
are talking to each other to
synchronize the IVARs and method

00:26:07.870 --> 00:26:09.880
names that might be around.

00:26:10.010 --> 00:26:12.500
So let's go straight to the meat,
and Tom,

00:26:12.650 --> 00:26:15.300
show us about WebObjects Builder.

00:26:15.370 --> 00:26:18.410
Okay, so for this demo,
we're gonna build an extremely simple,

00:26:18.490 --> 00:26:20.740
brand-new WebObjects application.

00:26:20.840 --> 00:26:22.790
We need to start with
the assistant again.

00:26:22.910 --> 00:26:24.200
And this time I just used,
down at the bottom,

00:26:24.200 --> 00:26:25.380
WebObjects application.

00:26:25.380 --> 00:26:28.580
That's the most vanilla template
that you can start with.

00:26:29.260 --> 00:26:34.890
Choose that, give it a name,
we'll call this demo two, or DEMP two.

00:26:36.460 --> 00:26:40.040
We're not going to do
anything terribly fancy,

00:26:40.050 --> 00:26:42.160
so we'll just go with all the defaults.

00:26:42.160 --> 00:26:45.690
It builds us this project and
this default web component,

00:26:45.780 --> 00:26:47.910
which we're going to open in

00:26:50.440 --> 00:26:56.800
So the builder is basically a
cross between an HTML editor

00:26:56.800 --> 00:26:58.060
and a code browser.

00:26:58.320 --> 00:27:02.300
Up at the top there's the toolbar,
which is mostly for HTML editing.

00:27:02.300 --> 00:27:05.450
There's a range of buttons
for HTML text styles,

00:27:05.700 --> 00:27:10.450
some buttons for HTML elements
such as tables and links and lists.

00:27:10.770 --> 00:27:14.000
Then there are form elements,
text entry fields, submit buttons,

00:27:14.000 --> 00:27:14.560
et cetera.

00:27:14.820 --> 00:27:18.320
And then there are dynamic elements,
which are things that are going to

00:27:18.520 --> 00:27:20.450
actually be changed at run time.

00:27:20.470 --> 00:27:22.370
Like you just put
placeholders into your HTML,

00:27:22.370 --> 00:27:26.300
then the WebObjects framework actually
figures out what belongs in there.

00:27:26.300 --> 00:27:27.800
So our app is going to be very simple.

00:27:27.800 --> 00:27:31.350
It's going to ask you for your name
and then tell you what you entered.

00:27:31.350 --> 00:27:34.910
So it just basically shows you how to do,
how to get data from a web page and

00:27:34.910 --> 00:27:37.040
how to stuff it back into a web page.

00:27:37.140 --> 00:27:39.220
So since it's going
to ask for user input,

00:27:39.220 --> 00:27:40.130
we need a form.

00:27:40.130 --> 00:27:42.670
So we make a form and
then give it some text.

00:27:42.720 --> 00:27:45.410
What is your name?

00:27:45.460 --> 00:27:49.810
Add a text field and a Submit button.

00:27:50.920 --> 00:27:53.800
So when they enter their name,
we want to put that somewhere.

00:27:53.800 --> 00:27:56.000
So we're going to add
a key to our component.

00:27:56.100 --> 00:28:00.790
And it's going to be a string,
call it the name.

00:28:00.790 --> 00:28:01.560
That's a good name.

00:28:01.560 --> 00:28:02.780
It's just going to add
an instance variable.

00:28:02.800 --> 00:28:05.380
We could have it add getters and setters,
but we'll just go with

00:28:05.380 --> 00:28:06.780
the instance variable.

00:28:06.780 --> 00:28:10.810
And then we just drag connect that to
our text field and say that's going

00:28:10.810 --> 00:28:12.240
to be the value of the text field.

00:28:12.240 --> 00:28:15.300
So when they click submit,
it's going to stuff whatever they

00:28:15.300 --> 00:28:17.030
typed into there into our IVAR.

00:28:17.040 --> 00:28:19.360
Then when they click submit,
an action has to occur,

00:28:19.360 --> 00:28:20.850
so we're going to add an action.

00:28:21.100 --> 00:28:26.190
So the action will be
called name entered.

00:28:27.450 --> 00:28:29.820
This is kind of a convention
that it always ends in action.

00:28:29.830 --> 00:28:32.920
And then you could have it
return another component,

00:28:32.920 --> 00:28:36.360
or if you just enter another,
it will return the exact same component.

00:28:36.430 --> 00:28:38.490
So we'll do that just
to make this simple.

00:28:38.570 --> 00:28:41.400
And we want to show the final result,
but we only want to show the name if

00:28:41.510 --> 00:28:42.730
they actually have entered a name.

00:28:42.740 --> 00:28:47.680
So we're going to add a conditional,
bind that up to the name.

00:28:49.790 --> 00:28:54.680
So if there is a name,
then we'll say hello, helloee.

00:28:54.680 --> 00:28:58.970
Hello, and then add a string.

00:29:00.600 --> 00:29:01.360
Hello, the name.

00:29:01.360 --> 00:29:03.480
It'll put the name in there.

00:29:03.500 --> 00:29:05.620
And did I wire up the submit button?

00:29:05.620 --> 00:29:07.440
Let's look in the
inspector and see if I did.

00:29:07.440 --> 00:29:07.970
I did not.

00:29:08.000 --> 00:29:10.500
Okay, and you'll notice some of
these attributes are in red.

00:29:10.520 --> 00:29:13.100
And that's why I'm trying to tell
you that you've done something wrong.

00:29:13.100 --> 00:29:15.600
Corresponding with that,
there's this validation panel.

00:29:15.600 --> 00:29:19.280
This icon actually changes color when
there is a problem with your component.

00:29:19.280 --> 00:29:22.380
And it's saying that we need to bind.

00:29:22.380 --> 00:29:25.730
There's a variety of ways that
you can bind an action class.

00:29:25.740 --> 00:29:28.070
The simplest is to just
bind an action to it.

00:29:28.520 --> 00:29:30.560
And it's trying to tell us that,
you know,

00:29:30.560 --> 00:29:32.900
according to its validation rules,
this isn't going to work.

00:29:34.790 --> 00:29:37.400
So we just drag connect
this up to submit,

00:29:37.400 --> 00:29:41.090
bind it to action, and then all the
validation errors go away.

00:29:41.100 --> 00:29:44.740
So in theory, when I build and run this,
it should work.

00:29:44.830 --> 00:29:49.290
So I'll go back to project builder,
go and run.

00:29:59.210 --> 00:30:02.360
Hello, Tom.

00:30:02.360 --> 00:30:10.640
So that just basically shows you
how we built an HTML component.

00:30:10.640 --> 00:30:13.000
We added dynamic elements.

00:30:13.000 --> 00:30:14.000
We didn't really write very much code.

00:30:14.000 --> 00:30:16.400
Wob wrote all the code,
and the code is very simple.

00:30:16.480 --> 00:30:18.510
It's a view source file.

00:30:19.170 --> 00:30:21.770
And we see that it added
the I-bar for the name,

00:30:21.770 --> 00:30:23.580
then it added an action.

00:30:23.690 --> 00:30:30.220
This is sort of the absolute simplest
WebObjects program that you could have.

00:30:30.460 --> 00:30:32.900
Other things we might want to do
would be return a different component.

00:30:32.900 --> 00:30:33.910
We would do that here.

00:30:34.150 --> 00:30:35.300
And we could set up the component.

00:30:35.300 --> 00:30:41.000
We could stuff values into it if we
wanted to have multiple components

00:30:41.000 --> 00:30:42.900
and pass arguments between them.

00:30:42.900 --> 00:30:47.320
So I hope that gives you an
idea of how you use the builder.

00:30:48.300 --> 00:30:54.760
and the rest of the team.

00:30:55.300 --> 00:30:55.300
Thank you.

00:31:18.300 --> 00:31:20.050
So, this is the WebObjects field.

00:31:20.060 --> 00:31:22.400
It's just an open and
closed WebObject tag,

00:31:22.400 --> 00:31:26.540
and it just has a name which points
to its bindings in the WAD entry.

00:31:26.540 --> 00:31:29.490
This is called the WAD file, dot W-O-D,
for WebObjects definition,

00:31:29.560 --> 00:31:34.160
in case you thought it might
refer to anything else.

00:31:34.160 --> 00:31:35.920
And these are all WAD entries.

00:31:36.030 --> 00:31:37.770
So, if you wanted,
you could just edit the

00:31:37.790 --> 00:31:38.630
text files this way.

00:31:38.630 --> 00:31:40.420
You could even do it
from Project Builder.

00:31:40.420 --> 00:31:44.650
For example, if we twist this open,
you can see, you know,

00:31:44.740 --> 00:31:46.530
here's the HTML page.

00:31:46.950 --> 00:31:50.270
Here's the WAD entry
and here's a WOO entry,

00:31:50.270 --> 00:31:53.740
which holds the encoding for
the component when you save it,

00:31:53.860 --> 00:31:56.400
or it can also hold information
about display groups if you've

00:31:56.400 --> 00:31:58.140
added them to your component.

00:31:58.140 --> 00:32:01.060
So let me just show you a few more
things you can do in ROM mode.

00:32:01.150 --> 00:32:03.740
Just to point out, these are two files.

00:32:04.050 --> 00:32:07.110
There are some other products
that maintain everything in the

00:32:07.110 --> 00:32:09.290
HTML file with special tags.

00:32:09.380 --> 00:32:11.400
We have it split up into two files.

00:32:11.430 --> 00:32:16.140
So it's a somewhat cleaner approach,
as Steve pointed out before.

00:32:16.240 --> 00:32:18.250
And, uh...

00:32:18.720 --> 00:32:20.680
WebObjects Builder
maintains both of those,

00:32:20.680 --> 00:32:22.260
plus the woo file.

00:32:22.260 --> 00:32:26.170
So instead of having Java code embedded
in your HTML and having to sort through

00:32:26.470 --> 00:32:30.750
the HTML mess and then the Java mess,
it basically just points to the

00:32:30.750 --> 00:32:32.600
Java file and keeps everything separate.

00:32:32.600 --> 00:32:34.260
I'm gonna try and reformat
this a little bit.

00:32:34.260 --> 00:32:36.760
It'll probably just move the
body tag down there for me.

00:32:36.760 --> 00:32:38.030
So that doesn't help very much.

00:32:38.240 --> 00:32:40.230
Let's add a table.

00:32:41.710 --> 00:32:43.600
There's a little table
assistant that comes up.

00:32:43.680 --> 00:32:46.600
You can tell it, you know,
maybe you want four by four columns.

00:32:46.600 --> 00:32:49.360
I believe this still works in ROM.

00:32:49.360 --> 00:32:49.720
There we go.

00:32:49.720 --> 00:32:51.360
So it's added a table.

00:32:51.360 --> 00:32:54.780
And I can hit that command R to reformat.

00:32:54.870 --> 00:32:58.220
It will indent that in the
proper location where it belongs.

00:32:58.360 --> 00:33:00.540
And the reason I add the table
really is just to show you this nifty

00:33:00.540 --> 00:33:03.110
feature that we have for tag matching.

00:33:03.220 --> 00:33:06.940
So if I double click on this tag, it,
you know, selects that tag.

00:33:06.940 --> 00:33:09.430
If you triple click, whoops,
it's going to

00:33:09.920 --> 00:33:12.720
It'll go and select to
the tag that it matches.

00:33:12.720 --> 00:33:16.970
And then if you start dragging,
it'll select the containing tags.

00:33:17.110 --> 00:33:19.530
And as you drag further,
it selects that containing tag

00:33:19.600 --> 00:33:21.300
and further in the body tag.

00:33:21.420 --> 00:33:26.370
So it's a very easy way to go ahead
and match up a bunch of embedded tags.

00:33:28.130 --> 00:33:30.990
Do you also want to show the selection?

00:33:31.000 --> 00:33:32.340
The selection preservation?

00:33:32.340 --> 00:33:32.850
Okay.

00:33:33.060 --> 00:33:35.500
Well,
another thing that can be a pain when

00:33:35.500 --> 00:33:41.690
you're editing HTML is to find the range
of text in the raw HTML that corresponds

00:33:41.730 --> 00:33:45.060
to the range of text in the WYSIWYG HTML.

00:33:45.060 --> 00:33:47.850
And while there's a nice feature,
if I just select name here,

00:33:47.850 --> 00:33:51.880
then switch back to GUI mode,
it'll select name there.

00:33:51.880 --> 00:33:54.770
And if I wanted to find this table
cell in raw mode for some reason,

00:33:54.770 --> 00:33:57.530
you just select the table cell.

00:33:57.540 --> 00:34:03.290
And yes, that's the path view,
which I'll show them in a minute

00:34:03.700 --> 00:34:06.340
So, and then it selects the table cells.

00:34:06.340 --> 00:34:10.800
So it's very easy to go from one mode
to the other and not lose your context.

00:34:12.280 --> 00:34:14.100
So here's another element
that Stan was pointing out.

00:34:14.100 --> 00:34:17.230
This is the HTML path view.

00:34:17.230 --> 00:34:19.810
It's similar to some other HTML editors,
but just basically shows you

00:34:19.810 --> 00:34:22.540
the containment hierarchy from
the selection all the way up

00:34:22.540 --> 00:34:24.060
to the root of the document.

00:34:24.140 --> 00:34:26.230
So sometimes, you know,
if you have this table and you

00:34:26.230 --> 00:34:29.570
wanted to select just the table row,
it's kind of hard to do that in GUI mode,

00:34:29.640 --> 00:34:32.370
but it's very easy to
do with the path view.

00:34:32.420 --> 00:34:36.770
You just click right on the parent
element that you wanted to select.

00:34:39.220 --> 00:34:41.100
Do you have any questions about that?

00:34:41.100 --> 00:34:44.160
No, no, I mean... I guess we'll
take questions at the end.

00:34:44.160 --> 00:34:45.730
Yeah, I guess we will.

00:34:45.790 --> 00:34:47.510
Okay, so much for the demo
of WebObjects Builder.

00:34:47.510 --> 00:34:48.160
Thank you, Tom.

00:34:55.500 --> 00:34:57.890
Next is rapid turnaround mode.

00:34:57.970 --> 00:35:01.620
Again, this is something that we
saw briefly mentioned before.

00:35:01.750 --> 00:35:04.590
Rapid turnaround is something
that was introduced a while ago.

00:35:04.690 --> 00:35:08.190
It improves the development time,
your whole experience,

00:35:08.190 --> 00:35:11.480
because you don't need to
do a full install build just

00:35:11.560 --> 00:35:13.840
to test your application.

00:35:13.850 --> 00:35:16.080
So you save time this way.

00:35:16.090 --> 00:35:18.270
There's no need to
perform a split install,

00:35:18.270 --> 00:35:20.540
as I mentioned,
and it allows you to tweak

00:35:20.770 --> 00:35:24.590
HTML components and some other
components as the application is running,

00:35:24.590 --> 00:35:27.010
so you don't even need to
restart the application.

00:35:27.020 --> 00:35:31.620
No rebuild and no restart
of the application.

00:35:31.620 --> 00:35:32.820
And images you can change.

00:35:32.850 --> 00:35:35.600
That's one of those other
dynamic components which

00:35:35.600 --> 00:35:37.350
you can replace on the fly.

00:35:37.570 --> 00:35:40.260
And you do not need to run a web server.

00:35:40.260 --> 00:35:45.320
It means you really can use the whole
box or your development machine for

00:35:45.320 --> 00:35:47.460
running and testing the application.

00:35:49.660 --> 00:35:51.220
Project Builder needs to be running.

00:35:51.350 --> 00:35:54.910
We saw before that Project Builder
and WebObjects where they communicate

00:35:54.910 --> 00:35:59.100
with each other through special means,
and they both need to be

00:35:59.100 --> 00:36:00.860
running for this to work.

00:36:00.860 --> 00:36:02.020
Project Builder is...

00:36:03.400 --> 00:36:06.300
like the big overseer of
this whole development mode.

00:36:06.300 --> 00:36:08.100
Of course,
when you're using rapid turnaround,

00:36:08.100 --> 00:36:12.240
chances are you are in Project Builder
to edit your code or to start

00:36:12.700 --> 00:36:16.210
and stop the application,
so that's not such a big deal.

00:36:17.510 --> 00:36:19.820
Tom, it's your name again.

00:36:19.820 --> 00:36:22.380
And show us a little bit
about the rapid turnaround.

00:36:22.400 --> 00:36:24.820
Sure, I have a lot of demos,
so let me get out of... And also

00:36:24.820 --> 00:36:27.400
you have to show the nice
houses that we took pictures of.

00:36:27.420 --> 00:36:29.300
Yes, now you get to see the houses
that we took pictures of.

00:36:29.400 --> 00:36:30.400
There you go.

00:36:30.400 --> 00:36:35.380
So I'm going to open up a new
example that we've been working on.

00:36:35.400 --> 00:36:37.400
It's called iShax.

00:36:37.400 --> 00:36:40.110
And it has a lot of components.

00:36:44.080 --> 00:36:46.820
Okay,
and I'll just build and run that for you,

00:36:46.830 --> 00:36:48.320
just so you can see what
the application looks like.

00:36:48.340 --> 00:36:51.500
And we'll just run it because
I've already built it.

00:36:51.500 --> 00:36:54.180
We built it before.

00:36:58.800 --> 00:37:15.000
[Transcript missing]

00:37:16.390 --> 00:37:19.270
So I came logged in and it goes,
you know, sort of to my home page.

00:37:19.380 --> 00:37:21.820
And this is my agent and
these are properties that she

00:37:21.820 --> 00:37:23.300
suggests I take a look at.

00:37:23.300 --> 00:37:26.300
She's more than just your agent.

00:37:26.310 --> 00:37:28.290
She's more than just an agent.

00:37:28.290 --> 00:37:32.710
So also once you log in,
there are other options that show

00:37:32.800 --> 00:37:36.420
up in the toolbar on the side
for selecting a different agent.

00:37:36.420 --> 00:37:38.220
God knows why I would want to.

00:37:38.300 --> 00:37:42.300
Or changing your personal information,
etc., etc.

00:37:42.300 --> 00:37:45.300
Let's just take a look at a few of
the houses that she's recommended.

00:37:45.300 --> 00:37:49.300
So here's a condo in a
very cramped condo area.

00:37:49.300 --> 00:37:52.300
There are maybe three
feet between each condo.

00:37:52.300 --> 00:37:54.300
So I'm not very interested in that.

00:37:54.300 --> 00:37:56.090
And I took that picture and
I wasn't really happy with

00:37:56.090 --> 00:37:57.300
how the light was falling out.

00:37:57.300 --> 00:38:00.300
Yeah, it's kind of the shadow is
too harsh down in front.

00:38:00.300 --> 00:38:02.260
But, you know, the condos around it,
you know,

00:38:02.260 --> 00:38:05.300
had their garage doors open and it
wouldn't have made as good a picture.

00:38:05.430 --> 00:38:08.300
Anyway, so this is an installation.

00:38:08.330 --> 00:38:11.580
This is an instance of the listing entity
that I showed you earlier where you have,

00:38:11.580 --> 00:38:12.300
you know, the number of bathrooms.

00:38:12.300 --> 00:38:15.300
There's a relationship to the picture,
etc.

00:38:15.300 --> 00:38:20.300
So what I want to do, though,
is -- let's go back to my home page.

00:38:20.570 --> 00:38:23.290
There are a few things that I don't
like about this application.

00:38:23.300 --> 00:38:26.300
I'd just like to change the
appearance a little bit.

00:38:26.300 --> 00:38:29.300
And using WebObjects and
Rapid Turnaround mode,

00:38:29.300 --> 00:38:32.780
it's easy to go ahead and do
that while the application is

00:38:32.780 --> 00:38:35.300
running just using the builder.

00:38:35.310 --> 00:38:37.770
So let's first go to that home page.

00:38:38.030 --> 00:38:42.000
I really feel all of
this should be centered,

00:38:42.000 --> 00:38:43.840
the agent stuff,
the picture and the name,

00:38:43.840 --> 00:38:45.810
and then the option to
choose another agent,

00:38:45.890 --> 00:38:47.390
just center that in that table.

00:38:47.470 --> 00:38:49.000
So just to show you
how you would do that,

00:38:49.150 --> 00:38:56.680
that's all in the homepage component.

00:38:56.680 --> 00:38:56.680
Open that up.

00:38:56.680 --> 00:38:56.680
I'll make it big so everyone can see.

00:38:58.400 --> 00:39:01.350
So, I don't know, it's kind of,
you'll get used to deciphering

00:39:01.350 --> 00:39:04.120
what all this means,
but this component is all contained

00:39:04.120 --> 00:39:05.400
within a layout component.

00:39:05.400 --> 00:39:08.240
That has the header
component at the bottom,

00:39:08.240 --> 00:39:12.310
there's a footer, and the component with
all of the options.

00:39:12.320 --> 00:39:15.370
But right here we have,
this is a woe image of the agent,

00:39:15.370 --> 00:39:18.190
and I'm just going to go
over here to center that.

00:39:18.240 --> 00:39:21.530
And these are all inside of a table cell,
so I can't just select them all

00:39:21.530 --> 00:39:23.240
and center them at the same time.

00:39:23.240 --> 00:39:24.640
I have to center each individual cell.

00:39:25.390 --> 00:39:27.770
Select her name,
and then select this option

00:39:27.770 --> 00:39:31.590
to change to another agent,
and center that.

00:39:31.600 --> 00:39:33.810
If I can get the mouse over there.

00:39:36.080 --> 00:39:38.620
I save this, and I just go back to IE.

00:39:38.620 --> 00:39:39.680
I don't have to rebuild or anything.

00:39:39.680 --> 00:39:42.760
I just hit refresh,
and everything just updates right away.

00:39:42.780 --> 00:39:46.820
So that's a very handy way to go
ahead and you can change colors,

00:39:46.820 --> 00:39:48.520
you can change your HTML.

00:39:48.520 --> 00:39:53.250
Another thing I'd like to change
is this user logged in message.

00:39:53.260 --> 00:39:56.520
I originally had that up as part
of a large banner up at the top,

00:39:56.520 --> 00:39:58.900
and I think I'd like to just go
ahead and put it back that way.

00:39:58.900 --> 00:40:00.940
So let's go find out where the header is.

00:40:01.020 --> 00:40:04.500
So you can see this entire component is
embedded within this layout component.

00:40:05.130 --> 00:40:08.800
So if I double click on that,
it brings out the layout component.

00:40:08.800 --> 00:40:12.500
And there's an option to render
the HTML inline as it would

00:40:12.500 --> 00:40:14.670
actually appear in the page.

00:40:14.680 --> 00:40:16.640
I believe that's here.

00:40:16.640 --> 00:40:17.420
There you go.

00:40:17.420 --> 00:40:18.840
Display components is rendered HTML.

00:40:18.840 --> 00:40:23.320
That makes it a little easier to
figure out what component this was.

00:40:25.750 --> 00:40:31.100
Then you see this user logged in stuff.

00:40:31.330 --> 00:40:32.680
Okay, yeah, that was another component.

00:40:32.680 --> 00:40:33.520
That's the header component.

00:40:33.520 --> 00:40:35.630
I need to double-click to open that.

00:40:35.710 --> 00:40:37.090
And then now I can edit this.

00:40:37.170 --> 00:40:40.190
And so let's say I wanted
to remove this stuff.

00:40:43.560 --> 00:40:46.490
I'm going to get that out of
there and stick it in here.

00:40:46.510 --> 00:40:49.340
Oops, and I actually need
its container as well.

00:40:49.400 --> 00:40:55.970
Because this is only supposed to show
up if the user is in fact logged in.

00:41:00.500 --> 00:41:02.260
There.

00:41:02.260 --> 00:41:04.840
OK, save that,
and let's see what I've actually done.

00:41:04.840 --> 00:41:08.300
So I hit refresh,
and I've broken something.

00:41:08.300 --> 00:41:09.970
Great.

00:41:10.480 --> 00:41:14.520
I put all of this outside of the
table that I wanted to put it within.

00:41:14.520 --> 00:41:21.850
So let's select this table.

00:41:24.400 --> 00:41:25.690
- This works in rehearsal.

00:41:25.800 --> 00:41:31.180
Okay, here, let's just put this back
where it was at least.

00:41:34.410 --> 00:41:35.390
I'm watching him on there.

00:41:35.400 --> 00:41:36.960
All kinds of things going on today.

00:41:36.960 --> 00:41:38.450
Okay, well, I've horribly broken it.

00:41:38.460 --> 00:41:41.580
Well,
let's just imagine your name is up there.

00:41:41.580 --> 00:41:43.350
Let's just imagine that
I put that over there.

00:41:43.360 --> 00:41:48.620
We are actually demoing
on an alpha system,

00:41:48.620 --> 00:41:50.580
so this is unreliable.

00:41:50.580 --> 00:41:51.880
I know, I know.

00:41:51.880 --> 00:41:53.680
I'm finding excuses for you, Tom.

00:41:53.680 --> 00:41:54.940
But it is alpha software.

00:41:54.940 --> 00:41:56.740
We're doing it on alpha software.

00:41:56.740 --> 00:41:57.460
It's an alpha builder.

00:41:57.460 --> 00:41:59.510
Right, yeah, it's really, really.

00:41:59.520 --> 00:42:00.720
But I think you get the general idea.

00:42:00.720 --> 00:42:03.540
If you're good at editing HTML,
you can make all kinds of changes.

00:42:03.540 --> 00:42:05.120
You don't have to
rebuild your application.

00:42:05.120 --> 00:42:06.960
You can change functionality.

00:42:06.960 --> 00:42:08.440
You can have things hide and show.

00:42:08.440 --> 00:42:12.400
And you just hit refresh in the browser,
and you can make all kinds of refinements

00:42:12.400 --> 00:42:13.910
to your app in very little time.

00:42:13.940 --> 00:42:15.260
Show us some more houses.

00:42:15.260 --> 00:42:17.180
Some authentic Bay Area houses.

00:42:17.180 --> 00:42:18.100
A few other houses.

00:42:18.100 --> 00:42:18.880
You want to look at some houses?

00:42:18.880 --> 00:42:20.800
So another one that she recommended.

00:42:20.800 --> 00:42:22.790
Here's a nice duplex.

00:42:22.800 --> 00:42:26.610
If you want to live in a house
connected to another house.

00:42:26.640 --> 00:42:28.160
You can also search for houses.

00:42:28.160 --> 00:42:30.260
Trash days on Monday.

00:42:30.260 --> 00:42:31.320
Trash days on Monday.

00:42:31.320 --> 00:42:32.960
So which one?

00:42:32.960 --> 00:42:33.510
I don't know.

00:42:33.620 --> 00:42:37.240
Search for houses in San Jose, maybe?

00:42:37.430 --> 00:42:40.080
Just to show you what the app does.

00:42:40.210 --> 00:42:41.400
Ooh, I like the top one.

00:42:41.400 --> 00:42:42.700
It's nice.

00:42:42.730 --> 00:42:45.520
Ooh, somebody.

00:42:45.590 --> 00:42:46.770
Stan took this one.

00:42:46.820 --> 00:42:48.500
Yeah.

00:42:48.550 --> 00:42:49.800
They had a lot of trash, I guess.

00:42:49.800 --> 00:42:52.590
It was trash day.

00:42:52.950 --> 00:42:53.140
Okay.

00:42:53.140 --> 00:42:53.710
All right.

00:42:53.880 --> 00:42:55.800
Anyway, I think we've made the
rapid turnaround point.

00:42:55.880 --> 00:42:56.850
Yeah, more or less.

00:42:57.000 --> 00:42:57.230
Yes.

00:42:57.230 --> 00:43:01.440
Let's go back to the slides
for the last chapter.

00:43:08.600 --> 00:43:14.600
[Transcript missing]

00:43:14.920 --> 00:43:15.750
Back to the slides.

00:43:15.790 --> 00:43:16.730
Thank you.

00:43:16.830 --> 00:43:21.710
The last part of the presentation will be
about CVS integration in Project Builder.

00:43:21.820 --> 00:43:27.160
We'll discuss what is CVS and what
can it do for you in WebObjects.

00:43:27.260 --> 00:43:31.790
I guess, how many other people are
here OS X developers of some

00:43:31.790 --> 00:43:34.150
other kind in WebObjects?

00:43:34.850 --> 00:43:35.720
And do you use CVS?

00:43:35.720 --> 00:43:38.220
Do you like CVS?

00:43:38.330 --> 00:43:39.760
Do you like the CVS integration in PB?

00:43:41.300 --> 00:43:41.570
Yeah?

00:43:41.780 --> 00:43:44.830
Okay, so for those of you who
don't know how it works,

00:43:44.830 --> 00:43:47.540
this will be about CVS integration in PB.

00:43:47.880 --> 00:43:52.740
There are some particular features which
are useful for us WebObjects people.

00:43:52.880 --> 00:43:53.530
What is CVS?

00:43:53.530 --> 00:43:55.660
Well, first of all,

00:43:55.780 --> 00:43:58.660
It stands for concurrent
versioning system,

00:43:58.690 --> 00:44:03.630
which allows multiple people to
concurrently work on the same version.

00:44:04.040 --> 00:44:05.660
of the source file.

00:44:05.680 --> 00:44:08.230
It's open source,
which is a really big thing with Apple,

00:44:08.230 --> 00:44:09.190
it seems.

00:44:09.290 --> 00:44:14.170
And we really stand behind it that
it's not owned by some big evil empire.

00:44:14.310 --> 00:44:17.820
It comes with OS X,
so if you get the developer CD,

00:44:17.820 --> 00:44:22.000
CVS comes pre-installed as
part of the developer system.

00:44:22.880 --> 00:44:26.580
It is cross-platform,
which is very important for us WebObjects

00:44:26.580 --> 00:44:31.590
people because we have development
both on Windows and on Mac OS X,

00:44:31.810 --> 00:44:35.790
and therefore we need a cross-platform
integration with a persistence,

00:44:35.790 --> 00:44:36.510
I mean with a CVS.

00:44:38.120 --> 00:44:39.800
It's command line only.

00:44:39.800 --> 00:44:42.540
Now that is a good and
a bad thing for some.

00:44:42.620 --> 00:44:43.600
It's a good thing.

00:44:43.600 --> 00:44:45.060
It seems to be getting a good thing.

00:44:45.060 --> 00:44:47.120
I mean,
even Steve is showing off terminal and

00:44:47.120 --> 00:44:49.770
transparent things running in terminal.

00:44:49.880 --> 00:44:51.460
So that is definitely a good thing.

00:44:51.460 --> 00:44:53.500
Sometimes it gets to
be a little bit tricky,

00:44:53.500 --> 00:44:58.100
though, when you have to do a complex
operation like dealing with wrappers,

00:44:58.100 --> 00:44:59.130
with directories.

00:44:59.130 --> 00:45:01.230
At that point,
you don't necessarily want to

00:45:01.290 --> 00:45:02.910
deal with command line only.

00:45:03.060 --> 00:45:05.010
So we have a solution for that.

00:45:05.120 --> 00:45:08.060
And Apple loves it and
uses it internally.

00:45:08.180 --> 00:45:12.380
All of Apple's OS X and all
the projects used in it,

00:45:12.380 --> 00:45:16.490
they are maintained through a CVS system.

00:45:17.320 --> 00:45:21.040
What does Project Builder
do to help you with CVS?

00:45:21.160 --> 00:45:25.790
It shows you little marks next to
files when you show--when you add,

00:45:25.790 --> 00:45:27.630
delete, or rename a file.

00:45:27.780 --> 00:45:30.340
It actually can help
you rename those files,

00:45:30.430 --> 00:45:32.520
which is especially
important when you have,

00:45:32.560 --> 00:45:35.370
again, folders, so-called wrappers.

00:45:35.570 --> 00:45:37.410
It supports deletion of such files.

00:45:37.560 --> 00:45:39.470
When you try to do it
on the command line,

00:45:39.570 --> 00:45:43.890
chances are the first five times you will
fail and give up frustrated and go after

00:45:43.890 --> 00:45:46.380
the CVS repository and delete it there,
which is not the point.

00:45:46.400 --> 00:45:48.770
Project Builder can do that for you.

00:45:48.780 --> 00:45:53.520
It allows remote CVS servers,
which is a part of how it supports

00:45:53.520 --> 00:45:57.780
security so that you don't actually have
the direct access to the CVS server.

00:45:57.780 --> 00:46:01.790
Maybe your employees who are
not so experienced don't have

00:46:01.810 --> 00:46:03.120
direct access to the CVS server.

00:46:03.120 --> 00:46:04.940
They can go and rename and change files.

00:46:05.480 --> 00:46:10.180
you have to go through the server itself,
which is an added security.

00:46:10.530 --> 00:46:14.720
So Tom, Tom once again,
show us about CVS.

00:46:14.860 --> 00:46:17.160
There's a similar issue with my legs.

00:46:17.160 --> 00:46:18.160
Yeah, just stop.

00:46:18.160 --> 00:46:20.730
I think it's like crossing my legs
and then it goes around the leg.

00:46:20.740 --> 00:46:22.740
I don't know what you're
doing behind there.

00:46:22.740 --> 00:46:24.160
But this is the last demo?

00:46:24.160 --> 00:46:25.600
That's the last demo.

00:46:25.660 --> 00:46:28.130
And I won't have to think about
demos for a long time again?

00:46:28.160 --> 00:46:29.150
About a year.

00:46:29.160 --> 00:46:30.140
About a year.

00:46:30.160 --> 00:46:32.150
A year,
I'll begin to think about demos again.

00:46:32.190 --> 00:46:36.160
So let's look at this project from
Project Builder that I've been modifying.

00:46:36.160 --> 00:46:40.160
I believe I made some modifications
to the toolbar component.

00:46:40.160 --> 00:46:42.590
which is

00:46:44.260 --> 00:46:45.800
Here it is, the toolbar component.

00:46:45.890 --> 00:46:50.710
So we twist that open,
the localized English version

00:46:50.710 --> 00:46:50.720
of the component.

00:46:51.630 --> 00:46:54.490
And the little m's aren't showing up.

00:46:54.490 --> 00:46:57.600
So we'll make sure that we
have CVS integration turned on.

00:46:57.600 --> 00:47:03.750
Here, maybe I didn't save the component.

00:47:13.200 --> 00:47:18.800
[Transcript missing]

00:47:19.700 --> 00:47:23.880
and you see that it's put
this little M next to the file

00:47:23.880 --> 00:47:25.440
because it's been modified.

00:47:25.440 --> 00:47:28.870
So we can go to the CVS menu
and see exactly what I've broken

00:47:28.910 --> 00:47:30.700
by choosing compare with base.

00:47:31.180 --> 00:47:33.900
Then it's going to launch file merge.

00:47:34.200 --> 00:47:37.240
- So, well, it's kind of hard to see in
here exactly what I've done

00:47:37.310 --> 00:47:41.110
because it just shows the entire,

00:47:41.240 --> 00:47:42.090
table cell in one line.

00:47:42.090 --> 00:47:44.590
But basically you can use this to
review the changes that you've made

00:47:44.590 --> 00:47:46.080
before you go ahead and check them in.

00:47:46.230 --> 00:47:50.480
And if you left a
component horribly mangled,

00:47:50.480 --> 00:47:53.890
you can revert to the latest revision.

00:47:58.150 --> 00:48:00.860
and that should fix it in theory.

00:48:00.860 --> 00:48:02.900
So go back to here and hit refresh.

00:48:02.960 --> 00:48:03.870
And there we go.

00:48:03.920 --> 00:48:04.400
Everything is back the way it was.

00:48:04.400 --> 00:48:05.330
No harm is done.

00:48:05.470 --> 00:48:07.430
CVS has saved me.

00:48:07.530 --> 00:48:09.360
Want to give it another try, Tom?

00:48:09.440 --> 00:48:09.860
Give it another try?

00:48:09.860 --> 00:48:11.280
No.

00:48:11.310 --> 00:48:13.060
We'll do it again next year.

00:48:13.140 --> 00:48:13.140
Okay.

00:48:13.200 --> 00:48:14.860
Next year we'll just move that
little piece up into there.

00:48:14.890 --> 00:48:16.440
Next year it will be much better.

00:48:16.450 --> 00:48:17.620
Yeah.

00:48:17.630 --> 00:48:20.600
But anyway, so it's very convenient to
use CVS from Project Builder.

00:48:20.600 --> 00:48:22.500
It shows you exactly what you modified.

00:48:22.580 --> 00:48:25.600
I guess I wasn't terribly
risky in this demo.

00:48:25.600 --> 00:48:27.560
I didn't modify a whole lot of things.

00:48:27.610 --> 00:48:29.720
I believe I changed
the agent detail page.

00:48:29.720 --> 00:48:32.250
No,
that was the home page that I changed.

00:48:32.350 --> 00:48:34.510
The home page.

00:48:34.800 --> 00:48:36.700
So what if you want to
rename one of those files?

00:48:36.740 --> 00:48:39.600
If I wanted to rename one of those files,
well, traditionally,

00:48:39.720 --> 00:48:43.750
if people have used CVS a lot,
you'd first have to remove

00:48:43.750 --> 00:48:47.540
the file from the repository,
then add it again with a different name.

00:48:47.540 --> 00:48:48.970
And of course,
CVS won't let you remove the

00:48:49.050 --> 00:48:51.570
file until you've deleted it,
so you have to move it aside

00:48:51.690 --> 00:48:53.220
and give it a different name.

00:48:53.240 --> 00:48:56.880
But Project Builder actually makes
it very easy to rename files.

00:48:57.150 --> 00:48:59.060
I don't want to rename that one, though.

00:48:59.060 --> 00:49:00.970
We'll rename this one.

00:49:01.090 --> 00:49:03.940
We'll call it "The Cookie."

00:49:11.790 --> 00:49:14.370
So that goes,
it removes the old one and marks

00:49:14.370 --> 00:49:17.460
it for removal in the database,
puts a little R next to it.

00:49:17.470 --> 00:49:22.260
It adds the new file that we've changed,
and it's a whole lot easier than

00:49:22.260 --> 00:49:23.850
doing it via the command line.

00:49:24.080 --> 00:49:27.190
You'll also notice when I bring
up the inspector for the file,

00:49:27.190 --> 00:49:30.690
there's a list of all of the commit
messages for all the modifications

00:49:30.700 --> 00:49:32.570
that have been made to this file.

00:49:32.670 --> 00:49:35.950
So let's take a look at another file.

00:49:36.380 --> 00:49:38.290
This one shows you all
the commit messages that,

00:49:38.460 --> 00:49:41.770
these are the actual commit messages
that we've had since we started working

00:49:41.770 --> 00:49:43.360
on this project about a month ago.

00:49:43.360 --> 00:49:46.890
And this is an easy way to get a
high-level view of all the changes

00:49:46.890 --> 00:49:48.890
and who's been working on what.

00:49:48.920 --> 00:49:51.070
It looks only you've been working on it.

00:49:51.110 --> 00:49:53.580
Is there some teamwork on your team, Tom?

00:49:53.580 --> 00:49:54.510
Is there what?

00:49:54.520 --> 00:49:56.340
Is there some teamwork on your team?

00:49:56.340 --> 00:49:57.800
There's plenty of teamwork.

00:49:57.800 --> 00:49:58.840
It's Tom and Yuji.

00:49:58.860 --> 00:49:59.840
Oh, there you go.

00:49:59.860 --> 00:50:01.680
We'll find him at Gala here somewhere.

00:50:02.150 --> 00:50:04.920
Well, anyway,
so you can basically see who's been

00:50:04.920 --> 00:50:08.060
working on what and what they've
changed and review their changes.

00:50:08.060 --> 00:50:09.900
And it's very convenient.

00:50:13.480 --> 00:50:14.400
Thank you Tom.

00:50:14.400 --> 00:50:18.190
The really nice thing about this is it
really supports also naming of folders

00:50:18.310 --> 00:50:23.400
which is even much more of a pain to do
when you're doing it on command line.

00:50:23.400 --> 00:50:25.400
Slides.

00:50:25.440 --> 00:50:27.400
Slides or not, doesn't really matter.

00:50:27.400 --> 00:50:29.400
We're kind of ahead of schedule it seems.

00:50:29.400 --> 00:50:32.400
When we rehearsed we were
way over time and somehow...

00:50:32.400 --> 00:50:33.400
I think we had longer demos.

00:50:33.400 --> 00:50:34.400
Yeah, we had longer demos.

00:50:34.400 --> 00:50:36.400
He's a slacker.

00:50:36.400 --> 00:50:38.400
So this is our schedule.

00:50:38.400 --> 00:50:41.400
There's the WebObjects
lab located downstairs.

00:50:41.400 --> 00:50:44.400
Tuesday, today, it just ended.

00:50:44.400 --> 00:50:45.370
Okay, there was the porting lab.

00:50:45.390 --> 00:50:49.390
It will be open all week
long until Friday 6 p.m.

00:50:49.400 --> 00:50:52.500
How many of you are planning to be
in the WebObjects lab on Friday at

00:50:52.500 --> 00:50:55.400
6 p.m.? Don't miss your flight.

00:50:55.400 --> 00:50:56.400
Okay?

00:50:56.400 --> 00:50:58.370
So...

00:50:59.500 --> 00:51:02.030
This is the roadmap,
things that we would recommend.

00:51:02.170 --> 00:51:06.250
There's advanced data
modeling and connectivity.

00:51:06.250 --> 00:51:07.810
That's much more EOModeler work.

00:51:07.930 --> 00:51:13.120
EOModeler is one of the more
important tools used for WebObjects,

00:51:13.250 --> 00:51:15.460
so you might want to attend
that if you are planning to

00:51:15.460 --> 00:51:16.850
get serious with WebObjects.

00:51:16.940 --> 00:51:19.450
And of course, the feedback forum,
where we would love to hear from you.

00:51:21.330 --> 00:51:22.710
Who to contact?

00:51:22.810 --> 00:51:23.760
There's my boss, Tony.

00:51:23.760 --> 00:51:25.380
There's Bob, who introduced us.

00:51:25.380 --> 00:51:26.740
That's the guy with the hat.

00:51:26.800 --> 00:51:28.140
He still has it.

00:51:28.240 --> 00:51:32.360
And then there's the consulting part.

00:51:32.480 --> 00:51:34.630
For more information,

00:51:35.470 --> 00:51:38.230
Go to those sites, other places.

00:51:38.330 --> 00:51:40.540
Those slides will be
coming over and over,

00:51:40.540 --> 00:51:42.060
so you will see them if not now.

00:51:42.150 --> 00:51:46.480
This is new documentation.

00:51:46.480 --> 00:51:48.280
How to access the documentation, those...