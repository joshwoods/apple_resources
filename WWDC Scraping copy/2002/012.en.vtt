WEBVTT

00:00:05.970 --> 00:00:08.090
All right, well,
welcome to the second-to-last

00:00:08.090 --> 00:00:10.200
session of the day,
of the week, I think.

00:00:10.260 --> 00:00:12.020
Hope it's been a good week for you.

00:00:12.020 --> 00:00:15.550
This is probably the most
important session in the week.

00:00:15.640 --> 00:00:17.720
Well, at least we'd like to think so.

00:00:17.720 --> 00:00:23.720
But this session is important because
the Address Book Framework figures

00:00:23.720 --> 00:00:28.890
prominently into one of the steps
that it takes for you to make your

00:00:28.890 --> 00:00:32.880
application a really great application
on Mac OS X from here on out.

00:00:33.420 --> 00:00:38.380
And that is because the Address
Book Framework allows your application to

00:00:38.380 --> 00:00:43.030
leverage a centralized contact database,
which means that every application,

00:00:43.030 --> 00:00:45.270
theoretically,
in the future could be leveraging

00:00:45.270 --> 00:00:48.160
the same contact information,
and the user will have a much

00:00:48.160 --> 00:00:51.040
smoother user experience in
terms of saving contacts,

00:00:51.040 --> 00:00:53.780
changing them, editing them,
and using them within

00:00:53.780 --> 00:00:55.380
multiple applications.

00:00:55.380 --> 00:00:59.400
So if you think about that whole process,
I think it really is an

00:00:59.400 --> 00:01:03.380
interesting proposal,
and we would love to see next year.

00:01:03.420 --> 00:01:07.330
We're at WWC that there are literally,
you know, tens or twenties or thirties

00:01:07.330 --> 00:01:10.010
or forties of applications that
are leveraging Address Book.

00:01:10.060 --> 00:01:13.420
So to talk to you about how
cool this is and how to use it,

00:01:13.610 --> 00:01:18.470
and I'd like to introduce
Monsieur Henri Lamiraux.

00:01:25.520 --> 00:01:26.760
Good afternoon.

00:01:26.760 --> 00:01:29.910
In this session,
we're going to talk about

00:01:29.980 --> 00:01:33.780
the Address Book Framework,
not the Address Book application,

00:01:33.780 --> 00:01:38.100
but only the Address Book Framework,
which the Address Book application uses.

00:01:38.100 --> 00:01:42.570
It's been a long-standing
request from developers.

00:01:42.580 --> 00:01:47.410
I think since Mac OS X 10.0,
there's been a request for developers to

00:01:47.530 --> 00:01:50.140
have a way to access the Address Book.

00:01:51.500 --> 00:01:57.660
This new API is accessible from Carbon,
from Cocoa, and from AppleScript.

00:01:57.740 --> 00:02:01.310
We made sure that all our
major frameworks can use it.

00:02:01.400 --> 00:02:02.900
It's thread-safe.

00:02:02.980 --> 00:02:07.690
You can access it from multiple
applications at the same time.

00:02:07.700 --> 00:02:11.260
You can have mail or other applications,
Address Book,

00:02:11.310 --> 00:02:15.150
and several other applications,
both using the same Address

00:02:15.410 --> 00:02:17.430
Book Framework at the same time.

00:02:17.470 --> 00:02:21.460
It's also extensible,
which means that we provide...

00:02:21.460 --> 00:02:25.610
We provide a set of properties,
but you can, as an application developer,

00:02:25.610 --> 00:02:28.130
add your own properties
to the Address Book.

00:02:28.260 --> 00:02:29.570
Don't get too crazy.

00:02:29.710 --> 00:02:31.340
It's not a general database.

00:02:31.420 --> 00:02:33.860
It's not meant to be a general database.

00:02:33.860 --> 00:02:36.220
It's just to manage people and groups.

00:02:36.280 --> 00:02:39.800
But you can add your own
properties if you don't provide it.

00:02:40.720 --> 00:02:44.510
So, as John said,
this is the Mac OS X centralized

00:02:44.870 --> 00:02:47.590
storage for contacts,
for people and groups.

00:02:47.600 --> 00:02:51.240
And it's going to be
used heavily in Jaguar.

00:02:51.240 --> 00:02:54.910
Mail uses it, iChat uses it,
Address Book uses it, Sherlock,

00:02:54.910 --> 00:03:00.140
Setup Assistant, a lot of applications on
Mac OS X will use this Address Book.

00:03:00.140 --> 00:03:05.870
So it's very important for the user
that all information are in one place.

00:03:07.420 --> 00:03:11.830
Adress Book Framework will be
available on Jaguar and later only.

00:03:11.830 --> 00:03:14.300
And the database we use is
not backward compatible.

00:03:14.300 --> 00:03:17.360
It means the database that's
going to be produced on Jaguar

00:03:17.380 --> 00:03:19.890
won't be usable on 10.1.

00:03:19.920 --> 00:03:24.690
But we automatically import a 10.1
database into Jaguar and convert it the

00:03:24.690 --> 00:03:29.760
first time the address book is accessed,
the address book framework is accessed.

00:03:29.950 --> 00:03:31.950
So any application,
not only address book,

00:03:32.040 --> 00:03:34.830
but if Mel used the address
book framework the first time,

00:03:34.830 --> 00:03:37.570
the database will be
converted at this time.

00:03:39.700 --> 00:03:40.920
So I'm going to go through the API.

00:03:41.170 --> 00:03:42.660
This is about API.

00:03:42.850 --> 00:03:45.830
It's not about fancy demos,
but about APIs.

00:03:46.220 --> 00:03:47.940
And we have a lot of things to cover.

00:03:47.970 --> 00:03:50.960
So this is the overview,
what we're going to be

00:03:50.960 --> 00:03:52.330
talking about today.

00:03:52.430 --> 00:03:53.440
So let's start.

00:03:53.510 --> 00:03:56.680
Let's start with AB Record.

00:03:57.030 --> 00:04:00.970
The A/B record is really the base
of the Address Book Database.

00:04:01.030 --> 00:04:04.740
It's basically a row inside
the Address Book Database.

00:04:04.760 --> 00:04:10.800
Every A/B record has a unique ID,
a real unique ID, using the CF unique ID.

00:04:10.810 --> 00:04:14.780
And it's an abstract base class
for two other types of rows,

00:04:14.800 --> 00:04:18.380
which is the A/B person
and the A/B group.

00:04:18.500 --> 00:04:23.240
Think of the A/B record as a
dictionary of property and value.

00:04:23.240 --> 00:04:24.220
It's basically that.

00:04:24.260 --> 00:04:27.790
It's just a list,
a dictionary of property and values,

00:04:27.790 --> 00:04:29.760
and with a unique ID.

00:04:30.090 --> 00:04:32.990
So what are the APIs for AB Record?

00:04:33.130 --> 00:04:36.680
First of all, you can get the unique ID,
which is a string, and as I said,

00:04:36.680 --> 00:04:38.110
a real unique ID.

00:04:38.220 --> 00:04:43.160
And then we have three APIs to
be able to set a value.

00:04:43.240 --> 00:04:47.040
But also, I'm going to use in your
slides Objective-C syntax,

00:04:47.180 --> 00:04:51.110
but the C APIs are basically the same.

00:04:51.430 --> 00:04:57.400
So you can set a value,
passing a value for a given property.

00:04:57.400 --> 00:05:00.260
You can get a value for a property,
and you can also remove

00:05:00.260 --> 00:05:01.660
a value for a property.

00:05:01.760 --> 00:05:04.830
Which means that if you remove
a value for a given property,

00:05:04.890 --> 00:05:07.100
next time you're going
to ask for the value,

00:05:07.100 --> 00:05:08.120
it will be nil.

00:05:08.120 --> 00:05:11.990
We support the concept of
nil in the Address Book.

00:05:13.900 --> 00:05:17.940
Let's give you a sample of a
piece of code using those APIs.

00:05:17.940 --> 00:05:19.780
You have a record.

00:05:19.780 --> 00:05:23.920
You ask for a value for a property,
return the value.

00:05:23.920 --> 00:05:26.220
Now,
depending if the value is nil or not nil,

00:05:26.220 --> 00:05:28.000
you're going to do something.

00:05:28.000 --> 00:05:30.970
You're going to do something here.

00:05:30.990 --> 00:05:35.840
Then you'll be able to set the
value again for this given property.

00:05:35.890 --> 00:05:38.950
Very simple model.

00:05:41.000 --> 00:05:46.500
[Transcript missing]

00:05:46.650 --> 00:05:47.900
is a unique name.

00:05:47.990 --> 00:05:51.400
He has to have a unique name,
like first name, last name.

00:05:51.400 --> 00:05:55.700
So if you start creating your own
properties you're going to add

00:05:55.700 --> 00:05:59.270
to the schema of this database,
you need to use something

00:05:59.270 --> 00:06:02.980
that's going to be unique,
com.mycompany.whatever.

00:06:02.980 --> 00:06:05.560
So be sure that your
property will be unique.

00:06:05.620 --> 00:06:09.660
Each property has a type, integer,
string, date.

00:06:09.660 --> 00:06:15.010
And also it comes in two flavors,
single value and multi-value.

00:06:16.660 --> 00:06:18.540
So, single value type.

00:06:18.700 --> 00:06:22.900
We have KAB string property,
which is matched to a NSString.

00:06:22.960 --> 00:06:27.600
KAB integer property, real, date, array,
dictionary, data.

00:06:27.750 --> 00:06:32.680
Basically, the regular, the standard,
p-listable type that's supported

00:06:32.680 --> 00:06:35.280
in foundation and core foundation.

00:06:38.670 --> 00:06:41.210
Some example of single value property.

00:06:41.460 --> 00:06:43.420
First name is a string.

00:06:43.430 --> 00:06:44.630
Last name is a string.

00:06:44.670 --> 00:06:46.490
Birthday is a date.

00:06:46.740 --> 00:06:51.590
Nothing very, very bizarre or unusual.

00:06:51.830 --> 00:06:55.410
But if you think about it,
single value works well

00:06:55.540 --> 00:06:58.140
for your first name,
last name.

00:06:58.140 --> 00:07:01.360
You only have one first name,
one last name, one birthday.

00:07:01.360 --> 00:07:07.050
But when you start talking about phones,
emails, you don't have one phone,

00:07:07.050 --> 00:07:09.120
you don't have one email,
you don't have -- we have

00:07:09.210 --> 00:07:11.580
more than one address,
street address.

00:07:11.590 --> 00:07:16.340
So single value properties don't
work for this type of data.

00:07:16.340 --> 00:07:19.670
You still want to be able to say,
"Give me your emails," but

00:07:19.680 --> 00:07:21.300
maybe multiple of them.

00:07:21.300 --> 00:07:23.920
And also you may have
multiple home email,

00:07:23.960 --> 00:07:26.840
multiple home phone, multiple work email.

00:07:26.840 --> 00:07:31.320
So it's a bit more complex
than just a single value.

00:07:31.320 --> 00:07:36.160
So what we need to be able to do for
email and phone is associate a label,

00:07:36.320 --> 00:07:39.500
which is not unique, in a value.

00:07:41.250 --> 00:07:44.570
So the type for multivalue
properties are the following.

00:07:44.710 --> 00:07:48.320
They exactly match 101 with
a single value property.

00:07:48.320 --> 00:07:51.860
We have multiple string,
multiple integer property, multi-reol,

00:07:51.860 --> 00:07:57.860
et cetera, multi-date, multi-array,
multi-dictionary, multi-data.

00:07:57.860 --> 00:08:00.590
And to be able to
encapsulate this new type,

00:08:00.590 --> 00:08:05.040
we have created this new class,
which we call AB Multivalue.

00:08:05.320 --> 00:08:08.610
AB stands for

00:08:09.340 --> 00:08:12.140
A/B Multivalue Class.

00:08:13.240 --> 00:08:15.110
Let's say that you have a person.

00:08:15.150 --> 00:08:17.750
If you just want to get his first name,
you're going to say

00:08:17.750 --> 00:08:20.800
Person ValueForPropertyFirstNameProperty.

00:08:20.800 --> 00:08:22.300
You're going to get a string.

00:08:22.510 --> 00:08:32.220
But for email, you're going to say
Person ValueForPropertyKABEmailProperty,

00:08:32.220 --> 00:08:33.360
and you're going to get one
of those new A/B Multivalue.

00:08:37.400 --> 00:08:41.170
An A/B multivalue is basically
another type of collection classes.

00:08:41.420 --> 00:08:45.740
It's like NSDictionary, NSArray,
but it's a bit more complex.

00:08:45.740 --> 00:08:48.710
In one of the original designs we had,
we were using a dictionary

00:08:48.710 --> 00:08:49.810
for a multivalue.

00:08:49.820 --> 00:08:52.870
The point is that we wanted
to have multiple labels.

00:08:52.870 --> 00:08:55.470
So a dictionary,
you can't have multiple home labels,

00:08:55.470 --> 00:08:57.220
you can't have multiple work labels.

00:08:57.230 --> 00:08:59.980
So we moved to this A/B multivalue.

00:09:00.030 --> 00:09:04.600
An A/B multivalue manages
an array of triplets.

00:09:04.600 --> 00:09:10.380
You have a label, you have a value,
and you have an identifier.

00:09:12.710 --> 00:09:14.490
So the label don't have to be unique.

00:09:14.490 --> 00:09:18.870
For example,
you have multiple home email addresses.

00:09:19.650 --> 00:09:23.410
The label can be any type of
string that describes this value.

00:09:23.690 --> 00:09:29.950
We provide a set of standard labels,
homework that you can use,

00:09:30.000 --> 00:09:32.360
but you can put whatever you want.

00:09:32.760 --> 00:09:38.460
The value within one,
if you have an ABMultiValue,

00:09:38.520 --> 00:09:42.510
all the value inside this ABMultiValue
object have to have the same type.

00:09:42.830 --> 00:09:48.100
So if you have a multi-string property,
all the value has to be strings.

00:09:48.100 --> 00:09:54.130
If you have an ABMultiDate property,
all the value must be of type NSDate.

00:09:57.890 --> 00:10:03.820
The identifier provides you a
way to reference one particular

00:10:04.180 --> 00:10:07.940
value inside this ABMultiValue.

00:10:07.940 --> 00:10:12.600
Don't forget you have multiple
applications that can change this value.

00:10:12.610 --> 00:10:15.670
If you start to save away
the index of one of them,

00:10:15.670 --> 00:10:18.950
I want to save, "Oh,
my home is my third entry in this

00:10:18.950 --> 00:10:24.310
multi-value," some other application can
come and completely change those values.

00:10:24.620 --> 00:10:27.620
Third, three,
no point to maybe nothing or point to

00:10:27.620 --> 00:10:30.560
something that was not what you meant.

00:10:30.560 --> 00:10:33.680
We have this identifier that
uniquely identifies each

00:10:34.040 --> 00:10:35.740
entry inside the multi-value.

00:10:35.740 --> 00:10:40.250
Multi-value is just basically
an array of triplets,

00:10:40.250 --> 00:10:43.170
identifier, label, and the value.

00:10:45.140 --> 00:10:48.860
A multivalue also has
a notion of a primary.

00:10:48.890 --> 00:10:51.090
Maybe you want to be able to have
a user interface when you say,

00:10:51.460 --> 00:10:52.440
call Joe.

00:10:52.440 --> 00:10:55.500
But Joe has five phone numbers.

00:10:55.500 --> 00:10:59.650
So you can say this is
a primary phone number,

00:10:59.920 --> 00:11:02.590
the primary value for Joe.

00:11:02.800 --> 00:11:07.800
Or Joe has, in this example,
Joe's primary email is joe@mac.com,

00:11:08.000 --> 00:11:10.300
even if he has six or seven emails.

00:11:10.300 --> 00:11:15.810
So we have this notion
of a primary value.

00:11:18.310 --> 00:11:24.740
Like any other collection
classes in the Cocoa framework,

00:11:24.850 --> 00:11:28.150
we have two flavors of this class.

00:11:28.250 --> 00:11:31.760
We have a ABMultiValue,
which is a non-mutable object,

00:11:31.830 --> 00:11:34.390
and we have a MutableMultiValue.

00:11:34.670 --> 00:11:37.740
So let's talk about multivalue first.

00:11:37.790 --> 00:11:39.100
So what can you do with a multivalue?

00:11:39.130 --> 00:11:43.980
You ask for the KAB emails property.

00:11:44.010 --> 00:11:46.680
You're going to get an object
which is an AB multivalue.

00:11:46.700 --> 00:11:50.040
What you can do now is be able
to say how many entries in there.

00:11:50.110 --> 00:11:53.060
So if it's an email,
maybe it's going to be written five.

00:11:53.080 --> 00:11:56.090
It means you have five emails.

00:11:56.950 --> 00:11:58.360
You can also get the index.

00:11:58.590 --> 00:12:02.970
If you have stored somewhere the
identifier for one of these emails,

00:12:02.970 --> 00:12:10.720
you can get the index at the
present time for this identifier.

00:12:10.720 --> 00:12:10.720
So you can get the
index for an identifier.

00:12:11.870 --> 00:12:15.250
You can also ask for
the value at an index,

00:12:15.450 --> 00:12:19.500
the label at an index,
or the identifier at an index.

00:12:21.380 --> 00:12:26.290
You can also ask for
the primary identifier.

00:12:26.300 --> 00:12:28.620
What is the identifier
for the primary email,

00:12:28.670 --> 00:12:30.520
primary phone?

00:12:30.520 --> 00:12:31.940
And you can ask for the type.

00:12:31.940 --> 00:12:36.190
For example, if you have for email,
it's going to return KAB multi-string

00:12:36.800 --> 00:12:42.930
property because every property
for an email is of type string.

00:12:45.930 --> 00:12:50.450
So let's look at some sample
code using multivalue.

00:12:50.590 --> 00:12:55.720
Let's say that I want to display
all the email addresses of a person.

00:12:55.820 --> 00:12:56.570
So I have a person.

00:12:56.700 --> 00:12:59.040
I'll show you later on
how to get to a person.

00:12:59.120 --> 00:13:02.450
I have a person,
and I can ask for give me

00:13:02.880 --> 00:13:05.300
the value for property,
email property.

00:13:05.370 --> 00:13:12.480
I'm going to get back an AB multivalue,
which is all the email of this person.

00:13:12.630 --> 00:13:17.170
I can count how many emails are there.

00:13:17.230 --> 00:13:19.880
I can just do a loop
and log in the value,

00:13:19.950 --> 00:13:23.970
the label, and the value for this person.

00:13:23.970 --> 00:13:27.950
So I will get home one email, work,
another email.

00:13:30.900 --> 00:13:33.360
So now the mutable multivalue.

00:13:33.410 --> 00:13:37.860
This is a multivalue you can change.

00:13:37.860 --> 00:13:40.680
The multivalue,
when you get it from value for property,

00:13:40.680 --> 00:13:42.220
it's a non-mutable value.

00:13:42.220 --> 00:13:44.280
So if you want to make
changes to this value,

00:13:44.280 --> 00:13:46.800
to this multivalue,
you have to make it mutable.

00:13:47.300 --> 00:13:52.120
So for a multiple multivalue,
you can add a value with a label,

00:13:52.180 --> 00:13:56.300
and it returns the identifier for
this new value you just added,

00:13:56.430 --> 00:13:57.440
if you care about it.

00:13:57.540 --> 00:14:02.780
You can insert a value with
a label at a specific index.

00:14:02.780 --> 00:14:06.320
You can remove a value
and a label at an index.

00:14:06.380 --> 00:14:09.920
And you can replace either
the value or the label with

00:14:09.920 --> 00:14:12.340
another value and another label.

00:14:13.740 --> 00:14:17.320
And you can set the primary identifier,
saying this is the primary

00:14:17.760 --> 00:14:20.510
phone number for this person.

00:14:25.140 --> 00:14:26.900
So let's see some code here.

00:14:26.920 --> 00:14:31.290
Let's say that I want to add
an email address to a person.

00:14:31.510 --> 00:14:33.350
I have a person.

00:14:35.300 --> 00:14:39.200
I asked for the list of email.

00:14:39.240 --> 00:14:40.700
So I get a multi-value email.

00:14:40.700 --> 00:14:42.300
But this is a non-mutable.

00:14:42.300 --> 00:14:46.060
Every value returned by value
for property are non-mutable.

00:14:46.060 --> 00:14:48.500
Either string, everything is non-mutable.

00:14:48.500 --> 00:14:52.100
So I get the emails.

00:14:52.100 --> 00:14:56.020
I make it mutable by
making a mutable copy.

00:14:56.250 --> 00:15:00.700
So now I can add a new email,
joe@apple.com.

00:15:00.700 --> 00:15:03.120
And this is his home email.

00:15:03.120 --> 00:15:08.640
So I use the KAB home email label,
which is a standard label we provide.

00:15:08.640 --> 00:15:15.060
And now I can simply set this
value again for the email property.

00:15:15.060 --> 00:15:19.490
And because I made a copy,
I have to release my multi-value here.

00:15:19.970 --> 00:15:23.290
So this adds a new email to a person.

00:15:28.120 --> 00:15:30.520
So we talked about A/B record
and the properties.

00:15:30.590 --> 00:15:35.410
Now let's get into details to the
real object you can manipulate,

00:15:35.470 --> 00:15:36.450
like person and group.

00:15:36.600 --> 00:15:38.500
So let's talk about person.

00:15:38.620 --> 00:15:42.410
So person, A/B person,
is a subclass of A/B record,

00:15:42.410 --> 00:15:45.150
and it represents a person.

00:15:46.680 --> 00:15:48.800
So we have some standard
properties for Person.

00:15:48.830 --> 00:15:50.730
I just put a couple here.

00:15:50.980 --> 00:15:52.790
If you look at the header
or the documentation,

00:15:52.850 --> 00:15:56.840
you'll see we have a bunch of
standard properties for Person.

00:15:56.840 --> 00:15:59.540
So we have first name property,
which is of type string.

00:15:59.540 --> 00:16:01.570
We have a last name,
which is of type string.

00:16:01.570 --> 00:16:03.580
We have a birthday, which is a date.

00:16:03.650 --> 00:16:06.260
We have email, which is a multi-string.

00:16:06.260 --> 00:16:09.280
We have a phone property,
which is a multi-string.

00:16:09.280 --> 00:16:12.860
And we have also an address property,
which is a multi-dictionary property.

00:16:12.860 --> 00:16:16.360
So I want to talk a
little bit about that.

00:16:16.360 --> 00:16:18.870
When you think about address,
street address,

00:16:19.020 --> 00:16:20.490
you can think about two ways.

00:16:20.550 --> 00:16:23.740
You can say, "Oh,
give me the address of someone."

00:16:23.740 --> 00:16:26.270
So an address is just a block of data.

00:16:26.290 --> 00:16:29.140
It's just an address.

00:16:29.230 --> 00:16:32.520
But sometimes you want to think of an
address as something that's a street,

00:16:32.520 --> 00:16:36.720
a city, a zip code, a country,
a country code.

00:16:36.720 --> 00:16:40.500
So to represent an address,
we use a dictionary,

00:16:40.530 --> 00:16:46.090
which the key is the street, the city,
the zip code, whatever.

00:16:46.150 --> 00:16:49.600
And because you can
have multiple addresses,

00:16:49.650 --> 00:16:51.290
this is a multi-dictionary property.

00:16:51.570 --> 00:16:54.420
This is the most complex type we have.

00:16:54.420 --> 00:16:56.380
So like that,
you can deal with addresses as,

00:16:56.380 --> 00:16:58.190
"Give me all your addresses.

00:16:58.320 --> 00:16:59.820
Give me one address.

00:17:00.020 --> 00:17:04.240
Or give me the street of address
home." You can deal with the

00:17:04.640 --> 00:17:07.620
whole hierarchy of possible data.

00:17:11.070 --> 00:17:13.660
ABRecord, as I said,
is a subclass of ABRecord,

00:17:13.660 --> 00:17:17.780
so we have all the APIs of ABRecord,
set value for property, etc.

00:17:17.890 --> 00:17:24.490
But also we have specific
APIs for ABRecord.

00:17:24.690 --> 00:17:28.100
You can set an image on a person.

00:17:28.100 --> 00:17:32.470
We don't use NSImage because
the Address Book Framework is

00:17:32.580 --> 00:17:36.190
a foundation-level framework,
so we don't have access to

00:17:36.220 --> 00:17:37.700
NSImage or things like that.

00:17:37.700 --> 00:17:40.100
The only thing we have
access to is NSData.

00:17:40.170 --> 00:17:43.610
So to set an image on a person,
you pass an NSData that contains the

00:17:43.770 --> 00:17:46.020
TIFF representation for the image.

00:17:46.250 --> 00:17:48.540
So you can say,
"Person set TIFF image from

00:17:48.540 --> 00:17:53.100
data." And in the Address Book,
you're going to see the image showing up.

00:17:53.100 --> 00:17:56.330
You can also get the image for a person.

00:17:56.900 --> 00:17:59.980
And a person that belongs to a group.

00:18:00.290 --> 00:18:05.170
So you can ask, give me a list of all the
groups this person belongs to.

00:18:05.610 --> 00:18:09.700
Parent groups will return an array of
all the groups this person belongs to.

00:18:13.660 --> 00:18:17.580
Maybe a person will support vCard,
so you can create a person from a vCard.

00:18:17.750 --> 00:18:21.180
We support the full 3.0 specs.

00:18:21.200 --> 00:18:25.520
So you can say, create init a person,
init with a vCard representation,

00:18:25.590 --> 00:18:29.180
passing an NSData that contains
a vCard representation.

00:18:29.200 --> 00:18:32.310
And you can also ask for the
vCard representation for a person.

00:18:41.840 --> 00:18:44.610
So let's talk about AB Group now.

00:18:44.930 --> 00:18:49.540
AB Group, like AB Person,
is a subclass of AB Record,

00:18:49.540 --> 00:18:54.140
and it represents a group of
people or a group of other groups.

00:18:54.140 --> 00:18:56.550
The only thing we don't
allow is circular reference,

00:18:56.660 --> 00:19:00.890
so you can't have Group A being in
Group B and Group B being in Group A.

00:19:01.090 --> 00:19:02.490
We don't allow that.

00:19:02.560 --> 00:19:04.230
We return an error.

00:19:04.260 --> 00:19:06.860
So aside from that,
you can have a group with

00:19:07.110 --> 00:19:08.750
Person and other groups.

00:19:08.750 --> 00:19:11.360
You can do every combination you want.

00:19:13.300 --> 00:19:15.380
AB Group has only one
standard property we support,

00:19:15.470 --> 00:19:16.260
which is the name of the group.

00:19:16.600 --> 00:19:19.760
That's the only one we provide.

00:19:21.170 --> 00:19:23.880
You can add the other one if you want,
the description or anything else.

00:19:23.890 --> 00:19:27.750
This is the only standard
property we provide.

00:19:28.810 --> 00:19:35.210
So, like AB Person, AB Group inherits all
the API from AB Record,

00:19:35.210 --> 00:19:38.990
and he has a set of API that
are specific to AB Group.

00:19:39.190 --> 00:19:42.180
You can ask for the
members of this group.

00:19:42.220 --> 00:19:44.840
It will return an array of AB Person.

00:19:44.890 --> 00:19:48.310
You can add a member, which is a person,
or you can remove a

00:19:48.310 --> 00:19:50.010
member from this group.

00:19:50.660 --> 00:19:52.470
same way with the other group,
you can ask,

00:19:52.470 --> 00:19:54.600
give me all the subgroup of this group.

00:19:54.600 --> 00:19:58.760
You can add a subgroup and
you can remove a subgroup.

00:19:58.760 --> 00:20:01.580
And also you can say,
give me all the parent

00:20:01.690 --> 00:20:02.540
group of this group.

00:20:07.750 --> 00:20:12.040
Groups also have something
we call distribution lists.

00:20:12.040 --> 00:20:14.600
This is only valid for
multi-value properties.

00:20:14.670 --> 00:20:18.090
First name,
last name are single value properties,

00:20:18.090 --> 00:20:20.600
so distribution lists don't work.

00:20:20.600 --> 00:20:23.990
But everything that is multi-value,
phone, email, street,

00:20:23.990 --> 00:20:27.680
you can create what we
call a distribution list.

00:20:27.740 --> 00:20:31.610
It's most useful for emails,
which in email is called a mailing list.

00:20:31.830 --> 00:20:36.280
You want to be able to send an
email to everybody in the group.

00:20:36.280 --> 00:20:38.100
Distribution lists allow
you to do something like you

00:20:38.100 --> 00:20:41.920
have a group called friends,
and you have a bunch of person in there.

00:20:41.930 --> 00:20:44.200
Each one of them has
three or four emails,

00:20:44.200 --> 00:20:47.160
but for each person you want
to pick one specific email.

00:20:47.600 --> 00:20:52.300
For John, you want his home email,
but for Paul, you want his work email.

00:20:52.320 --> 00:20:54.690
So distribution lists
allow you to do that,

00:20:54.950 --> 00:20:57.510
to set up a distribution
list from a group.

00:20:58.730 --> 00:21:01.340
So the API gets a little
more complex here.

00:21:01.440 --> 00:21:05.970
So we have two APIs to deal
with distribution lists.

00:21:06.090 --> 00:21:11.380
The first one, setDistributionIdentifier
for property person.

00:21:11.620 --> 00:21:15.980
It means for a given person
belonging to a group,

00:21:16.100 --> 00:21:20.950
for a property email,
I want to use this identifier,

00:21:20.950 --> 00:21:24.280
which may be point to home,
the home email.

00:21:24.420 --> 00:21:27.330
So you can set the
distribution list like that.

00:21:27.770 --> 00:21:31.200
You can also get information
for a given person,

00:21:31.270 --> 00:21:34.600
what is the identifier
for a given property.

00:21:34.600 --> 00:21:40.440
So for person Joe, for property email,
what is the identifier

00:21:40.440 --> 00:21:42.370
for this email address.

00:21:42.600 --> 00:21:44.600
So you can build
distribution lists like that,

00:21:44.600 --> 00:21:46.600
or mailing lists for emails.

00:21:46.600 --> 00:21:49.550
You can do it for,
if you want to print labels or whatever,

00:21:49.620 --> 00:21:53.600
you can also use that for street,
for phone numbers,

00:21:53.600 --> 00:21:59.790
whatever property which
is a multi-value property.

00:22:01.750 --> 00:22:11.440
This is the set distribution identifier,
identifier, the property, the person,

00:22:11.480 --> 00:22:14.160
and here to get,
you want to pass the property

00:22:14.160 --> 00:22:18.150
you want to talk about and which
person you are talking about.

00:22:18.430 --> 00:22:21.430
This is API on AB group.

00:22:24.220 --> 00:22:28.200
So we're going from the bottom,
AB record, AB person, AB group,

00:22:28.200 --> 00:22:32.190
and now we are at the top,
which is the AB address book class.

00:22:34.220 --> 00:22:38.220
So the Address Book object
represents basically the database.

00:22:38.250 --> 00:22:41.100
It represents the
database of your contacts.

00:22:41.100 --> 00:22:45.880
The location of the database is in tilde,
the home directory, library,

00:22:45.880 --> 00:22:48.390
application support, address book.

00:22:50.000 --> 00:22:53.170
You can only create one unique
instance of Address Book.

00:22:53.330 --> 00:22:58.380
So if in your application you ask three
times for the Address Book object,

00:22:58.470 --> 00:23:00.440
you're going to get
always the same instance.

00:23:00.440 --> 00:23:03.290
And you can't create a new
instance of Address Book.

00:23:03.390 --> 00:23:07.310
We always return the shared instance.

00:23:08.010 --> 00:23:13.040
So the API on Address Book,
you can get the share instance.

00:23:13.090 --> 00:23:14.900
Give me the share instance
of the Address Book.

00:23:14.900 --> 00:23:17.340
You made some changes.

00:23:17.340 --> 00:23:22.260
You want to be able to save,
or you want to be able to ask,

00:23:22.450 --> 00:23:24.610
do I have anything to save?

00:23:25.840 --> 00:23:29.630
Notice one point here that a
lot of our API return a Boolean,

00:23:29.630 --> 00:23:32.250
depending if the
operation succeeds or not.

00:23:32.500 --> 00:23:38.080
Most of our API return the Boolean just
to tell you the operation is successful.

00:23:38.080 --> 00:23:40.950
We also, in Objective-C,
we raise exception.

00:23:40.950 --> 00:23:44.460
If you pass a bad parameter,
we will raise an exception.

00:23:47.140 --> 00:23:50.720
So, save, add and save changes.

00:23:50.720 --> 00:23:52.400
We have the concept of a MIE.

00:23:52.460 --> 00:23:55.660
MIE is the owner,
the person who is right now

00:23:55.660 --> 00:23:58.000
logged into the machine.

00:23:58.000 --> 00:23:59.990
So this is a very important concept.

00:24:00.000 --> 00:24:03.290
A lot of applications may want to ask,
the only thing they care about the

00:24:03.290 --> 00:24:06.210
address book is the MIE because you
want to get the shipping address or

00:24:06.210 --> 00:24:07.980
you want to get some other information.

00:24:08.000 --> 00:24:10.430
The MIE is the owner of the database.

00:24:10.470 --> 00:24:12.910
The user in address book can set it up.

00:24:13.130 --> 00:24:14.000
You may also not set it up.

00:24:14.000 --> 00:24:19.800
So if you're using the MIE API,
be ready to get nil because

00:24:19.800 --> 00:24:22.900
maybe the user never set it up.

00:24:23.220 --> 00:24:28.530
So the API is to get the me person,
and so you can set the me person.

00:24:30.770 --> 00:24:34.140
You can also get,
if you have a unique ID for a record,

00:24:34.160 --> 00:24:37.220
you can get this record by
calling record for unique ID,

00:24:37.220 --> 00:24:38.700
passing the unique ID.

00:24:38.700 --> 00:24:41.000
Every record has a unique ID,
so you can save the

00:24:41.340 --> 00:24:42.560
unique ID somewhere else.

00:24:42.560 --> 00:24:45.980
You can get back the record
that has this unique ID.

00:24:46.640 --> 00:24:48.130
You can add a record.

00:24:48.140 --> 00:24:50.620
You can remove a record
from the database.

00:24:50.620 --> 00:24:56.510
You can also ask for all the people and
all the groups that are in this database.

00:24:56.510 --> 00:25:01.260
And we return an array of
AB person and an array of AB group.

00:25:03.770 --> 00:25:05.980
So let's look at some sample code.

00:25:05.980 --> 00:25:08.680
I want to add a person
to the database that's,

00:25:08.680 --> 00:25:11.050
his name is Joe Doe.

00:25:12.820 --> 00:25:17.260
So I have two variables,
an address book and the new person.

00:25:17.320 --> 00:25:21.390
So first, I'm going to ask,
give me the share instance

00:25:21.390 --> 00:25:24.020
of the address book class.

00:25:24.470 --> 00:25:30.990
Then I can create a new person,
any person I look in it auto-release.

00:25:31.360 --> 00:25:32.580
And then I can set my properties.

00:25:32.700 --> 00:25:34.860
So I want to set his first
name and his last name.

00:25:34.860 --> 00:25:39.760
So, new person, set value, John,
for property, first name.

00:25:39.780 --> 00:25:43.540
New person, set value, Doe, for property,
last name.

00:25:43.540 --> 00:25:47.120
And now I can add this
person to the database,

00:25:47.120 --> 00:25:49.360
and I can save my changes.

00:25:49.360 --> 00:25:54.210
So you can do a bunch of changes and
just save when you're ready to save.

00:25:55.550 --> 00:25:56.600
Let's take another case.

00:25:56.620 --> 00:26:00.860
I want to create a group named Friends,
and this group has two persons.

00:26:00.980 --> 00:26:02.710
I don't have many friends, I suppose.

00:26:06.190 --> 00:26:11.380
So Address Book, new group,
get the share instance

00:26:11.380 --> 00:26:15.530
of the Address Book,
create a new group object.

00:26:16.080 --> 00:26:20.940
Set the name of this group,
a big group named Property Friends.

00:26:20.940 --> 00:26:23.760
And now I add my two
persons into this group,

00:26:23.760 --> 00:26:27.130
Add Person, Person 1, Add Person,
Person 2.

00:26:27.280 --> 00:26:33.130
And I can add this group to the database.

00:26:33.730 --> 00:26:36.960
I assume here that the person
were already in the database,

00:26:37.000 --> 00:26:39.200
the existing persons.

00:26:39.230 --> 00:26:40.540
And I can save my changes.

00:26:40.580 --> 00:26:43.640
So as you see, this is very, very simple.

00:26:45.320 --> 00:26:48.200
Now we're getting to
something more interesting.

00:26:48.200 --> 00:26:50.860
More often,
what you want to do with this kind

00:26:50.860 --> 00:26:52.400
of database is do some search.

00:26:52.400 --> 00:26:54.200
You want to search for something.

00:26:54.210 --> 00:26:57.940
So the key API here is in
the Address Book class.

00:26:58.190 --> 00:27:03.550
It records matching search elements,
and it will return an array of all the

00:27:03.550 --> 00:27:07.200
records that match the search elements.

00:27:07.200 --> 00:27:10.200
So what are those search elements?

00:27:10.200 --> 00:27:12.200
So let's talk about search elements.

00:27:12.200 --> 00:27:16.200
The search element is a
building block for query.

00:27:16.200 --> 00:27:19.940
For example, you want to say,
"Find all the people that live

00:27:20.010 --> 00:27:25.150
in New York and have a Mac.com
email address." That's your query.

00:27:25.310 --> 00:27:27.200
So you will need three search elements.

00:27:27.200 --> 00:27:30.820
The first one is,
"The home city of this person

00:27:30.820 --> 00:27:35.650
is called New York." The second
search element would be,

00:27:35.650 --> 00:27:40.300
"Find all the email
that contains Mac.com."

00:27:40.390 --> 00:27:43.120
And the third element is a
combination of those two.

00:27:43.120 --> 00:27:46.060
I want the first one and the second one.

00:27:46.170 --> 00:27:48.590
So as you can see,
you can create little blocks and

00:27:48.590 --> 00:27:51.940
combine them into one bigger sentence.

00:27:53.370 --> 00:27:55.460
So how do you create a search element?

00:27:55.490 --> 00:27:57.140
There are two methods to do that.

00:27:57.140 --> 00:28:00.640
There are three, but I will talk about
the third one later.

00:28:00.640 --> 00:28:06.060
The two important ones are there are
class methods on AB_PERSON and AB_GROUP.

00:28:06.060 --> 00:28:09.440
So if you want to search people,
you're going to create a search

00:28:09.450 --> 00:28:11.450
element using the AB_PERSON API.

00:28:11.780 --> 00:28:16.320
If you want to create a search on groups,
you're going to create a search

00:28:16.680 --> 00:28:19.600
element using the method on AB_GROUP.

00:28:20.000 --> 00:28:28.600
[Transcript missing]

00:28:28.770 --> 00:28:35.260
The property, I want to search emails,
I want to search addresses.

00:28:35.330 --> 00:28:38.100
He has a label, I want to search home,
work.

00:28:38.100 --> 00:28:38.970
He has a key.

00:28:38.970 --> 00:28:43.490
The key is, for example,
for the multi-dictionary I talked before.

00:28:43.490 --> 00:28:48.490
I want to search only on the street,
or on the zip code, or on the country.

00:28:48.490 --> 00:28:49.790
And he has a value.

00:28:49.790 --> 00:28:53.520
I want to search for John, for Paul.

00:28:53.520 --> 00:28:57.930
And the type of comparison, contents,
greater or less.

00:28:57.930 --> 00:29:02.810
We have a dozen of different
types of comparison.

00:29:03.960 --> 00:29:04.820
So let's take an example.

00:29:04.820 --> 00:29:10.020
It's much easier to understand
with an example than anything else.

00:29:10.080 --> 00:29:14.970
So I want to search for all people
that have John as first name.

00:29:16.150 --> 00:29:20.540
So I declare some variable address book,
a search element,

00:29:20.550 --> 00:29:24.340
and the NNS array where I will
have the result of my query.

00:29:24.370 --> 00:29:27.160
Get the shared address book.

00:29:27.240 --> 00:29:30.900
And here I'm going to
create a search element.

00:29:30.900 --> 00:29:34.700
So I'm looking for people,
so I create a search element by

00:29:34.710 --> 00:29:37.340
calling a method on any person.

00:29:37.580 --> 00:29:39.660
I'm searching for first name.

00:29:39.730 --> 00:29:41.330
So, properties, first name.

00:29:41.330 --> 00:29:43.100
First name is a single value.

00:29:43.100 --> 00:29:44.500
There is no label, there is no key.

00:29:44.500 --> 00:29:47.500
So I pass nil for the label,
nil for the key,

00:29:47.720 --> 00:29:49.970
and I'm searching for John.

00:29:50.420 --> 00:29:53.050
And I want to find an
equal case and sensitive.

00:29:53.060 --> 00:29:56.490
Maybe I didn't type the upper case,
so I just want to be sure to find

00:29:56.490 --> 00:29:58.080
everybody with the name John.

00:29:58.300 --> 00:30:02.440
And I call Address Book,
record matching search element,

00:30:02.440 --> 00:30:05.410
and it's passing my
element I just created,

00:30:05.410 --> 00:30:08.870
and it's going to return an
array containing all the people

00:30:08.870 --> 00:30:11.090
who have John as first name.

00:30:13.020 --> 00:30:14.430
Let's take another example.

00:30:14.630 --> 00:30:18.130
Search for all people living in New York.

00:30:18.260 --> 00:30:19.400
Same thing.

00:30:19.520 --> 00:30:23.140
All people, so I create a search
element on AB Person.

00:30:23.220 --> 00:30:28.130
I'm searching for an address,
so the property is KAB Address Property.

00:30:28.790 --> 00:30:32.170
I say live in New York,
so I want to only search

00:30:32.170 --> 00:30:34.070
for the label "home."

00:30:34.320 --> 00:30:36.960
And I say New York,
so the city is a city.

00:30:37.170 --> 00:30:41.110
So the key here, because the street,
the...

00:30:41.580 --> 00:30:42.500
An address is a dictionary.

00:30:42.500 --> 00:30:46.160
The key is address city key.

00:30:46.160 --> 00:30:48.000
And the value is New York.

00:30:48.070 --> 00:30:49.490
Case and sensitive, also.

00:30:49.500 --> 00:30:51.500
I may have not typed it correctly.

00:30:51.740 --> 00:30:54.930
And address book, record matching,
search element,

00:30:54.930 --> 00:30:58.200
and I get a result of all the
people who live in New York.

00:30:59.790 --> 00:31:01.350
So now if you want to
make more complex search,

00:31:01.480 --> 00:31:04.900
you want to combine them,
there is one other way to

00:31:04.900 --> 00:31:05.780
create a search element.

00:31:05.780 --> 00:31:10.260
And there is a method on
absearchelement itself where

00:31:10.340 --> 00:31:13.200
you can combine sub-elements.

00:31:13.280 --> 00:31:15.930
The function is called search
element for conjunction.

00:31:15.940 --> 00:31:20.110
So the conjunction can be and and or,
and you pass an array of children.

00:31:20.120 --> 00:31:23.100
So let's see how to do that.

00:31:23.180 --> 00:31:26.910
So let's say we want to search for
all people that live in New York and

00:31:26.910 --> 00:31:28.820
have a mac.com email address.

00:31:30.790 --> 00:31:36.970
So declare a bunch of variables,
and it's three search elements.

00:31:37.520 --> 00:31:42.900
I need an array to put all those
elements into the children for the query.

00:31:42.900 --> 00:31:44.960
I need the result array for the result.

00:31:45.030 --> 00:31:48.400
Get my address book shared instance.

00:31:48.400 --> 00:31:51.200
And let's build those elements.

00:31:51.250 --> 00:31:53.560
So I'm searching on AB Person.

00:31:53.760 --> 00:31:56.100
This is the same as before.

00:31:56.150 --> 00:32:02.880
Property address, home, address city key,
New York, case insensitive.

00:32:02.940 --> 00:32:05.620
For the second one, the email.

00:32:05.870 --> 00:32:08.700
I didn't say if it was the
home email or the work,

00:32:08.730 --> 00:32:11.620
so I just used KAB email property.

00:32:11.630 --> 00:32:12.650
I passed "nil" as a label.

00:32:12.770 --> 00:32:14.480
I want to search for every email.

00:32:14.480 --> 00:32:17.960
I don't care about the label.

00:32:17.960 --> 00:32:21.280
Email is multistring, so there is no key.

00:32:21.380 --> 00:32:27.320
I'm searching for mac.com,
and I'm searching for content substring.

00:32:27.370 --> 00:32:31.200
I could also search for
"ends with mac.com."

00:32:32.670 --> 00:32:35.860
So now I have my two search elements,
one for the city, one for the email,

00:32:35.860 --> 00:32:37.080
and I need to combine them.

00:32:37.150 --> 00:32:39.880
First I create an array
of those children,

00:32:39.920 --> 00:32:44.520
put them together, and then I'm going to
create the third element,

00:32:44.580 --> 00:32:49.500
saying, "I want to do an 'and'," and
this is all the children,

00:32:49.500 --> 00:32:51.760
the two previous elements I've created.

00:32:51.780 --> 00:32:56.640
And I call Address
Book Record Matching Search Element.

00:32:56.660 --> 00:33:02.290
And it's going to return
the result of your query.

00:33:04.930 --> 00:33:08.240
That's all for searching.

00:33:08.330 --> 00:33:12.280
The next topic is notification.

00:33:12.880 --> 00:33:15.940
The Address Book Framework
provides two notifications.

00:33:16.010 --> 00:33:19.340
The first one,
KAB Database Change Notification,

00:33:19.340 --> 00:33:23.240
means your process changes the database.

00:33:23.330 --> 00:33:25.400
So you may want to listen
to this notification or not,

00:33:25.400 --> 00:33:28.770
depending on how your
application is built.

00:33:29.120 --> 00:33:32.230
You may not want to listen to it because
your application is making the change,

00:33:32.300 --> 00:33:34.860
so you may change your UI.

00:33:34.860 --> 00:33:37.260
You know that you've changed it,
so you don't care.

00:33:37.390 --> 00:33:40.500
The other one means
KAB Database Change Externally,

00:33:40.500 --> 00:33:43.180
means some other process
has changed the database.

00:33:43.240 --> 00:33:45.790
You better listen to this one
because you may have to reflect

00:33:45.820 --> 00:33:47.030
those changes into your UI.

00:33:47.240 --> 00:33:49.720
New people were created,
new people were deleted,

00:33:49.820 --> 00:33:52.340
so you have to do something.

00:33:52.410 --> 00:33:53.530
So those are the two notifications.

00:33:53.730 --> 00:33:58.810
One for, I've changed my database,
someone else has changed the database.

00:34:01.560 --> 00:34:04.260
As I said also before,
you can extend the property set.

00:34:04.550 --> 00:34:08.620
So we provide a set of
standard properties,

00:34:08.630 --> 00:34:13.840
but you can add your own properties
if you want to add the height

00:34:13.840 --> 00:34:16.580
of someone or anything you want.

00:34:16.680 --> 00:34:19.180
Be careful with the property name.

00:34:19.180 --> 00:34:22.320
It has to be unique,
so give him a unique name,

00:34:22.320 --> 00:34:26.230
com.apple or com.mycompany.somethingelse.

00:34:28.330 --> 00:34:34.840
So how do you add properties?

00:34:35.200 --> 00:34:38.480
You can add properties on
either AB person or AB group,

00:34:38.480 --> 00:34:39.400
whichever.

00:34:39.400 --> 00:34:42.560
By the way,
when I say the name has to be unique,

00:34:42.670 --> 00:34:44.900
it has to be unique in AB person.

00:34:44.900 --> 00:34:48.400
You can have first name in
person and first name in group.

00:34:48.400 --> 00:34:49.640
They are fine.

00:34:49.740 --> 00:34:51.860
Just for an AB person,
all the properties have to be unique.

00:34:51.980 --> 00:34:55.600
For an AB group,
all the properties have to be unique.

00:34:55.600 --> 00:34:56.950
Properties are added
and removed in batch.

00:34:57.110 --> 00:34:58.810
It's more efficient for us.

00:34:58.850 --> 00:35:01.520
You basically say add
properties and types,

00:35:01.760 --> 00:35:03.520
and you pass a dictionary.

00:35:03.530 --> 00:35:07.490
The dictionary is the key,
is the name of the property,

00:35:07.490 --> 00:35:09.930
and the value is the
type of the property,

00:35:10.150 --> 00:35:14.060
integer, real, date, et cetera.

00:35:14.060 --> 00:35:16.820
We return the number of
properties we were able to add.

00:35:17.000 --> 00:35:23.680
If you give me 10 and I return 9,
it means I wasn't able to add 10.

00:35:23.680 --> 00:35:26.310
You can also remove properties.

00:35:26.350 --> 00:35:30.210
Just pass me an array of
the names of the properties

00:35:30.530 --> 00:35:34.640
We can also give you the property for,
for example, AB Person.

00:35:34.640 --> 00:35:37.240
If you call AB Person properties,
you're going to get an array of

00:35:37.240 --> 00:35:38.380
all the properties on Person.

00:35:38.380 --> 00:35:41.070
And you can ask for the
type of a given property.

00:35:41.070 --> 00:35:44.600
So if you give me
KAB first name property,

00:35:44.600 --> 00:35:47.620
I'm going to return you a string.

00:35:54.220 --> 00:35:59.090
So I'll show you Objective-C APIs,
but we fully support

00:35:59.090 --> 00:36:01.050
C also in this framework.

00:36:01.100 --> 00:36:04.640
So if you are a Carbon developer,
you can use the Address

00:36:04.720 --> 00:36:07.120
Book Framework using the C APIs.

00:36:07.120 --> 00:36:11.600
They are one-to-one matching between
the C APIs and the Objective-C APIs.

00:36:11.600 --> 00:36:15.170
This is exactly the same APIs,
just the syntax is a bit different.

00:36:15.440 --> 00:36:19.420
Classes, instead of being objects,
they are represented by OPEC type.

00:36:19.440 --> 00:36:24.080
So we have AB Person Ref, AB Group Ref,
AB Multi-Value Ref.

00:36:24.080 --> 00:36:25.340
This is very, very similar.

00:36:25.340 --> 00:36:27.420
It's exactly the same
thing as the other CF,

00:36:27.600 --> 00:36:29.570
the Core Foundation APIs.

00:36:29.570 --> 00:36:34.130
So you have the same rule,
the same coding convention as any

00:36:34.130 --> 00:36:36.690
other Core Foundation framework.

00:36:38.930 --> 00:36:41.930
So, give an example here,
which is the example of creating

00:36:42.030 --> 00:36:45.900
a person called John Doe.

00:36:46.040 --> 00:36:52.080
Something, I AB get shared address book,
which return an address book ref.

00:36:52.090 --> 00:36:56.300
I create a person, AB person create,
give me a person.

00:36:56.960 --> 00:37:01.680
AB_RECORD_SET_VALUE passing the person,
the record in this case,

00:37:01.720 --> 00:37:07.490
the CFSTR for the name,
and the KAB_FIRSTNAME property.

00:37:07.630 --> 00:37:10.080
Set the value for the last name.

00:37:10.550 --> 00:37:15.260
And I can now tell the address book,
add this record.

00:37:15.280 --> 00:37:17.250
And don't forget to release the person.

00:37:17.250 --> 00:37:21.600
You've done a call, AB create,
create bumps or fcounts,

00:37:21.690 --> 00:37:22.750
so you have to release your object.

00:37:22.840 --> 00:37:26.170
So I have to do a CF release person.

00:37:28.810 --> 00:37:32.970
We also fully support AppleScript.

00:37:33.310 --> 00:37:35.720
I think there was a demo during
the-- I think in this same room,

00:37:35.730 --> 00:37:39.160
there was a demo of
AppleScript support in Address

00:37:39.160 --> 00:37:42.340
Book during the AppleScript session.

00:37:42.420 --> 00:37:46.860
So you have full access to all
the Address Book API-- Address

00:37:46.860 --> 00:37:49.680
Book Framework API with AppleScript.

00:37:49.720 --> 00:37:52.760
This API is accessed through
the Address Book application.

00:37:52.830 --> 00:37:56.720
So you have to tell
application Address Book.

00:37:57.050 --> 00:37:59.330
But you have full access to all the API.

00:37:59.640 --> 00:38:02.090
So this is an example.

00:38:02.090 --> 00:38:05.070
I want to list all the
emails for a person.

00:38:05.330 --> 00:38:08.630
So tell application address book.

00:38:08.630 --> 00:38:10.000
I say set all people to people.

00:38:10.000 --> 00:38:13.320
People will return a list of
all the people in the database.

00:38:13.320 --> 00:38:17.000
And now I'm going to repeat
with a person in all people.

00:38:17.000 --> 00:38:23.140
And I'm going to say set all
emails to emails of a person.

00:38:23.140 --> 00:38:26.000
So I'm going to get all
the emails of a person.

00:38:26.000 --> 00:38:32.660
And I'm going to print the value going
through every email in a multivalue,

00:38:32.660 --> 00:38:35.040
log the value for this email as a string.

00:38:35.040 --> 00:38:37.190
So that's it.

00:38:37.450 --> 00:38:43.180
Same process, different syntax,
but all the APIs are available.

00:38:44.700 --> 00:38:51.290
So what I want to do now
is give you a short demo

00:38:51.800 --> 00:38:54.200
address book framework,
the address book application.

00:38:54.520 --> 00:39:00.590
So in the Jaguar, we have a brand new
address book application.

00:39:01.160 --> 00:39:02.450
I'm sure you've seen it.

00:39:02.590 --> 00:39:03.660
It was demoed at the keynote.

00:39:03.710 --> 00:39:10.380
It was demoed several times
during this conference.

00:39:10.480 --> 00:39:13.460
So this is basically the address book.

00:39:13.520 --> 00:39:17.320
We try to have something
that looks like a card.

00:39:17.900 --> 00:39:20.000
You can switch cards.

00:39:20.030 --> 00:39:22.800
You can add notes at the bottom.

00:39:22.860 --> 00:39:24.580
And so you can

00:39:26.640 --> 00:39:30.330
very much like iTunes or
any other application.

00:39:30.360 --> 00:39:33.950
You can do a quick search, so

00:39:35.010 --> 00:39:36.960
The demo before was to
search for Fred Anderson.

00:39:36.960 --> 00:39:40.990
I type Fred and I get,
it says here I have four Fred in

00:39:40.990 --> 00:39:42.650
my database so I can continue.

00:39:42.870 --> 00:39:47.150
And it says there is
only one Fred Anderson.

00:39:47.730 --> 00:39:53.670
So I can also switch to go
around all my different threads.

00:39:56.290 --> 00:40:06.180
So, a very well-known user interface,
very easy to use.

00:40:07.830 --> 00:40:11.660
Something we try to do is that we
have also those rollovers here.

00:40:11.850 --> 00:40:16.760
So for example, from a phone number you
can get a large type,

00:40:16.780 --> 00:40:18.690
so you can read it on the screen.

00:40:18.770 --> 00:40:20.700
You can also, from an email,
you can send email.

00:40:20.700 --> 00:40:24.200
If it's a mac.com email,
you can visit the home

00:40:24.200 --> 00:40:25.900
page of this person.

00:40:25.900 --> 00:40:28.700
You can open the ID from this person.

00:40:28.700 --> 00:40:32.610
If you have a URL,
you can go to the website.

00:40:32.940 --> 00:40:36.710
And also you can,
if you have a street address,

00:40:36.810 --> 00:40:37.680
you can also get a large type.

00:40:38.720 --> 00:40:39.700
I don't know if I'm connected.

00:40:40.110 --> 00:40:44.750
You can get a map of this address.

00:40:47.640 --> 00:40:53.400
So you have great direct access to
all the information in this card.

00:40:53.400 --> 00:40:58.350
If you want to change something,
you can always add a note to a card.

00:40:58.430 --> 00:41:01.780
So you can always type inside the card.

00:41:01.780 --> 00:41:06.220
And it's immediately indexed.

00:41:06.220 --> 00:41:06.220
So if I type my name, I can see it.

00:41:07.540 --> 00:41:14.920
And I go to some other card
and I search for Lamiraux.

00:41:15.120 --> 00:41:16.100
He found two cards.

00:41:16.120 --> 00:41:18.760
One is here, and one is my real card.

00:41:18.840 --> 00:41:21.990
So immediate indexing of every
information you're typing.

00:41:22.000 --> 00:41:28.740
If you want to change something,
you go to edit mode, and you can edit in

00:41:28.740 --> 00:41:30.000
place your information.

00:41:30.000 --> 00:41:33.300
You can add a new phone.

00:41:36.370 --> 00:41:38.930
You can add a new email if you want, etc.

00:41:39.040 --> 00:41:43.300
If you want to delete, just go there,
delete it, and it's gone.

00:41:43.300 --> 00:41:48.770
And once deleted, we only show you the
information that's available.

00:41:49.910 --> 00:41:55.670
You can also have access to groups.

00:41:55.800 --> 00:42:00.470
So here I'm looking at
everything in my database.

00:42:00.570 --> 00:42:05.280
So I'm listing everything contained here,
but I can also get access to groups.

00:42:08.010 --> 00:42:10.460
If I want to move someone in a group,
it's easy.

00:42:10.460 --> 00:42:14.690
Let's take Bruce Arthur,
move it into the emergency.

00:42:14.900 --> 00:42:20.900
So just moving, dragging and moving,
you can easily... Bruce Arthur is here.

00:42:20.940 --> 00:42:22.900
Notice here that I have a subgroup.

00:42:22.900 --> 00:42:26.700
So emergency has a
subgroup which is doctor.

00:42:26.900 --> 00:42:31.900
So a very simple user interface
based on the Address Book Framework,

00:42:31.910 --> 00:42:36.900
and a lot of applications in Jaguar will
be using this Address Book Framework.

00:42:36.900 --> 00:42:38.490
framework.

00:42:43.170 --> 00:42:50.000
So as I said, Address Book Framework will
be available in Jaguar.

00:42:50.000 --> 00:42:53.300
It's a brand new framework
available in Jaguar.

00:42:53.370 --> 00:42:55.920
And we really stress if you have
anything to do with addresses,

00:42:55.920 --> 00:42:58.600
with email, with phone,
we really want you to use it

00:42:58.610 --> 00:43:02.500
because it's going to give our
user a much better user experience.

00:43:02.570 --> 00:43:04.180
Everything will be in one place.

00:43:04.290 --> 00:43:07.820
You can get the MiCard so you can
get access to shipping addresses.

00:43:07.820 --> 00:43:09.680
You can have access to a lot of things.

00:43:09.680 --> 00:43:12.710
You can have access to the image
of a person so you can display

00:43:12.800 --> 00:43:14.670
that in some other application.

00:43:14.820 --> 00:43:18.190
It's really an important piece
for a better user experience,

00:43:18.290 --> 00:43:20.080
centralized information.

00:43:20.110 --> 00:43:22.220
And as I said,
it's used extensively in Jaguar,

00:43:22.220 --> 00:43:24.950
so you want your application
to play well with all the other

00:43:24.950 --> 00:43:26.370
applications on the system.

00:43:28.590 --> 00:43:33.450
And I would like to invite John Gilenzi,
who is the person to contact.

00:43:33.540 --> 00:43:35.700
Monsieur John Gilenzi.