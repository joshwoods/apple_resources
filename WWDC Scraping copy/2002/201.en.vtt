WEBVTT

00:00:03.230 --> 00:00:05.230
Hi, everybody.

00:00:05.490 --> 00:00:08.190
Welcome to the session on
the Font Manager in Mac OS X.

00:00:08.330 --> 00:00:10.340
It has been a great year for us.

00:00:10.610 --> 00:00:14.500
We've been doing a lot of
improvements on the supported fonts,

00:00:14.500 --> 00:00:15.730
the different types.

00:00:15.880 --> 00:00:18.990
If you went to, actually yesterday,
to the keynote,

00:00:19.050 --> 00:00:24.740
you heard that now the font panel is
available for Carbon applications.

00:00:24.860 --> 00:00:27.000
The group that has been working on that
is actually the Font Manager group,

00:00:27.000 --> 00:00:29.260
and we'll have them today,
so this should be a pretty

00:00:29.260 --> 00:00:30.650
interesting session.

00:00:30.770 --> 00:00:33.080
Quickly, I'll go through the agenda.

00:00:33.170 --> 00:00:36.580
We'll have a quick overview of what the
Font Manager is on Mac OS X and what have

00:00:36.600 --> 00:00:40.060
been the changes compared with Mac OS 9.

00:00:40.150 --> 00:00:43.330
We'll go through what I think is probably
the most important for you developers.

00:00:43.470 --> 00:00:47.070
We'll go through a list of features
and enhancements that the team has been

00:00:47.070 --> 00:00:51.090
working on for Mac OS codename Jaguar.

00:00:51.190 --> 00:00:53.800
We'll have some demonstration
about these new features.

00:00:53.880 --> 00:00:57.380
And, of course,
we'll go into the details of

00:00:57.460 --> 00:01:01.200
programming APIs on how you're going
to be able to access the font panel,

00:01:01.200 --> 00:01:03.990
for instance, and all these new features
and the new font that we're

00:01:03.990 --> 00:01:06.260
supporting now on Mac OS X.

00:01:07.460 --> 00:01:10.040
To talk about this overview
and build this presentation,

00:01:10.040 --> 00:01:12.590
I'd like to introduce Mike Conley,
who is a senior software

00:01:12.590 --> 00:01:13.820
engineer in the Type group.

00:01:13.840 --> 00:01:16.160
And Mike will be actually guiding
you through all these features that

00:01:16.160 --> 00:01:17.290
you're going to be discovering.

00:01:17.460 --> 00:01:18.980
Thank you.

00:01:27.530 --> 00:01:32.000
So I'm going to guide you through
the exciting and never-ending

00:01:32.000 --> 00:01:34.390
fun world of the Font Manager.

00:01:34.400 --> 00:01:38.400
As Xavier pointed out,
I'm going to do a quick overview.

00:01:38.400 --> 00:01:40.740
I'm going to try to make it as
quick and painless as possible.

00:01:40.740 --> 00:01:43.720
For those of you who have
already seen all this material,

00:01:43.720 --> 00:01:46.350
you can probably just close
your eyes and get some rest,

00:01:46.360 --> 00:01:48.400
and the rest of you can pay attention.

00:01:48.400 --> 00:01:51.950
We'll wake the other folks up when
we're all done with the overview.

00:01:52.030 --> 00:01:57.290
This is the diagram that describes
the interaction between applications

00:01:57.300 --> 00:01:59.440
and Mac OS X font services.

00:01:59.440 --> 00:02:01.800
You'll notice that various
applications communicate with the

00:02:01.800 --> 00:02:03.240
Application Services Framework.

00:02:03.240 --> 00:02:05.790
The Application Services Framework
contains,

00:02:05.790 --> 00:02:08.350
among other things,
the QuickDraw subframework,

00:02:08.400 --> 00:02:13.110
which exports the APIs for Atsui,
and QuickDraw text services,

00:02:13.110 --> 00:02:17.890
which are used primarily by
Carbon applications and .

00:02:18.910 --> 00:02:19.600
I just lost my mic.

00:02:19.640 --> 00:02:20.850
HTML rendering.

00:02:20.860 --> 00:02:24.360
It also exports the Quartz API.

00:02:24.360 --> 00:02:25.670
I keep losing my mic.

00:02:25.720 --> 00:02:27.230
But that's all right.

00:02:27.240 --> 00:02:27.580
I'll just talk.

00:02:27.610 --> 00:02:30.460
Quartz API,
which is part of Core Graphics,

00:02:30.460 --> 00:02:32.000
and it's used by Cocoa applications.

00:02:32.000 --> 00:02:35.960
All these subframeworks communicate
with the ATS client framework,

00:02:35.960 --> 00:02:41.600
which handles all the ATS APIs and
SPIs used by the system.

00:02:41.600 --> 00:02:45.780
And the ATS client framework
talks directly to the ATS server,

00:02:45.780 --> 00:02:48.760
which is a separate process that's
responsible for maintaining the

00:02:48.770 --> 00:02:50.570
font database for the entire system.

00:02:50.580 --> 00:02:54.270
And it also handles such things
as activating and deactivating

00:02:54.330 --> 00:02:58.440
your fonts and supplying glyph
outline data and table information,

00:02:58.440 --> 00:03:01.440
name table information,
that sort of thing.

00:03:05.830 --> 00:03:10.240
Font formats supported in OS X are
all the ones you're used to by now:

00:03:10.260 --> 00:03:15.300
Macintosh TrueType, PostScript,
Windows TrueType,

00:03:15.310 --> 00:03:17.700
OpenType fonts of various types.

00:03:17.700 --> 00:03:19.600
For Jaguar,
and those of you who are sleeping

00:03:19.600 --> 00:03:23.790
can keep on sleeping because we'll go
back over these in more detail later,

00:03:23.790 --> 00:03:27.920
we plan to add
PostScript Multiple Master Support,

00:03:27.920 --> 00:03:32.290
some enhancements to
our TrueType support,

00:03:32.290 --> 00:03:33.020
and protected CID font support.

00:03:36.330 --> 00:03:40.260
I'm sure by now you're all pretty
used to the user font locations.

00:03:40.270 --> 00:03:43.300
These are the various font folders
which the system knows about.

00:03:43.340 --> 00:03:47.260
We refer to these as domains,
user local network system,

00:03:47.400 --> 00:03:48.690
and classic font domains.

00:03:48.730 --> 00:03:54.900
These are the standard locations
where ATS Server will automatically

00:03:54.980 --> 00:03:54.980
activate and deactivate
fonts for you as necessary.

00:03:55.230 --> 00:03:59.530
If you want to have fonts installed
on your system that only the currently

00:03:59.590 --> 00:04:02.890
logged in user has access to,
you should put them in the User Domain,

00:04:02.890 --> 00:04:04.100
the User Fonts folder.

00:04:04.180 --> 00:04:06.110
If you have fonts you want
to have all the users on a

00:04:06.110 --> 00:04:09.410
given system have access to,
they should go into the Local Domain,

00:04:09.450 --> 00:04:10.760
the Local Fonts folder.

00:04:10.980 --> 00:04:13.260
The System Fonts folder,
the system domain is designed

00:04:13.260 --> 00:04:15.490
specifically for fonts that
are used by the system,

00:04:15.500 --> 00:04:18.100
and you really shouldn't be
putting anything in there.

00:04:18.100 --> 00:04:20.890
We would really prefer it if you didn't.

00:04:21.000 --> 00:04:25.710
Classic Font Domain is for cases
where you have a large number of

00:04:25.710 --> 00:04:29.990
users who have access to a common file
server and a large number of fonts you

00:04:29.990 --> 00:04:31.900
want to share with all those users.

00:04:31.900 --> 00:04:36.170
You can install them on a network server,
which comes up on a mount

00:04:36.170 --> 00:04:38.160
point on everybody's system.

00:04:38.160 --> 00:04:40.080
They all will have access
to the same set of fonts,

00:04:40.080 --> 00:04:44.390
and it makes administration and control
of those files a whole lot simpler.

00:04:44.400 --> 00:04:46.840
Of course,
then there's the Classic Fonts folder,

00:04:46.840 --> 00:04:50.470
which is in the currently active system
folder for Classic on your system,

00:04:50.470 --> 00:04:55.610
and it will change depending on which
Classic system you decide to select.

00:04:55.740 --> 00:04:58.980
Note that Classic apps, of course,
only have access to those fonts.

00:04:59.050 --> 00:05:01.210
They don't get access to the other ones.

00:05:04.730 --> 00:05:07.980
When you're activating fonts,
you can do it programmatically

00:05:08.130 --> 00:05:09.960
from anywhere in the system.

00:05:09.960 --> 00:05:13.300
You don't have to depend on
the standard font domains.

00:05:13.300 --> 00:05:14.960
If your application
needs to activate a font,

00:05:14.960 --> 00:05:18.400
you can put the fonts in any
folder that you know about.

00:05:18.400 --> 00:05:21.080
You can put it in your
application bundle.

00:05:21.080 --> 00:05:24.890
You can stick it in your application
resource fork and activate it

00:05:24.900 --> 00:05:27.400
programmatically from there,
if you like.

00:05:27.400 --> 00:05:31.130
Note that unlike OS 9, of course,
application resource fork fonts

00:05:31.280 --> 00:05:33.820
don't get activated automatically
when you open up the file.

00:05:33.830 --> 00:05:36.590
You have to actually to
make a call to do that.

00:05:38.960 --> 00:05:42.320
For Jaguar, we plan to add a new feature
called Auto Activation,

00:05:42.500 --> 00:05:45.290
and I'll be talking about
that a little bit later.

00:05:46.880 --> 00:05:49.130
After we've woken everybody up.

00:05:49.130 --> 00:05:50.070
Installing fonts.

00:05:50.070 --> 00:05:52.230
Installing fonts,
everybody's used to how to do that.

00:05:52.300 --> 00:05:56.500
You drag and drop them into
the standard font directories.

00:05:56.500 --> 00:06:00.260
On application launch or at user login,
ATS Server will automatically scan those

00:06:00.980 --> 00:06:06.400
directories and activate the fonts or
deactivate ones that have been removed.

00:06:06.400 --> 00:06:09.240
We do resolution of duplicate
fonts across domains.

00:06:09.240 --> 00:06:12.580
If you have two of the same font,
we will handle the resolution

00:06:12.580 --> 00:06:16.300
between those two and select one
preferentially over the other.

00:06:16.340 --> 00:06:19.670
Font ID conflicts will be
handled by synthesizing font IDs,

00:06:19.680 --> 00:06:24.200
which is why, as we'll mention later on,
it's a bad idea to use font IDs to

00:06:24.200 --> 00:06:27.890
track fonts in your documents because
they're not unique across boots.

00:06:30.130 --> 00:06:32.540
For Jaguar,
we plan to add a couple of new features:

00:06:32.540 --> 00:06:38.330
handling nested font subdirectories,
and font notification API,

00:06:38.330 --> 00:06:42.250
which will be discussed in
more detail in a minute.

00:06:44.130 --> 00:06:54.140
Most of you are familiar with the
API for the standard Carbon font menu.

00:06:54.140 --> 00:06:58.390
It gives you an easy and uniform
way of putting up a font menu

00:06:58.390 --> 00:07:01.270
for all your Carbon applications.

00:07:02.700 --> 00:07:06.740
For Jaguar,
we plan to add an API to support the font

00:07:07.060 --> 00:07:10.960
panel that you've seen in Cocoa apps,
which will allow you to have a

00:07:10.970 --> 00:07:14.080
uniform font selection across both
Carbon and Cocoa applications,

00:07:14.110 --> 00:07:15.410
and we'll talk about that in a bit.

00:07:17.460 --> 00:07:18.800
Okay, time to wake up.

00:07:18.860 --> 00:07:20.640
So, all you guys were sleeping.

00:07:20.830 --> 00:07:23.620
These are the new features that
we're planning on adding for Jaguar,

00:07:23.620 --> 00:07:27.060
and we'll go through them one by one and
discuss them in a little more detail.

00:07:27.060 --> 00:07:31.800
So the overview wasn't too bad, was it?

00:07:31.800 --> 00:07:31.820
Nice and painless.

00:07:32.180 --> 00:07:35.040
Postscript Multiple Master Fonts.

00:07:35.040 --> 00:07:38.420
We plan to support Postscript
Type 1 Multiple Master Fonts.

00:07:38.420 --> 00:07:43.290
They will show up as typefaces,
separate typefaces of a given

00:07:43.340 --> 00:07:48.860
type family in applications,
in font menus and in the font panel.

00:07:48.860 --> 00:07:53.520
You'll be able to select the instances,
the intrinsic instances

00:07:53.520 --> 00:07:55.460
as a typeface or a style.

00:07:55.460 --> 00:07:59.810
If you have a document that
has a Multiple Master Font in

00:07:59.810 --> 00:08:03.220
it or uses one that is not,
even if it is not an intrinsic

00:08:03.240 --> 00:08:06.510
instance of that Multiple Master Font,
it will be rendered correctly.

00:08:13.820 --> 00:08:19.560
We've heard from our users that some
of them miss some of the features

00:08:20.440 --> 00:08:23.980
that they used to get with their
Quick Draw based apps from ATM,

00:08:24.070 --> 00:08:26.650
such as the metrics and
kerning from the font.

00:08:27.330 --> 00:08:31.970
They would like to have those on 10,
and they're going to

00:08:32.000 --> 00:08:33.640
get them under Jaguar.

00:08:33.640 --> 00:08:39.060
We'll be synthesizing data for the font,
kerning and metrics information,

00:08:39.060 --> 00:08:43.780
identical to what used
to be available in ATM.

00:08:43.800 --> 00:08:48.920
You will have to make virtually no
change to your code in order to get this.

00:08:48.920 --> 00:08:51.490
The only change is the API to
actually load the font data,

00:08:51.490 --> 00:08:54.140
which is very minor,
and we'll be talking about that

00:08:54.140 --> 00:08:55.800
when we talk about the APIs.

00:08:55.800 --> 00:09:00.540
Now you won't have to worry
or wish that you had ATM on

00:09:00.540 --> 00:09:03.750
10 because you won't need it.

00:09:03.900 --> 00:09:06.790
It will all be there for you.

00:09:09.920 --> 00:09:14.080
Copy-protected CID fonts are
extremely important to our

00:09:14.080 --> 00:09:19.260
Asian business and design markets,
and we are going to be

00:09:19.260 --> 00:09:23.000
supporting them in JAGUAR,
or we plan to.

00:09:23.110 --> 00:09:27.190
If you happen to have a
copy-protected CID font installed

00:09:27.190 --> 00:09:33.000
in your classic fonts folder,
we will activate it,

00:09:33.000 --> 00:09:34.790
and we will respect all the
copy protection requirements.

00:09:35.060 --> 00:09:38.450
The protocols that are
intrinsic to that font,

00:09:38.800 --> 00:09:43.260
things like resolution restriction,
selective PDF embedding,

00:09:43.440 --> 00:09:48.320
selective outline extraction,
all that sort of thing, will all work.

00:09:48.400 --> 00:09:51.380
We've tested these fairly
extensively with our Japanese desktop

00:09:51.380 --> 00:09:53.780
publishing applications,
and they work great.

00:09:53.780 --> 00:09:57.740
You'll have that, with any luck.

00:09:58.180 --> 00:10:05.770
uh... nested font subdirectories so
no longer do you have to tear apart

00:10:05.770 --> 00:10:10.390
your carefully constructed font folder
hierarchies in order to install a font

00:10:10.460 --> 00:10:15.950
on OS X you'll be able to simply drag
the folder to a standard font folder and

00:10:15.950 --> 00:10:23.110
ATS Server will scan it automatically
as part of the standard process you

00:10:23.110 --> 00:10:27.710
can now drop the entire Adobe FontFolio
CD into a font folder and it will

00:10:27.720 --> 00:10:30.290
be activated automatically for you.

00:10:34.570 --> 00:10:41.500
Font Notification We plan to be
able to give clients the ability

00:10:41.500 --> 00:10:46.170
to register for notification when
we activate and deactivate fonts.

00:10:46.290 --> 00:10:49.270
This will allow you to
update your HI as necessary.

00:10:49.270 --> 00:10:52.120
You'll be able to do things
like update your font menu,

00:10:52.240 --> 00:10:55.270
update the font panel,
which of course you'll be supporting,

00:10:55.270 --> 00:11:00.420
and any other things you need to
do as part of your user interface.

00:11:00.420 --> 00:11:04.580
You will require a
CF RunLoop-based application,

00:11:04.580 --> 00:11:07.180
but of course since Carbon and Cocoa apps
are by default CF RunLoop-based,

00:11:07.180 --> 00:11:11.400
you don't have this problem unless you're
writing a tool or some kind of other

00:11:11.540 --> 00:11:16.780
application that doesn't have a UI,
like a server of some sort.

00:11:16.780 --> 00:11:19.090
Normally applications would
receive these notifications

00:11:19.090 --> 00:11:21.380
when they're in the foreground.

00:11:21.380 --> 00:11:24.540
If you suspend the app
into the background,

00:11:24.540 --> 00:11:26.780
the notification will be delivered
once the app comes into the foreground.

00:11:26.780 --> 00:11:31.940
If you've got a tool or a server that
doesn't have a GUI associated with it,

00:11:32.100 --> 00:11:38.990
you can ask to get the notification
immediately so you won't have to wait,

00:11:38.990 --> 00:11:40.350
obviously.

00:11:44.140 --> 00:11:52.100
Clients will be able to register
for auto-activation notification.

00:11:52.100 --> 00:11:55.060
For instance,
if you've got a document and

00:11:55.110 --> 00:11:57.730
it's got a font in it that's
not installed on the system,

00:11:57.850 --> 00:12:01.800
ATS will, if clients have registered
for auto-activation,

00:12:01.800 --> 00:12:05.570
start scanning its list of
registered clients and ask

00:12:05.710 --> 00:12:07.120
them to activate the font.

00:12:07.140 --> 00:12:09.840
So if you have a third-party
font management software,

00:12:09.840 --> 00:12:12.720
you now have a hook that will
tell you when it's time to go

00:12:12.850 --> 00:12:14.180
and activate a particular font.

00:12:14.200 --> 00:12:15.530
You won't have to activate
them ahead of time.

00:12:15.570 --> 00:12:17.710
You can do it on request from ATS.

00:12:17.740 --> 00:12:22.760
The registered client will then
go ahead and activate the font,

00:12:22.760 --> 00:12:25.390
pass the data back to ATS,
and ATS then supplies it

00:12:25.390 --> 00:12:26.780
to the client as requested.

00:12:27.110 --> 00:12:29.870
The client is none the wiser
and thinks it all came from

00:12:29.870 --> 00:12:31.860
the system just normally.

00:12:31.860 --> 00:12:34.910
So that's...

00:12:39.380 --> 00:12:40.540
Font Panel for Carbon.

00:12:40.580 --> 00:12:44.500
As you heard from Xavier and from
other people during the conference,

00:12:44.500 --> 00:12:48.820
we will be supporting the
Font Panel for Carbon.

00:12:48.820 --> 00:12:50.940
We will have an API that will
allow Carbon applications

00:12:50.940 --> 00:12:53.760
to access the Font Panel,
to be able to send font selection

00:12:53.760 --> 00:12:56.690
information to the Font Panel,
and receive font selection

00:12:56.690 --> 00:12:58.420
information from the Font Panel.

00:12:58.420 --> 00:13:04.670
The font data reception
is Carbon event-based,

00:13:04.670 --> 00:13:07.360
but even if you have
a Wait Next Event app,

00:13:07.360 --> 00:13:09.950
which of course none of you
do because you've all adopted

00:13:09.980 --> 00:13:11.730
the Carbon event model,
but if you did,

00:13:11.960 --> 00:13:14.250
you would be able to do this
because Wait Next Event,

00:13:14.300 --> 00:13:16.310
of course,
handles Carbon events just fine.

00:13:16.310 --> 00:13:17.860
You just have to write a
little Carbon event handler,

00:13:17.860 --> 00:13:19.090
and it's really not too difficult.

00:13:25.300 --> 00:13:28.070
So this diagram here is a schematic
of the interaction between the

00:13:28.130 --> 00:13:33.320
various components that I've
talked about with the ATS software.

00:13:33.720 --> 00:13:37.640
Finder will notify ATS Server when
changes are made to the

00:13:37.750 --> 00:13:40.810
standard font domains,
and ATS Server can then tell

00:13:41.010 --> 00:13:45.600
registered clients that fonts have
been activated or deactivated.

00:13:46.210 --> 00:13:49.610
Likewise,
clients can register for auto-activation

00:13:49.970 --> 00:13:53.510
as part of the auto-activation queue,
and when fonts are requested

00:13:53.510 --> 00:13:57.360
that can't be supplied by
the standard installed fonts,

00:13:57.460 --> 00:14:02.450
ATS will query registered
third-party font manager clients and

00:14:02.450 --> 00:14:05.160
obtain font activation from them.

00:14:05.160 --> 00:14:10.380
The font panel is implemented actually
as part of the common panels framework,

00:14:10.380 --> 00:14:14.030
so you would link against that,
but it will communicate with ATS in

00:14:14.190 --> 00:14:18.270
order to obtain font information,
and it will pass font selection

00:14:18.270 --> 00:14:22.280
information by Carbon event
back to the client applications.

00:14:26.420 --> 00:14:30.660
While we were at it,
we took some steps to improve

00:14:30.660 --> 00:14:33.010
stability of the system as a whole.

00:14:33.220 --> 00:14:37.280
One of the major problems that we
run into occasionally is that while

00:14:37.280 --> 00:14:41.020
interpreting data from font files
that may have gotten corrupted,

00:14:41.050 --> 00:14:45.440
you may walk off into the weeds
and generate address exceptions.

00:14:45.440 --> 00:14:48.530
We've improved the exception handling
for this on ATS Server and in the

00:14:48.680 --> 00:14:53.700
scalers so that we're able to catch
these exceptions more reliably.

00:14:53.700 --> 00:14:57.770
We also have a facility internally
to disable suspect font files if

00:14:57.770 --> 00:14:59.950
we think they might be corrupt.

00:15:00.160 --> 00:15:03.670
We can notify the user when
that's happened so he can then

00:15:03.670 --> 00:15:05.390
remove them if he wants to.

00:15:05.450 --> 00:15:07.650
We've also made the API thread safe.

00:15:07.800 --> 00:15:12.820
We've added some better error
checking throughout the system.

00:15:12.820 --> 00:15:16.150
Even of course, though there weren't many
bugs there to start with,

00:15:16.150 --> 00:15:17.870
we have gone and fixed bugs.

00:15:17.870 --> 00:15:21.540
All this has led to improved
stability of the system.

00:15:24.710 --> 00:15:25.870
Also, we've enhanced performance.

00:15:25.980 --> 00:15:30.900
We've improved font streaming for
such activities as PDF embedding,

00:15:30.900 --> 00:15:32.840
downloading fonts to printers.

00:15:32.910 --> 00:15:36.600
Log in and log out has been sped up
by caching more information to disk.

00:15:37.030 --> 00:15:41.780
It still takes a while to activate those
10,000 fonts that you just installed,

00:15:41.820 --> 00:15:44.220
but after the first time,
it's a lot faster.

00:15:44.250 --> 00:15:47.460
TrueType Font Scaler has been sped up.

00:15:47.720 --> 00:15:51.950
We do a little more caching
throughout the system so that

00:15:51.980 --> 00:15:53.990
we return data to you faster.

00:15:54.000 --> 00:15:56.990
We also allocate memory more efficiently,
so we're not constantly deallocating

00:15:57.000 --> 00:15:58.140
and allocating memory all the time.

00:15:58.160 --> 00:16:03.000
All of this makes ATS faster,
which makes for the faster applications.

00:16:03.100 --> 00:16:07.920
That, of course, makes for happier users,
and that is a good thing.

00:16:10.270 --> 00:16:14.190
What I'd like to do now is
introduce our demonstration.

00:16:14.200 --> 00:16:16.850
We're going to demo some of the
features that I just talked about,

00:16:16.940 --> 00:16:20.430
notably the font panel,
the notification API,

00:16:20.500 --> 00:16:22.960
and the auto-activation system.

00:16:22.970 --> 00:16:26.750
To do those demos for you
will be Nathan Taylor,

00:16:26.750 --> 00:16:29.970
one of our software engineers.

00:16:29.970 --> 00:16:29.970
Thanks.

00:16:34.150 --> 00:16:35.860
Thank you for the introduction, Mike.

00:16:35.890 --> 00:16:38.900
I'm going to be showing you a demo of
some of our planned features for Jaguar.

00:16:38.950 --> 00:16:43.100
I've implemented these into some
of the apps you may recognize,

00:16:43.100 --> 00:16:45.100
actually one in particular.

00:16:45.100 --> 00:16:49.100
So let me switch over and
show you what we've got.

00:16:49.230 --> 00:16:54.640
First off,
I wanted to show you the Nested Font.

00:16:54.700 --> 00:17:06.100
[Transcript missing]

00:17:07.120 --> 00:17:12.500
I'm going to bring up TextEdit with
a document that uses these fonts.

00:17:12.970 --> 00:17:15.820
As you can see,
we now have the fonts that

00:17:16.070 --> 00:17:19.660
were in that folder activated,
and they are present in the

00:17:19.660 --> 00:17:21.530
font panel so you can use them.

00:17:22.720 --> 00:17:24.750
As you can see,
I have a Cocoa application here,

00:17:24.770 --> 00:17:25.340
TextEdit.

00:17:25.350 --> 00:17:27.560
It comes with a font panel by default.

00:17:27.580 --> 00:17:30.300
We'd like you to add font panels
to your Carbon applications,

00:17:30.300 --> 00:17:33.140
and it's a feature we
have planned for Jaguar.

00:17:33.930 --> 00:17:36.880
So let me bring up a version
of Simple Text with a font

00:17:37.420 --> 00:17:40.000
panel and give you something to

00:17:40.680 --> 00:17:43.710
Okay, so I've reduced, as you can see,
the menu bar of simple

00:17:43.770 --> 00:17:45.320
text is greatly reduced.

00:17:45.390 --> 00:17:48.730
There is only now a font menu, no style,
and no size menus.

00:17:48.840 --> 00:17:54.690
If I bring down the font panel,
everything that you expect

00:17:54.700 --> 00:17:56.540
to be there is here.

00:17:56.540 --> 00:17:59.540
I can change a selection of text, and

00:18:01.760 --> 00:18:08.550
To a particular font, face, and size,
and everything is supported.

00:18:09.060 --> 00:18:13.280
Contrast this with an older
version of simple text.

00:18:13.510 --> 00:18:17.490
Where we have a long font menu,
slightly difficult to navigate,

00:18:17.570 --> 00:18:20.900
especially with multiple master
fonts involved and multiple UIs,

00:18:20.900 --> 00:18:25.710
the UI is now more consistent with the
font panel between Cocoa applications

00:18:25.710 --> 00:18:27.380
and Carbon applications.

00:18:32.510 --> 00:18:36.590
What happens now if I remove those
fonts I just put in there and

00:18:36.590 --> 00:18:38.520
want to view that document again?

00:18:38.520 --> 00:18:40.420
I think you're all familiar with this.

00:18:40.420 --> 00:18:42.510
Your users may have complained about it.

00:18:42.510 --> 00:18:42.510
I

00:18:42.910 --> 00:18:45.380
If we try to open a document
without the fonts present,

00:18:45.380 --> 00:18:48.340
it's going to take a little
while as it looks for the fonts,

00:18:48.400 --> 00:18:51.400
ask the ATS server where they are,
and you get nothing.

00:18:51.450 --> 00:18:53.800
I mean,
everything here is rendered in Helvetica.

00:18:53.800 --> 00:18:55.220
Things don't look as they should.

00:18:55.330 --> 00:18:58.220
It's pretty ugly.

00:18:58.450 --> 00:19:07.290
With the new auto-activation feature,
and let me actually set something

00:19:07.290 --> 00:19:07.290
up for another bit of this demo.

00:19:08.360 --> 00:19:09.620
A simple font server.

00:19:09.650 --> 00:19:12.480
This font server knows
about a folder of fonts,

00:19:12.490 --> 00:19:13.540
the ones I want.

00:19:13.690 --> 00:19:16.790
If I start it up,
it's going to scan the directory,

00:19:16.790 --> 00:19:18.540
make a little database.

00:19:18.540 --> 00:19:23.600
Now I can bring up simple text or text
edit and try to open that document again.

00:19:24.050 --> 00:19:26.020
You see the red text scrolling.

00:19:26.020 --> 00:19:31.800
The font server processes the requests
and we get the fonts we expect to see.

00:19:31.800 --> 00:19:33.300
Everything's there.

00:19:33.300 --> 00:19:35.540
But look what simple text
did in the background.

00:19:35.580 --> 00:19:38.300
I've set the simple text up
to receive notifications.

00:19:38.410 --> 00:19:42.480
It got a notification
for each activation.

00:19:42.480 --> 00:19:45.000
As I have it set up,
unfortunately there's a few of them,

00:19:45.020 --> 00:19:50.540
the font menu was updated on
receipt of the notification.

00:19:50.540 --> 00:19:56.790
Now Adobe Garamond Pro is available
and I can select it and change text.

00:19:56.870 --> 00:20:00.210
What's also nice is doing this,
the document refreshed,

00:20:00.340 --> 00:20:04.570
and where I have family, style, and size,
those also got refreshed and pulled

00:20:04.670 --> 00:20:06.470
up the fonts that they needed.

00:20:08.750 --> 00:20:12.600
That concludes the brief demo
of planned Jaguar features.

00:20:12.600 --> 00:20:15.930
We hope you'd like to implement the
Font Panel in your Carbon applications,

00:20:15.980 --> 00:20:19.380
and we hope some of the font utilities
out there will take advantage of the

00:20:19.380 --> 00:20:21.090
auto-activation feature we have planned.

00:20:29.340 --> 00:20:32.060
I get the distinct pleasure of talking
to you about the programming interface.

00:20:32.060 --> 00:20:34.490
I'll be talking to you for
about the next 40 minutes about

00:20:34.660 --> 00:20:36.700
the programming interface,
and I've got to warn you,

00:20:36.730 --> 00:20:39.940
there is going to be some code,
so bear with me, pay attention,

00:20:39.940 --> 00:20:41.770
take notes, it'll help you down the road.

00:20:44.800 --> 00:20:47.800
The first couple things I'm going
to talk about are the API sets.

00:20:47.800 --> 00:20:51.440
There are two basic API sets on Mac OS X,
and I will go over those

00:20:51.440 --> 00:20:53.560
with a little bit of detail.

00:20:53.560 --> 00:20:57.530
Next, common programming tasks that
we've received questions about

00:20:57.530 --> 00:21:01.960
and that you need to do to make
your apps work with fonts better.

00:21:01.960 --> 00:21:07.710
Finally, performance issues and ways to
get around them and diagnose them.

00:21:12.400 --> 00:21:14.840
Let's see if I have the API sets.

00:21:14.840 --> 00:21:16.800
The first API set you may
have been familiar with when

00:21:16.800 --> 00:21:19.360
migrating from Mac OS 9 to
Mac OS X is the Font Manager API.

00:21:19.400 --> 00:21:22.400
This is available on Mac OS 9.

00:21:22.400 --> 00:21:26.300
It's also in CarbonLib,
and it's available on Mac OS X.

00:21:26.350 --> 00:21:32.230
This includes all the APIs that
are prefixed with the FM insignia,

00:21:32.230 --> 00:21:33.400
I guess.

00:21:33.400 --> 00:21:36.650
An example is this
FM Create Font Family Iterator.

00:21:37.580 --> 00:21:40.870
For Mac OS X only,
we have the ATS set of APIs.

00:21:41.010 --> 00:21:45.570
Again, these are all prefixed with ATS,
an example of which is

00:21:45.570 --> 00:21:47.170
ATS Font Iterator Create.

00:21:47.260 --> 00:21:49.910
If you are writing an application
that is designed for Mac OS X and

00:21:50.130 --> 00:21:53.700
you want some new functionality,
you may want to consider

00:21:53.700 --> 00:21:56.690
looking at the ATS APIs.

00:21:59.190 --> 00:22:01.020
When working with fonts
and font families,

00:22:01.020 --> 00:22:04.840
there are several types of references
you're going to need to work with.

00:22:04.970 --> 00:22:12.100
Font references include the ATS Font Ref,
FM Font, and ATSU Font ID.

00:22:12.330 --> 00:22:15.840
Family references include the
ATS Font Family Ref and FM Font Family,

00:22:15.840 --> 00:22:19.320
which you are probably familiar
with if you use Quick Draw.

00:22:19.400 --> 00:22:23.400
One thing to keep in note is that
these references cannot be different.

00:22:23.440 --> 00:22:26.560
An exception to this is that
the FM font and ATSU font ID are

00:22:26.570 --> 00:22:29.080
essentially the same thing.

00:22:29.290 --> 00:22:31.040
It's important,
because they are different,

00:22:31.100 --> 00:22:34.780
that you use provided conversion
APIs to convert from an FM font

00:22:34.780 --> 00:22:39.310
to an ATS font ref if you'd like
to use it within an ATS API.

00:22:45.240 --> 00:22:48.610
Here's a list of some of the
more common programming tasks,

00:22:48.630 --> 00:22:53.710
and some of which we have
received the most questions about.

00:22:54.160 --> 00:22:57.090
The first two most common tasks
that you will need to perform,

00:22:57.090 --> 00:23:00.880
especially if you want to
activate a font for your UI,

00:23:00.930 --> 00:23:03.730
is activation and enumeration.

00:23:03.870 --> 00:23:05.880
You'll need to enumerate the
fonts to build font lists,

00:23:06.100 --> 00:23:08.890
font menus of your own,
or just to get an idea of the

00:23:09.030 --> 00:23:10.990
fonts that are on the system.

00:23:11.480 --> 00:23:14.220
When saving a document
that your user has created,

00:23:14.270 --> 00:23:16.360
you need to worry about
storing font references and

00:23:16.360 --> 00:23:18.690
doing it in a persistent way.

00:23:19.750 --> 00:23:22.750
Next,
when migrating from Quick Draw to the

00:23:22.890 --> 00:23:27.060
new APIs or from Mac OS 9 to Mac OS X,
conversion and compatibility

00:23:27.060 --> 00:23:29.290
functions are important to consider.

00:23:29.610 --> 00:23:31.080
Finally,
we have a list of some of the new

00:23:31.080 --> 00:23:33.000
features we have planned for Jaguar.

00:23:33.070 --> 00:23:35.600
This includes notification,
and I'll go into detail on

00:23:35.600 --> 00:23:38.500
how to implement notification
in your application.

00:23:38.620 --> 00:23:40.490
We have the font panel and font menu.

00:23:40.490 --> 00:23:43.610
The menu is not entirely new,
but we'd like to reinforce

00:23:43.610 --> 00:23:44.500
on how to use it.

00:23:44.620 --> 00:23:51.010
And we have auto activation,
which font utilities can use to

00:23:51.030 --> 00:23:54.200
provide fonts on queries if they are
not available in the current database.

00:23:57.900 --> 00:24:01.570
The first task I'd like
to cover is activation.

00:24:01.640 --> 00:24:03.820
If your application needs
a special font for its UI,

00:24:03.820 --> 00:24:05.990
you're going to want
to activate that font.

00:24:06.090 --> 00:24:08.940
Or if you have a font utility,
you're going to need to activate

00:24:08.940 --> 00:24:10.690
fonts that the user requests.

00:24:11.110 --> 00:24:14.360
To activate fonts,
there are three basic APIs:

00:24:14.420 --> 00:24:17.840
ATS Font Activate from
File Specification,

00:24:18.060 --> 00:24:24.920
ATS Font Activate from Memory and
FM Activate Fonts The File Specification

00:24:24.920 --> 00:24:28.720
API and FM API both take a file
spec to activate a font and are

00:24:28.720 --> 00:24:33.640
our preferred APIs for you to
use when you need to do this.

00:24:33.640 --> 00:24:37.720
The ATS Font Activate from
Memory API is provided as a mechanism

00:24:37.740 --> 00:24:40.560
to activate raw TrueType data.

00:24:40.560 --> 00:24:43.570
We don't recommend that you use
this unless you absolutely need to.

00:24:43.570 --> 00:24:46.700
The ATS Font Activate from
File Specification API handles a

00:24:46.700 --> 00:24:49.940
lot of the stuff in the background
and will activate the complete

00:24:49.940 --> 00:24:53.360
set of fonts that we support
and is easier to use in that way.

00:24:55.100 --> 00:24:57.890
Finally, when you're done with a font
and you don't need it anymore,

00:24:58.140 --> 00:24:59.420
you want to deactivate the fonts.

00:24:59.630 --> 00:25:03.060
I'm not going to go into too much detail
here because it's really quite simple.

00:25:06.400 --> 00:25:09.810
Here's a close-up of the activation
API if you haven't taken a look

00:25:09.810 --> 00:25:11.460
at the header documentation

00:25:14.030 --> 00:25:17.540
Some of the key areas of interest
in this API are the context

00:25:17.540 --> 00:25:20.420
parameter and the option parameter.

00:25:21.610 --> 00:25:24.260
When using the context parameter,
you have two options you can use,

00:25:24.340 --> 00:25:25.320
or actually three.

00:25:25.320 --> 00:25:28.340
There is local, global, and unspecified.

00:25:28.360 --> 00:25:30.970
Unspecified is actually
equivalent to local.

00:25:31.340 --> 00:25:35.840
This defines the accessibility of
the fonts that you are activating and

00:25:36.010 --> 00:25:40.190
restricts the access to these fonts
to a specific set of applications.

00:25:40.370 --> 00:25:43.360
Globally activated fonts will
be available to all applications

00:25:43.920 --> 00:25:46.430
and local to your own client.

00:25:46.790 --> 00:25:52.350
The Options field is necessary to
support Resource Fork or Data Fork.

00:25:52.450 --> 00:25:54.760
You can specify that in this field.

00:25:54.820 --> 00:25:57.720
This is important if you want to
activate a font that you may have

00:25:57.860 --> 00:26:01.700
stored in the Resource Fork of your
application via the old method.

00:26:02.000 --> 00:26:05.830
Specify the file spec
to your application,

00:26:05.830 --> 00:26:09.580
Resource Fork, that will do it for you.

00:26:09.780 --> 00:26:09.800
One of the quick ways,
now that we have the

00:26:10.650 --> 00:26:13.930
The first step in hierarchical folder
activation is you can activate a font or

00:26:13.980 --> 00:26:18.650
all the fonts stored in your application
bundle by just specifying the main bundle

00:26:18.740 --> 00:26:24.060
as the file spec using the options field
to specify the process subdirectories

00:26:24.060 --> 00:26:29.360
and if you want them local,
use a local context.

00:26:29.360 --> 00:26:32.800
That will activate all the
fonts inside of your bundle.

00:26:35.100 --> 00:26:39.000
Here's a quick example
of how to use these APIs.

00:26:39.070 --> 00:26:44.300
Here I'm activating a font in a
local context with default options.

00:26:44.350 --> 00:26:46.940
This is what I would need to
do if I just want this font

00:26:47.050 --> 00:26:47.970
for use within my application.

00:26:47.990 --> 00:26:51.890
When I'm done with it, I deactivate it.

00:26:56.890 --> 00:26:59.550
When you want to build a font list,
you need to get an idea of

00:26:59.620 --> 00:27:01.240
all the fonts on the system.

00:27:01.260 --> 00:27:03.300
To do this, you want to enumerate them.

00:27:03.300 --> 00:27:07.980
We have several APIs to enumerate the
different types of font structures.

00:27:07.980 --> 00:27:11.160
We have font family iterators,
font iterators,

00:27:11.160 --> 00:27:12.840
and family instance iterators.

00:27:12.840 --> 00:27:15.800
An example of a font family
is Helvetica by itself.

00:27:15.800 --> 00:27:19.260
This is the group of faces
that comprise Helvetica.

00:27:19.290 --> 00:27:22.800
To iterate through these fonts,
you can use either the family iterators,

00:27:23.030 --> 00:27:25.270
the ATS or FM family iterators.

00:27:26.020 --> 00:27:28.000
If you would like to
iterate through the fonts,

00:27:28.020 --> 00:27:31.220
such as Helvetica Bold or
Helvetica Oblique,

00:27:31.220 --> 00:27:35.440
you can use the font iterators
provided in both ATS and Font Manager.

00:27:37.620 --> 00:27:39.770
Finally,
for those of you that are familiar

00:27:39.820 --> 00:27:43.170
with walking the font association
table in the font resource,

00:27:43.290 --> 00:27:46.160
we have an
FM Create Font Family Instance Iterator.

00:27:46.160 --> 00:27:48.740
This instance iterator allows
you to walk through the specific

00:27:48.850 --> 00:27:53.070
instances that you would normally
find in the font association table,

00:27:53.200 --> 00:27:56.600
such as Helvetica, Bold, 12Point.

00:27:56.600 --> 00:28:01.300
All you need to do in this case
is use the API and you don't

00:28:01.300 --> 00:28:01.300
actually need to get the font.

00:28:06.260 --> 00:28:10.200
Okay, did I go too far?

00:28:10.250 --> 00:28:12.180
Alright, sorry about that.

00:28:12.220 --> 00:28:17.330
This is a close up of font enumeration.

00:28:17.330 --> 00:28:17.330
We have the

00:28:17.800 --> 00:28:21.740
Font Iterator Creator for ATS,
and the key parameters that I'd like to

00:28:21.840 --> 00:28:27.170
point out to you here are the context,
the filter, and the options.

00:28:27.450 --> 00:28:30.610
Similar to activation,
the context is used to specify

00:28:30.920 --> 00:28:33.170
the accessibility of the
fonts you want to look at.

00:28:33.460 --> 00:28:36.540
It's different in the sense that you
are using it in conjunction with an

00:28:36.540 --> 00:28:42.650
option bit to restrict or unrestrict
the accessibility that you want.

00:28:42.910 --> 00:28:45.750
The option bits have a
synergy with the context,

00:28:45.840 --> 00:28:49.020
and you can restrict or unrestrict it.

00:28:49.080 --> 00:28:52.250
As you briefly saw as I flew by,
there is a chart that I will

00:28:52.250 --> 00:28:56.290
show you next that outlines
how these work together.

00:28:56.900 --> 00:28:58.880
First,
I'd like to just mention the filter here.

00:28:58.940 --> 00:29:00.300
It's an important aspect.

00:29:00.300 --> 00:29:02.990
You can create a custom filter,
and if you need to pass in information,

00:29:02.990 --> 00:29:05.090
you can pass it in through the RefCon.

00:29:05.200 --> 00:29:09.740
The filter is designed to allow
you to filter out or reduce the

00:29:09.990 --> 00:29:13.880
fonts that you get returned from
your iteration to within a set

00:29:13.880 --> 00:29:15.800
of parameters that you define.

00:29:19.730 --> 00:29:27.590
Here is the chart outlining the
interactions between contexts and scopes.

00:29:28.250 --> 00:29:30.750
We've received a few questions
about how these work.

00:29:30.790 --> 00:29:35.670
We've implemented some changes with 10.1
that made it make more sense and allow

00:29:35.780 --> 00:29:38.200
you to access things more consistently.

00:29:38.350 --> 00:29:40.480
Let me walk you through this.

00:29:40.710 --> 00:29:45.500
If you want to use a local context and
a restricted scope in your iteration,

00:29:45.590 --> 00:29:48.490
this will get you all the fonts
that are activated locally to

00:29:48.820 --> 00:29:50.640
your application and none others.

00:29:50.730 --> 00:29:53.630
If you specify a global
context and a restricted scope,

00:29:53.630 --> 00:29:57.520
this will get you all the fonts that
were activated globally in the system,

00:29:57.840 --> 00:30:02.130
including fonts in the font directories,
but not fonts that were activated locally

00:30:02.140 --> 00:30:04.130
by your application or any others.

00:30:05.440 --> 00:30:10.020
Similarly, using an unrestricted scope
with a local context gets you

00:30:10.020 --> 00:30:12.100
the default sets of fonts.

00:30:12.100 --> 00:30:14.300
These are the fonts that we
want your application to see.

00:30:14.300 --> 00:30:18.930
It's the global activations as
well as your own local fonts.

00:30:19.090 --> 00:30:22.530
You can also get to this by using
default parameters as opposed to

00:30:22.530 --> 00:30:25.000
specifying local or unrestricted.

00:30:25.140 --> 00:30:26.990
This is the equivalent.

00:30:27.410 --> 00:30:29.280
Finally, there is the Global Context.

00:30:29.580 --> 00:30:33.670
This is of interest to developers of font
utilities that want to know all the fonts

00:30:33.670 --> 00:30:38.400
that are in the system and be able to go
through them and discern which they are.

00:30:38.400 --> 00:30:42.880
Specifying Global Context and
Unrestricted Scope gets you this.

00:30:47.120 --> 00:30:49.240
Here's a quick example of enumeration.

00:30:49.240 --> 00:30:51.480
I actually skipped to this
a little too quickly before,

00:30:51.670 --> 00:30:54.630
but as you see,
it's pretty easy to set up an iterator.

00:30:54.770 --> 00:30:59.280
Here I'm creating one with a local
context and an unrestricted scope.

00:30:59.360 --> 00:31:02.980
I'm going to pass this iterator that
I get back into ATS Font Iterator

00:31:03.120 --> 00:31:07.340
next and continue iterating
until I get a status code back.

00:31:07.340 --> 00:31:08.760
Here's where things get
a little interesting.

00:31:08.780 --> 00:31:11.600
The status code tells you
something about your iteration.

00:31:11.730 --> 00:31:13.500
Let me show you those.

00:31:14.820 --> 00:31:16.830
First status code,
and the one you want to see most often,

00:31:16.930 --> 00:31:19.320
is that the iteration has completed.

00:31:19.450 --> 00:31:21.660
When you get this code,
it means everything went

00:31:21.660 --> 00:31:23.500
through successfully,
you're done,

00:31:23.500 --> 00:31:26.380
you don't need to worry about anything,
go home and have a nice day.

00:31:27.660 --> 00:31:31.390
If you get the Iteration Scope
Modified error or status code,

00:31:31.390 --> 00:31:33.960
it's there to tell you
that something has changed.

00:31:33.960 --> 00:31:36.720
Someone behind your back
went in and activated a font,

00:31:36.720 --> 00:31:40.320
deactivated a font to
cause a database change.

00:31:40.320 --> 00:31:43.600
This iterator is there to tell you
that your iteration was not complete.

00:31:43.600 --> 00:31:48.390
You should reset the iterator
using the Reset API and try again.

00:31:53.120 --> 00:31:54.660
Well, here's something interesting.

00:31:54.680 --> 00:31:57.040
This is one of those features
we have planned for Jaguar,

00:31:57.100 --> 00:31:59.050
notification support.

00:31:59.380 --> 00:32:02.340
In order to provide
notification support to you,

00:32:02.340 --> 00:32:04.740
you first need to create a callback.

00:32:04.740 --> 00:32:07.900
This callback is meant to
handle the notification and

00:32:08.010 --> 00:32:09.800
do something when you get it.

00:32:09.810 --> 00:32:12.490
The most common thing
is to update your UI,

00:32:12.490 --> 00:32:14.970
such as updating the font menu.

00:32:15.670 --> 00:32:19.340
To subscribe to notifications,
you need to call the API and

00:32:19.340 --> 00:32:21.290
register the callback.

00:32:22.100 --> 00:32:25.540
When something happens to the database,
a font has been activated or dropped

00:32:25.540 --> 00:32:28.030
into one of the font folders,
your application,

00:32:28.120 --> 00:32:31.080
if it's in the foreground,
will receive a notification.

00:32:31.670 --> 00:32:35.970
There is also an API of interest
here to installer developers.

00:32:36.030 --> 00:32:39.130
Installers often had a problem
of installing fonts into a font

00:32:39.130 --> 00:32:42.820
folder manually or programmatically,
and other applications

00:32:43.020 --> 00:32:44.600
not seeing these fonts.

00:32:44.600 --> 00:32:48.990
Well now, installers can notify
ATS Server that they've done this.

00:32:49.050 --> 00:32:53.620
And ATS Server can then rescan
the directories and then

00:32:53.750 --> 00:32:55.720
provide notifications to all
the clients that are available.

00:32:56.500 --> 00:32:59.840
Lastly, if you're tired of
receiving notifications,

00:32:59.910 --> 00:33:01.570
your app is finished,
or you just don't want

00:33:01.580 --> 00:33:04.070
to get them anymore,
unsubscribe and your application

00:33:04.270 --> 00:33:05.900
will stop getting notifications.

00:33:09.700 --> 00:33:13.250
Here's a brief example of a
simple notification callback.

00:33:13.380 --> 00:33:15.740
Notice that the callback
has two parameters,

00:33:15.810 --> 00:33:19.070
an info ref and a refcon.

00:33:19.250 --> 00:33:23.480
The InfoRef currently is unused but
is available for future expansion.

00:33:23.480 --> 00:33:28.040
We intend to be able to provide
notifications down the road for

00:33:28.050 --> 00:33:33.860
other tasks happening behind your
back besides just activation.

00:33:34.030 --> 00:33:39.130
But what we currently have planned for
Jaguar is notifications for activation.

00:33:39.370 --> 00:33:41.300
Here's an example of what to do.

00:33:41.340 --> 00:33:44.570
I'm updating my standard font menu
so that when the next time the user

00:33:44.660 --> 00:33:47.340
looks at the fonts he has available,
he'll get what he needs.

00:33:51.890 --> 00:33:57.690
The ATS Font Notification API is, well,
the subscribe API I have here is what

00:33:57.740 --> 00:34:00.560
you will use to register your callback.

00:34:00.670 --> 00:34:02.110
You pass in your callback.

00:34:02.290 --> 00:34:04.440
Here I'm using default options.

00:34:04.490 --> 00:34:06.400
I don't need to pass
any information through,

00:34:06.400 --> 00:34:08.430
and I'm going to get a
notification ref back.

00:34:08.940 --> 00:34:12.080
This option flag that I have
here could be substituted by an

00:34:12.080 --> 00:34:15.560
immediate notification option
flag that Mike described earlier,

00:34:15.560 --> 00:34:19.780
whereby a faceless font server can
receive notifications immediately,

00:34:19.780 --> 00:34:22.250
instead of having to wait
until their application is

00:34:22.300 --> 00:34:25.660
brought into the foreground,
which might not ever happen.

00:34:26.270 --> 00:34:31.440
Finally, when you're done,
unsubscribing is a piece of cake.

00:34:31.440 --> 00:34:33.640
They pass in the notification
ref you got back,

00:34:33.700 --> 00:34:36.070
and you'll no longer be
told when things happen.

00:34:41.960 --> 00:34:44.980
One of the complex problems that
developers need to solve is how

00:34:44.980 --> 00:34:49.740
do I store fonts in my document so
that when a user opens the document,

00:34:49.790 --> 00:34:53.740
they get the correct font displayed
and everything looks appropriate.

00:34:53.740 --> 00:34:56.690
We have a few recommendations
for you and a few things we

00:34:56.700 --> 00:34:58.360
recommend that you not do.

00:34:58.440 --> 00:35:00.200
First, the good stuff.

00:35:00.810 --> 00:35:03.800
We recommend storing the font
family name and style bits.

00:35:04.120 --> 00:35:06.330
This is much like what
Apple Works currently does,

00:35:06.330 --> 00:35:08.490
and it's been working for them,
and it's something we've

00:35:08.550 --> 00:35:09.900
recommended that you do in the past.

00:35:11.730 --> 00:35:16.560
AppKit applications store
the PostScript name.

00:35:16.620 --> 00:35:19.600
This is also another fairly
unique way to determine fonts,

00:35:19.710 --> 00:35:21.190
and it's another method
that we would recommend.

00:35:22.980 --> 00:35:25.730
You also have options
of using a full name,

00:35:25.730 --> 00:35:28.350
or a full name in combination
with a manufacturer name,

00:35:28.360 --> 00:35:30.910
or some other combination of
names available within the font.

00:35:33.400 --> 00:35:36.180
You might need to develop your
own heuristics because all

00:35:36.190 --> 00:35:39.340
fonts don't have the same data,
and not all data is as

00:35:39.340 --> 00:35:41.100
reliable as the next.

00:35:42.050 --> 00:35:44.500
A couple of bad things to
do that Mike hit on earlier.

00:35:44.530 --> 00:35:45.360
Don't store IDs.

00:35:45.420 --> 00:35:46.000
It's simple.

00:35:46.240 --> 00:35:48.120
They are not guaranteed across reboots.

00:35:48.170 --> 00:35:51.570
We do font family synthesis behind
the scene so that a font family

00:35:51.570 --> 00:35:54.990
ID may not be consistent once
another font has been activated

00:35:55.280 --> 00:35:57.500
or the system has been restarted.

00:35:57.540 --> 00:35:59.590
The same holds for font IDs.

00:36:03.620 --> 00:36:07.110
When bringing your application
up to Mac OS X for Mac OS 9,

00:36:07.110 --> 00:36:10.670
you're going to need to
worry about conversion.

00:36:10.760 --> 00:36:13.060
For Quick Draw developers,
you're used to working with font

00:36:13.060 --> 00:36:16.560
families and style bits and whatnot.

00:36:16.560 --> 00:36:19.920
Well, with some of the APIs that you
will want to use on Mac OS X,

00:36:19.920 --> 00:36:22.700
you'll need to get a font from this.

00:36:22.700 --> 00:36:24.500
We have a couple APIs to do that.

00:36:24.520 --> 00:36:26.750
You can get a font from a
font family instance with the

00:36:26.750 --> 00:36:31.490
FM_Git_Font_Family instance from font,
actually the other one,

00:36:31.690 --> 00:36:36.020
and given its family and the style,
you'll get a font back.

00:36:36.020 --> 00:36:38.270
To go the other way,
from a font to a family instance,

00:36:38.270 --> 00:36:40.660
you can use the API I just
mentioned earlier,

00:36:40.760 --> 00:36:45.070
and it will give you the family
and the style from the font.

00:36:45.420 --> 00:36:47.940
One thing to keep in note here
is that this conversion is

00:36:47.940 --> 00:36:49.620
not necessarily one-to-one.

00:36:49.630 --> 00:36:54.480
A font may represent a different
style within different families.

00:36:54.480 --> 00:36:57.830
For example,
a Helvetica Bold/Oblique font

00:36:57.830 --> 00:37:02.670
could be the oblique style
in a Helvetica Bold family,

00:37:02.880 --> 00:37:07.220
as well as the Bold/Oblique style
within the Helvetica family.

00:37:07.240 --> 00:37:11.090
This is often the case with
family synthesis for OTF fonts.

00:37:17.900 --> 00:37:22.340
Another major task to worry
about is compatibility.

00:37:22.380 --> 00:37:25.580
How do I take the things I've
been working with with Quickdraw,

00:37:25.600 --> 00:37:28.210
with Mac OS 9, with CarbonLib,
and bring them over so that they

00:37:28.310 --> 00:37:30.720
work seamlessly with Mac OS X?

00:37:30.720 --> 00:37:35.220
For example, I'm used to getting the font
resource and pulling out of the

00:37:35.320 --> 00:37:37.100
font resource kerning information.

00:37:37.100 --> 00:37:39.770
Well, as Mike mentioned,
we now synthesize font

00:37:39.870 --> 00:37:42.790
resources for OpenType fonts.

00:37:43.270 --> 00:37:48.900
This is the API, or two APIs, HTS Font,
Git Font Family Resource,

00:37:48.900 --> 00:37:53.160
and FM Git Font Family Resource.

00:37:53.160 --> 00:37:55.420
These APIs will provide
to you the font resource,

00:37:55.490 --> 00:37:59.710
if available, or synthesized,
which you can then use with your

00:37:59.820 --> 00:38:05.230
normal methods that you have before
from Quickdraw to apply kerning

00:38:05.660 --> 00:38:07.900
to pairs or to get the metrics.

00:38:09.800 --> 00:38:12.800
Another API if you need to
know about font files to worry

00:38:12.800 --> 00:38:17.130
about are the ATS FontKit file
specification and FM Git container

00:38:17.130 --> 00:38:19.200
from Font Family Instance.

00:38:19.230 --> 00:38:21.720
If you are used to actually delving
into the font data yourself and

00:38:21.840 --> 00:38:24.830
there's information in there that
we don't provide an accessor to,

00:38:24.940 --> 00:38:28.370
you're going to want to use these
APIs to get the font file spec

00:38:28.370 --> 00:38:30.980
and look at the font yourself.

00:38:31.460 --> 00:38:34.140
One thing to keep in note
that the different APIs have

00:38:34.340 --> 00:38:36.800
slightly different behavior.

00:38:36.800 --> 00:38:40.850
ATS font get file specification will
provide you the file spec to the

00:38:40.850 --> 00:38:42.880
file containing the outline data.

00:38:43.460 --> 00:38:47.660
What that means in the case of
PostScript fonts with auxiliary

00:38:47.660 --> 00:38:51.750
LWFN files is that you will get
the file spec for the LWFN file,

00:38:52.050 --> 00:38:56.080
not the file spec for the
suitcase containing the bitmaps.

00:38:56.080 --> 00:38:59.430
FM container from Font Family Instance,
on the other hand,

00:38:59.510 --> 00:39:04.220
is designed to return you the
container that holds the font resource.

00:39:04.290 --> 00:39:06.620
Now, if a font doesn't have
a native font resource,

00:39:06.750 --> 00:39:08.560
you will get back an error.

00:39:08.770 --> 00:39:11.590
But the goal of this is to
provide you access to the

00:39:12.080 --> 00:39:14.590
font with the font resource.

00:39:16.240 --> 00:39:20.760
Finally, the last two APIs are of
interest to those of you coming

00:39:20.760 --> 00:39:25.540
up from Quick Draw into some of
the new API sets on Mac OS X,

00:39:25.540 --> 00:39:30.020
such as Atsui or Cocoa, etc.

00:39:30.360 --> 00:39:32.200
If you have been storing in
your documents and you want to

00:39:32.200 --> 00:39:35.540
provide backwards compatibility,
for example, to old documents that have

00:39:35.720 --> 00:39:40.300
Quick Draw names or font family names
in them and use the ATS API set,

00:39:40.360 --> 00:39:44.530
we have a mechanism to get the
Quick Draw name for storage

00:39:44.530 --> 00:39:48.790
and also to find a font family
from the Quick Draw name.

00:39:55.560 --> 00:39:57.610
This is the big feature that we
have planned for Jaguar and the

00:39:57.790 --> 00:39:59.780
one that we're most excited about.

00:39:59.790 --> 00:40:02.180
We would really like you to
implement the font panel inside

00:40:02.300 --> 00:40:03.540
of your Carbon applications.

00:40:03.610 --> 00:40:06.440
As I showed you in the demo,
it can simplify your menu bar,

00:40:06.440 --> 00:40:10.450
it can simplify your user interface,
and it provides a consistent user

00:40:10.450 --> 00:40:15.970
interface for font selection between
Cocoa frameworks and Carbon frameworks.

00:40:16.230 --> 00:40:18.110
There are several things you need
to worry about doing when you

00:40:18.110 --> 00:40:20.240
want to implement the font panel.

00:40:20.310 --> 00:40:25.100
The first one is to toggle the font panel
state to show it when the user wants it

00:40:25.360 --> 00:40:27.590
and hide it when they're done with it.

00:40:27.820 --> 00:40:31.540
You may also have a need to
query the font panel state,

00:40:31.550 --> 00:40:36.230
but this API is not used quite as often
as showing it or updating the display,

00:40:36.340 --> 00:40:40.110
which is the next,
probably most important thing you need to

00:40:40.190 --> 00:40:42.740
worry about to provide a consistent UI.

00:40:42.740 --> 00:40:47.290
When a user changes their selection
in their document or moves the cursor

00:40:47.290 --> 00:40:51.910
around into a different style run,
you want to update the display

00:40:52.010 --> 00:40:55.940
of the font panel and let it
know which styles to provide.

00:40:55.940 --> 00:40:57.000
There's an API to do that.

00:40:57.000 --> 00:40:59.480
I will go into that in
a little bit of detail.

00:40:59.480 --> 00:41:03.040
The other important thing about this
particular API is that it tells the

00:41:03.150 --> 00:41:08.910
font panel which window target to send
the Carbon events for the selection to.

00:41:10.070 --> 00:41:13.100
So that leads me into the next topic,
is how do you get the selection?

00:41:13.160 --> 00:41:18.580
Well, we've defined a Carbon event suite
that you can implement a handler for

00:41:18.680 --> 00:41:22.310
that will tell you when a font has
been selected from the font panel,

00:41:22.430 --> 00:41:24.430
and you can pull out
the information from it.

00:41:26.800 --> 00:41:29.260
Let me just quickly show you,
in the worst case,

00:41:29.360 --> 00:41:33.220
the most work you would have to
do to implement the font panel.

00:41:34.400 --> 00:41:37.640
To implement the planned font panel
with the WaitNext event application,

00:41:37.700 --> 00:41:40.690
you would need to build
a Carbon event handler.

00:41:40.900 --> 00:41:46.000
To handle the command classes for
the application and then be able

00:41:46.000 --> 00:41:50.560
to handle the command parameter
to show and hide the font panel.

00:41:50.560 --> 00:41:55.000
When you get this, you call the API FP,
show hide font panel.

00:41:55.000 --> 00:41:55.800
There is no parameter list.

00:41:55.800 --> 00:41:57.160
It's really simple.

00:41:57.250 --> 00:42:00.440
Just call it and you'll
get the font panel.

00:42:03.500 --> 00:42:06.460
When the font panel and the
user have made a selection,

00:42:06.540 --> 00:42:09.350
your application and your window
will receive a Carbon event.

00:42:10.950 --> 00:42:16.030
This event will be of type of class font,
and there are two types you may get.

00:42:16.160 --> 00:42:20.220
One, that the font panel has closed,
or more importantly,

00:42:20.280 --> 00:42:23.650
that you've gotten an
event for a font selection.

00:42:23.660 --> 00:42:27.880
Once you get this font selection,
then you're going to need to want to

00:42:28.290 --> 00:42:30.880
pull out of the event some parameters.

00:42:30.930 --> 00:42:34.430
If you have an ATSUI-based application,
you'll be interested in pulling out

00:42:34.430 --> 00:42:38.340
the ATSU font ID and ATSU font size.

00:42:38.400 --> 00:42:41.100
If you're still working with
a Quickdraw-based application,

00:42:41.100 --> 00:42:45.310
or you just want to get the font family,
you can pull out the FM font family,

00:42:45.440 --> 00:42:47.740
font style, and size.

00:42:48.090 --> 00:42:51.530
Finally, because the font panel provides
support for coloring fonts,

00:42:51.560 --> 00:42:55.060
there is a parameter to pull
out the color information,

00:42:55.130 --> 00:42:58.020
which you can then apply
to your text if you desire.

00:43:02.600 --> 00:43:06.220
So first off, here's an example,
when I receive a Carbon event,

00:43:06.330 --> 00:43:09.100
of how I would pull out the font family.

00:43:09.140 --> 00:43:11.740
You can see it's really quite simple.

00:43:11.760 --> 00:43:14.210
I determine the event kind,

00:43:14.520 --> 00:43:18.450
I then get the parameter out
of the event once I determine

00:43:18.450 --> 00:43:21.000
that it's actually a selection.

00:43:21.040 --> 00:43:25.490
I ask for the font family, I get it back,
and then the last thing I need to do

00:43:25.720 --> 00:43:28.380
is apply it to the user selection.

00:43:33.010 --> 00:43:35.800
Say a user is mousing
around through the document,

00:43:35.800 --> 00:43:37.940
selecting different style runs.

00:43:37.940 --> 00:43:44.670
You want the font panel to represent
the current selected style run.

00:43:45.110 --> 00:43:49.490
To do this,
you need to tell it that it has changed,

00:43:49.570 --> 00:43:51.560
and then the font panel will
automatically update its UI.

00:43:51.560 --> 00:43:55.060
So the first thing to do is to build,
in this case,

00:43:55.180 --> 00:43:59.630
I'm using a QuickDraw info structure
that includes the instance,

00:43:59.630 --> 00:44:02.530
the font family and style,
as well as the size,

00:44:02.530 --> 00:44:06.660
and then I send that to the font panel
with the window target reference.

00:44:06.760 --> 00:44:09.800
As I mentioned a couple slides ago,
this window target

00:44:09.890 --> 00:44:11.240
reference is important.

00:44:12.080 --> 00:44:15.420
This tells the font panel which
window that it should send

00:44:15.420 --> 00:44:17.330
its next selection event to.

00:44:17.340 --> 00:44:21.050
If you pass null through here,
your selection events are going

00:44:21.050 --> 00:44:24.200
to go into the great beyond,
into the void, and you'll never get them.

00:44:25.910 --> 00:44:28.900
If you don't pass the
correct window target here,

00:44:28.910 --> 00:44:32.250
then you're going to get some interesting
behavior as other windows that the

00:44:32.300 --> 00:44:34.980
user didn't mean to update get updated.

00:44:38.620 --> 00:44:43.090
The old way of handling font selection
in Carbon applications was the font menu.

00:44:43.370 --> 00:44:44.830
This is pretty convenient.

00:44:44.840 --> 00:44:46.470
It's a simple list of fonts.

00:44:46.470 --> 00:44:48.960
It works fairly well,
but with the number of fonts

00:44:49.080 --> 00:44:51.400
we support in Mac OS X,
it can get extremely long

00:44:51.400 --> 00:44:52.960
and extremely cumbersome.

00:44:53.160 --> 00:44:55.640
But if you continue
and you want to use it,

00:44:55.650 --> 00:44:58.560
we have some APIs that
we recommend that you

00:44:58.850 --> 00:45:03.100
Create the menu, update the menu,
and determine a selection.

00:45:03.100 --> 00:45:06.130
It's important to keep in mind
that although we are recommending

00:45:06.130 --> 00:45:08.820
that you use the font panel
that we planned for Jaguar,

00:45:08.820 --> 00:45:11.480
you may still find a good
use for this font menu.

00:45:14.440 --> 00:45:17.780
The first thing you need to do in making
the font menu is create the standard font

00:45:17.820 --> 00:45:20.820
menu for the appropriate menu handle.

00:45:20.870 --> 00:45:24.890
Here I'm giving you an example of
how to create the hierarchical menu.

00:45:25.270 --> 00:45:30.090
This will provide a menu containing
families and hierarchical menus of the

00:45:30.590 --> 00:45:32.060
various instances available for them.

00:45:37.540 --> 00:45:39.780
When my app receives
a notification event,

00:45:39.920 --> 00:45:42.160
or a notification when
my callback is hit,

00:45:42.220 --> 00:45:43.880
I want to update the font menu.

00:45:43.880 --> 00:45:47.400
ATS is telling me that something
has changed in the database,

00:45:47.450 --> 00:45:49.580
and I want the user to know this.

00:45:49.630 --> 00:45:51.680
If you're not subscribing
for notifications,

00:45:51.680 --> 00:45:54.440
we also recommend that you call update
standard font menu either when your

00:45:54.440 --> 00:46:01.330
application is brought to the foreground
or when the user clicks on the font menu.

00:46:03.180 --> 00:46:05.250
But here I'm showing you how
to update the standard font

00:46:05.250 --> 00:46:07.860
menu for a hierarchical menu.

00:46:07.900 --> 00:46:10.840
And then to get the selection,
when the user has selected a font,

00:46:10.860 --> 00:46:13.640
you can pull out the family
and the style information with

00:46:13.740 --> 00:46:15.450
Get Font Family from Menu Selection.

00:46:22.880 --> 00:46:26.450
Here's the big feature that we
have received a lot of requests

00:46:26.620 --> 00:46:29.920
for from utility developers
that we plan to get into Jaguar,

00:46:30.220 --> 00:46:33.380
which I noticed during the demo,
got a few oohs and aahs as the red

00:46:33.380 --> 00:46:38.980
text scrolled by and the document
appeared with the fonts that it needed.

00:46:38.980 --> 00:46:41.260
Auto activation.

00:46:41.260 --> 00:46:47.120
There's a hook in ATS to support auto
activation that you will receive queries

00:46:47.220 --> 00:46:51.200
to your server and utility when a
client application requests a font that

00:46:51.200 --> 00:46:54.150
does not exist in the the database.

00:46:55.200 --> 00:47:02.170
The type of message ID you will get is
the KATS Query Activate Font Message.

00:47:02.170 --> 00:47:02.170
This is

00:47:02.370 --> 00:47:05.620
The message I did to let you know
that somebody wants a font and

00:47:05.620 --> 00:47:07.670
they want you to activate them.

00:47:08.290 --> 00:47:11.580
To register for queries,
you'll want to register a

00:47:11.580 --> 00:47:16.130
callback with ATS Create font
query and run loop source.

00:47:16.360 --> 00:47:19.370
And then the source you get
back from this should be

00:47:19.480 --> 00:47:21.360
applied to the CF run loop.

00:47:21.410 --> 00:47:24.000
Again, all Carbon applications with
a UI have a CF run loop,

00:47:24.010 --> 00:47:26.760
so there's nothing extra
you really need to do.

00:47:26.760 --> 00:47:29.080
But if you were doing a faceless server,
like the one I had,

00:47:29.150 --> 00:47:32.740
you need to make sure that your
application does have a CF run loop.

00:47:37.060 --> 00:47:39.920
Here's an outline of the
communications that occur when a

00:47:39.960 --> 00:47:42.880
font query request comes through.

00:47:43.250 --> 00:47:47.540
The application here has requested
a font by its postscript name,

00:47:47.540 --> 00:47:51.880
family name, any sort of name that we
can allow a font query on.

00:47:51.880 --> 00:47:54.900
The query goes through to
the ATS client library,

00:47:54.900 --> 00:48:00.630
which knows about the port that
the font utility has subscribed.

00:48:00.980 --> 00:48:03.050
This port was sent to the ATS server,
which passed it on to the

00:48:03.060 --> 00:48:05.180
clients as they were launched.

00:48:05.190 --> 00:48:09.860
So the communication in this case
goes directly from the client to the

00:48:09.860 --> 00:48:12.880
font utility to query for a font.

00:48:12.880 --> 00:48:16.630
The font utility then does its work,
parses its database,

00:48:17.120 --> 00:48:19.910
translates the query into
a file specification,

00:48:20.130 --> 00:48:22.700
and uses the ATS client
to activate the font,

00:48:23.290 --> 00:48:25.710
which triggers a message
to the ATS server and tells

00:48:25.710 --> 00:48:28.390
it to activate the font,
which then goes out to

00:48:28.390 --> 00:48:31.890
all clients on the system.

00:48:31.930 --> 00:48:35.970
And, as I showed you in the demo,
this will also trigger notifications.

00:48:40.990 --> 00:48:44.900
Creating a callback for auto
activation support is a little bit

00:48:44.900 --> 00:48:48.270
more difficult than a callback for
notification because there's more

00:48:48.270 --> 00:48:51.650
work that you need to do inside of it,
but it's not that hard.

00:48:51.890 --> 00:48:57.490
The callback takes in a message ID,
the data reference, and a RefCon.

00:48:57.840 --> 00:49:00.940
The message ID that you care about
at this point in time would be the

00:49:01.050 --> 00:49:05.760
KATS Font Request Query Message ID,
at which point when you receive it,

00:49:05.770 --> 00:49:10.290
you take the data that is received,
you parse the data, which I will show you

00:49:10.290 --> 00:49:13.330
an example of later,
and then you translate that into

00:49:13.330 --> 00:49:15.590
the font file that you need to open.

00:49:17.980 --> 00:49:21.660
So registering the callback is as
simple as calling one API with it.

00:49:21.660 --> 00:49:23.680
As I mentioned,
it's the ATS Create Font Query

00:49:23.680 --> 00:49:25.260
and Run Loop Source API.

00:49:25.360 --> 00:49:27.220
You pass in your callback.

00:49:27.220 --> 00:49:31.000
The first two parameters there
are to indicate a--one of them

00:49:31.150 --> 00:49:35.270
is there to indicate a precedence
for your callback query.

00:49:35.700 --> 00:49:39.320
Zero is default,
but you can put your query handler

00:49:39.320 --> 00:49:43.750
at a higher precedence order so
that it will get handled first.

00:49:44.230 --> 00:49:47.340
Now we can see precedence wars occurring,
and hopefully they won't,

00:49:47.390 --> 00:49:51.050
but we recommend that for the most
part you use zero as it will work fine.

00:49:52.670 --> 00:49:55.830
Finally, once you get the source back
from registering your callback,

00:49:55.830 --> 00:49:59.000
you need to add this source
to your current run loop

00:49:59.000 --> 00:50:01.300
through CFRunLoop Add Source.

00:50:07.730 --> 00:50:11.340
When your callback is
called to handle the query,

00:50:11.730 --> 00:50:16.810
first thing you're going to do is
you're going to get back a CFDictionary.

00:50:16.810 --> 00:50:16.810
That's the data.

00:50:17.370 --> 00:50:19.990
Then you can query the dictionary
to verify that it contains a key,

00:50:20.000 --> 00:50:22.290
and you'll want to walk through
all the keys that you care about.

00:50:24.150 --> 00:50:27.380
In this case, I'm looking for a
Quick Draw Family Name key.

00:50:27.430 --> 00:50:30.370
Then get the value for
the appropriate key.

00:50:30.880 --> 00:50:33.440
And then, as I said before,
translate that into a file

00:50:33.440 --> 00:50:36.240
specification and activate it.

00:50:36.240 --> 00:50:40.100
One thing to keep in mind,
when implementing query

00:50:40.100 --> 00:50:44.050
handling and auto-activation,
it's important that you need to

00:50:44.050 --> 00:50:47.260
activate in the global context,
because if you activate

00:50:47.260 --> 00:50:49.290
it default or locally,
the app that needed it

00:50:49.290 --> 00:50:50.050
isn't going to see it.

00:50:55.270 --> 00:50:58.290
The last thing that I really wanted to
talk about was some of the performance

00:50:58.290 --> 00:51:01.650
issues that you may encounter
when bringing your applications

00:51:01.650 --> 00:51:03.510
to Mac OS X or writing new ones.

00:51:03.680 --> 00:51:06.840
And here are some solutions we
have to help you solve these.

00:51:06.940 --> 00:51:09.380
One is the User Notification API.

00:51:09.380 --> 00:51:13.760
This prevents you from having to query
the generation seed of the database

00:51:13.760 --> 00:51:19.960
regularly to pick up generation
changes and update your user interface.

00:51:20.010 --> 00:51:24.380
Now granted, the generation seed and
acquiring that is not expensive,

00:51:24.380 --> 00:51:28.300
but it saves you from having to pull,
which is a good thing.

00:51:28.940 --> 00:51:31.430
Use the performance tools
available on Mac OS X,

00:51:31.500 --> 00:51:34.660
such as Top, to gauge server messaging.

00:51:34.660 --> 00:51:38.460
The APIs you use could send
a message to the ATS server.

00:51:38.460 --> 00:51:41.180
There is a cost associated
with sending these messages.

00:51:41.180 --> 00:51:43.290
And you want to watch
for ATS server activity,

00:51:43.300 --> 00:51:48.320
especially very heavy activity when
your application might be unresponsive,

00:51:48.320 --> 00:51:51.160
and evaluate your usage of the APIs.

00:51:51.160 --> 00:51:55.650
We do our best to provide caching,
but sometimes...

00:51:55.870 --> 00:51:59.370
APIs are used how we don't expect
them to and can cause undue messaging

00:51:59.390 --> 00:52:00.600
and performance degradation.

00:52:02.900 --> 00:52:06.640
Another way to avoid performance
problems is to avoid using the primitives

00:52:07.180 --> 00:52:09.600
while iterating through all the fonts.

00:52:09.640 --> 00:52:13.650
This is such as getting the font
tables for any specific table,

00:52:13.690 --> 00:52:15.570
like the name table,
to handle it yourself and walk through

00:52:15.570 --> 00:52:17.800
it and determine the names of the font.

00:52:17.800 --> 00:52:23.790
Use an API like ATS font get postscript
name instead of the primitive if all

00:52:23.880 --> 00:52:26.060
you really want is the postscript name.

00:52:26.130 --> 00:52:32.430
This avoids bringing and mapping all the
font files in and thrashing our caches.

00:52:33.810 --> 00:52:35.800
That leads me into the last topic.

00:52:35.800 --> 00:52:38.560
Try to use the high-level
APIs whenever possible.

00:52:38.560 --> 00:52:41.970
We've analyzed their usage,
we provide caching,

00:52:42.280 --> 00:52:45.560
and they are optimized for optimal usage.

00:52:45.600 --> 00:52:48.510
And if you find a problem with it,
please notify us or

00:52:48.510 --> 00:52:52.460
Developer Relations and we
will address them as necessary.

00:52:55.750 --> 00:52:59.150
So, in summary,
I'd like to reiterate some

00:52:59.290 --> 00:53:01.760
of the topics I talked about.

00:53:01.810 --> 00:53:04.070
I showed you how using
context and scopes,

00:53:04.240 --> 00:53:07.490
you can use the iteration
APIs to iterate only the fonts

00:53:07.610 --> 00:53:09.140
that you really care about.

00:53:09.140 --> 00:53:10.280
This is important.

00:53:10.280 --> 00:53:13.650
You don't have to -- you can
reduce the fonts you get back,

00:53:13.670 --> 00:53:19.210
improve your application's response,
and restrict your search very easily.

00:53:20.090 --> 00:53:22.660
Next, we can't stress hard enough
how much we would like you to

00:53:22.660 --> 00:53:27.000
implement the font panel in your
Carbon application once it's available.

00:53:27.000 --> 00:53:28.960
This,
as I've mentioned a couple times before,

00:53:29.080 --> 00:53:31.130
will provide a consistent
UI between the two stacks,

00:53:31.340 --> 00:53:35.000
between AppKit and Carbon.

00:53:35.000 --> 00:53:38.880
It'll make the feature parity
seem like it's present.

00:53:38.880 --> 00:53:41.540
We all know that Carbon does a lot
for us and we can do everything

00:53:41.540 --> 00:53:42.950
that Cocoa does with Carbon.

00:53:43.390 --> 00:53:47.710
But now we've got the font panel
and we can be very sure of that.

00:53:47.990 --> 00:53:51.420
Continue developing to the programming
interface of the Font Manager,

00:53:51.450 --> 00:53:54.040
especially if you are concerned
with compatibility between

00:53:54.170 --> 00:53:57.900
CarbonLib on Mac OS 9 and Mac OS X.

00:53:57.900 --> 00:54:02.900
But if you are looking to take the jump
and make Mac OS X-only applications,

00:54:02.980 --> 00:54:05.920
make sure to review the ATS framework,
as here is where this

00:54:06.130 --> 00:54:07.900
is our future direction.

00:54:08.150 --> 00:54:10.900
This is what we would like
you to be using down the road,

00:54:10.900 --> 00:54:14.900
and a lot of our work will be focused
on improving this API set for you.

00:54:17.900 --> 00:54:21.800
I'd like to call Xavier up
to cover the roadmap and...

00:54:31.960 --> 00:54:32.890
Thanks, Nathan.

00:54:32.920 --> 00:54:37.820
Thank you.

00:54:37.930 --> 00:54:40.200
This afternoon, we'll have actually
drawing text with AdSui,

00:54:40.200 --> 00:54:43.150
which is like the higher-- the
low-level interface is the way

00:54:43.270 --> 00:54:47.690
to put it to draw Unicode text on
Mac OS X for Carbon applications.

00:54:48.110 --> 00:54:50.500
On Thursday,
I invite you to go and see the MLT,

00:54:50.500 --> 00:54:53.800
which is the Multilingual
Text Engine session,

00:54:53.800 --> 00:54:56.600
where we'll be discussing actually
some great features that the

00:54:56.600 --> 00:54:58.540
team has been adding for Jaguar.

00:54:58.540 --> 00:55:01.860
I think you'll be pretty happy
with what we've been doing.

00:55:02.050 --> 00:55:05.200
Should you have any feedback,
we have a feedback forum,

00:55:05.200 --> 00:55:07.610
which unfortunately is not there,
and I think it's tomorrow afternoon.

00:55:07.670 --> 00:55:09.520
I encourage you to look at your agenda.

00:55:09.640 --> 00:55:12.560
And this afternoon-- this-- tonight,
actually at 7:30,

00:55:12.560 --> 00:55:16.360
we'll have what we call the Birds of
Feather for International Technologies,

00:55:16.430 --> 00:55:20.260
and we'll have as well there
engineers from the Font Manager team,

00:55:20.260 --> 00:55:22.900
from the AdSui team, from MLT.

00:55:23.030 --> 00:55:27.250
If you have any questions on
techniques or maybe some blocking bugs,

00:55:27.290 --> 00:55:31.640
we could probably look at it and,
you know, kind of talk between engineers.

00:55:31.840 --> 00:55:34.530
A great session for those of you
that want to go international that

00:55:34.530 --> 00:55:37.330
are wondering about the markets
that Apple is trying to address

00:55:37.420 --> 00:55:41.720
with Mac OS X is session 010,
going international with Mac OS X,

00:55:41.720 --> 00:55:45.300
which is going to be on
Friday at 10:30 in room A2.

00:55:47.880 --> 00:55:49.800
Documentation.

00:55:49.800 --> 00:55:52.320
We'll have Benny on stage, actually,
which is our tech representative.

00:55:52.320 --> 00:55:53.210
He can talk about that.

00:55:53.280 --> 00:55:56.400
And we'll have a new
font manager reference,

00:55:56.400 --> 00:55:58.330
which explains the
font manager reference,

00:55:58.430 --> 00:56:01.010
what's the ATS framework,
and all these APIs we have

00:56:01.070 --> 00:56:03.000
been discussing today.

00:56:03.000 --> 00:56:06.990
You have the URL here at the bottom
of the screen for information.

00:56:08.200 --> 00:56:11.940
More documentation on technologies
we discuss in this session,

00:56:12.100 --> 00:56:15.300
Techno 2024, which is the Mac OS X font
manager reference,

00:56:15.300 --> 00:56:17.910
which is kind of a
QA about what are D fonts,

00:56:17.930 --> 00:56:21.750
a lot of things about what's new actually
on Mac OS X and the font manager,

00:56:21.750 --> 00:56:24.630
which answers a lot of the
questions we've been getting

00:56:24.630 --> 00:56:26.200
on the development list.

00:56:26.260 --> 00:56:29.460
And as well, you could check the
Apple Type Services technical

00:56:29.460 --> 00:56:33.500
documentation if you need to find more
about what we've been talking today.

00:56:33.500 --> 00:56:34.640
You have here the URL.

00:56:35.670 --> 00:56:39.580
The easiest thing for this kind of
documentation is definitely to go on

00:56:39.700 --> 00:56:43.020
the TechPubs website where you have a
list of all the documentation available.

00:56:45.940 --> 00:56:48.110
Should you have any questions
and contacts next week or

00:56:48.170 --> 00:56:53.750
in two months or next year,
you can always send me an email at

00:56:53.750 --> 00:57:02.630
xavier@apple.com and we'll make sure
we get whatever feature that you

00:57:02.630 --> 00:57:02.630
would like or enhancement request,
get the priority bump and make

00:57:02.630 --> 00:57:02.630
sure that we address your concerns.

00:57:04.050 --> 00:57:06.770
I'd like to mention as well
at the bottom of the screen,

00:57:06.770 --> 00:57:11.620
you have a Uberall URL, I suppose,
where you'll have all the URLs we've

00:57:11.640 --> 00:57:14.500
been discussing today and this
morning in the previous session.