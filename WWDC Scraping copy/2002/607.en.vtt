WEBVTT

00:00:11.690 --> 00:00:12.600
Good afternoon.

00:00:12.720 --> 00:00:14.370
Can everyone hear me?

00:00:14.510 --> 00:00:16.200
Can anyone hear me?

00:00:16.260 --> 00:00:17.780
Excellent.

00:00:18.180 --> 00:00:21.240
Welcome to the MPEG-4 Technical Overview.

00:00:21.310 --> 00:00:22.440
Not an interview.

00:00:22.510 --> 00:00:25.740
My name is Jesse Hammons of
the QuickTime engineering team.

00:00:25.830 --> 00:00:30.770
Today we're going to have a little
technical talk about how MPEG-4

00:00:30.820 --> 00:00:32.910
and QuickTime work together.

00:00:33.100 --> 00:00:36.280
This is not going to be any kind of
talk about licensing or any of those

00:00:36.350 --> 00:00:38.340
other things that I have no idea about.

00:00:38.620 --> 00:00:40.860
That was all in a stupid
movie on Wednesday.

00:00:40.860 --> 00:00:45.030
What we're going to talk about today...

00:00:45.750 --> 00:00:50.300
What we're going to talk about
today is what exactly is MPEG-4?

00:00:50.320 --> 00:00:52.700
How does it fit into the MPEG standards?

00:00:52.850 --> 00:00:53.740
Why do you care about it?

00:00:53.840 --> 00:00:55.870
Why do we care about it?

00:00:56.100 --> 00:01:03.740
How did we integrate the MPEG-4
technology into QuickTime?

00:01:04.110 --> 00:01:09.790
And how do you get MPEG-4 into
your application using QuickTime?

00:01:11.690 --> 00:01:14.450
First of all,
this might be some review for some

00:01:14.450 --> 00:01:18.160
people if you know about MPEG-4 already,
but a lot of people don't.

00:01:18.210 --> 00:01:21.870
And we want to get on the same
page with respect to what exactly

00:01:22.240 --> 00:01:25.290
MPEG-4 is and how it fits in.

00:01:25.490 --> 00:01:30.280
MPEG stands for
Motion Picture Experts Group.

00:01:30.360 --> 00:01:32.580
It's a standards body,
an international standards body

00:01:32.580 --> 00:01:36.070
that creates multimedia standards.

00:01:36.270 --> 00:01:39.280
There's three standardized
so far in the last 10 years.

00:01:39.340 --> 00:01:41.610
MPEG-1, 2, and 4.

00:01:41.690 --> 00:01:44.880
And as you can see,
their numbering scheme is a little

00:01:44.880 --> 00:01:48.060
different from the traditional
software version numbering scheme,

00:01:48.110 --> 00:01:53.300
I guess because it's not software,
it's a standard.

00:01:53.690 --> 00:01:58.960
In progress are standards
called MPEG-7 and MPEG-21.

00:01:59.110 --> 00:02:06.650
And all of these standards work together
to produce just a multimedia system

00:02:06.790 --> 00:02:11.640
They cover systems protocols
and ways to get video and audio

00:02:12.140 --> 00:02:16.580
data from point A to point B,
and they also cover audio codecs

00:02:16.580 --> 00:02:19.170
and video codecs and algorithms.

00:02:19.390 --> 00:02:21.680
dealing specifically with those signals.

00:02:21.740 --> 00:02:25.240
But they also, especially in the case
of MPEG-7 and MPEG-21,

00:02:25.540 --> 00:02:29.700
they cover video logging and metadata.

00:02:29.700 --> 00:02:32.290
And for example,
MPEG-7 doesn't contain any

00:02:32.410 --> 00:02:33.860
codec technology at all.

00:02:33.880 --> 00:02:37.660
The standards are meant to work together.

00:02:37.810 --> 00:02:41.500
The later standards don't
supersede the previous standards.

00:02:41.540 --> 00:02:47.320
They're meant to be longstanding
documents that enable the entire

00:02:47.320 --> 00:02:50.520
media industry to work together

00:02:50.760 --> 00:02:54.870
So I want to talk a little bit in
detail about the three standards

00:02:54.970 --> 00:02:56.660
that have been standardized so far.

00:02:56.740 --> 00:02:59.960
MPEG-1 is the most widespread.

00:02:59.960 --> 00:03:01.540
It's about 10 years old.

00:03:01.570 --> 00:03:04.340
And MP3 files,
which are really popular right now,

00:03:04.340 --> 00:03:06.000
actually come from this standard.

00:03:06.040 --> 00:03:09.740
It's MP1 standard, layer 3 audio.

00:03:09.910 --> 00:03:14.760
MP1 is also used in video CDs and
a lot of enterprise streaming and

00:03:14.780 --> 00:03:18.140
education streaming applications.

00:03:18.280 --> 00:03:22.610
MPEG-2 was standardized a
little later and is widely

00:03:22.610 --> 00:03:27.000
used in broadcasting and DVDs,
the MPEG-2 standard,

00:03:27.080 --> 00:03:31.190
digital cable if you have
access to that uses MPEG-2.

00:03:31.460 --> 00:03:35.400
MPEG-4, relative to those standards,
is very recent.

00:03:35.400 --> 00:03:38.780
It was finalized in 1999 and 2000.

00:03:38.940 --> 00:03:42.940
It was the first MPEG standard
to target internet streaming.

00:03:43.020 --> 00:03:47.580
It also directly addresses
wireless multimedia and handheld

00:03:47.620 --> 00:03:50.450
devices like cell phones and PDAs.

00:03:50.630 --> 00:03:54.690
So it's more modern compared
to the previous standards.

00:03:54.890 --> 00:03:57.160
And it's very big.

00:03:57.220 --> 00:04:00.640
It's the biggest MPEG standard to date,
easily.

00:04:00.730 --> 00:04:06.240
It includes file format, video codecs,
several different audio codecs,

00:04:06.330 --> 00:04:10.360
data transport for several,
many different kinds of networks,

00:04:10.450 --> 00:04:13.110
including the internet,
and many other things.

00:04:13.170 --> 00:04:17.830
You've probably seen this slide
before if you've seen our other talks.

00:04:18.070 --> 00:04:18.760
There's a lot of stuff on there.

00:04:18.760 --> 00:04:21.890
I thought you guys might find it, well,
hopefully humorous.

00:04:22.060 --> 00:04:24.670
This is part of the MPEG standard.

00:04:24.700 --> 00:04:27.000
You could get it yourself for
about 200 bucks if you want.

00:04:27.000 --> 00:04:31.890
It's full of a lot of text,
not many pictures.

00:04:32.140 --> 00:04:33.320
And this is bad enough.

00:04:33.400 --> 00:04:34.940
It's about 500 pages.

00:04:35.000 --> 00:04:36.000
This is only part two.

00:04:36.000 --> 00:04:39.950
So this is the visual
part of the standard.

00:04:40.130 --> 00:04:41.000
There's six parts in all.

00:04:41.000 --> 00:04:42.940
It's thousands of pages long.

00:04:43.000 --> 00:04:46.410
It's a lot of work, but you guys are all
programmers out there,

00:04:46.410 --> 00:04:46.890
right?

00:04:47.040 --> 00:04:49.220
So, you know,
for a couple hundred bucks you can

00:04:49.220 --> 00:04:51.000
make yourself an MPEG-4 system.

00:04:51.000 --> 00:04:54.000
We've done some of that
work for you already.

00:04:54.000 --> 00:04:57.000
We've got a subset of
technologies in QuickTime.

00:04:57.220 --> 00:05:03.940
What we have in 6 is code to
handle the MPEG-4 file format.

00:05:04.220 --> 00:05:09.000
We have a new video codec
that handles MPEG-4 video.

00:05:09.000 --> 00:05:13.000
And we have a new AAC audio codec
that we're going to talk about later.

00:05:13.000 --> 00:05:17.930
And we also support streaming
of MPEG-4 video and audio

00:05:18.040 --> 00:05:20.940
over RTSP using RTP packets.

00:05:21.000 --> 00:05:25.710
And you might wonder, well,
how did we decide on that

00:05:25.710 --> 00:05:27.920
subset of technology?

00:05:28.000 --> 00:05:30.000
There's a lot of great things in MPEG-4.

00:05:30.000 --> 00:05:31.950
How do we decide which ones to use?

00:05:32.100 --> 00:05:35.450
And we didn't just run through
the standard last year and say,

00:05:35.450 --> 00:05:37.000
hey, the file format looks good.

00:05:37.000 --> 00:05:38.970
Although it does.

00:05:39.100 --> 00:05:42.770
We're working with a lot of
really big companies to pick a

00:05:43.130 --> 00:05:46.190
feature set that's useful for

00:05:46.530 --> 00:05:51.940
Developers and not useful for developers,
but useful to users,

00:05:51.980 --> 00:05:54.200
which in turn use your applications.

00:05:54.270 --> 00:05:58.100
We're a founding member of the
Internet Streaming Media Alliance.

00:05:58.170 --> 00:06:02.180
And that includes some
really big companies:

00:06:02.220 --> 00:06:06.980
NVivio, Kasana, Cisco, IBM, Sun.

00:06:07.000 --> 00:06:08.880
Like I said, Apple's a founding member.

00:06:08.940 --> 00:06:13.020
3GPP is also using MPEG-4 technology.

00:06:14.950 --> 00:06:19.900
You might have heard of NTT DoCoMo,
Ericsson, Nokia.

00:06:19.940 --> 00:06:22.040
Those are all big wireless companies.

00:06:22.040 --> 00:06:24.940
They're all going to be
using MPEG-4 technology.

00:06:25.900 --> 00:06:30.280
The MPEG-4 Industry Forum is an
MPEG group dedicated just to get

00:06:30.510 --> 00:06:32.600
the standard out into the industry.

00:06:32.620 --> 00:06:37.340
And JPEG 2000 is going to be
using the MPEG-4 file format for

00:06:37.340 --> 00:06:42.530
their Motion JPEG 2000 standard,
which is forthcoming.

00:06:42.970 --> 00:06:47.540
So, once again,
how do these companies interoperate?

00:06:47.570 --> 00:06:52.900
How do they exactly decide which
parts of MPEG-4 to implement?

00:06:52.900 --> 00:06:57.900
And this is another kind of
groundbreaking part of MPEG-4.

00:06:57.900 --> 00:07:03.240
The committee recognizes that the
standard is too big to be rolled

00:07:03.260 --> 00:07:05.900
out in the industry all in one shot.

00:07:05.900 --> 00:07:08.900
It has to be adopted
over a number of years.

00:07:09.010 --> 00:07:14.160
So, they've integrated into the
standard itself some mechanisms

00:07:14.160 --> 00:07:16.900
for choosing subsets of technology.

00:07:17.110 --> 00:07:20.960
And if you do any work with MPEG-4,
you've heard the word "profile"

00:07:20.960 --> 00:07:23.700
and "level." If you haven't,
I'm going to try and explain it here.

00:07:23.900 --> 00:07:28.900
A profile defines a subset of technology.

00:07:28.910 --> 00:07:33.010
It's the actual algorithms and
intellectual property that you need to

00:07:33.010 --> 00:07:37.890
understand to implement a certain feature
in the video codec or the audio codec.

00:07:38.210 --> 00:07:42.070
But that's not enough information,
especially if you're

00:07:42.070 --> 00:07:43.900
implementing MPEG-4 in hardware.

00:07:43.900 --> 00:07:48.380
The specification is written to a
level of detail so that even hardware

00:07:48.380 --> 00:07:50.900
vendors can implement the standard.

00:07:51.160 --> 00:07:55.410
And especially for the hardware folks,
they need to know exactly how

00:07:55.410 --> 00:07:58.900
much RAM and how much CPU power
to put in their devices,

00:07:58.900 --> 00:08:02.900
especially if you're making some sort
of cell phone or handheld device.

00:08:02.900 --> 00:08:06.900
So, there's a further
specification called a level,

00:08:06.900 --> 00:08:09.900
which restricts the
complexity of the profile.

00:08:09.900 --> 00:08:15.120
It tells you exactly how much data
your device will have to handle to be

00:08:15.120 --> 00:08:19.900
interoperable with other devices that
also handle that profile and level.

00:08:19.900 --> 00:08:23.900
In the PC world,
for most application developers,

00:08:23.900 --> 00:08:28.900
the level is going to restrict the
bit rate of your MPEG-4 presentation.

00:08:28.900 --> 00:08:31.640
So, it still has some meaning even
though you're not building

00:08:31.640 --> 00:08:32.780
some hardware devices.

00:08:32.900 --> 00:08:36.790
And we're going to talk about these
profiles and levels more when we talk

00:08:36.860 --> 00:08:39.370
about the video and audio codecs.

00:08:41.550 --> 00:08:47.020
First, we're going to have a demo
of the MPEG-4 export dialog,

00:08:47.090 --> 00:08:51.320
which is definitely by far the
biggest user-visible change in

00:08:51.320 --> 00:08:54.490
QuickTime 6 for implementing MPEG-4.

00:08:54.590 --> 00:08:56.480
Obviously,
there are lots of other changes made.

00:08:56.640 --> 00:09:00.480
Here's what it looks like when
you want to create an MPEG-4 file.

00:09:00.590 --> 00:09:02.500
This is Thomas Putten.

00:09:02.500 --> 00:09:04.500
Thank you, Jesse.

00:09:04.500 --> 00:09:04.500
My name is Thomas.

00:09:04.500 --> 00:09:06.410
I also work on the Kodak team.

00:09:06.550 --> 00:09:12.300
Today, I'm going to show you how to
use the export to MPEG-4 dialog.

00:09:12.500 --> 00:09:18.490
Here, I have a movie open,
and I can just pick "Export."

00:09:19.230 --> 00:09:24.300
Now, let's go to Movie 2
QuickTime movie first.

00:09:24.300 --> 00:09:27.200
Now, when you pick options,
here you see the standard

00:09:27.380 --> 00:09:31.290
compression dialog that I hope
you guys are familiar with.

00:09:31.400 --> 00:09:34.620
Here there's a list of codecs,
and note that there's an

00:09:34.620 --> 00:09:36.390
MPEG-4 video right here.

00:09:36.400 --> 00:09:40.270
So you can pick this,
and then you can encode this video

00:09:40.640 --> 00:09:43.400
with MPEG-4 video codec in it.

00:09:43.400 --> 00:09:45.120
Same thing as the audio.

00:09:45.430 --> 00:09:49.800
So you know that MPEG-4 audio is
one of the codecs listed here.

00:09:49.990 --> 00:09:52.620
So I'm just gonna cancel this.

00:09:52.800 --> 00:09:57.750
Now, what's new in QuickTime 6
is Movie 2 MPEG-4.

00:09:57.890 --> 00:10:01.020
Now note that when I picked this,
the extension changed to .mp4,

00:10:01.020 --> 00:10:03.960
which actually writes it
to an MP4 file format.

00:10:04.130 --> 00:10:05.420
I pick Options.

00:10:05.420 --> 00:10:09.260
Note that this is very different
than the normal compression

00:10:09.260 --> 00:10:11.230
dialog that you're used to.

00:10:11.350 --> 00:10:12.200
Here we have five tabs.

00:10:12.200 --> 00:10:18.160
We have General, Video, Audio, Streaming,
and also Compatibility.

00:10:18.270 --> 00:10:20.680
In the General tab,
it gives you a summary and

00:10:20.680 --> 00:10:23.810
also a quick way to say,
"Okay, I just want a video or

00:10:23.850 --> 00:10:25.380
I just want an audio."

00:10:25.780 --> 00:10:28.340
Note that there is a bunch
of text underneath here.

00:10:28.590 --> 00:10:31.940
What it is,
it tells you what setting you have

00:10:31.940 --> 00:10:34.440
been selected within those other tabs.

00:10:34.490 --> 00:10:37.600
So you don't necessarily have
to go back to the tabs to

00:10:37.610 --> 00:10:39.520
see what you have selected.

00:10:39.800 --> 00:12:11.700
[Transcript missing]

00:12:12.060 --> 00:12:16.760
Another new thing of the export dialog is
because right now in QuickTime 6 you have

00:12:16.850 --> 00:12:18.950
two ways to generate an MPEG-4 video.

00:12:19.210 --> 00:12:23.030
You can do it through QuickTime to
QuickTime Movie or you can do

00:12:23.110 --> 00:12:25.000
it through export to MPEG-4.

00:12:25.000 --> 00:12:29.310
Let's say if you already have a
movie that you generate MPEG-4

00:12:29.380 --> 00:12:32.000
video with movie to QuickTime Movie.

00:12:32.000 --> 00:12:36.540
When you want to export it
to .mp4 you may not want to

00:12:36.540 --> 00:12:39.000
re-encode the movie or audio.

00:12:39.000 --> 00:12:43.000
In the video we actually
have an option pass-through.

00:12:43.290 --> 00:12:45.960
What it does is just copy
the data over and put it in

00:12:45.960 --> 00:12:48.000
.mp4 and package it for you.

00:12:48.180 --> 00:12:51.750
You save the time of not
having to re-encode your file.

00:12:52.120 --> 00:12:54.000
That's it for the demo.

00:12:54.000 --> 00:12:56.000
Can we go back to the slide please?

00:13:00.400 --> 00:13:03.760
Thomas.

00:13:03.860 --> 00:13:07.200
So that's what the export dialog is
going to look like for your users

00:13:07.270 --> 00:13:10.300
in terms of creating MP4 files.

00:13:10.360 --> 00:13:15.260
This is, in terms of how we've
integrated MP4 into QuickTime,

00:13:15.380 --> 00:13:21.130
we've got a file format importer
that will import MP4 files,

00:13:21.130 --> 00:13:25.930
and a file format exporter,
of which the dialog we just showed you,

00:13:25.930 --> 00:13:25.930
that will create MP4 files.

00:13:26.160 --> 00:13:29.260
We've got packetizers and
reassemblers so that we can

00:13:29.260 --> 00:13:32.100
stream MPEG-4 video and audio.

00:13:32.250 --> 00:13:37.410
And we've got the MPEG-4 video
and audio codecs so that you can

00:13:37.440 --> 00:13:39.100
encode those video and audio tracks.

00:13:39.100 --> 00:13:43.100
And of course you're going to be able
to playback MPEG-4 video and audio.

00:13:44.200 --> 00:13:45.440
Thomas mentioned the pass-through.

00:13:45.440 --> 00:13:48.200
We're actually going to demo that
pass-through later on in the talk.

00:13:48.220 --> 00:13:51.290
That's a little bit of
a confusing feature,

00:13:51.350 --> 00:13:52.380
but it's kind of important.

00:13:52.520 --> 00:13:55.530
This is, again,
in terms of the interop with other

00:13:55.580 --> 00:13:59.610
companies and things like that,
you'll be able to pass MPEG-4

00:13:59.680 --> 00:14:05.200
data through the QuickTime system,
even if QuickTime can't create that data.

00:14:05.240 --> 00:14:08.000
And if you get more
into the MPEG-4 scene,

00:14:08.040 --> 00:14:10.560
that's an important feature.

00:14:11.500 --> 00:14:13.580
So how do you bring up that dialogue?

00:14:13.730 --> 00:14:16.340
Here's how you get it
into your application.

00:14:16.470 --> 00:14:18.100
In fact,
if you have a QuickTime application,

00:14:18.100 --> 00:14:20.510
you're probably already
going to get this with 6.

00:14:20.720 --> 00:14:24.940
You just call the ConvertMovieToFile API.

00:14:25.050 --> 00:14:27.700
That will bring up the
general export dialogue,

00:14:27.780 --> 00:14:30.980
and you pass in the
showUserSettlings dialogue.

00:14:31.300 --> 00:14:36.770
The user will be able to choose
movie to MPEG-4 once you get

00:14:36.770 --> 00:14:38.840
your hands on QuickTime 6.

00:14:38.950 --> 00:14:42.660
Now this is the preferred way
to get the MPEG-4 functionality

00:14:43.050 --> 00:14:45.480
into your application.

00:14:45.630 --> 00:14:48.740
It's the most general,
it's the easiest to use.

00:14:48.810 --> 00:14:52.560
When future versions of QuickTime ship,
you'll get all the new exporters

00:14:52.560 --> 00:14:54.460
that come with those future versions.

00:14:54.460 --> 00:14:58.780
You'll pick up any other exporters
that happen to be on the system.

00:14:59.190 --> 00:15:02.600
But in case your application
might want to have some sort of

00:15:02.780 --> 00:15:06.560
special purpose MPEG-4 feature,
you can go ahead and invoke

00:15:06.560 --> 00:15:08.180
the exporter directly.

00:15:08.600 --> 00:15:12.100
This is familiar if you have
that functionality already.

00:15:12.180 --> 00:15:17.620
All you have to do is open up
the MP4 exporter component.

00:15:18.500 --> 00:15:21.000
I'm doing that using
Open Default component here.

00:15:21.000 --> 00:15:25.920
You'll probably want to check
your error codes in your own code.

00:15:26.180 --> 00:15:28.980
If you desire,
you can bring up that large

00:15:28.980 --> 00:15:34.800
MPEG-4 export dialog with the
movie export do user dialog call.

00:15:35.280 --> 00:15:39.440
Here I'm passing in nil for
the track so that all tracks

00:15:39.580 --> 00:15:41.200
will contribute to the export.

00:15:41.320 --> 00:15:44.200
You can choose to export
just a portion of the movie,

00:15:44.200 --> 00:15:47.200
but here I'm doing the whole movie.

00:15:47.260 --> 00:15:49.900
I'm doing it from a certain
start time to the end of the

00:15:49.900 --> 00:15:52.200
movie using getMovieDuration.

00:15:52.320 --> 00:15:55.160
And then finally,
you call the movieExportToDataRef

00:15:55.230 --> 00:15:59.200
or movieExportToFile APIs to
actually invoke the export operation

00:15:59.220 --> 00:16:02.520
and write that data to a file.

00:16:04.200 --> 00:16:08.380
Another thing we wanted to talk about
is MPEG-4 is based on QuickTime.

00:16:08.500 --> 00:16:09.530
We hope you've heard that.

00:16:09.640 --> 00:16:13.030
It's true, and we want to describe
exactly what that means.

00:16:13.230 --> 00:16:16.140
The file format is based on
the QuickTime file format.

00:16:16.140 --> 00:16:18.840
I have to thank Steve for
talking about the QuickTime file

00:16:18.930 --> 00:16:20.260
format in the last talk,
if you were there.

00:16:20.260 --> 00:16:22.440
I don't have to talk about it now.

00:16:22.460 --> 00:16:26.140
But just to review,
it's an Atom-based file format,

00:16:26.140 --> 00:16:31.970
so MP4 files have tracks and media and
data references and all that great stuff.

00:16:32.170 --> 00:16:34.570
It's really a fundamental
feature of QuickTime,

00:16:34.570 --> 00:16:38.120
and it's great that it's a fundamental
feature of MP4 files as well.

00:16:38.570 --> 00:16:41.810
Having said that,
there are some slight differences between

00:16:41.950 --> 00:16:44.370
MP4 files and QuickTime movie files.

00:16:44.370 --> 00:16:50.170
The MPEG committee had to figure out
a way to encapsulate that MP4 systems

00:16:50.230 --> 00:16:54.960
layer inside of a QuickTime movie,
and the result of that is an MP4 file.

00:16:55.100 --> 00:16:58.840
So if you have any low-level parsing
routines in your applications,

00:16:59.030 --> 00:17:01.730
you have to deal with those
differences that are mostly

00:17:01.910 --> 00:17:05.730
restricted to the image description
and sound sample descriptions.

00:17:05.900 --> 00:17:08.120
The easiest way to deal with
that is to just go to the MP4

00:17:08.120 --> 00:17:08.140
file and look at the file.

00:17:08.140 --> 00:17:12.300
You can just make the QuickTime calls,
because we'll do all the work for you.

00:17:12.340 --> 00:17:15.970
If you call new movie from file
or new movie from data ref,

00:17:16.050 --> 00:17:19.860
the importer will be invoked
and will massage any differences

00:17:20.140 --> 00:17:24.690
that there are in that MP4 file,
and you'll get a multi-track

00:17:25.140 --> 00:17:28.290
movie that you're used to
dealing with in your application.

00:17:29.460 --> 00:17:32.760
If you want to go the other way,
you want to create a MP4

00:17:32.760 --> 00:17:37.500
file from a QuickTime movie,
you just invoke the MP4 exporter

00:17:37.550 --> 00:17:42.320
as I showed the two ways to do
that in the previous slides.

00:17:42.780 --> 00:17:45.690
In terms of streaming,
the streaming hint track

00:17:45.810 --> 00:17:49.700
format is the same as the
QuickTime Movie streaming hint track.

00:17:49.930 --> 00:17:53.700
The streaming is implemented in
QuickTime using RTP and RTSP.

00:17:53.700 --> 00:17:57.700
We've got the packetizers and
reassemblers for the audio and video.

00:17:57.700 --> 00:18:05.980
The video is using RFC 3016 because
there's different standards for

00:18:05.980 --> 00:18:08.700
exactly how to packetize the video.

00:18:08.790 --> 00:18:12.700
We've chosen that one because it's
part of the ISMA 1.0 standard.

00:18:12.700 --> 00:18:16.700
It's the most widely used
one out there right now.

00:18:16.890 --> 00:18:19.640
The audio standard is
in draft at this point,

00:18:19.760 --> 00:18:23.330
but also this comes from ISMA 1.0.

00:18:23.470 --> 00:18:27.490
And the QuickTime streaming server is
already shipped with MP4 functionality.

00:18:27.650 --> 00:18:30.430
If you get your hands on
QuickTime streaming server 4,

00:18:30.440 --> 00:18:33.190
you can stream hinted MP4 files.

00:18:34.530 --> 00:18:38.740
So here's a dialogue you
probably don't like seeing.

00:18:38.790 --> 00:18:39.240
It's not that great.

00:18:39.360 --> 00:18:42.020
It says, "Couldn't open the file
sample.move because there is

00:18:42.110 --> 00:18:44.350
an error in the program." Well,
that's not true.

00:18:44.730 --> 00:18:46.780
Actually,
I just opened up that sample.move

00:18:46.890 --> 00:18:50.160
file and made it an invalid file,
so there's a lot of things

00:18:50.160 --> 00:18:51.470
wrong with this dialogue.

00:18:51.500 --> 00:18:54.490
We've got some new functionality
with respect to this,

00:18:54.580 --> 00:18:56.350
especially with MP4 files.

00:18:56.890 --> 00:18:59.860
Already we're encountering
problems in terms of invalid

00:18:59.860 --> 00:19:02.920
MP4 files out on the web,
and we want to have a better

00:19:02.920 --> 00:19:04.500
user experience for this.

00:19:04.500 --> 00:19:09.260
So now Thomas is going to demo what
kinds of things are encountered

00:19:09.260 --> 00:19:10.780
when you get invalid or...

00:19:10.860 --> 00:19:12.460
that QuickTime doesn't handle.

00:19:12.460 --> 00:19:14.660
man: Thank you, Jesse.

00:19:14.660 --> 00:19:20.140
Because of the large number of MP4
files that users may get their hands on,

00:19:20.140 --> 00:19:23.600
it would be very nice to tell the
user exactly what's wrong with your

00:19:23.600 --> 00:19:25.600
file and why you cannot open them.

00:19:25.910 --> 00:19:28.600
Here I have a video.mp4 file.

00:19:28.600 --> 00:19:32.020
When I open it, it gives me an error.

00:19:32.050 --> 00:19:37.680
It says you cannot open--
"Video.mp4 contains MP4 technologies

00:19:37.740 --> 00:19:40.810
which QuickTime currently
does not support." Now,

00:19:40.810 --> 00:19:44.210
this tells the user that it's something
that QuickTime has not implemented.

00:19:44.230 --> 00:19:47.820
It's not some general error,
so the user probably feels, "Okay,

00:19:47.820 --> 00:19:52.120
I'll leave it at that." But if the
user wants to know more detail,

00:19:52.380 --> 00:19:54.760
the user can click on this

00:19:55.000 --> 00:19:59.170
This is a simple example here,
and it gives you a more detailed reason

00:19:59.180 --> 00:20:02.450
why this file cannot be played because
using some technology we have not

00:20:02.450 --> 00:20:05.000
implemented called MPEG quantization.

00:20:05.000 --> 00:20:11.060
It also lists out all the errors
or warnings that we encountered

00:20:11.060 --> 00:20:14.000
during the parsing of the file.

00:20:14.010 --> 00:20:19.310
So it's going to all list it under here,
the users who decided to know about it.

00:20:19.300 --> 00:20:21.690
It also choose with audio.

00:20:21.810 --> 00:20:26.020
If I double click on this audio,
it says you cannot open this because it

00:20:26.020 --> 00:20:29.280
contains unsupported MPEG-4 audio data.

00:20:29.380 --> 00:20:30.300
Click on it.

00:20:30.300 --> 00:20:32.900
It says it's using
something called AAC Main,

00:20:32.920 --> 00:20:34.300
which we have not implemented yet.

00:20:34.300 --> 00:20:38.300
So that's it for the demo,
and can we go back to the slide, please?

00:20:44.700 --> 00:20:46.460
I like that too.

00:20:46.510 --> 00:20:48.020
So here's how you get it.

00:20:48.270 --> 00:20:49.810
Lucky for you,
you don't have to do any work.

00:20:49.900 --> 00:20:51.900
Once again,
if your application calls new movie

00:20:51.900 --> 00:20:56.280
from file or new movie from data ref,
which it probably does,

00:20:56.680 --> 00:21:00.630
This dialogue will come up
should there be any problems in

00:21:00.770 --> 00:21:03.460
the MP4 file or any other file.

00:21:03.460 --> 00:21:04.360
It works for movies too.

00:21:04.360 --> 00:21:08.970
But we recognize that you might not
always want this dialogue popping up.

00:21:09.210 --> 00:21:11.940
You might be opening up a large number
of files or something like that.

00:21:12.050 --> 00:21:14.770
On OS X you might be writing
some command line applications,

00:21:14.770 --> 00:21:16.990
in which case dialogues
are not a good thing.

00:21:17.040 --> 00:21:18.720
So we've got a new flag here.

00:21:18.840 --> 00:21:21.600
New movie, don't interact with user.

00:21:21.860 --> 00:21:24.360
And that will inhibit
this warning dialogue.

00:21:24.360 --> 00:21:28.520
It will also inhibit the dialogue that
comes up if a codec or a component

00:21:28.780 --> 00:21:30.860
isn't found on the local machine.

00:21:30.860 --> 00:21:32.860
That's called the missing
software dialogue.

00:21:32.860 --> 00:21:35.390
You can OR that in
with our existing flag,

00:21:35.940 --> 00:21:38.360
new movie,
don't ask unresolved data refs.

00:21:38.360 --> 00:21:43.540
And using those two flags,
you'll be able to write code that won't

00:21:43.540 --> 00:21:46.900
bring up any asynchronous dialogues.

00:21:48.110 --> 00:21:52.180
And with that, I'm going to hand the
talk off to Roger Kumar,

00:21:52.180 --> 00:21:57.180
who's going to talk in more detail
about the MPEG-4 video codec.

00:22:00.300 --> 00:22:04.960
Hi, I'm Rog.

00:22:05.290 --> 00:22:08.810
I work on the video team for QuickTime.

00:22:09.160 --> 00:22:13.100
And I'd like to talk a little
bit about the MPEG-4 video codec.

00:22:13.100 --> 00:22:18.280
So, like the rest of MPEG-4,
the video codec is very huge.

00:22:18.280 --> 00:22:22.950
And it contains a lot of technology,
probably more technology than any one

00:22:22.950 --> 00:22:25.060
company could implement at one time.

00:22:25.060 --> 00:22:27.680
And the standards bodies realize this.

00:22:27.680 --> 00:22:31.730
So what they've done is they've
decided to break the video

00:22:31.850 --> 00:22:33.800
codec into smaller pieces.

00:22:33.850 --> 00:22:37.280
And it's an easy way to think of it
is they've broken it into profiles,

00:22:37.280 --> 00:22:40.000
and each profile contains
technology that's relevant

00:22:40.300 --> 00:22:43.080
to some particular market.

00:22:43.230 --> 00:22:47.260
So, one of the important things about
having MPEG-4 in QuickTime is

00:22:47.330 --> 00:22:50.940
that we want to be able to
interoperate with these companies.

00:22:51.020 --> 00:22:54.480
And when we decided,
when we were working on deciding

00:22:54.480 --> 00:22:57.380
what profiles to support,
we worked closely with companies

00:22:57.460 --> 00:23:01.060
in the internet streaming space
and the wireless handheld space,

00:23:01.130 --> 00:23:04.600
and we decided, well,
we could all interoperate with

00:23:04.600 --> 00:23:08.480
each other if we supported
the MPEG-4 simple profile.

00:23:09.010 --> 00:23:14.590
So the MPEG-4 video simple profile
is an extremely flexible video codec.

00:23:14.670 --> 00:23:19.030
It's useful at extremely low data rates,
down to 50 kilobits per second,

00:23:19.030 --> 00:23:21.860
or extremely high data rates,
up to 4 megabits per second.

00:23:21.900 --> 00:23:25.180
And at these low data rates,
it's useful for things

00:23:25.180 --> 00:23:29.060
like internet streaming,
and it's useful for delivery of video

00:23:29.290 --> 00:23:31.900
data to wireless handheld devices.

00:23:31.900 --> 00:23:34.860
But it's also good for
a lot of other things.

00:23:34.900 --> 00:23:38.570
For example, at medium data rates,
it's good for stored

00:23:38.900 --> 00:23:40.900
content on your local drive.

00:23:40.900 --> 00:23:46.890
You could compress iMovies and give them
to your friends in MPEG-4 video format.

00:23:46.900 --> 00:23:50.800
It's good for any application
that needs to display video.

00:23:50.960 --> 00:23:55.830
So the application developers who might
be writing games or kiosk software,

00:23:56.010 --> 00:23:58.900
MPEG-4 video is something that
you might want to know about.

00:23:58.900 --> 00:24:01.890
And we're starting to see
things like set-top boxes.

00:24:02.030 --> 00:24:04.900
Come into the market that
are supporting MPEG-4 video.

00:24:04.900 --> 00:24:08.460
And therefore,
we can see that there's definitely

00:24:08.540 --> 00:24:12.900
companies that are using MPEG-4
video at high data rates.

00:24:12.900 --> 00:24:17.670
So it's extremely flexible
and extremely usable.

00:24:17.850 --> 00:24:26.260
So in MPEG-4, with MPEG-4 and QuickTime,
we're able to decode most of the

00:24:26.260 --> 00:24:31.800
ISMA and the 3GPP streams because we
support the MPEG-4 video simple profile.

00:24:31.800 --> 00:24:33.800
So why is that important?

00:24:33.800 --> 00:24:40.110
Well, we could decode streams from
encoder products from companies like

00:24:40.190 --> 00:24:42.800
Cisco and from NVivio using QuickTime.

00:24:42.820 --> 00:24:46.690
And if for some reason we're presented
with a video stream that we can't open,

00:24:46.790 --> 00:24:50.370
then we present a nice dialog that says,
"Well, there's these following

00:24:50.370 --> 00:24:55.460
problems with this file." Also,
using MPEG-4 video in QuickTime 6,

00:24:55.500 --> 00:25:00.800
we could encode streams that
comply to ISMA or 3GPP standards.

00:25:00.800 --> 00:25:06.590
This is important because we could use
QuickTime to create video content that

00:25:06.890 --> 00:25:12.800
you could deliver to another software
MPEG-4 client like QuickTime Player.

00:25:12.890 --> 00:25:18.970
Or you could use QuickTime to create
video content that you could deliver to a

00:25:19.710 --> 00:25:22.800
hardware device like a Docomo cell phone.

00:25:23.400 --> 00:25:28.740
So, you hear these words like
ISMA and 3GPP streams,

00:25:28.810 --> 00:25:31.120
so let's talk a little bit
about what those really are.

00:25:31.300 --> 00:25:37.360
So, the very basic ISMA Profile
Zero has been defined to

00:25:37.460 --> 00:25:43.520
support low complexity devices,
and it uses the MPEG-4 video

00:25:43.590 --> 00:25:45.290
simple profile to deal with video.

00:25:45.300 --> 00:25:49.880
Typically,
these are used at quarter-sif or

00:25:49.880 --> 00:25:57.210
q-sif frame sizes at 15 frames
per second and at 64 kilobits.

00:25:58.320 --> 00:26:03.900
For higher bandwidth type situations,
the ISMA has defined Profile 1,

00:26:03.900 --> 00:26:08.560
which uses either the simple video
profile or the advanced simple profile.

00:26:08.670 --> 00:26:11.440
The advanced simple profile is
very similar to the simple profile,

00:26:11.440 --> 00:26:17.690
it just adds a few technologies,
so it increases the computational

00:26:17.730 --> 00:26:19.320
complexity slightly.

00:26:19.520 --> 00:26:24.110
And typically we use these at
SIF frame sizes at 30 frames per

00:26:24.380 --> 00:26:26.990
second and up to 1.5 megabits.

00:26:27.610 --> 00:26:34.700
Lastly, the 3G P-streams are very similar
to the ISMA Profile Zero streams.

00:26:35.050 --> 00:26:40.010
The only differences are that they
limit a few of the features to enable

00:26:40.050 --> 00:26:42.590
delivery to wireless handhelds.

00:26:42.600 --> 00:26:47.180
So who can use MPEG-4 video?

00:26:49.540 --> 00:26:56.070
ISMA P0 streams can play back
on 233 MHz G3 processors or

00:26:56.070 --> 00:26:58.380
their Pentium equivalents.

00:26:58.470 --> 00:27:02.250
And for a reference point,
a 500 MHz Titanium PowerBook G4

00:27:02.290 --> 00:27:08.820
can decode a 640 x 480 MPEG-4 video
stream at 24 frames per second.

00:27:08.820 --> 00:27:13.100
For encoding, since encoding is such a
computationally expensive task,

00:27:13.100 --> 00:27:16.320
we recommend that you use a PowerMac G4.

00:27:16.320 --> 00:27:19.840
And as a reference point,
a 500 MHz Titanium PowerBook can

00:27:20.260 --> 00:27:26.720
encode 320 x 240 frame size video at
24 frames per second in real time.

00:27:26.720 --> 00:27:30.550
These numbers are using a DV source and
compressing through QuickTime Player.

00:27:33.200 --> 00:27:40.140
So there's several optimizations
related to MPEG-4 video that application

00:27:40.140 --> 00:27:42.130
developers need to know about.

00:27:42.530 --> 00:27:45.940
First of all, like I mentioned,
it's optimized for AlteVec,

00:27:45.940 --> 00:27:49.230
and that's both the
encoder and the decoder.

00:27:49.330 --> 00:27:53.300
And developers can invoke the
encoder in a few different ways.

00:27:53.480 --> 00:28:00.740
They can invoke it with some fast
options if speed is a critical issue.

00:28:00.800 --> 00:28:03.410
But if you give the encoder a
little bit more time to compress,

00:28:03.560 --> 00:28:06.780
it will give you a little higher quality.

00:28:06.890 --> 00:28:11.810
So there's a speed to quality trade-off
that you could give to the encoder.

00:28:11.980 --> 00:28:16.380
We've also optimized the
encoding path from digital video.

00:28:16.470 --> 00:28:18.390
So what does that exactly mean?

00:28:18.540 --> 00:28:22.370
Well, if you have a DV source,
and typically that's a

00:28:22.480 --> 00:28:27.010
720x480 original source,
and you're compressing to MPEG-4,

00:28:27.010 --> 00:28:30.080
and typically you want to
compress to a smaller frame size,

00:28:30.100 --> 00:28:34.500
so you'll compress to
something like 320x240.

00:28:34.510 --> 00:28:37.470
The way that QuickTime 5 handles
this is that it decompresses

00:28:37.670 --> 00:28:41.160
the DV into a big frame buffer,
then it scales it down and

00:28:41.160 --> 00:28:43.360
hands it off to MPEG-4 video.

00:28:43.630 --> 00:28:46.930
Well, with QuickTime 6,
you get some new functionality.

00:28:46.930 --> 00:28:50.620
It recognizes that our
destination is going to be small.

00:28:50.620 --> 00:28:54.370
So it calls the DV codec
to actually decompress the

00:28:54.420 --> 00:28:56.540
DV into a half-size buffer.

00:28:56.590 --> 00:29:00.770
So it decompresses into 360x240,
which is only a quarter of

00:29:00.770 --> 00:29:02.620
the pixels of the original.

00:29:02.620 --> 00:29:06.540
And then it scales it down
and hands it off to MPEG-4.

00:29:06.540 --> 00:29:07.500
So there's some speed optimization.

00:29:07.500 --> 00:29:10.320
There's some optimization there.

00:29:10.320 --> 00:29:15.700
Additionally,
it also hands data to the MPEG-4

00:29:15.900 --> 00:29:22.300
[Transcript missing]

00:29:25.660 --> 00:29:32.360
So RGB is a very widely supported
pixel format type in QuickTime.

00:29:32.360 --> 00:29:34.930
There's a few different
RGB formats and application

00:29:35.880 --> 00:29:37.870
developers seem to use it a lot.

00:29:37.940 --> 00:29:40.190
However, the reason for this

00:29:40.950 --> 00:29:44.860
If you have a source that's DV and
you have a destination that's

00:29:44.860 --> 00:29:47.780
going to be compressed in MPEG-4,
since both these codecs

00:29:47.780 --> 00:29:50.250
use YUV internally,
it doesn't make a lot of sense

00:29:50.450 --> 00:29:54.730
to decompress to an RGB buffer
and then convert it to YUV again

00:29:54.730 --> 00:29:57.380
when you compress it to MPEG-4.

00:29:57.410 --> 00:30:00.430
There's a few unnecessary
color conversions that take

00:30:00.430 --> 00:30:06.300
place that slow things down,
and you also lose some color fidelity.

00:30:07.120 --> 00:30:11.180
What we recommend is that
you use a YUV pixel format.

00:30:11.180 --> 00:30:14.590
And actually we want you to use
the industry standard Y' CR,

00:30:14.600 --> 00:30:16.990
CB when you deal with
intermediate buffers.

00:30:17.000 --> 00:30:21.000
And when you hand data to or
from the MPEG-4 video codec.

00:30:21.000 --> 00:30:26.230
So this pixel format is supported by a
number of different codecs in QuickTime.

00:30:26.230 --> 00:30:30.980
DV, MPEG-2, MPEG-4, and JPEG support this
type of pixel format.

00:30:31.090 --> 00:30:37.500
And if you use the standard export calls,
you already get this nice pixel format

00:30:37.520 --> 00:30:41.000
handling for you in QuickTime for free.

00:30:41.000 --> 00:30:42.930
So you don't have to worry about this.

00:30:43.000 --> 00:30:47.950
But if you are manually
handling frames to the codec,

00:30:47.950 --> 00:30:52.500
you want to remember to
use this type of format.

00:30:53.470 --> 00:30:56.900
Let's talk a little bit
about gamma correction.

00:30:56.940 --> 00:31:01.780
MPEG-4 video tags gamma
data in the video track.

00:31:02.360 --> 00:31:08.690
So we use this data in our implementation
to perform gamma correction per platform.

00:31:09.010 --> 00:31:15.850
This is extremely desirable to a lot of
people because if you create content on

00:31:15.960 --> 00:31:19.960
a Mac and then you distribute it to a PC,
sometimes it looks too dark.

00:31:19.960 --> 00:31:24.240
And if you have a codec that
doesn't do gamma correction for you,

00:31:24.260 --> 00:31:27.870
this is a bad user experience
for your customers.

00:31:28.120 --> 00:31:33.640
So here I've taken an image
that's already pretty dark,

00:31:33.650 --> 00:31:36.970
and I'm using a codec that
doesn't tag gamma data,

00:31:36.970 --> 00:31:39.000
so it can't do gamma correction.

00:31:39.170 --> 00:31:43.000
And I've moved it over to a PC,
and it looks even darker.

00:31:43.000 --> 00:31:46.550
So that's not the experience I want.

00:31:47.620 --> 00:31:53.390
So, if I had used MPEG-4 instead,
I would get an experience like this.

00:31:53.550 --> 00:31:57.620
On the Mac and the PC,
the two different videos

00:31:57.620 --> 00:31:59.290
look essentially the same.

00:31:59.390 --> 00:32:02.920
So, going back,
you see one is a little too dark.

00:32:03.210 --> 00:32:07.730
And with MPEG-4, they're essentially the
same brightness level.

00:32:07.870 --> 00:32:15.240
So this is another advantage that MPEG-4
gives to video processing in QuickTime.

00:32:15.380 --> 00:32:17.690
And to demo...

00:32:20.370 --> 00:32:23.890
will demo some of the
features of MPEG-4 video.

00:32:24.000 --> 00:32:26.180
Thank you, Raj.

00:32:30.200 --> 00:32:32.070
Here I have,
I'm going to show you how your

00:32:32.070 --> 00:32:35.750
QuickTime application can take
advantage of all this stuff

00:32:35.760 --> 00:32:39.200
that we have talked about,
mainly MPEG-4.

00:32:39.200 --> 00:32:40.800
Here I have a Final Cut Pro.

00:32:40.800 --> 00:32:41.840
It's a Vita version.

00:32:41.840 --> 00:32:44.020
We have not changed any
single line of code,

00:32:44.020 --> 00:32:46.640
except we are using QuickTime 6.

00:32:47.200 --> 00:32:50.580
I have a DV source open,
just like you expect.

00:32:50.600 --> 00:32:52.700
Final Cut Pro can edit DV.

00:32:52.720 --> 00:32:56.170
But now, Final Cut Pro,
because it's using QuickTime,

00:32:56.200 --> 00:32:58.440
it can also deal with MPEG-4 file.

00:32:58.500 --> 00:33:02.490
So I can do import.

00:33:05.200 --> 00:33:13.710
The This is a clip that, um,
for this year's Stupid Movie.

00:33:13.710 --> 00:33:15.640
So, I can just drag it there.

00:33:15.650 --> 00:33:19.020
Hmm,
I think I've seen this guy somewhere.

00:33:20.110 --> 00:33:22.590
So as you can see,
you can play the file normally.

00:33:22.590 --> 00:33:28.240
And you can do the editing just
like a normal Final Cut Pro movie.

00:33:28.240 --> 00:33:30.940
I'm just going to do a cross dissolve.

00:33:31.910 --> 00:33:36.060
Then I'm gonna render it.

00:33:36.060 --> 00:33:41.360
So now I have a file that I can--
I want to save it somewhere.

00:33:41.360 --> 00:33:49.040
Because Final Cut Pro uses QuickTime,
it also can export MP4 file.

00:33:53.100 --> 00:33:55.710
Bring up the option dialogs again.

00:33:55.710 --> 00:33:57.810
Help you with the settings.

00:33:57.850 --> 00:33:59.100
Just click OK.

00:33:59.100 --> 00:34:01.500
I just click Save,
and I can replace the file.

00:34:01.570 --> 00:34:04.340
So the main point here is,
if you use QuickTime and

00:34:04.340 --> 00:34:08.040
you're using the procedure call
that Jesse mentioned earlier,

00:34:08.060 --> 00:34:09.440
you get all this for free.

00:34:09.440 --> 00:34:12.560
You can import MP4 file,
you can export MP4 file,

00:34:12.660 --> 00:34:17.230
and you get to reach a wider
variety of audience that you may

00:34:17.230 --> 00:34:19.300
not be able to reach earlier.

00:34:19.370 --> 00:34:22.150
So now let's play back the file.

00:34:23.300 --> 00:34:29.650
Another nice thing about using MP4 is,
as Roger had mentioned,

00:34:29.680 --> 00:34:34.210
this file is going to look the
same on this platform right now or

00:34:34.210 --> 00:34:36.540
on someone's machine on Windows,
for example.

00:34:37.300 --> 00:34:39.520
will play this file,
show that it did the-- to

00:34:39.520 --> 00:34:42.450
solve everything correctly.

00:34:42.450 --> 00:34:44.650
So this is--that's it.

00:34:44.670 --> 00:34:46.340
And here you go.

00:34:46.340 --> 00:34:50.840
No, the MPEG-4 is re-encoded because
we have done editing to it.

00:34:50.840 --> 00:34:54.540
So can we go back to the slide, please?

00:34:54.540 --> 00:34:56.680
Thanks, Thomas.

00:35:01.750 --> 00:35:05.540
So Thomas just demonstrated something
that's actually extremely cool.

00:35:05.560 --> 00:35:08.670
Final Cut, when it was written,
knew nothing about MPEG-4.

00:35:08.810 --> 00:35:11.600
So we installed QuickTime 6 on
this machine and all of a sudden

00:35:11.740 --> 00:35:13.700
Final Cut is an MPEG-4 application.

00:35:13.700 --> 00:35:15.700
And what does this mean for you?

00:35:15.700 --> 00:35:18.730
Well, as application developers
with QuickTime 6,

00:35:18.800 --> 00:35:20.700
your applications are
now MPEG-4 applications.

00:35:20.700 --> 00:35:22.700
So this is kind of a big deal.

00:35:22.830 --> 00:35:25.840
If you use the standard
QuickTime export calls,

00:35:26.050 --> 00:35:28.760
you get a lot of free
things with QuickTime 6,

00:35:28.880 --> 00:35:30.590
including built-in MPEG-4 support.

00:35:30.700 --> 00:35:35.000
And the other thing to notice is
that MPEG-4 video in QuickTime is

00:35:35.000 --> 00:35:37.700
implemented just like in other codecs.

00:35:37.700 --> 00:35:41.700
So it behaves just like the codecs
you're used to dealing with now.

00:35:43.260 --> 00:35:47.880
So to sum up,
a few points about the video codec.

00:35:47.880 --> 00:35:51.570
We've implemented the MPEG-4
video simple profile and most,

00:35:51.720 --> 00:35:54.200
but not all,
of the advanced simple profile.

00:35:54.340 --> 00:35:58.180
And this is important so that we can
interoperate with other companies,

00:35:58.570 --> 00:36:03.940
especially those companies that are
in the ISMA or the 3GPP consortium.

00:36:04.360 --> 00:36:09.200
And lastly, it's one of the latest codecs
that we've added into QuickTime.

00:36:09.310 --> 00:36:12.160
And so if you're doing any
amount of video processing,

00:36:12.230 --> 00:36:16.200
you get a lot of optimizations if
you choose to use MPEG-4 video.

00:36:16.330 --> 00:36:18.330
So I'd like to hand
the talk over to Eric,

00:36:18.410 --> 00:36:21.590
who's going to talk a little
bit about MPEG-4 audio.

00:36:28.760 --> 00:36:30.440
Thank you Roger.

00:36:30.660 --> 00:36:35.060
I'm Eric Aldrich, Core Audio Engineering,
and I'm here to talk a little

00:36:35.080 --> 00:36:38.270
bit about AAC and QuickTime 6.

00:36:39.310 --> 00:36:42.840
As Jesse has mentioned,
the MPEG-4 audio spec is huge.

00:36:42.850 --> 00:36:48.210
There are 31 separate codecs and
variants thereof within MPEG-4.

00:36:48.360 --> 00:36:52.540
And some of the examples,
and we have AAC for general audio.

00:36:52.570 --> 00:36:55.300
You have Kelp for speech,
you have TwinVQ, HVXC,

00:36:55.300 --> 00:36:57.080
and several others.

00:36:57.130 --> 00:37:00.800
And in QuickTime 6,
we decided we're going to implement

00:37:00.880 --> 00:37:05.800
AAC because we feel it is the best
audio codec out there for general audio,

00:37:05.880 --> 00:37:07.070
bar nothing.

00:37:08.600 --> 00:37:12.820
AAC is an example of a
perceptual audio codec.

00:37:12.980 --> 00:37:15.820
It's very similar to MP3 in that regard.

00:37:15.820 --> 00:37:17.830
Perceptual audio codec,
for those of you who don't

00:37:17.830 --> 00:37:21.400
know what that means,
is basically we just encode the

00:37:21.400 --> 00:37:24.010
data that the listener can hear.

00:37:24.140 --> 00:37:28.480
We throw out everything that you can't
perceive when it's being played back.

00:37:28.480 --> 00:37:31.340
And so that shrinks the
file down considerably.

00:37:31.350 --> 00:37:33.100
AAC is a variable bitrate codec.

00:37:33.230 --> 00:37:36.590
So despite what you will see later,
or it might be implied,

00:37:36.860 --> 00:37:40.030
it is constantly a variable bitrate.

00:37:40.030 --> 00:37:42.040
There is no CBR in AAC.

00:37:42.040 --> 00:37:46.330
And AAC is the first real
general audio codec that provides

00:37:46.330 --> 00:37:48.680
indistinguishable audio quality.

00:37:48.750 --> 00:37:51.910
And what that means is you
can take an encoded file,

00:37:51.910 --> 00:37:56.540
play it back, listen to the source,
play it back, and you will not be able

00:37:56.540 --> 00:37:58.280
to tell the difference.

00:37:58.280 --> 00:38:03.280
Now, some people have claimed this,
but they have yet to actually succeed.

00:38:03.450 --> 00:38:06.300
Now, for instance, from a CD source,
AAC low-complexity,

00:38:06.300 --> 00:38:08.220
and you're going to try
to do this with MP3,

00:38:08.370 --> 00:38:10.750
requires 96 kilobits per
second to achieve this,

00:38:11.090 --> 00:38:12.400
which is 192 kbps.

00:38:12.530 --> 00:38:17.430
I know some of you are thinking, well,
MP3 claims CD quality at 128.

00:38:17.620 --> 00:38:20.630
Well, CD quality is not
indistinguishable quality.

00:38:20.630 --> 00:38:22.980
And no one's talking
about this until now,

00:38:22.980 --> 00:38:24.890
because no one's been
able to do it until now.

00:38:24.890 --> 00:38:27.800
And for instance, if you're going to try
to do this with MP3,

00:38:27.800 --> 00:38:32.320
you'll need at least 128 kilobits per
second per channel to achieve this,

00:38:32.350 --> 00:38:35.080
and that's being generous.

00:38:36.960 --> 00:38:41.370
The AAC encoder within QuickTime is,
again, we're going to provide

00:38:41.370 --> 00:38:43.000
AAC low complexity.

00:38:43.000 --> 00:38:45.600
Now I know some of you are aware
there's a main profile available,

00:38:45.740 --> 00:38:49.660
but we decided to do low complexity
because that's what everyone's using.

00:38:49.660 --> 00:38:52.070
Main profile is not implemented
in very many places,

00:38:52.070 --> 00:38:56.080
and this is what you're going to
see out there 95% of the time.

00:38:56.080 --> 00:38:57.520
And it is up to snuff.

00:38:57.520 --> 00:39:01.360
We're not really compromising
here because the benefits of

00:39:01.570 --> 00:39:05.700
the main profile are minimal,
and it sometimes, in some cases,

00:39:05.780 --> 00:39:07.890
can double the processing time.

00:39:08.090 --> 00:39:11.070
In our encoder,

00:39:11.400 --> 00:39:15.260
QuickTime will, of course,
upsample whatever you

00:39:15.260 --> 00:39:16.970
feed it to whatever.

00:39:16.970 --> 00:39:21.550
But as you will see later,
you want to keep this in mind that it

00:39:21.550 --> 00:39:25.430
really only accepts 44.1 or 48 kHz.

00:39:25.430 --> 00:39:28.450
And right now we take mono or stereo.

00:39:28.820 --> 00:39:34.210
Now AAC is from the ground up also
designed to be multi-channel compatible.

00:39:34.210 --> 00:39:41.580
It can do 5.1, 7.1, 22.11, you know,
whatever you want to do.

00:39:41.640 --> 00:39:44.730
However, at this point,
we have not implemented this.

00:39:44.730 --> 00:39:47.940
But just wait, give us some time.

00:39:48.230 --> 00:39:53.170
Output, mono, we're going to go from 8
to 256 kilobits per second,

00:39:53.380 --> 00:39:55.580
stereo is 16 to 320.

00:39:55.600 --> 00:39:59.860
And another important thing is
the sample rates are automatically

00:39:59.860 --> 00:40:01.290
scaled to the bit rates.

00:40:01.520 --> 00:40:05.280
You can't control directly the
output sample rate in this encoder.

00:40:05.280 --> 00:40:08.450
If you have, for instance,
if you put out 128

00:40:08.510 --> 00:40:12.340
kilobits per second stereo,
you will get whatever you input,

00:40:12.340 --> 00:40:14.010
be it 44.1 or 48.

00:40:14.240 --> 00:40:17.000
But if you put it down to
64 kilobits per second,

00:40:17.000 --> 00:40:19.740
you only get 32 kilohertz
sample rate out.

00:40:19.820 --> 00:40:22.000
And that's important to keep in mind.

00:40:22.610 --> 00:40:27.480
Our decoder, again,
we're implementing AAC low complexity.

00:40:27.480 --> 00:40:30.850
We're aware of main profile,
but we can't decode it.

00:40:31.550 --> 00:40:36.460
We can decode anywhere,
streams between 8 and 320 Gbps,

00:40:36.460 --> 00:40:41.730
8 to 48 kHz,
we don't cover the higher end,

00:40:41.730 --> 00:40:46.500
mono or stereo,
and we handle ISMA profiles 0 or 1.

00:40:46.500 --> 00:40:49.850
And for audio, thank goodness,
they're exactly the same,

00:40:49.960 --> 00:40:52.290
which is pretty much what we have there.

00:40:54.560 --> 00:40:57.080
As some of you may have heard
in the audio codec talk,

00:40:57.140 --> 00:41:01.470
this is the first implementation of
our new audio codec architecture.

00:41:02.470 --> 00:41:04.850
Basically,
the new audio codec architecture

00:41:05.310 --> 00:41:08.300
allows for a traditional
push-pull model for audio codecs.

00:41:08.400 --> 00:41:10.800
So if you shovel bits in,
you get bits out.

00:41:10.870 --> 00:41:15.510
No longer waiting on the QuickTime model.

00:41:15.700 --> 00:41:18.800
In QuickTime,
we allow multiple codecs to be chosen

00:41:19.230 --> 00:41:20.730
basically from one umbrella component.

00:41:20.960 --> 00:41:24.780
For those of you familiar with sound
decompressors and sound compressors,

00:41:24.780 --> 00:41:28.060
we still have those,
but now each of them can

00:41:28.060 --> 00:41:30.200
handle multiple codecs.

00:41:30.380 --> 00:41:34.570
So you can handle kelp,
you can handle HVXC, TwinVQ,

00:41:34.700 --> 00:41:38.190
whatever else, all through one component.

00:41:38.280 --> 00:41:39.960
S-Com or S-DAC.

00:41:40.120 --> 00:41:43.950
And again,
this is only implemented for QuickTime 6.

00:41:44.460 --> 00:41:47.540
So,
what we're calling the new components,

00:41:47.630 --> 00:41:50.620
the audio encoders, is just, you know,
we have ADECs and AANCs.

00:41:50.700 --> 00:41:55.720
And again,
the model is that the SDEC can just,

00:41:55.720 --> 00:42:02.280
can talk to multiple, you know,
AANCs or ADECs, excuse me,

00:42:02.280 --> 00:42:02.280
and the ESCOM can talk to multiple AANCs.

00:42:02.750 --> 00:42:07.300
Right now we have AAC,
and those are on your Jaguar CDs.

00:42:07.300 --> 00:42:09.880
Some of you may know that we
have shipped Kelp in the past,

00:42:09.900 --> 00:42:16.450
and we're working on it,
pending all the licensing agreements.

00:42:16.820 --> 00:42:20.560
How good is AAC?

00:42:20.560 --> 00:42:25.850
Dolby Labs has done a few evaluations,
and they've basically done the standard

00:42:25.880 --> 00:42:29.030
hidden reference double-blind test,
where you're played a source,

00:42:29.200 --> 00:42:32.400
then either the source
or the encoded file,

00:42:32.400 --> 00:42:35.380
then the other file,
and then they ask you to rate

00:42:35.530 --> 00:42:39.430
the files from a scale of 1 to 5,
5 being indistinguishable

00:42:39.510 --> 00:42:42.790
from the source,
1 being unlistenable, basically.

00:42:42.950 --> 00:42:48.080
And they used trained audio
professionals who were briefed on

00:42:48.080 --> 00:42:53.720
how to pick out encoder or audio
artifacts within encoded files.

00:42:53.820 --> 00:42:56.800
And they determined that
AAC is pretty darn good,

00:42:56.800 --> 00:42:58.650
and it's a heck of a lot better than MP3.

00:42:58.800 --> 00:43:02.670
Now, the results, we have AAC in red,
and the MP3 in green,

00:43:02.670 --> 00:43:05.540
and you want to be as
close to zero as possible,

00:43:05.540 --> 00:43:09.550
because that zero would mean you
couldn't tell the difference.

00:43:09.800 --> 00:43:11.800
And we were saying
it's indistinguishable.

00:43:11.800 --> 00:43:14.780
And we were saying it's indistinguishable
at 96 kilobits per second,

00:43:14.900 --> 00:43:16.800
or, blah, per second per channel.

00:43:16.800 --> 00:43:20.800
And this is a graph of 64
kilobits per second per channel.

00:43:20.800 --> 00:43:22.640
This is a more consumer-grade encoder.

00:43:22.800 --> 00:43:27.610
And you can see AAC is, in general,
pretty well, does pretty well.

00:43:28.070 --> 00:43:31.800
Castanets, for instance,
pretty much can't tell the difference.

00:43:31.910 --> 00:43:34.800
Harpsichord, pretty darn close.

00:43:34.800 --> 00:43:38.790
And for those of us of Scottish descent,
bagpipes didn't do too well.

00:43:38.800 --> 00:43:40.800
But still better, much better than MP3.

00:43:40.800 --> 00:43:42.680
MP3.

00:43:43.330 --> 00:43:45.530
These aren't the only results out there.

00:43:45.540 --> 00:43:48.870
If you'd like, you can go out on the web,
you can take a look for this,

00:43:48.980 --> 00:43:50.990
and they will basically
conclude the same thing.

00:43:51.130 --> 00:43:52.400
There's plenty of surveys out there.

00:43:52.400 --> 00:43:54.600
I encourage you to just investigate this.

00:43:54.640 --> 00:43:58.080
I think you will find
that AAC is the way to go.

00:43:59.080 --> 00:44:01.450
Okay, now I'm going to give you
a little bit of a demo.

00:44:01.800 --> 00:44:04.560
So, demo two please.

00:44:07.380 --> 00:44:12.700
We have here a one-minute
AIF ripped directly from CD,

00:44:12.940 --> 00:44:15.550
and I'll just play it
a little bit for you.

00:44:17.790 --> 00:44:19.330
Can we have the sound up a little,
please?

00:44:19.340 --> 00:44:21.160
Thank you.

00:44:21.320 --> 00:44:25.690
Okay, and we're going to,
I'm going to show you how to export this.

00:44:25.780 --> 00:44:30.370
So go to Export, and we will first export
to a QuickTime movie.

00:44:31.210 --> 00:44:34.460
We'll look at options,
and then we'll take our settings.

00:44:34.550 --> 00:44:39.340
Notice we're just doing MPEG-4 audio,
you know, 44.1, the settings.

00:44:39.500 --> 00:44:41.730
This brings up the standard
QuickTime audio dialog,

00:44:41.820 --> 00:44:44.740
but there's an important
note to make here,

00:44:44.910 --> 00:44:45.860
and that's the rate.

00:44:46.010 --> 00:44:47.760
Normally you think of
this as the output rate.

00:44:47.760 --> 00:44:48.240
This isn't.

00:44:48.350 --> 00:44:50.040
It's the input rate.

00:44:50.150 --> 00:44:53.590
And we can choose 44.1 or 48.

00:44:53.760 --> 00:44:59.630
This is especially important
when I have material that,

00:44:59.630 --> 00:45:03.000
you know, whatever sample rate it is,
I want to get,

00:45:03.020 --> 00:45:05.840
choose an input rate that's
as close as possible,

00:45:05.970 --> 00:45:10.100
or an even multiple of my sample,
of my source.

00:45:10.250 --> 00:45:13.350
And so if I had a 2205 sampling
rate on my source file,

00:45:13.500 --> 00:45:15.480
I'd want to choose 44.1.

00:45:15.650 --> 00:45:18.200
If I had a 16, I'd want to choose 48.

00:45:18.600 --> 00:45:21.960
Yes, QuickTime will upsample to
whatever you tell it to do,

00:45:22.260 --> 00:45:23.560
but we want to reduce artifacts.

00:45:23.650 --> 00:45:25.910
as much as possible.

00:45:26.030 --> 00:45:28.250
Then we have our options.

00:45:28.500 --> 00:45:48.400
[Transcript missing]

00:45:49.630 --> 00:45:52.400
And we'll just save this.

00:45:52.400 --> 00:45:54.940
And we're going to replace
the one we have there.

00:45:54.940 --> 00:45:58.190
And this is one minute of audio,
and you can see how

00:45:58.390 --> 00:46:00.000
fast this is encoding.

00:46:00.000 --> 00:46:02.710
This is a very fast encoder.

00:46:02.710 --> 00:46:11.240
We're done.

00:46:11.240 --> 00:46:11.530
And that was about at 8:1.

00:46:11.530 --> 00:46:11.890
So it is a nice, fast encoder as well.

00:46:11.900 --> 00:46:12.360
And let's just open that out.

00:46:13.170 --> 00:46:15.600
Okay, that was the move.

00:46:15.610 --> 00:46:17.100
All right.

00:46:17.100 --> 00:46:20.100
Now, we're going to export this.

00:46:20.100 --> 00:46:23.780
We're going to export
this as an MPEG-4 file.

00:46:25.000 --> 00:46:26.750
We'll hit our options.

00:46:26.750 --> 00:46:31.990
And as Thomas showed you earlier,
here's our MPEG-4 export dialog.

00:46:32.000 --> 00:46:34.240
And we're going to do audio,
we're going to do pass-through.

00:46:34.240 --> 00:46:37.860
Because we've already encoded the data,
the audio data in a movie or an

00:46:37.990 --> 00:46:40.230
MPEG-4 file is exactly the same.

00:46:40.380 --> 00:46:42.280
It's an important thing to note.

00:46:42.280 --> 00:46:44.230
So we don't really want to
re-encode the file at all.

00:46:44.240 --> 00:46:47.630
We just want to export it to
MPEG-4 for different uses.

00:46:47.850 --> 00:46:49.810
And so there's no need
to even go through this,

00:46:49.860 --> 00:46:52.900
but here's our, again,
audio track is passed through.

00:46:52.910 --> 00:46:54.880
So we click OK.

00:46:55.900 --> 00:47:07.300
[Transcript missing]

00:47:09.960 --> 00:47:14.220
Just realized I didn't
start the other one.

00:47:14.220 --> 00:47:16.890
That's our move.

00:47:17.000 --> 00:47:20.900
Here's our AIF.

00:47:20.980 --> 00:47:23.900
A little bit off, but hey.

00:47:23.900 --> 00:47:24.900
Okay.

00:47:24.900 --> 00:47:28.710
That's enough for now.

00:47:28.970 --> 00:47:30.690
Slides, please.

00:47:38.200 --> 00:47:40.200
Okay, and a quick AAC recap.

00:47:40.400 --> 00:47:44.050
Again, we believe AAC is a
high-quality audio codec.

00:47:44.370 --> 00:47:47.040
This is what we're going to
be doing for quite some time.

00:47:47.310 --> 00:47:48.800
We feel this is the future.

00:47:48.890 --> 00:47:52.060
It's available in QuickTime 6,
it is on your Jaguar CD,

00:47:52.450 --> 00:47:56.040
and it can be used in
both movies and MP4 files.

00:47:56.660 --> 00:48:01.300
Thank you, and here's Jesse Hammons
to summarize things.

00:48:09.400 --> 00:48:10.690
Thanks, Eric.

00:48:10.740 --> 00:48:13.400
So we heard a little bit
about the audio codec.

00:48:13.400 --> 00:48:16.470
Got some details on the video codec.

00:48:16.690 --> 00:48:16.690
I just want to go over

00:48:16.900 --> 00:48:23.340
General Notes about MPEG-4:
MP4 gives you a wider audience than

00:48:23.340 --> 00:48:25.500
you ever had with QuickTime before.

00:48:25.500 --> 00:48:28.160
These MP4 files are going
to be playable by all the

00:48:28.160 --> 00:48:32.950
organizations I talked about before:
the Internet Streaming Media Alliance,

00:48:33.090 --> 00:48:33.720
3GPP.

00:48:33.720 --> 00:48:35.620
We've actually done interop
with those companies.

00:48:35.620 --> 00:48:39.000
We give them their files,
they give us our files.

00:48:39.000 --> 00:48:42.510
We make sure that they open and play
back with adequate quality so you

00:48:42.590 --> 00:48:44.550
don't have to deal with those issues.

00:48:44.590 --> 00:48:47.750
I had a developer come
up to me with a concern.

00:48:47.750 --> 00:48:50.770
He said, "I'm concerned that QuickTime is
going to settle for a lowest common

00:48:50.770 --> 00:48:52.600
denominator here." No chance.

00:48:52.670 --> 00:48:55.900
Okay, we're not getting rid of any of the
QuickTime features that you like.

00:48:55.900 --> 00:48:59.190
We're adding additional functionality
that gets you a wider audience.

00:48:59.190 --> 00:49:02.750
We're ensuring in this interop that
with the gamma correction and all

00:49:02.750 --> 00:49:08.540
these other things that these files
play back in a high quality way.

00:49:08.960 --> 00:49:14.660
We've got a new video codec for you,
new audio codec.

00:49:14.820 --> 00:49:18.660
Both of these codecs have driven
enhanced features in QuickTime,

00:49:18.660 --> 00:49:22.270
enhanced audio processing,
enhanced video processing.

00:49:22.540 --> 00:49:25.380
But perhaps the coolest thing
you should take away from this

00:49:25.590 --> 00:49:28.500
talk is right here in my hands,
three CDs.

00:49:28.610 --> 00:49:29.940
It's called the Jaguar Developer Preview.

00:49:29.940 --> 00:49:31.610
We made this just for you.

00:49:31.700 --> 00:49:35.160
QuickTime and MPEG-4 has been in
the headlines for the past year.

00:49:35.270 --> 00:49:38.360
And we made this preview for
your developers so you guys can

00:49:38.480 --> 00:49:41.270
stop taking our word for it and
check it out for yourselves.

00:49:41.320 --> 00:49:44.410
We've been getting compliments from
the MPEG committee and we want to get

00:49:44.730 --> 00:49:46.840
feedback and comments from you as well.

00:49:46.950 --> 00:49:47.860
So install that.

00:49:48.030 --> 00:49:49.690
You get the latest QuickTime.

00:49:50.140 --> 00:49:54.060
and the SDK, you can make applications
right now on those CDs.

00:49:54.150 --> 00:49:57.480
MPEG-4 import and export with a
pass-through as we demoed to you.

00:49:57.610 --> 00:50:01.350
So you can take MP4 files from
other MP4 implementations and

00:50:01.350 --> 00:50:03.080
see how they work with QuickTime.

00:50:03.170 --> 00:50:06.230
We've got the new video
and audio codecs on the CD.

00:50:06.340 --> 00:50:12.610
You can go pro with the player with
your 5-0 key or write your own exporter.

00:50:12.620 --> 00:50:13.500
I showed you how to do it.

00:50:13.500 --> 00:50:15.210
It's only four lines of code.

00:50:15.300 --> 00:50:18.770
And the Jaguar server seed,
if you install that, you're going to get

00:50:18.770 --> 00:50:20.700
QuickTime streaming server 4.

00:50:20.800 --> 00:50:25.570
That's got the MP4 file export
-- or that streams MP4 files,

00:50:25.570 --> 00:50:26.560
as I mentioned.

00:50:26.670 --> 00:50:29.980
And the QuickTime broadcaster,
a lot of good feedback on that.

00:50:30.090 --> 00:50:33.970
The ability to stream
MP4 over the Internet.

00:50:34.070 --> 00:50:39.770
I think we want you to check that
out and give us some feedback.

00:50:40.170 --> 00:50:43.700
Like I said, MPEG-4,
it's only getting bigger.

00:50:43.700 --> 00:50:45.240
It's a rapidly emerging standard.

00:50:45.300 --> 00:50:49.310
A lot of companies are
getting involved in it.

00:50:49.760 --> 00:50:52.380
QuickTime's latest audio and video codec.

00:50:52.380 --> 00:50:56.570
And QuickTime applications
are now MPEG-4 applications.

00:50:56.600 --> 00:50:58.860
So again,
we showed you that with Final Cut.

00:50:58.990 --> 00:51:02.460
All your applications running on Jaguar,
if you get them running

00:51:02.550 --> 00:51:04.920
on that Jaguar CD,
will be able to import

00:51:05.010 --> 00:51:06.550
and export MPEG-4 files.

00:51:07.260 --> 00:51:09.420
We think that's pretty cool.

00:51:09.500 --> 00:51:13.670
I mean, that's going to be a good
feature for your users and

00:51:14.090 --> 00:51:18.650
allow their media presentations
to have a wider distribution.

00:51:19.440 --> 00:51:21.260
So finally,
if you have questions about this

00:51:21.410 --> 00:51:24.240
talk or anything about QuickTime,
go ahead and check out the

00:51:24.240 --> 00:51:27.000
QuickTime Developer Rations website.

00:51:27.000 --> 00:51:28.790
If you want to become a
QuickTime Developer seed,

00:51:28.810 --> 00:51:31.440
we have some contact information there.

00:51:31.570 --> 00:51:35.990
Jeff Lowe is our QuickTime evangelist.

00:51:36.120 --> 00:51:38.210
Grab his email address.

00:51:38.230 --> 00:51:42.530
We're going to put up some URLs here
in case you have information

00:51:42.770 --> 00:51:48.200
specifically about the QuickTime SDK or
that new audio architecture SDK.

00:51:48.330 --> 00:51:51.350
And if you have any questions about
the Internet Streaming Media Alliance,

00:51:51.670 --> 00:51:56.200
that's the website to go to: www.isma.tv.

00:51:56.200 --> 00:52:01.090
And that will also point you to the
MPEG website in case you want to get that

00:52:01.140 --> 00:52:04.200
really detailed information about MPEG.

00:52:04.280 --> 00:52:06.170
If you have any questions,
we're going to be out and back.

00:52:06.210 --> 00:52:08.170
We don't have time for Q&A,
but thank you very much.