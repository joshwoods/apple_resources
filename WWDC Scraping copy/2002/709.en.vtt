WEBVTT

00:00:01.210 --> 00:00:03.100
Welcome back, everybody.

00:00:03.100 --> 00:00:09.990
It is my pleasure to
introduce Christopher Friesen.

00:00:19.120 --> 00:00:23.560
Good morning, and welcome to session 709,
Deploying WebObjects Applications.

00:00:23.560 --> 00:00:27.860
Let's see what we're going to cover
in this session in the next hour.

00:00:28.690 --> 00:00:31.420
First we're going to do
a deployment overview.

00:00:31.510 --> 00:00:35.650
Then we'll talk about configuring
your WebObjects deployment.

00:00:35.750 --> 00:00:38.150
And then we'll go on
to system monitoring.

00:00:38.590 --> 00:00:42.530
Cover typical deployment,
and then take your questions and answers.

00:00:44.800 --> 00:00:48.860
Here we have the basic architecture
of a WebObjects deployment.

00:00:48.960 --> 00:00:52.480
You can see at the top,
we have your client that's going to

00:00:52.480 --> 00:00:55.770
make a request to your HTTP server.

00:00:56.000 --> 00:01:00.740
Your HTTP server will then forward that
request to your WebObjects application,

00:01:00.750 --> 00:01:03.660
which will then create
the dynamic content,

00:01:03.770 --> 00:01:06.330
usually using data in your
persistent data store,

00:01:06.390 --> 00:01:09.170
which is your database.

00:01:09.320 --> 00:01:13.170
That request will then be
returned back to the client.

00:01:13.280 --> 00:01:16.190
Usually on your development system,
you might have all this

00:01:16.200 --> 00:01:18.590
running on one machine.

00:01:18.710 --> 00:01:21.980
But for a good WebObjects deployment,
you'll often have each of these

00:01:22.080 --> 00:01:25.070
pieces on a completely separate host.

00:01:27.690 --> 00:01:31.880
Here we have the deployment
architecture in more detail.

00:01:31.990 --> 00:01:34.940
In the upper left,
you have the client browser,

00:01:35.050 --> 00:01:39.110
which is making a request
to your HTTP server.

00:01:39.370 --> 00:01:42.100
On the HTTP server,
we have this piece of code

00:01:42.210 --> 00:01:45.560
that knows how to recognize,
it knows what to do with

00:01:45.560 --> 00:01:49.600
your WebObjects requests,
with requests to your client requests

00:01:49.660 --> 00:01:52.240
to your WebObjects application.

00:01:52.240 --> 00:01:55.060
This piece of code is called
the WebObjects adapter.

00:01:55.150 --> 00:01:57.210
It's not really purple.

00:01:59.960 --> 00:02:03.460
And it will go ahead and figure
out that the request is going to a

00:02:03.460 --> 00:02:08.220
specific WebObjects instance and send
it on to your killer application.

00:02:08.300 --> 00:02:12.210
Your application will create the
dynamic response using your database

00:02:12.640 --> 00:02:15.770
and then return it back to the client.

00:02:17.810 --> 00:02:21.330
There are two basic deployment
methods for a WebObjects application.

00:02:21.420 --> 00:02:24.760
You have your standard WebObjects
application that you're used to writing,

00:02:24.770 --> 00:02:28.320
and you can now use
JSP and servlet containers.

00:02:28.530 --> 00:02:31.620
Your standard WebObjects application
has the benefit that you can

00:02:31.620 --> 00:02:36.140
use our monitor and Wotacity
for managing your deployment.

00:02:36.250 --> 00:02:38.960
This lets you deploy multiple
instances of your applications

00:02:39.320 --> 00:02:41.700
across multiple hosts.

00:02:42.400 --> 00:02:44.740
and it lets you use the
WebObjects HTTP adapter,

00:02:44.800 --> 00:02:47.410
which has some benefits we'll talk about.

00:02:48.710 --> 00:02:53.380
For deploying using JSP and servlets,
you can use--we've tested

00:02:53.380 --> 00:02:55.130
Tomcat and WebLogic.

00:02:55.230 --> 00:02:58.230
Now,
when you use those servlet containers,

00:02:58.370 --> 00:03:01.200
you'll have to use
their management tools.

00:03:01.790 --> 00:03:04.840
So you won't be able to
use monitor and lotacity,

00:03:04.840 --> 00:03:09.570
and you won't be going through
the WebObjects HTTP adapter.

00:03:10.650 --> 00:03:13.500
And for more information on
JSP and server-led integration,

00:03:13.510 --> 00:03:17.100
you should see session 7.10,
which is in this same room after lunch.

00:03:20.190 --> 00:03:23.890
Now when you deploy your WebObjects
application using the HTTP adapter,

00:03:23.920 --> 00:03:28.410
you usually end up with what
is called a split installation.

00:03:28.620 --> 00:03:31.900
The split installation gives
you public and private resources

00:03:31.900 --> 00:03:33.020
in two different places.

00:03:35.070 --> 00:03:39.860
You'll have public resources on your
HTTP server in your document root.

00:03:39.860 --> 00:03:45.690
This will include things like images,
sounds, and your client side Java.

00:03:45.810 --> 00:03:49.290
Generally things that it's
okay if people get to if your

00:03:49.390 --> 00:03:54.510
HTTP server is misconfigured and
your document root gets raided.

00:03:55.270 --> 00:03:58.940
Now you have more important things,
like your executable,

00:03:59.040 --> 00:04:03.170
your business logic, your important data,
and server-side Java.

00:04:03.340 --> 00:04:05.790
That can all live on your
application server host,

00:04:05.790 --> 00:04:09.020
and this is called
your private resources.

00:04:11.470 --> 00:04:16.100
Now let's talk about some deployment
details for your WebObjects deployment.

00:04:16.130 --> 00:04:20.260
The supported operating systems
are Mac OS X Server 10.1,

00:04:20.360 --> 00:04:24.160
Windows 2000 Server, and Solaris 2.8.

00:04:24.170 --> 00:04:28.480
And these all require
JRE of 131 or higher.

00:04:30.730 --> 00:04:33.590
Now, if you read through some of
the WebObjects mailing lists,

00:04:33.590 --> 00:04:37.100
you'll see that some people have
gotten it to run on Linux and FreeBSD,

00:04:37.250 --> 00:04:41.510
but you'll need to ask them what
exactly they did to configure that.

00:04:42.870 --> 00:04:45.240
There are some hardware considerations
for your WebObjects deployment.

00:04:45.240 --> 00:04:48.300
You need to consider the
processor capability.

00:04:50.170 --> 00:04:53.600
What sort of--you need to consider what
sort of application you're writing,

00:04:53.600 --> 00:04:57.750
how much data you're pushing out,
whether or not you can run this on

00:04:57.750 --> 00:05:02.200
a PDA running Linux and a 131 JVM,
or if you're going to

00:05:02.200 --> 00:05:04.490
need a dual processor G4.

00:05:05.760 --> 00:05:08.200
need to consider the
number of processors.

00:05:08.330 --> 00:05:10.360
You can have many
processors in one big box,

00:05:10.380 --> 00:05:13.660
or you can have many boxes with
fewer numbers of processors.

00:05:13.660 --> 00:05:16.300
There's some advantages
and disadvantages to both.

00:05:18.210 --> 00:05:22.100
And then you need to consider the amount
of RAM you need to run your application.

00:05:22.200 --> 00:05:24.930
You want your application
to run all in memory.

00:05:24.990 --> 00:05:30.000
You don't want to be paging to disk
because of the large performance hit.

00:05:31.200 --> 00:05:35.690
And then you need to consider the
disk space for the installation,

00:05:35.690 --> 00:05:39.090
log files, and possibly your data.

00:05:39.420 --> 00:05:41.340
and finally redundancy.

00:05:41.340 --> 00:05:44.640
If you have multiple machines,
it's easier to switch

00:05:44.740 --> 00:05:45.620
a machine in and out.

00:05:45.730 --> 00:05:48.340
If you've got one big box,
often the redundancy is built

00:05:48.340 --> 00:05:49.820
into that one big machine.

00:05:49.960 --> 00:05:55.160
They often have multiple power supplies
and ways you can hot swap power supplies,

00:05:55.160 --> 00:05:57.240
fans, hard drives, things like that.

00:05:59.980 --> 00:06:02.740
There are location considerations
for your deployment.

00:06:02.850 --> 00:06:05.190
What sort of network
capacity do they have?

00:06:05.280 --> 00:06:09.100
You need to consider what
network capacity you need.

00:06:09.180 --> 00:06:11.860
If you're going to be selling
software over the Web,

00:06:11.860 --> 00:06:18.210
you're going to be pushing a
lot of data through that pipe.

00:06:18.210 --> 00:06:19.290
You need to make sure that you can
handle the client requests at the

00:06:19.290 --> 00:06:19.290
same time that you're serving content.

00:06:19.860 --> 00:06:21.510
Network security.

00:06:21.530 --> 00:06:24.780
Is your deployment site,
do they have firewalls already?

00:06:24.840 --> 00:06:26.280
Or do you need to get your own firewalls?

00:06:26.360 --> 00:06:28.070
Are you going to have to configure them?

00:06:28.220 --> 00:06:30.350
What ports are

00:06:30.800 --> 00:06:32.270
Physical security.

00:06:32.370 --> 00:06:35.080
This is your important data,
your expensive hardware.

00:06:35.140 --> 00:06:36.780
Is somebody locking this stuff up?

00:06:36.780 --> 00:06:37.950
Is somebody watching it?

00:06:38.190 --> 00:06:40.040
Or is somebody going to be
able to walk away with it?

00:06:42.710 --> 00:06:45.040
And then you have temperature control.

00:06:45.080 --> 00:06:47.410
I'm sure you've been in
computer rooms that may or may

00:06:47.410 --> 00:06:49.250
not have temperature control.

00:06:49.250 --> 00:06:50.560
They get pretty hot.

00:06:50.690 --> 00:06:52.770
So your computers don't like to run hot.

00:06:52.800 --> 00:06:57.820
It'll actually save them if you run them
in a temperature controlled environment.

00:06:57.910 --> 00:07:01.280
And then last,
your uninterruptible power supply.

00:07:01.740 --> 00:07:03.730
If you've signed a
contract with a client,

00:07:03.730 --> 00:07:05.270
you need to be up 24 by 7.

00:07:05.410 --> 00:07:08.320
You might have to look
into getting a generator.

00:07:08.320 --> 00:07:11.890
If you just need enough power to shut
down your machines so that you can bring

00:07:11.890 --> 00:07:14.720
them up once the power comes back on,
you still need to calculate

00:07:14.720 --> 00:07:18.140
how much power you need to
get around all those machines.

00:07:20.470 --> 00:07:23.500
There's some administrative
considerations.

00:07:23.500 --> 00:07:26.500
What accounts are your
applications going to run as?

00:07:26.550 --> 00:07:29.350
You don't really want them
to be running as root.

00:07:29.970 --> 00:07:31.740
Your application logging.

00:07:31.810 --> 00:07:34.280
How much application
logging will you be doing?

00:07:34.340 --> 00:07:37.230
You may want to do some when you first
deploy so that if there are any problems,

00:07:37.230 --> 00:07:39.830
then you'll have the
logs there immediately.

00:07:39.890 --> 00:07:42.500
But that can start to eat
up a lot of disk space.

00:07:42.910 --> 00:07:44.960
And the last is access control.

00:07:45.060 --> 00:07:48.000
How are you going to access those
machines so you can manage them?

00:07:48.000 --> 00:07:51.110
Are you going to be on site,
or do you need a secure

00:07:51.110 --> 00:07:52.910
remote connection?

00:07:55.450 --> 00:07:57.680
What do you control with your deployment?

00:07:57.760 --> 00:08:00.450
Well,
you can control the WebObjects adapter.

00:08:00.550 --> 00:08:05.720
You can control settings like
socket timeouts and the type of

00:08:05.720 --> 00:08:07.560
load balancing that you've chosen.

00:08:07.640 --> 00:08:10.130
You can also configure the
WebObjects adapter yourself because

00:08:10.130 --> 00:08:11.360
we give you the C source code.

00:08:15.500 --> 00:08:17.060
Next is your application.

00:08:17.170 --> 00:08:18.840
You're writing your application.

00:08:18.930 --> 00:08:21.600
You need it to provide a
certain service to your clients.

00:08:21.600 --> 00:08:24.930
If you choose the wrong algorithms,
that can adversely affect the

00:08:24.930 --> 00:08:26.110
performance of your application.

00:08:28.790 --> 00:08:31.340
And last is your database.

00:08:31.450 --> 00:08:33.660
You choose which database
you're deploying with.

00:08:33.740 --> 00:08:35.490
They have different performance.

00:08:35.590 --> 00:08:38.610
It also depends on what
hardware you deploy it on.

00:08:41.400 --> 00:08:45.430
So again, the WebObjects adapter,
it forwards requests from the WebObjects,

00:08:45.520 --> 00:08:49.080
from the client to the
WebObjects applications.

00:08:49.110 --> 00:08:50.050
What does it do for you?

00:08:50.070 --> 00:08:52.180
Well, it gives you better performance.

00:08:52.190 --> 00:08:55.440
With the split installation,
public files, like images and things,

00:08:55.470 --> 00:08:57.550
can be served directly
from the web server.

00:08:57.550 --> 00:09:01.770
You don't have to make that extra
round trip to your application server.

00:09:02.140 --> 00:09:04.200
You also get better performance
because the WebObjects

00:09:04.200 --> 00:09:06.960
adapter does load balancing.

00:09:06.970 --> 00:09:09.970
So that means you can have
multiple application instances

00:09:09.980 --> 00:09:14.600
deployed across multiple machines,
or even into one large machine.

00:09:15.350 --> 00:09:18.400
You have validation of client requests.

00:09:18.570 --> 00:09:22.230
The WebObjects adapter makes sure
that the request is well formed so

00:09:22.520 --> 00:09:26.110
that your WebObjects application
doesn't have to deal with that.

00:09:26.290 --> 00:09:29.680
and finally security
with split installation,

00:09:29.680 --> 00:09:31.510
public resources,

00:09:32.060 --> 00:09:34.940
Your private resources are
on your application server,

00:09:35.060 --> 00:09:37.880
and they aren't in your document root,
where misconfiguration of the

00:09:37.880 --> 00:09:40.730
HTTP server can make them vulnerable.

00:09:42.320 --> 00:09:45.440
There are two basic types
of WebObjects adapter.

00:09:45.610 --> 00:09:48.000
There's CGI and API.

00:09:48.100 --> 00:09:52.410
The CGI adapter works everywhere,
but it's slow because it requires

00:09:52.410 --> 00:09:56.020
forking a process for each request.

00:09:56.130 --> 00:09:59.950
And on Windows,
there's no load balancing using CGI,

00:09:59.950 --> 00:10:02.420
using our CGI adapter anyway.

00:10:02.530 --> 00:10:06.680
With API, it's faster,
but you can only use it

00:10:06.680 --> 00:10:12.020
with specific HTTP servers,
such as Apache, NSAPI, and ISAPI.

00:10:12.240 --> 00:10:15.560
And it supports load
balancing on all platforms.

00:10:15.560 --> 00:10:17.690
As I said earlier,
we give you the C source code.

00:10:17.690 --> 00:10:21.260
So if you need to change
the load balancing scheme,

00:10:21.280 --> 00:10:22.070
you can do that.

00:10:22.120 --> 00:10:26.080
All you need to do is recompile
and then redeploy that plug-in.

00:10:27.780 --> 00:10:30.760
Here's a matrix of the
supported platforms and

00:10:30.760 --> 00:10:36.140
supported HTTP server adapters.

00:10:36.210 --> 00:10:41.200
So we see that Mac OS X Server and
Solaris both support Apache.

00:10:41.600 --> 00:10:45.620
Solaris supports the NSAPI adapter,
and Windows 2000 Server supports

00:10:45.790 --> 00:10:46.830
the ISAPI adapter.

00:10:46.860 --> 00:10:51.410
And all three platforms
support the CGI adapter.

00:10:52.570 --> 00:10:54.480
So what is load balancing?

00:10:54.560 --> 00:10:56.920
Well, it's the distribution of client
requests between multiple

00:10:56.920 --> 00:10:59.690
instances of your applications.

00:10:59.980 --> 00:11:03.240
So the first time a client makes
a request to your application,

00:11:03.240 --> 00:11:06.320
WebObjects adapter will notice that
you haven't started a session on a

00:11:06.320 --> 00:11:09.060
particular instance of your application.

00:11:09.240 --> 00:11:13.260
So that'll then get load balanced using
one of the three types of load balancing.

00:11:13.340 --> 00:11:15.880
The first is random,
which is pseudo-random.

00:11:15.920 --> 00:11:19.800
It's difficult to get completely random,
but it should be good enough.

00:11:20.240 --> 00:11:22.240
The second is round robin,
which is taking turns.

00:11:22.240 --> 00:11:26.420
So if you have four instances,
the first request to go to instance one,

00:11:26.420 --> 00:11:29.930
then two, three, then four,
then back to one.

00:11:31.410 --> 00:11:33.640
And the last is load average.

00:11:33.730 --> 00:11:38.190
And what it attempts to do is measure
the load of your applications by

00:11:38.190 --> 00:11:42.400
the number of sessions that are
running on each application instance.

00:11:42.400 --> 00:11:44.640
And you can change that by
changing the source code.

00:11:44.640 --> 00:11:47.030
So if you have a different scheme
you think might work better,

00:11:47.160 --> 00:11:48.400
then you can do that.

00:11:48.420 --> 00:11:51.430
Most big sites seem to find that
using random works the best.

00:11:54.680 --> 00:11:58.320
So here's an overview of what's
happening with the adapter.

00:11:58.380 --> 00:12:00.420
Your client browser is making a request.

00:12:00.500 --> 00:12:02.590
It already has a session.

00:12:05.700 --> 00:12:08.500
That request is received
by your HTTP server.

00:12:08.600 --> 00:12:12.900
It notices that it's a request to a
WebObjects application and is configured

00:12:12.900 --> 00:12:18.010
to handle-- configured to pass that
to the WebObjects adapter to be handled.

00:12:19.080 --> 00:12:23.050
WebObjects adapter notices that
it's a request to killer app,

00:12:23.050 --> 00:12:24.950
instance number two.

00:12:25.090 --> 00:12:28.000
WebObjects adapter then looks
up in its host configuration and

00:12:28.000 --> 00:12:37.730
sees that KillerApp instance 2 is
running on host omega port 4002.

00:12:42.240 --> 00:12:47.370
WebObjects Adapter then forwards
that request to that particular

00:12:47.370 --> 00:12:50.410
instance running on host omega.

00:12:50.730 --> 00:12:55.750
where the instance then processes the
request and passes it back to the client.

00:12:56.880 --> 00:12:58.940
The adapter site config.

00:12:58.950 --> 00:13:02.270
It maps the application name and
instance ID to an application

00:13:02.270 --> 00:13:04.140
server and port number.

00:13:04.160 --> 00:13:06.740
So as you saw,
KillerApp instance one and two

00:13:06.740 --> 00:13:11.810
are both running on host omega,
port 4001 and 4002.

00:13:11.810 --> 00:13:16.000
KillerApp instance three and
four are running on host gamma,

00:13:16.140 --> 00:13:18.780
ports 4001 and 4002.

00:13:18.840 --> 00:13:22.910
The same port numbers are okay because
they're completely separate hosts.

00:13:23.210 --> 00:13:26.690
The additional options that it keeps
track of are the load balancing types

00:13:26.850 --> 00:13:30.290
configured for those applications and
the number of persistent connections

00:13:30.640 --> 00:13:33.080
allowed to that application.

00:13:33.580 --> 00:13:36.000
There are also socket options
that it keeps track of.

00:13:36.030 --> 00:13:38.630
You can set buffer sizes
and socket timeouts,

00:13:38.690 --> 00:13:40.600
like we talked about.

00:13:41.680 --> 00:13:45.000
There are three basic ways to
configure the WebObjects adapter.

00:13:45.010 --> 00:13:47.160
The first is flat file.

00:13:47.420 --> 00:13:51.520
This is a URL to a file on the
file system of that machine

00:13:51.730 --> 00:13:53.940
running the WebObjects adapter.

00:13:53.970 --> 00:13:55.490
The second is host list.

00:13:55.550 --> 00:13:59.730
It's a list of hosts that it's going
to go out and talk to to find out what

00:13:59.810 --> 00:14:01.870
application instances are running.

00:14:02.050 --> 00:14:03.790
And the third is multicast.

00:14:03.790 --> 00:14:08.390
This is a dynamic way of finding
out which hosts are available,

00:14:08.480 --> 00:14:12.290
which hosts are hosting
WebObjects applications.

00:14:13.040 --> 00:14:15.960
This information is
updated every 10 seconds.

00:14:15.960 --> 00:14:18.950
So the adapter tries to--should
figure out that you've started

00:14:18.950 --> 00:14:23.490
up a new instance on one of your
application servers within 10 seconds.

00:14:24.240 --> 00:14:25.800
The flat file configuration.

00:14:25.850 --> 00:14:27.580
It's in XML format.

00:14:27.580 --> 00:14:30.680
There's a great example of how
to set it all up in the Deploying

00:14:30.680 --> 00:14:32.640
WebObjects Applications book.

00:14:32.720 --> 00:14:34.860
And here we see an example of the XML.

00:14:34.860 --> 00:14:38.270
See that there's an
application called KillerApp.

00:14:38.480 --> 00:14:40.840
The load balancing is round robin.

00:14:40.960 --> 00:14:43.060
The instance ID is 1.

00:14:43.140 --> 00:14:44.660
The host that it's running on is omega.

00:14:44.730 --> 00:14:48.100
And the port number is 4001
if you're talking to that

00:14:48.210 --> 00:14:50.430
particular application instance.

00:14:51.840 --> 00:14:54.520
The second is host list configuration.

00:14:54.540 --> 00:14:57.220
The adapter requests dynamic
configuration information from a

00:14:57.220 --> 00:14:59.990
list of hosts that you specify.

00:15:01.310 --> 00:15:05.860
This information is supplied by WOTASTI,
or the WebObjects task daemon.

00:15:05.940 --> 00:15:11.530
This information is supplied in the
same XML format as the flat file uses.

00:15:12.300 --> 00:15:15.200
And this allows the dynamic
addition of the application

00:15:15.200 --> 00:15:18.660
instances on the listed hosts.

00:15:18.900 --> 00:15:23.310
The default mechanism for the adapters
is a host list pointing to the local

00:15:23.500 --> 00:15:27.560
host and WoTasty running on port 1085.

00:15:29.300 --> 00:15:32.570
So let's look at how the
adapter and host list works.

00:15:32.660 --> 00:15:36.920
WebObjects adapter, in purple there,
and you have your two

00:15:36.920 --> 00:15:39.880
application servers,
omega and

00:15:40.700 --> 00:15:43.000
So your application instances start up.

00:15:43.000 --> 00:15:46.160
They send life beats to Wotasty
running on each machine,

00:15:46.160 --> 00:15:48.530
saying, I've just started.

00:15:50.830 --> 00:15:54.320
WebObjects adapter within 10 seconds.

00:15:54.430 --> 00:15:58.920
We'll look at its configuration and
see that it's configured for host list.

00:15:59.000 --> 00:16:04.010
It's supposed to talk to host, omega,
and gamma on port 1085.

00:16:04.770 --> 00:16:07.400
So it sends out two separate
requests to each host.

00:16:07.670 --> 00:16:12.120
Here it's drawn as one request,
but it's actually two.

00:16:12.340 --> 00:16:15.040
So it asks each Wotasty,
what application instances

00:16:15.040 --> 00:16:17.350
are running on your machine?

00:16:17.690 --> 00:16:20.440
They respond back,
and the WebObjects adapter then builds a

00:16:20.440 --> 00:16:23.800
list of the known application instances.

00:16:25.720 --> 00:16:27.900
The multicast configuration.

00:16:28.180 --> 00:16:31.550
Broadcast UDP to a specific
IP address and port number.

00:16:31.610 --> 00:16:36.630
In this case, the specific IP address
is a multicast address.

00:16:36.700 --> 00:16:40.650
This means that you can send out
a single packet and applications

00:16:40.650 --> 00:16:46.080
that are configured to listen on
the local subnet will hear that.

00:16:46.190 --> 00:16:50.410
Multicast is limited to the
local subnet by default.

00:16:50.490 --> 00:16:53.870
Most routers are configured
not to pass this information,

00:16:53.950 --> 00:16:57.190
and most system administrators
or IT departments won't want

00:16:57.190 --> 00:16:58.680
to configure it otherwise.

00:16:58.680 --> 00:17:00.920
That's probably for the best.

00:17:01.650 --> 00:17:05.720
This dynamically builds a list of the
available hosts running with hosties

00:17:05.800 --> 00:17:08.510
that respond to the multicast query.

00:17:09.270 --> 00:17:12.310
The configuration proceeds
exactly like host list,

00:17:12.330 --> 00:17:16.400
once it has the list
of application servers.

00:17:16.510 --> 00:17:19.500
The default host rediscovery
is every 100 seconds.

00:17:19.570 --> 00:17:24.530
It's actually ten times whatever you
set the default application instance,

00:17:24.630 --> 00:17:27.370
which was ten seconds previously.

00:17:28.650 --> 00:17:31.060
Let's look at how this works.

00:17:31.150 --> 00:17:35.210
So the adapter is
configured to do multicast.

00:17:35.300 --> 00:17:39.670
Your application instances start up and
register with Wotasty on their machines.

00:17:42.170 --> 00:17:44.560
WebObjects adapter sends
out a multicast query.

00:17:44.590 --> 00:17:46.310
It's one query out on the wire.

00:17:46.380 --> 00:17:51.440
And Wotacity has been configured on host,
omega, and gamma to respond to multicast.

00:17:51.440 --> 00:17:54.050
You have to explicitly do this
as it's turned off by default.

00:17:55.540 --> 00:17:59.820
I believe it's an option called
woe responds to multicat.

00:17:59.930 --> 00:18:00.120
No?

00:18:00.120 --> 00:18:02.490
I don't remember.

00:18:02.490 --> 00:18:02.500
Anyway.

00:18:02.500 --> 00:18:05.990
It's in the documentation.

00:18:06.620 --> 00:18:13.120
So, Wotasty will respond back and say,
"I'm available." WebObjects adapter

00:18:13.170 --> 00:18:17.790
then builds a dynamic list of which
hosts are available and listening.

00:18:18.310 --> 00:18:20.970
WebObjects Adapter then sends
out a separate query to each

00:18:20.970 --> 00:18:25.150
Wotacity running on those machines,
saying, what applications are running?

00:18:27.110 --> 00:18:34.030
It responds and builds the list of known
application instances that are running.

00:18:34.780 --> 00:18:35.540
Wotasty.

00:18:35.540 --> 00:18:38.670
It started at boot time on all platforms.

00:18:38.740 --> 00:18:42.700
It is watched over by another
process called Woservice.

00:18:42.760 --> 00:18:44.870
This is in case Wotasty crashes.

00:18:44.890 --> 00:18:50.030
Woservice will automatically restart
Wotasty so that your deployment stays up.

00:18:52.500 --> 00:18:55.680
It supplies the adapter with
dynamic configuration data.

00:18:55.700 --> 00:18:57.630
This is the XML data that we saw.

00:18:57.740 --> 00:19:00.560
And it's usually listening on port 1085.

00:19:00.560 --> 00:19:01.900
That's the default.

00:19:02.520 --> 00:19:07.000
and it registers running
instances on the same machine.

00:19:07.020 --> 00:19:11.350
It watches, cycles,
and restarts those configured instances.

00:19:11.740 --> 00:19:15.140
And it's configured using Monitor.

00:19:15.300 --> 00:19:16.340
What is Monitor?

00:19:16.500 --> 00:19:19.340
Monitor is a WebObjects application.

00:19:19.340 --> 00:19:22.540
It's basically the web
interface to Wotasty.

00:19:23.300 --> 00:19:26.160
It allows you to configure
application instances.

00:19:26.190 --> 00:19:28.900
You can configure them
across multiple hosts.

00:19:28.980 --> 00:19:33.630
And it lets you manage the scheduling
of those instances as well.

00:19:34.300 --> 00:19:37.470
and it lets you configure the
WebObjects adapter with various timeout

00:19:37.620 --> 00:19:43.340
settings and buffer settings and load
balancing schemes for each application.

00:19:43.740 --> 00:19:48.140
Monitor can be password protected
so other people cannot take

00:19:48.710 --> 00:19:51.860
control of your deployment,
but you should only be running

00:19:51.950 --> 00:19:53.250
one instance of monitor.

00:19:53.290 --> 00:19:57.540
If I run an instance of monitor and
say I want to configure applications

00:19:57.540 --> 00:20:00.940
on the host omega and somebody
else runs monitor and adds host

00:20:00.940 --> 00:20:04.150
omega as a host they want to manage,
then we'll be pushing two different

00:20:04.160 --> 00:20:06.860
configurations to the same machine.

00:20:09.520 --> 00:20:11.600
Instance scheduling.

00:20:11.640 --> 00:20:16.060
Each instance can be
scheduled independently.

00:20:16.060 --> 00:20:19.150
So, a scheduled instance is restarted
periodically by Wotasty.

00:20:20.510 --> 00:20:22.520
There are three types of scheduling.

00:20:22.520 --> 00:20:24.640
There's hourly, daily, and weekly.

00:20:24.640 --> 00:20:29.520
So you can choose an application instance
to restart once a week if you choose.

00:20:29.520 --> 00:20:32.930
And that's often useful if your
application has a memory leak

00:20:33.000 --> 00:20:36.890
or seems to perform better once
it's been restarted if it's been

00:20:36.890 --> 00:20:39.400
running for a period of time.

00:20:40.330 --> 00:20:43.390
Application instances can
be terminated immediately,

00:20:43.390 --> 00:20:46.730
which means that if the client
user has a session open on that

00:20:46.730 --> 00:20:50.920
particular application instance,
it'll get terminated.

00:20:51.380 --> 00:20:54.390
Now if you have session
storing back behind all that,

00:20:54.440 --> 00:20:58.620
which is an extra step,
then the user would be able to

00:20:58.620 --> 00:21:01.660
connect to a different instance
and get their session back.

00:21:01.660 --> 00:21:05.130
If you don't have that configured,
then you might want to go

00:21:05.190 --> 00:21:07.140
with graceful termination.

00:21:07.140 --> 00:21:10.450
What this does is it tells
the application instance to

00:21:10.460 --> 00:21:12.660
start refusing new sessions.

00:21:12.720 --> 00:21:15.840
So it'll continue to process
requests from clients that

00:21:15.840 --> 00:21:18.110
already have a session started.

00:21:18.400 --> 00:21:21.220
And then once all those people have
logged off of your application,

00:21:21.280 --> 00:21:24.660
or the sessions have timed out,
then your application

00:21:24.680 --> 00:21:26.590
instance will restart.

00:21:26.910 --> 00:21:29.390
And now we have Karl Hsu,
the wonderful Karl Hsu,

00:21:29.420 --> 00:21:31.710
up to give us a great demo.

00:21:37.550 --> 00:21:38.300
Good morning, everybody.

00:21:38.300 --> 00:21:41.860
So, all right.

00:21:43.300 --> 00:21:46.200
The first thing I'm going
to do is--and we are up.

00:21:46.220 --> 00:21:47.130
OK.

00:21:47.230 --> 00:21:51.050
I just want to double check
that Wotasty is running.

00:21:51.190 --> 00:21:57.530
Easy way to do this is to just hit
1085 and you'll get back Wotasty.

00:21:57.540 --> 00:22:00.720
So it'll tell you a bunch of
information and it'll tell you what

00:22:00.720 --> 00:22:05.480
its site configuration is and then
the various adapter configurations.

00:22:05.480 --> 00:22:10.340
So before we go into this actual demo,
I'm going to really quickly discuss this.

00:22:10.340 --> 00:22:13.340
In WebObjects,
we have fundamentally three

00:22:13.340 --> 00:22:15.510
different ways to hit an application.

00:22:15.720 --> 00:22:18.090
The basic way, which you use in
development all the time,

00:22:18.090 --> 00:22:19.220
is called direct connect.

00:22:19.280 --> 00:22:21.720
You're connecting directly to
the port that the application

00:22:21.720 --> 00:22:23.900
happens to be running on.

00:22:24.160 --> 00:22:28.290
When you deploy an application,
you're going through the web server.

00:22:28.360 --> 00:22:30.750
Chris mentioned a number of reasons
that you would want to do this:

00:22:30.750 --> 00:22:33.310
performance, security,
the fact that you can have

00:22:33.310 --> 00:22:37.400
multiple applications all
being accessed on port 80.

00:22:37.400 --> 00:22:39.060
And then you don't hit it
through the port number,

00:22:39.060 --> 00:22:42.490
or you hit it all through the port
number 80 through the web server.

00:22:42.610 --> 00:22:45.660
In WebObjects 5,
we added development instances where

00:22:45.670 --> 00:22:50.110
you can hit it through the web server,
but you're doing it in a way that

00:22:50.160 --> 00:22:52.600
it's not really publicly accessible.

00:22:52.600 --> 00:22:56.950
In order to access the instance,
you use a negative instance number.

00:22:57.180 --> 00:22:59.860
And it's not load balanced
along with the rest of them.

00:22:59.990 --> 00:23:02.000
This allows you to have
applications running,

00:23:02.000 --> 00:23:05.660
and you can test it through the web
server even if you're actually deploying

00:23:05.660 --> 00:23:09.210
other applications on that web server
and you don't have the problem with

00:23:09.210 --> 00:23:11.360
people accidentally getting to that app.

00:23:11.490 --> 00:23:12.560
All right.

00:23:12.820 --> 00:23:15.810
So let's start monitor.

00:23:18.300 --> 00:23:25.440
So while Monitor is starting,
you can see in the terminal

00:23:25.440 --> 00:23:29.790
window on the bottom right,
I'm inside of System Library WebObjects

00:23:29.900 --> 00:23:32.700
Adapter's Apache,
which is on Mac OS X,

00:23:32.830 --> 00:23:36.410
where you would configure the
Apache adapter by default.

00:23:39.150 --> 00:23:41.600
and what I'm going to do
is edit the Apache conf.

00:23:41.600 --> 00:23:45.590
The reason I'm doing this is because

00:23:46.260 --> 00:23:50.290
Later on, we want to be able to see
the WoW Adapter info page.

00:23:53.000 --> 00:23:54.210
Okay.

00:23:54.600 --> 00:23:59.310
The way we do this is by setting the
WebObjects admin username to public.

00:23:59.400 --> 00:24:01.480
And that will let us
take a look at it later.

00:24:01.480 --> 00:24:04.820
You can see down here that
you can actually set it to

00:24:04.820 --> 00:24:06.200
a username and password.

00:24:06.230 --> 00:24:08.770
You can pass it as a key value pair,
or a form value,

00:24:08.770 --> 00:24:12.340
whatever you want to call it,
on the command line.

00:24:13.480 --> 00:24:20.010
So up here, you can see the examples
that Chris had talked about.

00:24:20.180 --> 00:24:24.780
Our default configuration is
HTTP localhost 1085 with a

00:24:24.790 --> 00:24:26.720
refresh interval of 10 seconds.

00:24:26.810 --> 00:24:28.540
That's a standard.

00:24:28.970 --> 00:24:30.460
We have commented out examples for you.

00:24:30.460 --> 00:24:32.700
WebObjects configuration,
this is the multicast address

00:24:32.700 --> 00:24:34.780
which you saw earlier.

00:24:35.100 --> 00:24:38.400
And this is the file configuration
that you saw earlier.

00:24:38.550 --> 00:24:45.750
All right, so now that we've done that,
let's bounce the web server.

00:24:45.780 --> 00:24:47.350
Okay.

00:24:48.220 --> 00:24:49.690
All right, monitor's up.

00:24:49.830 --> 00:24:52.640
So monitor starts up and
you're totally blank.

00:24:52.760 --> 00:24:58.590
The first thing I'm going to do is I'm
going to give it the URL to the adapter.

00:25:02.600 --> 00:25:05.340
This doesn't actually do anything.

00:25:05.460 --> 00:25:11.740
What it does is it lets Monitor create
HTML or hyperlinks properly later on.

00:25:11.740 --> 00:25:12.340
It's useful.

00:25:12.340 --> 00:25:16.660
And the reason it doesn't really
do anything is because Monitor may

00:25:16.660 --> 00:25:19.730
not be monitoring apps that are
accessible through a web server.

00:25:19.820 --> 00:25:21.740
It could be monitoring
applications that are accessible

00:25:21.790 --> 00:25:23.060
through multiple web servers.

00:25:23.060 --> 00:25:24.040
It doesn't really know.

00:25:24.040 --> 00:25:25.800
So the two are actually independent.

00:25:25.800 --> 00:25:30.450
A side effect of this is that
just because you've configured

00:25:30.450 --> 00:25:34.480
an application in Monitor does
not mean that it's automatically

00:25:34.620 --> 00:25:36.240
accessible to your web server.

00:25:36.520 --> 00:25:40.720
Your web server only looks for
applications on localhost by default.

00:25:40.800 --> 00:25:43.840
So if I have hosts 1, 2, and 3,
and I configure

00:25:44.350 --> 00:25:47.770
applications on all of them,
web servers on host 1,

00:25:47.770 --> 00:25:50.800
it will only see applications on host 1.

00:25:50.800 --> 00:25:53.130
You have to explicitly point
it at the other hosts or you

00:25:53.400 --> 00:25:54.800
won't get to those instances.

00:25:54.800 --> 00:25:55.780
So that's the side effect of this.

00:25:55.840 --> 00:25:56.800
It's a common mistake.

00:25:56.800 --> 00:25:58.810
It's something to keep in mind.

00:25:59.730 --> 00:26:01.690
All right,
the first thing before we do anything

00:26:01.690 --> 00:26:03.090
else is we should add a host.

00:26:03.350 --> 00:26:10.090
I'm not going to try to type this
in because it's quite impressive,

00:26:10.090 --> 00:26:10.090
really.

00:26:12.000 --> 00:26:14.710
You can type this in as
a--you can try localhost.

00:26:14.880 --> 00:26:16.280
That works for a lot of deployments.

00:26:16.420 --> 00:26:19.390
I would not suggest it if
you have more than one host.

00:26:19.440 --> 00:26:23.500
Otherwise, all of the hosts will think
that they're localhost,

00:26:23.500 --> 00:26:26.390
and everything will go completely AWOL.

00:26:26.500 --> 00:26:29.260
In newer versions of monitor,
we prevent you from adding more

00:26:29.260 --> 00:26:31.500
hosts once you've added a localhost.

00:26:31.630 --> 00:26:35.500
You can also type in an IP address
if you don't have a DNS name.

00:26:35.690 --> 00:26:38.360
One of the things is that you
should choose the type of host,

00:26:38.400 --> 00:26:41.740
because we use that to
find the application later.

00:26:41.760 --> 00:26:45.540
You can choose Mac OS X, Windows,
or generic Unix.

00:26:45.690 --> 00:26:47.970
The only other generic Unix
we support now is Solaris,

00:26:48.040 --> 00:26:51.300
but people have used it for other things.

00:26:52.560 --> 00:26:54.540
So this has come up now.

00:26:54.640 --> 00:26:57.830
One of the interesting things is that you
can actually set a password on Wotasty.

00:26:57.870 --> 00:27:00.530
And if you do that,
you won't be able to get any information

00:27:00.530 --> 00:27:03.040
back from just hitting localhost:1085.

00:27:03.040 --> 00:27:05.490
It'll tell you that your
password isn't set properly.

00:27:05.810 --> 00:27:07.970
But what you can do is
go to the host page,

00:27:08.180 --> 00:27:10.290
and if it's available, it'll show yes.

00:27:10.290 --> 00:27:13.140
If you click the yes link,
you'll get back that

00:27:13.140 --> 00:27:14.730
page that we saw earlier.

00:27:15.560 --> 00:27:16.500
Okay.

00:27:16.500 --> 00:27:18.240
Let's go to applications.

00:27:18.340 --> 00:27:20.380
And let's add an application.

00:27:20.380 --> 00:27:23.170
We're going to add Hello World,
because I'm boring.

00:27:25.390 --> 00:27:25.590
All right.

00:27:25.650 --> 00:27:29.930
Remember how I asked or
I mentioned that you can have

00:27:30.000 --> 00:27:31.310
hosts that are of different types?

00:27:31.460 --> 00:27:32.090
This is why.

00:27:32.140 --> 00:27:34.450
You can see the path,
and we allow you to set,

00:27:34.450 --> 00:27:37.610
for a single application,
a different path for each type of host.

00:27:37.700 --> 00:27:41.070
So if in case you happen to be deploying,
you know, some of your applications

00:27:41.160 --> 00:27:43.610
are on a Solaris box,
some of your applications are

00:27:43.610 --> 00:27:45.620
on a Mac OS X box because you're
trying them out or whatever,

00:27:45.620 --> 00:27:50.700
you don't have to keep reconfiguring it
or set up different application instances

00:27:50.700 --> 00:27:53.870
or different applications that are
actually the same with different paths.

00:27:54.260 --> 00:27:55.460
It should be much easier.

00:27:55.460 --> 00:27:58.870
So let's browse for...

00:28:01.410 --> 00:28:02.400
This host.

00:28:02.400 --> 00:28:05.860
Oops.

00:28:05.910 --> 00:28:06.400
All right.

00:28:06.400 --> 00:28:08.400
Let's not browse for this host.

00:28:08.400 --> 00:28:11.890
Let's type this host down.

00:28:23.190 --> 00:28:27.610
One interesting point,
you have to specify the

00:28:28.170 --> 00:28:29.960
launch file inside of the WOA.

00:28:30.500 --> 00:28:33.640
Inside of each WOA you
have two script files.

00:28:33.640 --> 00:28:37.770
So if you have hello world dot WOA,
inside of that will be hello

00:28:37.770 --> 00:28:39.860
world and hello world dot cmd.

00:28:39.950 --> 00:28:44.180
Hello world, without the cmd,
gets used on both Solaris and

00:28:44.470 --> 00:28:46.750
Mac OS X or any other Unix system.

00:28:46.750 --> 00:28:50.810
The dot cmd file is for
launching on Windows.

00:28:52.200 --> 00:28:55.240
We're going to turn off
auto-recover for now.

00:28:55.450 --> 00:28:59.840
All right,
one other thing is we are going to--

00:29:01.010 --> 00:29:03.500
Set the statistics page password
so we can take a look at it.

00:29:03.580 --> 00:29:07.070
And I'll pick a really tacky password,
secret.

00:29:09.880 --> 00:29:10.790
So now we go to detail view.

00:29:10.800 --> 00:29:13.080
And this is where you'll
probably spend a good chunk of

00:29:13.080 --> 00:29:16.840
your time once you've actually
configured your initial instances.

00:29:17.000 --> 00:29:19.710
What we let you do here

00:29:21.090 --> 00:29:23.460
is add instances.

00:29:23.560 --> 00:29:25.990
And you can see it's the
name of the application,

00:29:26.230 --> 00:29:29.760
what host and what port it's running on,
whether it's on or off.

00:29:29.760 --> 00:29:33.230
You can start or stop them
individually or all together.

00:29:33.230 --> 00:29:37.440
Autorecover is the ability for
WOTASTI to automatically start

00:29:37.950 --> 00:29:40.280
and then manage an application.

00:29:40.420 --> 00:29:43.700
So if you have autorecovered enabled,
WOTASTI will check

00:29:43.780 --> 00:29:45.450
every 30 seconds or so.

00:29:45.450 --> 00:29:48.460
And if the application isn't running,
it will start it,

00:29:48.460 --> 00:29:50.980
which means that if your
application crashes,

00:29:50.980 --> 00:29:55.800
the next time WOTASTI notices,
it will start the application back up.

00:29:55.800 --> 00:29:57.430
Refuse new sessions, Chris talked about.

00:29:57.480 --> 00:30:00.060
It's the easy way for
you to transfer loads,

00:30:00.110 --> 00:30:03.560
swap in new ones, swap in a new instance,
whatever you want.

00:30:03.600 --> 00:30:06.370
And then scheduling just tells
you whether scheduling is

00:30:06.370 --> 00:30:08.180
enabled for that application.

00:30:08.190 --> 00:30:10.720
So let's start these applications.

00:30:12.700 --> 00:30:15.700
Okay.

00:30:15.700 --> 00:30:20.500
Give it a minute and
we'll see what we can see.

00:30:26.380 --> 00:30:28.500
All right, so they're started.

00:30:28.620 --> 00:30:31.700
What we're showing--well,
let's refresh this.

00:30:31.820 --> 00:30:33.760
And you can see that they're now showing.

00:30:33.880 --> 00:30:38.390
So this first link links
through the adapter.

00:30:38.490 --> 00:30:40.380
The second link is directly
to the application.

00:30:40.440 --> 00:30:43.500
This may not be applicable if
you've turned off Direct Connect.

00:30:43.570 --> 00:30:48.690
What we're looking at on this
page is the WoW Adapter info page.

00:30:48.880 --> 00:30:51.440
This is the page that
we set the password on.

00:30:51.440 --> 00:30:53.560
We changed it to public so we can hit it.

00:30:53.690 --> 00:30:56.600
And what it is is basically the
adapter telling us as much information

00:30:56.600 --> 00:30:58.700
as it happens to know at the time.

00:30:58.800 --> 00:31:01.860
So you can see here we
have Hello World running.

00:31:01.950 --> 00:31:02.900
We have three instances.

00:31:02.900 --> 00:31:04.440
It tells us the host and the port.

00:31:04.540 --> 00:31:07.130
And there's a whole wad of information.

00:31:07.230 --> 00:31:10.040
It'll tell you the number of
actively processed requests,

00:31:10.100 --> 00:31:15.160
or the number of requests in processing,
the number of total requests served.

00:31:15.250 --> 00:31:19.190
If you're using connection pooling,
It'll tell you how many...

00:31:19.710 --> 00:31:24.380
How many sockets are in the pool and
how many times they've been reused.

00:31:24.380 --> 00:31:27.650
These are the connect, send,
and read timeouts in seconds,

00:31:27.650 --> 00:31:30.830
and they're set to defaults,
the size of the TCP send

00:31:30.920 --> 00:31:34.490
and receive buffers,
whether something's refusing timeout,

00:31:34.490 --> 00:31:38.360
and whether something's been marked dead.

00:31:38.400 --> 00:31:41.990
I'll show you an example of how
the dead timeout works later.

00:31:42.180 --> 00:31:46.610
So here we can see, we can click on this.

00:31:47.000 --> 00:31:50.090
Oh, no.

00:31:50.090 --> 00:31:50.090
Okay.

00:31:51.630 --> 00:31:54.600
We're going to have problems
because this is the wrong license.

00:31:55.920 --> 00:31:58.600
Well, it's Hello World.

00:31:58.600 --> 00:32:03.820
If we can take a look,
let's find an image.

00:32:08.880 --> 00:32:10.020
So it's Hello World.

00:32:10.090 --> 00:32:11.800
It's very simple.

00:32:11.940 --> 00:32:13.460
Yay.

00:32:13.570 --> 00:32:15.740
If the licensing permitted,
what would happen is you

00:32:15.740 --> 00:32:20.860
could actually hit this URL,
and you can see there's no

00:32:20.860 --> 00:32:23.830
instance number associated with it,
and what it would do is it would

00:32:23.830 --> 00:32:27.030
redirect to the appropriate URL.

00:32:27.060 --> 00:32:34.780
Okay, so... Oh, yes,
I remember what I wanted to show.

00:32:37.640 --> 00:32:39.940
Let's take a look at this.

00:32:39.940 --> 00:32:43.100
So let's go over some of the
other things in the adapter page.

00:32:43.230 --> 00:32:44.860
It'll tell you what
server you're running,

00:32:44.970 --> 00:32:47.540
the name of the adapter,
and the reason it shows 451

00:32:47.540 --> 00:32:51.880
is because actually 451 and
5 share the same adapter.

00:32:51.880 --> 00:32:53.910
They're pretty much
exactly the same thing,

00:32:53.910 --> 00:32:57.200
and it's the same source, blah, blah,
blah.

00:32:57.200 --> 00:33:02.070
What this shows is the list of
hosts that this application,

00:33:02.170 --> 00:33:04.700
this web server is talking to.

00:33:04.790 --> 00:33:06.830
This is where it's giving
what instances to load,

00:33:06.840 --> 00:33:09.780
which instances to vend, and so on,
and it'll tell you when the

00:33:09.780 --> 00:33:11.890
last time it asked for it was.

00:33:12.020 --> 00:33:13.960
Generally,
this will always show the most recent

00:33:14.010 --> 00:33:17.550
unless the application hasn't responded
because hitting the WoW adapter

00:33:17.550 --> 00:33:19.050
info page forces it to refresh.

00:33:19.060 --> 00:33:22.900
Oh, sorry.

00:33:23.050 --> 00:33:25.470
My bad.

00:33:28.890 --> 00:33:31.240
So you can see, this is the XML that
Chris was talking about.

00:33:31.240 --> 00:33:33.770
This is the XML that a
Wotasty will respond.

00:33:33.930 --> 00:33:36.610
And you can see, you know,
we have the application hello world.

00:33:36.640 --> 00:33:39.930
It tells you the instance ID, the port,
and the host.

00:33:40.050 --> 00:33:41.540
And then it has Java Monitor.

00:33:41.540 --> 00:33:44.610
Java Monitor is running
in development mode,

00:33:44.640 --> 00:33:46.940
the one that I talked
to you about before.

00:33:46.940 --> 00:33:50.060
And you can see that, strangely,
it doesn't have a positive ID number.

00:33:50.060 --> 00:33:51.310
It has a negative ID number.

00:33:51.320 --> 00:33:52.730
It happens to match the port.

00:33:52.730 --> 00:33:53.520
Right?

00:33:53.520 --> 00:33:58.380
And what this means is that I can
hit monitor through the web server.

00:34:03.610 --> 00:34:06.730
And so now Monitor's running
through the web server.

00:34:06.840 --> 00:34:10.900
The thing to remember about this, though,
is that it won't be load balanced.

00:34:10.900 --> 00:34:13.760
I can't get to Java Monitor by
just doing this.

00:34:13.760 --> 00:34:15.780
Well, I can't anyway because
the licensing's broken.

00:34:15.780 --> 00:34:18.400
But if I could, I couldn't.

00:34:18.520 --> 00:34:20.740
Did you all follow that?

00:34:20.740 --> 00:34:24.420
I'm just checking if you're awake.

00:34:24.420 --> 00:34:24.420
OK.

00:34:25.700 --> 00:34:28.740
So we can show this.

00:34:28.740 --> 00:34:30.540
This isn't just for Java monitor, though.

00:34:30.540 --> 00:34:33.180
In fact, I can actually just start, like,
a completely random

00:34:33.180 --> 00:34:35.610
instance of Hello World.

00:34:36.020 --> 00:34:40.740
and you can see it will start, see,
creating life beat now, blah, blah, blah.

00:34:41.030 --> 00:34:41.510
It'll spit.

00:34:41.660 --> 00:34:44.840
What it's doing is it's
contacting Wotasty and saying,

00:34:45.080 --> 00:34:46.620
I'm here, I'm here.

00:34:46.700 --> 00:34:51.680
Wotasty will get the life beat,
inspect it, see it, and say, that's odd.

00:34:51.930 --> 00:34:53.430
You're not registered.

00:34:53.690 --> 00:34:56.090
Nobody added you to me explicitly.

00:34:56.090 --> 00:34:58.740
You must be a development instance.

00:34:58.900 --> 00:35:02.340
This also works if you launch it in
Project Builder or wherever else.

00:35:02.400 --> 00:35:06.800
Unless you've registered it in Wotasty,
it'll treat it as a development instance.

00:35:06.890 --> 00:35:08.990
The converse is true, of course, as well.

00:35:09.110 --> 00:35:11.690
If you've registered an application,
you don't need to use

00:35:11.690 --> 00:35:12.680
Monitor to start it.

00:35:12.680 --> 00:35:16.950
You can register an application
with Wotasty using Monitor and then

00:35:16.950 --> 00:35:19.440
start it by hand if you want to
do anything particular or you want

00:35:19.450 --> 00:35:23.180
to see the output directly instead
of redirecting to a log file.

00:35:23.300 --> 00:35:23.700
OK?

00:35:23.980 --> 00:35:26.240
So both will work.

00:35:26.240 --> 00:35:29.830
So let's take a look and
let's refresh this page.

00:35:30.060 --> 00:35:33.820
You can see Hello World has now been
added with a negative port number.

00:35:34.270 --> 00:35:38.990
Hello World, through the web server,
not accessible through load balancing,

00:35:38.990 --> 00:35:41.100
assuming load balancing works.

00:35:41.160 --> 00:35:42.270
OK.

00:35:42.430 --> 00:35:45.290
Let's kill that and it'll
go away in a little bit.

00:35:50.030 --> 00:35:51.360
Okay.

00:35:52.000 --> 00:35:53.000
All right.

00:35:53.050 --> 00:35:56.200
Let's go back and take a look at monitor.

00:35:56.790 --> 00:36:00.070
All right, you can see that after we
hit these applications,

00:36:00.080 --> 00:36:02.260
we have a little bit of statistics,
right?

00:36:02.560 --> 00:36:05.700
Number of transactions, active sessions,
and some other stuff.

00:36:05.730 --> 00:36:06.940
You might be thinking, well, that's okay.

00:36:06.940 --> 00:36:08.310
That's not a lot of information.

00:36:08.370 --> 00:36:09.760
It's very bland.

00:36:09.780 --> 00:36:13.800
So you can always go to the WoeStats
page for a particular instance.

00:36:13.800 --> 00:36:18.070
And I think I used secret.

00:36:19.360 --> 00:36:22.360
Yeah, our high-tech little login here.

00:36:22.540 --> 00:36:23.560
All right.

00:36:23.570 --> 00:36:27.660
So you can get detailed statistics for
any particular instance that you want.

00:36:27.780 --> 00:36:31.380
It'll tell you moving average,
average transaction times, you know,

00:36:31.380 --> 00:36:35.590
split by component and direct actions,
average over the top, number of sessions,

00:36:35.720 --> 00:36:37.100
all this stuff like that.

00:36:37.200 --> 00:36:39.300
It'll tell you specifics--
what pages you hit,

00:36:39.300 --> 00:36:41.830
how fast they were,
how many you've served.

00:36:41.960 --> 00:36:43.940
Really useful information.

00:36:44.060 --> 00:36:47.050
And then a little bit of
information about the Java VM.

00:36:47.200 --> 00:36:48.060
Look at that.

00:36:48.060 --> 00:36:48.440
It's powered by WebObjects.

00:36:48.510 --> 00:36:50.410
'cause I never saw that before.

00:36:50.490 --> 00:36:52.030
Okay.

00:36:54.060 --> 00:36:55.000
What?

00:36:55.000 --> 00:36:56.000
Yes?

00:36:56.200 --> 00:36:57.920
Oh, I'm sorry.

00:36:57.920 --> 00:36:59.080
OK, so I'll go back.

00:36:59.390 --> 00:37:01.000
He,
this man asked where I set the password.

00:37:01.000 --> 00:37:05.490
What you do is,
you can set it on the command line,

00:37:05.530 --> 00:37:07.240
but I actually set it in monitor.

00:37:07.240 --> 00:37:10.450
When I first configured the instance,
configuring application Hello World,

00:37:10.450 --> 00:37:12.150
it's an application setting.

00:37:12.160 --> 00:37:15.400
And so what you do is there's
this statistics page password,

00:37:15.400 --> 00:37:17.150
and I type in secret here.

00:37:17.340 --> 00:37:19.060
OK?

00:37:20.200 --> 00:37:21.520
All right, let's go back here.

00:37:21.590 --> 00:37:26.470
And so what I can do
now is shut this off.

00:37:27.030 --> 00:37:29.060
Give it a second.

00:37:29.060 --> 00:37:29.890
Look, and it's off.

00:37:30.060 --> 00:37:32.910
And if we go back here,

00:37:35.700 --> 00:37:39.500
We can see that indeed the
adapter has now picked it up.

00:37:39.780 --> 00:37:43.070
It's also picked up the fact
that that instance that I had

00:37:43.070 --> 00:37:45.190
started by hand is gone.

00:37:45.210 --> 00:37:46.480
That's actually not too bad.

00:37:46.890 --> 00:37:48.990
Oops, I just killed Java Monitor.

00:37:49.060 --> 00:37:49.990
That was bad.

00:38:11.200 --> 00:38:18.200
I'm hoping this is one of
the Hello World instances.

00:38:20.030 --> 00:38:23.140
So this will actually take a minute.

00:38:23.140 --> 00:38:26.860
What ends up happening
is Wotasty tries to be,

00:38:26.860 --> 00:38:28.360
to err on the side of caution.

00:38:28.360 --> 00:38:31.210
People get very upset if
their network hiccups or,

00:38:31.210 --> 00:38:34.350
you know, you have a lot of apps,
something gets paged out and takes

00:38:34.350 --> 00:38:37.960
a few seconds to come back in,
and suddenly an application disappears.

00:38:37.960 --> 00:38:40.720
So Wotasty will actually
wait for a few seconds.

00:38:40.720 --> 00:38:44.810
What it'll do is it expects to
get a life beat from each instance

00:38:44.820 --> 00:38:47.220
every 30 seconds by default.

00:38:47.220 --> 00:38:47.820
Right?

00:38:47.820 --> 00:38:50.570
And if it misses more than a
certain number of them sequentially,

00:38:50.570 --> 00:38:52.700
it then assumes that
the application is dead.

00:38:52.790 --> 00:38:54.810
It usually takes about
two minutes by default.

00:38:55.090 --> 00:38:56.330
These are all tunable parameters.

00:38:56.440 --> 00:38:57.770
They're all documented in the book.

00:38:57.840 --> 00:39:00.610
You can set them on the command line
or in a properties file if you like.

00:39:02.900 --> 00:39:05.100
And let's check if Wotasty
has figured it out.

00:39:05.160 --> 00:39:08.700
Wotasty has now figured out that the
instance that I just killed is dead.

00:39:08.800 --> 00:39:12.790
It will then pass that
information over to the adapters.

00:39:12.800 --> 00:39:14.380
So let's see something else.

00:39:14.470 --> 00:39:16.490
Let's start this back up.

00:39:24.830 --> 00:39:27.700
The adapter knows that it's running.

00:39:27.810 --> 00:39:31.700
And what I'm going to
do is kill it again.

00:39:31.700 --> 00:39:37.810
Except I can't see the bottom.

00:39:48.200 --> 00:39:52.260
And it should be dead,
and now I'm going to try to hit it.

00:39:52.300 --> 00:39:52.820
So that's odd.

00:39:52.940 --> 00:39:56.240
Last time I hit application
one and it worked.

00:39:56.240 --> 00:39:58.330
If you actually take a look,

00:40:00.090 --> 00:40:00.410
Take a look.

00:40:00.520 --> 00:40:05.430
Served 0 for 1, served 1 for instance 2,
served 2 for instance 2.

00:40:05.440 --> 00:40:08.060
And dead timeout is now set to 18.

00:40:08.060 --> 00:40:11.620
So what happened was,
monitor hasn't figured out

00:40:11.620 --> 00:40:13.470
that the instance is dead yet.

00:40:13.530 --> 00:40:16.740
But the adapter knows for certain,
because it tried to send a

00:40:16.740 --> 00:40:20.150
request to that instance,
to instance 1, and it failed.

00:40:20.150 --> 00:40:24.290
So what it automatically did was it tried
to balance it to another application.

00:40:24.310 --> 00:40:26.880
It said, all right,
application 1 isn't responding.

00:40:26.880 --> 00:40:29.980
I'll mark it as dead,
and I'll send the request to instance 1.

00:40:30.000 --> 00:40:33.970
Now instance 2,
licensing said you can't respond to it,

00:40:34.060 --> 00:40:36.030
but had it been able to, it would have.

00:40:36.030 --> 00:40:37.140
Right?

00:40:37.140 --> 00:40:41.710
What happens is in the adapter,
it really wants to trust Wotasty,

00:40:41.770 --> 00:40:44.060
because Wotasty says
what should be happening.

00:40:44.060 --> 00:40:44.720
Right?

00:40:44.720 --> 00:40:47.130
It could just be a glitch,
somebody's bouncing,

00:40:47.140 --> 00:40:49.410
or the application happens
to be tied up for the moment

00:40:49.410 --> 00:40:52.300
and doesn't want to respond,
but will come back in a few seconds.

00:40:52.360 --> 00:40:56.050
So what it does is it sets the
dead timeout to 30 by default.

00:40:56.150 --> 00:40:58.500
This is the number of seconds it
will wait before trying it again.

00:40:58.520 --> 00:40:59.560
Okay?

00:41:00.630 --> 00:41:02.500
And then it'll redirect and redirect.

00:41:02.500 --> 00:41:06.040
The reason that you still see, well,
it's probably,

00:41:06.330 --> 00:41:07.200
Yeah.

00:41:07.200 --> 00:41:08.830
The reason that you
still see one up here,

00:41:08.830 --> 00:41:11.000
of course,
is because the browser can't change

00:41:11.100 --> 00:41:12.940
the URL once you've typed it in.

00:41:13.040 --> 00:41:16.960
If you actually go dig farther
down into the application,

00:41:17.060 --> 00:41:19.510
you'll see that subsequently
it'll change to a different

00:41:19.540 --> 00:41:21.200
instance number after the first.

00:41:21.200 --> 00:41:24.460
And all the links, if you view,
if there are any in the source,

00:41:24.590 --> 00:41:28.070
will also be to a different instance
number because it actually is,

00:41:28.070 --> 00:41:30.400
ta-da, a different instance number.

00:41:30.400 --> 00:41:32.840
OK.

00:41:32.860 --> 00:41:37.890
That's pretty much our ten minute
tour of Monitor and Motasty.

00:41:37.930 --> 00:41:42.260
And just about now I'll
give the mic back to Chris.

00:41:42.430 --> 00:41:45.030
Actually, I'll give the floor back
to Chris since we're wired.

00:41:45.140 --> 00:41:47.590
It's a stage.

00:41:47.590 --> 00:41:47.600
Thank you, Karl.

00:41:51.770 --> 00:41:52.700
Thanks, Karl.

00:41:52.700 --> 00:41:54.700
You're welcome.

00:41:54.700 --> 00:41:58.700
So let's go back and review the
adapter info page that Karl showed us.

00:41:58.870 --> 00:42:00.350
It lets you view the adapter's status.

00:42:00.350 --> 00:42:02.890
This is great for debugging
your WebObjects deployment.

00:42:02.920 --> 00:42:06.720
This way you know exactly what
your adapter thinks are available,

00:42:06.730 --> 00:42:09.330
which application
instances are available,

00:42:09.470 --> 00:42:11.980
and what sort of state
it thinks they're in.

00:42:13.100 --> 00:42:15.780
as you see,
the URL for accessing the WoW Adapter

00:42:15.890 --> 00:42:21.660
info page is the URL to your
WebObjects adapter on your HTTP server

00:42:22.150 --> 00:42:24.960
with WoW Adapter info at the end.

00:42:25.660 --> 00:42:28.520
It gave us some detailed
configuration information.

00:42:28.520 --> 00:42:32.190
This included some socket timeouts.

00:42:32.490 --> 00:42:37.110
They were labeled CTO/STO/RTO.

00:42:37.520 --> 00:42:42.580
And the connection and send timeouts
don't mean a whole lot in the

00:42:42.680 --> 00:42:46.720
current WebObjects adapter because
we're using non-blocking sockets.

00:42:46.830 --> 00:42:50.000
And that means that unless the
system resources have run out,

00:42:50.000 --> 00:42:51.630
those will just happen.

00:42:51.630 --> 00:42:54.530
So the timeouts don't
mean anything there.

00:42:54.640 --> 00:42:58.000
The only timeout that really means
anything is the receive timeout.

00:42:58.080 --> 00:43:01.130
So if the receive timeout expires,
the adapter will then assume

00:43:01.130 --> 00:43:04.840
that that application instance
is dead and mark it so,

00:43:04.840 --> 00:43:07.740
like Karl showed us.

00:43:07.740 --> 00:43:09.390
Refusing timeout.

00:43:10.590 --> 00:43:14.750
If you're trying to restart an
application instance gracefully,

00:43:14.750 --> 00:43:18.090
and we told it to refuse new sessions,
the adapter doesn't know that

00:43:18.090 --> 00:43:22.680
until it tries to talk to that
particular application instance.

00:43:22.700 --> 00:43:26.300
So you don't want your load balancing
scheme to try and pound one particular

00:43:26.300 --> 00:43:30.700
instance because the session numbers
are a lot less than the other sessions.

00:43:30.710 --> 00:43:34.220
So that tells the adapter, you know,
quit bugging me for a while, go,

00:43:34.330 --> 00:43:39.420
you know, hit the other instances,
come back and check with me later.

00:43:40.190 --> 00:43:43.950
And it gave us links to all the
available application instances,

00:43:43.960 --> 00:43:47.650
so it's easy for you to check to make
sure that they're all responding.

00:43:48.790 --> 00:43:53.250
The adapter info page
is disabled by default,

00:43:53.370 --> 00:43:55.500
and you can set it to
either be public access,

00:43:55.620 --> 00:43:59.140
which means anybody hitting
your web server can see it,

00:43:59.270 --> 00:44:03.860
or you can give it a
password and a user name.

00:44:05.260 --> 00:44:09.780
The adapter logging is another way
to debug your WebObjects deployment.

00:44:09.860 --> 00:44:13.320
To enable adapter logging,
you create a log WebObjects file.

00:44:13.440 --> 00:44:14.860
You can just touch this.

00:44:14.860 --> 00:44:17.250
It doesn't have to
contain anything inside.

00:44:17.330 --> 00:44:19.200
It just has to exist as a file name.

00:44:19.210 --> 00:44:21.110
And you create that in
your temporary directory.

00:44:22.590 --> 00:44:25.980
The logging will then start,
and the log file is

00:44:26.080 --> 00:44:27.530
called webobjects.log.

00:44:27.530 --> 00:44:31.280
And you can stop and start the
WebObjects logging by creating

00:44:31.280 --> 00:44:35.080
and removing the log WebObjects
file in your temporary directory.

00:44:35.220 --> 00:44:38.030
So this way you don't have to
restart your HTTP server every time.

00:44:41.530 --> 00:44:44.060
instance configuration.

00:44:44.060 --> 00:44:47.840
For defaults for your applications,
you can use the standard

00:44:47.840 --> 00:44:49.610
Java util properties.

00:44:49.610 --> 00:44:54.840
First, the properties file from all
included frameworks are scanned.

00:44:54.840 --> 00:44:57.780
And then those values are
overridden by the properties

00:44:57.930 --> 00:44:59.930
file in your application.woa.

00:45:01.480 --> 00:45:04.550
And then finally,
those options are overridden by command

00:45:04.550 --> 00:45:06.900
line arguments that you might set.

00:45:08.060 --> 00:45:10.900
The properties file itself is
named conveniently properties.

00:45:10.900 --> 00:45:16.300
And it's located either in the .woa
or .framework resources directory.

00:45:18.420 --> 00:45:21.180
It's one property per line,
name equals value.

00:45:21.180 --> 00:45:24.040
On the command line,
you'll specify dash D,

00:45:24.040 --> 00:45:26.180
and then name equals and the value.

00:45:29.350 --> 00:45:31.570
Here's some useful properties.

00:45:31.640 --> 00:45:34.500
There's woe port, woe host.

00:45:34.600 --> 00:45:36.970
Probably don't need to
read them all to you.

00:45:38.380 --> 00:45:41.240
For configuration,
WillPort takes a port number.

00:45:41.240 --> 00:45:45.120
It's the port that your application
instance will listen on for requests

00:45:45.810 --> 00:45:49.430
forwarded from the WebObjects adapter
or directly connected from your

00:45:49.430 --> 00:45:52.000
browser if you have that turned on.

00:45:52.080 --> 00:45:55.700
If you don't set one,
then it arbitrarily chooses one.

00:45:57.620 --> 00:46:01.680
Wo host takes an IP address or host name.

00:46:01.680 --> 00:46:05.120
And what this does is it
binds the listen socket,

00:46:05.170 --> 00:46:09.820
which you can specify with wo port,
to a specific Ethernet interface.

00:46:09.930 --> 00:46:12.710
This way, if you have multiple Ethernet
interfaces on one machine,

00:46:12.760 --> 00:46:15.880
you can configure that machine as
if it were two different boxes.

00:46:15.880 --> 00:46:19.610
This is only really useful, of course,
on machines with multiple

00:46:19.640 --> 00:46:21.110
Ethernet interfaces.

00:46:23.790 --> 00:46:25.760
There are some logging properties.

00:46:25.760 --> 00:46:27.240
If you've done any
WebObjects development,

00:46:27.240 --> 00:46:30.200
you should be familiar
with WoDebuggingEnabled.

00:46:30.260 --> 00:46:32.400
True turns it on.

00:46:35.840 --> 00:46:39.420
This sends your NSLogs.

00:46:39.420 --> 00:46:41.260
This allows you to print
your various NSLogs,

00:46:41.260 --> 00:46:44.290
and you can configure NSLog
to have different groups and

00:46:44.290 --> 00:46:46.310
different levels of debugging.

00:46:46.360 --> 00:46:48.950
And there are some that
are already predefined,

00:46:49.020 --> 00:46:52.330
and they're talked about in
the documentation for NSLog.

00:46:52.880 --> 00:46:55.450
And then there's woe output path.

00:46:55.510 --> 00:46:59.130
This will redirect the debugging
output to a specific file,

00:46:59.210 --> 00:47:02.330
and it redirects those
NS logs we talked about.

00:47:03.280 --> 00:47:05.800
For performance,
there's Woe Caching Enabled.

00:47:05.800 --> 00:47:07.530
True and false.

00:47:09.160 --> 00:47:13.080
This caches the WebObjects
components in memory for deployment,

00:47:13.200 --> 00:47:16.400
rather than reading them
from the file system.

00:47:16.400 --> 00:47:18.190
For deployment, this is set to true.

00:47:18.200 --> 00:47:21.550
It's set to false for development,
because you want to be able to make

00:47:21.550 --> 00:47:24.780
changes to your project and see
those instantly without having to

00:47:24.940 --> 00:47:27.590
kill and restart your application.

00:47:28.260 --> 00:47:30.330
Well, listen queue size takes account.

00:47:30.350 --> 00:47:34.110
And it's the number of outstanding
requests that your application

00:47:34.280 --> 00:47:35.440
will queue up at any one time.

00:47:35.440 --> 00:47:38.690
This defaults to 128.

00:47:39.430 --> 00:47:43.460
WoW allows concurrent request handling,
true and false,

00:47:43.550 --> 00:47:47.370
determines whether requests
are processed in serial.

00:47:47.370 --> 00:47:49.460
This defaults to false.

00:47:49.460 --> 00:47:52.550
If you set it to true,
your application will be multi-threaded,

00:47:52.580 --> 00:47:54.440
and you better make
sure it's thread safe.

00:47:57.900 --> 00:47:59.850
Some more performance properties.

00:47:59.930 --> 00:48:02.400
There's will worker thread count minimum.

00:48:02.400 --> 00:48:04.420
This takes a count.

00:48:04.420 --> 00:48:08.290
And it's the starting number of
threads processing incoming requests.

00:48:08.320 --> 00:48:11.040
This defaults to 16.

00:48:11.040 --> 00:48:11.760
There's a maximum.

00:48:12.000 --> 00:48:13.830
Will worker thread count maximum?

00:48:13.830 --> 00:48:15.360
Takes a number.

00:48:15.360 --> 00:48:18.340
You probably shouldn't try setting
that lower than the minimum.

00:48:18.340 --> 00:48:19.870
Don't know what will happen.

00:48:20.380 --> 00:48:24.660
The maximum number of threads to create
for processing those incoming requests.

00:48:24.660 --> 00:48:26.160
This defaults to 256.

00:48:26.160 --> 00:48:29.130
If you set it to negative one,
it can grow infinitely,

00:48:29.130 --> 00:48:30.870
and you may run out
of memory in your JVM,

00:48:30.870 --> 00:48:34.250
depending on how many
requests you get coming in.

00:48:36.020 --> 00:48:38.840
There are some potential
bottlenecks for your deployment.

00:48:38.860 --> 00:48:41.580
The first is your application.

00:48:41.580 --> 00:48:44.000
Depending on how much data
you're processing or what

00:48:44.120 --> 00:48:47.680
sort of algorithms you use,
you may need to optimize your application

00:48:47.800 --> 00:48:49.720
to get better performance out of it.

00:48:49.720 --> 00:48:52.830
You can also deploy more of
your applications to increase

00:48:52.940 --> 00:48:54.900
the performance of your site.

00:48:55.760 --> 00:48:59.330
The second is your database,
which database you're using,

00:48:59.350 --> 00:49:03.200
what sort of hardware it's running on,
how much data is in your database.

00:49:03.200 --> 00:49:05.870
Those can all affect its performance.

00:49:07.020 --> 00:49:09.500
The third is your CPU.

00:49:09.500 --> 00:49:11.280
You may have plenty of memory
and be able to run your

00:49:11.280 --> 00:49:14.850
applications completely in memory,
but you may be pegging your

00:49:14.850 --> 00:49:18.670
CPU and therefore limiting how
many requests you can process.

00:49:18.670 --> 00:49:23.630
So it may be time to add another
machine or upgrade your processor.

00:49:29.500 --> 00:49:32.340
Next is virtual memory and RAM.

00:49:32.340 --> 00:49:33.960
As we talked about earlier,
you want to be running your

00:49:33.960 --> 00:49:36.300
WebObjects application on main memory.

00:49:36.390 --> 00:49:39.060
This will be a lot faster than
if you start paging to disk,

00:49:39.060 --> 00:49:45.400
as disk access is orders of magnitude
slower than reading from memory.

00:49:45.400 --> 00:49:47.440
And finally, network.

00:49:48.120 --> 00:49:51.810
If you have a small pipe and you're
trying to process lots of requests,

00:49:51.860 --> 00:49:53.720
that can be a major bottleneck for you.

00:49:53.720 --> 00:49:57.940
You may need to upgrade your network
connection or change sites where

00:49:57.940 --> 00:49:59.750
you're locating your deployment.

00:49:59.750 --> 00:50:06.360
And you should see session 710 for
optimizing WebObjects applications.

00:50:07.980 --> 00:50:12.500
Now for monitoring the memory
and CPU usage of your deployment,

00:50:12.520 --> 00:50:15.230
there are tools that are
available on the platforms.

00:50:15.340 --> 00:50:18.770
Mac OS X Server, there's CPU Monitor.

00:50:19.020 --> 00:50:21.400
There's also Process Viewer.

00:50:21.420 --> 00:50:25.360
And VMstat will give you an idea
of the virtual memory system.

00:50:25.970 --> 00:50:28.900
Solaris, there's PS and Top.

00:50:28.900 --> 00:50:31.130
And on Windows,
you can use Task Manager to give

00:50:31.130 --> 00:50:35.430
both CPU usage and memory usage.

00:50:36.540 --> 00:50:40.840
For network monitoring,
Mac OS X Server has network utility,

00:50:40.930 --> 00:50:46.310
which is basically a GUI interface
to many Unix utilities like ping,

00:50:46.310 --> 00:50:49.550
traceroute, whois, netstat.

00:50:49.800 --> 00:50:54.430
Netstat's also available on Solaris,
and there are also the other generic

00:50:54.430 --> 00:50:56.400
Unix utilities available on Solaris.

00:50:56.510 --> 00:51:01.700
Netstat will also give you a list of how
ports are being used on your machine.

00:51:01.700 --> 00:51:05.440
So you can get a list of open
ports and what state they're in.

00:51:05.480 --> 00:51:09.600
So you can find out if you've set your
WoW life beat to a very low number,

00:51:09.600 --> 00:51:13.540
you may start using up too many ports on
your machine and run out of resources.

00:51:13.620 --> 00:51:16.340
So you probably want to
leave it at about 30 seconds,

00:51:16.340 --> 00:51:18.340
which is the default.

00:51:18.870 --> 00:51:20.680
Windows, there's Network Monitor.

00:51:20.700 --> 00:51:25.510
There are also packet sniffers
for monitoring what is actually

00:51:25.510 --> 00:51:27.360
going across on the wire.

00:51:27.520 --> 00:51:29.040
There's hardware solutions.

00:51:29.170 --> 00:51:33.700
There are also software solutions
like TCP dump and TCP monitor.

00:51:33.810 --> 00:51:36.600
Sometimes this is useful if you're
trying to figure out differences

00:51:36.600 --> 00:51:40.200
between two different browsers and what
they're doing with the requests that

00:51:40.200 --> 00:51:42.890
they're sending to your applications.

00:51:44.520 --> 00:51:46.510
Their application monitoring tools.

00:51:46.600 --> 00:51:50.430
Seeing as WebObjects is all Java now,
you can use standard Java tools,

00:51:50.580 --> 00:51:52.180
like JProbe and Optimizeit.

00:51:54.080 --> 00:51:57.670
for testing your deployment,
their external load generators.

00:51:57.770 --> 00:52:00.920
We give you Playback Manager,
which allows you to record

00:52:00.920 --> 00:52:06.800
client hits to your application
and then play those back.

00:52:06.800 --> 00:52:08.990
There's also third-party
solutions like Silk Performer.

00:52:11.030 --> 00:52:15.780
WebObjects frameworks themselves
have analysis tools like WoEvents.

00:52:15.780 --> 00:52:18.120
WoEvents is very low level.

00:52:18.210 --> 00:52:21.640
It's also a subclass of EOEvents,
so you can get the same sort of

00:52:21.640 --> 00:52:25.100
thing for your enterprise objects.

00:52:25.100 --> 00:52:27.540
And then WoStats,
we saw the output of that

00:52:27.660 --> 00:52:29.730
on the WoStat info page.

00:52:29.830 --> 00:52:34.840
Both WoEvents and WoStats are protected
by passwords to prevent other people from

00:52:34.920 --> 00:52:37.900
seeing how your application performs.

00:52:42.710 --> 00:52:46.350
In all these different deployments,
the principles are basically the same,

00:52:46.350 --> 00:52:50.460
just that you may be running into the
different bottlenecks at different times.

00:52:50.600 --> 00:52:52.840
For instance,
with your small application,

00:52:52.950 --> 00:52:55.760
you probably only have a cable DSL modem.

00:52:55.780 --> 00:52:59.970
So you can't be serving large
amounts of data across that.

00:53:00.130 --> 00:53:05.270
So you probably have plenty of
processor and CPU and RAM for

00:53:05.270 --> 00:53:09.220
your deployment in that case,
just a matter of how

00:53:09.220 --> 00:53:09.220
many clients you'll have.

00:53:09.600 --> 00:53:13.260
As you get larger,
you'll be running into different limits.

00:53:13.370 --> 00:53:16.970
As you get sort of mid-sized,
fractional T1, that may be enough to

00:53:17.040 --> 00:53:19.780
start serving more clients,
and you may need to start

00:53:19.780 --> 00:53:21.340
adding more application servers.

00:53:21.340 --> 00:53:24.760
Of course,
when you get to a large enterprise,

00:53:24.760 --> 00:53:28.950
you'll need a large pipe and
probably many application servers.

00:53:30.120 --> 00:53:32.460
So here we have a sample deployment.

00:53:32.570 --> 00:53:34.760
We have just a couple clients.

00:53:34.820 --> 00:53:39.760
We have one HTTP server
with an API adapter running.

00:53:40.220 --> 00:53:43.870
And we have one application
server with two instances.

00:53:43.930 --> 00:53:46.490
Now,
these instances could be multithreaded

00:53:46.500 --> 00:53:49.420
and be able to handle many requests.

00:53:49.420 --> 00:53:51.750
And you have your database.

00:53:52.460 --> 00:53:55.710
You really want a firewall
between you and the outside world.

00:53:55.800 --> 00:53:58.140
In this case,
we've only opened up port 80,

00:53:58.240 --> 00:54:02.700
so the requests can only come in
from the client to our web server.

00:54:02.880 --> 00:54:04.500
Actually,
the request to go all the way through

00:54:04.500 --> 00:54:07.500
and talk to Omega at this point,
our application server.

00:54:07.500 --> 00:54:10.000
But we're not listening on port 80.

00:54:12.630 --> 00:54:16.680
So then we have even more clients
because our applications become more

00:54:16.730 --> 00:54:18.720
popular or we have more customers.

00:54:20.400 --> 00:54:23.050
You might need to add
a second HTTP server.

00:54:23.100 --> 00:54:27.460
In this case, we've added another
machine called Matilda2.

00:54:28.290 --> 00:54:32.810
But we'd really like our clients
to have one URL to go to.

00:54:32.910 --> 00:54:36.000
So we need a round robin DNS.

00:54:36.080 --> 00:54:38.750
This way,
there's a single point of access

00:54:38.750 --> 00:54:41.900
for your WebObjects applications,
and the requests are passed

00:54:42.310 --> 00:54:44.520
between Matilda 1 and Matilda 2.

00:54:44.600 --> 00:54:47.690
It also gives you redundancy,
and you can swap out one of

00:54:47.690 --> 00:54:51.080
the machines should one of the
machines have a hardware failure.

00:54:51.190 --> 00:54:54.310
So your site will stay up
no matter what happens.

00:54:55.950 --> 00:54:59.870
With even more clients out there
accessing your application,

00:54:59.980 --> 00:55:03.590
you may need to add another
application server with some

00:55:03.590 --> 00:55:05.810
more instances running on it.

00:55:07.580 --> 00:55:09.860
And it's really a good idea
to have another firewall

00:55:10.260 --> 00:55:12.730
between your HTTP servers,
which are more vulnerable

00:55:13.040 --> 00:55:14.660
than your application servers.

00:55:14.750 --> 00:55:19.080
And it also allows you to protect
your business data and your--possibly

00:55:19.080 --> 00:55:23.490
even your customer data,
which could be even more important.

00:55:25.290 --> 00:55:28.100
And for more performance,
we can mirror the database.

00:55:28.100 --> 00:55:32.280
This also allows us to easily back
up the database in case one of the --

00:55:32.280 --> 00:55:36.860
you would have your database running
on a completely separate machine.

00:55:36.860 --> 00:55:40.180
So you'd have two machines
running databases.

00:55:40.200 --> 00:55:44.070
So if one dies,
you can easily switch to the other one.

00:55:46.420 --> 00:55:48.100
And we end up with three zones.

00:55:48.130 --> 00:55:52.810
You have your intra/extranet,
protected by your first firewall,

00:55:52.940 --> 00:55:55.900
your border zone where
your HTTP servers live,

00:55:55.970 --> 00:55:59.990
and then another firewall that
protects your internal private network.

00:56:04.490 --> 00:56:07.390
And that's pretty much all we have
for you today on deploying WebObjects.

00:56:07.390 --> 00:56:10.730
To be considered for
the WebObjects beta...

00:56:11.860 --> 00:56:15.700
Please visit us at this URL.

00:56:15.700 --> 00:56:19.520
We have the WebObjects lab if you'd
like to try messing around with monitor

00:56:19.520 --> 00:56:22.520
and accessing the adapter info page.

00:56:22.550 --> 00:56:25.130
And hopefully we'll have
some deployment instances,

00:56:25.140 --> 00:56:27.690
licenses on some of those machines.

00:56:27.810 --> 00:56:30.090
And we're available through 6:00 p.m.

00:56:30.090 --> 00:56:31.960
today and 9:00 to 6:00 tomorrow.

00:56:33.570 --> 00:56:34.840
Here's the roadmap.

00:56:34.850 --> 00:56:37.740
So for JSP and servlet integration,
you'll want to see the session this

00:56:37.840 --> 00:56:41.090
afternoon in this room after lunch.

00:56:41.220 --> 00:56:44.380
And then on Friday, we have Optimizing
Your WebObjects Applications,

00:56:44.440 --> 00:56:47.000
which is important for deploying.

00:56:47.180 --> 00:56:48.900
And then finally,
you can give us feedback on

00:56:48.900 --> 00:56:53.810
our deployment strategies at
the WebObjects feedback forum.

00:56:55.750 --> 00:56:58.640
You can contact Tony and
Bob at WebObjects@apple.com

00:56:58.640 --> 00:57:00.710
if you have any comments.

00:57:00.940 --> 00:57:05.300
and Apple Professional Services has
good training.

00:57:05.410 --> 00:57:08.190
They have a training
program for WebObjects,

00:57:08.190 --> 00:57:13.150
which includes a deployment class if you
want some hands-on training for this.

00:57:13.330 --> 00:57:16.760
They often have several different servers
and some different platforms for you

00:57:16.760 --> 00:57:19.590
to try your deployments on as well.

00:57:20.500 --> 00:57:22.640
And for more information,
there's the ever-evolving

00:57:22.640 --> 00:57:24.880
WebObjects developer documentation.

00:57:24.880 --> 00:57:27.050
It's getting better all the time,
so come back and visit us.

00:57:29.790 --> 00:57:32.330
and the Deploying WebObjects
Applications book is a very good book.

00:57:32.370 --> 00:57:37.190
It has very good coverage of deploying
your WebObjects applications.

00:57:38.850 --> 00:57:42.070
And apparently we also have books
on developing applications using

00:57:42.210 --> 00:57:44.810
Java server pages and servlets.

00:57:46.280 --> 00:57:49.670
Again, for the most up-to-date
PDF and HTML documentation,

00:57:49.760 --> 00:57:55.470
visit us at developer.apple.com,
techpubs.com.