WEBVTT

00:00:02.180 --> 00:00:02.800
Well, good afternoon.

00:00:02.800 --> 00:00:05.450
Welcome to session 8, 008.

00:00:05.520 --> 00:00:06.330
No, 004.

00:00:06.330 --> 00:00:07.100
I'm sorry.

00:00:07.100 --> 00:00:07.990
I didn't look at the screen.

00:00:08.000 --> 00:00:11.100
004, unfortunately not 007.

00:00:11.100 --> 00:00:15.100
I'm John Geleynse,
User Experience Evangelist here at Apple.

00:00:15.100 --> 00:00:22.100
And this session is a fun grab bag
session of sort of misfit toys,

00:00:22.100 --> 00:00:25.100
you know, the land of misfit toys.

00:00:25.100 --> 00:00:32.100
These are some great technologies
that just needed a home at WWDC,

00:00:32.100 --> 00:00:35.230
and each of them doesn't have enough
content for its own full session,

00:00:35.230 --> 00:00:40.100
and yet they're very important
in terms of you providing a great

00:00:40.100 --> 00:00:41.090
user experience with your product.

00:00:41.110 --> 00:00:44.460
Now, screen savers doesn't apply
specifically to your product,

00:00:44.460 --> 00:00:47.100
but it still is part of the
Mac OS X user experience,

00:00:47.100 --> 00:00:49.100
and it's just a fun thing to know about.

00:00:49.100 --> 00:00:52.100
And so we thought we would talk about it.

00:00:52.100 --> 00:00:54.100
And we called this session out.

00:00:54.100 --> 00:00:57.100
We called this session actually
originally Mac OS X Party Favors,

00:00:57.100 --> 00:00:59.280
you know, lots of good things you
get at the end of a party,

00:00:59.280 --> 00:00:59.960
birthday party.

00:01:00.100 --> 00:01:03.500
So the first favor we're going to talk
about is the Mac OS X screen saver,

00:01:03.510 --> 00:01:04.950
how to write a screen saver.

00:01:05.100 --> 00:01:07.450
And I think it's just a fun diversion,
you know, when you're sick of

00:01:07.450 --> 00:01:09.650
writing your real product,
just get off and write a really cool

00:01:09.650 --> 00:01:11.090
screen saver would be really cool.

00:01:11.170 --> 00:01:13.070
Finally, Mac OS X.

00:01:13.140 --> 00:01:15.700
Finally, we have a Macintosh operating
system that can really do

00:01:15.700 --> 00:01:17.080
some very cool screen savers.

00:01:17.100 --> 00:01:19.600
Then favor number two,
the second topic we're going to

00:01:19.600 --> 00:01:23.100
touch on is the preference pane,
how to write a system preference pane.

00:01:23.100 --> 00:01:28.100
System preferences application lets
you add third party preference panes,

00:01:28.100 --> 00:01:31.100
and there's some really specific
cases where you'd want to do this.

00:01:31.100 --> 00:01:34.280
And so perhaps you fall
into that category in terms

00:01:34.280 --> 00:01:37.070
of what your company does,
and so we're going to tell you how

00:01:37.080 --> 00:01:38.100
to do that and when to do that.

00:01:38.100 --> 00:01:41.900
Third party favor is just to
talk about the disk image.

00:01:42.230 --> 00:01:45.570
Disk images are the preferred
format for distributing software

00:01:45.670 --> 00:01:49.070
over the internet and for
distributing software on Mac OS X.

00:01:49.150 --> 00:01:50.000
So we'll talk about that.

00:01:50.100 --> 00:01:52.100
We'll talk about the new user
experience with the disk image format.

00:01:52.100 --> 00:01:54.170
We'll talk about the new user
experience with the disk image

00:01:54.190 --> 00:01:55.100
format in Mac OS X Jaguar.

00:01:55.200 --> 00:01:59.290
And then we'll move on to an update
about the Mac OS X installer and

00:01:59.290 --> 00:02:03.100
some of our other tools like around
the installer like PackageMaker.

00:02:03.230 --> 00:02:06.100
So to get started,
I want to introduce Mike Trent,

00:02:06.290 --> 00:02:09.100
who's going to talk to you
about Mac OS X screen saver.

00:02:09.100 --> 00:02:11.100
Mike.

00:02:11.100 --> 00:02:13.090
Thanks.

00:02:13.100 --> 00:02:14.380
Thanks, John.

00:02:19.220 --> 00:02:21.580
All right, well let's talk about
screen savers on Mac OS X.

00:02:21.750 --> 00:02:24.210
First of all,
we all know what a screen saver is,

00:02:24.210 --> 00:02:24.750
right?

00:02:24.880 --> 00:02:27.010
Screen savers are
entertaining graphics demos,

00:02:27.010 --> 00:02:30.500
like slide shows or virtual fish tanks,
that run when you're

00:02:30.600 --> 00:02:32.080
away from your computer.

00:02:32.160 --> 00:02:34.190
The screen savers can have
more serious uses too,

00:02:34.480 --> 00:02:36.020
such as displaying marketing material.

00:02:36.320 --> 00:02:38.890
For example,
the Apple retail stores use screen

00:02:38.890 --> 00:02:42.280
savers to display product demos
and attract loops when people

00:02:42.290 --> 00:02:44.220
aren't using their machines.

00:02:44.560 --> 00:02:46.660
Well, ironically,
one thing screen savers don't

00:02:46.660 --> 00:02:50.130
do is actually save your screen,
right?

00:02:50.150 --> 00:02:52.440
This is especially true now that
we all have flat panel displays.

00:02:52.440 --> 00:02:56.590
At least I hope you all have

00:02:57.230 --> 00:03:01.530
In JAGUAR, we're going to start using the
term "screen effect" to refer to

00:03:01.530 --> 00:03:04.400
things like screen savers to help
clear up some of this confusion.

00:03:04.400 --> 00:03:09.380
For the purpose of this talk,
let's just call it a screen saver.

00:03:09.380 --> 00:03:09.380
We all know what that is.

00:03:10.070 --> 00:03:14.660
So, Mac OS X has a built-in
screen saver system.

00:03:14.660 --> 00:03:16.630
This is great,
because now you don't have to learn

00:03:16.630 --> 00:03:18.000
how to write your own anymore.

00:03:18.030 --> 00:03:21.320
You don't have to know
how to patch into the OS.

00:03:21.320 --> 00:03:24.560
You can just focus on writing
your own module to do your

00:03:25.030 --> 00:03:27.000
own screen saver effect.

00:03:27.000 --> 00:03:29.990
The screen saver system is built
around a Cocoa-based framework,

00:03:30.200 --> 00:03:32.750
but you don't need to know much
about Cocoa or Objective-C to

00:03:32.750 --> 00:03:34.000
write a screen saver.

00:03:34.000 --> 00:03:37.290
For the most part,
you can focus on the graphics libraries

00:03:37.290 --> 00:03:39.630
you're already familiar with right now.

00:03:42.620 --> 00:03:46.140
The screen saver engine is a
normal Mac OS X application.

00:03:46.380 --> 00:03:48.920
The screen saver engine is the
software that does all the real

00:03:48.920 --> 00:03:49.890
work for your screen saver.

00:03:49.950 --> 00:03:52.390
It runs the graphics and all of that.

00:03:53.210 --> 00:03:55.200
Because it's a normal
Mac OS X application,

00:03:55.200 --> 00:03:56.860
it runs in its own address space.

00:03:56.860 --> 00:04:00.620
This means that your screen saver can't
interfere with the system at large,

00:04:00.670 --> 00:04:03.140
nor can the system interfere with you.

00:04:05.370 --> 00:04:07.540
So that's exciting.

00:04:07.540 --> 00:04:10.120
So screen save r modules are
really bundles that encapsulate

00:04:10.180 --> 00:04:12.370
executable code and other resources.

00:04:12.550 --> 00:04:15.740
The screen save r modules and the
screen save r engine communicate

00:04:15.790 --> 00:04:20.300
using a central framework called
the screen save r framework.

00:04:20.320 --> 00:04:22.120
So what can the screen save
r framework do for you?

00:04:22.120 --> 00:04:25.460
The screen save r framework
supplies two Cocoa objects you can

00:04:25.710 --> 00:04:27.270
use in your screen save r module.

00:04:27.600 --> 00:04:30.300
The first object is
called screen save r view.

00:04:30.300 --> 00:04:33.530
Screen save r view is responsible
for drawing to the screen

00:04:33.790 --> 00:04:34.300
and handling user input.

00:04:34.300 --> 00:04:39.180
Every screen save r module
will inherit from this object.

00:04:39.180 --> 00:04:41.920
It is the heart of a
screen save r module.

00:04:42.080 --> 00:04:44.300
The second object,
screen save r defaults,

00:04:44.300 --> 00:04:47.270
is a utility for managing
user preferences.

00:04:47.270 --> 00:04:49.300
We'll talk more about that in a minute.

00:04:49.300 --> 00:04:51.300
Right now let's focus
on screen save r view.

00:04:51.300 --> 00:04:55.420
Again, screen save r view is responsible
for drawing to the screen

00:04:55.580 --> 00:04:57.280
and handling user input.

00:04:57.310 --> 00:05:01.350
It turns out Cocoa provides an
object that's great for doing

00:05:01.350 --> 00:05:03.300
exactly this called NS view.

00:05:03.300 --> 00:05:06.130
By building on top of NS view,
we can provide screen save

00:05:06.130 --> 00:05:08.350
r modules with a rich,
interactive drawing

00:05:08.360 --> 00:05:10.100
environment basically for free.

00:05:10.100 --> 00:05:12.510
Now,
screen save r view supplies some screen

00:05:12.550 --> 00:05:16.300
save r specific features as well,
such as managing an animation timer.

00:05:17.970 --> 00:05:21.550
Well, so if screen save review is
responsible for drawing to the screen,

00:05:21.550 --> 00:05:23.660
how do you draw with screen save review?

00:05:23.910 --> 00:05:26.880
Well, one nice thing about views
is you can configure them to

00:05:26.880 --> 00:05:30.660
handle graphics commands from a
variety of graphics libraries.

00:05:30.720 --> 00:05:32.750
This means with a little
bit of setup work,

00:05:32.750 --> 00:05:34.860
you can call directly into the
graphics library you're most

00:05:34.990 --> 00:05:36.160
comfortable with right now.

00:05:36.280 --> 00:05:40.870
This might be Quick Draw,
or this might be OpenGL, or whatever.

00:05:41.260 --> 00:05:44.010
There are a couple of places where
you can patch into your module's

00:05:44.010 --> 00:05:47.050
animation loop to do your drawing,
and I'll show you some

00:05:47.050 --> 00:05:48.870
examples of both in a minute.

00:05:50.310 --> 00:05:55.980
In the past, you've had to worry about
drawing across multiple monitors.

00:05:55.980 --> 00:05:59.200
One of the great things about
the screen saver in Mac OS X is

00:05:59.200 --> 00:06:02.070
it handles multi-monitor
issues for you automatically.

00:06:02.270 --> 00:06:05.240
All you have to do is worry about
drawing in your screen saver view,

00:06:05.360 --> 00:06:08.410
and the system will make the
results appear across multiple

00:06:08.410 --> 00:06:10.420
monitors in a consistent manner.

00:06:10.960 --> 00:06:14.180
If necessary, your module can set your
screen device--sorry,

00:06:14.180 --> 00:06:19.220
your screen depth using
Core Graphics Direct Display API.

00:06:19.700 --> 00:06:21.030
Remember, though,
if you're going to change

00:06:21.030 --> 00:06:25.100
the user's monitor settings,
please change them back when you're done.

00:06:27.300 --> 00:06:29.190
So that's drawing with
screen save review.

00:06:29.290 --> 00:06:32.330
Now, screen save review, as I said,
is also responsible for

00:06:32.330 --> 00:06:34.110
handling user input.

00:06:34.820 --> 00:06:37.970
So normally user events
wake the screen saver,

00:06:37.970 --> 00:06:38.700
right?

00:06:38.740 --> 00:06:42.040
Well, maybe you want to write a video
game in your screen saver,

00:06:42.040 --> 00:06:44.920
or maybe you want a screen saver
that responds to mouse movement.

00:06:44.940 --> 00:06:49.440
It turns out that writing an interactive
screen saver in Mac OS X is very easy.

00:06:49.440 --> 00:06:54.050
The screen saver engine will hook your
module into its event loop directly,

00:06:54.060 --> 00:06:58.520
so you can listen for and
override specific user events.

00:06:58.520 --> 00:07:01.180
Now, this comes with a word of caution.

00:07:01.180 --> 00:07:05.460
If you're going to override user events,
please make sure the user understands

00:07:05.460 --> 00:07:07.240
how to wake the screen saver.

00:07:07.240 --> 00:07:10.200
You don't want to trap someone in
your module wondering how to get out.

00:07:10.260 --> 00:07:10.660
Most unpleasant.

00:07:12.620 --> 00:07:16.500
In addition to drawing to the
screen and handling user input,

00:07:16.500 --> 00:07:20.740
Screen Save Review is responsible for
some screen save specific features.

00:07:20.740 --> 00:07:24.620
Like I've said before,
like managing your animation loop.

00:07:24.620 --> 00:07:30.290
It also supplies some methods for
managing your runtime environment.

00:07:32.560 --> 00:07:34.860
So that's screen save review.

00:07:34.930 --> 00:07:37.250
Let's talk about how the framework
can help you manage your user

00:07:37.250 --> 00:07:39.500
settings in a screen save.

00:07:39.500 --> 00:07:43.080
Your module can supply a configure
panel the user can use to

00:07:43.380 --> 00:07:45.380
customize the module's behavior.

00:07:45.380 --> 00:07:47.400
You can design this panel
in Interface Builder,

00:07:47.440 --> 00:07:55.090
like any window,
and then supply that panel

00:07:55.090 --> 00:07:55.090
to the system on demand.

00:07:55.550 --> 00:07:59.990
The system will display your panel as a
sheet in the System Prefs application,

00:07:59.990 --> 00:08:01.190
like in the screenshot here.

00:08:02.680 --> 00:08:07.000
The framework supplies an object
called screen saver defaults for

00:08:07.080 --> 00:08:09.600
working with System Preferences.

00:08:09.790 --> 00:08:15.010
With your users preferences, I'm sorry.

00:08:15.010 --> 00:08:15.010
Screen saver defaults

00:08:15.330 --> 00:08:18.800
works with your information,
it saves your preferences,

00:08:18.800 --> 00:08:22.550
makes them available to any
application that loads your module.

00:08:22.590 --> 00:08:24.540
This might be the
System Preferences application,

00:08:24.540 --> 00:08:26.340
it might be the Screen Saver
Engine application,

00:08:26.340 --> 00:08:28.440
it might be a third-party
Screen Saver Engine.

00:08:28.440 --> 00:08:30.140
Some already exist.

00:08:30.490 --> 00:08:33.480
Now, Foundation also comes with an
object for working with user

00:08:33.480 --> 00:08:37.000
preferences called NSUserDefaults,
but you should avoid using

00:08:37.000 --> 00:08:39.400
NSUserDefaults in your screen save.

00:08:39.400 --> 00:08:42.400
NSUserDefaults stores information
on a per-application basis,

00:08:42.400 --> 00:08:45.340
and this means that your
settings won't be available to

00:08:45.390 --> 00:08:47.740
all apps that load your module.

00:08:49.560 --> 00:08:51.740
So that's the screen saver framework.

00:08:51.740 --> 00:08:53.480
Let's see some demos.

00:08:53.670 --> 00:08:56.600
There's nothing like a good demo.

00:08:56.870 --> 00:08:58.800
I have two demos for you today.

00:08:58.800 --> 00:09:02.110
The first is a simple demo using

00:09:04.250 --> 00:09:06.200
Can we get machine four?

00:09:06.200 --> 00:09:08.260
Oh, great.

00:09:08.480 --> 00:09:08.680
Sorry.

00:09:08.680 --> 00:09:11.200
I'm looking at the wrong place.

00:09:11.200 --> 00:09:13.560
So I have two demos for you today.

00:09:13.560 --> 00:09:16.810
The first is a simple
demo using Quick Draw,

00:09:16.810 --> 00:09:19.850
and the second will be a
more sophisticated screen

00:09:19.850 --> 00:09:21.940
save example using OpenGL.

00:09:21.940 --> 00:09:24.620
In the first example,
I'll show you how easy it is

00:09:24.630 --> 00:09:26.560
to make a screen saver module.

00:09:26.560 --> 00:09:28.960
So, in fact, Project Builder does most
of the tedious work for us.

00:09:28.960 --> 00:09:32.330
I'm just going to create
a new project here,

00:09:32.360 --> 00:09:35.300
and a template for screensavers.

00:09:36.930 --> 00:09:41.620
We're going to call this Shapes.

00:09:41.700 --> 00:09:43.900
Project Builder has created a
couple files for us automatically.

00:09:43.960 --> 00:09:46.560
These files are for our
Screen Save Review subclass.

00:09:46.560 --> 00:09:48.990
I've said before that
Screen Save Review is

00:09:49.100 --> 00:09:53.510
responsible for drawing to the
screen and handling user input.

00:09:53.510 --> 00:09:55.430
We have to override this object.

00:09:55.440 --> 00:09:57.930
Every module has this object.

00:09:58.090 --> 00:10:00.920
I'm not all that fast at typing,
so I'm just going to copy and

00:10:00.990 --> 00:10:02.440
paste from a cheat sheet here.

00:10:02.480 --> 00:10:04.120
I hope that's okay.

00:10:04.210 --> 00:10:06.680
I want to draw using Quick Draw.

00:10:06.680 --> 00:10:08.930
In order to do that,
I have to configure my environment

00:10:09.040 --> 00:10:10.860
to accept Quick Draw commands.

00:10:10.860 --> 00:10:16.350
I'll begin by installing
a Quick Draw view inside

00:10:16.350 --> 00:10:17.500
of my Screen Save Review.

00:10:17.500 --> 00:10:22.340
In order to do that,
I need an instance variable in my object.

00:10:22.340 --> 00:10:23.280
I'll do that here.

00:10:23.280 --> 00:10:25.620
I'll switch to our implementation.

00:10:25.670 --> 00:10:26.980
Because we're going to be
working with Quick Draw,

00:10:26.980 --> 00:10:29.870
we need to have some header
files that pre-define the

00:10:29.870 --> 00:10:32.200
Quick Draw commands we want to use.

00:10:32.200 --> 00:10:33.780
I'm going to paste in the Applications
Services Umbrella Framework

00:10:33.780 --> 00:10:34.400
header to get that in there.

00:10:34.460 --> 00:10:37.370
I'm a Corel Framework
header to get us started.

00:10:38.340 --> 00:10:42.550
Now we need to install
our Quick Draw View.

00:10:42.610 --> 00:10:48.260
Once we've installed the Quick Draw View,
we can begin sending Quick Draw commands,

00:10:48.260 --> 00:10:51.190
drawing commands, to our screen save.

00:10:51.220 --> 00:10:54.410
I will do that in our initializer,
which is a method called

00:10:54.440 --> 00:10:55.970
initWithFrameIsPreview.

00:10:56.220 --> 00:10:57.700
I'll walk through that here.

00:10:57.850 --> 00:10:59.700
This is a two-step process.

00:10:59.710 --> 00:11:03.700
The first process,
we allocate our Quick Draw View object,

00:11:03.760 --> 00:11:07.890
and the second step,
we simply install it.

00:11:11.210 --> 00:11:13.560
Now, in order to do drawing,
we're going to do some

00:11:13.560 --> 00:11:16.160
drawing in Animate One Frame.

00:11:16.230 --> 00:11:20.950
Animate One Frame is called by the
screen saver system many times a second.

00:11:21.150 --> 00:11:23.340
You can use this to update
your module's state,

00:11:23.340 --> 00:11:24.500
or you can do drawing.

00:11:24.690 --> 00:11:26.880
This is especially true
of a simple module.

00:11:26.880 --> 00:11:29.720
Because this module is simple,
I'm going to just do all of my

00:11:29.720 --> 00:11:32.740
drawing here and animate one frame.

00:11:34.530 --> 00:11:36.390
and be done with it.

00:11:36.570 --> 00:11:39.190
So what am I doing here?

00:11:39.200 --> 00:11:41.350
First of all,
we lock focus on our Quick Draw view.

00:11:41.790 --> 00:11:45.400
This means that the
Quick Draw view is the main view.

00:11:45.400 --> 00:11:47.520
It's going to respond,
it's going to receive all

00:11:47.550 --> 00:11:49.350
the drawing commands that we
issue from this point forward.

00:11:49.810 --> 00:11:53.850
It's analogous to setting
the port in Quick Draw,

00:11:53.850 --> 00:11:53.850
for example.

00:11:53.990 --> 00:11:55.660
Then we'll pick a random color.

00:11:55.660 --> 00:12:00.340
The screen save framework provides some
macros for working with random numbers.

00:12:00.350 --> 00:12:04.560
These macros use the underlying
random API in the system.

00:12:04.610 --> 00:12:05.520
You can use them if you like.

00:12:05.520 --> 00:12:06.700
You don't need to use them.

00:12:06.700 --> 00:12:09.060
One benefit of using them is
the screen save will set your

00:12:09.060 --> 00:12:10.820
random seed automatically.

00:12:10.820 --> 00:12:14.050
Because I think they're convenient,
I will use them myself.

00:12:14.060 --> 00:12:19.660
We'll set a random
color using RGB4 color.

00:12:19.660 --> 00:12:24.060
We're going to pick a random rectangle,
again using our random number macros.

00:12:24.060 --> 00:12:26.600
Finally, we just draw an oval.

00:12:26.600 --> 00:12:27.420
How easy is that?

00:12:27.590 --> 00:12:28.900
Then we unlock focus.

00:12:28.930 --> 00:12:30.220
We're good to go.

00:12:30.240 --> 00:12:31.080
That's all there is to it.

00:12:31.080 --> 00:12:34.320
We can build this example and install it.

00:12:34.320 --> 00:12:37.580
Now to save time,
I've pre-compiled this on the system.

00:12:37.580 --> 00:12:39.940
We can fire up System Preferences here.

00:12:42.210 --> 00:12:44.790
Alright,
now as promised here is Shapes and

00:12:44.790 --> 00:12:49.100
it draws random ovals on the screen.

00:12:49.220 --> 00:12:51.500
Excellent, thank you.

00:12:52.110 --> 00:12:57.300
The second example I have for you is
a more feature rich OpenGL module.

00:12:57.320 --> 00:12:58.870
I have one here called Alphabet.

00:12:59.140 --> 00:13:03.540
Alphabet draws a number of letters on
the screen and then transitions them off

00:13:03.720 --> 00:13:08.100
with a variety of nifty fade effects,
some expand, some whatever.

00:13:08.100 --> 00:13:13.620
It looks like we're running in a
software renderer for OpenGL today,

00:13:13.680 --> 00:13:15.290
but that's okay.

00:13:15.290 --> 00:13:15.290
You get the idea.

00:13:15.440 --> 00:13:18.320
So, this module is fancy.

00:13:18.350 --> 00:13:19.340
It has a configure panel.

00:13:19.340 --> 00:13:22.160
We can use that to change
some of our settings.

00:13:22.620 --> 00:13:25.230
The alphabet also can
listen to the keyboard.

00:13:25.420 --> 00:13:28.390
This is kind of fun.

00:13:29.100 --> 00:13:32.100
We can actually inject letters on the
screen by typing them on the keyboard.

00:13:32.100 --> 00:13:33.860
We'll let some of these fade away here.

00:13:33.960 --> 00:13:36.660
I'm going to hold down Shift-M,
and a whole bunch of Shift-Ms will

00:13:36.660 --> 00:13:37.600
appear on the screen.

00:13:37.750 --> 00:13:38.900
Capital Ms.

00:13:38.900 --> 00:13:40.400
So,
and I'll type my password or whatever.

00:13:40.400 --> 00:13:41.070
Oh, I can't.

00:13:41.160 --> 00:13:42.190
Oh, it's all here.

00:13:42.410 --> 00:13:43.500
So, great.

00:13:43.630 --> 00:13:48.190
When I move the mouse,
the screen saver wakes up.

00:13:48.300 --> 00:13:52.100
Once it's finished printing all
the letters I typed on the screen.

00:13:56.170 --> 00:13:59.540
There we go.

00:13:59.590 --> 00:14:01.530
Let's see what that code looks like.

00:14:07.510 --> 00:14:13.980
Since this is a much larger example,
I factored a lot of the

00:14:13.980 --> 00:14:16.850
code out into other files.

00:14:16.860 --> 00:14:18.500
I don't want to go into great
detail about this module,

00:14:18.500 --> 00:14:22.500
so I'm going to instead focus simply
on our screen save review subclass.

00:14:22.500 --> 00:14:27.380
We're going to compare and contrast
that with our first example.

00:14:27.400 --> 00:14:31.330
Like our first example,
we install a graphic library

00:14:31.330 --> 00:14:33.680
specific subview in our view.

00:14:33.680 --> 00:14:36.740
In this case,
we're installing an OpenGL view.

00:14:38.340 --> 00:14:43.360
And again, if we go to our initializer,
we see it works basically the same way.

00:14:43.360 --> 00:14:48.300
Here I create our OpenGL view and then
we install it in our screen save review.

00:14:48.410 --> 00:14:49.230
Fairly straightforward.

00:14:49.310 --> 00:14:52.000
Now, because we're working
with the Configure panel,

00:14:52.000 --> 00:14:54.300
we need to save and
retrieve user preferences.

00:14:54.300 --> 00:14:59.300
I'm using the screen save
defaults object to do that for me.

00:14:59.300 --> 00:15:02.030
And here we pre-declare some
default values for the screen

00:15:02.030 --> 00:15:06.970
save for the case where the user
hasn't set up their settings yet.

00:15:08.380 --> 00:15:11.490
Now, in our first example,
our quick draw example,

00:15:11.580 --> 00:15:14.300
we did all of our drawing
in Animate One Frame.

00:15:14.540 --> 00:15:16.660
Well, in this example,
I'm doing all of our

00:15:16.660 --> 00:15:18.220
drawing in Draw Rect.

00:15:18.540 --> 00:15:21.660
Draw Rect is supplied by the
NSView object and is called

00:15:21.660 --> 00:15:25.190
whenever the system thinks
it needs to redraw your view.

00:15:25.560 --> 00:15:30.530
Our strategy here is to draw our
entire scene in DrawRect and then

00:15:30.590 --> 00:15:34.400
periodically invalidate our view
so the system knows to redraw it.

00:15:34.400 --> 00:15:37.860
This way we make the system responsible
for doing all of our drawing.

00:15:37.860 --> 00:15:39.640
This is more consistent
with the way AppKit,

00:15:39.680 --> 00:15:41.400
for example, does its drawing.

00:15:41.400 --> 00:15:47.400
This means in AnimateOneFrame we
simply take care of our module state.

00:15:47.400 --> 00:15:50.260
This state includes things
like creating letters,

00:15:50.660 --> 00:15:52.400
injecting them onto the screen.

00:15:52.400 --> 00:15:57.050
Every screen save has to have
some kind of nice Easter egg,

00:15:57.050 --> 00:15:59.510
otherwise why even bother?

00:15:59.770 --> 00:16:03.760
For example,
we can remove letters from the screen.

00:16:03.760 --> 00:16:06.260
When we're done with all of that,
we invalidate the view,

00:16:06.340 --> 00:16:12.040
telling the system to repaint the
screen so our changes take effect.

00:16:12.110 --> 00:16:15.680
That's how we draw in Alphabet.

00:16:15.710 --> 00:16:19.600
Alphabet also responds to user events,
such as typing on the keyboard.

00:16:20.070 --> 00:16:22.700
We do that simply by saying
we're interested in key down

00:16:22.910 --> 00:16:27.000
events and if we get one we just
inject the letter on the screen.

00:16:27.000 --> 00:16:33.370
And of course we invalidate the
view so the system knows to repaint.

00:16:34.760 --> 00:16:36.900
Now, it might be that we aren't
interested in user events.

00:16:36.900 --> 00:16:38.140
Remember, that was a check box.

00:16:38.140 --> 00:16:40.180
Maybe the user hasn't checked that yet.

00:16:40.180 --> 00:16:43.030
In that case,
we pass the event up the responder chain

00:16:43.030 --> 00:16:44.930
so the next person can handle the event.

00:16:45.120 --> 00:16:47.750
This will probably wake the screen save.

00:16:48.200 --> 00:16:51.030
Hopefully we'll make the
screen save r even better.

00:16:51.040 --> 00:16:53.760
We do the same with the Shift key.

00:16:53.790 --> 00:16:55.620
That's how we handle user input.

00:16:55.720 --> 00:16:57.100
Fairly simple.

00:16:57.260 --> 00:17:00.160
Again, Alphabet has a configure sheet.

00:17:00.160 --> 00:17:02.560
We tell the screen save r that
we in fact do have a screen save

00:17:02.630 --> 00:17:08.180
r sheet and we make it available
to the screen save r on demand.

00:17:08.200 --> 00:17:10.570
I factored most of this
code out into another file,

00:17:10.570 --> 00:17:12.980
an object called Alphabet
Panel Controller.

00:17:12.980 --> 00:17:14.680
I won't go into great detail here.

00:17:14.710 --> 00:17:18.580
Ultimately, the screen save r view is
responsible for supplying the

00:17:18.950 --> 00:17:20.670
sheet to the screen save r system.

00:17:23.130 --> 00:17:27.040
Again, we use screen saver defaults when
working with preferences to make

00:17:27.210 --> 00:17:29.980
sure our preferences are available
to every app that loads our module.

00:17:30.000 --> 00:17:32.880
Now, just to prove to you
this is actually OpenGL,

00:17:32.880 --> 00:17:35.060
I know it was kind of slow on the screen.

00:17:35.060 --> 00:17:36.350
Maybe you think I've played some tricks.

00:17:36.510 --> 00:17:40.070
I've, in fact,
factored all of our OpenGL code

00:17:40.070 --> 00:17:45.010
into a format that's similar to what
OpenGL programmers are familiar with,

00:17:45.020 --> 00:17:49.430
basically the GLUT libraries or GLUT.

00:17:49.430 --> 00:17:49.430
I'm not sure how to say that.

00:17:49.940 --> 00:17:54.640
Here we initialize our
OpenGL state using standard OpenGL.

00:17:54.640 --> 00:17:56.900
Here we'll display our screen.

00:17:56.900 --> 00:18:02.980
If for some reason our display changes,
we can reshape all fairly

00:18:02.980 --> 00:18:04.870
familiar to OpenGL programmers.

00:18:05.210 --> 00:18:08.400
So that's Alphabet View,
the Screen Save Review subclass

00:18:08.460 --> 00:18:09.220
for Alphabet.

00:18:09.220 --> 00:18:11.720
Hopefully that's enough
to get you started.

00:18:11.720 --> 00:18:14.430
You see how easy it is to make a
screen save module first of all,

00:18:14.430 --> 00:18:18.100
and making a feature rich screen save
module isn't all that hard either.

00:18:18.100 --> 00:18:20.940
So that's my demo.

00:18:23.140 --> 00:18:25.380
Thanks.

00:18:28.940 --> 00:18:34.120
So, the system looks for screen
savers in a couple of locations.

00:18:34.120 --> 00:18:35.800
Basically in the library
screen savers directory.

00:18:35.800 --> 00:18:41.660
All screen saver modules are identified
by a specific file extension.

00:18:42.160 --> 00:18:45.560
We don't currently have a type or creator
reserved for screen saver modules,

00:18:45.560 --> 00:18:47.800
but we may reserve some in the future.

00:18:47.800 --> 00:18:51.380
That's all there is to know
about screen saver modules.

00:18:51.660 --> 00:18:54.350
I hope you all have fun writing them.

00:18:54.970 --> 00:18:56.490
You can start writing them today.

00:18:56.680 --> 00:18:59.670
Now I would like to introduce
Robert Bowers to talk to you about

00:18:59.760 --> 00:19:01.430
the System Preferences panel.

00:19:15.600 --> 00:19:50.500
[Transcript missing]

00:19:51.610 --> 00:19:54.300
The architecture for System Preferences
is fairly straightforward.

00:19:54.500 --> 00:19:56.860
It's a CFBundle.

00:19:56.860 --> 00:20:00.600
There's a preference pane framework that
handles the communication between the

00:20:00.600 --> 00:20:04.380
owning System Preference application
and your specific preference pane.

00:20:04.510 --> 00:20:07.920
In fact,
your specific preference pane has

00:20:07.920 --> 00:20:10.950
to inherit from the PrefPane class.

00:20:11.790 --> 00:20:17.100
It's worth noting that your preference
pane doesn't have any special access

00:20:17.100 --> 00:20:22.320
to the system over and above a
normal application on Mac OS X.

00:20:22.550 --> 00:20:24.630
This is an important point to reiterate.

00:20:24.770 --> 00:20:28.650
On Mac OS 9 there were occasions
where what you wanted to do really

00:20:28.650 --> 00:20:30.400
needed to be a control panel.

00:20:30.710 --> 00:20:32.240
That's not true on 10.

00:20:32.450 --> 00:20:35.670
There is no specific secret
hidden access into the OS that

00:20:35.770 --> 00:20:37.400
you get by being a Pref pane.

00:20:37.420 --> 00:20:44.850
It really is purely an HI affordance,
a presentation mechanism for the

00:20:44.850 --> 00:20:48.310
user to find certain controls.

00:20:48.830 --> 00:20:51.940
In fact, to drill on that point
just a little bit further,

00:20:52.070 --> 00:20:56.150
the recommended storage mechanism
that you use for whatever settings

00:20:56.150 --> 00:20:59.700
the user might be making in
your Pref pane is CFPreferences.

00:20:59.700 --> 00:21:02.580
But there's no requirement
on that whatsoever.

00:21:02.580 --> 00:21:04.970
You can frankly do just about
anything on the back end of

00:21:05.050 --> 00:21:08.560
the Pref pane that you want,
whether that's writing settings out to

00:21:08.560 --> 00:21:14.740
a file or stashing variables in NVRAM or
whatever wacky settings you want to do.

00:21:16.230 --> 00:21:17.700
My favorite topic.

00:21:17.700 --> 00:21:21.110
So let's talk about why not to make
a Pref pane because there's actually

00:21:21.160 --> 00:21:25.050
a number of reasons when people start
to make a Pref pane that we sort of

00:21:25.250 --> 00:21:26.840
encourage them to back up a little bit.

00:21:27.010 --> 00:21:29.060
So let's talk about those a little bit.

00:21:29.880 --> 00:21:34.430
So I said earlier that our user
model for Preference panes is that,

00:21:34.690 --> 00:21:36.880
therefore, cross-context configuration.

00:21:36.880 --> 00:21:42.170
So settings that belong to one
specific application don't fit

00:21:42.170 --> 00:21:43.680
well in System Preferences.

00:21:43.680 --> 00:21:47.260
Finder preferences, mail preferences,
iMovie preferences are all

00:21:47.590 --> 00:21:50.680
good examples of things not
to put in System Preferences.

00:21:50.680 --> 00:21:54.930
Now, there are occasionally a couple of
gotchas there because there is this

00:21:54.960 --> 00:21:57.670
whole concept of user-perceived settings.

00:21:57.800 --> 00:21:59.680
So it seems like back in the day,
we had a lot of people who

00:21:59.680 --> 00:21:59.680
were using the same thing.

00:21:59.680 --> 00:22:01.680
So we had the same
thing back in Mac OS X.

00:22:01.680 --> 00:22:06.730
We had the desktop picture
and finder preferences,

00:22:06.830 --> 00:22:09.800
which ended up being an odd fit
because from a user perspective,

00:22:09.810 --> 00:22:11.680
that's really a machine setting.

00:22:11.680 --> 00:22:15.540
That's cross-context of all
applications regardless of the technical

00:22:15.970 --> 00:22:17.680
implementation on the back end.

00:22:17.680 --> 00:22:20.540
So that was a case where
we specifically pulled that

00:22:20.540 --> 00:22:23.070
functionality into System Preferences.

00:22:24.000 --> 00:22:27.900
Another good time not to do a
Pref pane when doing real work.

00:22:27.960 --> 00:22:33.820
Again, there's this user concept that a
Preference pane is fairly lightweight,

00:22:33.900 --> 00:22:34.840
ephemeral settings.

00:22:34.950 --> 00:22:37.300
You shouldn't be able to
do any real damage with it.

00:22:37.300 --> 00:22:39.780
I've picked this radio button,
I've picked that radio button,

00:22:39.820 --> 00:22:40.940
it's all sort of whimsy.

00:22:40.940 --> 00:22:44.460
So anytime you're in a Pref pane
and you're writing code that

00:22:44.460 --> 00:22:48.640
feels like it's doing real work,
something's probably wrong.

00:22:48.660 --> 00:22:51.930
You probably shouldn't
really be doing a Pref pane.

00:22:52.120 --> 00:22:57.930
So examples: burning CDs or DVDs,
ripping MP3s, doing Sherlock searches,

00:22:58.090 --> 00:23:03.260
these are all things that just don't
fit well in the user's mental model

00:23:03.370 --> 00:23:05.690
of what constitutes a Pref pane.

00:23:07.600 --> 00:23:10.310
When you're simply providing
status or feedback,

00:23:10.400 --> 00:23:13.440
it's also not, pref panes really aren't
a good venue for that.

00:23:13.510 --> 00:23:17.650
Doing docklings or even a standalone
application with a window that provides

00:23:17.750 --> 00:23:20.290
status is a much better mechanism.

00:23:20.370 --> 00:23:23.930
When you're doing something that
uses an application document model,

00:23:24.000 --> 00:23:27.960
sort of the traditional
Macintosh document management,

00:23:27.960 --> 00:23:30.140
Address Book, iMovie,
these things don't fit

00:23:30.230 --> 00:23:31.300
well in a PrefPane.

00:23:31.300 --> 00:23:34.290
And this last one is sort of important.

00:23:34.290 --> 00:23:39.060
When doing something irreversible, again,
the user perception for PrefPanes

00:23:39.080 --> 00:23:42.300
is it's sort of hard to shoot
yourself in the foot with a PrefPane.

00:23:42.380 --> 00:23:45.260
So,
if you're doing something that there's

00:23:45.260 --> 00:23:49.980
no way to undo or easily switch back,
then a PrefPane is a really bad fit.

00:23:50.410 --> 00:23:54.170
Installing a software update
would be a bad thing to do.

00:23:54.450 --> 00:23:57.740
Now that's actually an interesting case
to talk about just a little bit because,

00:23:57.820 --> 00:24:00.290
of course,
we have a PrefPane for software updates.

00:24:00.340 --> 00:24:04.070
But if you look carefully,
we sort of have an escape there.

00:24:04.430 --> 00:24:06.690
The PrefPane is really only
about scheduling when the

00:24:06.690 --> 00:24:08.230
software updates get executed.

00:24:08.300 --> 00:24:11.280
When we actually find new software
and it gets ready to install,

00:24:11.360 --> 00:24:12.300
that gets launched.

00:24:12.300 --> 00:24:14.420
launched in a separate
application altogether.

00:24:14.430 --> 00:24:17.190
That's one of the reasons why.

00:24:19.330 --> 00:24:21.320
So let's talk about HI just briefly.

00:24:21.320 --> 00:24:23.100
There are a couple of
nuances to keep in mind.

00:24:23.460 --> 00:24:28.150
Here's what System Preferences
looks like these days.

00:24:29.720 --> 00:24:33.310
So you may have noticed one of the issues
about System Preferences is that all

00:24:33.310 --> 00:24:35.860
of the Pref panes have a fixed width.

00:24:36.100 --> 00:24:37.550
You just don't have
much control over that.

00:24:37.650 --> 00:24:40.150
That's the way the UI is implemented.

00:24:40.270 --> 00:24:44.410
Now, you can certainly customize
your own view and have a smaller

00:24:44.520 --> 00:24:49.600
view and we'll just center it
in the NSView for the Pref pane.

00:24:49.600 --> 00:24:51.080
Or you can make it bigger
and we can truncate it,

00:24:51.080 --> 00:24:52.840
but there's just not much
point in messing with it.

00:24:52.840 --> 00:24:55.440
You might as well stick
with a fixed width.

00:24:55.470 --> 00:24:59.600
Pref panes can have variable height,
but within reason.

00:24:59.810 --> 00:25:05.600
The Aqua UI is really designed to fit a
minimum screen dimension of 800 by 600.

00:25:05.600 --> 00:25:08.360
I think that's the original
iBook screen dimensions.

00:25:08.360 --> 00:25:12.920
Let's say you've got 600 pixels of height
and then you subtract some space for the

00:25:13.050 --> 00:25:18.020
menu bar and some more space for the dock
and you don't have a lot of room there.

00:25:18.050 --> 00:25:22.520
You've got some room for variation there,
but not a ton.

00:25:22.950 --> 00:25:25.360
and in general,
pref panes like any other application

00:25:25.440 --> 00:25:29.800
running on Mac OS X really should abide
by the Aqua Human Interface Guidelines.

00:25:30.950 --> 00:25:34.590
So I'm going to bring up to stage
Maxym Runov to do a brief demo on

00:25:34.590 --> 00:25:38.410
how to create your own pref pane
and then I'll be back in a moment.

00:25:44.830 --> 00:25:48.350
Hello, my name is Maxym Runov and I would
like to show you how simple it

00:25:48.400 --> 00:25:50.740
is to create a preference pane.

00:25:50.750 --> 00:25:54.160
The easiest way to do that is to use
Project Builder which has a number

00:25:54.160 --> 00:25:57.020
of templates for this kind of things.

00:25:57.610 --> 00:25:59.900
As you can see,
in your project window there

00:25:59.980 --> 00:26:01.500
is a list of templates.

00:26:01.530 --> 00:26:05.430
And here it is,
preference pane next to screen save.

00:26:06.640 --> 00:26:09.800
So let's give it a name.

00:26:09.860 --> 00:26:13.580
Template provides you with the standard
elements of preference pane bundle,

00:26:13.640 --> 00:26:17.820
such as resources,
and a subclass of NSPreferencePane

00:26:17.820 --> 00:26:21.100
which you can customize per your needs.

00:26:21.260 --> 00:26:26.100
Here is the subclass.

00:26:26.230 --> 00:26:28.290
Let's add a method here.

00:26:43.290 --> 00:26:50.200
Now let's open up a .amp
file and write some code.

00:26:50.200 --> 00:26:57.080
For this demo I'm going to
write very simple PrefPaint,

00:26:57.080 --> 00:27:00.020
so I'll just put an S BIP here.

00:27:03.820 --> 00:27:05.950
Now we can build user interface.

00:27:05.950 --> 00:27:08.470
I'm going to use Interface
Builder which is a standard tool

00:27:08.470 --> 00:27:12.010
to design user interface and to
establish connections between user

00:27:12.070 --> 00:27:14.800
interface elements and the code.

00:27:17.660 --> 00:27:20.900
First thing I'm going to do,
I'm going to import our header file

00:27:21.150 --> 00:27:25.300
that interface builder will know
about our class and what it can do.

00:27:31.610 --> 00:27:38.600
Now I'm going to set our class
to be owner of the Nib file.

00:27:38.600 --> 00:27:46.210
Nib file provided by the template
already has a window which is used

00:27:46.360 --> 00:27:48.410
as a main view for preference pane.

00:27:48.590 --> 00:27:52.420
For this demo, preference pane is going
to have only one button.

00:27:52.420 --> 00:27:57.000
So let's place it there and
let's connect it to our method.

00:27:59.650 --> 00:28:00.530
That's it.

00:28:00.590 --> 00:28:01.540
Pretty simple.

00:28:01.570 --> 00:28:04.910
Let's go back to
Project Builder and build it.

00:28:05.440 --> 00:28:09.240
If I didn't forget anything
it should build just fine.

00:28:09.280 --> 00:28:13.970
Of course your preference pane
will be more complicated than this.

00:28:15.790 --> 00:28:17.230
Okay, it's built.

00:28:17.280 --> 00:28:21.070
The last thing to do is to install
Preference Pane into one of standard

00:28:21.140 --> 00:28:24.040
locations searched by System Preferences.

00:28:24.040 --> 00:28:26.630
For this demo,
I'm going to put it into library

00:28:26.640 --> 00:28:30.850
preference folder within users
into preference pane folder

00:28:31.010 --> 00:28:33.360
within users library folder.

00:28:33.360 --> 00:28:38.740
So here is our build results, PrefPane,
drag it there.

00:28:38.740 --> 00:28:40.150
Now let's launch System Preference.

00:28:40.360 --> 00:28:43.980
Here it is, our Preference Pane.

00:28:44.840 --> 00:28:46.500
Here is our BIP.

00:28:46.550 --> 00:28:47.840
Pretty simple.

00:28:47.840 --> 00:28:49.760
Good luck.

00:28:49.770 --> 00:28:51.830
Back to you, Robert.

00:28:59.730 --> 00:29:02.790
Thanks Maxym.

00:29:02.840 --> 00:29:05.980
Okay, a couple of things to point
out that Maxym talked about

00:29:05.980 --> 00:29:08.760
or briefly touched upon.

00:29:09.090 --> 00:29:13.220
There are a couple of keys in
your PrefPanes property list that

00:29:13.220 --> 00:29:14.760
you'll want to look at closely.

00:29:14.820 --> 00:29:19.540
If you'll remember the,
or if you can remember the existing

00:29:19.540 --> 00:29:23.210
System Preferences in Mac OS X,
there are some PrefPane names that have

00:29:23.210 --> 00:29:25.970
actually wrapped to multiple lines.

00:29:26.360 --> 00:29:28.720
This might be an issue for
your specific PrefPane,

00:29:28.860 --> 00:29:30.620
specifically if you're
worried about localization.

00:29:30.620 --> 00:29:34.040
You may find that in English your
PrefPane fits on one line just fine,

00:29:34.080 --> 00:29:39.260
but you localize it to some language and
suddenly it needs two or three lines.

00:29:39.260 --> 00:29:44.860
So there is a value in the P list,
the NSPrefPane icon label,

00:29:44.860 --> 00:29:48.680
that will let you support wrapping
the name to multiple lines if need be.

00:29:48.720 --> 00:29:54.070
There's also the CFBundle icon file,
which points to what your PrefPane icon

00:29:54.080 --> 00:29:57.140
should look like in System Preferences.

00:29:57.140 --> 00:29:59.200
And then of course there's
the CFBundle identifier,

00:29:59.200 --> 00:30:02.740
which helps distinguish your
PrefPane from all other Prefs in

00:30:02.740 --> 00:30:04.060
the System Preferences application.

00:30:07.070 --> 00:30:11.130
Maxym mentioned briefly the
installation locations for preferences,

00:30:11.130 --> 00:30:13.850
not unlike the story with screen savers.

00:30:14.000 --> 00:30:18.000
It basically follows the
library preference panes folder.

00:30:18.050 --> 00:30:19.000
There are three locations.

00:30:19.000 --> 00:30:21.000
There's system library preference panes.

00:30:21.000 --> 00:30:23.860
That's really reserved
for Apple pref panes only.

00:30:24.180 --> 00:30:25.350
We're trying to...

00:30:26.880 --> 00:30:29.710
We'll also learn how to solve
this user issue that we had on

00:30:29.710 --> 00:30:33.360
Mac OS 9 where the confusion between
Apple provided products and third

00:30:33.460 --> 00:30:33.800
party products got a little onerous.

00:30:33.800 --> 00:30:40.320
So we really have one install location
for all of the Apple Pref panes

00:30:40.350 --> 00:30:42.600
and we try and keep that reserved.

00:30:42.790 --> 00:30:46.440
There's Library Preference Panes,
which is where all Pref Panes get

00:30:46.440 --> 00:30:49.700
installed that you want available
for all users on the machine.

00:30:49.700 --> 00:30:54.850
And then there's Tilda Library Pref Panes
for the currently logged in user only.

00:30:56.590 --> 00:31:02.830
I want to point out an example of a
third party Pref pane that exists today.

00:31:07.120 --> 00:31:12.470
So here's a pref called DocDisk.

00:31:12.470 --> 00:31:16.890
So there it is, very straightforward,
follows the Aqua UI,

00:31:18.100 --> 00:31:18.860
works just like a dream.

00:31:19.450 --> 00:31:23.610
Even works on the latest build.

00:31:25.620 --> 00:31:26.580
So that's about it.

00:31:26.650 --> 00:31:29.420
Pref panes are lots of fun,
very straightforward,

00:31:29.550 --> 00:31:31.480
very easy to get into.

00:31:31.650 --> 00:31:34.130
I would encourage you all again,
be careful when you

00:31:34.190 --> 00:31:35.220
decide to do a pref pane.

00:31:35.220 --> 00:31:38.460
Make sure you're doing something
that fits the user's model of when

00:31:38.460 --> 00:31:39.980
a pref pane should be utilized.

00:31:40.100 --> 00:31:41.230
And don't do any work.

00:31:44.460 --> 00:31:46.220
Once again, I hit the button twice.

00:31:46.270 --> 00:31:49.600
Next, I'm going to bring up Grace Kvamme,
and she's going to talk

00:31:49.600 --> 00:31:51.400
to you about Disk Images.

00:31:51.400 --> 00:31:52.400
Great.

00:31:52.400 --> 00:31:53.400
Thanks, Robert.

00:31:53.400 --> 00:31:55.400
Sorry, I should have walked off first.

00:31:58.600 --> 00:32:01.600
I'm Grace Kvamme, and I'm an
Internet Product Manager at Apple.

00:32:01.600 --> 00:32:04.620
And I'm going to talk a little
bit about what you do after you've

00:32:04.770 --> 00:32:09.350
finished your app and you're ready
to distribute it over the Internet.

00:32:14.290 --> 00:32:16.480
So let's talk a little
bit about the goals.

00:32:16.730 --> 00:32:21.490
Obviously we want downloads to be as easy
and full proof as possible for the user.

00:32:22.130 --> 00:32:28.200
Currently they could be more easy
and a little bit more full proof.

00:32:28.560 --> 00:32:33.660
The process now is where
a user clicks to download,

00:32:33.660 --> 00:32:40.200
they have a file on their desktop
which they then have to decompress,

00:32:40.340 --> 00:32:44.200
install,
and then remove from their desktop.

00:32:44.200 --> 00:32:46.200
So it's quite a lot of steps.

00:32:46.200 --> 00:32:49.570
One of the things that we're trying
to do with this process is to

00:32:49.570 --> 00:32:54.120
minimize the number of steps and
to get it down as few as possible.

00:32:54.200 --> 00:32:57.200
We also want to lead the
user through the process.

00:32:57.200 --> 00:33:02.200
So that they have quite a lot of success
in getting what they want to do done.

00:33:02.200 --> 00:33:08.090
And then lastly, obviously security is
an important feature.

00:33:08.200 --> 00:33:12.420
We want to try to prevent any
viruses from being installed on

00:33:12.440 --> 00:33:15.200
the user's system or chosen horses.

00:33:18.540 --> 00:33:21.060
Let's talk about the proposed
process for the user.

00:33:21.360 --> 00:33:23.660
Again,
we're trying to minimize the number

00:33:23.660 --> 00:33:25.400
of steps that they have to go through.

00:33:25.810 --> 00:33:28.670
Really, it's a three-step process,
only two of which the

00:33:28.670 --> 00:33:30.290
user has to interact with.

00:33:30.400 --> 00:33:33.400
The first thing is to click to download.

00:33:33.400 --> 00:33:36.350
And then second,
we propose bringing up an

00:33:36.350 --> 00:33:40.700
"Are you sure?" dialog box so
that nothing can be installed

00:33:40.700 --> 00:33:43.400
automatically on the user system.

00:33:43.400 --> 00:33:46.900
And then lastly,
we'll do an install or copy

00:33:46.900 --> 00:33:49.160
to the applications folder.

00:33:49.400 --> 00:33:53.330
So what this means is the user never
has to hunt around on their system

00:33:53.450 --> 00:33:56.400
for the file that was downloaded.

00:33:56.610 --> 00:33:58.400
They never have to decompress the file.

00:33:58.400 --> 00:34:00.310
We do that automatically for them.

00:34:00.410 --> 00:34:05.400
And they never have to clean up
their system from unnecessary files.

00:34:05.400 --> 00:34:08.400
We move that automatically
to the trash for them.

00:34:10.300 --> 00:34:12.410
So how do we propose that we
do this and what tools are

00:34:12.410 --> 00:34:15.640
we making available to do it?

00:34:15.640 --> 00:34:21.020
There's a couple things that are
possible for bundling your application.

00:34:21.020 --> 00:34:26.580
The first one is application bundles
and the second is installer packages.

00:34:26.580 --> 00:34:31.180
Application bundles are recommended and
that you use them whenever possible.

00:34:31.180 --> 00:34:35.000
And that's as many of you know
because you can just drag and drop

00:34:35.000 --> 00:34:37.100
them into your applications folder.

00:34:37.190 --> 00:34:39.070
They don't need to be installed.

00:34:39.080 --> 00:34:42.000
And And those can be
created with PackageMaker.

00:34:42.460 --> 00:34:47.160
Installer packages are sometimes
necessary because your app may need to

00:34:47.160 --> 00:34:52.600
have different files located on a variety
of different places on the system.

00:34:52.920 --> 00:34:56.910
In addition to installation,
they'll display a licensing agreement,

00:34:57.110 --> 00:35:01.370
they'll let the user decide
where to install if you want

00:35:01.550 --> 00:35:02.800
that to be a possibility.

00:35:02.800 --> 00:35:05.800
To create them,
you use Apple's installer.

00:35:05.800 --> 00:35:10.520
I'm not going to go into depth into
these two tools because Jean-Pierre,

00:35:10.520 --> 00:35:12.510
after me, will do that.

00:35:14.700 --> 00:35:18.960
The third tool that you have at
your disposal is Disk Images.

00:35:18.960 --> 00:35:23.900
And similar to stuff it or zip it files,
Disk Images archive

00:35:23.900 --> 00:35:26.470
files and compress them.

00:35:26.810 --> 00:35:30.910
But the difference with
Disk Images in Jaguar is that

00:35:30.910 --> 00:35:33.700
we'll enable post download actions.

00:35:33.700 --> 00:35:37.570
What do I mean by this?

00:35:38.180 --> 00:35:41.750
Some of the new features that
we're implementing for Jaguar

00:35:41.760 --> 00:35:45.930
are things that will enable this
process that I described earlier.

00:35:46.100 --> 00:35:51.400
So displaying the RUsure dialog box,
copying the app packages

00:35:51.620 --> 00:35:56.320
to an applications folder,
launching the installer,

00:35:56.550 --> 00:36:08.100
opening documents,
and then the installation.

00:36:08.100 --> 00:36:08.100
This could be if the thing that the
user has downloaded is a document

00:36:08.100 --> 00:36:08.100
or if you need to add more detailed
instructions to your installation,

00:36:08.100 --> 00:36:12.100
you could launch a
document at that point.

00:36:12.100 --> 00:36:15.730
It will also move disk
images to the trash.

00:36:19.120 --> 00:36:22.330
So some of you may be wondering
how do I create a Disk image?

00:36:22.450 --> 00:36:25.540
Well if you haven't ever done
this before it's very simple.

00:36:25.570 --> 00:36:28.800
Use Disk Copy to do that,
which you would find in

00:36:28.890 --> 00:36:30.390
your Utilities folder.

00:36:30.700 --> 00:36:33.730
You simply create a blank image.

00:36:33.730 --> 00:36:36.980
You customize the size and format
of your image so that it's big

00:36:36.980 --> 00:36:38.890
enough for your particular app.

00:36:39.000 --> 00:36:42.670
You simply drag your files to that image.

00:36:42.710 --> 00:36:46.180
Specify any post download
actions that you might want.

00:36:46.270 --> 00:36:48.980
And that will be in the
GUI or in a command line.

00:36:48.980 --> 00:36:53.360
And then format it as read
only because you don't want the

00:36:53.360 --> 00:36:55.890
user modifying your disk image.

00:36:58.010 --> 00:36:59.900
So that's basically it.

00:36:59.900 --> 00:37:05.700
It's a very simple process and we
hope both for the user and for you.

00:37:05.950 --> 00:37:10.310
To recap the process that we
suggest for the user is it

00:37:10.490 --> 00:37:11.860
could be down to two steps.

00:37:11.940 --> 00:37:16.900
Clicking to download and then clicking
on "Are you sure?" dialog box.

00:37:17.110 --> 00:37:20.900
And we would do all the
work behind the scenes.

00:37:20.900 --> 00:37:25.590
Downloading the file, decompressing it,
putting it in the right place,

00:37:25.590 --> 00:37:27.900
and removing any unnecessary files.

00:37:29.100 --> 00:37:33.370
The only time where a third step might
be necessary is if you're doing an

00:37:33.370 --> 00:37:38.040
installation and the user would go
through the regular installation process.

00:37:40.080 --> 00:37:41.000
So that's Disk Images.

00:37:41.000 --> 00:37:43.570
I'm going to take questions later,
but at this point I'm going to

00:37:43.630 --> 00:37:46.380
bring up Jean-Pierre Ciuda to
talk a little bit more about

00:37:46.460 --> 00:37:49.210
Package Maker and the installer.

00:37:54.100 --> 00:37:56.900
Thank you, Grace.

00:37:56.930 --> 00:38:00.280
So my name is Jean-Pierre Ciuda.

00:38:00.280 --> 00:38:04.010
I'm going to talk to you today
about the Mac OS X Installer.

00:38:04.230 --> 00:38:07.670
So as you know,
the Mac OS X installer was initially

00:38:07.780 --> 00:38:11.100
designed to install the operating system.

00:38:11.110 --> 00:38:14.200
Now with Jaguar,
we are trying to address some of

00:38:14.410 --> 00:38:18.710
the features that we were asked
to do for application installs.

00:38:18.880 --> 00:38:22.500
In Jaguar, we've done a lot of bug fixes.

00:38:22.630 --> 00:38:26.430
We've added a lot of new features,
and we've improved also the main

00:38:26.430 --> 00:38:30.160
tool used to create packages,
which is Package Maker.

00:38:30.220 --> 00:38:34.100
I'm going to talk to you today
about a few of these bug fixes,

00:38:34.160 --> 00:38:37.600
features, and Package Maker features.

00:38:37.600 --> 00:38:38.510
So bug fixes.

00:38:38.730 --> 00:38:40.790
The first one is modification dates.

00:38:40.790 --> 00:38:45.040
I don't know if some of you noticed,
but when you install a package on top of

00:38:45.040 --> 00:38:48.940
Mac OS X using the Apple installer today,
the files do not appear right

00:38:49.060 --> 00:38:50.560
away in the Finder window.

00:38:50.560 --> 00:38:53.240
I wish I could have
blamed it on the Finder,

00:38:53.400 --> 00:38:55.610
but unfortunately this
is a installer bug,

00:38:55.610 --> 00:38:56.880
a bad installer bug.

00:38:56.880 --> 00:38:57.720
So we fixed that.

00:38:57.720 --> 00:38:58.740
We now changed the modification date.

00:38:58.780 --> 00:39:02.580
We changed the modification date of the
enclosing folders that we're touching,

00:39:02.620 --> 00:39:06.210
causing the Finder to basically
refresh the window and the

00:39:06.290 --> 00:39:08.400
files appear right away.

00:39:08.400 --> 00:39:12.160
We've also added a flag to the package.

00:39:12.160 --> 00:39:16.780
When the flag is turned on, basically,
the installer will only update

00:39:17.010 --> 00:39:19.450
existing languages that are installed.

00:39:19.450 --> 00:39:22.650
So for example,
if you've installed an application

00:39:22.680 --> 00:39:27.090
in German and in French and you're
now updating to your new version,

00:39:27.090 --> 00:39:29.520
you will only update
the language in French.

00:39:29.680 --> 00:39:31.930
And you won't end up with
200 languages -- well,

00:39:32.060 --> 00:39:37.500
not 200, maybe 30 or 13.

00:39:37.500 --> 00:39:41.770
We're also going to re-enable
multiple simultaneous installations.

00:39:41.770 --> 00:39:45.180
So you will be able to double-click
several packages -- well,

00:39:45.370 --> 00:39:47.480
one after the other,
and they will open in

00:39:47.600 --> 00:39:52.120
three separate windows,
and they will all install concurrently.

00:39:52.210 --> 00:39:55.820
If they required some optimization,
the optimization will only occur

00:39:55.900 --> 00:39:58.300
at the end of the third package.

00:39:58.720 --> 00:40:00.480
Thank you.

00:40:03.130 --> 00:40:08.510
We're also adding a flag to the
package that will allow you to tell

00:40:08.640 --> 00:40:10.900
the installer to follow symlinks.

00:40:10.920 --> 00:40:13.640
So I know that's something we
had a lot of requests for that,

00:40:13.640 --> 00:40:16.780
so we're doing it for Jaguar.

00:40:16.780 --> 00:40:19.060
It will be off by default,
and the reason for that

00:40:19.120 --> 00:40:23.660
is because we want to stay
compatible with the old packages.

00:40:23.660 --> 00:40:27.530
We're also adding a new flag in the
package that will allow you to specify

00:40:28.030 --> 00:40:30.710
the admin level of authorization.

00:40:30.710 --> 00:40:34.380
Right now,
if you say that the package requires

00:40:34.380 --> 00:40:38.050
authorization for installation,
every single user will

00:40:38.050 --> 00:40:42.320
be asked to authenticate,
and we will install as root.

00:40:42.320 --> 00:40:46.820
We're going to add a flag that
requires only admin privileges.

00:40:46.860 --> 00:40:50.690
So for example, if you're installing
something in /applications,

00:40:50.750 --> 00:40:54.130
and what will happen is
that when that flag is set,

00:40:54.130 --> 00:40:57.700
if the user is already an admin user,
you won't be able to and the

00:40:57.810 --> 00:41:00.890
installer will just go through.

00:41:08.100 --> 00:41:14.200
[Transcript missing]

00:41:14.790 --> 00:41:16.370
File Hinting.

00:41:16.370 --> 00:41:21.460
File Hinting is the ability to
specify some special handling

00:41:21.460 --> 00:41:23.610
instructions for certain files.

00:41:23.700 --> 00:41:26.260
So for example,
if you are installing a configuration

00:41:26.260 --> 00:41:29.940
file and there is already a
configuration file existing,

00:41:29.940 --> 00:41:32.830
you might not want to override
it if the user has changed it.

00:41:32.960 --> 00:41:34.460
So that could be a hint.

00:41:34.530 --> 00:41:37.720
We're going to provide you
with a fixed number of hints

00:41:37.720 --> 00:41:39.680
that you will be able to use.

00:41:39.680 --> 00:41:43.700
So for example,
do not override a modified file.

00:41:43.700 --> 00:41:48.040
Another hint could be, for example,
to say that you want to save

00:41:48.070 --> 00:41:51.700
this configuration file and still
replace it with your new file.

00:41:51.700 --> 00:41:57.800
So we're going to have a fixed number
of these and they will be documented,

00:41:57.800 --> 00:41:58.700
of course.

00:41:58.700 --> 00:42:02.230
We're also going to provide you
with the ability to find the

00:42:02.420 --> 00:42:04.700
application bundles to upgrade.

00:42:04.700 --> 00:42:09.940
So if the user moved their
mail.app somewhere else,

00:42:10.290 --> 00:42:12.700
you will be able to find
it before installing.

00:42:12.700 --> 00:42:16.780
So when I say you,
I mean you the developer will be

00:42:16.780 --> 00:42:22.360
able to provide some instructions
on how to find the application.

00:42:22.510 --> 00:42:27.700
And that will be the application
that you will be upgrading.

00:42:27.700 --> 00:42:32.020
We're also going to allow you
to customize the background

00:42:32.020 --> 00:42:34.090
window of the installer.

00:42:34.090 --> 00:42:38.320
Right now it's the picture of
a CD-ROM with a big X on it.

00:42:38.320 --> 00:42:41.700
So we're going to allow
you to change that.

00:42:41.700 --> 00:42:45.060
And then we're going to
add a new package format.

00:42:45.060 --> 00:42:48.580
The package is now going
to be a standard CFBundle.

00:42:48.580 --> 00:42:52.660
All the information that we
store in there will be in plist.

00:42:52.660 --> 00:42:56.700
So it will be adopting basically
a Cocoa and foundation.

00:42:58.000 --> 00:43:00.270
Packagemaker.

00:43:00.400 --> 00:43:03.580
So just a little correction
I noticed in the previous slide.

00:43:04.070 --> 00:43:08.910
Packagemaker is the tool you use
to create installer packages.

00:43:09.130 --> 00:43:14.800
So when you want to put your application
into a package you would use Packagemaker

00:43:14.800 --> 00:43:15.980
and you wouldn't use the installer.

00:43:16.000 --> 00:43:22.800
So Packagemaker will be used to create
new style packages and meta packages.

00:43:22.800 --> 00:43:26.000
I mentioned to you that we're
improving the package format.

00:43:26.000 --> 00:43:30.240
We definitely encourage you to use
this new package format because all

00:43:30.240 --> 00:43:33.200
new features we're adding on the
installer will be available only

00:43:33.370 --> 00:43:36.390
to new package and meta packages.

00:43:36.580 --> 00:43:41.190
Packagemaker will now
verify the package validity.

00:43:41.300 --> 00:43:44.240
So it will double,
you will be able to import a package.

00:43:44.270 --> 00:43:47.850
You will be able to make sure that
basically everything is correct.

00:43:47.950 --> 00:43:49.850
So all the necessary files are there.

00:43:50.260 --> 00:43:55.500
All the scripts have the executable
bit set and things like that.

00:43:55.500 --> 00:43:58.500
We are planning to add
support for all known flags.

00:43:58.500 --> 00:44:01.480
I've been talking about three
or four flags that we're

00:44:01.480 --> 00:44:02.500
adding to the package format.

00:44:02.500 --> 00:44:07.100
All these flags will be
documented in Packagemaker.

00:44:07.100 --> 00:44:10.500
You will have online help and you
will be able to know what it's about.

00:44:10.500 --> 00:44:14.700
We're also planning to add
support for file hinting.

00:44:14.700 --> 00:44:20.240
So all the hints that we will be able
to implement by the time we ship Jaguar

00:44:20.320 --> 00:44:23.500
will be documented in Packagemaker.

00:44:23.500 --> 00:44:23.970
We're also providing a lot of
information about the package.

00:44:23.970 --> 00:44:24.500
So if you have any questions,
please feel free to ask.

00:44:24.500 --> 00:44:25.500
We're also providing a lot of
information about the package.

00:44:25.500 --> 00:44:25.500
So if you have any questions,
please feel free to ask.

00:44:25.500 --> 00:44:26.860
the command line tool.

00:44:26.860 --> 00:44:31.220
This is important if you're having
built scripts and you want to

00:44:31.230 --> 00:44:35.010
directly create your package.

00:44:35.080 --> 00:44:37.500
And package makers are
a work in progress.

00:44:37.530 --> 00:44:39.670
So as we go, we will improve it.

00:44:39.760 --> 00:44:41.830
And we will ship it via the developer CD.

00:44:41.980 --> 00:44:45.920
So it's not something that's going to
be shipping only on the OS releases.

00:44:45.920 --> 00:44:50.670
We're planning to improve it, and also,
we're planning to implement

00:44:50.670 --> 00:44:52.210
a lot of your feedback.

00:44:55.450 --> 00:44:58.700
In conclusion,
drag install is always the best

00:44:58.700 --> 00:45:01.890
way to install an application
in the applications folder.

00:45:01.980 --> 00:45:07.280
So you should only use installer
packages if you are planning to

00:45:07.480 --> 00:45:09.900
install something somewhere else.

00:45:10.040 --> 00:45:12.900
We have some future plans, of course.

00:45:12.900 --> 00:45:16.990
It's difficult for me to
talk about it in detail,

00:45:16.990 --> 00:45:19.900
but we're looking at things like,
of course, better tools.

00:45:19.950 --> 00:45:22.110
We're looking at things
like package management,

00:45:22.110 --> 00:45:24.900
we're looking at removing packages,
and things like that.

00:45:24.900 --> 00:45:31.980
And of course, if you have some feedback,
please email John Geleynsse,

00:45:31.980 --> 00:45:33.900
which is going to come back
to the podium right now.

00:45:33.900 --> 00:45:36.400
Thank you.

00:45:45.300 --> 00:45:49.860
Okay,
well let's just look at the road map.

00:45:49.860 --> 00:45:52.640
Again, if you came in late and you were
wondering what in the world screen

00:45:52.720 --> 00:45:58.060
savers had to do with Package Maker,
the answer is nothing.

00:45:58.060 --> 00:46:00.300
This session was four different topics.

00:46:00.300 --> 00:46:02.520
The last two that were related,
the first two that were

00:46:02.520 --> 00:46:04.750
completely unrelated.

00:46:04.980 --> 00:46:06.400
in case you're wondering.

00:46:06.400 --> 00:46:09.150
So here's a bunch of sessions
this week that relate to sort

00:46:09.150 --> 00:46:14.570
of the user experience overall,
some that were this morning.

00:46:14.570 --> 00:46:16.920
Today we talked about
screen savers and screen,

00:46:16.920 --> 00:46:19.450
and system preference panels,
how to do that, or panes.

00:46:19.450 --> 00:46:21.680
You need to know how to
write software in Cocoa,

00:46:21.680 --> 00:46:24.760
and if you don't know how to do that,
there's some good

00:46:24.760 --> 00:46:26.500
Cocoa sessions to go to.

00:46:26.500 --> 00:46:28.380
Using Interface Builder if
you've never used that tool,

00:46:28.380 --> 00:46:30.110
you need to learn how to use
that tool before you can create

00:46:30.110 --> 00:46:33.020
the UI for a system pref pane,
et cetera.

00:46:33.020 --> 00:46:35.340
So if you have any feedback
on this session or any of

00:46:35.340 --> 00:46:38.340
the content provided here,
or if there's something about the

00:46:38.340 --> 00:46:41.040
APIs that we've talked about today
that you would like to see enhanced,

00:46:41.100 --> 00:46:44.260
or, you know, you need some assistance
with any of this stuff,

00:46:44.340 --> 00:46:47.840
feel free to contact me
in developer relations,

00:46:47.840 --> 00:46:50.550
and I can drive your issues
back into engineering and try to

00:46:50.550 --> 00:46:56.290
get them resolved or addressed,
or I can also try to get the answers

00:46:56.290 --> 00:46:57.340
to any questions that you've got.