WEBVTT

00:00:04.400 --> 00:00:09.510
Please welcome Brett Halle,
Director of Core OS Engineering.

00:00:16.950 --> 00:00:21.900
Good afternoon.

00:00:21.900 --> 00:00:25.840
We're going to spend a little bit
of time today and talk about Darwin.

00:00:25.860 --> 00:00:30.730
Darwin is the bottom layer of Mac OS X.

00:00:30.730 --> 00:00:33.910
If you're interested in
focusing a little bit on the

00:00:33.910 --> 00:00:37.690
plumbing and that kind of stuff,
this is the right place to be.

00:00:37.690 --> 00:00:37.690
Darwin is the powerful,
open source foundation of Mac OS X.

00:00:38.970 --> 00:00:42.950
I think this picture actually
kind of really misrepresents

00:00:43.080 --> 00:00:45.540
the importance of Darwin,
so let's see.

00:00:45.540 --> 00:00:46.180
Ah, that's better.

00:00:46.180 --> 00:00:48.780
I think that's a little bit better.

00:00:48.780 --> 00:00:53.920
Like I said, Darwin really is kind of the
bottom layer of Mac OS X.

00:00:53.920 --> 00:00:57.060
It's the foundation upon
which the system is built.

00:00:57.180 --> 00:01:00.290
We're going to spend a little
bit of time in this session and

00:01:00.290 --> 00:01:03.930
give you a really brief overview
of what the technologies are,

00:01:04.280 --> 00:01:06.680
although probably most of you
know what those things are,

00:01:06.680 --> 00:01:09.240
but we want to spend a little bit
more time and tell you a little bit

00:01:09.240 --> 00:01:12.350
about what we've been doing as far as
Jaguar is concerned and the kinds of

00:01:12.350 --> 00:01:15.430
services and facilities that you'll
want to be able to take advantage of.

00:01:16.730 --> 00:01:19.320
Like I said,
you really need to think of the

00:01:19.320 --> 00:01:22.530
Core OS and Darwin as really
the foundation of the building.

00:01:22.580 --> 00:01:27.700
All the rest of
Mac OS X sits on top of it.

00:01:27.780 --> 00:01:32.900
It supports all the frameworks and all
the other stuff that make up the system.

00:01:32.900 --> 00:01:37.980
A lot of our job is to really be as
invisible as possible to everybody,

00:01:37.980 --> 00:01:41.680
because we are that plumbing in the
walls and the stuff on the bottom.

00:01:41.680 --> 00:01:44.860
For Jaguar,
we've been doing a bit of digging

00:01:44.860 --> 00:01:47.910
of some things up and putting
in some new plumbing and stuff.

00:01:48.030 --> 00:01:51.520
We'll talk a little bit about some of
the new plumbing work we've been doing.

00:01:51.520 --> 00:01:55.480
Hopefully,
you'll find this to be pretty exciting.

00:01:55.480 --> 00:01:58.510
First, let's start with Mach.

00:01:58.760 --> 00:02:03.220
Mach is the actual base, if you will,
of Mac OS X.

00:02:03.220 --> 00:02:07.330
It's responsible for managing
all the processor resources and

00:02:07.350 --> 00:02:08.880
memory resources of the system.

00:02:08.880 --> 00:02:13.660
Architecturally,
you might consider Mach as a microkernel,

00:02:13.660 --> 00:02:15.400
but the way we've built
it into the system,

00:02:15.640 --> 00:02:18.850
it's very highly integrated into
the rest of the kernel environment.

00:02:18.860 --> 00:02:22.980
Its job really is to be able
to be a policy-neutral layer

00:02:22.980 --> 00:02:25.950
of the system to manage the
processor and memory resources.

00:02:25.960 --> 00:02:29.610
What's really important to note
about Mach and why it is important

00:02:29.610 --> 00:02:33.990
to the people in this room is that
everything else is built on top of Mach.

00:02:34.090 --> 00:02:39.130
All the process models that exist in the
system are fundamentally built on top

00:02:39.180 --> 00:02:42.140
of Mach's concepts of tasks and threads.

00:02:42.140 --> 00:02:45.160
And that all memory management in
the system is built on top of Mach.

00:02:45.160 --> 00:02:52.560
All the kind of backing store management,
the actual handling of virtual memory and

00:02:52.630 --> 00:02:54.780
paging is all ultimately handled by Mach.

00:02:54.780 --> 00:03:01.000
And all the communication between
processes and between the user land

00:03:01.390 --> 00:03:05.220
applications in the kernel are primarily
built on top of Mach primitives.

00:03:05.390 --> 00:03:09.040
So it's important to realize
that these are really pretty

00:03:09.040 --> 00:03:11.250
important building blocks,
and you'll see bits and

00:03:11.250 --> 00:03:14.680
pieces of Mach kind of expose
itself through other services.

00:03:14.740 --> 00:03:16.800
And you'll see bits and pieces of
Mach that are all the way up into

00:03:16.800 --> 00:03:19.490
things like CF network and above.

00:03:19.680 --> 00:03:23.740
So it's important to realize that
this is a key part of the system.

00:03:25.470 --> 00:03:28.870
For Mac, on top of Mac,
or tightly integrated with Mac,

00:03:28.870 --> 00:03:30.180
is the BSD Kernel.

00:03:30.180 --> 00:03:33.860
This is really what
provides the OS personality,

00:03:33.860 --> 00:03:35.840
if you will, for the system.

00:03:35.840 --> 00:03:41.480
This is where policy is actually
brought into the picture.

00:03:41.480 --> 00:03:45.790
For us, this Mac Kernel is based
on the BSD 4.4 Lite,

00:03:45.790 --> 00:03:50.890
plus we've spent quite a bit of time
integrating it with Mac and I/O Kit,

00:03:50.890 --> 00:03:52.250
our IO system.

00:03:53.180 --> 00:03:56.800
It provides a higher level
view of the process model,

00:03:56.800 --> 00:04:01.520
handling things like signals and resource
reaping and other things of that nature.

00:04:01.520 --> 00:04:06.420
It also introduces some of the mechanism
for handling some of the system security,

00:04:06.420 --> 00:04:10.360
by having a concept of
users and being able to,

00:04:10.360 --> 00:04:12.540
through the file system and
other parts of the system,

00:04:12.540 --> 00:04:15.650
enforce various forms of
ownership and permissions.

00:04:15.660 --> 00:04:18.760
As I mentioned,
it really is responsible for

00:04:18.760 --> 00:04:23.140
providing the OS personality,
if you will, of the system.

00:04:23.160 --> 00:04:31.340
All of the high-level APIs for the OS are
ultimately exported through the BSD APIs.

00:04:32.900 --> 00:04:35.570
For Jaguar,
we've done a number of interesting

00:04:35.680 --> 00:04:37.060
things down at the low-level kernel.

00:04:37.060 --> 00:04:42.190
One is we've done some interesting
changing with how we handle panics.

00:04:42.410 --> 00:04:45.940
One of those things you should,
of course, rarely ever see.

00:04:45.940 --> 00:04:49.250
But if you happen to be developing
a drive or something like that

00:04:49.250 --> 00:04:52.630
and something goes haywire,
well, the system will panic.

00:04:53.650 --> 00:04:58.050
And you've probably seen with the
existing 10.1 system that it splashes

00:04:58.050 --> 00:05:01.280
a whole bunch of stuff on the screen,
at which point you have to sit

00:05:01.280 --> 00:05:04.160
there with a pencil and paper and
jot it all down because there's

00:05:04.160 --> 00:05:05.780
actually useful information in there.

00:05:05.780 --> 00:05:09.700
Well, one of the things we've done
with Jaguar is actually capture

00:05:09.700 --> 00:05:11.270
all the state of a panic.

00:05:11.300 --> 00:05:18.060
And this information gets stored away and
saved across the reboot of the system.

00:05:18.060 --> 00:05:22.010
The next time the system is booted,
as long as it wasn't powered down,

00:05:22.010 --> 00:05:25.360
it will actually collect the...
the panic state information,

00:05:25.360 --> 00:05:28.730
and this actually gets logged
into the crash catcher application

00:05:28.730 --> 00:05:30.450
that's part of Mac OS X.

00:05:30.460 --> 00:05:32.460
At which point, then,
you can just cut and paste,

00:05:32.520 --> 00:05:34.250
which is certainly a lot more enjoyable.

00:05:34.260 --> 00:05:37.820
And hopefully,
if you unfortunately find a bug of ours,

00:05:37.840 --> 00:05:41.780
you can just cut and paste that
and send it off as a bug report.

00:05:41.780 --> 00:05:45.160
We've also done a bit of work
in the kernel with processor

00:05:45.160 --> 00:05:48.660
scheduling improvements,
particularly in multiple

00:05:48.660 --> 00:05:52.980
CPU environments,
so that there's now the ability...

00:05:52.980 --> 00:05:55.920
Right now... As of... Today,
you can... The kernel is

00:05:55.920 --> 00:05:59.660
preemptible at multiple levels,
and we've added additional capability

00:05:59.660 --> 00:06:04.160
in multiple CPU environments
for there to be cross-processor

00:06:04.160 --> 00:06:06.640
preemption signaling to occur,
as well as to start

00:06:06.640 --> 00:06:10.300
introducing some mechanisms for
supporting processor affinity,

00:06:10.300 --> 00:06:15.310
so that efficient action of executing
thread doesn't end up getting

00:06:15.310 --> 00:06:19.570
moved from processor to processor
and losing all the cache state.

00:06:19.580 --> 00:06:23.600
In the VM system,
there's been some pretty... Yeah.

00:06:23.720 --> 00:06:26.220
exciting stuff,
as far as performance work is concerned.

00:06:26.220 --> 00:06:28.050
And two primary things.

00:06:28.080 --> 00:06:31.580
One is what we call an
application... Basically,

00:06:31.580 --> 00:06:33.040
an adaptive application profile.

00:06:33.040 --> 00:06:35.490
And what ends up happening is,
is when an application is

00:06:35.490 --> 00:06:38.460
launched on the system,
the kernel actually pays

00:06:38.570 --> 00:06:42.420
attention to the VM activity
during that particular process,

00:06:42.420 --> 00:06:46.720
and effectively snapshots, you know,
a profile of what occurred

00:06:46.740 --> 00:06:48.090
during the launch.

00:06:48.220 --> 00:06:50.250
And the next time you
launch that application,

00:06:50.250 --> 00:06:53.100
the kernel will actually take
advantage of the fact that it knows,

00:06:53.150 --> 00:06:56.640
and is able... is able to effectively
read ahead and do additional work

00:06:56.640 --> 00:07:00.020
to make the process of loading
the application a lot faster.

00:07:00.020 --> 00:07:04.220
That's for the launching
of an application.

00:07:04.300 --> 00:07:07.190
When actually running an application,
there's a... what we

00:07:07.190 --> 00:07:10.380
call a working set cache,
where basically an application's,

00:07:10.380 --> 00:07:14.330
you know, set of hot pages that are
being used to execute the

00:07:14.330 --> 00:07:16.690
application are kept track of.

00:07:16.720 --> 00:07:20.230
And when you swap between, you know,
or context switch between

00:07:20.230 --> 00:07:23.640
multiple applications,
the kernel will actually... the

00:07:23.640 --> 00:07:26.170
kernel will actually be very smart,
again, about being able to try and keep,

00:07:26.240 --> 00:07:30.210
you know, the right things in memory,
so you're not spending a lot of time

00:07:30.210 --> 00:07:32.920
reading and writing process state.

00:07:33.060 --> 00:07:35.350
And, of course, again,
there's this kind of caching

00:07:35.350 --> 00:07:39.380
process... or the... being able
to do read-aheads and other

00:07:39.450 --> 00:07:42.240
types of collective IO behavior.

00:07:42.240 --> 00:07:45.350
In the P-threads environment,
which affects certainly most of

00:07:45.350 --> 00:07:48.940
the threading models that most of
the application environments use,

00:07:48.980 --> 00:07:53.970
we've added per-thread signal capability,
and added a number of... a number

00:07:53.970 --> 00:07:57.390
of additional P-threads APIs to
kind of fill out the POSIX,

00:07:57.410 --> 00:07:59.360
you know, compatibility suite.

00:08:00.960 --> 00:08:03.030
One thing to mention,
if you happen to be someone who

00:08:03.030 --> 00:08:06.250
is developing in the kernel,
we have, you know,

00:08:06.270 --> 00:08:10.010
there's a lot of things
that we've learned in the

00:08:10.080 --> 00:08:11.680
process of shipping Mac OS X.

00:08:11.680 --> 00:08:15.940
And one area where we've spent quite a
bit of effort is in designing I/O Kit,

00:08:15.940 --> 00:08:18.290
really making sure that
there's an excellent,

00:08:18.340 --> 00:08:24.600
well-defined environment for developing
drivers and other IO-related services,

00:08:24.600 --> 00:08:27.520
and make sure that we can
provide forward compatibility

00:08:27.520 --> 00:08:29.340
as we move the system forward.

00:08:29.380 --> 00:08:31.000
We'll talk more about
I/O Kit in a few minutes.

00:08:31.080 --> 00:08:35.060
Elsewhere in the kernel,
on the other hand, is a different story.

00:08:35.060 --> 00:08:40.980
We're constantly evolving the kernel,
and a lot of work that

00:08:40.980 --> 00:08:44.070
we've done in Jaguar,
in fact, has been a lot of upgrading and

00:08:44.070 --> 00:08:46.080
adding new plumbing in the kernel.

00:08:46.080 --> 00:08:48.480
And we've worked real hard to
try and make sure that we keep

00:08:48.480 --> 00:08:51.800
everything within the kernel
environment as compatible as possible.

00:08:51.800 --> 00:08:53.640
But we're going to change in the future.

00:08:53.640 --> 00:08:56.760
If you're going to develop in the kernel,
make sure you develop,

00:08:56.760 --> 00:08:58.870
realize that you're kind of
doing it at your own risk,

00:08:59.500 --> 00:09:03.600
the in-kernel APIs and services
that exist there will change.

00:09:03.600 --> 00:09:08.270
And we're going to be introducing
new APIs over time that we'll be able

00:09:08.270 --> 00:09:10.220
to say you can have comfort with.

00:09:10.220 --> 00:09:13.690
But outside of the I/O Kit space,
we really advise that you don't

00:09:13.690 --> 00:09:15.200
develop stuff within the kernel.

00:09:15.200 --> 00:09:16.580
You absolutely have to.

00:09:16.580 --> 00:09:18.470
And if you do, come talk with us.

00:09:18.640 --> 00:09:22.210
Let's develop a relationship
through developer relations to

00:09:22.210 --> 00:09:25.150
make sure that we can work with
you from release to release.

00:09:26.990 --> 00:09:29.760
If you're interested in developing
in the kernel or getting more

00:09:29.760 --> 00:09:31.800
information on the kernel,
there's a number of

00:09:31.800 --> 00:09:32.760
sessions you want to go to.

00:09:32.760 --> 00:09:38.180
The Darwin kernel session will go
over both Mac and BSD pieces of

00:09:38.220 --> 00:09:40.480
the system in a lot more detail.

00:09:40.480 --> 00:09:44.760
There's also a session on Wednesday for
managing kernel extensions.

00:09:44.760 --> 00:09:48.460
If you're doing I/O Kit work or
other things within the kernel,

00:09:48.460 --> 00:09:50.100
it's really important
you go to this session.

00:09:50.100 --> 00:09:51.580
There's a lot of useful
information there.

00:09:52.100 --> 00:09:56.840
And if you're interested in more
data on Pthreads and other threading

00:09:56.840 --> 00:10:01.200
services that exist in Mac OS X,
make sure you go to the Writing Threaded

00:10:01.200 --> 00:10:02.760
Apps session on Thursday.

00:10:04.530 --> 00:10:05.550
Moving on to I/O Kit.

00:10:05.590 --> 00:10:09.770
I/O Kit provides basically an
object-oriented framework for

00:10:10.340 --> 00:10:13.940
making the process of writing device
drivers as easy as possible and

00:10:14.310 --> 00:10:17.590
handling a lot of the common services
and facilities that people who write

00:10:17.770 --> 00:10:19.530
device drivers need to deal with.

00:10:19.910 --> 00:10:22.530
Things such as driver matching,
when you plug in a device,

00:10:22.620 --> 00:10:25.900
making sure that the right driver
actually ends up getting launched

00:10:25.900 --> 00:10:27.520
and loaded into the kernel.

00:10:28.420 --> 00:10:34.490
And handling things like power management
and kernel-to-user communication between

00:10:34.640 --> 00:10:38.870
a device and some higher-level service
that may need access to a given device.

00:10:39.000 --> 00:10:42.440
Within I/O Kit,
there's a couple of different layers.

00:10:42.440 --> 00:10:45.480
Just to make sure the terms
are clear to everybody,

00:10:45.480 --> 00:10:50.100
we've kind of broken this up because
it's an object-oriented implementation.

00:10:50.100 --> 00:10:54.930
There's this concept of families,
which provide the protocol specifics.

00:10:54.990 --> 00:10:58.000
It allows you to make sure that
the interfaces and services...

00:10:58.500 --> 00:11:01.580
and things like that are
appropriate to the kind of device.

00:11:01.740 --> 00:11:06.010
An audio device, for example,
is going to behave and have different

00:11:06.020 --> 00:11:08.450
requirements than a disk device.

00:11:08.550 --> 00:11:15.260
And so the families provide the APIs and
services that are device-appropriate.

00:11:15.340 --> 00:11:21.620
The actual device drivers themselves
end up talking to the family directly.

00:11:21.620 --> 00:11:23.580
That's kind of its
interface to the world,

00:11:23.580 --> 00:11:27.040
and the family ends up generally
talking to the rest of the system.

00:11:28.490 --> 00:11:31.140
Within I/O Kit for Jaguar,
there's a number of things

00:11:31.230 --> 00:11:35.020
that were done there,
particularly the KEX system,

00:11:35.020 --> 00:11:37.220
which is the kernel
extension environment.

00:11:37.220 --> 00:11:42.040
It's basically the set of facilities
used to load things into the kernel

00:11:42.040 --> 00:11:46.400
to be able to handle linking all
the bits and pieces together.

00:11:46.400 --> 00:11:50.080
When we shipped 10.1,
we were focusing primarily on

00:11:50.080 --> 00:11:52.520
making sure the mechanism was there.

00:11:52.910 --> 00:11:55.670
There's a lot of work that's been
done in Jaguar in terms of making

00:11:55.670 --> 00:11:58.500
additional services available for you,
the developer.

00:11:58.500 --> 00:12:02.230
You want to go to the KEX management
session later in the week to learn a

00:12:02.230 --> 00:12:04.480
lot more about what those things are.

00:12:04.480 --> 00:12:07.640
There's tools for debugging and
tracking things and logging stuff that

00:12:07.640 --> 00:12:09.630
you'll find to be particularly helpful.

00:12:09.640 --> 00:12:14.280
As Steve mentioned this morning,
as part of our tools work for Jaguar,

00:12:14.280 --> 00:12:16.340
we've upgraded to GCC3.

00:12:16.340 --> 00:12:22.050
One thing you should
probably note is GCC3's C++.

00:12:22.840 --> 00:12:27.920
ABI is actually different
than what shipped in Mac OS X.

00:12:27.920 --> 00:12:31.510
The good news is that this is
something that the I/O Kit team

00:12:31.510 --> 00:12:34.020
really considered from the get-go.

00:12:34.020 --> 00:12:38.930
If you have existing drivers
that ship today under 10.1,

00:12:38.930 --> 00:12:44.300
under the old 2.7, 2.97 compiler,
I/O Kit automatically handles

00:12:44.680 --> 00:12:48.490
the patch-up and keeps everything
so that it's binary compatible,

00:12:48.490 --> 00:12:50.180
it's upward compatible.

00:12:50.180 --> 00:12:55.270
It is important to note that if you write
a device... ... driver on Jaguar later,

00:12:55.480 --> 00:12:57.150
that it will not be backwards compatible.

00:12:57.160 --> 00:13:00.400
That's something to factor into
your development processes.

00:13:00.400 --> 00:13:06.720
One other area of enhancement within
I/O Kit is the power management system.

00:13:06.720 --> 00:13:10.020
There's been a lot of tweaking
there in terms of trying

00:13:10.060 --> 00:13:11.950
to get better battery life.

00:13:13.360 --> 00:13:16.560
to try and get better behavior and
stuff in different power conditions.

00:13:16.560 --> 00:13:21.960
And in particular, being able to handle
multiple power states.

00:13:22.060 --> 00:13:26.070
So being able to have different settings,
if you will, for how the system behaves

00:13:26.070 --> 00:13:28.990
when it's plugged into the wall
versus when it's just on battery.

00:13:29.000 --> 00:13:32.570
And support for UPSs.

00:13:32.950 --> 00:13:38.870
And one way I believe someone kind of
described it to me is the UPS support

00:13:38.870 --> 00:13:44.440
is basically the ability to add the
battery capability to your desktop.

00:13:44.440 --> 00:13:47.170
So the behavior of the power
management system is very,

00:13:47.170 --> 00:13:47.780
very similar.

00:13:47.780 --> 00:13:53.290
Once the UPS kind of goes
into battery mode and actually

00:13:53.330 --> 00:13:56.180
notifies the system such,
then it effectively behaves like

00:13:56.230 --> 00:13:59.420
a very large portable in terms
of its power management behavior.

00:13:59.420 --> 00:14:02.980
The HID manager,
the Human Input Device Manager,

00:14:02.980 --> 00:14:05.460
has also been enhanced with I/O Kit.

00:14:05.460 --> 00:14:09.880
And in particular, again,
a number of developer facilities,

00:14:10.060 --> 00:14:14.070
but trying to get more of the various
devices all integrated into one

00:14:14.070 --> 00:14:18.480
place so that the HID manager is now
responsible for mice as HID devices,

00:14:18.480 --> 00:14:25.440
as well as all the special game pads
and all that kind of stuff that the

00:14:25.440 --> 00:14:26.840
HID manager was responsible before.

00:14:28.350 --> 00:14:32.580
As you heard this morning,
Steve mentioned we have some directions.

00:14:32.580 --> 00:14:37.400
We'll hear more about that next week
as far as servers are concerned,

00:14:37.400 --> 00:14:40.150
but there's a lot of work that
IOKit's put into making sure that

00:14:40.150 --> 00:14:41.900
we can support headless booting.

00:14:41.900 --> 00:14:45.960
If you happen to be someone who makes
graphics cards or things like that,

00:14:45.960 --> 00:14:49.610
one thing to factor in here is that
it's really important to be able

00:14:49.610 --> 00:14:54.740
to have an environment like this,
dynamic discovery of graphics devices.

00:14:54.880 --> 00:14:57.740
That's something that the current
NDRV models don't really support.

00:14:57.800 --> 00:15:00.840
That's one thing you basically
go out and look for a display,

00:15:00.840 --> 00:15:03.180
and if it's not there, it stops.

00:15:03.180 --> 00:15:07.900
If you happen to be a graphics vendor,
you really want to look at making

00:15:08.010 --> 00:15:12.460
sure that you look at using native
graphics drivers on Mac OS X to

00:15:12.460 --> 00:15:17.600
be able to take full advantage of
headless and dynamic display detection.

00:15:17.600 --> 00:15:22.340
Lastly, there's been quite a bit of
work done in the PC card family.

00:15:23.180 --> 00:15:26.010
There was some stuff that came out
as part of some of the software

00:15:26.120 --> 00:15:29.000
updates that you may have seen,
additional PC card devices.

00:15:29.000 --> 00:15:31.990
With a Mac OS X and Jaguar,
we also have a UI for now

00:15:31.990 --> 00:15:35.820
being able to make sure you
can see what devices are there.

00:15:35.820 --> 00:15:38.760
If you want to remove one,
you can effectively pull down

00:15:39.030 --> 00:15:41.800
a menu from the menu bar and,
if you will, eject,

00:15:41.800 --> 00:15:45.240
although they don't physically
eject at this point.

00:15:47.570 --> 00:15:51.060
Number of sessions related to
IO you might want to go to.

00:15:51.060 --> 00:15:54.260
The Managing Kernel Extensions is
probably the single most important one.

00:15:54.260 --> 00:15:56.700
If you're developing
in the kernel at all,

00:15:56.700 --> 00:15:59.220
developing device drivers, things,
please go to this session.

00:15:59.220 --> 00:16:01.040
A lot of good stuff there.

00:16:01.040 --> 00:16:06.180
And then there's FireWire and
USB sessions later in the week as well.

00:16:07.800 --> 00:16:11.460
File Systems The file system
portion of Mac OS X is a

00:16:11.460 --> 00:16:14.340
subsystem of the BSD Kernel.

00:16:14.390 --> 00:16:17.810
It's basically based on a VFS,
standard BSD VFS architecture,

00:16:17.810 --> 00:16:23.620
although we've enhanced it a bit to be
able to support things like UTF-8 and

00:16:23.620 --> 00:16:30.060
other services that HFS+, for example,
tends to export.

00:16:30.200 --> 00:16:33.620
We support a number of
different file system types:

00:16:33.720 --> 00:16:38.900
HFS, HFS+, UFS, ISO, etc., etc., WebDAV,
which is a web-based

00:16:38.920 --> 00:16:43.280
file system architecture,
UDAF, Andrew File System,

00:16:43.370 --> 00:16:47.320
I believe somebody has ported out there.

00:16:47.320 --> 00:16:51.340
All the interfaces to the
file system were designed

00:16:51.340 --> 00:16:57.540
to be able to support UTF-8,
so for internationalized file names.

00:16:57.540 --> 00:17:01.080
But I think one thing important to
mention about the file system is that

00:17:01.200 --> 00:17:06.970
there's intentionally no specific
affinity to any specific file system.

00:17:07.080 --> 00:17:09.810
The file system is designed
to be able to deal with any

00:17:09.810 --> 00:17:12.400
kind of file system plugged in.

00:17:12.400 --> 00:17:15.920
We actually run and test
on UFS within Apple.

00:17:15.920 --> 00:17:18.940
We don't depend on the
fact that it has to be HFS.

00:17:18.940 --> 00:17:22.560
One of the things that I think
Steve mentioned this morning was when

00:17:22.570 --> 00:17:25.840
you're living in a networked world,
you really don't know what's

00:17:25.840 --> 00:17:27.180
on the end of that wire.

00:17:27.230 --> 00:17:30.300
So you have to make sure that
you can run on the lowest

00:17:30.300 --> 00:17:32.540
common denominator file system.

00:17:32.540 --> 00:17:35.930
From the file system architecture,
we do not make any particular

00:17:36.010 --> 00:17:37.740
affinity to any of the file systems.

00:17:37.740 --> 00:17:41.460
Obviously,
we think HFS+ is the best choice,

00:17:41.460 --> 00:17:44.690
but I think it's important as
you're looking at implementing

00:17:44.690 --> 00:17:48.550
things that depend on the file
system not to make assumptions about

00:17:48.550 --> 00:17:52.340
what the underlying file system
capabilities and architectures are.

00:17:52.340 --> 00:17:55.240
There are APIs to help you with this.

00:17:55.240 --> 00:17:58.140
The file system is also
responsible for enforcing the

00:17:58.140 --> 00:18:02.200
file system security policy,
basically making sure that there's

00:18:02.200 --> 00:18:06.330
a concept of ownership on the
entities that are on the disk.

00:18:06.460 --> 00:18:09.980
in reinforcing that with the rest
of the Unix security policies.

00:18:11.400 --> 00:18:14.800
From the standpoint of what
we've been doing in file systems,

00:18:14.800 --> 00:18:18.220
I think one important thing
to note is with Jaguar,

00:18:18.220 --> 00:18:23.370
we now support up to 15 terabytes
for an HFS Plus file system.

00:18:26.230 --> 00:18:31.530
We also have done quite a
bit of work with WebDAV,

00:18:31.530 --> 00:18:31.530
which is our web

00:18:31.670 --> 00:18:35.970
What's used for iDisk,
if you happen to use iDisk,

00:18:36.100 --> 00:18:38.430
or if you happen to be
working with web servers,

00:18:38.430 --> 00:18:41.780
it's a common protocol for being
able to get file access for that.

00:18:41.820 --> 00:18:46.080
We spent quite a bit of work working on
performance and improving authentication,

00:18:46.080 --> 00:18:48.690
particularly adding digest
authentication to the system.

00:18:48.700 --> 00:18:52.290
For the file sharing level,
we've added Samba,

00:18:52.290 --> 00:18:57.860
which is basically SMB file sharing
capability in the desktop system.

00:18:57.860 --> 00:19:01.810
So, in addition to you being able
to turn on personal file sharing

00:19:01.810 --> 00:19:05.380
and be able to share like you
would with another Mac user,

00:19:05.380 --> 00:19:09.570
you can now turn on personal file sharing
and be able to share with a Windows user.

00:19:09.580 --> 00:19:14.800
And that's by actually having a Samba
server as part of the desktop system.

00:19:14.800 --> 00:19:19.780
We support SMB browsing in
various authentication forms now.

00:19:19.780 --> 00:19:23.880
There's built-in support now
for quotas within the file

00:19:23.880 --> 00:19:26.490
system for HFS and UFS and such.

00:19:27.320 --> 00:19:31.560
We have some particularly interesting
new technology around auto-mounting.

00:19:31.560 --> 00:19:35.160
If you've ever had a chance to
work with NFS auto-mounting,

00:19:35.160 --> 00:19:40.740
it's an interesting concept of
basically where you have a file system

00:19:40.740 --> 00:19:45.740
that's an area within your file system
that's designated as being where

00:19:46.120 --> 00:19:48.840
your network file services exist.

00:19:48.900 --> 00:19:52.440
And the file services don't
actually get mounted until such

00:19:52.440 --> 00:19:56.880
time as you traverse the path,
if you will, where that particular file.

00:19:57.320 --> 00:20:00.400
system is, quote unquote,
"mounted on." It's what's

00:20:00.530 --> 00:20:01.820
called auto-mounting.

00:20:01.820 --> 00:20:04.990
And we've enhanced Jaguar to be
able to support that for a number

00:20:05.250 --> 00:20:07.010
of different file system types.

00:20:07.200 --> 00:20:10.820
So,
in addition to typical NFS auto-mounting,

00:20:10.910 --> 00:20:14.660
we also now support this for
Apple share and SMB volumes.

00:20:14.660 --> 00:20:19.430
And so it's basically possible just
going through your file system of live

00:20:19.430 --> 00:20:23.820
navigating file servers that exist
in your network and being able to

00:20:23.820 --> 00:20:26.540
mount them just by accessing a path.

00:20:26.910 --> 00:20:32.520
Our UDF file system has been enhanced
to support read/write support now.

00:20:32.520 --> 00:20:37.400
Another key, important performance win is
being able to remount remote

00:20:37.400 --> 00:20:39.780
file systems asynchronously.

00:20:39.880 --> 00:20:41.870
It's basically done
in the background now.

00:20:41.910 --> 00:20:45.850
If you happen to be on a
slow network connection,

00:20:45.850 --> 00:20:48.270
mounting a web dev volume or
something like that over modem,

00:20:48.290 --> 00:20:51.630
you don't have to sit there
while the connection occurs.

00:20:51.630 --> 00:20:54.420
That actually occurs
in the background now.

00:20:54.420 --> 00:20:57.190
on to the networking part of the system.

00:20:57.730 --> 00:21:03.720
Networking is also a
subsystem of the BSD Kernel.

00:21:03.870 --> 00:21:08.150
As part of the BSD Kernel,
it's basically built

00:21:08.150 --> 00:21:09.600
on the 4.4 Lite code.

00:21:09.600 --> 00:21:12.340
A while back, however,
we spent quite a bit of time syncing

00:21:12.400 --> 00:21:14.120
it up with a fairly recent version.

00:21:14.120 --> 00:21:16.420
And with Jaguar,
we've actually brought the

00:21:16.490 --> 00:21:20.460
networking stack all the way up
to being synced with FreeBSD 4.4.

00:21:21.100 --> 00:21:22.860
It's a socket-based API.

00:21:23.120 --> 00:21:27.740
This is the native networking
APIs and services for the system.

00:21:27.740 --> 00:21:31.620
And if you want to get the most value,
this is kind of the level you should

00:21:31.620 --> 00:21:35.570
be working at or through Carbon and
Cocoa-level appropriate APIs.

00:21:35.580 --> 00:21:39.150
Kind of key important features
for our networking stack

00:21:39.150 --> 00:21:43.840
include multi-homing support,
routing, firewall, NAT mechanisms,

00:21:44.020 --> 00:21:47.000
network address translation capabilities.

00:21:47.000 --> 00:21:50.870
And with Jaguar,
a built-in support for IPv6.

00:21:50.960 --> 00:21:57.660
And I think a really key differentiator
between us and the rest of the Unix

00:21:57.660 --> 00:22:01.960
community in that respect is how we
deal with configuration for networking.

00:22:01.960 --> 00:22:04.140
Being able to support
mobile environments,

00:22:04.140 --> 00:22:08.880
being able to support environments
where you may have a lot of

00:22:08.880 --> 00:22:12.570
dynamicism in your networking state,
that auto-configuration and

00:22:12.570 --> 00:22:16.960
auto-reconfiguration is a really key
part of our networking architecture.

00:22:16.960 --> 00:22:19.630
And we'll talk more about
that in just a moment.

00:22:21.220 --> 00:22:24.270
As I mentioned,
part of the Jaguar work is syncing

00:22:24.270 --> 00:22:25.900
up with the latest FreeBSD.

00:22:25.900 --> 00:22:31.180
But I think one probably more
important issue in terms of really

00:22:31.180 --> 00:22:33.960
new features is the support for IPv6.

00:22:33.960 --> 00:22:37.980
So with Jaguar,
v6 is built into the system.

00:22:37.980 --> 00:22:40.880
It's something you can
start taking advantage of.

00:22:40.880 --> 00:22:44.780
There are actually very appropriate
APIs that you can be using in your

00:22:45.000 --> 00:22:47.670
applications if you're not using
a high-level abstraction to make

00:22:48.000 --> 00:22:53.040
sure that you don't limit yourself
to just IPv4 connection capability.

00:22:53.040 --> 00:22:56.410
And there's a session later in the week
I'll mention in a moment which will tell

00:22:56.410 --> 00:22:58.380
you a bit about some of those new APIs.

00:22:58.380 --> 00:23:03.300
But it is possible to write
your applications such that you

00:23:03.300 --> 00:23:05.830
can run on both IPv6 and IPv4.

00:23:05.840 --> 00:23:09.180
IPsec is also now part of the system.

00:23:09.180 --> 00:23:12.030
What I think it's important
to note with IPsec is that

00:23:12.030 --> 00:23:14.310
it's an enabling technology.

00:23:14.320 --> 00:23:17.000
This is something that if
you're interested in using,

00:23:17.320 --> 00:23:23.080
one of the tasks as a developer
is actually developing the key

00:23:23.080 --> 00:23:27.880
management and the key exchange for
whatever it is you're talking to on

00:23:27.880 --> 00:23:29.600
the other end of the IPsec connection.

00:23:29.600 --> 00:23:33.720
That's not something that
we have built into Jaguar.

00:23:33.720 --> 00:23:36.960
This is something that is typically
very application-specific.

00:23:36.960 --> 00:23:41.090
Again, you can learn a little bit more
about that later in the week.

00:23:41.580 --> 00:23:45.960
As part of our PPP support,
we now also have point-to-point

00:23:46.190 --> 00:23:49.270
tunneling protocol,
the VPN solution that's used

00:23:49.290 --> 00:23:53.360
within the Windows environment,
and there's a client application that's

00:23:53.360 --> 00:23:55.730
included with Jaguar to support that.

00:23:55.860 --> 00:23:59.860
I think probably one thing
that was really understated in

00:23:59.860 --> 00:24:04.460
this morning's keynote was the
work that we're doing on LDAP.

00:24:04.950 --> 00:24:07.020
Basically,
we are going through a process of

00:24:07.020 --> 00:24:11.120
transitioning to LDAP being our
primary directory services model.

00:24:11.660 --> 00:24:15.200
You may have heard quite a
lot about NetInfo and stuff.

00:24:15.320 --> 00:24:20.330
That is a term we use to describe
our low-level network information

00:24:20.330 --> 00:24:22.540
services within Mac OS X.

00:24:22.540 --> 00:24:25.310
But with Jaguar,
one thing that's occurring

00:24:25.310 --> 00:24:28.670
is that LDAP is becoming
the wire protocol of choice.

00:24:28.760 --> 00:24:33.480
If you're dealing with environments
that already have LDAP,

00:24:33.480 --> 00:24:37.040
we have LDAP client support, so LDAPv3.

00:24:37.040 --> 00:24:40.300
In the server, we actually support LDAP.

00:24:40.800 --> 00:24:42.480
As part of the server product.

00:24:42.560 --> 00:24:48.450
Basically, you'll see for wire protocol
purposes that NetInfo is something

00:24:48.450 --> 00:24:53.130
that we're phasing out with Jaguar,
and that LDAP is something

00:24:53.140 --> 00:24:56.300
that we are embracing very,
very strongly.

00:24:56.300 --> 00:25:01.120
Another key feature that is
rolled in is SNMP support.

00:25:01.120 --> 00:25:04.580
If you're dealing in a
network-managed environment,

00:25:04.580 --> 00:25:08.180
you'll find having SNMP to
be particularly helpful.

00:25:10.100 --> 00:25:13.510
Part of our round-out,
some of the other capabilities of the

00:25:13.510 --> 00:25:15.960
networking stack is our NetBoot story.

00:25:15.960 --> 00:25:21.290
With Mac OS X-1,
we supported NetBoot of Mac OS 9 clients.

00:25:21.420 --> 00:25:25.550
For the Jaguar release,
we support NetBooting of

00:25:25.610 --> 00:25:31.520
Mac OS X clients and the ability
to support multiple NetBoot images.

00:25:31.520 --> 00:25:36.110
You may have a lab of machines for a
school where you still have some older

00:25:36.110 --> 00:25:38.900
machines that need to boot Mac OS 9,
and newer machines

00:25:38.900 --> 00:25:39.400
that can boot Mac OS X.

00:25:39.400 --> 00:25:45.260
The server side of this will actually
support multiple NetBoot images

00:25:45.260 --> 00:25:47.630
to be able to support multiple
client kinds of environments.

00:25:50.800 --> 00:25:54.370
I think probably the most important
thing that we've done in terms

00:25:54.370 --> 00:25:57.400
of networking is Rendezvous.

00:25:57.410 --> 00:26:00.870
Rendezvous is really some
incredible technology.

00:26:00.940 --> 00:26:06.080
It's basically brought the
ease of Apple Talk to TCP/IP.

00:26:06.080 --> 00:26:09.820
One of the advantages of Apple Talk was
that you could very quickly take a

00:26:09.820 --> 00:26:13.650
couple of machines or a machine and
a printer or whatever and just plug

00:26:13.740 --> 00:26:15.940
them together and it would just work.

00:26:15.940 --> 00:26:18.000
That's the kind of experience
you want people to have when

00:26:18.010 --> 00:26:19.540
they're dealing with networking.

00:26:19.680 --> 00:26:24.110
Rendezvous manages to bring
this forward using standard

00:26:24.110 --> 00:26:29.460
TCP/IP solutions to be able to
implement those kinds of capabilities.

00:26:29.540 --> 00:26:33.340
It's even better than that because
the way it does it is much more

00:26:33.340 --> 00:26:37.280
efficient and much more capable.

00:26:37.350 --> 00:26:39.970
It's what we like to call
zero configuration networking.

00:26:40.070 --> 00:26:44.720
It's based off some open standards
called ZeroConf that's part of the IETF.

00:26:44.720 --> 00:26:47.200
There's a number of working
groups and things like that

00:26:47.250 --> 00:26:48.500
that we've been working with.

00:26:48.540 --> 00:26:54.520
Rendezvous has a couple of
three different key layers.

00:26:54.630 --> 00:26:57.220
There's the zero configuration
networking piece.

00:26:57.220 --> 00:27:01.150
You've probably seen a lot of
this already even in Mac OS 9

00:27:01.150 --> 00:27:03.780
or in today's shipping Mac OS X.

00:27:03.780 --> 00:27:06.960
When you plug into an environment
where there is no DNS server,

00:27:06.960 --> 00:27:11.530
when you have DHCP enabled,
it just picks a number for you.

00:27:11.530 --> 00:27:18.340
It's picking that number out of
a well-defined range that's used.

00:27:18.340 --> 00:27:22.120
It's called a link local address.

00:27:22.120 --> 00:27:24.340
This is kind of the first baby steps,
if you will,

00:27:24.340 --> 00:27:27.020
of being able to support zero
configuration networking,

00:27:27.020 --> 00:27:29.680
of being able to make sure
that the system can communicate

00:27:30.000 --> 00:27:34.280
even when there isn't network
infrastructure around to support you.

00:27:34.590 --> 00:27:39.850
The other key piece is the support
for being able to actually have

00:27:39.850 --> 00:27:41.920
services being referenced by name.

00:27:41.920 --> 00:27:45.760
This is built on some
technology called multicast DNS.

00:27:45.760 --> 00:27:50.890
Basically, the concept is that when you
send out a DNS request today

00:27:50.890 --> 00:27:54.610
on a conventional network,
you're actually talking to

00:27:54.610 --> 00:27:57.730
some well-known DNS server
within your environment.

00:27:57.740 --> 00:28:01.320
The multicast DNS that's part
of Rendezvous actually sends

00:28:01.320 --> 00:28:04.850
out a multicast request,
and the devices themselves respond

00:28:04.850 --> 00:28:06.340
if they recognize their name.

00:28:06.340 --> 00:28:10.620
It's like calling to somebody you know,
Hi, Dean, and Dean goes, Oh, yeah,

00:28:10.710 --> 00:28:11.790
that's me, and responds.

00:28:11.800 --> 00:28:15.340
It's very much the same
concept here with devices,

00:28:15.340 --> 00:28:18.640
where it's possible to send out
a request by name for something,

00:28:18.640 --> 00:28:20.560
and the device says, Oh, yeah, that's me.

00:28:20.560 --> 00:28:21.660
Here's how you talk to me.

00:28:21.660 --> 00:28:22.530
Here's my IP address.

00:28:22.600 --> 00:28:26.100
This all kind of rolls
up into this concept,

00:28:26.510 --> 00:28:31.560
because it's rolled into DNS,
of being able to effectively

00:28:31.560 --> 00:28:35.260
have services registered and go
through this process of discovery.

00:28:35.260 --> 00:28:38.170
I'll show you an example
of that in a moment.

00:28:38.180 --> 00:28:42.730
This capability,
though it works incredibly

00:28:42.730 --> 00:28:45.500
well in the small kind of ad
hoc networking environment,

00:28:45.500 --> 00:28:47.870
has a big benefit over AppleTalk,
I think,

00:28:48.020 --> 00:28:52.480
in that it's considerably more scalable,
because it's built on DNS as

00:28:52.600 --> 00:28:57.960
its way of being able to access
services and discover them,

00:28:57.960 --> 00:29:00.280
that you can actually,
in a large corporate environment,

00:29:00.280 --> 00:29:03.850
use an existing DNS infrastructure,
to be able to publish all

00:29:03.850 --> 00:29:06.820
the services and capabilities
that you have in your system.

00:29:06.820 --> 00:29:09.820
The systems don't have to
necessarily respond individually.

00:29:09.850 --> 00:29:13.520
In fact, you just use your existing
DNS infrastructure to be

00:29:13.520 --> 00:29:14.700
able to take advantage of it.

00:29:14.770 --> 00:29:17.440
Like I said, I'll try and show you a
little bit here in a moment.

00:29:18.980 --> 00:29:20.960
obvious examples of using Rendezvous.

00:29:20.960 --> 00:29:24.000
What you saw this morning,
the cool iTunes demo,

00:29:24.000 --> 00:29:27.830
where you could effectively
just get applications that can

00:29:27.940 --> 00:29:30.380
spontaneously share information.

00:29:30.490 --> 00:29:34.000
That's a very interesting example.

00:29:34.000 --> 00:29:38.460
Basically, you should think of any
number of circumstances.

00:29:38.460 --> 00:29:41.760
iPhoto might be another one where
you might want to share pictures.

00:29:41.760 --> 00:29:45.400
In situations where you'd really
like it to be easy for people to

00:29:45.400 --> 00:29:49.510
very easily exchange information
is something where Rendezvous

00:29:49.510 --> 00:29:53.000
really plays a real enabling role.

00:29:53.000 --> 00:29:54.740
Peer-to-peer laptops is another one.

00:29:54.740 --> 00:29:58.070
If you happen to meet your friend
in the local coffee house or the bus

00:29:58.210 --> 00:30:03.040
stop outside or something like that,
you'd really like an airport connection

00:30:03.370 --> 00:30:07.930
to be just the fact that the two machines
are within proximity of each other,

00:30:07.930 --> 00:30:11.460
that you should be able
to share files very easily

00:30:11.460 --> 00:30:13.890
without having to do anything.

00:30:14.040 --> 00:30:16.680
That's, again, the key concepts that
are driving Rendezvous.

00:30:17.050 --> 00:30:21.380
Headless devices are
another good example.

00:30:21.380 --> 00:30:24.700
Obviously,
if you don't end up having a display

00:30:24.700 --> 00:30:28.480
on a particular machine or some device,
it gets very difficult to be able

00:30:28.530 --> 00:30:33.200
to go in there and configure up the
IP address and all the various services.

00:30:33.310 --> 00:30:35.480
Again,
Rendezvous can play a role where it

00:30:35.560 --> 00:30:40.660
can discover that particular device
and immediately be able to talk to it.

00:30:40.660 --> 00:30:43.970
Of course,
we'd rather assume that someone will

00:30:44.050 --> 00:30:47.390
come up with some other cool thing,
some gadget or some other thing that

00:30:47.390 --> 00:30:49.740
can really take advantage of Rendezvous.

00:30:49.740 --> 00:30:51.830
With that,
I'd like to do a real quick demo.

00:30:55.350 --> 00:30:58.290
Hey, we're up.

00:30:58.500 --> 00:31:02.370
So the first one is we've-- actually,
the engineers,

00:31:02.400 --> 00:31:05.160
I threw out at them last week, gee,
I'd really like to have

00:31:05.160 --> 00:31:06.390
something to show these guys.

00:31:06.400 --> 00:31:09.800
It's interesting to talk about,
but it's always better to be able to see.

00:31:09.800 --> 00:31:14.380
And so they ran down to Fry's and
picked up one of these cameras.

00:31:14.380 --> 00:31:17.060
There happened to be a little web camera.

00:31:17.220 --> 00:31:19.490
It's got a--

00:31:19.900 --> 00:31:21.640
Thank you for joining me.

00:31:21.640 --> 00:31:25.560
I'm going to go ahead and start
off with a quick question.

00:31:25.560 --> 00:31:28.650
I'm going to start off
with a quick question.

00:31:28.680 --> 00:31:32.120
One of the things that I've
been thinking about is,

00:31:32.120 --> 00:31:35.960
as you mentioned, the web browser,
the browser that you

00:31:35.960 --> 00:31:38.840
use to go to a browser,
how do you do that?

00:31:38.840 --> 00:31:40.500
What's the IP address?

00:31:40.610 --> 00:31:41.720
How do I do this?

00:31:41.720 --> 00:31:45.910
The experience for something like
this should really end up being

00:31:46.290 --> 00:31:48.720
just being able to go to a browser.

00:31:49.830 --> 00:31:51.550
And be able to just select the device.

00:31:51.550 --> 00:31:54.750
In this particular case,
the camera happens to be exporting

00:31:55.120 --> 00:31:57.180
HTTP as one of its protocols.

00:31:57.180 --> 00:32:00.380
In Rendezvous,
it's important to note it's not

00:32:00.380 --> 00:32:04.660
just for sharing files or for
one particular set of services.

00:32:04.660 --> 00:32:06.790
It's for any kind of service
that you can imagine.

00:32:06.800 --> 00:32:11.370
And things like web servers can actually
publish themselves as being available.

00:32:11.370 --> 00:32:15.280
And this particular one's been set
up so that we can do exactly that.

00:32:15.310 --> 00:32:18.190
And if I go to this little browser, well,
poof, there it is.

00:32:18.190 --> 00:32:19.130
There's my device.

00:32:19.220 --> 00:32:22.090
Just shows up on the little browser.

00:32:22.560 --> 00:32:24.700
And I can just click on it and connect.

00:32:24.760 --> 00:32:28.460
Well,
the advantage of this is basically that,

00:32:28.580 --> 00:32:34.150
as you can see here, it should be live,
that getting to be able to

00:32:34.200 --> 00:32:38.960
connect to this device is really
just a matter of being able to

00:32:38.960 --> 00:32:40.910
have it discovered in a browser.

00:32:40.910 --> 00:32:43.430
Just like if you use
the chooser on Mac OS 9,

00:32:43.760 --> 00:32:46.600
that I can go and select the
kind of device I'm interested in,

00:32:46.600 --> 00:32:47.330
that it shows up.

00:32:47.400 --> 00:32:48.460
I can click on it and use it.

00:32:48.460 --> 00:32:49.760
And that's the kind of
experience that I've been having.

00:32:49.760 --> 00:32:49.760
And I've been able to do that.

00:32:49.760 --> 00:32:49.760
And I've been able to do that.

00:32:49.780 --> 00:32:52.520
And that's the kind of experience
that we really want to see for

00:32:52.520 --> 00:32:54.700
devices that connect to a Macintosh.

00:32:57.000 --> 00:33:00.190
The other good example is printing.

00:33:00.270 --> 00:33:05.900
The kind of experience you
expect with printing is,

00:33:05.900 --> 00:33:08.570
again, like with AppleTalk,
you want to be able to

00:33:08.570 --> 00:33:09.760
just discover the printer.

00:33:09.760 --> 00:33:14.380
I think what we'll do is we'll do
just a real quick little demo of that.

00:33:14.400 --> 00:33:15.440
Let's see.

00:33:15.440 --> 00:33:18.100
We need somebody's name so
you believe this is real.

00:33:18.100 --> 00:33:19.030
What's your name?

00:33:19.040 --> 00:33:19.800
David.

00:33:20.070 --> 00:33:20.230
David.

00:33:20.230 --> 00:33:20.560
Okay.

00:33:20.620 --> 00:33:21.040
Great.

00:33:22.430 --> 00:33:23.320
So, sorry.

00:33:23.320 --> 00:33:29.100
So with this, you know, you've all seen,
kind of seen the Mac OS X print

00:33:29.190 --> 00:33:30.110
panel capability.

00:33:30.110 --> 00:33:34.580
It comes up and then you select,
to go select your printer, and, gee,

00:33:34.580 --> 00:33:36.820
the printer's not there.

00:33:36.820 --> 00:33:37.420
Hmm.

00:33:37.420 --> 00:33:40.890
Oh, it's not plugged in.

00:33:42.040 --> 00:33:44.600
So, you know, with the, you know,
the kind of experience

00:33:44.600 --> 00:33:47.610
you get when you get,
you know, the printer out of the box is,

00:33:47.610 --> 00:33:50.000
you know,
really what you'd like to see is that

00:33:50.000 --> 00:33:52.520
you just plug the darn thing into the,
you know,

00:33:52.520 --> 00:33:56.010
into the printer and the cable in
and you go back over and hopefully,

00:33:56.010 --> 00:33:56.530
oh.

00:33:56.920 --> 00:33:57.780
It just showed up.

00:33:57.780 --> 00:34:04.140
I think the real power of this
is what happens here is that as

00:34:04.240 --> 00:34:06.910
soon as the device is detected,
that it publishes itself

00:34:06.910 --> 00:34:07.990
as being a service.

00:34:08.100 --> 00:34:11.360
And that service immediately gets
broadcast to the print center.

00:34:11.360 --> 00:34:13.360
The print center says, oh,
there's a printer here.

00:34:13.360 --> 00:34:14.040
There's only one.

00:34:14.040 --> 00:34:15.480
Well, here's the one you want.

00:34:15.500 --> 00:34:18.660
And let's go off and just print that
so you believe that it truly works.

00:34:18.780 --> 00:34:21.820
And again, the experience should be
plug it in and it works.

00:34:22.010 --> 00:34:24.270
And that's the kind of experience
we want to see on the system.

00:34:24.280 --> 00:34:26.680
For printers,
for things like web devices,

00:34:26.730 --> 00:34:30.160
for web servers,
if you're administrating other machines,

00:34:30.160 --> 00:34:33.460
for file sharing services,
for other things like that.

00:34:33.550 --> 00:34:36.390
And sure enough, that's David.

00:34:36.400 --> 00:34:40.590
So anyway,
I think the real key with Rendezvous

00:34:40.590 --> 00:34:47.100
is to try and create that just plug
and play capability with network-based

00:34:47.100 --> 00:34:50.660
devices and services on the system.

00:34:50.660 --> 00:34:53.020
And it's not limited, again,
just printers.

00:34:53.220 --> 00:34:55.930
But kind of anything you
can imagine with an iTunes,

00:34:55.930 --> 00:34:58.400
I think,
being a really good concept demo.

00:34:58.400 --> 00:35:00.050
So let me go back to slides.

00:35:04.810 --> 00:35:07.740
So for the networking
portion of the system,

00:35:07.740 --> 00:35:11.060
there's a number of sessions
you might want to go to.

00:35:11.060 --> 00:35:14.840
There's a networking overview on Tuesday,
an advanced one which will get

00:35:14.840 --> 00:35:19.680
into the IPv6 and IPsec and some of
the other key pieces on Thursday.

00:35:19.680 --> 00:35:23.560
Zero Configuration Networking,
if you want to learn more about ZeroConf,

00:35:23.690 --> 00:35:25.000
this is the session to go to.

00:35:25.000 --> 00:35:29.050
They'll have a number of demos show
you the code or calls that you can

00:35:29.200 --> 00:35:31.190
make to actually use this stuff.

00:35:31.720 --> 00:35:34.000
And by the way,
the example I gave was using,

00:35:34.000 --> 00:35:37.670
this is a stock Jaguar system,
just the same as the CDs that you have.

00:35:37.680 --> 00:35:41.490
So you can be able to play with being
able to put together little toys and

00:35:41.490 --> 00:35:43.940
things like that yourself very quickly.

00:35:43.940 --> 00:35:46.950
One thing about ZeroConf,
the Zero Configuration

00:35:46.950 --> 00:35:50.630
Networking and Rendezvous,
is that the APIs and services that

00:35:50.710 --> 00:35:54.700
you need to access within your
application are incredibly small.

00:35:54.700 --> 00:35:57.120
It's a very,
very simple thing to integrate.

00:35:58.660 --> 00:36:02.840
If you're interested in learning more
about our LDAP support and our general

00:36:02.920 --> 00:36:06.080
strategy for directory services,
that's on Thursday.

00:36:06.080 --> 00:36:09.440
And then there's a feedback
forum on Friday afternoon.

00:36:12.170 --> 00:36:13.850
So the BSD application environment.

00:36:13.860 --> 00:36:18.060
This is kind of where the power
of UNIX kind of comes into play.

00:36:18.060 --> 00:36:18.980
This is the command line.

00:36:18.980 --> 00:36:22.500
Basically all the application
level APIs and services and tools

00:36:22.500 --> 00:36:24.550
that really give it the UNIX feel.

00:36:25.580 --> 00:36:31.790
So the LS and CP and all the kinds of
standard things that you would think of.

00:36:32.050 --> 00:36:35.580
All the daemons that run in the system,
the daemons that run in are

00:36:35.580 --> 00:36:40.460
typically BSD applications,
if you will, that run.

00:36:40.460 --> 00:36:42.000
Things like LDAP.

00:36:42.000 --> 00:36:45.520
LDAP is just open LDAP, freely available.

00:36:45.520 --> 00:36:48.310
Apache Web Server and things like that.

00:36:48.390 --> 00:36:51.960
These are all just standard
UNIX services that run as part of

00:36:51.960 --> 00:36:54.320
the BSD application environment.

00:36:55.960 --> 00:36:59.810
One thing that's kind of neat
about a Mac with UNIX is that

00:37:00.600 --> 00:37:03.380
you can't do that on a Linux box.

00:37:03.670 --> 00:37:08.140
Being able to play your iTunes
and have cool graphics and

00:37:08.200 --> 00:37:09.900
a lot of the other stuff.

00:37:10.290 --> 00:37:13.600
As you can see here,
an example is X Windows support

00:37:13.600 --> 00:37:15.790
and a number of other things.

00:37:16.290 --> 00:37:20.160
Being able to have this kind
of capability on a desktop and

00:37:20.160 --> 00:37:25.180
portable system that's available
to everybody is really cool.

00:37:25.180 --> 00:37:28.330
I think one of the real powers
of Mac OS X is the fact that

00:37:28.410 --> 00:37:32.910
this kind of power sits under the
hood and that you can actually

00:37:32.910 --> 00:37:35.150
be a geek and be proud of it.

00:37:37.770 --> 00:37:42.290
So what's new in the BSD environment?

00:37:42.770 --> 00:37:46.380
Well, one key thing is we've
synced up with FreeBSD 4.4.

00:37:46.380 --> 00:37:50.100
We've spent quite a lot of work to try
and bring a number of libraries and other

00:37:50.200 --> 00:37:51.940
services and things like that up to date.

00:37:52.050 --> 00:37:55.040
So if you're using our
reporting code over,

00:37:55.040 --> 00:37:59.180
you'll find that we've done a lot of
things to update that environment.

00:37:59.190 --> 00:38:05.600
Bash is now the primary
shell on the system.

00:38:08.300 --> 00:38:11.690
Those that like the shells,
we figured that would be the response.

00:38:11.750 --> 00:38:15.380
Python is now included
as part of the system.

00:38:15.380 --> 00:38:20.290
We have a new BSD SDK package that's
part of the developer tool set.

00:38:20.650 --> 00:38:26.270
And these are APIs that we really don't
advise you writing new applications with.

00:38:26.470 --> 00:38:29.700
But if you're porting an
application from a UNIX environment,

00:38:29.700 --> 00:38:32.860
these are kind of the SDK tools
that you probably need to

00:38:32.860 --> 00:38:34.550
be able to port those apps.

00:38:34.680 --> 00:38:38.000
Things like OpenSSL, LibEdit, et cetera,
et cetera.

00:38:38.000 --> 00:38:40.900
Again,
we don't encourage people using these

00:38:40.900 --> 00:38:44.480
libraries and services when you're
writing a new app from scratch.

00:38:44.580 --> 00:38:47.320
But if you're porting something,
we've been trying to make sure that

00:38:47.320 --> 00:38:50.820
you have a good collection of tools
in your tool bag to kind of ease

00:38:50.820 --> 00:38:52.780
the process of porting to Mac OS X.

00:38:52.780 --> 00:38:57.290
We've also, as part of Jaguar,
kind of rolled in the latest

00:38:57.300 --> 00:39:01.960
versions of Apache and Perl and
Emacs and the various kinds of tools.

00:39:01.960 --> 00:39:04.120
Lots of new and updated man pages.

00:39:04.120 --> 00:39:07.300
We were very weak in the
man page space before.

00:39:08.200 --> 00:39:08.500
Thank you.

00:39:08.500 --> 00:39:13.240
So put a lot of work into trying
getting a lot more of those set.

00:39:13.330 --> 00:39:15.440
We're working,
continuing to work on that.

00:39:15.460 --> 00:39:19.660
I think the other important
thing is that we've...

00:39:20.500 --> 00:41:10.000
[Transcript missing]

00:41:10.750 --> 00:41:12.820
Thank you.

00:41:12.820 --> 00:41:16.520
And there's support now for
a split window scroll back,

00:41:16.520 --> 00:41:19.690
so you can have your active window
and be able to look at the scroll

00:41:20.120 --> 00:41:22.600
back information in case you're
trying to track a problem in a

00:41:22.600 --> 00:41:24.030
build or something like that.

00:41:24.070 --> 00:41:27.680
And a number of real-time
preferences and things like that,

00:41:27.680 --> 00:41:30.990
so you can change the behavior
of your terminal windows a

00:41:30.990 --> 00:41:33.020
little bit more effectively.

00:41:33.020 --> 00:41:38.380
So if you get a chance to with Jaguar
playing with the new terminal app,

00:41:38.380 --> 00:41:39.810
let us know how you like it.

00:41:40.570 --> 00:41:44.940
For those of you that are
kind of the UNIX developers

00:41:44.940 --> 00:41:48.220
coming to the Mac platform,
I'd really encourage you to go to the

00:41:48.300 --> 00:41:50.380
Mac OS X overview for UNIX developers.

00:41:50.380 --> 00:41:54.930
Again, this kind of gives you the
Mac OS X perspective from assuming

00:41:55.050 --> 00:41:57.840
that you're coming from a UNIX world.

00:41:57.840 --> 00:42:01.080
And if you're looking at
porting UNIX apps to Mac OS X,

00:42:01.080 --> 00:42:04.640
just in general,
we have another session also tomorrow,

00:42:04.640 --> 00:42:07.650
which will help a lot on how
do you bring an app over,

00:42:07.650 --> 00:42:10.280
what's our build environment,
what's different.

00:42:10.510 --> 00:42:13.560
If you're porting something from one
of the BSDs or something like that,

00:42:13.560 --> 00:42:14.860
what's involved?

00:42:15.240 --> 00:42:16.920
Moving on to security.

00:42:17.190 --> 00:42:21.720
This is part of the OS framework
layer of the system.

00:42:21.990 --> 00:42:24.380
Our policy on security
is first and foremost,

00:42:24.540 --> 00:42:27.560
let's ship a system that's
as secure as we can,

00:42:27.560 --> 00:42:30.440
and if you want,
you can enable services if you need them.

00:42:30.440 --> 00:42:32.600
That way,
mom doesn't have to become an expert

00:42:32.670 --> 00:42:34.800
at becoming a security administrator.

00:42:34.800 --> 00:42:36.950
That should never have to be the case.

00:42:36.960 --> 00:42:40.390
So I think one important thing from
our philosophy is that when we're

00:42:40.390 --> 00:42:43.690
dealing with security in Mac OS X,
that we really like to think of

00:42:43.720 --> 00:42:47.420
things as being secure out of the box,
unlike most of the other systems,

00:42:47.560 --> 00:42:50.660
which is everything's turned on,
and if you want to make it secure,

00:42:50.660 --> 00:42:55.400
you go through a very long list
of steps to secure up your system.

00:42:55.400 --> 00:42:58.590
Another key part of our security
layer and infrastructure,

00:42:58.660 --> 00:43:01.070
though,
is that we clearly need to be able

00:43:01.070 --> 00:43:05.270
to work with the rest of the world,
and there isn't any one particular

00:43:05.270 --> 00:43:08.240
solution for security and authentication.

00:43:08.240 --> 00:43:12.900
So our security infrastructure is
designed to be very configurable,

00:43:12.900 --> 00:43:17.400
very much based on standards,
and basically provide a whole...

00:43:17.560 --> 00:43:20.600
a whole series of libraries
and services to really try and

00:43:20.600 --> 00:43:25.220
allow you to integrate security
capabilities within your applications.

00:43:25.220 --> 00:43:28.600
And so a lot of the services
that exist are kind of designed

00:43:28.600 --> 00:43:30.520
with these concepts in mind.

00:43:30.520 --> 00:43:34.190
Of course, there's the keychain,
which is very much an ease-of-use

00:43:34.580 --> 00:43:39.490
capability of our security system,
single, basically the ability to remember

00:43:39.490 --> 00:43:44.530
common logins and to kind of keep them
all together in one secured place.

00:43:44.580 --> 00:43:48.540
Encrypted disk images is a kind of...
it's certainly a high-level feature,

00:43:48.540 --> 00:43:52.740
but it's kind of an important thing if
you happen to have one of the little

00:43:52.740 --> 00:43:56.520
USB dongles or things like that,
being able to put an encrypted disk image

00:43:56.640 --> 00:43:58.380
and keep all your important information.

00:43:58.380 --> 00:44:01.500
Even if it gets stolen, you know,
they can't get to the contents.

00:44:01.500 --> 00:44:06.900
Within the actual services of the
security frameworks is a set of

00:44:07.270 --> 00:44:10.300
capabilities for being able to
support pluggable authentication.

00:44:10.300 --> 00:44:13.360
And for Jaguar in particular,
this has now been integrated

00:44:13.360 --> 00:44:14.730
into the login window.

00:44:14.740 --> 00:44:18.180
So from the login window,
if you have... Kerberos enabled,

00:44:18.180 --> 00:44:22.960
you have a single login to be able
to support Kerberos environments,

00:44:22.960 --> 00:44:27.400
as well as other kinds of
login authentication solutions,

00:44:27.400 --> 00:44:30.090
such as smart cards or
other kinds of things.

00:44:30.120 --> 00:44:33.060
It's a pluggable model to be
able to support multiple kinds

00:44:33.060 --> 00:44:34.750
of authentication solutions.

00:44:34.760 --> 00:44:38.420
Another key service of the
security system is being able

00:44:38.420 --> 00:44:40.740
to do certificate management.

00:44:40.740 --> 00:44:44.940
And there's... it's one of the
key new features for Jaguar,

00:44:44.940 --> 00:44:47.140
and there's a session later
this week on that I'll mention,

00:44:47.220 --> 00:44:51.880
and then there's secure transport,
which is really our answer to OpenSSL.

00:44:51.880 --> 00:44:54.230
And I'll talk about more of
that in just a moment as well.

00:44:55.720 --> 00:44:59.020
So like I said, we've integrated Kerberos
now into the system.

00:44:59.020 --> 00:45:04.080
There's support within mail and FTP and
login and a number of system services

00:45:04.080 --> 00:45:06.340
to support Kerberos throughout.

00:45:06.340 --> 00:45:08.020
It's not just kind of an add-on thing.

00:45:08.020 --> 00:45:10.420
We've been working with
the folks at MIT on this.

00:45:10.420 --> 00:45:12.590
They've been great partners to work with.

00:45:12.640 --> 00:45:17.500
We basically have integrated
Kerberos for Macintosh 4.5,

00:45:17.600 --> 00:45:20.880
which has Kerberos v4 and v5 support.

00:45:21.980 --> 00:45:26.220
Again, this is integrated into a number
of the other services that exist.

00:45:26.220 --> 00:45:28.910
If you happen to be in
a Kerberos environment,

00:45:28.970 --> 00:45:30.320
you'll find this to be really helpful.

00:45:30.320 --> 00:45:33.700
I mentioned PAM already,
but it's worth restating that these two

00:45:33.740 --> 00:45:37.790
environments actually work together,
both at the UNIX level and at

00:45:37.790 --> 00:45:41.910
the high-level application level,
that you have one consistent set

00:45:41.910 --> 00:45:45.060
of behaviors that occurs as far
as authentication is concerned.

00:45:45.060 --> 00:45:47.450
If you're porting a UNIX app
and it's PAM-enabled,

00:45:47.450 --> 00:45:48.660
you'll fit right in.

00:45:50.390 --> 00:45:54.090
And then I want to spend a moment
and talk a little bit about CDSA and

00:45:54.090 --> 00:45:56.690
particularly secure transport.

00:45:57.020 --> 00:46:00.200
CDSA is the
Common Data Security Architecture that's

00:46:00.200 --> 00:46:08.160
basically the
key framework for security libraries.

00:46:08.220 --> 00:46:12.020
CDSA provides services for
encryption and authentication.

00:46:12.020 --> 00:46:15.140
It's an incredibly rich set of services.

00:46:15.140 --> 00:46:19.580
It's based on an open standard
that is managed by the open group.

00:46:20.480 --> 00:46:24.040
And the CDSA code is
actually something that we,

00:46:24.040 --> 00:46:27.230
in addition to the rest of Darwin,
open sourced a while ago.

00:46:27.240 --> 00:46:30.560
So it's basically very much a
key part of the system for being

00:46:30.660 --> 00:46:32.740
able to handle authentication.

00:46:32.740 --> 00:46:36.600
But what's important about CDSA is
it's much like our file system,

00:46:36.600 --> 00:46:38.080
has no particular affinity.

00:46:38.080 --> 00:46:40.860
The same thing applies to CDSA.

00:46:40.860 --> 00:46:44.850
It has no specific affinity to
a given authentication model

00:46:45.090 --> 00:46:46.950
or a specific encryption.

00:46:46.970 --> 00:46:49.360
Its job, in fact,
is to be able to provide

00:46:49.360 --> 00:46:50.460
kind of the abstraction.

00:46:50.480 --> 00:46:51.700
For those kinds of things.

00:46:51.760 --> 00:46:54.930
And the advantage of that
is that as things improve,

00:46:54.940 --> 00:46:56.640
and boy,
there's a lot of stuff happening now

00:46:56.640 --> 00:47:00.550
with smart cards and other types of
environments that exist out there,

00:47:00.560 --> 00:47:04.120
that CDSA is our way to be able to make
sure that we can continue to plug into

00:47:04.220 --> 00:47:06.280
these different types of environments.

00:47:06.280 --> 00:47:10.100
And is what we recommend people
use when they need to be able to do

00:47:10.100 --> 00:47:13.020
encryption and authentication services.

00:47:13.020 --> 00:47:15.450
A prime example of this is OpenSSL.

00:47:15.500 --> 00:47:20.460
OpenSSL is one of these very
well-known open source solutions.

00:47:20.480 --> 00:47:22.740
It's one of the best solutions
for being able to have

00:47:22.790 --> 00:47:24.300
secure sockets communication.

00:47:24.560 --> 00:47:26.460
Like for a web browser
or something like that.

00:47:26.800 --> 00:47:28.600
And it's actually a very good solution.

00:47:28.750 --> 00:47:29.860
It does an excellent job.

00:47:30.040 --> 00:47:34.480
But where it falls down is that it's
kind of implemented in one solution.

00:47:34.560 --> 00:47:37.060
It has no certificate management in it.

00:47:37.060 --> 00:47:40.550
It has no way of being able
to support like a smart card

00:47:40.550 --> 00:47:42.460
authentication or other things.

00:47:42.860 --> 00:47:46.260
And if you write an
application using OpenSSL,

00:47:46.410 --> 00:47:50.260
well, you probably can get a great
connection to your web server.

00:47:50.480 --> 00:47:54.960
But if you ever want to improve,
if the encryption technologies improve,

00:47:54.960 --> 00:47:59.140
or if you ever end up having new
authentication solutions that

00:47:59.140 --> 00:48:03.510
you want to be able to support,
OpenSSL won't handle that for you.

00:48:03.520 --> 00:48:07.080
And that's where secure transport
and CDSA come into play.

00:48:07.120 --> 00:48:11.170
We're really trying to work, in fact,
with the open source community to promote

00:48:11.170 --> 00:48:13.920
CDSA as really the better solution.

00:48:13.920 --> 00:48:16.560
And kind of are working with
that community at large.

00:48:16.560 --> 00:48:19.120
Since CDSA is also open source,
we think it's a much

00:48:19.120 --> 00:48:20.440
better long-term solution.

00:48:20.480 --> 00:48:26.240
And then another key set of
security services for Jaguar

00:48:26.240 --> 00:48:27.480
are certificate management.

00:48:27.480 --> 00:48:29.920
We've done, again,
there's a lot of work here,

00:48:29.920 --> 00:48:36.230
support for X509 and various
UI services and stuff for being able

00:48:36.320 --> 00:48:38.480
to support for both Carbon and Cocoa.

00:48:38.480 --> 00:48:42.480
Basically to try and make sure that
if you're in an environment where

00:48:42.480 --> 00:48:44.760
you're dealing with certificates,
that you can more adequately

00:48:45.070 --> 00:48:46.480
be able to support them.

00:48:46.480 --> 00:48:48.480
And then there's
sessions later this week.

00:48:48.500 --> 00:48:49.480
Whoops.

00:48:49.480 --> 00:48:50.470
There's sessions later this week.

00:48:50.520 --> 00:48:53.640
There's a lot of sessions later this
week that'll go into more how to

00:48:53.640 --> 00:48:56.480
take advantage of these capabilities.

00:48:56.940 --> 00:49:00.960
So one thing about security before we
move on is packaging your products.

00:49:01.130 --> 00:49:06.740
One of the things that I've noticed as a
user of Mac OS X is that many times folks

00:49:06.800 --> 00:49:11.250
who are writing the software or porting
it to Mac OS X forget about the fact

00:49:11.250 --> 00:49:13.680
that it's a multi-user operating system.

00:49:13.680 --> 00:49:17.200
One of the things I encourage
you to try is make sure that

00:49:17.200 --> 00:49:20.160
when you install an app,
your applications,

00:49:20.160 --> 00:49:22.940
and you're working on your installers,
that you make sure you

00:49:22.940 --> 00:49:26.460
install it as one user,
log out, log in as another user,

00:49:26.460 --> 00:49:29.160
and try and make sure that the
app still works and behaves

00:49:29.160 --> 00:49:30.820
and was installed correctly.

00:49:30.820 --> 00:49:34.400
When you're in a home environment,
the parents most likely will

00:49:34.470 --> 00:49:37.630
install some application,
and then they want the kid to

00:49:37.630 --> 00:49:40.780
be able to log in and use it,
potentially, or not.

00:49:40.820 --> 00:49:45.830
But it's a... You want to make sure
that if you intended your app to

00:49:45.880 --> 00:49:48.480
work for everybody on the computer,
that it truly does.

00:49:48.540 --> 00:49:52.020
So always remember that it's, you know,
down at the base of Mac OS X,

00:49:52.020 --> 00:49:53.160
it's a multi-user OS.

00:49:53.260 --> 00:49:55.800
Test and make sure your
installs work that way.

00:49:55.800 --> 00:49:59.360
File system issues are
another big item that we,

00:49:59.360 --> 00:50:01.880
you know, see a lot as an issue.

00:50:01.880 --> 00:50:06.160
Particularly file system
ownership is very important.

00:50:06.160 --> 00:50:08.450
You want to make sure
that that app you install,

00:50:08.450 --> 00:50:10.360
again,
if you're intended to be able to be

00:50:10.460 --> 00:50:13.480
used by other people on the computer,
that the ownership,

00:50:13.520 --> 00:50:17.310
and of the file is such that it's
possible that somebody other than

00:50:17.310 --> 00:50:18.470
who installed it can execute it.

00:50:18.480 --> 00:50:21.480
And that permissions are
really even more important.

00:50:21.480 --> 00:50:25.540
This is an opportunity,
unfortunately a very bad opportunity

00:50:25.540 --> 00:50:28.480
that people have of being able to
create security holes in the system.

00:50:28.480 --> 00:50:31.480
Make sure that your executables
aren't world writable.

00:50:31.480 --> 00:50:34.480
And it's amazing how
many of those we've seen.

00:50:34.480 --> 00:50:37.480
Or worse yet, that you have an executable
that set UID root.

00:50:37.480 --> 00:50:40.010
In other words,
it effectively has complete

00:50:40.010 --> 00:50:45.310
privileges on the system,
and is also, you know, world writable.

00:50:45.490 --> 00:50:47.380
You know, this is bad.

00:50:47.380 --> 00:50:51.380
You really need to be thinking about
security when you're packaging apps.

00:50:51.380 --> 00:50:54.480
Not just how your app uses
the system in a secure way,

00:50:54.480 --> 00:50:58.380
but how you actually deliver it to
your customer is really important.

00:50:58.380 --> 00:51:01.380
And it's something that's really
different with X than it was with IX.

00:51:01.380 --> 00:51:05.380
And I encourage you to spend a few
extra moments to think about that.

00:51:05.380 --> 00:51:08.470
In addition,
and we talk about set UID applications,

00:51:08.470 --> 00:51:13.280
or applications that effectively say
that they have to be root in order to be

00:51:13.280 --> 00:51:14.210
able to use the services in the system.

00:51:14.570 --> 00:51:17.280
99% of the time that's not true.

00:51:17.300 --> 00:51:20.300
There are ways to get to
the services that you need,

00:51:20.300 --> 00:51:21.280
most likely.

00:51:21.280 --> 00:51:23.280
We can help you with that.

00:51:23.280 --> 00:51:26.550
Instead of doing something horrible,
like making a potential security

00:51:26.550 --> 00:51:29.940
hole for yourself and for your users,
come talk to us.

00:51:30.280 --> 00:51:34.410
The authentication, you know, frameworks,
the security framework

00:51:34.410 --> 00:51:36.700
has a bunch of ways that,
you know,

00:51:36.860 --> 00:51:40.280
will support being able to access the
system in much more controlled ways.

00:51:40.280 --> 00:51:43.160
There are other services
that can help you.

00:51:43.240 --> 00:51:45.580
If you really need that,
maybe it's something that we need to

00:51:45.580 --> 00:51:47.180
add a service in the system for you.

00:51:47.180 --> 00:51:50.110
We really want to discourage
people from being able,

00:51:50.110 --> 00:51:53.180
from, you know, shipping applications
that require set UID.

00:51:53.180 --> 00:51:56.590
And even internal to Apple, we've,
you know, really kind of brought down,

00:51:56.590 --> 00:52:01.180
you know, the gauntlet on our own
internal development.

00:52:01.230 --> 00:52:04.360
Because it's a, you know,
strict rule to really limit the set

00:52:04.360 --> 00:52:06.180
UID apps that are in the system.

00:52:06.180 --> 00:52:08.180
They are a real opportunity for trouble.

00:52:09.560 --> 00:52:12.360
So for security,
if you're interested in learning more,

00:52:12.360 --> 00:52:15.960
there's an authorization
session on Wednesday.

00:52:15.960 --> 00:52:19.310
The CDSA and secure transport,
if you're doing anything that

00:52:19.310 --> 00:52:21.840
you're using OpenSSL for now,
go to that session.

00:52:21.840 --> 00:52:25.240
You really want to be using
CDSA and secure transport.

00:52:25.240 --> 00:52:29.190
There's also a session on
certificates and certificate

00:52:29.230 --> 00:52:32.680
management and UI on Thursday,
and a whole session on Kerberos,

00:52:32.780 --> 00:52:34.000
if you're involved in that.

00:52:34.050 --> 00:52:37.700
And there's also a dedicated
feedback forum for security.

00:52:40.700 --> 00:52:42.320
So, the vector and math libraries.

00:52:42.320 --> 00:52:45.400
These are also part of my organization,
CoreOS.

00:52:45.440 --> 00:52:48.930
It's one of those things
that may not be as visible,

00:52:48.930 --> 00:52:51.640
but this has such an impact on
the performance of the system.

00:52:51.640 --> 00:52:56.210
The capabilities of iMovie and iTunes
and things are all built on the

00:52:56.210 --> 00:52:58.790
vector and math libraries we have.

00:52:59.320 --> 00:53:03.700
Basically,
they are a set of highly tuned,

00:53:03.950 --> 00:53:07.840
both vector and AlteVec,
or vector rather,

00:53:07.840 --> 00:53:11.670
AlteVec-tuned libraries,
as well as scalar math libraries.

00:53:11.680 --> 00:53:15.170
And there's a set of libraries
for doing things like DSP,

00:53:15.430 --> 00:53:19.530
the VBLAS, the basic linear algebra,
and a number of other libraries

00:53:19.530 --> 00:53:21.280
that are in the system.

00:53:21.280 --> 00:53:24.370
If you're doing anything where
you're doing data transformations

00:53:24.370 --> 00:53:27.160
or you're really trying to
take advantage of the AlteVec,

00:53:27.570 --> 00:53:30.540
chances are you can probably...
You can probably do it using these

00:53:30.810 --> 00:53:34.290
libraries without having to go
in and do your own vector code.

00:53:34.990 --> 00:53:37.900
With Jaguar,
there's a lot of work that the team put

00:53:38.260 --> 00:53:44.040
into and LibM or the math library V5 to
make them just absolutely top-notch fast,

00:53:44.040 --> 00:53:48.900
and as well as making sure that
they're IEEE 754 and C99 compliant.

00:53:48.900 --> 00:53:53.440
There's additional features that
were added to the BLAS library,

00:53:53.440 --> 00:53:58.640
specifically double and single precision
and real and complex data types,

00:53:59.200 --> 00:54:04.400
and additional VDSP services,
double precision fast

00:54:04.520 --> 00:54:08.040
Fourier transforms and 2D FFTs and such.

00:54:08.130 --> 00:54:11.720
If you're doing, again,
things where you're doing a lot

00:54:11.770 --> 00:54:15.220
of DSP work or things like that,
you want to check these things out.

00:54:16.930 --> 00:54:20.870
Just to throw a slide here
from a performance standpoint,

00:54:20.870 --> 00:54:24.560
this team is really proud of the
work that they do in terms of

00:54:24.630 --> 00:54:28.180
performance on the vector engine
and the vectorization libraries.

00:54:28.180 --> 00:54:30.240
And for good reason.

00:54:30.240 --> 00:54:34.520
They're getting 2x performance
on a number of these libraries.

00:54:34.520 --> 00:54:40.290
If you look, this is a 1 GHz G4 machine
versus a 2.2 GHz P4,

00:54:40.290 --> 00:54:44.600
and we're still getting
twice the performance.

00:54:44.600 --> 00:54:45.820
That's pretty incredible.

00:54:45.820 --> 00:54:48.320
Again, some great stuff there.

00:54:48.320 --> 00:54:52.330
So if you're doing a lot of work
that uses the vector engine,

00:54:52.340 --> 00:54:55.370
make sure you check out these libraries.

00:54:55.380 --> 00:54:59.930
There's a whole session on the velocity
engine and performance optimization

00:54:59.930 --> 00:55:02.140
on Tuesday I encourage you to go to.

00:55:04.220 --> 00:55:07.960
Now one thing that may not have been
clear is that all of the technology,

00:55:07.960 --> 00:55:12.480
for the most part, with some exceptions,
but with most of the technology

00:55:12.530 --> 00:55:16.670
within the Core OS or Darwin,
is actually all open source.

00:55:16.680 --> 00:55:21.210
Open source is something that
we initiated as a key kind of

00:55:21.600 --> 00:55:25.340
strategic drive for operating system
technology a couple of years ago.

00:55:25.340 --> 00:55:27.370
And Darwin's been around
for a little while now.

00:55:27.380 --> 00:55:31.300
Apple's very serious about
open source technology.

00:55:31.800 --> 00:55:34.560
We leverage the open source community,
but more importantly,

00:55:34.560 --> 00:55:38.970
we make sure that the whole core of
Mac OS X is available as open source.

00:55:38.980 --> 00:55:43.060
And we're the only company
of our type that is actively,

00:55:43.060 --> 00:55:48.520
you know, depending on open sources as
a key part of their commercial

00:55:48.520 --> 00:55:52.950
business solution in this way,
and working with the community, in fact,

00:55:53.030 --> 00:55:54.700
and making sure that this works.

00:55:54.700 --> 00:55:58.090
It's important to note that
we use the term Darwin and

00:55:58.090 --> 00:56:02.030
Core OS completely interchangeably,
because they are the same.

00:56:02.100 --> 00:56:03.670
We open source the whole core.

00:56:03.960 --> 00:56:08.360
You can go out and build the
Core OS of Mac OS X and actually slip,

00:56:08.460 --> 00:56:12.120
you know, your own built version under a
shipping version of the system.

00:56:12.180 --> 00:56:14.410
We don't encourage you to
do that with your customers,

00:56:14.520 --> 00:56:15.670
because you get to support it.

00:56:15.780 --> 00:56:19.480
But I know it's something
that technically is possible,

00:56:19.480 --> 00:56:22.380
and it will allow you to actually
go in and work with the technology

00:56:22.380 --> 00:56:23.720
that's part of the system.

00:56:23.840 --> 00:56:25.770
And more importantly,
participate in evolving

00:56:25.770 --> 00:56:26.790
it and developing it.

00:56:26.800 --> 00:56:30.140
There's a number of projects that are
supported in our open source efforts,

00:56:30.560 --> 00:56:34.480
not only Darwin, the core of Mac OS X,
but the Darwin streaming server,

00:56:34.480 --> 00:56:38.550
basically the streaming technology,
what you affectionately know as

00:56:38.550 --> 00:56:41.420
the QuickTime streaming server
that was released a while ago,

00:56:41.420 --> 00:56:43.650
but in the open source community,
it's known as the

00:56:43.650 --> 00:56:44.700
Darwin streaming server.

00:56:44.700 --> 00:56:46.820
That's been ported to a
number of different platforms.

00:56:46.820 --> 00:56:51.320
OpenPlay, which is a kind of network
abstraction for network gameplay.

00:56:51.320 --> 00:56:55.820
The CDSA framework that I talked
about a few moments ago.

00:56:55.820 --> 00:56:59.820
And Hederdoc, which is basically source
code documentation,

00:57:00.440 --> 00:57:02.400
and the open source application tools.

00:57:02.400 --> 00:57:04.310
So please come be part of
our open source efforts.

00:57:04.880 --> 00:57:10.400
There's a handful of new initiatives
we have around open source.

00:57:10.430 --> 00:57:16.400
One is, we just launched last week with
the Internet Software Consortium,

00:57:16.400 --> 00:57:19.660
opendarwin.org,
and it's basically a way for

00:57:19.660 --> 00:57:22.320
even more people to participate
in our open source activities.

00:57:22.430 --> 00:57:24.400
It's basically not controlled by Apple.

00:57:24.400 --> 00:57:27.830
We've basically helped get this set up,
and have been kind of

00:57:27.830 --> 00:57:30.240
helping with the process,
but are really trying to make sure that

00:57:30.240 --> 00:57:30.240
there's a way for people to participate
in our open source activities.

00:57:30.240 --> 00:57:33.810
There's a way for community
involvement and the community to really

00:57:34.110 --> 00:57:36.240
drive the open source activities.

00:57:36.350 --> 00:57:40.730
Our Darwin,
the opensource.apple.com is still,

00:57:40.730 --> 00:57:45.240
and Darwin is still the reference
open source platform and drop,

00:57:45.240 --> 00:57:48.800
the source code drop,
but the opendarwin initiative allows

00:57:48.800 --> 00:57:51.240
even more people to participate.

00:57:51.240 --> 00:57:53.730
And there's a couple of new
projects that are now part of

00:57:53.810 --> 00:57:55.240
our open source initiative.

00:57:55.240 --> 00:57:59.180
Open Directory, so all our directory
services infrastructure.

00:58:00.210 --> 00:58:02.740
There's now been open source,
as well as CUPS,

00:58:03.020 --> 00:58:05.920
the common Unix printing system.

00:58:06.520 --> 00:58:11.620
So with all this,
there's actually been a huge amount of

00:58:11.620 --> 00:58:13.690
progress by the open source community.

00:58:13.890 --> 00:58:16.080
A lot of stuff that we've
actually got in Jaguar,

00:58:16.340 --> 00:58:19.660
particularly things we've upgraded
as far as in the UNIX space,

00:58:19.900 --> 00:58:22.270
has been as a result of our
collaboration with that.

00:58:22.400 --> 00:58:24.230
A lot of people have been
contributing directly.

00:58:24.420 --> 00:58:26.720
But there's also been people
who have been porting some

00:58:26.720 --> 00:58:29.100
interesting stuff to the platform.

00:58:29.100 --> 00:58:32.840
As you might see here,
OpenOffice has recently

00:58:32.840 --> 00:58:35.900
been ported to Mac OS X.

00:58:37.630 --> 00:58:42.120
We'll talk a lot more about open source
and the initiatives and how you can get

00:58:42.180 --> 00:58:46.110
involved in the infrastructure and all
that kind of stuff tomorrow afternoon at

00:58:46.110 --> 00:58:48.840
the open source Apple and You session.

00:58:48.840 --> 00:58:49.980
Come join us.

00:58:51.720 --> 00:58:55.090
So a few last thoughts.

00:58:55.390 --> 00:58:57.880
We spent a bit of time just
giving an overview of the Core OS.

00:58:58.050 --> 00:59:00.560
The purpose is you know
what the technologies are,

00:59:00.600 --> 00:59:03.770
you know what's underneath the covers,
but you should always develop to the

00:59:03.770 --> 00:59:05.500
highest level abstraction you can.

00:59:05.500 --> 00:59:10.700
Try to avoid using the low level APIs and
services unless you absolutely have to.

00:59:10.700 --> 00:59:15.090
There are great abstractions for a lot
of these things in Carbon and Cocoa,

00:59:15.320 --> 00:59:19.240
but many times there are things that
you can only get to through getting

00:59:19.240 --> 00:59:21.580
access to lower levels of the system.

00:59:21.600 --> 00:59:25.260
And I think it's important to know
what the building blocks are because it

00:59:25.260 --> 00:59:28.430
does impact the behavior of the system.

00:59:28.890 --> 00:59:30.670
Remember,
Carbon and Cocoa and all the rest

00:59:30.670 --> 00:59:33.690
of the environments are all built
on top of these foundations,

00:59:33.690 --> 00:59:36.200
so fundamentally you know
what's at the bottom and there's

00:59:36.200 --> 00:59:39.050
the source to all of that,
the stuff at the bottom that

00:59:39.050 --> 00:59:42.090
you can see in case you really
want to know how it works.

00:59:42.200 --> 01:01:18.600
[Transcript missing]

01:01:19.000 --> 01:02:21.500
[Transcript missing]

01:02:22.100 --> 01:02:25.930
So one last set of pointers
off to some other sessions.

01:02:26.140 --> 01:02:28.960
We have this developing for
performance session on Friday.

01:02:28.960 --> 01:02:32.150
This will be a great session,
strongly encouraged.

01:02:32.220 --> 01:02:36.240
There's a feedback forum for all of the
Darwin technologies Wednesday afternoon,

01:02:36.240 --> 01:02:39.900
the security feedback forum, of course,
on Thursday, and the networking

01:02:39.900 --> 01:02:41.500
feedback forum on Friday.

01:02:43.300 --> 01:02:47.880
You can get a hold of me if
there's something that comes up as

01:02:47.880 --> 01:02:50.620
far as the Core OS is concerned.