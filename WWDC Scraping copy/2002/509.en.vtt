WEBVTT

00:00:05.240 --> 00:00:06.040
Good afternoon everyone.

00:00:06.040 --> 00:00:06.860
I'm Travis Brown.

00:00:06.860 --> 00:00:09.560
I'm the graphics and imaging
evangelist here at Apple.

00:00:09.560 --> 00:00:13.200
I want to welcome you to session 509,
which is ColorSync & Digital Media.

00:00:13.210 --> 00:00:15.540
Before we jump into session content,
I want to just sort of take

00:00:15.590 --> 00:00:18.120
a moment to sort of reiterate
the fact that Apple feels that

00:00:18.260 --> 00:00:21.350
color is incredibly important
to our developers and our users.

00:00:21.400 --> 00:00:25.360
This is because we really see color as
a platform advantage on the Macintosh.

00:00:25.450 --> 00:00:29.060
Color management really has some of
its genesis in the work that was done

00:00:29.060 --> 00:00:31.320
at Apple with the original ColorSync.

00:00:31.370 --> 00:00:36.020
We've also extended that to include
many major companies in the founding

00:00:36.050 --> 00:00:39.730
of the International Color Consortium.

00:00:39.760 --> 00:00:41.320
So color management is
alive and well at Apple.

00:00:41.320 --> 00:00:43.430
It's something we believe
is critically important.

00:00:43.430 --> 00:00:47.260
We want to have the experience
as seamless as possible.

00:00:47.260 --> 00:00:49.160
For example,
last year we spoke a lot about

00:00:49.160 --> 00:00:52.800
how we've integrated ColorSync
in conjunction with Quartz 2D,

00:00:52.850 --> 00:00:56.080
which is Mac OS X's new drawing API.

00:00:56.080 --> 00:00:59.260
This integration allows users
to get what they expect.

00:00:59.260 --> 00:01:01.240
The fact that if they
see color on the screen,

00:01:01.240 --> 00:01:01.260
they can see it.

00:01:01.310 --> 00:01:03.820
They can print it,
which is something sort of striven

00:01:03.820 --> 00:01:07.920
for by all the color scientists and
color management experts out there.

00:01:07.920 --> 00:01:10.600
But it's something that's a
really difficult problem to solve.

00:01:10.600 --> 00:01:13.070
And now that we've done that degree of
integration and that kind of capabilities

00:01:13.100 --> 00:01:15.780
are available in the operating system,
we've started to look at other

00:01:15.780 --> 00:01:17.450
opportunities for ColorSync.

00:01:17.480 --> 00:01:19.270
And that's one of the sort
of features of the session.

00:01:19.290 --> 00:01:22.290
We're going to be talking about
not only ColorSync with regards

00:01:22.290 --> 00:01:25.460
to what's going on with ColorSync,
some fine point details on

00:01:25.460 --> 00:01:28.330
ColorSync and how it's integrated
in the operating system,

00:01:28.330 --> 00:01:31.240
but also we're going to be showing
off doing things with video.

00:01:31.240 --> 00:01:32.210
And color management.

00:01:32.230 --> 00:01:35.080
Doing things with video and
color management in real time,

00:01:35.080 --> 00:01:37.400
which those really
didn't all go together.

00:01:37.400 --> 00:01:39.650
And we're going to show in
terms of they're sort of

00:01:39.650 --> 00:01:41.290
mutually exclusive concepts.

00:01:41.300 --> 00:01:43.810
And that's what we're
going to show here today.

00:01:43.850 --> 00:01:46.200
So what I want to do is
invite David Hayward,

00:01:46.200 --> 00:01:49.770
ColorSync engineer to the stage
to take you through the session.

00:01:54.950 --> 00:01:55.460
Thank you, Travis.

00:01:55.460 --> 00:01:59.480
Well, welcome all today to the
ColorSync & Digital Media session.

00:01:59.480 --> 00:02:00.920
We have a lot to talk about today.

00:02:00.920 --> 00:02:04.400
Again, we'll be talking especially about
digital media at the end of the session,

00:02:04.420 --> 00:02:07.200
but there's several other things
I'd like to talk about as well.

00:02:07.200 --> 00:02:09.710
First of all,
I want to start the presentation with

00:02:09.770 --> 00:02:13.410
a general overview of ColorSync and
color management in general for those

00:02:13.500 --> 00:02:15.380
of you who may be new to the concept.

00:02:16.190 --> 00:02:18.940
Following that,
I want to go to describe a more

00:02:18.940 --> 00:02:22.280
elaborate example of the chain of
operations that can occur on an

00:02:22.280 --> 00:02:25.540
image on Mac OS X now that it's
fully integrated into the system and

00:02:25.540 --> 00:02:27.610
how to avoid some common pitfalls.

00:02:29.020 --> 00:02:31.380
After that,
I'll be giving an update on ColorSync

00:02:31.380 --> 00:02:36.000
and Jaguar and what changes we've
made for the upcoming release.

00:02:36.360 --> 00:02:39.600
Following that,
Luke will be coming up on stage and

00:02:39.640 --> 00:02:41.660
talking about ColorSync and the Quartz.

00:02:41.660 --> 00:02:43.620
And then lastly,
I'll be talking about the exciting stuff

00:02:43.710 --> 00:02:47.680
of ColorSync and live action video.

00:02:48.590 --> 00:02:50.160
So first of all,
an overview of ColorSync for

00:02:50.270 --> 00:02:51.120
those of you who are new.

00:02:51.120 --> 00:02:55.600
Today we're all blessed with the problem
of having a wide variety of color devices

00:02:55.600 --> 00:02:57.980
that we all work with day in and day out.

00:02:58.440 --> 00:03:03.480
These, you know, all sorts of devices,
digital cameras, digital scanners,

00:03:03.480 --> 00:03:07.760
LCD displays, tube displays,
inkjet printers, presses,

00:03:07.760 --> 00:03:09.950
all of these devices
work with colors in very,

00:03:10.010 --> 00:03:11.140
very different ways.

00:03:11.280 --> 00:03:14.470
Different color spaces and all of
them have a different gamut or range

00:03:14.550 --> 00:03:16.390
of colors that they can represent.

00:03:17.140 --> 00:03:20.570
The problem that this creates is that
it's very difficult for a document

00:03:20.670 --> 00:03:24.740
that's created on one device to look
correct when outputted on other devices,

00:03:24.750 --> 00:03:28.640
which is something we try to do more
and more today as we repurpose content.

00:03:28.640 --> 00:03:30.860
So the solution to this
problem is ColorSync,

00:03:30.910 --> 00:03:34.540
which provides a complete color
management system in order

00:03:34.540 --> 00:03:39.440
to correct color across these
wide and disparate devices.

00:03:39.850 --> 00:03:42.020
That said, ColorSync can also be used,
in addition to doing

00:03:42.060 --> 00:03:44.680
device color management,
can also be used to do

00:03:44.870 --> 00:03:46.040
color special effects.

00:03:46.140 --> 00:03:48.240
And that's something I'll be showing
a little bit later when it comes

00:03:48.240 --> 00:03:49.820
to talking about digital video.

00:03:52.710 --> 00:03:54.850
So ColorSync,
in order to provide this solution

00:03:55.120 --> 00:03:58.880
for a wide variety of devices,
is a very open system and extendable.

00:03:58.880 --> 00:04:02.030
And it achieves this extensibility
and openness by basing itself

00:04:02.040 --> 00:04:03.420
on two open foundations.

00:04:03.540 --> 00:04:07.360
The first is the ICC profile format,
and the second are color

00:04:07.360 --> 00:04:09.330
management modules,
or CMMs.

00:04:09.340 --> 00:04:11.060
I'm going to talk a little
bit about each of these for

00:04:11.060 --> 00:04:12.200
those of you who might be new.

00:04:14.540 --> 00:04:15.440
ICC Profiles.

00:04:15.550 --> 00:04:16.660
What is an ICC Profile?

00:04:16.660 --> 00:04:20.680
An ICC Profile is a cross-platform
file format which is defined by

00:04:20.680 --> 00:04:22.300
the International Color Consortium.

00:04:22.300 --> 00:04:26.400
You can go to their website at
www.color.org and you can get

00:04:26.400 --> 00:04:32.610
all the detailed information
about the file format there,

00:04:32.610 --> 00:04:32.610
the current and past versions
of the specification.

00:04:32.770 --> 00:04:35.430
To summarize briefly
what the file format is,

00:04:35.430 --> 00:04:39.630
it's a document that contains data
and tables that transform color

00:04:39.700 --> 00:04:48.050
between an individual device's unique
color space into an intermediate

00:04:48.050 --> 00:04:51.000
interchange space based on the common
way that humans perceive color.

00:04:51.450 --> 00:04:54.160
In general, profiles fall into one
of several classes.

00:04:54.160 --> 00:04:58.350
You can have typical classes such
as input for scanner and camera,

00:04:58.420 --> 00:05:01.700
display and output classes,
but there's also a couple other

00:05:01.700 --> 00:05:05.840
classes that are lesser known,
such as abstract classes

00:05:05.840 --> 00:05:07.970
and name profile classes.

00:05:08.420 --> 00:05:11.260
Again,
this ICT profile format is designed

00:05:11.260 --> 00:05:12.940
to be very broad and flexible.

00:05:12.940 --> 00:05:16.200
In addition to being able to
represent a wide range of devices,

00:05:16.300 --> 00:05:20.800
it can also represent
standard spaces such as NTSC,

00:05:21.170 --> 00:05:22.820
PAL, you name it.

00:05:27.210 --> 00:05:30.110
So the other foundation that
ColorSync rests upon that allows

00:05:30.110 --> 00:05:33.420
for it to be open and extendable
are color management modules,

00:05:33.440 --> 00:05:34.090
or CMMs.

00:05:34.100 --> 00:05:38.030
And the CMMs provide the mathematical
engine that does all the color

00:05:38.150 --> 00:05:41.360
transformation based on the data
that's found inside profiles.

00:05:41.360 --> 00:05:45.560
Now, Apple provides the
default CMM on Mac OS X.

00:05:45.560 --> 00:05:48.070
It's very similar to the CMM that
we've shipped in past releases

00:05:48.070 --> 00:05:49.500
all the way back to Mac OS 9.

00:05:49.500 --> 00:05:53.790
But it's also possible for third parties
to provide their own CMMs if needed.

00:05:54.460 --> 00:05:56.560
In general,
this is not that often needed,

00:05:56.560 --> 00:06:00.120
but if you have custom solutions that
you want to provide to a specific market,

00:06:00.120 --> 00:06:04.310
then it's possible to add a
third-party CMM into ColorSync,

00:06:04.400 --> 00:06:05.930
and it'll be used
everywhere in the system.

00:06:10.290 --> 00:06:12.330
So now that we've talked
about those basic ingredients,

00:06:12.400 --> 00:06:15.650
I want to give a very simplified model
of how ColorSync works in practice.

00:06:15.660 --> 00:06:19.580
At the top we have an application,
which some of you may be writing,

00:06:19.580 --> 00:06:21.440
and it will use ColorSync.

00:06:21.480 --> 00:06:24.120
And it can use ColorSync either
directly or indirectly through other

00:06:24.230 --> 00:06:25.850
APIs that are provided on the Mac OS.

00:06:25.860 --> 00:06:27.900
But the basic premise is very simple.

00:06:27.900 --> 00:06:31.680
The idea is you want to get an image,
a source image, from a file.

00:06:31.680 --> 00:06:35.390
And ideally that file will be tagged
with a profile that represents the device

00:06:35.470 --> 00:06:37.590
from which that document originated.

00:06:38.450 --> 00:06:41.200
As long as that profile
is tagged with a profile,

00:06:41.200 --> 00:06:43.360
or as long as that image
is tagged with a profile,

00:06:43.360 --> 00:06:46.560
then we now know the colorimetry
and the color behavior of the

00:06:46.570 --> 00:06:48.300
device from which that came.

00:06:48.300 --> 00:06:52.320
This allows us to now display that
image correctly on the user's display.

00:06:52.320 --> 00:06:55.630
We do this by determining the
profile for the display and then

00:06:55.760 --> 00:06:59.540
setting up a ColorSync transformation
between the source profile,

00:06:59.540 --> 00:07:03.200
the camera's profile in this example,
and the user's display profile.

00:07:03.200 --> 00:07:07.620
The idea behind this is that now when
the image is displayed on the screen,

00:07:08.290 --> 00:07:11.290
it will be a faithful reproduction,
or as faithful as possible,

00:07:11.300 --> 00:07:13.560
to the original content, original scene.

00:07:13.560 --> 00:07:16.100
A similar process occurs when printing.

00:07:16.100 --> 00:07:19.200
In a simplified description,
when it comes time to print,

00:07:19.200 --> 00:07:21.920
the original document with its
embedded profile is sent to the

00:07:22.070 --> 00:07:25.340
printer where we can determine
what the printer profile is.

00:07:25.360 --> 00:07:27.830
And again,
the end result is that when printed,

00:07:27.840 --> 00:07:29.890
the document will,
as faithfully as possible,

00:07:29.890 --> 00:07:31.360
reproduce the original scene.

00:07:35.750 --> 00:07:39.470
This next slide provides a diagram
of how ColorSync fits into the

00:07:39.470 --> 00:07:41.000
overall Mac OS X architecture.

00:07:41.000 --> 00:07:45.360
And now more than ever,
it's well integrated into the Mac OS X.

00:07:47.300 --> 00:07:48.960
As you see at the top,
as you may be familiar

00:07:48.960 --> 00:07:52.100
from other presentations,
we have Carbon and Cocoa applications,

00:07:52.100 --> 00:07:53.980
both of which can call ColorSync.

00:07:54.020 --> 00:07:57.010
You can get a lot of
functionality directly out of

00:07:57.100 --> 00:07:59.700
Cocoa or by calling Quartz,
or if you want,

00:07:59.770 --> 00:08:02.420
your application can still call
ColorSync directly if you wish,

00:08:02.420 --> 00:08:06.550
if you want to provide very specific
functionality to your users.

00:08:06.580 --> 00:08:09.720
In either case,
no matter how ColorSync is called,

00:08:09.720 --> 00:08:13.270
ColorSync is built up on top
of the Darwin Foundation that's

00:08:13.310 --> 00:08:15.620
part of Mac OS X,
and CMMs are loaded

00:08:15.620 --> 00:08:17.220
dynamically as needed.

00:08:17.300 --> 00:08:18.300
Thank you.

00:08:20.930 --> 00:08:24.380
So to finish up the summary
of the overview of ColorSync,

00:08:24.450 --> 00:08:26.950
I just want to give a brief
description of the key components

00:08:26.980 --> 00:08:29.340
that make up ColorSync on Mac OS X.

00:08:29.340 --> 00:08:31.310
First of all,
there's a couple pieces that

00:08:31.370 --> 00:08:33.080
provide user interface to users.

00:08:33.100 --> 00:08:36.270
First is the ColorSync preference panel,
which provides basic

00:08:36.350 --> 00:08:37.750
preferences for novice users.

00:08:37.760 --> 00:08:40.550
Secondarily is the ColorSync
utility application,

00:08:40.550 --> 00:08:43.190
which provides more
advanced functionality.

00:08:43.200 --> 00:08:46.910
Then we have the ColorSync API,
or the ColorSync framework.

00:08:47.490 --> 00:08:49.420
On Mac OS X,
this is provided as part of the

00:08:49.420 --> 00:08:51.240
application services framework.

00:08:51.260 --> 00:08:55.120
ColorSync is made up of about 120 APIs.

00:08:55.370 --> 00:08:58.960
In general, these APIs fall into a
couple broad categories.

00:08:59.000 --> 00:09:03.890
First category are a set of APIs that
are used for doing basic profile access.

00:09:03.900 --> 00:09:07.950
These APIs allow you to read profiles,
write profiles, create new profiles, etc.

00:09:09.910 --> 00:09:13.080
Next, there are a set of API that allow
you to search for profiles or

00:09:13.080 --> 00:09:17.730
iterate over all the profiles that
are installed on the user's system.

00:09:19.250 --> 00:09:23.760
The third category of API are what we
refer to as device integration API.

00:09:23.760 --> 00:09:27.370
These were introduced first in
Mac OS X-1 and these provide very

00:09:27.370 --> 00:09:34.200
advanced functionality so that
device drivers such as image capture,

00:09:34.200 --> 00:09:38.600
display manager and printing can
register devices with ColorSync

00:09:38.610 --> 00:09:42.200
and most importantly register
the profiles for these devices.

00:09:42.200 --> 00:09:48.970
It is also possible using this API for
calibrators to change the profiles for

00:09:48.970 --> 00:09:54.270
each device from the factory profile
that is created for it automatically.

00:09:55.540 --> 00:09:59.350
Lastly, there is a set of API for dealing
with what we call color worlds.

00:09:59.360 --> 00:10:03.160
A color world is ColorSync's
opaque object that represents a

00:10:03.160 --> 00:10:05.500
concatenation of one or more profiles.

00:10:05.690 --> 00:10:08.280
Once you've opened profiles,
you can create a color world,

00:10:08.280 --> 00:10:11.690
and once you have a color world,
you can match pixels.

00:10:12.330 --> 00:10:14.780
and then again, as I mentioned before,
the other key pieces of

00:10:14.860 --> 00:10:17.430
ColorSync are CMMs and profiles.

00:10:20.770 --> 00:10:23.600
So now that we have a basic understanding
of ColorSync and color management,

00:10:23.640 --> 00:10:26.630
I want to go into a
more elaborate example.

00:10:26.670 --> 00:10:29.000
And you could argue that this
is a bit of an extreme example,

00:10:29.000 --> 00:10:32.930
but to a certain extent it shows how well
ColorSync is integrated into the system,

00:10:32.930 --> 00:10:36.590
because for a given document,
it can have a long life and be affected

00:10:36.590 --> 00:10:40.760
by multiple parts of the system,
all of which may support ColorSync.

00:10:40.760 --> 00:10:45.590
So let me go into a brief description
of a somewhat extreme example.

00:10:45.940 --> 00:10:48.070
First of all,
let's say a document begins its life

00:10:48.460 --> 00:10:51.410
after it is acquired by the image
capture architecture and a profile

00:10:51.410 --> 00:10:53.420
is associated with that document.

00:10:53.420 --> 00:10:56.830
After that,
it may be edited by a Carbon application,

00:10:56.840 --> 00:10:59.900
which hopefully will preserve
the contents of that profile.

00:10:59.900 --> 00:11:03.860
Later on, it might be converted by
a drag-and-drop utility,

00:11:03.860 --> 00:11:06.080
which is based on
QuickTime graphics importers.

00:11:06.080 --> 00:11:09.470
Later on,
that document could be opened in preview,

00:11:09.470 --> 00:11:12.940
where it will be displayed
correctly on the screen.

00:11:13.280 --> 00:11:15.920
But when it comes time to print,
then another series of actions occur.

00:11:15.920 --> 00:11:20.980
The document will be rastered by courts,
sent through to the printer driver,

00:11:20.980 --> 00:11:24.460
and hopefully, if all goes well,
it ends up on the output of your printer.

00:11:24.460 --> 00:11:29.480
So this is a long sequence of operations,
and it illustrates just how well

00:11:29.480 --> 00:11:33.880
integrated ColorSync is into our system,
because ColorSync can have a place to

00:11:34.000 --> 00:11:36.300
operate at each one of these stages.

00:11:36.320 --> 00:11:39.960
However, like any good chain,
there is opportunity for

00:11:39.960 --> 00:11:41.920
weak links in those chains.

00:11:41.990 --> 00:11:43.250
So I want to describe.

00:11:43.280 --> 00:11:47.430
a couple problems that are
common and are easy to avoid.

00:11:48.710 --> 00:11:51.130
So for one thing,
when an image is acquired

00:11:51.250 --> 00:11:53.980
by image capture,
it is often the case that a camera

00:11:54.100 --> 00:11:55.420
will not register a profile.

00:11:55.420 --> 00:11:58.670
Part of the reason for this is that
it can be difficult to create a

00:11:58.780 --> 00:12:02.120
general profile for a camera because
cameras are designed to work in a

00:12:02.120 --> 00:12:03.960
wide variety of lighting conditions.

00:12:03.980 --> 00:12:08.340
But that said, even so,
it's possible to create general profiles,

00:12:08.340 --> 00:12:12.400
and if a camera is being used
in a specific environment,

00:12:12.400 --> 00:12:14.290
it's possible to create
a good profile for that.

00:12:16.160 --> 00:12:18.670
Obviously,
if you don't have a profile for a camera,

00:12:18.900 --> 00:12:21.660
then other stages later on in the
chain will have to make assumptions

00:12:21.660 --> 00:12:24.550
based on user preferences for
how to handle untagged data.

00:12:27.830 --> 00:12:31.800
Later on, when a document is edited
by a Carbon application or

00:12:32.080 --> 00:12:35.430
converted by a QuickTime tool,
it's important that apps must check

00:12:35.570 --> 00:12:40.040
for embedded profiles and preserve that
when the document is rewritten to disk.

00:12:40.180 --> 00:12:44.870
I'll describe an easy solution to
this problem in the subsequent slide.

00:12:46.900 --> 00:12:52.460
Also, when it comes time to print,
the data will be rastered by quartz and

00:12:52.530 --> 00:12:54.280
converted to the printer's color space.

00:12:54.340 --> 00:12:57.480
But again,
some printers don't register profiles,

00:12:57.480 --> 00:12:59.680
and there's some consequences to that
that you should be made aware of,

00:12:59.680 --> 00:13:01.250
especially if you're a
printer driver manufacturer.

00:13:03.530 --> 00:13:06.860
So let me go into one set of code
examples for how you can avoid

00:13:06.860 --> 00:13:08.680
one of these common weak links.

00:13:08.680 --> 00:13:13.310
As an example, what I have is a
hypothetical application,

00:13:13.410 --> 00:13:17.070
a drag-and-drop application, for example,
that converts a file format from

00:13:17.070 --> 00:13:19.500
whatever format it currently is to TIFF.

00:13:19.600 --> 00:13:22.980
And it does this by leveraging
the graphics importer-exporter

00:13:23.170 --> 00:13:26.770
functionality that's part of QuickTime,
which is a very convenient set of

00:13:26.770 --> 00:13:28.790
API that handles all this for you.

00:13:28.980 --> 00:13:33.000
So what I have is a basic function,
which is called convertToTIFF,

00:13:33.300 --> 00:13:36.920
it takes an input file and will
put the result into an output file.

00:13:36.920 --> 00:13:39.680
And the way it works is by
first getting the graphics

00:13:39.680 --> 00:13:41.630
importer for the supplied file.

00:13:41.640 --> 00:13:44.640
After that,
it creates a destination graphics

00:13:44.950 --> 00:13:49.130
exporter component by just looking
for the hard-coded TIFF component.

00:13:49.590 --> 00:13:51.930
Obviously,
you could be more elaborate and allow the

00:13:51.930 --> 00:13:54.900
user to choose a destination file format,
but for this example,

00:13:54.900 --> 00:13:56.180
I just hard-coded TIFF.

00:13:57.680 --> 00:14:00.130
Once we have the importer
and exporter component,

00:14:00.130 --> 00:14:01.640
we want to connect the
two of these together.

00:14:01.640 --> 00:14:05.960
We do that with the next two calls,
which basically tell the exporter

00:14:05.960 --> 00:14:09.180
to pull data from the importer
and output it to the file.

00:14:11.440 --> 00:14:13.240
It's very handy.

00:14:13.240 --> 00:14:15.690
So on this next page,
we have the code that's actually

00:14:15.690 --> 00:14:18.400
critical in order to preserve
ColorSync profile information.

00:14:18.400 --> 00:14:21.470
And it's actually not a lot of work.

00:14:21.570 --> 00:14:24.430
Once you do that, however,
you'll have a utility that works well

00:14:24.430 --> 00:14:26.400
in the ColorSync chain of operations.

00:14:26.540 --> 00:14:29.940
All I'm doing here is calling the import,
graphics importer,

00:14:29.940 --> 00:14:34.070
asking it for the embedded profile,
and then taking that embedded profile

00:14:34.160 --> 00:14:38.380
and telling the exporter that this is
the profile to use for the exporter.

00:14:38.380 --> 00:14:40.960
If you don't do this,
the profile will be lost.

00:14:41.800 --> 00:14:44.290
Once you've made these two short calls,
all you have to do is call

00:14:44.370 --> 00:14:47.380
graphics export or do export,
clean up, and everything's done.

00:14:50.780 --> 00:14:53.690
One of the other weak links in the
chain that's important to be aware

00:14:53.690 --> 00:14:58.700
of is the conversion that occurs
with ColorSync when printing occurs.

00:14:58.700 --> 00:15:02.770
It's important to remember that
Quartz matches all color data,

00:15:02.770 --> 00:15:04.750
whether it's tagged
with a profile or not,

00:15:04.860 --> 00:15:06.690
to the printer's registered color space.

00:15:06.700 --> 00:15:10.720
The reason behind this objective is
so that all the data is sent to the

00:15:10.720 --> 00:15:14.700
printer in a common color space,
which actually can make it more

00:15:14.700 --> 00:15:16.490
convenient for printer drivers.

00:15:17.000 --> 00:15:20.080
However, if your printer driver does
not register a profile,

00:15:20.290 --> 00:15:23.260
then Quartz will match all the
data to an assumed profile,

00:15:23.260 --> 00:15:25.430
which is currently the display profile.

00:15:25.590 --> 00:15:29.090
Again, this achieves the objective
of having all data sent to

00:15:29.090 --> 00:15:33.930
the profile in a common space,
but one of the caveats is that that color

00:15:33.930 --> 00:15:37.920
space will be different from one machine
to another because one machine will have

00:15:37.920 --> 00:15:40.180
a different display profile from another.

00:15:40.350 --> 00:15:44.610
So this is something to be aware of
if you're writing printer drivers.

00:15:45.520 --> 00:15:47.850
After the printer driver
receives the matched data,

00:15:47.850 --> 00:15:50.940
several printer drivers will
do additional color management.

00:15:50.940 --> 00:15:53.400
They're free to do so,
and that may make a lot of sense.

00:15:53.580 --> 00:15:57.440
Again, it's further justification for a
printer driver to register a profile,

00:15:57.560 --> 00:16:01.320
because the way most printer drivers
do additional color management

00:16:01.390 --> 00:16:05.230
is to have known tables that
convert from an input color space

00:16:05.520 --> 00:16:07.440
to their ink-specific color spaces.

00:16:07.440 --> 00:16:11.330
And having a known colorimetry
as the input is critical in order

00:16:11.330 --> 00:16:13.430
to achieve this effectively.

00:16:16.150 --> 00:16:20.430
So the next subject I'd like to
talk about today is an update of

00:16:20.550 --> 00:16:25.590
ColorSync for Jaguar and what we've
changed in the upcoming system.

00:16:26.500 --> 00:16:28.280
We've made changes in
a couple broad areas.

00:16:28.400 --> 00:16:30.150
We've made changes to
the profiles we ship,

00:16:30.230 --> 00:16:33.650
some minor changes to the framework,
and the preference pane in the utility.

00:16:33.660 --> 00:16:35.900
I'll talk about each of these
in a little bit more detail.

00:16:40.390 --> 00:16:44.200
So we've updated some of the profiles
that we ship by default with Mac OS X.

00:16:44.460 --> 00:16:47.310
And these are important default
profiles which are often used by

00:16:47.540 --> 00:16:51.530
users for data that doesn't have,
or for images that don't have

00:16:51.550 --> 00:16:53.480
profiles embedded in them.

00:16:53.480 --> 00:16:55.230
So it's important to be
aware of these changes.

00:16:55.700 --> 00:16:58.980
For one thing, the generic RGB profile
will be changing slightly.

00:16:58.980 --> 00:17:02.060
In the past,
the generic RGB profile was based on the

00:17:02.060 --> 00:17:04.900
venerable Apple Color 13-inch display.

00:17:04.900 --> 00:17:09.270
And so it was roughly based on P22
phosphor set with a 9300 degree

00:17:09.270 --> 00:17:11.500
white point and a 1.8 gamma.

00:17:11.500 --> 00:17:14.640
And what we're trying to do
is to make minor changes to

00:17:14.640 --> 00:17:16.700
that to make it more standard.

00:17:16.700 --> 00:17:20.370
For one, we're changing the
phosphors to be exactly P22.

00:17:20.400 --> 00:17:24.650
We're changing the white point to be D65,
which actually is a closer

00:17:24.770 --> 00:17:25.680
match to most other profiles.

00:17:25.680 --> 00:17:28.580
And we're changing the white points
to be LCD display white points.

00:17:28.580 --> 00:17:31.130
And it also avoids the overly
blue cast of tube displays.

00:17:31.140 --> 00:17:35.530
The gamma is being left at 1.8 since
this is a long tradition for the Mac.

00:17:37.380 --> 00:17:39.530
The generic CMYK profile
has also changed.

00:17:39.530 --> 00:17:41.960
The generic CMYK profile
was originally based on the

00:17:42.040 --> 00:17:43.840
Apple Color LaserWriter printer.

00:17:43.840 --> 00:17:47.720
Since that's no longer available,
there's not too much reason keeping

00:17:48.110 --> 00:17:50.550
the generic CMYK profile based on it.

00:17:50.940 --> 00:17:53.170
Instead,
we're basing the generic CMYK profile

00:17:53.290 --> 00:17:55.220
on the standard swap color space.

00:17:55.220 --> 00:18:00.080
It's a subsampled version
of the TR-001 swap profile,

00:18:00.080 --> 00:18:04.330
which provides nice,
smooth CMYK results with a profile

00:18:04.330 --> 00:18:06.280
that's relatively small in size.

00:18:09.710 --> 00:18:12.520
We've made lots of minor changes
to the ColorSync framework.

00:18:12.680 --> 00:18:14.620
In particular,
one area that we've made some

00:18:14.720 --> 00:18:18.470
changes in are in notifications
that are sent out by the framework.

00:18:18.480 --> 00:18:21.220
Some of these were
existing notifications,

00:18:21.220 --> 00:18:24.070
but I'd like to talk about
them today while we're on

00:18:24.070 --> 00:18:25.160
the subject of notifications.

00:18:25.180 --> 00:18:28.850
In general, on Mac OS X,
it's a good idea for applications

00:18:28.850 --> 00:18:33.130
not to periodically call frameworks
to see if something changed.

00:18:33.980 --> 00:18:36.290
When a phone rings,
it's best to wait for it to ring

00:18:36.290 --> 00:18:39.840
to pick it up rather than to
periodically lift up the handset to

00:18:39.840 --> 00:18:42.160
see if anyone's on the other line,
which is what a lot of

00:18:42.190 --> 00:18:45.410
applications do today when it
comes to checking for profiles.

00:18:47.070 --> 00:18:52.690
So there are several
notifications that are sent out.

00:18:53.040 --> 00:18:57.460
Several of these notifications are sent
out whenever the device drivers notice

00:18:57.460 --> 00:18:59.870
a change in state of ColorSync devices.

00:18:59.900 --> 00:19:04.810
For example, when you plug in an external
display to a portable,

00:19:04.810 --> 00:19:07.980
the display manager will
automatically kick in,

00:19:07.980 --> 00:19:12.080
recognize the display,
query its EDID information,

00:19:12.080 --> 00:19:14.460
create a profile,
and call ColorSync to say

00:19:14.460 --> 00:19:17.630
that a new device with this
profile has been recognized.

00:19:17.980 --> 00:19:20.960
This is a really powerful
functionality and it allows us

00:19:21.070 --> 00:19:23.140
to get great plug-and-play color.

00:19:23.140 --> 00:19:27.000
And your application might want to
be aware that this has occurred.

00:19:28.590 --> 00:19:31.470
In order to do this,
you can listen for notifications for

00:19:31.470 --> 00:19:35.380
either when a device is recognized,
when it is removed,

00:19:35.380 --> 00:19:38.730
or when the profile for
that device changes.

00:19:39.580 --> 00:19:43.190
The notification that we've added
most recently is a notification that

00:19:43.190 --> 00:19:47.500
is sent whenever the user changes a
setting in the ColorSync prefs pane.

00:19:47.720 --> 00:19:49.840
The user changes, for example,
the preferred CMM,

00:19:49.840 --> 00:19:53.570
a notification is now sent to
anyone who cares to listen.

00:19:55.080 --> 00:19:59.960
To give an example of this in action,
here's a brief code snippet that shows a

00:19:59.960 --> 00:20:01.700
common operation that people want to do.

00:20:01.700 --> 00:20:06.360
A lot of applications are matching
data to the screen and they need to

00:20:06.360 --> 00:20:09.000
know the profile for the main display.

00:20:09.570 --> 00:20:11.030
Again,
what a lot of applications have done

00:20:11.030 --> 00:20:14.360
in the past is to periodically check
to see if this profile has changed.

00:20:14.620 --> 00:20:17.590
Instead,
you can install a notification handler.

00:20:17.830 --> 00:20:19.540
This code sample is written in Cocoa.

00:20:19.550 --> 00:20:23.050
There's similar code that you could
write that's based on Core Foundation,

00:20:23.050 --> 00:20:26.080
which has the same premise
and the same notifications.

00:20:26.100 --> 00:20:30.980
In the first function, all we're doing,
we call this early on in the program,

00:20:30.980 --> 00:20:35.400
and the key thing here is to call
the NSDistributedNotificationCenter

00:20:35.400 --> 00:20:36.860
to get its default center.

00:20:36.860 --> 00:20:41.760
This is the center to which all global
messages are sent to all applications.

00:20:41.760 --> 00:20:45.220
Once we have that object,
we can tell that object that we want

00:20:45.220 --> 00:20:47.690
to listen for a certain notification.

00:20:47.800 --> 00:20:50.770
In this example,
we're listening for notifications

00:20:50.870 --> 00:20:53.950
whenever a device is added,
removed, or changed.

00:20:54.490 --> 00:20:56.520
In any of these cases,
what we want to have happen is we

00:20:56.520 --> 00:20:59.070
want to have our function call,
our selector called notification

00:20:59.070 --> 00:21:00.260
at the bottom of the screen.

00:21:00.260 --> 00:21:03.280
This will be called whenever
these changes occur.

00:21:03.280 --> 00:21:07.410
And in this very trivial example,
all that occurs is we call

00:21:07.440 --> 00:21:12.790
CMGetDefaultProfileByUseDisplay
to update our global profile.

00:21:16.950 --> 00:21:21.590
Another area that we've made
changes in in ColorSync is in

00:21:21.610 --> 00:21:25.280
the ColorSync preference pane,
which is probably the first

00:21:25.280 --> 00:21:25.280
thing people see about ColorSync.

00:21:25.700 --> 00:21:28.660
For one thing,
we've removed the Devices tab.

00:21:28.660 --> 00:21:32.420
The Devices tab in the
ColorSync Prefs pane is,

00:21:32.460 --> 00:21:36.560
was a legacy tab from our first attempt
in ColorSync to add support for devices.

00:21:37.680 --> 00:21:40.060
Since then, we've added the full
device integration layer,

00:21:40.060 --> 00:21:42.200
which allows for much more flexibility.

00:21:42.200 --> 00:21:45.780
And for this reason,
the old API is supported only

00:21:45.780 --> 00:21:48.380
for backward compatibility.

00:21:48.580 --> 00:21:51.430
For this reason,
the devices tab in the preferences

00:21:51.430 --> 00:21:53.410
pane has also been removed.

00:21:53.860 --> 00:21:58.980
Instead, that user functionality can be
found either in specific device UI,

00:21:58.980 --> 00:22:02.940
for example, in the monitors preference,
or in the ColorSync utility for

00:22:02.940 --> 00:22:05.430
the one-stop shopping location.

00:22:05.880 --> 00:22:09.930
The other thing we've removed from
ColorSync's press pane is the ability

00:22:09.930 --> 00:22:11.620
to import and export workflows.

00:22:11.620 --> 00:22:15.080
We found in actual practice few people
were making use of this functionality,

00:22:15.080 --> 00:22:19.130
and to a certain extent its capabilities
were not as needed now on Mac OS X since

00:22:19.200 --> 00:22:22.880
we have a multi-user operating
system with multiple preferences.

00:22:24.900 --> 00:22:26.460
While on the subject
of the preference pane,

00:22:26.460 --> 00:22:28.590
I'll mention to those of
you who may not be aware,

00:22:28.810 --> 00:22:31.620
but with all the pop-ups that show
profiles in the preference pane,

00:22:31.620 --> 00:22:32.540
we have tooltips.

00:22:32.540 --> 00:22:36.200
And those tooltips show you the full
path to the profile so that you can see

00:22:36.200 --> 00:22:38.220
what the file name of the profile is.

00:22:42.290 --> 00:22:45.380
The other user interface component
that we've made changes in for

00:22:45.380 --> 00:22:47.070
Jaguar is ColorSync Utility.

00:22:47.070 --> 00:22:50.950
One area of ColorSync Utility
that we always update with every

00:22:50.950 --> 00:22:53.050
release is Profile First Aid.

00:22:53.060 --> 00:22:57.350
Profile First Aid provides
basic functionality to diagnose

00:22:57.780 --> 00:23:02.130
and repair common problems that
are found in many profiles.

00:23:02.180 --> 00:23:05.430
It's always a good idea if
your application or printer

00:23:05.780 --> 00:23:09.930
driver ships profiles to check
them with Profile First Aid.

00:23:10.980 --> 00:23:14.040
Also, if you've come across profiles
that have problems that are not

00:23:14.160 --> 00:23:16.690
detected by Profile First Aid,
let us know and we can try to

00:23:16.760 --> 00:23:17.810
add it to the next release.

00:23:20.350 --> 00:23:23.350
Also, as I mentioned before,
since the ColorSync Devices tab is

00:23:23.350 --> 00:23:26.520
removed from the preference pane,
it's now more important than ever to be

00:23:26.680 --> 00:23:29.860
aware of the ColorSync Devices browser
that's part of ColorSync Utility.

00:23:29.860 --> 00:23:32.600
Again,
this provides one-stop shopping so the

00:23:32.600 --> 00:23:36.260
user can see all the ColorSync devices
that are installed in the system,

00:23:36.260 --> 00:23:39.870
what their current profiles are,
what their factory profiles are.

00:23:42.300 --> 00:23:46.920
And lastly, the feature that's been long
awaiting in ColorSync utility is

00:23:47.220 --> 00:23:49.910
the ability to inspect profiles.

00:23:49.910 --> 00:23:51.900
This is something we've
had often requested.

00:23:51.900 --> 00:23:54.600
So instead of talking about it,
I'll show it in action.

00:24:00.890 --> 00:24:02.860
So the long awaited profile inspector.

00:24:02.860 --> 00:24:05.420
Again, ColorSync utility looks
much the same as before.

00:24:05.420 --> 00:24:07.250
We have profile first aid.

00:24:07.250 --> 00:24:09.980
We have the profiles tab,
which shows all the profiles

00:24:09.980 --> 00:24:11.180
that are installed in the system.

00:24:11.180 --> 00:24:13.410
And then we have the devices tab.

00:24:13.420 --> 00:24:16.620
What we can do now, however,
that we couldn't do before,

00:24:16.620 --> 00:24:19.720
is we can go on to a profile,
such as generic CMYK,

00:24:19.720 --> 00:24:22.650
and now we can actually see
a 3D plot of the profile.

00:24:22.660 --> 00:24:25.960
So we can see this.

00:24:27.690 --> 00:24:30.600
And what's particularly interesting
is it provides an easy way,

00:24:30.600 --> 00:24:32.710
like if you're going
seeing an RGB profile,

00:24:32.840 --> 00:24:36.350
we can flip between one RGB profile
and another RGB profile and see

00:24:36.420 --> 00:24:39.240
the differences between them.

00:24:39.240 --> 00:24:41.390
One thing that's sort of
interesting to note is the gamut

00:24:41.390 --> 00:24:44.060
on these two are very close,
but you'll notice that

00:24:44.110 --> 00:24:45.460
the grid lines change.

00:24:45.460 --> 00:24:51.080
And what that's showing is the different
in the linearity of the two devices.

00:24:51.410 --> 00:24:52.950
But there's actually much more to this.

00:24:53.030 --> 00:24:55.120
If I go and open this profile
and double click on it,

00:24:55.120 --> 00:24:57.090
we now bring up a new window.

00:24:57.090 --> 00:24:59.160
So here's the new functionality.

00:24:59.160 --> 00:25:03.510
What we see here is the basic
description of the header of the profile,

00:25:03.550 --> 00:25:05.370
and then we can look at each of the tags.

00:25:05.440 --> 00:25:08.630
For example,
the description tag shows the ASCII name,

00:25:08.630 --> 00:25:10.660
Unicode name, and the Mac name.

00:25:10.660 --> 00:25:13.430
We can go and edit some of
these tags if we wish to.

00:25:13.600 --> 00:25:16.340
See the copyright information,
white point.

00:25:16.340 --> 00:25:18.100
What else do we have here?

00:25:20.160 --> 00:25:21.970
Here's a viewer for the A to B tag.

00:25:21.990 --> 00:25:25.020
We have a description of what the
tag means in human readable form.

00:25:25.020 --> 00:25:29.920
So this tag is an intent zero, 8-bit,
device to PCS conversion table.

00:25:29.920 --> 00:25:30.920
Bit of a mouthful.

00:25:30.920 --> 00:25:33.750
And here's it represented in 3D,
but if you want to see

00:25:33.750 --> 00:25:36.550
the actual content,
you can flip through the tabs.

00:25:36.580 --> 00:25:39.730
These tabs are the order
in which they're applied.

00:25:39.970 --> 00:25:44.340
There's the matrix, the input LUTs,
which in this case are all linear.

00:25:44.340 --> 00:25:46.840
We have a set of table values,
so we can see the different table

00:25:47.000 --> 00:25:51.560
values for different... while
holding output of the L channel,

00:25:51.740 --> 00:25:55.030
for example,
or the A channel for different

00:25:55.030 --> 00:25:56.770
values of C and Y or K.

00:25:57.590 --> 00:26:00.390
It's always a trick to be able to
represent this information in an easy

00:26:00.390 --> 00:26:02.400
fashion since it's multidimensional.

00:26:02.400 --> 00:26:04.540
And then the output curves.

00:26:04.540 --> 00:26:07.610
Again, this is a simple profile,
so it doesn't have any curves here.

00:26:07.620 --> 00:26:11.040
And then lastly, we can see it in 3D.

00:26:11.040 --> 00:26:14.330
And we can zoom in, zoom out.

00:26:17.000 --> 00:26:17.790
What else do we have?

00:26:17.830 --> 00:26:20.560
This is a little interesting.

00:26:20.560 --> 00:26:22.500
This is showing the
gamut tag of a profile.

00:26:22.500 --> 00:26:26.130
Gamut tags of a profile are
sampled at multiple points,

00:26:26.260 --> 00:26:28.750
so the data looks sort
of like the A to B tag,

00:26:28.750 --> 00:26:31.720
but because they're sampled,
it has some granularity to it.

00:26:33.520 --> 00:26:38.000
The last tag in this profile is the
multi-localized description tag.

00:26:38.050 --> 00:26:42.130
This shows you the name of the generic
CMYK profile and all the languages

00:26:42.590 --> 00:26:44.950
that Mac OS X is localized for.

00:26:44.960 --> 00:26:48.460
And you can even go in here and
change them or edit them if you wish.

00:26:50.900 --> 00:26:53.760
So for the most part,
the profile inspector is just a viewer.

00:26:53.760 --> 00:26:56.990
There are a few tags that you can edit,
such as the name and most of

00:26:57.000 --> 00:26:58.320
the text tags you can edit.

00:26:59.790 --> 00:27:01.280
So, a long-awaited feature.

00:27:01.280 --> 00:27:04.070
We'll add more to it in the future,
but finally got around to it.

00:27:13.690 --> 00:27:18.470
So with that,
I will hand the microphone over to Luke,

00:27:18.470 --> 00:27:22.040
who will be talking for a bit
about ColorSync and Quartz.

00:27:30.300 --> 00:27:32.600
Thank you, David.

00:27:32.620 --> 00:27:36.780
If you attended the last
year's ColorSync session,

00:27:36.780 --> 00:27:41.500
you already heard from us that
ColorSync is integrated into Mac OS X.

00:27:41.540 --> 00:27:49.180
As it was mentioned on several occasions,
it means that ColorSync also provides

00:27:49.780 --> 00:27:53.210
services to other system components.

00:27:53.980 --> 00:27:59.940
This is especially important for Quartz,
which is the Mac OS X graphics system

00:28:00.280 --> 00:28:03.430
based on the PDF imaging model.

00:28:03.620 --> 00:28:08.380
And for the benefit of those who did
not have a chance to be here last year,

00:28:08.380 --> 00:28:14.470
I would like to present one more
time an overview of how Quartz solves

00:28:14.480 --> 00:28:20.130
the problem of color management by
working together with ColorSync.

00:28:20.130 --> 00:28:25.170
Also, I would like to show you how some
of the ColorSync functionality

00:28:25.610 --> 00:28:28.160
is accessible through Quartz.

00:28:30.600 --> 00:28:36.030
Our objective was to integrate
graphics and color management by

00:28:36.030 --> 00:28:40.290
meeting some basic requirements.

00:28:40.750 --> 00:28:45.160
First of all,
Quartz needs the ability to composite

00:28:45.160 --> 00:28:47.580
different color spaces and opacity.

00:28:47.600 --> 00:28:53.450
To meet this requirement,
ColorSync is used to convert data

00:28:54.120 --> 00:28:58.880
from different color spaces into
one space selected by Quartz as

00:28:58.880 --> 00:29:02.350
a working space for compositing.

00:29:03.060 --> 00:29:07.140
This also has to be a scalable
solution which could serve the needs

00:29:07.140 --> 00:29:10.360
of a wide variety of applications.

00:29:10.390 --> 00:29:13.730
On one end,
the involvement of an application in

00:29:13.730 --> 00:29:19.010
color management can be very minimal
and limited just to the use of some

00:29:19.160 --> 00:29:22.930
predefined settings provided by Quartz.

00:29:23.620 --> 00:29:27.770
On the other end,
an application may need the same full

00:29:27.770 --> 00:29:34.890
control over color management as it
does when accessing ColorSync directly.

00:29:35.500 --> 00:29:40.070
The other requirements
were color accuracy,

00:29:40.180 --> 00:29:43.000
performance, and compatibility with PDF.

00:29:47.090 --> 00:29:52.800
In simple terms, Quartz color management
is built around ColorSync,

00:29:52.800 --> 00:29:58.830
which is used as an engine to
process color data needed by Quartz.

00:29:59.410 --> 00:30:04.250
To better understand this design,
let's review some basic concepts

00:30:04.940 --> 00:30:09.600
pertaining to color in PDF and
ColorSync and compare them

00:30:09.690 --> 00:30:11.370
with those used in Quartz.

00:30:14.700 --> 00:30:19.420
In PDF, color is defined by one
of the known color spaces:

00:30:19.420 --> 00:30:23.750
device, calibrated, or ICC based.

00:30:24.090 --> 00:30:29.080
As many of you know,
this list reflects the progress of

00:30:29.200 --> 00:30:32.120
color management over the years.

00:30:32.290 --> 00:30:36.230
Initially,
only device color spaces were known.

00:30:36.230 --> 00:30:42.300
And from today's perspective,
we know that these merely recognize

00:30:42.570 --> 00:30:44.280
three different process color models.

00:30:44.320 --> 00:30:48.150
And because color appearance
is device dependent,

00:30:48.150 --> 00:30:52.430
they are the worst choice for
faithful color reproduction

00:30:52.430 --> 00:30:54.690
across different devices.

00:30:56.820 --> 00:31:03.060
Next, calibrated color was invented,
along with the idea of color conversions

00:31:03.060 --> 00:31:05.890
through device-independent spaces.

00:31:06.030 --> 00:31:10.870
The advantage of calibrated color was
a significant improvement in color

00:31:10.930 --> 00:31:14.610
reproduction over device color spaces.

00:31:15.300 --> 00:31:22.300
Later on, calibrated color evolved
into ICC profiles.

00:31:22.560 --> 00:31:28.590
which now are the de facto standard
for color characterization among color

00:31:28.690 --> 00:31:35.500
professionals and can be embedded in
almost all known color data formats.

00:31:35.550 --> 00:31:42.590
In PDF, ICC profiles can be embedded by
the use of ICC-based color space.

00:31:42.860 --> 00:31:49.260
Color conversions in PDF can be defined
as a function of the source color space,

00:31:49.300 --> 00:31:53.480
destination color space,
and rendering intent.

00:31:54.090 --> 00:31:57.840
Similar concepts exist
in ColorSync and ICC.

00:31:58.000 --> 00:32:03.200
Color is defined by an ICC profile,
which as we know is the most general

00:32:03.210 --> 00:32:05.520
form of color space description.

00:32:05.540 --> 00:32:11.540
Color conversions are also
similar to those in PDF,

00:32:11.820 --> 00:32:16.160
with an option for adding
intermediate profiles between

00:32:16.160 --> 00:32:18.530
the source and destination.

00:32:18.920 --> 00:32:23.290
These additional profiles can be
used for a variety of reasons,

00:32:23.290 --> 00:32:27.470
such as soft proofing,
color device simulation,

00:32:27.610 --> 00:32:33.650
color correction, gamut compression,
special effects, and so forth.

00:32:37.150 --> 00:32:44.100
The color model in Quartz is based on a
combination of the PDF and ICC models.

00:32:44.100 --> 00:32:50.620
The most important point about
this model is that all color

00:32:50.620 --> 00:32:56.890
spaces are expressed internally as
ICC profiles and any color space is

00:32:56.920 --> 00:33:00.420
composed of one or more profiles.

00:33:00.500 --> 00:33:05.790
This way we can preserve the
PDF concept of a simple match from

00:33:05.990 --> 00:33:11.080
source to destination but at the
same time we are able to create

00:33:11.580 --> 00:33:17.060
multi-stage color transformations
needed by advanced color management.

00:33:19.060 --> 00:33:23.760
And if a need arises to embed
such a color space in PDF,

00:33:23.780 --> 00:33:27.090
a sequence of profiles can
be concatenated by ColorSync

00:33:27.100 --> 00:33:29.360
into a single profile.

00:33:31.030 --> 00:33:35.180
In Quartz, device color spaces are
assigned default profiles,

00:33:35.370 --> 00:33:42.360
and PDF calibrated spaces are simply
repackaged into ICC profiles by

00:33:42.400 --> 00:33:44.220
using their calibration record.

00:33:46.750 --> 00:33:52.520
Quartz also provides special color spaces
for drawing directly to the screen.

00:33:52.520 --> 00:33:57.940
DisplayRGB is a color space based
on the ColorSync system profile.

00:33:57.940 --> 00:34:02.850
And DisplayGray is a color
space composed of a device link

00:34:02.850 --> 00:34:07.780
profile converting gray to RGB,
followed by the system profile.

00:34:10.970 --> 00:34:15.240
Another kind are user
default color spaces,

00:34:15.300 --> 00:34:19.040
which can be very useful if
an application wants to give

00:34:19.070 --> 00:34:23.240
the user a choice of a profile
to be used as a default for a

00:34:23.330 --> 00:34:26.060
specific process color model.

00:34:26.790 --> 00:34:32.850
These color spaces point directly to the
ColorSync default profiles for documents,

00:34:32.850 --> 00:34:38.340
which can be selected by the user
in the ColorSync control panel.

00:34:41.750 --> 00:34:46.760
Another simple but important
concept that Quartz inherited from

00:34:46.760 --> 00:34:50.040
PDF is color space equivalence.

00:34:50.200 --> 00:34:55.460
An implied rule is that color conversions
are required only if the source color

00:34:55.460 --> 00:34:57.100
space is different from the destination.

00:34:57.100 --> 00:35:04.630
Quartz is using this rule for properly
organize the flow of the color data

00:35:04.630 --> 00:35:08.010
through multiple stages of rendering.

00:35:08.880 --> 00:35:14.340
It may be important to know that
also the evaluation of color space

00:35:14.350 --> 00:35:16.860
equivalence is performed by ColorSync.

00:35:20.600 --> 00:35:25.550
Now, let's see how all the ideas
that we discussed come together

00:35:25.550 --> 00:35:28.100
in the Quartz drawing model.

00:35:28.320 --> 00:35:31.940
There are three main components
involved in this model:

00:35:32.100 --> 00:35:35.700
an application generating
the graphics content,

00:35:35.880 --> 00:35:40.580
Quartz providing rendering services,
and the destination for

00:35:40.690 --> 00:35:42.640
the rasterized data.

00:35:43.950 --> 00:35:49.100
In terms of color management,
the application can request

00:35:49.100 --> 00:35:54.710
cords to render content in
any of the color spaces.

00:35:55.890 --> 00:36:00.080
In the first step,
Quartz will verify the source and

00:36:00.080 --> 00:36:06.100
destination color spaces and change
them into ICC profiles if needed.

00:36:06.700 --> 00:36:12.490
Then, if required,
ColorSync will convert data

00:36:12.490 --> 00:36:15.660
from any of the source color
spaces to the working space.

00:36:15.660 --> 00:36:19.100
And finally,
when compositing is completed,

00:36:19.100 --> 00:36:23.470
the rasterized data can be
sent to desired destination.

00:36:26.810 --> 00:36:31.010
Now, let me show you how convenient
Quartz color management can be for

00:36:31.200 --> 00:36:33.400
some more advanced color operations.

00:36:33.400 --> 00:36:38.140
For example,
applying special effects can be very

00:36:38.140 --> 00:36:43.240
easily achieved simply by adding an
abstract profile to the working space.

00:36:45.930 --> 00:36:48.720
Another example could be soft proofing.

00:36:48.770 --> 00:36:55.240
The only thing we need to do is to add
the printer profile to the working space.

00:36:55.270 --> 00:37:00.250
And this way all color adjustments
defining the printer profile

00:37:00.630 --> 00:37:01.840
can be shown on the display.

00:37:06.700 --> 00:37:12.350
So far, we have talked about the main
flow of the color data from

00:37:12.350 --> 00:37:16.480
the source to the destination
when the content is rasterized.

00:37:16.520 --> 00:37:20.060
But there is one more
option possible here.

00:37:21.720 --> 00:37:27.390
The content can be spooled
into PDF without rasterizing.

00:37:28.260 --> 00:37:31.480
to be handed to the printing
component of the OS,

00:37:31.620 --> 00:37:33.250
for example.

00:37:33.930 --> 00:37:38.310
But there is important
detail about this data.

00:37:38.400 --> 00:37:42.280
All colors will be
tagged in this full PDF,

00:37:42.280 --> 00:37:45.200
and the profiles will be
assigned exactly the same way

00:37:45.200 --> 00:37:47.850
as they were for asterization.

00:37:48.750 --> 00:37:52.590
So this concludes my talk
about ColorSync and Chords.

00:37:52.590 --> 00:37:54.510
So I'd like to thank you for
your attention and I'll pass

00:37:54.510 --> 00:37:55.600
the microphone back to David.

00:38:01.550 --> 00:38:01.680
All right.

00:38:01.830 --> 00:38:02.520
Thank you very much, Luke.

00:38:02.560 --> 00:38:08.160
So the last section I want to talk
about today is color sync and video.

00:38:08.160 --> 00:38:13.360
Most of what we talked about so far is
traditional color sync color management.

00:38:13.360 --> 00:38:16.790
And as I outlined earlier,
the premise behind this is to

00:38:16.910 --> 00:38:20.370
convert between source devices
and destination devices.

00:38:20.380 --> 00:38:22.990
However,
oftentimes with video applications,

00:38:23.020 --> 00:38:25.300
there's a different workflow that's used.

00:38:25.340 --> 00:38:29.490
More traditional video color
correction involved turning knobs,

00:38:29.640 --> 00:38:32.550
whether they be software or hardware,
in order to achieve

00:38:32.630 --> 00:38:34.140
desired visual effects.

00:38:34.280 --> 00:38:37.360
Both of these models
are valid and useful.

00:38:37.360 --> 00:38:40.860
In actuality,
an ideal system would involve

00:38:40.960 --> 00:38:41.980
both of these capabilities.

00:38:41.980 --> 00:38:46.450
So what we're proposing here is a
system that combines these two models

00:38:46.450 --> 00:38:48.840
together into one color sync workflow.

00:38:48.840 --> 00:38:53.230
And this workflow uses, first,
an assigned source or embedded

00:38:53.230 --> 00:38:56.900
profile in order to abstract out
any differences between one source

00:38:56.900 --> 00:38:58.560
video and another source video.

00:38:58.560 --> 00:39:02.000
Then the application of one
or more abstractions in order

00:39:02.000 --> 00:39:04.120
to achieve visual effects.

00:39:04.120 --> 00:39:07.540
And then finally,
the application of a destination profile

00:39:07.540 --> 00:39:10.320
so that that can be targeted for output.

00:39:11.960 --> 00:39:14.420
There are several
advantages of this model.

00:39:14.420 --> 00:39:17.650
For one thing,
abstract profiles can operate in a

00:39:17.650 --> 00:39:22.570
perceptually uniform LAB space based on
human perception rather than based on the

00:39:22.710 --> 00:39:25.790
peculiar behavior of a specific device.

00:39:25.790 --> 00:39:32.400
Abstract profiles can also be archived as
a standard ICC profile for further use.

00:39:32.950 --> 00:39:37.800
What is also particularly useful is that
the destination can be changed later.

00:39:37.800 --> 00:39:41.170
The manipulations that are
made are not dependent on any

00:39:41.280 --> 00:39:43.170
source or destination profile.

00:39:43.210 --> 00:39:45.830
This allows the destination to be
changed so that if your content

00:39:45.930 --> 00:39:49.690
needs to be retargeted either for
the web or for a DVD or for film,

00:39:49.690 --> 00:39:53.860
you can apply a destination
profile at the end that's

00:39:53.860 --> 00:39:57.430
applicable to that specific device.

00:39:59.010 --> 00:40:01.500
So one question that's
commonly asked when we propose

00:40:01.500 --> 00:40:04.900
using ColorSync on video is,
well, does it perform fast enough?

00:40:04.960 --> 00:40:08.920
And actually, today, using software-only
solutions and ColorSync,

00:40:08.940 --> 00:40:14.160
you actually can achieve adequate
performance for basic preview of video

00:40:14.160 --> 00:40:18.770
or certainly adequate performance
of non-real-time offline processing.

00:40:18.780 --> 00:40:20.690
And you can get very nice results.

00:40:23.960 --> 00:40:26.720
Using OpenGL hardware,
we can actually leverage

00:40:26.720 --> 00:40:30.400
hardware on the video card,
which would otherwise be unused,

00:40:30.400 --> 00:40:34.900
in order to actually achieve what
we're calling ColorSync in real time.

00:40:35.300 --> 00:40:38.560
The idea behind using real-time
ColorSync is to make use of the

00:40:38.560 --> 00:40:42.700
per-pixel 3D texture map that's
available on some modern video cards,

00:40:42.700 --> 00:40:46.480
such as the GeForce Ti card,
and there's other cards coming out

00:40:46.560 --> 00:40:47.910
that also support this capability.

00:40:47.920 --> 00:40:51.500
And it actually makes a great case
study for how well ColorSync is

00:40:51.500 --> 00:40:55.430
integrated into the Mac OS X system,
because in order to achieve this goal,

00:40:55.640 --> 00:40:58.830
we need to bring a lot of technologies
together at the same time.

00:40:58.840 --> 00:41:02.270
We need to integrate ColorSync, OpenGL,
QuickTime, Quartz,

00:41:02.350 --> 00:41:03.880
in the following matter.

00:41:04.050 --> 00:41:05.780
Here's a basic summary for how it works.

00:41:05.920 --> 00:41:09.560
First of all, what we want to do is play
QuickTime content onto

00:41:09.560 --> 00:41:13.900
a Quartz OpenGL surface,
and what we want to do is attach to

00:41:13.900 --> 00:41:18.840
that surface a 3D texture map that's
filled with data that's generated

00:41:18.840 --> 00:41:20.730
from a ColorSync color world.

00:41:22.940 --> 00:41:25.800
Probably the best thing to do at this
point is to describe this in action,

00:41:25.910 --> 00:41:29.320
so I'll switch over and
do a quick demonstration.

00:41:29.900 --> 00:41:31.900
Okay.

00:41:31.900 --> 00:41:34.890
So what I have here is a little
application I've been working on.

00:41:34.890 --> 00:41:39.730
And what it does is it allows you to
open up either still images or movies.

00:41:39.730 --> 00:41:42.500
And right now it's just showing black.

00:41:42.610 --> 00:41:45.470
I want to go over the
control panel first.

00:41:45.470 --> 00:41:49.310
What we see over here is a floating
palette that describes the color world

00:41:49.460 --> 00:41:53.340
or transformation that we're going
to apply in real time on this video.

00:41:54.060 --> 00:41:55.660
First of all, we have the source profile.

00:41:55.660 --> 00:41:58.380
Following that,
we have an abstract profile,

00:41:58.380 --> 00:41:59.480
which is currently set to none.

00:41:59.480 --> 00:42:03.620
We can add a proofer profile to simulate
what it would look like on a press.

00:42:03.620 --> 00:42:06.180
If anyone could figure out how
to print a movie onto a press,

00:42:06.180 --> 00:42:07.540
maybe that would be useful.

00:42:07.540 --> 00:42:10.110
Finally,
we can specify a destination profile,

00:42:10.180 --> 00:42:12.670
which hopefully would be
the screen in this case,

00:42:12.840 --> 00:42:17.090
but may also be another standard color
space if you're outputting it to disk.

00:42:17.120 --> 00:42:19.410
So let me see if I can
give a brief example.

00:42:19.410 --> 00:42:21.860
Let me start playing
this movie a bit here.

00:42:21.860 --> 00:42:23.680
So.

00:42:23.820 --> 00:42:26.210
But what we have is a movie here.

00:42:27.000 --> 00:42:27.960
Let's see, I'll play it through.

00:42:27.960 --> 00:42:30.720
And what I can do is at this point,
I can, let's say,

00:42:30.720 --> 00:42:31.980
just change the source profile.

00:42:31.980 --> 00:42:35.190
And it's kind of hard to see right
now because I have a wipe here

00:42:35.190 --> 00:42:37.260
that's showing the before and after.

00:42:37.260 --> 00:42:40.270
The before is on the left side and
the after is on the right side.

00:42:40.300 --> 00:42:41.660
I can also change it vertically.

00:42:41.660 --> 00:42:45.140
Another way I can view this
movie is if I hit the tab key,

00:42:45.140 --> 00:42:49.210
I can show the before
and after side by side.

00:42:50.620 --> 00:42:52.540
So let's do that for now.

00:42:52.630 --> 00:42:55.460
So as you can see,
if I change different profiles,

00:42:55.460 --> 00:42:57.240
you can get some subtle differences.

00:42:57.360 --> 00:43:01.570
But where things really get exciting is
when we turn on the abstract profile.

00:43:01.850 --> 00:43:04.890
Now instead of pulling an
abstract profile from disk,

00:43:05.030 --> 00:43:08.340
what I'm actually doing here is
creating an abstract profile on

00:43:08.480 --> 00:43:10.880
the fly based on the slider values.

00:43:10.880 --> 00:43:16.860
So what I can do here is change these
slider values and it'll adjust the hue.

00:43:16.860 --> 00:43:22.270
So for example,
let me advance the movie a bit here.

00:43:24.330 --> 00:43:25.900
And so we got this screen here.

00:43:25.900 --> 00:43:29.740
And let's say we want to change the
color of the screen from blue to purple.

00:43:29.740 --> 00:43:33.140
So all we have to do
is change the hue knob.

00:43:33.140 --> 00:43:36.230
And now what we're doing,
and you can see I'm doing

00:43:36.230 --> 00:43:39.590
this real time here,
we can create a profile for every

00:43:39.590 --> 00:43:41.800
time the slider value changes.

00:43:41.800 --> 00:43:47.230
I'm creating a new abstract profile
and sending that resulting color

00:43:47.230 --> 00:43:52.100
world to the OpenGL surface so that
then all subsequent pixels are mapped

00:43:52.100 --> 00:43:54.270
according to that concatenated color.

00:43:54.390 --> 00:43:59.080
So now we have a nice result here,
which is we've got a nice purple screen.

00:43:59.080 --> 00:44:00.540
Let me play the movie
a little bit further.

00:44:00.540 --> 00:44:05.600
And we'll see that there's a problem that
the shirt and the person's face is all,

00:44:05.750 --> 00:44:07.800
everything's distorted.

00:44:07.800 --> 00:44:10.680
So let's do something a
little bit more fancy here,

00:44:10.680 --> 00:44:14.320
which is instead of applying the
hue change to the entire image,

00:44:14.320 --> 00:44:17.920
what I'm going to do is limit the
range of colors that it's affected

00:44:18.020 --> 00:44:20.410
to be just between in the blue range.

00:44:20.440 --> 00:44:22.900
So now I can go back and play the movie.

00:44:22.900 --> 00:44:27.620
And the guy's shirt looks fine,
but when we go back to seeing the screen,

00:44:27.620 --> 00:44:28.060
it's purple.

00:44:28.060 --> 00:44:32.800
And you can see it's doing
this all real time on the fly.

00:44:32.800 --> 00:44:37.230
In fact, even if I can change saturation,
change it from extremely

00:44:37.230 --> 00:44:44.110
saturated to black and white,
I can change the hue all real time.

00:44:44.380 --> 00:44:47.750
So that's it.

00:44:53.150 --> 00:45:00.120
So, with that, I have a few final slides.

00:45:00.290 --> 00:45:03.190
For one thing,
places to go for more information on

00:45:03.190 --> 00:45:05.920
ColorSync to get more technical details.

00:45:05.920 --> 00:45:10.580
For one thing, for end user information,
you can go to www.apple.com

00:45:10.580 --> 00:45:15.100
slash ColorSync to get all the
marketing information on ColorSync.

00:45:15.120 --> 00:45:19.540
For developer SDK,
you can go to the developer SDK's URL.

00:45:19.540 --> 00:45:23.630
Also, a good place to go for information
and to ask questions is to

00:45:23.650 --> 00:45:25.920
the two ColorSync email lists.

00:45:25.940 --> 00:45:28.720
There's a list for developers,
ColorSync dev, and a list for users

00:45:28.720 --> 00:45:29.920
called ColorSync users.

00:45:29.920 --> 00:45:32.230
And, of course,
if you have any comments or feedback

00:45:32.230 --> 00:45:34.540
you'd like to provide to us,
feel free to send an email

00:45:34.540 --> 00:45:36.090
to ColorSync at Apple.com.

00:45:36.090 --> 00:45:39.030
Also, there's documentation,
both a reference and an

00:45:39.220 --> 00:45:42.590
introduction to color management,
and there's some tech notes that

00:45:42.650 --> 00:45:44.460
you might want to read as well.