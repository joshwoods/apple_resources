WEBVTT

00:00:01.430 --> 00:00:05.060
Ladies and gentlemen,
please welcome Technology Manager for

00:00:05.060 --> 00:00:09.490
Development Tools,
Godfrey DiGiorgi.

00:00:11.640 --> 00:00:12.600
Good afternoon.

00:00:12.600 --> 00:00:13.270
I hope you've all had a good lunch.

00:00:13.370 --> 00:00:14.470
How was it this week?

00:00:14.470 --> 00:00:15.860
Did we serve you good food?

00:00:18.330 --> 00:00:19.600
Fantastic.

00:00:19.680 --> 00:00:24.290
Continuing in our theme today of driving
into the details of development tools,

00:00:24.340 --> 00:00:27.140
I would like to introduce
Anders Bertelrud,

00:00:27.180 --> 00:00:33.880
the engineer on Project Builder
to do the build system.

00:00:36.690 --> 00:00:39.740
Good afternoon.

00:00:39.740 --> 00:00:45.760
So hopefully a lot of you in the 903
session saw some of the new features

00:00:45.760 --> 00:00:49.150
in Project Builder and as well as
an introduction to Project Builder.

00:00:49.260 --> 00:00:52.640
Something,
some of the topics covered were the build

00:00:52.670 --> 00:00:55.320
system and how to set up your project.

00:00:55.430 --> 00:00:58.200
So in this session we sort of assumed
that you have a project to build.

00:00:58.200 --> 00:01:00.660
So this is really the
next step after that.

00:01:00.780 --> 00:01:03.500
So you have a project that
you got to build and then,

00:01:03.500 --> 00:01:05.800
you know, you got your sources fine.

00:01:05.910 --> 00:01:07.940
And what do you do now?

00:01:08.030 --> 00:01:09.880
Well, so one of the things we're
going to talk about is how to

00:01:09.880 --> 00:01:11.790
streamline the build process,
speed up the builds,

00:01:11.820 --> 00:01:16.840
how to take advantage of some of the
features Project Builder has for that.

00:01:16.990 --> 00:01:21.180
Talk about polishing the product,
things like adding a version number,

00:01:21.180 --> 00:01:22.440
things like that.

00:01:22.540 --> 00:01:24.900
Building for deployment
as opposed to development.

00:01:24.900 --> 00:01:26.600
For development you
often want to do testing.

00:01:26.600 --> 00:01:29.220
For deployment you sort of
want a different situation.

00:01:29.290 --> 00:01:32.030
You want to optimize,
you want to strip out debug symbols,

00:01:32.030 --> 00:01:33.110
things like that.

00:01:33.510 --> 00:01:35.740
We're going to talk about
packaging your product.

00:01:35.740 --> 00:01:38.090
And as you know, on Mac,
we try for drag and

00:01:38.100 --> 00:01:39.390
drop install experience.

00:01:39.400 --> 00:01:42.900
You just take the app and just
drop it onto the -- into a folder

00:01:42.900 --> 00:01:44.890
and not have to run an installer.

00:01:45.010 --> 00:01:45.970
Sometimes you do.

00:01:45.970 --> 00:01:47.340
We'll talk about that.

00:01:47.460 --> 00:01:49.380
The third -- the last thing is ship it.

00:01:49.570 --> 00:01:50.940
And that's up to you guys.

00:01:51.030 --> 00:01:54.480
So we talk about the rest,
and then you deal with it.

00:01:54.670 --> 00:01:59.260
What you learn in here in this
session is to use the IDE effectively,

00:01:59.370 --> 00:02:01.700
in particular speeding
up GCC3 compilation,

00:02:01.700 --> 00:02:06.840
which John talked about in the
session this morning on GCC3.1.

00:02:06.980 --> 00:02:10.550
Talk about adding finishing touches,
building for deployment,

00:02:10.550 --> 00:02:14.040
and also specifically disk
images and installer packages.

00:02:14.160 --> 00:02:17.810
So to start off,
we'll talk about using the IDE.

00:02:19.030 --> 00:02:21.690
So one of the things the IDE lets
you do is to customize your build

00:02:21.690 --> 00:02:23.410
using what we call build styles.

00:02:23.520 --> 00:02:26.870
So if you have a target
that builds a product,

00:02:26.870 --> 00:02:30.900
you can set up multiple build styles
to build the product in different ways.

00:02:30.970 --> 00:02:32.730
We'll get into that in a second.

00:02:32.870 --> 00:02:35.320
Another thing you can do to
take advantage of that is to set

00:02:35.410 --> 00:02:37.360
up a shared product directory.

00:02:37.420 --> 00:02:39.730
And this does two primary things.

00:02:39.740 --> 00:02:43.270
It lets one project access
another project's product.

00:02:43.360 --> 00:02:46.600
So you can split up your development
if you have a large source base.

00:02:46.600 --> 00:02:49.350
The other thing it does is keep your
binaries separate from source code.

00:02:49.360 --> 00:02:52.980
So if you have your source on network,
you can keep your

00:02:53.040 --> 00:02:55.070
binaries local for speed.

00:02:55.360 --> 00:02:58.650
The IDE also has something
called executables.

00:02:58.690 --> 00:03:02.460
And this lets you set up
different execution contexts.

00:03:02.580 --> 00:03:06.430
So you may want to test your
app in four different ways

00:03:06.440 --> 00:03:07.990
with four different test cases.

00:03:08.110 --> 00:03:10.700
You may have a test tool that
takes different-- or you may

00:03:10.700 --> 00:03:13.130
have a Unix tool that takes
different command line options.

00:03:13.230 --> 00:03:16.360
You can set up different test
cases for each of those situations.

00:03:16.360 --> 00:03:18.830
and quickly switch between them.

00:03:20.210 --> 00:03:26.440
So build styles in-depth.

00:03:26.440 --> 00:03:30.400
Where does a target kind
of define what you build?

00:03:30.400 --> 00:03:33.400
A build style defines different
ways of building a target.

00:03:33.400 --> 00:03:35.000
I'm sure you've all heard this before.

00:03:35.000 --> 00:03:36.240
Many of you have heard this before.

00:03:36.240 --> 00:03:41.000
But this really is kind of quite
powerful because instead of having

00:03:41.000 --> 00:03:46.900
to copy the target to set it up to
build your app in different ways,

00:03:46.920 --> 00:03:49.110
you just have one target,
you have many build styles,

00:03:49.150 --> 00:03:53.030
any changes you make to the target,
you don't have to update multiple copies.

00:03:53.030 --> 00:03:55.380
The build style just
dynamically overrides it.

00:03:55.380 --> 00:03:59.380
So some examples of what you can use this
for is to turn debug symbols on or off,

00:03:59.450 --> 00:04:02.440
to enable or disable assertions,
et cetera.

00:04:02.510 --> 00:04:04.870
Actually,
in the 903 session on Wednesday,

00:04:04.870 --> 00:04:07.620
there was a question about, well,
what if I want to build

00:04:07.760 --> 00:04:11.450
deployment versus development,
and we have the object files.

00:04:11.550 --> 00:04:14.640
Project Builder doesn't keep track
of the separate object files.

00:04:14.750 --> 00:04:16.010
It actually turns out you can
set one of the build settings is

00:04:16.010 --> 00:04:18.350
where Project Builder is stored,
the object files.

00:04:18.350 --> 00:04:21.630
If you set that differently
in the different build styles,

00:04:21.640 --> 00:04:24.800
Project Builder will actually write
the object files in different places.

00:04:24.800 --> 00:04:27.400
So that's actually a way you can
work around Project Builder's

00:04:27.410 --> 00:04:30.660
current lack of knowledge of that,
just by defining that build setting.

00:04:30.730 --> 00:04:33.790
That build setting is objroot,
by the way.

00:04:34.530 --> 00:04:39.900
So, build settings dynamically
modify the target settings.

00:04:39.900 --> 00:04:41.150
And there are two ways they can do this.

00:04:41.180 --> 00:04:43.830
You can either override a
target setting completely,

00:04:43.860 --> 00:04:47.340
and then the setting in the
target will be completely ignored.

00:04:47.410 --> 00:04:50.170
This is something that some
people run into currently

00:04:50.170 --> 00:04:51.520
when they set up a project.

00:04:51.520 --> 00:04:54.300
They'll configure a target,
they'll turn on a certain

00:04:54.300 --> 00:04:57.010
optimization level in the target,
and then the build style will come

00:04:57.010 --> 00:04:59.440
along and override it and say,
why isn't my optimization

00:04:59.440 --> 00:05:00.380
level being used?

00:05:00.500 --> 00:05:03.750
So, if your configuration in the
target is not being used,

00:05:03.750 --> 00:05:06.880
check to see that a build
style isn't overriding it.

00:05:06.880 --> 00:05:10.040
And we have some thoughts on how
to add UI to indicate that target

00:05:10.140 --> 00:05:11.330
settings are being shadowed.

00:05:11.340 --> 00:05:15.260
But the Jaguar version
does not do that yet.

00:05:15.860 --> 00:05:18.740
So target settings can also refer
back to build style settings.

00:05:18.740 --> 00:05:21.740
So this can be quite powerful,
because you can not

00:05:21.740 --> 00:05:24.830
only override or add to,
actually, is the other way,

00:05:24.940 --> 00:05:27.290
to add to a target setting,
but you can actually have a

00:05:27.290 --> 00:05:31.660
target setting that includes $FU,
where FU is defined in the build style.

00:05:31.660 --> 00:05:34.610
You just have to avoid
circular references,

00:05:34.610 --> 00:05:35.300
right?

00:05:35.300 --> 00:05:37.370
You can't define X in terms of itself.

00:05:37.370 --> 00:05:39.090
That doesn't mean anything.

00:05:40.750 --> 00:05:44.190
So when the build settings are evaluated,
there's a hierarchy.

00:05:44.190 --> 00:05:46.340
There's a precedence ordering,
as you might expect.

00:05:46.420 --> 00:05:49.160
And at the very bottom level,
you have access to all

00:05:49.160 --> 00:05:51.200
the environment variables,
but anything you define

00:05:51.310 --> 00:05:52.300
can override those.

00:05:52.300 --> 00:05:57.470
But that can be useful for accessing
a build setting such as dollar home,

00:05:57.710 --> 00:05:58.650
for example.

00:05:59.660 --> 00:06:01.590
Next, we have the static settings.

00:06:01.590 --> 00:06:04.620
These are the Project Builder defaults.

00:06:04.860 --> 00:06:08.620
These are things like the
default optimization level.

00:06:08.620 --> 00:06:11.800
These are things like where
Project Builder by default,

00:06:11.970 --> 00:06:15.940
like the default extension for
an application package is .app,

00:06:15.940 --> 00:06:16.980
for example.

00:06:16.980 --> 00:06:20.560
Then come the target settings
that are in your actual target.

00:06:20.560 --> 00:06:22.970
This is what you see
in the target editor.

00:06:22.970 --> 00:06:25.190
That's the purple box right there.

00:06:25.200 --> 00:06:29.640
And then the build style settings.

00:06:29.640 --> 00:06:31.300
These are the things that go above that.

00:06:31.300 --> 00:06:33.920
So again, reflecting that anything
defined in a build style will

00:06:33.920 --> 00:06:35.300
shadow what's in the target.

00:06:35.300 --> 00:06:38.590
And at the very top,
if you're building from PBX build,

00:06:38.590 --> 00:06:42.720
anything you pass on the command line
in PBX build goes on top of that.

00:06:42.720 --> 00:06:44.540
So that overrides anything.

00:06:44.540 --> 00:06:46.300
This is just like in Make.

00:06:46.300 --> 00:06:50.690
In fact, PBX build was the command line
interface that was designed

00:06:50.690 --> 00:06:52.690
to be compatible with Make.

00:06:55.250 --> 00:06:58.100
And in the IDE,
there's always one active build style.

00:06:58.260 --> 00:07:02.440
And normally,
there's a pop-up in the toolbar.

00:07:02.550 --> 00:07:04.900
And if you don't see that,
you can customize the toolbar

00:07:04.900 --> 00:07:06.560
and drag the pop-up into it.

00:07:06.680 --> 00:07:11.440
And you can choose the active
build style in that pop-up.

00:07:11.560 --> 00:07:15.800
PBX Build, the tool,
allows you much greater flexibility.

00:07:15.930 --> 00:07:17.940
You can, for example,
build without any build style,

00:07:18.030 --> 00:07:21.400
or you can build with a particular name.

00:07:22.830 --> 00:07:24.520
So much for build styles.

00:07:24.580 --> 00:07:28.380
So the other thing you can do,
one other way you can take

00:07:28.380 --> 00:07:30.640
advantage of the IDE is to set
up a shared product directory.

00:07:30.640 --> 00:07:31.740
I mentioned this in the intro.

00:07:31.740 --> 00:07:36.550
The reason you may want to do this
is that if you have a framework

00:07:36.690 --> 00:07:40.400
built by one project and an
app built by another project,

00:07:40.450 --> 00:07:44.400
if you set up a shared
framework directory,

00:07:44.400 --> 00:07:47.320
then both those products will
get put into the same directory.

00:07:47.820 --> 00:07:51.400
Project Builder has an extra
feature that lets it look in

00:07:51.400 --> 00:07:53.710
that shared build directory.

00:07:53.740 --> 00:07:55.570
So if you set up a
shared product directory,

00:07:55.660 --> 00:07:59.320
it will look in there first when it goes
to link against a library or a framework.

00:07:59.320 --> 00:08:03.080
So this is a very convenient way
of letting all of your target's

00:08:03.080 --> 00:08:05.160
products go into the same place.

00:08:05.170 --> 00:08:07.500
You can refer to them at build time.

00:08:07.540 --> 00:08:09.310
The other reason, of course, is speed.

00:08:09.410 --> 00:08:11.880
If you booted off NFS,
if you have your source code on NFS,

00:08:11.880 --> 00:08:15.560
sorry, if your home directory is on NFS,
you may have your source code there.

00:08:15.560 --> 00:08:17.520
You certainly don't want
to be shipping binaries.

00:08:17.520 --> 00:08:20.900
You can set the build directory to a
place under your local hard disk and

00:08:20.900 --> 00:08:23.240
speed up your builds quite significantly.

00:08:25.380 --> 00:08:29.460
And the way to do this is to specify
a directory in the preference panel.

00:08:29.560 --> 00:08:32.960
And the rule is, everything,
all generated binaries will be put there,

00:08:32.960 --> 00:08:35.560
unless you do special
things in a build style,

00:08:35.560 --> 00:08:38.360
override the special variables.

00:08:38.360 --> 00:08:42.160
The other thing that happens is that
the runtime is set up automatically.

00:08:42.250 --> 00:08:44.200
So when you run your app
from Project Builder,

00:08:44.200 --> 00:08:47.660
not only will the build find it,
but at runtime,

00:08:47.660 --> 00:08:50.460
the framework will be found as well.

00:08:50.540 --> 00:08:53.260
So this is an added bonus there.

00:08:54.440 --> 00:08:58.040
So we talked a little bit about
using the IDE effectively.

00:08:58.090 --> 00:09:02.160
One of the other things I want to talk
about is speed up GCC3 compilation.

00:09:02.160 --> 00:09:04.920
And you saw some of this,
for those of you who were in

00:09:04.920 --> 00:09:08.400
the compiler talk this morning,
you saw actually screenshots

00:09:08.400 --> 00:09:10.010
of how to configure this.

00:09:10.220 --> 00:09:15.060
But the basic idea is to define
GCC as your default compiler,

00:09:15.060 --> 00:09:19.390
and this is the default on Jaguar in
the prerelease seed that you have.

00:09:19.560 --> 00:09:25.060
On the April tool CD,
because it's not a beta,

00:09:25.060 --> 00:09:32.560
the GCC295 is the default compiler,
but the 3 compiler is there as well.

00:09:32.720 --> 00:09:38.040
So you can say use GCC3, yes,
if you're older than on Jaguar.

00:09:38.040 --> 00:09:41.050
If newer, then you don't have to do that.

00:09:41.450 --> 00:09:43.760
What you need to do in order
to take advantage of this

00:09:43.760 --> 00:09:45.340
is to define a prefix file.

00:09:45.420 --> 00:09:50.300
So basically what we're doing here
is we're setting up a prefix file,

00:09:50.300 --> 00:09:52.660
we're precompiling all
the stuff in it once,

00:09:52.770 --> 00:09:57.110
and then every time after that,
GCC can reuse the information in that,

00:09:57.110 --> 00:09:58.700
and thus saving a lot of time, right?

00:09:58.700 --> 00:10:01.290
It doesn't have to read and
parse all your headers again.

00:10:01.420 --> 00:10:05.290
So we need to define a prefix file,
include your common system

00:10:05.300 --> 00:10:08.360
headers there that you're using,
maybe some pound defines,

00:10:08.430 --> 00:10:15.350
and check a box that we'll see
that tells Project Builder to

00:10:15.480 --> 00:10:18.000
precompile that prefix file.

00:10:18.420 --> 00:10:23.160
And the third step in the current
seed is to set the use GCC3

00:10:23.270 --> 00:10:25.260
PFE support setting to yes.

00:10:25.260 --> 00:10:26.360
And you can do this in your target.

00:10:26.360 --> 00:10:28.300
You can set both of these
in your target if you want.

00:10:28.300 --> 00:10:30.790
You can set them in a
build style because,

00:10:31.120 --> 00:10:36.600
remember, we're asking not to deploy
with GCC3 until we ship Jaguar.

00:10:36.600 --> 00:10:39.120
So if you go ahead and
set this in a build style,

00:10:39.200 --> 00:10:42.520
you can actually test,
just by changing the build style,

00:10:42.520 --> 00:10:46.300
you can test your entire
project with 295 versus 3.

00:10:47.650 --> 00:10:51.520
And we will be adding user
interface for configuring this.

00:10:53.050 --> 00:10:56.000
So remember, GC3 is still pre-release
in the CDs that you have,

00:10:56.000 --> 00:10:58.980
so I know you heard this before,
but don't ship anything

00:10:58.980 --> 00:11:00.990
built with it until Jaguar.

00:11:03.420 --> 00:11:10.860
So Project Builder also has some
features that are not as well known,

00:11:10.860 --> 00:11:12.800
but they let you add finishing touches.

00:11:12.800 --> 00:11:15.540
One of those is versioning.

00:11:15.540 --> 00:11:19.180
You can add automatic version
numbers to your products,

00:11:19.260 --> 00:11:20.980
like an application.

00:11:20.980 --> 00:11:23.210
And we have built-in
support for something called

00:11:23.210 --> 00:11:24.620
Apple Generic Versioning.

00:11:24.620 --> 00:11:28.850
And this is what we use internally,
but you guys can use it as well.

00:11:28.860 --> 00:11:30.910
And the way you do this,
this is all documented

00:11:30.920 --> 00:11:32.040
in the release notes.

00:11:33.140 --> 00:11:37.080
But the way you do this is to set
up the versioning system to be

00:11:37.080 --> 00:11:42.160
Apple Generic and to set a couple
of special build settings that are,

00:11:42.160 --> 00:11:45.160
if you go to the Help menu and
you go to the release notes,

00:11:45.160 --> 00:11:48.360
there is optional integration with CVS.

00:11:48.360 --> 00:11:53.070
There is a tool on the system called
AGV Tool that will let you automatically

00:11:53.070 --> 00:11:57.050
bump the version number and check in the
project file with the updated changes,

00:11:57.050 --> 00:11:57.700
et cetera.

00:11:57.700 --> 00:11:59.150
Kind of handy.

00:12:00.770 --> 00:12:05.240
Another thing that we don't
have direct support for but

00:12:05.240 --> 00:12:08.900
that is easily accomplishable
is to run the GenStrings tool.

00:12:08.900 --> 00:12:12.160
GenStrings is a tool that's
installed with the developer release,

00:12:12.160 --> 00:12:14.260
and it regenerates your
localizable strings.

00:12:14.300 --> 00:12:17.870
So if you make changes to
your localizable content,

00:12:17.940 --> 00:12:18.940
you want to rerun this tool.

00:12:18.940 --> 00:12:21.390
And you can actually set up
a legacy makefile target,

00:12:21.400 --> 00:12:22.940
a legacy target to do this.

00:12:23.050 --> 00:12:25.880
And instead of make,
you just have it invoke GenStrings,

00:12:25.880 --> 00:12:29.430
or you have it invoke a script that
runs GenStrings on your project.

00:12:30.160 --> 00:12:33.260
A third topic that I'm not going
to get into in great detail,

00:12:33.260 --> 00:12:37.140
but it's also documented in
the developer documentation,

00:12:37.140 --> 00:12:37.960
is scatter loading.

00:12:37.960 --> 00:12:40.580
I just want to kind of point
it out so you're aware of it.

00:12:41.060 --> 00:12:45.470
There are facilities to reorder the code,
the order in which the

00:12:45.490 --> 00:12:49.960
code is in your executable,
in order to make it as efficient

00:12:49.960 --> 00:12:51.820
as possible at runtime.

00:12:51.840 --> 00:12:57.050
So the idea is that you put code with
related functionality together so that

00:12:57.060 --> 00:12:59.840
you make use of VM pages in a good way.

00:12:59.840 --> 00:13:01.070
Bye.

00:13:02.320 --> 00:13:08.180
And Project Builder has some
support for this also in the docs.

00:13:08.610 --> 00:13:15.090
And another thing that comes up
a lot is embedding of frameworks.

00:13:15.250 --> 00:13:19.080
So if you ship an application,
you may not want to have-- and

00:13:19.080 --> 00:13:21.040
you rely on some frameworks.

00:13:21.140 --> 00:13:26.100
You may not want to have to install
those frameworks onto your system

00:13:26.100 --> 00:13:28.200
because that can make things fragile.

00:13:28.310 --> 00:13:32.740
So one reason is simpler packaging.

00:13:32.850 --> 00:13:36.000
So the user buys your software,
inserts the CD,

00:13:36.000 --> 00:13:40.200
and gets one app icon that
he can drag onto his desktop,

00:13:40.200 --> 00:13:44.380
he or she, and doesn't have to install,
you know, 50 different frameworks

00:13:44.380 --> 00:13:47.940
in 50 different places.

00:13:48.010 --> 00:13:50.730
So the idea here is to take
the framework and actually put

00:13:50.730 --> 00:13:52.300
it inside of the app wrapper.

00:13:52.380 --> 00:13:55.200
The second--one second
benefit of this is,

00:13:55.200 --> 00:13:58.050
of course, robustness,
that if the user moves the

00:13:58.050 --> 00:14:03.870
application or copies it over to
a different volume or whatever,

00:14:03.880 --> 00:14:05.580
the frameworks
automatically come with it,

00:14:05.590 --> 00:14:07.440
and they don't have to
be handled separately.

00:14:07.440 --> 00:14:10.570
So just a nice user experience.

00:14:13.160 --> 00:14:15.870
Of course,
there are alternatives to this.

00:14:16.030 --> 00:14:18.650
One is shared source code.

00:14:18.940 --> 00:14:22.130
And the reason you may want and may not
want to do that is because then you have

00:14:22.140 --> 00:14:23.930
to recompile the source code every time.

00:14:23.940 --> 00:14:26.410
If you have 40 frameworks,
you make a change to

00:14:26.410 --> 00:14:27.920
one of the frameworks,
you don't have to

00:14:27.920 --> 00:14:29.140
recompile the other stuff.

00:14:29.140 --> 00:14:32.100
You just work on it separately.

00:14:32.100 --> 00:14:35.220
The other thing is that you
can group related functionality

00:14:35.290 --> 00:14:47.400
together and increase code reuse.

00:14:48.380 --> 00:14:51.940
It has to do with how you layer your app,
but often what you want to do is,

00:14:51.940 --> 00:14:54.890
if you have plug-ins,
is to expose certain API,

00:14:54.890 --> 00:14:57.610
and it's very convenient then to use
a framework to expose that API to have

00:14:57.670 --> 00:15:00.700
your plug-in link against the framework,
and your app also links

00:15:00.700 --> 00:15:02.420
against that framework.

00:15:02.420 --> 00:15:06.680
And one other reason is
that if you do it this way,

00:15:06.680 --> 00:15:13.050
you can separate out your products
into more logical components.

00:15:14.680 --> 00:15:17.010
Of course,
frameworks also let you package

00:15:17.010 --> 00:15:20.280
headers and resources and even
documentation in a much nicer

00:15:20.280 --> 00:15:23.230
way than a static library does,
so that's really encouraged.

00:15:25.380 --> 00:15:26.060
So how do we do this?

00:15:26.060 --> 00:15:30.580
Well, to do this,
currently what you need to do is you

00:15:30.580 --> 00:15:33.530
need to tell the application that
instead of looking for the framework

00:15:33.620 --> 00:15:37.290
in a specific place in the file system,
you have to tell it to look

00:15:37.290 --> 00:15:39.680
relative to the executable.

00:15:39.680 --> 00:15:44.340
And the way this is done under the
covers is using a special path,

00:15:44.340 --> 00:15:46.730
at executable under our path.

00:15:46.780 --> 00:15:50.700
And you see the at executable
path dot dot frameworks there.

00:15:50.780 --> 00:15:53.500
So the dot dot is to get out
of the Mac OS folder that's

00:15:53.610 --> 00:15:55.540
part of an application package.

00:15:55.580 --> 00:15:58.210
You don't really need to
know the details of that,

00:15:58.660 --> 00:16:03.070
but this is the form the path will take.

00:16:03.160 --> 00:16:05.690
And frameworks is then the
subfolder of your application

00:16:05.690 --> 00:16:07.080
where the framework is put.

00:16:07.080 --> 00:16:11.080
We also need to set
skip install equals yes.

00:16:11.080 --> 00:16:15.770
And what that does is to prevent
Project Builder from actually trying to

00:16:15.850 --> 00:16:19.010
install that onto your system because
you have now an installation path.

00:16:20.060 --> 00:16:23.440
We are working on making this a
little bit easier to do and to

00:16:23.520 --> 00:16:25.820
have this be set up automatically.

00:16:25.820 --> 00:16:30.060
The second step after the framework is
set up is to set up the application.

00:16:30.060 --> 00:16:34.520
So now we set up the framework so that
it knows how to tell the application

00:16:34.630 --> 00:16:37.110
to look relative to the application.

00:16:37.320 --> 00:16:40.490
Now we set up the application so
that it actually copies in the

00:16:40.490 --> 00:16:42.540
framework after it's been built.

00:16:43.180 --> 00:16:45.590
And to do that,
you use a copy files build phase.

00:16:45.600 --> 00:16:48.750
It's a fairly generic build phase
that you can add to your target.

00:16:48.890 --> 00:16:52.760
And in this case,
we're using it for a framework.

00:16:54.400 --> 00:16:59.070
At this point,
I'd like to bring Christian Molick

00:16:59.080 --> 00:17:01.820
up to help me with a demo.

00:17:08.110 --> 00:17:13.770
So we have here a simple application
that I wrote this morning,

00:17:13.770 --> 00:17:14.490
actually.

00:17:14.590 --> 00:17:17.590
It's an app and a framework
in the same project.

00:17:17.790 --> 00:17:21.280
And it's a very simple app that
just has a button that shows

00:17:21.280 --> 00:17:23.540
the path of the framework.

00:17:23.620 --> 00:17:28.150
So what we're doing first is we're
just going to build and run this

00:17:28.150 --> 00:17:31.800
and just see what it does here.

00:17:31.800 --> 00:17:32.910
Gratuitous use of metal.

00:17:33.010 --> 00:17:35.000
Don't do this.

00:17:35.000 --> 00:17:37.970
So here we just show the -- we
ask the -- we have code to ask

00:17:37.970 --> 00:17:39.870
the framework for where it lives.

00:17:39.870 --> 00:17:42.440
So in this case, it lives in our shared
products directory.

00:17:42.480 --> 00:17:44.920
We set up a shared products
directory to volumes,

00:17:45.010 --> 00:17:47.260
to WWC demos symbols, right?

00:17:47.260 --> 00:17:49.370
So that's where all the products go.

00:17:49.470 --> 00:17:51.740
So just go ahead and quit that.

00:17:52.150 --> 00:17:57.660
And then what we're going to do now is
to set up the framework to prepare it

00:17:57.660 --> 00:18:00.060
for being embedded into the application.

00:18:00.150 --> 00:18:03.000
So let's go to the framework target.

00:18:03.220 --> 00:18:06.290
and if we go into the target editor,
under the build settings,

00:18:06.290 --> 00:18:08.750
we see it's set up not to install at all.

00:18:08.820 --> 00:18:11.270
So what we want to do in this case,
though, is we want to install it,

00:18:11.270 --> 00:18:13.700
but we want to put it inside of the app,
not in the system path.

00:18:13.810 --> 00:18:18.930
So we're going to go to enter
executable_path/... to get us

00:18:18.930 --> 00:18:22.830
out of the Mac OS subfolder,
and then into the frameworks subfolder,

00:18:22.880 --> 00:18:25.540
which is inside of the app bundle.

00:18:25.660 --> 00:18:28.220
And if we just do this,
Project Builder will try to create

00:18:28.220 --> 00:18:29.540
this path in the file system.

00:18:29.580 --> 00:18:35.690
So what we do is to scroll down
and to set a expert build setting.

00:18:35.700 --> 00:18:37.880
Skip install equals yes.

00:18:37.940 --> 00:18:41.090
And again, we're working on making
this a bit simpler.

00:18:41.100 --> 00:18:43.480
So now we set--it's pretty simple still,
though.

00:18:43.480 --> 00:18:44.600
Now we've set up the framework.

00:18:44.600 --> 00:18:45.140
That's all we have to do.

00:18:45.140 --> 00:18:49.400
Now the framework is set up to be
launched-- or to be found from the

00:18:49.630 --> 00:18:51.540
application relative to the application.

00:18:51.540 --> 00:18:54.240
But we also have to tell the
app to embed the framework.

00:18:54.240 --> 00:18:57.440
So Christian's gone to
the app target here.

00:18:57.440 --> 00:18:59.490
We add a copy file build phase.

00:18:59.500 --> 00:19:00.790
Thank you.

00:19:02.800 --> 00:19:06.700
we're gonna set this subfolder
to be the Frameworks folder.

00:19:06.850 --> 00:19:09.760
And then we're just gonna find
under the Files and Groups tab,

00:19:09.880 --> 00:19:13.040
there's a product for every
target that generates a product.

00:19:13.150 --> 00:19:14.750
And they show up in red 'cause
we haven't built it yet,

00:19:14.760 --> 00:19:18.060
so just gonna drag the framework in,
and that's it.

00:19:18.140 --> 00:19:20.160
It's clipped here 'cause
the font's a bit big,

00:19:20.160 --> 00:19:22.330
but, um, that's it.

00:19:22.390 --> 00:19:25.420
So now we need to make sure
that the application indeed

00:19:25.440 --> 00:19:26.580
depends on the framework.

00:19:26.670 --> 00:19:29.700
It already did,
because that's how the app was set up.

00:19:29.820 --> 00:19:34.600
And we can go ahead and build again.

00:19:35.120 --> 00:19:37.540
And this time,
the framework's built separately,

00:19:37.590 --> 00:19:39.850
the application's built separately,
and then the application copies

00:19:39.860 --> 00:19:41.400
the framework into itself.

00:19:41.490 --> 00:19:44.620
So now we see that the
products have been built,

00:19:44.620 --> 00:19:49.400
and we can actually-- we have a context
menu that has a Reveal in Finder item,

00:19:49.480 --> 00:19:52.160
and we can actually use that to
take a look at this to see if the

00:19:52.160 --> 00:19:54.940
framework actually got copied inside.

00:19:54.940 --> 00:19:56.190
So we're gonna do that.

00:19:56.250 --> 00:19:57.810
One moment.

00:19:57.810 --> 00:19:57.810
There we go.

00:19:59.770 --> 00:20:02.200
And we see, okay,
so let's open up the application

00:20:02.200 --> 00:20:05.330
and show the package contents.

00:20:05.400 --> 00:20:09.190
And we see that under frameworks,
the framework is actually copied now.

00:20:09.270 --> 00:20:12.460
So now if we run this,
we can run it right here from the finder.

00:20:12.510 --> 00:20:14.720
And we click the button this time.

00:20:14.800 --> 00:20:17.320
We see that now it picked up
the framework from inside of

00:20:17.320 --> 00:20:19.860
the application's contents
frameworks directory.

00:20:19.980 --> 00:20:24.990
So nice way of embedding
frameworks inside applications.

00:20:25.050 --> 00:20:25.510
Okay.

00:20:25.710 --> 00:20:27.200
Thanks, Christian.

00:20:27.250 --> 00:20:29.900
You can have the slide, please.

00:20:33.090 --> 00:20:38.100
So at this point,
I'm going to ask Christian to come up and

00:20:38.150 --> 00:20:39.390
continue with the next part of the preso.

00:20:39.400 --> 00:20:40.400
Thanks, Anders.

00:20:43.800 --> 00:20:45.790
So now that we've added
some finishing touches,

00:20:45.930 --> 00:20:47.450
let's talk about building the product.

00:20:47.600 --> 00:20:50.460
Now, development builds are a bit
different from deployment builds,

00:20:50.460 --> 00:20:52.820
and I'd like to go through
a bunch of why that is.

00:20:52.860 --> 00:20:54.200
We could go into a lot of detail.

00:20:54.200 --> 00:20:57.010
I'll just be humming right through this.

00:20:57.790 --> 00:21:00.870
First of all,
compile optimization and macros

00:21:00.930 --> 00:21:02.080
are going to be very different.

00:21:02.190 --> 00:21:05.000
Usually when you're developing,
you want to avoid optimization or

00:21:05.000 --> 00:21:08.430
have minimal optimization so that
your debugging experience doesn't

00:21:08.550 --> 00:21:11.690
get messed up and so that you can
see as much of your code as possible.

00:21:11.780 --> 00:21:14.100
You may also be defining your code
such that there are macros that

00:21:14.140 --> 00:21:15.380
define what actually gets built.

00:21:15.440 --> 00:21:18.060
You may have extra debugging code,
or you may have extra code that gets

00:21:18.120 --> 00:21:20.300
built only for your deployment product.

00:21:20.390 --> 00:21:25.790
You want to make sure that this is dealt
with when you compile for deployment.

00:21:28.450 --> 00:21:31.230
In addition, you want to pay attention to
symbol editing and stripping.

00:21:31.510 --> 00:21:33.070
By default,
you're going to get a whole bunch

00:21:33.070 --> 00:21:35.980
of symbols in your binaries,
and very often you don't need any of

00:21:35.980 --> 00:21:38.190
these symbols or just not most of them.

00:21:38.290 --> 00:21:41.870
So you want to be careful to trim down
the symbols in the binaries that you

00:21:41.870 --> 00:21:43.950
deliver to the minimal possible level.

00:21:44.500 --> 00:21:48.170
primarily this is for application
developers so that you don't actually

00:21:48.520 --> 00:21:52.900
vend more functionality than you
intended to and get yourself into a trap.

00:21:52.970 --> 00:21:55.600
But it's also a very important
performance point because all the

00:21:55.600 --> 00:21:59.400
symbols actually enlarge the executable
and particularly for dynamic libraries,

00:21:59.440 --> 00:22:02.840
all of the symbols are going to
be shifted around and loaded when

00:22:02.840 --> 00:22:04.750
they may not even be necessary.

00:22:05.000 --> 00:22:06.900
And of course stripping
is very important.

00:22:06.910 --> 00:22:09.940
Having extra symbols,
debug symbols in the

00:22:09.940 --> 00:22:12.360
binaries you ship is no good.

00:22:12.460 --> 00:22:15.140
You want to make sure to
avoid non-deployment files.

00:22:15.210 --> 00:22:18.040
There are a bunch of settings that
affect Project Builder builds.

00:22:18.110 --> 00:22:20.980
Many of them can cause intermediate
files or stuff you just don't want

00:22:20.990 --> 00:22:24.090
to appear in your deployment builds,
and you want to make sure that

00:22:24.090 --> 00:22:27.030
none of that is actually getting
shipped out to customers.

00:22:27.120 --> 00:22:30.530
You also want to be careful
of ownership and file modes.

00:22:30.590 --> 00:22:33.230
We've got the power of Unix now in OS X,
and that means that there's a lot

00:22:33.230 --> 00:22:36.140
of file ownership and mode settings
that you can give to files that will

00:22:36.180 --> 00:22:39.360
make them unusable or unaccessible
in ways that aren't immediately

00:22:39.360 --> 00:22:40.670
clear when you're first testing them.

00:22:40.680 --> 00:22:42.860
So you want to be very careful
that you've got a standard set

00:22:42.860 --> 00:22:47.010
of ownership and file modes
for your deployed products.

00:22:47.590 --> 00:22:50.140
Finally, you want to pay attention to
your distribution folder layout.

00:22:50.240 --> 00:22:53.250
Now, ideally, in the cases we're showing,
you've got a package and

00:22:53.250 --> 00:22:54.300
an application inside it.

00:22:54.300 --> 00:22:55.590
It's all very simple.

00:22:55.680 --> 00:22:57.820
But for more complex products,
you may have a layout

00:22:57.820 --> 00:23:00.760
with various resources,
alternatives of the application,

00:23:00.830 --> 00:23:03.290
and you want to be very sure that
these get in the right folders

00:23:03.330 --> 00:23:07.230
and are all making sense in the
final thing that gets shipped out.

00:23:07.330 --> 00:23:12.580
So talking about these in some detail,
first of all, the compile optimization.

00:23:12.770 --> 00:23:14.700
It's very important that it
can interfere with debugging.

00:23:14.700 --> 00:23:17.020
So if you're getting very
strange results while debugging,

00:23:17.020 --> 00:23:21.540
you're having trouble stepping around,
check your optimization settings

00:23:21.540 --> 00:23:24.040
to see if you may have optimized
your code to a level where you

00:23:24.040 --> 00:23:25.460
can't really debug it anymore.

00:23:25.460 --> 00:23:27.820
Now, when you're deploying,
you want to make sure to

00:23:27.820 --> 00:23:29.730
be using optimization,
because if you don't

00:23:29.830 --> 00:23:32.100
compile with optimization,
your code could be very slow.

00:23:32.100 --> 00:23:36.690
Currently, we're recommending for people
who are using GCC to use OS,

00:23:36.690 --> 00:23:38.580
which optimizes for size.

00:23:38.640 --> 00:23:43.110
The actual size of the binary is one
of the biggest variables in terms

00:23:43.110 --> 00:23:44.320
of determining its performance.

00:23:44.340 --> 00:23:46.540
If you can save a few pages,
even if the code is a

00:23:46.540 --> 00:23:48.490
little less efficient,
you may actually have

00:23:48.490 --> 00:23:49.610
much better performance.

00:23:49.640 --> 00:23:54.010
Similarly, you can have your other macros
in here that define crash risk or

00:23:54.010 --> 00:23:57.490
alternative algorithms or such.

00:23:58.570 --> 00:24:02.660
So with editing exported symbols,
you're going to want to do that.

00:24:02.660 --> 00:24:04.240
You're also going to want to
make sure that your symbols are

00:24:04.250 --> 00:24:06.530
stripped from all your products,
and in particular where this

00:24:06.570 --> 00:24:08.900
gets interesting is when
you have embedded products.

00:24:08.960 --> 00:24:11.190
So what we're demonstrating
here is an application with

00:24:11.250 --> 00:24:12.600
a framework inside of it.

00:24:12.650 --> 00:24:15.510
We want to make sure that
that framework gets stripped.

00:24:15.510 --> 00:24:18.700
This is an interesting point because the
semantics for doing this have actually

00:24:18.700 --> 00:24:20.560
changed with Project Builder recently.

00:24:20.560 --> 00:24:23.210
In the past what we did was we
assumed that during a build,

00:24:23.210 --> 00:24:26.430
all the products that are being
built are just being built raw,

00:24:26.570 --> 00:24:28.660
and so when embedding
actually takes place,

00:24:28.810 --> 00:24:31.350
we have to search through
every embedded content,

00:24:31.440 --> 00:24:34.980
look for any files that are binaries,
and make sure that they're stripped then.

00:24:34.980 --> 00:24:36.780
Now the new model which
Project Builder is using is that

00:24:36.780 --> 00:24:39.930
when you're building for deployment,
binaries are stripped right away,

00:24:40.010 --> 00:24:41.360
as soon as they're produced.

00:24:41.360 --> 00:24:44.160
So we don't need to actually
strip embedded content over again.

00:24:44.160 --> 00:24:46.760
We've got a different set of
settings that apply to that.

00:24:46.820 --> 00:24:49.100
So it's really important to pay attention
to this step and make sure that your

00:24:49.250 --> 00:24:51.870
embedded content also gets stripped.

00:24:52.730 --> 00:24:54.990
Non-deployment files,
there's a bunch of different kinds.

00:24:54.990 --> 00:24:57.510
Intermediates are the most common
that can poke into products.

00:24:57.540 --> 00:25:00.110
I'd like to highlight also
the development property list.

00:25:00.300 --> 00:25:02.860
Project Builder writes a
PB development plist to keep track

00:25:02.860 --> 00:25:04.600
of what's going on with the product.

00:25:04.620 --> 00:25:08.460
The idea is to enhance the debugging
experience by allowing PB to

00:25:08.460 --> 00:25:12.480
know where the product came from,
exactly what project produced it,

00:25:12.590 --> 00:25:13.570
and so forth.

00:25:13.590 --> 00:25:17.100
It's very important to avoid
having this plist in your deployed

00:25:17.180 --> 00:25:19.020
products if you can avoid it.

00:25:19.100 --> 00:25:21.500
And some procedures for doing this.

00:25:21.500 --> 00:25:24.040
These are very basic,
but it's clear looking around there

00:25:24.040 --> 00:25:25.550
that not all developers are doing this.

00:25:25.550 --> 00:25:28.870
You definitely want to clean your
builds before you do deployment builds,

00:25:28.870 --> 00:25:31.200
and you want to check your
build results all the time,

00:25:31.200 --> 00:25:35.020
because there could be files which got
in that last build which you really

00:25:35.020 --> 00:25:36.820
don't want to ship to customers.

00:25:37.410 --> 00:25:42.240
I want to review standard file ownership
and permission settings that we're

00:25:42.240 --> 00:25:46.440
recommending for Project Builder are
root and wheel for system content,

00:25:46.440 --> 00:25:49.770
root and admin for non-system content.

00:25:51.900 --> 00:25:52.900
Very basic.

00:25:52.900 --> 00:25:54.360
You want to make sure that you
don't ship things that aren't

00:25:54.360 --> 00:25:56.660
actually readable by your customers,
aren't executable by them,

00:25:56.660 --> 00:25:59.420
and you want to make sure that files
that aren't meant to be written

00:25:59.420 --> 00:26:02.330
can't be written so that you don't
end up with accidental destruction

00:26:02.380 --> 00:26:04.050
of a product that you've shipped.

00:26:05.870 --> 00:26:09.930
And finally, just to highlight the
distribution folder layout,

00:26:10.030 --> 00:26:11.590
in general you may have a structure.

00:26:11.750 --> 00:26:13.550
In particular,
distribution routes often have

00:26:13.550 --> 00:26:15.910
a structure where the route
of the distribution route

00:26:15.950 --> 00:26:17.460
represents the system route.

00:26:17.550 --> 00:26:19.660
So if you've got something
installed in user local,

00:26:19.660 --> 00:26:21.760
you'd have a user local
in your distribution route

00:26:21.760 --> 00:26:24.100
with the content in there,
and that allows you to specify

00:26:24.110 --> 00:26:28.580
exactly where in the installed
file system files need to go.

00:26:29.250 --> 00:26:30.910
So how does this get done?

00:26:31.170 --> 00:26:32.140
There's a few steps to it.

00:26:32.140 --> 00:26:35.400
One is the build actions,
which we're calling out.

00:26:35.560 --> 00:26:36.650
This is something of a deep subject.

00:26:36.740 --> 00:26:38.370
I'm only going to touch
on a few bits of it.

00:26:38.500 --> 00:26:39.930
But when you're building,
we're not always just

00:26:40.070 --> 00:26:40.860
building from the IDE.

00:26:40.860 --> 00:26:42.340
You can see we're building
and we're cleaning.

00:26:42.340 --> 00:26:45.340
We can also install and do
a number of other things.

00:26:45.340 --> 00:26:47.010
These are build actions.

00:26:47.390 --> 00:26:49.830
Now, primarily what these controls,
they determine the default

00:26:49.830 --> 00:26:52.090
values for build settings,
a whole range of settings.

00:26:52.190 --> 00:26:54.940
In fact,
the entire build system is really doing

00:26:55.020 --> 00:26:56.750
much more than processing settings.

00:26:56.750 --> 00:27:01.230
All the paths that point out files
in a project are just settings.

00:27:01.300 --> 00:27:08.090
And so how these default values
change can be very interesting.

00:27:08.520 --> 00:27:12.060
At this time, it's the case that
with PBX build install,

00:27:12.060 --> 00:27:17.990
you're actually going to get some
significantly different default

00:27:17.990 --> 00:27:17.990
values for settings than you get

00:27:18.180 --> 00:27:21.920
with a build, PBX build build,
or a build from the IDE,

00:27:21.920 --> 00:27:25.450
and recommending that for
when you're deploying targets,

00:27:25.500 --> 00:27:28.350
what you want to do is actually
build them as root from

00:27:28.390 --> 00:27:36.400
PBX build with PBX build install,
because that will give you all

00:27:36.400 --> 00:27:36.400
around your best deployment
set of default values.

00:27:36.890 --> 00:27:38.800
It also determines the build process.

00:27:38.800 --> 00:27:43.390
This is again a tricky bit because the
semantics in PBF changed here recently.

00:27:43.490 --> 00:27:47.880
It used to be the case that the build
model was that a build would happen,

00:27:47.880 --> 00:27:50.680
and then to get a deployment,
you would do an install of that build,

00:27:50.700 --> 00:27:53.800
which would copy it to its installed
location and do post-processing:

00:27:53.960 --> 00:27:57.590
stripping, setting the owner, the mode,
and so on.

00:27:58.150 --> 00:28:01.060
This model is good for some cases,
but it tends to break down.

00:28:01.060 --> 00:28:03.220
In particular,
we just noticed that the compile options

00:28:03.220 --> 00:28:06.410
you're going to want to use are different
for deployment and development builds.

00:28:06.460 --> 00:28:11.420
So in this case, for a deployment build,
you can build it and copy

00:28:11.420 --> 00:28:15.050
it over to its location,
but because that build for deployment

00:28:15.150 --> 00:28:18.750
isn't really built the same way that
you want your development builds built,

00:28:18.750 --> 00:28:21.890
there's not really a whole lot of reason
to build it first and then copy it.

00:28:21.960 --> 00:28:25.100
So what's happening now in
Project Builder by default with

00:28:25.100 --> 00:28:28.550
Jaguar is that products will get
built for deployment directly

00:28:28.550 --> 00:28:31.730
into their install locations and
will be immediately stripped,

00:28:31.940 --> 00:28:33.250
have owner and mode set.

00:28:33.280 --> 00:28:36.140
So the process has really changed here.

00:28:38.400 --> 00:28:40.990
And it's worth calling out that the
Actions Clean and Install Source,

00:28:41.020 --> 00:28:43.230
which are supported now,
are very special cases.

00:28:43.330 --> 00:28:44.920
In particular,
they don't have build phases

00:28:44.950 --> 00:28:47.890
like the other builds do,
or at least not yet.

00:28:49.500 --> 00:28:50.400
So how do you do this?

00:28:50.400 --> 00:28:53.150
It's with build styles for deployment.

00:28:53.350 --> 00:28:55.350
Anders really described
this in most of its detail,

00:28:55.360 --> 00:28:58.320
but build styles determine how
targets get built rather than

00:28:58.320 --> 00:28:59.800
what a target is building.

00:28:59.940 --> 00:29:03.640
And build style settings
override target settings.

00:29:03.790 --> 00:29:05.790
So we could just see that.

00:29:05.810 --> 00:29:10.330
I'd like to get Anders to show one.

00:29:10.420 --> 00:29:13.010
If I could get the demo screen, please.

00:29:14.770 --> 00:29:17.480
So every project that you make
with Project Builder comes with

00:29:17.490 --> 00:29:21.290
a couple of default build styles.

00:29:21.530 --> 00:29:24.900
We're going to take a look at
the default deployment style.

00:29:24.900 --> 00:29:26.540
Now,
the first thing that we want to add is

00:29:26.660 --> 00:29:29.450
the setting deployment post-processing,
yes.

00:29:29.640 --> 00:29:31.060
This is a sort of master trigger.

00:29:31.060 --> 00:29:34.260
It's going to cause the
products to be built directly

00:29:34.260 --> 00:29:35.560
into their install locations.

00:29:35.560 --> 00:29:37.400
It's going to cause the
ownership and mode to be set.

00:29:37.400 --> 00:29:39.740
It'll cause the stripping
to be activated.

00:29:39.920 --> 00:29:42.640
This is sort of a master switch
for all of these variables.

00:29:42.640 --> 00:29:44.100
Now, currently,
this has a hold over here.

00:29:44.100 --> 00:29:47.700
The copy phase strip is from the old
process where we could never count on

00:29:47.700 --> 00:29:49.740
products having been stripped initially.

00:29:49.880 --> 00:29:53.210
So every time we embedded a target,
we had to look for binaries

00:29:53.210 --> 00:29:54.560
in there and strip it.

00:29:54.740 --> 00:29:57.740
Now, this isn't a very efficient process,
and with the new model,

00:29:57.740 --> 00:29:59.680
you can expect that all of the
targets you're building are going to

00:29:59.680 --> 00:30:01.240
be stripped as soon as they're built.

00:30:01.320 --> 00:30:03.230
So we can actually
delete this setting now.

00:30:03.240 --> 00:30:04.740
You want to be careful.

00:30:04.740 --> 00:30:08.240
If you are including binaries that
are built from other projects,

00:30:08.300 --> 00:30:10.240
you may need that setting when
you're building your target.

00:30:10.240 --> 00:30:12.240
But if you're just using
Project Builder now,

00:30:12.240 --> 00:30:15.740
you should have targets stripped
automatically as soon as they're built.

00:30:16.210 --> 00:30:18.740
Additionally, we'd like to make sure that
the optimization is good,

00:30:18.740 --> 00:30:21.820
so we're going to add optimization
in C flags set to -OS so

00:30:21.820 --> 00:30:25.520
that we're optimizing for
size of the resulting binary.

00:30:26.070 --> 00:30:27.000
And that's really all it takes.

00:30:27.000 --> 00:30:30.000
That's a fully usable
deployment build setting.

00:30:30.000 --> 00:30:33.990
Let's see if we can get
a test build with that.

00:30:34.900 --> 00:30:35.920
And I'm not going to
go ahead and run this.

00:30:36.020 --> 00:30:40.300
You won't see much of a difference in
this application because it's so simple.

00:30:40.300 --> 00:30:43.040
But it is interesting that
you can see it was going and

00:30:43.180 --> 00:30:45.610
recompiling all the sources there.

00:30:47.040 --> 00:30:48.000
Thanks, Anders.

00:30:48.000 --> 00:30:50.280
If I could go back to slides.

00:30:50.300 --> 00:30:52.950
So there's building your
product for deployment.

00:30:53.030 --> 00:30:54.930
But now that you've got that,
you've got to get it out to customers.

00:30:54.960 --> 00:30:59.400
So let's see creating disk
images and Installer packages.

00:30:59.470 --> 00:31:01.330
Packaging for distribution
is a large area.

00:31:01.340 --> 00:31:04.060
There's a bunch of third-party
tools that are available.

00:31:04.060 --> 00:31:06.730
And we strongly encourage anyone
who's shipping a product to think

00:31:06.730 --> 00:31:09.860
about what's out there and their
install process and how to make

00:31:09.940 --> 00:31:11.840
it most accessible for customers.

00:31:11.960 --> 00:31:15.990
Primarily what we're
recommending is disk images.

00:31:16.120 --> 00:31:17.060
Why?

00:31:17.060 --> 00:31:20.450
Primarily, they're compact and
they're very accessible.

00:31:20.560 --> 00:31:22.300
With a disk image,
you can take a very complex

00:31:22.300 --> 00:31:27.350
product that may be using resource
forks and other HFS+ technology,

00:31:27.350 --> 00:31:29.690
and you can put it all in a single file,
and it'll be represented

00:31:29.690 --> 00:31:30.400
accurately there.

00:31:30.590 --> 00:31:33.270
It'll also be compressed
very efficiently.

00:31:33.460 --> 00:31:35.030
They're also very accessible.

00:31:35.090 --> 00:31:38.210
There's no need to get Installer
technology or a new version of disk copy

00:31:38.290 --> 00:31:40.240
because all this is built into Mac OS X.

00:31:40.240 --> 00:31:44.400
You just double-click on a disk image
and it gets mounted and you can see it.

00:31:45.870 --> 00:31:47.920
Another big plus of disk
images is that they can do

00:31:47.970 --> 00:31:49.710
simple installation processing.

00:31:49.800 --> 00:31:51.900
Currently,
a lot of people who are shipping

00:31:51.990 --> 00:31:55.150
code need to have their users agree
to a software license agreement.

00:31:55.230 --> 00:32:00.370
With the disk images,
you can have the software license

00:32:00.540 --> 00:32:03.650
agreement displayed and force
them to agree to it before the

00:32:03.650 --> 00:32:03.650
disk image will actually be
mounted and available to them.

00:32:04.600 --> 00:32:07.740
Additionally, coming up in Jaguar,
for the full release of Jaguar,

00:32:07.740 --> 00:32:10.290
there's a bunch of other simple
installation processing that will

00:32:10.370 --> 00:32:12.610
be possible with disk images,
such as removing the disk

00:32:12.700 --> 00:32:18.490
image after it's been used to
actually install the product,

00:32:18.550 --> 00:32:26.000
to run the installer on a package
that's inside the disk image,

00:32:26.000 --> 00:32:26.000
and a variety of other things like that.

00:32:26.220 --> 00:32:27.820
I just mentioned Installer packages.

00:32:27.910 --> 00:32:31.150
There are some good reasons to use those,
but it's mostly if you

00:32:31.150 --> 00:32:33.100
have special cases,
in particular if you've

00:32:33.170 --> 00:32:35.470
got scattered files,
files that need to get in particular

00:32:35.600 --> 00:32:38.600
parts of the file system in order for
your application to work properly.

00:32:38.640 --> 00:32:40.840
It's really a pain to give
users all those to drag around,

00:32:40.840 --> 00:32:42.470
and you can't rely on
them to get it right,

00:32:42.650 --> 00:32:46.290
so the Installer packages will let
you get scattered files all over the

00:32:46.290 --> 00:32:48.240
file system where they need to be.

00:32:48.310 --> 00:32:52.800
And also, if you need to do various
open-ended installation processing,

00:32:52.800 --> 00:32:56.310
either prep the file system before you
lay your application down or do something

00:32:56.310 --> 00:33:00.370
with it to make sure it's ready to run,
Installer packages have the most

00:33:00.370 --> 00:33:02.670
open-ended support for that.

00:33:03.290 --> 00:33:05.850
And I'd like to note here that you
can do installation processing with

00:33:05.850 --> 00:33:08.670
both disk images and the packages.

00:33:08.770 --> 00:33:11.610
And so it's careful to think
about what you're doing and why.

00:33:11.700 --> 00:33:13.970
It can happen that if you've got
a software license agreement,

00:33:13.970 --> 00:33:16.640
you may accidentally cause
the user to agree to it twice,

00:33:16.720 --> 00:33:17.940
which can be a negative experience.

00:33:17.960 --> 00:33:21.000
So you should try to choose which
ones you need and either put

00:33:21.000 --> 00:33:24.440
your post-processing on the disk
image or in the Installer package

00:33:24.440 --> 00:33:28.640
or wherever it goes if it's not
particularly visible to the user.

00:33:28.710 --> 00:33:30.060
So how are these things made?

00:33:30.060 --> 00:33:32.860
It's not entirely straightforward,
but there are a few

00:33:32.860 --> 00:33:34.660
commands that get it done.

00:33:34.780 --> 00:33:38.110
First of all,
the disk images are created with HDIutil.

00:33:38.220 --> 00:33:43.160
This will actually make a
file which represents a disk,

00:33:43.260 --> 00:33:45.120
an actual device.

00:33:45.250 --> 00:33:47.610
Then you have to make a file
system on that disk image in

00:33:47.610 --> 00:33:48.860
order to store stuff there.

00:33:48.860 --> 00:33:50.560
And there are some variables for that.

00:33:50.560 --> 00:33:52.800
We can decide how big the
file system is initially,

00:33:52.800 --> 00:33:56.310
what kind of compression we have on it,
its organization.

00:33:56.630 --> 00:33:58.780
Once we've got a disk image
with a file system on it,

00:33:58.810 --> 00:34:01.240
we mount it with HDID,
very similar as to what's

00:34:01.240 --> 00:34:04.690
happening when you double-click
on a disk image from the Finder.

00:34:05.910 --> 00:34:07.410
You can populate it using any commands.

00:34:07.490 --> 00:34:09.330
This is a big advantage, too,
because there are a lot of

00:34:09.390 --> 00:34:10.900
different commands for copying.

00:34:10.900 --> 00:34:12.600
Depending on how you have
your build process set up,

00:34:12.600 --> 00:34:14.800
you may have a clear and easy choice.

00:34:14.930 --> 00:34:16.600
You may want to use an
archiving copy command.

00:34:16.600 --> 00:34:19.000
You may want to use Ditto,
which is a maximally preserving

00:34:19.230 --> 00:34:21.800
directory-to-directory
copy that's on the system.

00:34:21.950 --> 00:34:25.890
Our example will be using CP,
because it's very simple and accessible.

00:34:26.010 --> 00:34:28.240
Then finally, when you're all finished,
you're going to want to call hdiutil

00:34:28.240 --> 00:34:31.970
again to get some compression on that
image so that it's nice and tight.

00:34:32.580 --> 00:34:57.500
: And again,
I'd like to -- it's going to be

00:34:57.500 --> 00:34:57.500
automated in a number of ways.

00:34:57.500 --> 00:34:57.500
In general,
your best bet is going to be using an

00:34:57.500 --> 00:34:57.500
alternate target because we can plug
that into the dependents for the other

00:34:57.500 --> 00:34:57.500
targets in the project however we want.

00:34:57.500 --> 00:34:57.500
Another option is to use a script
phase so that every time a target is

00:34:57.500 --> 00:34:57.500
built during that section of the build,
the packaging will take place.

00:34:57.500 --> 00:34:57.520
We're going to be demonstrating
an alternate target.

00:34:57.520 --> 00:34:57.520
Get --

00:34:58.710 --> 00:34:59.700
Demo screen.

00:34:59.700 --> 00:35:00.580
Thanks.

00:35:00.580 --> 00:35:05.110
So we defined a deployment
build style last time.

00:35:05.310 --> 00:35:07.880
Now what we're going to do
is set up the packaging.

00:35:07.950 --> 00:35:09.700
We're going to need a script to do this.

00:35:09.700 --> 00:35:15.650
So we're going to make a new file in this
project and not add it to any targets.

00:35:22.420 --> 00:35:24.300
And we have one created
in the background.

00:35:24.300 --> 00:35:27.300
Anders is going to type
this up magically for you.

00:35:27.300 --> 00:35:30.640
First up, we're going to actually define
some variables that define what

00:35:30.640 --> 00:35:34.650
the image name is going to be and
what its full location will be.

00:35:35.740 --> 00:35:38.000
Now we remove any previous
image that might be in place.

00:35:38.000 --> 00:35:40.040
You can't create a disk image
on top of another image,

00:35:40.040 --> 00:35:42.160
so this is an important step.

00:35:43.400 --> 00:35:46.160
HDIUtil is used to
create the image itself.

00:35:46.160 --> 00:35:48.940
Here we're giving it an initial size,
which isn't very important.

00:35:48.940 --> 00:35:52.760
The disk will actually
contain what is put in it,

00:35:52.760 --> 00:35:55.560
so you're not creating a
maximum size for the image here.

00:35:55.560 --> 00:35:59.520
Or you're creating a maximum size,
but not the true size of the image.

00:36:01.490 --> 00:36:05.900
Here we're getting the device of that
so that we can then go and create a

00:36:05.900 --> 00:36:09.960
file system on it using a Nufis call.

00:36:10.010 --> 00:36:13.810
This will actually build an HFS+
file system on the disk image.

00:36:14.570 --> 00:36:17.060
Now we eject it, that unmounts it,
so what we have is a file

00:36:17.590 --> 00:36:20.580
all contained by itself,
which represents a disk with

00:36:20.590 --> 00:36:22.480
an HFS+ file system on it.

00:36:22.560 --> 00:36:25.670
Now we go and mount that writably,
much like the Finder would

00:36:25.680 --> 00:36:26.760
do as if we'd clicked it.

00:36:26.820 --> 00:36:29.980
Wait for four seconds just
to make sure it gets mounted.

00:36:30.870 --> 00:36:33.180
And now we can copy our product onto it.

00:36:33.210 --> 00:36:35.430
This is a simple CPRP that we're doing.

00:36:35.430 --> 00:36:39.780
This should preserve just enough that
the framework inside there lives.

00:36:40.900 --> 00:36:41.840
And now we eject it again.

00:36:41.840 --> 00:36:44.260
That'll unmount the copy.

00:36:44.450 --> 00:36:47.090
And now that it's all finished,
we're going to copy it aside

00:36:47.130 --> 00:36:47.900
and do compression on it.

00:36:47.900 --> 00:36:52.540
And that's it.

00:36:56.640 --> 00:36:59.040
So saving that, to get it active,
what we're going to do is

00:36:59.040 --> 00:37:01.010
make a legacy Makefile target.

00:37:01.070 --> 00:37:02.540
But instead of calling Make,
we're going to actually

00:37:02.540 --> 00:37:04.620
just call the shell script.

00:37:07.210 --> 00:37:08.200
We're going to give it a name.

00:37:08.200 --> 00:37:09.960
Because we're using the product
name as the disk image name,

00:37:09.960 --> 00:37:13.910
we need to give it a name that's a
reasonable name for the distribution.

00:37:23.970 --> 00:37:36.840
And as an argument,
we're going to give the name of the file.

00:37:36.840 --> 00:37:37.840
So there it's set up.

00:37:37.840 --> 00:37:41.140
Now what we need to do is make sure
that the target is properly placed.

00:37:41.140 --> 00:37:44.010
The first target in the list is the
one that's going to be built when

00:37:44.010 --> 00:37:48.700
we build the project from PBX build
externally from the command line.

00:37:48.950 --> 00:37:50.470
So we're going to make that the
first target so that if this

00:37:50.560 --> 00:37:52.460
is built from the command line,
what we're going to do is we're going

00:37:52.460 --> 00:37:54.460
to get the fully packaged application.

00:37:54.520 --> 00:37:55.920
To make sure that happens,
we're going to actually have to

00:37:55.920 --> 00:37:58.500
drag the application target up to
the product image target to make

00:37:58.600 --> 00:38:02.820
sure that gets built so that we
have something to put in the image.

00:38:02.820 --> 00:38:05.950
Now if we make that target
active and go and build it,

00:38:05.950 --> 00:38:11.090
we're also going to want to make the
deployments build style active as well.

00:38:11.090 --> 00:38:12.040
Note that.

00:38:12.040 --> 00:38:16.420
This should give us a full-blown
deployment build of our demo app.

00:38:16.420 --> 00:38:17.860
So now it's built the app.

00:38:17.860 --> 00:38:19.830
It's creating the disk image now.

00:38:22.550 --> 00:38:27.500
The file system is copying and
the compression goes very fast.

00:38:27.500 --> 00:38:33.820
So now if we can go and look at the build
directory where that will have shown up.

00:38:37.310 --> 00:38:39.570
So you can see it popping
up on the desktop there.

00:38:39.640 --> 00:38:41.780
And there's the application,
which can in fact be run directly

00:38:41.780 --> 00:38:43.270
from that compressed image.

00:38:43.360 --> 00:38:45.770
So now you can see that the framework
that we're getting is in fact the

00:38:45.770 --> 00:38:50.190
framework from the application
inside the compressed image.

00:38:50.920 --> 00:38:53.350
And of course to install it,
all you have to do is drag that

00:38:53.350 --> 00:38:55.800
application to wherever it belongs.

00:38:55.800 --> 00:39:00.790
Great.

00:39:00.840 --> 00:39:01.800
Thanks Anders.

00:39:10.800 --> 00:39:16.600
[Transcript missing]

00:39:17.470 --> 00:39:22.720
I wanted to leave a little
time for Q&A here for PB,

00:39:22.830 --> 00:39:26.800
but to recap some of the things
we talked about in this session,

00:39:26.800 --> 00:39:31.710
we've seen some ways in which we
can streamline the build process.

00:39:31.910 --> 00:39:37.660
You can set up a PFE file
to make GCC3 build faster.

00:39:37.660 --> 00:39:40.740
You can use build styles in
order to customize the build,

00:39:40.800 --> 00:39:44.080
both in terms of what gets built,
where it gets built.

00:39:44.170 --> 00:39:46.760
You can try out new algorithms,
things like that.

00:39:46.850 --> 00:39:52.950
You can set up execution contexts to pass
different parameters to your program.

00:39:53.400 --> 00:39:57.260
You can, even if you have a plug-in that
could be loaded that conforms to

00:39:57.360 --> 00:40:00.500
some standard plug-in API that could
be loaded by three different apps,

00:40:00.500 --> 00:40:02.500
you could set up three
different execution contexts,

00:40:02.580 --> 00:40:04.990
one for each app,
and test your plug-in with that.

00:40:05.060 --> 00:40:07.310
So it's fairly flexible.

00:40:07.570 --> 00:40:09.600
We've seen some ways of
polishing the product.

00:40:09.770 --> 00:40:13.740
You can add versioning to it.

00:40:13.740 --> 00:40:16.890
You can embed frameworks
inside of applications,

00:40:16.900 --> 00:40:20.740
and this is something we encourage you
to do if your app is one that lends

00:40:20.750 --> 00:40:22.800
itself to drag-and-drop installation.

00:40:22.800 --> 00:40:26.270
This is really something we encourage
because users often don't want

00:40:26.290 --> 00:40:29.980
to have to deal with installers
and having to figure out where

00:40:29.980 --> 00:40:32.700
all the different files get placed.

00:40:32.700 --> 00:40:35.520
If you have a single app
that can be drag-and-dropped

00:40:35.520 --> 00:40:39.040
into the applications folder,
that's a very useful thing.

00:40:39.390 --> 00:40:43.470
We have seen a little bit
about how you can build for

00:40:43.470 --> 00:40:46.690
deployment and take advantage of,
especially taking advantage

00:40:46.810 --> 00:40:48.190
of build styles for that.

00:40:50.910 --> 00:40:52.820
talked a little bit about
packaging the product.

00:40:52.820 --> 00:40:55.400
In this example,
we used the command line tool

00:40:55.400 --> 00:40:56.890
for creating a disk image.

00:40:56.920 --> 00:41:00.790
You can, of course,
also do that using disk copy itself,

00:41:00.920 --> 00:41:02.460
but that's a manual process.

00:41:02.600 --> 00:41:07.050
And so you can fit this into like a
nightly build that produces a disk

00:41:07.050 --> 00:41:10.540
image in the morning that's ready
for--that has the latest build of

00:41:10.610 --> 00:41:12.460
your product ready for installation.

00:41:12.920 --> 00:41:15.340
And so now we've talked
about some of these things,

00:41:15.340 --> 00:41:18.500
and so hopefully this
will help you to ship it.

00:41:18.590 --> 00:41:25.160
So again, keeping in mind not to use
GCC3 until we ship Jaguar.

00:41:25.250 --> 00:41:28.650
So what I'd like to do now
is to ask Advoji Georgi,

00:41:28.900 --> 00:41:30.500
the technology manager
for developer tools,

00:41:30.500 --> 00:41:34.640
to come back on stage and help
us with the roadmap and the Q&A.

00:41:34.700 --> 00:41:36.090
Thanks.

00:41:37.070 --> 00:41:39.940
Thank you, Anders and Christian.

00:41:40.100 --> 00:41:41.530
Great stuff.

00:41:41.790 --> 00:41:42.660
More information.

00:41:42.800 --> 00:41:47.230
You've seen these slides many
times during the conference before.

00:41:47.660 --> 00:41:51.060
The Apple Developer Connection
Tools page for extended information

00:41:51.130 --> 00:41:53.120
about all the tools available.

00:41:53.220 --> 00:41:55.710
The specific Project Builder page.

00:41:55.710 --> 00:41:59.300
And the Apple Connection Downloads for
where you can get updated versions as we

00:41:59.300 --> 00:42:03.220
release the tools on a quarterly cycle.

00:42:03.650 --> 00:42:06.390
We also have the bug reporting
page listed because we do

00:42:06.390 --> 00:42:07.250
want to hear your bugs.

00:42:07.250 --> 00:42:11.330
We do want to see your experiences
with Project Builder and all the

00:42:11.330 --> 00:42:13.360
tools so that we can address them.

00:42:15.570 --> 00:42:17.110
Roadmap, we're getting close to the end.

00:42:17.260 --> 00:42:20.240
The session immediately following
this one is the feedback forum

00:42:20.240 --> 00:42:22.400
for development tools in room J1.

00:42:22.400 --> 00:42:27.030
And then the final session of the week,
debugging in Mac OS X back

00:42:27.030 --> 00:42:28.580
here in this hall.

00:42:28.580 --> 00:42:31.660
And with that,
if I can ask the Q&A team to

00:42:31.790 --> 00:42:34.160
start coming up to the stage.

00:42:34.160 --> 00:42:37.710
Contacts for tools,
contacts for Project Builder.

00:42:37.720 --> 00:42:41.080
I'm always available to talk
to you about opportunities and

00:42:41.080 --> 00:42:44.840
issues with Project Builder,
how it will affect your development.

00:42:45.500 --> 00:42:49.870
We have the mailing lists,
lists at apple.com, where we have mailing

00:42:49.870 --> 00:42:52.480
lists for Project Builder,
Carbon development, et cetera.

00:42:52.480 --> 00:42:56.240
Project Builder users is the one that's
specific to the Project Builder use.

00:42:56.240 --> 00:42:58.940
And, of course,
the development tools engineering

00:42:58.940 --> 00:43:00.470
feedback mailing address.

00:43:00.480 --> 00:43:02.720
I hope you've copied that
down now through the many

00:43:02.790 --> 00:43:04.310
sessions I've showed it to you.

00:43:04.340 --> 00:43:08.090
That talks to the internal people
at Apple in charge of the team.