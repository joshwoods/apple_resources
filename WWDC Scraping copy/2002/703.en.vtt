WEBVTT

00:00:04.430 --> 00:00:06.150
Good afternoon, everybody.

00:00:06.330 --> 00:00:09.700
I am James Dempsey.

00:00:09.700 --> 00:00:12.920
Some of you may recall that
I've been doing technical

00:00:12.920 --> 00:00:15.490
training for the past four years.

00:00:15.810 --> 00:00:21.100
In the about February timeframe,
I moved over to software engineering

00:00:21.190 --> 00:00:26.080
and since have written and
deployed WebObjects application.

00:00:26.220 --> 00:00:29.930
So I'm loving the technology.

00:00:30.050 --> 00:00:32.320
I wanted to ask a few questions
before we got started.

00:00:32.510 --> 00:00:38.060
The first thing I wanted to ask is how
many folks here are absolutely brand

00:00:38.060 --> 00:00:41.580
new to the Enterprise Objects Framework?

00:00:42.410 --> 00:00:44.000
So a good chunk of people.

00:00:44.000 --> 00:00:49.300
How many of you have done a
little bit but that's about it?

00:00:49.310 --> 00:00:51.340
Not too many.

00:00:51.340 --> 00:00:54.830
And how many of you have our old
hands at the EOF framework but you

00:00:54.830 --> 00:00:57.530
just come to every EOF session?

00:00:58.470 --> 00:01:01.870
Okay, and how many of you worked
on the WebObjects team?

00:01:02.030 --> 00:01:03.460
Okay, there we go.

00:01:03.510 --> 00:01:05.400
The rest of the crowd.

00:01:05.400 --> 00:01:06.900
All right,
so we got some brand new folks.

00:01:06.900 --> 00:01:11.640
We got some folks who may
know this stuff fairly well.

00:01:11.640 --> 00:01:16.530
The second thing I wanted to ask folks
is how many folks are looking at or

00:01:16.540 --> 00:01:22.070
interested in the Enterprise Objects
Framework because they're planning

00:01:22.260 --> 00:01:28.280
on doing some sort of HTML or
XML based WebObjects applications?

00:01:28.520 --> 00:01:30.330
So a good chunk of folks.

00:01:30.330 --> 00:01:37.450
And how many folks might be interested
in EOF because they heard about the

00:01:37.610 --> 00:01:43.390
redistribution license of EOF that allows
you to do desktop applications with EOF?

00:01:43.400 --> 00:01:45.340
So another smattering of hands.

00:01:45.430 --> 00:01:46.400
Good.

00:01:46.400 --> 00:01:48.400
We got you all covered for today.

00:01:48.400 --> 00:01:51.730
And how many of you saw the
episode of Friends where Joey goes

00:01:51.730 --> 00:01:56.400
for this acting job and then
he's in Charlton Heston's shop?

00:01:56.400 --> 00:01:56.840
I know.

00:01:56.840 --> 00:01:57.420
I'm serious.

00:01:57.540 --> 00:01:58.400
I want to know.

00:01:58.400 --> 00:01:59.400
In Charlton Heston's shower.

00:01:59.400 --> 00:02:01.800
Did anybody see that one?

00:02:02.680 --> 00:02:07.600
What was the... Well,
we'll get into it later.

00:02:07.610 --> 00:02:09.600
That was just a very funny episode.

00:02:09.600 --> 00:02:15.600
Anyway, what are we going to talk
about EOF related today?

00:02:16.080 --> 00:02:26.720
When I first started learning
EOF about four years ago now,

00:02:26.720 --> 00:02:26.720
what I found was that

00:02:27.080 --> 00:02:30.740
I came and saw a number of
demonstrations and I saw a lot of

00:02:30.740 --> 00:02:34.300
data flying out of databases and
onto screens and what have you.

00:02:34.390 --> 00:02:39.110
But I was never really sure
how that magic was happening.

00:02:39.120 --> 00:02:42.050
And that always bugged me.

00:02:42.120 --> 00:02:45.140
So I've spent the past four
years figuring that out.

00:02:45.220 --> 00:02:47.750
And I think I have it just
about worked out almost.

00:02:47.820 --> 00:02:51.380
What I want to go through
today is first let's talk a

00:02:51.490 --> 00:02:53.660
little bit about what EOF is.

00:02:53.720 --> 00:02:55.980
Like why might we use it?

00:02:56.670 --> 00:03:00.400
And then let's do a little bit of
practical here are the lines of code

00:03:00.400 --> 00:03:02.640
to do some basic database operations.

00:03:02.640 --> 00:03:07.260
Then let's look at how it
works in a desktop environment.

00:03:07.260 --> 00:03:13.700
And then finally let's just get a big
picture of what all the pieces are,

00:03:13.700 --> 00:03:16.660
why they exist,
so that we don't feel like we've

00:03:16.660 --> 00:03:20.510
been kind of Shanghai'd into
watching some demos without really

00:03:20.890 --> 00:03:22.570
getting an idea of what's going on.

00:03:22.600 --> 00:03:26.150
So that means an overview of the purpose.

00:03:26.300 --> 00:03:28.100
And benefits of EOF.

00:03:28.220 --> 00:03:32.100
That means an intro to
basic database operations.

00:03:32.730 --> 00:03:37.200
Working with persistent
objects or enterprise objects.

00:03:38.290 --> 00:03:42.390
A demo of desktop EOF applications.

00:03:42.390 --> 00:03:45.190
And a conceptual model of
what's going on in EOF.

00:03:45.200 --> 00:03:47.650
So let's start.

00:03:48.810 --> 00:03:53.490
Well actually, let's one more note the
technology framework.

00:03:53.710 --> 00:03:57.370
This is an introduction
primarily to two frameworks

00:03:57.370 --> 00:03:59.920
called EO Access and EO Control.

00:04:00.050 --> 00:04:04.150
These are the frameworks in the
Enterprise Objects Framework or

00:04:04.280 --> 00:04:07.320
EOF that deals with database access.

00:04:07.420 --> 00:04:12.710
The nice thing about that layer,
that database layer of EOF,

00:04:12.710 --> 00:04:17.480
is that it allows us,
using the same database layer,

00:04:17.550 --> 00:04:21.510
to build HTML and XML based
WebObjects applications,

00:04:21.660 --> 00:04:26.550
Java client applications,
or Cocoa EOF applications.

00:04:27.200 --> 00:06:31.700
[Transcript missing]

00:06:31.920 --> 00:06:37.750
It's based on this natural mapping
between objects and relational databases.

00:06:38.490 --> 00:06:43.850
It abstracts those database operations
and it preserves the object-oriented

00:06:43.850 --> 00:06:45.750
nature of those things that you get.

00:06:45.890 --> 00:06:50.080
When you get something into
EOF that used to be in the database,

00:06:50.150 --> 00:06:52.400
you can treat it like an object.

00:06:52.530 --> 00:06:57.400
It's sophisticated, it's mature,
and it's an object-oriented architecture.

00:06:57.400 --> 00:07:00.350
Now, we talk about the
Enterprise Objects Framework.

00:07:00.440 --> 00:07:03.400
What is an Enterprise Object anyway?

00:07:03.670 --> 00:07:07.400
The idea here is it
implements an interface.

00:07:07.400 --> 00:07:12.390
It's a java.lang.object that implements
a particular interface called the

00:07:12.390 --> 00:07:17.340
EO Enterprise Object Interface,
which enables it to operate

00:07:17.340 --> 00:07:21.210
with the framework and gives
it built-in persistence.

00:07:22.970 --> 00:07:27.220
So this mapping is very sweet
between the database and objects.

00:07:27.220 --> 00:07:30.530
We got entities,
so we can map a table in the database,

00:07:30.550 --> 00:07:32.490
a type of thing to a class.

00:07:32.660 --> 00:07:36.180
We can map an attribute,
so some instance variable

00:07:36.180 --> 00:07:39.950
or property in the object,
we can map that very nicely

00:07:39.950 --> 00:07:41.650
to a column in the table.

00:07:42.500 --> 00:07:45.290
But it extends even further

00:07:45.760 --> 00:07:49.940
Although I can't because
of the direction.

00:07:50.000 --> 00:07:51.440
To relationships.

00:07:51.580 --> 00:07:54.790
We know in an object model it's
a very common thing to just

00:07:54.790 --> 00:07:59.920
have an item that refers to some
other object using composition.

00:07:59.970 --> 00:08:04.700
And it's just a reference in memory,
a unique pointer.

00:08:05.190 --> 00:08:08.490
In a database,
the same thing is handled via a join,

00:08:08.500 --> 00:08:13.730
just these matching primary key
to foreign key combinations.

00:08:13.870 --> 00:08:17.140
Well, again,
the Enterprise Objects Framework

00:08:17.140 --> 00:08:19.400
is able to make that matching.

00:08:19.510 --> 00:08:22.830
Now,
how many folks have been in at least one

00:08:22.830 --> 00:08:26.280
WebObjects-related session this week?

00:08:26.570 --> 00:08:31.930
You can tell me en masse
on the count of three,

00:08:31.930 --> 00:08:31.930
most likely,

00:08:32.220 --> 00:08:38.560
What tool we use to do a mapping
between a database and an object model.

00:08:38.560 --> 00:08:40.850
So on the count of three we're going
to give it a try and then if you

00:08:40.850 --> 00:08:42.900
don't get it I'll give you a hint.

00:08:42.900 --> 00:08:45.130
So on the count of three
let's give it a try.

00:08:45.730 --> 00:08:48.480
One, two, three.

00:08:49.390 --> 00:08:50.720
Okay, we got the right answer.

00:08:50.720 --> 00:08:54.630
I don't know if it was from the folks who
just come to any EOF session that exists,

00:08:54.630 --> 00:08:57.840
but we're going to try to get it
louder because it's after lunch,

00:08:57.840 --> 00:09:01.360
it's mid-afternoon,
it's kind of like almost mid-week,

00:09:01.450 --> 00:09:03.980
and I think, you know,
we just need to shout

00:09:04.170 --> 00:09:05.550
out at me on the stage.

00:09:05.560 --> 00:09:06.380
So let's try this again.

00:09:06.380 --> 00:09:08.760
One, two, three.

00:09:11.770 --> 00:09:16.950
And for those of you who didn't get that,
it is EOModeler,

00:09:16.950 --> 00:09:22.700
which defines this mapping between rows
in the database and objects in the model.

00:09:22.700 --> 00:09:27.690
The point of EOF in a very
abstract sense is to get rows,

00:09:27.870 --> 00:09:32.700
turn them into EOs,
and then get them back again.

00:09:33.700 --> 00:09:36.860
And finally, what we'll be doing for
the rest of the day,

00:09:36.860 --> 00:09:40.860
or the rest of this session,
is talking a bit about this

00:09:40.860 --> 00:09:42.700
process and how it works.

00:09:46.870 --> 00:09:49.380
I won't be labeled the model file.

00:09:49.670 --> 00:09:52.780
Now, besides this mapping,
what are some of the other

00:09:52.780 --> 00:09:56.520
advantages or benefits of using EOF?

00:09:56.780 --> 00:10:05.590
One of the largest is this idea of
having multiple views into the same data.

00:10:05.630 --> 00:10:11.690
So this idea that we can have a
HTML application that's running

00:10:11.820 --> 00:10:15.170
publicly that people are hitting,
but on the back end we don't

00:10:15.170 --> 00:10:19.520
want to administer the database
using an HTML front end possibly.

00:10:19.520 --> 00:10:23.140
We might want to build a
Cocoa application or a Java client

00:10:23.140 --> 00:10:27.240
application that's a more
desktop interactive experience for

00:10:27.630 --> 00:10:29.560
interacting with that database.

00:10:29.560 --> 00:10:36.620
Or it's possible we might want to build
an HTML front end that people can visit,

00:10:36.640 --> 00:10:41.470
but then also provide the
same data as a web service via

00:10:41.470 --> 00:10:44.700
XML to a number of individuals.

00:10:44.700 --> 00:10:49.100
And we can use EOF, the same model file.

00:10:49.100 --> 00:10:54.570
. We can use the same business logic
and build the view on top of that.

00:10:57.830 --> 00:11:04.290
The nice thing about each of these is
that they're all EOF-based applications.

00:11:06.070 --> 00:11:10.240
Now the logic's written in standard Java.

00:11:10.300 --> 00:11:16.100
It's not written in a particular
vendor's database language,

00:11:16.100 --> 00:11:19.590
which may be procedural,
which may lock you in because

00:11:19.590 --> 00:11:25.070
you don't want to move that logic
from one database to another.

00:11:25.420 --> 00:11:27.270
So it's in standard language.

00:11:27.350 --> 00:11:30.970
It distributes the processing
as well by putting our business

00:11:31.370 --> 00:11:32.900
logic in these enterprise objects.

00:11:32.920 --> 00:11:38.250
We're not tying up the database doing
a lot of business logic calculations.

00:11:38.250 --> 00:11:41.700
It's doing what databases
were initially designed for,

00:11:41.700 --> 00:11:46.570
which is saving and retrieving
large amounts of information very,

00:11:46.600 --> 00:11:47.890
very quickly.

00:11:50.390 --> 00:11:55.410
Now, when I started using EOF,
I didn't know anything

00:11:55.580 --> 00:11:58.170
about SQL whatsoever.

00:11:58.560 --> 00:12:02.650
The nice thing about EOF,
if you are a programmer who's saying,

00:12:02.650 --> 00:12:06.260
well, I've got to do some database stuff,
is that it dynamically

00:12:06.260 --> 00:12:08.390
generates the SQL for you.

00:12:08.400 --> 00:12:12.970
You define the model file,
you programmatically ask it

00:12:12.970 --> 00:12:17.960
for things that you want in a
very object-oriented nature,

00:12:17.960 --> 00:12:21.280
and all of that SQL gets
dynamically generated for you.

00:12:21.280 --> 00:12:23.340
To me, that's a big win.

00:12:23.970 --> 00:12:27.280
On the flip side,
for the person who loves writing SQL,

00:12:27.280 --> 00:12:33.480
EOF also allows you full access
to those database features.

00:12:33.480 --> 00:12:39.580
You can send any kind of raw SQL to
the database using the frameworks.

00:12:39.580 --> 00:12:43.670
You can also execute any stored
procedures you might have in there.

00:12:47.280 --> 00:12:51.410
EOF also allows you to connect
to multiple data sources.

00:12:51.410 --> 00:12:55.070
We'll talk a little bit
about this a little later on.

00:12:56.530 --> 00:13:01.220
And one last thing that you
get with EOF is a separate

00:13:01.220 --> 00:13:06.080
scratch pad for every user,
a little thing called an editing context.

00:13:06.230 --> 00:13:12.070
The idea here is that when that
row becomes an Enterprise Object,

00:13:13.080 --> 00:13:19.390
Every user has their own editing context,
so they have their own little scratch

00:13:19.410 --> 00:13:21.510
version of that row in the database.

00:13:21.560 --> 00:13:24.870
They can make changes to it, add things,
delete things,

00:13:24.870 --> 00:13:30.260
and it's not bothering anybody else
until that user saves the changes.

00:13:30.260 --> 00:13:35.430
So each of those editing contexts
is like a little miniature alternate

00:13:35.560 --> 00:13:40.180
universe where the row comes in and
is able to be played with a little bit

00:13:40.480 --> 00:13:42.540
before those changes hit the database.

00:13:43.000 --> 00:13:48.660
Now you'll notice that my
drawing is a little lopsided.

00:13:48.660 --> 00:13:52.390
That's to indicate the fact
that typically when you have

00:13:52.440 --> 00:13:56.560
a desktop EOF application,
you're often using one

00:13:56.560 --> 00:13:59.220
editing context per user.

00:13:59.220 --> 00:14:02.530
And so that application may
have one editing context.

00:14:02.600 --> 00:14:08.040
When you're using a networked
tag-based XML or HTML application,

00:14:08.040 --> 00:14:12.120
every session has a
default editing context.

00:14:12.310 --> 00:14:17.830
So every user logging in will typically
have their own little editing space.

00:14:19.340 --> 00:14:20.620
All right, let's mosey on.

00:14:20.710 --> 00:14:24.250
Let's talk about the
basic EOF operations.

00:14:24.920 --> 00:14:28.260
Fetching, inserting, updating, deleting,
saving and reverting.

00:14:28.400 --> 00:14:32.640
Essentially each of these can be done,
especially when you're

00:14:32.750 --> 00:14:35.900
just starting out in EOF,
with a line of code.

00:14:36.030 --> 00:14:37.780
And we're going to walk
through those lines of code.

00:14:37.780 --> 00:14:40.870
First we're going to talk a
little more about this guy,

00:14:41.100 --> 00:14:42.900
the editing context.

00:14:43.120 --> 00:14:50.900
The editing context is the key class when
you start using EOF programmatically.

00:14:51.120 --> 00:14:52.900
It's the go-to guy.

00:14:52.900 --> 00:14:54.900
If you want some objects
out of the database,

00:14:54.900 --> 00:14:56.850
you ask the editing context.

00:14:56.960 --> 00:14:59.730
If you want to add some things,
delete things,

00:14:59.730 --> 00:15:01.890
you talk to the editing context.

00:15:02.060 --> 00:15:04.830
You want to save the changes,
you want to throw away the changes.

00:15:05.120 --> 00:15:08.900
You want to undo the changes,
you talk to the editing context.

00:15:08.900 --> 00:15:13.340
So, who do you talk to?

00:15:14.480 --> 00:15:15.240
Oh, that's pathetic.

00:15:15.240 --> 00:15:16.140
All right.

00:15:16.140 --> 00:15:18.260
Let's try it a little louder.

00:15:18.260 --> 00:15:21.310
Who do you talk to?

00:15:22.320 --> 00:15:24.740
Okay, that's still pathetic.

00:15:24.740 --> 00:15:27.890
Who do you talk to?

00:15:30.130 --> 00:15:32.100
All right.

00:15:32.340 --> 00:15:33.390
Good gracious.

00:15:33.530 --> 00:15:36.100
So how do we get one of these things?

00:15:36.100 --> 00:15:40.750
Well, the first thing that we do is
if we're writing a WebObjects

00:15:40.750 --> 00:15:45.560
kind of tag-based application,
we just ask the session for its default

00:15:45.560 --> 00:15:48.080
editing context and it gives us one.

00:15:48.090 --> 00:15:49.850
Not a lot of work to be done there.

00:15:50.680 --> 00:15:55.770
If we're doing a desktop app,
the editing context lives as an object in

00:15:55.770 --> 00:15:58.690
your nib file so we can get access to it.

00:15:58.800 --> 00:16:03.600
And any time programmatically you may
feel like creating an editing context,

00:16:04.000 --> 00:16:09.710
you can just create a new one very
easily with a no-argument constructor.

00:16:11.340 --> 00:16:13.930
Now,
a note with multi-threaded applications,

00:16:13.930 --> 00:16:16.680
when doing any kind of
concurrent programming,

00:16:16.680 --> 00:16:20.170
there are always shared resources
that need to be locked and unlocked,

00:16:20.250 --> 00:16:23.280
the editing context being one of those.

00:16:23.360 --> 00:16:26.760
The default editing context
is automatically locked

00:16:26.760 --> 00:16:28.320
and unlocked for you.

00:16:29.140 --> 00:16:33.300
If you make your own or if you're
using a nib-based editing context,

00:16:33.360 --> 00:16:39.160
you'll want to, and you're multi-threaded
in that nib-based app,

00:16:39.230 --> 00:16:42.730
you'll want to lock the editing
context before you use it

00:16:42.730 --> 00:16:45.240
and unlock it afterwards.

00:16:48.200 --> 00:16:51.860
So how do we get stuff
out of the database?

00:16:51.890 --> 00:16:54.600
As you go through,
read the WebObjects documentation,

00:16:54.600 --> 00:16:57.480
go down to the lab,
read articles on Stepwise,

00:16:57.650 --> 00:17:02.170
talk to your WebObjects-using friends,
there are many different

00:17:02.170 --> 00:17:03.540
ways you can fetch.

00:17:03.590 --> 00:17:09.240
We're going to talk about one here,
but as you kind of get into various ways,

00:17:09.270 --> 00:17:11.330
the basics are pretty much the same here.

00:17:11.330 --> 00:17:14.420
You create this thing called
a fetch specification,

00:17:14.560 --> 00:17:20.900
which is an object-oriented definition
of what you want from the database.

00:17:20.930 --> 00:17:23.560
Then you've got to get
hold of an editing context.

00:17:23.580 --> 00:17:26.960
Then you tell the editing context, "Hey,
I want you to fetch this," and

00:17:27.000 --> 00:17:29.840
you hand it the fetch spec.

00:17:29.860 --> 00:17:32.640
Then you get back an array of objects.

00:17:32.660 --> 00:17:37.560
We're going to do it
the most codeless way,

00:17:37.560 --> 00:17:40.890
or one of the most codeless ways,
that still requires a line of code.

00:17:41.410 --> 00:17:48.120
We're going to, in the model file,
create a graphical fetch specification.

00:17:48.320 --> 00:17:51.450
We'll see this in the demo,
but the idea here is

00:17:51.490 --> 00:17:56.300
I can define what I want,
what sorting I want it to come back as,

00:17:56.310 --> 00:18:03.140
as well as any criteria in terms of what
specifically I want from the database.

00:18:04.090 --> 00:18:06.380
Once I have that,

00:18:07.960 --> 00:18:12.880
I can use a line of code that will,
in essence, pull that fetch specification

00:18:12.980 --> 00:18:14.940
out of the model file.

00:18:15.000 --> 00:18:20.040
It will also take an
NSDictionary of bindings,

00:18:20.040 --> 00:18:24.070
or key value pairs,
and kind of merge it with that fetch

00:18:24.170 --> 00:18:28.450
specification so we can fill in
some variables in there to capture

00:18:28.450 --> 00:18:30.300
anything the user has typed in.

00:18:30.350 --> 00:18:36.570
You know, search for a house with two
bedrooms and three bathrooms.

00:18:36.670 --> 00:18:41.390
Take that FET specification
and ask the editing context,

00:18:41.390 --> 00:18:44.730
"Hey,
give me back those results." All of this

00:18:44.830 --> 00:18:51.190
is done in one lengthily named method,
Objects with FET specification

00:18:51.190 --> 00:18:52.280
and bindings.

00:18:52.330 --> 00:18:57.180
It's a utility method of a very
handy class called EOUtilities,

00:18:57.330 --> 00:19:03.920
which provides a lot of convenience
one-liners for common EOF operations.

00:19:04.090 --> 00:19:08.050
In this case,
we get a hold of our default editing

00:19:08.230 --> 00:19:12.870
context and then we ask EO Utilities
to give us back that objects with

00:19:13.010 --> 00:19:14.990
fetch specification and bindings.

00:19:15.110 --> 00:19:19.380
We need to tell it the editing context,
what kind of thing or what entity

00:19:19.380 --> 00:19:22.750
of thing we're looking for,
the name of the fetch spec,

00:19:22.890 --> 00:19:25.750
and that dictionary of bindings.

00:19:26.690 --> 00:19:31.160
Now to create and insert a new object,
it's a very simple method,

00:19:31.160 --> 00:19:33.650
one liner EO utility.

00:19:33.650 --> 00:19:35.320
Create and insert instance.

00:19:35.490 --> 00:19:38.400
In this case,
this will do two things for you.

00:19:38.400 --> 00:19:42.890
It will make, in this case,
a new employee enterprise object and

00:19:42.890 --> 00:19:48.550
it will tell the editing context,
insert this into the database.

00:19:50.800 --> 00:19:51.940
Deleting is even easier.

00:19:51.940 --> 00:19:54.760
You just tell the editing context,
get rid of this sucker.

00:19:58.690 --> 00:20:03.660
Editing,
we don't even write any explicit code.

00:20:03.660 --> 00:20:07.140
The editing context is smart
enough that it knows everything

00:20:07.230 --> 00:20:11.220
that's been fetched into it,
and it knows everything

00:20:11.220 --> 00:20:12.460
you've inserted into it.

00:20:12.560 --> 00:20:16.140
And so as you make changes
to those Enterprise Objects,

00:20:16.140 --> 00:20:19.870
it's automatically watching
or observing those changes,

00:20:19.970 --> 00:20:22.920
so it knows what objects
have been edited.

00:20:22.920 --> 00:20:26.280
And so to make changes,
all you do is treat that

00:20:26.310 --> 00:20:29.020
Enterprise Object as an object.

00:20:29.020 --> 00:20:32.820
You use accessor methods,
or you may use key value coding,

00:20:33.030 --> 00:20:35.970
as has been mentioned a number of times.

00:20:38.920 --> 00:20:42.800
Once you've inserted and deleted
and made a bunch of changes,

00:20:42.800 --> 00:20:44.280
you basically have two choices.

00:20:44.280 --> 00:20:48.940
You can either tell that editing context,
hey, I want those changes to actually

00:20:48.940 --> 00:20:50.590
be reflected in the database.

00:20:50.660 --> 00:20:52.100
Let's save changes.

00:20:52.100 --> 00:20:56.500
Or you can tell the editing context,
you know, this was a bad idea.

00:20:56.500 --> 00:20:58.210
I'm going to chuck those changes.

00:20:58.220 --> 00:21:03.550
So the line to do that,
editing context save changes.

00:21:03.580 --> 00:21:05.690
Editing context revert.

00:21:06.120 --> 00:21:10.940
We'll get rid of all pending changes
and we'll leave the database untouched.

00:21:15.160 --> 00:21:21.830
Now to take us through a couple of these
points in a WebObjects application,

00:21:21.850 --> 00:21:27.770
I'd like to introduce Genevieve,
who is going to walk us through that.

00:21:38.150 --> 00:21:45.100
My mouth is dry because I'm nervous.

00:21:45.100 --> 00:21:47.340
So let's take a look at some
of the things that James has

00:21:47.340 --> 00:21:48.800
been telling us about.

00:21:48.870 --> 00:21:52.950
And to do that we're going to use a
little WebObjects HTML application

00:21:53.370 --> 00:21:57.030
that looks at a listing,
looks at a database of real estate

00:21:57.030 --> 00:22:00.680
listings and let us choose the ones
that we want to display based on some

00:22:00.760 --> 00:22:03.160
input that we give it in the browser.

00:22:03.240 --> 00:22:06.130
We can enter the number of bedrooms.

00:22:08.150 --> 00:22:14.680
And we can further restrict the search by
entering a minimum number of bathrooms,

00:22:14.680 --> 00:22:16.830
perhaps.

00:22:18.460 --> 00:22:21.830
It's a very simple application
that talks to the database.

00:22:21.900 --> 00:22:24.580
What does it take to actually
code something like this?

00:22:24.590 --> 00:22:27.670
We can take a look at
it in Project Builder.

00:22:30.590 --> 00:22:34.210
Since, as James told us,
the EO model is the central piece that

00:22:34.210 --> 00:22:37.930
kind of holds everything together,
it ties together the application

00:22:37.930 --> 00:22:40.660
on one side and the relational
database on the other side,

00:22:40.730 --> 00:22:43.920
so let's start by taking
a look at the EO model.

00:22:43.920 --> 00:22:47.280
That's one of our project
builder resources.

00:22:47.300 --> 00:22:51.500
This is a stripped down version of the
real estate model that you'll see in a

00:22:51.500 --> 00:22:53.310
lot of the WebObjects demos this week.

00:22:53.310 --> 00:22:57.140
I made it a little smaller so it's
not quite so overwhelming to look at.

00:22:57.150 --> 00:22:59.490
And as you've probably heard
by now if you've been at

00:22:59.490 --> 00:23:03.020
any of the earlier sessions,
this is the mapping between

00:23:03.020 --> 00:23:06.880
the relational database and
the objects in the application.

00:23:06.890 --> 00:23:09.640
These are our entities
in the application.

00:23:09.640 --> 00:23:11.820
Here's the corresponding database tables.

00:23:11.940 --> 00:23:15.650
And here we can see the class in the
application that these correspond to.

00:23:16.000 --> 00:23:21.470
All of our entities are going to
be classes that are subclasses of,

00:23:21.470 --> 00:23:25.820
or implementations of,
EO Enterprise Object Interface.

00:23:25.840 --> 00:23:27.140
Have you ever noticed
how redundant that is?

00:23:27.340 --> 00:23:30.180
EO Enterprise Object.

00:23:30.180 --> 00:23:31.460
EO is Enterprise Object.

00:23:31.460 --> 00:23:34.180
The Enterprise Object,
Enterprise Object Interface.

00:23:34.180 --> 00:23:38.060
Anyway, we have a default implementation
of that called EO Generic Record,

00:23:38.060 --> 00:23:41.900
which is sufficient for a lot of things
that you want to pull from the database.

00:23:41.900 --> 00:23:45.270
If your class happens to
need some business logic,

00:23:45.270 --> 00:23:47.600
you would make a custom subclass of that.

00:23:47.600 --> 00:23:51.420
We can take a look at our listing entity,
get kind of a closer look.

00:23:51.440 --> 00:23:53.550
This is one of the main
entities in this model,

00:23:53.550 --> 00:23:54.660
as you might expect.

00:23:54.670 --> 00:23:56.520
Here are all the
attributes of the entity.

00:23:56.520 --> 00:24:00.800
And attributes correspond to
the column in the database.

00:24:00.820 --> 00:24:06.840
Here we can see the Java type and the
database type of all these attributes.

00:24:06.910 --> 00:24:11.260
And in the lower part of the window here,
we can see any relationships

00:24:11.260 --> 00:24:12.450
that this entity might have.

00:24:12.450 --> 00:24:14.620
In this case,
it has two one relationships to the

00:24:14.620 --> 00:24:17.000
address entity and agent entity.

00:24:17.010 --> 00:24:21.200
And we'll hear more about relationships
later in the presentation.

00:24:21.200 --> 00:24:22.590
Let's see.

00:24:22.800 --> 00:24:24.880
So that's our EO model.

00:24:24.880 --> 00:24:27.720
And let's see if we
have... any code anywhere.

00:24:27.930 --> 00:24:30.360
Well, we have one WoE component in here.

00:24:30.360 --> 00:24:32.060
So let's take a look at that.

00:24:32.070 --> 00:24:36.300
We'll look at it in WebObjects Builder,
which you saw in the tools demo,

00:24:36.330 --> 00:24:41.920
which is the tool that we use to
graphically build up an HTML interface,

00:24:41.920 --> 00:24:44.970
which is actually a lot more
fun than writing HTML by hand.

00:24:45.070 --> 00:24:47.640
And you can see here we have
a couple of text input fields.

00:24:47.730 --> 00:24:49.860
That was our bedrooms
and bathrooms field.

00:24:49.870 --> 00:24:53.960
We have a submit button that pushes
values from the application or from the

00:24:53.960 --> 00:24:54.130
interface into the application logic.

00:24:54.140 --> 00:24:54.270
And we have a lot of text input fields.

00:24:54.270 --> 00:24:54.560
That was our bedrooms
and bathrooms field.

00:24:54.560 --> 00:24:54.580
We have a submit button that pushes
values from the application or from the

00:24:54.580 --> 00:24:54.800
interface into the application logic.

00:24:54.820 --> 00:24:55.190
And we have a submit button that pushes
values from the application or from the

00:24:55.230 --> 00:24:55.470
interface into the application logic.

00:24:55.530 --> 00:24:56.120
And we have a submit button that pushes
values from the application or from the

00:24:56.120 --> 00:24:56.520
interface into the application logic.

00:24:56.820 --> 00:25:00.520
Here's a table that's going to
display all of our search results.

00:25:00.540 --> 00:25:03.080
And if we look at this table,
we can see we have some dynamically

00:25:03.080 --> 00:25:05.020
calculated strings in here.

00:25:05.030 --> 00:25:06.960
We call these things WoE strings.

00:25:06.980 --> 00:25:08.840
And they're bound to
something called listing.

00:25:09.050 --> 00:25:10.800
That sounds a little familiar.

00:25:11.090 --> 00:25:12.900
Let's take a look at what that is.

00:25:12.910 --> 00:25:14.990
And that's our old pal,
the listing entity that we were

00:25:15.090 --> 00:25:16.900
just looking at in EOModeler.

00:25:16.910 --> 00:25:19.020
You can see all of its attributes here.

00:25:19.040 --> 00:25:23.760
And you can see here this particular
string is bound to the listing number

00:25:23.760 --> 00:25:25.920
attribute of the listing entity.

00:25:26.260 --> 00:25:27.370
This is bound to bedrooms.

00:25:27.480 --> 00:25:28.980
This is bound to bathrooms.

00:25:29.060 --> 00:25:32.100
So you can start to see how
all this stuff ties together.

00:25:32.110 --> 00:25:34.580
But what about our text input fields?

00:25:34.600 --> 00:25:38.120
They're bound to something
called fetch spec bindings.

00:25:38.150 --> 00:25:41.230
Well, what's a fetch spec?

00:25:41.260 --> 00:25:43.710
Well,
if you were here last year and you saw

00:25:43.820 --> 00:25:49.940
James' intro to EOF demo or presentation,
then you know that a fetch spec

00:25:49.950 --> 00:25:55.960
lets you stipulate the objects
you want to fetch and manipulate.

00:26:02.700 --> 00:26:13.000
[Transcript missing]

00:26:23.200 --> 00:26:27.280
Okay, where am I?

00:26:27.280 --> 00:26:27.940
I'm lost.

00:26:27.990 --> 00:26:30.200
I think you're fetch-specking.

00:26:30.200 --> 00:26:30.990
Thank you.

00:26:31.130 --> 00:26:32.860
I got all excited here.

00:26:32.860 --> 00:26:37.210
So we've seen the interface,
and we've seen the EL model.

00:26:37.210 --> 00:26:39.890
Surely there has to be some
code in here somewhere.

00:26:40.220 --> 00:26:42.400
Well, what's this choose listings thing?

00:26:42.400 --> 00:26:44.570
That sounds like something
that we might want to do.

00:26:44.860 --> 00:26:46.970
This is an action,
which means that it's bound to a

00:26:46.970 --> 00:26:50.110
method somewhere in our application,
somewhere in the component.

00:26:50.570 --> 00:26:54.490
And we can check,
we can select view source down here,

00:26:54.490 --> 00:26:57.500
and that will put us
back in the source code.

00:26:57.630 --> 00:27:02.880
Make this a little nicer to look at.

00:27:02.880 --> 00:27:04.280
And there, we can see that we've got a

00:27:07.720 --> 00:27:09.720
That's all of our database code.

00:27:09.720 --> 00:27:12.840
That's all the code that we had to
write in order to get an application

00:27:12.840 --> 00:27:15.700
that knows how to find the database,
connect to it,

00:27:15.700 --> 00:27:19.760
and fetch things from it based
on some specifications that

00:27:19.760 --> 00:27:21.190
we've given it in the UI.

00:27:21.330 --> 00:27:24.600
James wasn't kidding about those two
lines of code that we needed to do this.

00:27:24.730 --> 00:27:30.740
You can see here that in objects with
fetch specifications and bindings,

00:27:30.740 --> 00:27:35.840
we're taking the default editing context,
which we've pulled from the session,

00:27:35.960 --> 00:27:41.550
and into it we're going to fetch the
listing entity using the search listings

00:27:42.130 --> 00:27:47.270
fetch specification and pushing values
from our fetch spec bindings that we

00:27:47.270 --> 00:27:50.320
saw in the HTML interface into that.

00:27:50.500 --> 00:27:55.030
One of the nice things about EOF is
that we give you API that allows you

00:27:55.030 --> 00:27:58.560
to discover EO models at runtime.

00:27:58.560 --> 00:28:02.580
You can discover the entities that they
contain and those entities' attributes,

00:28:02.690 --> 00:28:05.920
relationships,
and other things that they don't have.

00:28:05.920 --> 00:28:07.920
You can also use that
to store procedures,

00:28:07.920 --> 00:28:10.020
primary keys, fetch specifications,
and pass those objects into

00:28:10.020 --> 00:28:12.960
methods like objects with fetch
specification and bindings.

00:28:13.060 --> 00:28:17.310
That gives us a great deal of
flexibility and gives you a great deal

00:28:17.420 --> 00:28:19.980
of power with really a minimum of code.

00:28:22.180 --> 00:28:25.830
So I think that shows us the
basic code that we wanted to have.

00:28:25.830 --> 00:28:26.920
And back to you, James.

00:28:27.230 --> 00:28:32.600
Well, you know Genevieve, I was thinking,
wouldn't it be nice if people could

00:28:32.600 --> 00:28:37.100
also search for a range of prices
when they're looking up a property?

00:28:37.100 --> 00:28:40.090
Could you just whip that up for me?

00:28:40.180 --> 00:28:41.810
James?

00:28:42.930 --> 00:28:47.200
Are you giving me a last
minute application spec change?

00:28:47.290 --> 00:28:50.250
Not only am I giving you a last
minute application spec change,

00:28:50.250 --> 00:28:55.720
but I'm doing so in an obviously
stage inscripted manner.

00:28:56.200 --> 00:28:57.200
James!

00:28:57.200 --> 00:29:00.090
We're in front of a large,
sophisticated audience!

00:29:00.190 --> 00:29:05.220
Just do it like we practiced!

00:29:05.220 --> 00:29:06.370
Okay.

00:29:08.040 --> 00:29:12.440
Well, I guess that means that we
better add some fields to the UI.

00:29:12.530 --> 00:29:13.840
So, what did you want?

00:29:13.880 --> 00:29:15.400
A range of prices?

00:29:15.420 --> 00:29:18.000
Yeah.

00:29:18.110 --> 00:29:19.490
Oops.

00:29:19.620 --> 00:29:21.140
Cannot type.

00:29:25.100 --> 00:29:31.620
Okay, we'll put a text field in here and
we'll put another text field in here.

00:29:32.770 --> 00:29:34.460
And let's see, what do we do?

00:29:34.770 --> 00:29:40.760
We'll bind these text fields
to our fetchback bindings.

00:29:42.060 --> 00:29:49.000
and I'm going to bind the value
to FetchPickBinding's min price.

00:29:49.000 --> 00:29:56.710
And we'll give that a nice number format
so it doesn't look hideous on screen.

00:29:57.210 --> 00:30:02.950
We'll select our second text
field and bind it to a max price.

00:30:07.500 --> 00:30:09.870
As she's doing that,
what she's binding it up

00:30:09.870 --> 00:30:13.100
to is a mutable dictionary,
which is just a hash table.

00:30:13.100 --> 00:30:16.680
It's just a mutable place where
we can put key value pairs.

00:30:16.710 --> 00:30:20.930
And because of key value coding,
and because a dictionary's whole job

00:30:20.990 --> 00:30:25.970
in life is to store keys and values,
she's able to hook those text fields

00:30:25.990 --> 00:30:31.410
up so that they are pushing keys
directly into that dictionary without

00:30:31.410 --> 00:30:33.620
ever having to change her code.

00:30:33.640 --> 00:30:37.500
That little dictionary is serving
as an infinitely expandable

00:30:37.500 --> 00:30:41.660
place where you can stick as
many keys and values as you want.

00:30:41.690 --> 00:30:44.980
And we're taking advantage
of that right here.

00:30:45.020 --> 00:30:49.440
And so now we need to hook up,
we need to add another

00:30:49.760 --> 00:30:52.230
column to our results table,
our display table,

00:30:52.230 --> 00:30:58.370
and we're going to hook that
up to the asking price in our

00:30:59.900 --> 00:31:05.910
and I'm going to go ahead
and start the session.

00:31:14.240 --> 00:31:16.560
Okay, that takes care of the interface.

00:31:16.830 --> 00:31:18.980
We're going to have to change
our fetch specification.

00:31:19.090 --> 00:31:21.510
I forgot to show you this earlier.

00:31:22.510 --> 00:31:25.240
Our listing entity has a fetch
specification associated with

00:31:25.240 --> 00:31:27.060
it called Search Listings.

00:31:27.090 --> 00:31:29.770
And you can build up fetch
specifications in the code,

00:31:29.780 --> 00:31:32.420
but you can also build them
up graphically in EO Modeler.

00:31:32.550 --> 00:31:35.380
So we'll click on this and it shows
us the graphical fetch spec builder.

00:31:35.460 --> 00:31:37.020
You saw a slide of this earlier.

00:31:37.130 --> 00:31:42.390
And right now we're currently qualifying
our select statement on the number of

00:31:42.390 --> 00:31:44.120
bedrooms and the number of bathrooms.

00:31:44.140 --> 00:31:46.280
But we need to add to it.

00:31:46.360 --> 00:31:50.590
So we're gonna add asking price,

00:31:50.890 --> 00:31:56.680
Greater than or equal to
that variable min price.

00:31:59.830 --> 00:32:07.120
In our fetch spec bindings and
we need a max price less than

00:32:07.120 --> 00:32:11.280
or equal to our max price.

00:32:15.200 --> 00:32:17.590
Save that.

00:32:17.590 --> 00:32:21.910
And we will recompile to pick
up the changes to the EO model.

00:32:30.700 --> 00:32:33.870
Notice that we didn't have to
write any additional EOF code.

00:32:33.870 --> 00:32:35.400
We didn't have to change any EOF code.

00:32:35.400 --> 00:32:37.100
We didn't have to write any more SQL.

00:32:37.230 --> 00:32:38.760
And here we have our application.

00:32:38.850 --> 00:32:40.860
We've got our additional input fields.

00:32:40.970 --> 00:32:44.350
We've got our additional display field.

00:32:45.010 --> 00:32:51.290
and I will be your host for this session.

00:32:59.000 --> 00:33:11.900
[Transcript missing]

00:33:12.300 --> 00:35:19.400
[Transcript missing]

00:35:21.330 --> 00:35:27.040
You don't need to sit and figure out,
well, the primary key of this maps

00:35:27.200 --> 00:35:30.320
to the foreign key of that,
because that's something

00:35:30.320 --> 00:35:33.010
that you determine or you
set up in the model file,

00:35:33.070 --> 00:35:35.490
and EOF does it all for you.

00:35:35.590 --> 00:35:39.160
The other thing we don't need to do
with a relationship is if I have an

00:35:39.160 --> 00:35:44.580
employee that I've fetched in and I want
to get to what department they're in,

00:35:44.580 --> 00:35:46.960
I don't have to write more fetching code.

00:35:46.960 --> 00:35:50.520
I just ask the employee, hey,
give me your department,

00:35:50.520 --> 00:35:54.600
and that department object,
if it isn't in the application yet,

00:35:54.600 --> 00:35:59.940
EOF is going to hit the database,
grab the correct row, and instantiate a

00:35:59.940 --> 00:36:03.820
department object for me.

00:36:04.280 --> 00:36:07.170
The fact that it might
not be there when I ask,

00:36:07.180 --> 00:36:11.560
but it's definitely going to be
there immediately thereafter,

00:36:11.670 --> 00:36:16.990
that is called faulting
in an object in EOF.

00:36:18.730 --> 00:36:21.080
This means that let's
say I have a project,

00:36:21.080 --> 00:36:24.210
has one employee working on it,
keep things simple,

00:36:24.210 --> 00:36:28.110
who has an email address and
that email address is bob@b.com,

00:36:28.180 --> 00:36:30.520
which I don't even think
is a legal domain name.

00:36:30.540 --> 00:36:33.800
But boy does it fit on the slide.

00:36:34.230 --> 00:36:36.040
So we have this example.

00:36:36.120 --> 00:36:40.670
And if you're writing a bunch of SQL,
right, you may need to go and write some

00:36:40.670 --> 00:36:45.480
SQL statements and get the right
things and make sure that the foreign

00:36:45.600 --> 00:36:48.400
keys and the other keys match up.

00:36:48.480 --> 00:36:52.330
Or I might use a key path in WebObjects.

00:36:53.020 --> 00:36:57.790
I prefer using a key path in
WebObjects because even though you

00:36:57.790 --> 00:37:04.460
can mistype a key path in WebObjects,
there's a heck of a lot less to

00:37:05.170 --> 00:37:08.990
troubleshoot than all that SQL.

00:37:10.180 --> 00:37:14.910
The thing to take away here
is use those EOs like objects.

00:37:15.100 --> 00:37:18.990
Think of them as objects,
not as rows in a database.

00:37:21.100 --> 00:37:26.760
All right, we've seen a WebObjects
application vending HTML.

00:37:26.760 --> 00:37:32.170
We could similarly do one in a very
similar manner that spits out XML.

00:37:32.410 --> 00:37:34.460
Now we're going to talk
about desktop applications.

00:37:34.460 --> 00:37:39.540
One thing that's nice about the
web as a developer is that it's

00:37:39.540 --> 00:37:41.740
very regimented what happens,
right?

00:37:41.740 --> 00:37:46.230
A request comes in, you do something,
and you send out a response.

00:37:46.300 --> 00:37:49.560
And WebObjects is very nicely
designed that it automatically,

00:37:49.560 --> 00:37:52.080
when that request comes in,
it'll pull the values

00:37:52.080 --> 00:37:55.190
out of that request,
it'll pull values out of

00:37:55.440 --> 00:38:00.300
objects and shove them into
HTML or XML and spit it out.

00:38:00.300 --> 00:38:05.300
So this request-response
cycle is very nicely tuned.

00:38:05.300 --> 00:38:09.480
However, on the desktop,
life's more complicated.

00:38:10.110 --> 00:38:15.310
If you've written... How many folks have
written a Cocoa application in here?

00:38:15.960 --> 00:38:17.150
A couple folks.

00:38:17.150 --> 00:38:20.570
How many folks have written
a swing application in here?

00:38:20.650 --> 00:38:22.900
A few more folks.

00:38:22.950 --> 00:38:26.040
I know I've found in the applications
that I've written that I spend a

00:38:26.040 --> 00:38:30.270
whole heck of a lot of code saying,
"All right, I got this thing,

00:38:30.270 --> 00:38:34.250
this object that represents
something in the user interface,

00:38:34.250 --> 00:38:37.680
and I have this text field,
and I have to make sure that what the

00:38:37.680 --> 00:38:41.210
value for the guy's first name is has
to match what's in the text field,

00:38:41.360 --> 00:38:44.520
and if they change it here,
I have to update it here,

00:38:44.520 --> 00:38:49.090
and then heaven forbid you actually
have another text field somewhere

00:38:49.210 --> 00:38:52.620
in a table that also has the first
name because now you have to keep

00:38:52.980 --> 00:38:59.410
everything in sync." And you write a lot
of code just doing that synchronization.

00:39:00.110 --> 00:39:05.320
EOF has a framework called EO Interface.

00:39:05.530 --> 00:39:09.980
And EO Interface uses an
object called a display group,

00:39:10.130 --> 00:39:12.420
which displays a group of objects.

00:39:12.630 --> 00:39:15.290
Go figure.

00:39:15.810 --> 00:39:20.570
That manages all of that
synchronization and interaction with

00:39:21.100 --> 00:39:23.700
a real desktop application for you.

00:39:23.800 --> 00:39:26.700
And rather than talk more about it,
it's definitely something

00:39:26.700 --> 00:39:28.180
that's much easier to see.

00:39:28.290 --> 00:39:31.690
I'm going to turn things
back over to Genevieve.

00:39:33.190 --> 00:39:37.110
So the first application that
we looked at was obviously

00:39:37.110 --> 00:39:38.750
a simple HTML application.

00:39:38.750 --> 00:39:42.580
It's the sort of thing that a prospective
home buyer might use to look at

00:39:42.580 --> 00:39:46.620
real estate listings from a computer
in their home or in their office.

00:39:46.620 --> 00:39:48.780
They really only need to
fetch the data and look at it,

00:39:48.780 --> 00:39:50.980
and you really don't
want them to modify it.

00:39:51.000 --> 00:39:53.720
But what about the real estate agent
who has to administer the database?

00:39:53.720 --> 00:39:56.590
They're going to need to add listings,
delete listings,

00:39:56.640 --> 00:39:58.300
make changes to listings.

00:39:58.300 --> 00:40:02.120
And so this is where the richer
functionality that you get on a desktop

00:40:02.120 --> 00:40:04.420
application can really be appreciated.

00:40:04.420 --> 00:40:07.990
So what we have here is
a Cocoa EOF application,

00:40:07.990 --> 00:40:09.640
listings by agent.

00:40:09.640 --> 00:40:13.340
In the top table we see our agents,
and as we click on them,

00:40:13.340 --> 00:40:16.420
we can see the listings in the
bottom table change so that

00:40:16.420 --> 00:40:20.060
only the listings for that
particular agent are being shown.

00:40:20.060 --> 00:40:24.010
And we can open a listing,
opens the listing for that agent,

00:40:24.150 --> 00:40:26.730
pulls the information to give
us the photo of the agent

00:40:26.740 --> 00:40:28.000
-- this is Todd Fernandez,
our QA manager -- and we can see

00:40:28.000 --> 00:40:31.000
that the agent is actually manager.

00:40:31.000 --> 00:40:33.700
And we can open multiple listings.

00:40:35.000 --> 00:40:51.400
[Transcript missing]

00:40:54.360 --> 00:40:58.280
So let's give this a listing
number that's going to be

00:40:58.280 --> 00:41:00.180
a little bit easy to spot.

00:41:00.190 --> 00:41:08.080
And we'll call this a condo and
we'll give it a Silicon Valley price.

00:41:08.090 --> 00:41:10.900
And four bedrooms, one bathroom.

00:41:10.900 --> 00:41:13.170
You're laughing, it's true.

00:41:16.900 --> 00:41:28.500
[Transcript missing]

00:41:28.930 --> 00:41:31.270
That, by the way, is wired up directly
to the editing context.

00:41:31.360 --> 00:41:32.990
I didn't have to write any
code to be able to do that.

00:41:33.080 --> 00:41:36.240
The editing context knows how to
manage all these changes for you.

00:41:36.270 --> 00:41:41.570
And this place is
located here in San Jose.

00:41:49.500 --> 00:41:59.140
The changes that I've been making
so far are all being made in memory.

00:41:59.140 --> 00:42:01.620
What we have here is our
friend the editing context that

00:42:01.710 --> 00:42:04.910
James told us about earlier,
managing all of these changes for us,

00:42:04.910 --> 00:42:08.150
tracking the additions, the deletions,
the undo, the redo,

00:42:08.150 --> 00:42:11.170
all the changes of mind,
and isolating those changes from

00:42:11.200 --> 00:42:14.680
the database so that you're not
pushing changes back and forth

00:42:14.680 --> 00:42:16.840
to the database unnecessarily.

00:42:16.910 --> 00:42:20.300
Once we've figured out that we've got all
the changes that we want made correctly,

00:42:20.300 --> 00:42:23.280
then we'll push those down to
the database by doing a save.

00:42:23.360 --> 00:42:26.920
This operation here was also wired up
directly to the editing context for

00:42:27.120 --> 00:42:32.280
this particular window so there was no
need to write any kind of code for that.

00:42:32.280 --> 00:42:36.060
So did that really get
saved to the database?

00:42:36.060 --> 00:42:37.010
We should check on that.

00:42:37.150 --> 00:42:39.410
I may just be kidding you all.

00:42:40.130 --> 00:42:46.010
So what we'll do is we will run our
little customer application again.

00:42:55.500 --> 00:42:56.500
What did that have?

00:42:56.500 --> 00:43:01.250
Three bedrooms and a price
somewhere between 400 and...

00:43:07.260 --> 00:43:08.200
And here's that listing ID.

00:43:08.200 --> 00:43:10.000
So you see it really did change.

00:43:10.050 --> 00:43:12.310
It really did write to the database.

00:43:14.400 --> 00:43:19.560
Let me just get rid of this real quickly.

00:43:19.660 --> 00:43:21.400
It can't be that easy, right?

00:43:21.750 --> 00:43:26.050
How does all the
synchronization take place?

00:43:26.280 --> 00:43:29.720
Well, it's the EO Interface framework
that's doing this for you.

00:43:29.720 --> 00:43:34.230
The way that you work with EO Interface
when you're doing development is through

00:43:34.230 --> 00:43:36.200
the tool called Interface Builder.

00:43:36.200 --> 00:43:39.060
You may have seen a little bit
of Interface Builder demoing

00:43:39.060 --> 00:43:40.310
going on this week already.

00:43:40.390 --> 00:43:42.140
I think there's a whole session on it.

00:43:42.140 --> 00:43:42.770
Is it there?

00:43:42.790 --> 00:43:44.260
Is there anybody know?

00:43:44.260 --> 00:43:45.000
There is.

00:43:45.050 --> 00:43:47.840
There's an IB session somewhere.

00:43:47.840 --> 00:43:49.420
It's very interesting to watch.

00:43:49.420 --> 00:43:55.230
So here's the main interface file for
this listings by agent application.

00:43:55.340 --> 00:43:58.160
And one of the really cool things
about Interface Builder is that while

00:43:58.170 --> 00:44:01.050
you're building up the interface,
you can actually see live

00:44:01.050 --> 00:44:02.310
whether it works or not.

00:44:02.310 --> 00:44:04.380
There's something called test mode.

00:44:04.380 --> 00:44:06.540
And we'll invoke the test mode for this.

00:44:06.540 --> 00:44:10.520
And we can see that
this is actually -- no.

00:44:12.440 --> 00:44:18.100
This is actually pulling the data from
the database while we're working on it.

00:44:18.130 --> 00:44:22.890
That can really help shrink down
the debug cycle for building

00:44:22.890 --> 00:44:24.200
an interface quite a bit.

00:44:24.250 --> 00:44:30.500
So we'll go back into
the editing mode for IBM.

00:44:30.590 --> 00:44:32.880
So that James doesn't have a
chance to change the spec on me,

00:44:32.880 --> 00:44:35.000
I'm going to add a text
field to it myself.

00:44:35.060 --> 00:44:38.610
Let's add a field that shows the first
name of the agent so that we can be

00:44:38.610 --> 00:44:40.380
real chummy with the agent on the phone.

00:44:40.510 --> 00:44:44.140
So we pull a text field
down onto our window.

00:44:45.910 --> 00:44:51.300
And we're going to wire this up
to the first name of the agent.

00:44:51.430 --> 00:44:56.010
So we'll set the value
to the agent first name,

00:44:56.010 --> 00:45:00.770
connect, and let's make sure that works.

00:45:04.750 --> 00:45:08.430
You can see that we're pulling
the agent's first name.

00:45:08.580 --> 00:45:12.150
We were able to do this all without
writing any additional database code,

00:45:12.150 --> 00:45:15.160
without even getting out of
our interface building tool.

00:45:15.200 --> 00:45:18.570
I wonder what would happen
if we change something,

00:45:18.570 --> 00:45:19.560
actually change the data in here.

00:45:19.560 --> 00:45:20.450
Would that work?

00:45:20.510 --> 00:45:23.670
Let's give Andreas a nickname that he
can use when he's talking to maitre

00:45:23.670 --> 00:45:26.040
d's or something in a restaurant.

00:45:26.070 --> 00:45:26.960
Yep, looks like it works.

00:45:27.120 --> 00:45:30.520
So the interface builder,
the interface is really live while you're

00:45:30.520 --> 00:45:36.560
working on it and as I said it really
cuts the debug cycle down quite a bit.

00:45:36.560 --> 00:45:39.020
And that's IP and EO interface.

00:45:39.290 --> 00:45:40.720
Thank you.

00:45:46.200 --> 00:45:55.190
So, I don't know about you,
but to me that saved me tons of time.

00:45:55.200 --> 00:45:59.840
Even, I just finished deploying a
WebObjects application and I wrote

00:45:59.840 --> 00:46:04.380
a little Cocoa EOF application
just so I could change things

00:46:04.380 --> 00:46:05.700
in the database very easily.

00:46:05.700 --> 00:46:09.710
And about 90% of the time I just
ran it in Interface Builder as

00:46:09.710 --> 00:46:13.680
a development tool for accessing
things into the database.

00:46:13.680 --> 00:46:18.270
So, even just for that reason,
it's a very, very handy technology.

00:46:18.280 --> 00:46:21.740
So,
how much of it's really codeless might

00:46:22.130 --> 00:46:25.440
be the question that comes to mind.

00:46:25.440 --> 00:46:26.470
Is it all codeless?

00:46:26.560 --> 00:46:29.010
Well,
certainly when we hit the save button,

00:46:29.010 --> 00:46:32.710
we tell the editing context
through target action to save.

00:46:32.900 --> 00:46:36.380
You would probably want to put some
error handling code around that

00:46:36.380 --> 00:46:39.880
in case somebody tripped on the
database in the server closet and,

00:46:39.880 --> 00:46:42.020
you know,
it's offline so the user doesn't

00:46:42.080 --> 00:46:43.640
get some bizarre error message.

00:46:43.660 --> 00:46:48.070
But all of that dynamic updating
of picking a new person and having

00:46:48.070 --> 00:46:51.960
the new list of items show up,
that's all completely codeless.

00:46:52.160 --> 00:46:55.600
The having text fields and other
text fields update automatically,

00:46:55.910 --> 00:46:57.580
that is all completely codeless.

00:46:57.780 --> 00:47:01.270
So, I find it a great time saver.

00:47:01.510 --> 00:47:02.400
Excellent.

00:47:02.530 --> 00:47:05.940
So we've seen a lot of kind of magic,
right?

00:47:05.940 --> 00:47:08.960
One line of code here,
no lines of code here,

00:47:09.070 --> 00:47:12.400
and all this magic kind of happens.

00:47:12.400 --> 00:47:19.220
What I wanted to do to finish up is talk
a little bit about the framework itself.

00:47:19.540 --> 00:47:24.190
What are the pieces of the framework so
that as you start learning about EOF,

00:47:24.670 --> 00:47:28.670
start reading the documentation,
you'll run into a number of concepts,

00:47:28.670 --> 00:47:31.540
a number of classes,
and you might wonder where

00:47:31.540 --> 00:47:33.350
do these all fit together.

00:47:33.350 --> 00:47:36.910
So I want to kind of talk us through

00:47:38.530 --> 00:47:39.480
The EOF Stack.

00:47:39.610 --> 00:47:46.160
Basically, how does a row become an EO,
who's involved, and what do they do?

00:47:46.270 --> 00:47:53.090
So that when you start playing with EOF,
start reading about it, you know.

00:47:53.090 --> 00:47:53.090
So,

00:47:54.500 --> 00:47:56.250
So let me back up for a sec.

00:47:56.360 --> 00:48:01.280
EO access and EO control,
those are used in every

00:48:01.350 --> 00:48:06.960
single EOF application,
whether it's XML, HTML, Cocoa,

00:48:07.160 --> 00:48:09.500
JAVA as an application.

00:48:09.500 --> 00:48:15.040
EO interface is used only
in the desktop applications.

00:48:15.270 --> 00:48:19.800
So EO access has two layers.

00:48:19.800 --> 00:48:23.900
The adapter layer is where the
database connection occurs.

00:48:24.260 --> 00:48:25.590
It has the database connection.

00:48:25.600 --> 00:48:27.920
It's the thing talking to the database.

00:48:27.970 --> 00:48:31.730
It doesn't know anything about
full-blown enterprise objects.

00:48:31.790 --> 00:48:37.370
It's dealing in raw SQL generation
down to the database.

00:48:37.700 --> 00:48:41.580
It's dealing in raw rows
coming back from the server.

00:48:41.620 --> 00:48:44.670
Then it hands those raw rows
up to the database layer,

00:48:44.670 --> 00:48:48.400
which does two very important things.

00:48:48.400 --> 00:48:53.160
The first important thing that it does is
it turns that raw row into that living,

00:48:53.240 --> 00:48:57.440
breathing enterprise object
that we can do nice stuff like

00:48:57.560 --> 00:49:00.560
relationships and the like with.

00:49:00.690 --> 00:49:05.400
It also takes a snapshot of
the values that came in and

00:49:05.490 --> 00:49:08.040
keeps them for later use.

00:49:08.040 --> 00:49:09.800
It does some caching.

00:49:09.810 --> 00:49:13.820
So that later trips to the database
layer which may be avoided to

00:49:13.820 --> 00:49:18.200
avoid load on your database
and also increase performance.

00:49:18.200 --> 00:49:22.940
That's important to note because
by default when you fetch things,

00:49:22.990 --> 00:49:25.820
it's going to take the
cached values first.

00:49:25.820 --> 00:49:29.300
So that might be one of the
first times you run into a

00:49:29.300 --> 00:49:31.300
snapshot as a new EOF developer.

00:49:31.350 --> 00:49:36.460
I think there will be more on
that in the advanced EOF session.

00:49:36.460 --> 00:49:37.780
So those are the two things.

00:49:37.780 --> 00:49:41.580
Adapter layer, raw rows,
direct connection to database.

00:49:41.580 --> 00:49:46.390
player, turn those rows into EOs,
and keep a snapshot.

00:49:47.660 --> 00:49:50.980
All of this is configured
in the EO model file.

00:49:51.220 --> 00:49:56.680
When you start using the
Enterprise Objects Framework,

00:49:57.070 --> 00:50:00.030
Basically, you make this model file.

00:50:00.040 --> 00:50:05.710
You do this mapping and it tells
these two parts of the EO access

00:50:06.170 --> 00:50:11.000
framework how to deal with the
database and the incoming data.

00:50:11.160 --> 00:50:17.790
Now, we can go in there and minutely
tweak just about every parameter you

00:50:17.790 --> 00:50:20.000
can imagine at both of these layers.

00:50:20.000 --> 00:50:25.240
However, that's probably not the best
thing to do in your first

00:50:25.870 --> 00:50:29.000
time using EOF just because,
you know,

00:50:29.000 --> 00:50:31.680
it's good to start with the basics.

00:50:31.880 --> 00:50:36.940
Now, I mentioned earlier you can
hit multiple data sources.

00:50:36.940 --> 00:50:41.030
You might have two different news feeds
coming in from two different databases.

00:50:41.380 --> 00:50:43.840
You want to have news stories
that are being presented

00:50:43.840 --> 00:50:45.680
from two different databases.

00:50:45.810 --> 00:50:47.940
Well, we make an EO model.

00:50:48.320 --> 00:50:50.710
That EO model,
when that application launches,

00:50:50.890 --> 00:50:54.130
creates a database layer and an
adapter layer that's going to

00:50:54.220 --> 00:50:56.510
deal with the particular database.

00:50:56.590 --> 00:50:58.510
I want multiple data sources.

00:50:58.610 --> 00:51:00.920
I add another model file.

00:51:01.040 --> 00:51:05.880
When I launch this application,
a second set of that database layer and

00:51:05.880 --> 00:51:11.710
adapter layer is going to show up that's
going to be hitting another data source.

00:51:11.820 --> 00:51:14.780
In my code,
I don't necessarily know or care

00:51:15.020 --> 00:51:17.080
which data source this is from.

00:51:17.390 --> 00:51:20.500
I ask for a customer,
it gets it from one database.

00:51:20.760 --> 00:51:24.520
I ask for a news story,
it comes from another database.

00:51:24.590 --> 00:51:26.190
I don't care.

00:51:26.620 --> 00:51:28.890
Now, as you're doing some reading,
you're going to come across

00:51:28.890 --> 00:51:31.180
something called a model group.

00:51:31.230 --> 00:51:34.670
Since we can have multiple model files,
we need some object that

00:51:34.670 --> 00:51:36.380
holds them all together.

00:51:36.390 --> 00:51:38.620
It's called the EO model group.

00:51:38.670 --> 00:51:42.120
So when you come across it, don't freak.

00:51:42.160 --> 00:51:44.190
It's really its job in life.

00:51:44.450 --> 00:51:48.060
At this point,
we're able to access and turn

00:51:48.060 --> 00:51:52.410
rows into EOs and back again,
multiple data sources that

00:51:52.450 --> 00:51:55.800
pretty much evens out EO access.

00:51:55.940 --> 00:51:58.350
So we'll move into control.

00:51:58.600 --> 00:52:03.060
The EO Control Framework is
where our editing context lives.

00:52:03.170 --> 00:52:08.620
It's where we programmatically control
and coordinate what's going on in EOF.

00:52:08.730 --> 00:52:14.010
Now, we've got multiple databases
potentially happening,

00:52:14.010 --> 00:52:17.900
although I think most EOF users
are hitting one database.

00:52:18.020 --> 00:52:21.700
So you'll run into this guy called
the EO Object Store Coordinator.

00:52:21.820 --> 00:52:24.480
The Object Store Coordinator's
only purpose in life,

00:52:24.590 --> 00:52:27.250
or main purpose in life,
is when somebody asks

00:52:27.460 --> 00:52:30.880
for the customer object,
it's going to figure out which stack

00:52:30.880 --> 00:52:32.690
it should send that request to.

00:52:32.840 --> 00:52:37.240
So it's literally coordinating
between the fact that we may

00:52:37.330 --> 00:52:39.710
have multiple data sources.

00:52:39.790 --> 00:52:43.340
Now, we got an old friend sitting
at the top of this stack,

00:52:43.520 --> 00:52:45.970
the editing context.

00:52:47.110 --> 00:52:51.470
As I mentioned before,
the editing context is your go-to guy,

00:52:51.470 --> 00:52:54.910
but when you ask the editing
context for some objects,

00:52:54.910 --> 00:52:57.710
it asks the object store
coordinator for objects,

00:52:57.890 --> 00:53:00.520
it asks the database layer,
the appropriate database

00:53:00.640 --> 00:53:03.580
layer for objects,
and so on all the way

00:53:03.640 --> 00:53:05.830
down to the database.

00:53:05.970 --> 00:53:10.160
This is designed so that you don't

00:53:10.400 --> 00:54:16.000
[Transcript missing]

00:54:17.600 --> 00:54:19.120
All right.

00:54:19.260 --> 00:54:25.680
That is essentially EOF in a nutshell.

00:54:25.680 --> 00:54:27.510
So the review.

00:54:28.300 --> 00:54:32.150
First thing I'd like to
say for the review is EOF,

00:54:32.150 --> 00:54:37.080
as we saw in the demo, I was able to,
Genevieve was able to

00:54:37.150 --> 00:54:39.590
have two applications,
one a desktop app,

00:54:39.710 --> 00:54:44.500
one a WebObjects HTML app,
both using the exact same model file,

00:54:44.500 --> 00:54:49.550
potentially the exact same business
logic with the same validation code,

00:54:49.550 --> 00:54:52.080
reused across multiple views of it.

00:54:53.880 --> 00:54:57.680
To get started, there's not a whole lot
of code to get going.

00:54:57.680 --> 00:55:01.020
As long as you remember you're
talking to that editing context,

00:55:01.020 --> 00:55:04.590
it's pretty much the place to go
to programmatically deal with it.

00:55:04.700 --> 00:55:09.610
And EO interface is very,
very groovy when it comes

00:55:09.610 --> 00:55:12.390
to desktop applications.

00:55:12.420 --> 00:55:16.990
So, how many folks were in the
intro to EOF session last year?

00:55:16.990 --> 00:55:18.140
Just clap your hands.

00:55:18.220 --> 00:55:19.420
Don't raise your hands.

00:55:19.420 --> 00:55:19.680
Clap.

00:55:22.500 --> 00:55:23.500
There we go.

00:55:23.610 --> 00:55:28.440
There's a little song or something
that I did and folks seemed

00:55:28.440 --> 00:55:31.100
to groove on it a little bit.

00:55:31.100 --> 00:55:34.500
So I thought this year
I would do another song.

00:55:34.830 --> 00:55:44.190
It's part of the review, however.

00:55:53.900 --> 00:56:03.100
[Transcript missing]

00:56:04.200 --> 00:56:11.000
[Transcript missing]

00:56:13.700 --> 00:56:17.350
This year, because things kind of
went well last year,

00:56:17.350 --> 00:56:22.330
I thought I'd open up a little
bit and show folks a little

00:56:22.400 --> 00:56:25.150
more of my sensitive side.

00:56:26.210 --> 00:56:30.410
And so with that, I suppose I will begin.

00:56:30.570 --> 00:56:31.890
Are you ready?

00:56:32.130 --> 00:56:34.540
Here we go.

00:57:05.700 --> 00:57:16.500
[Transcript missing]

00:57:17.400 --> 00:57:23.400
[Transcript missing]

00:57:31.700 --> 00:57:40.700
and and and

00:57:42.700 --> 00:57:48.700
[Transcript missing]

00:57:57.900 --> 00:58:15.100
[Transcript missing]

00:58:15.900 --> 00:58:23.700
[Transcript missing]

00:58:24.000 --> 00:58:36.000
[Transcript missing]

00:58:49.500 --> 00:58:59.100
[Transcript missing]

00:58:59.200 --> 00:59:05.500
[Transcript missing]

00:59:13.050 --> 00:59:22.520
and the EOF team will be joined by
the EOF team's team of engineers,

00:59:22.520 --> 00:59:26.630
engineers and engineers.

00:59:30.000 --> 00:59:51.300
[Transcript missing]

00:59:56.200 --> 01:00:16.800
[Transcript missing]

01:00:26.200 --> 01:00:36.700
[Transcript missing]

01:00:36.800 --> 01:00:43.320
and James Dempsey, Genevieve Purugganan.

01:00:50.100 --> 01:00:56.200
[Transcript missing]

01:00:56.400 --> 01:01:06.400
[Transcript missing]

01:02:12.560 --> 01:02:17.360
At the WebObjects Cocoa Boff tonight,
they've asked me to play.

01:02:17.360 --> 01:02:19.300
So you're all just going
to have to come back.

01:02:19.810 --> 01:02:21.540
No.

01:02:21.540 --> 01:02:25.810
I will do another one because
I can't resist that applause.

01:02:30.770 --> 01:02:37.080
Well a fetch specification
specifies those objects you want

01:02:37.080 --> 01:02:40.140
to fetch as its name implies.

01:02:40.140 --> 01:02:47.460
With a fetch spec baby you can
stipulate those objects you

01:02:47.460 --> 01:02:51.170
want to fetch and manipulate.

01:03:01.000 --> 01:03:26.100
[Transcript missing]

01:03:30.000 --> 01:03:44.500
[Transcript missing]

01:03:44.700 --> 01:03:50.700
and those criteria of what you desire
you're gonna wrap that all up into a

01:03:50.700 --> 01:03:58.330
qualifier and don't forget about those
sort orderings determines the order

01:03:58.330 --> 01:04:01.330
of objects the fetch spec will bring

01:04:11.100 --> 01:04:34.800
[Transcript missing]

01:04:36.760 --> 01:04:39.490
You make a change,
the editing context knows.

01:04:39.490 --> 01:04:40.290
One more verse.

01:04:40.540 --> 01:04:45.400
The EO database,
it maintains a snapshot of the

01:04:45.530 --> 01:04:49.580
initial values of each row you've got.

01:04:49.620 --> 01:04:55.680
You can refresh refetched objects
if you want to replace cached values

01:04:55.680 --> 01:04:59.820
with fresh data from the database.

01:04:59.820 --> 01:05:03.320
EOs, EOs, EOs

01:05:07.800 --> 01:05:12.590
This was a little song about EOF,
I hope you get the gist.

01:05:12.590 --> 01:05:17.780
Still a framework that
helps your objects persist.

01:05:38.430 --> 01:05:41.420
I'll be here all the week.

01:05:41.470 --> 01:05:45.730
All right,
so actually stop by the Cocoa EOF BOF,

01:05:45.730 --> 01:05:48.530
or the Cocoa WebObjects BOF.

01:05:48.860 --> 01:05:51.970
I will be hanging out
there and playing a tune.

01:05:52.020 --> 01:05:54.760
I might have a third new tune.

01:05:54.760 --> 01:05:56.280
And come back to the feedback form.

01:05:56.280 --> 01:06:03.080
They might let me sing the
relationship song again correctly.

01:06:03.180 --> 01:06:05.400
Stop by the WebObjects lab.

01:06:06.400 --> 01:06:08.500
Want to learn more about EOModeler?

01:06:08.570 --> 01:06:11.080
Go to the Advanced Data Modeling session.

01:06:11.180 --> 01:06:15.590
More about faulting and enhanced
performance and optimizing EOF,

01:06:15.710 --> 01:06:19.310
the Advanced EOF session,
and optimizing WebObjects

01:06:19.310 --> 01:06:23.890
applications in general,
the Optimization session on Friday.

01:06:25.110 --> 01:06:28.640
Tony and Bob are the folks to contact.

01:06:28.710 --> 01:06:32.610
Services@apple.com for... Take the
WebObjects training if you're just

01:06:32.610 --> 01:06:34.080
getting started with WebObjects.

01:06:35.950 --> 01:06:42.080
For more info, the documentation,
how to access the documentation.