WEBVTT

00:00:02.420 --> 00:00:03.860
Hi.

00:00:03.860 --> 00:00:05.060
My name is David O'Rourke.

00:00:05.060 --> 00:00:07.660
I'm here to talk about directory
services/open directory.

00:00:07.660 --> 00:00:09.190
This is session 813.

00:00:09.190 --> 00:00:14.360
If you want a WebObject session,
I suggest you go right across the way.

00:00:15.320 --> 00:00:16.440
I've introduced myself.

00:00:16.510 --> 00:00:19.220
I'm Server Engineering Manager.

00:00:19.220 --> 00:00:22.090
What we're going to talk about
today is Apple's Open Directory.

00:00:22.660 --> 00:00:24.670
That's a new name this year.

00:00:24.800 --> 00:00:27.630
We're going to review
Open Directory as of Mac OS X-1.

00:00:27.690 --> 00:00:29.720
We're going to talk about
our future plans for Jaguar.

00:00:29.720 --> 00:00:31.060
That's been a theme in the conference.

00:00:31.060 --> 00:00:34.240
I think you'll find
that very interesting.

00:00:34.250 --> 00:00:39.000
Hopefully after learning about
all this fantastic technology

00:00:39.010 --> 00:00:40.640
that we'll be talking about today,
we'll be taking some

00:00:40.640 --> 00:00:40.640
questions and answers.

00:00:41.800 --> 00:00:42.940
So what is Open Directory?

00:00:42.940 --> 00:00:46.200
I've gotten that
question a lot this week.

00:00:46.210 --> 00:00:48.080
It's a new name.

00:00:48.220 --> 00:00:51.030
It covers client access
and directory servers.

00:00:51.090 --> 00:00:54.820
So we see this as a complete
solution for everybody.

00:00:54.850 --> 00:00:57.720
It combines industry standard
protocols and open access technology.

00:00:57.720 --> 00:01:00.480
What we mean by that is that
we're adopting industry standard

00:01:00.520 --> 00:01:02.680
protocols such as LDAPv2,
LDAPv3.

00:01:02.830 --> 00:01:04.950
NetInfo has been open source
for a number of years.

00:01:04.970 --> 00:01:06.520
We're continuing to support that.

00:01:06.520 --> 00:01:09.710
And the open access technologies,
we have both a client side API and

00:01:09.710 --> 00:01:14.440
a plug-in API that allows anybody
to access any of the technologies.

00:01:14.440 --> 00:01:16.240
These are existing solutions
that have historically

00:01:16.240 --> 00:01:17.440
shipped with Mac OS X already.

00:01:17.440 --> 00:01:18.600
So this really is a new technology.

00:01:18.600 --> 00:01:22.750
What we're doing is just bringing it out
and showing people more about what it is,

00:01:22.750 --> 00:01:24.100
what it can do for you.

00:01:24.100 --> 00:01:28.230
But we shipped this
originally in Mac OS X 10.0.

00:01:28.230 --> 00:01:31.900
And it is now, as of this week,
open source as part of Darwin.

00:01:31.900 --> 00:01:34.010
If you like that,
I recommend some applause for some

00:01:34.100 --> 00:01:36.780
of the engineers in the corner
that worked real hard on that.

00:01:36.780 --> 00:01:40.080
We're very excited about this.

00:01:40.180 --> 00:01:42.170
In fact, I bug report last night.

00:01:42.180 --> 00:01:43.720
It was kind of interesting.

00:01:47.210 --> 00:01:48.500
So what is open directory?

00:01:48.500 --> 00:01:50.410
Again, I just went over that.

00:01:50.680 --> 00:01:51.150
Access.

00:01:51.360 --> 00:01:53.100
But what does access contain?

00:01:53.100 --> 00:01:55.980
Well, access consists of two main points.

00:01:56.120 --> 00:01:59.380
It's the Mac OS X directory
service architecture and the

00:01:59.380 --> 00:02:01.720
existing lookup D architecture,
which has been part of the

00:02:01.720 --> 00:02:04.590
BSD code or part of the
Darwin code for quite a while.

00:02:04.760 --> 00:02:08.600
That is the foundation upon which client
access has been built in Mac OS X to

00:02:08.600 --> 00:02:12.100
access authoritative directory data.

00:02:12.100 --> 00:02:15.080
Directory server
technology is for Jaguar.

00:02:15.080 --> 00:02:17.110
We'll be integrating open LDAP.

00:02:17.110 --> 00:02:18.700
But we also have NetInfo.

00:02:18.730 --> 00:02:20.370
We've been shipping that
for a number of years.

00:02:20.460 --> 00:02:24.380
That is open source and that's
our directory server technology.

00:02:24.420 --> 00:02:27.100
So LDAP and NetInfo combined.

00:02:27.200 --> 00:02:29.070
And we ship a number of integrated tools.

00:02:29.110 --> 00:02:32.500
We ship a number of integrated tools
for managing the directory contents.

00:02:32.610 --> 00:02:36.720
All of the tools in Jaguar,
if you go to Jaguar system preferences

00:02:36.720 --> 00:02:39.430
and try to create a new user,
that's using the open

00:02:39.470 --> 00:02:42.090
directory technology APIs to
create that user record.

00:02:42.090 --> 00:02:45.530
If you go to logon windows,
it's using the open directory

00:02:45.530 --> 00:02:47.090
APIs to verify the password.

00:02:47.180 --> 00:02:50.840
So we are integrating the management
tools on top of this technology as

00:02:50.840 --> 00:02:53.100
well as just providing the technology.

00:02:53.100 --> 00:02:54.630
So this is a pervasive effort from Apple.

00:02:54.630 --> 00:02:57.100
As many of my coworkers in
the audience will tell you,

00:02:57.110 --> 00:02:59.170
I visited them on numerous
occasions telling,

00:02:59.170 --> 00:02:59.870
"No, no, no.

00:02:59.870 --> 00:03:04.100
You must do it this way." So we've
been making some progress.

00:03:05.490 --> 00:03:06.630
So what is directory services?

00:03:06.740 --> 00:03:11.360
This has historically been this session,
but it's a little briefer this year.

00:03:11.360 --> 00:03:14.560
By and large,
it's an open architecture that allows

00:03:14.560 --> 00:03:18.060
you to take your Mac OS X software,
which is the blue box in this diagram,

00:03:18.060 --> 00:03:20.980
and base it on top of
open directory services.

00:03:20.980 --> 00:03:24.040
On the back end,
open directory services has

00:03:24.040 --> 00:03:26.840
existing plug-ins for NetInfo,
LDAP.

00:03:27.130 --> 00:03:31.280
This year we're adding BSD flat files,
so apparently SciTech wants to use

00:03:31.380 --> 00:03:33.250
Etsy files for the configuration.

00:03:33.950 --> 00:03:34.800
And other plug-ins.

00:03:34.880 --> 00:03:39.760
I believe we have some third parties that
have shipped plug-ins on the lower layer,

00:03:39.760 --> 00:03:42.090
and we're working with some
universities on developing plug-ins.

00:03:42.100 --> 00:03:46.230
So directory services is a
read-write API abstraction that if

00:03:46.230 --> 00:03:49.600
you put your software on top of it,
you don't have to care about what

00:03:49.600 --> 00:03:52.700
directory Mac OS 10's been used
to get its users and groups from.

00:04:02.970 --> 00:04:03.180
Okay.

00:04:03.180 --> 00:04:07.360
So what does Mac OS 10.1 include
as part of directory services?

00:04:07.360 --> 00:04:10.090
Well, it includes a v2,
an LDAP v2 plug-in.

00:04:10.160 --> 00:04:12.170
It includes a NetInfo client.

00:04:12.170 --> 00:04:16.210
And it includes full documentation
for using the directory

00:04:16.210 --> 00:04:18.280
API and writing a plug-in.

00:04:18.280 --> 00:04:22.320
Some of that documentation is in
the form of developer documentation

00:04:22.370 --> 00:04:26.090
and other documentation is actually
published on the Mac OS X server website.

00:04:26.180 --> 00:04:29.200
We have a white paper, for example,
that tells a customer how to

00:04:29.200 --> 00:04:32.660
integrate Mac OS X into an
existing active directory server.

00:04:32.660 --> 00:04:35.450
The goal there was more as a
demonstration of our LDAP connectivity,

00:04:35.450 --> 00:04:37.540
not so much as a demonstration
of active directory.

00:04:37.540 --> 00:04:41.950
But we have documented
access API and a plug-in API.

00:04:42.060 --> 00:04:43.310
We have an SDK.

00:04:43.440 --> 00:04:46.500
Calling an SDK is really
kind of an overstatement.

00:04:46.500 --> 00:04:49.100
What it is really is a collection
of sample code that shows people how

00:04:49.100 --> 00:04:50.970
to use the directory service APIs.

00:04:50.970 --> 00:04:53.880
You don't need to install the
SDK to use directory services.

00:04:53.950 --> 00:04:55.580
I've received that question a lot.

00:04:55.580 --> 00:04:57.720
But everything you
need is in the Core OS.

00:04:57.720 --> 00:04:59.180
But if you want to see some sample code,
you can do that.

00:04:59.200 --> 00:05:00.410
You can download the SDK,
you can download the code,

00:05:00.410 --> 00:05:01.940
see some stub plug-ins,
get some other information

00:05:02.010 --> 00:05:03.100
about directory services.

00:05:03.100 --> 00:05:06.760
The SDK has, I guess,
augmented or additional information.

00:05:06.830 --> 00:05:10.200
And that can be downloaded from the
URL that you see there on the screen.

00:05:10.270 --> 00:05:12.550
The headers, if you have a PowerBook,
you're welcome to inspect

00:05:12.660 --> 00:05:13.630
the headers right now.

00:05:13.630 --> 00:05:14.060
Open it up.

00:05:14.060 --> 00:05:16.580
Go to
/system/library/frameworks/directory/s

00:05:16.680 --> 00:05:17.340
ervices.

00:05:17.340 --> 00:05:18.260
You'll find the headers there.

00:05:18.260 --> 00:05:20.250
Although,
it'd probably be better for you to

00:05:20.300 --> 00:05:22.250
pay attention to the presentation.

00:05:24.980 --> 00:05:27.010
What is Mac OS X One Directory Server?

00:05:27.180 --> 00:05:30.720
For Mac OS X One, we include NetInfo,
which we feel is a powerful,

00:05:30.760 --> 00:05:33.790
scalable and very,
very useful directory service to

00:05:33.820 --> 00:05:35.900
ship with the operating system.

00:05:35.940 --> 00:05:37.620
It's part of Darwin.

00:05:37.700 --> 00:05:40.860
It provides both standalone
access and shared network access

00:05:40.890 --> 00:05:42.760
and this is a fantastic server.

00:05:42.810 --> 00:05:45.830
Moving forward in Jaguar,
we're going to be augmenting this

00:05:45.830 --> 00:05:49.410
directory server architecture
with an open LDAP server.

00:05:51.770 --> 00:05:53.260
Mac OS 10.1 directory tools.

00:05:53.260 --> 00:05:56.640
The directory tools that we use for
directory services are largely provided

00:05:56.640 --> 00:05:59.390
by server software or desktop software,
and they're included with the

00:05:59.390 --> 00:06:03.520
operating system or with the directory
server or with the desktop OS.

00:06:03.520 --> 00:06:06.260
These are the Mac OS X server
administration tools,

00:06:06.260 --> 00:06:09.010
which are entirely based on the
open directory technologies.

00:06:09.020 --> 00:06:12.530
NetInfo Manager uses NetInfo,
and that allows you to set

00:06:12.530 --> 00:06:13.700
up the open directory server.

00:06:13.700 --> 00:06:17.980
NetInfo Domain Setup is a tool we ship
with Mac OS X Server for setting up

00:06:17.980 --> 00:06:20.980
directory servers or setting up NetInfo.

00:06:21.810 --> 00:06:23.380
And there's a number
of command line tools,

00:06:23.450 --> 00:06:27.140
ni-dump, ni-grep,
a whole list of ni tools that

00:06:27.260 --> 00:06:30.140
are management tools based on
the open directory technologies.

00:06:34.040 --> 00:06:36.210
I've received this question and
this was a slide my management

00:06:36.320 --> 00:06:37.750
wanted me to have in here for years.

00:06:37.750 --> 00:06:39.500
I just got around to doing it this year.

00:06:39.760 --> 00:06:43.200
How does Mac OS X use directory services?

00:06:43.200 --> 00:06:46.190
And if you look at this diagram,
it's a very, very subtle diagram.

00:06:46.300 --> 00:06:49.790
But whenever somebody calls a POSIX call
like get PWName or get hostname

00:06:49.900 --> 00:06:53.390
or something along those lines,
it dispatches on the left side of the

00:06:53.390 --> 00:06:58.110
screen and dispatches down to an existing
process in Mac OS X called LookupD.

00:06:58.130 --> 00:07:02.280
LookupD handles the request and
dispatches it and reads directory data.

00:07:02.340 --> 00:07:06.680
What we've done for Mac OS X and
JAGUIRE is we've tied LookupD in

00:07:06.680 --> 00:07:08.420
with directory services.

00:07:08.420 --> 00:07:11.640
So regardless of which API you're
using to access directory data,

00:07:11.760 --> 00:07:14.940
if you're an existing POSIX application
accessing directory data

00:07:15.030 --> 00:07:18.730
or a new application that's
using the open directory APIs,

00:07:18.730 --> 00:07:21.940
you get the same data out of the system.

00:07:21.940 --> 00:07:25.430
So what happens is LookupD is
a pluggable architecture.

00:07:25.430 --> 00:07:28.250
We've written a plugin for
LookupD that we call DS Agent.

00:07:28.270 --> 00:07:31.650
DS Agent dispatches all the data
requests to the directory services side.

00:07:31.680 --> 00:07:32.680
It's a very simple way to do that.

00:07:32.680 --> 00:07:34.640
But whatever plugins have been
enabled in directory services,

00:07:34.690 --> 00:07:36.910
LookupD benefits from that data.

00:07:37.000 --> 00:07:39.150
If you're calling directory
services directly,

00:07:39.150 --> 00:07:42.540
it just dispatches to directory services,
dispatches to the plugin,

00:07:42.540 --> 00:07:44.340
and accesses the directory data.

00:07:44.340 --> 00:07:46.890
So this is pervasive and
fundamental in Mac OS X.

00:07:46.900 --> 00:07:49.820
Any time you look up a user record,
any time you look up a group record,

00:07:49.910 --> 00:07:52.220
any time you look up a mount
record for an NFS mount,

00:07:52.220 --> 00:07:54.310
the data's coming from
directory services.

00:07:54.390 --> 00:07:58.300
What directory services allows a
customer to do is tell the operating

00:07:58.390 --> 00:08:01.650
system where their preferred
place for retrieving that data is.

00:08:01.660 --> 00:08:02.770
So if you're calling a server,
you're calling a server,

00:08:02.820 --> 00:08:04.810
and you're calling a server,
you're calling a server.

00:08:04.930 --> 00:08:07.090
That's the way it's going to be.

00:08:07.110 --> 00:08:10.970
You can do that with any
of the different services.

00:08:10.980 --> 00:08:17.320
You can do that with any
of the different services.

00:08:17.320 --> 00:08:20.110
You can do that with any

00:08:22.900 --> 00:08:24.340
Open Directory and Jaguar.

00:08:24.340 --> 00:08:26.470
That's the past.

00:08:26.810 --> 00:08:28.040
We've already done all that.

00:08:28.040 --> 00:08:29.010
We've already shipped all that.

00:08:29.100 --> 00:08:32.800
What we're here to talk about today
is what we plan to do tomorrow.

00:08:32.800 --> 00:08:33.490
And that's Jaguar.

00:08:35.280 --> 00:08:36.700
What are we doing for Jaguar?

00:08:36.730 --> 00:08:40.960
Open Directory will support LDAPv3,
ReadWrite, Native, SSL,

00:08:40.970 --> 00:08:43.800
everything that was
requested for the past year.

00:08:43.830 --> 00:08:48.420
We will support BSD/Essie files and we're
adding some more plugins which will be

00:08:48.420 --> 00:08:50.500
talked about later in this presentation.

00:08:50.580 --> 00:08:52.760
For servers, we're including OpenLDAP.

00:08:52.870 --> 00:08:56.790
It is the OpenLDAP that is already
downloadable and runnable on Mac OS X.

00:08:56.790 --> 00:08:58.270
It's server and client.

00:08:58.360 --> 00:08:59.270
The server is OpenLDAP.

00:08:59.360 --> 00:09:04.250
The client is the LDAPv3 plugin we're
including with directory services.

00:09:04.470 --> 00:09:09.080
And the LDAP server will share the
database with the NetInfo server,

00:09:09.080 --> 00:09:11.140
so there's no need to migrate your data.

00:09:11.240 --> 00:09:14.080
If you already have a NetInfo
database set up with users,

00:09:14.080 --> 00:09:16.890
groups and mounts in it,
you fire up the open LDAP server

00:09:17.050 --> 00:09:18.860
and it will use the same database.

00:09:18.860 --> 00:09:21.460
If you add a record through
LDAP and create a user record,

00:09:21.560 --> 00:09:22.950
it gets put in the database.

00:09:22.960 --> 00:09:25.040
If you delete a record,
it shows up as deleted

00:09:25.050 --> 00:09:26.020
on the NetInfo side.

00:09:26.150 --> 00:09:29.930
So this will allow our customers
and our developers to migrate

00:09:29.940 --> 00:09:34.360
very gradually from NetInfo to
LDAP or keep NetInfo or keep LDAP.

00:09:34.570 --> 00:09:37.540
So you have the best of both worlds
and you don't have to set up two

00:09:37.540 --> 00:09:39.340
separate databases on the system.

00:09:41.220 --> 00:09:42.860
New authentication options.

00:09:42.870 --> 00:09:45.450
There's going to be an extensive
talk on this later in the thing.

00:09:45.600 --> 00:09:47.650
Readable crypt passwords are going away.

00:09:48.500 --> 00:09:51.010
If your application...

00:09:51.330 --> 00:09:52.300
Thank you.

00:09:52.300 --> 00:09:56.020
If your application needs
to do password validation,

00:09:56.020 --> 00:09:57.960
you can no longer assume
to get PWNAM returned to

00:09:58.020 --> 00:09:59.290
your readable CRP password.

00:09:59.370 --> 00:10:02.190
There are abstractions that you
will need to adopt so that you can

00:10:02.190 --> 00:10:04.450
verify user passwords in the system.

00:10:04.550 --> 00:10:07.940
There's a lot of effort going on here.

00:10:07.940 --> 00:10:09.750
There's a lot of work.

00:10:10.070 --> 00:10:13.180
I'm not going to try to steal Jason's
thunder later in the presentation.

00:10:13.180 --> 00:10:13.180
We have a great presentation
for you in that area.

00:10:15.680 --> 00:10:17.200
Enhancements we're going to cover today.

00:10:17.200 --> 00:10:20.280
My intro section is almost done.

00:10:20.280 --> 00:10:22.530
I'm going to be bringing up some
of the engineers who actually do

00:10:22.530 --> 00:10:24.960
the work as opposed to stand up
on stage and do presentations.

00:10:24.980 --> 00:10:27.290
They're going to be
talking about open source.

00:10:27.300 --> 00:10:29.020
They're going to be talking
about directory proxy,

00:10:29.060 --> 00:10:30.760
which is a very interesting new feature.

00:10:30.760 --> 00:10:32.700
We're going to be talking about LDAPv3.

00:10:32.700 --> 00:10:35.380
We're going to be talking about
the BSD config file plugins.

00:10:35.380 --> 00:10:38.940
Then we're going to cover
authentication and service discovery.

00:10:38.940 --> 00:10:42.120
How many of you just came
from the zero comp talk?

00:10:42.220 --> 00:10:45.580
We're going to be talking about
service discovery at that top layer

00:10:45.680 --> 00:10:48.870
that Stuart said at the end of his
presentation and how we support both

00:10:48.990 --> 00:10:52.770
Rendezvous and Apple Talk and how this
becomes an integrated story so that

00:10:52.770 --> 00:10:55.890
we support all the service discovery
protocols until Rendezvous takes

00:10:55.890 --> 00:10:57.440
the world over in about three weeks.

00:11:01.430 --> 00:11:03.820
and this time I'd like to
invite Ken Witzk up on stage

00:11:04.070 --> 00:11:06.680
and he'll be talking to you
more about directory services.

00:11:06.710 --> 00:11:07.120
Thank you.

00:11:13.230 --> 00:11:15.760
Okay, first off,
I've been working on directory

00:11:15.760 --> 00:11:18.370
services for over two years now.

00:11:18.370 --> 00:11:21.950
And I am really excited to be here.

00:11:22.050 --> 00:11:24.420
I want to be able to share the
knowledge I've gained through

00:11:24.420 --> 00:11:27.970
those two years with everyone here.

00:11:28.100 --> 00:11:32.680
So let's talk about our first
three topics we've got here.

00:11:33.900 --> 00:11:37.900
What we got here is open source,
where we are,

00:11:37.900 --> 00:11:41.280
we're going to talk about where we are
today and where we're going with Jaguar.

00:11:43.110 --> 00:11:47.630
For Directory Proxy,
we're going to talk about what this means

00:11:47.630 --> 00:11:50.540
for remote access to open directory.

00:11:51.760 --> 00:11:54.840
For LDAP,
we're going to talk specifically of the

00:11:54.840 --> 00:11:58.360
enhancements we have added since 10.1.

00:12:01.990 --> 00:12:06.140
So I know it's been
mentioned many times already.

00:12:06.160 --> 00:12:11.880
Open Directory or Directory Services is
part of open source now.

00:12:13.010 --> 00:12:20.980
You can go get it at that URL.

00:12:21.170 --> 00:12:23.010
What does that mean?

00:12:23.010 --> 00:12:23.010
That means that directory
services for 10.1.

00:12:23.820 --> 00:12:27.380
The product that is shipped right
now is the product out there.

00:12:27.380 --> 00:12:30.310
The source that was
used is now open source.

00:12:32.090 --> 00:12:38.140
What it also means is that any
development that we have done in Jaguar

00:12:38.730 --> 00:12:42.840
Up until this point is also open source.

00:12:42.880 --> 00:12:44.240
We haven't left anything out.

00:12:47.200 --> 00:12:53.300
Now included in that is the API,
the daemon,

00:12:53.310 --> 00:12:58.700
the plugins as we have written them,
LDAPv2, NetInfo, search.

00:13:00.330 --> 00:13:06.480
This is a fantastic opportunity for
plugin developers to see how we have

00:13:06.480 --> 00:13:11.580
done the code and to tell us how to
improve upon our code or to take and

00:13:11.580 --> 00:13:15.360
run with that code and make their
own plugins for their own access

00:13:15.430 --> 00:13:16.920
to their own directory servers.

00:13:21.600 --> 00:13:28.790
For Jaguar,
we plan on also open sourcing DS Agent.

00:13:29.770 --> 00:13:32.150
which is a plugin for LookupD.

00:13:32.280 --> 00:13:37.570
Currently, what we call DS agent
in LookupD is a static

00:13:38.920 --> 00:13:43.320
A static library included
inside LookupD itself.

00:13:43.410 --> 00:13:45.340
It is open source now.

00:13:45.400 --> 00:13:51.890
We also plan on releasing LDAPv3 plugin,
full read/write.

00:13:52.230 --> 00:13:56.240
and as Dave has mentioned already,
the BSD configuration file plugin.

00:13:58.320 --> 00:14:04.140
and we have a series of service
discovery plugins that we also will open

00:14:04.140 --> 00:14:10.030
source and my colleague Jason will talk
about that later in this presentation.

00:14:12.500 --> 00:14:16.760
So let's move on to directory proxy.

00:14:16.850 --> 00:14:20.710
What does that mean for remote access?

00:14:24.440 --> 00:14:31.520
What we want to be able to do is
allow administrators to remotely

00:14:31.520 --> 00:14:37.820
access across the network the
open directory on a server,

00:14:37.860 --> 00:14:38.220
i.e.

00:14:38.220 --> 00:14:41.100
maybe a server in a closet somewhere.

00:14:41.100 --> 00:14:47.490
Maybe that administrator had gone
home for the day and he wants

00:14:47.550 --> 00:14:52.120
to connect in via VPN to access
that server to update something.

00:14:52.120 --> 00:14:55.880
In either case,
We want that remote access.

00:15:03.070 --> 00:15:09.590
To that end, we have made it, I believe,
very concise on how to do this

00:15:09.590 --> 00:15:13.330
conversion or add this capability.

00:15:14.570 --> 00:15:18.720
We need to understand the API dispatch
models as they exist today.

00:15:18.720 --> 00:15:21.090
And we'll go through that right now.

00:15:22.310 --> 00:15:27.700
The local dispatch model,
we have an open directory client.

00:15:30.420 --> 00:15:34.660
That uses the
Directory Service Framework using Moch.

00:15:34.670 --> 00:15:39.260
An API request is sent to the daemon.

00:15:39.260 --> 00:15:41.400
The daemon then properly

00:15:41.660 --> 00:15:48.310
dispatches it to the plugin
that will process the request.

00:15:53.820 --> 00:16:06.590
www.kent.edu/dirtyservice-diamond-blogsp
ot

00:16:08.310 --> 00:16:14.500
For the proxy model, here we have,
let's say, a client machine A.

00:16:15.610 --> 00:16:18.000
Another server machine B.

00:16:18.030 --> 00:16:21.990
And the first thing we need, of course,
is our network.

00:16:24.640 --> 00:16:30.100
The nice thing about this
addition here for proxy is that

00:16:30.360 --> 00:16:31.960
The players still stay the same.

00:16:32.100 --> 00:16:35.240
The only addition now is the network.

00:16:35.310 --> 00:16:39.380
We have an open directory client,
a directory service framework,

00:16:40.630 --> 00:16:45.200
We sent a TCP/IP request
across the network.

00:16:45.280 --> 00:16:47.090
It gets to the daemon.

00:16:47.270 --> 00:16:51.150
There again the daemon
dispatches it to the plugin.

00:16:51.150 --> 00:16:53.630
The plugin processes.

00:16:53.760 --> 00:16:55.190
It goes back.

00:16:56.160 --> 00:16:58.540
The framework receives it.

00:16:58.540 --> 00:17:00.540
The request is done.

00:17:00.620 --> 00:17:03.970
So the question is,
how did we accomplish that?

00:17:05.680 --> 00:17:13.200
Well, let's talk about the key thing in
here is we have 128-bit encryption.

00:17:13.250 --> 00:17:15.710
It is a secure connection.

00:17:16.100 --> 00:17:24.200
[Transcript missing]

00:17:24.550 --> 00:17:28.100
In other words,
if you are accessing remotely,

00:17:28.150 --> 00:17:35.400
you need to be an administrator on
that remote machine to gain access.

00:17:38.450 --> 00:17:43.980
For existing applications out there,
client apps that exist today,

00:17:43.990 --> 00:17:46.040
the changeover is very simple.

00:17:46.040 --> 00:17:49.340
It consists of one API change.

00:17:56.560 --> 00:18:00.310
Currently we have a call to
DSOpenDir service and then a

00:18:00.400 --> 00:18:04.800
series of calls like DSOpenDirNode,
DSGetRecordList,

00:18:04.810 --> 00:18:07.090
whatever the other API calls are.

00:18:07.470 --> 00:18:13.540
The change is in the initial call,
now we just need to call DSOpenDirProxy

00:18:13.550 --> 00:18:18.410
and then the framework takes
care of everything underneath.

00:18:18.760 --> 00:18:22.030
The proxy call would
require an IP address,

00:18:22.030 --> 00:18:24.140
a username and password.

00:18:24.160 --> 00:18:25.810
That's it.

00:18:33.240 --> 00:18:35.150
Now I think a lot of people
are interested in LDAP.

00:18:35.370 --> 00:18:42.680
This is from a client perspective,
not from a plugin perspective because

00:18:42.750 --> 00:18:45.030
this is our plugin we've developed.

00:18:45.910 --> 00:18:49.610
The first thing we're adding is LDAPv3,
read-write.

00:18:49.630 --> 00:18:50.900
You know that already.

00:18:50.900 --> 00:18:52.900
You've heard it a couple times.

00:18:52.900 --> 00:18:56.900
SSL comes with that.

00:18:57.750 --> 00:19:02.950
The second thing we've done is we've
added Minimize Configuration Setup.

00:19:02.950 --> 00:19:03.900
And this is pretty cool.

00:19:04.180 --> 00:19:05.880
We'll touch on that shortly.

00:19:07.650 --> 00:19:11.180
The third thing is we've
expanded our record definitions

00:19:12.280 --> 00:19:15.400
to handle more complex schemas.

00:19:17.130 --> 00:19:19.300
In other words,
we've listened to our customers

00:19:19.900 --> 00:19:21.200
and we've responded here.

00:19:23.400 --> 00:19:30.260
And lastly, we've also added
OpenLDAP Server itself on Mac OS X.

00:19:31.470 --> 00:19:35.170
So let's move on to minimize
configuration setup.

00:19:40.700 --> 00:19:46.400
What we have here is a client
zero configuration story.

00:19:49.230 --> 00:19:56.670
An iBook coming into a network,
receiving information via

00:19:56.670 --> 00:20:02.980
DHCP and retrieving information
via directory services.

00:20:03.460 --> 00:20:09.090
to enable an LDAP directory
server node to be placed on

00:20:09.090 --> 00:20:10.890
the automatic search policy.

00:20:14.500 --> 00:20:21.280
The two components of
this are DHCP option 95,

00:20:23.320 --> 00:20:30.300
This is where the DHCP server
supplies to its clients the

00:20:30.300 --> 00:20:37.760
LDAP URL that directory service
uses to extract server information.

00:20:38.730 --> 00:20:44.020
The other component is that we have
come up with a way to store our config

00:20:44.030 --> 00:20:48.870
information that is now currently
set up through directory setup or

00:20:48.870 --> 00:20:56.230
now what we will be calling directory
access remotely on the server itself.

00:20:57.940 --> 00:21:04.610
So there's no going around to every
machine to set up your configuration.

00:21:16.260 --> 00:21:21.210
We realize that a lot of
LDAP schemas are complex.

00:21:21.210 --> 00:21:26.460
So what we've done is enhance
our ability to accommodate that.

00:21:26.550 --> 00:21:31.170
First off,
we're adding full object class support.

00:21:32.040 --> 00:21:35.730
That is,
instead of just using search base,

00:21:35.730 --> 00:21:40.410
you will be able to use object class,
discriminators,

00:21:40.540 --> 00:21:44.270
for defining record types,
standard record DS record types.

00:21:45.780 --> 00:21:52.200
Secondly, we've added specific attribute
mappings on a per record type basis.

00:21:54.400 --> 00:22:00.600
[Transcript missing]

00:22:00.920 --> 00:22:05.570
by automatically generating
default values for what we call

00:22:05.990 --> 00:22:09.140
the LDAP schema must attributes.

00:22:20.470 --> 00:22:25.710
Open LDAP server in Jaguar
is based on version 2.1.x.

00:22:28.300 --> 00:22:33.380
All changes that are made here
on Mac OS X will be released

00:22:33.380 --> 00:22:37.060
back into the source tree.

00:22:37.070 --> 00:22:39.750
It's LDAPv3 compliant.

00:22:41.500 --> 00:22:45.640
and lastly as Dave has already mentioned,
we want this,

00:22:45.640 --> 00:22:51.100
we have a shared data store and we
want interoperability between LDAP and

00:22:51.100 --> 00:22:53.980
NetInfo clients to that data store.

00:22:58.310 --> 00:23:05.300
Now to get a feel for the
LDAP enhancements that we've made,

00:23:06.000 --> 00:23:10.510
I want to invite Jason Townsen
up here to give you a short demo.

00:23:20.740 --> 00:23:24.150
Alright,
so here I have a Jaguar machine and let's

00:23:24.150 --> 00:23:31.700
just take a look at what we've done with
directory access to configure LDAPv3.

00:23:36.250 --> 00:23:39.780
So you'll also notice before
I get into that that we've

00:23:39.780 --> 00:23:41.180
got a bunch of plugins here.

00:23:41.180 --> 00:23:45.500
So if you remember on 10.1,
if you've ever looked at directory setup,

00:23:45.500 --> 00:23:48.250
there was LDAPv2 and NetInfo.

00:23:48.260 --> 00:23:51.720
And now we've got
BSD configuration files.

00:23:51.720 --> 00:23:52.960
We've got LDAPv3.

00:23:52.960 --> 00:23:55.380
We have some new plugins
for service discovery.

00:23:55.380 --> 00:23:59.460
Directory access is also where
you configure your authentication

00:24:00.240 --> 00:24:02.300
and contact search policies.

00:24:03.040 --> 00:24:06.430
So authentication is what is used
when you log in at login window

00:24:06.430 --> 00:24:08.380
or over personal file sharing.

00:24:08.380 --> 00:24:14.630
And context will be used when
you're searching for email addresses

00:24:14.660 --> 00:24:17.450
in address book or mail app.

00:24:20.600 --> 00:24:24.030
So LDAPv3, you select LDAPv3,
click on configure,

00:24:24.140 --> 00:24:28.000
and you'll notice we have a sheet now.

00:24:28.040 --> 00:24:32.470
It starts off with just showing
the option of whether or not you

00:24:32.470 --> 00:24:35.330
want to use our DHCP LDAP support.

00:24:35.440 --> 00:24:38.150
But if you wanted to do
some manual configuration,

00:24:38.160 --> 00:24:41.500
you can disclose the window, the sheet,
and get a list of

00:24:41.580 --> 00:24:43.660
locally defined servers.

00:24:44.820 --> 00:24:48.500
This is kind of similar
to what we had before.

00:24:48.500 --> 00:24:53.080
So let's say I want to do a
custom configuration first.

00:24:55.600 --> 00:24:59.200
I'll just bring up the
edit dialogue for that.

00:24:59.200 --> 00:25:02.040
Go into search and mappings.

00:25:02.040 --> 00:25:08.200
This is similar to what we had in LDAPv2
for record and attribute type mappings.

00:25:09.170 --> 00:25:13.820
For this example,
I'm just going to map groups and users.

00:25:13.820 --> 00:25:18.280
So I can select both
of those and add them.

00:25:18.280 --> 00:25:20.430
And you'll notice when I map users,
I have search base,

00:25:20.450 --> 00:25:22.790
as we've had in the past.

00:25:23.960 --> 00:25:27.200
So I'll say dc=apple, dc=com.

00:25:27.200 --> 00:25:31.070
But I can also add object
classes like I could say inet

00:25:31.150 --> 00:25:36.120
org person or POSIX account.

00:25:36.900 --> 00:25:39.960
I could also require that both of
those object classes be present

00:25:40.630 --> 00:25:42.500
for any record of the user type.

00:25:44.140 --> 00:25:48.570
In addition to that,
I could add specific attribute type

00:25:48.570 --> 00:25:56.000
mappings only for user records,
such as the real name and record name,

00:25:56.000 --> 00:25:57.950
just to give you an idea.

00:25:58.850 --> 00:26:02.300
For real name,
I might want to map that to CN.

00:26:02.320 --> 00:26:07.950
And record name,
I could map to CN and UID.

00:26:08.430 --> 00:26:10.250
Actually, you know what?

00:26:10.250 --> 00:26:11.920
I want to put UID first.

00:26:11.920 --> 00:26:15.100
So I'll just drag that around
and then we've got that.

00:26:15.100 --> 00:26:16.880
So that's the attribute mappings.

00:26:16.980 --> 00:26:21.490
Now we can also have global attribute
mappings that would show up in this top

00:26:21.770 --> 00:26:24.500
group called default attribute types.

00:26:24.500 --> 00:26:30.790
So for that I could add a
global record name mapping.

00:26:30.790 --> 00:26:30.790
And then I could add a
global record name mapping.

00:26:31.040 --> 00:26:33.000
and just map that to CN.

00:26:33.000 --> 00:26:36.500
So groups would get CN as
the mapping for record name,

00:26:36.500 --> 00:26:40.590
whereas users would get both UID and CN.

00:26:40.630 --> 00:26:42.280
OK.

00:26:42.300 --> 00:26:44.250
So that was a lot of work, wasn't it?

00:26:44.320 --> 00:26:46.400
And you can imagine if
I actually mapped all of the

00:26:46.400 --> 00:26:50.390
attributes that we really want,
like unique ID and password

00:26:50.400 --> 00:26:54.180
or primary group ID,
that it would take quite

00:26:54.180 --> 00:26:55.900
a while to do that.

00:26:55.900 --> 00:27:01.510
So something that we've added as part of
the support for DHCP LDAP is the ability

00:27:01.530 --> 00:27:04.000
to say I want actually a server config.

00:27:04.000 --> 00:27:07.350
So here I can, I can manually

00:27:07.830 --> 00:27:13.500
The domain name of the server
and then for the mappings pop-up,

00:27:13.560 --> 00:27:14.700
pick from server.

00:27:15.480 --> 00:27:18.990
Then optionally specify a search
base where those mappings are stored.

00:27:20.580 --> 00:27:22.620
and I'm done.

00:27:22.620 --> 00:27:25.710
Now,
if I had a DHCP server that was set up

00:27:25.900 --> 00:27:31.200
to tell me the URL to this LDAP server,
I wouldn't have to do anything.

00:27:31.200 --> 00:27:34.920
But you can also have an
intermediate step where if you want

00:27:34.920 --> 00:27:38.610
to manually assign IP addresses,
you can still use server-based

00:27:38.630 --> 00:27:41.440
configuration for that.

00:27:41.440 --> 00:27:43.160
All right.

00:27:43.160 --> 00:27:47.440
So let's go back to the slides.

00:27:47.440 --> 00:27:47.440
So, let's go back to the slides.

00:27:47.440 --> 00:27:47.440
So, let's

00:27:52.200 --> 00:27:58.770
We're going to talk about authentication
and service discovery on Jaguar.

00:27:58.910 --> 00:28:03.760
As Dave mentioned, we are moving beyond
crypt passwords on Jaguar.

00:28:04.130 --> 00:28:06.980
Applause if you feel like it.

00:28:07.600 --> 00:28:08.600
Thank you.

00:28:08.600 --> 00:28:11.640
So you may know,
if you're applauding about this,

00:28:11.720 --> 00:28:12.880
you probably know what Crypt is.

00:28:12.880 --> 00:28:15.980
You know that Unix is
historically based on Crypt,

00:28:16.030 --> 00:28:21.100
and Mac OS X has used Crypt stored
in the user's record in NetInfo.

00:28:21.420 --> 00:28:25.180
On Jaguar, for any particular user,
this may not be the case.

00:28:25.180 --> 00:28:30.420
We may be using an MD5 password stored
in the user's record instead of crypt.

00:28:30.420 --> 00:28:37.060
We might be using the password server
or Kerberos-based authentication.

00:28:37.060 --> 00:28:39.840
Let me interject and say,
for Kerberos-based authentication,

00:28:39.840 --> 00:28:42.110
if you're interested in this,
stay where you are,

00:28:42.110 --> 00:28:45.580
because we've got the Kerberos
session coming up next in this room,

00:28:45.580 --> 00:28:47.280
and it's going to be great.

00:28:47.280 --> 00:28:49.710
I encourage you to check that out.

00:28:52.900 --> 00:28:56.060
In order to support all of these
different types of password storage,

00:28:56.060 --> 00:29:00.900
you need to use one of our
password verification APIs.

00:29:00.900 --> 00:29:05.530
Don't use getpwnam and crypt,
because when you call getpwnam,

00:29:05.530 --> 00:29:09.800
there's no guarantee that a crypt
password is going to come back for you.

00:29:09.800 --> 00:29:12.320
So you need to use one
of these abstractions.

00:29:12.320 --> 00:29:13.630
So let me go over them.

00:29:13.640 --> 00:29:16.930
There's three of them
that we've listed here.

00:29:16.930 --> 00:29:20.990
The security framework provides
password verification and

00:29:20.990 --> 00:29:23.010
a standard user experience.

00:29:23.010 --> 00:29:27.860
This is what's used when you're
clicking on the lock button in directory

00:29:27.860 --> 00:29:30.420
access or in system preferences.

00:29:30.420 --> 00:29:36.660
So it's used often when you need to gain
administrator privileges to do something.

00:29:36.670 --> 00:29:41.870
The second one is PAM,
or pluggable authentication modules.

00:29:41.870 --> 00:29:47.640
This is an API that is available
cross-platform on Linux and

00:29:47.680 --> 00:29:50.670
Solaris and other BSD platforms.

00:29:50.680 --> 00:29:58.340
So, it's a good choice if you want to
do cross-platform code and keep the

00:29:58.340 --> 00:30:01.530
same APIs across all your platforms.

00:30:02.540 --> 00:30:04.780
Finally, we have Directory Services.

00:30:04.780 --> 00:30:08.880
Directory Services is the most
flexible because it allows you,

00:30:08.880 --> 00:30:11.910
in addition to simple password
verification where you have

00:30:11.940 --> 00:30:14.580
a username and a password and
you want an answer of yes,

00:30:14.630 --> 00:30:17.880
that's good, or no, it's bad,
you can do a challenge

00:30:17.880 --> 00:30:22.840
response authentication,
such as APOP or CRAM MD5,

00:30:23.020 --> 00:30:28.310
and support that authentication
through a server,

00:30:28.310 --> 00:30:28.310
such as a mail server.

00:30:30.010 --> 00:30:34.310
Directory Services provides
no standard user experience.

00:30:34.320 --> 00:30:37.010
It's a low-level API,
so that would be a reason to

00:30:37.010 --> 00:30:42.370
go with security framework if
you need the user interface.

00:30:44.140 --> 00:30:48.450
So now that we're adding all
these types of password storage,

00:30:48.480 --> 00:30:52.670
how do we know when one of these
requests comes in what to do?

00:30:52.760 --> 00:30:56.160
Well, we've added a new attribute called
the authentication authority.

00:30:56.160 --> 00:30:59.050
This is an optional attribute
for the user record,

00:30:59.050 --> 00:31:04.410
and it tells us what we need to
do to authenticate that user.

00:31:04.920 --> 00:31:09.500
We've defined four major types
of values for this attribute.

00:31:09.580 --> 00:31:10.640
We've got basic.

00:31:10.640 --> 00:31:14.840
This is the legacy behavior,
which is crypt.

00:31:14.840 --> 00:31:18.800
The second one is basic specific,
which would be used, for example,

00:31:18.800 --> 00:31:19.680
for MD5.

00:31:19.680 --> 00:31:24.970
Any other type of situation where you're
storing a hash in the user's record,

00:31:25.180 --> 00:31:28.220
but you might need a
different transfer function.

00:31:28.660 --> 00:31:30.430
The third one is password server.

00:31:30.430 --> 00:31:33.920
I'm going to go into
more detail on that soon.

00:31:33.920 --> 00:31:36.080
And Kerberos.

00:31:36.680 --> 00:31:39.090
We're looking to expand
this in the future,

00:31:39.090 --> 00:31:42.000
so we may add more in the future,
but we've designed it so

00:31:42.000 --> 00:31:43.350
that it can be extensible.

00:31:46.960 --> 00:31:50.220
So,
some of the example values you might see,

00:31:50.220 --> 00:31:53.180
the format is semicolon delimited.

00:31:53.180 --> 00:31:59.180
We have the version, the tag,
and optionally tag data.

00:31:59.180 --> 00:32:01.560
In the case the attribute is missing,
which would be,

00:32:01.590 --> 00:32:06.480
which would happen when you, for example,
you upgrade a 10.1 machine to Jaguar,

00:32:06.480 --> 00:32:09.710
we continue using Crypt as
we have in the past.

00:32:10.000 --> 00:32:14.360
If it explicitly says basic,
we will use Crypt.

00:32:14.360 --> 00:32:16.060
And then we've got some
other examples there.

00:32:16.060 --> 00:32:18.110
For basic specifically, we might say MD5.

00:32:18.110 --> 00:32:22.270
That would tell us what
the function is to use for,

00:32:22.340 --> 00:32:25.420
to create the hash.

00:32:25.420 --> 00:32:27.580
And for password server,
we would store in the data

00:32:27.580 --> 00:32:35.210
the network address of the
server and an ID for the user.

00:32:35.290 --> 00:32:38.180
And for Kerberos,
we could specify the Realm name.

00:32:41.740 --> 00:32:44.860
So, I've mentioned password
server a couple of times.

00:32:44.860 --> 00:32:49.440
This is a really exciting feature
that we're adding in Jaguar Server.

00:32:49.490 --> 00:32:51.410
And it's based on a
standard called SASSL,

00:32:51.410 --> 00:32:55.720
which stands for Simple Authentication
and Security Layer.

00:32:55.720 --> 00:32:58.970
This is a standard that
was developed to add

00:32:59.580 --> 00:33:05.780
Secure authentication support to
existing protocols such as IMAP or FTP.

00:33:05.880 --> 00:33:08.850
But we've taken that standard
and made it into its own protocol

00:33:08.850 --> 00:33:10.400
with the password server.

00:33:10.400 --> 00:33:14.190
So every time an
authentication is performed,

00:33:14.190 --> 00:33:18.500
there is a SASSL method in use
and it's a standard that could

00:33:18.600 --> 00:33:22.560
potentially be proxied through
directory services through a

00:33:22.560 --> 00:33:25.290
particular server like a mail server.

00:33:26.600 --> 00:33:29.620
The password server provides
only password verification.

00:33:29.630 --> 00:33:34.120
This is very important because it
means that there is no password

00:33:34.140 --> 00:33:36.670
recovery over the network.

00:33:36.670 --> 00:33:40.830
So it's not possible to do an
offline attack against a password

00:33:40.880 --> 00:33:43.330
server across the network.

00:33:44.170 --> 00:33:48.940
The other big win that we get by forcing
everyone to use the password server

00:33:48.940 --> 00:33:52.800
any time they touch a password is
that we can enforce password policies.

00:33:52.800 --> 00:33:57.930
So we can say that this user,
for example, must have a ten character

00:33:57.930 --> 00:34:00.970
password or greater,
or all of the users on my password

00:34:00.970 --> 00:34:03.800
server must have ten character passwords.

00:34:03.800 --> 00:34:08.610
Also, we could say that every three
months I want the password to expire

00:34:08.610 --> 00:34:10.810
and the user have to reset it.

00:34:13.020 --> 00:34:19.580
So let's take a look at an example of
how we might use the password server.

00:34:19.620 --> 00:34:22.780
Here we've got Mac OS X client,
a Jaguar server,

00:34:22.910 --> 00:34:26.580
a directory server and a password server.

00:34:26.580 --> 00:34:28.370
In this example,
we're representing all of

00:34:28.370 --> 00:34:30.730
these as separate machines,
but depending upon the

00:34:30.730 --> 00:34:33.510
layout of the network,
we could just have all three of

00:34:33.690 --> 00:34:37.590
those servers running on the same
machine or combine two of them.

00:34:37.910 --> 00:34:41.120
It's totally flexible in that respect.

00:34:42.270 --> 00:34:44.710
So the first step is that the
authentication information is sent

00:34:44.820 --> 00:34:46.470
from the client to the server.

00:34:46.470 --> 00:34:49.360
This would include the user name,
for example.

00:34:50.770 --> 00:34:57.540
Second step, the Jaguar server will look
up the user's record and

00:34:57.850 --> 00:35:01.130
Directory services will consult the
authentication authority to determine

00:35:01.580 --> 00:35:04.450
what type of authentication to perform.

00:35:04.530 --> 00:35:07.230
And in this case,
the user's record will say this

00:35:07.230 --> 00:35:10.090
is a password server user in
their authentication authority.

00:35:11.320 --> 00:35:15.460
So the next step is that the
password is verified using SASSL,

00:35:15.460 --> 00:35:19.680
using the appropriate SASSL mechanism

00:35:19.780 --> 00:35:20.700
For that scenario.

00:35:20.700 --> 00:35:24.900
So depending upon whether the
ClearText password is already provided to

00:35:24.900 --> 00:35:29.280
directory services or it's using a proxy,
one of the authentication methods

00:35:29.380 --> 00:35:31.850
will determine which one gets used.

00:35:32.540 --> 00:35:34.030
Finally, we have success.

00:35:34.190 --> 00:35:36.490
The client is given access to the server.

00:35:42.560 --> 00:35:45.860
As I mentioned before, we're using SASSL.

00:35:45.860 --> 00:35:49.480
We're supporting existing
methods that were defined by

00:35:49.490 --> 00:35:53.180
IANA for SASSL over TCP/IP.

00:35:53.180 --> 00:35:54.650
We've also added some new ones.

00:35:54.650 --> 00:35:59.130
Some of the existing ones,
examples might be CRAMMD5 or APOP.

00:35:59.140 --> 00:36:02.960
Some of the new ones
include two-way random and

00:36:07.330 --> 00:36:10.760
The password server also provides
a secure set password operation.

00:36:10.760 --> 00:36:15.280
So even though the password change is
happening over the network potentially,

00:36:15.280 --> 00:36:18.690
it's not sending the
password in the clear.

00:36:21.800 --> 00:36:26.020
So, to review, we're going to support
more than just Crypt.

00:36:26.090 --> 00:36:29.980
So, to get ready for that change,
your application needs to be using

00:36:29.980 --> 00:36:33.040
one of our password verification APIs.

00:36:33.040 --> 00:36:36.330
And if you use those APIs,
then the password server

00:36:36.330 --> 00:36:38.590
will be transparent to you.

00:36:39.480 --> 00:36:40.920
and you won't have to do anything else.

00:36:40.920 --> 00:36:45.970
Also, if we add additional authentication
authorities in the future beyond Jaguar,

00:36:46.200 --> 00:36:49.100
you'll pick those up when
they come online too.

00:36:51.890 --> 00:36:55.780
So let's talk about service discovery
and shift gears a little bit.

00:36:55.790 --> 00:36:59.950
I'm sure basically the entire room here
was over at the rendezvous session.

00:36:59.950 --> 00:37:00.800
I was there.

00:37:00.800 --> 00:37:04.910
And so this is a really exciting
area for Apple right now.

00:37:06.080 --> 00:37:09.180
From the perspective
of directory services,

00:37:09.220 --> 00:37:13.210
we've got an API called
Network Service Location.

00:37:13.300 --> 00:37:15.560
That's our high level
API for service discovery.

00:37:15.560 --> 00:37:20.780
This has been available as part of
TENS since day one and it actually

00:37:20.780 --> 00:37:22.760
was available on nine as well.

00:37:22.850 --> 00:37:28.020
It provides access to the raw
data if you need that or you can

00:37:28.080 --> 00:37:29.820
put up a standard user interface.

00:37:30.130 --> 00:37:33.770
An example of this that you're
probably all familiar with is connect

00:37:33.770 --> 00:37:35.630
to server in the finder uses NSL.

00:37:38.490 --> 00:37:42.900
In Jaguar,
NSL is entirely based on open directory.

00:37:42.900 --> 00:37:47.450
So this means that we're merging both
static directories like LDAP along

00:37:47.750 --> 00:37:52.130
with dynamic directories like
Rendezvous and presenting them all

00:37:52.130 --> 00:37:54.800
together through the same abstraction.

00:37:54.800 --> 00:37:58.530
It also means that when you write
a directory services plug-in that

00:37:58.530 --> 00:38:04.700
your plug-in can be available to
NSL and show up in Connect-to-Server.

00:38:05.890 --> 00:38:09.320
As we mentioned before,
and you saw in Directory access,

00:38:09.390 --> 00:38:12.120
we've got a bunch of new
service discovery plug-ins.

00:38:12.150 --> 00:38:15.780
Apple Talk, SLP and Rendezvous are
just some examples.

00:38:16.460 --> 00:38:20.760
The other change is that we've
provided a new logical structure

00:38:21.040 --> 00:38:23.620
in the connect to server dialogue.

00:38:23.620 --> 00:38:29.720
There's a local item which
provides a collection of all of

00:38:29.850 --> 00:38:34.180
the service discovery data that is
considered local to your machine.

00:38:34.650 --> 00:38:38.320
Rendezvous on the local
multicast would be part of that,

00:38:38.620 --> 00:38:44.200
as well as your default SLP scope,
your local Apple Talks zone,

00:38:44.370 --> 00:38:49.350
the local NetInfo domain, and so on.

00:38:49.730 --> 00:38:52.760
Then if what you're looking
for is not local to you,

00:38:52.780 --> 00:38:55.970
you can go to the network item
and that has the full hierarchy

00:38:56.080 --> 00:38:57.470
of everything that's available.

00:39:02.000 --> 00:39:06.660
So existing applications that are already
using NSL will automatically benefit

00:39:06.660 --> 00:39:12.650
from our new plug-ins and will not have
to change anything to continue working.

00:39:12.900 --> 00:39:16.740
So NSL will automatically,
in the connect to server

00:39:16.980 --> 00:39:21.380
dialogue if you use that,
convert from the rendezvous data

00:39:21.770 --> 00:39:23.450
into a URL that you can use.

00:39:28.590 --> 00:39:32.140
So service registration
is the other half of this.

00:39:32.150 --> 00:39:37.630
If you're writing a server or a
service and you want to have support

00:39:37.780 --> 00:39:40.910
for discovering it on the network,
you need to register.

00:39:41.260 --> 00:39:46.590
You should add support for
Rendezvous and register using

00:39:47.410 --> 00:39:53.300
either CFNet services or the low
level DNS service discovery APIs and

00:39:53.300 --> 00:39:59.130
continue supporting legacy service
discovery for maximum compatibility.

00:39:59.140 --> 00:40:04.080
If you're being browsed
by a Mac OS 9 machine,

00:40:04.130 --> 00:40:09.630
then you might want to continue using
Apple Talk or SLP because that will

00:40:10.270 --> 00:40:13.730
not have support for Rendezvous.

00:40:13.760 --> 00:40:16.120
You should also consider,
when you're looking at

00:40:16.120 --> 00:40:19.660
service registration,
adding a preference so that a network

00:40:19.660 --> 00:40:24.280
administrator could decide that they only
want to use Rendezvous on their network.

00:40:25.830 --> 00:40:29.250
and give the administrator the
choice rather than assuming that you

00:40:29.280 --> 00:40:30.790
should register on everything always.

00:40:33.480 --> 00:40:36.890
So in summary,
NSL is a high level convenient

00:40:36.890 --> 00:40:39.210
API to use for service discovery.

00:40:39.300 --> 00:40:42.860
It provides support for many
protocols including rendezvous

00:40:42.860 --> 00:40:45.280
as well as existing protocols.

00:40:45.320 --> 00:40:52.590
It's got support for the raw data as
well as the high level human interface.

00:40:52.790 --> 00:40:55.580
and you should add Rendezvous
Service Registration to your product

00:40:56.170 --> 00:40:59.610
because this is Apple's strategy
moving forward and we believe

00:40:59.690 --> 00:41:03.340
it's going to be much better than
anything we've done in the past.

00:41:04.990 --> 00:41:07.200
Keep in mind, though,
you should allow the customer

00:41:07.200 --> 00:41:11.520
choice as to which of these service
discovery protocols they should use.

00:41:13.990 --> 00:41:16.240
At this point we've got another demo.

00:41:16.240 --> 00:41:20.890
So, go back to the demo screen.

00:41:21.170 --> 00:41:25.130
And I just wanted to show you what
I mean by the local and network

00:41:25.510 --> 00:41:28.500
items in connect to server dialog.

00:41:28.500 --> 00:41:31.580
So, here I've got local.

00:41:31.580 --> 00:41:34.630
I take a look at that.

00:41:34.750 --> 00:41:37.420
There'll be a couple of
items showing up here.

00:41:37.460 --> 00:41:41.130
Right now I'm only using,
on the client side I've disabled

00:41:41.130 --> 00:41:44.850
a couple of plug-ins you may have
noticed before in directory access.

00:41:44.860 --> 00:41:51.860
Actually I have Apple Talk on still,
but I've disabled SLP.

00:41:51.860 --> 00:41:55.490
Right now I'm only looking at

00:41:57.220 --> 00:42:01.400
The next slide is a little
bit more complicated.

00:42:01.400 --> 00:42:06.350
I'm going to show you a little bit
more of a list of the things that

00:42:06.350 --> 00:42:06.350
we're going to be talking about.

00:42:06.350 --> 00:42:06.350
I'm going to show you a little bit
more of a list of the things that

00:42:06.350 --> 00:42:06.350
we're going to be talking about.

00:42:06.350 --> 00:42:06.350
Here's one that's coming over Apple Talk.

00:42:06.350 --> 00:42:06.350
This is actually the machine
right next to the demo machine.

00:42:06.560 --> 00:42:09.400
What I can do is,
if I want on the client,

00:42:09.400 --> 00:42:12.960
I could disable AppleTalk in
directory access,

00:42:12.980 --> 00:42:16.260
and that would take it out of
connect to server on this machine.

00:42:16.280 --> 00:42:18.870
But it's only changing what
my view of the network is.

00:42:22.000 --> 00:42:23.820
I'll just go ahead and do that.

00:42:23.820 --> 00:42:24.880
Maybe turn off.

00:42:24.880 --> 00:42:31.400
MDNS is the name of the rendezvous
plugin in the Jaguar seed.

00:42:33.500 --> 00:42:37.160
So if I do that, go back,
take a look at network.

00:42:37.280 --> 00:42:38.220
OK.

00:42:38.220 --> 00:42:40.400
So now nothing's there.

00:42:40.400 --> 00:42:44.310
But if I turn AppleTalk back on,

00:42:45.920 --> 00:42:47.370
Maybe I'll get something.

00:42:47.370 --> 00:42:49.950
Actually,
it looks like I'm getting nothing.

00:42:49.960 --> 00:42:52.970
Anyway,
but the point is that now that we have

00:42:52.970 --> 00:42:57.910
all these plug-ins and directory access,
we have control over which

00:42:57.910 --> 00:43:00.720
service discovery protocols
we're using as a client.

00:43:00.860 --> 00:43:03.840
And in addition to that,
it'd be really great if the services

00:43:03.840 --> 00:43:07.940
started giving people this control
so that we could use the service

00:43:08.000 --> 00:43:11.560
discovery protocol that's best for
the environment that we're working in.

00:43:14.740 --> 00:43:18.460
At this point,
I'd like to hand it back to

00:43:18.480 --> 00:43:25.060
David O'Rourke for a summary.

00:43:28.710 --> 00:43:29.700
and the rest of the team.

00:43:29.700 --> 00:43:30.700
There's the machine.

00:43:30.860 --> 00:43:34.040
We're going to cover just a quick
summary to go over what we did and

00:43:34.180 --> 00:43:37.170
hopefully highlight some of the points
and then we'll bring Tom Weyer up,

00:43:37.320 --> 00:43:41.900
who I'm sure you're all familiar with,
to go into some Q&A.

00:43:41.900 --> 00:43:43.640
This has been a big week for us.

00:43:43.640 --> 00:43:44.900
Open Directory.

00:43:44.940 --> 00:43:47.080
Directory Server, Directory Access,
Directory Tools.

00:43:47.460 --> 00:43:50.390
Open source, download the source,
email us with your bugs,

00:43:50.390 --> 00:43:54.540
email us with your source enhancements,
email us with your feature requests.

00:43:54.540 --> 00:43:57.910
But also use this as a repository if
you have custom site requirements.

00:43:58.090 --> 00:44:01.690
This provides a fantastic source
base for you guys to start with.

00:44:01.700 --> 00:44:03.450
If you want to modify the
LDAP server or your LDAP client

00:44:03.600 --> 00:44:06.210
to do something just slightly
different than how Apple shipped it,

00:44:06.210 --> 00:44:09.340
it's now completely possible for
you to start with our LDAP plugin,

00:44:09.340 --> 00:44:12.740
modify it and deploy it at
your site for your needs.

00:44:12.780 --> 00:44:14.000
Jaguar features.

00:44:14.000 --> 00:44:17.100
We've got an LDAPv3
server and client story.

00:44:17.110 --> 00:44:18.820
We've got read/write access.

00:44:18.920 --> 00:44:22.820
We've got a near zero comp
story on DHCP integration.

00:44:22.820 --> 00:44:25.790
I want to spend a little bit of time
on this and just reemphasize this.

00:44:25.880 --> 00:44:28.440
The goal of this is that someone
can take an iBook into an

00:44:28.440 --> 00:44:32.300
institution or managed network,
open it up and from the DHCP server

00:44:32.330 --> 00:44:36.270
configured on that campus learn about
the LDAP server without them having

00:44:36.270 --> 00:44:37.980
to go to Directory Access at all.

00:44:37.980 --> 00:44:40.350
I think we've substantially
upgraded Directory Access,

00:44:40.350 --> 00:44:41.360
made it easier to use.

00:44:41.420 --> 00:44:45.020
We'll be looking for your feedback
based on your experience with it.

00:44:45.110 --> 00:44:47.440
But the goal really is that
they shouldn't have to go

00:44:47.440 --> 00:44:49.380
to Directory Access at all.

00:44:49.400 --> 00:44:50.770
Not even just click one or two buttons.

00:44:50.850 --> 00:44:53.060
They should have to
do absolutely nothing.

00:44:53.060 --> 00:44:55.910
We will learn about the LDAP server
automatically and automatically

00:44:56.140 --> 00:45:00.250
configure all of our schema mappings
without anybody having to do anything.

00:45:00.260 --> 00:45:02.470
So we've got read/write,
DHCP integration,

00:45:02.470 --> 00:45:05.590
the ability to download our
configuration from the LDAP server

00:45:05.590 --> 00:45:10.420
itself so I don't have to visit 3,000
iBooks and reenter that information.

00:45:10.420 --> 00:45:13.000
And we have complex schema support
so that we can accommodate more

00:45:13.000 --> 00:45:17.110
of the schemas that have already
been deployed at many sites.

00:45:17.530 --> 00:45:20.750
We have Directory Proxy,
which is a very interesting feature

00:45:20.750 --> 00:45:24.840
that allows you to take your existing
directory API based application and

00:45:25.030 --> 00:45:28.650
allow it to remotely go out and see
the directories from the perspective

00:45:28.700 --> 00:45:30.310
of another machine on the network.

00:45:30.470 --> 00:45:33.470
This makes remote administration
tasks almost trivial if you've

00:45:33.470 --> 00:45:36.400
based your read/write software
on the Directory Access API.

00:45:36.400 --> 00:45:38.780
We have authentication changes.

00:45:38.950 --> 00:45:43.400
If you take one message away from it,
that perhaps should be the message.

00:45:43.400 --> 00:45:45.400
We are going to try to get rid of Crypt.

00:45:45.400 --> 00:45:46.400
Your app should get off
of relying on the Crypt.

00:45:46.440 --> 00:45:48.360
Get on to an abstraction API.

00:45:48.490 --> 00:45:52.350
Security Framework, PAM,
Directory Services.

00:45:52.440 --> 00:45:55.190
Work with Tom, work with me,
work with anybody and we'll help you

00:45:55.250 --> 00:45:59.400
determine what the right abstraction is
for you to adopt in your application.

00:46:00.840 --> 00:46:04.630
Jaguar features NSL which is a long
standing technology and the engineer

00:46:04.630 --> 00:46:06.450
who brought it to us is in the audience.

00:46:06.460 --> 00:46:07.460
He's been working on it hard.

00:46:07.460 --> 00:46:11.380
He and I have been cooperating the last
year to get NSL off of its own plugin

00:46:11.380 --> 00:46:15.510
architecture and onto directory services
so that it could automatically benefit

00:46:15.720 --> 00:46:18.730
from the LDAP v3 work we were doing,
the search policy work we were doing,

00:46:18.730 --> 00:46:21.520
the automatic and zero-conf work
that we've been doing to discover

00:46:21.520 --> 00:46:23.060
DHCP and the rendezvous work.

00:46:23.060 --> 00:46:26.640
We've been working very closely with
Stuart Cheshire and all of that work.

00:46:26.640 --> 00:46:29.190
We've reorganized NSL so it now
has a notion of what's local to

00:46:29.190 --> 00:46:31.340
you and what your network is.

00:46:31.340 --> 00:46:33.480
We think there's a lot
of enhancements there.

00:46:33.480 --> 00:46:36.500
Add rendezvous registration
to your networking product.

00:46:36.680 --> 00:46:39.480
I saw the demo in the keynote of iTunes.

00:46:39.490 --> 00:46:40.920
You saw Stuart's demo today.

00:46:41.000 --> 00:46:42.860
Rendezvous is a very exciting technology.

00:46:42.860 --> 00:46:46.050
This is something everybody
who does networking software

00:46:46.050 --> 00:46:47.470
should be looking into.

00:46:47.630 --> 00:46:48.540
Jaguar servers.

00:46:48.540 --> 00:46:50.760
We're going to include a
SASSL based password server.

00:46:50.760 --> 00:46:51.760
We think this is a huge deal.

00:46:51.760 --> 00:46:54.730
It will allow you to get your
passwords out of a readable database

00:46:54.730 --> 00:46:57.990
and into a centralized and hopefully
safe repository to where people

00:46:58.070 --> 00:46:59.970
can't download the password database.

00:47:00.010 --> 00:47:04.320
It will also allow you to
support authentication methods.

00:47:04.320 --> 00:47:06.930
It will allow you to enforce policies.

00:47:07.260 --> 00:47:09.150
Jaguar Kerberos support.

00:47:09.160 --> 00:47:10.410
You heard that in the server session.

00:47:10.420 --> 00:47:12.780
I believe it was
mentioned in the keynote.

00:47:12.780 --> 00:47:14.770
There's this whole session,
a whole hour and a half after

00:47:14.870 --> 00:47:18.320
this session for which we'll
be talking about Kerberos.

00:47:18.320 --> 00:47:21.170
Apple's putting a lot of
effort into Kerberos and

00:47:21.210 --> 00:47:23.190
we're very excited about that.

00:47:23.590 --> 00:47:27.180
For more information, again,
Stuart Cheshire had a really

00:47:27.180 --> 00:47:29.260
interesting point in his zero comp.

00:47:29.330 --> 00:47:32.060
He kept saying Apple,
we didn't invent anything here.

00:47:32.060 --> 00:47:33.320
We're not trying to invent anything here.

00:47:33.390 --> 00:47:35.310
Well, to some degree,
the directory services team

00:47:35.310 --> 00:47:36.380
has taken the same vein.

00:47:36.380 --> 00:47:38.230
Apple seems to have arrived
at this conclusion at

00:47:38.250 --> 00:47:39.470
similar time points in life.

00:47:39.590 --> 00:47:41.650
LDAPv3, we didn't invent that,
but we're adopting it

00:47:41.650 --> 00:47:42.650
and making it better.

00:47:42.660 --> 00:47:45.020
SASL, we didn't invent that,
but we're adopting it and

00:47:45.020 --> 00:47:46.460
we're going to make it better.

00:47:46.460 --> 00:47:51.740
Directory service and location, NSL,
all of this is existing documentation.

00:47:51.740 --> 00:47:53.300
That's the second bullet on the slide.

00:47:53.520 --> 00:47:56.540
And directory services is, once again,
open source.

00:47:56.540 --> 00:48:00.130
For a roadmap,
so you need to go back in time

00:48:00.240 --> 00:48:03.020
and go to Tuesday at 2 p.m.

00:48:03.020 --> 00:48:06.000
and you would see me speak about
directory services being open source.

00:48:06.000 --> 00:48:10.250
Then you can hang out for another day,
eat at a different place Tuesday night,

00:48:10.260 --> 00:48:12.320
and go to the session
on security Wednesday.

00:48:12.320 --> 00:48:16.820
Zero comp networking only requires you
to travel back in time a couple of hours.

00:48:16.820 --> 00:48:18.230
And stay in your seats.

00:48:18.230 --> 00:48:20.020
Don't let anyone take them.

00:48:20.020 --> 00:48:21.040
In fact, the room's already full.

00:48:21.040 --> 00:48:23.480
I don't think we should let
anybody new into the room.

00:48:23.500 --> 00:48:24.610
For the Kerberos talk.

00:48:24.700 --> 00:48:25.700
Let's not, they were late.

00:48:25.890 --> 00:48:26.780
They didn't come to my talk.

00:48:26.900 --> 00:48:28.620
They shouldn't deserve to see Kerberos.

00:48:28.620 --> 00:48:31.050
So,
if everyone will just stay in the room

00:48:31.180 --> 00:48:34.530
when we're done and tell everyone else
to go away who cares about Kerberos,

00:48:34.540 --> 00:48:36.200
that's coming up right after this.

00:48:37.620 --> 00:48:40.170
and The person to contact is Tom Weier.

00:48:40.200 --> 00:48:42.180
In fact,
I recommend you register that email

00:48:42.180 --> 00:48:50.610
address at any website you visit
or anything along those lines.

00:48:55.870 --> 00:48:58.870
Hopefully some of the email that he'll
receive after me telling you to do

00:48:58.930 --> 00:49:03.330
that on tape will actually be relevant
to this session or other sessions

00:49:03.420 --> 00:49:04.770
that Tom's been responsible for.

00:49:05.120 --> 00:49:06.550
So I appreciate your time.

00:49:06.560 --> 00:49:08.910
At this point in time,
I think it's time to play Stump

00:49:08.910 --> 00:49:11.780
the Experts and there's microphones
in the audience and I'm going

00:49:11.780 --> 00:49:13.370
to invite Tom Weyer up on stage.