WEBVTT

00:00:05.380 --> 00:00:06.300
Good morning.

00:00:06.300 --> 00:00:08.760
Welcome to session 106,
AppleScript Update.

00:00:08.760 --> 00:00:10.660
AppleScript is ten years old.

00:00:10.660 --> 00:00:13.530
It's mature, it's powerful, it rocks.

00:00:13.620 --> 00:00:16.200
And today we're going to share some
of our plans on what we're going

00:00:16.200 --> 00:00:20.550
to do to make it even better for
software developers and scripters.

00:00:20.690 --> 00:00:25.170
And so to kick it off,
I'd like to introduce the manager of

00:00:25.170 --> 00:00:31.600
the components and scripting group who
recently celebrated 25 years at Apple.

00:00:31.600 --> 00:00:31.600
Please welcome Mr.

00:00:31.600 --> 00:00:31.600
Chris Espinosa.

00:00:35.860 --> 00:00:39.400
Thank you, Jason, and welcome everybody
to yet another year.

00:00:39.400 --> 00:00:43.800
I just want to say that I've done a
lot of things in my 25 years at Apple,

00:00:43.990 --> 00:00:47.800
and I have never been in one job for more
than three years except for this one.

00:00:47.800 --> 00:00:50.670
And I think this is my fifth
consecutive developer conference

00:00:50.670 --> 00:00:52.560
delivering the AppleScript Update.

00:00:52.560 --> 00:00:56.790
And as long as you don't get tired of it,
I won't get tired of it.

00:00:56.980 --> 00:01:00.440
So it's our annual overview
of what happened in the

00:01:00.440 --> 00:01:03.240
last year with AppleScript,
what the current state is,

00:01:03.240 --> 00:01:04.900
and what we're going to do next year.

00:01:04.900 --> 00:01:08.160
We're going to review the changes
since the last developer conference,

00:01:08.290 --> 00:01:12.120
since 1.7, I think,
was the last version that was

00:01:12.120 --> 00:01:16.260
current as of this time last year,
and look forward to what's coming

00:01:16.260 --> 00:01:21.330
up in AppleScript 1.9 in Jaguar,
which is on your developer preview CD,

00:01:21.540 --> 00:01:25.760
and AppleScript 10, our new architecture.

00:01:25.970 --> 00:01:28.540
What you're going to learn in
this session is three things,

00:01:28.540 --> 00:01:29.100
mainly.

00:01:29.100 --> 00:01:32.130
There are some changes in the
Apple Event Manager that any

00:01:32.300 --> 00:01:37.700
Apple event client application,
that is, any scriptable application,

00:01:37.880 --> 00:01:39.780
is going to have to be
careful to understand.

00:01:39.850 --> 00:01:43.550
There are going to be some
changes in AppleScript 1.9 that

00:01:43.550 --> 00:01:45.500
you'll need to be aware of.

00:01:45.500 --> 00:01:51.170
And I want to show you what you'll be
able to do with the new architecture

00:01:51.170 --> 00:01:51.170
when it comes out in Jaguar.

00:01:51.390 --> 00:01:53.690
Brief review of the technology framework.

00:01:53.830 --> 00:01:56.530
AppleScript is a middleware
layer that sits on top of

00:01:56.630 --> 00:02:00.700
Apple Events that it relies on for
inter-application communication,

00:02:00.700 --> 00:02:04.860
and is used by both the
Cocoa and Carbon environments.

00:02:05.030 --> 00:02:08.360
AppleScript is usable by both
Cocoa and Carbon applications,

00:02:08.360 --> 00:02:11.270
so it really doesn't matter which
side of the fence you're sitting on.

00:02:11.590 --> 00:02:13.990
AppleScript Studio,
which you'll learn about

00:02:14.120 --> 00:02:17.330
in a session later today,
is in fact a very big,

00:02:17.340 --> 00:02:21.290
very sophisticated Carbon application
that you can customize--

00:02:21.290 --> 00:02:24.400
Cocoa application that you
can customize with AppleScript.

00:02:24.470 --> 00:02:28.930
There's also a parallel version of
AppleScript in the classic environment.

00:02:28.940 --> 00:02:33.610
There's AppleScript parallel versions
for every version of Mac OS 9 up

00:02:33.610 --> 00:02:38.740
to 9.2.2 and for classic that we're
trying to keep version-for-version

00:02:38.740 --> 00:02:41.500
compatible with AppleScript on 10.

00:02:41.730 --> 00:02:44.000
For a very limited time.

00:02:44.160 --> 00:02:47.040
It won't be much longer.

00:02:47.530 --> 00:02:50.850
What I want to do and what I want to
do every year is thank you all for

00:02:50.850 --> 00:02:52.970
shipping your scriptable applications.

00:02:53.130 --> 00:02:54.960
It's been a great year.

00:02:54.960 --> 00:02:58.140
Every one of these applications
either uses AppleScript,

00:02:58.250 --> 00:03:01.280
is scriptable,
or deals with AppleScript like

00:03:01.420 --> 00:03:03.200
firing off scripts in some way.

00:03:03.580 --> 00:03:06.580
And these are all Mac OS X applications
that have shipped or been

00:03:06.580 --> 00:03:07.990
revised in the last year.

00:03:07.990 --> 00:03:11.970
And I want to thank all of you for
your great work in shipping these.

00:03:15.620 --> 00:03:19.380
But it's very, very--there are two things
that have been very,

00:03:19.380 --> 00:03:20.480
very fulfilling.

00:03:20.510 --> 00:03:24.760
On April 29th,
coming back on a Monday from a vacation,

00:03:24.790 --> 00:03:27.580
I read maxscripter.net,
and this is what it said.

00:03:27.650 --> 00:03:31.080
I'm going to quote:
"AppleScript application updates.

00:03:31.170 --> 00:03:34.200
The phrase has taken on a
new meaning over the years.

00:03:34.230 --> 00:03:37.680
What used to be an occasional update
announcement for commercial applications

00:03:37.680 --> 00:03:40.560
or a scattering of rewrites and
enhancements to script packages

00:03:40.600 --> 00:03:45.010
in AppleScript examples has grown to
proportions of such magnitude that less

00:03:45.200 --> 00:03:49.730
than 48 hours of cyber absence has left
our editor scrambling to catch up on all

00:03:49.840 --> 00:03:54.420
the AppleScript updates that transpired
over the weekend." When Jason said,

00:03:54.420 --> 00:03:56.770
"We're hot and we rock," he's not lying.

00:03:56.920 --> 00:03:58.600
This is great stuff.

00:03:58.730 --> 00:04:01.080
The second thing is that
I ran into Mark Aldrit,

00:04:01.150 --> 00:04:04.600
who is the head of late-night software
and the developer of ScriptDebugger.

00:04:04.600 --> 00:04:08.590
We were standing in the back of Hall 2
listening to another presentation,

00:04:08.600 --> 00:04:13.600
and he turned to me and said, "You know,
over the last six months,

00:04:13.600 --> 00:04:19.600
my sales are way up," with a sense of
wonder and astonishment in his voice.

00:04:19.600 --> 00:04:22.590
And I think that's really great.

00:04:22.660 --> 00:04:23.570
The customers are out there.

00:04:23.610 --> 00:04:24.600
They're using AppleScript.

00:04:24.600 --> 00:04:26.430
They're using AppleScript on Mac OS X.

00:04:26.780 --> 00:04:28.550
They are buying script tools.

00:04:28.610 --> 00:04:30.590
They're downloading stuff from the web.

00:04:30.610 --> 00:04:34.600
AppleScript is happening,
and it's happening on Mac OS X.

00:04:34.600 --> 00:04:37.600
And a lot of that has to do with
some of the great applications.

00:04:37.600 --> 00:04:40.720
I'm going to bring Chris Nebel
up to help me show you a couple

00:04:40.940 --> 00:04:42.760
of the ones that have come out.

00:04:48.100 --> 00:04:52.640
Now, I go way back with outliners,
and if you know the name Dave Weiner,

00:04:52.640 --> 00:04:57.250
you know that outliners and Macintosh and
outliners and AppleScript have a long,

00:04:57.250 --> 00:04:58.200
long history.

00:04:58.310 --> 00:05:01.970
One of my favorite outliners
was an application called first

00:05:01.970 --> 00:05:06.560
Fair Witness and then Info Depot,
which was the first great

00:05:06.650 --> 00:05:08.590
scriptable outliner program.

00:05:08.600 --> 00:05:13.130
It died a sad and much lamented death,
but the Omni people have come back and

00:05:13.260 --> 00:05:18.340
have come back with a great version
of OmniOutliner 2.0 with a terrific

00:05:18.550 --> 00:05:20.490
object model and terrific scriptability.

00:05:20.600 --> 00:05:23.580
So what we're going to do here
is we're going to populate an

00:05:23.580 --> 00:05:26.780
Omni outline with an AppleScript,
and we need a large and

00:05:26.780 --> 00:05:28.600
fairly interesting data set.

00:05:28.650 --> 00:05:30.600
And the data set we're going
to take is a QuickTime movie.

00:05:30.600 --> 00:05:32.100
Now, Chris can play this movie.

00:05:32.100 --> 00:05:34.430
This is something that I shot
with my little digital camera.

00:05:34.600 --> 00:05:38.600
A time lapse of sunset, the moon transit,
and the moon.

00:05:38.690 --> 00:05:43.360
And sunrise in the desolation
wilderness up in the Tahoe area.

00:05:43.810 --> 00:05:46.690
And we're going to take some
data from that movie that

00:05:46.700 --> 00:05:50.600
QuickTime Player provides us,
and we're going to put it in an outline.

00:05:50.600 --> 00:05:52.600
And it's a very simple loop.

00:05:52.900 --> 00:05:54.600
That's not the right script.

00:05:54.600 --> 00:05:56.600
It's not the right script.

00:05:56.720 --> 00:05:58.600
That's too simple a loop.

00:05:58.600 --> 00:05:59.600
Make movie outline.

00:05:59.600 --> 00:06:00.950
There we go.

00:06:03.840 --> 00:06:05.120
Now this is a better loop.

00:06:05.150 --> 00:06:09.560
This walks through track by track,
frame by frame,

00:06:09.560 --> 00:06:12.970
the movie in QuickTime Player and
generates data rows in the

00:06:13.120 --> 00:06:14.800
outline and populates it.

00:06:14.800 --> 00:06:18.120
So when Chris runs this script,
he can click over to the

00:06:18.220 --> 00:06:23.370
outline and see that it's busy
populating the OmniOutliner

00:06:23.370 --> 00:06:25.610
with information on each frame.

00:06:26.800 --> 00:06:29.590
So this is fast, it's efficient,
and if you want to create

00:06:29.720 --> 00:06:34.190
outlines out of large datasets,
OmniOutliner is a great way to do it.

00:06:34.490 --> 00:06:38.960
Now, it doesn't just do that,
but OmniOutliner has a script menu.

00:06:39.130 --> 00:06:42.010
So if you go back to the script window,

00:06:43.100 --> 00:06:48.640
And drop that go-to-checked-frame script
into the OmniOutliner scripts folder.

00:06:48.670 --> 00:06:50.740
When you go over to OmniOutliner,
you look in the script menu,

00:06:50.740 --> 00:06:54.340
there's suddenly a new
script in that menu.

00:06:54.340 --> 00:06:57.110
You've checked frame 17.

00:06:57.440 --> 00:06:59.730
and go to checkedFrame,
you look over in the

00:06:59.730 --> 00:07:02.260
QuickTimePlayer window,
and that script tells

00:07:02.260 --> 00:07:04.150
QuickTimePlayer to go to that frame.

00:07:04.230 --> 00:07:05.420
So you can go back and forth.

00:07:05.720 --> 00:07:09.680
Script omni-outliner and have
omni-outliner script other applications.

00:07:09.710 --> 00:07:13.310
This is a great example of the kinds
of things you can do with scripting

00:07:13.310 --> 00:07:15.760
with a well scriptable application.

00:07:15.860 --> 00:07:17.900
So thank you to the Omni people.

00:07:17.900 --> 00:07:21.360
OmniGraffle also has
tremendous scriptability and

00:07:21.370 --> 00:07:23.510
is really worth looking into.

00:07:27.660 --> 00:07:30.210
The second thing we're going to look
at is a little beta that somebody

00:07:30.210 --> 00:07:32.070
emailed me about called QuartzDraw.

00:07:32.300 --> 00:07:35.380
And if you remember MacDraw,
QuartzDraw has a lot of the

00:07:35.410 --> 00:07:38.600
look and feel of MacDraw,
but it uses the Quartz imaging engine.

00:07:38.600 --> 00:07:43.050
So it can do all sorts of wonderful
things like translates and rotates

00:07:43.230 --> 00:07:45.600
and 3D skews and transforms.

00:07:45.600 --> 00:07:50.580
So we're just going to--and it has a good
scripting for all of those capabilities.

00:07:50.600 --> 00:07:53.080
So we're just going to take
a little document here and do

00:07:53.150 --> 00:07:57.600
some transforms on it manually,
then open up a script.

00:07:57.600 --> 00:08:01.490
Show you the script,
and all it does is it does a

00:08:01.830 --> 00:08:07.650
rotate and a transform on the first
object in that window repeatedly.

00:08:07.650 --> 00:08:07.980
So when you run it,

00:08:09.400 --> 00:08:13.940
So anybody who wants to take this and
do a 3D breakout in AppleScript is

00:08:13.940 --> 00:08:16.300
perfectly free to do that.

00:08:16.300 --> 00:08:19.800
So these are the kinds of things
we're seeing just over the transom

00:08:19.800 --> 00:08:22.900
without heavy evangelism from us,
without us going and beating

00:08:22.900 --> 00:08:23.300
people over the head.

00:08:23.300 --> 00:08:26.270
We're getting great scriptable
applications on Mac OS X.

00:08:26.370 --> 00:08:29.370
It's something we haven't seen in
years in the AppleScript front,

00:08:29.370 --> 00:08:30.300
and I really appreciate it.

00:08:30.300 --> 00:08:33.300
So, thanks Chris.

00:08:38.100 --> 00:08:41.010
Okay, let me do a recap of the last year.

00:08:41.140 --> 00:08:46.840
We shipped AppleScript 1.6 in
the first version of Mac OS X,

00:08:46.980 --> 00:08:50.130
and that's pretty much
what we talked about at the

00:08:50.230 --> 00:08:52.000
developer conference last year.

00:08:52.100 --> 00:09:00.490
We shipped AppleScript 1.7 in
Mac OS 10.1 and in Mac OS 9.2.2

00:09:00.490 --> 00:09:04.000
in the software update,
though not in the 9.2.2

00:09:04.000 --> 00:09:07.750
that ships on machines.

00:09:08.010 --> 00:09:11.210
or shipped on machines.

00:09:11.380 --> 00:09:15.940
The first version of 1.8.1
you're going to see was in the

00:09:15.940 --> 00:09:18.300
December 2001 developer tools.

00:09:18.300 --> 00:09:20.460
That slide is wrong.

00:09:20.470 --> 00:09:23.120
It shouldn't say Jaguar.

00:09:23.130 --> 00:09:25.920
How that got through QC, I'm not sure.

00:09:25.940 --> 00:09:31.870
1.8.1 first shipped in the
December 2001 developer tools,

00:09:31.870 --> 00:09:36.520
and 1.8.2 shipped with the
April 2002 developer tools.

00:09:36.520 --> 00:09:41.280
You'll see that in the April 2002
developer tools that you have.

00:09:41.280 --> 00:09:44.320
That's the current version.

00:09:44.320 --> 00:09:49.580
We have version 1.8.3,
which has some very minor fixes to 1.8.2,

00:09:49.580 --> 00:09:54.120
and it's going to ship, we believe,
next week as individual software

00:09:54.120 --> 00:09:58.480
updates for both Mac OS 9 and Mac OS X.

00:09:58.480 --> 00:10:02.390
On the Mac OS X side,
what 1.8.3 does is it delivers the

00:10:02.840 --> 00:10:06.900
current version of AppleScript and
AppleScript Studio to end users.

00:10:06.900 --> 00:10:09.240
So if you're developing
AppleScript scripts or

00:10:09.380 --> 00:10:11.640
AppleScript Studio applications,
you're going with the

00:10:11.720 --> 00:10:14.030
April developer tools,
this will be what you

00:10:14.030 --> 00:10:15.210
need for deployment.

00:10:15.220 --> 00:10:20.510
And on the Mac OS 9 side,
1.8.3 solves the severe performance

00:10:20.510 --> 00:10:26.180
problems with certain applications that
we started to see on Mac OS 9.2 and 1.7,

00:10:26.180 --> 00:10:30.000
and on both versions,
it fixes some crashing bugs with Unicode

00:10:30.000 --> 00:10:32.120
and some problems with Unicode text.

00:10:32.200 --> 00:10:36.450
We think that this is going to be
a solid release that we can sit on,

00:10:36.460 --> 00:10:41.740
and it helps us build for Mac OS,
for AppleScript 1.9,

00:10:41.740 --> 00:10:44.110
which is what you see in your
Jaguar developer preview.

00:10:45.730 --> 00:10:50.140
So let's talk about OSA scripting
in general in Jaguar.

00:10:50.140 --> 00:10:53.710
There are really four
things to talk about.

00:10:53.900 --> 00:10:57.030
First is there's a whole new
Apple Event Manager in Jaguar.

00:10:57.040 --> 00:10:58.800
It's rewritten from the ground up.

00:10:58.880 --> 00:11:02.540
It's got some significant changes
that you need to know about.

00:11:02.540 --> 00:11:06.830
The API is primarily the same,
but it really operates in a

00:11:06.840 --> 00:11:08.040
fundamentally different manner.

00:11:08.040 --> 00:11:11.580
Second is there's a lot of
scriptability enhancements in

00:11:11.580 --> 00:11:13.550
the entire operating system,
and we're going to show

00:11:13.610 --> 00:11:14.320
some of those to you.

00:11:14.860 --> 00:11:19.220
The third thing is that you may be
surprised to see when you open up

00:11:19.400 --> 00:11:24.280
Script Editor or Script Debugger in
Jaguar in your developer preview,

00:11:24.280 --> 00:11:28.190
the pop-up menu in the bottom of
the window that lets you choose

00:11:28.190 --> 00:11:31.540
your scripting languages comes
with the operating system with

00:11:31.710 --> 00:11:35.680
two different scripting languages,
Apple Script and Apple Script 10.

00:11:35.680 --> 00:11:37.080
They're different.

00:11:37.080 --> 00:11:38.240
They're for different purposes.

00:11:38.240 --> 00:11:39.820
One is shipping.

00:11:39.820 --> 00:11:44.340
One is essentially a developer tool
for you to use and start to play with,

00:11:44.720 --> 00:11:47.420
and Apple Script 10 is
the new architecture,

00:11:47.430 --> 00:11:49.740
new foundation for
Apple Script in the future.

00:11:49.740 --> 00:11:51.720
We're going to be dwelling a lot on that.

00:11:51.760 --> 00:11:55.960
And the fourth thing is
Apple Script Studio version 1.2,

00:11:55.960 --> 00:11:58.840
and Tim Bumgarner is going to be talking
to you about that this afternoon.

00:11:58.840 --> 00:12:02.000
So let's talk about the
Apple Event Manager.

00:12:03.860 --> 00:12:06.120
The big change in the
Apple Event Manager is

00:12:06.120 --> 00:12:08.770
that handles are dead.

00:12:08.860 --> 00:12:16.050
As we warned you three or four years ago,
that the AEDESC data structure no longer

00:12:16.050 --> 00:12:18.440
has a data handle but this opaque type.

00:12:18.520 --> 00:12:26.200
And the opaque type happens to be a
handle up through Mac OS X version 10.1.

00:12:26.200 --> 00:12:28.100
It is no longer a handle.

00:12:28.280 --> 00:12:31.810
It is a private opaque data
type that is flattened,

00:12:31.810 --> 00:12:35.380
is not handle based,
doesn't use the old Mac Memory Manager,

00:12:35.380 --> 00:12:37.420
and is much, much more efficient.

00:12:37.420 --> 00:12:45.110
The important thing about that is that
the data in an Apple event or the data in

00:12:45.110 --> 00:12:51.550
an AEDESC now can be referenced directly
rather than having to be copied when that

00:12:51.550 --> 00:12:55.980
event is moved from place to place or
when you extract information from event.

00:12:56.020 --> 00:12:58.120
By saving the status.

00:12:58.280 --> 00:13:01.990
So in the first step of copying the
information over and over when you

00:13:01.990 --> 00:13:05.770
create and access Apple Event Descriptor
records and Apple Events,

00:13:05.870 --> 00:13:08.380
we're saving a tremendous amount of time.

00:13:08.500 --> 00:13:11.440
And when we move events
between applications,

00:13:11.480 --> 00:13:15.390
we're actually using Mach shared
memory to move the event from

00:13:15.390 --> 00:13:17.140
one application to another.

00:13:17.510 --> 00:13:21.360
So it doesn't actually get copied
moving from application to application.

00:13:21.530 --> 00:13:24.320
The second application just gets
a reference to shared memory

00:13:24.320 --> 00:13:25.900
with the first application.

00:13:25.900 --> 00:13:27.360
The event is already there.

00:13:27.460 --> 00:13:28.120
And we're seeing updates.

00:13:28.280 --> 00:13:30.740
We're seeing changes to a
thousand X performance increase

00:13:30.740 --> 00:13:33.430
in large events going back
and forth between applications.

00:13:33.520 --> 00:13:37.860
Significant change is really
going to revolutionize the way

00:13:37.860 --> 00:13:40.110
you deal with Apple Events.

00:13:41.200 --> 00:15:36.600
[Transcript missing]

00:15:38.070 --> 00:15:41.000
In the Apple Event Manager,
we're defining a couple of new

00:15:41.000 --> 00:15:46.760
low-level data types that we're
going to be using fairly extensively.

00:15:46.840 --> 00:15:49.660
We already defined from the
Apple Event level and going

00:15:49.660 --> 00:15:54.540
down the type Unicode text,
which is traditional UTF-16,

00:15:54.540 --> 00:15:56.640
the full Unicode representation.

00:15:56.710 --> 00:16:00.900
We're finding that a whole lot of
people use UTF-8 as a shorthand

00:16:00.900 --> 00:16:05.760
because it's generally more
compact when you're dealing with

00:16:05.760 --> 00:16:11.070
generally Roman character sets,
and it can be used as a substitute

00:16:11.070 --> 00:16:14.520
for ASCII or ASCII can be
turned into it fairly easily.

00:16:14.680 --> 00:16:19.470
So we're making type UTF-8 a low-level
type in the Apple Event Manager with

00:16:19.520 --> 00:16:22.000
coercions to and from Unicode text.

00:16:22.030 --> 00:16:26.400
We're going to talk about the migration
of the whole family of text types because

00:16:26.580 --> 00:16:28.800
there are now way too many of them.

00:16:28.890 --> 00:16:31.460
Chris Nebel will be talking about
that in the AppleScript 10 portion,

00:16:31.460 --> 00:16:34.480
but for now,
UTF-8 will not be a first-class

00:16:34.640 --> 00:16:35.520
type in AppleScript.

00:16:35.520 --> 00:16:39.350
Unicode text will be
the type in AppleScript,

00:16:39.660 --> 00:16:43.750
but UTF-8 is going to be a fundamental
way of sending information back and

00:16:43.750 --> 00:16:49.280
forth between applications and sending
information to AppleScript itself.

00:16:49.540 --> 00:16:55.510
There's also a new time data type,
which is the ISO 8601 time.

00:16:55.570 --> 00:17:00.020
Those of you who are writing applications
that talk to the Darwin kernel or

00:17:00.030 --> 00:17:05.280
to Mach are going to be dealing
in type 8601 times quite a bit.

00:17:05.280 --> 00:17:09.280
And so we're providing an
Apple Event data type for that format

00:17:09.280 --> 00:17:14.120
and automatic coercions between it and
the traditional Carbon long date time.

00:17:14.150 --> 00:17:17.890
So these are two new types that
you can use in your applications.

00:17:18.080 --> 00:17:20.840
You can put information into
Apple Events in these formats,

00:17:20.840 --> 00:17:23.180
extract them in these formats,
and the coercions will

00:17:23.180 --> 00:17:24.520
happen automatically.

00:17:24.550 --> 00:17:27.560
The other important
thing about 8601 time,

00:17:27.580 --> 00:17:31.200
it has time zone information,
which long date time does not have.

00:17:31.200 --> 00:17:34.790
So if you deal in time zones,
you want to use this data type.

00:17:35.700 --> 00:19:08.800
[Transcript missing]

00:19:09.100 --> 00:19:12.840
So let's talk about
scriptability in Jaguar.

00:19:12.840 --> 00:19:15.550
The first good piece of good
news is that Folder Actions

00:19:15.550 --> 00:19:17.680
makes its return in Jaguar.

00:19:17.680 --> 00:19:21.470
We finally got the support we need.

00:19:22.240 --> 00:19:27.470
It's not quite functional or
fully built yet on the developer

00:19:27.470 --> 00:19:31.310
release CD that you have,
but we will have full folder

00:19:31.310 --> 00:19:34.570
actions functionality in,
and it's even better than

00:19:34.570 --> 00:19:37.530
before because folder actions
will have a full object model,

00:19:37.540 --> 00:19:40.480
not just those procedural calls
in order to add and remove

00:19:40.480 --> 00:19:42.200
folder actions from a folder.

00:19:42.200 --> 00:19:45.170
There are significant
improvements in Cocoa scripting,

00:19:45.280 --> 00:19:47.200
and if you are writing
Cocoa applications,

00:19:47.200 --> 00:19:51.190
I highly recommend the Cocoa scripting
session that Mark Piccirilli

00:19:51.190 --> 00:19:51.200
is giving tomorrow night.

00:19:52.200 --> 00:19:54.200
Go to that.

00:19:54.200 --> 00:19:57.200
There are a lot of good
things going on there.

00:19:57.200 --> 00:20:01.690
There are some new scriptable
applications in Jaguar and improvements

00:20:01.820 --> 00:20:04.200
in a lot of scriptable applications.

00:20:04.390 --> 00:20:08.070
The address book that you saw Steve demo
at the keynote has a very good,

00:20:08.070 --> 00:20:12.200
strong object model for scripting,
and that means that the underlying

00:20:12.200 --> 00:20:16.000
database that all of the
applications that use the address

00:20:16.000 --> 00:20:21.200
book use is accessible by all
of your AppleScript applications,

00:20:21.200 --> 00:20:22.200
including all your
AppleScript applications.

00:20:22.200 --> 00:20:25.200
That's going to be very powerful.

00:20:25.250 --> 00:20:27.200
Mail has some improvements
in scriptability.

00:20:27.200 --> 00:20:31.010
The new Sherlock model has a
completely new scriptability model.

00:20:31.340 --> 00:20:34.200
Apple System Profiler has been
rewritten from the ground up,

00:20:34.200 --> 00:20:37.190
and the scripting has
been made much more sane.

00:20:37.200 --> 00:20:39.170
Speech recognition is scriptable.

00:20:39.450 --> 00:20:42.850
The Digital Hub, which,
has anybody seen any of the

00:20:42.850 --> 00:20:45.200
Digital Hub features demoed?

00:20:45.430 --> 00:20:48.200
Ooh, we get to demo them first.

00:20:49.330 --> 00:20:56.680
There's a new set of control
panels called-- or preference

00:20:56.680 --> 00:20:56.680
panels called panes.

00:20:57.700 --> 00:21:01.000
We've got pushups for
using the wrong name.

00:21:01.020 --> 00:21:05.380
A new set of preference panes
that control your-- Macintosh has

00:21:05.380 --> 00:21:09.190
the hub of your digital world,
and all of those preference

00:21:09.580 --> 00:21:13.560
panes allow you to execute
scripts when things happen.

00:21:13.590 --> 00:21:15.040
And that's very cool.

00:21:15.040 --> 00:21:17.560
We'll show that off in a minute.

00:21:17.560 --> 00:21:22.220
And we have the initial support
for scripting the preferences

00:21:22.270 --> 00:21:23.710
panes with a plug-in architecture
that we're gonna show you as well.

00:21:23.900 --> 00:24:16.800
[Transcript missing]

00:24:17.100 --> 00:24:20.110
Some other things that we're
doing in AppleScript 1.9,

00:24:20.170 --> 00:24:22.720
we're supporting system
preferences plug-ins,

00:24:22.720 --> 00:24:25.940
and we'll show you the mechanism
by which we're doing that.

00:24:26.010 --> 00:24:30.610
There aren't any on your Jaguar CD,
but you will start seeing them

00:24:30.610 --> 00:24:31.860
come out with the Jaguar ship.

00:24:32.000 --> 00:24:36.000
We are simplifying the way you
address the system events application.

00:24:36.000 --> 00:24:39.110
It used to be you just
told the finder things,

00:24:39.110 --> 00:24:44.000
and we automatically redirected
the right stuff to system events.

00:24:44.200 --> 00:24:46.460
Some of you have started saying,
"Tell application system

00:24:46.460 --> 00:24:50.000
events." We're going to try
to simplify that and just say,

00:24:50.000 --> 00:24:54.370
"Tell system." That will invoke plug-ins,
it'll invoke system-level things,

00:24:54.370 --> 00:24:57.870
it'll invoke the kinds of things
that you don't really want to launch

00:24:57.870 --> 00:25:00.000
a phased application in order to do.

00:25:00.000 --> 00:25:02.820
That's where folder
actions lives as well.

00:25:03.050 --> 00:25:08.180
We're enhancing the mount volume
scripting edition to support

00:25:08.450 --> 00:25:12.830
everything and anything you can do in
the connect to dialog in the finder,

00:25:13.170 --> 00:25:14.820
including mounting SMB volumes.

00:25:14.900 --> 00:25:17.900
So they're going to be
absolutely parallel interfaces.

00:25:17.900 --> 00:25:19.900
Any string that you can type
into the connect to dialog,

00:25:19.900 --> 00:25:23.040
you can put that in the
mount volume command,

00:25:23.050 --> 00:25:25.900
and it will mount in
exactly the same way.

00:25:26.120 --> 00:25:29.800
And one little enhancement that
the speech folk will be demoing:

00:25:29.950 --> 00:25:34.710
the say scripting edition will have an
option of outputting to a disk file.

00:25:35.000 --> 00:25:38.050
So if you want to use that,
what Steve called the--he

00:25:38.100 --> 00:25:41.900
didn't say it was crappy,
but it was in his tone of voice.

00:25:41.900 --> 00:25:46.710
If you want to use text-to-speech to
generate speech to a disk file and,

00:25:46.710 --> 00:25:52.110
say, sync it with your iPod,
you can do that now with AppleScript.

00:25:52.370 --> 00:25:55.410
So to show you some of these things,
Chris Nebel is going to come up again,

00:25:55.410 --> 00:26:01.480
and we'll walk through a little demo.

00:26:01.550 --> 00:26:04.200
So the first thing we want to look at

00:26:09.080 --> 00:26:12.730
is the System Events application.

00:26:12.900 --> 00:26:14.000
Some of you noticed this.

00:26:14.000 --> 00:26:18.010
It was an unheralded feature of 10.1,
just a little faceless

00:26:18.010 --> 00:26:21.620
background application that
handled the Processes class.

00:26:21.720 --> 00:26:22.880
And it's still there.

00:26:22.990 --> 00:26:27.440
So all of the things that the Finder used
to do was telling you about processes,

00:26:27.440 --> 00:26:28.800
including a little more now.

00:26:28.800 --> 00:26:32.610
It'll tell you whether a process
is a classic process or not.

00:26:32.720 --> 00:26:35.840
are in the System Events application.

00:26:35.840 --> 00:26:37.910
And for certain things
that the Finder used to do,

00:26:38.040 --> 00:26:42.450
if you ask the Finder, it'll say,
"I don't do that anymore," and we

00:26:42.450 --> 00:26:46.250
automatically relay those events
to the System Events application.

00:26:46.320 --> 00:26:48.200
But System Events is doing more now.

00:26:48.270 --> 00:26:50.850
For example,
it has the full folder action suite,

00:26:50.890 --> 00:26:54.760
which used to be divided between
the folder actions extension,

00:26:55.020 --> 00:27:01.320
the faceless background application,
and the standard editions.

00:27:01.320 --> 00:27:05.990
So all of the folder actions events,
both the events that fire handlers in

00:27:05.990 --> 00:27:12.020
your scripts and also the events you
can use in order to add or remove or

00:27:12.020 --> 00:27:16.740
manipulate folder actions on folders,
they're all in System Events too.

00:27:16.740 --> 00:27:19.000
And as I said,
we don't just have the old events

00:27:19.170 --> 00:27:22.800
for backwards compatibility,
we also have a full object model

00:27:23.180 --> 00:27:26.160
for scripts in the System Events.

00:27:26.160 --> 00:27:31.060
So you can-- Make new
folder actions by saying,

00:27:31.080 --> 00:27:33.780
"Make new folder action."

00:27:34.350 --> 00:27:35.660
It just seemed obvious to us.

00:27:35.660 --> 00:27:39.460
Now, in order to do that,
we had to have an object

00:27:39.460 --> 00:27:40.640
model for folders.

00:27:40.640 --> 00:27:43.020
And in order to have an
object model for folders,

00:27:43.020 --> 00:27:44.600
we had to have an object model for disks.

00:27:44.780 --> 00:27:47.080
And, well,
we might as well throw one for files in.

00:27:47.080 --> 00:27:51.000
So we have essentially
replicated the finder's file,

00:27:51.330 --> 00:27:57.520
folder, disk object hierarchy as an
object model in system events.

00:27:57.660 --> 00:28:01.930
And system events is a small,
fast daemon that's always running.

00:28:01.940 --> 00:28:03.440
It's not showing windows.

00:28:03.910 --> 00:28:08.400
It's not finding or indexing or
doing other things at the same time.

00:28:08.400 --> 00:28:10.190
You have its complete attention.

00:28:10.210 --> 00:28:13.070
Sometimes the finder may
be in simple finder mode.

00:28:13.080 --> 00:28:18.020
Sometimes the finder
might not be there at all.

00:28:18.060 --> 00:28:22.240
So if you want to write a script
that talks to the file system,

00:28:22.240 --> 00:28:27.030
you now have a way to script the file
system without scripting the finder.

00:28:27.040 --> 00:28:28.420
And that's through system events.

00:28:33.900 --> 00:28:35.830
You know,
I didn't bet that that would be the

00:28:35.830 --> 00:28:37.900
first applause line of the speech.

00:28:37.900 --> 00:28:40.890
So that's System Events.

00:28:40.900 --> 00:28:41.870
It's going to expand.

00:28:41.910 --> 00:28:44.870
System Events is also the host
for all the Preferences plug-ins.

00:28:44.900 --> 00:28:48.900
So as each of the preference
panes becomes scriptable,

00:28:49.030 --> 00:28:51.900
its scriptability is going to show
up in the System Events dictionary.

00:28:51.900 --> 00:28:54.900
So you'll have one place to
look for all of your plug-ins,

00:28:54.900 --> 00:29:00.040
whether there are system enhancements
or whether they're the Preferences

00:29:00.040 --> 00:29:01.820
pane system enhancements.

00:29:01.980 --> 00:29:05.420
That means you don't have to
launch preferences.app in order

00:29:05.810 --> 00:29:08.900
to change your monitor setting,
for example.

00:29:09.260 --> 00:29:10.900
Okay.

00:29:10.900 --> 00:29:12.900
You saw the address book in Steve's demo.

00:29:12.900 --> 00:29:14.960
The address book's a
beautiful application,

00:29:15.050 --> 00:29:17.890
and it has a very,
very good scripting model.

00:29:17.900 --> 00:29:20.390
There are some very simple
things you can do with it,

00:29:20.390 --> 00:29:24.890
for example, in scripting,
such as using it to address paper mail.

00:29:24.900 --> 00:29:29.870
So we have here a simple
document in TextEdit.

00:29:30.020 --> 00:29:33.220
And if we just run this little script,

00:29:33.880 --> 00:29:39.160
That looks up the name in the address
book and pastes in the address from it.

00:29:39.210 --> 00:29:40.220
There you go.

00:29:40.220 --> 00:29:40.800
Simple as that.

00:29:40.930 --> 00:29:45.170
If you're familiar with scripting
the contacts information in

00:29:45.170 --> 00:29:50.770
Entourage or in Palm Desktop,
this will seem very familiar to you.

00:29:50.800 --> 00:29:55.710
The scriptability of this will,
of course, expand as the abilities of

00:29:55.710 --> 00:29:57.740
the address book expands.

00:29:57.830 --> 00:29:59.740
In the disk you have,
address book does some

00:29:59.740 --> 00:30:00.800
very simple things.

00:30:00.800 --> 00:30:02.800
The scriptability is
simple and straightforward.

00:30:02.800 --> 00:30:05.400
You can create new addresses,
you can set the information,

00:30:05.400 --> 00:30:07.710
you can get the information,
you can do whose clauses to

00:30:07.740 --> 00:30:13.280
look for the information,
and what else could somebody want.

00:30:13.590 --> 00:30:18.890
The Preferences panes, as I said,
on the version that you have,

00:30:18.890 --> 00:30:23.070
there isn't any scriptability or
any scriptability plug-ins for

00:30:23.070 --> 00:30:26.420
the preference panes themselves,
but the Preferences application

00:30:26.420 --> 00:30:30.780
does respond to AppleScript and
Apple event requests to go to

00:30:30.870 --> 00:30:32.500
particular preference panes.

00:30:32.500 --> 00:30:36.500
So if you have a script that wants
to bring up a preference pane,

00:30:36.500 --> 00:30:39.500
for example,
from Help or as part of a guided thing,

00:30:39.500 --> 00:30:40.490
you can do that.

00:30:40.500 --> 00:30:46.500
You can bring up the Preferences.app
and make it go to a particular pane.

00:30:47.480 --> 00:30:50.190
And finally,
I want to show you the digital hub.

00:30:50.340 --> 00:30:54.210
Some of the preferences panes,
this whole row in the middle,

00:30:54.540 --> 00:31:01.890
are things to do when a CD is
inserted or a blank DVD or

00:31:01.900 --> 00:31:06.300
blank CD media is inserted,
or when your iPod is attached,

00:31:06.300 --> 00:31:10.790
or when a hard drive is attached,
or when something else in the

00:31:10.800 --> 00:31:13.290
digital camera is attached,
when something in the

00:31:13.290 --> 00:31:14.460
media realm happens.

00:31:14.610 --> 00:31:17.640
And for each of those events,
there's a pop-up menu,

00:31:17.680 --> 00:31:23.450
and one of the items in the pop-up menu
is "Run a Script." And so you can attach

00:31:23.450 --> 00:31:27.880
an AppleScript to almost anything that
happens in the digital media realm.

00:31:28.010 --> 00:31:32.530
So the script we're going to do,
are you actually going to choose

00:31:32.840 --> 00:31:35.390
the script other than Open iTunes?

00:31:36.260 --> 00:31:39.500
"Show CDD page." Okay.

00:31:39.900 --> 00:31:42.150
And you really do want
to attach that script.

00:31:42.150 --> 00:31:43.160
No, it's not.

00:31:43.270 --> 00:31:47.530
There you go.

00:31:47.540 --> 00:31:49.570
That's what you want to do.

00:31:52.130 --> 00:31:55.490
The demo works better when
you actually do all the steps.

00:31:55.510 --> 00:31:58.520
So now we're going to put an audio CD in.

00:31:58.600 --> 00:32:04.290
and the script will,
in addition to launching iTunes...

00:32:05.040 --> 00:32:06.360
It'll launch iTunes.

00:32:06.390 --> 00:32:10.970
It'll query iTunes for some information
about the disk that you inserted.

00:32:10.970 --> 00:32:15.650
And instead of just showing
the playlist in iTunes,

00:32:15.650 --> 00:32:17.860
as soon as the disk shows up,

00:32:19.160 --> 00:32:23.340
It's going to take you to the
CDDB web page for that disk.

00:32:23.440 --> 00:32:28.090
So this is the kind of stuff that you
can do with digital hub scripting.

00:32:28.100 --> 00:32:31.110
Imagine what you can do with
scripts that happen when your

00:32:31.110 --> 00:32:34.700
digital camera is attached or
when you plug in a FireWire drive.

00:32:34.810 --> 00:32:36.590
So this is beyond folder actions.

00:32:36.590 --> 00:32:38.330
This is digital hub actions.

00:32:38.480 --> 00:32:41.690
So there's a lot of scriptability.

00:32:42.210 --> 00:32:42.940
in Jaguar.

00:32:43.100 --> 00:32:45.990
A lot of that comes on your developer CD.

00:32:45.990 --> 00:32:49.100
We hope you'll have a lot of fun with it.

00:32:49.100 --> 00:32:52.360
Some of the stuff is unfinished,
and we are looking forward

00:32:52.450 --> 00:32:54.090
to your feedback on that.

00:32:55.910 --> 00:33:01.640
There's very little to watch out
for in AppleScript 1.9 and Jaguar.

00:33:01.820 --> 00:33:04.760
Really,
the main thing is that launch services,

00:33:04.760 --> 00:33:11.350
which is the underlying system
API that knows about applications,

00:33:11.520 --> 00:33:18.040
is going to require that you
have your Info.plist entry

00:33:18.040 --> 00:33:21.970
for NSAppleScript enabled,
which is normally a Cocoa-only thing.

00:33:21.980 --> 00:33:25.950
If you have any kind of application,
be it Cocoa or Carbon or

00:33:25.950 --> 00:33:29.400
a plug-in or whatever,
and you're AppleScriptable,

00:33:29.400 --> 00:33:34.270
you have to have the NSAppleScript enable
item in your Info.plist.

00:33:34.320 --> 00:33:39.300
And that's in order to show up
in the choose application window.

00:33:39.940 --> 00:33:43.080
It's just one line in your Info.plist,
a simple requirement.

00:33:43.080 --> 00:33:47.130
The second thing is what I talked about
for his form name being Unicode text.

00:33:47.140 --> 00:33:52.800
And then the third thing is that as we
get more and more into Unicode text and

00:33:52.850 --> 00:33:57.840
as more and more applications return it,
the more and more unreliable

00:33:57.840 --> 00:34:00.250
the unencoded forms of text are.

00:34:00.260 --> 00:34:02.970
For example,
the finder is now returning encoded

00:34:03.040 --> 00:34:07.640
text from almost all operations,
including the names of folders on

00:34:07.640 --> 00:34:09.350
the desktop and the names of disks.

00:34:10.100 --> 00:34:13.750
If your application gets
information and you get it as a

00:34:13.850 --> 00:34:18.140
type P string or a type C string,
you're throwing away the encoding.

00:34:18.140 --> 00:34:21.300
And you won't know when
you get that string,

00:34:21.300 --> 00:34:23.340
whether it's Japanese,
whether it's Arabic,

00:34:23.340 --> 00:34:25.710
whether it's English,
or whether it's a mix of all three.

00:34:25.720 --> 00:34:31.740
So the type P string and type C string
types that Andy Baczorski added

00:34:31.740 --> 00:34:35.780
so carefully for us several years
ago are now officially off-limits.

00:34:35.910 --> 00:34:39.060
We don't want you to use them because
you will get the wrong answer,

00:34:39.060 --> 00:34:39.920
and you will show up with a wrong answer.

00:34:39.920 --> 00:34:41.190
You will show garbage text to the user.

00:34:41.200 --> 00:34:45.660
So stop using type P string and type
C string in the automatic coercions.

00:34:47.180 --> 00:34:47.980
and TypeText.

00:34:48.400 --> 00:34:51.900
TypeText assumes system encoding,
and in Mac OS X,

00:34:51.950 --> 00:34:53.980
there's no such thing as system encoding.

00:34:53.980 --> 00:34:59.060
You can have a Japanese, a Korean,
an Arabic,

00:34:59.090 --> 00:35:05.380
and an English folder on your desktop,
and you can have a folder that has all

00:35:05.500 --> 00:35:09.620
of those characters in the same name.

00:35:09.620 --> 00:35:11.350
And TypeText can't express that,
so stop using those text types.

00:35:14.040 --> 00:35:17.000
So, that's AppleScript 1.9,
a fairly simple story.

00:35:17.020 --> 00:35:18.900
What's going on?

00:35:18.960 --> 00:35:23.130
What we're doing is we're doing a
whole new version of AppleScript with

00:35:23.130 --> 00:35:25.690
some significant changes in the
way we deal with terminology,

00:35:25.700 --> 00:35:29.100
in the way we deal with extensions,
in the way we deal with

00:35:29.150 --> 00:35:32.100
talking to classes,
in the way we deal with text.

00:35:32.220 --> 00:35:34.700
And we're calling it AppleScript 10.

00:35:34.700 --> 00:35:39.220
And we think that this is what we need
in order to bring a truly first-class

00:35:39.340 --> 00:35:40.990
scripting environment to Mac OS X.

00:35:41.270 --> 00:35:44.300
And here to talk about it is the
lead engineer of AppleScript 10,

00:35:44.300 --> 00:35:44.800
Chris Neville.

00:35:51.100 --> 00:35:52.100
Thank you, Chris.

00:35:52.430 --> 00:35:53.090
I'm going to set up the demo.

00:35:53.150 --> 00:35:54.100
Oh, good.

00:35:54.100 --> 00:35:55.080
My mic is actually working.

00:35:55.100 --> 00:35:55.100
Great.

00:35:56.560 --> 00:35:59.340
Okay, the future.

00:35:59.340 --> 00:36:00.360
What's in store?

00:36:00.830 --> 00:36:02.330
Well, quite a bit.

00:36:02.340 --> 00:36:04.350
And as it turns out,
most of it has been driven

00:36:04.350 --> 00:36:07.200
by what we've heard from you,
the developers.

00:36:07.270 --> 00:36:09.300
So what have you been saying?

00:36:09.410 --> 00:36:12.400
Cripe, cripe, cripe, cripe, cripe, cripe,
cripe.

00:36:12.630 --> 00:36:16.380
From application writers,
we've heard that when you start off,

00:36:16.430 --> 00:36:17.390
it's too hard to write terminology.

00:36:17.410 --> 00:36:21.140
You've got AET resources,
and if you're doing Carbon,

00:36:21.140 --> 00:36:23.370
you've got ScriptSuite and
ScriptTerminology files.

00:36:23.400 --> 00:36:26.310
And there are very few tools to
help you deal with these things,

00:36:26.310 --> 00:36:28.730
and they contain a lot of
internal redundancies that

00:36:28.730 --> 00:36:30.400
make them kind of hard to edit.

00:36:30.510 --> 00:36:32.350
And it's just generally not very nice.

00:36:32.450 --> 00:36:34.630
Once you get past that,
and you start trying to

00:36:34.630 --> 00:36:37.400
implement your scripting,
you say, "This is hard.

00:36:37.400 --> 00:36:39.880
The system doesn't give you a
lot of support." We actually

00:36:39.880 --> 00:36:41.400
don't get this from Cocoa people.

00:36:41.510 --> 00:36:43.620
Cocoa scripting is actually pretty good.

00:36:43.620 --> 00:36:46.400
There are a few holes,
but they're filling them in.

00:36:46.400 --> 00:36:47.360
In general, life is okay.

00:36:47.410 --> 00:36:50.610
But Carbon scripting,
the only help you get

00:36:50.610 --> 00:36:52.400
is ObjectSupportLib,
which doesn't really

00:36:52.400 --> 00:36:52.400
do very much for you.

00:36:52.400 --> 00:36:55.060
There's an awful lot
you have to do yourself,

00:36:55.080 --> 00:36:57.400
and it's very hard to get it all right.

00:36:57.400 --> 00:36:59.350
And a lot of people don't.

00:36:59.430 --> 00:37:01.260
And if you are doing an
application with plugins,

00:37:01.260 --> 00:37:03.400
and you want to try and make
those plugins scriptable,

00:37:03.400 --> 00:37:08.330
you say, "This is really hard." In fact,
it's almost impossible.

00:37:08.420 --> 00:37:10.400
ObjectSupportLib
actually gets in the way.

00:37:10.400 --> 00:37:14.400
So you have to do all your scripting
yourself if you want to do it at all.

00:37:14.400 --> 00:37:17.240
And even then,
there are terminology management

00:37:17.240 --> 00:37:21.000
problems that there's really
no straightforward way around.

00:37:21.500 --> 00:38:25.500
[Transcript missing]

00:38:27.310 --> 00:38:27.660
Here's how.

00:38:27.700 --> 00:38:33.240
For terminology,
we're defining a new XML-based format,

00:38:33.240 --> 00:38:37.260
which is much more expressive
and we hope much easier to edit.

00:38:37.260 --> 00:38:42.280
We are allowing terms to show up without
four-character codes attached to them.

00:38:42.320 --> 00:38:44.560
This turns out to be important
for a couple reasons.

00:38:44.560 --> 00:38:49.320
We are introducing a new
framework called Carbon Scripting,

00:38:49.320 --> 00:38:53.920
which will make writing scriptability
for Carbon applications a lot easier.

00:38:53.920 --> 00:38:58.880
We are supporting scriptable plug-ins,
and to address all the language issues,

00:38:58.880 --> 00:39:02.950
we're introducing AppleScript 10,
a major revision to the language itself.

00:39:05.700 --> 00:39:06.980
So, the terminology stuff.

00:39:07.040 --> 00:39:11.570
What we've got are what we're
calling scripting definition files,

00:39:11.580 --> 00:39:12.470
SDEFs for short.

00:39:12.480 --> 00:39:14.980
They're a superset of the AET.

00:39:14.980 --> 00:39:19.050
The intent is to make them your one-stop
shopping point for everything about

00:39:19.160 --> 00:39:20.910
your application's scriptability.

00:39:20.920 --> 00:39:23.760
That means not only are you
defining the AET-like stuff,

00:39:23.850 --> 00:39:26.200
like the actual scripting terms
and the four-character codes if

00:39:26.310 --> 00:39:29.590
you need them and simple comments,
but also complete documentation and

00:39:30.100 --> 00:39:34.520
implementation information about
what methods in your program to

00:39:34.520 --> 00:39:37.220
call in order to do all the things
that your dictionary says you do.

00:39:38.970 --> 00:39:40.980
Because they're XML,
you can edit them using

00:39:40.980 --> 00:39:44.300
any XML editor you like,
whether it's a super-spiffy validating

00:39:44.300 --> 00:39:48.790
one or some stone-knife-and-bearskin
kind of thing like VI,

00:39:48.790 --> 00:39:50.090
like I use.

00:39:50.370 --> 00:39:56.200
We're supplying tools so you
can generate old-style things.

00:39:56.200 --> 00:39:58.970
So you can start using these things
today and have the tool grind

00:39:58.980 --> 00:40:03.480
out an AETE resource or a script
suite and script terminology file.

00:40:03.480 --> 00:40:05.470
In the future,
you'd start using these things

00:40:05.540 --> 00:40:08.450
with Cocoa Scripting to generate
the data tables that it needs

00:40:08.540 --> 00:40:10.030
to drive your application.

00:40:12.330 --> 00:40:14.300
So what does one of these
things actually look like?

00:40:14.380 --> 00:40:17.300
Well,
here's a very stripped-down example.

00:40:17.300 --> 00:40:18.860
The structure is basically AET-like.

00:40:18.860 --> 00:40:21.430
You've got a root dictionary element.

00:40:21.440 --> 00:40:24.850
Dictionaries contain suites,
then suites contain verbs, classes,

00:40:24.850 --> 00:40:26.200
and enumerations.

00:40:26.200 --> 00:40:27.360
So you can see a verb here.

00:40:27.360 --> 00:40:31.030
The name is the actual scripting
term that shows up to the scripter,

00:40:31.030 --> 00:40:35.260
in this case "save." You have the code,
which is the Apple event code.

00:40:35.300 --> 00:40:38.120
There's a definition for
the direct parameter type,

00:40:38.120 --> 00:40:41.330
and then a parameter with its own name,
code, its type,

00:40:41.330 --> 00:40:44.680
and this one is marked as optional.

00:40:45.970 --> 00:40:48.220
So let's take a little
closer look at a class.

00:40:48.220 --> 00:40:53.280
One of the cool things about SDEFs is
that they support directly a number of

00:40:53.420 --> 00:40:56.470
things that are sort of hacked into AETs,
like inheritance.

00:40:56.560 --> 00:40:58.440
So we actually say, you know,
here's a class.

00:40:58.440 --> 00:40:59.660
Here's what it inherits from.

00:40:59.690 --> 00:41:02.280
You, of course, define elements.

00:41:02.280 --> 00:41:04.260
Elements define what
accesses they support.

00:41:04.260 --> 00:41:06.360
And you go on and define properties.

00:41:06.360 --> 00:41:10.340
There's a read-only property there.

00:41:10.340 --> 00:41:11.820
That's what access equals R means.

00:41:11.820 --> 00:41:14.570
We also support write-only properties,
which AETs don't.

00:41:14.660 --> 00:41:16.240
those show up in passwords
and things like that.

00:41:16.310 --> 00:41:17.790
You can actually say that explicitly now.

00:41:21.380 --> 00:41:23.300
So how do you use one of these things?

00:41:23.300 --> 00:41:25.860
Well, again,
let's look at the current world.

00:41:27.540 --> 00:41:30.850
What you start off with in
your source code is typically,

00:41:30.850 --> 00:41:34.560
for a Carbon application,
an AET res file.

00:41:34.560 --> 00:41:38.120
So you build that into
an actual AET resource,

00:41:38.150 --> 00:41:40.750
which gets fed into the
AppleScript compiler so people

00:41:40.780 --> 00:41:42.490
can actually compile scripts.

00:41:42.600 --> 00:41:46.730
And the AET typically has nothing to do
with your application's implementation.

00:41:46.850 --> 00:41:49.060
On Cocoa, it's a little different.

00:41:49.070 --> 00:41:52.410
You have script suite and
script terminology files.

00:41:52.530 --> 00:41:54.630
Script terminology
goes into the compiler.

00:41:54.710 --> 00:41:59.040
Script suite goes into your application
to drive your actual implementation.

00:42:00.500 --> 00:42:04.940
So in the new world,
you start off with an SDEF file

00:42:04.950 --> 00:42:07.030
and then use the tool I mentioned,
called SDP,

00:42:07.060 --> 00:42:11.360
to generate either an AET.R or
ScriptSuite and ScriptTerminology,

00:42:11.360 --> 00:42:16.200
and then everything works
the same from there.

00:42:16.200 --> 00:42:16.200
In the future,

00:42:17.500 --> 00:42:21.810
You can start using SDEFs to generate
Carbon scripting information,

00:42:21.810 --> 00:42:24.080
which have a more Cocoa-like scheme.

00:42:24.080 --> 00:42:28.020
They drive both the compile
and your application.

00:42:28.020 --> 00:42:30.580
And AppleScript 10 will actually
understand SDEFs directly,

00:42:30.580 --> 00:42:33.460
so you don't have to go through
the intermediate step of an AETE,

00:42:33.460 --> 00:42:36.020
which tends to throw
away some information.

00:42:37.620 --> 00:42:38.840
So, talk is cheap.

00:42:38.860 --> 00:42:39.740
Let's see a demo.

00:42:39.740 --> 00:42:43.130
We've got Chris Espinosa up here.

00:42:47.000 --> 00:42:54.610
So, what we're going to do is we're
going to open up one of the example

00:42:54.610 --> 00:42:54.610
SDEFs which is on the system.

00:42:54.940 --> 00:43:00.910
This one is what a monitor's control
panel would probably look like.

00:43:07.800 --> 00:43:12.600
So here it is.

00:43:12.600 --> 00:43:15.340
There's an application object
to hang everything off of.

00:43:15.340 --> 00:43:16.760
It has display elements.

00:43:16.800 --> 00:43:20.860
If we go down a little bit,
you can see the class display.

00:43:20.860 --> 00:43:22.790
Classes have a synonym.

00:43:22.790 --> 00:43:27.330
Again, an explicitly supported
feature called screen,

00:43:27.330 --> 00:43:29.580
so you can use either term.

00:43:29.580 --> 00:43:31.980
Screens have their own elements,
resolutions and refresh rates.

00:43:32.030 --> 00:43:34.170
And they have a bunch of properties.

00:43:34.180 --> 00:43:37.670
An interesting thing to notice
here is the property types.

00:43:37.680 --> 00:43:41.650
A type can be a primitive type,
like an integer for brightness,

00:43:41.650 --> 00:43:45.940
or it can be another type
defined elsewhere in the SDEF.

00:43:45.970 --> 00:43:49.220
For instance,
currentResolution is of type resolution.

00:43:49.280 --> 00:43:51.930
If we scan down a little bit,
resolution is another class

00:43:51.930 --> 00:43:53.550
that we've defined here.

00:43:53.760 --> 00:43:56.280
A fairly straightforward system.

00:43:56.370 --> 00:43:58.330
This is all very nice,
but it doesn't do us a lot of

00:43:58.330 --> 00:44:01.690
good with the current tool,
so let's turn it into an AETE.

00:44:01.690 --> 00:44:05.600
To do that,
we'll pop back to the terminal.

00:44:08.560 --> 00:44:13.500
run SDP.

00:44:13.600 --> 00:44:17.710
The -fa means spit out a AETE.

00:44:18.600 --> 00:44:20.830
Yay!

00:44:21.200 --> 00:44:24.060
So let's take a little peek at that.

00:44:27.800 --> 00:44:38.900
[Transcript missing]

00:44:43.400 --> 00:44:45.380
Yes, okay.

00:44:45.380 --> 00:44:48.200
And take a look at it in
Script Editor with a dictionary viewer.

00:45:00.600 --> 00:45:06.700
So now let's try a similar
trick for a Cocoa application.

00:45:06.700 --> 00:45:11.860
We have a slightly modified version
of the Internet Connect application,

00:45:11.860 --> 00:45:15.100
which is a nice, small,
simple Cocoa application.

00:45:15.280 --> 00:45:19.180
If we pop open the
AppleScript folder there,

00:45:19.180 --> 00:45:19.180
we'll see that

00:45:19.400 --> 00:45:23.600
We've secretly replaced the ScriptSuite
and ScriptTechnology files with an SDEF.

00:45:25.900 --> 00:45:32.900
[Transcript missing]

00:45:33.700 --> 00:45:40.230
We've defined a shell script
build phase to actually call

00:45:40.230 --> 00:45:46.690
SDP twice to spit out these
script-sweetened script terminology.

00:45:46.690 --> 00:45:46.690
If we build this,

00:45:48.000 --> 00:45:57.800
[Transcript missing]

00:45:59.400 --> 00:46:01.830
There are our script suite
and script terminology files

00:46:01.830 --> 00:46:03.050
that are generated for us.

00:46:03.170 --> 00:46:06.700
They're pretty much exactly the same as
the ones that we had written by hand,

00:46:06.700 --> 00:46:09.300
except these are XML and
I think the originals were

00:46:09.300 --> 00:46:10.880
the old style text P lists.

00:46:10.880 --> 00:46:13.720
There you go.

00:46:13.820 --> 00:46:16.990
Thank you, Chris.

00:46:24.500 --> 00:46:26.400
Okay, codeless terminology.

00:46:26.400 --> 00:46:31.760
There are two reasons that
this turns out to be important.

00:46:31.760 --> 00:46:33.020
One is for plug-ins.

00:46:33.020 --> 00:46:36.420
One of the big problems with
trying to do plug-ins right now is

00:46:36.660 --> 00:46:39.010
because of how AppleScript works.

00:46:39.010 --> 00:46:40.540
You have terms and you have codes.

00:46:40.540 --> 00:46:43.040
AppleScript doesn't actually store
the terms when you compile a script.

00:46:43.040 --> 00:46:46.020
It actually stores the codes,
and then to display the script,

00:46:46.040 --> 00:46:49.560
it uses the terminology again
to map back into the terms.

00:46:49.560 --> 00:46:51.820
You have to maintain this
very strict one-to-one mapping

00:46:51.820 --> 00:46:53.410
between the terms and the codes.

00:46:53.470 --> 00:46:58.230
If you ever mess that up,
then things start getting a bit confused.

00:46:58.330 --> 00:47:03.710
If you have third-party plug-ins,
it's very difficult to maintain this.

00:47:03.710 --> 00:47:04.910
Either you have

00:47:05.070 --> 00:47:08.500
Essentially, you have to ride herd on
everybody and make sure that,

00:47:08.500 --> 00:47:10.590
by God, everyone uses the same codes.

00:47:10.600 --> 00:47:14.910
It's a huge pain and
often doesn't work anyway.

00:47:15.040 --> 00:47:18.480
The other big problem is that some
services that we would like to talk

00:47:18.540 --> 00:47:20.180
to don't have four-character codes.

00:47:20.180 --> 00:47:23.230
They never did,
and they probably never will.

00:47:23.330 --> 00:47:25.840
Specifically,
we're talking about web services.

00:47:25.840 --> 00:47:28.770
Trying to get everyone out there on
the web to add four-character codes

00:47:28.840 --> 00:47:32.870
to all their WSDL would be like trying
to teach the proverbial pig to sing.

00:47:32.870 --> 00:47:35.100
It wastes our time and annoys the pig.

00:47:38.300 --> 00:47:41.120
So we're making them optional.

00:47:41.140 --> 00:47:44.270
If you have simply a term,
that is what AppleScript remembers,

00:47:44.270 --> 00:47:47.640
and suddenly there's nothing
to have a conflict with because

00:47:47.640 --> 00:47:51.140
all you've got is the term,
and if two people use the same term,

00:47:51.140 --> 00:47:53.520
it's the same term, and who can tell?

00:47:53.520 --> 00:47:57.000
Now this only applies to
four-character codes as they

00:47:57.000 --> 00:47:59.490
apply to scripting terminology.

00:47:59.500 --> 00:48:02.120
The AEDESC descriptor type,
which is four-character code now,

00:48:02.120 --> 00:48:03.580
that stays a four-character code.

00:48:03.580 --> 00:48:04.440
We're not messing with that.

00:48:09.260 --> 00:48:11.470
So, like I said,
you can define a four-character

00:48:11.590 --> 00:48:13.040
terminology with no codes.

00:48:13.090 --> 00:48:15.110
This is one of the points behind SDEFS,
is that, gee,

00:48:15.110 --> 00:48:16.600
we can have optional attributes in there.

00:48:16.600 --> 00:48:19.360
One of the optional
attributes is the code.

00:48:19.380 --> 00:48:22.740
AppleScript 10 knows how
to deal with these things.

00:48:22.740 --> 00:48:27.950
It will read terminology with no codes,
and it will send out new codeless events.

00:48:27.960 --> 00:48:31.360
So instead of using a four-character
code for the event type or a

00:48:31.490 --> 00:48:34.800
class code in an object specifier,
it will use the name instead.

00:48:34.840 --> 00:48:41.040
This is kind of like the PSBR events
and UserF mechanisms that we use today.

00:48:41.040 --> 00:48:44.590
We'll be providing a library
that parallels AEDataModel.h,

00:48:44.630 --> 00:48:49.000
so you can do all the interesting
things with codeless events.

00:48:51.300 --> 00:48:55.100
Okay, Carbon Scripting.

00:48:55.100 --> 00:48:57.550
We really like Cocoa Scripting.

00:48:57.550 --> 00:49:00.750
We like the things that
it does for developers.

00:49:00.770 --> 00:49:03.240
There's nothing really like
it in Carbon right now,

00:49:03.240 --> 00:49:05.480
so that's kind of the
point to emulate this.

00:49:05.480 --> 00:49:07.280
Not everyone can use Cocoa.

00:49:07.280 --> 00:49:09.900
Not everyone wants to use Cocoa,
for a variety of reasons.

00:49:09.900 --> 00:49:12.700
This is a flat-C API.

00:49:12.700 --> 00:49:15.700
Unlike ObjectSupportLib,
it's built around

00:49:15.700 --> 00:49:19.300
object method callbacks,
not just accessor routines,

00:49:19.300 --> 00:49:23.200
and it does a lot more for you
than ObjectSupportLib does.

00:49:23.200 --> 00:49:26.990
It will work with either
AppleScript 1 or AppleScript 10,

00:49:26.990 --> 00:49:32.730
but it is a Mac OS 10-only
API because Mac OS 9 is dead.

00:49:34.570 --> 00:49:37.210
Here's what the current world looks like.

00:49:37.230 --> 00:49:40.360
On the left, we've got ObjectSupportLib.

00:49:40.400 --> 00:49:43.660
What you do is you install
a bunch of object accessors.

00:49:43.660 --> 00:49:48.060
Then, when an event comes in,
you have to field it in your application.

00:49:48.060 --> 00:49:48.860
You figure out what it is.

00:49:48.910 --> 00:49:51.860
All the verb logic is actually
handled in your application.

00:49:51.860 --> 00:49:55.370
You call down to OSL to actually
resolve the object specifiers,

00:49:55.460 --> 00:49:56.020
if there are any.

00:49:56.120 --> 00:49:58.380
It calls back to your object
accessors as much as action happens.

00:49:58.380 --> 00:50:00.730
You do some more stuff
back in your application,

00:50:00.730 --> 00:50:04.730
and OK, everything works,
with a lot of effort on your part.

00:50:04.820 --> 00:50:06.620
Cocoa is a lot simpler.

00:50:06.620 --> 00:50:11.030
You feed it configuration data
in the form of the script suite

00:50:11.580 --> 00:50:15.940
file that tells it how various
events map to your implementation.

00:50:15.940 --> 00:50:18.680
Then, when an event comes in,
Cocoa fields it and figures out what

00:50:18.680 --> 00:50:22.600
to do and starts calling your methods,
and everything happens.

00:50:22.600 --> 00:50:25.160
This is the model we want to
emulate with Carbon scripting.

00:50:25.270 --> 00:50:29.150
Again, you have the configuration data,
which is generated out of your SDEF.

00:50:29.270 --> 00:50:31.270
I suppose if you really wanted to,
you could generate it yourself,

00:50:31.290 --> 00:50:32.020
but why would you?

00:50:32.350 --> 00:50:37.380
With a straight C application, of course,
you haven't got any objects

00:50:37.480 --> 00:50:38.630
in the implementation sense.

00:50:38.630 --> 00:50:41.010
You just have a bunch of functions,
so things are a little more

00:50:41.050 --> 00:50:43.200
complicated than Cocoa would be.

00:50:43.200 --> 00:50:48.400
In C++, you can start talking directly
to your model object's methods.

00:50:48.510 --> 00:50:51.110
Again, the events are fielded
by Carbon scripting.

00:50:51.310 --> 00:50:52.320
It calls your methods.

00:50:52.390 --> 00:50:55.010
A lot of stuff happens for you.

00:50:55.590 --> 00:50:58.200
When you want to define an object,
you start off with the SDEF.

00:50:58.200 --> 00:51:00.860
You lay out the terminology,
the codes if you need them,

00:51:00.860 --> 00:51:03.850
all the inheritance and
containment relationships,

00:51:03.860 --> 00:51:07.120
and all your properties,
and the supported verbs.

00:51:07.120 --> 00:51:09.060
What is your object responsible for?

00:51:09.090 --> 00:51:11.060
What does it know how to do?

00:51:11.060 --> 00:51:14.250
For each of these,
you would define a method

00:51:14.250 --> 00:51:16.490
to call to actually do that.

00:51:18.570 --> 00:51:21.820
You pump all that into Carbon Scripting,
so you have all these functions

00:51:21.830 --> 00:51:24.600
for getting contained elements,
getting and sending properties,

00:51:24.600 --> 00:51:26.970
the verbs you support, makes, deletes,
saves, whatever.

00:51:29.310 --> 00:51:45.130
and then Carbon Scripting will
do most of the rest for you.

00:51:45.130 --> 00:51:45.130
One of the cool things
is that if you want to,

00:51:45.130 --> 00:51:45.130
you can be incredibly lazy.

00:51:45.130 --> 00:51:45.130
Given a thing which gets all the
elements of an object and property

00:51:45.130 --> 00:51:45.130
accessors for those elements,

00:51:45.540 --> 00:51:50.750
Carbon Scripting will do get, count,
and exist of any access form for you.

00:51:51.060 --> 00:51:55.810
So index, ranges, whose clauses,
the ones you didn't even know about,

00:51:55.810 --> 00:51:57.460
like random element.

00:51:58.680 --> 00:51:59.600
All happens for you.

00:51:59.600 --> 00:52:04.080
It won't necessarily be
very efficient about this,

00:52:04.180 --> 00:52:06.640
because it's operating
on minimal information.

00:52:06.720 --> 00:52:10.230
If you think you can do a better,
faster job, feel free to override these,

00:52:10.230 --> 00:52:11.670
but you're not obliged to.

00:52:15.180 --> 00:52:16.600
So, scriptable application plugins.

00:52:16.660 --> 00:52:20.050
Carbon scripting plus codeless
terminology pretty much

00:52:20.050 --> 00:52:21.460
give you scriptable plugins.

00:52:21.540 --> 00:52:24.290
Like I said, object support lib kind
of gets in the way.

00:52:24.490 --> 00:52:27.560
First off,
there's the code term mapping problem,

00:52:27.560 --> 00:52:29.420
which that's what codeless
terminology solves.

00:52:29.460 --> 00:52:32.480
The big problem with object support lib,
well, there are two of them.

00:52:32.500 --> 00:52:36.900
One is that you only have one accessor
for all the properties of an object,

00:52:36.900 --> 00:52:40.120
so it's very hard for someone to
come in and add new properties.

00:52:40.120 --> 00:52:43.420
The other thing is that it
knows diddly-squat about verbs.

00:52:43.720 --> 00:52:46.500
All that happens in your application,
so now it's your responsibility

00:52:46.500 --> 00:52:49.720
to provide a framework to
allow people to extend that.

00:52:49.740 --> 00:52:52.910
Carbon scripting takes
care of that for you.

00:52:52.920 --> 00:52:55.900
Like I said, it's all table-driven,
and one of the things that it does is

00:52:55.910 --> 00:53:00.030
it allows someone new to come along
and sort of apply an overlay table.

00:53:00.040 --> 00:53:02.880
It actually works very much
like an Objective-C category.

00:53:02.900 --> 00:53:05.180
And as far as
Carbon scripting is concerned,

00:53:05.180 --> 00:53:06.760
it's just one big happy class.

00:53:06.760 --> 00:53:09.840
And, okay, so some pieces actually
come from your application,

00:53:09.840 --> 00:53:11.040
some pieces came from the plugin.

00:53:11.040 --> 00:53:13.330
It doesn't care.

00:53:16.410 --> 00:53:18.110
All right,
I'm rushing a little bit because

00:53:18.120 --> 00:53:20.300
we're running short of time.

00:53:20.300 --> 00:53:21.300
AppleScript 10.

00:53:21.410 --> 00:53:23.380
The big features:
support for codeless terminology,

00:53:23.390 --> 00:53:25.900
so all the stuff we just
talked about actually works;

00:53:25.900 --> 00:53:29.750
support for Unicode source,
so you can actually compile any language

00:53:29.750 --> 00:53:31.570
you want and it stays in that language.

00:53:31.610 --> 00:53:32.440
Thank you very much.

00:53:32.480 --> 00:53:36.460
One of the big problems with
AppleScript right now--thank

00:53:36.480 --> 00:53:38.300
you--is it's all driven off your
current language preference.

00:53:38.300 --> 00:53:40.460
So if you're a Japanese user and you
write something in Japanese and you

00:53:40.460 --> 00:53:43.850
give it to someone who doesn't have
Japanese set as their primary language,

00:53:43.850 --> 00:53:46.710
it all turns into gibberish.

00:53:47.500 --> 00:53:48.180
Lovely.

00:53:48.180 --> 00:53:53.220
And we're supporting AppleScript plug-ins
to AppleScript itself.

00:53:53.220 --> 00:53:57.280
These will gradually replace
OSAXen as we know them today.

00:53:59.230 --> 00:54:02.600
Unicode scripts: strings and comments,
full Unicode.

00:54:02.790 --> 00:54:05.060
Don't have to worry about it.

00:54:05.060 --> 00:54:08.200
Identifiers will still
follow the current rules,

00:54:08.200 --> 00:54:12.070
so upper and lower case, English letters,
numbers, underscores.

00:54:12.070 --> 00:54:13.710
We might do Unicode identifiers later.

00:54:13.710 --> 00:54:15.370
It makes the parser really hard.

00:54:15.370 --> 00:54:17.000
I'm not sure about that.

00:54:17.000 --> 00:54:20.500
The other thing is that there are too
dang many string classes right now.

00:54:20.500 --> 00:54:24.120
There will be only one string class,
and it will be Unicode.

00:54:24.120 --> 00:54:25.500
There is no separate Unicode text class.

00:54:25.500 --> 00:54:28.900
We'll still understand it as a synonym,
but it means the same thing.

00:54:28.900 --> 00:54:32.310
Let me get Chris up here
to do a quick demo of this.

00:54:34.600 --> 00:54:44.000
[Transcript missing]

00:54:46.870 --> 00:54:48.200
So this is a pretty simple, stupid thing.

00:54:48.200 --> 00:54:50.380
It just makes a bunch of
folders in the Finder based on

00:54:50.380 --> 00:54:52.530
a list of strings we've got.

00:54:52.540 --> 00:54:53.860
And we've got a pretty crazy mix here.

00:54:53.860 --> 00:54:55.940
We've got Japanese, Korean, Arabic,
Hebrew.

00:54:55.940 --> 00:54:57.940
I apologize to any
Arabic or Korean speakers.

00:54:57.940 --> 00:55:01.030
I don't know them well enough
to type anything coherent,

00:55:01.030 --> 00:55:02.800
so they're total gibberish.

00:55:02.800 --> 00:55:05.270
But there's just no way this
would work in AppleScript 1.

00:55:05.280 --> 00:55:07.120
At least one of these,
and probably three or four,

00:55:07.120 --> 00:55:08.340
would all be turned into garbage.

00:55:08.340 --> 00:55:13.880
However,
if we run this with AppleScript 10,

00:55:13.880 --> 00:55:19.800
we're I think you're going
to need a space there.

00:55:19.800 --> 00:55:20.420
I think so.

00:55:27.260 --> 00:55:30.880
It actually maintains
all the languages intact,

00:55:30.880 --> 00:55:31.700
we hope.

00:55:31.700 --> 00:55:32.400
And there it goes.

00:55:37.100 --> 00:55:43.700
Thank you, Chris.

00:55:43.700 --> 00:55:44.300
Okay, AppleScript plug-ins.

00:55:44.300 --> 00:55:44.770
Whoops, got to change screens again.

00:55:45.710 --> 00:55:48.740
Keep forgetting I'm responsible for that.

00:55:48.740 --> 00:55:51.190
The API we're using will be quite
similar to Carbon Scripting,

00:55:51.200 --> 00:55:52.540
hopefully nearly identical.

00:55:52.540 --> 00:55:54.200
There's some differences
because you're actually talking

00:55:54.290 --> 00:55:57.300
directly to AppleScript instead
of an application now.

00:55:57.410 --> 00:56:00.080
The big thing is that you can
actually define first-class objects.

00:56:00.080 --> 00:56:01.500
You can find real
objects with properties,

00:56:01.570 --> 00:56:02.150
with elements.

00:56:02.160 --> 00:56:04.440
You're not just limited to verbs anymore.

00:56:04.550 --> 00:56:08.070
The framework will provide object
model support for you in much the

00:56:08.070 --> 00:56:10.620
same way that Carbon Scripting does.

00:56:10.670 --> 00:56:12.720
You can also extend existing objects.

00:56:12.720 --> 00:56:15.240
If you feel like adding some new
properties to the string class,

00:56:15.240 --> 00:56:15.970
you can do that.

00:56:16.060 --> 00:56:18.100
It should be very cool.

00:56:18.100 --> 00:56:20.620
Things to keep in mind:
you're extending AppleScript itself,

00:56:20.620 --> 00:56:23.380
not applications,
which means you can't use these things

00:56:23.380 --> 00:56:27.520
to hijack applications the way you
do with scripting editions today.

00:56:27.520 --> 00:56:30.360
The other thing we're going to be doing
is we're going to require scripts to

00:56:30.360 --> 00:56:32.840
actually say which plug-ins they want.

00:56:32.990 --> 00:56:34.890
There will be a standard
set that you always get,

00:56:34.890 --> 00:56:35.370
of course.

00:56:35.430 --> 00:56:37.430
But beyond that,
you have to actually explicitly say,

00:56:37.430 --> 00:56:41.720
and you will get those and
only those scripting editions.

00:56:41.720 --> 00:56:43.040
This will make life
slightly more difficult.

00:56:43.040 --> 00:56:44.900
You have to think a little bit
more about what you're doing,

00:56:45.010 --> 00:56:48.560
but it means you have a completely
reliable runtime environment.

00:56:48.560 --> 00:56:52.800
No one can come along later and just say,
"Oh, you happen to be writing on a system

00:56:52.800 --> 00:56:58.070
that has Akua whatever installed,
and you didn't." It doesn't

00:56:58.120 --> 00:56:59.830
matter to your script anymore.

00:57:02.580 --> 00:57:06.440
Once we've got planned for Jaguar,
process and file folder and disk,

00:57:06.440 --> 00:57:10.500
which we pick up out of the current
system events implementation,

00:57:10.500 --> 00:57:13.660
what we've got on the list,
so you don't bother asking us about them,

00:57:13.700 --> 00:57:16.310
we'll be redoing all the
basic types in order to pick

00:57:16.310 --> 00:57:18.060
up the object model support.

00:57:18.060 --> 00:57:19.210
We'll redo application.

00:57:19.310 --> 00:57:25.060
We're also going to do URL, XML,
and streams from a

00:57:25.190 --> 00:57:28.220
variety of data sources:
files, networks, and processes.

00:57:28.770 --> 00:57:31.680
If you have other suggestions,
we'd love to hear them.

00:57:31.790 --> 00:57:34.100
But that's what the feedback form is for.

00:57:34.100 --> 00:57:35.750
By now you're probably asking,
"Oh my god,

00:57:35.750 --> 00:57:38.880
what's going to happen to my existing
scripts?" Not that this isn't cool,

00:57:39.030 --> 00:57:39.820
of course.

00:57:39.820 --> 00:57:41.940
Fortunately, nothing.

00:57:42.100 --> 00:57:46.050
AppleScript 10, as Chris mentioned,
is actually a separate OSA language,

00:57:46.050 --> 00:57:47.310
and we're shipping them both.

00:57:47.360 --> 00:57:51.340
As far as OSA is concerned,
these are two totally separate

00:57:51.370 --> 00:57:55.920
languages that just happen to
look a lot like each other.

00:57:55.970 --> 00:57:59.380
Compiled scripts remember
which one they were built with,

00:57:59.380 --> 00:58:03.390
so your existing AppleScript 1
scripts stay running in AppleScript 1,

00:58:03.390 --> 00:58:05.110
and we're maintaining that,
and it's all about

00:58:05.110 --> 00:58:06.760
backward compatibility,
so you stay safe.

00:58:07.000 --> 00:58:08.970
Now, if you want to make the jump
to AppleScript 10 and take

00:58:08.970 --> 00:58:11.000
advantage of all the features,
you can do that.

00:58:11.160 --> 00:58:16.000
AppleScript 10 will execute
most 1.x scripts as is.

00:58:16.000 --> 00:58:18.400
We are making a few semantic
changes because there are certain

00:58:18.400 --> 00:58:21.870
things in AppleScript 1 that just
never actually worked quite right.

00:58:22.020 --> 00:58:24.390
They either fail or they
give the wrong answer.

00:58:24.490 --> 00:58:26.280
So if you happen to be
relying on the wrong answer,

00:58:26.290 --> 00:58:29.990
then you've got a problem,
but hopefully you weren't doing that.

00:58:31.940 --> 00:58:35.840
So, what can you do now with the
Jaguar seeds you've actually got?

00:58:35.840 --> 00:58:37.490
You can start using SDEF files.

00:58:37.620 --> 00:58:43.340
The processor, the DTD, of course,
and some examples are all on the disk,

00:58:43.340 --> 00:58:45.520
so you can tear those apart,
start writing your own,

00:58:45.520 --> 00:58:48.320
use them to generate your AET and
ScriptSuite script terminology

00:58:48.320 --> 00:58:50.480
files for your applications today.

00:58:50.480 --> 00:58:53.910
You can compile UTF-8
scripts with AppleScript 10.

00:58:53.910 --> 00:58:57.160
Just arrange for OSA Compile
to type UTF-8 text,

00:58:57.210 --> 00:58:58.650
and it'll be happy.

00:58:58.690 --> 00:59:00.980
Unfortunately,
there's a bug that breaks all the

00:59:01.000 --> 00:59:03.040
coercions to UTF-8 text in the seed.

00:59:03.040 --> 00:59:05.880
We fixed that already,
but you don't have that.

00:59:06.050 --> 00:59:07.400
Finally, you can give us feedback.

00:59:07.400 --> 00:59:09.690
Here, there's a feedback form,
which we'll be showing

00:59:09.690 --> 00:59:10.710
you the slide for later.

00:59:10.710 --> 00:59:14.000
Of course, you can always email us.

00:59:14.040 --> 00:59:14.860
What can you do later?

00:59:14.900 --> 00:59:20.120
When we get to Jaguar,
you can use SDEFs to build -- again,

00:59:20.140 --> 00:59:20.790
keep using SDEFs.

00:59:20.880 --> 00:59:22.570
You can start developer Carbon scripting.

00:59:22.570 --> 00:59:26.340
There'll be an initial SDK,
and you can start testing with the

00:59:26.340 --> 00:59:28.840
AppleScript 10 beta that'll be on there.

00:59:28.980 --> 00:59:30.430
If you're using the
same script as Jaguar,

00:59:30.440 --> 00:59:32.040
these things will actually be for real.

00:59:32.040 --> 00:59:34.900
You can actually ship applications
that are based on Carbon scripting,

00:59:34.910 --> 00:59:41.460
and you can ship AppleScript 10
scripts and plug-ins.

00:59:41.460 --> 00:59:42.040
That's it for me.

00:59:42.040 --> 00:59:43.630
Let me get Chris back up here
to say a few things about

00:59:43.630 --> 00:59:44.820
AppleScript documentation.

00:59:51.200 --> 01:02:19.400
[Transcript missing]