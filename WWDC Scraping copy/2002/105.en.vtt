WEBVTT

00:00:01.530 --> 00:00:06.680
So thanks for coming to the
Porting UNIX Apps to Mac OS X talk.

00:00:06.680 --> 00:00:08.990
How many of you were
here for Ernie's talk?

00:00:10.780 --> 00:00:11.700
Ask it the other way around.

00:00:11.700 --> 00:00:13.180
How many of you were not
here for the last talk?

00:00:13.240 --> 00:00:14.850
Okay, good.

00:00:15.010 --> 00:00:15.480
Enough of you.

00:00:15.480 --> 00:00:18.190
There's some overlap between
what Ernie talked about and

00:00:18.190 --> 00:00:20.190
what we're going to talk about.

00:00:20.200 --> 00:00:23.500
So we're going to take this a little
bit quicker than we had originally

00:00:23.510 --> 00:00:26.140
planned to spare those of you that have
already heard a lot of this content.

00:00:26.140 --> 00:00:29.040
There will be plenty of
time for Q&A at the end,

00:00:29.060 --> 00:00:31.840
and we have some pretty
experienced people porting people.

00:00:31.840 --> 00:00:34.700
So keep the questions in
mind for the end of the talk.

00:00:34.700 --> 00:00:36.140
My name is Jason Evans.

00:00:36.140 --> 00:00:37.740
I'll be giving the
first half of the talk,

00:00:37.810 --> 00:00:39.930
and Dave Zarzycki will
be doing the second half.

00:00:40.510 --> 00:00:43.180
We work in the BSD Technologies Group,
which is part of the

00:00:43.180 --> 00:00:44.770
Core Operating Systems Group.

00:00:44.780 --> 00:00:49.560
We spend a lot of time porting
UNIX applications to OS X,

00:00:49.560 --> 00:00:52.590
maintaining them,
feeding patches back to the original

00:00:52.620 --> 00:00:56.560
maintainers of that software
when it's a fitting thing to do.

00:00:58.040 --> 00:01:01.590
So, we're going to talk about some
of the gotchas that you'll run

00:01:01.590 --> 00:01:03.900
into when porting applications.

00:01:04.070 --> 00:01:07.950
Not really going to talk about the
normal process you would run into,

00:01:07.970 --> 00:01:11.900
you know,
go through in porting a UNIX application.

00:01:12.060 --> 00:01:15.320
Going to talk about the things
that you would stumble on

00:01:15.320 --> 00:01:17.090
with OS X that are unique.

00:01:17.590 --> 00:01:19.160
We're not going to talk about drivers.

00:01:19.160 --> 00:01:20.830
There are other sessions this week.

00:01:20.830 --> 00:01:23.540
We'll refer to some of those
at the end of this talk.

00:01:26.120 --> 00:01:28.100
Graphical user interfaces.

00:01:28.100 --> 00:01:30.800
Not going to talk about that here either.

00:01:30.800 --> 00:01:32.400
There are other sessions
you should check out.

00:01:32.400 --> 00:01:35.170
You're highly encouraged to,
if you have a graphical application,

00:01:35.170 --> 00:01:37.300
say that uses X,
you're encouraged to go ahead

00:01:37.300 --> 00:01:39.140
and use the Aqua frameworks.

00:01:39.140 --> 00:01:40.650
Check that out.

00:01:40.700 --> 00:01:42.500
Multimedia we won't be talking about.

00:01:42.500 --> 00:01:46.260
Printing, that doesn't affect a
number of UNIX applications.

00:01:46.540 --> 00:01:49.890
There's another session I think tomorrow
afternoon that you should check out.

00:01:49.900 --> 00:01:52.350
We're not going to talk about
font handling and pretty much

00:01:52.350 --> 00:01:55.300
anything you can see we're not
going to talk about in this session.

00:01:56.100 --> 00:01:57.040
So.

00:02:00.430 --> 00:02:01.340
Brief history.

00:02:01.340 --> 00:02:02.680
Ernie gave some history on this.

00:02:02.680 --> 00:02:05.940
A little bit of background kind
of from a technical perspective.

00:02:05.940 --> 00:02:11.050
Next took, back in the early 90s,
they took BSD 4.3 from

00:02:11.050 --> 00:02:15.260
Berkeley and they took Mach 2.5
and they merged that together,

00:02:15.260 --> 00:02:18.390
made a number of modifications,
enhancements, and they maintained that

00:02:18.390 --> 00:02:19.390
over a number of years.

00:02:19.970 --> 00:02:22.540
When Mac OS X development
work was started on that,

00:02:22.540 --> 00:02:24.710
they wanted to sort of refresh that.

00:02:24.780 --> 00:02:27.770
So they took the final
drop from Berkeley,

00:02:27.770 --> 00:02:33.140
the 4.4 BSD Lite, Lite 2 distribution,
and then Mach 3.0.

00:02:33.140 --> 00:02:35.540
They merged that together,
merged some of the next

00:02:35.540 --> 00:02:37.830
modifications into that,
and that was sort of the

00:02:37.910 --> 00:02:39.240
foundation for Mac OS X.

00:02:39.240 --> 00:02:42.340
The software comes from a
number of different places,

00:02:42.340 --> 00:02:46.120
and since then, we've also taken some of
the technology that's been

00:02:46.580 --> 00:02:48.440
developed by the FreeBSD project.

00:02:48.820 --> 00:02:50.020
We've been working on some
of the features that we've

00:02:50.020 --> 00:02:51.810
been working on in the past,
in FreeBSD 3.2 and more

00:02:51.820 --> 00:02:53.250
recently in 4.4 and 4.5.

00:02:53.300 --> 00:02:57.190
It's kind of hit and miss, though,
which parts came from which versions.

00:02:58.930 --> 00:03:02.470
Here's a basic system diagram from
the perspective of someone that's

00:03:02.470 --> 00:03:04.140
actually porting a UNIX application.

00:03:04.140 --> 00:03:07.080
A lot of the higher-level frameworks
are left off in this diagram.

00:03:07.080 --> 00:03:11.680
This is really kind of the low-level
command line view of things.

00:03:11.680 --> 00:03:14.520
So your application will
typically sit on top of libraries,

00:03:14.520 --> 00:03:16.780
which you're surely familiar with,
and frameworks,

00:03:16.900 --> 00:03:20.220
which are a conglomeration
of headers and libraries.

00:03:20.220 --> 00:03:22.630
It's kind of a neat little
packaging for an integrated

00:03:22.630 --> 00:03:24.660
development environment programming.

00:03:25.400 --> 00:03:28.390
You'll potentially run into some of this
if you're using the printing framework,

00:03:28.390 --> 00:03:29.060
for example.

00:03:29.060 --> 00:03:31.160
You hear of frameworks in OS X.

00:03:31.160 --> 00:03:33.260
That's basically what they are,
and there's some special

00:03:33.260 --> 00:03:36.060
flags that you pass to the
compiler in order to use those.

00:03:36.060 --> 00:03:39.970
Under that, we have libsystem,
which is a conglomeration of a

00:03:39.970 --> 00:03:42.650
number of low-level system libraries.

00:03:42.660 --> 00:03:47.300
libc, libm, which is the math library,
libinfo, which gives you net info access.

00:03:47.330 --> 00:03:49.020
About a half dozen libraries in total.

00:03:49.020 --> 00:03:52.440
We merge those all together, essentially,
to reduce the amount of

00:03:52.440 --> 00:03:53.940
shared library overhead.

00:03:54.390 --> 00:03:56.090
There's, of course,
a certain amount of overhead

00:03:56.090 --> 00:03:58.360
for every shared library that
you load into your application.

00:03:58.360 --> 00:04:02.460
And pretty much every application
uses most of these libraries,

00:04:02.460 --> 00:04:05.400
and so we reduce the overhead,
and it gives us a pretty

00:04:05.570 --> 00:04:07.720
significant overall system savings.

00:04:07.740 --> 00:04:11.760
At the bottom level, you have the kernel,
and you can see in this diagram,

00:04:11.760 --> 00:04:13.360
BSD and Mach are side-by-side.

00:04:13.360 --> 00:04:15.860
We don't actually have a
microkernel architecture.

00:04:15.860 --> 00:04:18.890
We have the APIs for both of those,
but they are merged together

00:04:18.890 --> 00:04:20.560
into the same address space.

00:04:20.560 --> 00:04:23.460
I/O Kit is our driver framework.

00:04:24.320 --> 00:04:27.160
The I/O Kit is essentially
how you would write drivers.

00:04:27.160 --> 00:04:31.820
It's substantially different
from typical Unix drivers.

00:04:31.820 --> 00:04:35.960
So there are other sessions
that talk about that in detail.

00:04:38.310 --> 00:04:40.340
OS X comes from a number
of different places.

00:04:40.340 --> 00:04:43.820
The typical distribution that
you'd be familiar with is the

00:04:43.820 --> 00:04:45.160
one that comes on most systems.

00:04:45.160 --> 00:04:50.460
It comes with the
Mac OS X client software.

00:04:50.460 --> 00:04:54.870
We also have a server product which
has some enhanced management tools,

00:04:54.870 --> 00:04:57.040
also has a few extra pieces of software.

00:04:57.040 --> 00:05:01.960
This really isn't going to be that
important to you unless you find

00:05:01.960 --> 00:05:03.900
yourself developing on Mac OS X's server.

00:05:03.900 --> 00:05:07.250
Be aware that not all of the software
is available on the client product.

00:05:07.340 --> 00:05:10.340
For example,
MySQL I don't think is a default

00:05:10.340 --> 00:05:12.400
part of the client product.

00:05:12.400 --> 00:05:15.980
If you end up using that,
keep in mind that you're limiting

00:05:16.030 --> 00:05:18.510
yourself to the server product.

00:05:18.700 --> 00:05:24.880
Darwin is a distribution that we do of
the low levels of the operating system.

00:05:24.880 --> 00:05:28.300
That's our kernel, most of the drivers,
all the user land,

00:05:28.300 --> 00:05:29.340
the low-level libraries.

00:05:29.340 --> 00:05:32.040
We provide that in
source and binary form.

00:05:32.040 --> 00:05:34.880
We usually try to get that
out about the same time as we

00:05:34.880 --> 00:05:36.580
get out our major releases.

00:05:36.960 --> 00:05:39.320
So you're able to get
at all the source code,

00:05:39.320 --> 00:05:40.700
pretty much, of the low level.

00:05:40.700 --> 00:05:45.430
This ends up being a viable
development platform if you're used

00:05:45.560 --> 00:05:47.410
to a traditional UNIX environment.

00:05:47.410 --> 00:05:49.600
Pretty much everything that
you're used to is there.

00:05:51.400 --> 00:05:54.640
Third-party software is provided as
ports from a couple of different places.

00:05:54.640 --> 00:05:56.970
The Fink project,
which is hosted on SourceForge,

00:05:56.990 --> 00:05:59.960
they have several hundred
projects that they've ported over,

00:05:59.960 --> 00:06:03.110
and they provide Debian
packages that you can install

00:06:03.110 --> 00:06:05.020
on your OS X or Darwin system.

00:06:05.020 --> 00:06:07.870
This is interesting from
the perspective of porting,

00:06:07.870 --> 00:06:10.820
basically because there are
a lot of examples there.

00:06:10.820 --> 00:06:12.940
If you have an application
similar to something that has

00:06:12.940 --> 00:06:14.780
already been ported by Fink,
you can take a look at

00:06:14.840 --> 00:06:15.740
how they've done it.

00:06:16.020 --> 00:06:18.460
We're also working on
our own infrastructure,

00:06:18.460 --> 00:06:22.560
which is going to be available on the
opendarwin.org site sometime soon.

00:06:22.560 --> 00:06:26.040
Keep a look for it in
the next week or so.

00:06:29.070 --> 00:06:30.580
File system portability issues.

00:06:30.620 --> 00:06:31.940
Some of these are general issues.

00:06:31.940 --> 00:06:34.140
Some of them are specific to OS X.

00:06:34.200 --> 00:06:36.700
POSIX file systems are
normally case sensitive.

00:06:36.750 --> 00:06:39.860
Probably any UNIX operating
system you've worked on has had

00:06:39.860 --> 00:06:41.670
a case sensitive file system.

00:06:42.200 --> 00:06:45.630
Sparse files, although not universal,
are available on some operating

00:06:45.630 --> 00:06:49.580
systems so that you can create very
large files that are zero-filled,

00:06:49.580 --> 00:06:51.760
and then as you actually
write the blocks of data,

00:06:51.760 --> 00:06:54.330
those get filled in on the disk,
and it doesn't end up taking

00:06:54.330 --> 00:06:55.340
a lot of space overall.

00:06:55.340 --> 00:06:58.970
So you could create a two-terabyte file,
sparsely fill it, and only end up using a

00:06:58.970 --> 00:07:00.300
few megabytes of space.

00:07:00.300 --> 00:07:03.260
Keep in mind that although
our UFS file system does that,

00:07:03.260 --> 00:07:05.180
our HFS Plus file system does not.

00:07:05.180 --> 00:07:08.040
So HFS Plus is case-sensitive.

00:07:08.960 --> 00:07:14.710
That case-sensitive file system
doesn't really cause as many

00:07:14.740 --> 00:07:18.250
problems as you might think,
but there are a few gotchas.

00:07:18.260 --> 00:07:21.420
One of them is,
say that you have a build system

00:07:21.420 --> 00:07:24.520
where you would have a make file,
and you would type make,

00:07:24.600 --> 00:07:27.240
and then you would type make install
to actually install the software.

00:07:27.240 --> 00:07:29.900
Well, a lot of the GNU software,
as an example,

00:07:29.900 --> 00:07:33.560
has an all-capitals install
file in its top-level directory.

00:07:33.560 --> 00:07:36.270
And so you type make install,
and it tells you that

00:07:36.350 --> 00:07:37.670
the file is up to date.

00:07:38.800 --> 00:07:39.740
Not ideal.

00:07:39.740 --> 00:07:43.360
Basically what happens there is that
the file make is looking for the

00:07:43.450 --> 00:07:46.600
install file to see if it's up to date,
and it finds it.

00:07:46.770 --> 00:07:49.540
It tried all lowercase install,
and the operating system,

00:07:49.710 --> 00:07:51.850
the file system, said, yeah, it's there.

00:07:51.860 --> 00:07:54.340
So there are a couple
of ways around that.

00:07:54.340 --> 00:07:56.620
You can create a .phony
target in your make file.

00:07:56.620 --> 00:07:58.620
You can move the file aside.

00:07:58.640 --> 00:08:01.940
It's not that big of a deal,
but it's a pretty surprising result

00:08:01.940 --> 00:08:04.130
if you don't realize what's going on.

00:08:04.140 --> 00:08:08.560
Another thing that you cannot do,
you cannot have, for example,

00:08:08.640 --> 00:08:12.960
a capital M make file and a lowercase
m make file in the same directory,

00:08:12.960 --> 00:08:17.860
because they're treated as the same
file with the HFS Plus file system.

00:08:17.860 --> 00:08:20.900
HFS Plus also has resource forks.

00:08:20.900 --> 00:08:24.760
This is something that we're not really,
it's kind of a legacy thing.

00:08:24.760 --> 00:08:26.120
We're not really using it that much.

00:08:26.120 --> 00:08:28.220
It's something to be
aware that it exists.

00:08:28.220 --> 00:08:31.370
When you're moving files around,
if you're trying to

00:08:31.370 --> 00:08:34.980
preserve somebody's data,
you might need to be aware that the

00:08:35.010 --> 00:08:37.340
resource forks actually exist there.

00:08:38.480 --> 00:08:40.760
Hard links are not supported
by all the file systems.

00:08:40.760 --> 00:08:42.480
UFS supports them.

00:08:42.480 --> 00:08:45.470
HFS Plus, after a fashion, supports them.

00:08:45.480 --> 00:08:49.160
There's some trickery that goes on behind
the scenes to actually make that work.

00:08:49.160 --> 00:08:52.600
From an external perspective,
it effectively does the right thing.

00:08:52.600 --> 00:08:55.870
But there are other file
systems like MS-DOS,

00:08:55.870 --> 00:08:57.480
ISO 9660.

00:08:57.480 --> 00:08:59.880
If you need your
software to run on those,

00:08:59.880 --> 00:09:02.080
keep in mind that you're not going
to have hard links in every case.

00:09:02.080 --> 00:09:05.320
Okay, and at this point,
Dave is going to come out,

00:09:05.440 --> 00:09:07.130
and we should have plenty
of time for Q&A at the end,

00:09:07.140 --> 00:09:08.320
so keep your questions.

00:09:08.320 --> 00:09:09.740
ready?

00:09:13.000 --> 00:12:10.500
[Transcript missing]

00:12:10.790 --> 00:12:13.340
Also in Mac OS X,
we have something we call

00:12:13.340 --> 00:12:15.240
the two-level namespace.

00:12:15.240 --> 00:12:18.500
What that means is that your
application or your library,

00:12:18.500 --> 00:12:21.120
whatever you're building,
has every one of its symbols that

00:12:21.200 --> 00:12:23.060
it uses that it doesn't provide.

00:12:23.060 --> 00:12:26.960
What library provides that is
recorded in your application.

00:12:26.960 --> 00:12:29.900
So, for example,
if you use Sturcat from LibSystem,

00:12:29.900 --> 00:12:34.300
it's recorded in your library
that Sturcat comes from LibSystem.

00:12:34.300 --> 00:12:36.820
So in that case,
if one of the other libraries that

00:12:36.820 --> 00:12:40.540
you use starts providing a Sturcat,
you won't get the wrong Sturcat.

00:12:40.700 --> 00:12:42.770
You get the one you know
you were linked against.

00:12:42.770 --> 00:12:47.100
This can provide a problem, though,
for legacy UNIX developers

00:12:47.100 --> 00:12:50.760
who rely on what the inverse
of a two-level namespace is,

00:12:50.760 --> 00:12:51.900
is the flat namespace.

00:12:51.900 --> 00:12:55.240
So, for example, if you want to override
the malloc libraries,

00:12:55.240 --> 00:12:58.670
malloc, free, realloc, et cetera,
and you want every library to

00:12:58.680 --> 00:13:01.920
take advantage of those symbols,
you need to compile your

00:13:01.920 --> 00:13:05.950
application differently,
and that's through the dash flat

00:13:06.030 --> 00:13:09.760
underscore namespace compiler flag,
and that'll provide you, again,

00:13:09.760 --> 00:13:10.660
with a flat namespace.

00:13:10.700 --> 00:13:12.070
Amen.

00:13:12.680 --> 00:13:17.100
Also, due to our Next heritage,
where dynamic-- dynamicism

00:13:17.100 --> 00:13:19.870
is heavily encouraged,
static linking is seldom

00:13:19.890 --> 00:13:23.320
used in the system and,
in fact, is heavily discouraged.

00:13:23.420 --> 00:13:26.840
You'll find it very hard to find
a .a file anywhere on the system,

00:13:26.840 --> 00:13:29.960
so get used to dynamicism.

00:13:30.060 --> 00:13:33.960
Also, in Jaguar,
we've added Mac OS 9-style weak symbols.

00:13:34.060 --> 00:13:38.200
Weak symbols are a way for-- at runtime
to determine if a library is available.

00:13:38.260 --> 00:13:41.560
So, for example,
if you need some function

00:13:41.560 --> 00:13:45.500
called foo from some library,
you can just say if foo,

00:13:45.500 --> 00:13:48.300
and if foo is non-null,
you can then use foo.

00:13:48.400 --> 00:13:52.490
And by testing the-- for
symbols for non-zero,

00:13:52.630 --> 00:13:56.500
you can know whether or not the
symbol is available for use.

00:13:56.830 --> 00:14:01.590
Frameworks is the,
frameworks are bundles.

00:14:02.010 --> 00:14:06.720
They're basically everything you think
of as a library is now a framework.

00:14:06.930 --> 00:14:11.490
The one that the BSD team deals with
the most is lib system and that's

00:14:11.490 --> 00:14:15.860
your traditional UNIX libraries as
both Ernie and Jason have covered.

00:14:15.860 --> 00:14:17.180
It covers lib C, lib M.

00:14:17.180 --> 00:14:21.360
It used to cover lib curses
under PUMA and previous systems.

00:14:21.360 --> 00:14:25.040
That's been broken out now into a
separate library for performance

00:14:25.350 --> 00:14:27.680
reasons and compatibility reasons.

00:14:27.680 --> 00:14:30.630
And there are a few other
scattered libraries that you can

00:14:30.630 --> 00:14:32.210
probably think of that are in

00:14:32.680 --> 00:14:34.200
Other runtime issues.

00:14:34.200 --> 00:14:35.910
Configuration resource files.

00:14:36.000 --> 00:14:42.200
Open directory is the preferred way from
Apple to store your system preferences.

00:14:42.430 --> 00:14:44.530
Today,
that'll back into a NetInfo database

00:14:44.560 --> 00:14:46.840
for local system information.

00:14:46.970 --> 00:14:52.540
For personal user information,
CF/NS preferences is the way to go.

00:14:52.640 --> 00:14:59.790
The preferences files will actually
end up in your home directory/library/

00:15:00.440 --> 00:15:05.560
and David In the case of startup
items and scripts and whatnot,

00:15:05.560 --> 00:15:09.990
the old BSD way of just etc,
rc and whatnot and static scripts

00:15:09.990 --> 00:15:14.640
doesn't scale for a dynamic system
like Mac OS X where users just want

00:15:14.640 --> 00:15:17.800
to drag startup items to their system.

00:15:17.800 --> 00:15:20.030
So considering that,
they live somewhere different.

00:15:20.110 --> 00:15:22.580
They're in system library startup items.

00:15:22.640 --> 00:15:25.460
They're bundle-based,
but they're not real CFBundles.

00:15:25.550 --> 00:15:31.110
And they're composed of an executable
and a property list or a plist.

00:15:31.160 --> 00:15:35.880
This property list contains
dependency and provides information

00:15:35.880 --> 00:15:39.770
to allow our runtime startup
system to determine when to launch

00:15:39.770 --> 00:15:41.920
startup items in the correct order.

00:15:42.000 --> 00:15:45.810
It also allows for determining
parallelism so that potentially some,

00:15:45.810 --> 00:15:48.520
you know,
two network services could start

00:15:48.520 --> 00:15:53.710
up at the same time to potentially
increase -- improve startup time.

00:15:54.530 --> 00:15:55.960
More runtime issues.

00:15:55.960 --> 00:15:57.100
Pre-binding.

00:15:57.250 --> 00:16:01.740
Pre-binding is an optimization technique
to make applications launch faster.

00:16:01.740 --> 00:16:07.320
What it involves is taking all the
symbols that an application uses

00:16:07.410 --> 00:16:11.410
that are provided by libraries and
pre-computing the location the libraries

00:16:11.410 --> 00:16:13.760
will load at in your address space.

00:16:13.760 --> 00:16:17.940
This allows for increased
better launch times because no

00:16:17.940 --> 00:16:20.380
computation needs to be done.

00:16:20.380 --> 00:16:24.380
It also provides decreased memory
usage because less memory is used.

00:16:24.510 --> 00:16:28.060
The one con, though,
that many UNIX people might

00:16:28.060 --> 00:16:32.440
run into is that it modifies
your executables and libraries.

00:16:32.440 --> 00:16:35.800
This consequently confuses some
applications such as backup and

00:16:35.810 --> 00:16:37.800
security tools like Tripwire.

00:16:37.990 --> 00:16:42.490
Having all your programs change every
time you update a library is kind of

00:16:42.490 --> 00:16:44.090
annoying from a Tripwire perspective.

00:16:45.940 --> 00:16:49.460
The other important thing to note
is our bin SH is now bash in Jaguar.

00:16:49.460 --> 00:16:51.380
It was Zish.

00:16:51.380 --> 00:16:54.080
Those of you that are good
script writers won't notice.

00:16:54.080 --> 00:16:56.140
Portable scripts won't have a problem.

00:16:56.210 --> 00:16:58.820
But there were,
as we discovered during the transition,

00:16:58.820 --> 00:17:03.080
there were a few Zishisms that crept
in that bad people made mistakes.

00:17:03.330 --> 00:17:08.130
But that was -- you good
people won't have that problem.

00:17:08.810 --> 00:17:11.230
On to the topic of frameworks
to get into more detail.

00:17:11.440 --> 00:17:15.140
It's a bundle-based alternative
to the UNIX hierarchy,

00:17:15.290 --> 00:17:19.380
so you'll find things in the
paths that are listed there.

00:17:19.400 --> 00:17:23.280
It contains the libraries and the
headers and potentially different

00:17:23.280 --> 00:17:26.760
versions of the same library,
too, for compatibility's sake.

00:17:26.800 --> 00:17:31.040
It potentially contains other
resources such as sounds,

00:17:31.040 --> 00:17:35.200
pictures, anything you can think of
that a library might need.

00:17:35.200 --> 00:17:40.040
In a typical UNIX system,
you would find these in user, share,

00:17:40.120 --> 00:17:41.720
or some directory.

00:17:42.620 --> 00:17:44.750
Frameworks can live in
the following locations.

00:17:44.760 --> 00:17:48.460
There's system library frameworks
for the things that Apple provides.

00:17:48.600 --> 00:17:53.000
There's library frameworks for the
things the system administrator installs.

00:17:53.150 --> 00:17:57.660
There's network library frameworks
for kind of a network-wide location.

00:17:57.780 --> 00:18:00.000
There's your home directory yourself
if you want to personally install

00:18:00.000 --> 00:18:02.000
a framework for your own apps.

00:18:02.130 --> 00:18:04.440
And applications that need a
framework can also install an

00:18:04.440 --> 00:18:08.840
application inside-- a framework
inside their application bundle,

00:18:08.840 --> 00:18:11.810
since applications are
bundles themselves.

00:18:12.250 --> 00:18:14.960
On the topic of authentication
and authorization,

00:18:14.960 --> 00:18:18.410
Apple's preferred framework
is the security framework.

00:18:18.550 --> 00:18:23.380
It provides a capability and rights-based
system for users to control the ability

00:18:23.760 --> 00:18:25.940
to do things in a secure manner.

00:18:26.130 --> 00:18:28.800
We do provide PAM for a portability sake.

00:18:28.800 --> 00:18:31.860
If you need to port
your application to 10,

00:18:31.890 --> 00:18:32.960
you can call PAM.

00:18:33.030 --> 00:18:39.390
And what PAM does is just quickly
call into the security framework.

00:18:39.390 --> 00:18:39.390
It's just a thin shim.

00:18:39.870 --> 00:18:41.290
In the case of the
development environment,

00:18:41.350 --> 00:18:42.800
we are mostly GNU toolchain.

00:18:42.800 --> 00:18:46.340
This includes GCC, GDB, Make.

00:18:46.510 --> 00:18:49.600
The GNU binutils is not there.

00:18:49.600 --> 00:18:53.480
We've got a very heavily
modified version of it that it's

00:18:53.520 --> 00:18:56.310
basically not the same anymore.

00:18:56.690 --> 00:19:00.200
In the case of the C preprocessor,
we have a technology

00:19:00.200 --> 00:19:01.790
called precompiled headers.

00:19:02.080 --> 00:19:05.240
Precompiled headers provides a
massive speed improvement for

00:19:05.240 --> 00:19:08.890
C++ and Objective-C applications,
but negligible speed

00:19:08.970 --> 00:19:10.900
improvement for C applications.

00:19:11.010 --> 00:19:13.450
And considering that the bulk
of Apple's developers are C++

00:19:13.450 --> 00:19:18.090
and Objective-C developers,
we decided to optimize for their case.

00:19:18.100 --> 00:19:23.290
This can create a problem, though,
that our C preprocessor that understands

00:19:23.310 --> 00:19:27.670
precompiled headers does not understand
some of the GNU C preprocessor extensions

00:19:27.720 --> 00:19:30.460
that some of you might be using.

00:19:30.460 --> 00:19:35.630
So you might need to use
the --no-cpp-precomp flag

00:19:35.650 --> 00:19:38.360
to get your code to compile.

00:19:38.360 --> 00:19:41.840
We also have the lovely project builder
and interface builder that you can find

00:19:41.930 --> 00:19:43.950
out more about at the rest of the show.

00:19:44.090 --> 00:19:48.820
But it provides a GUI editing environment
for not only taking your legacy projects,

00:19:48.840 --> 00:19:50.410
like in project builder,
and using our GUI editors

00:19:50.410 --> 00:19:51.080
and tools there.

00:19:51.080 --> 00:19:51.080
But it also provides a GUI editing
environment for not only

00:19:51.080 --> 00:19:51.350
taking your legacy projects,
like in project builder,

00:19:51.350 --> 00:19:51.810
and using our GUI editors
and tools there,

00:19:51.810 --> 00:19:52.330
but also for the application.

00:19:52.340 --> 00:19:53.080
And we have a lot of great
tools out there that we can

00:19:53.080 --> 00:19:53.080
use to build our project.

00:19:53.080 --> 00:19:53.120
And we have a lot of
great tools out there.

00:19:53.120 --> 00:19:53.760
In the case of the C preprocessor,
we have a lot of great tools out there.

00:19:53.820 --> 00:19:56.930
But if you want to build GUI apps, too,
you can use our interface builder

00:19:56.930 --> 00:19:59.470
to design your GUI in a GUI,
which is a novelty for

00:19:59.470 --> 00:20:02.190
the Unix developers.

00:20:02.890 --> 00:20:04.200
API considerations.

00:20:04.200 --> 00:20:05.250
We do not have pull.

00:20:05.250 --> 00:20:08.580
It would break binary compatibility,
and we consider binary compatibility

00:20:08.680 --> 00:20:10.850
very important for our customers.

00:20:10.950 --> 00:20:13.840
Pthreads is partially implemented,
but if you find a problem,

00:20:13.840 --> 00:20:15.260
please let us know.

00:20:15.260 --> 00:20:18.860
It is an ever-evolving suite of APIs,
and they're getting

00:20:18.870 --> 00:20:20.590
better with each release.

00:20:20.800 --> 00:20:43.090
:Asynchronous I/O is missing,
but we do have P-read and P-write.

00:20:43.090 --> 00:20:43.090
This allows for multiple threads to
read and write from files without

00:20:43.090 --> 00:20:43.090
creating a lock around the L-seq call.

00:20:43.090 --> 00:20:43.090
OpenSSL is available,
but CDSA is preferred for implementing

00:20:43.090 --> 00:20:43.090
encryption and secure transport of data.

00:20:43.870 --> 00:20:47.640
There's a good reason for this, too,
is that CDSA can abstract-- Well,

00:20:47.760 --> 00:20:51.210
in the case of OpenSSL,
keys are handled directly by

00:20:51.240 --> 00:20:53.910
the library in the application,
and that's just not

00:20:53.910 --> 00:20:55.100
always possible sometimes.

00:20:55.100 --> 00:20:57.020
Sometimes your key might
be on a hardware device,

00:20:57.020 --> 00:21:00.460
such as a token or some
off-board or PCI device.

00:21:00.500 --> 00:21:03.700
And with OpenSSL,
that simply doesn't work.

00:21:03.700 --> 00:21:05.500
We also have Objective-C in the system.

00:21:05.500 --> 00:21:08.400
It's--if some of you have ever
dealt with a small talk language,

00:21:08.400 --> 00:21:10.400
it's very similar.

00:21:10.500 --> 00:21:13.800
If you want to start diving
into GUI applications,

00:21:13.800 --> 00:21:18.860
such as Objective-C--COCO,
you will be able--you will

00:21:18.860 --> 00:21:19.700
need to learn Objective-C.

00:21:19.860 --> 00:21:20.920
It just takes a day.

00:21:21.000 --> 00:21:21.500
It's not hard.

00:21:21.500 --> 00:21:23.900
And it's really nice, in fact.

00:21:24.010 --> 00:21:27.800
Also, in the case of lib tool,
we actually had a tool called lib tool.

00:21:27.900 --> 00:21:29.100
We had it first.

00:21:29.210 --> 00:21:32.830
So in the case of the GNU lib tool,
we've called it glib tool.

00:21:33.010 --> 00:21:35.240
And that's just something to
run into when you type lib

00:21:35.330 --> 00:21:37.200
tool from the command line.

00:21:37.960 --> 00:21:40.090
Also,
in the case of mockifying your code,

00:21:40.140 --> 00:21:44.080
sometimes the POSIX APIs might
fail you and you need to

00:21:44.080 --> 00:21:45.550
drop down to the Mach APIs.

00:21:45.640 --> 00:21:49.260
We hope that doesn't happen,
but if it does, please let us know.

00:21:49.260 --> 00:21:53.010
But some things to be aware of is
fine-grained control over process

00:21:53.010 --> 00:21:55.060
priority in the case of real time.

00:21:55.120 --> 00:21:57.190
You might need to use the Mach APIs.

00:21:57.230 --> 00:22:00.620
In the case of bootstrap ports,
it's a Mach concept,

00:22:00.620 --> 00:22:05.790
you might find that if you're daemonizing
yourself on a pre-Jaguar system,

00:22:05.790 --> 00:22:09.050
that your bootstrap port
is--no longer works.

00:22:09.110 --> 00:22:13.010
And that was an implementation
detail that kind of broke daemon's

00:22:13.020 --> 00:22:14.320
launch from a GUI context.

00:22:14.320 --> 00:22:18.430
So you might need to be careful
about which context you launch your

00:22:18.430 --> 00:22:22.480
daemons from or directly deal with
the Mach bootstrap port situation.

00:22:22.480 --> 00:22:24.720
Also,
in the case of the P-Trace system call,

00:22:24.720 --> 00:22:28.040
we basically only implement
the attached APIs.

00:22:28.080 --> 00:22:31.480
Past that point, you need to use Mach to
control an application,

00:22:31.540 --> 00:22:38.820
but this really shouldn't affect anybody
except GDB and possibly a few other apps.

00:22:38.820 --> 00:22:38.820
But...

00:22:39.220 --> 00:22:42.860
In the case--moving on to
mailing lists to contact us.

00:22:42.960 --> 00:22:44.340
We have lists.apple.com.

00:22:44.340 --> 00:22:48.450
There's more lists than are listed here,
but the important ones to know

00:22:48.450 --> 00:22:52.360
about are the Apple CDSA list for
talking about our CDSA technology.

00:22:52.510 --> 00:22:55.660
We have a Unix porting list for
those of you that want to ask

00:22:55.660 --> 00:22:58.540
porting questions after the show.

00:22:58.630 --> 00:23:03.130
We have a Darwin development list,
which is our kind of general forum

00:23:03.140 --> 00:23:05.260
for the development of Darwin.

00:23:05.380 --> 00:23:07.800
We have a Darwin OS users list.

00:23:07.840 --> 00:23:10.640
If you're just a user and you want
to poke around and ask questions,

00:23:10.640 --> 00:23:12.820
this is the place to go.

00:23:13.030 --> 00:23:16.700
We have a Darwin kernel list if you want
to ask very kernel-specific questions,

00:23:16.700 --> 00:23:20.320
like possibly about the funnel
or implementing a kernel and

00:23:20.320 --> 00:23:23.300
networking or I/O Kit extension.

00:23:23.330 --> 00:23:25.650
And in the case of
development of the user level,

00:23:25.660 --> 00:23:27.190
we have a mailing list dedicated to that.

00:23:27.280 --> 00:23:29.470
So if you're more worried
about libraries and,

00:23:29.640 --> 00:23:31.530
you know,
bringing lib system up to date with

00:23:31.530 --> 00:23:35.600
FreeBSD and questions about that,
that would be the list to go.

00:23:35.630 --> 00:23:40.710
Websites, we have our premier open source
website hosted at Apple called

00:23:40.720 --> 00:23:43.300
www.opensource.apple.com.

00:23:43.330 --> 00:23:45.700
We have the recently
announced OpenDarwin site,

00:23:45.700 --> 00:23:49.400
which is a community-run
website and development site

00:23:49.520 --> 00:23:52.900
for pushing Darwin forward
from a community perspective.

00:23:52.960 --> 00:23:56.050
And as Jason talked about earlier,
there's the Fink project for

00:23:56.240 --> 00:24:01.380
getting ported software already,
and that's fink.sourceforge.net.

00:24:02.190 --> 00:24:05.010
In the case of books that will help
you along in your porting efforts,

00:24:05.190 --> 00:24:08.140
there is the UNIX for
Developers from O'Reilly.

00:24:08.140 --> 00:24:12.240
You can find out where to get
it from our developer website,

00:24:12.240 --> 00:24:13.150
TechPubs.

00:24:13.270 --> 00:24:17.200
There's the Inside Macintosh
Macro Runtime Architecture,

00:24:17.310 --> 00:24:21.810
for if you want to get even more
in detail about the Macro Runtime.

00:24:22.310 --> 00:24:24.830
There's the additional
developer toolchain documents,

00:24:24.830 --> 00:24:29.700
so the typical info pages and whatnot
you can get for GCC and GDB and whatnot

00:24:29.700 --> 00:24:32.950
are available on the developer website.

00:24:33.510 --> 00:24:35.930
For the further roadmap,
we have the Darwin Kernel

00:24:35.930 --> 00:24:39.940
session tomorrow morning,
bright at 9:00 a.m.

00:24:39.940 --> 00:24:44.110
We have the security session,
also in this same building, at 2:00 p.m.

00:24:44.110 --> 00:24:44.700
tomorrow.

00:24:44.700 --> 00:24:48.570
And we have our feedback forum
tomorrow at 3:30 in room J1 of

00:24:48.570 --> 00:24:51.220
the main developer conference.

00:24:51.220 --> 00:24:54.620
So who to contact if
you have some questions?

00:24:54.700 --> 00:24:56.090
I'm Dave Zarzycki.

00:24:56.090 --> 00:24:57.920
Jason was who was just up.

00:24:58.090 --> 00:25:00.640
And Rob and Jordan are
going to be up for the Q&A.