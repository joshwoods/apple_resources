WEBVTT

00:00:08.660 --> 00:00:10.500
Good afternoon, everybody.

00:00:10.530 --> 00:00:14.440
I'd like to begin with a
couple of announcements.

00:00:14.620 --> 00:00:18.650
One, anybody who is interested in being
considered for the beta program,

00:00:18.730 --> 00:00:24.660
we would encourage them to sign
up at applec.apple.com/webobjects.

00:00:24.720 --> 00:00:27.720
And I believe we have the
URL posted in our lab in Room L,

00:00:27.720 --> 00:00:30.310
and you can probably
sign up online there.

00:00:30.400 --> 00:00:33.180
And also,
one of the things that we're doing

00:00:33.180 --> 00:00:39.540
is we're collecting business cards
of developers of websites that

00:00:39.540 --> 00:00:44.640
would like to be included as kind of
reference sites or reference customers.

00:00:44.730 --> 00:00:48.220
And so after the session,
I'll be on over there if anybody's

00:00:48.220 --> 00:00:50.100
interested in that as well.

00:00:50.190 --> 00:00:51.860
So with that...

00:00:55.500 --> 00:00:59.700
I would like to introduce
Melissa Turner for our WebObjects

00:00:59.700 --> 00:01:01.890
and Web Services session.

00:01:09.320 --> 00:01:10.260
Thanks, Bob.

00:01:10.550 --> 00:01:12.760
Hi again to those of you
who were here last year.

00:01:12.760 --> 00:01:13.720
I'm still Melissa.

00:01:13.940 --> 00:01:17.060
I'm still in WebObjects engineering,
and I'm still a female engineer.

00:01:17.060 --> 00:01:19.020
It still happens.

00:01:20.560 --> 00:01:24.610
I'm here today to talk about
web services and WebObjects.

00:01:24.630 --> 00:01:27.940
A lot of you probably know that there's
been a lot of hype in the industry over

00:01:28.040 --> 00:01:32.320
the last year or so about web services,
and we thought we should do something

00:01:32.320 --> 00:01:36.060
about that in WebObjects and help
you go in a direction that a lot

00:01:36.140 --> 00:01:38.410
of people seem to be wanting to go.

00:01:39.550 --> 00:01:42.500
This session is going to introduce
basic web services technologies,

00:01:42.610 --> 00:01:45.940
and I'm going to talk about
using WebObjects to vend

00:01:45.940 --> 00:01:48.320
and consume web services.

00:01:48.380 --> 00:01:51.320
What we expect you to learn from this is
a little bit about some of the buzzwords

00:01:51.430 --> 00:01:52.740
that are out there in the industry now.

00:01:52.820 --> 00:01:58.060
SOAP, WSDL, UDDI, Apache Access.

00:01:58.300 --> 00:02:01.340
We expect you to have a basic
grasp of how to vend a web

00:02:01.340 --> 00:02:04.550
service using WebObjects,
both using the traditional model

00:02:04.550 --> 00:02:07.520
where you get to write all the code,
and using direct-to-web services,

00:02:07.570 --> 00:02:12.580
which some of you may have heard about
during the tools overview on Monday,

00:02:12.640 --> 00:02:16.230
and how to consume a web
service using WebObjects.

00:02:16.270 --> 00:02:20.510
I'm not going to talk about any
WebObjects technologies in depth.

00:02:20.670 --> 00:02:22.880
If we shipped it last year
and you don't know about it,

00:02:22.880 --> 00:02:24.660
this is the wrong place for you to be.

00:02:24.780 --> 00:02:28.070
And I'm not going to talk about .NET,
which is Microsoft's entry

00:02:28.070 --> 00:02:29.760
in the Web Services Fair.

00:02:30.700 --> 00:02:31.970
What are web services?

00:02:32.140 --> 00:02:35.440
Well, I could give you a great big
long dissertation on what web

00:02:35.440 --> 00:02:38.470
services might or might not be,
but I think a picture's

00:02:38.540 --> 00:02:40.390
worth a thousand words.

00:02:41.010 --> 00:02:42.440
Web services aren't really defined.

00:02:42.440 --> 00:02:44.170
Everybody's got their own entry.

00:02:44.270 --> 00:02:50.100
For discovery, you've got Disco, WSDL,
WS Inspection, UDDI.

00:02:50.100 --> 00:02:56.410
You've got Crimson, Xerxes,
the Jax-P parsers.

00:02:56.730 --> 00:03:00.500
Everybody has come up
with their own standards,

00:03:00.500 --> 00:03:05.090
their own specifications,
and the industry's currently

00:03:05.090 --> 00:03:05.090
trying to hammer out which
pieces are going to be used.

00:03:05.360 --> 00:03:08.090
Parts that people seem to have
come to a consensus on are that web

00:03:08.150 --> 00:03:11.200
services are web pages for computers.

00:03:11.200 --> 00:03:14.240
They're basically intended for
application-to-application communication.

00:03:14.240 --> 00:03:17.560
There's not intended to be
any human being in the link,

00:03:17.710 --> 00:03:22.010
except possibly you as developers
who are going to have to,

00:03:22.010 --> 00:03:23.670
well, debug this stuff.

00:03:23.680 --> 00:03:28.100
The information transmitted is commonly
agreed that should be XML encoded.

00:03:28.100 --> 00:03:32.600
This usually means using SOAP over
HTTP as a communications protocol.

00:03:32.600 --> 00:03:34.960
We'll talk a little bit about SOAP later.

00:03:35.300 --> 00:03:38.520
Web services are described using WSDL.

00:03:38.670 --> 00:03:40.500
We'll talk about that later as well.

00:03:40.660 --> 00:03:44.910
And we'll talk about how they
can be located using UDDI.

00:03:46.520 --> 00:03:47.380
Why are web services?

00:03:47.410 --> 00:03:50.300
This is a really big question
since it seems to be so big

00:03:50.320 --> 00:03:51.440
and so hyped in the industry.

00:03:51.440 --> 00:03:55.520
Web services, well,
they're intended to be an integration

00:03:55.570 --> 00:03:59.670
technology to allow people to move
data between all of the very strict

00:03:59.670 --> 00:04:01.840
vertical silos that are out there.

00:04:01.840 --> 00:04:05.700
You may have a database that you've built
for your customer end using WebObjects

00:04:05.750 --> 00:04:10.020
that serves web pages and serves as
your online portal for customers to

00:04:10.190 --> 00:04:12.040
come and purchase stuff from you.

00:04:12.040 --> 00:04:14.990
You may have a separate customer
relationship management system

00:04:14.990 --> 00:04:16.300
that's independent of that.

00:04:16.300 --> 00:04:18.500
You've probably got a purchasing
and fulfillment system.

00:04:18.500 --> 00:04:21.430
You may want to automate your business
processes and get all of these things

00:04:21.540 --> 00:04:25.070
talking to each other so you don't have
either people or demons moving data

00:04:25.070 --> 00:04:28.770
from database to database to database,
which is what tends to happen nowadays.

00:04:31.810 --> 00:04:32.400
How can you do this?

00:04:32.470 --> 00:04:33.940
There's a few types of web services.

00:04:34.060 --> 00:04:38.250
There's RPC-based web services,
which essentially involve

00:04:38.250 --> 00:04:40.190
making a remote procedure call.

00:04:40.190 --> 00:04:41.090
You're all familiar with this.

00:04:41.210 --> 00:04:46.690
Using either SOAP RPC or XML RPC seem
to be the big contenders.

00:04:46.790 --> 00:04:49.290
There's also
SOAP document-style services,

00:04:49.340 --> 00:04:53.380
where you simply pass a wad of XML,
and it's up to the receiver on the

00:04:53.380 --> 00:04:57.540
other end to figure out what to
do with that large wad document.

00:04:57.630 --> 00:05:02.800
You can have synchronous
or asynchronous services.

00:05:02.800 --> 00:05:02.800
The most common ones are:

00:05:03.490 --> 00:05:07.600
currently synchronous with
a request-response loop,

00:05:07.680 --> 00:05:11.340
that may be followed from the
fact that it's done using HTTP,

00:05:11.340 --> 00:05:14.310
where you naturally expect to
have a request-response loop.

00:05:14.320 --> 00:05:17.760
What people are starting to talk
about as well are asynchronous web

00:05:17.760 --> 00:05:22.380
services where you may register
using one particular call and get,

00:05:22.380 --> 00:05:26.110
at some later point,
one or more notifications

00:05:26.110 --> 00:05:27.700
from a web service.

00:05:27.700 --> 00:05:32.740
A good example of this would be a
list-serve type of thing where you make

00:05:32.830 --> 00:05:38.010
one web service call to register for
a mailing list and you subsequently get

00:05:38.010 --> 00:05:40.840
lots and lots of messages from that list.

00:05:43.460 --> 00:05:45.190
Technology-wise,
I've already mentioned SOAP.

00:05:45.280 --> 00:05:48.520
SOAP is a lightweight XML protocol
for transmitting data in

00:05:48.520 --> 00:05:49.600
a distributed environment.

00:05:49.600 --> 00:05:51.320
What does this mean?

00:05:51.410 --> 00:05:54.920
Well, it means it defines the contents of
the package you're passing around,

00:05:54.920 --> 00:05:56.860
but isn't bound to a wire protocol.

00:05:56.860 --> 00:06:00.610
You can pass SOAP messages over HTTP.

00:06:00.630 --> 00:06:03.650
You can pass them using SMTP.

00:06:03.740 --> 00:06:07.160
And if you want, you can go all the way
down and do SOAP over TCP.

00:06:07.250 --> 00:06:08.590
A few people have done it.

00:06:09.560 --> 00:06:12.220
So SOAP defines what the
messages should look like,

00:06:12.340 --> 00:06:14.800
but doesn't define how
you transmit them around.

00:06:14.800 --> 00:06:18.040
An example of this would be,
here's a SOAP message.

00:06:18.040 --> 00:06:21.020
You can see that it's got an
envelope that basically delimits

00:06:21.270 --> 00:06:24.370
the data that's being passed
around as part of this message,

00:06:24.440 --> 00:06:29.130
and specifies the encoding that's
used to read data out of the message.

00:06:29.140 --> 00:06:32.690
It has a SOAP body that says, okay,
here's the payload.

00:06:32.700 --> 00:06:34.360
And it has a payload.

00:06:34.360 --> 00:06:38.360
This specific example that we see
up here is for an RPC request.

00:06:39.690 --> 00:06:41.190
So,

00:06:42.390 --> 00:06:49.220
The root element of the SOAP body
is the name of the SOAP request

00:06:49.360 --> 00:06:50.610
that you're trying to pass.

00:06:50.950 --> 00:06:53.300
And it's children.

00:06:54.110 --> 00:06:56.330
are the parameters to the
request you're making.

00:06:56.350 --> 00:06:59.340
In this case,
we have a--this is the canonical

00:06:59.340 --> 00:07:01.400
stock price request example.

00:07:01.400 --> 00:07:05.900
So we're passing across the stock
symbol and the company name.

00:07:06.950 --> 00:07:08.660
Here's the response for that request.

00:07:08.680 --> 00:07:12.730
Again, you see a SOAP envelope
containing the same information

00:07:12.730 --> 00:07:14.850
that was there in the request.

00:07:14.930 --> 00:07:16.560
A body.

00:07:17.010 --> 00:07:21.380
In this case,
we've got a response element, again,

00:07:21.740 --> 00:07:26.240
containing the payload,
which is all of the information

00:07:26.240 --> 00:07:27.660
that's being returned by that request.

00:07:27.660 --> 00:07:30.680
In this case,
it's a data structure containing

00:07:31.150 --> 00:07:34.610
the last trade price and the
day's volume of the stock,

00:07:34.660 --> 00:07:36.290
the stock trading.

00:07:36.490 --> 00:07:37.380
That's pretty simple.

00:07:37.500 --> 00:07:37.730
That's SOAP.

00:07:37.840 --> 00:07:42.530
That's one of the main
web services technologies.

00:07:42.610 --> 00:07:44.410
Next would be WSDL.

00:07:44.510 --> 00:07:46.620
WSDL is the
Web Services Definition Language.

00:07:46.700 --> 00:07:49.330
It's used to define
interfaces for web services.

00:07:49.450 --> 00:07:53.080
It sets out such things as the location,
the data types in use,

00:07:53.080 --> 00:07:55.270
and the messages that can be passed.

00:07:55.380 --> 00:07:59.690
If we could go to demo machine one,
I'll actually show you a WSDL.

00:08:09.170 --> 00:08:11.950
This is the WSDL for the
Google search service that a lot

00:08:12.040 --> 00:08:14.070
of people have been talking about.

00:08:14.190 --> 00:08:17.090
Google announced it a
couple of weeks ago.

00:08:17.290 --> 00:08:21.980
You can see that basically it's an
XML document with a whole bunch of nodes.

00:08:22.050 --> 00:08:27.540
You start reading WSDLs usually from the
bottom up where a service is defined.

00:08:27.610 --> 00:08:33.830
In this case, the service's name is the
Google Search Service,

00:08:33.830 --> 00:08:33.830
and it defines-- whoopsie--

00:08:34.400 --> 00:08:39.340
A port name, which is dealt with
higher up in the WSDL,

00:08:39.340 --> 00:08:44.440
and a binding, which is also described
higher in the WSDL.

00:08:44.550 --> 00:08:48.030
And here we can see the location
to which you send SOAP requests if

00:08:48.090 --> 00:08:50.460
you want to access this service.

00:08:50.570 --> 00:08:54.550
The bindings deal with the
communication protocols in use

00:08:54.560 --> 00:08:56.730
for invoking a web service.

00:08:56.830 --> 00:08:59.940
In this case,
it's the Google Search binding.

00:08:59.940 --> 00:09:02.330
We see that it's an RPC.

00:09:02.790 --> 00:09:06.290
There are some times I find
Explorer extremely useful,

00:09:06.290 --> 00:09:09.800
and sometimes I find it extremely,
extremely frustrating.

00:09:12.580 --> 00:09:15.950
We can see that it's
an RPC-style service,

00:09:15.950 --> 00:09:21.740
and that, again, its transport mechanism
is SOAP over HTTP.

00:09:21.850 --> 00:09:26.670
We can see the names of the
operations that this service supports.

00:09:26.780 --> 00:09:29.650
I'm going to digress a little bit here
briefly to talk about the difference

00:09:29.670 --> 00:09:31.240
between a service and an operation.

00:09:31.540 --> 00:09:36.060
You might want to think of a service,
a web service, as a class,

00:09:36.060 --> 00:09:39.890
and operations are methods on
that class that can be invoked.

00:09:40.520 --> 00:09:45.480
So, down at the bottom of the WSDL file,
we talked about the service itself.

00:09:45.480 --> 00:09:48.140
And in the binding and port
type segments of the WSDL,

00:09:48.140 --> 00:09:51.210
we talk about the operations.

00:09:51.570 --> 00:09:54.970
In this section,
we see that there's SOAP operations,

00:09:55.240 --> 00:09:57.780
we see their names,
and we see a little bit of

00:09:57.780 --> 00:10:00.660
information that we don't really
need to know about because we

00:10:00.660 --> 00:10:03.210
already know that it's SOAP HTTP.

00:10:03.320 --> 00:10:08.430
If we go and look up at the port types,
it will define the input message and the

00:10:08.430 --> 00:10:13.100
output messages for a given operation.

00:10:13.210 --> 00:10:16.400
The messages are also
defined in the WSDL file.

00:10:16.510 --> 00:10:19.460
Here we'll look at the
Do Google Search message.

00:10:19.540 --> 00:10:23.560
Do Google Search is an RPC call
that takes a number of parameters.

00:10:23.560 --> 00:10:28.350
We can see here, it takes a key,
something called Q, start, max results,

00:10:28.530 --> 00:10:31.540
filter, restrict, and a few other things.

00:10:31.640 --> 00:10:35.540
We also see that the types of
these parameters are defined.

00:10:35.580 --> 00:10:38.700
So a developer who's looking at
this WSDL knows that they can make

00:10:38.730 --> 00:10:43.400
a SOAP RPC call with all of these
parameters to the address that was

00:10:43.990 --> 00:10:47.690
specified down at the bottom of the file,
and they will get--

00:10:47.920 --> 00:10:49.300
A response.

00:10:49.400 --> 00:10:55.410
We see here that the response is, well,
it's a return value, and the type

00:10:55.730 --> 00:10:57.220
Google search result.

00:10:57.220 --> 00:10:59.750
Well, that doesn't sound like
a type I'm familiar with.

00:10:59.820 --> 00:11:05.080
So if I go look up further in the file,
well, here's a Google search result type.

00:11:05.240 --> 00:11:08.600
It tells us all we could
possibly know about that type.

00:11:08.640 --> 00:11:13.190
Google search result is essentially
a structured data type containing

00:11:13.190 --> 00:11:15.630
all of the following elements.

00:11:15.750 --> 00:11:19.400
It contains whether document
filtering is on or off,

00:11:19.510 --> 00:11:22.030
some comments about the search,

00:11:22.210 --> 00:11:24.800
The estimated total results and
all the things you're familiar

00:11:24.800 --> 00:11:29.780
with seeing on the Google web page
when you actually do a search.

00:11:29.900 --> 00:11:31.740
So that's a WSDL file.

00:11:31.740 --> 00:11:34.040
It's actually fairly simple,
fairly straightforward,

00:11:34.040 --> 00:11:36.840
describes everything you need
to know about a given web

00:11:36.840 --> 00:11:39.380
service and its operations.

00:11:39.420 --> 00:11:42.380
And now I need to go back to the slides.

00:11:44.010 --> 00:11:45.900
So that was WSDL.

00:11:45.900 --> 00:11:48.940
Oops, that was the faux demo.

00:11:49.030 --> 00:11:51.860
Sorry about that, guys.

00:11:51.860 --> 00:11:54.230
Technology-wise,
there's one more technology that's

00:11:54.320 --> 00:11:57.760
very popular and very discussed
in the web services world,

00:11:57.760 --> 00:12:00.880
and that's UDDI,
or the Uniform Discovery and

00:12:00.880 --> 00:12:03.380
Description Integration.

00:12:03.380 --> 00:12:08.140
Basically what UDDI is is a spec that
describes how to build a registry

00:12:08.140 --> 00:12:11.570
for information about web services.

00:12:11.600 --> 00:12:12.990
It can be a public registry.

00:12:13.000 --> 00:12:18.780
Microsoft and IBM both run registries
where various businesses can go and

00:12:18.880 --> 00:12:24.150
enter information about the business,
about the web services it's offering,

00:12:24.150 --> 00:12:26.060
all kinds of stuff.

00:12:26.060 --> 00:12:28.740
Or a company can run a private
registry that contains information

00:12:28.830 --> 00:12:32.120
only about the business partners
they actually deal with.

00:12:32.210 --> 00:12:37.460
UDDI has three types of
data in its registry,

00:12:37.460 --> 00:12:37.460
what they call...

00:12:37.870 --> 00:12:40.300
White pages, yellow pages,
and green pages.

00:12:40.380 --> 00:12:43.160
White pages is essentially the
information about the business,

00:12:43.160 --> 00:12:46.820
the business name, its contact points,
the services it offers.

00:12:47.010 --> 00:12:51.140
Yellow pages is taxonomy information
that is only relevant to somebody

00:12:51.140 --> 00:12:53.460
trying to locate a service.

00:12:53.540 --> 00:12:57.750
And green pages,
which contain all of the information

00:12:57.750 --> 00:13:00.480
about how to invoke a given service.

00:13:00.870 --> 00:13:04.660
The green pages are originally intended
to be what the UDDI spec calls a T-model,

00:13:04.660 --> 00:13:07.140
but what seems to be happening
is that a lot of the T-models

00:13:07.150 --> 00:13:11.300
contain only one element,
and that's a link to the WSDL that

00:13:11.390 --> 00:13:14.020
describes the web services.

00:13:14.200 --> 00:13:19.080
And just as a point of note,
Unity AI Server can be built as a

00:13:19.080 --> 00:13:21.860
direct-to-web services application.

00:13:21.860 --> 00:13:24.500
We're hoping to provide you
with an example of this when we

00:13:24.580 --> 00:13:26.290
actually ship our next release.

00:13:26.410 --> 00:13:29.200
But we're just hoping at this point.

00:13:30.160 --> 00:13:32.170
So those of you who have been sleeping
through that part can wake up now

00:13:32.170 --> 00:13:35.590
because we're going to start talking
about web services in WebObjects.

00:13:35.700 --> 00:13:37.600
Whys and Hows.

00:13:37.640 --> 00:13:39.990
Why do we have web
services in WebObjects?

00:13:40.060 --> 00:13:41.960
Well,
the most obvious answer is that we're

00:13:41.960 --> 00:13:45.490
one of the silos that people may be
wanting to move data in and out of.

00:13:45.510 --> 00:13:48.540
We've got a very proprietary data model,
proprietary interfaces.

00:13:48.540 --> 00:13:50.690
It's hard to talk to us.

00:13:52.480 --> 00:13:55.270
We're also one of the silos
people want to move data out of.

00:13:55.300 --> 00:13:59.730
You build a web app for
your customer purchasing,

00:13:59.830 --> 00:14:05.260
you have to move it into your
purchasing system somehow.

00:14:05.510 --> 00:14:08.610
We're hoping to allow users to
leverage existing WoW investments.

00:14:08.640 --> 00:14:11.770
I mean, you guys, a lot of you,
have spent lots of time

00:14:11.770 --> 00:14:14.460
building EO models,
lots of time building business logic.

00:14:14.460 --> 00:14:17.080
We don't want to force you to
rewrite that in another environment.

00:14:17.190 --> 00:14:19.700
We want you to be able to
leverage what you've already got.

00:14:19.830 --> 00:14:23.510
For people building new applications,
we want you to be able to leverage EOF.

00:14:23.600 --> 00:14:25.300
I mean, we think EOF's a cool technology.

00:14:25.300 --> 00:14:27.780
A lot of you guys seem to
think EOF's a cool technology.

00:14:27.780 --> 00:14:30.780
We'd like to let you use it in
the web services space as well.

00:14:31.540 --> 00:14:35.480
And we're hoping to let you leverage
the web services session model.

00:14:35.480 --> 00:14:38.030
Sessions are something that
haven't been really well dealt

00:14:38.040 --> 00:14:39.460
with in web services to date.

00:14:39.460 --> 00:14:42.030
We think we have a pretty good solution,
and we'd like to let you use it.

00:14:44.140 --> 00:14:47.650
So what do we do in WebObjects
to support web services?

00:14:47.820 --> 00:14:52.980
Well, we're providing support for web
services being used as either a

00:14:52.980 --> 00:14:55.100
client or a vendor of web services.

00:14:55.100 --> 00:14:59.800
We're providing direct web services,
which Ron will talk about later.

00:14:59.890 --> 00:15:02.470
And we've built our
product around Access,

00:15:02.670 --> 00:15:08.200
which a couple of weeks after
I started research into web services,

00:15:08.200 --> 00:15:11.860
one of my coworkers asked me,
why do you keep talking about EO Access?

00:15:11.860 --> 00:15:13.890
It's like, I'm not.

00:15:14.100 --> 00:15:17.320
Works better in the
verbal than visual realm.

00:15:17.320 --> 00:15:19.970
But for the rest of this presentation,
whenever you hear Access,

00:15:19.970 --> 00:15:22.200
think Apache Access, not EO Access.

00:15:22.200 --> 00:15:27.920
Access is an open-source SOAP stack being
produced by the folks over at Apache.

00:15:28.040 --> 00:15:32.570
It's their next
generation of Apache SOAP.

00:15:32.570 --> 00:15:34.400
It's completely rewritten.

00:15:34.400 --> 00:15:35.980
It's a lot more modular.

00:15:35.980 --> 00:15:39.510
They've broken the dependencies
that the Apache SOAP had on

00:15:39.510 --> 00:15:41.940
running inside a servlet container.

00:15:41.940 --> 00:15:44.080
All kinds of good stuff
that we thought made sense.

00:15:44.100 --> 00:15:47.920
But we've made it very fitting
to put inside WebObjects since,

00:15:48.210 --> 00:15:51.040
well, the world really doesn't
need another SOAP stack.

00:15:51.200 --> 00:15:52.940
There's a lot of them out there.

00:15:52.970 --> 00:15:55.260
And it, like I said,
is at the heart of our

00:15:55.260 --> 00:15:57.370
implementation of web services.

00:15:57.900 --> 00:15:59.440
So how does our implementation work?

00:15:59.580 --> 00:16:02.400
Well, a request comes in.

00:16:02.520 --> 00:16:06.400
If you're running in standalone mode,
it'll come in through a web server.

00:16:06.460 --> 00:16:08.650
If you're running in
servlet deployment mode,

00:16:08.750 --> 00:16:11.090
it'll come in through a J2EE server.

00:16:11.180 --> 00:16:14.880
And it's handed off to the
WebObjects application server.

00:16:16.610 --> 00:16:20.970
Request comes into the runtime and is
sent to the WoWebServiceRequestHandler.

00:16:21.280 --> 00:16:24.270
This is similar,
but not quite like all of the

00:16:24.270 --> 00:16:28.400
other request handlers you've seen,
because instead of calling into

00:16:28.470 --> 00:16:33.060
specified WebObjects classes,
it calls into Access.

00:16:33.180 --> 00:16:34.560
Access does a couple of things.

00:16:34.560 --> 00:16:39.070
First, it checks to see if there's
a session associated with the

00:16:39.070 --> 00:16:40.760
SOAP request that's incoming.

00:16:40.890 --> 00:16:43.700
And if so,
it goes to the WoSessionManager and

00:16:43.700 --> 00:16:47.230
pulls the session out and associates
it with the incoming request.

00:16:47.300 --> 00:16:52.400
And then it figures out how
to call your web service code.

00:16:53.600 --> 00:16:54.590
How does it do that?

00:16:54.600 --> 00:16:58.000
Well, Axis takes the request.

00:16:58.000 --> 00:17:01.870
The Axis engine basically goes off
and looks at its web service registry,

00:17:02.100 --> 00:17:05.360
which can be specified in
a WSDD file or dynamically,

00:17:05.480 --> 00:17:08.200
to figure out which
service is being invoked.

00:17:08.200 --> 00:17:12.100
It does this first by looking
for the HTTP SOAP action header.

00:17:12.200 --> 00:17:16.800
If it doesn't find a SOAP action header,
it goes off and looks at the URL.

00:17:16.800 --> 00:17:19.200
If it can't find the information
it's looking for in the URL,

00:17:19.200 --> 00:17:22.650
it will go actually parse and
examine the body of the SOAP request

00:17:23.120 --> 00:17:26.700
to find the namespace in the
application and match it up that way.

00:17:26.780 --> 00:17:28.590
That will give it the service.

00:17:28.620 --> 00:17:34.870
We talked earlier about SOAP RPC and
how the root element of the

00:17:34.950 --> 00:17:39.000
SOAP body is the name of the
RPC method it's trying to invoke.

00:17:39.000 --> 00:17:42.180
So it takes that and figures
out which provider it should

00:17:42.180 --> 00:17:44.000
use to invoke that service.

00:17:44.000 --> 00:17:47.800
The provider is something that
basically knows how to take a

00:17:47.800 --> 00:17:52.400
SOAP service and a SOAP operation and
convert that into a Java web service.

00:17:52.400 --> 00:17:56.760
a language method call.

00:17:58.320 --> 00:18:00.830
Figures out what it's supposed
to be calling and it calls it.

00:18:00.890 --> 00:18:03.020
This is the source
code you have to write.

00:18:03.090 --> 00:18:06.890
And what you write can call
anywhere you want to go.

00:18:06.970 --> 00:18:09.730
It can call off into EOF,
it can call off into somewhere

00:18:09.730 --> 00:18:11.200
in the WebObjects stack.

00:18:11.460 --> 00:18:18.800
It can call back out of WebObjects
if you're using your WebObjects

00:18:18.800 --> 00:18:18.800
application as a web service aggregator.

00:18:20.770 --> 00:18:24.940
But once your processing has happened,
you need to return something.

00:18:24.990 --> 00:18:27.090
Because this is WebObjects,
we figure one of the major

00:18:27.090 --> 00:18:29.700
things you're likely to want
to return is a WoE component.

00:18:29.770 --> 00:18:30.620
You can do this.

00:18:30.700 --> 00:18:34.390
The component gets returned to
the provider that did the calling,

00:18:34.590 --> 00:18:36.700
and Axis tries to build a SOAP response.

00:18:36.700 --> 00:18:38.700
It does this by going off and
looking at the type registry.

00:18:38.700 --> 00:18:44.690
The type registry basically contains
mappings of classes to serializers.

00:18:44.690 --> 00:18:49.700
If it finds a mapping for the
class of object you've returned,

00:18:49.700 --> 00:18:51.290
turns.

00:18:51.420 --> 00:18:53.700
Type registry returns the serializer.

00:18:53.700 --> 00:18:56.990
In this case,
it would be a WoE component serializer.

00:18:56.990 --> 00:19:01.260
Access then takes that serializer and
asks it to serialize the component

00:19:01.260 --> 00:19:06.300
you've returned and stuffs the
result of that serialization into

00:19:06.630 --> 00:19:12.220
the SOAP response and passes it back
to the web service request handler.

00:19:12.700 --> 00:19:15.440
Likewise,
you can return any random object.

00:19:15.580 --> 00:19:19.800
We've just special-cased for
components because they're useful.

00:19:19.920 --> 00:19:21.010
You can return any object.

00:19:21.040 --> 00:19:23.800
Again,
the object is returned to the provider

00:19:23.800 --> 00:19:26.360
that did the method invocation.

00:19:26.440 --> 00:19:30.740
The provider asks the type
registry for serializer.

00:19:30.820 --> 00:19:33.250
At this point,
any serializer is returned.

00:19:33.380 --> 00:19:37.860
We have serializers for a
number of the WebObjects classes

00:19:37.860 --> 00:19:38.800
you're likely to care about.

00:19:38.800 --> 00:19:42.260
We have serializers for NSMutableArray,
NSDictionary,

00:19:42.260 --> 00:19:45.820
a bunch of stuff in WebObjects,
or in WODGE.

00:19:45.930 --> 00:19:50.050
And we provide--this is the
important one for most of you--a

00:19:50.050 --> 00:19:53.110
serializer for EO Enterprise objects.

00:19:53.170 --> 00:19:58.760
Why do we have a serializer for each
class rather than just one glorious

00:19:58.760 --> 00:20:01.310
serializer to end all serializers?

00:20:01.310 --> 00:20:04.200
What it comes down to is,
it's a lot easier to control the

00:20:04.200 --> 00:20:07.360
information that you're passing
in and out of your application.

00:20:07.640 --> 00:20:10.370
We could build the serializer
to end all serializers,

00:20:10.380 --> 00:20:14.320
but the problem is you get everything,
including stuff you may not actually

00:20:14.470 --> 00:20:16.320
want to expose to your customers.

00:20:16.430 --> 00:20:19.530
And we figured it's relatively
easy to write a serializer.

00:20:19.530 --> 00:20:22.620
We can provide packages that'll
cover the basic classes you're

00:20:22.620 --> 00:20:24.300
probably going to be returning.

00:20:24.320 --> 00:20:28.280
And we don't want to force you or
inflict trying to figure out how

00:20:28.300 --> 00:20:32.380
to change the XML produced by the
serializer to end all serializers.

00:20:32.380 --> 00:20:35.250
So instead,
we let you register individual

00:20:35.250 --> 00:20:41.240
serializers on a class-by-class basis
and a service-by-service basis that let

00:20:41.240 --> 00:20:44.680
you do exactly what you want them to do.

00:20:44.680 --> 00:20:44.680
And again,

00:20:45.230 --> 00:20:48.700
The serialized XML is taken,
stuck into a WoW response,

00:20:48.850 --> 00:20:52.200
and sent back out into
the big wide world.

00:20:53.400 --> 00:20:57.500
Back in Axis a little bit,
before it sends the response back out,

00:20:57.560 --> 00:21:01.590
it basically checks to see if
there's a session associated with

00:21:01.590 --> 00:21:04.000
the processing it's been doing.

00:21:04.000 --> 00:21:07.030
If there is,
it stuffs a SOAP header with the

00:21:07.030 --> 00:21:09.930
WoW session ID into the SOAP response.

00:21:10.000 --> 00:21:15.440
And, well, this is the inverse of what
it did on the other end.

00:21:15.720 --> 00:21:18.240
The response to the
Web Service Request Handler.

00:21:18.240 --> 00:21:20.400
At this point,
there's a last chance if you want

00:21:20.460 --> 00:21:24.590
to do some kind of transformation on
the data that's going to be returned.

00:21:24.670 --> 00:21:28.620
We have a hookup that allows you
to register an XSLT spreadsheet,

00:21:28.890 --> 00:21:33.600
or XSLT transformation
with a given web service.

00:21:33.670 --> 00:21:38.390
And at this point,
if you have registered an XSLT transform,

00:21:38.750 --> 00:21:39.470
we'll run it.

00:21:39.990 --> 00:21:46.060
Then we stuff the results in a woe
response and return the woe response.

00:21:47.290 --> 00:21:51.000
So at this point, you might be asking,
what a web services request looks like.

00:21:51.150 --> 00:21:53.360
Well, our PC services are pretty simple.

00:21:53.360 --> 00:21:57.190
It's any method, any parameter types,
any return type.

00:21:57.300 --> 00:21:58.300
Something as simple as that.

00:21:58.300 --> 00:21:59.660
We've got a Hello World service.

00:21:59.660 --> 00:22:03.480
It's one class, say hello,
you'll notice it's not a subclass of

00:22:03.480 --> 00:22:06.040
anything in the WebObjects universe.

00:22:06.040 --> 00:22:07.140
It doesn't have to be.

00:22:07.140 --> 00:22:10.270
It can be a subclass of, well,
object in this case.

00:22:10.270 --> 00:22:13.930
It has one method, say hello,
that returns a simple string.

00:22:14.130 --> 00:22:16.620
Again, you don't have to return
any special type of object.

00:22:20.960 --> 00:22:23.010
Document-style services
are a little bit trickier.

00:22:23.190 --> 00:22:28.220
You have to do a lot more processing,
and they have very specific interfaces.

00:22:28.910 --> 00:22:32.210
Document services, again,
they can extend any class

00:22:32.330 --> 00:22:33.420
in the Java universe.

00:22:33.420 --> 00:22:38.010
But the methods that serve document
services have very specific prototypes.

00:22:38.190 --> 00:22:40.830
They have to take one or more

00:22:40.860 --> 00:22:45.630
WC3 DOM elements, and they have to return
a WC3 DOM element.

00:22:45.640 --> 00:22:49.610
These elements are simply
converted using the standard

00:22:49.610 --> 00:22:54.530
DOM mechanism into XML strings
and stuffed into the response.

00:22:54.550 --> 00:22:57.400
Access doesn't try and figure
out what you want to be doing,

00:22:57.400 --> 00:22:59.120
doesn't try and read your mind.

00:22:59.130 --> 00:23:01.680
It just says,
"We trust you know what you're doing.

00:23:01.680 --> 00:23:05.490
We're sending this out." This implies
that the request and response

00:23:05.490 --> 00:23:07.290
is better be well formatted.

00:23:08.160 --> 00:23:10.100
Now you want to deploy these services.

00:23:10.100 --> 00:23:11.620
There's a couple ways to do this.

00:23:11.720 --> 00:23:15.360
Access provides a WSDD file,
which is a web service

00:23:15.360 --> 00:23:17.480
deployment descriptor.

00:23:17.500 --> 00:23:20.350
It's fairly complicated,
as all such things should be.

00:23:20.510 --> 00:23:25.180
Or we decided that we'd make it a little
bit simpler and do dynamic deployment.

00:23:26.650 --> 00:23:29.390
In your application constructor,
you can simply call the

00:23:29.510 --> 00:23:32.760
WoWebServiceRegistrar,
register web services for class,

00:23:32.820 --> 00:23:36.840
and enter the class--passes
a parameter of the class name

00:23:36.890 --> 00:23:38.800
whose methods you want to expose.

00:23:38.840 --> 00:23:44.500
This particular method will expose all
of the methods on the SayHello class.

00:23:44.600 --> 00:23:49.140
We actually provide methods that allow
you to restrict which methods on your web

00:23:49.140 --> 00:23:52.390
service class are going to be exposed to.

00:23:54.240 --> 00:23:56.020
The Web Services World.

00:23:56.100 --> 00:23:59.950
And on the note of dynamic deployment,
we're going to pass this

00:23:59.950 --> 00:24:02.760
presentation off to Ron Luu-Saang,
who's going to tell you all

00:24:02.760 --> 00:24:04.660
about direct-to-web services.

00:24:04.660 --> 00:24:07.570
Ron, around somewhere?

00:24:09.000 --> 00:24:10.000
Thank you.

00:24:10.000 --> 00:24:14.000
Thanks, Melissa.

00:24:14.070 --> 00:24:14.650
Hello, everyone.

00:24:14.770 --> 00:24:15.710
I am Ron Luu-Saang.

00:24:15.850 --> 00:24:20.050
I am an engineer with the
Direct2Web and Direct2Java client

00:24:20.470 --> 00:24:22.840
team in WebObjects Engineering.

00:24:23.000 --> 00:24:28.770
So, on the note of Direct2Web services,
we're going to go over...

00:24:29.160 --> 00:24:31.220
Going to go over three things today.

00:24:31.320 --> 00:24:34.880
First, why we developed direct-to-web
services in the first place.

00:24:34.940 --> 00:24:38.800
And then I'll talk a little bit
about what direct-to-web services is.

00:24:38.860 --> 00:24:41.670
And then I'll go into how
direct-to-web services works and

00:24:41.670 --> 00:24:43.620
try to explain how you can use it.

00:24:44.030 --> 00:24:47.940
So first, why did we develop
direct-to-web services?

00:24:48.020 --> 00:24:51.500
Well, a bunch of WebObjects engineers
were sitting around one day,

00:24:51.660 --> 00:24:55.900
as we pretty much always do,
and somebody brought up web services.

00:24:55.900 --> 00:24:59.950
And sure, it's a lot of hype,
there's so much hype behind it,

00:25:00.280 --> 00:25:04.860
but we all agreed that web services is
going to be a really big technology,

00:25:04.860 --> 00:25:07.430
so we should be there when it is big.

00:25:09.660 --> 00:25:15.310
So some of us actually even agreed that
web services might be a cool technology,

00:25:15.310 --> 00:25:21.140
and none of us thought that building a
web services application would be easy.

00:25:21.340 --> 00:25:25.300
So we thought about it and thought, well,
if web services are cool,

00:25:25.390 --> 00:25:30.240
and everyone knows EOF is cool, right,
well, we could put the two together and

00:25:30.240 --> 00:25:32.590
develop something even cooler.

00:25:33.220 --> 00:25:38.570
And being able to do that, though,
making it a really compelling solution

00:25:39.030 --> 00:25:43.860
would mean that we'd have to make
it easy for our developers to use.

00:25:43.980 --> 00:25:47.560
And part of our idea of how to make
things easy for our developers is that

00:25:47.650 --> 00:25:50.140
our developers should write less code.

00:25:50.250 --> 00:25:53.500
And this is the same philosophy
that's gone into a lot of

00:25:53.720 --> 00:25:56.100
innovative products in WebObjects.

00:25:56.300 --> 00:26:00.550
This is the same philosophy
we applied to HTML web page,

00:26:00.660 --> 00:26:05.180
HTML-type web applications
using direct-to-web,

00:26:05.180 --> 00:26:07.540
where you can get up and running
with a web application really

00:26:07.540 --> 00:26:09.100
quickly with very little code.

00:26:09.100 --> 00:26:14.430
And the same thing with Java Client,
where we brought direct-to-Java

00:26:14.610 --> 00:26:20.080
Client to the three-tier distributed
Java Client application space.

00:26:20.100 --> 00:26:24.530
In the next version of WebObjects,
we're going to do the same

00:26:24.540 --> 00:26:25.100
thing with WebObjects.

00:26:25.100 --> 00:26:27.100
We're going to do the same
thing with WebServices,

00:26:27.420 --> 00:26:30.780
where we add direct-to-web
services on top of the general web

00:26:30.780 --> 00:26:36.400
services support in WebObjects,
making it really easy for developers

00:26:36.400 --> 00:26:42.090
to publish web services using
EOF without writing much code.

00:26:43.920 --> 00:26:47.370
And in being able to do this,
we wanted developers to make

00:26:47.370 --> 00:26:51.500
useful business-type web services.

00:26:51.500 --> 00:26:54.200
And most of the really useful
web services out there today,

00:26:54.200 --> 00:26:57.780
the 80% that we're trying to target,
80 to 90% we're trying to target,

00:26:57.790 --> 00:27:01.160
do things like searching
of random data sources,

00:27:01.160 --> 00:27:04.600
like the Google example,
or Barnes & Noble's web services.

00:27:04.600 --> 00:27:07.620
Then of course there
are also purchase order,

00:27:07.620 --> 00:27:13.020
invoice management-type web services,
and general information update and

00:27:13.110 --> 00:27:15.200
information synchronization web services.

00:27:15.200 --> 00:27:19.360
Being able to do all these things
very easily would be an important

00:27:19.480 --> 00:27:21.540
point for direct web services.

00:27:21.540 --> 00:27:25.160
And it happens that all of these
operations map really well to

00:27:25.430 --> 00:27:27.690
things that we can do in EOF.

00:27:30.400 --> 00:27:34.980
And another point to
trying to make this easy.

00:27:35.100 --> 00:27:41.150
We wanted to make the--taking a look at
the current equation for web services,

00:27:41.150 --> 00:27:45.320
it's pretty much do a lot of work and
then get a little bit of functionality

00:27:45.470 --> 00:27:46.960
out of it for your web service.

00:27:47.060 --> 00:27:50.710
With direct-to-web services,
we wanted to rearrange the equation a

00:27:50.730 --> 00:27:54.040
bit so that for a little bit of work,
the minimum amount of work

00:27:54.070 --> 00:27:57.880
required to get an app running,
you'd get a lot of functionality out of

00:27:57.880 --> 00:28:00.300
your business logic as a web service.

00:28:03.160 --> 00:28:06.760
The two use cases that we saw
as the common cases here were

00:28:07.050 --> 00:28:11.500
where you wanted to publish
existing data as a web service,

00:28:11.640 --> 00:28:16.230
or you have a new WebObjects
application or an existing WebObjects

00:28:16.230 --> 00:28:20.210
application that you want to
add web services functionality to.

00:28:22.540 --> 00:28:24.660
And it should just be four steps.

00:28:24.810 --> 00:28:28.290
Pretty much for an existing data source,
you reverse engineer it with EOModeler,

00:28:28.480 --> 00:28:34.400
our fantastic ER relationship
diagramming tool.

00:28:34.400 --> 00:28:40.340
And add that model and any business logic
you build around it to your application.

00:28:40.390 --> 00:28:46.400
Add a few frameworks that enable
the direct web services technology.

00:28:46.400 --> 00:28:48.910
And start your application
and then configure it using

00:28:48.910 --> 00:28:50.340
our Web Services Assistant.

00:28:50.420 --> 00:28:52.400
It should be that easy.

00:28:52.400 --> 00:28:56.400
And even easier is if you've already
built a WebObjects application

00:28:56.400 --> 00:29:00.600
and you just want to add some
web services functionality to it.

00:29:00.910 --> 00:29:04.880
We just leveraged the existing business
logic and model in your application.

00:29:05.030 --> 00:29:08.290
You add a few frameworks again,
start your application,

00:29:08.290 --> 00:29:09.750
and then configure it.

00:29:12.500 --> 00:29:14.800
So that's why we developed
Direct-to-Web Services.

00:29:14.830 --> 00:29:17.930
We wanted to give developers
the opportunity to build really

00:29:17.930 --> 00:29:21.330
meaningful web services very
quickly without doing too much work.

00:29:23.190 --> 00:29:27.130
So then what is direct-to-web services?

00:29:27.220 --> 00:29:28.690
In truth, it's just a set of frameworks.

00:29:28.780 --> 00:29:34.000
It's a technology based on a set
of frameworks and an assistant.

00:29:34.120 --> 00:29:37.320
The frameworks that we require
for direct-to-web services

00:29:37.540 --> 00:29:40.990
are the Java Access Framework,
which is just a wrapper around

00:29:41.020 --> 00:29:46.420
the Apache Access Jar that
Melissa told you about earlier.

00:29:46.690 --> 00:29:49.300
Then we have the
Java Web Services Generation Framework,

00:29:49.330 --> 00:29:52.670
which not only has a lot of syllables,
but is also where all of the

00:29:52.830 --> 00:29:56.130
magic for generating dynamic
web services comes from.

00:29:56.390 --> 00:30:00.160
And then the two other frameworks there,
Java Direct-to-Web and

00:30:00.160 --> 00:30:04.200
Java DTW Generation frameworks,
hold the rule system that allows

00:30:04.200 --> 00:30:08.260
the web services generation
piece to be fully dynamic.

00:30:09.120 --> 00:30:12.150
So those are the frameworks
of direct-to-web services,

00:30:12.150 --> 00:30:15.930
but we also offer an assistant,
a swing-based application that you

00:30:15.930 --> 00:30:19.480
can use to configure and manage
your direct-to-web services.

00:30:19.710 --> 00:30:22.240
And very important when you're
building these applications,

00:30:22.310 --> 00:30:24.850
you can also test right
in this assistant,

00:30:24.850 --> 00:30:27.680
making it very easy for
you to get work done.

00:30:29.900 --> 00:30:34.350
So in addition to offering the assistant,
we also offer a lot of default

00:30:34.350 --> 00:30:36.420
functionality that you can customize.

00:30:36.420 --> 00:30:40.780
This is how we get you up and running
really quickly with a web service.

00:30:40.900 --> 00:30:44.540
We offer a default web service,
which is named a Wode

00:30:44.540 --> 00:30:49.280
default web service,
and we also offer operations

00:30:49.280 --> 00:30:53.150
for each entity that you
specify as a public entity.

00:30:53.150 --> 00:30:57.110
When you say that an entity should
be allowed to be vended as a web

00:30:57.110 --> 00:31:00.250
service out to the big world,
we create an operation,

00:31:00.250 --> 00:31:03.230
four operations actually,
for each of those entities.

00:31:04.720 --> 00:31:08.210
Insert, delete, search,
and update the basic operations that

00:31:08.210 --> 00:31:10.480
you would want to do on any entity.

00:31:10.560 --> 00:31:12.600
Don't worry,
they're not all enabled by default.

00:31:12.600 --> 00:31:16.530
You won't be able to just delete
somebody else's entire database

00:31:16.530 --> 00:31:18.350
from a random web service.

00:31:19.070 --> 00:31:21.620
And because you can configure
everything very dynamically,

00:31:21.680 --> 00:31:25.700
we also offer generating WSDL for you,
so you don't have to go through and

00:31:25.730 --> 00:31:28.060
muck with the WSDL for your service.

00:31:28.150 --> 00:31:30.580
We generate that dynamically.

00:31:32.190 --> 00:31:35.780
So with that,
to show you kind of how this works,

00:31:35.840 --> 00:31:38.250
to give you a quick demo,
I'd like to ask my lovely

00:31:38.250 --> 00:31:40.780
assistant Francois up on stage.

00:31:40.810 --> 00:31:44.190
He'll give you a quick demo
of Direct Web Services.

00:31:47.640 --> 00:31:49.100
So time changes.

00:31:49.140 --> 00:31:51.260
Two years ago,
he was my lovely assistant.

00:31:51.290 --> 00:31:53.010
Still am, Francois.

00:31:53.060 --> 00:31:56.420
So he's grown wings on implemented
crazy things that I get to demo.

00:31:59.170 --> 00:32:03.090
I think most of you have already
seen the demo I did at the

00:32:03.160 --> 00:32:07.450
Developer Tools Conference presentation
earlier this week.

00:32:07.520 --> 00:32:09.040
Anyone hasn't seen it?

00:32:09.100 --> 00:32:13.040
Okay, a few people,
so it's worth going back.

00:32:13.100 --> 00:32:20.590
I'd like demo three, please.

00:32:20.600 --> 00:32:20.600
Three.

00:32:25.800 --> 00:32:26.810
No, not yet.

00:32:26.930 --> 00:32:27.210
Three?

00:32:27.460 --> 00:32:27.680
Trois?

00:32:27.680 --> 00:32:33.720
No, it's three.

00:32:33.720 --> 00:32:34.460
It's really three.

00:32:34.460 --> 00:32:35.110
Okay, it's nine.

00:32:39.010 --> 00:32:41.800
Okay, so we've got a model.

00:32:41.800 --> 00:32:44.010
It's a model everyone has seen this week.

00:32:44.100 --> 00:32:46.540
It is...

00:32:48.410 --> 00:32:53.970
Are you still thinking about
the hidden in the framework

00:32:53.990 --> 00:32:53.990
because there is a little bit of
business logic associated with it?

00:32:54.180 --> 00:32:58.930
The Web is a real estate model.

00:32:59.060 --> 00:33:02.120
Think about this as your
private information that you

00:33:02.240 --> 00:33:03.930
don't want to show anyone.

00:33:03.970 --> 00:33:05.740
It reflects the database.

00:33:05.840 --> 00:33:09.290
You've got a lot of strings in there.

00:33:09.420 --> 00:33:12.460
Names for entities, names for attributes.

00:33:12.810 --> 00:33:15.000
You want to build an
interface on top of this.

00:33:15.170 --> 00:33:20.500
Your web service will be the public
interface on top of your model.

00:33:21.720 --> 00:33:24.630
What the web service
assistant will do is,

00:33:24.780 --> 00:33:29.740
around this house with tinted windows,
is going to clear up a few windows

00:33:29.740 --> 00:33:33.740
and make a few things seeable,
and paint some windows pink also,

00:33:33.740 --> 00:33:35.600
so that it looks rosy inside there.

00:33:35.600 --> 00:33:43.230
So I will create a new
project from this model.

00:33:48.800 --> 00:33:56.100
[Transcript missing]

00:33:59.640 --> 00:34:02.500
It's the usual WebObjects
application wizard.

00:34:02.570 --> 00:34:05.280
Here's the JDBC adapter selected for us.

00:34:05.280 --> 00:34:06.080
It's fine.

00:34:06.140 --> 00:34:09.840
You can see in this list of frameworks
that you've got the AXIS framework

00:34:09.930 --> 00:34:13.720
that Melissa was talking about earlier,
or Ron, I think,

00:34:13.790 --> 00:34:16.790
and the direct web generation

00:34:16.940 --> 00:34:21.060
The reason we could come up
with this technology so fast is

00:34:21.060 --> 00:34:26.790
because even though it's in alpha,
the underneath has already seen

00:34:26.790 --> 00:34:30.920
years of exposure in the form of
direct-to-web and direct-to-Java client.

00:34:30.960 --> 00:34:37.110
And I will add my real estate framework.

00:34:37.190 --> 00:34:42.080
I know Ron has prepared me one.

00:34:42.080 --> 00:34:45.050
Where do you put it, Ron?

00:34:47.820 --> 00:34:52.220
"Favorite?" "Go to the
build favorite." "Oh,

00:34:52.220 --> 00:34:53.690
build, okay.

00:34:53.700 --> 00:34:55.370
This one?" "Yeah."

00:34:59.820 --> 00:35:04.160
Okay, so if I click next,
this product builder assistant is

00:35:04.160 --> 00:35:07.720
clever enough to find the model
that is hidden in this framework.

00:35:07.720 --> 00:35:12.060
And it will,
I can now build and launch the project.

00:35:15.360 --> 00:35:18.660
It's going to take a little while.

00:35:18.660 --> 00:35:19.860
Oh Ron, I've got something for you.

00:35:19.860 --> 00:35:22.290
I brought a whistle in
case I make any mistake.

00:35:22.300 --> 00:35:24.890
Ron Lue- Perfect.

00:35:26.800 --> 00:35:29.260
Preemptive.

00:35:29.270 --> 00:35:30.800
I don't know if I should blow
this into the microphone.

00:35:30.800 --> 00:35:35.050
Okay, in the meantime, the app is ready.

00:35:38.600 --> 00:35:40.500
So here is the assistant.

00:35:40.500 --> 00:35:44.170
And the assistant is connecting
remotely to the web services

00:35:44.340 --> 00:35:46.490
server that is now running.

00:35:49.400 --> 00:35:52.470
And as Ron said,
it comes up with a default

00:35:52.470 --> 00:35:55.690
service called WoDefaultService.

00:35:56.200 --> 00:36:00.710
This tree view on the left-hand
side is a list of your services,

00:36:00.710 --> 00:36:02.900
and each service contains an operation.

00:36:02.900 --> 00:36:07.180
I can click on "New Operation"
and now I have an operation

00:36:07.180 --> 00:36:08.670
in my default service.

00:36:08.740 --> 00:36:12.580
The more important thing to do
is to decide which entities in

00:36:12.580 --> 00:36:14.810
my model I want to make public.

00:36:16.340 --> 00:36:19.130
As usual, I'm going to make the
listing entity public.

00:36:19.200 --> 00:36:21.380
It's the most interesting
one in the model.

00:36:21.380 --> 00:36:26.440
Because it's in alpha, I've got to save,
close, and reopen.

00:36:26.440 --> 00:36:29.570
That won't happen in
the shipping product.

00:36:29.580 --> 00:36:33.230
And you see the default services
that were created for me.

00:36:33.360 --> 00:36:36.780
Search, insert, listing, update listing,
and delete listing.

00:36:38.430 --> 00:36:40.930
This is all nice,
but most likely not what

00:36:41.110 --> 00:36:43.300
you actually want to do.

00:36:43.480 --> 00:36:49.300
So I can use that as a starting point
and clone the search listing operation.

00:36:49.390 --> 00:36:58.900
Call it listings with bedrooms.

00:37:01.130 --> 00:37:07.390
So, you see that on my operation
panel I've got four tabs.

00:37:07.690 --> 00:37:11.560
One is for specifying the
arguments this operation,

00:37:11.700 --> 00:37:13.580
this function is going to take.

00:37:13.670 --> 00:37:17.820
One for specifying the
values that will be returned.

00:37:17.850 --> 00:37:22.210
One for specifying formatters
associated with the arguments.

00:37:22.450 --> 00:37:28.600
and one for specifying in which services
this operation should be executed.

00:37:28.600 --> 00:37:33.410
You may want to have an admin service
that contains all operations available,

00:37:33.410 --> 00:37:36.700
and then a user service that has
a subset of these operations.

00:37:36.760 --> 00:37:41.020
And you can change an operation
globally across services.

00:37:42.220 --> 00:37:46.600
Okay, so I'm going to edit my listing
with bedrooms and do a search

00:37:46.670 --> 00:37:49.370
as the title says on bedrooms.

00:37:53.700 --> 00:37:58.680
I will switch the operator
to show you that it works.

00:37:58.680 --> 00:38:00.300
And return everything.

00:38:00.300 --> 00:38:01.480
That will be a good starting point.

00:38:03.690 --> 00:38:11.850
We've got a test interface up here,
which is taking a while to come up.

00:38:11.850 --> 00:38:11.850
Here it is.

00:38:12.880 --> 00:38:18.040
It has a tab to show you
a real-world WSDL file.

00:38:18.660 --> 00:38:21.580
You see that you do not want
to have to write this by hand.

00:38:21.620 --> 00:38:22.640
It's crazy.

00:38:22.640 --> 00:38:23.630
I don't understand it.

00:38:23.630 --> 00:38:26.160
A few people in your team do.

00:38:26.390 --> 00:38:28.920
Had to learn it, I'd say, reluctantly.

00:38:30.350 --> 00:38:32.740
I know we figured out to build
it automatically for you,

00:38:32.740 --> 00:38:34.830
so hopefully you will
not have to edit them.

00:38:34.890 --> 00:38:38.610
If I do a search on two bedrooms,

00:38:39.730 --> 00:38:50.090
I get back a set of enterprise objects,
actually an array of them, three, four,

00:38:50.090 --> 00:38:50.090
five, six, seven,

00:38:51.030 --> 00:38:53.640
So this is not a fancy demo.

00:38:53.640 --> 00:38:54.800
You're not going to see a client.

00:38:54.800 --> 00:38:57.830
There are other sessions
that will show you clients.

00:38:57.890 --> 00:39:02.350
I just want to show you the functionality
on how you can build services.

00:39:03.260 --> 00:39:07.320
You can actually do pretty fancy
things already with this alpha version.

00:39:07.320 --> 00:39:10.660
For example,
let's say I want to search to calculate

00:39:10.840 --> 00:39:17.960
some... I'm an agent and I want to see
how much commission I can get if I sell

00:39:17.960 --> 00:39:20.600
all the houses I'm listing right now.

00:39:23.410 --> 00:39:28.260
So I'm going to call
it total... total what?

00:39:28.260 --> 00:39:31.220
Total... Total earnings.

00:39:31.240 --> 00:39:33.600
Total sales, because

00:39:35.670 --> 00:39:38.820
Okay, it's still based on the listing.

00:39:38.820 --> 00:39:43.000
And I actually cloned
the listing for bedrooms,

00:39:43.140 --> 00:39:44.900
so I don't need the bedrooms.

00:39:45.130 --> 00:39:48.010
Here I'm going to use a plus operator.

00:39:48.180 --> 00:39:52.700
Ultimately, when all is done and said,
and written, all the code is written,

00:39:52.700 --> 00:39:56.550
we will have a preview here where
you can drill down relationships

00:39:56.840 --> 00:40:02.180
and access the attributes below.

00:40:02.310 --> 00:40:05.060
For the moment,
you have to enter the keypath.

00:40:05.130 --> 00:40:08.710
If you remember James Dempsey's song,
these are the keypaths

00:40:08.710 --> 00:40:10.170
he was talking about.

00:40:10.710 --> 00:40:15.480
I can type here agent.lastname.

00:40:15.570 --> 00:40:16.980
That's a key path.

00:40:17.030 --> 00:40:19.600
I will search on the
last name of the agent.

00:40:19.600 --> 00:40:25.070
And for return value,
I don't want any of these.

00:40:25.410 --> 00:40:31.780
I actually want another key path.

00:40:35.360 --> 00:40:37.290
So it's going to return me listings.

00:40:37.310 --> 00:40:39.740
I know each listing has an asking price.

00:40:39.780 --> 00:40:44.100
We've got this operator functionality
on EOF where you can ask a few

00:40:44.100 --> 00:40:47.200
operations and it's actually extensible.

00:40:47.200 --> 00:40:49.900
You can add more operations
in your business logic.

00:40:49.990 --> 00:40:53.890
For example, @sum is an operation,
@average is another one.

00:40:53.940 --> 00:40:58.980
So here I'm going to sum the
asking price of the listing return.

00:40:58.990 --> 00:41:01.470
And I'm going to change its name.

00:41:02.630 --> 00:41:06.200
As usual, it's a good idea to rename your
public names so that you don't expose

00:41:06.200 --> 00:41:08.580
the names you don't want to expose.

00:41:08.690 --> 00:41:10.590
Your ugly gook.

00:41:13.510 --> 00:41:15.550
Test.

00:41:15.590 --> 00:41:20.820
So it's creating the WSDL and creating
a small client interface here.

00:41:20.870 --> 00:41:23.530
I will search for,
I think Tony is in there,

00:41:23.540 --> 00:41:25.970
so T-Star will get me

00:41:26.510 --> 00:41:33.630
Tony Listings.

00:41:33.630 --> 00:41:33.630
And here it is, the sum of the...

00:41:33.750 --> 00:41:38.370
The total of what Tony could make
in sales would be almost $3 million.

00:41:38.470 --> 00:41:40.540
I think he should

00:41:43.180 --> 00:41:45.820
Okay,
so that will be it for this first demo,

00:41:45.820 --> 00:41:49.430
and I'll let Ron get the stage again.

00:41:55.420 --> 00:41:56.300
Thanks Francois.

00:41:56.330 --> 00:41:57.310
I didn't even get to use the whistle.

00:41:57.390 --> 00:41:59.260
Curses.

00:41:59.270 --> 00:42:00.650
Okay.

00:42:01.800 --> 00:42:04.460
So, you can see that this whole
thing of rules-based programming,

00:42:04.460 --> 00:42:06.420
you can see why it's such a good idea.

00:42:06.430 --> 00:42:09.510
We can get going with a real
working application very quickly

00:42:10.130 --> 00:42:11.640
without writing any nasty code.

00:42:11.640 --> 00:42:16.520
It really jump starts your development,
your application development cycle.

00:42:16.540 --> 00:42:19.540
And the coolest thing, of course,
similar with direct-to-web

00:42:19.630 --> 00:42:22.920
and direct-to-Java client,
your services here are synced

00:42:22.930 --> 00:42:25.540
with your business logic.

00:42:27.360 --> 00:42:30.150
So then that's what
direct-to-web services is.

00:42:30.150 --> 00:42:31.770
But how does it work?

00:42:31.930 --> 00:42:33.050
How does it do all of its magic?

00:42:33.050 --> 00:42:36.140
The magic is in the rule system.

00:42:36.140 --> 00:42:38.770
It's the same thing that you've
heard of from direct-to-web

00:42:38.770 --> 00:42:40.080
and direct-to-Java client.

00:42:40.080 --> 00:42:45.980
It's really just an inference engine
with a question-answer mechanism to it.

00:42:46.200 --> 00:42:51.660
All of the inferences are done based
on rules that are held in rule files.

00:42:55.520 --> 00:42:59.010
In general,
you would ask the rule system a question,

00:42:59.010 --> 00:43:00.460
like, is the audience sleepy?

00:43:00.460 --> 00:43:04.740
Once you ask it that question,
it looks through its rules and sees, oh,

00:43:04.760 --> 00:43:07.080
I can figure out the answer
based on the time of day,

00:43:07.080 --> 00:43:09.780
so that if the time of
day is in the afternoon,

00:43:09.780 --> 00:43:12.520
then yes, the audience is indeed sleepy.

00:43:14.260 --> 00:43:16.940
And it's this kind of question-answer
thing that happens all the time.

00:43:16.970 --> 00:43:19.140
You ask it questions,
it gives you answers.

00:43:19.200 --> 00:43:23.900
And the cool thing is that the rule
system can actually ask itself questions.

00:43:24.060 --> 00:43:27.380
So that in order to figure
out what time of day it is,

00:43:27.680 --> 00:43:32.500
It can go ask itself, "Hmm,
time of day." And one of the ways

00:43:32.550 --> 00:43:37.240
to get answers back from the rule
system is through assignment classes.

00:43:37.320 --> 00:43:40.290
It's a special class,
it's a direct-to-web class

00:43:40.380 --> 00:43:41.660
called an assignment.

00:43:41.750 --> 00:43:45.660
And you can actually put your own code
there to put some funny logic for how to

00:43:45.660 --> 00:43:48.000
answer questions like the time of day.

00:43:48.080 --> 00:43:51.140
Like this,
which I'm not sure actually works.

00:43:51.210 --> 00:43:53.580
But you get the idea.

00:43:59.190 --> 00:44:03.820
So all the heuristics for direct
web services live in these rules,

00:44:03.890 --> 00:44:06.890
in a set of predefined rules
that come in the frameworks,

00:44:06.890 --> 00:44:10.020
and also in some rules files that
are generated for you in your

00:44:10.100 --> 00:44:14.130
application by the web services
assistant that Francois showed you.

00:44:14.860 --> 00:44:17.740
And so all this happens,
all this magic happens,

00:44:17.740 --> 00:44:21.940
and you have code-free services,
services where you've got actual

00:44:22.060 --> 00:44:26.360
usable web services without
having to write any code.

00:44:26.410 --> 00:44:29.500
Messages are just passed through
Axis and given to the rule system,

00:44:29.500 --> 00:44:32.580
and everything is handled there for you.

00:44:35.620 --> 00:44:41.540
And as far as how everything
works with a web service request,

00:44:41.570 --> 00:44:46.340
this is similar to the diagram
that Melissa showed you earlier,

00:44:46.430 --> 00:44:50.340
where a request comes in
and the Web Service Request

00:44:50.440 --> 00:44:53.600
Handler hands it off to Access.

00:44:53.660 --> 00:44:56.220
Access looks through its
registry and figures out,

00:44:56.280 --> 00:44:58.920
"Oh, this is actually a
direct-to-web service call.

00:44:59.100 --> 00:45:03.280
I'll hand it off to our framework
that does all the magic for

00:45:03.280 --> 00:45:04.590
direct-to-web services."

00:45:04.990 --> 00:45:08.200
And here we pull in a lot of
information from your EO model,

00:45:08.330 --> 00:45:11.260
your business logic, and the rules files
that I told you about.

00:45:12.930 --> 00:45:17.360
And we figure out what to do,
whether to do an insert, a search,

00:45:17.450 --> 00:45:21.530
a delete, update,
and on what attributes to do searches

00:45:21.530 --> 00:45:24.240
and perform all of these operations on.

00:45:24.360 --> 00:45:26.690
And we return an array of results.

00:45:26.850 --> 00:45:30.910
For instance, in a search,
returning an array of listings.

00:45:31.920 --> 00:45:36.180
Once we give that back to Axis,
Axis then tries to serialize it

00:45:36.230 --> 00:45:39.280
and runs into a few of the EOs,
for example.

00:45:39.490 --> 00:45:43.920
So the EO Enterprise objects get passed
to an EO Enterprise object serializer,

00:45:43.920 --> 00:45:46.820
which knows how to
serialize out objects fine,

00:45:46.820 --> 00:45:53.620
but gets hints about how to serialize the
object by asking a serialization strategy

00:45:53.620 --> 00:45:58.340
for what attributes to serialize.

00:45:59.250 --> 00:46:01.560
And similar to
Java Web Services Generation,

00:46:01.620 --> 00:46:05.150
it knows what to do based
on your rules file and your

00:46:05.160 --> 00:46:07.430
EO model and business logic.

00:46:07.550 --> 00:46:13.480
So the serialization strategy
can tell the object serializer,

00:46:13.610 --> 00:46:17.470
the EO object serializer,
to only serialize out the price

00:46:17.730 --> 00:46:21.250
and the agent name for a listing.

00:46:21.370 --> 00:46:25.310
This way you only expose the
attributes of your EO that you want to.

00:46:26.140 --> 00:46:28.540
And then the serializer
returns the serialized result,

00:46:28.540 --> 00:46:32.170
the serialized object, back to Axis,
which hands it back to the

00:46:32.280 --> 00:46:36.870
WoW web service request handler
and returns it to the client.

00:46:38.630 --> 00:46:41.600
And as far as customizing
this whole process,

00:46:41.640 --> 00:46:46.320
you saw that using rule models,
rule files, and your EO model is the

00:46:46.330 --> 00:46:49.600
simplest way to customize this,
the whole process.

00:46:49.620 --> 00:46:52.470
And this is similar to what we've
done before in Direct-to-Web

00:46:52.510 --> 00:46:54.820
and Direct-to-Java Client,
where you start off with the

00:46:54.820 --> 00:46:58.560
assistant to get all of the easy
customizations done really quickly.

00:46:58.670 --> 00:47:01.100
And then if you want to do
some tricky customization,

00:47:01.140 --> 00:47:05.510
you can go into the rules files
themselves using Rule Editor and make

00:47:05.520 --> 00:47:07.970
custom rules or custom assignments.

00:47:08.950 --> 00:47:11.990
And then if you run into a problem
where you still want to use

00:47:12.060 --> 00:47:16.120
direct-to-web services and WebObjects,
and you know there's just one

00:47:16.120 --> 00:47:20.990
little thing that you need to add,
and the rule system can't take you there,

00:47:21.100 --> 00:47:22.730
you can freeze code.

00:47:22.870 --> 00:47:26.910
With code generation,
you have to make sure that

00:47:26.980 --> 00:47:32.570
it's what you want to do,
because it's kind of a pain to go

00:47:32.570 --> 00:47:32.570
back once you've frozen the code.

00:47:34.880 --> 00:47:40.630
Now, freezing operations starts off
with the idea that operations are

00:47:40.630 --> 00:47:42.470
frozen across entire services.

00:47:42.600 --> 00:47:48.820
They live in one application server
instance and are shared across services.

00:47:49.120 --> 00:47:53.290
So once you've frozen an operation,
it's frozen for all services.

00:47:55.810 --> 00:47:58.100
The WSDL for the operation
is frozen as well.

00:47:58.100 --> 00:48:01.910
So you can get whatever chunks
of the WSDL for that operation

00:48:02.210 --> 00:48:04.290
you need and plug it into,
for instance,

00:48:04.360 --> 00:48:08.140
the dynamic WSDL that's used with
direct-to-web services or in a

00:48:08.140 --> 00:48:14.640
separate service entirely that doesn't
require direct-to-web services.

00:48:15.520 --> 00:48:18.990
The cool thing is,
once you've frozen the operation,

00:48:18.990 --> 00:48:24.000
you can still manage the operation
using Direct Web Services Assistant.

00:48:24.000 --> 00:48:26.190
You can't change any of the
argument types and result

00:48:26.300 --> 00:48:27.640
types or anything like that.

00:48:27.700 --> 00:48:29.630
Those are frozen in the code
that we generate for you.

00:48:29.750 --> 00:48:35.460
But you can still at least test and
manage the operation with the Assistant.

00:48:36.380 --> 00:48:39.300
And the coolest part is probably
that you can actually rip out the

00:48:39.390 --> 00:48:42.760
code that we generate for you and
have it do useful work in another

00:48:42.760 --> 00:48:46.980
WebObjects application that doesn't
require direct web services at all.

00:48:48.220 --> 00:48:50.860
And to show you a little
bit of this magic,

00:48:50.880 --> 00:48:55.040
I'll ask dear Francois back up on stage.

00:49:00.320 --> 00:49:02.150
Okay, I'm back.

00:49:02.150 --> 00:49:06.600
One thing I forgot to show you
earlier is this nice little tool that

00:49:06.610 --> 00:49:10.570
comes... I think it comes with Axis,
right, Carl?

00:49:12.830 --> 00:49:17.070
It enables you to monitor what's
happening on certain ports and

00:49:17.100 --> 00:49:22.700
to prove you that we are really
carrying SOAP data around.

00:49:22.850 --> 00:49:25.940
Here is a request a client did.

00:49:27.330 --> 00:49:34.250
And you can see the SOAP envelope
body saying agent.lastname,

00:49:34.250 --> 00:49:38.980
and the name of the function
call being total sales.

00:49:39.040 --> 00:49:42.970
And here is a response that we returned.

00:49:45.990 --> 00:49:48.740
Here, total sales response.

00:49:48.740 --> 00:49:52.260
And it's fairly big
because we are still... Oh,

00:49:52.260 --> 00:49:53.890
here is a summer.

00:49:55.500 --> 00:50:04.500
[Transcript missing]

00:50:05.440 --> 00:50:09.420
So I am going to attempt
to freeze a service.

00:50:09.440 --> 00:50:10.200
Yes?

00:50:10.620 --> 00:50:13.490
Should I do it with a complicated one?

00:50:14.270 --> 00:50:16.550
Okay, let's freeze it.

00:50:16.620 --> 00:50:18.340
I'll call it Total Sales.

00:50:18.450 --> 00:50:22.310
Ooh, I want to open the right buckets
in Project Builder to show

00:50:22.310 --> 00:50:24.560
you the magic happening there.

00:50:24.650 --> 00:50:34.300
At the same time, I click Freeze.

00:50:34.300 --> 00:50:43.200
The Java file was created for me.

00:50:43.200 --> 00:50:49.330
And I will make it bigger.

00:50:59.600 --> 00:51:04.800
You have to do it in the preferences.

00:51:04.800 --> 00:51:07.620
Oh, in the preferences?

00:51:07.620 --> 00:51:07.620
Sorry.

00:51:11.050 --> 00:51:11.990
I'm not blind yet.

00:51:12.040 --> 00:51:17.190
I usually don't do that on my...

00:51:22.400 --> 00:51:32.000
[Transcript missing]

00:51:32.340 --> 00:51:36.920
You see that it has a lot
of static arrays passing the

00:51:36.920 --> 00:51:40.260
arguments that are now frozen,
agent.lastname,

00:51:40.260 --> 00:51:45.350
passing the types of these arguments,
the operator that we are applying to it.

00:51:46.320 --> 00:51:50.770
Here you see the entity we
are doing the operation on,

00:51:50.770 --> 00:51:55.770
and building a simple fetch spec,
invoking a search on the editing

00:51:55.770 --> 00:51:57.600
context and returning the result.

00:51:57.620 --> 00:51:58.490
We also

00:52:00.290 --> 00:52:04.780
We supply a few convenience
methods in a utility class that

00:52:04.780 --> 00:52:06.630
is generated at the same time.

00:52:06.630 --> 00:52:08.190
This class is common for all operations.

00:52:08.190 --> 00:52:10.560
Once it's there, it's not created again.

00:52:12.170 --> 00:52:17.650
And we build the portion of
the WSDL that corresponds to

00:52:17.650 --> 00:52:20.900
the operation that was frozen.

00:52:20.930 --> 00:52:25.230
You can now take this piece of WSDL,
add it to your handmade

00:52:25.230 --> 00:52:27.130
WSDL if you want to.

00:52:30.300 --> 00:52:36.500
[Transcript missing]

00:52:37.770 --> 00:52:42.920
Let's say you want to do
transaction-based services and

00:52:43.070 --> 00:52:48.540
you're going to want to do several
operations in a row before actually

00:52:48.690 --> 00:52:52.430
committing to the database.

00:52:52.430 --> 00:52:56.380
Your assistance lets you create

00:52:57.550 --> 00:53:04.800
I believe a set of begin transaction--
maybe you can come help me-- a begin

00:53:04.920 --> 00:53:11.540
transaction call and end transaction
call that lets you open a session.

00:53:11.610 --> 00:53:15.380
Once it creates a session,
it will embed the session ID in

00:53:15.380 --> 00:53:18.000
the response of your first service.

00:53:18.090 --> 00:53:23.500
On the client side,
you'll be responsible to embed the

00:53:23.500 --> 00:53:24.180
session ID back in your next request.

00:53:24.680 --> 00:53:28.290
And as this goes on,
when you reach the end-- when you

00:53:28.460 --> 00:53:33.650
do the last end transaction call,
the session-- the editing context in the

00:53:33.650 --> 00:53:38.250
session will be retrieved and everything
will be saved in the databases.

00:53:38.330 --> 00:53:41.620
The editing context and the
database will be synchronized.

00:53:44.920 --> 00:53:46.480
That's done in the SOAP headers.

00:53:46.530 --> 00:53:47.500
In the SOAP headers.

00:53:47.620 --> 00:53:49.700
Should we just save that to Q&A,
actually?

00:53:49.700 --> 00:53:54.370
Yes, because people will be able
to hear your question better.

00:53:56.430 --> 00:54:00.540
Okay, so save all.

00:54:00.540 --> 00:54:05.020
Oops, one thing I wanted to do
is to add possibly a log.

00:54:28.680 --> 00:54:31.330
So I'm rebuilding and I added
a log to make sure that it's

00:54:31.510 --> 00:54:35.280
actually my frozen component that
is invoked and not the dynamic one.

00:54:35.300 --> 00:54:39.600
My frozen service that is
invoked and not the dynamic one.

00:54:42.900 --> 00:54:47.470
If I now look at total sales,
it is disabled, but I can still test it.

00:54:57.790 --> 00:55:04.700
Okay, now I will look for Andres.

00:55:04.760 --> 00:55:09.820
And you see here that the
actual frozen service was

00:55:09.820 --> 00:55:12.820
invoked and not the dynamic one.

00:55:12.830 --> 00:55:19.580
And some results were returned.

00:55:29.180 --> 00:55:30.100
Question, is it Melissa?

00:55:30.100 --> 00:55:32.510
You want to conclude on the clients?

00:55:32.520 --> 00:55:36.200
I've got a few more things to say.

00:55:36.200 --> 00:55:36.200
We're almost done.

00:55:38.350 --> 00:55:42.060
In addition to all this neat and nifty
stuff we've got on the server side,

00:55:42.110 --> 00:55:44.030
we also provide a little
bit of client-side stuff.

00:55:44.130 --> 00:55:45.580
Mostly we use Access.

00:55:45.690 --> 00:55:47.660
They have a fairly good dynamic client.

00:55:47.780 --> 00:55:50.710
We provide a bit of a wrapper to make
it a little bit cleaner and to make

00:55:50.710 --> 00:55:53.600
it a little bit more intuitive to
do introspections so that you don't

00:55:53.660 --> 00:55:57.200
have to dig through the WSDL the way
somebody using an Access client would.

00:55:57.200 --> 00:55:59.790
We provide serializers,
as I mentioned earlier,

00:55:59.790 --> 00:56:02.900
and deserializers for the
most used WebObjects classes.

00:56:02.900 --> 00:56:09.250
The client that we provide has built-in
session handling so that if you're

00:56:09.250 --> 00:56:14.250
using it with a WebObjects server,
it manages your sessions for

00:56:14.250 --> 00:56:16.530
you as long as you're using the
same instance of the client.

00:56:16.540 --> 00:56:22.760
And it uses HTTPS on the client
side if you want to use a secure

00:56:22.760 --> 00:56:27.450
connection to a WebObjects application.

00:56:27.710 --> 00:56:30.100
Which brings us to web
services and security.

00:56:30.140 --> 00:56:34.520
Currently, the state of the art for web
service security is to use HTTPS.

00:56:34.520 --> 00:56:37.280
This is a really undefined area.

00:56:37.350 --> 00:56:40.690
Some of you may notice,
know that last month Microsoft and

00:56:40.690 --> 00:56:44.500
IBM got together and came up with
the WS Security specification.

00:56:44.600 --> 00:56:47.500
We'll probably try and do
something along that front,

00:56:47.500 --> 00:56:49.590
provide some kind of support for it.

00:56:49.600 --> 00:56:53.880
Don't quote me on that because, like,
well, this is forward-looking and we may

00:56:53.880 --> 00:56:57.600
run into problems when they change
the spec in another month and a half.

00:56:57.600 --> 00:57:00.630
We'll also track some of the emerging
standards that are going to be built

00:57:00.720 --> 00:57:05.550
on top of WS Security and see if we can
do something along those lines for you.

00:57:05.600 --> 00:57:09.480
But right now, like I said,
state of the art is HTTPS.

00:57:09.940 --> 00:57:13.560
There's no authentication, really.

00:57:13.660 --> 00:57:16.550
It's just nobody can snoop.

00:57:18.740 --> 00:57:21.060
So in summary,
you can create web services and

00:57:21.130 --> 00:57:24.900
WebObjects by leveraging your
existing WebObjects applications.

00:57:24.900 --> 00:57:27.940
You can consume web services
using our client-side frameworks.

00:57:27.990 --> 00:57:30.060
And direct web services rocks.

00:57:33.520 --> 00:57:35.770
There's some resources that
you'll probably get these

00:57:35.880 --> 00:57:37.880
slides off the web next week.

00:57:38.000 --> 00:57:39.850
Here's some resources that you
might find useful if you're

00:57:39.850 --> 00:57:40.820
interested in web services.

00:57:40.820 --> 00:57:47.870
There's Apache.org, WC3.org,
where you can find WSDL and SOAP specs,

00:57:47.900 --> 00:57:50.360
UDDI.org,
where you can find more than you've

00:57:50.360 --> 00:57:53.500
ever wanted to know about UDDI,
Webservices.org,

00:57:53.500 --> 00:57:57.220
which is a Microsoft-sponsored
website that contains a lot of

00:57:57.310 --> 00:58:00.700
information about what is new and
interesting in the web services world,

00:58:01.270 --> 00:58:03.430
and xmethods.org,
which is a place you can go to

00:58:03.550 --> 00:58:07.430
find information about a lot of
the web services that are currently

00:58:08.160 --> 00:58:11.280
sort of being served on the web.

00:58:13.290 --> 00:58:15.040
You've all heard about
our lab at this point,

00:58:15.080 --> 00:58:15.760
I'm assuming.

00:58:15.760 --> 00:58:17.360
We have one downstairs.

00:58:17.480 --> 00:58:19.400
Here's the hours.

00:58:20.870 --> 00:58:21.290
Roadmap.

00:58:21.420 --> 00:58:24.450
Some of the other sessions you
might be interested in if you're

00:58:24.450 --> 00:58:28.090
interested in web services,
there... I guess one was yesterday,

00:58:28.090 --> 00:58:31.360
so you'll have to get the DVD for
Client Web Services Frameworks.

00:58:31.440 --> 00:58:34.810
There was a Java Web Services one this
morning that's not in the roadmap.

00:58:34.810 --> 00:58:36.950
If you're interested in
doing server-side stuff,

00:58:36.980 --> 00:58:39.040
you're probably
interested in performance,

00:58:39.040 --> 00:58:44.920
so there's Session 407 Java Performance,
which is running in Hall C on Friday.

00:58:44.940 --> 00:58:49.240
And for those of you who are
interested in rules-based programming,

00:58:49.330 --> 00:58:53.140
here next is going to be a
direct-to-Java client presentation,

00:58:53.140 --> 00:58:56.240
and of course there's the
feedback forum on Friday.

00:58:58.940 --> 00:59:04.160
The Who to Contact, Tony, Bob,
our consulting arm,

00:59:04.520 --> 00:59:10.480
which is named Dilbert for reasons
I really don't want to speculate on.

00:59:13.510 --> 00:59:17.930
and places to get more information.

00:59:18.030 --> 00:59:20.400
The developer documentation is online.

00:59:20.400 --> 00:59:24.170
You can access our professional
tech support online.

00:59:24.360 --> 00:59:26.240
There's a list of other places.

00:59:26.400 --> 00:59:29.710
You can subscribe to WebObjects announce.

00:59:30.590 --> 00:59:35.740
We have some documentation forthcoming,
a book on developing web services

00:59:35.740 --> 00:59:39.870
and data serialization using XML that
should help those of you who need

00:59:39.870 --> 00:59:41.690
to build stuff in this space.

00:59:42.570 --> 00:59:45.260
There's a lot of these buffer slides
on the end of this presentation.

00:59:45.260 --> 00:59:47.340
How to get the documentation?

00:59:47.590 --> 00:59:51.260
It's in PDF and HTML forms on the web.

00:59:51.260 --> 00:59:53.450
You can get print-on-demand.

00:59:53.450 --> 00:59:55.820
Some of it comes with a product CD.

00:59:56.120 --> 00:59:57.120
Some of it's in the box.

00:59:57.120 --> 01:00:00.050
And you can check the
ADC News for the latest updates.

01:00:00.130 --> 01:00:03.470
And now we'll do Q&A.