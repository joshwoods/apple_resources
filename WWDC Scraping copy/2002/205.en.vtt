WEBVTT

00:00:02.560 --> 00:00:08.500
Ladies and gentlemen,
please welcome Lead Engineer, HI Toolbox,

00:00:08.650 --> 00:00:09.660
Ed Voas.

00:00:19.000 --> 00:00:20.360
Let's be.

00:00:20.420 --> 00:00:22.900
All right,
we're going to talk about HIView.

00:00:23.020 --> 00:00:24.980
Very exciting.

00:00:25.010 --> 00:00:30.890
This is the beginning of something
incredible for HIToolbox.

00:00:32.430 --> 00:00:34.810
First, we're going to talk a little
bit about the history of the

00:00:34.930 --> 00:00:39.130
Control Manager and where we come from,
and basically just exactly

00:00:39.130 --> 00:00:40.710
how far we've come.

00:00:40.810 --> 00:00:45.450
We're going to talk about HIView,
what it is, what it does, how to use it.

00:00:48.840 --> 00:00:49.700
Control Manager.

00:00:49.820 --> 00:00:51.690
Who here likes the Control Manager?

00:00:51.770 --> 00:00:52.700
That's what I thought.

00:00:52.700 --> 00:00:53.700
Okay.

00:00:53.830 --> 00:00:58.980
Uh, but it was introduced in 1984,
so give them some credit.

00:00:59.400 --> 00:01:00.800
quite a while ago.

00:01:00.800 --> 00:01:04.800
There were some improvements
made in System 7,

00:01:04.800 --> 00:01:08.810
but by and large, it was the same old
Control Manager up until MacÂ OS 8,

00:01:08.930 --> 00:01:10.920
and that's when things started to change.

00:01:11.020 --> 00:01:12.740
That's where we added things
like control embedding,

00:01:12.910 --> 00:01:15.990
a lot of new controls,
and we started to introduce new

00:01:15.990 --> 00:01:20.340
APIs for doing things like just
activating or deactivating controls.

00:01:20.340 --> 00:01:24.700
But the Control Manager isn't perfect.

00:01:26.130 --> 00:01:29.420
We have a 16-bit coordinate
space that it lives in.

00:01:29.480 --> 00:01:32.220
That's not very good if you want to do,
like, highly scrollable views,

00:01:32.230 --> 00:01:34.860
which have a huge canvas.

00:01:35.680 --> 00:01:36.670
We erased behind.

00:01:36.850 --> 00:01:38.950
So, we've done this since 1984.

00:01:39.070 --> 00:01:40.590
This isn't new.

00:01:40.610 --> 00:01:44.200
It's just the way it's always worked,
and we had to maintain that behavior.

00:01:44.310 --> 00:01:46.240
So every time we would
go to draw a control,

00:01:46.240 --> 00:01:48.230
we'd actually erase behind ourselves.

00:01:48.330 --> 00:01:51.980
And this created all sorts of
pattern alignment fun in Aqua.

00:01:52.730 --> 00:01:57.530
So, and at times, there'd be a failure
to clip to our parent.

00:01:57.530 --> 00:02:03.480
And I think this kind of depended
on what node you started at and

00:02:03.480 --> 00:02:04.700
all of these other fun things.

00:02:04.810 --> 00:02:07.570
So, there were problems with that.

00:02:10.270 --> 00:02:15.200
And, though you can embed controls,
you couldn't actually detach a control

00:02:15.200 --> 00:02:19.800
from the view hierarchy and hold onto it,
or just embed it in another window.

00:02:19.900 --> 00:02:22.100
These are all problems.

00:02:22.750 --> 00:02:24.990
And you couldn't do overlapping view,
and largely this is because

00:02:25.060 --> 00:02:26.200
of the race behind behavior.

00:02:26.200 --> 00:02:29.220
We would just trash
whatever was under us.

00:02:29.890 --> 00:02:33.120
We fixed all of this in HIView.

00:02:33.210 --> 00:02:33.700
You're going to love it.

00:02:33.790 --> 00:02:36.840
This stuff is great.

00:02:37.200 --> 00:02:38.100
What is it?

00:02:38.100 --> 00:02:42.840
It's a new API destined to replace
the existing Control Manager.

00:02:42.920 --> 00:02:47.740
The Control Manager is just a
compatibility API which lives in

00:02:47.740 --> 00:02:51.050
the same basic space as HIView.

00:02:51.150 --> 00:02:52.930
This is a real view system.

00:02:53.020 --> 00:02:55.080
I am not kidding.

00:02:55.220 --> 00:02:59.300
This is going to rock your world.

00:02:59.800 --> 00:03:01.840
And by and large,
this change won't affect you.

00:03:01.970 --> 00:03:03.990
If you're still using the
existing Control Manager APIs,

00:03:04.000 --> 00:03:06.060
they will behave as badly
as they always have.

00:03:06.170 --> 00:03:07.360
Enjoy them.

00:03:07.440 --> 00:03:09.790
But if you want to take
advantage of the new stuff,

00:03:09.860 --> 00:03:11.990
you can do that too.

00:03:12.110 --> 00:03:14.600
So what are the advantages for you,
the developer?

00:03:15.200 --> 00:03:18.530
First, consistency, simplicity.

00:03:18.580 --> 00:03:20.080
Reduce and simplify.

00:03:20.150 --> 00:03:24.160
We want to be able to have one
consistent model which works everywhere.

00:03:24.260 --> 00:03:28.200
And once you learn basic HIView concepts,
I think you're going to agree

00:03:28.200 --> 00:03:31.500
that this is a big step forward.

00:03:31.540 --> 00:03:34.140
It has very efficient drawing.

00:03:34.180 --> 00:03:36.930
Essentially, it's a one pass model,
and we'll talk about

00:03:36.930 --> 00:03:38.110
that in a little bit.

00:03:38.110 --> 00:03:38.110
But,

00:03:38.410 --> 00:03:42.140
Overall, drawing is a lot faster.

00:03:42.320 --> 00:03:46.140
And we actually have a
unification of our implementation.

00:03:46.180 --> 00:03:49.140
And what this means is that
essentially everything is in HIView.

00:03:49.140 --> 00:03:51.640
And we'll show you exactly
what we mean by that.

00:03:51.640 --> 00:03:54.140
And it's way easier to
write custom views now.

00:03:54.260 --> 00:03:56.210
Way easier.

00:03:56.530 --> 00:03:59.460
Now, in Jaguar, we're not there yet.

00:03:59.630 --> 00:04:02.000
And even by the time we ship,
we won't be completely,

00:04:02.160 --> 00:04:03.590
fully migrated to HIView.

00:04:03.730 --> 00:04:04.640
What does this mean?

00:04:04.760 --> 00:04:08.540
This means that we won't have an analog
to the old Control Manager API for

00:04:08.600 --> 00:04:11.830
every call that the Control Manager had
in the HIView.h header,

00:04:11.830 --> 00:04:13.440
which is a new replacement header.

00:04:13.540 --> 00:04:14.440
Not yet.

00:04:14.600 --> 00:04:16.720
And that'll come over time.

00:04:16.810 --> 00:04:18.940
If you don't see something that
you're looking for in HIView.h,

00:04:18.940 --> 00:04:21.450
just go back to controls.h and use that.

00:04:21.460 --> 00:04:23.530
It's the same stuff.

00:04:25.620 --> 00:04:29.170
And that's because controls and views
are largely the exact same thing.

00:04:29.200 --> 00:04:30.700
The difference is how they act.

00:04:30.700 --> 00:04:33.730
You know, one goes wild and tries to blow
away everything underneath it,

00:04:33.890 --> 00:04:38.810
and one just draws nicely and
behaves the way it should.

00:04:39.300 --> 00:04:41.590
So it's important to realize that
they're actually the same thing.

00:04:41.610 --> 00:04:43.400
A Control Ref is an HIView Ref.

00:04:43.470 --> 00:04:47.190
An HIView Ref is our new
type to represent views.

00:04:47.290 --> 00:04:50.280
So they're actually
typedef to be the same.

00:04:50.350 --> 00:04:52.310
Okay, features.

00:04:53.530 --> 00:04:54.770
Positing.

00:04:54.770 --> 00:04:56.440
One-pass drawing.

00:04:56.450 --> 00:04:59.240
We're going to go into all of this.

00:04:59.260 --> 00:05:00.260
Modern coordinate system.

00:05:00.260 --> 00:05:02.710
We use floating point coordinates.

00:05:03.200 --> 00:05:08.300
[Transcript missing]

00:05:08.690 --> 00:05:11.770
Quartz drawing is the native
drawing model of HIView,

00:05:11.770 --> 00:05:13.690
but you can use Quickdraw.

00:05:13.910 --> 00:05:17.110
We do proper Z-ordering and clipping.

00:05:17.390 --> 00:05:21.810
Yes, you won't believe you're
running a Carbon application.

00:05:21.950 --> 00:05:24.880
And we have the ability to
attach and detach views at will.

00:05:24.880 --> 00:05:26.920
You can just take a view,
pull it out of the view system,

00:05:26.920 --> 00:05:27.580
and hold onto it.

00:05:27.660 --> 00:05:30.120
You don't have to worry about
something bad happening,

00:05:30.160 --> 00:05:31.840
unless you, of course,
try to render that view yourself,

00:05:31.840 --> 00:05:32.580
and then you crash.

00:05:32.580 --> 00:05:34.140
But anyways.

00:05:34.500 --> 00:05:37.100
So anyways, composited drawing.

00:05:37.190 --> 00:05:38.300
All we do is draw.

00:05:38.580 --> 00:05:39.900
We do not erase.

00:05:40.050 --> 00:05:42.000
Not in this mode.

00:05:43.110 --> 00:05:46.440
And we also sport a
predictable drawing order.

00:05:46.540 --> 00:05:48.540
We always draw back to front.

00:05:48.640 --> 00:05:50.240
We respect the hierarchy.

00:05:50.350 --> 00:05:52.100
We respect the Z order.

00:05:52.220 --> 00:05:56.310
Now, you're probably going, "Oh, my God.

00:05:58.140 --> 00:05:59.380
is this, is this HIToolbox?

00:05:59.460 --> 00:06:01.590
Anyway, uh, am I in the right place?

00:06:01.700 --> 00:06:03.300
Um, yes, we do all of this stuff.

00:06:03.440 --> 00:06:06.380
And all these pattern alignment issues
that you've had in the past are gone.

00:06:06.470 --> 00:06:08.410
You don't have to deal with them
anymore if you're using HIView.

00:06:11.310 --> 00:06:14.700
So our goal for getting
efficient drawing is to draw any

00:06:14.780 --> 00:06:18.170
opaque pixel of a window once.

00:06:18.260 --> 00:06:21.420
This means you won't have to draw it four
times if you have something overlapping.

00:06:21.480 --> 00:06:25.180
And we do this by determining
a view's visible area.

00:06:25.280 --> 00:06:27.530
And we do this in multiple ways.

00:06:27.650 --> 00:06:28.980
First we use its parent's bounds.

00:06:28.980 --> 00:06:31.680
We can determine that if it's kind
of outside its parent's bounds,

00:06:31.680 --> 00:06:34.520
then we know that at least
it's partially obscured,

00:06:34.520 --> 00:06:36.690
if not completely obscured.

00:06:36.800 --> 00:06:42.590
And we also clip out things of siblings
above any particular view in the Z order.

00:06:42.700 --> 00:06:46.160
And each view can actually have
an opaque region of itself.

00:06:46.260 --> 00:06:51.510
And we use that to help determine
what's visible beneath it.

00:06:57.610 --> 00:06:58.940
I mentioned we have a
one-pass draw model.

00:06:59.060 --> 00:07:00.750
The way we do this is in validation.

00:07:00.810 --> 00:07:03.600
The Control Manager doesn't draw.

00:07:03.600 --> 00:07:06.110
I know that sounds shocking.

00:07:06.560 --> 00:07:08.360
So direct drawing is discouraged.

00:07:08.520 --> 00:07:13.500
In fact, there is not an HIView API that
allows you to draw a control directly.

00:07:13.500 --> 00:07:17.500
You have to wait for the
drawing loop to pass right now.

00:07:17.560 --> 00:07:21.500
We'll probably add one eventually,
but right now there is none.

00:07:21.500 --> 00:07:23.500
So I consider that to
be very discouraged.

00:07:23.500 --> 00:07:29.040
If you're calling draw one control,
draw controls, update controls, don't.

00:07:29.040 --> 00:07:30.490
You don't need to.

00:07:31.160 --> 00:07:36.320
So, if you want to draw a view,
you need to invalidate the view.

00:07:36.430 --> 00:07:38.980
And you do that by calling
HIView set needs display or

00:07:39.050 --> 00:07:40.980
set needs display in region.

00:07:41.030 --> 00:07:44.980
And you can invalidate an entire
view or just a portion of a view.

00:07:45.000 --> 00:07:48.000
And then the drawing will
actually happen later.

00:07:48.600 --> 00:07:52.850
Currently there are two, uh,
there are two very predictable

00:07:52.850 --> 00:07:54.990
times when we will draw.

00:07:55.010 --> 00:07:56.780
The first is right before we flush.

00:07:57.070 --> 00:08:00.990
So the normal flush time on event loop,
we will actually paint any dirty areas.

00:08:00.990 --> 00:08:03.990
So we'll just paint it and flush
it right in one fell swoop.

00:08:04.000 --> 00:08:07.000
And then during window painting.

00:08:07.000 --> 00:08:09.250
And what that means is as
the window is resizing,

00:08:09.250 --> 00:08:12.000
for example,
we actually paint the window immediately.

00:08:12.000 --> 00:08:15.000
And this is to get the best performance
out of live resize and the like.

00:08:15.000 --> 00:08:18.000
So we will actually draw directly then.

00:08:18.020 --> 00:08:21.340
Uh, ideally what you would do is you
would listen to your bounds change

00:08:21.380 --> 00:08:25.150
events and update your views and then
they'd automatically be dirtied and

00:08:25.150 --> 00:08:27.000
then we would paint them all at once.

00:08:27.000 --> 00:08:29.850
Um, and it's actually important
that you listen to the,

00:08:29.890 --> 00:08:33.000
uh, view bounds change and not
the window bounds change.

00:08:33.000 --> 00:08:34.000
And I might go into
that a little bit later.

00:08:39.270 --> 00:08:41.140
So, we're trying to be lazy.

00:08:41.160 --> 00:08:42.980
We don't like to do any work, okay?

00:08:43.140 --> 00:08:44.950
So, we don't invalidate for you.

00:08:45.060 --> 00:08:47.290
There's only a couple of places
where we'll invalidate for you,

00:08:47.290 --> 00:08:48.770
and that's where it's blindingly obvious.

00:08:48.910 --> 00:08:51.060
Like, we're about to show a view.

00:08:51.060 --> 00:08:52.380
Maybe they want to see it.

00:08:52.380 --> 00:08:55.220
So let's invalidate, okay?

00:08:55.220 --> 00:08:59.780
And when we move and resize views,
we also invalidate automatically

00:09:01.480 --> 00:09:05.200
But the view is completely responsible
for doing its own validation.

00:09:05.230 --> 00:09:09.500
If you set the value on a view,
if you activate it, deactivate it,

00:09:09.520 --> 00:09:11.950
set its title, it will not draw.

00:09:12.050 --> 00:09:16.560
You have to write the code to intercept
the notification if you want to draw.

00:09:16.660 --> 00:09:20.310
And this is done
completely to be efficient.

00:09:20.400 --> 00:09:22.480
We don't want to be drawing
when we don't have to.

00:09:22.600 --> 00:09:26.120
You take a Control Manager control,
like a user pane, and set its title.

00:09:26.120 --> 00:09:28.930
Well, you're not going to see it,
but we're going to redraw everything

00:09:29.020 --> 00:09:29.900
and everything it contains.

00:09:29.900 --> 00:09:32.740
But that's what we've always is done.

00:09:32.850 --> 00:09:35.180
So this is our way around that.

00:09:37.240 --> 00:09:41.710
Okay, let's talk a little bit about the
coordinate systems that we support here.

00:09:41.860 --> 00:09:44.490
Essentially,
there are two rectangles for every view.

00:09:45.790 --> 00:09:46.700
So first is the frame.

00:09:46.860 --> 00:09:52.340
And this is the location of the
view within its parent's bounds.

00:09:52.350 --> 00:09:54.460
It's in, basically,
these coordinates are actually in the

00:09:54.760 --> 00:09:56.700
local coordinate system of its parent.

00:09:56.700 --> 00:09:58.970
And speaking of local coordinate system,
yes,

00:09:58.970 --> 00:10:01.700
a view has a local coordinate system.

00:10:01.710 --> 00:10:03.960
Top left is not at the top
of the window or whatever.

00:10:04.040 --> 00:10:05.200
It's the top left of your view.

00:10:05.420 --> 00:10:07.070
That's where zero zero is.

00:10:07.160 --> 00:10:07.740
Very nice.

00:10:08.070 --> 00:10:10.590
This has some advantages, of course.

00:10:11.140 --> 00:10:14.440
Now, the bounds are how you move
and resize your control.

00:10:14.440 --> 00:10:16.500
That is what affects your position.

00:10:16.620 --> 00:10:20.720
But you always draw and you always
hit test based on your bounds.

00:10:21.120 --> 00:10:22.170
Did I say that right?

00:10:22.280 --> 00:10:22.940
Anyways.

00:10:23.080 --> 00:10:24.800
Frame, move, bounce, draw.

00:10:24.950 --> 00:10:25.180
Okay.

00:10:25.460 --> 00:10:26.860
And that means every time
you get a hit test event,

00:10:26.860 --> 00:10:29.940
the point will automatically
be transformed as the

00:10:30.030 --> 00:10:32.490
coordinate system of your view.

00:10:32.880 --> 00:10:34.200
So here's a simple example.

00:10:34.240 --> 00:10:37.570
Here's our button, and it looks gorgeous,
and it's inside this rectangle,

00:10:37.650 --> 00:10:39.040
which is its parent.

00:10:39.110 --> 00:10:43.300
And it has a local coordinate system
where 00 is at the top of the button

00:10:43.370 --> 00:10:47.190
and 120 is at the bottom right.

00:10:47.680 --> 00:10:51.560
Its frame, however, starts at 3030,
which is the offset from

00:10:51.630 --> 00:10:53.100
the top left of its parent.

00:10:53.100 --> 00:10:54.480
This is starting to
sound like a view system,

00:10:54.480 --> 00:10:54.800
isn't it?

00:10:54.910 --> 00:10:56.430
Anyways.

00:10:57.760 --> 00:10:58.840
Here's the advantages.

00:10:58.990 --> 00:11:00.940
One, it's consistent.

00:11:01.090 --> 00:11:03.600
First off, these rectangles will
never change on you,

00:11:03.710 --> 00:11:06.840
meaning that your local coordinate system
is always your local coordinate system.

00:11:06.840 --> 00:11:09.120
If you move the control,
your local coordinate

00:11:09.120 --> 00:11:10.030
system doesn't change.

00:11:10.040 --> 00:11:13.720
It still starts at 00.

00:11:13.720 --> 00:11:13.720
What a concept.

00:11:14.250 --> 00:11:17.750
And the other benefit is
actually a performance benefit,

00:11:17.750 --> 00:11:21.220
because what we do right now is when
you call move control on a control,

00:11:21.370 --> 00:11:23.490
we will actually move the control,
and then we will move

00:11:23.680 --> 00:11:24.840
all the sub-controls.

00:11:24.890 --> 00:11:27.950
We don't need to do that anymore,
because the sub-controls are

00:11:27.950 --> 00:11:29.620
always in terms of their parent.

00:11:29.720 --> 00:11:32.020
So once you move the parent, we're done.

00:11:32.100 --> 00:11:33.480
We don't have to do all that work.

00:11:33.560 --> 00:11:35.700
So it's a lot more efficient.

00:11:38.540 --> 00:11:42.190
It used to be, way back in the day,
that when you wanted to

00:11:42.190 --> 00:11:44.750
move and resize a control,
you had to move it,

00:11:44.750 --> 00:11:46.890
and then you had to size it.

00:11:47.000 --> 00:11:51.170
And then there was set control bounds,
and that kind of...

00:11:51.300 --> 00:11:53.400
helped a little bit, but, you know,
that thing didn't draw,

00:11:53.460 --> 00:11:56.090
but move and resize did, and well,
what draws and what doesn't?

00:11:56.210 --> 00:11:58.100
Well, you don't have to worry about
any of that stuff anymore.

00:11:58.280 --> 00:11:59.400
Doesn't matter.

00:11:59.530 --> 00:12:00.600
Here's a way to do it.

00:12:00.700 --> 00:12:03.700
You want to move your control,
you just adjust its frame.

00:12:03.710 --> 00:12:05.300
And you call HIView set frame.

00:12:05.300 --> 00:12:07.500
It will automatically be
invalidated accordingly,

00:12:07.500 --> 00:12:09.790
and it will just redraw
when it's time to redraw.

00:12:09.880 --> 00:12:12.290
You can actually move it
just by a certain delta.

00:12:12.300 --> 00:12:14.400
We actually support some
helper routines like this.

00:12:14.540 --> 00:12:17.990
Or you can place it in your actual
parent view at a specific location.

00:12:18.100 --> 00:12:19.970
Very easy.

00:12:21.250 --> 00:12:23.670
Now, since each view has its
local coordinate systems,

00:12:23.670 --> 00:12:26.400
there might be times when you actually
need to convert coordinates between them,

00:12:26.410 --> 00:12:28.840
and we have routines to help you do that.

00:12:28.990 --> 00:12:32.420
And we have HIView convert point, rect,
and region.

00:12:33.490 --> 00:12:35.360
And given a region,
you also give a source

00:12:35.420 --> 00:12:36.240
and destination view.

00:12:36.240 --> 00:12:38.300
And they could be at any
point in the hierarchy.

00:12:38.370 --> 00:12:42.680
And they will automatically convert
between the two view coordinate spaces

00:12:42.730 --> 00:12:45.900
accordingly by finding the common
parent and doing all the fun transforms.

00:12:46.250 --> 00:12:48.610
If you pass null from one of those,
it implies that you're

00:12:48.670 --> 00:12:49.830
going window relative.

00:12:49.980 --> 00:12:52.880
And window relative is actually a big,
big concept in HIView.

00:12:53.320 --> 00:12:56.600
And in fact, a lot of the events that
come into your application,

00:12:56.630 --> 00:12:59.740
all the mouse events,
actually have window relative points.

00:12:59.920 --> 00:13:01.900
And that's to help HIView.

00:13:02.310 --> 00:13:04.530
So you can,
given a window relative point,

00:13:04.530 --> 00:13:08.060
you can easily convert it into your
view space by passing null from as,

00:13:08.080 --> 00:13:09.890
for example, as the from view.

00:13:10.470 --> 00:13:13.670
Because if you're converting
from a window relative point

00:13:13.670 --> 00:13:17.890
to a window view local point,
just pass null for the first parameter.

00:13:18.210 --> 00:13:21.160
And by window relative, I mean, zero,
zero is at the top left, the very,

00:13:21.160 --> 00:13:22.900
very top left of the window surface.

00:13:22.900 --> 00:13:26.780
The very, very top left of the
structure of the window.

00:13:27.690 --> 00:13:28.600
Okay.

00:13:28.600 --> 00:13:30.100
We have some new types.

00:13:30.100 --> 00:13:34.570
We probably used to point, rect, and,
well, we didn't have an analog for size,

00:13:34.700 --> 00:13:37.560
but now we have HIPoint, HIREct,
and HISize.

00:13:37.590 --> 00:13:39.820
If you haven't guessed,
we really like this HI prefix.

00:13:39.880 --> 00:13:40.600
We kind of dig it.

00:13:40.770 --> 00:13:43.600
And we go happy with it.

00:13:43.940 --> 00:13:45.040
That's just me.

00:13:45.040 --> 00:13:50.260
HIPoint actually saw its
debut in the 10.1 release.

00:13:50.260 --> 00:13:54.030
And the reason we
introduced it at that point,

00:13:54.560 --> 00:13:56.000
was because we were
dealing with tablet events,

00:13:56.000 --> 00:13:59.360
and we introduced the tablet event
support and all that fun stuff.

00:13:59.550 --> 00:14:01.500
Obviously very popular
with that one gentleman.

00:14:01.500 --> 00:14:06.090
The beauty of this is that
you can actually have subpixel

00:14:06.100 --> 00:14:08.530
resolution in your event,
and that was the reason we let

00:14:08.610 --> 00:14:10.500
this out before the rest of HIView.

00:14:10.500 --> 00:14:12.320
But it was just part
of this larger thing,

00:14:12.320 --> 00:14:14.570
so it might have seemed
out of context at the time,

00:14:14.570 --> 00:14:15.070
like, "H.I.

00:14:15.120 --> 00:14:15.500
Point?

00:14:15.500 --> 00:14:18.500
What the heck is that?" Well,
now it all makes sense.

00:14:18.500 --> 00:14:20.500
And these things are, like I said, H.I.

00:14:20.500 --> 00:14:22.490
-- they're actually floating point.

00:14:22.540 --> 00:14:25.500
And they're actually just
typed up to the CG rectangles.

00:14:25.500 --> 00:14:26.500
And there's a reason for that.

00:14:26.500 --> 00:14:28.500
And there's a reason we renamed them.

00:14:28.500 --> 00:14:30.500
And one of the more minor reasons is,
you know, consistency with our API.

00:14:30.620 --> 00:14:32.500
But there's a better one.

00:14:36.760 --> 00:14:39.990
So we have two graphics
models you can use.

00:14:40.020 --> 00:14:42.990
The preferred mechanism is Quartz.

00:14:44.000 --> 00:14:46.630
You can also use Quick Draw.

00:14:46.760 --> 00:14:49.970
So if you want all the
fancy schmancy Quartz,

00:14:49.970 --> 00:14:53.530
you know, graphic stuff, anti-aliasing,
transparency, all of that stuff,

00:14:53.650 --> 00:14:54.680
you choose the Quartz path.

00:14:54.730 --> 00:14:59.460
If you have code that you want to
migrate to be in this new world,

00:14:59.510 --> 00:15:01.960
you can use Quick Draw.

00:15:02.030 --> 00:15:04.600
So Quartz, native drawing model.

00:15:05.190 --> 00:15:08.430
Again, you can use all the fancy stuff,
baziers, scaling, rotating.

00:15:08.500 --> 00:15:11.680
You can do all that fun
stuff in your HIView.

00:15:12.290 --> 00:15:15.650
Quartz coordinates, however,
are at the bottom left of your view.

00:15:15.750 --> 00:15:17.280
But guess what?

00:15:17.400 --> 00:15:18.590
Not if you're using HIView.

00:15:18.650 --> 00:15:21.670
You put it where it belongs.

00:15:23.430 --> 00:15:26.100
Now, of course, it's just a context,
so you can flip it if you want.

00:15:26.100 --> 00:15:26.900
It's completely up to you.

00:15:26.900 --> 00:15:29.130
And we might have APIs so that
you can have it either way,

00:15:29.200 --> 00:15:33.160
'cause some applications actually
really like the lower left positioning.

00:15:33.250 --> 00:15:36.130
But the reason we've
made it top left-- well,

00:15:36.200 --> 00:15:38.500
there's actually, like, three reasons.

00:15:39.550 --> 00:15:43.270
First off, the windowing system starts
with 00s at the top left.

00:15:43.430 --> 00:15:45.770
Your existing code that you've
always written has always

00:15:45.780 --> 00:15:47.530
been 00 at the top left.

00:15:47.680 --> 00:15:52.340
And when you resize windows,
if we had bottom left view frames,

00:15:52.410 --> 00:15:55.100
whenever you resize a window,
the bottom would be moving,

00:15:55.170 --> 00:15:57.040
and we'd have to actually
adjust the frames of everything

00:15:57.040 --> 00:15:59.960
even though it wasn't actually
physically moving in the window.

00:16:00.060 --> 00:16:01.430
We wanted to avoid all that.

00:16:01.550 --> 00:16:05.370
So we just stuck with what
we knew worked in the past.

00:16:05.490 --> 00:16:09.380
The only problem here is that
you're drawing upside down.

00:16:09.690 --> 00:16:12.330
And if you were to call
CGContextDrawImage,

00:16:12.450 --> 00:16:14.480
you would find that out the hard way.

00:16:14.660 --> 00:16:18.320
So what we've done is we've
actually introduced an API here to

00:16:18.510 --> 00:16:20.760
help you called HIViewDrawCGImage.

00:16:20.840 --> 00:16:23.920
And this will actually just
flip the context momentarily,

00:16:23.920 --> 00:16:26.040
draw the image, and you're done.

00:16:26.170 --> 00:16:29.990
So we're trying to help out where
we're necessary to deal with this,

00:16:30.000 --> 00:16:33.890
you know, where we think it's -- that's
the way it's always been.

00:16:33.910 --> 00:16:35.830
It's actually upside down.

00:16:36.110 --> 00:16:37.500
So that's that.

00:16:37.520 --> 00:16:40.270
I mentioned that
Quick Draw drawing is supported.

00:16:40.360 --> 00:16:43.480
And it is.

00:16:43.480 --> 00:16:45.230
But you have to let us know.

00:16:45.300 --> 00:16:46.980
And there will be a way
for you to advertise,

00:16:47.040 --> 00:16:49.080
hey, my view needs Quick Draw.

00:16:49.100 --> 00:16:52.410
But you gotta realize
that when we do this,

00:16:52.410 --> 00:16:54.640
we're actually gonna,
you're gonna be paying

00:16:54.640 --> 00:16:57.490
a performance cost,
and that is because we have to sync

00:16:57.540 --> 00:17:01.220
up Quick Draw as we're descending the
hierarchy to set up for your view.

00:17:01.220 --> 00:17:04.400
Where, if we're just going CG only,
we don't need to do that.

00:17:04.400 --> 00:17:05.790
So just keep that in mind.

00:17:08.310 --> 00:17:11.010
If you ever wanted a
picture of a control,

00:17:11.030 --> 00:17:12.830
it was really hard.

00:17:12.960 --> 00:17:13.530
Really hard.

00:17:13.770 --> 00:17:15.990
You had to create it just off
screen and do all this other stuff.

00:17:16.110 --> 00:17:17.570
But even then,
you couldn't get an image that

00:17:17.670 --> 00:17:21.510
you could composite on anything
because it didn't have alpha in it.

00:17:21.880 --> 00:17:23.140
This is easy now.

00:17:23.250 --> 00:17:25.820
All you have to do is call
HIView create offscreen image,

00:17:25.820 --> 00:17:28.910
and you have a picture that
you can actually just blit

00:17:28.910 --> 00:17:30.280
onto something really easily.

00:17:30.400 --> 00:17:33.180
And in the near future,
you'll be able to take these images and

00:17:33.180 --> 00:17:34.640
just use them as drag images or whatever.

00:17:34.770 --> 00:17:36.800
This is actually what the toolbar uses.

00:17:36.800 --> 00:17:38.800
It's pretty cool.

00:17:38.800 --> 00:17:39.790
All right.

00:17:39.790 --> 00:17:40.790
Demo time.

00:17:40.790 --> 00:17:43.800
Let's start to see some
of this stuff work.

00:17:43.800 --> 00:17:48.800
We'll see how my radio mouse
affects the microphones.

00:17:48.990 --> 00:17:50.800
All right.

00:17:51.310 --> 00:17:53.800
What's number one?

00:17:54.070 --> 00:17:55.040
All right.

00:17:55.040 --> 00:17:55.800
Here's a window.

00:17:55.930 --> 00:17:59.040
This window has compositing on.

00:17:59.040 --> 00:17:59.040
All right.

00:18:03.340 --> 00:18:06.960
What I want to show you
first is the view hierarchy.

00:18:06.960 --> 00:18:09.910
Now here's a little window
that shows the view hierarchy.

00:18:11.710 --> 00:18:14.300
And I also want to turn on
this little edit mode thing.

00:18:14.430 --> 00:18:18.000
First thing to notice is-- well,
let me point something out here.

00:18:18.100 --> 00:18:20.170
That's the content view.

00:18:21.100 --> 00:18:34.500
[Transcript missing]

00:18:35.000 --> 00:18:36.710
Window title: It's a view.

00:18:38.070 --> 00:18:39.750
Well, I can't see it.

00:18:39.900 --> 00:18:41.010
Now you can.

00:18:41.460 --> 00:18:41.900
It's a view.

00:18:44.290 --> 00:18:47.200
The widgets are views.

00:18:47.300 --> 00:18:48.740
Maybe I don't like where this is.

00:18:48.860 --> 00:18:50.530
I'll just move it here.

00:18:53.450 --> 00:18:58.400
Maybe... I like this bigger.

00:18:58.400 --> 00:18:59.400
And then you know what?

00:18:59.660 --> 00:19:01.200
Still works.

00:19:04.600 --> 00:19:11.500
[Transcript missing]

00:19:24.690 --> 00:19:24.690
So I put this up here.

00:19:24.690 --> 00:19:24.690
You notice two things.

00:19:24.690 --> 00:19:24.690
One, this is actually being
composited right now.

00:19:24.690 --> 00:19:24.690
The chasing arrows are drawing over the
pulsing button and it all performs great.

00:19:24.690 --> 00:19:24.690
The other thing to notice,

00:19:25.580 --> 00:19:29.220
We're actually clipping and z-ordering
and all this stuff just works.

00:19:29.330 --> 00:19:32.770
What you would expect to
happen actually now happens.

00:19:32.780 --> 00:19:34.160
This is great.

00:19:34.250 --> 00:19:37.180
Another little thing you can notice
is that if I move this over here,

00:19:37.260 --> 00:19:41.110
it's clipped to its parent,
the way it's supposed to be.

00:19:46.870 --> 00:19:50.870
The other thing I just wanted to show is
the content root and all that fun stuff.

00:19:50.940 --> 00:19:53.740
You'll notice that the content root,
when compositing is on

00:19:53.740 --> 00:19:55.780
here-- and I've enabled it,
and we'll tell you how to do that

00:19:55.780 --> 00:20:00.490
in a little bit-- the content root

00:20:01.030 --> 00:20:03.220
U, in this case,
is not the old root control

00:20:03.220 --> 00:20:04.440
that you're used to.

00:20:04.570 --> 00:20:09.300
The old root control had this arbitrarily
large space from which to draw.

00:20:09.300 --> 00:20:14.220
The content root, so to speak,
in this term is just a real view.

00:20:14.340 --> 00:20:15.860
It lives in the hierarchy
like anything else,

00:20:15.860 --> 00:20:17.080
and it's sized appropriately.

00:20:17.150 --> 00:20:20.160
It's not this wild thing
that lives in there.

00:20:20.160 --> 00:20:22.310
As you can see,
we have this cool hierarchy

00:20:22.320 --> 00:20:23.720
and everything works.

00:20:23.720 --> 00:20:25.710
That's really neat and all that stuff.

00:20:25.810 --> 00:20:27.640
The other thing I'd just like
to point out is that this whole

00:20:27.790 --> 00:20:30.460
little thing that you see here
was written using Carbon events,

00:20:30.460 --> 00:20:35.200
and it was done in a couple of days
by one of the engineers on my team,

00:20:35.280 --> 00:20:37.340
David McCloud.

00:20:37.340 --> 00:20:41.020
This is pretty cool because
not only can you just look at

00:20:41.220 --> 00:20:45.110
the hierarchy for any window,
but you could do interesting things like,

00:20:45.110 --> 00:20:47.400
let's see,
I want to look at this round button.

00:20:47.400 --> 00:20:48.260
Hmm, okay.

00:20:48.400 --> 00:20:51.450
You could do interesting things
that maybe I don't like where it is,

00:20:51.450 --> 00:20:53.440
so I'll just do it.

00:20:53.440 --> 00:20:54.440
You can move things around.

00:20:54.440 --> 00:20:55.820
This is just written all Carbon events.

00:20:55.820 --> 00:20:57.350
This just works because now,
especially with all this

00:20:57.350 --> 00:20:59.040
stuff that we're working on,
we're doing all this stuff

00:20:59.150 --> 00:21:00.680
that we've added from HIView,
we get a lot more

00:21:00.680 --> 00:21:02.400
notifications for things.

00:21:02.400 --> 00:21:03.400
You can change things like the frame.

00:21:03.400 --> 00:21:05.100
You can change the minimum
and maximum and move things

00:21:05.100 --> 00:21:06.160
around and do all that stuff.

00:21:06.160 --> 00:21:08.980
You can write an interface
editor in a couple of weeks,

00:21:08.980 --> 00:21:10.220
and I'm not kidding.

00:21:10.300 --> 00:21:12.800
It's really cool stuff.

00:21:21.320 --> 00:21:26.130
I'm working on this character editor.

00:21:26.230 --> 00:21:29.740
And this character editor,
I'm prototyping it right now.

00:21:29.850 --> 00:21:33.040
And so I've just got some
basic things in here.

00:21:33.090 --> 00:21:36.800
And as you can see, here's my nib,
and everything looks fine.

00:21:36.900 --> 00:21:38.360
But I'm going to run it.

00:21:38.360 --> 00:21:41.390
So we'll just click the old button here.

00:21:42.150 --> 00:21:42.660
And oh, God.

00:21:42.840 --> 00:21:44.060
Already I got problems.

00:21:44.150 --> 00:21:44.840
Look at the role.

00:21:44.840 --> 00:21:46.790
It's like stamping on the first thing.

00:21:47.060 --> 00:21:49.700
And I had a rad thing
over on the left there,

00:21:49.700 --> 00:21:51.010
and it's not there.

00:21:51.260 --> 00:21:53.560
And the word awesome there,
it's kind of close.

00:21:53.640 --> 00:21:54.050
I don't know.

00:21:54.050 --> 00:21:55.750
I mean,
let me see what happens if I do it.

00:21:55.860 --> 00:21:57.840
Oh, God, look at that.

00:21:57.960 --> 00:21:59.520
Dude, what am I going to do now?

00:21:59.660 --> 00:22:01.860
Well, I guess I'll have to,
I'll deal with that later.

00:22:01.980 --> 00:22:05.980
But in the meantime, you know,
my boss just walked into my office,

00:22:05.980 --> 00:22:08.270
and he's like, all right, look.

00:22:08.470 --> 00:22:11.300
For this character editor,
we want a picture of the character

00:22:11.600 --> 00:22:12.940
on the background of this thing.

00:22:13.060 --> 00:22:14.880
And I'm like, dude,
I don't think you know

00:22:14.970 --> 00:22:16.080
what you're asking.

00:22:16.130 --> 00:22:17.380
I don't think I can do that.

00:22:17.480 --> 00:22:18.780
This is like the toolbox.

00:22:18.860 --> 00:22:20.410
It doesn't support that stuff.

00:22:20.550 --> 00:22:21.250
But I'll try it.

00:22:21.350 --> 00:22:22.000
What the heck.

00:22:22.000 --> 00:22:23.880
Let's go for it.

00:22:26.200 --> 00:22:31.200
Take some space here and
get the picture item.

00:22:31.200 --> 00:22:34.200
And just pop it in.

00:22:34.200 --> 00:22:37.590
And resize it appropriately.

00:22:40.600 --> 00:23:03.800
[Transcript missing]

00:23:05.600 --> 00:23:07.120
I mean, I,
I still have all the visual problems,

00:23:07.130 --> 00:23:09.280
and now I got all this real,
what's that stripey stuff?

00:23:09.520 --> 00:23:10.940
That's not what I want.

00:23:10.950 --> 00:23:12.160
Oh, God.

00:23:12.230 --> 00:23:12.930
Damn Aqua.

00:23:13.060 --> 00:23:13.570
Anyways.

00:23:14.000 --> 00:23:16.450
The, the,
the best part about this is that

00:23:16.700 --> 00:23:19.330
not only does it not look right,
it doesn't work.

00:23:19.550 --> 00:23:21.480
I can't actually click anything.

00:23:21.610 --> 00:23:24.480
And this is because the click order
is the same as the visual order.

00:23:24.490 --> 00:23:29.310
So what's first to draw, which is Guy,
is, you know, so Guy is interfering

00:23:29.430 --> 00:23:30.940
with my mouse clicks.

00:23:32.830 --> 00:23:34.800
I'd love to talk to him about that.

00:23:34.890 --> 00:23:36.040
So what am I going to do?

00:23:36.040 --> 00:23:36.290
All right.

00:23:36.440 --> 00:23:39.140
I guess there's multiple
things I could do.

00:23:39.230 --> 00:23:40.310
I mean, let's see.

00:23:40.460 --> 00:23:42.010
I was reading on Carbon Dev.

00:23:42.040 --> 00:23:43.730
I guess I could patch the
Quick Draw bottlenecks.

00:23:43.730 --> 00:23:45.640
Maybe I'll fix that thing.

00:23:45.640 --> 00:23:48.540
Or maybe I have to rewrite this
myself or use something else.

00:23:48.590 --> 00:23:49.180
I don't know.

00:23:49.180 --> 00:23:50.560
I just don't think it's possible.

00:23:50.740 --> 00:23:52.410
But the fact is, it is possible.

00:23:52.410 --> 00:23:53.700
Let's do it.

00:23:53.800 --> 00:23:56.000
All right.

00:23:56.000 --> 00:23:56.410
It's going to take a little work here.

00:23:58.900 --> 00:24:07.500
[Transcript missing]

00:24:09.860 --> 00:24:11.340
But guess what?

00:24:11.340 --> 00:24:12.040
It works.

00:24:12.040 --> 00:24:14.550
So we can make him Jeff Daniels.

00:24:14.720 --> 00:24:16.420
And we just move it.

00:24:16.420 --> 00:24:18.360
Everything

00:24:18.710 --> 00:24:21.420
And that's just one
sample of compositing.

00:24:21.450 --> 00:24:23.460
So now, not only has everything
been drawn like that,

00:24:23.660 --> 00:24:25.740
but notice the pulsing button is pulsing,
and it's redrawing,

00:24:25.740 --> 00:24:28.310
it has to redraw the picture behind it,
and it obviously only redraws that

00:24:28.570 --> 00:24:30.140
portion of the picture that it needs to.

00:24:30.230 --> 00:24:32.700
And it's really fast, and it works great.

00:24:32.840 --> 00:24:35.460
Okay.

00:24:35.460 --> 00:24:35.460
Next.

00:24:40.110 --> 00:24:42.860
In the last session,
I briefly showed scroll view.

00:24:42.870 --> 00:24:44.300
I just want to show off
a couple of these things.

00:24:44.310 --> 00:24:45.850
These are a couple of
views that we wrote.

00:24:45.970 --> 00:24:47.100
These are completely HIView only.

00:24:47.100 --> 00:24:50.060
So we have an image view
and we have a scroll view.

00:24:50.100 --> 00:24:52.070
And the image view can be
embedded within a scroll view.

00:24:52.170 --> 00:24:54.140
It supports the scrollable protocol.

00:24:54.300 --> 00:24:56.930
So the image view is interesting.

00:24:57.350 --> 00:24:58.060
Well, not really.

00:24:58.080 --> 00:24:58.940
It's just an image, right?

00:24:58.990 --> 00:25:03.000
But anyways, you know,
it resizes and all that fun stuff.

00:25:03.000 --> 00:25:06.580
But, you know,
I got this big honking grow box

00:25:06.680 --> 00:25:09.100
sitting on my picture and it
really interferes with things.

00:25:09.230 --> 00:25:11.420
Well,
realize that the grow box is a view.

00:25:11.620 --> 00:25:16.300
Realize that the grow box is actually
z-ordered above the content region.

00:25:16.420 --> 00:25:17.300
Okay.

00:25:17.540 --> 00:25:19.800
Realize that we do compositing.

00:25:19.910 --> 00:25:22.530
With all of that fun stuff,
I could just come up here and

00:25:22.640 --> 00:25:24.450
make the grow box transparent.

00:25:24.560 --> 00:25:25.750
And that is that easy.

00:25:27.760 --> 00:25:29.720
We could just throw this
stuff together these days.

00:25:29.720 --> 00:25:31.310
This is just fun stuff.

00:25:31.400 --> 00:25:33.260
Just to show you a little bit of stuff.

00:25:33.260 --> 00:25:35.560
You can actually also
size to fit the picture.

00:25:35.560 --> 00:25:39.790
We support that as part
of the image protocol.

00:25:40.560 --> 00:25:43.890
So we have a scroll view,
and it does this thing called scrolling.

00:25:43.890 --> 00:25:47.090
I'm sure you've heard of it.

00:25:47.300 --> 00:26:00.200
[Transcript missing]

00:26:00.760 --> 00:26:01.940
I could scroll this way.

00:26:01.980 --> 00:26:03.780
And the other thing that we
could do now in Jaguar is if

00:26:03.840 --> 00:26:06.360
you hold down the shift key,
you could scroll that way.

00:26:06.360 --> 00:26:07.740
Just thought you might want to know that.

00:26:07.860 --> 00:26:09.330
Anyways.

00:26:09.800 --> 00:26:13.560
So the scroll view is kind of cute,
and it does all this neat stuff, but,

00:26:13.560 --> 00:26:16.130
you know,
we actually even support a small variant.

00:26:16.220 --> 00:26:18.630
So we actually have small scroll bars,
so you can use it in

00:26:18.630 --> 00:26:19.600
a palette or whatever.

00:26:19.600 --> 00:26:21.400
But, my God, that grow box again.

00:26:21.510 --> 00:26:23.120
Gee, what's going on?

00:26:23.200 --> 00:26:24.490
And it's, ugh, yeah.

00:26:24.550 --> 00:26:26.370
It would look a lot better
in a floating window,

00:26:26.370 --> 00:26:28.020
wouldn't it?

00:26:28.070 --> 00:26:28.820
All right.

00:26:28.880 --> 00:26:30.660
Let's make it a floating window.

00:26:30.700 --> 00:26:31.920
Oh, okay, I'm done.

00:26:31.980 --> 00:26:32.920
All right.

00:26:32.940 --> 00:26:34.400
Now...

00:26:35.170 --> 00:26:38.280
Realize what I have just done.

00:26:38.300 --> 00:26:41.260
I know, I,
well you selected that menu item,

00:26:41.260 --> 00:26:41.260
I don't know.

00:26:41.270 --> 00:26:44.180
I just changed the actual
window definition on the fly.

00:26:44.190 --> 00:26:45.260
I want you to try to do that.

00:26:45.260 --> 00:26:47.000
I dare you to try to do
that on today's MacÂ OS.

00:26:47.070 --> 00:26:49.170
You can't do it.

00:26:49.790 --> 00:26:52.540
And this is all because of HIView.

00:26:52.610 --> 00:26:56.090
The other thing we can get is Metal.

00:26:57.550 --> 00:26:59.740
I have my mental scroll view,
and ain't it cute?

00:26:59.830 --> 00:27:02.380
But, of course, I have large scroll bars.

00:27:02.380 --> 00:27:05.300
So I can set that back.

00:27:08.470 --> 00:27:10.400
The other thing about the scroll view,
just to give you a couple little things,

00:27:10.400 --> 00:27:14.800
is you can actually reserve space for
placard and all that other fun stuff.

00:27:14.910 --> 00:27:18.020
But what I want to also demonstrate,
the scroll view works to

00:27:18.100 --> 00:27:23.400
the best of its ability,
meaning that it will try to

00:27:23.400 --> 00:27:27.050
scroll as fast as it can.

00:27:27.050 --> 00:27:27.080
So if nothing is obscuring it,

00:27:28.000 --> 00:27:46.300
[Transcript missing]

00:27:46.530 --> 00:27:49.260
So it's kind of, you know,
if I just blitted the bits,

00:27:49.260 --> 00:27:51.900
I'd actually do some really bad stuff.

00:27:51.900 --> 00:27:51.900
But...

00:27:52.520 --> 00:27:56.230
Because it's all composited,
I can actually scroll this right over it.

00:27:56.240 --> 00:27:59.310
And notice that the
performance is awesome.

00:27:59.590 --> 00:28:02.140
And just to prove that it's
really on top of the scroll view,

00:28:02.270 --> 00:28:03.020
you can go check that out.

00:28:03.130 --> 00:28:05.700
We're actually drawing
on top of the scroll bar.

00:28:06.690 --> 00:28:10.410
Or I could be doing this,
and it still works.

00:28:10.520 --> 00:28:11.720
All right.

00:28:11.850 --> 00:28:13.440
One more.

00:28:19.080 --> 00:28:24.640
So, one of the things that I didn't
actually show you in here was that...

00:28:24.760 --> 00:28:29.430
Let me just turn on resizability
with this example and run it again.

00:28:32.380 --> 00:28:34.660
One of the features of the
scroll bar that's supported

00:28:34.660 --> 00:28:36.840
is auto-hide scroll bars.

00:28:36.890 --> 00:28:39.300
So right now,
this window is in the scroll view.

00:28:39.400 --> 00:28:40.990
But just the controls are,
the picture's not.

00:28:40.990 --> 00:28:42.300
The picture's the background.

00:28:42.380 --> 00:28:44.290
So I think you know where
I'm going with this.

00:28:44.400 --> 00:28:46.820
Let me resize the
window a little smaller.

00:28:49.750 --> 00:28:51.330
There it is.

00:28:51.390 --> 00:28:53.190
Pretty cool, huh?

00:28:53.270 --> 00:28:54.280
But that's just scrolling.

00:28:54.330 --> 00:28:55.450
Big deal.

00:28:55.550 --> 00:28:57.180
Check this out.

00:29:12.630 --> 00:29:12.630
This is compositing.

00:29:12.630 --> 00:29:12.630
It all just works.

00:29:12.630 --> 00:29:12.630
Out of the box, nothing fancy.

00:29:12.630 --> 00:29:12.630
That is the power and
the glory of HIView.

00:29:20.100 --> 00:29:21.100
I think I turned this sucker on.

00:29:21.100 --> 00:29:24.190
Looks pretty cool.

00:29:24.280 --> 00:29:25.140
First off, it's per window.

00:29:25.220 --> 00:29:27.040
You have to enable it
via a window attribute.

00:29:27.040 --> 00:29:31.100
And the window attribute is called
kWindowCompositingAttribute.

00:29:31.190 --> 00:29:35.470
And you have to use create new window
because it has to be specified at

00:29:35.600 --> 00:29:37.770
construction time of the window.

00:29:37.770 --> 00:29:41.100
You can't use change
window attributes later.

00:29:41.100 --> 00:29:42.890
So if you're using new C control,
you might want to,

00:29:42.890 --> 00:29:44.850
it might be a good time to
switch to create new window.

00:29:44.930 --> 00:29:50.080
And once this gets turned on,
all this glorious stuff comes to you.

00:29:50.100 --> 00:29:50.340
you.

00:29:53.610 --> 00:29:55.480
The standard handler is
actually highly recommended,

00:29:55.580 --> 00:29:58.920
if not almost required,
only because of differences in

00:29:58.920 --> 00:30:00.290
the way that events are processed.

00:30:00.300 --> 00:30:02.900
Now I'm going to talk a little bit
about that and kind of tell you,

00:30:02.920 --> 00:30:05.300
but in general we always
recommend the standard handler.

00:30:05.630 --> 00:30:07.100
Party line.

00:30:09.750 --> 00:30:13.380
So, I showed you that when
windows are composited,

00:30:13.400 --> 00:30:15.100
it operates completely in terms of views.

00:30:15.200 --> 00:30:18.190
There are views everywhere,
from the structure down.

00:30:18.340 --> 00:30:22.000
All of that window that you saw, in fact,
all of the windows that you see

00:30:22.170 --> 00:30:25.590
on your system actually have
views at the very root level,

00:30:25.610 --> 00:30:27.320
even on the ones that aren't composited.

00:30:27.390 --> 00:30:28.350
We're that fancy.

00:30:28.460 --> 00:30:30.230
And we did that, obviously,
so that we could have one

00:30:30.260 --> 00:30:31.600
implementation instead of two.

00:30:31.600 --> 00:30:34.660
That means that the WDEF is dead.

00:30:34.840 --> 00:30:36.250
You don't need to write WDEFs anymore.

00:30:36.340 --> 00:30:37.590
All you need to write is views.

00:30:37.630 --> 00:30:39.440
This is part of reduce and simplify.

00:30:39.630 --> 00:30:41.290
You don't need to deal
with this stuff anymore.

00:30:41.290 --> 00:30:45.240
It's just one model,
and it works everywhere.

00:30:48.000 --> 00:30:50.140
You have this composited window.

00:30:50.260 --> 00:30:53.120
And it all uses views,
which means that when we paint,

00:30:53.220 --> 00:30:56.090
we just render the view hierarchy.

00:30:56.230 --> 00:30:58.920
And this also means that
things like paint procs,

00:30:59.030 --> 00:31:04.700
if you have client paint procs installed
or you expect the content to be erased,

00:31:04.700 --> 00:31:05.740
it's not going to happen.

00:31:05.740 --> 00:31:06.890
It's just going to render.

00:31:06.990 --> 00:31:09.000
However, this is pretty cool.

00:31:09.080 --> 00:31:10.790
You can actually do cool stuff.

00:31:10.870 --> 00:31:13.190
You know that the content view exists.

00:31:13.240 --> 00:31:14.300
You can probably find it.

00:31:14.330 --> 00:31:18.240
In fact, we have the control
ID specified in our header.

00:31:18.320 --> 00:31:20.820
So you can actually get it and override
the draw method on it and put a picture

00:31:20.880 --> 00:31:22.860
in the background of your window,
just like that.

00:31:22.860 --> 00:31:24.130
It's just really simple.

00:31:24.210 --> 00:31:28.600
All these things that were previously
difficult to do have become really,

00:31:28.600 --> 00:31:29.580
really easy.

00:31:29.700 --> 00:31:32.390
In fact,
when you saw me switch the WDEF from

00:31:32.390 --> 00:31:36.230
document to floating window,
I wrote that in a half an hour.

00:31:36.240 --> 00:31:38.160
And I don't mean I wrote the
code to actually switch it.

00:31:38.210 --> 00:31:40.180
No,
I wrote the code in the WDEF to make it

00:31:40.180 --> 00:31:42.040
switch dynamically in a half an hour.

00:31:42.190 --> 00:31:44.040
Because that's how easy these things are.

00:31:44.140 --> 00:31:46.320
We can start bringing new
features faster than you've

00:31:46.320 --> 00:31:47.810
ever imagined with this stuff.

00:31:51.560 --> 00:31:54.710
When the windows resize,
we actually just resize the hierarchy.

00:31:54.820 --> 00:31:56.500
We resize the structure.

00:31:56.500 --> 00:31:58.830
And what happens from there is the
content will resize and all the things

00:31:58.830 --> 00:32:01.720
propagate down the view hierarchy,
much as you'd expect.

00:32:01.830 --> 00:32:03.560
We have a new event
that you can listen to.

00:32:03.680 --> 00:32:08.840
K event control, parent bounds changed.

00:32:08.900 --> 00:32:12.480
This gets sent out whenever a
view has resized itself so that

00:32:12.680 --> 00:32:16.850
children who wish to listen and
react to parent changes can.

00:32:16.930 --> 00:32:18.010
That's one way of doing it.

00:32:18.040 --> 00:32:21.660
And the other way is, obviously,
if a parent manages its children,

00:32:21.660 --> 00:32:23.490
much like the toolbar
or something like that,

00:32:23.510 --> 00:32:26.290
it would actually do
the layout and resize.

00:32:28.320 --> 00:32:30.830
When a window is hidden,
we actually hide the root view.

00:32:30.860 --> 00:32:33.150
And this is so that you know I'm hidden.

00:32:33.250 --> 00:32:35.240
You don't actually have to
check window visibility ever.

00:32:35.360 --> 00:32:36.620
Just check view visibility.

00:32:36.670 --> 00:32:38.300
That's all you need to deal with.

00:32:38.390 --> 00:32:41.270
And we do this so that you don't
actually try to do any crazy

00:32:41.280 --> 00:32:43.050
drawing or all that fun stuff.

00:32:43.200 --> 00:32:46.980
Not that you have an API to do that,
but...

00:32:47.360 --> 00:32:49.440
And likewise, when the window's shown,
we actually just show the root

00:32:49.460 --> 00:32:50.960
view and repaint everything.

00:32:50.960 --> 00:32:52.940
And this allows us to actually
repaint everything before

00:32:52.950 --> 00:32:54.300
your window comes on screen.

00:32:54.300 --> 00:32:57.060
And this actually means that
you don't need to listen to

00:32:57.060 --> 00:32:58.800
k-event window draw content.

00:32:58.800 --> 00:33:01.740
In fact, there's a lot of k-event window
events that you don't need

00:33:01.740 --> 00:33:03.300
to listen to in this mode.

00:33:03.300 --> 00:33:07.260
And a standard handler is like, you know,
partially neutered because of this.

00:33:07.330 --> 00:33:09.290
It just does view stuff.

00:33:09.320 --> 00:33:11.680
And we'll talk about how
that works in a little bit.

00:33:12.950 --> 00:33:15.250
view hierarchy.

00:33:15.320 --> 00:33:18.780
As I mentioned, the hierarchy actually
starts in structure.

00:33:18.870 --> 00:33:21.390
So the root view is the window frame.

00:33:21.420 --> 00:33:22.900
The window widgets are actually views.

00:33:22.900 --> 00:33:26.320
It has a content view,
and you can get that and any other

00:33:26.320 --> 00:33:35.290
standards sub-view via HIView find by ID,
which is the analog to get control by ID.

00:33:37.760 --> 00:33:41.600
Now, we used to have this API,
and it was called CreateRootControl.

00:33:41.680 --> 00:33:44.940
And when you use it,
it didn't really create a root control.

00:33:44.940 --> 00:33:47.100
It created something that lived
in the content of the window,

00:33:47.100 --> 00:33:49.820
and that's not what
you want in this world.

00:33:49.820 --> 00:33:49.820
So,

00:33:51.100 --> 00:33:54.900
It behaves a little differently,
but it tries to be compatible so

00:33:54.900 --> 00:33:58.300
that you can migrate to it easily.

00:33:58.420 --> 00:34:00.730
So first off,
if you try to call createRootControl

00:34:00.850 --> 00:34:03.030
on a composited window,
it will just tell you

00:34:03.030 --> 00:34:04.340
the root already exists.

00:34:04.390 --> 00:34:07.500
And if you call getRootControl,
you'll actually just be

00:34:07.630 --> 00:34:09.600
handed the content view.

00:34:09.640 --> 00:34:11.730
And this is just so that you
can have a compatible behavior.

00:34:11.740 --> 00:34:14.100
So if you used to call
getRootControl and bedControl,

00:34:14.110 --> 00:34:15.930
you can still do that.

00:34:17.150 --> 00:34:20.380
If you want the true root of the window,
you just call HIView.getRoot.

00:34:20.380 --> 00:34:25.030
This is the only API,
say from one debugging API,

00:34:25.120 --> 00:34:26.490
that actually takes a window ref.

00:34:26.710 --> 00:34:30.090
Every other API is
done in terms of views.

00:34:30.540 --> 00:34:34.550
And that right there at the bottom,
khiviewwindowcontentid,

00:34:34.640 --> 00:34:38.270
is the actual control ID of the content,
so you can actually find

00:34:38.270 --> 00:34:39.390
it if you wanted to.

00:34:39.400 --> 00:34:45.240
Let's talk a little bit about embedding.

00:34:45.900 --> 00:34:49.360
We always had Embed Control,
Auto Embed Control.

00:34:49.370 --> 00:34:51.080
But it's similar.

00:34:51.620 --> 00:34:54.840
If you want to add a new subview,
you call HIView@subview.

00:34:54.840 --> 00:34:56.010
Now here's the interesting part.

00:34:56.020 --> 00:34:58.810
If you want to remove a subview,
you just call HIView

00:34:58.810 --> 00:35:00.200
removed from superview.

00:35:00.280 --> 00:35:03.470
That view is now detached
and living separate from the

00:35:03.560 --> 00:35:05.470
Windows control hierarchy.

00:35:08.020 --> 00:35:12.390
All the new controls that we introduce
will not have an owning window parameter.

00:35:12.510 --> 00:35:16.000
So when you create them,
they will automatically be detached.

00:35:16.060 --> 00:35:21.820
All of the existing APIs that do take an
owning window parameter now accept null.

00:35:26.300 --> 00:35:28.300
I showed you that we
actually properly z-order.

00:35:28.500 --> 00:35:31.100
Well, a z-order is something
that we support fully.

00:35:31.100 --> 00:35:35.840
You can iterate the hierarchy just
by calling getFirst or lastSubView.

00:35:35.840 --> 00:35:38.380
You can walk forward or backward.

00:35:38.380 --> 00:35:43.360
And you can actually change the z-order
of controls on the fly and have it redraw

00:35:43.360 --> 00:35:45.940
properly just by calling HIViewSetZOrder.

00:35:45.970 --> 00:35:49.020
And you can send views
to the absolute back,

00:35:49.040 --> 00:35:52.490
to the absolute front,
or in front of or behind

00:35:52.490 --> 00:35:54.260
some other relative view.

00:35:54.260 --> 00:35:54.260
It's pretty cool.

00:35:57.900 --> 00:36:01.240
House event handling is a
little different in HIView,

00:36:01.350 --> 00:36:03.650
but not different in a bad way.

00:36:04.150 --> 00:36:06.600
In the past, you had to do a lot of work.

00:36:06.650 --> 00:36:10.040
Get the event, call findWindow,
figure out what the result was.

00:36:10.060 --> 00:36:12.660
Let's see, the result happened
to be in the contents.

00:36:12.740 --> 00:36:15.090
I'll call findControl and
do all this other stuff.

00:36:15.090 --> 00:36:17.330
And maybe I'm right, maybe I'm wrong.

00:36:17.490 --> 00:36:18.780
And maybe it was in the window.

00:36:18.780 --> 00:36:19.810
I'll call trackbox.

00:36:20.000 --> 00:36:21.700
There's all these different
ways of doing things.

00:36:21.700 --> 00:36:23.100
It's kind of a pain in the neck.

00:36:23.250 --> 00:36:28.860
And that was what our standard
handler was designed to

00:36:28.860 --> 00:36:28.860
kind of insulate you from.

00:36:29.040 --> 00:36:30.000
Now it's even easier.

00:36:30.000 --> 00:36:32.490
Basically, when you get an event,
it already has half the

00:36:32.570 --> 00:36:33.690
parameters you want.

00:36:33.770 --> 00:36:36.600
For one, if you get a mouse event,
it already has the window

00:36:36.790 --> 00:36:38.990
that the mouse event is for,
right in it.

00:36:38.990 --> 00:36:42.350
So all you need to do is extract that,
and I should also mention it also

00:36:42.440 --> 00:36:44.000
has the window mouse location.

00:36:44.000 --> 00:36:47.400
Once you get that from the window,
all you do is you just figure

00:36:47.460 --> 00:36:50.980
out which view to give it to,
and then you give it to the view.

00:36:51.010 --> 00:36:52.000
Very simple.

00:36:52.000 --> 00:36:55.000
And the other beauty is you don't have
to treat window widgets differently.

00:36:55.000 --> 00:36:56.890
This works for all widgets in a window.

00:36:56.930 --> 00:36:57.000
Period.

00:36:57.000 --> 00:37:00.710
So in the example that I showed
where we have all these widgets,

00:37:00.710 --> 00:37:04.910
and I clicked on the collapse box while
I was in the middle of the window,

00:37:05.020 --> 00:37:06.870
there's no find window going on.

00:37:07.070 --> 00:37:09.000
All it was was that I just
clicked on that view.

00:37:09.000 --> 00:37:09.980
I don't know what it does.

00:37:10.000 --> 00:37:10.940
I just clicked on it.

00:37:11.040 --> 00:37:14.290
And the view itself actually is
the one that sends out the events.

00:37:14.290 --> 00:37:16.950
It is actually the one that
handles all this stuff.

00:37:17.020 --> 00:37:21.850
When you click on the grow box,
that view calls resize window,

00:37:21.880 --> 00:37:23.970
much like you'd expect.

00:37:24.980 --> 00:37:28.320
So I mentioned these two new parameters:
keventparam_windowref and

00:37:28.320 --> 00:37:30.640
keventparam_window_mouse_location.

00:37:30.640 --> 00:37:36.710
These have actually existed since 10.1,
and you can use them back to 10.1,

00:37:36.710 --> 00:37:40.580
although the window mouse location
might be a little wonky in that release,

00:37:40.580 --> 00:37:41.900
something I just discovered.

00:37:41.900 --> 00:37:47.290
But you can find out the window easily
just by extracting it from the event.

00:37:47.920 --> 00:37:51.140
So we have a couple of event
APIs that I'd like to discuss.

00:37:51.230 --> 00:37:52.980
The first is called HIView.

00:37:53.130 --> 00:37:54.930
Get view from mouse event.

00:37:55.020 --> 00:37:56.560
Now...

00:37:56.940 --> 00:38:00.030
In the past what you would do is do
something like a find me the deep

00:38:00.100 --> 00:38:03.140
or shallow sub pane that was hit
and then I'll send the thing there.

00:38:03.140 --> 00:38:05.640
And we have a function like that
and I'll show it to you in a second.

00:38:05.770 --> 00:38:07.460
But this is the preferred
way to find out,

00:38:07.500 --> 00:38:09.640
for a mouse event, who should get it.

00:38:09.640 --> 00:38:13.410
And the reason that it's preferred
is that as it descends the hierarchy,

00:38:13.710 --> 00:38:16.370
trying to find the right
pane to give the event to,

00:38:16.370 --> 00:38:18.880
the parents have a
chance to override this.

00:38:18.880 --> 00:38:21.210
So you can actually stop and say, "No,
no, no.

00:38:21.300 --> 00:38:25.580
I'm going to handle all events for
my children." The toolbar uses this,

00:38:25.580 --> 00:38:26.430
for example.

00:38:26.570 --> 00:38:29.580
When you normally click into a toolbar,
the click goes right to the toolbar item.

00:38:29.590 --> 00:38:32.750
But if you hold down the command key,
the toolbar says, "Oh, no, no.

00:38:32.750 --> 00:38:35.810
I want that because I'm going to
configure." So that's a way for

00:38:35.890 --> 00:38:38.460
you to actually override what's
going to happen with that event.

00:38:38.460 --> 00:38:42.020
So you should always call get view
from mouse event as opposed to like

00:38:42.380 --> 00:38:44.720
some raw find me the sub pane call.

00:38:44.720 --> 00:38:47.710
In general, though,
you probably won't even need to do that.

00:38:48.020 --> 00:38:50.890
Once you have the target view,
all you do is just tell it to click.

00:38:50.900 --> 00:38:53.790
You say, "Here,
handle that." So I'm assuming

00:38:53.790 --> 00:38:56.660
here you have a mouse down,
but just pass it the click event,

00:38:56.760 --> 00:38:59.210
and it will then fork
into one of two events.

00:38:59.310 --> 00:39:03.130
It could either be a contextual menu
click or a regular control click,

00:39:03.130 --> 00:39:07.090
and that will get handled as expected
from the control point of view.

00:39:07.560 --> 00:39:12.450
Here's the low-level call,
HIView.getSubview.hit.

00:39:12.500 --> 00:39:15.850
It has a parameter to allow you
to either search deep or shallow.

00:39:15.900 --> 00:39:19.150
So you can find out just the shallow
one of your children that was hit,

00:39:19.160 --> 00:39:22.260
or maybe what the deepest
child of yourself was hit.

00:39:22.370 --> 00:39:26.060
The first parameter is actually the
root of where you want to start.

00:39:26.260 --> 00:39:30.090
Again, we always accept views,
we never accept windows.

00:39:31.410 --> 00:39:33.870
We also have an API called
HIView Simulate Click,

00:39:33.870 --> 00:39:35.740
and this is actually helpful
when you're dealing with keyboard

00:39:35.740 --> 00:39:38.350
navigation or accessibility.

00:39:38.460 --> 00:39:41.090
For example,
if you receive an accessibility event

00:39:41.110 --> 00:39:43.830
telling you to do a press action,
you could just call HIView

00:39:43.830 --> 00:39:45.400
Simulate Click on yourself.

00:39:45.400 --> 00:39:48.960
As long as you're just a
simple clickable control,

00:39:48.960 --> 00:39:50.390
it'll just work.

00:39:50.520 --> 00:39:52.400
And you can handle that in
special ways if you want.

00:39:52.400 --> 00:39:54.180
It's pretty cool.

00:39:55.030 --> 00:39:56.240
All right, so here's the basic thing.

00:39:56.280 --> 00:39:58.270
So we've gotten our event,
and we've determined the window.

00:39:58.420 --> 00:40:02.000
So all we do is we go, all right,
get me the root for the window.

00:40:02.110 --> 00:40:03.160
All right.

00:40:03.210 --> 00:40:04.910
Get me the view for the mouse event.

00:40:04.980 --> 00:40:05.760
Okay.

00:40:05.990 --> 00:40:06.720
Handle it.

00:40:06.900 --> 00:40:07.920
Three lines of code.

00:40:08.020 --> 00:40:09.330
So it couldn't get any easier.

00:40:09.330 --> 00:40:10.690
Well, it could.

00:40:10.690 --> 00:40:12.910
Just use a standard handler.

00:40:12.910 --> 00:40:12.910
Simple.

00:40:14.700 --> 00:41:59.000
[Transcript missing]

00:41:59.720 --> 00:42:03.200
One other thing I want to mention is that
if you have an existing control hierarchy

00:42:03.300 --> 00:42:10.050
that you try to bring into existence,
and they're all using the old bounds,

00:42:10.240 --> 00:42:13.730
you're going to find out that half
your stuff isn't going to be visible.

00:42:13.850 --> 00:42:17.660
And that's because your bounds need to
actually change to be parent relative,

00:42:17.660 --> 00:42:19.180
and they probably aren't.

00:42:20.940 --> 00:42:21.310
All right.

00:42:21.310 --> 00:42:22.740
So, where does your custom content live?

00:42:22.820 --> 00:42:26.280
I have this nifty view that I've created,
and I spent a lot of time on it.

00:42:26.290 --> 00:42:27.930
How do I make it work with HIView?

00:42:27.930 --> 00:42:31.260
Well, the answer is you need to
actually wrap it into an HIView.

00:42:31.380 --> 00:42:33.040
But it's actually not that hard.

00:42:33.050 --> 00:42:37.530
Most of the, if you actually look at some
of our classes for doing

00:42:37.530 --> 00:42:40.850
our view stuff internally,
they actually look like

00:42:40.850 --> 00:42:41.920
any other view system.

00:42:41.920 --> 00:42:44.590
And so you probably will find
an analog to something you're

00:42:44.670 --> 00:42:47.420
already calling or you have,
or a method you already have.

00:42:47.420 --> 00:42:50.190
And it's required to use,
to wrap your stuff in HIView because we

00:42:50.190 --> 00:42:52.030
want to maintain consistent behavior.

00:42:52.040 --> 00:42:53.880
You want to be properly composited.

00:42:54.040 --> 00:42:57.700
You want to play in this sandbox
here that we've just created.

00:42:57.730 --> 00:42:59.610
So it's kind of important.

00:43:01.270 --> 00:43:04.490
So,
much like creating any other HIVobject,

00:43:04.630 --> 00:43:08.260
as described in the last session,
the way to do this is you

00:43:08.470 --> 00:43:10.090
merely just register your class.

00:43:10.090 --> 00:43:12.980
You pass in your class ID,
tell it what view you're

00:43:12.980 --> 00:43:15.490
going to subclass,
or in this case we're just gonna

00:43:15.610 --> 00:43:18.280
subclass right from HIView,
and then you just fill in

00:43:18.410 --> 00:43:20.090
your events and you're off.

00:43:20.090 --> 00:43:25.090
And then you just create
it later with HIV,

00:43:25.090 --> 00:43:25.090
HIVobject create.

00:43:26.760 --> 00:43:30.340
So, typically,
you're going to want to handle

00:43:30.340 --> 00:43:32.190
the first two almost as a given.

00:43:32.200 --> 00:43:35.490
You need to handle hit
testing and you need to draw,

00:43:35.570 --> 00:43:38.400
unless you're just some
sort of container object.

00:43:38.660 --> 00:43:41.530
We also want to just touch on
region calculation a little bit.

00:43:41.600 --> 00:43:42.940
It's something we never
really talk about,

00:43:42.940 --> 00:43:45.850
about what the structure region of
a control means and drawing outside

00:43:45.850 --> 00:43:48.090
your bounds and all that fun stuff.

00:43:48.170 --> 00:43:50.090
And then I'm just going to
run through drag and drop.

00:43:50.100 --> 00:43:52.540
It's just something I pulled
out of a hat to talk about,

00:43:52.550 --> 00:43:54.370
'cause we never actually talk
about drag and drops in the

00:43:54.370 --> 00:43:56.580
context of controls ever,
really.

00:43:57.990 --> 00:44:00.200
So, simple hit testing.

00:44:00.300 --> 00:44:03.240
Now, you'll see what I have here
is actually a C++ method.

00:44:03.330 --> 00:44:07.700
And that is a method on a class
that I've installed that actually

00:44:07.700 --> 00:44:10.140
wraps up all the HI object stuff.

00:44:10.290 --> 00:44:14.190
So when I actually get a K event
control hit test Carbon event,

00:44:14.310 --> 00:44:17.000
I turn that into one of my methods here.

00:44:17.100 --> 00:44:19.260
And what I get is an HI point.

00:44:19.270 --> 00:44:23.150
So all I do is I assume that, you know,
I have no part was hit.

00:44:23.230 --> 00:44:25.010
I get my bounds,
and then I just see if the

00:44:25.120 --> 00:44:26.240
rectangle contains the point.

00:44:26.500 --> 00:44:29.240
Now, you'll notice I'm calling
CG_REC_CONTAINS_POINT.

00:44:29.320 --> 00:44:33.640
And that's because the CG rect is an
HI rect is a CG rect is an HI rect.

00:44:33.730 --> 00:44:34.890
Remember,
they're typed to have to be the same.

00:44:34.900 --> 00:44:41.040
So you can actually use the CG geometry
APIs on our rectangles without

00:44:41.080 --> 00:44:43.760
any casting or any funny business.

00:44:43.860 --> 00:44:46.850
And then if it is in the rectangle,
we just return it's in my control.

00:44:46.910 --> 00:44:49.990
And yes, I should be tracked or whatever.

00:44:51.460 --> 00:44:55.050
From the draw method,
we send you kEventControlDraw,

00:44:55.050 --> 00:44:58.270
much as we do today.

00:44:58.310 --> 00:45:01.060
It takes a couple of parameters.

00:45:02.510 --> 00:45:07.140
Now, if you've written a custom
control using Carbon events,

00:45:07.230 --> 00:45:09.630
you'll notice that there's
a parameter missing here.

00:45:09.820 --> 00:45:12.440
And that's the part code.

00:45:12.580 --> 00:45:16.140
We do not tell you what part to
draw when you're in composited.

00:45:16.260 --> 00:45:19.640
You tell us what part to draw
by invalidating some specific

00:45:19.650 --> 00:45:21.660
portion of your control.

00:45:21.810 --> 00:45:25.260
And what happens is,
when you get told to draw later,

00:45:25.310 --> 00:45:27.610
we will actually figure out, "All right,
he told us he wants to

00:45:27.640 --> 00:45:29.670
invalidate this portion,
and we will intersect

00:45:29.670 --> 00:45:31.980
that with his vis region,
and we know that this is all

00:45:31.980 --> 00:45:35.000
that needs to be drawn." And we
actually pass that to you,

00:45:35.000 --> 00:45:37.710
and we say, "This is all that needs to be
redrawn." And that gets passed

00:45:37.710 --> 00:45:39.000
into this draw region parameter.

00:45:39.340 --> 00:45:41.540
When you get that,
you can actually use it to figure out,

00:45:41.610 --> 00:45:43.700
or you can ignore it if you want to.

00:45:43.700 --> 00:45:44.650
You don't need to use it.

00:45:44.720 --> 00:45:47.070
But if you have a really
complex control and some content

00:45:47.070 --> 00:45:50.250
requires expensive rendering,
and it's not actually part of the

00:45:50.250 --> 00:45:52.910
region that needs to be redrawn,
you can detect that and say, oh,

00:45:52.910 --> 00:45:53.900
I don't need to bother.

00:45:53.930 --> 00:45:56.760
I'm just gonna draw this part and,
and get out.

00:45:56.760 --> 00:46:00.470
So that allows your control,
your view to be extremely

00:46:00.540 --> 00:46:02.960
efficient about what it draws.

00:46:02.960 --> 00:46:06.300
And that is effectively
the replacement for the

00:46:07.060 --> 00:46:09.430
The other thing is that
we pass you a CG context.

00:46:09.500 --> 00:46:13.890
This context has already been transformed
appropriately and all that fun stuff.

00:46:13.960 --> 00:46:17.680
You should not call beginCGContext
for port if you are going

00:46:17.680 --> 00:46:20.830
to do core graphics drawing.

00:46:20.850 --> 00:46:23.490
If you're going to do quick draw drawing,
just do quick draw drawing.

00:46:23.500 --> 00:46:25.980
If you're going to do CG drawing,
use this context.

00:46:26.000 --> 00:46:29.930
And this is very important as
we move towards having printing

00:46:29.930 --> 00:46:32.470
actually work again with our stuff.

00:46:33.080 --> 00:46:35.320
We want to have one single
context that we give to you.

00:46:35.320 --> 00:46:39.900
And, you know, whatever it happens to be,
you know, window, printed page, whatever,

00:46:39.900 --> 00:46:41.890
it'll just work.

00:46:43.700 --> 00:46:44.700
Here's my method.

00:46:44.770 --> 00:46:45.700
Draw.

00:46:45.770 --> 00:46:47.140
Again, I get the bounds.

00:46:47.200 --> 00:46:49.380
Remember, my local coordinate system.

00:46:49.470 --> 00:46:51.630
Get the bounds,
and all I do is I fill it,

00:46:51.630 --> 00:46:53.740
I set the fill color.

00:46:53.760 --> 00:46:54.700
Oh, that was nice.

00:46:54.700 --> 00:46:58.940
I set the fill color and
then I stroked the record.

00:46:59.260 --> 00:47:02.030
I set the fill color and then
I outline myself in black,

00:47:02.180 --> 00:47:03.060
apparently.

00:47:03.060 --> 00:47:04.960
So don't use it.

00:47:05.070 --> 00:47:05.710
It's an example.

00:47:05.800 --> 00:47:06.260
Come on.

00:47:06.390 --> 00:47:10.010
Anyways, use your imagination.

00:47:10.970 --> 00:47:12.840
So yeah, so all we do is we just
set the color and we,

00:47:12.840 --> 00:47:14.000
and we outline a rectangle.

00:47:14.000 --> 00:47:17.080
But the important thing is here,
I haven't checked for visibility.

00:47:17.130 --> 00:47:20.080
I haven't intersected myself with
my vis region or done all this,

00:47:20.170 --> 00:47:22.030
all the clipping or anything.

00:47:22.290 --> 00:47:26.140
And in fact, I haven't even, like,
saved the context, restored the context.

00:47:26.140 --> 00:47:27.400
You don't have to do anything.

00:47:27.400 --> 00:47:30.230
When you get told to draw,
there's only one thing you should do.

00:47:30.340 --> 00:47:31.180
Draw.

00:47:31.250 --> 00:47:32.580
Right.

00:47:32.580 --> 00:47:34.770
So you don't need to save the context.

00:47:35.010 --> 00:47:36.200
You don't need to restore the context.

00:47:36.200 --> 00:47:37.220
We've done that for you.

00:47:37.250 --> 00:47:41.020
Call save, CG,
CG context save or whatever it is.

00:47:41.140 --> 00:47:44.110
Save G state before we call you,
expecting that you're probably

00:47:44.240 --> 00:47:46.540
gonna just trash it and stuff
and do all types of fun,

00:47:46.540 --> 00:47:47.810
neat stuff,
and then we'll just restore it

00:47:47.820 --> 00:47:50.440
and then we'll move on to the
next pane that we need to draw.

00:47:50.440 --> 00:47:53.270
So you can just get in there
and just do your drawing.

00:47:53.270 --> 00:47:54.410
Very easy.

00:47:54.580 --> 00:47:57.390
And it's also important that
if you're in other methods in

00:47:57.560 --> 00:48:01.990
your view and you want to draw,
that you don't draw.

00:48:02.140 --> 00:48:03.680
Don't call your draw method directly.

00:48:03.800 --> 00:48:05.250
Don't call draw control.

00:48:05.330 --> 00:48:07.550
Just invalidate yourself.

00:48:11.320 --> 00:48:15.040
Regions are kind of an
interesting little topic,

00:48:15.110 --> 00:48:19.700
and I'll tell you why.

00:48:22.910 --> 00:48:27.230
If you ever notice,
we tend to draw outside our bounds a lot.

00:48:27.270 --> 00:48:32.300
We like to draw outside the lines.

00:48:32.300 --> 00:48:32.300
And the reason is,

00:48:34.250 --> 00:48:37.390
kind of history,
but also the ability to make

00:48:37.390 --> 00:48:39.670
sure that a button never actually
changes its real metrics,

00:48:39.670 --> 00:48:42.100
and its real metrics
might be how tall it is.

00:48:42.190 --> 00:48:44.400
So, for example,
the push buttons are 20 pixels tall

00:48:44.400 --> 00:48:46.880
or whatever they're supposed to be,
and they draw-- but they draw

00:48:46.880 --> 00:48:48.900
the shadow outside those bounds.

00:48:49.050 --> 00:48:52.010
So the way we do that is we actually
determine a structure region,

00:48:52.010 --> 00:48:54.660
which is really-- we
call it structure region,

00:48:54.660 --> 00:48:57.930
but what it really is is drawable extent.

00:48:58.060 --> 00:49:01.780
And your view can choose
to support this or not.

00:49:02.960 --> 00:49:04.630
And we also have this
concept of the opaque region,

00:49:04.750 --> 00:49:08.400
which tells us which areas
of your view are opaque.

00:49:08.400 --> 00:49:10.510
I'm gonna talk about
each one of these now.

00:49:10.850 --> 00:49:14.700
So like I said,
Struct region allows you to actually

00:49:14.700 --> 00:49:15.940
do drawing outside your bounds.

00:49:15.940 --> 00:49:20.930
So if you are going to do that,
you must intercept this, uh...

00:49:21.100 --> 00:49:27.200
[Transcript missing]

00:49:27.300 --> 00:49:37.600
[Transcript missing]

00:49:38.080 --> 00:49:39.700
So, but if you want to do
things like focusing,

00:49:39.700 --> 00:49:42.990
you may want to draw outside your bounds,
you may want to support this.

00:49:43.000 --> 00:49:46.560
And then later,
if you need to actually reshape yourself,

00:49:46.710 --> 00:49:50.000
let's say you've got focus and now you
need to extend your structure region,

00:49:50.000 --> 00:49:53.340
or maybe you lost focus and now you
want to shrink it up a little bit,

00:49:53.550 --> 00:49:57.000
you can call this new API called
HIView Reshape Structure.

00:49:57.000 --> 00:50:00.360
This will actually allow you to,
we will actually re-query

00:50:00.360 --> 00:50:03.000
you for your new structure,
and then we will invalidate

00:50:03.000 --> 00:50:03.990
and repaint as necessary.

00:50:04.000 --> 00:50:09.350
So I lied,
there's another case where we invalidate.

00:50:11.220 --> 00:50:14.750
The opaque region is
important for efficiency.

00:50:14.870 --> 00:50:17.600
If you have truly opaque
areas of your view,

00:50:17.710 --> 00:50:19.160
you should define them to us.

00:50:19.290 --> 00:50:22.070
Otherwise,
we will do a lot of unnecessary drawing.

00:50:22.200 --> 00:50:24.440
Let's consider that I'm a picture view.

00:50:24.540 --> 00:50:28.440
And I'm going to draw my picture.

00:50:28.450 --> 00:50:30.600
And it's just a rectangular thing,
and it's always opaque.

00:50:30.600 --> 00:50:33.300
Let's just assume that
it's a rectangular thing.

00:50:33.420 --> 00:50:37.160
So I'm going to put one of these picture
views in the content of my window.

00:50:37.270 --> 00:50:40.600
And I make it completely obscure,
the content view.

00:50:40.810 --> 00:50:45.930
Well, if you define-- if you don't
actually support this specific

00:50:45.930 --> 00:50:51.200
selector for the getRegion thing,
getRegionEvent,

00:50:51.200 --> 00:50:53.190
what's going to happen is we're
going to think you're transparent.

00:50:53.290 --> 00:50:55.200
And so we're going to
think you need compositing.

00:50:55.290 --> 00:50:58.190
So when we actually draw the window,
we are going to paint the contents.

00:50:58.200 --> 00:51:00.350
We'll paint all the stripes
or white or whatever the

00:51:00.350 --> 00:51:03.200
background of the content is,
and then we will draw your picture.

00:51:03.200 --> 00:51:08.200
So that goes against our goal of
drawing all these opaque pixels once.

00:51:08.210 --> 00:51:11.260
So it's really important to
define your opaque regions

00:51:11.260 --> 00:51:13.200
if you're implementing views.

00:51:13.200 --> 00:51:15.200
And like I said,
if you don't actually respond to this,

00:51:15.200 --> 00:51:17.200
we're going to think you're transparent.

00:51:21.730 --> 00:51:25.600
Out of a hat, I picked drag-and-drop,
only because it's mildly interesting.

00:51:25.740 --> 00:51:27.960
But it's fully supported
in this view system,

00:51:27.960 --> 00:51:30.590
and in a very hierarchical manner.

00:51:30.690 --> 00:51:33.220
And we support the four big
Carbon events that you would expect:

00:51:33.310 --> 00:51:35.600
enter, within, leave, and receive.

00:51:35.620 --> 00:51:38.060
The other reason I wanted to talk
about drag-and-drop is simply

00:51:38.250 --> 00:51:40.600
because these Carbon events
weren't exported until Jaguar.

00:51:40.600 --> 00:51:42.910
It didn't exist.

00:51:44.450 --> 00:51:46.660
So, at present,
you need to actually turn on drag

00:51:46.770 --> 00:51:51.210
support for the window by calling
setAutomaticControlDragTracking.

00:51:51.510 --> 00:51:52.390
Enable for Window.

00:51:52.390 --> 00:51:53.670
Anyways, run along.

00:51:53.670 --> 00:51:58.180
And hopefully we'll get to a stage
where we don't actually need to do that.

00:52:00.590 --> 00:52:01.500
Now here's the deal.

00:52:01.600 --> 00:52:02.800
We try to be efficient.

00:52:02.950 --> 00:52:06.750
So if we are dragging onto a view
and the view doesn't want the drag,

00:52:06.760 --> 00:52:07.660
you should tell us.

00:52:07.750 --> 00:52:10.820
Don't say, "Oh, I might want it." No,
just tell us yes or no.

00:52:11.080 --> 00:52:12.400
Do you want it or do you not want it?

00:52:12.450 --> 00:52:13.540
Make up your mind.

00:52:13.670 --> 00:52:14.500
Be decisive.

00:52:14.580 --> 00:52:16.870
So if you don't want it, though,
we won't actually bother you anymore.

00:52:17.020 --> 00:52:19.570
We won't give you within messages,
we won't tell you leave,

00:52:19.570 --> 00:52:21.500
and you can't be the
receptor of the drag.

00:52:21.610 --> 00:52:24.610
That just allows us to be
efficient with who we're telling,

00:52:24.610 --> 00:52:27.310
you know,
who we're talking to about the drag.

00:52:27.870 --> 00:52:31.800
And if you might want to drag, maybe,
you should return nowhere and say, yeah,

00:52:31.800 --> 00:52:33.670
all right,
I might like something in here.

00:52:33.800 --> 00:52:37.410
For example, the toolbar,
when you drag over it,

00:52:37.540 --> 00:52:38.520
you drag and you hover.

00:52:38.590 --> 00:52:40.140
And at first, it's like, no,
I don't want to drag,

00:52:40.140 --> 00:52:41.150
I don't want to drag,
I don't want to drag.

00:52:41.270 --> 00:52:43.680
Finally, you know, time passes by,
you go, oh, okay,

00:52:43.680 --> 00:52:45.930
and then it takes the drag.

00:52:46.040 --> 00:52:48.060
That's a case where it might
actually want it later.

00:52:48.060 --> 00:52:52.080
So we actually do say, yes,
we want to be -- we want

00:52:52.190 --> 00:52:53.660
to play this drag game.

00:52:53.660 --> 00:52:57.300
And then later on,
we actually really accept the drag.

00:52:59.020 --> 00:53:01.340
The other interesting little
bit about this is just,

00:53:01.430 --> 00:53:03.410
you know, it kind of works as you expect.

00:53:03.570 --> 00:53:05.790
The innermost focus view
always gets the within events.

00:53:05.810 --> 00:53:07.900
Well, maybe this isn't what you expect.

00:53:08.280 --> 00:53:10.650
Views along the way do
not get within events.

00:53:10.750 --> 00:53:13.090
Only the target,
the current target of the drag

00:53:13.090 --> 00:53:14.740
will receive within events.

00:53:14.840 --> 00:53:17.790
And then once it leaves,
then its container will get the within

00:53:17.790 --> 00:53:19.690
events and so on and so on and so on.

00:53:20.800 --> 00:53:23.390
And obviously the innermost
target is the drop.

00:53:23.470 --> 00:53:25.090
Location.

00:53:25.200 --> 00:53:26.100
All right.

00:53:26.250 --> 00:53:26.670
Where are we?

00:53:26.790 --> 00:53:27.470
Oh, demo.

00:53:27.500 --> 00:53:27.820
Good.

00:53:28.100 --> 00:53:28.400
All right.

00:53:28.490 --> 00:53:32.730
It's not much of a demo, but hey,
I can't compete with my last one.

00:53:33.460 --> 00:53:35.440
Basically, all I want to take you
through is some code,

00:53:35.630 --> 00:53:43.020
some code that's been wrapped in a view,
in a TView wrapper.

00:53:43.400 --> 00:53:45.560
Unfortunately, I have to go dig.

00:53:45.590 --> 00:53:49.920
Bear with me.

00:53:57.580 --> 00:54:03.460
Basically, I just want to show you how
we write views in the toolbox.

00:54:03.460 --> 00:54:11.100
Now, keep in mind that up until Jaguar,
we were not using C++ for our views.

00:54:11.100 --> 00:54:14.100
We were very lucky if we
were using C++ for our views.

00:54:14.100 --> 00:54:17.700
And before that,
we couldn't because of all the

00:54:17.700 --> 00:54:20.540
problems inherent in pre-Mac OS X.

00:54:20.810 --> 00:54:26.360
So now, we actually have our own class.

00:54:26.370 --> 00:54:26.370
Now, our class is actually called HIView,
but it's not a class that

00:54:26.370 --> 00:54:26.370
we're going to be using.

00:54:26.690 --> 00:54:29.090
Here we're going to show
a class called Tview.

00:54:29.170 --> 00:54:32.420
And this isn't much of a technology
demonstration as it is just an example

00:54:32.420 --> 00:54:36.130
of how you can actually use this.

00:54:37.890 --> 00:54:42.230
So anyways,
this class I just want to say is very,

00:54:42.230 --> 00:54:45.310
very, very, very, very, very, very, very,
very,

00:54:45.310 --> 00:54:47.060
very much like the one we use internally.

00:54:47.180 --> 00:54:48.990
It's almost identical.

00:54:49.790 --> 00:54:51.660
just doesn't do as much stuff.

00:54:51.770 --> 00:54:55.820
But, as you can see, you know,
we have a few public methods,

00:54:55.820 --> 00:54:56.770
which we do here.

00:54:56.870 --> 00:54:59.980
But here's all the interesting stuff,
which I have in my protected section.

00:55:00.060 --> 00:55:02.310
And here's examples where
we do things like draw,

00:55:02.480 --> 00:55:05.430
hit test, we get the region,
we can get and set data, you know,

00:55:05.430 --> 00:55:07.830
when get control data is
called and stuff like that,

00:55:07.910 --> 00:55:08.930
we handle that here.

00:55:09.040 --> 00:55:10.640
There are things called size constraints.

00:55:10.640 --> 00:55:13.660
And let me actually show you an example
of size constraints for a second.

00:55:13.660 --> 00:55:17.730
And how they can be used.

00:55:19.300 --> 00:55:19.890
Okay.

00:55:19.960 --> 00:55:21.200
Scroll view.

00:55:21.200 --> 00:55:24.680
I mentioned that when it resizes, it,
you know, it hides the scroll bars.

00:55:24.770 --> 00:55:25.760
Well, that's great.

00:55:25.760 --> 00:55:28.640
But notice that the window also
pins to the maximum size there.

00:55:28.640 --> 00:55:31.290
And it does that by knowing
the constraints of the control.

00:55:31.330 --> 00:55:34.500
It knows that it has a
minimum and a maximum size.

00:55:34.500 --> 00:55:36.040
So in this case,
the maximum size is the maximum

00:55:36.040 --> 00:55:37.810
size of the scroll view.

00:55:37.830 --> 00:55:42.330
So the scroll view, you know,
basically when the window gets resized,

00:55:42.420 --> 00:55:43.510
it's going to be

00:55:44.190 --> 00:55:46.630
The window,
the code that intercepts that says,

00:55:46.650 --> 00:55:50.430
all right, well, hey, scroll view,
what's your maximum size?

00:55:50.520 --> 00:55:51.100
And it says, oh, I'm this big.

00:55:51.100 --> 00:55:53.390
But in order for the
scroll view to get that,

00:55:53.390 --> 00:55:55.130
it actually asks the image view,
what's your maximum size?

00:55:55.130 --> 00:55:57.600
And it would theoretically keep
asking until finally it goes,

00:55:57.610 --> 00:55:59.550
all right,
I know exactly how big I should be.

00:55:59.560 --> 00:56:01.180
And that's how we do this.

00:56:01.180 --> 00:56:04.820
So in this specific example,
what we're doing is we're actually

00:56:04.820 --> 00:56:08.570
intercepting the window events for,
what is it, k event window,

00:56:08.580 --> 00:56:10.610
get minimum and maximum size.

00:56:10.610 --> 00:56:12.640
So whenever resize window is called,
for example,

00:56:12.640 --> 00:56:14.070
these Carbon events get sent out.

00:56:14.100 --> 00:56:16.780
And all I've done in this
example is I handle them,

00:56:16.950 --> 00:56:20.420
and then I ask the main scroll view
for its maximum size and return that.

00:56:20.490 --> 00:56:22.140
And we automatically know
how to do this stuff.

00:56:22.140 --> 00:56:26.470
I also wanted to point out,
because I forgot to mention it earlier,

00:56:26.520 --> 00:56:33.180
that while we are resizing here,
you notice you really don't see any, uh,

00:56:33.900 --> 00:56:46.600
[Transcript missing]

00:56:47.080 --> 00:57:10.480
The window will resize
and paint immediately,

00:57:10.480 --> 00:57:10.480
but you haven't actually
moved any of your views yet.

00:57:10.480 --> 00:57:10.480
So when you get the balance change event,
then you would move them,

00:57:10.480 --> 00:57:10.480
and then you see this lagging behind
where the window stretches and

00:57:10.480 --> 00:57:10.480
then the content finally paints.

00:57:10.480 --> 00:57:10.480
So it's actually really important to
listen to balance change events at the

00:57:10.480 --> 00:57:10.480
view level and not at the window level.

00:57:10.480 --> 00:57:10.480
And that's what I've
done in this example.

00:57:13.390 --> 00:57:16.500
So here we are, back in our little class.

00:57:16.600 --> 00:57:19.090
So as you can see,
we do things like get size, get rates,

00:57:19.240 --> 00:57:20.160
get optimal size.

00:57:20.270 --> 00:57:22.250
That's the equivalent to
get best control rect.

00:57:22.290 --> 00:57:26.300
We can find our window ref.

00:57:26.300 --> 00:57:30.300
We also support being able to subclass,
register subclass.

00:57:30.300 --> 00:57:33.300
We do a little fancy C++
stuff there to do that.

00:57:33.300 --> 00:57:35.410
Our drag and drop protocol at the bottom.

00:57:35.410 --> 00:57:38.210
Basically, it's pretty full featured.

00:57:38.230 --> 00:57:41.760
We even have command processing
and all that fun stuff.

00:57:41.930 --> 00:57:43.280
And at the very bottom, we have a class.

00:57:43.300 --> 00:57:47.770
And the class handler is where we
intercept our actual Carbon events.

00:57:47.770 --> 00:57:50.300
And we call it a virtual
method here called handleEvent.

00:57:50.300 --> 00:57:53.740
And I kind of talked about this
a little bit in the last session.

00:57:53.740 --> 00:57:57.900
Let's just look at some of my ugly code.

00:57:59.010 --> 00:58:04.780
So here's the actual
Carbon events that we listened to.

00:58:04.940 --> 00:58:07.630
As you can see,
the top three are the HIObject protocol.

00:58:07.710 --> 00:58:13.280
The rest of it's all commands
and then control stuff.

00:58:19.100 --> 00:58:24.440
Now, let me scoot down to the
actual event handler just to

00:58:24.440 --> 00:58:26.520
show you a couple of things.

00:58:29.700 --> 00:58:33.200
Okay, so here's our event handler,
and this is for the class.

00:58:33.270 --> 00:58:36.530
And the class handles construct,
initialize, and destruct.

00:58:36.560 --> 00:58:38.080
And...

00:58:38.520 --> 00:58:41.140
As I described in the last session,
you're called in a specific order

00:58:41.140 --> 00:58:43.750
and there's all this fun stuff that
goes on to be able to create this.

00:58:43.920 --> 00:58:46.440
But what we do here that's
kind of interesting is when

00:58:46.440 --> 00:58:51.020
we get called to construct,
whenever we register a subclass

00:58:51.020 --> 00:58:55.860
with this specific C++ class,
we actually pass a static method of

00:58:55.860 --> 00:59:00.160
whatever your subclass is so that
you can be called later to construct.

00:59:00.260 --> 00:59:04.290
So we actually pass that in to the
register-- HIObjectRegister subclass.

00:59:04.400 --> 00:59:06.890
So when we get called to construct,
we get past that static

00:59:06.900 --> 00:59:08.540
constructing in the user data.

00:59:08.570 --> 00:59:11.770
And as you can see, I actually use--

00:59:13.990 --> 00:59:17.980
I just cast the user data into my
construct proc and just call it.

00:59:17.980 --> 00:59:21.010
And then I get my view back
and I stuff it back into the

00:59:21.010 --> 00:59:23.140
Carbon event and we're created.

00:59:23.280 --> 00:59:26.160
Then I have my virtual
method here to initialize,

00:59:26.160 --> 00:59:28.490
and then to delete, I just delete.

00:59:28.490 --> 00:59:32.100
Now, all the HI object stuff,
all the Carbon event stuff is

00:59:32.100 --> 00:59:34.000
all wrapped into this class.

00:59:34.000 --> 00:59:37.300
I don't need to do it anymore,
unless it's very special

00:59:37.300 --> 00:59:38.570
cases or whatever.

00:59:38.680 --> 00:59:42.450
I can actually now derive
a full C++ view hierarchy.

00:59:45.480 --> 00:59:47.410
Ed Voas: From this class if I wanted to.

00:59:47.410 --> 00:59:50.650
So you can actually hide all of the
HI object and Carbon event stuff if

00:59:50.650 --> 00:59:53.720
you wanted to and go C++ from there,
while still maintaining all

00:59:53.720 --> 00:59:56.480
of the benefits of being
an HI object and an HIView.

00:59:58.250 --> 01:00:01.490
Ed Voas: So essentially you can program
in whichever language you want.

01:00:03.380 --> 01:00:18.270
And I mentioned we call handleEvent.

01:00:18.270 --> 01:00:18.270
And handleEvent is a virtual method here.

01:00:18.270 --> 01:00:18.270
And here's where we do all the stuff.

01:00:18.270 --> 01:00:18.270
And basically,
this is where we unpack our

01:00:18.270 --> 01:00:18.270
events and end up calling
virtual methods on our class.

01:00:18.270 --> 01:00:18.270
Pretty straightforward.

01:00:18.270 --> 01:00:18.270
Not very exciting.

01:00:22.120 --> 01:00:22.970
Thrilling, huh?

01:00:23.060 --> 01:00:24.400
Okay.

01:00:24.450 --> 01:00:29.680
Let's just look at a
simple thing I wrote,

01:00:29.750 --> 01:00:31.540
which is a subclass of this.

01:00:31.640 --> 01:00:33.400
It's called TScrollableView.

01:00:33.410 --> 01:00:37.460
And it's just this simple little
view that follows a scrollable

01:00:37.620 --> 01:00:39.790
protocol and draws a picture.

01:00:40.140 --> 01:00:44.100
So, as you can see, it's a C++ class,
it's T-scrollable view,

01:00:44.190 --> 01:00:45.680
does all this fun stuff.

01:00:45.750 --> 01:00:50.560
Here's where we actually register
our subclass using our Tview method,

01:00:50.560 --> 01:00:52.600
static method, actually.

01:00:53.260 --> 01:00:55.030
And here's what we draw.

01:00:55.090 --> 01:00:57.340
It's this fancy,
bazier stuff that I stole

01:00:57.340 --> 01:01:00.100
from somebody because I'm not
smart enough to do this stuff.

01:01:00.140 --> 01:01:02.600
So anyways, here we have hit testing.

01:01:02.640 --> 01:01:04.100
And here's our static constructor.

01:01:04.100 --> 01:01:07.070
I mentioned that what we do
is we actually have a static

01:01:07.120 --> 01:01:11.590
constructor for subclasses that
we actually just pass in and

01:01:11.900 --> 01:01:15.530
and when the construct event gets called,
we actually just get called

01:01:15.530 --> 01:01:18.720
right here on our construct,
and we create a new T-scrollable view,

01:01:18.720 --> 01:01:20.600
and we just return that.

01:01:29.310 --> 01:01:29.440
And here's our size constraints.

01:01:29.440 --> 01:01:29.710
In our case, we have this virtual bounds,
because I'm trying to play

01:01:29.710 --> 01:01:29.920
with the scrollable protocol.

01:01:30.000 --> 01:01:31.300
And here I have the event handler.

01:01:31.300 --> 01:01:35.340
Now I don't actually have the scrollable
protocol implemented in the base class.

01:01:35.520 --> 01:01:37.300
I'm actually doing
Carbon event stuff here.

01:01:37.300 --> 01:01:41.440
But the interesting thing
is that all we're doing,

01:01:41.440 --> 01:01:42.910
oh, no, I lied.

01:01:43.010 --> 01:01:45.300
It wasn't that interesting.

01:01:45.310 --> 01:01:48.300
But one of the things that
I could do is add a protocol.

01:01:48.300 --> 01:01:52.630
And I just want to go back to TView
for a second to show you something.

01:01:55.640 --> 01:01:58.500
You can use Carbon events in certain ways
so you can define interfaces like this.

01:01:58.540 --> 01:02:01.440
We have drag and drop interfaces
or keyboard focus interface.

01:02:01.440 --> 01:02:07.740
And what you can do is you
can activate these interfaces.

01:02:07.790 --> 01:02:10.190
Let me show you that just briefly.

01:02:14.390 --> 01:02:16.850
So here's a case where we have, you know,
some derived class wants

01:02:16.850 --> 01:02:17.700
to activate an interface.

01:02:17.700 --> 01:02:20.190
And the reason it's not active by
default is we don't want to start

01:02:20.200 --> 01:02:23.700
intercepting all these events
if nobody needs to deal with it.

01:02:23.800 --> 01:02:27.280
So instead, we can choose to actually
activate a certain set of virtual

01:02:27.280 --> 01:02:31.880
methods in our base class just by
implementing something like this.

01:02:31.980 --> 01:02:37.200
But the basic precept here is that
you call addEventTypesToHandler.

01:02:37.200 --> 01:02:41.620
This means that you can,
at any time from any subclass, in theory,

01:02:41.620 --> 01:02:46.010
add events types to your event handler
and just intercept them in certain ways.

01:02:46.110 --> 01:02:50.010
We're going to make all of
this class available to you.

01:02:50.110 --> 01:02:52.520
We're going to put it on the CD,
and you guys can peruse it and

01:02:52.520 --> 01:02:53.730
see how to play with this stuff.

01:02:53.740 --> 01:02:57.180
You might even figure out how to map
it to any existing framework that you

01:02:57.180 --> 01:03:01.780
might have so you can actually start
to integrate HIView into your stuff.

01:03:02.410 --> 01:03:04.940
But my scrollable view,
we also handle the

01:03:04.940 --> 01:03:06.290
scrollable protocol again.

01:03:06.290 --> 01:03:10.170
It's mentioned in the,
I won't go into it here, but

01:03:10.430 --> 01:03:12.440
Yes,
it's supposed to have a constant there,

01:03:12.440 --> 01:03:15.290
but that's where I figure
in my opaque region,

01:03:15.290 --> 01:03:19.340
and we just make it our bounds,
basically.

01:03:19.340 --> 01:03:21.490
So let me just run this.

01:03:28.110 --> 01:03:29.090
or not.

01:03:29.090 --> 01:03:29.630
You know what?

01:03:29.680 --> 01:03:30.640
I'm not going to run it.

01:03:30.640 --> 01:03:32.600
Well, I'm not going to build it.

01:03:32.600 --> 01:03:34.370
I'm just going to run it.

01:03:34.370 --> 01:03:34.370
All right.

01:03:34.700 --> 01:03:49.500
[Transcript missing]

01:03:50.410 --> 01:04:06.640
And there it is.

01:04:06.640 --> 01:04:06.640
And it scrolls, albeit strangely.

01:04:06.640 --> 01:04:06.640
But, and there's that complicated
math that I don't understand.

01:04:06.640 --> 01:04:06.640
It looks good.

01:04:06.640 --> 01:04:06.640
Anyways, my point with this whole demo
is just simply that it's really,

01:04:06.640 --> 01:04:06.640
really easy to end up writing in HIView.

01:04:06.640 --> 01:04:06.650
And,

01:04:07.880 --> 01:04:09.440
You don't have to necessarily use C.

01:04:09.440 --> 01:04:10.290
You can use C++.

01:04:10.370 --> 01:04:11.580
You can use anything you want.

01:04:11.740 --> 01:04:15.880
And you can actually kind of push a
lot of the Carbon event stuff down

01:04:15.990 --> 01:04:20.680
into some common base class and
do a lot of neat stuff from there.

01:04:20.770 --> 01:04:24.320
It also provides you kind of a
way to kind of figure out that,

01:04:24.460 --> 01:04:25.230
oh, you know what?

01:04:25.230 --> 01:04:26.960
This class is really a lot like my class.

01:04:26.960 --> 01:04:30.020
That means I could probably derive
my base view in such a way that

01:04:30.020 --> 01:04:32.180
it just works with the HIObject.

01:04:32.180 --> 01:04:35.020
And then you can just have, oof,
and then, you know,

01:04:35.020 --> 01:04:38.530
immediately your view system is
working as an HIObject or an HIView.

01:04:38.530 --> 01:04:39.860
That's really cool.

01:04:39.890 --> 01:04:41.340
So here's the deal.

01:04:41.340 --> 01:04:45.040
HIView,
one huge step forward for the HIToolbox.

01:04:45.040 --> 01:04:49.190
This is by far one of the
coolest things we've ever done.

01:04:49.350 --> 01:04:50.650
And it's finally here.

01:04:50.720 --> 01:04:53.970
And this has been something that
we have been working on for years.

01:04:54.030 --> 01:04:57.330
I mean, maybe not HIView specifically,
but we've been trying to put

01:04:57.330 --> 01:04:59.320
all of the foundation in place.

01:04:59.320 --> 01:05:02.790
Carbon events, HIObject, now HIView.

01:05:02.900 --> 01:05:05.390
Jaguar is the beginning
of a brand-new toolbox.

01:05:05.480 --> 01:05:08.590
I mean, a toolbox.

01:05:08.870 --> 01:05:10.840
It's grown in ways that are just amazing.

01:05:10.840 --> 01:05:14.930
And now we're at a stage where we can do
all types of cool stuff quicker than we

01:05:14.930 --> 01:05:16.890
ever have been able to do in the past.

01:05:16.980 --> 01:05:19.620
Just that simple window
frame thing before.

01:05:19.620 --> 01:05:21.740
People said, it would be nice if we could
change the window frame on the fly.

01:05:21.740 --> 01:05:24.040
And we're like, yeah, well, that's hard.

01:05:24.040 --> 01:05:24.520
I don't know.

01:05:24.520 --> 01:05:26.720
But now we can just do it.

01:05:26.780 --> 01:05:28.470
All this stuff is easy.

01:05:28.480 --> 01:05:32.100
And the more that you guys actually
start to play with this stuff and use it,

01:05:32.100 --> 01:05:34.180
you're going to realize the same thing.

01:05:34.180 --> 01:05:36.380
You're going to be like, wow,
this stuff is really cool.

01:05:36.380 --> 01:05:38.320
So our future is clear.

01:05:38.620 --> 01:05:41.280
Carbon events, HI object, HI view.

01:05:41.300 --> 01:05:43.620
Now, the deal...

01:05:44.990 --> 01:05:47.830
Well, you might notice that one of
those doesn't start with "hi,"

01:05:47.960 --> 01:05:52.560
but I was this close one day.

01:05:53.180 --> 01:05:57.420
And I really want you to start
to look at the WWDC seed.

01:05:57.480 --> 01:05:59.260
And you might find a lot of the
bugs that I fixed for my demo.

01:05:59.480 --> 01:06:02.690
But anyways,
you can at least start looking

01:06:02.690 --> 01:06:05.240
at the headers and see the
types of APIs that we provide.

01:06:05.240 --> 01:06:07.500
Maybe there's something that's not
there that you absolutely need.

01:06:07.640 --> 01:06:11.000
It's imperative that you tell
us this as quickly as possible,

01:06:11.450 --> 01:06:16.250
because we are trying to wrap up what
we're doing here and get everything

01:06:16.250 --> 01:06:18.620
qualified and working great.

01:06:18.710 --> 01:06:22.580
So in terms of APIs, we're trying to lock
them down at this point.

01:06:22.580 --> 01:06:26.370
So please try to get us your
feedback as quickly as possible.

01:06:26.780 --> 01:06:27.700
Okay, roadmap.

01:06:27.700 --> 01:06:29.000
New controls and services.

01:06:29.170 --> 01:06:32.020
This is a session so
packed with information,

01:06:32.020 --> 01:06:33.450
we don't have any demos in it.

01:06:33.520 --> 01:06:34.220
I'm sorry.

01:06:34.380 --> 01:06:37.800
You just have to listen to Guy drone on
and on about new controls and services.

01:06:38.040 --> 01:06:39.660
But we have a lot of cool stuff.

01:06:39.710 --> 01:06:40.820
He's going to go into the toolbar.

01:06:40.910 --> 01:06:42.240
He's going to tell you
how to use a toolbar,

01:06:42.240 --> 01:06:45.260
how to add it to your window,
how you can add items to it,

01:06:45.370 --> 01:06:46.320
all of that fun stuff.

01:06:46.420 --> 01:06:48.470
He's going to talk about drawers,
how to use those.

01:06:48.550 --> 01:06:51.040
He's going to talk about how
to hook into the service menu.

01:06:51.100 --> 01:06:54.740
And there's just a lot of new stuff
to talk about in that session.

01:06:54.740 --> 01:06:56.200
It's going to be great.

01:06:56.270 --> 01:06:58.710
And after that,
we have improving performance

01:06:58.710 --> 01:06:59.960
with Carbon events.

01:06:59.990 --> 01:07:01.760
Maybe you've just gotten
onto Carbon events,

01:07:01.850 --> 01:07:05.100
now you want to know how to
tune your application just so.

01:07:05.140 --> 01:07:06.960
And what's the most efficient
way of doing things.

01:07:07.040 --> 01:07:08.530
This session will tell you how.

01:07:08.590 --> 01:07:10.790
It will also have things that
aren't part of Carbon events,

01:07:10.940 --> 01:07:13.840
ways of making your
application even faster.

01:07:14.170 --> 01:07:16.180
And then tomorrow,
you can tell us what you think.

01:07:16.420 --> 01:07:17.700
Hopefully they're good things.

01:07:17.760 --> 01:07:23.180
And it's at 10:30 in Room J1 tomorrow.

01:07:23.210 --> 01:07:25.700
I'd like to see you there.

01:07:25.760 --> 01:07:32.100
For any technical questions or concerns,
you can contact Xavier.

01:07:32.100 --> 01:07:34.600
And we have preliminary
documentation for this stuff.

01:07:34.600 --> 01:07:38.490
I believe it's on the website
and all that fun stuff.