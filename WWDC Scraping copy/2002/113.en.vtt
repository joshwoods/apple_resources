WEBVTT

00:00:10.300 --> 00:00:13.580
Good morning, I'm Craig Keithley,
I'm Apple's USB security

00:00:13.580 --> 00:00:16.190
cryptography evangelist.

00:00:16.410 --> 00:00:19.990
Today we're going to talk about
CDSA and Secure Transport.

00:00:21.420 --> 00:00:25.950
One of the challenges faced with moving
to a new operating system is what sort

00:00:25.950 --> 00:00:28.140
of security infrastructure we provide.

00:00:28.300 --> 00:00:32.580
And in the case of Mac OS X,
we looked around and we found that

00:00:32.580 --> 00:00:36.400
CDSA suited our needs best of all.

00:00:36.400 --> 00:00:38.100
It's an open standard.

00:00:38.100 --> 00:00:39.750
It's open source.

00:00:39.760 --> 00:00:41.440
It provides the services we need.

00:00:41.440 --> 00:00:44.230
It will even interface
down to smart cards.

00:00:44.240 --> 00:00:46.490
So it was really the
right solution for us.

00:00:46.600 --> 00:00:49.440
So to talk about CDSA,
we want to bring out John Hurley

00:00:49.470 --> 00:00:51.840
and later for Secure Transport,
Murph.

00:00:51.850 --> 00:00:57.940
So, John?

00:00:58.080 --> 00:00:59.340
Thanks, Craig.

00:00:59.420 --> 00:01:00.050
Good morning, everyone.

00:01:00.060 --> 00:01:02.890
Thanks for getting here so early.

00:01:07.430 --> 00:01:12.540
So I'm going to start off with kind
of a brief introduction to CDSA.

00:01:12.970 --> 00:01:16.010
One of the things that we wanted
to particularly do today was

00:01:16.010 --> 00:01:21.690
really dive down into some code,
because you guys are all developers and

00:01:21.800 --> 00:01:48.100
[Transcript missing]

00:01:48.130 --> 00:01:51.890
So we're going to talk mainly
today in this session about

00:01:52.120 --> 00:01:56.120
CDSA and using it for cryptography,
and then also about the

00:01:56.120 --> 00:02:00.960
SecureTransport APIs,
which are being made public for JAGUAR.

00:02:04.940 --> 00:02:09.100
I'm going to do a quick overview of
the architecture itself so you have

00:02:09.340 --> 00:02:13.980
some idea of where the pieces fit in.

00:02:14.160 --> 00:02:18.410
Then we're going to go into
just using it directly,

00:02:18.410 --> 00:02:25.360
the APIs for doing crypto,
and also talk about using CDSA for SSL.

00:02:26.810 --> 00:02:32.500
So CDSA itself is
Common Data Security Architecture.

00:02:32.500 --> 00:02:38.010
Originally it came from Intel and
we shipped a version based

00:02:38.010 --> 00:02:42.570
on the 1.2 standard in OS 9.

00:02:42.800 --> 00:02:48.270
Moving to OS X,
we are now shipping the 2.1 version.

00:02:48.440 --> 00:02:51.620
Based on our experiences
with the 1.2 version,

00:02:51.680 --> 00:02:56.200
we provided a lot of input to the
open group and the other members

00:02:56.200 --> 00:02:58.800
that were working on that standard.

00:02:58.800 --> 00:03:05.800
The 2.1 spec is much easier
to use and much more standard.

00:03:05.800 --> 00:03:11.800
There were a lot of pass-throughs
and things like that in the 1.2 spec.

00:03:11.800 --> 00:03:18.220
This is the foundation of all the PKI,
public key infrastructure,

00:03:18.220 --> 00:03:24.520
and cryptography, SSL,
all those things that we do in OS X.

00:03:26.120 --> 00:03:31.000
So here's kind of the big
block diagram of CDSA.

00:03:31.120 --> 00:03:37.130
And the CDSA APIs themselves,
it's kind of that blue bar down

00:03:37.130 --> 00:03:40.010
at the bottom labeled CSSM.

00:03:40.310 --> 00:03:44.490
Those are the actual CDSA APIs.

00:03:44.490 --> 00:03:44.490
And the

00:03:45.130 --> 00:03:49.810
Having that kind of go across the screen
indicates one of the main goals of CDSA,

00:03:49.900 --> 00:03:54.320
which is we're trying to
isolate applications up above

00:03:54.600 --> 00:03:59.000
so that the applications that
you see at the top in blue,

00:03:59.010 --> 00:04:05.800
we really want those to not have to
know about all the details of the

00:04:05.860 --> 00:04:10.400
crypto and other things down below.

00:04:10.420 --> 00:04:15.080
Most developers are not
100% interested in security.

00:04:15.130 --> 00:04:17.400
They have one or two needs
in their application,

00:04:17.400 --> 00:04:20.620
and they kind of want to just
use things and get on with it

00:04:20.670 --> 00:04:23.000
without knowing all these details.

00:04:23.000 --> 00:04:29.210
And I think we've really seen some good
results with achieving that insulation in

00:04:29.240 --> 00:04:33.910
the apps that we do internally at Apple,
and now we're seeing

00:04:33.910 --> 00:04:39.200
developer applications really
making use of that as well.

00:04:39.200 --> 00:04:43.270
So the... The red...

00:04:43.600 --> 00:06:30.100
[Transcript missing]

00:06:30.490 --> 00:06:35.390
Down below,
we have the add-in modules for CDSA.

00:06:35.480 --> 00:06:38.400
And so CDSA is a pluggable architecture.

00:06:38.400 --> 00:06:43.290
You can extend it by writing
modules and plugging these in.

00:06:43.390 --> 00:06:51.710
The cryptographic service provider
implements various crypto algorithms.

00:06:52.300 --> 00:06:56.300
I couldn't even tell you how many
we implement in the default plugin,

00:06:56.300 --> 00:06:57.990
but it's quite a lot.

00:06:58.190 --> 00:07:01.530
All the standard ones and
a bunch of weird ones,

00:07:01.530 --> 00:07:02.090
too.

00:07:02.100 --> 00:07:04.490
But anyway, those are all in the CSP.

00:07:04.710 --> 00:07:07.260
If you wanted to put in different,
you know,

00:07:07.320 --> 00:07:11.580
some kind of different crypto or like
a hardware accelerator box or whatever,

00:07:11.750 --> 00:07:14.450
that would be the place to put that in.

00:07:14.790 --> 00:07:20.500
On the far right there,
the Datastore library is,

00:07:20.680 --> 00:07:23.270
roughly speaking,
it's a database for storing

00:07:24.100 --> 00:07:27.200
security-related items.

00:07:27.370 --> 00:07:30.990
And in fact,
it doesn't actually have to have any

00:07:30.990 --> 00:07:33.940
security associated with it at all.

00:07:34.030 --> 00:07:37.720
Those could be,
it could be an LDAP database,

00:07:37.720 --> 00:07:38.920
for example.

00:07:39.150 --> 00:07:44.740
The keychain is actually a
combination CSP and Datastore library.

00:07:44.770 --> 00:07:48.530
And the...

00:07:49.300 --> 00:07:52.200
The modules in the middle,
Certificate Library Module and

00:07:52.200 --> 00:07:56.810
Trust Policy Module,
are for handling X5-09 certificates.

00:07:56.810 --> 00:07:59.560
And I'll talk more about
those in just a minute.

00:08:01.710 --> 00:08:21.730
Data Library modules is the
database portion of CDSA.

00:08:22.340 --> 00:08:22.390
I suppose you could put an Oracle backend
on it or something like that,

00:08:22.390 --> 00:08:22.390
but that's probably overkill for the kind
of things that you're doing in security.

00:08:23.490 --> 00:08:28.670
As I mentioned, the Apple file CSP DL,
that's the basis for the keychain,

00:08:28.670 --> 00:08:32.200
and it is a combination of CSP and DL.

00:08:32.610 --> 00:08:37.870
So as you're storing information
into the keychain or retrieving it,

00:08:37.970 --> 00:08:42.590
it's encrypting it as it puts
it into the datastore module.

00:08:43.270 --> 00:08:47.280
and Keychains themselves
are just flat files.

00:08:47.280 --> 00:08:50.230
Another example, which

00:08:50.400 --> 00:08:53.880
A very interesting example is an LDAP DL.

00:08:53.930 --> 00:08:57.580
Putting, for example,
certificates in an LDAP DL really

00:08:57.680 --> 00:09:02.680
would make a lot of sense
because by their very nature,

00:09:02.680 --> 00:09:07.460
the public key part of that is, well,
it's public, so LDAP directory would be

00:09:07.460 --> 00:09:09.940
a perfect spot for that.

00:09:11.510 --> 00:09:16.630
Certificate Library modules.

00:09:16.690 --> 00:09:19.650
The whole goal of a Certificate
Library Module is just to be

00:09:19.650 --> 00:09:21.830
able to parse a certificate.

00:09:21.940 --> 00:09:27.400
So going up into CDSA,
clients that are using certificates

00:09:27.400 --> 00:09:32.260
are going to need to know things like
the issuer and the expiration and

00:09:32.260 --> 00:09:35.130
subject and various things like that.

00:09:35.390 --> 00:09:39.660
And the CL basically knows
how to find that stuff in a

00:09:39.660 --> 00:09:42.060
particular type of certificate.

00:09:42.140 --> 00:09:48.360
So the standard CL that we
ship with Mac OS X knows how to

00:09:48.360 --> 00:09:53.800
interpret X.509V3 certificates.

00:09:53.880 --> 00:09:57.540
Other examples that would be possible,
although they don't exist right now,

00:09:57.540 --> 00:10:03.490
would be a CL that knows how
to interpret PGP certificates

00:10:03.590 --> 00:10:04.840
or attribute certificates.

00:10:04.840 --> 00:10:05.340
Those would be a standard.

00:10:05.410 --> 00:10:08.450
both be really good examples of things.

00:10:10.580 --> 00:10:17.790
Trust Policy Modules, on the other hand,
that's sort of the other part

00:10:17.790 --> 00:10:17.790
of the certificate equation,

00:10:18.180 --> 00:10:24.070
If you have a particular certificate,
one of the main questions that

00:10:24.500 --> 00:10:28.470
you want to ask with that is,
"Do I trust this certificate?" And so the

00:10:28.470 --> 00:10:33.310
idea of a trust policy module is that you
take the certificate that you're trying

00:10:33.400 --> 00:10:37.430
to decide whether you trust or not,
and you take some additional evidence,

00:10:37.460 --> 00:10:40.770
which is, in the X.509 case,
it's usually the rest of the

00:10:40.770 --> 00:10:44.720
certificates in the certificate chain,
pass that all into the

00:10:44.760 --> 00:10:48.960
trust policy module,
and then let it churn away and return

00:10:48.960 --> 00:10:51.170
the answer whether it's trusted or not.

00:10:51.240 --> 00:10:59.180
And if not, which certificates might
not be right or whatever.

00:10:59.420 --> 00:11:03.470
So there's actually,
the Trust Policy Module has a lot of

00:11:03.530 --> 00:11:06.100
potential for doing interesting things.

00:11:06.100 --> 00:11:13.090
You could do different
corporate-based Trust Policy Modules.

00:11:13.800 --> 00:11:20.520
There are a lot of
interesting things there.

00:11:20.520 --> 00:11:29.930
For example, in the PGP case,
that would also be-- to integrate

00:11:30.080 --> 00:11:32.510
PGP into OS X would pretty much
be writing a CL and a TP module

00:11:32.510 --> 00:11:32.510
that knew how to interpret PGP.

00:11:35.630 --> 00:11:38.840
Okay, so one of the main things that
we wanted to talk about is

00:11:38.860 --> 00:11:43.730
contrasting CDSA with OpenSSL.

00:11:43.840 --> 00:11:46.970
And at Apple,
we've made a conscious decision

00:11:47.010 --> 00:11:57.250
to try and evangelize CDSA because
we've worked with these things and

00:11:57.470 --> 00:12:02.430
We have seen the solutions that
we can arrive at with CDSA.

00:12:02.710 --> 00:12:06.280
We really think that
it's a more secure setup.

00:12:06.570 --> 00:12:09.250
It's actually easier to use.

00:12:09.400 --> 00:12:15.590
I think one of the main reasons
that OpenSSL has sort of gained

00:12:15.620 --> 00:12:20.400
some currency is just that
there's sample code available.

00:12:20.400 --> 00:12:26.400
We're really doing our best to get more
and more CDSA sample code out there.

00:12:26.400 --> 00:12:29.890
So you can kind of go and grab
sample code and either do some quick

00:12:29.890 --> 00:12:33.300
encryption or do some certificate stuff.

00:12:33.480 --> 00:12:37.200
We're really trying to make
those things available.

00:12:37.440 --> 00:12:41.540
Of course,
we'll have a lot better integration

00:12:41.640 --> 00:12:45.190
with other applications and services
that we provide at the higher

00:12:45.190 --> 00:12:49.930
levels because internally at Apple,
we are going through CDSA.

00:12:50.050 --> 00:12:57.060
So that's the direction that
we're encouraging people to go in.

00:12:57.190 --> 00:13:02.000
To explain a little bit more about
the more secure bullet point,

00:13:02.100 --> 00:13:07.770
for example, in the SecureTransport case,
SecureTransport knows how

00:13:07.770 --> 00:13:10.760
to deal with reference keys,
so it's not actually dealing

00:13:10.760 --> 00:13:14.450
with the key bits itself.

00:13:14.560 --> 00:13:17.660
In the OpenSSL APIs,
you're actually required to pass

00:13:17.690 --> 00:13:19.940
key bits in through the interfaces.

00:13:20.070 --> 00:13:23.410
So that means that you actually
have to have the key bits available.

00:13:23.530 --> 00:13:26.880
Well, in the case of something
like a smart card,

00:13:27.120 --> 00:13:28.100
that's not going to be the case.

00:13:28.100 --> 00:13:31.930
You will not be able to
even have those key bits.

00:13:32.020 --> 00:13:36.360
So that's one example where we
just feel like it's a better setup.

00:13:36.360 --> 00:13:37.580
up.

00:13:39.600 --> 00:13:43.200
Now I'd like to introduce
and bring on Richard Murphy.

00:13:43.200 --> 00:13:47.060
He's the manager of Data Security Group.

00:13:47.170 --> 00:13:47.170
Thanks.

00:13:51.360 --> 00:13:52.300
Hi, everybody.

00:13:52.310 --> 00:13:54.530
Thanks, John.

00:13:54.650 --> 00:13:59.660
So, I wasn't originally supposed
to be doing this lecture.

00:13:59.660 --> 00:14:02.320
My engineer up in Seattle, Doug Mitchell,
is going to be doing it.

00:14:02.460 --> 00:14:05.110
He's really kind of the
group's crypto head.

00:14:05.310 --> 00:14:07.630
He knows all about these algorithms.

00:14:07.740 --> 00:14:11.240
He maintains the CSP in the CDSA stack.

00:14:11.400 --> 00:14:15.630
He also did the
SecureTransport layer as well.

00:14:15.710 --> 00:14:19.030
So, Doug had something come up,
and I said, "That's okay." I said,

00:14:19.030 --> 00:14:21.320
"Ship me some sample code,
and I'll walk through it,

00:14:21.350 --> 00:14:23.360
and everything will be cool."

00:14:23.560 --> 00:14:29.060
So he shipped me a sample code of
CDSA doing encryption of a blob.

00:14:29.440 --> 00:14:34.610
and he shipped me a sample code of
SecureTransport doing a GET operation.

00:14:34.750 --> 00:14:37.570
and it was really,
really interesting going through this.

00:14:37.800 --> 00:14:40.400
First of all, I looked at the CDSA code
and I kind of went,

00:14:40.400 --> 00:14:43.150
"Oh, my God,
there's a lot of code there."

00:14:43.250 --> 00:14:51.100
And then I looked at the
SecureTransport code and I went,

00:14:51.100 --> 00:14:51.270
"This is a lot easier.

00:14:51.270 --> 00:14:51.270
This is a lot more sane." So I'd like
to back up just a little bit first.

00:14:53.890 --> 00:14:57.880
It really brings home this
whole layering thing here.

00:14:57.990 --> 00:15:01.900
We did base our security strategy,
our crypto strategy,

00:15:02.030 --> 00:15:04.670
on using the CDSA stacks.

00:15:04.780 --> 00:15:07.200
The Common Security Services Manager here
,

00:15:07.340 --> 00:15:12.220
along with its attendant CSP,
or Cryptographic Service Provider,

00:15:12.330 --> 00:15:16.730
the cert library,
the trust policy manager,

00:15:16.840 --> 00:15:19.040
and the data store library.

00:15:19.180 --> 00:15:21.640
CDSA is extremely powerful.

00:15:21.740 --> 00:15:23.660
It has a whole bunch of options.

00:15:23.750 --> 00:15:25.910
It has a whole bunch of
different ways to configure it.

00:15:26.030 --> 00:15:29.830
Furthermore, you can expand it by
plugging in different CSPs,

00:15:29.930 --> 00:15:32.000
different CLs, and that sort of stuff.

00:15:32.290 --> 00:15:35.910
As John says, said,
we can work with PGP certificates

00:15:36.440 --> 00:15:41.640
if we replace the CL and the TP,
rather than the X509 certificates

00:15:41.640 --> 00:15:44.800
that Apple's currently supporting.

00:15:44.970 --> 00:15:50.200
We could write an interface to plug in
a hardware crypto box where the CSP is,

00:15:50.280 --> 00:15:52.080
or work with smart cards.

00:15:52.200 --> 00:15:56.480
We could work with an LDAP data store,
or something like that,

00:15:56.600 --> 00:16:00.960
rather than a file data store like we
currently use in the data store library.

00:16:01.220 --> 00:16:05.500
But, one of the things that does
is it means that that layer,

00:16:05.500 --> 00:16:08.600
that common security
services manager layer,

00:16:08.600 --> 00:16:11.680
has to do a lot of stuff
to make things look common.

00:16:12.100 --> 00:16:14.470
You have to generate context.

00:16:14.600 --> 00:16:27.000
[Transcript missing]

00:16:30.480 --> 00:16:37.050
The example, um,
encryption code using just CDSA.

00:16:38.330 --> 00:16:41.700
What this thing has to do is
initialize some local variables.

00:16:41.820 --> 00:16:44.920
It ends up creating a CSSM key,
which is the way that keys are

00:16:44.950 --> 00:16:49.370
actually passed around through
the crypto algorithms in CDSA.

00:16:49.820 --> 00:16:52.020
It copies in the caller's key material.

00:16:52.310 --> 00:16:55.800
So this is a standard encryption call
where you're passing in a password

00:16:55.800 --> 00:16:58.560
or passphrase or something like that.

00:16:59.000 --> 00:17:14.500
[Transcript missing]

00:17:17.990 --> 00:17:19.900
So the header for our
function looks like this.

00:17:19.900 --> 00:17:21.660
It's a do_encrypt.

00:17:21.780 --> 00:17:23.890
It's going to take a CSP handle.

00:17:23.900 --> 00:17:25.890
We'll talk about that in a second.

00:17:26.000 --> 00:17:40.400
[Transcript missing]

00:17:41.040 --> 00:17:56.350
CSP Handle,
I was talking to Doug earlier this week,

00:17:56.350 --> 00:17:56.350
and I said, "So,
what's the CSP Handle thing?

00:17:56.350 --> 00:17:56.350
How much does it take
to do that?" He said,

00:17:56.350 --> 00:17:56.350
"Well, you have to initialize CSSM,
you have to load the CSP module,

00:17:56.350 --> 00:17:56.350
you have to attach it."

00:18:08.450 --> 00:18:08.450
So, this all kind of pointed me at, boy,
this has got to get a little bit simpler.

00:18:08.450 --> 00:18:08.450
So, more on that a little bit later.

00:18:11.620 --> 00:18:13.100
We have some local variables.

00:18:13.100 --> 00:18:16.360
We have a CSSM key,
which is actually gonna be used

00:18:16.470 --> 00:18:19.400
to hold the generated key itself.

00:18:19.630 --> 00:18:23.140
We're going to have a handle for
doing the context operations.

00:18:23.240 --> 00:18:28.290
A UN32 variable key length to
actually do all the type conversions

00:18:28.300 --> 00:18:31.740
for us for the actual key length
to get it in the right order.

00:18:31.830 --> 00:18:34.580
A label for the actual key itself.

00:18:34.700 --> 00:18:36.620
An initial vector.

00:18:36.620 --> 00:18:39.820
We're going to be using AES as
our encryption algorithm.

00:18:39.920 --> 00:18:41.300
This is a block mode cipher.

00:18:41.440 --> 00:18:44.520
We have to have an initial vector for it.

00:18:45.000 --> 00:18:48.080
We'll have bytes encrypted
for a return variable,

00:18:48.080 --> 00:18:51.250
total number of bytes that
have actually been done,

00:18:51.250 --> 00:18:53.890
and then the remaining data structure.

00:18:59.680 --> 00:19:03.260
So the first thing we actually
have to do is create the CSSM key.

00:19:03.380 --> 00:19:05.450
This is actually going to be used
a little bit later on when we

00:19:05.450 --> 00:19:07.940
perform the encryption algorithm.

00:19:08.090 --> 00:19:11.310
We're just going to create a
context for the first call.

00:19:12.100 --> 00:19:51.600
[Transcript missing]

00:19:53.100 --> 00:19:57.980
There are approximately, let me see,
what did he say, 30 algorithms?

00:19:58.090 --> 00:20:03.110
Something like that that you can
actually use for encryption in our CSP.

00:20:03.180 --> 00:20:05.650
Key size and bits, 128.

00:20:05.760 --> 00:20:07.280
We're passing in no seed or salt.

00:20:07.340 --> 00:20:10.900
We're going to let those get
generated by the library itself.

00:20:10.940 --> 00:20:14.700
You can have a start date and
end date for encryption keys.

00:20:14.740 --> 00:20:19.200
We aren't using that feature in this one,
since we're passing in the key itself.

00:20:19.270 --> 00:20:22.330
Then there's a place for
additional parameters,

00:20:22.330 --> 00:20:25.810
and finally the actual
handle to the context itself.

00:20:31.670 --> 00:20:35.140
Here's the call to actually generate
the key using the information available.

00:20:35.230 --> 00:20:38.500
We actually want to be able to
get this key out of the CSP.

00:20:38.540 --> 00:20:41.650
A lot of times when we generate keys,
we want to generate it and

00:20:41.650 --> 00:20:45.690
store it in the DL so that
nobody can get it back out.

00:20:46.080 --> 00:20:50.800
One of the things that we do in our
scheme is that key material is normally

00:20:50.800 --> 00:20:54.960
protected from the user address space,
so that you can't simply

00:20:55.010 --> 00:20:56.610
go out and interrogate it.

00:20:56.790 --> 00:21:00.470
We do this by using a
Unix process architecture,

00:21:00.580 --> 00:21:04.900
and actually then when we
want to do the encryption,

00:21:04.900 --> 00:21:11.980
we use IPCs in order to actually
be able to encrypt the data.

00:21:13.390 --> 00:21:16.640
We're going to pass,
get everything back in

00:21:16.730 --> 00:21:18.670
the AES key variable.

00:21:22.280 --> 00:21:27.070
Once we've actually done that,
we actually take all of this stuff and

00:21:27.070 --> 00:21:32.940
we put it back into the AES key data
structure that we'd allocated previously.

00:21:33.000 --> 00:21:38.510
This is basically getting set up then for
the encryption operation that comes next.

00:21:38.600 --> 00:21:45.900
[Transcript missing]

00:21:48.200 --> 00:22:15.500
[Transcript missing]

00:22:16.270 --> 00:22:22.340
We use the AES key that we just set up

00:22:23.340 --> 00:22:28.880
Passing the initialization vector,
we specify how it's supposed to

00:22:28.880 --> 00:22:31.740
be padded and pass in the handle.

00:22:36.120 --> 00:22:41.960
So here we go with the actual
Encrypt the Data operation.

00:22:42.040 --> 00:22:43.410
Pass in the handle.

00:22:43.640 --> 00:22:45.360
We've got a plain text buffer coming in.

00:22:45.510 --> 00:22:47.050
There is only one of them.

00:22:47.160 --> 00:22:49.160
That's what the 1s stand for.

00:22:49.230 --> 00:22:53.590
There's a ciphertext buffer
ready to handle it coming out.

00:22:54.450 --> 00:22:57.190
So, I'm going to tell you how many
bytes are encrypted and how much

00:22:57.250 --> 00:22:58.950
remaining data there actually is.

00:23:00.080 --> 00:23:05.330
That actually will perform
the operation given all the

00:23:05.330 --> 00:23:05.330
specifications that we've set up.

00:23:09.500 --> 00:23:12.080
At the end of all this,
we might have some remaining

00:23:12.080 --> 00:23:16.200
data that needs to be appended
to the actual output buffer,

00:23:16.200 --> 00:23:21.300
the ciphertext buffer that we had set
up at the opening of the function.

00:23:21.300 --> 00:23:23.690
So we'll go through and actually
start moving that stuff out.

00:23:23.740 --> 00:23:26.600
We have to reallocate some more space.

00:23:26.600 --> 00:23:30.100
And then we do a memmove to
actually move the data out.

00:23:30.100 --> 00:23:38.100
We free the old remdata.data portion,
delete the cryptographic context,

00:23:38.120 --> 00:23:41.000
and we return that everything is okay.

00:23:41.060 --> 00:23:43.190
Now obviously we didn't do
much error checking in there,

00:23:43.200 --> 00:23:44.990
and you could add all of that.

00:23:45.100 --> 00:23:49.620
There are a lot more options that we
could have done along the way as well.

00:23:52.080 --> 00:23:55.750
Okay, so it's a whole lot of operations.

00:23:55.850 --> 00:24:00.420
One of the things that we end up doing
at Apple quite a bit is we're kind of the

00:24:00.420 --> 00:24:03.440
crypto guys for the entire organization.

00:24:03.520 --> 00:24:07.700
And we try not to tell people, "Well,
just do, you know,

00:24:07.700 --> 00:24:10.280
use CDSA and send them on their way
and make them all happy." So we've

00:24:10.280 --> 00:24:13.110
started to make a lot of sample code.

00:24:13.200 --> 00:24:15.500
We're going to start trying to
make a lot more of that available

00:24:15.960 --> 00:24:18.070
if you go to our open source site.

00:24:18.170 --> 00:24:21.190
So that an encrypt operation
should end up taking about

00:24:21.190 --> 00:24:22.880
two lines of code at most.

00:24:22.980 --> 00:24:27.990
So keep looking at the open source
site for a little bit more of that.

00:24:28.140 --> 00:24:33.400
Here's an example of an upper layer
piece of code using SecureTransport.

00:24:34.230 --> 00:24:38.580
Secure Transport is layered on
top of the CDSA infrastructure.

00:24:38.730 --> 00:24:43.440
We designed it explicitly to be able
to do all SSL operations on the system.

00:24:43.510 --> 00:24:47.340
It'll do server-side
and client-side support.

00:24:47.490 --> 00:24:53.730
supports a whole bunch
of different protocols:

00:24:53.730 --> 00:24:53.730
V2, V3, and TLS.

00:24:54.080 --> 00:25:01.290
You can actually write server-side or
client-side code using an identical API.

00:25:02.910 --> 00:25:05.640
You don't need to have your
actual application do any

00:25:05.640 --> 00:25:07.540
of the crypto operations.

00:25:07.690 --> 00:25:11.370
Secure Transport will actually
set all of that up for you.

00:25:22.310 --> 00:25:25.290
The other thing is we actually
made this so that there's a

00:25:25.290 --> 00:25:27.950
transport layer independence to it.

00:25:28.180 --> 00:25:31.200
We can use this actually with
Unix sockets if you want.

00:25:31.340 --> 00:25:35.030
If you want to use OpenTransport,
you can use it that way.

00:25:35.130 --> 00:25:38.240
You can use it in asynchronous
mode or non-blocking mode,

00:25:38.280 --> 00:25:40.940
or synchronous mode
and non-blocking mode.

00:25:41.050 --> 00:25:44.220
And it has a pretty straightforward API.

00:25:55.000 --> 00:25:58.100
One of the real benefits of this is
that you actually end up with the cert

00:25:58.100 --> 00:26:00.500
handling being done by the CDSA stack.

00:26:00.600 --> 00:26:03.210
One of the things we're trying to
do in Mac OS X is have a common

00:26:03.210 --> 00:26:06.410
handling of all certificates,
so that you actually have

00:26:06.410 --> 00:26:07.840
a common cert data store.

00:26:08.000 --> 00:26:11.940
Things are actually all
accessed the same way.

00:26:12.050 --> 00:26:16.100
The user can set up their trust of
various certs exactly the same way.

00:26:16.230 --> 00:26:18.890
And so this actually all
just ties in automatically.

00:26:19.080 --> 00:26:21.940
CERTs are actually used by reference.

00:26:25.240 --> 00:26:28.720
On the server side,
you actually have the actual

00:26:28.720 --> 00:26:33.830
identities being handled by
Keychain and the secure server.

00:26:33.900 --> 00:26:36.810
The benefit of this is that the
private key is never actually

00:26:36.880 --> 00:26:40.730
exposed to the user process,
so that all operations are being

00:26:40.810 --> 00:26:42.960
done through the security server.

00:26:43.080 --> 00:26:48.960
And this actually gives you quite a
bit of protection of your key material.

00:26:49.100 --> 00:26:51.980
The other part of this
is that down the road,

00:26:52.100 --> 00:26:55.340
should we ever develop a
hardware CSP to interface to any

00:26:55.340 --> 00:26:58.990
vendor's hardware encryption box,
we can actually use

00:26:59.070 --> 00:27:00.880
those functions as well.

00:27:00.990 --> 00:27:03.450
In general,
most of those types of devices

00:27:03.810 --> 00:27:05.540
will also hide the key material.

00:27:05.650 --> 00:27:09.350
So you have to have programmed at
the very beginning with a paradigm of

00:27:09.350 --> 00:27:11.830
using essentially hidden private keys.

00:27:11.950 --> 00:27:15.590
So this actually helps out
quite a bit in that regard.

00:27:25.500 --> 00:27:29.650
It allows the calling code
to specify a whole bunch of

00:27:30.140 --> 00:27:34.330
protocol parameters or not,
or take the defaults.

00:27:34.440 --> 00:27:37.560
And it can examine the protocol
parameters on the basis of

00:27:37.560 --> 00:27:42.870
the successful negotiation of
the beginning of the session.

00:27:44.860 --> 00:27:49.950
The other benefit of this is that
it actually gets to springboard

00:27:50.050 --> 00:27:53.940
or use all the algorithms
that are contained in our CSP.

00:27:54.080 --> 00:27:58.610
So that basically just about anything
that the transaction hits along

00:27:58.610 --> 00:28:03.990
the way can be handled with the
combination of all of our algorithms.

00:28:07.200 --> 00:28:11.480
Internally,
CF Network and URL Access are APIs that

00:28:11.480 --> 00:28:12.900
actually use Secure Transport.

00:28:12.900 --> 00:28:16.300
There are other applications at the
higher levels that actually then

00:28:16.300 --> 00:28:19.140
benefit as well automatically from that.

00:28:19.140 --> 00:28:24.630
Mail is actually using this
for the SSL connection as well.

00:28:29.700 --> 00:28:35.800
The Secure Transport functions themselves
actually break down into kind of a

00:28:35.860 --> 00:28:38.840
set of common series of functions.

00:28:38.960 --> 00:28:42.940
There's functions to
actually set up your session.

00:28:43.100 --> 00:28:57.100
[Transcript missing]

00:28:58.530 --> 00:29:01.130
You can specify,
you can either get or set

00:29:01.330 --> 00:29:05.740
any series of attributes,
the domain name actually

00:29:05.740 --> 00:29:09.670
in use for the transaction,
you can get the negotiated

00:29:09.670 --> 00:29:13.880
protocol version,
supported ciphers, etc.

00:29:16.200 --> 00:29:17.480
There are some options.

00:29:17.650 --> 00:29:23.380
One of the problems we had with
URL access in 9 was that as root

00:29:23.380 --> 00:29:28.840
certificates started to become expired,
we started to get a lot of negative 96,

00:29:28.840 --> 00:29:35.350
96, 96, 96, 69 errors coming back,
which essentially mapped into

00:29:35.600 --> 00:29:39.600
the remote server was mapping
back to an expired root cert.

00:29:39.600 --> 00:29:43.920
So Secure Transport can actually
be set up to ignore the fact that

00:29:43.920 --> 00:29:52.600
the remote cert has been expired
and continue the session anyway.

00:29:52.800 --> 00:29:55.580
Then there are the protocol functions.

00:30:01.990 --> 00:30:05.180
And finally,
there's the I/O functions that

00:30:05.180 --> 00:30:10.820
actually do the reads and writes
and then close and actually do the

00:30:10.890 --> 00:30:13.860
callbacks and that sort of stuff.

00:30:14.010 --> 00:30:16.810
So the sample code...

00:30:17.600 --> 00:30:21.260
One of the first things you
have to do when setting up use

00:30:21.260 --> 00:30:24.600
of the SecureTransport function
is to define two functions:

00:30:24.700 --> 00:30:28.300
your read callback and a write callback.

00:30:28.430 --> 00:30:29.950
These have three parameters each.

00:30:30.120 --> 00:30:34.560
They have an SSL connection ref,
which can be any of a socket,

00:30:34.860 --> 00:30:38.200
file descriptor,
or an open transport interface.

00:30:38.200 --> 00:30:39.590
Basically anything you want to do.

00:30:39.650 --> 00:30:43.260
This essentially maps to a void
star in the actual interface.

00:30:43.310 --> 00:30:45.540
So essentially anything
you can read or write from,

00:30:45.600 --> 00:30:47.140
we're happy to provide you with.

00:30:47.270 --> 00:30:51.610
We're just going to pass it back.

00:30:52.300 --> 00:30:54.590
When you read,
you're going to pass it back as data,

00:30:54.590 --> 00:30:56.540
and you're going to pass back the length.

00:30:56.660 --> 00:31:00.000
On the right side,
you're going to get the data in,

00:31:00.100 --> 00:31:02.880
and the length of the data itself.

00:31:05.650 --> 00:31:11.960
So here's our function to
actually do a GET using SSL.

00:31:12.900 --> 00:31:16.400
We're going to call it PerformSSL.

00:31:16.400 --> 00:31:19.070
It takes in a socket as its input.

00:31:19.680 --> 00:31:24.700
It has the data to send to the server,
the actual get string, the data length,

00:31:24.740 --> 00:31:28.660
and then it actually has a buffer
for passing back the data and the

00:31:28.660 --> 00:31:31.430
length of that data coming back.

00:31:33.030 --> 00:31:35.230
As local variables,
we set up a cont- have a

00:31:35.230 --> 00:31:37.100
context reference variable.

00:31:37.250 --> 00:31:41.940
It's actually used to hold onto
the SecureTransport object itself,

00:31:42.170 --> 00:31:48.510
status return, the actual length,
and how much data is remaining.

00:31:50.040 --> 00:31:55.620
In order to set up,
we pass in-- we pass to SSL new

00:31:55.800 --> 00:32:00.330
context the SSL context pointer.

00:32:00.630 --> 00:32:03.540
That essentially returns
your context pointer.

00:32:03.700 --> 00:32:08.230
We can set the I/O functions to my
read callback and my write callback

00:32:08.230 --> 00:32:10.250
so that we're ready to do I/O.

00:32:11.360 --> 00:32:14.850
And then finally we set up the
connection to be used in this particular

00:32:14.890 --> 00:32:17.820
case with the passed in socket.

00:32:22.480 --> 00:32:25.280
For this particular transfer,
we're asking for

00:32:25.280 --> 00:32:28.850
SSL version 3 protocol only.

00:32:28.970 --> 00:32:32.850
You could also specify any of the
other options that you would want

00:32:32.850 --> 00:32:34.810
to do at this particular point.

00:32:36.300 --> 00:32:41.400
[Transcript missing]

00:32:42.120 --> 00:32:43.740
Then you actually start the session.

00:32:43.840 --> 00:32:48.910
You do the SSL handshake
with the context raff.

00:32:54.770 --> 00:32:56.960
Once we do that,
we actually send the get string

00:32:57.030 --> 00:32:59.830
itself with an SSL write.

00:33:00.110 --> 00:33:02.030
Basically,
this will ultimately end up calling

00:33:02.410 --> 00:33:08.010
your write callback along with
the appropriate SSL wrapping.

00:33:08.520 --> 00:33:11.840
Once we've done that,
we go into a read loop.

00:33:11.960 --> 00:33:14.500
As long as there's
buffer space remaining,

00:33:14.500 --> 00:33:17.190
we do an SSL read that
calls your callback.

00:33:17.320 --> 00:33:22.540
We check for errors and
continue on through the loop.

00:33:23.210 --> 00:33:26.100
Finally,
we close the context and dispose of it.

00:33:26.220 --> 00:33:32.930
So, the SSL protocol is a lot more
complex operation than simply

00:33:32.930 --> 00:33:34.740
doing a block encryption.

00:33:34.830 --> 00:33:37.970
And yet,
this is a fair bit less code than

00:33:37.970 --> 00:33:41.000
you would have to do if you were
doing this directly with CDSA.

00:33:41.160 --> 00:33:44.890
Some of the other examples of code
we're hoping to provide as an example

00:33:44.890 --> 00:33:49.660
in the first round is just a simple
encrypt function based on CDSA.

00:33:49.740 --> 00:33:55.280
So that you can make these calls with
only one or two calls themselves.

00:33:55.810 --> 00:33:57.470
For some of you, however,
you're going to want to

00:33:57.470 --> 00:34:01.290
actually work at the CDSA level,
and so that's all available.

00:34:01.400 --> 00:34:03.400
So there's a lot of
documentation on that.

00:34:03.600 --> 00:34:05.300
There's the open group documentation.

00:34:05.420 --> 00:34:08.190
If you need that level of control,
you can use that.

00:34:08.320 --> 00:34:10.460
If you want to do more,
or if you want to do

00:34:10.550 --> 00:34:13.370
things a little bit easier,
we're providing more and more functions.

00:34:13.520 --> 00:34:17.290
The next session itself has
to do with the Sec APIs.

00:34:17.430 --> 00:34:20.720
There are a lot of APIs that
we've created to deal with

00:34:20.720 --> 00:34:25.500
handling access control lists on
certificates and that sort of stuff.

00:34:25.580 --> 00:34:28.880
And also dealing with
certificates themselves.

00:34:28.990 --> 00:34:31.840
So we're trying to make
things a little bit easier,

00:34:31.970 --> 00:34:35.350
but the whole reason for using
CDSA itself is to allow us the

00:34:35.350 --> 00:34:39.290
flexibility to move to different
crypto service providers,

00:34:39.410 --> 00:34:42.000
different data libraries, etc.

00:34:44.580 --> 00:34:48.990
For more information, contact Craig,
and I think we're up to... Oh, yes,

00:34:49.150 --> 00:34:51.200
can't forget this.

00:34:51.620 --> 00:34:55.820
This next session coming
up is the Sec APIs.

00:34:55.920 --> 00:34:59.410
This afternoon we have
the feedback forum.

00:34:59.550 --> 00:35:06.220
Later on this afternoon, we also have the
Directory Services discussion,

00:35:06.540 --> 00:35:08.660
and then also Kerberos is this afternoon.

00:35:08.660 --> 00:35:10.960
So it's kind of a full day of security.

00:35:11.100 --> 00:35:13.500
Make sure you hit all the sessions.

00:35:15.920 --> 00:35:19.800
For more information,
there's a couple URLs.

00:35:19.850 --> 00:35:21.400
All of CDSA is open source.

00:35:21.560 --> 00:35:23.600
Please go check it out.

00:35:24.030 --> 00:35:29.330
We have the Developer Security webpage,
which includes some example code.

00:35:29.490 --> 00:35:33.760
There's the CDSA link to the
open group pages on CDSA itself

00:35:33.870 --> 00:35:35.910
and the documentation.

00:35:36.170 --> 00:35:41.940
We also have PCSC code
available in Mac OS X.

00:35:42.550 --> 00:35:46.460
There's a product security web page
dealing with real security problems,

00:35:46.460 --> 00:35:49.150
that sort of stuff,
not so much from the developer side,

00:35:49.260 --> 00:35:53.970
but also from security problems
having to do with Mac OS X.

00:35:54.230 --> 00:35:57.040
And finally,
there's the Secure Trusted OS Consortium.

00:35:57.040 --> 00:35:59.280
One of the projects we're
actually working on is trying to

00:35:59.280 --> 00:36:03.490
create an SE version of Mac OS X,
and they're doing most

00:36:03.490 --> 00:36:04.560
of the work with that.

00:36:12.500 --> 00:36:16.980
I'd like to move on to the next question.