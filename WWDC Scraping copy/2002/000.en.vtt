WEBVTT

00:00:03.360 --> 00:00:06.320
Ladies and gentlemen,
please welcome Vice President of

00:00:06.320 --> 00:00:10.550
Platform Technologies,
Bertrand Serlet.

00:00:15.560 --> 00:00:16.500
Good afternoon.

00:00:16.500 --> 00:00:18.920
It's a pleasure to be here again.

00:00:18.980 --> 00:00:23.590
I think I've been here five times before,
and I think you will agree with me.

00:00:23.590 --> 00:00:27.860
We've come quite a long
way in all those years.

00:00:27.900 --> 00:00:32.030
So what I thought I would do is
to kind of draw an analogy with

00:00:32.030 --> 00:00:36.140
the path we've been going on,
is to take an example

00:00:36.140 --> 00:00:39.570
from Psychology 101,
for those of you who've

00:00:39.570 --> 00:00:41.280
gone to a psychology class.

00:00:41.390 --> 00:00:46.320
So there was this scientist,
last century, Abraham Maslow,

00:00:46.390 --> 00:00:50.840
who found a very interesting way to
put in perspective the human needs.

00:00:50.850 --> 00:00:55.870
And he had this diagram,
which was kind of a pyramid or a ladder.

00:00:55.960 --> 00:01:00.910
And the basic concept is that in order
to get to the next level of needs,

00:01:00.910 --> 00:01:04.070
you have to first have
satisfied the previous level.

00:01:04.180 --> 00:01:07.080
So it worked something like this.

00:01:07.080 --> 00:01:11.300
We've had the lowest level,
the physiological level.

00:01:11.300 --> 00:01:15.010
And we've got the highest level,
which is the level of human needs.

00:01:15.010 --> 00:01:17.570
And going up to safety
and belonging to a group,

00:01:17.570 --> 00:01:20.990
self-esteem, and finally,
the ultimate in enlightenment,

00:01:21.010 --> 00:01:22.570
self-actualization.

00:01:22.660 --> 00:01:28.710
So Apple kind of started a
little low and we had a number of

00:01:28.860 --> 00:01:33.250
challenges and the first one was
to define the software strategy.

00:01:33.350 --> 00:01:38.940
As you know we've worked on that for a
number of years and defining a strategy

00:01:38.940 --> 00:01:43.880
was just the first layer and the strategy
that makes sense and that was Mac OS X,

00:01:43.880 --> 00:01:45.510
Mac OS X strategy.

00:01:45.600 --> 00:01:51.530
But the hardest step was maybe the
next one to finally shape a product

00:01:51.530 --> 00:01:58.130
and we shaped Mac OS X about a year
ago on March 24th of last year and that

00:01:58.130 --> 00:02:00.600
was a lot of hard work went into that.

00:02:00.600 --> 00:02:05.310
Now that was a year and a couple
months ago and exactly a year ago

00:02:05.560 --> 00:02:12.020
we had the developers conference,
this conference and our main goal there

00:02:12.020 --> 00:02:15.600
was to explain what was Mac OS X because
Mac OS X is a very complex software.

00:02:15.610 --> 00:02:19.600
But many of you had not been running
Mac OS X for a very long time

00:02:19.600 --> 00:02:24.600
and so we wanted to have a lot of
sessions covering what is Mac OS X.

00:02:24.600 --> 00:02:27.600
Now we also had an agenda.

00:02:27.600 --> 00:02:32.600
In order to be successful for
everyone we needed application.

00:02:32.690 --> 00:02:37.230
The operating system without application
is nothing and applications you

00:02:37.240 --> 00:02:39.600
need an operating system underneath.

00:02:39.620 --> 00:02:44.600
So last year the conference,
one of the goals was a call for action.

00:02:44.600 --> 00:02:45.580
We need apps.

00:02:45.600 --> 00:02:46.630
Thank you.

00:02:46.990 --> 00:02:50.890
A year after, we have over 3,000 apps.

00:02:51.030 --> 00:02:55.240
So I would like to have a round of
applause for all of you for bringing

00:02:55.240 --> 00:02:58.930
all those great apps to the platform.

00:03:03.190 --> 00:03:05.250
We worked hard too.

00:03:05.310 --> 00:03:10.940
Six months and a few days after
shipping Mac OS X version 10.0,

00:03:10.940 --> 00:03:14.230
we shipped Mac OS X version 10.1.

00:03:14.260 --> 00:03:17.640
That's six months,
including vacation days for the team

00:03:17.640 --> 00:03:20.140
because we were pretty tired after 10.0.

00:03:20.170 --> 00:03:25.230
And so that was a pretty major
achievement for a major OS release

00:03:25.230 --> 00:03:31.130
that had much greater performance,
but also lots of features added.

00:03:31.620 --> 00:03:37.360
Now, after working on 10.1,
we forked our development.

00:03:37.360 --> 00:03:40.510
On one side,
we had the next generation and

00:03:40.510 --> 00:03:44.680
that will be Jaguar and we'll be,
of course, talking about that today.

00:03:44.680 --> 00:03:48.880
And on the other side,
we started working on software updates,

00:03:48.880 --> 00:03:53.100
10.1.1 all the way to 10.1.4.

00:03:53.100 --> 00:03:57.450
And those software updates
have shipped over 800 fixes,

00:03:57.470 --> 00:04:00.660
bug fixes,
lots of little things we cleared

00:04:00.660 --> 00:04:02.700
up in the software updates.

00:04:02.700 --> 00:04:08.930
We also shipped new applications,
10-only applications like iPhoto and some

00:04:08.930 --> 00:04:13.940
security updates unavailable in our days.

00:04:13.940 --> 00:04:19.980
So after having all those applications
and after having shipped such updates,

00:04:19.980 --> 00:04:23.530
we felt compelled to
flick the big switch,

00:04:23.700 --> 00:04:27.940
which was the default on all new Macs,
was Mac OS X.

00:04:27.940 --> 00:04:29.780
We decided to flick the switch.

00:04:29.780 --> 00:04:33.000
In January,
and that was definitely a milestone,

00:04:33.000 --> 00:04:35.960
at least for us,
because from that point on,

00:04:35.960 --> 00:04:41.240
you know that the usership of
Mac OS X will just go linearly

00:04:41.240 --> 00:04:46.300
as we sell new platforms,
new CPUs.

00:04:46.300 --> 00:04:50.620
So it's fair to say that we
climbed the next two steps in

00:04:50.680 --> 00:04:53.090
that ladder over the last year.

00:04:53.090 --> 00:04:55.420
Now, what's next?

00:04:55.420 --> 00:04:57.060
Well, there's two things.

00:04:57.060 --> 00:04:59.480
There's, of course, innovation.

00:04:59.480 --> 00:05:01.970
That's the most glamorous of what we do.

00:05:02.070 --> 00:05:05.860
But there's also continual improvement,
continual evolution.

00:05:06.000 --> 00:05:10.230
And we are trying to strike a
balance between those two focuses.

00:05:10.240 --> 00:05:14.750
Now, this is the focus, of course,
of this presentation.

00:05:14.970 --> 00:05:18.690
And this is the agenda
that I'm going to talk,

00:05:18.690 --> 00:05:20.000
cover today.

00:05:20.240 --> 00:05:25.390
First, evolution, what we do in that
incremental improvement.

00:05:25.590 --> 00:05:31.180
tendency and what we do in terms of
revolution and then we'll take two areas

00:05:31.230 --> 00:05:37.390
the unix area and the Frameworks and show
how those things combine So first let's

00:05:37.510 --> 00:05:43.530
talk about evolution Now when you think
of evolution you may think of something

00:05:43.590 --> 00:05:51.220
like this When I think about evolution,
this is more what I think about now why?

00:05:51.840 --> 00:05:56.790
Well because I think fundamentally
software is like wine you need to age it

00:05:56.910 --> 00:06:00.900
a little bit now There's one conditions
where you need to start with really

00:06:00.900 --> 00:06:04.360
good grapes Otherwise if you start with
vinegar you're not going to get great

00:06:04.360 --> 00:06:10.290
wine So we are committed to maturing
Mac OS X over the years We are spending

00:06:10.290 --> 00:06:15.200
a lot of resources maturing Mac OS X and
we are doing that in a number of areas

00:06:15.200 --> 00:06:19.310
We are doing that in UI architecture
API security and overall functionality.

00:06:19.310 --> 00:06:21.020
So let's look at UI

00:06:23.520 --> 00:06:27.030
There is this myth that
the way you do great UI,

00:06:27.030 --> 00:06:30.360
you start with a brilliant idea.

00:06:30.500 --> 00:06:34.400
And once you have that idea,
you have a big show to announce it.

00:06:35.130 --> 00:06:37.800
Now, it doesn't work at all that way.

00:06:37.880 --> 00:06:39.970
In fact, we look at what's broken.

00:06:40.000 --> 00:06:41.100
We take the feedback.

00:06:41.100 --> 00:06:44.160
And the feedback in terms
of UI is always very,

00:06:44.160 --> 00:06:45.290
very strong.

00:06:45.340 --> 00:06:47.740
And usually it's negative feedback.

00:06:47.760 --> 00:06:49.390
I mean, there's some positive feedback.

00:06:49.460 --> 00:06:52.950
There's a lot of positive
feedback on our innovation.

00:06:52.980 --> 00:06:56.410
But what people really feel
strongly is something that's

00:06:56.500 --> 00:06:58.690
this little need that's wrong.

00:06:58.700 --> 00:07:04.160
So we take all this feedback and we
look at it and explore directions.

00:07:04.290 --> 00:07:05.440
And there's a lot of hard work.

00:07:05.570 --> 00:07:07.400
We explore a lot of dead ends.

00:07:07.420 --> 00:07:09.480
And we iterate constantly.

00:07:09.570 --> 00:07:14.120
And finally, at some point, we say, oh,
finally, we've solved this problem.

00:07:14.210 --> 00:07:17.230
And that's when we put
that in the product.

00:07:17.990 --> 00:07:19.810
So let's take an example.

00:07:19.980 --> 00:07:25.500
In 10.1, we wanted the DVD player
experience to be very,

00:07:25.500 --> 00:07:29.060
very smooth,
something like a consumer would expect.

00:07:29.080 --> 00:07:35.140
So you put the DVD, the media itself,
okay, in the computer,

00:07:35.140 --> 00:07:36.800
and of course the DVD player plays.

00:07:36.900 --> 00:07:40.970
Now at the same time,
we wanted to have some options because

00:07:41.030 --> 00:07:43.900
you may not want the DVD player to play.

00:07:43.900 --> 00:07:44.900
You may want to burn media.

00:07:44.900 --> 00:07:49.900
You may want to use
another app on your DVD.

00:07:49.900 --> 00:07:52.900
And so we wanted to
generalize that a little bit.

00:07:52.900 --> 00:07:55.900
We had the same problem
when the iPod came in.

00:07:55.900 --> 00:07:58.900
And that's why if you run 10.1,
you have these little applications

00:07:58.900 --> 00:08:01.900
that you may have seen,
the iPod helper.

00:08:01.900 --> 00:08:04.570
And again,
we wanted to have some control UI so that

00:08:04.580 --> 00:08:06.720
you can customize the user experience.

00:08:06.900 --> 00:08:08.900
that you need.

00:08:10.400 --> 00:08:17.310
So for Jaguar, we added a whole row in
the system preferences,

00:08:17.310 --> 00:08:22.620
and that's the digital hub set
of preferences of pref panes.

00:08:25.190 --> 00:08:26.640
Now, what's there?

00:08:26.690 --> 00:08:30.100
Well, of course,
you have the customization UI.

00:08:30.100 --> 00:08:35.100
And we've generalized for a number
of devices to have this general

00:08:35.100 --> 00:08:39.020
mechanism of when something
happens on a certain event,

00:08:39.140 --> 00:08:43.540
try to do a certain action,
which typically is launch an application.

00:08:43.630 --> 00:08:46.810
Now, we, of course,
put in the UI and preferences,

00:08:46.810 --> 00:08:49.360
but we also had to
architect how it works,

00:08:49.360 --> 00:08:50.930
the engine for that.

00:08:51.020 --> 00:08:53.140
We wanted everything to be event-driven.

00:08:53.250 --> 00:08:56.790
Obviously, on Mac OS X,
polling is not an option.

00:08:56.800 --> 00:08:58.690
That's not how you should
write those things.

00:08:58.750 --> 00:09:03.690
So you want to have a little
daemon that watches for events.

00:09:04.300 --> 00:09:07.320
Now, every time you have a daemon,
you need to think, OK,

00:09:07.320 --> 00:09:10.200
what is the performance impact
of having one more daemon?

00:09:10.200 --> 00:09:14.630
And if you can use,
reuse an existing daemon,

00:09:14.680 --> 00:09:18.000
in many cases that makes sense,
especially if the functionality matches.

00:09:18.040 --> 00:09:20.380
It turns out we had just
the right daemon for that.

00:09:20.450 --> 00:09:25.630
This thing called the System UI Server,
that's what puts up the menu bar,

00:09:25.630 --> 00:09:27.990
the right-hand side of the menu bar.

00:09:28.090 --> 00:09:35.750
And so we generalized this little daemon
to also support the digital hub refpans.

00:09:36.090 --> 00:09:40.720
So you can see how from a UI problem
we moved into architecture.

00:09:40.720 --> 00:09:44.840
And this is not a major overhaul
of how the system works.

00:09:44.840 --> 00:09:48.530
It's enhancement of the architecture.

00:09:48.630 --> 00:09:51.700
The general philosophy is to
start by solving a real need.

00:09:51.880 --> 00:09:54.240
You don't want to
over-architecture something,

00:09:54.240 --> 00:09:56.770
which is to essentially
not solve real needs.

00:09:56.890 --> 00:10:01.240
You want to just be right on,
using Occam's Razor to focus on

00:10:01.240 --> 00:10:03.300
the problem you need to solve.

00:10:03.410 --> 00:10:08.170
You don't want to rush into a hack,
you know, just put together a solution.

00:10:08.280 --> 00:10:11.860
You want to really think,
to put the right piece of functionality

00:10:11.940 --> 00:10:13.990
at the right place of the system.

00:10:14.090 --> 00:10:17.170
That's how you get a
great system over time,

00:10:17.170 --> 00:10:20.880
by always moving the pieces
upwards or downwards,

00:10:21.040 --> 00:10:25.210
depending on what it should be,
what is the right place.

00:10:25.900 --> 00:10:29.270
Your design and of course you implement.

00:10:29.270 --> 00:10:33.920
Hopefully the implementation once you
have a design should be fun and easy.

00:10:34.020 --> 00:10:37.300
And then once you have the
design in place you propagate.

00:10:37.370 --> 00:10:42.350
Usually you can rationalize the system
by simplifying things once you have

00:10:42.350 --> 00:10:44.800
this more general mechanism in place.

00:10:44.800 --> 00:10:48.800
Once you are happy you start thinking
about how to publish the API.

00:10:48.800 --> 00:10:52.120
Hopefully you have
devised an internal SPI,

00:10:52.120 --> 00:10:57.170
a system programming interface,
something that's private.

00:10:57.170 --> 00:11:02.470
And now you can think of
exposing that for everyone.

00:11:03.240 --> 00:11:05.440
So we're moving into API land.

00:11:05.440 --> 00:11:09.600
So there's a general kind
of philosophy about APIs.

00:11:09.600 --> 00:11:12.100
And APIs are totally
central to what we do.

00:11:12.100 --> 00:11:14.610
They're central to the conference.

00:11:14.720 --> 00:11:17.960
What we provide to you are APIs.

00:11:18.050 --> 00:11:21.600
Now, at the same time,
every time there's publishing

00:11:21.600 --> 00:11:23.710
an API that comes up,
there needs to be a

00:11:23.710 --> 00:11:28.030
warning signal for us,
which is, are those the right APIs?

00:11:28.100 --> 00:11:32.620
Because if we publish the wrong API,
we are limiting our capacity to

00:11:32.620 --> 00:11:37.430
innovate because we will be binary
compatible from release to release.

00:11:37.490 --> 00:11:41.040
And that imposes a very
tight constraint on us.

00:11:41.130 --> 00:11:43.880
So in many ways,
it is better to not have an

00:11:43.880 --> 00:11:46.120
API than having the wrong API.

00:11:46.260 --> 00:11:48.490
So I know sometimes you'll get
frustrated because you don't

00:11:48.570 --> 00:11:50.170
have the APIs that you'd like.

00:11:50.220 --> 00:11:52.830
And in many cases,
it's because we haven't come

00:11:52.830 --> 00:11:56.090
out yet with just the right API,
something that we believe

00:11:56.100 --> 00:11:57.750
we can support over time.

00:11:59.880 --> 00:12:05.850
We are developing internally
a culture of high quality API.

00:12:05.870 --> 00:12:11.320
The ideal life cycle for an API starts
with having this private API,

00:12:11.440 --> 00:12:14.540
using it in a number of places,
having more than one client.

00:12:14.600 --> 00:12:16.580
That's very important to get great APIs.

00:12:16.690 --> 00:12:19.080
You need to have several clients.

00:12:19.140 --> 00:12:21.780
You need to iterate at every step.

00:12:21.780 --> 00:12:25.210
Then once you are happy,
you have an internal review,

00:12:25.210 --> 00:12:27.790
a design meeting or some email review.

00:12:27.800 --> 00:12:34.010
Integrate the feedback, iterate again,
and finally present the API to you,

00:12:34.020 --> 00:12:38.800
for example at this conference,
and get your feedback.

00:12:38.800 --> 00:12:40.600
That's how we want to develop APIs.

00:12:40.840 --> 00:12:42.790
That's the ideal path.

00:12:42.800 --> 00:12:47.950
I've gone over a number of reasons
to essentially not have APIs,

00:12:48.030 --> 00:12:52.210
but be reassured we have
lots of new APIs in Jaguar.

00:12:52.330 --> 00:12:53.760
Lots and lots.

00:12:53.810 --> 00:12:57.010
We'll cover that after.

00:12:58.740 --> 00:13:02.200
Security is another interesting topic.

00:13:02.200 --> 00:13:05.630
We are not talking very
much about security.

00:13:05.760 --> 00:13:08.440
Fundamentally,
we want to keep a low profile

00:13:08.440 --> 00:13:10.690
on security for obvious reasons.

00:13:10.840 --> 00:13:13.820
But we are very sure that
we are very aware of all the

00:13:13.820 --> 00:13:15.690
things that go on in that space.

00:13:15.700 --> 00:13:19.520
We are constantly scanning
distribution lists,

00:13:19.650 --> 00:13:22.840
search advisories,
the web to find potential

00:13:22.840 --> 00:13:24.200
vulnerabilities.

00:13:24.240 --> 00:13:28.700
And of course, we are addressing those
vulnerabilities in software updates.

00:13:30.890 --> 00:13:33.230
Now,
that was kind of the vulnerability side.

00:13:33.290 --> 00:13:35.800
Now we also have some
new APIs for security.

00:13:35.800 --> 00:13:39.250
That's an area where we've added
quite a bit of API for Jaguar.

00:13:39.320 --> 00:13:44.520
We have API to deal with certificate
and of course you have Kerberos support

00:13:44.520 --> 00:13:49.480
and that comes with APIs so that once
you log in with Kerberos using your

00:13:49.480 --> 00:13:54.570
Kerberos signing in login window,
you can keep that session key and

00:13:54.690 --> 00:13:58.750
pass that token all the way to
the applications that needs it.

00:13:58.760 --> 00:14:03.440
For example, Mel may use that token and
connect to your Kerberos server.

00:14:05.580 --> 00:14:10.830
We have a number of APIs like
Keychain and the authorization

00:14:10.830 --> 00:14:16.590
API that were not very used in 10.1,
not used as much as we would have liked.

00:14:16.660 --> 00:14:22.280
So we are adopting internally those
APIs for a lot of the applications and

00:14:22.300 --> 00:14:26.780
we hope that you will adopt those APIs as
well because all those APIs make for

00:14:26.860 --> 00:14:29.330
a much more secure system fundamentally.

00:14:29.410 --> 00:14:34.500
As well as a very nice user
experience that you get with Keychain.

00:14:36.320 --> 00:14:41.050
Encrypted disk image is also
a very little-known feature.

00:14:41.050 --> 00:14:43.700
I've seen quite a number of
portables in the hallway.

00:14:43.700 --> 00:14:47.840
In fact, the vast majority of you
seem to have a portable,

00:14:47.840 --> 00:14:50.080
and you may have some sources.

00:14:50.220 --> 00:14:52.400
I strongly recommend,
if you have some sources

00:14:52.400 --> 00:14:54.610
on your portable,
that you encrypt them using

00:14:54.610 --> 00:14:56.060
the encrypted disk image.

00:14:56.250 --> 00:14:58.030
Now, the feature is a little hidden.

00:14:58.060 --> 00:15:01.080
You have to start the disk copy
application to get to that feature,

00:15:01.170 --> 00:15:02.230
but it works great.

00:15:02.290 --> 00:15:06.190
It's a safe way to put
your sources in the case,

00:15:06.240 --> 00:15:12.300
hopefully, that will never happen where
your portable disappears.

00:15:12.380 --> 00:15:17.200
We also added support for smart cars,
and that will be in Jaguar.

00:15:17.310 --> 00:15:19.210
And we have firewall support.

00:15:19.320 --> 00:15:22.190
Now, let's talk a second about firewall.

00:15:22.200 --> 00:15:26.200
We actually have shipped
a firewall since 10.0.

00:15:26.220 --> 00:15:28.200
It was there right from day one.

00:15:28.200 --> 00:15:32.070
However, there was no UI for it,
so something without a UI,

00:15:32.090 --> 00:15:34.200
we don't call that a feature.

00:15:34.200 --> 00:15:37.690
So, finally, we have added a UI for that.

00:15:37.800 --> 00:15:41.810
It starts with the sharing
pane of preferences,

00:15:42.080 --> 00:15:46.370
and there you have a new tab,
which is the firewall tab,

00:15:46.370 --> 00:15:50.790
and then you can protect
individually each port.

00:15:56.500 --> 00:15:58.300
Security is a set of frameworks.

00:15:58.300 --> 00:16:01.500
We have non-UI frameworks
and UI frameworks.

00:16:01.500 --> 00:16:04.700
What's underneath all that is CDSA.

00:16:05.020 --> 00:16:08.840
CDSA stands for the
Common Data Security Architecture and

00:16:08.840 --> 00:16:15.900
is a very extensive set of functionality
for providing all the basics of security,

00:16:15.900 --> 00:16:19.500
all kinds of encryption and algorithms.

00:16:19.500 --> 00:16:23.400
The key thing about CDSA is
that it's open source.

00:16:23.400 --> 00:16:27.500
It's an open group standard and you
can download the source for CDSA.

00:16:27.610 --> 00:16:29.390
This is essential.

00:16:29.390 --> 00:16:33.650
If you have a piece of
code that is open source,

00:16:33.650 --> 00:16:37.240
you can go see and you have lots of
people who will go see and find out all

00:16:37.240 --> 00:16:39.490
the potential security vulnerabilities.

00:16:39.500 --> 00:16:43.500
If it's not open source,
you should probably not trust that code.

00:16:43.500 --> 00:16:49.430
Fundamentally, open source brings the
highest level of security.

00:16:49.500 --> 00:16:50.500
Thank you.

00:16:52.380 --> 00:16:53.840
Now let's talk about functionality.

00:16:53.860 --> 00:16:58.260
Of course,
we added a lot more user functionality

00:16:58.470 --> 00:17:00.250
pretty much across board.

00:17:00.250 --> 00:17:03.600
Now we have a challenge when
we do that is to increase the

00:17:03.600 --> 00:17:08.770
breadth of the functionality
without making things more complex.

00:17:08.860 --> 00:17:13.040
We also want to add all these
functionalities so that fundamentally

00:17:13.040 --> 00:17:16.860
your applications have less code
because some of the code has

00:17:16.860 --> 00:17:19.060
moved downwards to the system.

00:17:19.150 --> 00:17:21.850
So we use a number of
techniques to do those things.

00:17:21.930 --> 00:17:26.910
We again iterate and think about
the user model and simplify that.

00:17:27.010 --> 00:17:31.570
We also use a lot the progressive
discovery technique in terms of the

00:17:31.610 --> 00:17:34.850
UI where you start with something
that's very simple and then you have

00:17:34.860 --> 00:17:38.220
a way to get to more functionality.

00:17:38.310 --> 00:17:43.350
And for simplifying the development
on the platform we have great

00:17:43.350 --> 00:17:48.550
frameworks and we have lots of
features added in those frameworks.

00:17:50.590 --> 00:17:54.880
So again, across board,
we are doing incremental improvements.

00:17:54.890 --> 00:17:59.330
We are continuing constantly
to improve performance,

00:17:59.330 --> 00:18:04.410
to improve polish,
those little nits that are sometimes

00:18:04.460 --> 00:18:09.980
just too small to even think about them,
but that just are annoying.

00:18:09.980 --> 00:18:14.720
So we constantly iterate
and try to improve on that.

00:18:14.720 --> 00:18:19.910
Same thing goes with the API additions,
adding this one convenience function

00:18:19.910 --> 00:18:23.280
that will save this whole page of code.

00:18:23.280 --> 00:18:28.540
And your feedback is critical for
iteration and for continual improvement.

00:18:31.910 --> 00:18:36.490
So we've talked about evolution,
now let's talk about revolution.

00:18:36.580 --> 00:18:39.620
Now when you think of revolution,
you may be thinking about

00:18:39.700 --> 00:18:42.290
the French Revolution.

00:18:44.960 --> 00:18:48.620
Now, when I think about revolution,
I'm thinking about something

00:18:48.620 --> 00:18:50.370
that's a little less violent.

00:18:50.370 --> 00:18:53.890
I'm thinking of the
fall of the Berlin Wall.

00:18:53.950 --> 00:18:58.400
It was, you know, a moment in time,
but it was also the

00:18:58.630 --> 00:19:00.320
result of deep trends.

00:19:00.580 --> 00:19:04.250
Communism, the fall of communism,
all those world events that

00:19:04.250 --> 00:19:06.000
you are very well aware of.

00:19:06.080 --> 00:19:09.600
I'm not going to go too much
into all those world events,

00:19:09.600 --> 00:19:13.770
and I'm going to talk on a smaller
scale on some of the big trends that

00:19:13.830 --> 00:19:16.780
I see in the industry and at Apple.

00:19:16.780 --> 00:19:20.460
Apple is at the leading edge
of the industry in many ways,

00:19:20.500 --> 00:19:24.020
and I'd like to just
present a few trends.

00:19:24.020 --> 00:19:27.900
One of the trends, of course,
is the digital hub.

00:19:28.580 --> 00:19:33.060
We are getting more and more surrounded
by electronic gadgets everywhere,

00:19:33.060 --> 00:19:35.240
like this thing I'm dealing with.

00:19:35.300 --> 00:19:41.630
And lots of those things are surrounding
us and are part of this digital hub.

00:19:41.670 --> 00:19:44.600
Now, I'm not going to talk about the
marketing side of those things,

00:19:44.600 --> 00:19:47.820
but what are the technology
implications of those things?

00:19:47.820 --> 00:19:52.660
You need a whole new set of technologies
to deal well with all those gadgets.

00:19:52.660 --> 00:19:56.280
You need to have, like,
a great OS that does, you know,

00:19:56.420 --> 00:19:58.120
multi-threading right at the base.

00:19:58.700 --> 00:20:01.000
You need to have
event-driven applications.

00:20:01.000 --> 00:20:04.360
And I mean much more than, you know,
the wait-next-event kind of thing.

00:20:04.360 --> 00:20:07.400
I really mean, like,
when something happens, okay,

00:20:07.400 --> 00:20:11.480
over the rendezvous network,
it propagates, okay,

00:20:11.480 --> 00:20:15.120
and something happens in terms of
launching an app or something like that.

00:20:15.120 --> 00:20:16.860
It needs to be all event-driven.

00:20:18.390 --> 00:20:21.880
I/O Kit,
which enables you to write very fast,

00:20:21.880 --> 00:20:24.040
great drivers, is critical.

00:20:24.040 --> 00:20:30.050
Lots of those devices have a driver,
a software driver corresponding to that.

00:20:30.120 --> 00:20:36.190
You need rich networking in all forms,
NAT, multi-homing, all those things.

00:20:36.290 --> 00:20:38.060
You need things like Bluetooth.

00:20:38.200 --> 00:20:41.890
All those are the basement
level technologies.

00:20:41.960 --> 00:20:43.620
Now you need higher level technologies.

00:20:43.690 --> 00:20:46.800
You need optimized signal processing.

00:20:46.800 --> 00:20:51.260
That's the kind of thing you can
get with a library like Veclib,

00:20:51.260 --> 00:20:54.590
which is the IT Vec
libraries that we offer.

00:20:54.690 --> 00:20:59.120
At the lowest level you need to be able
to deal with Unicode strings everywhere.

00:20:59.210 --> 00:21:01.890
That's the concept that you
have in Core Foundation along

00:21:01.930 --> 00:21:04.310
with many other concepts.

00:21:04.420 --> 00:21:08.550
Networking, QuickTime,
Multimedia is very present

00:21:08.550 --> 00:21:11.280
on many of those devices,
so you need to have also a

00:21:11.280 --> 00:21:13.520
great library to do multimedia.

00:21:13.520 --> 00:21:16.770
And you need to be able to put
together applications very quickly,

00:21:16.790 --> 00:21:19.770
and that's where Cocoa and
Rapid Development come in handy.

00:21:22.250 --> 00:21:26.250
Another trend that's very dear
to my heart is cafe computing.

00:21:26.250 --> 00:21:30.270
I spend a lot of time processing
my email or whatever with a

00:21:30.280 --> 00:21:32.300
cup of cappuccino in my hand.

00:21:32.350 --> 00:21:38.870
I know a lot of you do that because
there's a lot of internet cafes,

00:21:38.950 --> 00:21:42.860
especially in the Bay Area,
and portables have been exploding

00:21:42.860 --> 00:21:44.850
over the last few years.

00:21:44.930 --> 00:21:49.420
Many, many folks have a portable,
take their portable everywhere.

00:21:49.670 --> 00:21:54.550
Along with the portables have gone some
technologies like wireless technologies.

00:21:54.570 --> 00:21:57.600
The airport is again exploding.

00:21:57.600 --> 00:22:03.340
Mobility is great in Mac OS X as
well as power management.

00:22:03.350 --> 00:22:06.620
We've really worked hard
on those technologies.

00:22:08.230 --> 00:22:13.170
Now,
very often you have networking in place

00:22:13.360 --> 00:22:19.140
and you have a system administrator
that organizes the whole network.

00:22:19.220 --> 00:22:22.360
But at times you're in a cafe and you
would like just to exchange a file

00:22:22.360 --> 00:22:26.900
with your neighbor and there's no one
who manages the network at this point.

00:22:27.010 --> 00:22:30.800
So this is the world
of ad hoc networking.

00:22:30.890 --> 00:22:35.100
How to connect two computers
without system administration.

00:22:35.150 --> 00:22:40.640
And this is a problem because you
need to discover your neighbors.

00:22:40.660 --> 00:22:45.040
You need to have readable names
so that it works in every locale.

00:22:45.070 --> 00:22:48.860
And you need to do all that on top
of existing low-level networking,

00:22:48.860 --> 00:22:51.670
whether it's airport, IP, or whatever.

00:22:51.730 --> 00:22:54.980
And so this is,
is the solution Apple Talk?

00:22:55.130 --> 00:22:56.580
No.

00:22:56.890 --> 00:22:57.790
We know that.

00:22:57.940 --> 00:23:00.430
Apple Talk is game over.

00:23:00.440 --> 00:23:03.940
Apple Talk has been rejected
because it's non-standard.

00:23:04.030 --> 00:23:07.100
The solution is, of course, rendezvous.

00:23:07.200 --> 00:23:10.320
We will, in that conference,
use several nicknames to

00:23:10.400 --> 00:23:11.200
talk about Rendezvous.

00:23:11.200 --> 00:23:17.780
We'll use "ZeroConfig" or
"ZeroConf," but that's the same.

00:23:17.780 --> 00:23:17.780
Those are synonyms.

00:23:18.120 --> 00:23:22.930
Now, rendezvous fundamentally is
dynamic discovery over TCP/IP.

00:23:23.050 --> 00:23:28.650
It enables you to brass the
network and find all the rendezvous

00:23:28.890 --> 00:23:31.140
clients that can talk to you.

00:23:31.250 --> 00:23:33.840
It is done on top of existing protocols.

00:23:33.840 --> 00:23:36.300
It's done on top of TCP/IP.

00:23:36.420 --> 00:23:43.320
It's using DNS in a new way
to provide that functionality.

00:23:43.430 --> 00:23:45.300
And it's compatible
with existing clients.

00:23:45.300 --> 00:23:47.850
You don't need to have the
whole network switched at once.

00:23:47.920 --> 00:23:51.880
You can switch one machine at a time.

00:23:52.000 --> 00:23:54.070
And it's a standard that's in progress.

00:23:54.140 --> 00:23:55.880
Now, how does it work?

00:23:55.970 --> 00:24:00.250
Well, you say,
"Look up the printers nearby."

00:24:00.340 --> 00:24:04.530
And one printer who's nearby says,
"Hey, I'm Stuart's printer here."

00:24:04.600 --> 00:24:07.590
And another printer says,
"I'm Brett's printer here."

00:24:07.700 --> 00:24:10.920
So you collect all those
names over a period of time.

00:24:10.920 --> 00:24:13.280
It's definitely an asynchronous activity.

00:24:13.280 --> 00:24:15.040
You have to have a list
of names that are nearby.

00:24:15.070 --> 00:24:20.840
Then you look up again
using the same mechanism.

00:24:20.840 --> 00:24:24.020
Okay, so Stuart's printer,
what's the IP address?

00:24:24.020 --> 00:24:29.380
And Stuart's printer answers and says,
"I'm 123.45." And so finally,

00:24:29.380 --> 00:24:33.170
you have resolved the set
of printers down to IP.

00:24:33.370 --> 00:24:36.140
That's why it's on top of IP.

00:24:38.090 --> 00:24:47.340
Now we have defined a number
of conventions and policies on

00:24:47.340 --> 00:24:50.360
how to use ZeroConf Rendezvous.

00:24:50.360 --> 00:24:52.420
We also have defined several APIs.

00:24:52.420 --> 00:24:56.400
We have at the lowest
level the system framework,

00:24:56.400 --> 00:25:01.300
the Unix level kind of API that
any Unix application can use.

00:25:01.300 --> 00:25:05.030
And then we've built on top of that
a layer which is at the level of

00:25:05.050 --> 00:25:08.220
core foundation to use Rendezvous.

00:25:08.220 --> 00:25:11.530
And for those who use Cocoa,
we have a layer at the

00:25:11.530 --> 00:25:17.620
Cocoa level to make it easier
to talk to Rendezvous machines.

00:25:17.620 --> 00:25:21.790
And you've seen this morning we
have been using that for iTunes.

00:25:21.880 --> 00:25:25.720
We will be using that for
file system and for printing.

00:25:25.750 --> 00:25:32.170
And so a lot of subsystems are going to
participate in this Rendezvous network.

00:25:32.180 --> 00:25:37.000
But the most important is to have
your applications play in that world

00:25:37.000 --> 00:25:42.140
and use Rendezvous to do things that
frankly we are not even thinking about.

00:25:42.140 --> 00:25:46.610
So your creativity I'm sure will generate
something fantastic with this technology.

00:25:49.800 --> 00:25:55.060
Now, another trend maybe is B2B, C2B,
P2P.

00:25:55.060 --> 00:25:59.140
There's a lot of acronyms out there,
so maybe there's a trend out of that.

00:25:59.220 --> 00:26:01.160
And I think there is.

00:26:01.370 --> 00:26:03.860
For me, the key trend is P2P.

00:26:03.860 --> 00:26:09.760
Now, when I say P2P,
what I really mean is people to people.

00:26:09.910 --> 00:26:13.230
A lot of what we do every
day is about communication,

00:26:13.230 --> 00:26:16.170
about communication with other people.

00:26:16.250 --> 00:26:19.670
I spend a lot of time,
and I'm sure you do, using mail.

00:26:19.670 --> 00:26:22.640
You've seen this morning a lot of the
new features that we have in mail.

00:26:22.640 --> 00:26:28.060
We are putting a lot of effort in
getting really great mail systems that

00:26:28.060 --> 00:26:34.370
scale all the way from the novice to the
professional who depends on mail a lot.

00:26:35.540 --> 00:26:37.780
This morning again you saw iChat.

00:26:37.930 --> 00:26:42.390
Instant messaging is another form of
communication that is widely used.

00:26:42.400 --> 00:26:46.460
Maybe it's the most widely used
form of communication in the world.

00:26:46.520 --> 00:26:50.500
Again,
we're putting a lot of energy into this.

00:26:50.500 --> 00:26:54.760
And what's underneath all those
things is dealing with addresses,

00:26:54.810 --> 00:26:58.500
dealing with people, managing contacts.

00:26:58.500 --> 00:27:01.500
So we've done a little more than
just develop an application.

00:27:01.500 --> 00:27:06.660
We have developed a
database to manage contacts.

00:27:06.660 --> 00:27:10.480
And all those applications
I mentioned are using the database.

00:27:10.560 --> 00:27:15.810
It's really the hub for all
communication applications.

00:27:17.300 --> 00:27:21.480
So we have a number of big
trends that are industry trends,

00:27:21.480 --> 00:27:26.600
but that are also things
that we espouse very deeply.

00:27:26.670 --> 00:27:34.790
So digital hub, cafe computing,
ad hoc networking, and P2P.

00:27:35.840 --> 00:27:41.340
All those thrusts are leveraging
our strength in many ways.

00:27:41.390 --> 00:27:45.620
Because we do the whole system,
all the way from hardware to software,

00:27:45.730 --> 00:27:50.060
we can really integrate them
nicely and make them easy to use.

00:27:50.170 --> 00:27:54.860
We have a great platform to start with,
with lots of great technologies.

00:27:54.980 --> 00:27:59.460
And we all share the same
vision of bringing those great

00:27:59.460 --> 00:28:01.990
technologies to everyone.

00:28:02.100 --> 00:28:04.320
And when I say we all
share the same vision,

00:28:04.320 --> 00:28:07.100
I know that my colleagues
share the same vision,

00:28:07.100 --> 00:28:10.400
but also you in the
overall Apple community.

00:28:10.540 --> 00:28:14.290
So I think by reusing all of us,
reusing all those technologies,

00:28:14.290 --> 00:28:17.360
we can have something
which is really fantastic.

00:28:26.790 --> 00:28:28.940
So I've been talking about
evolution and revolution.

00:28:28.940 --> 00:28:34.150
I'd like to take one area, which is Unix,
and talk for a second on how those

00:28:34.150 --> 00:28:37.700
things kind of come to play for Unix.

00:28:39.060 --> 00:28:42.010
Now I don't know how
many of you saw this ad:

00:28:42.010 --> 00:28:50.380
"Send over Unix boxes to /dev/null".
It's quite a departure from the other

00:28:50.380 --> 00:28:56.090
ads that Apple has had over the years,
which are very, very consumer-centric.

00:28:56.160 --> 00:28:59.400
This one is definitely not for consumers.

00:28:59.530 --> 00:29:02.950
Very few consumers know
what "dev/null" means.

00:29:03.010 --> 00:29:05.330
It's very Unix-y.

00:29:05.960 --> 00:29:09.150
Now,
I think it's fair to say that adopting

00:29:09.150 --> 00:29:11.860
Unix was in many ways a revolution.

00:29:11.920 --> 00:29:13.580
Apple OS is now Unix-based.

00:29:13.700 --> 00:29:19.080
I think this is something that
very few out there realize.

00:29:20.080 --> 00:29:24.590
Now, it has been somewhat well
documented why we've done that move.

00:29:24.600 --> 00:29:27.000
That was in fact very
logical when you think of it.

00:29:27.000 --> 00:29:32.270
Unix is a very mature, solid,
proven foundation and we wanted

00:29:32.570 --> 00:29:36.110
to go mainstream and adopt
a whole bunch of standards,

00:29:36.110 --> 00:29:37.910
standard technologies.

00:29:38.780 --> 00:29:42.150
What is maybe less known
is that for us that was the

00:29:42.180 --> 00:29:44.320
fastest way to many features.

00:29:44.380 --> 00:29:46.980
Let's take networking for example.

00:29:46.980 --> 00:29:52.240
The Unix networking stacks have been
iterated over several decades and they've

00:29:52.240 --> 00:29:58.700
had like several hundred developers at a
minimum participating in the development.

00:29:58.700 --> 00:30:03.710
There is no way we could have
replicated these thousands of person

00:30:03.710 --> 00:30:08.430
years of development by just us,
by just a few of us just trying

00:30:08.430 --> 00:30:10.760
to develop a competing stack.

00:30:12.090 --> 00:30:16.660
Now another thing of course with Unix
is that we can address now new markets.

00:30:16.660 --> 00:30:20.030
We can go towards the
scientific computing,

00:30:20.290 --> 00:30:23.740
the higher ed, the enterprise markets.

00:30:23.840 --> 00:30:28.840
So these two last points are less
obvious and another thing about those

00:30:28.850 --> 00:30:31.130
is that all these things apply for you.

00:30:31.290 --> 00:30:35.200
You can come along with us,
attack new markets.

00:30:35.270 --> 00:30:39.770
And rather than reinvent the wheel,
you can have a higher level

00:30:40.100 --> 00:30:45.210
application that uses some of the
features that are built in in Unix.

00:30:46.850 --> 00:30:51.500
Now I'd like to give you my
personal view on what explains

00:30:51.500 --> 00:30:53.700
the Unix longevity and strength.

00:30:53.700 --> 00:30:58.320
There are some reasons that are
technological reasons and some other

00:30:58.320 --> 00:30:59.700
reasons that are less technological.

00:30:59.700 --> 00:31:02.700
So let's look at the
technology reasons first.

00:31:02.700 --> 00:31:06.700
In many ways,
Unix has write low-level abstraction.

00:31:06.700 --> 00:31:08.700
You know, open, read, write.

00:31:08.700 --> 00:31:11.700
That's write API for dealing
with a low-level file.

00:31:11.700 --> 00:31:16.700
And there's many examples of those
technologies just done right with Unix.

00:31:16.700 --> 00:31:20.700
The whole piping concept, you know,
all those things, just is great.

00:31:20.700 --> 00:31:26.190
There's a very clear separation
between what's at the kernel

00:31:26.190 --> 00:31:29.320
layer and what's in user space.

00:31:29.340 --> 00:31:53.490
And that's a very tight boundary
that in many cases is like,

00:31:53.490 --> 00:31:53.490
you know,
a little hard when you come from a

00:31:53.490 --> 00:31:53.490
world where you can have a driver
that suddenly puts up a UI and says,

00:31:53.490 --> 00:31:53.490
ask a question to the user.

00:31:53.490 --> 00:31:53.490
So that's a source of tightness,
but that's also what makes Unix

00:31:53.490 --> 00:31:53.490
great in terms of robustness,
having a very well-defined

00:31:53.490 --> 00:31:53.490
boundary for things like Cisco.

00:31:53.880 --> 00:31:59.680
In terms of UI and non-UI, again,
there's been a very clear separation.

00:31:59.850 --> 00:32:02.440
Some of the UIs have
come and gone on Unix.

00:32:02.520 --> 00:32:04.420
They were not that great.

00:32:04.420 --> 00:32:08.470
But that was a source of weakness,
but also a source of strength,

00:32:08.470 --> 00:32:12.470
because it meant that the separation
between what's UI and what's

00:32:12.470 --> 00:32:17.150
non-UI has maintained very well,
and the APIs are very clear there.

00:32:17.800 --> 00:32:20.810
Unix also has this
philosophy of small blocks.

00:32:20.870 --> 00:32:23.820
To program in Unix you
take these little tools,

00:32:23.820 --> 00:32:28.000
you plug them together using the shell,
and build something greater.

00:32:28.110 --> 00:32:32.160
In fact, loose integration via scripting,
shell scripting,

00:32:32.280 --> 00:32:36.060
has been really the way people have
gotten their work done on Unix.

00:32:36.170 --> 00:32:39.950
And if you look at most of
the scripting languages,

00:32:39.950 --> 00:32:44.990
you know, Python, Perl, the CGIB,
all those things started on Unix.

00:32:45.020 --> 00:32:47.480
And there's a good reason for that.

00:32:47.570 --> 00:32:50.260
That's part of the philosophy of Unix.

00:32:51.610 --> 00:32:55.150
Now there's also some less
technological reasons.

00:32:55.150 --> 00:32:59.880
Because there was not much
room to grow on the desktop,

00:32:59.910 --> 00:33:02.100
some companies have turned to the server.

00:33:02.100 --> 00:33:04.790
Some Unix companies turned to the server.

00:33:04.900 --> 00:33:10.300
And from that server focus there's been a
much greater reliability and scalability.

00:33:10.380 --> 00:33:15.790
Unix is a way to get a reliable server,
of course.

00:33:15.970 --> 00:33:19.610
Also, there's been this Darwinian
evolution that took place in the

00:33:19.610 --> 00:33:22.620
80s when there was a Unix world,
different flavors of Unix,

00:33:22.660 --> 00:33:27.900
and out of all that,
a refinement has occurred.

00:33:27.960 --> 00:33:34.600
Now, for the last few years,
Linux and FreeBSD have started passions,

00:33:34.680 --> 00:33:38.160
and that's associated with
the open source movement,

00:33:38.290 --> 00:33:44.900
which is both a technical and political
and sociological kind of movement.

00:33:45.020 --> 00:33:48.530
and that we're definitely embracing.

00:33:49.440 --> 00:33:55.700
Finally, when we want to hire,
it used to be that we had to

00:33:55.720 --> 00:34:01.510
look for kids out of school that
had this Mac Toolbox experience,

00:34:01.510 --> 00:34:03.160
and that was really hard to find.

00:34:03.280 --> 00:34:06.560
Nowadays,
we can look for people coming out of

00:34:06.560 --> 00:34:10.620
school that have the Unix experience,
and I'm sure you can do

00:34:10.660 --> 00:34:11.880
the same when you hire.

00:34:12.010 --> 00:34:15.700
That's quite different in numbers.

00:34:18.910 --> 00:34:22.100
Now, what is the relationship
of Mac OS X and Unix?

00:34:22.260 --> 00:34:25.550
Obviously,
we are adding a lot of stuff onto Unix.

00:34:25.570 --> 00:34:28.010
I mean, after all,
we have a Unix bug that

00:34:28.010 --> 00:34:29.700
can run Microsoft Office.

00:34:29.890 --> 00:34:31.530
That's fairly rare.

00:34:31.530 --> 00:34:36.800
So clearly, we all together are adding
value on top of the best Unix.

00:34:36.900 --> 00:34:42.520
But let me reassure you that we
want to preserve Unix's strength

00:34:42.520 --> 00:34:45.800
and its philosophy the way it is.

00:34:45.820 --> 00:34:47.570
So we will add value on top.

00:34:47.640 --> 00:34:50.790
We will also, at times,
change Unix itself.

00:34:50.790 --> 00:34:52.270
We will improve the best.

00:34:52.320 --> 00:34:56.760
We will add, you know, mobility support,
power management, drivers.

00:34:56.800 --> 00:35:00.600
I mean, we'll do a certain number of
modifications because we have

00:35:00.600 --> 00:35:02.080
a business need to do so.

00:35:02.080 --> 00:35:04.800
But we will only do
that where we add value.

00:35:05.080 --> 00:35:08.790
Another thing that we will
do is clean up the APIs.

00:35:08.860 --> 00:35:12.800
Unix has not been designed to be binary
compatible from release to release.

00:35:12.800 --> 00:35:13.780
And of course, we have to.

00:35:13.780 --> 00:35:18.800
And so that's another place where we'll
clean up the header of Unix over time.

00:35:19.660 --> 00:35:23.330
So again,
we will only deviate if we have a

00:35:23.430 --> 00:35:25.800
very good justification to do so.

00:35:28.920 --> 00:35:33.260
Now, all that's kind of the philosophy,
now what are we doing for Jaguar?

00:35:33.260 --> 00:35:35.400
Some of that was partially
covered this morning,

00:35:35.400 --> 00:35:36.900
but I'll reiterate it.

00:35:36.970 --> 00:35:43.060
We have refreshed a lot of the stacks
that we got from the open source world.

00:35:43.070 --> 00:35:46.980
We have refreshed the POSIX APIs,
we have the latest

00:35:47.080 --> 00:35:48.850
APIs in many dimensions.

00:35:48.900 --> 00:35:53.900
We have refreshed our networking stack,
IPv6, IPsec.

00:35:53.900 --> 00:35:58.900
We've updated a number of commands like
Emacs that maybe some of you may use.

00:35:58.900 --> 00:36:03.890
Libraries like Curses, LibC, Shell, Bash.

00:36:03.900 --> 00:36:08.740
We also added PAMS, that's the Plugable
Authentication Module,

00:36:08.740 --> 00:36:12.930
which are very important to
connect to other systems that

00:36:13.010 --> 00:36:15.710
don't use the same authentication.

00:36:15.900 --> 00:36:18.900
Of course, GCC3,
that has been talked about.

00:36:18.900 --> 00:36:22.900
And Terminal, we have done quite a lot of
improvements in Terminal.

00:36:22.900 --> 00:36:28.690
The most notable is the UTF-8 support,
which means that, for example,

00:36:28.690 --> 00:36:32.090
Japanese finance will
finally display right,

00:36:32.090 --> 00:36:34.240
double byte languages.

00:36:37.700 --> 00:36:40.300
We are also adding a lot to Unix.

00:36:40.370 --> 00:36:45.460
We have added Samba both for
the client and for the server,

00:36:45.460 --> 00:36:47.600
both client side and server side.

00:36:47.770 --> 00:36:48.590
Python.

00:36:48.660 --> 00:36:51.880
We've decided to replace
our printing backend,

00:36:51.880 --> 00:36:57.600
the spooling architecture, with CUPS,
which was in some ways a bold move,

00:36:57.600 --> 00:37:00.110
which does not disrupt
any of the applications,

00:37:00.110 --> 00:37:02.590
of course,
because the API remains the same,

00:37:02.590 --> 00:37:06.600
but which brings us another
kind of additional reliability.

00:37:06.600 --> 00:37:07.800
Thank you.

00:37:08.050 --> 00:37:14.100
We're integrating VPN, PPTP, LDAP,
both in terms of having the

00:37:14.120 --> 00:37:20.360
client be a great client for
non-Mac servers and vice versa.

00:37:20.430 --> 00:37:24.380
Integrating to non-Mac clients.

00:37:25.430 --> 00:37:32.340
Open Directory is the name for
the directory service adoption.

00:37:32.340 --> 00:37:37.300
We are going through this layer
that enables us again to redirect.

00:37:37.300 --> 00:37:41.130
In computer science,
one direction buys you a lot.

00:37:41.330 --> 00:37:45.430
Open Directory is this direction
that enables you to redirect to

00:37:45.770 --> 00:37:47.820
different directory services.

00:37:49.220 --> 00:37:50.180
So UNIX.

00:37:50.380 --> 00:37:52.340
UNIX is about power.

00:37:52.340 --> 00:37:57.990
UNIX was a revolutionary move
and now we are evolving it.

00:37:59.690 --> 00:38:03.700
So now what I'd like to do is to ask
Scott Forstall to come back again

00:38:03.790 --> 00:38:07.780
on stage and talk about frameworks.

00:38:15.310 --> 00:38:17.650
Alright, let's talk frameworks.

00:38:17.650 --> 00:38:24.680
So Bertrand said, you know,
we've been evolving for revolution.

00:38:24.740 --> 00:38:27.480
This last year we've been evolving
the frameworks as quickly as

00:38:27.480 --> 00:38:32.960
possible to allow you to create these
revolutionary applications on Mac OS X.

00:38:33.760 --> 00:38:37.000
So let me tell you,
Jaguar is one involved cat.

00:38:37.050 --> 00:38:38.840
What have we done this year?

00:38:39.100 --> 00:38:40.400
We've done a bunch of
networking improvements.

00:38:40.430 --> 00:38:42.340
I'll talk about all these in a minute.

00:38:42.380 --> 00:38:45.600
We've added web services client support.

00:38:45.780 --> 00:38:48.000
The address book APIs we talked
about a little bit this morning

00:38:48.000 --> 00:38:50.020
and I'll get into a little more.

00:38:50.120 --> 00:38:54.460
We've improved upon our already
outstanding international support.

00:38:54.540 --> 00:38:57.340
We've added really good
universal access support.

00:38:57.420 --> 00:39:00.800
And we've made improvements
to both Cocoa and Carbon.

00:39:00.850 --> 00:39:04.300
And very interestingly,
we've added some integration support.

00:39:04.450 --> 00:39:06.530
So stay tuned.

00:39:06.610 --> 00:39:08.860
All right, let's talk about networking.

00:39:09.720 --> 00:39:11.690
So let's say you've got a URL.

00:39:11.710 --> 00:39:12.660
What do you do with it?

00:39:12.680 --> 00:39:14.940
You want the data back.

00:39:14.940 --> 00:39:19.160
Well, the high level APIs are if
you're a Carbon application,

00:39:19.160 --> 00:39:20.630
you use URL access.

00:39:20.680 --> 00:39:25.380
If you're a Cocoa application,
you use NSURL and NSURL handle.

00:39:25.380 --> 00:39:28.520
And these are nice,
very simple high level APIs.

00:39:28.520 --> 00:39:30.960
You pass it a URL,
it hands you back the data.

00:39:30.960 --> 00:39:33.150
You don't care what the schema is.

00:39:33.470 --> 00:39:36.640
Everything just happens for you.

00:39:36.640 --> 00:39:39.620
But what if you want to
control a transaction?

00:39:39.620 --> 00:39:42.380
Or what if you want really,
really fast speed?

00:39:42.380 --> 00:39:43.590
Simple, right?

00:39:43.630 --> 00:39:45.400
You drop down to sockets.

00:39:45.400 --> 00:39:48.270
Sockets,
you can go as fast as you possibly can.

00:39:48.320 --> 00:39:51.880
But this is like dropping from
the 20th floor to the cellar.

00:39:51.970 --> 00:39:54.030
You've got to rebuild everything.

00:39:54.030 --> 00:39:56.270
You have to write your own HTTP engine.

00:39:56.270 --> 00:39:59.190
You have to do all your
own networking code.

00:39:59.190 --> 00:40:01.530
But you can use the sockets piece.

00:40:01.770 --> 00:40:05.720
What we've done this year is
we've filled that gap and we

00:40:05.720 --> 00:40:08.190
added something called CF Network.

00:40:08.190 --> 00:40:11.630
So CF Network has more
power than sockets,

00:40:11.730 --> 00:40:15.970
a lot more functionality,
but it's much more configurable

00:40:15.970 --> 00:40:18.210
than the high level APIs.

00:40:18.290 --> 00:40:21.600
So CF Network, it really gives you power,
it gives you control,

00:40:21.650 --> 00:40:23.890
and it gives you speed.

00:40:23.970 --> 00:40:26.070
Let's talk about the power.

00:40:28.400 --> 00:40:32.160
It has a full 1.1 HTTP engine built in.

00:40:32.350 --> 00:40:36.360
That means now with CF Network you
have digest authentication,

00:40:36.360 --> 00:40:38.360
you have persistent pipeline connections.

00:40:38.400 --> 00:40:38.830
It's great.

00:40:39.050 --> 00:40:40.800
Full HTTP 1.1.

00:40:40.960 --> 00:40:44.490
Security's built in,
and it has rendezvous or net

00:40:44.490 --> 00:40:46.300
service APIs built in as well.

00:40:46.300 --> 00:40:50.370
So if you want to use zero conf,
go straight to CF Network.

00:40:50.740 --> 00:40:52.700
That also gives you control.

00:40:52.790 --> 00:40:55.350
So you can manipulate
the transaction directly.

00:40:55.430 --> 00:40:59.240
That means if you want to add headers,
remove headers, you want to control when

00:40:59.240 --> 00:41:02.640
bytes are read or written,
you can do all of this from CF Network.

00:41:02.700 --> 00:41:05.990
And you get to choose the
threading model as well.

00:41:07.410 --> 00:41:10.170
But probably most importantly,
even with all of that,

00:41:10.250 --> 00:41:11.390
it gives you speed.

00:41:11.400 --> 00:41:13.990
It's very, very fast.

00:41:14.700 --> 00:41:20.980
If a network packet leaves your machine
to go out to the network at all,

00:41:20.980 --> 00:41:24.760
then CF Network is as
fast as raw sockets.

00:41:24.760 --> 00:41:26.800
So it's very, very fast.

00:41:26.850 --> 00:41:31.990
Gives you a very small footprint,
and even if you have a non-UI daemon,

00:41:32.000 --> 00:41:33.150
you can link against this.

00:41:33.280 --> 00:41:35.820
So even for low-level
to high-level things,

00:41:35.820 --> 00:41:37.380
you can use CF Network.

00:41:38.090 --> 00:41:39.560
We use it throughout.

00:41:39.700 --> 00:41:42.410
Where we're doing networking code,
you know, Sherlock uses it.

00:41:42.710 --> 00:41:46.410
In fact,
when we moved Sherlock on to CF Network,

00:41:46.500 --> 00:41:50.260
we got almost an order of
magnitude speed improvement.

00:41:50.360 --> 00:41:52.550
iPhoto uses it for
uploading photos to the web,

00:41:52.550 --> 00:41:54.250
so we use it all over the place.

00:41:54.350 --> 00:41:55.460
So we encourage you to as well.

00:41:55.620 --> 00:41:56.630
Networking.

00:41:56.740 --> 00:42:00.340
We're really improving
our networking support.

00:42:00.440 --> 00:42:02.340
What's next?

00:42:02.440 --> 00:42:04.360
Web services.

00:42:05.760 --> 00:42:09.130
The great thing about having
a good networking base like

00:42:09.260 --> 00:42:11.700
CF Network is we can build on it.

00:42:11.810 --> 00:42:12.890
And that's exactly what we're doing.

00:42:13.000 --> 00:42:16.960
We're building web services
on top of CF Network.

00:42:17.530 --> 00:42:21.860
So what the heck is web service,
or a web service?

00:42:21.960 --> 00:42:25.010
You know, is it MS web services?

00:42:26.930 --> 00:42:29.300
Web services,
let's start with some examples.

00:42:29.460 --> 00:42:31.290
So Google has a web service.

00:42:31.430 --> 00:42:33.580
And the web service for Google,
not surprisingly,

00:42:33.600 --> 00:42:38.010
is you pass it a string and it responds
with a search query or a search result.

00:42:38.060 --> 00:42:39.460
Okay, that's their web service.

00:42:39.540 --> 00:42:41.160
It's not a web page, it's a web service.

00:42:41.160 --> 00:42:45.400
Babelfish, you pass it some text,
does a translation, and it, you know,

00:42:45.400 --> 00:42:47.700
responds with the translated text.

00:42:47.800 --> 00:42:51.770
So again, there are many,
many different services,

00:42:51.770 --> 00:42:54.730
and the difference is
they're not web pages,

00:42:54.730 --> 00:42:55.770
they're APIs.

00:42:55.860 --> 00:42:58.960
So let's define a web service.

00:42:59.090 --> 00:43:00.850
Let's just look at the two words,
web and service,

00:43:00.860 --> 00:43:02.360
and we'll start with service.

00:43:02.360 --> 00:43:05.350
So a web service, it's a service,
it's a set of APIs,

00:43:05.350 --> 00:43:10.100
it's a set of functionality which
is presented as that set of APIs.

00:43:10.100 --> 00:43:12.360
But the web part's really important, too.

00:43:12.520 --> 00:43:15.200
These APIs are callable over the web.

00:43:15.200 --> 00:43:18.260
So really a web service is
just a remote method call,

00:43:18.350 --> 00:43:20.600
a remote function call over the web.

00:43:20.600 --> 00:43:22.650
Now here's where you get
into all these acronyms,

00:43:22.750 --> 00:43:23.200
right?

00:43:23.200 --> 00:43:24.900
There's, it's generally packaged
as a SOAP package.

00:43:24.920 --> 00:43:30.960
Use XML to construct your parameters.

00:43:31.300 --> 00:43:33.760
Sometimes it goes as XML RPC.

00:43:33.930 --> 00:43:36.260
Use HTTP as the transport layer,
generally.

00:43:36.300 --> 00:43:38.160
I mean,
there's all these different acronyms,

00:43:38.160 --> 00:43:41.530
but very simply,
we have a set of APIs that

00:43:41.610 --> 00:43:43.720
are callable over the web.

00:43:44.960 --> 00:43:47.880
So what have we done?

00:43:48.000 --> 00:43:50.550
Number one, we're supporting standards.

00:43:50.610 --> 00:43:52.050
We're just supporting the standards.

00:43:52.170 --> 00:43:56.060
We're not going to pelt you
over the head with a hailstorm

00:43:56.280 --> 00:43:58.850
of proprietary protocols.

00:44:00.610 --> 00:44:04.940
We are supporting just the standards
that everyone out there has been using,

00:44:04.940 --> 00:44:08.940
XML, XMLRPC, SOAP, all built in.

00:44:09.820 --> 00:44:12.800
Now, in X.1,
we actually added some web support,

00:44:12.800 --> 00:44:13.800
web services support.

00:44:14.060 --> 00:44:17.840
We made the Apple Event Manager web
service aware,

00:44:17.970 --> 00:44:21.460
which means that since X.1,
our Apple Script customers,

00:44:21.460 --> 00:44:23.540
and Apple Script is
built on Apple Events,

00:44:23.750 --> 00:44:26.030
have been able to use web services.

00:44:26.140 --> 00:44:28.390
What we're doing for Jaguar
is taking that whole layer

00:44:28.390 --> 00:44:29.740
and moving it down a level.

00:44:29.900 --> 00:44:36.270
So there's going to be a C API callable
by any of your applications to

00:44:36.270 --> 00:44:39.660
do so XML RPC to do web services.

00:44:39.660 --> 00:44:42.590
That's web services.

00:44:46.030 --> 00:44:48.010
And I really encourage you, you know,
write web services,

00:44:48.120 --> 00:44:51.240
take advantage of them,
and let's just use the standards.

00:44:51.410 --> 00:44:53.740
Address Book APIs.

00:44:54.910 --> 00:44:58.790
If you look at almost
anyone's machine today,

00:44:58.800 --> 00:45:02.480
there are many,
many databases of different bits

00:45:02.570 --> 00:45:04.970
of information about people.

00:45:05.170 --> 00:45:09.740
So some of these databases,
if you look at, for email, for PIMS,

00:45:09.830 --> 00:45:13.870
it'll be a really large database with,
you know, people's names and phone

00:45:13.870 --> 00:45:17.260
numbers and fax numbers,
lots of information.

00:45:17.320 --> 00:45:18.600
But if you look at some
of these other apps,

00:45:18.600 --> 00:45:20.300
you might be surprised
that I put them up there,

00:45:20.300 --> 00:45:21.830
like a web browser.

00:45:21.880 --> 00:45:23.840
Well, it turns out that a lot
of web browsers allow you,

00:45:23.840 --> 00:45:27.470
when you're shopping on the web,
to do an auto form fill of, say,

00:45:27.530 --> 00:45:28.860
the shipping address.

00:45:28.920 --> 00:45:30.280
Right?

00:45:30.330 --> 00:45:33.060
So they have a little database of your
shipping address that they fill in.

00:45:33.110 --> 00:45:40.060
What we're doing in Jaguar is providing
a central database and a central set of

00:45:40.060 --> 00:45:43.020
APIs for every one of these apps to use.

00:45:43.100 --> 00:45:46.140
So instead of recreating your
own database and having the user

00:45:46.240 --> 00:45:50.160
enter it every single time and
synchronize it between applications,

00:45:50.240 --> 00:45:51.660
there is one API.

00:45:51.960 --> 00:45:53.540
Now, the API is really powerful.

00:45:53.830 --> 00:45:58.570
The API, you know, you can set, you know,
name and phone number and address and

00:45:58.570 --> 00:46:00.220
all these different types of things.

00:46:00.280 --> 00:46:02.590
You can put tags and labels on them.

00:46:02.680 --> 00:46:05.890
You can have international addresses,
so it'll look at the different, you know,

00:46:05.900 --> 00:46:06.280
an address.

00:46:06.340 --> 00:46:11.140
You can have an English address,
a Japanese address, have it formatted.

00:46:11.630 --> 00:46:16.420
But one of the really strong concept
in here is the concept of me,

00:46:16.500 --> 00:46:17.530
of the user.

00:46:17.620 --> 00:46:19.980
And so you can ask, okay,
for the user who's currently

00:46:20.050 --> 00:46:23.000
running the system,
what is their shipping address?

00:46:23.000 --> 00:46:24.000
What is their name?

00:46:24.000 --> 00:46:25.160
What is their phone number?

00:46:25.200 --> 00:46:28.600
So I really encourage you,
if you have any-- an app which

00:46:28.640 --> 00:46:31.810
uses anything about people,
about, you know, their shipping address,

00:46:31.840 --> 00:46:37.160
or about phone numbers or e-mails or,
you know, AIM or iChat IDs,

00:46:37.300 --> 00:46:39.910
go ahead and take advantage of this API.

00:46:41.320 --> 00:46:43.700
There's the address book, so.

00:46:43.790 --> 00:46:46.380
Let's talk about our international story.

00:46:47.060 --> 00:46:52.240
Mac OS X is truly an international OS.

00:46:52.250 --> 00:46:57.300
We feel very strongly about
supporting this throughout the world.

00:46:58.600 --> 00:47:01.390
When we shipped,
we had a single installation and we

00:47:01.410 --> 00:47:03.660
continue to have a single installation.

00:47:03.660 --> 00:47:07.540
Now we have a single installation
for 15 different languages.

00:47:07.680 --> 00:47:11.730
What that means is on a single machine,
I can log in in English.

00:47:11.850 --> 00:47:16.730
When I log out, Bertrand can log in and
everything appears as French.

00:47:17.010 --> 00:47:17.710
Single machine.

00:47:17.770 --> 00:47:20.940
You have a server and we're pointing
at the same server and he runs

00:47:20.940 --> 00:47:23.090
an application off the server,
it runs in French.

00:47:23.170 --> 00:47:26.360
I run an application off the server,
it runs in English.

00:47:27.380 --> 00:47:30.940
One reason for this, of course,
is just money.

00:47:31.040 --> 00:47:32.940
Half of our revenue comes
from outside the US,

00:47:33.000 --> 00:47:35.680
and, you know, we like to make money.

00:47:38.820 --> 00:47:40.460
From the time we shipped,
we've been supporting

00:47:40.460 --> 00:47:43.640
the Unicode standard.

00:47:43.730 --> 00:47:47.430
And we support this really from
top to bottom of the system.

00:47:47.540 --> 00:47:48.940
All the way down to the file system.

00:47:49.030 --> 00:47:50.620
So you don't go to a web
page and get garbled text,

00:47:50.620 --> 00:47:50.940
right?

00:47:50.940 --> 00:47:53.290
We support Unicode throughout.

00:47:55.190 --> 00:47:58.100
One thing we did this year to
better support international

00:47:58.100 --> 00:48:02.160
customers is we added spell checking
support for these languages.

00:48:02.200 --> 00:48:07.310
So there's-- Absolutely.

00:48:09.620 --> 00:48:11.750
But we also added this
really clever thing,

00:48:12.250 --> 00:48:14.500
which is a multilingual setting.

00:48:14.640 --> 00:48:18.500
And this actually tries to figure out
what language you're typing at the time,

00:48:18.500 --> 00:48:21.500
and then use the spell
checker for that language.

00:48:21.500 --> 00:48:24.890
So, again, a personal example,
Bertrand sends me mail,

00:48:24.890 --> 00:48:27.940
and sometimes it's in English,
and sometimes it's in French,

00:48:27.940 --> 00:48:29.500
and sometimes it's in Franglais.

00:48:29.500 --> 00:48:34.070
And he doesn't want it as he's
typing English to say everything's

00:48:34.130 --> 00:48:36.470
misspelled just because he's
running the system in French.

00:48:36.500 --> 00:48:40.130
And so this will figure out when
he's typing in English and use the

00:48:40.130 --> 00:48:42.250
English spell checker for that.

00:48:43.170 --> 00:48:46.100
We've also greatly improved
the spelling algorithm.

00:48:46.100 --> 00:48:46.770
It wasn't hard.

00:48:46.800 --> 00:48:48.980
It used to be just a dictionary lookup.

00:48:49.580 --> 00:48:52.550
Now it's actually does
sort of language analysis.

00:48:52.560 --> 00:48:55.210
So it looks at, you know,
plurals and apostrophes and other

00:48:55.310 --> 00:49:00.570
elements of the language to really expand
and figure out what is spelled correctly.

00:49:02.950 --> 00:49:05.290
On top of that,
we increased the size of the

00:49:05.290 --> 00:49:08.270
English dictionary part even
before this algorithm is applied

00:49:08.580 --> 00:49:12.940
by 33%. So here's a sentence that
I used to write all the time:

00:49:13.010 --> 00:49:16.690
"Talentless, simple-minded,
cockamamie filmmakers

00:49:16.820 --> 00:49:18.610
prioritize clunky skateboarders.

00:49:18.870 --> 00:49:22.460
Surreal." You run this in Puma,
you run it in 10.1,

00:49:22.460 --> 00:49:24.650
it'll say every one of
those words is misspelled,

00:49:24.770 --> 00:49:27.730
but it correctly
recognizes those in Jaguar.

00:49:30.130 --> 00:49:34.990
Another thing we've done is added more
access to the fonts we're shipping.

00:49:35.000 --> 00:49:37.190
So we've been shipping these
fonts that have just tons and

00:49:37.260 --> 00:49:39.700
tons of characters and glyphs,
but you've only been able to get to

00:49:39.700 --> 00:49:42.600
a subset of them through our APIs.

00:49:42.900 --> 00:49:45.040
We've added Unicode 3.2 support.

00:49:45.140 --> 00:49:47.130
That increased it some set.

00:49:47.320 --> 00:49:49.420
And then we added surrogate support.

00:49:49.420 --> 00:49:53.670
So you now have access to over a million
glyphs in all the fonts we're shipping.

00:49:54.060 --> 00:49:56.460
We added a Japanese,
a better Japanese input method

00:49:56.500 --> 00:49:57.930
to take advantage of surrogates.

00:49:57.930 --> 00:50:01.430
So if you're typing in Japanese,
you can get to all these surrogates.

00:50:01.550 --> 00:50:04.470
And I know you're all, you know,
trying to find that little

00:50:04.930 --> 00:50:07.600
pointing finger dingbat,
and you can't figure

00:50:07.670 --> 00:50:08.740
out the key combination.

00:50:08.920 --> 00:50:10.210
We now have a character palette.

00:50:10.270 --> 00:50:12.360
You can just see it and pick it.

00:50:14.550 --> 00:50:19.240
We've also enabled a bunch
more languages in Mac OS X.

00:50:19.240 --> 00:50:20.540
A number of more languages.

00:50:20.690 --> 00:50:24.460
But we haven't localized into these yet,
but just by putting down a

00:50:24.460 --> 00:50:28.950
language package on your system,
you can now run in these languages.

00:50:28.970 --> 00:50:32.400
So Cyrillic, Arabic, Hebrew, Thai,
and a bunch of languages

00:50:32.400 --> 00:50:34.100
I can't even pronounce the name.

00:50:34.220 --> 00:50:36.970
But, you know, probably most importantly,
we have finally broken into

00:50:37.040 --> 00:50:40.250
the lucrative Hawaiian market.

00:50:41.650 --> 00:50:44.990
That's right, if you speak Hawaiian,
you can now put a Hawaiian localization

00:50:45.150 --> 00:50:47.930
on your system and it'll work just fine.

00:50:49.330 --> 00:50:51.390
Number one request.

00:50:51.390 --> 00:50:55.640
You'll notice we have two languages
on here that are right to left.

00:50:55.770 --> 00:51:01.480
So of course to support those we've added
BiDi support to both Cocoa and Carbon.

00:51:06.100 --> 00:51:08.640
Alright, let's talk about the
file system for a minute.

00:51:08.830 --> 00:51:11.230
So here's what it looks like
when you're running text edit in

00:51:11.230 --> 00:51:13.090
English with a save sheet down.

00:51:13.090 --> 00:51:15.700
All looks good?

00:51:15.760 --> 00:51:18.100
Here's what it looks like when
you're running it in Japanese.

00:51:18.100 --> 00:51:22.180
The menus are in Japanese,
the buttons are all in Japanese,

00:51:22.180 --> 00:51:25.010
but the file system is still in English.

00:51:25.080 --> 00:51:30.250
So a Japanese user,
when they've just downloaded the MP3,

00:51:30.250 --> 00:51:34.100
legally, they still have to
know... Don't steal music.

00:51:34.140 --> 00:51:39.160
They still have to know to put that
MP3 in this folder called Music,

00:51:39.160 --> 00:51:40.910
which is in English.

00:51:41.290 --> 00:51:44.870
So it's really been hard for
people in different languages

00:51:45.210 --> 00:51:46.640
to get around the system.

00:51:46.640 --> 00:51:50.790
For Jaguar, we give a localized
view of the file system.

00:51:55.910 --> 00:51:58.630
So we had a number of goals
that we wanted to solve when

00:51:58.680 --> 00:52:00.400
we did this localized view.

00:52:00.480 --> 00:52:05.600
The first is the same way that
our OS is a single installation,

00:52:05.640 --> 00:52:08.500
and you can have different people
run in different languages.

00:52:08.550 --> 00:52:11.100
We wanted the file system
to do the same way.

00:52:11.160 --> 00:52:16.260
So when Bertrand logs into the system,
he sees movies and music in the French.

00:52:16.300 --> 00:52:19.150
When I log in, I see those in English.

00:52:20.000 --> 00:52:22.650
We wanted it to be compatible
with previous installations.

00:52:22.750 --> 00:52:24.850
We didn't want to have to
do a big installation that

00:52:24.850 --> 00:52:26.740
renames everyone's folders.

00:52:26.870 --> 00:52:29.080
And because of these,
we have a localized view.

00:52:29.210 --> 00:52:31.990
We're not actually twiddling
the bits on the disk.

00:52:33.050 --> 00:52:36.800
It was really important that
we made this incredibly fast.

00:52:36.860 --> 00:52:38.840
And so there's a minimal
performance impact.

00:52:38.910 --> 00:52:41.040
When you go to the finder,
it doesn't hang trying to find

00:52:41.040 --> 00:52:43.430
out what the localizations are.

00:52:43.720 --> 00:52:48.270
And if a user renames something, so,
you know, there is something called

00:52:48.270 --> 00:52:52.060
music and someone renames it,
you know, our legal music,

00:52:52.530 --> 00:52:55.360
and then emails that out
to everyone at the company,

00:52:55.490 --> 00:53:00.170
well, the folder everyone sees will be
that name that the user renamed it.

00:53:01.610 --> 00:53:05.330
So great new international support.

00:53:05.420 --> 00:53:08.030
Let's talk about universal access.

00:53:08.100 --> 00:53:13.850
It is really important to us that
everyone gets to enjoy Mac OS X.

00:53:19.350 --> 00:53:23.540
and a refreshing beverage.

00:53:23.640 --> 00:53:26.380
So most of this support for
universal access comes for free.

00:53:26.650 --> 00:53:28.200
You, the developer,
don't have to do anything.

00:53:28.200 --> 00:53:30.690
We just built it into the system.

00:53:31.000 --> 00:53:35.780
There is minimal developer support
needed for a few of the features.

00:53:37.410 --> 00:53:41.120
We have the zoom feature that
allows you to zoom in to see things.

00:53:41.240 --> 00:53:43.520
This is absolutely free for you.

00:53:43.620 --> 00:53:46.610
We have inversion,
so it gives a high contrast look.

00:53:47.060 --> 00:53:48.300
This is free.

00:53:48.430 --> 00:53:50.300
We have a visual, a visible beep.

00:53:50.430 --> 00:53:53.300
This is also free,
no developer work needed.

00:53:53.680 --> 00:54:07.560
We have sticky keys.

00:54:08.620 --> 00:54:08.650
So for some people who
can't type with both hands,

00:54:08.650 --> 00:54:08.650
instead of having to hold down a chord,
they can press one key at a time.

00:54:08.650 --> 00:54:08.650
So Command, Shift, N, sticky keys,
comes for free.

00:54:08.850 --> 00:54:10.200
We have slow keys.

00:54:10.310 --> 00:54:13.560
Slow keys is for people who,
when they're typing,

00:54:13.560 --> 00:54:16.200
they might accidentally bump a key,
and they don't want it

00:54:16.200 --> 00:54:18.240
recognized as a key to press.

00:54:18.360 --> 00:54:22.810
So you have to actually press
down a button for a certain

00:54:22.850 --> 00:54:25.950
duration before it's recognized.

00:54:26.160 --> 00:54:27.990
So that's slow keys.

00:54:30.600 --> 00:54:31.500
We have mouse keys.

00:54:31.650 --> 00:54:34.040
So for some people it's
difficult to use a mouse.

00:54:34.110 --> 00:54:36.890
They can use the numerical
keyboard instead.

00:54:37.430 --> 00:54:40.260
So all of those things are
free for the developer.

00:54:40.400 --> 00:54:44.890
Now, there are a set of things that
require minimal work on your part.

00:54:45.030 --> 00:54:49.900
Generally, it's dealing with keyboard
navigation and our assistive APIs.

00:54:51.420 --> 00:54:55.370
We have a really nice API for assistive
apps like screen readers and it's a

00:54:55.370 --> 00:54:58.370
single API for both Cocoa and Carbon.

00:54:59.360 --> 00:55:04.730
So all this stuff is standard and
free if you use the standard controls.

00:55:04.870 --> 00:55:07.680
But if you have a custom control,

00:55:08.800 --> 00:55:12.060
Or if you override given features
of something and you want custom

00:55:12.060 --> 00:55:16.180
behavior for a standard control,
for Carbon you just respond

00:55:16.180 --> 00:55:17.780
to some Carbon events.

00:55:18.130 --> 00:55:20.570
And for Cocoa,
you either override some methods

00:55:20.890 --> 00:55:25.800
or you implement an informal
protocol for the assistive APIs.

00:55:25.950 --> 00:55:28.660
So it turns out if you use just
standard controls and widgets,

00:55:28.820 --> 00:55:30.900
this is all free for you.

00:55:31.070 --> 00:55:33.800
And of course,
there's interface builder support.

00:55:34.280 --> 00:55:37.200
It's this that enables the screen
readers that you saw this morning.

00:55:37.200 --> 00:55:39.440
So we have a simple
screen reader built in,

00:55:39.620 --> 00:55:42.830
and other screen readers
will be built on this API.

00:55:44.240 --> 00:55:45.700
So Universal Access.

00:55:45.780 --> 00:55:49.070
X is now a very good player
in the Universal Access world,

00:55:49.070 --> 00:55:52.540
and I encourage you all to make
sure that your app does play

00:55:52.690 --> 00:55:54.200
with the Universal Access APIs.

00:55:54.280 --> 00:55:59.180
And this will really, for most of you,
just be a verification exercise

00:55:59.340 --> 00:56:02.180
as opposed to doing any work.

00:56:02.800 --> 00:56:06.500
Now let's get to some interesting
stuff in Cocoa and Carbon.

00:56:06.660 --> 00:56:07.140
Quiz time!

00:56:07.140 --> 00:56:08.450
Who's ready for a quiz?

00:56:08.580 --> 00:56:10.800
Ready?

00:56:10.950 --> 00:56:13.060
How do you spot an IAP?

00:56:14.300 --> 00:56:17.800
Metal, how do you spot a Cocoa app?

00:56:17.990 --> 00:56:21.620
Tobar, how do you spot a Carbon app?

00:56:22.620 --> 00:56:25.930
So it turns out I've seen all
these web pages that have like a,

00:56:25.930 --> 00:56:27.100
you know, name that tune kind of thing.

00:56:27.100 --> 00:56:31.010
I can spot a Cocoa app in, you know,
one widget.

00:56:32.460 --> 00:56:34.420
We're trying to make
that harder and harder.

00:56:35.120 --> 00:56:36.780
How many IAPs are on the screen?

00:56:36.780 --> 00:56:38.860
For those of you who
didn't see the keynote.

00:56:40.200 --> 00:56:42.130
So everyone who didn't
see the keynote says two,

00:56:42.130 --> 00:56:43.830
because there's two
things that are metal.

00:56:44.170 --> 00:56:45.360
Answer?

00:56:45.440 --> 00:56:47.070
There's one.

00:56:47.540 --> 00:56:50.630
Metal is fully supported
in both Cocoa and Carbon,

00:56:50.670 --> 00:56:54.370
so if you so choose to use Metal,
it's supported and there's great

00:56:54.560 --> 00:56:56.580
interface builder support as well.

00:56:58.280 --> 00:56:59.640
What kind of app is this?

00:56:59.700 --> 00:57:02.200
Cocoa or Carbon?

00:57:02.290 --> 00:57:04.270
From the audience.

00:57:04.370 --> 00:57:07.470
Has, uh, Chasing Arrows.

00:57:07.840 --> 00:57:11.040
It has a stepper control
and it has vertical tabs,

00:57:11.160 --> 00:57:12.690
so it must be Carbon.

00:57:12.700 --> 00:57:13.690
Right.

00:57:13.890 --> 00:57:14.490
Wrong.

00:57:14.700 --> 00:57:16.850
So we've added these to Cocoa.

00:57:17.060 --> 00:57:17.700
Cocoa is coming.

00:57:17.700 --> 00:57:19.010
You know,
we're trying to get parity with all

00:57:19.110 --> 00:57:22.030
the widgets in both Cocoa and Carbon.

00:57:22.530 --> 00:57:24.500
What kind of app is this?

00:57:24.720 --> 00:57:25.940
Well, it's got a toolbar.

00:57:26.130 --> 00:57:27.540
Must be Cocoa.

00:57:27.810 --> 00:57:28.870
It has combo boxes.

00:57:28.940 --> 00:57:30.040
Must be Cocoa.

00:57:30.040 --> 00:57:31.350
Of course, wrong.

00:57:31.350 --> 00:57:33.960
No, right, no.

00:57:33.960 --> 00:57:34.710
So, wrong.

00:57:34.740 --> 00:57:35.810
We've added those to Carbon.

00:57:35.970 --> 00:57:39.180
This is a Carbon application,
but we didn't stop there.

00:57:39.190 --> 00:57:42.930
We also added drawer support.

00:57:43.230 --> 00:57:45.980
So there is full drawer
support in Carbon.

00:57:47.090 --> 00:57:50.080
Transparent Sheet Support in Carbon.

00:57:50.290 --> 00:57:52.630
Services Support in Carbon.

00:57:53.080 --> 00:57:55.620
Font panel support in Carbon.

00:57:55.620 --> 00:57:56.180
And the color panel.

00:57:56.180 --> 00:57:57.260
Now you look at these
last two and you say,

00:57:57.260 --> 00:57:59.010
"Wait a minute."

00:57:59.190 --> 00:58:04.140
Those really look like the Cocoa versions
of the font panel and the color panel.

00:58:04.260 --> 00:58:06.140
And in fact they are.

00:58:06.330 --> 00:58:09.260
So what we did is we just
started taking advantage of

00:58:09.260 --> 00:58:11.500
those pieces of Cocoa and Carbon.

00:58:11.610 --> 00:58:14.520
We're integrating Cocoa and Carbon.

00:58:15.940 --> 00:58:19.240
Now it turns out we've
been doing this all along.

00:58:19.380 --> 00:58:23.040
We haven't made it public
for you for the UI pieces,

00:58:23.180 --> 00:58:27.540
but all along we've been using
one framework from the other.

00:58:27.690 --> 00:58:30.340
And now we're opening
up the UI piece to you.

00:58:30.610 --> 00:58:33.390
The other part has been
open the whole time.

00:58:33.640 --> 00:58:34.760
And people say, "No, that's not possible.

00:58:34.880 --> 00:58:37.900
You haven't been integrating
the two." So let's look at this.

00:58:37.990 --> 00:58:43.460
This is just a screenshot of TextEdit,
the canonical Cocoa example.

00:58:43.540 --> 00:58:44.450
We shipped the source.

00:58:44.500 --> 00:58:46.650
You can look at the source.

00:58:47.530 --> 00:58:48.760
TextEdit supports QuickTime.

00:58:48.760 --> 00:58:52.400
You've been able to drag QuickTime movies
into TextEdit and they play in line.

00:58:52.540 --> 00:58:54.400
There's a print panel on it.

00:58:54.490 --> 00:58:57.400
So what part of this is actually Cocoa?

00:58:57.400 --> 00:59:02.400
Well, you know, QuickTime's carbon-based,
so that's not Cocoa.

00:59:02.520 --> 00:59:04.310
So the rest must be all Cocoa, right?

00:59:04.400 --> 00:59:09.400
Well, turns out we just used the
Carbon print panel since Tano shipped.

00:59:09.400 --> 00:59:11.260
So that's not Cocoa.

00:59:11.450 --> 00:59:14.400
And actually, it turns out the menu
bar was Carbon as well.

00:59:15.720 --> 00:59:20.520
So it turns out,
even for our canonical example of Cocoa,

00:59:20.520 --> 00:59:22.770
there's a lot of Carbon in it.

00:59:22.770 --> 00:59:25.260
So we've been doing this
integration the whole time.

00:59:25.790 --> 00:59:28.120
But here's what we've been telling you.

00:59:28.120 --> 00:59:30.580
We've said,
you're on this road and you get to

00:59:30.580 --> 00:59:32.460
choose which way you want to go.

00:59:32.720 --> 00:59:34.900
You can choose to go
down the Carbon road,

00:59:35.050 --> 00:59:37.380
you can choose to go down the Cocoa road.

00:59:37.480 --> 00:59:41.630
The problem is you get way down that
Carbon road and you look across,

00:59:41.630 --> 00:59:44.110
there's no trees,
and you see something on the

00:59:44.110 --> 00:59:45.850
Cocoa road and you're pretty jealous.

00:59:45.850 --> 00:59:47.450
You want to take advantage of it.

00:59:47.710 --> 00:59:50.880
But the solution has been, well,
back your car up all the way to this

00:59:50.960 --> 00:59:53.500
juncture and rewrite your app in Cocoa.

00:59:53.620 --> 00:59:53.770
Right?

00:59:53.800 --> 00:59:55.400
That's not a very good solution.

00:59:55.520 --> 00:59:59.370
What we're doing for Jaguar is
we're giving it a single road.

01:00:00.930 --> 01:00:04.650
When you're driving down that Carbon road
and you want to take advantage of Cocoa,

01:00:04.700 --> 01:00:06.440
you change lanes.

01:00:06.550 --> 01:00:08.100
You take advantage of some Cocoa.

01:00:08.150 --> 01:00:10.160
As you're going down the Cocoa road,
you can change lanes and

01:00:10.300 --> 01:00:11.460
take advantage of Carbon.

01:00:11.570 --> 01:00:13.980
We're integrating the two for you.

01:00:15.800 --> 01:00:19.200
So really, you can use Cocoa and
Carbon from each other.

01:00:19.330 --> 01:00:24.360
Now it turns out non-UI integration
has been available for a while.

01:00:24.420 --> 01:00:27.040
I've heard people, I've seen, you know,
complained about,

01:00:27.040 --> 01:00:30.070
and I've seen on mailing lists,
people who are developing for Cocoa,

01:00:30.110 --> 01:00:33.540
and they say,
"I want to read in this file

01:00:33.540 --> 01:00:35.860
and it has a resource fork,
"and I can't get to the resource fork.

01:00:35.860 --> 01:00:38.790
Why don't you add some APIs for me?"

01:00:39.240 --> 01:00:40.650
I say we have APIs for you.

01:00:40.650 --> 01:00:42.760
It's called the Resource Manager.

01:00:42.860 --> 01:00:45.190
The Resource Manager is a C API.

01:00:45.260 --> 01:00:48.490
A Cocoa app can link
against and use any C API.

01:00:48.500 --> 01:00:51.460
I mean, you can use standard C libraries,
right?

01:00:51.570 --> 01:00:53.200
The Resource Manager is the same way.

01:00:53.200 --> 01:00:54.780
It's just a C library.

01:00:54.890 --> 01:00:56.220
You can call it from Objective-C.

01:00:56.340 --> 01:00:59.190
Objective-C is a superset of C.

01:00:59.290 --> 01:01:02.170
So you've been able to do this already.

01:01:02.300 --> 01:01:04.680
We talked about these new spell checkers.

01:01:04.810 --> 01:01:07.530
Those spell checkers are
implemented in Cocoa.

01:01:07.530 --> 01:01:12.790
But anyone who's using Carbon can call
directly into that spell checker as well.

01:01:14.200 --> 01:01:18.830
And now we're enabling you to
do window-based integration.

01:01:18.910 --> 01:01:24.010
So you can have a Cocoa window inside
a Carbon application and vice versa.

01:01:24.990 --> 01:01:27.230
Alright,
let's talk about building blocks.

01:01:27.230 --> 01:01:28.780
And the future.

01:01:28.780 --> 01:01:33.360
So whenever people talk about
objects they often get to Legos and

01:01:33.360 --> 01:01:34.900
say you build things with Legos.

01:01:34.900 --> 01:01:37.310
So this is what it looked like in Tenno,
right?

01:01:37.400 --> 01:01:39.940
You had a,
let's say the left structure here is

01:01:40.020 --> 01:01:42.000
a Cocoa app and the right is Carbon.

01:01:42.000 --> 01:01:44.400
And they looked like they were
completely their own thing,

01:01:44.400 --> 01:01:44.900
right?

01:01:44.900 --> 01:01:46.900
It was all Cocoa and all Carbon.

01:01:46.900 --> 01:01:49.040
What I've shown you is
if you open up the hood,

01:01:49.040 --> 01:01:53.040
on the Cocoa side we were using
some of the Carbon pieces.

01:01:53.040 --> 01:01:55.900
And on the Carbon side we were
using some of the Cocoa pieces.

01:01:55.900 --> 01:01:58.510
For Jaguar,
we're enabling you to use whole

01:01:58.510 --> 01:02:02.880
windows from the other framework
inside as well as the non-UI pieces.

01:02:02.900 --> 01:02:08.280
Now our long term thinking and what we're
planning not for Jaguar but beyond is to

01:02:08.320 --> 01:02:10.900
allow you to choose based on a widget.

01:02:10.900 --> 01:02:14.890
So you can truly use the functionality
you want from a given application.

01:02:14.900 --> 01:02:16.480
application.

01:02:17.210 --> 01:02:18.600
There's a really good document.

01:02:18.600 --> 01:02:24.090
I encourage you to download this
and read it on connect.apple.com

01:02:24.090 --> 01:02:27.270
that talks about this integration.

01:02:27.680 --> 01:02:30.020
But you know,
you really got to see it to believe it.

01:02:30.200 --> 01:02:32.650
So let me show you a demo.

01:02:35.160 --> 01:02:40.240
To set this up,
there's this company called Tweakfilms.

01:02:40.650 --> 01:02:42.670
And it's a relatively new company.

01:02:42.770 --> 01:02:45.250
It started by some guys
who used to work at ILM,

01:02:45.350 --> 01:02:47.040
Industrial Light and Magic.

01:02:47.100 --> 01:02:50.510
And they're a few of the people
who helped work on the animation

01:02:50.570 --> 01:02:53.010
scenes for A Perfect Storm.

01:02:53.130 --> 01:02:53.650
Right?

01:02:53.770 --> 01:02:56.880
So the amazing water animation scenes.

01:02:57.060 --> 01:03:01.060
And they'd implemented
their stuff on top of Unix.

01:03:01.090 --> 01:03:02.940
I think they were SGI boxes.

01:03:03.030 --> 01:03:06.110
And so they were looking
for a new platform to go to,

01:03:06.150 --> 01:03:07.700
not surprisingly.

01:03:07.750 --> 01:03:11.300
And they looked at Mac OS X and
they fell in love with it.

01:03:11.340 --> 01:03:15.140
Because Mac OS X had
great Unix underpinnings.

01:03:15.230 --> 01:03:17.600
So they could port their
stuff directly across.

01:03:17.650 --> 01:03:20.060
Then they wanted to throw a UI up.

01:03:20.130 --> 01:03:23.910
And they found the fastest way
to create a UI was to use Cocoa.

01:03:24.070 --> 01:03:26.350
So they created a great Cocoa UI.

01:03:26.460 --> 01:03:29.300
So it works really, really nicely on X.

01:03:29.830 --> 01:03:35.880
Well, as you know, a few weeks ago,
Photoshop shipped on Mac OS X.

01:03:35.970 --> 01:03:39.240
And Photoshop is the canonical
CFM Carbon application,

01:03:39.240 --> 01:03:39.800
right?

01:03:39.830 --> 01:03:42.790
Very large application,
moved over to Mac OS X using Carbon.

01:03:42.800 --> 01:03:48.260
Now, I was looking at Photoshop,
and I really wanted to have some of

01:03:48.410 --> 01:03:51.760
that TweakFilm's water filters put in.

01:03:51.760 --> 01:03:53.800
But, you know,
how would that be possible, right?

01:03:53.800 --> 01:03:55.710
It's a Cocoa application.

01:03:56.160 --> 01:04:01.200
Well, it turns out, in Jaguar,
you can host Cocoa plugins

01:04:01.580 --> 01:04:04.100
inside a Carbon application.

01:04:04.840 --> 01:04:09.200
So here is Photoshop,
and this is an unmodified Photoshop.

01:04:09.350 --> 01:04:12.200
We'll bring up this ducky.

01:04:12.320 --> 01:04:15.890
The ducky looks like he
really wants to be in water.

01:04:16.700 --> 01:04:18.590
So let me do a selection of where,
let's see,

01:04:18.690 --> 01:04:21.500
let's do the magic wand selection.

01:04:21.530 --> 01:04:24.700
Go ahead and take off
some of the top part here.

01:04:24.720 --> 01:04:28.740
Alright, so now I have a selection of
where I want to add water.

01:04:28.780 --> 01:04:32.760
I go up to the filter menu,
and there's one thing here, Cocoa,

01:04:32.800 --> 01:04:33.900
Tweak Waves.

01:04:33.940 --> 01:04:37.270
When I let go there, what it just did

01:04:37.920 --> 01:04:41.460
Is it loaded,
it dynamically loaded a Cocoa plugin?

01:04:41.460 --> 01:04:45.030
This is Cocoa running
inside a Carbon application.

01:04:51.170 --> 01:04:52.870
And you can't tell the difference.

01:04:52.870 --> 01:04:54.300
And that's the point.

01:04:54.440 --> 01:04:58.010
So, let me change some of
the wind angle here.

01:04:58.290 --> 01:05:01.060
Uh, oh,
I like to go ahead and let's reflect it.

01:05:01.140 --> 01:05:04.590
And of course the thing they're
famous for is a little animation.

01:05:05.620 --> 01:05:09.400
So it's great graphics brought
over because we have Unix,

01:05:09.400 --> 01:05:13.700
a Cocoa application or Cocoa plugin
running inside of Photoshop.

01:05:13.850 --> 01:05:16.230
Go ahead and say,
I like that frame right there.

01:05:16.450 --> 01:05:18.100
I say okay.

01:05:18.180 --> 01:05:21.490
It takes, filters the image,
adds the water.

01:05:21.630 --> 01:05:22.790
It's that simple.

01:05:22.910 --> 01:05:25.010
So you can bring over
your Unix applications,

01:05:25.210 --> 01:05:27.990
you can use Cocoa,
and this can be embedded completely

01:05:28.220 --> 01:05:33.010
within a Carbon application without
modifying the Carbon application.

01:05:33.180 --> 01:05:36.500
So over the last year,
we've been doing a lot

01:05:36.560 --> 01:05:38.170
to evolve the frameworks.

01:05:38.360 --> 01:05:40.350
And we expect that we're going
to see a lot more revolutionary

01:05:40.350 --> 01:05:42.100
applications from you because of it.

01:05:42.260 --> 01:05:43.700
Thanks a lot.

01:05:53.170 --> 01:05:55.540
So this is the end of our agenda.

01:05:55.540 --> 01:05:58.490
We talked about evolution, revolution,
and how they apply in

01:05:58.490 --> 01:06:01.460
New Links land and in frameworks.

01:06:01.460 --> 01:06:03.820
And now last but not
least is this morning,

01:06:03.820 --> 01:06:06.420
hopefully you got this set of CDs.

01:06:06.570 --> 01:06:12.140
We've put a lot of our heart and a
lot of nights to get those to you.

01:06:12.140 --> 01:06:15.830
And it's pretty software,
so don't depend on it.

01:06:16.120 --> 01:06:18.940
However, we believe you will enjoy it.

01:06:18.940 --> 01:06:22.680
And there's a lot of features
and that's the way we're headed.

01:06:22.740 --> 01:06:25.280
So please give us some feedback.

01:06:25.310 --> 01:06:26.760
Thank you.