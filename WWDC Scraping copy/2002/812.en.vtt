WEBVTT

00:00:03.000 --> 00:00:14.700
[Transcript missing]

00:00:15.200 --> 00:00:16.830
So let's talk about streaming servers.

00:00:16.830 --> 00:00:22.140
So Apple,
we've got QuickTime Streaming Server.

00:00:22.140 --> 00:00:23.680
We also have Darwin Streaming Server.

00:00:23.680 --> 00:00:26.480
And basically what that is,
is the open source version of

00:00:26.570 --> 00:00:28.350
the QuickTime Streaming Server.

00:00:28.350 --> 00:00:30.690
So I want to keep that in mind
as another entry point for

00:00:30.690 --> 00:00:32.620
development throughout this session.

00:00:33.640 --> 00:00:37.070
So let's talk about what we're
going to talk about today.

00:00:37.070 --> 00:00:41.120
So I'm going to briefly go over
some of the new features in QTSS 4.

00:00:41.120 --> 00:00:43.720
And then after that,
we're going to have some engineers

00:00:43.820 --> 00:00:47.190
come up and provide some more
detailed technical information.

00:00:48.530 --> 00:00:50.350
A couple of the things you're
going to learn about are more

00:00:50.500 --> 00:00:52.560
about our server module API.

00:00:52.560 --> 00:00:57.400
The server's got a really
powerful API for building modules.

00:00:57.400 --> 00:00:59.180
It's very object-oriented,
and we've made some

00:00:59.180 --> 00:01:00.260
enhancements to it in form.

00:01:00.260 --> 00:01:03.200
I'll have an engineer come up
and talk about that a little bit.

00:01:03.230 --> 00:01:07.720
We also have something we call
the admin protocol in the server,

00:01:07.720 --> 00:01:10.370
and that's a mechanism for remotely
administering and monitoring

00:01:10.370 --> 00:01:11.700
and controlling the server.

00:01:11.700 --> 00:01:14.650
We'll have a little talk about
that and show how you can build

00:01:14.700 --> 00:01:16.520
some tools around that protocol.

00:01:18.220 --> 00:01:21.330
Let's talk about what's new in QTSS 4.

00:01:22.380 --> 00:01:23.560
Here's a short list.

00:01:23.640 --> 00:01:26.720
The list is actually a lot longer,
but I want to focus on some

00:01:26.720 --> 00:01:28.740
of the high-level things here.

00:01:28.850 --> 00:01:31.270
We've done some enhancements
for development.

00:01:31.300 --> 00:01:35.770
As I said, we've improved the
module API a little bit.

00:01:36.030 --> 00:01:39.510
We've provided some more
developer documentation.

00:01:39.650 --> 00:01:45.190
And we've made some enhancements to our
skip protection algorithms and the result

00:01:45.250 --> 00:01:49.560
of that is some of the InstantON demos
that you saw earlier in the conference.

00:01:49.640 --> 00:01:53.550
And with every release we try
to improve the performance.

00:01:53.550 --> 00:01:53.550
We've done that.

00:01:53.900 --> 00:01:55.960
We have completely
designed the web admin.

00:01:55.960 --> 00:01:59.220
We've added some support
for automated relays,

00:01:59.310 --> 00:02:01.730
which allows you... Relays
are a mechanism for sending

00:02:01.740 --> 00:02:04.780
streams from server to server as
opposed to from server to client.

00:02:04.780 --> 00:02:07.480
And we've added native MPEG-3 streaming.

00:02:07.480 --> 00:02:11.990
And last but certainly not least,
QuickTime Streaming Server 4 has

00:02:12.010 --> 00:02:14.540
full support for MPEG-4 content.

00:02:14.880 --> 00:02:16.570
So, this is a big deal.

00:02:16.570 --> 00:02:20.920
What this means is that the
QuickTime Streaming Server will work

00:02:20.940 --> 00:02:25.090
with any ISO-compliant MPEG-4 content,
and it'll stream it to

00:02:25.090 --> 00:02:26.440
any compliant player.

00:02:26.440 --> 00:02:27.730
It doesn't have to be
the QuickTime player.

00:02:27.810 --> 00:02:28.680
It can be any MPEG-4 player.

00:02:28.680 --> 00:02:29.980
So this is actually a really big deal.

00:02:29.980 --> 00:02:33.570
We really think that MPEG-4
is going to become the de

00:02:33.580 --> 00:02:35.900
facto standard for streaming.

00:02:38.690 --> 00:02:39.900
So let's drill down a little bit.

00:02:39.960 --> 00:02:42.100
Module APIs.

00:02:42.100 --> 00:02:46.120
So if you are familiar with
the module APIs at all,

00:02:46.280 --> 00:02:49.090
prior to QuickTime Streaming Server 4,
you were able to,

00:02:49.090 --> 00:02:53.580
modules were able to access some
of the objects in the server.

00:02:53.580 --> 00:02:55.750
So let me explain what I mean by objects.

00:02:55.790 --> 00:02:57.760
The API is really object-oriented.

00:02:57.820 --> 00:03:03.700
So all of the API calls take
objects as parameters to them,

00:03:03.700 --> 00:03:06.590
and objects are basically the
mechanism that's used for the

00:03:06.590 --> 00:03:08.650
server to communicate with modules.

00:03:08.660 --> 00:03:11.530
Modules and servers pass objects
back and forth to each other.

00:03:11.530 --> 00:03:14.150
With QuickTime Streaming
Server 3 and prior,

00:03:14.270 --> 00:03:17.530
the only objects that modules
could get to were objects that

00:03:17.530 --> 00:03:20.940
the server had created and
they were owned by the server.

00:03:20.940 --> 00:03:25.150
With QuickTime Streaming Server 4...
We've now made it possible for

00:03:25.150 --> 00:03:28.760
modules to create their own objects,
and that provides a bunch of power to

00:03:28.760 --> 00:03:31.150
modules that you didn't have before,
and you're going to learn more

00:03:31.150 --> 00:03:32.060
about that later in the session.

00:03:33.670 --> 00:03:38.290
Documentation-wise,
we have now documented

00:03:38.680 --> 00:03:42.390
our reliable RTP protocol,
or skip protection as you guys know it.

00:03:42.650 --> 00:03:45.490
And what that means is that if
you want to write a server or

00:03:45.490 --> 00:03:48.820
a client that take advantage of
script protection and advantage of

00:03:48.820 --> 00:03:51.990
instant on and things like that,
we've documented that protocol,

00:03:51.990 --> 00:03:53.350
so you can do that now.

00:03:53.780 --> 00:03:57.140
In addition to that,
we have documented our mechanism

00:03:57.140 --> 00:03:59.200
for tunneling RTSP over HTTP.

00:03:59.230 --> 00:04:02.640
And the reason we do that is it's
our way of getting through firewalls

00:04:02.680 --> 00:04:04.500
that don't support RTSP and RTP.

00:04:04.610 --> 00:04:05.740
So that's documented.

00:04:05.740 --> 00:04:07.910
Again,
if you want to write a server or a client

00:04:07.910 --> 00:04:11.290
that take advantage of that protocol,
documentation is all there.

00:04:11.980 --> 00:04:15.890
And the last thing we need,
new documentation that we have

00:04:15.890 --> 00:04:18.540
is for caching streaming proxies.

00:04:18.730 --> 00:04:24.260
So if you're writing a proxy appliance,
for example, or streaming appliance,

00:04:24.260 --> 00:04:29.530
what we've done is we've provided,
we've done some extensions to RTP and

00:04:29.530 --> 00:04:33.310
RTSP that allow caching streaming
proxies to get pristine copies of

00:04:33.320 --> 00:04:35.660
the stream and some other features.

00:04:35.660 --> 00:04:38.130
We've documented how that works now.

00:04:45.070 --> 00:04:46.000
Performance improvements.

00:04:46.000 --> 00:04:49.090
So every time we release a new
version of QuickTime Streaming Server,

00:04:49.090 --> 00:04:51.300
we lock a guy in a room and we
tell him to make it go faster.

00:04:51.300 --> 00:04:53.240
And we did it again.

00:04:53.240 --> 00:04:56.480
We're now up to 4,000 concurrent
streams on a single server.

00:04:56.560 --> 00:04:58.160
Those are low bitrate streams.

00:04:58.160 --> 00:05:00.640
But in addition to that,
we've now doubled the number of

00:05:00.640 --> 00:05:03.560
high bitrate movies that we can
stream from a single server.

00:05:03.560 --> 00:05:06.250
By high bitrate,
I'm talking about one megabit movies,

00:05:06.250 --> 00:05:08.300
big movies,
movies that can play full screen

00:05:08.430 --> 00:05:09.980
that look just as good as TV.

00:05:09.980 --> 00:05:12.940
We've doubled that number.

00:05:13.440 --> 00:05:17.500
And for those of you who have ever been
through the process of hinting a movie,

00:05:17.500 --> 00:05:20.170
you're probably familiar with the
little checkbox that says optimize

00:05:20.170 --> 00:05:21.880
for streaming or optimize for server.

00:05:21.880 --> 00:05:26.950
We did a lot of work in the server,
in QuickTime Streaming Server 4,

00:05:26.950 --> 00:05:30.590
and made a bunch of changes
to the parsing code.

00:05:30.600 --> 00:05:32.860
And we basically made it so that
you don't need to optimize anymore.

00:05:32.860 --> 00:05:35.720
The downside,
the reason we used to need optimizing was

00:05:35.760 --> 00:05:39.770
that it created movies that allowed the
server to scale much higher so we could

00:05:39.770 --> 00:05:42.240
serve more movies if they were optimized.

00:05:42.840 --> 00:05:45.230
The downside was that they
doubled the size of your movie.

00:05:45.240 --> 00:05:49.440
So, as of QuickTime Streaming Server 4,
you no longer need to optimize.

00:05:52.010 --> 00:05:56.180
Here's a graphical view of what
we've done with performance.

00:05:56.340 --> 00:05:58.810
With the first version
of the streaming server,

00:05:58.810 --> 00:06:02.530
we were able to do a thousand concurrent
streams off of a single machine.

00:06:02.550 --> 00:06:04.890
At that time,
we thought that was actually pretty good.

00:06:05.010 --> 00:06:08.520
In each release,
we've increased the performance.

00:06:08.520 --> 00:06:13.020
You can see now QuickTime Streaming
4 has quadrupled our original

00:06:13.020 --> 00:06:14.900
capacity in the server.

00:06:14.900 --> 00:06:17.720
Hopefully,
the graph will continue going up as we

00:06:17.720 --> 00:06:19.990
release more versions of the server.

00:06:21.680 --> 00:06:26.910
So another feature is
the redesigned admin app.

00:06:27.110 --> 00:06:29.940
So if you're familiar with
QuickTime Streaming Server 3,

00:06:29.940 --> 00:06:32.740
we announced a web-based
administration application.

00:06:32.740 --> 00:06:35.430
Basically,
it lets you administer the server from

00:06:35.620 --> 00:06:37.730
a web browser locally or remotely.

00:06:37.780 --> 00:06:41.080
And that was great,
but we made it even better.

00:06:41.080 --> 00:06:43.220
We completely revamped it.

00:06:43.220 --> 00:06:44.110
It's got a brand new look.

00:06:44.180 --> 00:06:45.980
It's much cleaner,
much easier to navigate.

00:06:45.980 --> 00:06:49.330
We've added a setup assistant,
and you can probably

00:06:49.330 --> 00:06:51.200
figure out what that does.

00:06:51.240 --> 00:06:53.160
Basically, it walks you through
a couple of questions,

00:06:53.160 --> 00:06:55.730
you answer them,
and then within minutes you've

00:06:55.730 --> 00:06:57.660
got the server up and running
and ready to serve content.

00:06:57.660 --> 00:07:01.060
And we've added UI for something
that was actually pretty

00:07:01.120 --> 00:07:04.220
complex to do in the past,
which is set up relays.

00:07:04.270 --> 00:07:05.940
So we've got UI and monitoring for that.

00:07:07.330 --> 00:07:10.710
One of the features we added in
QuickTime Streaming Server 3 was the

00:07:10.800 --> 00:07:13.800
ability to do server-side playlists.

00:07:13.800 --> 00:07:17.840
What that allows you to do is things
like internet radio stations by serving

00:07:17.840 --> 00:07:19.960
a server-side playlist of content.

00:07:19.990 --> 00:07:23.880
We've completely revamped the UI for
that in the administration app.

00:07:23.910 --> 00:07:26.520
I'm going to show you a
little bit of what we've done.

00:07:30.220 --> 00:07:37.800
I'm going to launch the admin
and log in to the server.

00:07:37.800 --> 00:07:39.830
So this is all secured.

00:07:39.860 --> 00:07:41.930
We support SSL.

00:07:44.250 --> 00:07:46.300
If you don't remember
your name and password,

00:07:46.310 --> 00:07:48.100
we can't help you there, though.

00:07:48.220 --> 00:07:49.580
So, here's the new look.

00:07:49.740 --> 00:07:51.190
It's much cleaner.

00:07:51.250 --> 00:07:52.890
Here's the main page.

00:07:52.950 --> 00:07:57.380
Shows just some general
status on the server.

00:07:57.710 --> 00:08:02.890
You can see some general
settings that you can set.

00:08:02.960 --> 00:08:06.460
You can monitor which
users are connected.

00:08:06.940 --> 00:08:09.130
I've got a lot of users connected
and they all seem to like the very

00:08:09.220 --> 00:08:11.160
popular sample 100k bit movie.

00:08:11.160 --> 00:08:16.970
And let me show you how easy it
is to work with playlists now.

00:08:19.500 --> 00:08:22.360
I'm going to set up an MP3 playlist.

00:08:22.390 --> 00:08:24.370
I'm basically going to set
up an internet radio station.

00:08:24.380 --> 00:08:26.050
I'm going to show you how easy this is.

00:08:26.080 --> 00:08:29.410
I'm going to call it Chris Radio.

00:08:31.340 --> 00:08:32.900
And I'm going to give it a mount point.

00:08:32.900 --> 00:08:35.970
The mount point is basically the
path portion of the URL that users

00:08:35.990 --> 00:08:40.740
are going to use when they listen
to this from their MP3 player.

00:08:40.740 --> 00:08:43.280
Pick a genre,
which will show up in the MP3 player.

00:08:43.280 --> 00:08:46.510
It's a radio station,
so I want to randomly play music,

00:08:46.520 --> 00:08:50.630
but I want to be able to control
the randomness of certain songs,

00:08:50.640 --> 00:08:51.700
and that's what weighted randomness is.

00:08:51.700 --> 00:08:56.290
It allows me to add weights to
songs so that certain songs play

00:08:56.290 --> 00:08:58.680
more often than other songs.

00:08:58.780 --> 00:09:02.180
And I want to make sure that the
song doesn't repeat itself until

00:09:02.180 --> 00:09:03.450
five other songs have been played.

00:09:03.460 --> 00:09:06.730
So that's basically setting things up.

00:09:06.800 --> 00:09:08.990
Now I want to go through and
just pick the items that I want

00:09:08.990 --> 00:09:10.320
to have in my radio station.

00:09:10.370 --> 00:09:13.170
So these are files that are actually
stored on the disk on the server.

00:09:13.170 --> 00:09:16.990
Basically,
I just select them and drag them over.

00:09:17.170 --> 00:09:19.650
And here you can see the weighting,
so I can say that I don't really

00:09:19.740 --> 00:09:21.890
like compression to play too often,
so I'll reduce that.

00:09:21.900 --> 00:09:24.410
You'll notice I've got
a station ID MP3 here,

00:09:24.410 --> 00:09:28.350
so this is, you know, Chris Radio,
welcome to Chris Radio, station ID.

00:09:28.420 --> 00:09:32.390
I want that to play more often,
so I'll increase the weight on that.

00:09:34.900 --> 00:09:38.990
And I'll save those changes.

00:09:38.990 --> 00:09:43.360
And I will tell this playlist
to start playing and I basically

00:09:43.360 --> 00:09:44.400
have an internet radio station.

00:09:44.400 --> 00:09:44.880
I'm done.

00:09:44.880 --> 00:09:45.900
It's very simple.

00:09:49.700 --> 00:09:59.080
Speaking of MP3, let me tell you more
about what we've done.

00:09:59.080 --> 00:10:00.420
We have native MP3 streaming.

00:10:00.420 --> 00:10:07.800
What I mean by that is we are
Icecast/Shoutcast compatible.

00:10:07.800 --> 00:10:12.230
The server can rebroadcast
an incoming stream of MP3s.

00:10:12.240 --> 00:10:14.680
We can generate a stream
of MP3s off of the server.

00:10:14.720 --> 00:10:18.180
Because we're compatible,
we can also inject into networks

00:10:18.180 --> 00:10:22.180
or other servers that are
using these standard protocols.

00:10:22.180 --> 00:10:24.350
As you've seen,
it's really easy to set up

00:10:24.350 --> 00:10:25.930
an internet radio station.

00:10:25.930 --> 00:10:31.800
I think it's certainly the easiest
server-side solution that I've seen.

00:10:31.800 --> 00:10:34.170
This server scales really well,
so this is really the thing you're

00:10:34.170 --> 00:10:38.880
going to want to use if you want to send
streams out to massive numbers of people.

00:10:38.880 --> 00:10:40.710
Of course,
because we're using standard protocols,

00:10:40.770 --> 00:10:44.260
it works with any MP3 player that
supports standard HTTP streaming,

00:10:44.260 --> 00:10:46.080
Windows Media Player,
or real-time streaming.

00:10:46.080 --> 00:10:54.960
We've provided mechanisms for doing
insertion of ads or station IDs.

00:10:54.960 --> 00:10:56.360
You saw an automatic way of doing it.

00:10:56.360 --> 00:10:58.510
We actually have ways where
you can dynamically do that in

00:10:58.510 --> 00:10:59.680
real-time if you like as well.

00:10:59.680 --> 00:11:03.600
You can do real-time
playlist manipulation.

00:11:03.600 --> 00:11:06.680
If I wanted to remove songs or add
songs while the playlist was playing,

00:11:06.680 --> 00:11:07.330
no problem.

00:11:07.330 --> 00:11:09.780
You don't have to stop the radio
station and bring it back up.

00:11:09.850 --> 00:11:11.040
That would be a pretty poor experience.

00:11:11.060 --> 00:11:16.040
You can broadcast locally
from your machine.

00:11:16.100 --> 00:11:17.720
You can treat your machine as
an all-in-one unit that does all

00:11:17.720 --> 00:11:20.350
of the streaming to the clients,
or you can have the server send off to

00:11:20.350 --> 00:11:24.160
another server and relay things that way.

00:11:27.400 --> 00:11:46.300
[Transcript missing]

00:11:46.500 --> 00:13:24.700
[Transcript missing]

00:13:26.170 --> 00:13:28.410
So next,
I'm going to have John Anderson come up,

00:13:28.410 --> 00:13:31.080
and he's going to talk to you a little
bit about the admin protocol and show you

00:13:31.080 --> 00:13:33.240
how to write tools using this protocol.

00:13:33.240 --> 00:13:35.570
John?

00:13:39.800 --> 00:13:40.700
Hello, everybody.

00:13:40.700 --> 00:13:41.700
I'm John Anderson.

00:13:41.700 --> 00:13:45.590
I'm here from QuickTime Streaming
Server Engineering to talk to you

00:13:45.590 --> 00:13:47.690
today about the admin protocol.

00:13:47.770 --> 00:13:51.310
And the reason you'd want to use the
admin protocol is if you want to make

00:13:51.310 --> 00:13:55.290
another application which communicates
with QuickTime Streaming Server.

00:13:55.380 --> 00:13:58.660
And you can do this in real time and
get real-time data out of the server

00:13:58.660 --> 00:14:01.910
and real-time preferences out of
the server from another application,

00:14:01.910 --> 00:14:03.470
even running on another machine.

00:14:03.620 --> 00:14:06.130
And it's really easy to do.

00:14:08.400 --> 00:14:34.700
[Transcript missing]

00:14:35.890 --> 00:14:37.740
With that in mind,
I'm going to show you a quick demo,

00:14:37.740 --> 00:14:40.660
and this will give you an idea
of how easy it is to access

00:14:40.700 --> 00:14:43.790
information inside QuickTime Server.

00:14:45.420 --> 00:14:48.330
I have a URL bookmarked,
and you can see this is basically

00:14:48.330 --> 00:14:53.930
going to connect to a copy of
QuickTime Server and get a specific path.

00:14:53.960 --> 00:14:56.880
I'm logging in with the
same password as Chris used.

00:14:56.880 --> 00:14:58.770
And here we go.

00:14:58.770 --> 00:14:58.770
We have --

00:14:59.410 --> 00:15:03.390
Here we have some
information from the server.

00:15:03.390 --> 00:15:07.130
So you can see some information
about what the default DNS name is.

00:15:07.210 --> 00:15:10.160
You can see some information about
what the current bandwidth is,

00:15:10.160 --> 00:15:11.800
what the average bandwidth is.

00:15:11.890 --> 00:15:15.230
So there's lots of information
that you can get at via the admin

00:15:15.280 --> 00:15:17.400
protocol that's all updated live.

00:15:17.490 --> 00:15:19.670
And all of this is just
like accessing pages,

00:15:19.790 --> 00:15:21.640
say, on an Apache web server.

00:15:21.830 --> 00:15:23.650
Very, very simple.

00:15:24.200 --> 00:15:25.600
Can I go back to slides, please?

00:15:25.710 --> 00:15:28.190
Actually, never mind.

00:15:28.270 --> 00:15:33.280
I have another application, actually,
that I'm going to show you.

00:15:33.470 --> 00:15:35.750
The reason for it is that, you know,
just bringing up a web page,

00:15:35.790 --> 00:15:36.480
that's kind of boring.

00:15:36.520 --> 00:15:40.600
It doesn't really show what you
can do with the admin protocol.

00:15:40.680 --> 00:15:43.490
So I have this application,
the QTSS Inspector.

00:15:43.590 --> 00:15:46.610
And this is a Cocoa application,
which gets all of the

00:15:46.830 --> 00:15:48.790
preferences from the server.

00:15:48.880 --> 00:15:51.200
So when I log in here,
I'm seeing the same information

00:15:51.200 --> 00:15:54.280
I saw on that web page,
but it's parsing it and putting it into a

00:15:54.280 --> 00:15:56.820
nice outline view so that you can see it.

00:15:56.930 --> 00:16:00.210
Now, you notice here that
you see some folders.

00:16:02.060 --> 00:16:05.270
Not only does this mimic an
Apache web server from the standpoint

00:16:05.340 --> 00:16:08.200
that you have a bunch of paths,
but you also have subpaths.

00:16:08.200 --> 00:16:10.900
So it's just like having
subfolders on a web server.

00:16:11.020 --> 00:16:14.000
For example,
here we have a QTSS Server Client

00:16:14.070 --> 00:16:16.040
Connections subfolder.

00:16:16.120 --> 00:16:17.900
And inside that,
we have subfolders for each

00:16:17.900 --> 00:16:19.600
connection to the server.

00:16:19.670 --> 00:16:22.440
So you can see information about
every client that's connected to the

00:16:22.440 --> 00:16:26.600
server through the admin protocol.

00:16:26.680 --> 00:16:29.710
So, yeah,
now I'd like to go back to slides.

00:16:29.710 --> 00:16:29.710
Please.

00:16:35.910 --> 00:16:39.140
So this inspector is based on
the NSOutlineView class in Cocoa.

00:16:39.140 --> 00:16:43.040
So if anybody's familiar with Cocoa,
they probably already know this.

00:16:43.040 --> 00:16:46.530
And the data source for that
outline view gets its data just

00:16:46.540 --> 00:16:48.240
by performing HTTP requests.

00:16:48.240 --> 00:16:51.720
And it uses the password that
I entered when I first started the

00:16:51.720 --> 00:16:54.400
application as authentication for that.

00:16:54.400 --> 00:16:57.350
So again, it's just like getting
pages out of a web server.

00:16:57.450 --> 00:16:59.700
Very simple thing to do.

00:17:00.180 --> 00:17:05.810
The format of the URLs is basically,
you can see the sample URL at the bottom.

00:17:05.810 --> 00:17:09.440
The port that you access
through is typically 554.

00:17:09.440 --> 00:17:11.100
That's the default port for streaming.

00:17:11.100 --> 00:17:14.060
If you have port 80 turned on
in your web administration UI,

00:17:14.070 --> 00:17:16.580
then you can connect
through port 80 as well.

00:17:16.580 --> 00:17:19.020
So you wouldn't even have to
type the port in in that case.

00:17:19.670 --> 00:17:23.900
All of the URL paths
begin with /modules/admin.

00:17:24.060 --> 00:17:27.240
The reason for that is that that's the
way that QuickTime Streaming Server can

00:17:27.260 --> 00:17:32.320
tell the difference between a URL that's
meant for the admin protocol versus a

00:17:32.360 --> 00:17:38.560
URL that's meant for an MP3 stream or
a video stream or something like that.

00:17:39.280 --> 00:17:42.850
You notice you can also use wildcards
to get multiple values or sets.

00:17:42.960 --> 00:17:45.630
This is similar to when you
can go to a directory in

00:17:45.630 --> 00:17:48.960
Apache and have it automatically
create an index page for you.

00:17:49.090 --> 00:17:53.540
If you use an asterisk at the end of
your URL in QuickTime Streaming Server,

00:17:53.540 --> 00:17:57.430
it will give you a listing of all
of the preferences in that folder.

00:17:57.730 --> 00:18:00.160
So the sample URL you
can see here is modules,

00:18:00.290 --> 00:18:02.290
admin, server, and then an asterisk.

00:18:02.300 --> 00:18:05.180
Pretty much everything,
even though all URLs have

00:18:05.300 --> 00:18:07.910
to start with modules,
admin, pretty much all of the preferences

00:18:07.990 --> 00:18:10.090
and data that you're going
to need are actually inside

00:18:10.090 --> 00:18:11.650
a subfolder of that called server.

00:18:11.660 --> 00:18:15.760
So as you can see, it's just a standard
URL path that you get,

00:18:15.760 --> 00:18:16.920
and you get your results back.

00:18:16.980 --> 00:18:21.690
So again, I have another demo for you.

00:18:22.670 --> 00:18:25.580
Now, Chris showed you in the web UI,
you can see a list of

00:18:25.640 --> 00:18:26.900
the connected users.

00:18:27.000 --> 00:18:28.670
And again, that's, you know,
this is a demo.

00:18:28.670 --> 00:18:30.050
This is supposed to be exciting.

00:18:30.130 --> 00:18:33.670
So I've built a connected,
a connection monitor,

00:18:33.690 --> 00:18:36.220
which is another Cocoa application.

00:18:36.220 --> 00:18:37.760
And when I log in here, I can

00:18:38.270 --> 00:18:41.960
I can see a graph of all the bandwidth
that's coming through the server.

00:18:41.960 --> 00:18:46.210
And you can see at the top of the window,
it lists whatever the current bandwidth

00:18:46.230 --> 00:18:50.110
coming through the server is at the
moment and what the maximum bandwidth

00:18:50.110 --> 00:18:51.960
is set to in your preferences.

00:18:51.960 --> 00:18:54.980
So it's gathering the information
from the preferences to find

00:18:54.980 --> 00:18:58.230
out what your bandwidth cap is,
and then it's gathering live

00:18:58.270 --> 00:19:02.490
information from the server via the
admin protocol to find out what the

00:19:02.580 --> 00:19:06.640
current bandwidth coming through
the server is at any moment.

00:19:06.640 --> 00:19:08.400
So that's it for the demo.

00:19:08.400 --> 00:19:09.380
If you can switch back.

00:19:14.560 --> 00:19:16.330
So again,
this fetches the current bandwidth every

00:19:16.330 --> 00:19:20.900
half second and then uses a subclass of
NSView to display a historical chart.

00:19:20.960 --> 00:19:24.360
So this application is composed
of three main components.

00:19:24.360 --> 00:19:28.080
The first one being that NSView,
which constructs a bar graph

00:19:28.080 --> 00:19:29.920
from a given array of history.

00:19:29.920 --> 00:19:33.830
And then it includes an NSTimer,
which fires every half second

00:19:33.830 --> 00:19:38.500
and then consequently tells
the NSView to redraw itself.

00:19:39.610 --> 00:19:43.540
And lastly,
there's a custom object that I created,

00:19:43.540 --> 00:19:46.120
which was an admin
protocol access object.

00:19:46.180 --> 00:19:50.310
And this custom object that this
application uses basically performs

00:19:50.310 --> 00:19:54.740
the HTTP request and parses it into
something that Cocoa can understand.

00:19:58.290 --> 00:20:02.240
So the URLs that it's getting
in order to populate its data,

00:20:02.240 --> 00:20:04.880
the top one is the URL for
the current bandwidth cap.

00:20:04.900 --> 00:20:07.110
And again,
you can see that it starts with slash

00:20:07.110 --> 00:20:09.130
module slash admin slash server.

00:20:09.140 --> 00:20:10.960
And in this case,
since it's a preference,

00:20:10.960 --> 00:20:15.060
it's actually in a subfolder of
that called QTSS server preferences.

00:20:15.060 --> 00:20:19.520
And so you can see,
kind of get a general feel for what kinds

00:20:19.520 --> 00:20:22.620
of URLs and what kinds of information
that you can get from the server.

00:20:23.170 --> 00:20:26.170
And then, of course,
we have two different URLs for the

00:20:26.220 --> 00:20:28.680
RTSP bandwidth and the MP3 bandwidth.

00:20:28.680 --> 00:20:31.830
And then we total those two together
to find out what the total bandwidth

00:20:31.830 --> 00:20:33.360
is going through that server.

00:20:36.060 --> 00:20:38.940
So to give you an idea of some of
the Cocoa calls that I'm giving here,

00:20:38.940 --> 00:20:44.030
I basically just tell my admin protocol
access object to get a value using HTTP.

00:20:44.070 --> 00:20:47.260
And it returns,
this object basically parses the

00:20:47.260 --> 00:20:49.640
result and returns it in an array.

00:20:49.640 --> 00:20:52.750
And we take the first item of that array,
since we're only getting

00:20:52.750 --> 00:20:56.000
one item of information,
we take the first item of that array and

00:20:56.000 --> 00:21:00.340
set the string value for the field at the
top of the window using that information.

00:21:01.150 --> 00:21:02.970
We, of course,
have similar code here to get the

00:21:02.970 --> 00:21:05.550
other two values from the server,
to total them together,

00:21:05.550 --> 00:21:07.640
and to tell the NSView to redraw itself.

00:21:10.790 --> 00:21:14.330
So that's it for me,
and I guess on to Mythili,

00:21:14.330 --> 00:21:16.250
and she's going to talk
to you about writing

00:21:16.270 --> 00:21:17.770
QuickTime Streaming Server modules.

00:21:26.240 --> 00:21:29.400
Hi, everyone.

00:21:29.410 --> 00:21:32.900
Now I'm going to give you a brief
introduction to QTSS modules.

00:21:32.900 --> 00:21:35.440
In this overview,
I shall explain a little bit about

00:21:35.440 --> 00:21:39.320
some of the key concepts that are
involved in writing QTSS modules.

00:21:39.400 --> 00:21:44.790
I shall also show some sample module code
that illustrates some of these concepts

00:21:44.790 --> 00:21:47.080
and end with a demo of a sample module.

00:21:49.010 --> 00:21:51.020
But before going talking
about writing modules,

00:21:51.020 --> 00:21:53.420
why would anyone want
to write QTSS modules?

00:21:53.420 --> 00:21:57.310
The streaming server does
a lot of different things.

00:21:57.320 --> 00:22:02.410
It serves QuickTime movies,
it streams MP3s, it even relays streams,

00:22:02.600 --> 00:22:06.480
it also reflects live broadcasts,
and a bunch of other things.

00:22:06.480 --> 00:22:10.380
Now, all these features are not
implemented in the core server,

00:22:10.380 --> 00:22:12.400
but really in all the modules.

00:22:12.400 --> 00:22:15.300
Each module implements
one or more features.

00:22:16.060 --> 00:22:19.140
So if you want a feature that's
not already in the server,

00:22:19.140 --> 00:22:21.950
then writing a module
is the only way to go.

00:22:21.960 --> 00:22:24.260
There are two ways to write a module.

00:22:24.260 --> 00:22:26.790
One, you can compile in the
module with the server,

00:22:26.890 --> 00:22:28.760
and that's called a static module.

00:22:28.760 --> 00:22:32.920
But you could also write the module
such that it's dynamically linked

00:22:32.920 --> 00:22:35.900
in at runtime and not compiled in,
in which case it's

00:22:35.900 --> 00:22:37.200
called a dynamic module.

00:22:37.200 --> 00:22:39.060
It's very similar to a plug-in.

00:22:39.060 --> 00:22:45.080
In this case, if you write your module
as a dynamic module,

00:22:45.800 --> 00:22:48.860
then you do not have to publish
your source code or give back

00:22:49.000 --> 00:22:52.860
your source code to Apple,
even though the core server itself

00:22:52.860 --> 00:22:56.240
is open source and is under the
Apple public source license.

00:22:56.240 --> 00:22:59.630
This means that you can sell your
dynamic module and still protect

00:22:59.630 --> 00:23:02.280
your intellectual property,
which I'm sure is very

00:23:02.400 --> 00:23:03.600
important to all of you.

00:23:03.600 --> 00:23:09.580
Also, you could package your module along
with QTSS and sell this version

00:23:09.580 --> 00:23:11.600
of the enhanced streaming server.

00:23:11.600 --> 00:23:15.310
Now, moving on to writing QTSS.

00:23:15.630 --> 00:23:17.760
DSS modules.

00:23:19.720 --> 00:23:24.180
One of the main concepts in writing
a QTSS module is a QTSS role.

00:23:24.180 --> 00:23:27.670
As I said earlier,
the server is not doing the work,

00:23:27.780 --> 00:23:29.970
but the modules are the ones that
are really doing all the work

00:23:29.970 --> 00:23:31.360
of implementing the features.

00:23:31.360 --> 00:23:34.340
This means that the server
calls all these modules at

00:23:34.340 --> 00:23:36.080
different points in time.

00:23:36.080 --> 00:23:41.160
These different points in time or states
are called QTSS roles in our server.

00:23:41.160 --> 00:23:46.260
So the server provides a well-defined
state each time it calls a

00:23:46.260 --> 00:23:48.860
module in a particular role.

00:23:49.640 --> 00:23:53.100
And it exchanges information
with the module by passing

00:23:53.100 --> 00:23:54.950
in one or more QTSS objects.

00:23:54.950 --> 00:23:58.730
I should explain a little
more about QTSS objects later.

00:24:00.940 --> 00:24:04.920
But the server doesn't know what modules
need to be called in any particular role.

00:24:04.920 --> 00:24:08.780
So when it first starts up,
it asks all the modules

00:24:08.810 --> 00:24:11.320
what roles they handle.

00:24:11.320 --> 00:24:15.160
So this process is called
registering for a role in QTSS.

00:24:18.550 --> 00:24:23.180
Some of the roles that are available
in the server are the RTSP filter role,

00:24:23.180 --> 00:24:26.800
the route role, the RTSP route role,
the client session closing role,

00:24:26.800 --> 00:24:27.320
and so on.

00:24:27.340 --> 00:24:30.680
There are many more roles,
and you can implement your features

00:24:30.760 --> 00:24:32.720
in sometimes more than one role.

00:24:32.720 --> 00:24:36.110
There's no hard and fast rule that
you need to use a particular role

00:24:36.110 --> 00:24:38.160
to implement a particular feature.

00:24:38.380 --> 00:24:43.320
For example, if you wanted to implement
load balancing in your server,

00:24:43.320 --> 00:24:47.240
then your module could,
in the RTSP filter role,

00:24:47.240 --> 00:24:52.460
stop the request processing and send
back an RTSP redirect to another server.

00:24:52.460 --> 00:24:54.490
This is how typically
load balancing works,

00:24:54.490 --> 00:24:54.970
right?

00:24:55.110 --> 00:24:59.120
You have a server that's at the gate,
and it's redirecting

00:24:59.120 --> 00:25:01.360
requests to other servers.

00:25:01.360 --> 00:25:03.960
So basically,
based on some rules that you have,

00:25:03.960 --> 00:25:05.030
you can redirect.

00:25:05.120 --> 00:25:08.260
But you can collect
statistical information.

00:25:08.400 --> 00:25:09.910
You can collect data from the
other servers and load balance

00:25:09.910 --> 00:25:14.500
accordingly and send back an
RTSP redirect in the RTSP filter role.

00:25:14.500 --> 00:25:17.360
Also, the server only has
one content directory.

00:25:17.360 --> 00:25:20.400
But there might be times when you want
to have multiple content directories,

00:25:20.400 --> 00:25:24.280
so you're hosting your content on
more than one directory in the server.

00:25:24.280 --> 00:25:27.380
For this,
you could write a module that listens

00:25:27.380 --> 00:25:32.010
in the RTSP route role that redirects
or rewrites the content directory

00:25:32.010 --> 00:25:36.240
for each RTSP request that comes in,
again, based on certain rules.

00:25:38.700 --> 00:25:40.520
and the server also does some logging.

00:25:40.520 --> 00:25:45.430
The server keeps a lot of information
for each client that connects to it.

00:25:45.500 --> 00:25:49.650
And this information is kept
inside a QTSS object called

00:25:49.650 --> 00:25:51.400
the QTSS client session object.

00:25:51.400 --> 00:25:55.430
So when the client comes
in and disconnects,

00:25:55.490 --> 00:25:58.850
the server calls all the modules in
the client session closing role and

00:25:59.130 --> 00:26:03.200
passes in the client session object,
which means that your module,

00:26:03.200 --> 00:26:07.930
if it wants to log some advanced
attributes off the client,

00:26:08.640 --> 00:26:10.830
client session,
then you could do so by registering

00:26:11.070 --> 00:26:14.120
for the client session closing role,
grab those attributes of

00:26:14.120 --> 00:26:16.460
the client session object,
and record them in

00:26:16.460 --> 00:26:17.990
whatever form you may want.

00:26:18.040 --> 00:26:20.070
Maybe you don't want to
really record it to file,

00:26:20.070 --> 00:26:22.500
but you want to send it off
somewhere to a remote server.

00:26:22.500 --> 00:26:25.420
You can do all sorts of things with that,
and it's pretty simple.

00:26:28.940 --> 00:26:31.100
Now,
I've been talking about QTSS objects.

00:26:31.100 --> 00:26:32.780
What are QTSS objects?

00:26:32.860 --> 00:26:38.680
I'm not sure how many of you are familiar
with writing object-oriented programming

00:26:38.680 --> 00:26:41.880
or object-oriented programming languages,
but if you are,

00:26:42.000 --> 00:26:44.980
then you're all familiar with
the concept of an object.

00:26:45.160 --> 00:26:49.060
And really, a QTSS object is very similar
to a regular object in an

00:26:49.060 --> 00:26:52.830
object-oriented programming language,
which means that it has

00:26:52.830 --> 00:26:55.180
a set of attributes,
which are called members in

00:26:55.180 --> 00:26:58.600
object-oriented programming,
and it has a set of methods that you

00:26:58.700 --> 00:27:00.820
can operate on that particular object.

00:27:00.820 --> 00:27:03.130
So the concept is very similar.

00:27:03.130 --> 00:27:06.660
There's a QTSS object that
has a set of attributes,

00:27:06.660 --> 00:27:11.940
and there are a set of API calls that
you can operate on those QTSS objects.

00:27:12.040 --> 00:27:14.380
And it is a method.

00:27:15.150 --> 00:27:18.160
It's a way to exchange information
between the server and the modules.

00:27:18.160 --> 00:27:20.220
So the modules,
the server passes in these

00:27:20.300 --> 00:27:23.360
objects in different QTSS roles,
as I already mentioned.

00:27:23.360 --> 00:27:26.460
So the modules can get
any sort of information,

00:27:26.460 --> 00:27:29.400
get and set attributes in these objects.

00:27:29.400 --> 00:27:33.030
The server pre-defines
some of the objects.

00:27:33.100 --> 00:27:35.730
One of the objects is
a QTSS server object,

00:27:35.730 --> 00:27:40.370
which is basically the overall server
object that stores the attributes,

00:27:40.370 --> 00:27:44.560
such as the statistics,
as in the number of current connections,

00:27:45.080 --> 00:27:46.840
the current bandwidth, and so on.

00:27:46.960 --> 00:27:50.760
And all these attributes get dynamically
updated during the life of the server.

00:27:50.760 --> 00:27:54.600
The server also creates an
RTSP request object when an

00:27:54.600 --> 00:27:57.010
RTSP request first comes in.

00:27:57.040 --> 00:28:00.420
Correspondingly,
it creates a client session

00:28:00.630 --> 00:28:05.790
object for an RTP session that's
associated with a client when you're

00:28:05.790 --> 00:28:08.330
accessing the RTP packets app.

00:28:08.400 --> 00:28:13.100
So these are some of the pre-defined
or built-in objects of the server.

00:28:13.100 --> 00:28:19.970
And prior to QTSS, in QTSS 4,
the only objects available to the

00:28:20.140 --> 00:28:23.340
modules are all defined by the server.

00:28:23.340 --> 00:28:26.380
Modules could not define
their own QTSS objects.

00:28:26.460 --> 00:28:32.050
But in QTSS 4, modules can now create
their own QTSS objects.

00:28:36.790 --> 00:28:39.080
Now, why create QTSS objects?

00:28:39.080 --> 00:28:42.850
You could have always stored
your data in internal data

00:28:42.850 --> 00:28:46.080
structures inside your module,
and that's what all modules

00:28:46.330 --> 00:28:47.740
did prior to QTSS 4.

00:28:47.740 --> 00:28:50.170
But now,
you have the advantage of storing

00:28:50.560 --> 00:28:52.280
your data in QTSS objects.

00:28:52.360 --> 00:28:56.520
By doing this,
your data becomes part of the server,

00:28:56.520 --> 00:29:01.580
and all the other modules in the
server have access to these attributes.

00:29:02.140 --> 00:29:06.930
This becomes really important when
we learn more about it as we move on.

00:29:06.940 --> 00:29:11.240
So, by creating a QTSS object
for your module,

00:29:11.240 --> 00:29:15.870
it has become a stock QTSS object,
which means that you can use a really

00:29:16.220 --> 00:29:21.400
powerful yet simple QTSS API on your
object and do a variety of things.

00:29:21.400 --> 00:29:25.940
One of the other big advantages is
accessibility through the admin protocol.

00:29:25.940 --> 00:29:30.660
John has already talked to you about
how powerful the admin protocol is,

00:29:30.680 --> 00:29:32.040
and it's as simple as doing it.

00:29:32.060 --> 00:29:33.160
It's as simple as doing HTTP requests.

00:29:33.160 --> 00:29:37.630
By creating QTSS objects,
your data is browsable and accessible

00:29:37.630 --> 00:29:39.540
through the admin protocol.

00:29:39.540 --> 00:29:42.640
That means you can set and get
attributes through the admin protocol

00:29:42.640 --> 00:29:45.380
without writing your own new protocol.

00:29:47.870 --> 00:29:50.490
For example,
we ourselves use these objects

00:29:50.550 --> 00:29:52.040
in our modules at vWritten.

00:29:52.040 --> 00:29:55.020
And Chris talked about the
automatic relay feature.

00:29:55.020 --> 00:30:00.450
So in the relay module is the module
that implements the relaying of streams.

00:30:00.460 --> 00:30:04.440
And every time you set up
a relay in the web admin,

00:30:04.440 --> 00:30:07.540
the relay module is actually
creating a relay object,

00:30:07.540 --> 00:30:12.050
a QTSS relay object, really,
and it populates with all the attributes

00:30:12.110 --> 00:30:13.380
that are necessary for that relay.

00:30:13.380 --> 00:30:16.660
So once you configure it,
you have this object ready,

00:30:17.160 --> 00:30:21.240
and you can monitor it through the
web admin by getting these attributes,

00:30:21.240 --> 00:30:22.760
and that's what's happening.

00:30:22.760 --> 00:30:25.970
So if you go to the web admin and
try to look up the relay status,

00:30:26.060 --> 00:30:29.090
how many bits the relay is sending out,
how many are coming in and

00:30:29.090 --> 00:30:32.770
how many are going out,
what is really happening is

00:30:32.770 --> 00:30:37.030
that the admin is fetching the
relay object attributes to the

00:30:37.030 --> 00:30:38.760
admin protocol and getting it.

00:30:38.760 --> 00:30:42.420
So if you want to learn more
about how to create these objects,

00:30:42.470 --> 00:30:45.190
then the relay module is the
place to go and look for it.

00:30:46.520 --> 00:30:47.690
Thank you.

00:30:48.410 --> 00:30:50.160
Let me explain a little
more how this works.

00:30:50.160 --> 00:30:54.720
So prior to QTSS 4,
the modules kept their data internally.

00:30:54.720 --> 00:30:56.280
So you see the yellow blobs of data?

00:30:56.280 --> 00:30:58.520
Those are internal data structures.

00:30:58.520 --> 00:31:01.360
And as you can see,
they're not accessible to

00:31:01.360 --> 00:31:03.760
any of the other modules.

00:31:03.760 --> 00:31:04.470
They're not viewable.

00:31:04.480 --> 00:31:07.640
So you don't have the
advantage of the API calls,

00:31:07.670 --> 00:31:09.140
nor of the admin protocol.

00:31:09.140 --> 00:31:14.870
But now in QTSS 4,
a module can create its own QTSS objects.

00:31:14.960 --> 00:31:18.700
That means your module objects have
actually become part of the server.

00:31:18.700 --> 00:31:22.580
And you can see that by
virtue of being in a server,

00:31:22.580 --> 00:31:26.180
they have complete
access to the API calls.

00:31:26.180 --> 00:31:32.210
And any module can get access to your
data by using just the API calls.

00:31:32.250 --> 00:31:33.440
It's not something that's hidden.

00:31:35.360 --> 00:31:37.800
As you can see,
because the module objects

00:31:37.890 --> 00:31:41.470
are part of the server,
the admin protocol also has

00:31:41.470 --> 00:31:43.660
access to it via the admin module.

00:31:43.660 --> 00:31:46.720
And so you don't have to write your own.

00:31:46.900 --> 00:31:49.080
Prior to... I'm going
to go back a little.

00:31:50.600 --> 00:32:09.700
[Transcript missing]

00:32:11.460 --> 00:32:13.620
With the module objects,
you can see that the admin protocol

00:32:13.620 --> 00:32:16.780
knows about your module objects,
so your job is way simpler.

00:32:16.780 --> 00:32:20.570
And you can take full advantage
of the tools and technologies that

00:32:20.660 --> 00:32:22.560
the streaming server provides.

00:32:27.180 --> 00:32:29.640
Now, you know, now you want to create
these QTSS objects,

00:32:29.640 --> 00:32:30.640
but how do you do it?

00:32:30.720 --> 00:32:36.010
As I said earlier,
the concept of objects is very similar to

00:32:36.010 --> 00:32:37.900
objects in object-oriented programming.

00:32:37.900 --> 00:32:43.800
So just as you would first define a
class when you want to create objects,

00:32:43.800 --> 00:32:44.940
you would do the same.

00:32:44.940 --> 00:32:48.060
You would create a new
object type in QTSS.

00:32:48.060 --> 00:32:52.680
And so you would define this new object
type using the createObjectType call.

00:32:54.370 --> 00:32:57.390
And in object-oriented programming,
once you define a class,

00:32:57.530 --> 00:33:00.960
you need to instantiate an object
of that class to do anything.

00:33:00.960 --> 00:33:05.020
So this means it's the same analogy here,
because you instantiate an object

00:33:05.020 --> 00:33:08.160
of the newly defined type of yours.

00:33:08.160 --> 00:33:11.100
And you do so by using the
create object value call.

00:33:11.100 --> 00:33:14.040
This is just a brief,
it gives you a brief idea

00:33:14.040 --> 00:33:16.960
of what the API calls are,
but there's a lot more.

00:33:16.960 --> 00:33:23.100
And the API documentation clearly
explains how all these calls work.

00:33:23.170 --> 00:33:25.310
And there's a sample module
that you can look at if you

00:33:25.390 --> 00:33:26.560
want to learn more about it.

00:33:26.640 --> 00:33:32.240
And once you create these QTSS objects,
as I said earlier, you can use any

00:33:32.240 --> 00:33:36.450
QTSS API call on your object,
just like you would use for the

00:33:36.450 --> 00:33:38.610
regular built-in predefined objects.

00:33:41.520 --> 00:33:43.840
To illustrate some of
these concepts further,

00:33:43.840 --> 00:33:49.000
I wrote a sample module that
uses some of these API calls.

00:33:49.000 --> 00:33:53.180
I wanted to serve content
from users' home directories.

00:33:53.180 --> 00:33:58.100
Some of you are probably familiar
with when you go to a web server

00:33:58.100 --> 00:34:02.920
and you use a request such as
tilde joe slash index.html,

00:34:02.920 --> 00:34:08.780
the server is actually getting Joe's home
directory or Joe's web server directory.

00:34:08.780 --> 00:34:11.980
I wanted the same feature
for the streaming server,

00:34:11.980 --> 00:34:17.940
where I wanted to have a tilde
joe in my RTSP URL and my module.

00:34:17.940 --> 00:34:22.470
I can serve content from Joe's
home directory instead of having

00:34:22.470 --> 00:34:26.230
to put all the user's content into
one big movies directory so that

00:34:26.310 --> 00:34:28.360
the users have their own access.

00:34:28.360 --> 00:34:32.160
It's a very common use,
and everybody wants to have that.

00:34:32.160 --> 00:34:35.990
So I decided to write a
module that can do it.

00:34:36.310 --> 00:34:39.930
So when a request comes in
with tilde joe slash bday.move,

00:34:39.980 --> 00:34:44.320
the bday.move is actually going to
be coming from Joe's home directory.

00:34:44.320 --> 00:34:47.670
And since I need to rewrite
the content directory to

00:34:47.890 --> 00:34:51.730
point to Joe's home directory,
the role that I need to register

00:34:51.770 --> 00:34:53.880
for is the RTSP route role.

00:34:53.880 --> 00:34:57.820
The RTSP route role is basically routing
the request to another directory.

00:34:57.820 --> 00:35:02.640
And the attributes that I'm interested
in are the RTSP request file

00:35:02.660 --> 00:35:05.380
path and the RTSP request router.

00:35:05.380 --> 00:35:07.780
The request file path,
because as you can see,

00:35:07.780 --> 00:35:10.180
the file path has tilde
joe slash bday.move,

00:35:10.180 --> 00:35:12.810
and I need to strip out the
tilde joe because the server

00:35:12.910 --> 00:35:14.730
doesn't know what tilde joe is.

00:35:14.740 --> 00:35:19.070
And the request router will be initially
pointing to the movies directory,

00:35:19.190 --> 00:35:22.080
so I need to change that
to Joe's home directory.

00:35:22.080 --> 00:35:23.850
And these two attributes are going to
be coming from the bday.move directory.

00:35:23.860 --> 00:35:27.710
And these two attributes belong
to the RTSP request object,

00:35:27.820 --> 00:35:31.230
and the RTSP request object
gets passed in by the server

00:35:31.330 --> 00:35:33.400
in the QTSS RTSP route role.

00:35:36.690 --> 00:35:39.500
As I mentioned earlier,
the server doesn't know what

00:35:39.500 --> 00:35:41.900
modules can handle what roles.

00:35:41.920 --> 00:35:44.970
So you need to register for
the role when the server calls

00:35:45.050 --> 00:35:47.480
you in the register role.

00:35:47.480 --> 00:35:50.760
And you can do so by telling
the server that you want to

00:35:50.760 --> 00:35:53.740
be called for the route role,
as I'm doing here,

00:35:53.740 --> 00:35:56.690
and some other roles that you might need.

00:35:58.410 --> 00:36:01.420
There's only one entry point
function into the module,

00:36:01.420 --> 00:36:06.600
so the server always calls the module
in the same function for every role.

00:36:06.600 --> 00:36:12.040
So it's a very common way of
writing dynamic modules or plug-ins,

00:36:12.080 --> 00:36:14.140
and we call it dispatch functions.

00:36:14.280 --> 00:36:17.470
And as you can see,
I am just redirecting.

00:36:17.490 --> 00:36:21.790
When I get called in the RTSP route role,
my module is calling my own internal

00:36:21.790 --> 00:36:25.300
function that's actually doing the work.

00:36:26.780 --> 00:36:32.620
Now the work here is to look for a
tilde in the first part of the path,

00:36:32.770 --> 00:36:36.990
and if I find the tilde,
then rewrite the requestRooter

00:36:36.990 --> 00:36:43.600
attribute of the request object to
point to the user's home directory.

00:36:43.960 --> 00:36:46.600
As you can see,
the actual API calls are not here,

00:36:46.600 --> 00:36:49.560
but this is the code
that's going to do it.

00:36:49.560 --> 00:36:54.610
The rewriteRooter is rewriting
the requestRooter attribute to

00:36:54.610 --> 00:36:57.640
Joe's home directory in this case.

00:36:57.640 --> 00:37:01.340
So, let me show you how it works.

00:37:12.940 --> 00:37:14.660
So let me go to my home directory.

00:37:14.760 --> 00:37:16.350
Here the user is WWDC.

00:37:16.450 --> 00:37:22.050
And I have one movie
in my movies directory.

00:37:23.710 --> 00:37:24.720
and Enya1.mov.

00:37:24.770 --> 00:37:33.110
So I'm going to try and go to
my player and connect to the

00:37:33.110 --> 00:37:35.560
movie in my home directory.

00:37:38.800 --> 00:37:40.290
Oh, there it is.

00:37:40.360 --> 00:37:45.070
So it's tilde www.dc/nu1.move.

00:37:45.070 --> 00:37:45.960
Let's see what happens.

00:37:46.100 --> 00:37:47.480
404 not found.

00:37:47.580 --> 00:37:49.760
So the server doesn't
understand what a tilde is,

00:37:49.770 --> 00:37:51.920
and so it's throwing out and saying,
I don't know what it is.

00:37:52.010 --> 00:37:53.130
It's not here.

00:37:53.130 --> 00:37:54.730
It's not available.

00:37:55.330 --> 00:37:58.490
I've written a dynamic module,
and this dynamic module can be

00:37:58.610 --> 00:38:01.570
dropped into the modules folder.

00:38:07.300 --> 00:38:09.370
There it is in the modules folder.

00:38:09.380 --> 00:38:12.640
And I need to restart the server
so that the server can load up

00:38:12.820 --> 00:38:15.740
the dynamic module or the plugin.

00:38:18.600 --> 00:38:19.600
There you go.

00:38:19.600 --> 00:38:19.880
I restarted the server.

00:38:19.880 --> 00:38:23.130
I'm going to try and connect it again,
now with my module installed.

00:38:23.140 --> 00:38:25.420
So hopefully,
I've written the module correctly

00:38:25.420 --> 00:38:26.930
and there are not too many bugs.

00:38:26.990 --> 00:38:27.520
It'll work.

00:38:27.620 --> 00:38:28.640
Let's see.

00:38:28.640 --> 00:38:30.460
There you go.

00:38:41.550 --> 00:38:44.230
So you can see how easy it
is to write really powerful

00:38:44.230 --> 00:38:46.460
modules with not so much code,
really.

00:38:46.460 --> 00:38:48.620
So, and this concludes my demo.

00:38:48.620 --> 00:38:49.170
Chris?

00:38:57.540 --> 00:38:59.830
Okay,
so you've seen some of the new features

00:38:59.850 --> 00:39:02.460
in QuickTime Streaming Server 4.

00:39:02.460 --> 00:39:04.380
The team's already hard on
work on the next release,

00:39:04.380 --> 00:39:08.690
so you'll be seeing a
bunch of new features some

00:39:08.740 --> 00:39:13.140
John showed you how to work
with the admin protocol.

00:39:13.140 --> 00:39:15.550
Hopefully you can see the
power of the admin protocol.

00:39:15.840 --> 00:39:18.010
The tools he wrote were simple to write.

00:39:18.180 --> 00:39:20.940
He wrote them just as demos and it didn't
take him a whole lot of time to do it.

00:39:21.040 --> 00:39:24.880
You guys could write even more powerful
tools than that to do monitoring.

00:39:25.310 --> 00:39:31.730
and Mike Leigh,
and Mike Leigh showed you that

00:39:31.730 --> 00:39:34.460
it actually really is easy to
write modules for the server.

00:39:34.460 --> 00:39:37.690
You need to understand the APIs,
but you can do some pretty powerful

00:39:37.700 --> 00:39:39.260
things with just a few lines of code.

00:39:39.260 --> 00:39:44.900
I encourage all of you to try
to take a look at some of the

00:39:44.990 --> 00:39:47.180
documentation for these things.

00:39:47.910 --> 00:39:52.500
So let's talk about what is left for the
rest of the week related to streaming.

00:39:52.500 --> 00:39:55.530
So not much left because it's Thursday,
but if you want to learn more

00:39:55.530 --> 00:39:58.340
about MPEG-4 and QuickTime,
there's a session on

00:39:58.340 --> 00:40:01.100
Friday at 3.30 in room A2.

00:40:01.100 --> 00:40:04.210
And I believe some of our
MPEG-4 engineers will be there,

00:40:04.210 --> 00:40:06.540
so that should be a pretty good session.

00:40:06.540 --> 00:40:11.240
And then on Friday at 10.30 a.m.,
there's a feedback forum for QuickTime,

00:40:11.240 --> 00:40:13.910
and that's the place to give
any kind of feedback you'd

00:40:14.050 --> 00:40:15.820
like for anything QuickTime.

00:40:16.400 --> 00:40:19.320
QuickTime Streaming Server,
QuickTime Client, QuickTime APIs,

00:40:19.320 --> 00:40:20.360
anything like that.

00:40:20.520 --> 00:40:23.500
It's usually a pretty
interesting feedback session.

00:40:25.990 --> 00:40:28.140
So if you're a developer and
you need to work with Apple,

00:40:28.140 --> 00:40:29.580
Jeff Lowe is your man.

00:40:29.580 --> 00:40:34.240
He's the QuickTime technology manager
in the evangelism group at Apple.

00:40:34.240 --> 00:40:37.190
So he handles developer things
for all things QuickTime,

00:40:37.190 --> 00:40:40.360
and his email address is there,
jefflowe at apple.com.

00:40:42.250 --> 00:40:45.010
and Jeff is here in the room,
so maybe if you want to talk to him now,

00:40:45.010 --> 00:40:50.390
he's... after the session,
he's sitting right over there.

00:40:50.650 --> 00:40:53.270
In terms of where you can get
more information on some of the

00:40:53.270 --> 00:40:55.920
things you heard about today,
so as I mentioned,

00:40:55.920 --> 00:40:58.880
the streaming server is open source,
so if you want to just take a look

00:40:58.880 --> 00:41:01.560
at the source code or actually
become one of our developers,

00:41:01.560 --> 00:41:05.060
go to Apple's open source website
and you'll see links there for

00:41:05.060 --> 00:41:06.920
the Darwin Streaming Server.

00:41:06.920 --> 00:41:09.120
And we encourage you to help us out.

00:41:09.120 --> 00:41:10.060
We love help.

00:41:10.900 --> 00:41:14.680
If you want to learn more about
QuickTime developer topics,

00:41:14.750 --> 00:41:19.150
the developer.apple.com slash
QuickTime site has everything

00:41:19.210 --> 00:41:23.970
about QuickTime in terms of APIs,
the QuickTime Streaming Server APIs,

00:41:23.970 --> 00:41:26.780
and anything QuickTime, basically.

00:41:26.780 --> 00:41:29.790
And then another good place
for contacting or for kind

00:41:29.790 --> 00:41:33.000
of getting information are
some of our mailing lists.

00:41:33.040 --> 00:41:36.350
So the streaming server
group has two mailing lists.

00:41:36.430 --> 00:41:37.720
We've got a developer's mailing list.

00:41:37.780 --> 00:41:39.660
That's for people like you,
people who are actually

00:41:39.670 --> 00:41:40.780
working on the server,
trying to get information on the server,

00:41:40.780 --> 00:41:43.030
trying to write modules,
working on the open source,

00:41:43.070 --> 00:41:44.720
working with the admin protocol.

00:41:44.720 --> 00:41:48.120
And we've got a user's list,
which is more for people who are

00:41:48.120 --> 00:41:52.090
deploying the server and trying to
get it up and running or wondering

00:41:52.490 --> 00:41:53.900
how they can do certain things.

00:41:53.900 --> 00:41:57.040
Both of these lists
are fairly low traffic.

00:41:57.040 --> 00:41:59.240
I shouldn't say traffic.

00:41:59.240 --> 00:42:02.150
There's a low amount of noise.

00:42:02.160 --> 00:42:03.800
It's actually,
they're pretty high quality lists.

00:42:03.800 --> 00:42:06.840
And so I'd encourage you to go
ahead and subscribe to those lists.

00:42:06.860 --> 00:42:09.200
And the other thing about those
lists is that the engineers

00:42:09.200 --> 00:42:10.640
are really active on that list.

00:42:10.760 --> 00:42:14.000
That's the way that you talk directly
to a QuickTime Streaming Server engineer

00:42:14.000 --> 00:42:16.980
is to get up on that list and ask.

00:42:16.980 --> 00:42:20.000
In addition,
there's a mailing list for kind

00:42:20.000 --> 00:42:21.680
of general QuickTime discussion.

00:42:21.680 --> 00:42:24.420
It's typically kind
of a technical nature.

00:42:24.420 --> 00:42:26.190
A lot of content developers
are on that list,

00:42:26.190 --> 00:42:28.250
and that list is the
QuickTime Talk mailing list.

00:42:28.280 --> 00:42:32.300
And to get on any of these mailing lists,
just go to the list.apple.com website,

00:42:32.300 --> 00:42:33.980
and you can subscribe
on that web page there.

00:42:36.700 --> 00:42:40.650
In terms of technical documentation,
I mentioned that you can get the

00:42:40.710 --> 00:42:44.160
streaming server API documentation
off of the developer website.

00:42:44.160 --> 00:42:47.570
In addition to that,
if you download or check

00:42:47.640 --> 00:42:49.450
out the source code,
there's a documentation

00:42:49.450 --> 00:42:50.780
directory in the source code.

00:42:50.780 --> 00:42:54.400
What that has is kind of
unofficial documentation.

00:42:54.400 --> 00:42:58.140
These are things that are more like
developer notes and how to build,

00:42:58.140 --> 00:43:01.120
some discussion of some of
the internal workings of the

00:43:01.120 --> 00:43:02.920
server and things like that.

00:43:02.970 --> 00:43:04.500
I encourage you to take
a look at that directory.

00:43:05.500 --> 00:43:10.320
A great place to learn about
modules is also in the source code.

00:43:10.680 --> 00:43:13.260
As Mythili mentioned,
almost every feature,

00:43:13.260 --> 00:43:15.500
actually every feature in the
server is implemented as a module.

00:43:15.500 --> 00:43:18.100
We also include some sample modules.

00:43:18.100 --> 00:43:24.460
These are great places to look
through code and learn because

00:43:24.460 --> 00:43:27.690
the sample modules are intended
to teach you how to write modules.

00:43:27.700 --> 00:43:30.170
They're not quite as
daunting as something like

00:43:30.170 --> 00:43:33.900
our live reflection module,
which is huge and pretty complicated.

00:43:34.300 --> 00:43:36.060
These are all well documented
and well commented.