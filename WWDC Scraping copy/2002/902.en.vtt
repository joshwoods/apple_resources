WEBVTT

00:00:10.490 --> 00:00:11.040
Good afternoon.

00:00:11.040 --> 00:00:14.430
Welcome to session 902,
AppleScript Introduction.

00:00:14.580 --> 00:00:17.390
AppleScript Studio has been a
big hit since its inception.

00:00:17.540 --> 00:00:21.220
It allows you to create
full-bore application with

00:00:21.220 --> 00:00:23.400
gorgeous Aqua interfaces.

00:00:23.530 --> 00:00:25.880
And to tell you all about it
and show you some examples,

00:00:25.950 --> 00:00:29.230
I'd like to introduce the
AppleScript Studio engineer,

00:00:29.230 --> 00:00:30.680
Tim Bumgarner.

00:00:37.160 --> 00:00:39.340
Thank you, Jason.

00:00:39.390 --> 00:00:42.630
I have a good friend of mine
that suggested that maybe

00:00:42.930 --> 00:00:46.390
I should change my title to Mr.

00:00:46.480 --> 00:00:47.460
AppleScript Studio.

00:00:47.460 --> 00:00:52.600
Besides being a little bit presumptuous,
it actually appealed to me.

00:00:52.600 --> 00:00:56.170
So I thought about it for a minute,
and then I remembered what the

00:00:56.190 --> 00:00:58.420
acronym for AppleScript Studio is.

00:01:03.560 --> 00:01:04.900
So who wants to go through life being Mr.

00:01:04.900 --> 00:01:05.450
Ass, right?

00:01:05.480 --> 00:01:06.290
All right.

00:01:06.290 --> 00:01:11.160
Seriously, it's actually,
AppleScript Studio is a real team effort.

00:01:11.160 --> 00:01:15.430
It took a lot of people and a lot of hard
work that we were able to build on top

00:01:15.520 --> 00:01:17.370
of to bring this great product to you.

00:01:17.380 --> 00:01:19.460
And this is a bit of our agenda today.

00:01:19.460 --> 00:01:22.860
I would like to do a quick introduction,
talk a bit about the process of

00:01:23.140 --> 00:01:26.360
building a studio application,
and then we're going to start on

00:01:26.360 --> 00:01:29.060
the other end of the spectrum,
and we're going to take an already

00:01:29.090 --> 00:01:32.190
existing Cocoa application and
add studio functionality to it.

00:01:32.950 --> 00:01:35.160
And then we're going to talk
about using other languages.

00:01:35.160 --> 00:01:37.350
And when I mean other languages,
I don't mean using other

00:01:37.350 --> 00:01:38.450
AppleScript dialects.

00:01:38.490 --> 00:01:40.240
I mean other programming languages.

00:01:40.240 --> 00:01:42.740
And then we're going to talk a
bit about what's in store for

00:01:42.740 --> 00:01:44.640
AppleScript Studio looking forward.

00:01:44.640 --> 00:01:46.430
And if I...

00:01:47.670 --> 00:01:49.260
Don't talk so fast,
or talk a little faster,

00:01:49.350 --> 00:01:50.620
which is not a problem for me.

00:01:50.620 --> 00:01:52.870
We'll actually have a little
time for Q&A at the end.

00:01:54.940 --> 00:01:56.870
So what is AppleScript Studio and
what can you do with it?

00:01:56.940 --> 00:02:01.700
What it is, it's that we've taken these
great technologies at Apple.

00:02:01.700 --> 00:02:04.870
We had Cocoa,
what everything is built on top of it.

00:02:04.880 --> 00:02:08.100
We've taken these developer tools,
Project Builder and Interface Builder,

00:02:08.140 --> 00:02:10.720
and we integrated it all
together with AppleScript.

00:02:10.720 --> 00:02:12.300
We integrated into each of the tools.

00:02:12.300 --> 00:02:16.200
We developed a runtime framework
such that we could build and run

00:02:16.200 --> 00:02:18.280
native Macintosh 10 applications.

00:02:18.280 --> 00:02:20.170
And so it's really two things.

00:02:20.200 --> 00:02:22.330
It's a development tool
or a development system,

00:02:22.370 --> 00:02:23.540
and it's also a runtime.

00:02:23.740 --> 00:02:26.890
That's sort of where
the studio name came in.

00:02:27.370 --> 00:02:29.180
So let's talk a little bit
about each of these components.

00:02:29.220 --> 00:02:32.800
The AppleScript kit is a
system library framework,

00:02:32.800 --> 00:02:36.000
and this is sort of the
foundation for AppleScript Studio.

00:02:36.000 --> 00:02:40.410
We need this for both the development
tools and for studio applications to run.

00:02:40.420 --> 00:02:45.460
It contains the script suites that
make a studio application scriptable,

00:02:45.460 --> 00:02:49.090
and most importantly,
it provides the link between

00:02:49.090 --> 00:02:53.620
Cocoa and AppleScript,
so that when you click on a button,

00:02:53.620 --> 00:02:58.460
AppleScript kit waits for that,
grabs that, and then executes the script

00:02:58.460 --> 00:02:59.660
you've attached to that button.

00:02:59.700 --> 00:03:02.200
And then on the development side,
we've got three plug-ins

00:03:02.200 --> 00:03:05.690
into Project Builder,
and then we've also got an additional

00:03:05.700 --> 00:03:08.090
plug-in into Interface Builder.

00:03:08.120 --> 00:03:10.230
And we'll take a look at each of these.

00:03:10.240 --> 00:03:14.260
The ASK plug-in is our editor,
so we can actually edit AppleScript files

00:03:14.370 --> 00:03:16.380
right in Project Builder,
taking full advantage of the

00:03:16.380 --> 00:03:18.960
check syntax and the things that
we're used to in Script Editor.

00:03:18.960 --> 00:03:22.130
The dictionary plug-in provides
us with a built-in dictionary

00:03:22.160 --> 00:03:25.220
viewer inside of Project Builder,
so we don't have to go into

00:03:25.220 --> 00:03:28.240
Script Editor and to...
to look at our scripts,

00:03:28.250 --> 00:03:30.880
or the various dictionaries
of a scriptable application.

00:03:30.880 --> 00:03:33.830
So then we've also fully integrated
into the debugger plug-in UI,

00:03:33.840 --> 00:03:36.970
so we can debug right
inside of Project Builder.

00:03:38.750 --> 00:03:41.170
On the palette,
what we have is we've plugged

00:03:41.310 --> 00:03:43.510
in a palette so that it provides
the AppleScript functionality we

00:03:43.510 --> 00:03:44.690
need inside of Interface Builder.

00:03:44.700 --> 00:03:48.940
It provides an inspector so that any time
you want to add AppleScript functionality

00:03:48.940 --> 00:03:51.430
to your nib file,
you just simply go to that palette.

00:03:51.440 --> 00:03:54.100
So what can you do with
AppleScript Studio?

00:03:56.740 --> 00:03:59.190
Well, we can create native
Macintosh OS X applications.

00:03:59.190 --> 00:04:02.160
Fundamentally,
what we're creating are Cocoa apps.

00:04:02.160 --> 00:04:05.590
And so once you've built
it and delivered it out,

00:04:05.750 --> 00:04:07.200
people can just double-click
and run with it.

00:04:07.220 --> 00:04:08.590
It really is a Cocoa application.

00:04:08.620 --> 00:04:10.510
And of course,
since it is a Cocoa application,

00:04:10.510 --> 00:04:12.770
we can take advantage of
everything that Cocoa provides.

00:04:12.920 --> 00:04:16.020
It provides some amazing, great services,
has a great, rich user interface,

00:04:16.020 --> 00:04:18.180
and we get to take advantage
of all those things.

00:04:18.370 --> 00:04:22.350
We can take advantage of drawers, sheets,
sliders, all those wonderful things.

00:04:22.350 --> 00:04:25.050
But really,
the real power that we get to is we

00:04:25.120 --> 00:04:27.560
get to leverage off of AppleScript.

00:04:27.560 --> 00:04:30.780
Because not only can we
talk to local applications,

00:04:30.780 --> 00:04:33.960
we can talk to applications
on other computers.

00:04:33.960 --> 00:04:36.400
We can actually then also
talk to web services.

00:04:36.400 --> 00:04:38.470
And that's a great direction
that we're moving in.

00:04:38.500 --> 00:04:42.190
And some of the other things is that not
only can we talk to other applications,

00:04:42.190 --> 00:04:44.540
we can actually talk to
the UNIX foundation that's

00:04:44.540 --> 00:04:47.360
underneath Mac OS X using
the do shell script command.

00:04:47.360 --> 00:04:48.340
That really opens up the possibilities.

00:04:48.340 --> 00:04:51.540
And then also,
then we can leverage project

00:04:51.560 --> 00:04:56.320
builders' ability to include
other programming languages.

00:04:56.320 --> 00:04:57.710
So we can use C, C++.

00:04:57.750 --> 00:05:00.230
We can do Objective C, Objective C++.

00:05:00.230 --> 00:05:03.910
We can do Java,
either through the bridge or directly.

00:05:03.920 --> 00:05:07.160
And so we're going to give you
some demonstrations of that today.

00:05:07.870 --> 00:05:10.430
So what we'd like to do is actually
go through the process of building

00:05:10.470 --> 00:05:12.890
an AppleScript Studio application
from scratch.

00:05:13.000 --> 00:05:16.800
And to do that,
I would like to bring out John Coelho,

00:05:16.800 --> 00:05:19.620
who's our Q&A manager,
to help me with the demo today.

00:05:19.620 --> 00:05:20.380
John?

00:05:20.380 --> 00:05:21.550
Thank you.

00:05:28.150 --> 00:05:30.330
All right, so what we're going to do--
and I apologize to those that

00:05:30.510 --> 00:05:32.020
came to the kitchen on Sunday.

00:05:32.050 --> 00:05:33.550
We're going to see a little
bit of the same thing.

00:05:33.570 --> 00:05:35.480
But we're going to build a
currency converter application.

00:05:35.480 --> 00:05:42.350
And this application is going to
let us enter an exchange rate,

00:05:42.410 --> 00:05:46.590
some dollars to convert,
and give us a simple calculation.

00:05:46.590 --> 00:05:46.590
And we'll show you how
easy that is to do.

00:05:46.590 --> 00:05:46.590
So John has chosen the new project.

00:05:46.700 --> 00:05:59.700
[Transcript missing]

00:06:01.150 --> 00:06:02.640
Okay,
and you can see that Project Builder

00:06:02.640 --> 00:06:03.700
has opened a project for me.

00:06:03.700 --> 00:06:06.500
It's already been set up so
it'll build a Studio application.

00:06:06.560 --> 00:06:10.640
It has already added a default
empty AppleScript for us.

00:06:10.640 --> 00:06:13.480
It has our main menu nib,
which contains our user interface.

00:06:13.480 --> 00:06:16.630
And then it has this file
that John has selected called

00:06:16.630 --> 00:06:18.890
AppleScriptKit.asDictionary.

00:06:19.210 --> 00:06:21.710
What this is is sort of a
freeze-dried terminology,

00:06:21.710 --> 00:06:23.740
because we haven't built a Studio app,
and since Cocoa apps

00:06:23.820 --> 00:06:26.880
are dynamic terminology,
we needed a way to be able to look at the

00:06:26.880 --> 00:06:28.530
terminology before you've built an app.

00:06:28.610 --> 00:06:29.980
And so this is what we've come up with.

00:06:30.060 --> 00:06:33.460
And so he's simply selected the
application object in the class,

00:06:33.550 --> 00:06:36.740
and we can see all the various
elements and the properties,

00:06:36.810 --> 00:06:38.670
and we can browse through that.

00:06:38.700 --> 00:06:43.240
And there's also, under the file menu,
we can choose Open Dictionary.

00:06:43.240 --> 00:06:45.530
So we don't have to go to Script Editor,
we can do it right here.

00:06:46.150 --> 00:06:48.230
And this will show us all of
the scriptable applications

00:06:48.270 --> 00:06:50.470
that are on our system,
and we'll choose the finder.

00:06:50.480 --> 00:06:52.850
And you can see, again,
all the various classes and

00:06:52.850 --> 00:06:54.320
events that are available.

00:06:54.320 --> 00:06:56.800
All right,
let's go ahead and close those, John.

00:06:58.510 --> 00:07:00.650
So let's go ahead and get started
with building our application.

00:07:00.660 --> 00:07:02.830
And we always do that by
going into our user interface.

00:07:02.910 --> 00:07:05.340
Let's double-click on mainmenu.num.

00:07:07.670 --> 00:07:10.730
And it opens up our project
into Interface Builder.

00:07:10.730 --> 00:07:13.600
And it just starts out by
default with an empty window.

00:07:13.740 --> 00:07:17.190
First thing I'd like to do is go ahead
and change the title of the window.

00:07:18.170 --> 00:07:20.040
Call that Currency Converter.

00:07:20.040 --> 00:07:22.560
And we're going to go ahead and
start adding some text fields,

00:07:22.560 --> 00:07:25.550
because what we want to do is enter a few
different values and do a calculation.

00:07:25.560 --> 00:07:27.090
So go ahead and drag out a text field.

00:07:27.190 --> 00:07:29.250
And you'll notice as he drags
around Interface Builder,

00:07:29.250 --> 00:07:31.620
you get all the nice guidelines
that show us where the Aqua thinks

00:07:31.810 --> 00:07:32.910
that it should be placed.

00:07:32.910 --> 00:07:34.190
Make it a little bit wider.

00:07:34.190 --> 00:07:36.520
And then I know that it's
going to contain numbers.

00:07:36.520 --> 00:07:39.520
So there's also another object in
Cocoa that's called a formatter,

00:07:39.520 --> 00:07:41.050
a number formatter in this case.

00:07:41.050 --> 00:07:42.880
And you just drag it
right on top of that.

00:07:42.890 --> 00:07:44.840
The other thing is that
since it's a number,

00:07:44.840 --> 00:07:46.070
we want to right-align it.

00:07:46.090 --> 00:07:47.830
So we go to the Attributes panel.

00:07:50.100 --> 00:07:51.340
And we right-align that object.

00:07:51.340 --> 00:07:52.040
Now I think we're ready.

00:07:52.040 --> 00:07:54.420
We can go ahead and
duplicate that a few times.

00:07:54.420 --> 00:07:55.450
A couple times there.

00:07:55.460 --> 00:07:56.620
There's one and another one.

00:07:56.620 --> 00:07:57.460
All right, great.

00:07:57.460 --> 00:07:59.980
Now I know that the third one is
going to be a calculated field.

00:08:00.000 --> 00:08:01.540
And I don't want to be able to edit.

00:08:01.540 --> 00:08:04.460
So we're going to disable that
by checking off the editable.

00:08:04.460 --> 00:08:07.240
But we do want it selectable
so they can copy the value.

00:08:07.240 --> 00:08:08.320
Now we need some text labels.

00:08:08.380 --> 00:08:14.120
And we're going to put
some values in here.

00:08:16.800 --> 00:08:26.900
[Transcript missing]

00:08:27.830 --> 00:08:30.190
And then another way of duplicating
objects in Interface Builder

00:08:30.200 --> 00:08:31.960
is you can just hold down the
Option key and drag it up.

00:08:32.040 --> 00:08:33.940
And again,
Aqua guidelines show you exactly

00:08:34.020 --> 00:08:35.400
where the text baseline is.

00:08:35.400 --> 00:08:38.190
And then we'll edit those values.

00:08:47.390 --> 00:08:47.540
Great.

00:08:47.670 --> 00:08:48.880
So now we've got our text field.

00:08:48.880 --> 00:08:49.940
Everything's laid out pretty well.

00:08:49.940 --> 00:08:53.190
Let's go ahead and drag it up to the left
and sort of center it where it should be.

00:08:53.220 --> 00:08:55.240
Resize our window.

00:08:55.240 --> 00:08:56.860
Oh, the other thing we need
is we need a button.

00:08:56.860 --> 00:09:00.360
And we're going to click on that
to actually do our calculation.

00:09:00.360 --> 00:09:01.810
Rename it to Convert.

00:09:04.130 --> 00:09:05.760
Another thing we like to do
is make it the default button.

00:09:05.760 --> 00:09:08.780
We do that by going to the key
equivalent pop-up and choosing return.

00:09:08.780 --> 00:09:10.970
Not entirely obvious that
that's how you do it,

00:09:10.970 --> 00:09:12.290
but that's where you do it.

00:09:12.360 --> 00:09:14.420
All right,
let's shrink that window up a bit.

00:09:16.060 --> 00:09:16.780
And let's test it.

00:09:16.830 --> 00:09:18.660
We can actually test the interface
right here in Interface Builder.

00:09:18.660 --> 00:09:21.860
So we go to the File menu
and choose Test Interface.

00:09:21.950 --> 00:09:24.210
We can enter a couple values.

00:09:24.440 --> 00:09:25.540
See the formatter in operation.

00:09:25.600 --> 00:09:28.100
It automatically inserts the
proper number of decimal places,

00:09:28.100 --> 00:09:28.660
commas.

00:09:28.660 --> 00:09:30.730
We can just tab between the two fields.

00:09:30.740 --> 00:09:33.040
But it looks like we
can resize the window.

00:09:33.040 --> 00:09:33.880
Let's try that.

00:09:34.120 --> 00:09:35.740
Well, oof, not at all what we want.

00:09:35.780 --> 00:09:37.290
So we better go back and turn that off.

00:09:37.400 --> 00:09:41.560
So we can just quit testing,
and we'll go to the window menu, palette,

00:09:41.560 --> 00:09:42.740
and turn that off.

00:09:42.810 --> 00:09:43.150
Okay, great.

00:09:43.180 --> 00:09:44.000
I think everything looks great.

00:09:44.000 --> 00:09:45.900
So now we've got our
user interface in place,

00:09:45.900 --> 00:09:48.020
and we still haven't done
any AppleScript work.

00:09:48.120 --> 00:09:49.470
Well, now we're going to go
ahead and start doing that.

00:09:49.500 --> 00:09:52.570
And we do that by going to
the info window and choosing

00:09:52.570 --> 00:09:54.180
the AppleScript pop-up.

00:09:54.400 --> 00:09:56.110
Or the AppleScript panel from the pop-up.

00:09:56.120 --> 00:09:58.740
And I want to just talk for
just a minute about that.

00:09:58.780 --> 00:10:01.130
So what it provides is the
ability to name objects.

00:10:01.140 --> 00:10:02.860
And I don't mean name as in the title.

00:10:02.860 --> 00:10:05.880
They're named as in from AppleScript,
so that you can talk to

00:10:05.880 --> 00:10:08.440
those objects by their name,
not by index.

00:10:08.520 --> 00:10:10.390
And also, it shows you the index.

00:10:10.430 --> 00:10:12.160
So as he clicks around
on different objects,

00:10:12.160 --> 00:10:15.020
you'll see that the index changes
to show you what those indexes are.

00:10:15.020 --> 00:10:17.690
Now,
the next section is the event handlers.

00:10:17.760 --> 00:10:21.450
And every object has a certain set of
event handlers that it can actually

00:10:21.450 --> 00:10:23.260
employ or produce or generate.

00:10:23.520 --> 00:10:26.450
And so as he clicks on different ones,
you'll see that there's a different set

00:10:26.450 --> 00:10:27.840
of event handlers that are available.

00:10:27.840 --> 00:10:29.670
So let's go ahead and start naming, John.

00:10:29.680 --> 00:10:30.520
Let's start with the window.

00:10:32.000 --> 00:10:32.720
Go ahead and click on the window.

00:10:32.720 --> 00:10:33.340
We can click on the back.

00:10:33.400 --> 00:10:34.500
And we'll call that main.

00:10:34.500 --> 00:10:37.430
And then we'll name each
of these text fields.

00:10:37.490 --> 00:10:38.840
And so the first one we'll call rate.

00:10:38.840 --> 00:10:41.500
The second one we'll call dollars.

00:10:41.500 --> 00:10:46.710
And the last one we'll just go
ahead and label that amounts.

00:10:47.320 --> 00:10:49.940
And then we need to
name our convert button.

00:10:49.940 --> 00:10:50.820
Convert.

00:10:50.940 --> 00:10:53.770
And now this is the point where we're
actually going to attach a script.

00:10:53.860 --> 00:10:57.030
So when you click that button,
we want some AppleScript executed.

00:10:57.070 --> 00:11:00.660
And you do that by simply
clicking on the click check box.

00:11:00.700 --> 00:11:02.570
And then we're going to attach
it in-- or put it into the

00:11:02.670 --> 00:11:03.870
Currency Converter AppleScript.

00:11:04.030 --> 00:11:06.320
The one thing I didn't talk about
is the script section at the bottom.

00:11:06.550 --> 00:11:09.630
What it does is it lists all of the
scripts that are in your current project,

00:11:09.630 --> 00:11:12.460
and it also lets you create
new scripts right from here.

00:11:12.500 --> 00:11:14.780
We're going to go ahead
and click Edit Script.

00:11:15.420 --> 00:11:17.530
And we've already got it up.

00:11:17.690 --> 00:11:20.550
Notice that in the script,
there weren't any handlers called clicks.

00:11:20.550 --> 00:11:22.160
It automatically generated it for us.

00:11:22.220 --> 00:11:23.890
And we're going to go ahead
and insert our script.

00:11:25.480 --> 00:11:26.370
Tell window of the object.

00:11:26.460 --> 00:11:27.380
Okay, the very first line.

00:11:27.380 --> 00:11:29.750
Basically,
the object is the thing that was clicked,

00:11:29.840 --> 00:11:30.910
so that's going to be the button.

00:11:30.910 --> 00:11:34.200
And a button, through its inheritance,
has a property called window.

00:11:34.200 --> 00:11:37.720
And so to simplify things,
we know that we're going to be asking

00:11:37.720 --> 00:11:41.400
several UI objects in the window,
and so the simplest thing to do is

00:11:41.450 --> 00:11:43.700
just say tell window of the object.

00:11:43.700 --> 00:11:45.340
Otherwise,
we'd have to do it on every line.

00:11:45.660 --> 00:11:48.350
And so what we want to do is
get the contents of text field

00:11:48.430 --> 00:11:50.120
rate and convert it to a number.

00:11:50.120 --> 00:11:51.340
We need it as a real.

00:11:51.340 --> 00:11:52.580
So let's go ahead and add the next line.

00:11:52.630 --> 00:11:53.960
We do the same thing for the dollars.

00:11:53.960 --> 00:11:57.320
And then very simply, at the end,
we take that calculation,

00:11:57.470 --> 00:12:00.220
the rate times the dollars,
and we put it back into the

00:12:00.220 --> 00:12:02.100
contents of text field amount.

00:12:02.230 --> 00:12:03.840
Let's go ahead and finish that up.

00:12:03.840 --> 00:12:04.650
And that's it.

00:12:04.730 --> 00:12:07.290
So if anybody's actually worked
with a currency converter

00:12:07.290 --> 00:12:10.540
application in the OpenStep days,
this is just a little bit simpler.

00:12:10.540 --> 00:12:11.760
So let's go ahead and build and run.

00:12:11.760 --> 00:12:13.070
Okay.

00:12:16.900 --> 00:12:18.400
And again, it's going through the
whole build process,

00:12:18.490 --> 00:12:19.590
build and link the application.

00:12:19.600 --> 00:12:21.140
Go ahead and type in a value, 1.5.

00:12:21.140 --> 00:12:23.160
Let's try 2,000.

00:12:25.040 --> 00:12:27.240
And he clicks on the,
go ahead and click on the convert button.

00:12:27.240 --> 00:12:29.250
And nothing happened.

00:12:29.250 --> 00:12:31.960
Alright, debugging 101.

00:12:31.960 --> 00:12:33.760
Alright, let's go to quit.

00:12:33.770 --> 00:12:35.770
Now let's see what we do wrong.

00:12:35.810 --> 00:12:37.460
Let's go into,
it's not going to be the problem in here,

00:12:37.470 --> 00:12:38.650
it'll be back in Interface Builder.

00:12:43.870 --> 00:12:44.560
You typed in amounts.

00:12:44.560 --> 00:12:45.420
Okay, go ahead and put it here.

00:12:45.420 --> 00:12:46.940
It was supposed to be about... Okay.

00:12:46.940 --> 00:12:47.330
And run.

00:12:47.340 --> 00:12:49.380
Good catch.

00:12:49.380 --> 00:12:51.280
What I need, QA team right out there.

00:12:51.280 --> 00:12:52.080
Way to go, guys.

00:12:52.080 --> 00:12:53.000
All right.

00:12:53.000 --> 00:12:53.980
There we go.

00:12:54.210 --> 00:12:55.460
3,000.

00:13:00.070 --> 00:13:00.700
All right.

00:13:00.720 --> 00:13:03.040
Now, I guess we could have taken that
time to check the debugging.

00:13:03.040 --> 00:13:04.060
We're going to do it again anyway.

00:13:04.060 --> 00:13:07.340
So we're going to actually show you
how well the debugger is integrated.

00:13:07.340 --> 00:13:08.460
So let's go ahead and
quit the application,

00:13:08.530 --> 00:13:08.760
John.

00:13:08.760 --> 00:13:10.020
Let's go back to the script.

00:13:11.450 --> 00:13:14.440
And let's put a breakpoint just about
where the rate's going to be set.

00:13:14.560 --> 00:13:17.220
This time we're going to
choose Build and Debug.

00:13:19.900 --> 00:13:23.540
And our window comes up,
and go ahead and enter your values.

00:13:23.540 --> 00:13:25.120
And click on the Convert button.

00:13:25.120 --> 00:13:27.240
And this time,
it'll break and stop on our breakpoint,

00:13:27.240 --> 00:13:30.260
just like it would if it were in
Objective-C or any other language.

00:13:30.260 --> 00:13:32.520
And we can actually see we've got
our frames in the one section,

00:13:32.520 --> 00:13:34.540
we've got our variables
in the other part.

00:13:34.540 --> 00:13:35.920
And then, of course,
we can see what current

00:13:35.920 --> 00:13:37.320
line we're executing.

00:13:37.320 --> 00:13:39.960
It shows us the globals for AppleScript.

00:13:39.960 --> 00:13:42.490
Yes, you actually could change
the value of pi right here.

00:13:42.790 --> 00:13:47.410
It shows us the properties of this file.

00:13:47.700 --> 00:13:49.900
And then, of course,
the thing that we're most interested

00:13:49.900 --> 00:13:51.700
in this particular case is the locals.

00:13:51.730 --> 00:13:53.240
Now, right now,
it says-- it's hard to see.

00:13:53.240 --> 00:13:54.360
It's not quite that large.

00:13:54.360 --> 00:13:57.520
But it says,
view ID of window two-- window ID one,

00:13:57.520 --> 00:14:00.660
I'm sorry-- in Jaguar.

00:14:00.790 --> 00:14:03.600
That's for you.

00:14:04.150 --> 00:14:06.250
I actually remembered.

00:14:06.250 --> 00:14:10.220
It's actually going to say button ID too,
so it'll actually show you

00:14:10.220 --> 00:14:11.470
what the type of thing is.

00:14:11.480 --> 00:14:13.060
But let's go ahead and step across that.

00:14:13.140 --> 00:14:15.110
And now it actually,
the rate has been defined,

00:14:15.110 --> 00:14:16.500
so it shows up in the debugger.

00:14:16.500 --> 00:14:17.930
Let's step one more time, the dollars.

00:14:17.930 --> 00:14:22.280
So we can go right into the rates,
double-click on that value,

00:14:22.280 --> 00:14:23.950
and we can change that.

00:14:23.950 --> 00:14:25.660
Let's make it a three.

00:14:25.660 --> 00:14:28.790
Makes it easy to
remember the calculation.

00:14:28.790 --> 00:14:29.350
Okay.

00:14:29.350 --> 00:14:30.460
And we'll hit continue,
and let's go back to the application.

00:14:32.080 --> 00:14:35.160
And you'll see that instead of 3,000,
we got 6,000, so I can actually change

00:14:35.160 --> 00:14:36.030
the variables as we go.

00:14:36.040 --> 00:14:37.140
All right, thank you.

00:14:37.140 --> 00:14:38.640
All right, so that's debugging.

00:14:38.640 --> 00:14:40.940
So it is built right in and
works just like everything else.

00:14:40.940 --> 00:14:44.060
Now, wouldn't it be great instead of
having to kind of think of some

00:14:44.060 --> 00:14:47.320
number as an exchange rate to
actually go out and find the current

00:14:47.620 --> 00:14:49.640
exchange rate for any given country?

00:14:49.640 --> 00:14:52.400
So we're going to actually
take advantage of AppleScript's

00:14:52.540 --> 00:14:54.640
built-in support for XML,
RPC,

00:14:54.640 --> 00:14:56.800
and SOAP and to employ a web service.

00:14:56.800 --> 00:14:58.950
And so let's go back
into Interface Builder.

00:15:00.080 --> 00:15:01.090
Actually, yeah,
let's go find the service,

00:15:01.090 --> 00:15:02.020
and then we'll worry about that.

00:15:02.020 --> 00:15:07.130
XMethods is a great place to go find
some web services that are out there.

00:15:07.140 --> 00:15:09.450
And as John scrolls down,
you can see that there's all kinds

00:15:09.580 --> 00:15:11.100
of different services available.

00:15:11.100 --> 00:15:14.640
You can find out what the
weather in Chicago is.

00:15:14.640 --> 00:15:16.560
There's a Google search API.

00:15:16.560 --> 00:15:21.450
But I do know that at the very
end of this long list is a service

00:15:21.450 --> 00:15:24.810
called Currency Exchange Rate.

00:15:24.820 --> 00:15:27.970
And given two countries,
it will give me the exchange rate

00:15:27.970 --> 00:15:29.690
between that as a live value.

00:15:29.920 --> 00:15:33.600
And if we look at the RPC profile,
it actually shows us all the parameters

00:15:33.600 --> 00:15:37.240
that we're going to need to take
advantage of this web service.

00:15:37.240 --> 00:15:40.150
So we'll shrink that down
so we can reference it.

00:15:43.100 --> 00:15:45.780
And let's go back into
the Interface Builder.

00:15:45.850 --> 00:15:47.230
Go ahead and minimize that window, John,
the other one.

00:15:47.250 --> 00:15:48.450
There you go.

00:15:48.640 --> 00:15:50.760
And let's go into Interface Builder.

00:15:50.820 --> 00:15:51.900
And we need to make our
window a little bigger.

00:15:51.900 --> 00:15:53.710
What we're going to do is we're
going to put a pop-up above there

00:15:53.840 --> 00:15:57.260
and put a few countries in so
that we can choose a country.

00:15:57.310 --> 00:15:58.950
And then we're going
to do our web service,

00:15:58.950 --> 00:16:01.530
and then it'll put the value
back in the exchange rate for us.

00:16:01.560 --> 00:16:02.260
So it drags it up.

00:16:02.260 --> 00:16:03.270
Oh, you hit that right.

00:16:03.390 --> 00:16:03.990
Perfect.

00:16:04.180 --> 00:16:05.240
Didn't even have to change the size.

00:16:05.300 --> 00:16:06.470
Okay, good.

00:16:06.730 --> 00:16:10.390
And let's go ahead and change the value.

00:16:10.390 --> 00:16:10.390
Or you can drag off the field.

00:16:12.100 --> 00:16:12.940
We'll call that country.

00:16:12.940 --> 00:16:17.530
Right-align it.

00:16:20.500 --> 00:16:34.700
[Transcript missing]

00:16:36.030 --> 00:16:37.840
Let's see, another Japan,
that would be fine.

00:16:37.840 --> 00:16:41.140
And just for sanity's sake,
we'll put in USA just to test

00:16:41.140 --> 00:16:43.930
our service to make sure,
because it should be, what, one, right?

00:16:44.100 --> 00:16:45.210
So let's put USA.

00:16:45.220 --> 00:16:48.010
Now,
it would be nice if the service actually

00:16:48.040 --> 00:16:52.660
provided you the ability to go find
out what countries they supported.

00:16:52.660 --> 00:16:54.580
Unfortunately,
this particular service doesn't do that,

00:16:54.580 --> 00:16:55.520
so we'll just pick these.

00:16:55.520 --> 00:16:58.260
So let's sort of resize everything,
make sure everything's where it belongs.

00:16:58.260 --> 00:16:59.250
Actually, it looks pretty good.

00:16:59.280 --> 00:17:00.290
Okay, good.

00:17:00.370 --> 00:17:04.400
Now, the next thing we need to do is when
somebody chooses that pop-up menu,

00:17:04.400 --> 00:17:07.400
we want to have some script execute,
just like we did before.

00:17:07.400 --> 00:17:08.220
So we're going to select that.

00:17:08.350 --> 00:17:10.450
We're going to go ahead and
click on the action handler.

00:17:10.450 --> 00:17:13.290
That's the one that will be called
when we choose something from here.

00:17:13.290 --> 00:17:14.560
And let's go to edit script.

00:17:16.010 --> 00:17:18.430
And then what we're going to
do is go ahead and put in our

00:17:18.430 --> 00:17:20.790
script for using the web service.

00:17:20.970 --> 00:17:23.200
Now the very first thing it does,
go ahead and select the title

00:17:23.200 --> 00:17:25.500
of the object as string.

00:17:25.570 --> 00:17:29.160
And the object, of course,
is the pop-up menu.

00:17:29.510 --> 00:17:32.560
And the title is the
currently chosen item,

00:17:32.610 --> 00:17:33.420
or the text of it.

00:17:33.490 --> 00:17:34.200
So that's what we want.

00:17:34.270 --> 00:17:36.350
We're going to pass it to
a handler called getRate.

00:17:36.510 --> 00:17:38.790
And then once we get that value,
we put it back into the

00:17:38.860 --> 00:17:40.140
text field called rate.

00:17:40.210 --> 00:17:43.030
So let's go down, and we're going to have
to add our getRate.

00:17:43.380 --> 00:17:44.340
And we pass it the country.

00:17:44.340 --> 00:17:48.540
We set up an initial value to
return so it has some known state.

00:17:49.310 --> 00:17:50.490
This is an interesting one.

00:17:50.490 --> 00:17:52.100
Set to country to get plain text.

00:17:52.100 --> 00:17:53.340
I'll explain that in a minute.

00:17:53.340 --> 00:17:54.640
All right, go ahead.

00:17:54.640 --> 00:17:57.040
From country to USA,
because we're always going

00:17:57.040 --> 00:17:58.060
to be converting from USA.

00:17:59.470 --> 00:18:00.810
And now this is where
it gets interesting.

00:18:00.820 --> 00:18:04.340
So just like you talk to an application,
like Tel Application Finder,

00:18:04.340 --> 00:18:07.900
it's just as simple to employ a
web service by Tel Application,

00:18:07.900 --> 00:18:10.580
the endpoint URL is what it wants,
or a URL.

00:18:10.580 --> 00:18:12.720
And if we look in our window
down there in the WSDL,

00:18:12.720 --> 00:18:15.290
we can actually see that it shows
us what the name of that is,

00:18:15.290 --> 00:18:17.000
and that's the value that we have.

00:18:17.110 --> 00:18:18.110
So let's add the next line.

00:18:19.490 --> 00:18:21.900
All right, and this is where the
magic basically happens,

00:18:21.900 --> 00:18:22.590
the call soap.

00:18:22.630 --> 00:18:25.610
This command,
given all the parameters that you see,

00:18:25.620 --> 00:18:27.940
and we'll talk about them in a second,
wraps up all these.

00:18:27.940 --> 00:18:29.230
It's basically an AppleScript record.

00:18:29.230 --> 00:18:31.660
It sends it off to the
Apple Event Manager.

00:18:31.660 --> 00:18:34.680
The command tears it apart into XML,
properly formatted,

00:18:34.750 --> 00:18:37.330
sends it across the wire,
waits for the response,

00:18:37.330 --> 00:18:39.990
it comes back as XML,
and then reconstitutes it back

00:18:40.080 --> 00:18:42.980
into an AppleScript object
that we can understand.

00:18:42.980 --> 00:18:45.880
In this case, let's look at the output
parameter in the WSDL.

00:18:45.880 --> 00:18:47.280
What is that?

00:18:47.280 --> 00:18:47.980
I'm going to lift it up a bit.

00:18:47.980 --> 00:18:49.730
The output parameter in
this case is just a float,

00:18:49.730 --> 00:18:51.640
so what we're going to get
back is a simple number.

00:18:51.640 --> 00:18:53.800
And there's the various
parameters in there,

00:18:53.800 --> 00:18:56.720
but let's go ahead and continue
on with the rest of the line.

00:19:00.970 --> 00:19:02.860
Go ahead and get right.

00:19:02.890 --> 00:19:05.060
Now, I said that there's something
about that get plain text.

00:19:05.060 --> 00:19:10.620
There's a known bug in the call
soap that it actually has to have...

00:19:11.280 --> 00:19:13.770
It has to have the actual text,
so it's just a workaround that

00:19:13.770 --> 00:19:16.270
we have for the moment so you
can get from Unicode text,

00:19:16.270 --> 00:19:18.890
because everything in Studio,
because it uses Cocoa scripting,

00:19:18.990 --> 00:19:20.650
is Unicode text, which is great.

00:19:20.700 --> 00:19:22.620
But unfortunately,
it's just a known workaround.

00:19:22.620 --> 00:19:23.430
We'll have this fixed.

00:19:23.460 --> 00:19:25.810
Go ahead and just go through it, John.

00:19:25.820 --> 00:19:26.670
All right, great.

00:19:26.810 --> 00:19:27.740
Let's build and run this.

00:19:27.750 --> 00:19:28.540
See if it works.

00:19:33.170 --> 00:19:35.300
All right, so there's our-- we'll
go ahead and choose one.

00:19:35.330 --> 00:19:36.020
And there's our value.

00:19:36.020 --> 00:19:38.420
So it went across the wire,
got the value, and plugged it in.

00:19:38.620 --> 00:19:40.020
And we can choose England.

00:19:40.020 --> 00:19:42.860
Let's see what the yen is trading at.

00:19:42.860 --> 00:19:43.250
128.

00:19:43.390 --> 00:19:45.120
It's been about the same
for the last few days.

00:19:45.120 --> 00:19:50.780
And then he can enter his values and do
the calculations and do a conversion.

00:19:50.780 --> 00:19:51.660
All right, great.

00:19:51.660 --> 00:19:52.660
Thank you, John.

00:19:52.750 --> 00:19:57.800
Slides?

00:20:02.870 --> 00:20:04.660
Okay,
so that's how you start from scratch

00:20:04.660 --> 00:20:05.840
and build a Studio application.

00:20:05.840 --> 00:20:07.260
And it really is nothing more than that.

00:20:07.280 --> 00:20:09.990
You just kind of keep iteratively
building your application,

00:20:10.000 --> 00:20:11.670
just keep adding a little
bit of user interface,

00:20:11.670 --> 00:20:12.660
attaching some scripts.

00:20:12.680 --> 00:20:15.240
So what I'd like to do is start
at the other end of the spectrum,

00:20:15.320 --> 00:20:17.220
because when we thought
about this project,

00:20:17.220 --> 00:20:19.450
we actually saw a wide
spectrum of different users,

00:20:19.450 --> 00:20:20.980
people that could use Studio.

00:20:20.980 --> 00:20:23.320
And one of those that we
wanted to actually work

00:20:23.320 --> 00:20:26.370
with are Cocoa applications,
and being able to actually add

00:20:26.500 --> 00:20:28.410
some Studio functionality to that.

00:20:28.580 --> 00:20:31.470
And so there's a great scriptable
application called Sketch,

00:20:31.470 --> 00:20:34.240
and it's fully scriptable,
which makes it even better.

00:20:34.240 --> 00:20:37.190
And these are the things that
you need to do to make it a

00:20:37.190 --> 00:20:39.800
Studio application or Studio-enabled.

00:20:39.800 --> 00:20:42.300
And the first is you have to add
the AppleScript Kit framework.

00:20:42.300 --> 00:20:43.330
You need to link against that.

00:20:43.440 --> 00:20:44.700
That's what provides
all the functionality.

00:20:44.700 --> 00:20:48.180
And then you need to add a build phase,
or an AppleScript build phase,

00:20:48.230 --> 00:20:51.580
so that Project Builder knows
how to compile that AppleScript.

00:20:51.580 --> 00:20:53.720
And then what we're going to do is,
once we've done that,

00:20:53.720 --> 00:20:55.310
is we're going to add
a change color panel,

00:20:55.310 --> 00:20:57.910
so that we'll add a menu item,
be able to choose that item.

00:20:58.300 --> 00:21:00.700
And it'll bring a sheet,
and put it right in our document window,

00:21:00.700 --> 00:21:02.490
and we'll be able to
do something with that.

00:21:02.630 --> 00:21:05.420
So let's go back to the demo,
or to the demo one, please.

00:21:09.000 --> 00:21:10.500
Alright, so let's open up Sketch.

00:21:10.500 --> 00:21:12.490
This is the project
you all know and love.

00:21:12.490 --> 00:21:15.090
And what we're going to do is go ahead
and select our external frameworks

00:21:15.200 --> 00:21:16.730
and add our AppleScript kit framework.

00:21:16.730 --> 00:21:21.280
And that's right there in System Library,
Frameworks.

00:21:23.900 --> 00:21:24.940
All right, great.

00:21:24.980 --> 00:21:27.140
The other thing we need to do is
add an AppleScript build phase.

00:21:27.140 --> 00:21:29.360
And we do that by going
to the target window.

00:21:29.360 --> 00:21:32.900
So these are the things that we do for
you when you choose a studio template.

00:21:32.900 --> 00:21:36.180
They're all set up this way,
but we need to add it here in this case.

00:21:36.190 --> 00:21:38.080
And he just simply goes
and adds that build phase.

00:21:38.080 --> 00:21:39.640
So now that whenever
we add an AppleScript,

00:21:39.640 --> 00:21:42.380
it'll end up in this build
phase and build appropriately.

00:21:42.380 --> 00:21:43.940
All right, so I guess the other
thing we need to do now,

00:21:43.940 --> 00:21:46.260
let's go ahead and start editing,
and we'll add our menu item.

00:21:46.260 --> 00:21:49.080
So our main menu is really draw2.nib.

00:21:49.080 --> 00:21:51.990
We're going to add a
menu item somewhere here.

00:21:52.310 --> 00:21:54.840
And you can just simply drag it out.

00:21:54.840 --> 00:21:58.520
And let's go ahead and
add a little spacer there.

00:21:58.570 --> 00:22:00.680
Change that to change color.

00:22:04.920 --> 00:22:06.460
Now, so we've got our menu item there.

00:22:06.460 --> 00:22:08.190
Now what we need to do is
actually attach a script to that.

00:22:08.260 --> 00:22:10.260
And there's a menu
category of event handlers.

00:22:10.260 --> 00:22:12.000
We're going to choose
the Choose Menu item.

00:22:12.000 --> 00:22:14.670
And now you can see that there aren't
any scripts in the project yet.

00:22:14.670 --> 00:22:16.740
So we can go ahead and click
on New Script right here.

00:22:16.740 --> 00:22:18.500
And we're going to call it Change Color.

00:22:20.630 --> 00:22:22.990
Notice no extensions,
or at least there anyway.

00:22:23.000 --> 00:22:23.880
Okay.

00:22:23.880 --> 00:22:27.160
And now the next thing we need to do,
that's our menu item.

00:22:27.160 --> 00:22:28.340
We've got something wired to it.

00:22:28.410 --> 00:22:30.420
The other thing we want to
do is actually add our panel.

00:22:30.420 --> 00:22:32.790
And for the sake of time,
we've got one that's pretty much built.

00:22:32.860 --> 00:22:34.170
We'll just add it to our project.

00:22:37.400 --> 00:23:28.400
[Transcript missing]

00:23:28.870 --> 00:23:30.640
So I checked to see if that flag is true.

00:23:30.640 --> 00:23:33.920
And if it's not loaded yet,
we're going to go ahead and load it.

00:23:33.940 --> 00:23:36.840
And then we just set the flag
so this only happens once.

00:23:36.860 --> 00:23:38.880
And now we want to get the
window that we created.

00:23:38.880 --> 00:23:41.540
And we gave it a name
called Change Color.

00:23:41.560 --> 00:23:44.280
And then we're going to get
the front document window.

00:23:47.300 --> 00:23:48.980
Keep going.

00:23:49.230 --> 00:23:52.500
And then we're going to display the
panel attached to the document window.

00:23:52.500 --> 00:23:55.140
Now it's the attached to
portion that actually is going

00:23:55.160 --> 00:23:56.130
to present it as a sheet.

00:23:56.270 --> 00:23:59.080
If I said display the panel,
it would just put it up

00:23:59.150 --> 00:24:00.650
as a panel or as a dialog.

00:24:00.730 --> 00:24:02.540
And this way it's going
to come out as a sheet.

00:24:02.700 --> 00:24:05.310
So let's go down and fill
out the click handler.

00:24:05.690 --> 00:24:07.520
Now what this one is,
is this hand gets called if

00:24:07.570 --> 00:24:09.980
you click the Change Color or
the Cancel button in the sheet.

00:24:09.980 --> 00:24:11.760
In this case,
we want to see which one was clicked.

00:24:11.760 --> 00:24:14.100
We want to know if the
object was changed color.

00:24:14.130 --> 00:24:16.350
And then again,
we do our Tell Window as a shortcut.

00:24:16.580 --> 00:24:19.580
And we look at the current
color of the color well.

00:24:19.590 --> 00:24:22.540
We see if the checkbox
is on for fill ovals.

00:24:23.020 --> 00:24:23.420
Continue.

00:24:23.420 --> 00:24:26.200
Fill rectangles, and then fill text.

00:24:26.560 --> 00:24:28.400
So we get our various states,
so we know what we have.

00:24:28.430 --> 00:24:31.500
And now since we're talking
to Sketch as an application,

00:24:31.500 --> 00:24:34.220
we couldn't pull its terminology
in because it's not built yet.

00:24:34.220 --> 00:24:35.760
We actually have to use using terms from.

00:24:35.760 --> 00:24:38.780
And this is something we're
looking at how to work with.

00:24:38.840 --> 00:24:40.460
And go ahead and do the using terms.

00:24:40.460 --> 00:24:43.840
And we're going to tell the
document of the document window.

00:24:43.840 --> 00:24:46.420
If the fill ovals is on,
we're going to take advantage of

00:24:46.510 --> 00:24:50.140
AppleScript's really powerful utility,
or feature that you can say every

00:24:50.140 --> 00:24:51.840
color or every of something.

00:24:51.840 --> 00:24:55.740
So in this case, we're going to set the
fill color of every circle.

00:24:55.740 --> 00:24:56.480
And that's a class.

00:24:56.500 --> 00:24:57.620
It's not the selected items.

00:24:57.620 --> 00:24:59.700
It's just going to go find
every circle in my document

00:24:59.700 --> 00:25:00.940
and change it to this color.

00:25:00.940 --> 00:25:02.910
And then we do the same thing
for all of these others,

00:25:02.940 --> 00:25:04.520
the rectangles, the text areas.

00:25:04.520 --> 00:25:08.190
And we just finish up
the rest of the script.

00:25:12.200 --> 00:25:14.100
And then at the very end,
we want to close our panel.

00:25:14.100 --> 00:25:16.080
We've finished with it,
and we want to make sure it's closed.

00:25:16.170 --> 00:25:18.340
Now the last thing we need to
add is our other handler for

00:25:18.340 --> 00:25:20.100
Get Front Document Window.

00:25:20.100 --> 00:25:22.100
And then simply given the front
document window gets the title

00:25:22.100 --> 00:25:24.100
and finds that we're going to
have better support for documents,

00:25:24.100 --> 00:25:26.090
and we'll talk about that later.

00:25:26.150 --> 00:25:28.100
So let's do--the one thing we
forgot to do is that he'll notice

00:25:28.100 --> 00:25:30.100
he's clicking on the Check Syntax.

00:25:30.100 --> 00:25:32.100
And when he does that,
it's just like it is in Script Editor.

00:25:32.100 --> 00:25:35.960
It does a compile and then gives
us-- makes sure everything's correct.

00:25:36.100 --> 00:25:37.120
So let's go ahead and build and run that.

00:25:39.490 --> 00:25:41.320
Now you might ask,
why would I want to do this?

00:25:41.320 --> 00:25:43.000
Why would I, you know,
I've already got this Cocoa app,

00:25:43.000 --> 00:25:43.810
why would I want to do it?

00:25:43.890 --> 00:25:45.380
Well, there's a lot of different reasons.

00:25:45.490 --> 00:25:47.300
One of them I can think of
is maybe for prototyping.

00:25:47.300 --> 00:25:49.040
You've got some new feature
that you want to build,

00:25:49.040 --> 00:25:52.100
and you're not sure you want to
invest a whole lot of time in order

00:25:52.210 --> 00:25:54.390
to add this feature just to see
if it's going to work out well.

00:25:54.400 --> 00:25:56.040
Well, it's a great way to prototype it.

00:25:56.040 --> 00:25:58.850
You can put it together very easily,
just a little bit of script.

00:25:58.890 --> 00:26:02.140
But I think that actually you'll find
that once you start this process,

00:26:02.140 --> 00:26:05.160
you might find that it's just as good,
there's no reason to actually

00:26:05.240 --> 00:26:07.860
switch it over to Objective-C or
whatever your native language is.

00:26:07.860 --> 00:26:09.710
But the application is up
because it's a much faster

00:26:09.760 --> 00:26:11.060
machine than what we tested on.

00:26:11.250 --> 00:26:14.730
And you can see that we are going to
add some various graphic objects here.

00:26:14.740 --> 00:26:17.520
And he's going to type in some text.

00:26:17.520 --> 00:26:24.000
And if this demo works correctly,
he'll choose a change color.

00:26:30.160 --> 00:26:30.720
Two for two.

00:26:30.720 --> 00:26:31.760
All right, let's quit.

00:26:31.860 --> 00:26:32.740
Go ahead and quit the application.

00:26:32.740 --> 00:26:35.100
I know I was tempting, Faye.

00:26:35.100 --> 00:26:36.960
All my rest of my demos
worked fine all week,

00:26:36.960 --> 00:26:37.280
so.

00:26:37.280 --> 00:26:40.320
No, no, not here, the menu item.

00:26:40.320 --> 00:26:41.480
Oh.

00:26:44.300 --> 00:27:01.300
[Transcript missing]

00:27:03.870 --> 00:27:08.000
I was too busy blathering to notice,
so... All right, there we go.

00:27:08.050 --> 00:27:09.710
So we got our sheet
just dropped right down,

00:27:09.710 --> 00:27:11.530
and we're going to choose,
let's just change rectangles,

00:27:11.530 --> 00:27:12.540
and it applies that color.

00:27:12.540 --> 00:27:18.750
Let's choose it again, and this time,
let's click on the color well,

00:27:18.780 --> 00:27:22.490
and we'll change it to some other color.

00:27:22.490 --> 00:27:26.420
And go ahead and click
on the change color.

00:27:26.420 --> 00:27:27.540
So you can see it's just applying
it just to those classes.

00:27:27.540 --> 00:27:27.540
Thank you, John.

00:27:30.720 --> 00:27:31.890
All right, slides please.

00:27:31.900 --> 00:27:37.680
Okay, so we talked about how you actually
start with a Cocoa application and

00:27:37.860 --> 00:27:39.610
add some Studio functionality to it.

00:27:39.740 --> 00:27:42.700
Nope, turn this the right direction.

00:27:42.700 --> 00:27:43.790
There we go.

00:27:46.400 --> 00:27:48.500
Now the next thing I'd like to talk
about is how you can actually take

00:27:48.500 --> 00:27:50.960
advantage of all the other programming
languages that are available.

00:27:50.960 --> 00:27:54.600
And you can,
from your AppleScript in Studio,

00:27:54.600 --> 00:27:58.080
I need to qualify this because it doesn't
work from scripts outside of Studio,

00:27:58.080 --> 00:28:02.450
you can actually call any of these
languages that you see listed here.

00:28:02.460 --> 00:28:04.940
And the key to it is
the call method command.

00:28:04.940 --> 00:28:07.760
This call method,
you can jump into Objective-C code,

00:28:07.760 --> 00:28:10.310
and then the Objective-C code can
let you get to these other ones.

00:28:10.390 --> 00:28:13.540
And then it also will let you call
into not only code that you add,

00:28:13.570 --> 00:28:17.210
but it can also call code that you have,
that Foundation has

00:28:17.320 --> 00:28:18.920
already provided for you.

00:28:18.920 --> 00:28:20.370
And we're going to give
you some examples of those.

00:28:20.380 --> 00:28:23.280
And so I just want to talk for
just a moment about the various,

00:28:23.280 --> 00:28:24.660
the call method itself.

00:28:24.660 --> 00:28:27.590
And you'll see that the first,
there's really two variants of it.

00:28:27.680 --> 00:28:29.590
There's really one command,
but it has a couple different

00:28:29.680 --> 00:28:30.500
optional parameters.

00:28:30.500 --> 00:28:32.690
And the first one is of object.

00:28:32.700 --> 00:28:34.680
So you say call method, method name.

00:28:34.680 --> 00:28:37.320
Method name is the Objective-C method
that you want to call.

00:28:37.320 --> 00:28:40.200
And if you pass it an object,
it will actually call.

00:28:40.380 --> 00:28:41.740
And you call the method of that object.

00:28:41.740 --> 00:28:44.590
Now if the method happens
to take some parameters,

00:28:44.590 --> 00:28:47.000
there's an additional parameter here.

00:28:47.000 --> 00:28:48.060
And there's two choices.

00:28:48.060 --> 00:28:49.020
You're going to have with parameter.

00:28:49.020 --> 00:28:51.620
So if you're passing one parameter,
you would choose with parameter.

00:28:51.620 --> 00:28:55.020
If you're passing two or more,
you would pass with parameters.

00:28:55.020 --> 00:28:57.580
And you would pass it an
AppleScript list of those parameters.

00:28:57.580 --> 00:28:59.720
The second one is for classes.

00:28:59.720 --> 00:29:02.240
So we can also call class methods by,
say,

00:29:02.240 --> 00:29:04.700
simply passing the class method name.

00:29:04.700 --> 00:29:06.960
And then you pass of class.

00:29:06.960 --> 00:29:09.600
And you pass it the string name of
the class that you want to call.

00:29:09.600 --> 00:29:10.360
And this is really cool.

00:29:10.360 --> 00:29:13.100
And this is really great because you
can easily call Java code doing this,

00:29:13.150 --> 00:29:15.430
calling into static objects
and things of that nature.

00:29:15.440 --> 00:29:18.900
So here's a few examples of
what that might look like.

00:29:18.900 --> 00:29:21.000
So for instance,
if I want to get the title of a button,

00:29:21.000 --> 00:29:23.950
well, the AppleScript way, of course,
would be just title of button.

00:29:24.020 --> 00:29:26.760
But so for this example,
I can call title,

00:29:26.960 --> 00:29:30.510
the method called title,
because that's actually the

00:29:30.750 --> 00:29:35.380
Objective-C method on NS control,
I believe, of object button one.

00:29:35.460 --> 00:29:38.100
The second one then, of course,
is a little more complicated.

00:29:38.150 --> 00:29:39.560
It actually takes one parameter.

00:29:39.560 --> 00:29:40.380
So this is going to be seven.

00:29:40.380 --> 00:29:42.500
So I'm just cutting the
title of the button,

00:29:42.500 --> 00:29:44.490
passing it one parameter of testing.

00:29:44.570 --> 00:29:47.340
And then the third one is
going to just two parameters.

00:29:47.340 --> 00:29:49.150
Of course,
you can do that by counting the

00:29:49.330 --> 00:29:51.060
number of colons in that method name.

00:29:51.060 --> 00:29:53.320
In this case,
we are going to pass it two parameters.

00:29:53.320 --> 00:29:55.070
And we pass it an AppleScript list.

00:29:55.140 --> 00:29:58.640
And here's some examples of class method.

00:29:58.640 --> 00:29:59.750
And I'll go through these quickly.

00:29:59.830 --> 00:30:02.600
So if I wanted to get a hold of the
class method called string of NSString,

00:30:02.690 --> 00:30:03.720
I simply do it this way.

00:30:03.820 --> 00:30:06.080
And this is a little
more complicated version.

00:30:06.140 --> 00:30:08.040
And this one's actually kind of cool.

00:30:08.100 --> 00:30:10.320
It exposes dictionaries to AppleScript.

00:30:10.320 --> 00:30:10.820
It's called AppleScript Studio.

00:30:10.820 --> 00:30:13.890
You can actually return
a dictionary object,

00:30:14.140 --> 00:30:16.630
good old NSDictionary,
and then you can start playing

00:30:16.630 --> 00:30:17.820
with it to your heart's desire.

00:30:17.820 --> 00:30:20.660
You can set keys, get keys,
get the values, all that fun stuff.

00:30:20.740 --> 00:30:22.170
All right.

00:30:22.250 --> 00:30:24.050
And so we'd like to demonstrate
a little bit of this for you.

00:30:24.160 --> 00:30:25.040
So we'll go back to M1.

00:30:25.040 --> 00:30:26.290
M1.

00:30:28.470 --> 00:30:32.620
Okay, this demo isn't all that flashy,
but it sort of illustrates a few points.

00:30:32.620 --> 00:30:33.610
We're going to go ahead and open it up.

00:30:36.540 --> 00:30:38.660
Let's sort it.

00:30:38.660 --> 00:30:38.890
Yep.

00:30:38.890 --> 00:30:40.340
And we're going to
build and run it first.

00:30:40.340 --> 00:30:41.840
Actually, let's select some code, John.

00:30:41.840 --> 00:30:46.500
What it does is just a simple application
that lets us paste in some text,

00:30:46.500 --> 00:30:50.240
and then it's going to sort it using
a few different means to do so.

00:30:50.240 --> 00:30:52.690
Because one of the advantages
to calling another language

00:30:52.760 --> 00:30:53.920
is for performance reasons.

00:30:54.060 --> 00:30:57.490
So we'll go ahead and copy that,
and we'll build and run it.

00:30:58.720 --> 00:31:03.090
And he simply pastes in this text,
and making lists just makes it

00:31:03.130 --> 00:31:05.920
very simply a list of items,
but you can see that it's not sorted.

00:31:05.920 --> 00:31:09.580
And so we want to make sure
our run screen is here.

00:31:09.580 --> 00:31:14.090
And let's go in and go ahead,
and we're going to click on Slow Sort.

00:31:14.140 --> 00:31:16.590
Now this is using
AppleScript to do the sort.

00:31:16.730 --> 00:31:18.550
And you'll notice that the other
one has AppleScript as well,

00:31:18.550 --> 00:31:20.380
so I don't want you to think
that AppleScript is slow.

00:31:20.380 --> 00:31:22.220
But what it is,
it's really a bad algorithm.

00:31:22.270 --> 00:31:23.380
It's just a simple bubble sort.

00:31:23.380 --> 00:31:24.830
So we're going to go
ahead and click on that.

00:31:25.480 --> 00:31:28.880
And if I can see the monitor down here,
it's sorting about 226 items.

00:31:28.880 --> 00:31:33.390
And it took about, how long,
we've got 39, 40, almost 8 seconds,

00:31:33.460 --> 00:31:35.300
7 seconds, something about that.

00:31:35.350 --> 00:31:37.750
So not all that terribly
fast for just 262 items.

00:31:37.810 --> 00:31:40.140
So let's go back in and
select some more text.

00:31:40.140 --> 00:31:41.750
Let's go grab the entire script.

00:31:44.370 --> 00:31:46.460
And we're going to go back in,
we're going to paste that in.

00:31:46.500 --> 00:31:48.490
And this time,
we're going to use a much more

00:31:48.520 --> 00:31:51.910
efficient-- matter of fact,
let's paste it twice.

00:31:53.600 --> 00:31:55.190
Because it's a lot of script.

00:31:55.230 --> 00:31:56.430
We're going to go ahead and execute this.

00:31:56.460 --> 00:31:58.020
And you'll notice,
go ahead and bring up our run

00:31:58.020 --> 00:31:59.240
window first so we can see it.

00:31:59.300 --> 00:32:00.590
Oh, no, don't click it yet.

00:32:00.590 --> 00:32:01.230
There you go.

00:32:01.270 --> 00:32:01.300
There you go.

00:32:01.300 --> 00:32:03.260
So it actually does it for you.

00:32:03.260 --> 00:32:04.860
But go ahead if you like.

00:32:04.860 --> 00:32:05.870
Make it a list.

00:32:05.870 --> 00:32:07.470
It'll do the same thing.

00:32:07.470 --> 00:32:09.300
Go ahead and fast sort it.

00:32:11.550 --> 00:32:14.490
This one took about two seconds,
so that's quite a, you know,

00:32:14.490 --> 00:32:16.060
just in a bit of an algorithm.

00:32:16.060 --> 00:32:18.870
So let's actually take a look at
the script that's behind this.

00:32:18.880 --> 00:32:21.960
And let's go down and look at SlowSort.

00:32:21.980 --> 00:32:25.580
And let's scroll up just a bit so we
can see all of the handler for this.

00:32:25.660 --> 00:32:29.920
It's just a simple, very, in essence,
brain-dead sort algorithm.

00:32:29.920 --> 00:32:33.130
But let's take a look at the FastSort,
when we click that FastSort button.

00:32:33.140 --> 00:32:37.980
And it's calling some script that
I found out on the web called QuickSort.

00:32:38.000 --> 00:32:40.670
Now everything he's going to show
you from this point on down is

00:32:40.740 --> 00:32:44.380
all the script that's necessary
to execute this QuickSort.

00:32:44.400 --> 00:32:50.620
And it keeps going, and it keeps going,
and it keeps going, and it keeps going.

00:32:50.620 --> 00:32:52.920
I was actually extremely
pleasantly surprised,

00:32:52.920 --> 00:32:55.920
for as much script as there was,
how fast it actually executed

00:32:55.980 --> 00:32:57.520
compared to the slower version.

00:32:57.520 --> 00:33:00.560
But we can do a lot better in this case.

00:33:00.560 --> 00:33:03.300
And we can add some
Objective-C code to our application.

00:33:03.300 --> 00:33:04.070
So let's quit the app.

00:33:04.150 --> 00:33:05.770
Let's go into Interface Builder.

00:33:09.760 --> 00:33:11.900
And what we're going to do is we're
going to add a button to our UI.

00:33:11.900 --> 00:33:14.940
And let's go ahead and
duplicate that one there.

00:33:14.940 --> 00:33:16.090
Okay.

00:33:17.240 --> 00:33:18.120
Duplicate that one.

00:33:18.250 --> 00:33:19.200
There you go.

00:33:19.210 --> 00:33:19.640
Okay, good.

00:33:20.140 --> 00:33:22.570
And we're going to
call this Fastest Sort.

00:33:26.580 --> 00:33:29.600
So I'll change the title,
make sure it says Objective-C.

00:33:29.620 --> 00:33:31.670
Want to give proper credit.

00:33:35.840 --> 00:33:38.350
And then we're going to name that
button in our AppleScript panel.

00:33:38.400 --> 00:33:45.200
And we're going to call this FastAssort.

00:33:47.650 --> 00:33:49.240
Okay, and click on the click handler.

00:33:49.240 --> 00:33:50.860
And this time,
we're going to make sure we click

00:33:50.950 --> 00:33:52.430
on the AppleScript and attach it.

00:33:52.500 --> 00:33:54.350
All right,
let's go ahead and edit script.

00:33:56.510 --> 00:33:58.880
Okay, and then we're going to add
ourself a new little handler.

00:33:58.880 --> 00:34:01.340
In the middle of the clicked handler,
there's a little test here to

00:34:01.340 --> 00:34:03.760
see which button was clicked,
and then we call the appropriate sort,

00:34:03.840 --> 00:34:06.130
because from that point on,
the rest of the code is the same.

00:34:06.140 --> 00:34:09.050
So we're just going to simply check
to see if it's the fastest sort,

00:34:09.050 --> 00:34:10.720
and we're going to add a new handler.

00:34:10.790 --> 00:34:12.780
Let's add that down below our fast sort.

00:34:18.500 --> 00:34:19.890
And that's our AppleScript.

00:34:19.910 --> 00:34:22.160
Simply one line of call method.

00:34:22.160 --> 00:34:23.710
Sort array with parameter.

00:34:23.740 --> 00:34:26.670
Now you'll notice in this case,
and I didn't talk about this,

00:34:26.810 --> 00:34:30.030
is that there isn't an
of object or of class.

00:34:30.040 --> 00:34:33.030
And what happens is if you don't
provide an object or class,

00:34:33.030 --> 00:34:35.270
it looks first to the application object.

00:34:35.340 --> 00:34:37.430
And it says, okay,
do you have a delegate?

00:34:37.480 --> 00:34:38.170
Okay, yes.

00:34:38.180 --> 00:34:40.100
If you have a delegate,
do you handle this method?

00:34:40.290 --> 00:34:40.580
Yes.

00:34:40.580 --> 00:34:42.730
Then it will call that
method of that delegate.

00:34:42.900 --> 00:34:45.120
Now if you don't have a
delegate or you can't handle it,

00:34:45.170 --> 00:34:48.570
then we'll just simply pass it as
a method to the application itself.

00:34:48.580 --> 00:34:51.120
And so that's sometimes the
easiest way for us to add this.

00:34:51.150 --> 00:34:52.060
We're going to add it as a category.

00:34:52.060 --> 00:34:53.920
So we've got a couple files
already pre-built here.

00:34:53.920 --> 00:34:54.850
Very little code.

00:34:54.850 --> 00:34:56.220
It's a .h and a .m file.

00:34:56.220 --> 00:34:58.830
We're going to drag it into
our project and add it.

00:34:58.920 --> 00:35:00.800
And let's take a look at the .h file.

00:35:03.080 --> 00:35:06.580
And you can see that it's simply
just a category on NSApplication.

00:35:06.580 --> 00:35:07.660
We just call it sortSupport.

00:35:07.660 --> 00:35:09.100
And it is a simple method.

00:35:09.100 --> 00:35:11.940
It takes an array and returns an array,
an NSArray.

00:35:11.980 --> 00:35:14.000
So let's look at the implementation.

00:35:14.000 --> 00:35:17.440
And all it really does is
set up a result to return.

00:35:17.440 --> 00:35:18.820
Again, it's just a category.

00:35:18.820 --> 00:35:20.400
And then it checks to
see if we have an array,

00:35:20.400 --> 00:35:21.480
make sure we have more than one item.

00:35:21.480 --> 00:35:22.920
Doesn't make sense to sort one item.

00:35:22.920 --> 00:35:25.560
So actually, there's a bug here.

00:35:25.560 --> 00:35:27.060
Anybody see it?

00:35:28.060 --> 00:35:28.780
If there's only one item?

00:35:28.780 --> 00:35:30.500
Nope.

00:35:30.500 --> 00:35:32.320
If there's only one item,
I'm returning nil.

00:35:32.320 --> 00:35:34.510
And I should return the
array that was passed in.

00:35:34.520 --> 00:35:36.150
Good, I found that one.

00:35:36.180 --> 00:35:37.860
All right, so what it does,
it actually calls sorted

00:35:37.860 --> 00:35:38.980
array using selector.

00:35:38.980 --> 00:35:42.600
This is a standard
foundation in NSString class,

00:35:42.600 --> 00:35:46.150
and it takes a selector,
and there's already a compare

00:35:46.150 --> 00:35:47.860
method that we can call.

00:35:47.860 --> 00:35:48.570
And that's it.

00:35:48.660 --> 00:35:50.230
And so let's go ahead
and build and run this.

00:35:54.000 --> 00:35:59.120
And let's go copy-- as soon as it's up,
let's go copy our source again.

00:35:59.120 --> 00:36:00.960
And select all of that.

00:36:00.960 --> 00:36:05.590
And we'll go back into
our test and paste it in.

00:36:05.610 --> 00:36:08.180
And trust me,
it sorts when you click the button.

00:36:08.180 --> 00:36:09.720
That was just as a demonstration.

00:36:09.780 --> 00:36:11.260
But if you like,
go ahead and click Fast Sort.

00:36:11.260 --> 00:36:13.020
We'll test this one more time.

00:36:13.020 --> 00:36:13.760
Should we paste it again?

00:36:13.760 --> 00:36:13.760
Yeah.

00:36:13.760 --> 00:36:15.020
No, just out-disk it twice.

00:36:15.020 --> 00:36:15.590
OK, we want it twice.

00:36:15.660 --> 00:36:18.650
Because we found that this machine's
so fast that we had to add a little

00:36:18.710 --> 00:36:21.260
extra text to make the test interesting.

00:36:22.160 --> 00:36:22.790
It does the same thing.

00:36:22.850 --> 00:36:23.330
Do it one more time.

00:36:23.410 --> 00:36:23.860
Paste it in.

00:36:23.860 --> 00:36:25.350
We'll give it the benefit of the doubt.

00:36:25.350 --> 00:36:26.440
Paste.

00:36:26.850 --> 00:36:27.840
Make list.

00:36:27.840 --> 00:36:29.100
Sort.

00:36:30.670 --> 00:36:32.360
Okay, it's doing, let's see,
how many items?

00:36:32.360 --> 00:36:35.210
1626, and how many seconds?

00:36:35.290 --> 00:36:37.480
About two and a half seconds, it looks.

00:36:37.480 --> 00:36:38.400
Not too bad.

00:36:38.400 --> 00:36:41.160
Now we're going to try the Objective-C,
so let's go ahead and paste it in.

00:36:41.210 --> 00:36:41.890
Twice.

00:36:43.360 --> 00:36:44.860
All right,
and this time we're going to call the,

00:36:44.860 --> 00:36:46.880
go ahead and make a list,
don't believe me,

00:36:46.880 --> 00:36:49.620
and we're going to do the
fastest sort of Objective-C.

00:36:49.620 --> 00:36:52.870
And you can see that it actually
did it in just about .4 seconds,

00:36:52.870 --> 00:36:55.010
so it's quite an improvement in speed.

00:36:55.020 --> 00:36:56.310
All right, thank you.

00:37:02.630 --> 00:37:03.140
Slides, please.

00:37:03.140 --> 00:37:03.690
Thank you.

00:37:03.690 --> 00:37:06.890
Actually, we've got to jump back up.

00:37:06.930 --> 00:37:07.520
Let's go back to demo.

00:37:07.520 --> 00:37:08.390
I forgot one thing.

00:37:10.110 --> 00:37:10.760
1, 2, 4.

00:37:10.760 --> 00:37:12.780
OK.

00:37:12.780 --> 00:37:14.540
So that shows just how to do Objective-C.

00:37:14.540 --> 00:37:16.480
What I would like to show
you is an example that ships

00:37:16.480 --> 00:37:17.720
in AppleScript Studio 1.1.

00:37:17.720 --> 00:37:18.760
It's called multi-language.

00:37:18.760 --> 00:37:21.760
Let's go and open that up and
show you that we can actually call

00:37:21.790 --> 00:37:23.690
all of these various languages.

00:37:25.370 --> 00:37:27.700
Let's open up our resource file.

00:37:27.730 --> 00:37:30.700
And again, as far as UI,
it's not all that sophisticated.

00:37:30.710 --> 00:37:33.540
It has a column of buttons
and a column of text fields.

00:37:33.540 --> 00:37:35.430
And when you click on
each of these buttons,

00:37:35.430 --> 00:37:38.620
it fills out the value
of that language name.

00:37:38.620 --> 00:37:40.900
It gets the name from that
language and puts it in here.

00:37:41.040 --> 00:37:43.520
And so let's look at the
implementation for the AppleScript one.

00:37:43.520 --> 00:37:44.830
So we'll go to the AppleScript.

00:37:44.830 --> 00:37:47.500
Actually, just go to Edit Script.

00:37:49.190 --> 00:37:52.440
Or just open up the
AppleScript folder there.

00:37:52.440 --> 00:37:52.970
Which one?

00:37:53.200 --> 00:37:53.760
AppleScript right there.

00:37:53.780 --> 00:37:54.480
Open the AppleScript.

00:37:54.510 --> 00:37:54.830
There you go.

00:37:54.960 --> 00:37:55.800
And open that one up.

00:37:56.000 --> 00:37:56.740
And here's the implementation.

00:37:56.740 --> 00:37:59.100
When you click on the AppleScript button,
it simply says,

00:37:59.100 --> 00:38:01.700
set contents of text field, AppleScript,
AppleScript.

00:38:01.740 --> 00:38:04.820
Well, one can imagine implementation
that does that for every button,

00:38:04.820 --> 00:38:05.340
right?

00:38:05.360 --> 00:38:06.660
Well, that wouldn't be very useful.

00:38:06.660 --> 00:38:10.420
So we'll actually take a look at each
of these buttons and see what they do.

00:38:10.420 --> 00:38:13.840
So let's open up-- let's start with a C.

00:38:13.880 --> 00:38:15.420
And open that one up.

00:38:15.480 --> 00:38:17.700
And look at the C AppleScript.

00:38:18.070 --> 00:38:21.410
And it simply does a set contents
of text field to a call method,

00:38:21.510 --> 00:38:22.620
name for C language.

00:38:22.620 --> 00:38:25.060
So we're going to look in
our .mm file this time.

00:38:25.060 --> 00:38:28.340
This is actually an Objective-C++
file that we've added to our project.

00:38:28.400 --> 00:38:31.920
And if we go down to the
implementation of that method,

00:38:31.920 --> 00:38:35.870
name for actually the C language,
you'll see that it calls a

00:38:35.870 --> 00:38:39.690
function that we've added in a
C file called getNameForCLanguage.

00:38:39.760 --> 00:38:42.780
A couple other things.

00:38:42.790 --> 00:38:45.000
Let's take a look at this
for the Objective-C object,

00:38:45.100 --> 00:38:45.770
what it does.

00:38:45.790 --> 00:38:47.120
Actually, let's open up the C file.

00:38:48.000 --> 00:38:48.460
C.C.

00:38:48.460 --> 00:38:49.630
C.C.

00:38:49.640 --> 00:38:50.800
There you go.

00:38:50.820 --> 00:38:53.340
And let's look at the
implementation of this.

00:38:53.340 --> 00:38:55.830
You can tell it's actually a
shipping example because it's

00:38:55.830 --> 00:38:57.190
got tons of legal stuff here.

00:38:57.200 --> 00:39:01.520
GetNameForCLanguage returns a simple
character array just with the letter C.

00:39:01.520 --> 00:39:03.340
So let's look at the Objective-C object.

00:39:05.800 --> 00:39:10.000
And let's look at the
implementation first in the .mm.

00:39:10.010 --> 00:39:11.800
Now when you choose
the Objective-C button,

00:39:11.800 --> 00:39:15.410
what it does is it calls the call
method named for Objective-C.

00:39:15.470 --> 00:39:16.780
Now this is obviously repetitive.

00:39:16.780 --> 00:39:17.900
Every one of them does the same thing.

00:39:17.900 --> 00:39:20.180
So let's close that and
look at the .mm file,

00:39:20.180 --> 00:39:21.500
look at the implementation for that.

00:39:21.500 --> 00:39:23.390
Note .mm.

00:39:23.400 --> 00:39:24.870
There you go.

00:39:25.480 --> 00:39:28.340
And let's look at the
Objective-C language one.

00:39:28.340 --> 00:39:29.340
Objective-- there you go.

00:39:29.340 --> 00:39:30.000
OK, good.

00:39:30.030 --> 00:39:33.880
So what it does is it instantiates an
Objective-C object in doing alloc init,

00:39:33.880 --> 00:39:34.900
auto-release.

00:39:34.900 --> 00:39:36.530
We're being a good citizen.

00:39:36.560 --> 00:39:39.090
And then it simply just takes
that object and calls name on it.

00:39:39.100 --> 00:39:40.740
We get the name from the language.

00:39:40.770 --> 00:39:43.680
And the simplification
for it is very simple.

00:39:43.680 --> 00:39:44.250
We can look at it.

00:39:44.270 --> 00:39:45.170
We'll skip it for now.

00:39:45.220 --> 00:39:47.090
Let's look down.

00:39:48.310 --> 00:39:49.970
Let's look at the C++.

00:39:50.090 --> 00:39:55.480
Now, since this is an Objective C++ file,
it can actually compile C++ code right

00:39:55.480 --> 00:39:58.720
inside of our Objective C++ code.

00:39:58.720 --> 00:40:01.150
And right here,
what it's doing is it's constructing

00:40:01.230 --> 00:40:02.880
a C++ language class that I added.

00:40:02.900 --> 00:40:06.600
It then will create an NSString,
because that's the thing we have to

00:40:06.600 --> 00:40:08.870
return from this back to AppleScript.

00:40:08.900 --> 00:40:11.010
And you'll notice that
there's a language.name.

00:40:11.020 --> 00:40:13.840
And so it's simply calling
the method on that language,

00:40:13.840 --> 00:40:16.310
that C++ object,
to get its name and returns it.

00:40:16.840 --> 00:40:18.450
Now, it's the same thing
for the Java language.

00:40:18.460 --> 00:40:20.460
If we're going through the Java bridge,
right below here,

00:40:20.460 --> 00:40:21.780
you'll see name for Java language.

00:40:21.800 --> 00:40:25.150
In this case,
it uses a function that's built into

00:40:25.150 --> 00:40:28.140
Foundation called NSClassFromString.

00:40:28.140 --> 00:40:33.020
And you'll notice that what you do is
you provide it the name of the class.

00:40:33.020 --> 00:40:35.800
And that will give you
the Java language object.

00:40:35.800 --> 00:40:38.080
It actually allocates it
as an Objective C object.

00:40:38.080 --> 00:40:41.440
And then you can use it just like you
did the previous Objective C object.

00:40:42.730 --> 00:40:43.750
Let's actually look at that one.

00:40:43.900 --> 00:40:48.460
Let's open up the Java class
down in the Java folder.

00:40:48.460 --> 00:40:50.290
Over in your project.

00:40:50.360 --> 00:40:51.800
Over here in the project.

00:40:51.800 --> 00:40:53.060
Yeah, there you go.

00:40:54.170 --> 00:40:56.580
And let's look at that.

00:40:56.750 --> 00:40:59.150
Well, we'll look in the .java file.

00:40:59.390 --> 00:41:02.390
Okay, so here we've got a .java
file in our project,

00:41:02.390 --> 00:41:04.100
and it simply just
defines a simple class,

00:41:04.100 --> 00:41:04.760
Java language.

00:41:04.800 --> 00:41:09.300
It has a constructor that just
simply signs the data member

00:41:09.300 --> 00:41:13.440
underscore name to some value,
returns that name,

00:41:13.440 --> 00:41:15.990
and then has these other values in here,
and a pen name to string,

00:41:15.990 --> 00:41:17.120
which we'll show later.

00:41:17.120 --> 00:41:20.240
So you can see that what it does is it
just uses it through the Java bridge.

00:41:20.280 --> 00:41:23.870
Now,
let's look at the java.applescript file.

00:41:28.170 --> 00:41:30.870
And you'll notice what it does,
it tests to see which button we clicked.

00:41:30.930 --> 00:41:34.240
Because if we clicked the
one that's named Java,

00:41:34.240 --> 00:41:35.840
it calls the one that we just called.

00:41:36.080 --> 00:41:38.720
But if I call the direct Java,
what it's really doing is it's

00:41:38.870 --> 00:41:40.120
calling directly into Java.

00:41:40.120 --> 00:41:41.760
It's not going through
the Objective-C bridge or

00:41:41.760 --> 00:41:42.780
through Objective-C code.

00:41:42.780 --> 00:41:43.750
I'm just calling right in.

00:41:43.790 --> 00:41:47.220
I'm instantiating a Java object and
calling the method on that handle.

00:41:47.220 --> 00:41:51.200
And so let's go back into our .mm file.

00:41:52.390 --> 00:41:53.700
And let's look at the last one.

00:41:53.700 --> 00:41:55.760
When you click on all the languages,
this one's kind of fun.

00:41:55.790 --> 00:41:58.840
Because what it does is it creates a
mutable string here at the beginning.

00:41:58.840 --> 00:42:00.390
It creates a C++ object.

00:42:00.470 --> 00:42:02.790
It creates an Objective-C object.

00:42:02.860 --> 00:42:04.510
It creates a Java object.

00:42:04.550 --> 00:42:07.630
And then starting at the very far right,
get name for C language,

00:42:07.630 --> 00:42:10.020
it keeps passing back
the result in an append.

00:42:10.020 --> 00:42:16.290
And so I call every single language,
and then I pass that string back.

00:42:16.290 --> 00:42:16.290
So let's build and run this.

00:42:21.490 --> 00:42:22.400
Okay, we'll click on AppleScript.

00:42:22.400 --> 00:42:24.490
It's very obvious what it's going to do
at this point if everything's working.

00:42:24.490 --> 00:42:25.600
Objective C, C.

00:42:25.600 --> 00:42:27.700
So that right there just
called our C function.

00:42:27.700 --> 00:42:30.720
The C++ instantiated a C++ object,
returned the string.

00:42:30.720 --> 00:42:33.780
Java went to the Java bridge,
direct Java went directly to Java.

00:42:33.860 --> 00:42:36.810
And the use all, the piece de resistance
is to call all of them,

00:42:36.810 --> 00:42:37.840
and there you go.

00:42:37.850 --> 00:42:43.600
So it's just that easy to add multiple
languages and take advantage of your

00:42:43.600 --> 00:42:47.700
legacy code and all these other things
that you can bring into your project.

00:42:47.700 --> 00:42:47.700
Thank you, John.

00:42:55.700 --> 00:42:57.210
Alright,
let's talk a little bit about what

00:42:57.210 --> 00:42:58.450
you're going to find in Jaguar.

00:42:58.450 --> 00:43:01.090
Get it right.

00:43:01.140 --> 00:43:01.940
Get it right.

00:43:02.040 --> 00:43:03.830
I'm not supposed to say Jagwire.

00:43:03.830 --> 00:43:04.700
I learned it.

00:43:04.760 --> 00:43:07.800
We're going to actually,
you'll notice that in

00:43:07.800 --> 00:43:13.300
the Studio version 1.0,
1.1, there's a document-based template.

00:43:13.300 --> 00:43:15.150
Unfortunately,
it doesn't work all that well.

00:43:15.160 --> 00:43:18.020
And so we're going to vastly
improve and make it very,

00:43:18.020 --> 00:43:20.950
very easy to create
document-based applications.

00:43:21.140 --> 00:43:23.460
So we should be able to
create a text-edit app,

00:43:23.580 --> 00:43:27.200
I think, in maybe two lines of code,
as far as actual script you write.

00:43:27.260 --> 00:43:29.000
It will be very, very simple.

00:43:29.000 --> 00:43:31.050
You'll just be asked at
the appropriate time,

00:43:31.050 --> 00:43:33.200
what is the data you want
saved in your document?

00:43:33.200 --> 00:43:35.940
You just simply return the type
of thing you want to store,

00:43:35.940 --> 00:43:39.390
whether it be a string, a list,
or a list of records, or any complex

00:43:39.400 --> 00:43:41.530
AppleScript object that you want.

00:43:41.600 --> 00:43:45.250
And then when you load the document,
you'll get called as an event handler,

00:43:45.250 --> 00:43:48.040
and you'll be provided with
that data that you gave.

00:43:48.040 --> 00:43:50.660
So just two handlers you'll
add to your document object.

00:43:51.120 --> 00:43:51.760
And away you go.

00:43:51.760 --> 00:43:56.440
Now, if that doesn't fill your needs,
there'll be two other alternative methods

00:43:56.840 --> 00:43:59.290
called read from file and write to file.

00:43:59.300 --> 00:44:01.020
So you can actually get
called at the point that that

00:44:01.020 --> 00:44:02.210
process would normally happen.

00:44:02.220 --> 00:44:04.040
You don't have to worry
about any of the UI.

00:44:04.040 --> 00:44:06.690
You'll set up all of your document types.

00:44:06.710 --> 00:44:07.780
That's all set up in the project.

00:44:07.780 --> 00:44:10.100
You don't have to worry about it being,
you can set the document

00:44:10.210 --> 00:44:11.870
whether it's dirty or not,
but most of the time

00:44:11.940 --> 00:44:12.970
it's handled for you.

00:44:12.980 --> 00:44:15.240
It'll prompt for all the
right save dialogues.

00:44:15.260 --> 00:44:16.970
That's all built in and supported.

00:44:16.980 --> 00:44:20.780
Next thing that we really have heard
once in a while on the list is DragonFly.

00:44:21.110 --> 00:44:24.430
And that's the fact that we're going to
be using DragonDrop because today all

00:44:24.430 --> 00:44:28.100
you can do is drag some file objects
to your application like a droplet.

00:44:28.100 --> 00:44:31.210
It would be great if we,
these are of course not any

00:44:31.210 --> 00:44:34.100
hard set in stone promises,
but we are going to provide

00:44:34.100 --> 00:44:37.300
some DragonDrop support,
as many objects as we possibly can.

00:44:37.300 --> 00:44:40.710
So you can drag into text fields or
other views or objects and receive

00:44:40.750 --> 00:44:44.400
notification and get the data from that
drag and then do something with that.

00:44:44.400 --> 00:44:47.070
And in order to do that,
we also have to support the pasteboard

00:44:47.070 --> 00:44:50.700
because that's what's stored in the
drag information when you drag on that.

00:44:51.020 --> 00:44:53.100
One of my favorite ones,
and the thing I'm hoping to

00:44:53.100 --> 00:44:54.990
get to spend some time on,
or that we're going

00:44:54.990 --> 00:44:57.110
to spend some time on,
is the data source improvements.

00:44:57.140 --> 00:45:02.070
And those of you that have used
Studio found that the table adding

00:45:02.170 --> 00:45:05.330
data to a data source that gets
populated in a table isn't as

00:45:05.350 --> 00:45:06.900
fast as it possibly could be.

00:45:06.900 --> 00:45:10.380
And we've put out some support code,
some Objective-C code,

00:45:10.380 --> 00:45:12.130
to make that much faster.

00:45:12.140 --> 00:45:14.300
So for instance, hopefully,
we'll build it right into

00:45:14.300 --> 00:45:16.790
AppleScript so you don't have
to call any Objective-C code.

00:45:16.800 --> 00:45:19.950
So you can do something like
take a list of records and simply

00:45:20.020 --> 00:45:21.400
add it to your data source.

00:45:21.400 --> 00:45:24.130
With one line of code,
it'll quickly populate your data source,

00:45:24.240 --> 00:45:24.940
and away you go.

00:45:27.320 --> 00:45:30.100
Now things that are a little further
out ahead that we're looking at is

00:45:30.350 --> 00:45:31.820
talking about a script property.

00:45:31.820 --> 00:45:35.770
We want to be able to have you at
runtime actually get the script

00:45:36.090 --> 00:45:39.180
of the UI object or set the
script so that you can dynamically

00:45:39.180 --> 00:45:40.420
change these things on the fly.

00:45:40.420 --> 00:45:43.700
It solves a lot of problems for us and
something we're very excited about.

00:45:43.700 --> 00:45:46.840
Now that's sort of all the runtime
things that we want to work on.

00:45:46.840 --> 00:45:48.580
There are also development side things.

00:45:48.670 --> 00:45:51.380
We want to vastly improve
the dictionary viewer.

00:45:51.890 --> 00:45:55.570
It would be great if you could,
for instance,

00:45:55.570 --> 00:45:59.350
select some term in your script
and have it go look it up in the

00:45:59.350 --> 00:46:00.800
dictionary viewer for you or help.

00:46:00.930 --> 00:46:02.090
There's a lot of things
we want to do there.

00:46:02.100 --> 00:46:05.010
An object hierarchy viewer right
in your applications so you can

00:46:05.010 --> 00:46:07.980
see all of your objects and see
the attributes of that object.

00:46:07.980 --> 00:46:10.610
We're also really,
really excited about web services

00:46:10.680 --> 00:46:13.180
and what that means for us and what
we can do so that you can create

00:46:13.180 --> 00:46:14.610
some really compelling applications.

00:46:14.640 --> 00:46:16.850
And so we're going to be
working on better ways.

00:46:16.880 --> 00:46:19.450
A lot of what we're going to
leverage off of the work that's

00:46:19.580 --> 00:46:21.180
being done at the web services.

00:46:21.540 --> 00:46:22.720
Client framework level.

00:46:22.720 --> 00:46:26.030
We're going to build off of that
and add better things on top of it.

00:46:26.080 --> 00:46:31.820
And the last one which is sort of
really out there is other OSA languages.

00:46:31.820 --> 00:46:35.760
There are people that actually want
to build Apple Script Studio apps

00:46:35.760 --> 00:46:36.960
in Python or Perl.

00:46:37.040 --> 00:46:39.700
And as long as they can
provide an OSA component,

00:46:39.700 --> 00:46:42.960
it's something that's within
the realm of possibility.

00:46:42.960 --> 00:46:45.580
And so we'll look at trying
to do those type of things.

00:46:45.580 --> 00:46:50.620
At the moment, with Studio 1.1 that
just shipped last week,

00:46:50.690 --> 00:46:51.520
it's in your development.

00:46:51.520 --> 00:46:53.160
It's in the developer CD.

00:46:53.160 --> 00:46:55.040
It's in the release notes.

00:46:55.060 --> 00:46:57.690
There's actually a defaults
write that disables the auto

00:46:57.750 --> 00:47:01.160
generation of the Apple Script when
you're in an interface builder.

00:47:01.160 --> 00:47:04.480
I had somebody send me an email saying,
"Well, I wrote this Python thing,

00:47:04.480 --> 00:47:06.430
but the problem is every
time I went into IB,

00:47:06.430 --> 00:47:09.640
it generated Apple Script in my
Python file." So at least we sort

00:47:09.690 --> 00:47:13.150
of got out of his way so he could
do whatever else he'd like to do.

00:47:13.800 --> 00:49:06.700
[Transcript missing]

00:49:06.830 --> 00:49:07.660
And this is the roadmap.

00:49:07.660 --> 00:49:10.700
Of course, we had our AppleScript update
this session this morning.

00:49:10.700 --> 00:49:13.150
I actually learned a few things myself,
which is great.

00:49:13.210 --> 00:49:14.540
I'm very excited about SDEFs.

00:49:14.920 --> 00:49:18.470
AppleScriptKit is going to take
very quick advantage of SDEFs,

00:49:18.490 --> 00:49:23.520
so that I only have to write in one file
and not 18 pairs of all these suites.

00:49:23.520 --> 00:49:25.080
It's going to be a great thing.

00:49:25.080 --> 00:49:27.720
We have our feedback
forum tomorrow at 3.30.

00:49:27.720 --> 00:49:29.540
I look forward to having you there.

00:49:29.540 --> 00:49:32.120
The Cocoa scripting,
which I highly recommend,

00:49:32.120 --> 00:49:35.510
because we leverage everything
off of foundation scripting.

00:49:35.900 --> 00:49:40.040
If you're interested in the
Objective-C or Java side,

00:49:40.040 --> 00:49:41.700
go to that session.

00:49:41.700 --> 00:49:44.630
If you're new to Project Builder,
make sure you check out

00:49:44.660 --> 00:49:46.120
the Project Builder ID.

00:49:47.880 --> 00:49:51.450
And this is who you can contact,
Jason Yeo and myself.

00:49:51.470 --> 00:49:52.840
Feel free to send me an email.

00:49:52.840 --> 00:49:55.120
And then my manager, Chris Espinosa.

00:49:55.140 --> 00:49:57.620
And with that,
there's also one other thing,

00:49:57.660 --> 00:50:02.160
if you want to get some more information,
check out the Studio website.

00:50:02.160 --> 00:50:04.380
This website is going
to grow in the future.

00:50:04.380 --> 00:50:07.700
It's hopefully the place we're going
to be using as a repository for great

00:50:07.700 --> 00:50:09.440
examples of Studio applications.

00:50:09.470 --> 00:50:13.750
And the one I recommend most is to get
on the AppleScript Studio mailing list.

00:50:13.910 --> 00:50:16.080
We monitor it as much as possible.

00:50:16.080 --> 00:50:17.460
We answer as many as we can.

00:50:17.810 --> 00:50:18.720
It's a great resource.

00:50:18.730 --> 00:50:20.910
There's starting to be a
community that's developing that

00:50:21.020 --> 00:50:23.100
are starting to help each other,
which is wonderful.

00:50:23.100 --> 00:50:25.590
And then there's also the
documentation can be found.

00:50:25.820 --> 00:50:26.850
The slide is incorrect.

00:50:26.850 --> 00:50:29.920
It should be uppercase D,
uppercase E at AppleScript Studio.