WEBVTT

00:00:00.920 --> 00:00:04.480
Ladies and gentlemen,
please welcome Technology Manager of

00:00:04.500 --> 00:00:08.640
Development Tools,
Godfrey DiGiorgi.

00:00:09.910 --> 00:00:12.280
and the crowd goes wild.

00:00:12.370 --> 00:00:13.440
It's Friday afternoon.

00:00:13.440 --> 00:00:14.400
Been a long week.

00:00:14.600 --> 00:00:16.290
Been a good week?

00:00:16.800 --> 00:00:17.290
Excellent.

00:00:17.420 --> 00:00:18.260
Great to hear it.

00:00:18.400 --> 00:00:21.700
They said you might be a little tired at
this time in the week and that perhaps

00:00:21.700 --> 00:00:25.250
we should start doing a dance up here,
but I think you'd rather see develop

00:00:25.250 --> 00:00:27.910
how to debug your Mac OS X applications,
right?

00:00:27.920 --> 00:00:30.540
And for that,
let me introduce Dave Payne.

00:00:37.400 --> 00:00:41.640
I actually really did want to leave the
music playing the whole time this time.

00:00:41.640 --> 00:00:44.920
So I guess if you're still here,
5 o'clock on Friday afternoon to the

00:00:44.920 --> 00:00:49.020
last day after we've shown you all the
APIs and the tools and everything else,

00:00:49.020 --> 00:00:51.180
you must occasionally have bugs.

00:00:51.180 --> 00:00:54.160
So I guess we have to deal with that.

00:00:54.370 --> 00:00:57.940
So let's talk about
what we'll learn here.

00:00:57.940 --> 00:01:01.300
There's a variety of different
approaches to debugging on Mac OS X,

00:01:01.300 --> 00:01:05.220
standard debuggers and a
few other tools as well.

00:01:05.220 --> 00:01:09.500
In addition, depending on what type of
project you're working with,

00:01:09.500 --> 00:01:13.020
you'll be debugging in
different ways potentially.

00:01:13.020 --> 00:01:15.800
We'll look at debugging
with Project Builder.

00:01:15.800 --> 00:01:18.720
We'll bring our friends from
MetroWorks up to talk about

00:01:18.800 --> 00:01:20.880
debugging with CodeWarrior Pro 8.

00:01:21.280 --> 00:01:25.040
And we'll get into some
advanced debugging with GDB.

00:01:27.970 --> 00:01:30.090
So most of you are probably
familiar with this,

00:01:30.190 --> 00:01:33.500
just the overall debugging
architecture on Mac OS X.

00:01:33.500 --> 00:01:39.120
So we've got the two primary IDEs,
Project Builder and Code Warrior.

00:01:39.120 --> 00:01:46.110
Both of those work through GDB to talk
to the OS and the target application.

00:01:46.140 --> 00:01:50.840
The interface to the
OS changes over time.

00:01:51.900 --> 00:01:55.580
So, for example,
the Core OS team is adding support

00:01:55.580 --> 00:01:58.200
for per-thread signals in Jaguar.

00:01:58.200 --> 00:02:01.650
So we're needing to make changes
to GDB to accommodate that.

00:02:01.900 --> 00:02:06.330
So we provide GDB as an interface
for Code Warrior as well.

00:02:08.130 --> 00:02:12.780
But before we get into the two IDEs,
I'd like to touch on a few

00:02:12.780 --> 00:02:16.240
other ways that you should be
familiar with in addition to

00:02:16.330 --> 00:02:17.850
just the debuggers themselves.

00:02:17.860 --> 00:02:21.550
So in many situations,
you'll be working along and the

00:02:21.550 --> 00:02:25.000
application will crash and you
weren't running under the debugger.

00:02:25.000 --> 00:02:26.130
Shucks!

00:02:26.210 --> 00:02:27.480
Why did it crash?

00:02:27.500 --> 00:02:31.400
Or your users don't want
to run under the debugger,

00:02:31.400 --> 00:02:34.470
but it would be great if you could
get some information from them as

00:02:34.610 --> 00:02:36.440
to why the application crashed.

00:02:36.500 --> 00:02:40.930
So it's really important that you
understand how to turn on crash

00:02:40.930 --> 00:02:43.500
logging in the console application.

00:02:43.500 --> 00:02:47.850
So hopefully most of you run the
console application on occasion.

00:02:48.000 --> 00:02:51.990
It's best to not leave
debug logs in your code.

00:02:51.990 --> 00:02:53.320
You can see those in console.

00:02:53.700 --> 00:02:55.500
You can see system log messages.

00:02:55.500 --> 00:02:59.420
Perhaps we've left debugging
log messages in there that you

00:02:59.490 --> 00:03:01.000
might want to tell us about.

00:03:01.000 --> 00:03:05.000
But you can also turn on
crash logging in console.

00:03:05.000 --> 00:03:07.480
So this is the console preferences.

00:03:07.530 --> 00:03:11.610
You go up to preferences
and enable crash reporting.

00:03:12.310 --> 00:03:16.690
So when you do that,
then each application

00:03:16.900 --> 00:03:20.960
gets a separate crash log.

00:03:21.300 --> 00:03:24.520
My app has its own window.

00:03:24.520 --> 00:03:28.220
Mail.app if it ever crashed, for example.

00:03:28.220 --> 00:03:30.220
Projectbuilder.app, each gets its own.

00:03:30.220 --> 00:03:34.340
The latest crash is at
the bottom of the window.

00:03:34.340 --> 00:03:36.710
So if you've got a lot
of crash logs in there,

00:03:36.860 --> 00:03:40.870
you look at the top one, it's like, wait,
I thought I fixed that crash.

00:03:40.870 --> 00:03:43.620
Oh yeah, right, right,
the latest one is at the bottom.

00:03:43.660 --> 00:03:46.440
So you want to go down to the bottom.

00:03:47.050 --> 00:03:52.070
Also, not necessarily intuitive,
but when you reboot the system,

00:03:52.070 --> 00:03:55.330
it actually does retain all
the previous crash logs,

00:03:55.670 --> 00:03:56.990
which is usually a good thing.

00:03:56.990 --> 00:04:00.760
But occasionally you might want
to clear these windows to just

00:04:00.760 --> 00:04:02.950
get the things you care about now.

00:04:03.020 --> 00:04:06.100
And to be honest with you,
I put a path up here for

00:04:06.100 --> 00:04:07.960
where the crash logs land.

00:04:07.960 --> 00:04:11.080
To be honest with you,
I didn't verify that that's

00:04:11.230 --> 00:04:13.720
actually quite the correct path.

00:04:13.720 --> 00:04:16.720
So best of luck.

00:04:16.980 --> 00:04:20.420
Also,
can we start the countdown timer here,

00:04:20.430 --> 00:04:21.200
please?

00:04:23.610 --> 00:04:25.800
Great, thanks.

00:04:26.050 --> 00:04:30.040
So the crash logs do include a
stack backtrace for all of the

00:04:30.040 --> 00:04:31.700
threads of your application.

00:04:31.700 --> 00:04:35.980
Most apps on Mac OS X are
multi-threaded for you under the covers,

00:04:35.980 --> 00:04:39.160
at least,
even if you don't have your own threads.

00:04:39.260 --> 00:04:43.200
They show the register state
for the thread that did crash.

00:04:43.290 --> 00:04:47.110
And if you've got a binary
that has debug symbols,

00:04:47.200 --> 00:04:50.000
I believe in Jaguar it should be
showing the file and line number

00:04:50.000 --> 00:04:52.680
in these crash logs as well.

00:04:54.490 --> 00:05:00.330
So there's other ways to look at
things like what's stomping memory.

00:05:00.460 --> 00:05:04.670
So I want to point out that in Jaguar,
we've added support for

00:05:04.680 --> 00:05:06.670
hardware watchpoints in GDB.

00:05:06.880 --> 00:05:08.730
So we use--

00:05:09.300 --> 00:06:37.700
[Transcript missing]

00:06:38.820 --> 00:06:41.100
So, okay, now I'm running along.

00:06:41.100 --> 00:06:44.410
My app isn't crashing, but it's hanging.

00:06:44.410 --> 00:06:45.550
Why is it hanging?

00:06:45.560 --> 00:06:52.540
A tool that you can use to take a look
at this is the sample command line tool.

00:06:52.540 --> 00:06:58.620
So you go into a terminal window,
run sample with either the name or

00:06:58.620 --> 00:07:02.860
the process ID of the process and
how long you'd like to sample it for,

00:07:02.860 --> 00:07:07.730
and that'll show the stack backtraces of
what's going on in the app at that point.

00:07:08.500 --> 00:07:13.230
So you don't need to recompile
the binary for any of this.

00:07:13.300 --> 00:07:16.980
It works just by
sampling the application.

00:07:16.980 --> 00:07:20.010
So you can see some
examples of how to call it.

00:07:20.290 --> 00:07:25.990
It puts the output log into slash temp,
and again, this is something that

00:07:26.030 --> 00:07:27.600
your users can run.

00:07:27.600 --> 00:07:30.480
You can also do this
from a remote system.

00:07:30.480 --> 00:07:32.920
You can SSH into your system.

00:07:32.920 --> 00:07:36.040
Let's say that you've got
a full-screen game that,

00:07:36.040 --> 00:07:38.340
you know, normally it's working.

00:07:38.460 --> 00:07:41.200
It's running really fast,
but suddenly now it's hanging.

00:07:41.320 --> 00:07:47.440
You can do a sample from a remote
terminal to take a look at that.

00:07:47.570 --> 00:07:53.330
You can also do an attach with GDB and
actually dynamically go into the debugger

00:07:53.410 --> 00:07:57.990
and take a look at what's going on
with the application at that point.

00:07:59.130 --> 00:08:03.210
So that's sort of my overview
of alternatives to the

00:08:03.360 --> 00:08:05.760
actual debuggers themselves.

00:08:05.870 --> 00:08:09.110
Now I'd like to bring on Rab Hagy
from the Project Builder debugging

00:08:09.110 --> 00:08:14.560
team to talk about some of the new
features of Project Builder debugging.

00:08:14.560 --> 00:08:16.660
Thank you, Dave.

00:08:20.320 --> 00:08:21.460
Hello.

00:08:21.460 --> 00:08:24.260
In this section of our
presentation today,

00:08:24.270 --> 00:08:28.060
I'll be talking about
debugging with Project Builder,

00:08:28.060 --> 00:08:31.820
give you a brief overview,
talk about how to set up your project

00:08:31.960 --> 00:08:38.150
to get the most out of your debugging,
and then talk a bit about some of our

00:08:38.150 --> 00:08:46.670
work with displaying opaque data types,
and also present some new features

00:08:46.680 --> 00:08:49.670
that are post your Jaguar CD.

00:08:56.640 --> 00:09:00.380
Project Builder, the IDE,
provides a generalized

00:09:00.560 --> 00:09:02.090
framework for debugging.

00:09:02.340 --> 00:09:07.300
It has a user interface that
presents threads and stacks and

00:09:07.300 --> 00:09:09.100
variable views and so forth.

00:09:09.210 --> 00:09:14.600
It helps manage your breakpoints and
has support for cross-project debugging.

00:09:14.820 --> 00:09:18.980
And within that framework,
we have three plug-ins

00:09:19.110 --> 00:09:22.330
for specific languages.

00:09:22.640 --> 00:09:28.800
We have an AppleScript debugger,
a Java debugger, which incidentally is

00:09:28.800 --> 00:09:30.600
not the same as JDB.

00:09:30.600 --> 00:09:34.240
It's our own debugger built
from the ground up and uses

00:09:34.300 --> 00:09:36.600
the Java VM wire protocol.

00:09:36.840 --> 00:09:43.590
And for the C languages, the C,
Objective-C, C++, Objective-C++,

00:09:43.870 --> 00:09:46.960
we use the GDB debugger.

00:09:48.930 --> 00:09:52.580
Now, in the other sessions
earlier in the week,

00:09:52.580 --> 00:09:58.800
the compiler session and the delivering
with Project Builder session,

00:09:58.800 --> 00:10:02.730
we talked a lot about how
to use Project Builder to

00:10:02.770 --> 00:10:07.000
control your compiler options,
how to set up your project.

00:10:07.090 --> 00:10:10.740
With regards to debugging,
there are two key areas

00:10:10.830 --> 00:10:13.630
I'd like to point out.

00:10:14.060 --> 00:10:17.640
The first is if you're building
or working with multiple

00:10:17.790 --> 00:10:22.680
projects that are related,
an app project and another project

00:10:22.780 --> 00:10:25.880
that builds a shared library,
you want to create a common

00:10:25.920 --> 00:10:28.520
folder for them to build into.

00:10:28.520 --> 00:10:33.990
This solves issues at both build time,
so that everything's found,

00:10:34.000 --> 00:10:40.070
and at run time, so that we can run your
newly built program.

00:10:40.150 --> 00:10:46.240
The way to set this, it's a... a setting
on the project itself,

00:10:46.240 --> 00:10:50.690
and it's--you use the show info command,
and we'll show you how to do

00:10:50.700 --> 00:10:54.140
that in our demo in a moment.

00:10:54.800 --> 00:10:58.730
The second point is
about compiler settings,

00:10:58.740 --> 00:11:01.690
especially for the C compiler.

00:11:01.700 --> 00:11:04.390
Of course,
you need to enable the generation

00:11:04.390 --> 00:11:06.700
of symbolic information.

00:11:06.910 --> 00:11:11.730
And in the other sessions,
we've talked about what is the

00:11:11.840 --> 00:11:16.650
appropriate optimization level to use
for delivering your final project.

00:11:16.730 --> 00:11:20.610
But during development,
when you're bringing up your project,

00:11:20.720 --> 00:11:24.470
we recommend using optimization
level zero so that your

00:11:24.470 --> 00:11:26.700
debugging experience is the best.

00:11:26.700 --> 00:11:29.680
We present the most complete information.

00:11:29.700 --> 00:11:31.600
Now, here's a tip.

00:11:31.700 --> 00:11:36.630
If you're working with build settings,
target settings,

00:11:36.990 --> 00:11:40.990
look both at the build style
and the target settings to

00:11:41.110 --> 00:11:48.390
understand what--in this case,
what optimization level is in use.

00:11:51.000 --> 00:13:26.400
[Transcript missing]

00:13:28.070 --> 00:13:31.560
Finally,
you can create custom executables,

00:13:31.880 --> 00:13:36.730
which is a way to reference a
program not built by Project Builder,

00:13:36.730 --> 00:13:38.970
or at least your particular project.

00:13:39.000 --> 00:13:42.140
And this is very useful
for working with plug-ins,

00:13:42.140 --> 00:13:45.000
where you have your
project builds the plug-in,

00:13:45.000 --> 00:13:48.310
and then you've got a program over
here that's going to run and load

00:13:48.310 --> 00:13:54.000
your plug-in when you create a custom
executable to reference that program.

00:13:54.000 --> 00:13:58.720
We also use custom executables
within Project Builder to help

00:13:58.720 --> 00:14:02.000
run some of the Java programs.

00:14:02.000 --> 00:14:06.000
We use that to set up, for example,
to run Applet Viewer

00:14:06.000 --> 00:14:10.110
for Java Applet Target.

00:14:10.730 --> 00:14:13.300
Now I'd like to bring up Dave Ewing.

00:14:13.330 --> 00:14:18.210
Dave's our Java and indexing expert.

00:14:18.590 --> 00:14:22.070
And he'll be showing us some
of these... Is that what I do?

00:14:22.110 --> 00:14:23.500
Yeah.

00:14:23.500 --> 00:14:27.570
He'll be showing us some of
configuration issues that we talked

00:14:27.610 --> 00:14:31.140
about with a Java servlet program.

00:14:31.190 --> 00:14:36.080
But the points are
applicable for C programs,

00:14:36.080 --> 00:14:36.870
too.

00:14:36.920 --> 00:14:38.210
That's right.

00:14:38.610 --> 00:14:41.730
Well, the first thing I'm gonna show
you is how you set up your build

00:14:41.730 --> 00:14:43.020
directory for your project.

00:14:43.040 --> 00:14:47.140
As Rab mentioned earlier,
this is often used if you have

00:14:47.140 --> 00:14:50.840
more than one thing that you need
to build into the same location

00:14:50.840 --> 00:14:57.040
so that they can build correctly
together and run correctly together.

00:14:57.080 --> 00:15:02.890
So I'm gonna bring up contextual menu
here just to do the show info command.

00:15:03.070 --> 00:15:06.240
In this particular project,
it's a Java servlet.

00:15:06.240 --> 00:15:10.720
And for the uninitiated,
a Java servlet is like a CGI.

00:15:10.720 --> 00:15:15.480
It's something that runs in a web server,
often called a servlet

00:15:15.480 --> 00:15:17.280
container in this world.

00:15:17.280 --> 00:15:23.280
I'm gonna run this particular program
inside the Tomcat servlet container.

00:15:23.450 --> 00:15:26.400
And in order to do that,
I'm gonna actually build it into

00:15:26.400 --> 00:15:29.780
the Tomcat web apps directory here.

00:15:29.900 --> 00:15:32.080
And since I don't want to
pollute that build directory,

00:15:32.080 --> 00:15:35.330
I'm gonna put all my intermediates
inside the project folder in this

00:15:35.330 --> 00:15:38.180
other intermediates directory.

00:15:40.300 --> 00:15:46.250
Okay, so, also as Rab said,

00:15:48.960 --> 00:15:54.940
When you're building for debugging
versus building for deployment,

00:15:54.940 --> 00:15:56.910
you need to make sure your
compiler options are set

00:15:57.170 --> 00:15:59.350
correctly for each of those.

00:15:59.460 --> 00:16:06.650
And the key thing to take home here is,
so we have generate debugging symbols,

00:16:06.710 --> 00:16:10.270
pretend this is a native project here.

00:16:10.790 --> 00:16:14.490
We have it turned on here,
and we have the optimization

00:16:14.490 --> 00:16:15.900
level set here to 1.

00:16:15.900 --> 00:16:21.240
But we also have build styles,
and if I go and edit the

00:16:21.240 --> 00:16:24.070
active build style...

00:16:25.180 --> 00:16:29.980
You can see we override the
optimization setting there.

00:16:29.980 --> 00:16:33.090
It says -0, 0.

00:16:33.400 --> 00:16:59.200
[Transcript missing]

00:17:00.520 --> 00:17:04.610
Okay, the next thing I want to show you
is how I set up this executable.

00:17:04.640 --> 00:17:07.400
So I'm going to edit the
active executable here.

00:17:07.530 --> 00:17:13.490
And Tomcat, when it's run,
basically starts up with a shell script,

00:17:13.490 --> 00:17:17.100
so I'm going to execute
that shell script.

00:17:17.230 --> 00:17:18.540
And it takes an argument.

00:17:18.600 --> 00:17:23.500
It's just the word "run." Tomcat can
be run in a number of different modes,

00:17:23.500 --> 00:17:26.840
including in a debug mode
where it launches JDB,

00:17:26.840 --> 00:17:30.940
the command line debugger
that comes with the JDK,

00:17:30.940 --> 00:17:33.750
with the Java development kit.

00:17:34.860 --> 00:17:39.460
And this particular application
also needs some environment

00:17:39.460 --> 00:17:42.700
variables set so that it knows
where to find things on the disk.

00:17:42.700 --> 00:17:45.040
So I have some of those set up as well.

00:17:45.230 --> 00:17:49.160
And the last thing down here to
show is that I've got it set up to

00:17:49.280 --> 00:17:50.700
use the Java debugger in this case.

00:17:50.700 --> 00:17:54.820
So I'm going to do a quickie
little demo showing that the

00:17:54.920 --> 00:17:57.700
Java debugger is actually hooked
up in Project Builder too.

00:17:57.700 --> 00:18:01.570
So let's go ahead and say debug.

00:18:01.860 --> 00:18:07.750
brings up the debugger window here,
and some stuff gets printed out by, um,

00:18:07.800 --> 00:18:16.800
[Transcript missing]

00:18:20.900 --> 00:18:37.800
[Transcript missing]

00:18:37.920 --> 00:18:38.900
All that sort of stuff.

00:18:38.900 --> 00:18:41.230
There aren't any local variables
in this particular routine,

00:18:41.230 --> 00:18:42.890
which is a little boring.

00:18:42.920 --> 00:18:45.970
But if I just hit continue,
we can go over here and it's a hello

00:18:45.970 --> 00:18:47.870
world sort of applet or servlet.

00:18:47.900 --> 00:18:49.400
All right.

00:18:49.400 --> 00:18:50.650
Thank you, Dave.

00:19:03.540 --> 00:19:06.820
Let's talk a bit about opaque data types.

00:19:06.890 --> 00:19:11.540
If you've worked with Mac OS X at all,
you'll no doubt run into the fact that

00:19:11.540 --> 00:19:18.460
most of the low-level system libraries
or interfaces have opaque data types.

00:19:18.670 --> 00:19:23.460
That is, types without an exposed
implementation structure.

00:19:23.600 --> 00:19:30.370
And you can't really tell how
these types store information or...

00:19:30.970 --> 00:19:34.890
And not only can you not tell,
but the debugger itself can't tell

00:19:34.900 --> 00:19:39.090
because there's no symbolic information.

00:19:39.190 --> 00:19:43.090
Fortunately, most of these types have
a functional interface,

00:19:43.150 --> 00:19:50.170
an accessor method that will
pull information out of the type.

00:19:50.540 --> 00:19:58.810
Our plan and what we've started on,
you'll see the beginnings of this in your

00:19:59.220 --> 00:20:03.000
project builder 2.0 beta
CD or on the Jaguar one,

00:20:03.000 --> 00:20:08.160
is to use the functional interfaces
to pull information out of these types

00:20:08.160 --> 00:20:11.090
and then to show that in the debugger.

00:20:11.100 --> 00:20:16.100
And the first step we've done is
with the Objective-C NSString.

00:20:16.100 --> 00:20:22.630
It's probably the most
complicated and helped-- helped

00:20:22.720 --> 00:20:26.450
pave the way for future work.

00:20:26.530 --> 00:20:29.960
Now, if you know in a--in
a debugging situation,

00:20:29.960 --> 00:20:37.700
when--when it's not always the case that
your objects or your pointers are valid,

00:20:37.840 --> 00:20:43.120
and as a--as a result
of showing NSStrings,

00:20:43.120 --> 00:20:48.960
we also developed some technology
to actually validate the pointer

00:20:48.960 --> 00:20:52.690
to the string object so that
we don't invoke these functions

00:20:52.700 --> 00:20:57.070
until we know that there's a very,
very good chance that it is

00:20:57.090 --> 00:21:00.410
a true Objective-C object.

00:21:01.410 --> 00:21:07.260
Now, this is in your,
in the CDs that were handed out.

00:21:07.550 --> 00:21:12.110
Now I'd like to talk a bit about
some future work that we want

00:21:12.610 --> 00:21:17.540
to show that we are going to try
very hard to get into Jaguar.

00:21:17.660 --> 00:21:22.350
And it's,
the first new feature is an expression

00:21:22.350 --> 00:21:27.830
window that allows you to enter
an arbitrary C expression and have

00:21:27.830 --> 00:21:30.360
that displayed in a variable view.

00:21:30.480 --> 00:21:36.350
This is useful for showing
globals or dereferencing pointers.

00:21:36.740 --> 00:21:42.210
The expression is evaluated in
the current context specified

00:21:42.310 --> 00:21:46.200
in the user interface,
meaning the frame you're looking at,

00:21:46.340 --> 00:21:51.020
we use that scope information
to evaluate the expression.

00:21:51.490 --> 00:21:55.710
Second new feature is the ability
to take a single variable or a

00:21:55.710 --> 00:21:59.420
line in the variable view and put
that out as a separate window.

00:21:59.420 --> 00:22:04.270
And then a few other new
features that we'll show.

00:22:04.440 --> 00:22:08.620
So, let's go back to the demo.

00:22:10.410 --> 00:22:14.800
So this is a simple Objective-C program.

00:22:14.800 --> 00:22:18.830
It just allocates a couple NSStrings.

00:22:18.920 --> 00:22:24.940
And you can see that the constant string,
A string, we pull out its value.

00:22:25.020 --> 00:22:28.100
The... Yay!

00:22:28.180 --> 00:22:34.700
The next string, str,
is a-- it's a random value.

00:22:34.760 --> 00:22:39.200
And I'm gonna assign it to
even a known not-correct value.

00:22:39.200 --> 00:22:42.570
And you see we say invalid up there.

00:22:42.600 --> 00:22:45.500
Let you know that that
pointer is not valid.

00:22:45.680 --> 00:22:48.500
We'll step along here.

00:22:48.700 --> 00:22:51.000
Just one word on the interface.

00:22:51.000 --> 00:22:53.900
There's a new column called Summary.

00:22:54.130 --> 00:22:59.340
That's--the intent is where we'll
put information to summarize a

00:22:59.440 --> 00:23:01.400
type or an object of a given type.

00:23:01.400 --> 00:23:04.400
And the first thing we're
putting there is the strings.

00:23:04.400 --> 00:23:07.600
So we're about to
allocate this new string.

00:23:07.610 --> 00:23:08.700
And...

00:23:10.170 --> 00:23:12.260
We got the name of our host.

00:23:12.400 --> 00:23:16.100
And then we'll step one
more and release the string.

00:23:16.340 --> 00:23:21.260
And that, Objective-C runtime,
marks that as being an invalid object.

00:23:21.270 --> 00:23:23.650
So that could be handy.

00:23:23.830 --> 00:23:28.100
In the next line,
we have a global called glob.

00:23:28.270 --> 00:23:29.840
And we'd like to see its value.

00:23:29.860 --> 00:23:34.860
So the easiest way is to bring
up a new window expression,

00:23:34.860 --> 00:23:39.270
and you can type-- Ah.

00:23:40.000 --> 00:23:41.400
Yes.

00:23:41.400 --> 00:23:46.000
Made it a simple name so that I could
type it easily and I still can't type.

00:23:46.170 --> 00:23:50.400
So if we step now,
we'll do an assignment to that.

00:23:50.630 --> 00:23:53.720
And yay, we updated its value.

00:23:53.890 --> 00:24:01.740
Let's take AP, Dave,
and put that in the expression.

00:24:01.900 --> 00:24:07.160
AP--and let's show the types over
here in the expression window.

00:24:07.330 --> 00:24:11.630
We've added a few new things in the
context menu you want to check out.

00:24:11.770 --> 00:24:15.160
So we have the type, and in this frame,
AP is an integer.

00:24:15.360 --> 00:24:19.770
And when we step down,
we see that AP changes to a

00:24:19.770 --> 00:24:23.000
pointer to this little structure.

00:24:23.330 --> 00:24:31.300
So expressions are evaluated in the
context that you've selected over here.

00:24:31.300 --> 00:24:32.250
Let's see.

00:24:32.310 --> 00:24:35.390
Step some more.

00:24:39.800 --> 00:24:41.830
All right,
let's go back up to the context menu,

00:24:41.830 --> 00:24:46.710
Dave, in the main view there.

00:24:46.710 --> 00:24:46.710
And...

00:24:46.850 --> 00:24:49.280
You can--let's just pull that out.

00:24:49.280 --> 00:24:54.130
Oh, yeah, we've added formatting,
finally, for variable types.

00:24:54.170 --> 00:24:56.870
Yay.

00:24:57.010 --> 00:25:01.360
And this is a pointer,
so let's do the view as.

00:25:01.460 --> 00:25:05.320
And that takes the address--or
the contents of that,

00:25:05.320 --> 00:25:08.550
and we'll change it to
view it as an integer.

00:25:08.750 --> 00:25:13.910
and that comes up there
and since we know the first

00:25:15.430 --> 00:25:18.860
First, four bytes are an integer.

00:25:18.860 --> 00:25:21.180
Now when we step...

00:25:24.800 --> 00:25:26.800
and the rest of the team.

00:25:26.800 --> 00:25:32.800
So, um... I think that'll... man: Well,
we've got one other little thing here.

00:25:32.870 --> 00:25:34.600
Oh, yeah, one more thing.

00:25:34.810 --> 00:25:37.800
So you can put an expression
into the expression windows.

00:25:37.900 --> 00:25:41.800
Well, the expression can actually
contain a function call.

00:25:41.800 --> 00:25:48.400
And this function returns a C string,
which is kind of your own

00:25:48.400 --> 00:25:49.800
way to summarize this type.

00:25:49.800 --> 00:25:54.230
So as we step...

00:25:54.350 --> 00:25:58.520
will see that A changes,
and we've fetched and got a new string.

00:25:58.670 --> 00:26:01.590
So that's a--you know,
we might find that useful to call

00:26:01.650 --> 00:26:03.940
functions each time you step.

00:26:04.040 --> 00:26:08.110
Okay.

00:26:09.730 --> 00:26:14.590
All right, we're done with our part,
and now I'd like to bring up

00:26:14.590 --> 00:26:17.310
Ken Ryall from MetroWorks.

00:26:30.180 --> 00:26:31.100
Thank you.

00:26:31.100 --> 00:26:38.160
First step,
figure out how to work the slides.

00:26:46.800 --> 00:26:57.300
[Transcript missing]

00:27:01.800 --> 00:27:02.030
Okay.

00:27:02.030 --> 00:27:03.560
Sorry about that.

00:27:03.560 --> 00:27:04.900
All right.

00:27:04.900 --> 00:27:07.060
We usually collaborate better than that.

00:27:07.230 --> 00:27:08.660
Yeah.

00:27:08.660 --> 00:27:08.900
Yeah.

00:27:08.900 --> 00:27:13.090
Yeah, we work better together on
code than the projector.

00:27:13.100 --> 00:27:18.100
So I'm gonna talk a little
bit about Code Warrior,

00:27:18.100 --> 00:27:23.260
the Code Warrior Mac tools for Pro 8,
which we talked a bit about

00:27:23.260 --> 00:27:25.690
in our session on Tuesday,
and we're going to be shipping

00:27:25.700 --> 00:27:26.600
around the end of this month.

00:27:26.600 --> 00:27:28.500
They're in beta right now.

00:27:28.500 --> 00:27:31.660
When we were here last year,
we had Code Warrior Pro 7,

00:27:31.660 --> 00:27:35.550
and that shipped,
and we've had a lot of experience

00:27:35.550 --> 00:27:37.140
using that in the last year.

00:27:37.230 --> 00:27:41.860
And so we had a lot of
customers carbonize their apps,

00:27:42.050 --> 00:27:46.450
bring their apps to Mac OS X with it,
and we learned a lot by doing that.

00:27:46.460 --> 00:27:49.260
We--you know,
debugging worked fairly well,

00:27:49.260 --> 00:27:51.760
but once you run, like,
the code from large apps like

00:27:51.770 --> 00:27:56.560
Microsoft Office or applications
like Adobe's InDesign,

00:27:56.560 --> 00:27:59.860
which loads, like,
200 plug-ins on startup through there,

00:27:59.860 --> 00:28:01.620
and a lot of new things
people were doing,

00:28:01.620 --> 00:28:05.660
like writing
CFM applications that loaded,

00:28:05.690 --> 00:28:08.530
you know, Maco code and bundles,
that sort of thing,

00:28:08.650 --> 00:28:13.020
we learned a lot about what our debugger
needed to do better on Mac OS X.

00:28:13.020 --> 00:28:18.190
So for Pro 8, we started by looking at
performance improvements.

00:28:18.240 --> 00:28:21.350
And as Dave talked about earlier,
the Code Warrior debugger on

00:28:21.350 --> 00:28:23.320
Mac OS X is based on top of GDB.

00:28:23.320 --> 00:28:29.720
GDB provides all the lower-level debug
services that we use in our debugger.

00:28:29.870 --> 00:28:33.580
So we talked to Dave,
and the GDB engineers,

00:28:33.700 --> 00:28:37.080
and worked together
with them to figure out,

00:28:37.080 --> 00:28:40.620
you know, performance bottlenecks,
to find better ways Code Warrior could

00:28:40.640 --> 00:28:44.780
talk to GDB and interact
with it in different ways.

00:28:44.780 --> 00:28:46.980
So we collaborated on
a lot of improvements.

00:28:47.100 --> 00:28:50.780
So I'm happy to say the debugger
in Pro 8 is quite a bit faster,

00:28:50.780 --> 00:28:55.550
both with application startup,
for stepping, that sort of thing.

00:28:55.620 --> 00:28:59.380
So having said that, it's not as fast as
we'd like for it to be.

00:28:59.480 --> 00:29:01.540
And we've heard that as well.

00:29:01.540 --> 00:29:07.540
So we're going to keep working on
additional improvements and keep working

00:29:07.540 --> 00:29:12.540
with both the folks at Apple and all
of our customers to make it even faster.

00:29:12.540 --> 00:29:14.870
One of the things that does
affect debugging quite a bit is

00:29:14.870 --> 00:29:18.540
that Pro 8 has a new Maco linker
that generates smaller symbolics,

00:29:18.570 --> 00:29:23.480
and that helps our debugger start up
faster and helps performance as well.

00:29:23.540 --> 00:29:27.290
So if you used our Maco tools in Pro 7,
I'd really encourage you

00:29:27.350 --> 00:29:28.540
to use them in Pro 8.

00:29:28.540 --> 00:29:31.500
I think you'll have a
better debugging experience.

00:29:31.520 --> 00:29:35.470
There are some other things we added,
because we were kind of frustrated

00:29:35.530 --> 00:29:40.000
with coming to WWDC last year
and showing basically the same

00:29:40.000 --> 00:29:44.500
debugger we had running on 9,
only, you know,

00:29:44.500 --> 00:29:46.500
basically with all the same features.

00:29:46.500 --> 00:29:51.370
So we've added things like smart
variable formatting for helping you view

00:29:51.370 --> 00:29:59.500
additional data types and some types
that are more opaque in Carbon on 10.

00:29:59.500 --> 00:30:03.460
And then we did something that--
people have asked for for a long time.

00:30:03.460 --> 00:30:06.690
CodeWare has a plug-in architecture
that lets you add additional

00:30:06.690 --> 00:30:07.960
plug-in windows and things.

00:30:07.960 --> 00:30:13.960
And we--you could create all these,
but we didn't really have an interface

00:30:13.960 --> 00:30:16.960
to let you hook those up to the
debugger or look at debugger data.

00:30:16.960 --> 00:30:22.640
So we've done that now so that you can
do custom data types in the debugger and

00:30:22.650 --> 00:30:27.460
write your own plug-ins to view your data
in specific ways for your application.

00:30:27.460 --> 00:30:32.920
So the rest of the features are really
focused on productivity and performance.

00:30:32.920 --> 00:30:35.920
We looked at things in the user
interface that we needed to smooth out.

00:30:35.920 --> 00:30:38.920
So we have an improved memory
window and register browser,

00:30:38.920 --> 00:30:44.170
especially for people doing debugging
multiple-- apps that have a lot

00:30:44.170 --> 00:30:51.910
of threads and need to look at
memory from cross-platform sources.

00:30:51.990 --> 00:30:55.920
And the other thing we wanted
to add were event points.

00:30:55.930 --> 00:31:00.420
And these are like breakpoints,
except they do more than just stop.

00:31:00.420 --> 00:31:03.380
So I'll show those to you in a demo here.

00:31:03.380 --> 00:31:08.270
But we have five-- a log point,
a pause point, a skip point,

00:31:08.370 --> 00:31:09.880
a script point, and a sound point.

00:31:09.880 --> 00:31:13.880
And they'll all make more sense
if I just show them to you.

00:31:20.520 --> 00:31:24.140
So here I've got a debugging
session started with the

00:31:24.140 --> 00:31:26.060
Code Warrior Pro 8 tools.

00:31:26.100 --> 00:31:30.890
And this is just a simple
Carbon Power Plan app.

00:31:31.850 --> 00:31:33.500
So I'll stop at a break point.

00:31:33.630 --> 00:31:35.800
And this function has a lot of variables.

00:31:35.810 --> 00:31:37.770
And the main thing they have
in common is that you really

00:31:37.850 --> 00:31:39.260
can't tell very much about them.

00:31:39.280 --> 00:31:43.620
All you really see is hex addresses
for things like STL strings and vectors

00:31:43.620 --> 00:31:46.420
and rectangles and that sort of thing.

00:31:46.420 --> 00:31:50.250
So one of the things we've added
is a variable viewer formatter

00:31:50.250 --> 00:31:54.680
plug-in that lets you write
XML descriptions of how you'd really

00:31:54.680 --> 00:31:56.870
like those variables displayed.

00:31:56.910 --> 00:31:59.260
And if you turn on smart
variable formatting,

00:31:59.470 --> 00:32:01.200
then you'll see the results of that.

00:32:01.210 --> 00:32:03.340
These all have any
entries for things like,

00:32:03.340 --> 00:32:05.640
you know, pictures and rectangles.

00:32:05.670 --> 00:32:06.740
You can see for the string.

00:32:06.740 --> 00:32:10.040
I can see the value for the string,
the size of the vector,

00:32:10.040 --> 00:32:13.940
the name of the file spec,
that sort of thing.

00:32:13.940 --> 00:32:15.250
So that's helpful.

00:32:15.250 --> 00:32:19.280
But we also wanted to provide a
way to write custom viewers so that

00:32:19.370 --> 00:32:23.820
if I double-click on something,
it doesn't just show me, you know,

00:32:23.820 --> 00:32:25.860
the hex data or the value of it.

00:32:26.090 --> 00:32:31.330
You can actually provide a custom user
interface to show the actual data behind

00:32:31.380 --> 00:32:34.800
that variable and see what it really is.

00:32:34.800 --> 00:32:35.800
Thanks.

00:32:35.800 --> 00:32:40.180
I was actually there about
a month and a half ago,

00:32:40.180 --> 00:32:40.390
so.

00:32:44.430 --> 00:32:48.260
So we started looking at viewing
some opaque data types as well.

00:32:48.260 --> 00:32:51.600
This is a Carbon window,
which is normally completely opaque.

00:32:51.680 --> 00:32:54.890
And what we do is if your
application links against a

00:32:54.890 --> 00:32:57.510
little library we provide,
it can go out and run some code in

00:32:57.510 --> 00:33:01.730
your process and come back and give
us information about the window.

00:33:01.910 --> 00:33:04.330
And then we can do the same
thing with like FS specs and

00:33:04.330 --> 00:33:07.890
FS refs to where instead of just
being a bunch of opaque data,

00:33:07.890 --> 00:33:14.410
you can actually see the path that
the file reference actually refers to.

00:33:17.530 --> 00:33:22.560
So now I'll clear this breakpoint
and keep running and show you

00:33:22.560 --> 00:33:24.760
a couple of the event points.

00:33:24.910 --> 00:33:29.360
These are designed
mostly to solve problems

00:33:29.560 --> 00:33:32.530
You have debugging things
where you are trying to debug

00:33:32.600 --> 00:33:34.860
things in the user interface,
and if you stop to make a

00:33:34.860 --> 00:33:37.860
context switch in the debugger,
it would ruin the thing

00:33:37.860 --> 00:33:39.500
you're trying to debug.

00:33:39.560 --> 00:33:44.940
So, for instance, in this case,
I'd like to debug my menu-enabling

00:33:45.030 --> 00:33:48.470
code and have it tell me when
I'm actually calling this routine

00:33:48.510 --> 00:33:50.490
to enable the cut or clear menu.

00:33:50.500 --> 00:33:52.560
But if I actually set a
breakpoint there and stopped,

00:33:52.560 --> 00:33:57.200
it would ruin it because I would switch
to the debugger and then... So what it's

00:33:57.200 --> 00:34:06.170
going to do is it's going to play...
It's supposed to be playing sound.

00:34:34.940 --> 00:34:35.760
Okay, sorry.

00:34:35.840 --> 00:34:38.600
It's been a long week.

00:34:38.600 --> 00:34:41.860
So now I can annoy you
with sounds like this.

00:34:41.860 --> 00:34:45.580
And that verifies that the code
in this is actually being called.

00:34:48.450 --> 00:34:50.480
Now, in another case,
I want to resize this window

00:34:50.790 --> 00:34:53.240
and see what's actually
going on behind the scenes.

00:34:53.240 --> 00:34:56.820
But again,
if I stop the debugger each time,

00:34:56.850 --> 00:34:59.270
it's going to ruin it for me.

00:35:02.650 --> 00:35:04.740
So I'll set something called a log point.

00:35:04.850 --> 00:35:07.660
And this is sort of like an
interactive printf statement that you

00:35:07.660 --> 00:35:08.870
can just sort of insert in your code.

00:35:08.870 --> 00:35:12.450
So in this case,
I want to know the width of the window.

00:35:21.810 --> 00:35:25.400
So this should calculate the width of
the incoming rectangle for the window.

00:35:25.400 --> 00:35:28.260
I can tell it to treat
it as an expression.

00:35:29.120 --> 00:35:34.090
And then in the debugger's log window,
every time I resize the window,

00:35:34.090 --> 00:35:36.580
it'll tell me the new size.

00:35:36.640 --> 00:35:40.680
433.

00:35:45.090 --> 00:35:49.840
and all that without going
to the speech control panel.

00:35:49.840 --> 00:35:54.230
So I created a couple more windows
and now it's throwing this assert

00:35:54.240 --> 00:35:57.320
because the old code said I couldn't
have more than three windows.

00:35:57.370 --> 00:36:00.330
Well, this is annoying,
but I don't want to stop and take

00:36:00.330 --> 00:36:02.510
out the assert and recompile it.

00:36:02.580 --> 00:36:06.910
So what I'm going to do is find
the assert and set a skip point.

00:36:07.070 --> 00:36:12.080
What a skip point does is it skips
over that line of code and now

00:36:12.080 --> 00:36:16.480
Now I can continue working without
running into the assert any longer.

00:36:20.150 --> 00:36:22.340
So those are some of the
event points in Pro 8.

00:36:22.410 --> 00:36:23.340
There are some other ones too.

00:36:23.340 --> 00:36:26.890
There's a pause point,
and all it does is pause execution

00:36:26.890 --> 00:36:30.730
long enough for the debugger to
update all the user interface.

00:36:30.730 --> 00:36:33.640
So if you just want to monitor something
going on without actually stopping,

00:36:33.640 --> 00:36:34.560
you can do that.

00:36:34.560 --> 00:36:38.730
And the other is a script point
that will go out and execute an

00:36:38.730 --> 00:36:43.580
application or an Apple script
whenever you hit that break point.

00:36:43.990 --> 00:36:48.440
So that's my demo of the debugger
features in Code Warrior Pro 8.

00:36:48.440 --> 00:36:51.980
And I'd like to really
thank Dave and his team,

00:36:52.080 --> 00:36:54.360
the GDB guys,
of helping us provide a good

00:36:54.360 --> 00:36:57.010
debugger for you on Mac OS X.

00:37:04.100 --> 00:37:05.860
Let's see if I can get
anything else wrong.

00:37:05.860 --> 00:37:07.200
Jim?

00:37:07.290 --> 00:37:13.690
Jim Ingham is next,
but I left the clicker over here.

00:37:13.700 --> 00:37:16.500
Oh, but you can tell me how to work it,
because I have no idea either.

00:37:16.500 --> 00:37:17.920
All right.

00:37:19.300 --> 00:37:23.150
The key part is to point it
straight into that thing.

00:37:23.150 --> 00:37:24.250
Okay, okay.

00:37:24.250 --> 00:37:24.840
Good.

00:37:24.840 --> 00:37:28.050
So we're not overwhelmed by technology.

00:37:29.480 --> 00:37:33.260
Great, so that's really cool stuff.

00:37:33.600 --> 00:37:35.700
So, and I'm going to tell you
about boring stuff now,

00:37:35.730 --> 00:37:38.960
because what we're going to
tell you is the low-level stuff,

00:37:38.960 --> 00:37:42.840
which is sort of at the
level of desperation,

00:37:42.840 --> 00:37:45.090
and then you want to go,
and you don't have anything

00:37:45.090 --> 00:37:46.060
pretty to do anymore.

00:37:46.150 --> 00:37:50.710
You're going to have to get down
at the lowest level of stuff.

00:37:50.870 --> 00:37:53.970
So first though,
we said this last year and just

00:37:53.970 --> 00:37:56.760
reiterate it because it's still true.

00:37:56.760 --> 00:38:00.940
I mean, in terms of the Project Builder
and the whole Apple development

00:38:00.950 --> 00:38:03.340
environment that we work with,
although we provide

00:38:03.340 --> 00:38:07.330
these really low-level,
grody command-line GDB features, I mean,

00:38:07.370 --> 00:38:10.550
overall,
we understand that you don't want to

00:38:10.550 --> 00:38:15.010
have to use those kinds of interfaces
when you're worrying actually about

00:38:15.010 --> 00:38:18.050
your code and how it's working and how
your application's working and so on.

00:38:18.700 --> 00:38:23.830
So we want to bring as much as possible
up into the UI and make it all available

00:38:23.830 --> 00:38:25.320
to you in some really nice way.

00:38:25.320 --> 00:38:27.730
On the other hand,
there are certain classes

00:38:27.800 --> 00:38:30.750
of folks who really,
really like typing and really,

00:38:30.750 --> 00:38:33.830
really like that interface,
and we still want to maintain

00:38:33.830 --> 00:38:35.570
connection with all of that.

00:38:35.610 --> 00:38:37.700
And if you've been a
Unix developer for years,

00:38:37.700 --> 00:38:38.850
you've got to love it.

00:38:38.890 --> 00:38:40.440
You know,
it comes out of your fingers without

00:38:40.440 --> 00:38:41.430
you having to think about it.

00:38:41.500 --> 00:38:44.830
And we really do want to keep that
experience for our folks as well.

00:38:46.240 --> 00:38:48.690
So, you know,
even if Project Builder reaches

00:38:48.690 --> 00:38:51.100
the stage where it has everything
possible you could want,

00:38:51.100 --> 00:38:52.980
you still might want to use GDB.

00:38:52.980 --> 00:38:55.180
There are some reasons for that.

00:38:55.180 --> 00:38:57.060
And then in its current state,
there are reasons.

00:38:57.060 --> 00:39:01.920
So, one, even with a beautiful UI,
it's a good low-level debugger,

00:39:01.920 --> 00:39:07.100
and sometimes the kinds of queries you
can make with a command interface can be

00:39:07.100 --> 00:39:09.980
more precise than you can make with a UI.

00:39:09.980 --> 00:39:11.750
So it's good to have it there for that.

00:39:11.810 --> 00:39:14.660
In the current state of things,
it's good to have it there because,

00:39:14.660 --> 00:39:16.210
you know, there's stuff that we
haven't gotten into.

00:39:16.240 --> 00:39:16.850
We haven't gotten into the UI yet.

00:39:16.880 --> 00:39:20.000
But GDB's been around for
ages and probably can do it

00:39:20.000 --> 00:39:21.880
in some hairy way or other.

00:39:21.880 --> 00:39:23.170
So it's there for that.

00:39:23.180 --> 00:39:27.370
There are also certain things about
having a command line that has some

00:39:27.370 --> 00:39:30.780
control constructs and stuff like that,
which allow you to do sort

00:39:30.880 --> 00:39:32.740
of investigations on the fly.

00:39:32.740 --> 00:39:35.140
And so it's useful for that.

00:39:35.140 --> 00:39:39.660
And then finally,
we have made the debugger extensible.

00:39:39.660 --> 00:39:44.060
There's the built-in features that come
with the normal GDB user commands that

00:39:44.060 --> 00:39:47.280
you can do to kind of do ham-fisted,
ways of doing things like the

00:39:47.280 --> 00:39:52.030
really neat formatted data stuff
that they showed in CodeWarrior.

00:39:52.040 --> 00:39:56.630
And then we also have a C-level plug-in,
too, which allows you to get at

00:39:56.680 --> 00:39:59.760
all the information that
GDB knows about your program.

00:39:59.760 --> 00:40:02.660
So you could do whatever
horrible thing you can think of.

00:40:02.700 --> 00:40:08.070
And the documentation for all this
is in the reference on your...

00:40:08.200 --> 00:40:11.930
the installation on your system,
Jaguar.

00:40:13.890 --> 00:40:15.980
Okay, so before that,
just as a little plug,

00:40:16.010 --> 00:40:20.670
we have the net version of GDB,
but then we've added a lot to it.

00:40:20.730 --> 00:40:23.180
So for those coming from Unix,
there are things that

00:40:23.180 --> 00:40:25.580
you won't recognize,
and maybe you like them or whatever.

00:40:25.580 --> 00:40:28.770
So this is the little list of that,
and also toot our own horn or whatever.

00:40:28.780 --> 00:40:32.480
So the big one is Objective-C support,
which is not in the net GDB,

00:40:32.480 --> 00:40:34.380
but that's all done by Apple.

00:40:34.380 --> 00:40:38.000
A lot of this stuff we're working
its way slowly back into the net GDB,

00:40:38.000 --> 00:40:40.300
but that's a long negotiating process.

00:40:40.960 --> 00:40:44.200
The other things we've added are
some better shared library support.

00:40:44.200 --> 00:40:46.940
So there's a future break
command so that you can say,

00:40:46.940 --> 00:40:50.740
you know, break if you ever see a symbol
looking like this in any code that

00:40:50.740 --> 00:40:54.000
gets loaded at any point in time,
which is useful.

00:40:54.000 --> 00:40:57.520
And then there's,
this is like the propeller head command.

00:40:57.520 --> 00:41:00.940
There's a shared library,
set shared library.

00:41:00.940 --> 00:41:03.770
This is the command that you
would use if you want to say,

00:41:03.770 --> 00:41:06.430
like, here's a library which
I don't care about,

00:41:06.490 --> 00:41:08.680
please don't pay any attention to it.

00:41:08.680 --> 00:41:13.580
And this is mostly used by... both
Code Warrior and by Project Builder,

00:41:13.580 --> 00:41:16.080
because they can have some
smarts about what they should

00:41:16.080 --> 00:41:19.430
and should not pay attention to,
but if you wanted to, you could use that.

00:41:19.460 --> 00:41:22.240
There's a save breakpoints
command that was added.

00:41:22.240 --> 00:41:24.710
This is mostly useful if
you're not working in the

00:41:24.710 --> 00:41:28.090
Project Builder environment,
because Project Builder actually

00:41:28.090 --> 00:41:30.180
already saves all your breakpoints.

00:41:30.180 --> 00:41:32.440
But if you're a real
geek and you like GDB,

00:41:32.440 --> 00:41:35.660
it's cool to be able to save all your
breakpoints and then restore them.

00:41:35.680 --> 00:41:37.540
So that's there.

00:41:37.540 --> 00:41:40.880
And then the last thing is that
we did add this plug-in mechanism,

00:41:40.960 --> 00:41:45.760
so you can actually write C code,
and there's a GDB command line command

00:41:45.760 --> 00:41:50.860
to load that code into the inferior,
and then it can, I mean into GDB rather,

00:41:50.860 --> 00:41:53.800
and it can have access to
all of GDB's knowledge,

00:41:53.840 --> 00:41:58.520
so you can get any information
about the inferior and do

00:41:58.520 --> 00:41:59.590
whatever you want with it.

00:41:59.640 --> 00:42:03.060
So it's written in C, C++, Objective-C,
whatever you want.

00:42:03.080 --> 00:42:06.320
Again, since it's a compiled code,
you can do investigations into

00:42:06.320 --> 00:42:09.220
memory and stuff like that in
very fast and flexible ways.

00:42:09.280 --> 00:42:10.940
Of course, you know it's C.

00:42:10.940 --> 00:42:13.720
You can do everything in C code,
so you can crash GDB with it,

00:42:13.720 --> 00:42:15.720
but that's the risk you take.

00:42:15.720 --> 00:42:21.120
Also, we track NetGDB,
and one of the things we're really

00:42:21.120 --> 00:42:22.590
trying to do is keep up with NetGDB.

00:42:22.720 --> 00:42:25.430
So if somebody out on the
Net decides that some structure

00:42:25.430 --> 00:42:28.350
should change in size,
we're going to go, "Okay,

00:42:28.350 --> 00:42:31.220
it changes in size," and then
your plug-in's going to break

00:42:31.220 --> 00:42:32.550
and you'll have to recompile it.

00:42:32.720 --> 00:42:36.720
But it's really important for us
to keep up with the Net efforts,

00:42:36.720 --> 00:42:38.520
so we're going to continue doing that.

00:42:38.960 --> 00:42:39.720
Sorry.

00:42:39.720 --> 00:42:40.860
Also, you're linking code into GDB,
and you're going to have to

00:42:40.860 --> 00:42:40.860
do a lot of work to do that.

00:42:40.860 --> 00:42:40.910
So you're going to have to
do a lot of work to do that.

00:42:40.920 --> 00:42:44.260
So you're linking code into GDB,
so it has to have the

00:42:44.260 --> 00:42:48.030
same license that GDB has,
or you'll be breaking the

00:42:48.030 --> 00:42:50.600
license agreement for using GDB,
so that's a GPL.

00:42:51.030 --> 00:42:53.920
So that won't matter if you
write plug-ins to use in-house,

00:42:53.920 --> 00:42:57.680
because, you know,
the GPL says whoever you give

00:42:57.680 --> 00:43:01.920
it to has to give the--I mean,
has to have the source, too.

00:43:01.920 --> 00:43:04.020
If it's in-house, you know,
that means that they have to be able to

00:43:04.030 --> 00:43:07.920
see the server that has the source on it,
no other implications.

00:43:07.920 --> 00:43:09.870
But if you distribute
it to other companies,

00:43:09.930 --> 00:43:10.880
you will have to give them the source.

00:43:10.880 --> 00:43:12.570
So whatever.

00:43:12.970 --> 00:43:16.880
And the most psycho example
of this is the MaxBug plug-in,

00:43:16.880 --> 00:43:20.880
which is available on your system,
which is a really scary experience,

00:43:20.880 --> 00:43:22.880
but you should do it just
for whatever fun's sake.

00:43:22.880 --> 00:43:25.880
If you load the MaxBug
plug-in and then type mb,

00:43:25.880 --> 00:43:28.880
you'll see in a terminal window
what looks exactly like MaxBug,

00:43:28.900 --> 00:43:30.880
except it's like a source
line version of MaxBug,

00:43:30.880 --> 00:43:32.880
so it also has the source.

00:43:32.880 --> 00:43:35.780
It's psycho, anyway.

00:43:36.900 --> 00:43:41.880
Okay, so just a couple of things about
stuff that we haven't yet managed

00:43:41.880 --> 00:43:46.360
to hoist into Project Builder,
but which might be interesting

00:43:46.400 --> 00:43:47.950
for you guys to do.

00:43:47.960 --> 00:43:49.160
That's the next section.

00:43:49.160 --> 00:43:51.630
So those sorts of things,
the three main ones are,

00:43:51.750 --> 00:43:54.740
one is remote debugging,
one is how to get to watch points,

00:43:54.740 --> 00:43:58.820
because we did that kind of late and we
haven't got it into Project Builder yet,

00:43:58.820 --> 00:44:00.400
and one is kernel debugging.

00:44:01.400 --> 00:44:09.300
So remote debugging is just running the,
controlling the debugger from a window

00:44:09.300 --> 00:44:15.690
which is hosted by another computer
so that if you have a game running or

00:44:16.130 --> 00:44:21.260
somewhere where switching foreground
and background in order to run the

00:44:21.260 --> 00:44:24.430
debugging session is going to make
the debugging session impossible,

00:44:24.430 --> 00:44:27.490
then it's nice to be able to type
stuff at the debugger or whatever

00:44:27.490 --> 00:44:31.370
you're going to do on another machine
which has a different way of debugging.

00:44:31.400 --> 00:44:33.690
Windows server.

00:44:34.010 --> 00:44:35.440
The way that you do that is simple.

00:44:35.440 --> 00:44:37.780
You know,
you start up the application that you

00:44:37.780 --> 00:44:40.330
want to target on the remote machine.

00:44:40.450 --> 00:44:43.040
Then you go over to the machine
you're going to debug from,

00:44:43.120 --> 00:44:47.280
and in a terminal window,
you SSH into the remote machine,

00:44:47.410 --> 00:44:50.890
start up GDB,
and attach to the application.

00:44:50.990 --> 00:44:54.540
One little tiny thing that the
Apple guys have added-- they did this

00:44:54.640 --> 00:44:57.570
a while ago-- which is not in NetGDB,
is when you want to attach

00:44:57.570 --> 00:44:59.540
to another application,
you don't have to go through the

00:44:59.540 --> 00:45:00.840
bother of looking up its PID.

00:45:00.910 --> 00:45:03.840
If you actually type
"application name" and hit a tab,

00:45:03.930 --> 00:45:10.390
there is a PID completer that'll look up
all the PIDs with that application name.

00:45:10.400 --> 00:45:12.340
That's just a little convenience.

00:45:12.480 --> 00:45:13.980
And we want to do this
in Project Builder,

00:45:13.980 --> 00:45:17.800
of course, 'cause it'll be much more
convenient to see your sources.

00:45:19.220 --> 00:45:22.430
So we do have a watchpoint support now.

00:45:22.430 --> 00:45:26.710
It's not the one, I mean,
it's sort of hardware watchpoint support,

00:45:26.820 --> 00:45:27.100
right?

00:45:27.100 --> 00:45:31.440
It's not the hardware register,
which is the memory register,

00:45:31.440 --> 00:45:35.100
because they won't let us
have that in user space.

00:45:35.120 --> 00:45:39.570
But instead, it's a page protection
watchpoint mechanism.

00:45:39.860 --> 00:45:43.120
In terms of speed,
that's still pretty good,

00:45:43.120 --> 00:45:45.490
unless you happen to have
a page which you're making,

00:45:45.490 --> 00:45:49.010
like, thousands of accesses per second,
and your variable happens

00:45:49.010 --> 00:45:50.120
to be on that page.

00:45:50.120 --> 00:45:52.010
The performance will be fine.

00:45:52.120 --> 00:45:56.050
The command to access it
is the gdb watch command.

00:45:56.420 --> 00:46:01.120
You say watch, and then you give any
expression or a raw address.

00:46:01.260 --> 00:46:03.460
If it's an expression,
GDB will figure out what

00:46:03.460 --> 00:46:06.520
memory or memory-- multiple,
you know, memory access.

00:46:06.620 --> 00:46:09.120
Like, if it's a pointer that
points down to something,

00:46:09.160 --> 00:46:11.620
it'll watch both the pointer
and the thing it points to.

00:46:11.620 --> 00:46:14.620
So if either of those change,
it'll tell you, and so on and so forth.

00:46:14.640 --> 00:46:16.120
It's pretty smart about that.

00:46:16.510 --> 00:46:18.930
There's one--or a couple big caveats.

00:46:19.120 --> 00:46:22.120
The first one is that it doesn't
work well for stack objects.

00:46:22.120 --> 00:46:25.040
I think this is probably just bugs,
but we haven't figured it out yet.

00:46:25.120 --> 00:46:30.110
But something gets really upset if you
try to protect a page on the stack.

00:46:30.250 --> 00:46:33.120
So that doesn't work yet.

00:46:33.120 --> 00:46:38.120
And then the other thing is that it's
unusual to actually want to watch,

00:46:38.120 --> 00:46:40.080
you know, a stack local variable.

00:46:40.260 --> 00:46:43.120
So I haven't found that
to be much of a problem.

00:46:43.120 --> 00:46:46.120
And then the other one,
which is a little bit more serious,

00:46:46.120 --> 00:46:50.120
is that we use a page protection scheme,
and at this point,

00:46:50.120 --> 00:46:55.120
there are no sort of special
debugger page watch modes,

00:46:55.120 --> 00:46:59.100
so we just use, you know,
the ordinary write protection.

00:46:59.330 --> 00:47:02.560
And the problem with that is
that the behavior of the system,

00:47:02.930 --> 00:47:06.230
when a buffer that's powered
by a buffer is passed into a

00:47:06.230 --> 00:47:09.620
kernel call to be written on,
is write protected,

00:47:09.620 --> 00:47:14.120
is that the kernel just fails the
system call and immediately exits

00:47:14.120 --> 00:47:16.010
with E and val or something like that.

00:47:16.490 --> 00:47:20.120
And there's--in the future,
we'll fix that,

00:47:20.170 --> 00:47:23.330
because we have a bug on the
kernel guys to give us a better

00:47:23.330 --> 00:47:25.120
interface to watching these pages.

00:47:25.120 --> 00:47:27.230
And they say, "Yeah, yeah, yeah,
"but it's not gonna be done in

00:47:27.230 --> 00:47:31.120
time for Jaguar." So the symptom
of the behavior to look out for is,

00:47:31.120 --> 00:47:33.120
you know, if you are running and
watching a variable,

00:47:33.120 --> 00:47:35.750
and all of a sudden something like
a read thing or a system call starts

00:47:35.850 --> 00:47:39.650
failing for no apparent reason,
then it's probably because

00:47:39.650 --> 00:47:42.120
it's on the same page as the
variable you're watching.

00:47:42.120 --> 00:47:46.200
And there's not really much you can
do about that unless you can manage to

00:47:46.200 --> 00:47:48.120
sort of move the variable off that page.

00:47:48.230 --> 00:47:52.120
And if it's a memory stomping bug,
you're probably not in a good shape,

00:47:52.170 --> 00:47:54.960
'cause, you know, you'll move it,
and then the bug won't

00:47:54.960 --> 00:47:56.120
happen and so on and so on.

00:47:56.120 --> 00:47:59.100
That's the limitation.

00:47:59.120 --> 00:48:02.090
So then the next topic
is kernel debugging.

00:48:02.140 --> 00:48:04.720
So this is the way
that you debug keks or,

00:48:04.720 --> 00:48:06.960
you know,
if you're a Darwin developer and you

00:48:06.960 --> 00:48:10.120
want to--or you're just interested in
poking around at what the kernel's doing,

00:48:10.120 --> 00:48:13.110
this is how you would
do kernel debugging.

00:48:13.120 --> 00:48:15.120
It's a two-machine solution.

00:48:15.120 --> 00:48:20.120
There is a stub, an agent in the kernel,
which if you do command-power-button,

00:48:20.140 --> 00:48:24.290
or there's--and on the Darwin site,
there's instructions also for

00:48:24.350 --> 00:48:27.120
how to write a little user-level
program that'll drop you down

00:48:27.120 --> 00:48:30.120
into the kernel debugging stub.

00:48:30.120 --> 00:48:33.120
And so then the target
machine is sitting there,

00:48:33.120 --> 00:48:35.950
and the little kernel monitor is waiting.

00:48:36.200 --> 00:48:39.120
And then on another machine,
you start up GDB,

00:48:39.120 --> 00:48:44.120
and you tell it to attach to the machine
that has the kernel stub waiting for it.

00:48:44.120 --> 00:48:47.410
And then they carry on this conversation,
and that's how you control the

00:48:47.420 --> 00:48:50.120
machine that you're kernel debugging.

00:48:50.120 --> 00:48:54.120
When you're sitting on the machine
that you have GDB running on,

00:48:54.120 --> 00:48:56.450
you don't know that you're
talking to the kernel that's

00:48:56.450 --> 00:48:58.120
controlling the whole machine.

00:48:58.120 --> 00:49:02.120
It just looks like an ordinary program,
as far as you're concerned.

00:49:02.120 --> 00:49:05.080
You're just looking at the
variables and looking at the stack.

00:49:05.160 --> 00:49:07.110
There's no different experience there.

00:49:07.120 --> 00:49:09.120
There are a couple things, of course,
you know.

00:49:09.120 --> 00:49:12.120
If you actually happen to really,
really lock up the kernel,

00:49:12.120 --> 00:49:14.740
then you're gonna lock
up the debugging agent,

00:49:14.740 --> 00:49:17.120
too,
and then it won't talk to you anymore,

00:49:17.120 --> 00:49:19.120
and you'll get a KDP timeout,
and things will go bad.

00:49:19.120 --> 00:49:21.120
And there's really nothing
much you can do about that.

00:49:21.120 --> 00:49:25.120
And then your little piece of
knowledge that you got from that was,

00:49:25.120 --> 00:49:27.070
"Wow, I really managed to mess the
kernel up," so... I don't know.

00:49:27.470 --> 00:49:31.370
The couple of things,
you used to be able to have to

00:49:31.480 --> 00:49:37.860
specify the IP address only by number,
but we fixed the kernel,

00:49:37.860 --> 00:49:42.850
the KDP protocol, so that it does ARP,
or the kernel monitor stub, rather,

00:49:42.850 --> 00:49:45.720
so it does ARP requests now,
so that you can actually

00:49:45.730 --> 00:49:48.660
go through routers and use
names and so on and so forth.

00:49:48.760 --> 00:49:50.420
So that's a little bit more convenient.

00:49:50.480 --> 00:49:53.780
And then the other thing which we've
added to the KDP is the ability

00:49:53.870 --> 00:49:58.160
to detach from a session and then
reattach from another machine.

00:49:58.160 --> 00:50:02.120
And that can be useful, you know,
if you were the first person who attached

00:50:02.120 --> 00:50:05.730
when the machine was panicked or when
your kex was doing something funny,

00:50:05.900 --> 00:50:09.560
and you were just completely confused,
you had no idea what was going on,

00:50:09.730 --> 00:50:12.260
and you wanted Fred to look at it,
but you didn't want Fred to come

00:50:12.260 --> 00:50:14.440
and take your machine and have
to sit in front of it for hours,

00:50:14.460 --> 00:50:18.080
then you could detach and then
Fred can attach from another machine.

00:50:18.080 --> 00:50:18.640
And that's a little bit more convenient.

00:50:18.640 --> 00:50:20.100
And then continue the debugging session.

00:50:20.100 --> 00:50:21.800
So that's sometimes convenient.

00:50:21.800 --> 00:50:26.900
And the good resource for the
kernel debugging in kex is this,

00:50:27.010 --> 00:50:30.900
on your system,
the HTML page that's there.

00:50:33.600 --> 00:50:37.600
So kind of the past couple of years,
and we say advanced features,

00:50:37.600 --> 00:50:41.000
this is really the little
tidbit of something kind of cool

00:50:41.000 --> 00:50:42.240
and gross you can do in GDB.

00:50:42.240 --> 00:50:45.060
That's a better name for this section.

00:50:45.070 --> 00:50:49.200
Last year we showed using breakpoint
commands to do kind of a ham-fisted

00:50:49.200 --> 00:50:53.260
version of the really great stuff
that the event points that they

00:50:53.260 --> 00:50:55.390
were showing in Code Warrior.

00:50:55.400 --> 00:50:58.240
And so this year I'll do
something a little different.

00:50:58.240 --> 00:51:00.740
So I want to talk about the
expression evaluator first of all,

00:51:00.740 --> 00:51:04.960
'cause when using GDB that's the
thing that you use most often to look

00:51:04.960 --> 00:51:06.680
at what's going on in your program.

00:51:06.740 --> 00:51:08.980
I want to talk about the
fact that there is a teeny,

00:51:08.980 --> 00:51:12.040
teeny, teeny, tiny little interpretive
language sitting in GDB.

00:51:12.040 --> 00:51:14.840
Don't stress it too hard or it will
fall over and kick its feet in the air,

00:51:14.840 --> 00:51:16.760
but it can be useful for some things.

00:51:16.950 --> 00:51:21.140
And then once you've gotten something
really clever that you've managed to do,

00:51:21.140 --> 00:51:24.220
you can actually make user-defined
commands to encapsulate that

00:51:24.330 --> 00:51:27.300
knowledge and not have to type it
in again and get it wrong and so on.

00:51:27.300 --> 00:51:29.540
So the first thing is
the expression evaluator.

00:51:29.540 --> 00:51:34.040
When you're in GDB,
pretty much any of the commands that

00:51:34.040 --> 00:51:37.050
take something that you can operate on,
you know,

00:51:37.180 --> 00:51:41.910
print commands or call commands or the
thing that you pass to a break point,

00:51:42.080 --> 00:51:45.430
to the break command or the thing
you pass to the watch command,

00:51:45.440 --> 00:51:49.230
all that goes through an expression
evaluator to figure out what thing

00:51:49.240 --> 00:51:51.740
you wanted to pay attention to.

00:51:51.840 --> 00:51:55.490
The expression evaluator
can call functions.

00:51:55.540 --> 00:51:58.340
If you call functions,
the functions change state.

00:51:58.340 --> 00:52:02.450
It basically just evaluates whatever
string you gave it as though it

00:52:02.470 --> 00:52:05.640
were an expression being compiled
in the current source language,

00:52:05.720 --> 00:52:08.440
that is the source language of
the currently selected frame.

00:52:08.440 --> 00:52:10.140
So, you know,
as you go up and down the frame,

00:52:10.140 --> 00:52:12.840
you might change from
C++ to C to Objective-C.

00:52:12.950 --> 00:52:15.840
And depending on the scope that
you're currently focused on,

00:52:15.840 --> 00:52:18.190
it'll evaluate it there.

00:52:18.310 --> 00:52:22.780
One thing that's kind of convenient
is that you can store away the results

00:52:22.910 --> 00:52:27.830
of a given expression in a convenience
variable and then refer to it later.

00:52:27.840 --> 00:52:29.440
So these are the evaluated results.

00:52:29.440 --> 00:52:32.140
So, like, if you're like me,
you can never remember anything

00:52:32.140 --> 00:52:33.300
for more than five minutes.

00:52:33.420 --> 00:52:36.470
You know, you can say, like,
the second line there at

00:52:36.470 --> 00:52:40.340
the bottom set $oldval to,
you know, some horrible expression,

00:52:40.350 --> 00:52:42.690
and then I don't have to
remember that it was five.

00:52:42.740 --> 00:52:44.440
You know, and ten minutes later,
I can say,

00:52:44.440 --> 00:52:49.020
"What was oldval again?" I can say,
"Print $oldval," and it'll remind me.

00:52:49.140 --> 00:52:50.840
So,
and I don't have to scroll up and down

00:52:50.840 --> 00:52:52.340
in the terminal and stuff like that.

00:52:52.450 --> 00:52:53.310
So that's useful.

00:52:53.400 --> 00:52:56.240
And the first example is the
example of just calling a function.

00:52:56.240 --> 00:53:01.100
The one thing about the call example
that's worth noting is that because

00:53:01.100 --> 00:53:05.840
of some of the calling conventions and
because basically calling a function with

00:53:06.250 --> 00:53:09.670
structure returns that you didn't expect
to return a structure is gonna corrupt

00:53:09.670 --> 00:53:13.720
your program in ways that you'll find
out kind of a long way down the line,

00:53:13.840 --> 00:53:17.690
we're a little bit fascistic about
not calling functions on your behalf

00:53:18.080 --> 00:53:19.830
unless we know the return types.

00:53:19.840 --> 00:53:22.860
So if it's a system function,
we actually don't have enough

00:53:22.860 --> 00:53:26.340
information to know the return types,
so you're gonna have to provide them.

00:53:26.360 --> 00:53:31.880
One thing that we fixed in the
Jaguar GDB and also in the April tool

00:53:32.180 --> 00:53:36.240
CD is that if you're calling a
function which is going to return--

00:53:36.240 --> 00:53:41.370
If you write it one of these typical
Objective-C expressions where,

00:53:41.400 --> 00:53:45.740
you know, you have some method call
that returns some object,

00:53:45.740 --> 00:53:48.740
and then you're gonna call a method
on that which returns an object,

00:53:48.740 --> 00:53:51.240
and then you're gonna call a method
on that which returns an object,

00:53:51.240 --> 00:53:53.680
in that case,
we parse it and we look and we say,

00:53:53.750 --> 00:53:55.980
"Okay, okay, okay,
it would be really annoying if we

00:53:55.980 --> 00:54:00.160
didn't assume that this was an id,
so we're gonna assume it's an ID for

00:54:00.340 --> 00:54:03.640
you and you won't have to put that in,"
which you actually used to have to do.

00:54:03.640 --> 00:54:05.640
That was quite annoying.

00:54:05.640 --> 00:54:07.140
So anyway, that one's better.

00:54:07.140 --> 00:54:08.830
But of course, you know,
if you called one that

00:54:08.830 --> 00:54:11.800
returned a structure instead,
well, we trusted you and you

00:54:11.800 --> 00:54:13.140
just crashed your program.

00:54:13.140 --> 00:54:14.990
So, sorry.

00:54:15.500 --> 00:54:20.140
Okay, so as I say,
there is this little-- actual sort

00:54:20.140 --> 00:54:24.590
of command interpreter that has
more than just print and stuff.

00:54:24.670 --> 00:54:27.140
It actually has a couple
of control constructs.

00:54:27.140 --> 00:54:30.040
And with these, you can get yourself
into a lot of trouble.

00:54:30.050 --> 00:54:32.010
Sometimes you can do good.

00:54:32.080 --> 00:54:36.040
So the two that it has actually
are-- there's a while command

00:54:36.040 --> 00:54:38.040
and there's an if command.

00:54:38.040 --> 00:54:40.310
So I just wanted to show
you a little example that

00:54:40.310 --> 00:54:41.970
I use all the time for these.

00:54:42.040 --> 00:54:44.030
So this is the syntax.

00:54:44.110 --> 00:54:46.040
It's pretty straightforward.

00:54:46.040 --> 00:54:50.040
So the example is that, you know,
since I work on a kind of an old program,

00:54:50.080 --> 00:54:53.040
I have this program that's
just full of linked lists.

00:54:53.040 --> 00:54:56.310
And so, for instance,
there's linked lists that store

00:54:56.650 --> 00:55:02.930
every single .o file that there is
record of in the entire executable

00:55:02.940 --> 00:55:05.080
that GDB happens to be looking at,
which is hundreds and

00:55:05.090 --> 00:55:05.940
hundreds and hundreds.

00:55:06.010 --> 00:55:09.940
And so paging through those is
just a royal pain in the neck.

00:55:09.970 --> 00:55:11.930
So, you know,
suppose you have something like this.

00:55:11.940 --> 00:55:13.940
You have this structure
linked list and some data,

00:55:14.100 --> 00:55:15.940
and it always has a pointer to next,
okay?

00:55:16.030 --> 00:55:19.940
And, you know, there are 2,000 of these,
and you want to print them out.

00:55:19.960 --> 00:55:22.710
Even in a GUI debugger,
this is a real pain because, you know,

00:55:22.710 --> 00:55:26.120
even if you have a cinema display,
you end up tabbing so far over when

00:55:26.120 --> 00:55:30.430
you turn them out that-- and then
you're scrolling back and-- there's no

00:55:30.440 --> 00:55:32.840
better way to print them out than that.

00:55:32.860 --> 00:55:36.800
You can use the same technique that
I'm going to show you for OO things.

00:55:36.840 --> 00:55:38.800
Basically,
you just need to have a way to get next.

00:55:38.840 --> 00:55:40.780
And in GDB, you can call functions.

00:55:40.860 --> 00:55:44.040
So if you have some collection
class that's a nice OO collection

00:55:44.040 --> 00:55:45.670
class or something like that,
as long as you can

00:55:45.770 --> 00:55:48.750
call the next function,
you can use the same little trick.

00:55:48.880 --> 00:55:52.840
The only problem with this is that
you can't create C++ objects from

00:55:52.840 --> 00:55:56.110
the debugger because the runtime
knows the magic of how to do the

00:55:56.190 --> 00:55:59.730
malloc that's appropriate for what
the real class is and all that stuff.

00:55:59.740 --> 00:56:01.740
And we haven't been able
to do that in GDB yet.

00:56:01.740 --> 00:56:05.730
So if you have some class which is only
iteratable by having an iterator object,

00:56:05.740 --> 00:56:06.740
well, you're out of luck.

00:56:07.500 --> 00:57:52.100
[Transcript missing]

00:57:53.280 --> 00:57:56.260
So then the next thing is what if
you're hunting for a particular thing?

00:57:56.430 --> 00:58:00.580
So you can use the if construct
to hunt for a particular thing.

00:58:00.720 --> 00:58:04.950
So in this case, I want the one where
sumData is equal to 5.

00:58:04.950 --> 00:58:07.500
So I just changed this little example.

00:58:07.500 --> 00:58:10.530
So inside the while loop,
I only do my little reporting

00:58:11.040 --> 00:58:14.700
if this dollar pointer goes
to sumData is equal to 5.

00:58:14.700 --> 00:58:17.970
So, you know, again,
this is really the expressions

00:58:17.970 --> 00:58:21.940
that you pass to GDB really are the
native expressions in your language.

00:58:21.940 --> 00:58:25.950
You can get at anything that you
could have written in the C program

00:58:25.950 --> 00:58:29.930
and evaluate it and see its value,
which is pretty powerful.

00:58:30.300 --> 00:58:35.020
Again, rummaging through more complex
collections like NSDictionary's or

00:58:35.020 --> 00:58:39.360
arrays or NSArrays or whatever,
as long as you have a way to do next,

00:58:39.360 --> 00:58:43.800
you know, you can use this trick
to go through them.

00:58:44.800 --> 00:58:46.260
And then finally,
I'm not going to type this thing

00:58:46.260 --> 00:58:47.860
every time because I get it wrong.

00:58:48.000 --> 00:58:50.490
You do something really,
really stupid like you forget set

00:58:50.590 --> 00:58:53.830
$pointer=$pointer goes to next and
then it just goes off in the weeds

00:58:54.020 --> 00:58:57.100
spinning around forever and ever and
ever and you look embarrassed and stuff.

00:58:57.100 --> 00:59:00.710
So in order to avoid having to do that,
what I'd like to do is take

00:59:00.740 --> 00:59:05.940
this and actually put it into
some script that I can reuse.

00:59:06.140 --> 00:59:08.590
That's what the user-defined
commands are for.

00:59:08.760 --> 00:59:12.660
Define is the GDB command that
defines a user-defined command.

00:59:12.850 --> 00:59:14.820
You can even pass arguments into them.

00:59:14.820 --> 00:59:18.360
If you notice in this case,
I took the exact example from before,

00:59:18.420 --> 00:59:20.760
and the only thing I changed
was that instead of saying,

00:59:20.760 --> 00:59:24.060
you know, if $pointer goes to
sum data is equal to 5,

00:59:24.060 --> 00:59:27.960
in the if test, I checked against $arg0.

00:59:27.960 --> 00:59:32.360
So that's the name for all the variables,
$arg0, $arg1, and so on and so forth.

00:59:32.360 --> 00:59:35.580
So I can write a little general command
which goes hunting through a list and

00:59:35.680 --> 00:59:37.140
finds a particular element for me.

00:59:37.180 --> 00:59:38.160
Huh.

00:59:38.160 --> 00:59:39.160
It's useful to have around.

00:59:39.160 --> 00:59:42.740
And if you do these kind of
things and keep them-- and find

00:59:43.030 --> 00:59:45.440
things that are useful to you,
you can put them either

00:59:45.440 --> 00:59:47.700
in your .gdb init file,
so that will get read in

00:59:47.700 --> 00:59:51.860
automatically when you start up GDB,
or you can put it in some other file,

00:59:51.860 --> 00:59:54.940
and then GDB has a source command
that you can use to bring in those.

00:59:54.960 --> 00:59:59.030
So the Darwin guys, for instance,
have a huge set of macros for kernel

00:59:59.160 --> 01:00:03.250
debugging which grab around and find,
you know, all the-- I mean,

01:00:03.250 --> 01:00:06.500
decode all of the kernel data
structures to show you what all

01:00:06.500 --> 01:00:09.020
the stacks are and what all the
threads are and so on and so forth.

01:00:09.070 --> 01:00:12.060
And if you want to figure out how you can
really get yourself in trouble with this,

01:00:12.060 --> 01:00:14.050
I think that's in the Darwin repository.

01:00:14.060 --> 01:00:18.560
You can look it up, and there's just lots
of gross stuff in there.

01:00:18.560 --> 01:00:22.810
Okay, so now let me bring Dave up,
and he will close off.

01:00:29.330 --> 01:00:31.750
So thanks very much, Jim.

01:00:32.020 --> 01:00:36.110
So you've seen a lot throughout
the week about good tools from both

01:00:36.110 --> 01:00:38.240
Apple and MetroWorks and other vendors.

01:00:38.240 --> 01:00:42.150
On our side, we're doing a lot of work to
try to improve the debugging

01:00:42.150 --> 01:00:43.380
support in Project Builder.

01:00:43.380 --> 01:00:45.420
Please send us your feedback.

01:00:45.420 --> 01:00:49.660
And there's a lot of
documentation on the system.

01:00:49.660 --> 01:00:51.700
Jim mentioned the GDB documentation.

01:00:51.700 --> 01:00:55.860
I'd also like to highlight the Maco
runtime manual that's new in the

01:00:55.970 --> 01:00:58.330
current releases that you've got.

01:00:58.830 --> 01:01:02.020
It's a preliminary version that's
going to get fleshed out more.

01:01:02.020 --> 01:01:07.740
And standard information
for further info.

01:01:07.740 --> 01:01:11.590
And let's just go right on into
bringing Godfrey back up so

01:01:11.590 --> 01:01:13.560
we can get to Q&A real fast.

01:01:16.550 --> 01:01:18.330
On my way, Dave.

01:01:18.340 --> 01:01:18.820
All right.

01:01:19.060 --> 01:01:23.450
So mailing list addresses,
feedback addresses.