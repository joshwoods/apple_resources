WEBVTT

00:00:01.580 --> 00:00:02.840
Good afternoon.

00:00:02.840 --> 00:00:07.600
I'd like to welcome you to session 814,
Kerberoos in Mac OS X.

00:00:07.720 --> 00:00:11.160
My name's Tom Weier from
developer relations.

00:00:11.240 --> 00:00:16.000
I've probably seen many of you in
a variety of sessions thus far.

00:00:16.000 --> 00:00:20.390
I have the distinction of being
able to introduce a session that

00:00:20.390 --> 00:00:24.700
in many ways has been a personal
crusade for quite some time.

00:00:24.700 --> 00:00:28.070
And it's good to see that
with each passing year,

00:00:28.070 --> 00:00:31.480
the adoption of Kerberoos
within Apple OS X,

00:00:31.480 --> 00:00:31.480
it's been a personal crusade.

00:00:31.500 --> 00:00:34.800
And in the shipping,
OS has improved year after year.

00:00:34.800 --> 00:00:40.060
So with that,
I'd like to introduce John Hurley,

00:00:40.060 --> 00:00:45.010
the security policy architect at Apple.

00:00:50.790 --> 00:00:52.110
Thanks, Tom.

00:00:52.360 --> 00:00:54.850
Okay, we have some great stuff
to talk about today.

00:00:54.940 --> 00:01:00.540
As Tom said, we've really been making
some great progress.

00:01:00.540 --> 00:01:05.040
So we're going to talk today
about what Kerberoos actually is,

00:01:05.040 --> 00:01:12.200
the Kerberoos authentication system,
and a little bit about how it works.

00:01:12.220 --> 00:01:15.430
Marshall is going to talk about some
of the libraries that are available

00:01:15.430 --> 00:01:20.390
to developers and how you might go
about Kerberizing your application.

00:01:22.650 --> 00:01:26.860
We're also going to tell you about
where it's used within the system.

00:01:26.860 --> 00:01:34.120
We've added a lot of things to a lot
of system services that are Kerberized.

00:01:34.120 --> 00:01:38.400
We'll tell you how you can put that into
your applications and make use of it.

00:01:40.480 --> 00:01:42.640
So what is Kerbero?

00:01:42.640 --> 00:01:46.440
Kerbero has been around for a while.

00:01:46.450 --> 00:01:56.010
It's a great setup for authenticating
users to a server and to other servers.

00:01:57.780 --> 00:02:01.650
One of the things that I wanted to
point out is the difference between

00:02:01.930 --> 00:02:04.620
authentication and authorization.

00:02:04.620 --> 00:02:09.500
Michael gave a session yesterday
about the authorization APIs,

00:02:09.500 --> 00:02:12.980
and Kerbero is an authentication system.

00:02:12.980 --> 00:02:17.140
So it's kind of proving who you are.

00:02:17.180 --> 00:02:22.400
It's a way of identifying a user
to other services on the system.

00:02:23.420 --> 00:02:28.400
It's not particularly granting
you rights to do things,

00:02:28.400 --> 00:02:31.960
although you can get service tickets
that allow you to talk to servers,

00:02:31.960 --> 00:02:33.740
and they will allow you to do things.

00:02:33.740 --> 00:02:40.700
It assumes that you have
a trusted third party,

00:02:40.700 --> 00:02:45.620
which is a server that knows
the passwords for your users,

00:02:45.620 --> 00:02:50.100
and you can talk to that server,
and you have to assume

00:02:50.140 --> 00:02:52.220
that that's trusted.

00:02:56.800 --> 00:03:01.220
Okay, so Kerbero is really
pretty widely used now.

00:03:01.220 --> 00:03:08.180
There are a lot of different areas
in technology that are using it.

00:03:08.180 --> 00:03:10.800
It's used by government,
large corporations.

00:03:13.360 --> 00:03:15.500
Very,
very widely used in higher education.

00:03:15.500 --> 00:03:19.090
That's kind of where it got its start.

00:03:19.110 --> 00:03:23.250
It's probably one of the biggest
areas where it's deployed.

00:03:23.250 --> 00:03:27.250
Certainly in Windows,
it's all over the place.

00:03:27.250 --> 00:03:30.020
The Passport service uses it.

00:03:30.020 --> 00:03:32.950
It's in Windows 2000.

00:03:32.990 --> 00:03:36.970
Kerberoos is really pretty ubiquitous.

00:03:40.200 --> 00:03:43.290
Okay, so what are some of the
reasons for using Kerbero?

00:03:43.290 --> 00:03:48.760
It does provide mutual
authentication of client and server.

00:03:48.760 --> 00:03:53.840
So it's not, for example,
like SSL or how SSL is usually used,

00:03:53.930 --> 00:03:56.060
which is just to authenticate the server.

00:03:56.060 --> 00:04:01.230
In Kerbero, you know who your server is,
and then the servers

00:04:01.230 --> 00:04:02.850
know who the clients are.

00:04:04.060 --> 00:04:09.510
It does add the ability to do a
certain amount of single sign-on.

00:04:09.510 --> 00:04:13.650
So you're providing,
the user is providing

00:04:13.650 --> 00:04:15.640
their credentials once,
their password,

00:04:15.640 --> 00:04:19.110
and then they can access other
system services without having to

00:04:19.220 --> 00:04:21.210
provide these credentials again.

00:04:21.220 --> 00:04:24.790
And that's really very nice for
the users because they're not

00:04:24.900 --> 00:04:27.300
constantly entering their passwords.

00:04:27.300 --> 00:04:34.020
And as we've Kerberized more
system services within Mac OS X,

00:04:34.060 --> 00:04:39.110
that's made it easier for
people in a Kerbero environment.

00:04:39.140 --> 00:04:43.250
So they log into the system,
and then they can access all

00:04:43.250 --> 00:04:44.340
these different services.

00:04:48.870 --> 00:04:54.440
It allows you to centralize your
authentication decisions so you have

00:04:54.530 --> 00:05:00.800
one server set up that actually knows
who your users are and it protects

00:05:00.800 --> 00:05:05.660
their passwords on that server so
they're not being sent over the network.

00:05:05.830 --> 00:05:09.790
It is possible to extend it.

00:05:14.230 --> 00:05:17.900
Okay, because the password itself
is never sent over the wire,

00:05:17.900 --> 00:05:21.640
it's really a pretty good setup.

00:05:21.640 --> 00:05:23.840
I mean,
that means that you're not going to

00:05:23.900 --> 00:05:25.930
be able to do dictionary attacks.

00:05:26.020 --> 00:05:31.430
It does assume that the server itself is
in a locked room somewhere because the

00:05:31.430 --> 00:05:33.960
passwords are actually on the server.

00:05:33.960 --> 00:05:35.690
So you want to protect that.

00:05:39.230 --> 00:05:44.250
There are Kerbero implementations for
lots and lots of different platforms.

00:05:44.320 --> 00:05:50.700
Mac OS X, Windows, Solaris,
pretty much everywhere.

00:05:50.700 --> 00:05:54.920
As I mentioned before,
it has been around for quite a long time.

00:05:55.500 --> 00:05:58.210
It's developed in the 80s.

00:05:58.210 --> 00:06:01.390
I don't know if Tom was
looking at it back then,

00:06:01.390 --> 00:06:05.230
but I know he's been thinking
about it for a long time.

00:06:08.290 --> 00:06:12.370
and the source code
for this is available.

00:06:15.240 --> 00:06:21.460
So Apple has been doing more
and more with Kerberoes.

00:06:21.510 --> 00:06:24.690
And that's largely because
we know that it's very,

00:06:24.690 --> 00:06:26.630
very important to our markets.

00:06:26.840 --> 00:06:31.250
As we mentioned,
it's very common in higher education,

00:06:31.250 --> 00:06:37.480
and that's a real key market for us.

00:06:38.350 --> 00:06:44.040
At a developer conference two years ago,
we talked about the relationship

00:06:44.040 --> 00:06:48.490
that we had with MIT,
which has been absolutely

00:06:49.100 --> 00:06:50.780
great for Apple.

00:06:50.780 --> 00:06:54.530
We've really seen lots
of progress on that,

00:06:54.530 --> 00:07:00.010
and it's really been great being
able to put that in and see that

00:07:00.100 --> 00:07:03.830
get leveraged throughout the system.

00:07:05.320 --> 00:07:09.930
This is probably a good time to
sort of provide a round of applause

00:07:09.930 --> 00:07:12.450
for Marshall and his team from MIT.

00:07:12.590 --> 00:07:15.560
They've done a fantastic
job of getting that stuff.

00:07:15.620 --> 00:07:16.910
Thank you.

00:07:22.400 --> 00:07:27.580
They've had very interesting
times working with Apple,

00:07:27.590 --> 00:07:33.230
but we've really been glad to
see this stuff moving forward.

00:07:33.240 --> 00:07:37.320
One of the other things to
mention probably at this time,

00:07:37.320 --> 00:07:44.500
too, is I think we are at the point now,
certainly one of the goals that we're

00:07:44.610 --> 00:07:49.480
trying to achieve is we're trying to
make the Kerberoes that's installed in

00:07:49.480 --> 00:07:53.110
Mac OS X to be usable out of the box.

00:07:53.120 --> 00:07:59.360
So traditionally, Kerberoes has been,
because the source code's available,

00:07:59.360 --> 00:08:03.500
particularly universities
will take it and customize it,

00:08:03.820 --> 00:08:10.330
and it's very hard to move the standard
forward there because everyone's

00:08:10.330 --> 00:08:12.830
afraid of breaking what's out there.

00:08:12.860 --> 00:08:17.490
But we really think that the version
that we have that we're shipping

00:08:17.780 --> 00:08:23.390
with Jaguar is the kind of release
where hopefully people can just set

00:08:23.470 --> 00:08:27.870
their machines up with configuration
rather than having to do lots of

00:08:27.870 --> 00:08:30.550
source changes or any source changes.

00:08:30.690 --> 00:08:33.590
That's certainly our goal,
and we're hoping that Jaguar

00:08:33.810 --> 00:08:35.530
will get us a long way there.

00:08:36.890 --> 00:08:40.580
So there's certainly a lot
of users out there already.

00:08:40.580 --> 00:08:48.600
It has shipped on OS X, 10.0,
and I think we'll see a lot more

00:08:48.610 --> 00:08:50.000
users of it as we go forward.

00:08:52.940 --> 00:08:59.050
So, talking about some of the components
that have been Kerberized in Jaguar.

00:08:59.060 --> 00:09:02.470
And I think everything we're
talking about right now is

00:09:02.540 --> 00:09:05.140
actually on the CD that you have.

00:09:06.720 --> 00:09:11.180
The base for this is Kerbero
for Mac 4.5 from MIT.

00:09:11.590 --> 00:09:16.000
So those are the libraries
that we're building on.

00:09:16.550 --> 00:09:19.620
On the client side,
some of the things that

00:09:19.710 --> 00:09:26.030
have been Kerberized,
AFP, some of the UNIX utilities,

00:09:26.030 --> 00:09:31.390
the mail application has been
Kerberized so it can talk to the mail

00:09:31.390 --> 00:09:34.220
server and use Kerbero authentication.

00:09:34.300 --> 00:09:40.960
We've also put Kerbero
authentication into the login window.

00:09:40.960 --> 00:09:44.830
We did a lot of changes
for Jaguar for login.

00:09:44.840 --> 00:09:50.240
The login window calls the
authorization API and asks for the

00:09:50.240 --> 00:09:53.960
right system.console or .login.console.

00:09:53.960 --> 00:09:59.370
If it's configured properly,
you can configure it to use

00:09:59.370 --> 00:10:03.000
Kerbero authentication to login.

00:10:03.000 --> 00:10:04.200
That credential works.

00:10:04.240 --> 00:10:10.410
The credentials you obtain then can be
used by the user throughout the session.

00:10:12.460 --> 00:10:17.960
On the server side,
we've Kerberized the AFP server,

00:10:18.220 --> 00:10:22.680
mail server, and FTP server.

00:10:22.680 --> 00:10:26.190
There are other components
that are in the works.

00:10:26.190 --> 00:10:31.910
If there are other system services
that you'd like to see Kerberized,

00:10:32.000 --> 00:10:36.200
then please let Tom Weier
know about those.

00:10:38.610 --> 00:10:44.280
Okay, so I'm going to ask Richard Murphy,
who's the manager of data security,

00:10:44.280 --> 00:10:46.980
to come up and do a demo for us.

00:10:47.000 --> 00:10:49.140
Thanks, Mark.

00:10:57.150 --> 00:10:59.420
Hi there.

00:10:59.630 --> 00:11:02.780
So, as John mentioned,
there were a lot of people that

00:11:02.780 --> 00:11:04.040
actually were working on this.

00:11:04.770 --> 00:11:07.350
Originally,
we were given the task of kind of

00:11:07.500 --> 00:11:11.710
coordinating the Kerberoos project,
both John and I.

00:11:15.290 --> 00:11:18.680
There were a lot of
people involved with that.

00:11:18.780 --> 00:11:21.580
There was Marshall and
his team out at MIT.

00:11:21.580 --> 00:11:25.440
The BSD team hired a person
specifically to do that.

00:11:25.440 --> 00:11:28.160
We got him out here,
told him all about California,

00:11:28.660 --> 00:11:31.340
and the first thing we did was we
took Nikolai and we shipped him

00:11:31.340 --> 00:11:33.260
out to Massachusetts for a winter.

00:11:33.640 --> 00:11:36.250
Great way to just win him over.

00:11:36.450 --> 00:11:38.320
Nikolai did a lot of
great work out there,

00:11:38.320 --> 00:11:45.520
helped coordinate getting builds in to
the campus and work with their team.

00:11:45.520 --> 00:11:50.030
The MIT team was great working with him
in coordinating getting builds through

00:11:50.030 --> 00:11:53.350
our builds process in a remote situation.

00:11:53.840 --> 00:11:59.420
We also had the login window
work done by the security team.

00:11:59.930 --> 00:12:02.300
Conrad Sauerwald and Gary Hu.

00:12:02.500 --> 00:12:04.100
And then there's the AFP team.

00:12:04.250 --> 00:12:12.190
Leland Wallace working on being able to
get the Apple share AFP mounts going.

00:12:12.540 --> 00:12:18.530
So my key role in this was going to
meetings week after week and going,

00:12:18.530 --> 00:12:20.380
"Is it done yet?"

00:12:21.070 --> 00:12:21.980
They knew me rather well.

00:12:22.170 --> 00:12:22.940
Are we done yet?

00:12:23.020 --> 00:12:24.620
When is this going to be done?

00:12:24.620 --> 00:12:28.570
So this last week,
everything kind of fell together.

00:12:28.570 --> 00:12:29.680
Made my whole day.

00:12:29.680 --> 00:12:30.170
So here we go.

00:12:30.280 --> 00:12:32.220
We have the login panel.

00:12:32.280 --> 00:12:35.460
What I'm going to do here is I'm going
to log into the local machine here,

00:12:35.460 --> 00:12:37.040
and I'm going to get a Kerberoes ticket.

00:12:37.040 --> 00:12:38.770
Nothing up my sleeves.

00:12:49.110 --> 00:12:49.910
And we've logged in.

00:12:50.030 --> 00:12:51.420
So what does this tell us?

00:12:51.440 --> 00:12:54.030
I'm going to bring up the Kerbero app.

00:12:54.120 --> 00:13:00.610
And you'll notice we have a
ticket granting ticket here.

00:13:07.400 --> 00:13:08.180
Okay, good.

00:13:08.240 --> 00:13:12.570
Okay, next thing, mail.

00:13:19.800 --> 00:13:20.670
I have lots of mail.

00:13:20.670 --> 00:13:23.260
We set up this demo so I would.

00:13:23.260 --> 00:13:26.340
We won't read any of it right now.

00:13:26.570 --> 00:13:27.980
And back to the Kerberoes app.

00:13:28.080 --> 00:13:29.710
Here we are, a second line.

00:13:29.720 --> 00:13:32.370
We've got the Kerberoes ticket
that actually authenticated

00:13:32.370 --> 00:13:33.600
me to the IMAP server.

00:13:36.600 --> 00:13:38.710
Okay, okay, you like that?

00:13:38.800 --> 00:13:39.480
Okay, cool.

00:13:39.480 --> 00:13:40.990
Here comes the tricky part.

00:13:48.000 --> 00:13:51.560
So I'm going to connect to a server
and we choose really wonderful

00:13:51.650 --> 00:13:54.100
names for servers around here.

00:14:10.420 --> 00:14:17.080
We have an AFP-mounted home
directory and yet another ticket.

00:14:17.080 --> 00:14:18.160
There you go, guys.

00:14:18.220 --> 00:14:19.180
It's there.

00:14:19.180 --> 00:14:19.740
It's working.

00:14:19.740 --> 00:14:22.910
So the challenge is left to you guys.

00:14:22.920 --> 00:14:24.480
When is it going to be done?

00:14:24.520 --> 00:14:26.020
Okay.

00:14:26.020 --> 00:14:26.990
Use this stuff.

00:14:27.110 --> 00:14:27.550
It's cool stuff.

00:14:27.860 --> 00:14:28.340
Take care.

00:14:38.840 --> 00:14:39.790
I'll just go ahead.

00:14:39.840 --> 00:14:40.800
Here's Marshall.

00:14:40.800 --> 00:14:41.800
Hi, all.

00:14:41.800 --> 00:14:46.800
I'm Marshall Vale from MIT.

00:14:46.900 --> 00:14:52.550
I'm the project manager for
Macintosh and Kerbero's development.

00:14:53.000 --> 00:14:56.580
Thanks to the nice demo Murph showed you,
you've seen Kerberoos in action.

00:14:56.580 --> 00:15:00.170
Let's take a look about what's
going on under the hood.

00:15:01.740 --> 00:15:06.440
Kerbero out there deployed in sites
is made up of two protocol versions,

00:15:06.470 --> 00:15:08.390
Kerbero version 4 and version 5.

00:15:08.400 --> 00:15:11.640
You may wonder what happened
to versions 1 and 2 and 3.

00:15:11.640 --> 00:15:13.850
They did in fact exist,
but never got out of the lab.

00:15:13.860 --> 00:15:18.070
Kerbero version 4 is the original
version of the Kerbero protocol.

00:15:18.180 --> 00:15:20.790
It's still widely used
in many higher ed sites.

00:15:20.870 --> 00:15:22.980
They've been using Kerbero
for probably over a decade.

00:15:22.980 --> 00:15:27.420
If you're writing a new app,
we don't suggest that

00:15:27.570 --> 00:15:30.500
you support Kerbero v4,
but only if you find that your

00:15:30.500 --> 00:15:32.110
key markets really need it.

00:15:32.160 --> 00:15:35.390
The current version of the
protocol is Kerbero version 5.

00:15:35.400 --> 00:15:39.240
It's designed to fix many of the
security deficiencies of version 4.

00:15:39.240 --> 00:15:43.860
Version 5 is what Microsoft adopted
for their version of Kerbero

00:15:43.860 --> 00:15:45.690
in Windows 2000 and XP.

00:15:45.810 --> 00:15:50.040
It's the suggested version of Kerbero
you should use in your protocols.

00:15:53.680 --> 00:15:55.710
Now we'll probably toss around,
we've already tossed around,

00:15:55.820 --> 00:15:57.100
a few acronyms for you.

00:15:57.200 --> 00:15:59.630
So let's take a review of what they are.

00:15:59.640 --> 00:16:03.310
First is a Kerberos Realm,
which defines the administrative

00:16:03.310 --> 00:16:07.060
unit that is protected by a KDC,
or Key Distribution Center.

00:16:07.060 --> 00:16:10.410
The tickets are the little
magic beasts that go around.

00:16:10.420 --> 00:16:13.800
They're the authentication tokens that
authenticate you to various services.

00:16:13.800 --> 00:16:17.100
For types of tickets,
we have two primary types of tickets.

00:16:17.160 --> 00:16:20.980
A ticket-granting ticket,
also called an initial ticket.

00:16:21.800 --> 00:16:24.090
It's used to seamlessly
get service tickets.

00:16:24.180 --> 00:16:28.460
Now the service tickets are used to
authenticate you to a particular service,

00:16:28.520 --> 00:16:31.520
such as FTP, email, printing, whatnot.

00:16:34.340 --> 00:16:37.510
The ticket training ticket, or TGT,
is also called the initial

00:16:37.590 --> 00:16:41.540
ticket because it's usually the
first ticket that a user gets.

00:16:41.650 --> 00:16:46.160
It proves that the client is allowed
to get tickets for the other services.

00:16:46.670 --> 00:16:50.590
It acts as a substitute for a password
in the sense that the TGT is presented

00:16:50.600 --> 00:16:54.800
around and allowing the user to get
the access to the other services

00:16:54.800 --> 00:16:58.040
without having to provide a separate
password to the Apple share server

00:16:58.050 --> 00:16:59.720
or the FTP server or the email server.

00:17:01.120 --> 00:17:04.750
It's also the mechanism by which
single sign-on is achieved due to the

00:17:04.780 --> 00:17:08.200
seamless acquisition of service tickets.

00:17:08.200 --> 00:17:11.550
All Kerbero tickets, including a TTT,
are only valid for a

00:17:11.550 --> 00:17:13.200
limited period of time.

00:17:13.200 --> 00:17:13.960
They expire.

00:17:13.960 --> 00:17:19.280
A typical deployment usually does them in
a work period such as eight to ten hours,

00:17:19.280 --> 00:17:24.670
although they can be shorter in some
stronger security sites or longer if you

00:17:25.150 --> 00:17:27.750
really like to work longer than that.

00:17:29.080 --> 00:17:31.800
So let's see how we get a TGT.

00:17:31.970 --> 00:17:35.970
First,
the client will ask a KDC for a TGT.

00:17:37.120 --> 00:17:40.490
Next, the KDC returns the TGT and
a session key to the client

00:17:40.490 --> 00:17:42.170
encrypted in the client's key.

00:17:46.520 --> 00:17:50.330
The client then uses the client's key,
which is the one-way hash of the

00:17:50.330 --> 00:17:53.460
password the user just entered,
to extract the TGT.

00:17:53.460 --> 00:17:56.320
You can see that there,
at no point did the password actually

00:17:56.400 --> 00:17:58.470
go over the wire in any encrypted form.

00:17:58.480 --> 00:18:02.010
And that's what brings a real
inherent level of security to

00:18:02.020 --> 00:18:04.270
the typical Kerberoos exchange.

00:18:08.140 --> 00:18:10.930
Now the service tickets are the
type of tickets used by a client

00:18:11.130 --> 00:18:15.500
to access a particular service,
an FTP mail, as I mentioned before.

00:18:15.500 --> 00:18:18.030
It contains a session key,
which is shared between

00:18:18.300 --> 00:18:21.420
the client and the server,
and can be used to subsequently

00:18:21.420 --> 00:18:24.210
encrypt the data exchanges to
make them a little more secure

00:18:24.210 --> 00:18:25.990
and not just for authentication.

00:18:26.100 --> 00:18:29.310
Like a TGT,
a service ticket also expires.

00:18:30.450 --> 00:18:33.060
So I'll see how we get a service ticket.

00:18:33.060 --> 00:18:37.300
First, the client presents a TGT to the
KDC with a request for a service ticket.

00:18:37.300 --> 00:18:43.290
The KDC returns the encrypted
service ticket to the client.

00:18:46.660 --> 00:18:50.560
and then the client uses the
TTT to extract the service ticket.

00:18:50.560 --> 00:18:55.680
From here, the client can authenticate to
the server in one of two ways.

00:18:56.170 --> 00:18:58.580
First ways with one-way authentication.

00:18:58.620 --> 00:19:01.790
Here the client presents the
service ticket to the server.

00:19:04.660 --> 00:19:07.980
The server receives the service
ticket and authenticates the client.

00:19:08.050 --> 00:19:12.220
The server can use the session
key to encrypt subsequent traffic.

00:19:12.220 --> 00:19:15.300
This is used in a variety of
some of the older protocols that

00:19:15.300 --> 00:19:18.990
aren't considered as wonderful,
such as K-pop.

00:19:19.660 --> 00:19:25.060
A better way of doing service
authentication is mutual authentication.

00:19:25.060 --> 00:19:29.390
Here the client sends a service ticket
containing the session key to the server.

00:19:32.200 --> 00:19:37.110
The server returns a response encrypted
with the session key from the service,

00:19:37.110 --> 00:19:40.730
from the service to get,
authenticating the server to the client.

00:19:41.040 --> 00:19:43.640
and like with one-way authentication,
the server may use the session

00:19:43.940 --> 00:19:45.540
key to encrypt subsequent data.

00:19:48.930 --> 00:19:51.530
So now we've seen how the
protocol works in BASIS,

00:19:51.750 --> 00:19:53.910
let's take a look at the implementation.

00:19:54.210 --> 00:19:57.460
Earlier this year,
MIT released Kerberoes for Macintosh 4.0.

00:19:57.490 --> 00:20:00.040
We've been working on this
for about a year and a half,

00:20:00.050 --> 00:20:02.600
and we were very happy to finish it.

00:20:02.620 --> 00:20:06.080
And over a year and a half,
we supported three versions of Mac OS X,

00:20:06.080 --> 00:20:07.920
all different.

00:20:10.460 --> 00:20:14.160
A pre-release version of KFM 4.0
was included in Mac OS X.

00:20:14.160 --> 00:20:18.220
That was the very first step of our
wonderful collaboration with Apple.

00:20:19.830 --> 00:20:21.950
The version number of the package,
Kerberoos for Macintosh,

00:20:22.080 --> 00:20:24.050
may be a little confusion,
but it does in fact include

00:20:24.090 --> 00:20:27.820
both Kerberoos version 4
and version 5 libraries.

00:20:27.990 --> 00:20:30.690
These libraries are available to a
variety of application environments,

00:20:30.790 --> 00:20:34.550
including Carbon, Cocoa,
and BSD command line apps.

00:20:34.960 --> 00:20:38.420
Also in KFM 4.0,
we introduced live ticket sharing

00:20:38.440 --> 00:20:43.820
between Mac OS X and classic Mac OS 9,
which was a real boon to sites as

00:20:43.820 --> 00:20:48.700
they needed to migrate their customers
and they had both classic and native

00:20:48.700 --> 00:20:51.160
applications running at the same time.

00:20:51.250 --> 00:20:54.270
This way, users on classic didn't need
to enter a password again.

00:20:54.390 --> 00:20:58.150
The tickets were automatically sent
over to classic and were kept in

00:20:58.150 --> 00:21:00.490
sync between the two environments.

00:21:01.570 --> 00:21:05.140
As was alluded in the keynote,
we're all moving on to Mac OS X,

00:21:05.140 --> 00:21:09.640
so Kerberoos for Macintosh 4.0
and 4.0 derivatives will be the

00:21:09.640 --> 00:21:12.590
last release for classic Mac OS,
Mac OS 8 and 9.

00:21:14.920 --> 00:21:18.200
As John mentioned earlier,
our new version included with Jaguar

00:21:18.250 --> 00:21:20.700
is Kerberoes for Macintosh 4.5.

00:21:20.730 --> 00:21:24.340
A big change from previous releases
is that the only way you'll be able

00:21:24.340 --> 00:21:26.840
to get this version is in the box.

00:21:26.870 --> 00:21:29.390
It will provide only as part of Jaguar.

00:21:30.230 --> 00:21:33.030
New features that we've added to
Kerberoos for Mac OS 4.5 are improved

00:21:33.030 --> 00:21:34.700
loading times and reduced memory storage.

00:21:34.760 --> 00:21:37.940
We are able to be prebounded
to the system and applications

00:21:37.940 --> 00:21:39.190
can pre-bind to us.

00:21:40.610 --> 00:21:43.890
We also have a first version of
a supportable Kerberoos v5 API,

00:21:43.890 --> 00:21:45.540
and I will touch on that later.

00:21:45.540 --> 00:21:48.430
We also have added 5-to-4 support.

00:21:48.440 --> 00:21:52.160
5-to-4 is an interesting
technology allowing you to

00:21:52.160 --> 00:21:56.040
generate version 4 credentials
in a version 5 only environment.

00:21:56.040 --> 00:22:00.030
This is predominantly in use in
sites that use the Andrew file system

00:22:00.030 --> 00:22:04.890
implementation such as OpenAFS or Arla,
which use version 4 for their

00:22:05.030 --> 00:22:06.620
inherent authentication.

00:22:07.640 --> 00:22:11.760
We've also introduced a new command
line application called kswitch,

00:22:12.030 --> 00:22:13.390
which sets the default user.

00:22:13.420 --> 00:22:15.400
First seen on Mac OS X.

00:22:16.660 --> 00:22:21.480
There will be no release of Kerberoes
for Macintosh 4.5 for Mac OS 9 or 8.

00:22:21.510 --> 00:22:24.590
But don't worry,
Classic Ticket Sharing will still work

00:22:24.700 --> 00:22:26.510
with KFM 4.0 working under Classic.

00:22:29.440 --> 00:22:32.630
The Kerberoos for Macintosh 4.5
architecture is a bit different

00:22:32.780 --> 00:22:36.480
than on other UNIXs or on Windows.

00:22:36.550 --> 00:22:39.020
It's good if you write applications
in different layers to take

00:22:39.020 --> 00:22:40.900
a look at how it all works.

00:22:40.900 --> 00:22:44.860
The top layer, we support the variety of
application environments.

00:22:44.860 --> 00:22:47.900
Natively,
we support the Mac OS application

00:22:47.950 --> 00:22:50.900
space of Carbon,
Cocoa, and BSD apps.

00:22:50.900 --> 00:22:52.800
We provide shim libraries.

00:22:52.800 --> 00:22:58.660
They are not going to
be provided by Apple.

00:22:58.790 --> 00:22:58.800
MIT is traditionally

00:22:59.160 --> 00:23:02.740
distributed them directly from MIT,
but that allows us to support

00:23:02.740 --> 00:23:05.340
CFM Carbon applications.

00:23:05.340 --> 00:23:08.520
The core library in the system is
the Kerberoos framework comprised

00:23:08.640 --> 00:23:10.200
of a multitude of libraries.

00:23:10.200 --> 00:23:12.410
There used to be all individual
and a big change in Jaguars,

00:23:12.410 --> 00:23:15.050
and they've now all been combined
down to one single library.

00:23:17.250 --> 00:23:19.260
Underneath that,
the credential cache server

00:23:19.260 --> 00:23:20.900
stores all the tickets in memory.

00:23:20.900 --> 00:23:23.200
That's a big difference from
most other UNIXs where the

00:23:23.330 --> 00:23:24.380
tickets are stored on disk.

00:23:24.570 --> 00:23:29.830
Even on UNIXs that store in memory,
we use the credential cache API suite,

00:23:29.830 --> 00:23:32.460
which is shared between Windows.

00:23:32.460 --> 00:23:35.100
This API is also available
on Windows and Mac OS 9,

00:23:35.100 --> 00:23:37.460
although Mac OS X has
got the latest version.

00:23:37.460 --> 00:23:42.140
We use Mach IPC to communicate
between the framework and the server.

00:23:42.720 --> 00:23:46.720
We also have the Kerberoos login server,
which presents the UI that allows

00:23:46.720 --> 00:23:50.740
the user to enter a username,
change the realm, and enter the password.

00:23:54.390 --> 00:23:57.600
The Kerbero version 4
libraries include Kclient 3.1.

00:23:57.750 --> 00:24:03.020
Kclient is an API for Kerbero 4 that
was invented at Cornell and became

00:24:03.020 --> 00:24:05.280
the dominant version on the Macintosh.

00:24:05.300 --> 00:24:10.220
This provides compatibility
libraries for old Kclient 1.0 APIs,

00:24:10.310 --> 00:24:14.860
including also new version 3 APIs,
which I know some applications

00:24:14.860 --> 00:24:16.310
have started to support.

00:24:16.390 --> 00:24:18.960
Underneath KClient,
we have the Cygnus Kerbero

00:24:18.960 --> 00:24:20.950
version 4 implementation.

00:24:20.950 --> 00:24:23.640
It's the last release from Cygnus
and includes a variety of changes to

00:24:23.720 --> 00:24:26.210
support the Kerbero login library.

00:24:26.400 --> 00:24:29.280
Applications can use
either API for v4 support.

00:24:29.280 --> 00:24:33.540
We strongly encourage you to use the
KClient API because it is an API.

00:24:33.540 --> 00:24:36.190
The historic v4 libraries can
be best described as a random

00:24:36.190 --> 00:24:38.720
collection of functions.

00:24:38.720 --> 00:24:42.980
Only use them if you happen to be porting
code that hasn't been changed in years.

00:24:43.070 --> 00:24:50.780
If you find that you have to write
to support v4 for your customer base,

00:24:50.780 --> 00:24:50.930
we highly encourage you
to use the KClient APIs.

00:24:53.020 --> 00:24:56.120
The Kerberos 5 implementation
in KFM 4.5 is based on

00:24:56.140 --> 00:24:59.750
MIT Kerberos v5 version 1.2.5,
which just was released

00:24:59.780 --> 00:25:00.740
a couple of weeks ago.

00:25:00.740 --> 00:25:04.620
Its primary feature for Jaguar
is our first crack at a new

00:25:04.620 --> 00:25:06.730
cross-platform API suite.

00:25:06.760 --> 00:25:11.130
Kerberos v5 has not exactly
had the best designed and

00:25:11.270 --> 00:25:14.290
cross-platform API in the world.

00:25:14.300 --> 00:25:19.030
It puts a lot of effort to try to
make sure that we have a list of

00:25:19.030 --> 00:25:22.220
APIs that we can support going forward.

00:25:22.900 --> 00:25:27.660
Right now that is in the
Jaguar builds and we've also,

00:25:27.660 --> 00:25:29.820
on Kerberos for Windows,
are using that subset.

00:25:29.900 --> 00:25:35.610
On UNIX we have declarations in the
headers for deprecated and private,

00:25:35.610 --> 00:25:39.700
although due to a lot of the legacy
apps we still have to export them.

00:25:39.700 --> 00:25:42.740
But we are moving forward
with this basis of APIs.

00:25:42.840 --> 00:25:45.160
If you find that we have
removed APIs that you may

00:25:45.160 --> 00:25:48.910
have relied on in the past,
we'd like to hear what functionality

00:25:48.930 --> 00:25:51.580
you do need so we can design
APIs that are supportable.

00:25:53.070 --> 00:25:57.760
Also in the suite is the GSS API,
the generic security service API.

00:25:57.760 --> 00:26:00.800
That is the recommended layer that
you should actually be talking to,

00:26:00.940 --> 00:26:04.000
rather than the v5 API,
to access Kerberoos 5.

00:26:04.000 --> 00:26:07.040
That actually has an
RFC with a standard API,

00:26:07.040 --> 00:26:09.000
whether you like it or not.

00:26:09.000 --> 00:26:10.960
At least standard.

00:26:11.170 --> 00:26:15.460
The general recommendation is when
you want to support Kerberoos v5,

00:26:15.460 --> 00:26:18.720
you use GSS as the API to access it.

00:26:20.700 --> 00:27:56.700
[Transcript missing]

00:27:59.660 --> 00:28:01.360
So getting back to how
the implementation works,

00:28:01.360 --> 00:28:04.160
the credential cache in the
libraries is the bottom layer

00:28:04.160 --> 00:28:05.610
where the tickets were stored.

00:28:05.860 --> 00:28:09.020
It's stored in memory as opposed to
on disk and many other platforms.

00:28:09.020 --> 00:28:13.720
This allows us to handle multiple
credential environments a lot easier.

00:28:13.720 --> 00:28:17.600
This is true of many sites out
there who have KDCs not one per

00:28:17.600 --> 00:28:22.500
environment but one per many small
units such as various colleges at a

00:28:22.500 --> 00:28:24.920
university may have their own KDCs.

00:28:24.920 --> 00:28:28.290
And a student has classes in both
environments and they need to

00:28:28.290 --> 00:28:30.380
authenticate to both to do their work.

00:28:30.820 --> 00:28:34.560
It also provides an API for accessing
the core v4 and v5 credentials.

00:28:34.560 --> 00:28:38.580
So if you happen to be writing a tool
like the Kerbero app that needs direct

00:28:38.620 --> 00:28:41.390
manipulation of the credentials,
you would write to the

00:28:41.390 --> 00:28:42.310
credential cache API.

00:28:44.470 --> 00:28:48.540
The Kerbero's login library is a very
powerful and special library in Mac OS X.

00:28:48.540 --> 00:28:52.050
It simplifies the process
of acquiring TGTs,

00:28:52.050 --> 00:28:56.520
allows you to destroy all the tickets
and acquire tickets with a single call,

00:28:56.540 --> 00:28:59.380
and most importantly,
it transparently handles

00:28:59.380 --> 00:29:03.440
acquisition of v4 and v5 tickets
no matter what the site has.

00:29:03.440 --> 00:29:08.030
It determines based on the configuration
file whether the site supports v4 or

00:29:08.030 --> 00:29:12.680
v5 or both and handles acquiring them
seamlessly for you so you don't have

00:29:12.850 --> 00:29:14.620
to worry about what the site uses.

00:29:14.710 --> 00:29:20.190
It has also an API for adjusting
the login library dialogue options.

00:29:20.200 --> 00:29:23.140
Applications used in this tend to be
things like KNIT or a login window or,

00:29:23.180 --> 00:29:24.750
for example, a screensaver.

00:29:26.960 --> 00:29:31.280
That's not an announcement.

00:29:31.280 --> 00:29:33.650
Other libraries in the
implementation include ComAir,

00:29:33.710 --> 00:29:37.350
which is how you access error
codes in the Kerberos environment,

00:29:37.350 --> 00:29:39.080
and the Profile Library.

00:29:39.080 --> 00:29:43.160
This is the API which you use
to read information contained in

00:29:43.160 --> 00:29:47.490
the Kerberos configuration file,
such as library defaults

00:29:47.490 --> 00:29:49.420
and Realm information.

00:29:53.320 --> 00:29:57.000
The Kervos application is
a special tool for UI for

00:29:57.000 --> 00:30:01.820
obtaining and destroying listing,
displaying information about the tickets.

00:30:01.820 --> 00:30:03.300
It's good for debugging.

00:30:03.300 --> 00:30:08.590
It allows the user to see how long
their tickets are going to last for.

00:30:08.590 --> 00:30:12.310
The application changes
when it's in the dock.

00:30:12.310 --> 00:30:14.360
It provides a dock menu.

00:30:14.360 --> 00:30:18.740
Also allows settings for
defaults in the login library.

00:30:18.740 --> 00:30:20.950
You may notice on your Jaguar
CDs that it is not included.

00:30:20.960 --> 00:30:23.410
If you would like to see
this included in Jaguar,

00:30:23.420 --> 00:30:27.040
we recommend you send a gentle and
calm email to Apple suggesting that

00:30:27.160 --> 00:30:30.310
or give it to various feedback forms.

00:30:32.310 --> 00:30:35.420
So now we've seen a bit
about how Kerberos works.

00:30:35.600 --> 00:30:37.660
How do we Kerberize an application?

00:30:37.680 --> 00:30:38.850
It's awfully simple.

00:30:39.000 --> 00:30:41.360
Find the protocol specification.

00:30:41.360 --> 00:30:42.650
RFCs are the best place to look.

00:30:42.830 --> 00:30:46.850
There are also a few protocols
that are de facto standards.

00:30:47.380 --> 00:30:48.740
Determine which API you're going to use.

00:30:48.890 --> 00:30:52.800
This may be determined by your market,
whether you want to support v4 or v5,

00:30:52.800 --> 00:30:56.940
or it's determined in the spec,
including K-client or GSS.

00:30:58.830 --> 00:31:01.760
You need to figure out how to connect
the Kerbero APIs to the protocol.

00:31:01.760 --> 00:31:06.780
This usually means that the data returned
by the Kerbero APIs need to be massaged

00:31:06.780 --> 00:31:08.700
into a form for the internet protocol.

00:31:11.310 --> 00:31:12.860
So let's take a look at FTP.

00:31:12.900 --> 00:31:15.040
It's one of the nicest to look
at because it has good standard

00:31:15.040 --> 00:31:18.360
RFCs for both v4 and v5.

00:31:19.280 --> 00:31:24.550
The standard for supporting with v5
is though via GSS and on Mac OS X and

00:31:24.870 --> 00:31:28.770
Mac OS we suggest using KClient
for your v4 support as KClient

00:31:28.770 --> 00:31:32.400
over the base v4 APIs has better
support for multiple sessions.

00:31:36.080 --> 00:31:41.240
To support v4, you follow a generic
process for Kerberoos.

00:31:41.350 --> 00:31:45.340
First,
you want to set up a new client session.

00:31:47.220 --> 00:31:49.510
Then you want to do
authenticate for the service.

00:31:49.510 --> 00:31:52.760
You do that with Kclient
getAuthenticatorForService.

00:31:52.760 --> 00:31:57.020
Then you want to, for mutual auth,
you call Kclient verify protected service

00:31:57.020 --> 00:32:00.040
reply to check the reply from the server.

00:32:00.060 --> 00:32:03.260
FTP, Kerberos FTP,
supports encryption of the data stream.

00:32:03.260 --> 00:32:07.020
User can actually toggle
it on and off on the fly.

00:32:07.020 --> 00:32:10.390
This we use Kclient encrypt and Kclient

00:32:10.750 --> 00:32:13.510
And then the way, in this example,
we're connecting the API to the

00:32:13.630 --> 00:32:15.260
protocol is through base64 encoding.

00:32:15.260 --> 00:32:19.610
That's a very common way of connecting
Kerberoos to base internet protocols.

00:32:21.670 --> 00:32:24.540
GSS API, we had to call,
you can see different folks

00:32:24.750 --> 00:32:26.720
designed the different APIs.

00:32:26.720 --> 00:32:31.120
We call GSS init set context to do
the session management authentication.

00:32:31.120 --> 00:32:35.950
Encryption and decryption is
through GSS wrap and GSS unwrap.

00:32:36.010 --> 00:32:38.580
Just like with v4,
connecting the API to the protocol

00:32:38.830 --> 00:32:41.110
is through base64 encoding.

00:32:44.280 --> 00:32:45.910
So, how do you get started
Kerberizing your apps?

00:32:45.910 --> 00:32:51.160
Well, start with Kerberos for Macintosh
4.5 provided in your Jaguar CDs.

00:32:51.160 --> 00:32:55.070
It's a development version,
but it's very good and stable.

00:32:55.880 --> 00:32:57.890
Use the online resources,
web documentation,

00:32:57.890 --> 00:32:59.740
extensively on the mailing lists also.

00:32:59.740 --> 00:33:00.700
You'll get a lot of help.

00:33:00.930 --> 00:33:02.880
And there's even a news group out there,
too.

00:33:07.080 --> 00:33:08.160
Reporting bugs.

00:33:08.160 --> 00:33:10.320
Some subtle differences here.

00:33:10.320 --> 00:33:13.460
If you have bugs about KFM 4.0,
send it to MIT.

00:33:13.620 --> 00:33:16.040
Address is listed there.

00:33:16.210 --> 00:33:18.670
curb5-bugs@mit.edu.

00:33:18.670 --> 00:33:20.810
However,
if you have bugs you want to report

00:33:20.870 --> 00:33:24.850
against the Kerberoes in Jaguar,
please report them to Apple.

00:33:24.940 --> 00:33:28.190
Many of the mailing lists
involving Kerberoes out there

00:33:28.220 --> 00:33:29.590
tend to be open in public.

00:33:29.590 --> 00:33:32.990
You're not supposed to be
commenting about Jaguar until it's

00:33:32.990 --> 00:33:35.110
released in the open in public.

00:33:35.170 --> 00:33:35.980
Please report them to Apple.

00:33:35.980 --> 00:33:39.140
That also helps Apple prioritize
what things we need to fix and what

00:33:39.140 --> 00:33:40.650
things we need to roll out to you.

00:33:44.730 --> 00:33:48.430
So for more information, a list of URLs.

00:33:48.540 --> 00:33:52.720
The predominant place you might want
to get on if you would like help in

00:33:52.720 --> 00:33:54.840
Kerbero is the Kerbdev mailing list.

00:33:54.840 --> 00:33:55.890
They're listed at the bottom.

00:33:56.130 --> 00:33:57.850
Send mail to kerbdev-request.

00:33:57.940 --> 00:34:00.720
Unlike last year,
we finally automated this so

00:34:00.790 --> 00:34:03.610
it's not just a human reading it.

00:34:03.650 --> 00:34:05.890
If you want to contact the
development team privately,

00:34:06.010 --> 00:34:09.220
if you're considering Kerberizing your
application and you don't want messages

00:34:09.330 --> 00:34:13.020
going out to everyone and their friends,
you can contact the Mac Dev team

00:34:13.060 --> 00:34:14.920
directly at macdev@mit.edu.

00:34:18.190 --> 00:34:21.200
Good place for hunting down internet
RFCs to find out what already has

00:34:21.200 --> 00:34:25.390
a Kerberized protocol standard.

00:34:25.390 --> 00:34:25.390
This is there at the IETF.

00:34:25.580 --> 00:34:26.500
and Microsoft.

00:34:26.500 --> 00:34:31.580
There's the URL for Microsoft document
describing GSS with SSPI.

00:34:31.580 --> 00:34:35.900
All of these URLs will be
published by Apple someplace,

00:34:35.900 --> 00:34:38.120
I believe, on the web.

00:34:38.170 --> 00:34:42.340
And Comp's protocols Kerbero is also
gateway with Kerbero@mit.edu and actually

00:34:42.340 --> 00:34:46.310
really doesn't have anything talking
about the protocol much these days.

00:34:46.310 --> 00:34:48.760
Mostly application usage
and programming issues.

00:34:48.860 --> 00:34:52.690
But if you prefer using a news
reader instead of an email client,

00:34:52.690 --> 00:34:54.100
you can still hang out

00:34:55.370 --> 00:34:59.990
If you have any questions concerning
Apple's use of Kerbero in Mac OS X,

00:34:59.990 --> 00:35:02.100
you can contact Tom Weier.

00:35:02.150 --> 00:35:06.320
If you have questions pertaining
to the Kerbero itself in Jaguar,

00:35:06.320 --> 00:35:09.440
you can contact myself or Mac Dev.

00:35:09.480 --> 00:35:12.520
And if you have any questions
about security other than Kerbero,

00:35:12.520 --> 00:35:13.610
you can contact Craig Keithley.