WEBVTT

00:00:01.310 --> 00:00:04.400
Ladies and gentlemen,
please welcome Java platform

00:00:04.400 --> 00:00:07.790
engineer Scott Adler.

00:00:11.020 --> 00:00:12.800
Good afternoon.

00:00:12.850 --> 00:00:15.140
So, I'm Scott Adler.

00:00:15.140 --> 00:00:17.000
I'm from the Java Platform Classes team.

00:00:17.000 --> 00:00:20.490
And today we're going to talk
about the Java Platform and just a

00:00:20.490 --> 00:00:22.990
general overview of what's in it.

00:00:23.810 --> 00:00:26.120
So what we're going to
actually talk about today.

00:00:26.200 --> 00:00:28.580
First is an overview
of the Java 2 platform.

00:00:28.740 --> 00:00:30.760
I'm not sure how many of you
are actually familiar with it,

00:00:30.830 --> 00:00:32.530
but we're going to talk a
little bit about what's in

00:00:32.540 --> 00:00:33.740
the Java 2 platform itself.

00:00:33.750 --> 00:00:36.470
Then some of the
Mac OS X integration issues,

00:00:36.470 --> 00:00:40.840
things that you can do to actually make
your integration with Mac OS X when

00:00:40.840 --> 00:00:45.260
you're doing a Java 2 application,
make that experience better.

00:00:45.780 --> 00:00:47.900
We're also going to talk a little
bit about where you can find all

00:00:47.900 --> 00:00:49.220
the documentation for this stuff.

00:00:49.290 --> 00:00:53.780
And then finally we're going to talk
about the Java 2 Standard edition version

00:00:53.780 --> 00:00:58.260
1.4 and the features that are in that
and the things that you'll be able to

00:00:58.260 --> 00:01:01.260
take advantage of when we get to 1.4.

00:01:02.440 --> 00:01:04.290
So you see this slide a lot.

00:01:04.640 --> 00:01:09.720
This is the slide that
is the Apple frameworks,

00:01:09.720 --> 00:01:09.720
and...

00:01:10.860 --> 00:01:12.730
Java is one of the
frameworks that we have.

00:01:12.840 --> 00:01:15.690
Now, there's a little bit of confusion
when people talk about Java.

00:01:15.690 --> 00:01:18.740
And this has been from the very
beginning of Java that the word

00:01:18.740 --> 00:01:21.410
Java means probably 600 different things.

00:01:21.470 --> 00:01:22.450
It means coffee.

00:01:22.450 --> 00:01:23.710
It means a language.

00:01:23.760 --> 00:01:24.850
It means a framework.

00:01:24.850 --> 00:01:27.760
It means the beginning of this weird
language called JavaScript that

00:01:27.870 --> 00:01:29.130
has nothing to do with Java.

00:01:29.300 --> 00:01:32.900
There's like all these things that
are the meaning of the word Java.

00:01:32.900 --> 00:01:35.750
And what we're talking about when we
say frameworks is we're talking about

00:01:35.750 --> 00:01:40.720
the Java 2 platform as a framework for
you to use to develop applications.

00:01:40.770 --> 00:01:44.020
Java can also be used to
develop applications that are

00:01:44.020 --> 00:01:45.990
run using the Cocoa framework.

00:01:46.240 --> 00:01:47.700
But that's the Java language.

00:01:47.800 --> 00:01:49.750
That's not the Java platform.

00:01:49.870 --> 00:01:53.300
So you can use the Java language
to get access to Cocoa.

00:01:53.300 --> 00:01:57.070
But what we're going to talk
about is the Java platform itself.

00:01:58.160 --> 00:02:01.900
So here's the overview of
what the standard edition is.

00:02:02.040 --> 00:02:05.300
So a little before we get into
specifically the standard edition,

00:02:05.300 --> 00:02:08.340
we have a bunch of
cross-platform editions.

00:02:08.360 --> 00:02:11.620
This is actually the foundation
for all the editions.

00:02:11.660 --> 00:02:15.700
We've got the Java language that is
on top of the Hotspot virtual machine,

00:02:15.700 --> 00:02:18.440
and then there's the KVM,
which is the tiny little VM that's used,

00:02:18.510 --> 00:02:19.940
and there's also a card VM.

00:02:20.050 --> 00:02:23.020
So starting on your right,

00:02:23.460 --> 00:02:26.650
There's the Java Card Edition,
which is this tiny little VM that

00:02:26.660 --> 00:02:28.580
runs on top of smart cards.

00:02:28.630 --> 00:02:33.260
Then next we have the Micro Edition,
which is a VM that runs inside

00:02:33.350 --> 00:02:36.500
of lots of household appliances,
your cell phones.

00:02:36.510 --> 00:02:38.480
If you're in Japan, you have a G3 phone.

00:02:38.480 --> 00:02:41.560
It's usually running something
on the Micro Edition.

00:02:41.830 --> 00:02:46.880
Even I've heard of cases of washers and
dryers that have VMs built into them.

00:02:47.320 --> 00:02:49.850
Then we have the Standard edition,
and this is where we fit in.

00:02:49.930 --> 00:02:52.400
We're actually providing a
Standard edition implementation.

00:02:52.400 --> 00:02:54.550
We have been since 10.1.

00:02:54.640 --> 00:02:56.750
Actually,
since 10.0 we've been providing it.

00:02:56.860 --> 00:03:00.370
And we've also been providing
a Java-- not Java 2,

00:03:00.370 --> 00:03:02.830
but a Java Standard edition
on earlier Macs,

00:03:02.850 --> 00:03:03.410
too.

00:03:03.530 --> 00:03:06.460
And this is so you can
deliver your applications,

00:03:06.570 --> 00:03:08.260
and they can be
cross-platform applications.

00:03:08.260 --> 00:03:11.710
They just--their applications just run.

00:03:12.450 --> 00:03:14.820
And finally there's the
J2 Enterprise edition,

00:03:15.160 --> 00:03:18.000
which there's a lot of confusion on
what's actually involved in here.

00:03:18.000 --> 00:03:21.720
We actually have an enterprise
product called WebObjects that you've

00:03:21.800 --> 00:03:23.990
probably heard a lot about and there
are a lot of good sessions on it.

00:03:24.030 --> 00:03:28.150
And that enterprise product does a
lot of the same things that J2EE does.

00:03:28.270 --> 00:03:31.740
It actually has many of the same
features and some of them are

00:03:31.790 --> 00:03:33.890
directly out of the J2EE spec.

00:03:33.920 --> 00:03:37.840
There also are third parties that
have brought their J2EE platforms,

00:03:37.840 --> 00:03:40.610
their certified platforms,
to our platform.

00:03:40.620 --> 00:03:45.760
So things like Lutris and Primati have
already brought certified J2EE platforms.

00:03:45.760 --> 00:03:48.180
And I think Ted Goldstein
mentioned a couple others that

00:03:48.190 --> 00:03:50.870
are pure Java implementations,
things like Orion and I can't

00:03:50.870 --> 00:03:53.320
remember all the names right
off the top of my head.

00:03:53.400 --> 00:03:56.230
But there are a bunch of
J2EE certified platforms.

00:03:56.280 --> 00:03:58.960
So they all run on top
of our Standard edition.

00:03:58.960 --> 00:04:03.900
So you can use those J2EE platforms
to deliver your enterprise platform.

00:04:03.920 --> 00:04:07.050
edition things on top
of our standard edition.

00:04:08.300 --> 00:04:10.860
So what exactly is the Standard Edition?

00:04:11.010 --> 00:04:14.420
So if we look at the very bottom here,
we're going to start talking about

00:04:14.420 --> 00:04:15.730
all the different OS platforms.

00:04:15.860 --> 00:04:19.040
And this is just all the
OS platforms that we run on,

00:04:19.050 --> 00:04:20.240
that Java runs on.

00:04:20.430 --> 00:04:21.710
Mac OS X is right there.

00:04:22.110 --> 00:04:25.080
Linux, Windows, Solaris,
and there's other ports

00:04:25.110 --> 00:04:26.500
that have happened.

00:04:27.320 --> 00:04:30.090
So on top of that,
you have the Java Virtual Machine.

00:04:30.090 --> 00:04:34.170
And this is the stuff
that runs Java bytecodes.

00:04:34.190 --> 00:04:38.200
So you've got the Hotspot compiler,
you've got the Hotspot Virtual Machine.

00:04:38.200 --> 00:04:42.000
They're basically one big thing
that compiles your stuff as needed,

00:04:42.000 --> 00:04:46.780
and Hotspot has all these really cool
features built into it to determine when

00:04:46.780 --> 00:04:51.790
it's supposed to compile things and keeps
track of how often your routines are run

00:04:51.790 --> 00:04:54.710
so that it doesn't waste time compiling
something that's only run like ten times.

00:04:56.410 --> 00:04:58.290
On top of that are the core Java APIs.

00:04:58.290 --> 00:05:02.510
And these usually correspond
to things like Java.util,

00:05:02.900 --> 00:05:03.920
Java.security.

00:05:03.920 --> 00:05:05.900
And there's so many APIs in here.

00:05:05.900 --> 00:05:08.430
This has been developing for years.

00:05:08.440 --> 00:05:11.870
There are utility classes to
let you do things with all your

00:05:11.870 --> 00:05:16.160
typical string manipulations,
string tokenizers that are built in.

00:05:16.160 --> 00:05:19.390
There's a whole collections framework,
so you don't actually have to

00:05:19.390 --> 00:05:22.610
rewrite your B-tree sorting or
your red-black trees or whatever.

00:05:22.620 --> 00:05:24.020
You just use the collections framework.

00:05:24.370 --> 00:05:26.660
There are tested sorting
algorithms in there.

00:05:26.720 --> 00:05:29.430
There's iterators that work on
top of the collections framework.

00:05:29.480 --> 00:05:32.430
There's locale support so that
you can actually have resource

00:05:32.520 --> 00:05:34.150
bundles for different locales.

00:05:34.240 --> 00:05:38.310
There's a whole Java beans framework
that lets you build bean application

00:05:38.480 --> 00:05:42.100
components and use them inside of
other applications and use things

00:05:42.100 --> 00:05:46.140
like reflection to figure out what's
going on inside of those beans.

00:05:46.140 --> 00:05:50.220
There's built-in networking support,
so you can just open up connections,

00:05:50.290 --> 00:05:51.540
use print writers.

00:05:52.080 --> 00:05:54.920
There's a whole suite of things
you can do just in the core API.

00:05:54.920 --> 00:05:59.340
And this is common across
all of the Java platforms.

00:05:59.340 --> 00:06:02.190
Then there's a set of integration APIs.

00:06:02.200 --> 00:06:05.720
And these are things like RMI,
remote method invocation, JDBC,

00:06:05.720 --> 00:06:08.200
which lets you get to
database connectivity,

00:06:08.200 --> 00:06:11.660
the Java naming and directory interface,
and then Corba.

00:06:11.660 --> 00:06:14.000
So all these are things
that you integrate with your

00:06:14.000 --> 00:06:15.580
existing enterprise systems.

00:06:15.580 --> 00:06:19.380
And things like RMI you can use to
actually write distributed applications

00:06:19.770 --> 00:06:21.910
with just using remote procedure calls.

00:06:21.990 --> 00:06:23.420
You don't have to do any funky transport.

00:06:23.420 --> 00:06:25.000
That's taken care of for you underneath.

00:06:28.530 --> 00:06:31.330
And one of the more important
things for desktop applications

00:06:31.330 --> 00:06:32.890
is actually having a UI toolkit.

00:06:32.900 --> 00:06:35.540
And if you look at the
top of our UI toolkit,

00:06:35.580 --> 00:06:39.510
we have Swing and AWT as the
very top level of the UI toolkit.

00:06:39.540 --> 00:06:44.400
Now, AWT, if you don't know about it,
AWT is the Abstract Windowing Toolkit.

00:06:44.830 --> 00:06:49.600
And this is a--it's a
platform-independent definition

00:06:49.600 --> 00:06:53.590
of all the GUI objects that you
could have on different platforms.

00:06:53.600 --> 00:06:57.550
And then what each platform vendor
does is they develop interface elements

00:06:57.560 --> 00:06:58.960
that match those specifications.

00:06:58.960 --> 00:07:02.220
So it'll be things like a button and
a window and very typical things,

00:07:02.220 --> 00:07:04.260
but sort of least common denominator.

00:07:04.400 --> 00:07:06.660
And we've implemented those things.

00:07:06.760 --> 00:07:10.160
And then Swing is actually what
is called a lightweight framework.

00:07:10.280 --> 00:07:13.380
And that is--in Java,
everything is rendered,

00:07:13.550 --> 00:07:16.520
and it's more complex controls because
you don't have to worry about the

00:07:16.520 --> 00:07:18.320
differences between the platforms.

00:07:18.430 --> 00:07:23.360
You can do things like different-looking
buttons than what might be on Mac OS X or

00:07:23.360 --> 00:07:25.570
might be on some other platforms.

00:07:25.690 --> 00:07:27.700
And it's all done inside of Java,
so it's okay.

00:07:27.720 --> 00:07:29.330
You can--you know,
we can handle the rendering.

00:07:29.420 --> 00:07:32.060
And all this lives on top of Java 2D.

00:07:32.060 --> 00:07:33.920
And if you went to the
graphics session this morning,

00:07:33.920 --> 00:07:36.750
Java 2D is this really
robust graphics engine.

00:07:36.760 --> 00:07:39.760
It lets you do things
like translucencies,

00:07:39.830 --> 00:07:43.020
general paths, strokes on paths,
gradients.

00:07:43.020 --> 00:07:45.640
There are just so many
things you can do in Java 2D.

00:07:45.680 --> 00:07:49.490
And Swing actually uses Java 2D to
do a lot of their graphics

00:07:49.490 --> 00:07:51.280
manipulations and things.

00:07:51.280 --> 00:07:55.470
And then we also have things like sound
input methods for internationalized text,

00:07:55.470 --> 00:07:59.140
so you can actually get--you know,
get things out of the OS so that people

00:07:59.190 --> 00:08:01.360
can enter more complex characters.

00:08:01.360 --> 00:08:04.680
And then accessibility,
which is involved with focus management

00:08:04.680 --> 00:08:08.940
and all the things you need to do to
use a computer if you're not physically

00:08:08.940 --> 00:08:11.060
able to use a mouse or hit the keys.

00:08:11.060 --> 00:08:13.720
And you saw some of that in the keynote,
and Java has a lot of that

00:08:13.720 --> 00:08:17.900
built in and has a lot--has had
that built in for a long time.

00:08:19.410 --> 00:08:23.800
And then at the very top are
Java-specific deployment options.

00:08:23.800 --> 00:08:27.000
We'll talk about this a lot
in this whole conference.

00:08:27.000 --> 00:08:31.760
Java Web Start and the Java Plugin
are two ways that actually are unique

00:08:31.860 --> 00:08:36.740
to Java in the way you can deliver
Java applications and applets.

00:08:39.070 --> 00:08:44.900
So that's basically an overview of
the entire Java 2 Standard edition,

00:08:44.950 --> 00:08:48.220
the way we ship it now,
and we're going to talk a little

00:08:48.230 --> 00:08:49.900
bit about Mac OS X integration.

00:08:49.900 --> 00:08:54.250
And the most important thing
about our Mac OS X integration is,

00:08:54.260 --> 00:08:56.900
simply put in this slide, is Aqua.

00:08:56.900 --> 00:09:03.010
So what we've done is we've spent a lot
of time to get Aqua to look good in Java,

00:09:03.010 --> 00:09:06.900
because we want your
Java applications to look just like

00:09:06.900 --> 00:09:08.270
every other application on the Mac.

00:09:09.060 --> 00:09:13.980
So we have the Mac OS X look for Java.

00:09:14.380 --> 00:09:18.760
Of course, all of our AWT peers,
all of our AWT widgets,

00:09:19.120 --> 00:09:23.200
and they're called peers,
are already in Aqua,

00:09:23.200 --> 00:09:25.800
because a lot of times we're
just using the native windows.

00:09:25.800 --> 00:09:28.480
Sometimes we use some of
our own custom things,

00:09:28.550 --> 00:09:30.190
but usually we're using
the native windows.

00:09:30.200 --> 00:09:32.760
So you get native windows,
you get native menus,

00:09:32.760 --> 00:09:35.300
you get native dialogues
and things like that.

00:09:35.400 --> 00:09:40.270
Swing itself,
we implemented the... Aqua look and feel.

00:09:40.500 --> 00:09:44.400
So Swing has a pluggable look and
feel that you can implement your own.

00:09:44.400 --> 00:09:46.900
There's already one that's
a Java look and feel,

00:09:46.900 --> 00:09:50.370
which James Galsing was talking
about was designed by bankers,

00:09:50.400 --> 00:09:51.400
so we don't like it so much.

00:09:51.410 --> 00:09:56.250
And there's a... On other platforms,
you can actually have

00:09:56.320 --> 00:09:57.850
specific look and feels,
like on Windows,

00:09:57.900 --> 00:10:00.400
there's a Windows look and feel,
which looks just like that.

00:10:00.400 --> 00:10:02.380
So if you're on Windows,
you can run that.

00:10:02.400 --> 00:10:05.130
And there's a motif look and feel,
so if you want to feel like

00:10:05.220 --> 00:10:07.310
you're back in college running
on your X Windows thing,

00:10:07.400 --> 00:10:09.900
you can... You can use that.

00:10:09.900 --> 00:10:11.400
But we have the Aqua look and feel.

00:10:11.400 --> 00:10:12.900
It's on by default.

00:10:12.900 --> 00:10:14.820
You can... It just works.

00:10:14.900 --> 00:10:16.900
You get it with your applications.

00:10:16.900 --> 00:10:20.390
It has things like the
default button is throbbing,

00:10:20.400 --> 00:10:23.050
and so when you hit return,
it'll go there,

00:10:23.220 --> 00:10:27.690
and all the translucencies just
happen for you automatically.

00:10:28.740 --> 00:10:31.560
And then we're using
Quartz 2D for the graphics.

00:10:31.610 --> 00:10:34.890
So you actually get all of our
anti-aliasing that's built into Quartz.

00:10:34.950 --> 00:10:36.800
You get our font support.

00:10:36.910 --> 00:10:40.500
There was some talk about how
we actually support things like

00:10:40.640 --> 00:10:45.240
TrueType hinting because that's
built into the Quartz font mechanism.

00:10:45.240 --> 00:10:48.650
And that's something that's a new
feature for 1.4 that we already

00:10:48.650 --> 00:10:50.740
have in our 1.3 implementation.

00:10:53.900 --> 00:10:57.530
So when we talk about actually
more detailed integration,

00:10:57.530 --> 00:10:59.580
we've got a couple different categories.

00:10:59.580 --> 00:11:01.520
One of them is application-specific.

00:11:01.520 --> 00:11:06.080
And application-specific
integration is actually a big topic,

00:11:06.080 --> 00:11:08.120
and it's so big that we have
a whole session on that.

00:11:08.320 --> 00:11:11.020
And that's going to be this afternoon.

00:11:11.020 --> 00:11:13.120
It'll show in the roadmap.

00:11:13.120 --> 00:11:16.550
But there's an entire session
that talks about things like all

00:11:16.550 --> 00:11:20.620
of the Mac OS X-isms that people
don't want to see that this was a

00:11:20.730 --> 00:11:24.120
cross-platform thing that you brought
to the Mac or that you used Java.

00:11:24.120 --> 00:11:26.320
So they want the menu bar
to be in the right place.

00:11:26.320 --> 00:11:31.140
They want you to use the About and
the Quit of the File menu instead

00:11:31.260 --> 00:11:35.040
of having a File Exit menu because
that's foreign to most Mac users.

00:11:35.040 --> 00:11:37.180
So there are a lot of
little things you can do.

00:11:37.180 --> 00:11:39.900
Now, you don't have to do them,
but we really encourage you

00:11:39.910 --> 00:11:42.680
to do these because Mac users
are very discriminating.

00:11:42.680 --> 00:11:45.190
And if they see the option between
something that looks like a

00:11:45.270 --> 00:11:47.890
Mac application and something that
looks like they just downloaded it

00:11:47.980 --> 00:11:51.350
off of freeshareware.com or something,
they're going to choose the one that

00:11:51.450 --> 00:11:52.580
looks like a real Mac application.

00:11:53.010 --> 00:11:54.420
But we want to let you
be able to do that.

00:11:54.470 --> 00:11:57.710
So we have a lot of ways that you
can customize your Mac application,

00:11:57.710 --> 00:11:59.840
your Java application,
to look just like other

00:11:59.970 --> 00:12:01.210
Mac OS X applications.

00:12:02.910 --> 00:12:04.730
And then there's
browser-based integration,

00:12:04.760 --> 00:12:08.870
which means you're developing an applet,
and you want to ship it

00:12:08.880 --> 00:12:10.220
to people through the web.

00:12:10.280 --> 00:12:13.910
And what are all the issues when
it comes to Mac OS X browsers

00:12:13.920 --> 00:12:16.180
and applets and applet support?

00:12:16.180 --> 00:12:19.290
There's a lot of information on this,
and we're having a Java in the

00:12:19.390 --> 00:12:21.500
browser session right after this one.

00:12:21.500 --> 00:12:27.280
And there's a lot of information about,
well, we're using Aqua widgets,

00:12:27.280 --> 00:12:29.350
so those look different in the browser.

00:12:29.440 --> 00:12:34.440
Or we're not sure what VM exists,
because on other platforms there

00:12:34.570 --> 00:12:38.440
could be 30 different VMs installed,
or there could be two VMs in the browser,

00:12:38.440 --> 00:12:41.380
one shipped by the OS vendor
and one shipped by someone else.

00:12:41.460 --> 00:12:43.460
And so we've eliminated
a lot of that complexity.

00:12:43.460 --> 00:12:48.820
But there's still a question of, well,
I've written my HTML for one site.

00:12:48.980 --> 00:12:51.320
How do I deal with it on the Mac?

00:12:51.420 --> 00:12:54.200
And so this session will actually
clear up a lot of those issues.

00:12:56.660 --> 00:12:59.350
There's also packaging
and deployment issues.

00:12:59.490 --> 00:13:04.570
You don't want to just ship an
application as a JAR file to end users.

00:13:04.570 --> 00:13:05.580
You could.

00:13:05.740 --> 00:13:07.740
And JAR files,
if you don't know what they are,

00:13:07.740 --> 00:13:10.350
they're actually the container
for Java applications.

00:13:10.530 --> 00:13:13.520
And we have some stuff in
Mac OS X so that you can actually

00:13:13.720 --> 00:13:17.000
just load a JAR file off the web and
double-click it and it'll launch.

00:13:17.060 --> 00:13:17.950
And it'll just work.

00:13:17.950 --> 00:13:20.430
It'll show up in the dock as an
application and things like that.

00:13:20.570 --> 00:13:22.230
But it's not the ideal experience.

00:13:22.240 --> 00:13:25.180
So there are things you can do to
package and deploy your application,

00:13:25.180 --> 00:13:26.580
and we'll talk about that a little more.

00:13:28.430 --> 00:13:31.540
There's also JDIRECT and JNI,
and we'll get into that more

00:13:31.540 --> 00:13:36.030
again in the application-specific,
the tailoring application session.

00:13:36.190 --> 00:13:39.460
But JDIRECT and JNI allow you
access to native libraries.

00:13:39.560 --> 00:13:43.630
And JNI is the one that is
Java across all Java implementations.

00:13:43.640 --> 00:13:46.970
JDIRECT is some things we've implemented
to make life easier for you if you

00:13:46.970 --> 00:13:49.590
want to do native implementations,
but you don't have to use

00:13:49.590 --> 00:13:51.080
it if you don't want to.

00:13:52.300 --> 00:13:55.200
And then we also have the
Mac OS X Java Toolkit,

00:13:55.200 --> 00:13:56.620
which is called the MRJ Toolkit.

00:13:56.920 --> 00:13:59.210
And this has a lot of things for
dealing with files and dealing

00:13:59.290 --> 00:14:00.530
with other OS-specific things.

00:14:00.540 --> 00:14:05.250
It's Java classes that they
get to Mac-specific features.

00:14:07.300 --> 00:14:10.300
So when we talk about deployment,
I've mentioned some of these things,

00:14:10.300 --> 00:14:11.540
but there are three ways you can deploy.

00:14:11.540 --> 00:14:14.890
You can deploy as an application,
which means you bundle all

00:14:14.890 --> 00:14:18.400
of your Java-specific things
inside of an application bundle.

00:14:18.400 --> 00:14:21.640
And so that is recognized by
the system as an application.

00:14:21.640 --> 00:14:22.460
You have an icon.

00:14:22.460 --> 00:14:26.400
You can do things like register for
file types and all the typical things

00:14:26.590 --> 00:14:28.390
you'd want to do as an application.

00:14:28.400 --> 00:14:33.700
There are also some really good
tools from Install Anywhere,

00:14:33.700 --> 00:14:34.680
Zero-G.

00:14:34.680 --> 00:14:36.320
They make Install Anywhere
and Power Update,

00:14:36.320 --> 00:14:39.630
which are tools that let you create
these applications and install them.

00:14:39.700 --> 00:14:42.820
But they also are themselves
applications that run on our platform.

00:14:42.820 --> 00:14:45.910
So you can see things like JBuilder,
and there are a whole bunch

00:14:45.920 --> 00:14:47.680
of applications of ThinkFree.

00:14:47.680 --> 00:14:51.450
They bundle their applications
as a normal application,

00:14:51.470 --> 00:14:54.660
and the only way to tell that it's
Java is to maybe look at top or

00:14:54.660 --> 00:14:57.280
something like that or try to get a
stack trace out of it or something.

00:14:59.440 --> 00:15:00.530
Then there's Java Web Start.

00:15:00.710 --> 00:15:03.900
And what Java Web Start is,
is it's a technology to deploy

00:15:03.900 --> 00:15:05.770
your applications over the web.

00:15:05.840 --> 00:15:09.000
And this is full-fledged
applications that you're going

00:15:09.000 --> 00:15:10.800
to put on a website somewhere.

00:15:10.800 --> 00:15:13.430
And you just click on a link
and it downloads information

00:15:13.460 --> 00:15:14.300
about that application.

00:15:14.300 --> 00:15:16.560
Then it'll go download all
the jars and everything.

00:15:16.600 --> 00:15:19.880
And then you'll have a full-fledged
application sitting on your system.

00:15:19.900 --> 00:15:21.910
And it's a really good
deployment mechanism.

00:15:21.940 --> 00:15:25.280
It has a lot of advantages
for things like,

00:15:25.280 --> 00:15:27.000
if you're going to
update your application,

00:15:27.000 --> 00:15:29.060
you just update your
jars on your website.

00:15:29.110 --> 00:15:31.600
And when people run
their local application,

00:15:31.600 --> 00:15:35.260
it goes and pings your website and sees,
has this jar changed?

00:15:35.410 --> 00:15:37.460
If it has, it'll download the new jar.

00:15:37.460 --> 00:15:40.500
And this is available on Windows, too.

00:15:40.500 --> 00:15:46.260
So it's sort of a just universal way
to deploy applications over the web.

00:15:47.650 --> 00:15:51.390
And then finally,
there's applets and plugins,

00:15:51.390 --> 00:15:55.040
which applets, not surprisingly,
are the most common way

00:15:55.040 --> 00:15:58.150
people see Java on Mac OS X,
and probably in the world.

00:15:58.160 --> 00:16:01.000
You run your web browser,
you go to a website,

00:16:01.110 --> 00:16:04.120
and some little thing pops
up that animates around,

00:16:04.120 --> 00:16:05.660
and a lot of times that's in Java.

00:16:05.660 --> 00:16:07.570
And also people have a lot of games.

00:16:07.580 --> 00:16:12.030
If you go to Yahoo and Yahoo Games,
there's hundreds of thousands of

00:16:12.030 --> 00:16:16.360
people playing Yahoo Games every
day online with each other.

00:16:16.360 --> 00:16:17.560
And it's just amazing.

00:16:17.560 --> 00:16:19.330
Those are all Java applets
that are running.

00:16:19.340 --> 00:16:22.590
So there's just so many Java applets
that are delivered that way,

00:16:22.590 --> 00:16:25.150
and they're easy ways to
deliver small programs,

00:16:25.150 --> 00:16:28.310
especially because it's
just in the browser.

00:16:28.320 --> 00:16:31.510
And on Mac OS X,
we have 1.3.1 right built in,

00:16:31.510 --> 00:16:34.060
so you can do some
cool things in applets.

00:16:36.910 --> 00:16:39.450
So now to show a little bit
about what you can do with

00:16:39.450 --> 00:16:43.020
our existing Java on Mac OS X,
I'd like to bring up Tyler Stone from our

00:16:43.020 --> 00:16:47.840
Worldwide Developer Relations Group to
show us a demo of a product called eBeam.

00:16:47.840 --> 00:16:49.200
Tyler?

00:16:49.670 --> 00:16:50.010
Hey, Scott.

00:16:50.010 --> 00:16:50.540
How you doing?

00:16:50.540 --> 00:16:51.830
Thanks.

00:16:51.840 --> 00:16:53.830
I haven't actually done anything yet,
but thanks.

00:16:53.840 --> 00:16:53.840
How's it going?

00:16:53.840 --> 00:16:54.310
Not bad.

00:16:54.310 --> 00:16:54.840
Not bad.

00:16:54.840 --> 00:16:56.900
So what are you going to show us here?

00:16:56.900 --> 00:16:59.750
I wanted to talk to you
a little bit about eBeam.

00:16:59.830 --> 00:17:05.560
eBeam is a very fascinating product by
the folks from Electronics for Imaging,

00:17:05.570 --> 00:17:05.950
EFI.

00:17:05.950 --> 00:17:07.790
Screwed up their company name.

00:17:08.000 --> 00:17:09.870
They're known for the
Fiery print process,

00:17:09.870 --> 00:17:12.020
so a lot of you have
heard of EFI for that.

00:17:12.020 --> 00:17:14.710
But eBeam is a new product
they've come out with.

00:17:14.720 --> 00:17:18.700
It's a whiteboard capture
hardware and software application.

00:17:18.700 --> 00:17:23.420
So you take this little receiver,
you attach it to any standard whiteboard.

00:17:23.500 --> 00:17:25.890
It attaches via USB to your Macintosh.

00:17:25.930 --> 00:17:28.520
You take any standard whiteboard pen.

00:17:28.520 --> 00:17:30.050
If I take the clip off, you'll see that.

00:17:30.090 --> 00:17:32.880
And you take these whiteboard pens
and you put them inside a transmitter.

00:17:33.040 --> 00:17:35.420
Then,
any time you write on your whiteboard,

00:17:35.550 --> 00:17:39.660
it'll actually transmit
through to your Macintosh,

00:17:39.660 --> 00:17:40.660
like so.

00:17:40.660 --> 00:17:44.410
So that's really cool,
but why are you showing this

00:17:44.480 --> 00:17:45.700
at the Java overview session?

00:17:46.350 --> 00:17:49.120
Oh, this isn't cool USB products
overview session?

00:17:49.120 --> 00:17:50.120
No, no.

00:17:50.580 --> 00:17:53.090
No, I'm showing it in this particular
session because the application

00:17:53.130 --> 00:17:56.330
that you see running up here
is indeed a Java application.

00:17:56.340 --> 00:17:59.500
We see a lot of applets,
but I'm kind of an old-fashioned

00:17:59.500 --> 00:18:00.860
tofu and potatoes kind of guy.

00:18:00.860 --> 00:18:02.680
I like shrink-wrapped applications.

00:18:02.680 --> 00:18:07.060
And that's what the folks at eBeam
and EFI have done using Java.

00:18:07.060 --> 00:18:08.680
They've created this application.

00:18:08.680 --> 00:18:10.930
It has all the Aqua look and feel in it.

00:18:11.100 --> 00:18:12.360
It has standard menu bars.

00:18:12.360 --> 00:18:15.790
It has a lot of complex functionality,
and it's done almost completely in Java.

00:18:15.800 --> 00:18:18.180
And this is running on
our existing Mac OS X?

00:18:18.660 --> 00:18:19.440
It's available today.

00:18:19.440 --> 00:18:22.060
You can purchase it
from the folks at eBeam.

00:18:22.060 --> 00:18:24.440
It runs under Mac OS X, right,
X1 right now.

00:18:24.440 --> 00:18:26.020
So what else can we do with this?

00:18:26.480 --> 00:18:28.120
Well, of course,
you've seen us write something on here.

00:18:28.120 --> 00:18:30.970
Of course, a whiteboard product wouldn't
be a whole lot if it didn't

00:18:30.970 --> 00:18:32.460
have an erase function as well.

00:18:32.490 --> 00:18:34.800
So you can go ahead and erase as well.

00:18:34.970 --> 00:18:36.840
In fact, why don't we play a little game?

00:18:36.840 --> 00:18:38.640
Do we have time to play a little game?

00:18:38.640 --> 00:18:40.550
Yeah, but here's the problem.

00:18:40.620 --> 00:18:42.900
So you work in worldwide
developer relations.

00:18:43.040 --> 00:18:44.580
I'm actually a developer.

00:18:44.590 --> 00:18:46.360
So we're in different buildings.

00:18:46.920 --> 00:18:47.570
Yeah, we are.

00:18:47.570 --> 00:18:50.180
There's like an entire gap of a
couple hundred feet between us,

00:18:50.180 --> 00:18:50.920
I believe.

00:18:50.920 --> 00:18:53.340
So if we wanted to actually
play this game at the office,

00:18:53.340 --> 00:18:55.600
not here up on stage,
how would we do that?

00:18:55.990 --> 00:18:56.680
Well, you know what?

00:18:56.680 --> 00:18:59.230
One of the neat things about
the eBeam product is that it has

00:18:59.230 --> 00:19:02.240
meeting functionality built into
it so that you can connect to

00:19:02.240 --> 00:19:03.240
the eBeam application directly.

00:19:03.240 --> 00:19:05.370
So you can connect to a meeting
that I broadcast from my

00:19:05.370 --> 00:19:07.280
whiteboard over the Internet.

00:19:07.300 --> 00:19:08.280
Okay.

00:19:08.520 --> 00:19:09.280
Let's go ahead and take a look at that.

00:19:09.280 --> 00:19:12.950
I should stay on demo machine one.

00:19:15.360 --> 00:19:16.200
Thanks.

00:19:16.220 --> 00:19:18.350
So what I do from any
standard whiteboard session,

00:19:18.350 --> 00:19:20.150
so I've been writing
up on the whiteboard,

00:19:20.150 --> 00:19:22.310
I decide I need to bring you
in via a conference call,

00:19:22.410 --> 00:19:25.340
for instance, is I come up here and
I say share meeting.

00:19:25.350 --> 00:19:26.440
Click on share meeting.

00:19:26.440 --> 00:19:30.600
EFI hosts some servers that
I automatically can connect to.

00:19:30.600 --> 00:19:31.840
I go ahead and name my meeting.

00:19:31.840 --> 00:19:33.220
I have to stop you for a second.

00:19:33.370 --> 00:19:35.870
I just have to say,
I know this isn't in our script,

00:19:35.870 --> 00:19:37.140
but this is really cool.

00:19:37.140 --> 00:19:38.010
He's going on script.

00:19:38.020 --> 00:19:41.760
Because the cool thing about this
is this is all a swing window.

00:19:41.760 --> 00:19:43.520
This is all native stuff going on here.

00:19:43.520 --> 00:19:45.180
And this looks great to me.

00:19:45.200 --> 00:19:47.340
I mean,
I see all these little touches they did,

00:19:47.340 --> 00:19:49.820
but you wouldn't know that
this is swing running here.

00:19:49.820 --> 00:19:51.580
So I just think that's really great.

00:19:51.580 --> 00:19:53.020
And I wanted to comment about that.

00:19:53.100 --> 00:19:53.840
Oh, no problem at all.

00:19:53.900 --> 00:19:55.500
So I'm going to go ahead
and share this meeting.

00:19:55.500 --> 00:19:57.100
I've called it the 402 session demo.

00:19:57.100 --> 00:19:58.160
It's a pretty original name.

00:19:58.160 --> 00:20:00.960
It goes out to the internet and
actually starts broadcasting

00:20:01.040 --> 00:20:02.990
everything I write on the whiteboard.

00:20:03.000 --> 00:20:05.270
So if we switch over
to demo machine 2 now.

00:20:05.280 --> 00:20:08.120
Okay, so...

00:20:08.420 --> 00:20:11.090
and Scott Adler:
So click on Join Meeting.

00:20:11.090 --> 00:20:16.370
It goes out to the same server and you
should be able to join 402 Session Demo.

00:20:16.410 --> 00:20:20.110
Okay, so this is actually live, right?

00:20:20.110 --> 00:20:22.420
Scott Adler: This is live.

00:20:22.600 --> 00:20:26.180
So if you guys have
eBeam on your machines,

00:20:26.350 --> 00:20:30.130
you can join our session, too,
if you want.

00:20:30.130 --> 00:20:32.070
If you go to www.e-beam.com and
download the software real quick,

00:20:32.070 --> 00:20:32.070
you can join in.

00:20:33.700 --> 00:20:50.000
[Transcript missing]

00:20:50.600 --> 00:21:08.100
[Transcript missing]

00:21:08.400 --> 00:24:50.200
[Transcript missing]

00:24:52.720 --> 00:24:56.660
You get the pulsating default button.

00:24:56.710 --> 00:24:58.240
I believe those are called throbbing,
actually.

00:24:58.350 --> 00:25:00.940
Throbbing, pulsating, whatever.

00:25:00.940 --> 00:25:03.800
You get the nice pinstripe
background automatically.

00:25:03.900 --> 00:25:06.340
You notice the menu bar
is in the right location.

00:25:06.440 --> 00:25:09.720
All of our drawing is
anti-alias by default.

00:25:09.830 --> 00:25:12.890
All the text is anti-alias by default.

00:25:12.960 --> 00:25:17.300
And so none of this-- we didn't have to
do any extra work to get these features.

00:25:17.420 --> 00:25:21.120
Then we did do a little
bit of tweaking for OS X.

00:25:21.500 --> 00:25:23.860
So in the Applications menu,
we do have our preference

00:25:23.860 --> 00:25:27.940
item that actually appears and
works like it's supposed to.

00:25:27.960 --> 00:25:31.900
And then finally,
we were able to leverage QuickTime for

00:25:31.900 --> 00:25:37.230
Java so that this meeting that you
and Tyler have been working on so that

00:25:37.230 --> 00:25:40.540
you can prove that you beat Tyler,
you can actually export this as

00:25:40.540 --> 00:25:45.360
a QuickTime or digital video file
format and save that as an iMovie to

00:25:45.360 --> 00:25:46.970
share with all your friends at Apple.

00:25:46.980 --> 00:25:48.260
Cool.

00:25:48.260 --> 00:25:48.280
That's great.

00:25:48.280 --> 00:25:49.280
Well, thanks a lot.

00:25:49.280 --> 00:25:50.710
Thanks.

00:25:57.900 --> 00:26:04.560
So if we can go back to slides.

00:26:04.650 --> 00:26:08.370
So the next thing I want to
talk about is a big question

00:26:08.410 --> 00:26:09.540
that a lot of developers get.

00:26:09.660 --> 00:26:13.320
That is, they don't really know that
much about Mac OS X specifics,

00:26:13.390 --> 00:26:17.220
and they're big Java developers
from whatever other platforms

00:26:17.220 --> 00:26:18.760
might be coming from.

00:26:18.760 --> 00:26:19.640
Or the other way around.

00:26:19.720 --> 00:26:21.530
They're Mac OS X developers,
and they don't know

00:26:21.530 --> 00:26:22.620
what's going on in Java.

00:26:22.620 --> 00:26:25.750
And this is the question I get,
is what do you actually

00:26:25.750 --> 00:26:27.320
need to develop Mac OS X?

00:26:27.980 --> 00:26:30.760
Develop applications
using Mac OS X and Java.

00:26:30.820 --> 00:26:34.400
And the simplest answer
I can give them is

00:26:35.800 --> 00:26:37.500
documentation.

00:26:37.530 --> 00:26:42.030
And so to talk about that,
I'd like to bring up Bodhi Gerfen

00:26:42.260 --> 00:26:44.750
from the technical publications group.

00:26:49.500 --> 00:26:50.250
Well, good afternoon.

00:26:50.350 --> 00:26:50.900
I'm Bodhi.

00:26:50.900 --> 00:26:53.840
And as the screen says,
I work in technical publications.

00:26:53.840 --> 00:26:57.420
I wanted to give you guys a little
bit of insight today in what

00:26:57.430 --> 00:27:01.020
we've been doing in tech pubs,
what we plan on doing in the future,

00:27:01.020 --> 00:27:04.580
and also for those of you that don't
know or may be new to the platform,

00:27:04.580 --> 00:27:06.580
where you find the
technical documentation.

00:27:06.580 --> 00:27:09.320
So to prove that, I put it on the slide.

00:27:09.360 --> 00:27:10.700
So where are we today?

00:27:10.800 --> 00:27:13.960
What have we done with
documentation up to this point?

00:27:14.000 --> 00:27:18.280
Well, we saw in the Hangman demo
that MRJ is not there anymore.

00:27:18.820 --> 00:27:20.040
MRJ was around a long time.

00:27:20.130 --> 00:27:21.900
We saw the other day in Steve's demo.

00:27:21.900 --> 00:27:23.130
Mac OS 9 is dead.

00:27:23.280 --> 00:27:27.690
Well, we've been working hard to update
our documentation to Mac OS X.

00:27:27.770 --> 00:27:29.990
Mac OS X has been out a
little over a year now.

00:27:30.000 --> 00:27:33.060
And we've been, first of all,
working on updating our

00:27:33.060 --> 00:27:36.780
website to bring it up to date
with what's out there today.

00:27:36.780 --> 00:27:39.830
You'll see things on the website
today that explain some of these

00:27:39.830 --> 00:27:43.570
little nuances that Scott's
mentioned about J2SE on Mac OS X.

00:27:43.570 --> 00:27:46.490
We have revised the release notes format.

00:27:46.510 --> 00:27:50.600
When Java first shipped on Mac OS X,
the release notes,

00:27:50.700 --> 00:27:54.190
since it was so different than Mac OS 9,
had all the information in it.

00:27:54.250 --> 00:27:55.920
Since then,
we've listened to you and we've

00:27:56.060 --> 00:27:57.220
tried to pull things out of there.

00:27:57.220 --> 00:27:59.220
Now the release notes are release notes.

00:27:59.220 --> 00:28:02.070
And more than that,
we address some of your issues.

00:28:02.070 --> 00:28:05.010
We've broken the release notes
out into individual issues that

00:28:05.010 --> 00:28:08.720
you've had to kind of give you,
to show you what we're doing inside

00:28:08.720 --> 00:28:11.040
Apple to make Java the best on Mac OS X.

00:28:11.040 --> 00:28:13.940
We've updated,
we have a document on our website

00:28:13.940 --> 00:28:16.300
that's Java development on Mac OS X.

00:28:16.300 --> 00:28:21.400
We've updated that for Mac OS X 10.1,
Mac OS X version 10.1,

00:28:21.560 --> 00:28:24.780
so that the examples in there,
the little tutorials, they apply to the

00:28:24.790 --> 00:28:26.250
current version of Java.

00:28:26.360 --> 00:28:30.090
And we've added some more Java-specific
information to the project builder help.

00:28:30.220 --> 00:28:33.280
So if you are using project builders,
your IDE,

00:28:33.280 --> 00:28:36.000
we have some details in there now on
how to do those little things that

00:28:36.000 --> 00:28:38.900
might not be obvious at first glance.

00:28:39.010 --> 00:28:40.840
So that's what we've done this past year.

00:28:41.000 --> 00:28:42.690
Where do we want to go from here?

00:28:42.810 --> 00:28:45.910
Well, we want to make sure that you
always have the current version

00:28:45.960 --> 00:28:47.910
of Java doc on the system,
so that if you are

00:28:47.910 --> 00:28:51.240
developing on your laptop,
walking around, it's all right there.

00:28:51.490 --> 00:28:55.230
We want to work harder to integrate the
documentation with the developer tools.

00:28:55.570 --> 00:28:58.190
Things like the class browser,
things like project builder.

00:28:58.350 --> 00:29:01.320
If you're a Cocoa developer,
you're familiar with the fact that

00:29:01.320 --> 00:29:05.740
you can go in and select a class,
and you can open up the documentation

00:29:05.770 --> 00:29:07.200
right in project builder.

00:29:07.200 --> 00:29:08.540
We're looking at things like that.

00:29:08.540 --> 00:29:11.240
We want to see if we can
incorporate that also for you.

00:29:11.240 --> 00:29:15.880
We're working on some more
topic-based tutorials to give you

00:29:15.880 --> 00:29:21.570
an idea of how do I put the name of
my application up in the menu bar,

00:29:21.570 --> 00:29:24.320
or how do I implement a quit handler,
an about handler.

00:29:24.460 --> 00:29:27.940
Simple things for you if
you're not used to them.

00:29:28.050 --> 00:29:31.860
We're working also on some tutorials for
beginning and more advanced developers to

00:29:31.950 --> 00:29:35.540
walk you through some of the things that
might be a little different on Mac OS X.

00:29:35.670 --> 00:29:37.020
And of course, this is Apple.

00:29:37.160 --> 00:29:39.770
There's other things we have
in mind that we're scheming

00:29:39.770 --> 00:29:41.980
about that we're working on.

00:29:42.100 --> 00:29:45.160
So, we've seen where we are,
where we're going,

00:29:45.160 --> 00:29:47.310
and where do you find this stuff?

00:29:47.680 --> 00:29:52.200
Well, the best place to find it is online
at developer.apple.com/techpubs,

00:29:52.200 --> 00:29:54.650
and there is a Java section in there.

00:29:54.720 --> 00:29:57.300
Of course, we also give it to you
with the developer tools.

00:29:57.300 --> 00:29:59.670
We install it when you
install the developer tools in

00:29:59.670 --> 00:30:01.760
developer documentation Java.

00:30:01.760 --> 00:30:06.880
So you'll find a snapshot of
what's on the web page there.

00:30:06.880 --> 00:30:09.770
Also, the Java documentation is
available in developer help center.

00:30:09.770 --> 00:30:13.810
If you're using project builder,
under the help menu, there's an item for

00:30:13.810 --> 00:30:15.320
developer help center.

00:30:15.370 --> 00:30:17.820
So if you look in there,
you'll see the Java section.

00:30:17.850 --> 00:30:20.200
And if you want to see what's new,
of course,

00:30:20.200 --> 00:30:23.040
check developer.apple.com/dev notes,
and that'll tell you what

00:30:23.040 --> 00:30:24.800
we've got out there new.

00:30:24.800 --> 00:30:29.040
So we've got some new things coming in
light of the upcoming Jaguar release,

00:30:29.080 --> 00:30:32.170
and of course, the 1.4 release will
be real exciting too.

00:30:32.260 --> 00:30:34.740
So thanks very much.

00:30:34.740 --> 00:30:34.740
Scott?

00:30:37.800 --> 00:30:38.800
Thanks.

00:30:38.800 --> 00:30:44.910
So the rest of the time here we're
going to talk about the Java 2

00:30:44.990 --> 00:30:46.780
Standard edition version 1.4.

00:30:46.790 --> 00:30:48.630
And we're working on 1.4.

00:30:48.640 --> 00:30:50.420
We want to have 1.4 available for you.

00:30:50.420 --> 00:30:59.110
So we'll talk a little bit about what
things are in 1.4 and what things you

00:30:59.110 --> 00:30:59.110
can take advantage of today and what
things will be coming in the future.

00:31:00.190 --> 00:31:03.410
So in order to talk about 1.4,
we sort of have to talk about

00:31:03.410 --> 00:31:05.560
1.3 and compare it to 1.4.

00:31:05.560 --> 00:31:08.460
So this is 1.3,
very similar to what I showed before.

00:31:08.460 --> 00:31:11.290
And if you look, you know,
there's a lot to it.

00:31:11.360 --> 00:31:16.600
But when we talk about 1.4,
we can add the brand new packages here.

00:31:16.600 --> 00:31:19.280
So these five packages are brand new.

00:31:19.280 --> 00:31:20.900
They haven't existed before.

00:31:20.900 --> 00:31:25.380
They've bundled in things like XML,
new IO, logging,

00:31:25.380 --> 00:31:29.270
a lot of very new functionality
in actual whole new packages.

00:31:31.860 --> 00:31:34.140
All of these packages have
actually changed significantly

00:31:34.140 --> 00:31:38.380
and have had user level or
developer level APIs added to them.

00:31:38.380 --> 00:31:40.660
So they've actually had large
changes inside of these packages.

00:31:40.660 --> 00:31:43.510
And even more is that
all of these packages,

00:31:43.890 --> 00:31:47.570
which is the entire Java platform,
has actually been changed

00:31:47.570 --> 00:31:49.710
with bug fixes and updates.

00:31:49.720 --> 00:31:52.330
There's actually,
I think someone looked at the code and

00:31:52.330 --> 00:31:56.500
they said there's over 40% more code
in Java 1.4 than there was in 1.3.

00:31:56.500 --> 00:31:59.720
So that's actually a big increase
because Java code is pretty big,

00:31:59.750 --> 00:32:01.690
the amount of stuff we get from Sun.

00:32:01.800 --> 00:32:05.200
that has new functionality
and new features.

00:32:06.390 --> 00:32:09.040
So we'll talk a little bit
about what are the additions

00:32:09.070 --> 00:32:10.580
to the Java 2 Standard edition.

00:32:10.720 --> 00:32:12.120
And we grouped them into three areas.

00:32:12.290 --> 00:32:15.860
There's the UI frameworks,
there's the enterprise frameworks,

00:32:15.930 --> 00:32:17.130
and then there's the core frameworks.

00:32:17.220 --> 00:32:18.460
So we're kind of going
in the reverse order.

00:32:18.460 --> 00:32:20.890
We're going from the top down.

00:32:21.680 --> 00:32:26.310
So if we start with the UI frameworks,
there's AWT, there's Swing,

00:32:26.310 --> 00:32:27.830
there's Java 2D, and there's printing.

00:32:27.840 --> 00:32:28.820
We've talked about those before.

00:32:28.820 --> 00:32:30.600
We'll go into some
specifics on each of those.

00:32:30.600 --> 00:32:34.680
So in AWT, some of the major changes
that have happened in there

00:32:34.680 --> 00:32:38.380
is there's headless support,
which is if you're going to run on a

00:32:38.380 --> 00:32:41.880
server or somewhere where you don't
actually want to draw to the screen,

00:32:41.880 --> 00:32:44.540
if you have like a daemon
mode or something like that,

00:32:44.640 --> 00:32:47.720
you can actually still do
AWT commands and generate images

00:32:47.720 --> 00:32:51.580
or whatever you might need to do in
AWT without actually having a screen.

00:32:51.600 --> 00:32:53.640
Or a screen process running.

00:32:53.640 --> 00:32:58.820
There's full screen exclusive mode API,
and this is an interesting thing.

00:32:58.820 --> 00:33:00.810
This is mostly designed
for game developers,

00:33:00.810 --> 00:33:03.600
but it could be done for kiosks and
other things like that where you

00:33:03.600 --> 00:33:05.510
actually take over the entire screen.

00:33:05.520 --> 00:33:09.020
Now, it's interesting because we actually
have this functionality today.

00:33:09.020 --> 00:33:11.350
If you use QuickTime for Java,
you can actually take

00:33:11.370 --> 00:33:12.700
over the entire screen.

00:33:12.700 --> 00:33:16.460
And if you saw the demo in our keynote
where we had that getAMP thing,

00:33:16.630 --> 00:33:19.080
that was, I think,
using QuickTime for Java to

00:33:19.080 --> 00:33:20.580
take over the screen.

00:33:20.580 --> 00:33:20.620
Okay.

00:33:21.600 --> 00:33:24.040
And this is going to be built into 1.4,
so there are going to be a lot

00:33:24.040 --> 00:33:27.520
of people writing games and other
things that just take over the whole

00:33:27.520 --> 00:33:29.220
user interface of the computer.

00:33:29.220 --> 00:33:32.260
And it's really fun for
games and for kiosks,

00:33:32.260 --> 00:33:33.480
specifically.

00:33:33.480 --> 00:33:35.450
There's also enhanced frame support.

00:33:35.570 --> 00:33:39.020
You have things like being able
to remove decorations from frames.

00:33:39.020 --> 00:33:41.970
Frames in Java lingo are
Windows and things like that.

00:33:42.210 --> 00:33:46.100
There's a lot of things you can
do for dynamic layout of frames.

00:33:46.100 --> 00:33:48.540
There's support for a mouse wheel.

00:33:48.540 --> 00:33:51.500
So on a Mac, if you have a mouse with a
mouse wheel that you've bought,

00:33:51.500 --> 00:33:51.580
you can do that.

00:33:51.600 --> 00:33:56.700
You can then use that and it'll actually
be supported in your applications.

00:33:56.730 --> 00:33:58.860
And then there's also a
new focus architecture.

00:33:58.890 --> 00:34:02.280
And this is actually
a big change from 1.3.

00:34:02.300 --> 00:34:05.940
And 1.3 had some problems in focus
in that there was a different focus

00:34:05.990 --> 00:34:09.780
architecture between AWT and Swing,
and there's also a different focus

00:34:09.850 --> 00:34:14.560
architecture between what the platforms
have available and the different OSes.

00:34:14.560 --> 00:34:15.980
So it got really confusing.

00:34:16.110 --> 00:34:17.790
Like, what did activation mean?

00:34:17.800 --> 00:34:20.500
What did moving around between your
components -- how did you manage that?

00:34:20.500 --> 00:34:22.600
There's actually a brand
new focus architecture,

00:34:22.600 --> 00:34:25.570
and we'll show a little bit about that.

00:34:25.600 --> 00:34:26.940
And of course, there's a lot more.

00:34:26.940 --> 00:34:28.740
We're not going to get
into every detail of this.

00:34:28.780 --> 00:34:30.640
There's an entire conference
that Sun puts on that's all

00:34:30.710 --> 00:34:33.610
about these kinds of things,
and we're just trying to give you an

00:34:33.610 --> 00:34:35.870
overview of what things have changed.

00:34:36.560 --> 00:34:38.850
So now I want to give you a
demo of what we were talking

00:34:38.910 --> 00:34:40.420
about with the focus policy.

00:34:40.420 --> 00:34:43.360
One thing I have to say with
this demo is that this is

00:34:43.360 --> 00:34:45.260
running on a development system.

00:34:45.260 --> 00:34:48.960
It's actually running off of
my PowerBook's hard drive.

00:34:48.960 --> 00:34:51.840
So it's a development system that we're
working on that we're not releasing,

00:34:51.840 --> 00:34:53.960
but it has some of the
1.4 features in it.

00:34:53.960 --> 00:34:57.410
And we're going to show a little
bit about the focus policy.

00:34:57.420 --> 00:34:58.480
And yeah, this is my computer.

00:34:58.490 --> 00:35:00.740
Nobody's computer.

00:35:00.820 --> 00:35:03.770
And so what we're looking at
here is a little demo I made

00:35:03.770 --> 00:35:05.510
to show off how to focus it.

00:35:05.520 --> 00:35:09.880
And I sort of stripped it down
just to show you how it's built up.

00:35:09.880 --> 00:35:13.140
And this is just a big swing
container with a bunch of J buttons.

00:35:13.140 --> 00:35:15.720
You kind of tell that's where
all the buttons are located.

00:35:15.720 --> 00:35:18.480
And if I...

00:35:18.850 --> 00:35:19.290
and David Hau.

00:35:19.420 --> 00:35:19.800
Thank you.

00:35:19.800 --> 00:35:49.800
So, I'm going to go ahead and show
you a little bit of the demo.

00:35:49.800 --> 00:35:50.700
Now, that's all well and good.

00:35:50.700 --> 00:35:53.070
You can do this on our Java stuff today,
and I actually did this

00:35:53.110 --> 00:35:54.610
first on our 1.3.1.

00:35:54.720 --> 00:35:57.850
But now when we went to 1.4,
we wanted to look at what does the

00:35:57.940 --> 00:35:59.790
new focus architecture do for you.

00:35:59.880 --> 00:36:02.740
So,
what I wanted to do is I wanted to say,

00:36:02.760 --> 00:36:05.840
okay, I want to be able to just,
not using the mouse,

00:36:05.840 --> 00:36:09.130
be able to tab through the
components in this view.

00:36:09.150 --> 00:36:13.490
Now, if I were to use the focus
architecture that's built into 1.3,

00:36:13.490 --> 00:36:15.420
and I'll actually switch
to that right now,

00:36:15.470 --> 00:36:17.740
and if you see on the very top
here it says it's using the 1.3

00:36:17.740 --> 00:36:18.560
layout for the focus architecture,
and I'm going to go ahead and do that.

00:36:18.560 --> 00:36:18.560
And I'm going to go ahead and do that.

00:36:18.560 --> 00:36:18.560
And I'm going to go ahead and do that.

00:36:18.560 --> 00:36:19.520
And I'm going out focus policy.

00:36:19.600 --> 00:36:21.660
So this is the default focus policy.

00:36:21.700 --> 00:36:24.950
And I start tabbing around by
pressing the tab button now.

00:36:24.950 --> 00:36:27.630
It's just jumping around
randomly to whatever you,

00:36:27.630 --> 00:36:30.110
however you added your
components to this thing.

00:36:30.110 --> 00:36:33.360
Now, that's okay if you want to just,
you know, try to hunt and peck,

00:36:33.430 --> 00:36:35.860
but if I switch to the
focus policy in 1.4,

00:36:35.860 --> 00:36:39.760
I've actually implemented a
focus policy that follows all the

00:36:39.760 --> 00:36:42.810
components through the tour itinerary.

00:36:42.810 --> 00:36:44.170
So if I tab through

00:36:44.740 --> 00:36:47.470
You can do this,
you can see it follows through

00:36:47.480 --> 00:36:48.660
the whole itinerary of the tour.

00:36:48.660 --> 00:36:50.700
And we actually have some
things just for fun here.

00:36:50.700 --> 00:36:52.940
You can see the itinerary
and see the tour.

00:36:52.940 --> 00:36:56.350
Now, you're probably saying, well,
we can do this in 1.3.

00:36:56.350 --> 00:36:59.390
Yeah, you can do this really easily in
1.3 if you have one itinerary.

00:36:59.400 --> 00:37:01.350
But if you have multiple
itineraries here,

00:37:01.450 --> 00:37:04.730
so if I switch to another itinerary,
now we've just changed the focus policy

00:37:04.730 --> 00:37:06.720
to the new itinerary's focus policy.

00:37:06.720 --> 00:37:10.020
So without actually changing
anything except telling our focus

00:37:10.020 --> 00:37:13.590
policy object we've got a new object
in there that is our itinerary,

00:37:13.590 --> 00:37:14.630
we now can follow this.

00:37:14.700 --> 00:37:16.890
this itinerary through.

00:37:17.000 --> 00:37:22.400
and David We can also, you know,
we can have a whole bunch of other

00:37:22.400 --> 00:37:24.320
tours and jump through those.

00:37:24.320 --> 00:37:28.380
So this is, again,
this is not a groundbreaking feature

00:37:28.380 --> 00:37:32.230
in terms of you could somehow spoof
this same feature by building a

00:37:32.230 --> 00:37:33.720
whole bunch of code and do this.

00:37:33.720 --> 00:37:36.870
And, you know, but this,
in this code we actually just

00:37:36.870 --> 00:37:39.780
implement a focus policy,
apply it to that object and

00:37:39.780 --> 00:37:41.100
it just follows all the focus.

00:37:41.100 --> 00:37:44.250
And for accessibility this is
really important because if you

00:37:44.320 --> 00:37:47.410
want to let people actually use
this stuff in a meaningful way,

00:37:47.670 --> 00:37:51.390
they have to be able to tab to
the different items and then press

00:37:51.430 --> 00:37:55.500
the space bar and use the item
and interact with these components

00:37:55.500 --> 00:37:56.880
without actually using the mouse.

00:37:56.880 --> 00:37:59.450
And if there's some defined way
that you're supposed to navigate

00:37:59.450 --> 00:38:01.480
through things and if that
actually dynamically changes,

00:38:01.480 --> 00:38:04.350
this kind of focus policy
will help out a lot.

00:38:07.810 --> 00:38:13.080
So if we can go back to the slides.

00:38:13.080 --> 00:38:15.880
So the next thing we're
gonna talk about is Swing.

00:38:15.930 --> 00:38:19.480
And Swing has had some,
some additions to it.

00:38:19.480 --> 00:38:23.370
The most notable are the
indeterminate progress bars.

00:38:24.510 --> 00:38:26.570
The JSpinner,
which lets you do things like

00:38:26.650 --> 00:38:29.600
make date changers really easily,
just a little up and down arrow.

00:38:29.600 --> 00:38:32.060
Scrollable JTab panes.

00:38:32.120 --> 00:38:34.390
So if you--right now if you
have JTab panes and you add

00:38:34.440 --> 00:38:36.690
lots of elements to them,
they just start stacking up,

00:38:36.690 --> 00:38:37.960
and it's not very good looking.

00:38:37.960 --> 00:38:40.500
It actually doesn't follow
the Aqua HI guidelines.

00:38:40.630 --> 00:38:45.000
So the new scrollable JTab panes are
useful if you have to have lots of tabs.

00:38:45.000 --> 00:38:47.140
And for some reason,
a lot of people like tabs

00:38:47.200 --> 00:38:48.740
and like tons of tabs.

00:38:48.860 --> 00:38:50.250
So this helps out with that.

00:38:50.310 --> 00:38:53.140
I recommend you don't use tons of tabs,
but if you do,

00:38:53.210 --> 00:38:55.400
you can use the scrollable JTab pane.

00:38:55.420 --> 00:38:59.070
There's also a JFormatted text field,
which lets you handle things like

00:38:59.240 --> 00:39:02.700
formatting dates and other-- just any
object you can build formatters for

00:39:02.700 --> 00:39:04.390
and put right into this text field.

00:39:04.500 --> 00:39:06.270
There's also a new
drag-and-drop architecture,

00:39:06.340 --> 00:39:11.180
which we'll talk about more in the
tailoring the application session.

00:39:13.510 --> 00:39:15.930
So in Java 2D,
if you went to the graphics session,

00:39:15.940 --> 00:39:17.900
you heard a lot about this.

00:39:17.900 --> 00:39:22.420
In Java 2D, there's actually an entirely
new pipeline architecture.

00:39:22.420 --> 00:39:25.880
There's a really cool thing that's been
added called hardware acceleration.

00:39:25.960 --> 00:39:28.370
It's called volatile images and
it lets you hardware accelerate

00:39:28.370 --> 00:39:29.480
your off-screen images.

00:39:29.600 --> 00:39:32.010
So if you're trying to pull
images off-screen and then just

00:39:32.020 --> 00:39:34.830
splitting them up to the screen,
you can actually use the graphics card

00:39:34.830 --> 00:39:37.180
and hardware accelerate this stuff.

00:39:37.200 --> 00:39:40.800
There's a whole new image I/O framework
which is for pluggable images

00:39:40.800 --> 00:39:44.010
so you can build your own image
encoders and decoders and they

00:39:44.010 --> 00:39:45.760
just plug right into the system.

00:39:45.760 --> 00:39:48.890
So if you decide to come out
with brand new image format X,

00:39:48.900 --> 00:39:52.180
you can just add yours
into the image I/O format.

00:39:52.180 --> 00:39:54.050
And there's support
for bidirectional text.

00:39:54.050 --> 00:39:58.000
So if you're using things like
Arabic or Hebrew that have to go

00:39:58.000 --> 00:40:01.190
right to left and then sometimes
you throw in an English thing

00:40:01.360 --> 00:40:04.150
that has to go left to right,
it's really confusing if you have

00:40:04.150 --> 00:40:07.230
to write that support yourself
and this is taken care of for you.

00:40:07.240 --> 00:40:09.330
And there's a whole lot
more inside of Java 2D.

00:40:11.770 --> 00:40:13.610
Printing has had some major changes.

00:40:13.700 --> 00:40:16.620
There's some new things for
printer device discovery.

00:40:16.790 --> 00:40:19.470
It lets you find printers and
find information about them.

00:40:19.770 --> 00:40:21.700
There's actually an
extensible printing API,

00:40:21.700 --> 00:40:24.700
so you can add custom
things to the print service.

00:40:24.830 --> 00:40:28.190
And then if you actually are a
service provider of printing services,

00:40:28.200 --> 00:40:30.880
you can actually add new
functionality using just this

00:40:30.880 --> 00:40:33.520
plug-in API that's built in there.

00:40:34.900 --> 00:40:37.790
So now we're getting towards the
web and enterprise frameworks.

00:40:37.800 --> 00:40:40.300
There's actually a whole bunch of
things that are going on in here.

00:40:40.300 --> 00:40:44.910
And this is--there's a session on this,
which is our web services session that's

00:40:44.930 --> 00:40:46.250
going to talk about some of these things.

00:40:46.600 --> 00:40:50.860
XML processing is actually a useful
feature that they've bundled in

00:40:50.860 --> 00:40:52.770
of extensions of XML processing.

00:40:52.800 --> 00:40:54.700
It's some basic XML features.

00:40:54.960 --> 00:41:00.200
It handles your XSL,
your different kinds of

00:41:00.200 --> 00:41:02.600
DTDs and things like that,
all the stuff that goes into XML.

00:41:02.600 --> 00:41:04.020
It's got some basic functionality.

00:41:04.240 --> 00:41:07.200
And you can actually see on
SunSite all the specs for what

00:41:07.420 --> 00:41:09.860
their XML processing involves.

00:41:10.100 --> 00:41:13.660
The really good thing about this is that
you know you have at least some base

00:41:13.760 --> 00:41:16.540
functionality built into the 1.4 JDK.

00:41:16.540 --> 00:41:21.170
So you don't have to count on
bundling another XML parser or

00:41:21.170 --> 00:41:23.220
whatever you might be using XML for.

00:41:23.280 --> 00:41:25.040
You at least know
there's a known quantity.

00:41:25.040 --> 00:41:27.040
And if you have something
that you need to do specific,

00:41:27.060 --> 00:41:28.540
you can always bundle your own.

00:41:28.540 --> 00:41:30.670
But this is just a known quantity
that they're bundling inside.

00:41:31.220 --> 00:41:33.280
There's JDBC 3.0,
and I actually have some notes on this.

00:41:33.280 --> 00:41:35.360
I actually have some notes
on some of these things,

00:41:35.360 --> 00:41:36.780
because I can't remember everything.

00:41:36.780 --> 00:41:40.780
But there's things in
JDBC 3.0 like save points,

00:41:40.780 --> 00:41:45.170
keeping your result sets open,
better access to your metadata,

00:41:45.450 --> 00:41:49.280
getting automatically generated keys.

00:41:49.280 --> 00:41:52.780
Inside of the JNDI,
there's access to your

00:41:52.780 --> 00:41:54.030
domain name servers.

00:41:54.170 --> 00:41:59.810
There's LDAP access,
support for Corba object services.

00:41:59.860 --> 00:42:02.480
And then RMI has a bunch of enhancements.

00:42:02.590 --> 00:42:06.080
RMI,
you can get server-side stack traces.

00:42:06.080 --> 00:42:08.490
So if you've ever tried
to do RMI applications,

00:42:08.710 --> 00:42:12.370
one of the hardest things to do is to
get your information of what's going

00:42:12.370 --> 00:42:15.450
on on the server onto your client side
so that you can actually dump those

00:42:15.540 --> 00:42:18.190
to a console or something equivalent
so you can see what's going on on the

00:42:18.200 --> 00:42:21.520
server without having to find that
server or remotely log into that server,

00:42:21.520 --> 00:42:24.840
find the console dump of that server,
so you can actually get

00:42:24.900 --> 00:42:26.410
those stack traces back.

00:42:26.520 --> 00:42:31.760
RMI over IIOP lets you use Corba
servers instead of RMI APIs.

00:42:31.760 --> 00:42:35.740
So you can use RMI APIs to get to IIOP.

00:42:35.760 --> 00:42:41.710
And then let's go on to the next section.

00:42:41.890 --> 00:42:43.230
which is the core VM features.

00:42:43.240 --> 00:42:45.460
Now, the core VM features
are really interesting.

00:42:45.460 --> 00:42:48.120
There's gonna be an
entire session about this,

00:42:48.120 --> 00:42:51.910
which is 406, the Java VM internals,
where we're gonna talk about all the 1.4

00:42:51.910 --> 00:42:53.660
features that are inside of the core VM.

00:42:53.660 --> 00:42:57.710
But some of these that are highlights
for you to see are improved debugging,

00:42:57.710 --> 00:43:01.380
which the biggest thing here
is the full-speed debugging

00:43:01.380 --> 00:43:03.830
that we mentioned later,
and Blaine will talk a lot about

00:43:03.840 --> 00:43:05.140
what's actually improved in here.

00:43:05.140 --> 00:43:08.800
Assertions are something that developers
have been asking for for a long time,

00:43:08.800 --> 00:43:10.260
and they'll be available in 1.4.

00:43:11.080 --> 00:43:11.950
Chained exceptions.

00:43:11.960 --> 00:43:16.360
If you've been doing any coding
where you actually have some sort

00:43:16.360 --> 00:43:19.660
of factored-out framework below you,
and it throws exceptions,

00:43:19.660 --> 00:43:21.490
you catch those things,
and you want to re-throw

00:43:21.490 --> 00:43:23.640
them as your own exception,
you can bundle those

00:43:23.640 --> 00:43:25.110
exceptions inside of it.

00:43:25.140 --> 00:43:27.360
And it's things you sort
of could do in 1.3 before,

00:43:27.360 --> 00:43:31.560
but this has a structured way for doing
it so that you can actually get your

00:43:31.570 --> 00:43:33.310
chained description of exceptions.

00:43:33.320 --> 00:43:36.680
And I like to refer back to
what James Gosling was saying.

00:43:36.680 --> 00:43:39.560
It's one of those great things
about Java is that when things fail,

00:43:39.560 --> 00:43:42.070
they usually fail gracefully,
and they usually tell

00:43:42.070 --> 00:43:42.910
you why they failed.

00:43:42.920 --> 00:43:45.800
And this is getting you more
information about why this has failed.

00:43:45.800 --> 00:43:48.250
You want to see, you know,
not only did you get some

00:43:48.250 --> 00:43:51.880
array out-of-bounds thing,
it was caused because you had some

00:43:51.880 --> 00:43:54.760
network error below it that was thrown,
and you caught it somewhere,

00:43:54.760 --> 00:43:55.760
or something like that.

00:43:55.780 --> 00:43:59.380
And then there's things like
hot-swap code substitution,

00:43:59.380 --> 00:44:01.390
which Blaine will tell you all about.

00:44:01.400 --> 00:44:04.480
I really don't know even what that is,
but it's some cool stuff.

00:44:07.340 --> 00:44:11.270
So also inside of the core frameworks,
there's new I/O APIs,

00:44:11.270 --> 00:44:14.970
which that has to do with
actually getting access to

00:44:15.000 --> 00:44:17.190
the data buffer of the images.

00:44:17.250 --> 00:44:19.750
There's a whole bunch of things
going on in these I/O APIs,

00:44:19.750 --> 00:44:23.300
so you can actually get access to
almost anything that you need I/O.

00:44:23.340 --> 00:44:26.200
It has faster access,
has direct native access,

00:44:26.240 --> 00:44:29.440
and as was explained in this
morning's graphics talk,

00:44:29.460 --> 00:44:33.160
is getting really close to C speed
on a lot of these I/O things.

00:44:33.160 --> 00:44:36.650
There's a whole preferences API that
lets you take care of multiple

00:44:36.650 --> 00:44:38.200
users in terms of preferences.

00:44:38.220 --> 00:44:40.860
So you can--it's really
good for Mac OS X.

00:44:40.910 --> 00:44:43.720
I mean, you have multiple users on
Mac OS X out of the box,

00:44:43.720 --> 00:44:46.270
and this preferences API lets
you take care of that.

00:44:46.370 --> 00:44:49.320
There's a logging API that is useful.

00:44:49.330 --> 00:44:52.180
If you start using some of the things
in the Internet plugin that we'll

00:44:52.180 --> 00:44:55.180
talk in in the browser section,
there's whole ways to view

00:44:55.180 --> 00:44:56.650
this logging information.

00:44:56.660 --> 00:45:00.060
You can also log it to special
areas and things like that.

00:45:00.120 --> 00:45:03.100
And then there's IPv6 support,
which is going to be a

00:45:03.100 --> 00:45:04.010
little bit more advanced,
but it's going to be really

00:45:04.040 --> 00:45:06.120
important because we're
running out of IP addresses,

00:45:06.130 --> 00:45:07.340
and everyone's dealing with that.

00:45:07.460 --> 00:45:12.330
So IPv6 and those things are going to
be big things that your applications are

00:45:12.330 --> 00:45:15.480
going to want to take advantage of so
that when everything starts changing,

00:45:15.600 --> 00:45:17.570
it just all works.

00:45:18.800 --> 00:45:21.130
So with that,
I'd like to bring up Victor Hernandez,

00:45:21.130 --> 00:45:27.850
who's our Java Runtime Engineering lead,
and he has been working on some of

00:45:27.850 --> 00:45:32.740
the new I/O stuff and is going to give
us a little demo of what that can do.

00:45:32.740 --> 00:45:34.160
There we go.

00:45:34.160 --> 00:45:35.660
Hello.

00:45:35.660 --> 00:45:38.290
I'm here to show you the benefits
of using one of the most exciting

00:45:38.290 --> 00:45:41.200
features that's available in JDK 1.4.

00:45:41.200 --> 00:45:44.660
That feature is new I/O.

00:45:45.050 --> 00:45:46.920
So what exactly is new I/O?

00:45:47.160 --> 00:45:53.010
New I/O is the ability to allocate
and directly reference memory that's

00:45:53.010 --> 00:45:55.680
allocated in the native heap from Java.

00:45:55.880 --> 00:45:58.810
Previously,
you couldn't do this directly from Java,

00:45:58.810 --> 00:46:02.130
and coming in 1.4,
you will have the ability to do so.

00:46:02.220 --> 00:46:06.970
This will incredibly improve the
performance of any operation that

00:46:06.970 --> 00:46:11.180
requires access to native memory,
such as file access, sockets.

00:46:11.400 --> 00:46:16.140
And I'm going to show you a quick demo
of how it'll improve the-- you can even

00:46:16.240 --> 00:46:17.000
improve the performance of the Java 1.4.

00:46:17.000 --> 00:46:17.060
So let's get started.

00:46:17.060 --> 00:46:17.100
So let's get started.

00:46:17.100 --> 00:46:18.040
of your graphics.

00:46:22.500 --> 00:46:31.660
So what I have here is a flight
simulator written by Ken Russell,

00:46:31.660 --> 00:46:34.220
who is a hotspot VM engineer over at Sun.

00:46:34.220 --> 00:46:42.590
And it's a real-time rendering engine.

00:46:55.890 --> 00:47:00.840
So what we have right here is
just a huge set of data points.

00:47:00.840 --> 00:47:04.260
And right now,
I'm basically going to try to go

00:47:04.260 --> 00:47:10.200
up and get it to come back down and
show you the graphics performance.

00:47:10.200 --> 00:47:12.600
So if I go up, there we go.

00:47:12.600 --> 00:47:15.640
I'm not very good at flying airplanes.

00:47:17.700 --> 00:47:21.320
All right, so as you see right now,
this is rendering under JDK 1.3.

00:47:21.320 --> 00:47:24.420
You see the choppiness in general.

00:47:24.420 --> 00:47:28.610
And if we go over to 1.4...

00:47:30.250 --> 00:47:31.700
It's smooth.

00:47:31.870 --> 00:47:33.450
Pretty straightforward.

00:47:33.650 --> 00:47:36.760
Basically,
what we're moving over here is a

00:47:36.870 --> 00:47:43.030
lot of overhead of copies of the
native memory buffers back and forth

00:47:43.030 --> 00:47:45.540
between the heap and the native heap.

00:47:49.110 --> 00:47:52.330
So where can you go to
find out more about this?

00:47:52.350 --> 00:47:56.060
Come on Friday morning to
the Java Performance Session,

00:47:56.230 --> 00:48:00.390
and you'll find out how to make
your app look like that instead.

00:48:00.440 --> 00:48:01.150
Great.

00:48:01.150 --> 00:48:01.590
Thanks.

00:48:01.670 --> 00:48:03.170
Thanks a lot.

00:48:07.230 --> 00:48:11.490
So actually they showed me that demo
last week when they got it working,

00:48:11.490 --> 00:48:15.500
and it was actually running a lot faster
on our machines back at the office,

00:48:15.630 --> 00:48:18.140
but it was going between, like,
30 frames a second and, like,

00:48:18.160 --> 00:48:19.800
160 or something crazy like that.

00:48:19.800 --> 00:48:20.910
And you couldn't see a difference.

00:48:21.000 --> 00:48:23.390
So I actually told them to
slow it down for this session,

00:48:23.400 --> 00:48:24.740
put a lot more data in there.

00:48:24.740 --> 00:48:25.900
So it's kind of cool.

00:48:25.900 --> 00:48:27.440
That's one of the reasons
why when it comes up,

00:48:27.520 --> 00:48:29.540
it looks really choppy,
'cause there's actually a lot

00:48:29.540 --> 00:48:32.060
of information in that data
that they're showing there.

00:48:32.060 --> 00:48:34.050
It's real terrain information
from the Grand Canyon.

00:48:34.060 --> 00:48:36.260
So there's a lot going on there.

00:48:36.260 --> 00:48:39.980
And it's kind of cool to see
the difference in speed between

00:48:39.980 --> 00:48:45.080
actually using the native buffers
and uploading all that information.

00:48:46.310 --> 00:48:48.840
So security has had a lot of changes,
and it's really important to

00:48:48.840 --> 00:48:51.540
us to make sure that we keep up
with all these security changes

00:48:51.540 --> 00:48:54.400
because security is huge.

00:48:54.400 --> 00:48:58.740
So some of the things we have here
are the Java Secure Sockets extension.

00:48:58.740 --> 00:49:01.140
Now, that's bundled into 1.4.

00:49:01.140 --> 00:49:04.240
It was an extension in 1.3,
and we shipped it in 1.3.

00:49:04.240 --> 00:49:05.500
So you get this right now.

00:49:05.790 --> 00:49:10.360
And that's all of your
HTTPS kind of connections that

00:49:10.490 --> 00:49:13.960
are automatically authenticated,
and it just happens.

00:49:14.360 --> 00:49:18.270
There's the Java Cryptography
extension that uses the

00:49:18.270 --> 00:49:20.840
message authentication code.

00:49:20.900 --> 00:49:23.300
It lets you take care of
things like if you're talking

00:49:23.300 --> 00:49:26.620
over an insecure connection,
you can have some authentication key

00:49:26.620 --> 00:49:29.800
that is used to make sure that you're
actually sending secure packets.

00:49:30.120 --> 00:49:34.700
There's the authentication
and authorization services,

00:49:34.700 --> 00:49:39.600
the GSS API,
which is for Kerberos support,

00:49:39.600 --> 00:49:42.640
so you don't send your
passwords over the network,

00:49:42.700 --> 00:49:43.920
and you have just a single sign-up.

00:49:43.920 --> 00:49:45.420
You can sign on for each domain.

00:49:45.420 --> 00:49:51.070
Then there's the Java Certification
Path API that lets you build up

00:49:51.100 --> 00:49:52.980
certificate chains and things.

00:49:52.980 --> 00:49:56.700
So there's a lot of information
about all this on Sun's website,

00:49:56.780 --> 00:49:59.830
so you can check out more
details about this there,

00:49:59.830 --> 00:50:00.310
too.

00:50:01.390 --> 00:50:05.900
So that's sort of a high-level overview
of what are things that are new in 1.4.

00:50:06.110 --> 00:50:07.870
Now going

00:50:08.920 --> 00:50:12.130
With 1.4 development,
we're actually adding things

00:50:12.130 --> 00:50:15.280
in for 1.4 that will allow you
to have multiple JDK support.

00:50:15.280 --> 00:50:18.270
Now, I'm very specific here
by saying JDK support,

00:50:18.310 --> 00:50:21.430
and that is because we're setting
this up for you as developers to have

00:50:21.440 --> 00:50:24.600
multiple JDKs on your machine and
be able to switch back and forth.

00:50:24.680 --> 00:50:27.280
Because you as developers,
you know what's best for you and you

00:50:27.460 --> 00:50:28.990
know how to switch things around.

00:50:29.900 --> 00:50:33.910
We're trying to figure out exactly
what we should do for end users and

00:50:33.910 --> 00:50:36.750
to make sure that we give them the
best experience because we don't

00:50:36.750 --> 00:50:40.580
want their applications to break as
soon as we give them a 1.4 system.

00:50:40.580 --> 00:50:44.140
So we really need your feedback
on this and what would make sense.

00:50:44.140 --> 00:50:46.690
For details,
Blaine has a lot more information on the

00:50:46.690 --> 00:50:50.560
details of how this is going to happen
and how we might do things in the future.

00:50:50.560 --> 00:50:52.730
So definitely go to the 4.06 session.

00:50:55.490 --> 00:51:00.100
and as Ted announced yesterday,
we have the Java 1.4 Developer Preview.

00:51:00.180 --> 00:51:01.830
It's available right now.

00:51:01.990 --> 00:51:02.630
You can go get it.

00:51:02.750 --> 00:51:03.760
You can try it out.

00:51:03.760 --> 00:51:04.900
We encourage you to do it.

00:51:04.960 --> 00:51:06.090
Remember, it's a developer preview.

00:51:06.100 --> 00:51:08.510
It only runs on Jaguar.

00:51:09.260 --> 00:51:12.510
and the question we keep getting and we
have to remind everybody what's in it,

00:51:12.650 --> 00:51:16.840
it's got the Hotspot Client VM,
it's got the 131 GUI frameworks,

00:51:16.840 --> 00:51:18.920
but everything else inside of it is 1.4.

00:51:18.920 --> 00:51:21.110
So if you think about it,
it's what I just showed,

00:51:21.110 --> 00:51:23.670
there's the first section I talked about,
Swing and AWT,

00:51:23.710 --> 00:51:25.720
most of that is 1.3.1 still.

00:51:25.720 --> 00:51:28.290
So we don't have those features yet,
but everything else,

00:51:28.290 --> 00:51:30.520
all the chained exceptions,
the assertions and all

00:51:30.540 --> 00:51:32.080
those things are 1.4.

00:51:32.080 --> 00:51:35.540
The new IO, which is running there,
that was running with GL for Java.

00:51:36.130 --> 00:51:38.480
So a lot of functionality is
there and you can do things

00:51:38.480 --> 00:51:41.390
like all of your web services,
you can definitely do on

00:51:41.560 --> 00:51:43.140
this developer preview.

00:51:43.140 --> 00:51:46.150
So hopefully you'll check that out
and you'll get your feedback to us

00:51:46.150 --> 00:51:47.770
on what things we're doing well.

00:51:49.760 --> 00:51:54.200
and definitely go to session
406 for more details.

00:51:54.200 --> 00:51:57.250
So in summary,
what we've gone through today

00:51:57.480 --> 00:52:00.940
We know that the Java 2 platform
is included in Mac OS X.

00:52:00.940 --> 00:52:03.090
It's in every box.

00:52:03.430 --> 00:52:05.360
Java 1.3.1 is what's on there now.

00:52:05.360 --> 00:52:07.960
You can develop real
applications we saw with eBeam.

00:52:07.960 --> 00:52:12.790
They have a real application that ships
with a $600 piece of hardware and that's

00:52:12.790 --> 00:52:14.790
their free application that runs with it.

00:52:14.800 --> 00:52:17.430
It's all written in Java and
users don't know that.

00:52:17.460 --> 00:52:19.440
It just works.

00:52:19.440 --> 00:52:20.180
1.4 is coming.

00:52:20.250 --> 00:52:21.490
You got the developer preview.

00:52:21.500 --> 00:52:23.490
We've talked about that.

00:52:24.820 --> 00:52:26.640
and then the roadmap.

00:52:26.930 --> 00:52:28.770
I've talked about this a lot,
but just so you know

00:52:28.770 --> 00:52:29.840
where the sessions are.

00:52:30.060 --> 00:52:33.770
403, Java in the Browser,
is immediately after this in Room C,

00:52:33.980 --> 00:52:34.840
right over here.

00:52:34.930 --> 00:52:37.070
We'll talk about applets,
we'll talk about Web Start,

00:52:37.210 --> 00:52:40.830
we'll show you some things about
different browsers and what you have

00:52:40.830 --> 00:52:43.300
to worry about as an applet developer.

00:52:43.300 --> 00:52:46.350
Then 404 is tailoring
Java applications for Mac OS X.

00:52:46.520 --> 00:52:50.310
This is key for anyone who's
delivering applications on Mac OS X.

00:52:50.310 --> 00:52:53.120
You want to make sure that
everything looks good,

00:52:53.120 --> 00:52:55.460
everything feels like
a regular application.

00:52:55.460 --> 00:52:58.570
And we're going to have all
of our DTS engineers there.

00:52:58.570 --> 00:53:00.640
I'm going to show a couple
little things there,

00:53:00.640 --> 00:53:02.500
so it'll be fun.

00:53:02.500 --> 00:53:03.790
Java Web Services is tomorrow.

00:53:03.790 --> 00:53:06.530
And this is an overview, again,
of all the things you can do as

00:53:06.600 --> 00:53:09.150
web services in Java using XML.

00:53:09.180 --> 00:53:13.880
So we saw a lot of web services
things being demoed in Sherlock and

00:53:13.990 --> 00:53:17.370
other places in the keynote,
the opening keynote.

00:53:17.470 --> 00:53:20.820
And most of these web services,
or a lot of these web services,

00:53:20.820 --> 00:53:24.790
are being run on Java servers,
things that are running just regularly,

00:53:24.790 --> 00:53:27.360
their J2EE or SE servers,
running servlets,

00:53:27.480 --> 00:53:31.090
providing ways to get to your
web services through Java.

00:53:31.140 --> 00:53:34.460
There's just a huge family
of the Java family that is

00:53:34.460 --> 00:53:36.960
supporting these kinds of things.

00:53:36.960 --> 00:53:39.870
And then there's the 406,
which we've talked about a lot,

00:53:39.870 --> 00:53:41.810
is the Java Virtual Machine Internals.

00:53:41.820 --> 00:53:44.270
You can see a little bit
under the hood there.

00:53:44.280 --> 00:53:47.890
And then 407, which is Victor's session,
is Java Performance,

00:53:47.900 --> 00:53:50.180
talking about making your
applications faster and taking

00:53:50.180 --> 00:53:52.860
advantage of our new 1.4 features.

00:53:52.870 --> 00:53:56.380
And then, of course,
the QuickTime for Java.

00:53:56.380 --> 00:53:59.670
We don't talk about that a lot
because it really just works.

00:53:59.940 --> 00:54:02.570
You want QuickTime stuff
inside of your Java.

00:54:02.570 --> 00:54:07.130
You just start using QuickTime for Java,
just like Matt talked about

00:54:07.130 --> 00:54:09.260
with the E-Beam things.

00:54:09.260 --> 00:54:10.840
They found out about QuickTime for Java.

00:54:10.840 --> 00:54:14.390
They saw that they could export DV,
they could export QuickTime movies,

00:54:14.390 --> 00:54:17.480
and so they just turned these sessions
that have all this vector-based

00:54:17.480 --> 00:54:19.280
drawing into little QuickTime movies.

00:54:19.280 --> 00:54:19.800
And you can see exactly
the way people draw.

00:54:19.800 --> 00:54:20.450
And then, of course,
there's the QuickTime for Java.

00:54:20.460 --> 00:54:20.460
And then, of course,
there's the QuickTime for Java.

00:54:20.510 --> 00:54:22.000
You can see exactly the way people
drew it on screen and things.

00:54:22.000 --> 00:54:24.420
So it's a really good technology.

00:54:24.580 --> 00:54:27.230
It's available for Mac and for Windows.

00:54:27.270 --> 00:54:30.300
So for most of the cross-platform needs,
you can use it to do lots of

00:54:30.300 --> 00:54:33.700
things that just are not built
into the Java platform itself.

00:54:33.700 --> 00:54:36.010
And then, of course, WebObjects.

00:54:36.010 --> 00:54:39.010
WebObjects uses Java for
almost everything.

00:54:39.010 --> 00:54:40.310
So check them out.

00:54:40.310 --> 00:54:42.660
They have great server solutions.

00:54:42.730 --> 00:54:47.070
They have this client-side Java that all
uses swing applications on the client.

00:54:47.180 --> 00:54:49.100
So it's--and they are in room A1.

00:54:49.100 --> 00:54:50.160
They own that room.

00:54:50.160 --> 00:54:50.160
And they're in room A1.

00:54:50.160 --> 00:54:50.160
And they're in room A1.

00:54:50.160 --> 00:54:53.100
So if you want to go see them,
go to room A1.

00:54:53.180 --> 00:54:54.520
And it's all week over there.

00:54:54.520 --> 00:55:00.580
We also have the Java compatibility lab,
which is down in room L.

00:55:00.690 --> 00:55:06.660
So that's down the stairs back to the
front of the session--front of the hall.

00:55:06.660 --> 00:55:08.870
And if you go down there,
we actually have at least one or

00:55:08.870 --> 00:55:11.800
two Java engineers from our team
who can help you with any of your

00:55:11.800 --> 00:55:14.450
issues with your applications.

00:55:14.530 --> 00:55:17.790
If you have any questions on things
or want to just see how an application

00:55:17.860 --> 00:55:20.860
that you have written runs on Java,
go down there and see what we have.

00:55:20.860 --> 00:55:21.100
Go down there, talk to them.

00:55:21.100 --> 00:55:22.800
They'll answer any of your questions.

00:55:22.800 --> 00:55:25.340
And that's all week in room L.

00:55:25.460 --> 00:55:26.750
And, of course, our links and resources.

00:55:26.820 --> 00:55:29.180
We've got all the
documentation we talked about.

00:55:29.300 --> 00:55:32.220
Java dev mailing list hasn't
been talked about that much,

00:55:32.390 --> 00:55:35.610
but it's a really good resource
for anyone who's developing

00:55:35.610 --> 00:55:37.060
Java on the Macintosh.

00:55:37.060 --> 00:55:38.970
We watch that mailing list ourselves.

00:55:38.970 --> 00:55:41.020
Our DTS engineers watch
that mailing list.

00:55:41.020 --> 00:55:42.970
We answer questions as much as we can.

00:55:43.230 --> 00:55:46.460
Other developers answer questions,
oftentimes better than we do.

00:55:46.530 --> 00:55:48.690
So it's a really good resource.

00:55:48.890 --> 00:55:49.560
You can just--you can just go
down there and talk to them.

00:55:49.560 --> 00:55:51.340
And just send your questions there.

00:55:51.340 --> 00:55:55.080
There's anything ranging from
simple newbie questions to how do

00:55:55.080 --> 00:55:59.550
I do an about handler to--or how
do I do basic Java stuff to I'm

00:55:59.680 --> 00:56:03.270
trying to do this stuff with JNI,
how exactly do I do it,

00:56:03.270 --> 00:56:05.740
and someone will pipe
up and say I tried this,

00:56:05.810 --> 00:56:06.600
I tried this.

00:56:06.840 --> 00:56:09.160
So it's a really good developer forum.

00:56:09.170 --> 00:56:11.710
And then, of course,
when you have real questions that have

00:56:11.710 --> 00:56:14.470
to be answered by Apple employees,
contact DTS.

00:56:14.890 --> 00:56:19.260
Both Matt--Matt Drance and
Ted Jusvick are DTS engineers,

00:56:19.260 --> 00:56:19.920
and they're absolutely excellent.

00:56:20.130 --> 00:56:22.740
They--so call them--I mean,
send them email,

00:56:22.740 --> 00:56:24.700
and they'll fix your problems, hopefully.

00:56:28.030 --> 00:56:31.620
and the final thing is who to contact
about everything else and who we're

00:56:31.630 --> 00:56:34.130
going to bring up now is Alan Samuel.

00:56:34.260 --> 00:56:36.340
He's our evangelist for Java.

00:56:36.460 --> 00:56:39.990
He is otherwise known as "The Man."

00:56:40.790 --> 00:56:42.280
and he is the one to contact.

00:56:42.280 --> 00:56:43.870
Do you have any issues with Java?

00:56:43.930 --> 00:56:47.460
Anything outside the realm of
technically how do we do this?

00:56:47.580 --> 00:56:48.130
Talk to Alan.