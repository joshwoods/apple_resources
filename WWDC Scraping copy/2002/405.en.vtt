WEBVTT

00:00:02.430 --> 00:00:07.630
Good morning ladies and gentlemen and
welcome to session 405 Java Web Services.

00:00:07.640 --> 00:00:11.430
Waiting patiently on stage
for his cue is Steve Lewallen.

00:00:11.430 --> 00:00:13.430
Please welcome Steve.

00:00:13.710 --> 00:00:15.700
Good morning.

00:00:15.700 --> 00:00:19.530
So I am the tech lead for
Java classes at Apple,

00:00:19.530 --> 00:00:23.320
and today I'm actually going to
talk to you about Java web services

00:00:23.320 --> 00:00:25.520
from the client perspective.

00:00:25.520 --> 00:00:29.540
Before I came to Apple a few years ago,
I worked for a company that has a little

00:00:29.540 --> 00:00:32.980
bit to do with web services called IBM.

00:00:32.980 --> 00:00:35.670
And I did a bunch of client stuff,
so don't get worried that

00:00:35.730 --> 00:00:39.200
suddenly there's a server guy,
you know, doing classes stuff at Apple.

00:00:39.200 --> 00:00:44.310
But I did do some server stuff as well,
including working on

00:00:44.400 --> 00:00:47.380
a project called UDDI,
which is a business

00:00:47.380 --> 00:00:50.910
directory for services,
and I'll talk a bit

00:00:50.910 --> 00:00:57.050
about that more later,
with Microsoft and Ariba, as well as IBM.

00:00:57.060 --> 00:00:59.200
Those were the original founders of that.

00:00:59.320 --> 00:01:02.570
And it was interesting to be involved
in that because that was when the

00:01:02.570 --> 00:01:04.200
original thinking was taking place.

00:01:04.330 --> 00:01:06.350
How are people going to use web services?

00:01:06.350 --> 00:01:08.120
What are they going to do with them?

00:01:08.120 --> 00:01:10.000
And it wasn't just all about B2B.

00:01:10.940 --> 00:01:15.560
But as I look out on the web today,
if I go to a website and I want

00:01:15.560 --> 00:01:19.320
to learn about web services,
I'm hit over the head with server stuff.

00:01:19.320 --> 00:01:21.620
I'm told how to set up my web server.

00:01:21.630 --> 00:01:23.490
I'm told I need this
server and that server,

00:01:23.630 --> 00:01:26.740
and I need a configuration
file and all these things.

00:01:26.750 --> 00:01:30.500
But web services is
mostly about a client,

00:01:30.500 --> 00:01:30.820
hopefully.

00:01:30.820 --> 00:01:33.660
Hopefully there will be far more
clients out there than servers.

00:01:33.660 --> 00:01:37.780
So given Apple's focus on clients,
I wanted to give you a perspective

00:01:37.910 --> 00:01:40.820
of web services solely from
the client's perspective.

00:01:40.880 --> 00:01:43.080
A developer building
a client application.

00:01:43.080 --> 00:01:44.900
So I'm not going to set up a web server.

00:01:44.920 --> 00:01:48.520
I'm going to use web
servers out on the web,

00:01:48.520 --> 00:01:50.140
live, that Apple doesn't run.

00:01:50.170 --> 00:01:53.340
I have a couple of them in case
these companies decide to take

00:01:53.340 --> 00:01:59.000
theirs down during my demo,
which can happen in a demo.

00:01:59.000 --> 00:02:02.340
So with that,
I think the thing to do first

00:02:02.340 --> 00:02:05.020
is define what a web service is.

00:02:05.020 --> 00:02:09.950
A few years ago,
when I don't know who it was

00:02:09.950 --> 00:02:14.520
that coined the term web service,
came along and did that,

00:02:14.520 --> 00:02:19.720
everyone stood up and said,
they recognize the dollar value.

00:02:19.720 --> 00:02:21.980
This is the latest lingo.

00:02:22.010 --> 00:02:23.750
And so they said, oh,
I have a web service.

00:02:23.750 --> 00:02:25.210
Everything I have is a web service.

00:02:25.210 --> 00:02:26.750
My web server's a web service.

00:02:26.750 --> 00:02:27.970
My email's a web service.

00:02:27.970 --> 00:02:29.190
My phone's a web service.

00:02:29.240 --> 00:02:31.360
Whatever's a web service.

00:02:31.410 --> 00:02:36.450
It kind of watered down the meaning of it
to the point where if you wanted to have

00:02:36.490 --> 00:02:40.720
a definition that covered everything,
you'd probably have

00:02:40.720 --> 00:02:43.140
something like the following.

00:02:43.140 --> 00:02:47.190
You'd say it's just an automated
application that's accessible

00:02:47.190 --> 00:02:51.240
via any type of protocol,
HTTP, SMT, or whatever,

00:02:51.240 --> 00:02:53.800
that you message with XML.

00:02:53.800 --> 00:02:57.030
In this presentation,
given my previous background at

00:02:57.030 --> 00:03:00.040
IBM where we dealt a lot with SOAP,
I want to focus the

00:03:00.670 --> 00:03:04.760
definition down to being this,
but with SOAP specifically.

00:03:04.760 --> 00:03:08.470
And I'll talk, specifically,
and I'll talk about what SOAP is

00:03:08.500 --> 00:03:11.870
and in detail and how you use it,
et cetera.

00:03:12.700 --> 00:03:18.330
So I also want to get across the
point that Mac OS X is a great free

00:03:18.370 --> 00:03:21.260
quote-unquote client for web services.

00:03:21.260 --> 00:03:26.200
We have a lot of different technology
to help you build a web services client.

00:03:26.200 --> 00:03:32.260
One of the best, a little prejudicial,
but is J2SE built in Mac OS X.

00:03:32.260 --> 00:03:35.810
And with 1.4,
we're moving ahead with that

00:03:35.810 --> 00:03:41.500
even more where an XML parser is
included by default with J2SE 1.4.

00:03:41.500 --> 00:03:41.500
And of course,
you have a great network stack

00:03:41.500 --> 00:03:41.510
accessibility in J2SE on Mac OS X.

00:03:41.510 --> 00:03:41.520
And it's also, of course,
fully compatible with open source.

00:03:41.520 --> 00:03:41.530
One of the drivers for web
services is the Apache community.

00:03:41.530 --> 00:03:41.530
And in fact,
I'm going to be demoing some of

00:03:41.530 --> 00:03:41.530
their code here today called Access.

00:03:41.530 --> 00:03:41.530
And this is just a SOAP SDK.

00:03:41.530 --> 00:03:41.530
It's a really good one.

00:03:41.530 --> 00:03:41.540
I like it for a number of reasons,
one of which is it's

00:03:42.110 --> 00:04:11.460
protocol independent.

00:04:11.610 --> 00:04:15.520
that's a theme I'm going to hit a
few times during the presentation,

00:04:15.970 --> 00:04:20.700
because the protocol aspect of SOAP,
by many, is believed to just be HTTP,

00:04:20.720 --> 00:04:24.740
just because that's de facto the
first protocol people are using.

00:04:24.740 --> 00:04:27.060
But there are others
that you can use as well.

00:04:27.060 --> 00:04:30.870
And I just want to point out
that SOAP Access is also used by

00:04:30.940 --> 00:04:36.450
our WebObjects group for their
client and server Web services.

00:04:36.660 --> 00:04:42.580
But I also want to point out that you
can do all of this on J2SE 1.3.1 as well.

00:04:42.580 --> 00:04:47.720
You just need to pull across the
down-to-earth machine an XML parser

00:04:47.720 --> 00:04:51.690
like the Xerces parser is a great,
great parser.

00:04:52.260 --> 00:04:57.900
To build a web service, you,
again taking this definition further

00:04:57.900 --> 00:05:00.500
where you actually need SOAP,
you start with SOAP.

00:05:00.590 --> 00:05:03.440
That requires an XML parser,
a good network stack,

00:05:03.440 --> 00:05:05.370
and protocol support,
whichever one you want to

00:05:05.380 --> 00:05:09.450
run your SOAP requests over,
which in this case would be HTTP, SMTP,

00:05:09.450 --> 00:05:09.920
etc.

00:05:12.370 --> 00:05:15.660
To define what SOAP is, SOAP stands for
Simple Object Access Protocol.

00:05:15.660 --> 00:05:18.290
This is a definition I copied
from the folks who did SOAP.

00:05:18.340 --> 00:05:21.780
I added XML-based, but basically this is
the official definition.

00:05:21.780 --> 00:05:24.560
Lightweight XML-based protocol
for exchange of information in a

00:05:24.560 --> 00:05:26.560
decentralized distributed environment.

00:05:26.560 --> 00:05:28.810
It gets a lot of buzzwords in there.

00:05:28.820 --> 00:05:33.410
What this really means,
when I was involved in

00:05:33.410 --> 00:05:38.240
this work a few years ago,
in establishing these

00:05:38.240 --> 00:05:45.830
standards in UDDI especially,
The problem that was really

00:05:46.100 --> 00:06:06.900
[Transcript missing]

00:06:07.250 --> 00:06:12.720
But all those devices and the
protocols that you use to get from

00:06:12.720 --> 00:06:15.520
one to the other are disparate.

00:06:15.810 --> 00:06:18.270
There's all kinds of things going on.

00:06:18.270 --> 00:06:21.630
So you can't use the
traditional middleware of Corbo

00:06:21.630 --> 00:06:24.790
over IOP or straight HTTP,
piggybacking on HTTP,

00:06:24.910 --> 00:06:29.480
which a lot of us have been doing
to get through the firewall issue.

00:06:30.480 --> 00:06:36.190
So, you need something that captured the
meaning of what you wanted to do,

00:06:36.190 --> 00:06:40.110
but was independent of all these
protocols to connect all these

00:06:40.110 --> 00:06:41.880
different devices together.

00:06:41.880 --> 00:06:45.160
It's sort of like the analogy
that I like to give is,

00:06:45.200 --> 00:06:48.670
if I write a letter today,
if any of us write a letter,

00:06:48.670 --> 00:06:51.740
we write it in the
language of our choice.

00:06:51.800 --> 00:06:52.600
I'd write it in English.

00:06:52.640 --> 00:06:54.970
And all I can guarantee is
the content of that message,

00:06:54.970 --> 00:06:57.600
and I pretty much have an idea
that whoever's eventually going

00:06:57.600 --> 00:07:00.450
to receive it is going to be the
one that's going to receive it.

00:07:00.480 --> 00:07:02.300
And whoever's going to receive
it knows the same language.

00:07:02.300 --> 00:07:03.120
They can read English.

00:07:03.120 --> 00:07:05.420
But once I put that
letter in the mailbox,

00:07:05.420 --> 00:07:07.850
I don't know how it
gets to its destination,

00:07:07.850 --> 00:07:09.550
plane train or automobile.

00:07:09.610 --> 00:07:10.200
I don't know.

00:07:10.200 --> 00:07:11.130
All of the above.

00:07:11.600 --> 00:07:13.330
Maybe it's carried on foot.

00:07:13.330 --> 00:07:14.290
Who knows?

00:07:14.340 --> 00:07:17.330
But the same is true of SOAP.

00:07:17.420 --> 00:07:21.330
Again, most people have an idea of it
just running over HTTP protocol,

00:07:21.400 --> 00:07:23.720
but it could go over all sorts of things.

00:07:23.750 --> 00:07:27.350
SMTP is one of my favorites
that's not used yet,

00:07:27.350 --> 00:07:28.240
really.

00:07:28.240 --> 00:07:30.460
So, all that matters.

00:07:30.480 --> 00:07:35.080
All that matters, then, is that package,
the SOAP payload that gets across the

00:07:35.170 --> 00:07:36.550
meaning of what you're trying to do.

00:07:38.900 --> 00:09:53.100
[Transcript missing]

00:09:53.700 --> 00:09:59.200
[Transcript missing]

00:09:59.400 --> 00:13:47.700
[Transcript missing]

00:13:48.830 --> 00:13:53.360
So I wanted to just touch upon
a few real world applications.

00:13:53.510 --> 00:13:57.300
And a month or two ago,
I stumbled across these.

00:13:57.310 --> 00:14:02.000
UC Berkeley is deploying a unified
messaging system using SOAP.

00:14:02.000 --> 00:14:05.010
I don't know how far along
they are with this program,

00:14:05.060 --> 00:14:08.330
but the gist of the idea is that
they have their student records,

00:14:08.430 --> 00:14:10.740
class schedules,
all these different things,

00:14:10.740 --> 00:14:11.960
and legacy systems.

00:14:11.960 --> 00:14:15.690
And they want to provide
access to this information via,

00:14:15.830 --> 00:14:19.480
over the phone, you know,
you just press the buttons, you know,

00:14:19.480 --> 00:14:21.730
press one for the class schedule,
press two for whatever.

00:14:21.730 --> 00:14:25.880
And they also want to provide
access through the web as well.

00:14:25.980 --> 00:14:29.860
So with SOAP, they can have these systems
package up these SOAP messages.

00:14:29.860 --> 00:14:32.460
And someone calls on the phone
and they type in a certain number,

00:14:32.490 --> 00:14:34.280
their student ID,
or they go on the web and

00:14:34.280 --> 00:14:35.480
type in the student ID.

00:14:35.480 --> 00:14:37.570
Eventually,
SOAP message will be packaged up

00:14:37.660 --> 00:14:39.990
and off it goes to some system
and gives them some results.

00:14:41.400 --> 00:14:41.940
The United Kingdom.

00:14:42.480 --> 00:14:45.030
The United Kingdom has an e-government
interoperability framework.

00:14:45.340 --> 00:14:52.900
And the theme of this,
the desired structure of this is that

00:14:52.900 --> 00:14:58.310
central and local governments would share
all their information via SOAP and UDDI,

00:14:58.310 --> 00:15:01.790
the Universal Description
Discovery and Integration,

00:15:01.790 --> 00:15:05.660
kind of the business directory type
thing that I worked on a few years ago.

00:15:05.660 --> 00:15:10.880
So those are real world things people
are really getting their work done.

00:15:11.970 --> 00:15:14.680
And they're not going with
other traditional things,

00:15:14.680 --> 00:15:16.220
Corbar or RMI or something.

00:15:16.220 --> 00:15:19.700
Those are great,
but because of other limitations,

00:15:19.990 --> 00:15:24.020
they're scaling for what customers
and things they can connect

00:15:24.020 --> 00:15:25.500
is more limited than SOAP.

00:15:28.120 --> 00:15:32.150
So now I want to go over just
a SOAP technical overview.

00:15:32.150 --> 00:15:35.590
I'm not going to plunge very, very deep,
but I do want to show you the structure

00:15:35.590 --> 00:15:37.560
of SOAP and a bit about how it works.

00:15:39.190 --> 00:15:41.680
So again, SOAP is XML-based messaging.

00:15:41.680 --> 00:15:46.540
If you look at a SOAP message,
and I'll show you a few, it's in XML.

00:15:46.540 --> 00:15:48.720
It's all in XML,
which is great because anyone

00:15:48.730 --> 00:15:51.840
can get out a parser and they can
parse it and they can build XML.

00:15:51.840 --> 00:15:57.660
You could construct a SOAP message
by hand even and just send it across

00:15:57.660 --> 00:16:00.780
with a put or something over HTTP.

00:16:01.780 --> 00:16:04.750
The SOAP message itself, again,
being transport neutral,

00:16:04.750 --> 00:16:08.510
just defines the contents of the message,
who it's eventually intended for,

00:16:08.510 --> 00:16:10.850
and optional attributes that can be used.

00:16:10.890 --> 00:16:12.550
I'll discuss optional
attributes in a bit.

00:16:12.810 --> 00:16:18.760
No method of how to send or receive
the SOAP message is comprised

00:16:18.760 --> 00:16:21.770
in the SOAP message itself.

00:16:21.930 --> 00:16:23.930
SOAP is inherently actually one way.

00:16:23.930 --> 00:16:25.150
It's just a message.

00:16:25.150 --> 00:16:26.180
It gets sent off.

00:16:26.180 --> 00:16:27.690
That's all there is to it.

00:16:27.800 --> 00:16:30.780
But the de facto way people
have been using it over HTTP...

00:16:31.970 --> 00:16:33.780
That's request-response.

00:16:33.780 --> 00:16:38.760
That has formed a good RPC mechanism
that people are used to.

00:16:39.210 --> 00:16:43.780
They have a response
format that comes back,

00:16:43.780 --> 00:16:45.700
and we'll talk about
more of that in a minute.

00:16:45.780 --> 00:16:48.060
SOAP also defines a
fault reporting system.

00:16:48.200 --> 00:16:51.930
Eventually, if something goes wrong,
you want to know what went wrong,

00:16:51.930 --> 00:16:54.220
where it went wrong,
get some description or

00:16:54.260 --> 00:16:56.280
something you can tell your user.

00:16:57.010 --> 00:17:00.820
So, graphically speaking,
containment-wise, on the right-hand side,

00:17:00.820 --> 00:17:02.150
you have the SOAP envelope.

00:17:02.160 --> 00:17:04.850
In it,
you have the SOAP header with these

00:17:04.850 --> 00:17:08.230
optional elements and the SOAP body,
the actual meaning of the message.

00:17:08.240 --> 00:17:13.180
With the SOAP headers,
you can define optional attributes.

00:17:13.180 --> 00:17:16.580
Some people are sticking transaction
IDs in them and doing other things,

00:17:16.580 --> 00:17:21.210
and that is going to be leveraged as
other standards for SOAP come along.

00:17:21.260 --> 00:17:25.820
It's the generic holding
place for these other things.

00:17:26.900 --> 00:17:29.790
You can also specify
something in SOAP that says,

00:17:29.800 --> 00:17:33.760
when my message gets somewhere and
I have some extra optional header,

00:17:33.760 --> 00:17:36.300
since I don't know exactly how
it's going to arrive there,

00:17:36.300 --> 00:17:38.870
it might go through some other node,
and I'll describe what

00:17:38.900 --> 00:17:41.530
a node is in a minute,
I want to make sure that that guy

00:17:41.530 --> 00:17:45.240
can understand what I'm saying,
that he's just not parsing it,

00:17:45.240 --> 00:17:48.370
ignoring what he doesn't understand,
and sending it on.

00:17:48.400 --> 00:17:51.200
So, there's an attribute there that
says you must understand this

00:17:51.200 --> 00:17:52.540
if you don't generate a fault.

00:17:52.770 --> 00:17:56.040
And again, the SOAP body contains
the actual message.

00:17:57.430 --> 00:17:59.260
So, nodes, roles, and actors.

00:17:59.260 --> 00:18:03.760
If you really want to understand how
SOAP works and how SOAP is envisioned

00:18:03.870 --> 00:18:09.200
to work more than just over HTTP,
just a two-peer architecture,

00:18:09.200 --> 00:18:12.000
a client-server,
you should understand nodes, roles,

00:18:12.070 --> 00:18:12.700
and actors.

00:18:12.700 --> 00:18:16.290
So, SOAP messages are processed by nodes.

00:18:16.290 --> 00:18:19.860
Everything in a
transaction is a SOAP node.

00:18:19.900 --> 00:18:21.430
A client is a node.

00:18:21.580 --> 00:18:24.160
The final destination is a node.

00:18:24.330 --> 00:18:26.700
Anyone in between is a node.

00:18:27.380 --> 00:18:29.970
Nodes play different types of roles.

00:18:29.970 --> 00:18:34.110
There's three default roles,
and you can define additional

00:18:34.110 --> 00:18:36.230
roles if you want yourself.

00:18:36.240 --> 00:18:41.580
The next role, it's called next,
is just whoever receives

00:18:41.580 --> 00:18:43.380
the message next.

00:18:43.430 --> 00:18:50.880
Everybody implements the next role,
and they must, by implementing that role,

00:18:50.880 --> 00:18:53.050
properly parse the message,
generate a fault if they don't

00:18:53.050 --> 00:18:54.360
understand certain things,
etc.

00:18:54.360 --> 00:18:57.280
There's an anonymous role,
which is just a final destination.

00:18:57.300 --> 00:19:02.780
There's a non-role,
which is you may define custom roles

00:19:02.780 --> 00:19:10.470
and things and have additional header
elements that really are just additional

00:19:10.470 --> 00:19:13.710
data to other header elements.

00:19:13.820 --> 00:19:16.620
So, in that case,
you just have a non-role for that, and,

00:19:16.620 --> 00:19:18.080
of course, custom ones.

00:19:18.080 --> 00:19:20.360
So,
you could have a role that says logging.

00:19:20.360 --> 00:19:24.280
Let's say that you wanted your
message to be logged at each site

00:19:24.280 --> 00:19:26.420
along the way that it traveled.

00:19:26.420 --> 00:19:30.980
You could define a log role,
and you could say each node must

00:19:31.160 --> 00:19:35.880
understand that role if they
don't generate a fault code.

00:19:35.880 --> 00:19:40.560
So, that's the nodes, roles, and actors.

00:19:40.560 --> 00:19:42.990
And, again,
this diagram is just demonstrating

00:19:42.990 --> 00:19:44.740
we have three different nodes.

00:19:44.740 --> 00:19:45.820
They have different roles.

00:19:45.860 --> 00:19:50.100
The message is going
over different protocols.

00:19:50.100 --> 00:19:52.540
Generally,
the client only knows the first protocol.

00:19:52.540 --> 00:19:56.390
He's not aware of whether the
message travels along multiple nodes.

00:19:56.420 --> 00:19:59.730
or he's sending it to
its final destination.

00:20:00.960 --> 00:20:04.280
And by the way, I mean,
SOAP can even be defined.

00:20:04.280 --> 00:20:07.440
The transport can even
be defined as I copy.

00:20:07.440 --> 00:20:08.980
You know, I'm sitting in an application.

00:20:08.980 --> 00:20:11.260
I have two machines,
and I'm sitting at one machine,

00:20:11.260 --> 00:20:16.340
and I do something, and it says,
please insert a floppy,

00:20:16.340 --> 00:20:19.400
and I insert a floppy, and it writes a
SOAP message to that floppy,

00:20:19.400 --> 00:20:22.140
and it says, please eject floppy and
carry it over to machine B,

00:20:22.140 --> 00:20:24.200
and I do that,
and I stick it in machine B,

00:20:24.200 --> 00:20:27.620
and I hit a button, and it reads it in,
and then it writes back a

00:20:27.640 --> 00:20:29.040
SOAP response on the floppy.

00:20:29.100 --> 00:20:31.360
It says, please eject this and
stick it in machine A,

00:20:31.360 --> 00:20:34.440
and I do that as well,
and that's valid as well because

00:20:34.450 --> 00:20:35.940
SOAP doesn't define the protocol.

00:20:35.940 --> 00:20:37.400
In that case, I was the protocol.

00:20:40.400 --> 00:22:41.200
[Transcript missing]

00:22:42.540 --> 00:22:45.950
So this is a slightly more
interesting SOAP RPC message.

00:22:45.960 --> 00:22:49.240
The additions here really
are on the SOAP body.

00:22:49.240 --> 00:22:51.460
In line 6,
we see the method name echo string.

00:22:51.460 --> 00:22:52.650
This is a very simple RPC.

00:22:52.680 --> 00:22:55.630
It's just echo back to
me what I sent to you.

00:22:55.790 --> 00:22:59.070
It has a test parameter
in line 7 that says hello,

00:22:59.200 --> 00:23:01.310
and then it gets a response.

00:23:01.370 --> 00:23:06.790
And SOAP RPC replies a structure,
first thing being the return value,

00:23:06.790 --> 00:23:12.380
and then the out and in-out parameters
in the same order they were sent in,

00:23:12.380 --> 00:23:16.420
or a fault code with fault string,
fault actor.

00:23:16.420 --> 00:23:20.730
So you want to know if there were
10 nodes within this SOAP message,

00:23:20.730 --> 00:23:23.160
how the SOAP message was processed.

00:23:23.160 --> 00:23:25.880
You want to know that the 7th
node is the guy that failed,

00:23:26.060 --> 00:23:27.240
and you want to know why.

00:23:27.240 --> 00:23:29.530
You don't want to just know, oh,
it went into the great bit

00:23:29.530 --> 00:23:30.860
bucket in the sky and died.

00:23:31.360 --> 00:23:35.410
So the SOAP RPC reply then
for that is very simple also.

00:23:35.450 --> 00:23:39.080
We see this echo string
response in line 4.

00:23:39.080 --> 00:23:41.530
In line 5, we see the hello string back.

00:23:41.610 --> 00:23:42.580
Very, very simple.

00:23:42.580 --> 00:23:44.790
Obviously,
you can do much more complex things,

00:23:44.790 --> 00:23:47.990
but that's what fit on the screen,
so that's why I put that up there.

00:23:48.750 --> 00:23:55.490
So this isn't worth a whole lot if
you don't have some way to describe

00:23:55.630 --> 00:23:57.840
the interface to your SOAP service.

00:23:57.840 --> 00:24:01.590
And you do that by using the web
services description language.

00:24:01.590 --> 00:24:05.780
And that's IDL, an XML schema.

00:24:05.780 --> 00:24:08.740
If you're familiar with Corbo
or DCE or DCOM or something,

00:24:08.740 --> 00:24:11.490
you always had an IDL,
some intermediate description

00:24:11.520 --> 00:24:13.720
language you wrote your interface in.

00:24:14.020 --> 00:24:18.530
Eons ago, people would sit down and write
their interface in IDL first,

00:24:18.650 --> 00:24:21.860
then generate from that a
skeleton for their server,

00:24:22.040 --> 00:24:25.870
stubs for their client,
fill out the logic for their skeleton,

00:24:25.960 --> 00:24:29.110
and then implement the
application with that.

00:24:29.670 --> 00:24:33.520
Nowadays, people like to start with a
language they're familiar with.

00:24:33.530 --> 00:24:37.460
One of the reasons RMI is so great
is that its interface is Java.

00:24:37.460 --> 00:24:42.920
So you just write your
Java RMI application.

00:24:42.960 --> 00:24:43.930
And then you can do that.

00:24:44.050 --> 00:24:46.190
If people want to, using RMI IRP,
for example,

00:24:46.190 --> 00:24:49.220
they can generate IDL from that instead,
kind of the reverse.

00:24:52.560 --> 00:24:56.930
The web services IDL, WSDL, specifies,
again,

00:24:56.940 --> 00:24:59.200
what you'd expect in these other IDLs.

00:24:59.260 --> 00:25:01.900
Method name, printer types,
location of the service,

00:25:01.960 --> 00:25:02.680
which is kind of new.

00:25:02.680 --> 00:25:06.970
This is optional, but in WSDL,
if you go grab some WSDL off the web,

00:25:06.970 --> 00:25:11.650
and I'll show you in a bit some places
where you can do that quite easily,

00:25:11.650 --> 00:25:17.420
it has the DNS name for the web
service that you'll be talking to,

00:25:17.420 --> 00:25:19.650
which is really neat.

00:25:19.850 --> 00:25:22.380
You just get the WSDL,
and a lot of times that's all you need.

00:25:22.420 --> 00:25:26.840
So again,
WSDL is typically used to provide client

00:25:26.970 --> 00:25:28.540
interface to existing web services.

00:25:28.540 --> 00:25:33.760
So what people are doing right now
is taking legacy systems that are

00:25:33.760 --> 00:25:38.860
running in Corbo or something else,
and they're using compilers

00:25:38.860 --> 00:25:43.740
such as Java to WSDL that reads
Java and generates WSDL from it,

00:25:43.740 --> 00:25:48.860
and then they're giving it to
their Microsoft and Net clients,

00:25:49.700 --> 00:25:53.930
or other Java clients that are
then using that with a WSDL to

00:25:53.930 --> 00:25:56.080
Java or WSDL to .NET or whatever.

00:25:56.130 --> 00:25:59.520
I haven't used the .NET tools,
but that generates then

00:25:59.520 --> 00:26:03.200
the language-specific
bindings that they need.

00:26:03.240 --> 00:26:07.750
And again, as I said,
it may be used to initially

00:26:07.750 --> 00:26:10.790
define the interface as well.

00:26:11.750 --> 00:26:15.840
This is a typical WSDL scenario.

00:26:16.200 --> 00:26:18.600
Again, people have their
existing server in Java.

00:26:18.600 --> 00:26:20.690
They use that compiler I mentioned.

00:26:20.690 --> 00:26:24.660
They generate the WSDL,
and they publish the WSDL to some

00:26:24.660 --> 00:26:27.880
sort of web services listing.

00:26:27.990 --> 00:26:32.780
Sometimes that's a UDDI type of thing,
which is more like a DNS--people can use

00:26:32.780 --> 00:26:35.460
it almost as a DNS lookup or something.

00:26:36.020 --> 00:26:36.720
and his team.

00:26:36.720 --> 00:26:40.210
They just put it on a web page,
and we'll go into more of that later.

00:26:40.350 --> 00:26:44.320
Somebody else comes along,
they grab the WSDL again,

00:26:44.320 --> 00:26:48.590
and there is no such thing as
WSL to Objective-C compiler,

00:26:48.610 --> 00:26:51.550
but if there was such a thing,
you'd read in WSDL,

00:26:51.550 --> 00:26:55.690
generate an Objective-C binding,
so you get an Objective-C object,

00:26:55.980 --> 00:26:59.850
bring it into your IDE and build your
business application out of it so

00:26:59.850 --> 00:27:04.820
that then you can call the existing
server up there at the top left.

00:27:04.900 --> 00:28:16.600
[Transcript missing]

00:28:17.810 --> 00:28:20.650
So, manual discovery is what
I term the Yahoo approach,

00:28:21.010 --> 00:28:24.160
where somebody has
manually cataloged this.

00:28:24.260 --> 00:28:27.870
Either a company is out there
searching the web for web services,

00:28:27.870 --> 00:28:30.400
and they're publishing them.

00:28:30.400 --> 00:28:31.830
I'll give a couple examples of that.

00:28:31.900 --> 00:28:33.830
Actually, they're at the bottom.

00:28:33.840 --> 00:28:36.760
Southcentral.com, xmethods.com,
those are two good ones.

00:28:39.950 --> 00:28:43.150
If someone adds to this
service a search engine,

00:28:43.260 --> 00:28:46.890
an index, categorization,
I'll give you a demo of what

00:28:46.890 --> 00:28:48.300
those web pages look like.

00:28:48.310 --> 00:28:53.580
The semi-automatic discovery
is a well-specified lookup.

00:28:53.690 --> 00:28:56.000
Actually,
a lot of people are providing web

00:28:56.000 --> 00:28:57.990
services to look up web services.

00:28:57.990 --> 00:29:02.940
An example of that is UDDI,
as I mentioned before.

00:29:02.940 --> 00:29:07.020
This is an industry initiative
for publishing web services

00:29:07.090 --> 00:29:08.810
and discovering them.

00:29:09.820 --> 00:29:13.760
The latest inspection I mentioned,
and Disco is a Microsoft legacy

00:29:13.890 --> 00:29:15.110
version they had.

00:29:15.110 --> 00:29:19.380
I believe they still support it,
but they've also embraced UDDI.

00:29:20.960 --> 00:29:22.770
So Universal Description, Discovery,
and Integration.

00:29:22.880 --> 00:29:25.460
This is two things.

00:29:25.460 --> 00:29:30.950
This is one, a directory service,
a virtually single directory

00:29:30.950 --> 00:29:35.840
service running on the Internet that
is actually made up of nodes

00:29:35.840 --> 00:29:41.840
shared between Microsoft,
IBM, HP, SAP, etc.

00:29:41.840 --> 00:29:45.330
that you can go to,
you can publish your information

00:29:45.470 --> 00:29:49.300
about your business service,
like I sell tires or something.

00:29:50.790 --> 00:29:54.900
And within, say, 24 hours,
that information is

00:29:55.320 --> 00:30:00.170
replicated to the other nodes,
Microsoft's and HP's and SAP's,

00:30:00.170 --> 00:30:04.190
so that it virtually
looks like one directory.

00:30:04.190 --> 00:30:07.570
And then anyone can go to any of those
nodes and look that information up.

00:30:07.640 --> 00:30:10.650
They provide another interface,
just a web browser interface,

00:30:10.650 --> 00:30:13.100
another categorization
way to discover things.

00:30:13.100 --> 00:30:15.120
You can also have
private implementations.

00:30:15.120 --> 00:30:18.260
You can just take the UDDI spec and
implement it inside of your company.

00:30:18.260 --> 00:30:19.780
You can write it from scratch.

00:30:20.100 --> 00:30:23.000
You can also implementations of it that
you can get from different companies.

00:30:23.000 --> 00:30:28.620
In fact, our WebObjects 5.2 will include
an Internet UDDI server that they

00:30:28.620 --> 00:30:33.510
built using WebObjects and just
implementing the interfaces to UDDI,

00:30:33.510 --> 00:30:35.710
which are SOAP interfaces.

00:30:35.720 --> 00:30:37.760
So that's kind of cool.

00:30:49.700 --> 00:30:52.260
So, the WebObjects 5.2 is the
name of your business,

00:30:52.260 --> 00:30:54.450
the type of business it is,
so it can be categorized,

00:30:54.540 --> 00:30:55.600
a URL to the website.

00:30:55.600 --> 00:31:03.540
You get a unique ID from the registry to
uniquely identify your business entity.

00:31:03.540 --> 00:31:06.130
You say what services you provide.

00:31:06.150 --> 00:31:10.380
You could say I sell
widgets and specifications.

00:31:10.380 --> 00:31:13.960
In the end,
the specifications would most likely

00:31:14.500 --> 00:31:17.370
be WSDL along with the document.

00:31:19.300 --> 00:31:23.990
So, this morning I was messing around
and I downloaded Google's WSDL stuff.

00:31:24.110 --> 00:31:25.110
It's really cool.

00:31:25.240 --> 00:31:26.820
Just worked like a charm.

00:31:26.820 --> 00:31:29.360
And in that,
they have a document and other

00:31:29.360 --> 00:31:31.540
things that describe how to use it.

00:31:31.620 --> 00:31:34.180
For example,
it says you first must register

00:31:34.370 --> 00:31:36.250
at Google to get your account ID.

00:31:36.300 --> 00:31:39.180
And you must send that
along with your request.

00:31:39.180 --> 00:31:42.560
So that type of information
can't be described in WSDL.

00:31:42.560 --> 00:31:45.770
But they also then
include the WSDL itself.

00:31:48.910 --> 00:31:50.830
So, the WebObjects 5.2 is a great way
to categorize business and services.

00:31:50.960 --> 00:31:53.400
There are common industry taxonomies.

00:31:53.700 --> 00:31:57.500
The government has a taxonomy
to define businesses.

00:31:57.500 --> 00:32:00.500
Even the UN has a taxonomy.

00:32:00.500 --> 00:32:03.360
So,
it's just a way for people to look up,

00:32:03.360 --> 00:32:08.450
to start to drill down and to find
the service they're interested in.

00:32:09.470 --> 00:32:10.490
UDDI Operators.

00:32:10.560 --> 00:32:12.620
Each operator,
this is in the Universal Directory again,

00:32:12.620 --> 00:32:13.400
has a registry.

00:32:13.400 --> 00:32:15.360
They replicate that information.

00:32:15.360 --> 00:32:16.500
It's not real time.

00:32:16.500 --> 00:32:19.480
Again, registration takes place
at any operator site,

00:32:19.480 --> 00:32:22.640
so just conduct it at any operator site,
as I mentioned.

00:32:22.640 --> 00:32:24.840
Here are a few UDDI SDKs.

00:32:24.840 --> 00:32:29.640
There's a UDDI for Java,
which is done by IBM HP and SAP.

00:32:29.640 --> 00:32:35.340
Again, it provides the SOAP interfaces
to look up things in UDDI.

00:32:35.350 --> 00:32:37.450
It's very easy to use.

00:32:38.020 --> 00:32:41.300
Microsoft Visual Studio.net
also has a similar SDK.

00:32:41.400 --> 00:32:46.530
There are also various people out there
that are just creating new web services

00:32:47.010 --> 00:32:49.510
to browse UDDI in different ways.

00:32:49.520 --> 00:32:56.400
Web Objects 5.2 includes a UDDI version
2 database and an EO model for that,

00:32:56.400 --> 00:32:58.510
which is really cool.

00:32:59.920 --> 00:33:05.240
So I want to do a couple of demos.

00:33:05.240 --> 00:33:11.450
And the technologies for the demo,
just J2SE, 1.4, XML parser,

00:33:11.580 --> 00:33:14.420
the Access Soap Toolkit,
a little bit of Objective-C.

00:33:14.420 --> 00:33:19.180
So just to show you what
the demo is all about,

00:33:19.180 --> 00:33:23.320
I'll switch to my demo machine here.

00:33:23.320 --> 00:33:28.290
And the first thing I want to do
is basically what this service is,

00:33:28.340 --> 00:33:29.780
and I'll go and show you how I built it.

00:33:29.800 --> 00:33:32.600
But what it is,
is if you're familiar with

00:33:32.600 --> 00:33:37.580
Mac OS X and application menus,
every application has a services menu.

00:33:37.580 --> 00:33:41.820
And this is just how I happen
to tie in my web service.

00:33:41.820 --> 00:33:44.780
It's kind of unfortunate that
this is called services and

00:33:44.780 --> 00:33:47.910
I'm talking about services,
but they're different things,

00:33:48.030 --> 00:33:50.160
local services versus web services.

00:33:50.160 --> 00:33:53.540
But I did tie it in,
so I have something called Find News.

00:33:53.760 --> 00:33:57.220
And there's a company called
Moreover News out there that

00:33:57.220 --> 00:34:01.790
has a WSDL interface to...
News sources all over the web.

00:34:01.810 --> 00:34:07.350
So what I did is I created a client
that when you're in a Cocoa app,

00:34:07.350 --> 00:34:11.980
even in Terminal or something,
and you go to services

00:34:11.980 --> 00:34:16.840
and you say Find News,
it looks at what you have highlighted,

00:34:16.840 --> 00:34:23.030
packages up a call to this service,
calls out to the online service,

00:34:23.030 --> 00:34:25.880
and gets back a bunch of XML.

00:34:25.880 --> 00:34:30.630
And then it reparses that XML,
transforms it into... To HTML,

00:34:30.840 --> 00:34:34.360
and then pops up the web
browser with information.

00:34:34.360 --> 00:34:38.820
So I looked up Darwin,
so who knows if there'll

00:34:38.820 --> 00:34:40.910
be any Apple stuff.

00:34:40.960 --> 00:34:46.540
But if we just go to... I don't know.

00:34:46.540 --> 00:34:49.840
This is like a lot of... You have
to be careful what you do here.

00:34:49.840 --> 00:34:51.410
I'm not going to click
on just any one of these.

00:34:51.420 --> 00:34:55.420
A lot of drinking.

00:34:55.420 --> 00:34:56.780
Interesting.

00:34:56.850 --> 00:34:59.600
Charles Darwin.

00:34:59.800 --> 00:35:00.830
Okay, this might be safe.

00:35:01.120 --> 00:35:05.720
So it goes out to the
particular news story,

00:35:05.720 --> 00:35:11.660
and it's at that plane dealer,
and Charles Darwin, you lose the game.

00:35:11.660 --> 00:35:14.130
Okay, it's something about Ohio schools.

00:35:14.140 --> 00:35:16.440
But anyhow, it's pretty interesting.

00:35:16.440 --> 00:35:18.700
And that all happened really fast.

00:35:19.360 --> 00:35:21.420
Again, that's live.

00:35:21.420 --> 00:35:23.240
I don't even know where
this company is located.

00:35:23.240 --> 00:35:27.630
They could be running a .NET
server or a Java server.

00:35:27.750 --> 00:35:29.220
I don't know.

00:35:29.300 --> 00:35:30.220
I don't need to know.

00:35:30.220 --> 00:35:32.100
It just works.

00:35:32.190 --> 00:35:33.580
So how did we get there from here?

00:35:33.580 --> 00:35:39.260
Well, the first thing I did was
I downloaded a WSDL file.

00:35:39.260 --> 00:35:44.500
And I did that, actually,
from... Let me go to one of these places.

00:35:44.500 --> 00:35:49.340
I believe it was xmethods.com.

00:35:49.340 --> 00:35:52.240
So this is one of those web
service listing companies

00:35:52.300 --> 00:35:53.940
that's kind of like Yahoo.

00:35:53.940 --> 00:35:59.220
This one... Is this the one that
lists what it's implemented in?

00:35:59.220 --> 00:35:59.280
Yeah.

00:35:59.300 --> 00:36:00.860
So this is really interesting.

00:36:00.860 --> 00:36:04.120
They have a bunch of web
services listed here.

00:36:04.120 --> 00:36:07.480
And let me hide my doc here.

00:36:08.930 --> 00:36:13.730
and one of the things they do actually
is they say what implementation it is

00:36:14.230 --> 00:36:16.990
and they also say how you can get to it.

00:36:17.140 --> 00:36:25.790
But in the end they just provide WSDL and
links to the companies who do it.

00:36:25.790 --> 00:36:25.790
Let's see if...

00:36:28.000 --> 00:42:44.700
[Transcript missing]

00:42:46.300 --> 00:42:49.610
is the director of the
Java Virtual Machine Center at

00:42:49.610 --> 00:42:52.020
the University of California,
and he is the director of the

00:42:52.020 --> 00:42:52.020
Java Virtual Machine Center at
the University of California.

00:43:00.800 --> 00:43:05.520
I'm going to go to the area where
I dumped all the Google information.

00:43:05.520 --> 00:43:08.800
I just grabbed this, compiled it,
and it ran.

00:43:08.800 --> 00:43:13.020
Again, just standard Java, standard XML,
standard SOAP.

00:43:13.110 --> 00:43:16.170
In the case of Google,
I had to first go out and

00:43:16.410 --> 00:43:20.000
register at Google's site,
and I got back a key.

00:43:20.140 --> 00:43:21.830
Don't copy this down.

00:43:21.830 --> 00:43:23.850
This is my secret key.

00:43:28.780 --> 00:43:30.310
It's interesting.

00:43:30.760 --> 00:43:35.080
People are on the frontier of
what to do with web services.

00:43:35.080 --> 00:43:39.630
These are some of the problems that
I remember we discussing when working

00:43:40.030 --> 00:43:42.290
on UDDI with Microsoft and IBM.

00:43:42.290 --> 00:43:45.340
How people will get a
guarantee of service.

00:43:45.340 --> 00:43:49.070
How you'll establish contracts
and those sorts of things.

00:43:49.190 --> 00:43:52.360
I've seen a couple of
interesting developments.

00:43:52.390 --> 00:43:55.420
One is this Google approach
where you register,

00:43:55.420 --> 00:43:56.570
you get a key,
and then to call the service,

00:43:56.580 --> 00:43:56.720
you need to pass the key.

00:43:56.930 --> 00:43:59.350
Then to call the service,
you need to pass that key along.

00:43:59.380 --> 00:44:01.380
They have a couple of services.

00:44:01.380 --> 00:44:02.220
One is neat.

00:44:02.220 --> 00:44:04.020
They just allow spelling.

00:44:04.020 --> 00:44:13.050
That broke off when I did more.

00:44:13.600 --> 00:47:16.100
[Transcript missing]

00:47:18.230 --> 00:47:27.100
To review what that Finder example was,
you just went to that Services menu item,

00:47:27.100 --> 00:47:31.350
you went to Internal News Process,
and that went out over HTTP,

00:47:31.350 --> 00:47:35.140
in this case a de facto standard,
to the More News Service.

00:47:35.140 --> 00:47:36.870
It packaged up XML for the result.

00:47:37.230 --> 00:47:40.260
Back to my News Process,
I put that in HTML and

00:47:40.270 --> 00:47:42.320
I sent it to the browser.

00:47:42.340 --> 00:47:47.520
These are some URL references.

00:47:47.520 --> 00:47:49.310
These are just interesting
places you can go.

00:47:49.320 --> 00:47:53.740
The W3C has a lot of
information about web services.

00:47:53.740 --> 00:47:57.460
The IBM and Microsoft have
the WS inspection spec.

00:47:57.460 --> 00:48:01.740
You can go to uddi.org to
get the UDDI information.

00:48:01.860 --> 00:48:04.530
Web services listings, again,
my two favorites,

00:48:04.620 --> 00:48:06.300
South Central and X Methods.

00:48:06.300 --> 00:48:10.220
The SOAP Access Toolkit, again,
xml.apache.org.

00:48:10.220 --> 00:48:14.070
And Sun Jack's API, which you can do all
the same things with.

00:48:14.070 --> 00:48:17.860
I think they have Early Access 2 out now.

00:48:17.940 --> 00:48:22.200
From their website,
just go to java.sun.com or javasoft.com,

00:48:22.260 --> 00:48:24.660
and it's right up there right in front.

00:48:24.660 --> 00:48:26.480
You can go and grab that.

00:48:26.480 --> 00:48:33.460
They have a bunch of great tutorials
at Sun as well about web services

00:48:33.460 --> 00:48:40.650
and how to use the Jack's API.

00:48:41.820 --> 00:48:42.660
unexpected slide.

00:48:42.660 --> 00:48:43.620
They slipped this in.

00:48:43.620 --> 00:48:44.800
I didn't see this.

00:48:44.800 --> 00:48:49.230
So I guess this is different ways to
get the documentation and the slides,

00:48:49.230 --> 00:48:49.970
et cetera.

00:48:51.670 --> 00:48:55.870
and Roadmap at 2:00 today,
Web Objects and Web Services.

00:48:55.940 --> 00:49:01.200
That'll be a real interesting
You-Want-To-Go-To session.

00:49:01.200 --> 00:49:04.820
And we've already had some other
Web Services talks previously that

00:49:04.820 --> 00:49:09.220
I hope you were able to attend,
such as Steve Zeller's talk.