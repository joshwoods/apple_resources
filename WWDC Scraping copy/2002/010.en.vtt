WEBVTT

00:00:51.680 --> 00:00:57.100
Welcome to session 010,
Going International with Mac OS X.

00:00:57.190 --> 00:01:00.880
What you saw is actually the first
thing that our mutual customers

00:01:01.170 --> 00:01:05.390
will see when they buy Mac OS X and
the first time they run Mac OS X.

00:01:05.560 --> 00:01:08.960
The idea behind this is that
you have this message of being

00:01:08.960 --> 00:01:11.180
welcomed in different languages.

00:01:11.410 --> 00:01:16.100
The idea is to show that Mac OS X is
truly a worldwide operating system.

00:01:16.460 --> 00:01:20.210
But in order to be a real
operating system that's going to be

00:01:20.210 --> 00:01:23.040
shipping all around the countries,
in order to be truly international,

00:01:23.040 --> 00:01:26.500
the operating system is nothing
if we don't have the applications.

00:01:26.500 --> 00:01:29.940
And that's what I'm going to be
trying to convince you guys to do,

00:01:30.030 --> 00:01:33.660
is to try to look at markets that
maybe are not present right now.

00:01:41.660 --> 00:01:45.000
So today I'll be talking about why,
as a developer,

00:01:45.040 --> 00:01:47.010
you need to go international
if you're not already.

00:01:47.010 --> 00:01:49.280
And if you are,
maybe you're forgetting about some

00:01:49.280 --> 00:01:50.890
markets that you should address.

00:01:51.020 --> 00:01:54.830
We'll talk quickly about some
ideas for retail solutions.

00:01:54.830 --> 00:01:59.210
Most of the time we get a lot of
questions from mid-sized developers,

00:01:59.320 --> 00:02:02.500
mid-sized companies that
develop on the platform,

00:02:02.600 --> 00:02:06.170
on the Macintosh, and said, you know,
I'd like to go in France and

00:02:06.170 --> 00:02:08.080
sell my application there,
but how do I do?

00:02:08.080 --> 00:02:09.350
I mean, what's the support?

00:02:09.450 --> 00:02:10.820
How do I get in the channels?

00:02:10.820 --> 00:02:12.860
So I'll try to touch
a little bit on that,

00:02:12.860 --> 00:02:15.930
and I'll try to give you an
update on what developer relations

00:02:15.930 --> 00:02:17.700
has been doing in this regard.

00:02:17.700 --> 00:02:20.110
Then in the second part
of the presentation,

00:02:20.110 --> 00:02:24.000
I'll talk about the international
technologies present in Mac OS X.

00:02:24.000 --> 00:02:29.260
There is, of course, as you know by now,
a huge difference between the support we

00:02:29.360 --> 00:02:31.940
had in Mac OS 9 and Mac OS X by itself.

00:02:32.060 --> 00:02:35.490
I'll try to remind you of a couple
of the... features that make

00:02:35.490 --> 00:02:39.100
Mac OS X truly an operating system,
an international operating system.

00:02:39.100 --> 00:02:41.480
And I'll give you as well
an update on Jaguar and what

00:02:41.540 --> 00:02:43.200
we've been doing with Jaguar.

00:02:44.640 --> 00:02:48.420
And quickly, I'll touch on localization,
and I'll try to give you some ideas

00:02:48.880 --> 00:02:52.410
on maybe things to help you localize
your application or third parties

00:02:52.410 --> 00:02:54.160
to help you localize applications.

00:02:57.980 --> 00:03:00.400
So first, why Apple goes international?

00:03:00.400 --> 00:03:02.760
Well, the reason is pretty simple.

00:03:02.800 --> 00:03:05.640
International markets are opportunities.

00:03:05.660 --> 00:03:10.240
And when we say opportunities,
it's in fact dollars.

00:03:10.260 --> 00:03:12.430
And you as a developer,
it's very important as well

00:03:12.560 --> 00:03:15.460
to understand that if you're
shipping only in Europe right now,

00:03:15.530 --> 00:03:16.860
you need to look at the US market.

00:03:17.010 --> 00:03:20.000
If you're shipping only--
if you're a US developer and

00:03:20.000 --> 00:03:22.800
you're shipping only in the US,
you need to look at the Japanese market

00:03:22.850 --> 00:03:24.140
and the European markets.

00:03:24.170 --> 00:03:25.900
These are very important.

00:03:25.910 --> 00:03:29.580
And in fact, I shouldn't say dollars,
but I should say euros and yens,

00:03:29.580 --> 00:03:30.730
of course.

00:03:34.300 --> 00:03:38.250
I'd like to give you an idea of what
were the revenue reparations between

00:03:38.350 --> 00:03:40.260
the US and the rest of the world.

00:03:40.310 --> 00:03:43.380
These numbers are the ones
from the ACC filings that

00:03:43.380 --> 00:03:46.000
Apple filed in December 2001.

00:03:46.020 --> 00:03:51.410
You can see that the US market counted
for 57%. This number is to put in

00:03:51.410 --> 00:03:55.150
perspective with the last two years,
where the numbers were

00:03:55.240 --> 00:03:57.590
closer to 50%, in fact.

00:03:57.900 --> 00:04:15.700
[Transcript missing]

00:04:16.950 --> 00:04:19.000
By Asia Pacific,
I mean actually the rest of

00:04:19.000 --> 00:04:21.790
the countries out of Japan.

00:04:21.900 --> 00:04:26.370
So that would be China, Korea, Australia.

00:04:29.720 --> 00:04:32.600
To put these numbers in perspective,
I'd like to show you the last growth

00:04:32.720 --> 00:04:34.640
numbers we had for the year 1999-2000.

00:04:34.640 --> 00:04:40.380
Europe grew 53%. That means in 1999,
if you had your application

00:04:40.380 --> 00:04:42.840
shipping in Europe,
well, you had to potentially, like,

00:04:42.840 --> 00:04:46.140
you know, almost double the revenues
for your application.

00:04:46.140 --> 00:04:50.240
Things like the Americas grew
only 24% in perspective,

00:04:50.240 --> 00:04:54.400
where Apple has been already implemented
and has a large part of revenues already.

00:04:54.400 --> 00:04:59.180
Japan, 39%. And Asia-Pacific region,
18%. So, of course,

00:04:59.310 --> 00:05:01.900
these numbers are from, like, you know,
1999 and 2000.

00:05:01.900 --> 00:05:03.570
We have to keep that in perspective.

00:05:03.680 --> 00:05:06.100
Once the economy picks up,
we hope to see this kind of

00:05:06.180 --> 00:05:07.530
growth again in these markets.

00:05:07.600 --> 00:05:11.150
And for you as a developer,
keep that in mind when you try to focus

00:05:11.160 --> 00:05:13.250
and you try to find where I should go.

00:05:19.030 --> 00:05:22.250
So, you have the numbers in mind.

00:05:22.450 --> 00:05:25.280
Now, which kind of countries,
what market should you address?

00:05:30.670 --> 00:05:33.440
Japan, obviously,
is the largest Mac install

00:05:33.450 --> 00:05:35.150
base outside of the U.S.

00:05:35.150 --> 00:05:37.010
It's very, very important.

00:05:37.010 --> 00:05:40.990
Apple has been doing a lot of efforts,
has been pushing very hard with

00:05:41.180 --> 00:05:43.150
Mac OS X on the Japanese market.

00:05:43.150 --> 00:05:47.290
If you look around you, I mean,
we've been the first platform to ship

00:05:47.290 --> 00:05:50.050
a high-quality font for rendering,
display,

00:05:50.140 --> 00:05:53.000
and printing for the Japanese market.

00:05:53.060 --> 00:05:57.520
The Iragino font that ships with all
versions of Mac OS X has 22,000 glyphs.

00:05:57.560 --> 00:06:00.580
This is something that is the
most important thing for us.

00:06:00.600 --> 00:06:02.590
You're going to see more of it
when you look at Adobe Japan's

00:06:02.740 --> 00:06:03.910
standard 1.4 support.

00:06:03.980 --> 00:06:07.050
Apple is a pioneer in this regard,
and you're going to see

00:06:07.050 --> 00:06:08.720
more happening in Jaguar.

00:06:10.530 --> 00:06:13.480
So once again, for you,
if you're not addressing this market,

00:06:13.490 --> 00:06:15.930
you need to really look in details
and find out how you're going

00:06:15.930 --> 00:06:16.790
to be able to approach that.

00:06:20.020 --> 00:06:22.660
The three first countries you should
approach in Europe are England,

00:06:22.660 --> 00:06:23.440
France, and Germany.

00:06:23.440 --> 00:06:24.810
And of course, if you're a U.S.

00:06:24.810 --> 00:06:27.500
developer going to England,
it shouldn't be too difficult

00:06:27.500 --> 00:06:28.940
from the language point of view.

00:06:29.060 --> 00:06:33.400
Just remember to translate the trash
to... I think it's an overname.

00:06:33.970 --> 00:06:35.900
France and Germany.

00:06:35.910 --> 00:06:38.540
Another thing to note is that if
you translate your application,

00:06:38.570 --> 00:06:41.870
for instance, in Spanish, well,
potentially you could address the

00:06:41.950 --> 00:06:46.660
Latin America's countries as well,
where Apple is present as well.

00:06:46.660 --> 00:06:49.700
And then I would encourage you to
look at other countries such as Italy,

00:06:49.700 --> 00:06:53.980
Netherlands, Sweden, Denmark, Sweden,
where, if I'm not mistaken,

00:06:53.980 --> 00:06:57.350
actually the government
subsidized the schools and where

00:06:57.420 --> 00:06:59.300
a lot of Macintosh are sold.

00:07:01.630 --> 00:07:06.470
So now, it's very difficult
sometimes if you're a U.S.

00:07:06.520 --> 00:07:09.830
developer or you're a French developer,
for instance, and you want to market your

00:07:09.830 --> 00:07:11.180
application in the U.S.

00:07:11.350 --> 00:07:12.880
or vice versa, of course, in Europe.

00:07:13.180 --> 00:07:17.430
Here, Apple Developer Relations has been
working on a couple of programs to

00:07:17.430 --> 00:07:19.720
really help you go international.

00:07:19.720 --> 00:07:22.060
And I'd like to go through a
couple of slides that maybe,

00:07:22.140 --> 00:07:24.020
hopefully,
will give you an idea of what we've

00:07:24.080 --> 00:07:28.040
been doing and maybe will give you an
idea to help you go after these markets.

00:07:31.120 --> 00:07:32.790
If you're not a U.S.

00:07:32.800 --> 00:07:35.230
developer and you would
like to attack the U.S.

00:07:35.360 --> 00:07:38.820
market, ADC, Apple Developer Connection,
has been putting a couple

00:07:38.890 --> 00:07:39.800
of programs together.

00:07:39.800 --> 00:07:42.130
The first one is with Navar Corporation.

00:07:42.140 --> 00:07:45.620
And the idea behind that is
that Navar Corporation supplies

00:07:45.690 --> 00:07:49.850
retail stores such as CompUSA,
Circuit City, Micro Center, Fry's,

00:07:49.920 --> 00:07:51.340
and you have, of course,
the whole list there.

00:07:51.360 --> 00:07:55.160
And that's the way to get
in the retail channel.

00:07:55.160 --> 00:07:57.060
We have some deals going on.

00:07:57.130 --> 00:08:00.220
I'd encourage you to go on our website,
check out the information.

00:08:01.110 --> 00:08:03.640
If you're not on this market
and you're looking into it,

00:08:03.660 --> 00:08:05.350
send me an email, look at the web.

00:08:05.420 --> 00:08:08.550
We have a bunch of information,
and let us know if this is helping you.

00:08:09.850 --> 00:08:12.940
Now if you want to sell your application,
the easy way, I would say,

00:08:12.970 --> 00:08:14.400
would be to go through e-commerce.

00:08:14.400 --> 00:08:17.980
And for that, once again,
ADC has a deal with Kaji.

00:08:17.990 --> 00:08:22.340
And Kaji really makes the
e-commerce easy for ADC members.

00:08:27.000 --> 00:08:30.960
If you want to attack Europe,
the European market,

00:08:30.970 --> 00:08:32.820
a nice thing that has been starting,
if I'm not mistaken,

00:08:32.820 --> 00:08:34.500
last year is the Top 50 program.

00:08:34.500 --> 00:08:38.970
And the idea behind this is
to help developers put their

00:08:39.670 --> 00:08:43.110
application in one place and to
have a bunch of channel partners,

00:08:43.340 --> 00:08:46.670
retailers, go in this place and look for
applications that will make

00:08:46.670 --> 00:08:48.480
sense in their market segment.

00:08:48.480 --> 00:08:51.230
And here it's going to allow
developers' products to be

00:08:51.280 --> 00:08:53.010
placed in a select retail store.

00:08:53.890 --> 00:08:56.330
And the idea for retailers is
that they're going to go to one

00:08:56.420 --> 00:09:00.140
place and get a list of all the
applications they could actually have

00:09:00.290 --> 00:09:02.220
in their channels for the Macintosh.

00:09:06.470 --> 00:09:11.040
I think right now we have around 750
retail stores out there that are being

00:09:11.040 --> 00:09:13.240
supplied with the Top 50 program.

00:09:13.240 --> 00:09:16.330
And these countries,
the countries that we are mainly

00:09:16.330 --> 00:09:20.770
implementing for the Top 50,
are UK, Germany, and France, which are,

00:09:20.770 --> 00:09:24.350
as I mentioned before,
our main market for Apple in Europe.

00:09:24.530 --> 00:09:29.080
So this is actually pretty cool,
and we have at the bottom of the screen,

00:09:29.080 --> 00:09:31.950
hopefully you can see that,
on developers.apple.com,

00:09:31.950 --> 00:09:35.040
marketing programs,
the Top 50 that is explained.

00:09:35.420 --> 00:09:37.640
I really, really encourage you,
if you're interested in

00:09:37.640 --> 00:09:40.700
going after these markets,
to look at the Top 50 program.

00:09:40.700 --> 00:09:42.710
And once again,
should you have any questions

00:09:42.710 --> 00:09:45.120
on these topics that we're
going to be talking today,

00:09:45.120 --> 00:09:46.340
you can always send me an email.

00:09:46.340 --> 00:09:49.400
I'd be more than happy to put you
in relation with the correct people.

00:09:53.780 --> 00:09:55.260
Japanese market.

00:09:55.340 --> 00:09:58.380
We don't have any easy deal
for you actually to attack the

00:09:58.380 --> 00:10:01.500
Japanese market at this point,
but

00:10:01.830 --> 00:10:04.870
Remember, if you're US or even
a European developer,

00:10:04.970 --> 00:10:07.710
the Japanese market is the
biggest market outside of the US.

00:10:08.040 --> 00:10:10.210
If you're not in there,
you're potentially

00:10:10.210 --> 00:10:11.400
missing a lot of money.

00:10:11.490 --> 00:10:14.250
And we're really strongly
pushing for the Japanese market

00:10:14.310 --> 00:10:17.810
and to make our implementation,
the Macintosh desktop,

00:10:17.820 --> 00:10:20.510
even wider adoption.

00:10:21.880 --> 00:10:23.970
The suggestion that we have for
you is to go through a local

00:10:24.080 --> 00:10:25.340
partner to attack this market.

00:10:25.340 --> 00:10:28.970
And for that, WWDR, Developer Relations,
can help you.

00:10:29.160 --> 00:10:31.900
And if you're interested in this market,
I strongly encourage

00:10:31.900 --> 00:10:33.140
you to send me an email.

00:10:33.140 --> 00:10:34.040
Come at the end.

00:10:34.040 --> 00:10:34.760
We can talk.

00:10:34.760 --> 00:10:37.500
We have representatives
from WWDR in Japan here.

00:10:37.500 --> 00:10:40.660
And we can start putting some kind
of organization together and start

00:10:40.660 --> 00:10:42.390
talking and doing some business.

00:10:43.230 --> 00:10:46.450
We wrote a document that
explains the common pitfalls,

00:10:46.450 --> 00:10:49.370
I would say,
or the common primes that foreigners

00:10:49.370 --> 00:10:51.660
have to access the Japanese market.

00:10:51.660 --> 00:10:55.370
And I encourage you to read the
document that we have there in the

00:10:55.370 --> 00:10:57.800
Japan URL at the bottom of that screen.

00:11:02.850 --> 00:11:07.400
So now, this first part was, I guess,
what I would say the marketing spills.

00:11:07.510 --> 00:11:10.500
But this spills is very
important for you to understand,

00:11:10.500 --> 00:11:14.340
because to make Mac OS X successful,
we need you guys to port your

00:11:14.390 --> 00:11:16.740
application to all of these markets.

00:11:16.780 --> 00:11:18.520
And most of the time,
with the technologies

00:11:18.520 --> 00:11:22.180
that work for you now,
it's easier to attack these markets.

00:11:22.270 --> 00:11:25.720
So now, I'm going to give you a list of
different technologies that you

00:11:25.720 --> 00:11:29.880
could use to make sure that your
application is international ready.

00:11:29.940 --> 00:11:32.110
First, we're going to start--

00:11:32.560 --> 00:11:36.110
With a review of the
Mac OS X architecture,

00:11:36.270 --> 00:11:39.770
since Mac OS X 10.0,
Apple ships one single CD with

00:11:39.770 --> 00:11:41.610
support for 15 languages.

00:11:41.610 --> 00:11:43.730
Actually, I should say, since 10.1.

00:11:43.730 --> 00:11:45.380
On 10.0, we had an add-on.

00:11:45.410 --> 00:11:48.640
But since Mac OS X 10.1,
15 languages out of the box.

00:11:48.640 --> 00:11:52.360
That means a customer in Japan,
in France, or in the U.S.

00:11:52.360 --> 00:11:56.170
could actually switch the language
and be in French if he's living

00:11:56.170 --> 00:12:01.170
in the U.S., could be in Japan,
or any case, any of these 15 languages.

00:12:01.740 --> 00:12:05.020
And for you as a developer,
it's important to understand that the

00:12:05.480 --> 00:12:09.990
customer could expect your application to
support multiple localizations as well.

00:12:12.640 --> 00:12:15.680
We have this concept
of preferred languages,

00:12:15.750 --> 00:12:16.840
and I'll show you that in the demo.

00:12:16.840 --> 00:12:19.260
And this is kind of nice, actually,
that actually even the

00:12:19.260 --> 00:12:20.700
Windows platform doesn't offer.

00:12:20.700 --> 00:12:26.960
You can have a specific language setup
for your computer where you could say,

00:12:26.960 --> 00:12:28.980
you know what,
my first language is French,

00:12:28.980 --> 00:12:32.590
but if I launch an application
that doesn't have French,

00:12:32.640 --> 00:12:33.910
I'd like to have it in English.

00:12:33.920 --> 00:12:37.300
And then if English is not present, well,
I'd like to have it in Japanese.

00:12:38.230 --> 00:12:40.380
And the nice thing is that,
and I'll show you that in the demo,

00:12:40.380 --> 00:12:44.140
is you could have a finder in French,
but then launch an application that's

00:12:44.150 --> 00:12:45.460
going to be launched in Japanese.

00:12:45.460 --> 00:12:50.680
So out of the box,
we have support for CGK script, okay,

00:12:50.680 --> 00:12:53.350
simplified traditional Chinese, Japanese,
and Korean, and of course,

00:12:53.470 --> 00:12:54.700
all the European languages.

00:12:54.700 --> 00:12:57.640
And I'll go in more detail about what
that means for you as a developer.

00:13:00.680 --> 00:13:02.940
We have this concept, of course,
of supporting multiple

00:13:02.940 --> 00:13:04.020
locales in the base OS.

00:13:04.100 --> 00:13:08.170
So you could ship French,
Canadian French, Belgium French,

00:13:08.170 --> 00:13:08.730
if you wish.

00:13:08.740 --> 00:13:13.400
The one that comes to mind, of course,
is like US English and British English.

00:13:14.950 --> 00:13:18.700
And once again,
all the scripts that I just defined

00:13:18.780 --> 00:13:20.460
are supported out of the box.

00:13:20.520 --> 00:13:23.000
Remember on Mac OS 9,
you had to install the language kit,

00:13:23.050 --> 00:13:24.900
and then you had to make
sure they had the right font.

00:13:24.980 --> 00:13:27.890
But then if your finder was in English,
you'd have some trouble

00:13:27.890 --> 00:13:29.360
because of the file system.

00:13:29.410 --> 00:13:32.170
And you could never type a
file name in the finder that

00:13:32.270 --> 00:13:33.500
would have French and English.

00:13:33.610 --> 00:13:35.660
Because remember,
the E with the accent is the first

00:13:35.660 --> 00:13:37.420
byte of a two byte character.

00:13:37.500 --> 00:13:40.700
Anyway, we resolved all this problem
with one very solution,

00:13:40.700 --> 00:13:43.340
one very easy solution,
which is actually a standard.

00:13:43.400 --> 00:13:44.880
It's Unicode.

00:13:44.940 --> 00:13:47.760
The whole operating
system manages Unicode.

00:13:47.820 --> 00:13:50.840
Even in your application,
when you pass a string that is

00:13:50.840 --> 00:13:54.100
not Unicode to the menu manager,
well, actually the system is going

00:13:54.100 --> 00:13:55.510
to translate it to Unicode.

00:13:55.600 --> 00:14:00.620
Because all the drawing in the finder
and the system is done through Unicode.

00:14:00.750 --> 00:14:04.060
So at one point or another,
if your application is not giving

00:14:04.060 --> 00:14:07.890
to the system strings in Unicode,
we'll translate it for you.

00:14:09.300 --> 00:14:11.260
And that concept of
fully-uniqued support is very,

00:14:11.260 --> 00:14:12.600
very important.

00:14:12.650 --> 00:14:14.960
Because even if you're only a
US developer and you're limited

00:14:14.960 --> 00:14:19.030
in the US English market,
remember that customers now are

00:14:19.040 --> 00:14:22.530
going to be able to switch and will
expect you to support Japanese,

00:14:22.540 --> 00:14:24.110
for instance.

00:14:26.660 --> 00:14:28.360
Let's look at the current
version of Mac OS X.

00:14:28.500 --> 00:14:32.640
So we have 15 languages-- French,
Japanese, German, English, Italian,

00:14:32.700 --> 00:14:34.590
Spanish, Dutch,

00:14:35.280 --> 00:14:37.500
Traditional Chinese, simplified Chinese,
Korean,

00:14:37.500 --> 00:14:40.800
and I guess I'm forgetting Norwegian,
Swedish,

00:14:40.800 --> 00:14:42.270
and I think that should be 15 by now.

00:14:44.160 --> 00:14:46.600
We ship as well all the local
associated with these languages,

00:14:46.610 --> 00:14:48.490
such as French, Canadian, British,
English,

00:14:48.490 --> 00:14:51.060
and if you go to the international panel,
you know, in the preferences,

00:14:51.060 --> 00:14:55.490
and you go to international panel here,
I just said that, with the languages,

00:14:55.490 --> 00:14:58.990
you'll be able to install the keyboard
and see all the scripts that are

00:14:58.990 --> 00:15:01.020
supported out of the box in Mac OS X.

00:15:01.020 --> 00:15:05.100
And of course, as I mentioned, Japanese,
Chinese, and Korean scripts out of

00:15:05.100 --> 00:15:06.690
the box with the right fonts.

00:15:09.260 --> 00:15:10.710
Now, Jaguar.

00:15:10.720 --> 00:15:14.520
Jaguar is a big step forward in the way,
not in the way that we're

00:15:14.530 --> 00:15:17.050
going to support languages,
but with the amount of new languages

00:15:17.200 --> 00:15:18.670
we're going to be able to support.

00:15:18.680 --> 00:15:22.830
A lot of developers last year have been
complaining since Mac OS X shipped of

00:15:22.980 --> 00:15:25.530
the lack of support for tier 3 languages.

00:15:25.530 --> 00:15:31.350
And tier 3 languages are for us Arabic,
Hebrew, Thai, Devanagari, and Cyrillic,

00:15:31.600 --> 00:15:35.000
Cyrillic script, Hungarian,
and these things.

00:15:35.920 --> 00:15:38.600
Well, with Mac OS X Jaguar,
we're actually going to

00:15:38.720 --> 00:15:40.230
be supporting this script.

00:15:40.310 --> 00:15:43.270
But, very,
very important for you to understand,

00:15:43.270 --> 00:15:46.470
this script will be supported
only through Unicode.

00:15:48.490 --> 00:15:49.250
So what does that mean?

00:15:49.390 --> 00:15:52.480
That means that right now,
if you're a quick draw application,

00:15:52.500 --> 00:15:55.160
you won't be able to type actually
Arabic in your application.

00:15:55.200 --> 00:15:58.460
You won't be able to type
Devanagari in your application.

00:15:58.550 --> 00:16:00.700
So that's very important
for you to keep in mind.

00:16:00.720 --> 00:16:03.680
Make sure that your
application supports Unicode.

00:16:03.710 --> 00:16:06.660
Make sure you use the MLT text engine.

00:16:06.660 --> 00:16:10.280
Make sure you use that suite of
one of these Unicode technologies.

00:16:11.410 --> 00:16:13.820
In Jaguar as well,
we're working towards having a

00:16:13.820 --> 00:16:16.040
way better support for GB18030.

00:16:16.240 --> 00:16:18.540
As you probably know,
since the beginning of this year,

00:16:18.560 --> 00:16:22.040
if you want to ship applications,
machines, hardware in China,

00:16:22.210 --> 00:16:27.540
your application and the hardware
needs to support the GB18030 encoding,

00:16:27.680 --> 00:16:29.600
which has been defined by
the Chinese government.

00:16:29.770 --> 00:16:34.660
Mac OS X supports already GB18030
through the text encoding converter,

00:16:34.800 --> 00:16:37.540
and now we're going to be adding
better support for input methods and,

00:16:37.570 --> 00:16:39.710
of course, phones.

00:16:40.710 --> 00:16:44.000
You should see as well in
Jaguar a way advanced Kotori.

00:16:44.000 --> 00:16:47.300
Kotori is our input method,
and we hope Japanese customers

00:16:47.300 --> 00:16:50.040
will be pleased with the work
we've been doing in this regard.

00:16:50.230 --> 00:16:52.520
Same thing for the traditional
Chinese and simplified

00:16:52.520 --> 00:16:53.840
Chinese input methods.

00:16:53.960 --> 00:16:57.210
And we're working, of course,
with our Korean counterparts to make

00:16:57.210 --> 00:16:59.950
our Korean input methods better,
and you'll see actually soon

00:16:59.950 --> 00:17:03.570
some updates on our input method.

00:17:05.350 --> 00:17:10.130
Let's look now at the list of the new
languages that we'll be adding to Jaguar.

00:17:10.270 --> 00:17:14.460
Central European scripts such as Polish,
Bulgarian, Hungarian, Croatian, Czech.

00:17:14.510 --> 00:17:17.940
The Cyrillic scripts such
as Russian and Ukrainian.

00:17:18.140 --> 00:17:22.320
Modified Roman, Turkish, Icelandic,
Greek, Romanian, and of course,

00:17:22.470 --> 00:17:26.540
support for complex scripts, Thai, Indic,
Arabic, and Hebrew.

00:17:32.300 --> 00:17:32.770
Remember that.

00:17:32.870 --> 00:17:35.550
It's very, very important because your
customers will ask you.

00:17:35.560 --> 00:17:38.000
If your application
is shipping right now,

00:17:38.000 --> 00:17:40.050
and when we ship Jaguar,
they go in this switch and

00:17:40.050 --> 00:17:42.620
want to type some Arabic,
and they cannot access to the keyboard,

00:17:42.720 --> 00:17:44.710
they're going to go back and
they're going to ask you.

00:17:44.710 --> 00:17:46.040
And for that, you have to be prepared.

00:17:46.040 --> 00:17:50.010
These new languages are
supported only through Unicode.

00:17:54.050 --> 00:17:57.330
What are the advantages of
using Unicode in Mac OS X?

00:17:57.400 --> 00:18:00.200
I'll go through a couple
of these features.

00:18:00.420 --> 00:18:03.600
First,
it's one character set for all languages.

00:18:03.740 --> 00:18:07.300
That means no more of this thing where
you know you're going to copy and paste

00:18:07.300 --> 00:18:10.290
and you're going to get some boxes
on your screen because we don't know

00:18:10.290 --> 00:18:14.200
what's been coding because the style
information was not with the text.

00:18:14.350 --> 00:18:16.500
Here with Unicode, we have an easy way.

00:18:16.650 --> 00:18:20.040
We know where, what character is
mapped to what language.

00:18:20.350 --> 00:18:21.000
Okay?

00:18:21.000 --> 00:18:23.580
So, one character set for all languages.

00:18:23.640 --> 00:18:25.510
And this is great.

00:18:26.200 --> 00:18:29.000
It gives you, for existing languages,
more characters.

00:18:29.040 --> 00:18:31.340
I don't know if you noticed,
but for Apple, for instance,

00:18:31.340 --> 00:18:34.400
to ship for like the
European languages on Mac OS 9,

00:18:34.400 --> 00:18:39.020
we had to ship, if I'm not mistaken,
five different fonts and three different

00:18:39.020 --> 00:18:43.570
languages and encodings just to support
a couple of extended character sets.

00:18:43.690 --> 00:18:45.250
We don't have to do that anymore.

00:18:45.460 --> 00:18:48.390
One font, Unicode,
and the system is going

00:18:48.490 --> 00:18:51.000
to be able to display,
actually, the whole extended

00:18:51.000 --> 00:18:52.780
character set for Roman.

00:18:54.020 --> 00:18:58.460
The Unicode support gives us as well
built-in features for the future.

00:18:58.460 --> 00:19:01.120
That means if in the future we
want to support new languages,

00:19:01.120 --> 00:19:04.250
or if you as a developer in the
future want to support other

00:19:04.260 --> 00:19:07.360
languages that Apple doesn't support,
you're going to be able to do so because

00:19:07.610 --> 00:19:09.420
of the Unicode support we have there.

00:19:09.420 --> 00:19:13.680
It simplifies, of course,
the Gabel text program, as I mentioned,

00:19:13.680 --> 00:19:15.470
for Japanese,
when you copy and paste and you don't

00:19:15.470 --> 00:19:16.840
have the right font on your system.

00:19:16.840 --> 00:19:20.170
And, very important, it's cross-platform.

00:19:20.180 --> 00:19:22.480
A Unicode text file,
you put it and you can

00:19:22.500 --> 00:19:25.410
sell it on Windows,
it's Unicode as a standard on the

00:19:25.410 --> 00:19:27.900
exchange for mail and on the Internet.

00:19:27.900 --> 00:19:31.150
We're using a standard
to display our languages.

00:19:31.160 --> 00:19:33.050
We're using a standard to
display text on the Mac.

00:19:38.660 --> 00:19:40.530
Quickly,
I'll go through the Unicode coverage that

00:19:40.630 --> 00:19:43.420
we have right now on the alphabetic side,
I should say.

00:19:43.440 --> 00:19:48.440
Lucida Grande is the default font,
is the system font for Mac OS X.

00:19:48.440 --> 00:19:52.990
And Lucida Grande has actually support
for the extended Roman character set,

00:19:53.010 --> 00:19:56.400
Cyrillic, Vietnamese, and Greek.

00:19:56.480 --> 00:20:00.360
The fact of the matter is,
if you are a quick-draw application,

00:20:00.360 --> 00:20:02.600
well, you're not going to be
able to see the Greek,

00:20:02.600 --> 00:20:03.800
the Vietnamese, and the Cyrillic.

00:20:04.520 --> 00:20:05.970
But I'm going to show
you that in the demo,

00:20:05.970 --> 00:20:08.020
which is pretty obvious,
you'll be able to see that

00:20:08.130 --> 00:20:10.370
we have been adding a lot,
a lot of glyphs,

00:20:10.570 --> 00:20:12.780
a lot of characters in Lucida.

00:20:12.780 --> 00:20:15.780
And with one font,
you can use that to display probably like

00:20:15.830 --> 00:20:17.770
all the texts that you have in Europe.

00:20:19.940 --> 00:20:23.210
Important to notice and to note
that Times and Helvetica as well,

00:20:23.360 --> 00:20:25.370
phones that Apple has been
shipping for a while now,

00:20:25.590 --> 00:20:27.630
have support for extending
Roman character set as well if

00:20:27.680 --> 00:20:29.060
you are a Unicode application.

00:20:32.980 --> 00:20:36.900
Now, of course,
I have to talk about Japanese.

00:20:36.940 --> 00:20:38.600
Once again,
Japan is one of the main markets,

00:20:38.600 --> 00:20:43.360
and we're trying to focus and make
our install base larger in Japan.

00:20:43.400 --> 00:20:46.120
And for that,
we thought that we needed a way

00:20:46.120 --> 00:20:47.820
better support for our fonts.

00:20:47.870 --> 00:20:49.900
We need a way better
input method as well,

00:20:49.910 --> 00:20:51.700
and we're on our way to achieve this.

00:20:51.740 --> 00:20:55.640
But let me talk to you a little bit
about our font support at this point.

00:20:55.730 --> 00:21:01.590
Hiragino fonts are actually a set of
six DTP quality open type 1 fonts.

00:21:01.860 --> 00:21:05.840
So desktop publishing fonts,
which are type 1 postscript,

00:21:05.900 --> 00:21:09.370
but packaged in an open type font format.

00:21:10.090 --> 00:21:11.860
It's the industry-leading
character coverage.

00:21:12.080 --> 00:21:14.920
Nobody else does that on the market.

00:21:15.000 --> 00:21:17.290
And even on Windows,
you will not be able to find that.

00:21:17.340 --> 00:21:21.680
We have the full GIS X0213 support,
very important for DTP.

00:21:21.680 --> 00:21:25.020
We support, of course,
Adobe Japan 1 for character set.

00:21:25.090 --> 00:21:27.590
We have the Check-in
78 prototype setting,

00:21:27.590 --> 00:21:28.500
Kenji support.

00:21:28.500 --> 00:21:31.160
And we added as well the
NLC shape recommendation.

00:21:31.250 --> 00:21:34.800
And you have a couple of examples
here at the bottom of the screen.

00:21:36.700 --> 00:21:37.860
Very cool stuff.

00:21:37.900 --> 00:21:42.430
Remember, in Japan right now,
we still have customers that cannot

00:21:42.430 --> 00:21:47.950
display their name correctly because
of the limitation of Mac OS X codings.

00:21:48.100 --> 00:21:52.350
So moving to Unicode enables us to
access all these glyphs and character

00:21:52.410 --> 00:21:54.900
shapes that we couldn't have before.

00:21:58.800 --> 00:22:02.200
As I said in my introduction,
the Japanese font, the Hiragino font,

00:22:02.200 --> 00:22:05.000
has support for over 20,000 glyphs.

00:22:05.010 --> 00:22:09.350
To put this in perspective,
Osaka had only 7,000.

00:22:10.660 --> 00:22:12.460
And of course,
the gadget prime is greatly reduced

00:22:12.740 --> 00:22:15.200
because of our Unicode support and
all these gifts we've been adding.

00:22:24.170 --> 00:22:28.940
Now, how did we achieve to ship
one CD across 15 languages?

00:22:29.140 --> 00:22:31.270
Across 15 languages.

00:22:31.600 --> 00:22:34.440
Well, with Mac OS X, we introduced,
if you remember,

00:22:34.490 --> 00:22:37.020
a new delivery mechanism,
which we call bundling,

00:22:37.070 --> 00:22:38.980
application bundles.

00:22:39.020 --> 00:22:42.170
And I'll go in detail about what that
means and how you as a developer can

00:22:42.250 --> 00:22:44.890
take advantage of this mechanism.

00:22:45.220 --> 00:22:48.400
Another feature that I think you're
going to appreciate in Jaguar is the

00:22:48.440 --> 00:22:50.250
localized view of the file system.

00:22:50.260 --> 00:22:52.810
See, the problem there is, that's great.

00:22:52.900 --> 00:22:56.980
We were shipping, you know, languages,
CDs in 15 languages.

00:22:56.980 --> 00:23:00.680
The only problem is that our
application names were still in English.

00:23:00.700 --> 00:23:04.210
The problem is that
folders such as pictures,

00:23:04.210 --> 00:23:06.300
movies, well, were still in English.

00:23:06.300 --> 00:23:09.400
Because, you know, we will not localize
the whole file system.

00:23:09.400 --> 00:23:12.860
On Mac OS 9, what happens is that we
localize the file system.

00:23:12.860 --> 00:23:16.140
So, you know, the system folder inside,
the fonts, police the character,

00:23:16.260 --> 00:23:17.400
all that will be localized.

00:23:17.400 --> 00:23:21.680
But on 10, this is a nightmare because we
have so many different folders.

00:23:21.680 --> 00:23:25.950
And the work to achieve this is
just too painful for compatibility

00:23:25.950 --> 00:23:27.900
reasons and maintenance.

00:23:27.960 --> 00:23:33.290
The localized view of the file system
actually suppresses this problem.

00:23:33.300 --> 00:23:34.710
And I think you're going to
be pleased with the results.

00:23:34.740 --> 00:23:37.860
I'll talk as well about text
technologies that will enable you

00:23:37.860 --> 00:23:39.840
to use Unicode in your application.

00:23:39.840 --> 00:23:42.840
Hopefully, it will give you a clear
path of masterization.

00:23:42.860 --> 00:23:45.450
And migration if you're not using
Unicode already in your application.

00:23:45.480 --> 00:23:49.610
And then the last point quickly I'll
touch about some localization tools

00:23:49.980 --> 00:23:51.300
that Apple has been working on.

00:23:51.300 --> 00:23:54.530
And maybe will give you some
ideas on how to maybe streamline

00:23:54.600 --> 00:23:56.210
your localization process.

00:23:59.600 --> 00:24:02.740
First, bundling your application.

00:24:02.880 --> 00:24:08.580
The application bundling technology has,
in fact, two goals.

00:24:08.680 --> 00:24:10.500
The first one is to
support multiple languages,

00:24:10.500 --> 00:24:14.820
but the second one is to hide
all the glue that before we

00:24:14.820 --> 00:24:16.700
had to show to the users.

00:24:16.810 --> 00:24:21.340
So in fact, what happens,
a bundle-- what is a bundle?

00:24:21.520 --> 00:24:24.860
A bundle is, in fact,
a structured directory.

00:24:24.980 --> 00:24:28.820
But this directory is presented
to the user as a single icon.

00:24:28.920 --> 00:24:32.900
And I'm sure you're all familiar
with this concept by now.

00:24:33.410 --> 00:24:35.300
As a developer,
how are you going to be able to

00:24:35.300 --> 00:24:38.000
identify this structure as a bundle?

00:24:38.460 --> 00:24:41.710
You're going to set the bundle bit,
the package info file,

00:24:41.760 --> 00:24:44.890
which is inside the bundle,
and you'll need to

00:24:44.970 --> 00:24:47.560
have an extension .app.

00:24:51.400 --> 00:24:55.940
So now, let's look in more detail
about what's inside a bundle.

00:24:56.000 --> 00:24:59.100
Hope you like my graphics because
I spend a lot of time on them.

00:25:01.000 --> 00:25:04.300
An application bundle can
have multiple binaries.

00:25:04.390 --> 00:25:04.660
How?

00:25:04.850 --> 00:25:07.340
That's important because
remember the keynote,

00:25:07.370 --> 00:25:09.540
when I was talking about
the support for Mac OS,

00:25:09.570 --> 00:25:10.940
the future?

00:25:10.980 --> 00:25:12.720
Well,
the fact of the matter is you're shipping

00:25:12.720 --> 00:25:15.440
an application still on Mac OS 9.

00:25:15.480 --> 00:25:18.980
The nice thing with this support is
that you're going to be able to ship a

00:25:18.980 --> 00:25:24.480
Mac OS binary and a Carbon CFM binary
should you support still Mac OS 9.

00:25:25.420 --> 00:25:28.300
The other advantage is going to
support multiple localization.

00:25:28.400 --> 00:25:29.800
Inside this burden,
you're going to be able

00:25:29.800 --> 00:25:32.220
to put your French,
English, Japanese resources,

00:25:32.220 --> 00:25:35.600
and I'll go in details about
how you can achieve that.

00:25:35.790 --> 00:25:38.930
And as I said,
the binaries could be CFM or Mac OS.

00:25:38.940 --> 00:25:41.720
Remember, you don't have to be
like all Mac OS at once.

00:25:41.810 --> 00:25:44.180
You can still continue
supporting your Mac OS 9 system.

00:25:46.290 --> 00:25:48.240
Can be launched on Mac OS 9,
and I think you'll need

00:25:48.240 --> 00:25:51.000
to use CarbonLib 1.4,
if I'm not mistaken,

00:25:51.000 --> 00:25:52.180
to have the full support for this.

00:25:52.260 --> 00:25:55.260
And the cool thing, too,
is that it's not just for applications.

00:25:55.260 --> 00:25:59.440
If you're shipping libraries, plugins,
well, you can build on them as well.

00:25:59.460 --> 00:26:02.530
You can present a single,
elegant interface to your users.

00:26:06.770 --> 00:26:09.170
So now I'm going to go through
the hierarchy by itself.

00:26:09.200 --> 00:26:15.150
It's very, very important that actually
you as a developer embrace

00:26:15.240 --> 00:26:19.100
this standard of application
bundles because there are many,

00:26:19.100 --> 00:26:20.200
many advantages.

00:26:20.200 --> 00:26:23.100
The first that we see is the
support for multiple localization,

00:26:23.100 --> 00:26:26.260
but the second one is that it really,
really makes life easier for

00:26:26.260 --> 00:26:30.820
developers and our customers because
they don't have to find out now,

00:26:30.820 --> 00:26:33.860
okay, so if I copy this application,
I need to go into the file system,

00:26:34.310 --> 00:26:36.990
and I need to take the extension,
and then there is a driver

00:26:37.060 --> 00:26:38.460
I need to pick up as well.

00:26:38.460 --> 00:26:41.520
Oh, and yes, there is the plugins on
that side and the help file.

00:26:41.520 --> 00:26:43.970
I mean, if you want to copy an
application to another hard drive,

00:26:44.000 --> 00:26:44.820
it's a nightmare.

00:26:44.820 --> 00:26:48.100
With this,
you can put all your libraries,

00:26:48.100 --> 00:26:52.850
all your help files, all your pictures,
whatever you need for your application

00:26:52.930 --> 00:26:55.180
to run in one single directory.

00:26:55.180 --> 00:26:58.940
And so when the user is going to be
in the finder and is going to copy,

00:26:58.940 --> 00:27:01.900
in fact, the bundle,
he's copying a full directory.

00:27:01.900 --> 00:27:04.200
So he's going to be copying all
the things that your application,

00:27:04.240 --> 00:27:05.240
needs to run.

00:27:05.390 --> 00:27:08.860
So no more cold support, you know,
to your company saying, "Hey,

00:27:08.860 --> 00:27:09.640
I don't understand.

00:27:09.640 --> 00:27:10.130
I copied my application.

00:27:10.150 --> 00:27:13.710
It doesn't work anymore." Now,
let's look inside the bundle.

00:27:14.010 --> 00:27:16.550
Let's try to go step by step on
the things you'll have to do in

00:27:16.820 --> 00:27:18.210
order to bundle your application.

00:27:18.240 --> 00:27:23.340
The first thing at the top is a
folder called yourapplication.app.

00:27:23.340 --> 00:27:25.720
Here, in this case,
I'm going to be using Sketch,

00:27:25.760 --> 00:27:27.640
which is a very simple
application that does drawing.

00:27:30.110 --> 00:27:33.840
Below this, the first folder you're going
to find is called Contents.

00:27:33.870 --> 00:27:37.670
Note that the spelling of
each word is very important.

00:27:38.560 --> 00:27:43.000
Inside this contents folder,
we're going to have different things.

00:27:43.000 --> 00:27:44.870
Let me walk through
actually these things.

00:27:45.000 --> 00:27:47.600
The first thing is the Info.plist.

00:27:47.690 --> 00:27:49.230
This is actually a CFDictionary.

00:27:49.450 --> 00:27:55.830
You have to look at the
Info.plist as the heart of a bundle.

00:27:55.950 --> 00:27:58.600
The Info.plist is where
all the information about

00:27:58.600 --> 00:28:00.120
your application is stored.

00:28:00.240 --> 00:28:02.740
This is where you're going to put
the version of your application.

00:28:02.840 --> 00:28:04.060
This is where you're
going to put the name.

00:28:04.160 --> 00:28:07.080
This is where you're going to say if
your application supports multiple

00:28:07.080 --> 00:28:10.240
localization and many different tags.

00:28:10.660 --> 00:28:13.880
The cool thing with that is that the
InfoPetist is a basic CFDictionary,

00:28:13.880 --> 00:28:16.480
so it's an array of data, tags,
and values.

00:28:20.380 --> 00:28:23.830
The second part of that is
a folder called Resources,

00:28:23.850 --> 00:28:27.080
and let's go into detail
about what's inside Resources.

00:28:27.830 --> 00:28:31.360
The first that you see here
is that I have sketch.rsrc.

00:28:31.520 --> 00:28:34.460
This is, in fact,
consider that you had before,

00:28:34.460 --> 00:28:36.630
Mac OS X application, remember,
you have a data fork

00:28:36.630 --> 00:28:37.760
and the resource fork.

00:28:37.920 --> 00:28:41.940
In fact, here,
I have the resource fork of my

00:28:42.080 --> 00:28:43.940
application residing in here.

00:28:44.070 --> 00:28:47.260
But notice as well that
I have an english.lproj.

00:28:47.400 --> 00:28:49.710
This is where I'm gonna
put all the strings,

00:28:49.920 --> 00:28:52.910
all the resources that
need to be localized.

00:28:55.080 --> 00:28:57.880
And inside that,
you'll find a couple of things.

00:28:57.960 --> 00:29:01.780
The first one is here,
you have the localized resources.

00:29:02.010 --> 00:29:04.330
And an infopdist of strings.

00:29:04.470 --> 00:29:08.000
Note that in the infopdist of strings,
I'll talk later,

00:29:08.000 --> 00:29:10.980
is where you're gonna put actually the
localization name for your application,

00:29:11.130 --> 00:29:13.030
should you go that path.

00:29:13.220 --> 00:29:17.160
The important thing to understand here
is that by bundling your application,

00:29:17.290 --> 00:29:19.690
you don't have to change your code.

00:29:20.220 --> 00:29:22.930
On Mac OS 9, if you do a get one
resource or get resource,

00:29:23.190 --> 00:29:26.420
the resource manager is going
to go open the data fork and get

00:29:26.440 --> 00:29:28.100
the resource that you asked for.

00:29:28.100 --> 00:29:31.900
So let's say you wanted to get
str pound 100 because inside

00:29:31.960 --> 00:29:35.040
you had the name of one of your
customers or a button or whatever.

00:29:35.040 --> 00:29:38.870
The cool thing with that is when you're
going to be doing a get one resource,

00:29:38.900 --> 00:29:41.940
the system is going to say, okay,
get one resource,

00:29:41.940 --> 00:29:43.500
so what's the preferred language?

00:29:43.500 --> 00:29:45.680
So the preferred language is English.

00:29:45.700 --> 00:29:49.220
So the system is going to go and it's
going to work through the english.lproj

00:29:49.280 --> 00:29:54.620
and it's going to look in localized.rsrc
to find if it sees str pound 100.

00:29:54.680 --> 00:29:58.500
If it gets str pound 100, boom,
it sends back to your application.

00:29:58.500 --> 00:30:02.740
Important to note that you don't have to
change anything in your app to bundle it.

00:30:02.840 --> 00:30:06.700
Let's say that, in fact,
this resource has not been localized.

00:30:06.700 --> 00:30:11.540
Well, then the system is clever enough
to go and look in the sketch.rsrc,

00:30:11.540 --> 00:30:12.610
the other resource.

00:30:17.280 --> 00:30:19.930
The third file there is the package info,
and in fact,

00:30:20.040 --> 00:30:23.540
this file is a basic text file
that contains the type and creator.

00:30:23.540 --> 00:30:27.170
I should say, yeah,
what we understood as the file type and

00:30:27.170 --> 00:30:29.690
the file creator before on Mac OS 9.

00:30:29.700 --> 00:30:33.000
We did that, in fact,
to identify the package,

00:30:33.000 --> 00:30:35.970
identify the package as a bundle,
and second,

00:30:36.070 --> 00:30:38.850
to make things faster for the finder
when he needed to find out the type

00:30:38.940 --> 00:30:40.500
and creator of your application.

00:30:42.650 --> 00:30:45.690
And the last one is, of course,
the folder where your

00:30:45.700 --> 00:30:47.110
binary is going to reside.

00:30:47.310 --> 00:30:51.250
Here, in this case, I support Mac OS,
but note that Sketch could be

00:30:51.260 --> 00:30:53.730
actually the Carbon CFM version of it.

00:30:53.810 --> 00:30:54.930
It doesn't matter.

00:30:54.930 --> 00:30:58.880
You put here your Carbonized version or
your Mac OS version of your application.

00:30:59.000 --> 00:30:59.760
It's up to you.

00:31:02.400 --> 00:31:05.300
Now, what happens if I want
to add a new language?

00:31:05.430 --> 00:31:09.820
Well, what you will do is actually add
a new folder inside resources.

00:31:09.970 --> 00:31:12.140
And here in this case, of course,
I want my application

00:31:12.140 --> 00:31:14.100
to understand French.

00:31:14.240 --> 00:31:17.100
So I'm going to add a
folder called French.lproj.

00:31:17.210 --> 00:31:20.920
Oh my god, what's inside that project,
that folder?

00:31:21.210 --> 00:31:24.200
Well, in fact, I have the same thing
that I had for English,

00:31:24.250 --> 00:31:27.330
the localized resources
and the infopilis.strings.

00:31:27.340 --> 00:31:31.860
The cool thing, once again,
is let's say I change my preferences

00:31:31.860 --> 00:31:34.580
to be French in my languages,
and I want the finder

00:31:34.580 --> 00:31:35.390
now to be in French.

00:31:35.400 --> 00:31:37.020
I don't have to change my code.

00:31:37.060 --> 00:31:41.440
The getOneResource I was doing before is
going to go inside the French.elproach

00:31:41.610 --> 00:31:43.030
and get me the localized resource.

00:31:43.060 --> 00:31:45.120
That's pretty cool, I think.

00:31:49.120 --> 00:31:51.850
And here, of course,
you could put traditional Chinese,

00:31:51.850 --> 00:31:54.600
and you could create as
many folders as you want.

00:31:55.600 --> 00:31:59.260
I should mention that the file name
convention for the folder supports

00:31:59.340 --> 00:32:02.730
actually one of the ISO standards,
and I think I have that in my next slide.

00:32:02.760 --> 00:32:05.600
And the direction we
are going is actually,

00:32:05.690 --> 00:32:08.760
instead of putting the full name,
putting just the abbreviation.

00:32:08.780 --> 00:32:12.420
But if you look at the ISO standards,
it's pretty well defined.

00:32:12.430 --> 00:32:15.560
And here is my full application.

00:32:16.050 --> 00:32:17.260
I have all the things I need.

00:32:17.260 --> 00:32:20.060
Important to understand
as well that in there,

00:32:20.060 --> 00:32:23.460
I could have actually something,
a folder called plugin, and put,

00:32:23.460 --> 00:32:26.280
you know,
the plugins that my application needs.

00:32:26.340 --> 00:32:28.260
It's important to understand
as well that there,

00:32:28.270 --> 00:32:31.780
in my resources, I could put pictures,
I could put movies.

00:32:31.780 --> 00:32:33.110
Let's say you want to
localize movies for,

00:32:33.110 --> 00:32:34.690
like, you know,
because the movie is going to be

00:32:34.690 --> 00:32:36.020
different in Japanese than in English.

00:32:36.020 --> 00:32:39.780
Important to understand as
well that with that structure,

00:32:39.780 --> 00:32:42.980
all the things that your
application needs to run on

00:32:42.980 --> 00:32:45.520
Mac OS X are hidden to the user.

00:32:46.000 --> 00:32:49.340
So there are less chances of
having the user going and,

00:32:49.340 --> 00:32:50.940
you know,
removing a library that you need

00:32:50.940 --> 00:32:53.700
for your application to run,
removing some resources that

00:32:53.800 --> 00:32:55.250
are important or help files.

00:32:55.280 --> 00:32:58.370
So there are many,
many advantages in actually bundling,

00:32:58.380 --> 00:32:59.560
packaging your application.

00:33:02.710 --> 00:33:05.500
Now, let's talk a little bit about the
localized view of a file system.

00:33:05.500 --> 00:33:08.100
Once again,
new feature that we're putting in Jaguar,

00:33:08.270 --> 00:33:10.470
something that, you know,
our developers have been asking and

00:33:10.470 --> 00:33:14.240
our customers were asking as well,
of course.

00:33:14.990 --> 00:33:17.900
The problem is that, great,
you bundle your application,

00:33:18.030 --> 00:33:21.830
you support 15 languages,
you're shipping one CD across the world.

00:33:21.900 --> 00:33:24.830
Damn, your application name
is still in English.

00:33:24.840 --> 00:33:26.740
Well, that doesn't look very good, right?

00:33:26.850 --> 00:33:29.050
I mean,
you're selling a great application,

00:33:29.280 --> 00:33:32.500
but you still have your folders and
your application name in English.

00:33:32.500 --> 00:33:33.790
Well, not anymore.

00:33:33.800 --> 00:33:35.730
Take the transition.

00:33:37.500 --> 00:33:40.330
The goals behind this new feature
was actually to enable the

00:33:40.330 --> 00:33:42.540
localized view of a file system.

00:33:42.660 --> 00:33:46.100
And what we wanted is to be able
to have different localization

00:33:46.100 --> 00:33:49.800
at the same time on the screen
for users and our developers.

00:33:49.920 --> 00:33:52.570
And of course,
the main idea was to enable developers'

00:33:52.570 --> 00:33:55.500
products to localize their product names.

00:33:57.390 --> 00:33:59.620
So now let me show you how you're
going to be able to achieve that in

00:34:00.140 --> 00:34:02.930
the upcoming version of Mac OS X.

00:34:03.410 --> 00:34:06.790
Okay, to bundle, to localize the file
name of your application,

00:34:06.790 --> 00:34:08.650
and once again, remember,
it has to be bundled,

00:34:08.650 --> 00:34:10.560
you have two things to do.

00:34:10.800 --> 00:34:13.750
The first thing,
make sure that in your Info.plist,

00:34:13.750 --> 00:34:16.240
you have the key CFBundleName defined.

00:34:16.260 --> 00:34:19.250
So here in my previous example,
for instance,

00:34:19.350 --> 00:34:23.500
the key in my Info.plist would
be CFBundleName equal sketch.

00:34:25.730 --> 00:34:27.720
Now we added a new tag
in Launch Services,

00:34:27.720 --> 00:34:32.690
and the tag is "LS has localized display
name." That is a Boolean that you need

00:34:32.810 --> 00:34:35.830
to set to true in your info.p list.

00:34:36.850 --> 00:34:40.090
And after that, remember the hierarchy,
where I have the English.lproj,

00:34:40.580 --> 00:34:41.360
French.lproj.

00:34:41.460 --> 00:34:44.920
Inside that folder,
I have a file called infopdist.strings.

00:34:44.920 --> 00:34:48.500
What you will do is that
in this infopdist.strings,

00:34:48.500 --> 00:34:53.640
you'll have to add actually one thing,
and it's the localized name of a bundle.

00:34:53.640 --> 00:34:57.770
So you'll add the key, CFBundle name,
and then you'll put the localized name.

00:34:57.800 --> 00:35:00.780
So for instance, in French,
it would be le sketch.

00:35:00.780 --> 00:35:01.800
Don't follow my example.

00:35:01.800 --> 00:35:04.380
But, you know,
that gives you a good idea.

00:35:04.380 --> 00:35:05.140
Hopefully you get the idea.

00:35:07.820 --> 00:35:08.790
Now, what about folder names?

00:35:08.840 --> 00:35:10.820
Because maybe you're
shipping an application,

00:35:10.820 --> 00:35:13.310
it's bundled,
but maybe you have help files that

00:35:13.650 --> 00:35:17.900
you want actually the users to see,
or maybe samples, you know, tutorials.

00:35:17.900 --> 00:35:20.630
Well, tutorials is great in English,
but in French,

00:35:20.630 --> 00:35:22.150
actually in French it's the same.

00:35:22.160 --> 00:35:25.260
But in Japanese, it's going to be pretty
difficult to understand.

00:35:27.190 --> 00:35:30.020
So let me show you now how you're going
to be able to do that for folders.

00:35:30.020 --> 00:35:32.120
Folders get localized.

00:35:32.120 --> 00:35:33.600
It's pretty straightforward.

00:35:33.600 --> 00:35:36.090
It looks complex on my screen,
but believe me, it's pretty easy.

00:35:36.090 --> 00:35:39.300
The first thing is you're going to
add an extension to your folder name.

00:35:39.440 --> 00:35:40.780
Oh my god, an extension.

00:35:40.780 --> 00:35:44.010
So you're going to add .localized to,
let's say, tutorial.

00:35:44.200 --> 00:35:47.390
So you're going to have a folder
called tutorial.localized.

00:35:47.460 --> 00:35:51.240
And what you'll do in the finder is
that you tell him to hide the extension.

00:35:51.240 --> 00:35:51.960
No big deal.

00:35:51.960 --> 00:35:55.470
At that point, you just type a couple of
texts and click a checkbox.

00:35:56.600 --> 00:36:01.000
The second step is inside this
folder to create a .localized folder.

00:36:02.280 --> 00:36:04.200
You won't be able to do
that in the Finder because,

00:36:04.200 --> 00:36:06.470
of course, this extension,
this is not supported by the Finder.

00:36:06.480 --> 00:36:09.330
We don't want people, users,
to enter this.

00:36:09.420 --> 00:36:11.360
So you have to go through a terminal,
or you can do that

00:36:11.360 --> 00:36:12.680
programmatically if you wish.

00:36:14.990 --> 00:36:20.140
This localized folder, .localized folder,
will actually be hidden to the user,

00:36:20.140 --> 00:36:21.990
so you don't have to
worry about the content.

00:36:21.990 --> 00:36:26.240
And inside this folder,
you'll create actually different

00:36:26.240 --> 00:36:28.680
files and one for each language.

00:36:28.680 --> 00:36:31.790
Here in this case, I'll put en.strings.

00:36:32.830 --> 00:36:35.270
And inside this file,
what you'll do is that you'll put

00:36:35.560 --> 00:36:38.330
folder name equal the French name.

00:36:38.490 --> 00:36:42.420
So if I had movies, that's a bad example.

00:36:42.450 --> 00:36:45.500
If I had pictures, I'd have photography.

00:36:45.510 --> 00:36:47.610
I'd put that in the file.

00:36:48.110 --> 00:36:50.730
And then if I wanted to have, like,
you know, the name translated correctly

00:36:50.840 --> 00:36:54.280
or displayed correctly,
should I say, in Japanese, well,

00:36:54.280 --> 00:36:58.460
I'll add actually to
my folder a j.strings,

00:36:58.460 --> 00:37:00.480
and inside I'll put
the localization in j,

00:37:00.500 --> 00:37:01.800
et cetera, et cetera.

00:37:01.800 --> 00:37:06.170
If you want to find out what character
code you should use actually for,

00:37:06.170 --> 00:37:10.870
let's say, traditional Chinese, well,
you can check the ISO 639-1

00:37:11.020 --> 00:37:13.180
for the list of the languages.

00:37:13.200 --> 00:37:14.550
Thank you.

00:37:14.900 --> 00:37:18.070
And hopefully we'll have a tech
note by then when we ship Jaguar,

00:37:18.100 --> 00:37:21.730
where actually we'll have like a clear
step approach for you guys to use this.

00:37:21.840 --> 00:37:26.180
All right,
if I could switch now on the demo,

00:37:26.180 --> 00:37:27.210
please.

00:37:27.310 --> 00:37:31.220
We're doing all the timing.

00:37:43.600 --> 00:37:49.590
I'm going to try to walk through
some of the new features of Mac OS X.

00:37:49.700 --> 00:37:52.030
Nothing fancy here,
but I think you'll be pleased with

00:37:52.160 --> 00:37:53.400
what we've been doing in Jaguar.

00:37:53.400 --> 00:37:59.720
I'll start by showing you the
international control panel.

00:38:03.900 --> 00:38:05.110
I want to show you the keyboard menu.

00:38:05.250 --> 00:38:08.460
Actually, I can use this.

00:38:08.490 --> 00:38:11.730
We've been adding many new keyboards,
and I hope you'll be pleased with

00:38:12.240 --> 00:38:13.490
actually the work we've been doing.

00:38:13.490 --> 00:38:19.820
You can see actually we have Thai,
Hawaiian, huge market Hawaiian for us.

00:38:19.820 --> 00:38:21.300
Just kidding.

00:38:22.250 --> 00:38:26.040
I mean, you can see the keyboard actually
has been there since 10.0.

00:38:26.040 --> 00:38:29.170
Something I didn't mention
actually in my slides,

00:38:29.360 --> 00:38:31.130
but it's very important,
and if you went to the

00:38:31.250 --> 00:38:34.890
session 200 on Unicode,
we're going to give you developers

00:38:34.890 --> 00:38:38.510
a way to add new keyboards to
Mac OS X because Apple cannot come

00:38:38.510 --> 00:38:41.510
up with all the keyboards for all
the languages around the world.

00:38:41.520 --> 00:38:45.220
And you as a developer are the best
to know where actually you should go,

00:38:45.220 --> 00:38:47.660
what languages you want to support,
and what features you

00:38:47.740 --> 00:38:48.860
want to offer developers.

00:38:48.860 --> 00:38:51.560
So with Jaguar, it's pretty cool.

00:38:51.620 --> 00:38:54.490
We can offer you a way to
actually have your own keyboards,

00:38:54.870 --> 00:38:58.520
drop them in the system folder,
and actually being able to select them.

00:38:58.580 --> 00:39:00.660
I think it's a good feature.

00:39:02.190 --> 00:39:04.430
So here you can see that
I selected the symbol,

00:39:04.430 --> 00:39:05.160
Arabic.

00:39:05.170 --> 00:39:06.440
Oh, a new one, character palette.

00:39:06.600 --> 00:39:07.280
Hmm, what's that?

00:39:07.300 --> 00:39:08.820
Well, I guess we'll see.

00:39:08.850 --> 00:39:10.780
The Unicodex input,
notice that this has been

00:39:10.780 --> 00:39:13.170
around actually for a while now.

00:39:13.520 --> 00:39:17.100
And here we have Korean, Japanese,
Chinese, simplified traditional.

00:39:17.150 --> 00:39:19.980
Note that we have support for
Eastern European languages,

00:39:19.990 --> 00:39:22.800
Bulgarian, Russian, Cyrillic.

00:39:25.470 --> 00:39:28.020
The thing I told you about the
concept of preferred language,

00:39:28.020 --> 00:39:29.900
that's where actually you're
going to be setting that up.

00:39:29.900 --> 00:39:32.790
Because I could write an application
tomorrow and it could have,

00:39:32.790 --> 00:39:34.100
let's say, French and German.

00:39:34.100 --> 00:39:35.640
But if you're running on a U.S.

00:39:35.800 --> 00:39:37.970
system, well,
you want still the French to come

00:39:37.980 --> 00:39:39.540
before the German in this case.

00:39:39.600 --> 00:39:41.850
And this is where actually I'm
going to set up the languages.

00:39:41.860 --> 00:39:43.660
Here I'm saying that French is second.

00:39:43.660 --> 00:39:46.860
Actually, I want Spanish third.

00:39:48.310 --> 00:39:50.620
I don't have Spanish here, but see,
I mean, I have all the script,

00:39:50.690 --> 00:39:51.600
all the languages supported.

00:39:51.600 --> 00:39:53.760
Español, aquí estamos.

00:39:56.160 --> 00:39:58.010
Après le français, voilà.

00:39:58.120 --> 00:40:02.810
Here you have a list of the scripts,
okay, that are supported by the system.

00:40:02.830 --> 00:40:03.380
Great.

00:40:03.380 --> 00:40:06.510
So I have a keyboard menu
and I have all the scripts.

00:40:06.800 --> 00:40:07.110
Perfect.

00:40:07.110 --> 00:40:10.560
Now I'm going to go and I'm
going to launch Simple Text.

00:40:10.560 --> 00:40:12.880
Simple Text, everybody knows that.

00:40:13.140 --> 00:40:16.250
Typical text-edit,
quick-draw application.

00:40:16.840 --> 00:40:17.290
That's cool.

00:40:17.290 --> 00:40:18.940
I just bought Mac OS Jaguar.

00:40:18.940 --> 00:40:20.120
I have it on my machine.

00:40:20.120 --> 00:40:21.260
I'm going to ship it to my customers.

00:40:21.260 --> 00:40:22.350
My application looks great.

00:40:22.460 --> 00:40:24.200
I have a quick draw application.

00:40:24.200 --> 00:40:27.700
And of course, I cannot tell them that
Mac OS X supports Arabic.

00:40:29.240 --> 00:40:31.900
Well, damn, I cannot access the keyboard.

00:40:31.950 --> 00:40:34.700
Well, yeah,
it's not a Unicode application.

00:40:35.800 --> 00:40:39.720
So don't be in this case when
we ship Mac OS X 10.2 Jaguar.

00:40:39.990 --> 00:40:41.860
Make sure you support Unicode.

00:40:41.940 --> 00:40:44.700
So here you can see I can
support the previous script

00:40:44.700 --> 00:40:46.040
that was supported in 10.1.

00:40:46.230 --> 00:40:48.160
Because here you don't
have to be Unicode,

00:40:48.160 --> 00:40:50.870
but you get better support, of course,
for Japanese if you're Unicode.

00:40:50.990 --> 00:40:53.060
But here you can see Arabic,
there is no way I can get it.

00:40:53.080 --> 00:40:56.860
The character palette, no way,
only for Unicode applications.

00:40:56.890 --> 00:40:59.440
The Unicodex input, no way.

00:41:02.940 --> 00:41:06.380
What about TextEdit?

00:41:06.440 --> 00:41:07.410
Oh, look at that, TextEdit.

00:41:07.470 --> 00:41:08.690
I can type Arabic.

00:41:08.940 --> 00:41:10.260
I have a character palette.

00:41:10.280 --> 00:41:11.640
I have a Unicodex input.

00:41:11.710 --> 00:41:14.090
Pretty fly, as they say in France.

00:41:15.130 --> 00:41:19.000
And then I'll go-- it's very important
to understand all Cocoa applications

00:41:19.000 --> 00:41:21.450
actually get the international
support for free because they

00:41:21.450 --> 00:41:22.900
get Unicode support for free.

00:41:23.020 --> 00:41:25.940
And I'll go in more details
about what that means.

00:41:26.610 --> 00:41:28.160
But I'm not going to use text today.

00:41:28.200 --> 00:41:32.700
Actually, I'm going to use WordText,
my favorite application.

00:41:35.620 --> 00:41:39.090
I'm going to change the keyboard,
type some Arabic just to show you that,

00:41:39.190 --> 00:41:41.100
you know, we're not kidding.

00:41:43.200 --> 00:41:44.100
I apologize in advance.

00:41:44.170 --> 00:41:46.430
I don't know how to type Arabic,
but it looks good.

00:41:46.430 --> 00:41:49.560
It does look good, look.

00:41:52.500 --> 00:41:54.380
I wrote that yesterday night
and I still have some problems,

00:41:54.380 --> 00:41:55.980
so don't worry about the UI.

00:41:55.980 --> 00:42:00.290
Don't tell John Guernsey either,
if you're not our UI guy.

00:42:00.300 --> 00:42:02.580
So here I can type some Arabic.

00:42:02.580 --> 00:42:03.300
That's cool.

00:42:03.300 --> 00:42:04.190
It looks pretty nice.

00:42:04.330 --> 00:42:04.640
It's NTIA.

00:42:04.760 --> 00:42:05.560
It's using Quartz.

00:42:05.620 --> 00:42:06.880
It's actually pretty fancy.

00:42:08.970 --> 00:42:10.330
Now, let me close that.

00:42:10.530 --> 00:42:12.170
We don't need this anymore.

00:42:12.190 --> 00:42:15.360
I can maybe try to create a new file.

00:42:15.700 --> 00:42:18.100
I'm going to go back there.

00:42:18.140 --> 00:42:22.090
And here, I'm going to show you something

00:42:22.470 --> 00:42:38.250
nd I will now introduce
the character palette.

00:42:38.250 --> 00:42:39.550
You know, sometimes the prime and the
advantage with Unicode is that you

00:42:39.560 --> 00:42:40.210
can access a lot of characters now.

00:42:40.270 --> 00:42:41.450
You can go and access characters
that you couldn't even see before.

00:42:41.490 --> 00:42:42.260
So the prime that we had,
that we were faced,

00:42:42.260 --> 00:42:43.320
is to come with a solution,
but I would say an easy solution

00:42:43.320 --> 00:42:45.160
so customers can actually go and
enter characters by themselves.

00:42:45.160 --> 00:42:47.870
So here what we have,
the character palette,

00:42:47.870 --> 00:42:52.030
has this goal of helping you surf
glyphs and characters inside a font.

00:42:52.400 --> 00:42:55.020
So here, for instance,
I'm going to go and switch

00:42:55.020 --> 00:42:57.960
to our favorite font,
which is called Lucida Grande,

00:42:58.120 --> 00:42:58.850
the system font.

00:42:59.160 --> 00:43:03.970
And what happens is that in the
bottom of the screen is the characters

00:43:03.970 --> 00:43:06.390
that are supported by the font.

00:43:06.480 --> 00:43:08.920
So I'm going to be able to surf,
if I may say,

00:43:08.950 --> 00:43:11.400
different categories of characters.

00:43:11.400 --> 00:43:14.650
So here we have math, arrows,
parentheses, and here I'm just on

00:43:14.650 --> 00:43:16.190
the Roman character set.

00:43:16.450 --> 00:43:20.060
And if on the bottom I don't get a glyph,
that means that, you know,

00:43:20.060 --> 00:43:21.980
that font by itself doesn't support.

00:43:22.400 --> 00:43:23.760
It doesn't support this character.

00:43:23.840 --> 00:43:26.020
It doesn't have an entry
for this character.

00:43:26.020 --> 00:43:28.620
So here we're going to
see for actually Lucida.

00:43:28.620 --> 00:43:31.160
So it seems Lucida actually
supports a bunch of things.

00:43:31.170 --> 00:43:32.220
You can get the plus, you know.

00:43:32.340 --> 00:43:34.630
It has, like,
it seems like all the math symbols.

00:43:34.640 --> 00:43:35.480
Pretty cool.

00:43:35.480 --> 00:43:40.600
I mean,
do you know how to enter that in Lucida?

00:43:40.600 --> 00:43:40.600
Ah, personally I don't.

00:43:43.200 --> 00:43:46.920
I can go-- here we can see that,
for instance,

00:43:46.920 --> 00:43:49.210
it doesn't have these characters.

00:43:51.070 --> 00:43:51.810
It has the parentheses.

00:43:51.870 --> 00:43:52.460
That's cool.

00:43:52.460 --> 00:43:54.050
So here you can see I can type.

00:43:54.240 --> 00:43:55.700
Let me try to make that
a little bit bigger.

00:44:05.520 --> 00:44:06.380
Okay, so that's cool.

00:44:06.380 --> 00:44:07.330
I can type the parentheses.

00:44:07.410 --> 00:44:10.200
All of that is in the Lucida font.

00:44:10.260 --> 00:44:13.050
Hey,
something that you probably didn't know,

00:44:13.050 --> 00:44:14.090
Lucida supports Greek.

00:44:14.280 --> 00:44:14.690
Look at that.

00:44:14.850 --> 00:44:18.480
I can actually go and
type some Greek in here.

00:44:25.600 --> 00:44:27.400
I don't know if you can see,
but you can drop the glyph.

00:44:27.550 --> 00:44:30.100
It's pretty nice.

00:44:30.190 --> 00:44:32.630
So here I see a product in Greek.

00:44:32.980 --> 00:44:38.140
So now what happens if
I want some cool stuff,

00:44:38.140 --> 00:44:41.340
let's say a heart.

00:44:44.600 --> 00:44:45.570
It works again!

00:44:45.650 --> 00:44:46.470
What the hell is going on here?

00:44:46.580 --> 00:44:47.960
I thought you had a Unicode system.

00:44:47.960 --> 00:44:49.470
I thought that was a Unicode application.

00:44:49.550 --> 00:44:53.640
Well, yeah, that's a Unicode application,
but the Lucida font, you know,

00:44:53.640 --> 00:44:58.410
cannot have, you know,
the 65,000 characters that Unicode has.

00:44:58.560 --> 00:45:03.060
But since it's Unicode,
I know what's the character code.

00:45:03.110 --> 00:45:04.890
I'm not going to lose
data in the translation.

00:45:05.060 --> 00:45:07.250
So let's look at a cool feature.

00:45:07.510 --> 00:45:08.450
Font substitution.

00:45:08.590 --> 00:45:09.800
Oh, what's that?

00:45:09.800 --> 00:45:12.780
Font substitution is actually
something that we have in our

00:45:12.780 --> 00:45:15.470
system that has this concept of,
you know what?

00:45:15.580 --> 00:45:17.920
It seems what you're trying to draw,
dude, is not the right font.

00:45:18.030 --> 00:45:19.390
Let me try to find it for you.

00:45:19.570 --> 00:45:22.160
And here, I just enabled this feature,
and I can go and type

00:45:22.240 --> 00:45:24.560
many different things,
and I'm going to be able to access

00:45:24.560 --> 00:45:28.500
glyphs that actually are not in Lucida.

00:45:28.670 --> 00:45:30.300
So here you can see that
Lucida doesn't have it.

00:45:30.350 --> 00:45:32.590
You can see on the bottom there
is no glyph for this font.

00:45:32.640 --> 00:45:34.860
But my application can
display it correctly.

00:45:40.400 --> 00:45:41.240
Thank you.

00:45:41.240 --> 00:45:48.380
- Well, the cool thing is that, well,
it works for Japanese.

00:45:48.390 --> 00:45:52.340
I mean, in your, in Roman characters,
in Roman languages, you know, it's cool.

00:45:52.360 --> 00:45:54.220
Yeah, that's true, it's cool,
because you'll be able to switch

00:45:54.300 --> 00:45:58.580
between or like get some things that,
you know, you didn't even know

00:45:58.580 --> 00:45:59.680
that was in the font.

00:45:59.740 --> 00:46:03.900
But you have to understand that in Japan,
it's very important because the way,

00:46:03.940 --> 00:46:06.040
the way the whole language work,
I should say.

00:46:06.080 --> 00:46:09.160
And here, we're gonna give you an easy
way to access these 22,000

00:46:09.160 --> 00:46:11.820
characters we put in Hiragino.

00:46:13.260 --> 00:46:13.850
So it's pretty neat.

00:46:13.910 --> 00:46:15.110
Actually, I can continue to type.

00:46:15.320 --> 00:46:17.000
And once again, I have font substitution.

00:46:17.000 --> 00:46:21.130
My document, by the way,
still thinks I'm using Lucida Grande,

00:46:21.130 --> 00:46:23.440
as a matter of fact,
which is pretty funny.

00:46:25.350 --> 00:46:27.410
And here I can actually
surf by different things.

00:46:27.490 --> 00:46:28.960
I have by category, by radical.

00:46:28.960 --> 00:46:32.800
Actually, a cool thing is, like,
I really love these digits.

00:46:32.840 --> 00:46:34.110
I think they look very nice.

00:46:34.200 --> 00:46:40.030
I'm not sure why I'll be using it, but...

00:46:47.600 --> 00:46:55.000
[Transcript missing]

00:47:08.380 --> 00:47:15.190
Let me show you now the
localized view of a file system.

00:47:15.310 --> 00:47:18.700
So once again here,
you can see the problem is that I will

00:47:18.700 --> 00:47:22.940
go to applications or I go to my home,
for instance, documents, library, movies,

00:47:22.940 --> 00:47:26.520
okay, that's great, but in French,
you know, it doesn't make too much sense.

00:47:26.650 --> 00:47:29.960
So I'm going to go back and I'm
going to say I want Francais

00:47:30.130 --> 00:47:32.100
to be French to be first.

00:47:32.220 --> 00:47:34.270
So here, of course,
the finder is not going

00:47:34.270 --> 00:47:35.460
to switch on the fly.

00:47:35.460 --> 00:47:37.720
You know, I mean,
we don't want our users to get

00:47:37.720 --> 00:47:40.050
confused with the finder restarting.

00:47:40.450 --> 00:47:44.960
So I'm going to actually
restart the finder myself.

00:47:45.080 --> 00:47:47.140
And we're going to see what happens.

00:47:57.100 --> 00:48:10.700
[Transcript missing]

00:48:10.700 --> 00:48:18.300
[Transcript missing]

00:48:20.700 --> 00:48:22.660
I've put it in Japanese,
but I was afraid I would never have been

00:48:22.660 --> 00:48:26.300
able to manipulate the finder anymore.

00:48:26.300 --> 00:48:30.100
So let me go back actually
to the English system.

00:48:36.420 --> 00:48:40.260
I go back, we launch the Finder.

00:48:40.260 --> 00:48:44.240
I don't think I need that anymore.

00:48:44.300 --> 00:48:46.380
And I want to show you something.

00:48:46.870 --> 00:48:50.330
So I told you all our applications
are shipping with support

00:48:50.420 --> 00:48:52.380
for like all the languages,
these 15 languages that

00:48:52.520 --> 00:48:56.610
we are shipping right now,
we're supporting in Mac OS X 10.1.

00:48:56.910 --> 00:48:59.060
As a user,
and you probably played with that,

00:48:59.080 --> 00:49:02.260
if you get the information
and you go to languages,

00:49:02.290 --> 00:49:03.640
you get a list, actually,
of the languages.

00:49:03.720 --> 00:49:05.360
And here we have a typical bug.

00:49:05.400 --> 00:49:08.040
Once again, this is not GM software.

00:49:08.080 --> 00:49:09.610
And you can see, actually,
that we have a list of

00:49:09.770 --> 00:49:10.870
all the different folders.

00:49:10.970 --> 00:49:13.000
You know the Lproj
folders I told you about?

00:49:13.030 --> 00:49:14.800
In fact, here,
this is what the finder is saying.

00:49:14.800 --> 00:49:16.930
And it's presenting to the user, saying,
hey, you know what?

00:49:17.000 --> 00:49:22.880
This application supports French, German,
Italian, Japanese, Korean, Spanish.

00:49:23.800 --> 00:49:30.000
[Transcript missing]

00:49:30.480 --> 00:49:32.440
But now, let me go back here.

00:49:32.690 --> 00:49:36.000
What I want to say is,
English is my first language.

00:49:36.010 --> 00:49:37.900
But let's say that-- you know what?

00:49:37.900 --> 00:49:40.480
No, in fact,
I want French to be my first language.

00:49:40.490 --> 00:49:41.880
I'm going to go back here.

00:49:42.130 --> 00:49:44.910
Here I have texted it
with French and English.

00:49:45.070 --> 00:49:48.520
So my first language is English.

00:49:48.520 --> 00:49:51.900
Actually, let's do-- I'm sure I'm
going to confuse you by now.

00:49:51.970 --> 00:49:53.960
So my first language is English.

00:49:53.980 --> 00:49:55.940
I go back here.

00:49:56.000 --> 00:49:58.600
Here I have two files, two applications.

00:49:58.700 --> 00:50:02.740
One has French and English inside,
which is like the one that

00:50:02.780 --> 00:50:04.080
we ship in our system,
of course.

00:50:04.180 --> 00:50:06.370
So I launch it, and well, what do I get?

00:50:06.540 --> 00:50:08.760
I get actually everything in English.

00:50:09.020 --> 00:50:11.200
Fine, that's what everybody expects.

00:50:11.230 --> 00:50:15.090
But now the finder is in English,
but my application doesn't

00:50:15.170 --> 00:50:16.380
have English translation.

00:50:16.380 --> 00:50:18.270
It has only French.

00:50:19.600 --> 00:50:22.370
What you can see is that I'm going
to launch the application and here,

00:50:22.370 --> 00:50:24.850
even if the finder is in English,
I get to know the application

00:50:24.850 --> 00:50:25.920
localized in French.

00:50:27.300 --> 00:50:29.000
And here there is nothing
to change in the code,

00:50:29.070 --> 00:50:29.950
and I get the support.

00:50:30.110 --> 00:50:32.440
And you can see even the window
menu has been translated.

00:50:32.440 --> 00:50:35.130
The system is clever enough
to achieve this for you.

00:50:38.190 --> 00:50:40.930
The cool thing is that I could
go back just to show you that

00:50:41.020 --> 00:50:43.600
it's truly a Unicode system.

00:50:43.600 --> 00:50:46.100
Japanese, here we go.

00:50:46.200 --> 00:50:48.220
And I'm going to put Japanese first.

00:50:48.220 --> 00:50:52.170
Actually,
I'm going to put Japanese after English.

00:50:53.060 --> 00:50:55.180
The same application, once again,
this application has not

00:50:55.180 --> 00:50:56.160
been localized in English.

00:50:56.160 --> 00:50:57.950
I launch it again, what do I get?

00:50:58.040 --> 00:50:59.200
Everything in Japanese.

00:50:59.200 --> 00:51:01.920
Once again,
this concept of preferred languages,

00:51:01.920 --> 00:51:03.420
I think, are very powerful.

00:51:03.570 --> 00:51:06.680
And you as a developer can
take advantage of that.

00:51:06.780 --> 00:51:09.000
You don't have to localize
for all the languages,

00:51:09.000 --> 00:51:10.470
localize for what makes sense.

00:51:10.470 --> 00:51:13.530
And you can tell to your users,
they'll be able to use your application

00:51:13.540 --> 00:51:15.160
even on all the localized languages.

00:51:15.200 --> 00:51:17.710
So you could have a finder in
English and you'll launch an

00:51:17.710 --> 00:51:19.480
application in Japanese if you want.

00:51:19.490 --> 00:51:20.280
This is great.

00:51:21.240 --> 00:51:23.870
And you can see, I mean,
all my menus are in

00:51:23.870 --> 00:51:25.800
Japanese and there's no problem.

00:51:30.970 --> 00:51:34.190
If you went to the
original keynote on Monday,

00:51:34.190 --> 00:51:37.540
and I think actually it
was in Scott Forstall's

00:51:37.540 --> 00:51:39.660
talk on the live channel,

00:51:40.350 --> 00:51:43.440
You know that we have spelling
services in the system.

00:51:43.610 --> 00:51:47.700
Well, the spelling services on 10.1
were a little bit limited,

00:51:47.790 --> 00:51:49.060
as I would say.

00:51:49.190 --> 00:51:51.260
Well, the cool thing is that now,
actually,

00:51:51.260 --> 00:51:57.220
we have support for better dictionaries,
more languages, and here you have them.

00:51:58.330 --> 00:52:00.140
I'd like to tell you, too,
that we're working on Japanese.

00:52:00.140 --> 00:52:02.960
It's not there right now in this
version of the system that you have,

00:52:03.040 --> 00:52:05.630
but we'll have that when we GM,
I'll assure you.

00:52:05.730 --> 00:52:08.530
And the nice thing is that
I can type in English.

00:52:08.970 --> 00:52:10.710
Hello.

00:52:11.170 --> 00:52:14.970
world, and if you're like me,
you'll type it probably like that.

00:52:15.600 --> 00:52:17.740
So I can find, you know,
the correct word.

00:52:17.850 --> 00:52:21.040
So obviously,
this is the correct spelling.

00:52:21.060 --> 00:52:23.320
Obviously, this is the correct one.

00:52:24.050 --> 00:52:28.700
But before you go and do that,
now I can type, uh, bonjour.

00:52:34.000 --> 00:52:43.300
[Transcript missing]

00:52:44.700 --> 00:52:57.100
[Transcript missing]

00:53:03.700 --> 00:53:06.610
A lot of new features in Jaguar,
a lot of new features that you as

00:53:06.610 --> 00:53:07.920
a developer can take advantage.

00:53:07.920 --> 00:53:12.790
A lot of things that our customers are
going to love only if our developers

00:53:12.840 --> 00:53:15.080
are taking advantage of them.

00:53:17.140 --> 00:53:20.580
Okay, now, very quickly,
what do you need to be sure that your

00:53:20.580 --> 00:53:22.730
application supports international text?

00:53:22.780 --> 00:53:26.000
You don't want to get in the simple
text case where you're going to ship an

00:53:26.060 --> 00:53:29.210
application with text support and your
users are not going to be able to take

00:53:29.280 --> 00:53:31.080
advantage of all these new features.

00:53:31.080 --> 00:53:35.110
I will put this in two distinct paths.

00:53:35.180 --> 00:53:39.250
The first one is make sure that your text
handling technologies handle Unicode.

00:53:39.300 --> 00:53:44.130
And what I mean by that is you need
to be able to do Unicode input,

00:53:44.460 --> 00:53:48.580
you need to be able to do Unicode layout,
and of course display Unicode.

00:53:48.610 --> 00:53:51.660
And you don't want to do any
translation at one point or another.

00:53:51.660 --> 00:53:54.540
You don't want to switch back
between Mac OS X and Japanese because

00:53:54.540 --> 00:53:57.620
then you miss completely the
purpose of going to Unicode.

00:53:59.360 --> 00:54:00.240
Now, case one.

00:54:00.240 --> 00:54:01.970
That's the difficult case.

00:54:02.120 --> 00:54:05.270
If you're a Cocoa application,
what do you have to do?

00:54:05.940 --> 00:54:07.380
Well, you don't have to do much,
actually.

00:54:07.380 --> 00:54:08.100
You don't have to do anything.

00:54:08.100 --> 00:54:12.120
I swear,
you really don't have to do anything.

00:54:12.130 --> 00:54:15.600
All controls in Cocoa are
actually international ready.

00:54:15.600 --> 00:54:19.130
Cocoa, since the beginning,
has been supporting actually Unicode.

00:54:19.130 --> 00:54:21.140
And they do Unicode layout,
they use AdSuite,

00:54:21.140 --> 00:54:23.150
and I'll go into details
about what AdSuite is,

00:54:23.150 --> 00:54:25.880
to do their Unicode layout,
and they render Unicode text.

00:54:25.880 --> 00:54:28.560
So if you're a Cocoa application,
you're done.

00:54:28.560 --> 00:54:29.820
But don't leave yet.

00:54:32.430 --> 00:54:33.200
Case two, Carbon.

00:54:33.200 --> 00:54:37.080
It's not more difficult,
it's just different.

00:54:37.110 --> 00:54:41.640
It's different in the way that a lot of
our developers coming from Mac OS X never

00:54:42.070 --> 00:54:46.370
really had a chance and never really
had an easy way to do Unicode input.

00:54:46.530 --> 00:54:48.860
They never really had an easy
way to drag and drop a control,

00:54:48.860 --> 00:54:51.490
a text-based control, and boom,
it's going to do Unicode.

00:54:51.520 --> 00:54:53.840
Well, I think now we have some
pretty cool solutions.

00:54:54.430 --> 00:54:57.230
Just as a reminder, before you had to
install the TSM handler,

00:54:57.240 --> 00:55:00.520
text services manager,
if you wanted to do Japanese, Chinese,

00:55:00.520 --> 00:55:04.660
Korean, you had to go through and, like,
you know, management input, which,

00:55:04.660 --> 00:55:07.780
you know, you had to spend a lot of
time on your code just to make

00:55:07.780 --> 00:55:09.390
sure you handled text right.

00:55:11.500 --> 00:55:12.170
I mean, here you have a list.

00:55:12.270 --> 00:55:14.040
I mean,
if you wanted to do save and open,

00:55:14.040 --> 00:55:15.100
you'd have to convert.

00:55:15.100 --> 00:55:15.840
I mean, a nightmare.

00:55:19.500 --> 00:55:22.260
With Mac OS X,
we introduce new technologies that

00:55:22.350 --> 00:55:26.290
can really help you move forward
and use Unicode at the best.

00:55:26.400 --> 00:55:28.980
The first thing that comes to mind,
if you need to display static

00:55:29.060 --> 00:55:30.990
text in your application,
you need to make sure Unicode

00:55:31.420 --> 00:55:33.890
use the Joe Theme Text Box APIs.

00:55:34.000 --> 00:55:35.980
These APIs are in the Appearance Manager.

00:55:36.240 --> 00:55:37.600
They take a CFString.

00:55:37.680 --> 00:55:39.750
They have this concept of
phone fallbacks I showed you.

00:55:40.000 --> 00:55:42.500
It's very cool for static text.

00:55:42.830 --> 00:55:45.350
If that's not enough,
if you need better control,

00:55:45.350 --> 00:55:49.750
if you need to display vertical text,
for instance, you have two choices.

00:55:49.750 --> 00:55:51.450
Actually,
I would say you have one choice.

00:55:51.540 --> 00:55:52.700
Go directly to Hatsui.

00:55:52.700 --> 00:55:56.390
Hatsui is a prototype for Nikon imaging,
and I put a couple of

00:55:56.390 --> 00:55:58.370
slides about what Hatsui is.

00:55:59.260 --> 00:56:02.680
Now, if you have text editing needs,
two different solutions.

00:56:02.740 --> 00:56:03.650
Easy one.

00:56:03.690 --> 00:56:07.380
In the toolbox with Mac OS X,
we introduced a new control.

00:56:07.380 --> 00:56:10.040
I think the tag is
Chi Unicode Text Edit Control.

00:56:10.040 --> 00:56:14.070
And that control, when you create it with
Create Unicode Control,

00:56:14.120 --> 00:56:16.270
you get full support for Unicode.

00:56:16.270 --> 00:56:19.060
And this is very cool because
you don't have to manage,

00:56:19.060 --> 00:56:20.860
you know, like the TSM handlers.

00:56:20.860 --> 00:56:23.840
You don't have to manage what
keyboard is going on right now.

00:56:23.840 --> 00:56:26.680
You just have to find out
what the users have typed.

00:56:26.680 --> 00:56:28.120
You get back the text.

00:56:28.710 --> 00:56:32.290
You can just focus on what your
application has to do and not

00:56:32.290 --> 00:56:34.420
how you should handle text.

00:56:34.680 --> 00:56:36.690
Another solution, if you need scroll bars
and things like that,

00:56:36.860 --> 00:56:38.980
is MLT, the Multilingual Text Engine.

00:56:38.980 --> 00:56:42.660
The Multilingual Text Engine has
been around since Mac OS 9,

00:56:42.660 --> 00:56:45.270
if I'm not mistaken, and on 10,
completely blossomed

00:56:45.390 --> 00:56:46.460
by the use of Hatsui.

00:56:46.460 --> 00:56:49.040
It's very nice.

00:56:49.160 --> 00:56:52.420
It's very easy as well to migrate from
a text-based implementation to MLT.

00:56:53.900 --> 00:56:56.590
Something to remember, CFString,
it's pretty nice.

00:56:56.900 --> 00:57:01.720
It's an encapsulation object
that's going to shield you

00:57:01.720 --> 00:57:02.730
from dealing with encodings.

00:57:04.720 --> 00:57:08.050
And once again, remember,
to achieve this level of support,

00:57:08.050 --> 00:57:09.270
you need to use Unicode.

00:57:09.310 --> 00:57:12.220
Make sure that you pass Unicode
strings to the control manager.

00:57:12.220 --> 00:57:15.650
Make sure you pass Unicode strings
to whatever toolbox calls you do.

00:57:18.060 --> 00:57:19.500
Quickly, what is AtSui?

00:57:19.520 --> 00:57:21.680
AtSui is a prototype for Unicode imaging.

00:57:21.730 --> 00:57:24.520
It has full support for Unicode 3.2.

00:57:24.570 --> 00:57:26.400
That means we support surrogates.

00:57:26.420 --> 00:57:28.420
That gives us access to virtually,
if I'm not mistaken,

00:57:28.420 --> 00:57:29.820
a million characters.

00:57:29.860 --> 00:57:32.010
Hello, welcome to Earth.

00:57:32.140 --> 00:57:34.750
We support combining
characters and complex scripts,

00:57:34.750 --> 00:57:37.150
but thanks to this technology
that you can type Baidai,

00:57:37.190 --> 00:57:40.720
that you can type, you know, Arabic,
Hebrew, that you can type complex scripts

00:57:40.950 --> 00:57:43.770
such as Thai and Indic as well.

00:57:43.970 --> 00:57:45.040
It's very nice.

00:57:45.270 --> 00:57:47.930
And once again,
it replaces WordScript 1 on Mac OS X.

00:57:47.940 --> 00:57:50.940
And that's the technology that
enables the system to have this

00:57:50.940 --> 00:57:52.930
concept of font substitution work.

00:57:57.790 --> 00:58:02.240
This chart is actually these graphics
just to show you the architecture for

00:58:02.240 --> 00:58:06.130
Carbon application and what level,
what pieces you need to hook up in order

00:58:06.210 --> 00:58:07.460
to take advantage of these technologies.

00:58:07.460 --> 00:58:11.640
The idea is to understand that ATS,
which is Apple Type Services,

00:58:11.790 --> 00:58:14.180
is the engine that gives us
access to all these phone

00:58:14.340 --> 00:58:16.050
formats we support on Mac OS X.

00:58:16.060 --> 00:58:19.690
And on top of that, we have ATSUI,
Apple Type Services for Liquid Imaging,

00:58:19.690 --> 00:58:22.070
that can use two different
rendering engines,

00:58:22.140 --> 00:58:24.010
Quick Draw or Core Graphics.

00:58:24.280 --> 00:58:26.330
Core Graphics, which is the default
and we encourage you,

00:58:26.330 --> 00:58:27.150
of course, to use.

00:58:27.550 --> 00:58:29.890
Core Graphics is the technology
that gives us the transparency.

00:58:30.030 --> 00:58:32.310
It's the technology that gives
us the nice anti-aliasing.

00:58:33.960 --> 00:58:36.400
And on top of this,
you have different layers as a developer

00:58:36.400 --> 00:58:38.730
that you can access to make sure your
applications support unique color.

00:58:38.740 --> 00:58:42.630
You could use the HI Toolbox,
as I mentioned, or you could use,

00:58:42.630 --> 00:58:43.660
of course, Cocoa.

00:58:46.820 --> 00:58:50.180
And here we have a typical example,
rotated text done with Etsy.

00:58:50.230 --> 00:58:53.940
One line of text, four different scripts,
one, two, three, four.

00:58:54.000 --> 00:58:58.980
Here we have European, Japanese,
I think it's Inuktitut.

00:58:58.990 --> 00:59:00.860
And then the last one
is probably Georgian.

00:59:00.860 --> 00:59:06.050
And I've been told it's not the Georgian
from the southeast of the United States,

00:59:06.110 --> 00:59:08.240
if you know what I mean.

00:59:08.280 --> 00:59:08.960
It's a private joke.

00:59:09.070 --> 00:59:10.600
I'm sorry.

00:59:11.660 --> 00:59:13.400
Quickly, very important concept.

00:59:13.550 --> 00:59:16.400
If you're a Carbon developer, MLT,
the Multilingual Text Engine,

00:59:16.400 --> 00:59:21.220
you'll get for free a bunch of things,
a lot of things.

00:59:21.260 --> 00:59:23.580
One of the first, of course,
is the Unicode support,

00:59:23.800 --> 00:59:26.480
and you get input, editing, and display.

00:59:26.480 --> 00:59:29.640
The nice thing,
and I'll let you read the slide,

00:59:29.730 --> 00:59:32.950
the nice thing with MLT is that when
you're going to create one object,

00:59:33.060 --> 00:59:36.120
this object is going to
install all the TSM handlers,

00:59:36.120 --> 00:59:38.490
it's going to install the scroll
bars if you want scroll bars,

00:59:38.680 --> 00:59:41.900
it's going to support drag and drop,
it's going to support for you,

00:59:42.020 --> 00:59:45.300
if you wish,
embedded objects such as movies, sounds,

00:59:45.300 --> 00:59:46.220
pictures.

00:59:46.220 --> 00:59:51.280
And one of the main advantages on top
of this Unicode support is that it gives

00:59:51.330 --> 00:59:53.540
you access to all the AdSuite features.

00:59:53.540 --> 00:59:56.260
So all the style attributes
that are supported by AdSuite,

00:59:56.260 --> 00:59:58.290
you can pass them directly to MLT.

00:59:58.300 --> 01:00:01.600
And that,
to really understand what that means,

01:00:01.710 --> 01:00:04.180
you'll have to actually go in
the headers or check WordText,

01:00:04.180 --> 01:00:06.580
one of the applications
that uses MLT and AdSuite,

01:00:06.580 --> 01:00:08.780
to really understand how
powerful that could be.

01:00:10.700 --> 01:00:13.280
And of course,
Quartz rendering by default.

01:00:13.460 --> 01:00:14.860
You don't have to do anything special.

01:00:14.860 --> 01:00:17.020
You don't have to go inside
the core graphics framework.

01:00:17.020 --> 01:00:21.250
No, everything by default on 10.1,
we're going to get you

01:00:21.250 --> 01:00:21.890
a nice anti-aliasing.

01:00:23.340 --> 01:00:25.050
Very important, I need to touch on this.

01:00:25.050 --> 01:00:28.380
CFStrings,
use CFStrings as much as possible.

01:00:28.380 --> 01:00:32.080
It's great because CFStrings are
going to really shield you from

01:00:32.080 --> 01:00:33.630
having to deal with encodings.

01:00:33.630 --> 01:00:36.170
You can create a CFString,
let's say with your

01:00:36.320 --> 01:00:39.660
Mac OS encoding string,
and then from there you're going to

01:00:39.660 --> 01:00:43.330
be able to ask for UTF-8 or UTF-16,
UTF-16 which is what

01:00:43.400 --> 01:00:44.920
we use on the system.

01:00:44.920 --> 01:00:48.730
So it's an easy path migration,
it's an easy migration path for you to

01:00:48.730 --> 01:00:53.270
move to Unicode because you can still
have your strings in your application.

01:00:53.300 --> 01:00:57.010
Using Mac OS encodings,
you can load them from your resources.

01:00:57.060 --> 01:01:01.770
And then use that and you pass
Unicode text directly to all the

01:01:01.770 --> 01:01:04.900
other toolbox calls or MLT or Hatsui.

01:01:08.820 --> 01:01:10.480
CFStrings are Unicode strings.

01:01:10.480 --> 01:01:13.490
We translate them as necessary,
but it's great because the

01:01:13.550 --> 01:01:16.690
main point here is that Unicode
can represent any language,

01:01:16.750 --> 01:01:19.090
and here, thanks to CFString,
in your code,

01:01:19.090 --> 01:01:21.170
you can represent any language.

01:01:24.720 --> 01:01:27.520
Quickly, I'll touch about localization.

01:01:27.730 --> 01:01:31.100
To localize your application, you have,
I would say, two things to do,

01:01:31.290 --> 01:01:32.010
two basic things.

01:01:32.160 --> 01:01:34.000
You have more things to do, of course.

01:01:34.020 --> 01:01:36.540
The first one is you're going
to have to extract the strings.

01:01:36.630 --> 01:01:38.300
So as a developer,
you're going to have to generate

01:01:38.350 --> 01:01:42.140
some kind of documentation on
what needs to be localized.

01:01:42.170 --> 01:01:46.320
And the second step, of course,
is give these strings to a translator.

01:01:46.380 --> 01:01:48.450
For that, we have a couple of
tools that can help you.

01:01:48.620 --> 01:01:52.730
The first one is AppleGuard 3.0,
which works on Mac OS X.

01:01:52.910 --> 01:01:55.080
And a set of APIs which are called Monty.

01:01:55.080 --> 01:01:58.020
And I'll go in more detail
about what that means.

01:01:58.050 --> 01:02:00.200
Once again, I need to reiterate this.

01:02:00.250 --> 01:02:02.840
For localization purposes,
I really encourage you to

01:02:02.960 --> 01:02:04.700
package your application.

01:02:04.730 --> 01:02:07.380
It's more flexibility
for you as a developer.

01:02:07.390 --> 01:02:09.000
It's easy to adopt.

01:02:09.020 --> 01:02:13.180
And the nice thing is that, of course,
you get more languages in one package.

01:02:13.190 --> 01:02:15.820
The cool thing, too,
with bundling and packaging your

01:02:15.820 --> 01:02:19.660
application is that you work on
version 1.0 of your application.

01:02:19.660 --> 01:02:20.750
And you're done.

01:02:20.860 --> 01:02:22.340
You have English.

01:02:22.350 --> 01:02:24.520
And you want to ship your
application as soon as possible.

01:02:24.530 --> 01:02:26.240
Well, you can start shipping it.

01:02:26.270 --> 01:02:28.960
And then when you do your
Japanese localization,

01:02:28.980 --> 01:02:32.840
by some process, which is up to you,
you could actually install the package

01:02:32.840 --> 01:02:36.440
yourself inside the current application.

01:02:36.460 --> 01:02:37.870
To do this, you need two things.

01:02:38.060 --> 01:02:40.270
Make sure you support Unicode,
because you don't want to go

01:02:40.270 --> 01:02:43.200
in primes with encodings and
getting garbage on the screen.

01:02:43.210 --> 01:02:45.460
And the second one is
you need to be bundled.

01:02:45.470 --> 01:02:47.790
You could actually just
drop the French .L approach

01:02:47.860 --> 01:02:50.220
or the Japanese .L approach
inside your application.

01:02:50.240 --> 01:02:51.700
It's very, very flexible.

01:02:56.810 --> 01:02:58.640
Now, let's talk a little bit
about Apple Glot 3.0.

01:02:58.660 --> 01:03:02.820
Apple Glot is a text extraction tool.

01:03:02.840 --> 01:03:06.180
Okay, remember, it doesn't do, like,
you know, automatic translation.

01:03:06.180 --> 01:03:10.010
But the nice thing with that
is that it's going to extract

01:03:10.010 --> 01:03:13.020
the text from your application,
put it in some XML file,

01:03:13.030 --> 01:03:16.320
and you can actually parse
this XML file or export it,

01:03:16.400 --> 01:03:19.190
send it to your localizers,
add some comments.

01:03:19.220 --> 01:03:22.900
It works on Mac OS X,
which is a main advantage.

01:03:23.160 --> 01:03:26.900
And the cool thing is that it's going to
work with Cocoa and Carbon applications.

01:03:26.900 --> 01:03:29.650
Okay, if you remember the old
versions of Apple Glot,

01:03:29.830 --> 01:03:32.100
of course, they will not work with Cocoa.

01:03:32.100 --> 01:03:35.110
Now we support this, and it's pretty neat
because you could have,

01:03:35.110 --> 01:03:38.990
like, you know, resources,
or you could have, as well, nib files.

01:03:39.020 --> 01:03:42.000
You don't have to be resource-based,
and it's going to work nice.

01:03:42.060 --> 01:03:46.340
Another advantage of Apple Glot is that,
I think we call it an

01:03:46.340 --> 01:03:48.390
incrementation localization tool.

01:03:48.400 --> 01:03:51.980
And what I mean by that is
you worked on version 1.0,

01:03:51.980 --> 01:03:54.700
you shipped in... Japan and in U.S.

01:03:54.830 --> 01:03:56.990
in English,
so you have English and Japanese.

01:03:57.000 --> 01:03:58.830
Now you're working on version 1.1.

01:03:58.900 --> 01:04:01.200
Well,
you don't really want to retranslate

01:04:01.210 --> 01:04:03.550
all the strings from version 1.0.

01:04:03.790 --> 01:04:06.660
What happens is that Apple Glot
gives you this opportunity

01:04:06.750 --> 01:04:08.320
to set up your environment.

01:04:08.320 --> 01:04:12.720
You're going to put your old version,
1.0, the new version, 1.1,

01:04:12.720 --> 01:04:17.110
the previously localized version in 1.0,
and Apple Glot is going to be

01:04:17.140 --> 01:04:21.360
clever enough to send you back the
strings that are new in your app.

01:04:21.480 --> 01:04:23.970
So if you had, like,
you know... 500 strings

01:04:24.030 --> 01:04:26.740
at the beginning in 1.0,
for version 1.1,

01:04:26.740 --> 01:04:29.600
you maybe modified a couple of windows,
a couple of buttons,

01:04:29.600 --> 01:04:30.710
changed a couple of strings.

01:04:31.070 --> 01:04:33.710
Apple Glot will give you only
the strings that have changed,

01:04:33.800 --> 01:04:38.290
and will automatically put back the old
ones from the previous localization.

01:04:38.340 --> 01:04:40.830
That's what I meant by
incremental localization.

01:04:40.920 --> 01:04:43.510
And that's, I think,
a great advantage because you don't

01:04:43.510 --> 01:04:47.510
want to spend time and paying localizers
again to do twice the same work.

01:04:50.250 --> 01:04:52.320
But let's say you don't
have time for that.

01:04:52.450 --> 01:04:54.800
Let's say you're a small company
and you want to find out,

01:04:54.910 --> 01:04:57.090
you know,
I'd like to go for a Japanese market.

01:04:57.220 --> 01:04:58.100
What can I do?

01:04:58.100 --> 01:04:59.760
Who can help me to achieve this?

01:04:59.880 --> 01:05:01.760
Well, once again,
we put a couple of deals

01:05:01.760 --> 01:05:04.800
on for our ADC members.

01:05:04.880 --> 01:05:07.540
And here at the bottom, actually,
you'd get the programs.

01:05:07.760 --> 01:05:12.690
Remember, developer.apple.com/marketing,
localizations.

01:05:13.390 --> 01:05:15.530
And the nice thing is that,
so we have these deals with

01:05:15.590 --> 01:05:18.140
translation and localization companies.

01:05:18.140 --> 01:05:21.360
And these companies could help
you just localize strings,

01:05:21.370 --> 01:05:23.810
or if you want,
they could give you a quote for actually,

01:05:24.000 --> 01:05:25.610
you know, taking the whole process.

01:05:25.630 --> 01:05:28.850
So you give them your US binaries,
your software, your manuals,

01:05:28.850 --> 01:05:31.780
and they could actually do
the whole schmilblick for you.

01:05:33.210 --> 01:05:35.670
And here we have a couple of the
ones that we've been working with,

01:05:35.670 --> 01:05:42.690
RWS Polyglot, Fuscio Translation System,
LogTeams in Spain, and we have many more.

01:05:42.760 --> 01:05:45.910
The nice thing is that as a community,
don't hesitate to send me

01:05:45.910 --> 01:05:48.060
an email if you need to have
references or if you're not sure.

01:05:48.060 --> 01:05:51.010
If you want,
if you get a quote and you're

01:05:51.100 --> 01:05:53.770
not sure about the price
or if you want to find out,

01:05:53.920 --> 01:05:56.200
you know, who's better for Japanese,
who's better for European,

01:05:56.200 --> 01:05:59.450
send me an email and we can exchange
some information if you want.

01:05:59.480 --> 01:06:01.120
Hopefully I can help you.

01:06:04.030 --> 01:06:06.290
All right, in summary,
I think the summary is

01:06:06.410 --> 01:06:09.700
pretty straightforward.

01:06:09.720 --> 01:06:12.480
Yes,
international markets are opportunities.

01:06:12.500 --> 01:06:16.340
And hopefully, even if you're localizing
your application now,

01:06:16.350 --> 01:06:19.100
I really think you should
consider maybe expanding.

01:06:19.100 --> 01:06:22.980
Maybe now you're only in Japan,
or maybe only in France.

01:06:23.000 --> 01:06:28.120
Well, try to enlarge the markets
you're going after.

01:06:28.130 --> 01:06:34.420
Remember, France, Germany, England,
key markets for Apple in Europe.

01:06:34.440 --> 01:06:37.820
Japan, it's a must do, must have.

01:06:37.820 --> 01:06:38.700
It's a must.

01:06:38.700 --> 01:06:41.180
You need to go towards this market.

01:06:42.950 --> 01:06:46.360
To achieve this international support,
there is only one way.

01:06:46.550 --> 01:06:48.560
It's to be Unicode compliant.

01:06:48.590 --> 01:06:50.290
And for that,
hopefully I gave you a couple

01:06:50.380 --> 01:06:54.060
of technologies that can help
you achieve this support.

01:06:54.110 --> 01:06:57.840
And once again, we will never,
never say it again enough.

01:06:57.870 --> 01:06:59.660
Unicode applications are the future.

01:06:59.680 --> 01:07:02.770
And in your case, if you're here,
it's because you're probably already

01:07:02.840 --> 01:07:06.660
in international markets or you
probably want to enlarge your markets.

01:07:06.680 --> 01:07:09.740
The only way that you're going to
be able to give great features to

01:07:09.740 --> 01:07:12.590
your users is to go to Unicode.

01:07:14.700 --> 01:07:17.400
And of course,
for the support for all these languages,

01:07:17.400 --> 01:07:18.570
make it easy for our users.

01:07:18.970 --> 01:07:19.690
Make it simple.

01:07:19.700 --> 01:07:20.940
Bundle your application.

01:07:24.780 --> 01:07:29.360
All right,
here we have some URLs about the

01:07:29.360 --> 01:07:31.140
things we talked about today.

01:07:31.140 --> 01:07:34.510
There is one place where we
put all our information for

01:07:34.590 --> 01:07:39.460
Carbon international technologies,
and it's in developers.apple.com.intl.

01:07:39.500 --> 01:07:43.520
If you want more information
about specific regions and the

01:07:43.520 --> 01:07:46.740
markets that Apple is going after,
I encourage you to go to

01:07:46.740 --> 01:07:50.260
developers.apple.com.regionjapan,
the second URL.

01:07:51.100 --> 01:07:55.940
More information on the Top 50 programs
for European are on the third line,

01:07:55.980 --> 01:07:59.250
and should you have any questions,
we have representatives

01:07:59.390 --> 01:08:02.360
from WWDR in Europe here,
so you can come after the session

01:08:02.490 --> 01:08:03.930
and we can talk if you wish.

01:08:03.940 --> 01:08:10.200
Technical reports, code charts,
sample code, special strings,

01:08:10.200 --> 01:08:13.260
special text files for Unicode
at the unicode.org website,

01:08:13.260 --> 01:08:13.820
of course.

01:08:13.920 --> 01:08:18.160
Fonts, we all need fonts to
support these new languages.

01:08:18.160 --> 01:08:20.940
If you're developing your own font,
if you want fonts,

01:08:21.110 --> 01:08:23.860
if you want to check out what
Apple has been doing lately with fonts,

01:08:23.860 --> 01:08:26.320
developers.apple.com.font.

01:08:26.320 --> 01:08:30.730
And if I'm not mistaken,
all these URLs are actually

01:08:30.730 --> 01:08:33.740
present on the website,
WWDC.

01:08:33.740 --> 01:08:35.980
You have a Uberall URL.