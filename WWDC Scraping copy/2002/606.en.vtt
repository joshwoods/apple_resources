WEBVTT

00:00:06.820 --> 00:00:08.460
Good afternoon.

00:00:08.490 --> 00:00:10.260
Welcome to your session 606.

00:00:10.400 --> 00:00:11.660
This is QuickTime for the Web.

00:00:11.860 --> 00:00:13.860
And let me get this out
of the way right away.

00:00:13.880 --> 00:00:16.060
This is the book QuickTime for the Web.

00:00:16.070 --> 00:00:18.500
And if you put QuickTime on web pages,
you need this book.

00:00:18.580 --> 00:00:20.820
So you can get it at Developer Depot.

00:00:20.820 --> 00:00:24.320
You can get it from the Apple Store,
from Amazon.com.

00:00:24.360 --> 00:00:28.320
But believe me, it will help you with
things that you're doing.

00:00:29.820 --> 00:00:30.800
I'm Steve Gulie.

00:00:30.800 --> 00:00:33.470
I'm the senior technical writer
and multimedia web monkey for

00:00:33.470 --> 00:00:35.700
Apple in the QuickTime group.

00:00:35.710 --> 00:00:37.590
And we're going to talk
about QuickTime and how

00:00:37.590 --> 00:00:40.270
it works for web delivery,
mainly HTTP.

00:00:40.310 --> 00:00:43.040
And we'll be looking at
different parts of QuickTime,

00:00:43.060 --> 00:00:44.640
not just the API,
as most of you have been

00:00:44.700 --> 00:00:47.660
working on all week,
but at the Plug-in, the ActiveX control,

00:00:47.750 --> 00:00:50.960
QuickTime Player,
and the QuickTime file format.

00:00:50.990 --> 00:00:54.500
And we'll be looking at HTML,
the tags and extensions you'll be using,

00:00:54.500 --> 00:00:56.750
and scripting mainly,
client-side scripting in

00:00:56.800 --> 00:01:01.520
JavaScript and server-side scripting,
you know, CGI, SSI, PERL, Python,

00:01:01.520 --> 00:01:02.310
whatever you're

00:01:02.510 --> 00:01:04.080
And we're going to cover
a number of things today.

00:01:04.080 --> 00:01:07.270
When we look at the tags and extensions,
we'll look, of course, at just embedding

00:01:07.280 --> 00:01:11.150
QuickTime movies in a web page,
but also at detecting QuickTime with

00:01:11.150 --> 00:01:16.270
JavaScript or with QuickTime itself,
launching QuickTime Player from

00:01:16.280 --> 00:01:17.940
a web page,
going full screen,

00:01:17.940 --> 00:01:20.580
look at some differences between
the plug-in and the player,

00:01:20.580 --> 00:01:23.620
the QuickTime file format and how you
can use it effectively on the web,

00:01:23.700 --> 00:01:26.670
ways to create web movies
dynamically from a script,

00:01:26.820 --> 00:01:29.460
and how to script the plug-in
in the ActiveX controller.

00:01:30.300 --> 00:01:32.680
And finally, we'll look at some wired
actions and server-side scripts.

00:01:32.760 --> 00:01:35.280
And hopefully most of
this stuff will run,

00:01:35.280 --> 00:01:36.310
but bear with us.

00:01:37.810 --> 00:01:40.660
So in HTML,
the main way you put a QuickTime movie

00:01:40.660 --> 00:01:43.180
in a web page is with the embed tag.

00:01:43.210 --> 00:01:44.870
And you can just link to it,
but we'll talk about

00:01:44.900 --> 00:01:46.960
that a little more later.

00:01:47.280 --> 00:01:49.570
The embed tag was originated by Netscape.

00:01:49.670 --> 00:01:53.790
They invented it to display kinds
of media that their browser wasn't

00:01:53.790 --> 00:01:55.660
capable of displaying natively.

00:01:55.700 --> 00:01:58.240
And they had it in mind that
you would basically invent a new

00:01:58.240 --> 00:02:02.760
media type and write a plug-in,
and they would install it.

00:02:02.760 --> 00:02:04.920
And when they came upon that media type,
they go, oh,

00:02:04.990 --> 00:02:07.610
if they have a plug-in to play this,
we'll use that.

00:02:07.750 --> 00:02:10.540
So they gave you three things that
you could tell them-- the source,

00:02:10.610 --> 00:02:12.840
the file that you wanted to play,
the type,

00:02:12.840 --> 00:02:16.910
in case the server didn't know it,
the MIME type, and the plugins page,

00:02:16.910 --> 00:02:18.420
where to get the plug-in
if you didn't have it.

00:02:18.440 --> 00:02:20.020
And that seemed adequate.

00:02:20.090 --> 00:02:22.220
And then it said any other parameters
you want to pass to your plug-in,

00:02:22.220 --> 00:02:24.770
just put them in here,
and we'll pass them along.

00:02:24.920 --> 00:02:28.360
The problem with it was that you
didn't anticipate today's world,

00:02:28.360 --> 00:02:30.470
where you have MP3 files,
and you've got 10 plug-ins

00:02:30.570 --> 00:02:31.660
that can all play MP3.

00:02:31.770 --> 00:02:32.910
So which one do you use?

00:02:33.060 --> 00:02:35.680
There's no way to specify
which one you want.

00:02:36.000 --> 00:02:37.770
But here's the embed tag,
and here's what it looks like.

00:02:37.850 --> 00:02:40.190
You get a height and a width,
and that's all the space you have.

00:02:40.240 --> 00:02:41.240
You can't go any bigger than that.

00:02:41.300 --> 00:02:44.870
Tell it what file you want it to play,
what the type is.

00:02:44.940 --> 00:02:46.770
And the type, of course,
should always be video

00:02:46.770 --> 00:02:47.780
quick time for a movie.

00:02:47.780 --> 00:02:50.920
And the plugins page should always
be Apple quick time download.

00:02:50.920 --> 00:02:54.380
And any other parameters
you want to pass.

00:02:54.470 --> 00:02:57.820
I'm not going to go into detail about
all the embed tag parameters today,

00:02:57.820 --> 00:03:00.180
but they're on the website,
and there's quite an extensive list.

00:03:00.300 --> 00:03:04.080
You can make movies autoplay, loop,
play double size, half size,

00:03:04.220 --> 00:03:05.800
do a lot of interesting things.

00:03:05.960 --> 00:03:08.730
So be sure and check that out.

00:03:08.810 --> 00:03:10.770
As I said, it depends on the MIME type.

00:03:11.000 --> 00:03:17.230
So the problem here, as I mentioned,
was if you just pass the MIME type,

00:03:17.520 --> 00:03:21.130
how does the browser
know which plugin to use?

00:03:21.520 --> 00:03:24.960
Well, if the MIME type is application
QuickTime or video QuickTime,

00:03:24.960 --> 00:03:27.570
you would think it would
use the QuickTime plugin.

00:03:27.570 --> 00:03:33.080
But other plugins have, at times,
registered to use that MIME type.

00:03:33.080 --> 00:03:36.180
So in order to prevent
hijacking by -- by hijacking,

00:03:36.180 --> 00:03:39.370
what I mean is Windows Media Player,
for example, an older version,

00:03:39.400 --> 00:03:41.320
might think it can play
your QuickTime movies.

00:03:41.440 --> 00:03:43.440
So you say embed this movie,
and instead of using

00:03:43.530 --> 00:03:45.310
the QuickTime player,
it tries to bring it up

00:03:45.390 --> 00:03:48.140
in Windows Media Player,
and it can't display it.

00:03:48.140 --> 00:03:50.360
So you don't want to have that happen.

00:03:50.380 --> 00:03:53.690
And what we do is we have
a tag called QTSource.

00:03:53.690 --> 00:03:55.310
Let me back up here.

00:03:55.310 --> 00:03:57.720
The source goes to the browser.

00:03:57.960 --> 00:04:01.420
So it's going to load that file,
and the QT source tells

00:04:01.500 --> 00:04:05.130
the QuickTime Plug-in,
"Well, okay, you loaded that file,

00:04:05.130 --> 00:04:08.110
but what I really want to do is
display this other file." And that

00:04:08.110 --> 00:04:09.340
gets around the MP3 problem.

00:04:09.340 --> 00:04:13.700
You want to play an MP3 with
QuickTime Player or a QuickTime Plug-in,

00:04:13.850 --> 00:04:16.560
pass a MIME type that
QuickTime understands,

00:04:16.680 --> 00:04:20.620
that only QuickTime understands,
the browser calls QuickTime,

00:04:20.720 --> 00:04:23.800
and then tell QuickTime,
"Play this MP3 file."

00:04:23.800 --> 00:04:25.090
And I'll show you what I mean.

00:04:25.090 --> 00:04:25.090
Can we go to demo one here?

00:04:27.680 --> 00:04:28.370
Can we switch the screen?

00:04:28.470 --> 00:04:29.600
Thank you.

00:04:29.650 --> 00:04:31.610
Okay.

00:04:31.750 --> 00:04:34.060
Let's take a look at that.

00:04:38.900 --> 00:04:43.240
Here we've got a movie and we've used Qt
source to fix that limitation of embed.

00:04:43.410 --> 00:04:46.290
What we've said is embed,
set the width and height,

00:04:46.360 --> 00:04:49.480
and set the source to
a QuickTime image file,

00:04:49.480 --> 00:04:51.460
which only QuickTime is
registered to play,

00:04:51.460 --> 00:04:55.350
and set the plug-ins page, of course,
always to QuickTime download.

00:04:55.520 --> 00:04:57.890
But the Qt source is this movie.

00:04:57.900 --> 00:05:01.920
So the browser sees that you want
to load a QuickTime image file.

00:05:01.920 --> 00:05:05.140
No one registers for QuickTime image
files besides QuickTime.

00:05:05.140 --> 00:05:06.710
So if you don't have it, it gets it.

00:05:06.770 --> 00:05:08.070
If you do have it, it loads it.

00:05:08.150 --> 00:05:11.030
QuickTime looks at the
QuickTime source and says,

00:05:11.110 --> 00:05:14.640
"Okay, play this movie." Now one
significant point here,

00:05:14.700 --> 00:05:17.640
and of course we can pass autoplay equals
true and set the volume in case it turned

00:05:17.640 --> 00:05:20.660
it down low because it's a loud movie.

00:05:20.660 --> 00:05:23.190
The source file must actually
exist because the browser

00:05:23.330 --> 00:05:24.810
is going to download it.

00:05:24.810 --> 00:05:27.430
And the source should
be a QuickTime file,

00:05:27.450 --> 00:05:31.300
a MIME type that only QuickTime uses,
such as movie, video QuickTime,

00:05:31.300 --> 00:05:33.900
although this has been
hijacked in the past.

00:05:33.900 --> 00:05:35.120
ImageMechPaint, I promise you,
you know it.

00:05:35.120 --> 00:05:37.130
no one will ever take that.

00:05:37.460 --> 00:05:40.380
QuickTime image file,
no one has ever taken that either,

00:05:40.380 --> 00:05:43.110
and I don't think they will,
or a QTL file application

00:05:43.110 --> 00:05:45.900
in the X QuickTime Player,
although this is a new one,

00:05:45.900 --> 00:05:48.390
so your server may not
know about that yet.

00:05:48.450 --> 00:05:52.820
So probably the best choice all in all
is the QuickTime image file format.

00:05:55.790 --> 00:05:57.740
Just to show you we can play
an MP3 in QuickTime Player.

00:05:57.740 --> 00:06:04.580
This is how you play movies,
things that are not QuickTime movies,

00:06:04.580 --> 00:06:06.020
in a browser with QuickTime Player.

00:06:06.040 --> 00:06:09.520
Pass a QuickTime image file,
and you can make a QuickTime image

00:06:09.660 --> 00:06:12.290
file by opening any kind of
image that QuickTime can open.

00:06:12.320 --> 00:06:15.450
GIF, JPEG, anything,
and saving it as a QuickTime image.

00:06:15.560 --> 00:06:18.130
It's really simple,
and it could be a one-pixel GIF.

00:06:18.190 --> 00:06:19.940
It doesn't have to be
anything significant.

00:06:20.000 --> 00:06:22.660
And then in QTSource,
you pass whatever file

00:06:22.660 --> 00:06:24.040
QuickTime can play.

00:06:24.080 --> 00:06:26.240
The browser doesn't see this,
only QuickTime does,

00:06:26.440 --> 00:06:29.110
and then you can do things with
it with the QuickTime plugin.

00:06:29.120 --> 00:06:31.210
Any questions about that?

00:06:31.280 --> 00:06:32.000
Is that straightforward?

00:06:32.000 --> 00:06:33.570
Okay, good.

00:06:38.110 --> 00:06:38.420
Okay.

00:06:38.550 --> 00:06:41.590
Theoretically,
what will happen if the person doesn't

00:06:41.590 --> 00:06:45.320
have QuickTime is the browser will
look at the Plug-ins page and say,

00:06:45.320 --> 00:06:47.510
"Oh, would you like to get the browser?

00:06:47.710 --> 00:06:50.690
You don't have a Plug-in for this.

00:06:50.770 --> 00:06:54.750
Would you like to get
it?" And if you say yes,

00:06:54.750 --> 00:06:57.550
it should take you to that page.

00:06:57.630 --> 00:06:58.890
And that doesn't always happen,
and I'll get into that in a moment.

00:06:58.890 --> 00:06:58.890
But it should.

00:06:58.890 --> 00:06:58.890
Get back to slides, please.

00:07:01.480 --> 00:07:04.140
Now, the embed tag works with plugins.

00:07:04.200 --> 00:07:06.600
It also works with ActiveX controls,
which many people don't know.

00:07:06.600 --> 00:07:08.540
If you have QuickTime and
QuickTime ActiveX,

00:07:08.540 --> 00:07:09.500
it works just fine.

00:07:09.620 --> 00:07:11.510
That machine has QuickTime ActiveX.

00:07:11.510 --> 00:07:12.480
No, it doesn't.

00:07:12.480 --> 00:07:13.690
It's a married Mac OS.

00:07:13.690 --> 00:07:14.280
Sorry.

00:07:14.280 --> 00:07:15.850
It works fine on Windows.

00:07:15.850 --> 00:07:19.130
If you have QuickTime and the
QuickTime ActiveX control,

00:07:19.200 --> 00:07:22.200
latest version of QuickTime,
you can use the plugin

00:07:22.270 --> 00:07:23.860
tag and it works great.

00:07:23.860 --> 00:07:27.040
It's supported by all current browsers,
Mac OS and Windows.

00:07:27.310 --> 00:07:29.530
They all work with the
embed tag just fine.

00:07:30.410 --> 00:07:32.500
There is one problem, i.e.

00:07:32.500 --> 00:07:38.000
for Windows 5.5 SP2 and later,
ignore the plugins page tag.

00:07:39.560 --> 00:07:42.680
Because it's not a Plug-in,
it's an ActiveX control.

00:07:42.680 --> 00:07:44.850
So if you have QuickTime and ActiveX,
it works great.

00:07:45.030 --> 00:07:47.200
But if you don't,
it doesn't offer to get it for you.

00:07:47.200 --> 00:07:51.780
It just says,
"I don't know what to do with

00:07:51.780 --> 00:07:51.780
this." And that's not good.

00:07:52.110 --> 00:07:55.740
So, one way to solve that is
to use the object tag.

00:07:55.760 --> 00:07:58.180
Now,
the object tag was designed for plugins,

00:07:58.180 --> 00:07:59.290
ActiveX, and other things.

00:07:59.390 --> 00:08:00.660
It's meant to be very forward-looking.

00:08:00.660 --> 00:08:03.140
It's a W3 standard.

00:08:03.600 --> 00:08:06.140
And they kind of went
round and round about this.

00:08:06.140 --> 00:08:08.340
But they finally decided they
were going to settle on the object

00:08:08.490 --> 00:08:10.000
tag rather than the embed tag.

00:08:10.010 --> 00:08:12.680
But it basically duplicates
the embed tag's functionality.

00:08:12.680 --> 00:08:15.420
It has most of the same characteristics.

00:08:15.460 --> 00:08:18.570
And for a brief Halcyon day,
I think maybe three months,

00:08:18.730 --> 00:08:20.580
you could actually run the object tag.

00:08:20.580 --> 00:08:23.670
And it worked the same on Netscape,
Internet Explorer, Mac, and Windows.

00:08:23.740 --> 00:08:25.140
It was great.

00:08:25.620 --> 00:08:28.650
But then they added some
Microsoft-only extensions and kind

00:08:28.650 --> 00:08:31.320
of changed how it behaves on Windows.

00:08:31.710 --> 00:08:33.960
But there are some wonderful
things about these extensions.

00:08:33.960 --> 00:08:38.630
You can specify the class ID and
code base of the ActiveX control.

00:08:38.740 --> 00:08:41.190
So there's none of this ambiguity about,
well, who gets this file?

00:08:41.250 --> 00:08:42.060
It's an MP3 file.

00:08:42.110 --> 00:08:42.480
Who wants it?

00:08:42.540 --> 00:08:44.980
Who registered for it last or first?

00:08:44.980 --> 00:08:48.320
You say, I want to use this
particular ActiveX control.

00:08:48.490 --> 00:08:50.530
And if it's not there,
here's where I want to get it.

00:08:50.640 --> 00:08:54.510
It's got a class ID which says who it is,
a code base that says where it is.

00:08:54.660 --> 00:08:55.570
So that's nice.

00:08:55.610 --> 00:08:59.190
It only works with ActiveX controls,
so it doesn't work on Mac OS.

00:08:59.550 --> 00:09:02.510
or Netscape plugins,
and it only works on IE4

00:09:02.510 --> 00:09:04.640
and later on Windows.

00:09:04.640 --> 00:09:07.180
So obviously there are
some limitations there,

00:09:07.180 --> 00:09:07.970
but here it is.

00:09:08.160 --> 00:09:11.160
It's great if you're
running Explorer on Windows.

00:09:11.200 --> 00:09:13.800
This is the class ID and
code base for QuickTime.

00:09:13.800 --> 00:09:15.400
It should always be set to that.

00:09:15.570 --> 00:09:18.820
And the syntax is very similar to Embed,
but it's a little different.

00:09:18.820 --> 00:09:22.040
You've got a height and width,
in this case the class ID and code base,

00:09:22.140 --> 00:09:24.030
and that's all you put in the object tag.

00:09:24.340 --> 00:09:26.720
Then you have a bunch of param tags.

00:09:26.720 --> 00:09:30.060
So you have a param for the source,
whose name is source,

00:09:30.080 --> 00:09:34.060
and whose value is where you want to go,
what file you want to show,

00:09:34.060 --> 00:09:35.350
and any other names.

00:09:35.570 --> 00:09:40.300
Let me back up a couple slides here
so you can see the embed tag syntax.

00:09:40.300 --> 00:09:44.610
Here we have source equals something,
other equals stuff.

00:09:45.140 --> 00:09:47.400
And we go here,
we have name equals source,

00:09:47.530 --> 00:09:50.990
value equals something,
name equals other, value equals stuff.

00:09:51.200 --> 00:09:52.380
So all your parameters work that way.

00:09:52.380 --> 00:09:55.040
You just take what's on the opposite
ends of the equal side in the embed tag,

00:09:55.080 --> 00:09:56.870
and one is the name,
the other is the value.

00:10:00.150 --> 00:10:05.000
Okay, so the embed tag works
for IE Windows 5.5 plus.

00:10:05.000 --> 00:10:05.700
Okay.

00:10:05.770 --> 00:10:09.280
It ignores the Plug-ins
page in that situation.

00:10:09.280 --> 00:10:11.540
And it's subject to hijacking.

00:10:11.540 --> 00:10:14.660
The object tag prevents hijacking
and works only in an -- oh,

00:10:14.660 --> 00:10:16.120
you're just using BULB.

00:10:17.400 --> 00:10:18.120
What does that look like?

00:10:18.230 --> 00:10:20.410
Well, it looks like kind of a mess,
but it actually works.

00:10:20.520 --> 00:10:24.520
You set the object tag up,
give the class ID and code base.

00:10:24.660 --> 00:10:27.200
Now Internet Explorer 5.5
and later for Windows,

00:10:27.200 --> 00:10:31.020
actually 4 and later,
will use this ActiveX control only.

00:10:31.020 --> 00:10:33.270
If it doesn't have it,
it knows where to go and get it,

00:10:33.270 --> 00:10:34.990
and it will download it automatically.

00:10:35.080 --> 00:10:36.420
It's even nicer than the plugins page.

00:10:36.500 --> 00:10:40.940
And if they're using something else,
using a Netscape browser or a Mac OS,

00:10:40.940 --> 00:10:43.650
then the embed tag kicks in,
and it works.

00:10:45.580 --> 00:10:47.850
You can go ahead and continue
to use the plugins page and

00:10:47.850 --> 00:10:48.990
type and everything else.

00:10:49.080 --> 00:10:51.930
And you just have to remember
to close it carefully.

00:10:51.940 --> 00:10:55.000
When you get to the end of it,
notice there's a close embed

00:10:55.170 --> 00:10:56.860
at the end of the embed tag.

00:10:56.900 --> 00:10:58.830
That's not necessary if
you're just doing embed,

00:10:58.830 --> 00:11:00.730
but if you're putting it
inside of an object tag,

00:11:00.730 --> 00:11:01.090
it is.

00:11:01.160 --> 00:11:03.880
And this thing will work on
all browsers and all platforms,

00:11:03.880 --> 00:11:05.380
and it's actually pretty nice.

00:11:05.460 --> 00:11:10.570
So if we go back to the demo machine,
we'll take a look at that.

00:11:10.720 --> 00:11:11.560
And...

00:11:13.770 --> 00:11:15.960
Here we go.

00:11:16.030 --> 00:11:18.210
In this case,
we've got the movie in here,

00:11:18.270 --> 00:11:21.180
and this is what it looks like.

00:11:21.450 --> 00:11:23.280
"That's not formatted
just the way I want,

00:11:23.400 --> 00:11:26.840
so let me make it a little wider
so you can see it a little better.

00:11:26.990 --> 00:11:28.020
There we go.

00:11:28.020 --> 00:11:28.900
Come on.

00:11:28.900 --> 00:11:29.640
Okay.

00:11:29.640 --> 00:11:32.590
You've got your object tag.

00:11:33.700 --> 00:11:40.760
For AMs for the source,
that's a movie you want to play,

00:11:40.760 --> 00:11:40.760
anything you want to pass to QuickTime,

00:11:40.950 --> 00:11:45.630
And then inside the object tag you
have an embed tag with its type,

00:11:45.980 --> 00:11:50.620
its source, the QT source,
again height and width,

00:11:50.620 --> 00:11:51.910
the plug-ins page.

00:11:52.020 --> 00:11:55.150
And it all works together and
it all plays very nicely and it

00:11:55.150 --> 00:11:58.600
works on all operating systems
and all browsers that I know of.

00:11:58.720 --> 00:12:03.860
There's some things that you can
notice about this that are semi-useful.

00:12:03.860 --> 00:12:07.510
QT source,
you don't need it in the object tag

00:12:07.510 --> 00:12:10.500
because the object has a class ID.

00:12:10.900 --> 00:12:13.540
So you don't need to tell it,
you don't need to,

00:12:13.540 --> 00:12:16.190
if you want to play an MP3
file using the object tag,

00:12:16.190 --> 00:12:18.450
you just say, hey,
use this plug-in to play this file.

00:12:18.460 --> 00:12:20.550
You don't have to go through
the song again and say,

00:12:20.550 --> 00:12:21.920
well, this is the file I want.

00:12:22.050 --> 00:12:23.410
No, this is the file I really want.

00:12:25.060 --> 00:12:25.900
"It just works.

00:12:25.900 --> 00:12:30.090
So when you're doing that translation,
you don't have to translate those things.

00:12:30.180 --> 00:12:33.000
You can just translate
everything and it works fine.

00:12:33.160 --> 00:12:39.850
But if you want to simplify
your life a little bit,

00:12:39.920 --> 00:12:41.310
you can go ahead and point to the file
you want in the object tag and only

00:12:41.310 --> 00:12:41.310
do the dance around in the embed tag."

00:12:41.800 --> 00:12:45.140
And if you do that,
the QT source for the embed

00:12:45.260 --> 00:12:49.970
tag points to the same place as
the source for the object tag.

00:12:50.160 --> 00:12:51.700
Does this make any sense?

00:12:51.700 --> 00:12:52.930
Okay.

00:12:55.430 --> 00:12:58.300
I know I'm going a little fast here.

00:12:58.310 --> 00:12:58.640
All right.

00:12:58.750 --> 00:13:01.300
Well, that's how that works,
and believe it or not,

00:13:01.400 --> 00:13:03.050
it actually does work.

00:13:03.180 --> 00:13:06.270
So if you go back to slides,

00:13:08.890 --> 00:13:11.710
Just to go into this a little further,
suppose you don't like

00:13:11.710 --> 00:13:12.680
that big ugly thing.

00:13:12.680 --> 00:13:14.360
You say, well, look,
do I really have to do that?

00:13:14.360 --> 00:13:17.070
Do I have to put the embed
tag inside an object tag?

00:13:17.190 --> 00:13:17.390
No.

00:13:17.390 --> 00:13:18.090
No, you don't.

00:13:18.140 --> 00:13:21.440
Once the user has QuickTime and
the ActiveX control,

00:13:21.440 --> 00:13:22.370
everything works fine.

00:13:22.380 --> 00:13:24.910
The embed tag works great,
so you don't have to surround it with

00:13:24.910 --> 00:13:26.520
the object tag every place it occurs.

00:13:26.520 --> 00:13:29.500
You could just surround the first
occurrence of it on your entry page.

00:13:29.540 --> 00:13:33.760
And if the user doesn't have QuickTime,
the object tag kicks in and says, oh,

00:13:33.770 --> 00:13:36.350
or they have QuickTime, an older version,
but they don't have the ActiveX.

00:13:36.460 --> 00:13:37.940
It'll say, do you need it?

00:13:38.150 --> 00:13:38.470
You want it?

00:13:38.720 --> 00:13:40.810
Go get it, and it'll fetch it,
and then it has it,

00:13:40.980 --> 00:13:42.000
and the embed tag works thereafter.

00:13:42.100 --> 00:13:46.000
So if you have a gateway where everybody
comes through this entrance page,

00:13:46.100 --> 00:13:48.440
you can just put it on the gateway,
and that takes care of it.

00:13:49.740 --> 00:13:51.570
But, you know,
we're in a world where people do

00:13:51.570 --> 00:13:54.700
Google searches and jump to the middle
of your website in a lot of cases.

00:13:54.700 --> 00:13:56.410
And if that's the case,
where people can just

00:13:56.470 --> 00:13:58.710
jump into the middle,
then the gateway isn't good and you

00:13:58.780 --> 00:14:00.460
really should wrap a bunch of your tags.

00:14:00.520 --> 00:14:03.540
Fortunately, there are applications
that will do it for you.

00:14:03.570 --> 00:14:07.020
I think that GoLive now
does it automatically.

00:14:07.020 --> 00:14:10.160
Maybe Dreamweaver, too, at this point.

00:14:10.170 --> 00:14:13.490
There are freeware,
shareware applications

00:14:13.500 --> 00:14:15.270
that will do it for you.

00:14:15.270 --> 00:14:18.370
You don't have to go through
and do it all by hand.

00:14:18.370 --> 00:14:18.370
Okay.

00:14:19.140 --> 00:14:21.900
Now, if you're an applications developer
and you're generating HTML,

00:14:21.930 --> 00:14:25.290
you're working on Go Live or whatever,
we recommend that you create both

00:14:25.410 --> 00:14:27.140
object and embed tags by default.

00:14:27.260 --> 00:14:31.840
You know, you've got the software,
just grind it out and make the big tag.

00:14:31.840 --> 00:14:38.140
You may want to allow the option to
use the embed tag only if a script is

00:14:38.140 --> 00:14:43.630
used to detect Internet Explorer for
Windows and QuickTime ActiveX.

00:14:43.630 --> 00:14:43.630
And the reason you might
want to do that is,

00:14:44.160 --> 00:14:46.860
If you don't have QuickTime and
you hit the object tag,

00:14:46.860 --> 00:14:49.100
the browser will go --
the Explorer will go,

00:14:49.180 --> 00:14:51.780
"You need the QuickTime ActiveX control.

00:14:51.780 --> 00:14:52.410
Here it is.

00:14:52.470 --> 00:14:55.490
You want me to go get it?" If you're
making a website for somebody

00:14:55.490 --> 00:14:59.260
who doesn't want that to happen,
they say, "Look, QuickTime is great,

00:14:59.390 --> 00:15:00.780
but that's not the
center of our focus here.

00:15:00.780 --> 00:15:03.030
We're trying to sell shoes."
If they have QuickTime,

00:15:03.040 --> 00:15:04.160
they can see the VR of the shoe.

00:15:04.160 --> 00:15:06.100
If they don't,
we don't even want to talk about it.

00:15:06.100 --> 00:15:08.140
We just want to show them
the JPEG of the shoe.

00:15:08.190 --> 00:15:11.340
In that case,
you don't put the object tag in.

00:15:11.340 --> 00:15:13.320
You just use the embed tag.

00:15:13.370 --> 00:15:16.470
And you can use JavaScript to test
to see if QuickTime is there and

00:15:16.470 --> 00:15:17.360
direct them one way or the other.

00:15:17.390 --> 00:15:18.880
And I'll show you how that's done.

00:15:18.880 --> 00:15:19.900
It works pretty well.

00:15:19.900 --> 00:15:22.130
So you can prevent that download
from happening if you want to.

00:15:22.190 --> 00:15:22.990
Usually it's a good thing.

00:15:23.160 --> 00:15:25.180
Usually if the user
doesn't have QuickTime,

00:15:25.180 --> 00:15:26.370
you want them to get it.

00:15:26.460 --> 00:15:28.770
But if you're in that situation
where you don't want people to

00:15:28.770 --> 00:15:32.290
be hit with a download balloon,
you can avoid it.

00:15:32.580 --> 00:15:34.710
Okay, and I'm going to pass
on some of these things.

00:15:34.790 --> 00:15:36.000
I already talked about it.

00:15:36.000 --> 00:15:40.180
There is one thing I should mention,
which is QT source, don't use browser.

00:15:40.180 --> 00:15:43.690
We couldn't think of a longer tag name,
so we used that.

00:15:45.540 --> 00:15:48.610
normally the QuickTime plugin
uses the browser to load files.

00:15:48.760 --> 00:15:52.270
If you say use this file and then at the
end of it get another file or if somebody

00:15:52.410 --> 00:15:55.500
clicks on the movie get this other file,
the QuickTime will ask the browser

00:15:55.570 --> 00:15:58.330
to fetch that file for it and
then do what it needs to do.

00:15:58.330 --> 00:16:00.590
Sometimes you don't want to do that.

00:16:00.590 --> 00:16:04.850
Suppose you have a live stream,
RTSP protocol.

00:16:04.870 --> 00:16:08.420
If you put a URL in your file that
says embed something something RTSP,

00:16:08.500 --> 00:16:12.330
a lot of times the browser will go okay,
RTSP protocol, that's a weird one,

00:16:12.330 --> 00:16:15.190
I'm going to use a special
program to handle that.

00:16:15.400 --> 00:16:18.050
I'll give that to real or
I'll give that to Windows.

00:16:18.110 --> 00:16:19.470
I don't even want to look at the source.

00:16:19.590 --> 00:16:21.190
I've got a URL here.

00:16:21.200 --> 00:16:24.200
So if you're embedding a
URL that's got a RTSP protocol,

00:16:24.200 --> 00:16:28.950
you really want to use the QT source
rather than the source and say QT source,

00:16:28.950 --> 00:16:31.250
don't use browser, let me get it.

00:16:31.350 --> 00:16:34.030
That means QuickTime will get
the QT source file using its

00:16:34.030 --> 00:16:35.570
own internal data handlers.

00:16:36.600 --> 00:16:38.580
Another case where you would
want to use that is if you're

00:16:38.600 --> 00:16:40.040
embedding your content on a CD-ROM.

00:16:40.050 --> 00:16:44.590
You notice that in this browser
it tries to load the data off the

00:16:44.680 --> 00:16:49.720
CD-ROM into a hard disk on the cache
and then play it out of the cache.

00:16:49.720 --> 00:16:51.380
That's no good.

00:16:51.380 --> 00:16:53.500
That's not what you want because
the system just gets swamped

00:16:53.610 --> 00:16:54.740
with the high bandwidth movie.

00:16:54.740 --> 00:16:59.310
It's trying to read it from the CD-ROM,
write it to the hard drive,

00:16:59.310 --> 00:17:03.770
read it from the hard drive and
display it all at the same time.

00:17:03.850 --> 00:17:05.090
It just runs out of steam.

00:17:06.670 --> 00:17:08.150
Don't use the browser.

00:17:08.150 --> 00:17:12.110
QuickTime will just read it directly
from the CD and it'll work great.

00:17:12.400 --> 00:17:14.480
It's a little workaround
that's sometimes very handy.

00:17:14.480 --> 00:17:20.360
Okay, speaking of URLs,
of course HTTP is the standard

00:17:20.570 --> 00:17:23.280
way you get things over the web,
but a lot of people don't

00:17:23.330 --> 00:17:26.940
realize that QuickTime can
also handle URLs that are FTP,

00:17:26.940 --> 00:17:30.000
RTSP, RTP, file protocol.

00:17:30.000 --> 00:17:34.110
There's a minor problem, well,
it's not minor, but it's there in

00:17:34.230 --> 00:17:36.520
QuickTime Player on OS X.

00:17:36.520 --> 00:17:41.610
You can't load a file directly from
the browser into the player on this

00:17:41.850 --> 00:17:46.350
version of OS X that you have on Jaguar,
because there's a link broken.

00:17:46.360 --> 00:17:50.640
It's got the file protocol,
the path name is broken.

00:17:50.640 --> 00:17:53.780
So you have to use an
HTTP URL to play with it,

00:17:53.840 --> 00:17:56.250
but I'm pretty sure that, well,
maybe it'll be fixed by

00:17:56.250 --> 00:17:57.380
the time we release it.

00:17:57.530 --> 00:17:58.620
If it's not, be aware of it.

00:17:59.610 --> 00:18:03.460
Actually, I'm going to ask a question
of one of my audience members.

00:18:03.460 --> 00:18:06.000
Can we handle HTTPS, secure HTTP?

00:18:06.090 --> 00:18:06.790
No, okay.

00:18:08.220 --> 00:18:12.750
Okay, and here's the URL protocol
you probably haven't heard of,

00:18:12.770 --> 00:18:14.340
the data protocol.

00:18:14.640 --> 00:18:17.100
That's where you're actually going
to put the data inline in your movie.

00:18:17.280 --> 00:18:22.790
And every once in a while this is useful.

00:18:22.790 --> 00:18:22.790
And if we can switch
over to the demo machine.

00:18:24.530 --> 00:18:25.560
I'll show you what this looks like.

00:18:25.630 --> 00:18:28.060
It's kind of wacky.

00:18:28.060 --> 00:18:31.360
This is a little bit small.

00:18:31.930 --> 00:18:33.010
Welcome to WWDC.

00:18:33.010 --> 00:18:37.040
And what we've done here that's odd
is we haven't really embedded a movie

00:18:37.040 --> 00:18:39.700
that's a file or a stream or on the web.

00:18:39.700 --> 00:18:43.820
We said embed, set the width and height,
give it a source so that

00:18:43.820 --> 00:18:46.460
it would call QuickTime,
set the plugins page because

00:18:46.590 --> 00:18:48.050
that's a good thing to do.

00:18:48.480 --> 00:18:53.280
And then we said the QT source
is data colon mime type,

00:18:53.530 --> 00:18:55.920
in this case text plain.

00:18:56.130 --> 00:19:01.350
And then, comma, and then,
something we would ordinarily

00:19:01.390 --> 00:19:03.240
have put in a file.

00:19:03.240 --> 00:19:06.260
TextText, which is an Atom hack
that I'll show you later,

00:19:06.260 --> 00:19:07.890
and the text Welcome to WWDC.

00:19:08.020 --> 00:19:14.430
So, this made it,
it built a QuickTime movie on

00:19:14.430 --> 00:19:14.430
the fly out of data that was
actually inside the embed tag.

00:19:14.820 --> 00:19:17.300
If we wanted to,
we could have put a JPEG in there,

00:19:17.300 --> 00:19:19.000
but it would have had to
have been Base64 encoded.

00:19:19.000 --> 00:19:21.670
Anything that won't fit
between these quotes,

00:19:21.780 --> 00:19:24.230
anything that's got angle brackets
or quotes in it or really,

00:19:24.230 --> 00:19:26.660
really odd characters
should be Base64 encoded.

00:19:26.660 --> 00:19:30.290
And I wouldn't go crazy with this,
but every once in a while it can turn

00:19:30.380 --> 00:19:33.600
out to be a lifesaver when you've got
something in your work process that says,

00:19:33.660 --> 00:19:35.360
no, this needs to happen inside the HTML.

00:19:35.360 --> 00:19:36.900
I can't be getting
another file right now.

00:19:36.900 --> 00:19:39.890
So it's something to be aware of.

00:19:42.140 --> 00:19:46.720
When you load URLs in QuickTime,
this includes the QT source

00:19:46.850 --> 00:19:49.600
or if there's an HREF,
any time there's a URL inside the

00:19:49.710 --> 00:19:53.590
tag that you're passing to QuickTime,
the QuickTime plug-in knows the URL of

00:19:53.590 --> 00:19:55.210
the movie that it's playing right now.

00:19:55.220 --> 00:19:58.360
It doesn't know the URL of the
web page it came from because

00:19:58.370 --> 00:19:59.410
the browser doesn't tell it.

00:20:00.690 --> 00:20:03.470
So any URL that's a rel--
if it's an absolute URL,

00:20:03.470 --> 00:20:04.500
that's great.

00:20:04.520 --> 00:20:07.010
But if it's a relative URL,
it has to be relative to the

00:20:07.020 --> 00:20:09.100
movie that is currently loaded.

00:20:09.130 --> 00:20:13.710
And this will bite you many,
many times if your movies are in one

00:20:13.710 --> 00:20:13.710
directory and your HTML is another.

00:20:13.860 --> 00:20:15.880
If you load the movie,
if there's an href in that movie,

00:20:15.950 --> 00:20:17.710
even though it's in your
embed tag in your HTML,

00:20:17.710 --> 00:20:19.870
it's relative to the movie
that's currently loaded.

00:20:21.590 --> 00:20:23.970
And if you're

00:20:25.060 --> 00:20:26.430
Here's a relative URL.

00:20:26.670 --> 00:20:29.500
Up a folder, into the movies folder,
go to the next movie.

00:20:29.540 --> 00:20:30.960
Sure.

00:20:30.960 --> 00:20:32.980
But what if you loaded a data URL?

00:20:32.980 --> 00:20:37.080
What is that relative to?

00:20:37.250 --> 00:20:38.880
Don't do that.

00:20:42.060 --> 00:20:43.050
and that's really all there is to that.

00:20:43.140 --> 00:20:47.100
We go back to slides.

00:20:47.100 --> 00:20:50.590
Another kind of URL that you can send
from QuickTime is a JavaScript URL,

00:20:50.670 --> 00:20:52.690
open with the JavaScript protocol.

00:20:52.690 --> 00:20:55.190
And believe it or not,
QuickTime will call JavaScript,

00:20:55.250 --> 00:20:56.450
and you can call functions.

00:20:56.610 --> 00:20:57.800
You can pass parameters.

00:20:57.820 --> 00:21:01.030
And it's true that JavaScript can't
control QuickTime in all

00:21:01.030 --> 00:21:02.780
browsers and all platforms.

00:21:02.870 --> 00:21:04.470
There are some obstacles there.

00:21:04.540 --> 00:21:06.490
But going the other
way works all the time.

00:21:06.620 --> 00:21:10.030
You can call a JavaScript URL from
within QuickTime.

00:21:10.180 --> 00:21:12.970
So your movie, you click here,
it can cause a

00:21:13.000 --> 00:21:16.170
JavaScript function to execute,
open a new window, load another movie,

00:21:16.270 --> 00:21:18.530
do all kinds of things for you.

00:21:18.610 --> 00:21:20.680
Once in a while,
you'll have a problem with browsers that

00:21:20.740 --> 00:21:22.880
just have difficulty with JavaScript.

00:21:22.980 --> 00:21:25.520
If you run into a problem
where you can't do it that way,

00:21:25.520 --> 00:21:28.970
you can load an HTML file
that's in a hidden frame,

00:21:29.200 --> 00:21:33.520
maybe two pixels by two pixels,
that has the JavaScript in

00:21:33.520 --> 00:21:35.260
it and executes on load.

00:21:35.430 --> 00:21:36.960
And that always works.

00:21:36.960 --> 00:21:41.900
But really, in current browsers and
current operating systems,

00:21:41.900 --> 00:21:44.910
the JavaScript URL should just work.

00:21:45.050 --> 00:21:48.920
Finally, there's one thing you would
probably like to know,

00:21:48.920 --> 00:21:54.930
which is that you can pass a URL with a
target in QuickTime and with embed tags.

00:21:55.140 --> 00:21:59.560
So let's say I've got a movie that's
looping continuously with no controller.

00:21:59.580 --> 00:22:01.570
And when you click it,
I want to load another movie.

00:22:01.570 --> 00:22:07.100
But I don't want it to load
with a controller in play.

00:22:07.310 --> 00:22:09.510
I want it to load and run
continuously in a loop.

00:22:09.510 --> 00:22:09.510
So I can say URL -- oops --

00:22:10.520 --> 00:22:12.400
is the movie I want to run.

00:22:12.520 --> 00:22:18.480
The target is myself loaded here and
extra there are additional embed tags.

00:22:18.480 --> 00:22:21.910
AutoPlay equals true, loop equals true,
controller equals false.

00:22:21.910 --> 00:22:25.570
Anything you can put in the embed
tag you can stick in the e tag.

00:22:25.570 --> 00:22:27.600
And this is a really nice thing.

00:22:27.600 --> 00:22:31.450
This lets you have movies that
behave differently in the browser.

00:22:31.450 --> 00:22:32.970
You really only have one embed tag,
right?

00:22:32.970 --> 00:22:34.500
So you can only put in
one set of protocols.

00:22:34.580 --> 00:22:35.800
Do you want controller or don't you?

00:22:35.800 --> 00:22:37.370
Do you want it to loop or don't you?

00:22:37.370 --> 00:22:40.080
But if you're doing a series
of movies you might want

00:22:40.080 --> 00:22:41.440
them to behave differently.

00:22:41.440 --> 00:22:43.790
The VR has a controller
and this one doesn't.

00:22:43.810 --> 00:22:47.710
So you can actually link them with
this and pass the embed tags along

00:22:47.710 --> 00:22:49.720
to the next guy in the parade.

00:22:49.790 --> 00:22:51.600
And that's pretty handy.

00:22:52.940 --> 00:22:53.490
Okay.

00:22:53.870 --> 00:22:55.590
Speaking of embed tag parameters,
like I said,

00:22:55.610 --> 00:22:57.010
I'm not going to go over all of them.

00:22:57.040 --> 00:22:59.560
Most of them are there,
and they just control how the

00:22:59.560 --> 00:23:01.320
movie looks and acts and plays.

00:23:01.430 --> 00:23:02.880
But there are a few that
people don't know about.

00:23:02.920 --> 00:23:05.480
One is save embed tags,
which says -- it's kind of

00:23:05.610 --> 00:23:08.740
like passing the E and saying,
"Everything they did to me,

00:23:08.740 --> 00:23:09.840
do to the next guy.

00:23:09.870 --> 00:23:10.550
Whatever.

00:23:10.550 --> 00:23:13.560
Pass it along." And that's
really handy because ordinarily

00:23:13.560 --> 00:23:16.120
when you load a new movie,
it comes up with a controller.

00:23:16.120 --> 00:23:18.770
If you don't want it to have one,
if you want it to have the same

00:23:18.770 --> 00:23:22.800
characteristics as the current movie has,
save the embed tags, pass them along.

00:23:23.710 --> 00:23:26.800
A far more complicated one
is allowing BedTag overrides,

00:23:26.800 --> 00:23:29.220
where you're saying,
"It's been set one way.

00:23:29.220 --> 00:23:31.820
I'm going to now set it a different way."

00:23:31.910 --> 00:23:32.840
And why would you want to do that?

00:23:33.020 --> 00:23:35.640
Well, there's kind of a hierarchy.

00:23:35.650 --> 00:23:39.280
If I load a movie and
I don't specify autoplay,

00:23:39.340 --> 00:23:40.650
the user has preferences.

00:23:40.700 --> 00:23:45.300
Movies either autoplay or don't,
depending on how he set his preferences.

00:23:45.590 --> 00:23:50.840
But if I set autoplay to be true in my
HTML that overrides the user settings.

00:23:51.120 --> 00:23:53.510
Well,
there are other places I could try to

00:23:53.510 --> 00:23:55.850
set it that would also have an effect.

00:23:55.870 --> 00:23:58.500
And it just says, kind of pushes things
down in the hierarchy.

00:23:58.500 --> 00:24:01.200
And I'll show you how that
actually works in a minute

00:24:01.200 --> 00:24:03.240
because it's hard to understand.

00:24:03.240 --> 00:24:04.960
Another embed tag is autoplay at.

00:24:04.960 --> 00:24:09.530
Now, up until QuickTime 5,
autoplay was either true or false.

00:24:09.530 --> 00:24:11.630
You know, it autoplays or it doesn't.

00:24:11.630 --> 00:24:14.400
But you probably noticed that
occasionally you'll go to a web page

00:24:14.400 --> 00:24:17.110
and you'll load a QuickTime movie
and it'll start to play and then

00:24:17.120 --> 00:24:18.640
stop and then start up again.

00:24:18.640 --> 00:24:20.570
And what happens,
what autoplay does is it

00:24:20.650 --> 00:24:23.730
says to the movie controller,
look, as soon as you can,

00:24:23.730 --> 00:24:25.540
I want you to play this movie.

00:24:25.540 --> 00:24:28.940
But don't start it until you've
got enough data in the pipeline.

00:24:29.230 --> 00:24:31.540
And it's coming through that
you can play it through until

00:24:31.540 --> 00:24:32.840
the end smoothly in one go.

00:24:33.020 --> 00:24:34.610
Well,
maybe things start up quickly and you're

00:24:34.700 --> 00:24:37.560
getting a lot of data and it says,
hey, at this rate, we can go.

00:24:37.560 --> 00:24:39.010
And then things slow down.

00:24:39.010 --> 00:24:41.300
So it runs out of data
and it starts to stutter.

00:24:41.380 --> 00:24:43.240
And it's very common right
near the beginning of a file.

00:24:43.340 --> 00:24:46.180
There's a lot of stuff that's
just really easy to transport.

00:24:46.180 --> 00:24:47.780
The modems compress it better.

00:24:47.780 --> 00:24:50.900
And so you get a data rate that
kind of jumps and then drops off.

00:24:50.900 --> 00:24:52.580
You can get around it this way.

00:24:52.580 --> 00:24:54.590
You can say, look,
autoplay when you get to this

00:24:54.970 --> 00:24:56.210
point in the movie timeline.

00:24:56.430 --> 00:24:57.500
Make sure you've downloaded
at least 10 seconds or 30

00:24:57.510 --> 00:24:57.990
seconds of the movie timeline.

00:24:57.990 --> 00:24:58.300
And then you'll see it's going to stop.

00:24:58.300 --> 00:24:58.300
And then you can start to play it.

00:24:58.300 --> 00:24:59.370
And then you'll see it's going
to 30 seconds of the movie

00:24:59.500 --> 00:25:00.960
before you start to autoplay.

00:25:00.990 --> 00:25:02.790
And we'll get past that skip.

00:25:02.930 --> 00:25:06.680
So, okay, autoplay at hours, minutes,
seconds, frames.

00:25:06.680 --> 00:25:10.010
Well, not frames, fractions actually.

00:25:11.900 --> 00:25:31.900
[Transcript missing]

00:25:32.510 --> 00:25:35.500
And that is... Here we go.

00:25:35.680 --> 00:25:37.390
Autoplay override.

00:25:37.440 --> 00:25:39.820
And here you can actually see...

00:25:40.200 --> 00:25:46.200
[Transcript missing]

00:25:47.670 --> 00:25:49.800
We have set autoplay equals true.

00:25:50.130 --> 00:25:53.050
And we do that because early
versions of QuickTime say

00:25:53.110 --> 00:25:54.950
autoplay equals true or false.

00:25:54.960 --> 00:25:59.260
And if it's not true or false,
then I guess it must be false.

00:25:59.320 --> 00:26:01.800
If you try to set
autoplay equals waka waka,

00:26:01.910 --> 00:26:02.350
that's false.

00:26:02.510 --> 00:26:04.040
I'm sorry.

00:26:04.040 --> 00:26:06.720
So we're setting it true for
old versions of QuickTime.

00:26:06.820 --> 00:26:08.780
We're saying, OK,
if you've got QuickTime 5 or later,

00:26:08.780 --> 00:26:11.320
though, you know what allow embed
tag overrides means.

00:26:11.510 --> 00:26:12.800
So set it true.

00:26:13.240 --> 00:26:15.790
Now what I really want, ideally,
is to autoplay when it's

00:26:15.790 --> 00:26:17.550
8 seconds uploaded because
I know that won't stutter.

00:26:17.560 --> 00:26:20.120
So I've set that.

00:26:20.180 --> 00:26:24.170
Now turn it back off so the user's
preferences don't take over.

00:26:24.280 --> 00:26:24.780
It's a sequence.

00:26:24.890 --> 00:26:25.520
You turn it on.

00:26:25.640 --> 00:26:26.150
You reset it.

00:26:26.220 --> 00:26:27.960
You turn it back off again.

00:26:27.990 --> 00:26:29.840
And that's typically how you use it.

00:26:29.870 --> 00:26:33.840
And the reason is here,
if I just use autoplay at,

00:26:33.910 --> 00:26:36.200
if the guy's got QuickTime 5 or later,
that's great.

00:26:36.230 --> 00:26:37.040
It works.

00:26:37.250 --> 00:26:39.400
If they have an earlier version,
it's the opposite of what I want.

00:26:39.530 --> 00:26:41.280
It doesn't autoplay.

00:26:41.390 --> 00:26:44.490
So I would rather have it autoplay
and maybe stutter on older versions.

00:26:44.660 --> 00:26:46.810
And on newer versions, just play right.

00:26:46.960 --> 00:26:47.520
So I set it to true.

00:26:47.520 --> 00:26:48.670
Set it the old way.

00:26:48.740 --> 00:26:49.620
Turn on overrides.

00:26:49.630 --> 00:26:50.620
Set it the way I want it.

00:26:50.660 --> 00:26:52.140
Turn it back off again.

00:26:52.140 --> 00:26:54.400
There are other even crazier situations
where you might want to use that.

00:26:54.400 --> 00:26:57.290
But that's probably the fundamental one.

00:26:57.830 --> 00:27:00.980
Okay, and if we go back to the slides,
and I'm just going to breeze

00:27:01.100 --> 00:27:02.140
over these very quickly.

00:27:02.140 --> 00:27:05.800
There are some embed tags that people
don't seem to realize are there.

00:27:05.800 --> 00:27:10.510
So you can set a movie's
name in an embed tag.

00:27:10.600 --> 00:27:13.100
You can say,
load this movie and call it yada yada.

00:27:13.180 --> 00:27:16.210
And so you can load any movie in
that web page and it has that name.

00:27:16.240 --> 00:27:18.880
Once you've named a movie,
you can control it from

00:27:19.130 --> 00:27:20.140
JavaScript by name.

00:27:20.140 --> 00:27:22.520
You can control it by
another movie by name.

00:27:22.580 --> 00:27:26.300
So you can have a remote controller
that operates on main movie,

00:27:27.390 --> 00:27:29.950
stops it, starts it,
turns languages on and off,

00:27:30.070 --> 00:27:30.760
does things to it.

00:27:30.840 --> 00:27:33.600
And any movie you load in
that you name main movie,

00:27:33.600 --> 00:27:34.900
it will control.

00:27:34.900 --> 00:27:38.610
So this is a very nice way to give
you some flexibility where you can put

00:27:38.610 --> 00:27:42.700
it in your HTML and just change the
movie and drop it in there and it just

00:27:42.700 --> 00:27:44.450
behaves the way that the other movie did.

00:27:45.780 --> 00:27:48.950
You can set pan, tilt, field of view,
node,

00:27:48.980 --> 00:27:52.020
and hotspots where they go in your HTML.

00:27:52.020 --> 00:27:53.660
And if you're not familiar
with QuickTime VR,

00:27:53.850 --> 00:27:54.540
pay no attention.

00:27:54.540 --> 00:27:56.730
But if you are, you may, "What?

00:27:56.730 --> 00:27:59.870
I can?" You can load a
VR panorama looking magnified,

00:27:59.980 --> 00:28:03.790
tilted, in a node if it's multi-node,
anywhere you want.

00:28:03.850 --> 00:28:05.890
You can direct where
those hotspots should go,

00:28:05.930 --> 00:28:07.060
what they should link to.

00:28:07.240 --> 00:28:08.380
You can do that in your HTML.

00:28:08.380 --> 00:28:09.830
And sometimes it's very handy.

00:28:09.830 --> 00:28:11.390
Steven Gulie Enable JavaScript.

00:28:11.390 --> 00:28:13.730
If you're going to try to
control it with JavaScript,

00:28:13.730 --> 00:28:15.700
you definitely want to turn that on.

00:28:16.660 --> 00:28:18.940
And there's a URL substitute.

00:28:19.060 --> 00:28:27.310
Sometimes you've written a
whole website and the customer

00:28:27.310 --> 00:28:27.310
has to move to a new server.

00:28:27.310 --> 00:28:27.310
Or you move it to a different
place on the website and you go,

00:28:27.540 --> 00:28:31.670
I don't want to do it because
I embedded those tags inside the

00:28:31.670 --> 00:28:34.330
movie where they're hard to get to.

00:28:34.330 --> 00:28:37.930
URL substitute in most cases,
if the URL goes through

00:28:38.360 --> 00:28:42.640
the Plug-in in the browser,
will say, "Oh, I can substitute this

00:28:42.950 --> 00:28:46.650
string for that string,
so server A is now server B,"

00:28:46.770 --> 00:28:48.650
and it just flows through.

00:28:48.680 --> 00:28:51.170
You don't have to go in
and re-edit all the movies.

00:28:51.170 --> 00:28:51.170
You can pick it up in the HTML,
and that can be really a life-saver.

00:28:51.780 --> 00:28:54.260
Okay, so I know we covered
a lot of ground there.

00:28:54.260 --> 00:28:57.640
Is anybody just kind of stunned and
wandering around hopelessly lost,

00:28:57.750 --> 00:28:59.230
or are we all together on this?

00:28:59.360 --> 00:29:00.580
Yeah.

00:29:11.550 --> 00:29:13.220
Yeah, okay, yes.

00:29:13.300 --> 00:29:18.320
If I have an href,
so I say embed my movie, href equals,

00:29:18.320 --> 00:29:20.530
and href means if I click on this movie,
go there.

00:29:20.580 --> 00:29:28.310
So href equals, quote, angle bracket,
the URL of the place you want to go,

00:29:28.320 --> 00:29:32.610
space, capital T bracket, the target,
which is the frame or

00:29:32.610 --> 00:29:34.150
window you want to go to,
or myself,

00:29:34.150 --> 00:29:38.370
if it's me or a QuickTime player,
any target QuickTime accepts, space, E,

00:29:38.370 --> 00:29:43.020
bracket, embed tags,
autoplay equals true, volume equals 120,

00:29:43.020 --> 00:29:44.270
so on and so forth.

00:29:48.870 --> 00:30:00.120
Yeah, you would normally put it there,
but you can embed it in a movie.

00:30:00.120 --> 00:30:00.120
Any place where QuickTime can send a URL,
and there are lots of places,

00:30:00.120 --> 00:30:00.120
like a hotspot in a VR, you can use this.

00:30:02.720 --> 00:30:04.640
Okay.

00:30:04.790 --> 00:30:13.380
So, there are some differences between
the Plug-in and the Player,

00:30:13.380 --> 00:30:13.380
and you can address
them both from the web.

00:30:13.380 --> 00:30:13.380
And the Plug-in or ActiveX control

00:30:13.770 --> 00:30:20.380
gets its data from the embed tag,
which is what we've been looking at,

00:30:20.380 --> 00:30:23.280
these embed tag parameters.

00:30:23.380 --> 00:30:28.310
And it also has a plug atom,
which I'll talk about the

00:30:28.310 --> 00:30:28.670
QuickTime format later if
you don't know about it.

00:30:28.670 --> 00:30:28.670
But there's an atom inside.

00:30:28.670 --> 00:30:28.670
Have you ever used Plug-in Helper?

00:30:28.670 --> 00:30:28.670
Does anybody here know what that is?

00:30:28.950 --> 00:30:31.690
Okay,
plugin helper is a tool from Apple that

00:30:31.830 --> 00:30:33.630
lets you embed things into movies.

00:30:33.680 --> 00:30:35.680
Basically,
put embed tags inside of movies.

00:30:35.680 --> 00:30:37.200
So, and it's free from the web.

00:30:37.340 --> 00:30:39.590
We've got it for Windows,
we've got it for Mac OS.

00:30:39.700 --> 00:30:42.390
It's in the Quicktime tools
and it's really a handy tool.

00:30:42.390 --> 00:30:44.840
You can do lots of neat stuff with it.

00:30:44.840 --> 00:30:49.180
So, it stores those settings,
basically embed tag settings,

00:30:49.180 --> 00:30:50.040
in the plug atom.

00:30:50.040 --> 00:30:52.850
And if you have plugin helper,
you can look at these settings

00:30:52.970 --> 00:30:53.970
and see what they are.

00:30:53.970 --> 00:30:56.400
But normally,
you pass them to the embed tag.

00:30:56.400 --> 00:30:58.420
And that's different from the player.

00:30:58.420 --> 00:31:00.460
The player doesn't use embed tags, right?

00:31:00.570 --> 00:31:02.960
And it doesn't pay
attention to the plug atom.

00:31:02.960 --> 00:31:06.900
So, this is how the plugin is controlled,
where it gets its settings from.

00:31:06.900 --> 00:31:11.630
So, basically, anything that you can pass
in an embed tag addresses the

00:31:11.630 --> 00:31:14.210
capability that the plugin has.

00:31:14.870 --> 00:31:17.400
The plugin also handles
hypertext reference tracks,

00:31:17.710 --> 00:31:20.700
which are, it's a text track that
has a bunch of URLs in it.

00:31:20.700 --> 00:31:23.640
So, with the automatic download feature.

00:31:23.640 --> 00:31:27.650
So, I can have a text track in a movie,
and when that text sample loads,

00:31:27.650 --> 00:31:30.420
it will automatically
load a URL in a web page,

00:31:30.420 --> 00:31:32.020
in another frame, typically.

00:31:32.020 --> 00:31:34.960
So, as the movie plays,
these web pages are displayed,

00:31:34.960 --> 00:31:37.660
although it can also launch
other movies and replace

00:31:37.750 --> 00:31:39.300
itself and do a lot of things.

00:31:40.360 --> 00:31:43.010
That doesn't work in the player,
because the plugin was designed

00:31:43.010 --> 00:31:45.310
with the thought in mind of,
well, I'll be playing in a browser,

00:31:45.370 --> 00:31:47.670
so you might want to download
these things at certain times.

00:31:47.700 --> 00:31:49.730
And the player doesn't
currently handle that,

00:31:49.730 --> 00:31:51.420
although that's subject to change.

00:31:51.420 --> 00:31:54.120
The plugin uses the
browser for downloads,

00:31:54.120 --> 00:31:55.480
so be aware of that.

00:31:55.580 --> 00:31:57.370
If you don't want things to
show up in the browser cache,

00:31:57.480 --> 00:31:59.320
you might not want to load
them through the plugin.

00:32:00.730 --> 00:32:04.290
And the plugin has the ability to
consistently have multiple movies open.

00:32:04.290 --> 00:32:07.320
You can have movies
that talk to each other.

00:32:07.370 --> 00:32:10.220
So you can have a controller movie
that talks to three other movies.

00:32:10.220 --> 00:32:13.130
And if you have a web page in the plugin,
you know you can open up

00:32:13.130 --> 00:32:15.570
all four movies at once,
and it'll all be there.

00:32:15.570 --> 00:32:18.780
You can't necessarily do
that in QuickTime Player.

00:32:18.800 --> 00:32:23.180
The user has a preference setting,
open in new player, open in same window.

00:32:23.180 --> 00:32:25.990
If they've got their system
set to open in the same window,

00:32:25.990 --> 00:32:28.730
you can target four different
movies to QuickTime Player,

00:32:28.900 --> 00:32:30.530
and one after another they'll load.

00:32:30.530 --> 00:32:33.430
If they've got it set the other way,
the windows proliferate.

00:32:33.560 --> 00:32:36.940
So you can do it in the plugin,
and that's something that it has the

00:32:36.940 --> 00:32:39.730
capability to do that the player doesn't.

00:32:39.840 --> 00:32:42.590
The player, by contrast,
gets its settings from the movie menu.

00:32:42.590 --> 00:32:45.000
Open up QuickTime Player,
look in the movie menu,

00:32:45.000 --> 00:32:46.570
look at all the things you can do.

00:32:46.570 --> 00:32:48.820
Play double, play half, present movie.

00:32:49.120 --> 00:32:51.850
Those are the things that
the player knows how to do.

00:32:51.850 --> 00:32:55.170
If you've got an embed tag but
no corresponding player setting,

00:32:55.280 --> 00:32:58.240
that's probably something the
plugin can do that the player can't.

00:32:58.500 --> 00:32:59.200
And vice versa.

00:32:59.290 --> 00:33:01.340
Gee, I don't see an embed tag
for play full screen.

00:33:01.510 --> 00:33:04.380
Well, there isn't one because the browser
plugin has to play within the height

00:33:04.520 --> 00:33:06.120
and width the browser gives it.

00:33:06.240 --> 00:33:07.960
But the player can go full screen.

00:33:07.960 --> 00:33:11.790
So that's a way to predict what one
can do and what the other can do.

00:33:11.950 --> 00:33:14.040
And it stores these in settings
inside the movie itself,

00:33:14.040 --> 00:33:18.290
and a user data atom
inside the movie atom.

00:33:18.480 --> 00:33:20.060
And we'll look at some more
at the QuickTime file format

00:33:20.060 --> 00:33:20.920
a little deeper in here.

00:33:20.920 --> 00:33:23.360
But that's where the settings are stored.

00:33:23.360 --> 00:33:24.780
So it's going to look there.

00:33:24.780 --> 00:33:26.770
It's going to look in the user data atom,
not in the plug atom.

00:33:26.820 --> 00:33:30.420
And it ignores some things,
as I already mentioned, the AURL.

00:33:30.420 --> 00:33:34.280
If it's a streaming Ahrefs track,
the player does honor those.

00:33:34.340 --> 00:33:37.700
And the E extension to
URL is not currently,

00:33:37.700 --> 00:33:40.160
well, those are embed tags,
so the player is not paying

00:33:40.160 --> 00:33:40.940
any attention to them.

00:33:40.940 --> 00:33:44.460
It handles most non-HTML URLs natively.

00:33:45.080 --> 00:33:47.600
So if you are in the movie
and you load another file,

00:33:47.600 --> 00:33:49.770
another movie,
typically that won't end up

00:33:49.770 --> 00:33:52.230
in the browser cache because
we're bringing it in ourselves.

00:33:52.240 --> 00:33:56.610
And, of course, it has full screen modes,
which are such nice things.

00:33:56.660 --> 00:34:00.170
So how do you launch the
player from a web page?

00:34:00.300 --> 00:34:02.460
Well, there are two main ways to go.

00:34:02.460 --> 00:34:04.030
The most common one is a poster movie.

00:34:04.040 --> 00:34:07.380
You load a movie and you have
a hypertext reference in it.

00:34:07.520 --> 00:34:10.880
Ahrefs equals URL,
and the target is QuickTime player.

00:34:10.940 --> 00:34:14.250
So notice the position of the
quotes in the angle brackets.

00:34:14.260 --> 00:34:15.000
It's all very important.

00:34:15.020 --> 00:34:18.800
And what this means is
we're going to load a movie,

00:34:18.800 --> 00:34:22.140
and when someone clicks on that movie,
we'll go to QuickTime player and

00:34:22.290 --> 00:34:24.560
load this other movie or this URL.

00:34:26.610 --> 00:34:28.960
And the second way to do
it is to launch a QTL file,

00:34:28.960 --> 00:34:33.850
but let me bring this one up
on the demo and show you that.

00:34:36.400 --> 00:34:38.940
Here we go, launch QuickTime Player.

00:34:38.950 --> 00:34:39.270
Okay.

00:34:39.270 --> 00:34:44.390
Here we are, and if you look at this,
it says, "Click the image above for a

00:34:44.520 --> 00:34:49.370
movie in QuickTime Player." That's
the kind of label you put on it.

00:34:49.440 --> 00:34:51.440
This is a QuickTime movie.

00:34:51.440 --> 00:34:56.440
It's displayed without a controller,
and it's only a single image.

00:34:56.440 --> 00:34:59.560
There's not much to it,
but when I click it,

00:34:59.560 --> 00:35:02.120
it launches the movie
in QuickTime Player.

00:35:02.120 --> 00:35:02.120
So this is a way to
launch QuickTime Player.

00:35:03.330 --> 00:35:04.720
from the browser.

00:35:04.720 --> 00:35:07.880
And that's the most common way you do it.

00:35:07.880 --> 00:35:13.190
Now, if you look at the tag,
it's just -- well, okay, href equals URL,

00:35:13.640 --> 00:35:15.500
target is QuickTimePlayer.

00:35:15.530 --> 00:35:19.870
If I add the tag auto href equals true,
then you don't have to click the movie.

00:35:19.870 --> 00:35:23.060
When you load the Web page,
QuickTimePlayer will just launch.

00:35:23.120 --> 00:35:26.490
But typically you want to give
the user some control over that,

00:35:26.510 --> 00:35:28.150
so you do it this way.

00:35:28.150 --> 00:35:31.580
The other way is to use a
text link to a QTL file.

00:35:31.780 --> 00:35:35.040
And I'll bring that up in
the slides in a moment.

00:35:35.090 --> 00:35:39.760
But basically this is a text link
to what is essentially a text file,

00:35:39.760 --> 00:35:42.800
but when you click it,
it loads whatever that

00:35:42.800 --> 00:35:44.600
URL is in QuickTimePlayer.

00:35:44.800 --> 00:35:46.570
And that's a pretty nice thing.

00:35:46.590 --> 00:35:48.200
People have been asking for a long time,
you know,

00:35:48.250 --> 00:35:51.280
"Can I launch QuickTime Player from
a text link?" And now you can.

00:35:54.650 --> 00:35:57.490
However, what's happening here
is you're going to load,

00:35:57.570 --> 00:35:59.730
you're telling the browser
to load a QTL file.

00:35:59.740 --> 00:36:02.030
A QTL file has a
MIME type of application,

00:36:02.030 --> 00:36:03.320
QuickTime Player.

00:36:03.320 --> 00:36:06.820
So the browser says, okay, well,
I'll give that to QuickTime.

00:36:06.820 --> 00:36:09.960
And the QTL file is
just a little text file.

00:36:09.960 --> 00:36:11.020
It's a little XML file.

00:36:11.020 --> 00:36:13.660
It's like four lines of text which says,
here's where the movie really is.

00:36:13.820 --> 00:36:17.960
So this file is going to be downloaded to
your disk and handed off to the player.

00:36:17.960 --> 00:36:21.050
The URL in the file has
to be an absolute URL.

00:36:21.300 --> 00:36:24.610
If it's relative, the browser says, hey,
QuickTime Player,

00:36:24.700 --> 00:36:27.040
here's this movie from this cache folder.

00:36:27.140 --> 00:36:30.530
You go to a relative URL that's
relative to that cache folder,

00:36:30.530 --> 00:36:31.380
not so good.

00:36:31.400 --> 00:36:36.320
So basically,
this is really hard to use on a CD.

00:36:36.320 --> 00:36:37.700
This is the one you want
to use over the Internet.

00:36:37.700 --> 00:36:39.460
You want to use an HTTP URL.

00:36:39.460 --> 00:36:42.140
And let's go ahead back to
the slides for a second,

00:36:42.140 --> 00:36:44.740
and we'll look a little more
closely at that QTL file.

00:36:44.740 --> 00:36:47.940
The type is application
X QuickTime Player.

00:36:53.070 --> 00:36:54.890
And it starts out with
the same two lines always,

00:36:55.450 --> 00:37:02.590
query XML version 1.0 and QuickTime type
equals application QuickTime media link.

00:37:02.680 --> 00:37:04.970
And what happens is when
QuickTime opens this file,

00:37:05.040 --> 00:37:06.870
it sees query XML and it says,
wait a minute,

00:37:06.990 --> 00:37:08.440
what am I dealing with here?

00:37:08.440 --> 00:37:10.660
It sees that it's a
QuickTime media link and it goes,

00:37:10.660 --> 00:37:11.420
okay, I got it.

00:37:11.520 --> 00:37:14.040
Then it looks at the embed source.

00:37:14.120 --> 00:37:15.910
And this third line,
the line at the bottom,

00:37:15.920 --> 00:37:17.150
is the one that you change.

00:37:17.320 --> 00:37:20.740
That's when you have it point to
your movie rather than this movie.

00:37:20.970 --> 00:37:23.510
Basically cut and paste this file,
change that,

00:37:23.510 --> 00:37:25.580
and save it with a .qtl extension.

00:37:25.600 --> 00:37:29.190
And some systems will immediately
pick up a QuickTime movie icon and,

00:37:29.190 --> 00:37:31.050
you know, it looks like a movie.

00:37:32.730 --> 00:37:35.080
You can also save it with
the .MOV file extension.

00:37:35.100 --> 00:37:37.690
And it looks like a QuickTime movie,
and QuickTime will treat it as one.

00:37:37.740 --> 00:37:39.380
You can embed it in a
web page as a movie.

00:37:39.380 --> 00:37:43.220
So here's a thing where you've got a
CGI script and you're generating text.

00:37:43.340 --> 00:37:46.420
You can generate this file out of
anything that will generate text,

00:37:46.790 --> 00:37:48.140
Perl, anything.

00:37:48.140 --> 00:37:53.480
So now you have the ability to say,
embed this movie, but this movie can be

00:37:53.480 --> 00:37:54.580
anything you want it to be.

00:37:54.590 --> 00:37:57.360
You can point to anywhere,
and you can generate it

00:37:57.390 --> 00:37:58.840
at runtime from a script.

00:37:59.700 --> 00:38:03.030
So you don't have to make a reference
movie that you're constantly changing.

00:38:03.040 --> 00:38:04.060
You can change it on the fly.

00:38:04.060 --> 00:38:04.720
It's pretty nice.

00:38:08.580 --> 00:38:11.790
And of course, the reason you mainly want
to go to QuickTime Player is

00:38:11.790 --> 00:38:12.840
to launch full-screen movies.

00:38:12.840 --> 00:38:17.360
There are several full-screen modes,
normal size, double size, half size.

00:38:17.640 --> 00:38:19.850
Full size,
which means whatever the screen is,

00:38:19.960 --> 00:38:22.690
but it will try to change the screen
resolution if it can to better

00:38:22.690 --> 00:38:25.760
match that of the movie so you
get better playback performance.

00:38:25.820 --> 00:38:28.560
And current,
which means whatever size it is now.

00:38:28.560 --> 00:38:33.960
There are a couple ways to set that mode,
set it to full-screen mode.

00:38:34.180 --> 00:38:36.080
You can either put something
in the movie so that when

00:38:36.080 --> 00:38:38.700
QuickTime Player loads that movie,
it knows it's a full-screen movie.

00:38:38.700 --> 00:38:41.480
Or you can have some external
means of telling QuickTime Player,

00:38:41.480 --> 00:38:43.430
okay,
the movie isn't a full-screen movie,

00:38:43.450 --> 00:38:45.380
there's nothing in it
that says that it is,

00:38:45.480 --> 00:38:47.050
but I'm telling you to
display it that way.

00:38:47.060 --> 00:38:52.760
Internally, you can set it using the API,
the QuickTime API if you're a programmer,

00:38:52.760 --> 00:38:55.550
or you have an application
that will do that for you.

00:38:55.560 --> 00:38:59.500
You can use it using
AppleScript if you have a...

00:39:00.930 --> 00:39:01.940
if you're running on Mac OS.

00:39:01.940 --> 00:39:06.270
And it's going to store
it in this PTV atom.

00:39:06.280 --> 00:39:09.420
If you're getting down and dirty here,
you're taking notes for programming.

00:39:09.420 --> 00:39:10.920
That's the print-to-video atom.

00:39:10.940 --> 00:39:13.120
It's part of the user
data atom for the movie.

00:39:13.120 --> 00:39:15.860
And it's documented in
the QuickTime file format,

00:39:15.860 --> 00:39:18.380
which is on the web,
set it to the right value, and by golly,

00:39:18.380 --> 00:39:21.210
when that movie opens and plays,
it will play in full-screen mode.

00:39:21.240 --> 00:39:25.990
Externally, you can... Well,
another quasi-internal way is

00:39:26.070 --> 00:39:27.250
there's a wired sprite action.

00:39:28.040 --> 00:39:31.570
You can tell a sprite or a
piece of text or anything in

00:39:31.570 --> 00:39:35.990
QuickTime that accepts wired actions,
when I'm activated, go to full-screen,

00:39:36.000 --> 00:39:38.180
or when this set of conditions is true,
go to full-screen.

00:39:38.180 --> 00:39:40.780
And I'll show you a movie later
that has a little button on it.

00:39:40.780 --> 00:39:42.420
You can click it,
and it goes into full-screen mode.

00:39:42.480 --> 00:39:43.930
And that's pretty nice.

00:39:43.940 --> 00:39:50.000
If you write a smile file, there's a tags
QT full-screen equals full.

00:39:50.000 --> 00:39:51.460
We've added that extension to smile.

00:39:51.460 --> 00:39:55.080
So you can just say, look,
I'm going to write out a four-line

00:39:55.080 --> 00:39:58.340
smile file that says go to full-screen,
and here's the name of

00:39:58.340 --> 00:39:59.150
the movie I want to play.

00:39:59.160 --> 00:40:00.860
And it's pretty much just
like playing a movie,

00:40:00.860 --> 00:40:02.110
but it plays in full-screen mode.

00:40:02.160 --> 00:40:07.410
And as we were talking about earlier,
the XML I was showing you, you can add,

00:40:07.410 --> 00:40:12.000
after your embed source,
full-screen equals full,

00:40:12.020 --> 00:40:15.700
or full-screen equals half,
or full-screen equals double, whatever,

00:40:15.700 --> 00:40:17.860
depending on which mode
you want to run it in.

00:40:17.880 --> 00:40:22.500
And that QTL file, or QTI file,
it says QTI, but it should say QTL,

00:40:22.500 --> 00:40:26.100
QuickTime Media Link file,
will launch in full-screen mode.

00:40:26.120 --> 00:40:29.440
So if I have... If I have a movie,
and I want QuickTime Player to

00:40:29.550 --> 00:40:32.880
play it in full-screen mode,
but I don't have access to the API,

00:40:32.880 --> 00:40:35.790
I don't have AppleScript,
I can generate a text file from

00:40:36.180 --> 00:40:39.600
any kind of CGI script that says,
here's the XML file,

00:40:39.600 --> 00:40:41.500
here's the movie I want to play,
play it in full-screen mode,

00:40:41.500 --> 00:40:44.130
name it .mov, embed it in the web page.

00:40:44.220 --> 00:40:46.460
When you click it,
it thinks it's a movie.

00:40:46.460 --> 00:40:48.480
QuickTime gets the real movie,
plays it in full-screen

00:40:48.480 --> 00:40:49.330
mode in QuickTime Player.

00:40:49.340 --> 00:40:51.370
And if we go back to...

00:40:52.770 --> 00:40:56.320
"The demo machine,
I'll show you what that looks like,

00:40:56.450 --> 00:40:59.180
and it's certainly a better experience.

00:40:59.260 --> 00:41:00.280
This looks the same.

00:41:00.350 --> 00:41:01.660
Here we have the poster.

00:41:01.660 --> 00:41:03.770
It's going to launch QuickTime Player,
but this time..."

00:41:17.750 --> 00:41:20.320
I think that's a much better
experience for the user than

00:41:20.410 --> 00:41:21.910
watching it in a little window.

00:41:21.910 --> 00:41:25.700
Now that actually had it set to play
it full-screen and then quit when done.

00:41:25.700 --> 00:41:27.700
I had another window open.

00:41:27.890 --> 00:41:30.600
But that was a full-screen movie.

00:41:30.820 --> 00:41:34.310
The movie itself was
set to be full-screen.

00:41:34.310 --> 00:41:38.590
And here's a text link to a
QTL file that's going to play

00:41:38.700 --> 00:41:40.290
a normal-sized movie but tell
QuickTime to play it on full-screen,

00:41:40.290 --> 00:41:40.290
and it's going to act just the same.

00:41:55.820 --> 00:41:59.550
Okay, and as I said,
here we've added a few lines to the QT,

00:41:59.560 --> 00:42:03.200
say, full-screen equals full,
autoplay equals true,

00:42:03.200 --> 00:42:07.300
quit when done equals true,
and those things just happen.

00:42:07.300 --> 00:42:10.670
Okay.

00:42:10.770 --> 00:42:12.670
Any questions about launching
QuickTime Player full-screen mode?

00:42:18.800 --> 00:42:22.200
Okay, what is the difference between
normal mode and current mode?

00:42:22.200 --> 00:42:24.950
Normal is the actual size of the
movie when it was last saved.

00:42:24.950 --> 00:42:26.700
Current is whatever size it is now.

00:42:26.700 --> 00:42:31.170
If you're playing in QuickTime Player and
you drag it to be a certain size,

00:42:31.180 --> 00:42:35.240
and then you hit a button that says
"Go full screen," and it says "Go

00:42:35.450 --> 00:42:39.680
full screen current," it'll display
at that size on a black background,

00:42:39.800 --> 00:42:41.340
whatever size you're at.

00:42:41.400 --> 00:42:44.300
You would very,
very rarely want to use that.

00:42:44.300 --> 00:42:45.530
Yeah, of course.

00:42:45.700 --> 00:42:48.260
All right,
and if we could go back to slides.

00:42:50.230 --> 00:42:52.020
Let's look at writing.

00:42:52.020 --> 00:42:55.100
Is there anybody here who
writes CGI or SSI scripts?

00:42:55.100 --> 00:42:56.980
Okay.

00:42:56.980 --> 00:43:01.930
Well, I'm just talking to you then.

00:43:02.750 --> 00:43:05.970
You can write your embed tag
on the fly using JavaScript.

00:43:06.000 --> 00:43:09.080
And there are a lot of reasons
why you might want to do that.

00:43:09.080 --> 00:43:10.940
The most obvious one is
to check for QuickTime,

00:43:10.940 --> 00:43:12.950
check the browser,
correct the operating system,

00:43:12.960 --> 00:43:16.050
and then write the object
tag or the embed tag or both,

00:43:16.380 --> 00:43:18.030
or skip tags.

00:43:18.170 --> 00:43:18.980
Say, you know what?

00:43:19.180 --> 00:43:21.640
If they have QuickTime,
I want to play this background audio,

00:43:21.640 --> 00:43:24.260
but if they don't, I don't want to bug
them to do a download.

00:43:24.260 --> 00:43:25.780
I just won't write that tag in.

00:43:25.800 --> 00:43:27.330
I won't write the embed
tag for that audio.

00:43:27.340 --> 00:43:30.260
Or you can say, well,
they don't have QuickTime,

00:43:30.390 --> 00:43:32.940
so instead of embedding a movie,
I'll put in an image tag

00:43:33.050 --> 00:43:34.260
and show them a JPEG.

00:43:34.300 --> 00:43:38.360
Or, no, I'll redirect them to an
alternate content page because

00:43:38.460 --> 00:43:41.720
this page really needs QuickTime,
but I want them to be able to buy my

00:43:41.720 --> 00:43:44.520
shoes even if they don't have QuickTime,
so I'll send them over here.

00:43:44.520 --> 00:43:47.680
Or redirect them to a
download page that says,

00:43:47.740 --> 00:43:48.980
gee, they don't have QuickTime.

00:43:48.980 --> 00:43:51.130
Let's send them over to a page
that tells them to get it because

00:43:51.440 --> 00:43:52.290
they really got to have it.

00:43:52.380 --> 00:43:54.860
And I don't want to just depend on
the browser popping up some little

00:43:54.860 --> 00:43:57.140
window that's an ambiguous tag
that's going to confuse the user.

00:43:57.140 --> 00:43:59.280
Do you trust Apple to
download an ActiveX?

00:43:59.950 --> 00:44:02.620
I'll bring it to a web page that says,
hey, you need QuickTime.

00:44:02.620 --> 00:44:04.720
You're going to get it by clicking here.

00:44:04.720 --> 00:44:05.140
It's free.

00:44:05.140 --> 00:44:05.640
Don't worry.

00:44:05.640 --> 00:44:07.420
Ignore the $30 pro fee.

00:44:07.420 --> 00:44:09.300
Just click for the free player.

00:44:09.300 --> 00:44:13.380
Yes, it works for Windows and
whatever you want to say.

00:44:13.400 --> 00:44:15.570
Or, of course,
you can direct them to our download page

00:44:15.620 --> 00:44:17.810
at www.apple.com QuickTime Download.

00:44:17.840 --> 00:44:19.820
And that's guaranteed to be there.

00:44:19.820 --> 00:44:23.520
So I'll show you back
on the demo machine.

00:44:25.500 --> 00:44:28.640
So, kind of what that looks like,
we're going to load a screen

00:44:28.640 --> 00:44:30.500
that's got some JavaScript in it.

00:44:30.580 --> 00:44:32.700
It checks for QuickTime,
and it either embeds

00:44:32.720 --> 00:44:34.020
this movie or it says,
"Oh,

00:44:34.020 --> 00:44:43.440
you need QuickTime." It's very simple,
and if we just look at the view,

00:44:43.440 --> 00:44:43.440
at the source, realize it's kind of tiny,
but it's

00:44:44.080 --> 00:44:46.340
There's a script.

00:44:46.490 --> 00:44:50.000
It says, "Check for the ActiveX control.

00:44:50.060 --> 00:44:58.010
Now check for the Plug-in."
And if QuickTime is true,

00:45:00.250 --> 00:45:02.140
Document write embed source.

00:45:02.140 --> 00:45:05.640
Else, document write,
you don't have QuickTime.

00:45:05.670 --> 00:45:07.020
Now, this is really skeletal.

00:45:07.020 --> 00:45:09.750
You would do a much more finished job,
but I just wanted to make it

00:45:09.960 --> 00:45:11.140
really obvious how it's working.

00:45:11.460 --> 00:45:14.710
Checks for QuickTime either
embeds the QuickTime content

00:45:14.710 --> 00:45:16.240
or says do something else.

00:45:16.440 --> 00:45:19.980
And that's pretty straightforward.

00:45:19.980 --> 00:45:24.050
If you do any
JavaScript programming at all,

00:45:24.300 --> 00:45:25.990
that's pretty simple to do.

00:45:25.990 --> 00:45:25.990
And let's go back to slides again.

00:45:27.500 --> 00:45:29.400
Okay, so there are really two
ways to detect QuickTime.

00:45:29.580 --> 00:45:31.080
JavaScript,
which is what we just looked at,

00:45:31.140 --> 00:45:34.550
and if you use JavaScript,
you're also going to use a

00:45:34.550 --> 00:45:38.450
little VB script for Windows,
and what you do is you

00:45:38.450 --> 00:45:41.750
get the browser type,
browser version, OS,

00:45:41.980 --> 00:45:43.320
and then check for QuickTime.

00:45:43.320 --> 00:45:46.210
If it's Netscape or Mozilla or
Internet Explorer for the Mac,

00:45:46.280 --> 00:45:48.990
just use the navigator plug-in's object,
and it'll tell you if

00:45:48.990 --> 00:45:50.960
QuickTime is installed,
if the QuickTime plug-in is there.

00:45:50.960 --> 00:45:53.280
If you're in
Internet Explorer for Windows,

00:45:53.280 --> 00:45:54.380
it's a little more complicated.

00:45:54.380 --> 00:45:57.820
You create an object and then check for
that object and see if it's available,

00:45:57.820 --> 00:45:59.560
and it works.

00:45:59.700 --> 00:46:01.220
It tells you if the ActiveX is there.

00:46:01.220 --> 00:46:03.100
So you do them both,
and if either of them is true,

00:46:03.100 --> 00:46:03.860
then QuickTime is there.

00:46:03.860 --> 00:46:05.840
Otherwise, it's basically not.

00:46:05.860 --> 00:46:08.860
The other possibility is to
use QuickTime to detect itself,

00:46:08.860 --> 00:46:11.220
and that's more reliable and
somewhat more interesting.

00:46:11.220 --> 00:46:13.880
Use QuickTime to detect itself.

00:46:13.880 --> 00:46:19.040
You embed a QuickTime movie,
and you have an href to the page that

00:46:19.090 --> 00:46:22.620
you want people to go to if they have
QuickTime and say auto href equals true.

00:46:22.620 --> 00:46:24.820
If they have QuickTime,
they're going to go through

00:46:24.870 --> 00:46:26.080
that page in less than a second.

00:46:26.110 --> 00:46:27.360
They'll be there,
and then they'll be there gone.

00:46:27.380 --> 00:46:29.490
They'll be directed to the
page you want it to go to.

00:46:29.520 --> 00:46:32.720
If they don't have QuickTime installed
or it's not properly configured for

00:46:32.830 --> 00:46:37.340
their browser or something is wrong,
then it's there at that page.

00:46:37.480 --> 00:46:39.740
So put some text on it that
gives them something to read

00:46:39.740 --> 00:46:43.250
while you wait for a timeout,
and set a timeout in the HTML that says,

00:46:43.340 --> 00:46:46.890
hey, if they don't have QuickTime,
after 30 seconds, 45 seconds,

00:46:46.970 --> 00:46:49.920
however long I want to give it,
take them to another page.

00:46:49.920 --> 00:46:52.180
HTML has a facility for this.

00:46:52.260 --> 00:46:53.800
It's HTTP Equiv.

00:46:53.820 --> 00:46:55.100
Set it to refresh.

00:46:55.160 --> 00:46:59.290
Set the content to be, the timeout,
the URL you want to go to,

00:46:59.290 --> 00:47:01.280
and that's all there is to it.

00:47:01.880 --> 00:47:03.030
So it works like this.

00:47:03.030 --> 00:47:06.270
The user comes in to the test page,
and if they have QuickTime,

00:47:06.600 --> 00:47:08.400
QuickTime takes them to another page.

00:47:08.400 --> 00:47:11.160
If they don't have QuickTime,
there's a timeout to go

00:47:11.160 --> 00:47:12.920
to the alternate content.

00:47:12.930 --> 00:47:14.070
And it works -- it looks like this.

00:47:14.180 --> 00:47:15.320
We go back to the demos.

00:47:15.320 --> 00:47:20.810
There's not a lot to see here
because what's going to happen

00:47:21.440 --> 00:47:24.830
is we're going to load Redirect.

00:47:24.830 --> 00:47:25.670
Boom.

00:47:25.840 --> 00:47:27.520
Let's -- you want to see it again?

00:47:27.520 --> 00:47:27.520
Okay, let's go back.

00:47:28.950 --> 00:47:29.680
Checking for QuickTime.

00:47:29.770 --> 00:47:30.400
You have QuickTime.

00:47:30.450 --> 00:47:31.060
Checking for QuickTime.

00:47:31.060 --> 00:47:31.780
Oh, you have QuickTime.

00:47:31.790 --> 00:47:32.940
Checking for QuickTime.

00:47:32.940 --> 00:47:33.980
Oh, you have QuickTime.

00:47:34.210 --> 00:47:36.100
I could disable QuickTime and
it would go to the page that

00:47:36.190 --> 00:47:38.140
says you don't have QuickTime,
but I think you can imagine

00:47:38.140 --> 00:47:39.100
what that looks like.

00:47:39.160 --> 00:47:44.760
It's really pretty straightforward,
pretty easy to do.

00:47:44.760 --> 00:47:49.000
Just put it in a
QuickTime movie with an href,

00:47:49.450 --> 00:47:51.490
auto href, make up the pages for has it,
doesn't have it, and you're done.

00:47:51.490 --> 00:47:51.490
So we go back to slides.

00:47:51.650 --> 00:47:53.840
It's really, really not that bad.

00:47:53.960 --> 00:47:55.440
I'm just going to back up here.

00:47:55.480 --> 00:48:05.030
Two lines for QuickTime,
href and auto href, one line for HTML,

00:48:05.030 --> 00:48:05.030
http-equiv.

00:48:05.030 --> 00:48:05.030
That goes in your header and any HTML

00:48:06.800 --> 00:48:08.610
The tutorial will show
you how to do that.

00:48:08.610 --> 00:48:11.150
So the good thing about using
JavaScript and VBScript is you can

00:48:11.290 --> 00:48:14.350
prevent the prompt for download we
talked about earlier if you don't want

00:48:14.350 --> 00:48:17.140
that to happen under any circumstances,
and you only write the tags

00:48:17.240 --> 00:48:18.270
if QuickTime is present.

00:48:18.370 --> 00:48:20.560
The bad side is, it could be wrong.

00:48:20.680 --> 00:48:23.760
You could say, "Yeah,
the QuickTime Plug-in is there,

00:48:23.860 --> 00:48:27.550
but it's not set to play movies."
All you know is that it's there.

00:48:27.550 --> 00:48:29.560
Or you could have a false negative.

00:48:29.650 --> 00:48:32.140
You could have an older
version of QuickTime.

00:48:32.280 --> 00:48:34.890
QuickTime is there,
but it's too early a version

00:48:34.890 --> 00:48:35.150
for Windows to know about.

00:48:36.520 --> 00:48:38.460
Doing it with QuickTime works every time.

00:48:38.630 --> 00:48:39.900
It's really reliable.

00:48:39.940 --> 00:48:42.090
And it will prompt for
a download when needed.

00:48:42.090 --> 00:48:45.120
And normally, that's a positive,
not a negative.

00:48:45.120 --> 00:48:50.730
And it uses the Plug-ins page if
it's a Plug-in or the class ID and

00:48:50.730 --> 00:48:54.400
code base if it's an ActiveX control.

00:48:54.400 --> 00:48:59.180
So if it needs a Plug-in,
it'll get the Plug-in.

00:48:59.180 --> 00:48:59.180
If it needs an ActiveX control,
it will get that.

00:48:59.330 --> 00:49:00.900
The only downside to
that is if you really,

00:49:00.900 --> 00:49:03.560
really, really don't want anybody
ever to get a download prompt,

00:49:03.560 --> 00:49:06.660
well, if they don't have QuickTime,
they're going to get a prompt that says,

00:49:06.660 --> 00:49:07.640
"You need it."

00:49:08.130 --> 00:49:08.450
Okay.

00:49:08.450 --> 00:49:11.770
I'm going to go on to
QuickTime file format for the web.

00:49:11.840 --> 00:49:15.160
Any questions about that
last little sequence there?

00:49:15.840 --> 00:49:22.870
Okay.

00:49:23.990 --> 00:49:23.990
I see many eyes glazing over.

00:49:23.990 --> 00:49:23.990
I know that wasn't right
up everybody's alley here.

00:49:23.990 --> 00:49:23.990
Okay.

00:49:24.150 --> 00:49:26.900
We're going to look at fast
start and slow start movies,

00:49:26.980 --> 00:49:30.740
flattening movies, reference movies,
storing data in external files,

00:49:30.740 --> 00:49:32.090
and copy protection in a way.

00:49:32.290 --> 00:49:32.900
So let's look at it.

00:49:33.020 --> 00:49:34.670
QuickTime file format.

00:49:34.680 --> 00:49:38.090
QuickTime movies are
divided into two parts.

00:49:38.220 --> 00:49:38.940
There's a header.

00:49:38.940 --> 00:49:41.530
Sometimes we refer to it as a card index.

00:49:41.670 --> 00:49:43.320
It's the metadata about the movie.

00:49:43.320 --> 00:49:46.140
It says how many tracks are there,
what kind of tracks are there,

00:49:46.140 --> 00:49:48.360
and where is all the data
located for these tracks.

00:49:48.440 --> 00:49:52.970
Then there's the data itself,
which is video frames, audio samples,

00:49:52.970 --> 00:49:53.780
images.

00:49:53.780 --> 00:49:56.020
And these can be in any kind of file.

00:49:56.020 --> 00:49:58.550
They can be in the same file
as the movie information.

00:49:58.560 --> 00:50:00.110
They can be on the World Wide Web.

00:50:00.400 --> 00:50:01.870
They can be in a mixture of files.

00:50:01.920 --> 00:50:05.040
You can have live streams,
stuff from the web, stuff that's local,

00:50:05.040 --> 00:50:06.250
all in the same movie.

00:50:07.760 --> 00:50:10.350
The critical thing is
there's the metadata,

00:50:10.470 --> 00:50:14.490
the movie resource, if you will,
which is if you program in QuickTime,

00:50:14.510 --> 00:50:19.080
it's the movie, and the sample data,
which may or may not be in the same file.

00:50:19.080 --> 00:50:22.410
And if you look at the file,
you pull it open in a hex editor,

00:50:22.410 --> 00:50:25.970
you'll see that the movie
information is stored in a move atom,

00:50:25.970 --> 00:50:28.650
M-O-O-V,
and the data is stored in an MDAT atom,

00:50:28.650 --> 00:50:29.680
M-D-A-T.

00:50:29.680 --> 00:50:31.550
If you just pull it up in a
hex editor and look at it,

00:50:31.550 --> 00:50:34.140
you'll see a bunch of garbage,
but you'll see those characters.

00:50:34.140 --> 00:50:36.030
Right at the beginning of the file,
typically,

00:50:36.030 --> 00:50:37.420
there's either a move or an MDAT.

00:50:38.530 --> 00:50:40.430
And, uh...

00:50:40.700 --> 00:50:43.300
How it works is,
if it's a fast start movie,

00:50:43.470 --> 00:50:45.780
the move atom is first.

00:50:45.950 --> 00:50:47.710
FastStart is also called
Progressive Download.

00:50:47.810 --> 00:50:50.400
We've got a QuickTime movie
on a file server.

00:50:50.430 --> 00:50:51.920
You start to download
it in your HTML page.

00:50:52.020 --> 00:50:54.360
You don't wait for the movie
to download and then watch it.

00:50:54.390 --> 00:50:56.300
You can watch it while it's downloading.

00:50:56.310 --> 00:50:57.080
Well, how does that work?

00:50:57.140 --> 00:51:03.200
Well, the first thing in the file
is the metadata that says,

00:51:03.200 --> 00:51:05.720
"These are the tracks.

00:51:05.720 --> 00:51:05.990
This is the data.

00:51:05.990 --> 00:51:05.990
This is where it all is." And then the
data is nicely interleaved behind that.

00:51:06.220 --> 00:51:06.700
for time.

00:51:06.700 --> 00:51:08.700
So you don't have just the,
here's the audio, here's the video,

00:51:08.700 --> 00:51:09.370
here's the text.

00:51:09.480 --> 00:51:11.630
It's like,
here's the first few frames of audio and

00:51:11.630 --> 00:51:16.580
the first few thousand samples of video,
the first few thousand samples of audio,

00:51:16.580 --> 00:51:20.900
the first few lines of text,
and then we'll continue on like that.

00:51:21.080 --> 00:51:22.790
So the data itself is a hash.

00:51:22.820 --> 00:51:26.590
We've taken the whole library and put it
through a blender and sorted it by time.

00:51:26.720 --> 00:51:30.210
You've got to have that movie metadata
to make any sense of it at all.

00:51:30.260 --> 00:51:32.910
But if movie metadata is there,
then you can make sense of it

00:51:32.980 --> 00:51:34.630
perfectly from beginning to end.

00:51:35.360 --> 00:51:37.270
So a fast start movie,
the header is usually quick.

00:51:37.360 --> 00:51:38.340
The metadata is a few K.

00:51:38.340 --> 00:51:41.870
And the data itself can run
into the megabytes very easily.

00:51:41.880 --> 00:51:46.580
So you want to make sure that
the metadata is at the front.

00:51:46.580 --> 00:51:49.170
The movie atom is at the front
and the mdata is at the back.

00:51:49.230 --> 00:51:53.520
And if you open a file on the
same QuickTime player and you

00:51:53.520 --> 00:51:55.990
make a few edits and you save it,
but you don't save as self-contained,

00:51:55.990 --> 00:51:56.650
you just save it.

00:51:58.190 --> 00:51:59.920
it's going to try to
write the movie data back,

00:52:00.050 --> 00:52:01.980
the movie header information
back to that file.

00:52:02.020 --> 00:52:04.180
If it doesn't fit because
it's gotten bigger,

00:52:04.180 --> 00:52:07.260
it's not going to move the data
over because it's got byte offsets

00:52:07.390 --> 00:52:08.490
to all that data in the header.

00:52:08.540 --> 00:52:12.260
It's going to put the header at the end
of the file and mark that beginning.

00:52:12.260 --> 00:52:13.860
It says, well, this space is free now.

00:52:13.860 --> 00:52:17.970
And so you may find that if you pick up
a QuickTime movie that was working just

00:52:17.970 --> 00:52:20.790
fine and you edited it and saved it back,
and now people are saying,

00:52:20.790 --> 00:52:23.860
I go to your site and I see a big
blue queue that lasts for 15 minutes

00:52:23.950 --> 00:52:24.860
and then the movie starts playing.

00:52:25.740 --> 00:52:29.060
Oh, that's because the movie now
resources at the end of the file.

00:52:29.060 --> 00:52:31.850
It has to get through all this hash of
data before it finally gets to the part

00:52:31.850 --> 00:52:34.530
of the file that has the information it
needs to know what to do with the data.

00:52:36.340 --> 00:52:41.520
You can very easily look for this even
if you're not terribly sophisticated.

00:52:41.610 --> 00:52:43.660
If you have a hex editor or
a BBEdit used to do this,

00:52:43.660 --> 00:52:45.460
you just drag it in
and look at it and go,

00:52:45.570 --> 00:52:48.580
"Oh, free instead of move," and
then there's a bunch of garbage

00:52:48.580 --> 00:52:50.120
and then there's an MDAT.

00:52:50.120 --> 00:52:53.960
At the end of the file, "Oh, gosh,
here's my move, Adam." Okay.

00:52:53.960 --> 00:52:55.380
How do you prevent that?

00:52:55.380 --> 00:52:58.080
If you open a file in
QuickTime Player and edit it,

00:52:58.080 --> 00:52:59.370
don't save, save as.

00:52:59.370 --> 00:53:02.340
Create a new file, put the movie first,
data second,

00:53:02.340 --> 00:53:06.300
makes a nice new header for the data,
and everything works great.

00:53:07.340 --> 00:53:11.340
If you're working from the API level,
then you use flattenMovie and

00:53:11.340 --> 00:53:15.850
flattenMovieData to create these items,
and there are flags to make sure

00:53:16.060 --> 00:53:17.950
that the movie is stored first.

00:53:18.080 --> 00:53:19.110
But that's the default behavior.

00:53:19.110 --> 00:53:20.200
That's normally how it works now.

00:53:26.610 --> 00:53:32.360
This low-start movie is just a movie
that has the move Adam at the end.

00:53:32.360 --> 00:53:35.940
And you can make one if you want to,
but why would you want to?

00:53:38.520 --> 00:53:40.620
Okay,
is there anybody here who's programming

00:53:40.620 --> 00:53:42.150
at the API level with QuickTime?

00:53:42.150 --> 00:53:47.260
Okay, I'm going to skip this 10
because you don't care.

00:53:50.410 --> 00:53:52.330
Well, you might care in a way.

00:53:52.450 --> 00:53:58.610
If you do a Save As, create a new file,
and you say make it self-contained,

00:53:58.790 --> 00:53:59.520
That's going to do this.

00:53:59.580 --> 00:54:01.120
It's going to make the
movie self-contained,

00:54:01.190 --> 00:54:05.580
put the movie resource in the data fork,
which is the only fork

00:54:05.720 --> 00:54:09.680
that most systems have,
store the movie item before the data.

00:54:09.790 --> 00:54:11.080
It resolves all the references.

00:54:11.080 --> 00:54:14.210
So if you're looking at a JPEG image
over here and an IFF file there,

00:54:14.210 --> 00:54:15.690
it's going to pull them in.

00:54:15.690 --> 00:54:19.730
It's going to throw away any
data that you don't use and pull

00:54:19.730 --> 00:54:21.690
in any data that you do use.

00:54:21.710 --> 00:54:25.820
And if you use it six times,
it's going to make six copies.

00:54:25.820 --> 00:54:26.090
And it puts preloaded data up front.

00:54:27.130 --> 00:54:27.990
Okay.

00:54:27.990 --> 00:54:31.730
Now, what's different?

00:54:31.820 --> 00:54:33.940
Well,
if you're not programming with the API,

00:54:34.060 --> 00:54:36.340
do you really care about this?

00:54:36.690 --> 00:54:38.120
Yeah, a little bit.

00:54:38.240 --> 00:54:42.540
OK, reference movies are movies
that point to other movies,

00:54:42.550 --> 00:54:43.840
basically.

00:54:43.850 --> 00:54:46.020
And they have external sample data.

00:54:46.030 --> 00:54:48.740
The sample data is not
enclosed in the movie file.

00:54:48.750 --> 00:54:51.460
Now,
a true reference movie refers to one or

00:54:51.800 --> 00:54:53.830
typically a bunch of other movie files.

00:54:54.010 --> 00:54:56.330
If the user has a 56K modem,
send them this file.

00:54:56.420 --> 00:54:58.090
If they have a 128K modem,
send them this file.

00:54:58.170 --> 00:55:00.010
If they're on a T1, send them this file.

00:55:00.020 --> 00:55:01.310
If they're English, send them this file.

00:55:01.380 --> 00:55:02.840
If they're French, send them that file.

00:55:02.860 --> 00:55:06.580
If their screen resolution is 640x480,
send them this movie.

00:55:06.610 --> 00:55:10.270
It lists the things and the
conditions under which to send them.

00:55:10.350 --> 00:55:12.440
And it selects the movie
best suited to the viewer.

00:55:12.520 --> 00:55:13.700
These are pretty easy to construct.

00:55:13.710 --> 00:55:16.580
We'll talk about that in just a moment.

00:55:16.630 --> 00:55:18.940
There are also pointer movies,
like that little QTL file that

00:55:19.030 --> 00:55:20.720
just point to one other movie.

00:55:20.760 --> 00:55:22.570
It's not a reference
movie in the same sense.

00:55:22.750 --> 00:55:26.700
It's not a true reference movie,
but it is still an indirection.

00:55:26.730 --> 00:55:28.780
And there are movies that just
have external dependencies.

00:55:28.800 --> 00:55:32.720
I can open a bunch of JPEGs,
save the movie just as a movie,

00:55:32.730 --> 00:55:34.280
and it depends on those JPEGs.

00:55:34.430 --> 00:55:36.620
It's a complete movie resource,
it's structured like a

00:55:36.620 --> 00:55:40.260
QuickTime movie file,
but there's no mdatatm anywhere.

00:55:40.260 --> 00:55:42.830
It's pointing to external files.

00:55:44.500 --> 00:55:49.380
You don't care about this
if you're not programming.

00:55:49.380 --> 00:55:49.530
Okay.

00:55:49.530 --> 00:55:53.130
The way to build a true reference
movie is to import from XML.

00:55:53.190 --> 00:55:57.490
And currently there's a tool on
the web that you can download

00:55:57.650 --> 00:55:59.690
called XML to Ref Movie.

00:55:59.690 --> 00:55:59.690
And it's

00:56:00.070 --> 00:56:04.640
Hathi.net written by Peter Hathi,
one of the original QuickTime architects.

00:56:04.660 --> 00:56:06.570
And it's a neat little tool.

00:56:06.570 --> 00:56:10.500
It only runs on Mac OS but it will
turn your text into a reference movie.

00:56:10.530 --> 00:56:12.650
So you can give it a list,
the movies you want to play

00:56:12.650 --> 00:56:14.860
and conditions under which
you want to play them.

00:56:14.890 --> 00:56:17.470
And it will turn that into a
movie you can embed in a web page.

00:56:17.640 --> 00:56:20.220
When somebody loads that movie,
what they actually see

00:56:20.400 --> 00:56:23.220
depends on who they are,
what those conditions are,

00:56:23.220 --> 00:56:24.250
which ones are met.

00:56:24.270 --> 00:56:27.320
And it's a really powerful tool
that will let you send the right

00:56:27.320 --> 00:56:31.070
bandwidth movie to the right person.

00:56:31.090 --> 00:56:32.760
And it can do a lot of things.

00:56:32.790 --> 00:56:36.320
It has selectors not just for
connection speed but for CPU and OS.

00:56:36.320 --> 00:56:39.250
So you can say, well,
on Macintosh I want to send this

00:56:39.390 --> 00:56:40.600
file because it's got this text.

00:56:40.610 --> 00:56:43.130
If they've got Windows,
I want to send this movie because

00:56:43.140 --> 00:56:45.260
it's a different set of instructions.

00:56:45.260 --> 00:56:46.360
French people get this one.

00:56:46.380 --> 00:56:47.440
Germans get that one.

00:56:47.440 --> 00:56:51.120
Screen resolution, QuickTime version,
presence of a specific component.

00:56:51.200 --> 00:56:53.840
If they have Sorensen's Video 3,
I want to send them this movie.

00:56:53.940 --> 00:56:56.200
If they don't,
I want to send them that movie.

00:56:56.200 --> 00:56:57.170
Do they have the AugVorbis component?

00:56:57.300 --> 00:56:57.550
Do they have the Kodak?

00:56:57.550 --> 00:56:57.810
Great.

00:56:57.820 --> 00:56:58.740
They're going to hear this audio.

00:56:58.890 --> 00:57:02.520
If they don't, oh, okay,
we'll use sound design or IMA.

00:57:06.250 --> 00:57:08.240
The pointer movies are very simple.

00:57:08.240 --> 00:57:10.940
They're just files that
point to another movie,

00:57:10.940 --> 00:57:12.880
the XML movies we talked about.

00:57:12.890 --> 00:57:17.270
There are some tricks you can play.

00:57:17.270 --> 00:57:17.270
RTSP text,

00:57:17.940 --> 00:57:22.440
If I make a file that says RTSP text,
RTSP colon, and an address,

00:57:22.440 --> 00:57:26.500
and I save that file,
that little text file, as a move.mov,

00:57:26.500 --> 00:57:28.720
QuickTime will say, oh,
is it a movie file?

00:57:28.720 --> 00:57:31.500
Try to open it, look at it, go,
this is a funny-looking movie file.

00:57:31.500 --> 00:57:33.640
Oh,
but the first characters are RTSP text.

00:57:33.760 --> 00:57:35.310
I'll bet it's an RTSP address.

00:57:35.400 --> 00:57:37.600
And if it is,
it will resolve it and play the movie.

00:57:37.620 --> 00:57:40.260
So this is a really quick workaround.

00:57:40.260 --> 00:57:42.140
If you want to point people
to a stream from a script,

00:57:42.240 --> 00:57:47.690
your CGI can just generate, bang,
a one-line text file that has

00:57:47.720 --> 00:57:49.920
the RTSP address of the stream
you really want it to play,

00:57:49.920 --> 00:57:52.400
embed it as a movie file,
it's downloaded over HTTP,

00:57:52.400 --> 00:57:55.160
it looks like a movie,
it double-clicks from the desktop,

00:57:55.160 --> 00:57:57.640
everything just works,
but it's a line of text that

00:57:57.830 --> 00:57:59.160
points to the stream to get.

00:57:59.160 --> 00:58:00.780
So that's a nice thing.

00:58:22.390 --> 00:58:22.600
And a movie that contains
only a streaming track.

00:58:22.600 --> 00:58:22.600
If you open a live stream,
you've got sound, video,

00:58:22.600 --> 00:58:22.600
maybe a lot of things happening,
and you save it from QuickTime Player,

00:58:22.600 --> 00:58:22.600
what you actually save is the URL of
the thing you were looking at,

00:58:22.600 --> 00:58:22.600
and if it was video on demand,
where you were.

00:58:22.600 --> 00:58:22.600
If it's a live stream,
just how to get it.

00:58:22.600 --> 00:58:22.600
And again,
this is a little tiny text file.

00:58:22.600 --> 00:58:22.600
It's not a text file,
but it's a very small file.

00:58:24.890 --> 00:58:28.990
Movies with external dependencies
do contain a movie resource,

00:58:28.990 --> 00:58:31.790
but they may or may not
contain some of the data.

00:58:31.790 --> 00:58:34.990
If it's got external dependencies,
some of the data is external.

00:58:35.230 --> 00:58:37.720
There may be internal data as well.

00:58:37.850 --> 00:58:40.770
"A movie can have some of its data
internally and some externally.

00:58:40.850 --> 00:58:43.620
I can include everything
except the soundtrack and say,

00:58:43.630 --> 00:58:47.560
'Here's the video,' but the soundtrack
is going to be language dependent.

00:58:47.650 --> 00:58:51.220
So the soundtrack depends on
what--it's one of these files,

00:58:51.220 --> 00:58:55.420
depending on what language you're at,
or my text track is that way.

00:58:55.420 --> 00:58:57.730
But the main video goes to everybody.

00:58:57.800 --> 00:59:01.780
So the main video is self-contained,
and the audio will pick from

00:59:01.780 --> 00:59:03.520
one of these external files.

00:59:03.520 --> 00:59:03.520
And that way I don't have to
send all the audio to everybody."

00:59:04.260 --> 00:59:10.700
They contain data references,
which can be an alias, which is a file.

00:59:10.810 --> 00:59:12.760
This movie points to
data in another file,

00:59:12.860 --> 00:59:15.140
and it's in this directory,
or it's relative to --

00:59:15.180 --> 00:59:16.420
it's in my directory.

00:59:16.510 --> 00:59:23.970
It can point to a URL,
so the data is on this server.

00:59:23.970 --> 00:59:23.970
Go here and get it.

00:59:23.970 --> 00:59:23.970
It's not on a file.

00:59:23.970 --> 00:59:23.970
It's a URL.

00:59:24.160 --> 00:59:27.680
And you can create these pretty easily.

00:59:27.680 --> 00:59:34.250
If I open a movie and save as to
a new file but allow dependencies,

00:59:34.250 --> 00:59:37.430
then I have a URL that has a data alias.

00:59:37.650 --> 00:59:39.900
It points to this other file.

00:59:39.950 --> 00:59:42.740
If I get rid of that file the movie
no longer plays because it knows

00:59:42.740 --> 00:59:44.840
how to play it but there's no data.

00:59:44.840 --> 00:59:46.920
So sometimes you want to do that.

00:59:47.130 --> 00:59:48.260
Usually you don't.

00:59:48.260 --> 00:59:50.430
URL, data references, same things.

00:59:50.520 --> 00:59:51.620
And those are often very handy.

00:59:51.620 --> 00:59:54.530
If I go to QuickTime Player and
say open from URL or if I'm in

00:59:54.530 --> 01:00:00.700
the API and I say new movie from
DataRef and that DataRef is a URL,

01:00:00.740 --> 01:00:04.400
then I'm going to open a stream
or a file on a web server and

01:00:04.420 --> 01:00:08.710
I can save the movie resource,
just save allowing dependencies,

01:00:08.840 --> 01:00:11.120
and now I have URL data references.

01:00:11.120 --> 01:00:14.220
I've got all the information about
how to play the movie but the

01:00:14.220 --> 01:00:16.060
data I'm saying is on a server.

01:00:16.890 --> 01:00:19.650
Now, why in the world would
you want to do that?

01:00:19.780 --> 01:00:22.800
Well, you might want to copy-protect
your movie a little bit.

01:00:22.800 --> 01:00:27.880
I'm going to talk a little
bit about copy protection.

01:00:27.950 --> 01:00:30.580
Very little, I think.

01:00:30.580 --> 01:00:32.700
There are three main
modes for copy protection.

01:00:32.910 --> 01:00:37.290
The most important one is jujitsu.

01:00:37.290 --> 01:00:40.220
Don't try to copy-protect your movie.

01:00:40.220 --> 01:00:40.220
If we go back to the demo machine here,

01:00:41.070 --> 01:00:42.000
Oh, here's a reference movie.

01:00:42.070 --> 01:00:45.320
I really should have shown you this,
but I didn't mark the slide.

01:00:45.410 --> 01:00:47.880
This is a very simple reference movie.

01:00:47.920 --> 01:00:49.190
What speed is your Internet connection?

01:00:49.290 --> 01:00:50.980
And it could run any one of these movies.

01:00:50.980 --> 01:00:52.240
It says, "Oh, I'm here.

01:00:52.240 --> 01:00:54.880
If I change my Internet speed
and load this page again,

01:00:54.880 --> 01:00:58.690
I'll see a different movie."
So it's very simple how it operates,

01:00:58.690 --> 01:01:02.600
and it's a very small -- the
reference movie itself is very small.

01:01:02.690 --> 01:01:05.270
So you can have lots
of different versions,

01:01:05.270 --> 01:01:07.810
but you only download the one
that the user actually is going

01:01:07.810 --> 01:01:07.810
to see that you actually need.

01:01:27.190 --> 01:01:27.190
And let's look at what I call Jiu-Jitsu.

01:01:27.190 --> 01:01:27.190
Okay.

01:01:27.190 --> 01:01:27.190
This is a piece of graphics that
was given to us by Robert West,

01:01:27.190 --> 01:01:27.190
Janie Fitzgerald, and Michael Schaff
through their kindness.

01:01:27.190 --> 01:01:27.190
And I'll just load it here.

01:01:30.380 --> 01:01:33.260
And this is something QuickTime can do
that you won't see much of anyplace else,

01:01:33.470 --> 01:01:36.390
is it can make skinned movies.

01:01:36.540 --> 01:01:41.630
So rather than copy protect your movie,
put a skin on it that's your product,

01:01:41.640 --> 01:01:44.710
your company, your logo,
your look and feel.

01:01:45.130 --> 01:01:46.970
Every time somebody makes
a copy of that movie,

01:01:46.990 --> 01:01:48.370
they're advertising for you.

01:01:48.380 --> 01:01:53.850
You can put a click through here where
it clicks through to your website.

01:01:53.850 --> 01:01:53.850
And this can be anything.

01:01:53.850 --> 01:01:53.850
Now this is a

01:01:56.900 --> 01:01:58.900
Can we get the volume
up a little bit on this?

01:01:58.900 --> 01:02:01.900
There we go.

01:02:01.950 --> 01:02:04.020
This is a VR movie.

01:02:04.070 --> 01:02:11.810
It's got directional sound,
so I can look away from the

01:02:11.810 --> 01:02:11.810
noise and I can zoom in and go,
"Who's that guy?

01:02:11.810 --> 01:02:11.810
What's he doing there?"

01:02:14.200 --> 01:02:19.160
"If I go back and look
towards the... So this is a

01:02:19.160 --> 01:02:20.760
promo piece for their thing."

01:02:26.000 --> 01:02:27.790
But the point is that
if you copy their movie,

01:02:27.790 --> 01:02:30.050
you're also copying their player,
their logo,

01:02:30.060 --> 01:02:32.950
click through to their website,
and then you don't really have

01:02:33.030 --> 01:02:35.650
to worry about making -- I mean,
make it work for you.

01:02:35.760 --> 01:02:38.000
Has anybody here listened to Wilco?

01:02:38.490 --> 01:02:38.890
Okay.

01:02:39.020 --> 01:02:40.000
They're a band out of Chicago.

01:02:40.040 --> 01:02:43.480
They just released a number
13 on the Billboard charts.

01:02:43.480 --> 01:02:46.670
They put all their movie on the
Internet -- all their music on

01:02:46.670 --> 01:02:50.670
the Internet free for MP3 first,
and that's how they got popular.

01:02:50.770 --> 01:02:53.180
And everything on the
CD is on the Internet.

01:02:53.180 --> 01:02:53.900
Why would people buy it?

01:02:53.900 --> 01:02:53.900
Because it rocks.

01:02:54.810 --> 01:02:56.700
So here's a little full-screen button.

01:02:56.700 --> 01:02:59.260
Oh, that was a go-away button, sorry.

01:02:59.260 --> 01:03:02.630
Wrong button.

01:03:02.630 --> 01:03:02.630
Maybe this is a full-screen button.

01:03:03.260 --> 01:03:04.200
There we go.

01:03:04.590 --> 01:03:14.060
So this is an example of a wired
action going to full screen,

01:03:14.060 --> 01:03:15.290
which is kind of a cool thing,
although you lose a lot of

01:03:15.290 --> 01:03:15.290
the point of having a skin
because you don't have a window.

01:03:15.900 --> 01:03:21.400
You can go full-screen as a wired
action inside the movie itself.

01:03:21.680 --> 01:03:22.880
You really want to look
into this technology.

01:03:22.940 --> 01:03:24.310
This is the way you want
to package your movies.

01:03:24.390 --> 01:03:26.920
This is not like a media skin
for somebody else's player.

01:03:27.040 --> 01:03:29.010
Where they can put a skin on your movie.

01:03:29.110 --> 01:03:30.650
And now your movie is playing
with your competitor's

01:03:30.720 --> 01:03:32.550
advertisement running next to it.

01:03:32.680 --> 01:03:35.080
Or it's running in a leopard
skin thing with a funny hat.

01:03:35.230 --> 01:03:37.010
And you know, it just looks ridiculous.

01:03:37.120 --> 01:03:37.870
You make the player.

01:03:37.900 --> 01:03:39.040
You don't have to use Apple's player.

01:03:39.070 --> 01:03:40.180
This is a standard movie.

01:03:40.310 --> 01:03:42.690
This movie, you can put this on Windows.

01:03:42.840 --> 01:03:44.140
You can put it on Mac OS.

01:03:44.280 --> 01:03:45.290
Double click it from the desktop.

01:03:45.360 --> 01:03:47.770
It does the same thing in both platforms.

01:03:47.870 --> 01:03:50.000
And it's a really nice
way to do your stuff.

01:03:50.120 --> 01:03:52.800
So I really recommend you
look at that technology.

01:03:52.800 --> 01:03:54.970
Because it's not hard to do.

01:03:55.220 --> 01:03:57.760
And it really has big payoff.

01:03:57.790 --> 01:04:00.020
OK, back to slides.

01:04:00.150 --> 01:04:02.360
We also have some very
polite copy protection.

01:04:02.360 --> 01:04:05.180
You can set kiosk mode in your HTML.

01:04:05.300 --> 01:04:07.030
And that tells people that
you don't want to copy it.

01:04:07.130 --> 01:04:10.130
So if they have QuickTime Pro and
they want to select Save Movie,

01:04:10.130 --> 01:04:12.640
it says, no, that's grayed out.

01:04:12.650 --> 01:04:16.230
Now, can they turn kiosk mode
off and download it anyway?

01:04:16.370 --> 01:04:17.400
Yeah.

01:04:17.720 --> 01:04:19.860
So it just keeps out
people who are honest.

01:04:19.970 --> 01:04:21.930
It says, I don't want you to make
a copy of this movie.

01:04:22.010 --> 01:04:25.340
So if you had any doubt,
I'm just letting you know.

01:04:25.760 --> 01:04:30.410
And the other ways to copy-predict a
movie typically are based on the media.

01:04:30.520 --> 01:04:33.500
You have media keys,
some form of encryption.

01:04:33.670 --> 01:04:37.530
You can open a movie up in
QuickTime Player and disallow saving,

01:04:37.530 --> 01:04:40.910
and that will tell QuickTime in
a far more serious way that

01:04:41.010 --> 01:04:42.590
it won't save the movie.

01:04:42.590 --> 01:04:45.350
You can't just change
HTML and make it save it.

01:04:45.490 --> 01:04:46.740
It's hard to break.

01:04:46.750 --> 01:04:50.720
All these kinds of copy protection
are subject to being broken.

01:04:50.720 --> 01:04:54.880
None of them are reliable or foolproof,
but sometimes they're valuable.

01:04:55.670 --> 01:04:59.640
We're not really doing copy
protection in QuickTime yet.

01:04:59.640 --> 01:05:01.610
We're just kind of at the
beginning stages of deciding

01:05:01.610 --> 01:05:03.010
what's the right thing to do.

01:05:03.040 --> 01:05:05.960
However,
there is a form of copy protecting

01:05:06.020 --> 01:05:09.500
movie files that is used a lot,
and they're not encrypted.

01:05:09.620 --> 01:05:12.320
They're just technically
difficult to get at,

01:05:12.470 --> 01:05:14.250
and the best example of
that is streaming movies.

01:05:14.260 --> 01:05:16.460
It's hard to copy a movie from a stream.

01:05:16.500 --> 01:05:17.600
They're not encrypted.

01:05:17.600 --> 01:05:20.820
Anyone who programs in
the QuickTime interface,

01:05:20.820 --> 01:05:23.990
anyone who works at the
API level can just go through,

01:05:24.100 --> 01:05:26.770
read the spec, write the code,
and recreate the movie,

01:05:26.800 --> 01:05:28.500
pick up the stream off the web,
and make the movie.

01:05:28.540 --> 01:05:31.600
But you can't drag it
from the browser cache.

01:05:31.660 --> 01:05:34.360
You can't just do a get and
get it from the file server.

01:05:34.360 --> 01:05:37.510
You have to go through some work,
and it's just too complicated

01:05:37.520 --> 01:05:41.260
for somewhere between 99.9
and 99.99% of the population,

01:05:41.320 --> 01:05:44.700
and that's most of what
you're concerned about.

01:05:44.700 --> 01:05:47.160
It's no challenge for a hacker.

01:05:47.160 --> 01:05:48.330
There's no encryption to break.

01:05:48.490 --> 01:05:51.880
It's just a lot of tedious work and
very little payoff because you have to

01:05:51.920 --> 01:05:52.860
go through it again for the next movie.

01:05:52.940 --> 01:05:56.140
So, um,

01:05:56.260 --> 01:05:59.930
A lot of people use streaming because
they want to copy protect their movies.

01:05:59.960 --> 01:06:01.720
And they say, gee,
I'd like to use Fast Start.

01:06:01.740 --> 01:06:02.580
It's better quality.

01:06:02.580 --> 01:06:03.180
It looks sharper.

01:06:03.180 --> 01:06:06.240
I can deliver a movie that has higher
bandwidth than the user's connection.

01:06:06.240 --> 01:06:09.300
But I really don't want them to
just drag copies from the browser.

01:06:09.380 --> 01:06:12.040
I want them to have to come to
my server to get it each time.

01:06:12.080 --> 01:06:13.380
So they use streams.

01:06:13.380 --> 01:06:14.530
And sometimes that's great.

01:06:14.540 --> 01:06:16.330
And sometimes it's not what you want.

01:06:16.340 --> 01:06:19.490
So is there a way to make
Fast Start movies roughly

01:06:20.020 --> 01:06:21.820
as secure as streaming?

01:06:21.820 --> 01:06:23.210
And yeah, there is.

01:06:23.280 --> 01:06:25.780
And again, this isn't copy protection.

01:06:25.900 --> 01:06:28.270
It's just making it reasonably safe.

01:06:28.320 --> 01:06:29.700
We call it the box of rocks defense.

01:06:29.700 --> 01:06:32.610
And what we do is we put URL data
references in the movie file.

01:06:32.620 --> 01:06:35.780
So you open a movie and it
says the data is on the server.

01:06:35.780 --> 01:06:38.180
And there's nothing, you know,
it's not copy protected.

01:06:38.260 --> 01:06:39.730
It's just my data is on the server.

01:06:39.740 --> 01:06:40.390
And here's where it is.

01:06:40.500 --> 01:06:43.460
You can compress the movie
header so that's not visible.

01:06:43.460 --> 01:06:44.600
But they can get it anyway.

01:06:44.600 --> 01:06:48.550
But the point is the external data
on the server is not in a movie file.

01:06:49.780 --> 01:06:52.000
So if they download it,
it doesn't have that

01:06:52.050 --> 01:06:52.990
movie header information.

01:06:53.000 --> 01:06:55.140
It's that shredded
version of the library.

01:06:55.140 --> 01:06:57.740
You know, we've got a video frame
and some audio samples.

01:06:57.740 --> 01:06:59.680
And it doesn't say, here's the video,
here's the audio.

01:06:59.680 --> 01:07:01.300
It's just there in a big mess.

01:07:01.400 --> 01:07:04.900
And unsorting it is very
painful without the header.

01:07:04.900 --> 01:07:10.760
So now, again,
anybody who is a QuickTime programmer

01:07:10.760 --> 01:07:13.800
can de-scramble it,
but that's not that many people.

01:07:13.800 --> 01:07:17.240
And what happens is you embed
the movie in your web page,

01:07:17.340 --> 01:07:19.100
and it depends on its data on a server.

01:07:19.830 --> 01:07:22.500
So if the user says, oh,
I've got this movie now,

01:07:22.500 --> 01:07:24.370
and they play it again,
it just goes to the

01:07:24.370 --> 01:07:25.440
server again for the data.

01:07:25.460 --> 01:07:26.920
So that's fine.

01:07:26.920 --> 01:07:28.670
If you don't want them to
have access to your server,

01:07:28.670 --> 01:07:29.270
you can deny it.

01:07:29.470 --> 01:07:30.820
You can take the movie off the server.

01:07:30.820 --> 01:07:31.550
You can change it.

01:07:31.870 --> 01:07:33.040
You have control.

01:07:33.040 --> 01:07:33.660
It's your movie.

01:07:33.660 --> 01:07:36.070
They have to come to your
server every time they want it.

01:07:36.140 --> 01:07:40.560
And, yeah, they can copy the data too,
but it's not a playable movie,

01:07:40.560 --> 01:07:42.860
and the movie won't play it.

01:07:42.980 --> 01:07:43.900
It goes to the server.

01:07:43.920 --> 01:07:45.360
It's got URL data references.

01:07:45.360 --> 01:07:47.890
So this works.

01:07:48.070 --> 01:07:49.540
We've put a bunch of
movies up on the web.

01:07:49.640 --> 01:07:51.150
This way, it's fine.

01:07:51.160 --> 01:07:54.280
The right way to do this
is using the QuickTime API,

01:07:54.280 --> 01:07:56.820
and I'm going to go through
this even though there aren't

01:07:56.910 --> 01:07:58.650
many API programmers in here,
which is what I thought

01:07:58.970 --> 01:07:59.980
I was talking to today.

01:07:59.980 --> 01:08:02.530
Sorry if my presentation
was a little skewed.

01:08:02.560 --> 01:08:06.020
You open your movie,
flatten the movie data to a data file.

01:08:06.020 --> 01:08:08.640
Don't set the flatten
add movie to data fork.

01:08:10.030 --> 01:08:12.140
And what that says is it says,
save the data to a file,

01:08:12.140 --> 01:08:13.470
don't add the movie resource.

01:08:13.480 --> 01:08:18.050
And this will return a new movie data
structure pointing to this new file.

01:08:18.060 --> 01:08:21.380
Set the media data reference to URL.

01:08:21.380 --> 01:08:24.900
The user will give you a URL and say,
this is where I want to put.

01:08:24.980 --> 01:08:27.170
I'm talking about writing an
application here where somebody

01:08:27.170 --> 01:08:28.340
is going to give you a movie.

01:08:28.340 --> 01:08:31.180
You're going to bring it into your
application and create a data file to put

01:08:31.180 --> 01:08:33.080
on a server and a movie file to embed.

01:08:33.080 --> 01:08:35.500
This is how you go about it.

01:08:36.200 --> 01:08:37.120
You create the data file.

01:08:37.120 --> 01:08:40.330
You create the movie file by iterating
through the tracks in the movie and

01:08:40.330 --> 01:08:43.490
the data refs in the tracks and doing
a set media data ref to the URL where

01:08:43.490 --> 01:08:45.060
the user says he's going to put it.

01:08:45.160 --> 01:08:48.470
Save the new movie using
these API elements.

01:08:48.700 --> 01:08:49.820
Create movie file.

01:08:49.820 --> 01:08:50.640
Add movie resource.

01:08:50.640 --> 01:08:51.540
Close movie file.

01:08:51.540 --> 01:08:54.570
Now you've got a movie file
that just has the resource.

01:08:54.600 --> 01:08:57.110
You upload the DAT file to the
server and you're ready to go.

01:08:57.140 --> 01:08:59.900
And that's the right way to do it.

01:09:00.140 --> 01:09:03.530
Now for people who are here in this room,
there's a quick and dirty way to do it.

01:09:03.660 --> 01:09:05.340
I don't recommend this.

01:09:05.430 --> 01:09:06.080
This will void the warnings.

01:09:06.100 --> 01:09:08.010
on your movie.

01:09:08.220 --> 01:09:10.920
I'm joking but I'm not.

01:09:11.030 --> 01:09:13.950
If you make a QuickTime movie ten
years ago and you play it today,

01:09:13.950 --> 01:09:16.200
it's going to play almost in every case.

01:09:16.200 --> 01:09:19.180
But there are things you can do to
hack up the movie file that are not

01:09:19.460 --> 01:09:21.200
guaranteed to work in the future.

01:09:21.200 --> 01:09:23.340
They work now,
but they might not work with QuickTime 6,

01:09:23.470 --> 01:09:24.500
7, 8, 9, 10.

01:09:24.500 --> 01:09:28.910
So bear that in mind if you're going to
do this that this is not the right way.

01:09:29.040 --> 01:09:30.890
But it's a way to test
it and see if it works.

01:09:31.100 --> 01:09:33.800
And then if it works,
if you are a C programmer or you

01:09:33.920 --> 01:09:36.780
know a C programmer or you can hire
a C programmer or you have a box of

01:09:36.780 --> 01:09:39.170
jelly donuts with which to entice
a C programmer to work for you,

01:09:39.480 --> 01:09:41.200
you can get them to write.

01:09:41.330 --> 01:09:44.790
It shouldn't take all day to write
this application that I just described.

01:09:44.790 --> 01:09:47.500
It might take all day,
but it shouldn't take too long.

01:09:47.540 --> 01:09:52.100
So what you do if you want to just
try this out is copy your movie,

01:09:52.360 --> 01:09:54.020
copy it to a DAT file.

01:09:54.020 --> 01:09:55.220
And what is that?

01:09:55.290 --> 01:09:57.840
I'm just saying copy it and
give it a DAT file extension.

01:09:57.840 --> 01:10:00.750
So that the server knows,
everybody knows this is not a movie.

01:10:00.750 --> 01:10:03.040
Don't try to open this
with QuickTime Player.

01:10:03.040 --> 01:10:03.900
It's just some data.

01:10:03.900 --> 01:10:05.460
And upload it to your server.

01:10:05.460 --> 01:10:08.010
So your server says this
is not a QuickTime Movie.

01:10:08.090 --> 01:10:08.820
It's a data file.

01:10:09.000 --> 01:10:10.380
I don't know what's in it.

01:10:10.380 --> 01:10:11.650
It's just binary data.

01:10:11.720 --> 01:10:14.370
Then do an open URL in QuickTime Player.

01:10:14.370 --> 01:10:15.700
Open that movie up.

01:10:15.780 --> 01:10:18.380
So you rename the movie .dat,
put it on a server,

01:10:18.380 --> 01:10:19.920
open it in QuickTime Player.

01:10:19.960 --> 01:10:22.620
Save, allowing dependencies.

01:10:22.620 --> 01:10:24.880
Now you've got a little movie
on your desk that points

01:10:25.000 --> 01:10:26.220
to the data on the server.

01:10:26.700 --> 01:10:28.420
That's great,
except the data on the server

01:10:28.430 --> 01:10:29.600
is also a playable movie.

01:10:29.600 --> 01:10:31.700
So if somebody downloads it,
they can play it.

01:10:31.700 --> 01:10:33.100
So you make it unplayable.

01:10:33.200 --> 01:10:33.860
How do you do that?

01:10:33.970 --> 01:10:36.260
Well, you void your warranty.

01:10:36.260 --> 01:10:39.220
If it's a slow start movie,
you delete the movie file from the end.

01:10:39.250 --> 01:10:41.400
If it's a fast start movie,
you zero out the movie at the start.

01:10:41.400 --> 01:10:43.240
Just overwrite it with zeros.

01:10:43.240 --> 01:10:47.390
Do not change the byte
offsets in the file.

01:10:48.040 --> 01:10:52.760
The movie resource is pointing to exact
specific points in the file to say this

01:10:52.900 --> 01:10:54.720
video frame starts here and ends here.

01:10:54.720 --> 01:10:56.640
This audio sample starts
here and ends here.

01:10:56.780 --> 01:11:02.430
If you add a byte or subtract a byte from
this file before the movie data atom,

01:11:03.410 --> 01:11:07.290
everything is wrong and it will do bad,
bad, bad, bad things.

01:11:07.290 --> 01:11:09.160
It may even crash QuickTime.

01:11:09.330 --> 01:11:12.800
We try not to let that happen
but if you do stuff like this,

01:11:12.800 --> 01:11:14.310
you know, all bets are off.

01:11:14.370 --> 01:11:16.630
So be very,
very careful if you do this but

01:11:16.650 --> 01:11:18.230
you can check it out and see it.

01:11:18.240 --> 01:11:22.430
And I've done it at 3:00 in the
morning at need and it does work.

01:11:22.700 --> 01:11:23.500
Any questions about that?

01:11:23.550 --> 01:11:25.600
Hey, we're rocking.

01:11:25.600 --> 01:11:26.920
You're all asleep.

01:11:26.950 --> 01:11:28.810
We're running out of time here.

01:11:29.400 --> 01:11:32.000
Gee, not many scripters here.

01:11:32.350 --> 01:11:40.900
You can use a number of ways to
create movies on the fly for your

01:11:40.900 --> 01:11:40.900
users by combining resources.

01:11:41.250 --> 01:11:43.200
One of them is Smile,
and I'm not going to go

01:11:43.200 --> 01:11:44.880
into it in any detail,
but it's a very simple

01:11:44.950 --> 01:11:45.960
text-oriented language.

01:11:45.960 --> 01:11:49.170
It says what movies to present in
what order and where on the screen,

01:11:49.340 --> 01:11:51.340
and you can just generate a text file.

01:11:51.340 --> 01:11:54.460
There's a pretty popular website
that does this where the user

01:11:54.540 --> 01:11:56.580
selects what movies he wants to see.

01:11:56.580 --> 01:12:00.480
Then it just builds a text file on
the fly that says it's a Smile file.

01:12:00.480 --> 01:12:03.760
Play this video, play this video,
play this video, play this video,

01:12:03.760 --> 01:12:05.070
and it just runs through.

01:12:05.080 --> 01:12:06.480
And you can do it in full screen mode.

01:12:06.480 --> 01:12:07.600
You can do a lot of neat stuff with it.

01:12:08.100 --> 01:12:10.650
Check it out if you are into scripting.

01:12:10.720 --> 01:12:14.020
And you can create this on the fly
in response to a submitted form the

01:12:14.180 --> 01:12:17.210
user's filled out or a cookie in
their browser or some wired action

01:12:17.210 --> 01:12:18.940
that they've given in another movie.

01:12:18.940 --> 01:12:21.670
Or you can just generate a movie
of the day this way that your

01:12:21.670 --> 01:12:23.400
HTML pages don't have to change.

01:12:23.530 --> 01:12:26.250
They play the movie of the day,
which is a little text file that

01:12:26.250 --> 01:12:28.020
your script spits out periodically.

01:12:30.860 --> 01:12:31.560
Or okay.

01:12:31.620 --> 01:12:35.310
Okay,
here's just a really simple example.

01:12:35.600 --> 01:12:37.380
Let's say you've got a database.

01:12:37.380 --> 01:12:40.450
You've got MP3s,
you've got rock videos for some of them,

01:12:40.450 --> 01:12:42.600
you've got an item,
which is the CD that it

01:12:42.700 --> 01:12:45.270
comes from that you can buy,
and you've got some artwork.

01:12:45.270 --> 01:12:47.460
So the user selects a
list -- a song list,

01:12:47.460 --> 01:12:51.650
and your CGI says, okay,
create a sequence of parallel elements.

01:12:51.710 --> 01:12:53.870
And the parallel elements
will be the MP3 audio,

01:12:53.870 --> 01:12:56.260
which I'm going to play,
the video if I've got it or

01:12:56.260 --> 01:12:58.960
the CD artwork if I don't,
to display while it plays,

01:12:59.110 --> 01:13:00.180
and an href to the CD.

01:13:00.290 --> 01:13:03.050
So if the user clicks on it,
that's where they go.

01:13:03.050 --> 01:13:03.050
Okay.

01:13:07.500 --> 01:13:12.700
running out of time,
so thank you all for coming.

01:13:12.700 --> 01:13:17.470
It was more fun stuff to do,
but we just ran out of time.

01:13:17.470 --> 01:13:20.510
The QuickTime Roadmap,
all these things have passed

01:13:20.510 --> 01:13:23.820
except QuickTime and MPEG-4,
which is this room in 330.

01:13:23.820 --> 01:13:24.600
Any second now.

01:13:24.600 --> 01:13:25.320
Who to talk to?

01:13:25.320 --> 01:13:26.900
Me, I'm the guy to blame.

01:13:26.900 --> 01:13:30.230
Eric Carlson,
if you have a specific question about

01:13:30.230 --> 01:13:32.880
the QuickTime plugin or ActiveX control.

01:13:32.940 --> 01:13:35.980
Book QuickTime for the Web,
QuickTime developer documentation,

01:13:35.980 --> 01:13:37.990
tutorials, sample code and tools.

01:13:38.020 --> 01:13:41.580
Even if you're not a developer,
go to that page and check it out.

01:13:41.580 --> 01:13:43.230
There's tools like Plugin Helper.

01:13:43.330 --> 01:13:47.220
There's a lot of neat stuff that you
can use there that are very helpful.

01:13:47.220 --> 01:13:51.570
Good places to go, Codex Central,
Blue Abuse, and the QuickTime talk

01:13:51.570 --> 01:13:54.660
and API mailing lists,
both at list.apple.com.

01:13:57.230 --> 01:14:00.180
And if you're running OS X Help,
you can get the QuickTime TechPubs

01:14:00.340 --> 01:14:02.210
stuff out of your Help Center.

01:14:02.290 --> 01:14:05.380
Just go to Help, Help Center, Developer,
QT.

01:14:05.440 --> 01:14:09.510
Virtually all the documentation
that's on the web is on the

01:14:09.510 --> 01:14:09.510
CDs that you got with Jaguar.

01:14:09.700 --> 01:14:28.300
[Transcript missing]