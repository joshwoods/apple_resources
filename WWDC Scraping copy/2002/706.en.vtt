WEBVTT

00:00:12.960 --> 00:00:16.660
Our next session this afternoon
is Direct to Java Client.

00:00:16.740 --> 00:00:20.630
I wanted to make a quick comment
before we actually started the session.

00:00:20.630 --> 00:00:23.570
For those of you who are at the
State of the Union and we showed

00:00:23.570 --> 00:00:26.790
a two-tier Java Client demo,
I wanted to make sure that

00:00:26.790 --> 00:00:29.970
you guys did catch the part
that that was a two-tier demo,

00:00:29.970 --> 00:00:31.340
not a three-tier demo.

00:00:31.470 --> 00:00:34.970
And I've asked Andreas to come
back in the session following

00:00:34.970 --> 00:00:38.490
this one to talk a little bit
more about two-tier Java Client.

00:00:38.490 --> 00:00:40.690
You won't be hearing a lot
about that in this session,

00:00:40.690 --> 00:00:42.310
but you will in the next session.

00:00:42.460 --> 00:00:45.640
And if he has time,
he will also rerun that demo for you.

00:00:45.700 --> 00:00:46.940
Okay?

00:00:46.950 --> 00:00:50.910
So I'd like to introduce Ernest Kim,
who is your presenter for

00:00:50.950 --> 00:00:52.080
Direct to Java Client.

00:00:52.180 --> 00:00:53.600
Thank you.

00:00:55.800 --> 00:00:56.800
Thanks, Tony.

00:00:56.800 --> 00:01:00.340
Thanks, Tony.

00:01:00.340 --> 00:01:03.840
So welcome to session 706
on Direct to Java Client.

00:01:03.960 --> 00:01:06.060
My name is Ernest Kim,
and I'm a member of the

00:01:06.060 --> 00:01:08.080
WebObjects rapid development team.

00:01:08.140 --> 00:01:12.230
So if you attended the State of
the Union of Java and Apple,

00:01:12.320 --> 00:01:17.970
what you found is that my boss's
boss's boss's friend is James Gosling.

00:01:17.980 --> 00:01:21.220
So obviously he and I are very close.

00:01:21.220 --> 00:01:24.940
So rapid development is really,
really fun team to work in in

00:01:24.940 --> 00:01:29.340
WebObjects because they work on
things like Direct to Java Client

00:01:29.340 --> 00:01:31.410
and Direct to Web Services,
which if you were here

00:01:31.470 --> 00:01:34.690
for the previous session,
you saw an interesting demo of.

00:01:34.760 --> 00:01:38.960
And it's my pleasure to talk to you
today about Direct to Java Client.

00:01:38.960 --> 00:01:43.030
But before I do, what is Java Client?

00:01:48.630 --> 00:01:50.840
Java Client is a great technology.

00:01:51.050 --> 00:01:54.160
Now, many of you are probably
familiar with WebObjects already,

00:01:54.260 --> 00:01:57.130
knowing that WebObjects is a
great technology for developing

00:01:57.810 --> 00:02:00.820
three-tier HTML-based applications.

00:02:00.930 --> 00:02:04.830
Well, it turns out that WebObjects
also has a great technology for

00:02:04.910 --> 00:02:08.840
developing desktop applications,
Java Client.

00:02:08.940 --> 00:02:13.620
So Java Client is a technology for
creating distributed three-tier

00:02:13.870 --> 00:02:15.960
applications for the desktop.

00:02:16.100 --> 00:02:20.520
When we say three-tier applications,
we mean that at the bottom there

00:02:20.520 --> 00:02:23.340
is a database that stores the data.

00:02:23.430 --> 00:02:27.200
At the top, there is a client that
displays the user interface.

00:02:27.320 --> 00:02:30.190
And in between,
there's the application server,

00:02:30.220 --> 00:02:34.700
which accesses the database and
controls exactly what the client can do.

00:02:34.730 --> 00:02:38.880
The interesting thing about Java Client
is that all three tiers use a

00:02:38.880 --> 00:02:43.110
common protocol for communication,
HTTP.

00:02:43.230 --> 00:02:45.940
And the clients are
implemented in pure Java,

00:02:46.020 --> 00:02:47.310
so this means swing.

00:02:47.520 --> 00:02:52.490
The great thing about Java is that it
is reliable and platform-independent.

00:02:52.630 --> 00:02:55.980
A nice thing about Java Client
is that it has been designed

00:02:55.990 --> 00:02:57.880
with localization in mind.

00:02:58.010 --> 00:03:01.890
So it is very easy to localize
your Java Client applications.

00:03:02.020 --> 00:03:05.280
One thing to bear in mind, however,
is that Java Client is intended

00:03:05.280 --> 00:03:09.320
for use in an intranet and not
for high traffic intranet sites.

00:03:09.430 --> 00:03:11.880
The reason is that a client
is fairly heavyweight.

00:03:12.020 --> 00:03:15.730
It is larger than three megabytes,
and it may take a long time for a

00:03:15.730 --> 00:03:19.660
customer with a very slow connection
to download the entire client.

00:03:19.790 --> 00:03:25.490
So now that we know what Java Client is,
let's talk about Direct to Java Client.

00:03:29.380 --> 00:03:32.910
Direct to Java Client is an
infrastructure that helps you to

00:03:32.910 --> 00:03:34.540
create applications really quickly.

00:03:34.540 --> 00:03:38.740
Perhaps the defining characteristic
of Direct to Java Client is that it

00:03:38.740 --> 00:03:40.530
generates the user interface dynamically.

00:03:40.560 --> 00:03:44.480
A key strength of Direct to
Java Client is that it provides a

00:03:44.480 --> 00:03:47.360
great deal of built-in functionality.

00:03:47.360 --> 00:03:50.530
So this relieves you from the
burden of having to create the

00:03:50.530 --> 00:03:52.430
entire user interface by hand.

00:03:53.720 --> 00:03:57.470
Because Direct to Java Client
creates an application dynamically

00:03:57.480 --> 00:04:01.320
in such a short amount of time,
it is ideal for prototyping purposes.

00:04:03.230 --> 00:04:07.200
Now we understand that the default
application that Direct to Java Client

00:04:07.330 --> 00:04:11.780
creates for you may not support exactly
the kind of user interface that you want.

00:04:11.990 --> 00:04:13.780
Fortunately,
there exists a number of powerful

00:04:13.850 --> 00:04:17.640
customization techniques so that
you can create precisely the kind

00:04:17.640 --> 00:04:20.540
of user interface that you want.

00:04:20.640 --> 00:04:23.320
So that is Direct to Java Client.

00:04:26.990 --> 00:04:28.230
So what will you learn today?

00:04:28.410 --> 00:04:31.230
Well, I hope that by the end
of today's session,

00:04:31.230 --> 00:04:33.990
you'll see exactly what the
default applications offer you,

00:04:34.000 --> 00:04:35.150
which is actually a lot.

00:04:35.370 --> 00:04:38.350
You'll see why you should
use Direct to Java Client.

00:04:38.490 --> 00:04:41.700
You'll learn how to customize
default applications.

00:04:41.740 --> 00:04:43.760
And finally,
because it is such a hot topic

00:04:43.760 --> 00:04:46.900
and probably the real reason
people are attending developer

00:04:46.900 --> 00:04:50.270
conferences these days,
how to leverage the power of web

00:04:50.280 --> 00:04:52.320
services in your application.

00:04:52.320 --> 00:04:56.020
So before I go into that,
how about a quick demonstration

00:04:56.020 --> 00:04:59.480
of exactly what Direct to
Java Client is all about?

00:04:59.540 --> 00:05:02.970
And here to help me with that is
Brent Shank of Technical Publications.

00:05:03.370 --> 00:05:03.890
Thanks, Ernest.

00:05:08.530 --> 00:05:12.060
All right, I'm going to present a short
demo here for the first one.

00:05:12.060 --> 00:05:14.760
This is similar to what
Andreas presented in the tools

00:05:14.760 --> 00:05:16.400
overview earlier in the week.

00:05:16.530 --> 00:05:20.280
So simply based on an EO model file,
I'm going to generate a three-tier

00:05:20.280 --> 00:05:23.450
swing application that accesses
a data store on the back end.

00:05:23.450 --> 00:05:26.200
So here we are in EO model,
showing you the real estate model

00:05:26.200 --> 00:05:29.260
that we've been using all week
for web objects applications.

00:05:29.780 --> 00:05:34.060
So in Project Builder,
I'm simply going to make a new

00:05:34.060 --> 00:05:38.730
Direct to Java Client application.

00:05:38.730 --> 00:05:38.730
And in the Project Builder

00:05:39.150 --> 00:05:41.740
Assistant,
I am mostly just going to select

00:05:41.800 --> 00:05:43.600
the defaults that it gives to me.

00:05:43.650 --> 00:05:45.440
And if you want to really
know what these are all about,

00:05:45.440 --> 00:05:49.250
there's a good book on Java Client
that we'll tell you about later

00:05:49.440 --> 00:05:51.070
describing these in depth.

00:05:51.190 --> 00:05:57.400
I am going to add the EO model that
you just saw in the background there.

00:05:58.990 --> 00:06:01.080
Select some other options here.

00:06:01.080 --> 00:06:02.860
You see this Web Start pane here.

00:06:02.950 --> 00:06:08.540
This helps us configure the
Web Start JNLP file that we will

00:06:08.650 --> 00:06:13.490
use to deploy this application.

00:06:13.690 --> 00:06:16.800
Okay,
so Project Builder is going to build and

00:06:16.800 --> 00:06:20.160
run the client and server applications.

00:06:20.160 --> 00:06:23.290
And what it's doing right now
is compiling all our source

00:06:23.410 --> 00:06:25.890
files and aggregating all the
frameworks and things like that.

00:06:25.990 --> 00:06:30.440
And in a second, it's going to analyze
the EO model right here.

00:06:30.550 --> 00:06:34.470
And based on a sophisticated
set of rules in the rule system,

00:06:34.470 --> 00:06:37.740
it's going to create for
us a swing application.

00:06:37.880 --> 00:06:39.770
So here it is.

00:06:40.130 --> 00:06:43.930
So now you'll notice that this is
a fully functional application.

00:06:43.990 --> 00:06:46.200
I can search for data.

00:06:46.720 --> 00:06:50.020
I can open records that I find.

00:06:50.020 --> 00:06:51.030
Here's a record.

00:06:51.240 --> 00:06:54.180
I can make changes that I want.

00:06:55.290 --> 00:06:56.470
Commit things back to the data store.

00:06:56.590 --> 00:06:57.300
So there we are.

00:06:57.300 --> 00:07:00.890
Without writing any code,
we have a great swing application.

00:07:04.430 --> 00:07:05.400
Thanks, Brent.

00:07:05.400 --> 00:07:11.000
We'll try to make the next demo a
little more challenging for you.

00:07:11.000 --> 00:07:14.900
So now that you have seen a little bit
of what Direct to Java Client offers you,

00:07:15.000 --> 00:07:19.400
let's take a look at the colorful
technology that makes this all possible.

00:07:19.400 --> 00:07:22.880
The most important thing to take
away from this diagram is that you

00:07:22.960 --> 00:07:27.760
have the same control layer on both
sides of the client server divide.

00:07:27.760 --> 00:07:30.490
So what this means is that
your business logic lives on

00:07:30.490 --> 00:07:32.900
both the client and the server.

00:07:32.930 --> 00:07:37.370
The next important thing to take away
is that there's a key difference between

00:07:37.510 --> 00:07:42.090
the ways that a client and a server
accesses the tier that's underneath it.

00:07:42.510 --> 00:07:45.260
On the server side,
there's the access layer and the

00:07:45.260 --> 00:07:49.290
various enterprise objects adapters
for handling communication between

00:07:49.320 --> 00:07:51.440
the server and the database.

00:07:51.530 --> 00:07:54.660
On the client side, however,
there's the distribution layer.

00:07:54.780 --> 00:07:59.500
It handles the communication
between the client and the server.

00:07:59.600 --> 00:08:02.810
The final important thing to
take away from this diagram

00:08:10.200 --> 00:08:15.260
is that a web ob... a j- a JavaClient
application is a WebObjects

00:08:15.260 --> 00:08:19.980
application with the addition
of a rules system on the server side.

00:08:20.110 --> 00:08:22.620
The rules system is what
actually generates a description

00:08:22.690 --> 00:08:23.880
of the user interface.

00:08:23.880 --> 00:08:29.730
And a JavaClient client becomes a
direct-to-JavaClient client with the

00:08:29.730 --> 00:08:31.240
addition of the generation layer.

00:08:31.240 --> 00:08:34.180
This is what actually will build
a hierarchy of controllers.

00:08:34.180 --> 00:08:37.930
I will talk about this in
more detail soon enough.

00:08:38.580 --> 00:08:42.260
But now that you have an eagle-eyes
view of the application architecture,

00:08:42.260 --> 00:08:46.200
let's talk about some of the
core concepts in creating

00:08:46.200 --> 00:08:48.140
a JavaClient application.

00:08:48.140 --> 00:08:52.020
Well, there are several kinds
of display objects.

00:08:52.020 --> 00:08:55.690
There are display groups that coordinate
the flow between the user interface

00:08:55.730 --> 00:08:57.440
objects and the editing contexts.

00:08:57.440 --> 00:09:01.400
There are associations,
which will actually synchronize

00:09:01.410 --> 00:09:05.380
values between the user interface
objects and the business objects.

00:09:05.380 --> 00:09:09.150
And finally, there are aspects,
which simply... to simply define

00:09:09.150 --> 00:09:12.110
various parameters of display objects.

00:09:12.420 --> 00:09:14.740
And having seen these,
I would now like to introduce the

00:09:14.810 --> 00:09:19.880
heart and soul of Java Client,
which are the controllers.

00:09:21.120 --> 00:09:24.720
The controllers are what actually
implement the client functionality.

00:09:24.810 --> 00:09:28.950
You can consider controllers to
be the glue between user interface

00:09:28.950 --> 00:09:31.500
objects and the business logic.

00:09:31.600 --> 00:09:34.910
Now, controllers do much
more than associations,

00:09:34.910 --> 00:09:39.360
which simply listen for events
and send values back and forth.

00:09:39.470 --> 00:09:41.650
Controllers are very responsible objects.

00:09:41.760 --> 00:09:46.190
They actually carry the knowledge
of how to create and layout the

00:09:46.190 --> 00:09:50.500
various user interface objects,
such as display groups.

00:09:50.780 --> 00:09:54.400
Based on the underlying enterprise
object's infrastructure,

00:09:54.400 --> 00:09:56.500
like the editing contexts.

00:09:56.610 --> 00:10:02.200
So having seen what the controllers are
and what the various display objects are,

00:10:02.290 --> 00:10:06.000
we now have the basic building blocks
for creating Java Client applications.

00:10:06.140 --> 00:10:08.680
So let's talk about design.

00:10:09.370 --> 00:10:13.360
When you design a Java Client,
you primarily have two options.

00:10:13.440 --> 00:10:16.070
You can use the Direct to
Java Client approach,

00:10:16.190 --> 00:10:21.080
which is the so-called code-free
approach that we advocate and

00:10:21.080 --> 00:10:22.920
is the focus of this talk.

00:10:23.140 --> 00:10:25.470
On the other hand,
you could try kind of the

00:10:25.470 --> 00:10:28.640
more old-fashioned approach,
which is to create all

00:10:28.640 --> 00:10:32.260
of your interface files,
or NIBs as we like to call them,

00:10:32.340 --> 00:10:35.790
by hand using the interface
builder application.

00:10:36.620 --> 00:10:41.180
The choice between the two really
boils down to all the tradeoffs

00:10:41.180 --> 00:10:45.180
that come between having a user
interface that's statically created

00:10:45.480 --> 00:10:47.500
or one that's dynamically generated.

00:10:47.900 --> 00:10:51.260
And I think what you'll find is that
there are several important reasons that

00:10:51.260 --> 00:10:53.340
actually favor the dynamic approach.

00:10:53.470 --> 00:10:54.340
One is productivity.

00:10:54.460 --> 00:10:56.930
Your productivity will be
much higher with a dynamically

00:10:56.930 --> 00:10:58.500
generated user interface.

00:10:58.500 --> 00:11:03.870
It will also be easier for
you to maintain consistency

00:11:03.870 --> 00:11:05.870
between the user interface and

00:11:06.220 --> 00:11:11.130
Your business logic or your data model,
if in fact your user interface

00:11:11.130 --> 00:11:13.780
is generated dynamically
from the data model.

00:11:13.780 --> 00:11:16.210
And finally,
it is easier to localize a user

00:11:16.210 --> 00:11:20.010
interface that has been dynamically
generated than it is to localize

00:11:20.010 --> 00:11:22.200
one that's statically generated.

00:11:22.200 --> 00:11:25.500
For similar reasons that make it
easier to maintain a dynamically

00:11:25.500 --> 00:11:28.460
generated user interface,
it can soon become a nightmare if you

00:11:28.460 --> 00:11:31.460
have a statically created interface
where you make a few little changes

00:11:31.460 --> 00:11:34.500
and you end up having to touch many,
many files, and that can soon become

00:11:34.560 --> 00:11:35.840
a maintenance nightmare.

00:11:37.370 --> 00:11:43.140
So why don't we see the power of
the dynamic approach in action.

00:11:43.140 --> 00:11:45.130
Another demonstration.

00:11:45.800 --> 00:11:46.700
Thanks, Ernest.

00:11:46.700 --> 00:11:46.700
Thanks, Brent.

00:11:46.860 --> 00:11:47.700
Okay.

00:11:47.700 --> 00:11:50.950
So we're starting from the application
that we created in the last demo,

00:11:50.950 --> 00:11:53.100
and we're going to show you some
of the customization techniques

00:11:53.180 --> 00:11:56.260
that we provide you for dynamically
generated user interfaces.

00:11:56.260 --> 00:11:58.540
So with every Direct to
Java Client application,

00:11:58.540 --> 00:12:02.280
we include a tool called the Assistant,
and it is available from the

00:12:02.400 --> 00:12:06.000
Tools menu in the Client application,
and it's a swing application

00:12:06.040 --> 00:12:07.940
that runs alongside the client.

00:12:08.050 --> 00:12:12.120
And it allows us to perform basic,
pretty simple customizations

00:12:12.120 --> 00:12:13.890
to the client application.

00:12:14.010 --> 00:12:17.250
So for instance, by default,
the name of the query

00:12:17.250 --> 00:12:20.050
window is Query Window,
which, you know, may be fine,

00:12:20.050 --> 00:12:23.390
but you may want something else.

00:12:23.390 --> 00:12:23.390
So.

00:12:23.750 --> 00:12:25.090
We'll give it a different name.

00:12:25.190 --> 00:12:27.700
And by default,
the first one on the application

00:12:27.700 --> 00:12:31.390
always shows up in the upper
left-hand corner of the client screen.

00:12:31.560 --> 00:12:36.750
And perhaps for some reason,
you want a different behavior.

00:12:36.750 --> 00:12:36.750
So, let's go ahead and start
with the first one.

00:12:36.980 --> 00:12:39.160
In the Windows pane here,
we're going to select

00:12:39.280 --> 00:12:42.770
bottom left as a position,
save and restart the client application

00:12:42.810 --> 00:12:44.060
right from within the Assistant.

00:12:44.290 --> 00:12:46.890
And you'll notice we've changed
the title of the window and

00:12:46.890 --> 00:12:48.290
where the window shows up.

00:12:48.390 --> 00:12:49.860
Okay, that's all right.

00:12:50.010 --> 00:12:52.880
Let's do something that will
be actually useful to our

00:12:52.920 --> 00:12:54.790
clients of this application.

00:12:54.910 --> 00:12:58.140
So we're going to open a form
window for the customer entity.

00:12:58.250 --> 00:13:00.140
And you'll notice that
there's a lot going on here.

00:13:00.330 --> 00:13:04.780
Well, it might be nice to hide
some of these properties.

00:13:04.930 --> 00:13:07.800
So in the Properties
pane of the Assistant,

00:13:07.890 --> 00:13:10.860
and you'll notice that the
Assistant follows you where you go,

00:13:11.140 --> 00:13:13.340
we can choose to hide some of these.

00:13:13.480 --> 00:13:16.630
So I don't want to show the
agent and I don't want to see the

00:13:16.630 --> 00:13:19.140
suggested listings for this customer.

00:13:19.140 --> 00:13:20.110
So I'm going to save that.

00:13:20.240 --> 00:13:22.970
I'm going to open a different record.

00:13:24.050 --> 00:13:25.000
for a customer.

00:13:25.140 --> 00:13:28.510
And you'll notice in comparison,
this is the new window here that

00:13:28.650 --> 00:13:31.800
we customized with the Assistant,
and this is the window

00:13:31.810 --> 00:13:33.600
before it was customized.

00:13:33.670 --> 00:13:36.700
So without writing any code,
we have a tool that helps you write rules

00:13:36.700 --> 00:13:38.780
to simply customize your application.

00:13:38.820 --> 00:13:40.180
Thanks, Ernest.

00:13:40.180 --> 00:13:41.530
Thank you, Brent.

00:13:41.560 --> 00:13:44.600
Okay.

00:13:44.600 --> 00:13:48.400
I promise to make the next demo
a lot more challenging for him.

00:13:48.400 --> 00:13:52.670
So let's talk about the all-important
controllers in more detail.

00:13:52.670 --> 00:13:57.100
You're going to need the help of many
controllers to create your client.

00:13:57.100 --> 00:14:01.180
And there are primarily
four kinds of controllers.

00:14:01.360 --> 00:14:05.170
All of these controllers are
subclasses of the EO controller class

00:14:05.600 --> 00:14:07.840
in the EO application framework.

00:14:08.000 --> 00:14:10.840
First, there's the application object,
which,

00:14:10.950 --> 00:14:15.550
like every other application object,
handles the startup process

00:14:15.770 --> 00:14:19.060
and also application-wide
parameters such as menus.

00:14:19.180 --> 00:14:21.640
Then,
there are the user interface controllers,

00:14:21.780 --> 00:14:24.630
which handle the higher level
layout management tasks.

00:14:24.770 --> 00:14:27.790
Examples include the tab view controller.

00:14:28.000 --> 00:16:13.800
[Transcript missing]

00:16:14.320 --> 00:16:17.740
The rule system is a simple
question and answer mechanism.

00:16:17.850 --> 00:16:21.950
It generates an XML description
of the user interface.

00:16:22.080 --> 00:16:26.930
Now, the rule system resides on the
server primarily for two reasons.

00:16:27.350 --> 00:16:33.370
For sharing, because the rule system is a
computationally intensive expert system,

00:16:33.410 --> 00:16:38.040
and it is advantageous to cache and
share the results of those computations.

00:16:38.180 --> 00:16:41.580
For security,
because the rule system analyzes

00:16:41.580 --> 00:16:46.740
information in the data model to generate
the description of the user interface,

00:16:46.830 --> 00:16:50.130
you can consider that data model to
be sensitive business information.

00:16:50.240 --> 00:16:52.300
And in general,
you do not want to send the data

00:16:52.300 --> 00:16:56.440
model across the wire unless
it is absolutely necessary.

00:16:56.610 --> 00:16:59.100
Now, the rule system in Java Client,
Direct to Java Client,

00:16:59.100 --> 00:17:02.190
is really great because it provides
a lot of built-in functionality.

00:17:02.360 --> 00:17:04.660
In other words,
there are approximately 100 default

00:17:04.660 --> 00:17:09.200
rules that help you to create
a sophisticated user interface.

00:17:09.320 --> 00:17:14.620
It is also easy to define custom
rules because the rule system has been

00:17:14.620 --> 00:17:17.100
designed with extensibility in mind.

00:17:17.790 --> 00:17:21.400
So now that we've talked about
how controllers are organized

00:17:21.490 --> 00:17:25.480
and defined in the rule system,
why don't we step back for a moment and

00:17:25.480 --> 00:17:30.470
take a look at the complete data flow
of a Direct to Java Client application,

00:17:30.470 --> 00:17:34.530
or what I like to call a day in
the life of Direct to Java Client.

00:17:34.640 --> 00:17:36.450
We start with

00:17:36.700 --> 00:17:38.720
The application object
on the client side,

00:17:38.720 --> 00:17:41.360
which in Java Client is an
instance of U application,

00:17:41.360 --> 00:17:45.060
and in Direct to Java Client is an
instance of EO dynamic application.

00:17:45.180 --> 00:17:51.360
Its most important task is to warm up
and initialize the controller factory.

00:17:51.490 --> 00:17:53.880
Controller factory is an
object that actually builds

00:17:53.880 --> 00:17:55.500
the hierarchy of controllers.

00:17:55.520 --> 00:17:58.340
But to do so,
the controller factory sends out

00:17:58.450 --> 00:18:02.040
a request to the rule system,
which as we discussed,

00:18:02.050 --> 00:18:03.090
resides on the server.

00:18:03.500 --> 00:18:07.970
The rule system will analyze
information in the data model as

00:18:07.990 --> 00:18:12.440
well as rule models to generate an
XML description of the user interface,

00:18:12.440 --> 00:18:16.950
which the controller factory
will take and actually build

00:18:16.950 --> 00:18:18.330
the hierarchy of controllers.

00:18:18.400 --> 00:18:24.900
The hierarchy of controllers will
actually generate the user interface

00:18:24.900 --> 00:18:30.890
and also listen for user events,
which may trigger additional

00:18:31.730 --> 00:18:33.990
actions on the controller factory.

00:18:34.760 --> 00:18:38.300
Which in turn may result in the
creation of additional windows,

00:18:38.300 --> 00:18:42.180
which of course may require additional
requests to the rule system.

00:18:42.740 --> 00:18:45.240
I feel like I'm on the Discovery Channel,
you know.

00:18:45.240 --> 00:18:50.820
It's like the salmon have swam upstream
to whence they came from so that

00:18:51.140 --> 00:18:55.630
they may spawn the next generation,
and thus the cycle of life continues.

00:18:55.740 --> 00:19:01.060
But this is pretty much a day in the life
of a Direct to Java Client application.

00:19:01.420 --> 00:19:03.880
So now that we have spent a
day in the life of a Direct to

00:19:03.880 --> 00:19:06.990
Java Client application together,
I feel like I've gotten to

00:19:06.990 --> 00:19:08.170
know you all really well.

00:19:08.200 --> 00:19:10.740
So I guess it's time to get personal.

00:19:10.860 --> 00:19:13.360
So I think we're ready for the next step.

00:19:13.500 --> 00:19:16.910
So we can discuss
customization techniques.

00:19:17.410 --> 00:19:21.760
There are primarily three broad
categories of customization techniques.

00:19:21.950 --> 00:19:25.930
Writing rules,
which means you're keeping dynamic.

00:19:26.470 --> 00:19:27.900
We're freezing parts
of the user interface,

00:19:27.900 --> 00:19:30.640
which means we're becoming static.

00:19:30.640 --> 00:19:35.730
And finally, writing code so that we
can add more functionality.

00:19:35.960 --> 00:19:39.670
To help you with writing rules,
you need a system, which Brent kindly

00:19:39.670 --> 00:19:41.040
demonstrated for us earlier.

00:19:41.040 --> 00:19:42.890
And that suffices for most simple tasks.

00:19:42.890 --> 00:19:48.020
But for more complex tasks,
you may need a little more flexibility.

00:19:48.020 --> 00:19:50.570
And that's why there's
the rule editor tool,

00:19:50.570 --> 00:19:53.810
which allows you to write
any arbitrary rule by hand.

00:19:55.370 --> 00:19:59.130
Freezing the user interface is
the next level of customization,

00:19:59.130 --> 00:20:02.980
and it is a slightly heavier-weight
customization technique.

00:20:03.060 --> 00:20:06.830
So freezing means that we're starting
to bypass the dynamic rule system

00:20:06.830 --> 00:20:12.300
and instead using hard-coded XML that
has been saved in the file or an

00:20:12.350 --> 00:20:17.820
interface file that you created by
hand using the interface builder tool.

00:20:18.120 --> 00:20:19.500
And this requires more work.

00:20:19.530 --> 00:20:23.370
On the other hand, it gives you more
flexibility over the layout.

00:20:24.130 --> 00:20:29.320
Finally, when you want to write code,
you commonly do two things.

00:20:29.420 --> 00:20:32.020
One is to create your own controllers.

00:20:32.050 --> 00:20:35.490
So typically that means
writing a subclass of an

00:20:35.490 --> 00:20:37.750
existing default controller

00:20:37.860 --> 00:20:42.400
And you may want to do this to
add more widgets or associations.

00:20:42.540 --> 00:20:43.790
It's up to you.

00:20:43.910 --> 00:20:48.600
But you can even go so far as to override
the behavior of the controller factory.

00:20:48.690 --> 00:20:52.060
And that way,
you can actually customize the flow

00:20:52.300 --> 00:20:54.120
of the user interface completely.

00:20:54.230 --> 00:20:56.240
We'll delve into each of
these more customization

00:20:56.240 --> 00:20:58.700
techniques in further detail.

00:20:58.810 --> 00:21:02.310
Let's first talk about freezing XML.

00:21:02.410 --> 00:21:05.740
Freezing XML, as I mentioned,
allows you to bypass the

00:21:05.750 --> 00:21:10.800
rule system and to use static
XML that's been saved in the file.

00:21:10.800 --> 00:21:14.200
That file happens to be
a WebObjects component.

00:21:14.300 --> 00:21:16.310
A woke component.

00:21:16.740 --> 00:21:19.700
The reason we used a WebObjects
component is that it allows you

00:21:19.700 --> 00:21:22.970
to mix in the dynamic elements,
such as woe conditionals

00:21:23.080 --> 00:21:25.240
and woe repetitions.

00:21:25.360 --> 00:21:28.000
You can even go so far as to
create your own templates,

00:21:28.000 --> 00:21:30.140
which is a very powerful technique.

00:21:30.270 --> 00:21:33.950
Yes,
you can use frozen XML to describe the

00:21:33.950 --> 00:21:36.400
complete window or just part of a window.

00:21:36.510 --> 00:21:37.860
It's up to you.

00:21:37.990 --> 00:21:42.520
The thing to remember is to write
a rule to register that frozen

00:21:42.520 --> 00:21:45.940
XML component with the rule system
so that it actually gets used

00:21:46.400 --> 00:21:48.910
when the user interface is built.

00:21:49.540 --> 00:21:53.150
Maybe we should make things a
little more concrete with a demo.

00:21:53.260 --> 00:21:53.620
All right.

00:21:53.890 --> 00:21:55.400
Sounds good, Ernest.

00:21:55.530 --> 00:21:57.550
Okay, so as Ernest was saying,
when the controller

00:21:57.630 --> 00:22:01.360
factory generates XML,
it ends up creating a

00:22:01.360 --> 00:22:04.640
controller hierarchy for each
window in the application.

00:22:04.760 --> 00:22:07.640
And conveniently,
in the Direct to Java Client Assistant,

00:22:07.640 --> 00:22:09.640
there is an XML pane.

00:22:09.680 --> 00:22:12.040
And so if you switch to that,
you see all these

00:22:12.690 --> 00:22:16.220
wonderful XML descriptions,
each corresponding to a single

00:22:16.230 --> 00:22:18.230
specification in the application.

00:22:18.350 --> 00:22:21.080
So let's take a look a little
more closely at one of them.

00:22:21.250 --> 00:22:24.080
So if we look at the
Customer Form window,

00:22:24.080 --> 00:22:25.640
let's find the specification for that.

00:22:25.640 --> 00:22:29.970
So the entity is Customer,
the task is Form,

00:22:30.030 --> 00:22:31.480
and the question is Window.

00:22:31.630 --> 00:22:33.240
And we'll just look
at a few of them here.

00:22:33.370 --> 00:22:38.640
So the top level of the window is
described by a frame controller element.

00:22:38.780 --> 00:22:42.880
The button bar here is described
by an action controller button.

00:22:43.020 --> 00:22:46.000
And if we look at the first
two text field controllers,

00:22:46.000 --> 00:22:48.180
those correspond to the first name
and the first name of the text field.

00:22:48.240 --> 00:22:50.100
Last name widgets in the window there.

00:22:50.300 --> 00:22:55.060
So that's kind of a concrete example
of how the XML generated is transposed

00:22:55.160 --> 00:22:57.240
into swing widgets in the end.

00:22:57.460 --> 00:23:00.180
So this XML is great,
but we want to know how to freeze it.

00:23:00.240 --> 00:23:05.240
So conveniently,
since we have the XML in the Assistant,

00:23:05.240 --> 00:23:09.240
we can simply copy it out of there
and into a new Web Audit component,

00:23:09.290 --> 00:23:12.200
in this case,
an instance of D2W component.

00:23:12.240 --> 00:23:17.730
So we want to freeze the listing window.

00:23:17.740 --> 00:23:20.730
Or the form window for
the listing entity.

00:23:20.870 --> 00:23:23.740
And it might be nice to add, like,
a badge for your real estate

00:23:23.740 --> 00:23:24.730
agent or something there.

00:23:24.740 --> 00:23:27.740
So we're going to freeze
XML to accomplish that.

00:23:27.740 --> 00:23:32.730
So we need to find the XML description
for that particular task and window.

00:23:32.740 --> 00:23:35.740
In this case, it's the entity listing
and the task form.

00:23:35.790 --> 00:23:39.090
So I'm simply going to
select all that XML,

00:23:39.640 --> 00:23:43.980
Copy it out of the Assistant and
back in my project.

00:23:44.030 --> 00:23:47.490
I want to add a new
component to the project.

00:23:47.490 --> 00:23:50.500
This is going to hold the
frozen XML that we customized.

00:23:50.500 --> 00:23:55.810
We're going to add a file that
is a WebObjects component.

00:23:56.260 --> 00:23:59.750
And since this is for the
listing entity for the form task,

00:23:59.820 --> 00:24:01.830
we're going to give it that name.

00:24:01.970 --> 00:24:06.610
So the assistant that we just invoked
actually gives us a WOL component,

00:24:06.650 --> 00:24:08.580
but we need a D2W component.

00:24:08.580 --> 00:24:12.670
So we're just going to change the
superclass and simply add the import

00:24:12.790 --> 00:24:16.220
statement for the Direct to Web package.

00:24:16.220 --> 00:24:20.870
So I guess this is writing code,
but it's not really writing code.

00:24:20.940 --> 00:24:21.900
OK.

00:24:21.900 --> 00:24:24.650
And finally,
in the WOL component that was generated

00:24:24.650 --> 00:24:30.370
for us by the project builder assistant,
we're going to paste in the XML.

00:24:30.370 --> 00:24:30.370
Whoops.

00:24:30.690 --> 00:24:32.300
Yeah, yeah.

00:24:32.320 --> 00:24:35.880
Okay, so we'll go back to the
assistant and paste in the XML.

00:24:36.000 --> 00:24:38.080
And fortunately,
so I don't make any typos,

00:24:38.280 --> 00:24:42.950
I have typed in the definition for
the controller we want to add that

00:24:42.950 --> 00:24:45.600
will put that badge in that window.

00:24:45.630 --> 00:24:50.560
We're in text edit and I'm just going
to slap it in at the bottom here.

00:24:51.870 --> 00:24:53.790
Okay,
so you notice the last point on Ernest's

00:24:53.790 --> 00:24:57.610
slide was that when you freeze XML,
you actually need to register that frozen

00:24:57.610 --> 00:24:59.760
XML component with the rule system.

00:24:59.880 --> 00:25:03.080
Well, all that means is you need to write
a rule to tell the rule system,

00:25:03.280 --> 00:25:07.400
hey, I want to use frozen XML for this
particular part of my application.

00:25:07.560 --> 00:25:11.280
So again, I have written that
rule over here before,

00:25:11.280 --> 00:25:14.640
so I'll make sure that it's typed right.

00:25:14.640 --> 00:25:18.670
I'm going to add it to
my project like that.

00:25:19.590 --> 00:25:21.400
and we're gonna build and run.

00:25:21.530 --> 00:25:21.770
Okay.

00:25:21.940 --> 00:25:24.280
A few things you may have noticed
there that I glossed over is

00:25:24.640 --> 00:25:30.280
that I added the new rule to
a file called d2w.d2wmodelfile.

00:25:30.280 --> 00:25:34.980
Now, that's just simply a file
that I added to my project.

00:25:34.990 --> 00:25:38.150
Notice also this user.d2wmodelfile.

00:25:38.240 --> 00:25:41.210
The reason you don't want to add
your own rules there is because

00:25:41.210 --> 00:25:44.310
that's where the direct-to-Java
client assistant puts rules.

00:25:44.310 --> 00:25:48.160
So it has control, it owns that file,
you don't want to mess with it.

00:25:48.280 --> 00:25:53.000
So by simply adding a file called
d2w.d2wmodel to your project,

00:25:53.040 --> 00:25:55.780
you have control over that rule file.

00:25:55.850 --> 00:26:00.950
So, if this works, which it will,
when we ask for a form window

00:26:01.420 --> 00:26:05.140
for the listing entity,
we should see the powered by

00:26:05.310 --> 00:26:07.820
web objects badge on the bottom.

00:26:07.850 --> 00:26:08.280
There

00:26:09.880 --> 00:26:11.500
That was a little harder, Ernest,
but next time.

00:26:11.500 --> 00:26:12.630
Okay.

00:26:12.640 --> 00:26:13.070
Thanks, Brent.

00:26:13.250 --> 00:26:14.010
That wasn't too bad.

00:26:17.700 --> 00:26:22.260
So Brent just added an import statement,
as you saw,

00:26:22.260 --> 00:26:25.400
and he just changed the class so
that WebOpticsComponent extends,

00:26:25.400 --> 00:26:29.270
simply because we create a
WebOpticsComponent and then

00:26:29.330 --> 00:26:33.690
make that a D2W component to
be used with our rule system.

00:26:33.850 --> 00:26:36.600
But some of us don't really
consider import statements

00:26:36.600 --> 00:26:38.200
to be actual lines of code.

00:26:38.390 --> 00:26:41.700
So I would still argue that he still
hasn't written a single line of code.

00:26:41.700 --> 00:26:44.640
But thanks, Brent,
for demonstrating that technique.

00:26:44.700 --> 00:26:47.650
So we've seen how to freeze XML.

00:26:47.700 --> 00:26:52.190
Let's delve a little more
into freezing interface files.

00:26:52.330 --> 00:26:56.370
So freezing interface files,
just like freezing XML,

00:26:56.450 --> 00:26:58.990
allows you to bypass the
dynamic rule system to build

00:26:59.050 --> 00:27:00.800
part of the user interface.

00:27:00.940 --> 00:27:04.060
But it also allows you to bypass
XML generation altogether.

00:27:05.510 --> 00:27:09.940
If you choose to freeze XML,
this means that you will have

00:27:09.940 --> 00:27:14.100
created an interface file using
the interface builder tool.

00:27:14.220 --> 00:27:18.900
This actually affords you the maximum
control over the layout of the widgets,

00:27:19.030 --> 00:27:22.200
resizing behavior,
and even the kinds of widgets

00:27:22.200 --> 00:27:23.800
that you'd like to use.

00:27:23.940 --> 00:27:28.640
Just as with freezing XML,
you can define a complete

00:27:28.640 --> 00:27:31.310
window or just part of one.

00:27:31.730 --> 00:27:35.540
Similar to Freezing XML,
Freezing Interface files requires

00:27:35.610 --> 00:27:39.940
you to write a rule to register the
interface file with the rule system

00:27:39.940 --> 00:27:44.360
so that it actually gets used to
build part of the user interface.

00:27:44.490 --> 00:27:47.940
Another thing to remember, though,
is that when you're mixing frozen

00:27:47.980 --> 00:27:51.880
interfaces with dynamic ones,
you also need to write another rule

00:27:52.130 --> 00:27:57.000
to suppress some of the standard
subcontrollers from being generated.

00:27:57.430 --> 00:28:00.960
And if it's not too much trouble,
I think I'd like to make things

00:28:00.960 --> 00:28:04.730
a little more concrete by asking
Brent to give us one more demo.

00:28:04.830 --> 00:28:05.640
Okay, I suppose.

00:28:05.640 --> 00:28:07.100
One more.

00:28:07.220 --> 00:28:11.460
All right, so let's start with the
application from the last demo.

00:28:11.570 --> 00:28:15.140
And let's take a look at the
form window for the agent entity.

00:28:15.270 --> 00:28:16.350
We'll pick Andreas.

00:28:16.420 --> 00:28:17.600
He's a nice guy.

00:28:17.650 --> 00:28:20.960
And so this window is okay,
but you know what?

00:28:21.070 --> 00:28:26.700
The interface I'm getting from the
dynamically generated XML and all that,

00:28:26.760 --> 00:28:27.960
I don't really like it.

00:28:28.040 --> 00:28:29.380
You know what I'd really like to do,
Ernest?

00:28:29.550 --> 00:28:30.330
What would you like to do, Brent?

00:28:30.410 --> 00:28:33.200
I would love to use Interface
Builder to build this window.

00:28:33.290 --> 00:28:33.960
Be my guest.

00:28:34.150 --> 00:28:35.360
All right.

00:28:35.360 --> 00:28:36.160
So we're gonna do that.

00:28:36.210 --> 00:28:38.230
It's actually pretty easy.

00:28:38.520 --> 00:28:40.780
So we're gonna go to Interface Builder,
which is a tool that should

00:28:40.830 --> 00:28:44.600
be familiar to anyone who has
done Mac OS X development.

00:28:44.740 --> 00:28:45.660
Guess what?

00:28:45.810 --> 00:28:47.140
We can also do Java Client
development with it.

00:28:47.270 --> 00:28:51.600
So I'm gonna start by selecting
an empty Cocoa project type.

00:28:51.690 --> 00:28:55.600
And the first thing I'm gonna do is
I'm gonna save it into my project.

00:28:57.100 --> 00:28:58.980
That is the name of my project, right?

00:28:59.040 --> 00:29:00.090
Yes.

00:29:00.130 --> 00:29:00.640
Okay.

00:29:00.690 --> 00:29:04.930
We are going to call it
Agent Form Window since we're customizing

00:29:04.940 --> 00:29:07.590
the form window for the agent entity.

00:29:07.840 --> 00:29:11.630
Since Project Builder and
Interface Builder are so smart,

00:29:11.700 --> 00:29:14.830
it's going to ask me if I want
to insert it into the project.

00:29:14.830 --> 00:29:17.150
Of course, it would do this,
but this is a demo,

00:29:17.150 --> 00:29:22.120
and since everything is going so well,
this is where Ernest has obviously

00:29:22.120 --> 00:29:25.220
sabotaged my machine so that
I cannot actually add this new file

00:29:25.220 --> 00:29:26.750
to the target in Interface Builder.

00:29:26.810 --> 00:29:31.820
But that's okay because
there's always a workaround.

00:29:32.210 --> 00:29:36.050
So this is actually rather easy.

00:29:36.060 --> 00:29:38.180
We saved the Nib file
as agent form window.

00:29:38.180 --> 00:29:41.660
I'm simply going to drag it into
the interfaces group in project

00:29:41.660 --> 00:29:45.560
builder and add it to the web
server target since it is associated

00:29:45.560 --> 00:29:47.490
with the client application.

00:29:47.630 --> 00:29:48.990
So there it is.

00:29:48.990 --> 00:29:52.460
And I'm going to open it
from within the project.

00:29:52.460 --> 00:29:52.800
OK.

00:29:52.800 --> 00:29:54.040
Now we're all good.

00:29:54.040 --> 00:29:56.320
That wasn't very nice of you, Ernest.

00:29:56.320 --> 00:29:57.540
But we worked around it.

00:29:57.560 --> 00:29:59.200
OK,
so there are a few things we have to do

00:29:59.320 --> 00:30:03.960
to successfully use a Nib file within
a dynamically generated user interface.

00:30:04.040 --> 00:30:06.820
First thing we have to do
is associate files owner,

00:30:06.830 --> 00:30:10.550
which is the object with which
the Nib file is associated,

00:30:10.550 --> 00:30:11.800
to a particular class.

00:30:11.800 --> 00:30:14.140
And in this case,
we need to associate it with

00:30:14.140 --> 00:30:18.120
the EO form controller class,
which is in the EO generation package.

00:30:18.140 --> 00:30:19.780
For those of you who are
familiar with some of this,

00:30:19.950 --> 00:30:22.640
you may notice that some of
the package names are a little

00:30:22.640 --> 00:30:24.410
bit different than you expect.

00:30:24.410 --> 00:30:27.130
We are showing you the
future version here and we've

00:30:27.130 --> 00:30:29.880
renamed some of the packages,
so don't be confused by that.

00:30:30.000 --> 00:30:33.300
So, anyways,
we're going to select EO form controller,

00:30:33.300 --> 00:30:35.130
associate files owner with it.

00:30:36.020 --> 00:30:37.930
And then I'm going to
just drag out a window,

00:30:37.930 --> 00:30:40.000
just like you would do
building an application.

00:30:40.000 --> 00:30:42.830
And I'm going to bring up UL Modeler.

00:30:42.990 --> 00:30:46.760
And I still have that model file
open that we've been using throughout

00:30:47.040 --> 00:30:49.240
the whole presentation here.

00:30:49.240 --> 00:30:51.920
And Interface Builder and
UL Modeler can speak to each other.

00:30:51.940 --> 00:30:53.690
We hope they can speak to each other.

00:30:53.780 --> 00:30:58.080
And it's as easy as dragging an
entity or a relationship from

00:30:58.080 --> 00:31:00.990
UL Modeler into the window over there.

00:31:01.060 --> 00:31:04.790
And they're not playing nice now,
so that's why we saw

00:31:04.790 --> 00:31:06.680
that little dialogue.

00:31:06.680 --> 00:31:09.200
So what we got here,
if we choose Test Interface

00:31:09.210 --> 00:31:13.750
from the Interface Builder menu,
you'll see that we're actually talking to

00:31:13.890 --> 00:31:16.780
the data store and getting the data back.

00:31:16.780 --> 00:31:17.590
And we have, let's

00:31:17.800 --> 00:31:21.630
A successful master-detail relationship
just by doing that drag here.

00:31:21.740 --> 00:31:25.660
So we select a master object
up here and we see its detail

00:31:25.660 --> 00:31:27.790
data in the table down here.

00:31:27.810 --> 00:31:28.460
Okay.

00:31:28.560 --> 00:31:31.640
So, now the reason we're using Interface
Builder is because we actually want

00:31:31.690 --> 00:31:33.600
to customize this part of the UI.

00:31:33.740 --> 00:31:35.790
So there are a few things
I don't care about here.

00:31:35.820 --> 00:31:40.580
I don't care about the user type,
password, login.

00:31:40.810 --> 00:31:44.300
The agent name, first name and last name,
are probably OK.

00:31:44.300 --> 00:31:49.320
And then down here in the detail field,
you can collapse some of these and

00:31:49.320 --> 00:31:54.230
you can even add formatters just like
you would in a Cocoa application,

00:31:54.260 --> 00:31:55.800
things like that.

00:31:55.800 --> 00:31:57.920
And we translate all these
out to Swing4You so you

00:31:57.980 --> 00:31:59.320
don't have to worry about it.

00:31:59.390 --> 00:32:04.910
And I can even do things,
if I want to make editing

00:32:04.910 --> 00:32:05.240
a little bit easier,
I can add some text fields.

00:32:05.760 --> 00:32:09.680
You get the nice Aqua UI guidelines
for you even in a swing app,

00:32:09.690 --> 00:32:11.020
which is kind of nice.

00:32:11.060 --> 00:32:12.690
And I'll drag out a label here.

00:32:12.690 --> 00:32:19.770
First name.

00:32:22.640 --> 00:32:27.210
One thing to recognize in this is that
we support most of the widgets you

00:32:27.210 --> 00:32:29.620
get in Cocoa and Interface Builder,
but not all of them,

00:32:29.620 --> 00:32:33.400
so we have to consult the
documentation to figure that out.

00:32:33.400 --> 00:32:36.050
You noticed when we dragged in
the relationship from Elmodeler,

00:32:36.050 --> 00:32:39.070
it added a bunch of objects
to our nib file window.

00:32:39.070 --> 00:32:42.200
It added a display group
for the agent entity.

00:32:42.200 --> 00:32:45.910
It added a display group for the listings
relationship in the agent entity,

00:32:45.910 --> 00:32:49.400
and it added this editing context object.

00:32:49.400 --> 00:32:51.400
We need to do a few things
to get this all to work,

00:32:51.400 --> 00:32:54.290
and one of those things
is connect files owner.

00:32:54.410 --> 00:32:56.420
Files owner has some outlets,
and if you're familiar with

00:32:56.510 --> 00:32:58.000
that paradigm in Cocoa,
this will make sense to you.

00:32:58.140 --> 00:32:59.860
Otherwise, don't worry about it.

00:32:59.880 --> 00:33:03.730
We're going to connect files
owner to the window here,

00:33:03.730 --> 00:33:09.840
connect that on the component outlet,
and also the editing context there.

00:33:09.840 --> 00:33:12.240
And for the text fields
that I added here,

00:33:12.240 --> 00:33:15.050
when I select an agent name
over in this table here,

00:33:15.050 --> 00:33:18.680
I also want that name to display in these
two text fields here so I can edit them

00:33:18.690 --> 00:33:21.920
rather than have to type in the table,
which would be cumbersome.

00:33:21.920 --> 00:33:27.620
So we can simply control drag
and make an association to that

00:33:27.830 --> 00:33:30.730
property in the agent entity.

00:33:30.760 --> 00:33:32.350
There's first name.

00:33:32.920 --> 00:33:34.800
And then, last name.

00:33:34.800 --> 00:33:36.360
OK.

00:33:36.360 --> 00:33:38.520
So now we save that,
and if you test the interface,

00:33:38.550 --> 00:33:41.820
just make sure we connected
everything correctly.

00:33:44.910 --> 00:33:45.800
There you go.

00:33:45.800 --> 00:33:47.800
So you can see now how the
names are displayed over there.

00:33:47.800 --> 00:33:50.100
It's a nice feature being able
to test the interface like that.

00:33:50.100 --> 00:33:51.790
Isn't that great?

00:33:51.980 --> 00:33:54.560
Okay, so now it's nice that we can
use this in Interface Builder,

00:33:54.560 --> 00:33:56.230
but your customers probably won't.

00:33:56.360 --> 00:33:59.940
So we actually want to use this,
integrate it into our application.

00:34:00.060 --> 00:34:02.840
So back in Project Builder,
you see we've added the

00:34:02.950 --> 00:34:04.500
NIV file to the project.

00:34:04.570 --> 00:34:07.930
And just like we did with Frozen XML,
we need to register this

00:34:08.000 --> 00:34:09.800
NIV file with the rule system.

00:34:09.920 --> 00:34:14.000
So again, I've written these rules,
so I typed them correctly.

00:34:14.000 --> 00:34:19.310
I'm going to paste them
into my D2W model file.

00:34:19.330 --> 00:34:22.110
And I'll explain them in a minute here.

00:34:22.620 --> 00:34:23.790
So I'm adding two rules.

00:34:23.920 --> 00:34:27.210
The first rule says that
for the form window,

00:34:27.210 --> 00:34:30.170
for the agent entity,
I want to use a Nib file.

00:34:30.170 --> 00:34:33.950
And we specify that with the archive key,
and then we point it to the name

00:34:33.950 --> 00:34:35.480
of the Nib file we just created.

00:34:35.630 --> 00:34:39.790
The second one speaks to the last
point on Ernest's last slide,

00:34:39.830 --> 00:34:42.820
is that when you use a Nib file,
you also have,

00:34:42.820 --> 00:34:46.060
you want to tell the rule system
to not generate the XML for

00:34:46.060 --> 00:34:48.900
that part of the window for
which you're using the Nib file,

00:34:48.900 --> 00:34:52.040
otherwise you'll have redundant
display there and it will be a

00:34:52.250 --> 00:34:54.060
little bit weird for your users.

00:34:54.150 --> 00:34:59.480
So if we've done everything correctly,
which I'm pretty sure we have,

00:34:59.480 --> 00:35:01.810
we build and run the project,
it's going to find the

00:35:01.810 --> 00:35:04.580
Nib file and include that,
and then when we ask for a form

00:35:04.770 --> 00:35:08.810
window for the agent entity,
rather than get the dynamically generated

00:35:08.840 --> 00:35:12.770
XML that the rule system gives us,
we should get that static interface

00:35:12.770 --> 00:35:15.490
that we built in Interface Builder.

00:35:19.780 --> 00:35:25.450
Okay, so I'll search for agents.

00:35:26.320 --> 00:35:27.200
There we go.

00:35:27.200 --> 00:35:30.320
So, that's pretty cool.

00:35:30.320 --> 00:35:31.960
And just to show you that, yeah.

00:35:37.850 --> 00:35:38.800
So I guess that's it.

00:35:38.800 --> 00:35:40.380
You didn't stump me, Ernest.

00:35:40.430 --> 00:35:41.110
Try harder next time.

00:35:41.620 --> 00:35:43.480
I think you've earned your lunch, Brent.

00:35:43.690 --> 00:35:44.750
Thanks.

00:35:46.690 --> 00:35:48.110
But notice one thing.

00:35:48.190 --> 00:35:50.800
He still didn't write
a single line of code,

00:35:50.800 --> 00:35:54.060
but he did a lot of
clicking and dragging,

00:35:54.060 --> 00:35:55.490
so that's okay.

00:35:55.910 --> 00:35:59.550
So we've seen how to freeze XML,
and we've seen how to

00:35:59.560 --> 00:36:01.200
freeze interface files.

00:36:01.300 --> 00:36:06.540
So let's delve into the third and most
heavyweight customization technique,

00:36:06.610 --> 00:36:08.470
writing code.

00:36:10.250 --> 00:36:13.700
If you decide to take
the leap and write code,

00:36:13.780 --> 00:36:16.160
the possibilities are endless.

00:36:16.270 --> 00:36:20.640
Sadly, my time with you today is not,
so I will just brush upon some

00:36:20.640 --> 00:36:24.590
of the things that you can do
when you choose to write code.

00:36:25.170 --> 00:36:29.240
Probably the most common thing you'll
do is to create your own controllers.

00:36:29.320 --> 00:36:31.980
And you'll probably do this
for a number of reasons.

00:36:32.050 --> 00:36:34.770
But when you do,
what you'll do is you'll write

00:36:34.830 --> 00:36:39.750
subclasses of the existing EO controller
classes that have been provided.

00:36:40.410 --> 00:36:43.630
One thing that you can do is to try
your own custom widget or association,

00:36:43.630 --> 00:36:45.380
if you like.

00:36:45.470 --> 00:36:49.860
Another thing is to try a completely
different layout mechanism that

00:36:49.860 --> 00:36:55.330
will dramatically change the way
that your user interface appears.

00:36:55.840 --> 00:36:59.870
Another thing to do is to plug
in a special qualifier or fetch

00:36:59.890 --> 00:37:05.360
specification to change the way that
the application retrieves data objects.

00:37:06.020 --> 00:37:10.240
And one other thing that you can
do is to add additional actions.

00:37:10.330 --> 00:37:13.830
So if you see the menu of your
Direct to Java Client application,

00:37:14.010 --> 00:37:16.380
perhaps there will be another
item in there that says,

00:37:16.440 --> 00:37:19.470
generate a report about the
business object that the

00:37:19.470 --> 00:37:21.290
user is currently viewing.

00:37:21.580 --> 00:37:23.160
So again, the possibilities are endless.

00:37:23.160 --> 00:37:27.010
Now, as I mentioned before,
you can even go so far as

00:37:27.090 --> 00:37:30.670
to programmatically change
the behavior of the factory.

00:37:30.670 --> 00:37:34.780
Let's say that you are completely
unsatisfied with the overall structure

00:37:34.880 --> 00:37:37.240
of a direct-to-Java client application.

00:37:37.240 --> 00:37:41.680
You just can't stand the way that the
default application does its things.

00:37:41.780 --> 00:37:44.980
Well, if you programmatically
change the factory behavior,

00:37:45.150 --> 00:37:48.000
you can completely customize
the flow of the user interface.

00:37:48.820 --> 00:37:51.350
So what this means is that you
can write a subclass of the

00:37:51.500 --> 00:37:54.860
controller factory and plug it in,
or you can even implement some

00:37:54.930 --> 00:37:58.660
of the delegate methods that the
controller factory provides in

00:37:58.720 --> 00:38:01.110
order to change its behavior.

00:38:01.400 --> 00:38:05.800
Now, I could burn up the remaining
time that I have together with you

00:38:05.800 --> 00:38:08.880
talking about these customization
techniques in more detail,

00:38:08.880 --> 00:38:11.940
especially programmatically
changing the factory behavior.

00:38:11.940 --> 00:38:15.490
I think that could take
the rest of the session.

00:38:15.500 --> 00:38:19.990
But because I think it won't really
be necessary for the most part,

00:38:20.030 --> 00:38:23.400
and because it will be so much work,
especially for Brent if

00:38:23.400 --> 00:38:27.090
I force him to do it,
let's not and say we did.

00:38:28.260 --> 00:38:31.680
Instead,
let's use some of our not-so-endless time

00:38:31.680 --> 00:38:36.630
together to talk about a topic that is of
great interest to many people these days,

00:38:36.630 --> 00:38:37.650
web services.

00:38:37.660 --> 00:38:40.620
Hopefully,
you attended the previous session,

00:38:40.640 --> 00:38:44.020
session 705,
on web objects and web services.

00:38:44.020 --> 00:38:48.360
There was a pretty good explanation
of what web services do.

00:38:48.360 --> 00:38:51.500
They are, roughly speaking,
public APIs available over the Internet.

00:38:51.500 --> 00:38:54.760
So these are programs that you can
execute and use in your own applications.

00:38:54.760 --> 00:38:58.010
Well, it turns out that there are some
really interesting symptoms.

00:38:58.160 --> 00:39:02.880
There are similarities and differences
between web services and EO distribution.

00:39:02.880 --> 00:39:07.580
These are both technologies that are
distributed and platform independent.

00:39:07.620 --> 00:39:10.920
Key difference, however,
is that EO distribution

00:39:10.980 --> 00:39:12.580
is highly performant.

00:39:12.620 --> 00:39:16.660
It is tuned for interoperability
with enterprise objects.

00:39:16.660 --> 00:39:18.530
So there's the simple reason.

00:39:18.540 --> 00:39:23.490
If you attended the previous session,
you found that the crux of

00:39:23.490 --> 00:39:27.760
the support for building web
services and web objects is,

00:39:28.260 --> 00:39:30.160
well, direct-to-web services.

00:39:30.160 --> 00:39:34.080
So it may interest you to know that
direct-to-web services and direct-to-Java

00:39:34.080 --> 00:39:36.350
client use the same kind of rule system.

00:39:36.360 --> 00:39:39.520
So this is, I think,
the most interesting part about

00:39:39.520 --> 00:39:43.130
working in rapid development,
the ability to go beyond the

00:39:43.250 --> 00:39:47.680
traditional programming techniques
and to use advanced techniques

00:39:47.700 --> 00:39:51.690
to create powerful applications
in such a short amount of time.

00:39:51.830 --> 00:39:54.070
Same thing that we have for
Direct to Java Client applies

00:39:54.450 --> 00:39:56.380
for Direct to Web Services.

00:39:56.470 --> 00:39:59.210
What you may have also noticed in
that session is that there is an

00:39:59.210 --> 00:40:03.170
extremely powerful configuration
tool for Direct to Web Services,

00:40:03.200 --> 00:40:06.090
namely the Direct to
Web Services Assistant.

00:40:06.210 --> 00:40:09.730
As it so happens,
the Direct to Web Services Assistant uses

00:40:09.740 --> 00:40:15.130
many of the same customization techniques
that we've been talking about today,

00:40:15.170 --> 00:40:18.190
such as writing rules or freezing XML.

00:40:19.140 --> 00:40:21.760
So now that we've talked
about web services,

00:40:21.760 --> 00:40:24.190
I could ask Brent to come back
up here and give another demo.

00:40:24.190 --> 00:40:26.650
But actually,
I'd like to give him a break.

00:40:26.650 --> 00:40:31.990
And I will actually show a project
that we've prepared for you.

00:40:36.200 --> 00:40:43.010
So we've already created a
project that has client stubs

00:40:43.050 --> 00:40:45.630
for accessing a web service.

00:40:45.680 --> 00:40:49.950
So we created those client
stubs using the Apache Access,

00:40:49.950 --> 00:40:51.740
WSDL to Java generation tool.

00:40:51.800 --> 00:40:53.320
It's a really neat tool.

00:40:53.330 --> 00:40:56.800
And we found the web service
just on xmethods.com,

00:40:56.810 --> 00:41:01.030
or you can go to other things like
South City and search for web service.

00:41:01.100 --> 00:41:02.820
Why did we want to use a web service?

00:41:02.880 --> 00:41:06.910
Well, if you remember the--

00:41:09.620 --> 00:41:14.080
If you remember the way that
the windows look inside of our

00:41:14.080 --> 00:41:17.430
Direct to Java Client application,
notice that there were many

00:41:17.630 --> 00:41:20.660
fields for certain windows,
especially for the listing form window.

00:41:20.660 --> 00:41:24.160
So there,
if you wanted to specify the address,

00:41:24.200 --> 00:41:27.940
you'd have to fill in the street,
the city, the state, the zip code.

00:41:28.050 --> 00:41:31.570
And what we were thinking is that
it might be really helpful to save

00:41:31.950 --> 00:41:37.200
the user of such an application
time if they were to be able to just

00:41:37.290 --> 00:41:42.520
type in the zip code and to just
get the city and state from that.

00:41:47.140 --> 00:41:50.240
Now, when you create an application,
really you want to be focusing

00:41:50.240 --> 00:41:54.740
on the business logic required to
create an interesting application.

00:41:54.850 --> 00:41:58.120
But there are certain kinds of business
logic that you may not be interested in.

00:41:58.240 --> 00:42:01.910
So you may not necessarily
want to get into the business

00:42:02.380 --> 00:42:08.530
of writing or publishing a
service that returns a city and

00:42:08.530 --> 00:42:10.180
state based on the zip code.

00:42:10.310 --> 00:42:12.780
So why not let someone else do that?

00:42:12.850 --> 00:42:15.800
So you can focus on the business
logic that you find interesting.

00:42:15.800 --> 00:42:19.700
So to do that, it was really simple.

00:42:24.490 --> 00:42:27.600
We took the frozen XML for
the listing form window,

00:42:27.620 --> 00:42:31.540
which is similar to the
result of the third demo that

00:42:31.540 --> 00:42:34.580
Brent gave when he froze the XML.

00:42:34.580 --> 00:42:36.680
And let's make this a little bigger.

00:42:40.700 --> 00:42:48.270
And what we did actually was to plug
in our own controller into that form.

00:42:58.900 --> 00:43:03.230
So actually, right here,
inside of the frozen XML,

00:43:03.230 --> 00:43:07.580
we simply inserted one more node,
which is to use a controller that we

00:43:07.580 --> 00:43:09.500
created called the zip code controller.

00:43:09.500 --> 00:43:12.530
And there's a label that says,
fill in the city and the state.

00:43:12.550 --> 00:43:18.490
And if you look at the user
interface of that application,

00:43:18.580 --> 00:43:21.870
you'll find that it's there.

00:43:21.870 --> 00:43:21.870
But...

00:43:27.790 --> 00:43:33.740
Let's take a closer
look at that controller.

00:43:33.870 --> 00:43:38.140
If you look at the zip code controller,
it turns out that the code for that is

00:43:38.140 --> 00:43:41.970
really short and is really very simple,
because what we're doing is

00:43:41.970 --> 00:43:45.360
we're extending a class called
the EO Web Service Controller.

00:43:45.800 --> 00:43:48.330
So the important thing about this
class is that it implements a

00:43:48.330 --> 00:43:49.690
method called execute with object.

00:43:49.690 --> 00:43:51.380
I'll return to this later.

00:43:51.400 --> 00:43:55.110
Let's take a look at the web
service controller itself.

00:43:55.180 --> 00:43:57.480
This is just a very simple
example of what you can do

00:43:57.480 --> 00:43:59.080
when you create a controller.

00:43:59.080 --> 00:44:05.000
So it has the default constructor and
one that takes an XML on archiver.

00:44:05.000 --> 00:44:06.580
That's not really so interesting.

00:44:06.580 --> 00:44:08.550
And in addition,
it has logic for the enabling

00:44:08.550 --> 00:44:09.940
and disabling of the button.

00:44:09.940 --> 00:44:14.990
The most important thing to note is
that there's this method called execute.

00:44:15.700 --> 00:44:20.200
Which looks at the selected
objects in the controller and for

00:44:20.200 --> 00:44:23.940
each of those objects invokes a
method called execute with object.

00:44:23.940 --> 00:44:28.000
And as a convenience, will pass along the
selected object itself.

00:44:30.820 --> 00:44:33.660
So given that this web
service controller,

00:44:33.660 --> 00:44:39.020
which by the way is an action trigger and
will be available in the next release,

00:44:39.060 --> 00:44:40.970
does all that for you.

00:44:41.370 --> 00:44:45.110
All that the zip code controller
has to do is implement the

00:44:45.110 --> 00:44:47.180
execute with object method.

00:44:47.950 --> 00:44:51.830
The code for this is actually
very simple and very standard.

00:44:51.910 --> 00:44:55.960
And what it's really doing is it's
making a connection with the service,

00:44:55.960 --> 00:44:59.440
and it is sending out a request.

00:44:59.440 --> 00:45:02.540
So given the zip code,
the value of the zip code that

00:45:02.540 --> 00:45:05.440
is currently in the controller,
it will actually send a

00:45:05.440 --> 00:45:09.480
request to that web service to
get back the city and state,

00:45:09.480 --> 00:45:12.530
and the service returns it as one string.

00:45:12.540 --> 00:45:15.110
So we just take care of a
little logic to extract out the

00:45:15.110 --> 00:45:16.830
city and extract out the state.

00:45:16.840 --> 00:45:20.090
And we set that on the selected object.

00:45:20.180 --> 00:45:21.750
And that's all this controller has to do.

00:45:21.840 --> 00:45:28.240
So if we go back to the application,

00:45:34.610 --> 00:45:39.040
And we're to type in the zip code.

00:45:39.390 --> 00:45:42.370
Unfortunately,
that's all that this controller will do,

00:45:42.490 --> 00:45:45.600
because for the moment,
the web service is actually down.

00:45:45.600 --> 00:45:49.700
And that's just one of the perils
of working with web services.

00:45:49.700 --> 00:45:52.860
You want to use a reliable web
service in your application.

00:45:52.860 --> 00:45:55.330
But note that the controller
gives a very nice message,

00:45:55.330 --> 00:45:57.810
an error dialog that says,
please try again later.

00:45:58.100 --> 00:46:00.880
But if that service were
to be up and running,

00:46:00.950 --> 00:46:05.600
the answer would have been that
92612 corresponds to Irvine,

00:46:05.600 --> 00:46:06.690
California.

00:46:06.690 --> 00:46:10.230
And I would have asked,
to a round of rousing applause,

00:46:10.230 --> 00:46:12.260
is there Irvine in the house?

00:46:16.440 --> 00:46:18.900
Unfortunately,
that will have to happen next year.

00:46:18.900 --> 00:46:22.890
So if we could go back to the slides.

00:46:30.240 --> 00:46:34.090
I think you'll have noticed something
very interesting with the series of

00:46:34.090 --> 00:46:40.060
demos that Brent kindly did for us
and for one that I did just up there,

00:46:40.060 --> 00:46:41.330
which is that

00:46:41.550 --> 00:46:44.470
With Direct to Java Client,
your development process

00:46:44.470 --> 00:46:46.830
actually begins to evolve,
the process itself,

00:46:46.880 --> 00:46:50.120
to the point where you can
actually develop in iterations

00:46:50.120 --> 00:46:52.330
and focus on the business logic.

00:46:52.360 --> 00:46:56.370
So you can develop in iterative cycles,
and at the beginning and

00:46:56.460 --> 00:46:59.280
end of each iteration,
you will have a fully

00:46:59.280 --> 00:47:01.240
functional application.

00:47:01.240 --> 00:47:05.210
So this is very much compatible with
the spirit of iterative development

00:47:05.210 --> 00:47:07.770
methodologies like extreme programming.

00:47:08.120 --> 00:47:11.960
So the important thing is that at
all times in the development cycle,

00:47:11.960 --> 00:47:15.360
you have a fully functional
application that you can always choose,

00:47:15.380 --> 00:47:17.850
if you want,
to deliver immediately to your

00:47:17.880 --> 00:47:19.780
customers or to your investors.

00:47:19.780 --> 00:47:21.650
It's really up to you.

00:47:21.660 --> 00:47:25.930
So what we recommend is that you
start by creating a database and

00:47:25.930 --> 00:47:30.500
a data model sufficient enough
to run the default application.

00:47:32.170 --> 00:47:35.460
And in Direct to Java Client,
customization is really quick and easy.

00:47:35.580 --> 00:47:40.730
So what you find is that
prototyping becomes very efficient.

00:47:41.670 --> 00:47:46.530
And since customers, as customers do,
have a tendency to change their

00:47:46.530 --> 00:47:50.260
minds about the user interface even
after the product has been delivered,

00:47:50.430 --> 00:47:54.800
what we recommend is that you
delay polishing the user interface.

00:47:54.900 --> 00:47:58.550
Make the changes to the user interface
layout and application logic later,

00:47:58.670 --> 00:48:01.400
until the business logic
has been finalized.

00:48:01.530 --> 00:48:05.550
And that way you will be able to
deliver maximum value to your customers

00:48:05.610 --> 00:48:09.720
or your investors at all times
throughout the development cycle.

00:48:10.050 --> 00:48:14.820
So the benefits of developing
this approach are many.

00:48:14.910 --> 00:48:18.600
As I mentioned,
fast and efficient development.

00:48:19.170 --> 00:48:22.040
which is one of the key advantages
of using Direct to Java Client,

00:48:22.050 --> 00:48:24.750
the fact that it generates
user interface dynamically in

00:48:24.760 --> 00:48:27.540
such a short amount of time,
and that there's an immediate

00:48:27.540 --> 00:48:31.240
reaction to changes in business
requirements and data model.

00:48:31.240 --> 00:48:35.310
How many times have you seen a
project not quite meet requirements

00:48:35.310 --> 00:48:39.230
or to have to accommodate late
incoming requirements because,

00:48:39.520 --> 00:48:44.100
sadly, as the reality of developing is,
the requirements change?

00:48:44.880 --> 00:48:48.460
Well, with Direct to Java Client,
you can actually see immediately what

00:48:48.610 --> 00:48:54.170
those changes in the business logic or
data model would do for the application.

00:48:55.670 --> 00:48:59.340
Key advantage, again,
is that it reduces testing time.

00:48:59.360 --> 00:49:03.510
Direct to Java Client provides
all of these built-in application

00:49:03.510 --> 00:49:07.690
functionality components for you,
and it's reliable,

00:49:07.700 --> 00:49:10.020
so you'll spend less time testing.

00:49:10.020 --> 00:49:13.170
And finally, and perhaps what is the
most important thing,

00:49:13.170 --> 00:49:16.100
is that you can start to
return to your core competency,

00:49:16.100 --> 00:49:18.380
which should be the business logic.

00:49:18.420 --> 00:49:21.240
Because that's really where
you're adding most value,

00:49:21.240 --> 00:49:24.000
the most value as a client
application developer.

00:49:24.280 --> 00:49:27.360
Not all of the client, you know,
application interface logic,

00:49:27.460 --> 00:49:28.450
but actually the business logic.

00:49:30.270 --> 00:49:36.440
So it is actually my privilege to be
able to give you a glimpse of where

00:49:36.440 --> 00:49:41.970
we're focusing our efforts into the
future of Direct to Java Client.

00:49:42.160 --> 00:49:46.420
So it turns out that we've heard
some feedback from many of you.

00:49:46.600 --> 00:49:50.150
And what we've heard is that
three-tier applications are nice,

00:49:50.150 --> 00:49:52.700
and they provide hooks for security.

00:49:52.770 --> 00:49:57.910
But sometimes they're a
little bit hard to maintain,

00:49:57.910 --> 00:50:00.650
or even to understand.

00:50:00.650 --> 00:50:00.650
So as a result, we're

00:50:01.820 --> 00:50:05.320
In the next release,
what we plan to do is to provide

00:50:05.320 --> 00:50:08.160
support for two-tier applications.

00:50:08.160 --> 00:50:12.810
So what we've done is we've actually
allowed you to eliminate the middle tier,

00:50:12.810 --> 00:50:16.800
to cut out the middle man, so to speak,
so that there's no application server.

00:50:16.800 --> 00:50:21.440
And the client will just directly
access the data from the database.

00:50:21.910 --> 00:50:24.400
So that will be coming
in the next release,

00:50:24.440 --> 00:50:26.640
or what we plan to put
in the next release.

00:50:26.670 --> 00:50:29.960
Hey, Bob.

00:50:29.960 --> 00:50:33.640
There will also be a number of new
controllers which help you to add

00:50:33.640 --> 00:50:36.440
more polish to your user interface.

00:50:36.460 --> 00:50:39.140
There's a really fun-to-use
split view controller,

00:50:39.140 --> 00:50:42.500
and there's actually an extremely
powerful tree view controller,

00:50:42.550 --> 00:50:46.840
which we saw in the direct web services
assistant demo in the previous session,

00:50:46.910 --> 00:50:50.360
and which is a controller that
I like to use quite a lot.

00:50:50.360 --> 00:50:52.610
And so for those of you who
have been waiting a long time

00:50:52.610 --> 00:50:56.290
for a tree view controller,
you won't have to wait much longer.

00:50:57.340 --> 00:51:02.380
All things willing.

00:51:02.380 --> 00:51:02.380
And along the way...

00:51:03.340 --> 00:51:05.500
Which is great for you, by the way.

00:51:05.530 --> 00:51:09.300
A number of enhancements have
been made to the dynamic layout.

00:51:09.340 --> 00:51:11.910
Issues such as having to do
with the resizing of widgets or

00:51:11.910 --> 00:51:15.410
the placement of widgets have,
for the most part, been resolved.

00:51:15.480 --> 00:51:17.460
So this is, again,
work that you didn't want to do,

00:51:17.460 --> 00:51:20.510
that you shouldn't have to do,
and that you will no longer have to do.

00:51:20.510 --> 00:51:24.090
Thank you.

00:51:26.080 --> 00:51:30.820
I wasn't the only one who did it,
but I don't mind taking the credit.

00:51:30.820 --> 00:51:33.820
And as always,
we are looking for new ways to

00:51:33.820 --> 00:51:36.140
better support web services.

00:51:36.140 --> 00:51:39.320
Because again, web services are not
just a really hot topic,

00:51:39.540 --> 00:51:43.260
but going to be very
important sooner than later.

00:51:43.260 --> 00:51:46.590
And so the EO Web Services Controller in
my demo that I showed you was

00:51:46.590 --> 00:51:49.900
just one example of some of the
things that we're thinking of doing.

00:51:49.940 --> 00:51:51.950
There are probably a
lot more that we can do.

00:51:51.960 --> 00:51:54.740
But again,
we're going to try our hardest to

00:51:54.740 --> 00:52:00.280
make WebObjects the best platform
for developing web services and the

00:52:00.280 --> 00:52:03.280
applications that use those web services.

00:52:03.280 --> 00:52:04.200
So in summary,

00:52:04.440 --> 00:52:07.150
I would just like to say that
Direct to Java Client is truly

00:52:07.160 --> 00:52:10.120
a developer's best friend,
because it makes your

00:52:10.120 --> 00:52:11.880
life a whole lot easier.

00:52:12.070 --> 00:52:14.980
The key thing about Direct to
Java Client is that it dynamically

00:52:14.980 --> 00:52:19.800
generates user interface based
on information in the data model.

00:52:20.850 --> 00:52:24.930
Direct to Java Client comes
with a great deal of controller

00:52:24.930 --> 00:52:29.700
classes that provide pre-built,
pre-tested functionality for you.

00:52:29.920 --> 00:52:34.570
Again, that's probably a key advantage
of using Direct to Java Client,

00:52:34.580 --> 00:52:36.690
that you get so much for free.

00:52:37.470 --> 00:52:41.350
Finally, Direct to Java Client has been
designed for extensibility.

00:52:41.650 --> 00:52:44.320
There are a number of powerful
customization techniques so that

00:52:44.370 --> 00:52:47.060
you can create precisely the kind
of user interface that you desire.

00:52:47.060 --> 00:52:47.780
Thank you.

00:52:53.000 --> 00:52:56.630
If you haven't already,
there is a WebObjects lab in room L,

00:52:56.630 --> 00:53:01.600
and you can still attend today,
and also Thursday and Friday,

00:53:01.600 --> 00:53:06.700
so you can start to experiment with
Direct to Java Client right here at WWDC.

00:53:06.700 --> 00:53:10.700
In terms of a roadmap,
some of the sessions that you can

00:53:10.700 --> 00:53:14.840
still attend include the session
that's coming up in this room,

00:53:14.840 --> 00:53:16.590
the WebObjects Java Client session.

00:53:16.600 --> 00:53:19.540
And I strongly recommend,
for those of you who have a little bit of

00:53:19.540 --> 00:53:24.100
background in EOF and want to learn more,
to attend the Advanced Enterprise Objects

00:53:24.100 --> 00:53:25.660
Frameworks session.

00:53:25.660 --> 00:53:28.780
Because Direct to Java Client,
it turns out,

00:53:28.860 --> 00:53:33.200
is actually a very good tool for
testing your business logic and

00:53:33.550 --> 00:53:37.700
some of the advanced techniques
that you want to use with EOF.

00:53:39.660 --> 00:53:43.680
can contact Tony and Bob if you
have any comments or questions

00:53:43.680 --> 00:53:45.590
about Direct to Java Client.

00:53:45.650 --> 00:53:48.080
And for training, support,
and certification,

00:53:48.170 --> 00:53:49.580
you can contact iServices.

00:53:51.950 --> 00:53:54.000
For more information,
there's a great deal of

00:53:54.000 --> 00:53:56.600
documentation online.

00:53:56.950 --> 00:53:58.930
By now, you should be familiar
with all the links.

00:53:59.020 --> 00:54:01.100
Interestingly,
there are also a number of user groups

00:54:01.100 --> 00:54:04.340
or other support groups online that have
a great deal of information as well.

00:54:04.340 --> 00:54:09.230
And I strongly recommend that you
read Java Client Desktop Applications.

00:54:09.230 --> 00:54:11.220
This is a terrific resource.

00:54:11.220 --> 00:54:14.670
It has a lot more information,
a lot more detail about things like

00:54:14.670 --> 00:54:18.780
programmatic customization techniques,
some of which I couldn't cover in as

00:54:18.880 --> 00:54:20.690
much detail as I would have liked.

00:54:20.780 --> 00:54:22.260
Had my time with you been endless.

00:54:22.260 --> 00:54:24.490
It's all right here in
this great reference.

00:54:26.100 --> 00:54:29.280
To access the documentation,
most of it can be accessed online.

00:54:29.280 --> 00:54:33.020
Some of it comes on the CD, in the box,
or can be printed on demand.

00:54:33.020 --> 00:54:36.540
It's a wealth of great documentation now,
and we're adding more all the time.