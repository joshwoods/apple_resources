WEBVTT

00:00:03.610 --> 00:00:05.500
Hi, everybody.

00:00:05.500 --> 00:00:08.300
Welcome to session 208, MLTE,
Unicode Text Engine.

00:00:08.300 --> 00:00:10.200
I know it's a bit early,
but I think you'll

00:00:10.200 --> 00:00:12.330
appreciate the content today.

00:00:13.750 --> 00:00:16.700
My name is Xavier Legro and
I work in Developer Relations.

00:00:16.700 --> 00:00:18.360
I'm the Mac OS X Evangelist.

00:00:18.510 --> 00:00:22.180
And I'm going to walk you through
the introduction on what the

00:00:22.180 --> 00:00:24.250
session is going to be today.

00:00:24.930 --> 00:00:28.740
We'll have a quick overview on MLTE,
the Multilingual Text Engine.

00:00:28.820 --> 00:00:33.340
We'll walk you through a
couple of concepts around MLTE.

00:00:33.760 --> 00:00:36.650
And these concepts are very important
for you to understand if you're new on

00:00:36.650 --> 00:00:41.900
the platform or you're new to MLTE in the
sense that the approach in using MLTE and

00:00:41.900 --> 00:00:46.140
using TextEdit is very different.

00:00:46.230 --> 00:00:49.720
And once you understand these concepts,
I think you'll get the

00:00:49.720 --> 00:00:51.450
best of MLTE very quickly.

00:00:51.880 --> 00:00:55.980
We'll go through some of the basic tasks:
how to set styles, attributes,

00:00:56.040 --> 00:00:59.240
how to pass change text, set text,
create a new object.

00:00:59.340 --> 00:01:02.160
And of course we'll have
another level where we'll go

00:01:02.160 --> 00:01:04.040
through some more complex tasks.

00:01:04.130 --> 00:01:08.610
And I think some of you that are
probably using MLTE already will be very,

00:01:08.780 --> 00:01:13.150
very interested in actually the feature
set that we'll be adding to the next

00:01:13.290 --> 00:01:17.270
version of MLTE in Jaguar Mac OS 10.2.

00:01:20.100 --> 00:01:26.010
Alright, before we go into the details,
let me give you a quick overview on where

00:01:26.010 --> 00:01:31.810
MLTE stands in the system and on what
it relies on in order to do its job.

00:01:32.570 --> 00:01:35.400
First,
you can see on the bottom is that the

00:01:35.440 --> 00:01:37.360
rendering that MLTE is using is Quartz.

00:01:37.550 --> 00:01:41.770
Quartz is our 2D rendering engine,
and MLTE takes full use of

00:01:41.770 --> 00:01:44.020
this 2D rendering engine.

00:01:44.030 --> 00:01:47.920
The first aspect that you see on the
screen is the beautiful anti-aliasing.

00:01:47.950 --> 00:01:50.260
So remember, if you're using TextEdit,
you're going to get the

00:01:50.330 --> 00:01:51.550
quick joint aliasing.

00:01:51.750 --> 00:01:55.020
MLTE, by default,
will be using actually Quartz,

00:01:55.130 --> 00:01:57.580
so you get the nice anti-aliasing.

00:01:58.400 --> 00:02:02.710
MLTE is based in order to do
its UniCode layout on Hatsui,

00:02:03.000 --> 00:02:05.600
Apple-type services for UniCode imaging.

00:02:05.700 --> 00:02:09.640
And I'm sure you all went to
the Hatsui session on Tuesday.

00:02:09.760 --> 00:02:12.610
But it's very important to
understand that in fact MLTE is a

00:02:12.710 --> 00:02:15.440
text engine built on top of Hatsui.

00:02:15.540 --> 00:02:19.730
So for you as a Carbon developer,
that's probably the main way to

00:02:19.740 --> 00:02:24.200
achieve support for all these new
languages we introduced with Jaguar.

00:02:24.290 --> 00:02:28.110
And for you as a Carbon developer,
it's the only way to actually have

00:02:28.330 --> 00:02:33.490
a quick text engine that will have
support for UniCode input and layout.

00:02:34.110 --> 00:02:38.190
MLTE offers many,
many different features and maybe the

00:02:38.190 --> 00:02:42.600
feature set is too heavy for you and
maybe your needs are more limited.

00:02:42.710 --> 00:02:45.000
And in this case,
you will have different solutions.

00:02:45.000 --> 00:02:47.450
You could use actually
the UniCode control,

00:02:47.500 --> 00:02:50.340
which actually we created in
Mac OS X from feedback that

00:02:50.340 --> 00:02:54.600
developers gave us a couple years ago,
actually at WWDC.

00:02:54.760 --> 00:03:00.500
So you could actually create a UniCode
text engine by using the toolbox.

00:03:00.580 --> 00:03:03.100
So you know, like the way you do,
like create new control and you'll

00:03:03.110 --> 00:03:04.800
have a few parts of the TextEdit tag.

00:03:04.950 --> 00:03:08.510
Well, on Mac OS X,
remember that you can switch very

00:03:08.670 --> 00:03:13.360
quickly to have an MLTEdit field by
switching the tag to use the CAI thing,

00:03:13.360 --> 00:03:15.500
CAI UniCode Text Edit Control.

00:03:15.500 --> 00:03:19.500
I encourage you to look at the
Appearance Manager for more information.

00:03:19.920 --> 00:03:23.220
Now, as a developer,
you probably have two different needs in

00:03:23.230 --> 00:03:25.750
order to display text on the platform.

00:03:25.750 --> 00:03:28.800
And here on the top,
we try to distinguish that between using

00:03:28.800 --> 00:03:32.030
static text and using editing text.

00:03:32.580 --> 00:03:37.220
If you need very basic fields,
edit fields, such as, you know,

00:03:37.220 --> 00:03:39.700
if you want to enter the name
of one of your customers,

00:03:39.710 --> 00:03:43.880
if you want to just have --
enter some data on a single line,

00:03:44.410 --> 00:03:46.410
you could use directly
the Toolbox control.

00:03:46.580 --> 00:03:47.450
It's very easy.

00:03:47.790 --> 00:03:51.100
If you're using TextEdit right now,
it's going to be an easy switch.

00:03:51.170 --> 00:03:52.170
It's pretty straightforward.

00:03:52.320 --> 00:03:55.890
And that gives you all
the feature set of MLTE.

00:03:56.140 --> 00:03:58.900
Now, if you have needs a little
bit more elaborate and you

00:03:58.970 --> 00:04:01.940
need to have scroll bars,
you need to support drag and drop,

00:04:01.940 --> 00:04:06.680
maybe embedded objects such as pictures,
sound, movies, I would encourage you

00:04:06.760 --> 00:04:08.360
to use MLTE directly.

00:04:08.500 --> 00:04:11.930
MLTE is a set of APIs that is very,
very easy to use and we have a

00:04:11.930 --> 00:04:15.670
lot of sample code actually to
help you migrate from the previous

00:04:15.770 --> 00:04:17.880
TextEdit implementation to MLTE.

00:04:18.000 --> 00:04:20.480
There is one thing here
that doesn't appear,

00:04:20.480 --> 00:04:21.500
it's TextEdit.

00:04:21.510 --> 00:04:25.070
It's very important for you to
understand that TextEdit was what we

00:04:25.130 --> 00:04:28.640
had on Mac OS 9 and moving forward,
MLTE is actually a replacement

00:04:28.640 --> 00:04:30.870
for TextEdit on 10.

00:04:31.270 --> 00:04:33.490
Now, as I told you,
you probably have two different needs:

00:04:33.620 --> 00:04:36.380
text editing and static text.

00:04:36.470 --> 00:04:40.180
For the static text, once again,
you have two different choices.

00:04:40.200 --> 00:04:43.920
The first that comes to mind, of course,
is to use the Draw Theme Text Box APIs,

00:04:43.980 --> 00:04:47.010
which are in the Appearance Manager,
and I'm sure you're all

00:04:47.010 --> 00:04:48.510
now familiar with that.

00:04:48.590 --> 00:04:51.020
The second way, if you need to do,
for instance,

00:04:51.080 --> 00:04:54.690
rotation or you need to pass
specific style attributes and you

00:04:54.690 --> 00:04:57.710
want to manage the styles yourself,
or you want to do alignment,

00:04:57.710 --> 00:05:01.870
justification, and flushness,
another solution for you is actually to

00:05:01.870 --> 00:05:07.140
use one of the APIs in the MLTE headers
called TXN Draw UniCode Text Box.

00:05:07.140 --> 00:05:09.260
This API comes actually
in two different flavors:

00:05:09.260 --> 00:05:11.540
one takes a CFString,
and the other one takes like a

00:05:11.540 --> 00:05:13.100
UniCode pointer and a length.

00:05:13.100 --> 00:05:16.160
And I think we'll talk later, actually,
in the presentation about these APIs.

00:05:16.160 --> 00:05:18.380
But remember,
it's really about choices here.

00:05:18.380 --> 00:05:21.110
And you, as a developer,
your goal is to make sure

00:05:21.120 --> 00:05:24.660
that your application displays
UniCode text correctly.

00:05:24.660 --> 00:05:27.580
And here,
we're offering you different solutions.

00:05:28.600 --> 00:05:31.740
Important to note too that if
these two APIs are not enough,

00:05:31.790 --> 00:05:35.690
you can of course always go in
that three layer and use that three

00:05:35.690 --> 00:05:38.390
APIs to display your static text.

00:05:40.700 --> 00:05:44.810
All right, let's go now on the concepts
and how you as a developer are

00:05:44.860 --> 00:05:46.600
going to take advantage of MLTE.

00:05:46.600 --> 00:05:49.460
And for this,
I'd like to invite on stage Rick Fabrick,

00:05:49.490 --> 00:05:53.170
who is actually a software
engineer in the Toolbox group.

00:05:53.170 --> 00:05:53.170
Thank you.

00:05:56.850 --> 00:05:57.800
Thanks, Xavier.

00:05:57.800 --> 00:05:59.500
And good morning, everybody.

00:05:59.640 --> 00:06:02.930
So, Multilingual Text Engine.

00:06:03.320 --> 00:06:06.440
What is MLTE and what can it do for me?

00:06:06.480 --> 00:06:09.010
What new things do you
plan on adding for Jaguar?

00:06:09.220 --> 00:06:13.590
And what do I have to do to get
text from my customers using MLTE?

00:06:13.620 --> 00:06:18.810
I'm sure that most of you would like at
least one of these questions answered,

00:06:18.820 --> 00:06:23.030
so that's what I'm going to do for you
in the beginning of our presentation,

00:06:23.030 --> 00:06:23.030
the overview.

00:06:23.030 --> 00:06:23.030
So let's start there.

00:06:23.710 --> 00:06:26.600
MLTE, in short,
is the carbon-based UniCode

00:06:26.600 --> 00:06:28.950
text engine for the Mac OS X.

00:06:29.210 --> 00:06:31.650
It's the multilingual
successor to TextEdit,

00:06:31.770 --> 00:06:34.980
as Xavier mentioned,
which was the text engine that Apple has

00:06:34.980 --> 00:06:37.600
used over the last decade and a half.

00:06:37.700 --> 00:06:43.060
Now, MLTE has been designed such that
most or a lot of the standard user

00:06:43.060 --> 00:06:49.100
interactions with your text objects
are handled automatically by MLTE.

00:06:49.250 --> 00:06:51.600
What you see here is a list
of some of those things.

00:06:51.790 --> 00:06:54.490
Now, when I say basic,
I mean basic to your clients,

00:06:54.490 --> 00:06:55.600
your customers.

00:06:55.600 --> 00:06:59.630
Some of these are non-trivial
to implement by you.

00:06:59.850 --> 00:07:02.700
So we've taken a lot of
that burden on for you.

00:07:02.710 --> 00:07:05.340
And the most important
of these is text input.

00:07:05.340 --> 00:07:08.000
The input of text can be either
directly from a keyboard or

00:07:08.080 --> 00:07:09.600
indirectly through an input method.

00:07:09.600 --> 00:07:12.340
So if you're using Kotori and
you're typing in Japanese,

00:07:12.340 --> 00:07:15.150
we'll handle that for you automatically,
and we'll do so with an inline

00:07:15.150 --> 00:07:18.130
session within the text field itself.

00:07:18.580 --> 00:07:23.190
Now, the associated rendering of that
text we will be using Apple's Atsui,

00:07:23.190 --> 00:07:26.260
a powerful text services layout.

00:07:26.330 --> 00:07:29.610
And for rendering,
we are going to use quartz

00:07:30.100 --> 00:07:33.060
imaging so that you get the nice
quartz anti-aliasing to match the

00:07:33.140 --> 00:07:35.330
text and the rest of the system.

00:07:35.460 --> 00:07:37.570
There's a couple of other
things we'll handle for you.

00:07:37.820 --> 00:07:39.860
Scroll bars, drag and drop.

00:07:40.070 --> 00:07:42.590
You can have us create our own scroll
bars and handle scrolling for you.

00:07:42.600 --> 00:07:44.920
Most cases, you won't have to deal
with scroll bars at all.

00:07:45.040 --> 00:07:46.610
We'll do it for you.

00:07:46.750 --> 00:07:50.810
So what I'd like to do now is to go
through a really quick demo of exactly

00:07:50.810 --> 00:07:55.040
what it is you'll need to do to get an
application with all of these features.

00:07:55.170 --> 00:07:59.010
So if I can bring demo two
up on the screen to my left.

00:08:10.540 --> 00:08:16.640
So, what I want to show you first is,
this is a basic application.

00:08:16.640 --> 00:08:20.070
It's doing nothing more
than bringing in a menu bar.

00:08:20.170 --> 00:08:22.970
It's creating a new window, showing it.

00:08:23.240 --> 00:08:25.300
and running Application Event Loop.

00:08:25.300 --> 00:08:28.720
And this will give you a
basic menu bar with menus.

00:08:28.720 --> 00:08:31.260
You can... What did I do here?

00:08:31.260 --> 00:08:32.210
Oh.

00:08:32.240 --> 00:08:33.100
Okay.

00:08:33.110 --> 00:08:38.130
What I forgot to do is change...

00:08:39.240 --> 00:08:40.200
I forgot to attach the file.

00:08:40.200 --> 00:08:40.490
Alright.

00:08:40.710 --> 00:08:44.700
So, you can resize the window,
move the window around.

00:08:44.750 --> 00:08:46.300
Very simple.

00:08:47.860 --> 00:08:49.680
So, now you have your application
and you have your window.

00:08:49.740 --> 00:08:52.530
You want to add your text object.

00:08:52.630 --> 00:08:54.240
There's only three things that
you're going to need to do.

00:08:54.260 --> 00:08:56.240
Let me scroll down a little.

00:08:56.810 --> 00:08:59.300
You need to initialize Text Engine.

00:08:59.400 --> 00:09:03.930
You need to create your new
object and then focus the object.

00:09:06.500 --> 00:09:09.690
So now what I have,
again I did the same exact thing.

00:09:09.700 --> 00:09:12.410
I forgot to touch the file.

00:09:15.940 --> 00:09:17.560
So now I can start typing.

00:09:17.580 --> 00:09:22.560
I can switch to Kotori and
try to type some Japanese.

00:09:22.620 --> 00:09:24.260
Hopefully that's not garbage.

00:09:24.470 --> 00:09:26.290
Resize.

00:09:26.630 --> 00:09:31.840
Now what I want to demo
here is drag and drop.

00:09:31.860 --> 00:09:35.170
You can drag in a file
from an external source.

00:09:38.500 --> 00:09:40.880
When you resize the window,
we'll reflow the text

00:09:40.880 --> 00:09:42.460
for you automatically.

00:09:42.460 --> 00:09:44.250
We'll handle scrolling
automatically for you.

00:09:44.250 --> 00:09:45.800
Let's see.

00:09:45.800 --> 00:09:47.480
Is there anything else
I wanted to show you?

00:09:47.480 --> 00:09:50.340
Oh, well,
drag and drop within the object,

00:09:50.340 --> 00:09:51.290
obviously.

00:09:51.460 --> 00:09:52.640
All right.

00:09:52.750 --> 00:09:59.540
So with these three lines of code,
you get all of that built in for you.

00:09:59.580 --> 00:10:01.830
Okay,
so if I could bring the slides up again.

00:10:06.180 --> 00:10:09.670
Now, in most cases,
this is about 70% of everything that

00:10:09.670 --> 00:10:12.040
you'll need to do in order to use MLTE.

00:10:12.080 --> 00:10:14.180
Now, to be more practical,
you're going to want to at least

00:10:14.350 --> 00:10:17.990
get your text from those objects
or at least save it to a file.

00:10:18.070 --> 00:10:20.810
So to support that,
we provide you with a simple

00:10:20.910 --> 00:10:24.250
set of APIs to do things
such as opening a document,

00:10:24.400 --> 00:10:26.810
printing your text.

00:10:26.890 --> 00:10:28.890
Most of the edit commands
we'll handle for you:

00:10:28.960 --> 00:10:31.990
copy, paste, undo, redo,
select all things like that.

00:10:32.180 --> 00:10:34.240
If you want to supply your
customers with a font menu,

00:10:34.240 --> 00:10:35.770
you can ask us to make one for you.

00:10:35.830 --> 00:10:38.610
We can even handle that
font menu if you like.

00:10:40.350 --> 00:10:43.700
We supply a search mechanism so that
you can export to your clients a way

00:10:43.700 --> 00:10:50.020
to search for text in your text fields
and some other things as well here.

00:10:50.560 --> 00:10:54.870
At SUI, which is Apple's type
services for UniCode imaging,

00:10:55.010 --> 00:10:58.980
it offers a very powerful set
of advanced topography features.

00:10:59.030 --> 00:11:01.760
So, for example,
let's say you have a text field and you

00:11:01.760 --> 00:11:04.290
want to display a chemical equation.

00:11:04.360 --> 00:11:08.330
You may want to need more fine
control over exactly where

00:11:08.440 --> 00:11:10.140
some of the characters go.

00:11:10.700 --> 00:11:12.160
Advanced typography features
allow you to do that.

00:11:12.160 --> 00:11:14.450
Another example would be
if you're designing a fancy

00:11:14.820 --> 00:11:17.800
invitation and you want,
like on the sides of the text,

00:11:17.820 --> 00:11:22.230
really nice swatches
or you want ligatures.

00:11:22.310 --> 00:11:27.040
Since MLTE is well integrated with ATSUI,
we can provide you a very easy

00:11:27.170 --> 00:11:29.200
interface to those powerful features.

00:11:29.200 --> 00:11:30.980
And a little later on
in this presentation,

00:11:30.980 --> 00:11:34.770
we'll show you exactly what you would
need to do to take advantage of these.

00:11:34.840 --> 00:11:38.440
And finally, if you have a couple of
text fields in your window,

00:11:38.440 --> 00:11:40.470
this may not be an issue for you.

00:11:40.570 --> 00:11:43.210
But in a lot of cases,
you may want to dump a lot of

00:11:43.230 --> 00:11:44.940
information in your text fields.

00:11:45.010 --> 00:11:48.650
Maybe you're trying to view
a binary file or providing,

00:11:48.850 --> 00:11:54.280
you want to see, let's see, a script,
a huge script or something like that.

00:11:54.520 --> 00:11:58.400
Well, MLTE has no set limit to the amount
of data you can put in its objects.

00:11:58.420 --> 00:12:02.560
So basically you're limited by the amount
of memory you have in your computer.

00:12:03.370 --> 00:12:06.630
So there is no 32K text limit in MLTE.

00:12:06.780 --> 00:12:08.330
Yay.

00:12:08.380 --> 00:12:11.200
That's not news, but it's still good.

00:12:11.400 --> 00:12:16.670
Okay, so new features in Jaguar.

00:12:17.700 --> 00:12:21.710
Last year's WWDC and over the past year,
you've given us a lot of feedback

00:12:21.860 --> 00:12:26.720
on some of the features you'd
like us to add to have MLTE more

00:12:27.100 --> 00:12:28.720
helpful to your particular applications.

00:12:28.730 --> 00:12:30.640
So what I'm going to
do is a brief overview,

00:12:30.640 --> 00:12:34.060
a brief listing of what we
plan on adding for Jaguar.

00:12:34.060 --> 00:12:37.910
And let me preface this by saying
that later on in this presentation,

00:12:37.910 --> 00:12:40.280
we'll go into more detail
on each of these things.

00:12:40.280 --> 00:12:43.930
So the first of these is
automatic URL detection.

00:12:43.940 --> 00:12:47.290
So if you have a text field
and there happens to be

00:12:47.360 --> 00:12:50.330
somewhere in the text a URL,
right now, what your customers,

00:12:50.330 --> 00:12:53.070
if they wanted to see that for,
let's say, it's a website,

00:12:53.070 --> 00:12:57.750
they'd have to select the entire address,
copy it, go to their web browser, wait,

00:12:57.960 --> 00:13:01.420
click on the URL text field, paste,
hit return.

00:13:01.420 --> 00:13:04.340
Wouldn't it be nice if all
they had to do is command click

00:13:04.340 --> 00:13:07.150
somewhere in that URL and have
the web browser automatically

00:13:07.150 --> 00:13:08.400
come up and go to that website?

00:13:08.400 --> 00:13:11.330
Well, we do plan on adding
that for you in Jaguar.

00:13:11.330 --> 00:13:16.470
Now, in addition to that,
we also will allow you to tag particular

00:13:16.470 --> 00:13:18.460
ranges of text with your own URL.

00:13:18.460 --> 00:13:21.680
You'd give us the range of text,
the start and the end offset,

00:13:21.680 --> 00:13:25.520
and the URL,
and we'll basically do the same thing.

00:13:25.540 --> 00:13:27.700
thing when they click on that.

00:13:28.940 --> 00:13:31.400
The second thing is monostyle text.

00:13:31.480 --> 00:13:36.840
So let's say you have a text field,
and you've designed it perfectly,

00:13:36.840 --> 00:13:41.190
you've chosen the right font,
the right font size to make it look

00:13:41.190 --> 00:13:44.210
exactly the way you want it to look,
and then now your customer comes

00:13:44.280 --> 00:13:48.720
along and the first thing they do is
they paste from an external source.

00:13:48.720 --> 00:13:52.820
Well, MLTE supports multi-styles,
so of course for whatever reason,

00:13:52.820 --> 00:13:56.090
their text is 72 point
and it's purple and some

00:13:56.400 --> 00:14:09.300
[Transcript missing]

00:14:09.810 --> 00:14:11.090
Scrolling support.

00:14:11.300 --> 00:14:14.350
So as I said before,
MLTE can have its own scroll bars,

00:14:14.420 --> 00:14:16.460
and in most cases that's
just fine for you.

00:14:16.460 --> 00:14:20.220
But there are some cases where you
may want to have your own controls.

00:14:20.320 --> 00:14:22.050
They don't even have to be scroll bars.

00:14:22.170 --> 00:14:25.070
So we're going to supply away some
hooks that allow you to control

00:14:25.490 --> 00:14:27.220
the scrolling and vice versa.

00:14:27.220 --> 00:14:32.930
When the client scrolls
in the text field,

00:14:32.930 --> 00:14:33.370
we'll tell you and you
can update your controls.

00:14:34.960 --> 00:14:37.800
Okay,
so let's go back to your text field.

00:14:38.040 --> 00:14:40.710
If you set some default text,
maybe you want to set some

00:14:40.710 --> 00:14:42.290
default text in your text field.

00:14:42.390 --> 00:14:44.630
Well, of course,
the first thing that happens is your

00:14:44.630 --> 00:14:46.040
client's going to do a Command-Z.

00:14:46.040 --> 00:14:47.870
I don't know why they would do that,
but they will do that.

00:14:47.990 --> 00:14:49.790
And all your text goes away.

00:14:49.910 --> 00:14:52.710
And it's a little disconcerting
because your customer isn't

00:14:52.720 --> 00:14:54.430
the one who put the text there.

00:14:54.560 --> 00:14:59.040
So we're going to allow you
to clear the undo stack,

00:14:59.040 --> 00:15:01.230
and anything that happened up
to that point can't be undone.

00:15:04.810 --> 00:15:08.940
Oh yes, and we will be adding support
for the mouse scroll wheel.

00:15:08.980 --> 00:15:11.250
Now as I said before,
we'll go into more detail on each

00:15:11.250 --> 00:15:14.750
of these new features and show
you exactly what you would need

00:15:14.800 --> 00:15:16.570
to do to take advantage of them.

00:15:18.280 --> 00:15:24.590
So what I'd like to do now
is go to the next slide,

00:15:24.590 --> 00:15:24.590
please.

00:15:25.990 --> 00:15:27.840
Go over some basic concepts in MLTE.

00:15:27.930 --> 00:15:30.110
Now I know that a lot of you in
the audience are familiar with

00:15:30.190 --> 00:15:33.460
MLTE already and are probably well
familiar with most of these concepts.

00:15:33.460 --> 00:15:37.330
But there are some who are new to
MLTE and knowing these concepts

00:15:37.330 --> 00:15:41.200
will give you a better understanding
of exactly what you'll need to do

00:15:41.200 --> 00:15:43.400
to interact with your text fields.

00:15:43.400 --> 00:15:47.540
So the first thing is that the
TxInObject is an opaque data structure.

00:15:47.540 --> 00:15:50.370
You won't be able to go inside
and inspect it or change the

00:15:50.370 --> 00:15:52.400
information in it directly.

00:15:52.400 --> 00:15:52.890
But that's alright.

00:15:52.890 --> 00:15:56.780
We'll supply you a set of APIs that allow
you to do anything that you want to do.

00:15:56.820 --> 00:15:59.330
And of course we've done this so
that we can add those new features

00:15:59.390 --> 00:16:03.400
that you request without breaking
your existing applications.

00:16:03.900 --> 00:16:07.820
Alright, so there are two basic
types of MLTE objects.

00:16:07.910 --> 00:16:12.820
There's a full window object and this,
your text field will take

00:16:12.910 --> 00:16:13.900
up the entire window.

00:16:13.900 --> 00:16:17.890
And then there's also a pane object
spelled P-A-N-E and it will only

00:16:17.890 --> 00:16:20.430
take up a portion of your window.

00:16:20.570 --> 00:16:23.600
And you specify which ones
of these will be created when

00:16:23.600 --> 00:16:25.400
you create your text field.

00:16:26.080 --> 00:16:28.830
Now there are two types of settings
you can make on your objects.

00:16:28.980 --> 00:16:32.360
There's object controls,
and these change the behavior

00:16:32.370 --> 00:16:33.780
of the entire object.

00:16:33.890 --> 00:16:36.720
And there are also type attributes,
style attributes,

00:16:36.810 --> 00:16:42.180
and they'll change the appearance of
particular ranges within your text field.

00:16:42.420 --> 00:16:46.170
And I'll go into a little more
detail on this in just a second.

00:16:46.350 --> 00:16:48.200
As well as, Carmen events.

00:16:48.530 --> 00:16:52.590
So, you may have learned yesterday
how powerful Carbon events can be,

00:16:52.610 --> 00:16:55.310
and what we'll do is we'll
install several of them,

00:16:55.320 --> 00:16:58.580
the Carbon event handlers,
so that we can handle some of those

00:16:58.580 --> 00:17:02.820
basic operations that I mentioned before,
like text editing and scrolling.

00:17:02.930 --> 00:17:09.770
We'll handle that automatically for you,
and I will list a couple of those, well,

00:17:09.770 --> 00:17:09.770
which ones we install
automatically for you.

00:17:10.580 --> 00:17:14.790
I'd like to start though with
some examples of object controls.

00:17:15.050 --> 00:17:19.860
First of all, the API you want to use is
TXinSetTXinObjectControls.

00:17:20.020 --> 00:17:22.590
Now this API was designed so
that you can pass in multiple

00:17:22.590 --> 00:17:26.170
controls at the same time,
so you're passing in an array of them.

00:17:27.760 --> 00:17:30.780
The first example that I want to show
you is you'll notice in the first

00:17:30.780 --> 00:17:33.390
paragraph two missing glyph symbols.

00:17:33.700 --> 00:17:40.700
"We've got two rectangles,
and what that means is that the

00:17:40.790 --> 00:17:44.990
font chosen to display those glyphs,
those characters, well, they can't.

00:17:44.990 --> 00:17:44.990
They don't have those particular glyphs.

00:17:44.990 --> 00:17:44.990
So if you turn font substitution
on with a single tag here,

00:17:45.400 --> 00:17:50.160
What Atsui will do is when it detects
that a missing glyph symbol will appear,

00:17:50.160 --> 00:17:53.700
instead of using the particular font,
it will go and search your entire

00:17:53.700 --> 00:17:56.660
system for a font that can display it,
and will use it instead.

00:17:56.770 --> 00:18:01.610
Now this is really great if you allow
your customers to open documents and you

00:18:01.610 --> 00:18:04.420
have no idea what content is in the file.

00:18:04.520 --> 00:18:05.180
You don't have to worry about it.

00:18:05.330 --> 00:18:08.080
We'll have Atsui do all the work for you.

00:18:08.310 --> 00:18:11.440
Now the second example is justification.

00:18:11.440 --> 00:18:13.120
I'm sure you're all aware
what justification is,

00:18:13.150 --> 00:18:17.790
but we supply tags that allow
you to change the justification

00:18:17.900 --> 00:18:19.040
for the entire document.

00:18:19.110 --> 00:18:21.760
So you have left, right,
center justification,

00:18:21.770 --> 00:18:23.300
and full justification.

00:18:23.300 --> 00:18:28.290
Alright, so the final example here that
I want to show you is Word Wrap.

00:18:28.350 --> 00:18:32.350
By default, MLTE has Word Wrap turned on,
so in regular document,

00:18:32.350 --> 00:18:35.300
in your text fields,
we'll wrap the text for you.

00:18:35.300 --> 00:18:38.840
But if you're supplying a programming
interface or something like that,

00:18:38.840 --> 00:18:41.300
you may not want that,
so you can turn that off.

00:18:41.300 --> 00:18:45.280
So with single tags,
you can get a lot of behavior.

00:18:45.360 --> 00:18:49.300
You can look in our header file to
find some of the other controls.

00:18:49.300 --> 00:18:52.390
So style attributes is the next thing.

00:18:52.900 --> 00:18:56.040
Some examples of these would be the font,
the color, the size, the point size,

00:18:56.040 --> 00:18:57.010
things like that.

00:18:57.120 --> 00:19:00.040
The API you would use for this
would be TXInsetTypeAttributes.

00:19:00.120 --> 00:19:03.230
Unlike the previous one,
you pass in an array of these.

00:19:03.760 --> 00:19:06.590
Now, another thing that I want you
to understand is that alongside

00:19:06.590 --> 00:19:12.080
of the data that we maintain,
we also maintain an array of style runs.

00:19:13.240 --> 00:19:16.600
What you see here is a sentence,
all the text has one style,

00:19:16.610 --> 00:19:19.150
so we have one style run in our array.

00:19:19.530 --> 00:19:21.960
And it's associated with all the text.

00:19:21.980 --> 00:19:24.360
So if the client comes along,
if your customer changes the

00:19:24.360 --> 00:19:28.200
style of some of the text,
we will now have two style runs.

00:19:28.200 --> 00:19:32.240
And the first here in this example
will be associated with the first

00:19:32.270 --> 00:19:36.500
half of the sentence and the plain
style basically gets shrunk down.

00:19:36.680 --> 00:19:40.920
And so on, they change the color,
make some bold.

00:19:40.920 --> 00:19:44.510
So basically,
all of the text in a particular

00:19:44.510 --> 00:19:47.010
style run has the same style.

00:19:47.090 --> 00:19:50.160
And all the text in your document
is associated with some style run.

00:19:50.190 --> 00:19:53.700
Now this is helpful if you supply
a UI to your customers that

00:19:53.700 --> 00:19:55.320
allows them to change the style.

00:19:55.320 --> 00:19:59.720
We supply some APIs that allow
you to count the number of styles

00:19:59.720 --> 00:20:04.740
within a particular run and get the
style information from each of those

00:20:04.910 --> 00:20:08.360
so that you can maintain your UI,
whether it be a menu

00:20:08.360 --> 00:20:10.390
or a floating palette,
something like that.

00:20:10.400 --> 00:20:13.560
So that it will always be
maintained and accurate up to

00:20:13.560 --> 00:20:15.590
date to the current selection.

00:20:17.310 --> 00:20:19.800
All righty.

00:20:19.950 --> 00:20:22.070
So, finally here, Carbon Events.

00:20:22.210 --> 00:20:24.140
As I said before,
we'll handle the text input

00:20:24.140 --> 00:20:24.960
for you automatically.

00:20:24.960 --> 00:20:27.960
We do so by installing
Text Input Event Handlers.

00:20:28.100 --> 00:20:31.700
This way, you don't have to call
TXN key down anymore.

00:20:31.950 --> 00:20:33.100
Same for mouse clicks.

00:20:33.100 --> 00:20:35.200
You don't have to call TXN click.

00:20:35.340 --> 00:20:38.340
And for the full window objects,
we'll install window event

00:20:38.340 --> 00:20:41.430
handlers so that you don't
have to worry about activating,

00:20:41.430 --> 00:20:44.620
deactivating, redrawing,
things like that, resizing.

00:20:44.620 --> 00:20:46.380
We'll handle that for you automatically.

00:20:50.720 --> 00:20:52.980
Okay,
so the final thing I want to go over

00:20:53.000 --> 00:20:57.470
is the basic tasks of what you're going
to want to do with your text objects.

00:20:57.530 --> 00:21:00.290
Working with TXN objects is
what I'm going to start with.

00:21:00.320 --> 00:21:03.540
I'm going to have a slight detour and
describe a couple of the things about

00:21:03.550 --> 00:21:06.210
our UniCode control because we do,
as Xavier mentioned,

00:21:06.260 --> 00:21:09.700
wrap most of our features, MLTE features,
into a really convenient control.

00:21:09.700 --> 00:21:17.360
And as Xavier already pointed out,
we do offer a couple of static text APIs.

00:21:17.480 --> 00:21:20.310
And I'll describe when it is you
use those as opposed to another

00:21:20.310 --> 00:21:24.550
one that's supplied in the OS.

00:21:25.020 --> 00:21:26.100
Okay,
so the first thing that you're going

00:21:26.100 --> 00:21:27.280
to want to do is to create your object.

00:21:27.380 --> 00:21:30.540
We've already seen this in the demo.

00:21:30.570 --> 00:21:33.120
It's Tx a new object,
and you can see how powerful

00:21:33.220 --> 00:21:35.730
this API is just by the
number of parameters you have.

00:21:35.830 --> 00:21:39.080
I'm not going to go
through all the parameters,

00:21:39.080 --> 00:21:42.790
but I'm going to go through
the first three for you.

00:21:42.840 --> 00:21:44.640
The first one is an FSSpec.

00:21:44.680 --> 00:21:47.540
When you're creating your object,
you know that you have a file that

00:21:47.670 --> 00:21:48.530
you want to load in all the text.

00:21:48.580 --> 00:21:50.860
You can give us the FSSpec
to that existing document,

00:21:50.910 --> 00:21:53.550
and it will load in the
data for you automatically.

00:21:54.440 --> 00:21:58.000
The second parameter is the window that
you want your object to be displayed in.

00:21:58.020 --> 00:22:00.940
And the third one is the
bounds for the object.

00:22:01.130 --> 00:22:03.500
So this is where you specify whether
you want a full window object

00:22:03.500 --> 00:22:04.630
or you just want a pane object.

00:22:04.890 --> 00:22:08.000
If you pass a null,
we'll assume you want the

00:22:08.000 --> 00:22:09.640
full window to be used.

00:22:09.790 --> 00:22:14.490
If you pass in a rectangle,
then that's the bounds and local

00:22:14.490 --> 00:22:14.490
coordinates to the window that we'll use.

00:22:15.080 --> 00:22:17.670
You may want to supply some
default data to the object.

00:22:17.700 --> 00:22:20.460
Do you use TX and set data to do that?

00:22:20.460 --> 00:22:23.500
We also offer TX and get data encoded
and that's how you get the data

00:22:23.500 --> 00:22:26.130
once the users put it in there.

00:22:26.180 --> 00:22:29.220
We've seen this next one,
TX and set TX and object controls.

00:22:29.230 --> 00:22:33.020
This is where you set the
object-wide behavior settings,

00:22:33.020 --> 00:22:36.040
such as justification, font substitution.

00:22:36.070 --> 00:22:39.390
We've seen this one as well,
TX and set type attributes.

00:22:39.430 --> 00:22:42.110
This is where you set the color and
you pass in the particular range

00:22:42.160 --> 00:22:46.670
that you want the new attributes to
be associated with to be applied to.

00:22:47.280 --> 00:22:50.160
Saving an object is as
simple as TX and save.

00:22:50.160 --> 00:22:53.200
And printing, we have TX and page
setup and TX and print.

00:22:53.210 --> 00:22:56.380
Now you can see how convenient,
how straightforward it

00:22:56.400 --> 00:22:58.130
is to use most of MLTE.

00:22:58.230 --> 00:22:59.700
If you want to save,
you call TX and save.

00:22:59.700 --> 00:23:01.200
If you want to print,
you call TX and print.

00:23:01.200 --> 00:23:03.700
It's really that simple.

00:23:06.650 --> 00:23:10.360
All right, so the detour here.

00:23:10.510 --> 00:23:13.320
As we mentioned before,
the UniCode control does

00:23:13.350 --> 00:23:15.520
inherit most of MLTE's features.

00:23:15.520 --> 00:23:17.910
And it's really convenient to switch.

00:23:18.110 --> 00:23:20.560
If you're already using
the edit text control,

00:23:20.690 --> 00:23:24.310
you just change the creation,
the creator API that you call.

00:23:24.390 --> 00:23:27.970
It's create, edit UniCode text control.

00:23:28.240 --> 00:23:30.730
Now because it does conform
to the control manager,

00:23:30.730 --> 00:23:33.300
you can get an event target ref for that.

00:23:33.390 --> 00:23:36.170
So if you have multiple
text fields in an object,

00:23:36.170 --> 00:23:38.530
I'd recommend that you use
this if you aren't already.

00:23:38.560 --> 00:23:40.690
If you want to override some
of the default behaviors,

00:23:40.800 --> 00:23:42.970
installing your own Carbon events,
it's much easier to install them on

00:23:42.970 --> 00:23:46.960
the individual controls as opposed to
installing them all on the same window.

00:23:47.010 --> 00:23:52.500
Now for Jaguar, we do plan on adding
single line control tag.

00:23:52.660 --> 00:23:56.300
So all you have to do is tell
us that you only want one line,

00:23:56.360 --> 00:23:59.550
and from that point on,
no matter what the client does,

00:23:59.550 --> 00:24:01.700
there will only be one
line in your control.

00:24:01.750 --> 00:24:04.480
And we'll go into a little more of that

00:24:04.740 --> 00:24:06.220
A little later on in the presentation.

00:24:06.280 --> 00:24:08.700
Exactly how you go about doing that.

00:24:08.700 --> 00:24:13.700
Alright, so some examples of where in
our system we use the MLTE.

00:24:13.740 --> 00:24:16.700
Whether it's an MLTE object or a control.

00:24:16.700 --> 00:24:19.610
The Finder uses it in numerous places.

00:24:20.480 --> 00:24:23.150
You'll probably notice it mostly
when you're changing file names.

00:24:23.150 --> 00:24:24.830
So that's an MLTE object.

00:24:24.930 --> 00:24:28.700
The new search field in the toolbar,
that's an MLTE object.

00:24:28.910 --> 00:24:32.880
The finder has a new find window
that doesn't use Sherlock.

00:24:33.130 --> 00:24:35.560
Well, actually, Sherlock uses MLTE, too.

00:24:35.640 --> 00:24:39.760
So all the text fields in the
Find window are MLTE objects.

00:24:39.790 --> 00:24:43.660
And you notice that we have some
multilingual text going on there.

00:24:43.740 --> 00:24:45.000
Another example is keycaps.

00:24:45.110 --> 00:24:48.650
Keycaps is an MLTE object.

00:24:50.400 --> 00:24:54.760
and I think actually they use some
of our static text APIs for the keys.

00:24:54.760 --> 00:24:56.840
Nav Services.

00:24:56.840 --> 00:24:59.610
So when you're saving a file
or opening a file up if you're

00:24:59.660 --> 00:25:01.870
typing in the path name,
those are MLTE objects

00:25:01.920 --> 00:25:03.300
throughout the system.

00:25:03.390 --> 00:25:06.280
And finally,
another example would be iTunes.

00:25:06.300 --> 00:25:07.880
iTunes uses it for their
search field as well.

00:25:07.990 --> 00:25:12.160
They use it for when you're changing the,
what is it, song names.

00:25:12.160 --> 00:25:14.900
And the Get Info window
that you can bring up,

00:25:14.910 --> 00:25:17.210
those are all MLTE objects.

00:25:17.910 --> 00:25:19.360
So as I said before,
if you're already using

00:25:19.360 --> 00:25:21.260
the Edit Text Control,
it's really simple to switch to these.

00:25:21.260 --> 00:25:23.940
That's what most of these clients did.

00:25:24.220 --> 00:25:28.430
The benefit is that you get
multi-lingual support automatically

00:25:28.500 --> 00:25:32.320
and the nice quartz anti-aliasing
to match the rest of the system.

00:25:34.700 --> 00:25:37.990
Now for static text,
HIToolbox does supply an API,

00:25:38.110 --> 00:25:39.700
DrawThemeTextBox.

00:25:39.700 --> 00:25:42.140
And in most cases,
this is exactly what you want to use.

00:25:42.140 --> 00:25:44.820
It's theme-savvy,
and that's what most of the system

00:25:44.850 --> 00:25:48.130
uses to draw its static text,
and then use some things like that.

00:25:48.560 --> 00:25:51.250
There are some cases that
Xavier mentioned that you

00:25:51.260 --> 00:25:52.830
may want more control.

00:25:52.940 --> 00:25:55.940
You want to pass in your own
CG context or you want rotated text.

00:25:55.940 --> 00:25:58.400
I recommend that you
use one of our two APIs.

00:25:58.400 --> 00:26:01.160
One takes the UniCode,
one takes the CFString.

00:26:01.330 --> 00:26:05.280
And if that isn't
flexible enough for you,

00:26:05.280 --> 00:26:10.990
I'd recommend going directly
to Etsui because they can draw

00:26:10.990 --> 00:26:11.820
text any way you can imagine,
especially if you have

00:26:11.820 --> 00:26:11.820
your own CG context.

00:26:13.690 --> 00:26:16.340
All right,
so an example of that would be here.

00:26:16.340 --> 00:26:20.020
I don't know how pretty it is, but, yeah,
that looks good.

00:26:20.040 --> 00:26:24.240
What you see here is we've
passed in our own CG context,

00:26:24.240 --> 00:26:27.330
so the rotation here you can
do by passing in parameters

00:26:27.330 --> 00:26:30.620
to the API directly,
the static text API directly,

00:26:30.620 --> 00:26:34.620
but in this case we're using a
CG context and applying matrices to them.

00:26:34.770 --> 00:26:38.170
So each one of these is a
separate call to one of our APIs,

00:26:38.180 --> 00:26:42.530
and you see some nice ligatures
over there on the left.

00:26:42.700 --> 00:26:43.680
No, a swash, I guess.

00:26:43.680 --> 00:26:46.540
All right,
so that's some basic tasks that

00:26:46.600 --> 00:26:48.060
you may want to do on your objects.

00:26:48.120 --> 00:26:53.560
What I'd like to do now is invite our
senior engineer for MLTE up to the stage

00:26:53.640 --> 00:26:59.070
to go over some more advanced tasks
that you may want to do on your objects.

00:26:59.080 --> 00:26:59.950
Thank you very much.

00:26:59.980 --> 00:27:01.270
Thank you.

00:27:03.300 --> 00:27:05.970
This is Ford.

00:27:05.970 --> 00:27:09.370
Thanks, Rick.

00:27:09.370 --> 00:27:09.370
Hi, everybody.

00:27:09.690 --> 00:27:11.520
Okay,
so we'll look at a few advanced tasks.

00:27:11.650 --> 00:27:16.040
They're called advanced,
but they're really pretty easy to do.

00:27:16.060 --> 00:27:19.460
We're going to look at
how you filter text input,

00:27:19.480 --> 00:27:23.160
a thing that a lot of people want to
do and have asked questions about.

00:27:23.400 --> 00:27:26.940
We're going to talk about letting
MLTE handle your edit menu for you,

00:27:27.030 --> 00:27:29.770
so all you have to do is supply
the edit menu and we'll update

00:27:29.780 --> 00:27:32.790
it and handle user selections.

00:27:33.340 --> 00:27:38.680
Passing your own CG context to MLTE,
the reason you might want to do that

00:27:38.680 --> 00:27:44.310
is so you can manipulate the context
and then when the text is drawn,

00:27:44.310 --> 00:27:47.670
that manipulation, whatever you did,
will be

00:27:47.890 --> 00:27:54.710
We'll look at how you would set
some of the advanced typographic

00:27:54.710 --> 00:27:59.310
features that we've seen and will see.

00:28:00.120 --> 00:28:04.380
Okay, so filtering text input thanks to
Carbon Events is really a simple,

00:28:04.380 --> 00:28:05.890
straightforward thing to do.

00:28:06.310 --> 00:28:09.780
You just write a
Carbon Event handler for text input.

00:28:09.880 --> 00:28:13.440
You then install it on your
window or your control.

00:28:13.540 --> 00:28:17.790
And then you sit there and you watch
for the text you want to block or

00:28:17.900 --> 00:28:20.500
change or whatever your filter's doing.

00:28:20.580 --> 00:28:23.310
There's one thing, of course,
you have to remember is you

00:28:23.310 --> 00:28:27.660
install it after you install
or create the MLTE object.

00:28:27.790 --> 00:28:29.200
If that makes sense.

00:28:29.200 --> 00:28:33.000
If you do it before,
well then the MLTE Carbon Event handlers

00:28:33.000 --> 00:28:36.900
are going to be in front of yours
and it won't get to your filter.

00:28:36.900 --> 00:28:41.500
And if you want MLTE to handle it,
you just return the EventNotHandledAir.

00:28:41.500 --> 00:28:45.130
This is really standard
Carbon Event stuff that's been

00:28:45.300 --> 00:28:48.570
covered in other sessions,
but it's a nice example of the

00:28:48.720 --> 00:28:52.030
flexibility that Carbon Events provide.

00:28:52.840 --> 00:28:56.500
So here's a Carbon event handler,
easy to write.

00:28:56.580 --> 00:29:00.810
You've got your handler
ref and your event,

00:29:00.960 --> 00:29:01.980
your user data.

00:29:02.300 --> 00:29:05.600
So in this simple thing
here we call a filter.

00:29:05.670 --> 00:29:08.430
If the filter says it did something,
we return no error,

00:29:08.530 --> 00:29:11.100
which means it won't go down to MLTE.

00:29:11.240 --> 00:29:17.460
And otherwise we return not
handled error and MLTE will

00:29:17.460 --> 00:29:17.460
take care of things after that.

00:29:17.960 --> 00:29:21.180
And here's where that
filter's being installed.

00:29:21.180 --> 00:29:26.430
You can see that we're sitting on
text input Unicodes for key events.

00:29:26.430 --> 00:29:31.300
That's the event you would get for input
methods straight from a key--I mean,

00:29:31.300 --> 00:29:36.450
text input straight from the keyboard
that hasn't gone through an input

00:29:37.640 --> 00:29:40.800
Okay, so you have an edit menu
in your application.

00:29:40.800 --> 00:29:45.360
You like when an MLTE object is
active for that MLTE object to

00:29:45.360 --> 00:29:47.870
handle the edit menu and update it.

00:29:47.920 --> 00:29:49.340
Again, that's easy to do.

00:29:49.340 --> 00:29:55.990
And you'll see that you actually are
going to be using the set objects control

00:29:56.150 --> 00:29:59.560
API that Rick talked about because we're
going to be setting a global setting.

00:29:59.600 --> 00:30:03.020
And the one thing you do when
you create your edit menu,

00:30:03.020 --> 00:30:05.790
you need to make sure it has command IDs.

00:30:05.800 --> 00:30:10.640
It happens automatically if you
use a nib file and you need an

00:30:10.640 --> 00:30:14.600
XMNU resource if you use a resource file.

00:30:14.820 --> 00:30:17.400
But that's easy enough to do.

00:30:18.200 --> 00:31:39.000
[Transcript missing]

00:31:39.600 --> 00:33:08.700
[Transcript missing]

00:33:09.670 --> 00:33:14.560
So far, you've seen the two
APIs that Rick talked about.

00:33:14.590 --> 00:33:18.690
We actually haven't seen
the setTXN attributes yet.

00:33:18.710 --> 00:33:21.600
We will,
but you've been able to take advantage,

00:33:21.600 --> 00:33:25.310
do some advanced things just
by using that one function

00:33:25.320 --> 00:33:27.710
to set the global attributes.

00:33:28.170 --> 00:33:30.410
Okay, so custom drag behavior.

00:33:30.650 --> 00:33:33.060
Why would you want to do
this in the first place?

00:33:33.090 --> 00:33:35.490
One obvious reason is to filter things.

00:33:35.590 --> 00:33:38.850
Maybe you only want numbers or
something going into your field.

00:33:38.950 --> 00:33:46.340
Another reason is we had to set up
this way for the case where there's

00:33:46.500 --> 00:33:52.400
multiple MLTE objects in one window
because you need to help MLTE by telling

00:33:52.400 --> 00:33:56.660
us that even though this drag is in
the same window where it originated,

00:33:56.660 --> 00:33:59.930
it actually started in
a different MLTE object.

00:34:00.000 --> 00:34:00.680
And why is that?

00:34:00.770 --> 00:34:05.360
Because each MLTE object is individual
and doesn't have any knowledge of other

00:34:05.360 --> 00:34:07.420
MLTE objects that might be in the window.

00:34:07.420 --> 00:34:09.420
So you have to help us out there.

00:34:09.590 --> 00:34:12.000
And you'll see how you do that.

00:34:12.220 --> 00:34:13.900
Okay, so how do you do this?

00:34:13.900 --> 00:34:17.860
You first of all tell us not to
install custom drag handlers,

00:34:17.860 --> 00:34:22.540
which is just a matter of setting
a parameter of an option bit

00:34:22.540 --> 00:34:24.200
when you create the object.

00:34:24.420 --> 00:34:28.840
Then you write drag and receive handlers,
and then you install those

00:34:28.840 --> 00:34:30.690
handlers on the window.

00:34:31.970 --> 00:34:34.900
So, tell us not to install is real easy.

00:34:34.900 --> 00:34:35.800
There's the option bit.

00:34:36.000 --> 00:34:40.180
Do not install drag prox mask
and then create the object.

00:34:40.220 --> 00:34:43.660
Couldn't be very much simpler than that.

00:34:43.730 --> 00:34:48.210
You write your drag tracking handler.

00:34:48.210 --> 00:34:48.210
This is the standard.

00:34:48.820 --> 00:34:52.120
The drag manager thing
you've probably done before.

00:34:52.120 --> 00:34:55.700
One thing to know that if you're
overriding the drag and receive

00:34:55.700 --> 00:34:59.180
and you really only want to do
the work in the receive handler,

00:34:59.190 --> 00:35:00.920
which would be what you'd
do if you were filtering,

00:35:01.150 --> 00:35:04.760
you still need this function
here because when you tell

00:35:04.760 --> 00:35:07.460
us not to install drag procs,
we don't install any.

00:35:07.460 --> 00:35:09.700
It's not a question of one or the other.

00:35:09.700 --> 00:35:12.160
So if you didn't really
want to do any work here,

00:35:12.180 --> 00:35:17.780
it would just be a matter of calling that
function you see there TXN_DRAG_TRACKER,

00:35:18.150 --> 00:35:23.700
which will let MLTE take over
the drag and do the dragging.

00:35:23.700 --> 00:35:28.150
And that last parameter there,
the boolean after the drag ref parameter,

00:35:28.270 --> 00:35:32.440
that's where you say whether the drag
started in the window but actually

00:35:32.480 --> 00:35:34.630
began with a different object.

00:35:34.700 --> 00:35:39.700
True would be the case if you
were trying to communicate that.

00:35:39.700 --> 00:35:44.950
In this case, we're just saying false.

00:35:45.910 --> 00:35:49.910
And then in your receive handler,
this example here is where we're

00:35:50.110 --> 00:35:51.700
filtering for numbers here.

00:35:51.700 --> 00:35:57.410
So you can see there's a little function
called to see if the data is a number.

00:35:57.800 --> 00:36:01.690
If it is,
we call TXN Drag Receiver to let the drag

00:36:01.790 --> 00:36:05.400
go through to let MLTE receive that text.

00:36:05.400 --> 00:36:08.240
If we want to stop the drag,
we return no error and

00:36:08.240 --> 00:36:10.040
don't let it go through.

00:36:10.040 --> 00:36:12.390
Very simple to do.

00:36:13.190 --> 00:36:16.480
And then you just install it
using standard drag manager

00:36:16.560 --> 00:36:18.530
calls you always used.

00:36:18.730 --> 00:36:22.500
Install jacking and
install receive handler.

00:36:23.540 --> 00:36:26.740
Okay, so advanced typography.

00:36:26.740 --> 00:36:31.940
You saw that you used TXN set
type attributes to set this,

00:36:31.940 --> 00:36:39.240
the standard, bold, the font style,
set size, all the text attributes that

00:36:39.240 --> 00:36:42.940
you're used to from QuickDraw
that you commonly think of.

00:36:43.110 --> 00:36:47.090
Now, Atsui provides a whole
host of different ones,

00:36:47.390 --> 00:36:51.120
more advanced ones,
particularly in font features,

00:36:51.230 --> 00:36:55.060
which is something that's
specific to each font.

00:36:55.080 --> 00:37:00.510
I mean, certain fonts have a huge host
of features and variations,

00:37:00.510 --> 00:37:05.990
you know, ligatures and cross-stream
shifting and swash variants

00:37:06.140 --> 00:37:07.750
and all that kind of stuff.

00:37:07.930 --> 00:37:11.750
So you may want to
offer that to your user.

00:37:11.960 --> 00:37:13.040
And we do let you pay for that.

00:37:13.040 --> 00:37:17.040
And you can tell us to take
advantage of that if it's there.

00:37:17.160 --> 00:37:19.540
And you set it just like you would,
and you do this work,

00:37:19.620 --> 00:37:24.550
you tell us to do that the same way
you tell us to change run to bold,

00:37:24.550 --> 00:37:25.190
say.

00:37:25.950 --> 00:37:28.860
So here's an example of two.

00:37:29.210 --> 00:37:34.180
The top one is a chemical equation
looking line that was done with the

00:37:34.180 --> 00:37:37.640
stream shifting tags for that font.

00:37:37.710 --> 00:37:42.550
And then the bottom one is we've
turned on some swash variants so

00:37:42.550 --> 00:37:44.560
you can see the R coming under.

00:37:44.560 --> 00:37:47.860
And that might be a double L ligature.

00:37:47.880 --> 00:37:50.250
I'm not sure from the font.

00:37:50.320 --> 00:37:54.980
And that was, so that's done like this.

00:37:55.100 --> 00:37:57.350
So when you're doing this,
you're going to need to

00:37:57.500 --> 00:37:58.750
talk to Atsui a little bit.

00:37:58.760 --> 00:38:01.380
You're going to need to ask us,
or you're going to need

00:38:01.510 --> 00:38:04.750
to get the Atsui font ID,
find out what the font is.

00:38:04.800 --> 00:38:08.720
You can ask us for that with
a get type attributes call.

00:38:08.720 --> 00:38:12.250
Once you get that information,
you're going to ask Atsui, "Alright,

00:38:12.400 --> 00:38:16.160
what are the variations or what are
the features that this font has?"

00:38:16.180 --> 00:38:20.140
If it has a feature or variation,
you can grab the one you want to set.

00:38:20.250 --> 00:38:23.760
You tell us how many you're setting.

00:38:23.760 --> 00:38:25.650
In this case, just one.

00:38:25.710 --> 00:38:28.660
And the feature type and
the feature selector.

00:38:28.790 --> 00:38:32.870
So in that last example,
you might have said with stream

00:38:32.870 --> 00:38:36.220
shifting and you want it on.

00:38:36.280 --> 00:38:40.220
And then in the attributes array,
you give us a tag telling

00:38:40.390 --> 00:38:41.560
us what kind of data.

00:38:41.560 --> 00:38:45.350
It's the Atsui font features attribute.

00:38:45.360 --> 00:38:49.470
You tell us the size,
which is the size of

00:38:49.530 --> 00:38:52.560
the structure up above,
and then a pointer to that.

00:38:52.560 --> 00:38:56.640
And so once you've set that up,
you can see, what you're doing here is

00:38:56.640 --> 00:38:58.560
just mostly setting things up.

00:38:58.560 --> 00:39:01.060
Then you call the
TXN set type attributes.

00:39:01.060 --> 00:39:05.560
Again, exactly the same way if you wanted
to tell us to make text bold.

00:39:06.390 --> 00:39:10.460
So conceptually it's really easy to do.

00:39:10.460 --> 00:39:15.250
Okay, so we'll take a look now at some of
the new things we did for Jaguar.

00:39:15.540 --> 00:39:20.620
One thing that we don't have a demo on
but actually has been our main focus is

00:39:20.620 --> 00:39:26.460
we've been working on performance because
we really sort of fell short in 10.0.

00:39:26.470 --> 00:39:31.290
We can improve more but we've made
a lot of advances thanks mostly to

00:39:31.290 --> 00:39:37.110
Rick because he's really been tuning
how we use Atsui and file opening,

00:39:37.120 --> 00:39:37.720
font changes.

00:39:37.720 --> 00:39:39.880
It's gotten a lot faster.

00:39:39.950 --> 00:39:42.130
So that's good news.

00:39:42.630 --> 00:39:44.580
So Rick went over these.

00:39:44.670 --> 00:39:47.080
We'll go over them here.

00:39:47.080 --> 00:39:50.850
One thing he didn't touch on,
we're going to make it possible

00:39:50.850 --> 00:39:56.160
so you can take any object,
any run of data in a text area,

00:39:56.180 --> 00:39:58.090
and then attach a URL to it.

00:39:58.090 --> 00:40:02.060
This is separate from
command-clicking on an actual URL.

00:40:02.060 --> 00:40:10.090
This is, say, take a word and then
supply a different URL.

00:40:10.090 --> 00:40:15.900
When you click on that,
we're going to launch the

00:40:16.010 --> 00:40:17.420
helper for whatever the URL is.

00:40:17.420 --> 00:40:21.270
The other thing about that is
we're going to -- if you use mail,

00:40:21.270 --> 00:40:25.810
you know that URL that
hasn't been clicked on is,

00:40:25.910 --> 00:40:28.800
by standards,
blue text that's underlined.

00:40:28.800 --> 00:40:30.240
That'll be the style attribute of a URL.

00:40:30.280 --> 00:40:32.290
This is the style attribute of a URL.

00:40:32.300 --> 00:40:32.300
Okay.

00:40:32.300 --> 00:40:32.340
Okay.

00:40:32.340 --> 00:40:32.460
Okay.

00:40:32.460 --> 00:40:35.660
So we've got a set of,
of a range that's been set to be a URL.

00:40:35.910 --> 00:40:38.550
While we're tracking a
mouse that's on the URL,

00:40:38.560 --> 00:40:40.640
it'll be red with an underline.

00:40:40.670 --> 00:40:43.730
And a URL that has been
pressed previously will be

00:40:43.730 --> 00:40:45.550
green text with an underline.

00:40:45.550 --> 00:40:49.110
But you'll be able to override
those by using the set objects

00:40:49.380 --> 00:40:53.620
control function that we've
seen a whole lot of times today.

00:40:53.780 --> 00:40:57.880
We made it possible to --
for you to control scrolling,

00:40:57.880 --> 00:41:01.200
for you to handle
whatever the control is,

00:41:01.250 --> 00:41:02.280
it lets the user scroll.

00:41:02.280 --> 00:41:03.280
Okay.

00:41:03.410 --> 00:41:07.730
And, and there's a -- and we make sure
that that control reflects the

00:41:07.740 --> 00:41:11.380
position of the text when the
user's typing or deleting text.

00:41:11.380 --> 00:41:13.370
We'll look at that.

00:41:13.550 --> 00:41:17.540
You can create an object
which is mono-styled.

00:41:17.540 --> 00:41:22.310
And in fact, all the UniCode, by default,
the UniCode text

00:41:22.310 --> 00:41:24.500
controls are mono-styled.

00:41:25.010 --> 00:41:28.500
Clear the Undo and Redo StackRack.

00:41:28.500 --> 00:41:30.920
That was a good example that
Rich mentioned that you have

00:41:31.070 --> 00:41:32.770
text you always want to show up.

00:41:32.780 --> 00:41:34.500
You don't want it to be undoable.

00:41:34.500 --> 00:41:39.160
And then we support the scroll wheel now.

00:41:40.930 --> 00:41:42.560
So again, so here we are.

00:41:42.560 --> 00:41:44.360
We're looking at a lot
of the same routines.

00:41:44.520 --> 00:41:47.820
If you want to set a URL,
you use the text set,

00:41:47.980 --> 00:41:50.620
the set type attributes again.

00:41:50.710 --> 00:41:55.800
The URL,
the actual data type is a CFURLRef.

00:41:56.110 --> 00:41:59.770
And you just set up the type attributes.

00:41:59.830 --> 00:42:03.180
You tell us, give us a tag identifying
the kind of data.

00:42:03.430 --> 00:42:06.440
Give us the size and
then give us the URL.

00:42:06.530 --> 00:42:10.040
And we'll attach it there.

00:42:12.530 --> 00:42:16.400
Okay, using your own scroll bars,
it's a little bit more to do,

00:42:16.400 --> 00:42:18.200
but really not that much.

00:42:18.330 --> 00:42:22.540
Just like always when you're scrolling,
you need to write your action procs,

00:42:22.570 --> 00:42:26.220
and you need to create your controls,
obviously.

00:42:26.240 --> 00:42:30.120
And then the new things for our
support is you need to write what

00:42:30.120 --> 00:42:35.200
we call a scroll callback and you
need to register that callback.

00:42:35.240 --> 00:42:39.930
So a scroll callback is there so, I mean,
you have a control that you're managing.

00:42:40.070 --> 00:42:42.850
The MLTE object doesn't
know anything about it.

00:42:42.960 --> 00:42:46.710
But the user's typing,
the user's cutting text,

00:42:46.750 --> 00:42:48.320
pasting new text in.

00:42:48.370 --> 00:42:52.340
And you obviously want to update
that control to reflect the

00:42:52.350 --> 00:42:54.650
change in how much text is there.

00:42:54.850 --> 00:42:58.730
So when that's happening,
we call your callback and pass you

00:42:58.730 --> 00:43:02.680
a value and an appropriate maximum.

00:43:02.760 --> 00:43:04.080
So let's look at some of this.

00:43:04.130 --> 00:43:06.700
So here's your track action proc.

00:43:06.740 --> 00:43:11.140
It's, you know,
standard control manager thing.

00:43:11.440 --> 00:43:15.710
Now the scroll routines here,
so what you want to do is

00:43:15.780 --> 00:43:18.030
you look at the part code,
you figure out how much

00:43:18.170 --> 00:43:19.660
you're going to scroll.

00:43:19.690 --> 00:43:22.200
The scroll routines let
you scroll by units.

00:43:22.280 --> 00:43:27.710
The units can be pixels, lines,
or the size of the view rack,

00:43:28.260 --> 00:43:31.730
which is basically similar
to a scroll by page.

00:43:32.640 --> 00:43:36.680
So in this case, in this example,
the user mouse down on the button,

00:43:36.690 --> 00:43:39.560
on the down button, we say,
so we want to scroll by lines and

00:43:39.560 --> 00:43:42.000
we want to scroll by one line.

00:43:42.040 --> 00:43:45.940
And we set all that up and
then we call txn_scroll,

00:43:45.960 --> 00:43:51.700
pass it the object, the vertical units,
the horizontal units, and then the delta,

00:43:51.710 --> 00:43:54.000
how much to scroll.

00:43:55.310 --> 00:44:00.290
And then the scroll back callback here,
like I said, you get a value,

00:44:00.340 --> 00:44:04.370
you get a max value,
you figure out which control it is,

00:44:04.410 --> 00:44:08.460
and then you just update your
control to reflect these new values.

00:44:10.060 --> 00:44:12.710
And then you register that,
and there's a new routine to do that:

00:44:12.840 --> 00:44:17.330
TXN register scroll info proc.

00:44:17.330 --> 00:44:22.790
So the two new routines are TXN scroll
and register scroll info proc.

00:44:24.270 --> 00:44:26.370
Okay, so you want to set a single style.

00:44:26.500 --> 00:44:27.650
It's extremely easy.

00:44:27.720 --> 00:44:32.680
You create your object and you just
pass in an option when you create it

00:44:32.710 --> 00:44:36.990
and the option is mono-styled text.

00:44:38.600 --> 00:44:55.200
[Transcript missing]

00:45:01.100 --> 00:45:03.500
Okay, so here we have this window here.

00:45:03.500 --> 00:45:12.490
We have up here,
this is a UniCode control.

00:45:12.490 --> 00:45:12.490
By

00:45:14.000 --> 00:45:18.060
You can hit return and
it returns accepted in.

00:45:18.060 --> 00:45:20.200
But if you don't want that,

00:45:20.810 --> 00:45:25.180
You can just turn on the option
with Set TXN Objects Control.

00:45:25.180 --> 00:45:26.240
It's a global option.

00:45:26.240 --> 00:45:29.510
You can set it just as
single line support.

00:45:29.510 --> 00:45:34.360
And in that case, when you hit return,
it substitutes a dash in.

00:45:37.130 --> 00:45:43.020
The other thing you want to see is that,
like I said, by default the controls

00:45:43.060 --> 00:45:47.590
are all mono-style now.

00:45:48.060 --> 00:45:54.160
Some exotic looking text here and we
copy that and go to paste it up here.

00:45:54.160 --> 00:46:00.470
You see that it's in the style that we
saw when I was typing so the zap or font

00:46:00.470 --> 00:46:05.270
style isn't honored here on that paste.

00:46:05.760 --> 00:46:08.840
Okay, down here, this is a text area.

00:46:09.070 --> 00:46:10.100
It's not a control.

00:46:10.100 --> 00:46:13.630
It's created basically the way
you saw Rick created in that

00:46:13.780 --> 00:46:15.910
demo by creating a new object.

00:46:16.000 --> 00:46:17.450
We specified a frame rack.

00:46:17.700 --> 00:46:20.650
And one thing to note about this
is that these scroll bars are

00:46:20.740 --> 00:46:22.680
being managed by the application.

00:46:22.690 --> 00:46:26.450
MLTE doesn't know anything about it,
about them.

00:46:26.700 --> 00:46:30.670
When I scroll here,
we call the MLTE scrolling,

00:46:30.670 --> 00:46:35.700
calling the scroll call back
to tell the application.

00:46:35.700 --> 00:46:39.490
And you can see the scroll bars
being updated correctly there.

00:46:40.130 --> 00:46:44.250
If I go over here,
the application is calling

00:46:44.250 --> 00:46:47.000
TXN scroll to scroll the text.

00:46:47.000 --> 00:46:50.270
So scrolling is being
handled by the application,

00:46:50.300 --> 00:46:55.230
but it looks just exactly
like you'd expect.

00:46:55.660 --> 00:46:58.490
The other feature, real quick,
just to show,

00:46:58.490 --> 00:47:03.270
we've got some URLs down here.

00:47:03.270 --> 00:47:07.310
And just to show that they
work in any MLTE object.

00:47:07.990 --> 00:47:11.070
I'll paste it up here in the control.

00:47:11.150 --> 00:47:16.220
If we command click on it,
it brings us over here.

00:47:16.270 --> 00:47:20.120
Launches Internet Explorer and

00:47:20.830 --> 00:47:25.790
So that would be, you know,
if you have MLTE in anywhere now,

00:47:25.790 --> 00:47:29.260
you can,
the user can put in a URL and get to it.

00:47:29.270 --> 00:47:33.400
It's a feature that was in Waste,
which we now offer.

00:47:33.590 --> 00:47:34.640
Okay, thanks a lot.

00:47:34.730 --> 00:47:38.830
And with that, I'm going to turn it back
to Xavier to wrap it up.

00:47:39.050 --> 00:47:40.600
Thank you.

00:47:43.230 --> 00:47:44.760
Excellent.

00:47:44.760 --> 00:47:47.240
All right.

00:47:47.290 --> 00:47:49.440
The important point here
today is that actually,

00:47:49.490 --> 00:47:52.940
not only we have been doing a lot
of progress from a performance

00:47:52.950 --> 00:47:56.610
point of view for each cases where
people will be using MLT with,

00:47:56.610 --> 00:47:59.150
like, large text files,
or some people have been reporting

00:47:59.160 --> 00:48:03.720
some primes on development list
on the way they were using MLT and

00:48:03.720 --> 00:48:05.070
the performance they were getting.

00:48:05.160 --> 00:48:06.810
We've been doing a lot
of progress on that side,

00:48:06.920 --> 00:48:10.650
and believe me, that took, you know,
a lot of work and some kind of, you know,

00:48:10.700 --> 00:48:12.640
re-architecturing behind the back.

00:48:12.730 --> 00:48:14.140
So that's great,
because I think you're gonna

00:48:14.140 --> 00:48:17.840
be very pleased with the
version of MLT in Jaguar.

00:48:18.030 --> 00:48:21.670
But then we made all these
improvements and all these new features

00:48:21.750 --> 00:48:25.000
that you guys have been asking,
and here you have the list.

00:48:25.080 --> 00:48:26.990
And for that, I mean,
I'd like to really thank the

00:48:26.990 --> 00:48:29.100
MLT team who has been doing
an awesome job this year on,

00:48:29.100 --> 00:48:31.250
like, you know,
putting really the resources

00:48:31.250 --> 00:48:33.320
behind MLT and pushing it forward.

00:48:33.470 --> 00:48:37.100
The URL support is something that a
lot of developers have been asking,

00:48:37.180 --> 00:48:39.750
and I think you're gonna be very
pleased with the flexibility of

00:48:39.750 --> 00:48:41.470
implementation of this feature.

00:48:41.560 --> 00:48:43.680
And John gave, like,
a great example on how you could

00:48:43.680 --> 00:48:46.480
be using it in your application.

00:48:46.630 --> 00:48:49.080
The monostyle text, it's something that,
once again,

00:48:49.080 --> 00:48:50.360
you guys have been asking for.

00:48:50.690 --> 00:48:55.040
Well, now you're gonna have it,
and I think you do good use about it.

00:48:55.040 --> 00:48:58.380
We have clients that have been
asking-- they wanted to manage their

00:48:58.380 --> 00:49:01.060
own scrolling for different purposes,
because the way they do their

00:49:01.070 --> 00:49:02.520
scrolling and things like that.

00:49:02.630 --> 00:49:05.350
And now we have, I think, like, you know,
a great set of APIs to

00:49:05.350 --> 00:49:07.220
help you achieve this.

00:49:07.340 --> 00:49:10.440
Clearing their undo and redo stack,
now you're gonna be able to manage

00:49:10.440 --> 00:49:12.520
that yourself in cases where,
you know,

00:49:12.520 --> 00:49:16.180
you have certain type of text that you
want to maintain in your text object.

00:49:16.180 --> 00:49:18.320
So you're gonna have full control,
actually, on this.

00:49:18.320 --> 00:49:19.520
That's great.

00:49:19.720 --> 00:49:23.980
And once again, you know,
things such as the mouse scroll wheel

00:49:23.980 --> 00:49:27.380
is something you're gonna get for free
in the next version of MLT without

00:49:27.380 --> 00:49:29.820
you having to change anything.

00:49:30.970 --> 00:49:33.850
The important point here as
well is if you have feedback,

00:49:34.120 --> 00:49:35.000
don't hesitate.

00:49:35.240 --> 00:49:38.070
That's how we're going to make the
technology better and that's how both

00:49:38.070 --> 00:49:41.600
you developers and your application and
our technology is going to get better.

00:49:41.690 --> 00:49:45.210
We get a lot of feedback from the
finder and of course the system and

00:49:45.210 --> 00:49:47.660
they are using MLTE very heavily.

00:49:47.900 --> 00:49:51.470
But developers in most cases
have different needs so you need

00:49:51.580 --> 00:49:54.170
to let us know and believe me,
you can see here that with the

00:49:54.170 --> 00:49:56.420
work we've been doing this year,
we'll implement as many

00:49:56.420 --> 00:49:59.070
features as we can for you guys.

00:50:01.960 --> 00:50:04.720
A couple of documentation
you may be interested in.

00:50:04.880 --> 00:50:07.220
Handling Unicode text with
MLTE and I think all this

00:50:07.300 --> 00:50:11.430
documentation are available right
now on the website and you have

00:50:11.430 --> 00:50:12.900
the URL right there at the bottom.

00:50:12.900 --> 00:50:15.910
I think we'll have a new
reference for the Multilingual

00:50:15.910 --> 00:50:21.040
Text Engine soon and Bernie,
our tech pub's representative,

00:50:21.150 --> 00:50:23.900
can talk a little bit
about that during the Q&A.

00:50:23.900 --> 00:50:27.860
And we have some documentation as well
as setting up MLTE to use Carbon events.

00:50:27.860 --> 00:50:31.900
I think you looked at the example
and it was pretty straightforward.

00:50:31.900 --> 00:50:35.460
I'm not sure we have sample code but
the documentation is pretty clear if you

00:50:35.460 --> 00:50:37.410
need to do your own management for it.

00:50:40.200 --> 00:50:43.210
Documentation is great,
but I think the best for

00:50:43.440 --> 00:50:45.270
developers is sample code.

00:50:45.420 --> 00:50:49.180
We have the Techno 2026,
which actually explains how to set up

00:50:49.200 --> 00:50:55.700
the Multilingual Text Engine and most of
the things you may want to do with MLTE.

00:50:55.700 --> 00:50:58.300
Something that is not written here
but very important to understand

00:50:58.650 --> 00:51:02.200
is that on the Carbon Lib SDK there
is a lot of documentation and

00:51:02.200 --> 00:51:03.840
a lot of sample code for MLTE.

00:51:03.860 --> 00:51:08.150
We have sample code to help you migrate
from a TextEdit implementation to MLTE,

00:51:08.220 --> 00:51:09.360
for instance.

00:51:09.360 --> 00:51:15.080
We have an application that
implements custom controls using MLTE,

00:51:15.080 --> 00:51:16.530
which is very powerful.

00:51:16.530 --> 00:51:19.580
We have something that is a
replacement for Simple Text,

00:51:19.660 --> 00:51:20.340
I think.

00:51:20.340 --> 00:51:22.450
The name of the application
is called Simpler Text.

00:51:22.450 --> 00:51:25.020
Don't ask me.

00:51:25.020 --> 00:51:28.640
And waiting for the new features
to be documented or new sample

00:51:28.710 --> 00:51:31.400
code to be posted on the website,
I encourage you actually

00:51:31.480 --> 00:51:33.300
to check the header file.

00:51:33.300 --> 00:51:36.670
And once again, the header file for MLTE,
the Multilingual Text Engine,

00:51:36.710 --> 00:51:37.560
is called MacText.

00:51:37.560 --> 00:51:42.130
And you find it in the
HIToolbox framework.

00:51:46.660 --> 00:51:49.510
A couple of sessions that
have been going on this week,

00:51:49.510 --> 00:51:52.720
and you may want to check your DVDs,
actually, for this.

00:51:52.740 --> 00:51:56.620
Session 201 of the Font Manager,
where actually we talked

00:51:56.720 --> 00:51:58.660
about the new Font Panel.

00:51:58.660 --> 00:52:00.940
The cool thing with the Font Panel for
you as a developer is that you're

00:52:00.940 --> 00:52:04.690
going to be able to integrate it pretty
easily with MLTE in the way that the

00:52:04.840 --> 00:52:08.560
Font Panel is going to send you back
notification with an @Suite Font ID.

00:52:08.630 --> 00:52:11.940
And what you'll be able to do is
just take this Font ID and pass it

00:52:11.940 --> 00:52:16.560
actually to MLTE using the txtnset type
attributes that we've been talking about.

00:52:16.650 --> 00:52:19.760
So it's pretty straightforward.

00:52:19.840 --> 00:52:23.110
If MLTE is not enough for you and
you need to refine control or you're

00:52:23.110 --> 00:52:27.460
writing the next text engine for your
company or for such great application,

00:52:27.510 --> 00:52:29.860
I'd encourage you to
check the session 202,

00:52:29.880 --> 00:52:32.950
where actually we talked about
@Suite and how you can use it.

00:52:33.040 --> 00:52:35.250
@Suite, which is Apple-type services
for UniCode Imaging,

00:52:35.260 --> 00:52:38.460
as I talked about,
it's the UniCode technology,

00:52:38.460 --> 00:52:42.080
the UniCode layout engine
that MLTE uses internally.

00:52:42.350 --> 00:52:46.790
Session 206 was yesterday,
was about the new control and services.

00:52:47.120 --> 00:52:50.060
You saw here we talked a little
bit about the UniCode control

00:52:50.060 --> 00:52:52.100
that you can have in the toolbox.

00:52:52.140 --> 00:52:55.700
I think you'd be pleased if you want,
if you have very basic needs.

00:52:55.760 --> 00:52:59.620
It's a nice way to actually have an
MLTE object without having to worry about

00:52:59.710 --> 00:53:01.770
how to pass text and things like that.

00:53:01.830 --> 00:53:05.260
So if you like application is
architecture around controls,

00:53:05.310 --> 00:53:08.360
that would be probably a
good way to achieve this.

00:53:08.430 --> 00:53:12.800
And please remember that should you
have any feedback on these sessions and

00:53:12.890 --> 00:53:16.590
any other international technologies
we've been talking this week,

00:53:17.260 --> 00:53:20.560
please come to the
International Technology Feedback Forum,

00:53:20.570 --> 00:53:23.720
which actually is this
afternoon at 5:00 in room J1,

00:53:23.890 --> 00:53:26.600
which is completely on the other side.

00:53:27.000 --> 00:53:31.410
We'll be more than happy to talk to you
about anything you want to talk about.

00:53:32.980 --> 00:53:36.010
Should you have any questions,
announcement requests, bug reports?

00:53:36.200 --> 00:53:37.300
Two ways.

00:53:37.380 --> 00:53:40.900
The first thing that is very
important for you guys to understand,

00:53:40.900 --> 00:53:43.830
if you have a prime, a bug,
something that is stopping you

00:53:43.830 --> 00:53:46.460
from shipping your application,
you need to file a bug

00:53:46.460 --> 00:53:49.260
in bugreporter.apple.com.

00:53:49.400 --> 00:53:51.300
You're all ADC members.

00:53:51.300 --> 00:53:56.540
If the bug is not in our database,
it's very difficult for us to track down.

00:53:56.540 --> 00:53:59.220
So remember, step one, file a bug.

00:53:59.360 --> 00:54:01.150
And then, of course,
you can always send me an

00:54:01.150 --> 00:54:03.980
email at Xavier@apple.com,
and I'd be more than happy to

00:54:03.980 --> 00:54:08.240
help you with any suggestions and
announcement requests or primes

00:54:08.240 --> 00:54:10.810
you may have with our technologies.