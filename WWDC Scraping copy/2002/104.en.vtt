WEBVTT

00:00:03.110 --> 00:00:04.200
Thank you all very much.

00:00:04.240 --> 00:00:06.210
It's a pleasure to have you all here.

00:00:06.330 --> 00:00:09.340
This is session 104,
the affectionately titled

00:00:09.390 --> 00:00:12.240
Mac OS X Overview for UNIX Geeks.

00:00:12.330 --> 00:00:14.670
So first question is,
how many UNIX geeks do

00:00:14.670 --> 00:00:16.140
we have in the audience?

00:00:16.280 --> 00:00:19.560
OK, if you're looking for the 'how
to make nice pretty pictures',

00:00:19.560 --> 00:00:21.040
you're in the wrong place.

00:00:21.330 --> 00:00:22.930
My name is Ernest Prabhakar.

00:00:22.960 --> 00:00:25.790
I'm the product line manager
for Development Platforms.

00:00:25.900 --> 00:00:28.580
I'm part of the
Mac OS X product marketing team.

00:00:28.760 --> 00:00:31.300
I consider our group the
people who do geek stuff.

00:00:31.420 --> 00:00:35.130
We make the tools that people like you,
that our developers need to create

00:00:35.250 --> 00:00:37.220
great apps for our mutual customers.

00:00:37.220 --> 00:00:41.600
That's responsible for the Java runtime,
the WebObjects application server,

00:00:41.750 --> 00:00:44.330
our development tools,
but in particular our open

00:00:44.330 --> 00:00:45.930
source and UNIX technologies.

00:00:46.340 --> 00:00:51.900
I've been working on UNIX since the days
of BSC 4.2 back at MIT and very excited

00:00:51.900 --> 00:00:57.280
to see a platform that really exemplifies
the dreams for what I and many others

00:00:57.280 --> 00:00:59.300
in the UNIX community have been seeking.

00:00:59.300 --> 00:01:02.740
One of the main purposes for this
orientation is for people who

00:01:02.740 --> 00:01:06.200
have not been very familiar with
Mac OS X or the Mac platform.

00:01:06.280 --> 00:01:09.300
How many of you were not
using a Mac a year ago?

00:01:09.300 --> 00:01:14.300
Just getting a feel for, okay,
pretty good representation.

00:01:14.420 --> 00:01:15.300
How many of you have been
using Mac OS X for a long time?

00:01:15.300 --> 00:01:16.300
How many of you have been
using Mac OS X for a long time?

00:01:16.300 --> 00:01:18.300
How many of you have been using
Mac OS X for less than three months?

00:01:18.340 --> 00:01:19.460
Any, a few new people here?

00:01:19.460 --> 00:01:20.300
Okay, very good.

00:01:20.300 --> 00:01:26.300
So a lot of you probably have been using
Mac OS X in various capacities over time.

00:01:26.300 --> 00:01:30.300
The real focus was primarily focusing on
UNIX developers who are new to the Mac.

00:01:30.300 --> 00:01:34.470
People who may have used a Mac only
casually or may not have been using

00:01:34.550 --> 00:01:38.250
Mac OS X or importantly may not
have developed on Mac OS X even

00:01:38.250 --> 00:01:40.300
if they've used it casually.

00:01:40.300 --> 00:01:43.440
And there's a lot of culture and
history behind Mac OS X that affects

00:01:43.830 --> 00:01:45.300
some of the decisions we made.

00:01:45.300 --> 00:01:49.300
And in case you're a little disoriented
by some of those terms or concepts,

00:01:49.330 --> 00:01:51.290
this is the place to try to
help you get those answers.

00:01:51.300 --> 00:01:52.450
And in particular,
we want to help you get the

00:01:52.450 --> 00:01:53.300
most out of this conference.

00:01:53.300 --> 00:01:56.300
How many of you,
is this your first developers conference?

00:01:56.300 --> 00:01:57.300
Well, that's great.

00:01:57.300 --> 00:02:01.230
Really exciting to see all these people
coming in to experience Mac OS X.

00:02:01.300 --> 00:02:03.280
We want to help you get the
most out of the conference,

00:02:03.490 --> 00:02:05.920
give you some suggestions of
the different events going on

00:02:05.920 --> 00:02:07.700
that may be of interest to you,
and also give you a

00:02:07.700 --> 00:02:08.190
chance to ask questions.

00:02:08.310 --> 00:02:11.230
It's just a fairly brief
presentation all told.

00:02:11.300 --> 00:02:13.300
We want to have lots
of time for questions.

00:02:13.300 --> 00:02:14.300
I'll have some of the
engineers up here with me.

00:02:14.300 --> 00:02:18.980
To make sure that any dumb questions you
don't want to ask because you thought

00:02:19.060 --> 00:02:22.300
everyone else would know the answer,
this is your chance to ask them.

00:02:24.160 --> 00:02:25.600
So what we're going to cover
is a number of things here.

00:02:25.720 --> 00:02:27.940
First of all,
the architecture of Mac OS X.

00:02:27.940 --> 00:02:30.970
Just a quick overview for those of you
who haven't seen the history of it.

00:02:31.050 --> 00:02:33.560
The names and history of the
key technology components.

00:02:33.810 --> 00:02:35.890
What's the difference between
a Carbon and a Cocoa in

00:02:35.910 --> 00:02:37.670
a classic application?

00:02:38.000 --> 00:02:42.100
Some correspondence between what we do
in Mac OS X and what you may be used

00:02:42.200 --> 00:02:44.300
to from your previous UNIX platforms.

00:02:44.560 --> 00:02:47.850
Some high-level differences
from those systems,

00:02:47.850 --> 00:02:49.570
as well as the roadmap.

00:02:50.190 --> 00:02:54.540
So I want to start with some history
about how we got to Mac OS X.

00:02:54.610 --> 00:02:56.000
So this, of course,
is the picture that you've

00:02:56.000 --> 00:03:00.160
always seen a lot of,
of the face of Mac OS X.

00:03:00.270 --> 00:03:04.110
And we talk about the power of
UNIX and the simplicity of Macintosh.

00:03:06.100 --> 00:03:08.440
But for people coming
from a UNIX background,

00:03:08.570 --> 00:03:13.100
you often see it as the simplicity
of UNIX and the power of Macintosh.

00:03:13.330 --> 00:03:14.100
Right?

00:03:14.100 --> 00:03:16.810
It's the idea that people who
think of UNIX as simple... How many

00:03:16.810 --> 00:03:18.100
people think of UNIX as simple?

00:03:18.120 --> 00:03:19.100
Right?

00:03:19.100 --> 00:03:22.380
That's a very different perspective
than the typical Macintosh

00:03:22.380 --> 00:03:24.140
user or Macintosh developer.

00:03:24.800 --> 00:04:48.700
[Transcript missing]

00:04:50.070 --> 00:04:54.180
So we see this is coming together not
just of technologies but also of people.

00:04:54.210 --> 00:04:56.340
Obviously the Macintosh faithful,
people who have been on

00:04:56.340 --> 00:04:59.380
the Mac platform for years,
stuck with us through thick and thin,

00:04:59.410 --> 00:05:02.840
in really core markets where the Mac has
always had a really compelling advantage.

00:05:02.860 --> 00:05:05.280
Among certain segments
of the consumer space,

00:05:05.350 --> 00:05:09.300
creative professionals,
design and publishing, small businesses,

00:05:09.320 --> 00:05:11.290
and particularly educators and students.

00:05:11.510 --> 00:05:13.440
At the same time,
we see this opening the door

00:05:13.550 --> 00:05:15.840
to a whole new range of people,
probably many of you,

00:05:15.840 --> 00:05:17.050
people who really love UNIX.

00:05:17.290 --> 00:05:20.180
These are people doing
animation in movie studios,

00:05:20.230 --> 00:05:23.960
scientists and engineers doing research,
in-house developers doing

00:05:24.010 --> 00:05:26.560
UNIX or even Java applications,
and of course the whole

00:05:26.560 --> 00:05:27.620
open source community.

00:05:27.650 --> 00:05:30.420
We want to make Mac OS X not
just the best operating

00:05:30.420 --> 00:05:33.700
system for existing customers,
as we were focusing on last year,

00:05:33.710 --> 00:05:38.060
but the best platform for
UNIX users and UNIX developers.

00:05:39.100 --> 00:07:12.200
[Transcript missing]

00:07:15.950 --> 00:07:19.400
This was a conscious realization
that our customer base had changed.

00:07:19.450 --> 00:07:21.930
We would never have conceived
of something like that in

00:07:21.990 --> 00:07:23.400
the Mac OS 8 or 9 days.

00:07:23.450 --> 00:07:25.890
But because we realized
that Mac OS X would appeal

00:07:25.890 --> 00:07:29.300
to people like yourselves,
and blurring the line between

00:07:29.310 --> 00:07:32.800
an end user and a developer,
we wanted to take advantage of that

00:07:32.800 --> 00:07:36.400
opportunity to make those tools
available to people like yourselves.

00:07:36.460 --> 00:07:38.680
And then, of course,
the big day in January when

00:07:38.680 --> 00:07:41.130
we made Mac OS X the default
on all of our hardware.

00:07:41.230 --> 00:07:43.960
So it's been almost a four year
journey to get to this point.

00:07:44.030 --> 00:07:46.460
Actually, four years ago at the
developer conference when

00:07:46.460 --> 00:07:51.080
we first launched Mac OS X,
we've gone through two major updates,

00:07:51.080 --> 00:07:53.200
starting in our third here.

00:07:53.200 --> 00:07:57.940
We're very excited about really starting
to take this to the UNIX community.

00:07:58.300 --> 00:07:59.640
Now, why are we interested in doing this?

00:07:59.730 --> 00:08:02.440
One is because we're able to bring
stuff to the UNIX community that

00:08:02.440 --> 00:08:06.700
they've rarely seen or had a hard time
running on traditional UNIX platforms.

00:08:06.700 --> 00:08:10.740
That's productivity software, games,
digital lifestyle applications,

00:08:10.740 --> 00:08:14.590
media players, all sorts of things that,
quote unquote,

00:08:14.700 --> 00:08:18.200
normal platforms use all the time,
but are hard to get on UNIX.

00:08:18.200 --> 00:08:21.210
You either have to emulate
something or dual boot,

00:08:21.220 --> 00:08:21.460
etc.

00:08:21.700 --> 00:08:25.200
We want to have all that stuff available
for people in a true UNIX environment.

00:08:25.200 --> 00:08:27.670
We're also excited, of course,
because this gives us all sorts

00:08:27.670 --> 00:08:30.450
of wonderful things that we've
never had on the Mac or were very

00:08:30.590 --> 00:08:32.200
hard for us to get on the Mac.

00:08:32.240 --> 00:08:36.110
Viridian's developer tools
for optimized profiling,

00:08:36.110 --> 00:08:41.080
scientific software written in Fortran,
visualization technology like Maya,

00:08:41.420 --> 00:08:44.660
scalable network services like Samba,
all sorts of great things that

00:08:44.660 --> 00:08:47.570
are sort of taken for granted
in the UNIX community and very

00:08:47.570 --> 00:08:49.050
hard to get on the Macintosh.

00:08:49.200 --> 00:08:52.480
One of my favorite examples of things
that we've been able to get because

00:08:52.480 --> 00:08:54.110
of our UNIX foundation is MATLAB.

00:08:54.200 --> 00:08:57.430
They had a press release just
yesterday that we've been

00:08:57.430 --> 00:09:00.680
looking for for a long time,
a very powerful engineering

00:09:00.680 --> 00:09:03.910
solution now available on Mac OS,
well, not quite yet available,

00:09:03.910 --> 00:09:07.120
but coming available in large
part because of the ease of doing

00:09:07.120 --> 00:09:09.180
UNIX-based development on Mac OS X.

00:09:09.220 --> 00:09:12.570
So it's a whole new world for us
in terms of customers and solutions

00:09:12.570 --> 00:09:14.100
that we're able to provide.

00:09:16.500 --> 00:09:20.330
So at this point, I'd like to go over the
Mac OS X architecture diagram.

00:09:20.490 --> 00:09:24.710
How many of you have never seen sort of
an architectural walkthrough of Mac OS X?

00:09:25.330 --> 00:09:27.990
Has everyone seen an architectural
walkthrough of Mac OS X?

00:09:28.080 --> 00:09:30.700
Okay, I'll go over this fairly quickly,
but I also want to share,

00:09:30.700 --> 00:09:33.740
I've been involved with this
process for the last four years,

00:09:33.880 --> 00:09:36.350
talk about some of the choices we made,
why we did things,

00:09:36.540 --> 00:09:40.300
how this may impact what
you do in your work.

00:09:40.940 --> 00:09:43.740
The key thing about this architecture,
which I think distinguishes it from

00:09:43.740 --> 00:09:47.040
other attempts to make a usable UNIX,
is we really want to make

00:09:47.040 --> 00:09:48.400
a modular architecture.

00:09:48.590 --> 00:09:51.720
This allows us to do things at the
bottom level without having to rewrite

00:09:51.720 --> 00:09:53.480
everything at the higher layers.

00:09:53.630 --> 00:09:56.380
It enabled Mac OS X to
succeed where previous events,

00:09:56.600 --> 00:09:59.980
attempts at next generation
operating systems had failed.

00:10:00.100 --> 00:10:02.300
But it also allows us to
innovate more rapidly.

00:10:02.470 --> 00:10:05.520
And by understanding which layer
you're working on in Mac OS X,

00:10:05.580 --> 00:10:09.390
you're able to work more rapidly,
more efficiently,

00:10:09.430 --> 00:10:13.400
and yet still be able to access the
power and functionality that you need.

00:10:13.500 --> 00:10:15.820
In particular,
this also allows us to open source

00:10:15.820 --> 00:10:19.600
the lower layers of the system while
still retaining higher value add pieces

00:10:19.930 --> 00:10:23.100
that we can sell commercially and
pay engineers to do more cool stuff.

00:10:23.240 --> 00:10:27.340
It also enables us to support legacy
technology in a modular way without

00:10:27.340 --> 00:10:32.080
having to pollute our APIs or
break compatibility in many cases.

00:10:32.220 --> 00:10:35.300
It also allows us as Apple to
coordinate multiple small teams.

00:10:35.300 --> 00:10:37.770
So we can have teams working on
different technology which may not

00:10:37.770 --> 00:10:38.800
be known to the rest of the company.

00:10:38.800 --> 00:10:43.890
Things like iChat,
which we released or announced yesterday,

00:10:43.890 --> 00:10:47.300
without having to worry about the
entire system having to deal with it.

00:10:47.390 --> 00:10:49.500
Although obviously there are
cases where that happens.

00:10:49.600 --> 00:10:52.370
And more importantly,
it allows us to hide complexity

00:10:52.370 --> 00:10:54.000
from users and developers.

00:10:54.120 --> 00:10:56.900
One of the big challenges in UNIX is
you pretty much had to see everything.

00:10:57.010 --> 00:10:58.900
And it was great that
you could see everything.

00:10:58.980 --> 00:11:01.690
But there was times where you would not
want to see everything or in particular

00:11:01.690 --> 00:11:03.700
end users do not want to see everything.

00:11:03.820 --> 00:11:05.970
This layered architecture
allows certain developers,

00:11:05.970 --> 00:11:08.200
our traditional Mac developers,
our Macintosh end users,

00:11:08.200 --> 00:11:12.850
to experience the benefits of all that
complexity and power without having

00:11:12.850 --> 00:11:16.000
to manage that complexity themselves.

00:11:16.120 --> 00:11:19.820
A lot of that complexity that people
worry about from the non-traditional

00:11:19.820 --> 00:11:22.880
UNIX community is the foundation,
which we call Darwin.

00:11:22.960 --> 00:11:26.200
Darwin is the core
foundation of Mac OS X.

00:11:26.260 --> 00:11:29.970
We actually use it to refer
to a family of technologies:

00:11:29.970 --> 00:11:33.660
the kernel, the libraries,
the network services,

00:11:33.660 --> 00:11:36.650
and the command environment,
what we call user space sometimes.

00:11:36.910 --> 00:11:38.430
And all of that is part of Darwin.

00:11:38.550 --> 00:11:39.540
It's all open source.

00:11:39.740 --> 00:11:46.050
It's all available as part of Mac OS X,
but invisible to the casual user.

00:11:46.910 --> 00:11:49.200
And of course it's all the standard
stuff you expect from UNIX,

00:11:49.200 --> 00:11:49.340
right?

00:11:49.340 --> 00:11:53.290
All the utilities, editors,
and programming languages you expect,

00:11:53.290 --> 00:11:54.800
a full terminal environment.

00:11:54.800 --> 00:11:57.690
But importantly,
it also provides the capability for

00:11:57.850 --> 00:12:01.800
third parties to add other things that
we don't ship as part of the system.

00:12:01.800 --> 00:12:07.800
Whether that's toolkits like X486, QT,
Aqua, TK for Aqua,

00:12:07.800 --> 00:12:13.860
applications like TEC and GIMP and PINE,
and languages like Python, Ruby,

00:12:13.900 --> 00:12:16.800
which as you've heard are coming
part of our system in the future.

00:12:16.870 --> 00:12:19.270
Some of these things may
become part of the system,

00:12:19.270 --> 00:12:20.710
all of these things won't.

00:12:20.800 --> 00:12:23.680
TEC has an enormous quantity
of fonts and infrastructure,

00:12:23.790 --> 00:12:25.800
which probably won't ever be
appropriate for the base system.

00:12:25.800 --> 00:12:29.790
But you know that you can get it and run
it on your system in a nice seamless way.

00:12:29.800 --> 00:12:33.800
Here's an example of
GIMP running in X11 on Mac OS X.

00:12:33.800 --> 00:12:36.160
You can do it,
it's not what we consider the

00:12:36.250 --> 00:12:39.250
most ideal user interface,
but if you need GIMP, it's there,

00:12:39.250 --> 00:12:39.780
it works.

00:12:39.920 --> 00:12:43.010
And there's people working
to port the GTK toolkit to

00:12:43.010 --> 00:12:46.500
Mac OS X so it can run natively,
which would be great.

00:12:47.620 --> 00:12:49.850
And across all the standards,
all sorts of stuff for

00:12:49.900 --> 00:12:52.700
networking and file systems,
directory services, our goal,

00:12:52.700 --> 00:12:56.830
as you heard at the keynote on Monday,
is to get Mac OS X to talk to everything.

00:12:56.890 --> 00:12:59.520
We don't pretend to live
in a Mac-only world.

00:12:59.840 --> 00:13:01.840
We're not trying to
push Mac-only standards.

00:13:02.100 --> 00:13:04.250
When we innovate in
areas like rendezvous,

00:13:04.250 --> 00:13:07.720
we want to make them available to the
entire community in order to make these

00:13:07.720 --> 00:13:11.190
things as industry standard as possible,
so you get all these benefits of

00:13:11.260 --> 00:13:13.350
interoperability and connectivity.

00:13:15.200 --> 00:15:20.800
[Transcript missing]

00:15:21.180 --> 00:15:23.800
We're also investing heavily
in industrial strength

00:15:23.800 --> 00:15:25.090
encryption technology.

00:15:25.260 --> 00:15:27.180
If you were at the previous session,
you heard about the

00:15:27.180 --> 00:15:35.040
Common Data Security Architecture,
an open group standard implemented

00:15:35.040 --> 00:15:36.580
from the ground up in Mac OS X,
also available as open source

00:15:36.580 --> 00:15:36.580
for anyone else to leverage.

00:15:38.510 --> 00:15:40.260
We support the newest
security architectures,

00:15:40.260 --> 00:15:44.800
the AES-128 encryption,
the federal government security standard,

00:15:44.800 --> 00:15:46.680
and we can use that for
volumes and folders,

00:15:46.680 --> 00:15:48.500
as well as for storing
things like the keychain.

00:15:48.500 --> 00:15:51.140
And in addition,
we also work with some interesting

00:15:51.140 --> 00:15:55.470
things because we control the hardware,
the software, and the operating system.

00:15:55.630 --> 00:15:58.440
So, for example,
we put locks on our cases because we

00:15:58.450 --> 00:16:00.960
know that it's easy to open them up,
we want to make it easy for

00:16:00.960 --> 00:16:02.670
people to get into them,
we also want to make it hard for

00:16:02.670 --> 00:16:05.500
the wrong people to get into them,
so it's designed to be lockable.

00:16:05.500 --> 00:16:10.120
Our firmware supports firmware passwords,
which make it difficult for

00:16:10.170 --> 00:16:13.480
people to be able to change the
booting into an insecure mode.

00:16:13.910 --> 00:16:16.660
Things like that that we try
and do to make sure the system

00:16:16.660 --> 00:16:20.500
is as foolproof as possible,
at least under common usage scenarios.

00:16:20.560 --> 00:16:24.420
Obviously, no system is totally secure
given enough time and resources,

00:16:24.640 --> 00:16:26.500
but we try to solve the
problems that we know about.

00:16:26.690 --> 00:16:28.530
More importantly,
we try to solve the common problems

00:16:28.700 --> 00:16:33.090
that usually cause problems for people,
so they're not problems for you.

00:16:34.700 --> 00:16:36.830
And finally below that
we have the kernel,

00:16:36.830 --> 00:16:42.090
which provides the flexibility
of a Mach 3 infrastructure,

00:16:42.090 --> 00:16:45.740
which has great portability,
with the compatibility of BSD 4.4.

00:16:45.870 --> 00:16:48.700
One of the questions we get a lot is,
"Why did you choose a

00:16:48.700 --> 00:16:51.880
BSD foundation?" And it wasn't
just to hire Jordan Hubbard,

00:16:51.880 --> 00:16:53.470
although that was a nice benefit.

00:16:55.300 --> 00:16:58.780
It was because we found BSD more
compatible with our view of

00:16:58.780 --> 00:17:00.100
how we wanted to do things.

00:17:00.110 --> 00:17:03.220
Apple's a corporate company,
we sell commercial software,

00:17:03.220 --> 00:17:05.370
we have a well-maintained,
trustworthy code base

00:17:05.480 --> 00:17:06.900
that we can draw upon.

00:17:06.950 --> 00:17:10.170
And we found that the BSD development
model and the licensing terms and

00:17:10.170 --> 00:17:13.100
really the culture of their community
fit very well with that view of

00:17:13.140 --> 00:17:17.060
having a single repository that
we can maintain and manage well.

00:17:17.100 --> 00:17:20.700
And it gives us great compatibility
with what people expected

00:17:20.700 --> 00:17:22.360
from a UNIX environment.

00:17:22.410 --> 00:17:24.800
However,
the BSD technology didn't really do

00:17:24.800 --> 00:17:28.960
the sort of flexibility we needed
for fine-grained process control,

00:17:28.960 --> 00:17:31.750
for symmetric multi-processing,
for P-thread supported

00:17:31.830 --> 00:17:34.180
at the kernel layer,
things like that.

00:17:34.340 --> 00:17:37.870
And so we chose to go with
an OSF-MK version of Mach 3.

00:17:38.020 --> 00:17:40.490
The Mach 3 technology had been
used previously at Apple for

00:17:40.490 --> 00:17:43.830
other research projects,
has a long history of research in

00:17:44.010 --> 00:17:46.150
academia as well as in industry.

00:17:46.420 --> 00:17:50.220
And by adopting a hybrid
Mach kernel with the BSD 4.4 kernel,

00:17:50.270 --> 00:17:52.360
it gives us a much richer set
of services and capabilities.

00:17:52.360 --> 00:17:56.420
It's a much more complex set of processes
than we would get with straight BSD,

00:17:56.420 --> 00:17:58.300
but still all the compatibility
we'd want from a BSD environment.

00:17:58.340 --> 00:18:01.050
It has its own trade-offs,
but on the whole it's been very useful

00:18:01.050 --> 00:18:04.650
for us in getting to where we are by
today with very great threading support

00:18:05.000 --> 00:18:06.690
as well as a great UNIX environment.

00:18:06.870 --> 00:18:09.580
For those of you who are operating
system researchers out there,

00:18:09.740 --> 00:18:12.540
Mach is technically a
microkernel architecture.

00:18:12.820 --> 00:18:14.790
However,
we are not using it as a microkernel.

00:18:14.830 --> 00:18:18.930
We're welding the Mach and BSD pieces
together as a single process to avoid

00:18:18.930 --> 00:18:22.200
most of the performance implications
of traditional Mach 3 implementation.

00:18:22.200 --> 00:18:25.040
We didn't just stop there, though.

00:18:25.120 --> 00:18:28.280
We took this technology and
enhanced it with Apple innovation.

00:18:28.340 --> 00:18:31.200
In particular,
really great support for modern devices,

00:18:31.200 --> 00:18:33.830
modern hardware, and modern applications.

00:18:33.940 --> 00:18:37.150
So that means things like plug-and-play
drivers for FireWire and USB,

00:18:37.150 --> 00:18:41.330
very responsive multimedia systems,
where you can get very guaranteed

00:18:41.340 --> 00:18:45.140
latency when you're supporting
things like putting back DVD/video,

00:18:45.140 --> 00:18:48.540
the instant sleep/wake that most
of you have seen on our PowerBooks,

00:18:48.540 --> 00:18:50.650
and the seamless mobility,
which is being enhanced

00:18:50.650 --> 00:18:52.040
with things like Rendezvous.

00:18:52.040 --> 00:18:54.540
A lot of this is based on
our I/O Kit technology,

00:18:54.590 --> 00:18:56.780
a very powerful
object-oriented infrastructure,

00:18:56.960 --> 00:19:00.840
which almost guarantees the drivers
you create will work well in an SMP and

00:19:00.950 --> 00:19:02.870
real-time preemptible environment.

00:19:03.040 --> 00:19:05.520
So a lot of things you have to worry
about in terms of finding the right

00:19:05.610 --> 00:19:09.070
kinds of drivers that support the right
kinds of applications are not issues

00:19:09.070 --> 00:19:13.790
in Mac OS X because we ensure that
through our frameworks and technology.

00:19:14.500 --> 00:19:16.220
And of course,
as you probably all know by now,

00:19:16.350 --> 00:19:19.330
all the stuff that's in the
Darwin layer is pretty much open source.

00:19:19.460 --> 00:19:22.930
We have a live open source development
model hosted both at Apple and

00:19:22.930 --> 00:19:24.900
more recently at opendarwin.org.

00:19:25.010 --> 00:19:28.120
We have over 100,000 people
who've downloaded pieces of

00:19:28.120 --> 00:19:30.470
the source code from Apple,
taking advantage of our

00:19:30.470 --> 00:19:31.760
open source projects.

00:19:31.880 --> 00:19:35.230
And one of the big benefits we get are
security and trust due to peer review.

00:19:35.380 --> 00:19:38.230
Our security architecture,
our kernel APIs,

00:19:38.470 --> 00:19:41.100
people can go through these things
and determine for themselves if

00:19:41.100 --> 00:19:42.320
they have security concerns with it.

00:19:42.410 --> 00:19:45.500
They're not reliant on a small
group of experts in a closed room.

00:19:45.570 --> 00:19:50.870
It also gives us access to a much broader
community of people to find and fix bugs.

00:19:50.990 --> 00:19:55.370
So we're very excited for how people
are working with us to enhance the

00:19:55.370 --> 00:19:59.540
performance and security of Darwin,
as well as people who enjoy

00:19:59.640 --> 00:20:01.880
hacking on it for their own sake.

00:20:04.590 --> 00:20:06.400
At this point,
I want to give you a few of the common

00:20:06.510 --> 00:20:11.330
gotchas of people moving to Mac OS X,
through the Darwin Layer experience,

00:20:11.630 --> 00:20:13.740
coming from the UNIX environment.

00:20:13.850 --> 00:20:16.820
The biggest issues I hear about
are HFS+ and case sensitivity,

00:20:16.960 --> 00:20:21.420
the fact that it's almost, but not quite,
POSIX, what happened to their etc.

00:20:21.460 --> 00:20:24.870
configuration files,
dealing with things like frameworks,

00:20:25.010 --> 00:20:27.600
and how we handle preferences.

00:20:29.300 --> 00:20:32.470
So,
the first point here is HFS versus POSIX.

00:20:32.510 --> 00:20:37.280
Now, the biggest issue that people notice
when they deal with the HFS+ file

00:20:37.280 --> 00:20:39.570
system is HFS+ is case sensitive.

00:20:39.710 --> 00:20:42.690
Now, this doesn't mean that Mac OS X as
a whole is case sensitive.

00:20:42.730 --> 00:20:44.570
Mac OS X supports multiple file systems.

00:20:44.860 --> 00:20:47.040
Some of them are case sensitive
and some of them are not.

00:20:47.180 --> 00:20:47.890
Case insensitive.

00:20:48.030 --> 00:20:49.650
Case insensitive.

00:20:49.760 --> 00:20:51.270
Sorry.

00:20:52.040 --> 00:20:53.900
Thank you for the peanut gallery up here.

00:20:53.900 --> 00:20:56.500
Yeah,
this is the case insensitivity in H+

00:20:56.500 --> 00:21:00.400
versus the case sensitivity you expect.

00:21:02.630 --> 00:21:03.890
I'm getting all confused myself now.

00:21:03.890 --> 00:21:06.550
Okay.

00:21:06.600 --> 00:21:08.690
You can't have case
duplicates in the same folder,

00:21:08.800 --> 00:21:09.230
right?

00:21:09.280 --> 00:21:11.290
So if you have a file that says
"Makefile" and another that

00:21:11.370 --> 00:21:14.660
says "Makefile" capital "M" and
lowercase "m," they will collide,

00:21:14.690 --> 00:21:17.480
and that can cause problems if
you're used to experiencing that.

00:21:17.670 --> 00:21:20.360
People have been running this on all
sorts of other operating systems.

00:21:20.400 --> 00:21:23.060
We made a choice that this
is a better user experience.

00:21:23.060 --> 00:21:25.990
You can run on UFS volumes
if you need to,

00:21:26.150 --> 00:21:29.340
but something to be aware of
when you're working on Mac OS X.

00:21:29.500 --> 00:21:32.250
We do get some benefits from
HFS+. Very fast searches for

00:21:32.250 --> 00:21:34.730
filenames based on B-tree searches.

00:21:35.090 --> 00:21:36.640
A couple things to be aware of.

00:21:36.710 --> 00:21:40.170
Soft links and hard links are
emulated slightly differently on

00:21:40.170 --> 00:21:44.140
Mac OS X and HFS+, than they would
be on a traditional Unix file system.

00:21:44.160 --> 00:21:48.410
A soft link, an alias in the HFS+ world,
it can be thought of for a

00:21:48.410 --> 00:21:52.180
Unix person as a soft link
backed up by an inode reference.

00:21:52.300 --> 00:21:54.400
And so that if the name changes,
it'll sort of figure

00:21:54.410 --> 00:21:56.150
out where the file is.

00:21:56.420 --> 00:22:00.000
A soft link on HFS+ is limited
as a special form of an

00:22:00.000 --> 00:22:01.020
alias which behaves properly.

00:22:01.140 --> 00:22:05.900
It's pretty much identical to
a soft link on a UFS volume.

00:22:06.010 --> 00:22:08.240
Hard links, however,
have a slightly different implementation

00:22:08.740 --> 00:22:12.270
where they basically have to create a
dual alias pointing to a third file.

00:22:12.480 --> 00:22:13.270
It does work.

00:22:13.570 --> 00:22:16.520
It provides more or less the same
semantics you expect of hard links,

00:22:16.620 --> 00:22:20.100
but the performance and some of
the other side effects aren't

00:22:20.100 --> 00:22:21.650
quite the same as you might expect.

00:22:21.840 --> 00:22:24.690
So if you have something that
relies on soft link and hard links,

00:22:24.810 --> 00:22:26.930
it should mostly work,
but you may need to be careful about

00:22:26.930 --> 00:22:31.020
it because it's not exactly the same
implementation behind the scenes.

00:22:31.020 --> 00:22:35.350
Another thing that's true about
HFS+ is it supports resource forks.

00:22:35.470 --> 00:22:39.160
Resource forks were very useful
in the old days when HFS,

00:22:39.200 --> 00:22:43.490
the original file system,
didn't support small files very well.

00:22:43.750 --> 00:22:46.720
Because of that,
people put information in resource forks.

00:22:46.760 --> 00:22:48.760
We consider that a legacy technology.

00:22:48.800 --> 00:22:50.980
We don't want people to be
using that going forward,

00:22:51.010 --> 00:22:53.760
but it's still there in HFS+
for people who need to use it.

00:22:53.790 --> 00:22:57.340
Many older Macintosh applications,
even some of the newer ones,

00:22:57.340 --> 00:23:00.980
rely on resource forks for storing
metadata about their application.

00:23:00.980 --> 00:23:03.740
There's an API at the
Carbon layer which supports it,

00:23:03.740 --> 00:23:06.740
but we don't support it
directly at the lower level,

00:23:06.830 --> 00:23:09.380
although there are ways to
access resource forks from the

00:23:09.380 --> 00:23:11.240
POSIX APIs if you really need to.

00:23:11.240 --> 00:23:13.040
Again, something to be aware of,
for example,

00:23:13.040 --> 00:23:16.370
when you're working with Unix utilities,
CP, when you copy a file,

00:23:16.420 --> 00:23:19.440
will copy over just the data fork,
not the resource fork.

00:23:19.440 --> 00:23:22.400
There's some work going on in the Unix
community on resource forks management.

00:23:22.440 --> 00:23:25.470
Maybe that'll change the way these
programs are done in the future,

00:23:25.470 --> 00:23:27.140
but that's where we're at today.

00:23:27.140 --> 00:23:30.940
So, again, we're not going to be
using resource forks

00:23:32.040 --> 00:23:34.590
Another thing about HFS+ is that
it has file system metadata,

00:23:34.690 --> 00:23:36.400
in particular type and creator code.

00:23:36.570 --> 00:23:37.900
We respect type code.

00:23:38.220 --> 00:23:41.380
We recommend people not use creator
code unless they're trying to hard code.

00:23:41.600 --> 00:23:46.590
We recommend that application
developers not write the creator code.

00:23:46.780 --> 00:23:49.000
We think that should be a user
choice if they want to use creator

00:23:49.000 --> 00:23:53.490
metadata in their documents for them
to open with a specific application.

00:23:53.600 --> 00:23:57.200
In general,
we support file name extensions as the

00:23:57.200 --> 00:24:02.600
best cross-platform way to associate
type information with a document.

00:24:02.900 --> 00:24:08.480
You will often see applications on
the Macintosh which do not have or

00:24:08.480 --> 00:24:11.700
at least do not show an extension.

00:24:11.700 --> 00:24:11.700
That's something to be aware of.

00:24:12.570 --> 00:24:14.260
The fact that we're mostly POSIX.

00:24:14.260 --> 00:24:17.560
We really try our best to
implement the POSIX API set,

00:24:17.660 --> 00:24:22.450
working off the single UNIX specification
version 3 and the antecedent documents.

00:24:22.600 --> 00:24:24.420
As we've been working
to sync with FreeBSD,

00:24:24.430 --> 00:24:26.250
we've been improving our POSIX support.

00:24:26.750 --> 00:24:29.500
There's some thread signaling issues
that we're addressing in Jaguar

00:24:29.500 --> 00:24:31.500
to improve per-thread signaling.

00:24:31.500 --> 00:24:34.520
Our perspective on POSIX compliance
is that if you need it,

00:24:34.520 --> 00:24:37.500
because you have an application
that actually uses it,

00:24:37.500 --> 00:24:38.500
and it's missing, it is a bug.

00:24:38.500 --> 00:24:39.340
It's a fair bug.

00:24:39.550 --> 00:24:41.430
File it, and we'll talk about it.

00:24:41.540 --> 00:24:44.500
We're not going to try and fix
every possible POSIX compliance bug.

00:24:44.500 --> 00:24:48.490
It's a lot of work for relatively
little benefit in this day and age.

00:24:48.620 --> 00:24:50.280
But we want to work with you.

00:24:50.500 --> 00:24:53.410
If there's some functionality
that you really wish was there,

00:24:53.570 --> 00:24:56.500
it's all in open source there,
we're happy to work with you and see.

00:24:56.590 --> 00:24:58.780
People have done open source libraries,
and we've looked at that,

00:24:58.780 --> 00:25:00.500
and it's often inspired
future work of our own.

00:25:00.500 --> 00:25:02.500
Sometimes we adopt it.

00:25:02.500 --> 00:25:04.860
We want to work with you on it,
and we think we're pretty good,

00:25:04.970 --> 00:25:08.310
but we know there's a few corner cases,
and we want to keep talking with you

00:25:08.360 --> 00:25:10.160
about those to see if we can do better.

00:25:11.960 --> 00:25:13.840
Managing Configuration Data.

00:25:13.840 --> 00:25:17.560
As most of you know,
in Mac OS 10.1 today,

00:25:17.650 --> 00:25:19.190
we don't use any of the /etc.

00:25:19.190 --> 00:25:22.410
files, the typical way you manage
configuration data for a UNIX system.

00:25:22.560 --> 00:25:24.400
We use a database called NetInfo.

00:25:24.540 --> 00:25:27.760
That's currently what we use
as the primary data store.

00:25:28.110 --> 00:25:30.400
Moving forward for Jaguar,
we're moving to something

00:25:30.400 --> 00:25:31.400
called Open Directory.

00:25:31.510 --> 00:25:34.170
Open Directory allows us to have
a much more flexible and open

00:25:34.170 --> 00:25:37.340
architecture for managing all
this configuration information.

00:25:37.470 --> 00:25:40.140
What we're going to try and do
is move away from sort of the

00:25:40.140 --> 00:25:43.330
NetInfo-centric view we have today,
something that's more built

00:25:43.330 --> 00:25:45.630
around the LDAP protocol,
which includes the ability

00:25:45.630 --> 00:25:48.840
to do flat file support,
currently read-only in Jaguar.

00:25:49.140 --> 00:25:50.990
But that's usually the most common
way that people want to do it.

00:25:51.070 --> 00:25:54.610
They want to be able to hand-edit their
configuration files and have it just work

00:25:55.100 --> 00:25:57.460
in adding users and so forth to Mac OS X.

00:25:57.750 --> 00:26:00.770
And with Jaguar, we expect that to be a
fully supported option.

00:26:00.870 --> 00:26:04.710
So you don't need to, you know,
use NetInfo if you don't want to.

00:26:04.740 --> 00:26:06.740
You can just edit configuration files
and have them work as you would expect.

00:26:06.740 --> 00:26:06.740
So you don't need to, you know,
use NetInfo if you don't want to.

00:26:06.740 --> 00:26:06.740
You can just edit configuration files
and have them work as you would expect.

00:26:06.750 --> 00:26:07.980
You can just edit configuration files
and have them work as you would expect.

00:26:08.010 --> 00:26:09.770
On a traditional Unix system.

00:26:09.930 --> 00:26:10.620
Feel free to applaud.

00:26:10.810 --> 00:26:14.040
I know a few people have been yelling
me about that for quite some time.

00:26:14.230 --> 00:26:16.780
We are working to
improve our NIS support.

00:26:16.780 --> 00:26:19.800
We don't have any plans
for formal NIS support.

00:26:19.860 --> 00:26:21.630
Sun's network information system.

00:26:21.710 --> 00:26:24.660
We are working with some open source
developers to see about ways to plug

00:26:24.670 --> 00:26:27.140
that in directory services going forward.

00:26:27.170 --> 00:26:30.930
We still want to support the idea of a
local database rather than flat files,

00:26:31.040 --> 00:26:33.240
although we do use it and allow it.

00:26:33.450 --> 00:26:36.140
We think there's benefits to
having a database structure.

00:26:36.160 --> 00:26:39.040
We will continue to
support that as a way,

00:26:39.040 --> 00:26:42.500
but not the only way for supporting
user configuration information.

00:26:42.540 --> 00:26:45.870
Until then, if you need to access NetInfo
data from the command line,

00:26:45.870 --> 00:26:50.780
there are tools like NILoad, NIDump,
NICL, the NetInfo command line,

00:26:50.800 --> 00:26:53.890
which can be very useful for you if
you're in a command line environment and

00:26:53.890 --> 00:26:57.100
you need to access NetInfo functionality.

00:26:59.390 --> 00:27:02.300
Another thing that often throws
people is the idea of frameworks.

00:27:02.300 --> 00:27:06.530
A framework can be considered
a shared library plus a header.

00:27:06.730 --> 00:27:10.400
This is very important for us because it
hides implement details from developers.

00:27:10.460 --> 00:27:13.510
For example, the system framework,
which is where most of the

00:27:13.510 --> 00:27:17.490
UNIX-related stuff exists,
contains all the standard UNIX libraries

00:27:17.960 --> 00:27:20.890
that you tend to have a lot of -l's
on your command line for if you're

00:27:20.890 --> 00:27:22.540
doing standard UNIX development.

00:27:22.580 --> 00:27:26.820
So the CRUN, TIME, MATH libraries,
CURSES, things like this are all

00:27:26.840 --> 00:27:28.240
part of the system framework.

00:27:28.300 --> 00:27:31.400
We even include a few aliases
so that if you have -lm,

00:27:31.440 --> 00:27:34.710
it doesn't complain that it's not there,
it just knows that it's really just

00:27:34.710 --> 00:27:36.330
linking in the system framework.

00:27:36.420 --> 00:27:38.790
So usually you never need to
think about it because the system

00:27:38.790 --> 00:27:42.460
framework is linked by default for
most command line applications.

00:27:42.530 --> 00:27:45.860
But occasionally you'll find something
that isn't where you expect it

00:27:45.870 --> 00:27:49.560
to be and you need to dig around
and it's in the system framework.

00:27:53.330 --> 00:27:54.340
Preferences.

00:27:54.380 --> 00:27:57.080
The typical UNIX way of handling
preferences is to have dot

00:27:57.080 --> 00:28:00.600
files in your home directory,
which is fine, and if that's what you're

00:28:00.600 --> 00:28:03.340
writing a UNIX application,
it should continue to do that.

00:28:03.480 --> 00:28:05.740
However,
Macintosh users expect application

00:28:05.740 --> 00:28:09.160
defaults to be in a special
directory called library preferences.

00:28:09.330 --> 00:28:10.500
This is important for a couple of things.

00:28:10.620 --> 00:28:13.350
One, it's a user-visible place
where people can go there and

00:28:13.350 --> 00:28:14.790
manage it in various ways.

00:28:14.870 --> 00:28:16.860
But more importantly,
it's part of a search path.

00:28:16.980 --> 00:28:19.670
There's the home directory's
library preferences,

00:28:19.670 --> 00:28:22.060
there's a local library
and slash library,

00:28:22.170 --> 00:28:24.380
there's a network library,
which can be under slash network,

00:28:24.390 --> 00:28:27.100
and a system library under
slash system library.

00:28:27.210 --> 00:28:29.480
And what this allows us to
do is to have defaults that

00:28:29.520 --> 00:28:31.180
scale across multiple domains.

00:28:31.310 --> 00:28:34.100
So, for example,
I as an administrator can set the default

00:28:34.100 --> 00:28:37.980
browser for my site for all my users,
either by setting it when the

00:28:37.980 --> 00:28:42.390
user is created or setting it at a
network or a local library layer.

00:28:42.490 --> 00:28:45.620
So it allows people to override those
defaults if they want to in their local,

00:28:45.710 --> 00:28:46.810
but still have the concept
of a global library.

00:28:46.820 --> 00:28:49.700
So, for example,
I can set the global default value set at

00:28:49.700 --> 00:28:52.660
the local network or Apple system level.

00:28:52.660 --> 00:28:55.860
Very important for creating
a very flexible way for

00:28:55.860 --> 00:28:58.020
specifying user preferences.

00:28:58.020 --> 00:29:03.200
The file format is also formalized around
an XML DTD known as a property list,

00:29:03.200 --> 00:29:05.000
which makes it easy for you
to edit alternate tools.

00:29:05.120 --> 00:29:08.220
So you can go in by hand and
edit a configuration file.

00:29:08.270 --> 00:29:11.380
I can't count the number of times where
I had a Mac OS 9 application where

00:29:11.380 --> 00:29:14.400
the preferences file was screwed up
and I had no idea what was going on.

00:29:14.510 --> 00:29:16.780
Now with Mac OS X,
I can go in at the command line,

00:29:16.960 --> 00:29:19.850
fire up Emacs,
go through the XML and say, "Okay,

00:29:19.850 --> 00:29:22.040
this is what's screwing me up,"
and just delete it and get rid

00:29:22.040 --> 00:29:24.380
of it and move on with my life.

00:29:25.680 --> 00:29:27.220
So that's what's happening
at the Darwin layer,

00:29:27.220 --> 00:29:30.940
and that's probably what a lot of people
think of as the UNIX nature of Mac OS X.

00:29:31.020 --> 00:29:33.040
What I wanted to do,
fairly quickly since most of you

00:29:33.140 --> 00:29:36.190
have probably seen this before,
go over some of the higher level

00:29:36.190 --> 00:29:38.840
technologies in Mac OS X and
our philosophy behind them,

00:29:38.840 --> 00:29:42.620
and what are the benefits
they bring to a UNIX user.

00:29:44.470 --> 00:29:47.150
So, in the graphics layer,
there's three key technologies.

00:29:47.150 --> 00:29:50.840
The first of them is Quartz,
our 2D graphics engine.

00:29:51.030 --> 00:29:54.380
Bottom line, it works with PDF,
it handles pretty much all your fonts,

00:29:54.570 --> 00:29:56.640
takes care of printing
and color correction,

00:29:56.640 --> 00:29:58.400
all sorts of wonderful things.

00:29:58.400 --> 00:30:02.390
The big thing from my perspective is that
it makes PDF a first-class data type.

00:30:02.390 --> 00:30:06.400
Pretty much every application
can both render and generate PDF.

00:30:06.400 --> 00:30:08.550
If you're like me,
you really hate it when people

00:30:08.550 --> 00:30:11.010
send you Word documents,
because you don't always have

00:30:11.100 --> 00:30:13.280
a copy of Microsoft Office,
certainly not a legal

00:30:13.350 --> 00:30:16.400
copy of Microsoft Office,
on every machine that you work on.

00:30:16.410 --> 00:30:18.360
And so by having
PDF documents set around,

00:30:18.360 --> 00:30:21.400
you can have legit readers and
send read-only copies to people,

00:30:21.430 --> 00:30:24.330
which they can view even if they're
running on Linux or FreeBSD or something,

00:30:24.410 --> 00:30:27.590
where they're not really
able to run Office.

00:30:28.090 --> 00:30:30.300
OpenGL is the industry
center for 3D rendering.

00:30:30.300 --> 00:30:32.640
A lot of great applications
written using OpenGL,

00:30:32.850 --> 00:30:36.000
both the game space and the
scientific visualization space.

00:30:36.080 --> 00:30:38.190
Apple's really taking a
leadership role in OpenGL.

00:30:38.190 --> 00:30:40.050
We're on the architecture review board.

00:30:40.170 --> 00:30:43.130
Because we control the
hardware and the software,

00:30:43.180 --> 00:30:46.000
there's a small number of card
vendors we work very closely with.

00:30:46.140 --> 00:30:51.130
We're really interested in having a
great customer experience and great

00:30:51.130 --> 00:30:54.490
performance with our OpenGL applications.

00:30:55.390 --> 00:31:02.300
QuickTime is driving
the evolution of MPEG-4,

00:31:02.300 --> 00:31:02.300
the new standard for
streaming multimedia.

00:31:02.300 --> 00:31:05.440
QuickTime provides a
very rich set of APIs.

00:31:05.590 --> 00:31:07.300
There's really nothing like
it on any other platform.

00:31:07.300 --> 00:31:11.280
It provides things for managing sound,
images, music,

00:31:11.550 --> 00:31:15.300
and all sorts of wonderful,
rich multimedia data types.

00:31:15.300 --> 00:31:18.650
All being moved towards
using open standard,

00:31:18.650 --> 00:31:21.300
open source protocols in many cases.

00:31:21.300 --> 00:31:27.300
And it's also very widely used
on both Macintosh and Windows.

00:31:28.210 --> 00:31:34.020
And then the quartz compositor,
of course leading now to Quartz Extreme,

00:31:34.020 --> 00:31:36.330
but a very powerful
technology for integrating 2D,

00:31:36.650 --> 00:31:40.320
3D, and video in a seamless way,
allowing very rich effects,

00:31:40.320 --> 00:31:44.260
allowing a very nice user experience
that preserves what I like to

00:31:44.320 --> 00:31:45.960
call the illusion of reality.

00:31:45.990 --> 00:31:49.700
You're working with these windows,
they feel like tangible objects.

00:31:49.760 --> 00:31:53.510
They don't tear, they don't disappear,
they don't go all outlining on

00:31:53.510 --> 00:31:55.280
you when you try to resize them.

00:31:55.560 --> 00:31:56.410
They feel real.

00:31:56.640 --> 00:31:59.360
And that's part of the illusion
we're trying to create to help

00:31:59.440 --> 00:32:02.350
you work at a higher level of
abstraction and not be distracted.

00:32:02.700 --> 00:32:05.150
Some of you like looking at bits
being redrawn on the screen,

00:32:05.150 --> 00:32:06.660
so maybe it's not as big for you.

00:32:06.730 --> 00:32:09.940
We want to try and preserve that for
our graphics customers who want to be

00:32:09.940 --> 00:32:11.780
able to live in a much richer world.

00:32:13.720 --> 00:32:16.760
One of the questions that comes up
in this context is X11 as a windowing

00:32:16.760 --> 00:32:18.400
system in a graphics technology.

00:32:18.480 --> 00:32:20.720
X11 is not part of the system.

00:32:20.810 --> 00:32:23.700
We made a decision very early
on that X11 did not provide

00:32:23.700 --> 00:32:27.040
the sort of font and rendering
support we wanted for our system.

00:32:27.160 --> 00:32:30.470
But we wanted to make sure it
was available to our community.

00:32:30.590 --> 00:32:32.210
So we worked with a
number of third parties,

00:32:32.210 --> 00:32:35.450
people like Tenant Interest Systems,
Powerline USA,

00:32:35.450 --> 00:32:39.100
and of course the X46 project,
which does a free open source version,

00:32:39.190 --> 00:32:41.160
to make sure that they have
good versions for Mac OS X.

00:32:41.300 --> 00:32:44.210
We work with them as much as we
can to help them provide X11-based

00:32:44.210 --> 00:32:45.900
solutions for our customers.

00:32:45.990 --> 00:32:48.370
And let us focus our
engineering resources on those

00:32:48.370 --> 00:32:51.630
things that only we can do:
trying to drive Quartz to the next level,

00:32:51.780 --> 00:32:54.180
trying to create a very
rich user environment.

00:32:54.380 --> 00:32:57.590
We do highly recommend,
where you have the choice,

00:32:57.590 --> 00:33:00.580
to use Aqua-compliant
native GUIs instead.

00:33:00.650 --> 00:33:03.720
If you have a third-party application
which is running on multiple

00:33:03.720 --> 00:33:06.490
platforms and you have to use X11,
that's fine.

00:33:06.540 --> 00:33:08.930
A lot of applications are coming
into the platform because of it.

00:33:09.030 --> 00:33:10.680
We embrace those applications.

00:33:10.740 --> 00:33:12.430
We're not going to be showing
them as often in keynotes

00:33:12.490 --> 00:33:14.330
because they don't look as nice,
but we're still glad to

00:33:14.400 --> 00:33:15.370
have them on the platform.

00:33:15.520 --> 00:33:18.660
If you have a choice,
you can use Quartz directly for

00:33:18.820 --> 00:33:21.050
some graphical implementations.

00:33:21.140 --> 00:33:23.480
You can use Glott diffusing OpenGL.

00:33:23.550 --> 00:33:27.570
There's TKAqua, which can work with Tcl,
Perl, and Python.

00:33:27.680 --> 00:33:29.710
And Trolltex ported the QT toolkit.

00:33:29.840 --> 00:33:31.910
So wherever you can,
we try to encourage you to work

00:33:31.910 --> 00:33:34.650
at the highest level possible
to get the best user experience,

00:33:34.650 --> 00:33:37.440
the most leverage of
native Apple technologies.

00:33:37.490 --> 00:33:40.140
But if you need to go down to the metal,
and use legacy technologies,

00:33:40.140 --> 00:33:42.810
we want you to have that option.

00:33:43.700 --> 00:33:45.720
Frameworks.

00:33:45.720 --> 00:33:48.640
Taking this technology and bundling it
up in ways that people have a consistent,

00:33:48.640 --> 00:33:51.640
coherent environment creates
a much more productive and

00:33:51.640 --> 00:33:53.490
consistent platform for developers.

00:33:53.620 --> 00:33:55.300
That's why we have a developer
conference like this,

00:33:55.390 --> 00:33:57.650
because there are people who
are Cocoa developers who have

00:33:57.730 --> 00:33:58.820
a very rich set of frameworks.

00:33:58.820 --> 00:34:00.110
They expect to be there.

00:34:00.250 --> 00:34:01.790
They know where it comes from.

00:34:01.910 --> 00:34:03.220
They know who the developers are.

00:34:03.360 --> 00:34:06.070
So you go to one place and
get your problem solved and be

00:34:06.110 --> 00:34:09.510
assured that all your customers
will have it on their system.

00:34:10.410 --> 00:34:12.460
Our goal is to really make
sure that you can come onto the

00:34:12.610 --> 00:34:16.020
Mac platform from wherever you are,
whether you're a Mac developer, a UNIX,

00:34:16.020 --> 00:34:18.540
Linux, or BSD developer,
or a Java developer,

00:34:18.740 --> 00:34:25.010
or creating a whole new
application from scratch,

00:34:25.010 --> 00:34:25.010
or learning to program,
we want you to be able

00:34:25.010 --> 00:34:25.010
to succeed on Mac OS X.

00:34:25.770 --> 00:34:29.840
We're on some history here for those
of you who may not be familiar with it.

00:34:29.840 --> 00:34:32.860
The legacy environment on
Mac OS X is known as Classic.

00:34:33.000 --> 00:34:37.790
Classic is actually based on older
technology coming over from UNIX.

00:34:39.270 --> 00:34:41.190
This is a virtual machine called
the Mac Application Environment.

00:34:41.310 --> 00:34:44.690
This was used back in the 90s for
people to run Mac applications

00:34:44.700 --> 00:34:46.200
on their Sun workstations,
for example.

00:34:46.200 --> 00:34:49.200
It was really a virtual machine for UNIX.

00:34:49.200 --> 00:34:51.250
We took that,
sliced off the bottom half of that,

00:34:51.250 --> 00:34:53.230
and created something
called the Blue Box,

00:34:53.330 --> 00:34:57.190
which was used in the Rhapsody
and the Mac OS X 1.0 products.

00:34:57.200 --> 00:35:02.050
This allowed you to have Mac applications
on one screen and then your native

00:35:02.050 --> 00:35:05.320
applications on another screen,
and you'd swap between the two,

00:35:05.470 --> 00:35:08.010
kind of like a virtual
workspace in the Linux world.

00:35:08.330 --> 00:35:10.600
And it worked fine for its role there,
but we want to have a better

00:35:10.600 --> 00:35:12.140
experience for legacy applications.

00:35:12.220 --> 00:35:18.030
So classic applications are those
that are written to the Mac OS 9 APIs.

00:35:18.390 --> 00:35:21.200
They make certain assumptions about
being able to own the entire machine.

00:35:21.200 --> 00:35:25.050
And we want them to be able
to do that so they can run.

00:35:25.200 --> 00:35:27.150
We don't want them to try and take
over the machine because we've

00:35:27.150 --> 00:35:28.200
got a UNIX kernel underneath.

00:35:28.200 --> 00:35:32.400
So we created this idea of a
classic environment which can

00:35:32.400 --> 00:35:37.200
run Mac OS 9 applications more
or less seamlessly with Mac OS X.

00:35:37.200 --> 00:35:38.200
But you don't usually
need to think about it.

00:35:38.200 --> 00:35:41.340
It's also important that you can have
this either as a separate disk image or

00:35:41.460 --> 00:35:44.170
as another volume on the same partition.

00:35:44.280 --> 00:35:47.290
In many cases it should be more
or less invisible that you're

00:35:47.290 --> 00:35:49.190
running a classic application.

00:35:49.210 --> 00:35:51.630
We hope that you don't
need to do this very often,

00:35:51.630 --> 00:35:55.200
but often you will have an application
which is not being updated at all.

00:35:55.200 --> 00:35:58.200
The developer or the company
is no longer in that business,

00:35:58.240 --> 00:36:02.200
and we want you to be able to access and
run those applications if you need to.

00:36:02.200 --> 00:36:04.880
However, we don't really want you to be
running these things and certainly

00:36:04.880 --> 00:36:06.200
not writing any of these things.

00:36:06.210 --> 00:36:08.190
We'd rather have you work
on something called Carbon.

00:36:08.550 --> 00:36:11.180
Carbon is a way to optimize
existing Mac OS 9 applications

00:36:11.210 --> 00:36:13.200
to take advantage of Mac OS X.

00:36:13.200 --> 00:36:17.330
An example here of Mathematica,
a great example of a

00:36:17.400 --> 00:36:20.200
Carbon application for Mac OS X.

00:36:20.200 --> 00:36:23.200
And Carbon is the easiest way to
bring your existing Mac applications.

00:36:23.200 --> 00:36:26.150
Basically it's the way that
things like Office came.

00:36:26.220 --> 00:36:28.200
They took their Mac OS 9 application,
they modernized it,

00:36:28.200 --> 00:36:31.310
removed a few legacy APIs,
adopted a big data types,

00:36:31.440 --> 00:36:34.540
adopted an API that was sure to be
reentrant so you could have multiple

00:36:34.590 --> 00:36:35.200
processes running on the same disk.

00:36:35.230 --> 00:36:40.000
And then they now have the option
of being able to run applications

00:36:40.000 --> 00:36:42.200
on both Mac OS 9 and Mac OS X.

00:36:42.230 --> 00:36:44.920
Obviously we want developers to
be focusing on Mac OS X because

00:36:45.030 --> 00:36:48.200
that's where the money is,
as well as where our efforts are.

00:36:48.200 --> 00:36:51.010
But people who need to deliver
applications onto legacy systems,

00:36:51.010 --> 00:36:53.190
there is a Carbon lib that
allows them to do that.

00:36:53.200 --> 00:36:58.120
And this is what's been used by
major ISVs to get to Mac OS X.

00:36:58.340 --> 00:37:00.630
Office, for example,
Mathematica did a great job

00:37:00.630 --> 00:37:04.200
of taking their Unix backend,
which was their strongest backend,

00:37:04.200 --> 00:37:07.290
and their Mac frontend,
which was their best looking frontend,

00:37:07.290 --> 00:37:11.200
and combining them into a single
application that ran on Mac OS X.

00:37:11.200 --> 00:37:14.200
And taking advantage then of
Mac OS X technologies like anti-aliasing

00:37:14.200 --> 00:37:19.190
to deliver an even superior customer
experience than they ever had before.

00:37:24.020 --> 00:37:26.360
Of course,
one of the things we're focusing

00:37:26.360 --> 00:37:29.500
a lot on these days is Cocoa,
which is really the easiest

00:37:29.570 --> 00:37:34.090
way to create fully native,
Aqua-compliant Mac OS X applications.

00:37:34.400 --> 00:37:36.890
You can also do all that in Carbon,
but it's more work.

00:37:36.990 --> 00:37:41.160
And for those of us who are lazy like me,
we like the idea of Cocoa.

00:37:41.310 --> 00:37:44.510
And Cocoa provides a very rich
suite of pre-built widgets,

00:37:44.530 --> 00:37:47.830
makes it very easy to create
Aqua-compliant front ends,

00:37:47.980 --> 00:37:50.500
has a very robust
object-oriented architecture.

00:37:50.620 --> 00:37:53.470
One of the great things about
Cocoa is that it's often very easy

00:37:53.470 --> 00:37:56.980
to integrate C or C++ back ends,
or even command line utilities,

00:37:57.080 --> 00:37:58.200
into rich applications.

00:37:58.260 --> 00:37:59.850
And in the next session,
you'll be seeing some

00:37:59.880 --> 00:38:00.850
examples of doing that.

00:38:00.980 --> 00:38:04.000
It also takes full advantage
of all the Mac OS X tools and

00:38:04.040 --> 00:38:07.230
provides a great alternative
to traditional UNIX interfaces.

00:38:07.390 --> 00:38:10.000
This is an example we showed
at Macworld in January.

00:38:10.070 --> 00:38:12.900
We were running around saying, "You know,
we need to have a great demo showing how

00:38:12.900 --> 00:38:17.270
easy it is to bring UNIX code over to
Mac OS X." We really wanted to stress

00:38:17.270 --> 00:38:19.200
the UNIX nature of Mac OS X this year.

00:38:19.200 --> 00:38:22.700
So we called up one of our friends,
at TweakWaves, an animation studio known

00:38:22.700 --> 00:38:24.000
for The Perfect Storm.

00:38:24.000 --> 00:38:25.570
And there's a guy there who was like,
"Mr.

00:38:25.570 --> 00:38:25.960
Waves.

00:38:26.160 --> 00:38:29.100
This guy's life is creating
waves." He has this piece of very

00:38:29.100 --> 00:38:33.040
sophisticated custom software that
generates these wonderful wave

00:38:33.070 --> 00:38:35.190
algorithms that are used in movies.

00:38:35.300 --> 00:38:37.400
And this is what it looked
like before there was Cocoa.

00:38:37.400 --> 00:38:39.970
This is what his environment was,
sitting in front of a nice,

00:38:39.970 --> 00:38:44.900
gray pudding-like simulation of waves
on a high-powered SGI workstation.

00:38:44.990 --> 00:38:47.060
And we said, "We've only got two weeks.

00:38:47.200 --> 00:38:48.950
Can you get us something ready
for Macworld January?" He goes,

00:38:48.950 --> 00:38:50.300
"Well, I don't know,
but I'll give it a try."

00:38:50.300 --> 00:38:52.790
So he got a copy of Mac OS X,
brought it over.

00:38:52.800 --> 00:38:55.000
It took a few days.

00:38:55.000 --> 00:38:56.100
He goes, "Wow, this is great.

00:38:56.100 --> 00:38:58.100
I have a whole week left before the demo.

00:38:58.100 --> 00:39:01.910
What else can I do?" He said, "Well,
why don't I try and take advantage

00:39:01.910 --> 00:39:04.210
of it to do new things I could
never do before?" So he added

00:39:04.360 --> 00:39:06.100
texture mapping using QuickTime.

00:39:06.100 --> 00:39:08.400
He added dynamic user interface controls.

00:39:08.400 --> 00:39:10.100
He drew a background using Maya.

00:39:10.100 --> 00:39:13.100
And now it went from looking
like that to looking like this.

00:39:13.100 --> 00:39:16.600
And this is a sort of
productivity enhancement.

00:39:16.600 --> 00:39:18.740
Yes, technically,
you could have done this

00:39:18.830 --> 00:39:20.200
on a UNIX system with X11.

00:39:20.200 --> 00:39:21.200
And Qt.

00:39:21.260 --> 00:39:23.940
But you never would have
because it was too much work.

00:39:24.070 --> 00:39:27.800
With Mac OS X, I honestly believe this as
a long-time UNIX hacker,

00:39:27.900 --> 00:39:31.250
it's as easy to create a
good-looking GUI as it is to

00:39:31.300 --> 00:39:34.100
create a traditional command line
interface for your application.

00:39:34.150 --> 00:39:34.820
So do so.

00:39:35.170 --> 00:39:36.490
It gives you much wider visibility.

00:39:36.500 --> 00:39:38.420
It makes it easier for you to
remember how to use it when you

00:39:38.450 --> 00:39:40.100
come back to it three months later.

00:39:40.100 --> 00:39:42.700
And it gives something that's
a much better user experience.

00:39:42.730 --> 00:39:46.990
And we think using Cocoa technology
is a great way to really spice up

00:39:47.010 --> 00:39:49.490
your existing UNIX applications.

00:39:49.910 --> 00:39:53.290
One thing that people often ask about
with regard to Cocoa is Objective-C.

00:39:53.290 --> 00:39:55.550
Objective-C is the native
language used for Cocoa.

00:39:55.650 --> 00:40:00.200
It was invented by Brad Cox,
one of the great innovators in our field.

00:40:00.310 --> 00:40:02.880
Used in Next Step,
which is where we inherited from.

00:40:03.000 --> 00:40:06.040
The basic idea of Cocoa was
that every object invocation,

00:40:06.140 --> 00:40:08.800
everything inside those funny brackets,
is a function called

00:40:08.800 --> 00:40:10.300
Objective-C message send.

00:40:10.420 --> 00:40:13.860
Which basically goes through a class
information to do lookups to methods.

00:40:13.970 --> 00:40:16.020
It's actually not that
much rocket science.

00:40:16.140 --> 00:40:18.700
The runtime is all there in Open Source.

00:40:18.790 --> 00:40:20.190
Nothing to be afraid of.

00:40:20.270 --> 00:40:24.380
It's actually more dynamic than
what you typically find in C++,

00:40:24.500 --> 00:40:25.700
but in some ways it's also simpler.

00:40:25.950 --> 00:40:28.800
Objective-C tends to take
advantage of weak typing,

00:40:28.890 --> 00:40:31.500
although you can also use strong typing.

00:40:31.620 --> 00:40:34.250
In particular, Objective-C,
very much like Java,

00:40:34.310 --> 00:40:36.990
has single inheritance
of implementations.

00:40:37.090 --> 00:40:38.870
You get multiple types of interfaces.

00:40:39.000 --> 00:40:41.800
We call them protocols,
Java calls them interfaces.

00:40:41.820 --> 00:40:46.880
C++ you can consider
a pure abstract class.

00:40:47.140 --> 00:40:50.290
But a lot of the concepts you find
in Java are actually borrowed from,

00:40:50.420 --> 00:40:53.180
James Gobsling was here yesterday and he
actually admitted that some of the ideas

00:40:53.320 --> 00:40:57.000
like protocols were ripped off directly
from Objective-C when they invented Java.

00:40:57.110 --> 00:41:00.110
So if you understand Java,
you can probably understand a lot

00:41:00.230 --> 00:41:03.880
of the concepts of Objective-C,
but unlike Java, it is all native code,

00:41:04.080 --> 00:41:08.630
has seamless integration with C and C++,
and we think it's very useful for

00:41:08.630 --> 00:41:11.940
the types of desktop applications
that Cocoa is designed for.

00:41:12.000 --> 00:41:16.000
So we encourage you to check it out,
and there's lots of sessions on that,

00:41:16.000 --> 00:41:18.000
and it's actually not that big of a deal.

00:41:18.000 --> 00:41:20.060
Once you get used to
seeing brackets in places,

00:41:20.060 --> 00:41:22.870
it's actually a very rapid way to
just spice up your existing C code

00:41:23.210 --> 00:41:24.990
with some nice graphical front ends.

00:41:25.000 --> 00:41:27.850
Of course,
Cocoa is also accessible from Java if you

00:41:27.940 --> 00:41:30.390
prefer a Java programming environment.

00:41:31.470 --> 00:41:33.340
And of course,
if you just want to write straight

00:41:33.340 --> 00:41:36.100
Java cross-platform applications,
we do a really great job of

00:41:36.220 --> 00:41:37.840
supporting Java on the desktop.

00:41:37.970 --> 00:41:42.140
At Java 1, Ahsan and lots of other people
really acknowledge how we're really

00:41:42.150 --> 00:41:45.660
taking the initiative in driving
Java forward on the desktop.

00:41:45.830 --> 00:41:49.070
We made sure that every copy of
Mac OS X we ship includes a fully

00:41:49.070 --> 00:41:50.840
compliant version of Java 2.

00:41:50.920 --> 00:41:53.340
Not just compliant,
but also using the latest

00:41:53.360 --> 00:41:56.790
client VM based on hotpot
technology for best performance.

00:41:56.900 --> 00:41:59.500
We've worked on adding a
very native look and feel.

00:41:59.570 --> 00:42:01.330
In many cases,
it's very difficult to tell whether an

00:42:01.330 --> 00:42:06.630
application is a native Cocoa application
or a Java swing application.

00:42:06.780 --> 00:42:09.750
We've done some interesting innovations,
basically the idea of

00:42:09.750 --> 00:42:12.910
shared libraries for Java,
which reduce the memory footprint

00:42:13.320 --> 00:42:15.600
and decrease startup time.

00:42:15.740 --> 00:42:18.130
Some other enhancements
like 2D acceleration,

00:42:18.280 --> 00:42:21.700
taking advantage of hardware,
and working very closely with our

00:42:21.700 --> 00:42:24.300
third-party partners to make sure
we have a wide range of tools

00:42:24.300 --> 00:42:28.460
and utilities that you'd expect
for Java running on Mac OS X.

00:42:28.540 --> 00:42:31.390
So if you're doing Java development,
we really see that Mac OS X,

00:42:31.460 --> 00:42:34.250
because of its UNIX affinity
and its great support for Java,

00:42:34.330 --> 00:42:36.650
is really the best place to be
running Java on the desktop.

00:42:39.960 --> 00:42:43.650
Last but not least, on top of all this,
we have this idea of Aqua.

00:42:43.730 --> 00:42:46.540
Of course, the Aqua user interface
that you've seen many times.

00:42:46.590 --> 00:42:49.090
A few comments about
Aqua from a UNIX perspective.

00:42:49.190 --> 00:42:53.350
Aqua, in some sense,
is sort of a state of mind.

00:42:53.450 --> 00:42:56.570
It's not just a single
technology or a single idea.

00:42:56.820 --> 00:42:58.500
It covers a wide range
of different layers.

00:42:58.500 --> 00:43:01.540
In UNIX, you'd have a toolkit,
you'd have a window manager,

00:43:01.600 --> 00:43:04.710
you'd have themes, you may have several
desktop applications.

00:43:04.850 --> 00:43:06.140
We consider all of that Aqua.

00:43:06.160 --> 00:43:10.020
It's sort of the gestalt
user experience of Mac OS X.

00:43:10.080 --> 00:43:11.270
And there's also a philosophy about it.

00:43:11.410 --> 00:43:15.550
One of the big things about Mac OS X is
we really insist that all normal usage

00:43:15.550 --> 00:43:17.500
should be accessible via the GUI.

00:43:17.520 --> 00:43:21.680
Everything we consider a feature that
we want a customer to be able to do-- is

00:43:21.780 --> 00:43:23.140
Jordan running because I'm saying that?

00:43:23.230 --> 00:43:24.390
No.

00:43:24.600 --> 00:43:26.700
Some of the engineers coming
from a UNIX background are scared

00:43:26.700 --> 00:43:29.190
at the idea of having to create
a GUI for all their services.

00:43:29.240 --> 00:43:32.080
I'm sure that's not
why Jordan is leaving.

00:43:32.260 --> 00:43:33.560
Coffee.

00:43:33.560 --> 00:43:34.860
But one of the things that
we really try and discipline

00:43:34.860 --> 00:43:38.900
ourselves at Apple is to say,
"It's not a feature until it has a GUI."

00:43:39.060 --> 00:43:41.520
One of the problems when you're running
on a typical UNIX environment is you say,

00:43:41.520 --> 00:43:43.780
"Well, I can do the same thing
on the command line.

00:43:43.780 --> 00:43:44.920
It's too much effort.

00:43:44.920 --> 00:43:48.140
I'm not going to bother to do that last
little bit and make it fully accessible."

00:43:48.340 --> 00:43:51.450
Because we are a company where we pay
our engineers and we have standards,

00:43:51.540 --> 00:43:54.380
we're able to enforce that,
which guarantees that the full

00:43:54.380 --> 00:43:58.110
experience and use of the system
can be accessible from the GUI.

00:43:58.210 --> 00:44:00.670
And we think that gives us a much
more complete and comprehensive

00:44:00.670 --> 00:44:04.780
system that you're likely to see
out of non-commercial efforts.

00:44:04.840 --> 00:44:06.080
There's some services
that we're working on.

00:44:06.080 --> 00:44:07.620
There's some services that
are provided as part of Aqua,

00:44:07.620 --> 00:44:11.880
things like the Finder, the Desktop,
the Dock, the top-level Menu Bar.

00:44:11.880 --> 00:44:17.530
There's also widgets, the idea of Sheets,
the Taskbar that you see on a

00:44:17.530 --> 00:44:21.040
lot of applications like Mail,
Drawers, a lot of these things are things

00:44:21.040 --> 00:44:24.400
that you may not be familiar with
coming from a UNIX background.

00:44:24.460 --> 00:44:25.940
We encourage you to
play with these things.

00:44:25.940 --> 00:44:28.850
Interface Builder, particularly Cocoa,
make it very easy to add

00:44:28.910 --> 00:44:30.280
these to your application.

00:44:30.280 --> 00:44:33.470
Start thinking creatively about
ways to design your application.

00:44:33.480 --> 00:44:37.050
We'll be having the
Open Source Design Awards tomorrow night,

00:44:37.050 --> 00:44:38.700
and we have a category
just for Open Source Ports.

00:44:38.820 --> 00:44:41.880
People who've taken existing
software and made it look and feel

00:44:41.880 --> 00:44:44.670
like a native Mac OS X application,
trying to recognize the work

00:44:44.670 --> 00:44:47.510
they're doing to try and go
beyond what's traditionally

00:44:47.510 --> 00:44:49.000
been possible in that community.

00:44:49.120 --> 00:44:51.800
There is a philosophical issue
that's probably worth mentioning that

00:44:51.800 --> 00:44:55.200
sometimes strikes people a little
ajar when they deal with Mac OS X.

00:44:55.310 --> 00:44:57.360
Mac OS X,
we try to think about things being

00:44:57.360 --> 00:45:00.480
customizable for the user environment,
but not replaceable.

00:45:00.570 --> 00:45:03.340
In the UNIX world, everything is usually
expected to be replaceable.

00:45:03.510 --> 00:45:06.000
You can replace the Windows system,
the Window Manager theme,

00:45:06.000 --> 00:45:09.350
all sorts of different things,
and drop and plug in and often write

00:45:09.350 --> 00:45:12.060
your own versions of different things.

00:45:12.170 --> 00:45:14.060
While that's really a lot
of fun for developers,

00:45:14.060 --> 00:45:17.780
it tends to be a nightmare for end
users who don't know what system

00:45:17.780 --> 00:45:19.660
the thing was developed to run in.

00:45:19.750 --> 00:45:21.980
It's often quite a challenge
for system administrators,

00:45:22.130 --> 00:45:24.690
documentation writers,
and things like that.

00:45:24.790 --> 00:45:28.040
So because of the Macintosh philosophy,
we try to have at least one clear,

00:45:28.040 --> 00:45:31.000
coherent way with some
variations around it,

00:45:31.040 --> 00:45:34.000
but still a very well-defined,
consistent user experience.

00:45:34.080 --> 00:45:35.960
So I would encourage you,
if you're trying to create

00:45:35.960 --> 00:45:37.960
a Mac OS X application,
to create a mass-market

00:45:37.960 --> 00:45:39.390
Mac OS X application that you
really sort of buy into that

00:45:39.470 --> 00:45:43.390
mindset and try to make things as
consistent and coherent as possible.

00:45:43.500 --> 00:45:45.900
There is certainly room
for experimentation.

00:45:45.930 --> 00:45:48.220
You can actually, because it is all based
on UNIX technology,

00:45:48.220 --> 00:45:51.320
plug in and replace various pieces
of it and write your own finder.

00:45:51.520 --> 00:45:53.520
And that's really great
for a research project,

00:45:53.580 --> 00:45:56.460
but we don't think that's going
to be a normal customer scenario.

00:45:56.530 --> 00:45:59.120
So when you create applications,
try to leverage the higher-level

00:45:59.240 --> 00:46:03.290
toolkits and conform to the
standards as best as you can.

00:46:04.600 --> 00:46:06.650
In order to help you do that,
we provide a rich suite

00:46:06.710 --> 00:46:09.010
of developer tools,
which themselves are great examples

00:46:09.140 --> 00:46:12.600
of powerful software built on
top of open source technology.

00:46:12.600 --> 00:46:15.600
There's all the command line tools
you'd expect from a UNIX environment,

00:46:15.600 --> 00:46:19.600
based on standard technology,
pretty much all available is open source.

00:46:19.730 --> 00:46:23.260
We have a rich suite of visual tools,
really trying to do professional

00:46:23.400 --> 00:46:24.600
quality development.

00:46:24.670 --> 00:46:26.590
We faced a choice when we did Mac OS X.

00:46:26.590 --> 00:46:29.600
All the UNIX developers were
asking for developer tools.

00:46:29.600 --> 00:46:33.420
We could have just given them the command
line open source tools and charged for

00:46:33.560 --> 00:46:35.570
the developer tools at the GUI level.

00:46:35.610 --> 00:46:38.630
We made a conscious decision not to,
because we really want our

00:46:38.630 --> 00:46:41.350
open source developers,
people who are used to using

00:46:41.350 --> 00:46:45.070
GCC and things like that,
to create great, rich, GUI,

00:46:45.070 --> 00:46:47.600
Aqua quality applications.

00:46:47.600 --> 00:46:49.600
We actually believe that they can.

00:46:49.600 --> 00:46:51.590
A lot of people think that UNIX people
can't create good looking applications

00:46:51.670 --> 00:46:52.600
because of what they've seen.

00:46:52.600 --> 00:46:54.580
But I think a lot of it is
that they haven't been given

00:46:54.580 --> 00:46:56.530
the right set of tools,
they haven't been given the right set

00:46:56.530 --> 00:46:57.520
of inspiration to which to work from.

00:46:57.670 --> 00:46:59.590
We really want to see
something like that happen.

00:46:59.600 --> 00:47:02.050
We're going to be doing
some really gorgeous,

00:47:02.180 --> 00:47:05.600
best of breed applications created
using open source GUI technologies,

00:47:05.600 --> 00:47:09.600
open source technologies
using GUIs on Mac OS X.

00:47:09.600 --> 00:47:13.390
There's a whole bunch of these,
there's all sorts of courses on them.

00:47:13.600 --> 00:47:17.260
The real reason for this list is to
show you there's a bunch of different

00:47:17.330 --> 00:47:19.600
apps for all sorts of things.

00:47:19.600 --> 00:47:22.490
Get in there, play around with them,
read the documentation,

00:47:22.490 --> 00:47:25.480
realize that this is really a very
useful way of doing a lot of things.

00:47:25.600 --> 00:47:29.560
Most of them provide support even
for command line applications.

00:47:29.600 --> 00:47:32.530
if you need to do things like that.

00:47:33.950 --> 00:47:37.740
A couple of things that come up in this
space is the object file format issues.

00:47:37.780 --> 00:47:40.640
A lot of people in the open
source UNIX world are used to

00:47:40.640 --> 00:47:42.290
a binary format called ELF.

00:47:42.370 --> 00:47:45.730
We from Mac OS X use a
functionality called Maco.

00:47:45.890 --> 00:47:49.940
They were developed at roughly the same
time in slightly parallel locations.

00:47:50.020 --> 00:47:51.330
They're more or less
functionally equivalent.

00:47:51.380 --> 00:47:54.360
There's not anything that I'm aware
of that you really can't do in

00:47:54.370 --> 00:47:55.960
one that you can do in the other.

00:47:56.120 --> 00:47:59.010
But Mac OS X is really tuned
for development of Maco.

00:47:59.140 --> 00:48:01.540
The Maco file format is what
we use for all of our tools,

00:48:01.610 --> 00:48:04.300
all of our performance work,
all of our optimization work.

00:48:04.390 --> 00:48:08.140
We encourage you to use Maco
and get used to it in Mac OS X.

00:48:08.530 --> 00:48:11.020
The names of some tools are
slightly different than their

00:48:11.020 --> 00:48:13.310
analogues in the ELF world,
but it's usually not too hard

00:48:13.310 --> 00:48:14.460
to figure out what those are.

00:48:14.550 --> 00:48:17.150
You'll often hear people talk
about something called CFM.

00:48:17.260 --> 00:48:23.900
CFM or PEF was the way that dynamic
libraries and loadable modules and binary

00:48:23.900 --> 00:48:26.420
files were handled in the Mac OS X world.

00:48:26.500 --> 00:48:28.900
It is supported on Mac OS X as
a legacy technology.

00:48:28.990 --> 00:48:31.730
But some of you may have
heard that that's not really

00:48:31.730 --> 00:48:33.260
our goal moving forward.

00:48:33.260 --> 00:48:36.620
We want people to be delivering all
their applications Mac OS X native,

00:48:36.710 --> 00:48:37.760
which means Maco.

00:48:37.760 --> 00:48:40.920
Occasionally people will ask, you know,
is a Carbon application native or is it

00:48:40.940 --> 00:48:42.760
only Cocoa applications that are native?

00:48:42.760 --> 00:48:47.530
And the real answer is anything
that is Maco is native on Mac OS X.

00:48:47.560 --> 00:48:49.360
And Cocoa is always Maco.

00:48:49.360 --> 00:48:52.860
Carbon may be Maco or may be
CFM based on how it was built.

00:48:52.860 --> 00:48:55.230
And so there's different issues
that people have to worry

00:48:55.330 --> 00:48:56.750
about when they deal with that.

00:48:56.760 --> 00:48:58.860
But hopefully you're coming
from more or less a clean slate.

00:48:58.860 --> 00:49:01.690
And a Unix background will be
writing directly to Maco and

00:49:01.690 --> 00:49:05.540
able to take advantage of the
Cocoa libraries for your GUI.

00:49:07.830 --> 00:49:12.470
As part of that is our dynamic library
support based on a technology called

00:49:12.580 --> 00:49:16.960
DYLD versus the more traditional
DLOpen you find on most UNIX systems.

00:49:17.060 --> 00:49:19.220
They're sort of similar, but not quite.

00:49:19.350 --> 00:49:21.440
In many cases you'll have
to either create a wrapper,

00:49:21.440 --> 00:49:24.590
there is a DL-compat library
that's available as open source,

00:49:24.640 --> 00:49:27.290
the open office people use it,
which gives you more or less

00:49:27.440 --> 00:49:29.890
equivalent functionality,
or you can just use an ifdef,

00:49:30.000 --> 00:49:31.910
it's usually not a big deal.

00:49:32.040 --> 00:49:36.320
But in particular I think the one
specific area where there's a semantic

00:49:36.320 --> 00:49:39.330
mismatch is in the next symbol field.

00:49:39.480 --> 00:49:43.920
So if you have a DL dynamic load
library which expects to iterate

00:49:43.920 --> 00:49:47.710
through symbols in a linear fashion,
that may cause some challenges

00:49:47.710 --> 00:49:51.330
and some other issues that you
face when going to Mac OS X.

00:49:51.430 --> 00:49:53.600
So there's a few things to be
wary of when you go to Mac OS X.

00:49:53.600 --> 00:49:56.870
If you use some exotic thread
signaling issues or you do a

00:49:56.870 --> 00:49:59.200
lot of dynamic library stuff,
you may not have a

00:49:59.200 --> 00:50:00.360
perfectly trivial port.

00:50:00.410 --> 00:50:01.960
On the other hand,
it is still a straightforward library.

00:50:02.020 --> 00:50:05.320
forward port and it's something that
we definitely encourage you to do.

00:50:08.440 --> 00:50:09.940
Of course,
you've probably seen by now all

00:50:09.940 --> 00:50:12.550
the different developer tools,
Project Builder,

00:50:12.580 --> 00:50:16.470
which can be used as a great
front end on top of GDB and GCC,

00:50:16.470 --> 00:50:20.240
as well as Java and other languages.

00:50:20.330 --> 00:50:23.990
The big thing about
Project Builder that's important,

00:50:24.070 --> 00:50:24.570
a couple of things.

00:50:24.650 --> 00:50:27.100
One is it abstracts you away
from having to worry about where

00:50:27.100 --> 00:50:30.060
things are on the command line and
which libraries to link against.

00:50:30.190 --> 00:50:32.130
But the real important
thing is that it creates the

00:50:32.220 --> 00:50:33.610
packaging format for Mac OS X.

00:50:33.720 --> 00:50:35.990
Mac OS X creates all
these application bundles,

00:50:36.130 --> 00:50:39.100
which are a very well-defined
way of laying out resources and

00:50:39.100 --> 00:50:40.880
images and things like that.

00:50:40.910 --> 00:50:42.450
So if you want to create
a Mac OS X application,

00:50:42.590 --> 00:50:43.700
you want to use Project Builder.

00:50:43.700 --> 00:50:46.010
You can still use it from the
command line when you want

00:50:46.010 --> 00:50:48.320
to actually do your builds,
which can be very useful

00:50:48.320 --> 00:50:49.530
for a number of scenarios.

00:50:49.620 --> 00:50:52.150
But the GUI makes it a lot
easier to create a fully

00:50:52.170 --> 00:50:54.200
Mac OS X compliant application.

00:50:54.300 --> 00:50:56.600
Interface Builder,
learn to love Interface Builder.

00:50:56.840 --> 00:51:00.440
It's a fantastic way to create
great Aqua-compliant interfaces.

00:51:00.520 --> 00:51:02.690
If you're using Cocoa,
you can do a lot of the hard work

00:51:02.770 --> 00:51:03.600
of your application structure.

00:51:03.600 --> 00:51:08.360
by wiring up objects
inside Interface Builder.

00:51:09.630 --> 00:51:11.440
And of course,
the more recent addition to the

00:51:11.450 --> 00:51:14.360
family is AppleScript Studio,
which from my perspective

00:51:14.360 --> 00:51:17.050
is a way of combining Cocoa,
Interface Builder,

00:51:17.110 --> 00:51:21.330
and Project Builder with
the AppleScript language.

00:51:23.280 --> 00:51:26.030
The AppleScript language was
developed out of HyperScript and

00:51:26.030 --> 00:51:30.200
HyperTalk and HyperCard and all
that family of developments for

00:51:30.200 --> 00:51:32.450
rapid development and prototyping.

00:51:32.610 --> 00:51:36.160
It's a very different philosophical
beast than a UNIX scripting language.

00:51:36.200 --> 00:51:39.380
A UNIX scripting language is usually
coming out of a programming mentality,

00:51:39.450 --> 00:51:42.240
trying to find an easier,
faster way to do programming-type

00:51:42.240 --> 00:51:44.970
tasks in rapid iteration.

00:51:45.270 --> 00:51:49.800
The AppleScript language was designed
explicitly for end users to try

00:51:49.800 --> 00:51:54.270
to find a natural English language
way to accomplish certain tasks.

00:51:54.630 --> 00:51:57.960
And you can tell this by sort of the
average word length of a UNIX command

00:51:57.970 --> 00:51:59.800
versus an AppleScript command.

00:51:59.850 --> 00:52:04.820
Something that'll be about 25 words for
an AppleScript thing will be about 25

00:52:04.850 --> 00:52:07.560
characters in a UNIX scripting language.

00:52:07.630 --> 00:52:09.770
The other way I think about the
difference between the two is

00:52:09.770 --> 00:52:12.240
that AppleScript is designed
for working with applications.

00:52:12.280 --> 00:52:14.940
It's firmware and large data objects.

00:52:15.110 --> 00:52:16.920
It's not just about images
and things like that.

00:52:16.980 --> 00:52:20.460
Whereas the UNIX command line is
really optimized for dealing with text.

00:52:20.510 --> 00:52:22.490
And because of that,
they have different semantic

00:52:22.490 --> 00:52:26.520
constructs and also different
applicable usage scenarios.

00:52:26.830 --> 00:52:29.140
One of the more interesting things,
I went to the web services

00:52:29.140 --> 00:52:31.500
framework session before lunch.

00:52:31.570 --> 00:52:34.270
And the person wrote a nice
AppleScript application and he

00:52:34.370 --> 00:52:37.520
called down to a UNIX command
line to format the date for him.

00:52:37.580 --> 00:52:40.370
Because the UNIX has all these really
rich formatting and text handling

00:52:40.430 --> 00:52:42.350
capabilities built into the command line.

00:52:42.400 --> 00:52:44.920
And so he just calls down to that,
gets a string, and then passes it off.

00:52:44.920 --> 00:52:46.640
And then he calls it off
to do more sophisticated

00:52:46.640 --> 00:52:47.860
AppleScript kinds of things.

00:52:47.990 --> 00:52:49.440
AppleScript is really great.

00:52:49.660 --> 00:52:52.870
One, it allows you to tap into the
Aqua widgets and the Cocoa frameworks

00:52:53.350 --> 00:52:55.470
as well as calling down to UNIX scripts.

00:52:55.700 --> 00:52:58.020
And more importantly,
it has a very powerful remote

00:52:58.040 --> 00:52:59.760
technology called Apple Events.

00:52:59.830 --> 00:53:02.200
It allows you to send messages
to other applications.

00:53:02.340 --> 00:53:05.160
Most Mac OS X applications,
certainly all the good ones,

00:53:05.320 --> 00:53:07.710
have a dictionary which allows
them to be AppleScriptable.

00:53:07.900 --> 00:53:12.130
This creates a language that
you can execute commands against

00:53:12.460 --> 00:53:14.770
that are understood by all the
different Mac OS X applications.

00:53:14.780 --> 00:53:17.940
It's really great for application
control and network workflows.

00:53:17.940 --> 00:53:22.080
Chances are the newspaper you purchased,
if you bought a newspaper

00:53:22.080 --> 00:53:24.750
in the last week,
had some portion of it that was

00:53:24.750 --> 00:53:27.910
automated by AppleScript running
on the production side.

00:53:27.920 --> 00:53:30.630
Whether it's laying out
TV guides or formatting weather

00:53:30.700 --> 00:53:31.940
maps or things like that.

00:53:32.260 --> 00:53:34.920
Because it's very great for
automating repetitive tasks

00:53:35.120 --> 00:53:36.780
involving GUI applications.

00:53:36.780 --> 00:53:39.440
One of the exciting things
about Apple Events is it

00:53:39.480 --> 00:53:41.040
all supports web services.

00:53:41.040 --> 00:53:43.340
And as you've been hearing a lot,
there's a lot of rich

00:53:43.340 --> 00:53:44.640
technologies in Mac OS X.

00:53:44.640 --> 00:53:49.600
And they're particularly easy to do
at a high level from AppleScript.

00:53:49.680 --> 00:53:52.190
Because it's built around this
whole idea of doing high level

00:53:52.190 --> 00:53:53.830
messaging between applications.

00:53:53.840 --> 00:53:56.570
It is even possible to call
AppleScript from the command line.

00:53:56.650 --> 00:54:01.700
There's a command called osascript which
can evoke any OpenScript architecture,

00:54:01.700 --> 00:54:05.960
OSA compliant scripting language,
in this case AppleScript.

00:54:06.000 --> 00:54:11.870
It is possible to create OSA versions
of Perl and other languages.

00:54:11.900 --> 00:54:14.500
If you're interested in
working on an OSA plugin,

00:54:14.670 --> 00:54:16.460
for other languages, please talk to me.

00:54:16.460 --> 00:54:20.470
We'd love to get you hooked up with
the engineering teams and enable other

00:54:20.470 --> 00:54:22.640
languages to tap into the functionality.

00:54:22.640 --> 00:54:25.030
We're not bigots in the
scripting language space.

00:54:25.070 --> 00:54:27.700
We like having lots of scripting
languages on the platform.

00:54:27.770 --> 00:54:28.800
AppleScript is our language.

00:54:28.860 --> 00:54:30.080
We put the most resources on it.

00:54:30.300 --> 00:54:31.940
We'd love to help you take
your favorite languages,

00:54:31.940 --> 00:54:35.830
whatever they are,
and plug into the power of Mac OS X.

00:54:40.070 --> 00:54:42.230
We also support a wide
range of third-party tools,

00:54:42.240 --> 00:54:45.420
whether you're doing Java programming
or BASIC or C++ programming.

00:54:45.420 --> 00:54:48.830
There's often a tool available for a
third party which is more suited to

00:54:48.840 --> 00:54:50.440
your particular application space.

00:54:50.440 --> 00:54:53.220
We try to have as many tools
as we can running in Mac OS X.

00:54:53.220 --> 00:54:54.880
This is JBuilder from Borland.

00:54:54.900 --> 00:54:57.690
A lot of people feel that it
looks much better than JBuilder

00:54:57.690 --> 00:55:01.310
ever did on any other platform,
but it's still the same pure Java binary,

00:55:01.340 --> 00:55:05.440
tools like Real Basic,
MetroWorks Code Warrior,

00:55:05.440 --> 00:55:10.080
and all sorts of great open-source tools
appearing all the time on Mac OS X.

00:55:10.080 --> 00:55:12.580
So we really want to make sure
that you can have the best

00:55:12.580 --> 00:55:15.410
environment possible with whatever
tools you're comfortable with.

00:55:15.500 --> 00:55:19.080
One of the tools that I personally
think is one of the best things

00:55:19.080 --> 00:55:22.710
available on Mac OS X is WebObjects 5.1,
which is a very powerful

00:55:22.710 --> 00:55:26.120
development environment as well as
deployment environment for creating

00:55:26.230 --> 00:55:28.680
three-tier web applications,
whether they're talking to

00:55:28.850 --> 00:55:30.170
HTML or Java interfaces.

00:55:30.200 --> 00:55:32.660
It does a lot of the hard
work of database mapping,

00:55:32.660 --> 00:55:36.500
page layout, and lets you have a nice,
rich experience for

00:55:36.500 --> 00:55:37.910
designing user interfaces.

00:55:38.000 --> 00:55:41.280
It can work with either
standard Java runtimes or on

00:55:41.280 --> 00:55:43.770
top of other J2E app servers.

00:55:43.800 --> 00:55:47.100
If you're doing Java development,
if you're doing web-based development,

00:55:47.100 --> 00:55:49.360
we really encourage you
to check out WebObjects.

00:55:49.360 --> 00:55:51.450
We support the traditional
open-source stuff,

00:55:51.620 --> 00:55:54.380
Tomcat and PHP and stuff like that,
which is often great

00:55:54.450 --> 00:55:55.320
for certain projects.

00:55:55.380 --> 00:55:59.400
But if you're creating very complex,
scalable three-tier web solutions,

00:55:59.400 --> 00:56:02.000
we really encourage you to
check out WebObjects as well,

00:56:02.000 --> 00:56:04.700
which is also a cross-platform
Java application.

00:56:07.060 --> 00:56:10.740
Documentation has been a hot issue
for a lot of people for a lot of time.

00:56:10.740 --> 00:56:14.390
We've been making a major
push on Darwin documentation.

00:56:14.530 --> 00:56:16.380
There's a number of different
kinds of documentation available.

00:56:16.500 --> 00:56:18.980
We have all these demand pages,
which are viewable from

00:56:19.090 --> 00:56:20.900
Project Builder or from the shell.

00:56:21.110 --> 00:56:24.380
There's a lot of parts of inside
Mac OS X kernel programming which will

00:56:24.380 --> 00:56:26.490
be of interest to Darwin developers.

00:56:26.710 --> 00:56:28.760
There's the new
Bringing UNIX Applications

00:56:28.760 --> 00:56:30.840
to Mac OS X Guide,
a preliminary draft of

00:56:30.840 --> 00:56:32.310
which was posted this week.

00:56:32.310 --> 00:56:34.900
We encourage you to look at
it and send your feedback.

00:56:34.990 --> 00:56:38.590
The URL will be on the URL Farm.

00:56:38.590 --> 00:56:42.900
It's fairly easy to find from
the Mac OS X documentation page

00:56:42.900 --> 00:56:44.720
or from the Darwin page itself.

00:56:44.900 --> 00:56:47.920
There's some specific tools
documentation that UNIX developers

00:56:47.920 --> 00:56:49.900
might find particularly interesting.

00:56:49.900 --> 00:56:52.790
Particularly all the
stuff about our compiler,

00:56:52.790 --> 00:56:55.900
our assembler, the preprocessor,
which is different than the traditional

00:56:55.900 --> 00:56:57.900
preprocessing in many UNIX systems.

00:56:57.930 --> 00:57:01.460
And also some of the quirks
and intricacies of the

00:57:01.550 --> 00:57:03.980
Mac OS X runtime architecture.

00:57:05.490 --> 00:57:09.160
So in summary,
I really want to hopefully give you

00:57:09.160 --> 00:57:13.010
a feel for what we're doing with
Mac OS X from a UNIX perspective.

00:57:13.240 --> 00:57:15.570
We really think this is the dream
machine that everyone who's been

00:57:15.580 --> 00:57:18.040
running UNIX will want to have.

00:57:18.090 --> 00:57:21.880
Something that looks like a PowerBook G4
that can run mainstream UNIX,

00:57:21.880 --> 00:57:27.560
has a Mac interface, Microsoft Office,
standard Java 2, free tools to go.

00:57:27.580 --> 00:57:28.720
And we really hope
that you'll go with it.

00:57:28.910 --> 00:57:30.800
Thank you very much.

00:57:38.200 --> 00:59:36.000
[Transcript missing]

00:59:36.800 --> 00:59:46.000
[Transcript missing]

00:59:46.660 --> 00:59:51.780
Jason from Developer Relations will
be coordinating that for us.

00:59:53.010 --> 00:59:55.960
Last thing I forgot,
there is one more slide about more

00:59:55.960 --> 00:59:58.120
information from the developer page.

00:59:58.220 --> 01:00:00.050
Also,
the Mac OS X downloads page has a great

01:00:00.050 --> 01:00:04.000
source of open source applications
like X11 and hopefully soon OpenOffice.

01:00:04.000 --> 01:00:06.000
And some great mailing lists.

01:00:06.000 --> 01:00:07.660
There's a UNIX porting
mailing list we've set up for

01:00:07.770 --> 01:00:11.130
discussions of issues you face,
either bringing stuff over to the

01:00:11.130 --> 01:00:15.000
Darwin layer or adding GUI stuff
on top of UNIX applications.

01:00:15.140 --> 01:00:17.510
Stepwise has a great
source of information,

01:00:17.580 --> 01:00:19.920
a lot of downloads and other techniques.

01:00:19.920 --> 01:00:23.710
And then the Slashdot site has
a new Apple section in the last

01:00:23.710 --> 01:00:25.830
month which has some great news.