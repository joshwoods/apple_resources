WEBVTT

00:00:01.100 --> 00:00:05.340
Ladies and gentlemen, please welcome user
experience evangelist,

00:00:05.720 --> 00:00:08.390
John Galenzi.

00:00:11.370 --> 00:00:11.940
Well, good afternoon.

00:00:11.940 --> 00:00:15.300
Welcome to the session about
using Interface Builder.

00:00:15.300 --> 00:00:19.150
And Interface Builder is Apple's
interface design tool of choice.

00:00:19.200 --> 00:00:21.480
If you're creating any
UI in your application,

00:00:21.480 --> 00:00:25.660
it should be in this tool that you
prototype it and then you begin to sort

00:00:25.660 --> 00:00:27.960
of lay it out and figure out what it's
going to look like and how it's going

00:00:27.960 --> 00:00:31.220
to work and then use the results of that
to integrate it within your product,

00:00:31.310 --> 00:00:32.740
whether it's Cocoa or Carbon.

00:00:32.740 --> 00:00:36.620
And we'll talk a little bit about
how to use the product in general,

00:00:36.620 --> 00:00:41.450
but then go into specifics about new
features and how to integrate the product

00:00:41.580 --> 00:00:43.660
with what you're doing in more detail.

00:00:43.660 --> 00:00:47.950
So to do that, I'd like to introduce
Monsieur Henri Lamiraux.

00:00:52.900 --> 00:00:59.160
Good afternoon.

00:00:59.160 --> 00:01:02.690
So we're going to talk about
Interface Builder during this session.

00:01:08.030 --> 00:01:09.650
This is our agenda.

00:01:09.750 --> 00:01:13.620
I want first to introduce
Interface Builder,

00:01:13.740 --> 00:01:17.160
give you a brief description of
what Interface Builder is about.

00:01:17.180 --> 00:01:22.210
I will use the word IB very often
because this is what we use for short.

00:01:22.280 --> 00:01:26.960
And then I will go into details of
how to create your user interface.

00:01:27.230 --> 00:01:30.120
Basically the three steps it
takes to use Interface Builder

00:01:30.120 --> 00:01:31.870
to develop your application.

00:01:32.140 --> 00:01:35.390
How to create your user interface,
how to connect your user

00:01:35.390 --> 00:01:39.560
interface to your code,
and then how to load your user

00:01:39.560 --> 00:01:43.170
interface inside your application
to display your user interface.

00:01:43.240 --> 00:01:48.160
I will give you also some tips and tricks
and we will show a demo of the CodeWire

00:01:48.160 --> 00:01:50.980
integration with Interface Builder.

00:01:53.840 --> 00:01:56.600
So let's start with what
is Interface Builder.

00:01:56.690 --> 00:01:59.020
So as John was saying,
Interface Builder is

00:01:59.080 --> 00:02:03.310
Apple's tool to create,
to prototype your user interface

00:02:03.470 --> 00:02:06.070
for both Cocoa and Carbon.

00:02:06.160 --> 00:02:09.140
It's Aqua compliant,
so you're sure that if

00:02:09.200 --> 00:02:13.080
you use Interface Builder,
your application will be Aqua compliant.

00:02:13.160 --> 00:02:15.060
As I say, it's for both Cocoa and Carbon.

00:02:15.400 --> 00:02:17.400
And recently, we've added Apple Script.

00:02:17.510 --> 00:02:22.620
So you can now develop an application
using Apple Script as your language.

00:02:23.530 --> 00:02:25.260
So here we have Interface Builder.

00:02:25.260 --> 00:02:27.920
It's an application.

00:02:27.920 --> 00:02:32.220
And Interface Builder creates
what we call a Nib file.

00:02:32.220 --> 00:02:33.500
And we have two types of Nib files.

00:02:33.500 --> 00:02:36.120
We have a Cocoa Nib file
and a Carbon Nib file.

00:02:36.120 --> 00:02:39.720
They are the same,
but they are different.

00:02:39.820 --> 00:02:42.540
So you cannot use a Carbon Nib file
inside a Cocoa application

00:02:42.640 --> 00:02:45.350
or use a Cocoa Nib file
inside a Carbon application.

00:02:45.680 --> 00:02:47.400
They are different beasts.

00:02:47.540 --> 00:02:49.320
But they are basically
the same structure,

00:02:49.320 --> 00:02:52.170
and Interface Builder
can load both of them.

00:02:52.580 --> 00:02:55.500
So from a Cocoa Nib file,
what can you do?

00:02:55.500 --> 00:02:57.330
You can create a Cocoa application.

00:02:57.490 --> 00:03:01.120
You can also create a
Java client for WebObject.

00:03:01.160 --> 00:03:03.740
And as I said,
we've added recently Apple Scripts.

00:03:03.740 --> 00:03:06.440
We can develop an
Apple Script application,

00:03:06.460 --> 00:03:09.770
which basically use Cocoa underneath.

00:03:11.040 --> 00:03:15.110
And from a Carbon lib, you can create a
Carbon application for Mac OS X,

00:03:15.230 --> 00:03:19.440
and you can create a Carbon application
for Mac OS 9 using Carbon lib.

00:03:19.570 --> 00:03:22.930
We've been part of Carbon Lib since 1.1.

00:03:23.150 --> 00:03:26.950
So those Cocoa Nib files are
basically a repository of objects.

00:03:27.360 --> 00:03:29.080
They are archived objects.

00:03:29.150 --> 00:03:31.530
It's especially true for Cocoa Nib.

00:03:31.860 --> 00:03:34.500
They are really Cocoa objects
inside this Nib file.

00:03:34.500 --> 00:03:38.180
For Carbon Nib, with the new HI object,
we're going to go more and

00:03:38.180 --> 00:03:42.290
more in this direction,
having real objects within the Nib file.

00:03:44.110 --> 00:03:47.030
So let's talk about how can
you create your user interface

00:03:47.150 --> 00:03:49.310
using Interface Builder.

00:03:49.720 --> 00:03:53.280
So we have several tools to do that.

00:03:53.280 --> 00:03:56.440
And I'm going to go
through several of them.

00:03:56.440 --> 00:04:00.040
Some of them are more recent,
some of them are older tools,

00:04:00.040 --> 00:04:04.700
but all very useful to be able to
create very quickly a user interface.

00:04:05.010 --> 00:04:07.140
So let's talk first about the guides.

00:04:07.210 --> 00:04:09.900
This is something we've added a year ago,
I think.

00:04:09.910 --> 00:04:13.420
They provide a way to be
sure that your user interface

00:04:13.420 --> 00:04:15.900
conforms to the Aqua guidelines.

00:04:15.900 --> 00:04:21.900
It's a much intuitive way to
lay out your user interface.

00:04:21.920 --> 00:04:22.430
It's very, very easy.

00:04:22.430 --> 00:04:23.900
I will show you a demonstration after.

00:04:23.900 --> 00:04:28.720
Very, very easy to lay out your user
interface using the guides.

00:04:28.960 --> 00:04:30.900
And you have two types of guides.

00:04:30.900 --> 00:04:36.190
We have what we call the Aqua guides
and what we call the user guides.

00:04:36.890 --> 00:04:38.580
So the Aqua guides are very easy.

00:04:38.810 --> 00:04:42.140
You drag a button inside the window
and automatically we show you what

00:04:42.140 --> 00:04:44.350
is the best location for this button.

00:04:44.480 --> 00:04:47.400
What is the best distance
to the edge of the window,

00:04:47.450 --> 00:04:50.980
like in picture one,
or the best distance between two buttons

00:04:51.070 --> 00:04:54.840
according to the Aqua guidelines,
like in image number two.

00:04:55.340 --> 00:04:57.580
I will show you that after.

00:04:57.610 --> 00:05:01.480
The user guide is something I'm
sure you've used in any layout

00:05:01.620 --> 00:05:03.340
program like PageMaker or whatever.

00:05:03.430 --> 00:05:07.740
It's basically lines you can put on
top of your window and you can easily

00:05:07.740 --> 00:05:10.740
align objects onto those guides.

00:05:10.790 --> 00:05:14.320
Those guides are saved with a
Nib file so next time you reopen

00:05:14.320 --> 00:05:16.730
the Nib file those guides are there.

00:05:19.020 --> 00:05:21.780
The layout track is something
a little bit different.

00:05:22.020 --> 00:05:25.420
With Aqua, you have shadows.

00:05:25.830 --> 00:05:29.230
So sometimes it's hard to see where our
control stops because of the shadow.

00:05:29.330 --> 00:05:30.690
So we've added those layout tracks.

00:05:30.870 --> 00:05:34.050
It's a very easy way to show
you where is the bounding box

00:05:34.480 --> 00:05:36.800
of a control without a shadow.

00:05:37.020 --> 00:05:40.380
And the size of those boxes is the
size that's in the Aqua guidelines.

00:05:40.460 --> 00:05:42.070
Like a button is 20 pixels high.

00:05:42.320 --> 00:05:45.300
If you look at the button with a shadow,
it's much bigger than 20 pixels.

00:05:45.380 --> 00:05:51.660
But the layout tracks show you exactly
what is the real size of the control.

00:05:51.800 --> 00:05:56.690
And you can easily toggle them
between hiding them and showing them.

00:05:58.410 --> 00:06:01.000
The next one is distance measurement.

00:06:01.140 --> 00:06:05.060
That's a way to show you the
distance between two objects.

00:06:05.110 --> 00:06:08.310
We have an inspector in Interface
Builder that gives you the

00:06:08.310 --> 00:06:12.290
location of a control in a window,
but it gives you the

00:06:12.290 --> 00:06:14.810
location to the parent,
not a location between

00:06:15.080 --> 00:06:16.540
the control next to it.

00:06:16.640 --> 00:06:20.230
So with the distance measurement,
you can measure distances

00:06:20.230 --> 00:06:21.900
between two objects.

00:06:21.980 --> 00:06:24.410
And it's triggered with the Option key.

00:06:25.340 --> 00:06:30.310
So let me show you those
three tools before continuing.

00:06:34.540 --> 00:06:36.060
So this is Interface Builder.

00:06:36.070 --> 00:06:39.930
So I'm going to create a Cocoa Nib file.

00:06:41.140 --> 00:06:42.940
So for people who have never
seen Interface Builder,

00:06:42.940 --> 00:06:45.700
let me just go quickly
through the different parts.

00:06:45.760 --> 00:06:47.840
This is the menu editor.

00:06:48.140 --> 00:06:52.240
If I close it,
this is... It edits the main menu,

00:06:52.240 --> 00:06:52.990
the menu bar.

00:06:53.060 --> 00:06:54.540
This is the menu editor.

00:06:54.600 --> 00:06:56.600
Here I have a window.

00:06:56.710 --> 00:06:57.580
I close it.

00:06:57.680 --> 00:06:59.600
This is this object inside.

00:06:59.640 --> 00:07:03.370
My GIMP file has two objects,
a menu and a window.

00:07:03.900 --> 00:07:09.100
I have here the palette
with different objects,

00:07:09.170 --> 00:07:11.700
so I can choose different controls.

00:07:11.730 --> 00:07:14.580
And if I bring the inspector,

00:07:15.160 --> 00:07:19.420
I can inspect an object,
so this is a title, normal thing.

00:07:19.590 --> 00:07:24.540
So let me put some objects inside the
window to show you first the Aqua guides.

00:07:24.660 --> 00:07:26.680
So I take a button.

00:07:27.570 --> 00:07:30.060
And as I bring it to
the edge of the window,

00:07:30.060 --> 00:07:34.380
it automatically shows you what is
the right position for this button.

00:07:34.420 --> 00:07:37.540
I can bring a second one.

00:07:38.280 --> 00:07:41.870
and he shows you also the right distance.

00:07:41.970 --> 00:07:45.680
Let me bring a table view, for example.

00:07:48.080 --> 00:07:49.760
TabView, sorry.

00:07:49.800 --> 00:07:54.200
And same thing,
I can build my user interface.

00:07:54.700 --> 00:07:55.860
We can do something interesting.

00:07:55.860 --> 00:07:58.170
For example, if you have a text field,

00:08:00.370 --> 00:08:03.300
and I want to align a label correctly.

00:08:03.300 --> 00:08:06.140
You can see here that I show
you the baseline for the text so

00:08:06.140 --> 00:08:11.340
I can easily align the text with
the baseline of this text field.

00:08:11.400 --> 00:08:12.740
We do also something very nifty.

00:08:12.740 --> 00:08:15.230
For example,
if you bring your radio button,

00:08:15.230 --> 00:08:18.090
the guidelines say that
there is a distance,

00:08:18.090 --> 00:08:19.900
there is an indent from a text.

00:08:19.980 --> 00:08:23.970
So we show you exactly the right
position according to the guidelines.

00:08:25.130 --> 00:08:28.390
So let's say now that
I have a piece of text here,

00:08:28.390 --> 00:08:32.340
and I want to be able to have a piece
of text in the same-- on the tab--

00:08:32.380 --> 00:08:34.410
the other tab at the same location.

00:08:34.540 --> 00:08:38.630
For that, I can use the guides.

00:08:40.800 --> 00:08:48.920
I can, for example, add a vertical guide,
move it in position.

00:08:50.100 --> 00:08:53.100
I had an horizontal guide.

00:08:53.100 --> 00:08:54.540
Move it in position.

00:08:54.540 --> 00:08:58.510
And now I can go to my other
tab and easily move the

00:08:58.880 --> 00:09:01.740
text at the right position.

00:09:02.520 --> 00:09:04.670
So this is a very useful
usage of the guides.

00:09:04.740 --> 00:09:07.730
If I want to get rid of them,
you just drag them out of the screen,

00:09:07.740 --> 00:09:08.890
of the window, and they're gone.

00:09:11.050 --> 00:09:14.180
The layout text, as I said,
you can show the layout

00:09:14.180 --> 00:09:16.940
text by just asking,
show me,

00:09:17.230 --> 00:09:18.460
hide and show the layout rectangle.

00:09:18.460 --> 00:09:21.680
So you can see here, for example,
you can see the baseline and you

00:09:21.680 --> 00:09:25.560
can see very now easily where
is the bounds of this control.

00:09:25.560 --> 00:09:29.030
Without the layout rectangle,
it would be hard to see that the

00:09:29.060 --> 00:09:31.010
text is much longer than it is.

00:09:31.060 --> 00:09:36.620
So you can see exactly
where things begin and end.

00:09:38.380 --> 00:09:40.940
And finally, the distance measurement.

00:09:40.940 --> 00:09:45.360
So I can select an object by pressing
the Option key and moving my mouse on

00:09:45.360 --> 00:09:47.740
top of other objects or the container.

00:09:47.840 --> 00:09:58.700
It can show me the
distance between objects.

00:09:58.830 --> 00:10:01.010
So let's go back to the slides.

00:10:15.940 --> 00:10:21.040
The next feature we have to facilitate
your creating your user interface

00:10:21.110 --> 00:10:22.600
is what we call logical grouping.

00:10:22.600 --> 00:10:26.680
In previous release of Interface Builder,
if you wanted to keep objects together,

00:10:27.090 --> 00:10:29.860
you had to create a container,
put those objects inside this container,

00:10:29.860 --> 00:10:33.100
which means at runtime you had an
extra view that was not very useful.

00:10:33.100 --> 00:10:36.300
It was just there at design
time to keep objects together.

00:10:36.300 --> 00:10:38.820
So we've added logical grouping,
which allows you to

00:10:38.820 --> 00:10:41.220
group objects together,
but they are just grouped

00:10:41.220 --> 00:10:42.630
together at design time.

00:10:42.640 --> 00:10:44.240
They are not grouped at runtime.

00:10:45.110 --> 00:10:47.390
So I will show you that also later on.

00:10:47.420 --> 00:10:49.540
Once you group objects,
you can see this little dotted

00:10:49.630 --> 00:10:52.220
line that shows you that the
objects are grouped together.

00:10:52.220 --> 00:10:55.340
Very useful for text in a text
field or something like that.

00:10:55.440 --> 00:10:57.470
By the way,
everything I'm talking about here

00:10:57.470 --> 00:10:59.070
works both for Carbon and Cocoa.

00:10:59.080 --> 00:11:01.920
When there is something that
will work on only one of the two,

00:11:02.040 --> 00:11:02.990
I will tell you.

00:11:03.000 --> 00:11:06.300
But everything I'm saying here
works for both Cocoa and Carbon.

00:11:08.550 --> 00:11:09.660
Locking.

00:11:09.720 --> 00:11:12.260
Also,
sometimes you put objects on a window

00:11:12.620 --> 00:11:13.660
and you don't want to move them.

00:11:13.660 --> 00:11:14.770
They are fine where they are.

00:11:14.770 --> 00:11:16.840
You don't want, by accident,
to move them.

00:11:16.840 --> 00:11:18.350
So now you can lock objects.

00:11:18.480 --> 00:11:19.940
You can lock their
position and their size.

00:11:19.940 --> 00:11:23.250
It works for both controlled
views and windows.

00:11:23.250 --> 00:11:25.100
And I show you for windows.

00:11:25.100 --> 00:11:28.460
It's a very,
very useful feature for windows.

00:11:31.320 --> 00:11:33.590
We have something we call Pop and Drag.

00:11:33.690 --> 00:11:36.640
You can find another name,
it's kind of a nice name.

00:11:36.770 --> 00:11:39.640
It's an easy way to move
objects between containers.

00:11:39.680 --> 00:11:43.160
It was very hard in previous release
of Interface Builder to move objects

00:11:43.570 --> 00:11:48.190
out of a container and move it into
another container after the fact.

00:11:48.370 --> 00:11:51.830
So we fixed that by having this new,
it's more of a gesture,

00:11:51.860 --> 00:11:56.200
to pop objects out of a container
and drag them into another container.

00:11:56.370 --> 00:11:59.430
And for Cocoa developer,
all connections are maintained.

00:11:59.610 --> 00:12:03.960
If you have used IB and you have
a connection and you cut a button,

00:12:04.080 --> 00:12:05.510
the connection will be gone.

00:12:05.700 --> 00:12:08.730
Pop and Drag maintains all the
connections so you can move

00:12:09.280 --> 00:12:10.900
objects between containers.

00:12:10.970 --> 00:12:12.150
You can even move menus.

00:12:12.330 --> 00:12:15.070
So you can take a sub-menu,
move it to another place

00:12:15.070 --> 00:12:18.110
in the menu hierarchy,
all by simply dragging.

00:12:21.190 --> 00:12:24.680
The last thing I want to talk about is
our new support for Spring and Strut.

00:12:24.850 --> 00:12:26.400
This is only for Cocoa.

00:12:26.460 --> 00:12:30.770
In previous years of Interface Builder,
if you resize a window in ID,

00:12:30.800 --> 00:12:31.660
the controls don't move.

00:12:31.660 --> 00:12:34.840
They don't follow the Spring and
Strut you've set for those controls,

00:12:34.990 --> 00:12:39.330
which sometimes is nice because you just
want to have more space in a window.

00:12:39.520 --> 00:12:42.980
But sometimes you want to keep the
layout and just make the window bigger,

00:12:43.060 --> 00:12:44.670
keeping the layout you have.

00:12:44.830 --> 00:12:47.730
So by pressing the control
key and resizing your window,

00:12:47.810 --> 00:12:49.660
now we apply the Spring and Strut.

00:12:49.660 --> 00:12:53.350
So all your settings are maintained
and the window resized exactly

00:12:53.350 --> 00:12:55.130
like it will resize at runtime.

00:12:55.260 --> 00:13:00.200
So let me show you that.

00:13:07.710 --> 00:13:09.840
So, logical grouping.

00:13:09.850 --> 00:13:14.380
Let me turn off the OutHack.

00:13:14.860 --> 00:13:20.420
So here I have a text
field and a text field too.

00:13:20.550 --> 00:13:24.420
I want to be able to move them together,
so I have to remember to select

00:13:24.470 --> 00:13:26.240
them together and move them.

00:13:26.270 --> 00:13:29.510
What I can do now is
just simply say "group".

00:13:29.680 --> 00:13:31.940
and now I can move them together.

00:13:31.980 --> 00:13:34.910
They still resize independently.

00:13:36.290 --> 00:13:38.650
But you can move them together
and they will stay together.

00:13:38.660 --> 00:13:39.890
Very useful.

00:13:41.800 --> 00:13:43.990
We are also looking.

00:13:44.070 --> 00:13:46.920
So here I'm very happy with my design.

00:13:46.920 --> 00:13:48.990
I don't want to move.

00:13:49.100 --> 00:14:02.600
[Transcript missing]

00:14:03.680 --> 00:14:06.190
So they are locked.

00:14:06.190 --> 00:14:08.600
And you can easily,
you can go to the size

00:14:08.600 --> 00:14:10.600
inspector if you want.

00:14:10.910 --> 00:14:13.600
This is very slow.

00:14:13.600 --> 00:14:19.080
And you can lock and
unlock one specific object.

00:14:20.960 --> 00:14:25.540
Something interesting here also is that,
I don't know if you noticed,

00:14:25.900 --> 00:14:27.600
when you place a window
in Interface Builder,

00:14:27.600 --> 00:14:32.560
for example, I move my window here,
at runtime, this window will open

00:14:32.560 --> 00:14:34.100
at this exact position.

00:14:34.100 --> 00:14:36.730
So the position you have in
Interface Builder is the position

00:14:36.730 --> 00:14:38.260
you're going to get at runtime.

00:14:38.260 --> 00:14:42.120
So if you put your window here and
someone else comes and moves the

00:14:42.120 --> 00:14:45.260
window here and saves the Nib file,
the next time the Nib is

00:14:45.260 --> 00:14:47.390
going to be loaded,
the window is going to be there.

00:14:47.420 --> 00:14:48.690
And you don't want that.

00:14:48.940 --> 00:14:51.260
So that is also looking on Windows.

00:14:51.260 --> 00:14:53.340
So I'm happy with this position here.

00:14:53.340 --> 00:14:55.420
I can go to the...

00:14:57.900 --> 00:15:18.900
[Transcript missing]

00:15:20.150 --> 00:15:23.000
The final thing is Spring and Struts.

00:15:23.110 --> 00:15:27.300
So let me set up my
Spring and Struts for this.

00:15:27.340 --> 00:15:31.940
So I want this one to resize
vertically or horizontally.

00:15:31.970 --> 00:15:34.490
I want this one to keep it here.

00:15:35.610 --> 00:15:39.940
So I set up my layout,
but now I'm resizing Interface Builder.

00:15:39.970 --> 00:15:42.150
Oops, I forgot to.

00:15:48.660 --> 00:15:50.960
I resize the window, but nothing moves.

00:15:50.960 --> 00:15:52.630
Because Interface
Builder thinks here that,

00:15:52.720 --> 00:15:55.050
oh, you just want to make the window
bigger because you want more room.

00:15:55.060 --> 00:15:56.530
But if I want to...

00:15:58.620 --> 00:16:02.920
If I really want to resize
it and maintain the layout,

00:16:02.970 --> 00:16:05.400
I can press Control and
resize the window.

00:16:05.400 --> 00:16:07.970
And it will respect all
the spring and struts.

00:16:29.390 --> 00:16:32.180
So the next thing,
you've laid out your user interface,

00:16:32.370 --> 00:16:33.380
your API.

00:16:33.480 --> 00:16:36.840
Now you need to be able to connect
this user interface with your code.

00:16:37.100 --> 00:16:39.000
And you want,
when the user clicks on the button,

00:16:39.000 --> 00:16:39.790
something happens.

00:16:40.020 --> 00:16:43.660
You want, when the menu item is selected,
you want something to happen.

00:16:43.790 --> 00:16:46.510
So this is what we're
going to talk about.

00:16:48.320 --> 00:16:52.840
As far as doing layout,
Cocoa and Carbon are very, very similar.

00:16:52.950 --> 00:16:55.020
There is all the features
we have for Cocoa,

00:16:55.020 --> 00:16:57.910
we have them for Carbon, most of them,
if that makes sense.

00:16:58.460 --> 00:17:01.080
As far as connecting
your UI to your code now,

00:17:01.080 --> 00:17:03.100
Cocoa and Carbon are very
different frameworks.

00:17:03.100 --> 00:17:05.300
They have a different API,
they have a different model.

00:17:05.380 --> 00:17:09.090
So the way you use Interface
Builder is very different.

00:17:09.160 --> 00:17:11.910
Carbon has a procedural API C.

00:17:12.010 --> 00:17:16.350
Cocoa is an object-oriented
framework and it has a very

00:17:16.880 --> 00:17:19.100
dynamic language objective C.

00:17:19.100 --> 00:17:22.920
And Interface Builder takes
advantage of this feature.

00:17:23.800 --> 00:17:25.700
So let's start with Carbon.

00:17:25.750 --> 00:17:29.540
If you have a Carbon programmer,
Interface Builder does

00:17:29.540 --> 00:17:30.460
not change your model.

00:17:30.460 --> 00:17:33.440
If you know how to program Carbon,
you know how to use Interface Builder.

00:17:33.460 --> 00:17:37.560
We don't provide a new model,
a new way to do Carbon development.

00:17:37.560 --> 00:17:43.000
We just allow you to lay out your
user interface and that's it.

00:17:43.070 --> 00:17:45.660
We don't give you a new
model to program Carbon.

00:17:45.660 --> 00:17:49.340
It's just a better way to, we think,
to lay out your user interface

00:17:49.340 --> 00:17:52.840
and package your user interface
inside your application.

00:17:53.790 --> 00:17:57.180
And also, it's very much easier using
Interface Builder to take advantage

00:17:57.180 --> 00:17:58.760
of the new Carbon Event model.

00:18:01.990 --> 00:18:04.110
So if you're a Carbon developer,
you want to do two things.

00:18:04.360 --> 00:18:07.540
You want to be able to get
a reference to a UI element.

00:18:07.590 --> 00:18:10.280
I want to get a pointer to this button.

00:18:10.340 --> 00:18:12.970
And also, you want to be able to
react to a user action.

00:18:13.240 --> 00:18:16.370
The user pulled on a menu,
select a menu item,

00:18:16.420 --> 00:18:17.660
and something must happen.

00:18:17.720 --> 00:18:20.900
This is usually what you want to do.

00:18:22.560 --> 00:18:26.340
So how do you connect your
UI to your code in Carbon?

00:18:26.450 --> 00:18:29.550
To be able to get a
reference to a UI element,

00:18:29.550 --> 00:18:32.810
in Interface Builder,
simply assign control ID to controls,

00:18:32.810 --> 00:18:36.960
menu IDs to menus, the same way you would
do with any other tool.

00:18:36.960 --> 00:18:41.680
We allow you to set those control ID,
menu IDs inside Interface Builder.

00:18:41.680 --> 00:18:44.820
In your code,
simply code the correct API to

00:18:44.820 --> 00:18:47.220
get a pointer to this control.

00:18:47.220 --> 00:18:50.380
If you want to get control by ID,
or if you want a new,

00:18:50.450 --> 00:18:54.870
I don't remember the name, HIView,
get control, brand new API, so forth,

00:18:54.870 --> 00:18:55.750
they all work.

00:18:59.430 --> 00:19:03.900
If you want to react to a user action,
in Interface Builder,

00:19:04.040 --> 00:19:05.540
assign a command ID.

00:19:05.540 --> 00:19:09.310
We allow you to do that either
to a menu item or to a control

00:19:09.310 --> 00:19:12.000
and implement the event handler.

00:19:12.000 --> 00:19:14.880
Same way you would do it if you
were using any other tool or

00:19:14.880 --> 00:19:16.470
you would do it by yourself.

00:19:16.540 --> 00:19:20.450
So let me show you that.

00:19:34.140 --> 00:19:36.920
So this time I'm going
to create a Carbon menu,

00:19:36.930 --> 00:19:39.280
a Carbon Neb.

00:19:40.760 --> 00:19:42.940
So as you can see,
basically the same thing.

00:19:42.980 --> 00:19:44.440
The palettes have changed.

00:19:44.510 --> 00:19:50.100
Carbon has different UI,
so we have different palettes.

00:19:50.160 --> 00:19:54.900
But you can recognize all
the control for Carbon.

00:19:56.610 --> 00:20:02.850
So let's say I have a text field
and in my code I want to be able to

00:20:03.470 --> 00:20:05.360
get the content of this text field.

00:20:05.480 --> 00:20:08.500
What you do in Interface Builder,
you bring the

00:20:08.870 --> 00:20:15.640
Infopanel, go to Control and simply
assign a signature and an ID.

00:20:15.640 --> 00:20:20.120
Save your nib and in your code,
do a Get Control by ID and you're

00:20:20.120 --> 00:20:22.280
going to get a pointer to this control.

00:20:23.760 --> 00:20:26.520
Now I want to be able to
react to some user action,

00:20:26.520 --> 00:20:29.200
so let's put three buttons in there.

00:20:34.700 --> 00:20:42.000
[Transcript missing]

00:20:45.760 --> 00:20:48.040
So what I can do here
is assign command ID.

00:20:48.040 --> 00:20:49.680
And because I don't want
to write any code on stage,

00:20:49.680 --> 00:20:53.480
I'm just going to use standard command
ID that already exists in the system.

00:20:53.480 --> 00:20:58.800
So for minimize,
I'm going to use the minimize window.

00:20:58.800 --> 00:21:03.060
For zoom, I'm going to assign zoom.

00:21:03.060 --> 00:21:05.810
And for quit, I'm going to assign quit.

00:21:07.660 --> 00:21:10.700
You can also, if you want,
type your own command if you

00:21:10.700 --> 00:21:13.010
have your own command to assign.

00:21:13.190 --> 00:21:15.300
And now what I can do is
I can go to test mode.

00:21:15.420 --> 00:21:19.160
So Interface Builder has a test mode
where you can test your user interface.

00:21:19.340 --> 00:21:22.100
So I go to test interface.

00:21:22.190 --> 00:21:24.960
And what it does is just
instantiate the Nib file like if

00:21:25.050 --> 00:21:27.030
you were in a Carbon application.

00:21:27.130 --> 00:21:33.700
So I have my window
and I can say minimize.

00:21:33.830 --> 00:21:35.460
I can say zoom.

00:21:35.460 --> 00:21:36.570
I can say quit.

00:21:36.670 --> 00:21:37.740
Any quits.

00:21:37.790 --> 00:21:39.030
I didn't write any code.

00:21:39.130 --> 00:21:42.030
Just assign standard command
ID that exists in the toolbox.

00:21:42.160 --> 00:21:50.310
Let's go back to the slide.

00:21:57.720 --> 00:21:58.530
So now Cocoa.

00:21:58.690 --> 00:22:04.700
For Cocoa, also I want to point out
that for Cocoa developer,

00:22:04.700 --> 00:22:06.190
you have to use Interface Builder.

00:22:06.200 --> 00:22:07.700
There is no choices.

00:22:07.700 --> 00:22:10.660
It means Cocoa is completely
part of the development

00:22:10.660 --> 00:22:12.530
process for Cocoa development.

00:22:12.920 --> 00:22:15.170
You have to use Interface Builder.

00:22:17.210 --> 00:22:19.520
So there are four concepts
for Cocoa development that

00:22:19.660 --> 00:22:20.420
you have to understand.

00:22:20.420 --> 00:22:24.970
This is the concept of outlet,
target action, file owner,

00:22:25.090 --> 00:22:25.820
and first responder.

00:22:25.820 --> 00:22:29.810
Outlet, target action are also covered
by the word connections.

00:22:29.810 --> 00:22:34.360
When we talk about connections,
we talk about outlet or target action.

00:22:34.360 --> 00:22:38.380
Those are the four concepts that you have
to understand if you want to really take

00:22:38.380 --> 00:22:40.740
advantage of Cocoa and Interface Builder.

00:22:40.740 --> 00:22:43.800
Sometimes I see people saying, oh,
I don't know what first responders is.

00:22:43.840 --> 00:22:44.620
I just ignore it.

00:22:45.170 --> 00:22:48.170
You won't be able to create a good
Cocoa application if you do that.

00:22:50.430 --> 00:22:51.570
So let's start.

00:22:51.700 --> 00:22:53.120
Outlet.

00:22:53.330 --> 00:22:55.880
Outlet is just a fancy word
for an instance variable.

00:22:55.880 --> 00:22:58.510
It's just an instance
variable inside an object,

00:22:58.570 --> 00:23:01.660
like any other instance variable.

00:23:01.660 --> 00:23:05.330
The difference between an outlet
and any other instance variable

00:23:05.510 --> 00:23:09.670
is that this instance variable is
graphically initialized by making a

00:23:09.740 --> 00:23:12.340
connection inside Interface Builder.

00:23:12.790 --> 00:23:14.620
So you never go and set this variable.

00:23:14.620 --> 00:23:17.580
It's done within Interface
Builder by drawing a line,

00:23:17.580 --> 00:23:22.490
by graphically connecting a source and
a destination inside Interface Builder.

00:23:22.500 --> 00:23:26.350
But it's basically an instance variable,
a pointer to some other object.

00:23:26.440 --> 00:23:30.890
So, for example,
I have an instance of a class foo,

00:23:30.890 --> 00:23:35.120
and it has two outlets,
a window and a button.

00:23:35.120 --> 00:23:39.500
And inside Interface Builder,
I can say this window instance

00:23:39.580 --> 00:23:41.890
variable is this window here.

00:23:42.330 --> 00:23:43.300
That I have on the screen.

00:23:43.590 --> 00:23:46.340
This button is this button
here that I have on the screen.

00:23:46.380 --> 00:23:51.260
So it's just a faster way to
initialize all the instance variables,

00:23:51.260 --> 00:23:54.400
all the pointers you
need in your program.

00:23:57.660 --> 00:23:58.340
Target action.

00:23:58.340 --> 00:24:01.450
So a target is just an object.

00:24:01.540 --> 00:24:03.250
But it's a special object.

00:24:03.390 --> 00:24:07.080
It's an object that will
respond to some user action.

00:24:07.080 --> 00:24:11.760
The user click on the button,
some object will do something.

00:24:11.760 --> 00:24:16.310
The user select a menu item,
the target object will do something.

00:24:16.330 --> 00:24:19.010
And what it's going to do
is what we call the action.

00:24:19.010 --> 00:24:23.060
It's a method on this object that
will be in charge of doing something.

00:24:23.150 --> 00:24:26.240
And it's invoked by the user interaction.

00:24:26.740 --> 00:24:29.360
And like outlet,
you graphically set up your

00:24:29.930 --> 00:24:33.400
target action inside Interface
Builder by drawing lines,

00:24:33.800 --> 00:24:35.500
which we call connections.

00:24:36.900 --> 00:24:41.910
So those are very important concepts
and those are easy to understand.

00:24:42.530 --> 00:24:43.760
So here I have a button.

00:24:43.880 --> 00:24:46.830
A button has a notion of
a target and an action.

00:24:46.940 --> 00:24:48.650
A target is an instance of an object.

00:24:48.860 --> 00:24:50.000
Here, a foo.

00:24:50.130 --> 00:24:54.970
And when the user clicks on the button,
I want the do something method

00:24:54.970 --> 00:24:58.010
to be called on this foo object.

00:25:01.370 --> 00:25:04.320
So the connections,
when you make your connection

00:25:04.420 --> 00:25:06.780
inside Interface Builder,
all those connections

00:25:06.780 --> 00:25:08.000
are saved within the Nib.

00:25:08.070 --> 00:25:10.590
And at runtime when
you load the Nib file,

00:25:10.590 --> 00:25:13.300
all your outlets are going
to be initialized for you,

00:25:13.450 --> 00:25:16.300
all your controls will be ready
to code the right piece of code.

00:25:16.310 --> 00:25:19.110
You don't need to do
anything in your code.

00:25:19.370 --> 00:25:25.100
Everything will be set up for
you when the Nib is loaded.

00:25:26.010 --> 00:25:29.460
Something new we've added in
recent release of Interface Builder

00:25:29.460 --> 00:25:31.220
is what we call typed outlet.

00:25:31.220 --> 00:25:35.420
In previous release of Interface Builder,
all outlets had a type of ID,

00:25:35.420 --> 00:25:36.770
which means whatever you want.

00:25:37.180 --> 00:25:39.740
There was no type checking
as far as outlets.

00:25:39.740 --> 00:25:44.160
We've added a typed outlet recently,
which means that now you cannot

00:25:44.160 --> 00:25:48.400
connect an outlet that requires
an NS menu to an NS window.

00:25:48.400 --> 00:25:51.400
Interface Builder will
not let you do that.

00:25:51.610 --> 00:25:55.720
So we do a type checking to be sure that
the outlets are correctly connected.

00:25:55.900 --> 00:25:58.570
If you don't want this behavior,
for some reason,

00:25:58.670 --> 00:26:02.720
you can always use ID everywhere and
you'll get back the old behavior.

00:26:02.720 --> 00:26:07.860
So let me show you a demo
of outlet and action.

00:26:07.860 --> 00:26:09.090
Here we go.

00:26:18.110 --> 00:26:21.550
So I'm going to create a Cocoa Neb again.

00:26:21.700 --> 00:26:25.020
So let's say that I want to create
an application that displays

00:26:25.660 --> 00:26:28.240
an image inside an image view.

00:26:28.290 --> 00:26:33.560
And I want to be able to open and
close a drawer using a contextual menu.

00:26:33.610 --> 00:26:37.840
I want the user to be able to right
click or control click in the image,

00:26:38.020 --> 00:26:41.330
have a menu show up,
and having an option to

00:26:41.330 --> 00:26:43.400
hide and show a drawer.

00:26:43.820 --> 00:26:45.460
So let's do that.

00:26:45.460 --> 00:26:47.000
I did the wrong one.

00:26:47.070 --> 00:26:48.220
So I'm going to start with an empty nib.

00:26:48.340 --> 00:26:50.200
There is nothing in it.

00:26:50.310 --> 00:26:51.890
So first--

00:26:52.150 --> 00:26:55.850
Let me drag this object here,
which is basically a pre-made object

00:26:55.880 --> 00:27:00.000
that contains a window and a drawer.

00:27:00.060 --> 00:27:03.550
I drag it here,
and what I get here is several objects.

00:27:04.600 --> 00:27:10.320
I get here, this is the content,
what will be the content of the drawer.

00:27:10.420 --> 00:27:12.540
I have my window.

00:27:12.660 --> 00:27:14.800
And I have this object here,
which is the NS drawer,

00:27:14.800 --> 00:27:17.080
which is kind of a controller object.

00:27:17.180 --> 00:27:21.300
It maintains the relation between
the drawer and the window.

00:27:21.740 --> 00:27:25.590
So I get those three objects
when I drag this icon in my nib.

00:27:25.600 --> 00:27:30.550
So let me put an image view.

00:27:39.490 --> 00:27:41.440
So what I want to do is be able to,
as I said,

00:27:41.480 --> 00:27:45.760
I want the user to be able to control
click and get contextual menu.

00:27:45.760 --> 00:27:48.350
So I need a menu.

00:27:48.650 --> 00:27:50.430
So let's get a menu.

00:27:50.590 --> 00:27:53.890
I have an object here
which is a simple menu.

00:27:53.990 --> 00:27:55.490
So I drag my menu.

00:27:55.940 --> 00:27:57.630
It means an instantiate menu.

00:27:57.720 --> 00:27:59.380
And I'm going to rename it.

00:27:59.380 --> 00:28:03.420
I'd info.

00:28:04.810 --> 00:28:06.890
Show info.

00:28:06.890 --> 00:28:16.830
So far I haven't showed you
anything about outlet and action,

00:28:16.830 --> 00:28:21.960
but that's going to start now.

00:28:21.990 --> 00:28:26.230
How can I show a contextual menu?

00:28:26.230 --> 00:28:26.230
I have this image view here,
and if I go to the

00:28:28.900 --> 00:28:33.780
If I go to the NSImageView class,
I notice that there are three outlets.

00:28:33.800 --> 00:28:35.740
There is a formatter,
I don't really care.

00:28:35.750 --> 00:28:38.580
There is a menu, hmm, seems interesting,
and nextKeyView.

00:28:38.580 --> 00:28:42.640
So what happens is that if you set
this menu outlet here with a menu,

00:28:42.640 --> 00:28:46.210
you're going to get a
contextual menu automatically.

00:28:46.280 --> 00:28:47.540
So let's do that.

00:28:47.640 --> 00:28:54.810
Let's control-click here and drag it.

00:28:55.350 --> 00:29:00.720
Like a connection between the image
view and the NS menu I just created.

00:29:00.870 --> 00:29:02.290
And say, menu, connect.

00:29:02.520 --> 00:29:05.850
So here I'm creating a connection.

00:29:05.850 --> 00:29:09.150
The source is the menu outlet
and the destination is this

00:29:09.150 --> 00:29:10.470
NS menu I created here.

00:29:10.980 --> 00:29:13.850
So let's try that first.

00:29:14.720 --> 00:29:19.250
Go to Test Interface, control click,
and I'm on user.

00:29:19.460 --> 00:29:23.140
It doesn't do anything because
it doesn't know what to do.

00:29:23.390 --> 00:29:26.560
We haven't told him what to
do for hide info or show info.

00:29:26.690 --> 00:29:28.610
So let's do that now.

00:29:30.200 --> 00:29:31.110
So that was the outlet.

00:29:31.270 --> 00:29:33.540
By simply connecting the
outlet of this object,

00:29:33.540 --> 00:29:36.600
which is an instance
variable of any NS view,

00:29:36.600 --> 00:29:41.580
in fact, I was able to get a contextual
menu by connecting this outlet.

00:29:43.290 --> 00:29:45.900
But now what I want to do is
I want something to happen when

00:29:45.900 --> 00:29:48.400
I select the hide info or show info.

00:29:48.540 --> 00:29:52.470
So I'm going to make
another type of connection,

00:29:52.500 --> 00:29:55.300
which is a target action connection.

00:29:55.400 --> 00:30:01.940
And what I want to do is connect
the hide info to the NS drawer,

00:30:01.940 --> 00:30:06.900
which is the controller object that
knows how to open and close the drawer.

00:30:07.020 --> 00:30:08.040
So same thing here.

00:30:08.040 --> 00:30:11.100
If I select the drawer and go look.

00:30:11.600 --> 00:30:34.100
[Transcript missing]

00:30:34.890 --> 00:30:39.180
So I control click here and
connect to the NS drawer.

00:30:39.180 --> 00:30:42.220
And I say I want to close.

00:30:47.010 --> 00:30:50.180
And I want to open.

00:30:50.220 --> 00:30:54.290
And now I can run test.

00:30:55.840 --> 00:30:57.680
Show info.

00:30:57.690 --> 00:30:59.080
Add info.

00:30:59.090 --> 00:31:00.500
I didn't write any code.

00:31:00.510 --> 00:31:02.710
I just connected--

00:31:05.600 --> 00:31:10.200
By just connecting an outlet
and two target actions,

00:31:10.200 --> 00:31:13.590
I was able to basically do
a lot without any coding.

00:31:29.600 --> 00:31:43.400
[Transcript missing]

00:31:43.740 --> 00:31:47.800
I talked about Outlet,
instance variables, target action,

00:31:47.860 --> 00:31:51.890
a way to have something happen when the
user clicks on a button or a menu item.

00:31:52.040 --> 00:31:56.780
The next two concepts are the concept
of File Zoner and First Responder.

00:31:57.630 --> 00:32:02.320
When I drag the object
inside the Nib file,

00:32:02.820 --> 00:32:03.600
they are real objects.

00:32:03.730 --> 00:32:07.450
When you see a little icon for a window,
there is a real window

00:32:07.450 --> 00:32:08.490
inside the Nib file.

00:32:08.500 --> 00:32:09.250
It's a real object.

00:32:09.310 --> 00:32:11.990
You can instantiate objects,
you can make connections,

00:32:11.990 --> 00:32:15.740
you can initialize instance variables,
so you're dealing with real objects.

00:32:15.820 --> 00:32:19.500
FileZoner and FirstCastPonder
are not real objects.

00:32:19.750 --> 00:32:21.370
They are proxy objects.

00:32:21.410 --> 00:32:23.650
They represent other objects.

00:32:24.060 --> 00:32:26.320
And those objects are not
defined in a Nib file,

00:32:26.320 --> 00:32:29.960
but they are defined outside in a
Nib file and they are defined at runtime.

00:32:32.990 --> 00:32:35.220
So let's start with the file owner.

00:32:35.270 --> 00:32:36.890
So the file owner is an existing object.

00:32:36.970 --> 00:32:38.310
At runtime,
they're going to be an object,

00:32:38.310 --> 00:32:42.080
an instance of a class that's
going to be the file's owner.

00:32:42.150 --> 00:32:44.720
But it's external to the Nib file.

00:32:44.750 --> 00:32:47.420
This object is specified
when you load the Nib file.

00:32:47.470 --> 00:32:51.730
Usually you use loadNimName owner,
and you pass the owner.

00:32:51.830 --> 00:32:54.220
This is the file's owner.

00:32:54.270 --> 00:32:55.370
And this object is special.

00:32:55.520 --> 00:32:58.940
It owns every object inside the Nib file.

00:32:58.990 --> 00:33:00.980
When you have a view
in your view hierarchy,

00:33:01.250 --> 00:33:04.120
the super view owns the sub view.

00:33:04.190 --> 00:33:06.830
But at the top of the Nib file,
there is nothing above,

00:33:07.120 --> 00:33:08.570
except there is the file's owner.

00:33:08.660 --> 00:33:13.750
So the file's owner owns every object
that you see in a Nib document window.

00:33:14.050 --> 00:33:17.980
All the top level objects are
owned by the file's owner.

00:33:18.050 --> 00:33:21.930
And the file's owner allows
you to make connection with an

00:33:22.470 --> 00:33:24.620
object outside of the Nib file.

00:33:25.050 --> 00:33:28.220
If you could only make
connection within the Nib file,

00:33:28.300 --> 00:33:31.200
it would be like a little bubble,
and you could not get out.

00:33:31.200 --> 00:33:34.160
So the file's owner gives
you a way to reach inside the

00:33:34.160 --> 00:33:35.640
Nib file and make connection.

00:33:35.640 --> 00:33:39.960
And also the file's owner owns all
the objects inside the Nib file.

00:33:42.230 --> 00:33:46.270
The first responder is
also a proxy object,

00:33:46.270 --> 00:33:48.400
but it's not a real object.

00:33:48.480 --> 00:33:53.500
It's more of a status you
confer to an object at runtime.

00:33:53.610 --> 00:33:58.760
It's the first object in a responder
chain to respond to a specific message.

00:33:58.870 --> 00:34:02.280
And depending on the focus,
which text field has a focus,

00:34:02.410 --> 00:34:04.940
and what type of message,
the first responder will change.

00:34:04.960 --> 00:34:07.060
So it's not one specific object.

00:34:07.160 --> 00:34:11.790
It's whatever object at the
time is the first responder.

00:34:13.280 --> 00:34:15.580
So let's take an example
of a responder chain,

00:34:15.630 --> 00:34:18.480
a kind of a simplified
view of a responder chain.

00:34:18.540 --> 00:34:20.160
I have an application.

00:34:20.380 --> 00:34:24.430
The application has one window,
and inside this window

00:34:24.850 --> 00:34:27.150
there is one text field.

00:34:27.920 --> 00:34:32.240
Every object which is a responder in
the app kit in the Cocoa framework

00:34:32.520 --> 00:34:33.900
has a notion of a next responder.

00:34:33.900 --> 00:34:38.970
So the user is happily typing
inside this text field,

00:34:39.220 --> 00:34:44.180
and he goes to the menu and says,
hide window.

00:34:44.180 --> 00:34:47.070
So the hide window message
comes to the text field,

00:34:47.350 --> 00:34:50.220
but he says,
I don't know how to hide the window.

00:34:50.220 --> 00:34:52.810
So the message is passed
to the next responder,

00:34:52.810 --> 00:34:54.100
which is the window.

00:34:54.100 --> 00:34:56.020
And the window says, yeah,
I know how to deal with hide window,

00:34:56.020 --> 00:34:57.160
so it's going to hide the window.

00:34:58.000 --> 00:34:59.410
So--

00:35:00.020 --> 00:35:02.090
The target here is the first responder.

00:35:02.160 --> 00:35:05.010
The action is hide window,
but there is no real object.

00:35:05.020 --> 00:35:11.090
It's whatever object in the responder
chain can respond to hide window.

00:35:13.090 --> 00:35:19.000
If I have a copy message coming now,
the user selects the copy menu item.

00:35:19.000 --> 00:35:26.500
Copy comes to the text field and says,
"Yeah, I can easily handle the copy."

00:35:29.990 --> 00:35:33.110
The first responder is very
useful for connecting action

00:35:33.620 --> 00:35:35.440
to an unspecified object.

00:35:35.440 --> 00:35:38.320
For example, cut, copy, paste.

00:35:38.430 --> 00:35:42.480
If you have ten text
fields inside your window,

00:35:42.480 --> 00:35:45.670
you don't want to make ten
connections to every text field.

00:35:45.790 --> 00:35:50.630
You just want to say, "Do cut, copy,
paste on whichever control has a

00:35:50.640 --> 00:35:55.040
focus right now." It's useful for
hide window and things like that.

00:35:55.120 --> 00:36:02.020
It's also useful for connecting an
object to an object in another Nib file.

00:36:02.060 --> 00:36:04.230
If it happens that this object
is in a responder chain,

00:36:04.230 --> 00:36:08.320
through the first responder you can
make a connection to this other object.

00:36:08.320 --> 00:36:15.320
Let me show you something.

00:36:22.780 --> 00:36:24.590
So I'm going to create
another Cocoa application.

00:36:24.620 --> 00:36:34.600
So if you look at the menu--
let's put a text field.

00:36:35.910 --> 00:36:43.000
Transcripts, Editing, and Post-production

00:36:43.820 --> 00:36:49.200
The connection is to the
first responder copy.

00:36:49.320 --> 00:36:51.100
It means it's a connection.

00:36:51.140 --> 00:36:53.500
I didn't connect it to
this text field here.

00:36:53.500 --> 00:36:55.700
I just want to connect it to
the first responder saying,

00:36:55.700 --> 00:37:02.140
I just want to send a copy to whatever
object will be able to handle the copy.

00:37:02.300 --> 00:37:04.300
Same thing with paste.

00:37:05.100 --> 00:37:07.590
The connection is to the first responder.

00:37:07.590 --> 00:37:11.440
So what I've done here is
I just dragged to text field.

00:37:11.440 --> 00:37:13.480
If I go to test mode,

00:37:14.790 --> 00:37:21.670
I can type, can select, and I can copy.

00:37:22.570 --> 00:37:24.140
and I can paste.

00:37:24.190 --> 00:37:25.880
I didn't do anything.

00:37:25.930 --> 00:37:30.320
Just because by connecting cut, copy,
paste to the first responder,

00:37:30.360 --> 00:37:33.140
everything that's under cut, copy,
paste now if you have the focus,

00:37:33.160 --> 00:37:37.300
if it's the first responder,
will be able to cut, copy, paste.

00:37:37.340 --> 00:37:45.800
If I add a text view and
I go back to test interface,

00:37:45.880 --> 00:37:47.390
same thing.

00:37:49.840 --> 00:37:52.040
Cut.

00:37:52.120 --> 00:37:53.100
Paste.

00:37:53.140 --> 00:37:55.310
So, it just works.

00:37:55.420 --> 00:37:58.960
So this is very useful
for connecting an object,

00:37:59.040 --> 00:38:03.000
connecting something to
an unspecified object.

00:38:03.060 --> 00:38:04.400
Use the first responder.

00:38:04.430 --> 00:38:07.220
Very important concept.

00:38:07.280 --> 00:38:09.190
Go back to the slides.

00:38:13.390 --> 00:38:16.620
So you've created your user interface,
you've connected your user

00:38:16.620 --> 00:38:20.890
interface either in Cocoa or Carbon,
but now you want to be able to load your

00:38:20.890 --> 00:38:24.240
user interface inside your application.

00:38:29.230 --> 00:38:32.840
So here again, there is a difference
between Cocoa and Carbon.

00:38:32.870 --> 00:38:34.620
In Carbon, it's always explicit.

00:38:34.620 --> 00:38:37.190
You always say,
please load this nib file.

00:38:37.190 --> 00:38:39.840
You give the name,
the nib file is loaded.

00:38:39.840 --> 00:38:43.990
For Cocoa, there is one special nib
file we call the main nib,

00:38:44.000 --> 00:38:48.640
and the nib file is going to be loaded,
the first nib file is going to be

00:38:48.640 --> 00:38:51.800
loaded when the application is launched.

00:38:51.800 --> 00:38:54.820
All other nib files need to
be loaded programmatically.

00:38:54.820 --> 00:38:57.970
You need to have some object saying,
load this nib file.

00:39:01.770 --> 00:39:05.690
So in Carbon,
all the API to deal with the

00:39:05.820 --> 00:39:09.680
file are located in one header,
the idcarbonruntime.h.

00:39:09.710 --> 00:39:13.900
There are six functions, very heavy API.

00:39:13.940 --> 00:39:18.460
And it's part of Carbon for--

00:39:19.040 --> 00:39:22.980
Part of Carbon Framework for
Mac OS X and is part of Mac OS 9,

00:39:23.050 --> 00:39:24.560
part of Carbon Lib for Mac OS 9.

00:39:24.560 --> 00:39:28.910
So you can use Lib file also
in your Carbon Lib application.

00:39:32.680 --> 00:39:35.380
So here is a very simple
Carbon application that

00:39:35.380 --> 00:39:37.400
deals with a Nib file.

00:39:37.400 --> 00:39:39.600
First you have to create
what we call a Nib reference.

00:39:39.620 --> 00:39:43.940
You pass the name of the Nib file
and you get back a Nib reference.

00:39:44.000 --> 00:39:49.000
The name of the Nib file is like
main Nib and it needs to be located

00:39:49.000 --> 00:39:52.240
somewhere into your application bundle.

00:39:53.180 --> 00:39:55.730
Then you can extract objects
out of this nib file.

00:39:55.850 --> 00:39:56.620
Objects have a name.

00:39:56.620 --> 00:40:00.560
Under the icon you see the name and menu,
window.

00:40:00.560 --> 00:40:02.400
So you just give the name of the object.

00:40:02.470 --> 00:40:05.120
For example,
here you can say set menu bar from nib,

00:40:05.120 --> 00:40:07.480
giving the nib reference
you've just created,

00:40:07.510 --> 00:40:10.290
passing the name of the object,
and we put up for you the

00:40:10.380 --> 00:40:11.720
menu bar on the screen.

00:40:12.040 --> 00:40:15.400
You can create a window,
pass the nib reference,

00:40:15.850 --> 00:40:20.040
pass the name of the window,
we return you a window reference.

00:40:20.040 --> 00:40:24.260
Once you're done with the nib,
dispose of the nib reference,

00:40:24.450 --> 00:40:28.200
and now you can show the window,
run the application,

00:40:28.200 --> 00:40:31.680
use a normal Carbon API to
deal with your application.

00:40:31.680 --> 00:40:36.030
You get a window ref,
you get everything is

00:40:36.030 --> 00:40:38.820
a normal Carbon object.

00:40:42.840 --> 00:40:45.790
For Cocoa, as I said,
there is a notion of

00:40:45.790 --> 00:40:48.370
this special Nib file,
which is a main Nib file.

00:40:48.380 --> 00:40:53.780
This main Nib file is automatically
loaded when your application is launched.

00:40:53.880 --> 00:40:55.750
You can change the name.

00:40:55.750 --> 00:40:57.890
We call it main,
but it can be any name you want.

00:40:58.090 --> 00:41:01.080
You go to Project Builder,
and you can change the name of the

00:41:01.080 --> 00:41:03.100
main Nib file in Project Builder.

00:41:03.100 --> 00:41:06.750
Usually, this Nib file should at
least contain your menu bar.

00:41:07.060 --> 00:41:11.000
This is the piece of UI you want to
show up on the screen immediately.

00:41:11.780 --> 00:41:13.380
So at least you should have the menu bar.

00:41:13.380 --> 00:41:15.530
You may have other windows in there,
but you should have

00:41:15.530 --> 00:41:16.480
at least the menu bar.

00:41:16.500 --> 00:41:20.120
And the file owner of this
Nib file will be the application.

00:41:20.120 --> 00:41:22.180
I was talking about
the file owner before.

00:41:22.180 --> 00:41:26.100
The application will be the owner of
every object inside this Nib file.

00:41:29.510 --> 00:41:34.280
To load other Nib files,
you have to use NSBundle.

00:41:34.310 --> 00:41:37.780
There is a method on NSBundle,
loadNIP name owner.

00:41:37.820 --> 00:41:41.540
So all other Nib files need to
be loaded when you need them.

00:41:41.560 --> 00:41:45.630
And if you use NSWindowController,
you can use also NSWindowController

00:41:45.760 --> 00:41:46.640
to load your Nib files.

00:41:46.660 --> 00:41:48.760
It's also a nice way to load Nib file.

00:41:48.780 --> 00:41:53.380
And there is a sample in the developer
example Interface Builder that shows

00:41:53.460 --> 00:41:57.810
you how to use NSWindowController
to manipulate multiple windows,

00:41:57.810 --> 00:41:58.900
multiple NIPs.

00:42:00.160 --> 00:42:04.060
So if you look at multiple window,
look at this example.

00:42:04.060 --> 00:42:07.770
It's a very good example to
deal with multiple windows.

00:42:09.610 --> 00:42:14.380
So now I'm going to go through
a bunch of tips and tricks.

00:42:14.400 --> 00:42:18.480
Mainly questions that I've seen over
and over in different mailing lists.

00:42:18.570 --> 00:42:20.920
So I'm going to go
through that right now.

00:42:20.970 --> 00:42:23.960
So first one, break up your nibs.

00:42:24.180 --> 00:42:27.890
I see a lot of nibs that
have like 20 windows,

00:42:27.890 --> 00:42:29.220
a ton of stuff in there.

00:42:29.370 --> 00:42:31.070
This is not the way to deal with nibs.

00:42:31.240 --> 00:42:36.380
Nib file, you should not put your
entire UI inside one nib file.

00:42:36.460 --> 00:42:39.680
And this is, a Carbon developer needs
to be aware of that.

00:42:39.730 --> 00:42:41.980
In Carbon,
traditionally with Resource Manager,

00:42:42.050 --> 00:42:45.010
you are putting all your resources
in one big resource file.

00:42:45.110 --> 00:42:47.200
This is not the way a nib file works.

00:42:47.370 --> 00:42:52.510
You need to break up your
UI among multiple nib files.

00:42:52.780 --> 00:42:55.970
If a nib file is small,
it will load faster.

00:42:55.970 --> 00:42:57.820
And also, it's much easier to reuse.

00:42:57.910 --> 00:43:00.180
If you have this big,
giant nib file and you just

00:43:00.180 --> 00:43:02.580
want to reuse the about box,
you have to go in there,

00:43:02.590 --> 00:43:05.720
rip out the window,
put it into some other nib.

00:43:05.720 --> 00:43:08.720
If you have your nib
file nicely break up,

00:43:08.720 --> 00:43:11.810
you can reuse your nib file much easily.

00:43:13.830 --> 00:43:20.190
So, typical bad nib,
this is not the way to do it.

00:43:21.580 --> 00:43:24.420
What you have to do is break up your nib.

00:43:24.510 --> 00:43:29.380
So here I have an application which
has a main menu and a main window.

00:43:29.380 --> 00:43:32.180
So I want to put that in my main
nib because I want that to be

00:43:32.260 --> 00:43:33.940
up on the screen immediately.

00:43:34.020 --> 00:43:35.530
But then I have an about box.

00:43:35.590 --> 00:43:37.770
The user may never look at the about box.

00:43:37.880 --> 00:43:41.100
So why put it in the main nib
and be loaded immediately?

00:43:41.180 --> 00:43:43.320
I have a connection panel.

00:43:43.320 --> 00:43:44.410
Same thing.

00:43:44.420 --> 00:43:46.220
The user may never use
the connection panel.

00:43:46.220 --> 00:43:47.210
And I have a preference.

00:43:47.330 --> 00:43:48.980
The user may never use the preference.

00:43:49.560 --> 00:43:52.550
So you don't want to load a
UI you're not going to use.

00:43:52.560 --> 00:43:55.560
So you need to break up your nib
in multiple pieces according to

00:43:55.630 --> 00:43:59.870
your application usage and load
those nib files when it's time.

00:43:59.880 --> 00:44:02.760
This is true for both Cocoa and Carbon.

00:44:06.090 --> 00:44:07.010
Top-level objects.

00:44:07.170 --> 00:44:09.210
This is specific to Cocoa.

00:44:09.490 --> 00:44:11.200
I talk about the top-level object.

00:44:11.260 --> 00:44:13.700
That's the object you
instantiate in your Nib.

00:44:13.700 --> 00:44:16.870
When you drag a window inside a Nib,
when you drag a menu

00:44:16.870 --> 00:44:20.550
inside the Nib window,
you basically instantiate an object.

00:44:20.780 --> 00:44:25.240
So it can be a window, a menu bar,
and some other object.

00:44:25.310 --> 00:44:29.800
The file owner and
first responder are not,

00:44:29.800 --> 00:44:29.800
as I said, not real objects.

00:44:33.750 --> 00:44:35.460
You instantiate those objects.

00:44:35.630 --> 00:44:38.680
This means it's like
doing NSWindowAllocInit.

00:44:38.720 --> 00:44:41.830
So somewhere in your code,
if in your code you

00:44:41.830 --> 00:44:45.720
write NSWindowAllocInit,
somewhere in your code you're going

00:44:45.790 --> 00:44:47.360
to have to do NSWindowRelease.

00:44:47.360 --> 00:44:48.570
You're going to have
to release this window.

00:44:48.580 --> 00:44:49.900
Otherwise,
you're going to have a memory leak.

00:44:50.000 --> 00:44:53.710
So the same thing applies for
objects inside a Nib file.

00:44:53.740 --> 00:44:57.050
When they are instantiated,
they have a ref count of one.

00:44:57.060 --> 00:44:59.500
So someone has to release them.

00:44:59.500 --> 00:45:00.790
Otherwise,
every time you load a Nib file,

00:45:00.790 --> 00:45:01.910
you're going to have a memory leak.

00:45:02.300 --> 00:45:03.650
You need to release those objects.

00:45:03.710 --> 00:45:06.500
So that's usually the
task of the files owner,

00:45:06.500 --> 00:45:09.580
because the files owner knows
about those objects and can release

00:45:09.580 --> 00:45:11.400
them when they are not needed.

00:45:11.400 --> 00:45:15.060
The NSWindowController gives
you also a nice way to do that.

00:45:15.150 --> 00:45:18.000
It kind of hides this
problem and does it for you.

00:45:18.040 --> 00:45:21.840
But if you don't use NSWindowController,
you need to release your objects.

00:45:21.900 --> 00:45:25.310
We've added a lot of
top-level objects recently.

00:45:25.390 --> 00:45:28.100
Now you can instantiate a formatter,
a menu.

00:45:28.100 --> 00:45:30.500
So you have to be aware of those.

00:45:32.340 --> 00:45:34.300
So that's the reference counting problem.

00:45:34.330 --> 00:45:36.300
There is one exception to this rule.

00:45:36.300 --> 00:45:40.300
NSWindow has a flag in the inspector.

00:45:40.410 --> 00:45:42.860
There is a flag that says
"Release on close." That means

00:45:42.970 --> 00:45:46.160
that if the window is closed,
the window releases itself.

00:45:46.300 --> 00:45:49.620
So for windows, for NSWindow,
you don't have to worry too

00:45:49.900 --> 00:45:51.300
much about reference counting.

00:45:51.300 --> 00:45:55.300
The window will release itself on
close if you check this attribute.

00:45:55.300 --> 00:45:59.170
If you check it and you release it,
you're going to crash.

00:45:59.300 --> 00:46:01.300
So be careful.

00:46:03.590 --> 00:46:04.510
Standalone views.

00:46:04.510 --> 00:46:10.210
That's something we've
added a year ago or so.

00:46:11.610 --> 00:46:17.680
And this is a very nice way to deal
with a view that don't have a window.

00:46:17.680 --> 00:46:21.100
In the old days,
to be able to create a standalone view,

00:46:21.100 --> 00:46:25.080
you had to, inside Interface Builder,
create a window, and at runtime,

00:46:25.080 --> 00:46:28.540
rip out the content of the
window and get rid of the window.

00:46:28.540 --> 00:46:30.050
You don't have to do that now.

00:46:30.050 --> 00:46:33.600
You can just instantiate a view
without a containing window

00:46:33.600 --> 00:46:35.440
inside Interface Builder.

00:46:35.440 --> 00:46:38.780
For that, just drag a custom view,
and you're going to get

00:46:39.070 --> 00:46:40.660
a view standing alone.

00:46:41.740 --> 00:46:44.850
So you don't need to do this
trick of creating a window,

00:46:44.990 --> 00:46:46.860
taking out the content view, etc.

00:46:47.100 --> 00:46:48.940
It's very useful for the drawer.

00:46:48.940 --> 00:46:52.260
I was showing you before,
the drawer requires a view,

00:46:52.390 --> 00:46:53.840
so you can use that.

00:46:54.040 --> 00:46:57.920
For toolbar custom items,
for tons of stuff, it's very useful to be

00:46:57.920 --> 00:47:01.100
able to instantiate a view
without a containing window.

00:47:01.100 --> 00:47:02.100
Same thing here.

00:47:02.100 --> 00:47:04.100
If you instantiate a view
as a top-level object,

00:47:04.100 --> 00:47:07.730
be careful of the reference counting,
because someone will have

00:47:07.730 --> 00:47:09.260
to release this view.

00:47:11.890 --> 00:47:15.300
Initialization, also for Cocoa.

00:47:15.350 --> 00:47:19.220
I think that's the most popular question.

00:47:19.740 --> 00:47:22.200
To be able to do-- you load a Nib file,
but you want to do something

00:47:22.200 --> 00:47:23.730
when the Nib file is loaded.

00:47:23.880 --> 00:47:27.670
So what you should not do
is try to override init,

00:47:27.820 --> 00:47:29.680
init with frame, init with coder.

00:47:29.740 --> 00:47:33.730
They might be called,
they might not be called.

00:47:33.970 --> 00:47:36.460
Don't try to rely on one
of those init methods.

00:47:36.460 --> 00:47:40.000
The right way to do post-NIB
loading initialization is

00:47:40.090 --> 00:47:41.320
to implement AwakeFromNib.

00:47:41.340 --> 00:47:45.180
AwakeFromNib will be called
on every object in a Nib,

00:47:45.180 --> 00:47:47.860
even the file's owner,
not the first responder

00:47:47.860 --> 00:47:51.360
because it's not a real object,
but the file's owner will be called.

00:47:51.380 --> 00:47:55.380
All objects inside of a Nib file,
if they implement AwakeFromNib,

00:47:55.380 --> 00:47:59.160
this method will be called when
the Nib is finished loading.

00:47:59.520 --> 00:48:02.820
All the connections are set up,
all the target actions are set up,

00:48:02.820 --> 00:48:04.870
all the objects have been instantiated.

00:48:05.060 --> 00:48:08.790
So, do not try to override init,
init with frame, init with code,

00:48:08.790 --> 00:48:09.960
that will not work.

00:48:09.960 --> 00:48:12.740
Implement AwakeFromNib.

00:48:18.480 --> 00:48:19.600
New Nib format.

00:48:19.760 --> 00:48:25.400
So in Jaguar, AppKit has introduced
a new archiving model.

00:48:25.490 --> 00:48:29.340
And Interface Builder used
the Cocoa archiving model,

00:48:29.410 --> 00:48:33.500
and so we take advantage
of this new Nib format.

00:48:33.730 --> 00:48:40.280
It's a very interesting format because
it's a key value type of archiving.

00:48:40.280 --> 00:48:44.160
And it provides forward
and backward compatibility.

00:48:44.160 --> 00:48:47.550
So all Nib files will
work on future release.

00:48:47.580 --> 00:48:50.680
Future Nib files will
work on older release.

00:48:50.680 --> 00:48:53.560
So that's a big,
big advantage which we don't have

00:48:53.620 --> 00:48:55.100
with the current archiving model.

00:48:55.100 --> 00:48:58.460
This is only available on Jaguar
and on future release of Jaguar.

00:48:58.480 --> 00:49:02.390
That will not be available on 10.1.

00:49:03.720 --> 00:49:07.000
So we've added a preference in
Interface Builder that allows you

00:49:07.000 --> 00:49:09.860
to take advantage of this or not,
of this new archiving,

00:49:09.860 --> 00:49:11.180
and we have three settings.

00:49:11.180 --> 00:49:14.920
We have 10.1.x only,
which means that it's

00:49:14.920 --> 00:49:19.040
the old archiving model,
and it will work on every

00:49:19.040 --> 00:49:23.260
version of Mac OS X,
even future version.

00:49:23.260 --> 00:49:26.640
But you cannot take advantage
of new features of Cocoa.

00:49:26.640 --> 00:49:31.200
If Cocoa creates a new widget or
add new properties to an object,

00:49:31.450 --> 00:49:34.190
the old format will not be
able to read and write this

00:49:34.230 --> 00:49:35.920
new property or new object.

00:49:37.290 --> 00:49:43.400
We've added also Jaguar and Letter-Only,
which is the new archiving model, only,

00:49:43.510 --> 00:49:46.380
which means it won't work on 10.1,
but it will work on any

00:49:46.380 --> 00:49:47.720
future release of Mac OS X.

00:49:47.720 --> 00:49:52.050
And we've added a Both,
which gives you the best of both worlds.

00:49:52.060 --> 00:49:56.120
Basically, we save both versions,
both archiving in a nib.

00:49:56.120 --> 00:49:57.690
So you have both versions in a nib file.

00:49:57.720 --> 00:50:01.280
So you need to choose
which one you want to use.

00:50:08.460 --> 00:50:13.710
Carbon, images, that's also a question
that comes up very often.

00:50:14.620 --> 00:50:15.960
For Cocoa, it's much simpler.

00:50:15.960 --> 00:50:18.250
But for Carbon,
people had problems before

00:50:18.640 --> 00:50:20.040
dealing with images.

00:50:20.040 --> 00:50:24.240
In IB, we have a tab that says images,
so you can see your image,

00:50:24.240 --> 00:50:26.980
like your icon, inside Interface Builder.

00:50:26.980 --> 00:50:30.560
The way to do that is that you need to
put your images inside your project.

00:50:30.560 --> 00:50:33.680
They have to be part of your project,
your Project Builder project.

00:50:33.680 --> 00:50:35.950
And they have to have the
same target as your Nib file.

00:50:35.950 --> 00:50:39.580
If you have a target deployment
for your Nib and you have a

00:50:39.670 --> 00:50:44.020
target test for your images,
you won't see your test images

00:50:44.020 --> 00:50:45.470
into your deployment target.

00:50:45.480 --> 00:50:48.240
The images and your Nib have
to be in the same target.

00:50:48.330 --> 00:50:51.520
I think the mistake people make
most often is that the image and

00:50:51.530 --> 00:50:53.480
the Nib are not in the same target.

00:50:53.480 --> 00:50:54.990
They have to be in the same target.

00:50:55.100 --> 00:51:04.120
They also have to be compiled resources
format with a .rsrc prefix ending.

00:51:04.120 --> 00:51:07.580
And we support ICON, ICNS, CICN,
and PICTURE.

00:51:08.700 --> 00:51:12.240
So if you have any of those images
inside the .rsrc file and the

00:51:12.240 --> 00:51:15.410
target and the Nib are the same,
you'll be able to see your images in

00:51:15.410 --> 00:51:20.640
Interface Builder and be able to see drag
them into button and stuff like that.

00:51:23.820 --> 00:51:25.700
The last point is NibTool.

00:51:25.800 --> 00:51:30.460
NibTool is a little command
line tool that works for

00:51:30.460 --> 00:51:34.000
both Cocoa and Carbon nibs.

00:51:34.180 --> 00:51:37.400
There are lots of options for Nib tools,
so I would suggest you

00:51:37.400 --> 00:51:38.890
to look at the main page.

00:51:38.990 --> 00:51:42.300
For Nib tool,
there are really a lot of options.

00:51:42.300 --> 00:51:46.140
It's used by File Merge to
be able to diff Nib files.

00:51:46.200 --> 00:51:52.280
And the main usage we have of Nib tool at
Apple right now is to localize Nib file.

00:51:52.390 --> 00:51:53.760
So let me show you.

00:51:53.820 --> 00:51:58.610
Let's say you have a-- you develop in
English and you want to be able to--

00:51:58.700 --> 00:52:13.600
[Transcript missing]

00:52:13.870 --> 00:52:16.900
So the way to do that is
to take your English nib.

00:52:16.900 --> 00:52:18.300
Don't worry when you develop.

00:52:18.410 --> 00:52:20.200
Don't worry about the other languages.

00:52:20.200 --> 00:52:22.630
Develop in English or any other language.

00:52:22.800 --> 00:52:26.710
And using the nib tool,
you can extract all the

00:52:26.710 --> 00:52:28.800
string from this nib.

00:52:28.820 --> 00:52:32.680
And you can create a text
file with hello equal hello,

00:52:32.800 --> 00:52:35.700
close equal close, open equal open.

00:52:35.800 --> 00:52:39.800
So you have all the strings
inside this nib file.

00:52:39.800 --> 00:52:42.800
Send this text file to a localizer.

00:52:42.800 --> 00:52:45.790
It's going to return French in this case.

00:52:45.800 --> 00:52:50.820
And by reusing the nib tool,
you can use the original English nib

00:52:50.820 --> 00:52:55.760
and the new localized text file
and regenerate a French nib.

00:52:55.800 --> 00:52:57.780
So we do that automatically at Apple.

00:52:57.870 --> 00:53:01.590
We automatically localize all the
system like that by just using the nib

00:53:01.590 --> 00:53:04.800
tool and going through this process.

00:53:04.800 --> 00:53:08.320
It's much easier to
localize your new file.

00:53:08.320 --> 00:53:09.800
It works great.

00:53:13.820 --> 00:53:20.330
So I would like to invite
now Isaac from MetroWorks,

00:53:20.340 --> 00:53:24.700
who's going to show you the new
CodeWire and IB integration.

00:53:24.800 --> 00:53:31.410
Thank you.

00:53:43.000 --> 00:53:51.700
[Transcript missing]

00:53:56.350 --> 00:54:00.980
Okay, well it's clearly evident that
Apple has a great revolutionary

00:54:00.980 --> 00:54:03.700
tool with this Interface Builder.

00:54:03.810 --> 00:54:06.030
And previously our
Code Warrior developers have

00:54:06.030 --> 00:54:09.700
wanted to use the nibs and add them
to their Code Warrior projects,

00:54:09.720 --> 00:54:14.150
but in the past it's been kind of
a pain and really difficult to use.

00:54:14.430 --> 00:54:20.420
So we've worked closely with Apple and
their Interface Builder team and we've

00:54:20.420 --> 00:54:25.950
come up with a solution to integrate
the two tools in the same manner that

00:54:26.070 --> 00:54:29.910
Interface Builder and Project Builder
have worked together before.

00:54:33.140 --> 00:54:36.940
So now with Pro8,
you can add your Nib files to

00:54:36.940 --> 00:54:40.360
the projects in Code Warrior and
you can build your applications

00:54:40.360 --> 00:54:42.180
using Code Warrior.

00:54:43.990 --> 00:54:48.350
With our Objective-C C++ compilers
and the new addition of the long

00:54:48.350 --> 00:54:54.050
file name support in our IDE,
you have the Cocoa framework

00:54:54.050 --> 00:54:56.630
available to you now.

00:54:57.070 --> 00:54:59.770
So whether you're doing
Cocoa applications or

00:54:59.770 --> 00:55:05.280
Carbon Nib-based applications,
you can create these applications

00:55:05.320 --> 00:55:09.280
in your favorite IDE,
whichever one it may be.

00:55:10.030 --> 00:55:16.050
So let me go ahead and do a short demo
for you and show you how to add Nib files

00:55:16.200 --> 00:55:19.700
to your Cocoa and Carbon Nib projects.

00:55:19.760 --> 00:55:23.690
And then I'll turn it back over.

00:55:32.950 --> 00:55:37.520
So I already have a simple
Cocoa application set up.

00:55:37.520 --> 00:55:44.410
And it's kind of similar to the
silly balls from the old days.

00:55:44.410 --> 00:55:44.410
Let's see here.

00:55:46.470 --> 00:55:53.090
So we have a nib file in here and we
already have a circle image in here

00:55:53.200 --> 00:55:57.660
so that will show up in our nib file
when I launch it from Code Warrior.

00:56:00.200 --> 00:56:03.240
So we have this circle image which we
can use throughout our UI and we already

00:56:03.240 --> 00:56:07.450
have a button down here which uses it.

00:56:07.540 --> 00:56:10.910
And let me run it for you real
quick so you can see what it does.

00:56:14.510 --> 00:56:17.600
It just draws a circle in a
random place within this view.

00:56:17.600 --> 00:56:19.200
We can stop it and start it.

00:56:19.290 --> 00:56:24.630
And this is just a button that tells
which image to draw in the view.

00:56:28.970 --> 00:56:36.220
So let me go back to
the source file here.

00:56:36.220 --> 00:56:39.800
And I have a little macro set up.

00:56:40.490 --> 00:56:45.860
And if I switch it over to one, you know,
I have some other code so that I can add

00:56:45.860 --> 00:56:49.800
a few more images and handling and such.

00:56:49.940 --> 00:56:53.900
And from Interface Builder,

00:56:56.200 --> 00:56:59.990
I'll create a couple of new buttons.

00:56:59.990 --> 00:57:05.470
And what I want to do,
let's go ahead and hide

00:57:08.400 --> 00:57:11.040
I have a couple more images
on the disk that I want to add

00:57:11.040 --> 00:57:12.560
to my Code Warrior project.

00:57:12.650 --> 00:57:14.920
So I'll just drag them in.

00:57:18.520 --> 00:57:21.800
and if we go back to the nib file,
we'll see that they've automatically

00:57:21.800 --> 00:57:25.660
been added to our images pane so
that you can use them in the UI.

00:57:25.790 --> 00:57:28.320
So I'll drag the
MetroWorks image over here,

00:57:28.320 --> 00:57:31.060
and then I've got another Motorola logo.

00:57:31.140 --> 00:57:35.010
And let's go ahead and connect
these buttons to the view so

00:57:35.010 --> 00:57:37.310
we can draw different images.

00:57:42.600 --> 00:57:48.070
First of all,
I'll need to come over to my classes

00:57:48.160 --> 00:57:54.370
and re-read the header file since
I've added a couple new outlets.

00:57:57.470 --> 00:58:02.160
Now when I drag this up here,
I have this new set draw MetroWorks,

00:58:02.190 --> 00:58:04.990
which was in the header file.

00:58:05.070 --> 00:58:07.190
And I'll just connect that one.

00:58:07.280 --> 00:58:09.730
And I'll do the same for
the Motorola image and say,

00:58:09.770 --> 00:58:15.200
"Set draw Motorola."
And I'll connect those up.

00:58:15.210 --> 00:58:18.590
Then come back to
Code Warrior and run it.

00:58:20.530 --> 00:58:22.700
And we have the new buttons
that are being used.

00:58:22.810 --> 00:58:25.460
And clicking on them
will change the image.

00:58:25.580 --> 00:58:30.460
And so the new bundling mechanism
that we're using in Code Warrior,

00:58:30.460 --> 00:58:34.300
as soon as you add them to the project,
it will realize where it needs to go

00:58:34.300 --> 00:58:41.130
into the resources folder of your bundle
application along with the nib files.

00:58:46.110 --> 00:58:49.830
The other thing I wanted
to show you is we can,

00:58:49.900 --> 00:58:52.060
you know,
if you want to do a new class from here,

00:58:52.060 --> 00:58:57.130
just create a new subclass.

00:59:04.730 --> 00:59:10.340
And then from Interface Builder,
you can create the new files.

00:59:10.380 --> 00:59:14.550
And it'll bring up a save dialog and
ask you which-- It'll recognize that you

00:59:14.570 --> 00:59:19.860
have a project open in Code Warrior and
ask you where to save these files to.

00:59:20.020 --> 00:59:21.490
So...

00:59:22.670 --> 00:59:27.910
"And we'll just go ahead and add
it to the Cocoa Balls target."

00:59:33.900 --> 00:59:40.430
And if you do create a new nib file,
just make an empty one,

00:59:40.470 --> 00:59:43.300
and as soon as you save it to the disk,

00:59:54.100 --> 00:59:58.300
Interface Builder will recognize
that you have a project open in

00:59:58.300 --> 01:00:03.100
Code Warrior and it'll ask you to
add this file automatically to it.

01:00:03.220 --> 01:00:05.860
So we'll go ahead and add it to there.

01:00:05.880 --> 01:00:08.620
Come back to our project.

01:00:09.130 --> 01:00:11.990
And we'll see that the new
untitled nib that we just made

01:00:12.000 --> 01:00:20.690
was added along with the two files
that Interface Builder created.

01:00:20.720 --> 01:00:28.540
That's what I have for the Cocoa example.

01:00:28.540 --> 01:00:32.580
So let me bring up a Carbon one and we'll

01:00:43.170 --> 01:00:46.500
This one already has the Nib file and,
like Henri said,

01:00:46.500 --> 01:00:49.560
you need a compiled resource file,
which already has a

01:00:49.580 --> 01:00:51.000
couple of images in it.

01:00:51.100 --> 01:00:53.600
But I'll open this up.

01:00:53.730 --> 01:00:58.610
And this is just a simple
example from the developer CD.

01:00:58.740 --> 01:01:01.240
And if we come over here,
we just have a little picture down

01:01:01.240 --> 01:01:03.860
here and a color icon that I've made.

01:01:03.910 --> 01:01:06.570
And so let's go ahead and...

01:01:08.650 --> 01:01:10.850
Duplicate that.

01:01:10.850 --> 01:01:13.290
We can drag our image into there.

01:01:13.330 --> 01:01:17.100
And over here I have just an empty
pic that I've already put in there.

01:01:17.160 --> 01:01:22.150
We can drag that.

01:01:22.210 --> 01:01:24.400
And when you run this,

01:01:29.790 --> 01:01:32.670
Again,
you have your icons that were used.

01:01:32.670 --> 01:01:36.390
And, you know,
creating the new nib file from Interface

01:01:36.390 --> 01:01:43.500
Builder will add the nib to your
Carbon-based application project as well.

01:01:43.640 --> 01:01:53.760
And that's all I have,
and I'll turn it back over to John.

01:01:53.900 --> 01:01:55.390
Thanks a lot.

01:02:02.200 --> 01:02:04.520
Alright, well here's the documentation
slide that you're used to

01:02:04.620 --> 01:02:05.790
at the end of every session.

01:02:06.020 --> 01:02:09.910
This is where you can get more
information about Interface

01:02:09.910 --> 01:02:13.970
Builder and the tutorials
and then the website itself.

01:02:16.300 --> 01:02:19.530
The roadmap for other sessions
related to this or some of the

01:02:19.540 --> 01:02:25.090
topics that were touched in here are
905 for Apple Performance Tools and

01:02:25.090 --> 01:02:26.190
the rest are listed there.

01:02:26.200 --> 01:02:28.670
Cocoa Drawing, etc.

01:02:30.640 --> 01:02:34.670
Most importantly is the feedback
forum for development tools.

01:02:34.750 --> 01:02:37.000
Because Interface Builder falls
into our development tools category,

01:02:37.000 --> 01:02:40.790
we'd love to hear feedback on this and
any of our other development tools.

01:02:42.710 --> 01:02:45.770
Finally, if you have any questions about
something that was talked about

01:02:45.770 --> 01:02:50.690
here or you're looking for additions
to features that you'd like added to

01:02:50.700 --> 01:02:55.020
Interface Builder or additions to the
documentation or to the tutorials or

01:02:55.120 --> 01:02:59.100
anything related to interface design,
this is your contact point at Apple.

01:02:59.100 --> 01:02:59.740
That's me.

01:02:59.740 --> 01:03:01.370
Feel free to send me an email.