WEBVTT

00:00:03.420 --> 00:00:07.640
Welcome back everybody,
and hopefully the rousing music

00:00:07.640 --> 00:00:09.520
got you guys awake and everything.

00:00:09.600 --> 00:00:14.530
Does everybody want like a stretch first,
or are we ready to go here?

00:00:14.880 --> 00:00:20.160
Okay,
it is my pleasure to introduce Karl Hsu.

00:00:25.950 --> 00:00:28.300
Good morning, everybody.

00:00:28.300 --> 00:00:30.630
And I say good morning
because you've just had lunch,

00:00:30.690 --> 00:00:32.830
you're going into a food coma,
and I'm trying to fool you into

00:00:32.940 --> 00:00:35.700
thinking it's Monday morning,
you're ready for the big commute,

00:00:35.700 --> 00:00:37.020
you're ready to go to work.

00:00:37.100 --> 00:00:38.660
Is that having the wrong effect?

00:00:38.750 --> 00:00:39.590
I think so.

00:00:39.750 --> 00:00:43.130
Anyway,
so this is JSP and Servlet integration.

00:00:43.310 --> 00:00:46.200
Actually, it didn't fit on the slide,
but it's JSP and Servlet

00:00:46.200 --> 00:00:47.940
integration with WebObjects.

00:00:48.040 --> 00:00:51.470
And so we assume that you guys
are here with the understanding

00:00:51.540 --> 00:00:53.200
that WebObjects is involved.

00:00:53.200 --> 00:00:56.490
If you think this is just a general
JSP/Servelet overview course,

00:00:56.490 --> 00:00:59.740
you should probably go to a
different session somewhere.

00:00:59.740 --> 00:01:00.590
OK.

00:01:03.510 --> 00:01:05.150
JSPs and Servlets.

00:01:05.250 --> 00:01:06.680
What are we talking about?

00:01:06.740 --> 00:01:12.150
We're talking about the ability to run
a WebObjects application as a Servlet.

00:01:12.290 --> 00:01:15.490
This is different from the J2EE talk,
the EJB stuff that they

00:01:15.540 --> 00:01:18.100
talked about earlier,
where you're talking about

00:01:18.100 --> 00:01:19.670
running EJBs in WebObjects.

00:01:19.780 --> 00:01:23.390
Now we're talking about running
WebObjects in a J2EE server.

00:01:23.390 --> 00:01:25.760
It's sort of a weird relationship.

00:01:25.880 --> 00:01:30.040
We're also talking about the ability to
access WebObjects components and direct

00:01:30.040 --> 00:01:35.880
actions from inside of a JSP page,
sort of a way to generate HTML for you.

00:01:37.820 --> 00:01:40.230
Okay, before we begin,
we'll make these first

00:01:40.250 --> 00:01:42.220
couple assumptions.

00:01:42.340 --> 00:01:44.370
You have to know what a Servlet is.

00:01:44.370 --> 00:01:47.200
You also have to know what a JSP is.

00:01:47.360 --> 00:01:50.620
But in case you don't,
we're going to go over it anyway.

00:01:52.090 --> 00:01:52.530
Let's begin.

00:01:52.720 --> 00:01:54.000
Servlets.

00:01:54.170 --> 00:01:57.790
Servlets are a programmatic
way of generating dynamic HTML.

00:01:57.890 --> 00:02:03.540
You run inside of a Servlet container,
for instance, Tomcat or WebLogic.

00:02:03.640 --> 00:02:06.440
You then write a Servlet subclass.

00:02:06.560 --> 00:02:11.920
You get a request and a response object,
and then you have to do all the work.

00:02:12.310 --> 00:02:14.910
It doesn't do anything
else for you at all.

00:02:18.030 --> 00:02:23.240
We talk about this, and before we go on,
in case you missed the deployment talk,

00:02:23.300 --> 00:02:24.400
we'll show you.

00:02:24.400 --> 00:02:25.140
This is how WebObjects work.

00:02:25.220 --> 00:02:28.490
We have a client, a web server,
and a WebObjects application.

00:02:28.600 --> 00:02:31.920
The client makes a request,
goes to the web server, and this request,

00:02:31.940 --> 00:02:34.570
of course, is usually HTTP.

00:02:34.920 --> 00:02:39.070
The web server passes the request
into the WebObjects adapter,

00:02:39.090 --> 00:02:42.850
basically using an API plug-in,
or sometimes using environment

00:02:42.850 --> 00:02:45.140
variables if it's a CGI process.

00:02:45.260 --> 00:02:47.360
The WebObjects adapter does
a whole bunch of neat stuff,

00:02:47.360 --> 00:02:51.270
some mapping, some load balancing,
writes a checkbook.

00:02:51.410 --> 00:02:55.230
And it passes the information using
HTTP back to the WebObjects application.

00:02:55.350 --> 00:02:57.120
And when the application
is finished processing,

00:02:57.120 --> 00:03:00.710
it'll return the response the same path.

00:03:01.250 --> 00:03:02.670
What's different about a servlet?

00:03:02.700 --> 00:03:04.480
Well,
a servlet works a little bit different.

00:03:04.480 --> 00:03:06.580
Same thing begins.

00:03:06.600 --> 00:03:10.000
The client makes an
HTTP request to the web server.

00:03:10.020 --> 00:03:14.020
The web server has a container adapter,
which is invoked through an API.

00:03:14.020 --> 00:03:17.780
And the container adapter then
somehow invokes the container.

00:03:17.780 --> 00:03:22.260
In a lot of containers,
I'm not certain why,

00:03:22.260 --> 00:03:24.580
this is just some proprietary mechanism.

00:03:24.580 --> 00:03:26.040
It's not necessarily HTTP.

00:03:26.040 --> 00:03:30.700
But then the thing is that you
can have multiple servlets running

00:03:30.700 --> 00:03:32.960
inside of a single servlet container.

00:03:32.960 --> 00:03:37.330
So, in fact, then you have to take that
request and through an

00:03:37.330 --> 00:03:39.090
API invoke the correct servlet.

00:03:39.140 --> 00:03:40.840
That's what I was talking about before.

00:03:44.010 --> 00:03:44.830
On to WebObjects.

00:03:44.890 --> 00:03:47.780
This is the good part.

00:03:47.910 --> 00:03:49.860
This is new in WebObjects 5.1.

00:03:49.860 --> 00:03:52.090
It's something we just added.

00:03:52.220 --> 00:03:54.290
And it allows your
WebObjects application,

00:03:54.390 --> 00:03:57.900
any WebObjects application,
to run as a Servlet inside

00:03:58.030 --> 00:03:59.900
of a Servlet container.

00:03:59.910 --> 00:04:01.750
I'm going to say this a bunch
of times because it's very

00:04:01.820 --> 00:04:02.840
easy to get this confused.

00:04:02.930 --> 00:04:05.360
We are not a Servlet container.

00:04:05.480 --> 00:04:08.200
We run as a Servlet.

00:04:08.800 --> 00:04:11.620
It also lays the foundation
for JSP integration,

00:04:11.620 --> 00:04:13.590
which is the second half of my talk.

00:04:15.510 --> 00:04:16.500
Why?

00:04:16.620 --> 00:04:17.420
You've got to be wondering.

00:04:17.570 --> 00:04:20.990
WebObjects is such a great,
perfect application server.

00:04:21.110 --> 00:04:22.670
Why would you need anything else?

00:04:22.830 --> 00:04:26.000
Why did Apple spend the time to do this?

00:04:26.140 --> 00:04:29.100
And the answer is,
so you don't have to fight.

00:04:29.120 --> 00:04:32.080
We got this, you know,
people come up to us and they say, wow,

00:04:32.080 --> 00:04:34.380
you guys have such a
cool application server.

00:04:34.420 --> 00:04:36.210
You can do all this powerful stuff.

00:04:36.440 --> 00:04:37.660
You know, EOF is great.

00:04:37.660 --> 00:04:39.410
We can do all these template things.

00:04:39.410 --> 00:04:40.580
It's wonderful.

00:04:40.580 --> 00:04:40.580
But, you

00:04:41.860 --> 00:04:45.080
My boss,
or the client that I'm working for,

00:04:45.240 --> 00:04:46.560
came up to me and said, you know what?

00:04:46.650 --> 00:04:48.410
We've standardized on WebLogic.

00:04:48.470 --> 00:04:52.350
We don't care if your application
works and makes money for us.

00:04:52.350 --> 00:04:54.860
We're going to standardize.

00:04:54.860 --> 00:04:59.220
And now you can say to them,
we can all be happy.

00:04:59.380 --> 00:05:01.460
Now I can use WebObjects.

00:05:01.460 --> 00:05:03.190
You know,
in the year that it takes them to

00:05:03.240 --> 00:05:05.910
write their one Servlet application,
you can go in the back end,

00:05:05.910 --> 00:05:07.740
hook up your database,
get everything going,

00:05:07.740 --> 00:05:12.030
deploy web services, direct to web,
whatever, Java client,

00:05:12.090 --> 00:05:14.500
leave them in the dust, and still

00:05:14.850 --> 00:05:17.730
on WebLogic or Tomcat or whatever
they've decided to standardize.

00:05:17.860 --> 00:05:23.180
You can now treat us as the world's
most powerful Servlet library.

00:05:23.180 --> 00:05:27.120
All that work that they
have to do by hand,

00:05:27.120 --> 00:05:27.560
we do for you.

00:05:30.920 --> 00:05:32.900
So you're probably wondering now, well,
that's interesting.

00:05:32.900 --> 00:05:35.060
How did they do that?

00:05:35.150 --> 00:05:37.180
Just in case you can't read the slides.

00:05:37.310 --> 00:05:38.860
How did we do this?

00:05:38.920 --> 00:05:42.840
Servlets are generally deployed in
self-contained little WAR files.

00:05:43.070 --> 00:05:47.080
WAR files are actually JAR files renamed,
just like JAR files are

00:05:47.080 --> 00:05:48.660
actually zip files renamed.

00:05:48.780 --> 00:05:53.290
So, they are, don't ask,
but they use a tar format.

00:05:53.350 --> 00:05:54.540
I don't know why.

00:05:54.540 --> 00:05:57.920
We actually run, as a Servlet,
we're inside of a WAR file.

00:05:58.050 --> 00:06:01.190
We have a Servlet subclass that
we wrote that takes the place

00:06:01.210 --> 00:06:02.880
of the WO default adapter.

00:06:02.950 --> 00:06:06.200
So, normally the request would
come in to the application,

00:06:06.200 --> 00:06:08.250
and we act as sort of a mini web server.

00:06:08.250 --> 00:06:10.800
We handle the request, we pass it on,
blah, blah, blah.

00:06:11.170 --> 00:06:13.940
What we did now is,
instead of that WO default adapter,

00:06:13.940 --> 00:06:14.980
we have a Servlet.

00:06:15.160 --> 00:06:20.250
We take in the Servlet request,
translate it to a WebObjects request,

00:06:20.250 --> 00:06:23.800
let your application handle it,
take the response,

00:06:24.020 --> 00:06:27.910
translate it back to a Servlet response,
and hand it off to the container again.

00:06:27.920 --> 00:06:29.200
down.

00:06:29.470 --> 00:06:33.040
The goal when we did this was to
make it as transparent as possible.

00:06:33.150 --> 00:06:35.530
And we wanted to do this
for two sets of people.

00:06:35.790 --> 00:06:38.120
First set of people is
you as the developer.

00:06:38.420 --> 00:06:41.120
We tried to minimize the amount
of work that you would need to

00:06:41.120 --> 00:06:42.680
do to take advantage of this.

00:06:42.810 --> 00:06:44.950
Ideally,
unless you've done some particular

00:06:44.950 --> 00:06:47.650
things in your application,
you should be able to take any

00:06:47.650 --> 00:06:51.010
regular WebObjects application,
drop in some, you know,

00:06:51.060 --> 00:06:55.080
do a little bit of stuff, and bingo,
you can now deploy in a WebObject,

00:06:55.080 --> 00:06:56.620
in a Servlet container.

00:06:56.970 --> 00:06:59.600
The other group that we tried
to take advantage of was

00:06:59.700 --> 00:07:02.040
the non-WebObjects deployer.

00:07:02.180 --> 00:07:03.890
I mean,
we understand that a lot of you end

00:07:03.890 --> 00:07:07.490
up working on client site or working
in a situation where you don't have

00:07:07.490 --> 00:07:09.220
access to the deployment machine.

00:07:09.340 --> 00:07:11.700
And when they say, well,
how do I deploy this application?

00:07:11.700 --> 00:07:15.560
And then you give them this, you know,
the quite well-written Deploying

00:07:15.560 --> 00:07:18.990
WebObjects Applications book,
they kind of look at it and go,

00:07:18.990 --> 00:07:20.300
I have to do all this?

00:07:20.400 --> 00:07:20.950
Right?

00:07:21.070 --> 00:07:25.520
And they already know how to use WebLogic
or Tomcat or WebSphere or whatever.

00:07:25.660 --> 00:07:29.300
So now you can hopefully just hand them
something that's much simpler to use,

00:07:29.300 --> 00:07:31.630
where they don't have to
learn how the adapters work,

00:07:31.740 --> 00:07:33.980
what do all these settings mean,
how do I use monitor,

00:07:34.140 --> 00:07:37.850
when they already know how a certain
set of deployment tools work.

00:07:39.190 --> 00:07:42.900
One thing to remember is that
we weren't quite able to make

00:07:42.900 --> 00:07:44.680
it completely transparent.

00:07:44.800 --> 00:07:48.930
Because the Servlet adapter has to load
the rest of the WO classes at runtime,

00:07:48.930 --> 00:07:51.910
primarily because of the
NSBundle architecture,

00:07:51.910 --> 00:07:55.760
WebObjects has to be installed
on the application server.

00:07:55.780 --> 00:07:56.770
OK.

00:07:56.870 --> 00:07:59.990
So you still need to have an install,
which is, you know,

00:07:59.990 --> 00:08:01.340
it's a very minimal install.

00:08:01.430 --> 00:08:03.390
On Solaris, for instance,
we now have a Servlet install

00:08:03.520 --> 00:08:05.990
that doesn't install the adapters,
doesn't do anything with

00:08:06.130 --> 00:08:07.460
WoTasty or Java Monitor.

00:08:07.460 --> 00:08:10.110
It just installs the necessary run time.

00:08:10.280 --> 00:08:11.520
And even that may be minimized.

00:08:11.520 --> 00:08:16.210
We'll talk about that in a future
direction later in the talk.

00:08:17.480 --> 00:08:18.110
What can you run?

00:08:18.270 --> 00:08:19.010
Well, I was serious.

00:08:19.080 --> 00:08:21.820
You can run any regular
WebObjects application.

00:08:21.920 --> 00:08:23.540
You can run direct web applications.

00:08:23.650 --> 00:08:25.530
You can run Java client applications.

00:08:25.540 --> 00:08:28.740
You can even run direct-to-Java
client applications.

00:08:28.860 --> 00:08:31.790
For all practical intents and purposes,
it should work fine.

00:08:32.000 --> 00:08:34.160
Later on,
once we have the web services support in,

00:08:34.160 --> 00:08:37.620
that should work perfectly fine as well.

00:08:38.220 --> 00:08:38.940
Where can you run?

00:08:39.120 --> 00:08:44.060
Well, because all Servlet containers
are supposed to behave the same,

00:08:44.060 --> 00:08:46.320
theoretically we could run anywhere,
but there are actually

00:08:46.320 --> 00:08:47.340
a number of differences.

00:08:47.430 --> 00:08:51.190
Some of them are implementation,
some of them are because the Servlet spec

00:08:51.250 --> 00:08:54.340
is unintentionally vague in some areas.

00:08:54.490 --> 00:08:58.280
So the ones we've tested on,
the ones that we've done QA,

00:08:58.280 --> 00:09:01.700
Tomcat 3 and 4 on
Mac OS X and Mac OS X Server,

00:09:01.830 --> 00:09:06.220
WebLogic 6.1 on Win 2000 and Solaris.

00:09:06.340 --> 00:09:08.590
And then we've looked at
a couple of other ones.

00:09:08.610 --> 00:09:11.840
We're working on qualifying
WebSphere in a future release,

00:09:11.840 --> 00:09:13.740
which I'm sure you've
heard many times now.

00:09:13.880 --> 00:09:18.090
Future release, future release,
it will all be fixed in a future release.

00:09:19.730 --> 00:09:21.740
What about deployment?

00:09:21.860 --> 00:09:26.380
Well, it is different from a
typical WebObjects deployment.

00:09:26.840 --> 00:09:31.700
Normally, you use Monitor and Wotasty,
and they control your instances, they,

00:09:31.700 --> 00:09:35.800
you know, the HTTP adapter talks to them,
it's all like this nice

00:09:35.800 --> 00:09:37.640
circular relationship.

00:09:37.750 --> 00:09:39.540
You can't do that in a Servlet,
because we're not an

00:09:39.540 --> 00:09:40.740
independent process anymore.

00:09:40.740 --> 00:09:42.380
Wotasty didn't start it.

00:09:42.470 --> 00:09:44.930
Wotasty doesn't know
what it's doing anymore.

00:09:45.100 --> 00:09:45.200
Right?

00:09:45.200 --> 00:09:48.690
The fact that it stopped doesn't
mean the container is stopped.

00:09:48.690 --> 00:09:50.230
So we don't really have a choice.

00:09:50.360 --> 00:09:52.740
You have to use the
container's management tools.

00:09:52.910 --> 00:09:53.740
Sometimes this is good.

00:09:53.740 --> 00:09:56.900
Tomcat, you know,
mostly is a command line tool.

00:09:56.900 --> 00:09:59.260
There's a little bit of a GUI,
but not much of one.

00:09:59.500 --> 00:10:00.900
And then, you know,
all the way on the other

00:10:00.920 --> 00:10:02.340
end of the spectrum,
you have WebLogic,

00:10:02.340 --> 00:10:06.690
which has an administration tool that
takes a good ten minutes to load.

00:10:07.070 --> 00:10:09.880
So the other caveat,
as you might have guessed from

00:10:10.000 --> 00:10:13.900
looking at my previous diagram,
the WebObjects HTTP adapter

00:10:13.900 --> 00:10:16.000
isn't in the equation anymore.

00:10:16.080 --> 00:10:17.480
We're running in the container.

00:10:17.630 --> 00:10:20.380
We don't know,
we don't care whether you're running

00:10:20.870 --> 00:10:23.930
through a web server or you're
connecting directly to the container,

00:10:24.200 --> 00:10:25.160
which you can still do.

00:10:25.160 --> 00:10:27.070
I mean, it's similar to our
version of Direct Connect.

00:10:27.200 --> 00:10:33.260
Most containers support the ability
to talk directly to the container

00:10:33.260 --> 00:10:33.520
without having a web server in the way.

00:10:36.280 --> 00:10:38.050
How do we convert an existing project?

00:10:38.160 --> 00:10:39.100
It's very complicated.

00:10:39.100 --> 00:10:41.260
You have to follow me
very carefully here.

00:10:41.380 --> 00:10:45.030
Step one, you want to open the project.

00:10:45.700 --> 00:10:48.640
Step two, you want to add the
Java WO/JSP/Servelet framework.

00:10:48.640 --> 00:10:50.640
This could be complicated,
because you can either choose add

00:10:50.640 --> 00:10:52.920
framework or you can drag it in.

00:10:54.230 --> 00:10:56.730
If you're on a project
builder WO project,

00:10:56.820 --> 00:10:59.940
either on Mac OS X or Windows,
you have to add some missing

00:10:59.940 --> 00:11:01.280
makefile preamble variables.

00:11:01.330 --> 00:11:02.960
Don't worry, we'll go over them.

00:11:03.060 --> 00:11:05.760
You're not expected to
just magically know them.

00:11:05.880 --> 00:11:07.600
Oh, and that's it.

00:11:08.160 --> 00:11:12.140
Okay, and you're thinking, wow,
that was complicated.

00:11:12.230 --> 00:11:15.100
How much harder do you think it
would be to make a new project?

00:11:15.100 --> 00:11:18.370
Well,
a new project's even more complicated.

00:11:18.500 --> 00:11:20.280
You create a new project.

00:11:20.360 --> 00:11:22.150
When it pops up the
little wizard and it says,

00:11:22.210 --> 00:11:24.940
do you want to deploy in
a JSP/Servlet container,

00:11:24.940 --> 00:11:26.260
you say yes.

00:11:26.420 --> 00:11:28.640
And I lied, there's no step three.

00:11:30.080 --> 00:11:33.400
Yes, yes, I know,
I cribbed off of the iMac commercial,

00:11:33.400 --> 00:11:34.540
blah, blah.

00:11:34.630 --> 00:11:35.990
But we're easier than the iMac.

00:11:36.230 --> 00:11:36.470
Really!

00:11:37.980 --> 00:11:41.300
Okay, so actually it's a little
bit more complicated.

00:11:41.440 --> 00:11:43.500
Let's talk about some of the details.

00:11:43.660 --> 00:11:47.170
Project Builder is a Mac OS X.

00:11:48.010 --> 00:11:49.740
We add some new files and folders.

00:11:49.860 --> 00:11:52.630
Either when you create a new project
or when you drag in the framework,

00:11:52.630 --> 00:11:54.460
we automatically create them.

00:11:54.530 --> 00:11:56.790
You don't have to go off and do anything.

00:11:56.920 --> 00:12:01.860
Inside of the resources folder,
we create a Servlet resources subfolder.

00:12:01.940 --> 00:12:05.600
We have some predefined directories
that you can drop stuff into.

00:12:05.610 --> 00:12:08.410
We have some,
a template file that you can use to

00:12:08.410 --> 00:12:10.340
customize your Servlet deployment.

00:12:10.450 --> 00:12:12.720
And then you're allowed to
drag anything you want in here.

00:12:12.720 --> 00:12:15.960
Anything you put into this
folder will get copied directly

00:12:15.960 --> 00:12:18.650
into the root of the war file,
which means that you can

00:12:18.830 --> 00:12:21.560
put it in the webinf,
and it'll be only for your

00:12:21.560 --> 00:12:24.160
application to access,
or you can put it at the root

00:12:24.160 --> 00:12:27.830
and it'll be accessible as
if it were on the web server.

00:12:28.550 --> 00:12:34.820
The WebXML template file, which we add,
is used to customize the WebXML.

00:12:34.900 --> 00:12:38.990
The WebXML in Servlet deployments
is used as a deployment descriptor.

00:12:39.000 --> 00:12:42.310
You can use it to pass custom
arguments to your Servlet.

00:12:42.430 --> 00:12:46.460
You can use it to configure your Servlet
from the container's point of view.

00:12:46.460 --> 00:12:49.130
Should I start it lazy the first
time somebody makes a request?

00:12:49.350 --> 00:12:51.520
Should I start it immediately on startup?

00:12:51.580 --> 00:12:55.380
What URLs map to using this Servlet,
blah, blah, you know, that sort of thing.

00:12:55.440 --> 00:12:58.800
Because you can actually have more than
one Servlet inside of a single WAR file.

00:12:58.820 --> 00:13:02.200
So you can map, like, if I use this URL,
invoke this Servlet.

00:13:02.200 --> 00:13:05.360
If I use that URL,
invoke this other Servlet.

00:13:05.590 --> 00:13:09.680
What we do is we have a
template file with placeholders.

00:13:09.780 --> 00:13:12.500
The placeholders are surrounded
by percent characters.

00:13:12.570 --> 00:13:14.940
And at compile time,
we replace them with the appropriate

00:13:14.940 --> 00:13:18.120
values for your development environment.

00:13:18.300 --> 00:13:21.460
You can also customize it directly
for your deployment environment if

00:13:21.460 --> 00:13:23.850
you know what that's going to be.

00:13:23.940 --> 00:13:27.470
There's also another way to customize it.

00:13:27.550 --> 00:13:27.570
We'll mention that

00:13:27.810 --> 00:13:29.060
When we get there.

00:13:29.180 --> 00:13:31.540
All right,
we also add some new build settings.

00:13:31.670 --> 00:13:33.380
There's the Servlet WebAppster.

00:13:33.650 --> 00:13:36.890
This is mostly to make
it easy during testing.

00:13:36.890 --> 00:13:40.890
Tomcat, for instance,
automatically will deploy any

00:13:40.890 --> 00:13:45.320
WAR file that happens to be in a
particular directory when it's started.

00:13:45.470 --> 00:13:50.660
So what you can do is you can,
rather than build, copy, test, build,

00:13:50.940 --> 00:13:55.930
copy, test, what you can do is just set
the WebAppster directly to

00:13:56.000 --> 00:14:00.490
where Tomcat wants it to be,
restart Tomcat, and you're off.

00:14:00.490 --> 00:14:03.790
And then you only have to build, test,
build, test.

00:14:04.890 --> 00:14:06.430
It's easy to get sidetracked.

00:14:06.550 --> 00:14:08.560
Servlet copy jars.

00:14:08.680 --> 00:14:10.640
This is a little bit more complicated.

00:14:10.640 --> 00:14:14.710
We're going to talk at length about
this at the end of the conversation.

00:14:14.830 --> 00:14:16.000
It's not really a conversation.

00:14:16.040 --> 00:14:18.160
It's more like a monologue.

00:14:18.270 --> 00:14:19.070
Servlet copy jars.

00:14:19.330 --> 00:14:22.950
Should all of the jars for your
frameworks and your application

00:14:22.950 --> 00:14:25.400
be copied into the lib directory?

00:14:25.400 --> 00:14:28.380
What it means is that we'll copy
the jar files into a place where the

00:14:28.380 --> 00:14:32.730
Servlet container will automatically
load them when your application is run.

00:14:32.870 --> 00:14:35.960
We don't have to load them in, you know,
independently.

00:14:36.070 --> 00:14:40.390
And that gives you a little bit
more freedom at the cost of space.

00:14:40.830 --> 00:14:45.000
This is only used for accessing
WebObjects classes directly

00:14:45.000 --> 00:14:46.790
from inside of a JSP or Servlet.

00:14:46.910 --> 00:14:48.860
Normally, you shouldn't need to do this.

00:14:48.900 --> 00:14:52.440
This is only if you're going to do some
sort of interesting custom project.

00:14:52.550 --> 00:14:55.100
If you're just deploying a
WebObjects application as a Servlet,

00:14:55.100 --> 00:14:58.090
like a regular WebObjects application,
you shouldn't need to do this,

00:14:58.260 --> 00:15:01.700
because we do all the work for
you in the Servlet adapter.

00:15:01.860 --> 00:15:06.520
If you're using the WebObjects and
Direct Actions code later from JSP,

00:15:06.750 --> 00:15:09.400
you shouldn't either, because again,
we take care of it all

00:15:09.540 --> 00:15:10.700
in the taglib code.

00:15:12.520 --> 00:15:15.960
This will look very familiar,
but I want to be thorough.

00:15:16.090 --> 00:15:17.150
Project Builder Wo.

00:15:17.350 --> 00:15:20.440
Project Builder Wo adds, again,
two new files and folders,

00:15:20.560 --> 00:15:22.520
or two more folders in the file.

00:15:22.610 --> 00:15:28.530
It adds the JSP/Servlet webinth folder,
which is used to hold jars, classes,

00:15:28.530 --> 00:15:31.120
TLDs that you're interested in deploying.

00:15:31.290 --> 00:15:32.960
And this is sort of an
auto-routing folder.

00:15:32.960 --> 00:15:35.510
Anything you drop in there will
put into the correct place.

00:15:35.510 --> 00:15:38.120
But don't drop anything else in there,
or otherwise it may not

00:15:38.130 --> 00:15:39.940
end up in the right place.

00:15:39.940 --> 00:15:44.310
If you're interested in adding
additional resources into the WAR file,

00:15:44.310 --> 00:15:47.540
you use the JSP/Servlet resources file,
folder.

00:15:47.580 --> 00:15:49.440
It's not very complicated.

00:15:49.440 --> 00:15:53.160
We also have a web.xml.template
file included in Project Builder Wo.

00:15:53.330 --> 00:15:57.000
It behaves exactly the same
as it does on Project Builder.

00:15:57.800 --> 00:16:01.220
One caveat is because of the
nature of Project Builder WO,

00:16:01.580 --> 00:16:03.540
nested directories
retain their structure.

00:16:03.540 --> 00:16:06.740
So if you have some directory
structure that you want to drop into,

00:16:06.740 --> 00:16:11.100
say, the JSP/Servlet resources folder,
you can do it.

00:16:11.180 --> 00:16:13.740
But you won't be able to edit
from inside of Project Builder WO.

00:16:13.740 --> 00:16:15.300
You can only see the top level folder.

00:16:15.300 --> 00:16:18.040
You'll have to edit it, you know,
using Finder or

00:16:18.040 --> 00:16:20.290
Windows Explorer or something.

00:16:22.820 --> 00:16:25.390
Project Builder details
the new makefile variables.

00:16:25.400 --> 00:16:28.040
These are the makefile variables
that you need to add in.

00:16:28.040 --> 00:16:31.380
One thing to kind of keep in mind
is that they should be exported.

00:16:31.400 --> 00:16:34.580
The easiest way to do this is create
a new project using Project Builder.

00:16:34.580 --> 00:16:37.510
Well, take a look at the, you know,
big chunk where we have lots of

00:16:37.510 --> 00:16:40.260
comments and these variables,
and then just copy and paste

00:16:40.260 --> 00:16:41.700
that into your old project.

00:16:41.700 --> 00:16:43.850
That's probably the easiest way to do it.

00:16:44.520 --> 00:16:47.700
Servlet Web Appster and Servlet CopyJar,
as you should be familiar with,

00:16:47.700 --> 00:16:49.740
they behave, again,
exactly the same as in project builder.

00:16:49.740 --> 00:16:52.920
The only new one is Servlet App Mode.

00:16:53.140 --> 00:16:56.300
Servlet,
because in project builder we have

00:16:56.300 --> 00:17:00.350
a notion of a deployment install,
explicitly,

00:17:00.450 --> 00:17:05.020
when you do a deployment install,
we set something in the Web XML so the

00:17:05.020 --> 00:17:10.880
application knows whether it should
treat images and web server resources

00:17:11.060 --> 00:17:13.900
as being served from the web server.

00:17:13.920 --> 00:17:15.770
So, you know,
you'll have image source equals

00:17:15.980 --> 00:17:20.340
slash web objects slash blah
blah blah something dot gif.

00:17:20.430 --> 00:17:23.820
Or if you're in development mode,
it'll treat it as if we

00:17:23.820 --> 00:17:25.400
have to serve it explicitly.

00:17:25.400 --> 00:17:28.240
That's when you get the WR resource
with the enormously long,

00:17:28.240 --> 00:17:30.400
hard to understand URL.

00:17:31.980 --> 00:17:34.260
With the make files,
we don't have any way of telling.

00:17:34.360 --> 00:17:37.490
So you can set it explicitly,
Servlet app mode, you can set it to

00:17:37.490 --> 00:17:38.790
development or deployment.

00:17:38.900 --> 00:17:41.290
Obviously if you set it to deployment,
we act like you're going

00:17:41.300 --> 00:17:42.420
through the web server.

00:17:42.420 --> 00:17:44.750
If you set it to development,
we act like you're

00:17:44.840 --> 00:17:47.340
hitting us direct connect.

00:17:47.510 --> 00:17:51.030
So, I apologize,
that was a lot of information.

00:17:53.280 --> 00:17:54.700
How do you deploy?

00:17:54.780 --> 00:17:57.200
Well, you go through your process.

00:17:57.310 --> 00:17:59.080
You've, you know,
developed your application,

00:17:59.170 --> 00:18:00.180
you're all ready to do this.

00:18:00.220 --> 00:18:03.200
You build your application
once you've set all this stuff.

00:18:03.340 --> 00:18:06.600
We'll create a WAR file for you,
and we'll build it in the

00:18:06.600 --> 00:18:08.200
Servlet Web App Store.

00:18:08.200 --> 00:18:15.130
If the Servlet Web App Store isn't built,
it'll show up right next to wherever

00:18:15.150 --> 00:18:17.190
your WOA is set to show up by
default inside of your build,

00:18:17.190 --> 00:18:17.190
build products directory.

00:18:18.010 --> 00:18:21.600
You then use the container's
tools to deploy the application.

00:18:21.800 --> 00:18:25.860
Some containers have tools, you know,
like WebSphere, for instance.

00:18:25.860 --> 00:18:26.900
You have to use their GUI.

00:18:26.900 --> 00:18:29.440
It's, you know,
you point it at the WAR file,

00:18:29.440 --> 00:18:32.790
it explodes it, does some munging,
and then you're set to go.

00:18:32.970 --> 00:18:35.960
Tomcat, you just drop stuff into
a particular directory,

00:18:35.960 --> 00:18:38.060
restart the container, you're set to go.

00:18:38.220 --> 00:18:40.630
So it depends on the tool, you know.

00:18:40.760 --> 00:18:43.530
But we leave it entirely up to them.

00:18:43.710 --> 00:18:46.890
We create the WAR file,
and we let the container go.

00:18:47.500 --> 00:18:50.390
This is the URL that
you would use to hit it.

00:18:50.520 --> 00:18:53.600
It's a little bit different
from a regular WebObjects URL,

00:18:53.940 --> 00:18:56.660
and there's a specific reason for it.

00:18:56.660 --> 00:19:02.700
When you run a WebObjects application,
you can only run one application, right,

00:19:02.700 --> 00:19:03.910
on a port.

00:19:04.030 --> 00:19:08.500
When you run a container,
you can have 20, 30, hundreds,

00:19:08.500 --> 00:19:11.930
probably not hundreds,
Servlets running inside of it.

00:19:11.930 --> 00:19:15.270
It doesn't know, given a particular URL,
it doesn't know where to

00:19:15.270 --> 00:19:16.570
dispatch that Servlet.

00:19:16.650 --> 00:19:18.990
So what it does is it uses the URL.

00:19:19.130 --> 00:19:22.880
That's this, the myapp, WebObjects,
myapp.woa.

00:19:22.900 --> 00:19:26.260
The myapp is what it uses to
dispatch to the correct application.

00:19:26.290 --> 00:19:30.710
So it was easy to be lazy when you were
running in Direct Connect in standalone,

00:19:30.800 --> 00:19:34.600
you know, localhost:port,
and you'll just hit the first page.

00:19:34.680 --> 00:19:36.370
If you do that here,
you're going to get back

00:19:36.370 --> 00:19:37.670
the container's index page.

00:19:37.780 --> 00:19:39.380
You have to have this thing.

00:19:39.510 --> 00:19:41.000
And then, of course,
you still have to have

00:19:41.000 --> 00:19:43.590
WebObjects myapp:woa,
because the WebXML defines that

00:19:43.590 --> 00:19:46.230
as the path to the particular
Servlet that we're going to be

00:19:46.270 --> 00:19:48.740
servlet that we need to invoke.

00:19:51.760 --> 00:19:54.800
There are a couple of quibbles.

00:19:54.900 --> 00:19:59.890
Do you remember how the Servlet adapter
loads the WO classes at runtime?

00:20:00.700 --> 00:20:03.280
One consequence of this is
that it needs to know where to

00:20:03.380 --> 00:20:06.200
find the WebObjects classes.

00:20:06.310 --> 00:20:11.570
We define three variables that
let you specify where these are.

00:20:11.690 --> 00:20:15.200
These are defined inside the WebXML,
and they get passed as Servlet context

00:20:15.200 --> 00:20:16.820
parameters to your application.

00:20:16.840 --> 00:20:18.590
And the Servlet adapter takes care of it.

00:20:18.600 --> 00:20:21.380
You shouldn't normally
need to worry about it.

00:20:21.530 --> 00:20:24.940
But the thing is that because
we do this at compile time,

00:20:25.060 --> 00:20:27.040
they're set for your
development environment.

00:20:27.220 --> 00:20:31.350
Wherever it thinks that your WAR file
and your WOA and your frameworks

00:20:31.430 --> 00:20:34.680
and the system frameworks are,
when you compile the application,

00:20:34.790 --> 00:20:36.340
that's where it's going
to make the settings.

00:20:36.450 --> 00:20:39.380
Obviously, this isn't necessarily
appropriate all the time.

00:20:39.510 --> 00:20:46.480
So what you can do is set system
properties at the container level.

00:20:46.590 --> 00:20:49.640
So anything you set in the
system property with the

00:20:49.650 --> 00:20:54.780
same name as these variables,
will override anything in the WebXML.

00:20:54.840 --> 00:20:58.470
Of course,
this also has the logical conclusion

00:20:59.200 --> 00:21:03.280
that all of them have to be the same
for all of the WebObjects applications

00:21:03.280 --> 00:21:06.190
running inside of a single container.

00:21:09.650 --> 00:21:12.790
I'll bet you thought I forgot
which three variables.

00:21:12.940 --> 00:21:14.390
But I didn't.

00:21:14.570 --> 00:21:15.050
All right.

00:21:15.300 --> 00:21:16.270
The woa install route.

00:21:16.410 --> 00:21:18.910
This is the directory
where your woa is located.

00:21:19.140 --> 00:21:24.790
So if you installed hello world dot woa
into library WebObjects applications,

00:21:25.020 --> 00:21:28.980
that path would be library
WebObjects applications.

00:21:29.080 --> 00:21:31.490
Local route is where your,
your frameworks are.

00:21:31.580 --> 00:21:36.280
Typically, for instance, on Mac OS X,
this would be library frameworks.

00:21:36.720 --> 00:21:38.500
And WoRoot should be easy.

00:21:38.500 --> 00:21:41.550
That's the director where the system
frameworks are typically installed.

00:21:41.700 --> 00:21:44.200
Java WebObjects framework,
Java Foundation framework.

00:21:44.300 --> 00:21:47.590
And for instance on Mac OS X,
that's system library frameworks,

00:21:47.940 --> 00:21:49.590
blah blah blah.

00:21:54.330 --> 00:21:57.090
Some more details about what we're doing.

00:21:57.190 --> 00:21:58.860
Session handling.

00:21:58.960 --> 00:22:00.620
One of the interesting
things is the sessions,

00:22:00.620 --> 00:22:03.300
the way we're doing WebObjects
sessions is that we're actually

00:22:03.300 --> 00:22:07.440
going to piggyback them on top
of the JSP/Servlet session store.

00:22:07.550 --> 00:22:12.070
This means that we no longer have
our own session store implementation.

00:22:12.210 --> 00:22:16.880
We have sort of a thin shell on top
of the containers session store.

00:22:16.940 --> 00:22:19.710
In a lot of containers,
their session store is

00:22:19.710 --> 00:22:20.970
actually very advanced.

00:22:20.970 --> 00:22:22.370
It's very nice.

00:22:22.500 --> 00:22:26.100
And while it's not officially supported,
it's possible that for

00:22:26.100 --> 00:22:29.630
something like WebLogic,
where they automatically

00:22:30.180 --> 00:22:33.800
support persistent sessions
traveling between instances,

00:22:33.860 --> 00:22:37.740
their whole clustering thing,
it's possible, at least,

00:22:37.740 --> 00:22:42.100
that our sessions could be carried
around as long as everything inside

00:22:42.110 --> 00:22:44.310
the session was also serializable.

00:22:45.250 --> 00:22:50.070
The other comment is that some of the
WebObjects properties aren't used.

00:22:50.310 --> 00:22:52.640
This should actually
come as a no-brainer.

00:22:52.780 --> 00:22:55.400
Many of the properties that aren't
used are the ones that deal with

00:22:55.400 --> 00:22:56.810
things like the WoE default adapters.

00:22:56.840 --> 00:23:00.270
Since we no longer have a WoE default
adapter that's listening on a

00:23:00.310 --> 00:23:04.290
socket and doing all this work,
you don't need any settings for it.

00:23:04.630 --> 00:23:08.080
The other thing, though,
is-- and this may bite some people-- you

00:23:08.140 --> 00:23:13.660
can't pass arguments on the command line,
because we're not starting it, right?

00:23:13.790 --> 00:23:15.910
The container could already be running.

00:23:16.000 --> 00:23:18.940
It won't have a chance
to read anything in.

00:23:19.020 --> 00:23:20.960
In a lot of the containers,
you have a running container,

00:23:20.960 --> 00:23:22.530
you point it at your app, and it says,
oh!

00:23:22.540 --> 00:23:24.100
And starts your app up.

00:23:24.220 --> 00:23:25.560
We've never had a chance.

00:23:25.560 --> 00:23:27.730
So the way you would want to do
that is using the properties file.

00:23:27.920 --> 00:23:29.480
And that was talked about
in the deployment course.

00:23:29.600 --> 00:23:31.660
You can have properties
files in frameworks,

00:23:31.780 --> 00:23:34.560
you can have them inside the WOA,
and those will set properties for you.

00:23:35.970 --> 00:23:38.140
If you're brave,
you can also set them in the WebXML,

00:23:38.140 --> 00:23:40.860
pass them a Servlet context,
and do some interesting

00:23:40.860 --> 00:23:42.290
stuff to pull them out.

00:23:43.530 --> 00:23:46.630
Remember, though, when you do this,
you have to be a little bit careful.

00:23:46.640 --> 00:23:50.960
System properties are shared between
all applications in a container.

00:23:51.130 --> 00:23:55.810
So if you have five applications and you
have a single setting that you need to

00:23:55.810 --> 00:24:00.100
be different between those applications,
it may not work.

00:24:00.220 --> 00:24:04.200
Because the last one to run
will set the system properties

00:24:04.470 --> 00:24:06.390
for the entire container.

00:24:06.470 --> 00:24:07.160
Okay?

00:24:07.240 --> 00:24:10.160
This is something you
need to be careful of.

00:24:10.360 --> 00:24:11.300
It's also something we're aware of.

00:24:12.460 --> 00:24:14.000
Obviously,
I've mentioned this several times,

00:24:14.140 --> 00:24:16.060
the WO default adapter isn't used.

00:24:16.210 --> 00:24:18.680
So if you're expecting it to
do something in particular,

00:24:18.680 --> 00:24:20.830
I'm not certain what,
because it's not really public.

00:24:20.900 --> 00:24:23.720
But if you were, it's not going to do it.

00:24:24.450 --> 00:24:26.620
The other thing,
and this is probably the one that's

00:24:26.880 --> 00:24:30.650
going to be the most trouble,
is we have a custom WoContext subclass.

00:24:30.680 --> 00:24:33.180
It's called the WoServletContext.

00:24:33.310 --> 00:24:37.160
So if you have a subclass of WoContext,
you need to look at subclassing

00:24:37.160 --> 00:24:39.970
the WoServletContext instead.

00:24:40.130 --> 00:24:45.000
Now I'm going to have a very brief
sort of over here sort of moment.

00:24:45.130 --> 00:24:47.210
If you start working
with this in any detail,

00:24:47.210 --> 00:24:53.200
you're going to see the ServletContext
compared to the WoContext.

00:24:53.620 --> 00:24:56.030
These are totally separate.

00:24:56.170 --> 00:25:01.910
For us, for WebObjects developers,
a WoContext is a per-request object.

00:25:01.990 --> 00:25:04.320
It's something that keeps
track of what's going on in the

00:25:04.320 --> 00:25:07.810
request that I'm processing now,
and it has no idea what's

00:25:07.930 --> 00:25:08.860
going on outside of that.

00:25:09.080 --> 00:25:12.430
And in fact,
we just throw it away after each request.

00:25:12.540 --> 00:25:18.350
In the Servlet world,
a ServletContext is the application.

00:25:19.850 --> 00:25:21.910
I don't know how they
came to this conclusion,

00:25:22.160 --> 00:25:23.420
but it's all right.

00:25:23.670 --> 00:25:25.770
We speak English.

00:25:25.850 --> 00:25:29.140
A Servlet context literally
represents your application.

00:25:29.140 --> 00:25:34.040
It's roughly equivalent to the
WO application object in WebObjects.

00:25:34.040 --> 00:25:36.390
So when you're,
when you kind of look at this,

00:25:36.510 --> 00:25:38.990
and if you're talking about
it or working with them,

00:25:38.990 --> 00:25:40.550
you have to keep this in mind.

00:25:40.550 --> 00:25:43.850
You have to be very explicit so you
don't start suddenly trying to treat the

00:25:43.850 --> 00:25:45.940
Servlet context as a temporary object.

00:25:45.960 --> 00:25:48.040
Okay.

00:25:48.040 --> 00:25:50.160
Back to the WebObjects people.

00:25:52.300 --> 00:25:55.140
Okay.

00:25:55.200 --> 00:25:56.120
Looks like it's time for a demo.

00:25:56.310 --> 00:25:58.180
That's what the slides tell me.

00:25:58.270 --> 00:26:01.300
So, I'd like to invite Megan Moore.

00:26:01.300 --> 00:26:07.780
So, what we're going to do first,
just in case you didn't believe me,

00:26:07.780 --> 00:26:10.520
we're going to convert
an existing project.

00:26:10.660 --> 00:26:13.170
To make it kind of interesting,
we're going to actually convert

00:26:13.170 --> 00:26:14.390
Java Client Rental Store.

00:26:14.450 --> 00:26:16.760
It's actually a direct-to-Java
client application.

00:26:16.840 --> 00:26:20.940
It's one of the examples
that ships with WebObjects.

00:26:20.940 --> 00:26:22.280
So, we begin.

00:26:22.280 --> 00:26:23.380
We're going to add the framework.

00:26:35.420 --> 00:26:37.250
And of course,
we have to add it to the correct target,

00:26:37.310 --> 00:26:38.970
because if we don't add
it to the correct target,

00:26:39.380 --> 00:26:40.520
Godzilla will come and kill us all.

00:26:42.380 --> 00:26:43.000
All right.

00:26:43.100 --> 00:26:46.910
You notice that what happened,
as soon as she added the framework,

00:26:47.080 --> 00:26:49.150
we got this new directory
that I was talking about,

00:26:49.170 --> 00:26:51.060
the Servlet resources directory.

00:26:51.220 --> 00:26:53.330
There's nothing else in it by default,
because frankly we don't put

00:26:53.330 --> 00:26:54.230
anything in it by default.

00:26:54.320 --> 00:26:56.740
You can drag whatever you want in.

00:26:56.840 --> 00:26:59.630
The only thing we have is the WebInf.

00:26:59.730 --> 00:27:04.930
The WebInf has a classes, a lib,
a tld directory, and the WebXML that we

00:27:04.930 --> 00:27:06.610
talked about before.

00:27:06.760 --> 00:27:09.240
Let's take a quick look at the WebXML.

00:27:09.580 --> 00:27:13.000
So here, right at the top,
you can see that we have these three

00:27:13.000 --> 00:27:16.230
context parameters that we talked about,
the ones that you use to set

00:27:16.330 --> 00:27:20.490
where the Servlet adapter goes
off and looks for the classes.

00:27:20.600 --> 00:27:23.460
WO route, LOCO route, WOA install route.

00:27:23.600 --> 00:27:25.330
Currently, they're the placeholders.

00:27:25.450 --> 00:27:27.970
They'll get replaced, again,
by the appropriate values for

00:27:27.970 --> 00:27:30.800
development at compile time.

00:27:30.800 --> 00:27:32.900
I sound like a broken clock.

00:27:33.010 --> 00:27:34.900
All right, WO app mode.

00:27:35.120 --> 00:27:36.070
Here we have it.

00:27:36.280 --> 00:27:38.340
You can set it explicitly if you like.

00:27:38.510 --> 00:27:43.410
Project Builder is a little bit smarter
about what to set it to when you build.

00:27:44.240 --> 00:27:47.730
The most interesting thing will
end up being the WO class path.

00:27:47.800 --> 00:27:50.870
The WO class path is
what we end up using.

00:27:51.090 --> 00:27:54.280
That's the class path that NSBundle uses
to build up all its bundles,

00:27:54.280 --> 00:27:56.690
find all your application,
all your code and everything like that.

00:27:56.700 --> 00:27:57.700
You want the font?

00:27:57.700 --> 00:27:58.700
What?

00:27:58.870 --> 00:27:59.700
The font.

00:27:59.700 --> 00:28:00.660
Oh, you want the font bigger?

00:28:00.780 --> 00:28:01.680
Yeah.

00:28:08.100 --> 00:28:15.200
[Transcript missing]

00:28:16.210 --> 00:28:22.870
syntax coloring.

00:28:22.960 --> 00:28:23.940
Oh, sorry.

00:28:23.940 --> 00:28:23.940
Yeah, that's it.

00:28:23.940 --> 00:28:23.940
Font.

00:28:23.940 --> 00:28:23.940
Oh, set.

00:28:23.940 --> 00:28:23.940
There we go.

00:28:24.360 --> 00:28:27.220
One of the interesting things
that you can actually do is

00:28:27.250 --> 00:28:30.300
you can just... - Bigger,
bigger.

00:28:30.300 --> 00:28:30.500
- There we go.

00:28:30.540 --> 00:28:31.900
- Try 14.

00:28:31.900 --> 00:28:31.900
- How about 18?

00:28:31.980 --> 00:28:33.960
No, I think 18 is probably fine.

00:28:37.730 --> 00:28:39.090
: Hit OK.

00:28:39.090 --> 00:28:39.700
There we go.

00:28:40.270 --> 00:28:41.700
OK, so they're big.

00:28:41.700 --> 00:28:41.700
There we go.

00:28:42.210 --> 00:28:44.500
These are really important variables.

00:28:44.580 --> 00:28:46.090
Very weighty.

00:28:46.220 --> 00:28:46.700
All right.

00:28:46.700 --> 00:28:47.750
You go on.

00:28:47.750 --> 00:28:51.470
You have to specify the--well,
we find the WO application class for you.

00:28:51.470 --> 00:28:53.030
We do all this nice stuff.

00:28:53.140 --> 00:28:57.220
The WO class path builds into a
series of paths where it'll be like,

00:28:57.220 --> 00:29:01.760
WO root slash library frameworks, blah,
blah, blah.

00:29:01.920 --> 00:29:04.710
So what we try to do,
what you can also do here,

00:29:04.710 --> 00:29:07.080
it's very simple when you
deploy your application.

00:29:07.220 --> 00:29:12.400
If you have additional jars,
just add them after, you know, you know,

00:29:12.400 --> 00:29:14.300
after a WOClassPath
with the percent signs,

00:29:14.300 --> 00:29:17.300
just hit enter and, you know,
add a list of jars that you want to

00:29:17.300 --> 00:29:19.060
include and hit enter after each.

00:29:19.160 --> 00:29:19.950
It's not very hard.

00:29:19.950 --> 00:29:23.470
We'll find them and do them at runtime.

00:29:23.570 --> 00:29:28.930
If we don't find it,
we'll just ignore it.

00:29:28.930 --> 00:29:28.930
So,

00:29:29.510 --> 00:29:32.550
The classes directory and the lib
directory and the tld directory

00:29:32.640 --> 00:29:34.100
are pretty much standard.

00:29:34.240 --> 00:29:38.870
Classes is where you would drop unjarred,
like, just .class files,

00:29:38.940 --> 00:29:41.590
so that the Servlet
container will load it.

00:29:41.950 --> 00:29:45.460
The lib directory is, ta-da,
where you would put jar files so

00:29:45.530 --> 00:29:47.800
the Servlet container will load it.

00:29:47.910 --> 00:29:50.560
Remember that variable Servlet copy jars?

00:29:50.670 --> 00:29:52.940
Well, it copies all your jars
into the lib directory,

00:29:52.940 --> 00:29:56.440
so the Servlet container will load it.

00:29:56.550 --> 00:30:01.350
And the TLD is where it's
a convenient place to put

00:30:01.610 --> 00:30:03.600
and I are going to talk about
the tag library definition files.

00:30:03.600 --> 00:30:07.610
They're XML files that
define the behavior and ex--

00:30:08.630 --> 00:30:09.270
Excuse me.

00:30:09.490 --> 00:30:12.400
I hope that wasn't me.

00:30:12.520 --> 00:30:18.500
The XML files that define
a custom tag library.

00:30:18.600 --> 00:30:19.400
It's empty for now.

00:30:19.400 --> 00:30:22.640
You can drop in stuff and
reference it there for ease.

00:30:22.780 --> 00:30:25.010
We also drop something
in there when we compile.

00:30:25.140 --> 00:30:29.320
That's the tag libraries that we
use to call WebObjects components

00:30:29.330 --> 00:30:31.260
and direct actions later.

00:30:31.260 --> 00:30:34.540
So, the other thing we wanted to
take a look at was the targets,

00:30:34.730 --> 00:30:38.000
those new build targets,
or build settings, rather.

00:30:42.230 --> 00:30:45.740
Servlet CompiJars, currently set to no,
because, like I mentioned,

00:30:45.770 --> 00:30:48.100
this is just a regular
WebObjects application.

00:30:48.100 --> 00:30:50.040
It's not needing to do anything special.

00:30:50.150 --> 00:30:53.440
Megan, in Servlet WebAppster,
what she's doing is,

00:30:53.520 --> 00:30:56.620
because we're going to
use Tomcat 4 to demo this,

00:30:56.620 --> 00:30:56.620
we're going to use

00:30:56.600 --> 00:30:58.000
Excuse me.

00:30:58.000 --> 00:31:00.530
She's just going to drop the jar in
there directly so we don't have to do

00:31:00.530 --> 00:31:05.440
anything complicated because it's a demo.

00:31:05.520 --> 00:31:07.150
We build.

00:31:11.870 --> 00:31:15.040
We restart.

00:31:15.150 --> 00:31:18.510
Actually, sorry, my bad, we start.

00:31:19.090 --> 00:31:22.240
All right, you can see here,
we found the main bundle.

00:31:22.380 --> 00:31:27.000
That's the list of properties files,
and you notice that it is much shorter.

00:31:27.000 --> 00:31:29.500
A good number of the properties
just don't matter anymore.

00:31:29.500 --> 00:31:32.310
They're not anything we
care about in particular.

00:31:33.260 --> 00:31:37.030
Double check the
Java client application and,

00:31:37.280 --> 00:31:42.870
again, the correct URL,
Java client rental store, blah, blah,

00:31:42.870 --> 00:31:44.020
blah.

00:31:44.080 --> 00:31:46.060
Wait a few minutes.

00:31:51.400 --> 00:31:52.240
There we go.

00:31:52.400 --> 00:31:59.280
So that's Java client rental movies
running in a Servlet container.

00:31:59.410 --> 00:32:01.310
Just to be thorough,

00:32:01.510 --> 00:32:03.560
Now that we've seen that it works,
who did you find?

00:32:03.560 --> 00:32:04.180
Lisa Matthews.

00:32:04.290 --> 00:32:06.830
Okay, I don't know

00:32:07.090 --> 00:32:11.080
So what we're going to do now,
stop the container,

00:32:11.080 --> 00:32:14.780
and because I'm an engineer,
I like to be thorough,

00:32:14.940 --> 00:32:17.680
we're going to show making a new project.

00:32:17.850 --> 00:32:21.700
Okay,
so let's do a directed web application.

00:32:21.830 --> 00:32:25.860
And let's call it DTWServlet.

00:32:26.950 --> 00:32:28.140
Does anybody have any problems with that?

00:32:28.150 --> 00:32:28.900
It's OK?

00:32:28.900 --> 00:32:30.200
It's OK.

00:32:30.250 --> 00:32:30.660
All right.

00:32:30.810 --> 00:32:32.130
This is what I was talking about.

00:32:32.220 --> 00:32:34.250
Here's the really complicated part.

00:32:34.570 --> 00:32:36.690
Deploy in a JSP/Servlet container.

00:32:36.810 --> 00:32:40.430
There's a line, copy all jars into the
JSP/Servlet webinf directory.

00:32:40.590 --> 00:32:43.780
That's pretty much a cover
method for changing the setting

00:32:43.920 --> 00:32:46.590
for Servlet copy all jars.

00:32:47.190 --> 00:32:49.860
Generally, again,
you don't really want to worry about it.

00:32:50.000 --> 00:32:51.100
So let's build it.

00:32:51.100 --> 00:32:54.100
Or, well, let's go next.

00:32:54.360 --> 00:33:00.100
And let's find a random model.

00:33:00.100 --> 00:33:02.010
Movies is good.

00:33:05.510 --> 00:33:06.400
Let's go neutral.

00:33:06.400 --> 00:33:08.660
I don't want to offend anyone.

00:33:08.740 --> 00:33:10.870
All right,
normally you can build and launch.

00:33:11.090 --> 00:33:12.240
That's fine.

00:33:12.240 --> 00:33:16.160
What we're really going to do here is,
the only reason we didn't build

00:33:16.160 --> 00:33:18.440
and launch is because I do want
to set the WebApp stir so it

00:33:18.440 --> 00:33:20.950
builds in the correct place.

00:33:23.330 --> 00:33:24.430
Go, Megan, go.

00:33:24.500 --> 00:33:26.200
Type like the wind.

00:33:26.200 --> 00:33:27.760
There's no pressure.

00:33:27.760 --> 00:33:28.800
We're all just waiting on you.

00:33:28.800 --> 00:33:30.530
I'm not that fast a typer.

00:33:30.610 --> 00:33:30.780
Sorry.

00:33:30.800 --> 00:33:31.320
Oh, come on.

00:33:31.320 --> 00:33:31.900
You can do it.

00:33:31.900 --> 00:33:34.010
You should practice more.

00:33:40.760 --> 00:33:42.200
Come on, you can do it.

00:33:42.320 --> 00:33:44.700
Go, little Mac, go.

00:33:44.780 --> 00:33:45.860
All right, we're starting it again.

00:33:45.900 --> 00:33:48.940
Actually, if you haven't noticed,
we didn't bother to remove the old one,

00:33:48.940 --> 00:33:53.040
so we're actually going to end
up launching both applications.

00:33:53.050 --> 00:33:57.910
This first one happens to be-- Oh,
we're building DTWS first.

00:33:59.300 --> 00:34:03.690
And there you go.

00:34:03.730 --> 00:34:05.800
It's a directed web application.

00:34:05.930 --> 00:34:06.300
It's running as a servlet.

00:34:06.300 --> 00:34:10.340
There's no WebObjects running, well,
WebObjects isn't running independent.

00:34:10.340 --> 00:34:13.380
Megan, thank you.

00:34:13.380 --> 00:34:14.330
Mm-hmm.

00:34:14.970 --> 00:34:16.570
Wasn't she wonderful?

00:34:22.900 --> 00:34:27.660
We are now on to the second
half of our presentation.

00:34:27.750 --> 00:34:31.480
For those of you who were
hoping for an intermission,

00:34:31.480 --> 00:34:32.580
you slept through it.

00:34:32.590 --> 00:34:33.940
Next.

00:34:33.940 --> 00:34:34.940
Alright.

00:34:34.940 --> 00:34:35.600
So, JSPs.

00:34:35.600 --> 00:34:36.970
What does the acronym mean?

00:34:37.180 --> 00:34:40.520
Well,
the acronym means Java Server Pages.

00:34:40.640 --> 00:34:43.480
It's sort of a takeoff
of app server page,

00:34:43.480 --> 00:34:45.930
you know, the whole ASP thing.

00:34:45.930 --> 00:34:45.930
Alright.

00:34:46.150 --> 00:34:48.790
It's a template-based way
of generating dynamic HTML.

00:34:48.810 --> 00:34:51.810
It's essentially what happened
when somebody at Sun said,

00:34:51.810 --> 00:34:56.240
you know, it's kind of mean for us to
make them write everything

00:34:56.620 --> 00:34:58.040
when they're writing Servlets.

00:34:58.090 --> 00:35:00.400
I mean, you know,
you're sitting here going system out,

00:35:00.440 --> 00:35:03.690
or like, system out println, you know.

00:35:04.010 --> 00:35:05.790
Open bracket, blah, blah, blah.

00:35:05.960 --> 00:35:07.970
Quote, end bracket, return.

00:35:08.280 --> 00:35:09.780
I mean, it's really a pain in the butt.

00:35:09.780 --> 00:35:11.860
Isn't there a better way we can do this?

00:35:11.860 --> 00:35:14.100
So they came up with the
innovative idea of using templates.

00:35:16.470 --> 00:35:18.630
And then, of course, you know,
because it's good to leverage code,

00:35:18.860 --> 00:35:22.730
they're compiled into Servlets at
runtime by a Servlet container.

00:35:23.340 --> 00:35:27.460
This basically means that, of course,
every JSP container is

00:35:27.570 --> 00:35:32.180
also a Servlet container,
though I think in one case they may not

00:35:32.260 --> 00:35:34.790
actually expose the Servlet interface.

00:35:34.910 --> 00:35:38.120
Essentially, it is just template-based.

00:35:38.220 --> 00:35:42.540
You write HTML, and you have little bits
of embedded Java code.

00:35:42.620 --> 00:35:45.100
Recently, things have been getting
a little bit better,

00:35:45.100 --> 00:35:48.340
especially with the advent of Bean,
so in a lot of cases now,

00:35:48.340 --> 00:35:52.160
you just ask a Bean to return the
information that you're interested in.

00:35:52.280 --> 00:35:56.790
But you're still capable of writing
Java code directly in the HTML itself.

00:35:56.900 --> 00:35:58.530
You can also call out the other Servlets.

00:35:58.700 --> 00:36:00.750
You can include other bits of JSP pages.

00:36:00.760 --> 00:36:03.060
It's, you know,
it's your standard template-based system.

00:36:03.060 --> 00:36:05.060
ColdFusion, WebObjects.

00:36:05.160 --> 00:36:05.570
We all do it.

00:36:05.840 --> 00:36:08.610
Some of us do it better.

00:36:11.130 --> 00:36:12.000
Tada!

00:36:12.030 --> 00:36:13.200
This slide should look really familiar.

00:36:13.200 --> 00:36:14.460
I sort of cobbled it from an early one.

00:36:14.600 --> 00:36:17.300
It's new to WebObjects 5.1.

00:36:17.400 --> 00:36:18.850
It requires Servlet integration.

00:36:19.010 --> 00:36:22.380
Remember I told you, you know,
all the JSPs get compiled to Servlets,

00:36:22.380 --> 00:36:23.730
so on and so forth.

00:36:23.800 --> 00:36:26.950
This means, obviously,
you must run as a Servlet

00:36:27.050 --> 00:36:29.070
in a Servlet container.

00:36:29.420 --> 00:36:34.240
What it does is it lets you use
WO components and direct actions

00:36:34.440 --> 00:36:40.490
to generate HTML or XML or actually
whatever you want for your JSP pages.

00:36:42.320 --> 00:36:43.200
Why?

00:36:43.380 --> 00:36:49.710
Well, we let you write this sort of weird
mixed JSP and WebObjects application,

00:36:49.710 --> 00:36:51.190
where bits of it are
written in WebObjects,

00:36:51.240 --> 00:36:53.130
bits of it are written in JSP.

00:36:53.230 --> 00:36:54.370
Why would you want to do this?

00:36:54.410 --> 00:36:56.650
Well, there are two big reasons.

00:36:56.740 --> 00:37:02.240
The thing is that despite the
fact that it's this wonderful,

00:37:02.340 --> 00:37:05.490
powerful template-based system,
JSPs are still a pain in the

00:37:05.490 --> 00:37:05.490
butt to use for a lot of people.

00:37:05.760 --> 00:37:10.270
What you can do is you can use a JSP,
and then you can use WebObjects

00:37:10.280 --> 00:37:14.620
to do the really hard stuff,
because we do that really well.

00:37:14.750 --> 00:37:16.270
Custom WO components.

00:37:16.510 --> 00:37:18.880
You can have WO components
with these really,

00:37:18.880 --> 00:37:22.510
really complex templates,
component contents, switch components,

00:37:22.510 --> 00:37:24.610
all this stuff like that.

00:37:24.680 --> 00:37:26.770
You know, WO repetitions,
WO progress bars,

00:37:26.770 --> 00:37:29.030
all the nice elements and,
and built-in components

00:37:29.030 --> 00:37:29.920
that we build for you.

00:37:31.640 --> 00:37:36.800
And of course, the kicker,
instead of JDBC, you can use EOF to do

00:37:36.800 --> 00:37:39.440
your data persistence.

00:37:39.440 --> 00:37:42.350
And for a lot of people,
that's really nice.

00:37:43.300 --> 00:37:44.300
How did we do this?

00:37:44.300 --> 00:37:47.300
Well, we implemented it as a taglib.

00:37:47.430 --> 00:37:52.630
Taglibs, tag libraries,
are custom JSP tags.

00:37:52.630 --> 00:37:54.280
You can see one here.

00:37:54.280 --> 00:37:58.310
You sort of say, all right,
any time I use the prefix tt,

00:37:58.310 --> 00:38:01.530
it means to use the taglib at this URL.

00:38:01.930 --> 00:38:04.150
And then you can define your custom tags.

00:38:04.240 --> 00:38:07.380
When the JSP engine reaches those tags,
it calls out to your

00:38:07.380 --> 00:38:08.770
code and does whatever.

00:38:08.960 --> 00:38:12.840
In our case, of course, you know,
it hits a WebObjects tag,

00:38:12.840 --> 00:38:16.210
calls out to our code,
we invoke request response loop to grab

00:38:16.280 --> 00:38:19.330
the HTML or whatever you're returning,
and then hand that

00:38:19.330 --> 00:38:22.140
back to the JSP engine.

00:38:22.140 --> 00:38:22.140
Voila.

00:38:23.050 --> 00:38:28.490
We define it in a TLD file,
wo-taglib_1_0-TLD.

00:38:28.560 --> 00:38:31.990
It's located inside the
Java WO/JSP Servlet framework.

00:38:32.020 --> 00:38:36.780
We also copy it into the
TLD file of the built warp.

00:38:38.190 --> 00:38:39.340
Ta-da!

00:38:39.340 --> 00:38:40.760
OK.

00:38:40.840 --> 00:38:45.100
Part one of using WO components,
the component tag.

00:38:45.100 --> 00:38:48.610
The component tag has--pardon me.

00:38:48.800 --> 00:38:51.090
I'm going to take a drink.

00:38:55.110 --> 00:38:56.940
Do you guys hear me swallow?

00:38:56.940 --> 00:38:57.420
No?

00:38:57.440 --> 00:38:58.440
Good.

00:38:58.560 --> 00:39:00.460
It's always embarrassing.

00:39:00.470 --> 00:39:01.100
So, attributes.

00:39:01.600 --> 00:39:03.700
You can have the class name,
which is the name of the component.

00:39:03.790 --> 00:39:11.980
So if you have a component,
myComponent or main or whatever,

00:39:12.200 --> 00:39:13.140
that's required, obviously.

00:39:13.140 --> 00:39:13.140
It needs to know what component.

00:39:13.140 --> 00:39:13.140
BodyContentOnly.

00:39:13.750 --> 00:39:17.170
Because a lot of people will want to
try and reuse existing components,

00:39:17.210 --> 00:39:20.650
and some existing components
think they're the whole page.

00:39:20.740 --> 00:39:24.190
But in this case, because you're doing
it inside a JSP page,

00:39:24.360 --> 00:39:25.560
it may not be.

00:39:25.600 --> 00:39:29.100
So what you can do is you can
set body content only to true,

00:39:29.100 --> 00:39:33.750
and we'll try and strip everything
except the content between the

00:39:33.800 --> 00:39:36.480
first and the last body tags.

00:39:36.600 --> 00:39:37.800
OK.

00:39:37.800 --> 00:39:41.100
This is mostly to avoid having
you end up with two components,

00:39:41.100 --> 00:39:43.520
one to use separately,
one to use inside of a JSP page

00:39:43.520 --> 00:39:49.100
where one is basically the other
with bits just cut out or commented.

00:39:49.100 --> 00:39:51.800
And merge response headers.

00:39:51.980 --> 00:39:54.590
Obviously,
we give you a little bit more control.

00:39:54.730 --> 00:39:59.680
When you are generating a component,
you can stuff custom headers or

00:39:59.680 --> 00:40:02.140
modify existing headers in a response.

00:40:02.270 --> 00:40:05.890
And this tells us whether we should
take the WoW response headers and merge

00:40:05.930 --> 00:40:08.370
it into the real servlet response.

00:40:08.560 --> 00:40:11.100
You have to be really careful doing this.

00:40:11.190 --> 00:40:13.800
The servlet response has its
own idea of what's going on,

00:40:13.800 --> 00:40:15.880
and you could have multiple
components on a page.

00:40:15.900 --> 00:40:17.160
They could conflict.

00:40:17.270 --> 00:40:20.100
Again,
the component can't think of itself

00:40:20.590 --> 00:40:24.400
as the only component on a page,
nor will it be the entire

00:40:24.470 --> 00:40:28.890
page almost definitely,
even if it was originally intended to be.

00:40:31.990 --> 00:40:33.060
You can specify things.

00:40:33.060 --> 00:40:35.600
You are, you know,
in order to invoke a component,

00:40:35.710 --> 00:40:36.580
you need to pass things.

00:40:36.580 --> 00:40:38.360
Like in the WAD file,
you would need to pass

00:40:38.360 --> 00:40:40.220
bindings and such like that.

00:40:40.220 --> 00:40:43.810
So the two things we let you do is we
let you pass extra headers incoming,

00:40:43.810 --> 00:40:47.930
you know, in case your component expects
that some previous bit did

00:40:48.020 --> 00:40:51.490
some processing and wants,
you know, passes it through the header.

00:40:51.570 --> 00:40:52.080
So you can pass it.

00:40:52.160 --> 00:40:52.650
It's very easy.

00:40:52.660 --> 00:40:54.120
It's key in value.

00:40:54.120 --> 00:40:55.520
It's optional.

00:40:55.520 --> 00:40:57.100
And the binding.

00:40:57.100 --> 00:40:58.060
These are the important bits.

00:40:58.080 --> 00:41:01.810
These are pretty much analogous to
what you would pass in the WAD file.

00:41:01.990 --> 00:41:03.240
Right.

00:41:03.240 --> 00:41:07.830
You have a key and a value,
and they are passed as ta-da, key, value.

00:41:07.830 --> 00:41:09.270
Yeah.

00:41:09.270 --> 00:41:09.270
OK.

00:41:12.450 --> 00:41:14.540
I apologize,
the code is a little bit small.

00:41:14.540 --> 00:41:16.000
It's only like half a foot high.

00:41:16.000 --> 00:41:21.990
And you can see,
we define where to find the tag lib.

00:41:22.280 --> 00:41:25.100
We do a little bit of embedded Java code.

00:41:25.100 --> 00:41:27.320
Again, please note,
if this is anything complicated,

00:41:27.320 --> 00:41:30.990
you usually would shop it out to a bean
so you don't end up editing the JSP page

00:41:31.200 --> 00:41:33.820
directly every time you want to do this.

00:41:33.870 --> 00:41:36.220
And then finally,
we invoke WoCompletionBar,

00:41:36.220 --> 00:41:38.680
and we just pass a whole
bunch of information.

00:41:38.780 --> 00:41:41.970
You can see, you know,
the general syntax of how we do

00:41:42.170 --> 00:41:43.120
And it works.

00:41:43.180 --> 00:41:44.140
Looks good.

00:41:44.230 --> 00:41:47.080
You have a nice WOCompletion bar,
and you basically didn't have

00:41:47.180 --> 00:41:48.210
to write much code at all.

00:41:52.040 --> 00:41:56.440
Now we move on to direct actions.

00:41:56.520 --> 00:42:00.360
Direct actions live in,
are invoked through a direct action tag,

00:42:00.570 --> 00:42:02.690
analogous to the component tag.

00:42:02.740 --> 00:42:04.900
We're very original here at WebObjects.

00:42:04.900 --> 00:42:05.860
OK.

00:42:05.980 --> 00:42:08.130
We have the action name,
and that's the name of the direct

00:42:08.130 --> 00:42:09.270
action that you would invoke.

00:42:09.400 --> 00:42:10.900
You have an optional class name.

00:42:10.900 --> 00:42:13.690
I mean, if you're familiar with the
way direct actions are invoked,

00:42:13.690 --> 00:42:17.300
you can, you know, you can say,
I want to invoke this

00:42:17.300 --> 00:42:18.860
action on this class.

00:42:18.960 --> 00:42:19.850
You can do this here.

00:42:19.900 --> 00:42:23.900
If you don't specify an action,
it uses the default action of the class.

00:42:23.900 --> 00:42:28.470
If you specify an action but no class,
it uses the default class,

00:42:28.470 --> 00:42:30.360
direct action class.

00:42:30.910 --> 00:42:32.740
The others are the same,
body content only.

00:42:32.740 --> 00:42:34.160
It's the same as the WO component.

00:42:34.370 --> 00:42:38.600
Merge response headers,
the same as the WO component code.

00:42:40.500 --> 00:42:42.840
The extra header tag,
sub tag that you can

00:42:42.920 --> 00:42:46.520
use with direct actions,
same.

00:42:46.530 --> 00:42:49.320
Form value is similar, but of course,
because direct actions

00:42:49.320 --> 00:42:52.300
don't have component values,
we allow you to pass these.

00:42:52.300 --> 00:42:54.310
They basically,
you take the key and the value and

00:42:54.310 --> 00:42:57.890
then we merge it into the query string
and pass that on to the direct action,

00:42:57.890 --> 00:42:59.980
so you can do whatever you want with it.

00:43:01.180 --> 00:43:04.380
And so, of course,
the requisite code example.

00:43:04.650 --> 00:43:07.690
This is a little bit bigger,
a little bit less code.

00:43:08.280 --> 00:43:11.360
Yeah, so I have my action.

00:43:11.360 --> 00:43:12.690
I can tell it.

00:43:12.780 --> 00:43:16.030
My action, this will get invoked on the
default direct action class,

00:43:16.060 --> 00:43:17.970
and it'll return everything.

00:43:17.970 --> 00:43:20.370
That's actually the default anyway.

00:43:20.440 --> 00:43:22.790
You have form value keys and pass them,
and again,

00:43:22.800 --> 00:43:24.680
they'll get folded into the query string.

00:43:24.930 --> 00:43:27.250
Query string gets passed,
and then it gets chopped up.

00:43:27.350 --> 00:43:31.110
The whole WebObjects engine goes to work,
has a nice day.

00:43:33.000 --> 00:43:37.990
So, now that we've talked about JSPs,
what else can we talk about?

00:43:38.080 --> 00:43:39.390
Servlet copy jars.

00:43:39.520 --> 00:43:41.500
Yes, once again,
we're back to this annoying variable

00:43:41.500 --> 00:43:44.320
that I keep mentioning and don't explain.

00:43:44.430 --> 00:43:47.770
We're talking about the ability
to directly reference a WebObjects

00:43:47.780 --> 00:43:52.390
class from inside of a JSP or
Servlet without using the tag libs.

00:43:52.490 --> 00:43:55.350
You can also use it in
conjunction with the tag libs.

00:43:55.460 --> 00:43:58.120
An easy example, for instance,
is may--say I want to

00:43:58.120 --> 00:43:59.650
have a woe repetition.

00:43:59.770 --> 00:44:01.910
Well, you may be thinking,
but that's funny.

00:44:01.950 --> 00:44:03.790
Woe repetitions don't take vectors.

00:44:03.790 --> 00:44:06.130
Woe repetitions take NSArrays.

00:44:06.130 --> 00:44:10.480
If you need to pass an
NSArray to the woe repetition,

00:44:10.480 --> 00:44:13.360
you need to do it using this.

00:44:13.520 --> 00:44:13.820
OK.

00:44:13.820 --> 00:44:15.940
Or you could do it inside of
a bean or something like that.

00:44:16.040 --> 00:44:19.290
But for now, that's the idea.

00:44:19.370 --> 00:44:22.450
The only important thing about this
is that you have to make sure that the

00:44:22.450 --> 00:44:25.820
WebObjects stack is initialized first,
unless you're guaranteed

00:44:25.820 --> 00:44:29.600
that somebody either hit your
application as a Servlet or-- Yeah.

00:44:29.600 --> 00:44:32.280
Or invoked a tag lib earlier.

00:44:32.390 --> 00:44:35.390
Obviously, you know,
in the Servlet adapter

00:44:35.510 --> 00:44:38.250
and in the tag lib code,
we initialize the WebObjects stack

00:44:38.430 --> 00:44:40.100
for you if it hasn't been already.

00:44:40.200 --> 00:44:42.810
But in case that hasn't happened,
you need to init it,

00:44:42.870 --> 00:44:44.440
and that's the line to do it.

00:44:44.460 --> 00:44:45.600
OK.

00:44:45.600 --> 00:44:47.580
It's pretty cheap,
so if you're uncertain, if there's like,

00:44:47.640 --> 00:44:49.580
you know,
four or five pages where you're thinking,

00:44:49.580 --> 00:44:52.800
oh, somebody could hit the page,
you know, any one of these pages first,

00:44:52.860 --> 00:44:54.810
feel free to put it on all of them.

00:44:54.890 --> 00:44:58.560
It's not very expensive once
it's actually been initialized.

00:45:00.160 --> 00:45:03.700
And for instance,
this is some direct references code.

00:45:03.700 --> 00:45:07.470
So I had a WO, a WO, custom WO component,
my WO rep component,

00:45:07.470 --> 00:45:10.820
which is basically has a WO repetition
that spits out some interesting

00:45:10.820 --> 00:45:14.060
information about each EO in the array.

00:45:14.060 --> 00:45:17.460
So I init the statics,
create a fetch specification,

00:45:17.510 --> 00:45:22.090
which I'm not going to sing about,
grab the editing context, get an array,

00:45:22.090 --> 00:45:27.670
pass it in,
everything's hunky dory and spanky good.

00:45:27.740 --> 00:45:29.790
I don't know where that came from.

00:45:31.130 --> 00:45:33.730
Okay, so we have,
we're just going to give a quick,

00:45:33.940 --> 00:45:34.820
for a quick example.

00:45:34.840 --> 00:45:36.630
So this is the welcomeJSP class.

00:45:36.770 --> 00:45:39.030
You can take a look at it.

00:45:39.120 --> 00:45:42.010
And the JSP's not terribly complicated.

00:45:42.010 --> 00:45:46.000
We only have a single component, hello,
and it doesn't really take any bindings.

00:45:46.020 --> 00:45:46.620
See?

00:45:47.090 --> 00:45:49.200
Really, it doesn't take any bindings.

00:45:49.200 --> 00:45:51.580
So when we run the application
and we take a look at it,

00:45:51.580 --> 00:45:59.570
it looks pretty simple.

00:45:59.570 --> 00:45:59.570
Dum dum da dum dum dum dum dum.

00:46:08.130 --> 00:46:10.740
Hello.

00:46:10.810 --> 00:46:11.730
OK.

00:46:11.840 --> 00:46:14.740
So let's look at something a
little bit more complicated.

00:46:14.850 --> 00:46:21.020
And the next one we're going
to look at is the dining well.

00:46:21.140 --> 00:46:23.320
And this is basically an
example of using two components.

00:46:23.420 --> 00:46:26.200
We use the hello world component,
or the hello component

00:46:26.200 --> 00:46:28.610
that we used before,
and we have a favorite food component

00:46:28.760 --> 00:46:31.020
that takes a couple of windings.

00:46:31.150 --> 00:46:34.040
We also strip body content out of it.

00:46:34.160 --> 00:46:37.190
So let's take a look at the component,
or the favorite food

00:46:37.190 --> 00:46:38.120
component real quick.

00:46:40.200 --> 00:46:42.540
: Yeah, it doesn't hurt.

00:46:42.670 --> 00:46:44.730
Yeah, so it's your basic component.

00:46:44.880 --> 00:46:45.920
It takes two bindings.

00:46:46.020 --> 00:46:47.230
Everybody's happy.

00:46:47.310 --> 00:46:49.640
And you can see,
because Megan jumped the gun on me,

00:46:49.640 --> 00:46:50.360
it works.

00:46:50.470 --> 00:46:52.990
Worf's favorite food is actually gach.

00:46:52.990 --> 00:46:54.830
That's French, isn't it?

00:46:54.960 --> 00:46:56.240
Oh, sorry.

00:46:56.320 --> 00:46:57.240
Okay.

00:46:57.240 --> 00:47:00.350
So now let's take a look
at direct action code.

00:47:00.810 --> 00:47:03.360
The direct action code is pretty similar.

00:47:03.360 --> 00:47:04.720
It's pretty easy.

00:47:04.830 --> 00:47:06.040
We're being very explicit about it.

00:47:06.040 --> 00:47:08.830
We're invoking the login action
on the direct action class.

00:47:08.850 --> 00:47:15.800
We could have actually omitted
the direct action call,

00:47:15.800 --> 00:47:15.800
but again, you know,
it never hurts to be sure and safe.

00:47:16.080 --> 00:47:19.680
So we pass in two form values,
visitor name and favorite food.

00:47:19.870 --> 00:47:22.000
Let's take a look at the code.

00:47:22.010 --> 00:47:23.000
Oh, sorry.

00:47:23.000 --> 00:47:23.360
Wait, wait.

00:47:23.440 --> 00:47:24.960
Don't make it go away yet.

00:47:25.040 --> 00:47:26.200
We can do this in a different order.

00:47:26.200 --> 00:47:27.900
Is that okay?

00:47:27.900 --> 00:47:27.900
All right.

00:47:28.960 --> 00:47:29.890
Too late.

00:47:29.920 --> 00:47:31.810
No, it's back.

00:47:31.930 --> 00:47:32.500
You're teasing me.

00:47:32.500 --> 00:47:33.580
Stop it.

00:47:33.650 --> 00:47:34.350
OK.

00:47:34.510 --> 00:47:37.380
So we have the favorite food, you know,
we have the food inquiry component.

00:47:37.550 --> 00:47:39.090
You have a visitor name
and a favorite food.

00:47:39.140 --> 00:47:40.330
It's very simple.

00:47:40.390 --> 00:47:42.190
It's your basic hello world thing.

00:47:42.210 --> 00:47:44.460
You take some input,
you spit it back out.

00:47:44.540 --> 00:47:45.400
Those are just woe strings.

00:47:45.400 --> 00:47:47.840
Let's take a look at the direct action.

00:47:48.570 --> 00:47:49.990
Really big direct action.

00:47:50.000 --> 00:47:51.480
You can see the log in action.

00:47:51.580 --> 00:47:53.230
All we do is we grab the form values.

00:47:53.320 --> 00:47:55.340
We don't have to, I mean,
this should look very simple.

00:47:55.420 --> 00:47:59.920
Grab the form values,
stuff them into the, the result page,

00:47:59.920 --> 00:48:01.940
and return the result page.

00:48:02.000 --> 00:48:02.460
And there we are.

00:48:02.460 --> 00:48:04.290
So let's try it.

00:48:10.000 --> 00:48:13.700
If you haven't noticed, actually,
because of the fact that the

00:48:13.700 --> 00:48:18.700
JSPs are set to compile to Servlets,
and Tomcat is set to do this

00:48:18.860 --> 00:48:21.990
the first time a JSP is hit,
the first time you hit the JSP,

00:48:22.140 --> 00:48:23.240
it'll be a little bit slow.

00:48:23.240 --> 00:48:26.380
You can actually set most containers
so that it'll precompile all the

00:48:26.380 --> 00:48:28.540
JSPs for a particular context.

00:48:28.580 --> 00:48:29.800
Almost got you.

00:48:29.930 --> 00:48:32.910
For a particular context
right at startup.

00:48:33.630 --> 00:48:34.170
All right.

00:48:34.190 --> 00:48:36.440
Pooh's favorite food is honey.

00:48:36.440 --> 00:48:37.490
My favorite food is honey.

00:48:37.500 --> 00:48:38.250
That's good.

00:48:38.250 --> 00:48:39.500
I'm Pooh.

00:48:39.640 --> 00:48:40.340
All right.

00:48:40.410 --> 00:48:42.500
And finally--

00:48:44.390 --> 00:48:45.540
Do I not look like a teddy bear?

00:48:50.430 --> 00:48:52.180
The Chinese poo.

00:48:52.180 --> 00:48:53.400
It works.

00:48:53.490 --> 00:48:53.740
All right.

00:48:53.960 --> 00:48:56.100
So this is the direct references code.

00:48:56.110 --> 00:48:57.280
This is a little bit simpler.

00:48:57.310 --> 00:49:01.100
We init the statics,
and then what we do is just create

00:49:01.100 --> 00:49:02.660
an NSMutable array of strings.

00:49:02.680 --> 00:49:05.100
We just create an NSMutable array,
add some strings,

00:49:05.100 --> 00:49:07.060
and then we just pass it to a component.

00:49:07.060 --> 00:49:08.050
OK.

00:49:08.070 --> 00:49:08.930
Finish.

00:49:08.950 --> 00:49:10.100
Yeah.

00:49:10.100 --> 00:49:10.840
Music genres.

00:49:10.980 --> 00:49:12.950
So scroll down a bit.

00:49:14.130 --> 00:49:15.770
I think you can see we
just passed in the genres.

00:49:15.830 --> 00:49:17.890
And then, you know,
you saw where we had to import com

00:49:18.340 --> 00:49:21.010
WebObjects scroll all the way to the top.

00:49:21.880 --> 00:49:23.860
And it's really Java code, right?

00:49:23.970 --> 00:49:27.700
Import com WebObjects Foundation,
import com WebObjects JSP Servlet.

00:49:27.720 --> 00:49:29.300
We do all this nice stuff.

00:49:29.420 --> 00:49:33.360
Again, this isn't really a tutorial
on how to write good JSP pages,

00:49:33.360 --> 00:49:36.320
because honestly we would prefer
you to write WebObjects pages.

00:49:36.430 --> 00:49:40.060
But if you were doing this in JSP,
you would probably spit this out

00:49:40.060 --> 00:49:42.220
into a bean or something somewhere.

00:49:42.310 --> 00:49:43.590
And let's run it.

00:49:43.690 --> 00:49:45.200
And does it work?

00:49:45.220 --> 00:49:46.880
Boy, do I hope so.

00:49:51.910 --> 00:49:52.440
It worked.

00:49:52.710 --> 00:49:53.740
Yay!

00:49:54.080 --> 00:49:58.350
Okay, so that was our demo of using JSP,
Direct Actions,

00:49:58.490 --> 00:50:02.240
and Direct References with the
WebObjects application in a

00:50:02.240 --> 00:50:05.200
Servlet container on Thursday.

00:50:05.340 --> 00:50:07.030
Thank you, Megan.

00:50:11.600 --> 00:50:12.470
All right.

00:50:12.670 --> 00:50:13.000
Demo.

00:50:13.000 --> 00:50:15.600
Let's talk about where we're going.

00:50:15.600 --> 00:50:17.920
We, you know,
we obviously know that there

00:50:17.920 --> 00:50:20.280
are some shortfalls in the
way that we're doing this.

00:50:20.280 --> 00:50:24.850
And the biggest shortfall, of course,
is the need to install WebObjects on the

00:50:24.910 --> 00:50:27.600
server that has the servlet container.

00:50:27.710 --> 00:50:31.980
So what we're trying to do for a future
version of WebObjects is something called

00:50:32.070 --> 00:50:33.670
servlet single directory deployment.

00:50:33.830 --> 00:50:37.350
This is a very complicated name,
and basically what it means is we have,

00:50:37.350 --> 00:50:42.940
instead of a war file and then
a WebObjects installation,

00:50:42.940 --> 00:50:45.920
we have a single directory,
a single folder that has

00:50:45.950 --> 00:50:47.590
everything inside of it.

00:50:47.740 --> 00:50:49.390
It'll be totally stand-alone.

00:50:49.520 --> 00:50:54.030
All you need to do is take that one
folder and deploy it in your servlet

00:50:54.090 --> 00:50:56.440
container and all will be happy.

00:50:56.680 --> 00:50:56.930
OK.

00:50:57.360 --> 00:50:58.900
You won't need to set system properties.

00:50:58.900 --> 00:51:01.230
You don't need to modify the
WebXML to change those wo root,

00:51:01.380 --> 00:51:04.880
local root, wo install root,
or anything else like that.

00:51:04.880 --> 00:51:05.870
It's completely self-contained.

00:51:05.940 --> 00:51:07.930
You can take this folder,
you can move it from app

00:51:08.010 --> 00:51:10.940
server to app server,
platform to platform.

00:51:11.000 --> 00:51:16.410
Now,
the caveat is that this works on most,

00:51:16.540 --> 00:51:18.520
but not all, servlet containers.

00:51:18.520 --> 00:51:22.250
This is one of those areas
where the spec is a little bit,

00:51:22.250 --> 00:51:22.250
you know,

00:51:22.480 --> 00:51:25.390
Weasley, I mean,
most containers will let you do it.

00:51:25.660 --> 00:51:28.020
There are a couple that have
some bugs because it's not,

00:51:28.030 --> 00:51:30.500
you know, it's not amazingly common.

00:51:30.600 --> 00:51:32.630
But so far it seems to work pretty well.

00:51:32.690 --> 00:51:36.440
We've tried it with Tomcat
on various settings,

00:51:36.440 --> 00:51:40.860
and we've tried it with the new
WebLogic and some other apps,

00:51:40.860 --> 00:51:44.600
some other servers,
and it seems to work okay.

00:51:44.710 --> 00:51:47.900
It's controlled by a new build setting,
or makefile variable.

00:51:48.020 --> 00:51:51.200
Servlet singled or deploy,
and it's not complicated.

00:51:51.200 --> 00:51:57.700
You say yes or no,
and it just does the thing.

00:51:58.790 --> 00:52:02.000
And we have come to the
end of my presentation.

00:52:02.230 --> 00:52:06.220
I hope you've enjoyed listening
to me talk and babble for

00:52:06.220 --> 00:52:10.030
almost an hour now about JSPs,
Servlets, and WebObjects.

00:52:10.150 --> 00:52:15.410
And we're hoping that you can
use this to go out and really,

00:52:15.410 --> 00:52:18.750
you know, put WebObjects in places
where you want to use it,

00:52:18.750 --> 00:52:20.910
where it's going to make you money,
where it's going to

00:52:20.960 --> 00:52:23.840
make other people money,
and at the same time you can make

00:52:23.840 --> 00:52:26.020
all the pointy-haired people happy.

00:52:26.100 --> 00:52:31.770
So, thank you very much for attending,
and we're on to the end slides.

00:52:40.940 --> 00:52:42.790
Sorry, the ending was weak.

00:52:42.920 --> 00:52:44.750
Anyway, so the WebObjects beta.

00:52:44.840 --> 00:52:48.710
Just in case you haven't heard it before,
Appleseed.apple.com/webobjects.

00:52:48.780 --> 00:52:51.460
It's also a good anime in case
any of you haven't seen it.

00:52:51.500 --> 00:52:52.750
Appleseed, very good.

00:52:52.830 --> 00:52:53.700
OK.

00:52:53.770 --> 00:52:56.850
The WebObjects lab has a lot
of times which are in the past.

00:52:56.900 --> 00:52:59.690
And it's--well, it's true.

00:52:59.860 --> 00:53:01.100
And it's still open today.

00:53:01.100 --> 00:53:02.760
It'll be open tomorrow.

00:53:02.910 --> 00:53:04.370
I suggest you can go down there.

00:53:04.370 --> 00:53:07.440
There's at least one machine down
there that has Tomcat installed,

00:53:07.450 --> 00:53:11.040
and we may be able to demo this for you
if you're interested in looking at it.

00:53:11.040 --> 00:53:13.520
And, you know, you can always chat.

00:53:13.710 --> 00:53:16.890
I think I'll be down there from,
you know, about

00:53:17.340 --> 00:53:19.090
5 to 6 or something like that today.

00:53:19.200 --> 00:53:22.390
So if you have any additional questions
or you want to see if something works,

00:53:22.390 --> 00:53:24.170
come ask me.

00:53:24.740 --> 00:53:26.200
The roadmap.

00:53:26.260 --> 00:53:27.560
EJB is gone.

00:53:27.790 --> 00:53:29.430
It's totally passe.

00:53:29.450 --> 00:53:31.300
It was this morning.

00:53:31.420 --> 00:53:33.800
And deploying WebObjects
applications was really cool,

00:53:33.800 --> 00:53:34.360
but it's done.

00:53:34.360 --> 00:53:35.000
It's deployed.

00:53:35.090 --> 00:53:36.600
We're talking about a
different thing now.

00:53:36.680 --> 00:53:40.140
And finally, the only chance you have,
the feedback forum.

00:53:40.140 --> 00:53:41.600
That's pretty much it.

00:53:41.740 --> 00:53:43.750
So, go to the feedback forum.

00:53:43.750 --> 00:53:47.280
Tell them that you want to
be able to run WebObjects on

00:53:47.280 --> 00:53:49.360
your Palm Pilot or whatever.

00:53:49.360 --> 00:53:50.960
OK, please, don't.

00:53:50.960 --> 00:53:54.550
Because I'll probably have to do it,
and I don't.

00:53:55.320 --> 00:53:56.240
So who do you talk to?

00:53:56.490 --> 00:53:58.360
Tony Trujillo.

00:53:58.470 --> 00:53:59.600
She's the director.

00:53:59.680 --> 00:54:02.240
You can reach her at
WebObjects@apple.com.

00:54:02.320 --> 00:54:04.740
There's also Bob Fraser,
who apparently from the email address

00:54:04.740 --> 00:54:07.970
is actually Tony Trujillo in disguise,
because she's also at

00:54:07.980 --> 00:54:09.500
WebObjects@apple.com.

00:54:09.500 --> 00:54:12.220
It's very interesting that I've
never seen the two of them in

00:54:12.220 --> 00:54:13.820
the same place at the same time.

00:54:15.870 --> 00:54:18.300
In case you're having trouble, of course,
you know we offer our standard training,

00:54:18.300 --> 00:54:19.040
support consulting.

00:54:19.040 --> 00:54:19.890
It's right there.

00:54:19.970 --> 00:54:21.400
It's an NSRA printed out.

00:54:21.550 --> 00:54:24.190
Apple Professional Services,
and we have this nice phone

00:54:24.190 --> 00:54:26.700
number and services at apple.com,
blah, blah, blah.

00:54:26.810 --> 00:54:27.620
It's good for you.

00:54:27.620 --> 00:54:29.040
You should try it sometime.

00:54:29.290 --> 00:54:31.350
For more information,
I'm not even going to try to

00:54:31.350 --> 00:54:33.340
read all of these URLs to you.

00:54:33.580 --> 00:54:36.440
You can either copy them down,
or I'm sure there's,

00:54:36.490 --> 00:54:39.220
isn't there some sort of, like,
one URL that you can go to that

00:54:39.220 --> 00:54:41.740
has all of these things on it,
like a single page with everything?

00:54:41.740 --> 00:54:42.740
Right.

00:54:42.740 --> 00:54:43.530
Find that page.

00:54:43.530 --> 00:54:45.450
It's the one page to-- It's true.

00:54:45.590 --> 00:54:46.960
It's the one page to rule them all.

00:54:46.960 --> 00:54:48.790
You hit that,
you get all of these end slides.

00:54:48.860 --> 00:54:50.270
You won't have to worry
about a dang thing.

00:54:50.380 --> 00:54:53.800
You won't be sitting here like, oh, wait,
what was that URL?

00:54:53.870 --> 00:54:55.190
But you're good now.

00:54:55.250 --> 00:54:55.980
It's fine.

00:54:55.980 --> 00:54:56.780
I'm calm.

00:54:57.360 --> 00:55:00.660
This is the documentation plug.

00:55:00.790 --> 00:55:02.860
We were working on the
presentations and the documentation

00:55:02.860 --> 00:55:03.940
guy came running up to me.

00:55:03.940 --> 00:55:05.250
He's like,
"You have to plug the documentation.

00:55:05.260 --> 00:55:08.420
It's so good." And I said, "Yeah,
it's good, so let's plug it." All right.

00:55:08.640 --> 00:55:09.770
This is the documentation.

00:55:09.970 --> 00:55:11.930
Isn't it a nice picture?

00:55:11.970 --> 00:55:14.990
It's developing applications using
Java server pages and servlets.

00:55:15.180 --> 00:55:19.680
It pretty much just walks through
the entire presentation that I did.

00:55:19.680 --> 00:55:22.580
You know, it walks you through creating
that last application that

00:55:22.580 --> 00:55:25.530
I showed you where you build,
you know, a couple of JSP components

00:55:25.570 --> 00:55:26.940
and the WebObjects stuff.

00:55:26.940 --> 00:55:29.800
It's actually quite well written,
so it's worth looking into.

00:55:29.910 --> 00:55:31.870
And of course, the basic discovering
WebObjects for HTML,

00:55:31.920 --> 00:55:35.300
which you can actually get a free copy
of because they're sitting over there.

00:55:35.360 --> 00:55:38.030
They're also going to be
down in the lab later,

00:55:38.030 --> 00:55:41.260
and probably at the feedback forum.

00:55:41.690 --> 00:55:42.590
It's a good book.

00:55:42.590 --> 00:55:45.690
It's a nice beginner book,
sort of a get to know

00:55:45.690 --> 00:55:47.600
WebObjects sort of thing,
and we're giving them out.

00:55:47.600 --> 00:55:48.510
So take one.

00:55:48.880 --> 00:55:50.500
Give it to your friends.

00:55:50.620 --> 00:55:53.700
Hang it up in your car or something
so that people walk by and say,

00:55:53.840 --> 00:55:55.900
what is Discovering WebObjects for HTML?

00:55:55.900 --> 00:55:57.820
And you can, you know,
hand it to them and say,

00:55:57.880 --> 00:56:00.720
it's this wonderful application
server that Apple has that will

00:56:00.720 --> 00:56:02.590
make you tons and tons of money.

00:56:02.690 --> 00:56:05.740
And then they look at you and say,
but I train parakeets.

00:56:05.830 --> 00:56:09.820
And, you know, you say, well,
you could do it over the Web.

00:56:09.820 --> 00:56:09.820
It's

00:56:10.070 --> 00:56:10.800
All right.

00:56:10.890 --> 00:56:14.180
The best way to access documentation,
the most up to date is always the

00:56:14.180 --> 00:56:17.240
PDF and the HTML on the website,
because Apple has control of that,

00:56:17.240 --> 00:56:20.850
and they can't really, you know, like,
telnet into your machine

00:56:20.850 --> 00:56:22.650
and fix your documentation.

00:56:22.760 --> 00:56:24.000
Actually, we could.

00:56:24.160 --> 00:56:27.920
Oh,
I wasn't supposed to say that on stage.

00:56:28.000 --> 00:56:28.500
I'm just kidding.

00:56:28.530 --> 00:56:29.000
All right.

00:56:29.000 --> 00:56:31.410
So, you know, all the standard stuff.

00:56:31.410 --> 00:56:33.000
You can hard copy print on demand.

00:56:33.000 --> 00:56:33.840
It's on the CD.

00:56:34.150 --> 00:56:37.000
You did buy the CD, right?

00:56:37.070 --> 00:56:39.000
No piracy here.

00:56:39.030 --> 00:56:40.970
We're all very good developers.

00:56:42.740 --> 00:56:43.360
And it's in the box.

00:56:43.530 --> 00:56:45.490
The nice thing about the box, of course,
is it's localized.

00:56:45.560 --> 00:56:46.360
Everybody's happy.

00:56:46.430 --> 00:56:47.540
And then, you know, ADC.

00:56:47.580 --> 00:56:48.330
Check up on it.

00:56:49.120 --> 00:56:50.280
You can sign up for free.

00:56:50.480 --> 00:56:52.620
You know, if anybody asks,
you can sign up for ADC for free,

00:56:52.620 --> 00:56:54.460
and I believe you can
get a free download,

00:56:54.500 --> 00:56:56.460
a trial download at 5.1, right?

00:56:56.570 --> 00:56:56.880
Yeah.

00:56:57.290 --> 00:56:58.690
And it doesn't cost anything, right?

00:56:58.830 --> 00:57:03.770
So if you're interested in this stuff,
go to ADC, sign on as a free developer,

00:57:04.130 --> 00:57:05.080
download the demo.

00:57:05.080 --> 00:57:05.830
It's a trial.

00:57:05.930 --> 00:57:09.100
It lasts until, like,
the end of June or June, end of June.

00:57:09.100 --> 00:57:10.130
And play with it.

00:57:10.390 --> 00:57:11.310
Tell your friends about it.

00:57:11.410 --> 00:57:12.090
Do whatever.

00:57:12.090 --> 00:57:14.100
I mean,
you can download the trial for free.

00:57:14.100 --> 00:57:16.140
We're giving out the intro book for free.

00:57:16.320 --> 00:57:16.810
Have a blast.