WEBVTT

00:00:05.270 --> 00:00:07.210
Very happy to introduce Dave Neumann.

00:00:08.150 --> 00:00:14.100
Dave Neumann: All right, thank you.

00:00:14.310 --> 00:00:18.000
Okay, this year,
like I've given this a few times,

00:00:18.570 --> 00:00:22.280
this time I've got a
demonstration program,

00:00:22.430 --> 00:00:26.860
but unlike last year where the program
was monolithic and everything was in

00:00:26.870 --> 00:00:30.100
there because I wanted you to look in
the program to see how I was doing stuff,

00:00:30.100 --> 00:00:33.870
this year I've got a separate framework
that has just about all the main

00:00:34.070 --> 00:00:35.900
security stuff pulled out of it.

00:00:36.160 --> 00:00:40.390
It's really well documented
and set up with a lot of other

00:00:40.390 --> 00:00:44.960
goodies that hopefully make
it production-quality code,

00:00:45.140 --> 00:00:47.100
so something you can really
bite your teeth into.

00:00:47.170 --> 00:00:49.080
But I also designed it to be extensible.

00:00:49.100 --> 00:00:50.700
This talk,
I'm going to go over some points,

00:00:50.700 --> 00:00:53.840
kind of like how you might do stuff,
but I'm also going to maybe spend

00:00:53.970 --> 00:00:57.210
a little more time on what I did
inside this particular framework to

00:00:57.210 --> 00:00:59.090
address some of these kinds of issues.

00:00:59.100 --> 00:01:00.090
But this is the first
part of the session.

00:01:00.100 --> 00:01:04.100
This is the basic stuff I'm going to be
covering in terms of the granularity,

00:01:04.100 --> 00:01:07.980
privacy, resource protection,
authentication, and persistent data

00:01:07.980 --> 00:01:11.090
integrity and access control.

00:01:11.260 --> 00:01:15.930
One new thing on access control,
last year I also talked about

00:01:16.020 --> 00:01:18.100
row-level access control.

00:01:18.100 --> 00:01:23.170
This will be talking also about
attribute-level access control on an EO.

00:01:24.300 --> 00:01:28.950
So, getting straight to the SSL stuff,
this is a kind of review,

00:01:28.950 --> 00:01:32.440
but let me go over it just quick
for those who are new to this thing.

00:01:32.440 --> 00:01:37.190
WebObjects generates these partial URLs,
and we do that for a reason.

00:01:37.190 --> 00:01:40.070
So we don't hard code URLs to a
particular deployment piece of

00:01:40.120 --> 00:01:41.900
information like your web server.

00:01:41.990 --> 00:01:45.030
But if you need SSL and you want to
guarantee that it's SSL on a page,

00:01:45.050 --> 00:01:46.440
you need this absolute URL.

00:01:46.440 --> 00:01:52.400
You need to generate HTTPS,
and sometimes that can be cumbersome.

00:01:52.400 --> 00:02:00.610
So let me kind of show you
one of these unexciting demos.

00:02:00.610 --> 00:02:00.610
And

00:02:00.870 --> 00:02:04.890
I've come down here to
this little test page,

00:02:04.890 --> 00:02:09.290
and I've got a secure
hyperlink in a secure form.

00:02:09.790 --> 00:02:13.160
Now, at the very bottom here,
it says HTTP,

00:02:13.230 --> 00:02:18.240
but the link itself says HTTPS,
even though I'm coming in over HTTP.

00:02:18.450 --> 00:02:22.110
That's not a big deal,
so let me just show you the...

00:02:22.400 --> 00:02:49.200
[Transcript missing]

00:02:52.300 --> 00:02:54.800
All right, so this is a secure form.

00:02:54.870 --> 00:02:57.200
Normally I don't just go throw in
an implementation on the screen,

00:02:57.200 --> 00:03:00.220
but since this one's so short,
I want to put it up here,

00:03:00.220 --> 00:03:02.250
mainly just to give you an idea
of something that you can do

00:03:02.250 --> 00:03:04.660
you might not realize you can
do with just regular components.

00:03:04.660 --> 00:03:07.460
So this is the source code,
but before I look at that,

00:03:07.460 --> 00:03:09.630
let's show you the template for this.

00:03:09.630 --> 00:03:12.750
Not much going on, just a form,
this element,

00:03:12.750 --> 00:03:15.080
and that content in the middle.

00:03:16.100 --> 00:03:19.810
And the declaration file for this
is also pretty straightforward,

00:03:19.900 --> 00:03:22.290
but there's that binding in
there called InvokeAction,

00:03:22.290 --> 00:03:25.650
and it's taking whatever action
was passed into this component.

00:03:26.000 --> 00:03:29.640
And the action is being set to href.

00:03:29.670 --> 00:03:33.260
So this actually is how you can actually
separate out the thing that gets invoked

00:03:33.300 --> 00:03:35.660
from the URL that represents that thing.

00:03:35.660 --> 00:03:37.660
Not many people realize you
can do that with a component.

00:03:37.660 --> 00:03:44.650
Okay, and since I can split that
information out in the secure form,

00:03:45.100 --> 00:03:48.590
The href I create,
instead of just the default href,

00:03:48.620 --> 00:03:52.920
which would have just been this
context component action URL,

00:03:52.920 --> 00:03:57.310
I'm taking that and I'm just
appending HTTPS plus a host name,

00:03:57.320 --> 00:03:59.800
which I get as a binding passed in.

00:03:59.840 --> 00:04:02.000
The same thing happens with hyperlink.

00:04:02.000 --> 00:04:03.000
OK.

00:04:03.000 --> 00:04:06.760
So, OK, enough of that.

00:04:06.780 --> 00:04:11.170
Back to the slides.

00:04:14.100 --> 00:04:17.920
Thank you.

00:04:17.920 --> 00:04:20.690
Now having gone through all that,
I actually think a better way to

00:04:20.690 --> 00:04:23.220
do SSL is through redirection.

00:04:23.220 --> 00:04:26.540
The strategy that I talked
about previously is you

00:04:26.540 --> 00:04:30.050
determine some page privacy,
and if a page decides

00:04:30.050 --> 00:04:33.300
it should be private,
it performs a redirection.

00:04:33.300 --> 00:04:36.820
I've also seen a lot of different
implementations of this where when people

00:04:36.820 --> 00:04:39.600
did that they had these side effects
because they generated the page twice,

00:04:39.630 --> 00:04:44.200
or they invoked the action twice.

00:04:44.200 --> 00:04:46.370
What I mean by that,
this redirection technique,

00:04:46.380 --> 00:04:50.800
is they came in over HTTP,
and the naive way to do this is

00:04:50.890 --> 00:04:55.020
just take a look at the URL that's
in the current world request and

00:04:55.120 --> 00:04:59.060
just throw back a redirect page
and set that URL of the redirect to

00:04:59.060 --> 00:05:01.610
the exact same URL you came in on.

00:05:01.780 --> 00:05:06.440
What I do in the framework is
if you come in over HTTP and the

00:05:06.750 --> 00:05:10.260
page decides it should be private,
you're going to have to do a redirection.

00:05:10.380 --> 00:05:12.640
It redirects you not to
the action it came in,

00:05:12.640 --> 00:05:17.020
but to a special direct
action called SSL return.

00:05:17.030 --> 00:05:24.000
That action goes and recovers the page
and then tells it to render itself.

00:05:24.040 --> 00:05:27.840
The page never even renders,
and the action that called it will

00:05:27.840 --> 00:05:32.730
never get invoked twice with the
setup in the framework I've got.

00:05:33.110 --> 00:05:36.270
There's a lot of other
ways you can do it,

00:05:39.240 --> 00:05:42.990
Now, I don't have any silver
bullets for detecting SSL.

00:05:43.130 --> 00:05:46.620
I basically do this kind of
algorithm inside the framework.

00:05:46.720 --> 00:05:48.990
I look for certain headers,
certain things at a port.

00:05:48.990 --> 00:05:52.040
But a given deployment's going to
have a different way of doing this.

00:05:52.140 --> 00:05:56.190
So I've basically set it up so
in the framework you can specify

00:05:56.190 --> 00:06:00.830
and override how it's doing it,
and augment this with maybe your own

00:06:00.830 --> 00:06:03.660
custom thing specific to your site.

00:06:03.660 --> 00:06:05.150
Maybe you don't have any headers.

00:06:05.240 --> 00:06:08.560
Maybe you run SSL on a certain port,
or maybe you do have certain headers.

00:06:08.740 --> 00:06:08.900
Whatever.

00:06:09.430 --> 00:06:11.560
However you get it,
that's sort of factored

00:06:11.760 --> 00:06:13.070
out from the rest of it.

00:06:16.940 --> 00:06:19.830
So back over to this box.

00:06:20.020 --> 00:06:22.120
Thanks.

00:06:22.590 --> 00:06:22.760
All right.

00:06:22.830 --> 00:06:25.260
Now, just show it in action here.

00:06:25.260 --> 00:06:30.790
This page right now is
currently over HTTP,

00:06:30.850 --> 00:06:35.260
and I want to go to the login page.

00:06:35.260 --> 00:06:35.260
OK.

00:06:35.260 --> 00:06:35.260
So

00:06:35.440 --> 00:06:38.560
The link that took me to
that page was an HTTP link,

00:06:38.560 --> 00:06:43.030
but when the page rendered,
you see I'm under a secure request.

00:06:43.030 --> 00:06:46.560
Now you can kind of get into
a philosophical argument.

00:06:46.620 --> 00:06:48.870
I could have just come into
this page over HTTP or HTTPS,

00:06:48.880 --> 00:06:51.230
might not matter,
and I might make this form

00:06:51.230 --> 00:06:54.490
in here a secure form,
using that widget I just showed you a

00:06:54.540 --> 00:06:58.970
minute ago where the URL embedded in the
form is an absolute URL with HTTPS on it,

00:06:58.980 --> 00:07:02.680
and that would guarantee that the
stuff in these text fields would

00:07:02.760 --> 00:07:04.970
get sent to the server securely.

00:07:05.590 --> 00:07:07.790
But the user isn't convinced of that.

00:07:07.870 --> 00:07:10.140
The user doesn't know he's in SSL.

00:07:10.140 --> 00:07:13.900
So I would argue that you would always
want to use a redirect technique.

00:07:13.900 --> 00:07:16.700
So if you weren't in HTTP already,
you'd want to make sure you

00:07:16.700 --> 00:07:19.440
were in HTTP just for the
user's own feedback purpose.

00:07:19.440 --> 00:07:22.020
So they would look at the
browser and they'd go,

00:07:22.020 --> 00:07:24.580
yeah, I see the little key,
I see the blue bar,

00:07:24.580 --> 00:07:28.560
I see HTTPS in the URL, I'm comfortable,
I'm about to put my credit card or

00:07:28.560 --> 00:07:30.810
my credentials in over a secure link.

00:07:30.880 --> 00:07:35.290
So the way this gets set up in
this particular application.

00:07:35.400 --> 00:07:36.560
Thank you.

00:07:38.120 --> 00:07:42.150
In the SecureStore,
which by the way is a full-blown,

00:07:42.150 --> 00:07:47.050
lightweight commerce application,
so it's more than just a demo.

00:07:47.060 --> 00:07:49.880
I tried to actually be kind
of thorough in most things,

00:07:49.880 --> 00:07:53.680
use some best practices where I could,
so it would be not just a toy.

00:07:53.680 --> 00:07:57.640
But up here in this configuration file,
this policy config file,

00:07:57.640 --> 00:07:59.530
there's this section here.

00:08:01.460 --> 00:08:03.630
And up there is the
policy that I established.

00:08:03.640 --> 00:08:05.710
Should deny all pages not in SSL mode.

00:08:05.710 --> 00:08:07.520
And right now it's set to no.

00:08:07.520 --> 00:08:10.720
And then all the pages to deny,
not in SSL mode.

00:08:10.720 --> 00:08:14.810
So my login page, checkout page,
account edit page, account sign-up page,

00:08:14.810 --> 00:08:18.360
those four guys will not render
unless you come in over secure.

00:08:18.360 --> 00:08:21.950
And another flip down here,
these settings,

00:08:21.950 --> 00:08:26.390
should redirect to SSL URL,
SSL web server host name.

00:08:26.400 --> 00:08:30.960
Those are the guys that tell you,
should I just show an access denied page,

00:08:31.020 --> 00:08:31.410
or should I actually show
an access denied page?

00:08:31.470 --> 00:08:35.060
And then I can actually attempt to get
them to HTTPS by that redirect technique.

00:08:35.180 --> 00:08:40.060
So the pages on the application here,
in the application,

00:08:40.210 --> 00:08:43.320
are oblivious to all this goings on.

00:08:43.580 --> 00:08:46.370
They just have been configured that way.

00:08:46.540 --> 00:08:50.880
But there is an API on the pages so
that if you implement certain methods,

00:08:50.880 --> 00:08:55.030
if you're not happy with the
granularity of having stuff in a list,

00:08:55.090 --> 00:08:58.970
you can implement some methods in your
pages that can make that determination

00:08:58.970 --> 00:09:01.010
whether things should be over SSL or not.

00:09:01.510 --> 00:09:05.670
So, that's that.

00:09:05.680 --> 00:09:08.110
Back to these.

00:09:12.400 --> 00:09:14.410
Okay.

00:09:14.460 --> 00:09:16.910
If you're using SSL to begin with,
the odds of someone hijacking

00:09:17.010 --> 00:09:19.400
your session are actually
pretty remote because someone

00:09:19.400 --> 00:09:20.750
has to be over your shoulder.

00:09:20.820 --> 00:09:24.460
I was talking to someone right at
the beginning of this talk about how

00:09:24.460 --> 00:09:28.600
unlikely it would be to have someone not
notice them writing down your session

00:09:28.720 --> 00:09:33.040
ID onto a piece of paper behind them
and then going off to another machine.

00:09:33.940 --> 00:09:37.630
Although these days,
since digital cameras are so small,

00:09:37.630 --> 00:09:40.890
actually it isn't entirely
impossible for someone to come

00:09:40.890 --> 00:09:43.730
behind you and snap a picture,
and if that session ID is

00:09:43.730 --> 00:09:46.380
anywhere on the system,
they could in fact go to some

00:09:46.380 --> 00:09:48.120
other box and pretend to be you.

00:09:48.120 --> 00:09:50.650
There's various ways to handle this.

00:09:50.650 --> 00:09:56.440
The way I handle it in the framework,
and it's turned on... Can I have

00:09:56.810 --> 00:09:58.960
the demo machine again?

00:09:58.960 --> 00:09:59.760
Sorry.

00:10:02.510 --> 00:10:03.800
Thanks.

00:10:04.420 --> 00:10:10.580
The way I do it in this application
is I've got a flag down here,

00:10:10.580 --> 00:10:13.720
"Should enable session
hijacking protection."

00:10:13.930 --> 00:10:15.630
And actually,
I'm kind of competing with the

00:10:15.790 --> 00:10:19.620
API to have the longest key
name in the configuration file.

00:10:19.620 --> 00:10:25.580
Right now, I've got it set to yes,
which means on every request,

00:10:25.580 --> 00:10:27.780
it checks for this cookie.

00:10:27.780 --> 00:10:30.440
And that cookie is only emitted
if you successfully log in.

00:10:30.450 --> 00:10:33.580
If you successfully log into the system,
it emits this thing.

00:10:33.580 --> 00:10:37.570
And even though cookies can be spoofed
and IP addresses can be spoofed,

00:10:37.570 --> 00:10:41.560
it just makes it a little bit harder
for someone to grab that session ID,

00:10:41.690 --> 00:10:45.310
go to some other machine,
and get in and pretend to be you

00:10:45.310 --> 00:10:47.270
without having to authenticate.

00:10:47.380 --> 00:10:50.710
So that's it for that.

00:10:50.820 --> 00:10:52.870
So back to...

00:10:58.440 --> 00:11:00.190
Okay, so protecting world resources.

00:11:00.340 --> 00:11:03.480
These are like the most important...
What are world resources?

00:11:03.590 --> 00:11:05.760
They're your pages, your direct actions.

00:11:05.760 --> 00:11:07.270
That's the kind of stuff I mean by that.

00:11:07.700 --> 00:11:09.270
And...

00:11:09.710 --> 00:11:10.600
Whoa.

00:11:10.600 --> 00:11:12.160
Oh, OK.

00:11:12.340 --> 00:11:14.600
Someone--that's a resource to protect.

00:11:14.640 --> 00:11:15.610
OK.

00:11:16.240 --> 00:11:19.960
OK, I don't--my wife must
have got into my slides,

00:11:19.960 --> 00:11:19.960
so...

00:11:24.100 --> 00:11:26.100
Okay, sorry about that.

00:11:26.100 --> 00:11:33.440
See, I did get my kids in my slides.

00:11:33.440 --> 00:11:33.440
Okay.

00:11:35.310 --> 00:11:39.720
So in addition to those resources,
if you're protecting pages,

00:11:39.720 --> 00:11:43.540
you want to override append to response.

00:11:43.540 --> 00:11:47.560
And if you're protecting page creation,
you'd override page with name.

00:11:47.750 --> 00:11:52.450
And if you're protecting--let me zip
right ahead here--to direct actions,

00:11:52.450 --> 00:11:55.540
you'd override perform action name.

00:11:55.540 --> 00:11:58.780
Go back to page generation.

00:11:59.000 --> 00:12:00.860
I guess there's some caveats
to the pluses and minuses

00:12:00.860 --> 00:12:01.910
of doing this sort of thing.

00:12:02.040 --> 00:12:07.970
The way the example framework works,
it takes care of page generation

00:12:08.100 --> 00:12:11.990
protection and direct action protection.

00:12:12.390 --> 00:12:16.300
What do I mean by that?

00:12:16.300 --> 00:12:18.250
This could get more elaborate
than what I did in the framework.

00:12:18.310 --> 00:12:20.120
I tried to make it extensible
to do other things,

00:12:20.200 --> 00:12:22.800
but essentially I noticed
there's two types of situations.

00:12:22.800 --> 00:12:26.300
There's pages you view in an
unauthenticated mode and the pages

00:12:26.300 --> 00:12:28.700
you viewed after you've logged in.

00:12:28.850 --> 00:12:33.970
In a very similar situation with the SSL,
it'd be nice if you could say,

00:12:34.050 --> 00:12:35.610
"These pages are okay to see.

00:12:35.610 --> 00:12:37.980
These direct actions are okay to invoke.

00:12:38.020 --> 00:12:40.840
But if anyone tries to invoke
this direct action or somehow

00:12:40.970 --> 00:12:44.570
tries to get to this page,
they don't have access."

00:12:48.950 --> 00:12:52.700
Let me go through the pros and cons here.

00:12:52.700 --> 00:12:56.600
When I first did something like this,
the way I did this type of protection

00:12:56.600 --> 00:12:59.900
is I overrode page with name,
page creation protection.

00:13:00.060 --> 00:13:05.790
And that has one plus in that you don't
invoke the constructor of the page.

00:13:06.000 --> 00:13:09.250
So if you had a lot of stuff,
code executing the constructor

00:13:09.250 --> 00:13:12.620
of the page that was secure,
you didn't want people executing

00:13:12.620 --> 00:13:15.850
it unless they were authenticated
to execute that code,

00:13:15.860 --> 00:13:18.370
then it's sort of nice.

00:13:18.480 --> 00:13:27.930
But I moved quickly to page generation
protection because it's kind of nice

00:13:27.930 --> 00:13:32.200
to actually let the page get created,
just write them in such a way

00:13:32.200 --> 00:13:34.700
that you don't do anything
sensitive in the constructor.

00:13:34.700 --> 00:13:37.140
And then you've got this thing
with some intelligence that

00:13:37.320 --> 00:13:38.700
you can actually ask questions.

00:13:38.700 --> 00:13:42.260
You can ask it, should I show you,
or should I hide you,

00:13:42.260 --> 00:13:44.900
or should you be in SSL, and whatnot.

00:13:44.900 --> 00:13:49.180
Also, if you override page with
name on the application,

00:13:49.180 --> 00:13:52.880
and you've got code that's
expecting to get the foobar page,

00:13:52.880 --> 00:13:56.040
and you don't hand that page back,
you hand back the error page,

00:13:56.040 --> 00:13:58.590
then you're going to get
class cast exceptions,

00:13:58.660 --> 00:14:02.380
you're going to get keys that
aren't in the thing that's returned.

00:14:02.380 --> 00:14:03.830
You could be breaking code.

00:14:03.880 --> 00:14:08.150
So with page generation protection,
the page you ask for is the page you get.

00:14:08.150 --> 00:14:09.700
It just doesn't render.

00:14:09.700 --> 00:14:13.900
And I don't just render the page,
scroll it away in the session.

00:14:14.500 --> 00:14:16.570
And then throw it back later.

00:14:16.620 --> 00:14:19.420
The way the framework works,
it never calls super append response,

00:14:19.560 --> 00:14:24.380
so nothing on that page renders
unless you're authenticated to do so.

00:14:28.100 --> 00:14:31.960
For direct action protection,
I do just go on the name,

00:14:32.230 --> 00:14:34.480
just the name of the direct action.

00:14:34.540 --> 00:14:39.140
So if someone tries to access
foo/bar or direct action class

00:14:39.140 --> 00:14:42.860
name/something like that,
in my abstract class

00:14:42.860 --> 00:14:45.620
I override perform action name.

00:14:45.680 --> 00:14:48.710
If they're not authenticated,
invoke that direct action.

00:14:48.950 --> 00:14:52.860
I route them to a login response.

00:14:53.490 --> 00:14:55.900
Actually, something about the...
I'm going to forget this.

00:14:55.980 --> 00:14:57.200
I'm just going to say it now.

00:14:57.200 --> 00:14:59.490
In the frameworks,
the way I constructed this stuff,

00:14:59.560 --> 00:15:00.810
I do have these abstract classes.

00:15:00.900 --> 00:15:03.500
I have an abstract direct action class,
an abstract component,

00:15:03.500 --> 00:15:05.340
an abstract application.

00:15:05.360 --> 00:15:10.840
But you don't have to use
my abstract superclasses.

00:15:10.840 --> 00:15:14.120
I set it up so you could have
interfaces for all this stuff.

00:15:14.480 --> 00:15:19.150
And I've got all the security meat
for this type of stuff factored out

00:15:19.150 --> 00:15:24.480
into a policy object so that if you
have some existing stack of classes,

00:15:24.580 --> 00:15:29.290
you can just implement my interface and
call this policy object and basically

00:15:29.290 --> 00:15:33.000
glom this framework onto yours with
just a bunch of one-liner methods.

00:15:33.020 --> 00:15:38.060
That's something a little
tough to show like this,

00:15:38.250 --> 00:15:41.940
but it might be interesting for
anyone who wants to come by afterward.

00:15:46.780 --> 00:15:48.860
Now this isn't really, I guess,
a security issue,

00:15:48.860 --> 00:15:51.840
but how many times have you had
situations where the user pushes

00:15:51.840 --> 00:15:55.200
a button two or three times,
or they backtrack to something,

00:15:55.200 --> 00:15:58.550
and you just don't want that thing
to happen more than one time?

00:15:58.550 --> 00:16:01.230
It makes sense for them to do it once,
but it doesn't make sense

00:16:01.230 --> 00:16:04.050
for them to do it twice,
especially if they're only authenticated

00:16:04.170 --> 00:16:06.010
and maybe performed some action once.

00:16:07.300 --> 00:16:11.240
So, not in the framework,
but in the example app,

00:16:11.630 --> 00:16:13.960
there's some code here for
detecting backtracking.

00:16:13.960 --> 00:16:20.400
Actually, maybe a better way to get this
code is to go to Project Wonder,

00:16:20.460 --> 00:16:22.090
and they actually have a...

00:16:22.590 --> 00:16:27.580
some classes which took from stuff
like this and have an implementation

00:16:27.580 --> 00:16:32.840
that detect backtracking,
and then your page can basically

00:16:32.970 --> 00:16:36.440
do its own thing based on that.

00:16:36.440 --> 00:16:39.330
The thing that I do in the example
app and that you might consider

00:16:39.330 --> 00:16:42.660
doing is that if someone backtracks,
you overwrite invoke action on that

00:16:42.660 --> 00:16:47.580
page and if you don't call super and
instead just return context page or null,

00:16:47.610 --> 00:16:49.970
the action does not invoke.

00:16:50.650 --> 00:16:51.570
Nothing happens.

00:16:51.650 --> 00:16:55.160
It's just that something benign happens.

00:16:55.170 --> 00:16:57.260
The page just refreshes.

00:16:57.260 --> 00:17:00.310
What I also do on the
pages where this happens,

00:17:00.560 --> 00:17:03.190
I put up a little message that says,
"Please do not backtrack

00:17:03.190 --> 00:17:04.650
within the checkout assistant."

00:17:16.790 --> 00:17:21.270
So about the resource protection piece,
this section in the configuration

00:17:21.270 --> 00:17:23.860
file has the security posture.

00:17:23.880 --> 00:17:25.420
It should deny all actions.

00:17:25.710 --> 00:17:27.830
Right now that's set to no.

00:17:27.920 --> 00:17:31.560
So it's only going to deny
these three direct actions:

00:17:31.600 --> 00:17:36.600
the sign-in action,
the one-click checkout, and edit account.

00:17:36.600 --> 00:17:40.940
had most of the pages been secure and
there were just exceptions the other way,

00:17:40.950 --> 00:17:43.870
you can flip that to a yes and
then just have actions to allow.

00:17:44.160 --> 00:17:47.340
On should deny all pages,
that's set to no as well,

00:17:47.340 --> 00:17:48.590
and you can see the pages to deny.

00:17:48.590 --> 00:17:55.670
I'm demanding authentication
on the checkout page,

00:17:55.670 --> 00:17:55.670
the person browser page,
and account edit page, and some others.

00:17:59.790 --> 00:18:08.650
Okay, so let me just browse around
here and add some products.

00:18:09.300 --> 00:18:09.900
Checkout.

00:18:09.900 --> 00:18:11.100
Okay.

00:18:11.100 --> 00:18:14.660
I'm not logged in, so... Log in.

00:18:18.520 --> 00:18:21.400
Now I am logged in,
and I'm in Shipping Info,

00:18:21.400 --> 00:18:25.500
so let me actually cancel out of this,
and mouse around someplace else.

00:18:25.500 --> 00:18:27.290
And then it said, "Okay, yeah,
I'm ready to check out

00:18:27.300 --> 00:18:32.120
now." And then I check out,
and no authentication gets demanded.

00:18:32.130 --> 00:18:36.650
Again, the pages don't know anything
about the login panel.

00:18:36.650 --> 00:18:39.780
All they know is that the name of
this page happened to be dropped

00:18:39.870 --> 00:18:42.000
in a configuration file somewhere,
and that's what set that up.

00:18:42.000 --> 00:18:45.160
A lot of apps

00:18:45.350 --> 00:18:48.260
I tried to make it, you know, where the,
your code doesn't even

00:18:48.260 --> 00:18:49.900
have to know about it.

00:18:49.900 --> 00:18:53.930
So anyway, let's kind of go through
this checkout process.

00:18:56.850 --> 00:18:57.670
I tried to backtrack.

00:18:57.670 --> 00:18:58.660
I knew that.

00:18:58.700 --> 00:19:01.640
It didn't actually backtrack
to that other page.

00:19:01.640 --> 00:19:04.940
It just refreshed the checkout
page and gave that to me.

00:19:04.940 --> 00:19:08.000
So I'll just complete the purchase.

00:19:08.000 --> 00:19:10.180
There's my number.

00:19:10.180 --> 00:19:16.320
If I go to my account,
I've got the order right down there.

00:19:16.420 --> 00:19:18.400
That's that little deal.

00:19:18.400 --> 00:19:20.470
Moving along.

00:19:33.400 --> 00:19:40.740
What I kind of demoed a little
bit was FrontGate and OnDemand.

00:19:40.740 --> 00:19:44.060
In commerce applications,
you kind of want the OnDemand thing.

00:19:44.060 --> 00:19:47.100
You don't want to actually
ask for credentials unless

00:19:47.100 --> 00:19:48.960
it's absolutely necessary.

00:19:48.960 --> 00:19:54.650
Logging in explicitly, checking out,
viewing your account.

00:19:56.240 --> 00:19:58.430
But in some applications,
you've got to have the login.

00:19:58.520 --> 00:20:00.540
No matter what they do,
they've got to be authenticated.

00:20:00.550 --> 00:20:03.610
But even in that case,
it's still nice to have something like

00:20:03.710 --> 00:20:05.980
this framework to protect direct action.

00:20:05.990 --> 00:20:09.580
They always have to log in, but...

00:20:09.750 --> 00:20:12.740
They can bookmark stuff
deep inside the application,

00:20:12.740 --> 00:20:14.760
and they can go back to it later.

00:20:14.760 --> 00:20:17.610
They can email it to their buddy
or their friend or their coworker,

00:20:17.740 --> 00:20:20.310
and they don't have to go all the
way to the front and follow some big,

00:20:20.310 --> 00:20:21.550
long procedure to dial in.

00:20:21.550 --> 00:20:24.600
And they have to do all that
just because of authentication.

00:20:24.600 --> 00:20:27.310
It's kind of nice to have
something that'll just say,

00:20:27.310 --> 00:20:31.040
okay, these actions are protected,
and if you're not logged in, boom,

00:20:31.040 --> 00:20:32.180
you'll be prompted.

00:20:32.190 --> 00:20:35.000
Otherwise,
you don't have to re-navigate again.

00:20:39.930 --> 00:20:40.840
Okay, I think I've covered that.

00:20:40.890 --> 00:20:45.610
Okay, and I went ahead and
took care of that one,

00:20:45.670 --> 00:20:45.860
too.

00:20:45.890 --> 00:20:50.900
So, moving off to this
authentication methods.

00:20:51.010 --> 00:20:52.750
There's a lot of different
ways to gather credentials.

00:20:53.260 --> 00:20:57.400
HTML page, the HTTP panel,
client certificates.

00:20:57.400 --> 00:21:01.270
The framework is set up
to support all of these.

00:21:01.270 --> 00:21:01.270
So,

00:21:01.640 --> 00:21:03.350
Except biometric.

00:21:03.350 --> 00:21:08.340
I don't have a,
I don't ship you a little, you know,

00:21:08.340 --> 00:21:08.340
thumb reader.

00:21:09.000 --> 00:21:14.270
The most complex one actually
turned out to be this one.

00:21:14.760 --> 00:21:18.790
I think if you've got a web app,
I'm really not sure why you'd need this,

00:21:18.840 --> 00:21:19.590
except for one reason.

00:21:19.600 --> 00:21:23.430
The very last bullet there can
provide element of single sign-on

00:21:23.450 --> 00:21:25.600
for a static site and HTML pages.

00:21:25.600 --> 00:21:26.180
That's true.

00:21:26.180 --> 00:21:27.700
Some people are just required.

00:21:27.700 --> 00:21:28.320
They have no choice.

00:21:28.410 --> 00:21:30.270
They have to use this panel
because that was a requirement.

00:21:30.320 --> 00:21:33.700
So if you do, then it's available.

00:21:33.700 --> 00:21:37.700
But the ultimate is really
client-side certificates.

00:21:37.700 --> 00:21:42.350
If you have an opportunity to use these,
it's pretty nice because

00:21:42.350 --> 00:21:44.700
passwords don't go anywhere.

00:21:44.700 --> 00:21:48.500
You don't, as a server vendor,
have to store passwords in your database,

00:21:48.550 --> 00:21:49.700
or hashes, I should say.

00:21:49.700 --> 00:21:54.070
The only thing going in the clear is
the results of cryptographic operations,

00:21:54.080 --> 00:21:58.100
and the only password or passphrase
that's ever introduced to the system

00:21:58.100 --> 00:22:02.700
is the one that goes straight into the
user certificate right on the browser.

00:22:02.700 --> 00:22:03.690
It never leaves the system.

00:22:03.700 --> 00:22:04.700
It never leaves their desktop.

00:22:04.700 --> 00:22:07.760
So it's really nice,
and I think this sort of thing

00:22:07.760 --> 00:22:09.700
is much more prevalent in
Europe than it is in the States,

00:22:09.700 --> 00:22:14.700
but maybe sooner or later more people
will use this kind of thing here.

00:22:15.360 --> 00:22:20.840
This stuff is a little
different than passwords.

00:22:20.860 --> 00:22:24.950
In a password,
you present these credentials and then

00:22:25.100 --> 00:22:26.890
you get proved who you are on the server.

00:22:27.110 --> 00:22:30.090
But in this particular case,
the whole SSL protocol

00:22:30.090 --> 00:22:31.300
just proves it for you.

00:22:31.300 --> 00:22:35.280
The login just happens,
and you don't even see it happening.

00:22:35.590 --> 00:22:38.270
You either have access or you don't.

00:22:38.410 --> 00:22:42.680
Now this other thing here,
I left up here because I wanted

00:22:42.930 --> 00:22:46.540
to stress that a year ago,
you had a lot of work to do to

00:22:46.580 --> 00:22:50.240
get a web server running with
SSL and Apache on Mac OS X.

00:22:50.360 --> 00:22:53.550
Well now Mac OS X Server,
which I have running on this laptop,

00:22:53.550 --> 00:22:54.530
makes it easy.

00:22:54.540 --> 00:22:57.650
It's already out of the box,
ready to support SSL.

00:22:57.650 --> 00:23:01.630
All I had to do was get some
certificates from certificate authority.

00:23:01.630 --> 00:23:04.200
In this case, I went to Thought's website
and got some test certificates.

00:23:04.240 --> 00:23:06.410
I didn't have to do anything
with the WebObjects adapter.

00:23:06.500 --> 00:23:12.210
They just worked in both the secure
and regular version of Apache.

00:23:12.870 --> 00:23:15.800
And also, another really cool thing
is that the Microsoft,

00:23:15.880 --> 00:23:18.340
the Apache, the Netscape,
the CGI adapters,

00:23:18.340 --> 00:23:21.830
all those adapters do the right thing,
and getting the certificate,

00:23:21.860 --> 00:23:25.010
asking for it using API and
the web server to get it from

00:23:25.010 --> 00:23:26.800
the web server and pass it.

00:23:26.800 --> 00:23:30.370
So a lot of things I had to talk
about last year and code examples

00:23:30.370 --> 00:23:33.460
I had to give last year are totally
irrelevant now because it just

00:23:33.460 --> 00:23:35.100
works the way it's supposed to.

00:23:37.210 --> 00:23:38.850
Okay.

00:23:38.960 --> 00:23:44.180
Now, in the module,
the certificate authentication

00:23:44.240 --> 00:23:46.410
module that's in the framework,

00:23:46.550 --> 00:23:50.000
I do set it up so that the
certificate gets all the way to you.

00:23:50.000 --> 00:23:53.160
It doesn't just live in the web server,
but I set it up so the web server can

00:23:53.170 --> 00:23:55.150
get it all the way to the application.

00:23:55.230 --> 00:23:58.360
In the application,
I have a hook that basically passes

00:23:58.360 --> 00:24:01.050
the Sun's X.509 certificate in it.

00:24:01.200 --> 00:24:03.000
It's not even the deprecated Sun API.

00:24:03.000 --> 00:24:05.030
It's all the brand new APIs.

00:24:05.120 --> 00:24:07.440
No more deprecation warnings.

00:24:07.680 --> 00:24:12.990
You can do with that certificate
whatever you need to do.

00:24:13.280 --> 00:24:16.180
You might not need to do anything,
but what you probably should

00:24:16.210 --> 00:24:19.430
do is consult your company's
certificate revocation list or go to

00:24:19.430 --> 00:24:21.330
a validation authority to check it.

00:24:21.930 --> 00:24:25.090
The more people actually use
this as an authentication method,

00:24:25.090 --> 00:24:26.440
the more important this will be.

00:24:26.850 --> 00:24:31.500
But since a lot of people don't,
I'll just move along.

00:24:33.130 --> 00:24:34.340
Recording login failures.

00:24:34.340 --> 00:24:40.310
I guess this can be a lot
more elaborate than just,

00:24:40.690 --> 00:24:42.040
did someone try to login and fail?

00:24:42.040 --> 00:24:44.260
There's all kinds of things
which might indicate someone is

00:24:44.260 --> 00:24:45.700
trying to compromise your system.

00:24:45.700 --> 00:24:53.320
But the demo application talks about
just doing it relevant to login.

00:24:53.320 --> 00:24:57.820
In essence, what I'm doing in here is,
every time a failure happens,

00:24:57.820 --> 00:25:00.510
I just write an intrusion
record to the database.

00:25:00.680 --> 00:25:04.310
It's got a date,
it's got a username and an IP address,

00:25:04.680 --> 00:25:08.620
and there's some configurable numbers,
like maximum number of failures by IP and

00:25:08.620 --> 00:25:11.200
maximum number of failures by username.

00:25:12.930 --> 00:25:14.610
Okay, so let me just do that.

00:25:14.870 --> 00:25:18.360
I did something like this last
year and I only had one shot at it,

00:25:18.410 --> 00:25:32.350
so I'm gonna try and see if
it's more forgiving this time.

00:25:32.350 --> 00:25:32.350
Okay, so, sign

00:25:47.560 --> 00:25:51.190
If I kept changing the username,
it would fail after a few more.

00:25:51.270 --> 00:25:55.560
The reason it's important to do both is
you don't want someone going to a whole

00:25:55.690 --> 00:25:59.200
bunch of machines and attacking you,
and you don't want someone

00:25:59.200 --> 00:26:03.050
staying on one machine and trying
a bunch of different usernames.

00:26:03.050 --> 00:26:06.210
So it's important to have
both the IP and the username.

00:26:06.410 --> 00:26:10.510
Although again, people can spoof it,
but hey, we're making it a little bit

00:26:10.510 --> 00:26:12.050
harder for them to get in.

00:26:12.330 --> 00:26:15.560
Actually, while I got this up,
I'd mentioned this thing works with

00:26:15.670 --> 00:26:19.400
I wanted to show you some of the
ways this framework is set up.

00:26:19.620 --> 00:26:24.600
If you want to integrate this
stuff with your application,

00:26:24.630 --> 00:26:26.840
first of all, these are the login
methods right up here.

00:26:26.840 --> 00:26:29.820
There's the HTTP panel login method,
HTML, and certificate.

00:26:29.880 --> 00:26:32.100
There's the abstract class,
so you can slam some

00:26:32.130 --> 00:26:33.450
more in here if you want.

00:26:35.400 --> 00:26:38.980
This is the abstract superclass you
can inherit from for direct actions,

00:26:38.980 --> 00:26:41.800
the abstract component class,
the abstract session.

00:26:41.800 --> 00:26:44.210
But if you don't have
the luxury of doing that,

00:26:44.240 --> 00:26:48.840
you can implement the
interface defined here,

00:26:48.840 --> 00:26:52.130
the direct actions and the component
methods and the session methods.

00:26:52.140 --> 00:26:54.300
It's also got some
cryptographic utilities,

00:26:54.380 --> 00:26:56.000
which I'll get to in a little bit.

00:26:56.060 --> 00:27:01.740
Back to this guy.

00:27:05.950 --> 00:27:09.570
In the demo,
I don't store passwords in the clear.

00:27:09.660 --> 00:27:12.900
I store hashes.

00:27:12.900 --> 00:27:16.330
I don't actually need
to recover the password,

00:27:16.330 --> 00:27:20.220
I just need to compare it
to which one's coming in.

00:27:20.220 --> 00:27:22.790
Whenever an account is created,
the password that's passed in is

00:27:22.830 --> 00:27:24.450
hashed and only the hash is stored.

00:27:24.460 --> 00:27:26.970
If you know what hashes are,
you look in the database,

00:27:26.970 --> 00:27:29.680
you can't recover the
password from the hash.

00:27:29.680 --> 00:27:32.280
It just looks like gibberish.

00:27:32.280 --> 00:27:35.780
When someone authenticates, I pull it.

00:27:35.780 --> 00:27:35.780
I'm

00:27:36.360 --> 00:27:39.560
Pull the hash from the database,
hash their incoming thing,

00:27:39.560 --> 00:27:40.890
and just do a compare.

00:27:40.900 --> 00:27:43.780
But you don't have that luxury with...

00:27:44.110 --> 00:27:46.380
Credit cards.

00:27:46.380 --> 00:27:54.620
You have to--that's a piece of
information that you actually need

00:27:54.620 --> 00:27:54.620
to recover the actual information
in the application to do stuff.

00:27:54.620 --> 00:27:54.620
So if you do store credit cards,
you need to encrypt them.

00:27:54.900 --> 00:27:59.810
And in my case,
I'm using those cryptographic

00:27:59.940 --> 00:28:05.480
utilities to encrypt the credit
cards using a DES triple.

00:28:06.870 --> 00:28:09.170
Let me go straight to this,
because I'd rather show you here what's

00:28:09.240 --> 00:28:11.110
going on than just talking about it.

00:28:22.600 --> 00:28:28.660
Here's the credit card EO.

00:28:28.660 --> 00:28:32.600
This thing right here is some accessor
methods I added for convenience.

00:28:32.600 --> 00:28:34.400
Decrypted CC number,
set decrypted CC number.

00:28:34.400 --> 00:28:35.770
This is the thing that's in the clear.

00:28:36.210 --> 00:28:42.880
Well, it comes in over SSL, but still,
it's a readable number.

00:28:43.100 --> 00:28:45.690
What it does is, if it's non-null,
it uses this utility

00:28:45.810 --> 00:28:48.420
on the CryptoUtilities,
which calls this method here,

00:28:48.420 --> 00:28:52.460
and that's implemented using the
cryptographic extensions on the JRE.

00:28:54.100 --> 00:29:09.500
[Transcript missing]

00:29:09.700 --> 00:29:10.880
So that's probably the next question.

00:29:10.880 --> 00:29:14.560
Okay, you've encrypted all this stuff,
but your key's sitting right there.

00:29:14.560 --> 00:29:17.380
So if I hack this system,
I've got a database of-and

00:29:17.400 --> 00:29:20.040
I hack your database,
and I hack your system,

00:29:20.040 --> 00:29:22.940
I get this list of encrypted
credit card numbers.

00:29:22.940 --> 00:29:25.690
But if I can get access to that,
I can still encrypt it.

00:29:25.840 --> 00:29:29.710
So your kind of point of failure
is this secret key right here.

00:29:32.160 --> 00:29:36.530
So the way the industry has-there's
stuff out there for hiding secret keys.

00:29:36.530 --> 00:29:39.130
You can use these tokens.

00:29:39.130 --> 00:29:41.310
These-Crystallis has one.

00:29:41.670 --> 00:29:43.400
Incypher.

00:29:43.400 --> 00:29:46.510
There's like several of these
things on the market which

00:29:46.980 --> 00:29:51.150
store the key inside some module
which isn't even on your system.

00:29:51.160 --> 00:29:53.840
And they have to be like FIPS, whatever,
compliant.

00:29:53.840 --> 00:29:57.720
You can't even physically open the
things up without destroying them,

00:29:57.740 --> 00:29:58.930
that kind of thing.

00:29:58.940 --> 00:30:00.770
Some are just smart cards.

00:30:02.130 --> 00:30:03.550
The point is,
if you've got it on the system,

00:30:03.550 --> 00:30:05.600
it's not just a file sitting
there you can just pull off.

00:30:05.700 --> 00:30:07.090
If someone hacked into
the system remotely,

00:30:07.090 --> 00:30:09.060
it'd be very, very difficult for
them to get to the key.

00:30:09.060 --> 00:30:17.090
But that leaves us with one other
way of getting at the information.

00:30:17.100 --> 00:30:30.200
[Transcript missing]

00:30:30.890 --> 00:30:33.000
There's almost no way to stop that,
except one way.

00:30:33.090 --> 00:30:35.110
And if you've ever started
up an SSL web server,

00:30:35.130 --> 00:30:37.980
at least the version
of iPlanet on Windows,

00:30:37.980 --> 00:30:41.340
when you start it up,
by default you have to enter a

00:30:41.350 --> 00:30:45.780
passphrase to unlock the secret key
that it's going to use to do SSL.

00:30:45.780 --> 00:30:49.980
And the reason they do that is they don't
want any form of password on the machine.

00:30:49.980 --> 00:30:53.960
So that means if it
dies and it falls over,

00:30:53.960 --> 00:30:53.960
it's going to be a problem.

00:30:54.550 --> 00:30:57.200
You've got to have someone on call
with a pager who's going to be able

00:30:57.240 --> 00:31:00.590
to resurrect the system by providing
credentials to launch a thing.

00:31:00.600 --> 00:31:05.850
I wish I could tell you there
was a better way to do that,

00:31:05.850 --> 00:31:05.850
but...

00:31:06.460 --> 00:31:07.840
Maybe there is.

00:31:07.840 --> 00:31:10.370
Maybe I can do one of those things
where I ask you guys a question,

00:31:10.370 --> 00:31:14.280
but it seems like in the industry,
they just say, hey,

00:31:14.280 --> 00:31:15.540
provide me some credentials.

00:31:15.540 --> 00:31:18.890
You can sometimes do these things
remotely over SSH and whatnot,

00:31:18.890 --> 00:31:20.810
but it's sort of a sticky problem.

00:31:20.820 --> 00:31:24.750
Yeah, thanks.

00:31:29.830 --> 00:31:36.070
Now,
this kind of gets to the meat of things.

00:31:36.360 --> 00:31:39.560
I don't want to spend too much
time on-- I'll review this briefly,

00:31:39.670 --> 00:31:42.460
but I want to kind of dive
into the code examples.

00:31:42.570 --> 00:31:48.170
But this is basically about the degree
of access control after they log in.

00:31:48.420 --> 00:31:51.200
Everything I've talked about so far is,
are you logged in or not?

00:31:51.200 --> 00:31:54.010
And if you're not, what can you see,
what can't you see?

00:31:54.090 --> 00:31:54.840
But now you're logged in.

00:31:54.930 --> 00:31:56.330
We've got a user.

00:31:56.340 --> 00:31:58.820
It's not some anonymous thing.

00:31:59.110 --> 00:32:01.700
We've got a user,
and we've got something you're editing.

00:32:01.700 --> 00:32:01.700
So what do you get to do with it?

00:32:02.440 --> 00:32:06.210
And these are some examples of
some API you might have or stick

00:32:06.290 --> 00:32:10.260
on your EOs that might implement
some of these kinds of rules.

00:32:10.370 --> 00:32:12.170
But what's the implementation?

00:32:12.170 --> 00:32:18.420
What logic goes into deciding whether
you can see or edit something?

00:32:19.000 --> 00:32:25.200
[Transcript missing]

00:32:25.750 --> 00:32:33.910
is in the demo.

00:32:33.910 --> 00:32:33.910
I've written, actually,
my own access control implementations,

00:32:33.910 --> 00:32:33.910
but the one in the demo doesn't
use something like this.

00:32:33.910 --> 00:32:33.910
It uses a

00:32:34.240 --> 00:32:45.690
This session also covers automatic
connection to pages over SSL to

00:32:46.150 --> 00:32:55.210
sites that require privacy,
and access control.

00:32:55.210 --> 00:32:55.210
This session also covers automatic
connection to pages over SSL to

00:32:55.210 --> 00:32:55.210
sites that require privacy,
and access control.

00:32:55.520 --> 00:33:01.450
I'll show that in a second.

00:33:01.450 --> 00:33:01.450
Before I get to that,
let me get to this guy.

00:33:02.550 --> 00:33:03.590
You've made your EO smart.

00:33:03.670 --> 00:33:06.100
Your EOs know whether or not
they can see or edit each other,

00:33:06.140 --> 00:33:10.600
but now you have to somehow
present this in the user interface.

00:33:10.720 --> 00:33:15.040
This is kind of like the password thing
where you start up the SSL web server.

00:33:15.040 --> 00:33:17.940
There's not a slam dunk on this.

00:33:17.940 --> 00:33:19.630
You can make the EOs smart.

00:33:19.640 --> 00:33:25.570
You can make them know whether or not
they can read and write to each other,

00:33:25.620 --> 00:33:30.270
but at some point you need something
to present that information.

00:33:30.270 --> 00:33:30.270
Depending on the

00:33:30.710 --> 00:33:33.790
How fast just your designer people are,
what they dictate or

00:33:33.790 --> 00:33:36.970
what they don't dictate,
it could be a difficult problem.

00:33:37.000 --> 00:33:40.210
You could have just conditionals
sprayed all over the place,

00:33:40.290 --> 00:33:41.910
depending on what's going on.

00:33:41.910 --> 00:33:44.150
But if you could possibly
get away with it,

00:33:44.150 --> 00:33:46.570
it's nice to have a
slightly smart component,

00:33:46.580 --> 00:33:50.380
like a smart text field or a smart string
that sort of has a woe text field or a

00:33:50.500 --> 00:33:54.200
woe string in it that takes a user as
a binding and the other stuff you would

00:33:54.200 --> 00:33:58.270
have just handed to the text field and
just renders itself in a different way,

00:33:58.270 --> 00:34:00.560
depending on what's going on.

00:34:00.600 --> 00:34:01.680
Thank you.

00:34:05.290 --> 00:34:10.010
But sometimes it's even worse than that.

00:34:10.060 --> 00:34:12.300
Sometimes not only do you
have to protect the given EO,

00:34:12.300 --> 00:34:15.140
but even if you have access to
see a certain enterprise object,

00:34:15.380 --> 00:34:18.200
maybe you don't have access
to see certain attributes.

00:34:18.220 --> 00:34:21.470
In the example in the demo app,
what I have in it,

00:34:21.660 --> 00:34:25.640
it shows you an example of
protecting clusters of attributes.

00:34:26.160 --> 00:34:29.220
Basically, on a person,
you get to see the address,

00:34:29.220 --> 00:34:33.670
the first name, and the last name,
but you need to have...

00:34:33.850 --> 00:34:40.590
Access or a- you have to have special
access in order to get to the password

00:34:40.600 --> 00:34:42.920
or username or social security number,
that kind of thing.

00:34:42.920 --> 00:34:47.870
So, let me show that.

00:35:00.570 --> 00:35:03.840
First of all,
let me show you this protected object.

00:35:03.880 --> 00:35:09.140
All the EOs in this particular model
that have access control enabled inherit

00:35:09.240 --> 00:35:12.400
from this My Protected Object EO.

00:35:14.540 --> 00:35:20.600
And here are my primitive-- actually,
the most primitive method

00:35:20.600 --> 00:35:21.380
is this one down here.

00:35:21.380 --> 00:35:24.380
But from the slide,
you saw can read and can't show.

00:35:24.400 --> 00:35:26.000
This has is readable and is writable.

00:35:26.000 --> 00:35:28.640
And a person goes in as an argument.

00:35:28.670 --> 00:35:30.680
Right beneath that is
the more primitive one,

00:35:30.720 --> 00:35:34.920
which takes a user and a
Java Security ACL permission object.

00:35:34.960 --> 00:35:40.290
And what I did was I've actually
got a table in this model

00:35:40.700 --> 00:35:45.700
The, uh, my permission, which is in EO,
it's stored, it doesn't have very

00:35:45.700 --> 00:35:50.180
much in it right now,
uh, just, um, read, write, and upload,

00:35:50.180 --> 00:35:52.480
but you can imagine sticking
other permissions in there,

00:35:52.500 --> 00:35:54.260
okay, all kinds of different permissions.

00:35:56.790 --> 00:36:00.170
Also, there's this MyACL entry,
which has state in it,

00:36:00.390 --> 00:36:04.510
but this particular EO implements
the Java ACL interface,

00:36:04.510 --> 00:36:06.780
security ACL interface.

00:36:10.240 --> 00:36:14.660
and ProtectedObjects does
what it does right here.

00:36:14.660 --> 00:36:18.180
All the meat of this,
all the checking and how it determines

00:36:18.410 --> 00:36:21.670
whether you have access rights or not,
is done right there in that line

00:36:21.690 --> 00:36:24.490
where it asks its ACL implementation
to check a permission.

00:36:24.500 --> 00:36:26.890
And that ACL implementation

00:36:29.010 --> 00:36:46.980
is constructed right here.

00:36:46.980 --> 00:36:46.980
That's a
Java Security ACL permission object.

00:36:46.980 --> 00:36:46.980
I didn't even provide the implementation,
really.

00:36:46.980 --> 00:36:46.980
I just provided these cover methods,
which then called into this thing.

00:36:46.980 --> 00:36:46.980
What does that look like in action?

00:36:58.100 --> 00:37:02.100
Let's go to Products.

00:37:02.100 --> 00:37:02.690
Okay.

00:37:02.760 --> 00:37:05.620
I'm logged in as the administrator,
and he's the current target

00:37:05.800 --> 00:37:09.080
for all these ACL things.

00:37:09.170 --> 00:37:12.180
And of the things that have
been fetched right now,

00:37:12.180 --> 00:37:14.100
what I'm just showing here
for illustration purposes

00:37:14.100 --> 00:37:15.910
is what I can do with it,
and the access control

00:37:15.910 --> 00:37:18.100
list associated with it.

00:37:18.310 --> 00:37:22.090
Unlike the previous version of this,
I've made it a little bit smarter,

00:37:22.140 --> 00:37:25.490
so it doesn't just look at the user.

00:37:26.090 --> 00:37:28.990
In order to figure out if you can read
or write something for a given user,

00:37:29.030 --> 00:37:31.100
it looks at if there's
an ACL for that user,

00:37:31.100 --> 00:37:32.980
but also looks at all
the groups the user has,

00:37:32.990 --> 00:37:34.410
and then figures it out based on that.

00:37:34.480 --> 00:37:37.090
In this particular case, we've got user,
M.

00:37:37.090 --> 00:37:41.340
Neumann can upload, or can't upload,
that's what the negative means.

00:37:41.340 --> 00:37:43.710
Anyone in the contract group can write.

00:37:43.710 --> 00:37:46.210
Anyone in the marketing group can read.

00:37:46.210 --> 00:37:49.690
This person called Poulter, a user,
can read, that first guy.

00:37:50.060 --> 00:37:54.440
Now, since this particular user, admin,
is in the marketing and contractor group,

00:37:54.480 --> 00:37:57.700
that's where I get the read-write from.

00:37:57.700 --> 00:38:02.260
So what if I change that?

00:38:02.320 --> 00:38:09.830
So let's just take out marketing.

00:38:13.300 --> 00:38:21.900
This is a thing right up here,
just a reusable component.

00:38:21.900 --> 00:38:24.420
I just made it purely functional.

00:38:24.420 --> 00:38:25.870
You might create your
own variation on it,

00:38:25.870 --> 00:38:27.030
which looks a little bit prettier.

00:38:27.360 --> 00:38:29.700
It's a generic ACL component.

00:38:29.740 --> 00:38:33.440
I used to edit ACLs
throughout the system.

00:38:33.540 --> 00:38:36.120
Once you've got something like this,
once you're protecting EOs,

00:38:36.230 --> 00:38:38.180
you might want to use
it to protect pages.

00:38:38.180 --> 00:38:39.640
You might do it this way.

00:38:39.640 --> 00:38:43.030
You might have a table
that's pretty simple.

00:38:43.140 --> 00:38:44.960
It's just got page names in it.

00:38:45.200 --> 00:38:50.200
Hanging off of each of those rows in
that table is an array of ACL entries.

00:38:50.250 --> 00:38:54.190
What you can do is you might create a
table in your model using this stuff.

00:38:54.560 --> 00:38:56.720
Everything else is pretty much the same.

00:38:56.720 --> 00:38:59.210
You add that table,
and like product here,

00:38:59.210 --> 00:39:05.520
you add this too-many relationship
to the My ACL Entries table.

00:39:06.000 --> 00:39:06.920
Right here.

00:39:06.920 --> 00:39:07.510
Boom.

00:39:07.510 --> 00:39:12.820
You basically would have some pretty
fancy access control on the pages.

00:39:12.910 --> 00:39:17.140
Essentially what I'm saying,
you could subclass my implementation

00:39:17.260 --> 00:39:21.100
of this access protection stuff,
call the superclass to do all the

00:39:21.290 --> 00:39:23.900
stuff whether you're logged in or not.

00:39:23.900 --> 00:39:26.350
But if you are logged in,
you might go one extra step

00:39:26.350 --> 00:39:27.780
before showing that page.

00:39:28.140 --> 00:39:34.900
You might go and take a look at the user,
because you've got a user now,

00:39:34.900 --> 00:39:37.900
and use this information about the page.

00:39:37.900 --> 00:39:41.090
Get the page and just see,
does this person have, is it readable,

00:39:41.150 --> 00:39:41.890
writable?

00:39:41.900 --> 00:39:44.750
All the logic on my protected
object would still work.

00:39:45.160 --> 00:39:47.900
Basically, you could go throughout
the application and say,

00:39:47.900 --> 00:39:49.900
"Okay, marketing sees these pages.

00:39:49.900 --> 00:39:53.310
These guys get to see these
pages." If you're a marketer,

00:39:53.310 --> 00:39:56.800
but you're also a contractor,
you don't get to see it.

00:39:56.900 --> 00:39:57.900
That kind of stuff.

00:39:57.900 --> 00:40:00.800
You could get down to that granularity.

00:40:01.000 --> 00:40:02.140
And it really would be pretty easy.

00:40:02.140 --> 00:40:03.900
And the pages--the nice
thing is the pages,

00:40:03.900 --> 00:40:05.040
we don't even have to know about it.

00:40:05.040 --> 00:40:08.800
The only thing that would be changed
would be one method inside this policy

00:40:08.840 --> 00:40:13.050
object in order to pull that off,
so.

00:40:18.600 --> 00:40:25.480
I guess one last thing I want to show
on this is the attribute level stuff.

00:40:25.480 --> 00:40:29.470
So, kind of explain my approach there.

00:40:29.730 --> 00:40:32.060
There's these two entities
in the model here,

00:40:32.060 --> 00:40:34.470
attribute entity and attribute cluster.

00:40:34.470 --> 00:40:37.270
And there's a...

00:40:38.660 --> 00:40:41.500
There's a one-to-many between
a cluster and an entry.

00:40:41.500 --> 00:40:45.680
And these entities are, right now,
in a demo, they're islands.

00:40:45.860 --> 00:40:48.720
No other EOs have relationships to them.

00:40:48.720 --> 00:40:53.310
So, my approach to
attribute-level security is,

00:40:53.310 --> 00:40:56.480
here's a cluster of attributes.

00:40:56.500 --> 00:40:59.420
And that's what's represented
by attribute cluster.

00:40:59.420 --> 00:41:04.100
And the cluster is represented by
all the rows in the attribute entity.

00:41:04.970 --> 00:41:08.870
One thing I wanted to get away from
was having to have one of these

00:41:09.020 --> 00:41:10.740
In this session,
we'll be talking about how to

00:41:10.800 --> 00:41:13.480
create a database that allows you to
create all the types of things for

00:41:13.480 --> 00:41:14.870
every single row in the database.

00:41:14.870 --> 00:41:17.210
Most of the time, if you've got a given
entity of something,

00:41:17.300 --> 00:41:19.120
it doesn't matter which
row you're talking about,

00:41:19.220 --> 00:41:21.830
these three things you can't see,
these three things you can't see,

00:41:21.880 --> 00:41:23.670
and that's just it for
every row in the table.

00:41:23.670 --> 00:41:25.300
By default, it works that way.

00:41:29.140 --> 00:41:30.370
You've seen the model.

00:41:30.370 --> 00:41:34.480
Let me go to the application itself
and show you what these things look

00:41:34.480 --> 00:41:36.080
like when they're actually running.

00:41:36.080 --> 00:41:44.070
Back down here to Attributes,
and I'll edit the private attributes.

00:41:45.280 --> 00:41:46.770
I've given it a name.

00:41:46.850 --> 00:41:48.960
That's the entity it's associated with,
in this case, person.

00:41:48.960 --> 00:41:51.260
And these are all the
private attributes on person.

00:41:51.260 --> 00:41:56.550
So what happens if I go to
persons and I try to edit it?

00:41:56.550 --> 00:42:00.940
So I'll try to edit
this fellow named Andy.

00:42:06.300 --> 00:42:14.600
[Transcript missing]

00:42:25.000 --> 00:42:25.590
This is great.

00:42:25.590 --> 00:42:28.960
How come that never happens
when you're practicing?

00:42:28.960 --> 00:42:30.530
That never happened once.

00:42:30.660 --> 00:42:31.240
Okay.

00:42:31.240 --> 00:42:33.430
All right.

00:42:33.450 --> 00:42:35.840
I'll just log in again here.

00:42:49.220 --> 00:42:51.160
Attributes Private.

00:42:51.200 --> 00:42:53.660
Okay.

00:42:53.660 --> 00:42:58.090
And I want to take out one of these.

00:42:59.300 --> 00:43:10.700
[Transcript missing]

00:43:14.280 --> 00:43:19.310
Something's going on that didn't...

00:43:21.100 --> 00:43:23.400
So I'll probably have
to restart the thing.

00:43:23.620 --> 00:43:26.660
But I don't have time for that, so.

00:43:27.670 --> 00:43:33.480
I'll go back to the slides and just
explain what I wanted to show you there.

00:43:35.040 --> 00:43:38.060
One thing I've done in
the Enterprise Objects,

00:43:38.200 --> 00:43:44.980
I have a method on them that
returns all the attribute clusters.

00:43:46.710 --> 00:43:49.300
Right now, it just turns around and gets
all the attribute clusters

00:43:49.300 --> 00:43:51.310
on an entity-by-entity basis.

00:43:51.420 --> 00:43:57.280
But it's set up that you could establish
a relationship from any given EO.

00:43:57.830 --> 00:44:01.910
to this attribute cluster thing
and do this attribute level

00:44:01.910 --> 00:44:04.800
security at a row-by-row basis.

00:44:04.920 --> 00:44:06.450
Now, I'm not sure when that
would be necessary,

00:44:06.450 --> 00:44:08.990
but I've actually had some
customers where this row of

00:44:09.010 --> 00:44:11.990
information for the administrator,
no one could see anything no matter what

00:44:11.990 --> 00:44:14.380
it was unless they had certain rules.

00:44:14.380 --> 00:44:17.040
And then for all these customers,
marketing could see some stuff,

00:44:17.040 --> 00:44:19.160
but some other group couldn't
see this other stuff.

00:44:19.260 --> 00:44:23.000
And then yet for some even more rows,
if there were users in the system,

00:44:23.000 --> 00:44:25.140
the rules were again different.

00:44:25.140 --> 00:44:29.290
So that's what I wanted to show
you with the very last step there,

00:44:29.420 --> 00:44:30.800
but didn't quite get there.

00:44:33.170 --> 00:44:36.230
To sum up this stuff,
I talked about protecting

00:44:36.230 --> 00:44:40.420
privacy through SSL,
some custom components, redirection,

00:44:40.480 --> 00:44:41.400
detection.

00:44:41.550 --> 00:44:46.110
I talked about protecting
resources of various kinds,

00:44:46.200 --> 00:44:48.930
and showed a few kinds of authentication.

00:44:48.940 --> 00:44:53.360
The kind of authentication
I didn't show was certificate,

00:44:53.360 --> 00:44:55.750
but it's in the system.

00:44:57.550 --> 00:45:01.440
As far as persistent data integrity,
we talked about using hashing

00:45:01.510 --> 00:45:06.520
and encryption and actually what
to do with these secret keys on

00:45:06.530 --> 00:45:08.490
your system if you do use them.

00:45:08.500 --> 00:45:11.460
And then access control, ACLs, EOs,
and entities.

00:45:11.460 --> 00:45:16.580
There's actually quite a bit
more code I'd like to show,

00:45:16.790 --> 00:45:20.690
but again, I'm not sure it's best
to show that like this.

00:45:20.690 --> 00:45:23.230
I might have to do it more
interactively with you all.

00:45:23.240 --> 00:45:29.480
The code behind all this isn't
up on any FTP servers now,

00:45:29.480 --> 00:45:33.230
but it should be there, I think,
within a week after the talk.

00:45:38.010 --> 00:45:39.780
These are kind of the places
where you can get some more

00:45:39.780 --> 00:45:41.060
information about this stuff.

00:45:41.120 --> 00:45:43.660
I think this is in the slides
that you'll get copies of,

00:45:43.660 --> 00:45:44.900
so I'll just move along to this.

00:45:44.990 --> 00:45:47.880
And you've seen that
many times this week.

00:45:47.950 --> 00:45:51.620
And you've definitely seen
that many times this week.

00:45:51.650 --> 00:45:54.000
So I want to just get to the Q&A.

00:45:54.000 --> 00:45:55.940
And I think you know about the beta.

00:45:55.940 --> 00:45:59.700
Even if you've been on the beta before,
you've got to get up here

00:45:59.700 --> 00:46:01.190
to get on the new one.

00:46:02.420 --> 00:46:07.060
And I guess there is still
something left in the lab today.

00:46:07.180 --> 00:46:08.060
And I guess that's next.

00:46:08.060 --> 00:46:11.060
That's the very last thing
in the developer conference.

00:46:12.790 --> 00:46:12.920
Okay.

00:46:12.920 --> 00:46:16.960
I think you've seen that stuff before,
Bob and Tony.