WEBVTT

00:00:12.250 --> 00:00:16.910
First of all, if you thought this was the
session about zero configuration,

00:00:16.910 --> 00:00:20.420
it's not,
and nor is it the Sunday flea market.

00:00:20.490 --> 00:00:24.250
The last song is the theme
song for the team that is going

00:00:24.250 --> 00:00:27.080
to be talking to you today,
Burn Baby Burn.

00:00:27.160 --> 00:00:30.880
This is all about disc recording, burning

00:00:31.220 --> 00:00:35.140
Anyway, it's the nicest looking
crew of engineers at Apple.

00:00:35.460 --> 00:00:38.350
Clean cut, nice guys,
all dressed nicely today.

00:00:38.400 --> 00:00:42.520
And they want to talk to you
about the DiscRecording APIs.

00:00:42.520 --> 00:00:45.320
DiscRecording APIs are interesting
to me in my role at Apple,

00:00:45.320 --> 00:00:50.790
primarily because they provide for a very
consistent user experience for users,

00:00:51.040 --> 00:00:54.620
burning CDs and DVDs and
whatever they're doing.

00:00:54.930 --> 00:00:58.400
It's also a really great technology
and they're going to explain how

00:00:58.410 --> 00:01:02.240
you can build in disc recording
capabilities in your application just

00:01:02.300 --> 00:01:04.300
like iTunes has them built into it.

00:01:04.410 --> 00:01:06.820
So I'd like to talk to
you through this stuff.

00:01:06.820 --> 00:01:09.810
I'd like to introduce Drew Thaler.

00:01:18.600 --> 00:01:20.940
Welcome.

00:01:20.970 --> 00:01:24.560
All right, so I'm here to talk to you
about the DiscRecording APIs.

00:01:24.560 --> 00:01:27.080
And my name's Drew Thaler,
and I'm from a group at Apple that

00:01:27.080 --> 00:01:28.860
you might not have heard of before.

00:01:28.860 --> 00:01:30.810
We're called Burning Issues.

00:01:30.920 --> 00:01:35.360
That's because we handle all
the issues to do with burning.

00:01:37.590 --> 00:01:39.460
So today in the session,
we're going to go over a

00:01:39.460 --> 00:01:41.930
little history of burning,
what it used to be like,

00:01:42.030 --> 00:01:43.500
and what it's like today.

00:01:43.550 --> 00:01:45.100
We're going to tell you
about DiscRecording,

00:01:45.100 --> 00:01:48.500
and we're going to go into the
different parts of DiscRecording.

00:01:48.530 --> 00:01:51.890
We're going to have lots of
demos and lots of sample code.

00:01:53.910 --> 00:01:55.310
So let's talk about history.

00:01:55.380 --> 00:02:01.990
Way back a long time ago,
like 1999 or so,

00:02:04.310 --> 00:02:06.400
I'm not that young.

00:02:06.580 --> 00:02:10.930
So burning was only handled by
specialized burning applications.

00:02:10.980 --> 00:02:15.040
You had to--you know,
if you had all your music in one thing,

00:02:15.040 --> 00:02:18.610
you exported it or did something special,
created an image,

00:02:18.670 --> 00:02:23.160
copied things onto a 700-meg hard drive,
did whatever you needed to do,

00:02:23.160 --> 00:02:27.080
and it was all handled by this
specialized burning application.

00:02:27.350 --> 00:02:31.600
All the content creators and the
organizers weren't directly involved.

00:02:31.600 --> 00:02:35.290
And especially as people started
doing a lot more with digital media,

00:02:35.290 --> 00:02:40.290
it kind of got to be a pain because
you just had this one application.

00:02:40.480 --> 00:02:42.150
If it didn't work, then you were stuck.

00:02:42.150 --> 00:02:47.900
It was kind of painful.

00:02:48.400 --> 00:02:50.300
And then something happened.

00:02:50.460 --> 00:02:54.370
Or, well, let's go to this slide instead.

00:02:54.660 --> 00:02:58.870
Let's talk about why burning is so hard.

00:02:59.190 --> 00:03:01.510
The basic answer is it's
just really difficult.

00:03:01.610 --> 00:03:04.740
If you want to add burning
into your application,

00:03:04.780 --> 00:03:07.600
it's several years of work, literally.

00:03:07.600 --> 00:03:11.230
You need a team of people
working for about a year.

00:03:11.460 --> 00:03:16.370
You need to be able to talk to a lot of
different layers of the operating system.

00:03:16.370 --> 00:03:18.780
You really need all
up and down the stack.

00:03:18.780 --> 00:03:20.430
You need your application layer.

00:03:20.590 --> 00:03:23.800
You need to talk, you know, in Mac OS X,
we're talking to I/O Kit,

00:03:23.800 --> 00:03:27.690
we're talking to the kernel,
we're talking to services that

00:03:27.760 --> 00:03:31.700
most people haven't heard of,
such as disk arbitration.

00:03:31.700 --> 00:03:34.480
And then on top of all that,
you have to be able to talk

00:03:34.480 --> 00:03:36.900
directly to the CD drive.

00:03:37.100 --> 00:03:40.460
And a lot of different drives,
if you write applications

00:03:40.530 --> 00:03:43.620
that talk to hardware,
not all hardware behaves

00:03:43.620 --> 00:03:45.100
exactly the same.

00:03:45.210 --> 00:03:49.190
You get some quirks in
between different drives.

00:03:50.910 --> 00:03:52.630
The next thing you have to
do is you have to stream your

00:03:52.630 --> 00:03:55.270
data from beginning to end,
because that's the way CD burning works.

00:03:55.440 --> 00:03:59.310
You start at block zero and you
write all the way to the end.

00:03:59.840 --> 00:04:01.800
- And when you're doing that,
if you're burning, for example,

00:04:01.800 --> 00:04:06.300
a data disk, you're burning a special
cross-platform file system.

00:04:06.300 --> 00:04:10.300
It's not HFS+. You might be
burning HFS+, but you're burning--

00:04:10.420 --> 00:04:12.800
more likely you're burning,
along with HFS+, something

00:04:12.800 --> 00:04:14.060
like ISO and Joliet.

00:04:14.470 --> 00:04:16.530
These are file systems that
aren't designed for random access.

00:04:16.680 --> 00:04:20.220
It's not easy to create them,
and it's especially not easy

00:04:20.220 --> 00:04:23.220
to create them just on the fly.

00:04:23.520 --> 00:04:26.280
In order to do all this stuff,
you have to read thousands and

00:04:26.390 --> 00:04:29.220
thousands of pages of documentation.

00:04:29.690 --> 00:04:33.540
You know, I have a sea of acronyms
up here on the slide.

00:04:33.590 --> 00:04:35.200
There's just all kinds of documentation.

00:04:35.200 --> 00:04:37.280
You have all the different color
books that you have to read.

00:04:37.280 --> 00:04:40.480
You have the red book, the blue book,
the white book, the orange book,

00:04:40.480 --> 00:04:42.710
the yellow book, the other blue book.

00:04:43.380 --> 00:04:45.580
There's just all kinds of stuff
that you have to go through.

00:04:45.650 --> 00:04:48.400
And then, if you really want to
play nice with the system,

00:04:48.480 --> 00:04:50.320
you need to do some kind
of resource arbitration.

00:04:50.480 --> 00:04:54.290
You need one application to talk
nicely with the other application.

00:04:54.370 --> 00:04:58.100
So we have iTunes and the Finder,
and they both do burning.

00:04:58.160 --> 00:05:00.400
And yet, the right thing happens.

00:05:00.450 --> 00:05:02.900
When you're in iTunes and you hit burn,
the Finder doesn't come up and try

00:05:02.900 --> 00:05:05.300
to steal the disc away from you.

00:05:05.330 --> 00:05:09.070
These applications are talking
to each other and working it out

00:05:09.320 --> 00:05:11.710
to find out who gets the disc.

00:05:14.220 --> 00:05:18.380
So that's the way it was in 1999.

00:05:18.380 --> 00:05:20.300
Then something happened.

00:05:20.870 --> 00:05:27.670
January 9, 2001, we introduced iTunes,
iDVD, and DiscBurner all at once.

00:05:27.670 --> 00:05:27.800
It was a huge show.

00:05:27.800 --> 00:05:37.110
And these applications really kind
of brought burning back to the user.

00:05:37.110 --> 00:05:37.110
And so we had a

00:05:38.600 --> 00:05:42.060
What they did is they really
just made burning discs a

00:05:42.080 --> 00:05:44.100
natural part of the workflow.

00:05:44.250 --> 00:05:46.930
Burning discs becomes really natural.

00:05:47.100 --> 00:05:50.500
So the finder is where
you're organizing your files.

00:05:50.760 --> 00:05:54.500
So the finder naturally gains
the ability to burn data discs.

00:05:54.510 --> 00:05:56.480
iTunes is where you're
organizing your music.

00:05:56.500 --> 00:06:00.630
Well, you can make mixes,
you can burn MP3 CDs,

00:06:00.630 --> 00:06:04.500
and all you developers out there
are pretty familiar with disc copy,

00:06:04.500 --> 00:06:08.500
which is how we distribute
seed images and stuff.

00:06:08.600 --> 00:06:12.190
And you can take a CD image,
you can download it using your

00:06:12.200 --> 00:06:16.480
high-speed internet connection,
and create a CD from that.

00:06:16.490 --> 00:06:19.400
And it's all really natural.

00:06:19.750 --> 00:06:23.500
Each application is able to just
burn exactly what it makes sense

00:06:23.500 --> 00:06:23.500
for that application to burn.

00:06:24.500 --> 00:06:26.050
to burn.

00:06:26.720 --> 00:06:27.960
Now I know what you're saying right now.

00:06:27.960 --> 00:06:32.810
You're saying, "Well sure, but you know,
those are all Apple applications

00:06:32.880 --> 00:06:33.620
that I've got up there.

00:06:34.580 --> 00:06:38.760
If I want to take my application
and I want it to burn discs,

00:06:38.780 --> 00:06:40.340
I have to go back here.

00:06:40.360 --> 00:06:43.690
I have to do all this."
Well that's no fun.

00:06:43.890 --> 00:06:49.700
You know, wouldn't you rather,
wouldn't you rather be back up

00:06:49.700 --> 00:06:50.250
here where your application is
integrated into the workflow?

00:06:50.500 --> 00:06:53.970
Well,
so I'm proud to announce DiscRecording,

00:06:53.970 --> 00:06:56.900
which is a new set of APIs for Jaguar.

00:06:56.900 --> 00:07:01.400
And these are the same APIs that iTunes
and the Finder use to do their burning.

00:07:01.610 --> 00:07:05.560
Thank you.

00:07:06.900 --> 00:07:08.500
We're making these public in Jaguar.

00:07:08.750 --> 00:07:11.640
We've really--we've been
working on them really hard.

00:07:11.930 --> 00:07:15.140
Been cleaning them up.

00:07:15.290 --> 00:07:18.600
Let me give--just as a for instance,
let me give you a little bit of example.

00:07:18.600 --> 00:07:20.430
We're, uh...

00:07:21.120 --> 00:07:23.590
You know, it takes, I said,
many years of effort.

00:07:23.700 --> 00:07:26.400
So we had a team of people
working on this for a long time.

00:07:26.440 --> 00:07:28.390
When we went to finally
put it into iTunes,

00:07:28.490 --> 00:07:34.100
it took about four to six weeks for us
to cram burning support into iTunes.

00:07:34.440 --> 00:07:38.050
And we're also doing
DiscBurner at the same time,

00:07:38.050 --> 00:07:38.050
and

00:07:38.910 --> 00:07:41.370
So four to six weeks,
from man years of effort down

00:07:41.370 --> 00:07:44.140
to like four to six weeks,
it was really pretty good,

00:07:44.270 --> 00:07:45.800
but it wasn't good enough.

00:07:45.800 --> 00:07:49.650
So we went and we made it even easier.

00:07:49.880 --> 00:07:52.800
We made it really straightforward,
as simple as we could get it,

00:07:52.800 --> 00:07:56.930
and now literally if some
of you are out there,

00:07:57.010 --> 00:07:59.160
you can probably hop
on the ADC seed site,

00:07:59.160 --> 00:08:01.000
grab the SDK,
and you might be able to get

00:08:01.000 --> 00:08:04.040
burning added to your application
by the end of this session.

00:08:04.040 --> 00:08:08.780
We really think that it's really
about a day to start burning.

00:08:08.800 --> 00:08:12.650
Your basic kinds of discs,
which is really just absolutely amazing.

00:08:14.340 --> 00:08:17.910
So these are the same APIs that
iTunes and the Finder are using.

00:08:18.030 --> 00:08:21.530
We've got two system-level frameworks,
one which is the actual engine,

00:08:21.580 --> 00:08:24.530
which we call DiscRecording,
and we have another which is a common

00:08:24.620 --> 00:08:28.950
set of user interface elements,
which is what we call DiscRecording UI.

00:08:29.170 --> 00:08:32.960
And it's really sort of like printing,
for example.

00:08:32.960 --> 00:08:37.760
It's, you know,
you've got the UI panels for printing,

00:08:37.760 --> 00:08:39.730
but you also have the core printing.

00:08:39.730 --> 00:08:39.730
You don't have to use the UI panels.

00:08:40.620 --> 00:08:44.970
And it really--it makes CD and
DVD recording really easy,

00:08:45.000 --> 00:08:46.830
and your app becomes
part of the digital hub.

00:08:48.240 --> 00:08:50.380
So disk recording, what does it do?

00:08:50.380 --> 00:08:51.700
It handles burning.

00:08:51.720 --> 00:08:53.820
It handles erasing.

00:08:53.820 --> 00:08:56.600
It'll handle file system creation.

00:08:56.600 --> 00:08:59.250
Like I said,
file system creation is pretty darn hard.

00:08:59.390 --> 00:09:02.900
So we offer some APIs to
help you with that.

00:09:02.900 --> 00:09:04.180
It'll handle device support.

00:09:04.180 --> 00:09:07.530
You don't have to worry about the--
you have to send an extra command to a

00:09:07.530 --> 00:09:11.320
Sony drive before you burn to it that
you don't have to send on a Yamaha.

00:09:11.340 --> 00:09:13.120
You don't have to worry
about any of that.

00:09:13.120 --> 00:09:14.020
We worry about that.

00:09:14.020 --> 00:09:15.600
We make it work.

00:09:15.750 --> 00:09:19.480
It gives you resource
arbitration just about for free.

00:09:19.830 --> 00:09:20.810
It's really easy.

00:09:20.980 --> 00:09:25.080
You'll be just interacting with iTunes
in the Finder and the new digital hub

00:09:25.130 --> 00:09:27.300
stuff that you might have seen in Jaguar.

00:09:27.300 --> 00:09:29.080
It'll all just work correctly.

00:09:29.080 --> 00:09:30.410
And it's just really great.

00:09:30.560 --> 00:09:33.440
And we give a standard user
interface and experience.

00:09:33.590 --> 00:09:36.680
We have one set of burn dialogues,
one set of progress.

00:09:36.780 --> 00:09:38.920
So you don't have to worry
about implementing that.

00:09:39.060 --> 00:09:42.470
You don't have to worry about
making-- how am I going to

00:09:42.470 --> 00:09:43.480
present this to the user?

00:09:43.480 --> 00:09:44.120
We've done that.

00:09:44.170 --> 00:09:45.640
The user has one set of progress.

00:09:45.670 --> 00:09:47.400
They have panels that
they're familiar with.

00:09:47.400 --> 00:09:51.940
And burning becomes trivially
easy for them in your application.

00:09:54.520 --> 00:09:58.780
So you might be saying to yourself,
you know, what can I get out of this?

00:09:58.780 --> 00:10:01.100
Who should be using this?

00:10:01.100 --> 00:10:04.400
And really, we don't want necessarily
everybody to be using it.

00:10:04.700 --> 00:10:06.280
Just where it makes sense.

00:10:06.530 --> 00:10:07.400
Let me give you an example.

00:10:07.400 --> 00:10:11.390
You know, I know the guy that
writes MP3 alarm clock.

00:10:11.390 --> 00:10:12.790
It's a great application.

00:10:12.920 --> 00:10:16.540
You know, plays MP3s at a given time.

00:10:17.010 --> 00:10:21.270
Should it be burning audio CDs?

00:10:21.270 --> 00:10:21.270
Probably not.

00:10:22.330 --> 00:10:27.200
But there are a lot of places
where it really does make sense.

00:10:27.200 --> 00:10:29.330
We have printing for digital media.

00:10:29.430 --> 00:10:35.550
If you're any sort of digital media app,
your sound, movies, photos,

00:10:35.850 --> 00:10:40.350
anything like that,
a lot of times it makes a lot of sense

00:10:40.820 --> 00:10:46.100
for you to just have an export step
in your application and just burn a

00:10:46.100 --> 00:10:46.100
CD straight from your application.

00:10:46.270 --> 00:10:49.390
If you have cross-platform needs,
if you know that users are using

00:10:49.450 --> 00:10:54.520
your application to create data,
and then taking over to another platform,

00:10:54.940 --> 00:10:58.190
well, we burn a cross-platform
file system on our disks.

00:10:58.400 --> 00:11:01.200
So you can create a disk.

00:11:01.200 --> 00:11:05.000
If you know for a fact the user's
going to take your output and

00:11:05.100 --> 00:11:08.610
just burn it to a disk anyway,
well, we can make that process

00:11:08.760 --> 00:11:10.600
a little bit easier.

00:11:10.600 --> 00:11:16.600
If you have large data files,
if you're generating large

00:11:16.620 --> 00:11:17.810
data files and you're...

00:11:18.530 --> 00:11:23.400
You know, you're doing, for example,
scientific or mathematical applications.

00:11:23.440 --> 00:11:26.990
Maybe you generate 3 gigabytes
of protein folding data,

00:11:26.990 --> 00:11:29.820
and you want a way to just
quickly store that off somewhere.

00:11:30.040 --> 00:11:33.000
Well, maybe it makes sense
to archive it to a DVD.

00:11:33.250 --> 00:11:34.910
You can do that.

00:11:35.360 --> 00:11:39.740
So we've got a lot of current clients,
got most of them up on the slide here,

00:11:39.940 --> 00:11:43.200
and we're making it public,
so we really want your application

00:11:43.200 --> 00:11:46.300
to start getting into this
and start burning as well.

00:11:46.300 --> 00:11:49.340
Alright.

00:11:49.340 --> 00:11:52.600
So that's the sales pitch.

00:11:52.800 --> 00:11:55.650
Now let's talk about the architecture.

00:12:03.500 --> 00:12:08.480
The first part that lies underneath
everything is the Core Burn Engine.

00:12:08.550 --> 00:12:10.840
The Core Burn Engine is
basically an engine that handles

00:12:10.840 --> 00:12:13.490
burning content to a disk.

00:12:13.620 --> 00:12:16.860
It handles device management,
which is actually one of

00:12:16.860 --> 00:12:18.500
the harder things to do.

00:12:18.500 --> 00:12:21.370
It handles burning and
it handles erasing.

00:12:21.580 --> 00:12:25.500
It's just burning,
it doesn't know anything about content.

00:12:25.500 --> 00:12:30.310
And that lies underneath everything.

00:12:32.210 --> 00:12:34.500
The next part we have is we
have a set of Content APIs,

00:12:34.510 --> 00:12:36.690
which will help you create file systems.

00:12:36.770 --> 00:12:39.520
And, like I said,
creating file systems is

00:12:39.520 --> 00:12:40.500
really pretty difficult.

00:12:40.630 --> 00:12:44.790
We have some really powerful and flexible
APIs in our stuff to help you create

00:12:44.930 --> 00:12:48.740
all sorts of different file systems,
very highly configurable,

00:12:48.740 --> 00:12:50.500
and they're really great.

00:12:50.710 --> 00:12:53.040
And those are built on
top of the Burn Engine.

00:12:53.190 --> 00:12:57.640
So they were, you know,
they're actually using the same

00:12:57.640 --> 00:12:59.350
APIs that the Core Burn Engine uses.

00:12:59.480 --> 00:13:02.980
So if you happen to know how
to build file systems yourself,

00:13:03.010 --> 00:13:05.430
well, you can build your own file
system and send it to the

00:13:05.500 --> 00:13:09.450
Core Burn Engine in exactly the same
way the Content APIs are doing it.

00:13:11.300 --> 00:13:13.780
Then we have DiscRecording UI.

00:13:13.960 --> 00:13:18.360
And these are our common
setup panels and progress bar.

00:13:18.360 --> 00:13:21.380
And again, those are just built on top
of the Core Burn Engine.

00:13:21.380 --> 00:13:25.860
You don't have to use the UI panels,
but you're gonna see just how

00:13:26.000 --> 00:13:30.380
easy it is and just how hard
it is to do it the other way.

00:13:30.380 --> 00:13:32.650
So we really want you
to use the UI stuff,

00:13:32.650 --> 00:13:36.250
because we've solved all these problems.

00:13:38.170 --> 00:13:42.170
A couple concepts that
I need to talk about.

00:13:42.220 --> 00:13:45.620
The API is object-oriented,
and it's available in

00:13:45.650 --> 00:13:48.220
both C and Objective-C.

00:13:48.250 --> 00:13:52.290
So all the Objective-C objects
are NSObjects,

00:13:52.390 --> 00:13:57.480
and all the C objects
are actually CF types.

00:13:57.480 --> 00:14:00.230
They're not toll-free
bridge to each other yet,

00:14:00.230 --> 00:14:03.500
but that's something we
might do in the future.

00:14:03.610 --> 00:14:05.910
But since they're CF types,
the C objects follow

00:14:05.910 --> 00:14:07.560
retain release conventions.

00:14:07.560 --> 00:14:10.940
You could throw them in collections,
you could throw them in a

00:14:10.960 --> 00:14:14.720
dictionary or an array without
having to do a special callback.

00:14:14.720 --> 00:14:18.160
All the functions have really
consistent naming conventions,

00:14:18.210 --> 00:14:21.210
which if you've used CF,
you get the very consistent

00:14:21.210 --> 00:14:22.620
naming conventions.

00:14:22.620 --> 00:14:26.960
And then all the objects also
have property dictionaries.

00:14:26.960 --> 00:14:29.360
So in general,
rather than adding API calls for

00:14:29.360 --> 00:14:33.140
every little thing you can do,
we have a property dictionary.

00:14:33.140 --> 00:14:36.740
And you take the property dictionary,
you specify whatever properties you want

00:14:36.750 --> 00:14:39.410
that That's how you control its behavior.

00:14:42.180 --> 00:14:44.290
So here's the block diagram.

00:14:44.310 --> 00:14:47.980
The first thing we're going to
zoom in on is the Core Engine.

00:14:50.900 --> 00:14:52.930
So the Core Engine.

00:14:53.000 --> 00:14:56.660
The Core Engine handles burning,
handles erasing, device handling,

00:14:56.660 --> 00:14:58.530
and media arbitration.

00:14:58.740 --> 00:15:02.060
Burning and erasing are
asynchronous processes.

00:15:02.070 --> 00:15:06.170
What that means is you start
the burn and then we go off

00:15:06.460 --> 00:15:08.690
and do it in the background.

00:15:08.760 --> 00:15:11.460
You don't have to worry
about anything fancy.

00:15:11.460 --> 00:15:14.700
We handle all the thread
scheduling for you automatically.

00:15:14.700 --> 00:15:19.700
We'll send notifications to your
run loop on what's going on.

00:15:19.830 --> 00:15:23.700
In the Core Engine,
you're providing the data.

00:15:23.700 --> 00:15:27.540
You're providing the entire track
for each track that you're burning.

00:15:27.700 --> 00:15:31.700
So the Burn Engine itself doesn't
know anything about content.

00:15:31.700 --> 00:15:36.390
It's just a mechanism for you to
deliver a stream of data to the drive.

00:15:37.500 --> 00:15:41.960
We can do multiple burns at once,
we can do multiple erases at once.

00:15:41.960 --> 00:15:44.500
This is really not a problem.

00:15:44.500 --> 00:15:48.910
I kind of have to wonder why, you know,
people weren't doing it before,

00:15:49.110 --> 00:15:51.410
but it's really easy,
so we threw that in.

00:15:51.500 --> 00:15:54.760
We handled device handling,
and like I said,

00:15:54.800 --> 00:15:57.500
we handled the media arbitration.

00:15:57.500 --> 00:16:00.600
And those are all part
of the Core Engine.

00:16:00.980 --> 00:16:03.900
So we've got a core set of
objects that handle all this.

00:16:03.930 --> 00:16:07.440
There's really only four objects
in the whole Core Engine.

00:16:07.490 --> 00:16:11.270
We have an object representing a burn,
we have an object representing a track,

00:16:11.320 --> 00:16:16.900
we have an object representing an erase,
and we have an object for devices.

00:16:16.900 --> 00:16:19.890
We also have our own notification center.

00:16:19.890 --> 00:16:22.900
If you've ever used
CF Notification Center,

00:16:23.020 --> 00:16:25.850
we have our own variant on it,
which lets you just sign

00:16:25.850 --> 00:16:26.900
up for notifications.

00:16:26.900 --> 00:16:31.900
We'll deliver all of our notifications
through this notification center.

00:16:32.920 --> 00:16:36.000
and we'll get into that in a bit.

00:16:36.140 --> 00:16:39.040
So, let's look at the objects.

00:16:40.400 --> 00:16:41.340
We have the DR Burn.

00:16:41.530 --> 00:16:44.800
By the way,
DR Burn is the Objective-C name for it.

00:16:44.800 --> 00:16:48.290
DR Burn Ref is the C name for it.

00:16:48.430 --> 00:16:52.880
We're just gonna use drburn
because it's the same object.

00:16:52.880 --> 00:16:55.370
drburn represents a burn.

00:16:55.800 --> 00:16:58.340
and represents the act of burning.

00:16:58.340 --> 00:17:02.640
You create one of these and then
you tell it to burn and it burns.

00:17:03.210 --> 00:17:04.720
And what it does is it writes a layout.

00:17:04.960 --> 00:17:08.600
So as you know,
CDs can have multiple tracks on them.

00:17:08.600 --> 00:17:11.260
You stick CD in your CD player,
you have a certain number

00:17:11.260 --> 00:17:12.200
of tracks that come up.

00:17:12.220 --> 00:17:16.320
Well, if you have a CD-ROM,
that only has one track on it.

00:17:16.350 --> 00:17:17.310
That's your data track.

00:17:17.310 --> 00:17:22.770
You can also have multi-session
discs where you have one session of

00:17:22.770 --> 00:17:25.380
audio and then one session of data,
things like that.

00:17:25.460 --> 00:17:30.130
So it writes a layout,
and the layout is just a CF type ref.

00:17:30.430 --> 00:17:35.150
And that CF type ref will examine it
on the fly and figure out what it is.

00:17:35.460 --> 00:17:40.420
You can pass in either a single track,
you can pass in a CFArray of tracks,

00:17:40.420 --> 00:17:42.740
or you can pass in,
for multiple sessions,

00:17:42.800 --> 00:17:47.450
you can pass in a CFArray of
CFArrays of tracks.

00:17:48.480 --> 00:17:51.780
And again,
everything happens asynchronous,

00:17:51.780 --> 00:17:55.230
happens in real time,
and we send you notifications

00:17:55.330 --> 00:17:59.790
for progress throughout the
burn and when it's done.

00:18:02.180 --> 00:18:04.490
The next object is dr_track.

00:18:04.490 --> 00:18:07.440
This is the object that
represents a track.

00:18:07.510 --> 00:18:10.270
Now, it could be a CD audio track,
could be a data track,

00:18:10.340 --> 00:18:15.540
a CD or DVD data track,
or it could be really anything in MMC.

00:18:15.540 --> 00:18:23.570
If you're familiar with CDs and you
know about all the weird block sizes,

00:18:23.570 --> 00:18:24.810
the funny things you can do with
video CDs and things like that,

00:18:25.140 --> 00:18:27.390
You can do all that
using the Core Engine.

00:18:27.550 --> 00:18:31.500
The Core Engine does not constrain you,
does not know anything about

00:18:31.540 --> 00:18:32.900
the content you're burning.

00:18:32.940 --> 00:18:35.010
You just tell it what to burn.

00:18:35.280 --> 00:18:38.650
And you provide the data through
a callback during the burn.

00:18:39.510 --> 00:18:44.970
- And basically we'll call you
real time during the burn to say,

00:18:45.060 --> 00:18:46.290
"Hey, I need my data.

00:18:46.500 --> 00:18:50.580
Let's have it." And it'll
go into a RAM cache.

00:18:50.780 --> 00:18:54.090
You know,
you are time constrained in that

00:18:54.730 --> 00:18:58.100
and that you need to produce the data
fast enough for the burn to happen,

00:18:58.110 --> 00:19:01.670
but you're going into a RAM cache,
so you're not going

00:19:01.670 --> 00:19:04.280
straight to the drive,
so you're a little bit protected,

00:19:04.280 --> 00:19:06.890
so if you need to do something
that takes a little longer,

00:19:06.890 --> 00:19:07.620
you're okay.

00:19:08.010 --> 00:19:11.950
Um, like I said,
there is a maximum data rate.

00:19:11.950 --> 00:19:13.850
So you can run-- you have
your track production.

00:19:13.860 --> 00:19:18.500
Say you're doing something CPU intensive,
such as decompressing MP3s,

00:19:18.650 --> 00:19:19.900
which iTunes does.

00:19:19.900 --> 00:19:26.560
We provide a way to run a speed test
before the burn at basically safe time,

00:19:26.790 --> 00:19:30.900
um, to find out how fast you
can produce your data.

00:19:31.140 --> 00:19:35.780
And we'll run the speed test, and,
you know, depending on how much

00:19:35.780 --> 00:19:39.900
CPU is available and so on,
if you're on a Bondi original iMac,

00:19:39.900 --> 00:19:43.610
you're gonna have-- you know,
you're gonna be a lot slower than

00:19:43.660 --> 00:19:45.900
if you're on a dual 1 GHz G4.

00:19:45.900 --> 00:19:47.900
So we'll find out what
that maximum data rate is,

00:19:47.900 --> 00:19:51.900
and then we'll burn at a
speed that's less than that.

00:19:51.900 --> 00:19:53.860
So we'll automatically--you
don't have to do a test burn.

00:19:53.950 --> 00:19:59.140
You get the automatic,
um-- you automatically burn

00:19:59.210 --> 00:20:00.900
at a rate that's good enough.

00:20:00.900 --> 00:20:04.710
And this is why iTunes burns
generally don't underrun.

00:20:07.760 --> 00:20:12.340
So the next object is DrErase.

00:20:12.400 --> 00:20:14.340
DrErase represents an erase.

00:20:14.360 --> 00:20:16.810
It's the act of erasing.

00:20:16.850 --> 00:20:19.140
Again,
you start a racing with just one call,

00:20:19.140 --> 00:20:23.240
and it kicks off in the background
and it runs asynchronously.

00:20:23.240 --> 00:20:28.510
And we send you notifications for
progress if the drive reports it.

00:20:28.520 --> 00:20:31.800
Sometimes drives just go off
and they don't tell us anything.

00:20:31.800 --> 00:20:35.160
And we'll send you a
notification on completion.

00:20:38.200 --> 00:20:44.060
Now the last main object is drDevice.

00:20:44.060 --> 00:20:45.620
And this is the object
that represents a device.

00:20:46.350 --> 00:20:47.490
encapsulates a bunch of things.

00:20:47.520 --> 00:20:49.960
It handles device discovery.

00:20:50.060 --> 00:20:52.790
So find me the list of devices
that are on the system.

00:20:52.890 --> 00:20:54.910
It handles device capabilities.

00:20:55.070 --> 00:20:57.750
Does this drive support CDR burning?

00:20:57.820 --> 00:21:00.010
Does it support DVDR burning?

00:21:00.250 --> 00:21:06.100
What's the name of the device?

00:21:06.100 --> 00:21:06.100
Can this drive erase disks?

00:21:06.260 --> 00:21:07.530
So on.

00:21:07.910 --> 00:21:11.380
We'll tell you about
media inside the device.

00:21:11.380 --> 00:21:14.700
This is information that can change,
obviously, because you can take discs

00:21:14.700 --> 00:21:16.330
in and out of the device.

00:21:16.930 --> 00:21:19.730
You can do actions on the drive.

00:21:19.740 --> 00:21:22.500
You can mostly just disc
burning-related actions,

00:21:22.570 --> 00:21:27.330
you know, open or close the tray
or eject the media.

00:21:28.100 --> 00:21:32.000
and we'll send you notifications
when devices are hot plugged,

00:21:32.010 --> 00:21:36.210
when they're plugged in or
unplugged via USB or FireWire.

00:21:36.600 --> 00:21:40.060
We'll send you notifications when
media is inserted or removed,

00:21:40.300 --> 00:21:42.010
things like that.

00:21:45.300 --> 00:21:47.540
So, we've introduced the objects.

00:21:47.570 --> 00:21:52.610
Let's now take a minute and
walk through burning a disc.

00:21:58.810 --> 00:22:04.400
Step one in burning a disc, well,
you select a device.

00:22:04.410 --> 00:22:08.040
And I'm not going to go too far in-depth
on this because we really want you

00:22:08.040 --> 00:22:11.780
to use DiscRecording UI and this,
we give this to you automatically.

00:22:11.870 --> 00:22:15.420
We pop up a user interface, say,
and give us a list of devices.

00:22:15.480 --> 00:22:17.530
Here's a list of devices.

00:22:17.530 --> 00:22:21.220
Tell us what you want to
burn to and then so on.

00:22:21.370 --> 00:22:22.620
So, but you, then you've got your device.

00:22:22.720 --> 00:22:24.540
Well, you need to wait for media.

00:22:24.540 --> 00:22:26.930
You can't just start burning
without a blank disc.

00:22:27.060 --> 00:22:31.300
So, again, DiscRecording UI does this
for you automatically.

00:22:31.300 --> 00:22:34.250
You're still,
so this is just one call to DiscRecording

00:22:34.260 --> 00:22:36.140
UI and we're handling all this.

00:22:37.600 --> 00:22:41.600
The next thing is create a burn object.

00:22:41.620 --> 00:22:44.740
Well, again,
that's also handled by DiscRecording UI.

00:22:44.740 --> 00:22:48.280
We pretty much do the entire
setup phase of the burn for you,

00:22:48.280 --> 00:22:51.140
because we want you to just worry about
the content that you're producing.

00:22:51.140 --> 00:22:56.920
We don't want you to have to worry about
all the extra stuff that's going on.

00:22:59.600 --> 00:23:02.360
Then you create your tracks.

00:23:02.530 --> 00:23:06.700
And this is where you actually specify
the content that you're burning.

00:23:07.140 --> 00:23:14.310
So here we have--we're going to actually
call dr_track_create in C and provide

00:23:14.310 --> 00:23:15.880
the callback to produce the data.

00:23:15.990 --> 00:23:19.970
And it's just a callback function,
and we'll call you back and say,

00:23:20.060 --> 00:23:21.440
you know, "Hey,
I'm getting ready to burn.

00:23:21.440 --> 00:23:23.440
You know, open files,
do whatever you're going to do.

00:23:23.440 --> 00:23:24.650
Hey, I'm burning.

00:23:24.660 --> 00:23:25.350
Give me some data.

00:23:25.360 --> 00:23:30.150
Give me some data." You know,
repeat that a million times,

00:23:30.150 --> 00:23:34.320
and then we're going to say, "Okay,
I'm done with the burn.

00:23:34.320 --> 00:23:34.320
You know, go clean up."

00:23:35.680 --> 00:23:36.780
and that's it.

00:23:36.780 --> 00:23:40.920
Then, the properties on the track,
every object has a properties dictionary.

00:23:40.920 --> 00:23:44.710
The properties on the track
specify the length of the track,

00:23:44.710 --> 00:23:46.820
the block size, and things like that.

00:23:46.840 --> 00:23:49.480
All the MMC description of the track.

00:23:49.940 --> 00:23:54.220
And again, you want to make sure you run
a speed test to find out how

00:23:54.220 --> 00:23:56.900
fast you can produce the data.

00:23:56.960 --> 00:24:00.650
And that's how you make
sure you avoid underruns.

00:24:01.970 --> 00:24:07.080
And again, in Objective-C,
I'm a C Carbon sort of guy myself,

00:24:07.080 --> 00:24:09.980
but we also have a Cocoa guy on our team,
so he made sure that whenever

00:24:09.980 --> 00:24:13.330
I had a C API up on the slide,
we'd have the same

00:24:13.330 --> 00:24:14.740
Objective-C API up there.

00:24:14.740 --> 00:24:18.020
So the Objective-C API is
pretty straightforward.

00:24:18.020 --> 00:24:21.610
You create a track, then init it.

00:24:21.620 --> 00:24:24.600
Instead of specifying
a callback function,

00:24:24.600 --> 00:24:28.200
you're actually specifying a class
which implements the DR track

00:24:28.240 --> 00:24:30.630
data production interface.

00:24:32.090 --> 00:24:34.530
and other than that,
it's pretty straightforward.

00:24:34.540 --> 00:24:39.000
We send that class the
messages and you handle them.

00:24:43.120 --> 00:24:46.400
Well, so you've created your tracks,
you've got your burn object, what's next?

00:24:46.580 --> 00:24:48.430
You start the burn.

00:24:49.950 --> 00:24:53.210
And this is where we call
DR Burn Write Layout.

00:24:53.210 --> 00:24:56.320
Or in Objective-C, DR Burn Write Layout.

00:25:00.070 --> 00:25:03.830
So you start the burn.

00:25:03.880 --> 00:25:07.370
And you pass in a layout,
which is a type, or it's a CF type,

00:25:07.380 --> 00:25:08.860
or it's an NSObject.

00:25:08.860 --> 00:25:12.640
That's either your array,
or if we're just doing one track,

00:25:12.640 --> 00:25:13.940
it can be just a track.

00:25:13.940 --> 00:25:16.510
And we'll figure it out,
do the right thing.

00:25:17.610 --> 00:25:21.260
So the burn kicks off in the
background and it starts happening.

00:25:21.280 --> 00:25:25.600
The next thing you need to do is
actually display progress to the user.

00:25:25.810 --> 00:25:30.230
Since burns can take anywhere
from 30 seconds up to an hour,

00:25:30.980 --> 00:25:32.840
Probably want to give
the user some feedback.

00:25:32.840 --> 00:25:35.020
We'll send you notifications on that.

00:25:35.040 --> 00:25:38.960
But the easy way to do it, again,
is DiscRecording UI.

00:25:39.930 --> 00:25:43.400
Then you wait for the burn to complete.

00:25:43.520 --> 00:25:45.200
Or you can do something else.

00:25:45.340 --> 00:25:51.240
So we--in Mac OS X, we take advantage of
the kernel scheduling.

00:25:51.240 --> 00:25:54.940
We make these--bump these
threads up to high priority.

00:25:55.080 --> 00:25:58.960
And you don't have to worry about,
you know, not touching the machine.

00:25:59.100 --> 00:26:04.260
You can launch Photoshop, do a render,
do whatever you need to do,

00:26:04.370 --> 00:26:06.990
and you're not gonna underrun.

00:26:07.240 --> 00:26:12.060
We actually reserve the right amount
of CPU so you can go and do whatever

00:26:12.070 --> 00:26:13.200
you want while you're burning.

00:26:13.200 --> 00:26:17.600
Gone are those days of 1999
where you had to click and,

00:26:17.600 --> 00:26:19.200
you know, step back from the machine.

00:26:19.200 --> 00:26:20.900
We all did that.

00:26:20.900 --> 00:26:23.770
Come on, you step back from the
machine and let it burn,

00:26:23.770 --> 00:26:26.200
and if you breathed on it,
the burn might fail.

00:26:26.200 --> 00:26:28.110
No, no, we don't do that.

00:26:28.190 --> 00:26:30.200
The burn just works.

00:26:30.200 --> 00:26:35.200
And so you don't have to make your
application modal at this point.

00:26:35.200 --> 00:26:38.010
actually go off and do something else.

00:26:40.880 --> 00:26:43.800
So let's look at the code
to do the basic stuff.

00:26:43.800 --> 00:26:51.800
Um... So up here at the top in C,
we've got choose device,

00:26:51.800 --> 00:26:54.380
and what we're doing here is
we're putting up some kind

00:26:54.380 --> 00:26:55.800
of UI to select a device.

00:26:55.800 --> 00:26:58.800
That returns a DR device ref.

00:26:58.830 --> 00:27:01.300
Um,
we're not gonna show that on the slide,

00:27:01.300 --> 00:27:03.300
because device handling is
actually pretty complicated.

00:27:03.300 --> 00:27:08.610
You have to--you can--you can, you know,
we can ask--you can ask us for a static

00:27:08.610 --> 00:27:12.300
list of devices that are attached,
but then if a user hot plugs something,

00:27:12.300 --> 00:27:15.300
well, you don't know about the
newly attached device,

00:27:15.300 --> 00:27:19.300
so you need to sign up for
notifications and handle hot plugging.

00:27:19.300 --> 00:27:21.800
In order to do it all right,
it's kind of complicated.

00:27:21.800 --> 00:27:24.800
So DiscRecording UI will
actually do all this for you.

00:27:24.800 --> 00:27:28.130
So we're just gonna, you know, say,
"Here, choose device." And once

00:27:28.270 --> 00:27:31.300
you've chosen your device,
you're gonna put up some UI saying,

00:27:31.370 --> 00:27:34.170
"Okay, now give me some media."

00:27:34.960 --> 00:27:37.190
And once you've got the
media in the device,

00:27:37.190 --> 00:27:40.140
then you can create your burn.

00:27:40.140 --> 00:27:41.200
So we're creating a burn.

00:27:41.200 --> 00:27:44.300
A burn is,
you pass the device as a parameter.

00:27:44.490 --> 00:27:48.660
Then you create a track,
and you specify your callback function,

00:27:48.740 --> 00:27:50.950
and you specify track properties,
which are the

00:27:50.950 --> 00:27:53.670
MMC description of the track.

00:27:54.260 --> 00:27:57.900
And then you called
DR Burn Set Properties.

00:27:57.980 --> 00:28:00.660
And you called Burn Right Layout.

00:28:00.910 --> 00:28:04.160
So, set properties is just, you know,
if you want to change some of

00:28:04.160 --> 00:28:08.790
the properties of the burn,
the speed of the burn, um...

00:28:09.100 --> 00:28:10.750
You know,
whether you're going to mount the disc on

00:28:10.750 --> 00:28:14.900
the desktop or eject it after the burn,
you control a lot of things there.

00:28:15.220 --> 00:28:18.520
Then you call writeLayout
and we start writing.

00:28:18.870 --> 00:28:21.080
We're passing in the track,
we're just doing a single track burn.

00:28:22.080 --> 00:28:25.540
Then you put up progress and
you wait for the burn to finish.

00:28:27.340 --> 00:28:28.450
So that's it in C.

00:28:28.750 --> 00:28:32.480
Now, same thing in Objective-C.

00:28:32.940 --> 00:28:37.650
It's pretty much the exact same thing,
just in Objective-C.

00:28:37.730 --> 00:28:41.530
We're choosing a device,
we're waiting for blank media,

00:28:42.210 --> 00:28:45.120
We're creating a burn for the device.

00:28:45.320 --> 00:28:46.390
We're creating a track.

00:28:46.400 --> 00:28:48.030
We're initializing it with a producer.

00:28:48.110 --> 00:28:50.680
We're going to have our
own object be the producer.

00:28:50.770 --> 00:28:52.110
We set some properties on the track.

00:28:52.220 --> 00:28:54.440
We set some properties on the burn.

00:28:54.510 --> 00:28:56.620
And we call writeLayout.

00:28:56.770 --> 00:28:58.410
And again,
we just wait for the burn to complete,

00:28:58.410 --> 00:28:59.900
and that's it.

00:28:59.900 --> 00:29:03.220
And that's burning in a nutshell.

00:29:06.410 --> 00:29:11.400
And that's really,
that's the basics of the Core Engine.

00:29:11.560 --> 00:29:16.270
So we talked about, you know,
if you have your callback, you know,

00:29:16.350 --> 00:29:18.610
if you know what data
you're going to produce,

00:29:18.680 --> 00:29:21.310
it's really, it's easy to burn that data.

00:29:21.400 --> 00:29:24.400
But how do you get that data to produce?

00:29:24.410 --> 00:29:27.510
Well, say you want to burn a file system.

00:29:27.770 --> 00:29:29.940
File systems are hard.

00:29:29.940 --> 00:29:32.480
Especially if you're
burning a hybrid disc,

00:29:32.480 --> 00:29:37.650
you're putting maybe ISO, Joliet,
HFS+, maybe you're throwing UDF on there.

00:29:37.730 --> 00:29:39.940
You've got four file systems on there.

00:29:40.020 --> 00:29:42.010
You've got one copy of your data.

00:29:42.080 --> 00:29:44.840
You've got all these
different file systems,

00:29:44.860 --> 00:29:47.350
but they're all pointing
at the same data,

00:29:47.350 --> 00:29:50.090
so they're all kind of mixing together.

00:29:50.220 --> 00:29:52.600
That kind of layout,
that kind of creating the stuff

00:29:52.600 --> 00:29:55.540
on the fly is really not easy.

00:29:55.720 --> 00:29:58.800
So that's why we've got the Content APIs.

00:30:00.100 --> 00:30:04.860
The Content APIs help you create
file systems for data discs.

00:30:04.860 --> 00:30:09.280
The Burn Engine,
the Content APIs handle ISO 9660, Joliet,

00:30:09.280 --> 00:30:13.240
UDF,
and HFS+. And they'll create hybrids of

00:30:13.240 --> 00:30:17.100
any or all of these formats together.

00:30:17.100 --> 00:30:22.110
And it's really easy to use and
they're really powerful and flexible.

00:30:24.150 --> 00:30:26.950
So, how does it work?

00:30:27.010 --> 00:30:30.680
Well, amazingly,
there's really not many objects in this,

00:30:30.680 --> 00:30:31.100
in the API.

00:30:31.100 --> 00:30:36.340
We have a file object and
we have a folder object.

00:30:36.340 --> 00:30:38.430
And that's pretty much it.

00:30:38.510 --> 00:30:41.520
If you know how to use a file system,
then you already know what

00:30:41.520 --> 00:30:42.920
a file and a folder are.

00:30:42.920 --> 00:30:45.770
So the concepts are pretty clear.

00:30:46.080 --> 00:30:50.200
I'm gonna walk you through
how we're gonna do that.

00:30:51.820 --> 00:30:56.480
There's a couple different ways to
create these and put them all together.

00:30:58.760 --> 00:31:01.960
- So, there's two types of
file and folder objects.

00:31:02.220 --> 00:31:05.800
There's real objects and
there are virtual objects.

00:31:05.970 --> 00:31:11.400
So, real files and folders are copied
from an existing file system.

00:31:11.580 --> 00:31:17.920
So that means if you have, for example,
iTunes, when it burns its MP3 CDs, well,

00:31:18.170 --> 00:31:20.730
the burns that it's doing
are from your music library.

00:31:20.740 --> 00:31:24.020
The files already exist
on discs somewhere.

00:31:24.050 --> 00:31:26.240
They're not necessarily
in the right locations,

00:31:26.240 --> 00:31:27.900
they're not grouped
into a nice hierarchy,

00:31:27.900 --> 00:31:30.000
but the files are on disc.

00:31:30.170 --> 00:31:33.470
So when iTunes burns,
the files are copied from

00:31:33.470 --> 00:31:35.550
an existing file system.

00:31:35.760 --> 00:31:38.830
Uh, the name and the properties
can be overridden.

00:31:38.960 --> 00:31:41.700
So iTunes actually changes the name,
you know,

00:31:41.800 --> 00:31:44.670
puts a track number in front of,
in front of it,

00:31:44.710 --> 00:31:47.110
but it doesn't go and rename
the original on your hard disk,

00:31:47.240 --> 00:31:48.700
because that would be kind of dumb.

00:31:48.860 --> 00:31:52.270
It actually just renames it on the fly.

00:31:53.740 --> 00:31:55.250
And then we have virtual
files and folders,

00:31:55.250 --> 00:31:57.620
and these are actually
created through the API.

00:31:57.620 --> 00:32:00.650
The data is specified at runtime, I mean,
through the API.

00:32:00.710 --> 00:32:06.620
And this is actually really powerful
and it's really pretty cool.

00:32:07.510 --> 00:32:13.850
So you can use this to basically
lay out your own file system and

00:32:13.950 --> 00:32:18.560
have whatever you want on it,
have data being spontaneously created,

00:32:18.590 --> 00:32:20.160
whatever.

00:32:20.260 --> 00:32:24.090
So the virtual folders really are
how you define your hierarchy.

00:32:24.590 --> 00:32:27.580
When you have a real folder,
we copy everything underneath

00:32:27.580 --> 00:32:29.260
that real folder for you.

00:32:29.260 --> 00:32:32.410
But when you have a virtual folder,
you can go ahead and add

00:32:32.410 --> 00:32:33.900
all the things to it.

00:32:33.900 --> 00:32:35.560
So we'll cover that in a sec.

00:32:35.640 --> 00:32:38.790
When we do this little walkthrough,
we're going to walk you through

00:32:38.790 --> 00:32:41.330
how to create a file system.

00:32:47.550 --> 00:32:50.690
So presumably you have some idea of
the file system you want to create.

00:32:50.700 --> 00:32:52.430
You know what structure you want.

00:32:52.590 --> 00:32:55.690
So you create a bunch of
file and folder objects.

00:32:57.210 --> 00:33:00.150
So we've got a bunch of APIs to
create all the different

00:33:00.200 --> 00:33:02.370
kinds of files and folders.

00:33:02.550 --> 00:33:06.110
You can create, you know,
creating real files and real

00:33:06.220 --> 00:33:07.940
folders is pretty straightforward.

00:33:07.980 --> 00:33:11.370
DrFileCreateReal, DrFolderCreateReal.

00:33:11.710 --> 00:33:14.270
You can create a virtual folder.

00:33:14.350 --> 00:33:16.340
You just have to specify
the name for the folder,

00:33:16.340 --> 00:33:18.860
and everything else is
pretty much default.

00:33:18.980 --> 00:33:22.770
You can--again, you can change the
properties if you want.

00:33:23.070 --> 00:33:26.000
And we have a couple different
ways to create virtual files.

00:33:26.120 --> 00:33:30.130
You can create a virtual symbolic
link or hard link or alias.

00:33:30.360 --> 00:33:32.150
You can create...

00:33:32.300 --> 00:33:34.540
You can create it using
just a pointer and a length.

00:33:34.540 --> 00:33:39.400
If you have a small file,
maybe a couple hundred K or a meg, well,

00:33:39.400 --> 00:33:43.610
you can just say, here's the data,
go blast this out into a file for me,

00:33:43.610 --> 00:33:45.090
and we'll do that.

00:33:45.160 --> 00:33:48.450
- Or if it's a larger file,
say it's a gigabyte,

00:33:48.470 --> 00:33:53.300
you don't want to just malloc that
into a pointer and pass it to us,

00:33:53.300 --> 00:33:56.100
even if you could all the time.

00:33:56.100 --> 00:34:01.200
So we just have a way for you
to specify a callback function,

00:34:01.200 --> 00:34:03.200
and we'll ask you for
data during the burn,

00:34:03.260 --> 00:34:08.970
right at the appropriate moment,
and it all just works.

00:34:10.500 --> 00:34:13.670
Again, same APIs in Objective-C.

00:34:13.720 --> 00:34:17.500
I don't think there's
any huge surprises here.

00:34:17.500 --> 00:34:21.180
It's pretty straightforward mapping.

00:34:23.010 --> 00:34:25.000
So we've created all
the files and folders.

00:34:25.070 --> 00:34:28.590
Well, now we can go in and we can
change the properties on these.

00:34:28.810 --> 00:34:31.830
Now the great thing about these
Content APIs is that literally

00:34:31.830 --> 00:34:33.340
everything can be changed.

00:34:33.340 --> 00:34:38.620
You can go in and make the most
complicated disc you can think of.

00:34:38.620 --> 00:34:40.590
You can change the
names of all the files,

00:34:40.690 --> 00:34:44.320
you can change the metadata such as,
you know, types, creators,

00:34:44.320 --> 00:34:49.260
whether it's invisible,
different things like that.

00:34:49.260 --> 00:34:53.390
You can also specify different properties
for each generated file system or

00:34:53.700 --> 00:34:57.180
different names for each file system,
for example,

00:34:57.840 --> 00:35:01.930
because ISO 9660 has a different
naming convention than HFS+ does.

00:35:01.970 --> 00:35:03.760
If you want,
you can get right down in there and

00:35:03.850 --> 00:35:10.290
control the generated names on each file
system so that you know what they are.

00:35:10.290 --> 00:35:10.290
You can also...

00:35:10.610 --> 00:35:15.770
We're going to talk about how to
make an item disappear entirely.

00:35:15.880 --> 00:35:21.430
If you're burning a game CD and you
have two copies of your application,

00:35:21.530 --> 00:35:24.910
if you're burning for
Windows and the Mac,

00:35:24.950 --> 00:35:29.720
you put your Windows executable
on the Joliet and you make the

00:35:29.720 --> 00:35:32.830
Mac executable not show up on Joliet.

00:35:32.830 --> 00:35:39.320
You can make the Windows .exe file not
show up on the Mac HFS Plus volume.

00:35:40.750 --> 00:35:44.040
When you insert it into a computer,
you only see the one executable.

00:35:44.040 --> 00:35:48.660
The users aren't confused by
seeing which icon do I click on.

00:35:48.660 --> 00:35:49.900
There's just one thing.

00:35:51.270 --> 00:35:52.740
So you can do that.

00:35:52.760 --> 00:35:55.300
And so you can-- it's really,
really powerful,

00:35:55.300 --> 00:35:57.720
and it's really pretty cool.

00:35:59.400 --> 00:36:02.170
So once you set the properties
and configure the file

00:36:02.290 --> 00:36:05.380
system the way you want,
well then you build the hierarchy.

00:36:05.470 --> 00:36:09.100
Building the hierarchy is, again,
it's pretty straightforward.

00:36:09.170 --> 00:36:11.220
You're mostly going to
use one call for this,

00:36:11.220 --> 00:36:13.050
"add child."

00:36:14.000 --> 00:36:18.300
- You can also get children,
remove children, do it all dynamically.

00:36:18.300 --> 00:36:22.380
You can put up a whole user interface
for building a disc if you want.

00:36:22.540 --> 00:36:26.700
but you're just gonna basically
call add child till you get one

00:36:27.060 --> 00:36:28.960
hierarchy and one root folder.

00:36:28.960 --> 00:36:33.100
Something to note is that when you're
gonna add children to a folder,

00:36:33.100 --> 00:36:34.780
you can only do that to a virtual folder.

00:36:34.780 --> 00:36:38.420
A real folder contains, you know,
automatically contains

00:36:38.420 --> 00:36:41.440
everything underneath it,
so you can't go in and, you know,

00:36:41.440 --> 00:36:44.140
iterate the children and
remove children from that.

00:36:44.140 --> 00:36:47.540
You have to actually convert it from
a real folder to a virtual folder,

00:36:47.540 --> 00:36:50.880
but when we do that,
we'll go and we'll read all

00:36:50.880 --> 00:36:54.660
of the children and convert
them to real files and folders,

00:36:54.660 --> 00:36:56.420
and we'll make the folder virtual.

00:37:02.180 --> 00:37:08.840
And again, in Objective-C,
no big surprises here.

00:37:08.910 --> 00:37:09.900
So we've built the hierarchy.

00:37:09.900 --> 00:37:11.810
We've got a root folder.

00:37:11.970 --> 00:37:14.630
We have one single point that says,
"This is my file system.

00:37:14.870 --> 00:37:18.160
Here's what everything looks like
underneath it." The next thing you should

00:37:18.160 --> 00:37:20.460
do is you create a file system track.

00:37:20.520 --> 00:37:24.350
And this track contains a
callback already that's already

00:37:24.350 --> 00:37:28.080
set up by DiscRecording,
or by the Content APIs.

00:37:28.370 --> 00:37:29.540
And how do you do that?

00:37:29.540 --> 00:37:31.580
Well, again, it's just one call.

00:37:31.610 --> 00:37:31.730
Dr.

00:37:31.840 --> 00:37:32.770
FileSystemTrackCreate.

00:37:32.980 --> 00:37:35.720
So you build your hierarchy,
you have your root folder.

00:37:35.760 --> 00:37:38.320
All you do is you pass in
that root folder to this call,

00:37:38.320 --> 00:37:42.360
and bingo, you've got a track.

00:37:42.360 --> 00:37:45.270
You can set a couple of properties
on the track to control whether

00:37:45.270 --> 00:37:47.740
you're doing-- you know,
control various things about

00:37:47.940 --> 00:37:49.350
the file system generation.

00:37:49.420 --> 00:37:53.440
For example, the ISO level is controlled
through a track property.

00:37:53.450 --> 00:37:55.370
Whether you're going to
generate RockRidge or not,

00:37:55.380 --> 00:37:58.120
that's controlled
through a track property.

00:37:58.710 --> 00:38:03.080
There's a lot of properties,
a lot of things you can customize.

00:38:03.080 --> 00:38:04.230
But it's all pretty straightforward.

00:38:04.320 --> 00:38:08.170
If you leave it at the defaults,
you'll probably get, you know,

00:38:08.170 --> 00:38:11.440
a really just nice normal disc.

00:38:12.750 --> 00:38:16.500
Again,
it's the same thing in Objective-C.

00:38:16.500 --> 00:38:18.700
Rather than being called
DRFileSystemTrack,

00:38:18.710 --> 00:38:23.060
it's just implemented as
a category on DRTrack.

00:38:26.570 --> 00:38:28.060
Now you've got your track.

00:38:28.120 --> 00:38:29.840
Well, you already know how
to use the Core Engine,

00:38:29.940 --> 00:38:31.900
so you just pass that
track into the Core Engine,

00:38:31.950 --> 00:38:33.540
and you just burn it.

00:38:33.600 --> 00:38:34.940
That track does the right thing.

00:38:34.940 --> 00:38:39.660
It produces all the data on the fly,
reads the files you specify,

00:38:39.730 --> 00:38:41.980
and it creates the file system.

00:38:42.510 --> 00:38:43.610
- And it burns it.

00:38:43.620 --> 00:38:45.090
You don't have to worry about it.

00:38:45.100 --> 00:38:48.450
You've specified what you want to burn,
and we do it.

00:38:50.470 --> 00:38:55.000
So let's look at the code to do,
for example, what the finder does.

00:38:55.080 --> 00:38:58.960
So the finder mounts a disc image and
burns the contents of that disc image

00:38:59.070 --> 00:39:01.980
directly without modifying anything.

00:39:02.000 --> 00:39:03.390
Well...

00:39:03.640 --> 00:39:07.840
Okay, it's two lines of code to do that.

00:39:07.870 --> 00:39:10.530
We create a real folder,
and we create a file

00:39:10.730 --> 00:39:12.140
system track based on that.

00:39:12.190 --> 00:39:14.990
We let DiscRecording
handle everything else.

00:39:15.260 --> 00:39:17.540
- And there we go,
we've got a track graph.

00:39:17.570 --> 00:39:20.340
And we pass that to the burn,
then we say, you know, okay,

00:39:20.360 --> 00:39:25.930
go ahead and do our burn right layout,
and it's done.

00:39:25.980 --> 00:39:28.240
And that's just how easy it is.

00:39:28.290 --> 00:39:30.620
We can do the same thing in Cocoa.

00:39:31.050 --> 00:39:32.830
It's the same thing.

00:39:33.140 --> 00:39:37.500
Actually, there should be a CF release
after we allocate the folder.

00:39:37.500 --> 00:39:41.430
I was going to fix that on slide,
but we didn't get a chance to do it.

00:39:42.140 --> 00:39:46.100
In Cocoa, everything's auto-released,
so you don't have to do that.

00:39:46.100 --> 00:39:48.940
If you really wanted to,
you could do this on one line.

00:39:48.990 --> 00:39:51.940
In fact,
I think our Cocoa guy was playing around,

00:39:51.940 --> 00:39:54.860
and he actually came up with a way
to do an entire burn using all the

00:39:54.860 --> 00:39:59.370
UI elements and everything in one great,
big, enormous line.

00:39:59.880 --> 00:40:03.910
I think it wrapped several times,
but it-- you could do it in one line,

00:40:04.010 --> 00:40:05.940
which is pretty neat.

00:40:08.470 --> 00:40:11.450
Okay, so those are the Content APIs.

00:40:11.450 --> 00:40:13.600
We'll create file systems
for you really easily.

00:40:13.640 --> 00:40:16.050
So if you're burning
any sort of data disc,

00:40:16.100 --> 00:40:21.930
you probably want to
use the Content APIs,

00:40:22.490 --> 00:40:24.810
unless you already know
how to create file systems,

00:40:24.810 --> 00:40:24.810
in which case, go right ahead.

00:40:26.100 --> 00:40:31.100
So now, the last part to talk
about is DiscRecording UI.

00:40:31.100 --> 00:40:33.060
These are the common UI elements.

00:40:33.130 --> 00:40:39.100
So DiscRecording UI is available
in both Cocoa and Carbon.

00:40:39.820 --> 00:40:43.100
So the Carbon support
isn't there right now.

00:40:43.100 --> 00:40:46.070
We weren't sure if we were going to have
it ready and it turns out we didn't,

00:40:46.070 --> 00:40:49.030
but it is going to definitely be
there by the time Jaguar ships.

00:40:49.090 --> 00:40:55.530
We've got lots of sample code showing
how to use it for both Carbon and Cocoa.

00:40:57.600 --> 00:41:02.230
And so the DiscRecording UI provides
a common UI for burning and erasing.

00:41:02.290 --> 00:41:05.270
It's really--it's a lot
like the print panels.

00:41:05.370 --> 00:41:10.640
Everything just is very standard,
and the user just gets one--

00:41:10.990 --> 00:41:13.830
one experience of burning,
and they really know--learn

00:41:13.830 --> 00:41:14.780
that really well.

00:41:14.970 --> 00:41:16.520
And there's only really two parts to it.

00:41:16.640 --> 00:41:20.250
There's burn setup and
there's burn progress.

00:41:20.920 --> 00:41:23.300
And we've also got some burn
and erase icons for you to

00:41:23.300 --> 00:41:25.900
use in your own applications.

00:41:25.900 --> 00:41:29.400
And again, those are really easy to use.

00:41:29.410 --> 00:41:34.100
And I think now we're gonna come up
and have Mike Shields come up and

00:41:34.250 --> 00:41:37.400
show us how to use DiscRecording
UI and show us what it looks like.

00:41:37.400 --> 00:41:38.690
Mike?

00:41:43.000 --> 00:41:45.250
Okay, hi, I'm Mike.

00:41:45.400 --> 00:41:48.840
I'm going to be showing
you the DiscRecording UI.

00:41:48.870 --> 00:41:51.180
What we're going to do is take
a look at one of the sample

00:41:51.180 --> 00:41:53.120
apps we're providing on the SDK.

00:41:53.170 --> 00:42:01.710
What this does is it provides a real,
real simple audio burn application.

00:42:02.100 --> 00:42:07.300
So what we do is we'll launch it,
and we got some audio AIFF files

00:42:07.400 --> 00:42:11.980
that we've ripped off of one
of the CDs that we've bought.

00:42:13.200 --> 00:42:16.630
And we'll just go ahead and select them.

00:42:16.790 --> 00:42:19.140
And here's the setup panel.

00:42:19.210 --> 00:42:22.190
As you can see, the setup panel,
it has a list of all the devices

00:42:22.190 --> 00:42:23.660
connected to your machine.

00:42:23.700 --> 00:42:25.320
And...

00:42:27.750 --> 00:42:31.660
Has a little device
connected to your machine,

00:42:31.660 --> 00:42:33.200
and you get to choose which one you want.

00:42:33.230 --> 00:42:38.700
So here's the internal DVDR and
the two drives up here.

00:42:38.700 --> 00:42:43.310
So we'll go ahead and pop the drive open.

00:42:44.020 --> 00:42:47.340
CD and stick it in.

00:42:47.340 --> 00:42:50.390
So, like Drew said,
the first part is selecting a device.

00:42:50.390 --> 00:42:52.550
We've selected a device,
now we need to wait for

00:42:52.550 --> 00:42:53.860
media to be inserted.

00:42:53.860 --> 00:42:55.600
So the drive sitting here
is spinning the disc up,

00:42:55.730 --> 00:42:57.940
checking to make sure it's blank,
you know, what it is.

00:42:57.940 --> 00:43:00.620
So it's recognized,
we've got a notification,

00:43:00.620 --> 00:43:04.900
and at this point in time we're
ready to burn if we wanted to.

00:43:04.900 --> 00:43:07.800
But first I'm going to
show you a little bit more.

00:43:07.800 --> 00:43:10.910
So, you know,
we can go in and configure the

00:43:10.910 --> 00:43:12.960
burn a little bit differently.

00:43:13.190 --> 00:43:15.800
For instance,
if for some reason we found we

00:43:15.800 --> 00:43:19.270
needed to slow the burn down,
we can slow it down

00:43:19.330 --> 00:43:21.090
from the maximum speed.

00:43:21.210 --> 00:43:24.610
We can tell it whether to verify
the burn or not and what we want

00:43:24.610 --> 00:43:27.310
to do once the burn is complete,
whether to eject it or

00:43:27.310 --> 00:43:28.480
mount it on the desktop.

00:43:28.480 --> 00:43:31.720
So we'll go ahead and mount it
on the desktop once it's done.

00:43:31.860 --> 00:43:35.170
And we click burn and the
progress panel comes up.

00:43:35.330 --> 00:43:37.940
So now that the burn's going,
the drive's spinning up.

00:43:37.940 --> 00:43:39.020
It's going to be a little
bit more of a slow burn.

00:43:39.020 --> 00:43:42.820
So we're putting data into its cache
and starting to write it out to disc.

00:43:42.820 --> 00:43:46.260
So we tell you what drive,
what disc the drive's going to.

00:43:46.260 --> 00:43:48.660
So if, for instance,
you have multiple ones going on,

00:43:48.660 --> 00:43:52.000
the user can figure
out which one's which.

00:43:52.130 --> 00:43:53.390
Progress for each track.

00:43:53.400 --> 00:43:56.510
And a little bit of status over
here just to give the user some

00:43:56.620 --> 00:43:59.000
feedback about what's going on.

00:43:59.000 --> 00:44:00.790
So like you said, it's pretty easy.

00:44:00.830 --> 00:44:05.640
So let's go ahead and look at the
actual code that it takes to do this.

00:44:05.650 --> 00:44:08.420
We managed to fit all on one page.

00:44:08.420 --> 00:44:10.670
So first thing we'll do,
we're going to create a track,

00:44:11.090 --> 00:44:13.060
create our array of tracks here.

00:44:13.060 --> 00:44:16.260
In this case we're creating audio tracks.

00:44:16.260 --> 00:44:18.480
And if this was a data
burning application,

00:44:18.570 --> 00:44:22.460
we'd go and create some,
create a data track and pass it back.

00:44:22.580 --> 00:44:25.540
Once we've gotten the data track,
or the audio tracks that

00:44:25.540 --> 00:44:28.830
we want in this array,
we go ahead and we create,

00:44:28.830 --> 00:44:30.840
instantiate the setup panel.

00:44:31.550 --> 00:44:33.610
And once the setup panel's instantiated,
you know,

00:44:33.740 --> 00:44:36.560
for you Cocoa programmers out there,
this is probably pretty familiar from

00:44:36.560 --> 00:44:38.920
doing something like the open panel,
for instance.

00:44:38.920 --> 00:44:39.920
So we're going to go ahead and run this.

00:44:39.920 --> 00:44:45.160
Since we instantiated it,
go ahead and run it as a modal dialog.

00:44:45.160 --> 00:44:49.560
We also have an interface to run these
things as sheets on a document window.

00:44:49.560 --> 00:44:53.240
So you could, for instance,
have a document-based application.

00:44:53.320 --> 00:44:58.100
And for each document you could burn
separately to a different drive.

00:44:58.100 --> 00:45:04.120
So once the user's configured the burn,
they can hit the OK button and they

00:45:04.300 --> 00:45:06.200
You instantiate the progress panel.

00:45:06.220 --> 00:45:10.680
Once the progress panel is instantiated,
you just say,

00:45:10.760 --> 00:45:14.290
"Begin progress panel for burn,
pass up the burn object that the

00:45:14.390 --> 00:45:17.420
setup panel has preconfigured
for you with the device,

00:45:17.420 --> 00:45:21.530
the burn speed, et cetera,
and give it the track layout that you

00:45:21.530 --> 00:45:25.160
want to burn." And once that's done,
the progress panel comes up,

00:45:25.180 --> 00:45:29.280
and you're off to go do other
things in your application.

00:45:30.340 --> 00:45:33.190
So,
let's see how progress is going along.

00:45:33.190 --> 00:45:35.940
So, we're just about done with the burn.

00:45:36.000 --> 00:45:39.930
And at this point in time,
the drive is synchronizing its caches,

00:45:39.990 --> 00:45:44.490
making sure that all the table of
contents data is written to the disk,

00:45:44.630 --> 00:45:46.190
and now it's done.

00:45:46.190 --> 00:45:46.190
So, we're going to go ahead

00:45:46.400 --> 00:45:47.440
We'll go over into iTunes.

00:45:47.670 --> 00:45:49.590
There's the audio CD.

00:45:49.590 --> 00:45:52.250
And we'll go ahead and play it.

00:45:54.110 --> 00:45:59.600
So, four lines of code to go and
create an audio CD for a user to

00:45:59.720 --> 00:46:02.990
go and play on their own machine.

00:46:03.670 --> 00:46:05.840
So that's in a nutshell.

00:46:05.840 --> 00:46:09.350
It's pretty easy.

00:46:09.350 --> 00:46:09.350
You go ahead and...

00:46:12.600 --> 00:46:16.940
Like Drew said,
the hard part's giving us the data.

00:46:16.940 --> 00:46:20.150
So I'll give it back to Drew now.

00:46:22.700 --> 00:46:24.650
Thanks, Mike.

00:46:24.650 --> 00:46:25.840
Thanks.

00:46:26.070 --> 00:46:29.030
So it's really that easy.

00:46:29.200 --> 00:46:32.110
Actually, we didn't show the actual
producing of the data,

00:46:32.110 --> 00:46:33.920
but it's just AIFF data.

00:46:34.100 --> 00:46:36.100
You know, we used AIFF because it's easy.

00:46:36.100 --> 00:46:41.100
It's 44.1 kilohertz,
almost identical to the CD audio format.

00:46:41.100 --> 00:46:45.100
So that just reads it in,
spews it out to the disc,

00:46:45.100 --> 00:46:47.200
and there we go.

00:46:47.350 --> 00:46:50.300
So that's that.

00:46:50.450 --> 00:46:55.290
So we wanted to talk a little bit about
how different things are from 1999.

00:46:56.710 --> 00:47:00.840
So back in 1999,
you could only do one burn at once.

00:47:00.970 --> 00:47:04.840
You really, you know, okay,
so you did the one thing,

00:47:04.840 --> 00:47:06.640
you clicked the mouse,
you stepped back from the machine,

00:47:06.640 --> 00:47:07.530
and you hoped it worked.

00:47:07.640 --> 00:47:11.640
Well, now drives are faster,
we've got faster computers,

00:47:11.640 --> 00:47:13.410
everything's really fast.

00:47:13.680 --> 00:47:18.860
So with these APIs,
we don't put a limit on what

00:47:18.860 --> 00:47:22.190
you can do at the same time.

00:47:22.540 --> 00:47:25.220
We actually--oh,
I guess we have the developer

00:47:25.220 --> 00:47:26.990
resources slide now,
actually.

00:47:27.140 --> 00:47:28.500
So we have lots of sample code.

00:47:28.500 --> 00:47:31.270
We have API reference
documentation complete.

00:47:31.350 --> 00:47:33.700
There's no description forthcoming.

00:47:33.700 --> 00:47:37.020
We've got some conceptual documentation
that's getting cleaned up,

00:47:37.200 --> 00:47:38.500
being pushed through tech pubs.

00:47:38.690 --> 00:47:44.150
So we've got a mailing list for everyone
to discuss what's going on and get our

00:47:44.150 --> 00:47:47.450
help adding burning to their application.

00:47:47.600 --> 00:47:53.340
So back over here, um...

00:47:54.470 --> 00:47:58.120
So, you know, like I said,
doing one burn at once,

00:47:58.230 --> 00:47:59.630
that's pretty easy.

00:47:59.910 --> 00:48:02.500
What if we did more than one at once?

00:48:02.540 --> 00:48:09.410
What if we did... five
burns all at the same time?

00:48:09.510 --> 00:48:11.290
So, oh, Mike?

00:48:15.130 --> 00:48:18.790
Actually, Mike,
so we've got five down there.

00:48:18.810 --> 00:48:22.470
We've got two up here.

00:48:22.500 --> 00:48:24.630
You're dropping the hug.

00:48:26.510 --> 00:48:31.340
Well, actually, so... Wait a second,
we've got seven drives.

00:48:31.470 --> 00:48:33.740
Think we should try seven burns?

00:48:33.850 --> 00:48:35.140
Whoo!

00:48:35.140 --> 00:48:37.140
Yeah.

00:48:37.200 --> 00:48:39.580
Oh,
that's the one with the broken button.

00:48:42.100 --> 00:48:44.390
We had to scavenge up seven
drives that were all the same

00:48:44.400 --> 00:48:47.050
so they would stack very nicely.

00:48:51.290 --> 00:48:53.000
Oh, that's got the disc in it.

00:48:53.060 --> 00:48:55.270
Yeah, that's the one that's
already got a disc in it.

00:48:55.380 --> 00:49:00.700
All right, so let's switch back to the
demo machine on the slides.

00:49:00.700 --> 00:49:06.440
Can we switch back to the... Great.

00:49:06.440 --> 00:49:12.250
Seven blank CDs.

00:49:17.700 --> 00:49:18.700
Okay.

00:49:18.710 --> 00:49:23.140
So what I did here is
I just wrote a little,

00:49:23.170 --> 00:49:25.850
quick little sample,
quick little app that all it does

00:49:25.850 --> 00:49:31.460
is as each drive is recognized
and the media gets inserted,

00:49:31.460 --> 00:49:34.240
it fires off a burn for each one.

00:49:34.240 --> 00:49:37.000
So let's go ahead and launch it.

00:49:37.000 --> 00:49:40.170
And now that it's sitting here,
I'll just start sticking

00:49:40.170 --> 00:49:43.120
the disks in the drives.

00:49:43.150 --> 00:49:45.660
And as each one comes up,
you'll see the progress panel

00:49:45.750 --> 00:49:47.800
come up and the burn will start.

00:49:47.840 --> 00:49:53.540
And it'll take a second for each,
for each drive to recognize that the,

00:49:53.540 --> 00:49:55.260
that the disk is in it.

00:50:03.120 --> 00:50:06.130
Okay, so there's the first one.

00:50:06.130 --> 00:50:10.100
And I can hear them all
starting to spin up here.

00:50:11.980 --> 00:50:14.100
One!

00:50:19.510 --> 00:50:20.270
Okay.

00:50:20.390 --> 00:50:24.000
I guess the demo gods are
not smiling on us today.

00:50:24.010 --> 00:50:25.500
Did you hot plug?

00:50:25.520 --> 00:50:26.960
Everything's plugged in.

00:50:27.100 --> 00:50:28.500
We dropped the hub on the way up.

00:50:28.500 --> 00:50:30.500
That might have had
something to do with it.

00:50:35.700 --> 00:50:41.300
[Transcript missing]

00:50:43.900 --> 00:50:44.730
- Aha.

00:50:44.740 --> 00:50:48.980
All right, so you know how we were
talking about hot plugs.

00:50:48.980 --> 00:50:50.770
Listening for notifications.

00:50:50.780 --> 00:50:51.590
Well.

00:50:55.300 --> 00:50:56.470
So let's see what happens.

00:50:56.570 --> 00:50:59.400
Oh, we've got one!

00:50:59.450 --> 00:51:00.400
Okay, that didn't really count.

00:51:00.400 --> 00:51:01.390
That was one at once.

00:51:01.550 --> 00:51:03.710
Okay, that was pretty boring.

00:51:08.600 --> 00:51:17.600
[Transcript missing]

00:51:19.300 --> 00:51:19.960
So there we go.

00:51:19.980 --> 00:51:20.850
Now we got them all coming up.

00:51:20.970 --> 00:51:22.520
So we got six drives going at once.

00:51:22.680 --> 00:51:23.830
Six going all at the same time.

00:51:23.840 --> 00:51:27.070
And we'll, uh...

00:51:28.090 --> 00:51:30.000
Just so you know,
we're not trying to fake this thing.

00:51:30.000 --> 00:51:34.960
We'll just wait for it to
at least finish one of them.

00:51:34.960 --> 00:51:37.640
What we're doing is we're
burning an actual disc image,

00:51:37.790 --> 00:51:40.210
and you can come up and take
a look at it if you wanted to,

00:51:40.210 --> 00:51:43.800
just to prove to yourself that
we actually did do a burn here.

00:51:44.600 --> 00:51:46.120
So there we go, we're almost done.

00:51:46.260 --> 00:51:51.450
Burning it, I think these things are
burning at about between 32x,

00:51:51.810 --> 00:51:52.830
somewhere around.

00:51:52.830 --> 00:51:54.930
Some of them are as fast as that.

00:51:55.370 --> 00:51:58.060
If you'd seen the demo
from the Core Graphics,

00:51:58.170 --> 00:52:01.380
we're sitting here doing
the fractal scaling here,

00:52:01.560 --> 00:52:02.790
and we're burning.

00:52:02.860 --> 00:52:06.300
And while the CPU is getting
pretty much maxed out,

00:52:06.300 --> 00:52:08.980
our threads are real-time,
so they're basically

00:52:08.980 --> 00:52:12.250
preempting anybody else,
and we aren't going to be blocked

00:52:12.250 --> 00:52:14.730
waiting for data or something like that.

00:52:14.810 --> 00:52:18.720
And I'm starting to
mount on the desktop now.

00:52:23.300 --> 00:52:24.300
Okay.

00:52:24.300 --> 00:52:26.300
Well, instead of seven at once,
we had six at once.

00:52:26.300 --> 00:52:30.330
Still pretty good.

00:52:35.350 --> 00:52:37.200
Let's go back to the slides.

00:52:37.200 --> 00:52:43.590
Okay, so we've shown you the APIs,
we've shown you what they can do,

00:52:43.590 --> 00:52:47.570
and with these APIs,
we really hope that you guys too can,

00:52:47.610 --> 00:52:52.150
you know, start burning and call
yourselves recording artists.

00:52:52.900 --> 00:52:54.070
- So we've got documentation.

00:52:54.130 --> 00:52:55.090
It's preliminary.

00:52:55.160 --> 00:52:58.350
It hasn't been cleaned
up by the tech writers,

00:52:58.350 --> 00:53:02.700
but it's available through the ADC seed.

00:53:02.820 --> 00:53:06.610
Go to the member site,
go to Download Software for Jaguar,

00:53:06.610 --> 00:53:09.280
and you should find the
documentation right there.

00:53:11.620 --> 00:53:15.220
- As far as roadmap goes,
since we're an abstraction layer,

00:53:15.220 --> 00:53:16.740
we kind of hide you from
all the other stuff.

00:53:16.740 --> 00:53:19.140
You could go to the I/O Kit sessions,
but you don't need to.

00:53:19.140 --> 00:53:24.170
You could go to the Kernel sessions,
but you don't need to.

00:53:24.370 --> 00:53:28.060
So one of the nice things is we
do actually send notifications,

00:53:28.060 --> 00:53:31.010
and those are handled by CF Run Loops,
so we encourage you to

00:53:31.010 --> 00:53:32.600
learn how those work,
because that'll be helpful.

00:53:32.600 --> 00:53:36.160
But again, when you use DiscRecording UI,
you don't have to do that,

00:53:36.200 --> 00:53:39.080
so if you're using DiscRecording UI,
you really don't even

00:53:39.080 --> 00:53:40.180
need to make this session.

00:53:40.230 --> 00:53:49.130
So that's that,
and I'll bring John up for Q&A.

00:53:54.150 --> 00:53:58.540
All right, well,
so if you have any questions about

00:53:58.540 --> 00:54:05.610
this material or if you seek additional
documentation or whatever after the show,

00:54:05.610 --> 00:54:08.080
this is your contact point.

00:54:08.160 --> 00:54:09.030
It's me.

00:54:09.030 --> 00:54:11.440
We don't want to have you contacting
the engineering team because they're

00:54:11.440 --> 00:54:11.440
making it even better so that next
year we can demo like 32 burns

00:54:11.440 --> 00:54:11.440
at the same time or something.