WEBVTT

00:00:04.000 --> 00:00:08.980
Ladies and gentlemen, please welcome
Manager Core Server Development,

00:00:08.980 --> 00:00:10.550
Kazu Yanagiharra.

00:00:20.200 --> 00:00:23.550
Good afternoon,
and thank you for attending session 802,

00:00:23.550 --> 00:00:24.660
Mac OS X Server In-Dev.

00:00:27.410 --> 00:00:29.240
Here is what we're going to cover today.

00:00:29.260 --> 00:00:32.900
We're going to start off by talking about
remote server administration and the

00:00:32.900 --> 00:00:36.500
monitoring capabilities of Jaguar server,
and also what you can do to

00:00:36.580 --> 00:00:39.410
make sure your software is
fully remote capable as well.

00:00:39.770 --> 00:00:41.960
After that,
we're going to talk about Apple's

00:00:42.060 --> 00:00:45.140
directory services architecture,
open directory.

00:00:45.140 --> 00:00:48.100
Since there's a separate
session on Thursday,

00:00:48.100 --> 00:00:50.010
we're going to only talk
briefly about this here.

00:00:51.680 --> 00:00:55.600
Then we're going to talk about high
availability services in the Java server,

00:00:55.880 --> 00:00:59.520
followed by some updates
in the file services area.

00:00:59.520 --> 00:01:02.520
And lastly, we're going to talk about
web-related features that's

00:01:02.520 --> 00:01:04.600
built into the Java server.

00:01:05.170 --> 00:01:10.140
And of course,
there's a Q&A session at the end.

00:01:10.140 --> 00:01:13.670
And here's what we hope you're going
to learn today in this session.

00:01:15.670 --> 00:01:20.840
Okay, remote server administration
and monitoring.

00:01:20.900 --> 00:01:23.900
We've been hearing from many and
many of our customers that they

00:01:23.900 --> 00:01:28.650
want to run their servers headless,
remotely, without the monitor attached.

00:01:28.920 --> 00:01:33.300
In fact, we've been hearing this from
Apple's internal ISN organization,

00:01:33.300 --> 00:01:37.700
and it really helps them save space,
helps them save money, and in many cases,

00:01:37.700 --> 00:01:40.570
they just want to throw their
servers away into the unsecured

00:01:40.570 --> 00:01:44.280
closet and be able to manage those
servers remotely from anywhere,

00:01:44.330 --> 00:01:47.040
including office, home,
or even on the road.

00:01:48.460 --> 00:01:50.690
And of course,
they want to monitor multiple

00:01:50.690 --> 00:01:54.790
servers simultaneously without
being at the server as well.

00:01:56.180 --> 00:02:00.230
So we've listened to our customers
and are making some changes in Jaguar

00:02:00.360 --> 00:02:02.940
Server to meet that requirement.

00:02:03.030 --> 00:02:07.820
First, the OS itself now boot without
having the monitor attached,

00:02:07.820 --> 00:02:11.390
which is not the case with the
current version of Mac OS X Server.

00:02:11.640 --> 00:02:13.750
Second,
we're upgrading all of our management

00:02:13.890 --> 00:02:16.440
software so it's all remote-friendly.

00:02:16.480 --> 00:02:18.600
Most of them already were,
but some weren't.

00:02:18.950 --> 00:02:21.810
For example,
in print server management software,

00:02:22.060 --> 00:02:25.860
today you have to create print
queues manually on the local machine.

00:02:26.000 --> 00:02:29.770
With Jaguar Server,
you can do so remotely from the network.

00:02:30.370 --> 00:02:33.890
or the other utilities such
as directory services tools

00:02:34.080 --> 00:02:36.300
will also be remote friendly.

00:02:36.370 --> 00:02:42.780
And lastly, with Jaguar Server,
admins will be able to set system

00:02:42.910 --> 00:02:46.170
preferences or perform software update
over the network remotely as well.

00:02:48.190 --> 00:02:52.180
So with these changes and new
capabilities in Jaguar's server,

00:02:52.180 --> 00:02:56.350
some of your software may have to be
changed so that it runs well on all the

00:02:56.350 --> 00:02:59.000
configurations our customers will have.

00:02:59.150 --> 00:03:02.630
For example, if the server doesn't have a
monitor and keyboard attached,

00:03:02.780 --> 00:03:05.700
it means likely there is
no system login session,

00:03:05.770 --> 00:03:09.200
which means your software cannot
rely on having Finder there

00:03:09.200 --> 00:03:12.600
to send an Apple event to,
using AppleScript,

00:03:12.730 --> 00:03:15.420
or having dependencies on Cocoa.

00:03:16.790 --> 00:03:18.950
So exactly what do you need to do?

00:03:19.120 --> 00:03:22.660
You need to really decouple
any GUI application,

00:03:22.660 --> 00:03:26.130
any GUI component that's built
into your server software,

00:03:26.130 --> 00:03:29.690
and make sure that remaining core
functionality is packaged as a daemon

00:03:29.690 --> 00:03:32.100
that can run in the background.

00:03:32.100 --> 00:03:35.990
And make sure that separated
GUI component can run not

00:03:36.290 --> 00:03:41.400
only on the server machine,
but also on any remote machine,

00:03:41.400 --> 00:03:41.400
and be able to connect
to the server machine.

00:03:42.080 --> 00:03:43.880
Let's look at an example.

00:03:44.020 --> 00:03:48.990
Let's say you have a backup software
that's based on Cocoa and it runs on a

00:03:48.990 --> 00:03:54.680
server machine today and perhaps have
a couple menu items such as Backup

00:03:54.680 --> 00:03:57.740
Now or Configure Backup Software.

00:03:57.940 --> 00:04:00.860
This won't work very well because
the admin doesn't want to walk

00:04:00.990 --> 00:04:04.100
all the way to the server closet,
attach monitor and keyboard,

00:04:04.120 --> 00:04:09.070
and select menu item every time he or she
wants to configure the backup software.

00:04:09.150 --> 00:04:10.610
So here's what you need to do.

00:04:10.910 --> 00:04:14.580
You need to separate the backup
software into two components:

00:04:14.650 --> 00:04:20.680
the Cocoa GUI application and the backup
engine that can run in the background.

00:04:21.500 --> 00:04:24.760
And you also need to make sure that the
Cocogui application that you separated

00:04:25.090 --> 00:04:28.880
can also run on the remote machine and
be able to communicate with the backup

00:04:28.970 --> 00:04:31.700
engine running on a server machine.

00:04:32.620 --> 00:04:36.030
Also, since the Cocoa GUI application
is running on a remote machine,

00:04:36.060 --> 00:04:40.290
or maybe running on a remote machine,
you may want to provide server

00:04:40.290 --> 00:04:45.740
browsing UI so that your user can
easily select a target server.

00:04:46.290 --> 00:04:49.860
And you can use the new DNS service
discovery API to achieve this.

00:04:49.860 --> 00:04:53.550
And if you're interested in this API,
there's a session, 8.11,

00:04:53.800 --> 00:04:57.220
Zero Configuration Networking,
or I guess it's now called Rendezvous,

00:04:57.220 --> 00:04:58.570
on Thursday at 2 p.m.

00:05:01.590 --> 00:05:04.240
And lastly, now that you have two
different components,

00:05:04.350 --> 00:05:08.200
you may want to consider packaging those
two parts into two separate installers.

00:05:08.200 --> 00:05:12.120
It's going to make life much
easier for users that way.

00:05:14.530 --> 00:05:17.140
Now,
here's an example of how we designed one

00:05:17.140 --> 00:05:21.880
of our server administration software,
NetInfo Domain Setup.

00:05:22.220 --> 00:05:26.010
The core functionality is
implemented as a command line tool,

00:05:26.250 --> 00:05:30.220
shown here in orange,
and it always runs on the server machine.

00:05:30.440 --> 00:05:34.210
And then the Cocoa GUI application
that user double-clicks on is

00:05:34.210 --> 00:05:38.260
just actually a small wrapper,
and it simply makes a call to the command

00:05:38.260 --> 00:05:42.000
line tool to actually do the actual work.

00:05:42.540 --> 00:05:44.810
And here's what happens when
the Cocoa GUI applications

00:05:44.870 --> 00:05:46.520
run on a remote machine.

00:05:46.650 --> 00:05:50.470
It first presents the user
with a user interface that lets

00:05:50.470 --> 00:05:52.950
them select the target server.

00:05:53.040 --> 00:05:57.820
Then brings up an authentication dialog
where a user can type in the admin

00:05:57.820 --> 00:06:02.910
name and password of the target server,
not of the local machine.

00:06:03.340 --> 00:06:07.100
The application then uses the name and
password to establish a secure shell

00:06:07.100 --> 00:06:12.760
session to the server machine and simply
invoke that tool within the session.

00:06:12.760 --> 00:06:15.040
With this technique,
we didn't have to write any

00:06:15.040 --> 00:06:18.160
new authentication code,
networking code,

00:06:18.190 --> 00:06:20.790
and still be able to actually
support remote administration.

00:06:20.790 --> 00:06:24.030
So this is something you may
want to think about also.

00:06:24.130 --> 00:06:26.230
It worked out pretty well for us.

00:06:28.350 --> 00:06:32.340
Now I will talk a little bit
about remote server monitoring.

00:06:32.340 --> 00:06:35.250
With Jaguar Server,
you'll be able to monitor remote

00:06:35.250 --> 00:06:37.580
servers in three different ways.

00:06:37.760 --> 00:06:42.090
First, for Unix fans,
you can continue to use Terminal, SSH,

00:06:42.090 --> 00:06:46.300
and command line tools such as
Netstat and Top to keep their

00:06:46.350 --> 00:06:47.920
eyes on the remote servers.

00:06:47.960 --> 00:06:51.260
It's simple, but it works real well
for some of our users.

00:06:51.280 --> 00:06:54.920
And if you're developing a
server software on Jaguar Server,

00:06:54.920 --> 00:06:58.330
you may want to think about
delivering a tool that lets

00:06:58.330 --> 00:07:02.850
those users actually monitor your
services over the command line.

00:07:03.710 --> 00:07:07.100
The second way is using SNMP.

00:07:07.220 --> 00:07:10.640
We ported NetSNMP,
a popular open source package,

00:07:10.800 --> 00:07:13.790
to a Jaguar platform,
and it's being shipped as part of both

00:07:14.040 --> 00:07:17.610
desktop and server releases of Jaguar.

00:07:17.760 --> 00:07:22.690
includes an agent and 15 or so
basic MIBs with which admin can

00:07:22.690 --> 00:07:26.200
remotely monitor CPU utilization,
the free disk space,

00:07:26.260 --> 00:07:31.970
and so on using industry standard
tools such as HP OpenView.

00:07:32.530 --> 00:07:35.760
And there's definitely a developer
opportunity here to deliver additional

00:07:35.760 --> 00:07:39.690
MIPS for the Jaguar Server desktop,
a Jaguar Server platform.

00:07:40.880 --> 00:07:43.850
The third way is an application
called Server Status,

00:07:43.880 --> 00:07:47.950
which is a brand new application that's
built into the Jaguar server and I would

00:07:48.060 --> 00:07:50.650
like to show it to you right now.

00:07:56.820 --> 00:07:58.800
Demo 2, please.

00:07:58.800 --> 00:08:00.800
Go.

00:08:00.800 --> 00:08:02.800
Okay, let's launch server status.

00:08:02.800 --> 00:08:03.770
Takes a couple seconds.

00:08:03.800 --> 00:08:04.660
What's up already?

00:08:04.800 --> 00:08:08.250
Let's connect to a server.

00:08:15.090 --> 00:08:16.960
Okay, so on the left-hand side,
we are connected to

00:08:16.960 --> 00:08:17.990
this server right here.

00:08:17.990 --> 00:08:20.980
And on the right-hand side,
you see several tabs.

00:08:20.980 --> 00:08:25.160
The overview tab contains basic
information about the server,

00:08:25.160 --> 00:08:28.640
such as the version number of the OS,
the serial number,

00:08:28.640 --> 00:08:30.990
and basic network configuration.

00:08:31.540 --> 00:08:34.690
The next tab, Logs,
lets you display different system logs.

00:08:34.760 --> 00:08:38.160
You can select any one
you'd like from here.

00:08:38.250 --> 00:08:40.520
And it's actually a live view,
meaning as information

00:08:40.520 --> 00:08:42.920
gets added to the log file,
this automatically

00:08:43.030 --> 00:08:44.580
updates and scrolls up.

00:08:45.240 --> 00:08:47.980
We have not implemented
the hardware tab yet,

00:08:48.220 --> 00:08:51.140
but you would see things
such as CPU utilization,

00:08:51.180 --> 00:08:55.780
network throughput,
and information on mounted volumes here.

00:08:56.420 --> 00:08:59.890
Now, if you look at here,
you also see a list of all the services

00:09:00.000 --> 00:09:02.040
that are available on the server machine.

00:09:02.060 --> 00:09:05.300
And the ones that are currently
active is marked with a blue circle,

00:09:05.320 --> 00:09:07.890
and also their service names bold face.

00:09:07.960 --> 00:09:11.810
So, for example, AFP Server,
the directory services, FTP,

00:09:11.810 --> 00:09:13.990
and Web are currently running.

00:09:14.400 --> 00:09:17.540
Clicking on AFP Server,
you see again different tabs.

00:09:17.640 --> 00:09:20.010
The overview tabs again shows
you the basic information

00:09:20.020 --> 00:09:23.330
about that particular server,
AFP in this case.

00:09:23.410 --> 00:09:28.110
You can go to the logs to see
either error log or access log.

00:09:28.210 --> 00:09:30.230
And again, this is live.

00:09:30.420 --> 00:09:32.790
You can also go to
Connected Users window here.

00:09:33.020 --> 00:09:34.970
You only have one user
connected right now.

00:09:34.990 --> 00:09:38.140
You can either send a
message or disconnect.

00:09:38.140 --> 00:09:42.380
And the last tab is Graphs tab,
which lets you see the histogram

00:09:42.380 --> 00:09:47.800
of either throughput or number of
connected users over a period of time.

00:09:47.880 --> 00:09:51.790
And you can specify the time right here,
anywhere from last one

00:09:51.920 --> 00:09:53.850
hour up to last seven days.

00:09:55.440 --> 00:09:59.460
Now, walking down the services list,
you notice all the services have the

00:09:59.460 --> 00:10:03.100
Overview tab in a consistent way,
so you can actually see what's

00:10:03.100 --> 00:10:04.780
going on there at a glance.

00:10:04.780 --> 00:10:08.630
And most of them also have Logs tab,
so you can see their log files.

00:10:08.770 --> 00:10:11.780
Some of them don't, but most of them do.

00:10:12.510 --> 00:10:17.500
And some services such as Mail or the
print servers have their own unique tab.

00:10:17.500 --> 00:10:21.230
For example, for the print server,
there's a queues tab that lets

00:10:21.290 --> 00:10:26.440
you view different print queues
and status on each of them.

00:10:26.440 --> 00:10:28.010
And so on.

00:10:28.820 --> 00:10:31.150
Now, you can connect to as many
servers as you'd like,

00:10:31.300 --> 00:10:34.630
and they all get listed on the left-hand
side right here in this column.

00:10:34.850 --> 00:10:38.380
So once you start to get too crowded,
you can do things like showing

00:10:38.380 --> 00:10:42.600
only the currently active services,
or you can do filtering by either

00:10:42.600 --> 00:10:45.480
service name or the server name,
or both.

00:10:45.660 --> 00:10:50.870
So for example,
you can say something like

00:10:50.870 --> 00:10:52.180
services that contains letter W,
and it will display that.

00:10:54.340 --> 00:10:58.470
Now let's instantiate
another window here.

00:10:58.690 --> 00:11:01.370
This is a different window
by looking into same data.

00:11:01.370 --> 00:11:02.740
The list here is identical.

00:11:02.840 --> 00:11:07.150
But you can use this multiple windows
to actually view different services.

00:11:07.280 --> 00:11:10.700
So for example, in this window,
you may be looking at list of

00:11:10.810 --> 00:11:14.080
connected users to the AFP server.

00:11:14.080 --> 00:11:16.840
And you can actually hide this guy.

00:11:16.840 --> 00:11:20.920
Hide this guy

00:11:21.890 --> 00:11:26.180
And you may be watching
web service right here.

00:11:26.180 --> 00:11:28.260
Maybe it's throughput.

00:11:29.600 --> 00:11:34.910
And you can shrink this guy and hide it.

00:11:35.220 --> 00:11:37.800
And you can really instantiate
as many windows as you'd like,

00:11:37.810 --> 00:11:41.800
so you can simultaneously monitor
number of different servers,

00:11:41.800 --> 00:11:44.310
or different services,
or different tabs within the same

00:11:44.320 --> 00:11:47.130
service running on the same server.

00:11:48.060 --> 00:11:51.360
Lastly, we do have the standard
Mac OS X toolbar on the top.

00:11:51.390 --> 00:11:55.120
The one on the left-hand side lets
you jump to different administration

00:11:55.470 --> 00:11:56.790
tools for Jaguar Server.

00:11:57.060 --> 00:12:00.150
And on the left-hand side is a
set of commonly used commands,

00:12:00.150 --> 00:12:03.020
and of course you can customize
it just like any other

00:12:03.110 --> 00:12:05.020
standard Mac OS X application.

00:12:07.520 --> 00:12:10.900
So that's the real high-level
overview of server status application.

00:12:10.900 --> 00:12:14.450
And back to the slide, please.

00:12:14.560 --> 00:12:19.220
And now I'd like to talk a little bit
about the architecture of server status.

00:12:22.400 --> 00:12:26.270
The application itself is a
Cocoa application that communicates with

00:12:26.340 --> 00:12:32.440
the backend server using XML over HTTP,
and of course with SSL for security.

00:12:32.640 --> 00:12:35.440
On the backend, on the server machine,
this way,

00:12:35.540 --> 00:12:39.240
you have a stripped-down version of
Apache web server with a couple of

00:12:39.310 --> 00:12:41.420
custom modules that we've developed.

00:12:41.580 --> 00:12:44.770
There is also a set
of command line tools,

00:12:44.770 --> 00:12:49.290
one per service,
that knows how to talk to the particular

00:12:49.290 --> 00:12:50.520
service and gather information.

00:12:50.670 --> 00:12:55.270
So for example, when the user clicks on
AFP connected users tab,

00:12:55.430 --> 00:12:59.400
the server status application sends
an HTTP request to the web server.

00:12:59.460 --> 00:13:03.100
Web server invokes the
AFP command line tool,

00:13:03.150 --> 00:13:06.870
which in turn talks to the AFP server,
gather whatever information

00:13:06.870 --> 00:13:10.180
it needs to gather,
and send the data back up the chain.

00:13:10.800 --> 00:13:12.790
This design is working
out pretty well for us.

00:13:12.880 --> 00:13:16.070
It's real simple,
but it's real easy to unit test,

00:13:16.230 --> 00:13:18.980
easy to debug using
standard tools out there.

00:13:19.070 --> 00:13:23.490
And notice that back end is web server,
meaning if we decide to support

00:13:23.490 --> 00:13:27.270
web browser-based UI in the future,
it's going to be relatively

00:13:27.270 --> 00:13:28.810
easy for us to migrate.

00:13:29.580 --> 00:13:31.730
Now,
this whole thing is private right now,

00:13:31.730 --> 00:13:35.100
and there is no public API,
but we are looking into and we're

00:13:35.100 --> 00:13:38.600
interested in opening this one up to
developers if there's enough demand.

00:13:38.600 --> 00:13:43.730
So if you think this is something that
might benefit you or may help you write

00:13:43.730 --> 00:13:47.070
a better software for a Java server,
please give that feedback to

00:13:47.230 --> 00:13:50.330
our developer relations person,
Tom Weyer.

00:13:50.480 --> 00:13:53.810
We'd appreciate any
feedback you may have.

00:13:57.580 --> 00:14:02.640
Okay, let's move on to the next topic,
open directory.

00:14:02.660 --> 00:14:05.320
As I've mentioned earlier,
there is a separate session

00:14:05.440 --> 00:14:08.130
on Thursday to talk about
this technology in detail,

00:14:08.240 --> 00:14:10.280
so here we're going to
only briefly talk about it.

00:14:11.190 --> 00:14:16.510
And also, there were a lot of mentioning
of this technology in Eric's

00:14:16.510 --> 00:14:21.240
presentation in previous sessions,
so there are some overlapping,

00:14:21.240 --> 00:14:21.240
but it's a really important technology,
so I want to reiterate.

00:14:22.430 --> 00:14:23.740
So far is it.

00:14:23.750 --> 00:14:26.370
It's Apple's directory
services architecture that lets

00:14:26.510 --> 00:14:29.520
different applications share
information on the network.

00:14:29.610 --> 00:14:34.740
And it's being utilized by a number of
services in Jaguar Server and also by

00:14:34.750 --> 00:14:39.610
different components in Mac OS X Desktop,
such as system preferences

00:14:39.610 --> 00:14:41.110
and login window.

00:14:42.090 --> 00:14:45.440
It's been available in previous
versions of Mac OS X Server,

00:14:45.470 --> 00:14:48.340
but the Jaguar released a
number of new enhancements,

00:14:48.410 --> 00:14:50.890
including the password server.

00:14:52.340 --> 00:14:56.950
Using Open Directory Read and Write API,
developers can access any directory

00:14:57.010 --> 00:15:01.600
system without needing to know the
details of the particular system.

00:15:01.740 --> 00:15:05.520
And as Eric mentioned earlier,
Apple ships with NetInfo plugin,

00:15:05.520 --> 00:15:10.150
LDAP plugin, both versions 2 and 3,
and a plugin to access flat files,

00:15:10.150 --> 00:15:11.100
read-only.

00:15:11.100 --> 00:15:14.550
And of course,
Open Directory also provides an API so

00:15:14.550 --> 00:15:18.870
you can create your own plugin to access
any other directory systems out there,

00:15:19.160 --> 00:15:23.120
such as NIS and Novell directory,
or even database, if you'd like.

00:15:26.850 --> 00:15:30.370
So what kind of information do
you want to store in a directory?

00:15:30.610 --> 00:15:32.670
We hear a lot of questions about this.

00:15:32.880 --> 00:15:36.140
And it's actually pretty much
anything from user attributes,

00:15:36.330 --> 00:15:39.190
machine attributes,
any information that you want to

00:15:39.190 --> 00:15:43.140
share among multiple applications,
or even service preferences.

00:15:43.280 --> 00:15:46.510
So let's look at user
attributes as an example.

00:15:46.660 --> 00:15:50.930
Let's say you are writing a VPN server
that supports per user quota on

00:15:50.930 --> 00:15:53.400
how long they can stay connected.

00:15:53.670 --> 00:15:59.800
Instead of saving that per user quota
information inside your own data file,

00:15:59.830 --> 00:16:03.600
you would want to store that information
in a directory in the user record.

00:16:03.610 --> 00:16:08.920
And you can do so pretty easily by using
Open Directory's API to find that record,

00:16:08.920 --> 00:16:11.870
add the attribute, and later on find it.

00:16:12.770 --> 00:16:15.930
Another example would
be service preferences.

00:16:16.000 --> 00:16:19.640
So you can store the VPN server's
preferences in directory instead of,

00:16:19.730 --> 00:16:21.340
again, in your own data file.

00:16:21.340 --> 00:16:24.920
And that way,
the VPN admin GUI can simply use

00:16:25.080 --> 00:16:29.620
directory services API to access the
information anywhere on a network,

00:16:29.620 --> 00:16:33.680
so it really simplifies implementation
of remote administration

00:16:33.770 --> 00:16:35.670
support in your software.

00:16:38.610 --> 00:16:41.600
Now,
Eric also talked about Password Server.

00:16:41.840 --> 00:16:45.560
It's based on SASO standard,
and it lets services verify

00:16:45.640 --> 00:16:48.380
passwords over the network,
but it does not allow you to

00:16:48.380 --> 00:16:50.340
retrieve it for better security.

00:16:50.500 --> 00:16:55.510
It supports a number of popular
authentication methods out there,

00:16:55.650 --> 00:16:59.230
including NTLAM Manager hash, APOP,
CRAM MD5,

00:16:59.660 --> 00:17:04.500
any of the Apple's authentication methods
used by Apple Share and other protocols,

00:17:04.670 --> 00:17:05.310
and SHA-1.

00:17:05.500 --> 00:17:10.010
And Password Server also provides a
number of password policy features,

00:17:10.150 --> 00:17:13.280
such as disabling accounts
after a certain time,

00:17:13.280 --> 00:17:16.190
while enforcing minimum password links.

00:17:17.680 --> 00:17:21.440
So that's really the five minutes real
high-level overview of open directory.

00:17:21.440 --> 00:17:25.390
And we encourage you to attend
the Thursday session at 3:30 p.m.

00:17:25.390 --> 00:17:28.730
if you're interested in learning
more about this technology.

00:17:28.730 --> 00:17:31.670
It's in the room C right
across from this room.

00:17:31.870 --> 00:17:33.790
And also,
if you are interested in checking

00:17:33.790 --> 00:17:37.710
out the API documentation,
it's available on the developer website

00:17:37.930 --> 00:17:42.990
at developer.apple.com/techpubs.

00:17:43.320 --> 00:17:45.860
And now that it's being open sourced,
you can download the whole open

00:17:45.980 --> 00:17:51.000
source code base from Apple's
open source website as well.

00:17:53.730 --> 00:17:56.230
Okay, now I would like to
invite Scott Mulligan,

00:17:56.230 --> 00:18:00.340
manager of Server Infrastructure Group,
to tell us about high availability

00:18:00.400 --> 00:18:02.110
services in Jaguar Server.

00:18:03.920 --> 00:18:05.900
Which button is it?

00:18:05.900 --> 00:18:07.060
Which one?

00:18:07.060 --> 00:18:09.590
Okay, thanks.

00:18:11.850 --> 00:18:13.700
Good afternoon.

00:18:13.710 --> 00:18:17.100
My name is Scott Mulligan,
and today I'll be talking to you briefly

00:18:17.100 --> 00:18:20.210
about high availability services.

00:18:24.150 --> 00:18:26.700
First,
let's make sure we understand what we

00:18:26.700 --> 00:18:29.340
mean by high availability services.

00:18:29.340 --> 00:18:32.620
In short,
the goal of high availability services

00:18:32.620 --> 00:18:39.710
is to make sure that servers and services
always function and are always available.

00:18:43.700 --> 00:18:47.380
Some of you may be familiar with
the utility we first introduced with

00:18:47.490 --> 00:18:51.790
Mac OS X Server 10.1 called Watchdog.

00:18:52.110 --> 00:18:59.990
The watchdog is a utility that launches
service processes and then monitors them.

00:19:00.500 --> 00:19:04.140
It can detect if a service fails
and then relaunch that service,

00:19:04.220 --> 00:19:07.340
making it once again available.

00:19:07.340 --> 00:19:10.800
Another high availability
feature tied to the Watchdog

00:19:10.940 --> 00:19:12.800
utility is heartbeat restart.

00:19:12.800 --> 00:19:16.750
The heartbeat restart feature

00:19:17.410 --> 00:19:23.960
Utilizes a specific feature of the server
hardware in order to detect when the

00:19:23.960 --> 00:19:29.150
operating system has crashed or has hung,
and then it can restart

00:19:29.150 --> 00:19:31.680
the operating system.

00:19:31.680 --> 00:19:35.950
Details on the watchdog utility
are available in its man page.

00:19:37.710 --> 00:19:40.920
In Jaguar Server,
we are proud to announce the addition

00:19:40.940 --> 00:19:44.440
of two new high availability services.

00:19:44.690 --> 00:19:48.630
The first of these is a new
utility called Disk Space Monitor.

00:19:48.750 --> 00:19:52.930
The goal of Disk Space Monitor is
to monitor and manage the

00:19:52.930 --> 00:19:58.100
amount of free space that
is available on system volumes.

00:19:58.860 --> 00:20:01.560
It does this to assure that
services will not be interrupted

00:20:01.570 --> 00:20:04.340
due to a lack of free space.

00:20:04.400 --> 00:20:08.200
To accomplish this goal,
Disk Space Monitor

00:20:08.860 --> 00:20:12.580
periodically checks volumes to
see if they're short on space.

00:20:12.640 --> 00:20:16.650
And if a specific user-definable
threshold is exceeded,

00:20:16.800 --> 00:20:23.220
it will utilize a notification
script to alert the administrator

00:20:23.570 --> 00:20:28.740
Allowing them to know
whether of the... Excuse me.

00:20:28.960 --> 00:20:33.430
It will send a notification
to the administrator informing

00:20:34.560 --> 00:20:36.560
them of the situation.

00:20:36.670 --> 00:20:39.590
If a second user-definable
threshold is exceeded,

00:20:39.680 --> 00:20:43.840
the disk space monitor will
execute a recovery script.

00:20:43.990 --> 00:20:48.860
That recovery script can take certain
predefined actions in an attempt to

00:20:49.030 --> 00:20:55.990
free up disk space on those volumes
found short to be free of disk space.

00:20:58.920 --> 00:21:04.730
This slide lists the default recovery
actions that Disk Space Monitor can take.

00:21:04.840 --> 00:21:07.270
As you can see,
these recovery actions are

00:21:07.380 --> 00:21:10.700
geared toward managing log files.

00:21:10.820 --> 00:21:14.160
This is because on a server,
log files are usually active and

00:21:14.160 --> 00:21:18.540
recording the transactions of the
services that server is providing.

00:21:18.670 --> 00:21:22.220
As such,
these log files are continually growing.

00:21:22.420 --> 00:21:27.020
Log files are probably the
number one cause for volumes

00:21:27.020 --> 00:21:29.260
running short of free space.

00:21:29.260 --> 00:21:33.300
But notice that this slide
says default actions.

00:21:33.490 --> 00:21:37.340
Since Disk Space Monitor uses
a recovery script,

00:21:37.610 --> 00:21:43.300
that script is extensible by the
administrator so that it can deal

00:21:43.300 --> 00:21:46.100
with a variety of file types.

00:21:50.720 --> 00:21:53.580
The second high availability
service we're announcing

00:21:53.710 --> 00:21:55.640
today is called IP Failover.

00:21:55.710 --> 00:22:00.020
With IP Failover,
the system administrator can create a

00:22:00.060 --> 00:22:06.790
server scenario whereby a standby server
can take over the network address of a

00:22:06.800 --> 00:22:10.280
primary server when failure is detected.

00:22:10.420 --> 00:22:13.580
When the standby server detects
that the primary server is no

00:22:13.580 --> 00:22:17.590
longer functioning properly,
it will perform...

00:22:17.730 --> 00:22:21.420
The failover action,
taking the IP address of that server.

00:22:21.420 --> 00:22:25.420
When it detects that the primary
server is again functioning properly,

00:22:25.420 --> 00:22:28.100
it will perform what we
call a failback action,

00:22:28.100 --> 00:22:31.440
relinquishing the primary
server's network address.

00:22:33.000 --> 00:22:37.370
The standby server will send email
notifications for all transitions,

00:22:37.370 --> 00:22:41.010
and a mechanism is provided
for the standby server to

00:22:41.090 --> 00:22:46.230
perform multiple ordered actions
before and after acquiring or

00:22:46.230 --> 00:22:49.280
relinquishing a network address.

00:22:51.360 --> 00:22:55.820
Here are a few tidbits on IP failover.

00:22:56.260 --> 00:23:00.490
First of all,
standard OS mechanisms are used to notify

00:23:00.490 --> 00:23:04.630
network services of the transitions.

00:23:05.360 --> 00:23:10.740
There is an option for providing
notifications without actually

00:23:10.740 --> 00:23:13.460
performing the IP failover.

00:23:13.460 --> 00:23:17.580
You'd utilize this if you just
wanted to monitor a system.

00:23:20.460 --> 00:23:23.740
Failover scripts are extensible,
allowing system administrators

00:23:23.820 --> 00:23:28.880
to custom tailor IP failovers'
actions to their specific needs.

00:23:28.910 --> 00:23:33.510
IP failover's simple and flexible
design makes it easy to leverage

00:23:33.510 --> 00:23:35.750
in a multitude of scenarios.

00:23:36.050 --> 00:23:39.800
And it is an excellent
solution for certain scenarios.

00:23:39.920 --> 00:23:41.780
For example,

00:23:44.310 --> 00:23:49.040
For example, take the case of a server
that's providing static data

00:23:49.360 --> 00:23:51.550
over the world wide web.

00:24:04.090 --> 00:24:07.360
Sorry for the pause.

00:24:07.430 --> 00:24:10.880
In that particular case,
IP failover would be one component

00:24:10.950 --> 00:24:13.270
of the complete solution.

00:24:13.800 --> 00:24:16.110
It would be providing the static data.

00:24:16.410 --> 00:24:18.690
However,
I would want to point out on this

00:24:18.730 --> 00:24:23.050
slide that the actual mirroring
of the data to the standby server

00:24:23.050 --> 00:24:25.340
is not a component of IP failover.

00:24:27.990 --> 00:24:30.330
This is a typical usage slide.

00:24:30.630 --> 00:24:34.040
Here we have a primary
server and a standby server.

00:24:34.120 --> 00:24:36.680
Each have a public address
and a private address.

00:24:36.750 --> 00:24:41.720
So each of these machines
has two network interfaces.

00:24:42.990 --> 00:24:46.740
Disk storage is mirrored
to the standby server.

00:24:46.960 --> 00:24:49.770
Again, IP failover does not
accomplish that mirroring.

00:24:49.770 --> 00:24:52.490
That's done by another mechanism.

00:24:56.120 --> 00:24:58.870
So both of these machines have
a well-known address and a

00:24:58.880 --> 00:25:01.410
lesser-known private address.

00:25:01.610 --> 00:25:06.060
The primary server has a process
that's repeatedly broadcasting on

00:25:06.060 --> 00:25:08.370
the network that it's alive and well.

00:25:08.370 --> 00:25:12.840
And the standby server is listening for
those messages from the primary server.

00:25:15.380 --> 00:25:20.450
Here we see the broadcast process
of IP failover on the primary

00:25:20.450 --> 00:25:25.300
server and the listening process of
IP failover on the standby server.

00:25:25.350 --> 00:25:29.500
Note that broadcasts are
sent over both networks.

00:25:29.990 --> 00:25:32.730
In a real scenario,
the primary server will probably

00:25:32.730 --> 00:25:36.380
be doing something interesting,
like serving up product data

00:25:36.850 --> 00:25:38.650
sheets via the World Wide Web.

00:25:38.780 --> 00:25:42.230
Here you can see the web server
sending and receiving data to and

00:25:42.230 --> 00:25:46.670
from the network while the broadcast
process continues to send its

00:25:46.670 --> 00:25:50.290
packets over both network interfaces.

00:25:50.460 --> 00:25:55.810
Of course, the standby server may be
doing something as well,

00:25:55.810 --> 00:25:55.810
like

00:25:56.050 --> 00:26:01.880
Like analyzing SETI radio telescope data
for a project underway at UC Berkeley.

00:26:03.250 --> 00:26:07.030
So let's look at the failure situation.

00:26:07.120 --> 00:26:09.440
It looks like somebody's
tripped a circuit breaker here.

00:26:09.610 --> 00:26:13.910
I guess it's a good thing our standby
server's on a different circuit.

00:26:18.500 --> 00:26:22.740
So you can see the broadcast packets
have stopped coming into the standby

00:26:22.740 --> 00:26:25.020
server and a failure is detected.

00:26:25.060 --> 00:26:29.020
Immediately,
an email notification is sent.

00:26:30.390 --> 00:26:34.900
Next, an ordered set of
pre-acquisition scripts are run.

00:26:34.990 --> 00:26:38.860
In this case,
we have a single script which is going

00:26:38.860 --> 00:26:41.810
to shut down the SETI analysis program.

00:26:43.460 --> 00:26:47.790
Stopping the study analysis program
relieves the load on our standby server

00:26:48.210 --> 00:26:52.620
so that it may do the important work of
providing the service that our primary

00:26:52.620 --> 00:26:54.540
server was doing before it went down.

00:26:56.480 --> 00:27:05.090
Next, the standby server must acquire the
public address of the primary server.

00:27:05.140 --> 00:27:08.800
It assigns that address to
the network interface that

00:27:08.800 --> 00:27:11.440
corresponds to the public network.

00:27:11.500 --> 00:27:16.640
And then finally, an ordered set of
post-acquisition scripts are run.

00:27:16.690 --> 00:27:21.670
In this case, we have a single script
that starts the web server.

00:27:23.030 --> 00:27:25.560
and the web server is started.

00:27:25.570 --> 00:27:30.660
At this point, our standby server is
servicing web requests,

00:27:30.730 --> 00:27:34.960
masquerading as the primary server,
and it's listening for the

00:27:35.170 --> 00:27:36.910
primary server to return.

00:27:38.570 --> 00:27:43.210
Now here are a couple of important
points about the way IP failover works.

00:27:43.340 --> 00:27:48.260
First, the failover action will only take
place when the broadcast packets

00:27:48.260 --> 00:27:53.090
are missing from both the public
network and the private network.

00:27:53.190 --> 00:27:57.540
And second, if broadcast packets are
missing on only one network,

00:27:57.540 --> 00:28:00.770
we have what we refer to as an anomaly.

00:28:01.200 --> 00:28:05.000
Anomalies do not cause the
failover action to take place,

00:28:05.070 --> 00:28:09.700
but they do cause the
notification action to take place.

00:28:09.820 --> 00:28:12.870
Here is an example of an anomaly.

00:28:13.430 --> 00:28:15.840
As you can see,
the primary server continues

00:28:15.840 --> 00:28:17.610
to perform in a normal fashion.

00:28:17.610 --> 00:28:22.280
And, as you can see,
it's not particularly desirable for

00:28:22.280 --> 00:28:27.310
the standby server to acquire the
primary server's public network address.

00:28:28.710 --> 00:28:34.870
It's important to note that the
private network is used to verify

00:28:35.400 --> 00:28:39.160
failure and detect recovery.

00:28:39.280 --> 00:28:45.040
Anomalies never cause the failover
but always trigger notification.

00:28:45.300 --> 00:28:50.430
Failback works similarly to failover
with notifications and pre- and

00:28:50.430 --> 00:28:53.530
post-address release extensibility.

00:28:53.540 --> 00:28:56.870
For example,
using the web server scenario

00:28:56.870 --> 00:29:01.710
from the previous slides,
the failback would occur as follows.

00:29:01.760 --> 00:29:06.170
First, the standby server would notice
that the primary server had

00:29:06.280 --> 00:29:08.580
returned to full functionality.

00:29:08.580 --> 00:29:13.200
Next, it would run the set
of pre-release scripts.

00:29:13.660 --> 00:29:17.450
In this particular case,
it would just shut down the web server.

00:29:17.750 --> 00:29:21.670
Then it would relinquish the
public address that belongs

00:29:21.670 --> 00:29:23.450
to the primary server.

00:29:24.480 --> 00:29:27.720
And then finally, it would run a set of
post-release scripts.

00:29:27.910 --> 00:29:32.520
In this case, it would restart the
SETI analysis program.

00:29:37.300 --> 00:29:40.550
This slide lists the various
components of IP failover.

00:29:40.670 --> 00:29:43.630
The broadcast process,
the listener process,

00:29:43.730 --> 00:29:47.720
the notification script,
a variety of sample scripts

00:29:47.720 --> 00:29:52.240
that we intend to provide,
and then of course the man pages

00:29:52.240 --> 00:29:55.630
that go along with these programs.

00:29:56.140 --> 00:29:59.330
Now I would like to introduce
you to Rusty Tucker,

00:29:59.330 --> 00:30:01.850
manager of our file systems group.

00:30:14.530 --> 00:30:16.360
Hi, my name is Rusty Tucker.

00:30:16.540 --> 00:30:19.550
I'm going to take a few minutes
today to bring you up to date with

00:30:19.560 --> 00:30:24.810
some of the changes we're making
in file services for Jaguar Server.

00:30:26.510 --> 00:30:30.440
The Jaguar server includes
a number of upgrades,

00:30:30.440 --> 00:30:35.400
especially in the area of security,
performance, administration,

00:30:35.400 --> 00:30:37.960
and support for AFP home directories.

00:30:38.070 --> 00:30:42.270
The first thing we'll take a look
at are the security upgrades.

00:30:45.680 --> 00:30:49.250
As you may have heard,
we have Kerberos support

00:30:49.250 --> 00:30:51.180
baked into the OS now.

00:30:51.180 --> 00:30:55.620
There's a framework that's based
on the MIT work included in Jaguar

00:30:55.640 --> 00:30:58.540
Server as well as the Jaguar Desktop.

00:30:58.540 --> 00:31:03.620
What we've done in file services is
take that and include Kerberos v5

00:31:03.710 --> 00:31:06.840
support in both the FTP and AFP servers.

00:31:06.840 --> 00:31:10.070
In AFP,
we've taken the extra step of including

00:31:10.070 --> 00:31:13.000
Kerberos v5 mutual authentication.

00:31:13.820 --> 00:31:18.880
Mutual authentication not only
authenticates the client with the server,

00:31:19.010 --> 00:31:20.870
but also the server with the client.

00:31:20.880 --> 00:31:24.920
The net effect of that is that this
ensures that the server you're connecting

00:31:24.920 --> 00:31:27.170
to isn't being spoofed on the network.

00:31:29.550 --> 00:31:33.360
For Kerberos v4,
we're supporting that in the

00:31:33.360 --> 00:31:36.320
AFP client as a legacy option only.

00:31:36.320 --> 00:31:39.500
So if you have an existing
infrastructure with Kerberos

00:31:39.500 --> 00:31:44.170
v4 deployed AFP services there,
the Jaguar client will fit right in.

00:31:46.240 --> 00:31:49.960
The final security upgrade
is for secure connections,

00:31:49.960 --> 00:31:51.840
secure AFP connections.

00:31:51.840 --> 00:31:57.930
Here we've taken the Mac OS X,
leveraged Mac OS X support for

00:31:57.940 --> 00:32:02.240
SSH and reduced that to just a single
checkbox in the Mac OS X client

00:32:02.240 --> 00:32:05.560
to turn on AFP connections,
AFP sessions,

00:32:05.560 --> 00:32:07.920
tunneled through an SSH connection.

00:32:07.920 --> 00:32:12.940
And this provides encryption
for the full AFP session,

00:32:12.940 --> 00:32:17.130
not just the password transfer,
but the data transfer as well.

00:32:17.140 --> 00:32:20.400
So it keeps your data private in
any transfers across the Internet.

00:32:26.780 --> 00:32:30.440
Jaguar includes a number of
AFP performance improvements.

00:32:30.440 --> 00:32:35.950
A number of these,
we've optimized the TCP stack

00:32:35.980 --> 00:32:39.290
that's in the kernel,
and that helps not only AFP but

00:32:39.290 --> 00:32:41.390
any networking application.

00:32:41.400 --> 00:32:46.300
We've also made optimizations
within the AFP server itself.

00:32:46.360 --> 00:32:51.560
The effect of this overall is that now
with AFP sequential read performance,

00:32:51.560 --> 00:32:53.970
we're getting up to 700
megabits per second.

00:32:55.280 --> 00:32:58.660
But even if you don't stress
your servers that high,

00:32:58.660 --> 00:33:04.200
even at the lower data transfer rates,
AFP is consuming far less resources,

00:33:04.200 --> 00:33:07.400
and that leaves a lot available
for more for your web and mail

00:33:07.550 --> 00:33:09.460
services that are running there.

00:33:12.000 --> 00:33:16.500
The AFP server now allocates
threads in response to demand.

00:33:16.500 --> 00:33:22.330
And so what that means is that the
AFP server can adjust its footprint to

00:33:22.360 --> 00:33:25.600
meet the load that's currently demanded.

00:33:25.600 --> 00:33:29.170
And this gives us a
lot better scalability.

00:33:30.380 --> 00:33:31.970
Mount times have improved.

00:33:32.060 --> 00:33:35.300
We've improved that
currently by two seconds,

00:33:35.300 --> 00:33:37.120
and we're continuing to
work to improve it more.

00:33:37.120 --> 00:33:41.360
Where you'll see this is when you're
in finder's connect to menu item

00:33:41.360 --> 00:33:43.560
and logging into an AFP server.

00:33:43.560 --> 00:33:45.920
That'll be much faster
in the Jaguar client.

00:33:48.910 --> 00:33:53.420
The Jaguar client also employs
data caching when you're opening

00:33:53.420 --> 00:33:54.820
files in a read-only access.

00:33:54.820 --> 00:33:57.940
And, of course,
this is going to be a big improvement for

00:33:58.080 --> 00:33:59.870
any kind of data that's read repeatedly.

00:33:59.880 --> 00:34:07.000
And it doesn't work so well for
access to database-type files.

00:34:07.000 --> 00:34:14.400
So the AFP client avoids these caching
strategies when files are opened

00:34:14.400 --> 00:34:16.960
read-write or in a read-shared mode.

00:34:17.610 --> 00:34:21.820
So you'll want to take
advantage of that in your code.

00:34:26.800 --> 00:34:30.960
Jaguar now includes quota
support on both HFS Plus and

00:34:30.960 --> 00:34:34.460
the UNIX file system bottoms,
and we've updated AFP to

00:34:34.460 --> 00:34:35.830
take advantage of that.

00:34:35.880 --> 00:34:42.430
You'll notice applications will be
receiving disk quota errors now,

00:34:42.430 --> 00:34:45.630
and so you'll want to update your
applications to take advantage

00:34:45.660 --> 00:34:49.360
of that and provide appropriate
error messages when that occurs.

00:34:49.360 --> 00:34:52.930
These quotas are managed
by Server Manager within

00:34:52.930 --> 00:34:55.110
the user's home directory.

00:34:55.800 --> 00:34:58.760
Although anything that would
be manually configured,

00:34:58.780 --> 00:35:01.500
AFP would also take advantage of that.

00:35:05.500 --> 00:35:09.240
We've completely rewritten the
sharing user interface for Jaguar.

00:35:09.240 --> 00:35:13.460
It's all done in Cocoa.

00:35:13.460 --> 00:35:16.950
It supports in-place file system
navigation and the ability to

00:35:16.950 --> 00:35:20.390
set privileges in a batch mode,
which we think is really

00:35:20.390 --> 00:35:24.550
going to be great productivity
enhancement for system admins.

00:35:26.690 --> 00:35:30.260
We also support per-service SharePoint,
so that means now you can create

00:35:30.260 --> 00:35:33.900
one SharePoint that is just
unique for AFP and another,

00:35:33.900 --> 00:35:35.520
for example, that is FTP only.

00:35:35.520 --> 00:35:42.080
It isn't just one button, share is all,
although that mode is an option,

00:35:42.080 --> 00:35:45.470
and you can go in there and tweak it.

00:35:46.260 --> 00:35:50.450
The SharePoint names, by default,
the SharePoint names will be the same

00:35:50.490 --> 00:35:52.180
as the directory that's being shared.

00:35:52.200 --> 00:35:56.380
But we got a lot of feedback that
people wanted to improve on that,

00:35:56.610 --> 00:35:59.690
create a custom SharePoint name
for different SharePoints,

00:36:00.030 --> 00:36:04.750
even to the point of providing a unique
SharePoint name for different services.

00:36:07.220 --> 00:36:13.240
AFP home directories are a really
important part of Jaguar Server.

00:36:14.140 --> 00:36:18.380
Our goal here is to make the
AFP home directory just a transparent

00:36:18.380 --> 00:36:21.250
replacement for your hard drive,
except that it's available

00:36:21.250 --> 00:36:22.620
from anywhere on the network.

00:36:22.700 --> 00:36:26.570
So part of our work there
was to provide automatic

00:36:26.850 --> 00:36:29.660
reconnect within the AFP client.

00:36:29.660 --> 00:36:33.500
So any time the connection is lost,
the AFP client can transparently

00:36:33.500 --> 00:36:35.320
reconnect you to the server.

00:36:35.320 --> 00:36:40.210
There's no having to re-log in,
really no notice in any

00:36:40.220 --> 00:36:42.700
loss of the connection.

00:36:43.350 --> 00:36:45.450
Now for a server admin,
this means you can turn

00:36:45.450 --> 00:36:48.020
on idle disconnect on your
home directory servers,

00:36:48.020 --> 00:36:51.550
and that'll help you support a large
number of users with a single server.

00:36:53.610 --> 00:36:57.620
We've also updated the AFP protocol,
which is now at version 3.1,

00:36:57.800 --> 00:36:59.440
to provide better UNIX fidelity.

00:36:59.440 --> 00:37:03.180
And a lot of what this means is that
we're following the UNIX permissions

00:37:03.200 --> 00:37:08.320
model a bunch more closely than we did
with the Apple share servers or AFP 3.0.

00:37:08.360 --> 00:37:13.310
Today, in an AFP connection,
you'll see the true owner and group

00:37:13.310 --> 00:37:18.690
as well as the permissions that are
coming directly from the server.

00:37:19.240 --> 00:37:22.830
We also support symlinks and
delete while open for better

00:37:22.830 --> 00:37:26.560
compatibility with BSD command
line tools and Cocoa applications.

00:37:28.440 --> 00:37:33.800
Part of the feedback we got in
Mac OS X Server 10.0 and 10.1

00:37:33.800 --> 00:37:37.480
was that admins wanted to be
able to do user imports much more

00:37:37.560 --> 00:37:39.840
quickly than we had supported.

00:37:39.840 --> 00:37:43.020
So now we're deferring
to improve that speed.

00:37:43.020 --> 00:37:46.140
We're deferring the creation of
the home directory to actually

00:37:46.140 --> 00:37:47.520
when you log in over AFP.

00:37:47.520 --> 00:37:53.380
You may notice a very small
delay in the login time,

00:37:53.380 --> 00:37:55.660
much less than a second
on the first connection,

00:37:55.660 --> 00:37:58.220
but there's no penalty after that.

00:37:58.260 --> 00:38:02.820
In fact, if you saw Eric's demo here
in the previous session,

00:38:02.820 --> 00:38:04.800
that in fact happened.

00:38:08.800 --> 00:38:11.300
So now I'd like to
turn this back to Kazu,

00:38:11.360 --> 00:38:14.390
who's going to wrap up
with the web platform.

00:38:21.910 --> 00:38:24.800
OK, web platform.

00:38:24.920 --> 00:38:28.250
So, a Jaguar server with its
collection of industry standard

00:38:28.410 --> 00:38:32.730
software plus Apple-developed
software is a great web platform.

00:38:32.790 --> 00:38:38.180
At the foundation, we have Apache,
the world's most popular web server.

00:38:38.620 --> 00:38:43.210
We bundled the latest version of
Apache 1.3.x as well as a number

00:38:43.210 --> 00:38:45.760
of popular open source packages.

00:38:45.760 --> 00:38:49.940
And on top of that solid foundation,
we've implemented a high performance

00:38:50.670 --> 00:38:55.940
front-end cache that pretty much doubles
the performance of static page serving.

00:38:56.700 --> 00:38:59.820
We also bundle a few
Apple-developed modules,

00:38:59.860 --> 00:39:04.310
such as enhancing capabilities
for things such as allowing

00:39:05.070 --> 00:39:07.600
short-look search of your website.

00:39:07.600 --> 00:39:10.930
And then on top of all of that,
we have set up administration

00:39:10.930 --> 00:39:15.210
and monitoring software,
such as the Server Status application

00:39:15.210 --> 00:39:16.560
you saw earlier.

00:39:17.980 --> 00:39:22.320
So let's look at some of the tools
that are built into Jaguar Server.

00:39:22.380 --> 00:39:24.780
Jaguar Server first
ships with WebObjects.

00:39:24.890 --> 00:39:28.000
It's a top-rated application
server from Apple.

00:39:28.140 --> 00:39:29.780
And if you're interested
in this technology,

00:39:29.840 --> 00:39:33.870
I believe there are around 15
sessions this year at WWDC,

00:39:33.870 --> 00:39:36.580
so you can learn all you want about it.

00:39:37.140 --> 00:39:40.430
We also bundle MySQL,
which is a very popular

00:39:40.580 --> 00:39:42.870
database package out there.

00:39:43.030 --> 00:39:45.600
And if you'd like to
have a scripting engine,

00:39:45.630 --> 00:39:48.930
we have both PHP and Perl
that's pre-installed as

00:39:48.930 --> 00:39:50.980
part of the Jaguar server.

00:39:51.670 --> 00:39:54.550
We also have Tomcat if you
want to use Java Serverlet

00:39:54.690 --> 00:39:57.800
or want to serve JSP pages.

00:40:00.240 --> 00:40:05.690
Jaguar server also include a fast and
robust implementation of Java VM complete

00:40:05.770 --> 00:40:09.180
with a whole development environment.

00:40:09.740 --> 00:40:13.270
We also have a patch 2 bundle,
as Eric mentioned earlier,

00:40:13.470 --> 00:40:17.720
although the default
server is still 1.3.x.

00:40:18.210 --> 00:40:21.460
And last but not least,
we have a built-in

00:40:21.460 --> 00:40:24.340
media streaming server,
QTSS.

00:40:24.420 --> 00:40:28.440
It lets you stream both live and
stored media in different formats,

00:40:28.510 --> 00:40:33.880
including QuickTime,
industry standard MPEG-4, and MP3.

00:40:33.990 --> 00:40:37.780
And it has a long list of cool
features such as Playlist Broadcaster,

00:40:37.820 --> 00:40:42.030
which lets you create your own
internet radio station pretty easily.

00:40:42.230 --> 00:40:45.970
So with QTSS,
you can easily integrate streaming live

00:40:46.040 --> 00:40:49.900
media into your whole web solutions.

00:40:50.110 --> 00:40:53.990
And there is a separate
session on QTSS on Thursday,

00:40:54.080 --> 00:40:56.170
so it would be great if you can
join us there and learn more

00:40:56.170 --> 00:40:57.500
about this cool technology.

00:41:01.650 --> 00:41:04.840
Here's a list of some other sessions
that you may be interested in.

00:41:04.910 --> 00:41:06.840
We've talked about
directory services already.

00:41:06.840 --> 00:41:09.360
It's on Thursday at 3:30 p.m.

00:41:09.410 --> 00:41:11.040
in Room C.

00:41:11.140 --> 00:41:14.880
The QTSS session is also
on Thursday at 2:00,

00:41:15.010 --> 00:41:17.440
across the street in the Civic.

00:41:17.440 --> 00:41:19.990
And if you're interested in
learning more about Managed Desktop,

00:41:19.990 --> 00:41:23.390
which is basically
Mac Manager for Mac OS X and more,

00:41:23.960 --> 00:41:27.190
there's a session on Friday at 9:00.

00:41:28.120 --> 00:41:32.450
And then the Netboot and Netinstall
session is on Thursday at 10:30.

00:41:35.490 --> 00:41:40.140
The server feedback session
this year is on Friday at 5:00,

00:41:40.200 --> 00:41:42.820
the last session of the conference.

00:41:43.010 --> 00:41:45.720
There is a corporate session
on Thursday at 5 o'clock.

00:41:45.750 --> 00:41:49.110
And lastly,
the Zero Conf Networking or Rendezvous

00:41:49.110 --> 00:41:51.940
session is also on Thursday at 2 o'clock.

00:41:55.110 --> 00:41:57.740
If you have any questions
about developing software

00:41:57.740 --> 00:42:00.770
for a Jaguar server platform,
please contact our

00:42:00.770 --> 00:42:03.280
developer relations person,
Tom Weyer.

00:42:03.430 --> 00:42:06.000
His email address is listed here.

00:42:07.260 --> 00:42:10.410
Lastly,
here is a list of online resources if you

00:42:10.410 --> 00:42:12.640
want to learn more about Mac OS X Server.

00:42:12.760 --> 00:42:16.640
We have a product page at www.apple.com.

00:42:16.780 --> 00:42:21.490
If you go to Apple's open source website,
you can learn more about the details

00:42:21.570 --> 00:42:24.440
of streaming server and open directory.

00:42:25.040 --> 00:42:30.180
If you are interested in learning more
about Mac OS X Server administration

00:42:30.530 --> 00:42:33.910
or want to be certified,
you can find that information on

00:42:34.070 --> 00:42:36.160
our website at train.apple.com.

00:42:37.900 --> 00:42:43.440
And you can download information such as
API documentation and AFP 3.1 protocol

00:42:43.440 --> 00:42:50.890
documentation from our developer website
at developer.apple.com/techpubs/macos10.

00:42:51.050 --> 00:42:52.990
You have to navigate down
to the networking section.