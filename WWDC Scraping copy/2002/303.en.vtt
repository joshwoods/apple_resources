WEBVTT

00:00:06.050 --> 00:00:06.600
Good morning.

00:00:06.630 --> 00:00:13.000
Welcome to session 303, Cocoa Scripting.

00:00:13.180 --> 00:00:15.790
What I'm going to talk about today,
I'm going to start with the

00:00:15.800 --> 00:00:18.530
basics of Cocoa Scripting,
for those of you who

00:00:18.530 --> 00:00:20.120
haven't worked with it yet.

00:00:20.120 --> 00:00:23.040
The scripting commands and
classes that are built into Cocoa,

00:00:23.040 --> 00:00:26.960
so you don't have to do anything
to get that support for those.

00:00:27.050 --> 00:00:29.820
How you would declare
new scripting classes,

00:00:29.850 --> 00:00:32.810
and how to implement scripting classes.

00:00:34.570 --> 00:00:40.640
I'll talk about,
go into specifics about the types you

00:00:40.640 --> 00:00:40.640
use in declaring scripting suites.

00:00:40.850 --> 00:00:43.800
will talk about the new features that
are appearing in the Jaguar seed,

00:00:43.800 --> 00:00:46.790
and I'll share with you some of our
future plans for Cocoa scripting.

00:00:48.950 --> 00:00:51.660
So the basics,
starting from the ground level.

00:00:51.660 --> 00:00:55.060
AppleScript presents scriptability
as commands and classes that

00:00:55.060 --> 00:00:56.240
are grouped into suites.

00:00:56.340 --> 00:00:59.560
These are what appear in the
scripting dictionary window of an

00:00:59.560 --> 00:01:01.520
application like Script Editor.

00:01:01.560 --> 00:01:09.760
And what we care about here today
are the commands that applications

00:01:09.840 --> 00:01:11.360
handle and the classes that
applications expose as scriptable.

00:01:13.720 --> 00:01:16.100
Cocoa scripting does a
bunch of things for you.

00:01:16.100 --> 00:01:18.500
It gives you a way to
declare commands and classes.

00:01:18.620 --> 00:01:20.180
I'll show you how to do that.

00:01:20.200 --> 00:01:24.680
It handles incoming Apple events,
converts them to command objects,

00:01:24.680 --> 00:01:26.760
and executes those
command objects for you.

00:01:26.760 --> 00:01:30.820
And it declares and implements most
of the standard suite and tech suite

00:01:30.830 --> 00:01:33.000
commands and classes ahead of time.

00:01:33.000 --> 00:01:35.800
You don't even have to
do anything for those.

00:01:36.880 --> 00:01:40.100
So what you have to do to take
advantage of Cocoa scripting is,

00:01:40.170 --> 00:01:42.510
well, for starters, very simply,
you have to include an

00:01:42.510 --> 00:01:45.470
NSAppleScript enable entry
in your property list whose

00:01:45.470 --> 00:01:47.300
value is not surprisingly yes.

00:01:47.380 --> 00:01:51.780
And you have to include some files
in file format so we define in the

00:01:51.780 --> 00:01:56.780
resources directory of your bundle
to declare the scripting support.

00:01:58.200 --> 00:02:01.780
You have to add methods to your
application to handle any custom

00:02:01.780 --> 00:02:04.260
classes you define for your scripting.

00:02:04.260 --> 00:02:07.330
And you have to add methods,
accessor methods,

00:02:07.330 --> 00:02:10.960
on the classes that you've
declared to be scriptable.

00:02:20.290 --> 00:02:22.420
So the files in the apps
bundle that I'm talking about.

00:02:22.660 --> 00:02:25.850
There are two file
formats that you support,

00:02:25.850 --> 00:02:28.120
that we support,
and to implement scriptability

00:02:28.120 --> 00:02:29.880
you have to provide both of these.

00:02:29.880 --> 00:02:32.420
There's a script suite file
and a script terminology file.

00:02:32.420 --> 00:02:35.060
These are actually property lists.

00:02:35.060 --> 00:02:40.060
They're parallel property lists,
and by that I mean the dictionaries

00:02:40.130 --> 00:02:44.750
in them have roughly the same
top-level entries in both cases.

00:02:45.160 --> 00:02:49.630
The script suite file is for declaring
the scripting model of the scripting

00:02:49.630 --> 00:02:52.870
and how it maps to the Objective-C,
or Java actually,

00:02:52.870 --> 00:02:56.170
classes and methods that
are in your application.

00:02:56.170 --> 00:02:59.330
The script terminology provides
all the human readable strings

00:02:59.330 --> 00:03:02.750
that will appear in scripting
dictionaries that scripters see.

00:03:02.760 --> 00:03:05.520
And if you're wondering,
if you already know the

00:03:05.520 --> 00:03:08.750
history of AppleScript,
you know there's an AETE format

00:03:08.750 --> 00:03:12.250
that has to be supported,
and we do that automatically.

00:03:12.390 --> 00:03:16.120
We, uh... When a scripting...
When a scripting event first

00:03:16.120 --> 00:03:18.900
comes into your application,
we parse the relevant script suite

00:03:18.900 --> 00:03:26.110
and script terminology files and
merge them and return the AETE data.

00:03:28.990 --> 00:03:31.420
Both ScriptSuite and
ScriptTerminology files,

00:03:31.420 --> 00:03:34.440
at their top level,
they're pretty much dictionaries.

00:03:34.450 --> 00:03:38.500
They both contain commands
and classes sub-dictionaries.

00:03:38.500 --> 00:03:42.110
A ScriptSuite file also
contains an Apple event code.

00:03:42.110 --> 00:03:45.830
In the open scripting architecture,
each suite has to be identified

00:03:46.010 --> 00:03:48.000
by a unique four-character code.

00:03:48.090 --> 00:03:51.420
I'll have more news about that later.

00:03:52.690 --> 00:03:53.890
There's also a name.

00:03:53.890 --> 00:03:56.200
The one in the ScriptSuite
is not human-readable.

00:03:56.200 --> 00:03:59.580
It's a programmatic name that's
used to identify the ScriptSuite.

00:03:59.580 --> 00:04:01.830
It appears in a few other places.

00:04:01.840 --> 00:04:04.930
The ScriptTerminology file,
at its top level,

00:04:04.940 --> 00:04:08.350
also has a description and
a name entry for the suite,

00:04:08.350 --> 00:04:10.280
the human-readable ones.

00:04:10.280 --> 00:04:13.940
There's other stuff I'll go into
later to support custom value types.

00:04:17.510 --> 00:04:19.040
So, how do you declare commands?

00:04:19.040 --> 00:04:21.520
Well,
you have to declare them in two places.

00:04:21.520 --> 00:04:23.760
First of all, you have to declare them
in the script suite file.

00:04:23.760 --> 00:04:27.130
You have to provide two
four-character codes for each command,

00:04:27.130 --> 00:04:30.040
the AppleEvent class code
and the AppleEvent code.

00:04:30.050 --> 00:04:32.780
And some of the documentation I'll
point you to at the end of the

00:04:32.780 --> 00:04:35.540
talk will give you some advice
on how to make these things up.

00:04:35.610 --> 00:04:38.900
You have to declare for
each command arguments,

00:04:38.900 --> 00:04:42.050
and for each argument
another AppleEvent code,

00:04:42.110 --> 00:04:43.050
and a type.

00:04:43.120 --> 00:04:45.990
And I'll talk further about what
types are available for you to use.

00:04:46.540 --> 00:04:50.060
And if the command returns a result,
a result AppleEvent code

00:04:50.070 --> 00:04:51.770
and another type string.

00:04:51.770 --> 00:04:56.320
And a unique entry in that command
dictionary is command class.

00:04:58.020 --> 00:05:01.340
and Command Class is typically the
name of an Objective-C subclass

00:05:01.340 --> 00:05:05.550
of NSScript command or
NSScript command itself.

00:05:05.840 --> 00:05:12.880
This is important because
scripted operations,

00:05:13.010 --> 00:05:18.980
after they've been sent to a
scriptable application via Apple event,

00:05:18.980 --> 00:05:18.980
are converted to instances
of this command object,

00:05:18.980 --> 00:05:18.980
whichever one you've specified.

00:05:19.770 --> 00:05:26.090
It's very often useful to
subclass NSScript command,

00:05:26.480 --> 00:05:31.210
but also very often it's not necessary.

00:05:31.210 --> 00:05:33.900
NSScript command,
that class itself has everything

00:05:33.900 --> 00:05:33.900
included with it to encapsulate
the arguments that were part of

00:05:33.900 --> 00:05:33.900
the command and things like that.

00:05:35.320 --> 00:05:38.340
You also have to declare commands
in the script terminology file.

00:05:38.340 --> 00:05:40.580
This is where you present
all the user-visible,

00:05:40.730 --> 00:05:43.080
human-readable strings,
both for the command,

00:05:43.220 --> 00:05:46.150
you provide a description and a name,
and for each of the arguments,

00:05:46.160 --> 00:05:48.030
you provide a description and a name.

00:05:50.060 --> 00:05:52.960
So, for example, I'm not going to,
I'm going to spend more time

00:05:53.030 --> 00:05:54.440
on classes than commands.

00:05:54.440 --> 00:06:00.040
But if you want to see a quick example,
look in the foundation frameworks bundle.

00:06:00.040 --> 00:06:03.780
There's two files there,
nscoresuite.scriptsuite and

00:06:03.820 --> 00:06:06.480
nscoresuite.scriptterminology.

00:06:06.480 --> 00:06:09.680
You'll see all of our
declared standard commands.

00:06:09.680 --> 00:06:15.510
An easy example is the nsclose command,
which encapsulates everything associated

00:06:15.510 --> 00:06:18.230
with an AppleScript close command.

00:06:18.260 --> 00:06:21.560
As an example of something in
Cocoa that knows how to handle that,

00:06:21.650 --> 00:06:24.710
our nsdocument class knows
how to handle that command.

00:06:27.090 --> 00:06:29.000
is the founder of the
AppleScript standard suite.

00:06:29.000 --> 00:06:33.340
The AppleScript standard suite has
for years now declared a reasonably

00:06:33.850 --> 00:06:38.160
sized batch of standard commands,
open, print, quit, close, save, count,

00:06:38.160 --> 00:06:39.440
delete, etc.

00:06:39.440 --> 00:06:43.130
We provide support for
pretty much all of those,

00:06:43.130 --> 00:06:46.250
not quite, but almost all of them.

00:06:46.260 --> 00:06:52.860
Very often our support takes the form
of a subclass Venice script command that

00:06:52.860 --> 00:06:53.040
encapsulates instances of those commands.

00:06:53.500 --> 00:06:56.710
and something that's actually not part
of the AppleScript standard suite,

00:06:56.710 --> 00:06:59.020
the get and set commands
are considered implicit.

00:06:59.130 --> 00:07:04.820
Everybody has to support them,
so nobody bothers,

00:07:04.990 --> 00:07:11.160
nobody has to declare them
in their scripting support,

00:07:11.160 --> 00:07:11.700
but of course we still
have to handle them,

00:07:11.700 --> 00:07:11.700
and we do that with the ns get
command and ns set command classes.

00:07:14.070 --> 00:07:18.000
I'm going to be talking a lot more
about our standard command classes

00:07:18.000 --> 00:07:22.560
because your scriptable classes,
when they're being queried for properties

00:07:22.720 --> 00:07:26.890
or elements or something like that,
have to know how they'll be queried.

00:07:26.940 --> 00:07:29.740
They'll be queried
using key value coding.

00:07:29.740 --> 00:07:32.890
It's also what's used to set the
values of properties and elements.

00:07:33.680 --> 00:07:36.190
A quick pointer,
you shouldn't have to declare

00:07:36.280 --> 00:07:38.170
too many new commands yourself.

00:07:38.220 --> 00:07:41.220
Text data, for instance,
does not have to declare

00:07:41.220 --> 00:07:42.480
any new commands.

00:07:42.480 --> 00:07:45.970
There are plenty of good
reasons to declare new commands,

00:07:45.970 --> 00:07:48.280
but it's very often not necessary.

00:07:48.280 --> 00:07:53.400
The documentation I'll point you to at
the end of the presentation describes

00:07:53.400 --> 00:07:55.830
some of the thinking behind that.

00:07:58.420 --> 00:08:01.340
So just as classes or as commands
are declared in ScriptSuite

00:08:01.470 --> 00:08:03.970
and ScriptTerminology files,
so are classes.

00:08:03.970 --> 00:08:07.540
And a quick rundown through the
entries that you use when declaring

00:08:07.540 --> 00:08:09.360
them in the ScriptSuite file.

00:08:09.360 --> 00:08:11.820
The superclass, which is a string.

00:08:11.820 --> 00:08:13.290
An Apple event code.

00:08:13.290 --> 00:08:15.540
You have to provide that still.

00:08:15.540 --> 00:08:16.410
Attributes.

00:08:16.410 --> 00:08:19.640
We call them attributes in
our ScriptSuite file format,

00:08:19.640 --> 00:08:22.660
but they correspond to
AppleScript properties.

00:08:22.680 --> 00:08:26.170
To many relationships,
which correspond to elements.

00:08:27.070 --> 00:08:28.890
And a few other things.

00:08:28.890 --> 00:08:30.430
Apple event code.

00:08:30.430 --> 00:08:36.180
Read only and type for each attribute
and to many relationship of the class.

00:08:36.180 --> 00:08:39.520
Any supported commands if
the class handles commands

00:08:40.130 --> 00:08:41.830
that are sent to it itself.

00:08:41.930 --> 00:08:45.250
And at the bottom of the slide,
there's two on relationships.

00:08:45.270 --> 00:08:48.860
If you're digging around in our
ScriptSuite and ScriptTerminology files,

00:08:48.860 --> 00:08:50.380
you'll see that in a few places.

00:08:50.440 --> 00:08:52.520
You probably won't have
to use it yourself,

00:08:52.640 --> 00:08:54.960
though,
so I won't go into it too much today.

00:08:55.300 --> 00:08:57.940
But you should be able to do everything
you need to do just about with

00:08:57.940 --> 00:08:59.780
attributes and too many relationships.

00:09:03.790 --> 00:09:05.610
When you declare a class
in the script suite,

00:09:05.610 --> 00:09:06.930
you have to pick a name for it.

00:09:07.170 --> 00:09:11.920
That name is the key in the
class's dictionary for that entry.

00:09:11.920 --> 00:09:16.510
That class name should just about always
be an Objective-C or Java class name,

00:09:16.710 --> 00:09:18.370
for example, NSWindow.

00:09:18.740 --> 00:09:21.780
As part of the class declaration,
you always have to

00:09:21.880 --> 00:09:23.690
provide a superclass also.

00:09:23.760 --> 00:09:28.280
You can use the name of another
class in that same script suite,

00:09:28.280 --> 00:09:31.890
or you can use the name of a
class in another script suite,

00:09:32.020 --> 00:09:35.120
for example, our NSCore suite,
which is part of Foundation.

00:09:35.160 --> 00:09:38.450
When you do that,
you have to specify that using the little

00:09:38.550 --> 00:09:40.780
dot in the middle like you see there.

00:09:48.520 --> 00:09:51.910
Just as with commands, classes,
you have to provide information

00:09:51.910 --> 00:09:53.840
in the script terminology file.

00:09:53.840 --> 00:09:58.180
So the human readable description
and name and plural name,

00:09:58.180 --> 00:10:02.510
which is usually appropriate
in scripting dictionaries,

00:10:02.690 --> 00:10:06.310
and for each attribute,
a description and name.

00:10:07.330 --> 00:10:10.250
So, for example,
to show you some of these files,

00:10:10.310 --> 00:10:15.610
I've decided to add something that should
probably have already been in TextEdit,

00:10:15.610 --> 00:10:18.900
scriptability of the
page setup of a document,

00:10:18.900 --> 00:10:21.960
what appears in the page setup
dialog and those parameters.

00:10:21.960 --> 00:10:26.350
So, on the Demo 1 machine,
let's quickly just look at

00:10:26.410 --> 00:10:28.890
some of those declarations.

00:10:35.850 --> 00:10:38.690
So this is a text edit
scripting dictionary.

00:10:38.690 --> 00:10:44.940
It's pretty much unchanged from what's on
the Jaguar seed CD that you have there,

00:10:45.160 --> 00:10:50.240
except I've added this to document,
a page setup attribute,

00:10:50.240 --> 00:10:53.120
which is of class page setup object.

00:10:53.120 --> 00:10:57.210
Very often you want to use a different
name there to avoid some ugly naming

00:10:57.330 --> 00:11:01.960
conflicts that cause AppleScript to be
a little bit harder to write for people.

00:11:02.390 --> 00:11:04.400
So I decided to call the
class page setup object.

00:11:04.400 --> 00:11:06.440
It's something that other people do, too.

00:11:06.440 --> 00:11:12.760
The declaration of that
class is down here.

00:11:15.680 --> 00:11:25.580
and it has the things you would expect
to be associated with page setup,

00:11:25.580 --> 00:11:25.580
the paper width and the
name and the margins and the

00:11:25.580 --> 00:11:25.580
orientation and the scaling.

00:11:27.600 --> 00:11:30.190
That's how it appears to the scripter.

00:11:30.360 --> 00:11:35.750
Here's what you would
have to write to do that.

00:11:37.110 --> 00:11:41.250
and I've highlighted
the new things in color.

00:11:41.390 --> 00:11:43.670
There's a couple different
ways to edit a property list.

00:11:43.670 --> 00:11:47.020
You can use Property List Editor or
another program that'll point you

00:11:47.020 --> 00:11:48.830
to at the end of the presentation.

00:11:48.830 --> 00:11:51.570
Or you could just edit them as ASCII.

00:11:51.570 --> 00:11:56.640
I usually don't edit them as ASCII,
but for demonstration purposes,

00:11:56.640 --> 00:12:00.370
it's a little bit easier to
show it to you like this.

00:12:00.490 --> 00:12:04.290
And I actually made an RTF file
out of the ScriptSuite file so

00:12:04.290 --> 00:12:04.290
I could add some color to it.

00:12:07.010 --> 00:12:11.620
So this is the declaration of
that page setup attribute in

00:12:11.620 --> 00:12:15.180
the document class that we just
saw in the scripting dictionary.

00:12:15.180 --> 00:12:19.700
I picked an Apple event code for it,
and I said it was read-only.

00:12:19.700 --> 00:12:23.500
You can change the things
within a document's page setup,

00:12:23.500 --> 00:12:27.600
but you can't take a page setup
and slap it onto another document

00:12:27.600 --> 00:12:29.740
the way I have it set up here.

00:12:31.930 --> 00:12:37.520
Page Setup class is declared as
nscourseSuite.abstractObject.

00:12:37.720 --> 00:12:43.740
AbstractObject is a class declared
in foundations nscourseSuite.

00:12:43.810 --> 00:12:47.100
When you're not subclassing
from something else,

00:12:47.170 --> 00:12:49.800
that's the superclass you should use.

00:12:49.800 --> 00:12:52.700
I've declared a bunch of
attributes on the page setup class,

00:12:52.810 --> 00:12:55.240
providing a four-character code
for each one and whether or

00:12:55.300 --> 00:12:56.830
not it's read-only and a type.

00:12:57.010 --> 00:13:01.780
I'll discuss these types
in more detail later on,

00:13:01.790 --> 00:13:05.120
but for now,
they should look pretty familiar for you.

00:13:05.120 --> 00:13:07.750
NSString is the Objective-C class name.

00:13:07.750 --> 00:13:09.200
NSNumberFloat.

00:13:09.420 --> 00:13:14.740
An NSNumber will be moving around
in the code that I'll show you,

00:13:14.880 --> 00:13:19.260
but we let you specify a
more specific subtype of it.

00:13:19.800 --> 00:13:23.840
Something more informative can
show in the scripting dictionary.

00:13:23.840 --> 00:13:29.910
Another type that I'll
discuss is enumerations.

00:13:31.840 --> 00:13:37.860
and enumeration for the orientation
of the page setup and its possible

00:13:37.860 --> 00:13:42.190
values are landscape and portrait.

00:13:43.120 --> 00:13:46.060
So the things in the script
terminology file that correspond

00:13:46.210 --> 00:13:50.000
to those declarations in the
script suite file are here.

00:13:50.000 --> 00:13:54.990
For that page setup attribute that
we've added to the document class,

00:13:54.990 --> 00:13:58.900
you have to provide a
description and a name,

00:13:58.900 --> 00:14:04.560
and these strings right here
are what eventually appear here.

00:14:07.330 --> 00:14:12.300
Page Setup Class Description
and Name Description and

00:14:12.300 --> 00:14:13.520
Name for each of the attributes

00:14:15.500 --> 00:14:17.570
For that enumeration
that we'll discuss later,

00:14:17.600 --> 00:14:19.340
same thing, description and name.

00:14:19.390 --> 00:14:27.680
Go back to the slides.

00:14:35.600 --> 00:14:39.020
Before we get much more into classes
and the implementation of classes,

00:14:39.140 --> 00:14:42.550
like that one that I just showed
you the declaration for right there,

00:14:42.550 --> 00:14:46.240
it's useful for you to know what
classes are already built into Cocoa.

00:14:46.390 --> 00:14:51.430
The standard suite declares
classes like Application,

00:14:51.500 --> 00:14:56.120
Document, and Window,
and we provide scriptable

00:14:56.120 --> 00:14:58.250
support for all of those using,
not surprisingly, NSApplication,

00:14:58.250 --> 00:14:58.250
NSDocument, and NSWindow.

00:14:58.420 --> 00:15:02.210
All of the text suite stuff
is declared and is implemented

00:15:02.250 --> 00:15:04.840
by our NS Text Storage class.

00:15:04.840 --> 00:15:09.820
A little word of advice for when you're
working with this stuff yourself.

00:15:09.820 --> 00:15:13.750
Subclassing just to add scripting
properties and elements is very

00:15:13.750 --> 00:15:16.670
often unnecessary with Objective-C.

00:15:16.850 --> 00:15:18.420
You can use categories instead.

00:15:18.420 --> 00:15:21.880
You might have good reasons to
create a subclass of NS Window,

00:15:21.880 --> 00:15:23.820
for instance,
but if you're just adding scripting

00:15:23.930 --> 00:15:26.650
properties and you're adding
accessor methods for those,

00:15:26.650 --> 00:15:29.280
you really don't need to
subclass it just for that.

00:15:29.380 --> 00:15:31.270
You can just add category methods.

00:15:40.320 --> 00:15:45.060
One more thing before I show you how
to implement these scriptable classes.

00:15:45.060 --> 00:15:50.180
A few of the details about what
happens during command execution.

00:15:50.180 --> 00:15:54.520
An NSScript command encapsulates pretty
much everything from the Apple event

00:15:54.560 --> 00:15:57.330
that came into our application.

00:15:57.390 --> 00:15:59.710
The direct parameter
from the Apple event,

00:15:59.760 --> 00:16:03.700
in most cases,
becomes what we call an object specifier

00:16:03.840 --> 00:16:06.340
for the receivers of the command.

00:16:06.840 --> 00:16:10.760
The other parameters in the event become
arguments in our NSScript command object.

00:16:11.330 --> 00:16:13.880
Some of those might also
be object specifiers,

00:16:14.130 --> 00:16:18.360
some of which might just be plain value
objects like NSStrings and NSNumbers.

00:16:18.380 --> 00:16:23.120
When I say object specifier,
I mean an instance of NSScript object

00:16:23.120 --> 00:16:25.820
specifier or one of its subclasses.

00:16:27.800 --> 00:16:33.390
So, for example,
the AppleScript reference,

00:16:33.390 --> 00:16:33.390
word for of text of front document.

00:16:33.910 --> 00:16:37.660
It actually becomes a
chain of object specifiers,

00:16:37.660 --> 00:16:42.290
NSIndexSpecifier that encapsulates
the concept of word for which points

00:16:42.290 --> 00:16:47.470
to a parent contain and its property
specifier which encapsulates the

00:16:47.470 --> 00:16:51.230
concept of the text property of
something and then its parent

00:16:51.350 --> 00:16:57.480
container specifier is NSIndexSpecifier
that encapsulates document one.

00:16:57.480 --> 00:17:00.250
And anything that doesn't have a parent
container specifier is assumed that

00:17:00.250 --> 00:17:04.930
that's a top level object and that the
application is the container of that.

00:17:05.600 --> 00:17:08.830
and we have full support for all the
reference forms you can read about

00:17:08.870 --> 00:17:10.140
in the AppleScript language guide.

00:17:10.640 --> 00:17:19.320
Index references become index specifiers,
property references become

00:17:19.320 --> 00:17:19.320
NS property specifiers,
and so on.

00:17:21.520 --> 00:17:26.500
Object specifiers are evaluated
during command execution.

00:17:26.640 --> 00:17:31.820
And what I mean by that is that the exact
set of specified objects is determined,

00:17:31.820 --> 00:17:34.330
usually ends up in an
NSArray in most cases.

00:17:34.360 --> 00:17:38.220
And those are the actual objects,
in the case of the receiver

00:17:38.220 --> 00:17:42.430
specifier for a command,
that are going to receive the command.

00:17:42.440 --> 00:17:45.040
So those are actual Objective-C objects.

00:17:46.910 --> 00:17:49.480
During that evaluation
of object specifiers,

00:17:49.480 --> 00:17:53.700
containers are asked for attribute
values and relationship objects.

00:17:53.700 --> 00:17:58.020
In that example I just showed you,
during the evaluation of that

00:17:58.020 --> 00:18:01.310
chain of object specifiers,
the application would be

00:18:01.310 --> 00:18:03.990
asked for the first document,
and it would be asked

00:18:03.990 --> 00:18:05.660
for its text object,
and so on.

00:18:09.620 --> 00:18:13.380
So, in general, during command execution,
that evaluation of the receiver's

00:18:13.520 --> 00:18:15.380
object specifier is the first step.

00:18:15.590 --> 00:18:18.360
If there are any argument
object specifiers,

00:18:18.360 --> 00:18:19.420
they're also evaluated.

00:18:19.420 --> 00:18:24.320
If a command has been, or I'm sorry,
if a scripting class has been declared

00:18:24.320 --> 00:18:28.550
to support commands of a specific type,
usually using a supported commands

00:18:28.550 --> 00:18:34.040
declaration in the script suite file,
a message will be sent to each of those

00:18:34.050 --> 00:18:40.710
receivers that which message is part
of the declaration for the supported

00:18:40.710 --> 00:18:42.020
commands in the script suite file.

00:18:42.020 --> 00:18:47.020
More likely,
a script command can override NS script

00:18:47.020 --> 00:18:51.810
command perform default implementation,
and it'll take care of managing the

00:18:51.810 --> 00:18:54.610
execution of the command itself.

00:18:56.150 --> 00:18:58.830
This is the typical case for
most of the commands that are

00:18:58.830 --> 00:19:01.450
built right into Foundation,
for get and set and make and

00:19:01.450 --> 00:19:02.990
move and things like that.

00:19:03.050 --> 00:19:08.000
Your objects aren't sent to command
and then asked to just deal with it.

00:19:08.090 --> 00:19:12.260
We do all the work of picking it
apart and calling accessor methods

00:19:12.260 --> 00:19:14.880
in your objects and things like that.

00:19:15.030 --> 00:19:20.430
The way we call these accessor
methods is we use key value coding.

00:19:20.830 --> 00:19:25.240
Your scriptable classes have
to conform to key value coding.

00:19:25.920 --> 00:19:26.990
What is key value coding?

00:19:27.000 --> 00:19:30.890
It's the system that lets us invoke
methods in your class without

00:19:30.950 --> 00:19:32.360
knowing their names ahead of time.

00:19:32.360 --> 00:19:37.540
This is how we can convert attribute or
relationship names into method names.

00:19:39.180 --> 00:19:42.480
What this means for you is that
you get to write your scripting

00:19:42.560 --> 00:19:46.470
support in a very natural fashion,
writing methods that don't

00:19:46.590 --> 00:19:51.000
have to switch on Apple event
codes or something like that.

00:19:51.000 --> 00:19:53.010
You get to just write methods
and we'll find them and

00:19:53.010 --> 00:19:54.190
call them at the right time.

00:19:56.100 --> 00:20:01.790
and there's a couple places in
scripting that uses key value coding.

00:20:01.790 --> 00:20:01.790
When objects are

00:20:28.370 --> 00:20:28.780
Thank you.

00:20:28.780 --> 00:20:37.520
So, and there's a couple places
where we use key value coding.

00:20:37.520 --> 00:20:42.050
During the evaluation
of object specifiers,

00:20:42.180 --> 00:20:48.650
when objects are being found,
it's used to query the container objects.

00:20:48.660 --> 00:20:52.810
And during the execution of get
and set and things like that,

00:20:52.930 --> 00:20:55.880
that's what we use to poke
at your scriptable objects.

00:20:55.960 --> 00:21:00.700
So, and it's a great demonstration of
the dynamic binding and the runtime

00:21:00.700 --> 00:21:03.600
introspection features of Objective-C.

00:21:07.420 --> 00:21:09.540
So I've been talking
about accessor methods.

00:21:09.620 --> 00:21:10.420
What do they look like?

00:21:10.730 --> 00:21:14.400
Well, first of all,
what we send your object is a

00:21:14.400 --> 00:21:17.680
message that looks like this,
value for key attribute name,

00:21:17.680 --> 00:21:22.220
where the attribute name is the string
that was used to declare that attribute

00:21:22.230 --> 00:21:24.650
on that class in the script suite file.

00:21:24.650 --> 00:21:27.190
Now, you could override this method.

00:21:27.190 --> 00:21:30.000
This is a method on NSObject,
but that's not as

00:21:30.220 --> 00:21:32.030
convenient as it could be.

00:21:32.030 --> 00:21:34.950
What you can do instead is
provide a method that's simply

00:21:35.010 --> 00:21:36.610
just named attribute name.

00:21:37.510 --> 00:21:42.090
And key value coding will
find that and invoke that,

00:21:42.200 --> 00:21:45.340
and you return, very simply,
the object that is the

00:21:45.340 --> 00:21:46.900
value for that attribute.

00:21:47.070 --> 00:21:49.040
And what type should it be?

00:21:49.360 --> 00:21:52.210
It should correspond to the type
that was used to declare that

00:21:52.230 --> 00:21:53.820
attribute in the script suite file.

00:21:53.820 --> 00:22:01.280
A similar thing happens during,
for instance, set commands.

00:22:08.370 --> 00:22:10.700
Just as key value coding
has a value for key method,

00:22:10.710 --> 00:22:12.710
it also has a take value for key method.

00:22:12.710 --> 00:22:16.990
And the method that you
implement that corresponds to

00:22:16.990 --> 00:22:21.520
that is called setAttributeName,
where attribute name there should

00:22:21.520 --> 00:22:24.780
be replaced by the actual name that
was used in the script suite file.

00:22:25.420 --> 00:22:28.920
So, one thing,
AppleScript doesn't do too much

00:22:28.990 --> 00:22:33.800
type checking in a lot of places,
and right now neither do we.

00:22:33.830 --> 00:22:36.760
So,
you should use isKindOfClass or something

00:22:36.760 --> 00:22:41.420
like that in Objective-C to make sure
that that object you're being passed is

00:22:41.510 --> 00:22:44.130
the right type and react accordingly.

00:22:46.150 --> 00:22:47.620
So, example.

00:22:47.760 --> 00:22:52.810
To go back to demo one,
let's look at the code to implement that

00:22:52.810 --> 00:22:54.750
stuff that we were talking about before.

00:22:59.840 --> 00:23:01.460
So here's the TextEdit project.

00:23:01.460 --> 00:23:07.470
I've added a single method to document
and a new class called Page Setup.

00:23:08.260 --> 00:23:12.900
So this is the accessor for that
page setup attribute on document.

00:23:12.900 --> 00:23:16.510
It corresponds...

00:23:17.890 --> 00:23:19.800
is a great example of this.

00:23:19.800 --> 00:23:23.800
This attribute name corresponds
to this method name.

00:23:23.800 --> 00:23:27.800
And this will be called
automatically at all the right times.

00:23:27.970 --> 00:23:31.890
What TextEdit's Document class
is doing in this case is

00:23:31.930 --> 00:23:35.800
it's creating a new object,
a new temporary object,

00:23:35.800 --> 00:23:39.800
of the PageSetup class,
giving it a pointer to itself,

00:23:39.800 --> 00:23:41.770
and then auto-releasing it.

00:23:41.880 --> 00:23:44.800
Objective-C's,
or our reference counting system,

00:23:45.000 --> 00:23:47.790
makes this kind of
thing pretty convenient.

00:23:47.800 --> 00:23:51.250
You may be wondering why we have
a separate PageSetup class instead

00:23:51.250 --> 00:23:55.770
of just giving direct access to the
print info or something like that.

00:23:55.800 --> 00:23:57.800
There's a little bit of a
complication in this example.

00:23:57.800 --> 00:24:01.800
TextEdit needs to know when the
print info has been changed.

00:24:01.930 --> 00:24:04.800
And print infos don't notify
anybody when they've been changed.

00:24:04.800 --> 00:24:08.800
So we've added this one
level of indirection,

00:24:08.800 --> 00:24:12.800
which isn't a great complication,
but you do have to know about it.

00:24:12.800 --> 00:24:17.560
And it's something-- It's a very handy
thing to do in quite a few places,

00:24:17.560 --> 00:24:19.110
actually.

00:24:20.300 --> 00:24:25.440
So the page setup class itself,
its public declaration is very simple,

00:24:25.440 --> 00:24:26.590
just init with document.

00:24:26.600 --> 00:24:29.010
Objective C,
you don't have to declare every method

00:24:29.010 --> 00:24:31.810
that it implements over and over again,
both in the header and

00:24:31.820 --> 00:24:32.870
in the source code file.

00:24:32.880 --> 00:24:36.960
This is public because TextEdit's
document class uses this.

00:24:39.220 --> 00:24:41.440
The actual methods in
the page setup class,

00:24:41.440 --> 00:24:45.480
in it with document,
all this does is initialize itself

00:24:45.480 --> 00:24:47.100
using the typical Cocoa pattern.

00:24:47.100 --> 00:24:50.290
Make that a little bigger.

00:24:50.700 --> 00:24:53.960
Initializes itself using
the typical Cocoa pattern.

00:24:53.960 --> 00:24:56.600
And then all the other methods on this,
and that's about how

00:24:56.600 --> 00:24:59.570
many of them there are,
correspond to those attributes that

00:24:59.570 --> 00:25:01.500
we declared in the script suite file.

00:25:01.500 --> 00:25:03.910
So there was a paper name method,
or I'm sorry,

00:25:03.910 --> 00:25:07.120
there was a paper name attribute
in that script suite file.

00:25:07.120 --> 00:25:11.000
So here we have set paper name,
this is the setting accessor,

00:25:11.000 --> 00:25:13.340
and the get accessor, paper name.

00:25:13.360 --> 00:25:14.430
And this is it.

00:25:14.430 --> 00:25:16.840
This is about as simple as it gets.

00:25:19.530 --> 00:25:22.620
The implementation of these
particular ones asks the document

00:25:22.720 --> 00:25:24.090
for the print info object.

00:25:24.190 --> 00:25:28.630
It's an instance of the
NSPrintInfo class from AppKit.

00:25:28.800 --> 00:25:31.530
And set the value.

00:25:31.530 --> 00:25:35.200
And then tell the document that the print
info has been updated so that it can

00:25:35.200 --> 00:25:38.460
update the screen and things like that.

00:25:38.530 --> 00:25:42.660
So real quick, just to show this kind
of stuff in action.

00:25:54.600 --> 00:26:18.500
[Transcript missing]

00:26:18.920 --> 00:26:20.910
So, wrap to page,
because that better illustrates

00:26:21.160 --> 00:26:23.350
the page orientation.

00:26:24.850 --> 00:26:25.640
So this is it.

00:26:25.640 --> 00:26:27.680
Set orientation of page
setup to landscape.

00:26:27.680 --> 00:26:30.380
Typically simple AppleScript.

00:26:30.380 --> 00:26:31.680
And it does that.

00:26:31.740 --> 00:26:34.910
So, no, no, no.

00:26:36.700 --> 00:26:40.780
Let's see that in slow motion, though,
because some interesting

00:26:40.780 --> 00:26:46.090
things are happening,
and they can be seen with the debugger.

00:26:58.320 --> 00:27:02.120
So I have a couple
breakpoints set here already.

00:27:02.250 --> 00:27:05.180
That page setup accessor
on the document class,

00:27:05.180 --> 00:27:08.150
and because we're filling
the orientation right there,

00:27:08.160 --> 00:27:11.400
the set orientation accessor method
that I'll explain when we hit it.

00:27:11.500 --> 00:27:13.290
So run that.

00:27:13.330 --> 00:27:15.200
Stopped at breakpoint.

00:27:15.220 --> 00:27:15.860
Good.

00:27:19.200 --> 00:27:55.200
[Transcript missing]

00:27:55.980 --> 00:27:58.700
And what happens during the handling
of one of those Apple events

00:27:58.700 --> 00:28:01.680
after it's been converted to
an instance of NSScript command,

00:28:01.740 --> 00:28:04.320
the NSScript command is executed.

00:28:04.460 --> 00:28:08.590
And the first step of executing a
command like this one is evaluating

00:28:08.740 --> 00:28:11.000
the receivers for the command.

00:28:11.400 --> 00:28:13.950
An NSScript object specifier
takes care of that.

00:28:14.030 --> 00:28:17.760
Objects by evaluating specifier,
by evaluating itself, really.

00:28:17.760 --> 00:28:21.200
And then this is the
neat part right here.

00:28:21.200 --> 00:28:25.600
NSScript object specifier, at this point,
it's actually already

00:28:25.600 --> 00:28:27.210
found the document object.

00:28:27.220 --> 00:28:31.410
Now it wants to find the page setup
attribute of the document object.

00:28:31.430 --> 00:28:35.400
What it does is it sends the document
object a value for key message.

00:28:35.400 --> 00:28:38.150
We didn't bother overriding
that in document.

00:28:38.240 --> 00:28:40.910
We just let NSObject's implementation
of that method handle it.

00:28:41.660 --> 00:28:47.100
And NSObject value for key
calls document page setup.

00:28:47.160 --> 00:28:50.850
This stuff in between here and all
the rest of it should just be called

00:28:51.000 --> 00:28:57.010
a miracle occurs because an attribute
name became a method name without us

00:28:57.140 --> 00:28:59.230
having to do very much of anything.

00:29:01.350 --> 00:29:02.300
I'll continue there.

00:29:02.300 --> 00:29:07.370
We'll hit this other breakpoint
on our page set of classes,

00:29:07.470 --> 00:29:08.640
set orientation method.

00:29:11.900 --> 00:29:20.790
Stacktrace is interesting for this one,
too.

00:29:20.790 --> 00:29:20.790
AppleScript has lost patience with us.

00:29:20.790 --> 00:29:20.790
That's okay.

00:29:20.920 --> 00:29:22.080
We're executing the command.

00:29:22.080 --> 00:29:24.060
We're not evaluating the
receivers at this point.

00:29:24.110 --> 00:29:27.870
And at this point,
NSSetCommand has determined that

00:29:27.870 --> 00:29:32.250
the receivers for the command
don't handle it themselves.

00:29:32.250 --> 00:29:36.640
Because in the Text-as-Document class,
there was no supported commands

00:29:36.640 --> 00:29:39.950
declaration for set commands,
not surprisingly.

00:29:41.870 --> 00:29:44.990
So what it did is it's doing
its own default implementation.

00:29:44.990 --> 00:29:47.860
Its default implementation,
this is NSSet command,

00:29:47.860 --> 00:29:50.110
calls take value for key.

00:29:50.450 --> 00:29:55.320
Value in this case is an
NSNumber that contains that

00:29:55.460 --> 00:30:02.290
four-character code enumeration,
and the key is orientation.

00:30:02.300 --> 00:30:05.310
And the key actually was
declared as orientation,

00:30:05.310 --> 00:30:07.920
all lowercase, in the script suite file.

00:30:07.920 --> 00:30:09.150
That's okay.

00:30:09.160 --> 00:30:11.070
We're smart enough to capitalize for you.

00:30:11.700 --> 00:30:15.980
So another miracle occurs,
and page setup orientation is invoked.

00:30:16.040 --> 00:30:18.790
One of the interesting things
that key value coding did for us,

00:30:18.930 --> 00:30:21.660
by the way, here,
is even though the type for this

00:30:21.660 --> 00:30:25.180
attribute was to be declared
a certain kind of NSNumber,

00:30:25.180 --> 00:30:28.240
and NSNumbers really were
flying about internally.

00:30:28.240 --> 00:30:31.490
That's what was passed to that
take value for key invocation.

00:30:31.620 --> 00:30:35.140
Key value coding is smart enough
to use Objective-C's introspection

00:30:35.140 --> 00:30:38.580
features to find out that this
method is declared to take,

00:30:38.730 --> 00:30:43.600
in this case, an enum declared like this,
and actually becomes an integer.

00:30:43.600 --> 00:30:46.830
So it actually pulled the integer
out of the NSNumber for us,

00:30:46.830 --> 00:30:49.410
and passed that instead.

00:30:49.600 --> 00:30:51.600
So saving us a line of code there.

00:30:51.600 --> 00:30:53.560
And NS print info is not so smart.

00:30:53.660 --> 00:30:57.600
It doesn't understand
AppleScript four-character codes,

00:30:57.600 --> 00:30:57.600
and definitely never will.

00:30:57.600 --> 00:31:03.600
So we had to write a little bit of code
here to take that four-character code,

00:31:03.610 --> 00:31:07.580
and to make it into one of the
CE nums that print info understands.

00:31:07.620 --> 00:31:11.500
So, and just,
I'm going to go back to the slide.

00:31:11.500 --> 00:31:15.680
Just to show you something
else while I'm up here.

00:31:24.010 --> 00:31:28.130
- So the margins here, I think,
are about an inch on each side.

00:31:28.140 --> 00:31:29.690
That's the default.

00:31:31.200 --> 00:31:33.050
Here's another script.

00:31:33.210 --> 00:31:35.200
Set margins to one half inch.

00:31:35.200 --> 00:31:37.500
We had declared attributes
like left margin,

00:31:37.560 --> 00:31:39.760
top margin, right margin,
along with all the paper size

00:31:39.780 --> 00:31:44.140
and scaling and things like
that on our page setup class.

00:31:44.140 --> 00:31:47.640
And that, of course, works.

00:31:48.550 --> 00:31:50.380
I want you to take note
of this right here.

00:31:50.380 --> 00:31:51.890
Set properties of page setup.

00:31:52.350 --> 00:31:56.320
There's actually a
property called properties.

00:31:56.320 --> 00:32:02.720
Its value, either going in or coming out,
is a record of potential properties.

00:32:02.720 --> 00:32:05.400
That isn't something
that's part of text edit,

00:32:05.430 --> 00:32:08.010
and it's not something
that we just added.

00:32:08.020 --> 00:32:11.160
That's automatic,
and I'll explain that later.

00:32:17.340 --> 00:32:20.300
So to go back to the slides.

00:32:26.060 --> 00:32:28.170
So, just as there's key value
coding for attributes,

00:32:28.310 --> 00:32:31.670
there's key value coding
for too many relationships.

00:32:31.680 --> 00:32:35.050
It's one more level of complication,
not really complication,

00:32:35.060 --> 00:32:37.140
but something you have to deal with
because you're dealing with groups

00:32:37.140 --> 00:32:40.440
of objects instead of single objects.

00:32:40.450 --> 00:32:46.280
We use the same method, value for key,
in a lot of cases for relationships also.

00:32:46.490 --> 00:32:53.310
Cocoa scripting, we'll call that on your
scriptable classes when you've

00:32:53.310 --> 00:32:53.310
declared too many relationships.

00:32:53.340 --> 00:32:55.560
In this case, though,
if it's a relationship,

00:32:55.560 --> 00:32:59.430
you should return an array of
objects instead of a single object.

00:33:01.420 --> 00:33:05.000
If that sounds inefficient to you,
if you don't already have an

00:33:05.110 --> 00:33:09.160
array hanging around to return,
know that in more and more cases,

00:33:09.160 --> 00:33:14.120
this is evolving right now as we speak,
we try to call methods like

00:33:14.130 --> 00:33:18.260
ValuateIndex and PropertyKey
relationship name messages.

00:33:20.590 --> 00:33:23.190
and what you implement there
is a method named value and

00:33:23.190 --> 00:33:26.260
relationship name and index,
and you just return a single object.

00:33:26.260 --> 00:33:29.460
You don't have to make up an array
if you don't already have one around.

00:33:29.460 --> 00:33:33.500
And that's potentially, of course,
much more efficient than when we ask

00:33:33.650 --> 00:33:38.090
your container class for an array
of objects that might not already

00:33:38.090 --> 00:33:39.560
be nicely bundled into an array.

00:33:42.600 --> 00:33:46.320
and something we added pretty recently,
in addition to Value-It Index,

00:33:46.320 --> 00:33:49.070
which has been there for a while,
there's now Value-With-Name

00:33:49.170 --> 00:33:51.610
and Property-With-Key and
Value-With-Unique-ID and

00:33:51.680 --> 00:33:52.890
Property-With-Key.

00:33:52.900 --> 00:33:56.640
These correspond to the
AppleScript name and ID reference forms.

00:33:56.640 --> 00:34:00.600
And what you do to support those
is implement methods whose names

00:34:00.600 --> 00:34:02.020
take that form right there.

00:34:02.020 --> 00:34:04.010
Value and RelationshipNameWithName.

00:34:04.020 --> 00:34:06.450
Again,
RelationshipName is the name that was

00:34:06.450 --> 00:34:09.450
used for the relationship when you
declared it in the script suite file.

00:34:09.460 --> 00:34:11.560
And those return a single object.

00:34:12.140 --> 00:34:15.440
And these aren't used for
every kind of element,

00:34:15.440 --> 00:34:19.480
only elements whose class
declare name and ID properties.

00:34:19.480 --> 00:34:21.090
Name or ID properties.

00:34:22.970 --> 00:34:27.630
And there are three more possible
messages for key value coding that

00:34:27.830 --> 00:34:29.740
relate to too many relationships.

00:34:29.740 --> 00:34:33.700
We call things like replace value in
index and property with key with value.

00:34:33.700 --> 00:34:40.120
And your container class has to implement
a method whose name takes the form

00:34:40.120 --> 00:34:42.980
replace in relationship name at index.

00:34:43.040 --> 00:34:46.880
And those are used during, for example,
the copy command,

00:34:46.970 --> 00:34:51.280
or the duplicate command, rather,
the delete command, the make command,

00:34:51.280 --> 00:34:52.310
things like that.

00:35:03.580 --> 00:35:06.760
So in addition to supporting
those key value coding methods,

00:35:06.960 --> 00:35:10.100
which is pretty easy,
one more thing that you should be

00:35:10.100 --> 00:35:13.780
aware of that you might have to do,
if you support classes in your

00:35:13.780 --> 00:35:18.830
scripting system that are creatable,
for example, in TextEdit,

00:35:18.940 --> 00:35:22.010
make new document,
you do have to make sure that

00:35:22.010 --> 00:35:24.100
that class has a good init method.

00:35:24.110 --> 00:35:26.350
And that's just the plain init method.

00:35:26.350 --> 00:35:28.800
There are no parameters passed into that.

00:35:28.920 --> 00:35:32.250
What we do, though,
because the make command has a with

00:35:32.250 --> 00:35:37.080
properties parameter that is optional,
we'll call the set accessors for all

00:35:37.230 --> 00:35:42.020
the attributes on that freshly created
object that correspond to those that

00:35:42.410 --> 00:35:47.080
were in the record that appeared
with the with properties parameter.

00:35:47.080 --> 00:35:48.290
So.

00:35:48.970 --> 00:35:51.660
and it's not really possible
to make an object that just

00:35:51.660 --> 00:35:53.400
hangs in the middle of nowhere.

00:35:53.400 --> 00:35:55.970
You always have to specify
what container it's going to

00:35:56.050 --> 00:35:57.740
be inserted into immediately.

00:35:57.740 --> 00:36:08.240
So make sure the valid container
classes for that class that might be

00:36:08.240 --> 00:36:10.010
credible implement the proper replace
in and insert in accessor methods.

00:36:12.150 --> 00:36:14.320
And one more thing to deal with.

00:36:14.440 --> 00:36:17.540
This is the big complexity, actually,
relatively speaking.

00:36:17.540 --> 00:36:21.280
Your scriptable object may be
sent an object specifier message.

00:36:21.420 --> 00:36:25.050
Just as object specifiers come in,
very often they go out.

00:36:25.160 --> 00:36:28.900
The result of a make command
is a reference in AppleScript,

00:36:28.900 --> 00:36:32.360
which means we have to
return an object specifier.

00:36:32.360 --> 00:36:36.220
So your newly created object might
be asked pretty much immediately

00:36:36.250 --> 00:36:37.900
for its object specifier.

00:36:37.900 --> 00:36:41.670
And another case like that
is in the get command.

00:36:42.200 --> 00:36:48.670
When the reference that goes with
the get command refers to something

00:36:48.810 --> 00:36:51.370
that is not a simple value type,
is an actual object,

00:36:51.440 --> 00:36:53.840
the object that your accessor
has returned will be asked

00:36:54.000 --> 00:36:54.920
for an object specifier.

00:36:54.920 --> 00:36:58.620
And what you're expected to do
there is to create some subclass

00:36:58.750 --> 00:37:02.740
of an script object specifier,
index specifier, name specifier,

00:37:02.870 --> 00:37:05.880
unique ID specifier,
becoming the typical ones,

00:37:05.980 --> 00:37:07.230
and return that.

00:37:08.960 --> 00:37:14.260
A big implementation detail about
this is that you'll probably have

00:37:14.300 --> 00:37:17.750
to ask the container of the object,
of the element object,

00:37:17.900 --> 00:37:24.860
for its object specifier,
which is actually kind of inconvenient

00:37:24.860 --> 00:37:28.990
in a lot of people's code,
and we are doing something to

00:37:28.990 --> 00:37:28.990
address that that I'll discuss later.

00:37:30.890 --> 00:37:33.530
So I showed you a little bit
about script suite files,

00:37:33.530 --> 00:37:36.260
and I've been talking about types,
but I haven't gotten specific

00:37:36.310 --> 00:37:39.770
about what exactly you can use
as types in script suite files.

00:37:39.800 --> 00:37:44.180
You have to specify type names
when declaring class attributes,

00:37:44.180 --> 00:37:48.770
class relationships, command arguments,
and command results.

00:37:48.860 --> 00:37:52.780
The valid types include things like
the names of scriptable classes,

00:37:52.780 --> 00:37:57.220
a few selected foundation classes,
and a little more complicated

00:37:57.220 --> 00:37:59.040
thing that I'll talk about.

00:38:01.130 --> 00:38:02.940
Scriptable class names.

00:38:02.940 --> 00:38:08.300
You can use as type names classes that
were declared in the same script suite

00:38:08.310 --> 00:38:12.630
in which that declaration appears,
and also classes that were

00:38:12.630 --> 00:38:17.860
declared in other script suites
if you specify which script suite.

00:38:18.920 --> 00:38:22.840
You should know that we declare
a few classes in Foundation's own

00:38:22.960 --> 00:38:26.920
NSCoreSuite script suite file,
including things like NSApplication

00:38:26.920 --> 00:38:30.360
and NSDocument and NSWindow that
are actually implemented in AppKit,

00:38:30.360 --> 00:38:34.610
but nonetheless declared in
Foundation's NSCoreSuite.script suite.

00:38:34.790 --> 00:38:35.920
That's where to go to look for that.

00:38:39.350 --> 00:38:43.060
Some value types that we support:
NSString,

00:38:43.060 --> 00:38:46.600
which will always appear in scripting
dictionaries as Unicode text.

00:38:46.600 --> 00:38:49.180
NSDate, which corresponds to date,
of course.

00:38:49.220 --> 00:38:51.070
NSHorray.

00:38:51.210 --> 00:38:53.480
If you've been working with
Cocoa scripting already and you

00:38:53.500 --> 00:38:59.200
tried to declare the type of a
property to be a list in NSHorray,

00:38:59.210 --> 00:39:00.200
it didn't work at all.

00:39:00.200 --> 00:39:01.630
It was a big bug.

00:39:01.630 --> 00:39:03.070
It was a whopper.

00:39:03.140 --> 00:39:06.470
And we took care of that, though,
so that will work in the

00:39:06.470 --> 00:39:08.200
Jaguar seed that you have.

00:39:08.200 --> 00:39:09.410
NSDictionary's.

00:39:09.410 --> 00:39:13.030
That's what you use to declare
something that you want to appear

00:39:13.140 --> 00:39:15.200
as a record in a scripting suite.

00:39:15.210 --> 00:39:18.200
And references and location references.

00:39:18.270 --> 00:39:21.200
We have classes that correspond to those.

00:39:24.430 --> 00:39:27.860
You saw some of the NSNumber types
that were in the script

00:39:28.050 --> 00:39:29.840
suite file there before.

00:39:29.840 --> 00:39:31.640
We support a big long list of those.

00:39:31.800 --> 00:39:37.730
These get moved around as NSNumbers,
but appear as specific

00:39:37.730 --> 00:39:41.800
friendly AppleScript types
in the scripting dictionary.

00:39:44.240 --> 00:39:48.100
and the one little complication as
far as types go is for enumerations.

00:39:48.100 --> 00:39:51.820
When you specify that an
enumeration is the type of a value,

00:39:51.820 --> 00:39:55.400
you have to also declare elsewhere in
the ScriptSuite and script terminology

00:39:55.400 --> 00:39:57.700
files information about that enumeration.

00:39:57.700 --> 00:40:05.220
The four character codes that correspond
to each enumerator ask yes and no,

00:40:05.220 --> 00:40:09.860
for instance,
and you have to provide descriptions

00:40:09.860 --> 00:40:09.860
and names for each of those,
too.

00:40:11.520 --> 00:40:14.780
So, let's talk about the new stuff
that's appearing in Jaguar.

00:40:14.780 --> 00:40:16.540
I already alluded to this.

00:40:16.580 --> 00:40:20.520
We have a new class
called NSNameSpecifier.

00:40:20.560 --> 00:40:22.820
It supports AppleScript's
name reference form,

00:40:22.830 --> 00:40:26.370
so something like window
named Cocoa Scripting.

00:40:27.630 --> 00:40:29.090
is an example of this.

00:40:29.160 --> 00:40:33.950
We used to ask for the application for
all of its windows and poke through

00:40:33.950 --> 00:40:36.490
each one of them asking for its name.

00:40:36.490 --> 00:40:41.250
That's not so bad in the case of windows,
but it's potentially very awful

00:40:41.340 --> 00:40:43.280
in the case of other things.

00:40:43.280 --> 00:40:48.170
The first example anybody ever asked
me for was a stock ticker application

00:40:48.330 --> 00:40:53.220
of some sort where they wanted to refer
to stock information by the symbol.

00:40:53.220 --> 00:40:57.110
Of course,
there are thousands of those possible.

00:40:57.660 --> 00:41:00.590
They had a way to look it up
quickly using a dictionary,

00:41:00.590 --> 00:41:07.090
and now that quickness can flow through
to the Cocoa scripting system this way.

00:41:07.130 --> 00:41:11.700
So by implementing a method named
value in relationship name with name,

00:41:11.720 --> 00:41:15.350
when a name reference form comes in,
we'll send you that,

00:41:15.350 --> 00:41:19.520
and you can make it as fast as you
can to return the named object.

00:41:19.520 --> 00:41:25.760
To trigger this,
the element class has to have

00:41:25.760 --> 00:41:27.580
an attribute that's going to
be called the element class.

00:41:27.700 --> 00:41:29.890
The element class is a code
whose Apple event code is PNAM,

00:41:29.910 --> 00:41:31.980
the traditional
four-character code for that.

00:41:33.710 --> 00:41:36.280
And the same thing for
the ID reference form.

00:41:36.280 --> 00:41:39.800
We now have a class named
NSUniqueIDSpecifier.

00:41:39.800 --> 00:41:43.720
It's triggered when you have a
four character code ID space space.

00:41:43.720 --> 00:41:47.400
There are two spaces in that
four character code there.

00:41:47.400 --> 00:41:50.320
And there's a method
that corresponds to that,

00:41:50.330 --> 00:41:53.310
value and relationship
name with unique ID.

00:42:02.020 --> 00:42:06.760
So one thing I showed you with that
page setup example was setting all

00:42:06.760 --> 00:42:11.490
those margins at one time by setting
the properties of that page setup

00:42:11.490 --> 00:42:17.100
object to a record that included values
for each of the four margins there.

00:42:17.100 --> 00:42:20.040
And that is now just built
into Cocoa Scripting.

00:42:20.040 --> 00:42:23.190
We have all the information necessary
to support this because you put

00:42:23.190 --> 00:42:24.770
it all in the script suite file.

00:42:24.790 --> 00:42:27.410
So you don't have to do
anything beyond that.

00:42:27.450 --> 00:42:31.960
Each one of your classes will
have a properties property in it.

00:42:58.760 --> 00:42:58.950
Actually, it's in our item class,
which you will be a subclass of if you

00:42:58.950 --> 00:42:58.950
refer to nscoresuite.abstractobject
in your script suite file.

00:42:58.950 --> 00:42:58.950
And just as for any other attribute,
there are accessor methods for these.

00:42:58.950 --> 00:42:58.950
We've made ours public for
this in a category on nsobject

00:42:58.950 --> 00:42:58.950
with the predictable names.

00:42:58.950 --> 00:42:58.950
I'm not expecting you to probably
ever have to override those,

00:42:58.950 --> 00:42:58.950
but they're there just in case.

00:43:00.300 --> 00:43:02.020
A neat little feature we added recently.

00:43:02.020 --> 00:43:05.180
Lots of other scriptable
applications were doing this,

00:43:05.270 --> 00:43:07.770
so we thought we'd make
it easy for you to do it,

00:43:07.820 --> 00:43:08.320
too.

00:43:08.320 --> 00:43:10.980
In an application like TextEdit,
for instance,

00:43:10.980 --> 00:43:14.730
people used to have to write fourth
word of text to front document.

00:43:14.740 --> 00:43:18.250
Well, when they say fourth word,
what else would it be in a

00:43:18.250 --> 00:43:20.420
TextEdit document but the text?

00:43:20.440 --> 00:43:24.710
So we now let you add support for
that little bit of ease of use,

00:43:24.710 --> 00:43:28.040
and you do that with a single entry
in the script suite file called

00:43:28.040 --> 00:43:29.990
default subcontainer attribute.

00:43:33.740 --> 00:43:37.890
NSAppleEventDescriptor,
a class that's been in Cocoa for a while.

00:43:37.890 --> 00:43:39.870
We've added a few methods on it.

00:43:39.870 --> 00:43:43.470
NSAppleEventDescriptor appears
in our API in a few places,

00:43:43.470 --> 00:43:48.220
and it's going to be appearing in a
few others potentially in the future.

00:43:48.220 --> 00:43:52.340
So we've started making it a little bit
easier to pick these things apart with

00:43:52.820 --> 00:43:57.110
methods like bool value and string value
when you know the AppleEventDescriptor

00:43:57.190 --> 00:44:00.130
contains one of those,
or contains, for instance,

00:44:00.130 --> 00:44:03.020
something that is
coercible to one of those.

00:44:03.700 --> 00:44:05.810
And to create them,
we added a few convenient

00:44:05.820 --> 00:44:06.860
class methods too.

00:44:09.830 --> 00:44:12.820
I know people want this class
because I've been reading the

00:44:12.820 --> 00:44:16.550
mailing list and it's becoming sort
of a frequently asked question.

00:44:16.560 --> 00:44:20.220
How do I execute AppleScripts
from within Cocoa?

00:44:20.240 --> 00:44:24.980
And there are actually a couple of freely
available classes that do this now,

00:44:25.060 --> 00:44:28.980
but built into the system very
often is one step better than free,

00:44:29.020 --> 00:44:30.330
so we've done that.

00:44:30.390 --> 00:44:35.470
You no longer have to resort to the
Carbon APIs to execute AppleScripts.

00:44:35.530 --> 00:44:38.060
And it has the things
that you would expect.

00:44:38.260 --> 00:44:43.200
You can initialize an NSAppleScript that
corresponds to the contents of a file,

00:44:43.200 --> 00:44:45.160
including a compiled file.

00:44:45.160 --> 00:44:48.990
And despite the name of the class,
any OSA language is good.

00:44:49.000 --> 00:44:51.810
You can initialize from source code.

00:44:51.840 --> 00:44:54.720
You can compile and execute,
and we give you ways to get at

00:44:54.720 --> 00:44:58.010
all the error information that
might be returned during that.

00:44:58.260 --> 00:45:01.370
And one neat feature,
NSAppleScript is actually

00:45:01.440 --> 00:45:04.800
a class in Foundation,
but there's a category on it in

00:45:04.800 --> 00:45:07.790
the AppKit with a single method,
rich text source.

00:45:08.410 --> 00:45:11.240
When you invoke this on a script
that's compiled successfully,

00:45:11.240 --> 00:45:13.990
it will do pretty much the same
thing that Script Editor does

00:45:13.990 --> 00:45:17.730
and pretty print the source code,
except it returns an NS attributed

00:45:17.730 --> 00:45:21.580
string to you that you can just slam
into an NSTextView or something like

00:45:21.640 --> 00:45:26.240
that without any trouble and show good
looking AppleScript code to your users.

00:45:30.370 --> 00:45:33.570
So all this, of course,
is described in the release notes,

00:45:33.670 --> 00:45:36.550
deep within the turgid prose
of those pages and pages

00:45:36.550 --> 00:45:38.400
of scripting release notes.

00:45:38.420 --> 00:45:42.100
Absolutely every new feature in
BugFix is described in great,

00:45:42.270 --> 00:45:43.380
grueling detail.

00:45:43.380 --> 00:45:48.290
This is on your CD right now,
one of your six CDs right now,

00:45:48.390 --> 00:45:52.680
at developer documentation release notes,
foundation.html.

00:45:52.680 --> 00:45:54.560
Most of scripting is in foundation.

00:45:57.470 --> 00:45:58.340
So, future directions.

00:45:58.340 --> 00:46:01.300
If you were at the
AppleScript update session yesterday,

00:46:01.300 --> 00:46:07.790
you saw the introduction of the new
SDEF file format for defining suites.

00:46:07.860 --> 00:46:11.440
And, of course,
we're going to adopt this eventually.

00:46:11.440 --> 00:46:15.250
Editing script suite and script
terminology files is all well and good,

00:46:15.290 --> 00:46:19.480
but editing SDEF files looks like
it's going to be one step easier

00:46:19.480 --> 00:46:23.110
and will allow us to add a few
other features when we adopt that.

00:46:24.260 --> 00:46:26.500
That's not going to happen for
the final release of Jaguar,

00:46:26.500 --> 00:46:27.860
though, almost certainly.

00:46:27.860 --> 00:46:30.600
So, even before then,
even with our existing script suite

00:46:30.600 --> 00:46:33.910
and script terminology file formats,
we're going to make those a little

00:46:33.920 --> 00:46:37.790
bit better so that the scripting
dictionaries that the scripter

00:46:37.790 --> 00:46:39.920
sees will be a little prettier.

00:46:39.920 --> 00:46:42.030
Right now,
you don't have control over the

00:46:42.100 --> 00:46:45.410
order in which things appear in
those scripting dictionaries,

00:46:45.410 --> 00:46:49.400
which is a little bit of an omission,
and we're going to take care of that.

00:46:49.490 --> 00:46:51.480
And also,
there's going to be a mechanism that will

00:46:51.480 --> 00:46:53.440
be reminiscent of Objective-C categories.

00:46:54.140 --> 00:46:58.200
So that you can add attributes
onto scriptable classes that are

00:46:58.330 --> 00:47:02.480
declared in other suites without
making a redundant subclass appear

00:47:02.760 --> 00:47:05.000
in the scripting dictionary.

00:47:06.700 --> 00:47:08.540
We're going to work on our type checking.

00:47:08.540 --> 00:47:11.320
We already do a bunch,
but we can do a lot more.

00:47:11.320 --> 00:47:16.580
Our goal is to eventually fix it
so that you specify in good detail

00:47:16.580 --> 00:47:21.110
the scripting definition file,
what types an attribute can have,

00:47:21.200 --> 00:47:22.400
or relationship.

00:47:22.500 --> 00:47:27.880
And then we'll take care of absolutely
everything for making sure that things

00:47:27.880 --> 00:47:33.720
that are coming in conform to those types
without you having to do anything at all.

00:47:34.820 --> 00:47:38.560
And a closely related subject,
we're working on our error reporting.

00:47:38.560 --> 00:47:41.910
If you've been working with
scripting a Cocoa application,

00:47:41.910 --> 00:47:46.100
you might have seen it return some
truly horrifying error messages

00:47:46.100 --> 00:47:49.970
that no scripter could ever
parse or make head or tail of.

00:47:50.090 --> 00:47:53.060
And we're working on replacing those
with something more informative.

00:47:56.590 --> 00:47:58.580
So other things we still plan on adding.

00:47:58.580 --> 00:48:00.450
Cocoa API for sending Apple events.

00:48:00.480 --> 00:48:04.800
Right now you can call just about
any Carbon function from a Cocoa app,

00:48:04.870 --> 00:48:07.620
but it seems like a lot
of people don't like to.

00:48:07.620 --> 00:48:10.950
People want that kind of
functionality wrapped up in an

00:48:10.950 --> 00:48:14.720
Objective-C or Java class and
made a little more convenient,

00:48:14.720 --> 00:48:18.260
a little more pretty,
and of course we want to do that too,

00:48:18.260 --> 00:48:19.270
so we will.

00:48:20.530 --> 00:48:24.090
There are a couple of complicated
implementation details that you might

00:48:24.090 --> 00:48:27.880
run into as far as how your scripting
support interacts with your undo support.

00:48:27.880 --> 00:48:31.230
Some things that you have to take
care of that might surprise you

00:48:31.230 --> 00:48:33.060
when you start working with it.

00:48:33.140 --> 00:48:37.440
And we have ways in mind
actually to automate all of that.

00:48:37.590 --> 00:48:41.510
So scriptable commands will
automatically be undoable without

00:48:41.550 --> 00:48:44.870
you doing much of anything,
probably adding a single

00:48:44.890 --> 00:48:46.980
method to container classes.

00:48:49.950 --> 00:48:53.280
I talked before about the inconvenience
of what goes on when you implement

00:48:53.290 --> 00:48:55.910
an object specifier method,
when an object is asked to

00:48:55.910 --> 00:48:57.740
return one of these for itself.

00:48:57.800 --> 00:49:03.700
That does cause a good bit of trouble,
and we're probably going to change that.

00:49:03.700 --> 00:49:06.140
Of course, we'll keep supporting the old
way for backward compatibility.

00:49:06.140 --> 00:49:11.200
But we're going to start asking objects'
containers for object specifiers

00:49:11.200 --> 00:49:13.880
instead of the objects themselves.

00:49:13.880 --> 00:49:16.360
This way,
objects won't have to be cognizant of

00:49:16.460 --> 00:49:18.550
their containers just for this sake.

00:49:18.700 --> 00:49:21.680
There are plenty of places in
coding where that is appropriate,

00:49:21.680 --> 00:49:24.780
but to have to add it just for
the sake of this one method

00:49:24.780 --> 00:49:26.330
is a great inconvenience.

00:49:26.340 --> 00:49:29.700
And the last thing, of course,
definitely not the least,

00:49:29.700 --> 00:49:31.020
is recordability.

00:49:31.020 --> 00:49:34.540
You're not a perfect scriptable
application in a lot of cases

00:49:34.540 --> 00:49:36.760
until you support recordability.

00:49:36.760 --> 00:49:39.370
And right now, we don't do anything
to help you with this.

00:49:39.400 --> 00:49:41.250
And, of course, we do intend to.

00:49:44.100 --> 00:49:46.860
So the roadmap, the AppleScript update
yesterday was fantastic.

00:49:47.020 --> 00:49:48.960
I hope you all saw it.

00:49:49.140 --> 00:49:52.120
AppleScript studio talks are always good.

00:49:52.140 --> 00:49:55.600
There's a feedback forum,
and that was yesterday too.

00:49:55.600 --> 00:49:58.690
There's a feedback forum for AppleScript.

00:49:58.690 --> 00:50:03.960
That's where you can go to let them know
what you think about how excited you are

00:50:03.960 --> 00:50:09.840
about AppleScript 10 that's coming up
and general scripting issues like that.

00:50:09.840 --> 00:50:11.900
Cocoa's own feedback forum
is tomorrow at 5 o'clock.

00:50:12.970 --> 00:50:13.980
So, who to contact?

00:50:14.150 --> 00:50:16.120
Heather Hickman is our
technology manager.

00:50:16.120 --> 00:50:18.690
If you've been on the Cocoa track,
you've been seeing our email address

00:50:18.900 --> 00:50:20.140
flash up and down a couple of times.

00:50:22.520 --> 00:50:23.740
Documentation.

00:50:23.740 --> 00:50:25.820
There is plenty of documentation
for Cocoa scripting.

00:50:25.820 --> 00:50:27.560
It's spread out a little bit, though.

00:50:27.580 --> 00:50:32.870
In particular, in the Cocoa topics,
there's two very relevant topics.

00:50:32.970 --> 00:50:34.580
First one is application architecture.

00:50:34.580 --> 00:50:37.510
It explains the model
view controller pattern.

00:50:38.210 --> 00:50:40.250
Even if you're not working
on scriptability for your

00:50:40.250 --> 00:50:44.090
application right away,
you should read this documentation

00:50:44.200 --> 00:50:47.520
before you start writing,
because if you follow a lot

00:50:47.520 --> 00:50:50.700
of the patterns it discusses,
when you do add scriptability,

00:50:50.700 --> 00:50:52.880
it'll be a good bit easier, probably.

00:50:55.380 --> 00:50:59.300
The really specific Cocoa Scripting
documentation is in its own topic,

00:50:59.300 --> 00:51:02.040
also available from
the typical web pages.

00:51:02.040 --> 00:51:09.950
So it gives you a pretty good
overview of the programming

00:51:09.950 --> 00:51:09.950
tasks that have to be dealt with,
and it links to the class

00:51:09.950 --> 00:51:09.950
reference and things like that.

00:51:11.350 --> 00:51:13.600
I wanted to bring this one
to everybody's attention.

00:51:13.600 --> 00:51:16.170
Designing a scripting implementation.

00:51:16.170 --> 00:51:20.310
A seven-year-old article that appeared
in Develop Issue 21 by Cal Simone.

00:51:20.310 --> 00:51:22.750
I keep referring back to this.

00:51:22.940 --> 00:51:24.240
This is a fantastic article.

00:51:24.240 --> 00:51:26.910
A lot of the implementation
details are pretty irrelevant

00:51:26.910 --> 00:51:30.010
for Cocoa scripting now,
but it's really easy to pick those out.

00:51:30.240 --> 00:51:33.390
What's important about this article
is he presents guidelines for what

00:51:33.650 --> 00:51:35.070
makes a good scriptable application.

00:51:35.180 --> 00:51:37.550
How do you decide when
something should be a command,

00:51:37.550 --> 00:51:40.140
when should it be a property,
when should it be an element,

00:51:40.140 --> 00:51:41.250
things like that.

00:51:41.380 --> 00:51:43.410
It's still a very valuable document.

00:51:43.410 --> 00:51:47.300
And he also gives you there some advice
about picking four-character codes.

00:51:49.780 --> 00:51:54.580
and for more information,
the usual suspects,

00:51:54.580 --> 00:52:01.450
Cocoa developer documentation,
iServices technical training.

00:52:01.450 --> 00:52:04.540
On the O'Reilly webpage,
somebody's writing some very

00:52:04.540 --> 00:52:04.540
interesting articles about
AppleScript in general on Mac OS X,

00:52:04.540 --> 00:52:04.540
and some of them are specifically
about Cocoa scripting.

00:52:06.070 --> 00:52:08.930
and before I go, I want to bring this
application to your attention.

00:52:08.930 --> 00:52:10.140
It's called Suite Modeler.

00:52:10.260 --> 00:52:11.700
It's by a guy named Don Briggs.

00:52:11.700 --> 00:52:13.260
It's available on his iDisk.

00:52:13.400 --> 00:52:17.900
It's a shareware application that
lets you edit script suite and

00:52:17.900 --> 00:52:19.920
script terminology files together.

00:52:19.920 --> 00:52:23.660
It makes a lot of things
much more convenient,

00:52:23.660 --> 00:52:27.780
and it does a good job of checking
for things like Apple event code

00:52:27.780 --> 00:52:29.170
conflicts and other mistakes.

00:52:29.220 --> 00:52:32.150
He's actually used it to find
a few bugs in our own script

00:52:32.270 --> 00:52:35.820
suite and script terminology
files that appear on the system.

00:52:36.000 --> 00:52:38.720
And he sent those to me,
and we've taken care of that, of course.

00:52:38.760 --> 00:52:41.570
And, of course, on his iDisk,
he has a very interesting tutorial

00:52:41.720 --> 00:52:43.400
that goes along with that,
too.

00:52:45.730 --> 00:52:47.780
So, that's it.

00:52:47.800 --> 00:52:51.250
Go make your applications scriptable,
but before you do that,

00:52:51.250 --> 00:52:58.940
I'm sure you'll have a few questions,
so I'd like to invite Heather Hickman

00:52:58.940 --> 00:52:58.940
and others up to the stage to
walk us through some of it.