WEBVTT

00:00:15.740 --> 00:00:17.110
Good afternoon.

00:00:17.210 --> 00:00:19.070
Welcome to WWDC.

00:00:19.240 --> 00:00:22.120
I'm glad to see we have
quite a crowd today.

00:00:22.520 --> 00:00:29.220
The development tools of Mac OS X mark
a new era for Apple computer in shipping

00:00:29.220 --> 00:00:33.340
our operating system with tools included.

00:00:33.340 --> 00:00:37.850
This appeals to our Unix community,
it appeals to all the

00:00:37.850 --> 00:00:39.610
people who otherwise

00:00:39.790 --> 00:00:44.570
would be working on other platforms and
have seen Mac OS X as a new strategy,

00:00:44.570 --> 00:00:46.350
a new advantage.

00:00:55.300 --> 00:01:02.000
In seeing this... I'm flubbing here,
excuse me.

00:01:05.820 --> 00:01:09.730
In seeing this as a strategic
asset of the operating system,

00:01:09.780 --> 00:01:15.600
we take in Mac OS X the combination
of our traditional ease of use,

00:01:15.620 --> 00:01:21.040
our traditional user access,
we add development tools to it,

00:01:21.040 --> 00:01:23.740
and that gives us the
opportunity to call ourselves

00:01:23.740 --> 00:01:25.760
the ultimate development system.

00:01:27.510 --> 00:01:30.380
In the hour to come,
we're going to be talking about all of

00:01:30.380 --> 00:01:34.140
our various development technologies,
what we're doing now,

00:01:34.140 --> 00:01:36.740
what we've done over the past year,
and what's to come.

00:01:36.740 --> 00:01:41.060
And to do that job,
I'd like to invite my good

00:01:41.060 --> 00:01:46.330
old friend and colleague,
Ted Goldstein, the Vice President of

00:01:46.340 --> 00:01:48.560
Apple Development Technologies,
to come to the stage.

00:01:48.560 --> 00:01:53.600
I've known Ted for, what is it now,
22 years, 23 years?

00:01:54.380 --> 00:01:59.440
Ted has a long history in
development tools and compilers,

00:01:59.460 --> 00:02:01.180
IDEs, and Java.

00:02:01.180 --> 00:02:02.560
So, Ted, take the stage.

00:02:02.620 --> 00:02:03.240
Thank you.

00:02:07.230 --> 00:02:14.160
So I think I loaned Godfrey the
money for his first Mac back in 1984,

00:02:14.160 --> 00:02:19.160
and it's taken me a little
bit longer to catch up to him.

00:02:19.400 --> 00:02:22.690
The Macintosh and such,
we actually did a small development

00:02:22.690 --> 00:02:25.500
on the Mac porting Smalltalk,
which I think also has a little

00:02:25.500 --> 00:02:28.200
bit of history in common with
some of the Macintosh effort.

00:02:28.200 --> 00:02:31.220
But mostly I've been a compiler
writer over these last 20 years.

00:02:31.220 --> 00:02:35.250
And in trying to fit in with Apple,
people tell me I should take my coat off.

00:02:35.300 --> 00:02:36.340
Should I take my coat off?

00:02:36.460 --> 00:02:38.820
Is that... Okay.

00:02:42.930 --> 00:02:44.800
Believe me,
you don't want me to take it off.

00:02:44.800 --> 00:02:50.770
So what is development technologies?

00:02:50.800 --> 00:02:53.600
What is the charter of this
new group within Apple?

00:02:53.750 --> 00:02:55.860
And we're going to talk about that.

00:02:55.900 --> 00:02:59.000
Try to give you a little overview
about some of the new thinking

00:02:59.320 --> 00:03:03.360
around tools and such and how the
different pieces fits together.

00:03:03.460 --> 00:03:07.440
And I want to actually give you a bit
of a progress report from where we are.

00:03:07.440 --> 00:03:11.600
I invite some of my colleagues
up to talk about different areas,

00:03:11.600 --> 00:03:13.600
give some interesting demos.

00:03:13.840 --> 00:03:17.100
The way we deliver our
systems is with partners.

00:03:17.170 --> 00:03:21.140
And extremely important in the tools
business is to work closely with

00:03:21.430 --> 00:03:24.900
other third-party tools vendors
because Apple cannot do it by itself.

00:03:24.900 --> 00:03:27.500
We really,
really do believe in collaboration,

00:03:27.500 --> 00:03:30.600
that it's key to the efforts
to make things happen.

00:03:30.600 --> 00:03:33.920
And I want to talk a little bit about
some new initiatives that we're going

00:03:33.920 --> 00:03:39.210
to take some leadership on to bring in
technologies that's happening both within

00:03:39.210 --> 00:03:43.500
Apple and outside into the tools space
because we think that all these things

00:03:43.500 --> 00:03:45.440
need to combine together synergistically.

00:03:45.500 --> 00:03:48.500
In fact, synergy is a very
important word in my talk,

00:03:48.500 --> 00:03:50.830
and I'm going to use it probably, oh,
17 times.

00:03:50.900 --> 00:03:52.880
Um...

00:03:54.840 --> 00:04:00.390
Development technologies is an amalgam
of different tools and technologies.

00:04:00.510 --> 00:04:02.920
And I think one of the things
that's extremely important for a

00:04:03.000 --> 00:04:07.400
rich platform like the Macintosh
is to really build a big tent.

00:04:07.470 --> 00:04:09.870
And by big tent,
what we mean is everybody

00:04:09.950 --> 00:04:12.640
can come inside,
whether you're a Carbon and a

00:04:12.640 --> 00:04:17.590
Cocoa developer and you are developing
the great desktop applications that have

00:04:17.590 --> 00:04:21.230
made the Macintosh terrific for many,
many years now.

00:04:21.260 --> 00:04:25.500
We also have appeal to the
multi-platform Java developers,

00:04:25.500 --> 00:04:29.230
people who want to write one program,
develop one binary,

00:04:29.250 --> 00:04:32.360
and ship it on Windows, on Unix,
on Linux,

00:04:32.360 --> 00:04:37.310
and other non-Macintosh systems,
as well as Macintosh and Mac Unix,

00:04:37.310 --> 00:04:38.360
of course.

00:04:38.360 --> 00:04:42.380
And we think that this is a very
interesting dynamic where we have

00:04:42.380 --> 00:04:46.550
the ability to take the same binary
from one platform to another and

00:04:46.550 --> 00:04:48.870
the kinds of things you have to do.

00:04:48.920 --> 00:04:51.220
Mostly we'll be talking about
that in my presentation.

00:04:51.220 --> 00:04:54.620
My next session, number 400,
that follows immediately after this.

00:04:54.670 --> 00:04:57.660
So I won't spend too much time in
this session talking about Java,

00:04:57.710 --> 00:04:59.550
but it really is part
of the same department.

00:04:59.680 --> 00:05:03.640
And we're looking to increase the
different synergies between Carbon,

00:05:03.690 --> 00:05:07.780
Cocoa, Java, AppleScript,
and such all together to make a very

00:05:07.780 --> 00:05:10.700
coherent platform for you to develop on.

00:05:11.060 --> 00:05:14.570
One of the most important areas
I think that this new department

00:05:14.570 --> 00:05:18.480
has is it combines together the
tools along with database systems.

00:05:18.520 --> 00:05:21.680
And this means that we are
actually going to be looking

00:05:21.680 --> 00:05:25.420
at and beginning to incorporate
database application programming

00:05:25.420 --> 00:05:29.320
more closely into the standard way
to develop Macintosh applications.

00:05:29.350 --> 00:05:32.720
Unix developers, of course,
extremely rich,

00:05:32.720 --> 00:05:38.320
extremely terrific area because we have
really a very fine Unix experience.

00:05:38.370 --> 00:05:42.980
It has the ability to run top and
all the command line tools and all

00:05:42.980 --> 00:05:44.340
the rich Perl and Tcl environments.

00:05:44.340 --> 00:05:48.390
And we get a tremendous amount of
benefit from the open source community to

00:05:48.390 --> 00:05:49.340
bring these tools into the environment.

00:05:49.340 --> 00:05:52.540
Many of these tools are
scripting languages themselves,

00:05:52.560 --> 00:05:54.340
such as Perl and Tcl and Python.

00:05:54.340 --> 00:06:00.130
And those tools are also now available,
of course, on Mac OS X along with our

00:06:00.130 --> 00:06:04.270
traditional Apple script environment,
which we've enhanced to allow you to

00:06:04.270 --> 00:06:06.340
create terrific new user interfaces.

00:06:06.340 --> 00:06:08.310
Using Apple script.

00:06:08.360 --> 00:06:10.070
Script Studio.

00:06:10.740 --> 00:06:12.520
So,
for those of you in the room who are new,

00:06:12.520 --> 00:06:14.920
and there must be at
least somebody besides me,

00:06:14.920 --> 00:06:20.600
I want to just give a very quick
perspective on which technology and

00:06:20.600 --> 00:06:23.260
which should you use for what purpose.

00:06:23.260 --> 00:06:27.340
We believe Cocoa still is our
primary application platform now.

00:06:27.360 --> 00:06:31.410
And it really is to create new
applications that are special

00:06:31.410 --> 00:06:33.490
to the Mac OS X environment.

00:06:33.500 --> 00:06:36.280
And really,
Cocoa gives you the most power

00:06:36.280 --> 00:06:38.550
that you can get for the Mac OS X.

00:06:38.560 --> 00:06:42.480
And it's well-designed with both
access to the Aqua user interface,

00:06:42.480 --> 00:06:45.390
every possible feature is available,
and it has a terrific

00:06:45.480 --> 00:06:46.970
object-oriented model.

00:06:46.980 --> 00:06:52.740
One of the things which the richness of
using both Objective-C and the C language

00:06:52.740 --> 00:06:58.320
allows you to blend the right power and
flexibility to really create the best

00:06:58.320 --> 00:07:01.280
possible applications that we know of.

00:07:01.320 --> 00:07:05.480
Carbon is our transition technology.

00:07:05.480 --> 00:07:08.540
And it allows one to write
applications that run both on Mac OS X.

00:07:08.540 --> 00:07:13.140
And as we saw earlier today,
Mac OS 9 is not something we really

00:07:13.250 --> 00:07:16.140
want you developing much more for.

00:07:16.140 --> 00:07:18.770
Nevertheless,
it was a fabulous technology that

00:07:19.010 --> 00:07:23.040
allowed us to make the transition
from a non-preemptive thread operating

00:07:23.190 --> 00:07:25.090
system to a preemptive thread.

00:07:25.130 --> 00:07:28.990
Or from a cooperative thread operating
system to a full multitasking,

00:07:28.990 --> 00:07:31.420
very rich, protected mode environment.

00:07:31.460 --> 00:07:35.160
Carbon really was a very unique
environment and has allowed Apple to

00:07:35.160 --> 00:07:37.800
make this extremely difficult transition.

00:07:37.800 --> 00:07:38.460
And it has been fantastic.

00:07:38.650 --> 00:07:39.840
And we're really fabulous at doing that.

00:07:40.690 --> 00:07:45.340
Nevertheless, we feel that using Carbon,
you don't get everything possible

00:07:45.470 --> 00:07:47.610
out of the Mac OS X environment.

00:07:49.010 --> 00:07:51.080
Java, as I said,
is our cross-platform strategy.

00:07:51.220 --> 00:07:54.660
We do a tremendous amount of work
to map it into Acquia interfaces

00:07:54.880 --> 00:07:56.900
and into other Mac OS X features.

00:07:57.000 --> 00:07:59.380
Nevertheless,
people who tend to write Java tend

00:07:59.380 --> 00:08:03.060
to want to write something that is
platform-independent as opposed to

00:08:03.060 --> 00:08:05.040
utilizing every possible feature.

00:08:05.130 --> 00:08:07.990
It is, however, possible to write
platform-dependent code in Java,

00:08:08.110 --> 00:08:10.440
and we don't frown on that,
but nevertheless,

00:08:10.580 --> 00:08:13.730
that isn't the primary mission
behind the Java language.

00:08:14.200 --> 00:08:18.730
AppleScript Studio is a new technology
we just released late last year.

00:08:18.730 --> 00:08:22.070
And it is a user interface
application environment that works

00:08:22.070 --> 00:08:26.720
with Interface Builder to rapidly
create new applications and

00:08:26.760 --> 00:08:28.240
to rapidly evolve applications.

00:08:28.240 --> 00:08:32.010
It integrates this AppleScript scripting
language into the Cocoa framework

00:08:32.260 --> 00:08:35.470
and really is the second language
that really fully leverages

00:08:35.470 --> 00:08:37.320
all of what Cocoa has to offer.

00:08:37.320 --> 00:08:41.400
What I really like about this is that
sometimes the amount of time you spend

00:08:41.400 --> 00:08:45.860
writing an application isn't that much
less than the amount of time using it.

00:08:45.950 --> 00:08:49.070
Sometimes they're probably pretty close,
such as when you're developing

00:08:49.070 --> 00:08:51.440
an application for one
person or a small department.

00:08:51.440 --> 00:08:55.240
You don't really want to put in the
tremendous investment to write a C or

00:08:55.240 --> 00:08:57.410
an Objective-C based application.

00:08:57.420 --> 00:09:00.650
And AppleScript Studio gives you
the ability to write something

00:09:00.710 --> 00:09:03.760
that is going to be used by a bunch
of people for a period of time,

00:09:03.860 --> 00:09:05.560
but is going to evolve rapidly.

00:09:05.560 --> 00:09:07.300
You see this a lot in
corporate environments.

00:09:07.320 --> 00:09:08.500
You see this a lot in
corporate environments,

00:09:08.500 --> 00:09:09.760
universities,
and for your own personal use.

00:09:09.820 --> 00:09:12.760
And AppleScript Studio really
is tremendous at that rapid

00:09:12.860 --> 00:09:14.610
prototyping RAD development.

00:09:14.660 --> 00:09:17.500
And of course,
no Unix system would be complete without

00:09:17.540 --> 00:09:19.560
talking about Perl and Tcl and Python.

00:09:19.890 --> 00:09:22.820
These work on pretty much all
Unix application platforms.

00:09:22.880 --> 00:09:25.230
And they're terrific in their place.

00:09:25.300 --> 00:09:28.820
Some of these languages
actually do have bindings,

00:09:28.820 --> 00:09:31.340
such as TkAqua,
that don't come from Apple directly,

00:09:31.530 --> 00:09:35.050
but do support the Aqua look
and feel to the best they can.

00:09:36.530 --> 00:09:40.220
So, Apple is still a
comparatively small company.

00:09:40.220 --> 00:09:41.180
We can't do it all.

00:09:41.180 --> 00:09:45.270
In fact, even I think some of the largest
companies these days don't try.

00:09:45.280 --> 00:09:49.760
What we need to all do is to take
standards and to innovate on top of them.

00:09:49.760 --> 00:09:53.630
We take the GNU compilers,
we take open source systems,

00:09:53.630 --> 00:09:58.020
and we build upon them to create
extremely reliable systems

00:09:58.020 --> 00:10:01.080
that then can span both our
platform and other platforms,

00:10:01.090 --> 00:10:03.690
and to have the kind of
networking and interoperability

00:10:03.690 --> 00:10:05.280
standards that people expect.

00:10:06.030 --> 00:10:09.080
What's important about
this in the tools area,

00:10:09.080 --> 00:10:14.000
of course, is we use the GNU compilers,
and we've been extremely fortunate

00:10:14.000 --> 00:10:18.360
in leveraging the open source
foundations compilers of GCC and the

00:10:18.360 --> 00:10:22.850
linkers and so on to create a rich
environment for you that runs both on

00:10:22.850 --> 00:10:27.650
Mac OS X and our Darwin build systems,
delivery environments.

00:10:27.720 --> 00:10:30.420
And so, this is an extremely
reliable environment,

00:10:30.440 --> 00:10:34.080
and something that we get tremendous
benefit from is that you can help us

00:10:34.080 --> 00:10:37.800
feed back and can take our knowledge
as well into your own systems to modify

00:10:37.850 --> 00:10:40.120
it and customize it for your own needs.

00:10:40.120 --> 00:10:41.970
But we don't think that's enough.

00:10:41.970 --> 00:10:45.280
We think that it's also extremely
critical to provide a rich set

00:10:45.280 --> 00:10:48.600
of graphical user interface
tools for rapid development.

00:10:48.620 --> 00:10:51.230
This includes things like Interface
Builder and Project Builder

00:10:51.230 --> 00:10:52.380
and Web Objects Builder.

00:10:52.400 --> 00:10:55.220
And what these things do
is they eliminate the need

00:10:55.220 --> 00:10:56.810
to write most of the code.

00:10:57.380 --> 00:11:00.060
Interface Builder, you've seen, I think,
probably in the previous session.

00:11:00.060 --> 00:11:03.580
Project Builder is our hub.

00:11:03.640 --> 00:11:08.360
It is our programming environment that
all the other components plug into.

00:11:08.360 --> 00:11:12.980
And Web Objects Builder is a tool
for working with a Web Objects

00:11:13.070 --> 00:11:18.960
server to create rich two-tier and
three-tier web application services.

00:11:20.600 --> 00:11:23.980
These environments like
WebObjects and Apache Tomcat,

00:11:23.980 --> 00:11:27.410
these are fundamental tools
for any web application,

00:11:27.420 --> 00:11:29.800
whether it's an HTML app
or new web services,

00:11:29.800 --> 00:11:32.560
and we'll be talking about
that a little bit later.

00:11:33.460 --> 00:11:38.480
So, I want to give you a picture of just
how the different pieces fit together.

00:11:38.550 --> 00:11:41.240
Along the bottom there are the
series of languages that we

00:11:41.240 --> 00:11:42.660
support directly from Apple.

00:11:42.950 --> 00:11:47.240
They include, of course, C and C++,
Java and Objective-C, and AppleScript.

00:11:47.530 --> 00:11:55.150
These languages form the basic foundation
that you as developers write in.

00:11:55.660 --> 00:11:59.090
These languages themselves are
controlled and manipulated by two

00:11:59.090 --> 00:12:04.040
different kinds of tools in this case,
Project Builder and Interface Builder.

00:12:04.050 --> 00:12:09.070
Interface Builder, of course,
just does gesturing to layout components.

00:12:09.250 --> 00:12:14.260
Project Builder integrates all
the resources of the environment

00:12:14.620 --> 00:12:16.100
along with the build system.

00:12:16.220 --> 00:12:21.570
And it also allows for very quick
and easy pathways to get to debuggers

00:12:21.570 --> 00:12:24.100
and performance tools and such.

00:12:24.870 --> 00:12:28.490
These other tools, the Performance Tools,
AppleScript Studio, and WebObject Tools,

00:12:28.490 --> 00:12:31.790
they plug into these environments,
they leverage the resources,

00:12:31.790 --> 00:12:35.220
and they are, in some sense,
the pathways off of

00:12:35.220 --> 00:12:37.960
the main thoroughfare.

00:12:37.960 --> 00:12:40.870
Project Builder and Interface
Builder really represent probably

00:12:40.870 --> 00:12:43.390
a place where you'll be spending
a great deal of your time,

00:12:43.470 --> 00:12:45.680
from time to time, once a week,
maybe once a month,

00:12:45.680 --> 00:12:49.030
certainly before you ship,
we want you to run the Performance Tools.

00:12:50.520 --> 00:12:52.660
If you're going to be
using AppleScript Studio,

00:12:52.660 --> 00:12:54.810
using WebObject Tools,
it represents different

00:12:54.860 --> 00:12:55.980
places to plug into.

00:12:55.980 --> 00:12:58.090
We'll be adding more
tools as time goes on.

00:12:59.610 --> 00:13:02.880
Finally, we think of it as that there
are four major categories of

00:13:02.880 --> 00:13:04.230
resources that you develop.

00:13:04.680 --> 00:13:07.370
Desktop applications, of course,
web-based applications,

00:13:07.370 --> 00:13:13.200
and web-based applications themselves
come in both very light HTML-based ones,

00:13:13.200 --> 00:13:15.590
browser-based applications,
as well as applications

00:13:15.600 --> 00:13:17.180
that talk to a rich client.

00:13:17.180 --> 00:13:19.500
Device drivers, of course,
because we are, of course,

00:13:19.500 --> 00:13:20.560
a hardware company.

00:13:20.560 --> 00:13:24.020
We want you plugging in
very terrific devices like

00:13:24.020 --> 00:13:26.420
scanners and cameras and such.

00:13:26.850 --> 00:13:30.010
And, of course,
other frameworks to take the knowledge

00:13:30.010 --> 00:13:33.870
that allows for technology to be
developed and reused across many,

00:13:33.870 --> 00:13:35.330
many applications.

00:13:38.000 --> 00:16:03.400
[Transcript missing]

00:16:03.810 --> 00:16:06.700
So with that,
let me introduce Dave Payne,

00:16:06.700 --> 00:16:09.320
Manager of Mac OS X Development.

00:16:09.320 --> 00:16:14.130
And he has the good fortune to
making good on all of my promises.

00:16:19.300 --> 00:16:21.060
Thanks, Ted, and welcome to Apple.

00:16:21.060 --> 00:16:25.300
So you've heard a bit about
what we're going to do,

00:16:25.300 --> 00:16:26.880
what some of our priorities are.

00:16:26.880 --> 00:16:31.630
I'd like to first start my talk
with reviewing some of what we

00:16:31.690 --> 00:16:33.400
have achieved over the past year.

00:16:34.220 --> 00:16:42.000
So if we look back, when we introduced
Mac OS X in March of 2001,

00:16:42.190 --> 00:16:45.580
along with that,
we also had a developer tool CD that had

00:16:45.710 --> 00:16:48.220
1.0 version of Project Builder on that.

00:16:48.260 --> 00:16:50.970
We built the entire
Mac OS X system with that,

00:16:50.970 --> 00:16:55.460
all the applications, the frameworks,
the device drivers, the tools,

00:16:55.460 --> 00:16:57.420
the kernels built with GCC.

00:16:57.450 --> 00:17:00.700
So it was a very full-blown
environment even at that point.

00:17:03.210 --> 00:17:06.580
In May at the developers
conference last year,

00:17:06.580 --> 00:17:09.110
we came out with a new
version of Project Builder in

00:17:09.110 --> 00:17:11.180
conjunction with WebObjects 5.

00:17:11.540 --> 00:17:17.050
So this developer tool CD provided
full support for WebObjects 5.

00:17:18.310 --> 00:17:23.420
The next major release of the OS,
version 10.1 in September,

00:17:23.440 --> 00:17:26.000
had an accompanying
developer tools CD with it,

00:17:26.080 --> 00:17:27.940
where we added a lot
of new functionality.

00:17:27.960 --> 00:17:33.580
Project Builder version 1.1 had
a lot of additional functionality

00:17:33.580 --> 00:17:36.360
for indexing of your source code.

00:17:36.380 --> 00:17:40.520
On top of that,
we built a class browser for C++,

00:17:40.520 --> 00:17:43.260
for Objective-C, for Java.

00:17:44.580 --> 00:17:48.350
We also provided integrated viewing
of the documentation for all the

00:17:48.350 --> 00:17:52.560
frameworks on the system and for the
help for the developer tools themselves

00:17:52.660 --> 00:17:54.970
and all the conceptual documentation.

00:17:55.000 --> 00:17:58.160
We had a lot of other features
and enhancements as well,

00:17:58.160 --> 00:18:00.260
but those are some of the major ones.

00:18:00.460 --> 00:18:04.130
In more of the tools area,
we came out with a new language,

00:18:04.130 --> 00:18:07.060
Objective-C++,
which is actually a language

00:18:07.060 --> 00:18:09.030
that Next had had previously.

00:18:09.240 --> 00:18:12.660
It's very important in
our context today as,

00:18:12.660 --> 00:18:15.150
for example,
let's say that you're writing a

00:18:15.150 --> 00:18:19.510
Cocoa application with Objective-C,
but you've got a library of C++ code

00:18:19.590 --> 00:18:22.400
that's a compute engine for you.

00:18:22.400 --> 00:18:23.920
Maybe it's even cross-platform.

00:18:23.920 --> 00:18:27.510
It's much more convenient to be
able to interface between the

00:18:27.510 --> 00:18:32.960
Objective-C for the Cocoa application
and the C++ in the library if

00:18:32.960 --> 00:18:34.600
you can do it in the same file.

00:18:34.600 --> 00:18:37.080
And that's what
Objective-C++ lets you do.

00:18:37.080 --> 00:18:39.080
We also modified the library.

00:18:39.240 --> 00:18:42.740
We've added a linker and loader
to provide a two-level namespace

00:18:42.740 --> 00:18:47.060
feature that gets more correct
semantics for symbol binding.

00:18:50.090 --> 00:18:54.940
In December 2001,
we had another developer tools CD.

00:18:54.980 --> 00:19:01.500
The major feature of this
was Apple Script Studio 1.0.

00:19:01.600 --> 00:19:05.200
This was promised at the
Seabold conference in September.

00:19:05.230 --> 00:19:08.580
It was announced there that it would
be available by the end of the year.

00:19:08.590 --> 00:19:11.950
There were enhancements in both
project builder and interface

00:19:11.950 --> 00:19:16.870
builder to provide full support
for this exciting new technology.

00:19:18.600 --> 00:19:22.590
and here at the developers conference
today you're actually receiving

00:19:22.590 --> 00:19:25.920
two new developer tools CDs.

00:19:26.880 --> 00:19:27.800
So, one, two.

00:19:27.800 --> 00:19:31.760
Let's take a look at what's on these.

00:19:31.760 --> 00:19:35.700
So the first of these is the
April 2002 Developer Tools CD.

00:19:35.700 --> 00:19:38.200
So just going along in our series.

00:19:38.200 --> 00:19:42.470
This is for use if you're running
and doing your development

00:19:42.550 --> 00:19:45.690
on Mac OS X version 10.1.

00:19:45.910 --> 00:19:47.760
Don't try to use this with Jaguar.

00:19:49.630 --> 00:19:54.160
Major new features in this is the
beta version of Project Builder 2.0.

00:19:54.160 --> 00:19:56.100
Why do we call it a beta?

00:19:56.100 --> 00:20:00.900
Well, we want your feedback about some
of the new changes going into that.

00:20:00.920 --> 00:20:01.950
We'll talk more about that.

00:20:01.980 --> 00:20:05.680
There's a beta version of GCC 3.1.

00:20:05.680 --> 00:20:11.280
The default compiler with
this CD is still GCC 2.95.

00:20:11.280 --> 00:20:16.100
So even though we refer to
the CD overall as a beta CD,

00:20:16.100 --> 00:20:18.820
if Project Builder is
working well for you,

00:20:19.200 --> 00:20:22.200
you're free to go ahead
and build applications for

00:20:22.310 --> 00:20:24.640
deployment with GCC 2.95.

00:20:24.660 --> 00:20:28.140
Don't do that with GCC 3.1 yet
because we haven't fully finished

00:20:28.270 --> 00:20:30.240
testing and optimizing it yet.

00:20:30.240 --> 00:20:34.450
Also, there's an updated version
of AppleScript Studio,

00:20:34.590 --> 00:20:40.110
version 1.1, in its final form,
and a lot of new documentation.

00:20:40.110 --> 00:20:42.820
So, for example,
the Cocoa reference documentation

00:20:42.820 --> 00:20:46.150
is now complete on this CD.

00:20:48.910 --> 00:20:50.680
I was waiting for that one.

00:20:50.810 --> 00:20:53.860
There's been a lot of requests for that.

00:20:53.860 --> 00:20:58.310
The other CD that you're receiving,
the Jaguar Developer Tools CD,

00:20:58.320 --> 00:21:00.870
this is the one that you would
use for development on the

00:21:00.870 --> 00:21:02.820
Jaguar OS that you received.

00:21:02.890 --> 00:21:05.530
Get the right side.

00:21:05.600 --> 00:21:07.860
Of course,
you can build applications that

00:21:07.860 --> 00:21:10.060
are compatible back on 10.1.

00:21:10.060 --> 00:21:14.790
From the 10.1 system you can build
applications that are compatible forward.

00:21:14.890 --> 00:21:19.880
With this CD,
GCC 3.1 is the default compiler now.

00:21:19.880 --> 00:21:23.480
So again, it's still beta,
just as the OS itself is a beta.

00:21:23.540 --> 00:21:27.420
The entire operating system
was built with GCC 3.

00:21:27.420 --> 00:21:31.130
So we're very interested in your
feedback on the compiler so that we

00:21:31.130 --> 00:21:35.000
can make sure that we work out any
remaining issues in the compiler

00:21:35.000 --> 00:21:40.860
before we ship the operating system
and the tools in the final versions.

00:21:41.850 --> 00:21:44.950
I'd like to review how we make these
tools available because there's a

00:21:44.980 --> 00:21:47.110
couple of it that I think is not clear.

00:21:47.390 --> 00:21:50.250
Most of you know that we
ship the developer tool CD in

00:21:50.250 --> 00:21:52.420
the Mac OS X retail box.

00:21:52.570 --> 00:21:56.700
We also now make the tools
available on new computers.

00:21:56.760 --> 00:22:01.190
When you buy a new Macintosh,
the installation images of the

00:22:01.190 --> 00:22:02.900
tools are already on the disk.

00:22:03.020 --> 00:22:06.850
So you can throw it away easily or
you can go ahead and install it.

00:22:06.940 --> 00:22:10.580
And most of you know that you
can download the tools from ADC.

00:22:10.850 --> 00:22:15.340
We do stage how these come out
because it's kind of fun when I come

00:22:15.510 --> 00:22:17.500
out with a new developer tool CD.

00:22:17.500 --> 00:22:21.300
The network bandwidth just
takes us to our knees.

00:22:21.420 --> 00:22:25.800
So we stage this software
seed key holders get it first.

00:22:25.880 --> 00:22:28.170
Then Premier and
Select members can download it.

00:22:28.350 --> 00:22:31.600
Then anybody can become an
online member and download it.

00:22:31.690 --> 00:22:36.210
But if you have a slow network connection
and would like faster access to it,

00:22:36.210 --> 00:22:37.290
there is a mechanism.

00:22:37.440 --> 00:22:39.800
Go to connect.apple.com.

00:22:39.950 --> 00:22:46.390
Send in your $20 and we'll send
you a CD of the latest content.

00:22:47.320 --> 00:22:49.500
So...

00:22:51.250 --> 00:22:55.280
Project Builder 2.0 is the
biggest change in Project Builder

00:22:55.280 --> 00:22:58.560
since we first shipped it.

00:22:58.560 --> 00:23:02.070
One of the most,
loudest pieces of feedback we

00:23:02.070 --> 00:23:06.070
got about Project Builder was,
you know, I like the environment,

00:23:06.070 --> 00:23:09.030
or I like the tools,
except that I feel constrained in

00:23:09.030 --> 00:23:11.720
your all-in-one window environment.

00:23:11.760 --> 00:23:15.420
A lot of us like it, but a lot of people,
you know, there's different people

00:23:15.420 --> 00:23:17.020
have different preferences.

00:23:17.020 --> 00:23:19.360
We have a new,
very configurable multi-window

00:23:19.360 --> 00:23:24.320
user interface that really
lets you work the way you want.

00:23:24.390 --> 00:23:27.970
We've got support for GCC 3.1,
so from Project Builder,

00:23:27.970 --> 00:23:30.820
you can set up a pre-compiled
header mechanism.

00:23:30.820 --> 00:23:35.590
We're using this new mechanism
called Persistent Front End that

00:23:35.590 --> 00:23:37.800
now also works for C++.

00:23:37.800 --> 00:23:41.660
And we've changed Project Builder
to understand all the new formats of

00:23:41.660 --> 00:23:45.150
warning and error messages from GCC 3.1.

00:23:45.430 --> 00:23:48.080
There's been a number of
improvements in the build system,

00:23:48.100 --> 00:23:52.820
such as the ability now to
clone targets in your project.

00:23:52.920 --> 00:23:57.040
So if you've got one target and you
want to make another one similar to it,

00:23:57.090 --> 00:23:58.090
you can go ahead and do that.

00:23:58.100 --> 00:24:01.040
So if you're working on a variety
of bundles that are similar,

00:24:01.040 --> 00:24:01.760
for example.

00:24:01.900 --> 00:24:07.700
I'd also like to remind you of the
build variant support that lets you,

00:24:07.700 --> 00:24:10.300
for a single target,
build it in different ways,

00:24:10.300 --> 00:24:13.300
so you don't have to clone
your targets in all cases.

00:24:13.300 --> 00:24:15.270
There's been a number of
improvements in the debugger,

00:24:15.330 --> 00:24:16.790
and we'll touch on some of this.

00:24:16.800 --> 00:24:20.390
But I encourage you to go to the
Exploring Project Builder session on

00:24:20.390 --> 00:24:24.300
Wednesday to learn more about the demo
that we're going to see at this point.

00:24:24.300 --> 00:24:26.050
Actually, one more slide.

00:24:26.300 --> 00:24:29.290
I'd like to review some of the
design point of Project Builder.

00:24:29.300 --> 00:24:32.510
From the very beginning,
we've tailored Project Builder

00:24:32.510 --> 00:24:34.300
for development for Mac OS X.

00:24:34.300 --> 00:24:39.910
So everything that you use for Mac OS X,
concepts like bundles and

00:24:39.910 --> 00:24:45.290
application packaging and frameworks,
are all very tightly integrated,

00:24:45.290 --> 00:24:47.270
these concepts, into Project Builder.

00:24:47.420 --> 00:24:50.690
If you have not read it,
I would strongly encourage you to read

00:24:50.700 --> 00:24:55.290
the system overview manual to get full
details on what all these concepts mean.

00:24:55.350 --> 00:24:59.280
So you can have a project that builds a
framework and that uses that framework

00:24:59.420 --> 00:25:02.990
in an application in that same project.

00:25:03.500 --> 00:25:07.060
With this IDE, we really try to leverage
the power of Unix that's on

00:25:07.060 --> 00:25:08.560
the platform underneath it.

00:25:08.560 --> 00:25:11.420
So, typically,
if you're doing Unix development,

00:25:11.420 --> 00:25:12.900
you might write your own makefile.

00:25:12.900 --> 00:25:16.440
We have a built-in build system
in Project Builder that relieves

00:25:16.440 --> 00:25:18.060
you from having to do that.

00:25:18.120 --> 00:25:21.690
But you may have pieces of open
source that you'd like to bring off

00:25:21.780 --> 00:25:23.820
the net and add into your project.

00:25:23.820 --> 00:25:27.600
You can have some targets in your project
that use our built-in build system,

00:25:27.820 --> 00:25:33.800
or you can use what we call legacy
makefile support to use the built-in

00:25:33.820 --> 00:25:36.590
makefiles from the other project.

00:25:36.660 --> 00:25:39.900
If you are using our
built-in build system,

00:25:39.900 --> 00:25:43.960
then you can take advantage of what
we call shell script build phases

00:25:43.960 --> 00:25:48.380
that let you customize the build
at various portions so that you

00:25:48.380 --> 00:25:50.970
can do interesting things there.

00:25:52.830 --> 00:25:56.770
And then one additional major feature
that we use very heavily at Apple,

00:25:56.770 --> 00:25:59.940
and I know that some third
parties very heavily use,

00:25:59.940 --> 00:26:04.580
is there's a command line tool called
PBX Build that actually opens your

00:26:04.580 --> 00:26:09.650
project within just a tool environment
and builds the project in exactly

00:26:09.650 --> 00:26:12.350
the same way as the IDE itself does.

00:26:12.350 --> 00:26:15.680
So you can script nightly
build processes with this.

00:26:15.680 --> 00:26:16.920
It's very powerful.

00:26:17.800 --> 00:26:20.770
And Project Builder also
facilitates team development.

00:26:20.770 --> 00:26:24.630
So, of course, as you would expect,
your application preferences

00:26:24.630 --> 00:26:25.940
are stored per user.

00:26:25.940 --> 00:26:28.660
But also for each
project that you create,

00:26:28.730 --> 00:26:33.240
every user gets their own per
project preferences there.

00:26:33.240 --> 00:26:36.100
So I can have my
breakpoints stored with it,

00:26:36.100 --> 00:26:38.410
my bookmarks, my window layout.

00:26:38.500 --> 00:26:41.440
You can have yours
stored with it as well.

00:26:41.440 --> 00:26:45.780
And Project Builder fully integrates
with the CVS version control system.

00:26:45.780 --> 00:26:46.540
So you can use this to
build your own project.

00:26:46.540 --> 00:26:51.020
So you can use this to actually
check in your profile preferences or

00:26:51.070 --> 00:26:53.780
project preferences if you'd like.

00:26:53.850 --> 00:26:57.440
So now let's go ahead and I'd
like to introduce Mike Ferris,

00:26:57.580 --> 00:27:01.430
the manager of the Project Builder team,
to give you a quick demo of some of the

00:27:01.430 --> 00:27:03.980
new features in Project Builder 2.0.

00:27:04.060 --> 00:27:06.100
Thanks, Dave.

00:27:09.100 --> 00:27:14.010
My job here this afternoon is
basically to give you just a little

00:27:14.010 --> 00:27:17.540
taste of what we've been doing
in Project Builder recently and try

00:27:17.550 --> 00:27:22.180
to entice you to come to some of
our later sessions during the week.

00:27:22.180 --> 00:27:26.870
In particular, on Wednesday we have our
Exploring Project Builder session,

00:27:26.870 --> 00:27:31.030
and if you're interested in PB,
I encourage all of you

00:27:31.030 --> 00:27:32.770
to attend that one.

00:27:32.770 --> 00:27:32.770
So,

00:27:33.620 --> 00:27:37.100
As Dave said,
one of the big pieces of feedback that

00:27:37.130 --> 00:27:43.520
we got with Project Builder is that not
everybody likes everything in one window.

00:27:43.520 --> 00:27:48.360
So this is the way that Project Builder
has looked since we built it.

00:27:48.360 --> 00:27:52.340
When I open source files,
they appear in the one window.

00:27:52.380 --> 00:27:56.150
I can move between the files that
I have open in a relatively easy way,

00:27:56.160 --> 00:27:58.680
but I'm pretty much
seeing them one at a time.

00:27:59.170 --> 00:28:01.200
I do my finds within this window.

00:28:01.250 --> 00:28:03.400
I can debug within this window.

00:28:03.510 --> 00:28:05.800
Everything is very self-contained here.

00:28:05.950 --> 00:28:09.900
Some people like this, some people don't.

00:28:10.030 --> 00:28:13.240
Well, now we have an answer
for the folks who don't.

00:28:14.220 --> 00:28:19.340
This new Preferences panel is where you
can configure what the user interface for

00:28:19.480 --> 00:28:21.770
Project Builder is going to look like.

00:28:22.090 --> 00:28:26.020
We have three main default choices:
Single Window,

00:28:26.020 --> 00:28:28.260
you're all familiar with if you've
used Project Builder before,

00:28:28.260 --> 00:28:30.600
that's the way it's always worked.

00:28:30.620 --> 00:28:33.330
The new Some Windows configuration.

00:28:33.400 --> 00:28:36.400
The Project Window still has a
built-in editor in this configuration,

00:28:36.400 --> 00:28:39.600
but all of the tools like finding
and building and debugging,

00:28:39.600 --> 00:28:42.190
these sorts of things have
been moved into separate

00:28:42.260 --> 00:28:44.200
windows in this configuration.

00:28:45.380 --> 00:28:46.900
and then there's many windows.

00:28:46.900 --> 00:28:49.660
The project window does
not have a built-in editor.

00:28:49.830 --> 00:28:51.600
All of the tools, finding,
building and debugging,

00:28:51.600 --> 00:28:53.930
all these are in separate windows.

00:28:54.910 --> 00:29:00.490
It turns out that these
three choices are just...

00:29:00.720 --> 00:29:03.700
The first thing we want to
talk about is the pre-set

00:29:04.510 --> 00:29:06.300
configurations that we've provided.

00:29:06.300 --> 00:29:09.000
Behind that is a lot of configurability.

00:29:09.000 --> 00:29:13.710
We've defined what we feel are the set
of development tasks that all of you do

00:29:13.710 --> 00:29:16.790
all the time as you're building projects.

00:29:17.280 --> 00:29:20.360
and for each one of those you
can assign a different window

00:29:20.360 --> 00:29:23.900
template that's set up exactly
the way you want it for that task.

00:29:23.990 --> 00:29:26.160
Multiple tasks can
share the same template,

00:29:26.160 --> 00:29:29.320
even the same window,
or they can all be in separate windows.

00:29:29.440 --> 00:29:33.960
And you can create your own templates,
set them up exactly the way you want.

00:29:34.520 --> 00:29:37.240
But for now,
let's just stick with the built-in

00:29:37.240 --> 00:29:41.740
many windows mode and I'll show you
what that same project looks like.

00:29:41.830 --> 00:29:45.900
So here we have the project window again,
no attached editor.

00:29:45.970 --> 00:29:51.200
As I open up files, each one appears,
each in its own window.

00:29:51.210 --> 00:29:52.830
Okay.

00:29:54.820 --> 00:29:59.270
If I do a find, I get a find window.

00:29:59.390 --> 00:30:01.740
So, okay, well, since we're already
looking at the find window,

00:30:01.740 --> 00:30:05.230
let me show you something else.

00:30:05.230 --> 00:30:05.230
This...

00:30:05.580 --> 00:30:09.340
What I've been showing you so far is in
both of the CDs that you've received.

00:30:09.500 --> 00:30:13.060
What I'm about to show you is
only in the Jaguar pre-release CD.

00:30:13.060 --> 00:30:15.930
It didn't make the April Tools CD.

00:30:17.570 --> 00:30:21.250
So play with this, with the Jaguar seed,
but don't expect to find

00:30:21.370 --> 00:30:24.790
it in the 2.0 April tools.

00:30:24.840 --> 00:30:29.340
We've always had integration with Define
to be able to search for references,

00:30:29.360 --> 00:30:31.400
API definitions, and so forth.

00:30:31.510 --> 00:30:33.960
But if you don't know what the
name of the method or the function

00:30:33.960 --> 00:30:36.570
is that you're looking for,
we've kind of not had

00:30:36.650 --> 00:30:37.770
a solution for that.

00:30:37.990 --> 00:30:43.800
What we've added is a natural language,
content-based search of

00:30:43.800 --> 00:30:43.800
all the documentation.

00:30:44.600 --> 00:30:54.130
So I can type in, if I can spell it,
tell me about view hierarchies.

00:30:56.900 --> 00:31:00.720
and David I'll get a
weighted set of results.

00:31:00.720 --> 00:31:03.760
The ones that it thinks are
the most relevant up top,

00:31:03.860 --> 00:31:05.600
of course, just as you'd expect.

00:31:05.790 --> 00:31:07.360
And as you can see,
the second one looks like

00:31:07.360 --> 00:31:08.900
it's pretty appropriate.

00:31:08.930 --> 00:31:11.360
This is a whole document
on view hierarchies.

00:31:11.420 --> 00:31:14.430
And we can load the
documentation up right here,

00:31:14.440 --> 00:31:16.240
pictures and all.

00:31:16.240 --> 00:31:19.960
So this is a way,
if you're unclear on exactly how to

00:31:19.960 --> 00:31:24.080
accomplish what you want to accomplish,
you can look for it in a sort

00:31:24.090 --> 00:31:26.970
of a more concept-based Okay.

00:31:27.300 --> 00:31:32.430
So, again,
this is just a small taste of what we've

00:31:32.430 --> 00:31:36.840
added to Project Builder and what we're
continuing to add to Project Builder.

00:31:36.940 --> 00:31:39.640
And with that,
I guess I'll give it back to Dave.

00:31:39.660 --> 00:31:41.130
All right.

00:31:41.130 --> 00:31:43.170
Thanks, Mike.

00:31:45.610 --> 00:31:48.000
So as we said,
this is a beta version of Project Builder

00:31:48.000 --> 00:31:51.440
because we are interested in your
feedback about the user interface

00:31:51.520 --> 00:31:53.240
and whether this works for you.

00:31:53.360 --> 00:31:56.500
It has been available
on the April 2002 CD,

00:31:57.010 --> 00:31:59.660
so we have received a lot
of feedback about it so far,

00:31:59.660 --> 00:32:02.000
and it's all been really great so far.

00:32:02.000 --> 00:32:03.020
So thanks, Mike.

00:32:03.120 --> 00:32:03.410
Okay.

00:32:03.480 --> 00:32:05.840
You know, actually, Dave,
there is one more thing

00:32:05.840 --> 00:32:07.060
that I could show here.

00:32:07.200 --> 00:32:08.920
Okay.

00:32:08.920 --> 00:32:09.260
Okay.

00:32:09.380 --> 00:32:12.440
This actually isn't on either
of the CDs that you have,

00:32:12.440 --> 00:32:14.360
but it's something that
we've been working on.

00:32:14.470 --> 00:32:18.180
And we're not exactly sure whether
it's going to make the Jaguar

00:32:18.180 --> 00:32:20.500
release or not at this point,
but, you know, bear with me.

00:32:20.500 --> 00:32:24.250
You know, I'll show it to you anyway.

00:32:24.600 --> 00:32:31.570
So one of the things that
people have asked for is some

00:32:32.660 --> 00:32:32.660
features that MPW used to have.

00:32:33.580 --> 00:32:36.970
People really like from
MPW the shell environment,

00:32:37.060 --> 00:32:40.640
the sort of the non-linear shell,
being able to use a mouse-based editor

00:32:40.640 --> 00:32:44.930
to write your shell scripts and,
you know, select things and execute them.

00:32:45.220 --> 00:32:48.040
And we like that too, and so we've been
meaning to work on this,

00:32:48.060 --> 00:32:49.630
and since so many of you
have been asking for it,

00:32:49.640 --> 00:32:52.570
we've finally gotten
around to working on this.

00:32:52.930 --> 00:32:57.180
Here's a shell script,
or hunks of shell script,

00:32:57.430 --> 00:33:01.580
and just with a keystroke,
I can execute any shell

00:33:01.580 --> 00:33:05.370
script within this window.

00:33:05.370 --> 00:33:05.370
The output comes.

00:33:07.370 --> 00:33:10.540
I can do something that's
a little bit more verbose.

00:33:10.540 --> 00:33:12.630
Let's actually--this
is a little bit silly,

00:33:12.670 --> 00:33:16.380
but let's do a command line build
from within Project Builder.

00:33:18.790 --> 00:33:21.700
So here we go, we're building,
we're building.

00:33:21.700 --> 00:33:26.710
And you know, I can scroll around in
this thing and you know,

00:33:26.710 --> 00:33:29.320
whatever, the output is coming.

00:33:31.300 --> 00:33:34.980
The window where the output is
going while a shell is running

00:33:35.520 --> 00:33:38.140
is blocked from further editing
while that shell is running.

00:33:38.140 --> 00:33:41.020
Anything else, though,
you can continue to work.

00:33:41.020 --> 00:33:41.020
Okay?

00:33:41.970 --> 00:33:43.900
All right.

00:33:43.910 --> 00:33:46.400
What if I want some UI with my script?

00:33:46.510 --> 00:33:49.300
Well, we have AppleScript, right?

00:33:49.360 --> 00:33:53.740
And we have this tool called OSAScript,
which allows us to, from a shell script,

00:33:53.740 --> 00:33:54.660
invoke some AppleScript.

00:33:54.660 --> 00:33:59.130
So here's one that will actually do a
search over all of the Cocoa examples,

00:33:59.200 --> 00:34:01.740
but first it needs to
know what to search for.

00:34:01.740 --> 00:34:05.410
So when I execute this,
the first thing it does is it

00:34:05.410 --> 00:34:07.550
asks me for a search script.

00:34:07.600 --> 00:34:11.270
And once I enter that,
it goes off and it does the search.

00:34:13.900 --> 00:34:17.310
So this is all fine and good, right?

00:34:17.420 --> 00:34:20.540
But you don't necessarily always
want to have this window open with

00:34:20.540 --> 00:34:23.240
all these scripts in it and go
and select them and execute them.

00:34:23.240 --> 00:34:25.690
What if you have a script that
you want to execute all the time,

00:34:25.690 --> 00:34:27.040
over and over and over again?

00:34:27.160 --> 00:34:31.880
Well, the logical thing would be to
create a menu with that script.

00:34:32.970 --> 00:34:34.900
So here's a script.

00:34:34.940 --> 00:34:36.900
This is just a script.

00:34:36.900 --> 00:34:41.340
But when I run it,
notice it adds two menus to my menu bar.

00:34:44.060 --> 00:34:46.740
Now let me open up a source file
because I have some scripts in my

00:34:46.740 --> 00:34:49.980
menus that are best shown with source.

00:34:50.060 --> 00:34:53.230
So one of the simple,
these are again just examples, right,

00:34:53.360 --> 00:34:56.040
but you know,
there's some cool ones so I'll show them.

00:34:56.130 --> 00:34:58.860
We have one that just
comments the selected text.

00:34:58.860 --> 00:35:02.810
We can uncomment it, fine.

00:35:03.480 --> 00:35:05.630
Here's one that's a little bit cooler.

00:35:05.690 --> 00:35:08.900
I can select a couple
of instance variables.

00:35:09.070 --> 00:35:11.820
and I can say, you know,
generate me accessor definitions

00:35:11.820 --> 00:35:13.800
for those instance variables.

00:35:13.840 --> 00:35:16.330
And it puts them on the pasteboard
in this particular case,

00:35:16.330 --> 00:35:19.410
and if I go and I paste them in,
you'll see that it generated the

00:35:19.490 --> 00:35:24.670
standard Objective-C getter and setter
methods for those instance variables.

00:35:28.730 --> 00:35:30.390
So we have, you know,
a certain amount of power to

00:35:30.500 --> 00:35:33.930
actually get in here and edit,
you know, within buffers and project

00:35:33.930 --> 00:35:37.000
builder using scripts,
you know, take your input and pipe your

00:35:37.000 --> 00:35:38.040
output and all this kind of stuff.

00:35:38.120 --> 00:35:41.660
But again, because we have
AppleScript available to us as well,

00:35:41.660 --> 00:35:43.330
we can involve other apps in this thing.

00:35:43.340 --> 00:35:45.740
So let's say that I, you know,
want to know what this

00:35:45.740 --> 00:35:47.000
thing is talking about.

00:35:47.000 --> 00:35:47.980
What is a design pattern?

00:35:48.290 --> 00:35:52.940
Well, what if I just go and search
in Google for that term?

00:35:52.940 --> 00:35:56.040
And of course, it doesn't work.

00:35:56.100 --> 00:36:00.820
Am I not hooked up to the Internet here,
perhaps?

00:36:01.700 --> 00:36:10.000
[Transcript missing]

00:36:10.630 --> 00:36:15.640
Again, this is just some examples,
but give you an idea of some

00:36:15.640 --> 00:36:17.770
of the things that we've been
working on and that we hope to

00:36:17.770 --> 00:36:19.140
deliver to you in the near future.

00:36:19.140 --> 00:36:22.690
So, okay, now I really am done.

00:36:28.830 --> 00:36:29.250
Thanks, Mike.

00:36:29.410 --> 00:36:32.080
So there's a lot of exciting stuff
going on with Project Builder.

00:36:32.190 --> 00:36:35.030
Again, I'd like to emphasize that some
of what you just saw there,

00:36:35.040 --> 00:36:39.270
we're not sure whether we'll get
into the final version of 2.0 or not,

00:36:39.420 --> 00:36:44.220
but it will be coming
along in the near future.

00:36:44.300 --> 00:36:46.600
So,
moving on to touch on some of the changes

00:36:46.600 --> 00:36:48.060
in some of the other development tools.

00:36:48.060 --> 00:36:50.400
You've seen Interface
Builder this morning.

00:36:50.400 --> 00:36:52.540
You'll see and hear more
about it in this session.

00:36:52.540 --> 00:36:57.480
It's our tool for building AQUA-compliant
user interfaces using design guides to

00:36:57.530 --> 00:36:59.920
help you get things set up properly.

00:36:59.920 --> 00:37:03.120
For Carbon,
it's the best way of taking advantage

00:37:03.120 --> 00:37:05.800
of the Carbon high-level event model.

00:37:05.800 --> 00:37:10.520
For Cocoa, it really leverages the
Cocoa outlet and action paradigm.

00:37:10.760 --> 00:37:14.000
And now, when you're designing
for Apple Script Studio,

00:37:14.000 --> 00:37:15.510
this is the tool you use for that.

00:37:15.620 --> 00:37:21.420
So, in Jaguar,
we have Interface Builder version 2.3.

00:37:21.420 --> 00:37:26.120
It takes advantage of Jaguar's
new Cocoa archiving mechanism.

00:37:26.120 --> 00:37:28.760
So,
there's actually three different ways,

00:37:28.760 --> 00:37:31.280
I believe it is, to store the nib files.

00:37:31.280 --> 00:37:34.350
This one, in the future,
will give better forward and

00:37:34.350 --> 00:37:37.600
backward compatibility of
nib files as Cocoa evolves.

00:37:37.680 --> 00:37:40.600
In addition, over the past year,
some of the major changes in

00:37:40.600 --> 00:37:40.740
the code are the code that we've
been using to store the code.

00:37:40.740 --> 00:37:43.110
Some of the major changes
that have happened in recent

00:37:43.110 --> 00:37:46.990
releases with Interface Builder,
the ability to have typed outlets.

00:37:47.060 --> 00:37:51.500
So, now all of your user interface
elements don't have to just say ID.

00:37:51.500 --> 00:37:54.800
They can have specific types
that let you do better type

00:37:54.800 --> 00:37:57.140
checking in your source code then.

00:37:57.140 --> 00:38:02.370
Views can be popped out of containers
and dragged to other containers.

00:38:02.380 --> 00:38:05.880
If that's within the same nib file,
then it actually retains all

00:38:05.880 --> 00:38:08.720
the connections from those
views to your source code,

00:38:08.720 --> 00:38:10.300
which can be very helpful.

00:38:10.930 --> 00:38:15.180
You can group user interface
elements and lock the position and

00:38:15.310 --> 00:38:16.750
size of user interface elements.

00:38:16.800 --> 00:38:20.770
To learn more about how to use Interface
Builder with all these enhancements,

00:38:20.780 --> 00:38:25.120
go see Henri's session on using
Interface Builder on Thursday.

00:38:27.140 --> 00:38:30.700
We've touched on GCC 3.1 a
number of times so far today.

00:38:30.700 --> 00:38:35.420
We've got the new persistent
front end for faster build time,

00:38:35.420 --> 00:38:39.180
so read the release notes for
GCC 3 and for Project Builder to

00:38:39.180 --> 00:38:41.410
see how to take advantage of this.

00:38:41.440 --> 00:38:47.970
We've added a lot of language compliance,
much of it coming with GCC 3 itself.

00:38:48.120 --> 00:38:53.230
C99 compliance, full ANSI C++ compliance.

00:38:53.410 --> 00:38:57.600
and now a full implementation of
the C++ standard template library,

00:38:57.600 --> 00:39:00.500
which has been something a lot
of people have been requesting.

00:39:00.640 --> 00:39:04.600
And we've done a lot of work on code
generation both at Apple and within

00:39:04.600 --> 00:39:09.000
the Free Software Foundation community
to improve the code generation.

00:39:09.130 --> 00:39:11.400
And our benchmarks are now showing,
for example,

00:39:11.400 --> 00:39:16.200
that the AlteVec code is now the
fastest of any compiler for Mac OS X.

00:39:16.370 --> 00:39:19.600
So to learn more,
see the compiler development

00:39:19.600 --> 00:39:21.200
session on Friday.

00:39:22.660 --> 00:39:24.900
On the debugger front,
most of you know we take

00:39:24.950 --> 00:39:26.880
advantage of GDB under the covers.

00:39:26.880 --> 00:39:30.820
We've done a lot of work on
robustness and performance tuning

00:39:30.910 --> 00:39:32.380
for the debugger over the past year.

00:39:32.380 --> 00:39:34.830
In addition, we've got some new features.

00:39:34.830 --> 00:39:39.470
We're adding the ability now to see
the contents of opaque data types.

00:39:39.550 --> 00:39:41.360
So, for example, NSStrings.

00:39:41.450 --> 00:39:45.870
We'll be expanding that
out to NSDictionary's,

00:39:45.870 --> 00:39:47.140
NSArrays.

00:39:48.720 --> 00:39:52.550
We're not in either of
the CDs that you have,

00:39:52.660 --> 00:39:55.830
but in the debugging session on Friday,
we will demonstrate an

00:39:55.840 --> 00:39:58.720
expression watch window,
which we'll be adding.

00:39:58.720 --> 00:40:01.740
Make it easier to see your
global variables or other

00:40:01.740 --> 00:40:03.720
values of other expressions.

00:40:03.720 --> 00:40:06.600
And we also have now
in the underlying GDB,

00:40:06.600 --> 00:40:11.720
we've enabled support for hardware
watch points using page protection.

00:40:11.720 --> 00:40:14.600
So this can help find
memory stomper bugs,

00:40:14.600 --> 00:40:15.710
for example.

00:40:16.340 --> 00:40:19.540
In the performance tools area,
Avi this morning mentioned that

00:40:19.660 --> 00:40:22.080
you should really take advantage
of the performance tools.

00:40:22.080 --> 00:40:23.880
We've got a lot of them in Mac OS X.

00:40:23.880 --> 00:40:26.060
I'm not going to begin to
go through all of these.

00:40:26.060 --> 00:40:28.660
Many of them you may
have heard about before.

00:40:28.660 --> 00:40:30.680
I'll highlight a couple of these.

00:40:30.700 --> 00:40:35.640
Down in the bottom right,
you see the OpenGL Profiler.

00:40:35.640 --> 00:40:40.500
This is a really cool new application
for if you're doing OpenGL coding,

00:40:40.500 --> 00:40:44.940
seeing exactly what's going on with your
graphics calls and where your time is

00:40:44.970 --> 00:40:47.020
being spent and help you optimize that.

00:40:47.080 --> 00:40:51.440
Mac OS X is the only platform
that has any tool of this nature.

00:40:51.440 --> 00:40:55.090
There's also some other tools
for more processor-level

00:40:55.090 --> 00:40:57.480
monitoring of the performance.

00:40:57.480 --> 00:41:01.300
So there's a couple of sessions on,
I believe it's Thursday afternoon,

00:41:01.300 --> 00:41:02.750
on performance tools.

00:41:02.780 --> 00:41:05.840
So performance tools and
optimizing for OpenGL.

00:41:08.160 --> 00:41:10.700
So again, to review some of our
near-term priorities,

00:41:10.700 --> 00:41:13.550
we're going to be working hard
to improve the build times

00:41:13.560 --> 00:41:17.020
with Project Builder and GCC3,
working hard on even

00:41:17.020 --> 00:41:18.900
better code generation.

00:41:18.900 --> 00:41:23.720
We've had a lot of requests for
extensibility APIs in Project Builder.

00:41:23.720 --> 00:41:25.100
We can't do it all.

00:41:25.100 --> 00:41:28.690
Many of you have requested the
ability to enhance our efforts,

00:41:28.690 --> 00:41:29.610
if you will.

00:41:29.610 --> 00:41:31.090
We'd like to let you do that.

00:41:31.860 --> 00:41:34.630
As Mike demonstrated,
the command execution worksheet is

00:41:34.710 --> 00:41:39.060
something we're working hard on,
and more debugging features.

00:41:39.060 --> 00:41:44.760
We're also working on a script for
migration of source code from Projector

00:41:44.760 --> 00:41:47.630
repositories into CVS databases.

00:41:47.630 --> 00:41:50.000
So some of you may find that useful.

00:41:50.000 --> 00:41:53.130
And with that,
I'd like to turn it over to Godfrey

00:41:53.130 --> 00:41:55.480
to talk about third-party tools.

00:41:55.560 --> 00:41:58.740
Thank you, Dave.

00:42:01.700 --> 00:42:02.850
and David S.

00:42:02.940 --> 00:42:08.320
Goyer will be joined by the
first-time Mac OS X developer,

00:42:08.850 --> 00:42:09.170
David S.

00:42:09.330 --> 00:42:10.220
Goyer.

00:42:10.720 --> 00:42:13.860
One size fits all doesn't really
work for Apple just the way it

00:42:13.860 --> 00:42:15.310
doesn't work for anybody else.

00:42:15.310 --> 00:42:19.280
So we work very closely with
our third-party tool vendors,

00:42:19.280 --> 00:42:22.090
both to give them engineering directions,
which includes seeding

00:42:22.110 --> 00:42:25.060
pre-releases of the operating
system before other vendors,

00:42:25.060 --> 00:42:27.000
because you're dependent upon them.

00:42:27.070 --> 00:42:30.120
As appropriate, we give them seeds,
we tell them about new

00:42:30.190 --> 00:42:32.680
technologies coming up,
and we try to make sure

00:42:32.680 --> 00:42:35.700
that we coordinate with them
also on a business front.

00:42:35.780 --> 00:42:39.690
Our partnership management group works
with them in the individual market

00:42:39.800 --> 00:42:43.970
spaces to be certain that both they and
the market space that we're working in

00:42:43.970 --> 00:42:46.280
know about the tools available there.

00:42:46.300 --> 00:42:50.710
Now we've seen a lot of activity in the
past year as Mac OS X has rolled out,

00:42:50.780 --> 00:42:54.340
as we've moved through the
various versions incrementally

00:42:54.390 --> 00:42:59.830
to 10.1.3 and now 10.1.4,
and a selection of them are here

00:42:59.920 --> 00:43:03.500
during the week at our vendor fair,
exhibit fair that opens

00:43:03.630 --> 00:43:05.450
this evening at 5 p.m.

00:43:05.780 --> 00:43:09.880
We've had a lot of activity in the
past year as Mac OS X has rolled out,

00:43:09.940 --> 00:43:13.510
as we've moved through the
various versions incrementally

00:43:13.610 --> 00:43:17.390
to 10.1.3 and now 10.1.4,
and a selection of them are here

00:43:17.420 --> 00:43:18.140
during the week at our vendor fair,
exhibit fair that opens

00:43:18.170 --> 00:43:18.690
this evening at 5 p.m.

00:43:22.800 --> 00:43:46.000
[Transcript missing]

00:43:46.730 --> 00:43:51.580
Basic is a development platform in
heavy use on the Windows platform.

00:43:51.580 --> 00:43:54.430
We hear all the time this story
that there are three times as

00:43:54.430 --> 00:43:58.010
many applications available for
Windows than there are for Macintosh.

00:43:58.010 --> 00:44:02.500
Apple has chosen not to go into
the basic development world because

00:44:02.500 --> 00:44:07.410
we have an excellent third-party
partner who's doing that scene for us.

00:44:07.410 --> 00:44:10.110
And to talk about that,
I'd like to bring up Geoff Perlman

00:44:10.200 --> 00:44:12.870
from Real Software to talk
about Real Basic for Mac OS X.

00:44:12.880 --> 00:44:15.100
Thanks, Godfrey.

00:44:16.600 --> 00:44:22.110
So, um...

00:44:25.060 --> 00:44:28.840
get to the next slide.

00:44:28.930 --> 00:44:29.250
Ah.

00:44:29.260 --> 00:44:29.660
Okay.

00:44:29.980 --> 00:44:31.150
So what is Real Basic?

00:44:31.150 --> 00:44:34.000
Real Basic is a cross-platform
development tool.

00:44:34.000 --> 00:44:38.040
I want to clear up one misunderstanding
that some people have about our product.

00:44:38.090 --> 00:44:39.840
It's not interpreted.

00:44:39.840 --> 00:44:40.760
There's no byte code.

00:44:40.760 --> 00:44:46.180
It compiles to machine code on
all the platforms we support.

00:44:46.180 --> 00:44:46.180
It's fully compiled.

00:44:46.370 --> 00:44:50.630
It provides a modern object-oriented
language using a dot syntax,

00:44:50.790 --> 00:44:54.660
supports inheritance,
it supports polymorphism,

00:44:54.670 --> 00:44:57.400
virtual methods,
constructors and destructors,

00:44:57.450 --> 00:44:59.410
all the kinds of things you
come to expect from a modern

00:44:59.410 --> 00:45:00.600
object-oriented language.

00:45:00.600 --> 00:45:04.090
It also provides a native
UI and native performance on

00:45:04.090 --> 00:45:07.390
all the platforms we support,
which means that when you're

00:45:07.390 --> 00:45:10.720
compiling your application
for classic Mac OS 8 and 9,

00:45:10.720 --> 00:45:12.500
you get that UI.

00:45:12.500 --> 00:45:15.500
If you're compiling for Mac OS X,
you get Aqua.

00:45:15.500 --> 00:45:19.700
If you're compiling for Windows,
be it 95 or XP, you get the native

00:45:19.700 --> 00:45:21.880
UIs for those platforms.

00:45:22.600 --> 00:45:27.920
and Real Basic provides you with a rich
set of intrinsic functions and classes.

00:45:28.080 --> 00:45:34.860
We provide you with things like 3D APIs,
printing APIs, QuickTime APIs,

00:45:35.040 --> 00:45:40.400
APIs to access sound and pictures,
graphics, all kinds of multimedia stuff.

00:45:40.500 --> 00:45:42.980
And the idea here is that
you're abstracted from all

00:45:42.980 --> 00:45:44.400
the platform specifics.

00:45:44.480 --> 00:45:47.930
So you can write one set of code
and deploy it on all the different

00:45:47.930 --> 00:45:50.080
platforms that we support.

00:45:50.820 --> 00:45:53.460
and we provide a
cross-platform plugin API.

00:45:53.560 --> 00:45:55.790
So if you want to use some
of your existing C++ code,

00:45:55.790 --> 00:45:59.900
you can write plugins that'll run on
all the platforms that we support,

00:45:59.900 --> 00:46:01.890
which is really great.

00:46:02.200 --> 00:46:05.440
We don't claim the real basic will do
everything we necessarily want it to do,

00:46:05.540 --> 00:46:09.130
so that's why we provide a
plugin API just for that.

00:46:09.770 --> 00:46:12.140
And finally,
the whole point of cross-platform

00:46:12.140 --> 00:46:15.520
is to write a single application and
deploy it in many different places.

00:46:15.570 --> 00:46:20.360
In our case, we support Mac OS 8,
Mac OS 9, Mac OS X,

00:46:20.360 --> 00:46:23.540
and Windows 95 through XP.

00:46:26.470 --> 00:46:27.620
So what's new in Real Basic?

00:46:27.760 --> 00:46:29.040
Well,
there's a bunch of new things that we've

00:46:29.040 --> 00:46:30.340
been doing in the last few versions.

00:46:30.340 --> 00:46:33.720
We support core graphics text
rendering across the board

00:46:33.720 --> 00:46:34.780
everywhere in Real Basic.

00:46:34.780 --> 00:46:39.080
We have a new edit field
using AtSui at the low levels,

00:46:39.080 --> 00:46:42.560
so you get multilingual
support through our edit field.

00:46:42.560 --> 00:46:45.220
And, of course, core graphics through
our edit field as well.

00:46:45.220 --> 00:46:47.370
And for those of you that
have done that in Carbon Apps,

00:46:47.370 --> 00:46:49.610
you know how much work that is,
and we've taken care of all

00:46:49.610 --> 00:46:50.980
that for you in our edit field.

00:46:51.500 --> 00:46:53.450
And we've got external project items.

00:46:53.450 --> 00:46:56.810
External project items allows you
to share anything that could be in

00:46:56.810 --> 00:46:59.140
your project among multiple projects.

00:46:59.410 --> 00:47:04.140
That means classes, class interfaces,
windows, modules, pictures, sounds,

00:47:04.270 --> 00:47:07.200
quick time movies,
anything at all that you can put

00:47:07.200 --> 00:47:10.940
into a Real Basic project can be
shared among several projects.

00:47:11.060 --> 00:47:14.280
And they're stored as external files,
actually sort of as aliases,

00:47:14.280 --> 00:47:17.710
which means that any changes you make
in one automatically will be in any

00:47:17.710 --> 00:47:19.810
other projects that you're building.

00:47:19.840 --> 00:47:21.480
Another nice thing about this
feed is that it's not just a file.

00:47:21.480 --> 00:47:28.610
It's a file.

00:47:29.490 --> 00:47:30.790
We also have an interactive shell.

00:47:30.790 --> 00:47:33.000
We have a shell class that lets
you talk to the Unix shell.

00:47:33.000 --> 00:47:36.570
And this is really great if you want
to do something as simple as put a nice

00:47:36.710 --> 00:47:39.020
UI on top of a series of shell commands.

00:47:39.040 --> 00:47:40.400
It's really great for that.

00:47:40.580 --> 00:47:45.400
For example, one of our engineers put
a nice UI on top of top.

00:47:45.400 --> 00:47:48.720
And it took him about
maybe 20 minutes to do it.

00:47:49.460 --> 00:47:53.340
and we do things like, you know,
we do the hard work for you.

00:47:53.340 --> 00:47:56.720
For example, for Carbon,
serial ports aren't supported.

00:47:56.730 --> 00:47:59.740
Well, we've done the work to make
them supported in RealBasic.

00:47:59.840 --> 00:48:03.380
So that means you can use our serial
port API to write applications

00:48:03.380 --> 00:48:07.300
and talk to serial ports on 8,
9, 10 and, of course, on Windows as well.

00:48:08.940 --> 00:48:12.300
and hundreds of API-- or excuse me,
hundreds of IDE,

00:48:12.300 --> 00:48:15.890
intrinsic library improvements,
et cetera, across all of Real Basic.

00:48:15.900 --> 00:48:18.560
We've added Regex, for example,
to Real Basic.

00:48:18.560 --> 00:48:20.800
We've got a dictionary
class in Real Basic.

00:48:20.890 --> 00:48:25.620
And as I mentioned earlier,
we have a fairly extensive 3D API that

00:48:25.620 --> 00:48:35.160
abstracts you from OpenGL on Mac OS X,
QuickDraw 3D on Mac OS 9,

00:48:35.240 --> 00:48:40.670
and OpenGL or some
other render on Windows.

00:48:43.400 --> 00:48:46.360
And finally, where are we at WWDC?

00:48:46.360 --> 00:48:49.260
Well,
we're at the exhibit fair in Hall 1.

00:48:49.260 --> 00:48:54.150
We have a Birds of a Feather session
on Tuesday from 7:39 in Room K.

00:48:54.150 --> 00:48:57.730
And we have the lunch
presentation on Friday in Hall 2.

00:48:57.790 --> 00:49:02.200
I wanted to mention one last thing that
I didn't put a bullet point up for.

00:49:02.230 --> 00:49:05.230
You know, people ask us,
where are you guys going with Real Basic?

00:49:05.340 --> 00:49:08.090
Well, I want to tell you real quickly
about some of our future

00:49:08.090 --> 00:49:09.570
directions for Real Basic.

00:49:09.680 --> 00:49:13.400
One is we're working on
Mac OS support for Real Basic.

00:49:13.420 --> 00:49:15.760
So you'll be able to
create Mac OS executables.

00:49:15.870 --> 00:49:19.080
We're working on version control.

00:49:19.300 --> 00:49:21.640
So Real Basic in the future is
going to have tightly integrated

00:49:21.640 --> 00:49:23.740
version control for team development.

00:49:23.740 --> 00:49:26.650
Unicode support across the board.

00:49:26.730 --> 00:49:28.780
Things of that nature.

00:49:28.890 --> 00:49:31.890
So, for example,
more platforms and perhaps the

00:49:32.040 --> 00:49:35.920
ability for you to write things
other than just applications,

00:49:35.940 --> 00:49:39.560
like CGI's, plug-ins,
those sort of things with Real Basic.

00:49:39.560 --> 00:49:42.280
So come visit us here
at WWDC and thank you,

00:49:42.280 --> 00:49:44.410
Godfrey, for the opportunity.

00:49:44.560 --> 00:49:48.560
Thank you very much, Jeff.

00:49:49.710 --> 00:49:51.230
Great work from Real Basic folks.

00:49:51.330 --> 00:49:55.010
Some weeks I've gone to Version Tracker
and taken a look and about 40 to

00:49:55.100 --> 00:49:59.050
60% of the new applications being
announced are all written in Real Basic.

00:49:59.070 --> 00:50:00.990
So it's a very, very strong environment.

00:50:01.000 --> 00:50:04.070
With that,
an overview session for development

00:50:04.070 --> 00:50:08.420
tools on the Macintosh simply wouldn't
be there incomplete without a word

00:50:08.560 --> 00:50:10.440
from our friends from MetroWorks.

00:50:10.460 --> 00:50:14.500
And to fill that, I have Matt Henderson,
the technical lead for

00:50:14.500 --> 00:50:17.060
the CodeWarrior IDE,
here to speak.

00:50:21.200 --> 00:50:26.700
and David Levy will be joining us.

00:50:27.700 --> 00:50:30.450
Just a quick introduction for any
of you that might not have heard

00:50:30.450 --> 00:50:32.140
of MetroWorks or CodeWarrior.

00:50:32.170 --> 00:50:36.960
In 1993,
we built a new development environment

00:50:37.120 --> 00:50:43.700
from scratch to help support the
transition of Apple from 68K to PowerPC.

00:50:43.700 --> 00:50:48.100
That was a very traumatic time
for Mac developers and CodeWarrior

00:50:48.100 --> 00:50:52.430
was probably the first compiler
available to the general audience of

00:50:52.430 --> 00:50:54.680
Mac developers for PowerPC development.

00:50:54.700 --> 00:50:56.180
It was very successful.

00:50:56.570 --> 00:51:01.460
Virtually all of the PowerPC commercial
applications that were built

00:51:01.460 --> 00:51:05.250
for the initial PowerPC hardware
were built with CodeWarrior.

00:51:05.280 --> 00:51:06.910
And that trend has continued.

00:51:07.200 --> 00:51:11.210
And in 1997,
we added support for Mac OS X.

00:51:11.360 --> 00:51:14.640
Right from the very earliest
announcement of Rhapsody,

00:51:14.640 --> 00:51:18.680
we've been on board with Apple's
next-generation operating system plans,

00:51:18.700 --> 00:51:22.450
even to the point of adding
Objective-C when they were talking about

00:51:22.450 --> 00:51:24.810
Yellow Box and there was no Carbon yet.

00:51:24.820 --> 00:51:28.990
And to this day,
our support for Mac OS and

00:51:28.990 --> 00:51:33.730
Mac OS X have paid off and most
commercial Mac OS applications

00:51:34.000 --> 00:51:34.980
are built with CodeWarrior.

00:51:34.980 --> 00:51:40.140
Some recent releases include Photoshop 7,
Alias Wavefront Maya, Office 10.

00:51:40.280 --> 00:51:43.380
All of these things built with
CodeWarrior are great applications.

00:51:43.500 --> 00:51:46.720
And that's what we love to do is to
empower developers to build great

00:51:46.820 --> 00:51:48.580
software for Mac OS and Mac OS X.

00:51:48.670 --> 00:51:53.180
And so with that, I'd like to talk about
CodeWarrior for Mac OS version 8,

00:51:53.180 --> 00:51:54.730
which is coming soon.

00:51:55.090 --> 00:51:58.940
In fact, it's coming May 31st,
so pre-order at the show.

00:51:58.940 --> 00:52:02.790
But, you know, quickly,
I'll go with some cool things in 8.0.

00:52:02.820 --> 00:52:06.320
Avi Tevanian plugged Mako this morning.

00:52:06.320 --> 00:52:08.880
He said, get off CFM and on to Mako.

00:52:08.880 --> 00:52:09.860
We're here to help you.

00:52:09.860 --> 00:52:13.800
We've got a new, completely rewritten,
faster Mako linker that's based on

00:52:13.900 --> 00:52:15.740
our proven PEF linker technology.

00:52:15.740 --> 00:52:19.960
Our old Mako linker was based on
the Apple Darwin open source linker.

00:52:19.960 --> 00:52:21.620
It was kind of old, kind of slow.

00:52:22.300 --> 00:52:29.000
The new Mako linker is very fast,
very...generates very tight executables.

00:52:29.000 --> 00:52:34.360
You should see the executable size
for Mako applications using our new

00:52:34.360 --> 00:52:37.830
linker go down from anywhere to a
half to a third of its original size.

00:52:37.860 --> 00:52:42.300
Also, because it's our linker,
we use Sim for debugging

00:52:42.300 --> 00:52:44.580
symbolics instead of stabs.

00:52:44.800 --> 00:52:50.820
Sim is actually an Apple-designed
debugging format that we adopted

00:52:50.860 --> 00:52:52.210
in the early days of PowerCon.

00:52:52.300 --> 00:52:55.790
It's a very small PC,
and it's very small, it's very compact,

00:52:55.870 --> 00:52:58.790
and it allows for greatly
improved debugger performance.

00:52:58.800 --> 00:53:02.300
So we're very happy to
have Sim for Mako apps,

00:53:02.300 --> 00:53:06.840
and it tremendously improves
the Mako debugging experience.

00:53:06.960 --> 00:53:10.090
But combined with a new linker,
I think that you'll find that the

00:53:10.090 --> 00:53:13.940
turnaround time from the time you
make a change in your source code

00:53:13.940 --> 00:53:17.290
to the time that you've built it,
linked it, and are debugging in

00:53:17.370 --> 00:53:20.310
Mako land to be much,
much shorter than it

00:53:20.310 --> 00:53:21.780
was in Code Warrior 7.

00:53:22.640 --> 00:53:26.120
Another cool thing, cool feature for 8,
custom debugger data viewers.

00:53:26.140 --> 00:53:29.610
So we have two sorts of things for this.

00:53:29.660 --> 00:53:34.600
One is a data-driven way of defining
the display format for your variables.

00:53:34.660 --> 00:53:39.500
For example, for the STL string class,
we defined some simple XML code that

00:53:39.500 --> 00:53:42.460
will tell our debugger that when you
see a string object in our debugger,

00:53:42.460 --> 00:53:44.060
you really only want to
see the string value.

00:53:44.060 --> 00:53:46.420
You don't want to see all the member
variables and have to dig through

00:53:46.420 --> 00:53:47.830
it to find what the string is.

00:53:47.900 --> 00:53:51.190
But even beyond the
simple data-driven way,

00:53:51.200 --> 00:53:54.020
you can actually write some
plugins to our debugger to

00:53:54.020 --> 00:54:00.300
produce whatever representation
of your data types that you want.

00:54:00.300 --> 00:54:03.300
Some of the examples that
we're providing is regions.

00:54:03.300 --> 00:54:05.290
So if you wanted to
see what a region was,

00:54:05.300 --> 00:54:07.260
you can double-click it in Code Warrior.

00:54:07.330 --> 00:54:10.260
It'll pop up a window that
will draw the region for you.

00:54:10.300 --> 00:54:13.300
You can look at it, see what it is,
see what its bounding box is.

00:54:13.300 --> 00:54:16.690
And none of this trying to
define what your region is

00:54:16.830 --> 00:54:20.020
based on just the simple flat...

00:54:20.600 --> 00:54:22.680
and David Schmuck are also featured.

00:54:22.680 --> 00:54:29.180
Another great feature:
C++ and Java code completion.

00:54:29.180 --> 00:54:30.620
No more digging for header files.

00:54:30.850 --> 00:54:33.490
Type the first few characters
of a function name,

00:54:33.490 --> 00:54:34.830
hit control period.

00:54:34.830 --> 00:54:37.690
It will bring up a little window
that shows you all the possible

00:54:37.690 --> 00:54:39.320
functions that it could be.

00:54:39.320 --> 00:54:42.030
From there, you can pick a function,
it will insert it in your code and

00:54:42.030 --> 00:54:43.510
you can go on to the parameters.

00:54:43.510 --> 00:54:45.520
It will look up the parameters for you.

00:54:45.520 --> 00:54:48.520
So as you type,
you can see the function definition

00:54:48.520 --> 00:54:52.270
and the parameter types and know what
to fill in and not worry about digging

00:54:52.390 --> 00:54:55.920
through your source hierarchy to find it.

00:54:55.980 --> 00:54:57.930
Next great feature: Cocoa support.

00:54:57.940 --> 00:55:01.800
We worked very closely with Apple's
interface builder team to integrate

00:55:01.910 --> 00:55:06.190
the Code Warrior IDE and interface
builder so you can use them together.

00:55:06.360 --> 00:55:09.120
So now instead of using project
builder and interface builder together,

00:55:09.120 --> 00:55:13.200
you can use interface
builder and code warrior.

00:55:13.880 --> 00:55:17.010
this is great by using-- and
we encourage-- I know there are

00:55:17.010 --> 00:55:19.360
a lot of Cocoa developers that
are still using Apple tools,

00:55:19.460 --> 00:55:21.920
and we hope that they'll
consider Code Warrior because

00:55:21.920 --> 00:55:24.960
of our faster build times,
you know, better code generation,

00:55:24.960 --> 00:55:26.960
smaller executables, et cetera.

00:55:27.110 --> 00:55:29.960
And there's much, much more.

00:55:30.010 --> 00:55:31.890
We've added a ton of features.

00:55:32.000 --> 00:55:34.830
This is one of our biggest
feature releases in a long time,

00:55:35.010 --> 00:55:37.600
and I mentioned that it's
available on May 31st.

00:55:37.770 --> 00:55:41.330
And with that, we'll plug what we
have at the show today.

00:55:41.520 --> 00:55:44.800
Tomorrow we have the
Metro Records lunch presentation.

00:55:44.800 --> 00:55:47.930
Apple has very generously given
us an hour of lunch time to

00:55:47.930 --> 00:55:49.790
show off all our cool new stuff.

00:55:49.810 --> 00:55:51.710
It will be here in Hall 2.

00:55:51.800 --> 00:55:53.790
I encourage you all to come.

00:55:53.800 --> 00:55:55.800
We'll have a lot of demos.

00:55:55.810 --> 00:55:59.740
We'll have Berdina Barada, our CTO,
leading you through most of that.

00:55:59.820 --> 00:56:02.440
We have a Birds of a Feather
session tomorrow night,

00:56:02.450 --> 00:56:03.800
7:30 to 9:00 p.m.

00:56:03.800 --> 00:56:05.800
We'll have a number of
the Code Warrior engineers

00:56:05.800 --> 00:56:09.700
are here at the show,
and they'll be answering your questions.

00:56:09.980 --> 00:56:11.800
So come to Hall 2.

00:56:11.800 --> 00:56:13.800
You can ask any of the
Code Warrior engineers,

00:56:13.800 --> 00:56:15.800
find out the product,
make feature requests,

00:56:15.800 --> 00:56:18.800
complain about your favorite bugs,
do whatever.

00:56:18.800 --> 00:56:21.800
Tuesday and Wednesday we're
running the Code Warrior Lounge,

00:56:21.800 --> 00:56:23.800
if you remember that from years past.

00:56:23.800 --> 00:56:25.800
So come in, hang out.

00:56:25.890 --> 00:56:26.770
We've got a pool table.

00:56:26.830 --> 00:56:30.800
We'll have online stations
where you can preorder Pro 8.

00:56:30.800 --> 00:56:33.800
It's in the Hilton Plaza room.

00:56:33.800 --> 00:56:35.800
And finally,
we have the Metro Works booth

00:56:35.800 --> 00:56:38.790
in the exhibition hall that's
during the exhibits fair.

00:56:38.860 --> 00:56:41.800
So it's open standard exhibition hours.

00:56:41.800 --> 00:56:43.790
And with that,
I'll give it back to Godfrey.

00:56:43.910 --> 00:56:45.800
Thank you, Matt.

00:56:45.800 --> 00:56:48.800
So some great stuff.

00:56:48.800 --> 00:56:53.800
I'd like to bring Ted back now to talk
about future initiatives for Apple tools.

00:57:02.770 --> 00:57:06.070
Three topics to touch on very quickly.

00:57:06.140 --> 00:57:12.290
Database integration, Objective C,
futures, and web services.

00:57:13.800 --> 00:57:19.080
One of the new things in the
Jaguar seed is ODBC connectivity.

00:57:19.080 --> 00:57:22.320
We're bundling, as part of the
Darwin level of the system,

00:57:22.320 --> 00:57:25.220
an open source solution from
a company called OpenLink.

00:57:25.220 --> 00:57:28.840
They make something called
IO-DBC Driver Manager.

00:57:28.840 --> 00:57:35.540
For those of you who have ODBC databases
and applications that use it,

00:57:35.580 --> 00:57:39.280
this is a way to get these
different services to plug together.

00:57:40.030 --> 00:57:42.210
It works with many
third-party ODBC drivers,

00:57:42.210 --> 00:57:44.560
including FileMaker and such,
and it's really great

00:57:44.560 --> 00:57:45.490
for legacy development.

00:57:45.500 --> 00:57:49.700
ODBC has been around, I think,
since Windows 95 or something.

00:57:51.510 --> 00:57:55.970
But much more important to that is
our Enterprise Objects Framework.

00:57:55.970 --> 00:57:59.300
And what this provides is an
object-oriented database access,

00:57:59.300 --> 00:58:03.590
or rather, access in an object-oriented
fashion to relational databases,

00:58:03.590 --> 00:58:04.460
more accurately.

00:58:04.460 --> 00:58:08.000
And it allows you to use Interface
Builder to easily connect the

00:58:08.070 --> 00:58:11.800
data objects in the database using
the schema-driven information

00:58:11.800 --> 00:58:13.820
to the user interface widgets.

00:58:13.890 --> 00:58:16.690
We're going to briefly touch
on where it's been in the past,

00:58:16.690 --> 00:58:19.210
where it is today,
and where we want to take it.

00:58:20.360 --> 00:58:22.790
So in the past,

00:58:23.970 --> 00:58:28.220
EOF has been very popular and
it's been around since next days.

00:58:28.430 --> 00:58:33.230
It has very clean Objective-C integration
with both Cocoa and Interface Builder.

00:58:33.460 --> 00:58:36.460
People are extremely highly productive.

00:58:40.400 --> 00:58:44.400
But it had very limited
database adapters.

00:58:44.400 --> 00:58:47.270
If Apple or Next didn't
write the adapter for it,

00:58:47.270 --> 00:58:48.390
it didn't exist.

00:58:48.390 --> 00:58:52.690
And so it really meant that it
only worked with a limited number

00:58:52.710 --> 00:58:57.120
of databases and the performance
wasn't always everything you

00:58:57.170 --> 00:58:59.720
might want it to be because,
in fact,

00:58:59.800 --> 00:59:04.870
one of the big issues to writing a good
multi-tier application is to really

00:59:04.990 --> 00:59:06.760
use some of the low-level I/O features
in the database adapter system.

00:59:07.120 --> 00:59:12.110
So, the third problem with EOF in the
past was that it was really tied only

00:59:12.160 --> 00:59:14.500
to older versions of web objects.

00:59:14.540 --> 00:59:17.700
This meant that in order to get it,
you had to license a copy of

00:59:17.700 --> 00:59:22.030
web objects for every client
application you may want to ship.

00:59:22.890 --> 00:59:26.730
EOF in the present now uses Java.

00:59:26.730 --> 00:59:30.660
And it uses Java so that we can
leverage the Java community and

00:59:30.850 --> 00:59:32.530
their use of database systems.

00:59:32.560 --> 00:59:35.280
And there's a very important
initiative in Java called JDBC,

00:59:35.280 --> 00:59:36.780
Java Database Connectivity.

00:59:36.780 --> 00:59:40.340
And what that does is it provides
us with a very rich set of adapters

00:59:40.340 --> 00:59:42.510
that are plug-compatible with Java.

00:59:42.520 --> 00:59:45.120
The downside, of course,
is it does require that

00:59:45.120 --> 00:59:48.270
Objective-C programmers do
a little Java programming.

00:59:48.990 --> 00:59:51.300
And this is, you know,
may not be the most positive thing

00:59:51.300 --> 00:59:52.980
with an Objective-C programmer.

00:59:52.980 --> 00:59:55.860
And I'm going to show you a little
bit of code and talk about that.

00:59:57.530 --> 01:00:00.780
One bit of good news about
EOF today is that you can now get a

01:00:00.810 --> 01:00:03.100
redistribution license available today.

01:00:03.100 --> 01:00:05.530
And so that's one nice bit,
nice new thing.

01:00:09.460 --> 01:00:11.780
So those of you who have been
around for a while know the

01:00:11.780 --> 01:00:14.950
EOF story better than I do,
and I know this at least

01:00:14.950 --> 01:00:20.020
represents that we are making
some progress on the EOF front.

01:00:20.470 --> 01:00:22.640
I don't want to take up too much time.

01:00:22.640 --> 01:00:25.630
There are EOF-specific
sessions later in the week,

01:00:25.630 --> 01:00:28.770
but this is just a screen
snapshot of what a typical

01:00:28.850 --> 01:00:31.380
EOF client application looks like.

01:00:31.440 --> 01:00:33.900
It uses Cocoa widgets very heavily.

01:00:33.900 --> 01:00:37.920
And one uses Interface Builder
to just simply drag and make the

01:00:37.920 --> 01:00:42.740
connections between the tables,
the table interface on the

01:00:42.740 --> 01:00:47.770
right-hand side of your screen,
using two of the interface widgets,

01:00:47.770 --> 01:00:50.360
and it's a very easy system to use.

01:00:50.360 --> 01:00:53.540
It provides a tremendous amount
of flexibility because it is very

01:00:53.540 --> 01:00:55.490
much almost code-free development.

01:00:55.590 --> 01:00:59.040
Almost code-free,
because there is some glue code required,

01:00:59.040 --> 01:01:02.020
and today you have to write
that glue code in Java.

01:01:02.020 --> 01:01:06.020
But it uses mostly
Objective-C Cocoa data types.

01:01:06.020 --> 01:01:12.720
So you can see in blue, of course,
I've highlighted the Cocoa calls.

01:01:12.720 --> 01:01:19.620
In orange are predominantly
the calls in Java.

01:01:20.080 --> 01:01:23.650
And typically a given window
will require between 10,

01:01:23.650 --> 01:01:25.610
20, really lines of code.

01:01:25.720 --> 01:01:29.690
A very complex controller object
may require 100 lines of code.

01:01:29.800 --> 01:01:32.540
But really on average it's about 10.

01:01:32.870 --> 01:01:35.640
There are many cases even
where it's zero lines of code.

01:01:35.720 --> 01:01:40.720
So this is the one unfortunate
thing about today's EOF.

01:01:40.720 --> 01:01:45.130
And we are working to fix this.

01:01:45.350 --> 01:01:47.260
In the future,
what we want to do is to make it so

01:01:47.280 --> 01:01:53.140
that there is no runtime inefficiencies
between Objective-C and Java.

01:01:53.140 --> 01:01:58.450
And to make it so that we have a much
more seamless boundary between the two,

01:01:58.450 --> 01:02:02.240
we also want to provide you with
the choice of programming language.

01:02:02.260 --> 01:02:05.010
So you get to choose whether
you're programming in Java or

01:02:05.010 --> 01:02:07.160
Objective-C or other languages as well.

01:02:07.370 --> 01:02:09.970
And that, of course, means,
in many cases, of course,

01:02:09.970 --> 01:02:12.800
having full access to the native
Objective-C data types and

01:02:12.800 --> 01:02:14.460
not just the Java data types.

01:02:15.340 --> 01:02:18.990
Finally, we want to hit on palette
integration so that the components

01:02:18.990 --> 01:02:23.000
directly feel very much integrated
with IB for better productivity.

01:02:23.020 --> 01:02:27.600
And we're going to use this to drive our
thinking on improvements to Objective-C.

01:02:27.600 --> 01:02:29.470
Objective-C is a fabulous language.

01:02:29.480 --> 01:02:32.990
It's a very high productivity
and allows for a great deal of

01:02:32.990 --> 01:02:36.640
capabilities at both the low C level
and the high object-oriented level.

01:02:36.640 --> 01:02:37.790
And we want to keep that.

01:02:37.820 --> 01:02:40.820
We are committed to Objective-C.

01:02:40.820 --> 01:02:44.200
It is Apple's primary language
for desktop applications.

01:02:45.140 --> 01:02:49.510
It's one that we see the best results
in for native look and feel for getting

01:02:49.510 --> 01:02:51.940
the most out of the Mac OS X platform.

01:02:51.940 --> 01:02:55.070
And we have a number of
improvements we're investigating,

01:02:55.170 --> 01:02:58.740
including things like exception handling,
garbage collection,

01:02:58.910 --> 01:03:04.650
and other syntactic additions,
not changes, additions.

01:03:04.820 --> 01:03:07.790
We want to improve the
interaction with other languages.

01:03:07.790 --> 01:03:10.440
These are features that we've been
hearing from you and hearing feedback on

01:03:10.440 --> 01:03:13.720
and we want to get more feedback on at
this conference and we want to use this

01:03:13.720 --> 01:03:21.910
to drive Objective-C forward so that
it doesn't feel like it's lagging behind

01:03:21.910 --> 01:03:21.910
and falling in the language marketplace.

01:03:26.310 --> 01:03:28.440
I guess there's still some
Objective-C programmers.

01:03:28.440 --> 01:03:28.770
Great.

01:03:28.930 --> 01:03:31.080
Web services.

01:03:31.090 --> 01:03:33.440
Web services are something new.

01:03:33.440 --> 01:03:36.850
And of course,
you can't pick up a computer journal

01:03:36.850 --> 01:03:41.420
these days without having some third
of it or two-thirds or the entire

01:03:41.420 --> 01:03:44.180
thing being devoted to web services.

01:03:44.820 --> 01:03:49.360
Web services really are an outgrowth,
of course, of the database and web-based

01:03:49.360 --> 01:03:53.070
application integration,
spitting out HTML pages that has

01:03:53.070 --> 01:03:57.180
been the predominant theme of the
Internet for the last seven years.

01:03:57.180 --> 01:04:00.760
In the last two years,
there's been a tremendous

01:04:01.040 --> 01:04:06.190
repurposing using XML and SOAP to
pull and separate the web services,

01:04:06.190 --> 01:04:09.760
the data layer from
the presentation layer,

01:04:09.760 --> 01:04:14.170
so that other applications and
other programs can read the data in.

01:04:15.490 --> 01:04:18.430
What that means to Apple and to
development technologies is we've

01:04:18.660 --> 01:04:23.360
needed to integrate and to extend each
of the different platform services

01:04:23.360 --> 01:04:26.870
that we provide with additional
features so that you can easily

01:04:26.870 --> 01:04:29.130
take advantage of web services.

01:04:29.140 --> 01:04:32.300
So in AppleScript,
it meant adding a small vocabulary.

01:04:32.300 --> 01:04:36.540
In C++, Objective-C,
we've added a core framework,

01:04:36.540 --> 01:04:38.040
core services.

01:04:38.040 --> 01:04:40.780
Java, of course,
has the famous JAX frameworks.

01:04:41.590 --> 01:04:43.720
Later in the week,
we'll be showing you something called

01:04:43.720 --> 01:04:47.040
WebObjects Direct-to-Web Services,
which brings the power of WebObjects

01:04:47.040 --> 01:04:48.700
to the web service environment.

01:04:48.700 --> 01:04:50.820
This morning, you saw Sherlock 3.

01:04:50.820 --> 01:04:55.320
And as well, of course,
we have the Apache Tomcat Access Package

01:04:55.430 --> 01:04:57.510
on top of the Mac OS X server.

01:04:57.520 --> 01:05:01.550
So altogether,
this is a terrific set of environments.

01:05:01.560 --> 01:05:06.060
Really, every one of Apple's technologies
supports web services.

01:05:06.100 --> 01:05:10.520
So to show you what this means in
terms of integration and synergy,

01:05:10.520 --> 01:05:13.890
I'd like to invite up... Francois
Jouel and Tim Bumgarner to

01:05:14.230 --> 01:05:17.260
demonstrate web services with
WebObjects in AppleScript Studio.

01:05:23.000 --> 01:05:25.160
Thank you, Ted.

01:05:25.160 --> 01:05:28.440
What is so great about web services
is that you can take completely

01:05:28.440 --> 01:05:32.350
different technologies and using a
couple of industry standard protocols,

01:05:32.350 --> 01:05:36.480
which are namely XML, RPC, and SOAP,
you can use those to take those

01:05:36.550 --> 01:05:38.720
technologies and have them work together.

01:05:38.720 --> 01:05:42.260
Now, the problem, though,
is that it actually can be quite a bit of

01:05:42.260 --> 01:05:45.960
work in both providing the web service,
constructing it, building it,

01:05:45.960 --> 01:05:48.640
and then publishing it,
and on the client side,

01:05:48.750 --> 01:05:50.990
actually consuming that service.

01:05:51.000 --> 01:05:54.970
And what we'd like to do today is
demonstrate a solution to that problem.

01:05:55.020 --> 01:05:58.120
And so what we're going to do,
and slides, actually.

01:05:58.120 --> 01:06:01.220
Back to the demo.

01:06:01.220 --> 01:06:01.630
Slides.

01:06:05.930 --> 01:06:06.260
Thank you.

01:06:06.260 --> 01:06:06.650
Okay.

01:06:06.660 --> 01:06:10.520
What we're going to do is we're going
to introduce direct-to-web services.

01:06:10.560 --> 01:06:14.010
And this is going to be
built on top of WebObjects.

01:06:14.100 --> 01:06:19.650
And it's going to be -- enable you to
easily construct or publish your EO model

01:06:19.650 --> 01:06:23.010
and create sophisticated Web services.

01:06:23.100 --> 01:06:25.480
And then on the other side,
we're going to take advantage

01:06:25.540 --> 01:06:26.660
of AppleScript Studio.

01:06:26.660 --> 01:06:29.060
That makes it very easy
to build an application.

01:06:29.060 --> 01:06:33.190
And we're going to leverage AppleScript's
built-in support for XML and RPC SOAP and

01:06:33.190 --> 01:06:37.520
be able to easily create this
application and have them talk together.

01:06:37.550 --> 01:06:40.660
So we're going to have Francois
show how easy it is to start from

01:06:40.660 --> 01:06:44.370
scratch and build a Web service
that I'm going to then take and use.

01:06:44.540 --> 01:06:46.280
So Francois?

01:06:46.490 --> 01:06:47.210
Hello everybody.

01:06:47.270 --> 01:06:48.250
I know what you're thinking.

01:06:48.250 --> 01:06:51.400
It's 4:30 and yet another
Frenchman to listen to.

01:06:51.410 --> 01:06:57.400
Bear with me and I'll show you how
Direct2F services is extremely cool.

01:06:57.500 --> 01:07:02.150
So the first thing I'm going to do
is to open EOModeler and show you

01:07:02.270 --> 01:07:06.390
the diagram view of the database
I here have on this machine.

01:07:06.430 --> 01:07:08.400
It's a simple real estate database.

01:07:08.400 --> 01:07:12.670
And what EOF enables me to do is
to take these database tables and

01:07:12.670 --> 01:07:17.500
turn them into objects that are
readily available to my server.

01:07:18.070 --> 01:07:21.200
The only thing I want to do here
is to browse the database to verify

01:07:21.200 --> 01:07:23.060
that everything is working correctly.

01:07:23.060 --> 01:07:26.300
And that's all I need
to do with EOModeler.

01:07:29.570 --> 01:07:35.550
Now I'm going to start Project Builder
and create a new project from scratch.

01:07:35.550 --> 01:07:43.700
We have added a direct
web services wizard.

01:07:43.700 --> 01:07:43.700
And because this is a real demo,
I'm going to start with

01:07:45.290 --> 01:07:47.900
I will name it real demo.

01:07:47.990 --> 01:07:52.040
I will not deploy it as a J2E servlet.

01:07:52.120 --> 01:07:55.960
The JDBC adapter is
already selected for me.

01:07:56.100 --> 01:08:00.490
What I need to do now is add
the model I opened earlier.

01:08:06.100 --> 01:08:07.310
Here it is.

01:08:07.310 --> 01:08:08.850
And that's it.

01:08:08.850 --> 01:08:15.820
That's all it took to create a complete
web services server that knows all about

01:08:16.380 --> 01:08:19.620
this database I showed you earlier.

01:08:19.690 --> 01:08:25.980
Project Builder compiled the
project and now started the server.

01:08:25.980 --> 01:08:29.130
Because this server is
built on top of web objects,

01:08:29.200 --> 01:08:32.790
it is entirely written in
Java and is totally portable.

01:08:32.790 --> 01:08:36.060
It will run on any J2SE,
J2SE-based server.

01:08:36.360 --> 01:08:40.140
Platform out there and can be
deployed either standalone or as

01:08:40.140 --> 01:08:42.660
a servlet on top of a J2SE server.

01:08:47.140 --> 01:08:49.790
This is all very nice,
but everything has been turned off in

01:08:49.790 --> 01:08:52.780
this web service for security reasons.

01:08:52.820 --> 01:08:55.880
To configure it,
I'm going to use the web services,

01:08:55.880 --> 01:08:58.660
the direct web services assistant.

01:08:58.670 --> 01:09:01.490
It is a swing-based application.

01:09:02.350 --> 01:09:06.130
that connects remotely to the
server running in the background.

01:09:06.130 --> 01:09:10.820
So I can now close the window for the
server and concentrate on the assistant.

01:09:12.970 --> 01:09:16.080
On the left hand side you've
got a tree view with a default

01:09:16.080 --> 01:09:17.580
service created for you.

01:09:17.630 --> 01:09:19.290
I'm going to enable it.

01:09:19.340 --> 01:09:22.250
Basically what the direct
web service assistant does,

01:09:22.250 --> 01:09:26.980
it makes a public view of your
private business information.

01:09:26.980 --> 01:09:29.470
On this right hand side column
you've got all your tables

01:09:29.470 --> 01:09:31.030
that you do not want to expose.

01:09:31.080 --> 01:09:34.830
I'm going to pick one, the listing,
and make it available to the world.

01:09:34.830 --> 01:09:39.930
Because this is an alpha,
in alpha state I know I have to save it,

01:09:39.950 --> 01:09:41.870
close and reconnect.

01:09:41.900 --> 01:09:42.870
Bear with me for a moment.

01:09:42.900 --> 01:09:49.390
Okay, now if I go back to the left column
I see that four services have been

01:09:49.520 --> 01:09:51.700
created for me as conveniences.

01:09:51.780 --> 01:09:54.170
If I click on one of these...

01:09:54.400 --> 01:10:14.900
[Transcript missing]

01:10:16.110 --> 01:10:18.290
Now,
what I can do here with these buttons is,

01:10:18.400 --> 01:10:22.330
for example,
clone this service and customize it.

01:10:27.670 --> 01:10:29.590
Now I have a clone.

01:10:29.590 --> 01:10:31.920
And because I'm going
to search on zip code,

01:10:31.960 --> 01:10:35.340
I'm going to get rid of all the
arguments but the zip code entry.

01:10:39.990 --> 01:10:43.650
Okay,
the return values now look all good.

01:10:43.670 --> 01:10:48.620
I want to get a lot of information
on this listing properties.

01:10:48.620 --> 01:10:50.140
Something else I would like to display.

01:10:50.140 --> 01:10:54.370
My database contains JPEGs for
every houses that are for sale.

01:10:54.450 --> 01:10:58.900
I would like to display
these JPEGs on the client.

01:10:59.420 --> 01:11:04.670
For this, I have a listing photos table
that I'm going to expose.

01:11:15.810 --> 01:11:19.010
So here the power of EOF comes to play.

01:11:19.080 --> 01:11:22.690
I am telling the service
to return a photo URL,

01:11:22.810 --> 01:11:25.450
although there is no
photo URL in the database.

01:11:25.460 --> 01:11:27.720
All I have is JPEG data.

01:11:27.820 --> 01:11:29.630
Well,
I have added a little bit of business

01:11:29.650 --> 01:11:34.770
logic in my enterprise object
representation of the database

01:11:35.270 --> 01:11:39.490
so that when the data is extracted,
a new URL is returned for

01:11:39.580 --> 01:11:41.760
it so that the client,
when it gets this URL,

01:11:41.900 --> 01:11:45.300
can call back and get
the data from the server.

01:11:47.730 --> 01:11:48.990
You see anything wrong, Tim?

01:11:49.050 --> 01:11:49.880
- Nope.

01:11:49.880 --> 01:11:51.420
- I think I'm going to save.

01:11:51.450 --> 01:11:54.290
And move on to the test interface.

01:11:57.410 --> 01:12:00.870
The test interface is going
to come up with two tabs.

01:12:00.870 --> 01:12:03.050
One showing you the service WSDL.

01:12:03.060 --> 01:12:07.440
So WSDL is a web service
description language.

01:12:07.440 --> 01:12:08.640
It's very complex.

01:12:08.640 --> 01:12:11.810
It's written in XML and
it's something that no human

01:12:11.810 --> 01:12:13.300
should ever have to look at.

01:12:13.480 --> 01:12:17.000
Unfortunately,
all the other tools out there

01:12:17.060 --> 01:12:21.540
require you to touch the
WSDL at one point or another.

01:12:22.410 --> 01:12:27.420
Because the main problem with the WSDL,
although it's very easy to specify

01:12:27.420 --> 01:12:30.660
in this format the argument,
it's very hard to specify

01:12:30.660 --> 01:12:32.340
the return values.

01:12:32.340 --> 01:12:34.690
When you return a complex object,
you don't know the structure

01:12:34.690 --> 01:12:35.850
of this object underneath.

01:12:35.860 --> 01:12:40.480
Well, with direct web services and its
model representation of the database,

01:12:40.480 --> 01:12:45.400
we have all the information necessary
to build a complete WSDL file.

01:12:47.870 --> 01:12:54.570
I now move on to the testing tab and the
test interface built me a trivial text

01:12:54.810 --> 01:12:58.800
field so that I can test my service.

01:13:00.100 --> 01:13:01.090
and that's it.

01:13:01.090 --> 01:13:05.700
It's written the listing that
is associated to this zip code.

01:13:05.700 --> 01:13:08.200
At this stage,
a direct web service assistance

01:13:08.350 --> 01:13:11.440
works and it's Tim's turn to
build a client on top of it.

01:13:11.650 --> 01:13:15.260
Thank you Francois.

01:13:15.260 --> 01:13:15.260
Great.

01:13:15.260 --> 01:13:15.260
So what we're going to do...

01:13:16.720 --> 01:13:17.700
and David Koehn.

01:13:17.700 --> 01:13:19.590
We're going to take advantage
of this listing for zip code web

01:13:19.590 --> 01:13:20.820
service that is now published.

01:13:20.840 --> 01:13:22.940
It's out there live and we're
actually using the network and we're

01:13:23.020 --> 01:13:24.880
going to go across and talk to that.

01:13:24.880 --> 01:13:26.510
I'm going to start in
Project Builder and for the sake

01:13:26.620 --> 01:13:28.240
of time we're going to move it.

01:13:28.240 --> 01:13:30.940
It's pretty much an assembled
application but we'll finish it up.

01:13:30.940 --> 01:13:34.400
So I'm going to launch into Interface
Builder and I've got my application here

01:13:34.400 --> 01:13:37.650
that has a table that's already laid
out with all the columns that I want.

01:13:37.800 --> 01:13:40.200
It's got a search field but
it's missing our find button.

01:13:40.230 --> 01:13:42.940
So I'm going to go ahead and just
drag in a button and we get the

01:13:42.940 --> 01:13:47.240
nice Aqua guidelines there and
I'm going to rename it to find.

01:13:47.240 --> 01:13:48.700
Change the size a bit.

01:13:48.700 --> 01:13:51.700
Okay, resize it over here.

01:13:51.700 --> 01:13:54.010
And the other thing I want to do is
actually change some of the attributes.

01:13:54.020 --> 01:13:57.150
It would be nice if it was the default
button and we can simply bring up our

01:13:57.150 --> 01:14:00.090
attributes and set it to be a return.

01:14:00.180 --> 01:14:02.160
So now it's got the nice
Aqua blue and we don't actually

01:14:02.250 --> 01:14:03.290
have to click on the button.

01:14:03.290 --> 01:14:04.140
We can hit return.

01:14:04.150 --> 01:14:05.900
The other thing we need to
do now is to actually add our

01:14:05.900 --> 01:14:06.990
AppleScript functionality.

01:14:06.990 --> 01:14:10.430
And what I want to do is I want to
know when somebody clicks the button,

01:14:10.450 --> 01:14:11.900
execute some AppleScript.

01:14:11.910 --> 01:14:12.600
And we do that through the
AppleScript application.

01:14:12.600 --> 01:14:14.710
So I'm going to go ahead and
click on the button and I'm going

01:14:15.110 --> 01:14:16.570
to go ahead and add my script.

01:14:16.620 --> 01:14:18.600
And I'm going to go ahead and
click on the button and I'm going

01:14:18.600 --> 01:14:19.600
to go ahead and add my script.

01:14:19.600 --> 01:14:22.940
And I'm going to go ahead and
click on the button and I'm going

01:14:22.940 --> 01:14:24.600
to go ahead and add my script.

01:14:24.600 --> 01:14:26.600
And I'm going to go ahead and
click on the button and I'm going

01:14:26.600 --> 01:14:27.600
to go ahead and add my script.

01:14:27.600 --> 01:14:29.600
And I'm going to go ahead and
click on the button and I'm going

01:14:29.610 --> 01:14:30.580
to go ahead and add my script.

01:14:30.650 --> 01:14:34.760
And I'm going to go ahead and
click on the button and I'm going

01:14:34.760 --> 01:14:35.600
to go ahead and add my script.

01:14:35.600 --> 01:14:38.670
And I'm going to go ahead and click
on the button and I'm going to go

01:14:38.750 --> 01:14:43.470
ahead and click on the button and I'm
going to go ahead and add my script.

01:14:43.510 --> 01:14:43.610
And the code is very simple.

01:14:43.610 --> 01:14:45.700
I check to see which button was
clicked since I named it find.

01:14:45.700 --> 01:14:47.500
I can see, make sure I'm in the find.

01:14:47.500 --> 01:14:49.910
And then I'm going to actually
execute this handler that I've

01:14:49.910 --> 01:14:51.700
created called find with zip code.

01:14:51.700 --> 01:14:54.850
And I do that by passing in
the contents of the text field

01:14:54.850 --> 01:14:56.400
that was my search field.

01:14:56.400 --> 01:14:59.410
So let's take a look quickly
at the find with zip code.

01:14:59.650 --> 01:15:03.060
and this provides some UI,
it sets up some status,

01:15:03.060 --> 01:15:04.590
shows a progress bar.

01:15:04.590 --> 01:15:08.360
And then the interesting part is
that I do this listings for zip code.

01:15:08.740 --> 01:15:09.900
This is where it gets interesting.

01:15:09.940 --> 01:15:12.260
This is where we take
advantage of XMLRPC and the

01:15:12.260 --> 01:15:14.100
SOAP support in AppleScript.

01:15:14.140 --> 01:15:18.070
We basically point to the URL that
we've constructed that's his web

01:15:18.070 --> 01:15:21.120
service and using just like we do
for telling a local application,

01:15:21.120 --> 01:15:24.000
we do tell application the application.

01:15:24.030 --> 01:15:26.900
We set up some parameters
for the SOAP service and

01:15:26.900 --> 01:15:28.700
then ultimately we call SOAP.

01:15:28.720 --> 01:15:32.120
This actually takes the method
name called listings for zip code.

01:15:32.350 --> 01:15:34.810
Let's go ahead and build and run this.

01:15:38.510 --> 01:15:40.690
And up it comes, and I can actually
even type in wildcards.

01:15:40.700 --> 01:15:43.800
So I'm going to put in 95 star,
click my Find button.

01:15:43.820 --> 01:15:47.160
It's talking to its web service,
went and got those values,

01:15:47.200 --> 01:15:49.490
populated the table,
and then I can start double-clicking

01:15:49.490 --> 01:15:52.860
on this and actually getting that
image that he was vending from his

01:15:53.000 --> 01:15:54.780
service and putting it into my detail.

01:15:54.780 --> 01:15:57.650
And I just quickly look through
it for a couple of these.

01:15:57.660 --> 01:15:59.200
Oh, let's check a look at this one here.

01:15:59.200 --> 01:16:04.050
Oh, I'd say that this one's a little
overpriced according to that image.

01:16:04.180 --> 01:16:06.310
All right,
you can see actually how easy it is

01:16:06.310 --> 01:16:08.920
to take advantage of web services,
and you can build some

01:16:08.920 --> 01:16:10.180
compelling applications.

01:16:10.180 --> 01:16:12.700
And with that, I'd like to bring up Ted.

01:16:19.690 --> 01:16:20.800
God,
I was getting so interested and I said,

01:16:20.860 --> 01:16:21.930
oh yeah, that's right, I work here.

01:16:22.000 --> 01:16:27.230
So, in summary,
we're focused on doing some

01:16:27.230 --> 01:16:28.870
great development tools.

01:16:28.880 --> 01:16:30.140
We work with our partners.

01:16:30.140 --> 01:16:31.670
We provide resources to them.

01:16:31.680 --> 01:16:33.800
We want to extend to new initiatives.

01:16:33.800 --> 01:16:39.520
I want to invite Godfrey DiGiorgi up
to give you the full week's roadmap.

01:16:39.520 --> 01:16:43.890
Please, please, please find Apple people
that you saw up on stage.

01:16:43.900 --> 01:16:45.680
Give them your comments and feedback.

01:16:45.680 --> 01:16:46.360
Find me.

01:16:46.360 --> 01:16:48.090
We want to hear what you've got to say.

01:16:48.100 --> 01:16:49.530
Thank you very much.

01:16:49.600 --> 01:16:50.950
Thank you.

01:16:53.720 --> 01:16:56.320
With five different
technologies to present,

01:16:56.320 --> 01:16:58.740
blow by blow,
these are color-coded to be the

01:16:58.740 --> 01:17:01.860
same as what's in your program
guide and indicate the tools track,

01:17:02.080 --> 01:17:05.460
the Java track, the WebObjects track,
some of the Core OS and

01:17:05.870 --> 01:17:07.620
some of the lunch sessions.

01:17:07.620 --> 01:17:11.180
Please don't forget the exhibit
fair starting this evening.

01:17:11.180 --> 01:17:16.140
Remember the Developer Depot is also here
all week to vend the developer tools.

01:17:17.710 --> 01:17:20.470
The next sessions that you might
be interested in attending,

01:17:20.530 --> 01:17:23.110
the Java and Apple State of the Union,
immediately follows this

01:17:23.110 --> 01:17:24.250
session in this hall.

01:17:24.470 --> 01:17:27.990
Tomorrow morning we have our WebObjects
State of the Union and the Client

01:17:27.990 --> 01:17:30.300
Web Services Framework session.

01:17:30.300 --> 01:17:34.300
And then later in the afternoon tomorrow,
the first of our tool sessions

01:17:34.710 --> 01:17:36.380
following this overview,
the

01:17:36.380 --> 01:17:38.870
Command Line Development Tool session.

01:17:39.650 --> 01:17:41.500
For more information, these are the URLs.

01:17:41.500 --> 01:17:43.750
You'll see them in all of the
sessions through the week.

01:17:43.830 --> 01:17:47.220
And they're also included
in the master URL list,

01:17:47.350 --> 01:17:49.540
which shows up at the
end of every session.

01:17:49.540 --> 01:17:50.640
That's about it.

01:17:50.660 --> 01:17:52.480
We have no time for QA today.

01:17:52.480 --> 01:17:55.890
We would invite you to please attend
the feedback forums on the technologies

01:17:55.890 --> 01:17:57.320
that are of interest to you.

01:17:57.320 --> 01:18:01.740
They're listed in your program and here
for your convenience is all the times.

01:18:01.740 --> 01:18:04.150
And with that,
thank you very much for attending.

01:18:04.150 --> 01:18:05.910
We hope to see you through the week.