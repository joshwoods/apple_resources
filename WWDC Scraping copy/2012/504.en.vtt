WEBVTT

00:00:10.110 --> 00:00:12.660
And thanks for coming.

00:00:12.850 --> 00:00:17.350
My name is Thomas Goossens,
and I'm going to talk about Scene Kit.

00:00:18.370 --> 00:00:20.200
So what's Scene Kit?

00:00:20.330 --> 00:00:23.060
Scene Kit is a new
framework on Mountain Lion,

00:00:23.110 --> 00:00:29.120
and its goal is to simplify the
integration of 3D in applications.

00:00:29.270 --> 00:00:32.740
There are many use cases
for 3D in applications.

00:00:32.770 --> 00:00:36.940
For instance, sometimes it is used in 3D
user interfaces like the

00:00:36.940 --> 00:00:43.800
Book Template Chooser in iPhoto,
or CoverFlow in iTunes and Finder,

00:00:43.800 --> 00:00:47.610
or Safari Stop Sites, et cetera.

00:00:48.380 --> 00:00:52.890
Slideshows and presentations are another
common use case for 3D to make the

00:00:52.890 --> 00:00:56.290
animation nicer and more impressive.

00:00:56.640 --> 00:01:00.850
Data visualization for
scientist applications or

00:01:00.850 --> 00:01:05.390
for the 3D charting keynotes.

00:01:05.390 --> 00:01:05.390
This is another use case for 3D.

00:01:06.330 --> 00:01:11.760
and games, obviously,
where 3D is commonly used there.

00:01:12.420 --> 00:01:16.980
And so for these use cases,
OSÂ X provides some low-level

00:01:16.980 --> 00:01:22.600
APIs which are OpenGL and
its associated technologies.

00:01:23.190 --> 00:01:27.040
So these APIs are very highly performant.

00:01:27.090 --> 00:01:29.740
They have a very strong foundation.

00:01:29.740 --> 00:01:31.150
You can do a lot of things with it.

00:01:31.240 --> 00:01:35.960
However, since they are low level,
they require a lot of advanced

00:01:35.960 --> 00:01:38.360
skills in computer graphics.

00:01:38.580 --> 00:01:42.900
And even if you want to do
some relatively simple things,

00:01:42.900 --> 00:01:46.900
you will have to write
quite a lot of complex code.

00:01:47.430 --> 00:01:50.490
So that's why we
introduced Scene Kit today.

00:01:50.640 --> 00:01:55.560
Scene Kit is a high-level API that
is built on top of OpenGL and

00:01:55.680 --> 00:01:58.460
that operates on the Scene Graph.

00:01:58.670 --> 00:02:01.540
And this is a key difference with OpenGL.

00:02:01.590 --> 00:02:06.010
OpenGL is a procedural
API where for every frame,

00:02:06.010 --> 00:02:10.980
you call some draw commands,
set some states,

00:02:11.040 --> 00:02:16.190
and you do this for each object
frame per frame to render your scene.

00:02:16.230 --> 00:02:21.410
With Scene Kit,
you describe a scene once,

00:02:21.410 --> 00:02:23.520
you change some properties
of your scene when you want,

00:02:23.520 --> 00:02:26.740
but then you let Scene Kit manage
everything and manage

00:02:26.740 --> 00:02:28.670
the rendering for you.

00:02:30.800 --> 00:02:35.040
Scene Kit is an Objective-C API.

00:02:35.480 --> 00:02:38.230
You can use it for all the
use cases I mentioned before.

00:02:38.300 --> 00:02:41.550
It is not tied to a particular use case.

00:02:42.010 --> 00:02:46.650
It's integrated with Cocoa and
Core Animation for a seamless and

00:02:46.650 --> 00:02:50.190
simple integration into applications.

00:02:52.360 --> 00:02:54.920
So what can you do with Scene Kit?

00:02:55.040 --> 00:02:59.300
Scene Kit essentially allows
you to do three things.

00:02:59.350 --> 00:03:02.660
You can load a scene from a file.

00:03:03.000 --> 00:03:08.300
You can manipulate the objects
of your scene programmatically.

00:03:08.380 --> 00:03:13.010
And finally, you can render that
scene onto the screen.

00:03:13.450 --> 00:03:18.870
So let's focus on the first part for now,
loading a 3D file,

00:03:18.870 --> 00:03:23.600
and see why it's important
to work with 3D files.

00:03:24.200 --> 00:03:28.120
The first reason is because
it's easier to create complex

00:03:28.300 --> 00:03:31.070
scenes using 3D software.

00:03:31.390 --> 00:03:36.290
I mean, complex geometries or complex
trajectories are usually

00:03:36.290 --> 00:03:38.590
created with dedicated tools.

00:03:40.180 --> 00:03:42.710
The second reason is that
the more information you

00:03:42.710 --> 00:03:46.840
will put into your 3D files,
the less code you will have to write,

00:03:46.910 --> 00:03:50.330
and so this will minimize the
number of bugs in your code.

00:03:51.060 --> 00:03:54.130
And the last reason is that
working with a 3D file allows

00:03:54.190 --> 00:03:56.880
you to work with artists.

00:03:57.210 --> 00:04:04.100
The artists work to build the
nicest 3D scene on their site while

00:04:04.300 --> 00:04:09.570
you can focus on your code and
so work in parallel with artists.

00:04:10.140 --> 00:04:16.000
Scene Kit allows you to load
3D scenes from DAE documents.

00:04:16.020 --> 00:04:19.910
DAE stands for Digital Asset Exchange.

00:04:20.060 --> 00:04:23.370
It's an XML-based file format.

00:04:23.580 --> 00:04:28.810
It is supported by most of the
major 3D software like 3ds Max,

00:04:28.810 --> 00:04:32.980
Maya, Modo, Cinema 4D, etc.

00:04:33.090 --> 00:04:34.660
And it is adopted in the industry.

00:04:34.660 --> 00:04:39.930
For instance, it is used by SketchUp,
or more recently it was adopted by iBooks

00:04:40.160 --> 00:04:43.650
and iBooks Auto for their 3D widgets.

00:04:46.340 --> 00:04:51.040
A DAE file can describe a lot
of things in your 3D scene.

00:04:51.260 --> 00:04:54.300
It can, of course,
describe all the geometry

00:04:54.300 --> 00:04:56.960
information of your 3D objects.

00:04:57.010 --> 00:05:02.130
But it can also describe some animations,
all the material colors,

00:05:02.280 --> 00:05:06.310
references to images,
all the lighting of your scene,

00:05:06.460 --> 00:05:09.600
the different point of
views to render your scene,

00:05:09.670 --> 00:05:14.070
and some advanced features
like the skinning and morphing.

00:05:15.430 --> 00:05:19.640
Loading such DAE file is
straightforward with Scene Kit.

00:05:19.650 --> 00:05:22.240
It can be done with just
one single line of code.

00:05:22.370 --> 00:05:26.980
So typically,
you will start by getting the URL to

00:05:26.980 --> 00:05:29.600
your DAE document using NSBundle.

00:05:29.600 --> 00:05:33.780
And once you have your URL,
you can load your scene

00:05:33.780 --> 00:05:38.250
using SceneWithURL options
error on the SCNScene class.

00:05:38.250 --> 00:05:44.350
This will load the DAE file and return
a new instance of a SCNScene scene.

00:05:48.020 --> 00:05:51.690
Once you have your scene loaded,
you may want to render it, for instance,

00:05:51.800 --> 00:05:52.220
in a view.

00:05:52.220 --> 00:05:56.500
To do that,
Scene Kit provides a SCNView object.

00:05:56.540 --> 00:06:03.290
A SCNView is a subclassary
of an NSView that has the

00:06:03.290 --> 00:06:06.050
capability to render a 3D scene.

00:06:06.130 --> 00:06:11.940
So just allocate a SCNView and then set
your scene previously loaded to your view

00:06:11.940 --> 00:06:14.690
using the scene property of the SCNView.

00:06:15.750 --> 00:06:19.020
Another way to create a SCNView is
to use Interface Builder.

00:06:19.020 --> 00:06:24.090
So to do this,
just drag and drop a SCNView object

00:06:24.090 --> 00:06:28.740
from the Interface Builder
library into your user interface,

00:06:28.740 --> 00:06:30.220
and then you are done.

00:06:30.220 --> 00:06:36.920
So let me show you those two
first things in a quick demo.

00:06:37.580 --> 00:06:42.220
So for this first demo,
I will start with a very basic example.

00:06:42.340 --> 00:06:47.670
Let's say I want to build a simple
slideshow to show my images from the

00:06:47.670 --> 00:06:50.930
iPhoto library or whatever source.

00:06:51.290 --> 00:06:54.340
into a nice 3D animation
for my slideshow.

00:06:54.360 --> 00:07:00.800
So I asked my artist to build a
nice animation in his 3D tool,

00:07:00.800 --> 00:07:03.450
and he sent me a DAE document.

00:07:03.460 --> 00:07:06.500
So here, that is myslideshow.dae.

00:07:06.540 --> 00:07:12.110
And since no Leopard,
you can preview DAE files

00:07:12.140 --> 00:07:14.840
using Quick Look or Preview.

00:07:14.840 --> 00:07:20.160
So if I double-click on the DAE file,
I can open it in Preview.

00:07:23.030 --> 00:07:28.650
and I can even play the animations to
have an idea of what the designer made.

00:07:30.200 --> 00:07:32.940
So here I'm just having a
preview of the DAE document.

00:07:33.010 --> 00:07:36.740
So you can see that the DAE file
can describe a lot of things.

00:07:36.940 --> 00:07:40.180
It can describe the 3D objects
that are my photo frames.

00:07:40.190 --> 00:07:42.680
It describes all the
lighting information,

00:07:42.730 --> 00:07:44.680
the movements of the cameras.

00:07:44.940 --> 00:07:48.720
So everything here is
described in the DAE file.

00:07:49.160 --> 00:07:52.320
So as an engineer,
I understand that I want to integrate

00:07:52.410 --> 00:07:54.900
that in my slideshow application.

00:07:54.900 --> 00:07:59.200
And that I will have later to replace
the two pictures by some photos

00:07:59.250 --> 00:08:04.700
that comes from my iPhoto library,
for instance.

00:08:04.740 --> 00:08:08.290
So let's see how to integrate
that into an application.

00:08:11.230 --> 00:08:14.800
So here is a new-- make
it slightly bigger.

00:08:14.940 --> 00:08:17.700
So here's a new application,
a new project that

00:08:17.760 --> 00:08:19.100
I created from scratch.

00:08:19.240 --> 00:08:21.170
So there is no code at all yet.

00:08:21.290 --> 00:08:26.900
So the only thing I did was to link
with Scene Kit in the build phases here.

00:08:27.970 --> 00:08:31.860
And I added my DAE document
to my resources.

00:08:31.980 --> 00:08:35.580
So here you can see mysledshow.dae
in the sidebar of Xcode.

00:08:35.700 --> 00:08:41.530
So the first thing I would want to do
is to edit the interface builder file.

00:08:42.220 --> 00:08:44.900
So here is my window.

00:08:44.930 --> 00:08:47.950
And from the interface builder library,

00:08:49.500 --> 00:08:53.140
I can search for my
SCN view that is here.

00:08:53.160 --> 00:09:00.690
I can drag and drop it into my window,
make it slightly bigger.

00:09:02.600 --> 00:09:08.560
And the SCN view in Interface Builder
comes from with an inspector here

00:09:09.140 --> 00:09:10.600
that allows you to set some options.

00:09:10.710 --> 00:09:12.720
For instance,
I can directly type the name of

00:09:12.720 --> 00:09:15.240
the file I want to load at launch.

00:09:15.440 --> 00:09:18.510
So here I want to load myslideshow.dae.

00:09:18.630 --> 00:09:21.860
It auto-completes.

00:09:22.480 --> 00:09:26.280
And I can also set up a few steps,
like I want the animations

00:09:26.720 --> 00:09:29.500
to play at launch and loop.

00:09:29.620 --> 00:09:32.380
So here, if I run my application.

00:09:33.660 --> 00:09:38.550
I see that I see the 3D animation
playing in my application.

00:09:38.600 --> 00:09:43.480
And so this was done without
having to write any line of code.

00:09:43.580 --> 00:09:48.380
So let's switch back to the slides.

00:09:49.930 --> 00:09:53.690
So you can render a scene into
a SCN view if you want to render

00:09:53.690 --> 00:09:56.860
that in a window with views.

00:09:56.900 --> 00:10:01.130
But it also provides SCN layers,
a SCN layer, if you want to render a 3D

00:10:01.250 --> 00:10:03.620
scene into a layer tree.

00:10:03.880 --> 00:10:07.220
and SCN Renderer if you want
to render the 3D scene into

00:10:07.220 --> 00:10:10.000
an arbitrary OpenGL context.

00:10:12.280 --> 00:10:15.450
So that's for loading
and rendering a scene.

00:10:15.690 --> 00:10:19.480
Now you may want to manipulate
the objects in your scene to add

00:10:19.480 --> 00:10:24.290
some interactivity to all that,
and that's what I'm going to show now.

00:10:24.600 --> 00:10:29.790
So first, Scene Kit allows you to access
all the objects and all the

00:10:29.890 --> 00:10:31.060
properties of your scene.

00:10:31.250 --> 00:10:35.600
So you can, of course, move, scale,
and rotate the objects in your scene,

00:10:35.660 --> 00:10:41.880
but you can also add some animations,
change the colors or change the textures,

00:10:41.900 --> 00:10:44.780
adjust the lighting, etc., etc.

00:10:45.320 --> 00:10:48.580
To do this,
you need to know what are the objects,

00:10:48.580 --> 00:10:51.600
the data structures that
describe a 3D scene,

00:10:51.660 --> 00:10:53.620
and that's what I'm going to show now.

00:10:53.660 --> 00:10:57.570
So a 3D scene is represented
by the SCNScene class,

00:10:57.570 --> 00:11:01.470
and the SCNScene class
has a tree of nodes.

00:11:01.500 --> 00:11:04.720
A node is represented
by the SCNNode class,

00:11:04.720 --> 00:11:09.720
and the tree of node is similar to a
tree of layers in Core Animation or

00:11:09.720 --> 00:11:11.980
a tree of views in the AppKit.

00:11:12.940 --> 00:11:16.640
A node has a position, rotation,
and scale that define a 3D

00:11:16.820 --> 00:11:20.360
coordinate system that is
relative to its parent node.

00:11:20.360 --> 00:11:24.700
So it's exactly like a layer
that has a frame that represents

00:11:24.700 --> 00:11:30.030
a 2D coordinate system that is
relative to its super layer.

00:11:32.500 --> 00:11:36.680
So if you want to, for instance,
move a node in the 3D space,

00:11:36.740 --> 00:11:41.040
you just need to set its
position to a given vector.

00:11:41.040 --> 00:11:43.570
So for instance,
here I move my node to the origin.

00:11:43.830 --> 00:11:48.330
I set its position to the vector 0, 0, 0.

00:11:49.180 --> 00:11:54.640
and managing the hierarchy of nodes is
very similar to managing a hierarchy

00:11:54.640 --> 00:12:00.480
of layers or views with the usual add
child and remove from parent methods.

00:12:01.700 --> 00:12:06.000
Then a node doesn't represent
anything in the 3D space.

00:12:06.060 --> 00:12:09.360
I mean, nothing that can be
rendered on the screen.

00:12:09.430 --> 00:12:15.990
It's just a location in 3D space on
which you can attach some attributes.

00:12:16.220 --> 00:12:19.500
The attributes you can attach
to a node are the following:

00:12:19.580 --> 00:12:24.440
You can attach a camera,
you can attach a light, or a geometry.

00:12:24.510 --> 00:12:27.840
I will explain each of them,
but you can already notice that you can

00:12:27.840 --> 00:12:30.980
share one attribute to multiple nodes.

00:12:31.060 --> 00:12:34.600
This can be useful if you want
a given attribute to be visible

00:12:34.950 --> 00:12:38.910
at different locations in the
3D scene at the same time.

00:12:39.060 --> 00:12:41.500
So let's see the first one: Camera.

00:12:41.970 --> 00:12:48.170
A camera is a point of view
that is used by the renderers,

00:12:48.410 --> 00:12:52.170
so by the SCN view, SCN layer,
or SCN renderer.

00:12:52.260 --> 00:12:56.410
The illustration here shows a
single scene rendered by Scene Kit,

00:12:56.510 --> 00:12:59.690
but rendered from
different point of views.

00:13:00.740 --> 00:13:04.450
The camera also has a
couple of parameters,

00:13:04.450 --> 00:13:07.930
like the field of view, for instance,
if you want to increase or

00:13:08.000 --> 00:13:10.440
decrease the perspective effect.

00:13:10.510 --> 00:13:14.970
The second attribute you can
attach to a node are the lights.

00:13:16.190 --> 00:13:18.530
There are different kinds of lights.

00:13:18.540 --> 00:13:20.610
For instance,
the ambient light is a light that

00:13:20.770 --> 00:13:24.600
illuminates in every direction,
and so it illuminates equally

00:13:24.600 --> 00:13:26.100
all the objects in the scene.

00:13:26.100 --> 00:13:30.090
An omni light originates
from a single point.

00:13:30.130 --> 00:13:34.740
A directional light illuminates
in a given direction.

00:13:34.740 --> 00:13:39.330
And a spotlight illuminates,
originates from a single point but

00:13:39.510 --> 00:13:42.330
spreads outward in a cone direction.

00:13:42.650 --> 00:13:46.620
So lights have a couple of parameters
like the attenuation distances,

00:13:46.770 --> 00:13:49.620
the intensity, the color, et cetera.

00:13:49.910 --> 00:13:54.830
But one thing important about light is
that it illuminates the entire scene

00:13:55.210 --> 00:13:58.080
and not only the node it is attached to.

00:13:59.230 --> 00:14:03.200
The last attribute you can
attach to a node is a geometry,

00:14:03.210 --> 00:14:08.500
and the geometry represents a surface
that can be rendered on the screen.

00:14:09.750 --> 00:14:16.040
The surface is made of triangles that are
connected together to build the surface.

00:14:16.170 --> 00:14:18.980
So triangles are connected to vertices.

00:14:19.110 --> 00:14:24.120
So vertices have a normal that
indicates the direction of the surface.

00:14:24.840 --> 00:14:29.590
Geometry may have some UVs,
sometimes named texture coordinates,

00:14:29.650 --> 00:14:34.550
that tells how an image should
be mapped onto the 3D object.

00:14:34.950 --> 00:14:39.970
And last, geometry as an array of
materials that defines the

00:14:39.970 --> 00:14:42.960
final appearance of the surface.

00:14:43.280 --> 00:14:48.150
Note that it is an array of materials and
not just a material because sometimes a

00:14:48.150 --> 00:14:53.620
geometry is split into several elements,
and each element can

00:14:53.890 --> 00:14:55.610
have a separate material.

00:14:55.780 --> 00:14:57.850
So now the materials.

00:14:58.000 --> 00:15:00.610
The material defines the
appearance of the surface.

00:15:00.720 --> 00:15:04.680
It is represented by
the SCN material class.

00:15:05.150 --> 00:15:09.160
And the material is made
of eight properties.

00:15:09.170 --> 00:15:12.500
A property is represented by
the SCNMaterialProperty class.

00:15:12.520 --> 00:15:17.770
And each property can
have a color or an image.

00:15:18.600 --> 00:15:22.100
The head properties of a
material are the following.

00:15:22.150 --> 00:15:27.390
And the combination of the settings
of these eight properties produce

00:15:27.390 --> 00:15:30.970
the final appearance of your surface.

00:15:32.250 --> 00:15:35.750
So for instance,
the diffuse here can be considered

00:15:35.760 --> 00:15:38.480
as the base color of your material.

00:15:38.490 --> 00:15:41.320
More precisely,
it's the color that the material will

00:15:41.320 --> 00:15:44.990
reflect when it is hit by lights.

00:15:45.230 --> 00:15:50.120
It can be an image like here,
or it can be a simple color if you

00:15:50.190 --> 00:15:53.160
set an NS color or CG color ref.

00:15:55.170 --> 00:15:59.410
Then the ambient is the color
that the material reflects when

00:15:59.410 --> 00:16:01.350
it is hit by ambient light only.

00:16:01.700 --> 00:16:05.080
It can be, again, an image or a color.

00:16:06.270 --> 00:16:14.830
The specular and shininess controls the
specular highlight of shiny materials.

00:16:15.080 --> 00:16:20.180
The shininess controls the
shape of the specular highlight.

00:16:20.460 --> 00:16:26.740
Reflective is an image that is used as a
reflective environment for your material.

00:16:26.810 --> 00:16:29.950
The transparent property
allows you to set,

00:16:29.950 --> 00:16:34.220
to define the transparent
areas of your material.

00:16:34.720 --> 00:16:38.770
The Normal property allows
you to set a normal map,

00:16:38.770 --> 00:16:42.320
sometimes called Bump Map,
which is a popular technique to

00:16:42.320 --> 00:16:47.070
add some details to your surface
without having to add more polygons.

00:16:47.480 --> 00:16:49.750
The Multiply property allows you,
for instance,

00:16:49.850 --> 00:16:54.880
to set some light maps or shadow maps,
which is a popular technique

00:16:54.880 --> 00:16:57.560
that designers are familiar with.

00:16:57.610 --> 00:17:01.650
And last,
the Emission is an emissive color.

00:17:01.980 --> 00:17:04.740
That means that it can be
visible even when the material

00:17:04.740 --> 00:17:06.450
doesn't receive any light.

00:17:06.580 --> 00:17:11.940
So for instance here,
the circle image is visible

00:17:12.100 --> 00:17:14.790
even on the sides of the cube
that doesn't receive any light,

00:17:14.790 --> 00:17:17.030
and it's because it is emissive.

00:17:18.110 --> 00:17:22.000
So with materials,
we can control how it reacts to light.

00:17:22.030 --> 00:17:25.880
And this can be done with some
lighting models that Scene Kit support.

00:17:25.930 --> 00:17:28.420
With a constant lighting model,
the constant lighting model

00:17:28.420 --> 00:17:29.650
doesn't react to any light.

00:17:29.680 --> 00:17:31.880
It's just a uniform color.

00:17:32.130 --> 00:17:35.410
Lambert React to Light but
has no specular highlight,

00:17:35.410 --> 00:17:39.390
and Blinn and Fong have a
different specular highlight.

00:17:39.900 --> 00:17:44.260
So now, to sum up and give an example
of all these data structures,

00:17:44.280 --> 00:17:49.100
let's say I want to change a
material of one on my object.

00:17:49.100 --> 00:17:53.360
I will first get the
geometry from my node.

00:17:54.430 --> 00:17:57.700
Then I will create a new material,
let's say here a red material,

00:17:57.700 --> 00:18:02.290
by setting the diffuse
contents to a red color.

00:18:03.160 --> 00:18:07.320
And then I can set this material
to my geometry as the first

00:18:07.320 --> 00:18:13.620
material by setting it to the first
material property of my geometry.

00:18:15.130 --> 00:18:19.250
So that's for the overview of all
the data structures in Scene Kit.

00:18:19.400 --> 00:18:22.990
Now I hand over to Amaury to
talk about the steps to create

00:18:23.050 --> 00:18:24.840
an application using Scene Kit.

00:18:24.990 --> 00:18:26.510
Thank you.

00:18:28.900 --> 00:18:31.250
Thanks, Thomas.

00:18:31.260 --> 00:18:31.670
Hi.

00:18:32.100 --> 00:18:34.150
My name is Amaury,
and I think it's time for you to

00:18:34.150 --> 00:18:36.890
build your first app using Scene Kit.

00:18:37.640 --> 00:18:40.110
As said before,
you will use DAE documents that

00:18:40.110 --> 00:18:41.690
describe an entire 3D scene.

00:18:42.060 --> 00:18:44.520
OSÂ X has a built-in
support for these files,

00:18:44.520 --> 00:18:47.910
and as said before,
Preview and Quick Look have allowed you

00:18:47.910 --> 00:18:50.640
to open and play Scene Snow Leopard.

00:18:50.710 --> 00:18:54.310
But for many reasons,
viewers are not sufficient,

00:18:54.320 --> 00:18:57.820
so today we are introducing
a new Scene Kit editor.

00:18:59.180 --> 00:19:02.580
The new Scene Kit Editor is
built into Xcode.

00:19:02.620 --> 00:19:05.760
It allows you to have a deep
comprehension of your 3D scene.

00:19:05.970 --> 00:19:09.650
This is really useful when dealing
with files you do not know,

00:19:09.650 --> 00:19:14.080
either downloaded from an online
library or simply handed by your artist.

00:19:14.100 --> 00:19:18.960
First, the editor allows you to have
an idea of your scene graph.

00:19:18.960 --> 00:19:23.150
Check the name of your nodes,
check what their attributes

00:19:23.220 --> 00:19:27.100
are and how they are positioned
relative to each other.

00:19:28.100 --> 00:19:32.100
The Editor allows you to preview
animations and test performances.

00:19:32.170 --> 00:19:35.980
We wanted to make it really useful,
really easy for you to

00:19:35.980 --> 00:19:38.100
collaborate with your artist.

00:19:38.100 --> 00:19:42.100
And we think the Editor will be a
default of your typical workflow.

00:19:42.100 --> 00:19:46.980
Artists will design objects in
their favorite authoring tool,

00:19:47.500 --> 00:19:54.010
improve them with great materials,
add lights and cameras to their scene.

00:19:54.510 --> 00:19:57.310
Using the editor,
they will be able to have

00:19:57.380 --> 00:20:00.400
a preview of how the scene
will be rendered in your app.

00:20:00.400 --> 00:20:05.510
And since they are artists,
and since they know what looks good,

00:20:05.640 --> 00:20:10.400
we wanted to provide them with a
tool to make fine visual adjustments.

00:20:10.400 --> 00:20:13.300
The editor allows them
to tweak materials,

00:20:13.380 --> 00:20:17.570
and by iterating between the
editor and the authoring tool,

00:20:17.570 --> 00:20:21.360
they will be able to craft the
perfect-looking scene for your app.

00:20:21.410 --> 00:20:25.400
Then you, as a developer, take over.

00:20:25.400 --> 00:20:30.400
You will have the scene right within
all your other application files.

00:20:30.400 --> 00:20:35.250
And by iterating between
the editor and your code,

00:20:35.250 --> 00:20:39.690
you will be able to efficiently add
the programmatic layer that will make

00:20:39.690 --> 00:20:42.360
the scene dynamic and your app great.

00:20:42.400 --> 00:20:44.200
So let's have a demo.

00:20:44.400 --> 00:20:50.200
So, starting from Thomas' demo,
let's have a look at this scene.

00:20:51.150 --> 00:20:53.900
The first thing you see is a viewport.

00:20:53.910 --> 00:20:57.200
It gives you a preview of
what you will get in your app.

00:20:57.390 --> 00:21:00.540
On the left side,
you have the scene graph.

00:21:00.590 --> 00:21:04.080
Let's take a look at this node,
the floor node.

00:21:04.240 --> 00:21:09.140
I can tell it has geometry attached to
it because of this little teapot icon.

00:21:09.180 --> 00:21:13.540
The node just below has
a camera attached to it,

00:21:13.580 --> 00:21:16.710
and somewhere in each of the nodes,
there's a light.

00:21:16.800 --> 00:21:18.360
Let's have a look.

00:21:18.400 --> 00:21:21.940
Oh, there are three nodes,
and each of them has a

00:21:21.940 --> 00:21:23.200
light attached to it.

00:21:23.210 --> 00:21:26.260
But let's get back to the frame.

00:21:26.520 --> 00:21:30.500
In addition to the inspector
you're familiar with,

00:21:30.780 --> 00:21:35.660
Scene Kit adds three new of them:
the Node Inspector,

00:21:35.680 --> 00:21:41.250
the Node Attributes Inspector,
and the Material Inspector.

00:21:42.600 --> 00:21:46.660
The Node Inspector allows us to
inspect the many properties of a node.

00:21:46.730 --> 00:21:53.120
For example,
I could change this name's name.

00:21:54.600 --> 00:22:00.290
and other developers have been working
on the Scene Kit for a long time.

00:22:00.290 --> 00:22:00.290
I could also change its rotation.

00:22:01.440 --> 00:22:04.280
Whatever, I think best suits.

00:22:04.300 --> 00:22:06.600
Let's go back to the light.

00:22:06.600 --> 00:22:12.020
I want to improve the scene
because I don't like this spot.

00:22:13.240 --> 00:22:19.740
Using the node attributes inspector,
I can see this one is a spot.

00:22:19.770 --> 00:22:26.140
I'm happy with its color,
but not with its illumination code.

00:22:26.240 --> 00:22:33.890
I can easily tweak its
outer angle to make it good.

00:22:42.760 --> 00:22:46.000
Now I have a scene that
I think looks perfect.

00:22:46.190 --> 00:22:50.220
What I want to do is add some
programmatic layer to change

00:22:50.220 --> 00:22:52.680
the pictures that are displayed.

00:22:53.200 --> 00:22:55.820
To do this,
we will probably have to tweak materials.

00:22:55.910 --> 00:22:58.160
So let's take a look.

00:22:58.950 --> 00:23:02.800
This one has three materials:
one for the wood,

00:23:03.060 --> 00:23:07.500
one for the paper frame,
and one for the picture.

00:23:11.140 --> 00:23:14.730
We have a reflective map
for the glossy effect,

00:23:14.730 --> 00:23:18.000
and the actual picture is
set in the diffuse property.

00:23:18.020 --> 00:23:22.440
Okay, that's all we need to know
to add a programmatic layer.

00:23:22.490 --> 00:23:24.150
First,

00:23:25.260 --> 00:23:30.150
First, we have the name of our node,
then second material,

00:23:30.200 --> 00:23:31.670
and then diffuse property.

00:23:31.680 --> 00:23:36.070
We will also have to change the pic...

00:23:42.900 --> 00:23:47.060
We also have to change the
picture displayed at the back.

00:23:47.130 --> 00:23:49.290
So let's rename this guy.

00:23:56.600 --> 00:23:58.840
Let's go to our App Delegate.

00:23:58.840 --> 00:24:04.910
The first thing we will want to do
is have an entry point to our scene.

00:24:05.420 --> 00:24:10.180
This will be done by accessing
the root node of our scene.

00:24:10.320 --> 00:24:13.140
Self.SceneView.Scene.RootNode.

00:24:13.210 --> 00:24:17.140
We have an IBO clip set to the scene,
which is named SceneView.

00:24:17.200 --> 00:24:19.120
On this root node,

00:24:19.170 --> 00:24:22.920
We will call the child node
we've named recursively

00:24:23.060 --> 00:24:26.220
selector to retrieve our node,
photo1.

00:24:26.610 --> 00:24:30.490
And we will do the same
for the horizontal frame.

00:24:31.750 --> 00:24:35.760
The next thing we want to do
is to retrieve the materials.

00:24:35.760 --> 00:24:41.600
We'll take the second material
for the vertical frame.

00:24:41.600 --> 00:24:45.600
We'll do the same for
the horizontal frame.

00:24:45.600 --> 00:24:48.300
Now, let's add some debug material.

00:24:49.600 --> 00:24:57.600
[Transcript missing]

00:25:04.900 --> 00:25:08.990
With my resources, I have these pictures.

00:25:08.990 --> 00:25:15.900
And now I want to show this one,
this one, this one, and this one.

00:25:15.900 --> 00:25:21.900
Let's get rid of this data code.

00:25:21.900 --> 00:25:27.930
And the way we will
display the new images,

00:25:35.300 --> 00:25:45.100
[Transcript missing]

00:25:45.340 --> 00:25:50.270
and set the diffuse property of
our material to be that image.

00:25:50.300 --> 00:25:52.910
Of course,

00:25:53.340 --> 00:25:55.760
We do the same for the
horizontal picture.

00:25:55.810 --> 00:25:56.920
We want to loop.

00:25:57.190 --> 00:25:59.840
That is to mean we want
to display pictures,

00:25:59.840 --> 00:26:02.240
and when they are at
the back of the scene,

00:26:02.300 --> 00:26:06.230
we will change them so that the
user doesn't notice anything.

00:26:06.290 --> 00:26:08.490
So let's go back.

00:26:09.200 --> 00:26:11.920
to our scene and checks for its duration.

00:26:12.140 --> 00:26:15.540
Seven seconds, 33, okay.

00:26:21.400 --> 00:26:25.400
Animation duration will be 7:33 seconds.

00:26:25.440 --> 00:26:27.860
And we will set up a timer.

00:26:29.210 --> 00:26:32.160
To call that method, that swaps images.

00:26:32.160 --> 00:26:35.860
But because this is for
the frontmost frame,

00:26:35.880 --> 00:26:39.950
we will have to add a slight
delay to change the images

00:26:40.350 --> 00:26:42.080
when they are at the back.

00:26:42.100 --> 00:26:43.880
We do this.

00:26:46.300 --> 00:26:50.180
We did this at the middle
of the animation duration.

00:26:50.200 --> 00:26:55.990
And of course, we do this for the
second picture as well.

00:27:02.500 --> 00:27:08.800
[Transcript missing]

00:27:18.840 --> 00:27:22.340
That's how easy it is
to build a dynamic app,

00:27:22.370 --> 00:27:24.070
dynamic 3D app using Scene Kit.

00:27:24.230 --> 00:27:26.600
So let's have a quick recap.

00:27:27.050 --> 00:27:30.480
You will start by retrieving
nodes using their names that

00:27:30.540 --> 00:27:33.300
you can check in the editor.

00:27:33.440 --> 00:27:36.770
You will retrieve the materials
and finally you will tweak

00:27:36.770 --> 00:27:40.720
them to make them look great.

00:27:41.000 --> 00:27:43.540
And with that,
I'm calling Aymeric to talk about

00:27:43.540 --> 00:27:46.000
more advanced features in Scene Kit.

00:27:46.040 --> 00:27:47.490
Thank you.

00:27:52.910 --> 00:27:54.580
Thanks Amaury.

00:27:54.600 --> 00:27:57.370
Hi everyone,
I'm Amaury and I'm going to show you

00:27:57.520 --> 00:28:00.190
how to go further with Scene Kit.

00:28:01.500 --> 00:28:05.670
First, I will talk about one of the
main features of Scene Kit:

00:28:05.670 --> 00:28:06.710
animations.

00:28:06.710 --> 00:28:09.920
Then,
I will present several ways to customize

00:28:09.920 --> 00:28:13.270
its rendering using OpenGL or GLSL.

00:28:13.970 --> 00:28:16.820
Then,
I browse through the various parametric

00:28:16.940 --> 00:28:22.290
geometries Scene Kit has to offer for
constructing programmatically your scene.

00:28:22.380 --> 00:28:29.000
And finally,
I will review the possible interactions

00:28:29.100 --> 00:28:32.260
between Scene Kit and Core Animation.

00:28:34.190 --> 00:28:38.780
It is crucial for a 3D engine to
provide a solid animation system.

00:28:38.990 --> 00:28:43.250
People expect to see things
move and change fluidly in 3D.

00:28:43.340 --> 00:28:47.410
And Scene Kit does provide
an amazing animation system.

00:28:47.730 --> 00:28:52.330
Almost every property of
every object are animatable.

00:28:52.330 --> 00:28:54.600
And this will be done in two ways.

00:28:54.840 --> 00:28:57.200
Either using implicit animation.

00:28:57.250 --> 00:29:00.900
By implicit, I mean that no actual
animation objects are created.

00:29:00.900 --> 00:29:03.690
As you will see in the
code example later,

00:29:03.870 --> 00:29:09.100
you just have to change the animation,
the property you want to animate.

00:29:09.520 --> 00:29:12.690
The second way is using
explicit animations.

00:29:12.820 --> 00:29:15.860
This time,
an actual animation object is created

00:29:16.380 --> 00:29:19.190
and played when the time is right.

00:29:19.650 --> 00:29:22.500
I want to stress out that
Scene Kit uses the same programming

00:29:22.500 --> 00:29:26.060
model as Core Animation,
easing the adoption for those

00:29:26.080 --> 00:29:28.680
of you that already know it.

00:29:28.880 --> 00:29:32.050
Here is an example of
an implicit animation.

00:29:32.170 --> 00:29:35.340
So first,
you have to begin a transaction.

00:29:35.510 --> 00:29:40.280
Please note that this is an
SCN transaction and not a CA transaction,

00:29:40.330 --> 00:29:43.040
but it has exactly the same API.

00:29:43.150 --> 00:29:47.000
So for example,
if I want to set its duration, I use the

00:29:47.000 --> 00:29:50.300
Set Animation Duration selector.

00:29:50.790 --> 00:30:00.340
Ben, change any property on
any object you need.

00:30:00.350 --> 00:30:05.730
And finally, commit the transaction.

00:30:05.730 --> 00:30:05.730
The animation will start right away
in its own thread and its own pace.

00:30:05.940 --> 00:30:10.690
You can also add a completion block
to be notified when your animation

00:30:10.690 --> 00:30:13.730
is complete or has been interrupted.

00:30:16.410 --> 00:30:20.550
Scene Kit also supports
explicit animations.

00:30:20.640 --> 00:30:25.730
This time, explicit animations are actual
objects that are created upfront

00:30:26.260 --> 00:30:28.880
and played at your convenience.

00:30:29.010 --> 00:30:34.150
For example, animations created with 3D
modeling tools such as Maya or

00:30:34.150 --> 00:30:41.190
Max and exported to DAE files are
loaded as explicit animations.

00:30:41.960 --> 00:30:46.740
Scene Kit supports three
kinds of explicit animation.

00:30:46.800 --> 00:30:50.640
The simplest one is CA basic animation.

00:30:50.820 --> 00:30:56.290
It will allow you to animate one
property of one object at a time.

00:30:57.240 --> 00:31:00.320
Then we also have keyframe animation.

00:31:00.440 --> 00:31:03.990
This time,
instead of just providing a final target,

00:31:04.170 --> 00:31:08.520
you will provide intermediate
values along with key times.

00:31:09.700 --> 00:31:15.650
The last type of animation
supported is the animation group.

00:31:15.860 --> 00:31:18.680
And it will allow you to
synchronize multiple animations

00:31:19.240 --> 00:31:21.080
on multiple properties.

00:31:21.110 --> 00:31:24.220
Here you can see an animation
controlling the position,

00:31:24.240 --> 00:31:27.360
along with another
controlling the opacity.

00:31:28.210 --> 00:31:33.290
Let's see an example of an explicit
animation creation and usage

00:31:33.450 --> 00:31:35.770
here with a CA basic animation.

00:31:36.320 --> 00:31:39.150
First, you have to create your
animation targeting the

00:31:39.150 --> 00:31:40.700
property you want to animate.

00:31:40.950 --> 00:31:43.170
Here, the opacity again.

00:31:43.650 --> 00:31:47.270
Then you configure it
by setting its duration,

00:31:47.270 --> 00:31:50.930
but you could also set its begin time,
its speed,

00:31:50.930 --> 00:31:53.480
or timing function if you want.

00:31:53.540 --> 00:31:57.230
Then set the destination
value for your property.

00:31:57.720 --> 00:32:03.290
Finally, set your animation to the
node you want to animate.

00:32:03.300 --> 00:32:07.870
The animation will start right away,
but always in its own thread.

00:32:09.070 --> 00:32:13.600
So you've seen several ways to animate
your objects and their properties.

00:32:13.640 --> 00:32:16.800
Let's now talk about rendering.

00:32:18.710 --> 00:32:23.820
Thomas talked earlier about all
the different rendering aspects

00:32:23.830 --> 00:32:28.000
of Scene Kit covering different
types of lights and a large

00:32:28.000 --> 00:32:30.630
number of material properties.

00:32:31.050 --> 00:32:39.980
While we made the Scene Kit renderer
as complete as possible,

00:32:39.980 --> 00:32:45.290
we know that it won't
suit everyone's needs.

00:32:45.290 --> 00:32:45.290
Therefore, we provided three different
ways to you guys to inject

00:32:45.290 --> 00:32:45.290
custom OpenGL and GLSL code

00:32:45.380 --> 00:32:54.380
Inside Scene Kit Renderer, at the scene,
at the node, or on a material level.

00:32:55.940 --> 00:33:01.300
First of all, on the core set level,
you will be allowed to inject code

00:33:01.300 --> 00:33:07.410
before or after the scene rendering
using a scene delegate renderer.

00:33:08.520 --> 00:33:13.160
It will allow you, for example,
to have an animated background or to

00:33:13.180 --> 00:33:18.400
layer a 2D interface over your scene.

00:33:18.510 --> 00:33:21.320
Let's see how this will be done.

00:33:22.960 --> 00:33:29.590
The effect you just saw is a full-screen
quad rendered with a custom GLSL shader.

00:33:29.630 --> 00:33:33.220
In the setup phase,
we created our full-screen quad and

00:33:33.330 --> 00:33:37.860
stored it in a vertex array object,
along with a vertex and fragment

00:33:37.860 --> 00:33:40.490
shader that we also wrote.

00:33:41.230 --> 00:33:46.330
This is a selector that is called
before the actual scene rendering.

00:33:46.430 --> 00:33:50.590
When it is called,
we ensure that no vertex buffer object,

00:33:50.680 --> 00:33:53.260
no texture, or no program are bound.

00:33:53.360 --> 00:33:56.260
So we just have to bind what we need.

00:33:56.340 --> 00:34:01.040
So here,
I bind my vertex object on my program,

00:34:01.040 --> 00:34:05.480
and I don't forget to unbind
it at the end of the delegate.

00:34:06.160 --> 00:34:10.580
Concerning over GL states,
you will have to set

00:34:10.610 --> 00:34:14.680
them to your convenience,
but restore them to Scene Kit's

00:34:14.750 --> 00:34:16.080
default after a while.

00:34:16.100 --> 00:34:20.090
Here, I don't want my background
effect to alter the depth buffer,

00:34:20.090 --> 00:34:25.550
so I disable the depth testing
and restore it at the end.

00:34:28.020 --> 00:34:33.060
Next, if you want to render something
in the scene among other objects,

00:34:33.190 --> 00:34:37.240
you may want to use the
NodeRenderer delegate.

00:34:37.700 --> 00:34:41.710
It will allow you, for example,
to create position special

00:34:41.730 --> 00:34:46.260
effects like particle system
that simulate fire or smoke.

00:34:46.320 --> 00:34:48.670
Let's see an example of that.

00:34:49.740 --> 00:34:53.750
In this scene, the torch is rendered
with such a delegate,

00:34:53.870 --> 00:34:57.970
and everything else is rendered
using Scene Kit's own renderer,

00:34:58.040 --> 00:35:00.150
and the two cohabit nicely.

00:35:02.220 --> 00:35:07.590
This is a selector that is called on
each node that are using your delegate.

00:35:07.750 --> 00:35:12.200
The node is provided, obviously,
along with the necessary transform

00:35:12.770 --> 00:35:17.190
needed to render the scene as the
views of projection matrices that are

00:35:17.190 --> 00:35:20.320
given in the arguments dictionary.

00:35:20.450 --> 00:35:26.420
Lastly, if you want to have a specific
appearance for your materials,

00:35:26.530 --> 00:35:30.960
you can always provide custom
programs to Scene Kit materials.

00:35:31.120 --> 00:35:35.310
This is done by writing your
own vertex and fragment shader.

00:35:36.880 --> 00:35:41.850
Here is an example of such an effect,
a simple like Fresnel effect

00:35:41.980 --> 00:35:46.760
that could not be achieved using
standard Scene Kit materials.

00:35:46.820 --> 00:35:49.600
Let's see how that can be done.

00:35:49.750 --> 00:35:53.880
First, you have to create an
SCN program instance.

00:35:54.510 --> 00:36:01.280
Then it is the programmer's
responsibility to load its vertex

00:36:01.510 --> 00:36:04.380
and fragment shader code as a string,
usually from the application bundle.

00:36:05.100 --> 00:36:07.740
and you assign it to
your custom programs,

00:36:07.740 --> 00:36:12.100
and finally assign your program to
the material you want to customize.

00:36:12.120 --> 00:36:15.810
These are the shader curves
of the effect you just saw.

00:36:16.040 --> 00:36:18.650
I won't go into the
details of the shader,

00:36:18.710 --> 00:36:23.210
but I want you to notice that there
are two special kind of inputs.

00:36:24.390 --> 00:36:30.630
The first kind of parameters are the ones
that are automatically set by Scene Kit.

00:36:30.750 --> 00:36:33.930
These are the geometry
attributes like position,

00:36:33.940 --> 00:36:39.810
normals, and texture coordinates,
and the transforms like the models,

00:36:39.810 --> 00:36:44.300
the view, and projection matrices
that are given as uniforms.

00:36:44.370 --> 00:36:48.360
To make this work,
you have to bind your own GLSL variable

00:36:48.770 --> 00:36:50.890
with Scene Kit on Semantic.

00:36:50.970 --> 00:36:53.220
And this is how it's done.

00:36:53.340 --> 00:36:58.040
For example,
here we are binding the SCN geometry

00:36:58.040 --> 00:37:03.370
source semantic vertex with
our GLSL variable A position.

00:37:04.830 --> 00:37:15.230
The other kind of special
inputs are the ones that are

00:37:15.230 --> 00:37:17.110
not bound to Scene Kit Semantic.

00:37:17.110 --> 00:37:17.110
These are usually the custom
parameters for your programs.

00:37:17.330 --> 00:37:20.960
And this is the selector that
is called for each one of them.

00:37:21.070 --> 00:37:24.210
Here we only have one,
the U-Frenel factor that we

00:37:24.250 --> 00:37:26.990
set to some arbitrary values.

00:37:28.310 --> 00:37:34.150
So we've seen several ways to customize
the rendering using OpenGL and GLSL.

00:37:34.610 --> 00:37:40.990
I will now talk about populating your
scene with parametric geometries.

00:37:41.720 --> 00:37:45.200
If you're not really at ease
with a 3D modeling tool,

00:37:45.200 --> 00:37:48.620
or if you don't have one,
you'll be happy to know that

00:37:48.720 --> 00:37:54.270
Scene Kit does provide ready-to-use
and easy-to-use parametric geometries.

00:37:54.410 --> 00:37:59.290
It starts with a bunch of parametric
primitives such as planes,

00:37:59.290 --> 00:38:04.380
cubes, cylinders, tubes, spheres,
and so on,

00:38:04.390 --> 00:38:06.500
and they are really easy to use.

00:38:06.510 --> 00:38:08.460
Here's an example of them.

00:38:08.480 --> 00:38:13.760
Here, I just create an SCN cylinder,
giving it a radius and a height,

00:38:13.780 --> 00:38:17.710
adjust its tessellation factor,
and then set it on the geometry

00:38:17.710 --> 00:38:19.540
in the node in my scene.

00:38:19.540 --> 00:38:20.750
That's it.

00:38:20.880 --> 00:38:28.570
Scene Kit also provides dynamic 3D text
with the same text capabilities as OSÂ X.

00:38:29.380 --> 00:38:33.860
Here again, really simple,
just create an SCN text instance,

00:38:33.860 --> 00:38:37.400
set its font using a
standard NSFont object,

00:38:37.540 --> 00:38:43.380
assign it, type in a text as a string,
or you can even use an NS attributed

00:38:43.470 --> 00:38:47.800
string if you want to have
different styles rendered,

00:38:47.800 --> 00:38:50.440
like italic or bold.

00:38:50.650 --> 00:38:54.320
Adjust it-- Thank you.

00:38:57.720 --> 00:39:02.790
I just said extrusion and
their materials because there's

00:39:02.790 --> 00:39:06.230
several materials for the front,
back, and extrusion and

00:39:06.290 --> 00:39:08.180
chamfering part of the text.

00:39:08.270 --> 00:39:12.300
And all of this is animatable.

00:39:12.300 --> 00:39:16.000
And insert it into your scene, and voila.

00:39:17.400 --> 00:39:21.520
You will also be happy to have
a ready-to-use reflective floor,

00:39:21.600 --> 00:39:22.990
infinite floor.

00:39:23.280 --> 00:39:24.600
Here again, really simple.

00:39:24.600 --> 00:39:28.790
Just create an SCN floor object,
adjust its reflectivity

00:39:28.810 --> 00:39:32.770
and its follow-up factors,
assign any kind of material you want.

00:39:32.840 --> 00:39:36.050
Here we would just want
a black color floor.

00:39:36.150 --> 00:39:37.490
And set it in your scene.

00:39:37.550 --> 00:39:41.930
Your world scene will reflect
on it with nothing else to do.

00:39:45.000 --> 00:39:50.190
Lastly, you can create your own
meshes by providing position,

00:39:50.190 --> 00:39:52.600
normals, and texture coordinates.

00:39:52.600 --> 00:39:57.410
It can come in handy if you have your
own mesh loader or if you want to do

00:39:57.410 --> 00:40:00.420
some data visualization application.

00:40:01.840 --> 00:40:06.270
One last nice thing about
Scene Kit I wanted to talk about is its

00:40:06.270 --> 00:40:09.680
tight integration with Core Animation.

00:40:09.690 --> 00:40:11.700
And it works both ways.

00:40:11.720 --> 00:40:16.350
That means that you can render a
scene inside a Core Animation layer

00:40:16.570 --> 00:40:21.880
and the other way around,
that you can have a

00:40:21.880 --> 00:40:26.050
Core Animation layer used as a texture.

00:40:26.050 --> 00:40:26.050
Let's see that through some samples.

00:40:27.360 --> 00:40:33.410
Here, I create an instance on an ancient
layer and assign it a scene,

00:40:33.550 --> 00:40:38.010
then insert it in an existing
Core Animation layer tree.

00:40:38.150 --> 00:40:42.010
As the SCN layer is a subclass
of a Core Animation layer,

00:40:42.110 --> 00:40:44.180
I can use any effect on it.

00:40:44.220 --> 00:40:47.200
Here you can see a white
border color on a drop shadow.

00:40:47.310 --> 00:40:51.280
But I could also use
any Core Image filter.

00:40:53.430 --> 00:40:56.620
The other way,
here I have an animation of

00:40:56.620 --> 00:41:06.770
multiple core animation layers,
and I set this layer tree as a

00:41:06.770 --> 00:41:06.770
diffuse content of my material.

00:41:07.110 --> 00:41:10.630
Scene Kit will automatically
create a texture and update

00:41:10.630 --> 00:41:12.690
it only when it has to.

00:41:20.600 --> 00:41:25.900
will now illustrate all of these
features we've seen so far in a demo.

00:41:26.000 --> 00:41:35.640
So for this demo,
we wanted to create an example

00:41:35.640 --> 00:41:37.360
of a 3D user interface displaying
photo albums in 3D photo frames.

00:41:38.540 --> 00:41:42.650
So you've already seen the photo
frames in the previous demos,

00:41:42.650 --> 00:41:47.000
but this time we cloned it
multiple times to reflect the

00:41:47.000 --> 00:41:49.760
event in the iPhoto library.

00:41:50.500 --> 00:41:56.780
Then the frames are arranged in a
radial layout among a reflective floor,

00:41:56.780 --> 00:41:58.990
and they are lit by several lights.

00:41:59.040 --> 00:42:02.160
One of them is casting shadow.

00:42:02.200 --> 00:42:06.690
And I can browse through them by swiping.

00:42:07.250 --> 00:42:12.880
or by clicking on it using
the Scene Kit picking feature.

00:42:14.610 --> 00:42:18.560
On the top of the window,
there is a search field that will

00:42:18.630 --> 00:42:21.280
allow me to filter for my frames.

00:42:21.700 --> 00:42:23.550
For example, up.

00:42:25.610 --> 00:42:29.020
Using implicit animation,
the visible set of frames have

00:42:29.020 --> 00:42:35.740
been reduced in a smaller circle
with just a few lines of code.

00:42:35.840 --> 00:42:37.780
Let's filter some more.

00:42:40.740 --> 00:42:44.400
There again, using implicit animation,
the entire layout has changed

00:42:44.570 --> 00:42:50.170
into a cover flow-like manner,
and I can still swipe

00:42:50.170 --> 00:42:52.950
through it smoothly.

00:42:53.010 --> 00:42:55.570
OK, one more filtering.

00:42:59.010 --> 00:43:00.700
Yet another layout.

00:43:00.720 --> 00:43:04.840
Here you can see that the lighting and
the camera position have such change,

00:43:04.860 --> 00:43:07.580
always using implicit animation.

00:43:07.600 --> 00:43:09.770
And I can switch--

00:43:10.000 --> 00:43:16.190
Between my front and back frames
using explicit animation because

00:43:16.290 --> 00:43:19.400
of a more complex movement.

00:43:21.050 --> 00:43:25.880
This is the photo album
I wanted to show you.

00:43:25.890 --> 00:43:30.080
As we are using a
Core Animation layer for the content,

00:43:30.300 --> 00:43:53.800
[Transcript missing]

00:44:00.400 --> 00:44:04.090
One last thing I wanted to
show you with this demo is

00:44:04.090 --> 00:44:07.370
the custom rendering facility.

00:44:21.680 --> 00:44:25.720
Here you can see some fireflies
that are rendered using the node

00:44:25.720 --> 00:44:29.120
renderer delegate I just talked about.

00:44:29.130 --> 00:44:32.240
As there are lights
attached to these nodes,

00:44:32.260 --> 00:44:36.150
you can see that they impact
the lighting of the scene.

00:44:36.160 --> 00:44:43.670
So, that's it for the demo.

00:44:51.500 --> 00:44:54.470
Okay, let's do a quick recap.

00:44:54.590 --> 00:44:59.110
So you've seen how to give life
to your scene using animation.

00:44:59.220 --> 00:45:03.970
It's really easy, they're really fast,
so use them extensively.

00:45:04.720 --> 00:45:07.590
We've also seen how to
customize your rendering using

00:45:07.610 --> 00:45:09.540
delegates and custom programs.

00:45:09.540 --> 00:45:11.610
Use them wisely.

00:45:12.090 --> 00:45:16.240
We've seen how to populate
easily your scene by using the

00:45:16.240 --> 00:45:18.880
provided parametric geometries.

00:45:18.970 --> 00:45:23.830
And finally, how to get the best of both
worlds by using the tight

00:45:23.840 --> 00:45:26.710
integration of Core Animation.

00:45:29.400 --> 00:45:33.050
For more information,
please contact our evangelists,

00:45:33.050 --> 00:45:35.260
Alan Shaffer and Mike Jerevitz.

00:45:35.260 --> 00:45:41.400
You can find online our reference API.

00:45:41.510 --> 00:45:47.270
And we have set up Scene Kit dedicated
forum on our DevForums website.