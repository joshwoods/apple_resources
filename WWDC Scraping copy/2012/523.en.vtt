WEBVTT

00:00:10.060 --> 00:00:11.500
Hi, good morning, everybody.

00:00:11.560 --> 00:00:15.730
Thanks for coming out early in the
morning to talk with us about color.

00:00:15.850 --> 00:00:16.900
I'm Ken Greenbaum.

00:00:16.900 --> 00:00:20.980
This is Luke Wallis offstage,
and we're going to talk about what

00:00:21.100 --> 00:00:26.450
you folks at developers have to do to
manage color for your applications,

00:00:26.520 --> 00:00:32.780
both on the Mac OS X desktop as
well as iOS for mobile devices.

00:00:35.340 --> 00:00:38.700
So first,
an introduction to color management.

00:00:38.860 --> 00:00:44.320
Perhaps one of the big takeaway items
is that we at Apple color manage almost

00:00:44.470 --> 00:00:46.970
all content that you see on the display.

00:00:47.170 --> 00:00:51.730
It may be video, it may be graphics,
it may be animation,

00:00:51.730 --> 00:00:53.640
it may be still image.

00:00:53.780 --> 00:00:58.080
So we're going to talk about what that
really means to your applications.

00:00:58.870 --> 00:01:02.020
And specifically,
we're going to talk today about what you

00:01:02.020 --> 00:01:06.620
folk have to do in your applications,
whether using high-level frameworks

00:01:06.620 --> 00:01:11.020
or low-level frameworks where
you have more responsibility.

00:01:11.340 --> 00:01:15.020
And we're going to talk about what you
have to do to author your content in such

00:01:15.110 --> 00:01:19.500
a way that it works correctly with the
color management and most importantly,

00:01:19.500 --> 00:01:21.560
looks correct for your users.

00:01:22.450 --> 00:01:26.060
Finally, and maybe most important,
we're going to tell you how to

00:01:26.130 --> 00:01:30.010
manage maybe the subtle aspects
of verification to make sure that

00:01:30.090 --> 00:01:33.980
color management is enabled for your
applications and that your media and

00:01:33.980 --> 00:01:36.000
applications are looking correct.

00:01:36.080 --> 00:01:39.440
I'll be talking about a lot
of the high-level topics.

00:01:39.440 --> 00:01:42.020
Luke is going to follow up
with some of the details.

00:01:45.750 --> 00:01:49.170
So as I mentioned,
Apple Color manages almost all the

00:01:49.170 --> 00:01:51.660
content that you see on the display.

00:01:51.720 --> 00:01:55.800
This is incredible because
it provides high-quality,

00:01:55.800 --> 00:01:58.490
consistent results,
and that's exactly what

00:01:58.580 --> 00:01:59.700
we want to produce.

00:01:59.730 --> 00:02:03.880
And it produces those results
across all the different devices

00:02:04.280 --> 00:02:08.460
and environments that users may
be using your applications in,

00:02:08.470 --> 00:02:12.190
as well as the different devices
that they may be running it on.

00:02:12.550 --> 00:02:15.150
What we're trying to do is
preserve the author's intent,

00:02:15.150 --> 00:02:18.610
and we're going to talk more about that,
but that's really the key

00:02:18.610 --> 00:02:19.950
to this whole process.

00:02:22.150 --> 00:02:23.840
This is not just for pros.

00:02:23.850 --> 00:02:25.700
It's not a professional feature.

00:02:25.750 --> 00:02:28.780
While it's very nice for
authoring and proofing,

00:02:28.960 --> 00:02:33.620
it also provides a tremendous amount
of value for those people using your

00:02:33.620 --> 00:02:36.750
apps and consuming content as well.

00:02:37.920 --> 00:02:42.430
So while Apple manages almost
everything on the display,

00:02:42.530 --> 00:02:45.790
that's not true at all for
the rest of the industry.

00:02:45.990 --> 00:02:49.940
Some applications,
most notably drawing apps,

00:02:50.220 --> 00:02:53.900
maybe photo apps,
they provide color management,

00:02:54.060 --> 00:02:55.900
but it's not consistent.

00:02:55.980 --> 00:03:00.270
There is a form of color management
that's used in the broadcast TV industry.

00:03:00.510 --> 00:03:02.900
Basically,
they author for a certain standard,

00:03:02.900 --> 00:03:06.130
and then they expect receivers
to honor that standard.

00:03:06.200 --> 00:03:09.060
We'll talk a little bit about that later.

00:03:09.930 --> 00:03:13.420
So as developers,
it's important for you to understand the

00:03:13.500 --> 00:03:17.420
philosophy behind the color management,
and then you folk can do the

00:03:17.420 --> 00:03:21.730
right things and understand what
tradeoffs you're making and how

00:03:21.730 --> 00:03:24.030
to set up your own applications.

00:03:24.120 --> 00:03:30.840
So first, the creation of film, video,
images, and other forms of media,

00:03:31.070 --> 00:03:33.990
that's a creative endeavor.

00:03:34.850 --> 00:03:39.260
A specific implication of that is that
cameras are not scientific instruments.

00:03:39.300 --> 00:03:42.360
They're not colorimeters,
they're not photospectrometers,

00:03:42.360 --> 00:03:43.340
they're not supposed to.

00:03:43.340 --> 00:03:46.500
For those that are familiar
with color management,

00:03:46.500 --> 00:03:50.110
that means that our color management
is not what is known as scene-referred.

00:03:50.120 --> 00:03:54.330
We're not trying to capture
reality and reproduce that,

00:03:54.340 --> 00:03:56.430
the reality of the scene that
was actually photographed.

00:03:56.440 --> 00:03:59.800
Rather, what we're trying to do is
reproduce this author's intent

00:03:59.800 --> 00:04:01.440
that I've mentioned before.

00:04:02.060 --> 00:04:04.310
By that I mean, what is proofed?

00:04:04.320 --> 00:04:08.500
What did the author see on their
own display or output device?

00:04:08.500 --> 00:04:11.630
So that's a form of
color management that,

00:04:11.850 --> 00:04:15.140
generically, is called output-referred.

00:04:15.140 --> 00:04:18.790
If they're proofing on a display,
it may be called display-referred.

00:04:20.890 --> 00:04:23.910
So because of all the different
devices and environments,

00:04:23.990 --> 00:04:27.790
there has to be some kind of active
signal processing performed that makes

00:04:27.890 --> 00:04:33.240
the content look as close as possible
to what the author intended as possible.

00:04:33.290 --> 00:04:35.550
We call that operation a color match.

00:04:35.680 --> 00:04:40.200
It may have gamma conversion
and other processes that

00:04:40.200 --> 00:04:43.130
Luke will describe in a moment.

00:04:45.190 --> 00:04:46.760
So what do we mean by
a creative endeavor?

00:04:46.760 --> 00:04:49.100
Here we are in paradise.

00:04:49.250 --> 00:04:52.020
Well,
it's paradise until the cameras come out.

00:04:52.070 --> 00:04:54.990
Then it begins looking like work,
and we have to worry about

00:04:54.990 --> 00:04:56.600
how bright the environment is.

00:04:56.600 --> 00:05:00.860
We have the cinematographer come out,
and then the cinematographer begins

00:05:00.870 --> 00:05:04.520
twisting the knobs and basically
changing things from reality to

00:05:04.530 --> 00:05:06.650
some form of heightened reality.

00:05:07.240 --> 00:05:10.160
And this is the creative thing
that they're trying to capture.

00:05:10.160 --> 00:05:14.720
Now, this isn't then what the camera
records isn't distributed to other

00:05:15.110 --> 00:05:16.410
folks as the finished product.

00:05:16.470 --> 00:05:19.740
Rather, it gets proofed,
and that's what we call

00:05:19.750 --> 00:05:21.140
the authoring intent.

00:05:23.580 --> 00:05:28.790
So that result gets viewed on,
if we're talking about broadcast video,

00:05:28.790 --> 00:05:32.550
broadcast monitor,
in a very specific environment.

00:05:32.560 --> 00:05:37.170
So for broadcast video,
it happens to be 16 lux

00:05:37.170 --> 00:05:41.440
D65 studio environment,
and there's a director

00:05:41.450 --> 00:05:42.780
that's looking at it.

00:05:42.800 --> 00:05:46.430
And that director is making further
tweaks on it until it matches

00:05:46.430 --> 00:05:50.320
the director's idea of what the
finished product should be like.

00:05:50.870 --> 00:05:53.180
And then for video,
only then does it get distributed.

00:05:53.180 --> 00:05:57.700
In this case, it's only intended to
be looked at on a TV.

00:05:59.530 --> 00:06:03.390
And that TV is only intended to
be in a specific environment.

00:06:03.400 --> 00:06:05.140
According to the standards,
it's basically this

00:06:05.200 --> 00:06:06.800
1950s-era living room.

00:06:06.800 --> 00:06:11.230
And in those days, lighting was dimmer,
so it was supposed to be a 16

00:06:11.230 --> 00:06:13.410
lux dim surround environment.

00:06:15.580 --> 00:06:18.200
Now,
modern usage is very different from that.

00:06:18.410 --> 00:06:21.680
We're not looking at our
modern workstations or other

00:06:21.680 --> 00:06:24.550
devices in our living rooms,
our dim living rooms.

00:06:24.930 --> 00:06:30.500
We have big, beautiful, bright displays,
so we have to do something else.

00:06:30.500 --> 00:06:33.500
And there are even more environments.

00:06:33.600 --> 00:06:39.490
We have mobile devices that you
may look at outdoors in sunshine.

00:06:40.020 --> 00:06:43.740
You may be looking at our
devices in dark surround,

00:06:43.740 --> 00:06:45.000
in a theater kind of environment.

00:06:45.000 --> 00:06:48.190
So clearly there has to be something
that makes that content look

00:06:48.190 --> 00:06:51.570
appropriate on these different
devices in different environments.

00:06:51.580 --> 00:06:54.420
And that's where color
management comes in.

00:06:54.420 --> 00:06:57.560
So I have a lot of people who come
to me and they think that color

00:06:57.640 --> 00:06:59.960
management is really this pro feature.

00:06:59.960 --> 00:07:07.010
It's really about just getting very
simple hues looking exactly right,

00:07:07.170 --> 00:07:10.970
things that general people wouldn't
be aware of or don't care about.

00:07:10.980 --> 00:07:14.320
So I like to show them
this to talk about that.

00:07:14.380 --> 00:07:17.080
This is a photo of my daughter.

00:07:17.080 --> 00:07:23.580
The photo is taken in Profoto,
which is a professional color space.

00:07:23.580 --> 00:07:25.450
It's very wide in terms of the gamut.

00:07:25.480 --> 00:07:27.770
Luke will describe in a
moment what that means.

00:07:27.780 --> 00:07:31.710
But suffice it to say that it can
capture very saturated colors.

00:07:31.720 --> 00:07:33.140
It captures a lot of color.

00:07:33.140 --> 00:07:35.900
We're rendering it in Preview.

00:07:35.900 --> 00:07:37.090
Preview is color managed.

00:07:37.160 --> 00:07:40.850
And I think even on this large projector,
you can see that her

00:07:40.850 --> 00:07:42.830
outfit is pretty saturated.

00:07:42.840 --> 00:07:46.770
You can see that there are saturated
colors on her mat and her ball.

00:07:46.780 --> 00:07:50.450
Now, if you were to look at this
photograph in another application

00:07:50.450 --> 00:07:53.600
that isn't color managed,
it may look like this.

00:07:53.620 --> 00:07:54.770
Here we go.

00:07:55.660 --> 00:07:57.600
And here you can see
it's clearly different.

00:07:57.600 --> 00:07:59.930
And I'd say not only is it different,
but it's wrong.

00:07:59.930 --> 00:08:03.960
Her outfit is very dim and washed out.

00:08:04.000 --> 00:08:08.660
Her face doesn't look like
a healthy baby at all.

00:08:08.660 --> 00:08:11.540
The colors, even her ball,
half the ball is supposed to

00:08:11.540 --> 00:08:14.120
be this really vibrant red,
and it looks like this

00:08:14.120 --> 00:08:15.660
dim orange in other case.

00:08:15.660 --> 00:08:19.610
So without color management,
things are just wrong.

00:08:20.040 --> 00:08:22.500
So I'm going to invite
Luke up to the stage,

00:08:22.550 --> 00:08:27.480
and he's going to talk about controlling
color management using ICC profiles.

00:08:27.520 --> 00:08:29.600
Thank you, Ken.

00:08:34.050 --> 00:08:38.950
So a moment ago, Ken gave you an example
of color workflow.

00:08:38.950 --> 00:08:45.040
Color data was acquired by the camera,
viewed and manipulated on the display,

00:08:45.040 --> 00:08:46.860
and then distributed to the user.

00:08:46.860 --> 00:08:52.950
Here's another very similar workflow,
which most of Mac users

00:08:52.950 --> 00:08:55.100
are finding themselves in.

00:08:55.100 --> 00:09:00.850
Most of our users have digital cameras,
have very nice Apple displays,

00:09:00.870 --> 00:09:02.980
and a printer.

00:09:02.980 --> 00:09:08.620
And a typical workflow for them is to
acquire the images from the camera,

00:09:08.620 --> 00:09:14.070
do some elementary or even more
advanced adjustments to their pictures,

00:09:14.070 --> 00:09:14.700
and print them.

00:09:14.700 --> 00:09:19.650
And there is one common theme
between both of those workflows.

00:09:19.650 --> 00:09:24.830
One very professional,
one just user of your application.

00:09:24.840 --> 00:09:29.830
They both want to have a consistent
color appearance across devices.

00:09:30.500 --> 00:09:33.710
So this is where I would like
to introduce the definition

00:09:33.710 --> 00:09:35.280
of color management.

00:09:35.440 --> 00:09:39.520
One of those definitions
says that color management,

00:09:39.520 --> 00:09:42.400
as you can see,
is a controlled conversion between

00:09:42.400 --> 00:09:45.560
different color representations.

00:09:46.140 --> 00:09:50.880
And this very simple scenario in modern
world can be very quickly complicated

00:09:50.880 --> 00:09:52.960
and many other things can be added to it.

00:09:52.960 --> 00:09:58.110
For example,
user has some access to image archives

00:09:58.110 --> 00:10:03.280
that he wants to combine with the
images he just acquired from the camera.

00:10:03.280 --> 00:10:07.280
User has access to the web,
which is at this point almost

00:10:07.380 --> 00:10:09.920
infinite source of color media.

00:10:11.840 --> 00:10:17.030
The user not only wants to view it on
his own specific workstation or computer,

00:10:17.030 --> 00:10:21.660
but also worries about presenting
that on other computers like

00:10:21.690 --> 00:10:24.480
powerful workstations or laptop.

00:10:24.480 --> 00:10:30.170
We have portable devices
like iPhone or iPad.

00:10:30.600 --> 00:10:32.320
Color is also very important here.

00:10:32.320 --> 00:10:36.840
And in addition,
we can add video to the mix,

00:10:36.960 --> 00:10:40.290
which has slightly different
color management requirements,

00:10:40.290 --> 00:10:44.680
but our goal is to make it kind
of uniform and the same for all.

00:10:46.580 --> 00:10:52.940
So when we want to talk about
reproducing color on different devices,

00:10:52.940 --> 00:10:55.640
we need to find a way of
characterizing the color

00:10:56.090 --> 00:10:58.740
capabilities of any of those devices.

00:10:58.860 --> 00:11:02.600
And Ken already mentioned
the term we are using,

00:11:02.600 --> 00:11:07.320
as we call device gamut to
describe those capabilities.

00:11:07.400 --> 00:12:58.300
[Transcript missing]

00:12:58.960 --> 00:13:01.510
Obviously, I cannot do miracles.

00:13:01.520 --> 00:13:04.780
My device, my laptop,
cannot physically reproduce it.

00:13:04.780 --> 00:13:05.960
I have to do something with it.

00:13:06.040 --> 00:13:11.110
In the case of the printer,
I just hit the edge of the gamut.

00:13:11.140 --> 00:13:16.150
So, I can reproduce it a little
bit better than on the display.

00:13:16.160 --> 00:13:19.530
In the case of the display, I have to,
let's say,

00:13:19.670 --> 00:13:26.000
move this color to what is the closest
color in my laptop display gamut.

00:13:26.440 --> 00:13:31.180
and this process we call gamut mapping.

00:13:31.360 --> 00:13:34.250
Very often,
people think that gamut mapping

00:13:34.250 --> 00:13:37.920
can do miracles almost and
reproduce the same color.

00:13:37.920 --> 00:13:38.230
No.

00:13:38.230 --> 00:13:41.330
We are limited to what device can do.

00:13:41.360 --> 00:13:47.700
And that has significant consequences
in terms of organizing your workflow.

00:13:48.510 --> 00:13:51.230
Obviously,
if you want to be proofing your content,

00:13:51.350 --> 00:13:56.350
it is very important to have decent size
gamut on that device because otherwise

00:13:56.350 --> 00:14:01.840
you may be looking at something which is
not correct in terms of original data.

00:14:03.300 --> 00:16:53.700
[Transcript missing]

00:16:54.230 --> 00:16:58.870
So now I'll give Mike back to Ken,
who's talking about

00:16:58.870 --> 00:17:00.060
active color management.

00:17:00.060 --> 00:17:00.880
Thank you, Luke.

00:17:05.090 --> 00:17:10.590
Now we'll talk about what we do on
the desktop and what we do on iOS.

00:17:10.710 --> 00:17:13.300
First thing we're going to talk
about is active color management.

00:17:13.360 --> 00:17:16.740
And active color management
is a dynamic process.

00:17:16.740 --> 00:17:22.520
It's something we apply to every
pixel in real time on every frame.

00:17:22.600 --> 00:17:24.020
So what do we do with these pixels?

00:17:24.020 --> 00:17:28.460
We perform the color match operation
that Luke has been talking about.

00:17:28.550 --> 00:17:34.100
And we go from the source contents
profile space to the destination space

00:17:35.500 --> 00:17:39.680
Possibly with an intermediate space
or a working space in between.

00:17:39.690 --> 00:17:43.750
So that could be two color
matches for each pixel.

00:17:44.390 --> 00:17:47.280
If you're dealing with still images,
then you could probably

00:17:47.280 --> 00:17:50.540
do this on the CPU,
and certainly applications do.

00:17:50.630 --> 00:17:54.840
But if you're doing this dynamically
to anything with animation,

00:17:54.840 --> 00:17:57.340
any kind of video,
any kind of a dynamic application,

00:17:57.340 --> 00:18:02.210
you want to be GPU-based or use some
other form of hardware acceleration.

00:18:03.390 --> 00:18:05.960
On the other hand,
there's targeted color management.

00:18:06.030 --> 00:18:11.250
In that case, we pick one color space,
and the media is matched to

00:18:11.250 --> 00:18:13.900
that space at authoring time.

00:18:14.050 --> 00:18:17.160
There may be hardware involved,
but that hardware is not

00:18:17.170 --> 00:18:18.730
doing color match as per se.

00:18:19.090 --> 00:18:24.670
It's trying to make that display act as
much like the target space as possible.

00:18:25.100 --> 00:18:27.970
And targeted color management
is similar to what the video

00:18:27.970 --> 00:18:33.640
industry has traditionally done,
where they either target traditionally

00:18:33.640 --> 00:18:35.870
SD video or now HD video.

00:18:37.930 --> 00:18:40.150
And this is sort of an
illustration of that.

00:18:40.320 --> 00:18:44.400
The director was proofing on,
I called it a broadcast monitor,

00:18:44.400 --> 00:18:49.310
but really in this illustration
it should be an SD monitor,

00:18:49.310 --> 00:18:54.980
and it's only appropriate
to be viewed on the SD TV.

00:18:57.510 --> 00:19:01.300
So, not surprisingly, on the Mac,
on OS X,

00:19:01.500 --> 00:19:04.090
we're performing active color management.

00:19:04.200 --> 00:19:07.390
Now, the logic is provided by
the ColorSync framework.

00:19:07.580 --> 00:19:11.810
However, there are a number of frameworks
and applications that provide

00:19:11.820 --> 00:19:13.810
GP-accelerated matching.

00:19:13.920 --> 00:19:18.510
Those include the Windows Server,
Core Image, and Core Animation.

00:19:19.250 --> 00:19:23.200
So active color management is
really all about flexibility.

00:19:23.330 --> 00:19:27.860
It allows you to use any content
and view it on any display.

00:19:27.990 --> 00:19:31.270
So certainly on a desktop where
you could have lots of different

00:19:31.270 --> 00:19:34.940
display devices or other forms
of output devices like printers,

00:19:34.940 --> 00:19:42.320
as long as your content was ICC,
basically tagged with an ICC profile,

00:19:42.320 --> 00:19:46.670
and I should say you have an
ICC profile that describes your display,

00:19:46.760 --> 00:19:48.140
then you're good.

00:19:51.280 --> 00:19:56.000
On iOS, we are taking the targeted
color management approach.

00:19:56.060 --> 00:19:59.900
In this case,
we're targeting the sRGB color space.

00:20:00.000 --> 00:20:04.040
So your content is still matched to sRGB,
only this is happening

00:20:04.040 --> 00:20:05.230
earlier in the process.

00:20:05.240 --> 00:20:06.710
It's not happening dynamically.

00:20:06.900 --> 00:20:08.780
It's happening during authoring.

00:20:08.840 --> 00:20:11.880
And at the end of the presentation,
we're going to talk about

00:20:11.880 --> 00:20:13.250
how to author for that.

00:20:13.330 --> 00:20:16.720
So it's happening during
authoring on your Mac,

00:20:16.780 --> 00:20:20.670
running OS X, and not surprisingly,
it's still being managed

00:20:20.930 --> 00:20:22.520
by ColorSync in that case.

00:20:22.570 --> 00:20:24.820
There's another place where
color management could occur,

00:20:24.820 --> 00:20:26.580
and that's during syncing.

00:20:26.680 --> 00:20:30.260
So when you sync content
to your mobile device,

00:20:30.300 --> 00:20:32.940
that's an opportunity to
provide color management.

00:20:32.960 --> 00:20:35.570
And in fact,
iTunes is providing that for you

00:20:35.890 --> 00:20:38.700
when you sync content from iPhoto.

00:20:38.750 --> 00:20:42.920
So for instance, if I have the photo --
the pro photo photo of my

00:20:42.990 --> 00:20:48.780
daughter in my iPhoto library,
when that's synced to my mobile device,

00:20:48.800 --> 00:20:52.430
iTunes is causing that to be
converted to sRGB so it looks

00:20:52.500 --> 00:20:54.680
appropriate on that device.

00:20:54.940 --> 00:20:58.900
There are a lot of advantages
for that for mobile.

00:20:58.900 --> 00:21:02.240
The largest is that it saves
a tremendous amount of power,

00:21:02.330 --> 00:21:06.190
and power extends runtime,
and we all want runtime.

00:21:06.830 --> 00:21:10.540
It also unburdens very valuable
resources like the GPU to

00:21:10.540 --> 00:21:12.820
perform other operations on.

00:21:12.820 --> 00:21:15.620
And one thing that should really
be stressed is that you're getting

00:21:15.620 --> 00:21:17.640
the same high-quality result.

00:21:17.640 --> 00:21:18.850
You're getting the same match.

00:21:18.900 --> 00:21:21.590
It's happening at authoring
time instead of dynamically.

00:21:21.640 --> 00:21:24.200
What you're trading off is flexibility.

00:21:24.200 --> 00:21:29.140
However, you're not taking the display
panel out of your mobile device

00:21:29.140 --> 00:21:31.780
and replacing it with another one.

00:21:33.620 --> 00:21:35.890
So I return to Luke.

00:21:35.890 --> 00:21:39.980
And I'll be back up in a moment to
talk about authoring and verification

00:21:39.980 --> 00:21:41.300
after Luke talks about theory.

00:21:42.660 --> 00:21:43.500
All right, thank you, Ken.

00:21:43.500 --> 00:21:47.680
Color technology,
color management technology

00:21:47.680 --> 00:21:52.400
that we're using in OS X,
as Ken mentioned, is ColorSync.

00:21:52.430 --> 00:21:54.550
Very quickly about ColorSync.

00:21:54.560 --> 00:21:57.270
It consists of several parts.

00:21:57.300 --> 00:22:00.810
Maybe you have heard about
the most critical part,

00:22:00.840 --> 00:22:06.520
creating the color transfer I mentioned
to you and performing number crunching,

00:22:06.550 --> 00:22:11.480
which is called CMM,
which stands for Color Management Module.

00:22:12.660 --> 00:22:20.290
In addition to that mathematical part,
ColorSync has a database that

00:22:20.390 --> 00:22:21.670
we call device integration.

00:22:21.680 --> 00:22:27.900
Every device that is connected to your
Mac will be registered with ColorSync,

00:22:27.900 --> 00:22:32.160
and if the manufacturer
provided factory profiles,

00:22:32.160 --> 00:22:36.060
those will be registered with
ColorSync for usage when needed.

00:22:36.060 --> 00:22:42.570
Also, user can assign custom profiles
to this specific device.

00:22:42.600 --> 00:22:48.060
Also, part of ColorSync are profiles that
we are shipping with the system,

00:22:48.060 --> 00:22:50.260
standard profiles for
different color spaces,

00:22:50.260 --> 00:22:55.110
and user obviously can add his or
her own profiles to that database.

00:22:55.120 --> 00:22:59.000
Since you're developers,
it is maybe interesting detail

00:22:59.070 --> 00:23:02.280
to know that ColorSync provides
the plugin architecture for

00:23:02.390 --> 00:23:06.090
color management modules,
and if you have one that you

00:23:06.090 --> 00:23:09.800
want to use in your application,
there is a specific API to

00:23:09.800 --> 00:23:11.260
invoke it and use it.

00:23:13.410 --> 00:23:19.110
In OS X,
we are trying to provide all across

00:23:19.110 --> 00:23:24.910
color management through all frameworks
that are processing color media.

00:23:24.920 --> 00:23:29.850
We came up with several modern
frameworks to control that.

00:23:29.920 --> 00:23:33.290
Here is the list that
I'll be talking about.

00:23:33.300 --> 00:23:36.840
In addition to that,
the first and most important

00:23:36.840 --> 00:23:42.810
thing for the user needs from your
application is the user interface,

00:23:42.810 --> 00:23:44.290
which is provided by AppKit.

00:23:44.300 --> 00:23:48.400
And AppKit is also
integrated with ColorSync.

00:23:48.400 --> 00:23:51.890
We'll be talking about
details of that in a second.

00:23:52.940 --> 00:23:56.300
Quartz has several different components.

00:23:56.350 --> 00:24:00.700
The most important from the standpoint
of color management is Core Graphics,

00:24:00.740 --> 00:24:08.770
which defines basic objects that allow
us to describe and process color.

00:24:09.590 --> 00:24:12.030
The first one is CG color space.

00:24:12.040 --> 00:24:16.160
Maybe we can talk here for
hours how to define color space,

00:24:16.160 --> 00:24:18.970
but I think this very brief is very good.

00:24:18.980 --> 00:24:23.990
You can think about color space
as an object that allows Quartz

00:24:24.120 --> 00:24:26.830
to interpret your color data.

00:24:26.840 --> 00:24:30.620
And color spaces can be
created many different ways.

00:24:30.620 --> 00:24:34.710
There are a lot of APIs,
and here's one example.

00:24:34.720 --> 00:24:39.360
You can also use a simple call
as create color space with name,

00:24:39.730 --> 00:24:44.210
and the call that you see would
result in creating sRGB color space.

00:24:44.220 --> 00:24:49.100
CG color spaces can be also
created directly from ICC profile.

00:24:49.100 --> 00:24:51.690
Here's the call that does that.

00:24:53.160 --> 00:24:56.090
Once I have color space,
now I can talk about what

00:24:56.180 --> 00:24:59.600
is understood as CG color,
which means I define how

00:24:59.600 --> 00:25:03.850
to interpret the values and
I combine them with the values.

00:25:03.910 --> 00:25:08.100
That is CG color.

00:25:08.210 --> 00:25:11.780
Here's a little sample
code how to create it.

00:25:13.220 --> 00:25:14.930
Next one, very similar concept.

00:25:14.940 --> 00:25:17.820
Once I have the color space
and I have a lot of data,

00:25:17.820 --> 00:25:25.010
which is my image organized as an
array of pixels in rows and columns,

00:25:25.010 --> 00:25:28.130
I know how to interpret those values.

00:25:28.140 --> 00:25:32.270
And here is the call,
which emphasizes the most important

00:25:32.410 --> 00:25:35.200
aspects of creating the image in CG.

00:25:35.200 --> 00:25:41.210
And something new that I was not
talking about yet is CG context.

00:25:41.960 --> 00:25:46.960
It is a concept that
represents drawing destination.

00:25:46.960 --> 00:25:53.090
Once we have, on one part,
we created the color content

00:25:53.090 --> 00:25:57.140
in form of an image or data,
and I want to rasterize the

00:25:57.140 --> 00:25:59.920
render to my destination.

00:25:59.950 --> 00:26:03.050
CG context is the abstract
that encapsulates different

00:26:03.050 --> 00:26:04.620
types of those destinations.

00:26:04.620 --> 00:26:10.820
The most significant difference
between different types of context

00:26:10.820 --> 00:26:14.940
is that there are some that have
their own color space that will

00:26:14.940 --> 00:26:18.480
be attached to your bitmap or to,
for example, to the window.

00:26:18.540 --> 00:26:21.140
And there are those which
really do not require color

00:26:21.140 --> 00:26:25.070
conversion because they are,
as we call them, recording context,

00:26:25.180 --> 00:26:28.060
like PDF,
that allows you to specify many types

00:26:28.060 --> 00:26:34.720
of different types of color data,
or PostScript that will create it

00:26:34.750 --> 00:26:39.300
as a source and will hand off to
the color management in the printer.

00:26:39.780 --> 00:26:41.220
Post-Crip Inter.

00:26:41.310 --> 00:26:45.130
Context, CG context,
is this is really the place where

00:26:45.210 --> 00:26:51.020
automatic color matching happens for you,
for a developer.

00:26:51.090 --> 00:26:55.220
I can, having a context created
with a specific color space,

00:26:55.270 --> 00:27:00.120
I can draw into it
content of many types of,

00:27:00.120 --> 00:27:01.650
in terms of color.

00:27:01.740 --> 00:27:04.650
So, for example,
I can create my sRGB context

00:27:05.030 --> 00:27:07.820
and having a CMYK image,
I can draw it.

00:27:07.880 --> 00:27:11.450
And I can composite that with
monochrome or solid color.

00:27:11.590 --> 00:27:17.590
That's the model that we are
using based on PDF imaging model.

00:27:17.690 --> 00:27:21.740
So, in this situation,
when the color space of the context

00:27:22.000 --> 00:27:27.610
destination is different from my source,
Core Graphics will automatically

00:27:27.680 --> 00:27:31.790
invoke ColorSync and perform
proper color correction.

00:27:32.020 --> 00:27:34.200
As you see,
I mentioned here a reference that

00:27:34.200 --> 00:27:35.960
I would like you to take a look at.

00:27:36.130 --> 00:27:39.870
This is Quartz 2D Programming Guide,
and we also have sample

00:27:39.870 --> 00:27:46.110
code called Image App,
which you can download from

00:27:46.110 --> 00:27:49.940
developer.apple.com that shows
you how to use these objects

00:27:49.940 --> 00:27:49.940
I just mentioned to you.

00:27:50.170 --> 00:27:52.220
At this point,
I would like to step into a

00:27:52.220 --> 00:27:54.250
little bit into the architecture.

00:27:54.370 --> 00:27:58.510
Mostly,
understanding of that will help you to

00:27:58.510 --> 00:28:02.600
perhaps correctly write your application.

00:28:02.740 --> 00:28:08.270
We are talking here about the
backing store of the window.

00:28:08.490 --> 00:28:12.740
In the other systems, on the old versions
of our system as well,

00:28:12.740 --> 00:28:16.960
the contexts were attached
directly to the framebuffer.

00:28:16.960 --> 00:28:20.520
In the recent releases,
we have something that we

00:28:20.680 --> 00:28:22.850
call Window Backing Store.

00:28:22.860 --> 00:28:27.480
And this is where the
context is connected to.

00:28:27.480 --> 00:28:31.900
In default situations,
window context is tagged

00:28:31.900 --> 00:28:34.890
with current display profile.

00:28:35.520 --> 00:28:39.590
And if I have the context attached to it,
I can draw different types of

00:28:39.590 --> 00:28:43.600
images and composite them together,
like sRGB image with

00:28:43.600 --> 00:28:49.080
some dynamic range image,
and even monochrome,

00:28:49.080 --> 00:28:52.090
and come up with something that
will look like this on the stage.

00:28:52.100 --> 00:28:56.450
Very important point here is
that I mentioned that there is

00:28:56.500 --> 00:28:59.010
a place to define a color space.

00:28:59.040 --> 00:29:03.100
By default, it's a current color space,
but for certain cases,

00:29:03.100 --> 00:29:05.470
that color space can be changed.

00:29:05.500 --> 00:29:08.490
to the choice of application.

00:29:08.720 --> 00:29:14.930
And this will have consequences that
I'll be talking about in a second.

00:29:15.200 --> 00:32:54.700
[Transcript missing]

00:32:55.110 --> 00:32:58.500
Next framework,
which is important from the perspective

00:32:58.500 --> 00:33:01.910
of color management's image capture.

00:33:02.310 --> 00:33:06.010
As you can guess,
this framework acquires images

00:33:06.010 --> 00:33:08.140
directly from the cameras and scanners.

00:33:08.140 --> 00:33:12.060
And because images are always
some kind of file format,

00:33:12.060 --> 00:33:15.490
it's obviously mostly based
on image I.O., but has some

00:33:15.510 --> 00:33:18.900
specific characteristic things
for color management that

00:33:18.900 --> 00:33:20.600
I'd like to mention to you.

00:33:20.600 --> 00:33:26.850
So still there are file formats that do
not have any color metric information.

00:33:26.890 --> 00:33:31.250
And in order to process that,
we need to do something about that.

00:33:32.030 --> 00:33:36.950
In the ColorSync device database,
we can keep a profile for that specific

00:33:36.950 --> 00:33:40.580
camera that we know that does not
provide color metric information.

00:33:40.580 --> 00:33:44.490
And ImageCapture will consult
that database if that would be

00:33:44.490 --> 00:33:48.110
the case and assign that profile,
which means create a

00:33:48.110 --> 00:33:51.860
proper CG color space,
and send it back to the application.

00:33:51.860 --> 00:33:58.490
In certain cases, ImageCapture also does
conversion of images for display,

00:33:58.490 --> 00:34:00.000
and I'll talk about this in a second.

00:34:00.000 --> 00:34:01.680
Two major frameworks.

00:34:01.680 --> 00:34:04.620
One of the frameworks parts
of ImageCapture is ImageKit.

00:34:04.620 --> 00:34:10.480
That provides you all UI to
browse all ImageCapture devices,

00:34:10.480 --> 00:34:12.820
their content,
and also display the images.

00:34:12.860 --> 00:34:18.890
So that specific view, IK ImageView,
ImageKit ImageView,

00:34:19.250 --> 00:34:23.930
will perform color management for
you if you want to display the image.

00:34:23.960 --> 00:34:31.420
If another part is more down to
the core of acquiring images,

00:34:31.420 --> 00:34:35.960
it's called ImageCapture Core,
and this one has just classes

00:34:35.960 --> 00:34:38.300
that allows you programmatically
to do the same thing.

00:34:38.300 --> 00:34:43.080
Browse the devices, browse their content,
and acquire images from

00:34:43.080 --> 00:34:45.050
the camera or the scanner.

00:34:45.060 --> 00:34:48.080
The reference I mentioned
here is ImageCapture

00:34:48.110 --> 00:34:50.550
Applications Programming Guide.

00:34:50.800 --> 00:34:54.360
Next framework I'll talk
about is AV Foundation.

00:34:54.420 --> 00:34:58.380
In essence,
it provides very similar functions

00:34:58.380 --> 00:34:59.880
as the previous frameworks.

00:34:59.900 --> 00:35:02.710
It is still based on
core graphics to open,

00:35:02.780 --> 00:35:05.440
display, and save video content.

00:35:05.440 --> 00:35:10.140
It has its own classes that allow
you to do all this functionality,

00:35:10.470 --> 00:35:14.060
but it's a little different
in certain aspects.

00:35:14.170 --> 00:35:17.580
It's very critical that
when using this framework,

00:35:17.580 --> 00:35:24.500
you set properly the output
settings for saving the video.

00:35:24.500 --> 00:35:29.950
Here are a couple of examples of the
keys that you need to specify in your

00:35:29.950 --> 00:35:33.190
settings dictionary when you do that.

00:35:33.200 --> 00:35:35.190
Also,
distinct differences between the two.

00:35:35.440 --> 00:35:40.450
The first difference between the other
frameworks is that CG image will be

00:35:40.540 --> 00:35:45.430
saved as is in terms of color metric
information will be just recorded.

00:35:45.440 --> 00:35:51.600
Using output setting dictionary,
you can have AV Foundation convert

00:35:52.010 --> 00:35:58.150
your source that you acquire to the
format that you desire to be saved.

00:35:59.530 --> 00:36:06.400
What is new in Mountain Lion,
there is a video toolkit which provides

00:36:06.400 --> 00:36:10.780
new concepts of VT pixel transfer
session and VT compression session that

00:36:10.780 --> 00:36:16.260
allows you to dig much deeper into both
color management and processing video.

00:36:17.510 --> 00:36:21.150
And last but not least,
we're talking about AppKit before

00:36:21.150 --> 00:36:24.540
being integrated with ColorSync.

00:36:24.560 --> 00:36:31.090
This is the first thing that is needed in
your application to present the content.

00:36:31.120 --> 00:36:36.780
AppKit automatically creates,
when the window is created,

00:36:36.780 --> 00:36:39.020
this is where color management starts.

00:36:39.080 --> 00:36:43.490
It assigns the proper backing
store to the window that

00:36:43.490 --> 00:36:46.360
resides on a specific display.

00:36:47.910 --> 00:36:52.410
And also, all the little widgets that
you're typically using in your

00:36:52.410 --> 00:36:55.180
window are also color managed.

00:36:55.270 --> 00:36:58.560
What is important to know is
how to bridge between AppKit and

00:36:58.560 --> 00:37:02.390
the frameworks that I mentioned.

00:37:02.470 --> 00:37:07.480
Most likely, you will need the CG context
into which you can draw using the

00:37:07.480 --> 00:37:09.600
frameworks I described to you.

00:37:09.680 --> 00:37:13.200
And here is the call
that accomplishes that.

00:37:13.500 --> 00:37:17.010
As I mentioned, for special cases,
you can set the backing story

00:37:17.010 --> 00:37:18.500
yourself in your application.

00:37:18.530 --> 00:37:19.440
This is the call.

00:37:19.440 --> 00:37:23.470
And one thing that I'd
like to talk about,

00:37:23.470 --> 00:37:28.440
you can also, in a second,
register for display change notification.

00:37:28.480 --> 00:37:32.680
User either can change the profile
going to the system preferences,

00:37:32.790 --> 00:37:35.840
or the window will be moved
from one display to another.

00:37:35.840 --> 00:37:40.950
How to use all these is
shown also in the image app.

00:37:41.670 --> 00:37:45.330
But let's talk about this
display change notification.

00:37:45.340 --> 00:37:51.580
So if I have a window that I draw
into using different kind of media,

00:37:51.580 --> 00:37:55.280
and I'm ready for display,
everything is done,

00:37:55.280 --> 00:37:59.580
the user may decide to move that
window from one display to another.

00:37:59.580 --> 00:38:05.940
In what is happening now,
AppKit realizes that getting notification

00:38:05.940 --> 00:38:11.470
from Windows Server that has happened,
it calls application to draw

00:38:11.590 --> 00:38:13.240
from scratch everything.

00:38:13.240 --> 00:38:17.420
This gives us a chance to do
rematching to the new display.

00:38:17.480 --> 00:38:21.330
So the conclusion for
developer here is that,

00:38:21.390 --> 00:38:24.040
pay attention to that,
if you're caching some information

00:38:24.040 --> 00:38:28.180
that is kind of tied to the first
display you presented your content on,

00:38:28.240 --> 00:38:36.910
you need to discard it and allow for
proper color management to happen.

00:38:37.800 --> 00:38:43.170
So let's put this all together and
see what happens in the application.

00:38:43.290 --> 00:38:48.440
This is a simple application that wants
to acquire the image from the camera.

00:38:48.700 --> 00:38:52.160
So by using Image Capture,

00:38:52.640 --> 00:38:57.460
The object of CG image
will be properly tagged,

00:38:57.460 --> 00:39:00.920
will contain all the color metric
information in terms of color space.

00:39:00.940 --> 00:39:04.600
If the application wants to
draw that image on the screen,

00:39:04.600 --> 00:39:11.010
the only thing it needs to do is
to hand it to Quartz and not to

00:39:11.130 --> 00:39:14.350
worry about what is the current
display at this moment and so forth.

00:39:14.960 --> 00:39:16.590
The Quartz will do all that work.

00:39:16.600 --> 00:39:19.560
We'll consult ColorSync about
finding the proper profile,

00:39:19.560 --> 00:39:22.460
we'll perform color management,
and this image will be

00:39:22.460 --> 00:39:23.540
displayed correctly.

00:39:23.640 --> 00:39:27.100
Very similar situation if
you want to print that image.

00:39:27.100 --> 00:39:31.870
You don't need to really know at this
moment which printer user has selected.

00:39:31.880 --> 00:39:34.540
You hand it to CAPS, our printing system.

00:39:34.550 --> 00:39:39.340
This will find out the proper
profile for the printer,

00:39:39.340 --> 00:39:42.860
convert the data, and print the job.

00:39:43.260 --> 00:39:49.540
Conclusion of this is that OS X is
offering implicit automatic color

00:39:49.540 --> 00:39:53.440
management through the frameworks
which are integrated with ColorSync.

00:39:53.440 --> 00:39:56.860
So in certain situations,
you don't need to do anything

00:39:56.860 --> 00:40:01.380
about color management,
but all the images and devices have

00:40:01.380 --> 00:40:04.520
the profiles associated with them.

00:40:04.520 --> 00:40:07.360
You can dig into that,
extract the information,

00:40:07.360 --> 00:40:11.560
and do some kind of higher-level
operations that would require that.

00:40:12.730 --> 00:40:16.630
Well, besides that,
you still have certain responsibilities.

00:40:16.700 --> 00:40:21.780
If you're creating your own content,
make sure that this is properly tagged,

00:40:21.780 --> 00:40:26.370
that has the calibrated color information
in the images you're creating.

00:40:26.380 --> 00:40:28.780
The contexts are fully specified.

00:40:28.780 --> 00:40:32.620
In terms of CG context,
the only thing we need to is

00:40:32.630 --> 00:40:35.320
to have the proper color space.

00:40:35.340 --> 00:40:38.790
In video, there's a little bit more
details that you have specified.

00:40:38.890 --> 00:40:42.380
Referring that to using
device architecture.

00:40:42.620 --> 00:40:44.400
So, for example,
if you have a device that has

00:40:44.400 --> 00:40:47.590
a color that is color-based,
you can use color-based RGB.

00:40:47.660 --> 00:40:50.620
It's really something we try to
discourage as much as we can.

00:40:50.620 --> 00:40:54.730
This is something which is legacy,
as I was trying to describe to you

00:40:54.730 --> 00:40:56.620
in the previous part of the talk.

00:40:56.620 --> 00:40:57.620
It is meaningless.

00:40:57.620 --> 00:40:59.610
We really don't know
what are those colors.

00:40:59.620 --> 00:41:05.610
So, and when device RGB is
processed by the system,

00:41:05.610 --> 00:41:07.620
we don't know which
device you really mean.

00:41:07.620 --> 00:41:12.580
For some people,
this debate goes for years already.

00:41:12.580 --> 00:41:14.460
It goes to 20 years what to do with that.

00:41:14.630 --> 00:41:17.640
Oh, the device RGB is some
average color space,

00:41:17.640 --> 00:41:19.580
you know, decent display.

00:41:19.580 --> 00:41:22.580
No,
device means I already managed the data.

00:41:22.580 --> 00:41:23.580
Don't touch it.

00:41:23.580 --> 00:41:25.580
So, when this comes as a source,
we really don't know what to do

00:41:25.580 --> 00:41:28.580
and don't expect that it will be
consistent because different frameworks

00:41:28.580 --> 00:41:30.570
make their own decisions about that.

00:41:30.580 --> 00:41:37.580
Besides all those high-level
color-managed frameworks,

00:41:37.580 --> 00:41:41.580
we have one that low-level that
is very important in graphics.

00:41:41.580 --> 00:41:42.530
It's OpenGL.

00:41:42.730 --> 00:41:46.300
By definition,
it doesn't have anything that deals

00:41:46.800 --> 00:41:52.120
with color media in automatic fashion
like the ones I described to you.

00:41:52.540 --> 00:41:57.130
So, if you're using that,
the developer is responsible for

00:41:57.130 --> 00:42:02.870
tagging properly the buffers when
the data processed by the OpenGL will

00:42:02.870 --> 00:42:05.500
be handed off to other frameworks.

00:42:05.500 --> 00:42:08.510
And if there is a color
management required,

00:42:08.800 --> 00:42:09.500
guess what?

00:42:09.500 --> 00:42:12.180
You have to do it yourself.

00:42:13.100 --> 00:44:45.600
[Transcript missing]

00:44:46.120 --> 00:44:49.300
So now I'll turn back to Ken.

00:44:49.300 --> 00:44:50.500
Thank you.

00:44:50.500 --> 00:44:54.030
So now we're going to return
to how to author content.

00:44:54.140 --> 00:44:56.800
We're going to talk about how
do you verify your applications.

00:44:56.890 --> 00:44:58.810
And then finally we're going
to talk about what's new in

00:44:58.810 --> 00:45:02.630
Mountain Lion related to color.

00:45:03.780 --> 00:45:06.060
So we're going to return to our director.

00:45:06.060 --> 00:45:09.840
You recall he was performing
what I call a proofing operation

00:45:09.840 --> 00:45:11.840
on his broadcast monitor.

00:45:11.910 --> 00:45:16.690
For you folk, we're recommending that you
use Apple desktop displays.

00:45:16.770 --> 00:45:22.040
Desktop displays are better than
laptop displays for proofing at

00:45:22.040 --> 00:45:26.140
least because they have a very,
very wide viewing angle.

00:45:26.170 --> 00:45:30.120
Even as good as our laptop
displays are getting with some

00:45:30.120 --> 00:45:34.950
of our announcements this week,
we still suggest desktop displays.

00:45:35.000 --> 00:45:35.890
They're brighter.

00:45:35.890 --> 00:45:38.670
They have a wide color gamut.

00:45:38.880 --> 00:45:42.500
What we don't recommend doing is
using some of the third-party wide

00:45:42.500 --> 00:45:44.600
gamut displays that are available.

00:45:44.640 --> 00:45:48.360
Those things have, in some cases,
a tremendously wide color gamut.

00:45:48.420 --> 00:45:50.060
They're beautiful to look at.

00:45:50.120 --> 00:45:54.650
But unless you folk are very,
very sophisticated developers

00:45:54.660 --> 00:45:58.680
when it comes to color management,
it's very easy to make mistakes.

00:45:58.780 --> 00:46:03.220
With a wide gamut display,
the photo of my daughter could look great

00:46:03.220 --> 00:46:05.700
even in an uncolored managed aspect.

00:46:05.740 --> 00:46:09.900
But then when you got it into your actual
application and saw it on other displays,

00:46:09.940 --> 00:46:11.850
it would look funny.

00:46:14.060 --> 00:46:17.700
So please strive for a
consistent viewing environment.

00:46:17.710 --> 00:46:21.260
Unfortunately,
that means forsaking windows.

00:46:21.280 --> 00:46:25.770
In addition to the big difference
between sunlight and darkness,

00:46:26.030 --> 00:46:28.590
the viewing-- your perceptions
of what you're viewing can

00:46:28.600 --> 00:46:32.130
change really profoundly,
even when the sun ducks

00:46:32.220 --> 00:46:34.920
behind a cloud momentarily.

00:46:36.100 --> 00:46:39.220
It's nice to backlight your displays,
meaning have a light

00:46:39.220 --> 00:46:42.000
illuminate the wall behind you,
and that wall should be some kind

00:46:42.000 --> 00:46:44.740
of a neutral color optimally.

00:46:45.060 --> 00:46:48.220
At the very least,
that reduces eye strain.

00:46:48.460 --> 00:46:50.700
While calibration is
not strictly required,

00:46:50.700 --> 00:46:53.670
as Luke mentioned,
at least for Apple devices,

00:46:53.680 --> 00:46:58.540
the ColorSync database provides
a profile for our displays.

00:46:58.540 --> 00:47:01.880
You still may want to calibrate,
and we provide a software

00:47:01.880 --> 00:47:03.840
calibrator with the system.

00:47:03.960 --> 00:47:06.380
So authoring content.

00:47:06.580 --> 00:47:10.100
It's imperative to use
color-managed authoring tools.

00:47:10.160 --> 00:47:16.800
All of Apple's tools are color-managed,
and some third-party tools are managed.

00:47:16.900 --> 00:47:20.000
Usually when they are managed,
they're very sophisticated,

00:47:20.040 --> 00:47:23.570
and you as developers and artists really
have to take responsibility to make

00:47:23.570 --> 00:47:25.720
sure they're configured appropriately.

00:47:25.720 --> 00:47:29.670
The most straightforward
configuration would be to use

00:47:29.670 --> 00:47:32.160
basically sRGB for everything.

00:47:32.180 --> 00:47:35.390
Now,
your source content can be in any format,

00:47:35.400 --> 00:47:39.540
in any color space you like,
provided it's properly tagged.

00:47:39.540 --> 00:47:43.670
But when you're authoring,
you want to author in sRGB.

00:47:43.910 --> 00:47:45.330
That's actually a working space.

00:47:45.370 --> 00:47:49.460
It means that even if your content
is wider gamut and your display

00:47:49.460 --> 00:47:53.310
can display wider than sRGB gamut,
the application is going to be

00:47:53.560 --> 00:47:55.570
narrowing that and mapping that to sRGB.

00:47:55.720 --> 00:47:59.650
So, you want to use sRGB,
which is where you want to

00:47:59.740 --> 00:48:01.980
eventually export it to.

00:48:01.980 --> 00:48:01.980
So, of course,
you want to export to sRGB.

00:48:02.740 --> 00:48:06.480
For certain circumstances,
if you have very high-value content and

00:48:06.480 --> 00:48:10.180
your application's running on a Mac,
and of course your

00:48:10.190 --> 00:48:13.050
application's color managed,
you may want to keep it

00:48:13.200 --> 00:48:14.790
in its native format.

00:48:15.500 --> 00:48:18.000
So we've been talking a
lot about tagging content.

00:48:18.030 --> 00:48:20.400
I want to make sure it's
really obvious what that means.

00:48:20.460 --> 00:48:24.320
Pretty much that's attaching
meta information to your content

00:48:24.760 --> 00:48:28.900
that makes it self-describing,
at least from a color perspective.

00:48:29.230 --> 00:48:33.880
For still images, that's the ICC profile
that Luke described.

00:48:34.150 --> 00:48:38.300
For video,
it's this construct we call an NCLC that

00:48:38.300 --> 00:48:41.380
describes the nature of the video space.

00:48:41.480 --> 00:48:45.400
Sometimes for some formats,
there's basically bits in the

00:48:45.400 --> 00:48:49.940
header or something like that
that describes color spaces.

00:48:50.010 --> 00:48:52.860
Programmatically,
your image buffers may be

00:48:52.930 --> 00:48:56.170
tagged with a CG color space,
and that's an opaque data

00:48:56.170 --> 00:49:00.510
structure that actually contains
an ICC profile internally.

00:49:01.020 --> 00:49:07.790
In terms of tagging in Mac OS X,
you should know that Apple tools will

00:49:07.800 --> 00:49:10.500
automatically tag content they generate.

00:49:10.540 --> 00:49:13.180
But that's not necessarily
true of other tools.

00:49:13.380 --> 00:49:16.760
So again, as developers and artists,
it's your responsibility to

00:49:16.760 --> 00:49:21.260
make sure that all your content
is tagged and looks correct.

00:49:21.300 --> 00:49:23.060
And we'll be talking about that.

00:49:23.090 --> 00:49:28.450
I'm going to run through three tools
that you can use really quickly.

00:49:29.750 --> 00:49:32.820
So the first I'm sure
you've all used is Preview.

00:49:32.940 --> 00:49:35.380
Preview is color managed, of course,
and it's a great tool

00:49:35.470 --> 00:49:38.180
for opening your content,
making sure that it looks correct.

00:49:38.280 --> 00:49:41.560
If you bring up the inspector,
you can actually look and make

00:49:41.570 --> 00:49:43.600
sure that there's a tag attached.

00:49:43.600 --> 00:49:47.250
That's the best thing because
you could be looking at untagged

00:49:47.260 --> 00:49:50.970
content and it won't be obvious
if it was tagged or untagged.

00:49:51.500 --> 00:49:53.500
And there's a subtle aspect to that, too.

00:49:53.500 --> 00:49:56.500
Untagged content may look right.

00:49:56.720 --> 00:50:00.180
Even non-color managed content may look
correct on your particular display,

00:50:00.600 --> 00:50:04.490
but it's almost guaranteed to look
different on everybody else's display.

00:50:04.500 --> 00:50:07.560
Color management not only
makes things look correct,

00:50:07.610 --> 00:50:09.500
but it makes them consistent.

00:50:09.760 --> 00:50:13.110
What some of you may not know
is that under the Tools menu,

00:50:13.110 --> 00:50:17.850
there's an Assign Profile command,
and that allows you to basically

00:50:18.360 --> 00:50:20.940
set the color space for an image.

00:50:21.010 --> 00:50:22.800
And this is the tagging operation.

00:50:22.910 --> 00:50:27.080
Now, this doesn't change the pixel values
in your buffer -- in your file,

00:50:27.080 --> 00:50:27.650
rather.

00:50:27.730 --> 00:50:31.510
What it does do is it changes the meta
information that's associated with it.

00:50:31.650 --> 00:50:35.900
It tells the Color Management System how
to render those pixels.

00:50:37.950 --> 00:50:41.790
So next up is the ColorSync utility,
and it's a very powerful utility.

00:50:41.800 --> 00:50:44.180
I'm going to go through four
things that you can do with it.

00:50:44.390 --> 00:50:47.220
The first is, again,
what we just talked about in preview.

00:50:47.220 --> 00:50:50.040
You can assign a profile to image data.

00:50:50.040 --> 00:50:53.320
But in addition to that,
you can perform a new operation,

00:50:53.320 --> 00:50:54.660
a match operation.

00:50:54.660 --> 00:50:57.840
And this is an operation that
actually modifies the pixels.

00:50:58.610 --> 00:51:02.540
So for instance,
if I had my daughter's Profoto image,

00:51:02.620 --> 00:51:05.840
that wide gamut image we saw earlier,
in ColorSync,

00:51:05.890 --> 00:51:08.400
I could cause it to be matched to sRGB.

00:51:08.440 --> 00:51:12.960
That means all the pixel values will be
converted to sRGB and saved in the file.

00:51:12.960 --> 00:51:18.820
And then the file will then have an
sRGB ICC profile associated with it.

00:51:21.770 --> 00:51:27.600
A pretty fun thing that it'll do is it'll
allow you to compare ICC profiles in 3D.

00:51:27.600 --> 00:51:31.550
What wasn't obvious from Luke's
presentation earlier is that

00:51:31.550 --> 00:51:33.680
triangular gamut that you saw.

00:51:33.680 --> 00:51:36.460
That's actually not actually 2D.

00:51:36.460 --> 00:51:37.630
In fact, it's 3D.

00:51:37.640 --> 00:51:41.200
And what we're looking at in
the triangle is actually a 2D

00:51:41.200 --> 00:51:43.360
projection of that 3D space.

00:51:43.360 --> 00:51:46.650
So ColorSync will allow you
to turn the gamut around and

00:51:46.710 --> 00:51:48.900
actually see what shape it's in.

00:51:49.460 --> 00:51:52.320
And where that becomes
useful is comparing gamuts.

00:51:52.400 --> 00:51:54.650
So for instance,
if you want to figure out if all

00:51:54.650 --> 00:51:58.140
the colors in a certain image
in a certain color space can be

00:51:58.140 --> 00:52:02.510
represented in another color space,
you can compare both of those in 3D

00:52:02.790 --> 00:52:05.710
and you can spin the result around
and you can see if any stick out.

00:52:05.800 --> 00:52:08.960
If any colors stick out,
those are colors that cannot be

00:52:08.960 --> 00:52:12.700
represented in that second color space.

00:52:13.630 --> 00:52:17.870
Then finally, for ColorSync,
there is actually a calculator that

00:52:17.870 --> 00:52:19.740
allows you to perform color math.

00:52:19.900 --> 00:52:23.700
And this is actually how Luke came up
with those RGB values that you saw.

00:52:23.860 --> 00:52:28.220
How do you figure out what a
value in Profoto is in sRGB?

00:52:28.360 --> 00:52:33.420
And that may be useful for you if
you're authoring RGB values for,

00:52:33.540 --> 00:52:35.500
let's say, GL rendering,
and you want it to match

00:52:35.510 --> 00:52:37.060
something that's color managed.

00:52:37.160 --> 00:52:42.420
It may also be useful for creating
values for HTML or for the web.

00:52:44.390 --> 00:52:48.680
So we've had a color profile
automator action for some time.

00:52:48.740 --> 00:52:51.980
This allows you to set
an NCLC tag on video.

00:52:51.980 --> 00:52:53.770
It allows you to tag video.

00:52:53.930 --> 00:52:58.140
Whereas previously it only allowed
you to tag video files that

00:52:58.230 --> 00:53:02.660
came from true video sources,
in Mountain Lion we've added the

00:53:02.720 --> 00:53:07.790
provision that allow you to add
tags that describe RGB-based data.

00:53:07.990 --> 00:53:11.230
For you QuickTime users out there,
you may remember things

00:53:11.250 --> 00:53:12.950
like the animation codec.

00:53:13.060 --> 00:53:18.200
So this way we bring animation
into QuickTime animation codec

00:53:18.230 --> 00:53:19.900
into the color-managed world.

00:53:19.930 --> 00:53:25.860
And there's a new P22 phosphor
that actually describes the old

00:53:26.000 --> 00:53:29.160
color CRTs that were used on Macs.

00:53:30.300 --> 00:53:34.790
Sips is a command line tool that
allows you to perform batch processing.

00:53:34.940 --> 00:53:38.320
So if you have a whole
library full of maybe a 10,

00:53:38.320 --> 00:53:44.010
100, 1,000 images that you want to tag,
this allows you to do it as a batch.

00:53:44.200 --> 00:53:48.190
In this example,
we're doing a match to sRGB.

00:53:48.310 --> 00:53:50.990
But if you read the man page,
you'll find out that it's a very

00:53:51.000 --> 00:53:54.230
capable tool and it can do many,
many things.

00:53:55.690 --> 00:53:58.830
So how do we evaluate the results?

00:53:58.930 --> 00:54:01.840
There are three techniques I'm
going to describe quickly to you.

00:54:01.910 --> 00:54:07.830
They involve using special tricks,
let's say, special test patterns,

00:54:07.930 --> 00:54:11.790
special profiles that you can use,
and special content.

00:54:12.540 --> 00:54:14.220
So we begin with this image.

00:54:14.350 --> 00:54:19.400
It's actually a modified
version of the SMPTE color bars.

00:54:19.600 --> 00:54:22.980
These things are available
in TechNote that's at the

00:54:23.070 --> 00:54:25.100
end of the presentation.

00:54:25.230 --> 00:54:27.800
Here we're rendering it
in QuickTime Player 10.

00:54:27.870 --> 00:54:30.570
We're reading the value
back in digital color meter,

00:54:30.570 --> 00:54:33.940
and we're looking at the 75% white value.

00:54:34.050 --> 00:54:40.260
So 75% of an 8-bit value, 8-bit values,
max values 255 is 191.

00:54:40.560 --> 00:54:44.440
Reading the value back,
we're reading back 198, 198, 198,

00:54:44.570 --> 00:54:47.200
not 191, 191, 191.

00:54:47.280 --> 00:54:49.620
There's color management involved.

00:54:49.770 --> 00:54:52.590
Read the TechNote for more details.

00:54:53.740 --> 00:54:55.810
Another technique,
and this is an extraordinarily

00:54:55.810 --> 00:54:59.480
powerful technique,
is to use what we call a trick profile.

00:54:59.640 --> 00:55:02.270
An example of that is the BGR profile.

00:55:02.390 --> 00:55:07.280
It's a profile that purposely
swaps the red and blue channels

00:55:07.400 --> 00:55:09.320
to make things look really funny.

00:55:09.460 --> 00:55:12.050
So what you can do is you
can take that profile,

00:55:12.180 --> 00:55:15.320
you can copy it to your
ColorSync profiles directory,

00:55:15.470 --> 00:55:18.200
and then when you bring up
the display preference pane,

00:55:18.210 --> 00:55:19.320
you can select it.

00:55:19.830 --> 00:55:22.660
And the object is to make
things look really strange.

00:55:22.790 --> 00:55:26.240
The things that look strange are things
that we know to be color managed.

00:55:26.320 --> 00:55:31.160
So in this case, we've brought up Safari,
and we can see that the tag

00:55:31.160 --> 00:55:34.490
content is color managed,
which is a great thing.

00:55:34.500 --> 00:55:38.410
And in the course of
creating this presentation,

00:55:38.410 --> 00:55:43.290
I looked at an early version of
the beta and saw that there's an

00:55:43.290 --> 00:55:45.420
area that wasn't color managed.

00:55:45.490 --> 00:55:49.340
When you zoom using the
two-finger pinch operation,

00:55:49.340 --> 00:55:52.660
you can see that images
stop being color managed.

00:55:52.660 --> 00:55:56.660
And then here's an animation
that sort of depicts that.

00:55:56.660 --> 00:55:59.480
So you can see that it looks funny,
it's color managed,

00:55:59.520 --> 00:56:04.090
and as soon as we begin zooming,
it pops back to looking normal,

00:56:04.100 --> 00:56:04.460
which is not a good thing.

00:56:04.460 --> 00:56:05.900
In this case, it's bad.

00:56:05.910 --> 00:56:08.460
And I slowed the zoom way
down so you could see it.

00:56:08.510 --> 00:56:11.840
And then when it finally stops,
it flips back to looking funny,

00:56:11.840 --> 00:56:12.680
which is good.

00:56:12.810 --> 00:56:19.470
So this technique is wonderful for
really sussing out some small mistakes.

00:56:20.350 --> 00:56:21.660
Using trick content.

00:56:21.780 --> 00:56:25.920
So this is special content with
a special trick embedded profile.

00:56:25.920 --> 00:56:28.630
So there are a couple of places
where color management can be broken.

00:56:28.640 --> 00:56:33.530
It can be broken at the side where
you're matching to the display device,

00:56:33.790 --> 00:56:35.600
but it could also be
broken on the source side.

00:56:35.820 --> 00:56:39.490
So if we look at this content in
a non-color managed application,

00:56:39.490 --> 00:56:41.690
we can see that it's clearly wrong.

00:56:41.690 --> 00:56:42.800
It says as much.

00:56:42.800 --> 00:56:47.460
If you look at it in Preview,
which is a color managed application,

00:56:47.460 --> 00:56:48.400
we can see that it's correct.

00:56:48.500 --> 00:56:51.100
And you can use this content
in your own applications,

00:56:51.100 --> 00:56:51.480
too.

00:56:51.480 --> 00:56:55.440
This content's a part of the image
app sample that Luke mentioned.

00:56:58.380 --> 00:57:02.540
So finally, what's new in Mountain Lion?

00:57:02.670 --> 00:57:06.840
So as Luke mentioned,
don't use Device RGB,

00:57:07.020 --> 00:57:10.240
but what we've done is we've
standardized what Device RGB does.

00:57:10.380 --> 00:57:14.130
Now Device RGB always stands in as sRGB.

00:57:14.290 --> 00:57:17.830
You may not be using Device RGB,
but it could be embedded in

00:57:17.830 --> 00:57:22.290
legacy content that's out there,
so just be aware of that.

00:57:22.910 --> 00:57:27.020
QuickTime Player 10 now
color manages all content,

00:57:27.180 --> 00:57:31.000
whereas previously it only
color managed tag content.

00:57:31.000 --> 00:57:35.060
What it does is it automatically
computes an NCLC based on the

00:57:35.060 --> 00:57:39.200
assumption that it was video
that was exported via QuickTime.

00:57:39.340 --> 00:57:44.830
So this fixes a big issue where
previously if you exported

00:57:44.830 --> 00:57:50.000
classic content to a modern
content type like HI264,

00:57:50.220 --> 00:57:52.270
the two used to look different.

00:57:52.410 --> 00:57:53.980
Now they will no longer look different.

00:57:56.020 --> 00:57:58.440
So if you don't like the
assumptions that we make,

00:57:58.550 --> 00:58:03.450
by all means go and tag your content
to make the assumption permanent.

00:58:04.100 --> 00:58:07.780
Finally, Final Cut,
not part of the operating system but

00:58:07.780 --> 00:58:10.800
it was released in the last year,
is now color managed.

00:58:10.890 --> 00:58:14.840
So whereas previously applications,
excuse me, video that was authored

00:58:14.840 --> 00:58:18.510
in Final Cut would look
different when played in

00:58:18.510 --> 00:58:22.680
QuickTime that was color managed,
now they look identical.

00:58:22.940 --> 00:58:27.100
So just to review very quickly,
color management is extremely powerful,

00:58:27.230 --> 00:58:29.240
but the verification can be subtle.

00:58:29.350 --> 00:58:33.490
Be sure you author for sRGB,
make sure all your content's tagged,

00:58:33.550 --> 00:58:37.000
and use these techniques
to verify your results.

00:58:39.120 --> 00:58:43.560
You can get more information
at these sources.

00:58:43.770 --> 00:58:45.460
These related sessions
have already passed,

00:58:45.580 --> 00:58:47.760
but be sure to check them out online.