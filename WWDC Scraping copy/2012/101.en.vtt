WEBVTT

00:00:10.420 --> 00:00:14.880
Hello everybody and welcome to WWDC 2012.

00:00:14.950 --> 00:00:17.900
I'm very happy to be here
and see you all here.

00:00:17.900 --> 00:00:20.060
It's a big room.

00:00:20.220 --> 00:00:24.640
So I hope you like what you saw
this morning in the keynote.

00:00:24.960 --> 00:00:28.280
There was a lot of new announcements,
lots of new hardware

00:00:28.670 --> 00:00:31.130
and the new MacBook Pro.

00:00:31.130 --> 00:00:34.040
Wow, those are great machines.

00:00:35.120 --> 00:00:40.940
We also announced a lot
of new features in OS X.

00:00:41.020 --> 00:00:43.300
There was like 200 new features in OS X.

00:00:43.410 --> 00:00:46.570
And I'm not going to go
through again this afternoon,

00:00:46.580 --> 00:00:48.960
but lots of new features
in Mountain Lion,

00:00:49.260 --> 00:00:52.150
the new OS X.

00:00:52.270 --> 00:00:55.740
Same thing with iOS,
a lot of new features,

00:00:55.740 --> 00:00:58.340
I think we have 200 new features.

00:00:58.340 --> 00:01:00.630
And here again,
I'm not going to go through

00:01:00.670 --> 00:01:02.740
again to all those features,
but those are very great

00:01:02.740 --> 00:01:07.320
announcements and I'm sure you're
going to love those two OSes.

00:01:07.320 --> 00:01:10.550
So for you developers,
and I went through last time,

00:01:10.630 --> 00:01:15.250
I counted them one by one,
and there were more than 3,000 new APIs.

00:01:15.250 --> 00:01:17.180
I stopped at 3,000.

00:01:17.180 --> 00:01:22.470
But there are like 3,000 new
APIs for you to discover.

00:01:22.470 --> 00:01:27.440
This is what this week is about,
to dive into those new APIs and

00:01:27.440 --> 00:01:32.330
learn and see what you can use
for your new product or when you

00:01:32.530 --> 00:01:35.590
update your current application.

00:01:36.610 --> 00:01:45.030
So with iOS and OS X,
we have two huge ecosystems.

00:01:45.090 --> 00:01:50.970
Ecosystems built on top of the two
leading platforms in the industry.

00:01:51.320 --> 00:01:54.810
At Apple, we care about the complete
experience from hand to hand.

00:01:54.940 --> 00:02:00.280
So we care about the hardware,
the software, the services, the content,

00:02:00.520 --> 00:02:01.720
and even the accessories.

00:02:01.720 --> 00:02:04.630
We want the user to experience
the complete experience,

00:02:04.630 --> 00:02:06.950
have the complete experience
from hand to hand.

00:02:08.470 --> 00:02:11.270
You developers are also
part of this ecosystem.

00:02:11.290 --> 00:02:15.070
You're taking advantage of this huge
ecosystem to be able to sell your

00:02:15.610 --> 00:02:17.940
application to lots of customers.

00:02:17.940 --> 00:02:23.210
And so you are improving our
ecosystem and you are helping

00:02:23.210 --> 00:02:25.800
us to be so successful.

00:02:26.110 --> 00:02:29.160
Some numbers were shown this morning.

00:02:29.380 --> 00:02:32.780
650,000 apps, that's huge.

00:02:32.780 --> 00:02:35.660
I've been at Apple for
more than 20 years,

00:02:35.660 --> 00:02:39.080
and believe me, this is huge.

00:02:39.220 --> 00:02:44.180
30 billion downloads,
that's also a humongous number.

00:02:44.200 --> 00:02:48.480
And 400 million store accounts.

00:02:48.520 --> 00:02:52.880
That's 400 million potential
customers for your application.

00:02:52.880 --> 00:02:55.750
So a lot of customers.

00:02:56.280 --> 00:03:01.520
So what we want to do this afternoon
is step back a little bit and we

00:03:01.520 --> 00:03:03.700
want to give you 10 action items.

00:03:03.720 --> 00:03:07.870
10 things that you should be doing
in your next application or when you

00:03:07.870 --> 00:03:09.960
upgrade your current application.

00:03:09.960 --> 00:03:13.370
10 things that we really
care about because we're

00:03:13.370 --> 00:03:16.800
spending a lot of resources,
a lot of time, a lot of effort on.

00:03:16.800 --> 00:03:20.350
And our customers too want those
things in your application.

00:03:20.360 --> 00:03:24.260
So we're going to go through
those 10 action items,

00:03:24.260 --> 00:03:27.760
take notes,
there's going to be a quiz at the end.

00:03:28.340 --> 00:03:31.390
So let's start.

00:03:32.730 --> 00:03:35.020
Number one: Design.

00:03:35.020 --> 00:03:40.850
So design is something we deeply
care about at Apple in our hardware,

00:03:40.870 --> 00:03:41.590
in our software.

00:03:41.720 --> 00:03:43.900
Design is part of our DNA.

00:03:44.240 --> 00:03:47.400
We spend a lot of time
designing our application,

00:03:47.400 --> 00:03:48.600
designing our hardware.

00:03:48.850 --> 00:03:50.660
This is what we are all about.

00:03:50.660 --> 00:03:53.720
So for you developers, how does it start?

00:03:53.720 --> 00:03:55.160
It starts with this big idea.

00:03:55.160 --> 00:03:59.290
"Oh my god, this huge idea is going to
be fantastic." And woof,

00:03:59.430 --> 00:04:03.160
you go and start typing
code and writing code.

00:04:03.220 --> 00:04:06.880
And there is a big missing step here.

00:04:06.940 --> 00:04:10.840
It is that you need to look at
the design for your application.

00:04:10.940 --> 00:04:15.330
There is a famous quote that says,
"Genius is 1% inspiration and

00:04:15.330 --> 00:04:19.520
99% perspiration." So your
idea is really the 1% here.

00:04:19.880 --> 00:04:23.240
The rest is how you're going to
deliver your idea to your customers.

00:04:23.350 --> 00:04:25.010
And this is what's important.

00:04:26.710 --> 00:04:27.300
Design.

00:04:27.310 --> 00:04:28.580
What is this about?

00:04:28.810 --> 00:04:31.750
We can define three types of design.

00:04:31.860 --> 00:04:34.800
There is the interaction design,
the implementation design,

00:04:35.300 --> 00:04:36.600
and the visual design.

00:04:36.600 --> 00:04:40.550
And there are not three steps you can do,
one, two, three, and you're done,

00:04:40.560 --> 00:04:41.590
and you move on.

00:04:41.610 --> 00:04:45.670
This is something that is going
to evolve during the lifetime,

00:04:45.730 --> 00:04:46.600
during your development cycle.

00:04:46.670 --> 00:04:49.140
And they are all
interacting with each other.

00:04:49.140 --> 00:04:53.550
You change the interaction design,
it's going to change your implementation,

00:04:53.600 --> 00:04:55.500
obviously, it may change your visual.

00:04:55.600 --> 00:04:59.080
So they are all working
dependent on each other,

00:04:59.160 --> 00:05:02.500
and you have to constantly
make them evolve.

00:05:02.500 --> 00:05:07.430
So let's briefly describe
what I mean here.

00:05:07.590 --> 00:05:12.100
The interaction design is all about
shaping your application for people use.

00:05:12.220 --> 00:05:15.500
It means making it efficient, engaging,
intuitive.

00:05:15.600 --> 00:05:20.500
If you know the expression "look and
feel", it's a feel in look and feel.

00:05:20.640 --> 00:05:26.500
You don't want your user to
have to read 300 pages manual.

00:05:26.500 --> 00:05:29.500
It's obvious,
but we see examples of that.

00:05:29.500 --> 00:05:34.500
We have great documentation at Apple with
the human interface guidelines.

00:05:34.500 --> 00:05:37.600
There is one for OS X and one for
iOS because the interaction is

00:05:37.600 --> 00:05:39.480
obviously not exactly the same.

00:05:39.500 --> 00:05:41.110
So read those documents.

00:05:41.110 --> 00:05:44.450
It's almost mandatory for
you to read those documents.

00:05:44.520 --> 00:05:49.470
Spend time understanding how you can
implement the best interaction possible.

00:05:51.540 --> 00:05:54.800
The second type of design,
the second aspect of design

00:05:54.800 --> 00:05:56.360
is the implementation design.

00:05:56.490 --> 00:05:59.650
And here, I'm sure there are a lot of
engineers in this room today,

00:05:59.740 --> 00:06:03.440
this is probably where you're going
to be spending most of your time.

00:06:03.750 --> 00:06:06.730
This is about finding the
right technology for your idea,

00:06:06.960 --> 00:06:10.080
the right architecture,
figuring out the feature set,

00:06:10.090 --> 00:06:13.930
looking at performance,
plan for your resources, the people,

00:06:13.930 --> 00:06:17.860
the time, all those things that
are key to be successful.

00:06:17.950 --> 00:06:19.860
It's also the time to
make the right trade-offs.

00:06:19.860 --> 00:06:23.260
You may have this grandiose idea,
but it turns out that the

00:06:23.260 --> 00:06:26.370
technology is not there,
or you won't have time to do it,

00:06:26.530 --> 00:06:29.660
so this is the time to figure
out what you can do in the

00:06:29.790 --> 00:06:31.910
time you have to go to market.

00:06:32.580 --> 00:06:36.020
Finally, the visual design.

00:06:36.270 --> 00:06:39.000
This is about making your
application beautiful and unique,

00:06:39.000 --> 00:06:42.630
giving the perfect
experience to your customers.

00:06:43.140 --> 00:06:45.460
This is about choosing the
visual elements that are going

00:06:45.460 --> 00:06:46.970
to make your application unique.

00:06:47.090 --> 00:06:50.660
The right typography, the right color,
the right patterns.

00:06:50.750 --> 00:06:54.000
Everything is going to make
a memorable experience.

00:06:54.400 --> 00:06:57.700
So, it may sound obvious,
but you need to think about those things

00:06:57.800 --> 00:07:03.300
and figure out if you are going through
this whole cycle for your application.

00:07:03.300 --> 00:07:06.800
Skimping on design,
you won't get what you want at the end.

00:07:06.800 --> 00:07:10.300
You may have this great idea,
but you won't have any success.

00:07:10.370 --> 00:07:13.120
So this is about design,
your first action item.

00:07:13.680 --> 00:07:16.300
Don't skimp on design.

00:07:17.030 --> 00:07:21.880
The number two action
item is about iCloud.

00:07:21.940 --> 00:07:24.180
So iCloud is Apple Cloud Service.

00:07:24.250 --> 00:07:26.630
The idea is very simple.

00:07:26.820 --> 00:07:28.990
We want a customer to
have all their documents,

00:07:29.000 --> 00:07:33.260
all their stuff up in the cloud,
and they can access it wirelessly

00:07:33.260 --> 00:07:35.060
anywhere on any devices.

00:07:35.100 --> 00:07:37.860
That's the goal of iCloud.

00:07:38.480 --> 00:07:40.970
iCloud was introduced last year.

00:07:41.100 --> 00:07:43.740
It's integrated in OS X and iOS.

00:07:44.040 --> 00:07:46.260
It's a free service,
and it's simple and easy

00:07:46.260 --> 00:07:49.020
for our user to use.

00:07:49.410 --> 00:07:52.620
As I said,
we are integrating iCloud in all

00:07:52.620 --> 00:07:56.100
our applications and services.

00:07:56.240 --> 00:08:00.530
On iOS, it's in the mail, calendar,
address book, it's in backup,

00:08:00.710 --> 00:08:07.280
it's in the store, in the music store,
we announced the new shared photo stream,

00:08:07.640 --> 00:08:08.700
it's in iMessage.

00:08:08.800 --> 00:08:13.090
So we are including iCloud everywhere.

00:08:13.190 --> 00:08:16.500
We are integrating iCloud everywhere.

00:08:16.620 --> 00:08:19.100
And on both iOS and OS X.

00:08:19.180 --> 00:08:24.700
As of March 2012,
we had 125 million iCloud users.

00:08:24.750 --> 00:08:30.500
That's 125 million reasons for you to
include iCloud in your application.

00:08:30.660 --> 00:08:36.420
Because you want our customers to
experience the same thing when they use

00:08:36.420 --> 00:08:38.210
our apps than when they use your app.

00:08:38.430 --> 00:08:41.700
They're going to expect your
app to integrate with iCloud.

00:08:41.700 --> 00:08:44.700
It's a free service,
they see it available on our apps.

00:08:45.050 --> 00:08:46.300
Why not in your apps?

00:08:46.360 --> 00:08:51.900
So you need to... You need to
integrate iCloud into your app.

00:08:51.900 --> 00:08:53.900
So what does that mean
practically for you?

00:08:54.120 --> 00:08:55.890
It means one thing.

00:08:56.000 --> 00:08:58.990
Integrate with iCloud storage.

00:08:59.570 --> 00:09:03.500
and we have three kinds of iCloud
storage for you to choose depending on

00:09:03.500 --> 00:09:05.660
how your application is architecture.

00:09:05.660 --> 00:09:09.920
We have document storage,
core data storage and key value storage.

00:09:09.920 --> 00:09:13.610
Three aspects of the same feature
depending on what kind of data

00:09:13.750 --> 00:09:15.840
your application manipulates.

00:09:15.920 --> 00:09:19.260
So let's go through them quickly.

00:09:19.300 --> 00:09:20.800
iCloud document storage.

00:09:20.970 --> 00:09:23.060
This is for user visible documents.

00:09:23.100 --> 00:09:26.860
If you are manipulating documents,
this is probably where you should start.

00:09:26.960 --> 00:09:31.390
The idea is to have all your documents,
every edit that a user makes to one

00:09:31.390 --> 00:09:34.820
of his documents available everywhere.

00:09:35.050 --> 00:09:41.610
Typical example of application that
use iCloud document storage is iWork.

00:09:41.610 --> 00:09:46.510
And we had a demo this morning of
Pages using iCloud document storage.

00:09:46.700 --> 00:09:50.850
This is a great example of an
application that's the typical

00:09:50.850 --> 00:09:55.440
example of an application that
can use iCloud document storage.

00:09:56.260 --> 00:10:01.720
We have another type of iCloud storage,
it's Core Data Storage.

00:10:01.720 --> 00:10:04.650
As the name indicates,
this is for applications

00:10:04.650 --> 00:10:06.880
that implement Core Data.

00:10:06.880 --> 00:10:10.900
If you have a need for a
database in your application,

00:10:10.900 --> 00:10:13.860
I really encourage you
to go look at Core Data.

00:10:13.860 --> 00:10:18.130
So if you have a Core Data application,
you should look at

00:10:18.130 --> 00:10:20.820
iCloud Core Data Storage.

00:10:20.820 --> 00:10:24.190
This makes using iCloud Storage very,
very, very easy.

00:10:24.400 --> 00:10:27.340
Here we don't push the
entire database to the cloud,

00:10:27.420 --> 00:10:30.350
but we sync records and
changes to the database.

00:10:30.500 --> 00:10:33.460
It's very efficient and very,
very easy to integrate

00:10:33.460 --> 00:10:34.360
into your application.

00:10:36.780 --> 00:10:48.940
Key-value storage Key-value storage
is a great example of a game.

00:10:49.040 --> 00:10:51.420
You start playing your game on
your iPad and you have to leave,

00:10:51.420 --> 00:10:55.060
you have to go somewhere and you
want to continue at the same place

00:10:55.060 --> 00:10:57.140
on your iPhone or your iPod touch.

00:10:57.390 --> 00:10:58.940
Key-value storage is a great example.

00:10:58.940 --> 00:11:00.840
You can use key-value storage for that.

00:11:00.900 --> 00:11:04.180
It's very easy to do and your
state will be transferred to

00:11:04.180 --> 00:11:06.490
all your devices immediately.

00:11:06.530 --> 00:11:11.950
It's a lightweight, simple,
and very fast solution to integrate

00:11:11.950 --> 00:11:14.750
iCloud storage into your application.

00:11:16.690 --> 00:11:21.760
So, three types: Document, Core Data,
Key Value.

00:11:21.790 --> 00:11:24.970
If you support one of those three,
your application will

00:11:24.980 --> 00:11:28.430
be ready to use iCloud.

00:11:28.660 --> 00:11:32.240
So what's new in iCloud
because iCloud storage?

00:11:32.320 --> 00:11:36.280
So on top of improving the
ability and performance,

00:11:36.350 --> 00:11:39.120
we've also listened to your feedback.

00:11:39.660 --> 00:11:44.700
You told us that you wanted to be able to
store a lot more data in this key value.

00:11:44.800 --> 00:11:49.000
So we increased the key value
storage quota so now you

00:11:49.000 --> 00:11:50.500
can store a lot more data.

00:11:50.500 --> 00:11:54.500
You told us also that you
wanted the sync to be faster.

00:11:54.500 --> 00:11:56.520
It was too slow,
you wanted it to be faster,

00:11:56.640 --> 00:11:59.020
so you make a change and
the change probably gets to

00:11:59.020 --> 00:12:00.500
another device immediately.

00:12:00.500 --> 00:12:03.500
So we shortened the key
value storage sync interval.

00:12:03.500 --> 00:12:06.500
So sync now are happening much faster.

00:12:07.060 --> 00:12:12.220
You told us also that you wanted to be
able to check the state or be notified

00:12:12.760 --> 00:12:16.970
of state changes for documents,
data, or even accounts.

00:12:17.000 --> 00:12:20.910
So we've added new API in Foundation,
so you can do that.

00:12:21.000 --> 00:12:25.200
We've also, as you've seen this morning,
integrated iCloud

00:12:25.200 --> 00:12:27.000
Storage in the open panel.

00:12:27.000 --> 00:12:30.160
So we have a new open
panel for iCloud Storage,

00:12:30.160 --> 00:12:34.840
so you don't have to roll your own
solution like we had to do before.

00:12:35.000 --> 00:12:37.000
It's all built in.

00:12:37.000 --> 00:12:43.000
Also for AppKit, we've added support for
NSDocument autosave in AppKit.

00:12:43.130 --> 00:12:46.870
This is the integration of
iCloud Storage in the open panel.

00:12:47.080 --> 00:12:49.960
Here also,
you don't have to roll your own solution.

00:12:49.960 --> 00:12:52.500
It's ready for you to use.

00:12:53.210 --> 00:12:59.200
You also told us that you wanted to
be able to see what was in the cloud

00:12:59.200 --> 00:13:04.260
because debugging iCloud was not easy,
easy, easy enough for you.

00:13:04.260 --> 00:13:10.910
So we've added these web tools at
developer.icloud.com and it allows

00:13:10.910 --> 00:13:13.220
you to go see what's in the cloud.

00:13:13.220 --> 00:13:16.420
So you make a change on one
device and the change doesn't

00:13:16.480 --> 00:13:19.180
get to the other device,
what happened.

00:13:19.180 --> 00:13:22.090
So you can go see in iCloud
what exactly is there.

00:13:29.860 --> 00:13:31.420
So this is iCloud.

00:13:31.420 --> 00:13:35.940
Adopt iCloud storage in your application,
or action item number two.

00:13:36.380 --> 00:13:40.640
Number three is about
internationalization.

00:13:40.640 --> 00:13:46.020
We deeply care at Apple about having
our products available everywhere,

00:13:46.020 --> 00:13:46.990
worldwide.

00:13:47.000 --> 00:13:54.300
In fact, we've been investing for a long,
long time on international support.

00:13:54.430 --> 00:13:59.680
Our OSs are localized in
more than 30 languages.

00:13:59.680 --> 00:14:02.880
The first iPhone shipped
with one keyboard in English.

00:14:02.880 --> 00:14:06.570
Now we have 44 languages
supported by our keyboard on iOS.

00:14:08.300 --> 00:14:10.420
Our app store also is worldwide.

00:14:11.610 --> 00:14:15.300
In fact, you saw the number this morning.

00:14:15.720 --> 00:14:21.620
Our store is in 123 countries and
even more in the few months ahead.

00:14:22.260 --> 00:14:27.310
We are supporting 41
languages in our app store.

00:14:27.620 --> 00:14:32.110
We are really a worldwide company
and we want our product to be usable

00:14:32.200 --> 00:14:35.690
and accessible all over the world.

00:14:35.860 --> 00:14:40.040
And we are continuing investing
in international support.

00:14:40.130 --> 00:14:43.800
You saw this morning about
our big push for China.

00:14:43.940 --> 00:14:46.980
We have a lot of new features
for the Chinese market and

00:14:46.980 --> 00:14:48.760
for all the other markets.

00:14:48.800 --> 00:14:51.790
So let me go through a couple of them.

00:14:52.750 --> 00:14:55.300
We've improved the Chinese keyboard.

00:14:55.330 --> 00:14:57.560
We've improved the auto-correction.

00:14:57.610 --> 00:15:00.500
We have a better prediction accuracy.

00:15:00.500 --> 00:15:04.120
We've added something that's critical
for the Chinese market because

00:15:04.260 --> 00:15:07.300
the Chinese language changes very,
very quickly.

00:15:07.550 --> 00:15:09.820
New words are being added all the time.

00:15:09.830 --> 00:15:13.020
So waiting for a new release of
the OS to update the word list for

00:15:13.020 --> 00:15:15.780
auto-correction is not very practical.

00:15:15.780 --> 00:15:18.680
So we are now updating the
word list over the air.

00:15:18.680 --> 00:15:23.780
So as new changes appear in the language,
we are pushing a new word list.

00:15:23.780 --> 00:15:26.990
We've also enhanced the
speed keyboard for Chinese.

00:15:27.400 --> 00:15:32.120
And now it's a lot easier to
use when you're typing Chinese.

00:15:32.120 --> 00:15:39.210
We've also added 10 new fonts for
China and also for Japan and Korea.

00:15:39.290 --> 00:15:45.270
Makes readability much better and makes
the whole experience a lot better.

00:15:45.270 --> 00:15:49.350
We've doubled the number of
emoji that's supported in --

00:15:53.510 --> 00:15:56.740
We've doubled the number of
emojis supporting iOS and OS X.

00:15:56.800 --> 00:16:00.100
And we have now full
support for Unicode 6.1.

00:16:00.220 --> 00:16:03.300
So as you can see, a lot of features,
a lot of new features

00:16:03.300 --> 00:16:05.300
for both you developers,
with, for example,

00:16:05.300 --> 00:16:09.280
the linguistic APIs have been
beefed up and are much better.

00:16:09.400 --> 00:16:14.100
We are putting features for both
our users and for you developers.

00:16:14.440 --> 00:16:20.540
So how does that translate into how
an app localizes in the App Store?

00:16:20.560 --> 00:16:25.980
So if you look at the US App Store,
85% of the applications are in English.

00:16:25.990 --> 00:16:31.020
That's great for us here in the US,
we speak English.

00:16:31.020 --> 00:16:33.640
But let me give you a
personal experience.

00:16:33.640 --> 00:16:37.010
My mother is French,
you probably have guessed that.

00:16:37.720 --> 00:16:41.700
and she lives in
France and she has an iPad.

00:16:41.700 --> 00:16:42.950
She loves playing games.

00:16:43.080 --> 00:16:44.140
She's 82 years old.

00:16:44.380 --> 00:16:46.140
It's her first computer.

00:16:46.140 --> 00:16:48.230
Never used a computer before.

00:16:48.360 --> 00:16:50.200
She loves her iPad and
loves playing games.

00:16:50.210 --> 00:16:52.750
The problem,
she doesn't speak or read English.

00:16:53.040 --> 00:16:55.100
I'm just a little bit better than her.

00:16:55.180 --> 00:16:58.900
So she cannot use any games,
anything that's in English.

00:16:58.900 --> 00:17:01.000
She won't touch them.

00:17:01.060 --> 00:17:03.690
So it's been very hard
to find good games.

00:17:03.690 --> 00:17:05.400
She likes puzzle games also.

00:17:05.480 --> 00:17:08.400
So it's even narrower, the scope here.

00:17:08.490 --> 00:17:13.100
So it's very hard to find
games that she can play.

00:17:13.130 --> 00:17:15.000
We find a lot of games
that would be great,

00:17:15.040 --> 00:17:18.360
but they are in English and
she cannot play them.

00:17:18.500 --> 00:17:23.050
So you can say, "Oh,
maybe that's..." If you look at

00:17:23.050 --> 00:17:27.870
the number in the French store,
you'll see that only 9%

00:17:27.870 --> 00:17:31.400
of the applications in the
French app store are in French.

00:17:31.510 --> 00:17:33.700
That's very, very small.

00:17:33.750 --> 00:17:35.200
And you could say, "Okay,
maybe that's France."

00:17:35.200 --> 00:17:37.010
And everywhere else is fine.

00:17:37.350 --> 00:17:38.190
But no.

00:17:38.340 --> 00:17:42.670
If you look at the Chinese app store,
only 8% of these

00:17:42.730 --> 00:17:45.000
applications are in Chinese.

00:17:45.000 --> 00:17:46.370
It's very, very small.

00:17:46.580 --> 00:17:49.700
And there is a huge opportunity
for you developers to have your

00:17:49.700 --> 00:17:53.320
application in the store localized
in the language of the store.

00:17:53.690 --> 00:17:57.290
And my mother will buy a lot more games,
believe me.

00:17:57.580 --> 00:18:00.450
So a huge opportunity for you there.

00:18:01.160 --> 00:18:03.840
So that's action item number three.

00:18:03.870 --> 00:18:05.480
Localize your application.

00:18:05.510 --> 00:18:08.450
Make it available all over the world.

00:18:09.970 --> 00:18:13.620
Our next action item
is about accessibility.

00:18:13.670 --> 00:18:16.200
This is something we
deeply care about at Apple.

00:18:16.200 --> 00:18:20.910
We have a very dedicated team at
Apple that absolutely works very,

00:18:21.200 --> 00:18:26.400
very hard on accessibility because
they love this accessibility.

00:18:26.400 --> 00:18:29.220
This is something that we
are really spending a lot of

00:18:29.310 --> 00:18:32.230
effort and for a long time.

00:18:33.100 --> 00:18:38.550
So we've been adding during
those many years a lot of new

00:18:38.560 --> 00:18:40.880
features for accessibility.

00:18:40.880 --> 00:18:43.380
And the good news for you
developers is that except for one,

00:18:43.530 --> 00:18:48.070
I will talk about that in a few minutes,
except for one feature,

00:18:48.070 --> 00:18:51.420
all the other features
are usable out of the box.

00:18:51.420 --> 00:18:52.820
You don't have to do anything.

00:18:52.820 --> 00:18:54.000
They just work.

00:18:54.000 --> 00:18:56.200
So that's great.

00:18:56.200 --> 00:18:59.440
And I'll talk in a little while
about the only one that you

00:18:59.440 --> 00:19:00.980
need to do something about.

00:19:00.980 --> 00:19:07.710
So last year, we introduced with iOS 5,
we've introduced Assistive Touch.

00:19:07.820 --> 00:19:12.340
This opens iOS to millions
of mobility impaired users.

00:19:12.340 --> 00:19:14.420
It's been a great success.

00:19:14.420 --> 00:19:17.200
And you've seen this morning
in a keynote Scott Forsall

00:19:17.200 --> 00:19:19.500
talking about guided access.

00:19:19.500 --> 00:19:22.920
And what I'm going to do,
I'm going to have Ken Kocienda,

00:19:22.960 --> 00:19:26.030
iOS principal engineer,
coming on stage and doing

00:19:26.150 --> 00:19:27.610
a demo of guided access.

00:19:27.780 --> 00:19:27.780
So, let's get started.

00:19:27.970 --> 00:19:29.700
Again.

00:19:35.060 --> 00:19:36.100
Thank you Henri.

00:19:36.160 --> 00:19:40.040
Guided access is a great new
feature for iOS 6 and I'd

00:19:40.040 --> 00:19:42.440
love to show you how it works.

00:19:42.440 --> 00:19:45.170
So let's go over to the iPad.

00:19:46.200 --> 00:19:52.100
Okay, and here I have an app called
ABA Flashcards and Games Emotions

00:19:52.240 --> 00:19:53.340
made by Alligator Apps.

00:19:53.460 --> 00:19:56.180
Really, really great content in this app.

00:19:56.250 --> 00:19:59.450
Once we get into it,
you'll see there's a series

00:19:59.450 --> 00:20:05.430
of flashcards where people are
displaying different emotions.

00:20:05.430 --> 00:20:09.100
Really, really great content,
particularly maybe for young

00:20:09.100 --> 00:20:12.640
children or special needs students
who could maybe really use some

00:20:12.640 --> 00:20:14.460
help with their sensibility.

00:20:14.640 --> 00:20:19.080
How do people express their emotions
by their expressions on their face?

00:20:19.390 --> 00:20:20.600
So really, really great content.

00:20:20.650 --> 00:20:23.980
So now,
if you're a parent or an educator,

00:20:24.000 --> 00:20:27.520
you might want to take this iPad,
get into this app,

00:20:27.520 --> 00:20:30.590
and hand it over to that child,
to that student,

00:20:30.590 --> 00:20:33.260
so that they can have the
iPad right in front of them.

00:20:33.260 --> 00:20:35.360
Really,
really get immersed in the content.

00:20:35.380 --> 00:20:38.070
But there are a couple of
problems if you do that.

00:20:38.080 --> 00:20:41.080
You hand the app over,
and maybe the kid immediately will

00:20:41.330 --> 00:20:43.180
press the hardware home button now.

00:20:43.180 --> 00:20:45.860
They're out of the app,
and now you've got to get it back

00:20:45.970 --> 00:20:49.420
and get them back in the activity,
get them back on track.

00:20:49.940 --> 00:20:53.570
Okay, of course,
there's another potential issue,

00:20:53.600 --> 00:20:57.810
which is the navigation bar
pressing the home button again.

00:20:57.820 --> 00:20:59.820
They're out of the activity.

00:20:59.820 --> 00:21:03.160
So now this is where
Guided Access can help.

00:21:03.160 --> 00:21:09.680
Go into settings, turn on Guided Access,
and now you triple tap the home button,

00:21:09.680 --> 00:21:11.720
and you get into the Guided
Access configuration screen.

00:21:11.730 --> 00:21:15.360
So now you see at the
bottom of the screen,

00:21:15.660 --> 00:21:19.100
once you enter Guided Access,
the home buttons are turned off.

00:21:19.120 --> 00:21:21.810
So that takes care of the problem
of hitting the hardware home

00:21:21.810 --> 00:21:23.240
button to get out of the app.

00:21:23.340 --> 00:21:26.360
Pressing the hardware home
button will not leave the app.

00:21:26.440 --> 00:21:30.710
But there's still the issue at the top
of the screen of the navigation bar.

00:21:30.830 --> 00:21:34.610
So now Guided Access has this really,
really cool feature for then going

00:21:34.610 --> 00:21:36.830
in and turning that button off.

00:21:36.960 --> 00:21:41.020
All you do is you go over, and you touch,
and you circle the button.

00:21:41.040 --> 00:21:41.040
And Guided Access is now turned off.

00:21:41.040 --> 00:21:41.040
So now you can go in and
turn that button off.

00:21:41.040 --> 00:21:41.040
All you do is you go over, and you touch,
and you circle the button.

00:21:41.040 --> 00:21:41.040
And Guided Access has this really,
really cool feature for then going

00:21:41.040 --> 00:21:41.040
in and turning that button off.

00:21:41.040 --> 00:21:41.040
All you do is you go over, and you touch,
and you circle the button.

00:21:41.160 --> 00:21:44.540
And Guided Access goes
and introspects the UI,

00:21:44.610 --> 00:21:47.020
finds that button, and disables it.

00:21:47.200 --> 00:21:52.010
So now I enter Guided Access,
and now I can take the iPad,

00:21:52.160 --> 00:21:56.430
hand it over to a student,
and now they can tap through the content.

00:21:56.440 --> 00:22:00.760
The app still works just like you expect,
only now the home button

00:22:00.760 --> 00:22:02.350
will not leave the app.

00:22:02.470 --> 00:22:05.280
And of course,
I can press up in that area,

00:22:05.280 --> 00:22:08.450
the top of the screen,
the navigation button

00:22:08.450 --> 00:22:10.350
is also now not working.

00:22:10.360 --> 00:22:11.310
Not working.

00:22:11.350 --> 00:22:16.290
So now the student, the kid,
can stay focused on your content,

00:22:16.290 --> 00:22:18.230
so that they can get the most out of it.

00:22:18.350 --> 00:22:21.140
Now as Henri said,
the best part about this feature is

00:22:21.140 --> 00:22:23.190
that you don't need to do anything.

00:22:23.190 --> 00:22:26.220
It just works with your apps,
right out of the box.

00:22:26.280 --> 00:22:28.750
It's a great new feature for iOS 6.

00:22:28.750 --> 00:22:31.530
So I'd like to turn it back to Henri now.

00:22:38.140 --> 00:22:42.520
So this was Guided Access.

00:22:42.550 --> 00:22:47.440
So as I said earlier, a lot,
I mean all those features except one,

00:22:47.440 --> 00:22:51.430
they don't require any
support from you guys.

00:22:52.380 --> 00:22:55.970
There is one, and this is VoiceOver.

00:22:56.070 --> 00:22:59.490
VoiceOver is a screen reader technology.

00:22:59.630 --> 00:23:02.060
This is for people who are blind.

00:23:02.060 --> 00:23:08.300
And it's been characterized as a
game changer in the industry on iOS.

00:23:08.300 --> 00:23:11.300
In fact,
there is a wonderful quote that says,

00:23:11.330 --> 00:23:15.320
"The iPhone has turned out to be one
of the most revolutionary developments

00:23:15.920 --> 00:23:19.500
since the invention of Braille."
It cannot get better than that.

00:23:19.710 --> 00:23:24.160
So you need to do a little bit
of work to adopt VoiceOver.

00:23:24.160 --> 00:23:28.270
And I'm going to guide you
through that this afternoon.

00:23:28.270 --> 00:23:30.610
So how do you adopt VoiceOver?

00:23:30.610 --> 00:23:32.070
How do you do that?

00:23:32.080 --> 00:23:35.680
First of all,
you have to try it with your application.

00:23:35.810 --> 00:23:42.150
So on OS X, you go to the accessibility
preference and you turn on VoiceOver.

00:23:42.360 --> 00:23:45.920
On iOS,
we have a similar setting in Settings,

00:23:45.990 --> 00:23:47.140
Accessibility.

00:23:47.140 --> 00:23:48.300
And turn on VoiceOver.

00:23:48.300 --> 00:23:48.300
You can turn it on.

00:23:48.300 --> 00:23:48.300
You can turn it off.

00:23:48.300 --> 00:23:50.900
You on voice over and try your app.

00:23:51.300 --> 00:23:54.180
It may turn out that you don't
have to do a lot of things because

00:23:54.470 --> 00:23:59.490
if you only use standard controls,
we do all the heavy lifting for you.

00:23:59.490 --> 00:24:03.220
And if your application is a
standard UI with no custom control,

00:24:03.350 --> 00:24:06.420
it may turn out that you
may be very -- almost done.

00:24:06.420 --> 00:24:10.030
If you use custom control,
then you have to go

00:24:10.030 --> 00:24:15.970
look at two protocols,
one in iOS, one in app kit, one in iOS,

00:24:15.970 --> 00:24:23.110
one in OS X, UI accessibility on iOS
and accessibility in OS X.

00:24:23.380 --> 00:24:27.790
So look at those protocols and, you know,
make your application

00:24:28.160 --> 00:24:29.710
ready for voice over.

00:24:29.830 --> 00:24:32.260
So why do you have to do that?

00:24:32.260 --> 00:24:34.960
What's the incentive for you?

00:24:35.070 --> 00:24:37.430
The goal is to increase your user base.

00:24:37.570 --> 00:24:39.770
You want everybody to use your app.

00:24:39.770 --> 00:24:42.260
You want to differentiate your app.

00:24:42.260 --> 00:24:42.260
You want to -- you want to have a user
base that is not just a user base.

00:24:42.260 --> 00:24:42.260
You want to have a user base
that is not just a user base.

00:24:42.260 --> 00:24:42.300
You want to have a user base
that is not just a user base.

00:24:42.300 --> 00:24:42.300
You want to have a user base
that is not just a user base.

00:24:42.300 --> 00:24:42.300
You want to have a user base
that is not just a user base.

00:24:42.300 --> 00:24:42.300
You want to have a user base
that is not just a user base.

00:24:42.300 --> 00:24:46.400
You want the voice over community
can really make a big deal of

00:24:46.400 --> 00:24:49.540
your application if it's really,
really good.

00:24:49.540 --> 00:24:52.230
They're going to generate a lot
of bots for your application.

00:24:52.270 --> 00:24:53.130
And that's good.

00:24:53.260 --> 00:24:54.290
Also, in the U.S.

00:24:54.290 --> 00:24:57.000
and some countries,
if you try to sell your application

00:24:57.000 --> 00:25:00.610
in the government or school,
your application has to be accessible.

00:25:00.760 --> 00:25:01.880
It's a requirement.

00:25:02.000 --> 00:25:05.550
So you're not going to sell any
apps in school or government

00:25:05.550 --> 00:25:10.920
without supporting accessibility
and specifically voice over.

00:25:10.920 --> 00:25:11.720
So make sure that your
apps are accessible.

00:25:11.720 --> 00:25:11.900
And if you're not,
you're not going to be able to sell

00:25:11.900 --> 00:25:13.460
your apps in school or government
without supporting accessibility

00:25:13.460 --> 00:25:14.300
and specifically voice over.

00:25:14.300 --> 00:25:16.070
So make sure that your app can be
used by everybody and add up voice

00:25:16.170 --> 00:25:18.720
over and make your app accessible.

00:25:18.810 --> 00:25:23.010
The next action item is about sharing.

00:25:23.240 --> 00:25:26.500
Sharing is what people do
a lot -- more than a lot.

00:25:26.630 --> 00:25:31.030
People love sharing today
with all the social network.

00:25:31.190 --> 00:25:34.300
That's what people do
almost all the time.

00:25:34.370 --> 00:25:37.440
On their iPhone, their iPad,
their computer,

00:25:37.440 --> 00:25:40.560
sharing is part of our life nowadays.

00:25:40.710 --> 00:25:45.680
So last year, we introduced Twitter's
integration with iOS 5,

00:25:45.700 --> 00:25:47.140
and it had huge success.

00:25:47.270 --> 00:25:49.500
You saw the number this
morning in the keynote.

00:25:49.500 --> 00:25:52.050
We've done a single
sign-on and a posting UI.

00:25:52.050 --> 00:25:53.060
Huge success.

00:25:53.170 --> 00:25:54.550
People loved it.

00:25:54.650 --> 00:25:56.540
Users and developers.

00:25:56.580 --> 00:25:58.550
We're doing it again
this year with Facebook.

00:25:58.650 --> 00:26:03.460
And we have a deep integration of
Facebook in iOS 6 and Mountain Lion.

00:26:03.660 --> 00:26:04.060
So what does that mean?

00:26:04.060 --> 00:26:05.970
It means single sign-on.

00:26:05.970 --> 00:26:07.810
You saw it this morning.

00:26:07.810 --> 00:26:11.560
The user can go and sign in
once into our settings and be

00:26:11.560 --> 00:26:13.680
signing for all the application.

00:26:14.280 --> 00:26:16.980
Facebook will be releasing
a new application and a new

00:26:16.990 --> 00:26:19.820
Facebook connect that will
integrate with our single sign-on.

00:26:19.820 --> 00:26:22.500
So your application will be
ready to use our single sign-on.

00:26:22.620 --> 00:26:27.460
We have a new posting UI,
standard posting UI on OS X and iOS.

00:26:27.460 --> 00:26:29.250
We're integrating with contacts.

00:26:29.250 --> 00:26:33.260
So now you can get all your
friends in your contacts.

00:26:33.260 --> 00:26:35.380
And on iOS,
we're also integrating with calendar.

00:26:35.380 --> 00:26:39.370
So you can get your events,
your birthday, all those things.

00:26:39.970 --> 00:26:43.930
Facebook and Twitter are
two great examples,

00:26:43.980 --> 00:26:46.900
but there are a lot of
other ways people can share.

00:26:47.040 --> 00:26:53.190
They can use posting pictures to Flickr,
or using Sina Weibo in China, or Youku,

00:26:53.190 --> 00:26:58.900
or using iMessage or Mail,
or shared photo streams.

00:26:59.050 --> 00:27:01.900
So a lot of different
ways people can share.

00:27:02.030 --> 00:27:04.790
And for you developers,
it means figuring out all the

00:27:04.790 --> 00:27:08.470
different APIs that need to be called,
sometimes figuring out a

00:27:08.470 --> 00:27:09.900
new UI you have to create.

00:27:09.900 --> 00:27:12.890
And also figuring out if
the services are available.

00:27:12.920 --> 00:27:15.870
Some services are not available
everywhere in the world.

00:27:16.000 --> 00:27:17.900
So you have to figure
out all those things.

00:27:17.990 --> 00:27:20.830
It's not... it could become complicated.

00:27:20.900 --> 00:27:24.900
So we've decided to do all that for you.

00:27:24.900 --> 00:27:28.900
And we have introduced new
sharing APIs in iOS and OS X.

00:27:28.960 --> 00:27:31.900
And this is going to be...
it is a standard system.

00:27:31.900 --> 00:27:32.890
It's a new service.

00:27:32.890 --> 00:27:34.980
It means that as we are
adding new services,

00:27:34.980 --> 00:27:36.890
they will automatically
show up in your application.

00:27:36.900 --> 00:27:37.900
You won't have to do anything.

00:27:37.900 --> 00:27:40.760
The user can use them directly.

00:27:46.560 --> 00:27:49.970
So we're going to have a unified
API for all the services.

00:27:50.150 --> 00:27:53.520
You only have to learn one API,
and you're done.

00:27:53.550 --> 00:27:57.320
A consistent UI across
all your applications.

00:27:57.350 --> 00:28:01.020
We're going to filter the
services depending on what kind

00:28:01.020 --> 00:28:02.840
of data the user wants to share.

00:28:02.840 --> 00:28:05.740
If it's a picture or just text,
we'll do the right thing.

00:28:05.780 --> 00:28:09.530
We only show the sharing
services that make sense.

00:28:09.680 --> 00:28:10.970
We're going to filter on location.

00:28:11.060 --> 00:28:14.100
As I said,
some services are available everywhere.

00:28:14.140 --> 00:28:17.340
And we want this API to be extensible.

00:28:17.650 --> 00:28:20.340
You may have a sharing
service that we don't support,

00:28:20.340 --> 00:28:22.350
or we don't use your
own in your application.

00:28:22.600 --> 00:28:26.830
So you'll be able to extend
the API for your own service

00:28:27.280 --> 00:28:31.600
and integrate in the same UI,
integrate your service into the same UI.

00:28:31.650 --> 00:28:36.350
So the user doesn't have to
go figuring out another UI.

00:28:36.900 --> 00:28:40.850
On iOS, the main class is
UI Activity View Controller.

00:28:40.910 --> 00:28:46.460
This is a standard view controller
that you can use and it displays

00:28:46.460 --> 00:28:50.510
in a grid all the services that
are available at the current time,

00:28:50.510 --> 00:28:52.800
depending on the user
selection and its location.

00:28:52.800 --> 00:28:55.230
Notice here that we have
more than sharing services

00:28:55.310 --> 00:28:56.760
like Facebook and Twitter.

00:28:56.830 --> 00:28:59.690
We also have options like print and copy.

00:28:59.970 --> 00:29:01.800
This is why this class
is called Activity.

00:29:01.800 --> 00:29:05.800
It's in fact more general
than just sharing services.

00:29:05.800 --> 00:29:06.800
Thank you.

00:29:07.210 --> 00:29:11.640
On OS X,
there is a similar class because the API,

00:29:11.640 --> 00:29:13.190
in fact, are very, very similar.

00:29:13.320 --> 00:29:15.340
It's called NSSharingServiceSpeaker.

00:29:15.590 --> 00:29:16.960
Same thing here.

00:29:16.960 --> 00:29:21.940
Shows a list of sharing services that
are available to your application.

00:29:22.060 --> 00:29:27.180
If the user selects Facebook,
for example, you will get the standard

00:29:27.180 --> 00:29:29.680
Facebook UI to post to Facebook.

00:29:29.680 --> 00:29:32.030
In this case,
the user is posting a web page.

00:29:32.280 --> 00:29:36.790
So you see the little clip of
the web page and the string.

00:29:37.170 --> 00:29:43.210
So to show you how easy it is
to include the UI activity view

00:29:43.270 --> 00:29:46.420
controller into an iOS app,
I'd like to bring on

00:29:46.420 --> 00:29:48.360
stage Ken Kocienda again.

00:29:49.800 --> 00:29:54.540
Thank you Henri.

00:29:54.990 --> 00:29:59.690
So the new UI activity view controller
and the new sharing API that we're

00:29:59.700 --> 00:30:03.860
making available for iOS 6 is really,
really great and it's really easy to use.

00:30:03.930 --> 00:30:07.260
So what I'd like to do though is
go back and show you an app that

00:30:07.560 --> 00:30:12.780
used the Twitter integration that we
built into iOS 5 and show you how to

00:30:12.780 --> 00:30:17.410
move that app to use the new API that
we're making available in iOS 6.

00:30:17.570 --> 00:30:18.620
Really, really easy.

00:30:18.620 --> 00:30:19.590
Love to show you.

00:30:19.600 --> 00:30:21.890
So if we can go to the iPhone.

00:30:21.890 --> 00:30:27.830
What I did here is I wrote a little
demo app here and it shows a picture

00:30:27.880 --> 00:30:30.630
of this extremely handsome guy.

00:30:30.630 --> 00:30:34.590
And what I did was the app is
called Doodles and any Giants

00:30:34.590 --> 00:30:37.600
fans out there maybe perhaps.

00:30:37.980 --> 00:30:41.410
So what I did was made a
couple of little doodles.

00:30:41.410 --> 00:30:44.280
So now, of course,
I've made something like this,

00:30:44.280 --> 00:30:45.920
made content in my app immediately.

00:30:45.920 --> 00:30:48.620
Of course, I want to go and share
it out on the Internet.

00:30:48.640 --> 00:30:53.440
So what I did was I go and press
the action button in the bottom

00:30:53.470 --> 00:30:57.740
right corner of the screen and I get
the standard iOS 5 tweet sheet.

00:30:57.740 --> 00:30:58.150
Okay?

00:30:58.570 --> 00:31:00.000
Really pretty easy to get.

00:31:00.000 --> 00:31:00.580
Right?

00:31:00.580 --> 00:31:03.380
Now,
what I'd like to do is show you the code

00:31:03.410 --> 00:31:06.480
that you need to write to present that.

00:31:06.480 --> 00:31:08.320
So if we can go over to the

00:31:11.760 --> 00:31:18.710
So, here, this method, very, very simple,
few lines of code.

00:31:18.710 --> 00:31:22.440
This is what you need to do to show
that standard iOS 5 style tweet sheet,

00:31:22.800 --> 00:31:23.040
right?

00:31:23.040 --> 00:31:25.050
You just go and create
the view controller,

00:31:25.120 --> 00:31:28.950
set the initial text and the
picture that I generated in the app,

00:31:28.950 --> 00:31:32.110
and then just basically go and
present the view controller.

00:31:32.230 --> 00:31:34.120
Just a few lines of code,
really easy to do.

00:31:34.120 --> 00:31:37.940
But, of course,
all this does is integrate with Twitter.

00:31:38.220 --> 00:31:42.360
Now, since we've added Facebook and we're
adding new services all the time,

00:31:42.360 --> 00:31:45.230
like CineWebo and other
services available on iOS,

00:31:45.230 --> 00:31:45.800
right?

00:31:45.800 --> 00:31:48.390
Maybe you need to write
more code to do that,

00:31:48.460 --> 00:31:51.330
but no, we made it really,
really simple with

00:31:51.440 --> 00:31:53.440
UIActivityViewController.

00:31:53.440 --> 00:31:56.470
So, now,
all I need to do is delete that code,

00:31:56.480 --> 00:32:02.440
and I've written a few lines that
you need here to now use the new API.

00:32:02.440 --> 00:32:05.230
As you can see, also very, very simple.

00:32:05.230 --> 00:32:10.720
All I do is I take my text and my image
that I want to share with the user,

00:32:10.730 --> 00:32:12.740
create the view controller,
and present it.

00:32:12.740 --> 00:32:15.580
Now,
the UIActivityViewController looks at the

00:32:15.650 --> 00:32:20.930
data that you set and makes the services
available in the view controller that are

00:32:20.930 --> 00:32:22.400
appropriate for the data that you set.

00:32:22.540 --> 00:32:27.330
So, in this case,
I've set that text and that image.

00:32:27.330 --> 00:32:33.460
So, I'm just going to build that and
now go back over to the iPhone and

00:32:33.460 --> 00:32:35.570
show you this new code running.

00:32:35.570 --> 00:32:36.080
Okay.

00:32:36.080 --> 00:32:39.960
So, now, same,
same good-looking guy as before.

00:32:40.040 --> 00:32:43.080
Or at least my wife thinks so.

00:32:43.080 --> 00:32:48.050
And then, right, so now I go over and
I want to share this image,

00:32:48.120 --> 00:32:51.960
and now I press the activity,
the action button,

00:32:51.960 --> 00:32:56.880
and now I get access to all of
these additional activities,

00:32:56.880 --> 00:32:57.720
right?

00:32:57.720 --> 00:33:02.400
Twitter is there, just like before,
but then also Facebook.

00:33:02.400 --> 00:33:08.710
Now you get the standard
Facebook view and,

00:33:08.710 --> 00:33:08.710
you know, you can also, you know, you can

00:33:09.780 --> 00:33:12.960
Right.

00:33:13.780 --> 00:33:16.010
Get the standard Facebook view,
but of course that's not all.

00:33:16.260 --> 00:33:20.000
You also get access to mail and
message other apps on the system

00:33:20.000 --> 00:33:24.080
that can handle text and pictures,
contacts,

00:33:24.150 --> 00:33:26.300
and then also printing and copying.

00:33:26.300 --> 00:33:29.750
So with just this one simple API,
just a few lines of code,

00:33:29.750 --> 00:33:33.290
you get access to all of these
services and we've abstracted

00:33:33.290 --> 00:33:36.900
away all of the complexity of
dealing with these services.

00:33:36.900 --> 00:33:39.740
And then additionally as we
add new services in the future,

00:33:39.740 --> 00:33:42.840
you'll get access to those without
having to change your code.

00:33:42.900 --> 00:33:46.890
So UI Activity View Controller,
new sharing API for IOS 6, really,

00:33:46.920 --> 00:33:49.490
really great, really, really easy to use.

00:33:49.770 --> 00:33:51.490
Go and add sharing to your app.

00:33:51.750 --> 00:33:53.660
Henri?

00:34:01.290 --> 00:34:06.640
So this was about integrating UI Activity
View Controller into your application.

00:34:06.870 --> 00:34:08.080
Very, very simple.

00:34:08.080 --> 00:34:10.960
So this was the action item number five.

00:34:11.200 --> 00:34:13.410
I hope you're keeping track.

00:34:13.540 --> 00:34:20.260
Number five, this is about adopting
our new sharing APIs.

00:34:20.330 --> 00:34:25.330
And to talk about our next action item,
I would like to bring

00:34:25.630 --> 00:34:28.770
on stage Geoff Staahl,
Director of Graphic and Media.

00:34:28.780 --> 00:34:30.160
Thank you, Henry.

00:34:35.320 --> 00:34:40.460
So the next action item is
making your game social.

00:34:40.460 --> 00:34:44.450
So we're going to talk about two great
technologies that allow you to establish

00:34:44.590 --> 00:34:48.420
those social connections to your games,
Game Center and AirPlay.

00:34:48.420 --> 00:34:50.560
So why is this important?

00:34:50.620 --> 00:34:55.690
What we saw from this morning
was there's 130 million players

00:34:55.720 --> 00:34:58.430
playing your games on AirPlay.

00:34:58.430 --> 00:35:04.940
And even more astounding is they're
posting 5 billion scores per week.

00:35:04.990 --> 00:35:07.340
That's an amazing number.

00:35:07.430 --> 00:35:12.170
And so what we want to talk about is how
you can use Game Center to establish that

00:35:12.360 --> 00:35:15.440
backbone of your social gaming networks.

00:35:15.560 --> 00:35:17.180
So you're building a new game.

00:35:17.180 --> 00:35:20.820
Before using Game Center,
before you adopt Game Center,

00:35:20.820 --> 00:35:22.170
your players are like on an island.

00:35:22.300 --> 00:35:23.480
They can't see other players.

00:35:23.480 --> 00:35:24.440
They can't communicate.

00:35:24.700 --> 00:35:27.530
They can't share anything they're doing.

00:35:27.540 --> 00:35:29.500
Game Center changes this.

00:35:31.200 --> 00:35:32.940
We add, for example, friends games.

00:35:32.940 --> 00:35:35.250
This allows people to
look at the friends,

00:35:35.260 --> 00:35:38.230
see what they're playing,
see what's really interesting to them,

00:35:38.230 --> 00:35:42.470
and download your games
that they might see.

00:35:42.910 --> 00:35:47.100
We also add real-time and
turn-based multiplayer.

00:35:47.350 --> 00:35:49.440
And that makes the
games even more sticky.

00:35:49.510 --> 00:35:51.700
That makes players give
a good replay value,

00:35:51.910 --> 00:35:56.300
makes them come back to your games, and,
for example, enhances your in-app

00:35:56.440 --> 00:35:58.100
purchase kind of thing.

00:35:58.300 --> 00:36:02.350
Also in Game Center we allow game
ratings from right inside of Game Center.

00:36:02.360 --> 00:36:05.190
It may seem like a small thing,
but it allows players to rate your

00:36:05.190 --> 00:36:08.440
game and tell the world what they think
right inside of Game Center without

00:36:08.450 --> 00:36:09.760
having to go to the app store.

00:36:09.850 --> 00:36:12.900
So that's Game Center before today.

00:36:13.020 --> 00:36:21.540
Today we're adding a bunch of new
social features to Game Center.

00:36:21.640 --> 00:36:23.600
The first is, of course, sharing.

00:36:23.720 --> 00:36:26.640
So sharing allows players to
take scores and achievements,

00:36:26.740 --> 00:36:30.400
allows them via Facebook, Twitter,
messages, or even email,

00:36:30.550 --> 00:36:33.100
and share them with their friends.

00:36:33.250 --> 00:36:37.700
Also with our Facebook integration
allows players to like your game.

00:36:37.860 --> 00:36:43.690
This means that you'll see posted on
that player's wall a link directly

00:36:43.690 --> 00:36:47.240
back to the app store so other
people can see and buy your game.

00:36:47.390 --> 00:36:49.700
Really a fantastic feature.

00:36:49.820 --> 00:36:51.070
Local multiplayer.

00:36:51.200 --> 00:36:53.200
You want to play with people around you.

00:36:53.300 --> 00:36:55.290
Local multiplayer allows you to do this.

00:36:55.410 --> 00:36:57.450
Whether you're in the back
of a car or at a conference,

00:36:57.510 --> 00:37:00.000
you can find people nearby
you to play multiplayer games.

00:37:01.580 --> 00:37:02.830
Challenges.

00:37:02.910 --> 00:37:04.720
Challenges are awesome.

00:37:04.800 --> 00:37:08.700
Challenges make almost every
game a multiplayer experience.

00:37:08.800 --> 00:37:11.690
So you're allowed to,
players can take scores and achievements

00:37:12.310 --> 00:37:15.500
and they can challenge their friends
to beat those scores and achievements.

00:37:15.500 --> 00:37:17.790
They can even challenge people
who may not have the game.

00:37:17.800 --> 00:37:20.540
So when you're really good at a game,
you can find someone who may not have

00:37:20.540 --> 00:37:21.780
the game and challenge those guys.

00:37:21.780 --> 00:37:23.800
You're sure they'll take them
a while to catch up to you.

00:37:25.850 --> 00:37:28.360
Finally, game groups.

00:37:28.360 --> 00:37:31.360
What we're doing is
you can take your free,

00:37:31.400 --> 00:37:35.770
your paid, your HD,
or even your OS X game and group

00:37:35.850 --> 00:37:38.100
them all into the same ecosystem.

00:37:38.230 --> 00:37:41.820
You can share leaderboards, achievements,
and even send multiplayer

00:37:41.820 --> 00:37:43.640
invites across these platforms.

00:37:43.700 --> 00:37:47.730
This is really great to building that
social network around your set of

00:37:47.730 --> 00:37:49.880
games and attracting more players.

00:37:49.950 --> 00:37:51.710
Game groups.

00:37:52.000 --> 00:37:56.290
So those are the social features
for the new Game Center.

00:37:56.290 --> 00:37:58.040
Here are some other features we've added.

00:37:58.040 --> 00:37:59.510
We've added, that's not just what we,
we didn't stop with

00:37:59.510 --> 00:38:00.980
just the social aspects.

00:38:01.150 --> 00:38:02.630
For example, we have turn timeouts.

00:38:02.760 --> 00:38:05.830
This keeps your turn-based games going,
make sure they don't stall

00:38:05.830 --> 00:38:08.930
when a player doesn't,
doesn't want to post a turn.

00:38:09.180 --> 00:38:11.810
Or, for example, multiplayer rematch.

00:38:11.870 --> 00:38:15.230
Multiplayer rematch makes it
easy for you to programmatically

00:38:15.230 --> 00:38:18.080
do a quick rematch for players.

00:38:18.080 --> 00:38:22.660
Game Center is available today
for iOS and OS X Mountain Lion.

00:38:22.840 --> 00:38:27.970
The new Game Center is coming to iOS
6 and OS X Mountain Lion this fall.

00:38:31.000 --> 00:38:35.710
Game Center If you're one of the
minority who have not already adopted

00:38:35.710 --> 00:38:37.980
Game Center now is the time to start.

00:38:38.020 --> 00:38:41.080
I want to talk about another
technology that really allows you

00:38:41.080 --> 00:38:45.720
to create unique social gaming
experiences and that's AirPlay.

00:38:45.780 --> 00:38:48.730
So as you know AirPlay has
some things it does.

00:38:48.820 --> 00:38:50.680
It streams audio and streams video.

00:38:50.710 --> 00:38:54.860
It can do mirror displays
and it can do second display.

00:38:54.910 --> 00:38:58.760
From a gaming standpoint we want
to talk about those last two.

00:38:58.850 --> 00:39:03.600
So for example, you have an iPad,
and you can mirror to a TV.

00:39:04.080 --> 00:39:06.900
With OS X Mountain Lion,
you can take your Mac and you

00:39:06.900 --> 00:39:10.010
can mirror to an AirPlay device.

00:39:10.910 --> 00:39:14.040
And with iOS you can do second display,
like a great example

00:39:14.040 --> 00:39:15.800
here of Sky Gamblers.

00:39:15.890 --> 00:39:19.800
What's great about second display
is it allows some unique paradigms

00:39:19.800 --> 00:39:21.800
for you to adopt for your game.

00:39:21.940 --> 00:39:24.300
So let's take a look at some of those.

00:39:24.920 --> 00:39:26.900
So in this case you have an action game.

00:39:26.960 --> 00:39:29.400
In this case the players eyes
are all focused on the screen.

00:39:29.460 --> 00:39:33.900
You have, they're playing using the iPad,
using the accelerometers and gyros.

00:39:33.940 --> 00:39:37.340
And the iPad's going to provide them
with that kind of HUD information,

00:39:37.340 --> 00:39:40.000
that quick information they can
glance down at while they're playing.

00:39:40.050 --> 00:39:43.200
So there's great use of two screens here.

00:39:43.260 --> 00:39:47.100
Now if we slow things down a little bit,
you move into the living room and you

00:39:47.100 --> 00:39:48.800
have a shared experience kind of game.

00:39:48.800 --> 00:39:52.790
In this case the player's
turn it is has the iPad.

00:39:52.920 --> 00:39:55.610
They can look at the secret word and
they can start doodling and everyone

00:39:55.610 --> 00:39:56.850
else is focused on the screen.

00:39:57.130 --> 00:40:00.300
And allows them to guess
the word they're drawing.

00:40:00.300 --> 00:40:03.740
This is a great example of
using that airplay capability

00:40:03.810 --> 00:40:05.500
to create a social game.

00:40:05.530 --> 00:40:10.020
A derivation of this could be
for example a family game night.

00:40:10.200 --> 00:40:11.790
Where every player has their own device.

00:40:11.790 --> 00:40:15.650
It's an iPod touch, iPhone, iPad.

00:40:15.900 --> 00:40:18.980
They have their own tiles on the
device and they are focused on the

00:40:19.050 --> 00:40:21.170
main screen when they take their turn.

00:40:21.240 --> 00:40:22.700
So again, created using the iPad.

00:40:22.700 --> 00:40:24.440
using AirPlay.

00:40:24.720 --> 00:40:26.810
Finally,
a great example from Real Racing here

00:40:26.960 --> 00:40:30.440
is multiplayer action game where
you have a four-up display.

00:40:30.490 --> 00:40:32.570
Everyone has their own
device that's controlling it,

00:40:32.570 --> 00:40:36.020
and they're focused on the display
doing that integrated racing game.

00:40:36.170 --> 00:40:40.980
These are some great examples
of how you can take a game using

00:40:40.990 --> 00:40:45.930
AirPlay and expand that social network,
add to the replayability,

00:40:45.930 --> 00:40:50.260
really make it memorable
for your players.

00:40:52.400 --> 00:40:56.760
So, action item number six,
make your game social.

00:40:56.780 --> 00:40:59.720
We have AirPlay,
Game Center would help you do that.

00:40:59.740 --> 00:41:02.760
We want to see what kind of
fantastically creative and brilliant

00:41:02.760 --> 00:41:04.450
games you can come up with.

00:41:05.300 --> 00:41:11.460
Action Item #7:
Move to Modern Graphics and Media API.

00:41:11.460 --> 00:41:17.420
So we provide a fantastic set of graphics
and media API across both iOS and OS X.

00:41:17.700 --> 00:41:20.820
And the call to action here
is to move to this modern API.

00:41:20.820 --> 00:41:23.850
So let's talk about
some highlights of that.

00:41:24.270 --> 00:41:26.900
First, Retina displays.

00:41:26.900 --> 00:41:31.630
As you saw this morning,
we've introduced Retina displays across

00:41:31.720 --> 00:41:37.580
the product line with the addition of
the new MacBook Pro with Retina display.

00:41:37.660 --> 00:41:38.760
Stunning graphics.

00:41:38.760 --> 00:41:42.850
It allows you developers to create
graphics such as these from Diablo

00:41:43.260 --> 00:41:46.680
that really make the player think
they're playing inside of a movie.

00:41:46.680 --> 00:41:50.180
It's a fantastic, brilliant display.

00:41:50.180 --> 00:41:55.420
Previously we've talked about iOS and
how you can adopt Retina displays.

00:41:55.420 --> 00:41:59.360
Today we're going to tell you how to
adopt Retina displays for Mac OS X.

00:41:59.360 --> 00:42:00.610
So it's ten steps.

00:42:00.690 --> 00:42:01.930
No, not ten steps.

00:42:01.930 --> 00:42:03.300
It's only four steps.

00:42:03.300 --> 00:42:06.840
So the first step is simply
provide high-resolution artwork.

00:42:07.020 --> 00:42:08.540
We do the heavy lifting for you.

00:42:08.540 --> 00:42:11.850
We ensure that the system text is going
to be crisp and sharp and when you

00:42:11.850 --> 00:42:14.780
provide the high-resolution artwork,
it completes your app.

00:42:14.900 --> 00:42:17.330
So here, for example,
is a reminders app that may not

00:42:17.340 --> 00:42:19.010
have high-resolution artwork.

00:42:19.060 --> 00:42:21.860
When you're adding
high-resolution artwork,

00:42:21.930 --> 00:42:22.960
it's amazingly sharp.

00:42:23.190 --> 00:42:26.280
We'll take care of the text,
take care of the system artwork.

00:42:26.280 --> 00:42:27.770
All you have to do is
do your own artwork.

00:42:29.090 --> 00:42:31.950
The next thing to do is
if you're an OpenGL game,

00:42:32.010 --> 00:42:35.490
you want to opt in to
high resolution OpenGL.

00:42:35.610 --> 00:42:39.810
First you set your surface
to be for best resolution.

00:42:39.810 --> 00:42:41.900
That allows you to get
pixel perfect graphics.

00:42:41.970 --> 00:42:44.910
And then you make sure you pass
the correct bounds into your

00:42:44.960 --> 00:42:46.900
viewport and you're off and running.

00:42:46.900 --> 00:42:51.500
And you'll be able to access that full
resolution of that retina display.

00:42:51.530 --> 00:42:55.600
Next, avoid the use of deprecated API.

00:42:55.640 --> 00:42:58.290
NSMovieView,
Quickdraw may have been great

00:42:58.640 --> 00:43:01.700
graphics APIs in their time,
but they know little about high

00:43:01.700 --> 00:43:03.600
resolution retina graphics.

00:43:03.600 --> 00:43:07.460
So avoid the use of these deprecated API.

00:43:08.510 --> 00:43:11.680
Finally,
the fourth step of our four steps is

00:43:11.830 --> 00:43:15.400
correctly code using points and pixels.

00:43:15.400 --> 00:43:18.580
So we've given you some great routines
to convert between points and pixels.

00:43:18.580 --> 00:43:21.220
In this case what you see is
you see you're setting some

00:43:21.220 --> 00:43:24.360
bounds that come first in pixels,
you're converting them to

00:43:24.360 --> 00:43:26.480
points and using them in
the correct APIs and points.

00:43:26.480 --> 00:43:29.650
So ensuring your code where you're
converting between points and pixels,

00:43:29.780 --> 00:43:31.110
you're doing the right thing.

00:43:31.410 --> 00:43:35.160
So,
four simple steps to making your apps,

00:43:35.160 --> 00:43:39.700
to having your apps adopt retina
level graphics for Mac OS X.

00:43:39.700 --> 00:43:43.390
We can't wait to see what kind
of stunning things you can do.

00:43:43.770 --> 00:43:45.270
So I'm going to change the
pace a little bit here.

00:43:45.270 --> 00:43:47.370
We're going to talk about
media APIs right now.

00:43:47.440 --> 00:43:48.560
We're going to talk about AV Foundation.

00:43:48.630 --> 00:43:54.820
AV Foundation really is the foundation
of our media APIs in both iOS and OS X.

00:43:54.910 --> 00:43:56.180
We've added some new things to it.

00:43:56.250 --> 00:44:00.900
One thing that stands out for me here
is the ability for you to access the

00:44:00.900 --> 00:44:04.170
decoded video frames in real time.

00:44:08.840 --> 00:44:11.980
Yeah, it's amazing because what you
can do is you can take the

00:44:11.980 --> 00:44:16.040
real-time decoded video frame,
pass it in as an OpenGL texture

00:44:16.040 --> 00:44:17.060
and manipulate it that way.

00:44:17.060 --> 00:44:21.430
You could create a movie introspection
app where you have a loop that

00:44:21.500 --> 00:44:25.020
magnifies your video and do that
in real-time using this API.

00:44:25.020 --> 00:44:30.710
Another key facet of our media story
is our amazing camera on the iPhone.

00:44:30.720 --> 00:44:35.490
And this year we're going to allow
you deeper access to the phone

00:44:35.490 --> 00:44:39.680
and more control with things like
accelerated face detection that

00:44:39.680 --> 00:44:42.720
you can use in your application,
focus exposure and ROI.

00:44:42.720 --> 00:44:47.220
And the last one on this list
is actually pretty darn amazing.

00:44:47.220 --> 00:44:50.550
It is real-time video
stabilization that you guys have

00:44:50.550 --> 00:44:52.720
access to in your applications.

00:44:52.720 --> 00:44:55.730
So what we've created here
is a state-of-the-art,

00:44:55.730 --> 00:44:59.010
fully integrated video
stabilization solution that

00:44:59.010 --> 00:45:00.720
uses the gyro and the camera.

00:45:00.720 --> 00:45:03.950
And we're going to use the gyro, ISP,
GPU and CPU to allow this kind

00:45:03.950 --> 00:45:06.290
of results with your application.

00:45:07.370 --> 00:45:10.260
So, how hard is it to get this?

00:45:10.260 --> 00:45:13.420
It's really, really easy.

00:45:13.480 --> 00:45:16.570
Video stabilization is two lines of code.

00:45:16.570 --> 00:45:16.570
First...

00:45:23.780 --> 00:45:26.700
First, check to make sure it's there,
and then turn it on.

00:45:26.890 --> 00:45:31.690
Absolutely stunning, amazing,
real-time video stabilization.

00:45:32.730 --> 00:45:36.370
And to finish up our tour through
the modern kind of graphics and

00:45:36.370 --> 00:45:39.020
media APIs is OpenGL and GLKit.

00:45:39.200 --> 00:45:44.000
GLKit for OpenGL is really the
doorway or the gateway to modern

00:45:44.000 --> 00:45:45.600
OpenGL from legacy OpenGL.

00:45:45.600 --> 00:45:49.340
We provide you a lot of great
utility routines and we ask,

00:45:49.340 --> 00:45:52.100
and it's both on iOS and OS X.

00:45:52.100 --> 00:45:55.100
And if you're using OpenGL and
you're not using GLKit,

00:45:55.100 --> 00:45:59.270
I really suggest you move forward
onto it because it allows you

00:45:59.270 --> 00:46:02.910
to really unlock the power of
programmable GPUs and shaders which

00:46:02.910 --> 00:46:05.100
are across our entire product line.

00:46:05.100 --> 00:46:08.600
It's actually a fantastic way
to get jump started on OpenGL.

00:46:08.600 --> 00:46:12.340
So, let's do a demo.

00:46:12.700 --> 00:46:28.400
[Transcript missing]

00:46:29.840 --> 00:46:32.850
I think you saw this earlier
today in the keynote in the movie,

00:46:32.850 --> 00:46:35.620
but we're going to do
it in real time here.

00:46:37.670 --> 00:46:41.040
So this is 3D for medicals, Knee Pro 3.

00:46:41.040 --> 00:46:45.540
And you can see it uses a
great mashup of graphics,

00:46:45.540 --> 00:46:50.950
technology and APIs and input to
provide a replacement for that old,

00:46:50.950 --> 00:46:54.900
dusty, plastic knee that the physician
had in the corner of their office.

00:46:54.920 --> 00:46:58.990
So what you would do with the scenario
here would be a doctor's in their

00:46:59.390 --> 00:47:01.900
office and a patient's contacting them.

00:47:01.900 --> 00:47:02.940
They want to have a knee procedure.

00:47:02.940 --> 00:47:05.390
They're going to have a knee procedure
and they have some questions about it,

00:47:05.390 --> 00:47:06.880
like exactly what they're going to do.

00:47:06.880 --> 00:47:12.020
So the doctor can take this application
and you can slice the knee that way.

00:47:12.020 --> 00:47:14.680
Well, that's not exactly
what I was looking for.

00:47:14.760 --> 00:47:17.640
So I'm actually going to do it this way.

00:47:17.990 --> 00:47:21.280
And I think that's kind
of what I'm looking for.

00:47:21.280 --> 00:47:23.620
I'm going to remove some layers here.

00:47:23.930 --> 00:47:26.760
And yeah, that's right,
we're doing an ACL procedure.

00:47:26.760 --> 00:47:28.880
So that's this area.

00:47:28.880 --> 00:47:31.880
My hand's a little shaky here,
so you probably don't want

00:47:31.880 --> 00:47:33.400
me working on your knee.

00:47:33.870 --> 00:47:35.220
and there it is.

00:47:35.220 --> 00:47:37.810
So the great thing about this,
it also allows us integration

00:47:37.810 --> 00:47:41.880
with share sheets and allows
the doctor to send this to,

00:47:41.880 --> 00:47:43.740
via email, their patient.

00:47:43.740 --> 00:47:46.900
So they can say the patient
didn't wonder where it was and

00:47:46.900 --> 00:47:49.770
they can ask some questions about
it and the doctor can do that.

00:47:49.930 --> 00:47:55.440
So that's a great thing and we
can turn off the pen and as you

00:47:55.440 --> 00:47:57.620
can see now it's interactive.

00:47:57.620 --> 00:48:00.980
We can remove some more layers
and as a student you can

00:48:01.310 --> 00:48:04.950
definitely look at the knee,
learn about it and that's great.

00:48:05.300 --> 00:48:06.470
But there's another piece to it.

00:48:06.560 --> 00:48:10.420
The fact that they built this
application using the eight graphics

00:48:10.500 --> 00:48:13.510
APIs we have on iOS and OS X,
there's also an iPhone

00:48:13.930 --> 00:48:15.540
and iPad application.

00:48:15.540 --> 00:48:19.490
So let's bring up the iPad.

00:48:23.500 --> 00:48:28.340
And so here you have the same
application running on the iPad.

00:48:28.340 --> 00:48:30.820
So if the patient comes into the office
and they still have further questions,

00:48:30.900 --> 00:48:33.440
they couldn't figure out exactly
what the physician was talking about

00:48:33.440 --> 00:48:36.730
and they want to see what happened
when they ruptured their Achilles,

00:48:36.730 --> 00:48:40.540
they can bring up an integrated
video here for an ACL tear.

00:48:40.540 --> 00:48:44.280
And this video is integrated
directly into the application

00:48:44.280 --> 00:48:48.100
seamlessly and it will show the
patient what goes on with it.

00:48:48.100 --> 00:48:51.880
So it's great because they've taken
this great design where everything is

00:48:51.880 --> 00:48:55.960
completely seamless and so you don't
feel like you're moving in and out of

00:48:55.960 --> 00:48:57.660
different modes in the application.

00:48:57.660 --> 00:49:01.380
Okay, well now we're back to our
knee and that's fantastic.

00:49:01.380 --> 00:49:04.540
A fantastic use of graphics
technology for this application.

00:49:14.800 --> 00:49:17.160
So that was Neapro 3 by 3D for Medical.

00:49:17.160 --> 00:49:19.830
The idea here is not to
take apart the needs,

00:49:19.900 --> 00:49:22.040
but the idea here is to
think about your application,

00:49:22.040 --> 00:49:25.180
your design,
and look at how our graphics APIs can

00:49:25.270 --> 00:49:29.500
really solve those problems for
you across our entire platform,

00:49:29.500 --> 00:49:32.180
entire ecosystem, both iOS and OS X.

00:49:32.180 --> 00:49:34.810
In many cases,
the graphic APIs are identical or

00:49:34.810 --> 00:49:37.110
nearly identical across the platform.

00:49:37.110 --> 00:49:41.350
So we provide you with a
ton of great graphics APIs,

00:49:41.420 --> 00:49:45.940
and the call to action here is
to adopt these modern graphics

00:49:45.940 --> 00:49:47.270
APIs in your application.

00:49:47.280 --> 00:49:50.180
We can't wait to see
what you do with them.

00:49:50.180 --> 00:49:52.970
So with that,
I'd like to invite Eric Albert,

00:49:53.260 --> 00:49:56.770
Director of Security and Privacy,
up on stage to talk about

00:49:56.770 --> 00:49:58.360
our next action item.

00:50:06.100 --> 00:50:10.600
Jeff Zients, and Jeff Zients,
the foundation of security is trust.

00:50:10.600 --> 00:50:15.180
And trust starts with distributing
your application from a trusted source.

00:50:15.180 --> 00:50:18.070
Of course, as you all know,
the best trusted source

00:50:18.160 --> 00:50:19.600
out there is the App Store.

00:50:19.600 --> 00:50:22.340
We have great App Stores
for the Mac and for iOS.

00:50:22.340 --> 00:50:27.360
And all applications that are
distributed through those App Stores

00:50:27.360 --> 00:50:32.980
have a minimum -- have at least a
minimal level of security assurance.

00:50:33.100 --> 00:50:36.460
But on the Mac,
not all applications can be

00:50:36.460 --> 00:50:38.500
distributed through the App Store.

00:50:38.500 --> 00:50:43.100
And so as Craig mentioned this morning,
when we introduced Mountain Lion,

00:50:43.100 --> 00:50:45.120
we also introduced Gatekeeper.

00:50:45.130 --> 00:50:49.040
That gives all of our users a way to
protect themselves against malware

00:50:49.040 --> 00:50:52.910
by ensuring that all of their
applications come from a trusted source.

00:50:52.910 --> 00:50:58.480
So if you distribute your applications
for the Mac outside of the App Store,

00:50:58.480 --> 00:50:58.980
then you should be able to distribute
your applications from a trusted source.

00:50:58.980 --> 00:50:58.980
And that's the key.

00:50:58.980 --> 00:51:01.800
You should sign your applications
with Gatekeeper today.

00:51:01.890 --> 00:51:02.660
How do you do that?

00:51:02.700 --> 00:51:05.190
We've worked really hard to
make it as simple as possible.

00:51:05.190 --> 00:51:06.430
It's three easy steps.

00:51:06.550 --> 00:51:09.120
First,
sign up for the Mac Developer Program.

00:51:09.260 --> 00:51:11.460
Second,
sign up for a developer ID through

00:51:11.460 --> 00:51:13.200
the Mac Developer Program.

00:51:13.220 --> 00:51:15.590
And third,
sign your application with Xcode.

00:51:15.610 --> 00:51:17.340
Each of these is really simple.

00:51:17.340 --> 00:51:21.360
You should go and do this today if
you distribute your applications

00:51:21.360 --> 00:51:23.040
outside of the App Store.

00:51:23.060 --> 00:51:27.120
Now, once you're distributing your
application through a trusted source,

00:51:27.120 --> 00:51:29.900
then you should make sure that
you protect your users' data.

00:51:29.930 --> 00:51:34.560
And the very first thing to do for that
is if you send data off of the device

00:51:34.920 --> 00:51:38.980
to other systems over the Internet,
you should use HTTPS.

00:51:39.130 --> 00:51:41.940
We have great support
for HTTPS throughout all

00:51:41.940 --> 00:51:44.070
of our networking APIs.

00:51:44.070 --> 00:51:48.560
If you can create a secured
server on the other side,

00:51:48.560 --> 00:51:51.940
then HTTPS allows you to have a
secure channel to send that data over.

00:51:52.000 --> 00:51:54.180
You should go and use
that today if you can.

00:51:54.180 --> 00:51:55.590
But what if you can't?

00:51:55.590 --> 00:51:58.860
What if you're talking to
an untrusted destination?

00:51:58.900 --> 00:52:02.720
Or what if you're writing out
a large amount of information

00:52:02.830 --> 00:52:06.070
on the local system,
and that is sensitive information that

00:52:06.080 --> 00:52:07.820
you want to ensure starts securely?

00:52:07.820 --> 00:52:11.420
In that case, the right thing to do
is to use cryptography.

00:52:11.550 --> 00:52:14.490
Now, cryptography is complicated.

00:52:14.560 --> 00:52:19.310
That's why we have a number of dedicated
engineers who spend a lot of time

00:52:19.310 --> 00:52:24.160
making sure that our cryptography
solutions are secure and are performant

00:52:24.230 --> 00:52:26.100
and are mathematically correct.

00:52:26.100 --> 00:52:28.860
We have two great cryptography
APIs for you on OS X,

00:52:28.860 --> 00:52:29.860
and we have two of them.

00:52:29.860 --> 00:52:32.260
On iOS 10,
use the security transforms API.

00:52:32.260 --> 00:52:35.860
On iOS, use the certificate key
and trust services APIs.

00:52:35.890 --> 00:52:38.580
Now, as I mentioned,
cryptography is complicated.

00:52:38.680 --> 00:52:42.330
And if you have a small amount of
information that you want to store

00:52:42.330 --> 00:52:46.310
on the local system and you want that
information to be stored securely,

00:52:46.310 --> 00:52:49.020
then the right thing to do
is to go use the keychain.

00:52:49.020 --> 00:52:52.240
We've had keychain support
for a number of years now.

00:52:52.240 --> 00:52:54.780
It's built into both iOS and OS X.

00:52:54.780 --> 00:52:58.770
Go read the keychain

00:52:59.170 --> 00:53:03.060
On iOS,
we've got one extra technology that

00:53:03.060 --> 00:53:06.300
I wanted to call out specifically today,
and that's data protection.

00:53:06.300 --> 00:53:11.870
We have specially engineered our iOS
hardware to ensure that we can store user

00:53:11.870 --> 00:53:16.730
data on our local systems in a way that's
encrypted such that it cannot be accessed

00:53:16.730 --> 00:53:19.460
unless the user types in their passcode.

00:53:19.460 --> 00:53:22.230
There is simply no way for the operating
system to access that data or for

00:53:22.340 --> 00:53:25.370
anyone else to access that data unless
the user types in their passcode.

00:53:26.100 --> 00:53:28.790
If you are writing out
any documents at all,

00:53:28.820 --> 00:53:32.360
any data at all on an iOS system,
then you should go use data

00:53:32.360 --> 00:53:34.900
protection to write that out today.

00:53:34.900 --> 00:53:37.440
We've tried to make it
really simple to adopt.

00:53:37.740 --> 00:53:40.500
There are attributes for
NSFileManager and NSData.

00:53:40.500 --> 00:53:43.310
If you use these to write out your data,
go use these attributes

00:53:43.310 --> 00:53:44.310
and go do that now.

00:53:46.100 --> 00:53:50.000
Data protection is just one
example of the world-class

00:53:50.000 --> 00:53:53.400
security technologies that we've
built into our mobile products.

00:53:53.520 --> 00:53:56.980
And we're so excited about all of those,
and it's a much larger number

00:53:57.000 --> 00:54:00.050
than I can tell you about today,
that we published a paper

00:54:00.150 --> 00:54:01.720
about them last month.

00:54:01.720 --> 00:54:04.510
It's accessible at
apple.com/ipad/business.

00:54:04.510 --> 00:54:07.210
It's called iOS Security May 2012.

00:54:07.310 --> 00:54:08.240
We do security.

00:54:08.470 --> 00:54:11.000
We don't do marketing,
so that is the name.

00:54:11.380 --> 00:54:15.280
Go and read that today if you
want to know all about our

00:54:15.280 --> 00:54:18.400
iOS security technologies.

00:54:18.420 --> 00:54:21.970
So that's action item number eight,
making your application secure.

00:54:22.340 --> 00:54:25.650
Action item number nine is
respect your user's privacy.

00:54:25.650 --> 00:54:29.160
This is something we really
believe strongly in here at Apple,

00:54:29.190 --> 00:54:31.360
and we hope all of you do as well.

00:54:31.510 --> 00:54:34.600
Privacy is all about
transparency and control.

00:54:34.600 --> 00:54:39.240
And transparency is all about telling
the user what information you're

00:54:39.240 --> 00:54:41.840
collecting and why you're collecting it.

00:54:42.050 --> 00:54:43.880
That starts with
providing a privacy check.

00:54:43.880 --> 00:54:43.900
And then you have to make sure that
you're not just checking your phone,

00:54:43.900 --> 00:54:43.900
but you're checking your phone.

00:54:43.900 --> 00:54:43.990
And then you have to make sure that
you're not just checking your phone.

00:54:44.000 --> 00:54:44.290
And then you have to make sure that
you're not just checking your phone.

00:54:44.290 --> 00:54:47.190
And then you have to make sure that
you're not just checking your phone.

00:54:47.190 --> 00:54:48.510
And that's a privacy statement.

00:54:48.590 --> 00:54:50.640
We have support for this
through iTunes Connect.

00:54:50.640 --> 00:54:53.180
You can give us a link to a privacy
statement that describes what

00:54:53.180 --> 00:54:56.360
information your application collects,
what you do with that information,

00:54:56.360 --> 00:54:57.840
why you collect that information.

00:54:57.840 --> 00:54:59.640
If you go and provide
those links to us today,

00:54:59.860 --> 00:55:01.800
those links will show up next
to your application on the

00:55:01.960 --> 00:55:03.750
App Store later this year.

00:55:04.210 --> 00:55:08.610
Within your own application, though,
again, you should say what information

00:55:08.650 --> 00:55:10.410
you're collecting and why.

00:55:10.410 --> 00:55:14.400
And also, you should strive to collect
as little as possible.

00:55:14.400 --> 00:55:17.770
In general, if your application doesn't
need a particular piece

00:55:17.770 --> 00:55:21.370
of information to operate,
then ideally you wouldn't collect it.

00:55:21.450 --> 00:55:23.950
If you want to collect more
information beyond that,

00:55:23.950 --> 00:55:27.070
then for each piece of data, again,
say what you're collecting,

00:55:27.070 --> 00:55:30.040
why you're collecting it,
and try to minimize all of that.

00:55:30.840 --> 00:55:35.190
And for any of that data, you should,
of course, provide control to the user.

00:55:35.190 --> 00:55:38.380
So if a piece of information
isn't specifically required,

00:55:38.380 --> 00:55:41.270
then you should ask the
user's permission before your

00:55:41.270 --> 00:55:43.450
application actually collects it.

00:55:43.520 --> 00:55:46.680
When you're asking for permission,
ask for that in context

00:55:46.680 --> 00:55:48.120
and provide a purpose.

00:55:48.120 --> 00:55:51.570
So, for example,
it makes far more sense if you're trying

00:55:51.570 --> 00:55:55.730
to collect the user's email address,
say for the purpose of notifying

00:55:55.730 --> 00:56:00.060
them about product updates or new
products that you're developing,

00:56:00.060 --> 00:56:00.820
to do that.

00:56:00.820 --> 00:56:04.500
So, if you're asking for permission
to do so in a sheet that says,

00:56:04.500 --> 00:56:08.120
"Hey, I'd like to tell you about
new products or new services.

00:56:08.140 --> 00:56:11.910
Would you like to receive email
about this?" As opposed to asking

00:56:11.910 --> 00:56:16.090
for their email address in some
other part of your application.

00:56:16.430 --> 00:56:17.980
Whenever you're asking
for data like this,

00:56:17.980 --> 00:56:20.590
you should allow the user
to change their mind.

00:56:20.620 --> 00:56:22.700
The first time someone
downloads their application,

00:56:22.700 --> 00:56:24.090
they may not be familiar with you.

00:56:24.100 --> 00:56:26.140
They may not trust you or your company.

00:56:26.140 --> 00:56:28.670
They may not be comfortable giving
you extra bits of information.

00:56:28.680 --> 00:56:30.830
So they may initially say no.

00:56:30.830 --> 00:56:33.850
You should always then, of course,
allow them to go back afterwards

00:56:33.850 --> 00:56:36.840
and decide later that they are more
comfortable and that they do want

00:56:36.840 --> 00:56:38.670
to share that information with you.

00:56:39.020 --> 00:56:41.890
But, of course, on the other side,
someone may decide that they're

00:56:41.970 --> 00:56:44.200
comfortable sharing information
with you today and that

00:56:44.290 --> 00:56:45.800
they're not comfortable later.

00:56:45.800 --> 00:56:47.850
And they should be able to
go back and tell you no,

00:56:47.850 --> 00:56:50.110
at which point you should
then delete the information

00:56:50.110 --> 00:56:51.820
that's stored on your systems.

00:56:51.820 --> 00:56:54.280
And, of course,
whenever the user says no,

00:56:54.320 --> 00:56:56.780
your application should fail gracefully.

00:56:56.780 --> 00:57:00.240
If you don't specifically need a
piece of information to be able

00:57:00.240 --> 00:57:03.980
to have your application function,
then it should continue to work

00:57:03.980 --> 00:57:07.280
just fine if the user doesn't
provide that data to you.

00:57:07.300 --> 00:57:09.000
So I'd like to talk about
the application function.

00:57:09.000 --> 00:57:13.560
I'd like to talk about one feature
in iOS 6 and in Mountain Lion that

00:57:13.560 --> 00:57:18.850
Scott touched on briefly this morning
where we've tried to bring transparency

00:57:18.850 --> 00:57:21.360
and control to more of our users.

00:57:21.360 --> 00:57:24.020
And that is data isolation.

00:57:24.040 --> 00:57:27.320
Of course, you're all familiar with
the alert shown here.

00:57:27.320 --> 00:57:30.850
We've shown this for location
services for a while now,

00:57:30.850 --> 00:57:33.520
including both iOS 5 and in OS X Lion.

00:57:33.520 --> 00:57:36.880
And this alert appears whenever
your application tries to request

00:57:36.880 --> 00:57:38.550
the user's current location.

00:57:38.930 --> 00:57:42.180
And of course,
they can say yes or they can say no.

00:57:42.310 --> 00:57:47.510
And now in iOS 6 and in Mountain Lion,
we are extending this to contacts.

00:57:47.610 --> 00:57:53.240
So whenever your application tries to
access the user's list of contacts,

00:57:53.380 --> 00:57:58.380
the operating system will
automatically display an alert that

00:57:58.380 --> 00:58:01.330
will request permission to do so.

00:58:05.230 --> 00:58:09.100
And also in iOS 6,
we're extending this to calendars,

00:58:09.190 --> 00:58:11.230
photos, and reminders.

00:58:11.230 --> 00:58:14.080
So if your application
uses any of these APIs,

00:58:14.190 --> 00:58:18.550
then the operating system will
automatically display alerts

00:58:18.700 --> 00:58:20.330
like the ones you've seen.

00:58:21.060 --> 00:58:25.800
So that explains the context,
but what about purpose?

00:58:25.820 --> 00:58:28.800
Because you do want to be able to
explain why your application is

00:58:28.840 --> 00:58:30.960
trying to access this information.

00:58:30.960 --> 00:58:35.710
So we're giving you the ability in
all of your applications to modify

00:58:35.710 --> 00:58:39.030
those alerts to display the purpose.

00:58:39.060 --> 00:58:41.930
There's a support for a purpose
string for each of these data

00:58:41.930 --> 00:58:43.900
classes in your Info.plist.

00:58:43.920 --> 00:58:45.010
Xcode has a great UI for that.

00:58:45.010 --> 00:58:47.560
And with the developer previews
that you're getting today,

00:58:47.560 --> 00:58:51.000
you can go and create that
for your applications now.

00:58:51.110 --> 00:58:54.000
I do want to reiterate, of course,
as you've always had to

00:58:54.000 --> 00:58:56.510
do with location services,
and as I mentioned earlier,

00:58:56.660 --> 00:58:59.670
your application should fail
gracefully if the user says no.

00:58:59.790 --> 00:59:02.750
If they decide not to share
their contacts with you,

00:59:02.950 --> 00:59:07.000
then you will get an empty contacts
list back or empty calendars,

00:59:07.000 --> 00:59:09.430
an empty list of photos, et cetera.

00:59:09.430 --> 00:59:13.540
Your application should continue
to work properly in those cases.

00:59:13.990 --> 00:59:18.620
And of course, we're going to allow users
to change their minds.

00:59:18.730 --> 00:59:24.340
So we have new privacy settings
in both iOS and in OS X,

00:59:24.440 --> 00:59:27.850
very similar to what we've
always had for location services,

00:59:27.850 --> 00:59:32.580
which allow all of these data
classes to be turned off and on.

00:59:33.270 --> 00:59:35.800
And that is action item number nine,
privacy.

00:59:35.850 --> 00:59:39.890
And to talk about the next action item,
I'd like to introduce Andreas Wendker,

00:59:39.890 --> 00:59:42.600
our senior director
of tools and services.

00:59:48.300 --> 00:59:51.560
Thank you, Eric.

00:59:51.670 --> 00:59:55.350
Most of our customers use our latest
and greatest hardware and software,

00:59:55.350 --> 01:00:00.060
and they expect your apps to make the
best possible use of our latest APIs and

01:00:00.060 --> 01:00:01.900
our latest hardware capabilities.

01:00:01.970 --> 01:00:05.010
And so your Action Item #10 is
to always upgrade to the latest

01:00:05.010 --> 01:00:08.810
release of our Xcode Developer Tools,
because that's how you

01:00:08.810 --> 01:00:10.890
get access to these APIs.

01:00:11.440 --> 01:00:13.700
Let's look at that in
a little more detail.

01:00:13.720 --> 01:00:17.500
Apple's hardware sales have simply
exploded over the last several years.

01:00:17.530 --> 01:00:21.790
In each of the last two quarters,
we sold more than 50 million iPhones,

01:00:21.860 --> 01:00:23.520
iPads, and Macs.

01:00:23.630 --> 01:00:27.380
Simply based on these huge sales numbers,
most of our users actually use

01:00:27.380 --> 01:00:30.020
our latest generation devices.

01:00:30.050 --> 01:00:33.140
And at the same time,
because of the electronic software

01:00:33.140 --> 01:00:37.230
distribution mechanisms that we use,
our updates to iOS and OS X reach

01:00:37.230 --> 01:00:39.440
our customers very quickly.

01:00:39.460 --> 01:00:42.990
Lion has seen the fastest
customer adoption rate of

01:00:43.050 --> 01:00:44.940
any OS X release to date.

01:00:44.940 --> 01:00:47.620
And we expect that to continue when
we ship Mountain Lion later this year.

01:00:49.340 --> 01:00:54.840
and astonishing 80% of our Mac users
are either online or on Snow Leopard.

01:00:54.840 --> 01:00:58.640
And the picture is even better on iOS,
where custom adoption has already far

01:00:58.640 --> 01:01:03.080
progressed just days after we made
an update available to our end users.

01:01:03.460 --> 01:01:06.540
So with our users living on
the latest OSs and having the

01:01:06.540 --> 01:01:09.660
latest devices in their hands,
the best thing you can do for your

01:01:09.660 --> 01:01:13.420
apps is to bring them fully up to
date on our latest APIs and tuning

01:01:13.450 --> 01:01:15.830
them for our latest hardware.

01:01:18.120 --> 01:01:21.970
You just simply expect that you
support features like iCloud,

01:01:22.030 --> 01:01:25.300
Game Center, or AirPlay,
and they expect that you optimize your

01:01:25.300 --> 01:01:29.430
apps for high-resolution retina displays,
mighty core processors,

01:01:29.430 --> 01:01:31.500
and our newest cameras.

01:01:31.920 --> 01:01:33.700
and why it might be a little
bit of work for you to keep

01:01:33.740 --> 01:01:36.650
your applications fully modern,
it actually also makes your

01:01:36.650 --> 01:01:40.370
work a lot simpler because it
allows you to stay focused.

01:01:42.550 --> 01:01:45.060
What you can see from these
charts is that you can reach

01:01:45.150 --> 01:01:49.050
the majority of customers if you
focus on the latest release of our

01:01:49.080 --> 01:01:51.340
OSs and maybe the previous one.

01:01:51.340 --> 01:01:55.580
So use this to your advantage and don't
worry about older versions of our OSs.

01:01:55.580 --> 01:01:58.170
You're far better off staying
focused on innovation,

01:01:58.220 --> 01:02:00.540
keeping your applications
fresh and modern,

01:02:00.540 --> 01:02:04.640
and from bringing them
up on these latest APIs.

01:02:04.640 --> 01:02:07.020
And for that,
you need the latest version of Xcode.

01:02:07.190 --> 01:02:10.780
Xcode always ships with our newest SDKs.

01:02:11.320 --> 01:02:13.500
Now there's a common
misunderstanding about our SDKs.

01:02:13.500 --> 01:02:16.700
Some developers believe that they have
to use the version of the tools that

01:02:16.700 --> 01:02:20.200
shipped with the oldest OS version
that they still want to support.

01:02:20.200 --> 01:02:23.960
So sometimes you see developers staying
on an older version of Xcode because,

01:02:24.080 --> 01:02:26.920
for example,
they still want to support iOS 4.

01:02:27.030 --> 01:02:30.000
But the reality is that all
our SDKs support developing

01:02:30.000 --> 01:02:31.820
for older deployment targets.

01:02:31.880 --> 01:02:36.380
And the best way to develop on our
platforms is to use the latest Xcode

01:02:36.380 --> 01:02:40.950
and simply set the minimum deployment
target in your project settings.

01:02:42.580 --> 01:02:43.980
So later this year,
we are planning to ship

01:02:44.100 --> 01:02:46.500
two new releases of Xcode.

01:02:46.520 --> 01:02:49.500
Xcode 4.4 is going to ship
together with Mountain Lion,

01:02:49.630 --> 01:02:52.220
and it's going to contain the 10.8 SDK.

01:02:52.220 --> 01:02:54.920
And Xcode 4.5 is going
to ship with iOS 6.

01:02:54.950 --> 01:03:00.090
And in addition to the 10.8 SDK,
it's going to contain the iOS 6 SDK.

01:03:02.410 --> 01:03:05.540
Aside from these SDK differences,
these Xcode releases are actually

01:03:05.540 --> 01:03:07.340
going to be mostly identical.

01:03:07.440 --> 01:03:09.690
And I'm very happy to let you
know that later this afternoon,

01:03:09.710 --> 01:03:12.880
you'll be able to download a
developer preview of Xcode 4.5,

01:03:12.900 --> 01:03:17.300
again with both of these new SDKs,
from the WWDC attendee website.

01:03:17.340 --> 01:03:21.300
So go download that later this evening
and let us know what you think about it.

01:03:22.720 --> 01:03:25.320
In addition to some very
significant improvements to

01:03:25.420 --> 01:03:29.740
stability and performance,
these exercises actually contain a rather

01:03:29.740 --> 01:03:31.420
large number of very useful features.

01:03:31.470 --> 01:03:34.090
We've made a very big push to
really focus on the bugs that

01:03:34.170 --> 01:03:37.550
you told us are most problematic,
and we added specifically the

01:03:37.610 --> 01:03:39.200
features that you asked for.

01:03:39.200 --> 01:03:44.390
And one of these features
is Auto Layout for iOS.

01:03:50.230 --> 01:03:52.730
And to show you,
I'm going to ask Max Drukmann,

01:03:52.730 --> 01:03:57.430
our senior AI designer for Xcode,
to come up on stage for our demo.

01:03:59.310 --> 01:04:02.590
Thank you, Andreas.

01:04:02.680 --> 01:04:05.860
So last year we introduced
Auto Layout with OS X Lion,

01:04:05.860 --> 01:04:07.820
and it's been a huge success.

01:04:07.970 --> 01:04:12.910
Auto Layout allows you to easily and
expressively control the positioning and

01:04:12.910 --> 01:04:18.520
sizing of your user interface elements,
both at design time and runtime.

01:04:18.750 --> 01:04:24.860
Let's have a look at that as well as some
improvements we've made for localization.

01:04:24.910 --> 01:04:26.890
Let's go to the iPad.

01:04:27.680 --> 01:04:30.880
Where I have a travel app I'm working on.

01:04:31.260 --> 01:04:35.430
This app allows my users to
explore some of the sites that

01:04:35.430 --> 01:04:40.520
San Francisco has to offer visitors,
as well as to add them to an

01:04:40.620 --> 01:04:44.660
itinerary they build up and
find sites that are nearby.

01:04:44.660 --> 01:04:49.700
Now, speaking of sites that are nearby,
I want to add one of those great

01:04:49.700 --> 01:04:52.590
new Apple map views to my interface.

01:04:52.590 --> 01:04:55.900
And while I'm at it,
there's an area in the bottom

01:04:55.990 --> 01:04:58.770
left corner of my interface that,
I don't know,

01:04:58.770 --> 01:05:00.570
I'm not liking it very much.

01:05:00.700 --> 01:05:03.290
The data is all kind of running together.

01:05:03.440 --> 01:05:07.500
So let's go to the Mac and
I'll show you in Xcode how

01:05:07.900 --> 01:05:11.170
Auto Layout helps me get my job done.

01:05:13.410 --> 01:05:14.900
So here's my storyboard in Xcode.

01:05:15.060 --> 01:05:17.570
Let's dive right in to the
area in the bottom left.

01:05:17.670 --> 01:05:21.260
I'm calling it the facts
and figures section.

01:05:21.270 --> 01:05:22.840
So there are a number
of labels down here,

01:05:22.840 --> 01:05:26.440
these bold ones, year built, length,
height, et cetera.

01:05:26.510 --> 01:05:28.400
They all appear to be left aligned.

01:05:28.540 --> 01:05:32.200
But what I'd really like them to
be is right aligned with their

01:05:32.230 --> 01:05:36.020
data next to them left aligned,
sort of a two-column layout.

01:05:36.020 --> 01:05:38.180
That would be much more readable.

01:05:38.230 --> 01:05:42.170
Now, the trick here is that the text
in these labels is actually

01:05:42.170 --> 01:05:43.800
set to be right aligned.

01:05:43.880 --> 01:05:48.150
But the behavior of label objects
is to size to fit their contents.

01:05:48.310 --> 01:05:52.080
That's what's making them
appear to be left aligned.

01:05:52.080 --> 01:05:57.280
So what I need to do is I need to make
all of these elements be the same width.

01:05:57.280 --> 01:06:01.230
Now, I can do that by just dragging them
around on the canvas or entering the

01:06:01.230 --> 01:06:03.430
same width value in the inspector.

01:06:03.430 --> 01:06:07.670
But what I'd really like to do is I'd
like to tell these objects that their

01:06:07.670 --> 01:06:09.040
widths should be pinned to the data.

01:06:09.040 --> 01:06:09.040
So I'm going to do that by just dragging
them around on the canvas or entering

01:06:09.040 --> 01:06:09.040
the same width value in the inspector.

01:06:09.040 --> 01:06:09.040
But what I'd really like to do is I'd
like to tell these objects that their

01:06:09.040 --> 01:06:09.040
widths should be pinned to the data.

01:06:09.040 --> 01:06:09.040
So I'm going to do that by just dragging
them around on the canvas or entering

01:06:09.040 --> 01:06:09.170
the same width value in the inspector.

01:06:09.170 --> 01:06:09.440
But what I'd really like to do is I'd
like to tell these objects that their

01:06:09.440 --> 01:06:09.440
widths should be pinned to the data.

01:06:09.440 --> 01:06:09.540
So I'm going to do that by just dragging
them around on the canvas or entering

01:06:09.540 --> 01:06:09.540
the same width value in the inspector.

01:06:09.540 --> 01:06:10.270
But what I'd really want to do is I'd
like to tell these objects that their

01:06:10.290 --> 01:06:11.040
widths should be pinned to one another.

01:06:11.110 --> 01:06:13.530
Basically,
what I want is that each of these

01:06:13.530 --> 01:06:18.620
elements should know that it should
grow in response to the others.

01:06:18.620 --> 01:06:22.160
And that's where Auto Layout comes in.

01:06:22.560 --> 01:06:26.190
So if I go in here and
I select all these labels,

01:06:26.300 --> 01:06:31.210
I can, using the Auto Layout menu that's
down here in the bottom right

01:06:31.220 --> 01:06:35.800
corner of the storyboard canvas,
I can tell Auto Layout that I want

01:06:35.800 --> 01:06:38.400
to pin their widths equally.

01:06:38.400 --> 01:06:42.370
Now, what that does is it tells
Auto Layout that my intent here is to

01:06:42.370 --> 01:06:48.000
go and find the widest of these objects
and make all the others just as wide.

01:06:48.000 --> 01:06:51.320
And it will keep doing
that at runtime as well,

01:06:51.320 --> 01:06:54.300
even when the content
inside the labels changes.

01:06:56.910 --> 01:06:58.220
Now let's go ahead and add a map.

01:06:58.270 --> 01:07:02.170
I'm going to put it
under this photo view.

01:07:02.320 --> 01:07:08.380
I'll simply drag in a map view
from Xcode's object library.

01:07:08.400 --> 01:07:11.410
I'll place it there and I'll

01:07:11.890 --> 01:07:15.560
I'll size it to match
the width of the photo.

01:07:15.690 --> 01:07:19.830
Now, believe me when I tell you,
you don't want to watch me write code.

01:07:19.830 --> 01:07:25.800
So I'm going to wire this map view up
to an outlet that I created earlier.

01:07:25.800 --> 01:07:28.400
I'll do that with the Assistant Editor.

01:07:28.470 --> 01:07:31.440
I'll simply drag from
the outlet to my view.

01:07:32.140 --> 01:07:33.100
All set.

01:07:33.100 --> 01:07:39.770
Now, I'd also like to make the heights
of the map and the image the same.

01:07:39.830 --> 01:07:42.600
Again, AutoLayout does the trick for me.

01:07:42.710 --> 01:07:47.540
Select them both and
say pin heights equally.

01:07:47.590 --> 01:07:52.250
And AutoLayout makes them the
same height no matter what.

01:07:52.920 --> 01:07:56.160
Now, the buttons across the
top of my interface,

01:07:56.240 --> 01:08:00.660
Sites, Add to itinerary, and Nearby,
those already have their widths pinned.

01:08:00.660 --> 01:08:03.740
So, Auto Layout is making
them all the same width.

01:08:03.830 --> 01:08:08.190
So, if I were to change
Add to itinerary to...

01:08:08.450 --> 01:08:11.440
Itinerary,
Auto Layout does the right thing,

01:08:11.440 --> 01:08:15.520
figures out which is the widest,
and makes all three buttons the same.

01:08:15.520 --> 01:08:19.340
Now, manipulating objects on the
canvas at design time is one

01:08:19.340 --> 01:08:21.570
way my objects can change.

01:08:21.570 --> 01:08:26.000
But another way is at run
time when my app is localized.

01:08:26.170 --> 01:08:31.820
And now new different length strings come
in and my objects need to react to that.

01:08:31.860 --> 01:08:36.120
Now, of course I want to localize
my app because I want Henri's

01:08:36.120 --> 01:08:38.120
mother to be able to use it.

01:08:38.170 --> 01:08:42.060
I know she likes to play games,
but maybe she'll come visit.

01:08:43.320 --> 01:08:49.370
So now in OS X Mountain Lion and iOS 6,
we're introducing a great

01:08:49.380 --> 01:08:51.740
new way to do localizations.

01:08:51.820 --> 01:08:54.580
So gone are the days of
needing a separate ZIP or

01:08:54.580 --> 01:08:56.460
storyboard file per language.

01:08:56.790 --> 01:09:02.720
Now you can work with a single base
ZIP or storyboard file and do all of your

01:09:02.720 --> 01:09:07.130
textual localizations with strings files.

01:09:12.400 --> 01:09:14.160
Yep.

01:09:14.160 --> 01:09:17.600
It really streamlines the whole process.

01:09:17.600 --> 01:09:20.570
You can keep all of your text in
strings files and the OSs will

01:09:20.610 --> 01:09:24.710
pick them up at runtime and provide
the right content in the right

01:09:24.710 --> 01:09:27.760
language that your users expect.

01:09:27.760 --> 01:09:32.350
In Xcode 4.4,
we've even added a localizations

01:09:32.780 --> 01:09:34.910
category to the assistant.

01:09:35.000 --> 01:09:40.700
So now you can work with your interfaces
and your strings side by side.

01:09:40.700 --> 01:09:44.220
Here you can see my German strings
because I also want Andreas'

01:09:44.220 --> 01:09:46.290
mother to be able to use my app.

01:09:46.490 --> 01:09:50.470
And with that, I've developed quite
a little niche market.

01:09:51.890 --> 01:09:57.950
Let's go ahead and see what Andreas'
mom will see when she runs my app.

01:09:57.990 --> 01:10:02.740
I'm going to run my app in the simulator,
which I've already set

01:10:02.740 --> 01:10:04.530
up to run in German.

01:10:05.340 --> 01:10:05.870
Here's my app.

01:10:05.940 --> 01:10:08.870
You can see my beautiful new map.

01:10:08.870 --> 01:10:11.970
And you can see that it's
sized the same as my photo.

01:10:12.010 --> 01:10:15.730
So even when I change orientation,
Auto Layout does the right thing

01:10:15.840 --> 01:10:19.270
and keeps them both pinned together.

01:10:22.410 --> 01:10:25.460
And you can see my facts and
figures section now has that great

01:10:25.570 --> 01:10:30.010
two column layout and it keeps
it even as I load in new content

01:10:30.340 --> 01:10:32.470
with different length strings.

01:10:32.580 --> 01:10:34.900
All of this thanks to Auto Layout.

01:10:34.980 --> 01:10:36.500
There's just one word for it.

01:10:36.560 --> 01:10:40.060
It's ausgesichnet.

01:10:40.160 --> 01:10:42.070
Back to you, Andreas.

01:10:48.400 --> 01:10:50.610
Thanks, Max.

01:10:50.710 --> 01:10:54.330
Now, a lot of the power of Xcode
comes from our low-level tools,

01:10:54.340 --> 01:10:57.550
which are based on our LLVM technology.

01:10:57.720 --> 01:10:59.650
In fact,
we are getting very close to the end of a

01:10:59.690 --> 01:11:05.560
transition away from the old and outdated
GCC compiler and GDB debugger to our new,

01:11:05.560 --> 01:11:08.360
fast and modern LLVM and LLDB.

01:11:08.760 --> 01:11:12.740
And while we are still shipping a version
of GCC and GDB in our tools right now,

01:11:12.800 --> 01:11:15.700
we are planning to drop
them entirely next year.

01:11:15.700 --> 01:11:19.930
So if you are one of the few developers
still utilizing these old dinosaurs,

01:11:19.930 --> 01:11:23.800
now is the time for you
to move off of them.

01:11:26.670 --> 01:11:30.910
So LLVM does not only give you better
compile times and faster generated code,

01:11:30.910 --> 01:11:33.550
it also gives you access to new
programming language features

01:11:33.620 --> 01:11:36.340
that we have been adding
over the last several years.

01:11:36.370 --> 01:11:39.460
Let's review those starting with C++.

01:11:39.700 --> 01:11:43.990
We actually significantly increased our
support for C++ last year with Xcode 4,

01:11:44.000 --> 01:11:48.300
and we shipped the first version
of our LLVM frontend for C++.

01:11:48.370 --> 01:11:52.840
And since then, we've been busy adding
features to support C++ 11.

01:11:52.960 --> 01:11:55.090
Some of these features are
listed here on the slide.

01:11:55.130 --> 01:11:58.960
We even added a new C++ runtime library,
which removed the last

01:11:58.960 --> 01:12:01.780
dependencies on GCC that we have.

01:12:01.900 --> 01:12:05.710
And later this year,
with Xcode 4.4-- oops--

01:12:05.990 --> 01:12:09.580
With Xcode 4.4,
we're going to get a lot closer to

01:12:09.580 --> 01:12:16.010
completing our support for C++ 11 with
the addition of several more features,

01:12:16.090 --> 01:12:19.080
most importantly, Lambda functions,
which I know a lot of your C++

01:12:19.180 --> 01:12:20.730
developers have been waiting for.

01:12:20.740 --> 01:12:23.610
So with Xcode 4.4,
LLVM is going to be one of the

01:12:23.610 --> 01:12:27.180
most complete C++ 11 compilers
available on the market.

01:12:32.970 --> 01:12:35.900
But our language of choice is, of course,
Objective-C.

01:12:35.920 --> 01:12:38.850
Objective-C, that's right.

01:12:41.400 --> 01:12:43.990
Objective-C is a highly dynamic
programming language that drives

01:12:43.990 --> 01:12:46.300
almost all our system APIs.

01:12:46.300 --> 01:12:48.330
For the last few years,
we've been on a path to

01:12:48.580 --> 01:12:52.270
make the language simpler,
faster, and safer.

01:12:52.340 --> 01:12:55.380
We started this a couple years
back with Objective-C 2.0,

01:12:55.380 --> 01:12:58.300
which added features like
properties and fast enumerators.

01:12:58.300 --> 01:13:00.530
And since then,
we've added several more very

01:13:00.530 --> 01:13:04.410
powerful features to the language,
most importantly blocks, and lastly,

01:13:04.530 --> 01:13:07.600
of course,
also automatic reference counting,

01:13:07.600 --> 01:13:08.300
or ARC.

01:13:08.960 --> 01:13:12.630
With Arc, you let the compiler handle and
optimize memory management for you

01:13:12.670 --> 01:13:16.000
so that you don't have to type,
retain, and release anymore.

01:13:16.160 --> 01:13:18.930
With Arc,
the compiler performs an analysis of your

01:13:18.930 --> 01:13:23.160
code and will choose the right memory
management technique for each situation.

01:13:23.300 --> 01:13:27.140
That gives you the robustness comparable
to a garbage collected language,

01:13:27.180 --> 01:13:31.000
but also gives you the performance and
the lower memory usage of an application

01:13:31.000 --> 01:13:34.200
where you manage memory yourself.

01:13:34.890 --> 01:13:37.500
And Arc has been a very
strong success for us.

01:13:37.690 --> 01:13:41.070
There are already tens of thousands
of applications in the App Store that

01:13:41.070 --> 01:13:43.380
you guys submitted utilizing Arc.

01:13:43.380 --> 01:13:46.150
And if you haven't given it a try yet,
we recommend that you check

01:13:46.150 --> 01:13:49.580
it out and consider it for
the next version of your app.

01:13:49.920 --> 01:13:52.040
In fact,
we feel so strong about Arc being

01:13:52.040 --> 01:13:55.020
the right approach to memory
management that we have decided to

01:13:55.050 --> 01:13:59.070
deprecate garbage collection in OS X.

01:14:03.650 --> 01:14:06.550
So if you're currently shipping
an application using GC,

01:14:06.550 --> 01:14:09.100
then you need to move it over
to ARC in the near future.

01:14:09.110 --> 01:14:10.940
And to make that a little
bit easier for you,

01:14:10.950 --> 01:14:15.830
we're adding a translator into Xcode that
will translate your GC code to ARC code.

01:14:15.880 --> 01:14:18.710
And if you want to start on that early,
come see us in the labs this week.

01:14:18.800 --> 01:14:21.710
We'll make sure that you're
set up for this transition.

01:14:23.220 --> 01:14:26.610
So with all these features in
Objective-C that I've described,

01:14:26.610 --> 01:14:29.590
you've not only made your
code more compact and faster,

01:14:29.590 --> 01:14:32.100
you've also made it a lot more concise.

01:14:32.160 --> 01:14:35.220
You can see a few examples
here on the screen,

01:14:35.230 --> 01:14:38.000
where you see kind of on the left side,
code how you would have

01:14:38.000 --> 01:14:41.100
written it several years ago,
and code how you would write it nowadays.

01:14:41.100 --> 01:14:43.440
As you can see,
there's a lot less boilerplate code,

01:14:43.440 --> 01:14:45.100
it's a lot more compact nowadays.

01:14:45.180 --> 01:14:47.100
We're going to make this
even better for you.

01:14:47.100 --> 01:14:49.690
First of all,
we're adding number literals

01:14:49.810 --> 01:14:51.100
and expression boxing.

01:14:51.150 --> 01:14:53.430
This is--

01:14:56.000 --> 01:14:57.960
This is very similar to string literals.

01:14:57.970 --> 01:15:01.950
Instead of this kind of code,
you can also type this code.

01:15:09.700 --> 01:15:12.980
Next, we'll make it much easier for
you to access collection classes

01:15:12.980 --> 01:15:15.240
with the new subscripting syntax.

01:15:15.270 --> 01:15:19.490
So instead of this kind of code,
you can simply type this kind of code.

01:15:25.000 --> 01:15:27.110
And also to reduce
redundancy in your code,

01:15:27.110 --> 01:15:29.720
we are turning on automatic
property synthesis,

01:15:29.720 --> 01:15:32.290
which means that in most cases...

01:15:37.360 --> 01:15:40.140
Which means in most cases you don't
have to type at synthesizer anymore

01:15:40.140 --> 01:15:42.480
in your implementation files.

01:15:44.390 --> 01:15:47.640
So all these features are implemented
in the LLVM compiler without the

01:15:47.640 --> 01:15:49.870
need for any kind of runtime changes.

01:15:49.980 --> 01:15:53.240
So that means that they not only
work on mountain line and iOS 6,

01:15:53.240 --> 01:15:55.620
but also on older versions of our OS.

01:15:55.620 --> 01:15:59.130
So this is really a great example for
where it pays off for you to be on the

01:15:59.130 --> 01:16:03.560
latest version of Xcode while preserving
the ability to deploy your apps on

01:16:03.560 --> 01:16:06.040
the previous version of our OSes.

01:16:06.040 --> 01:16:09.310
So action item number 10 is to always
upgrade to the latest version of Xcode.

01:16:09.310 --> 01:16:11.200
And with that,
I'm going to hand it back to Henri.

01:16:14.300 --> 01:16:16.290
Thank you.

01:16:22.860 --> 01:16:37.420
10 Action Items for Today 10
Things We Care About Let me recap:

01:16:37.420 --> 01:16:39.330
Don't skimp on design.

01:16:39.650 --> 01:16:45.840
Integrate with iCloud.

01:16:46.240 --> 01:16:49.080
Specifically, adopt iCloud storage.

01:16:49.080 --> 01:16:50.650
Make your app localize your app.

01:16:50.780 --> 01:16:53.580
Make it available worldwide.

01:16:53.870 --> 01:16:57.480
Make your application
usable by everybody.

01:16:57.540 --> 01:17:01.440
Adopt VoiceOver and make
your application accessible.

01:17:01.710 --> 01:17:05.480
Adopting or sharing APIs.

01:17:05.500 --> 01:17:10.980
Make your game social by
adopting Game Center or AirPlay.

01:17:11.010 --> 01:17:15.020
Adopt modern API for graphics and media.

01:17:15.030 --> 01:17:17.370
Make your app secure.

01:17:18.000 --> 01:17:24.000
[Transcript missing]

01:17:24.950 --> 01:17:29.800
and finally,
add up the little tools and little SDK.

01:17:30.020 --> 01:17:33.750
So, 10 action items for you today.

01:17:36.370 --> 01:17:42.060
We announced also today that there is a
pre-release of iOS 6 available and the

01:17:42.060 --> 01:17:44.440
almost final release of Mountain Lion.

01:17:44.440 --> 01:17:45.460
Try them out.

01:17:45.500 --> 01:17:48.910
Also the tools and SDK are going
to be available later on today.

01:17:48.910 --> 01:17:50.640
Try them out too.

01:17:50.640 --> 01:17:52.870
So thank you very much
for coming this afternoon.

01:17:53.130 --> 01:17:54.580
Have a great week.

01:17:54.580 --> 01:17:56.360
Thank you.