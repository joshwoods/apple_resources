WEBVTT

00:00:11.990 --> 00:00:18.260
Good afternoon, and welcome to the
Developer Tools Kickoff.

00:00:18.260 --> 00:00:19.640
Thank you.

00:00:21.500 --> 00:00:23.660
Thank you very much.

00:00:23.720 --> 00:00:27.340
Just over a year ago,
we released Xcode 4.0,

00:00:27.340 --> 00:00:30.330
a brand-new release of
Apple's Developer Tools.

00:00:30.380 --> 00:00:32.990
And with this release,
we took Apple's Developer Tools to

00:00:32.990 --> 00:00:34.940
a whole new level.

00:00:35.050 --> 00:00:37.140
We reimagined the user interface.

00:00:37.230 --> 00:00:40.820
We implemented some streamlined
workflows that scaled really

00:00:40.820 --> 00:00:43.160
well to large and small screens.

00:00:43.290 --> 00:00:46.760
We focused on integrating really
great design and editing tools,

00:00:46.810 --> 00:00:49.690
and then harmonizing them
together through Apple's

00:00:49.690 --> 00:00:51.310
new Xcode Assistant Editor.

00:00:53.210 --> 00:00:56.100
We built in tools for source code
management to allow you to review

00:00:56.100 --> 00:01:00.440
and refine your changes as a natural
part of your developer workflow.

00:01:00.590 --> 00:01:04.430
And we built the LLVM technologies
right into the IDE so you could

00:01:04.430 --> 00:01:06.900
use the power throughout the UI.

00:01:06.990 --> 00:01:10.660
Now, we built on this momentum and
brought you a number of great

00:01:10.750 --> 00:01:13.120
Xcode releases over the last year.

00:01:13.120 --> 00:01:17.760
This past summer, alongside OS X Lion,
we shipped Xcode 4.1.

00:01:17.810 --> 00:01:20.640
And in Xcode 4.1,
we included a great new technology,

00:01:20.760 --> 00:01:24.700
Auto Layout for OS X,
which is a great way for you to define

00:01:24.700 --> 00:01:28.200
and refine the layout for your UIs.

00:01:28.450 --> 00:01:33.060
Last fall, alongside iOS 5,
we shipped Xcode 4.2.

00:01:33.130 --> 00:01:35.850
Xcode 4.2 had some brilliant
technologies in it,

00:01:35.850 --> 00:01:39.930
storyboards for iOS,
and also the new OpenGL ES Debugger,

00:01:40.050 --> 00:01:42.920
a great way for you to
improve and optimize the

00:01:42.930 --> 00:01:45.290
graphics in your applications.

00:01:45.430 --> 00:01:49.540
This spring we shipped you Xcode 4.3,
which brought support for

00:01:49.540 --> 00:01:52.860
Developer ID for OS X,
but it also introduced some significant

00:01:52.860 --> 00:01:57.770
improvements in the packaging and
distribution of the Xcode tools.

00:01:58.350 --> 00:02:02.060
With Xcode 4.3, we kind of turned the
tools on their head a bit.

00:02:02.160 --> 00:02:06.140
Instead of shipping you a large
Developer folder full of disparate tools,

00:02:06.230 --> 00:02:10.100
we instead are now going to ship you
a single Xcode.app with everything

00:02:10.100 --> 00:02:12.340
you need embedded directly inside.

00:02:12.430 --> 00:02:15.960
And this has really been a great
improvement for the installation

00:02:15.960 --> 00:02:18.200
and update experience for the tools.

00:02:18.600 --> 00:02:22.320
In addition to repackaging Xcode,
we also broke out some of the related

00:02:22.320 --> 00:02:26.500
tools for the development process
into smaller incremental packages.

00:02:26.640 --> 00:02:29.960
And these packages are focused
around kind of domain-specific areas,

00:02:29.960 --> 00:02:34.900
things like graphics applications,
audio tools, and hardware utilities.

00:02:35.010 --> 00:02:36.940
Now,
these packages are available from Apple's

00:02:37.000 --> 00:02:40.700
Developer website to download directly,
or you can download them through Xcode,

00:02:40.840 --> 00:02:43.140
making it really easy for
you to get these tools

00:02:43.140 --> 00:02:44.900
wherever you want to use them.

00:02:45.020 --> 00:02:48.170
And as separate packages,
we gained the ability to update these

00:02:48.170 --> 00:02:52.620
outside of our normal release process,
so we can make sure to get you the latest

00:02:52.620 --> 00:02:55.360
and greatest fixes quickly and easily.

00:02:55.800 --> 00:02:59.700
In addition to these packages,
we also broke out some other content.

00:02:59.700 --> 00:03:02.840
For those of you who may prefer
to bask in the warm glow of

00:03:02.840 --> 00:03:05.850
a terminal window most days,
we also shipped the

00:03:05.910 --> 00:03:07.900
Command Line Tools package.

00:03:07.910 --> 00:03:11.070
This package gives you all the
tools necessary to work with your

00:03:11.090 --> 00:03:14.700
open source and community projects
directly from the command line.

00:03:14.820 --> 00:03:18.700
So whether you'd like to use a graphical
IDE or you'd like to stay in terminal,

00:03:18.760 --> 00:03:22.690
you now have the ability to access
all of Apple's Developer Tools to

00:03:22.690 --> 00:03:24.490
work with these projects.

00:03:25.420 --> 00:03:29.130
Last year we stood up on stage
here at WWDC and said we were going

00:03:29.130 --> 00:03:33.640
to improve the installation and
update experience with the tools.

00:03:33.780 --> 00:03:37.190
At the time we were shipping an
installer app in the App Store,

00:03:37.240 --> 00:03:40.500
which meant getting the tools
was a multi-step process.

00:03:40.630 --> 00:03:44.760
You had to download the installer,
you had to find the installer,

00:03:44.880 --> 00:03:47.000
you had to run the installer,
and then you could get

00:03:47.000 --> 00:03:48.360
access to the tools.

00:03:48.420 --> 00:03:51.000
I'm really happy to say that
getting the tools now is a

00:03:51.000 --> 00:03:52.900
completely hassle-free process.

00:03:52.990 --> 00:03:55.130
You can download Xcode
right from the App Store,

00:03:55.350 --> 00:03:58.570
just as you would any of the
other thousands of applications.

00:03:58.680 --> 00:04:01.750
And you can be notified
when updates are available.

00:04:01.840 --> 00:04:05.450
So this is a really big improvement
to the installation process.

00:04:05.560 --> 00:04:09.600
But we also wanted to make sure
to update the update process,

00:04:09.700 --> 00:04:13.300
and for that we needed to
address the download size.

00:04:13.520 --> 00:04:17.070
Last year when we shipped Xcode 4.1,
our download size was a

00:04:17.070 --> 00:04:18.820
little bit over 4 gigabytes.

00:04:19.070 --> 00:04:21.890
And I don't think there's anything
more to be said about that.

00:04:22.110 --> 00:04:25.560
When we shipped Xcode 4.2,
we were able to shrink the package

00:04:25.820 --> 00:04:29.640
size down to about 1.5 gigabytes by
making some of the legacy content,

00:04:29.710 --> 00:04:33.340
like the older iOS simulators,
downloadable on demand.

00:04:33.420 --> 00:04:36.130
Now, this is a huge improvement,
but even at this size,

00:04:36.160 --> 00:04:40.040
we know that getting the tools can take
a little while over slower connections.

00:04:40.100 --> 00:04:42.610
And we wanted to improve still.

00:04:42.960 --> 00:04:46.790
I'm happy to announce that yesterday
we shipped Xcode 4.3.3 in the

00:04:46.790 --> 00:04:50.250
App Store as a 97-megabyte update.

00:04:54.850 --> 00:04:57.660
Yeah, we are actually really happy,
and apparently so are you,

00:04:57.700 --> 00:05:00.620
that we're able to deliver
these kinds of updates to you.

00:05:00.620 --> 00:05:02.620
In fact,
the model of the App Store makes it

00:05:02.620 --> 00:05:07.200
really easy for us to focus on small
targeted bug fix releases as well

00:05:07.240 --> 00:05:12.490
as larger more complete releases
with the iOS and OS X SDK updates

00:05:12.990 --> 00:05:15.580
all using the same mechanism.

00:05:15.580 --> 00:05:18.090
And this is really important to us
because we feel very strongly you

00:05:18.310 --> 00:05:22.160
guys should always have the latest and
greatest tools as easily as possible

00:05:22.330 --> 00:05:25.530
so you can get the latest fixes,
adopt the latest APIs and

00:05:25.530 --> 00:05:28.560
leverage the latest features in
order for you to leverage those

00:05:28.560 --> 00:05:30.760
during your development process.

00:05:31.370 --> 00:05:35.060
So we have two great new versions of
Xcode to talk to you about this week.

00:05:35.150 --> 00:05:39.100
That's Xcode 4.4 and Xcode 4.5.

00:05:39.180 --> 00:05:41.700
Now, the core of these tools is the same.

00:05:41.780 --> 00:05:45.360
Xcode 4.4 delivers the
OS X Mountain Lion SDK,

00:05:45.440 --> 00:05:49.730
and Xcode 4.5 adds in the iOS 6 SDK.

00:05:49.950 --> 00:05:52.630
I'm happy to announce the first feature,
which is that we are for the

00:05:52.750 --> 00:05:56.320
first time going to be supporting
these tools running on multiple

00:05:56.400 --> 00:05:59.300
OS releases from a single binary.

00:05:59.390 --> 00:06:00.300
So what does that mean?

00:06:00.300 --> 00:06:02.760
It means for the previews
and for the full releases,

00:06:02.760 --> 00:06:09.300
you'll be able to run Xcode 4.4 and 5
both on OS X Lion and OS X Mountain Lion.

00:06:09.380 --> 00:06:13.190
So now getting access to the
latest tools is really simple.

00:06:13.870 --> 00:06:16.450
Now for these releases,
we've been focusing on the core

00:06:16.450 --> 00:06:17.870
functionality of the tools.

00:06:18.160 --> 00:06:20.340
We've really been focused
on the robustness,

00:06:20.380 --> 00:06:25.040
the stability, and the performance,
and focusing on some key features.

00:06:25.160 --> 00:06:28.000
And I'd like to talk about some
of those key features today,

00:06:28.050 --> 00:06:29.530
starting with language.

00:06:29.610 --> 00:06:33.080
And by language,
I mean the Objective-C language,

00:06:33.080 --> 00:06:34.020
of course.

00:06:34.730 --> 00:06:38.570
Objective C is the foundation
and cornerstone of both

00:06:38.570 --> 00:06:40.800
the iOS and OS X platforms.

00:06:40.930 --> 00:06:44.600
As an object-oriented extension to C,
it's gained many modern conveniences and

00:06:44.740 --> 00:06:47.570
enhancements over the last few years,
as we want to make the

00:06:47.570 --> 00:06:48.880
development process easier.

00:06:48.880 --> 00:06:51.590
A few years ago,
we added declared properties,

00:06:51.590 --> 00:06:55.840
and this is a really simple and intuitive
way for you to manipulate and manage

00:06:55.840 --> 00:06:58.300
the accessor methods for your objects.

00:06:59.030 --> 00:07:02.640
When we provided this syntax,
we also included some directives,

00:07:02.670 --> 00:07:05.940
like @synthesize and @dynamic,
to allow you to control how your

00:07:05.940 --> 00:07:07.460
properties would be provided.

00:07:07.520 --> 00:07:10.400
We wanted to make
properties even simpler.

00:07:10.510 --> 00:07:14.170
So this year, with the latest tools,
you will now find that the compiler will

00:07:14.290 --> 00:07:16.640
automatically synthesize your properties.

00:07:16.780 --> 00:07:17.820
What does that mean?

00:07:18.100 --> 00:07:20.930
It means you no longer need to
type @synthesize ever again.

00:07:21.120 --> 00:07:25.470
And implementing properties
is now a single line of code.

00:07:30.250 --> 00:07:32.620
Last year,
we also added to the memory management

00:07:32.620 --> 00:07:40.370
models of Objective-C and removed
the need to write these methods

00:07:40.370 --> 00:07:41.970
ever again when we introduced
Automatic Reference Counting,

00:07:41.970 --> 00:07:41.970
or ARC for short.

00:07:42.360 --> 00:07:44.920
Pretty much true to its name,
Arc gives you the ability to use

00:07:44.920 --> 00:07:48.390
simple and automatic memory management
from the runtime and never have

00:07:48.390 --> 00:07:50.200
to write retain and release again.

00:07:50.370 --> 00:07:53.600
And it's a really simple
way to manage your objects.

00:07:53.710 --> 00:07:56.700
Now, we've been focusing on some
other great new features for you.

00:07:56.780 --> 00:07:59.300
And in keeping with the
theme of less is more,

00:07:59.400 --> 00:08:01.960
we have a great new technology
to introduce to you,

00:08:01.960 --> 00:08:04.890
which is in the form of object literals.

00:08:04.980 --> 00:08:09.300
Now, object literals are a succinct
way to write common code.

00:08:09.360 --> 00:08:13.690
You're undoubtedly familiar with the
pattern we have today for strings.

00:08:13.710 --> 00:08:17.850
This being quoted text prefixed
with the at sign as a shorthand

00:08:17.900 --> 00:08:19.910
for creating string objects.

00:08:20.170 --> 00:08:26.030
We have four new versions of the object
literals for you to use in your code.

00:08:27.190 --> 00:08:31.220
for numbers, dictionaries, arrays,
and expressions.

00:08:31.280 --> 00:08:33.880
And I think the best way to experience
these is through a demonstration,

00:08:33.970 --> 00:08:36.380
so I'd like to bring up Mike Ferris
to show you how they work.

00:08:36.530 --> 00:08:37.270
Mike?

00:08:41.000 --> 00:08:46.000
Good afternoon, everybody.

00:08:46.000 --> 00:08:50.880
You know, hundreds of millions of people
really love the apps that you create.

00:08:51.090 --> 00:08:56.990
Let me show you how the new
Xcode makes it even easier to

00:08:56.990 --> 00:08:56.990
create these great applications.

00:09:00.040 --> 00:09:04.670
LLVM has a great new syntax
for creating literal numbers,

00:09:04.740 --> 00:09:06.570
arrays, and dictionaries.

00:09:06.570 --> 00:09:11.510
Here we can see some code that's creating
these objects in the traditional way.

00:09:12.120 --> 00:09:15.540
Now the new way to create
an NSNumber is very simple.

00:09:15.670 --> 00:09:19.030
It's just an @ sign
followed by the number.

00:09:19.230 --> 00:09:22.070
If you want a numeric
expression or an enum constant,

00:09:22.160 --> 00:09:24.920
you can just wrap it in parentheses.

00:09:26.550 --> 00:09:30.940
For arrays, we use square brackets.

00:09:30.940 --> 00:09:35.580
And the best thing of all is there's
no longer any need to nil terminate.

00:09:41.320 --> 00:09:45.980
Dictionaries use curly braces
containing comma-separated key-value

00:09:45.980 --> 00:09:50.130
pairs where the key comes first.

00:09:56.900 --> 00:09:58.950
and the rest of the team.

00:09:58.950 --> 00:10:02.780
We've always had
NSString literal objects too,

00:10:02.780 --> 00:10:07.070
so let's just round out the
full set of literals here.

00:10:07.070 --> 00:10:11.090
And as I do,
notice another new feature in Xcode.

00:10:11.090 --> 00:10:16.160
We have code completion showing
us documentation right here.

00:10:16.160 --> 00:10:22.070
We're bringing the documentation
right into the code completion window.

00:10:22.170 --> 00:10:25.370
And NSString is selected
as the default completion.

00:10:29.560 --> 00:10:33.460
Because now Xcode remembers my most
common completions and will actually

00:10:33.460 --> 00:10:37.600
use those to prioritize its results.

00:10:37.690 --> 00:10:40.190
Okay, so this is the full
set of object literals,

00:10:40.190 --> 00:10:42.400
and as you can see,
we have a bunch more code down here

00:10:42.400 --> 00:10:43.740
that could be improved with these.

00:10:43.740 --> 00:10:48.460
So let's get started with that as well.

00:10:48.540 --> 00:10:52.700
I can just go to the refactor
menu and choose convert to

00:10:52.700 --> 00:10:55.220
modern Objective-C syntax.

00:10:58.120 --> 00:11:00.100
I'll confirm what target
I want to convert,

00:11:00.110 --> 00:11:03.410
and then Xcode will actually look at
all my code and figure out where it can

00:11:03.410 --> 00:11:06.090
improve things with this new syntax.

00:11:09.000 --> 00:11:11.430
We see the new code on the left,
and as you can see,

00:11:11.440 --> 00:11:14.620
it's really a lot more
compact and more readable.

00:11:14.700 --> 00:11:16.470
So we'll accept that.

00:11:16.520 --> 00:11:18.600
Let Xcode make those changes.

00:11:18.660 --> 00:11:23.690
Now, another great new feature is
automatic property synthesis.

00:11:23.780 --> 00:11:28.030
So with @synthesize being the default,
adding a property is

00:11:28.030 --> 00:11:29.230
now just a single step.

00:11:29.450 --> 00:11:32.660
I see that I have some @synthesize
statements here in my class,

00:11:32.660 --> 00:11:36.300
and I know that I probably have some
elsewhere in this project as well,

00:11:36.490 --> 00:11:38.500
and I'd really like to remove them.

00:11:38.560 --> 00:11:41.220
I don't want to actually
change parts of this project,

00:11:41.300 --> 00:11:43.890
though,
that belong to other people on my team.

00:11:44.020 --> 00:11:48.480
So let's use another new feature
in Xcode to help out with that.

00:11:49.410 --> 00:11:54.540
To search just part of a project,
use the context menu in

00:11:54.540 --> 00:11:57.550
the search navigator,
in the project navigator rather,

00:11:57.750 --> 00:11:59.320
to choose search and select a group.

00:11:59.450 --> 00:12:02.550
We'll be taken to the search navigator
where now all the searching that we do

00:12:02.550 --> 00:12:04.740
is going to be scoped to just that group.

00:12:04.900 --> 00:12:07.710
So I can find all the
synthesize statements,

00:12:07.710 --> 00:12:11.180
and yeah, there are a number of
them in my code here.

00:12:11.340 --> 00:12:14.700
I'd like to use replace
to get rid of these,

00:12:14.790 --> 00:12:17.210
but of course if I do that now,
it's just going to remove the

00:12:17.220 --> 00:12:19.920
@synthesize and not the rest of the line.

00:12:20.110 --> 00:12:22.890
I could use regular expressions to
try to match the rest of the line,

00:12:22.890 --> 00:12:24.960
but I can never really
remember how those work.

00:12:25.030 --> 00:12:28.350
So instead,
let's use another new feature in Xcode,

00:12:28.410 --> 00:12:30.130
simple pattern searches.

00:12:30.380 --> 00:12:33.890
I can use insert pattern to
put in a token that will match

00:12:33.890 --> 00:12:37.490
any sequence of characters,
followed by a semicolon.

00:12:37.910 --> 00:12:39.460
and then a line break.

00:12:39.460 --> 00:12:41.200
And now we can do the search.

00:12:41.300 --> 00:12:43.860
And now you can see that
Xcode is matching the entire

00:12:43.970 --> 00:12:45.700
synthesized statement,
the whole line.

00:12:45.770 --> 00:12:49.380
And when we replace,
I can get rid of all of them.

00:12:52.950 --> 00:12:54.600
Now I'm done searching.

00:12:54.600 --> 00:12:57.740
Let's focus back in on the code.

00:12:57.760 --> 00:13:01.120
I can see that this is
starting to look pretty good.

00:13:01.120 --> 00:13:06.180
All that extra synthesis is gone,
and my literals are looking a lot nicer.

00:13:06.180 --> 00:13:08.480
But what's kind of standing
out to me now is that I have

00:13:08.480 --> 00:13:12.000
all these forward declarations
of private internal API that,

00:13:12.000 --> 00:13:17.020
you know, keep me from immediately seeing
the good stuff in my class.

00:13:17.020 --> 00:13:20.340
And it turns out that I don't
really need these anymore either.

00:13:20.380 --> 00:13:23.760
It's no longer necessary to forward
declare methods that are only used in

00:13:23.850 --> 00:13:25.960
the implementation block of your class.

00:13:25.960 --> 00:13:28.990
So let's delete those as well.

00:13:34.580 --> 00:13:35.760
Now this is looking great.

00:13:35.760 --> 00:13:37.650
When I look at this file,
I immediately start to see

00:13:37.740 --> 00:13:39.440
the interesting content.

00:13:39.440 --> 00:13:42.210
And by removing all that synthesis
and forward declarations,

00:13:42.330 --> 00:13:45.360
my code is actually less error-prone
because that was just duplicated

00:13:45.360 --> 00:13:47.120
information that I had to keep in sync.

00:13:47.340 --> 00:13:50.660
It's amazing how little stuff
like this can be such a huge help

00:13:50.660 --> 00:13:54.450
when it comes to readability and
maintainability of your code.

00:13:54.550 --> 00:13:59.260
Now, as you're typing all this nice,
clean code, Xcode is paying attention.

00:13:59.380 --> 00:14:03.050
And it's figuring out a lot of
interesting stuff about your project.

00:14:03.180 --> 00:14:07.770
and it uses that information
to enable some great workflows.

00:14:08.670 --> 00:14:15.200
For example, I have here a category on
UI Bezier Path that implements a

00:14:15.290 --> 00:14:19.740
method that implements a behavior
that I know is now provided

00:14:19.740 --> 00:14:22.730
by the iOS 6 SDK as built-in API.

00:14:23.000 --> 00:14:26.940
I want to remove this since there's
no point in replicating functionality

00:14:26.950 --> 00:14:29.640
the SDK is giving me for free.

00:14:29.690 --> 00:14:34.270
In order to get rid of this safely,
though, let me use another new feature

00:14:34.270 --> 00:14:36.400
of Xcode to help out with that.

00:14:36.510 --> 00:14:39.490
Here in the Assistant Editor,
I'm going to choose the new

00:14:39.490 --> 00:14:41.340
Callers Assistant category.

00:14:41.370 --> 00:14:45.540
Xcode immediately shows me code
that calls the method that I have

00:14:45.640 --> 00:14:47.540
focused in my primary editor.

00:14:47.560 --> 00:14:52.260
And as I move my selection around,
it continuously updates to always

00:14:52.270 --> 00:14:56.620
be showing me things that call the
code that I'm currently focused on.

00:14:57.370 --> 00:15:03.390
This gives us a great new way to explore
the way control flows through our code.

00:15:03.640 --> 00:15:06.590
Going back to the method
that I want to remove,

00:15:06.650 --> 00:15:10.490
the assistant is telling me that I have
two calls to this method in my class,

00:15:10.580 --> 00:15:11.750
or in my project.

00:15:11.980 --> 00:15:15.800
As I change the first one,
it's no longer a caller

00:15:15.800 --> 00:15:20.090
of my category method,
and Xcode automatically notices

00:15:20.090 --> 00:15:23.630
this and updates the caller category
to show me that I now have only

00:15:23.630 --> 00:15:26.630
one call remaining to this API.

00:15:28.840 --> 00:15:32.800
As I change the last one, again,
Xcode will notice,

00:15:32.800 --> 00:15:36.800
and now the assistant is
telling me that I'm done.

00:15:36.800 --> 00:15:38.150
And so is my demo.

00:15:38.480 --> 00:15:40.380
Thanks very much.

00:15:44.720 --> 00:15:47.240
So as you can see,
the new object literal syntax

00:15:47.340 --> 00:15:51.300
really improves the readability
and writeability of your code.

00:15:51.420 --> 00:15:55.400
And the new auto synthesis of properties
reduces the amount of synchronization

00:15:55.400 --> 00:15:58.140
necessary when working with properties.

00:15:58.290 --> 00:16:01.260
And we think that these and the rest
of the Objective-C features are really

00:16:01.260 --> 00:16:05.300
going to improve your experience
when working with Objective-C.

00:16:05.500 --> 00:16:07.130
Now,
in as much as we talk about the future,

00:16:07.130 --> 00:16:10.200
we also need to address
a little bit of the past.

00:16:10.300 --> 00:16:12.790
As you heard yesterday,
the memory management model garbage

00:16:12.790 --> 00:16:17.100
collection has been deprecated
starting with OS X Mountain Lion.

00:16:17.200 --> 00:16:22.120
The latest release of Xcode now includes
support in our Arc migration utility,

00:16:22.230 --> 00:16:24.800
which will automatically
convert your application to Arc.

00:16:24.910 --> 00:16:28.700
It includes support now for converting
garbage-collected applications.

00:16:28.810 --> 00:16:32.010
So now it is really easy for everyone
to be able to move their applications

00:16:32.050 --> 00:16:35.860
over to Arc and take advantage
of the features it has to offer.

00:16:36.510 --> 00:16:39.200
So those were just a few of
the language improvements.

00:16:39.330 --> 00:16:43.010
Mike gave you a sneak peek into some
of the editing improvements in the IDE,

00:16:43.240 --> 00:16:46.190
and I'd like to dive into those
in a little bit more detail.

00:16:46.940 --> 00:16:50.040
The first feature is
Code Completion with Quick Help.

00:16:50.210 --> 00:16:53.400
Mike gave you a demo of this,
but now in the Code Completion UI,

00:16:53.520 --> 00:16:58.500
in addition to seeing the available API,
you now also see an abstract, excuse me,

00:16:58.670 --> 00:17:00.500
for the method that you have selected.

00:17:00.640 --> 00:17:02.960
And this is a really great
way for you to learn about and

00:17:03.020 --> 00:17:05.860
adopt new APIs in your code.

00:17:05.860 --> 00:17:08.250
If you find that you want to
learn more about this API,

00:17:08.420 --> 00:17:11.240
there's an associated More link
in this window that'll jump right

00:17:11.280 --> 00:17:15.470
into the documentation to give you
all the information that you need.

00:17:15.990 --> 00:17:19.470
Now sticking with the idea of
learning more about your APIs,

00:17:19.470 --> 00:17:23.650
we've also improved the
Quick Help experience in the editor.

00:17:23.730 --> 00:17:26.250
And Quick Help is a great way
for you to learn more about the

00:17:26.250 --> 00:17:28.960
APIs that are already in your code.

00:17:29.050 --> 00:17:31.330
To use Quick Help,
you simply take the cursor and

00:17:31.330 --> 00:17:35.450
move it over a particular piece of
API and hold down the Option key.

00:17:35.570 --> 00:17:39.190
This will bring up the Quick Help cursor,
and clicking on the API will

00:17:39.240 --> 00:17:40.920
bring up the Quick Help popover.

00:17:41.270 --> 00:17:44.000
You can see here that we've enhanced
the Quick Help experience to include

00:17:44.000 --> 00:17:48.070
even more information about the APIs,
including breakdowns of the

00:17:48.070 --> 00:17:50.950
parameters for your particular method.

00:17:51.060 --> 00:17:53.590
So it's even easier now to get help.

00:17:53.650 --> 00:17:56.140
I'm a little excited here,
so I went on to the next feature,

00:17:56.140 --> 00:17:59.800
which is trailing whitespace removal.

00:18:01.180 --> 00:18:04.240
Trailing whitespace is kind
of like the pollen of the

00:18:04.240 --> 00:18:06.080
source code editing experience.

00:18:06.180 --> 00:18:07.680
Bear with me a second.

00:18:07.890 --> 00:18:09.020
It's invisible.

00:18:09.170 --> 00:18:12.650
It builds up over time,
and for some of us, it's really,

00:18:12.650 --> 00:18:14.280
really irritating.

00:18:15.050 --> 00:18:18.500
The Xcode Source Code Editor now
includes a feature to automatically

00:18:18.500 --> 00:18:20.660
remove trailing white space.

00:18:20.660 --> 00:18:22.990
So whether it's at the
end of a line-- It's okay,

00:18:22.990 --> 00:18:24.490
you can clap for that.

00:18:27.620 --> 00:18:30.140
and Chris Lester.

00:18:30.160 --> 00:18:36.990
Whether it's at the end of a
line or it's on an entirely

00:18:36.990 --> 00:18:38.690
what looks to be an empty line,
the editor will automatically

00:18:38.690 --> 00:18:38.690
remove this for you.

00:18:38.690 --> 00:18:38.690
So now your editor can be white,
trailing white space, worry free.

00:18:39.260 --> 00:18:44.290
Another great feature of the Xcode
Source Editor is replace in selection.

00:18:44.370 --> 00:18:47.440
Now when you are in the find and
replace workflow in the Source Editor,

00:18:47.540 --> 00:18:50.640
you can make a selection,
and if you hold down the option key,

00:18:50.640 --> 00:18:57.230
you will see that the replace all
button at the top of the view now

00:18:57.230 --> 00:19:02.620
converts to an in selection button,
giving you much finer-grain control

00:19:02.620 --> 00:19:02.620
over your find and replace actions.

00:19:03.680 --> 00:19:06.110
Mike showed you some of the improvements
to the search functionality,

00:19:06.250 --> 00:19:08.880
searching by groups and
the new pattern matching.

00:19:09.050 --> 00:19:13.440
The Search Navigator now also includes a
great new feature in symbolic searches.

00:19:13.530 --> 00:19:16.050
So now you can search for
definitions and references of

00:19:16.050 --> 00:19:19.570
symbols throughout your project,
making it that much easier to hone in

00:19:19.790 --> 00:19:22.220
on the source code you're looking for.

00:19:22.520 --> 00:19:24.810
Now,
we know that searching is an integral

00:19:24.840 --> 00:19:28.130
part of the development experience,
and we wanted to make sure we

00:19:28.140 --> 00:19:29.940
had the best searching possible.

00:19:30.090 --> 00:19:33.790
And that really starts
with search performance.

00:19:34.190 --> 00:19:37.590
We've really focused in this release on
improving our textual search performance,

00:19:37.710 --> 00:19:40.500
and I'm pretty sure you guys
are going to like what you see.

00:19:40.500 --> 00:19:43.290
As an example,
we took the open source WebKit project,

00:19:43.410 --> 00:19:46.800
which has about 10,000 source code files,
and we searched for a string

00:19:46.800 --> 00:19:49.540
that appears about 50 times.

00:19:49.540 --> 00:19:53.020
We used the industry standard
grep and looked for those matches,

00:19:53.020 --> 00:19:56.060
and it came in at about 19 seconds.

00:19:56.110 --> 00:19:59.540
The previous Xcode was a
little bit slower than this.

00:19:59.610 --> 00:20:04.420
I'm happy to say that the new
Xcode is now a quarter of the

00:20:04.420 --> 00:20:07.370
time it takes to search grep.

00:20:08.960 --> 00:20:10.660
and this is a really great improvement.

00:20:10.660 --> 00:20:13.130
And the larger your project is,
the more you're going

00:20:13.220 --> 00:20:14.500
to love this feature.

00:20:14.590 --> 00:20:18.140
Now, we also wanted to take the power of
searches and bring them directly into

00:20:18.140 --> 00:20:21.500
the source code editing experience,
which is what we've done with

00:20:21.500 --> 00:20:23.550
the caller and callee assistants.

00:20:23.640 --> 00:20:28.110
You can think of these as super-fast
searches that the IDE performs on your

00:20:28.110 --> 00:20:31.340
behalf just by watching your selection.

00:20:31.410 --> 00:20:34.600
So now, if you want to navigate and edit
your source code symbolically,

00:20:34.660 --> 00:20:38.040
you can do so by staying in
the editor and letting the

00:20:38.040 --> 00:20:40.060
IDE do all the work for you.

00:20:40.670 --> 00:20:43.280
Once you've made all these
changes to your source code,

00:20:43.330 --> 00:20:47.100
we have some great new improvements to
the source code management functions.

00:20:47.100 --> 00:20:50.500
And the first is selective commit.

00:20:50.610 --> 00:20:53.460
When you're in the comparison view,
that's the side-by-side view when

00:20:53.460 --> 00:20:56.840
looking at two versions of your project,
you'll notice that there's a new

00:20:56.840 --> 00:20:58.690
control in the middle of the editor.

00:20:58.830 --> 00:21:02.270
This control provides some
really great functions to it

00:21:02.300 --> 00:21:04.690
with an associated context menu.

00:21:04.760 --> 00:21:07.380
And the context menu on the
right provides one option

00:21:07.440 --> 00:21:10.900
I really want to highlight,
which is the don't commit option.

00:21:10.910 --> 00:21:15.410
This option allows you to cherry-pick
changes that are in your source code

00:21:15.410 --> 00:21:17.900
to not commit during this operation.

00:21:17.900 --> 00:21:20.800
By selecting this,
the changes stay in your source code,

00:21:20.800 --> 00:21:24.000
but you've told Xcode to do all the
heavy lifting underneath to make sure

00:21:24.000 --> 00:21:26.700
those changes do not get committed.

00:21:26.730 --> 00:21:29.420
And this really frees you up to
make all the changes you feel are

00:21:29.490 --> 00:21:31.780
necessary while you're working,
and then at the time you're

00:21:31.780 --> 00:21:34.170
going to review your commit,
you can individually select the

00:21:34.170 --> 00:21:34.600
changes that you want to commit.

00:21:34.620 --> 00:21:37.710
And this allows you to create
a new control that allows

00:21:37.760 --> 00:21:39.600
you to check in your changes.

00:21:39.650 --> 00:21:42.040
So this is a really great improvement.

00:21:42.170 --> 00:21:44.040
Now,
once you're ready to commit your changes,

00:21:44.040 --> 00:21:46.600
we also have a new option at
the bottom of the commit sheet.

00:21:46.610 --> 00:21:49.510
You'll see in the lower left
that there's a new control,

00:21:49.600 --> 00:21:50.550
commit to branch.

00:21:50.730 --> 00:21:53.950
And this button allows you to
create a brand-new branch for your

00:21:53.950 --> 00:21:57.120
checkout and check in your changes,
allowing you to easily pick where

00:21:57.120 --> 00:21:58.900
your changes get checked in.

00:21:59.000 --> 00:22:01.360
So this,
in combination with the previous feature,

00:22:01.360 --> 00:22:04.500
gives you a lot of control over
what and where you're checking in.

00:22:06.000 --> 00:22:08.690
So those are just some of a few
of the great new editing features

00:22:08.730 --> 00:22:10.700
we have in the latest Xcode.

00:22:10.800 --> 00:22:14.150
But we also have some great
design features to talk about.

00:22:14.650 --> 00:22:17.740
We take the I and IDE very seriously.

00:22:17.810 --> 00:22:20.400
We want to make sure that your
development experience includes

00:22:20.520 --> 00:22:24.420
design aspects that are really
core to the development process.

00:22:24.640 --> 00:22:28.000
When we built Xcode 4,
we integrated Interface Builder

00:22:28.000 --> 00:22:31.250
directly into the IDE to make
sure you had the best possible

00:22:31.510 --> 00:22:33.430
experience for visual design.

00:22:33.520 --> 00:22:36.360
Like with source code,
you can focus wholly on your

00:22:36.360 --> 00:22:40.360
interface to dive in really deep,
but you can also marry the two together,

00:22:40.360 --> 00:22:44.740
working side by side with your visual
interface and your source code.

00:22:44.940 --> 00:22:46.800
and in fact,
this model of working with the

00:22:46.930 --> 00:22:50.380
Assistant Editor even allows you to
drag and drop connections between

00:22:50.380 --> 00:22:53.410
your source code and your interface,
making new connections,

00:22:53.480 --> 00:22:57.050
making new actions,
and it's a really natural way to connect

00:22:57.050 --> 00:22:59.130
up the elements of your interface.

00:22:59.580 --> 00:23:02.260
Now we've continued to bring more
and more design improvements to

00:23:02.270 --> 00:23:06.160
the development process to give you
guys more of a chance to create the

00:23:06.160 --> 00:23:09.010
amazing things that you can think of.

00:23:09.300 --> 00:23:12.440
One that we added last year
was Storyboards for iOS.

00:23:12.570 --> 00:23:16.080
And Storyboards give you the
ability to visualize and design your

00:23:16.080 --> 00:23:18.540
applications in a very fluid manner.

00:23:18.660 --> 00:23:21.040
You can set up the individual
screens for your project,

00:23:21.090 --> 00:23:24.610
and then connect them all together
with segues and transitions.

00:23:24.720 --> 00:23:26.930
And you can really see and
visualize the flow of your

00:23:26.930 --> 00:23:29.420
application from a high level,
which is a really kind of

00:23:29.470 --> 00:23:32.170
natural way to design your apps.

00:23:32.790 --> 00:23:36.670
We also added Auto Layout for OS X,
which is a way for you to manage

00:23:36.690 --> 00:23:40.540
the sizing and positioning of
your controls in your interface.

00:23:40.680 --> 00:23:42.860
With Auto Layout,
many of the challenges of interface

00:23:42.860 --> 00:23:46.500
design were removed with the
introduction of constraints.

00:23:46.610 --> 00:23:49.560
And constraints are the rules with
which the interface is defined,

00:23:49.710 --> 00:23:52.030
and you'll see those as
these blue crossbeams in the

00:23:52.110 --> 00:23:54.200
Interface Builder Canvas.

00:23:54.470 --> 00:23:57.210
The constraints give you the
ability to design your UI not with

00:23:57.260 --> 00:23:59.640
just how you want it laid out,
but what your intent is

00:23:59.810 --> 00:24:00.900
behind the interface.

00:24:01.020 --> 00:24:04.880
Being able to articulate things like
these two views should be the same size,

00:24:04.880 --> 00:24:07.600
or these buttons should
always move together.

00:24:07.680 --> 00:24:10.960
And this is a really powerful
way to design the UIs because

00:24:10.960 --> 00:24:12.940
it reacts in the way you expect.

00:24:13.010 --> 00:24:15.800
I'm happy to say with
Xcode 4.5 and iOS 6,

00:24:15.880 --> 00:24:18.040
we are bringing Auto Layout to iOS.

00:24:18.160 --> 00:24:22.810
So now you have all of this power
when designing your iOS applications.

00:24:23.060 --> 00:24:28.180
It turns out that Auto Layout and
iOS are a perfect fit for each other.

00:24:28.180 --> 00:24:30.750
Kind of by nature,
you know that iOS applications

00:24:30.750 --> 00:24:32.540
need to respond to changes.

00:24:32.710 --> 00:24:35.980
Something as simple as running an
application and rotating a device,

00:24:36.040 --> 00:24:39.530
you inherently know that the
application is going to need to adjust

00:24:39.530 --> 00:24:42.900
to that new size and to make sure
that it continues to give the best

00:24:42.900 --> 00:24:45.160
user experience in this new layout.

00:24:45.260 --> 00:24:47.680
And this is exactly what
Auto Layout was designed to do,

00:24:47.720 --> 00:24:50.840
to handle these kinds of changes
and give you the power to articulate

00:24:51.130 --> 00:24:52.890
exactly what you expect to have happen.

00:24:54.490 --> 00:24:57.780
Now there's another way
that applications on iOS and

00:24:57.780 --> 00:25:02.800
OS X need to respond to changes,
and that's when you localize the content.

00:25:02.980 --> 00:25:06.160
And now the combination of the
power of Auto Layout and some brand

00:25:06.160 --> 00:25:11.420
new localization workflows make
creating localized apps even easier.

00:25:11.950 --> 00:25:14.660
Before, when you had to localize apps,
you would start with your user

00:25:14.750 --> 00:25:17.860
interface in a ZIP or a storyboard,
and you would create a copy,

00:25:17.970 --> 00:25:20.640
one for each localization
that you intended.

00:25:20.640 --> 00:25:23.260
Now,
besides the obvious scalability problem,

00:25:23.260 --> 00:25:24.860
there's the synchronization problem.

00:25:24.860 --> 00:25:27.340
When you decided you wanted to change
your interface in one of these,

00:25:27.340 --> 00:25:31.760
you needed to go and update it throughout
all of the different interfaces.

00:25:31.760 --> 00:25:35.010
Now with the power of Auto Layout,
you can focus on designing a

00:25:35.170 --> 00:25:39.030
single base user interface,
one that knows how to respond to changes

00:25:39.030 --> 00:25:41.540
in the content and to do the right thing.

00:25:41.540 --> 00:25:44.970
So now creating a localized
application is as simple as working

00:25:45.060 --> 00:25:48.310
on your base user interface,
localizing your content,

00:25:48.390 --> 00:25:50.600
and effectively just hitting run.

00:25:50.600 --> 00:25:53.890
And to prove how easy this is,
I'm going to bring up Jon Hess to

00:25:53.890 --> 00:25:55.830
give you a demonstration.

00:25:55.830 --> 00:25:55.830
Jon?

00:25:57.110 --> 00:25:58.160
Thanks, Matt.

00:25:58.200 --> 00:26:00.910
I'd like to demonstrate the
precision and intuition of

00:26:00.910 --> 00:26:02.370
Auto Layout and Interface Builder.

00:26:02.490 --> 00:26:03.710
Let's go over to the demo machine.

00:26:03.820 --> 00:26:06.800
Here I have an early copy of
our Site Seer application,

00:26:06.870 --> 00:26:08.700
but the design isn't quite complete.

00:26:08.760 --> 00:26:13.610
This title area, for example,
needs to be moved into the center.

00:26:13.720 --> 00:26:16.450
I'm going to drop it right here
where the centering guide and

00:26:16.450 --> 00:26:18.140
interface builder suggests.

00:26:18.170 --> 00:26:21.320
And you can see that automatically
this blue line has been

00:26:21.360 --> 00:26:23.170
added to the interface.

00:26:23.520 --> 00:26:24.700
That's a constraint.

00:26:24.790 --> 00:26:27.470
Constraints in the
Auto Layout System specify things like

00:26:28.060 --> 00:26:33.200
the sizing of a view or the spacing
between two views or how views align.

00:26:33.230 --> 00:26:36.740
This constraint is going to
make it so that our title always

00:26:36.740 --> 00:26:38.780
stays centered in our screen.

00:26:38.900 --> 00:26:41.900
In addition to the title,
I'm going to add a couple

00:26:41.900 --> 00:26:43.950
of buttons to our interface.

00:26:44.070 --> 00:26:49.700
I'll have one here on the left
and two more on the right.

00:26:52.270 --> 00:26:55.620
Now, there's a second constraint that
I'd like to draw your attention to.

00:26:55.620 --> 00:26:57.440
And it's right here
between these two buttons.

00:26:57.500 --> 00:26:59.600
It's a spacing constraint,
and it's going to ensure

00:26:59.600 --> 00:27:02.400
they're always that small
distance apart from each other.

00:27:02.440 --> 00:27:06.420
As I make edits in Interface Builder,
for example, changing this button to say

00:27:06.420 --> 00:27:09.020
"near" to show a list of
nearby locations we can see,

00:27:09.260 --> 00:27:11.790
Interface Builder is going to
maintain those constraints,

00:27:11.790 --> 00:27:14.940
and it's going to resize the
surrounding user interface elements.

00:27:15.030 --> 00:27:17.620
So, the button shrinks,
and this button here on the

00:27:17.620 --> 00:27:19.490
left gets pulled into the right.

00:27:19.570 --> 00:27:24.510
I'm going to press undo and redo so
that you can see that happen again.

00:27:24.510 --> 00:27:24.510
Watch right here.

00:27:25.040 --> 00:27:28.960
This saves me lots of time not
cleaning up after myself after

00:27:29.040 --> 00:27:31.100
I make edits to my content.

00:27:31.480 --> 00:27:35.230
This button here is going to
show a schedule of things that

00:27:35.330 --> 00:27:37.040
we have planned for the day.

00:27:37.120 --> 00:27:39.400
And over on the left,
we'll have a list of locations

00:27:39.400 --> 00:27:41.180
that we can visit in the Bay Area.

00:27:41.310 --> 00:27:44.440
Now we've got all the major user
interface elements in place,

00:27:44.500 --> 00:27:47.140
let's see how this looks in portrait.

00:27:49.000 --> 00:27:50.900
All right, things look great.

00:27:50.900 --> 00:27:53.820
The button that we added to the left
stayed in the upper left-hand corner.

00:27:53.970 --> 00:27:56.760
The buttons that we added to the
right stayed in the right corner.

00:27:56.770 --> 00:27:59.170
And our title stayed centered.

00:28:01.480 --> 00:28:03.230
Back in landscape,
one thing that's catching my

00:28:03.230 --> 00:28:04.530
eye here is this Near button.

00:28:04.720 --> 00:28:06.820
It's really small compared
to the Schedule button.

00:28:06.900 --> 00:28:09.940
In fact,
it looks kind of lopsided and awkward.

00:28:09.990 --> 00:28:12.290
I think it would look a lot
better if all three of these

00:28:12.300 --> 00:28:13.400
buttons were the same width.

00:28:13.450 --> 00:28:15.530
And you'll often see that in
applications where you have a row of

00:28:15.590 --> 00:28:18.150
buttons that will be equally sized.

00:28:18.310 --> 00:28:19.990
Setting this up in Auto Layout is easy.

00:28:20.160 --> 00:28:23.090
I can just select all three buttons.

00:28:23.780 --> 00:28:25.310
And down here in the
bottom of the canvas,

00:28:25.380 --> 00:28:28.440
we have a menu to manipulate
constraints in Interface Builder.

00:28:28.460 --> 00:28:32.840
I'm going to choose to pin the width
of all three of these buttons equally.

00:28:32.870 --> 00:28:35.810
So now each button is just
the same size as the others.

00:28:35.930 --> 00:28:39.680
In fact, they're all as big as the
largest of the three buttons.

00:28:39.810 --> 00:28:42.880
If I were to change the title
of one of these buttons,

00:28:42.880 --> 00:28:47.040
for example, to "Today's Schedule,"
they grow together.

00:28:47.150 --> 00:28:49.300
Now,
this button is getting a little too close

00:28:49.410 --> 00:28:51.300
to my title in the center of the screen.

00:28:51.620 --> 00:28:53.800
And I know we're going to
visit some places in this

00:28:53.880 --> 00:28:55.310
app with really long names.

00:28:55.430 --> 00:28:58.060
So I'm going to back off that big title.

00:28:58.220 --> 00:29:02.680
But I want to -- I need to think about
how my application should respond when

00:29:02.680 --> 00:29:07.990
there's not enough room to display the
full name in this area that we have here.

00:29:08.100 --> 00:29:11.700
One opportunity that I see is the
left-hand side of the screen over

00:29:11.730 --> 00:29:15.860
here has more space available than
the right-hand side of the screen.

00:29:16.050 --> 00:29:18.240
When things start to get
really tight for my title,

00:29:18.290 --> 00:29:21.520
I'd actually like it to push over
into that available space on the left.

00:29:21.520 --> 00:29:25.500
I'd also like to make sure that
my title never starts to occlude

00:29:25.500 --> 00:29:27.520
these buttons on the sides.

00:29:27.680 --> 00:29:29.020
This is easy.

00:29:29.020 --> 00:29:31.990
I'm going to just select my
title and the button and add

00:29:31.990 --> 00:29:33.970
a new constraint between them.

00:29:34.630 --> 00:29:36.340
This is a horizontal spacing constraint.

00:29:36.470 --> 00:29:39.100
And right now it's specifying that
the title should always be this

00:29:39.200 --> 00:29:40.800
fixed distance from the button.

00:29:40.860 --> 00:29:42.620
In fact, though,
I'd like the title to be able

00:29:42.620 --> 00:29:45.260
to grow to fill that area,
but not get too close to the button.

00:29:45.390 --> 00:29:47.830
So rather than saying that
this is a fixed distance,

00:29:47.940 --> 00:29:50.550
I want to say that this is a
distance that's always greater

00:29:50.550 --> 00:29:53.600
than or equal to a small value,
like 20 points.

00:29:53.650 --> 00:29:57.800
And now the title will not be able to
grow closer than 20 points to the button.

00:29:57.880 --> 00:30:02.370
I'm going to specify a matching
constraint on the opposite side.

00:30:03.000 --> 00:30:06.650
Horizontal spacing, always greater than
or equal to 20 points.

00:30:06.660 --> 00:30:09.860
Now our title can never
occlude our buttons.

00:30:09.880 --> 00:30:11.570
It's always going to stop just short.

00:30:11.590 --> 00:30:14.620
But our title is also always
going to be centered because

00:30:14.620 --> 00:30:15.580
of the centering constraint.

00:30:15.580 --> 00:30:19.570
When things get tight and the
title grows all the way up against

00:30:19.570 --> 00:30:21.950
the button on the right-hand side,
I want it to push left.

00:30:22.040 --> 00:30:24.920
I need to tell the centering
constraint that it can yield to the

00:30:24.920 --> 00:30:26.500
other constraints in the system.

00:30:26.500 --> 00:30:28.070
This is also easy.

00:30:28.080 --> 00:30:30.160
Constraints have a
built-in priority system.

00:30:30.160 --> 00:30:32.800
And in the inspector,
I can simply lower the priority

00:30:32.800 --> 00:30:35.090
of the centering constraint.

00:30:36.070 --> 00:30:38.000
and it will yield as things get tight.

00:30:38.170 --> 00:30:41.400
For example,
if I type a large title here,

00:30:45.940 --> 00:30:47.400
The title moves to the left.

00:30:47.450 --> 00:30:49.400
You can see that here with this.

00:30:49.430 --> 00:30:52.540
The centering constraint is still running
right through the middle of the text.

00:30:52.550 --> 00:30:55.660
It used to be right in the middle
of the scene here next to my image.

00:30:55.690 --> 00:31:00.040
If I hit undo and redo,
you can see how it moved when

00:31:00.310 --> 00:31:02.600
the spacing got tight over here.

00:31:02.620 --> 00:31:04.760
Okay, I'm making great use of my space.

00:31:04.800 --> 00:31:06.840
Let's see how things look in portrait.

00:31:06.970 --> 00:31:08.100
Oh, ouch.

00:31:08.110 --> 00:31:11.870
My title just absolutely crushed
those buttons on the two sides.

00:31:12.120 --> 00:31:15.120
I need to make my application
smarter than this.

00:31:15.290 --> 00:31:17.380
Let's go back to landscape.

00:31:17.920 --> 00:31:21.880
What I'd like to have happen here is for
the title to shrink before the buttons,

00:31:21.880 --> 00:31:24.800
because the buttons should always
stay a fixed size in my application.

00:31:24.960 --> 00:31:27.280
Just like constraints have
a built-in priority system,

00:31:27.480 --> 00:31:30.780
so do the intrinsic sizes of
our user interface elements.

00:31:30.870 --> 00:31:33.800
I can select my title,
and in the size inspector,

00:31:33.800 --> 00:31:37.800
lower the priority of
the horizontal sizing.

00:31:37.800 --> 00:31:41.040
Now, when my application shrinks,
the title will shrink first,

00:31:41.210 --> 00:31:42.800
and the buttons won't shrink.

00:31:42.920 --> 00:31:45.260
When the title shrinks, though,
there still won't be enough

00:31:45.260 --> 00:31:47.800
space to actually hold that text,
and so it will get truncated.

00:31:47.800 --> 00:31:49.880
I'd like instead for the
font to become smaller,

00:31:49.880 --> 00:31:51.800
and UILabel has a great feature for this.

00:31:51.800 --> 00:31:55.230
In the attributes inspector,
I can choose to have the font

00:31:55.230 --> 00:31:57.800
automatically shrink to a smaller size.

00:31:57.800 --> 00:32:01.870
For example,
let's have it scale to one quarter of its

00:32:01.870 --> 00:32:05.220
current size if there's not enough room.

00:32:05.670 --> 00:32:08.840
Now, if I select the scene
and move to portrait,

00:32:08.940 --> 00:32:10.750
you can see that things fit great.

00:32:11.080 --> 00:32:13.010
My title is right in the
center between those buttons.

00:32:13.130 --> 00:32:16.380
It's the biggest font that it could
possibly be to show all of that

00:32:16.430 --> 00:32:19.260
text and still leave the padding
that we specified on either side.

00:32:19.470 --> 00:32:22.300
If I was to specify this
with the old layout system,

00:32:22.300 --> 00:32:24.420
springs and struts,
I would have had to stop.

00:32:24.620 --> 00:32:27.500
This layout is actually not
expressible with springs and struts.

00:32:27.530 --> 00:32:30.200
I would have had to write
manual layout code instead.

00:32:30.250 --> 00:32:32.790
Manual layout code is a drag.

00:32:33.190 --> 00:32:35.610
Our application responds
great to new string changes.

00:32:35.760 --> 00:32:38.760
I could change this title,
I could change the button labels,

00:32:38.870 --> 00:32:41.690
and everything would resize
great because of Auto Layout.

00:32:41.790 --> 00:32:45.700
And we saw that we could build a
great new feature on top of this,

00:32:45.850 --> 00:32:49.720
and that's the new localization workflow
that you heard Matt mention earlier.

00:32:49.810 --> 00:32:51.440
Let me show you how you
can get started with that.

00:32:51.510 --> 00:32:54.890
I'm going to select the project,
and in the project's editor,

00:32:54.890 --> 00:32:58.840
I can see a list of all of the languages
that our application currently supports.

00:32:58.910 --> 00:33:00.740
Right now, it just supports English.

00:33:00.800 --> 00:33:02.950
We have a new checkbox
under the table here,

00:33:03.020 --> 00:33:06.100
"Use base internationalization."
When I check this,

00:33:06.150 --> 00:33:09.600
Xcode is going to offer to take
my iPad storyboard and move it

00:33:09.600 --> 00:33:13.110
out of the English localization
and instead into the base.

00:33:13.310 --> 00:33:15.610
And then for each language
that I add to my project,

00:33:15.610 --> 00:33:19.460
I'm going to be able to add a simple
strings file to translate that base

00:33:19.460 --> 00:33:22.500
storyboard into a specific language.

00:33:23.290 --> 00:33:25.750
I can check the box,
and Xcode is going to move my

00:33:25.750 --> 00:33:31.830
storyboard from English to the base,
and I can add a new language, German.

00:33:31.880 --> 00:33:34.810
All of my strings files will be
copied from English to German,

00:33:34.810 --> 00:33:39.850
and a set of default strings will be
extracted from my base storyboard.

00:33:40.050 --> 00:33:45.690
I can see the new strings from my base
storyboard here in the project navigator.

00:33:46.730 --> 00:33:50.060
Now, almost all of the string content
is going to be replaced dynamically

00:33:50.060 --> 00:33:53.100
at runtime with things like facts
about the Golden Gate Bridge,

00:33:53.170 --> 00:33:56.830
but the three buttons that
I added earlier are static,

00:33:56.830 --> 00:33:59.050
and their strings are displayed here.

00:34:00.350 --> 00:34:04.190
I know just enough
German to translate these,

00:34:04.200 --> 00:34:07.910
so let me replace those
couple of strings.

00:34:09.960 --> 00:34:11.900
and Matt Fischer are all here.

00:34:11.900 --> 00:34:14.600
Now, I've already configured the iPhone
simulator to launch in German.

00:34:14.690 --> 00:34:16.780
Here it's running,
here's our application,

00:34:16.780 --> 00:34:19.050
and here's all of our content
translated into German.

00:34:19.140 --> 00:34:20.780
The buttons look great,
the title looks great,

00:34:20.920 --> 00:34:23.900
and all my content specified
with Auto Layout looks great.

00:34:23.970 --> 00:34:26.340
We think you're going to love
this new localization workflow.

00:34:26.370 --> 00:34:28.200
Back to you, Matt.

00:34:35.110 --> 00:34:36.630
Thanks, Jon.

00:34:36.730 --> 00:34:39.060
As you can see,
creating a localized application is

00:34:39.060 --> 00:34:43.340
now just as simple as working with
Auto Layout and your localized content.

00:34:43.490 --> 00:34:47.410
We think you and your users are
going to enjoy this feature.

00:34:47.980 --> 00:34:50.080
Now, in addition to great
editing and design tools,

00:34:50.180 --> 00:34:53.950
the Xcode suite of tools also
includes great optimization tools,

00:34:54.090 --> 00:34:56.900
ways for you to improve
your applications.

00:34:57.000 --> 00:35:01.090
The Xcode IDE includes a number of
live editing features to help you sort

00:35:01.090 --> 00:35:03.660
out problems that you might be having.

00:35:03.780 --> 00:35:05.840
Undoubtedly,
you've seen the error and warning

00:35:05.840 --> 00:35:09.560
icons that appear in the editor,
pointing out points of problems.

00:35:09.650 --> 00:35:12.150
The editor will point out
the exact line and character

00:35:12.150 --> 00:35:14.680
at which the problem exists,
and in many cases,

00:35:14.680 --> 00:35:18.430
will give you helpful suggestions
on how to fix the problem.

00:35:18.510 --> 00:35:22.100
These and other features,
like code completion and syntax coloring,

00:35:22.100 --> 00:35:25.890
are made possible because the
Xcode IDE has a deep understanding

00:35:25.900 --> 00:35:28.220
of the semantics of your project.

00:35:28.290 --> 00:35:32.150
And that's all made possible because
we have the LLVM technologies

00:35:32.150 --> 00:35:34.280
built directly inside of the IDE.

00:35:34.400 --> 00:35:36.720
And to give you an overview of
all the amazing things possible

00:35:36.720 --> 00:35:39.750
with these technologies,
I'd love to bring up Chris Lattner.

00:35:39.920 --> 00:35:41.590
Chris?

00:35:42.000 --> 00:35:43.440
Thank you, Matthew.

00:35:43.440 --> 00:35:51.050
LLVM technologies power some
of the underlying capabilities

00:35:51.060 --> 00:35:54.840
that make Xcode great,
such as code completion, live issues,

00:35:54.940 --> 00:35:57.780
and it has three primary
features of its own.

00:35:57.910 --> 00:36:01.550
This includes the LLVM compiler,
the Xcode static analyzer,

00:36:01.550 --> 00:36:03.120
and the LLDB debugger.

00:36:03.230 --> 00:36:05.860
There's a lot going on in
the new release of Xcode,

00:36:05.860 --> 00:36:08.330
so let's dive in and see
what's new in each of these,

00:36:08.390 --> 00:36:10.730
starting with the compiler.

00:36:11.020 --> 00:36:14.320
This year we're releasing
Apple LLVM Compiler 4 with a huge

00:36:14.500 --> 00:36:17.780
number of great improvements,
including improvements

00:36:17.790 --> 00:36:20.180
to the generated code,
faster builds,

00:36:20.330 --> 00:36:22.900
and a lot of other wonderful stuff.

00:36:23.000 --> 00:36:25.470
Now,
one of the most visible improvements to

00:36:25.470 --> 00:36:27.890
the compiler is the language support.

00:36:27.950 --> 00:36:30.900
Mike and Matthew have already shown you
the great enhancements to Objective-C,

00:36:30.900 --> 00:36:32.700
which I hope you'll love.

00:36:32.720 --> 00:36:35.850
Let's talk now about C++.

00:36:37.000 --> 00:36:39.660
C++ is a great language.

00:36:39.660 --> 00:36:42.940
It's also a very large language.

00:36:43.260 --> 00:36:49.200
Looking back on our clicker,
looking back to just last year,

00:36:49.200 --> 00:36:52.730
we first shipped Xcode 4,
which had initial support

00:36:52.740 --> 00:36:55.250
for C++ in the LLVM compiler.

00:36:55.370 --> 00:36:57.540
This was not that long ago.

00:36:57.890 --> 00:37:01.000
Not only did we support C++
in the compiler at that point,

00:37:01.000 --> 00:37:02.730
we also added it to the IDE as well.

00:37:02.910 --> 00:37:04.790
This gave great support
for code completion,

00:37:04.790 --> 00:37:07.180
syntax highlighting,
all the other IDE features that

00:37:07.570 --> 00:37:10.160
you've come to know and expect.

00:37:10.270 --> 00:37:13.340
Well, we weren't content to just
stop there with C++ support,

00:37:13.340 --> 00:37:16.550
and so we set our sights on C++ 11,
the next major enhancement

00:37:16.550 --> 00:37:18.040
to the C++ language.

00:37:18.120 --> 00:37:22.240
And later that year, in Xcode 4.2,
we released the next big set

00:37:22.240 --> 00:37:24.240
of features in the compiler.

00:37:24.310 --> 00:37:28.350
Of course, C++, it turns out,
is a big language, so we kept going.

00:37:28.460 --> 00:37:33.880
And we added another great set
of features in Xcode 4.3 and 4.4.

00:37:33.980 --> 00:37:37.830
Well, at this point,
we have the vast majority

00:37:37.970 --> 00:37:42.780
of the features in C++ 11,
including things like Unicode support,

00:37:42.840 --> 00:37:48.090
Atomics, and one very specially requested
feature by many of you,

00:37:48.090 --> 00:37:49.890
C++ 11 Lambdas.

00:37:54.030 --> 00:37:58.060
Now, we are committed to providing full
support for the C++11 standard.

00:37:58.060 --> 00:37:59.990
And even though we have a
few more features to go,

00:38:00.110 --> 00:38:03.690
I'm really excited to say that at
this point Xcode 4.4 is leading

00:38:03.930 --> 00:38:08.110
the industry in support for C++11,
which means that if you have

00:38:08.240 --> 00:38:11.190
a portable C++ code base,
it's really straightforward to

00:38:11.300 --> 00:38:13.120
bring it right to our platform.

00:38:13.120 --> 00:38:16.590
Now, language is really important,
but it's not the only thing we've

00:38:16.590 --> 00:38:19.700
been improving in the compiler.

00:38:19.700 --> 00:38:23.400
Another area that we've been specifically
focusing on is compiler warnings.

00:38:23.400 --> 00:38:28.190
Now, compiler warnings are an important
aspect of the compiler experience,

00:38:28.190 --> 00:38:28.680
right?

00:38:28.680 --> 00:38:33.060
This takes the analysis power that
the compiler uses to generate machine

00:38:33.100 --> 00:38:38.280
code from your source and identify
issues and problems and places

00:38:38.280 --> 00:38:39.730
that you can improve your code.

00:38:39.730 --> 00:38:42.410
So we've made a number of
enhancements to warnings this year,

00:38:42.500 --> 00:38:45.150
including improving our support
for format string checking

00:38:45.150 --> 00:38:46.960
to support Objective-C APIs.

00:38:46.980 --> 00:38:50.560
APIs like NSLog and
NSString string with format.

00:38:50.560 --> 00:38:54.410
And as you'd expect,
the compiler doesn't just say, hey,

00:38:54.410 --> 00:38:56.550
you got a problem right here.

00:38:56.560 --> 00:38:58.230
It also says, hey, here's a fix, right?

00:38:58.420 --> 00:39:01.680
And it shows you exactly what you need
to do to correct the problem and then,

00:39:01.860 --> 00:39:05.940
you know, move on with making your
applications great in other ways.

00:39:06.200 --> 00:39:11.640
Now, compiler warnings have been an
important part of the compiler,

00:39:11.640 --> 00:39:14.390
and we've been adding many of
them for quite some time now.

00:39:14.620 --> 00:39:16.800
But this kind of raises
an interesting question.

00:39:16.980 --> 00:39:20.130
While it makes sense to turn on a
lot of warnings like this by default.

00:39:20.130 --> 00:39:20.140
Some of them are not.

00:39:20.270 --> 00:39:23.560
Some of them are very specific
to certain kinds of applications.

00:39:23.560 --> 00:39:24.670
And how do you get them?

00:39:24.670 --> 00:39:26.960
Well, normally you'd start
out with a flag like,

00:39:26.960 --> 00:39:29.080
you know, our friend wall here.

00:39:29.090 --> 00:39:32.800
Well, despite what you'd expect,
wall doesn't turn on all the

00:39:32.800 --> 00:39:34.150
warnings in the compiler.

00:39:34.210 --> 00:39:37.360
And so you end up accumulating a pile
of other flags and maybe you read

00:39:37.360 --> 00:39:40.580
some cool blog and they showed you
some neat tricks that you could get.

00:39:40.730 --> 00:39:42.760
But this is really a poor answer, right?

00:39:42.760 --> 00:39:44.810
I mean,
a new version of the compiler comes out,

00:39:44.810 --> 00:39:47.310
you don't know about all
the gray enhancements in it,

00:39:47.310 --> 00:39:49.720
and how do you know what to turn on?

00:39:49.720 --> 00:39:51.990
Well, we took -- we took a few of the
things that we took and implemented a

00:39:51.990 --> 00:39:57.000
very simple answer for this problem,
which we call weverything.

00:39:57.740 --> 00:40:01.030
I don't think I need to
tell you what this does.

00:40:01.140 --> 00:40:03.900
Based on this,
which really does turn on all the

00:40:04.010 --> 00:40:07.400
warning flags in the compiler,
you can then choose to opt out

00:40:07.400 --> 00:40:10.490
of warnings that you don't want,
which means that you get maximal

00:40:10.490 --> 00:40:12.450
feedback from the compiler,
and then you can tune

00:40:12.560 --> 00:40:13.390
it for your code base.

00:40:13.540 --> 00:40:15.710
And so you get a great experience,
and when a new version of

00:40:15.710 --> 00:40:19.110
the compiler comes out,
you can immediately take advantage

00:40:19.110 --> 00:40:21.040
of any new warnings it has.

00:40:21.060 --> 00:40:24.190
Now, the compiler warnings are
really powerful because they run

00:40:24.190 --> 00:40:28.040
every time you build your code,
but that's also kind of a limitation

00:40:28.040 --> 00:40:31.420
because some bugs can't be found
in the amount of time you want

00:40:31.420 --> 00:40:34.280
to spend in line with your build.

00:40:34.300 --> 00:40:37.000
To find deeper bugs,
we have a tool called the

00:40:37.000 --> 00:40:40.120
Xcode Static Analyzer,
which goes much further.

00:40:40.280 --> 00:40:43.810
The Static Analyzer uses deep
compiler analysis to really understand

00:40:43.810 --> 00:40:47.130
your code and all the way down
to the level of exploring individual

00:40:47.130 --> 00:40:51.040
paths and error conditions and
all kinds of stuff in your code.

00:40:51.040 --> 00:40:53.650
Now,
like the compiler and the rest of Xcode,

00:40:53.650 --> 00:40:57.030
the Static Analyzer has a
number of great improvements,

00:40:57.140 --> 00:41:00.620
one of which makes all of the existing
analysis checks more powerful,

00:41:00.910 --> 00:41:04.180
which we call cross-function analysis.

00:41:04.230 --> 00:41:06.840
Now, here's a very simple example.

00:41:06.840 --> 00:41:09.820
I know this looks like production code.

00:41:09.820 --> 00:41:12.180
And you know,
we have two simple C functions,

00:41:12.180 --> 00:41:12.980
bar and foo.

00:41:12.980 --> 00:41:14.100
Bar calls foo.

00:41:14.100 --> 00:41:15.810
Really creative here.

00:41:15.890 --> 00:41:17.460
If you ran this through a
previous version of Xcode,

00:41:17.460 --> 00:41:19.080
it would see no problem with this at all.

00:41:19.160 --> 00:41:23.120
If you run it through Xcode 4.4,
immediately it points out an issue.

00:41:23.140 --> 00:41:26.650
It says, hey, you're turning garbage
data out of your function.

00:41:26.760 --> 00:41:30.910
This is a really bad problem because
this is the class of problems that

00:41:30.910 --> 00:41:34.020
could work fine for you on your desktop.

00:41:34.020 --> 00:41:36.580
You ship it to your customers and
suddenly you're getting bad reviews in

00:41:36.580 --> 00:41:39.260
the app store because your apps aren't
working right and you have no idea what's

00:41:39.370 --> 00:41:41.260
going on because it doesn't reproduce.

00:41:41.260 --> 00:41:44.350
Well, now Xcode will find these
classes of problems and,

00:41:44.390 --> 00:41:46.830
you know, of course,
that's not enough information

00:41:46.970 --> 00:41:50.210
to fix the problem,
so you just click on the issue right

00:41:50.270 --> 00:41:53.970
in the editor and out pops a series
of steps that are exactly what

00:41:53.970 --> 00:41:58.310
you need to know to reproduce and,
more importantly, fix the problem.

00:41:58.330 --> 00:42:01.290
If you haven't already,
I highly encourage you to run

00:42:01.290 --> 00:42:03.840
the SAC Analyzer by building
and analyzing your code.

00:42:03.840 --> 00:42:07.480
It will find all kinds
of really nasty issues.

00:42:07.480 --> 00:42:10.930
Now, beyond cross function analysis,
we've also made the analyzer more

00:42:10.930 --> 00:42:15.020
powerful in other ways by implementing
checkers for really important

00:42:15.020 --> 00:42:18.840
APIs like Grand Central Dispatch,
various security APIs,

00:42:18.840 --> 00:42:21.790
and also for the very
popular Malik and Free API,

00:42:21.790 --> 00:42:26.020
so I think you'll find that the checker
is even more powerful than before.

00:42:26.260 --> 00:42:30.570
Now, like compiler warnings,
the SAC Analyzer can be individually

00:42:30.570 --> 00:42:33.660
controlled in the build settings
inspector where you can enable or

00:42:33.660 --> 00:42:36.890
disable individual checks so you have
really fine-grained control over the

00:42:36.890 --> 00:42:39.550
checks that make sense for your code.

00:42:39.960 --> 00:42:43.220
Now, the Static Analyzer and Compiler
Warnings are really powerful

00:42:43.220 --> 00:42:45.970
and they're really great tools,
but they're not going to

00:42:45.970 --> 00:42:48.590
find bugs in your code that
just cause it to misbehave,

00:42:48.590 --> 00:42:49.360
right?

00:42:49.360 --> 00:42:52.150
If it behaves in some way
that you wouldn't expect,

00:42:52.320 --> 00:42:54.310
that's when you turn to the debugger.

00:42:54.450 --> 00:42:58.070
And we have a great debugger named LLDB.

00:42:58.730 --> 00:43:01.960
If you're not familiar with LLDB,
it's very similar to

00:43:02.000 --> 00:43:03.360
GDB in a lot of ways.

00:43:03.360 --> 00:43:07.250
It has a great Xcode user interface,
has a great command

00:43:07.250 --> 00:43:14.230
line console interface,
and you may not realize it,

00:43:14.230 --> 00:43:16.170
but LLDB became the default debugger
in Xcode 4.3 earlier this year.

00:43:16.420 --> 00:43:20.140
You may not realize it because the
Xcode experience for LLV is very,

00:43:20.140 --> 00:43:23.060
very similar to that of GDB.

00:43:23.190 --> 00:43:27.470
Well, it's just like GDB, except,
you know, it starts up a lot faster.

00:43:27.650 --> 00:43:28.100
Let's see here.

00:43:28.100 --> 00:43:29.020
It's more correct.

00:43:29.060 --> 00:43:32.820
The data formatters work more often.

00:43:32.820 --> 00:43:35.200
It'll even show your
variables now and then.

00:43:35.200 --> 00:43:37.450
I mean, it's basically just like GDB.

00:43:37.450 --> 00:43:39.340
It's just that, hey, it works.

00:43:39.370 --> 00:43:40.430
How about that?

00:43:41.240 --> 00:43:45.270
But LLV has a number of enhancements
above and beyond GDB also.

00:43:45.480 --> 00:43:48.510
Things like it builds right on
top of all the LLVM technologies

00:43:48.510 --> 00:43:53.160
we've been talking about,
which means all the Objective-C, C++11,

00:43:53.160 --> 00:43:55.560
and other language syntax
works right in the console.

00:43:55.560 --> 00:43:58.330
And so here you can see I'm
playing with an NSDictionary using

00:43:58.330 --> 00:43:59.630
new subscripting syntax.

00:43:59.630 --> 00:44:01.910
I'm building a dictionary
with that curly brace.

00:44:01.950 --> 00:44:03.420
It all just works, right?

00:44:03.420 --> 00:44:05.600
I mean, this is what you'd
expect from the debugger.

00:44:07.190 --> 00:44:09.540
Now,
LLV has a number of other great features.

00:44:09.540 --> 00:44:12.540
It has really powerful data formatters.

00:44:12.540 --> 00:44:16.450
One really powerful new feature this
year is that we've implemented support

00:44:16.580 --> 00:44:21.660
for hardware watchpoints on iOS devices,
which means it's really simple to track

00:44:21.750 --> 00:44:26.600
down really nasty memory problems even
if they only reproduce on the device.

00:44:26.660 --> 00:44:30.010
If you're familiar with watchpoints,
I think you'll really love this.

00:44:34.120 --> 00:44:36.600
Now,
with all this talk about GDB and LLVM,

00:44:36.600 --> 00:44:39.960
you may be wondering,
what is our plan for GDB?

00:44:39.960 --> 00:44:42.420
If you look at our
technology platform now,

00:44:42.420 --> 00:44:45.780
we have a default compiler,
which is the LLVM compiler,

00:44:45.780 --> 00:44:48.500
a default debugger,
which is the LLVM debugger.

00:44:48.500 --> 00:44:53.120
Now, Xcode 4.4 and 4.5 still support
the older LLVM GCC compiler

00:44:53.120 --> 00:44:55.720
and the older GDB debugger,
but at this point,

00:44:55.720 --> 00:44:58.830
they're officially deprecated and
they'll be going away next year.

00:44:58.840 --> 00:45:02.260
Now, I don't know about you,
but we are really excited about

00:45:02.260 --> 00:45:05.560
this because this means that we'll
finally have a single compiler,

00:45:05.630 --> 00:45:07.840
a single debugger,
and now we're going to be able to

00:45:07.840 --> 00:45:12.700
innovate even faster going forward,
which is better for everybody.

00:45:12.700 --> 00:45:14.940
So if you're still using
the older technologies,

00:45:14.940 --> 00:45:16.780
now is the time to move and keep going.

00:45:16.780 --> 00:45:18.990
Now,
coming back to our technology platform,

00:45:18.990 --> 00:45:21.300
we've been talking
about LLVM technologies.

00:45:21.320 --> 00:45:24.710
There's more to Xcode's debugging
and analysis capabilities than

00:45:24.710 --> 00:45:27.980
just these LLVM technologies,
so let's take a look at

00:45:27.980 --> 00:45:29.900
some of these right now.

00:45:29.900 --> 00:45:31.480
We have two great tools for this.

00:45:31.630 --> 00:45:33.990
One is the Instruments
Performance Analysis tool,

00:45:34.020 --> 00:45:37.010
which can pretty much tell you
anything you want to know about

00:45:37.010 --> 00:45:39.960
how your application is running
and what it's doing at runtime,

00:45:39.960 --> 00:45:44.320
including telling you about memory use,
network, disk I/O, system calls,

00:45:44.330 --> 00:45:46.510
just about anything you could want.

00:45:46.660 --> 00:45:48.940
Last year we also introduced
the OpenGL Frame Debugger,

00:45:48.940 --> 00:45:52.990
which can capture and play back
the series of OpenGL API calls,

00:45:52.990 --> 00:45:55.430
and better yet,
show you the textures and the resources

00:45:55.430 --> 00:46:01.190
that your application is using at runtime
so you can see what's going into a frame.

00:46:01.360 --> 00:46:03.870
This year we've gone even farther
beyond that by integrating

00:46:03.880 --> 00:46:08.700
OpenGL performance information
directly into the Debug Navigator,

00:46:08.840 --> 00:46:13.200
and we've even built an entire
OpenGL Expert right into the tools.

00:46:13.360 --> 00:46:16.110
And instead of telling
you all about this,

00:46:16.110 --> 00:46:20.780
I'd really like to invite Ted Kremenek
up to show you how it works.

00:46:20.780 --> 00:46:20.780
Ted?

00:46:22.100 --> 00:46:23.100
Okay, great.

00:46:23.100 --> 00:46:25.830
So here we are in Xcode,
and we're looking again at

00:46:25.830 --> 00:46:28.490
the demo application that
we showed you earlier today.

00:46:28.700 --> 00:46:30.340
And this time,
I'm going to go ahead and run

00:46:30.340 --> 00:46:34.660
this on an iPad 2 that's sitting
right here in front of me.

00:46:34.660 --> 00:46:36.460
So let me switch to that display.

00:46:36.460 --> 00:46:37.860
Okay, here we are.

00:46:37.860 --> 00:46:40.640
So we've got this beautiful
photograph of the Golden Gate Bridge,

00:46:40.640 --> 00:46:45.540
and we've enhanced this application
to show a new OpenGL visualization

00:46:45.540 --> 00:46:47.760
that shows the 3D model of the bridge.

00:46:47.760 --> 00:46:51.040
And this is going to showcase some
of our debugging features because

00:46:51.180 --> 00:46:53.770
it doesn't quite work as expected.

00:46:54.010 --> 00:46:57.000
including expanding to the OpenGL view.

00:46:57.000 --> 00:46:58.200
Here we go.

00:46:58.200 --> 00:47:00.660
So great view of the Golden Gate Bridge.

00:47:00.660 --> 00:47:03.190
And beyond just panning
around the bridge itself,

00:47:03.220 --> 00:47:05.960
I've enhanced this view
to respond to touch.

00:47:05.960 --> 00:47:09.960
So it's supposed to change the
camera angle when I touch the screen.

00:47:09.960 --> 00:47:14.360
But I haven't actually tested this yet,
so let's see if this actually works.

00:47:14.360 --> 00:47:15.730
And apparently it doesn't.

00:47:15.810 --> 00:47:19.560
Instead of the camera angle changing,
it stopped.

00:47:19.560 --> 00:47:23.490
So I guess I could call this a feature,
but this is actually not

00:47:23.490 --> 00:47:25.900
the behavior I intended.

00:47:25.900 --> 00:47:27.640
Let's look again at Xcode.

00:47:27.640 --> 00:47:30.440
And we can see that we
stopped right in the debugger.

00:47:30.440 --> 00:47:33.600
And on the right,
we see this exe bad access message.

00:47:33.600 --> 00:47:38.000
And that's Unix parlance for you
to reference a bad pointer value.

00:47:38.000 --> 00:47:40.980
Let me pull up the variables
view at the bottom.

00:47:41.010 --> 00:47:46.540
So we were referencing a field
off of this variable ggdpp.

00:47:46.540 --> 00:47:49.170
If I expand it in the variables view,
you can see it's just a bunch

00:47:49.170 --> 00:47:50.630
of garbage pointer values.

00:47:50.670 --> 00:47:53.960
The debugger can even tell that
it can't safely dereference them

00:47:53.960 --> 00:47:57.050
because these floating point
values aren't getting printed out.

00:47:57.090 --> 00:48:00.060
So I have one of two possible problems.

00:48:00.060 --> 00:48:04.060
Either I failed to initialize
the object correctly or I just

00:48:04.510 --> 00:48:07.360
collaborated somewhere along the way.

00:48:07.360 --> 00:48:10.140
Let's go ahead and
investigate what's going on.

00:48:10.140 --> 00:48:13.370
Using Xcode's navigation features,
let's see where this

00:48:13.420 --> 00:48:15.000
variable was declared.

00:48:15.030 --> 00:48:18.160
Here I can see that it's
a static global variable.

00:48:18.160 --> 00:48:19.300
It's a pointer.

00:48:19.300 --> 00:48:22.620
And it's actually
initialized to being a null.

00:48:22.620 --> 00:48:27.480
So this means I must have initialized
it somewhere or else I would reference

00:48:27.540 --> 00:48:31.500
a null pointer instead of just
some subfield that was garbage.

00:48:31.530 --> 00:48:34.060
Since it's static,
I know that its visibility

00:48:34.060 --> 00:48:36.560
is restricted to this file,
so let's just go ahead

00:48:36.560 --> 00:48:37.900
and scan downwards.

00:48:37.900 --> 00:48:41.040
And here we see some lazy
initialization logic that appears to

00:48:41.040 --> 00:48:43.390
be firing when this view starts up.

00:48:43.480 --> 00:48:45.920
Now, perhaps I messed up
when I wrote this code.

00:48:45.920 --> 00:48:51.230
Maybe there's some logic bug in
this lazy initialization routine.

00:48:51.320 --> 00:48:55.100
So let's go back to breakpoint and
see what happens when I rerun the

00:48:55.100 --> 00:48:57.820
application and stop at this point.

00:48:57.820 --> 00:48:58.960
Not much to see here.

00:48:58.990 --> 00:49:01.780
I'm just opening up the
OpenGL view you saw again.

00:49:01.780 --> 00:49:05.480
And here we've stopped in
the breakpoint as expected.

00:49:05.500 --> 00:49:08.180
The variables view shows that
it's still a null pointer,

00:49:08.190 --> 00:49:12.010
so nothing else has gone
on until this point.

00:49:12.120 --> 00:49:15.480
Let's look at this helper
function to see what's going on.

00:49:15.480 --> 00:49:17.980
As you can see,
it's just standard boilerplate

00:49:17.980 --> 00:49:19.080
initialization code.

00:49:19.080 --> 00:49:21.280
We're just creating a
bunch of structures,

00:49:21.280 --> 00:49:23.320
initializing them,
and we see them showing

00:49:23.320 --> 00:49:25.440
up in the variables view.

00:49:25.440 --> 00:49:27.240
Everything looks fine here.

00:49:27.240 --> 00:49:29.990
These values look just
what I expect them to be.

00:49:30.090 --> 00:49:32.390
I see floating point values.

00:49:32.440 --> 00:49:35.400
Let's get out of this function,
and immediately we see one of

00:49:35.450 --> 00:49:38.980
the great new enhancements to
the debugger user experience,

00:49:38.980 --> 00:49:42.320
and that now the return value of
a function you just stepped out

00:49:42.570 --> 00:49:45.580
of shows up in the variables view.

00:49:48.700 --> 00:49:51.410
And this is great,
because if this value was consumed

00:49:51.410 --> 00:49:54.100
in some larger expression,
you wouldn't have seen it, right?

00:49:54.100 --> 00:49:56.400
You might have to restructure
your code in order to,

00:49:56.400 --> 00:49:58.680
you know, debug those kind of values.

00:49:58.770 --> 00:50:01.540
Let's step one more time and see if
that value is getting assigned correctly

00:50:01.590 --> 00:50:03.700
to the variable that we cared about.

00:50:03.740 --> 00:50:07.410
So I can rule out bogus initialization.

00:50:07.540 --> 00:50:10.300
So this means that at this point,
I think I just must be

00:50:10.300 --> 00:50:12.230
collaborating this somewhere else.

00:50:12.560 --> 00:50:15.100
And to debug this,
I could do a variety of things.

00:50:15.100 --> 00:50:18.400
I could create a whole bunch of
breakpoints within this code,

00:50:18.440 --> 00:50:20.690
and just try and, you know,
bisect down to where the

00:50:20.740 --> 00:50:21.900
problem is happening.

00:50:21.900 --> 00:50:24.450
Maybe I could even add
logging statements.

00:50:24.530 --> 00:50:26.500
Instead,
let's resort to a far more elegant

00:50:26.500 --> 00:50:30.120
technique and use hardware watchpoints.

00:50:30.230 --> 00:50:34.280
I can add a watchpoint just by
clicking on the variable and saying

00:50:34.300 --> 00:50:37.500
"watch" in the variable name,
or the field name in this case.

00:50:37.530 --> 00:50:40.900
And what will happen is when
I continue the application,

00:50:40.930 --> 00:50:45.410
when this memory is modified,
the debugger will stop.

00:50:45.670 --> 00:50:48.100
This is exactly what I want to see.

00:50:48.100 --> 00:50:50.560
So let's continue.

00:50:50.690 --> 00:50:54.680
I'm just going to touch
the screen one more time.

00:50:55.210 --> 00:50:57.790
And here we have our smoking gun, right?

00:50:57.940 --> 00:51:01.790
We're doing a mem copy right
over that memory address,

00:51:01.910 --> 00:51:02.100
right?

00:51:02.100 --> 00:51:04.730
We're just blowing away all those fields.

00:51:04.850 --> 00:51:07.600
And it doesn't take much effort
to see what the problem was.

00:51:07.600 --> 00:51:12.000
It looks like I have a single typo where
I meant to copy into this variable,

00:51:12.050 --> 00:51:15.100
but instead I was copying
into the global one.

00:51:15.140 --> 00:51:16.290
So easy mistake.

00:51:16.370 --> 00:51:18.100
Maybe it was copy/paste.

00:51:18.100 --> 00:51:21.840
But it leaves me a little nervous, like,
well, what other problems like

00:51:21.910 --> 00:51:25.100
this are still in my code?

00:51:25.100 --> 00:51:27.070
The debugger was great
for finding this problem,

00:51:27.120 --> 00:51:30.400
but if I hadn't actually
tested all the code paths,

00:51:30.400 --> 00:51:34.000
maybe my user is going to
experience something that

00:51:34.100 --> 00:51:36.080
I just didn't test completely.

00:51:36.200 --> 00:51:39.760
So in Xcode 4.4 and 4.5,
we've significantly enhanced the

00:51:39.760 --> 00:51:43.100
Static Source Code Analyzer to
help you find issues like these.

00:51:43.100 --> 00:51:46.490
It won't find necessarily all of them,
but it will do a vastly

00:51:46.490 --> 00:51:48.100
improved job of doing so.

00:51:48.100 --> 00:51:51.990
Let's go ahead and run the
Static Analyzer on this now.

00:51:52.590 --> 00:51:56.930
This does a comprehensive source code
analysis without running your program,

00:51:56.930 --> 00:52:00.190
and we immediately see an analyzer
warning coming up very close to the

00:52:00.250 --> 00:52:01.700
point where we have the problem.

00:52:02.010 --> 00:52:04.940
We click on the issue,
which says that we're using a garbage

00:52:04.940 --> 00:52:06.900
value as part of a multiplication.

00:52:06.980 --> 00:52:10.260
We get this rich diagnosis of a bug.

00:52:10.470 --> 00:52:13.200
And we can see from the
start of update scene,

00:52:13.200 --> 00:52:17.410
we declare our variable,
and we step into the function

00:52:17.410 --> 00:52:19.660
copy bridge position.

00:52:19.740 --> 00:52:21.790
And you can see in the
navigator bar at the top,

00:52:21.880 --> 00:52:26.340
we actually have this abstract
call stack that you can dig into.

00:52:26.420 --> 00:52:29.490
And we can see the analyzer is actually
doing a deep reasoning of this code.

00:52:29.650 --> 00:52:34.000
And it can tell that that memory is
not actually properly initialized

00:52:34.000 --> 00:52:36.110
because that value is not used.

00:52:36.320 --> 00:52:40.950
Just simple things like this is going to
greatly improve the analyzer's precision.

00:52:40.960 --> 00:52:44.380
It reduces false positives and
increases its coverage over

00:52:44.380 --> 00:52:46.890
understanding what your code is doing.

00:52:46.990 --> 00:52:49.200
So the fix is simple.

00:52:49.430 --> 00:52:51.190
Just change a single character.

00:52:51.400 --> 00:52:54.740
The power of demos, the fixes are easy.

00:52:54.910 --> 00:52:57.660
And let's rerun this application.

00:52:57.810 --> 00:53:00.300
Here we have the Golden Gate Bridge.

00:53:00.430 --> 00:53:03.040
But now when I actually touch it,
the screen, you know,

00:53:03.040 --> 00:53:06.190
the camera changes just as I expect.

00:53:06.450 --> 00:53:09.740
Now, there's one thing about this that
isn't really so appealing right now,

00:53:09.740 --> 00:53:12.410
even though it's not crash anymore,
is that the frame rate

00:53:12.410 --> 00:53:13.740
is still pretty choppy.

00:53:14.020 --> 00:53:17.090
And we have some great new
performance analysis tools in Xcode

00:53:17.280 --> 00:53:20.340
to help you dig into these problems.

00:53:20.480 --> 00:53:23.400
If you draw your attention to the
debug navigator up the top left,

00:53:23.400 --> 00:53:27.660
we see this live view of frames per
second of your current OpenGL view.

00:53:27.710 --> 00:53:30.830
And it's color-coded in red
because the frames per second

00:53:30.830 --> 00:53:32.650
isn't really all that great.

00:53:32.780 --> 00:53:36.390
Here in these histograms,
we have this live view of essentially

00:53:36.390 --> 00:53:39.210
how you're bound in terms of
computing the current frames.

00:53:39.280 --> 00:53:41.500
Here we see that we're GPU bound.

00:53:41.510 --> 00:53:43.950
And if I click this Analyze
Performance button at the top,

00:53:44.140 --> 00:53:48.040
it summons that OpenGL expert who's
going to go and do an extensive

00:53:48.160 --> 00:53:50.620
performance analysis for me.

00:53:50.670 --> 00:53:54.810
What's happening at this point
is Xcode is sampling a current

00:53:54.810 --> 00:53:57.280
frame from that 3D rendering.

00:53:57.350 --> 00:54:01.300
It's logging all the OpenGL calls
needed to construct that frame.

00:54:01.320 --> 00:54:04.950
And then once it does so,
it runs a series of performance

00:54:04.950 --> 00:54:10.080
tests on the device itself,
essentially trying to manipulate the

00:54:10.080 --> 00:54:14.880
graphics pipeline to see where the
performance bottlenecks might be.

00:54:14.940 --> 00:54:17.650
Now, this is taking a little bit of time,
but if you contrast this to

00:54:17.650 --> 00:54:20.740
what an OpenGL expert might do,
they might run these tests over

00:54:20.740 --> 00:54:25.150
the series of an entire afternoon,
whereas Xcode is running it for you

00:54:25.150 --> 00:54:27.930
automatically in a matter of minutes.

00:54:28.090 --> 00:54:31.640
Now, in just a moment, as you can see,
we have this progress bar here,

00:54:31.800 --> 00:54:34.160
and you can't see it right now,
but basically the display has

00:54:34.160 --> 00:54:37.420
gone black on the iPad because
it's running these tests.

00:54:37.490 --> 00:54:40.310
But in a moment, you're going to see some
diagnostics come up here.

00:54:40.460 --> 00:54:41.230
Great.

00:54:41.410 --> 00:54:44.610
So immediately,
the OpenGL Performance Analyzer says

00:54:44.620 --> 00:54:47.380
that we're fragment shader bound,
and because of that,

00:54:47.380 --> 00:54:49.460
it's going to run additional experiments.

00:54:49.580 --> 00:54:51.810
If I have the Assistant Editor over
here on the right,

00:54:51.820 --> 00:54:54.920
if I click on specific issues,
it'll bring me to the shader or

00:54:54.980 --> 00:54:58.300
the draw call that's responsible
for some of the performance issues.

00:54:58.410 --> 00:55:00.480
And from here,
I can really dive in and do an

00:55:00.550 --> 00:55:02.540
extensive performance analysis.

00:55:02.540 --> 00:55:04.590
So all of this is really great.

00:55:04.600 --> 00:55:07.370
From this, I'll be able to improve the
performance of my rendering.

00:55:07.530 --> 00:55:12.290
And we have shown you just a few
highlights of the new debugging

00:55:12.330 --> 00:55:16.830
and performance analysis techniques
we've added to Xcode 4.4 and 4.5.

00:55:16.880 --> 00:55:18.700
We think you're really
going to love them.

00:55:18.740 --> 00:55:20.990
Thank you very much.

00:55:23.350 --> 00:55:24.430
Thanks, Ted.

00:55:24.510 --> 00:55:29.000
We are really excited about these
improvements to our performance tools.

00:55:29.000 --> 00:55:31.800
Static Analyzer with now
cross-functional analysis,

00:55:31.870 --> 00:55:36.250
all the improvements to LLDB,
and the new enhancements to

00:55:36.250 --> 00:55:40.320
the OpenGL ES Debugger with the
Performance Detective built right in.

00:55:40.420 --> 00:55:42.990
We feel these tools are really going
to help you guys take all of your

00:55:42.990 --> 00:55:44.840
applications to the next level.

00:55:44.840 --> 00:55:46.980
Now, of course,
once you're done optimizing

00:55:46.980 --> 00:55:50.060
your applications,
the next thing you want to do is ship it.

00:55:50.170 --> 00:55:55.000
And Xcode has a full complement of tools
built in to help you achieve this goal.

00:55:55.450 --> 00:55:57.800
Whether you're trying to
ship your application to the

00:55:57.800 --> 00:56:00.500
App Store with Developer ID or
through another mechanism,

00:56:00.570 --> 00:56:04.310
Xcode has complete integration with
the Apple Developer Programs to

00:56:04.310 --> 00:56:06.080
make this easy.

00:56:06.510 --> 00:56:09.090
If you're a Mac developer and
you want to use Developer ID,

00:56:09.330 --> 00:56:11.010
there's really nothing
more for you to do.

00:56:11.070 --> 00:56:14.960
Xcode will automatically request and
download your Developer ID certificate,

00:56:15.050 --> 00:56:16.980
and you can get off and running.

00:56:17.090 --> 00:56:19.480
If you'd like to ship your
app in one of the app stores,

00:56:19.480 --> 00:56:21.580
Xcode and the
Developer Portal automatically

00:56:21.580 --> 00:56:27.400
integrate to give you guys access to the
assets necessary for your applications.

00:56:27.460 --> 00:56:30.340
Xcode and the Portal will
collaborate to give you access to

00:56:30.340 --> 00:56:35.310
your group's definitions and teams,
your devices, all of your provisioning

00:56:35.310 --> 00:56:38.210
profiles and certificates,
pretty much everything you need to do.

00:56:38.320 --> 00:56:41.420
And this includes updating your
provisioning profiles to use the

00:56:41.420 --> 00:56:44.060
latest features and enhancements.

00:56:44.160 --> 00:56:47.550
The latest Xcode includes support for
some of the new features and entitlements

00:56:47.870 --> 00:56:49.960
that were announced just yesterday.

00:56:50.060 --> 00:56:51.420
Two that I would like to point out.

00:56:51.540 --> 00:56:54.500
The first is in-app purchase content.

00:56:54.550 --> 00:56:57.020
Xcode now includes a project
template for you to create

00:56:57.110 --> 00:57:00.300
your in-app purchase content,
and will support submitting

00:57:00.300 --> 00:57:04.280
the content directly to the app
store alongside your application.

00:57:04.280 --> 00:57:07.170
Xcode also includes development
time support for working with

00:57:07.170 --> 00:57:10.780
Passbook and transit apps,
so you can adopt these very

00:57:10.780 --> 00:57:13.150
quickly for your applications.

00:57:13.570 --> 00:57:16.390
For OS X developers,
Xcode also includes really easy

00:57:16.430 --> 00:57:20.700
support for setting up and enabling
sandboxing for your application.

00:57:20.820 --> 00:57:23.460
The target editor includes a
rich selection of sandboxing

00:57:23.550 --> 00:57:26.400
options for you to enable,
and you can get off and running.

00:57:26.510 --> 00:57:28.140
Now, when you're ready to
deploy your application,

00:57:28.220 --> 00:57:31.200
Xcode's archiving feature
makes it really easy to package

00:57:31.270 --> 00:57:33.240
up and deploy your content.

00:57:33.380 --> 00:57:36.340
Simply select the archive
option under the product menu,

00:57:36.340 --> 00:57:40.560
and Xcode will do all the work
underneath to package up your content.

00:57:40.670 --> 00:57:43.390
You'll find all of your archives
in the Archives Organizer.

00:57:43.660 --> 00:57:46.260
It keeps a historical list
of everything you've built.

00:57:46.340 --> 00:57:48.350
And once you've found the archive
that you want to distribute,

00:57:48.480 --> 00:57:51.640
it's as simple as selecting
it and clicking the Distribute

00:57:51.640 --> 00:57:52.790
button in the upper right.

00:57:52.920 --> 00:57:55.860
For iOS developers,
you have the option to submit

00:57:55.860 --> 00:57:59.330
directly to the iOS App Store,
save for enterprise

00:57:59.380 --> 00:58:02.100
or ad hoc deployments,
or share with another

00:58:02.100 --> 00:58:03.800
one of your team members.

00:58:03.890 --> 00:58:06.330
OS X developers can submit
to the Mac App Store,

00:58:06.660 --> 00:58:09.900
sign with a developer ID,
or export to share with, for example,

00:58:09.900 --> 00:58:10.560
a beta tester.

00:58:10.560 --> 00:58:13.060
So no matter what
audience you're targeting,

00:58:13.170 --> 00:58:15.290
whether it's a beta tester,
a member of your team,

00:58:15.490 --> 00:58:17.560
one of the app stores,
or using developer ID,

00:58:17.810 --> 00:58:22.190
the Xcode IDE has a complete set
of tools to make that possible.

00:58:22.320 --> 00:58:25.600
So now is your opportunity to
go out and try these new tools.

00:58:25.720 --> 00:58:28.200
As a reminder,
we have two versions upcoming.

00:58:28.280 --> 00:58:32.750
Xcode 4.4 alongside OS X Mountain Lion,
and then later after that,

00:58:32.750 --> 00:58:36.700
you'll see Xcode 4.5 alongside iOS 6.

00:58:36.800 --> 00:58:41.440
For this week, we're giving you access
to Xcode 4.5 as a preview.

00:58:41.540 --> 00:58:43.720
And as a reminder,
this application version works on

00:58:43.760 --> 00:58:47.830
both OS X Lion and Mountain Lion,
so you can get started right away.

00:58:47.940 --> 00:58:50.550
And with that, thank you very much.