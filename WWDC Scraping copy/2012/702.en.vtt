WEBVTT

00:00:10.130 --> 00:00:12.270
Good morning, I guess, still.

00:00:12.400 --> 00:00:17.340
I am Perry 'the Cynic'.
I invented Gatekeeper,

00:00:17.520 --> 00:00:19.350
and so I'm here to tell you about it.

00:00:19.580 --> 00:00:23.840
We have a lot of ground to cover,
so let's get started.

00:00:23.900 --> 00:00:28.160
I'm going to tell you what
Gatekeeper is and how it works.

00:00:28.410 --> 00:00:31.190
I'm going to tell you how to
use it to control what can be

00:00:31.190 --> 00:00:34.220
installed and run on your Macintosh.

00:00:34.880 --> 00:00:39.550
I'll tell you how to use Developer ID to
sign programs so other people will let

00:00:39.640 --> 00:00:42.280
them install and run on their Macintosh.

00:00:42.350 --> 00:00:46.310
I'll tell you a little bit about
how to debug problems you may have.

00:00:46.580 --> 00:00:49.770
And because a lot of what I'm
going to tell you won't make

00:00:49.770 --> 00:00:52.320
any sense to you without it,
I'm going to start with

00:00:52.380 --> 00:00:53.820
a code signing refresher.

00:00:54.000 --> 00:00:58.540
We haven't had a session on code signing
for a while because it hasn't changed.

00:00:58.540 --> 00:01:01.400
It's a fairly mature
technology at this point.

00:01:01.540 --> 00:01:05.310
So chances are you've never
actually heard about it.

00:01:05.490 --> 00:01:08.420
So this is a general code signing primer.

00:01:08.690 --> 00:01:12.590
This is not specific to Gatekeeper,
and it's just enough to get you going.

00:01:12.720 --> 00:01:13.510
There is a lot more.

00:01:13.670 --> 00:01:16.060
There's a lot more documentation on this.

00:01:16.160 --> 00:01:18.120
Don't be afraid to read that.

00:01:18.290 --> 00:01:21.770
Code signing is an
identification technology.

00:01:21.910 --> 00:01:28.390
It's about looking at a piece of code,
an app, a tool, a library, and say,

00:01:28.390 --> 00:01:30.090
"What is that?"

00:01:30.720 --> 00:01:31.760
How can I identify it?

00:01:31.860 --> 00:01:33.540
How can I recognize it?

00:01:33.720 --> 00:01:38.780
Code signing itself is not necessarily
about defeating or prohibiting anything.

00:01:38.810 --> 00:01:39.500
That's not its job.

00:01:39.500 --> 00:01:41.230
Its job is to recognize.

00:01:41.280 --> 00:01:42.950
Now, its job is to reliably recognize.

00:01:43.040 --> 00:01:46.040
So if somebody changes the
code after you sign it,

00:01:46.240 --> 00:01:47.200
we notice.

00:01:47.250 --> 00:01:49.980
So we put a cryptographic
seal around this code thing.

00:01:50.190 --> 00:01:54.160
You don't need to know how that's done,
unless you want to.

00:01:54.160 --> 00:01:58.150
But yes, we can tell if it's got
changed after signing.

00:01:58.560 --> 00:02:03.490
If this is an app or a
framework with bundle resources,

00:02:03.570 --> 00:02:06.180
we are sealing the bundle resources,
so we can tell if the bundle

00:02:06.200 --> 00:02:07.220
resources got changed.

00:02:07.490 --> 00:02:10.490
This is important because there's
things in there like nibs that

00:02:10.490 --> 00:02:12.320
are basically free-strite code.

00:02:14.210 --> 00:02:18.690
And since anybody can sign code,
it's a public API and a perfectly

00:02:18.780 --> 00:02:22.160
useful command line tool,
we need a little bit more than

00:02:22.220 --> 00:02:23.560
just checking that it changed.

00:02:23.670 --> 00:02:26.940
We also need to have something
that tells us who signed this.

00:02:27.100 --> 00:02:32.780
So we are applying a digital signature.

00:02:33.080 --> 00:02:36.780
that relies on a secret that only
the particular developer has,

00:02:36.780 --> 00:02:39.780
whether it's Apple or you,
doesn't matter.

00:02:40.470 --> 00:02:45.940
Now, one thing that code signing
does very well is you can

00:02:45.940 --> 00:02:47.270
tell that code got changed.

00:02:47.390 --> 00:02:48.200
That's cool.

00:02:48.200 --> 00:02:51.840
But it also can tell that you changed it,
that the developer changed the code,

00:02:51.840 --> 00:02:53.980
and even though the
bytes are all different,

00:02:53.980 --> 00:02:55.710
it's meant to be the same program.

00:02:55.770 --> 00:02:58.520
So that's baked into that
logic of code signing.

00:02:58.550 --> 00:03:01.540
I'll tell you a little
bit about how that works.

00:03:01.590 --> 00:03:05.130
This is all about identity,
about what a piece of

00:03:05.230 --> 00:03:07.180
code is supposed to be.

00:03:07.180 --> 00:03:08.780
Is it supposed to be
Apple's mail program?

00:03:08.780 --> 00:03:10.840
Is it supposed to be your utility?

00:03:10.930 --> 00:03:13.910
Is it supposed to be a library
or plug-in that you built?

00:03:14.020 --> 00:03:15.850
That's identification.

00:03:16.010 --> 00:03:18.400
This is the one takeaway from this.

00:03:18.440 --> 00:03:21.610
And then, last but not least,
this is supposed to work at

00:03:21.610 --> 00:03:24.850
runtime and fast enough that
you generally don't notice.

00:03:25.140 --> 00:03:28.380
That's actually a really good trick,
and there's a lot of

00:03:28.390 --> 00:03:29.960
code just to do that.

00:03:30.780 --> 00:03:33.070
Yeah, yeah, picture, 1,000 words,
let's try that.

00:03:33.080 --> 00:03:38.450
So your code, your final code,
you've done everything to

00:03:38.530 --> 00:03:39.800
it that you can possibly do.

00:03:39.800 --> 00:03:42.760
You've stuck in all the localizations,
you've polished all the resources,

00:03:42.760 --> 00:03:49.300
you did all the NM editing and symbol
removing and localization fixes,

00:03:49.300 --> 00:03:50.940
and you added all the helpers.

00:03:50.940 --> 00:03:51.670
It's done.

00:03:51.700 --> 00:03:53.120
You're not going to change it again.

00:03:53.140 --> 00:03:55.680
This is what you feed to
the code signing machinery.

00:03:55.700 --> 00:03:58.670
Now, typically, Xcode does this for you,
but you can run the command

00:03:58.670 --> 00:03:59.690
line tool if you want to.

00:04:00.700 --> 00:04:04.940
And we said we need secret,
so here is a cryptographic identity.

00:04:04.940 --> 00:04:05.920
It sits in your keychain.

00:04:05.920 --> 00:04:09.960
You may have gotten it from
Apple through a developer program,

00:04:09.960 --> 00:04:12.640
but you could also have gotten
it from a third-party vendor that

00:04:13.090 --> 00:04:16.820
sold it to you for good money,
or you can make it yourself.

00:04:16.880 --> 00:04:18.240
The machinery doesn't care.

00:04:18.260 --> 00:04:21.750
A signing identity is a signing identity,
and it'll work.

00:04:24.130 --> 00:04:27.260
So, it will sputter a little bit,
and then it'll put out a

00:04:27.290 --> 00:04:30.840
modified version of your program,
and it's signed.

00:04:30.910 --> 00:04:32.440
This is the thing you
don't change anymore,

00:04:32.590 --> 00:04:34.270
because now we can tell.

00:04:34.460 --> 00:04:37.900
This is how you ship to the end user,
through the Mac App Store,

00:04:37.900 --> 00:04:40.190
or through a website,
or you mail it to them,

00:04:40.190 --> 00:04:42.420
or you hand them a USB dongle,
we don't care.

00:04:42.590 --> 00:04:45.600
The important point is
that it doesn't change.

00:04:45.770 --> 00:04:48.060
For all we care,
you can use binary patch update

00:04:48.060 --> 00:04:50.500
mechanisms with really smart internals.

00:04:50.840 --> 00:04:54.050
It doesn't matter as long as
what you end up with on the end

00:04:54.050 --> 00:04:55.990
user system is the same bytes.

00:04:56.930 --> 00:04:59.660
And at some point,
that program gets interesting.

00:04:59.700 --> 00:05:02.330
It tries to run in a
Gatekeeper environment.

00:05:02.350 --> 00:05:05.410
It asks for access to a keychain
while it's already running.

00:05:05.540 --> 00:05:06.610
It wants to be a debugger.

00:05:06.790 --> 00:05:09.540
There's more and more
scenarios every year.

00:05:09.570 --> 00:05:12.790
In any case,
whoever controls that resource

00:05:12.790 --> 00:05:17.800
is feeding your program to the
codesigning verifying machine.

00:05:18.130 --> 00:05:20.890
And that checks that the
cryptographic seal hasn't changed,

00:05:21.030 --> 00:05:23.520
that nobody has messed with
it since it got signed.

00:05:23.600 --> 00:05:28.260
But remember,
just checking for integrity isn't enough,

00:05:28.300 --> 00:05:32.420
because a bad guy can take your program,
strip off your signature, change it,

00:05:32.560 --> 00:05:33.840
put on their signature.

00:05:33.850 --> 00:05:36.310
Now it's their signature,
but it's still intact.

00:05:36.450 --> 00:05:40.940
So we need something else that
actually checks that this is

00:05:40.940 --> 00:05:44.150
the program as you signed it,
not as somebody else signed it.

00:05:44.300 --> 00:05:47.320
So we have this thing
called a code requirement,

00:05:47.320 --> 00:05:49.820
which is essentially a simple rule.

00:05:49.870 --> 00:05:51.180
Things to check for.

00:05:51.220 --> 00:05:53.560
Typically,
it checks for what's signed with you.

00:05:53.560 --> 00:05:55.390
It checks for what's signed with
your cryptographic identity.

00:05:55.430 --> 00:05:57.440
Now where do we get these
code requirements from?

00:05:57.460 --> 00:05:59.530
Often, surprisingly enough,
you get them from the

00:05:59.530 --> 00:06:02.490
program you're looking at,
because most of the time,

00:06:02.570 --> 00:06:06.560
you actually don't care who made
this program during verification.

00:06:06.630 --> 00:06:09.080
You care that it's the same
program you saw before.

00:06:09.110 --> 00:06:11.040
Think about the keychain as an example.

00:06:11.060 --> 00:06:17.310
When a program creates a keychain item,
the system creates an access control list

00:06:17.430 --> 00:06:20.160
that says who has access to that item.

00:06:20.180 --> 00:06:23.560
And the default value is the
application that made it.

00:06:23.560 --> 00:06:25.280
The keychain doesn't care who you are.

00:06:25.400 --> 00:06:27.540
The keychain doesn't care
what program that is.

00:06:27.640 --> 00:06:30.400
All it cares is that the program
that comes along tomorrow and says,

00:06:30.510 --> 00:06:33.000
"I want that keychain item,"
is the same one that made it.

00:06:33.000 --> 00:06:36.980
And remember I said we
tolerate intentional changes.

00:06:37.140 --> 00:06:38.840
So if the program comes
along in two weeks,

00:06:38.840 --> 00:06:41.440
it's your new, updated,
improved version of the same program,

00:06:41.440 --> 00:06:42.370
and it'll still work.

00:06:42.700 --> 00:06:44.540
That's the magic.

00:06:45.540 --> 00:06:50.080
Now, that code requirement gets
stored somewhere so that

00:06:50.080 --> 00:06:51.550
it can be remembered later.

00:06:51.670 --> 00:06:54.310
In the case of the keychain,
it's in the keychain itself,

00:06:54.310 --> 00:06:55.720
the access control list.

00:06:55.800 --> 00:06:58.220
Other subsystems have a
database in the system,

00:06:58.240 --> 00:06:59.430
Gatekeeper does.

00:06:59.630 --> 00:07:04.470
Sometimes it's just a hard-coded rule,
you know, must be made by Apple.

00:07:05.330 --> 00:07:10.120
This particular mechanism of pulling
a code requirement from a program and

00:07:10.120 --> 00:07:13.960
remembering it is so frequent and so
fundamental that we've given it a name.

00:07:13.960 --> 00:07:17.330
We call it the designated
requirement of your program.

00:07:17.460 --> 00:07:20.050
It's essentially a code
requirement that says,

00:07:20.110 --> 00:07:22.950
"How shall I recognize
you again?" You know,

00:07:22.950 --> 00:07:26.510
"What should I check an
imposter to see if it's you?"

00:07:26.910 --> 00:07:30.410
Now, normally, the designated requirement
gets magically produced by just

00:07:30.410 --> 00:07:33.530
looking at your code signature,
the code signature of your program,

00:07:33.680 --> 00:07:36.800
and deciding what a good match means.

00:07:36.910 --> 00:07:38.640
But sometimes that's not good enough.

00:07:38.790 --> 00:07:41.300
Sometimes you actually
need to cook one yourself.

00:07:41.430 --> 00:07:44.800
So when you sign a program optionally,
you can explicitly say,

00:07:44.800 --> 00:07:48.030
this is the designated requirement
I want my program to have.

00:07:48.270 --> 00:07:51.680
And this is important for some
of you because this is what you

00:07:51.730 --> 00:07:55.540
do when you transition from one
signing identity to another.

00:07:55.600 --> 00:07:59.300
So keep that in mind,
designated requirements.

00:08:00.300 --> 00:08:04.760
So we have the cryptographic identity,
the secret that you have that proves

00:08:04.760 --> 00:08:09.080
that you're you because you're not
stupid enough to give it to someone else.

00:08:09.120 --> 00:08:13.640
And we have code requirements that are
used to essentially match this identity.

00:08:13.720 --> 00:08:16.010
They go together, like key and lock.

00:08:16.080 --> 00:08:18.950
Sometimes it's hard to
tell which one's which.

00:08:19.680 --> 00:08:20.600
So code requirements.

00:08:20.600 --> 00:08:23.180
These are actually the most
important non-obvious part

00:08:23.340 --> 00:08:24.550
of this entire machinery.

00:08:24.600 --> 00:08:27.420
So let me just give you a couple of
examples of what that looks like.

00:08:27.650 --> 00:08:30.600
There's a text representation
for these and a binary.

00:08:30.600 --> 00:08:34.790
Mail.app, the mail program that
you all use on your Mac.

00:08:34.790 --> 00:08:37.580
This is its designated requirement.

00:08:37.630 --> 00:08:40.600
Basically it says it was signed by
Apple and its name is com.apple.mail.

00:08:40.600 --> 00:08:42.540
That's all there is to it.

00:08:42.600 --> 00:08:58.600
Now, if you made your own

00:09:00.000 --> 00:09:04.690
If you're signing an identity,
like with Keychain Access, you can,

00:09:04.690 --> 00:09:08.090
it's free, then you would end up with
a code requirement that

00:09:08.200 --> 00:09:09.500
looks something like this.

00:09:09.560 --> 00:09:11.240
There's no "anchor apple"
because you're not Apple.

00:09:11.240 --> 00:09:14.690
Instead, it's "anchor some hash," which
is basically the hash of the

00:09:14.690 --> 00:09:16.840
certificate that you made yourself.

00:09:16.920 --> 00:09:19.200
But otherwise, structurally,
it's the same.

00:09:19.260 --> 00:09:20.600
This is the identifier you gave it.

00:09:20.600 --> 00:09:22.460
It's typically your bundle identifier.

00:09:22.540 --> 00:09:24.600
And it was signed by this identifier.

00:09:24.770 --> 00:09:26.190
We don't really know who you are.

00:09:26.200 --> 00:09:28.490
We don't really need to know who you are.

00:09:28.760 --> 00:09:32.790
But we can recognize that particular
cryptographic certificate,

00:09:32.800 --> 00:09:35.450
and we know that you're holding
the key to it and nobody else does.

00:09:35.470 --> 00:09:37.200
That's good enough.

00:09:37.870 --> 00:09:41.830
Here's another code requirement,
just to give you an idea that we

00:09:41.830 --> 00:09:45.900
can do things here that aren't just
identifying individual programs.

00:09:46.010 --> 00:09:50.230
This one says it's signed by Apple,
and it has an info.p list with a

00:09:50.230 --> 00:09:55.330
particular key called application group,
and the value is .-mac.

00:09:55.630 --> 00:09:56.680
That's weird, you know.

00:09:56.960 --> 00:09:59.780
How did we come up with this?

00:09:59.910 --> 00:10:03.850
Long time ago, there was this thing
called .mac before me.com.

00:10:04.170 --> 00:10:05.690
Long time ago.

00:10:05.860 --> 00:10:09.280
And that's around the time
that code signing was invented.

00:10:09.330 --> 00:10:12.190
And one of the early requests was,
can't we just have something in

00:10:12.200 --> 00:10:15.230
keychain items that says anything
that Apple says in the future has

00:10:15.270 --> 00:10:18.440
access to your me.com password,
your .mac password.

00:10:18.740 --> 00:10:19.430
It'll just work.

00:10:19.520 --> 00:10:21.250
We don't have to keep
adding it to a list.

00:10:21.440 --> 00:10:23.180
So that's how it works.

00:10:23.240 --> 00:10:27.950
Whenever Apple ships another app that it
wants to have access to this password,

00:10:28.150 --> 00:10:29.840
it just gives it an info.p list entry.

00:10:30.000 --> 00:10:30.840
Like this.

00:10:30.840 --> 00:10:34.140
Key application group, value.mac.

00:10:34.400 --> 00:10:36.570
And poof, access.

00:10:37.080 --> 00:10:38.540
Great.

00:10:38.750 --> 00:10:42.950
Anything coming out of the
Mac App Store looks something like this.

00:10:43.310 --> 00:10:46.260
Anchor Apple generic means
it draws to the Apple anchor.

00:10:46.440 --> 00:10:49.470
And there is this identifier,
which is what you'd expect,

00:10:49.480 --> 00:10:50.370
the bundle ID.

00:10:50.580 --> 00:10:53.340
And then there is this totally opaque,
weird certificate leaf

00:10:53.390 --> 00:10:56.810
thing that basically says,
this is how Apple, the Mac App Store,

00:10:56.810 --> 00:10:57.720
signs stuff.

00:10:57.820 --> 00:10:59.100
You don't really need to understand.

00:10:59.100 --> 00:11:02.720
It's just some binary pattern
inside of particular certificates.

00:11:02.850 --> 00:11:04.810
But this is basically
how this machinery works.

00:11:04.940 --> 00:11:08.580
You just match things in the
certificates that sign the program,

00:11:08.580 --> 00:11:10.160
and you tack the name on.

00:11:10.280 --> 00:11:12.920
You're pretty much done.

00:11:13.040 --> 00:11:15.680
Just to jump a little bit ahead,
Developer ID looks like this.

00:11:15.680 --> 00:11:18.000
And you can tell it's
even more complicated.

00:11:18.130 --> 00:11:19.190
But the machinery is the same.

00:11:19.330 --> 00:11:21.920
You just take these little tests,
you and and or them together

00:11:21.920 --> 00:11:25.040
with parentheses and negations,
and there you are.

00:11:25.110 --> 00:11:28.070
If you pass this test,
you pass the code requirement.

00:11:28.080 --> 00:11:29.830
And if you don't, you don't.

00:11:29.860 --> 00:11:30.740
And that's all.

00:11:30.860 --> 00:11:32.680
You can settle down.

00:11:32.780 --> 00:11:34.820
That's code signing.

00:11:35.900 --> 00:11:37.890
So, Developer ID.

00:11:38.220 --> 00:11:41.100
You'll know about the
Mac Developer Program.

00:11:41.440 --> 00:11:45.590
Well, you develop for the Macintosh,
you are signed up as a Mac Developer,

00:11:45.770 --> 00:11:49.520
you pay your dues,
and you get your development certificates

00:11:49.520 --> 00:11:51.690
and your distribution certificates.

00:11:51.830 --> 00:11:54.900
You use the distribution certificates
to send stuff to the App Store,

00:11:55.020 --> 00:11:57.240
you develop with your
development certificates,

00:11:57.370 --> 00:12:00.960
and you've all signed little electronic
pieces of paper that say that you won't

00:12:01.050 --> 00:12:05.040
actually use those certificates for
shipment outside of the Mac App Store.

00:12:05.170 --> 00:12:06.860
You're prohibited from doing this.

00:12:06.860 --> 00:12:09.810
I know some of you do, but you shouldn't.

00:12:12.890 --> 00:12:13.790
So what's Developer ID?

00:12:13.810 --> 00:12:15.310
What's new?

00:12:15.550 --> 00:12:18.460
It is not actually a
new developer program.

00:12:18.560 --> 00:12:21.490
It's part of your Mac Developer Program.

00:12:21.550 --> 00:12:23.040
If you signed up for the
Mac Developer Program,

00:12:23.040 --> 00:12:25.450
you already can get
Developer ID certificates.

00:12:25.550 --> 00:12:27.340
It's part of the deal.

00:12:27.450 --> 00:12:29.450
You already signed the paperwork.

00:12:29.450 --> 00:12:31.160
There's nothing new to sign.

00:12:31.180 --> 00:12:32.440
You just have it.

00:12:35.610 --> 00:12:37.550
You get new certificates
through Developer ID,

00:12:37.770 --> 00:12:42.280
separate from the ones that you used to
get for working with the Mac App Store.

00:12:42.380 --> 00:12:43.970
We call them Developer ID certificates.

00:12:44.060 --> 00:12:47.970
It's not very creative, but, well,
then it's a break.

00:12:48.090 --> 00:12:52.570
And those are there explicitly
for distributing your stuff

00:12:52.630 --> 00:12:55.040
outside of the Mac App Store.

00:12:55.140 --> 00:12:56.460
So it's complementary.

00:12:56.550 --> 00:13:00.130
We're not doing away with the
Mac App certificates or the

00:13:00.370 --> 00:13:02.440
Mac App Store Developer Program.

00:13:02.550 --> 00:13:06.570
But now, for the first time,
you've got a way to take your program and

00:13:06.570 --> 00:13:10.090
sell it through the Mac App Store using
the old method or selling it

00:13:10.090 --> 00:13:12.490
anywhere else through Developer ID.

00:13:12.680 --> 00:13:14.880
And it's all done with
Apple certificates.

00:13:14.950 --> 00:13:17.040
No more, you know,
buying stuff from third parties,

00:13:17.040 --> 00:13:19.580
making your own stuff,
wondering whether you did it right.

00:13:19.770 --> 00:13:21.980
Because, you know, we make it easy.

00:13:22.200 --> 00:13:23.190
That's our job.

00:13:23.290 --> 00:13:26.220
We're trying to make it
easy to make cool stuff.

00:13:26.370 --> 00:13:28.400
Let's compare them.

00:13:29.720 --> 00:13:33.180
If you go the App Store route,
you distribute through the App Store.

00:13:33.180 --> 00:13:34.110
It's not your problem.

00:13:34.260 --> 00:13:37.830
Apple puts them on a server
and deals with the users.

00:13:38.000 --> 00:13:43.230
If you distribute through Developer ID,
it is your problem.

00:13:43.760 --> 00:13:45.570
Apple won't do it for you.

00:13:45.700 --> 00:13:47.590
You put it on your website
and people download it.

00:13:47.590 --> 00:13:50.090
It's your website or you
lease it from someone.

00:13:50.270 --> 00:13:52.550
You can sell it to a third party.

00:13:52.760 --> 00:13:55.030
For all we care,
you can put it on USB dongles

00:13:55.040 --> 00:13:57.090
and mail them through snail mail.

00:13:57.230 --> 00:13:59.900
Its distribution is totally up to you.

00:14:00.040 --> 00:14:01.240
Apple won't help you.

00:14:01.240 --> 00:14:02.520
We won't advertise.

00:14:02.520 --> 00:14:03.960
We won't bill for you.

00:14:04.190 --> 00:14:06.110
Your deal.

00:14:08.640 --> 00:14:11.830
Rules-wise, you all know,
you all should know,

00:14:11.830 --> 00:14:15.080
what the rules are for
the Mac App Store program.

00:14:15.260 --> 00:14:17.740
You've got the program
licensing agreement,

00:14:17.740 --> 00:14:20.900
you've got various
appendices and attachments,

00:14:21.040 --> 00:14:23.100
and then you've got store review.

00:14:23.470 --> 00:14:27.090
Everybody here has some
scars from store review.

00:14:28.950 --> 00:14:32.560
Developer ID doesn't have any store
review because it doesn't have a store.

00:14:32.620 --> 00:14:34.340
It's direct.

00:14:34.340 --> 00:14:36.600
You sign your stuff,
you give it to the user,

00:14:36.640 --> 00:14:38.300
the user's happy or he isn't.

00:14:38.380 --> 00:14:41.430
There is nobody at Apple who
looks at your program and

00:14:41.430 --> 00:14:43.000
says you shouldn't do that.

00:14:43.360 --> 00:14:45.960
If you do something you absolutely,
positively shouldn't do,

00:14:45.970 --> 00:14:48.550
we'll let you know,
but it's an after-the-fact thing.

00:14:48.710 --> 00:14:49.620
We'll find out.

00:14:49.620 --> 00:14:51.500
People will complain about you.

00:14:51.590 --> 00:14:53.600
But there is no pre-filtering.

00:14:53.880 --> 00:14:56.310
This is a big, big difference.

00:14:56.640 --> 00:14:58.000
I mean, that's good and bad.

00:14:58.240 --> 00:15:00.890
I mean, good,
it means that if you've got stuff

00:15:01.000 --> 00:15:04.610
that the App Store rules don't allow,

00:15:04.820 --> 00:15:06.530
The Developer ID will let you sell it.

00:15:06.670 --> 00:15:09.370
It also means that the
responsibility is totally up to you.

00:15:09.580 --> 00:15:13.530
If you screw up and you ship something
that erases somebody's hard drive,

00:15:13.650 --> 00:15:15.640
there's nobody testing it for you.

00:15:15.640 --> 00:15:17.750
Don't do that.

00:15:18.370 --> 00:15:19.800
Different certificates.

00:15:19.850 --> 00:15:21.540
I already talked about that.

00:15:21.760 --> 00:15:23.200
And yeah, App Sandbox.

00:15:23.200 --> 00:15:27.790
For those of you who were in the
previous session and the rest of you,

00:15:27.790 --> 00:15:29.200
why weren't you?

00:15:29.200 --> 00:15:33.200
The App Store now requires
that you use the App Sandbox.

00:15:33.200 --> 00:15:36.380
And that's good for the users.

00:15:36.380 --> 00:15:39.920
In many cases, it's good for you,
but it means that some of the

00:15:39.920 --> 00:15:43.590
programs that you can usefully sell
can't go into the Mac App Store.

00:15:43.830 --> 00:15:46.830
If you have a disk formater, well,
it's not going to go in the Sandbox.

00:15:47.730 --> 00:15:51.660
Developer ID can be used
without App Sandboxing.

00:15:51.780 --> 00:15:53.800
Now, please don't misunderstand this.

00:15:53.910 --> 00:15:57.760
You should App Sandbox your programs,
even if you sell them

00:15:57.760 --> 00:16:01.800
through Developer ID,
because the App Sandbox is useful.

00:16:01.910 --> 00:16:02.860
It's useful for you.

00:16:02.860 --> 00:16:05.320
It's useful for your users.

00:16:05.470 --> 00:16:08.280
Think of it as a parachute,
an emergency brake,

00:16:08.410 --> 00:16:13.290
a way to land more softly when the
excrement hits the rotating conveyance.

00:16:13.290 --> 00:16:16.920
And if you sell the same program
in and out of the App Sandbox,

00:16:16.920 --> 00:16:16.920
it's going to be a lot easier to sell.

00:16:16.970 --> 00:16:17.290
Developer ID can be used
without App Sandbox.

00:16:17.320 --> 00:16:18.020
If you sell the same program
in and out of the App Store,

00:16:18.150 --> 00:16:21.430
then it is really,
really a good idea to use

00:16:21.430 --> 00:16:25.100
App Sandboxing on the Developer ID leg,
because your program will behave

00:16:25.100 --> 00:16:26.590
differently if you don't App Sandbox.

00:16:26.600 --> 00:16:29.000
And you will end up with
users complaining that your

00:16:29.000 --> 00:16:32.590
program doesn't behave right,
because, you know, the guy over there

00:16:32.590 --> 00:16:36.040
uses it from the store,
and the guy over here uses Developer ID.

00:16:36.040 --> 00:16:39.120
Don't get yourself in that situation
if you can possibly avoid it.

00:16:39.240 --> 00:16:40.400
Okay?

00:16:45.300 --> 00:16:47.720
And there's a little Benny that
we threw in because we can.

00:16:47.720 --> 00:16:52.040
If you do sell your program both
through the Mac App Store and

00:16:52.040 --> 00:16:54.670
outside with developer ID,
and you follow the rules

00:16:54.670 --> 00:16:57.150
and you do what we tell you,
these two programs,

00:16:57.160 --> 00:17:00.450
through the magic of designated
requirements and code signing,

00:17:00.460 --> 00:17:02.460
will look the same to the system.

00:17:02.460 --> 00:17:03.480
They will be the same program.

00:17:03.480 --> 00:17:04.520
They'll be signed differently.

00:17:04.520 --> 00:17:06.200
One will be developer ID signed.

00:17:06.200 --> 00:17:07.180
One will be store signed.

00:17:07.180 --> 00:17:11.820
But we did enough magic to make these
programs look the same to the system.

00:17:11.840 --> 00:17:13.640
They can get the same keychain items.

00:17:13.640 --> 00:17:15.500
They'll be sitting in the same sandbox,
container.

00:17:15.500 --> 00:17:20.080
They'll just be... They will
have the same code identity.

00:17:23.340 --> 00:17:24.440
All right.

00:17:24.730 --> 00:17:25.780
Graphics.

00:17:25.910 --> 00:17:28.280
So I talked about different certificates.

00:17:28.280 --> 00:17:29.160
This is the old way.

00:17:29.160 --> 00:17:30.640
This is the store way.

00:17:30.750 --> 00:17:34.470
You take your app and you sign it
with your distribution certificate.

00:17:34.690 --> 00:17:37.950
And you send it off to App Store review.

00:17:38.140 --> 00:17:39.380
And the App Store reviews it.

00:17:39.480 --> 00:17:43.140
And when they like it,
they re-sign it with a special

00:17:43.160 --> 00:17:46.670
certificate that only Apple has,
that you don't have,

00:17:46.900 --> 00:17:49.410
and that specifically says,
this came from the App Store.

00:17:49.550 --> 00:17:51.480
It wasn't just sent to the
App Store by some developer.

00:17:51.480 --> 00:17:55.160
It actually came through and out of
the App Store and into the user system.

00:17:55.160 --> 00:17:56.080
So it's a two-step.

00:17:56.220 --> 00:17:58.200
There's Apple in the middle.

00:17:58.850 --> 00:17:59.550
Developer ID.

00:17:59.740 --> 00:18:03.100
Same thing, but you sign with your
Developer ID certificate,

00:18:03.100 --> 00:18:03.960
you put it on your website.

00:18:04.230 --> 00:18:05.250
There's no Apple in here.

00:18:05.370 --> 00:18:07.090
Again, direct.

00:18:07.090 --> 00:18:08.700
It's good and bad.

00:18:08.760 --> 00:18:12.370
You directly go to your users,
and you are totally

00:18:12.370 --> 00:18:15.010
responsible for how that works.

00:18:16.950 --> 00:18:23.400
Well, rule number one,
use Xcode 4.3 or later.

00:18:23.420 --> 00:18:24.170
We mean this.

00:18:24.340 --> 00:18:27.520
This isn't just use our greatest tools
because they've got different windows and

00:18:27.520 --> 00:18:30.140
we're really proud of how they blinkle.

00:18:30.170 --> 00:18:35.200
There is special stuff in Xcode 4.3
and later that makes Developer ID work

00:18:35.330 --> 00:18:37.690
right in a number of circumstances.

00:18:37.740 --> 00:18:40.770
If you use an older Xcode,
this will not come out right,

00:18:40.850 --> 00:18:43.650
and it'll look like it almost works.

00:18:44.080 --> 00:18:45.290
But not quite.

00:18:45.400 --> 00:18:48.400
And that would be unhappy for you
and would be unhappy for your users.

00:18:48.620 --> 00:18:51.290
So Xcode 4.3.

00:18:52.270 --> 00:18:56.080
In Xcode, there's a new section in
the Archive panel that lets

00:18:56.080 --> 00:19:01.030
you archive to Developer ID,
and it just does the whole job for you.

00:19:01.260 --> 00:19:03.980
It takes care of getting your
Developer ID certificates

00:19:04.400 --> 00:19:05.640
through the portal.

00:19:05.660 --> 00:19:08.300
It refreshes them as they expire.

00:19:08.530 --> 00:19:10.340
It signs the right way.

00:19:10.340 --> 00:19:15.420
It puts the right designated requirement
in that gets that magic identity

00:19:15.420 --> 00:19:18.860
between the store and out of the store.

00:19:19.570 --> 00:19:24.030
You can use an old Xcode or you can use
your favorite Makefile or Shell script

00:19:24.150 --> 00:19:28.000
invoking code signed directly,
but you lose all of that Xcode

00:19:28.040 --> 00:19:31.390
magic and you have to reproduce it
somehow or it won't come out right.

00:19:31.500 --> 00:19:33.510
I'm not going to tell you how to do that.

00:19:33.600 --> 00:19:36.580
Go check the developer forums where
there's a lot of discussion of,

00:19:36.810 --> 00:19:39.550
you know, I hurt my big toe trying this.

00:19:39.820 --> 00:19:42.620
It can be done,
but it's significant extra

00:19:42.620 --> 00:19:46.880
work to get this right,
so try to avoid it if you possibly can.

00:19:47.500 --> 00:19:48.240
All right.

00:19:48.240 --> 00:19:54.240
Really, really short demo,
just to show you how this looks.

00:19:54.720 --> 00:19:59.920
This is a Cocoa App template straight
out of Xcode with no changes except

00:19:59.920 --> 00:20:03.460
that I put some text in the dialogue.

00:20:03.810 --> 00:20:07.870
And you should all be familiar
with the Archives section,

00:20:07.930 --> 00:20:10.610
which basically builds your program.

00:20:12.880 --> 00:20:17.040
In a really short time.

00:20:17.140 --> 00:20:20.200
And then you get the
option to distribute it.

00:20:20.280 --> 00:20:22.810
And normally you would
be doing something like,

00:20:22.820 --> 00:20:25.940
you know,
I want to export it as an application.

00:20:26.020 --> 00:20:31.400
And let's just leave the development
signature in there that I have.

00:20:31.470 --> 00:20:33.350
And let's put it out there.

00:20:33.480 --> 00:20:36.960
So, you know, good old Xcode.

00:20:37.050 --> 00:20:40.080
And the same workflow,
except exporting to a

00:20:40.150 --> 00:20:42.940
Developer ID signed application.

00:20:43.790 --> 00:20:46.940
You get your choices of what
Developer ID certificates you have.

00:20:46.940 --> 00:20:49.500
If you have multiple ones,
you get to pick it here,

00:20:49.500 --> 00:20:52.270
and this one will basically
take you on an exploratory

00:20:52.270 --> 00:20:56.950
trip to the Developer Portal to
see what you can do there.

00:20:57.080 --> 00:21:00.200
Other than that,
totally the same experience.

00:21:00.330 --> 00:21:03.020
Let's give it a different name.

00:21:08.000 --> 00:21:09.300
I've just Developer ID signed.

00:21:09.300 --> 00:21:15.290
That's all to it.

00:21:15.370 --> 00:21:18.900
So if you use the Xcode workflow,
there's really very little change.

00:21:18.920 --> 00:21:19.860
I used the same project.

00:21:19.960 --> 00:21:21.540
I used the same targets.

00:21:21.660 --> 00:21:25.590
I didn't change a single
setting on this Xcode project.

00:21:25.680 --> 00:21:28.440
All you do is archive to Developer ID,
you get the right signatures,

00:21:28.440 --> 00:21:29.890
you get the right everything.

00:21:30.030 --> 00:21:30.900
It'll just work.

00:21:31.100 --> 00:21:31.560
Good for you.

00:21:31.600 --> 00:21:34.810
Okay.

00:21:36.720 --> 00:21:40.600
This isn't technically all
specific to Developer ID,

00:21:40.600 --> 00:21:41.820
but let me tell you anyway.

00:21:42.000 --> 00:21:43.000
Cryptographic keys.

00:21:43.060 --> 00:21:47.540
The first time you sign up for "give
me my Developer ID certificate,"

00:21:47.690 --> 00:21:51.730
the system will make a set of
cryptographic keys on your computer,

00:21:51.850 --> 00:21:55.090
because that's part of how
this crypto machinery works.

00:21:55.350 --> 00:21:58.600
It's made right there on your computer,
whichever one it is that you

00:21:58.720 --> 00:22:00.280
are asking for Developer ID.

00:22:00.410 --> 00:22:02.660
And that's the only place where it is.

00:22:02.720 --> 00:22:04.680
These keys are your secret.

00:22:05.000 --> 00:22:06.860
They're supposed to be your secret.

00:22:06.920 --> 00:22:09.180
And Apple doesn't have them.

00:22:09.180 --> 00:22:10.970
Nobody else has them.

00:22:10.970 --> 00:22:12.540
That's the point.

00:22:12.650 --> 00:22:15.540
But this means that you
better back them up.

00:22:15.630 --> 00:22:17.660
Because if you lose them,
nobody can get them back to you.

00:22:17.720 --> 00:22:19.200
There is no way to get them back.

00:22:19.270 --> 00:22:20.680
They were your secret.

00:22:20.800 --> 00:22:23.600
If you lose all of your copies,
they're gone.

00:22:23.650 --> 00:22:28.880
That's not good because, well,
you can't prove that you're you anymore

00:22:29.060 --> 00:22:31.450
as far as code signing is concerned.

00:22:31.540 --> 00:22:34.240
You can't make updates
for this program anymore,

00:22:34.250 --> 00:22:35.560
at least not easily.

00:22:35.690 --> 00:22:37.350
So don't lose them.

00:22:37.450 --> 00:22:40.000
Xcode will actually pop
up a panel that says,

00:22:40.120 --> 00:22:43.050
you know, now would be a good time to
make a backup and archive this,

00:22:43.100 --> 00:22:44.470
so please do it.

00:22:44.630 --> 00:22:47.360
And make sure you actually have
an off-site backup of this.

00:22:47.360 --> 00:22:48.230
There's a password in it.

00:22:48.320 --> 00:22:49.070
It's perfectly safe.

00:22:49.200 --> 00:22:50.520
Thank you.

00:22:52.710 --> 00:22:54.600
This may not be totally obvious.

00:22:54.670 --> 00:22:59.180
Developer ID certificates
belong to your team,

00:22:59.180 --> 00:23:01.360
your account,
to whatever it is that you think

00:23:01.420 --> 00:23:04.530
of yourself as you're signing
up for the Developer Program.

00:23:04.630 --> 00:23:08.760
You do not get one
Developer ID certificate per developer

00:23:09.040 --> 00:23:11.540
or per group or per division.

00:23:11.720 --> 00:23:20.210
Or per project, you get one.

00:23:20.230 --> 00:23:20.230
Actually, a pair, but, well,
the Actus one.

00:23:21.550 --> 00:23:25.640
Apple will give you a few to help
you with certain edge situations,

00:23:25.640 --> 00:23:29.320
but you are explicitly not
supposed to use those for using

00:23:29.320 --> 00:23:33.760
different signing identities
for your different applications.

00:23:33.920 --> 00:23:38.270
This won't work because after a couple,
two, three, four will cut you off

00:23:38.360 --> 00:23:40.560
and then you'll be sad,
so single.

00:23:40.700 --> 00:23:44.770
If you're a large company where these
kinds of responsibilities are important,

00:23:44.900 --> 00:23:48.340
access to your Developer ID key
will probably be controlled

00:23:48.510 --> 00:23:52.810
by some department,
and you'll send them the code

00:23:52.870 --> 00:23:54.790
and they'll sign it for you.

00:23:54.920 --> 00:24:00.060
And for those of you who work open
source or just don't think about this,

00:24:00.150 --> 00:24:01.060
secret means secret.

00:24:01.060 --> 00:24:04.420
It means don't check those into
some open source repository.

00:24:04.500 --> 00:24:08.320
It's against the rules,
and it'll get your keys revoked.

00:24:08.430 --> 00:24:10.420
And then where would you be?

00:24:11.030 --> 00:24:15.080
And if you lose control of your key,
"Oh my God,

00:24:15.080 --> 00:24:18.870
I had it on this laptop and I lost it
in a coffee shop," or "I had it on this

00:24:19.020 --> 00:24:23.240
USB dongle and I don't know where I put
it and maybe it isn't in my house," if

00:24:23.240 --> 00:24:27.130
you think you lost control of your key,
talk to Apple.

00:24:27.300 --> 00:24:29.670
Because if somebody else
gets a hold of that key,

00:24:29.670 --> 00:24:30.640
they can be you.

00:24:30.750 --> 00:24:33.460
And if they ship an application
that erases everybody's hard drives,

00:24:33.460 --> 00:24:34.660
it'll be your fault.

00:24:34.820 --> 00:24:37.860
It'll be your good name that
gets dragged through the mud.

00:24:37.980 --> 00:24:39.020
You don't want this to happen.

00:24:39.020 --> 00:24:42.500
So there's an email address,
productsecurity@apple.com.

00:24:42.500 --> 00:24:43.900
You send them an email.

00:24:44.020 --> 00:24:46.460
You send them an email if
you even think it's possible

00:24:46.460 --> 00:24:48.480
you could have lost your key.

00:24:48.590 --> 00:24:51.770
Because the consequences
of not talking to Apple,

00:24:51.770 --> 00:24:55.180
it just happening to you,
means that you're in an even

00:24:55.180 --> 00:24:57.680
worse situation when it comes out.

00:24:59.430 --> 00:25:01.960
Well, if you've got a new program,
it's obvious.

00:25:01.960 --> 00:25:05.060
Sign with Developer ID, you're done,
happy.

00:25:05.090 --> 00:25:07.280
If you're currently
shipping unsigned code,

00:25:07.280 --> 00:25:09.570
what the hell is wrong with you?

00:25:10.150 --> 00:25:11.570
But it's easy to get out of that.

00:25:11.710 --> 00:25:12.830
Sign with Developer ID.

00:25:12.960 --> 00:25:16.390
It'll be a different program, of course,
since before it didn't have any identity,

00:25:16.400 --> 00:25:18.070
but now it has an identity,
and it's a good one.

00:25:18.100 --> 00:25:22.510
It's one that Apple gave you,
so you're good.

00:25:23.020 --> 00:25:25.800
If you're currently shipping
through the Mac App Store,

00:25:25.950 --> 00:25:28.500
use Developer ID to ship
the same thing outside.

00:25:28.630 --> 00:25:29.530
It'll just work.

00:25:29.660 --> 00:25:31.500
You don't need a new project,
you don't need a new target.

00:25:31.500 --> 00:25:33.100
It's better not to
have a separate target.

00:25:33.100 --> 00:25:34.200
Keep them together.

00:25:34.330 --> 00:25:36.190
Use Archive to Developer ID.

00:25:36.270 --> 00:25:38.060
You're done.

00:25:38.670 --> 00:25:43.600
If you currently use a code signature
that didn't come from Apple,

00:25:43.730 --> 00:25:46.390
whether you bought it from
some certificate authority or

00:25:46.390 --> 00:25:49.180
whether you made it yourself,
you probably want to

00:25:49.180 --> 00:25:51.030
transition to Developer ID.

00:25:51.090 --> 00:25:52.140
I'm not saying you must.

00:25:52.330 --> 00:25:55.810
You can keep on shipping your
program with the signature you got,

00:25:55.930 --> 00:26:00.480
but, well, we'll get to Gatekeeper and
what he will do to that program.

00:26:00.800 --> 00:26:02.580
If you want to transition
to developer ID,

00:26:02.580 --> 00:26:05.180
there is a couple of approaches.

00:26:05.180 --> 00:26:06.060
There's cold turkey.

00:26:06.060 --> 00:26:08.800
Let's just switch, tell the users,
and off we go.

00:26:08.800 --> 00:26:09.980
That's easy for you.

00:26:09.990 --> 00:26:12.140
It'll maybe not be so
easy for your users.

00:26:12.140 --> 00:26:15.410
Or there is an actual transition
process that I'm not going to explain

00:26:15.410 --> 00:26:17.870
to you because it's kind of lengthy.

00:26:17.870 --> 00:26:21.510
Check the developer forums
where there's a FAQ for it.

00:26:21.620 --> 00:26:24.440
Check the documentation on
designated requirements because

00:26:24.610 --> 00:26:26.030
that's what you use to do that.

00:26:27.740 --> 00:26:30.120
And if you're so confused,
come to the labs, talk to me.

00:26:30.250 --> 00:26:32.490
I'll give you some hints.

00:26:33.830 --> 00:26:35.700
That's Developer ID.

00:26:35.820 --> 00:26:36.960
Everything with Apple certificates.

00:26:37.100 --> 00:26:37.800
Isn't that great?

00:26:38.040 --> 00:26:40.290
It's not even extra money.

00:26:40.410 --> 00:26:42.230
Now, why did we bother?

00:26:42.380 --> 00:26:46.140
Well, okay,
it's nice to have a way for you to

00:26:46.140 --> 00:26:49.810
get all of your certificates for
your consigning needs from Apple.

00:26:50.030 --> 00:26:54.340
That's neat, you know,
single-source shopping.

00:26:54.410 --> 00:26:57.320
But of course, there's more to it.

00:26:59.330 --> 00:27:03.940
We've always worried about programs
that get downloaded from the internet,

00:27:04.010 --> 00:27:06.320
because it's so easy to download
stuff from the internet,

00:27:06.320 --> 00:27:10.040
and God knows what they'll do to you
once you install them and run them.

00:27:10.200 --> 00:27:13.140
And over the years,
we've come up with ways to

00:27:13.150 --> 00:27:15.540
mitigate the risk a little bit.

00:27:15.680 --> 00:27:18.280
One of them is called
Download Quarantine.

00:27:18.420 --> 00:27:20.340
Let me tell you about it in
case you don't know what it is.

00:27:20.340 --> 00:27:23.170
It's essentially a tag that
gets attached to a file.

00:27:23.190 --> 00:27:26.130
We call it a quarantine flag.

00:27:26.290 --> 00:27:28.800
That tag gets applied by the downloaders.

00:27:28.940 --> 00:27:31.560
When you download
something through Safari,

00:27:31.630 --> 00:27:34.840
unbeknownst to you, maybe,
it puts a tag on the file saying,

00:27:34.840 --> 00:27:37.470
"This came from this URL.

00:27:37.610 --> 00:27:40.660
It was downloaded at this date."
But the most important thing

00:27:40.660 --> 00:27:41.820
is that the tag's on there.

00:27:41.840 --> 00:27:43.370
It says, "It came from the Internet.

00:27:43.500 --> 00:27:47.080
Let's pay special attention
to it because God knows what

00:27:47.080 --> 00:27:49.110
it'll do to your computer."

00:27:51.100 --> 00:27:54.560
When you take a quarantine file,
a file that has a quarantine tag on it,

00:27:54.590 --> 00:27:58.620
and you copy it with the Finder
or your favorite copy tool,

00:27:58.750 --> 00:28:01.590
the quarantine gets copied
along because everything's been

00:28:01.590 --> 00:28:03.230
modified long ago to do that.

00:28:03.320 --> 00:28:05.690
If you expand an archive
that has quarantine on it,

00:28:05.690 --> 00:28:08.560
everything that comes out of
the archive is quarantined.

00:28:08.800 --> 00:28:12.500
You cannot shake that flag just
with a normal set of operations.

00:28:12.680 --> 00:28:14.390
If you have a quarantine
disk image and you mount it,

00:28:14.390 --> 00:28:15.930
everything in there looks quarantined.

00:28:15.970 --> 00:28:19.690
So the point is that this
tag sort of follows the data

00:28:19.690 --> 00:28:22.520
along once it's attached,
so that at the point where

00:28:22.520 --> 00:28:24.530
you're actually trying to do
something serious with it,

00:28:24.530 --> 00:28:26.880
like run an app inside
of this disk image,

00:28:27.030 --> 00:28:28.940
we still know that it
came from the Internet.

00:28:29.120 --> 00:28:32.820
And then we do things to the program
because it came from the Internet.

00:28:32.820 --> 00:28:36.360
And the classic thing is, "Hey,
you meant to do that?"

00:28:36.600 --> 00:28:39.700
It's just, you know, click OK, it's fine,
it's just a little

00:28:39.700 --> 00:28:43.500
speed bump in case that,
you know, some website downloaded that

00:28:43.660 --> 00:28:48.270
for you and is now asking you to
open it to do bad things to you.

00:28:49.540 --> 00:28:55.410
Now, quarantine gets attached when stuff
gets downloaded from the internet.

00:28:55.530 --> 00:28:58.640
If you make something locally,
it doesn't get quarantined.

00:28:58.730 --> 00:29:00.740
If you have a file on there
that you downloaded two years

00:29:00.740 --> 00:29:03.440
ago and you've worked with it,
it doesn't have quarantine on it.

00:29:03.440 --> 00:29:09.810
That got stripped off when
you answered that dialogue.

00:29:10.570 --> 00:29:13.440
Quarantine does not usually apply
to remote file systems either,

00:29:13.510 --> 00:29:17.740
so if your AFP or SMB mounts
something from your file server,

00:29:17.810 --> 00:29:19.840
there's no quarantine involved here.

00:29:19.910 --> 00:29:24.250
Quarantine is for downloading from
that big bad internet in the sky.

00:29:24.500 --> 00:29:25.540
Okay, so that's quarantine.

00:29:25.540 --> 00:29:27.500
That's basically,
this came from the internet,

00:29:27.500 --> 00:29:29.400
let's pay attention to it.

00:29:29.460 --> 00:29:31.300
Of course,
once we know it came from the internet,

00:29:31.300 --> 00:29:33.580
there's a couple of
things that we want to do,

00:29:33.690 --> 00:29:37.260
and one of them is the classic
malware check that we all know about.

00:29:37.330 --> 00:29:39.730
You know, it's like,
we know there are some

00:29:39.790 --> 00:29:41.230
things that are bad for you.

00:29:41.580 --> 00:29:45.180
They are signatures,
patterns that we can look for.

00:29:45.180 --> 00:29:45.880
So we do.

00:29:46.000 --> 00:29:49.530
And those get applied when
Launch Services is asked to open

00:29:49.530 --> 00:29:51.940
something that has quarantine on it.

00:29:51.940 --> 00:29:54.000
So that's how these two fit together.

00:29:54.740 --> 00:29:59.640
And the pattern lists actually get
updated potentially once a day.

00:29:59.690 --> 00:30:01.960
There's a little preference
checkbox that's on by default.

00:30:02.190 --> 00:30:10.560
Basically, it says,
let's just get an update every day

00:30:10.660 --> 00:30:12.290
to make sure that if bad viruses are
trying to take over the internet,

00:30:12.290 --> 00:30:12.290
we know what they are.

00:30:13.470 --> 00:30:19.010
And because a match on these
quarantine flags is clearly a bad sign,

00:30:19.240 --> 00:30:21.130
we have a rather nastier
dialogue that says,

00:30:21.180 --> 00:30:22.150
"This is bad for you.

00:30:22.240 --> 00:30:26.800
Please throw it away." You may notice
there is no "Open Anyway" button here,

00:30:26.800 --> 00:30:30.400
because, no, really,
you don't know better.

00:30:30.470 --> 00:30:33.400
If it actually fits our malware list,
it's bad for you,

00:30:33.500 --> 00:30:35.150
and you should throw it away.

00:30:36.020 --> 00:30:38.880
So that together forms what
I might call the traditional

00:30:38.880 --> 00:30:43.240
way of dealing with possibly bad
things coming from the Internet.

00:30:43.380 --> 00:30:46.790
We have these lists of
known bad applications,

00:30:46.790 --> 00:30:51.140
and if something that you're trying
to open or install matches those,

00:30:51.140 --> 00:30:52.330
we yell at you.

00:30:52.460 --> 00:30:54.410
Otherwise, it's probably OK.

00:30:54.530 --> 00:30:56.440
What do we know?

00:30:56.530 --> 00:30:57.890
The problem, of course, is evasion.

00:30:58.080 --> 00:31:02.320
If you're the guy who makes the bad app
that tries to erase your hard drive,

00:31:02.410 --> 00:31:05.320
all you need to do is
escape the pattern matcher.

00:31:05.440 --> 00:31:08.340
You look at the pattern,
you change your program so it

00:31:08.340 --> 00:31:11.600
still erases your hard drive,
but it looks different.

00:31:11.970 --> 00:31:14.610
And, you know,
then a couple hundred or a thousand more

00:31:14.610 --> 00:31:18.190
people get their hard drives erased,
then the daily update comes

00:31:18.190 --> 00:31:21.930
out matching that pattern,
and we keep playing until

00:31:21.930 --> 00:31:23.990
they run out of energy.

00:31:24.130 --> 00:31:25.860
which is not really a
great way of doing it,

00:31:25.860 --> 00:31:28.560
so we're proposing to
turn this upside down.

00:31:28.760 --> 00:31:32.540
Instead of working with lists
of things we think are bad,

00:31:32.580 --> 00:31:37.210
we're working with lists of
things that we think are good.

00:31:37.300 --> 00:31:40.180
This of course means that if
you're not on the good list,

00:31:40.240 --> 00:31:42.260
you're not supposed to be bad.

00:31:42.310 --> 00:31:45.240
You're just, you know,
we don't know about you.

00:31:45.420 --> 00:31:49.020
You're not signed in a way
that gives us the warm fuzzies,

00:31:49.020 --> 00:31:51.170
so you're not on the good list.

00:31:52.100 --> 00:31:54.520
The problem here, of course,
is that we all hope there's a heck

00:31:54.530 --> 00:31:57.840
of a lot more good programs in
the universe than bad programs.

00:31:57.950 --> 00:32:02.670
And for this machinery to make any sense,
it has to catch substantially

00:32:02.720 --> 00:32:04.200
all the good ones.

00:32:04.310 --> 00:32:05.760
That's the hard part.

00:32:05.880 --> 00:32:08.950
That's why Gatekeeper isn't, you know,
10 lines of code.

00:32:10.450 --> 00:32:13.930
Gatekeeper is built into
the operating system.

00:32:14.040 --> 00:32:15.100
It's a system facility.

00:32:15.100 --> 00:32:15.980
It's always running.

00:32:15.980 --> 00:32:18.200
You can't, like, you know, excise it.

00:32:18.200 --> 00:32:20.730
It's not an option.

00:32:21.380 --> 00:32:26.490
Its behavior is driven by a set of rules,
configurable rules.

00:32:26.710 --> 00:32:31.400
So this is not a bunch of code that
knows what it means to be a good program.

00:32:31.400 --> 00:32:33.520
It's configurable.

00:32:34.210 --> 00:32:37.090
And, you know,
it probably won't surprise you very much

00:32:37.090 --> 00:32:42.440
to hear that the matching is done through
code signatures and code requirements.

00:32:42.580 --> 00:32:46.060
That's why I, you know,
told you about this stuff earlier.

00:32:46.170 --> 00:32:48.880
Essentially,
each rule says if it is code signed

00:32:49.010 --> 00:32:54.090
and the code signature looks like this,
then it's okay.

00:32:54.240 --> 00:32:58.290
And of course, if no rule matches, then,
well, we don't know.

00:32:58.400 --> 00:33:00.010
No.

00:33:01.490 --> 00:33:04.260
Because it's rule-driven,
it's highly configurable.

00:33:04.340 --> 00:33:07.720
That's important,
but we all know that 90% of all systems

00:33:07.770 --> 00:33:10.040
never change their configuration.

00:33:10.160 --> 00:33:14.940
And just like the malware checks,
it's driven by quarantine.

00:33:15.050 --> 00:33:18.000
So right now,
Gatekeeper only looks at a file

00:33:18.090 --> 00:33:23.090
if it has been downloaded from the
internet and has been quarantined.

00:33:23.370 --> 00:33:25.640
This should make you relax a little bit.

00:33:25.640 --> 00:33:28.980
It means that the programs on your
hard drive that you've been using

00:33:28.980 --> 00:33:32.960
for years are not suddenly going to
be viciously attacked by Gatekeeper.

00:33:33.160 --> 00:33:37.810
And stuff that you build with Xcode,
Gatekeeper isn't going

00:33:37.810 --> 00:33:41.410
to look at it and say,
"This is a foreign body on my system.

00:33:41.540 --> 00:33:43.350
I'm going to..."

00:33:45.490 --> 00:33:50.400
Remember we built this
thing just 15 minutes ago?

00:33:50.520 --> 00:33:54.990
And I put it into this directory,
mysteriously called "sites."

00:33:55.560 --> 00:33:57.300
Let me just compress this.

00:33:57.410 --> 00:34:01.830
So this is testy, which was signed with

00:34:02.070 --> 00:34:05.180
is a normal non-Developer ID certificate.

00:34:05.180 --> 00:34:07.920
And here is TestD Dev ID,
which we signed.

00:34:08.000 --> 00:34:09.440
Well, why is it called Sites?

00:34:09.560 --> 00:34:13.760
Because I am going to use Safari to
download these archives I just made,

00:34:13.910 --> 00:34:17.110
because downloading is the easiest way
to actually attach Quarantine to it.

00:34:17.240 --> 00:34:22.330
I just turned on the web
server on that system.

00:34:22.500 --> 00:34:25.140
So let's download that.

00:34:25.140 --> 00:34:27.470
And let's download that.

00:34:27.470 --> 00:34:27.470
And here it goes into Downloads.

00:34:29.230 --> 00:34:31.450
Okay, so we have downloaded this.

00:34:31.530 --> 00:34:34.900
You can't tell from looking at it in
the Finder that it has quarantine on it,

00:34:34.960 --> 00:34:37.220
because quarantine is supposed
to be this internal thing that

00:34:37.420 --> 00:34:39.900
you don't need to worry about.

00:34:39.940 --> 00:34:42.860
And, well, let's see what happens.

00:34:42.910 --> 00:34:46.080
Oh, oh, no,
it can't be opened because it's

00:34:46.080 --> 00:34:48.650
from an unidentified developer.

00:34:49.750 --> 00:34:52.740
Notice it doesn't say it's
from an evil developer.

00:34:52.740 --> 00:34:55.540
It doesn't say it's from a
developer we don't trust.

00:34:55.660 --> 00:34:58.500
It doesn't say it's from a
developer who didn't pay.

00:34:58.530 --> 00:35:01.270
It just means we don't know who that is.

00:35:01.560 --> 00:35:03.380
So we're not being judgmental here.

00:35:03.460 --> 00:35:08.520
But remember, the idea of Gatekeeper is
if it's not on a good list,

00:35:08.520 --> 00:35:09.460
then no.

00:35:09.520 --> 00:35:10.840
That's the price we're paying here.

00:35:10.940 --> 00:35:14.980
Everybody who wants to be on that
system needs to be on a good list.

00:35:15.030 --> 00:35:21.370
Let me show you the UI really quickly so
you know what gets switched around here.

00:35:21.620 --> 00:35:24.500
in the Security and
Privacy section of Klaus.

00:35:24.660 --> 00:35:31.990
In the General section,
here is a new part that says...

00:35:33.440 --> 00:35:36.230
Allow applications downloaded
from -- if you've played

00:35:36.230 --> 00:35:38.640
with the developer releases,
you've already seen this.

00:35:38.790 --> 00:35:40.940
And you get -- at the
macro level outside,

00:35:40.940 --> 00:35:42.700
you get these three settings.

00:35:42.700 --> 00:35:45.740
The normal one is Mac App Store and
Identified Developers.

00:35:45.830 --> 00:35:48.700
And any time the system talks
about identified developers

00:35:48.700 --> 00:35:51.550
or identified programs,
I want you to understand this

00:35:51.550 --> 00:35:54.500
means that there's a rule in
Gatekeeper that says it's okay.

00:35:54.590 --> 00:35:56.940
That's what identified means.

00:35:57.040 --> 00:36:00.450
It doesn't really mean just developer
ID because the rules can be changed.

00:36:00.700 --> 00:36:01.960
By default, it means.

00:36:01.960 --> 00:36:03.630
And of course,
we'll accept anything from the

00:36:03.630 --> 00:36:05.820
Mac App Store because if you
can't trust the Mac App Store,

00:36:05.820 --> 00:36:07.560
who can you trust?

00:36:07.640 --> 00:36:12.670
If you are -- if you, the user,
this is not for you, the developer,

00:36:12.670 --> 00:36:13.600
to switch around.

00:36:13.620 --> 00:36:15.980
This is for the
administrator of that system.

00:36:16.070 --> 00:36:18.450
If you don't trust those
developer ID things,

00:36:18.450 --> 00:36:20.470
because God knows what they'll do,
after all,

00:36:20.590 --> 00:36:23.480
you could erase your hard drive if they
happen to be a disk formatting tool,

00:36:23.630 --> 00:36:27.300
you can switch to Mac App Store only
and that disallows developer ID.

00:36:27.300 --> 00:36:30.920
It makes developer ID useless
on that system in a sense.

00:36:30.990 --> 00:36:31.820
But we don't expect that to happen.

00:36:31.820 --> 00:36:33.410
It doesn't expect that to happen a lot.

00:36:33.480 --> 00:36:36.860
And then, of course, there is Anywhere,
which essentially turns Gatekeeper

00:36:37.070 --> 00:36:39.480
off with very few exceptions.

00:36:39.610 --> 00:36:43.120
If a system is in the Anywhere state,
it behaves just as if

00:36:43.120 --> 00:36:45.290
Gatekeeper wasn't there.

00:36:46.690 --> 00:36:49.500
That's not a good thing,
because we think Gatekeeper is

00:36:49.500 --> 00:36:51.200
useful and helpful to the user.

00:36:51.320 --> 00:36:55.320
So we would appreciate it if you didn't
tell your customers to immediately switch

00:36:55.320 --> 00:37:00.750
off Gatekeeper because your program,
you know, can't be bothered to

00:37:00.750 --> 00:37:02.160
be Developer ID signed.

00:37:02.420 --> 00:37:06.950
And yes, you get this little lecture here
if you try to turn off Gatekeeper

00:37:06.950 --> 00:37:09.180
that says you shouldn't do that.

00:37:09.540 --> 00:37:15.490
Alright, well,
that was Unidentified Developer.

00:37:15.620 --> 00:37:18.340
Here's the Developer ID signed version.

00:37:18.530 --> 00:37:21.140
You still get a dialogue,
and if you've ever used a Macintosh

00:37:21.140 --> 00:37:23.940
before with anything downloaded,
you know that dialogue.

00:37:24.190 --> 00:37:25.520
This came from the internet.

00:37:25.520 --> 00:37:26.940
You haven't opened it before.

00:37:27.030 --> 00:37:28.630
You're sure you want to do this.

00:37:28.760 --> 00:37:30.380
This dialogue doesn't go away.

00:37:30.530 --> 00:37:34.340
Gatekeeper is sitting in there
as an additional security layer.

00:37:34.440 --> 00:37:37.870
This dialogue is fairly harmless,
assuming you actually meant to

00:37:37.870 --> 00:37:39.830
download this program and run it.

00:37:42.560 --> 00:37:44.300
All right.

00:37:44.370 --> 00:37:49.300
Let me show you one more
dialog you can run into.

00:37:49.610 --> 00:37:54.590
Because you'd think that this is bad.

00:37:54.590 --> 00:37:54.590
It tells the user,

00:37:54.780 --> 00:37:55.930
We don't want to run this here.

00:37:55.960 --> 00:37:57.400
We don't know where this came from.

00:37:57.560 --> 00:37:59.080
But this is not the bad dialogue.

00:37:59.250 --> 00:38:01.160
This is the relatively harmless dialogue.

00:38:01.370 --> 00:38:06.400
Let's go into that bundle and
make a change to the program.

00:38:06.500 --> 00:38:09.980
It doesn't really matter what we change,
because the entire info.p list is,

00:38:09.980 --> 00:38:13.240
of course,
sealed down by the code signature.

00:38:13.310 --> 00:38:16.960
Let's save that.

00:38:17.080 --> 00:38:21.060
So basically, I hacked your program.

00:38:22.810 --> 00:38:23.580
Oh, look.

00:38:23.770 --> 00:38:28.100
Now it's damaged and can't be opened,
and you are in the bad case.

00:38:28.230 --> 00:38:29.940
Ooh, don't touch this program.

00:38:29.940 --> 00:38:31.900
Throw it away.

00:38:32.060 --> 00:38:33.800
So this is the bad dialogue.

00:38:34.020 --> 00:38:36.840
If your users see that dialogue
about one of your programs,

00:38:36.840 --> 00:38:39.300
it means you screwed up the code signing,
or somebody hacked it

00:38:39.330 --> 00:38:40.560
after you shipped it.

00:38:40.650 --> 00:38:42.500
Maybe your distributor,
maybe an evil hacker.

00:38:42.550 --> 00:38:43.860
Who knows?

00:38:43.970 --> 00:38:49.460
So this is the dialogue you don't
ever want your users to see.

00:38:49.510 --> 00:38:51.280
All right.

00:38:53.050 --> 00:38:55.540
So what does Gatekeeper apply to?

00:38:55.870 --> 00:39:01.980
Well, obviously code, applications,
not just applications, tools.

00:39:03.610 --> 00:39:06.980
In addition,
Gatekeeper applies to installer packages,

00:39:06.980 --> 00:39:09.340
because installer packages
have their own security things.

00:39:09.340 --> 00:39:12.370
I mean, yes,
they install applications that you

00:39:12.370 --> 00:39:15.870
can process as applications later,
but they also have things like

00:39:15.870 --> 00:39:19.890
pre-install and post-install scripts that
can do unspeakable things to your system,

00:39:20.100 --> 00:39:22.790
particularly if you enter
your admin password,

00:39:22.890 --> 00:39:25.060
because then they can do
it to the entire system.

00:39:25.180 --> 00:39:26.700
So installers are dangerous, too.

00:39:26.700 --> 00:39:31.640
So we apply Gatekeeper and we apply
signatures to installer packages,

00:39:31.640 --> 00:39:32.170
too.

00:39:32.510 --> 00:39:37.900
There's two kinds of installer packages:
flat ones, which is a single file,

00:39:37.900 --> 00:39:39.120
and bundled ones.

00:39:39.260 --> 00:39:41.790
You can't actually sign
bundled installers,

00:39:41.790 --> 00:39:44.540
which means that you'll have
to use flat installers to

00:39:44.540 --> 00:39:47.350
Developer ID sign your installers.

00:39:47.480 --> 00:39:51.880
If that confuses you,
talk to the installer

00:39:51.880 --> 00:39:54.980
people or the Xcode people.

00:39:55.070 --> 00:39:59.010
I'll tell you later where to find them.

00:39:59.970 --> 00:40:03.650
Gatekeeper also applies to certain
classes of documents that the

00:40:03.650 --> 00:40:05.560
system thinks are dangerous.

00:40:05.560 --> 00:40:07.200
Shell scripts, you know.

00:40:07.330 --> 00:40:09.730
Certain things that you may
not think are dangerous,

00:40:09.850 --> 00:40:13.440
but that we know better about,
like Safari archives,

00:40:13.440 --> 00:40:16.400
because they have code in them.

00:40:16.580 --> 00:40:20.390
So,
Gatekeeper can also apply to documents,

00:40:20.390 --> 00:40:24.080
and you get the same dialogue that says,
you know,

00:40:24.260 --> 00:40:30.900
not from a recognized developer,
and the same ways of processing that.

00:40:30.900 --> 00:40:33.350
But of course, you know,
sometimes you want to

00:40:33.350 --> 00:40:34.840
ship a bunch of documents.

00:40:34.900 --> 00:40:36.400
You can't really code sign those.

00:40:36.400 --> 00:40:38.890
That's the problem with them,
because they're documents,

00:40:39.000 --> 00:40:39.700
they're not code.

00:40:39.860 --> 00:40:42.580
So,
if you want to ship a bunch of dangerous

00:40:42.580 --> 00:40:46.200
documents to your users for some reason,
and they understand this,

00:40:46.210 --> 00:40:50.140
and they want those dangerous documents,
we invented a new archive format.

00:40:50.290 --> 00:40:52.000
It's a very straightforward, simple one.

00:40:52.000 --> 00:40:53.990
We call them chip files.

00:40:54.130 --> 00:40:56.600
XIP is the extension.

00:40:56.850 --> 00:40:59.990
Just like flat installer archives,
those can be signed.

00:41:00.100 --> 00:41:03.100
And if you put a Developer ID signature
on a chip archive,

00:41:03.110 --> 00:41:05.330
then all of the stuff
inside is marked OK.

00:41:05.500 --> 00:41:07.880
So,
this is the way you take dangerous files,

00:41:07.900 --> 00:41:10.480
if you absolutely have to
ship them to your users,

00:41:10.480 --> 00:41:12.430
and get them through Gatekeeper.

00:41:15.050 --> 00:41:17.000
What I just said.

00:41:17.000 --> 00:41:22.290
So, Gatekeeper is driven by rules.

00:41:22.520 --> 00:41:25.730
And what Gatekeeper accepts and
what it doesn't accept is entirely

00:41:25.730 --> 00:41:28.970
a function of what rules it has.

00:41:29.060 --> 00:41:29.860
Read the man pages.

00:41:29.900 --> 00:41:32.700
I'll tell you what they are for details.

00:41:32.740 --> 00:41:34.690
It can be fairly complicated.

00:41:34.760 --> 00:41:36.030
These rules are very flexible.

00:41:36.060 --> 00:41:38.040
They're meant to do a lot of things.

00:41:38.060 --> 00:41:40.710
One thing to understand is that
there's different rules for

00:41:40.710 --> 00:41:42.260
execution and installation.

00:41:42.300 --> 00:41:46.160
So if you look at a particular Gatekeeper
rule and you stare at it and you go,

00:41:46.180 --> 00:41:48.440
"From everything he's told me,
this should apply to my

00:41:48.440 --> 00:41:49.680
program," but it doesn't.

00:41:49.880 --> 00:41:50.810
It totally ignores it.

00:41:50.840 --> 00:41:56.140
It probably is an installation rule and
you're trying to whitelist a program,

00:41:56.370 --> 00:42:00.500
or it's an application rule and you're
trying to whitelist an installer.

00:42:00.560 --> 00:42:03.450
Different types, totally separate.

00:42:04.730 --> 00:42:09.560
The outcome of Gatekeeper evaluations
is cached because these evaluations,

00:42:09.560 --> 00:42:11.940
you know, you basically go through
all of these rules,

00:42:12.020 --> 00:42:12.910
you test them one by one.

00:42:13.070 --> 00:42:13.860
You've got a lot of rules.

00:42:13.900 --> 00:42:15.430
This can get kind of slow.

00:42:15.530 --> 00:42:17.860
So we cache the outcome,
which is a good thing,

00:42:17.860 --> 00:42:20.560
and you don't need to worry
about it usually because,

00:42:20.560 --> 00:42:23.160
you know,
we flush the cache at the right times.

00:42:23.160 --> 00:42:27.370
If you start playing around with
this by copying files around and,

00:42:27.370 --> 00:42:31.560
gee, I wonder what happens if I do this,
then sometimes you need to

00:42:31.560 --> 00:42:34.690
remember that there's a cache and,
you know,

00:42:35.290 --> 00:42:37.420
If you go behind the back
of the mechanism by messing

00:42:37.500 --> 00:42:43.640
around with files directly,
the cache may still hold old data.

00:42:43.640 --> 00:42:43.640
So keep that in mind.

00:42:44.550 --> 00:42:46.800
Let's go back to that
picture for code signing,

00:42:46.800 --> 00:42:50.600
but this time let's talk about
how this specifically works with

00:42:50.600 --> 00:42:52.990
Developer ID and with code signing.

00:42:53.100 --> 00:42:54.260
So here's your final code.

00:42:54.310 --> 00:42:55.300
It's the same final code.

00:42:55.520 --> 00:42:57.180
Same project, same targets, everything.

00:42:57.280 --> 00:42:58.990
You haven't changed a thing.

00:42:59.040 --> 00:43:04.130
You feed it to Xcode,
and did I mention Xcode 4.3 or later?

00:43:04.200 --> 00:43:06.000
Very good for you.

00:43:06.570 --> 00:43:09.670
And when you do the archive
to Developer ID part,

00:43:09.670 --> 00:43:12.990
behind your back Xcode
is starting to codesign.

00:43:13.130 --> 00:43:16.230
It actually takes the build output
from the archive step and it re-signs

00:43:16.240 --> 00:43:19.870
it with your Developer ID signature,
which of course it gets from your

00:43:19.870 --> 00:43:24.480
keychain from where it has fetched it
through the Developer Portal from Apple.

00:43:24.600 --> 00:43:25.430
All done by Xcode.

00:43:25.510 --> 00:43:26.340
You don't do a thing.

00:43:26.500 --> 00:43:28.420
This just works.

00:43:28.570 --> 00:43:34.000
You get the output of the archive step,
and that's where you come into play.

00:43:34.000 --> 00:43:38.480
You put it on your website,
you send it over to your distributor,

00:43:38.530 --> 00:43:43.000
or you burn it on a DVD if you
really want to be Stone Age.

00:43:43.060 --> 00:43:47.090
And it ends up on the end user system,
and because we assume for the

00:43:47.090 --> 00:43:51.080
sake of argument that this got
downloaded through a web server,

00:43:51.270 --> 00:43:53.190
it is now quarantined.

00:43:53.300 --> 00:43:55.190
See how the pieces
start fitting together?

00:43:55.240 --> 00:43:58.140
So you've got a quarantined
installer archive or application,

00:43:58.140 --> 00:44:00.450
depending on how you shipped it.

00:44:00.950 --> 00:44:04.770
And if you're trying to install
that installer archive or

00:44:04.770 --> 00:44:08.340
first launch this application,
because it's quarantined,

00:44:08.340 --> 00:44:09.530
Gatekeeper gets invoked.

00:44:09.640 --> 00:44:11.290
Launch Services does that.

00:44:11.310 --> 00:44:15.500
So now Gatekeeper is looking at
this program and feeds it to the

00:44:15.500 --> 00:44:18.200
code signing verification machinery.

00:44:18.520 --> 00:44:20.060
And it has a database.

00:44:20.150 --> 00:44:22.870
It's var db system policy,
in case you care.

00:44:22.940 --> 00:44:24.640
That's where all the rules sit.

00:44:24.730 --> 00:44:27.420
It basically just runs through the rules,
and each of the rules

00:44:27.420 --> 00:44:30.280
has a code requirement,
and it just matches them up one by

00:44:30.280 --> 00:44:32.240
one in a particular priority order.

00:44:32.240 --> 00:44:35.200
So that's where the code requirements
come from in the Gatekeeper case.

00:44:35.350 --> 00:44:37.400
They come out of the rules.

00:44:37.530 --> 00:44:41.400
We run through, and the first rule that
matches has an outcome.

00:44:41.400 --> 00:44:44.570
Usually it's, "This one's okay." You can
actually make a rule that says,

00:44:44.570 --> 00:44:47.640
"This one is so not okay,
I don't want to ever see it again."

00:44:47.780 --> 00:44:53.400
That's how code signing works in the case
of Developer ID working with Gatekeeper.

00:44:55.330 --> 00:45:00.500
Okay, so we talked about these rules,
and if you're happy with the default,

00:45:00.570 --> 00:45:01.530
you don't do anything about them.

00:45:01.540 --> 00:45:03.800
They're just there, they work, you know?

00:45:03.860 --> 00:45:04.440
Good.

00:45:04.880 --> 00:45:08.180
Sometimes you want to change them
because it's your Macintosh and

00:45:08.180 --> 00:45:11.240
you want it to accept something
that isn't Developer ID signed,

00:45:11.310 --> 00:45:13.810
but you want it anyway.

00:45:13.920 --> 00:45:16.000
The default,
anything coming with the system,

00:45:16.000 --> 00:45:17.060
of course, is okay.

00:45:17.060 --> 00:45:18.400
Anything from the Mac App Store is okay.

00:45:18.400 --> 00:45:21.150
Anything signed with
Developer ID is okay.

00:45:23.350 --> 00:45:24.950
You can make individual exceptions.

00:45:25.180 --> 00:45:28.190
There's UI for that.

00:45:28.350 --> 00:45:31.130
You may have noticed,
those of you with the eagle eyes,

00:45:31.130 --> 00:45:34.480
when you try to turn off Gatekeeper
in the system preferences,

00:45:34.560 --> 00:45:36.360
it actually tells you,
"Don't turn me off.

00:45:36.510 --> 00:45:40.220
Do that instead." That's your first hint.

00:45:41.200 --> 00:45:43.770
Now,
if you happen to be using OS X Server or

00:45:43.780 --> 00:45:49.590
you are really good with a binary editor,
you can make configuration profiles

00:45:49.970 --> 00:45:52.180
that actually push Gatekeeper rules.

00:45:52.310 --> 00:45:55.600
This is new in Mountain Lion.

00:45:55.730 --> 00:45:58.770
So if you have a bunch of
systems whose people trust you,

00:45:58.790 --> 00:46:01.880
so they will actually
double-click on configuration

00:46:01.910 --> 00:46:05.310
profiles that you send them,
you can just package up a rule that says,

00:46:05.360 --> 00:46:08.150
you know, my programs are fine or
this program is fine.

00:46:08.300 --> 00:46:09.890
Send it to them, say,
please double-click that.

00:46:09.900 --> 00:46:13.540
And if they do,
it adds a rule and they're fine.

00:46:13.670 --> 00:46:18.790
Also, if you want to be more formal about
this and you're using Workgroup Manager,

00:46:18.910 --> 00:46:22.390
it has learned in Mountain Lion to
push Gatekeeper rules out to

00:46:22.460 --> 00:46:23.980
all of the managed clients.

00:46:24.050 --> 00:46:28.480
That's a really nice formal way
of controlling which programs are

00:46:28.480 --> 00:46:33.320
allowed to be installed on systems
that are part of your workgroup.

00:46:33.800 --> 00:46:36.540
And if everything else fails and
you know exactly what you want

00:46:36.540 --> 00:46:40.940
and you don't mind using Terminal,
there's a new command called spctl,

00:46:41.050 --> 00:46:45.880
the System Policy Control Program,
and it lets you edit those rules directly

00:46:45.910 --> 00:46:48.430
and explicitly and with a lot of detail.

00:46:48.560 --> 00:46:52.760
So if you're the tinkering kind,
this is your new buddy.

00:46:53.660 --> 00:46:56.200
So, it's built into Mountain Lion.

00:46:56.400 --> 00:46:57.570
It's part of Mountain Lion.

00:46:57.590 --> 00:46:59.240
It's on in Mountain Lion.

00:46:59.310 --> 00:47:02.000
The default value when you install
a new Mountain Lion system is

00:47:02.000 --> 00:47:04.660
Mac App Store or Developer ID.

00:47:04.780 --> 00:47:11.580
So, this is going to hit you and your
programs as Mountain Lion deploys.

00:47:11.980 --> 00:47:16.400
It's also been backported
to a large extent into Lion,

00:47:16.560 --> 00:47:18.560
but in Lion it's currently dormant.

00:47:18.680 --> 00:47:23.400
The code's there, but the UI,
the major master UI that lets

00:47:23.400 --> 00:47:27.250
you turn it on or off is hidden,
and it's off by default.

00:47:27.400 --> 00:47:31.820
So you don't notice it,
the users don't notice it,

00:47:31.840 --> 00:47:36.660
but it's there in case you want
to test with it and you don't

00:47:36.670 --> 00:47:38.860
have a Mountain Lion system handy.

00:47:38.970 --> 00:47:42.410
You can actually get instructions
from the developer website.

00:47:42.660 --> 00:47:44.810
There's a defaults write
that makes the UI appear,

00:47:44.920 --> 00:47:47.900
and then you can turn the feature
on and play around with it.

00:47:47.980 --> 00:47:49.750
No Mountain Lion required.

00:47:49.850 --> 00:47:53.790
This also means that users who
know what they're doing and they

00:47:53.790 --> 00:47:55.860
care may turn this on on you.

00:47:55.960 --> 00:47:58.950
So it's possible that you will get
complaints from users on Lion saying your

00:47:59.060 --> 00:48:03.300
program doesn't install here because you
didn't get with the Developer ID program.

00:48:03.400 --> 00:48:05.590
Don't let that happen to you.

00:48:07.460 --> 00:48:08.560
How do you test it?

00:48:08.580 --> 00:48:11.000
Well, it's pretty obvious by now.

00:48:11.040 --> 00:48:14.120
You sign your program with Developer ID.

00:48:14.310 --> 00:48:15.700
You put it on a web server.

00:48:15.700 --> 00:48:16.430
You download it.

00:48:16.600 --> 00:48:19.140
You can mail it to yourself, too,
if your mail server actually

00:48:19.140 --> 00:48:20.730
accepts attachments big enough.

00:48:20.940 --> 00:48:24.670
You just need to get quarantine
attached to it somehow.

00:48:25.310 --> 00:48:28.050
And then you double-click it on the
Finder and you watch what happens.

00:48:28.140 --> 00:48:29.160
I showed you.

00:48:29.270 --> 00:48:33.000
Either it'll launch, you're successful,
everything's cool,

00:48:33.110 --> 00:48:36.540
or you get this unidentified
developer dialogue that's not so cool.

00:48:36.540 --> 00:48:39.030
It means that you thought you
were Developer ID signing,

00:48:39.030 --> 00:48:41.190
but you really didn't
and something's wrong.

00:48:41.290 --> 00:48:43.480
Or you get this dialogue that says,
your program is broken

00:48:43.540 --> 00:48:45.320
and please throw it away,
which means you totally

00:48:45.550 --> 00:48:46.650
messed up the signing.

00:48:46.660 --> 00:48:53.660
If you run into trouble, well,
it's time to break out good old terminal.

00:48:55.120 --> 00:48:57.670
There is the new SPCTL command.

00:48:57.840 --> 00:49:01.770
It is the Swiss Army knife
of Gatekeeper rules.

00:49:01.800 --> 00:49:06.480
It also lets you enable and disable
Gatekeeper from the command line.

00:49:06.530 --> 00:49:09.760
In particular,
there is a --ss option that lets

00:49:10.220 --> 00:49:14.730
you directly ask Gatekeeper,
what do you think of that file?

00:49:14.800 --> 00:49:16.660
That doesn't require a quarantine.

00:49:16.660 --> 00:49:18.090
It's a direct call.

00:49:18.220 --> 00:49:20.370
Basically, "Hey, Gatekeeper,
what do you think?" He just

00:49:20.370 --> 00:49:23.390
looks at it and goes,
"Okay," or, you know,

00:49:23.550 --> 00:49:26.750
"I'm not going to allow this."
This calls the same API as

00:49:26.750 --> 00:49:30.650
Launch Services does when you're
going through the double-click path.

00:49:30.820 --> 00:49:33.890
So you're directly
asking the same oracle.

00:49:34.500 --> 00:49:37.920
And that's spctl -add,
which actually lets you add a rule.

00:49:38.050 --> 00:49:41.530
So this is what you tinker with if
you want to tell Gatekeeper that

00:49:41.650 --> 00:49:44.700
stuff like that is okay on my system.

00:49:45.100 --> 00:49:49.400
And of course, there's a remove and
lots of other things.

00:49:49.470 --> 00:49:54.390
All right, there's the good old code sign
command with you since about 2005.

00:49:54.510 --> 00:49:58.800
It's there so you can sign code,
but Xcode does that for you,

00:49:58.800 --> 00:50:03.200
and you will just use Xcode 4.3 or later,
and you will be happy.

00:50:03.270 --> 00:50:05.060
It will call it for you.

00:50:05.060 --> 00:50:08.500
But you can also ask Xcode
Sign to verify code signature,

00:50:08.500 --> 00:50:10.960
and that's kind of handy,
because if you give it

00:50:11.040 --> 00:50:14.560
enough levels of verbosity,
it will actually tell you, in many cases,

00:50:14.620 --> 00:50:16.880
what's wrong with the code signature.

00:50:16.990 --> 00:50:20.150
In particular,
it will tell you if you stealthily

00:50:20.150 --> 00:50:23.910
tried to add or remove files,
resources after you signed,

00:50:23.960 --> 00:50:26.590
which is something
that sometimes happens,

00:50:26.640 --> 00:50:27.120
but it shouldn't.

00:50:27.250 --> 00:50:30.840
So it'll just say, this file there,
you shouldn't have added that.

00:50:30.970 --> 00:50:34.330
There's also Code Sign Display,
which basically tells you everything

00:50:34.400 --> 00:50:35.860
that's in a code signature.

00:50:35.920 --> 00:50:38.680
That's kind of handy sometimes,
and in particular,

00:50:38.680 --> 00:50:42.060
it tells you what certificates
a piece of code was signed with.

00:50:42.290 --> 00:50:44.590
That's a really easy way of seeing
if you're actually looking at

00:50:44.690 --> 00:50:47.370
a developer ID signed program,
because the word developer

00:50:47.370 --> 00:50:48.580
ID is right in there.

00:50:48.700 --> 00:50:52.820
And if it isn't, then you didn't,
and you just signed with the wrong thing.

00:50:53.160 --> 00:50:57.410
There is a very obscure program
called CSREC that I'm just mentioning

00:50:57.410 --> 00:50:58.980
here for the first time ever.

00:50:59.090 --> 00:51:02.320
This is a little editor
for code requirements.

00:51:02.470 --> 00:51:06.150
If you play around or mess
around with code requirements,

00:51:06.150 --> 00:51:07.110
take a look.

00:51:07.420 --> 00:51:11.240
To sign installer archives,
we are telling you to use

00:51:11.240 --> 00:51:13.460
the product sign command.

00:51:13.460 --> 00:51:19.580
The product sign command is known to
do okay with Developer ID signatures.

00:51:20.700 --> 00:51:23.700
There is a surprising number
of different programs that

00:51:23.700 --> 00:51:29.290
can sign installer packages,
and some of them do better than others.

00:51:29.420 --> 00:51:32.500
So we're telling you to use
the product sign command.

00:51:33.420 --> 00:51:37.600
And of course there is the shiny new
chip command which exists solely for the

00:51:37.600 --> 00:51:42.460
purpose of making chip archives that you
can sign in the process of making them,

00:51:42.460 --> 00:51:46.090
and then you can send them
out to get those dangerous

00:51:46.090 --> 00:51:48.330
commands through Gatekeeper.

00:51:49.260 --> 00:51:52.700
And that's it.

00:51:52.800 --> 00:51:58.140
Paul Dambold is the evangelist
who is always so sad that

00:51:58.140 --> 00:52:00.200
none of you give him a call.

00:52:00.210 --> 00:52:04.950
So he is your first point of official
contact if you have any questions,

00:52:04.970 --> 00:52:08.710
complaints, or other contact requests.

00:52:09.050 --> 00:52:14.900
There is an entirely new section in the
developer documentation on Developer ID,

00:52:14.900 --> 00:52:17.810
which really should be read like
Developer ID and Gatekeeper.

00:52:17.950 --> 00:52:20.760
It contains a tutorial,
it contains some background information,

00:52:20.760 --> 00:52:22.160
some technical information.

00:52:22.160 --> 00:52:25.220
Think of it as sort of your jumping
off point on this entire thing.

00:52:25.380 --> 00:52:26.670
It's there.

00:52:26.790 --> 00:52:30.470
If you haven't read that, don't complain.

00:52:30.470 --> 00:52:30.470
Read first.

00:52:30.780 --> 00:52:34.050
There's also a dedicated forum
in the Apple Developer Forums on

00:52:34.050 --> 00:52:37.700
Developer ID and Gatekeeper where,
you know,

00:52:37.700 --> 00:52:39.130
you know how the Developer Forums work.

00:52:39.240 --> 00:52:42.200
You are talking to each
other and then Apple says,

00:52:42.200 --> 00:52:43.690
"No, that's wrong."

00:52:44.190 --> 00:52:46.260
But there's already some really
useful information there.

00:52:46.340 --> 00:52:49.570
So really,
before you start making up theories

00:52:49.570 --> 00:52:54.200
on how this stuff should work for you,
read the developer forums on

00:52:54.200 --> 00:52:57.080
Developer ID because it's useful stuff.

00:52:57.190 --> 00:52:57.950
And contribute.

00:52:57.950 --> 00:53:00.620
You know, like, you too can say,
"This did not work for me."

00:53:00.870 --> 00:53:03.290
It's perfectly all right.

00:53:04.330 --> 00:53:05.460
Related sessions.

00:53:05.550 --> 00:53:11.150
Well, I keep telling you to use Xcode,
so there is a session on building,

00:53:11.150 --> 00:53:12.940
archiving, and submitting your app.

00:53:13.060 --> 00:53:18.980
This is the session that talks
about Xcode and how you use it

00:53:18.980 --> 00:53:23.900
to bundle up your stuff and get
it ready for sending it off,

00:53:23.950 --> 00:53:25.450
both to the App Store and
through Developer ID.

00:53:25.460 --> 00:53:29.020
They will actually show you the
Developer ID path and they will talk

00:53:29.020 --> 00:53:30.970
about it in a little bit of detail.

00:53:30.990 --> 00:53:33.140
So if you're having questions
about the Xcode side of this,

00:53:33.230 --> 00:53:35.300
this is the session you want to go to.

00:53:35.330 --> 00:53:39.440
You missed the sandbox
session just before this one,

00:53:39.480 --> 00:53:41.630
but we made you a repeat on Friday.

00:53:41.740 --> 00:53:46.410
So if you missed sandbox,
you got another chance.

00:53:46.980 --> 00:53:48.940
Summary.

00:53:48.990 --> 00:53:51.280
What have I told you?

00:53:51.310 --> 00:53:55.580
This,
Gatekeeper is about helping the owner

00:53:55.580 --> 00:53:58.900
of a Mac control what goes there.

00:53:58.930 --> 00:54:01.560
This isn't about some people
telling other people what

00:54:01.560 --> 00:54:02.960
they can do with their Mac.

00:54:03.000 --> 00:54:05.860
This is about controlling
your own Mac's destiny.

00:54:05.880 --> 00:54:07.560
Gatekeeper is a tool for that.

00:54:07.720 --> 00:54:11.580
It happens to have a preset as it
comes out of the box that says,

00:54:11.580 --> 00:54:14.490
by default,
it's OK to install stuff from the

00:54:14.490 --> 00:54:18.110
Mac App Store and stuff that's
signed with this developer ID thing.

00:54:18.230 --> 00:54:20.890
So that's what developer ID is,
primarily.

00:54:21.020 --> 00:54:23.790
It's your way of getting
your stuff through Gatekeeper

00:54:23.830 --> 00:54:26.570
on default configurations.

00:54:27.420 --> 00:54:31.780
Gatekeeper is real,
and when Mountain Lion ships,

00:54:31.920 --> 00:54:34.400
it'll be right there in your face.

00:54:34.430 --> 00:54:40.390
It won't yell at you if you don't install
anything that isn't Developer ID signed.

00:54:40.940 --> 00:54:44.790
And yes, you are going to run into
Lion systems that have it on too,

00:54:45.140 --> 00:54:48.170
so be prepared for that.

00:54:48.220 --> 00:54:49.790
That's all.