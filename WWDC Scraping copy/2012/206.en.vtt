WEBVTT

00:00:11.120 --> 00:00:12.400
Hello, you crazy people.

00:00:12.400 --> 00:00:15.940
So, I'm Sal Soghoian.

00:00:15.940 --> 00:00:20.340
I'm the product manager for Automation
Technologies at Apple Computer.

00:00:20.340 --> 00:00:24.500
And I'll be presenting
today with Chris Nebel,

00:00:24.500 --> 00:00:28.760
who's the senior engineer of the
Automation Technologies team.

00:00:28.760 --> 00:00:36.900
And this topic today is very important
to people that like to get things done,

00:00:36.900 --> 00:00:41.330
that like to automate,
and like to deliver a good computing

00:00:41.390 --> 00:00:45.640
experience for their customers,
whether it's the company they work in,

00:00:45.640 --> 00:00:49.500
or people they sell scripts
or automation-type things to.

00:00:49.500 --> 00:00:52.710
A big question that has come
up over the last year is,

00:00:52.710 --> 00:00:55.400
well, how does this all fit together?

00:00:55.400 --> 00:00:59.850
How do we enter this new phase
of OS-ness with some of the

00:00:59.850 --> 00:01:02.940
funkiness from the last OS-ness?

00:01:02.940 --> 00:01:05.960
And I hope some of your
questions get answered today.

00:01:05.960 --> 00:01:12.100
Secure Automation Techniques
in... OS X Session 206.

00:01:12.100 --> 00:01:20.100
So, I'm here today to discuss how the
introduction of security and a focus

00:01:20.170 --> 00:01:25.270
on security that is highlighted by
the new app sandbox architecture

00:01:25.360 --> 00:01:32.420
in Mountain Lion and the Gatekeeper
architecture affects the world of

00:01:32.420 --> 00:01:36.370
automation and how that works together.

00:01:36.380 --> 00:01:40.770
In this particular session,
we're not going to be looking at the

00:01:40.860 --> 00:01:43.620
security structures in great depth.

00:01:44.030 --> 00:01:46.630
Instead,
we're going to look at how the two

00:01:46.760 --> 00:01:52.220
technologies intersect and the work that
we've done over this last year to make

00:01:52.300 --> 00:01:57.410
sure that the experience continues to
be very useful and productive for you.

00:01:57.550 --> 00:02:02.000
So, we will recommend a couple sessions
at the end of this talk that you

00:02:02.090 --> 00:02:06.830
can attend if you're more interested
in some of the security details.

00:02:07.770 --> 00:02:11.530
Now,
for each release of OS X over the years,

00:02:11.730 --> 00:02:19.180
culminating in the release of Lion,
with dozens and dozens of

00:02:19.180 --> 00:02:19.180
very productive features,

00:02:19.430 --> 00:02:25.540
Automation has remained an essential
element of the operating system.

00:02:25.630 --> 00:02:31.750
It's been core to what makes a
Mac a Mac and how a Mac runs.

00:02:32.430 --> 00:02:36.240
This continues in our new
operating system release,

00:02:36.300 --> 00:02:38.180
Mountain Lion.

00:02:39.240 --> 00:02:42.830
Now, in Mountain Lion,
as you caught the keynote and

00:02:42.830 --> 00:02:46.200
have seen from the massive
press that's been happening,

00:02:46.230 --> 00:02:47.480
it has a lot of new features.

00:02:47.480 --> 00:02:50.150
There's over 200 new features
in the operating system release.

00:02:50.150 --> 00:02:54.520
It has a lot of focus on social,
as well as some hardware-related

00:02:54.530 --> 00:02:56.740
things like AirPlay as well.

00:02:56.740 --> 00:03:01.670
But in addition to all of those features,
it does have a focus on security

00:03:01.670 --> 00:03:06.440
of delivering a really safe
computing environment to customers.

00:03:07.360 --> 00:03:10.340
And specifically,
there are a couple new things.

00:03:10.460 --> 00:03:13.740
There's Gatekeeper,
which allows the user control

00:03:13.830 --> 00:03:18.440
over which applications are going
to run on their operating system.

00:03:18.440 --> 00:03:23.420
And a new sandboxing architecture
that determines the scope of what an

00:03:23.420 --> 00:03:28.780
application can do and how far it can
extend its abilities and its powers.

00:03:32.050 --> 00:03:37.560
Now, we have basically the two
different kinds of worlds here.

00:03:37.560 --> 00:03:42.360
We have a world of automation that's
used to kind of like an openness,

00:03:42.360 --> 00:03:46.120
open access, open abilities,
that kind of a thing,

00:03:46.120 --> 00:03:49.810
with the world of security
that is more defined,

00:03:49.810 --> 00:03:51.380
more controlled.

00:03:51.640 --> 00:03:55.020
So we have automation and
security coming together,

00:03:55.020 --> 00:03:59.940
and what we've done is make it so that
it becomes automation with security.

00:03:59.940 --> 00:04:04.700
And we hope that you find that the work
and the things that we've put into place

00:04:04.700 --> 00:04:09.950
will satisfy your needs as people that
automate and deliver automation tools.

00:04:12.370 --> 00:04:15.720
Now, when we were designing
this new architecture,

00:04:15.720 --> 00:04:17.770
we had a couple goals in mind.

00:04:17.790 --> 00:04:21.660
First was to preserve the
functionality that you're used to.

00:04:21.680 --> 00:04:26.840
As people that write automation tools,
you look for a certain set of abilities,

00:04:26.840 --> 00:04:30.150
and you rely on those abilities,
and you build those abilities

00:04:30.150 --> 00:04:32.930
into the things that you do
and the things that you deliver

00:04:32.950 --> 00:04:34.550
and that make you a livelihood.

00:04:35.200 --> 00:04:39.000
We wanted to preserve as much of
the functionality as we could.

00:04:40.050 --> 00:04:44.560
Secondly, we wanted that interaction
between the world of automation

00:04:44.560 --> 00:04:50.390
and the world of security to
be as transparent as possible,

00:04:50.740 --> 00:04:54.260
without a lot of dialogues,
without a lot of interaction required.

00:04:54.260 --> 00:04:58.250
We wanted it to be logical and smooth.

00:04:58.480 --> 00:05:01.240
And finally,
we wanted to minimize any changes

00:05:01.240 --> 00:05:04.010
that we request of you as developers.

00:05:04.010 --> 00:05:09.150
We had your needs in mind in that one,
especially because we know

00:05:09.150 --> 00:05:10.760
how much work it takes.

00:05:10.780 --> 00:05:13.210
You're in busy production cycles,
and there's all these

00:05:13.210 --> 00:05:15.080
other things in the OS,
and oh, by the way,

00:05:15.080 --> 00:05:16.280
you need to do this too.

00:05:16.280 --> 00:05:19.610
So we wanted to minimize that,
and those were the goals

00:05:19.610 --> 00:05:20.740
that we set in mind.

00:05:20.960 --> 00:05:27.220
And to outline how we achieved that,
we're going to go through four different

00:05:27.320 --> 00:05:32.160
automation scenarios that kind of
highlight the typical use of automation

00:05:32.160 --> 00:05:38.780
in Mac OS X and how those uses
interact with the world of security.

00:05:39.410 --> 00:05:42.980
So first will be personal automation,
where we,

00:05:42.990 --> 00:05:49.180
and this encompasses all of the scripts,
the workflows, the command line tools,

00:05:49.230 --> 00:05:52.240
all the different services,
the things that you make

00:05:52.240 --> 00:05:54.720
yourself to run on your computer.

00:05:54.950 --> 00:05:59.830
Next, we'll look at distributing scripts,
the process of making these

00:05:59.830 --> 00:06:05.200
available to other people,
especially online, to download and use.

00:06:05.310 --> 00:06:09.360
How does that get affected by
this new world of security?

00:06:10.010 --> 00:06:13.200
Thirdly, we'll look at
application-to-application automation,

00:06:13.310 --> 00:06:17.220
where applications talk to each
other and ask requests of each

00:06:17.220 --> 00:06:19.590
other or commands to each other.

00:06:19.590 --> 00:06:20.800
So we'll look at that.

00:06:20.870 --> 00:06:24.380
And finally,
we'll look at attaching scripts,

00:06:24.380 --> 00:06:27.800
which is a scenario
that's very commonly used,

00:06:27.800 --> 00:06:32.090
where an application might host
a script menu or make itself

00:06:32.090 --> 00:06:34.510
attachable to certain events.

00:06:34.700 --> 00:06:36.990
And we'll look at that scenario as well.

00:06:37.450 --> 00:06:38.360
Okay, let's begin.

00:06:38.480 --> 00:06:39.700
Personal Automation.

00:06:39.720 --> 00:06:43.240
As I said, this is the kind of tools
that you make yourself.

00:06:43.250 --> 00:06:46.970
You might pass them out in your shop,
or you might just use

00:06:46.970 --> 00:06:49.750
them in your studio,
or these might be tools that you as a

00:06:49.750 --> 00:06:51.790
developer provide to your customers.

00:06:51.820 --> 00:06:56.080
And they use the built-in
automation technologies of Mac OS X,

00:06:56.080 --> 00:07:00.400
like AppleScript, Automator, Services,
the Terminal.

00:07:00.400 --> 00:07:03.410
All of those kind of things
get encompassed into the

00:07:03.410 --> 00:07:05.410
world of personal automation.

00:07:05.420 --> 00:07:09.440
And it begins with... our friend Otto.

00:07:09.520 --> 00:07:13.920
And in case you didn't notice,
this is the new Streamline Otto.

00:07:14.060 --> 00:07:17.060
He might have lost a little weight.

00:07:17.060 --> 00:07:18.350
He looks a little bit slicker.

00:07:18.500 --> 00:07:21.570
He's got new shoes.

00:07:21.840 --> 00:07:24.260
We're prevented from putting a
Nike logo on there because of

00:07:24.350 --> 00:07:25.680
a bunch of legal interaction.

00:07:25.700 --> 00:07:29.660
But anyway, he looks so much better now,
we think he's really improved.

00:07:29.700 --> 00:07:36.460
So Automator is a visual interface
tool that customers can use

00:07:36.460 --> 00:07:41.440
to create automation recipes
that are called workflows.

00:07:42.260 --> 00:07:46.700
And these workflows can then be
saved as either applets that run

00:07:46.880 --> 00:07:52.720
themselves or act as droplets,
or as system-wide services

00:07:52.720 --> 00:07:56.020
that get installed contextually
throughout the operating system.

00:07:56.070 --> 00:07:58.820
Automator's been a very popular tool.

00:07:58.820 --> 00:08:00.250
It's in Macworld.

00:08:00.250 --> 00:08:02.620
It has a monthly feature on it.

00:08:02.640 --> 00:08:05.000
It's widely used by a lot
of different customers.

00:08:05.000 --> 00:08:06.710
We use it internally as well.

00:08:06.720 --> 00:08:10.880
And so I'm very pleased to
announce to you today that

00:08:10.880 --> 00:08:16.680
Automator in Mountain Lion runs
with no restrictions whatsoever.

00:08:16.680 --> 00:08:18.160
If you...

00:08:21.270 --> 00:08:22.660
Well, I like how this is going.

00:08:22.660 --> 00:08:25.390
Okay, so if I keep saying the
word no restrictions,

00:08:25.420 --> 00:08:26.500
you're going to keep applauding?

00:08:26.500 --> 00:08:28.040
Okay.

00:08:30.050 --> 00:08:30.980
I like these guys.

00:08:31.110 --> 00:08:33.440
They're just my kind of people.

00:08:33.590 --> 00:08:38.780
So, all the workflows that you have,
that you use, if you build in Automator

00:08:38.780 --> 00:08:42.920
technology into your applications,
and you have your own internal actions,

00:08:42.920 --> 00:08:46.400
and you make those available,
all that runs with no restrictions.

00:08:46.460 --> 00:08:49.550
You just create the workflows
and run them like you always do,

00:08:49.580 --> 00:08:50.600
and it works fine.

00:08:51.700 --> 00:08:55.920
Next, AppleScript,
the AppleScript Editor application

00:08:55.990 --> 00:08:58.610
in the system-wide script menu.

00:08:58.610 --> 00:09:01.740
Now,
AppleScript is an amazing technology.

00:09:01.820 --> 00:09:04.840
It's why it came to Apple 15 years ago.

00:09:04.840 --> 00:09:09.120
Yes, some days I feel like a
dinosaur looking for a tar pit.

00:09:09.120 --> 00:09:12.660
But AppleScript's an amazing technology,
and it has constantly been

00:09:12.660 --> 00:09:14.020
growing and improving.

00:09:14.020 --> 00:09:18.760
A couple system releases ago,
we introduced AppleScript Objective-C,

00:09:18.760 --> 00:09:21.500
which really revolutionized
the way that AppleScript works.

00:09:21.520 --> 00:09:26.380
It's very popular to use,
and the scripts that you write and

00:09:26.380 --> 00:09:30.790
run out of the AppleScript Editor,
and those scripts,

00:09:31.000 --> 00:09:36.540
whether they're shell scripts or
AppleScript scripts that you load

00:09:36.540 --> 00:09:41.770
into the system-wide script menu,
and you execute from there,

00:09:41.890 --> 00:09:47.760
I'm pleased to announce they run
with absolutely no restrictions.

00:09:50.600 --> 00:09:50.980
Yay!

00:09:50.980 --> 00:09:56.200
I could just do this for an hour,
and you would be so happy.

00:09:56.200 --> 00:09:57.660
And so would I.

00:09:57.700 --> 00:10:00.380
I could take the Kevlar off.

00:10:00.380 --> 00:10:02.430
No, no Kevlar today.

00:10:02.440 --> 00:10:05.650
So, that's Automator and AppleScript.

00:10:05.650 --> 00:10:08.770
Next,
there's always the Unix command line.

00:10:08.860 --> 00:10:10.740
And what can you say about
the Unix command line?

00:10:10.740 --> 00:10:12.110
But we love to love it.

00:10:12.520 --> 00:10:15.520
You have all your various
command line tools,

00:10:15.520 --> 00:10:19.430
and in addition to that big library
that ships with every Mac because

00:10:19.530 --> 00:10:23.700
it's a Unix operating system,
there are some commands dealing directly

00:10:23.700 --> 00:10:26.460
with Apple Events and with Automator.

00:10:26.460 --> 00:10:30.640
There's OSA script and the command
Automator for the Automator.

00:10:30.840 --> 00:10:33.860
And with those,
you can run and send Apple Events,

00:10:33.860 --> 00:10:37.340
plus you can also execute
workflows files as well.

00:10:37.340 --> 00:10:41.060
And again, like everything else,
it runs with no restrictions.

00:10:42.940 --> 00:10:43.300
Yay!

00:10:43.300 --> 00:10:47.020
And this is because all of these
tools that you use to create

00:10:47.020 --> 00:10:51.180
your personal automations,
the AppleScript, the Automator,

00:10:51.180 --> 00:10:54.450
the Services, the Terminal,
all of those tools,

00:10:54.450 --> 00:10:59.970
the code for that is executed
by the operating system itself.

00:10:59.980 --> 00:11:05.190
So if you write the code and it gets
executed by the operating system,

00:11:05.310 --> 00:11:07.510
there are no restrictions.

00:11:08.240 --> 00:11:12.400
So, to summarize one more time,
personal automation,

00:11:12.400 --> 00:11:17.970
scripts you write yourself on the OS,
anything that you write that's

00:11:17.980 --> 00:11:22.660
executed by the operating system
runs with no restrictions whatsoever.

00:11:22.660 --> 00:11:24.190
Okay, applause.

00:11:26.620 --> 00:11:28.830
All right, now let's get down into it.

00:11:28.840 --> 00:11:29.710
For the good stuff.

00:11:29.800 --> 00:11:31.310
No, it's all good.

00:11:31.310 --> 00:11:32.200
You're going to love this.

00:11:32.200 --> 00:11:34.410
So that's personal automation.

00:11:34.410 --> 00:11:37.900
Next, let's look at distributing scripts.

00:11:37.900 --> 00:11:39.760
And this is really a common practice.

00:11:39.760 --> 00:11:42.560
You know, you find a nice tool
that you're looking for.

00:11:42.560 --> 00:11:46.300
One of the great things about
writing automation is the ability

00:11:46.300 --> 00:11:48.140
to share with other people.

00:11:48.140 --> 00:11:49.330
We always like to do it.

00:11:49.330 --> 00:11:51.300
It's like showing off the new shiny toy.

00:11:51.330 --> 00:11:52.700
Look, I can make it do this.

00:11:52.760 --> 00:11:53.930
I can make it do that.

00:11:54.700 --> 00:11:58.620
Well, you can share on a friendly
basis between office mates,

00:11:58.620 --> 00:12:02.870
or you could actually be part of
your professional persona that

00:12:02.870 --> 00:12:07.450
you post scripts for other people
to use as professional tools.

00:12:07.710 --> 00:12:10.580
You know, at Apple, we even do that, too.

00:12:10.660 --> 00:12:15.970
And we just recently released a tool
called the Mastered for iTunes Droplet,

00:12:15.970 --> 00:12:19.540
and it's part of the
Apple Audio Mastering Tools and

00:12:19.540 --> 00:12:23.880
part of the new iTunes
Mastered for iTunes initiative.

00:12:23.880 --> 00:12:29.570
And it's being used by hundreds of
thousands of professionals worldwide

00:12:29.650 --> 00:12:34.910
to preview their songs and their
audio files as to how they're going

00:12:34.910 --> 00:12:38.030
to sound in preparation for iTunes.

00:12:38.060 --> 00:12:41.460
It's very high quality,
and all of that preparation

00:12:41.460 --> 00:12:45.780
and all of that preview work is
done by an Apple Script Droplet.

00:12:45.780 --> 00:12:48.670
So at Apple,
this is an important tool for us.

00:12:48.670 --> 00:12:50.530
We take this very seriously.

00:12:50.680 --> 00:12:53.680
So how does this get affected by?

00:12:53.880 --> 00:12:58.040
the new features in Mountain Lion,
specifically Gatekeeper.

00:12:58.190 --> 00:13:02.950
Now, Gatekeeper was designed to give the
user more control of which applications

00:13:02.950 --> 00:13:05.680
can run in the operating system.

00:13:05.790 --> 00:13:11.620
It lives in the security and privacy
preference pane and it has a section to

00:13:11.620 --> 00:13:14.240
it that has three different settings.

00:13:14.340 --> 00:13:17.240
This setting that I'm showing
right now is the Anywhere.

00:13:17.240 --> 00:13:21.790
That means that any app you download,
it can just run.

00:13:21.960 --> 00:13:25.160
The first setting is
for the Mac App Store,

00:13:25.360 --> 00:13:29.530
and that means that only applications
that were purchased or downloaded

00:13:29.530 --> 00:13:32.500
from the Mac App Store are
allowed to run on this computer

00:13:32.750 --> 00:13:33.990
when that setting is active.

00:13:34.000 --> 00:13:38.540
The next setting is the
Mac App Store and Identify Developers,

00:13:38.540 --> 00:13:43.280
those developers that have
signing certificates with Apple.

00:13:44.180 --> 00:13:45.990
And it is the default setting.

00:13:45.990 --> 00:13:49.700
That's really important to note
that that is the default setting.

00:13:49.700 --> 00:13:52.590
That, as developers,
is what you can expect your

00:13:52.680 --> 00:13:55.100
customers will find on the computer.

00:13:55.100 --> 00:14:00.170
Now, let's see how that interaction now
will occur if the user is using

00:14:00.170 --> 00:14:03.380
Mountain Lion with the default setting.

00:14:03.400 --> 00:14:08.330
So here I am on this great website,
macos10automation.com,

00:14:08.330 --> 00:14:11.800
and I found a droplet
that I'm interested in.

00:14:11.800 --> 00:14:13.520
I click the link on the page.

00:14:14.160 --> 00:14:15.860
I download the droplet.

00:14:15.860 --> 00:14:20.290
It unpacks and starts to run,
and I get this dialogue that appears.

00:14:20.420 --> 00:14:24.890
And it says the applet that you've
downloaded can't be opened because

00:14:24.890 --> 00:14:29.040
it is from an unidentified developer,
and that your security

00:14:29.100 --> 00:14:33.670
preferences allow installation
of only those that come from the

00:14:33.870 --> 00:14:36.900
Mac App Store and Identify Developers.

00:14:36.900 --> 00:14:40.960
So it's basically saying because
the way you have Gatekeeper set up,

00:14:40.960 --> 00:14:42.630
I can't open this applet.

00:14:42.700 --> 00:14:44.140
I don't know where it is.

00:14:44.160 --> 00:14:44.950
I don't know where it came from.

00:14:44.960 --> 00:14:49.190
So what's a customer going
to do with that dialogue?

00:14:49.200 --> 00:14:51.480
A common customer is
just going to look at it,

00:14:51.580 --> 00:14:55.320
and there's only an OK button,
and they don't know what else to do.

00:14:55.320 --> 00:15:00.320
Now, a power user might know that you can
select the applet in the desktop,

00:15:00.320 --> 00:15:03.520
and then you can select
open from the action menu,

00:15:03.520 --> 00:15:08.500
and you get a similar dialogue informing
you that it's from an unsigned developer.

00:15:08.500 --> 00:15:13.960
But it will allow you the ability
to open and then continue to open.

00:15:14.160 --> 00:15:16.160
So you can do that once
you've opened it once.

00:15:16.590 --> 00:15:21.980
But as developers, it's really important
not to depend on this,

00:15:22.260 --> 00:15:25.760
because this is put in place for
a small fraction or a subset of

00:15:25.900 --> 00:15:28.920
customers who are really professionals,
know what they're doing,

00:15:28.970 --> 00:15:31.820
want to run the downloaded item.

00:15:31.980 --> 00:15:35.930
So as somebody that provides
tools for others to use,

00:15:36.010 --> 00:15:37.980
it's important for you
not to rely on that.

00:15:37.980 --> 00:15:41.090
The default setting in
Mountain Lion is that second one of

00:15:41.250 --> 00:15:43.580
Mac App Store and Identify Developers.

00:15:43.690 --> 00:15:45.600
So then what's the solution?

00:15:45.600 --> 00:15:49.590
How do you provide a good
experience for your customers?

00:15:49.600 --> 00:15:55.170
How do you let them run your
applets or your scripts?

00:15:55.700 --> 00:16:01.290
And what you do is you use the developer
signing certificate that you've gotten

00:16:01.540 --> 00:16:07.500
and a couple command line things,
and you code sign the applet.

00:16:07.760 --> 00:16:13.040
And then it will run as a normal
downloaded process through Gatekeeper.

00:16:13.040 --> 00:16:16.190
The user will be able to download
your app and run with no problem.

00:16:16.240 --> 00:16:20.560
So here to give you a demo of how
you sign in Applet and exactly

00:16:20.630 --> 00:16:23.810
what goes into it is my good buddy,
Chris.

00:16:23.900 --> 00:16:25.020
Take it away, Chris.

00:16:25.040 --> 00:16:26.600
Thank you, Sal.

00:16:30.670 --> 00:16:32.240
So we've been working hard.

00:16:32.240 --> 00:16:35.520
We've finally come up with this
brilliant applet that now we

00:16:35.520 --> 00:16:36.610
want to share with the world.

00:16:36.610 --> 00:16:38.420
So how do we do that?

00:16:38.420 --> 00:16:41.370
So the first thing we want to do,
and this applies to any applet

00:16:41.370 --> 00:16:43.630
that you distribute really,
is you want to set a

00:16:43.630 --> 00:16:45.150
bundle identifier for it.

00:16:45.210 --> 00:16:46.570
Give it a unique bundle identifier.

00:16:46.570 --> 00:16:49.510
This helps the rest of the system out
in identifying what this application is,

00:16:49.510 --> 00:16:51.600
what preferences belong to it,
that sort of thing.

00:16:52.390 --> 00:16:55.520
It used to be you had to just
edit the info.p list directly.

00:16:55.630 --> 00:16:58.620
This is new in Mountain Lion,
part of the bundle contents drawer.

00:16:58.620 --> 00:17:01.290
There's now direct UI for
changing the bundle identifier.

00:17:01.310 --> 00:17:04.070
So I've already got it set up here.

00:17:07.630 --> 00:17:10.460
So now we want to send
it out into the world.

00:17:10.510 --> 00:17:19.610
And so anything that you download through
Safari is going to get flagged as being,

00:17:19.690 --> 00:17:20.940
you know, this came from the Internet.

00:17:20.940 --> 00:17:23.060
Gatekeeper needs to take a look at this.

00:17:23.100 --> 00:17:26.200
I'm actually going to simulate
this process here by dropping

00:17:26.250 --> 00:17:29.510
it on a little applet,
which, yes, was written in AppleScript.

00:17:30.810 --> 00:17:33.790
So now if we try to open this,
we get this Gatekeeper

00:17:33.790 --> 00:17:37.080
dialogue that essentially says,
"You downloaded this from the internet.

00:17:37.140 --> 00:17:41.690
I have no idea who it's from,
and you told me not to allow that,

00:17:41.690 --> 00:17:46.000
so there you go." Now, like Sal said,
a power user might know, "Okay,

00:17:46.000 --> 00:17:49.120
you can work around this with
a contextual menu," but most

00:17:49.120 --> 00:17:51.900
users aren't going to know that.

00:17:52.010 --> 00:17:54.890
So how do we do this correctly?

00:17:57.700 --> 00:18:01.420
So the very first step is get
yourself a signing certificate.

00:18:01.680 --> 00:18:03.750
I'm not going to go into the
details of how to do that.

00:18:03.770 --> 00:18:08.920
There was a session earlier today on
specifically dealing with developer ID.

00:18:09.860 --> 00:18:11.820
But the presumption is
you've already got one.

00:18:11.940 --> 00:18:14.550
It'll show up in Keychain Access.

00:18:14.730 --> 00:18:18.430
Here's our signing certificate
with an identity of Roswell,

00:18:18.430 --> 00:18:20.670
Inc.

00:18:23.320 --> 00:18:29.340
And for the rest of this,
we are going to need Terminal.

00:18:29.340 --> 00:18:31.930
So the first thing we're going
to do is actually change the

00:18:31.930 --> 00:18:33.740
applet's permissions slightly.

00:18:33.740 --> 00:18:37.860
We're going to mark the
applet's script as read-only.

00:18:38.010 --> 00:18:40.160
Applets, by default,
like to write back to themselves so

00:18:40.160 --> 00:18:42.400
they can do persistent properties.

00:18:42.450 --> 00:18:43.890
The problem is that once
an applet is signed,

00:18:43.940 --> 00:18:46.730
writing back to it like that will
actually invalidate the signature,

00:18:46.730 --> 00:18:48.860
and we don't want it to do that.

00:18:48.860 --> 00:18:52.440
So we're going to flag it as read-only,
chmod a minus w.

00:18:52.440 --> 00:18:53.690
Thank you.

00:18:54.000 --> 00:18:56.690
And realize that, of course,
properties will not

00:18:56.690 --> 00:18:58.340
persist after this point.

00:18:58.340 --> 00:19:00.740
You can't rely on that.

00:19:01.180 --> 00:19:06.570
So use NSUser defaults, preferences,
preference file of your own devising,

00:19:06.570 --> 00:19:07.850
something like that.

00:19:08.340 --> 00:19:11.550
The second step,
and this is the really good bit,

00:19:11.550 --> 00:19:14.240
of course, is code sign the applet.

00:19:14.350 --> 00:19:22.750
So code sign, give it your developer ID,
and also give it a signing identifier,

00:19:22.750 --> 00:19:25.000
which should match the

00:19:25.450 --> 00:19:28.260
Which should match the bundle identifier.

00:19:28.260 --> 00:19:29.400
And it's going to want our private key.

00:19:29.400 --> 00:19:31.790
Yes, we want to allow that.

00:19:34.580 --> 00:19:39.130
And if we take a peek at it here,
code sign minus display,

00:19:39.240 --> 00:19:41.660
this all looks like what we want.

00:19:41.690 --> 00:19:46.020
Right executable,
here's our bundle identifier.

00:19:46.180 --> 00:19:50.810
So now if we pretend we
downloaded this again.

00:19:52.380 --> 00:19:52.750
and run it.

00:19:52.790 --> 00:19:55.180
We still get a Gatekeeper
dialogue because we still

00:19:55.240 --> 00:19:56.200
download it from the internet.

00:19:56.200 --> 00:19:58.500
Gatekeeper is very suspicious
about this internet thing.

00:19:58.500 --> 00:20:01.550
But now it just says,
you download it from the internet.

00:20:01.590 --> 00:20:02.870
Are you sure you want to open it?

00:20:02.870 --> 00:20:03.810
Why, yes, we are.

00:20:06.150 --> 00:20:07.100
And there it goes.

00:20:07.100 --> 00:20:11.700
And now that we've approved
it once with Gatekeeper,

00:20:11.720 --> 00:20:13.090
it's not going to ask us again.

00:20:13.150 --> 00:20:14.810
Next time we launch it,
it just plain runs.

00:20:17.150 --> 00:20:20.610
So that's how to sign your
applets for distribution.

00:20:20.750 --> 00:20:23.390
And with that, back to Sal.

00:20:27.900 --> 00:20:29.130
You guys are so polite.

00:20:29.140 --> 00:20:30.070
I love that.

00:20:30.070 --> 00:20:33.510
You were taught well by your parents.

00:20:35.120 --> 00:20:38.360
Okay, so that was the second
case we were looking at.

00:20:38.460 --> 00:20:42.450
The first case was we were
looking at user scripts,

00:20:42.740 --> 00:20:45.750
then we looked at downloading.

00:20:45.900 --> 00:22:31.100
[Transcript missing]

00:22:31.200 --> 00:22:35.100
And when I click the link,
instead of a standard script window,

00:22:35.260 --> 00:22:38.140
the AppleScript Editor application
comes to the foreground and

00:22:38.140 --> 00:22:40.410
presents this new text window.

00:22:40.420 --> 00:22:43.240
And in this text window,
you'll notice that there

00:22:43.420 --> 00:22:44.760
is the sample code.

00:22:44.760 --> 00:22:47.890
You can read the sample code,
see exactly what the

00:22:47.890 --> 00:22:49.460
script is going to do.

00:22:49.460 --> 00:22:52.280
You can even select the
sample code if you want,

00:22:52.280 --> 00:22:54.870
and you can copy it,
or you can even drag it to

00:22:54.870 --> 00:22:56.740
the desktop as a clipping.

00:22:57.630 --> 00:23:01.010
But the one thing you can't do in
this window is run that script.

00:23:01.080 --> 00:23:05.490
It's just there for you to view,
and it gives you the Gatekeeper

00:23:05.590 --> 00:23:09.560
warning that this script is
from an unidentified developer.

00:23:09.560 --> 00:23:14.850
Your security preferences
currently tell me not to open this.

00:23:14.980 --> 00:23:19.060
Do you want to go ahead and
create a new script with this?

00:23:19.060 --> 00:23:23.270
And if you click the New Script button,
then the code is taken from that

00:23:23.270 --> 00:23:25.650
window and placed into a new script.

00:23:25.720 --> 00:23:26.970
And then you can complete it.

00:23:27.490 --> 00:23:29.590
You can compile the script,
run the script,

00:23:29.590 --> 00:23:31.490
whatever you like to do at that point.

00:23:31.560 --> 00:23:35.690
So there is this extra layer
of interaction that does

00:23:35.690 --> 00:23:40.280
occur if you click a link,
and it's an AppleScript URL.

00:23:42.650 --> 00:23:44.930
Not a big thing,
but that's something different.

00:23:44.930 --> 00:23:50.590
A little bit more security I think we
can all live with for a better world.

00:23:51.150 --> 00:23:54.360
So, about distributing scripts.

00:23:54.380 --> 00:23:58.680
Now, if you work with Gatekeeper,
then it may restrict

00:23:58.870 --> 00:24:00.530
your downloaded applets.

00:24:00.620 --> 00:24:02.850
So, therefore,
you'll need to sign them if you

00:24:02.850 --> 00:24:07.400
don't want that restriction to occur,
and then also be aware that Gatekeeper

00:24:07.400 --> 00:24:12.590
might interfere with the execution of
the AppleScript colon URL by bringing

00:24:12.590 --> 00:24:15.320
up the extra little bit of security.

00:24:15.320 --> 00:24:18.520
Not a big issue, but I thought you'd
want to know about it.

00:24:19.080 --> 00:24:23.250
The next thing we're going to
look at is the App Sandbox.

00:24:23.250 --> 00:24:26.760
Now, there's been a lot of talk
about the App Sandbox and

00:24:26.760 --> 00:24:30.440
how it impacts automation,
and everybody's had their own

00:24:30.440 --> 00:24:34.980
ideas about how this works,
but we want to make sure that you

00:24:34.980 --> 00:24:39.210
hear from us how well automation
works with the new App Sandbox.

00:24:39.210 --> 00:24:42.260
So, let's take a look at this.

00:24:42.480 --> 00:24:48.940
So, app-to-app automation,
using Apple events with your application.

00:24:49.100 --> 00:24:52.340
So, we know that applications

00:24:52.600 --> 00:24:56.420
Throughout the history of the Mac,
have been able to use Apple events

00:24:56.890 --> 00:25:00.550
to communicate with each other,
to make like a request for data

00:25:00.710 --> 00:25:04.140
from one application to another
and return back information,

00:25:04.260 --> 00:25:11.180
or even to request an application
do something crazy for it,

00:25:11.180 --> 00:25:11.180
like generate a picture of me.

00:25:12.060 --> 00:25:17.980
So, in the world of a sandbox,
an application can do what it

00:25:17.980 --> 00:25:21.620
wants within its own window,
within its own environment.

00:25:21.620 --> 00:25:27.060
It's free to do and send itself
events and do whatever it likes.

00:25:27.060 --> 00:25:30.050
It can exist in its own world.

00:25:30.530 --> 00:25:33.620
However,
if it wants to send an Apple event

00:25:33.620 --> 00:25:38.330
to another application,
it can't do that by default.

00:25:38.330 --> 00:25:42.160
Applications can receive events,
but they can't send events

00:25:42.160 --> 00:25:45.630
to other applications,
whether the target application's

00:25:45.630 --> 00:25:46.780
in a sandbox or not.

00:25:47.110 --> 00:25:48.590
That's the default behavior.

00:25:48.680 --> 00:25:51.380
Now,
to allow the communication and all the

00:25:51.380 --> 00:25:55.790
benefits of Apple events to still occur,
we've created this structure

00:25:55.790 --> 00:25:57.560
called an entitlement.

00:25:58.390 --> 00:26:03.080
And if you request and get an entitlement
to talk to a particular application,

00:26:03.090 --> 00:26:05.070
then your Apple event works fine.

00:26:05.310 --> 00:26:12.180
And here to talk to you about
Apple events and entitlements is Chris.

00:26:14.900 --> 00:26:17.400
Thank you.

00:26:17.510 --> 00:26:19.900
So first,
I wanted to spend a little time talking

00:26:19.900 --> 00:26:22.040
about Apple Events security policy.

00:26:22.040 --> 00:26:24.440
There have been some
misconceptions about this,

00:26:24.440 --> 00:26:26.420
so let's get the real deal.

00:26:26.530 --> 00:26:30.060
So first off, there are no restrictions
on receiving events.

00:26:30.060 --> 00:26:33.590
As a sandboxed application,
you can still receive anything.

00:26:33.740 --> 00:26:37.000
The practical upshot being that a
scriptable application is still just

00:26:37.110 --> 00:26:41.490
as scriptable after it's sandboxed,
with no code changes required.

00:26:42.750 --> 00:26:44.900
So I think we're going
to start with one caveat,

00:26:44.910 --> 00:26:48.290
which is that because of how the sandbox
deals with files and extending the

00:26:48.340 --> 00:26:52.520
sandbox to access a particular file,
if you're going to pass file references

00:26:52.520 --> 00:26:56.440
in and out of your application,
those need to be actual file types,

00:26:56.440 --> 00:26:58.780
not just a text string that is a path.

00:27:00.160 --> 00:27:02.030
The Apple Event Manager is clever.

00:27:02.030 --> 00:27:04.920
It will notice file references
in Apple Events and create

00:27:04.920 --> 00:27:07.710
sandbox extensions for them,
but it does not try to do that

00:27:07.880 --> 00:27:09.550
for just plain text paths.

00:27:10.570 --> 00:27:11.500
It's too open to a bit.

00:27:17.160 --> 00:27:25.290
So the sandbox people like to
say that one buffer overflow

00:27:25.290 --> 00:27:26.930
shouldn't ruin your whole day.

00:27:27.060 --> 00:27:31.390
That's where AppSandbox came from,
is the notion of being able to restrict

00:27:31.390 --> 00:27:35.540
what an application can do so that when,
not if, when it gets exploited,

00:27:35.620 --> 00:27:37.920
there's only so much damage it can do.

00:27:37.920 --> 00:27:37.920
And the thing is that if an
application can't do that,

00:27:37.920 --> 00:27:37.920
then it's not going to
be able to do anything.

00:27:37.920 --> 00:27:37.920
So the sandbox people like to
say that one buffer overflow

00:27:37.920 --> 00:27:37.920
shouldn't ruin your whole day.

00:27:37.920 --> 00:27:37.920
That's where AppSandbox came from,
is the notion of being able to restrict

00:27:37.920 --> 00:27:37.920
what an application can do so that when,
not if, when it gets exploited,

00:27:37.920 --> 00:27:37.920
there's only so much damage it can do.

00:27:39.570 --> 00:27:43.600
And the thing is that if an
application can escape its sandbox,

00:27:43.750 --> 00:27:45.090
then suddenly it's unrestricted again.

00:27:45.100 --> 00:27:48.610
You're back to this old world where a
single exploit ruins your whole day.

00:27:49.940 --> 00:27:52.740
And Apple Events make a great
way to escape the sandbox.

00:27:52.740 --> 00:27:56.190
You can use the finder to
escape any sort of file system

00:27:56.190 --> 00:27:58.260
restrictions that you have.

00:27:58.280 --> 00:28:00.530
If you can talk to Safari,
you can get around any

00:28:00.530 --> 00:28:01.840
network restrictions.

00:28:02.990 --> 00:28:05.200
You can just tell Terminal
to do anything you like.

00:28:05.200 --> 00:28:06.930
It'll be happy to run a script for you.

00:28:08.300 --> 00:28:10.740
So, no Apple events by default.

00:28:10.870 --> 00:28:12.940
That said,
there are perfectly legitimate reasons to

00:28:12.940 --> 00:28:14.640
send Apple events to other applications.

00:28:14.640 --> 00:28:19.160
One fairly common use is telling
Mail to make a new message with

00:28:19.230 --> 00:28:22.150
your own document as an attachment.

00:28:22.860 --> 00:28:25.080
And you can get an entitlement
to let you do that.

00:28:25.250 --> 00:28:28.710
So here's what it looks like in Lion.

00:28:29.070 --> 00:28:30.960
We want to send an Apple event to mail.

00:28:31.020 --> 00:28:35.410
There's an entitlement,
com.apple.security.temporaryexception.

00:28:35.410 --> 00:28:38.590
appleevents,
and the value is a string,

00:28:38.600 --> 00:28:42.180
which is the code signing identifier
of the application we want to talk to,

00:28:42.180 --> 00:28:43.470
com.apple.mail.

00:28:43.670 --> 00:28:47.690
So now we have permission to send
whatever Apple event we want to mail,

00:28:47.930 --> 00:28:49.860
such as compose a new message.

00:28:51.010 --> 00:28:53.660
Now, some of you may be
thinking at this point,

00:28:53.770 --> 00:28:56.010
what do you mean temporary, exactly?

00:28:56.100 --> 00:28:57.070
What is that?

00:28:57.200 --> 00:28:59.770
This entitlement works,
but we're not real happy with it.

00:28:59.870 --> 00:29:00.760
We like Apple events.

00:29:00.760 --> 00:29:02.560
We're not real happy
with this entitlement,

00:29:02.660 --> 00:29:03.250
and here's why.

00:29:04.690 --> 00:29:07.230
There's something in security called
the principle of least privilege.

00:29:07.350 --> 00:29:12.430
The idea is that an application ought
to have just enough privileges to

00:29:12.430 --> 00:29:14.960
get its job done and nothing else.

00:29:15.370 --> 00:29:20.440
And the existing Apple Event Entitlement
basically stomps all over that.

00:29:20.440 --> 00:29:23.340
It allows you to send any event you want.

00:29:23.530 --> 00:29:26.440
And mail can not just compose messages.

00:29:26.440 --> 00:29:28.640
And we didn't just get
permission to compose messages,

00:29:28.640 --> 00:29:30.650
we got permission to send it anything.

00:29:30.740 --> 00:29:33.420
Which means we could also tell it to,
you know,

00:29:33.420 --> 00:29:37.390
grub through all your mailboxes and
collect all your email addresses

00:29:37.390 --> 00:29:41.820
and package them up in a different
message and send them off to Croatia.

00:29:41.960 --> 00:29:43.600
Not exactly what we want.

00:29:43.720 --> 00:29:45.660
So the existing entitlement
is simply too broad.

00:29:45.660 --> 00:29:46.960
It grants too many privileges.

00:29:46.960 --> 00:29:49.470
What we want is the ability
to ask for just part of a

00:29:49.480 --> 00:29:51.700
scriptable applications interface.

00:29:51.700 --> 00:29:54.680
We want to be able to send it
a specific command and say that

00:29:54.680 --> 00:29:56.180
that's all we're going to do.

00:29:56.390 --> 00:29:58.350
And that's what we're
introducing in Mountain Lion.

00:29:58.360 --> 00:30:01.360
So they're called access groups,
Apple Event Access Groups.

00:30:01.560 --> 00:30:06.530
An access group defines a
set of scriptable operations,

00:30:06.530 --> 00:30:09.220
a set of commands and
classes and properties.

00:30:09.700 --> 00:30:13.580
They can be sliced and diced
in a very flexible way.

00:30:13.580 --> 00:30:15.940
They are part of the
application's scripting interface.

00:30:15.940 --> 00:30:16.740
It's SDEF.

00:30:16.850 --> 00:30:22.520
There's documentation on the exact format
in the SDEF man page in Mountain Lion.

00:30:22.520 --> 00:30:26.220
And it's actually already being used in
a couple of Mountain Lion applications.

00:30:26.240 --> 00:30:29.420
Mail and iTunes are both
marked up with access groups.

00:30:29.420 --> 00:30:34.370
Mail for composing a new message,
and iTunes with access groups

00:30:34.520 --> 00:30:38.250
to let you do playback and get
information about the currently

00:30:38.250 --> 00:30:43.460
playing track and two for arbitrary
reading and writing of the library.

00:30:43.460 --> 00:30:47.700
So let's look at what this looks like
in an application scripting interface.

00:30:47.700 --> 00:30:50.220
So this is a fragment of mails SDef.

00:30:50.220 --> 00:30:52.580
Like I said,
this is real in Mountain Lion.

00:30:52.580 --> 00:30:56.130
So it starts off with a definition
of the application itself and how it

00:30:56.170 --> 00:30:58.240
extends the base application class.

00:30:58.300 --> 00:31:01.260
And it says it has an element
which is outgoing messages.

00:31:01.260 --> 00:31:03.830
So application contains some
number of outgoing messages.

00:31:03.830 --> 00:31:06.700
There's a class definition for
outgoing message itself which

00:31:06.800 --> 00:31:11.040
contains things like recipients,
content, subject, yada, yada, yada.

00:31:11.120 --> 00:31:14.580
And finally a command send
to actually send the thing.

00:31:14.580 --> 00:31:16.680
So now we want to create an access group.

00:31:16.680 --> 00:31:22.140
So we do that by adding the new
access group element to the SDef.

00:31:22.140 --> 00:31:25.250
So putting it inside the
element declaration there,

00:31:25.290 --> 00:31:29.380
we give it an identifier,
com.apple.mail.compose,

00:31:29.380 --> 00:31:31.060
and an access read/write.

00:31:31.060 --> 00:31:34.070
So this means now that as
part of this access group,

00:31:34.070 --> 00:31:40.040
you are allowed to make a new mail
message and get an outgoing message.

00:31:40.040 --> 00:31:43.440
Now this doesn't give us permission
to actually do anything with

00:31:43.440 --> 00:31:45.880
parts of an outgoing message.

00:31:45.880 --> 00:31:50.520
To do that, we add another access group
element with the same identifier

00:31:50.960 --> 00:31:54.320
to the outgoing message class.

00:31:54.320 --> 00:31:57.040
And this, because we placed it directly
inside the class element,

00:31:57.110 --> 00:31:59.400
it applies to everything
inside that class.

00:31:59.400 --> 00:32:01.300
So all its properties, all its elements.

00:32:01.300 --> 00:32:03.750
So we've now got full access
to everything that is part

00:32:03.920 --> 00:32:05.780
of an outgoing message.

00:32:07.550 --> 00:32:10.790
And when it comes time to send,
we actually made the specific

00:32:10.790 --> 00:32:13.630
decision that sending should
be up to the user only.

00:32:13.640 --> 00:32:17.390
A sandboxed application really should
not have permission to do this ever.

00:32:17.510 --> 00:32:20.360
So if it's not an access group,
then you cannot use it

00:32:20.360 --> 00:32:23.880
with the new entitlement,
which I'll talk about in a moment.

00:32:24.030 --> 00:32:27.400
Now, this has application to your
applications potentially as well.

00:32:27.420 --> 00:32:31.390
If you have a scriptable application,
you should be looking at marking

00:32:31.390 --> 00:32:33.010
it up with access groups.

00:32:33.110 --> 00:32:36.960
It'll make it much easier and
much safer for clients to use

00:32:37.030 --> 00:32:38.990
you in a secure environment.

00:32:39.330 --> 00:32:42.410
And the general rule you want
to use for creating an access

00:32:42.510 --> 00:32:45.700
group is look at -- divide things
along functional boundaries.

00:32:45.700 --> 00:32:46.980
Look at the kind of clients you use.

00:32:47.030 --> 00:32:48.620
Look at the kind of tasks they do.

00:32:48.710 --> 00:32:52.600
Is there a common task that you can say,
"Okay, this group of things goes

00:32:52.610 --> 00:32:55.860
together." So we'll make a
single access group for that.

00:32:56.050 --> 00:32:58.380
Access groups are
perfectly free to overlap.

00:32:58.500 --> 00:33:00.990
Something might wind up in a
couple different access groups,

00:33:01.000 --> 00:33:05.660
such as the iTunes read and read/write,
entitlements or access groups.

00:33:05.790 --> 00:33:07.860
And like we saw with Send,
not everything needs to

00:33:07.860 --> 00:33:08.740
be in an access group.

00:33:08.890 --> 00:33:12.110
You might decide that, okay,
for a sandboxed application,

00:33:12.310 --> 00:33:13.770
this is just not appropriate.

00:33:13.900 --> 00:33:17.280
If you had a personal user script, it is,
of course, free to access anything.

00:33:17.370 --> 00:33:19.950
But a sandboxed application, eh,
no thanks.

00:33:20.050 --> 00:33:22.610
So from the client application,
you're the person --

00:33:22.700 --> 00:33:25.770
you're the application that
wants to control mail now.

00:33:25.890 --> 00:33:30.620
There is a new entitlement for this:
com.apple.security.scriptingtargets.

00:33:30.620 --> 00:33:31.730
The value is a little different now.

00:33:31.760 --> 00:33:32.800
It's now a dictionary.

00:33:32.800 --> 00:33:36.950
The keys are the code signing identifiers
of the application you want to talk to,

00:33:37.130 --> 00:33:41.260
and the value is a list of all
the scripting -- of all the access

00:33:41.310 --> 00:33:43.490
groups that you want to use.

00:33:43.610 --> 00:33:48.510
So in this case,
we're composing a new mail message.

00:33:48.510 --> 00:33:48.510
Here's the entitlement key.

00:33:49.040 --> 00:33:54.590
The dictionary containing the
case-sensitive code signing identifiers.

00:33:55.010 --> 00:33:57.050
And finally, the list of access groups.

00:33:57.140 --> 00:33:59.680
So now this application,
with this in its entitlements plist,

00:33:59.870 --> 00:34:03.320
has permission to tell Mail to
make a new outgoing message

00:34:03.690 --> 00:34:07.900
and modify it arbitrarily,
add attachments, whatever,

00:34:08.030 --> 00:34:10.300
but nothing else.

00:34:10.410 --> 00:34:12.330
So principle of least privilege again.

00:34:12.460 --> 00:34:16.080
So to sum up for app-to-app automation,
if you are receiving events,

00:34:16.080 --> 00:34:21.720
if you are scriptable,
keep all your existing code,

00:34:21.740 --> 00:34:22.610
minor caveat about files
versus text I mentioned before,

00:34:22.610 --> 00:34:23.090
and add access groups.

00:34:23.180 --> 00:34:26.160
Mark your application up with
additional access groups,

00:34:26.370 --> 00:34:30.330
make it safe to use in
a secure environment.

00:34:30.520 --> 00:34:34.820
If you are sending Apple events,
all of your code stays the same.

00:34:34.920 --> 00:34:38.170
If you are sandboxed,
you will need an entitlement.

00:34:38.370 --> 00:34:40.600
Use the new scripting targets
entitlement if you can,

00:34:40.600 --> 00:34:43.060
if you are talking to Mail or
iTunes or some application

00:34:43.060 --> 00:34:46.960
that has added access groups.

00:34:47.030 --> 00:34:50.470
Otherwise, keep using the temporary
exception entitlement.

00:34:50.510 --> 00:34:54.950
It will go away eventually, but for now,
use it if you have to.

00:34:55.020 --> 00:34:58.060
And with that, back to Sal.

00:35:03.290 --> 00:35:06.210
So I could tell you like
the word entitlement,

00:35:06.210 --> 00:35:06.570
huh?

00:35:06.770 --> 00:35:08.690
You're going, wait a minute,
wait a minute,

00:35:08.690 --> 00:35:11.040
this doesn't cover everything that I do.

00:35:11.040 --> 00:35:14.020
I don't want to ask for
entitlement for everything.

00:35:14.020 --> 00:35:17.510
It's cool and everything,
the access group breaking it down,

00:35:17.510 --> 00:35:20.630
making it, you know, okay,
it's easier to ask for that,

00:35:20.790 --> 00:35:21.740
I can get that.

00:35:23.880 --> 00:35:27.980
So the next thing we're going to look at,
we'll expand this a little bit,

00:35:28.250 --> 00:35:30.230
and it's about attaching scripts.

00:35:30.240 --> 00:35:36.260
Now, if you have an application,
you'll see this, it's fairly common,

00:35:36.260 --> 00:35:41.550
that sometimes applications want
to host scripts written by users,

00:35:41.580 --> 00:35:45.510
and they want to make those scripts
available in like a script menu that

00:35:45.760 --> 00:35:51.180
the user then goes to and runs a script,
and the script does whatever

00:35:51.180 --> 00:35:54.570
the script wants to do,
and then might get some information

00:35:54.570 --> 00:35:57.710
from somebody else and bring it
back to the hosting application,

00:35:57.720 --> 00:36:00.940
or it might just target the hosting
application itself and make it

00:36:00.940 --> 00:36:02.540
do a bunch of whiz-bang things.

00:36:02.540 --> 00:36:08.590
But application can host
and execute scripts,

00:36:08.700 --> 00:36:11.490
and this is a common practice,
and it's been done for a while.

00:36:11.500 --> 00:36:16.710
Not only by presenting a menu,
but many applications have events

00:36:16.770 --> 00:36:19.720
that users can attach a script to.

00:36:19.720 --> 00:36:25.620
For example, in Mail,
you can create a mail rule,

00:36:25.620 --> 00:36:31.610
and this is an Apple script handler
for dealing with a mail rule.

00:36:31.660 --> 00:36:35.400
And when it gets executed,
it gets passed, you can see up there,

00:36:35.400 --> 00:36:40.630
it gets passed a list of the messages
that pertain to that particular

00:36:40.630 --> 00:36:43.670
rule or were approved by that rule,
and it passes them to the script,

00:36:43.780 --> 00:36:45.000
and they can do whatever they want.

00:36:45.060 --> 00:36:48.200
So that's part of the
standard mail application,

00:36:48.230 --> 00:36:51.690
is to be able to attach an
Apple script to a mail rule.

00:36:52.780 --> 00:36:58.190
Aperture also has attachability,
and it has an Aperture import action,

00:36:58.200 --> 00:36:59.570
and here's what it looks like.

00:36:59.660 --> 00:37:04.080
And this particular one,
it looks for if there are

00:37:04.080 --> 00:37:07.420
any movies on the import,
and then will make a duplicate

00:37:07.420 --> 00:37:10.240
of the movies to the movies
folder for you automatically,

00:37:10.240 --> 00:37:14.720
and then it will tweak the images based
upon some ISO speed ratings as well.

00:37:14.900 --> 00:37:19.780
But here's another example of how an
application can have an Apple script

00:37:19.780 --> 00:37:22.290
be attached to the application to use.

00:37:22.720 --> 00:37:26.220
And the new Messages
app also has handlers.

00:37:26.220 --> 00:37:31.220
It has numerous handlers for being
able to respond to particular events,

00:37:31.220 --> 00:37:34.590
like somebody shows up or you
get a message from someone.

00:37:34.950 --> 00:37:39.720
This one generates a random
automatic response to your friend,

00:37:39.720 --> 00:37:42.260
and if you're really clever,
you can keep them going for

00:37:42.260 --> 00:37:45.680
about 10 minutes before they
figure out it's not you.

00:37:47.160 --> 00:37:51.680
Now, the scripts that are attached
or presented in the script menu

00:37:51.680 --> 00:37:55.070
are usually executed by the
hosting application itself.

00:37:55.120 --> 00:37:59.420
The hosting application will load the
script and then execute it for the user.

00:37:59.440 --> 00:38:03.640
And therefore,
the restrictions on that script,

00:38:03.650 --> 00:38:10.370
it inherits the restrictions or the
permissions of the hosting application.

00:38:10.380 --> 00:38:14.060
So that means if I'm living
in this sandbox right here,

00:38:14.060 --> 00:38:16.140
how is this going to affect?

00:38:17.000 --> 00:38:22.460
Okay, so we have our little happy
application in the sandbox,

00:38:22.460 --> 00:38:26.130
and it has a script menu
and some user scripts.

00:38:26.240 --> 00:38:28.980
So the user selects something
from the script menu,

00:38:29.070 --> 00:38:31.840
and the application loads
that particular script.

00:38:31.890 --> 00:38:36.210
And then if that script targets
the hosting application itself,

00:38:36.360 --> 00:38:39.090
everything's fine,
because in your own sandbox,

00:38:39.090 --> 00:38:41.460
you're king of the world,
you can do whatever you like.

00:38:41.580 --> 00:38:44.620
And as long as the scripts are
targeting your application,

00:38:44.620 --> 00:38:46.180
you can just go like crazy.

00:38:46.450 --> 00:38:47.810
And they can do whatever you want.

00:38:47.900 --> 00:38:51.000
But let's look at a different scenario.

00:38:51.000 --> 00:38:54.670
So you have an attachable
application here,

00:38:54.670 --> 00:39:00.890
and the user's created a script that
wants to target another application.

00:39:00.960 --> 00:39:05.320
Well, we've seen in the prior section
when Chris was talking about,

00:39:05.320 --> 00:39:09.600
you can't send an Apple event to
another application by default.

00:39:09.640 --> 00:39:12.940
What you need to do is
have an entitlement.

00:39:12.940 --> 00:39:14.810
And then once you have an entitlement
for the target application,

00:39:14.810 --> 00:39:16.080
you can send it to another application.

00:39:16.130 --> 00:39:16.380
And then once you have an entitlement
for the target application,

00:39:16.380 --> 00:39:16.620
you can send it to another application.

00:39:16.620 --> 00:39:18.090
Then it runs fine.

00:39:18.160 --> 00:39:22.300
Well, this is all well and good,
but there's an issue that

00:39:22.300 --> 00:39:25.900
arises in that the application,
the hosting application,

00:39:26.000 --> 00:39:33.200
really doesn't have an idea of
who the user script is targeting.

00:39:33.200 --> 00:39:37.030
There might be dozens and
hundreds of apps on that computer,

00:39:37.030 --> 00:39:41.310
and the hosting application doesn't
have a way of knowing what every

00:39:41.310 --> 00:39:44.000
application's in those user scripts.

00:39:44.000 --> 00:39:46.080
Therefore, it can't get in.

00:39:46.120 --> 00:39:49.020
And so we're going to advance an
entitlement for every possible scenario,

00:39:49.020 --> 00:39:51.720
because then applications
would walk around,

00:39:51.720 --> 00:39:53.440
you know,
they'd be entitlement bound with

00:39:53.440 --> 00:39:55.110
like tons and tons of entitlements.

00:39:55.200 --> 00:39:58.900
And it's too complex, too wieldy.

00:39:58.920 --> 00:40:03.580
So the solution to this scenario
to keep providing the kind of

00:40:03.680 --> 00:40:08.840
functionality that you're used to,
that the customer is used to,

00:40:08.840 --> 00:40:12.460
and still make it
convenient as you have been,

00:40:12.460 --> 00:40:14.680
is to involve the user.

00:40:15.910 --> 00:40:20.490
And what it does is the user takes
the scripts and puts them in a

00:40:20.760 --> 00:40:26.490
sequestered folder that the system's
aware of called application scripts.

00:40:26.580 --> 00:40:29.570
And then the application,
when the user selects

00:40:29.580 --> 00:40:32.640
a script from the menu,
the application requests

00:40:32.640 --> 00:40:34.390
the system to execute it.

00:40:34.490 --> 00:40:38.360
And because, remember,
scripts written by you and executed by

00:40:38.490 --> 00:40:43.580
the system run without restrictions,
the script runs without restrictions.

00:40:43.600 --> 00:40:45.640
So even though you're still hosting,
you're still running.

00:40:45.800 --> 00:40:49.450
So even though you're still hosting
the menu and making it convenient,

00:40:49.450 --> 00:40:53.170
the code gets executed by the
system rather than the application.

00:40:53.180 --> 00:40:57.420
Now, there is a new directory
called application scripts,

00:40:57.490 --> 00:41:01.710
and there's a new class and
foundation called NS user script

00:41:01.710 --> 00:41:04.480
task that makes this all possible.

00:41:04.480 --> 00:41:07.050
And Chris,
why don't you tell us about it again?

00:41:07.060 --> 00:41:10.220
Semi-interesting?

00:41:14.080 --> 00:41:16.830
Okay, so NSUserScriptTask.

00:41:16.850 --> 00:41:20.500
So any application can
use NSUserScriptTask,

00:41:20.500 --> 00:41:23.090
and it's actually something that
we've kind of wanted for a while.

00:41:23.100 --> 00:41:27.010
It's a unified way to run user scripts.

00:41:27.270 --> 00:41:30.300
One of the nice things about it is
that it is a one-stop class that

00:41:30.300 --> 00:41:31.990
can handle any type of script.

00:41:32.070 --> 00:41:34.100
It handles AppleScripts,
it handles Automator workflows,

00:41:34.100 --> 00:41:35.330
it handles Unix scripts.

00:41:35.430 --> 00:41:38.630
You can call them all the same way.

00:41:38.720 --> 00:41:41.890
And for AppleScripts,
it runs them out of process now,

00:41:41.890 --> 00:41:43.730
which wasn't true with NSAppleScript.

00:41:43.780 --> 00:41:48.100
so you can avoid a bunch
of crazy threading issues.

00:41:48.320 --> 00:41:53.570
So, like I said, NSUserScriptTask,
you can use that for generic scripts.

00:41:53.640 --> 00:41:57.220
You don't get a lot of control
over exactly how you run it,

00:41:57.220 --> 00:41:57.800
though.

00:41:57.910 --> 00:42:00.840
For that, if you need that,
there are specific subclasses:

00:42:00.840 --> 00:42:04.890
NSUserAppleScriptTask,
NSUserAutomatorTask, and NSUserUnixTask.

00:42:05.040 --> 00:42:08.480
These all live in Foundation Framework.

00:42:09.720 --> 00:42:12.130
And like I said, you can start using this
in your application,

00:42:12.130 --> 00:42:15.740
whether you're sandboxed or not,
in Mountain Lion.

00:42:16.300 --> 00:42:18.490
So where NSU's script task
becomes really essential,

00:42:18.500 --> 00:42:21.950
though,
is if your application is sandboxed,

00:42:22.040 --> 00:42:26.180
because now the script runs
outside of the sandbox.

00:42:26.440 --> 00:42:31.610
And what makes this possible is to,
was to realize that

00:42:32.030 --> 00:42:33.820
Before the application was
running the script itself,

00:42:33.820 --> 00:42:36.260
but the script is not really
part of the application.

00:42:36.260 --> 00:42:38.730
The script is part of the user's stuff.

00:42:38.850 --> 00:42:42.280
So, can we somehow make it so
that the user designates that,

00:42:42.300 --> 00:42:47.300
"Hey, this is part of my stuff?" And the
answer is that the user puts it in this

00:42:47.410 --> 00:42:50.400
particular folder in application scripts.

00:42:50.500 --> 00:42:53.700
And the application
can create this folder,

00:42:53.700 --> 00:42:55.970
you can show it to the
user in the finder,

00:42:56.230 --> 00:42:58.710
but it cannot write to it.

00:42:58.870 --> 00:43:02.530
So this maintains the security.

00:43:02.540 --> 00:43:05.140
And the only way for a script
to show up in this folder is

00:43:05.140 --> 00:43:07.000
for the user to put it there.

00:43:07.130 --> 00:43:10.500
And this is sufficient
user intent to say,

00:43:10.500 --> 00:43:12.950
okay,
it is okay for us to run this script

00:43:12.950 --> 00:43:15.880
outside the sandbox with no restrictions.

00:43:17.040 --> 00:43:21.180
So there is a new constant
to let you find this folder.

00:43:21.180 --> 00:43:25.380
It goes with the NS file
manager URL for directory call,

00:43:25.380 --> 00:43:26.720
which I'll show in a moment.

00:43:26.720 --> 00:43:30.530
The actual location again is
twiddle library application

00:43:30.530 --> 00:43:35.170
scripts and then the code sign-in
identifier of your application.

00:43:35.570 --> 00:43:39.250
Once again, you can create this folder,
you can read from it,

00:43:39.260 --> 00:43:40.700
you can enumerate the contents, whatever.

00:43:40.700 --> 00:43:44.160
The substructure of the folder
is completely up to you,

00:43:44.330 --> 00:43:45.450
but you cannot write to it.

00:43:45.450 --> 00:43:48.400
And there is no entitlement
required for using this.

00:43:48.400 --> 00:43:53.290
It's just considered part of
the base application behavior.

00:43:55.170 --> 00:43:58.100
So let's start looking at
some code for how to use this.

00:43:58.180 --> 00:44:04.180
So this is the code to locate and
optionally create the scripts folder.

00:44:04.400 --> 00:44:08.000
Like I said, this is part of
NS File Manager URL for Directory.

00:44:08.250 --> 00:44:10.880
There's a new constant for it,
NS Application Scripts Directory.

00:44:11.110 --> 00:44:15.560
The only domain for which it
is defined is the user domain.

00:44:15.940 --> 00:44:18.160
And like I said, you can create it.

00:44:18.160 --> 00:44:18.900
You can ask to create it.

00:44:18.900 --> 00:44:21.240
You do have permission to do that.

00:44:21.330 --> 00:44:25.020
And from there,
you can use it to show to the user,

00:44:25.020 --> 00:44:28.210
build a pop-up of all
the scripts there are,

00:44:28.380 --> 00:44:29.480
whatever.

00:44:29.610 --> 00:44:32.240
So when it comes time to
actually run a script,

00:44:32.260 --> 00:44:34.040
This is what it looks like.

00:44:34.130 --> 00:44:36.440
So in this case,
we're just using a generic script,

00:44:36.510 --> 00:44:37.490
generic running.

00:44:37.620 --> 00:44:42.000
So we allocate a NSUser script task,
init with URL.

00:44:42.000 --> 00:44:45.710
If the script is, you know,
if your sandboxed script

00:44:45.710 --> 00:44:48.710
isn't in the scripts folder,
or if it isn't a format

00:44:48.710 --> 00:44:52.100
that's recognized,
you'll get nil and an error back.

00:44:53.490 --> 00:44:56.900
And you'll actually get a
concrete instance of one of those

00:44:56.940 --> 00:44:59.720
subclasses as the result from this.

00:44:59.830 --> 00:45:04.340
And to execute it, you simply call
executeWithCompletionHandler.

00:45:04.410 --> 00:45:06.910
When the completion block fires,
the script is done,

00:45:06.910 --> 00:45:11.460
and error will be nil if it worked,
or non-nil if it didn't.

00:45:11.580 --> 00:45:12.540
Do what you need to.

00:45:12.650 --> 00:45:15.090
If you simply want fire
and forget scripts,

00:45:15.220 --> 00:45:21.300
just pass nil as the completion handler,
and it'll take care of itself.

00:45:22.760 --> 00:45:29.530
So, as Sal mentioned,
a common use for trigger-based scripts

00:45:30.090 --> 00:45:34.770
is they will trigger based on some
event that happened in the application,

00:45:34.770 --> 00:45:39.100
like mail messages arrived,
a calendar event went off,

00:45:39.210 --> 00:45:41.250
you imported some pictures,
there were some new

00:45:41.270 --> 00:45:42.600
files added to a folder.

00:45:42.600 --> 00:45:46.040
And commonly for these handlers,
they will get past the things

00:45:46.130 --> 00:45:49.260
that caused the change,
the photos that got imported,

00:45:49.260 --> 00:45:50.890
the files that got added.

00:45:50.900 --> 00:45:57.030
So to do that, you would need to actually
pass those to the script.

00:45:58.810 --> 00:46:00.530
You'd be specifically running
an AppleScript script,

00:46:00.610 --> 00:46:04.080
and here's how to pass
extra information to it.

00:46:04.180 --> 00:46:06.330
So,
allocation looks almost exactly the same,

00:46:06.340 --> 00:46:10.540
except that we're allocating an
AppleScript task specifically.

00:46:10.650 --> 00:46:14.710
And then you build up an Apple event
that represents all the information

00:46:14.750 --> 00:46:16.880
that you want to pass to the script.

00:46:17.000 --> 00:46:19.660
If you're already doing
this using NSAppleScript,

00:46:19.750 --> 00:46:21.700
this is the exact same event
that you would build up and

00:46:21.770 --> 00:46:24.920
pass to execute with AppleEvent.

00:46:25.020 --> 00:46:26.760
And finally,
you actually call the script.

00:46:26.820 --> 00:46:29.260
Execute with AppleEventCompletionHandler.

00:46:29.340 --> 00:46:30.490
Again, almost the same.

00:46:30.680 --> 00:46:34.100
The one difference is that
the CompletionHandler not

00:46:34.100 --> 00:46:36.130
only gets the error back,
it also gets another

00:46:36.130 --> 00:46:38.540
NSAppleEventDescriptor,
which is the result

00:46:38.540 --> 00:46:41.190
of running the script,
if you want to use that.

00:46:41.360 --> 00:46:44.680
So, to sum up,
if you've got user scripts,

00:46:44.740 --> 00:46:46.040
use NSUserScriptTask.

00:46:46.200 --> 00:46:48.480
Works great whether
you're sandboxed or not.

00:46:48.540 --> 00:46:51.670
I should stress that it is for
user-supplied scripts only.

00:46:51.670 --> 00:46:53.820
Because of this "runs
outside the sandbox" thing,

00:46:53.820 --> 00:46:56.810
it would actually be inappropriate
to use it for scripts that are

00:46:56.810 --> 00:46:58.400
built into your application.

00:46:58.510 --> 00:47:01.960
So, NSUserScriptTask can
replace NSAppleScript,

00:47:02.040 --> 00:47:05.240
AMWorkflow,
and NSTask in your application,

00:47:05.330 --> 00:47:08.290
but don't just do a
blind find and replace.

00:47:08.360 --> 00:47:10.340
Only use it for user scripts.

00:47:10.440 --> 00:47:14.600
Use the specific subclasses if you
need particular control over exactly

00:47:14.600 --> 00:47:18.820
how you pass information to or get
information back from the scripts.

00:47:18.930 --> 00:47:21.810
And use the application scripts folder.

00:47:21.920 --> 00:47:22.720
Again, NSApplicationScriptTask.

00:47:22.720 --> 00:47:26.560
The NSApplicationScripts
directory for your scripts.

00:47:26.560 --> 00:47:31.900
The script must live in there if your
application is going to be sandboxed.

00:47:31.920 --> 00:47:32.580
And that's it.

00:47:32.750 --> 00:47:34.630
Back to Sal.

00:47:37.710 --> 00:47:41.490
Very cool.

00:47:41.630 --> 00:47:48.730
So, to summarize what we've done with
automation and with security.

00:47:48.930 --> 00:47:51.210
In Mountain Lion,
security is an important

00:47:51.210 --> 00:47:54.970
focus of the operating system,
and we know that automation

00:47:54.970 --> 00:48:00.390
remains essential to the OS and
the way that a Mac works.

00:48:00.860 --> 00:48:03.620
And what we've done is
we've combined the two,

00:48:03.770 --> 00:48:09.210
enabling abilities so that you
have automation with security.

00:48:09.430 --> 00:48:12.930
Now, for personal automation, again,
the scripts that you write

00:48:13.250 --> 00:48:17.370
using AppleScript Automator,
the Terminal, and Services,

00:48:17.590 --> 00:48:22.020
all of those run with no
changes and no restrictions.

00:48:22.240 --> 00:48:25.360
For when you distribute scripts,

00:48:25.800 --> 00:50:05.700
[Transcript missing]