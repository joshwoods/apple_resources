WEBVTT

00:00:10.560 --> 00:00:12.340
Welcome to Auto Layout by Example.

00:00:12.340 --> 00:00:13.400
My name is Kevin Cathey.

00:00:13.400 --> 00:00:15.060
I'm one of the interface
builder engineers.

00:00:15.110 --> 00:00:17.100
And here's what I want to do today.

00:00:17.100 --> 00:00:19.100
We've had two
Auto Layout sessions so far,

00:00:19.100 --> 00:00:19.400
right?

00:00:19.400 --> 00:00:21.860
We've had an introductory
session and we've had a

00:00:21.890 --> 00:00:23.760
mastering best practices session.

00:00:23.820 --> 00:00:26.060
And we've thrown a lot of content at you.

00:00:26.090 --> 00:00:29.300
And what I want to do in this session
is I want to take a lot of that content,

00:00:29.830 --> 00:00:32.150
bring it all together,
and answer the question,

00:00:32.150 --> 00:00:36.980
"How do I do that?" So we're going to
be looking at a lot of different demos,

00:00:36.980 --> 00:00:40.380
a lot of scenarios, and we're just going
to power through this.

00:00:40.400 --> 00:00:41.870
I have a lot of content to cover.

00:00:42.010 --> 00:00:43.100
I'm just going to warn you guys up front.

00:00:43.100 --> 00:00:44.600
We're going to be going fast.

00:00:44.640 --> 00:00:46.720
For those of you watching the videos,
no problem.

00:00:46.800 --> 00:00:47.470
Just hit pause.

00:00:47.660 --> 00:00:50.880
For those of you in the audience,
buckle up.

00:00:51.520 --> 00:00:53.500
Here's what we're going to talk about.

00:00:53.530 --> 00:00:55.510
We're going to talk about
transitioning to Auto Layout.

00:00:55.540 --> 00:00:58.380
We're going to be looking at converting
part of an application to use

00:00:58.390 --> 00:01:01.390
Auto Layout using some of the different
techniques that we talked about

00:01:01.390 --> 00:01:03.140
in the mastering Auto Layout session.

00:01:03.160 --> 00:01:06.030
Then we're going to move on
to talking about explicit

00:01:06.120 --> 00:01:07.940
widths in interface builder.

00:01:07.990 --> 00:01:10.640
How many of you guys had one of
those and wanted to get rid of it?

00:01:10.750 --> 00:01:12.930
We're going to talk about how to do that.

00:01:13.060 --> 00:01:17.260
Then we're going to look at localization
as our third topic and talk a little

00:01:17.260 --> 00:01:22.300
bit more about the new localization
workflow in iOS 6 and OS X Mountain Lion.

00:01:22.360 --> 00:01:28.480
Then we're going to move on to talk about
some new API in Mac OS X Mountain Lion,

00:01:28.590 --> 00:01:31.850
particularly with splitview and
how this new API is going to

00:01:31.850 --> 00:01:33.580
make your lives a lot easier.

00:01:33.880 --> 00:01:35.950
And then finally,
we're going to wrap it up and we're

00:01:35.950 --> 00:01:38.870
going to do a really quick breeze
through of some of the animation.

00:01:38.950 --> 00:01:39.830
But let's dive in.

00:01:40.070 --> 00:01:42.020
Let's talk about
transitioning to Auto Layout.

00:01:42.040 --> 00:01:43.020
Let's have some fun while we do that.

00:01:43.020 --> 00:01:43.950
All right.

00:01:44.010 --> 00:01:45.490
How about that?

00:01:45.550 --> 00:01:45.850
All right.

00:01:45.970 --> 00:01:48.020
So transitioning to Auto Layout.

00:01:48.140 --> 00:01:49.120
A couple different steps here.

00:01:49.120 --> 00:01:52.560
First, you want to plan your attack and
choose do I want a partial conversion,

00:01:52.560 --> 00:01:53.600
a full conversion?

00:01:53.630 --> 00:01:55.940
Let me encourage you,
if you guys can do a full conversion,

00:01:55.940 --> 00:01:57.760
you'll save your guys a lot of headaches.

00:01:57.810 --> 00:02:00.600
But it might not be possible to
convert your entire app all at once.

00:02:00.690 --> 00:02:02.530
That can be a huge cost
if you have a big app.

00:02:02.610 --> 00:02:05.490
So we're going to actually be doing
a partial conversion in the demo app

00:02:05.490 --> 00:02:07.280
that I'm going to be showing you today.

00:02:07.300 --> 00:02:11.240
Another technique you can do is
actually convert -- or rather to adopt

00:02:11.240 --> 00:02:14.020
Auto Layout as you add new -- UI.

00:02:14.020 --> 00:02:17.260
For example, maybe you have a new window,
a new popover, something like that.

00:02:17.290 --> 00:02:19.100
You can adopt it just in a new UI.

00:02:19.100 --> 00:02:21.800
That's a great way to
get started as well.

00:02:22.130 --> 00:02:25.000
So I'm going to go into a demo
and we're going to look at

00:02:25.050 --> 00:02:27.380
turning on Auto Layout and your
interface builder documents.

00:02:27.530 --> 00:02:29.500
We're going to look at the code,
we're going to test it,

00:02:29.600 --> 00:02:31.000
and we're going to see this all at work.

00:02:31.100 --> 00:02:33.130
So let's get started.

00:02:33.610 --> 00:02:35.940
All right,
so this app might look a little familiar.

00:02:35.940 --> 00:02:37.800
So we've been showing you
the SiteSeer application

00:02:37.810 --> 00:02:39.230
throughout the conference so far.

00:02:39.290 --> 00:02:41.740
The developer tools kick off,
the platforms kick off.

00:02:41.820 --> 00:02:43.100
We were showing you the iOS version.

00:02:43.100 --> 00:02:45.140
Now I also happen to
have an OS X version,

00:02:45.140 --> 00:02:48.980
and so we're going to be going back and
forth between the two versions today to

00:02:48.980 --> 00:02:51.090
look at some of this stuff in practice.

00:02:51.140 --> 00:02:53.570
So if I look at my application,
really simple.

00:02:53.570 --> 00:02:54.890
I have some landmarks.

00:02:54.980 --> 00:02:57.650
I can add those to an itinerary.

00:02:57.750 --> 00:02:59.670
So very simple application.

00:02:59.820 --> 00:03:02.890
And this little piece right here,
this detail area here,

00:03:02.890 --> 00:03:04.540
is not yet using Auto Layout.

00:03:04.680 --> 00:03:06.300
And you can tell.

00:03:06.420 --> 00:03:09.980
Because as I resize things around,
you can see it's not really

00:03:09.980 --> 00:03:11.100
doing exactly what I want.

00:03:11.100 --> 00:03:12.570
I can get this guy really small.

00:03:12.590 --> 00:03:14.150
There's some clipping up at the top.

00:03:14.420 --> 00:03:16.560
And, yeah,
I could write some code to fix this,

00:03:16.730 --> 00:03:18.910
but we're going to turn on
Auto Layout and just let

00:03:18.950 --> 00:03:20.080
Auto Layout do it for us.

00:03:20.430 --> 00:03:22.540
So let's just dive in and do that.

00:03:22.570 --> 00:03:25.120
All right,
so here's my interface in Xcode.

00:03:25.220 --> 00:03:28.640
And, again, step one is to go into all
your interface documents,

00:03:28.710 --> 00:03:32.860
your storyboards, your ZIP files,
and to check the box to use Auto Layout.

00:03:32.990 --> 00:03:37.740
So I'm going to open the utilities area,
go to the file inspector.

00:03:37.780 --> 00:03:40.530
And here in the interface
builder document slice,

00:03:40.600 --> 00:03:43.440
I'm just going to check
the box to use Auto Layout.

00:03:43.460 --> 00:03:47.280
And that's going to pick a set of default
constraints right out of the gate for us.

00:03:47.460 --> 00:03:50.740
And we can preview this by
just resizing the window.

00:03:50.780 --> 00:03:54.120
And you can see, okay,
it's doing something reasonable here.

00:03:54.270 --> 00:03:55.940
It's, you know,
growing on exactly how we want.

00:03:55.940 --> 00:03:57.490
And look at those labels
in the bottom left.

00:03:57.590 --> 00:03:59.050
Eh,
that's not exactly what we want either.

00:03:59.300 --> 00:04:02.240
So let's go ahead and modify
this to do what we want.

00:04:02.370 --> 00:04:06.100
The first thing I want to do is
add some expression to my UI.

00:04:06.130 --> 00:04:09.840
I want all these four views to
kind of grow proportionally both

00:04:09.840 --> 00:04:11.830
vertically and horizontally.

00:04:11.960 --> 00:04:14.010
Now, this was really hard
with springs and struts.

00:04:14.070 --> 00:04:16.170
I had to write a lot of
manual layout code to do this.

00:04:16.350 --> 00:04:18.550
With Auto Layout, it's a breeze.

00:04:18.790 --> 00:04:21.000
So I'm just going to
select these two views.

00:04:21.030 --> 00:04:23.950
And using the add
constraint menu down here,

00:04:23.950 --> 00:04:26.700
I'm going to pin these widths equally.

00:04:26.740 --> 00:04:28.990
And I'm going to do a similar
thing with the heights.

00:04:29.020 --> 00:04:32.710
So I can just use this add constraint
menu down here in the bottom to

00:04:32.710 --> 00:04:34.730
pin these guys proportionally.

00:04:34.780 --> 00:04:38.890
And now when I resize my window, hmm,
still not doing quite what we want,

00:04:38.890 --> 00:04:39.500
right?

00:04:39.570 --> 00:04:41.960
This separator image here,
we kind of want to stick to the top,

00:04:42.020 --> 00:04:46.040
and we don't want the image view
in these views to stay fixed.

00:04:46.080 --> 00:04:49.010
If you look here,
I have an explicit height constraint.

00:04:49.090 --> 00:04:51.480
I'm going to be talking more about
how to get rid of these later.

00:04:51.480 --> 00:04:54.250
But what I'm going to do in this case,
I'm going to undo that

00:04:54.250 --> 00:04:55.430
change first of all.

00:04:55.520 --> 00:04:58.780
I'm going to select this separator.

00:04:58.780 --> 00:04:58.780
I'm going to add a new one.

00:04:58.810 --> 00:05:00.820
I'm going to add a top
spacing constraint.

00:05:00.910 --> 00:05:03.190
When you're adding
constraints with this menu,

00:05:03.280 --> 00:05:05.310
most of the time,
with the exception of these

00:05:05.310 --> 00:05:08.300
two constraints in the bottom,
it's going to take an existing

00:05:08.320 --> 00:05:11.960
relationship in the canvas and
freeze it into a constraint.

00:05:12.920 --> 00:05:14.690
Now on top of that,
what it's going to do is it's

00:05:14.690 --> 00:05:18.440
not going to remove any other
constraints in your document.

00:05:18.530 --> 00:05:21.820
So if we look back at this image view,
this explicit height is still here,

00:05:21.840 --> 00:05:25.460
but now it's a user constraint,
something that I can interact

00:05:25.460 --> 00:05:26.900
with and I can delete.

00:05:26.900 --> 00:05:29.340
And now when I resize my window,

00:05:29.500 --> 00:05:44.200
[Transcript missing]

00:05:44.500 --> 00:05:48.700
Let's select these guys and let's add
some vertical spacing constraints.

00:05:48.700 --> 00:05:51.200
Now you might be asking,
or you might not be asking,

00:05:51.200 --> 00:05:54.120
maybe you should,
is why would I be wanting to add all

00:05:54.120 --> 00:05:58.240
these vertical spacing constraints
or constraints between views?

00:05:58.240 --> 00:06:01.480
So this again is one of the powerful
features of Auto Layout is that you

00:06:01.550 --> 00:06:03.740
can have constraints between siblings.

00:06:03.750 --> 00:06:07.860
What's great about this is that as
the content of these siblings changes,

00:06:08.000 --> 00:06:10.780
if they're bound to each
other through constraints,

00:06:10.780 --> 00:06:14.200
then that way,
as the content of these views changes,

00:06:14.320 --> 00:06:17.800
things won't overlap or clip
and that can be really great

00:06:17.800 --> 00:06:19.380
and exactly what you want.

00:06:19.380 --> 00:06:22.470
Okay, I'm going to do one thing special
with this bottom constraint here.

00:06:22.470 --> 00:06:25.380
I'm going to show you another really
cool expressive feature of Auto Layout,

00:06:25.430 --> 00:06:27.050
which I'm sure you
guys have already seen,

00:06:27.050 --> 00:06:28.260
and that's inequalities.

00:06:28.260 --> 00:06:31.630
So instead of saying I'm going to
make this constraint be 21 points,

00:06:31.630 --> 00:06:35.120
for example,
I want to make this an inequality and

00:06:35.120 --> 00:06:40.010
say make it be no more than -- sorry,
no less than 21 points

00:06:40.010 --> 00:06:40.900
or some amount of space.

00:06:40.960 --> 00:06:44.750
So if I select the constraint and
go into the attributes inspector,

00:06:44.790 --> 00:06:48.240
I can change the relation here from
equal to greater than or equal,

00:06:48.240 --> 00:06:51.310
and I'm also going to check
the standard check box.

00:06:51.310 --> 00:06:56.020
The system, both UI kit and app kit,
have divinely defined a set of spacings

00:06:56.050 --> 00:06:59.990
between different combinations of views,
so I want the system to determine

00:07:00.270 --> 00:07:03.610
what that spacing should be,
so I'm going to check that check box.

00:07:03.620 --> 00:07:08.300
And now when we run our application,
we're

00:07:08.710 --> 00:07:10.550
You can see this is looking
a lot more reasonable.

00:07:10.670 --> 00:07:14.840
Things are proportionally growing,
and things are looking really great.

00:07:14.960 --> 00:07:16.610
So, so far we've gone in
the interface builder,

00:07:16.680 --> 00:07:19.910
we've checked the box,
we've adjusted some constraints,

00:07:20.160 --> 00:07:22.560
but we're not quite done, right?

00:07:22.560 --> 00:07:25.520
When I click my add to itinerary button,
it's not doing the right thing anymore.

00:07:25.590 --> 00:07:29.110
And this is because we've got
to go into code and change it.

00:07:29.200 --> 00:07:30.140
So here's what we're going to do.

00:07:30.140 --> 00:07:33.680
We have this box in my document
that's going to be our add to

00:07:33.770 --> 00:07:38.420
itinerary box for what day I want to
add this landmark to my itinerary.

00:07:38.520 --> 00:07:41.900
If we look at the constraints for this,
we just got a bunch of

00:07:41.900 --> 00:07:44.360
spacings to the top,
and what I want to do is I'm

00:07:44.360 --> 00:07:46.280
going to add a bottom spacing.

00:07:46.350 --> 00:07:47.470
Here's why.

00:07:47.530 --> 00:07:52.380
What I want is I want this view to
be able to fully specify its height.

00:07:52.420 --> 00:07:55.330
Without this bottom constraint,
I could grab the bottom of this box

00:07:55.530 --> 00:07:57.690
and resize it up over that content.

00:07:57.830 --> 00:07:59.680
But by putting a bottom
spacing constraint here,

00:07:59.680 --> 00:08:04.140
this means that there's at least
some size information that we have.

00:08:04.160 --> 00:08:06.380
That way I don't have to
put an explicit width,

00:08:06.410 --> 00:08:09.620
or rather explicit height on the
view to be able to define this.

00:08:09.620 --> 00:08:12.720
So what we're going to do is we're
going to go and do a little bit of code.

00:08:12.870 --> 00:08:15.620
And what we're going to do is we're
going to do a little bit of code in code,

00:08:15.620 --> 00:08:17.840
which would mean that if
the box changed over time,

00:08:17.940 --> 00:08:19.130
it wouldn't grow.

00:08:19.220 --> 00:08:22.780
So that's why I'm going to define
this all right here in the box.

00:08:22.780 --> 00:08:24.390
Okay,
so what we're going to do in code is

00:08:24.390 --> 00:08:29.280
we're going to take this box here,
and we're going to insert it in between

00:08:29.280 --> 00:08:31.580
this label and this top separator.

00:08:31.580 --> 00:08:33.520
Again, just a really simple sentence.

00:08:33.520 --> 00:08:36.120
We're going to insert
this in between two views.

00:08:36.120 --> 00:08:38.110
So let's go look at the
code of how we did that.

00:08:38.220 --> 00:08:41.460
Jump bar is a really, really great way to
navigate around in Xcode.

00:08:41.460 --> 00:08:43.290
I found it to be very quick.

00:08:43.390 --> 00:08:45.830
I'm going to show you
something else of the jump bar,

00:08:45.830 --> 00:08:46.420
too.

00:08:46.490 --> 00:08:48.250
In this talk,
I'm going to be inner sprinkling both

00:08:48.720 --> 00:08:53.660
Auto Layout and then also little tidbits
and power tips for you Xcode users.

00:08:53.810 --> 00:08:57.060
If I have a jump bar open right here,
I can just start typing,

00:08:57.120 --> 00:08:59.120
and the jump bar will
automatically start filtering.

00:08:59.220 --> 00:09:02.390
So I know I have a method in
here somewhere that's something

00:09:02.390 --> 00:09:04.630
like open box of some kind.

00:09:04.930 --> 00:09:07.960
And so by just typing with the menu open,
it'll automatically filter for me.

00:09:07.960 --> 00:09:12.630
and I can jump right to the
method that I'm looking for.

00:09:13.200 --> 00:09:13.740
All right.

00:09:13.740 --> 00:09:16.050
So looking at this code,
what do we got here?

00:09:16.250 --> 00:09:19.020
Well, it's really hard to look at this
code and see what's going on.

00:09:19.130 --> 00:09:22.140
We're just basically getting a frame,
we're adjusting a bunch of other frames,

00:09:22.190 --> 00:09:24.920
we're adding some deltas for some
views and doing a bunch of resizing.

00:09:25.150 --> 00:09:28.190
This code is really hard to read,
hard to understand, and hard to maintain.

00:09:28.200 --> 00:09:32.170
And what's great about
Auto Layout is I can just delete it.

00:09:37.070 --> 00:09:40.200
And replace it with some more code.

00:09:40.200 --> 00:09:41.380
So let's talk about that.

00:09:41.380 --> 00:09:44.790
So the first thing I'm going to
do is I'm just going to add just

00:09:44.890 --> 00:09:49.690
define some variables that we can
quickly reference as we go on.

00:09:50.070 --> 00:09:50.400
Okay.

00:09:50.420 --> 00:09:52.170
The first obvious thing,
we're going to add our

00:09:52.170 --> 00:09:53.650
box to our container view,
right?

00:09:53.660 --> 00:09:55.020
So it's actually in there.

00:09:55.020 --> 00:09:57.740
And then the second thing,
once we have our container

00:09:57.740 --> 00:10:00.070
view actually in there,
we want to add some

00:10:00.070 --> 00:10:01.540
positioning constraints,
right,

00:10:01.540 --> 00:10:03.160
so that it goes in the right place.

00:10:03.190 --> 00:10:05.500
Now look at how the visual
format has helped us.

00:10:05.510 --> 00:10:08.850
So in the horizontal direction,
what I'm saying is be the, you know,

00:10:08.860 --> 00:10:12.700
Aqua space, be the box, Aqua space,
edge of the super view.

00:10:12.740 --> 00:10:15.250
But remember,
I specifically repeated the statement

00:10:15.330 --> 00:10:16.870
about the vertical dimension.

00:10:17.010 --> 00:10:21.420
I said we want to insert our box in
between the title and the separator.

00:10:21.570 --> 00:10:23.220
And that's exactly what
the code looks like.

00:10:23.310 --> 00:10:23.860
There's no math.

00:10:24.000 --> 00:10:26.580
There's no -- it's just
exactly what I said in English.

00:10:26.750 --> 00:10:29.770
So it's really,
really easy to see exactly

00:10:29.770 --> 00:10:31.270
what's going on here.

00:10:31.630 --> 00:10:32.220
All right.

00:10:32.220 --> 00:10:35.090
And now when we close
our add to itinerary box.

00:10:35.140 --> 00:10:35.570
Again,
we're going to add a little bit of space.

00:10:35.570 --> 00:10:38.650
Again, I had to undo all the work that
I was doing in the other method.

00:10:38.650 --> 00:10:41.600
And this is just -- let's
just get rid of this.

00:10:41.600 --> 00:10:44.470
And I can replace it
with one line of code.

00:10:44.470 --> 00:10:45.240
Remove.

00:10:45.240 --> 00:10:49.000
And that will automatically remove all
the constraints that I had and get that

00:10:49.080 --> 00:10:52.920
box out of there and restore the layout.

00:10:52.990 --> 00:10:56.610
So now when we run our application,
we're going

00:10:58.160 --> 00:11:01.950
I'm going to click this and, ooh,
still doesn't do quite the right thing.

00:11:02.140 --> 00:11:04.060
What's going on here?

00:11:04.180 --> 00:11:07.270
So if you look in the console,
you can see that we have one of those

00:11:07.270 --> 00:11:10.390
log messages that we've been talking
about in the different sessions.

00:11:10.400 --> 00:11:13.760
So let's put on our debugging hat
and let's apply some of the things

00:11:13.760 --> 00:11:16.240
that we were talking about in the
mastering on a layout session.

00:11:16.360 --> 00:11:20.480
So this is a log message about unable
to simultaneously satisfy constraints.

00:11:20.600 --> 00:11:23.550
So we have a bunch of constraints in
the window that can't all be satisfied.

00:11:23.860 --> 00:11:24.490
Which ones?

00:11:24.650 --> 00:11:26.640
The list right here.

00:11:26.900 --> 00:11:30.950
So the very first one that I see here is
an auto resizing mask layout constraint.

00:11:30.970 --> 00:11:33.200
So let's rewind to some
of the previous sessions.

00:11:33.330 --> 00:11:37.460
And as a part of compatibility,
what Auto Layout will do by default

00:11:37.460 --> 00:11:41.470
is that it will add constraints
that mimic the auto resizing mask.

00:11:41.490 --> 00:11:43.820
Now,
one of the things we need to do is turn

00:11:43.820 --> 00:11:47.130
off that feature so that if we're using
our own constraints for positioning,

00:11:47.130 --> 00:11:50.560
they don't conflict with these
auto resizing mask constraints.

00:11:50.570 --> 00:11:54.750
So it looks like I've forgotten
to set no for the translates auto

00:11:54.750 --> 00:11:58.100
resizing mask into constraints
property on one of my views,

00:11:58.110 --> 00:12:00.970
in particular on my box.

00:12:01.720 --> 00:12:04.790
So looking in the code,
I can do it in one of two places.

00:12:05.150 --> 00:12:06.700
I can set it right here in the code.

00:12:06.730 --> 00:12:09.200
I can also do it in Interface Builder.

00:12:09.290 --> 00:12:14.440
So if I go back to the zip
file here and I select my box,

00:12:14.470 --> 00:12:17.340
open the Utilities and go
to the Attributes Inspector,

00:12:17.470 --> 00:12:21.500
there's a checkbox right here called
Translates Mask into Constraints.

00:12:21.500 --> 00:12:23.230
And this is, again,
that value of Translates

00:12:23.230 --> 00:12:24.810
Autoprocessing Mask into Constraints.

00:12:24.960 --> 00:12:28.470
It's set by default to yes
for all top-level views.

00:12:28.660 --> 00:12:33.400
But in this case, I want it to be no,
so I can just uncheck it here.

00:12:34.520 --> 00:12:38.070
When you would set it in code would be
if you wanted to program defensively.

00:12:38.140 --> 00:12:40.590
For example, you had some API that took
a view from somewhere you

00:12:40.590 --> 00:12:42.000
didn't know where it came from.

00:12:42.010 --> 00:12:44.720
And so if you know you
want it to be set to no,

00:12:44.720 --> 00:12:46.270
then just set it to no.

00:12:46.290 --> 00:12:46.900
And that's what we're going to do.

00:12:46.900 --> 00:12:49.660
We're going to do both
just to show you both here.

00:12:49.900 --> 00:12:52.100
Okay, so now when I run,
we should be set, right?

00:12:52.190 --> 00:12:54.120
I'm not forgetting anything.

00:12:54.120 --> 00:12:55.040
Of course, this is a demo.

00:12:55.040 --> 00:12:56.150
I would never forget anything.

00:12:56.330 --> 00:12:58.300
Oh,
but it's still not doing the right thing.

00:12:58.380 --> 00:12:59.510
So what's going on this time?

00:12:59.680 --> 00:13:02.340
Let's go back and look
at the log message here.

00:13:02.400 --> 00:13:06.070
Once again, we have an unable to
simultaneously satisfy constraints.

00:13:06.270 --> 00:13:07.570
What's going on this time?

00:13:07.690 --> 00:13:11.170
Let's take a look at this list of
constraints and see if we can get some

00:13:11.290 --> 00:13:13.350
clues of what might be going on here.

00:13:13.710 --> 00:13:17.440
Okay, so we said be some spacing
between the box and the separator.

00:13:17.440 --> 00:13:20.350
Yep, I remember adding that constraint
with that visual format.

00:13:20.490 --> 00:13:21.000
Same with this one.

00:13:21.000 --> 00:13:23.080
I said make the box be
flush with that label.

00:13:23.260 --> 00:13:24.260
Yep, that looks good.

00:13:24.450 --> 00:13:27.820
And, huh, I don't ever remember
creating this constraint.

00:13:28.140 --> 00:13:32.100
So have that separator image view
be 58 from the top of the view?

00:13:32.170 --> 00:13:33.400
I don't remember.

00:13:33.400 --> 00:13:38.360
Maybe I have a really short-term memory,
but I don't remember adding that.

00:13:38.360 --> 00:13:43.100
So how might we find when that constraint
was created and added to the window?

00:13:43.520 --> 00:13:45.750
There's a really useful performance
tool that you guys might

00:13:45.800 --> 00:13:47.000
have used called Instruments.

00:13:47.150 --> 00:13:49.500
Might have used it to do
for CPU or for memory.

00:13:49.590 --> 00:13:52.560
It also includes a template
for debugging Auto Layout.

00:13:52.770 --> 00:13:55.480
And you can see exactly when
different Auto Layout things

00:13:55.480 --> 00:13:57.130
happen inside of your window.

00:13:57.300 --> 00:14:00.100
So we're going to use
that to help us out here.

00:14:00.570 --> 00:14:02.460
I'm going to go to profile here.

00:14:02.460 --> 00:14:05.260
What this is going to do
is launch instruments.

00:14:05.290 --> 00:14:08.000
I can choose the Cocoa layout template.

00:14:08.020 --> 00:14:09.340
We're going to go ahead and profile.

00:14:09.380 --> 00:14:12.910
Now it's going to launch
our application again.

00:14:13.440 --> 00:14:15.530
And we can just go ahead
and reproduce the problem.

00:14:15.600 --> 00:14:17.110
So, yup, there's our problem.

00:14:17.290 --> 00:14:18.640
Let's go back to instruments.

00:14:18.650 --> 00:14:20.890
And if you look at instruments,
we can see a trace of all the

00:14:20.960 --> 00:14:24.250
Auto Layout activities happening
inside of the application,

00:14:24.300 --> 00:14:27.180
this spike in particular was
where we reproduce our problem.

00:14:27.180 --> 00:14:29.800
So I have all the data I need,
let's stop and take a look

00:14:30.000 --> 00:14:31.470
at what's going on here.

00:14:31.470 --> 00:14:34.550
So with this view,
I can see all the constraints that

00:14:34.550 --> 00:14:36.420
were ever added to our windows.

00:14:36.420 --> 00:14:39.180
And I can see their constants,
and I can see what it

00:14:39.180 --> 00:14:41.740
was that was created,
added, it was removed from the window.

00:14:42.000 --> 00:14:44.560
I can see who created it, very,
very useful data.

00:14:44.760 --> 00:14:47.570
So let's use this to figure out
where that constraint came from.

00:14:47.580 --> 00:14:50.420
So I'm going to switch to the console,
and that will show me exactly

00:14:50.510 --> 00:14:51.760
the output from Xcode.

00:14:51.840 --> 00:14:54.500
And we can see there's
our log message again,

00:14:54.500 --> 00:14:56.610
unable to simultaneously
satisfy constraints.

00:14:56.680 --> 00:15:00.030
And if I look through this list, yup,
I remember where that one came from,

00:15:00.030 --> 00:15:03.510
I remember where that one came from,
but this is the constraint that we're

00:15:03.510 --> 00:15:06.280
not quite sure where it came from.

00:15:06.280 --> 00:15:09.530
So I'm going to copy the memory
address here just because

00:15:09.610 --> 00:15:10.440
the constraint is unique.

00:15:10.480 --> 00:15:10.480
And I'm going to go back
to the memory address.

00:15:10.510 --> 00:15:11.470
And I'm going to go back
to the memory address.

00:15:11.480 --> 00:15:12.480
And I'm going to go
back to the event list.

00:15:12.480 --> 00:15:15.450
And I'm going to filter the
event list based upon this memory

00:15:15.450 --> 00:15:17.100
address for this constraint.

00:15:17.100 --> 00:15:19.720
And you can see that I get two hits,
two events.

00:15:19.720 --> 00:15:23.050
One was created and one it
was added to the window.

00:15:23.060 --> 00:15:26.300
So now we can see exactly where
this constraint came from.

00:15:26.310 --> 00:15:28.810
To do that,
I'm going to open the extended detail

00:15:28.810 --> 00:15:30.680
and make it a little bigger here.

00:15:30.680 --> 00:15:36.060
And we can see a stack trace of exactly
who created this constraint and when.

00:15:36.060 --> 00:15:40.080
So if we look through this stack trace,
you can see there's a call to NSNib

00:15:40.190 --> 00:15:41.830
instantiate the view controller.

00:15:41.830 --> 00:15:43.100
Okay, there's a pretty big clue.

00:15:43.140 --> 00:15:44.120
And load view.

00:15:44.120 --> 00:15:47.540
So it looks like this constraint
is coming from loading the

00:15:47.550 --> 00:15:50.610
interface with the document
for one of our view controllers.

00:15:50.740 --> 00:15:52.030
Which view controller?

00:15:52.030 --> 00:15:55.670
Well, I can just double click on here
and get the code right here in

00:15:55.690 --> 00:15:59.700
instruments and see the call
that loaded this view controller.

00:16:00.160 --> 00:16:03.660
Then I can click here and jump right back
to Xcode and jump to the implementation

00:16:03.660 --> 00:16:05.200
file that we were just looking at.

00:16:05.280 --> 00:16:07.880
So this is the detailed view controller
that we were just working with,

00:16:07.910 --> 00:16:11.000
and now I can see that the Nib
document for this view controller

00:16:11.000 --> 00:16:13.840
has that constraint that was added.

00:16:13.910 --> 00:16:16.740
So let's go figure out where
that is in our document.

00:16:16.860 --> 00:16:18.480
So let's go ahead and open it up here.

00:16:18.790 --> 00:16:24.900
And I don't remember which view is the
view that is the top separator anymore.

00:16:25.020 --> 00:16:28.510
So I'm going to use the
outline view and filter for it.

00:16:30.120 --> 00:16:32.210
Top separator.

00:16:32.280 --> 00:16:33.600
And sure enough, there's our image view.

00:16:33.600 --> 00:16:36.360
And if I select it,
it opens up in the canvas.

00:16:36.400 --> 00:16:38.910
Now I'm going to look for -- I'm going
to go hunting for that constraint

00:16:38.970 --> 00:16:42.280
that was the constraint that we
don't know where it came from.

00:16:42.470 --> 00:16:45.740
And so I could click on every one
of these constraints or I could

00:16:45.740 --> 00:16:48.250
use a new feature with Xcode 4.4.

00:16:48.290 --> 00:16:50.750
If I have a view selected,
I can go in the size inspector

00:16:50.870 --> 00:16:53.630
and see all the constraints
that involve that view.

00:16:53.630 --> 00:16:56.000
So now I can see --
I can scroll over these.

00:16:56.040 --> 00:16:57.810
You can see they highlight in the UI.

00:16:57.810 --> 00:17:01.140
And there's the constraint that
was causing me difficulties,

00:17:01.140 --> 00:17:02.020
the 58.

00:17:02.020 --> 00:17:03.730
And so what do we want to do?

00:17:03.860 --> 00:17:05.990
Now that we've identified
what the constraint is,

00:17:05.990 --> 00:17:08.220
and I remember, yes,
I added that because I wanted

00:17:08.300 --> 00:17:09.590
it to be pinned at the top.

00:17:09.590 --> 00:17:11.250
And generally speaking, I do.

00:17:11.380 --> 00:17:14.630
But when we add this box,
I want the image view to come down,

00:17:14.630 --> 00:17:15.240
right?

00:17:15.240 --> 00:17:19.700
And I want that box to slide in
between the title and the image view.

00:17:19.700 --> 00:17:22.380
So what I'm going to do is I'm going
to add an outlet to this constraint.

00:17:22.580 --> 00:17:25.620
And we're going to remove it in code
temporarily while that box is there.

00:17:25.880 --> 00:17:29.220
And then we're going to add it
back after the box goes away.

00:17:29.220 --> 00:17:32.720
So to do that,
I'm going to open up the assistant here.

00:17:32.720 --> 00:17:34.570
So this is the code
for my view controller.

00:17:34.570 --> 00:17:36.580
And I'm going to switch
to the implementation.

00:17:36.670 --> 00:17:37.580
Scroll to the top.

00:17:37.580 --> 00:17:41.640
And you can see in a class extension in
my implementation I have all my outlets.

00:17:41.710 --> 00:17:45.200
This is to make sure that I'm
not vending these outlets to as

00:17:45.380 --> 00:17:48.140
public API for my view controller.

00:17:48.140 --> 00:17:51.780
And now I can just control
drag right from the constraint,

00:17:51.780 --> 00:17:53.130
write in the code.

00:17:53.660 --> 00:17:57.460
I'm going to give it a name,
like Separator to Label Constraint,

00:17:57.590 --> 00:17:58.780
and make my outlet.

00:17:58.910 --> 00:17:59.480
Great.

00:17:59.680 --> 00:18:02.200
So now we can refer to this
constraint in our code.

00:18:02.260 --> 00:18:05.750
Let's go back to the method
that we were looking at before.

00:18:06.120 --> 00:18:11.760
And the first thing we want to do is
when we are opening our itinerary box,

00:18:11.850 --> 00:18:13.850
we want to remove it so that
it doesn't conflict with the

00:18:13.940 --> 00:18:15.300
constraints that we're adding.

00:18:15.380 --> 00:18:19.510
So to do that, I'm just going to simply
call container view,

00:18:19.730 --> 00:18:22.830
remove that constraint
that we made an outlet to.

00:18:22.920 --> 00:18:25.050
Then when we close the box,
we want to restore that

00:18:25.050 --> 00:18:29.030
because we want to restore the
UI back to its original state.

00:18:29.170 --> 00:18:31.910
So I can just do this down in the close.

00:18:32.160 --> 00:18:34.460
is the founder of the "button and text
field" method here that's going to

00:18:34.460 --> 00:18:35.600
close the box on an add or a cancel.

00:18:35.620 --> 00:18:38.300
And we're just going to add
that constraint right back

00:18:38.360 --> 00:18:40.560
exactly how it was before.

00:18:40.900 --> 00:18:43.870
And now, when I run my application,

00:18:47.250 --> 00:18:47.790
Boom.

00:18:47.790 --> 00:18:48.810
There it is.

00:18:48.930 --> 00:18:53.260
Using Auto Layout, no more frames,
exactly as I laid it out in code,

00:18:53.260 --> 00:18:54.600
and it goes away perfect.

00:18:54.710 --> 00:18:59.000
So now our detail view controller and
our entire app is using Auto Layout.

00:18:59.040 --> 00:19:00.510
We're good to go.

00:19:00.640 --> 00:19:00.870
Okay.

00:19:01.000 --> 00:19:03.390
So let's recap what we just saw.

00:19:05.380 --> 00:19:06.580
So again, we planned our attack.

00:19:06.650 --> 00:19:09.960
We chose a partial approach to convert
that last view controller to Auto Layout.

00:19:10.120 --> 00:19:12.500
We went in, we enabled it in our
interface with a document,

00:19:12.610 --> 00:19:15.290
we went through the constraints
in the document and adjusted

00:19:15.660 --> 00:19:18.220
them to what we wanted,
added a few more.

00:19:18.360 --> 00:19:21.500
Then we went into code,
we removed all of the set frame calls and

00:19:21.610 --> 00:19:25.520
then we sanitized all the add sub view
remove super view calls to make sure that

00:19:25.600 --> 00:19:28.640
they were consistent with Auto Layout and
they worked with our interface.

00:19:28.760 --> 00:19:31.380
And then we tested it,
we ran it a few times and now

00:19:31.380 --> 00:19:33.640
our app is looking pretty good.

00:19:33.720 --> 00:19:38.270
A few best practices that we used when
we were doing this is first of all,

00:19:38.270 --> 00:19:40.680
we want to avoid explicit widths.

00:19:40.720 --> 00:19:43.590
I'm going to talk about this more,
so we're just going to skip over it.

00:19:43.700 --> 00:19:45.360
Secondly,
we added those spacing constraints.

00:19:45.440 --> 00:19:48.490
If you remember with those labels,
we added those spacing constraints so

00:19:48.500 --> 00:19:52.070
that as the views would change size,
they would automatically would

00:19:52.070 --> 00:19:53.980
grow relative to each other.

00:19:54.050 --> 00:19:56.400
The other thing we did is we added
some more expressive constraints,

00:19:56.420 --> 00:19:59.190
some inequalities and some things
that weren't possible with springs

00:19:59.190 --> 00:20:03.470
and struts or at least really hard
and required manual layout code.

00:20:04.100 --> 00:20:06.960
All right, so that's just a brief look at
transitioning to Auto Layout.

00:20:07.080 --> 00:20:09.840
Let's talk now about explicit widths.

00:20:09.910 --> 00:20:12.880
What do I mean by explicit widths?

00:20:13.080 --> 00:20:16.790
Well, if I have an interface,
like the one on the screen,

00:20:16.910 --> 00:20:18.630
That's what I mean by an explicit width.

00:20:18.830 --> 00:20:22.870
It's a constraint that says
this view must be this size.

00:20:23.400 --> 00:20:25.530
But why would this be a problem?

00:20:25.630 --> 00:20:29.050
Generally speaking,
you want to avoid explicit widths on your

00:20:29.050 --> 00:20:33.130
controls because with an explicit width,
it doesn't allow the control to

00:20:33.190 --> 00:20:35.440
change size as the content changes.

00:20:35.530 --> 00:20:38.130
We had talked about how with Auto Layout,
things will automatically grow

00:20:38.130 --> 00:20:40.960
and shrink based upon content,
and when you add an explicit width,

00:20:41.080 --> 00:20:42.000
it can't do that.

00:20:42.120 --> 00:20:45.970
This can cause issues with localization
or dynamic content where things

00:20:45.970 --> 00:20:48.780
can start clipping unexpectedly,
and that's definitely not the experience

00:20:48.840 --> 00:20:51.160
that you guys want to give your users.

00:20:51.740 --> 00:20:54.380
There are a few exceptions, of course,
I want to point out.

00:20:54.540 --> 00:20:58.060
These are applied to both iOS
and AppKit exactly the same.

00:20:58.350 --> 00:20:59.440
First, border text fields.

00:20:59.440 --> 00:21:02.260
If you have like a password field and
your user is typing in their password,

00:21:02.370 --> 00:21:04.980
you probably don't want the
view to be growing as the user

00:21:05.060 --> 00:21:06.700
is typing in their password.

00:21:06.810 --> 00:21:07.720
Same with image views.

00:21:07.810 --> 00:21:10.650
Image views will actually want to be
the size of the image that you give it.

00:21:10.900 --> 00:21:13.500
This can be very useful in cases,
but oftentimes you're going to throw

00:21:13.500 --> 00:21:17.150
on some explicit width or height so
that the image view stays some size and

00:21:17.150 --> 00:21:18.630
the image within it is just changing.

00:21:18.960 --> 00:21:21.290
So those are just a few exceptions.

00:21:21.990 --> 00:21:25.580
So how do I get rid of those
explicit wits when I don't want them?

00:21:25.610 --> 00:21:27.780
I'm not going to answer that yet
and I'm going to talk a little bit

00:21:27.850 --> 00:21:30.800
first about how Interface Builder
is generating constraints so we

00:21:30.880 --> 00:21:32.660
can better answer that question.

00:21:32.660 --> 00:21:35.350
What Interface Builder is doing
when you're working in IBE is it's

00:21:35.350 --> 00:21:38.930
adding constraints for you which can
be really nice because it can save

00:21:38.930 --> 00:21:41.480
you a lot of time but as you saw
we had to customize it a few times

00:21:41.480 --> 00:21:42.990
and we wanted particular behaviors.

00:21:43.050 --> 00:21:45.400
The set of constraints that
Interface Builder is generating

00:21:45.470 --> 00:21:46.860
is the minimum best set.

00:21:46.980 --> 00:21:50.570
There's an infinite number of
possibilities of constraints that

00:21:50.570 --> 00:21:52.290
you could add to your interface.

00:21:52.290 --> 00:21:55.830
And Interface Builder has a scoring
system for determining what we think

00:21:55.830 --> 00:21:58.840
are most likely the ones that you're
going to want for a given situation.

00:21:58.840 --> 00:22:02.360
So that's the first thing,
minimum and best set.

00:22:02.770 --> 00:22:06.020
Secondly, we avoid two illegal cases
which is really important.

00:22:06.150 --> 00:22:10.030
First, we avoid unsatisfiable constraints
due to like mutual exclusion.

00:22:10.110 --> 00:22:12.630
For example,
you can't have a button that's both 15

00:22:12.630 --> 00:22:16.310
and 20 points wide so we'll remove one
of those constraints for you so you

00:22:16.310 --> 00:22:18.560
don't end up with a crash at runtime.

00:22:18.840 --> 00:22:22.010
What we'll also do is we're
going to avoid ambiguity.

00:22:22.010 --> 00:22:25.660
If there's not enough data to
fully satisfy a particular layout,

00:22:25.770 --> 00:22:28.460
we're going to keep adding constraints
so that you don't run your application

00:22:28.460 --> 00:22:30.030
and get undefined behavior.

00:22:30.030 --> 00:22:32.810
This is where those
explicit widths come into.

00:22:32.810 --> 00:22:36.630
And there's a couple cases that
might not be immediately obvious of

00:22:36.630 --> 00:22:39.320
why those explicit widths come up.

00:22:39.320 --> 00:22:42.310
So to show that,
we're going to go back to a demo.

00:22:42.420 --> 00:22:43.180
All right.

00:22:43.180 --> 00:22:45.030
So we're back in our app here.

00:22:45.160 --> 00:22:48.450
And, you know,
everything is looking pretty good.

00:22:48.520 --> 00:22:50.100
You know,
this is a little clipping going on here,

00:22:50.100 --> 00:22:52.000
but that's just because
some views are overlapping.

00:22:52.000 --> 00:22:54.290
But overall,
it looks like all the content

00:22:54.290 --> 00:22:57.640
in our interface builder
document is not really clipping.

00:22:57.700 --> 00:22:59.930
That's at least what it
appears at at first look.

00:23:00.070 --> 00:23:02.310
Let's take a little deeper look.

00:23:02.360 --> 00:23:05.830
I'm going to show you some really
useful debugging defaults that you

00:23:05.970 --> 00:23:10.220
can use to help test your applications
and react to problems ahead of time.

00:23:10.330 --> 00:23:13.060
So I'm going to go ahead and
edit the scheme that I have here.

00:23:13.060 --> 00:23:20.660
I can either click this menu item
here or I can actually hold the option

00:23:20.660 --> 00:23:20.660
key and click the run button and that
will also allow me to edit the scheme.

00:23:20.940 --> 00:23:23.900
This is a default I'm going to turn
on called NS double localized strings.

00:23:23.900 --> 00:23:26.340
What this is going to do,
it's going to take every string in

00:23:26.420 --> 00:23:28.000
my interface and multiply it by two.

00:23:28.100 --> 00:23:30.540
So, for example, this would mimic,
for example,

00:23:30.540 --> 00:23:34.000
if you were to run your application
maybe under like a German localization

00:23:34.000 --> 00:23:37.180
or some other really long
localization where words are longer.

00:23:37.180 --> 00:23:39.570
And so I can perceive these
problems before they occur.

00:23:39.730 --> 00:23:44.060
So let's see our app now
running with that turned on.

00:23:44.230 --> 00:23:47.360
So if I run my app, ooh,
we're getting some clipping here.

00:23:47.420 --> 00:23:50.820
These buttons look okay, but if I open,
we're getting some clipping here as well.

00:23:50.940 --> 00:23:54.120
So with this default,
I can see how my interface

00:23:54.400 --> 00:23:56.550
might react to some changes.

00:23:57.640 --> 00:23:59.680
All right,
so let's go back into Interface Builder

00:23:59.680 --> 00:24:03.880
and I'm going to show you three ways
that you can get rid of explicit widths.

00:24:04.000 --> 00:24:06.460
Number one,
the first way to get rid of explicit

00:24:06.460 --> 00:24:09.130
widths is to size the views in
an Interface Builder document

00:24:09.500 --> 00:24:11.980
to their intrinsic content size.

00:24:12.090 --> 00:24:13.130
I have two ways to do this.

00:24:13.310 --> 00:24:17.240
One, I can just grab the resize
handle and resize it down.

00:24:17.330 --> 00:24:20.360
You can see when I get down here,
it snaps into place and I get

00:24:20.430 --> 00:24:22.000
these blue guides right here.

00:24:22.070 --> 00:24:25.310
And that indicates that my view has
now reached its intrinsic content size.

00:24:25.620 --> 00:24:28.640
And you can see the
explicit width is gone.

00:24:28.770 --> 00:24:32.840
And now I can go ahead and
recenter that in my interface.

00:24:32.930 --> 00:24:35.890
The other way I could have sized this
to fit is by going under the editor

00:24:35.890 --> 00:24:38.860
menu and selecting size to fit content.

00:24:38.980 --> 00:24:41.000
So that's way number one.

00:24:41.070 --> 00:24:44.300
Now I'm going to take the opportunity
here to just add a few more constraints.

00:24:44.360 --> 00:24:45.940
Now that my label is
going to be resizing,

00:24:45.940 --> 00:24:48.080
I want to make sure it
doesn't occlude this button.

00:24:48.240 --> 00:24:50.580
I know we've showed this demo lots,
but I think it's really cool and it

00:24:50.600 --> 00:24:53.640
shows some of the power of Auto Layout.

00:24:53.640 --> 00:24:55.740
So we're going to do -- we're
going to set the relation

00:24:55.740 --> 00:24:57.140
to greater than or equal to.

00:24:57.220 --> 00:24:58.260
And we're going to set
the standard space.

00:24:58.260 --> 00:25:00.000
So make sure that that space
is always greater than or

00:25:00.000 --> 00:25:02.300
equal to some standard space.

00:25:02.530 --> 00:25:05.230
And then also I have an explicit
width on the share button.

00:25:05.350 --> 00:25:08.740
And it looks like it's about the same
size as the add to itinerary button.

00:25:08.820 --> 00:25:12.500
So I'm just going to make that
so by adding an equal width.

00:25:12.730 --> 00:25:15.660
And you can see that explicit
width also goes away.

00:25:15.910 --> 00:25:16.250
Okay.

00:25:16.260 --> 00:25:19.280
So way number one, again,
is sizing to fit your content.

00:25:19.480 --> 00:25:22.800
Now there might be cases where you
can't size to fit your content.

00:25:22.800 --> 00:25:25.610
For example, a visual designer has
specified that in English,

00:25:25.740 --> 00:25:28.300
for example,
this button must be 85 points,

00:25:28.300 --> 00:25:30.550
for example.

00:25:30.690 --> 00:25:33.600
So again, your visual designers might
have a different design in mind.

00:25:33.600 --> 00:25:35.600
Let me undo that change.

00:25:35.600 --> 00:25:37.130
In this case we're going to
employ technique number 2.

00:25:37.280 --> 00:25:39.690
What I'm going to do here is I'm
going to take the relation of this

00:25:39.690 --> 00:25:43.310
width constraint and I'm going to
change it to be greater than or equal.

00:25:43.310 --> 00:25:47.340
What this is saying is that generally
speaking this button should be greater

00:25:47.680 --> 00:25:51.440
than or equal to the current size,
which means if the content is

00:25:51.450 --> 00:25:54.600
smaller than that it'll be that
greater than or equal to size,

00:25:54.600 --> 00:25:59.150
but we're also affording the
button to grow in the case

00:25:59.150 --> 00:26:02.740
that you go to a localization
that has really long strings.

00:26:02.790 --> 00:26:05.430
It will allow it to grow,
but it won't get smaller than the

00:26:05.430 --> 00:26:07.600
current size that we've just specified.

00:26:07.600 --> 00:26:13.600
So that is way number 2 that you
can get rid of explicit widths.

00:26:13.600 --> 00:26:14.980
So now we run our application.

00:26:15.180 --> 00:26:16.600
You can see our tile looks great.

00:26:16.600 --> 00:26:19.600
Push the window out to make it bigger,
more room.

00:26:19.600 --> 00:26:22.600
And you can see our buttons
also look good as well.

00:26:22.600 --> 00:26:23.940
So now we're going to take this
button and we're going to take

00:26:23.970 --> 00:26:26.600
the width constraint and we're
going to make it look good as well.

00:26:26.600 --> 00:26:30.410
So those are the first two ways in which
you can get rid of explicit widths.

00:26:30.690 --> 00:26:32.990
For the third way,
I'm going to go back to our iOS

00:26:33.130 --> 00:26:35.600
version and show you that there.

00:26:35.600 --> 00:26:38.730
A lot of the topics that we're
talking about today are completely

00:26:39.000 --> 00:26:42.600
synonymous between iOS and
AppKit because of the very,

00:26:42.600 --> 00:26:45.920
very similar APIs that they share.

00:26:46.100 --> 00:26:48.390
Okay, so we're going to look down
here in this label section for

00:26:48.390 --> 00:26:51.600
the facts of this particular
landmark that might be selected.

00:26:51.750 --> 00:26:58.000
And you can see I have two labels here,
and this one has an explicit width.

00:26:58.160 --> 00:27:00.710
Now I'm just going to
size this thing to fit.

00:27:00.960 --> 00:27:03.830
And you can see it still
has the explicit width.

00:27:03.980 --> 00:27:04.880
So why?

00:27:04.920 --> 00:27:07.350
Why is it that these two
labels are both being driven by

00:27:07.350 --> 00:27:12.430
their intrinsic content size,
yet one of them has an explicit width?

00:27:12.550 --> 00:27:16.220
This goes back to what we talked about
in the mastering Auto Layout session that

00:27:16.220 --> 00:27:19.900
has to do with content hugging priority.

00:27:20.370 --> 00:27:24.270
So by default,
views have a constraint inside of them

00:27:24.410 --> 00:27:26.490
that is saying try to be this size.

00:27:26.810 --> 00:27:28.440
You can kind of think about it this way.

00:27:28.440 --> 00:27:31.030
If you have a label that's, like,
got some text in it and

00:27:31.030 --> 00:27:33.490
you grow it really big,
you can think of the content

00:27:33.490 --> 00:27:36.630
hugging priority as someone inside
of your view kind of pulling

00:27:36.800 --> 00:27:38.400
on the edges of the view saying,
oh,

00:27:38.450 --> 00:27:40.770
come back and be the size of my content.

00:27:40.770 --> 00:27:43.880
So that's what's going on
here with our constraints.

00:27:43.970 --> 00:27:45.510
We have these two views.

00:27:45.510 --> 00:27:49.910
And as this container grows bigger,
it's ambiguous which label should grow.

00:27:49.910 --> 00:27:51.310
Should they grow proportionally?

00:27:51.390 --> 00:27:53.200
Should the one on the
left or the right grow?

00:27:53.200 --> 00:27:56.300
And so what we want to do is we want
to indicate that one of these labels

00:27:56.350 --> 00:27:58.620
should have a higher hugging priority.

00:27:58.820 --> 00:28:01.760
It should pull harder
to be its content size.

00:28:01.760 --> 00:28:04.540
So what I can do is I can just
select this bank of labels here.

00:28:04.540 --> 00:28:08.070
And I want the kind of labels
to these facts to always,

00:28:08.070 --> 00:28:10.460
always be the ones that stay put.

00:28:10.460 --> 00:28:14.260
So if I switch to the size inspector here
and go to the content hugging priority,

00:28:14.500 --> 00:28:18.890
what's important here is the
relative priority to the other thing.

00:28:18.970 --> 00:28:22.450
What I have to do is make it higher
to indicate to the system I want

00:28:22.450 --> 00:28:25.100
these labels to hug more closely.

00:28:25.260 --> 00:28:27.620
They're very friendly labels.

00:28:29.030 --> 00:28:32.420
All right, and now you can see,
if I zoom back into that label,

00:28:32.490 --> 00:28:34.230
the explicit width is gone.

00:28:34.310 --> 00:28:36.540
This is a tricky case and it's
definitely going to come up as

00:28:36.540 --> 00:28:38.150
you guys are designing interfaces.

00:28:38.270 --> 00:28:44.670
So the third way that we get rid of
explicit widths is by adjusting the

00:28:44.670 --> 00:28:44.670
content-hugging priority of a view.

00:28:45.380 --> 00:28:47.650
So I'm going to run this application
and we're going to take a look at how

00:28:47.650 --> 00:28:50.990
this looks running in the simulator.

00:28:53.530 --> 00:28:57.830
And you can see, huh,
still not quite right.

00:28:57.880 --> 00:29:00.280
If I rotate to landscape,
you can see it looks good.

00:29:00.280 --> 00:29:02.810
But in portrait,
things don't look quite right.

00:29:03.130 --> 00:29:03.490
Why?

00:29:03.870 --> 00:29:07.160
Let's go back to interface
builder and see why.

00:29:07.260 --> 00:29:09.720
So there's content hugging
priority and there's also content

00:29:09.780 --> 00:29:11.400
compression resistance priority.

00:29:11.440 --> 00:29:14.360
And this is the exact opposite
of content hugging priority.

00:29:14.450 --> 00:29:16.770
If you have that label that we
were talking about earlier and you

00:29:16.870 --> 00:29:19.850
make it smaller than the content,
you can think of the content compression

00:29:19.850 --> 00:29:23.900
resistance priority as someone inside
of you pushing on the wall saying,

00:29:23.900 --> 00:29:27.970
"No, go back out to be the size so
you don't clip." By default,

00:29:27.970 --> 00:29:30.260
we have this set pretty high.

00:29:30.430 --> 00:29:33.290
But also by default,
the content compression resistance

00:29:33.290 --> 00:29:35.720
priority of these two views is the same.

00:29:35.720 --> 00:29:39.380
The actual value at this
point is not important.

00:29:39.380 --> 00:29:42.840
So they both have the same content
compression resistance priority which

00:29:42.840 --> 00:29:47.120
means if this container view that these
two labels are in gets small enough where

00:29:47.120 --> 00:29:51.790
we have to clip content in both labels,
well, which one do we clip first?

00:29:51.790 --> 00:29:53.300
That's ambiguous.

00:29:53.420 --> 00:29:57.080
So what we want to do is we want to
select this bank of labels again.

00:29:57.120 --> 00:29:59.180
And again, relative priorities is
what's important here.

00:29:59.230 --> 00:30:02.740
I'm just going to increase it by
one which says I want to resist

00:30:02.800 --> 00:30:05.890
compression more than those other labels.

00:30:05.900 --> 00:30:08.250
So now when I run --

00:30:10.540 --> 00:30:15.700
You can see I get exactly what I would
expect right here in my interface.

00:30:15.800 --> 00:30:18.850
So those are the three ways in
which you can get rid of explicit

00:30:18.850 --> 00:30:21.130
widths using Interface Builder.

00:30:21.400 --> 00:30:21.840
Okay.

00:30:21.970 --> 00:30:24.740
So let's just reiterate what we just saw.

00:30:24.810 --> 00:30:26.340
So, again,
there are three ways we can get rid of

00:30:26.370 --> 00:30:28.580
explicit widths in Interface Builder.

00:30:28.580 --> 00:30:30.770
Again, we can size the content to fit.

00:30:30.850 --> 00:30:33.330
If you can't do that,
you can change the relation of that

00:30:33.420 --> 00:30:35.180
constraint to be greater than or equal.

00:30:35.310 --> 00:30:38.470
And then also if those two don't work,
then you can also sometimes have cases

00:30:38.600 --> 00:30:41.720
where you have to adjust the content
hugging or compression resistance

00:30:41.800 --> 00:30:43.490
priorities of the different views.

00:30:43.520 --> 00:30:46.170
So those are the three ways
you can get rid of explicit

00:30:46.170 --> 00:30:47.880
widths in Interface Builder.

00:30:47.880 --> 00:30:48.790
All right.

00:30:48.870 --> 00:30:51.260
Let's talk about localization.

00:30:51.690 --> 00:30:54.160
So let's talk about
localization before AutoLayout.

00:30:54.240 --> 00:30:56.460
So you as a developer,
you have your interface with a document,

00:30:56.470 --> 00:31:00.460
and it's great because all you have to
worry about is your development region.

00:31:00.460 --> 00:31:02.350
Let's just use English as
an example here.

00:31:02.460 --> 00:31:03.900
But then your marketing
team comes and says,

00:31:03.900 --> 00:31:06.050
well, we really want to localize
the application into French,

00:31:06.130 --> 00:31:09.100
Spanish, German,
and a bunch of other languages.

00:31:09.160 --> 00:31:11.460
So you go, OK, well,
I'm just going to make a bunch of copies

00:31:11.460 --> 00:31:12.660
of my interface with the documents.

00:31:12.660 --> 00:31:15.400
And I'm going to go change the
strings in those documents for

00:31:15.400 --> 00:31:16.820
each one of those languages.

00:31:16.820 --> 00:31:20.040
And right now we've created this barrier,
this divide between your

00:31:20.050 --> 00:31:23.900
original engineering document
and all the localized documents.

00:31:23.900 --> 00:31:26.340
Now this is fine if nothing changes.

00:31:26.360 --> 00:31:28.340
But as we know, that's not the case.

00:31:28.360 --> 00:31:29.490
Things always change.

00:31:29.700 --> 00:31:31.430
So now you have to go and you
have to make a change to your

00:31:31.430 --> 00:31:33.000
development time document.

00:31:33.050 --> 00:31:34.260
So you're going to make your change.

00:31:34.260 --> 00:31:36.320
And now you have a
synchronization problem.

00:31:36.320 --> 00:31:38.770
You have to get all the changes
that you've made to your new

00:31:38.770 --> 00:31:42.660
development document into all
those localized documents as well.

00:31:42.850 --> 00:31:44.900
This is where the three-way
merge process with Interface

00:31:45.030 --> 00:31:46.500
Builder would come into play.

00:31:46.610 --> 00:31:49.500
We would merge all the diffs from the
different ones into a new document.

00:31:49.500 --> 00:31:51.500
And then we would have to do the
same thing with the other documents.

00:31:51.500 --> 00:31:52.430
Now as many of you
might have experienced,

00:31:52.580 --> 00:31:55.000
this can be error prone
and can cause issues.

00:31:55.110 --> 00:31:59.080
And it can be a lot of work to
maintain all of the different

00:31:59.210 --> 00:32:01.060
changes between all the files.

00:32:01.160 --> 00:32:03.790
We can do better with Auto Layout.

00:32:03.890 --> 00:32:06.460
So again we're going to start with
this development time document and

00:32:06.460 --> 00:32:09.790
instead of creating new documents when
you want to localize your application,

00:32:09.800 --> 00:32:12.200
new interface with the documents,
you're going to create a

00:32:12.200 --> 00:32:13.260
bunch of strings files.

00:32:13.340 --> 00:32:15.700
For those of you who are not
familiar with strings file,

00:32:15.760 --> 00:32:18.040
a strings file is just a
list of key value pairs.

00:32:18.040 --> 00:32:21.640
The key being some view and interface
builder and some property and then

00:32:21.640 --> 00:32:25.450
the value being the actual string
value and whatever language you have.

00:32:25.540 --> 00:32:29.760
So now when you need to make a change
to your development time document,

00:32:29.820 --> 00:32:31.270
you go ahead and make the change.

00:32:31.420 --> 00:32:33.960
And let's say all you change
is the font color of something.

00:32:34.050 --> 00:32:37.530
Well, previously you'd have to regenerate
all of the localized documents.

00:32:37.630 --> 00:32:41.130
But because we're using strings files,
we don't have to touch anything.

00:32:41.390 --> 00:32:43.700
Everything just works.

00:32:43.830 --> 00:32:46.640
Now if you were to add a new view,
let's say a new button that had a new

00:32:46.660 --> 00:32:48.960
string and you need to localize that,
it's very,

00:32:48.960 --> 00:32:53.630
very easy just to use textual diff
and to apply and get some new strings

00:32:53.630 --> 00:32:56.980
files that contain those new strings.

00:33:01.700 --> 00:33:02.950
We think this is going
to be pretty great.

00:33:03.140 --> 00:33:06.530
And so let's talk about how this actually
works a little bit more under the hood.

00:33:06.600 --> 00:33:09.140
So when you build your project,
we take a zip file and we turn it

00:33:09.140 --> 00:33:14.050
into a compiled document that we
actually ship with your application.

00:33:14.680 --> 00:33:16.750
So now you have your compiled
document and then you also have

00:33:16.750 --> 00:33:19.500
a bunch of strings files for each
one of the different languages.

00:33:19.620 --> 00:33:22.430
Now, what's actually on disk is
you have a folder in your

00:33:22.430 --> 00:33:25.390
resources for each language,
and this contains the localized

00:33:25.490 --> 00:33:26.930
resources for each language.

00:33:27.060 --> 00:33:29.830
In this case,
we're going to stick the strings file

00:33:29.830 --> 00:33:32.320
for your interface into that language.

00:33:32.540 --> 00:33:35.580
So how does this work and
interact at actual runtime?

00:33:35.700 --> 00:33:37.900
Let's look at an example.

00:33:39.640 --> 00:33:43.350
We've introduced a new
localization called Base.

00:33:43.440 --> 00:33:46.900
And this, you can kind of think of it as
your development time localization.

00:33:46.940 --> 00:33:47.880
It doesn't even need to be English.

00:33:47.950 --> 00:33:50.420
It could just be what your
engineers use to talk.

00:33:50.510 --> 00:33:52.770
I talk in a very different
English than the people that are

00:33:52.780 --> 00:33:55.330
writing the strings for our interface.

00:33:55.400 --> 00:33:57.510
So you could have an actual
English localization that

00:33:57.530 --> 00:33:58.450
also does this as well.

00:33:58.460 --> 00:34:01.760
So Base is just where your
interface documents are going to go,

00:34:01.820 --> 00:34:04.190
and then the strings files are going
to go into each of the different

00:34:04.190 --> 00:34:06.210
languages that you localize.

00:34:06.380 --> 00:34:09.500
So what happens at runtime is we have,
let's say, a Mac running in English,

00:34:09.560 --> 00:34:12.760
and so we're going to look
for that English interface,

00:34:12.760 --> 00:34:15.680
and we don't see anything,
so we're going to fall back and use Base.

00:34:15.770 --> 00:34:17.290
We load the Base interface
with the document.

00:34:17.390 --> 00:34:18.480
It's got our English strings.

00:34:18.730 --> 00:34:20.140
We're good to go.

00:34:20.190 --> 00:34:25.100
But what about having, let's say,
an iPad that's running in German?

00:34:25.840 --> 00:34:27.410
Well, in this case,
we're going to go look

00:34:27.480 --> 00:34:28.800
in the German file,
and we're going to find

00:34:28.800 --> 00:34:30.240
those strings files,
but there's no layout

00:34:30.240 --> 00:34:31.460
information in a strings file.

00:34:31.460 --> 00:34:32.840
So where does the interface come from?

00:34:32.840 --> 00:34:34.650
In this case,
we're going to fall back to base,

00:34:34.650 --> 00:34:36.760
and we're going to grab
the interface out of base.

00:34:36.760 --> 00:34:37.990
So now what happens?

00:34:38.000 --> 00:34:40.980
At runtime,
when you actually run your application,

00:34:41.050 --> 00:34:43.400
it's going to take the strings,
and it's just going to

00:34:43.400 --> 00:34:47.050
substitute them into your base
interface builder document.

00:34:47.060 --> 00:34:50.240
Well, isn't that going to cause all
kinds of clipping and issues?

00:34:50.690 --> 00:34:53.980
Well, if you're using Auto Layout,
everything just works because

00:34:54.110 --> 00:34:56.350
everything will reflow,
and your layout will look

00:34:56.350 --> 00:34:59.210
beautiful in all the languages
that you've localized in.

00:34:59.220 --> 00:35:02.820
And let's look at a demo of this.

00:35:04.960 --> 00:35:05.800
All right.

00:35:05.890 --> 00:35:08.270
So I have my storyboard here.

00:35:08.400 --> 00:35:11.350
And this is the storyboard for
iOS variant of the application.

00:35:11.460 --> 00:35:13.720
And I'm going to show you that
I only have one storyboard

00:35:13.800 --> 00:35:15.850
in this entire project.

00:35:16.260 --> 00:35:17.630
And then I have a bunch of strings files.

00:35:17.680 --> 00:35:21.030
I have one for German and
I have one for Arabic as well.

00:35:21.510 --> 00:35:23.700
Let me open the assistant and
show you a new category that we've

00:35:23.700 --> 00:35:26.640
added to the assistant to help
you working with localizations.

00:35:26.890 --> 00:35:29.140
If you pop this open
and go to localizations,

00:35:29.190 --> 00:35:32.370
you can see all the strings files
for the interface builder document

00:35:32.370 --> 00:35:34.100
that you have in the primary editor.

00:35:34.320 --> 00:35:37.110
So you can see, for example, in German,
our share button is

00:35:37.140 --> 00:35:38.600
going to turn into that.

00:35:38.650 --> 00:35:41.050
So let's run the application.

00:35:42.510 --> 00:35:43.640
and see this at work.

00:35:43.640 --> 00:35:47.660
So now the simulator is going to load
our base storyboard document and it's

00:35:47.820 --> 00:35:52.630
going to take the German string files and
it's going to substitute them right in.

00:35:57.010 --> 00:35:58.200
And there we go.

00:35:58.410 --> 00:35:59.200
Beautiful.

00:35:59.230 --> 00:36:02.070
One story board, bunch of strings files.

00:36:02.070 --> 00:36:03.300
It gets better.

00:36:03.310 --> 00:36:03.810
All right.

00:36:03.880 --> 00:36:07.240
So let's go -- and I'm going to -- I'm
just really passionate about sharing.

00:36:07.240 --> 00:36:09.750
So we're just going to duplicate
this string a bunch of times

00:36:09.750 --> 00:36:11.180
because I really like sharing.

00:36:11.190 --> 00:36:13.600
And maybe your designers are
having a day and they say,

00:36:13.600 --> 00:36:15.840
well, we want you to go in and we
want you to change the color

00:36:16.120 --> 00:36:19.700
of all these labels to be,
I don't know, bright blue.

00:36:19.700 --> 00:36:24.380
And then maybe you want to add a progress
indicator to this image view to show

00:36:24.390 --> 00:36:26.470
the progress of the image as it grows.

00:36:26.500 --> 00:36:29.700
So I'm just going to grab a
progress view and just drop it

00:36:29.700 --> 00:36:31.680
right here into the document.

00:36:31.680 --> 00:36:34.990
Now at this point,
all I'm going to do is hit command R.

00:36:35.330 --> 00:36:37.110
I'm not going to generate any new files.

00:36:37.110 --> 00:36:39.770
I'm not going to generate
any new localizations at all.

00:36:39.790 --> 00:36:42.480
And you can see the strings
changes come right in.

00:36:42.590 --> 00:36:45.210
My interface changes come in
all without having to do any

00:36:45.360 --> 00:36:49.620
synchronization across my strings files
or my interface builder documents.

00:36:49.660 --> 00:36:51.010
And we think that's really great.

00:36:51.010 --> 00:36:51.890
But it gets better.

00:36:51.900 --> 00:36:51.900
All right.

00:36:51.900 --> 00:36:51.900
So we're going to go ahead and show
you a little bit of the process.

00:36:51.900 --> 00:36:51.900
And we're going to go ahead and show
you a little bit of the process.

00:36:51.900 --> 00:36:51.940
And we're going to go ahead and show
you a little bit of the process.

00:36:51.940 --> 00:36:53.050
And we're going to go ahead and show
you a little bit of the process.

00:36:53.050 --> 00:36:53.500
All right.

00:36:53.640 --> 00:36:59.390
So what I'm going to do now is I'm going
to switch my system language into Arabic.

00:37:00.140 --> 00:37:03.690
Arabic is a language that is read
right to left versus left to right.

00:37:03.790 --> 00:37:07.680
So we want everything in the
UI to layout right to left.

00:37:07.980 --> 00:37:10.420
With Auto Layout,
this couldn't be easier.

00:37:10.510 --> 00:37:13.340
If I run my application, again,
I only have one interface

00:37:13.410 --> 00:37:14.850
with a document for this view.

00:37:15.130 --> 00:37:18.310
You can see every single thing in
my interface automatically flips.

00:37:18.370 --> 00:37:22.750
Not only do I get the
Arabic localizations

00:37:22.750 --> 00:37:22.750
and the text flipping.

00:37:26.290 --> 00:37:30.080
So not a single line of code for a very,
very powerful layout.

00:37:30.080 --> 00:37:31.740
Now as you can see,
it's not doing quite what I expect,

00:37:31.760 --> 00:37:32.110
right?

00:37:32.290 --> 00:37:34.820
This gradient view over here that
indicates the separation between

00:37:34.870 --> 00:37:37.900
my splitview is also flipping,
even though the splitview,

00:37:38.020 --> 00:37:41.600
which due to what we say
for HI says not to flip,

00:37:41.600 --> 00:37:42.840
the gradient is also flipping.

00:37:42.900 --> 00:37:44.320
But we don't really want to do that.

00:37:44.320 --> 00:37:45.360
So why is it flipping?

00:37:45.360 --> 00:37:47.760
Let's go into interface
builder and find out.

00:37:47.760 --> 00:37:49.430
Let's open the main menu.

00:37:49.430 --> 00:37:51.410
That has our splitview in it.

00:37:51.770 --> 00:37:52.580
All right.

00:37:52.650 --> 00:37:56.170
So now I can select this gradient
view and go over to the size

00:37:56.250 --> 00:37:59.520
inspector and I can see there's
our trailing space that we have.

00:37:59.640 --> 00:38:03.280
And using the gear here I can just
go ahead and select and edit it.

00:38:03.280 --> 00:38:05.870
Now by default all the constraints
in interface builder and in

00:38:05.880 --> 00:38:08.470
the visual format language are
going to be leading to trailing.

00:38:08.470 --> 00:38:12.480
Leading to trailing you can kind of
think about the natural text direction.

00:38:12.480 --> 00:38:16.500
Based upon what language you're
running in the constraints

00:38:16.500 --> 00:38:18.290
will flip orientations.

00:38:18.290 --> 00:38:22.150
So for left to right it will
flip versus from left to right.

00:38:22.200 --> 00:38:25.140
But what I want to do is
I actually want to say that this

00:38:25.240 --> 00:38:26.800
constraint should never flip.

00:38:26.800 --> 00:38:30.330
So I can explicitly tell the direction
to be explicitly left or left and

00:38:30.330 --> 00:38:32.890
right versus leading and trailing.

00:38:32.940 --> 00:38:35.080
And so if I were to
run my application in,

00:38:35.080 --> 00:38:38.000
for example, Arabic,
now my gradient does not flip

00:38:38.020 --> 00:38:39.610
and it stays right there.

00:38:39.610 --> 00:38:43.210
So this is really,
really powerful for you guys as you're

00:38:43.210 --> 00:38:46.240
working on right to left localizations.

00:38:46.240 --> 00:38:48.420
So that's what I wanted to
show you with localization.

00:38:50.700 --> 00:38:53.000
Let's go back to slides.

00:38:53.080 --> 00:38:55.580
So again, with the localization,
the new base localization,

00:38:55.670 --> 00:38:57.810
it's where your interface-based
documents are going to go to.

00:38:58.070 --> 00:39:00.960
We've also provided an override,
so you can create an interface-based

00:39:00.960 --> 00:39:03.440
document for a language if you have,
like, special UI you want to

00:39:03.440 --> 00:39:07.260
have for your French users,
for example, or maybe for another region.

00:39:07.300 --> 00:39:10.210
You can actually have an
interface-based document for just that

00:39:10.210 --> 00:39:12.930
language that will be an override,
but then you'll need to use the

00:39:12.930 --> 00:39:16.420
three-way merge process to make sure
that those changes get back into those

00:39:16.420 --> 00:39:19.560
documents that are synchronized across.

00:39:19.800 --> 00:39:22.700
Okay, and then we have string files,
one per localization.

00:39:22.780 --> 00:39:26.320
At runtime, we're going to take the
strings from that localization,

00:39:26.320 --> 00:39:30.520
we're going to stick them into the base
localization interface with a document,

00:39:30.520 --> 00:39:32.800
and Auto Layout takes care of the rest.

00:39:32.920 --> 00:39:38.510
For availability,
this is available for iOS 6 and

00:39:38.510 --> 00:39:38.510
OS X Mountain Lion going forward.

00:39:39.450 --> 00:39:41.310
All right, so that's localization.

00:39:41.430 --> 00:39:43.930
And looking back over the three
things that we've just talked about,

00:39:44.120 --> 00:39:46.950
explicit widths, spacing constraints,
localization,

00:39:47.030 --> 00:39:50.010
we're talking about the main
takeaway for this session,

00:39:50.170 --> 00:39:51.540
which is thinking ahead.

00:39:51.660 --> 00:39:54.240
With Auto Layout,
as things can react to changes,

00:39:54.240 --> 00:39:57.290
it's important that you guys
are thinking ahead of how your

00:39:57.290 --> 00:39:59.250
interface could change over time.

00:39:59.450 --> 00:40:01.360
For example,
in our app we had this fax area

00:40:01.360 --> 00:40:04.910
in the bottom and the labels were
changing and it had different content.

00:40:05.030 --> 00:40:07.370
So we want to think about
as the strings changed,

00:40:07.430 --> 00:40:09.050
what would the interface do?

00:40:09.120 --> 00:40:13.800
Or if you have device rotation,
if you're writing an iOS application.

00:40:13.820 --> 00:40:18.050
Or as we just saw with localization,
strings can drastically change.

00:40:18.280 --> 00:40:21.330
So also as we showed you,
we've added a few debugging

00:40:21.330 --> 00:40:24.900
defaults to help you anticipate
some of these changes.

00:40:24.900 --> 00:40:28.290
I'm not going to explain
all of them here,

00:40:28.490 --> 00:40:33.190
but we saw the doubling of the strings,
and you can also see,

00:40:33.390 --> 00:40:38.100
as we saw in the second session,
the one from this morning,

00:40:38.100 --> 00:40:39.890
you can also mimic running in a
right-to-left language without actually

00:40:39.890 --> 00:40:39.890
switching your system into that language.

00:40:40.630 --> 00:40:42.840
All right, so that's what I want to
cover with localization.

00:40:42.840 --> 00:40:46.500
We've got two topics left,
and then we'll get you guys off to lunch.

00:40:46.600 --> 00:40:48.500
All right,
so let's talk about some new API.

00:40:48.500 --> 00:40:51.680
And really what I'm going to
focus on here is the new splitview

00:40:51.680 --> 00:40:53.840
API with OS X Mountain Lion.

00:40:54.040 --> 00:40:57.150
This is really, really going to help you
guys as you're developing

00:40:57.150 --> 00:40:59.120
applications that use splitviews.

00:41:00.400 --> 00:41:02.840
So before I dive into that,
I want to talk just a really

00:41:02.840 --> 00:41:06.540
refresher on priorities to make sure
that we've squared away with those.

00:41:06.640 --> 00:41:09.120
So again,
priorities are for expressing either

00:41:09.120 --> 00:41:11.060
required or optional behaviors.

00:41:11.120 --> 00:41:14.300
If you lower the priority of something,
you're saying that this is optional.

00:41:14.400 --> 00:41:16.860
For example,
we're looking at the content hugging

00:41:16.860 --> 00:41:19.710
and compression resistance priorities,
and those are constraints

00:41:20.000 --> 00:41:22.300
that are internal to the
view that are implementing

00:41:22.300 --> 00:41:24.460
that using a priority system.

00:41:24.490 --> 00:41:26.300
Okay, well,
let's talk about that a little bit more.

00:41:26.340 --> 00:41:29.770
By default, constraints are going to
have a required priority.

00:41:29.900 --> 00:41:31.120
So 1,000.

00:41:31.600 --> 00:41:33.800
This means it must be fulfilled.

00:41:33.800 --> 00:41:35.300
It must be satisfied.

00:41:35.300 --> 00:41:38.240
If you lower the priority
anything less than 1,000,

00:41:38.330 --> 00:41:41.310
what the system is going to do
is it's going to try as hard as

00:41:41.420 --> 00:41:44.710
it can and get as close as it can
to fulfilling that constraint.

00:41:44.860 --> 00:41:47.790
I like to think of the example
of Auto Layout as kind of like

00:41:47.790 --> 00:41:49.300
gravity pulling rain down.

00:41:49.300 --> 00:41:52.030
And you might have, like, you know,
buckets of constraints that

00:41:52.030 --> 00:41:53.300
might catch the rainwater.

00:41:53.310 --> 00:41:55.380
But generally,
the rain is falling down as

00:41:55.410 --> 00:41:59.210
Auto Layout is trying to get as close
to that solution as it possibly can.

00:41:59.300 --> 00:42:02.290
And the system also has
some predefined constraints,

00:42:02.300 --> 00:42:05.150
and so we're going to be talking
a little bit about those.

00:42:05.300 --> 00:42:09.290
And again, to show this,
the best place is with a demo.

00:42:10.970 --> 00:42:11.340
All right.

00:42:11.620 --> 00:42:13.380
So we got our application here.

00:42:13.510 --> 00:42:16.240
And one of the things that we
can do is we can grab these

00:42:16.240 --> 00:42:18.770
splits and we can make them zero.

00:42:18.810 --> 00:42:20.350
That's not exactly what we want to do.

00:42:20.350 --> 00:42:20.820
Right?

00:42:20.940 --> 00:42:22.910
Also, as you can see,
as I resize this window,

00:42:22.910 --> 00:42:26.040
you can see the splits are kind
of growing kind of proportionally.

00:42:26.040 --> 00:42:28.430
And it's doing a little funny behavior.

00:42:28.520 --> 00:42:30.240
So if I were writing this
with manual layout code,

00:42:30.240 --> 00:42:33.120
I would go in and I would override
all the delegate methods for

00:42:33.120 --> 00:42:36.280
NS split view and write a bunch
of code to set minimum sizes and

00:42:36.280 --> 00:42:38.000
react to these different changes.

00:42:38.000 --> 00:42:40.010
I don't have to write
any code in this demo.

00:42:40.140 --> 00:42:42.180
We're going to do it all
in Interface Builder.

00:42:42.280 --> 00:42:44.010
So let's go take a look.

00:42:44.690 --> 00:42:47.210
So back here in my splitview,
the first thing I want to do is add

00:42:47.480 --> 00:42:50.300
some minimum sizes to those splits.

00:42:50.370 --> 00:42:53.290
This is as easy as adding
a single constraint.

00:42:53.440 --> 00:42:56.910
So I'm going to select the split
over here and I'm going to add a

00:42:57.070 --> 00:42:59.050
width constraint for the split.

00:42:59.170 --> 00:43:02.400
Now, I could drill down in
here and try to select it,

00:43:02.590 --> 00:43:06.470
but Interface Builder pro tip:
If I hold control and

00:43:06.800 --> 00:43:09.110
shift or shift right click,

00:43:09.270 --> 00:43:13.490
I can get a menu of every single
object under the mouse at this point.

00:43:13.630 --> 00:43:17.770
This makes it really easy to select
objects that might be occluded.

00:43:20.590 --> 00:43:22.620
So I can go down here and I'm
going to select very easily,

00:43:22.620 --> 00:43:25.370
I can see that I want to
select this source list split.

00:43:25.490 --> 00:43:29.500
So I'm going to select this and I'm going
to go to my add constraint menu here

00:43:29.500 --> 00:43:30.800
and I'm going to add a width constraint.

00:43:30.900 --> 00:43:34.540
So I can add this directly to
the split of the splitview.

00:43:34.610 --> 00:43:36.880
And now I'm going to change the
relation to greater than or equal

00:43:36.980 --> 00:43:39.440
and I'm going to set this to 200.

00:43:39.490 --> 00:43:42.650
And now this split will not
get any smaller than 200.

00:43:42.960 --> 00:43:46.560
Let's do the same thing in our
other splitview for the detail area.

00:43:46.610 --> 00:43:50.830
and that's in an interface with a
document called split view controller.

00:43:51.260 --> 00:43:53.460
And again,
I'm going to select that split.

00:43:53.500 --> 00:43:57.120
I'm going to add the width constraint,
and in the attributes inspector

00:43:57.230 --> 00:43:59.650
change the relation to
greater than or equal to 200.

00:43:59.700 --> 00:44:03.980
All right,
so now these guys have got minimum sizes.

00:44:04.070 --> 00:44:06.560
Let's talk about now
the proportional sizing.

00:44:06.560 --> 00:44:10.170
We really don't want the split
view to grow proportionally.

00:44:10.170 --> 00:44:13.920
What I really want is I want the
source list to stay fixed most of

00:44:13.920 --> 00:44:15.650
the time as I'm resizing the window.

00:44:15.770 --> 00:44:18.870
Then the next thing that's important
to me would be the list of landmarks.

00:44:19.210 --> 00:44:22.610
And then finally that detail
area I'd want to fluidly

00:44:22.720 --> 00:44:24.830
resize as I resize the window.

00:44:25.020 --> 00:44:29.230
There's new API on NS split view
called holding priority where you

00:44:29.340 --> 00:44:34.620
can set the priority at which a split
view maintains its current width.

00:44:34.620 --> 00:44:38.310
So if I select the split view
and open the size inspector,

00:44:38.310 --> 00:44:42.220
you'll notice some new
UI up here in the corner.

00:44:42.220 --> 00:44:45.570
By default, the splits are going to have
all the same holding priorities,

00:44:45.570 --> 00:44:48.840
which means the split view will
resize proportionally as I resize it.

00:44:49.000 --> 00:44:50.720
But that's not what I want.

00:44:50.950 --> 00:44:54.380
What I want to do here is I want to
say that one split should hold its

00:44:54.820 --> 00:44:57.240
width stronger than another split.

00:44:57.260 --> 00:45:01.470
All I have to do is increase this by one,
and now the split on the left

00:45:01.860 --> 00:45:07.140
is going to hold that priority
stronger than the other split.

00:45:07.140 --> 00:45:10.810
So I'm going to go back and do
the same thing in my main menu.

00:45:12.110 --> 00:45:15.100
Let's select that splitview.

00:45:15.140 --> 00:45:16.530
Go to our size inspector.

00:45:16.600 --> 00:45:19.320
Now what I'm going to do here is I want
to interact with that other splitview.

00:45:19.550 --> 00:45:23.250
What's great about Auto Layout is I can
interact with all the views in my window.

00:45:23.390 --> 00:45:26.960
So before we set those
splits to 250 and 251,

00:45:27.030 --> 00:45:29.280
what's important here is
setting relative priorities.

00:45:29.400 --> 00:45:32.640
I want to make sure that these priorities
are higher than those so that these

00:45:33.020 --> 00:45:35.250
hold stronger than those other ones.

00:45:35.360 --> 00:45:38.770
So I'm just going to be
safe to go up to 255.

00:45:38.770 --> 00:45:41.800
And I'm going to set the
other split to be 254.

00:45:42.020 --> 00:45:44.720
And now the splitview,
the source list here,

00:45:44.720 --> 00:45:49.460
is going to hold stronger
than any of the other splits.

00:45:49.500 --> 00:45:51.800
So now when I run my application,
first of all,

00:45:51.800 --> 00:45:55.560
I can grab these and they stop
resizing when I hit a minimum width.

00:45:55.620 --> 00:45:59.490
And as I resize my window,
you can see it's doing exactly what

00:45:59.590 --> 00:46:02.270
I would expect as far as the splitviews.

00:46:03.140 --> 00:46:05.430
Now let me point something else out here.

00:46:05.530 --> 00:46:07.660
The window stops resizing
at a certain point.

00:46:07.930 --> 00:46:10.630
Now I didn't set any
minimum size for that split,

00:46:10.760 --> 00:46:12.000
so how did that happen?

00:46:12.000 --> 00:46:14.760
And this is where Auto Layout is
kicking in and it's saying,

00:46:14.760 --> 00:46:17.660
well, we don't want to make any of
the constraints that you've

00:46:17.740 --> 00:46:19.300
specified unsatisfiable.

00:46:19.300 --> 00:46:21.620
All the constraints,
a lot of the constraints we specified

00:46:21.630 --> 00:46:24.190
are required and it's going to hold
those and it's even going to stop

00:46:24.190 --> 00:46:27.440
resizing the window and resize the window
if it needs to in order to make that

00:46:27.440 --> 00:46:29.900
happen without writing any code at all.

00:46:30.000 --> 00:46:31.260
And that's really cool.

00:46:31.390 --> 00:46:34.550
So we're going to dive into
this and make it even better.

00:46:35.300 --> 00:46:37.550
So I kind of want to be able to
drag this a little bit smaller,

00:46:37.550 --> 00:46:37.860
right?

00:46:37.860 --> 00:46:41.700
I want this title to go over,
and I want this text here

00:46:41.700 --> 00:46:42.420
to be able to be clipped.

00:46:42.540 --> 00:46:44.580
Right now it's not
allowing it to be clipped.

00:46:44.780 --> 00:46:47.830
So let's go into Interface Builder
and make these adjustments.

00:46:47.940 --> 00:46:52.030
So I'm going to go to my
detail view controller.

00:46:53.030 --> 00:46:56.530
And I'm going to go ahead
and change the text here to

00:46:56.530 --> 00:46:59.240
something a little bit larger.

00:46:59.290 --> 00:47:01.490
And you can see the behavior as
I resize and interface whether

00:47:01.490 --> 00:47:04.100
it's doing what we would expect,
it's stopping at that point.

00:47:04.100 --> 00:47:06.360
So the first thing I want to
do is adjust the priority of

00:47:06.360 --> 00:47:07.560
this centering constraint.

00:47:07.640 --> 00:47:10.560
So let's go over to the attributes
inspector and set the priority.

00:47:10.670 --> 00:47:11.920
But what should I set it to?

00:47:11.930 --> 00:47:14.200
Up to this point we've worried about
relative priorities but at this

00:47:14.200 --> 00:47:15.870
point we have to pick something else.

00:47:15.870 --> 00:47:18.900
This is where the system predefined
priorities come into play.

00:47:18.900 --> 00:47:22.310
There's a couple that are coming into
play here and I want to show them to you.

00:47:22.350 --> 00:47:25.920
I'm going to open up the header
that describes these just so

00:47:25.920 --> 00:47:28.770
that I can point them out to you.

00:47:30.680 --> 00:47:32.930
Now what I'm going to do, though,
is I want to open this side

00:47:32.930 --> 00:47:34.240
by side with my interface.

00:47:34.240 --> 00:47:35.970
So I'm going to show you Xcode Pro Tip.

00:47:36.050 --> 00:47:40.250
If I hold down Option and Shift, again,
Option and Shift,

00:47:40.370 --> 00:47:42.990
when I hit the return key,
it's going to show me a little HUD.

00:47:43.000 --> 00:47:47.360
And this HUD allows me to target where
I want the file that I'm opening to go.

00:47:47.360 --> 00:47:49.780
For example,
I can say open in a new window,

00:47:49.930 --> 00:47:52.320
open in the current split,
open in a new tab,

00:47:52.450 --> 00:47:53.780
or open in a new split.

00:47:53.780 --> 00:47:56.250
If I had other splits,
I could target an existing split,

00:47:56.250 --> 00:47:58.150
or I could target a split in another tab.

00:47:58.360 --> 00:48:00.580
So it's a really,
really easy way to quickly open

00:48:00.580 --> 00:48:03.110
the files that you want to look at.

00:48:03.290 --> 00:48:05.680
So there's a bunch of different
predefined priorities here,

00:48:05.740 --> 00:48:06.980
and I want to point out just a few.

00:48:07.220 --> 00:48:08.590
One, the required one.

00:48:08.730 --> 00:48:11.150
Again,
this is the priority that means this

00:48:11.290 --> 00:48:13.240
constraint should not be broken.

00:48:13.360 --> 00:48:16.600
The next one I want to point out is 500,
which is the size at which the

00:48:16.600 --> 00:48:17.850
window is going to stay put.

00:48:18.130 --> 00:48:20.860
If I have a constraint greater than that,
it will resize the window to

00:48:20.860 --> 00:48:22.460
accommodate that constraint.

00:48:22.580 --> 00:48:25.210
If it's less than 500,
it's going to allow the

00:48:25.210 --> 00:48:28.600
window to get smaller,
and it will break that constraint.

00:48:29.240 --> 00:48:32.020
This number also looks familiar,
and this is that value that

00:48:32.020 --> 00:48:34.990
we were using for our holding
priorities for our splitview.

00:48:35.180 --> 00:48:40.780
So what I want to do is I want to
pick a priority between the window

00:48:41.080 --> 00:48:48.080
resizing priority and this priority
so that the splitview will still hold,

00:48:48.080 --> 00:48:49.350
but the window will get smaller and it
will break that centering constraint.

00:48:49.350 --> 00:48:49.350
So I'm going to set it to 400.

00:48:50.280 --> 00:48:53.400
So let me reset the
Assistant and close it.

00:48:53.440 --> 00:48:56.300
And let's set this to 400.

00:48:56.310 --> 00:48:58.100
The other thing I want to do is
I want to select these labels,

00:48:58.100 --> 00:49:00.250
like I pointed out as well,
and I want the content in these

00:49:00.260 --> 00:49:02.740
labels to be able to get clipped.

00:49:02.800 --> 00:49:06.840
So let's go back to the size
inspector and set this to 250,

00:49:06.860 --> 00:49:12.700
which means don't prevent the window from
resizing in order to show our content.

00:49:12.740 --> 00:49:15.470
And now when we run our application,

00:49:17.660 --> 00:49:20.490
You can see it's doing
exactly what we would expect

00:49:20.630 --> 00:49:23.980
outside of this label up here,
but you can see we're

00:49:24.290 --> 00:49:25.690
allowed to go off center.

00:49:25.810 --> 00:49:29.430
So let's go back and let's just do
two more constraints to show you

00:49:29.430 --> 00:49:31.800
really some more power of Auto Layout.

00:49:31.810 --> 00:49:35.440
I'm still wasting some space,
and I'm going to get rid of that space.

00:49:35.440 --> 00:49:38.540
So first we're going to add this
leading constraint to our view.

00:49:38.870 --> 00:49:41.870
Again, we want to make this be greater
than or equal to the standard space,

00:49:41.870 --> 00:49:45.060
a common constraint that you'll
be adding as you want views

00:49:45.330 --> 00:49:47.180
to not occlude each other.

00:49:47.180 --> 00:49:49.440
And then what I want to do
is I want these buttons,

00:49:49.440 --> 00:49:53.340
if the space is really tight,
to actually stop being an equal width.

00:49:53.340 --> 00:49:54.620
But at what point?

00:49:54.620 --> 00:49:58.820
So I want it to break after the
centering constraint is already broken.

00:49:58.820 --> 00:50:00.810
So we set the other constraint to 400.

00:50:00.810 --> 00:50:02.740
We're going to set this one to 401.

00:50:02.740 --> 00:50:06.280
Again, a lot of setting constraints is
setting things relative to each other.

00:50:06.280 --> 00:50:09.360
So in this case,
I'm going to set it to 401.

00:50:09.360 --> 00:50:11.640
And now when I run my application,
check this out.

00:50:11.780 --> 00:50:15.300
When I resize my window smaller,
it's going to stop and look at

00:50:15.300 --> 00:50:16.860
that equal sizing constraint.

00:50:16.860 --> 00:50:18.460
gets taken down.

00:50:24.300 --> 00:50:25.840
Just look at this interface.

00:50:25.840 --> 00:50:30.600
Imagine trying to write this using
manual code with the existing splitview.

00:50:30.600 --> 00:50:31.470
That would be really hard.

00:50:31.540 --> 00:50:36.130
But with Auto Layout,
I didn't write a single line of code.

00:50:37.070 --> 00:50:40.300
All right, let's go back to slides.

00:50:40.420 --> 00:50:42.740
So the API that I just
showed you is the new holding

00:50:42.810 --> 00:50:46.170
priority API for NS splitview,
which allows you to do incredibly

00:50:46.240 --> 00:50:51.070
complex layouts using Auto Layout and
the new splitview in OS X Mountain Lion.

00:50:51.260 --> 00:50:53.980
There's also some new text wrapping
APIs you might want to check out,

00:50:53.980 --> 00:50:55.460
look it up in the documentation.

00:50:55.520 --> 00:50:58.240
Those are also really great and
will help you a lot as you're

00:50:58.240 --> 00:51:00.000
developing your applications.

00:51:00.060 --> 00:51:03.090
All right,
so I want to talk about one more thing,

00:51:03.200 --> 00:51:04.900
and that's animation.

00:51:05.800 --> 00:51:09.060
And the best place to do this
is to go back and do a demo.

00:51:09.120 --> 00:51:10.740
Now, instead of writing all
the code this time,

00:51:10.740 --> 00:51:12.800
I actually have the code
already all written,

00:51:12.910 --> 00:51:15.860
and I'm just going to run the
application and show you how it works.

00:51:15.940 --> 00:51:19.440
There's a few just -- a couple
key concepts to keep in mind as

00:51:19.440 --> 00:51:22.970
we're working with animation,
and I just want to point those out.

00:51:23.810 --> 00:51:25.700
So here's our view.

00:51:25.800 --> 00:51:28.320
And before,
our add to our itinerary button,

00:51:28.320 --> 00:51:30.460
that box that came down,
was not animated.

00:51:30.590 --> 00:51:32.800
But now you can see it
beautifully animates in.

00:51:32.870 --> 00:51:34.210
So how does this work?

00:51:34.490 --> 00:51:38.060
In this particular case,
the entire application is using the

00:51:38.060 --> 00:51:42.740
layer backing support that's added
enhanced in OS X Mountain Lion,

00:51:42.830 --> 00:51:46.100
and it's using that layer backing
support and core animation to

00:51:46.110 --> 00:51:47.460
do this beautiful animation.

00:51:47.680 --> 00:51:49.730
Let's see how it works.

00:51:51.320 --> 00:51:53.810
So I'm going to go back to
the implementation for our

00:51:53.990 --> 00:51:57.200
OS X detail view controller,
which is this guy right here.

00:51:57.200 --> 00:51:59.550
And once again,
I'm going to use the jump bar

00:51:59.830 --> 00:52:02.280
to navigate to our open method.

00:52:02.280 --> 00:52:06.370
So just a couple key concepts
to take into effect here.

00:52:06.490 --> 00:52:10.110
When you're animating,
using core animation on OS X,

00:52:10.190 --> 00:52:13.820
and the same with iOS,
the concepts are the same.

00:52:14.050 --> 00:52:16.710
The first thing you're going to
want to do is set up the constraints

00:52:17.030 --> 00:52:20.450
for the layout that you want,
and then critical piece here,

00:52:20.450 --> 00:52:23.340
you're going to call layout immediately.

00:52:23.410 --> 00:52:24.770
So you're going to set
up all the constraints,

00:52:24.830 --> 00:52:26.710
it's going to layout immediately,
and that's going to be

00:52:26.770 --> 00:52:27.720
your starting position.

00:52:27.810 --> 00:52:32.090
Then what you're going to do is you're
going to run an animation group.

00:52:33.150 --> 00:52:35.980
Inside of the animation group,
you want to turn this property on.

00:52:35.980 --> 00:52:40.140
And this says any frame changes that
are made automatically animate them.

00:52:40.140 --> 00:52:43.720
So now we're going to make our
changes to our constraints.

00:52:43.720 --> 00:52:46.130
In this case,
what I'm doing is I'm putting the

00:52:46.130 --> 00:52:49.850
box inside of a container so that
it will resize down from zero.

00:52:49.850 --> 00:52:53.480
At the end of this animation,
what I want it to be is I want the box

00:52:53.480 --> 00:52:57.410
inside of it to be pinned to the bottom
so that it fills that full height.

00:52:57.410 --> 00:53:00.200
So go ahead and add those constraints.

00:53:00.200 --> 00:53:02.520
And then critical piece
of information again,

00:53:02.520 --> 00:53:04.720
we're going to call layout one more time.

00:53:04.720 --> 00:53:06.870
So this will force layout
to happen immediately.

00:53:06.960 --> 00:53:09.050
And because we're inside
of this animation block,

00:53:09.200 --> 00:53:11.400
all those frame changes are
going to get caught in the

00:53:11.470 --> 00:53:13.020
animation and seamlessly animate.

00:53:15.010 --> 00:53:17.120
With iOS, it's the exact same thing.

00:53:17.260 --> 00:53:20.900
So let's jump over to iOS real
quick and let's take a look.

00:53:20.940 --> 00:53:24.560
So if we go back to our
other view controller...

00:53:26.100 --> 00:53:28.790
You can see we're doing
the exact same thing.

00:53:28.910 --> 00:53:30.680
We're setting up some constraints.

00:53:30.680 --> 00:53:32.840
We're calling layout if needed.

00:53:33.000 --> 00:53:36.740
We're going into our UIView
animate with duration.

00:53:36.860 --> 00:53:39.670
And in this case,
it's already turning on the

00:53:39.670 --> 00:53:41.650
implicit animation for us.

00:53:41.780 --> 00:53:45.790
I'm specifying some new
constants for my constraints.

00:53:45.790 --> 00:53:48.570
And then I'm laying out immediately.

00:53:48.570 --> 00:53:53.220
And what this is going to do is this
is going to animate my view for me

00:53:53.220 --> 00:53:54.280
just by changing the constraints.

00:53:57.690 --> 00:54:00.140
So if we launch our
application in the simulator,

00:54:00.140 --> 00:54:01.640
we can see this happening.

00:54:01.700 --> 00:54:03.840
So if I click on this
full screen button here,

00:54:03.840 --> 00:54:07.120
you can see the map view animates
beautifully up to full size.

00:54:07.290 --> 00:54:10.840
And if I dismiss it, it comes back down.

00:54:10.840 --> 00:54:13.270
And that's the demo for animation.

00:54:17.280 --> 00:54:18.200
So let's read it right here.

00:54:18.200 --> 00:54:21.340
Just a couple really core
pieces to keep in mind here.

00:54:21.380 --> 00:54:24.790
If you're targeting OS X Lion,
you can use the animation proxy

00:54:24.790 --> 00:54:28.700
for NSLayoutConstraint to animate
without using layer backing.

00:54:28.700 --> 00:54:30.100
And that's a great way to do that.

00:54:30.180 --> 00:54:34.030
Again, that's available on
OS X Lion and OS X Mountain Lion.

00:54:34.110 --> 00:54:36.640
If you're using layer
backing in your applications,

00:54:36.640 --> 00:54:39.650
either on OS X or you're using
UIViews on your iOS application,

00:54:39.950 --> 00:54:42.770
you're going to want to use one
of the run animation groups or

00:54:42.870 --> 00:54:44.540
animate with duration blocks.

00:54:44.600 --> 00:54:47.350
Before you go into that block,
you're going to call layout if needed

00:54:47.440 --> 00:54:49.000
to get those initial positions.

00:54:49.070 --> 00:54:50.870
Then you're going to make
your constraint changes.

00:54:51.090 --> 00:54:54.240
Maybe you add constraints,
change some constants, whatnot.

00:54:54.290 --> 00:54:58.030
And then inside of the animation block,
you call layout if needed.

00:54:58.280 --> 00:55:00.470
That's the critical piece of
information you need to know

00:55:00.520 --> 00:55:01.550
as you're doing animation.

00:55:01.800 --> 00:55:06.990
Layout, enter the animation,
do your changes, layout again.

00:55:08.690 --> 00:55:10.140
All right.

00:55:10.240 --> 00:55:13.110
So that was quite a whirlwind
tour of some different features.

00:55:13.110 --> 00:55:16.590
And the take way that I want to
go back to is thinking ahead.

00:55:16.610 --> 00:55:19.810
Again this is really important as
you're developing your interfaces.

00:55:19.890 --> 00:55:21.820
You can have dynamic content at runtime.

00:55:21.820 --> 00:55:25.370
You can have device rotation or
window resize or localization.

00:55:25.370 --> 00:55:27.630
These are all things that
can change your content.

00:55:27.760 --> 00:55:31.010
So as you're using Interface Builder,
as you're using Auto Layout,

00:55:31.010 --> 00:55:33.820
as you're writing it in code,
be thinking about these things.

00:55:33.820 --> 00:55:37.660
You can use those helpful debugging
defaults to help you perceive

00:55:37.660 --> 00:55:39.750
those changes ahead of time.

00:55:40.920 --> 00:55:43.830
If you have more information,
you can contact one of our evangelists.

00:55:44.030 --> 00:55:46.430
They'll be able to help you with
all your questions about the

00:55:46.550 --> 00:55:48.190
frameworks or about the tools.

00:55:48.450 --> 00:55:52.370
Check out the documentation for
OS X and for iOS for the human

00:55:52.690 --> 00:55:54.920
interface guidelines or for Auto Layout.

00:55:55.200 --> 00:55:59.520
Again, it's great because the API is
pretty much exactly the same.

00:56:01.700 --> 00:56:04.110
If you're watching the videos
or you're going to go watch the

00:56:04.110 --> 00:56:07.220
videos in a couple weeks from now,
check out these two sessions,

00:56:07.220 --> 00:56:09.860
the introduction to
Auto Layout session and the best

00:56:09.860 --> 00:56:11.940
practices for mastering Auto Layout.