WEBVTT

00:00:11.030 --> 00:00:12.570
Good morning.

00:00:12.910 --> 00:00:15.520
My name is Brian Tucker and
I am a manager in our

00:00:15.520 --> 00:00:17.080
Wireless Software Engineering group.

00:00:17.300 --> 00:00:20.500
Fundamentally,
I'm responsible pretty much for all

00:00:20.510 --> 00:00:23.200
Bluetooth technologies on iOS platforms.

00:00:23.310 --> 00:00:24.990
So this is CoreBluetooth 101.

00:00:25.070 --> 00:00:28.160
This is not basket weaving,
so if you are looking for that,

00:00:28.370 --> 00:00:29.800
you are in the wrong room.

00:00:29.990 --> 00:00:35.510
CoreBluetooth 101 primarily is an
API that focuses on Bluetooth Low Energy,

00:00:35.520 --> 00:00:40.100
which is a new technology that was
ratified by the Bluetooth standards body.

00:00:40.180 --> 00:00:45.370
I believe at the end of 2010,
it was introduced in our

00:00:45.700 --> 00:00:50.900
products last year with the
iOS 5 and with the iPhone 4S.

00:00:51.020 --> 00:00:53.760
And why do we think it's
important to talk about this

00:00:53.850 --> 00:00:56.000
technology with app developers?

00:00:56.070 --> 00:01:00.600
Well, I think that Low Energy,
in the sense of Low Energy,

00:01:00.600 --> 00:01:03.610
if you look at it from a
technology perspective,

00:01:03.610 --> 00:01:07.900
really applies to every single
person in this room as a consumer,

00:01:08.020 --> 00:01:09.300
but especially as a technologist.

00:01:09.300 --> 00:01:12.240
I'll give you an example.

00:01:12.310 --> 00:01:17.230
I was in China earlier this year
and I had the opportunity to speak

00:01:17.230 --> 00:01:21.450
on this topic in China and it was
in front of about 2,000 people.

00:01:21.530 --> 00:01:24.000
And in China, of course,
you have translators.

00:01:24.100 --> 00:01:29.780
And I had never spoken to a group
of people with translators before.

00:01:29.890 --> 00:01:34.180
And they were sitting over there in this
booth and they had put somebody in the

00:01:34.630 --> 00:01:36.680
front row to tell me when to slow down.

00:01:36.940 --> 00:01:38.500
Because like when you speak too fast,
the translator is going to slow down.

00:01:38.500 --> 00:01:41.480
And when you speak too fast,
the translators are like machine guns.

00:01:41.500 --> 00:01:44.180
You know, this stuff is just flying
out of their mouth,

00:01:44.180 --> 00:01:44.700
right?

00:01:44.700 --> 00:01:46.000
So they had this guy in the front.

00:01:46.000 --> 00:01:49.170
He was flashing this flashlight at
me and he'd flash the flashlight

00:01:49.170 --> 00:01:51.100
when I was talking too fast,
right?

00:01:51.100 --> 00:01:54.340
So I'm watching my timer here and
I know how many slides I have left

00:01:54.450 --> 00:01:57.350
and I realize there's no way I'm
going to get through the slides,

00:01:57.350 --> 00:01:57.900
right?

00:01:57.900 --> 00:02:01.450
So I look at him and he kind
of looks at me and we have this

00:02:01.450 --> 00:02:05.990
Western showdown thing and he
realizes I'm not going to slow down,

00:02:05.990 --> 00:02:06.690
right?

00:02:06.700 --> 00:02:07.660
So at any moment, I'm going to slow down.

00:02:07.790 --> 00:02:09.380
At any moment,
I'm pretty sure he's going to

00:02:09.540 --> 00:02:10.690
throw the flashlight at me.

00:02:10.950 --> 00:02:12.740
But we get through it.

00:02:12.900 --> 00:02:14.740
I get done on time.

00:02:14.740 --> 00:02:16.200
All the slides got done.

00:02:16.200 --> 00:02:19.590
I'm sure the, you know,
the translators are ready to shoot me.

00:02:19.840 --> 00:02:22.860
And so I walk down the stage
and I see the translator

00:02:22.970 --> 00:02:25.290
running across the stage at me.

00:02:25.300 --> 00:02:26.640
And I'm like, here it is.

00:02:26.720 --> 00:02:29.110
I'm going to get killed
by this translator guy,

00:02:29.110 --> 00:02:29.760
you know.

00:02:29.760 --> 00:02:32.620
And he comes up to me and he says,
that was amazing.

00:02:32.620 --> 00:02:34.370
You know, and I'm like, what?

00:02:34.580 --> 00:02:37.680
And he's like, you know,
I never talked that fast in my life.

00:02:37.680 --> 00:02:38.300
No.

00:02:38.300 --> 00:02:41.380
And he said,
I'm going to go home today and

00:02:41.550 --> 00:02:44.300
start working on this technology.

00:02:44.300 --> 00:02:47.240
And I was like, wow, okay.

00:02:47.360 --> 00:02:49.130
I didn't expect that, you know.

00:02:49.300 --> 00:02:51.690
So it really does apply to everyone.

00:02:51.950 --> 00:02:54.240
And so that's why we're
really excited about it.

00:02:54.450 --> 00:02:57.240
So the topics in this
session are threefold.

00:02:57.340 --> 00:02:59.670
So we have Bluetooth 4.0 low energy.

00:02:59.780 --> 00:03:03.150
So this is kind of a 101
of Bluetooth low energy.

00:03:03.280 --> 00:03:06.200
Hopefully, you'll come away from this
having at least some semblance

00:03:06.200 --> 00:03:07.460
of what low energy can do.

00:03:07.790 --> 00:03:08.200
Right?

00:03:08.200 --> 00:03:10.860
Then we'll talk about core Bluetooth.

00:03:10.910 --> 00:03:12.640
Now, core Bluetooth is our framework.

00:03:12.700 --> 00:03:14.770
And if you don't know
what core Bluetooth is,

00:03:15.040 --> 00:03:17.600
hopefully by the end of this,
you'll at least have some idea.

00:03:17.710 --> 00:03:20.840
And then Joachim will go into this
in a lot more detail after lunch.

00:03:20.900 --> 00:03:23.490
And then we'll actually give you a demo.

00:03:23.500 --> 00:03:27.380
So we'll demo one of the
sample apps that we actually

00:03:27.380 --> 00:03:29.800
have up on the developer site.

00:03:29.900 --> 00:03:30.570
All right.

00:03:30.840 --> 00:03:31.600
So let's get busy.

00:03:31.700 --> 00:03:33.620
Bluetooth 4.0 low energy.

00:03:33.760 --> 00:03:37.590
So I want you guys to consider this
as kind of your BTLE 101 class.

00:03:37.700 --> 00:03:39.790
There will be a diploma at the end of it.

00:03:39.930 --> 00:03:44.200
So stay through the whole session and
you'll be able to go make money on this.

00:03:44.260 --> 00:03:45.000
No, seriously.

00:03:45.000 --> 00:03:48.500
So some key concepts that
we'll be learning here.

00:03:48.500 --> 00:03:52.700
Things like advertising,
concepts like device discovery,

00:03:52.700 --> 00:03:57.320
connection management, what a service is,
what a characteristic is.

00:03:57.400 --> 00:04:01.960
All that stuff we'll cover
in the next 20 or 30 minutes.

00:04:04.710 --> 00:04:06.850
So what's the big idea
with Bluetooth Low Energy?

00:04:07.240 --> 00:04:11.180
Well, most of you can probably
guess that the big idea with

00:04:11.280 --> 00:04:12.600
Bluetooth Low Energy is this guy.

00:04:12.600 --> 00:04:14.590
It's the 2032.

00:04:14.600 --> 00:04:16.780
So for those of you that
don't know what this is,

00:04:16.850 --> 00:04:18.800
this is your standard coin cell battery.

00:04:18.800 --> 00:04:20.480
Works off of three volts.

00:04:20.580 --> 00:04:22.590
They come in different capacities.

00:04:22.600 --> 00:04:26.400
And the idea is that we
can now make accessories.

00:04:26.400 --> 00:04:28.430
We can now make products.

00:04:28.600 --> 00:04:30.600
Don't even call them accessories.

00:04:30.600 --> 00:04:33.600
But we can make stuff
that runs on a really,

00:04:33.600 --> 00:04:37.600
really cheap,
low energy or low power source battery.

00:04:37.600 --> 00:04:41.260
And the iOS device can talk to it,
can have a conversation,

00:04:41.320 --> 00:04:43.480
and it can provide information.

00:04:43.590 --> 00:04:46.510
And you're like, okay, well,
that's kind of cool.

00:04:46.590 --> 00:04:47.530
But what does it really mean?

00:04:47.660 --> 00:04:50.570
What does it give to the consumer, right?

00:04:50.650 --> 00:04:51.600
What's the big idea?

00:04:51.600 --> 00:04:56.600
Well, we do it through three ways.

00:04:56.600 --> 00:05:01.600
And it's really not rocket science here,
so don't expect any miracles.

00:05:01.600 --> 00:05:04.600
But the first one is obviously
we spend less time in the air.

00:05:04.600 --> 00:05:07.600
We spend less time communicating
between the two devices.

00:05:07.600 --> 00:05:09.410
That's pretty obvious, right?

00:05:09.880 --> 00:05:12.600
Well, in addition to that,
we send less data.

00:05:12.600 --> 00:05:16.110
So anybody that's expecting to
do gigabit data rates on LE,

00:05:16.110 --> 00:05:19.890
again, you can go find another session
because you're not going

00:05:19.890 --> 00:05:20.600
to do that in Bluetooth 3.

00:05:20.600 --> 00:05:23.130
And that's not its intention, right?

00:05:23.130 --> 00:05:26.040
Bluetooth LE is intended
for very low power.

00:05:26.040 --> 00:05:29.090
Remember,
we're going back to that coin cell.

00:05:29.090 --> 00:05:32.370
And the coin cell is not going
to last more than a day if

00:05:32.370 --> 00:05:36.530
you're constantly sending data
over and over and over again.

00:05:36.600 --> 00:05:40.440
And finally, really,
LE is a whole new architecture.

00:05:40.510 --> 00:05:45.240
So some people have asked me, well,
why can't I do LE on an iPhone 4?

00:05:45.240 --> 00:05:47.600
Why can't I do LE on the old iPads?

00:05:47.600 --> 00:05:49.580
And there really is a difference
at the fundamental level.

00:05:49.600 --> 00:05:54.000
This is a different at the fundamental
level of the baseband itself,

00:05:54.000 --> 00:05:56.580
of the radio, right, and the filer.

00:05:56.670 --> 00:05:57.600
The timing is different.

00:05:57.600 --> 00:06:01.600
The relationship between Bluetooth LE and
classic Bluetooth or basic rate,

00:06:01.600 --> 00:06:05.590
enhanced data rate completely changes.

00:06:05.600 --> 00:06:10.410
So with these three models,
we've defined this kind of

00:06:10.410 --> 00:06:13.520
concept of Bluetooth Low Energy.

00:06:13.600 --> 00:06:18.600
So let's compare it with what we
expect with classic Bluetooth.

00:06:18.600 --> 00:06:22.960
So this is a chart, albeit simple,
but a chart that shows

00:06:23.260 --> 00:06:25.260
you how much energy,
per se,

00:06:25.260 --> 00:06:28.590
does it take to send an 8-byte packet.

00:06:28.610 --> 00:06:30.510
And it's quite a bit of savings.

00:06:30.600 --> 00:06:32.410
It's not quite 10x, but it's pretty good.

00:06:32.580 --> 00:06:36.330
Now, it doesn't necessarily
always have to be like this.

00:06:36.630 --> 00:06:39.870
As we see generational steps in
Bluetooth Low Energy devices,

00:06:39.870 --> 00:06:42.530
we're seeing improvements in this,
actually.

00:06:42.570 --> 00:06:44.580
And this is getting better
and better every day.

00:06:44.600 --> 00:06:47.600
Sensitivity is going up.

00:06:47.600 --> 00:06:53.510
The amount of power used to
send traffic is going down.

00:06:53.600 --> 00:06:55.600
The devices are getting smaller,
all that kind of stuff.

00:06:55.600 --> 00:06:57.600
Efficiency is improving.

00:06:57.830 --> 00:07:01.600
But if we compare this
against actual data rates,

00:07:01.650 --> 00:07:06.420
you can see that, well,
you can't send very much data on LE,

00:07:06.690 --> 00:07:07.580
all right?

00:07:07.700 --> 00:07:09.600
So you have to have a real expectation.

00:07:09.600 --> 00:07:11.600
And in reality, this is theoretical.

00:07:11.600 --> 00:07:16.600
If we take the actual, the real data,
it's actually much lower.

00:07:16.660 --> 00:07:20.520
So in reality,
you're going to see about a 50 kbps

00:07:20.520 --> 00:07:23.600
data rate with Bluetooth Low Energy.

00:07:23.630 --> 00:07:25.430
And that's really pushing it.

00:07:25.730 --> 00:07:29.230
That's downhill with a stiff
wind falling off a cliff.

00:07:29.600 --> 00:07:32.600
Now, that's not easy.

00:07:32.600 --> 00:07:34.600
And Bluetooth, we put 1200 there.

00:07:34.600 --> 00:07:36.600
It could be better.

00:07:36.600 --> 00:07:38.500
It could be -- we've seen 1700.

00:07:38.600 --> 00:07:40.420
Gus will argue that we've seen better.

00:07:40.540 --> 00:07:42.600
But 1200 is pretty realistic.

00:07:42.600 --> 00:07:45.590
So you're just not going to
get a lot of data through LE.

00:07:45.600 --> 00:07:49.530
So is that clear, hopefully?

00:07:49.600 --> 00:07:50.600
I get that a lot.

00:07:50.810 --> 00:07:51.600
All right.

00:07:51.600 --> 00:07:57.040
So before we get into how it works,
I thought it would be really useful --

00:07:57.220 --> 00:08:02.440
to maybe give you guys some use cases
on why we think LE is so exciting.

00:08:02.440 --> 00:08:05.890
And remember I said at the beginning
that LE really does apply to everyone.

00:08:05.900 --> 00:08:08.470
And I truly, honestly believe that.

00:08:08.500 --> 00:08:14.610
There's this concept that's lived,
you know, in academic fields and in

00:08:14.610 --> 00:08:18.410
certain industrial fields,
this concept of the Internet of Things,

00:08:18.410 --> 00:08:18.940
right?

00:08:19.030 --> 00:08:22.600
This concept that you have this
cloud of technology around you or

00:08:22.600 --> 00:08:25.970
this cloud of devices around you,
and your device can start

00:08:26.110 --> 00:08:28.420
interacting with those devices,
right?

00:08:28.420 --> 00:08:31.520
Well,
we think LE really does enable that,

00:08:31.600 --> 00:08:32.300
right?

00:08:32.300 --> 00:08:35.240
Now, other radios to a certain
extent do it as well,

00:08:35.240 --> 00:08:37.020
but LE really, really does.

00:08:37.140 --> 00:08:38.180
It's simple.

00:08:38.180 --> 00:08:39.160
It's easy to use.

00:08:39.160 --> 00:08:40.680
It's low power, right?

00:08:40.680 --> 00:08:43.140
So let's go through
some of these use cases.

00:08:43.140 --> 00:08:45.410
So the first one,
and the one that I think

00:08:45.410 --> 00:08:47.710
is really exciting,
is health care.

00:08:47.720 --> 00:08:51.220
And health care and exciting,
I know that's kind of weird,

00:08:51.220 --> 00:08:54.600
but health care is hugely useful.

00:08:54.780 --> 00:08:56.780
It's a really good example
for Bluetooth Low Energy.

00:08:56.780 --> 00:08:58.980
In fact,
the Continua Healthcare Alliance,

00:08:58.980 --> 00:09:03.180
which is a consortium of companies
that have come together to kind of

00:09:03.240 --> 00:09:06.290
create standards around health care,
they've actually standardized

00:09:06.490 --> 00:09:07.770
around Bluetooth LE.

00:09:07.840 --> 00:09:11.780
So that means, like, when you go to the
hospital and they have,

00:09:11.780 --> 00:09:14.740
like, an EKG system,
or they're monitoring your heart rate,

00:09:14.900 --> 00:09:17.780
or they're measuring your
blood levels or whatever,

00:09:17.920 --> 00:09:22.020
all of those probes on your
body can all be LE and wireless,

00:09:22.020 --> 00:09:22.690
right?

00:09:22.780 --> 00:09:24.760
And it just goes on and on and on.

00:09:24.890 --> 00:09:27.710
Stethoscopes, blood pressure cuffs,
I mean,

00:09:27.810 --> 00:09:31.990
everything can be wireless now because
they can make a device that runs

00:09:31.990 --> 00:09:36.780
off a battery that can literally
live on that battery for months,

00:09:36.780 --> 00:09:38.780
and in some cases even years, right?

00:09:38.780 --> 00:09:41.860
So another use case that's
really close to health care,

00:09:42.010 --> 00:09:44.780
but it's not really health care,
is sports and fitness.

00:09:44.780 --> 00:09:47.780
And this is an obvious low-hanging
fruit for Bluetooth Low Energy.

00:09:47.780 --> 00:09:52.620
We're already seeing products
that use LE in this space today.

00:09:52.800 --> 00:09:53.740
In fact, the heart rate monitor.

00:09:53.790 --> 00:09:57.600
And there's a few companies,
Wahoo has one,

00:09:57.970 --> 00:10:00.740
Polar has one that just came out.

00:10:00.820 --> 00:10:05.780
In fact, my shoes right now have
LE sensors in them made by Nike.

00:10:05.780 --> 00:10:10.780
So it's starting to become really,
really active in the sports and fitness,

00:10:10.780 --> 00:10:13.780
and given the kind of conversations
we've had with companies,

00:10:13.780 --> 00:10:15.570
it's just going to get bigger.

00:10:16.500 --> 00:10:17.780
Security.

00:10:17.780 --> 00:10:21.950
So most people don't think about this,
but consider your phone as

00:10:22.060 --> 00:10:28.030
the key to your car or to
your office or to your home,

00:10:28.040 --> 00:10:28.570
right?

00:10:28.780 --> 00:10:34.660
With LE and the fact it's using AES-128
and you can create an encryption link

00:10:34.840 --> 00:10:38.780
and you can do a defined key model
sharing between these two devices,

00:10:38.830 --> 00:10:43.780
it's really,
really useful in security applications.

00:10:44.960 --> 00:10:47.150
automation, and in this case,
home automation.

00:10:47.150 --> 00:10:52.300
Now, I realize there's a lot of different
competing technologies in this space.

00:10:52.300 --> 00:10:55.700
Smart energy seems to be focused
more on things like ZigBee and

00:10:55.700 --> 00:10:59.090
some of these other technologies,
and those are great,

00:10:59.150 --> 00:11:02.620
but Ellie clearly has a practical
use case in home automation,

00:11:02.840 --> 00:11:06.210
and more specifically, if I, you know,
what's the one thing you always have,

00:11:06.210 --> 00:11:06.640
right?

00:11:06.640 --> 00:11:08.440
I have it in my back pocket right now.

00:11:08.580 --> 00:11:09.340
It's your phone.

00:11:09.370 --> 00:11:11.640
It's your iPhone,
so as you're walking around the

00:11:11.770 --> 00:11:15.710
house and I walk into a room,
well, that room knows what I like, right?

00:11:15.950 --> 00:11:18.070
It knows what the temperature should be.

00:11:18.070 --> 00:11:20.660
It knows what the light should be, right?

00:11:20.660 --> 00:11:23.320
It knows what the ceiling
fan should be on or not.

00:11:23.320 --> 00:11:26.770
I mean, there's a lot of automation,
and that's just really simple stuff,

00:11:26.820 --> 00:11:27.930
right?

00:11:28.100 --> 00:11:29.000
So home automation.

00:11:29.000 --> 00:11:33.000
And then something very closely
related to that is home entertainment,

00:11:33.260 --> 00:11:33.490
right?

00:11:33.910 --> 00:11:37.620
And this is another really obvious one,
but I think it's super exciting,

00:11:37.620 --> 00:11:40.640
is that now your iPhone,
and not necessarily just your iPhone,

00:11:40.640 --> 00:11:44.030
but your remote control can have
a two-way conversation with the

00:11:44.120 --> 00:11:45.880
entertainment devices in your home.

00:11:46.000 --> 00:11:48.980
Craigdooley,
Brian Tucker So if I go to Amazon and

00:11:48.980 --> 00:11:52.040
I buy my new Blu-ray player or whatever,
or my Apple TV,

00:11:52.040 --> 00:11:55.330
which is more appropriate,
it might have a conversation

00:11:55.330 --> 00:11:57.000
with those two devices,
right?

00:11:57.000 --> 00:12:00.620
It might immediately know, "Oh,
you just bought a Blu-ray player,

00:12:00.630 --> 00:12:03.000
so clearly you can hit play," you know?

00:12:03.000 --> 00:12:04.000
And it can even go beyond that.

00:12:04.000 --> 00:12:08.370
And the Blu-ray itself could provide
information to the iOS device,

00:12:08.400 --> 00:12:12.990
and it's just -- the sky's the limit when
it comes to LE and home entertainment.

00:12:13.000 --> 00:12:14.570
Craigdooley, Brian Tucker The devices
can talk to each other,

00:12:14.630 --> 00:12:15.000
you know?

00:12:15.200 --> 00:12:18.030
Craigdooley, Brian Tucker So again,
start thinking about it as

00:12:18.080 --> 00:12:21.290
it relates to doing the same
thing you're doing over a wire,

00:12:21.290 --> 00:12:23.940
at least from a command
and control perspective,

00:12:24.040 --> 00:12:26.110
over the wireless link, right?

00:12:26.360 --> 00:12:27.300
Toys.

00:12:27.300 --> 00:12:31.290
So as a father of two young kids,
this is huge for me, right?

00:12:31.300 --> 00:12:34.290
And the reason I have children,
at least my wife would say,

00:12:34.400 --> 00:12:36.420
is so that I can play with their toys.

00:12:36.420 --> 00:12:38.180
And it's awesome, right?

00:12:38.180 --> 00:12:40.670
So with LE,
it just -- the sky's the limit.

00:12:40.830 --> 00:12:43.500
I mean, think about the fact that
you can go buy a toy,

00:12:43.500 --> 00:12:45.940
and my kids already love the iPad.

00:12:45.940 --> 00:12:48.230
So now the iPad extends to the toy.

00:12:48.230 --> 00:12:51.140
And it's like it's a robot,
so they can program the robot

00:12:51.140 --> 00:12:52.300
to do a bunch of things.

00:12:52.300 --> 00:12:55.190
Or it's an interactive board
game that ties the board

00:12:55.190 --> 00:12:57.480
game directly with the iPad,
right?

00:12:57.480 --> 00:13:00.100
And they can do it,
and you guys can do it at a cost

00:13:00.100 --> 00:13:02.160
that makes sense to the consumer.

00:13:02.270 --> 00:13:05.590
It's not like they're having to go
out and spend $200 for a board game.

00:13:05.740 --> 00:13:08.580
You know, the costs of these products are
actually getting lower and lower,

00:13:08.580 --> 00:13:11.020
and LE is a huge part of that.

00:13:11.020 --> 00:13:13.010
Pay systems.

00:13:13.520 --> 00:13:17.350
So obviously there's other technologies
that resolve around pay systems

00:13:17.350 --> 00:13:20.230
and NFC clearly is one of them,
but I would argue that

00:13:20.230 --> 00:13:23.000
LE is actually really,
really good for this.

00:13:23.120 --> 00:13:28.740
It's secure, it's localized,
it's easy to use.

00:13:28.840 --> 00:13:33.190
Some fundamental things can
happen around LE and pay.

00:13:33.330 --> 00:13:34.890
Time.

00:13:34.890 --> 00:13:38.230
So with time services,
what do I mean by that?

00:13:38.890 --> 00:13:43.160
Well, if you look around you,
there's clocks everywhere.

00:13:43.160 --> 00:13:45.140
There's clocks in your car.

00:13:45.170 --> 00:13:46.800
There's clocks on your microwave.

00:13:46.860 --> 00:13:49.500
There's clocks in your
home entertainment system.

00:13:49.560 --> 00:13:52.230
There's your alarm clock in your bedroom.

00:13:52.370 --> 00:13:54.800
Some of you may even have VCRs.

00:13:54.800 --> 00:14:00.200
If you do, you need help, but it may be,
you know, flashing a 12 on that thing.

00:14:00.860 --> 00:14:02.170
Think about your phone.

00:14:02.170 --> 00:14:04.350
Your phone always knows what time it is.

00:14:04.350 --> 00:14:08.860
So as a time service model,
you can walk around your entire space and

00:14:08.980 --> 00:14:12.050
be completely syncing all of your time,
right?

00:14:12.420 --> 00:14:15.020
You go to a new place,
you walk into a hotel room,

00:14:15.020 --> 00:14:17.560
the clock on the hotel room is wrong,
it instantly goes to the

00:14:17.560 --> 00:14:19.040
time that you care about,
right?

00:14:19.210 --> 00:14:19.800
Time services.

00:14:19.800 --> 00:14:23.190
Doesn't sound like it's too exciting,
but for me, I would love it.

00:14:27.660 --> 00:14:28.870
What do I mean by proximity?

00:14:28.870 --> 00:14:35.890
Well, radio models are somewhat
good at determining distance,

00:14:36.040 --> 00:14:36.240
right?

00:14:36.240 --> 00:14:39.350
And we can do it through the
calculation of the propagation

00:14:39.350 --> 00:14:42.300
of the signal across air,
and we know the signal level of

00:14:42.300 --> 00:14:44.810
the receiver and the transmit
output power of the devices,

00:14:44.870 --> 00:14:48.440
and we won't get into all that,
but the idea is that we can determine

00:14:48.440 --> 00:14:50.850
that something else is near me,
right?

00:14:51.010 --> 00:14:54.690
So when I walked into that
room and knows I'm in the room,

00:14:55.020 --> 00:14:58.580
when I walk up next to my car,
my car just unlocks, right?

00:14:58.580 --> 00:15:01.310
And it's based on security and proximity.

00:15:01.310 --> 00:15:04.520
There's a ton of stuff
you can do with proximity.

00:15:04.520 --> 00:15:07.120
In fact,
in the Advanced Core Bluetooth session,

00:15:07.130 --> 00:15:11.960
we have a demo that's really cool that
Krav put together that does proximity,

00:15:11.960 --> 00:15:13.560
and I won't spoil the fun.

00:15:13.840 --> 00:15:15.170
It's really cool.

00:15:15.170 --> 00:15:18.700
So that's some of the use
cases around Bluetooth LE,

00:15:18.720 --> 00:15:21.210
and there's a bajillion more than this,
but hopefully you'll be able to see some

00:15:21.210 --> 00:15:21.380
of the use cases around Bluetooth LE.

00:15:21.380 --> 00:15:21.380
So that's some of the use
cases around Bluetooth LE,

00:15:21.380 --> 00:15:22.120
and there's a bajillion more than this,
but hopefully this kind

00:15:22.120 --> 00:15:26.240
of whets your whistle,
and it really gives you some ideas.

00:15:26.240 --> 00:15:28.740
Oh, wow, LE really is useful.

00:15:28.740 --> 00:15:31.100
There's really some
interesting use cases for this.

00:15:31.100 --> 00:15:32.940
Okay, enough of that.

00:15:33.000 --> 00:15:34.960
So let's get into some key terms.

00:15:34.980 --> 00:15:38.980
The first one is this concept
of dual mode and single mode.

00:15:38.980 --> 00:15:40.680
So what does this mean?

00:15:42.630 --> 00:15:46.780
Dual mode is probably most of the
devices you are using right now.

00:15:46.830 --> 00:15:51.460
I'm assuming all of you went out
and bought the new MacBook Pro,

00:15:51.460 --> 00:15:55.620
MacBook Air, I doubt you have Macminis,
or an iPhone.

00:15:56.000 --> 00:15:57.440
Those are all dual mode.

00:15:57.440 --> 00:16:02.020
They can do both classic Bluetooth and
they can do Bluetooth Low Energy,

00:16:02.030 --> 00:16:02.650
right?

00:16:02.680 --> 00:16:05.720
Well,
a single mode device is exactly that.

00:16:05.720 --> 00:16:09.320
It does one thing,
and in the case of this topic,

00:16:09.320 --> 00:16:10.520
it does Low Energy.

00:16:10.520 --> 00:16:11.780
That's all it does.

00:16:11.780 --> 00:16:15.040
And so you will start to see
more single mode devices that can

00:16:15.320 --> 00:16:17.460
interact with dual mode devices.

00:16:17.460 --> 00:16:20.350
And single mode devices can
actually interact with other

00:16:20.350 --> 00:16:22.160
single mode devices as well.

00:16:22.160 --> 00:16:24.550
But as you see this described
in the spec and you see it

00:16:24.550 --> 00:16:28.430
described in our documentation,
this will become -- hopefully now

00:16:28.430 --> 00:16:31.100
you understand what that means.

00:16:31.100 --> 00:16:37.540
So another key concept is nothing that
should be new to anybody in this room,

00:16:37.540 --> 00:16:39.360
CES 101, but

00:16:39.700 --> 00:16:56.500
[Transcript missing]

00:16:57.120 --> 00:17:00.740
The concept here is the
server has some data.

00:17:00.800 --> 00:17:02.700
Let's use the heart rate
monitor as an example.

00:17:02.700 --> 00:17:06.460
So the heart rate monitor has my heart
rate strapped to my chest right now.

00:17:06.590 --> 00:17:09.250
It's probably running
at 120 beats a minute.

00:17:09.380 --> 00:17:10.680
: I'm going to die.

00:17:10.680 --> 00:17:12.800
The client wants that data.

00:17:12.800 --> 00:17:15.370
So my phone wants to know what I'm doing.

00:17:15.630 --> 00:17:15.850
Right?

00:17:15.850 --> 00:17:18.300
So this is a really basic concept.

00:17:18.300 --> 00:17:23.320
So if we look at this as it relates
to the Bluetooth definition of this,

00:17:23.320 --> 00:17:28.760
you have this concept called peripheral
and this concept called central.

00:17:28.770 --> 00:17:30.970
I didn't make up these names.

00:17:30.970 --> 00:17:33.080
This is not something I did.

00:17:33.080 --> 00:17:35.020
Central, not sure I like the name,
but we're stuck with it.

00:17:35.020 --> 00:17:35.020
That's in the spec.

00:17:35.790 --> 00:17:39.050
So as you would imagine,
these are the devices that would

00:17:39.160 --> 00:17:41.580
be a central or a peripheral.

00:17:41.900 --> 00:20:19.400
[Transcript missing]

00:20:21.090 --> 00:20:24.540
So to make it a little bit more real,
I thought it would be useful

00:20:24.560 --> 00:20:27.230
to explain to you that this is
actually what's happening is

00:20:27.230 --> 00:20:30.660
that your peripheral is actually
advertising on multiple frequencies.

00:20:30.940 --> 00:20:35.500
There's actually 40 frequencies
within the Bluetooth LE spectrum,

00:20:35.500 --> 00:20:39.020
2 megahertz wide,
and within those intervals we have

00:20:39.020 --> 00:20:41.350
these three advertising channels.

00:20:41.450 --> 00:20:47.270
And what's happening is that that
device is broadcasting on channel 37,

00:20:47.270 --> 00:20:47.940
38, 39 with a little gap in between.

00:20:48.520 --> 00:20:52.460
So what's happening is the scanner,
the observer, the iPhone in this case,

00:20:52.480 --> 00:20:55.680
is listening on one channel,
and we see that packet.

00:20:55.680 --> 00:20:58.600
And then it's doing it again,
advertising on three packets,

00:20:58.680 --> 00:21:02.460
and we're scanning on that channel,
and we're listening on that packet.

00:21:02.460 --> 00:21:05.720
So it's really, really important for your
accessories to be using all

00:21:05.720 --> 00:21:07.340
of your advertising channels.

00:21:07.380 --> 00:21:09.740
Really,
really important for discovery time.

00:21:09.740 --> 00:21:10.730
And guess what?

00:21:10.830 --> 00:21:12.720
There's that advertising interval again,
right?

00:21:12.860 --> 00:21:16.890
And the advertising interval,
hopefully you can start to see why

00:21:16.890 --> 00:21:21.150
advertising interval is directly
related to how quickly your app can

00:21:21.150 --> 00:21:24.170
discover a Bluetooth LE accessory,
right?

00:21:25.680 --> 00:21:27.490
All right, so let's talk about
setting up the connection.

00:21:27.520 --> 00:21:30.630
So now that we've discovered the device,
now that we know it's out there,

00:21:30.640 --> 00:21:33.460
my heart rate monitor is advertising,
my phone wants to talk to it,

00:21:33.460 --> 00:21:34.220
what happens?

00:21:34.420 --> 00:21:39.200
Well, it's advertising, we're scanning,
we see that device, it's really simple.

00:21:39.200 --> 00:21:42.790
All we do is we turn that around
and we send a connection interval.

00:21:42.800 --> 00:21:44.840
I'm sorry, a connection request.

00:21:44.940 --> 00:21:47.380
And the connection request
goes back to the accessory,

00:21:47.380 --> 00:21:51.300
it accepts,
and something magical happens.

00:21:51.300 --> 00:21:55.060
These two devices now become
central and peripheral.

00:21:55.600 --> 00:21:57.960
The peripheral is the
device that was advertising,

00:21:58.010 --> 00:22:01.920
and the central is the device that wants
to talk to that advertising peripheral,

00:22:02.110 --> 00:22:02.460
okay?

00:22:02.460 --> 00:22:05.660
And at this point, they're just going to
start exchanging data.

00:22:05.660 --> 00:22:07.480
Pretty basic, okay?

00:22:07.480 --> 00:22:14.680
Now, if we look at how we send data,
there's another key term here that

00:22:14.680 --> 00:22:18.660
you guys should burn in your brain,
and that's connection interval.

00:22:18.660 --> 00:22:21.880
So if we look at how these
devices are communicating,

00:22:21.880 --> 00:22:25.550
the central says, hey,
do you have any data in the peripheral?

00:22:25.600 --> 00:22:27.600
And the peripheral says, yep,
here's some data.

00:22:27.600 --> 00:22:29.260
And then again, hey,
do you have any data?

00:22:29.260 --> 00:22:30.360
Yep, here's some data.

00:22:30.360 --> 00:22:31.220
Do you have any data?

00:22:31.310 --> 00:22:32.260
Yep, here's some data.

00:22:32.260 --> 00:22:34.260
And if it doesn't have any data, it says,
nope, I don't have any.

00:22:34.260 --> 00:22:36.260
And it's actually a little bit
more complicated than that,

00:22:36.260 --> 00:22:37.260
but you get the concept.

00:22:38.520 --> 00:22:39.400
Now guess what?

00:22:39.400 --> 00:22:43.680
That connection interval is the interval
at which you can send one set of data

00:22:44.000 --> 00:22:46.900
and then send the next set of data
and then send the next set of data,

00:22:46.900 --> 00:22:47.400
right?

00:22:47.400 --> 00:22:51.520
And the reason it does this is because
it can't just constantly be transmitting.

00:22:51.520 --> 00:22:54.000
Again, we go back to the original idea
and that was the coin cell battery,

00:22:54.000 --> 00:22:54.400
right?

00:22:54.400 --> 00:22:58.100
So if we have to have an interval
to how we communicate because,

00:22:58.230 --> 00:23:02.400
again, we're trying to save power,
the connection interval, guess what,

00:23:02.400 --> 00:23:05.400
directly ties to how fast
you can send the data,

00:23:05.400 --> 00:23:06.400
right?

00:23:06.400 --> 00:23:10.400
Because we can't send a whole lot
of data in one particular packet.

00:23:10.400 --> 00:23:14.390
Let's just say it's, you know,
20 or so bytes.

00:23:14.490 --> 00:23:18.540
Now you can start to see why LE is
not designed for high bandwidth,

00:23:18.740 --> 00:23:19.060
okay?

00:23:19.520 --> 00:23:24.400
Now you can send multiple sets of data
within a single connection interval.

00:23:24.400 --> 00:23:25.400
In this case, I sent two.

00:23:25.420 --> 00:23:28.400
And that just can continue
within that connection interval.

00:23:28.400 --> 00:23:32.400
But again,
this directly ties to your battery life.

00:23:32.400 --> 00:23:34.400
I think I've harped on that enough.

00:23:34.720 --> 00:23:36.400
Topology.

00:23:36.400 --> 00:23:38.400
So let's talk about
topology for a minute.

00:23:38.590 --> 00:23:40.390
So two key concepts.

00:23:40.390 --> 00:23:44.400
The first is this concept of advertising,
okay?

00:23:44.400 --> 00:23:48.320
So the advertiser,
the broadcaster can advertise

00:23:48.320 --> 00:23:50.400
to multiple observers.

00:23:50.400 --> 00:23:54.400
So if I had my heart rate
monitor belt on right now,

00:23:54.400 --> 00:23:58.390
every single one in this room
could see all that advertising.

00:23:58.400 --> 00:24:00.840
If, for example,
somewhere on the wall is a thermostat

00:24:00.860 --> 00:24:02.400
and it advertises temperature,
every single one in this room

00:24:02.400 --> 00:24:02.400
could see all that advertising.

00:24:02.400 --> 00:24:03.080
If, for example,
somewhere on the wall is a thermostat

00:24:03.080 --> 00:24:03.840
and it advertises temperature,
every single one in this room

00:24:03.850 --> 00:24:04.400
could see all that advertising.

00:24:04.400 --> 00:24:06.020
Everybody in this room would know
what the temperature of the room is,

00:24:06.030 --> 00:24:06.400
right?

00:24:06.400 --> 00:24:12.090
Some really powerful things can
happen with this kind of topology.

00:24:12.400 --> 00:24:12.400
A plant soil moisture device in my
backyard could be broadcasting a

00:24:12.400 --> 00:24:12.400
little bit of information in the
advertising packet that tells every

00:24:12.400 --> 00:24:12.400
device in my home what's going on,
right?

00:24:12.400 --> 00:24:17.490
A plant soil moisture device in my
backyard could be broadcasting a

00:24:17.560 --> 00:24:22.880
little bit of information in the
advertising packet that tells every

00:24:22.880 --> 00:24:26.430
device in my home what's going on,
right?

00:24:26.990 --> 00:24:28.030
So that's that topology.

00:24:28.040 --> 00:24:32.290
And then once we're connected,
a peripheral can only be

00:24:32.290 --> 00:24:34.020
connected to one central.

00:24:34.020 --> 00:24:36.660
Now, a central can be connected
to multiple peripherals,

00:24:36.660 --> 00:24:39.480
and certainly we allow that within iOS.

00:24:39.500 --> 00:24:43.200
And then one exception to this is that,
in iOS at least,

00:24:43.200 --> 00:24:46.400
you can have multiple centrals
connected to your peripheral.

00:24:46.400 --> 00:24:49.860
We don't make that limitation
within our product.

00:24:49.920 --> 00:24:51.720
So that's topology.

00:24:51.780 --> 00:24:53.840
So what's the data look like?

00:24:53.850 --> 00:24:55.860
How do we exchange information?

00:24:55.860 --> 00:25:01.180
Well, two main concepts-- services
and characteristics.

00:25:01.190 --> 00:25:05.780
Services are a description
of the set of data.

00:25:05.810 --> 00:25:11.920
So pull out your XML hat for a minute
and think of it in terms of this tree.

00:25:11.950 --> 00:25:14.760
So if we have this
definition of a server,

00:25:14.760 --> 00:25:17.180
and we have this service
within that server,

00:25:17.360 --> 00:25:19.200
and we're going to call
it our heart rate monitor.

00:25:19.340 --> 00:25:24.240
So this polar belt has this
definition of information.

00:25:24.240 --> 00:25:25.680
And there's a standard for this,
actually,

00:25:25.680 --> 00:25:29.980
that's in the Bluetooth standards
body on how to do this.

00:25:30.120 --> 00:25:31.920
But this service is
called heart rate monitor.

00:25:31.940 --> 00:25:33.980
Well,
there could be multiple characteristics

00:25:33.980 --> 00:25:35.780
that relate to that service.

00:25:35.780 --> 00:25:37.900
And in this case, we have two.

00:25:37.900 --> 00:25:38.940
And there's more than that.

00:25:39.040 --> 00:25:40.320
But in this case, there's two.

00:25:40.510 --> 00:25:43.370
The first one is pretty
obvious-- my heart rate.

00:25:43.800 --> 00:25:46.460
But the next one might
be less than obvious,

00:25:46.460 --> 00:25:48.260
but really useful is where is it?

00:25:48.370 --> 00:25:49.290
Is it on my wrist?

00:25:49.410 --> 00:25:50.410
Is it on my chest?

00:25:50.610 --> 00:25:51.700
Is it on my neck?

00:25:51.850 --> 00:25:57.150
And that may change the telemetry aspects
of the data recording for heart rate,

00:25:57.150 --> 00:25:59.310
especially in healthcare.

00:25:59.390 --> 00:26:01.720
So that's kind of the basics of
a server and characteristics.

00:26:01.840 --> 00:26:03.860
So let's tear down a characteristic.

00:26:03.860 --> 00:26:06.080
What does that consist of?

00:26:06.500 --> 00:26:07.740
So the first thing is the type.

00:26:07.870 --> 00:26:09.900
Now, this is a key point.

00:26:09.960 --> 00:26:13.240
It has a UUID,
or Universal Unique Identifier.

00:26:13.330 --> 00:26:16.300
Everything in LE,
everything in CoreBluetooth

00:26:16.390 --> 00:26:17.400
is based on UUIDs.

00:26:17.400 --> 00:26:20.340
And Joachim will go into more detail
on exactly how to generate them and

00:26:20.350 --> 00:26:24.200
why they're important and what's the
difference between a Bluetooth standard

00:26:24.200 --> 00:26:27.400
UUID versus one that you generate.

00:26:27.400 --> 00:26:30.400
One is 16-bit, one is 128-bit,
that kind of stuff.

00:26:30.400 --> 00:26:33.400
But this identifies this characteristic.

00:26:33.400 --> 00:26:35.190
Second is value.

00:26:35.190 --> 00:26:37.400
Now, we don't type the value.

00:26:37.400 --> 00:26:42.400
We don't say this is a string or this
is a byte or an integer or whatever.

00:26:42.400 --> 00:26:44.400
It's just a blob to us.

00:26:44.400 --> 00:26:49.230
We take it from the server
and we hand it to the app.

00:26:49.590 --> 00:26:49.970
Right?

00:26:50.030 --> 00:26:53.370
We take it from the app and
we hand it to the accessory.

00:26:53.870 --> 00:26:54.070
Right?

00:26:54.400 --> 00:26:57.720
There's some properties
about the characteristic.

00:26:57.720 --> 00:26:58.800
Can we read to it?

00:26:58.850 --> 00:27:00.310
Or can we read from it?

00:27:00.400 --> 00:27:00.400
Can we write to it?

00:27:00.470 --> 00:27:04.230
Can this support notifications?

00:27:04.630 --> 00:27:08.540
Notifications are kind of cool because
what you can do in Client Config is

00:27:08.540 --> 00:27:11.400
you can turn on notifications for
characteristics that support it.

00:27:11.400 --> 00:27:14.400
And the server will
automatically feed you updates.

00:27:14.400 --> 00:27:16.400
So you don't have to keep saying,
"Do you have any data?

00:27:16.400 --> 00:27:16.660
Yeah?

00:27:16.660 --> 00:27:17.400
Do you have any data?

00:27:17.400 --> 00:27:19.360
Yeah?" You know, it's more efficient.

00:27:19.400 --> 00:27:22.710
And then finally, there's descriptors or
additional descriptors,

00:27:22.780 --> 00:27:24.400
and it's completely up to you.

00:27:24.400 --> 00:27:28.050
Keep in mind that LE is loosely
defined as it relates to a

00:27:28.050 --> 00:27:29.400
set of standards or profiles.

00:27:29.400 --> 00:27:32.350
Much unlike Bluetooth in general.

00:27:32.600 --> 00:27:36.350
And you can go and completely define
your own implementation of LE.

00:27:36.510 --> 00:27:40.400
These shoes, for example,
aren't using standard profiles.

00:27:40.400 --> 00:27:42.400
But the heart rate belt is.

00:27:42.630 --> 00:27:46.400
And with your app in iOS,
you can do either.

00:27:47.600 --> 00:27:50.380
So remember when I said
it's kind of like a tree?

00:27:50.380 --> 00:27:52.760
So this is just a visual
representation of that.

00:27:52.760 --> 00:27:56.240
My peripheral can have multiple services,
and my services can have

00:27:56.240 --> 00:27:57.410
multiple characteristics.

00:27:57.490 --> 00:27:58.940
It's really, really basic.

00:27:59.250 --> 00:28:00.010
All right?

00:28:00.220 --> 00:28:04.330
So that gives you a
sense of how this works.

00:28:05.470 --> 00:28:10.060
So hopefully that was a
whirlwind tour of Bluetooth LE.

00:28:10.060 --> 00:28:14.110
And there's a whole lot
more about this technology.

00:28:14.200 --> 00:28:17.920
If you are having sleep problems,
go and get the spec.

00:28:18.270 --> 00:28:21.320
Read it for about 10 minutes
and then you'll be asleep.

00:28:21.320 --> 00:28:28.340
But everything I talked about is
in the Bluetooth 4.0 core spec.

00:28:28.340 --> 00:28:30.600
Pretty much everything you
need to know is in there.

00:28:30.670 --> 00:28:32.160
But good luck.

00:28:32.220 --> 00:28:37.100
All right,
so let's get into core Bluetooth.

00:28:37.270 --> 00:28:42.700
CoreBluetooth is the representation
of LE on our iOS platforms.

00:28:42.760 --> 00:28:50.760
It's the framework that you
use in your apps to talk to

00:28:50.760 --> 00:28:50.760
accessories and to host peripherals,
right?

00:28:51.300 --> 00:28:54.760
We have three primary core principles.

00:28:54.900 --> 00:28:59.710
So the first one is we
want it to be simple.

00:28:59.930 --> 00:29:04.910
So when we started writing this,
we probably rewrote it

00:29:04.910 --> 00:29:07.720
I don't know how many times.

00:29:07.720 --> 00:29:09.850
We kept realizing it's too complicated.

00:29:10.050 --> 00:29:10.900
It's too complicated.

00:29:10.900 --> 00:29:15.320
It's too many objects,
too many variables, too many interfaces.

00:29:15.320 --> 00:29:19.370
So we kept fighting on
ourselves to make this simple,

00:29:19.370 --> 00:29:21.820
to make this easy to approach.

00:29:21.820 --> 00:29:24.200
But at the same time,
we didn't want to limit

00:29:24.250 --> 00:29:25.680
you in what you could do.

00:29:25.680 --> 00:29:28.280
We didn't want you to go, ah,
this is a baby framework.

00:29:28.280 --> 00:29:29.780
Nobody can use this.

00:29:29.790 --> 00:29:33.390
So we wanted it to be really,
really powerful.

00:29:34.120 --> 00:29:35.560
That was really hard.

00:29:35.560 --> 00:29:39.020
So hopefully what we have in
Core Bluetooth has done that.

00:29:39.470 --> 00:29:41.900
Some people would argue that we have.

00:29:41.900 --> 00:29:43.080
Some would say we haven't.

00:29:43.210 --> 00:29:47.600
But we feel like that it's the great
intersection between being both powerful,

00:29:47.650 --> 00:29:51.680
giving you the features that you need,
but at the same time not requiring

00:29:51.680 --> 00:29:53.840
you to get a PhD in Core Bluetooth.

00:29:54.360 --> 00:29:57.280
And then finally,
we wanted to build it on the standard.

00:29:57.360 --> 00:30:00.630
We wanted you to be able to go and
look at the standard and then come

00:30:00.710 --> 00:30:04.640
and look at Core Bluetooth and go,
oh, okay, that's what a central is.

00:30:04.780 --> 00:30:06.670
Because it says right
here in the core spec,

00:30:06.670 --> 00:30:08.060
that's what a peripheral is.

00:30:08.320 --> 00:30:10.470
So it ties into the spec itself.

00:30:10.480 --> 00:30:16.720
And we've been just fanatical in
making sure that we're as close

00:30:16.720 --> 00:30:20.060
as we possibly can to the spec.

00:30:20.060 --> 00:30:22.470
There is a couple of embellishments.

00:30:23.720 --> 00:30:26.210
but for the most part, it's spec-based.

00:30:29.000 --> 00:30:34.320
So what's unique about CoreBluetooth and
what's different between Bluetooth per se

00:30:34.360 --> 00:30:37.440
is that it's really all about your app.

00:30:37.490 --> 00:30:39.110
It's nothing to do with the OS.

00:30:39.240 --> 00:30:43.130
In fact,
with the exception of paired devices

00:30:43.210 --> 00:30:49.310
showing up in the Bluetooth settings,
there's nothing in the OS that has

00:30:49.360 --> 00:30:52.900
anything to do with LE except maybe
the little Bluetooth icon that lights

00:30:52.900 --> 00:30:54.900
up when you have a device connected.

00:30:54.900 --> 00:30:57.890
And the reason we wanted to
do it this way is that we,

00:30:58.000 --> 00:31:01.900
again, didn't want to shoehorn you guys
into specific implementations.

00:31:01.900 --> 00:31:05.590
We wanted to give you the power
to go and innovate on all of

00:31:05.590 --> 00:31:10.130
these accessories tied to those
use cases that I just showed you,

00:31:10.130 --> 00:31:10.900
right?

00:31:10.900 --> 00:31:14.720
So it's really all about you guys,
which means that your app is

00:31:14.840 --> 00:31:16.770
responsible for everything.

00:31:16.890 --> 00:31:21.900
It's responsible for discovery,
connecting to the device,

00:31:21.900 --> 00:31:23.890
exchanging data.

00:31:24.900 --> 00:31:27.810
So we're going to talk about persistent,
persisting the device.

00:31:27.870 --> 00:31:30.080
A lot of people don't realize
that they have to store the

00:31:30.180 --> 00:31:31.900
device because we don't store it.

00:31:31.900 --> 00:31:37.380
So they need to persist that information,
the UID of that particular device.

00:31:37.730 --> 00:31:41.990
That is all in your app,
and most app developers will love that.

00:31:41.990 --> 00:31:42.980
Some don't.

00:31:43.160 --> 00:31:45.370
There's other OSes for that.

00:31:48.140 --> 00:31:49.840
So what can you do this on?

00:31:49.840 --> 00:31:51.470
Where does this work?

00:31:51.770 --> 00:31:54.430
So the first one, of course,
was the iPhone 4S.

00:31:54.490 --> 00:31:56.040
This kind of started it all.

00:31:56.040 --> 00:32:01.780
This was the first 4.0 capable device
that had a Bluetooth 4.0 radio in it.

00:32:01.900 --> 00:32:05.970
Next came along was the
Mac Mini and the Macbook Air.

00:32:06.000 --> 00:32:11.480
We just introduced the iPad in
the spring of this year and the

00:32:11.480 --> 00:32:15.040
iPad now has 4.0 capabilities.

00:32:15.040 --> 00:32:16.870
I mentioned the Macbook Air.

00:32:16.870 --> 00:32:22.020
One that didn't make it on to this deck
because of the timing is all of our

00:32:22.020 --> 00:32:24.580
Macbook Pros now support Bluetooth 4.0.

00:32:24.580 --> 00:32:27.570
So the new -- pretty much all
the new Macbook Pros that we

00:32:27.570 --> 00:32:31.860
introduced yesterday -- well,
all of them support Bluetooth 4.0.

00:32:31.860 --> 00:32:36.180
So pretty much any device that
your customers are going to

00:32:36.180 --> 00:32:40.220
use in a portable setting are
going to support Bluetooth 4.0,

00:32:40.220 --> 00:32:41.250
which is pretty cool.

00:32:41.350 --> 00:32:44.200
That means in the home,
the devices in the home

00:32:44.200 --> 00:32:45.040
can interact with the Mac.

00:32:45.040 --> 00:32:49.680
Mac Mini and when you're on the road,
the Mac -- the iPhone 4S and the

00:32:49.680 --> 00:32:57.030
iPad can all interact with your app,
right, and with your accessories.

00:32:57.080 --> 00:33:01.610
But there's another one here that
I haven't included because I haven't

00:33:01.610 --> 00:33:04.030
clicked the button is the iOS simulator.

00:33:04.350 --> 00:33:10.340
And we think this is really cool
because especially with iOS 6

00:33:10.410 --> 00:33:13.280
because now -- let's say you have
an idea and it -- I don't know.

00:33:13.390 --> 00:33:14.420
I don't want to make it a big deal.

00:33:14.420 --> 00:33:14.420
I don't want to make it a big deal.

00:33:14.420 --> 00:33:14.420
I don't want to make it a big deal.

00:33:14.420 --> 00:33:14.420
I don't want to make it a big deal.

00:33:14.420 --> 00:33:14.420
I don't want to make it a big deal.

00:33:14.420 --> 00:33:14.420
I don't want to make it a big deal.

00:33:14.420 --> 00:33:14.420
I don't want to make it a big deal.

00:33:14.420 --> 00:33:14.420
I don't want to make it a big deal.

00:33:14.420 --> 00:33:15.720
I don't want to make up one right now.

00:33:15.720 --> 00:33:17.520
But you have an idea,
and you have an accessory,

00:33:17.520 --> 00:33:20.150
and you have an app,
and you want to make this

00:33:20.150 --> 00:33:23.430
kind of ecosystem where your
app talks to the accessory.

00:33:23.490 --> 00:33:27.620
What's cool about the simulator is that
you can do both the peripheral side and

00:33:27.620 --> 00:33:30.600
the central side completely in house.

00:33:30.770 --> 00:33:33.940
So if you're not a hardware company,
fine,

00:33:33.940 --> 00:33:37.460
but you can still do the peripheral,
the interaction with it and

00:33:37.540 --> 00:33:40.960
just make up the data or tie
it to some external stimulus,

00:33:41.030 --> 00:33:43.920
right,
and completely develop your solution

00:33:44.390 --> 00:33:46.280
all within the iOS simulator.

00:33:46.280 --> 00:33:48.090
And then when you're ready,
then go and deal with your

00:33:48.090 --> 00:33:51.220
hardware manufacturer,
and if you are a hardware manufacturer,

00:33:51.220 --> 00:33:55.130
now develop the firmware, right,
that actually sits inside the

00:33:55.130 --> 00:33:57.980
single-mode device to do all this.

00:33:58.160 --> 00:34:00.120
Super, super efficient.

00:34:00.120 --> 00:34:01.970
And you never had to
touch a piece of hardware.

00:34:02.080 --> 00:34:04.080
So it's really, really great, right?

00:34:04.080 --> 00:34:04.720
You can debug.

00:34:04.730 --> 00:34:07.870
You can do everything
within the simulator.

00:34:09.200 --> 00:34:10.110
Framework.

00:34:10.450 --> 00:34:15.590
So there's a lot of acronyms up there,
but all you have to really focus on

00:34:15.930 --> 00:34:21.520
for your applications is the top two,
your app and Core Bluetooth.

00:34:21.520 --> 00:34:26.110
We have all of these technologies
in our products like GATT and AT and

00:34:26.210 --> 00:34:30.530
LTCAP and GAP and all these acronyms
that everybody loves to throw out.

00:34:30.530 --> 00:34:32.520
But you don't have to worry about it.

00:34:32.520 --> 00:34:36.540
So we're encapsulating this within
Core Bluetooth so that you don't have

00:34:36.590 --> 00:34:38.700
to worry about being an at expert.

00:34:38.700 --> 00:34:41.000
And that's just me you don't want to be.

00:34:41.000 --> 00:34:43.900
So that's our framework.

00:34:43.900 --> 00:34:47.920
So I had showed you this slide before,
but I'm going to show you this

00:34:48.010 --> 00:34:51.170
because I want you to understand
kind of the relationship between the

00:34:51.170 --> 00:34:54.340
peripheral and the central because I'm
going to show you the object model.

00:34:54.450 --> 00:34:56.620
And if you understand this,
I think it will click.

00:34:56.620 --> 00:35:00.460
So now that you guys have seen that,
let's look at our primary objects.

00:35:00.460 --> 00:35:04.590
So we have CB central manager,
Core Bluetooth central manager,

00:35:04.590 --> 00:35:08.880
which is the object that you use
to manage peripherals or devices.

00:35:08.970 --> 00:35:14.000
And CB peripheral,
which is the representation of the device

00:35:14.000 --> 00:35:19.860
that you either have discovered for
advertising or that you are connected to.

00:35:19.860 --> 00:35:23.950
Now, we have some data objects,
CB service, Core Bluetooth service

00:35:23.950 --> 00:35:25.040
and characteristic.

00:35:25.100 --> 00:35:28.080
And unsurprisingly,
these are exactly the same names

00:35:28.080 --> 00:35:32.660
that I just described to you when
we talked about Bluetooth LE.

00:35:32.660 --> 00:35:32.690
Right?

00:35:32.690 --> 00:35:35.960
And then finally we have a helper object,
CB UUID,

00:35:36.040 --> 00:35:38.760
not to be confused with CFUUIDRef.

00:35:38.800 --> 00:35:39.800
And then we have a core Bluetooth UUID.

00:35:39.800 --> 00:35:41.000
I don't know how many
times that's happened.

00:35:41.040 --> 00:35:43.560
But this is a representation
of the Core Bluetooth UUID.

00:35:43.560 --> 00:35:47.650
And the reason this is there is, again,
I go back to the point that every

00:35:47.650 --> 00:35:50.460
single thing in LE is based on a UUID.

00:35:50.460 --> 00:35:53.460
So we figured we'd make it
easy for you and pass these

00:35:53.570 --> 00:35:57.190
objects around rather than big,
long strings.

00:35:57.510 --> 00:36:00.520
But in iOS 6,
we added a whole new set of classes.

00:36:00.800 --> 00:36:06.160
Now, we're going to go into a whole lot
of detail on this in the next hour.

00:36:06.410 --> 00:36:09.100
But I wanted to give
you a little sneak peek.

00:36:09.100 --> 00:36:14.490
So with the development of a peripheral,
we now have the opposite side and we

00:36:14.490 --> 00:36:19.140
have this thing called a peripheral
manager and consequently the central and

00:36:19.140 --> 00:36:24.420
we have these concepts called mutable
services and mutable characteristics.

00:36:24.440 --> 00:36:27.060
I'll just leave that there
but that's how we define,

00:36:27.170 --> 00:36:30.640
guess what,
services and characteristics in your app.

00:36:30.650 --> 00:36:34.530
And then, of course,
attribute or at request.

00:36:34.540 --> 00:36:36.280
That's a little esoteric.

00:36:36.280 --> 00:36:39.010
But it will make a lot
more sense as we go on.

00:36:39.150 --> 00:36:42.730
I don't have enough time to get into
these in a lot of detail but again,

00:36:42.900 --> 00:36:44.730
this afternoon.

00:36:46.540 --> 00:36:49.540
: Real quick,
I wanted to mention backgrounding.

00:36:49.540 --> 00:36:52.760
So a lot of questions
around backgrounding.

00:36:52.760 --> 00:37:01.530
There's two primary ways
that you can background your

00:37:01.530 --> 00:37:04.610
app and talk to accessories.

00:37:04.610 --> 00:37:04.610
The first one we call
event-based backgrounding.

00:37:04.610 --> 00:37:04.610
And

00:37:06.400 --> 00:37:10.150
We feel like event-based
background is the most efficient

00:37:10.150 --> 00:37:15.830
way that you can develop an app
on iOS and talk to accessory.

00:37:16.200 --> 00:38:31.300
[Transcript missing]

00:38:32.000 --> 00:38:34.400
So that's why we created
session-based notification or

00:38:34.400 --> 00:38:37.010
session-based backgrounding.

00:38:37.480 --> 00:38:40.380
And in session-based backgrounding,
pretty much you can do anything

00:38:40.380 --> 00:38:41.840
you want with the accessory.

00:38:41.960 --> 00:38:43.840
It's full access to the peripheral.

00:38:43.900 --> 00:38:45.520
You can scan for peripherals.

00:38:45.570 --> 00:38:47.510
There are some limits.

00:38:48.430 --> 00:38:51.000
You can connect to the peripheral,
you can exchange data

00:38:51.120 --> 00:38:54.050
with the peripheral,
pretty much anything that you

00:38:54.050 --> 00:38:56.540
could do in the foreground,
you can do in the background.

00:38:56.540 --> 00:38:59.290
There are some limits because of power.

00:38:59.300 --> 00:39:01.790
The only thing that we ask
is that you use this concept

00:39:01.800 --> 00:39:03.300
of discrete start and stop.

00:39:03.300 --> 00:39:06.300
This concept that I'm going to,
for example, my heart rate monitor,

00:39:06.300 --> 00:39:09.300
I'm going to go for a run,
and in that run,

00:39:09.300 --> 00:39:13.170
my heart rate monitor talks to my app on
my phone and they have a conversation.

00:39:13.300 --> 00:39:15.300
It's like slow down, speed up, whatever,
right?

00:39:15.300 --> 00:39:17.300
So it has to monitor it in real time.

00:39:17.300 --> 00:39:18.260
We get that.

00:39:18.420 --> 00:39:20.300
But if I'm just sitting
there programming,

00:39:20.300 --> 00:39:22.300
I probably don't need to be
monitoring my heart rate.

00:39:22.450 --> 00:39:26.300
Some of you do, but it's not that useful,
right?

00:39:26.360 --> 00:39:30.080
So we really try to encourage
this start and stop model within

00:39:30.080 --> 00:39:32.300
session-based backgrounding.

00:39:32.700 --> 00:39:38.300
Okay, so that's a really,
really brief overview of CoreBluetooth.

00:39:38.300 --> 00:39:41.300
Now, we'll get into a lot more
detail again this afternoon.

00:39:41.300 --> 00:39:42.300
I know I keep harping that.

00:39:42.300 --> 00:39:45.490
But we just couldn't cover
this all in one session,

00:39:45.510 --> 00:39:47.020
so that's why we have two.

00:39:47.420 --> 00:39:49.240
And Joachim will go into
a lot more detail on this.

00:39:49.300 --> 00:39:52.030
But what I'd like to do now
is invite up Craig Dooley,

00:39:52.030 --> 00:39:55.420
and he's going to give you a demo
of the heart rate monitor actually

00:39:55.480 --> 00:39:57.220
working with the MacBook Air.

00:39:57.320 --> 00:39:59.300
So, Craig?

00:40:01.400 --> 00:40:02.450
Morning.

00:40:02.450 --> 00:40:04.530
Thank you, Brian.

00:40:04.610 --> 00:40:06.340
So at this point,
you have a pretty good understanding

00:40:06.340 --> 00:40:13.450
of how Bluetooth Low Energy works,
but I want to give you a quick

00:40:13.450 --> 00:40:13.450
demo and show you what it really
takes to put this in your app.

00:40:14.380 --> 00:40:16.900
So I have one of these
Polar heart rate belts.

00:40:16.960 --> 00:40:19.300
You can just go buy these from Amazon.

00:40:19.300 --> 00:40:23.890
And I've got a demo application here.

00:40:29.080 --> 00:40:34.750
So we can just launch this,
look for our device.

00:40:37.660 --> 00:40:41.010
And now we're connected and
in just a second we should be

00:40:41.010 --> 00:40:44.500
seeing real-time heart rate data.

00:40:44.500 --> 00:40:48.500
As you can see, I'm very excited to be
talking to you about this.

00:40:51.180 --> 00:40:55.100
So what did we actually do?

00:40:55.160 --> 00:40:59.580
As Brian said,
you can define your own services

00:40:59.580 --> 00:41:03.000
and characteristics that contain
any type of data you want.

00:41:03.040 --> 00:41:05.560
But in this case, we're going to talk to
a standardized profile.

00:41:05.770 --> 00:41:08.100
And this is the heart rate profile.

00:41:08.100 --> 00:41:10.060
So we just have a couple of defines here.

00:41:10.060 --> 00:41:14.570
We're going to define the service and the
two characteristics that we care about.

00:41:14.570 --> 00:41:18.450
And if you're interested in this,
you can go to the Bluetooth developer

00:41:18.450 --> 00:41:20.980
portal at developer.bluetooth.org.

00:41:22.090 --> 00:41:25.440
So now that we know what kind
of data we're looking for,

00:41:25.460 --> 00:41:27.280
let's start our app.

00:41:27.280 --> 00:41:30.920
So the first thing we're going to
do is we're going to instantiate

00:41:30.920 --> 00:41:32.700
a CB central manager object.

00:41:32.970 --> 00:41:35.000
And this represents your local device.

00:41:35.040 --> 00:41:37.430
This is how you're going to
perform all the interactions

00:41:37.460 --> 00:41:38.780
against your local radio.

00:41:38.910 --> 00:41:44.010
Things like I want to start
observing devices as they come

00:41:44.010 --> 00:41:45.980
by and I want to connect to them.

00:41:46.070 --> 00:41:48.090
So we're going to pass in
ourself as the delegate.

00:41:48.200 --> 00:41:51.280
We're going to pass in nil for the queue,
which will choose the best queue for us,

00:41:51.280 --> 00:41:52.960
in this case, the main queue.

00:41:52.960 --> 00:41:55.400
And now we can get started with our app.

00:41:58.300 --> 00:42:02.680
So when we started, we had no idea what
devices were around us,

00:42:02.890 --> 00:42:05.740
no previous interactions
with this device.

00:42:05.820 --> 00:42:08.930
So the first thing we're gonna
do is we're gonna call Scan for

00:42:09.020 --> 00:42:11.090
Peripherals with service.

00:42:11.290 --> 00:42:14.220
And there could potentially
be a lot of things around you.

00:42:14.220 --> 00:42:16.060
Like Brian said,
there could be thermostats,

00:42:16.180 --> 00:42:18.920
there could be soil moisture sensors.

00:42:18.980 --> 00:42:21.660
But in this case,
we only care about heart rate monitors.

00:42:21.810 --> 00:42:23.520
So we're gonna pass in an array.

00:42:23.570 --> 00:42:27.120
And we're gonna say we only
care about heart rate monitors.

00:42:27.160 --> 00:42:29.760
And then this will tell
the system and the radio,

00:42:29.760 --> 00:42:33.940
start looking for devices that
are advertising that service.

00:42:33.940 --> 00:42:39.350
And when we find one,
we'll get this callback.

00:42:40.110 --> 00:42:42.760
Central Manager,
so just gives you a handle to the

00:42:42.760 --> 00:42:47.000
Central Manager that you're using,
did discover Peripheral with

00:42:47.080 --> 00:42:49.540
advertising data and RSSI.

00:42:49.540 --> 00:42:52.340
The Peripheral is your handle
to talk to the remote device.

00:42:52.550 --> 00:42:55.540
The advertising data can contain
a couple different things.

00:42:55.540 --> 00:42:57.980
It contains what services
that device supports,

00:42:57.980 --> 00:43:01.670
a friendly name in case you want
to show something in your UI,

00:43:01.790 --> 00:43:10.340
what power the device is advertising at,
and also RSSI, which gives you the signal

00:43:10.340 --> 00:43:11.910
strength that you saw that device.

00:43:11.910 --> 00:43:13.950
So if you want to do
something with proximity,

00:43:13.960 --> 00:43:16.250
this is how you can tell
approximately how close your

00:43:16.250 --> 00:43:20.630
device is based on how much of the
signal was lost in transmission.

00:43:21.140 --> 00:43:23.800
In our case,
we don't want to do proximity,

00:43:23.830 --> 00:43:27.880
so all we're going to do is add this
to the list that we showed of devices.

00:43:29.630 --> 00:43:31.140
Once we've decided that's
the device we want,

00:43:31.240 --> 00:43:33.610
all we have to do is
call CB Central Manager,

00:43:33.850 --> 00:43:35.340
connect to peripheral.

00:43:35.340 --> 00:43:37.370
Or connect peripheral.

00:43:38.240 --> 00:43:42.830
Now, a cool thing about this is this
won't time out for you automatically.

00:43:42.900 --> 00:43:46.230
So if you want to do something
like home automation or security,

00:43:46.410 --> 00:43:48.560
you can actually have your
list of devices and just say,

00:43:48.560 --> 00:43:56.690
I want to connect to this device,
and minutes, hours, even days later when

00:43:56.690 --> 00:43:59.600
someone walks close to you,
as soon as the radio sees this device,

00:43:59.600 --> 00:43:59.600
you'll actually have a connection.

00:44:02.330 --> 00:44:04.060
After we connect,
you get central manager,

00:44:04.300 --> 00:44:05.860
did connect peripheral.

00:44:06.060 --> 00:44:08.670
And at this point, we have the two-way
communication with the device.

00:44:08.820 --> 00:44:11.200
So we want to start
interacting with that data.

00:44:11.290 --> 00:44:14.220
You'll remember that everything
is in the structure of

00:44:14.220 --> 00:44:16.200
services and characteristics.

00:44:16.200 --> 00:44:19.520
So the first thing we have to do
when we connect to the device is

00:44:19.520 --> 00:44:21.460
discover the services on that.

00:44:22.930 --> 00:44:25.490
So we're going to say,
I want to be the delegate

00:44:25.490 --> 00:44:26.800
for this service.

00:44:26.840 --> 00:44:30.990
And then we're just going to ask,
discover all the services on the device.

00:44:31.900 --> 00:44:36.160
After that goes out over the air,
it's going to find all those services,

00:44:36.170 --> 00:44:38.950
and there could potentially
be a lot on the device,

00:44:39.060 --> 00:44:42.280
things like the device name,
device information could have

00:44:42.280 --> 00:44:43.670
a vendor ID and product ID.

00:44:43.770 --> 00:44:45.570
It could have the current battery level.

00:44:45.710 --> 00:44:47.840
But for this app, it's really simple.

00:44:47.840 --> 00:44:49.800
All we care about is heart rate.

00:44:49.930 --> 00:44:53.800
So we're going to iterate over all
the services on that peripheral.

00:44:53.800 --> 00:44:57.510
And if we find a heart rate service,
which is the one that we care about,

00:44:57.520 --> 00:45:01.040
we're going to discover all the
characteristics underneath that service.

00:45:02.350 --> 00:45:04.440
Again, this will go over the air.

00:45:04.550 --> 00:45:07.340
And after it's done,
you'll get peripheral,

00:45:07.340 --> 00:45:11.890
did discover characteristics for service,
and potentially an error.

00:45:12.220 --> 00:45:15.630
If you remember from Brian's other slide,
heart rate monitor can

00:45:15.630 --> 00:45:17.100
contain a couple things.

00:45:17.100 --> 00:45:20.080
All we really care about for this
demo is we want the current heart

00:45:20.080 --> 00:45:24.700
rate measurement and potentially
the body sensor location.

00:45:25.280 --> 00:45:28.240
So for heart rate,
it's not something we really

00:45:28.240 --> 00:45:29.340
want to pull this data.

00:45:29.340 --> 00:45:30.890
We don't want to sit
there and ask the device,

00:45:30.890 --> 00:45:31.540
"What is it now?

00:45:31.540 --> 00:45:33.690
What is it now?" So we're
going to say peripheral,

00:45:33.950 --> 00:45:38.060
set notify to yes on that characteristic,
and then whenever the heart rate

00:45:38.070 --> 00:45:41.480
monitor has new data to send,
it'll just deliver that to us.

00:45:41.720 --> 00:45:44.550
and for body sensor location,
I'm not going to be moving around a lot,

00:45:44.700 --> 00:45:46.740
so I only need to read that once.

00:45:46.870 --> 00:45:49.140
So in this case,
we'll call peripheral read

00:45:49.140 --> 00:45:50.810
value for characteristic.

00:45:54.120 --> 00:45:57.760
And both of those are actually going to
call back on the same delegate method.

00:45:57.760 --> 00:46:00.820
Peripheral did update
value for characteristic.

00:46:00.930 --> 00:46:04.110
So whether it's because you asked
for it or whether the device

00:46:04.110 --> 00:46:06.650
is just giving you new data,
whenever there's something

00:46:06.650 --> 00:46:09.690
updated on that characteristic,
this is the callback you'll get.

00:46:09.810 --> 00:46:12.320
And then we can do
whatever we want with it.

00:46:12.400 --> 00:46:17.220
So the characteristic gives us
back a blob of data in NSData.

00:46:17.220 --> 00:46:19.980
If it's heart rate measurement,
we're going to update

00:46:19.980 --> 00:46:21.220
the current display.

00:46:21.400 --> 00:46:24.060
If it's body sensor location,
we can do what we want with it.

00:46:25.370 --> 00:46:29.840
And that's really all we have to do to
connect and interact with the device.

00:46:29.850 --> 00:46:34.690
So this application is actually available
as sample code on the developer site,

00:46:34.810 --> 00:46:37.760
and I can't wait to see all the
apps you guys are going to write.

00:46:38.090 --> 00:46:39.590
Thank you.

00:46:45.910 --> 00:46:47.850
Thank you, Craig.

00:46:47.970 --> 00:46:50.260
And that's available now,
so you guys can go download this

00:46:50.330 --> 00:46:51.890
literally right after this session.

00:46:51.890 --> 00:46:53.500
Skip your lunch because
you want to do this.

00:46:53.640 --> 00:46:54.900
Trust me.

00:46:54.900 --> 00:46:56.900
These heart rate belts are available now.

00:46:56.900 --> 00:47:00.520
In fact, we bought these on
Amazon like this weekend.

00:47:00.660 --> 00:47:02.270
So you can grab these.

00:47:02.420 --> 00:47:08.510
And it's a great way to actually
start developing is to grab a

00:47:08.510 --> 00:47:09.960
real accessory and start working
with that accessory immediately.

00:47:10.190 --> 00:47:12.480
One thing I wanted to comment
on our best practices,

00:47:12.610 --> 00:47:16.290
we have a lot of really great stuff
in our Bluetooth Guidelines document.

00:47:16.350 --> 00:47:19.600
Now, this location that I have up there
is the Guidelines document that's

00:47:19.600 --> 00:47:21.130
pretty much available to the world.

00:47:21.330 --> 00:47:25.530
You guys, because you're here at WWDC and
you're Apple developers,

00:47:25.530 --> 00:47:28.300
have access to the
latest release of this,

00:47:28.360 --> 00:47:32.030
which is our release six,
that you'll see on your developer

00:47:32.030 --> 00:47:34.650
portal for iOS and Mac developers.

00:47:34.690 --> 00:47:36.020
So definitely go check that out.

00:47:36.020 --> 00:47:37.760
Another thing you should
be reading tonight,

00:47:37.760 --> 00:47:41.080
along with the course spec,
to help you sleep.

00:47:41.260 --> 00:47:43.640
But no, there's a lot of really
great stuff in there.

00:47:43.640 --> 00:47:45.220
We talk about advertising intervals.

00:47:45.220 --> 00:47:46.610
We talk about connection intervals.

00:47:46.680 --> 00:47:50.170
We talk about all the new stuff
we've done with Peripheral Manager,

00:47:50.170 --> 00:47:52.700
as well as all the
stuff around Bluetooth.

00:47:52.700 --> 00:47:56.800
We have a bunch of people here
to help you along the way.

00:47:56.830 --> 00:47:59.360
These two guys,
Steven Schick and Craig Keithley,

00:47:59.360 --> 00:48:00.800
they are awesome.

00:48:00.880 --> 00:48:04.440
And they are here to help
you develop your products,

00:48:04.450 --> 00:48:05.760
both software and hardware.

00:48:05.820 --> 00:48:08.170
They have expertise pretty
much across the board,

00:48:08.340 --> 00:48:12.620
and these guys really,
really care about you and your products.

00:48:12.650 --> 00:48:17.020
Developer programs, obviously,
you can check out our MFI programs.

00:48:17.020 --> 00:48:19.230
We do have a mailing list.

00:48:19.320 --> 00:48:22.380
We also have developer forums now.

00:48:22.380 --> 00:48:24.910
So we have entries in
our developer forums.

00:48:24.990 --> 00:48:27.520
And there's also a site
not related to Apple,

00:48:27.570 --> 00:48:32.300
but definitely related to LE,
and that's developer.bluetooth.org.

00:48:32.340 --> 00:48:35.550
And if you're curious about all
the standard IDs or all the UUIDs,

00:48:35.620 --> 00:48:37.240
definitely go check them out.

00:48:37.320 --> 00:48:40.000
Because all of those are
there for you as reference.

00:48:40.000 --> 00:48:45.210
In fact, Craig commented on that in,
I think, one of his comments in his code.

00:48:45.220 --> 00:48:47.140
And that's really, really useful.

00:48:47.230 --> 00:48:49.550
I keep mentioning this other session.

00:48:49.770 --> 00:48:51.250
Here it is, Advanced Core Bluetooth.

00:48:51.330 --> 00:48:53.370
This is just after lunch at 2:00 PM.

00:48:53.440 --> 00:48:55.220
You don't want to miss it.

00:48:55.280 --> 00:48:59.900
Joachim has a ton of data that
takes what I said and just adds--

00:48:59.920 --> 00:49:03.390
it compounds on this and adds a
ton more meat to-- and tips and

00:49:03.390 --> 00:49:06.830
tricks and things that we've learned
working with you over the last year.

00:49:07.050 --> 00:49:09.140
And I think that's really,
really important.

00:49:09.140 --> 00:49:12.110
And I think it's really important for
us to be able to work with you and to

00:49:12.180 --> 00:49:14.190
be able to work with you in the future.

00:49:14.690 --> 00:49:19.720
So with these devices,
our portable products, right, our iPhone,

00:49:19.760 --> 00:49:23.870
our iPads, our MacBooks,

00:49:24.100 --> 00:49:26.910
You know,
it's really about the use cases.

00:49:26.920 --> 00:49:31.180
It's about the experiences that
your customers have using these

00:49:31.180 --> 00:49:32.960
products in your applications.

00:49:32.980 --> 00:49:36.520
And it's really amazing now,
to me at least,

00:49:36.650 --> 00:49:39.160
that we've come into this world,
this environment,

00:49:39.160 --> 00:49:42.770
where we can literally start to
connect all of these different models.

00:49:42.780 --> 00:49:46.200
We really can create
that Internet of Things.

00:49:46.200 --> 00:49:49.230
And we can do it in a practical,
real way.

00:49:49.240 --> 00:49:50.790
It's not theoretical.

00:49:51.200 --> 00:49:53.990
It's not someday we'll get this protocol,
but let us do it.

00:49:54.140 --> 00:49:57.030
We feel right now with
Bluetooth LE and Core Bluetooth that

00:49:57.120 --> 00:49:58.720
we can actually do this now.

00:49:58.720 --> 00:50:01.330
And you guys can make just crazy stuff.

00:50:01.480 --> 00:50:03.940
So fundamentally, connect the world.

00:50:03.940 --> 00:50:06.690
Connect devices,
connect accessories to your

00:50:06.690 --> 00:50:09.720
apps through our iOS devices,
through our Mac devices.

00:50:09.720 --> 00:50:13.330
And we just absolutely cannot wait
to see what you guys come up with.

00:50:13.420 --> 00:50:15.920
So thank you very,
very much for allowing me to talk to you.

00:50:15.920 --> 00:50:17.310
Enjoy the rest of the week.

00:50:17.400 --> 00:50:18.340
Have a great week.