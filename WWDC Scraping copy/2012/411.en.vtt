WEBVTT

00:00:10.060 --> 00:00:11.000
Good morning.

00:00:11.000 --> 00:00:11.440
I'm Eric Dudiak.

00:00:11.550 --> 00:00:14.000
I am a Source Control Engineer on Xcode.

00:00:14.020 --> 00:00:17.990
And today we're going to talk about
Source Control Management in Xcode.

00:00:18.650 --> 00:00:21.260
So just to give you a brief agenda of
what we're going to talk about today,

00:00:21.260 --> 00:00:24.330
we're going to give you a brief
overview of the fundamentals

00:00:24.370 --> 00:00:26.400
of source control management.

00:00:27.310 --> 00:00:29.700
Then we're going to talk about
committing in Xcode and how you

00:00:29.700 --> 00:00:33.150
get your code committed into
your source control repository.

00:00:34.390 --> 00:00:36.560
and finally we're going to
talk about sharing your code,

00:00:36.570 --> 00:00:39.540
whether that's around the world
or just around your office.

00:00:39.650 --> 00:00:42.740
So first off,
what is Source Control Management?

00:00:42.850 --> 00:00:45.660
Source Control Management,
or SCM for short,

00:00:45.660 --> 00:00:50.060
is all about two different things:
collaboration and backup.

00:00:50.160 --> 00:00:53.220
So collaboration means that you
can work around the world with

00:00:53.220 --> 00:00:57.460
your code and share it with other
users that need your code as well.

00:00:57.560 --> 00:01:00.010
And backup,
in that you have the ability to go

00:01:00.010 --> 00:01:04.230
back in time and see previous commits
you've made to your code and find out

00:01:04.270 --> 00:01:05.890
how your code has changed over time.

00:01:06.000 --> 00:01:09.730
This is a great way to fix any bugs
that might come up in your code when

00:01:09.730 --> 00:01:13.010
you know that you have a working
version already in Source Control.

00:01:13.620 --> 00:01:15.900
So that's SCM.

00:01:15.900 --> 00:01:17.990
So in Xcode,
we support two different source

00:01:18.000 --> 00:01:21.150
control management systems.

00:01:21.170 --> 00:01:24.370
These are Subversion and Git.

00:01:24.910 --> 00:01:29.760
is a source control management system
that is based on a client-server model.

00:01:29.760 --> 00:01:32.760
In this case, you have a server,
your repository,

00:01:32.910 --> 00:01:34.800
that stores all of your code.

00:01:34.970 --> 00:01:42.390
Locally on your system,
you have a working copy.

00:01:42.390 --> 00:01:42.390
This stores what code
you're working on right now.

00:01:42.610 --> 00:01:45.700
Whenever you want to see
a past piece of code,

00:01:45.700 --> 00:01:48.580
something that you've done in the past,
you're going to have to talk to the

00:01:48.580 --> 00:01:52.050
server and pull that copy down from
the server whenever you do a log

00:01:52.130 --> 00:01:53.940
operation or anything like that.

00:01:54.070 --> 00:01:57.060
This means that every client
who is using your code is

00:01:57.060 --> 00:01:59.060
connected to the same server.

00:01:59.190 --> 00:02:01.690
Now, Git works a little bit differently.

00:02:01.820 --> 00:02:05.230
Under Git, Git is a distributed
source control system.

00:02:05.280 --> 00:02:09.800
This means that your local copy of your
code is actually a full repository.

00:02:09.880 --> 00:02:12.250
The advantage of this is that
when you're on an airplane or

00:02:12.250 --> 00:02:16.230
otherwise out of network access,
you actually can pull up every revision

00:02:16.230 --> 00:02:19.790
of the file that you've locally stored
without ever needing to go to a server.

00:02:19.820 --> 00:02:23.100
Now, of course, if you want to keep your
code on another machine,

00:02:23.100 --> 00:02:25.540
such as a server,
Git has this concept of remotes.

00:02:25.850 --> 00:02:29.100
A remote is basically another
Git source code repository that

00:02:29.100 --> 00:02:31.200
is not locally on your machine.

00:02:31.250 --> 00:02:33.610
This could be on one of
your coworkers' machines,

00:02:33.630 --> 00:02:36.680
it could be on a server,
or it could be somewhere else on the web,

00:02:36.680 --> 00:02:37.790
such as GitHub.

00:02:37.880 --> 00:02:40.190
It's very flexible this way.

00:02:40.260 --> 00:02:43.430
So, source control in Xcode has a
few great features that we're

00:02:43.430 --> 00:02:44.940
going to talk about today.

00:02:45.000 --> 00:02:47.610
And there's a lot of ways to
use source control in Xcode just

00:02:47.610 --> 00:02:51.780
in your day-to-day workflows,
such as when you're editing code.

00:02:52.080 --> 00:02:54.350
We're also going to show you how you
can use Source Control Management in

00:02:54.350 --> 00:02:56.100
Xcode to view the history of your file.

00:02:56.190 --> 00:02:59.660
This can help you quickly
find bugs and squash them.

00:02:59.770 --> 00:03:01.880
And finally,
we're going to talk about managing

00:03:01.930 --> 00:03:05.740
repositories in Xcode and how you can set
up your repositories and add any settings

00:03:05.740 --> 00:03:10.620
you might need to for Xcode to work
most efficiently with your repository.

00:03:11.520 --> 00:03:13.900
So this is the Xcode workspace window.

00:03:14.060 --> 00:03:17.730
Here we see on the left that some
of these files have been modified.

00:03:17.890 --> 00:03:20.930
We know that because if
we look at the screen,

00:03:21.120 --> 00:03:24.210
On the left-hand side,
we see the workspace view,

00:03:24.270 --> 00:03:28.260
which shows us several
files with M status icons.

00:03:29.120 --> 00:03:34.080
These M status icons indicate
that the file has been modified.

00:03:35.790 --> 00:03:42.200
and David We have several
source control status icons.

00:03:42.200 --> 00:03:45.930
These indicate whether a file is added,
deleted, or any number of other source

00:03:45.930 --> 00:03:49.450
control statuses that we might
need to show you in Xcode.

00:03:51.940 --> 00:03:54.640
Now, if we want to look at
the history of your file,

00:03:54.640 --> 00:03:56.590
we're going to use
Xcode's Version editor.

00:03:56.720 --> 00:03:59.680
If we go to the toolbar in Xcode,
there are several

00:03:59.680 --> 00:04:00.940
editor modes at the top.

00:04:01.000 --> 00:04:02.940
This is currently showing
the normal editor.

00:04:03.000 --> 00:04:05.270
To get to the Version editor,

00:04:05.640 --> 00:04:07.500
is the editor of the Xcode team.

00:04:07.520 --> 00:04:09.580
He's the editor of the Xcode team.

00:04:09.580 --> 00:04:13.620
Eric Dudiak is the
editor of the Xcode team.

00:04:13.620 --> 00:04:13.620
He's the editor of the Xcode team.

00:04:13.900 --> 00:04:16.360
Now, when we're in the Version editor,
we have three different

00:04:16.980 --> 00:04:18.330
views to see our code.

00:04:18.590 --> 00:04:20.620
The first is the Comparison view.

00:04:20.720 --> 00:04:24.990
The Comparison view shows you two
pieces of source code side by side.

00:04:25.090 --> 00:04:28.580
In this case,
we're looking at the local revision,

00:04:28.900 --> 00:04:34.230
on the left side,
and the historic revision on the right.

00:04:35.140 --> 00:04:36.750
Now,
we can throw any two arbitrary revisions.

00:04:36.800 --> 00:04:38.720
In this case,
we've selected one that we've made

00:04:38.720 --> 00:04:44.890
modifications to locally and the
current top of trunk on the repository.

00:04:45.710 --> 00:04:47.200
Now, if we wanted to look
at a different version,

00:04:47.200 --> 00:04:50.410
such as one more in the past,
and compare it to a version after it,

00:04:50.410 --> 00:04:51.030
we could.

00:04:51.170 --> 00:04:53.760
We can see any number of versions
of a file next to each other and

00:04:53.840 --> 00:04:55.900
see all the changes between them.

00:04:56.930 --> 00:05:00.340
If we want to see more information about
when lines of a file were last changed,

00:05:00.470 --> 00:05:02.650
we can use the Blame view.

00:05:03.770 --> 00:05:07.210
Now the blame view allows you to
basically blame someone for a particular

00:05:07.210 --> 00:05:11.200
line of code because you can see
who was the last person to touch it.

00:05:11.280 --> 00:05:14.270
In this case,
we show the blame items next to

00:05:14.390 --> 00:05:18.250
each line of code on the right,
as well as an indicator that

00:05:18.300 --> 00:05:22.460
darkens to show that that
was the most recent commit.

00:05:22.590 --> 00:05:25.320
So the more recent a commit,
the darker the line.

00:05:25.580 --> 00:05:28.000
So if you know a bug was
introduced really recently,

00:05:28.110 --> 00:05:31.140
you're going to look for the darkest
lines next to each line of code.

00:05:31.230 --> 00:05:34.640
And then you can find the person
who actually committed that code

00:05:34.640 --> 00:05:37.550
that you found is actually a bug.

00:05:38.130 --> 00:05:43.140
Finally, in the Version editor,
we have the Log view.

00:05:43.570 --> 00:05:47.100
Now, the Log view shows you the history
of the file with every commit,

00:05:47.170 --> 00:05:49.530
one after the other,
shows you the commit message,

00:05:49.670 --> 00:05:53.480
as well as some other information that
we'll see in a minute during the demo.

00:05:54.910 --> 00:05:56.910
Now,
when it comes to managing repositories,

00:05:56.990 --> 00:05:59.900
we also have a great tool
in Xcode to facilitate this.

00:06:00.030 --> 00:06:02.000
And we find it in the Organizer.

00:06:02.100 --> 00:06:05.560
The Xcode Organizer can be
accessed from the toolbar of

00:06:05.560 --> 00:06:08.430
Xcode using the Organizer button.

00:06:09.090 --> 00:06:10.940
In this case,
we'll bring up the organizer,

00:06:10.940 --> 00:06:15.710
and one of the organizer views that
we have is the repository view.

00:06:16.670 --> 00:06:19.960
In this case,
we see the WebKit repository,

00:06:20.200 --> 00:06:22.650
and we can see several parts of it.

00:06:22.890 --> 00:06:24.620
If we want to see the top
level of the repository,

00:06:25.010 --> 00:06:28.010
we can go to the root
folder seen on the left,

00:06:29.480 --> 00:06:30.800
We can also see the trunk.

00:06:30.840 --> 00:06:32.120
Now, in Subversion,
the trunk is basically

00:06:32.120 --> 00:06:34.390
your main line of code.

00:06:34.490 --> 00:06:38.200
So if we want to see just the current
main line of code in the repository,

00:06:38.270 --> 00:06:40.270
we can use the trunk view.

00:06:41.140 --> 00:06:43.220
We also support branches and tags.

00:06:43.280 --> 00:06:46.200
We're going to talk a little bit
more about branches in a minute.

00:06:46.260 --> 00:06:49.440
And then any local copies
of that code are shown with

00:06:49.440 --> 00:06:51.000
blue folders in the sidebar.

00:06:51.060 --> 00:06:54.060
So in this case, we have a checkout of
WebKit locally on this machine,

00:06:54.120 --> 00:06:56.900
as well as some information
about the repository.

00:06:57.850 --> 00:06:59.250
Now in this case,
we are looking at the main

00:06:59.250 --> 00:07:01.300
view of the repository.

00:07:01.340 --> 00:07:05.150
We see the location of it,
and it's a Subversion repository.

00:07:05.360 --> 00:07:08.960
If we needed a username or password,
this is where we would go to enter it,

00:07:08.960 --> 00:07:12.100
although Xcode will also prompt you if
you need to do a source control operation

00:07:12.100 --> 00:07:14.700
that requires a username or password.

00:07:15.400 --> 00:07:21.690
For Subversion repositories,
it is also necessary to set up tags,

00:07:21.690 --> 00:07:21.690
branches, and trunk folders

00:07:22.000 --> 00:07:26.300
and their relative locations
from the root of the repository.

00:07:26.300 --> 00:07:29.990
You may not necessarily need to do this
for your repository if you only want

00:07:29.990 --> 00:07:32.450
to check out and commit to a trunk.

00:07:32.750 --> 00:07:34.840
However,
if you want branching support in Xcode,

00:07:35.090 --> 00:07:36.790
for Subversion,
we are going to need the relative

00:07:36.940 --> 00:07:38.860
path to the branches folder.

00:07:38.940 --> 00:07:41.200
Now, what does that necessarily mean?

00:07:41.270 --> 00:07:44.330
Well, in Subversion, there are several
different common setups,

00:07:44.340 --> 00:07:45.850
and we're going to show
you two of them right now.

00:07:45.980 --> 00:07:49.440
So one of the most common is that
at the top level of your repository,

00:07:49.510 --> 00:07:52.330
you have three folders: trunk, branches,
tags.

00:07:52.430 --> 00:07:54.960
So that's what we saw in the
WebKit repository on the last screen.

00:07:55.030 --> 00:07:57.720
Three folders,
so all the relative paths are just trunk,

00:07:57.770 --> 00:07:59.070
branches, and tags.

00:07:59.280 --> 00:08:01.640
But if you have several
projects in your repository,

00:08:01.680 --> 00:08:04.000
you may actually have a
slightly different setup.

00:08:04.050 --> 00:08:06.230
In this case,
you might have more than one project,

00:08:06.420 --> 00:08:09.540
and each one has its own trunk, branches,
and tags folders.

00:08:09.650 --> 00:08:13.120
So if we had checked out project
one from the second repository,

00:08:13.140 --> 00:08:17.050
we would have put in project one/trunk,
project one/branches,

00:08:17.170 --> 00:08:22.300
and project one/tags as our trunk,
branches, and tags folders.

00:08:24.000 --> 00:08:25.780
You may, of course,
have a completely different

00:08:25.780 --> 00:08:27.100
Subversion repository setup.

00:08:27.240 --> 00:08:28.280
That's perfectly acceptable.

00:08:28.390 --> 00:08:31.770
Your mileage may vary from
these two common setups.

00:08:32.830 --> 00:08:35.470
So let's go in and do a quick
demo of some of the source

00:08:35.540 --> 00:08:38.010
control features of Xcode.

00:08:38.170 --> 00:08:40.540
Okay, so here we see a workspace.

00:08:40.640 --> 00:08:43.100
This happens to again
be the WebKit workspace.

00:08:43.230 --> 00:08:45.540
And I can see that I have
modified a couple of files.

00:08:45.590 --> 00:08:47.270
In this case, I can see three.

00:08:47.480 --> 00:08:49.210
Now, I might have modified a few more.

00:08:49.350 --> 00:08:55.180
So if I want to see every
file that I've modified,

00:08:55.180 --> 00:08:55.180
I might go down to the bottom here.

00:08:55.510 --> 00:08:57.040
And we see the filter bar.

00:08:57.110 --> 00:08:59.300
We can, of course, filter by name,
but in this case,

00:08:59.370 --> 00:09:02.610
I want to filter and see just
files that have source control

00:09:03.020 --> 00:09:04.930
status icons next to them.

00:09:05.010 --> 00:09:08.240
If I click the repository icon,
shown here as a safe,

00:09:08.300 --> 00:09:10.900
I can show only files with
source control status.

00:09:10.970 --> 00:09:16.020
So clicking that shows that, indeed,
I have only modified three files locally.

00:09:16.130 --> 00:09:18.260
So this is great when
working with a few files,

00:09:18.260 --> 00:09:22.250
and you know that you're working on the
same files a lot in a larger repository,

00:09:22.250 --> 00:09:24.900
and they've all been modified on disk.

00:09:24.950 --> 00:09:26.560
Let's undo that because we're
going to look at a few files.

00:09:26.650 --> 00:09:29.480
So I want to see the whole workspace.

00:09:30.570 --> 00:09:33.200
So if I want to see some of these changes
I've been making to the WebKit project,

00:09:33.200 --> 00:09:35.930
because I don't want to break
anyone's iPhone's web browser,

00:09:36.070 --> 00:09:41.810
let's see what kind of fun I've been
having in the Canvas support of WebKit.

00:09:41.920 --> 00:09:46.940
So let's look at the
Canvas rendering context 2D.

00:09:47.020 --> 00:09:49.740
So in this case, I see the file,
and I'm not really sure what

00:09:49.740 --> 00:09:51.280
I've been messing around with.

00:09:51.380 --> 00:09:54.010
So if I want to see what edits I've made,
I could, of course, go to Commit,

00:09:54.160 --> 00:09:56.460
but I want to see them right
here in the Xcode editor.

00:09:56.550 --> 00:10:02.240
So I'm going to go up to the toolbar
and select the Version editor.

00:10:03.920 --> 00:10:06.200
Now, in this case,
I see all the changes that I've made.

00:10:06.290 --> 00:10:11.260
On the right side, we see the current
version on the repository.

00:10:11.360 --> 00:10:14.030
We know it's the current version
because if you're not familiar

00:10:14.030 --> 00:10:18.060
with Subversion terminology,
this one is called the base and head.

00:10:18.180 --> 00:10:21.560
Base is going to be the local
version on disk that's the

00:10:21.560 --> 00:10:24.530
newest since I've updated,
and head is going to be the

00:10:24.530 --> 00:10:27.860
top version -- or the latest
version on the repository.

00:10:29.200 --> 00:10:29.860
So it's both.

00:10:29.960 --> 00:10:31.640
That means it is actually
the most up-to-date version

00:10:31.640 --> 00:10:33.580
that has been committed.

00:10:33.580 --> 00:10:36.480
On the left, we see my local revision.

00:10:36.800 --> 00:10:39.650
My local revision is the
changes that I have made that

00:10:39.960 --> 00:10:41.430
have not been committed yet.

00:10:41.540 --> 00:10:44.640
And given that it's code
I've just been messing with,

00:10:44.860 --> 00:10:47.530
probably shouldn't be
committed to WebKit.

00:10:48.200 --> 00:10:49.290
So we can see a few changes.

00:10:49.410 --> 00:10:51.060
If I want to find all
the changes in the file,

00:10:51.060 --> 00:10:53.760
I can simply use the scroll bar,
and we see that they're indicated

00:10:54.290 --> 00:10:58.210
with red lines in the scroll bar,
and I can jump right to them.

00:10:59.360 --> 00:11:02.640
One of the great things about the
Version editor is that in addition

00:11:02.720 --> 00:11:07.300
to allowing me to see the changes,
it's actually a full functioning editor.

00:11:07.350 --> 00:11:14.400
So I can start typing code
right here in the editor.

00:11:16.520 --> 00:11:20.730
And we see that as I was editing code,
a difference actually

00:11:20.730 --> 00:11:22.070
appeared in real time.

00:11:22.170 --> 00:11:26.350
And if I add a bunch of white space,
that all appears as I'm typing.

00:11:26.440 --> 00:11:27.960
This is a great way that
if you're editing code,

00:11:27.990 --> 00:11:31.080
you can see exactly what you've
edited recently in a file that

00:11:31.080 --> 00:11:33.100
hasn't yet been committed.

00:11:34.830 --> 00:11:37.230
So I'm going to look at another file.

00:11:37.350 --> 00:11:39.330
Let's look at the Canvas Gradient file.

00:11:39.610 --> 00:11:41.580
Now,
I haven't touched any of this code yet.

00:11:41.800 --> 00:11:45.500
We see that there's no M status icon.

00:11:45.650 --> 00:11:49.730
But I think that there might be something
going on here that's changed recently.

00:11:50.840 --> 00:11:53.620
So I can see that this is
the last version that was

00:11:53.620 --> 00:11:57.660
committed on September 12th,
last year.

00:11:57.730 --> 00:12:00.240
If I want to see what was
committed on September 12th,

00:12:00.240 --> 00:12:01.490
I'm going to go to the blame view.

00:12:01.730 --> 00:12:05.540
Now we change views of the
Version editor down here on the right,

00:12:05.640 --> 00:12:07.780
and I click the blame icon.

00:12:08.150 --> 00:12:10.920
Now this is going to go out to our
Subversion repository and get the

00:12:10.920 --> 00:12:14.710
status of every line of the file
and when it was last committed.

00:12:15.280 --> 00:12:19.200
Here I see a few different commits,
and I can see exactly when

00:12:19.330 --> 00:12:20.960
each line was changed.

00:12:20.970 --> 00:12:25.410
So if I was interested in this
#if enable dashboard support,

00:12:25.690 --> 00:12:27.500
I could see that that was committed.

00:12:27.570 --> 00:12:29.900
That was actually the
commit from September 12th.

00:12:29.970 --> 00:12:33.960
Now, if I click on the info icon,
I can actually get more

00:12:34.070 --> 00:12:36.590
information about this commit.

00:12:36.680 --> 00:12:39.040
We see that it highlights
the line I was interested in,

00:12:39.130 --> 00:12:42.460
as well as other lines in the file
that were part of that same commit.

00:12:42.640 --> 00:12:44.090
So if we scroll through,
we see that it wasn't

00:12:44.150 --> 00:12:45.660
just a single line commit,
of course.

00:12:45.710 --> 00:12:47.700
Several other things
in this file changed.

00:12:47.740 --> 00:12:51.480
This is a great way, if I'm fixing a bug,
to find out not only the area of code

00:12:51.480 --> 00:12:54.820
that I'm interested in that I think
is directly relevant to the bug,

00:12:54.890 --> 00:12:58.020
but also other code that I may
need to look at because it was

00:12:58.020 --> 00:13:02.170
committed at the same time and may
be related and also need some tweaks.

00:13:02.630 --> 00:13:05.430
Now, of course, this is going to show us
some more information.

00:13:05.430 --> 00:13:07.960
Here we see there was the
username that committed it.

00:13:07.960 --> 00:13:11.070
In this case, it was just part of the
commit queue from WebKit.

00:13:11.260 --> 00:13:14.700
the date it was committed,
the revision number,

00:13:14.780 --> 00:13:18.520
as well as the full commit
message of that commit.

00:13:18.530 --> 00:13:22.750
Now, if you're working on a bug and
you find it on a single line

00:13:22.910 --> 00:13:25.860
in a project or a few lines,
and you find the commit that

00:13:25.860 --> 00:13:28.910
it was committed as part of,
you may not just need to

00:13:28.910 --> 00:13:30.630
look at that particular file.

00:13:30.910 --> 00:13:34.720
The bug may span multiple files,
but it's most likely in

00:13:34.720 --> 00:13:36.300
one or a few commits.

00:13:36.440 --> 00:13:40.180
So I may be interested in other files
that were also part of this commit.

00:13:40.180 --> 00:13:44.300
In this case, we see that three files
changed during this commit.

00:13:44.310 --> 00:13:47.810
If I expand this disclosure triangle,
I can see that the header file,

00:13:47.900 --> 00:13:51.760
a change log, and this particular file
were all part of that commit.

00:13:51.760 --> 00:13:54.710
So if I'm editing an implementation file,
I probably also want to see

00:13:54.760 --> 00:13:56.670
what changed in the header file.

00:13:56.670 --> 00:14:00.310
If I click the file,
we see a sheet come down that

00:14:00.310 --> 00:14:03.560
shows us exactly what the view
was when this commit was made.

00:14:03.580 --> 00:14:06.280
In this case,
the file before the commit on the

00:14:06.280 --> 00:14:10.120
right and the file immediately
after the commit on the left.

00:14:10.140 --> 00:14:15.000
as well as each change highlighted,
and a commit message at the bottom.

00:14:15.890 --> 00:14:17.400
So, okay, I can see what was changed.

00:14:17.400 --> 00:14:21.810
I can see what was changed in the header,
as well as the implementation file,

00:14:21.810 --> 00:14:25.520
if I was interested in undoing
the enable dashboard support.

00:14:27.300 --> 00:14:30.500
So now let's look at how we
set up this WebKit repository.

00:14:30.710 --> 00:14:36.030
So I'm going to now go to the organizer.

00:14:36.120 --> 00:14:37.800
In this case,
I have a few repositories set up

00:14:37.900 --> 00:14:40.120
that I've been working with recently.

00:14:43.670 --> 00:14:48.610
And in this case,
one of them is the WebKit repository.

00:14:48.690 --> 00:14:51.300
I can go and look at the root
level of the WebKit repository,

00:14:51.300 --> 00:14:54.470
in this case, as trunk, branches, tags.

00:14:55.090 --> 00:14:58.230
I can see trunk, branches, tags.

00:14:58.340 --> 00:15:01.480
It would seem that the
WebKit repository might be being

00:15:01.480 --> 00:15:03.380
a little slow this morning.

00:15:04.150 --> 00:15:06.240
Well, we can look at one of
our other repositories.

00:15:06.420 --> 00:15:10.140
So if I look at the engineering repo,
part of a repository that we're

00:15:10.140 --> 00:15:13.160
going to see a little bit later,
and we can see a few commits

00:15:13.240 --> 00:15:14.560
have been made to it.

00:15:14.780 --> 00:15:18.060
In the case of the WebKit one,
we'd see several commits, of course.

00:15:18.130 --> 00:15:21.200
We can also set up the
username and password.

00:15:21.360 --> 00:15:24.990
Trunk, branches, tags, folders,
as I was saying before.

00:15:25.080 --> 00:15:26.050
We can view the root.

00:15:26.270 --> 00:15:28.350
So in this case,
I actually haven't set up trunk,

00:15:28.380 --> 00:15:29.380
branches, and tags.

00:15:29.510 --> 00:15:32.510
So in order to set it up,
I'm just going to type trunk.

00:15:32.710 --> 00:15:36.220
Light turns green, and I see that I have
a trunk folder here.

00:15:36.220 --> 00:15:38.030
I can jump right to the trunk.

00:15:38.160 --> 00:15:40.720
And I'm just going to
add branches and tags.

00:15:42.810 --> 00:15:44.780
So in that case,
my repository is now set up,

00:15:44.780 --> 00:15:49.090
and I can actually do branching
with the engineer's repo.

00:15:50.300 --> 00:15:52.100
In addition, I can look through the logs.

00:15:52.170 --> 00:15:54.800
Just like in the blame view,
if I expand the triangle,

00:15:54.800 --> 00:15:58.360
I can see what files were
committed as part of that commit,

00:15:58.470 --> 00:15:59.900
as well as the commit message.

00:16:00.020 --> 00:16:02.830
And again,
clicking on a file will show me that

00:16:02.830 --> 00:16:08.440
file committed as well as all the others
as it looked during the commit phase.

00:16:08.570 --> 00:16:10.680
Now, if I wanted to view a
particular revision,

00:16:10.680 --> 00:16:12.740
I didn't want to scroll through the list.

00:16:12.770 --> 00:16:15.350
Let's see if we can get
the WebKit one to work.

00:16:15.850 --> 00:16:18.300
I'm going to try to view a
particular revision on here.

00:16:18.440 --> 00:16:22.730
Let's say someone sent me an email,
told me to look at this one revision,

00:16:22.960 --> 00:16:25.490
and I'm going to look at 13992.

00:16:25.710 --> 00:16:27.810
Now, I could just scroll through
the list and find that,

00:16:27.960 --> 00:16:31.090
but if I know exactly what
revision I want to go to,

00:16:31.350 --> 00:16:33.900
I can jump straight to it,
and Xcode's going to load

00:16:33.900 --> 00:16:37.820
that revision and a comparison
view for me of that revision,

00:16:37.820 --> 00:16:41.300
just like it would if I had
gone to it through the log view.

00:16:41.380 --> 00:16:42.040
But bear with it.

00:16:42.090 --> 00:16:43.340
Ah, here we are.

00:16:43.480 --> 00:16:45.250
So in this case...

00:16:46.830 --> 00:16:48.500
Let's make that a little bigger.

00:16:48.500 --> 00:16:52.450
So we see, just like before,
a full comparison view of the code.

00:16:52.580 --> 00:16:58.950
We see on the right what was on
the server before the commit,

00:16:58.950 --> 00:16:58.950
and on the left what was committed.

00:16:59.580 --> 00:17:01.140
So we can see this was
a rather large commit,

00:17:01.140 --> 00:17:02.570
and we see that files were deleted.

00:17:02.710 --> 00:17:04.660
We can see files were added.

00:17:04.860 --> 00:17:08.650
So this was a great way to look through
our commits and find out information and

00:17:08.850 --> 00:17:11.910
what the history of our repository is.

00:17:15.310 --> 00:17:20.300
So that's the Repository Organizer.

00:17:20.330 --> 00:17:22.530
So what have we seen?

00:17:22.990 --> 00:17:25.780
So we've seen how you can edit
code in the Version editor,

00:17:25.840 --> 00:17:28.240
just like a normal editor,
and how you can use it to see the

00:17:28.240 --> 00:17:32.560
changes you've made recently or even
changes you've made in the past.

00:17:33.590 --> 00:17:35.450
We see how you can view
the history of a file.

00:17:35.610 --> 00:17:39.180
This allows you to find bugs and
make sure that you change everything,

00:17:39.180 --> 00:17:42.500
not just the bug you see immediately,
but anything else that might have

00:17:42.500 --> 00:17:45.720
been part of that same commit that
also needs to be updated as a result.

00:17:46.480 --> 00:17:48.400
And we've seen how you
can manage repositories.

00:17:48.440 --> 00:17:51.830
This includes setting up tags, trunk,
and branches folders for

00:17:51.840 --> 00:17:54.640
a Subversion repository.

00:17:54.730 --> 00:17:58.810
So now I'm going to let Kevin come up
and talk about committing your changes.

00:18:04.760 --> 00:18:05.860
Thanks, Eric.

00:18:05.920 --> 00:18:08.120
My name is Kevin Lindeman,
and today I'm going to talk

00:18:08.120 --> 00:18:11.070
about committing your changes.

00:18:12.450 --> 00:18:15.630
So in order to use all the great
features that Eric just showcased,

00:18:15.630 --> 00:18:19.630
as well as committing and the rest of
the features we'll talk about today,

00:18:20.030 --> 00:18:22.740
You need to actually be managing
your projects with source control.

00:18:22.870 --> 00:18:25.400
Now, if you create a new
project inside of Xcode,

00:18:25.520 --> 00:18:29.300
we make this extremely easy to do,
and I'll show you how to do that.

00:18:30.560 --> 00:18:33.260
I'll also talk about what
is new while committing.

00:18:33.260 --> 00:18:35.980
We've added a number of new features
this year that will make your

00:18:35.980 --> 00:18:39.760
day-to-day commit workflows even better,
especially if you're working

00:18:39.760 --> 00:18:41.820
on multiple tasks all at once.

00:18:43.820 --> 00:18:45.590
And then I'll talk about ignoring files.

00:18:45.800 --> 00:18:48.600
Now, you might ask, all of my files are
under source control now.

00:18:48.600 --> 00:18:50.390
Why would I want to ignore any of them?

00:18:50.480 --> 00:18:54.390
Well, there's a number of file types
that you might want to ignore,

00:18:54.390 --> 00:18:56.100
so I'll talk about those.

00:18:58.610 --> 00:19:02.820
Let's dive right into source
control for new projects.

00:19:02.820 --> 00:19:05.790
As I said, you need to manage your
projects with source control

00:19:05.790 --> 00:19:07.470
in order to use these features.

00:19:07.640 --> 00:19:09.790
When you create a new
project inside of Xcode,

00:19:09.790 --> 00:19:13.060
when you get to the save dialogue,
you'll see this check box.

00:19:13.160 --> 00:19:15.940
Create local Git repository
for this project.

00:19:16.020 --> 00:19:20.460
What this means is that Xcode will
create an empty Git repository

00:19:20.580 --> 00:19:25.370
and then use the basis of your
new project as your first commit.

00:19:25.710 --> 00:19:31.100
Once that's done, you can just go ahead,
make your changes, and commit.

00:19:32.560 --> 00:19:36.620
Now that you've got a Git repository,
you might want to configure remotes.

00:19:36.620 --> 00:19:41.770
This can be done entirely inside
of the organizer in Xcode.

00:19:42.490 --> 00:19:46.360
The remotes, as Eric said,
represent remote Git repositories,

00:19:46.360 --> 00:19:51.420
maybe on the same machine,
on a server somewhere, maybe like GitHub.

00:19:51.780 --> 00:19:55.040
And now that you've configured a remote,
since in Git all of your

00:19:55.350 --> 00:19:59.260
commits are done locally,
you need to push your local changes up

00:19:59.270 --> 00:20:04.240
to the remote so that all your coworkers
can then fix the bugs you just committed.

00:20:04.390 --> 00:20:06.690
So let's take a look at how to do this.

00:20:08.280 --> 00:20:11.910
We see the welcome window in Xcode,
and I'm going to create

00:20:11.910 --> 00:20:13.440
a new Xcode project.

00:20:16.070 --> 00:20:20.700
I'm going to create an iOS master
detail application and click next.

00:20:20.800 --> 00:20:26.110
I'm going to name it
My Awesome Application.

00:20:27.000 --> 00:20:29.400
and click next.

00:20:29.570 --> 00:20:33.120
Now we see here we have the check box,
create local Git repository

00:20:33.210 --> 00:20:34.150
for this project.

00:20:34.190 --> 00:20:36.950
And since I want to Git repository,
I'm going to leave that

00:20:36.950 --> 00:20:38.480
enabled and click create.

00:20:41.800 --> 00:20:46.370
And now Xcode has
opened this new project,

00:20:46.370 --> 00:20:49.900
and all of my work is
now under source control.

00:20:49.950 --> 00:20:52.870
I can confirm this by
going into the organizer.

00:20:53.290 --> 00:20:56.170
We see that Xcode has automatically
detected the Git repository that

00:20:56.170 --> 00:20:58.150
was created for this project.

00:20:58.280 --> 00:21:02.040
If I click it, we see the initial commit.

00:21:02.110 --> 00:21:05.550
And all of the files that
are part of that new project.

00:21:06.700 --> 00:21:09.840
So now that I have this Git repository,
I want to set up a remote.

00:21:09.850 --> 00:21:11.240
So I'll click remotes.

00:21:11.240 --> 00:21:13.930
We see that I don't have
any remotes set up yet.

00:21:14.010 --> 00:21:17.490
And so I'll go to Safari where
I've already set up a

00:21:17.560 --> 00:21:19.780
Git repository on GitHub.

00:21:20.170 --> 00:21:28.440
Now I'll copy the URL of the remote and
go back into Xcode and click add remote.

00:21:29.380 --> 00:21:35.180
Now, a remote is included by a name
and the location to that remote.

00:21:35.180 --> 00:21:39.000
So the name is really all what you --
really what you just want to call it.

00:21:39.070 --> 00:21:43.130
I'm going to call this one origin
because that's what you tend to call

00:21:43.130 --> 00:21:45.680
the first remote in a Git repository.

00:21:46.270 --> 00:21:50.740
And I'll paste in that
URL and click create.

00:21:50.900 --> 00:21:56.500
And now Xcode has added the
origin remote to my repository.

00:21:56.960 --> 00:21:59.110
So now let's go back to the workspace,
because I want to push

00:21:59.110 --> 00:22:01.870
these changes up to GitHub,
so that all my coworkers can

00:22:01.870 --> 00:22:03.580
start working on our project.

00:22:03.710 --> 00:22:08.290
So I will go to File, Source Control,

00:22:08.880 --> 00:22:09.260
Push.

00:22:09.260 --> 00:22:13.470
And so we see that since
I just created this repository

00:22:13.470 --> 00:22:17.220
and it has a master branch,
but I haven't pushed yet to the remote,

00:22:17.220 --> 00:22:19.100
it doesn't exist there yet.

00:22:19.100 --> 00:22:23.370
So it will tell me that it will
create this branch when I push.

00:22:23.370 --> 00:22:26.200
Since I want this, I will click push.

00:22:27.620 --> 00:22:30.050
We see that the push was successful.

00:22:30.200 --> 00:22:33.130
And now, if I go back to Safari...

00:22:33.620 --> 00:22:37.360
reload this page,
we see my project is now on GitHub.

00:22:37.380 --> 00:22:40.180
So what did we talk about again?

00:22:40.180 --> 00:22:43.690
We talked about placing your
project under source control and

00:22:43.700 --> 00:22:45.780
how Xcode makes this extremely easy.

00:22:47.440 --> 00:22:50.200
I then talked about configuring remotes,
in this case GitHub,

00:22:50.240 --> 00:22:53.730
so that you can now collaborate
with all of your coworkers.

00:22:55.270 --> 00:22:59.730
I then talked about pushing changes
and how when you commit locally,

00:23:00.000 --> 00:23:05.180
you need to push them to the remote so
that everyone can then use those commits.

00:23:07.100 --> 00:23:09.500
So now I'm going to dive
right into what is new.

00:23:09.620 --> 00:23:12.950
First off, this year we have
better change detection.

00:23:13.070 --> 00:23:18.170
Xcode is now better at deciding which
lines are different between your current

00:23:18.170 --> 00:23:20.820
version and the previous version.

00:23:21.080 --> 00:23:24.900
We also now have the ability to
skip or discard individual changes.

00:23:25.000 --> 00:23:28.510
We see this little button
here between the two files,

00:23:28.510 --> 00:23:30.980
one for each difference.

00:23:32.040 --> 00:23:35.730
You may have known about this feature
as part of the Git command line tools

00:23:35.740 --> 00:23:37.900
when you're doing an interactive commit.

00:23:38.010 --> 00:23:40.860
It gives you finer-grained control
for deciding what you want to

00:23:41.030 --> 00:23:42.470
commit inside of a single file.

00:23:42.610 --> 00:23:48.140
We now also have the ability to commit to
a new branch directly while committing.

00:23:48.280 --> 00:23:52.700
This is great because if you're working
on a large part of your project and you

00:23:52.700 --> 00:23:56.700
might be destabilizing your code base,
you want all that work on a branch.

00:23:56.930 --> 00:24:00.970
But maybe you forgot to create a new
branch before you started working.

00:24:01.150 --> 00:24:04.140
You get to the commit sheet and remember,
oh, shoot, I forgot to create a branch.

00:24:04.310 --> 00:24:06.140
Well, now you can do that.

00:24:06.240 --> 00:24:09.530
So let me talk really quick
about what a branch is.

00:24:10.600 --> 00:24:13.070
So here we have a simple Git repository.

00:24:13.070 --> 00:24:15.260
We have our master branch.

00:24:15.260 --> 00:24:16.650
It has a couple of

00:24:19.110 --> 00:24:23.540
When I create a branch in order to work
on the task that I'm about to start,

00:24:23.730 --> 00:24:27.190
it also has all the content
of master at that point.

00:24:28.580 --> 00:24:32.770
And now I can commit to the branch and
master doesn't have any of that content,

00:24:32.800 --> 00:24:35.660
so I won't destabilize everyone else.

00:24:36.750 --> 00:24:40.540
But everyone else, including myself,
can also still commit to master

00:24:41.020 --> 00:24:43.440
if we have small bug fixes.

00:24:44.780 --> 00:24:46.900
Now when I'm done with my branch
and I know I'm not going to

00:24:46.900 --> 00:24:50.870
destabilize anything anymore,
I get to then merge

00:24:50.870 --> 00:24:55.000
that back in to master,
and now master has all that work as well.

00:24:56.720 --> 00:24:59.340
So let's take a look at
this inside of Xcode.

00:24:59.640 --> 00:25:00.080
All right.

00:25:00.080 --> 00:25:01.540
So we've been working on this project.

00:25:01.640 --> 00:25:06.360
It's called My Best Friends.

00:25:06.430 --> 00:25:10.160
And let's run it to see what
we've worked on already.

00:25:13.160 --> 00:25:15.600
So what we have here
is 16 different tiles.

00:25:15.610 --> 00:25:17.980
They look a little bit like WWDC badges.

00:25:17.980 --> 00:25:20.770
So what happens if I tap on one of these?

00:25:21.570 --> 00:25:23.660
Well,
we see a picture of an Xcode engineer

00:25:23.660 --> 00:25:25.840
before they were an Xcode engineer.

00:25:25.840 --> 00:25:28.790
That kid's pretty cute.

00:25:29.170 --> 00:25:32.270
Now if I click around and
it's not the same person,

00:25:32.570 --> 00:25:33.780
they flip back over.

00:25:33.780 --> 00:25:37.540
The point of this game is
to match up the same person

00:25:38.000 --> 00:25:41.840
But we see there's a couple of
unimplemented features here.

00:25:41.840 --> 00:25:45.340
It's supposed to show the
present-day picture of that engineer.

00:25:45.340 --> 00:25:47.300
So let's work on this a little bit.

00:25:47.730 --> 00:25:51.450
Now we see here that I've already
been doing some work because of these

00:25:51.450 --> 00:25:53.890
M status icons on the left here.

00:25:54.010 --> 00:25:56.680
Now I know I'm ready to commit
some of this work right now,

00:25:56.680 --> 00:26:01.160
so I'm going to go to File,
Source Control, Commit.

00:26:01.880 --> 00:26:05.940
The great part about committing inside
of Xcode is that you get this view.

00:26:05.940 --> 00:26:08.940
It shows you all the files
that have been changed.

00:26:09.060 --> 00:26:11.360
That way,
you know exactly what you need to

00:26:11.370 --> 00:26:14.620
commit so that when you do commit,
you don't end up breaking

00:26:14.710 --> 00:26:16.560
the build for everyone else.

00:26:18.190 --> 00:26:23.320
So if I go over here to this file,
now we see the previous version of this

00:26:23.490 --> 00:26:25.940
game was actually a dog matching game.

00:26:26.050 --> 00:26:30.110
Now, I don't really want the engineers
to bark when I pair them up,

00:26:30.110 --> 00:26:31.730
so I deleted this code.

00:26:32.810 --> 00:26:34.840
That change looks good.

00:26:34.910 --> 00:26:37.380
And we also see here at
the bottom a new feature.

00:26:37.460 --> 00:26:38.940
We have a number 8 down here.

00:26:39.000 --> 00:26:42.990
That says that there are
8 changes in this file.

00:26:43.880 --> 00:26:46.150
It's also really easy to navigate
through all these changes by using

00:26:46.160 --> 00:26:47.800
these arrows on either side of it.

00:26:47.910 --> 00:26:51.170
So if I click the right one,
I go to the next change.

00:26:51.290 --> 00:26:52.800
And the next change.

00:26:52.800 --> 00:26:56.080
And if I click the back arrow, I go back.

00:26:56.890 --> 00:27:00.170
So the second change here is also part
of making the engineers stop barking,

00:27:00.270 --> 00:27:02.680
so I want that change right now, too.

00:27:03.250 --> 00:27:07.170
We see here a couple of
NSLogs for debug information.

00:27:07.530 --> 00:27:10.800
I don't want to commit those right now,
so I could simply just edit

00:27:10.800 --> 00:27:13.850
the left-hand side here to
look like the right-hand side,

00:27:13.970 --> 00:27:15.600
and that change would go away.

00:27:15.750 --> 00:27:21.590
Or I could click here
and say discard change.

00:27:22.040 --> 00:27:24.580
Now we see here that after
the change is reverted,

00:27:24.690 --> 00:27:27.530
I can use undo to restore the change.

00:27:27.920 --> 00:27:31.000
So if I hit OK, the change disappears.

00:27:31.120 --> 00:27:34.900
If I hit Command Z, the change reappears.

00:27:35.770 --> 00:27:39.350
I don't want that,
so I'm going to redo that.

00:27:39.350 --> 00:27:42.540
And now I also don't want this change.

00:27:42.550 --> 00:27:46.380
So now if you have focus in the
center split bar here and you

00:27:46.410 --> 00:27:50.460
have a difference selected as
we can see by the blue outline,

00:27:50.460 --> 00:27:54.570
you can also simply hit delete
and it will do the same thing.

00:27:57.980 --> 00:28:01.890
Now, if we look down at this change,
this looks like a lot of work.

00:28:01.890 --> 00:28:05.670
So I'm not ready to commit this,
but I was ready to commit the code

00:28:05.670 --> 00:28:07.680
removal up at the top of this file.

00:28:07.780 --> 00:28:11.080
So since they're in the same file,
I would like to disable

00:28:11.410 --> 00:28:12.600
just this difference.

00:28:12.600 --> 00:28:16.800
I would like to keep it around, however,
so I don't want to revert it.

00:28:16.800 --> 00:28:19.630
In order to do that,
I can press this checkbox.

00:28:19.880 --> 00:28:20.660
Now it grays out.

00:28:20.660 --> 00:28:25.060
This means that this difference will
not be committed when I hit commit,

00:28:25.060 --> 00:28:27.630
but it will still be
there when I hit commit.

00:28:27.910 --> 00:28:29.960
after the commit is done.

00:28:31.970 --> 00:28:35.730
If I select this commit,
I can also do it by

00:28:35.730 --> 00:28:37.720
hitting the space bar.

00:28:41.210 --> 00:28:44.430
Now I don't want this one either,
so I'm going to disable that.

00:28:44.590 --> 00:28:47.050
And now I'm done with this file.

00:28:49.560 --> 00:28:52.520
Now this is also removing some
of the AV audio player code in

00:28:52.690 --> 00:28:54.740
order to make the engineers bark.

00:28:54.850 --> 00:28:55.920
I don't want that.

00:28:56.080 --> 00:28:58.710
So I'm going to leave that file checked.

00:28:58.950 --> 00:29:01.000
Now this was part of the
code that I disabled,

00:29:01.070 --> 00:29:04.400
so I don't want any of this.

00:29:05.420 --> 00:29:08.840
Now I need to insert a commit message.

00:29:08.840 --> 00:29:12.910
Making the engineers stop barking.

00:29:14.810 --> 00:29:17.650
And click Commit.

00:29:17.760 --> 00:29:22.090
And now we see the commit has completed,
but I still have two files with

00:29:22.090 --> 00:29:23.820
M status badges next to them.

00:29:23.940 --> 00:29:28.650
This is because, as I said,
I disabled those differences.

00:29:30.110 --> 00:29:34.250
Now I'm actually missing a couple of
the photos down here of the engineers,

00:29:34.250 --> 00:29:37.160
so I'm going to insert those in.

00:29:37.770 --> 00:29:40.660
Even though there's eight engineers,
I only have four photos.

00:29:40.660 --> 00:29:43.940
So Eric's going to put
in some more later.

00:29:43.940 --> 00:29:46.210
But I'm going to drag these in.

00:29:47.430 --> 00:29:49.610
And since I was writing them
from outside of the project,

00:29:49.700 --> 00:29:53.220
I want copy items into destination
groups folder checked because that

00:29:53.220 --> 00:29:58.260
will copy them into my Xcode project
and also add them to source control.

00:29:58.380 --> 00:30:00.760
So when I click add,
we see the A's next to them.

00:30:01.110 --> 00:30:04.320
This means that they're going
to be added when I commit.

00:30:05.710 --> 00:30:11.700
So I'm going to go back to File,
Source Control, Commit.

00:30:11.810 --> 00:30:13.540
Now we see here,
because I added those files,

00:30:13.600 --> 00:30:15.930
the project file has changed.

00:30:16.480 --> 00:30:20.080
We see the file that I had
completely unchecked.

00:30:20.080 --> 00:30:26.330
And we see all the differences that
I had unchecked inside of the file.

00:30:26.410 --> 00:30:29.860
If I go through all of them,
we see those.

00:30:29.950 --> 00:30:33.480
Now, while you're committing and
in the regular Version editor,

00:30:33.520 --> 00:30:35.780
you don't have to look
at just source code.

00:30:36.120 --> 00:30:40.060
You can also look at binary
files such as images.

00:30:40.190 --> 00:30:42.170
Hey, that looks like me.

00:30:42.980 --> 00:30:45.240
We also see on the right
that the file is added,

00:30:45.240 --> 00:30:47.890
so there's no previous version.

00:30:47.980 --> 00:30:50.900
So I'm going to write
in a commit message now.

00:30:50.990 --> 00:30:59.280
I am adding some new engineer photos.

00:30:59.280 --> 00:30:59.280
Thanks, autocorrect.

00:31:00.180 --> 00:31:04.400
And now, since I think this code
will destabilize our work,

00:31:04.400 --> 00:31:07.660
because I haven't tested it very much,
I'm going to commit this to a branch.

00:31:07.910 --> 00:31:10.630
So I'll click Commit to
Branch in the bottom left.

00:31:10.750 --> 00:31:14.880
And we see here that my Xcode
project actually had two

00:31:14.880 --> 00:31:17.460
repositories associated with it.

00:31:17.560 --> 00:31:21.140
An engineer's repository,
which housed all my photos.

00:31:21.310 --> 00:31:25.890
It's also Subversion,
as we can see by it being named Trunk.

00:31:26.660 --> 00:31:29.290
And then I have my
best friend repository,

00:31:29.290 --> 00:31:30.320
which is Git.

00:31:30.320 --> 00:31:32.810
So since I don't really need to
branch just for adding a couple of

00:31:32.810 --> 00:31:35.910
photos to the Subversion repository,
I'm only going to branch to

00:31:35.910 --> 00:31:37.950
my best friend Git repository.

00:31:38.000 --> 00:31:41.950
So I'm going to click here
and select new branch.

00:31:43.030 --> 00:31:46.540
I'm going to name it New Photos.

00:31:46.540 --> 00:31:49.610
And click Create Branch.

00:31:49.890 --> 00:31:53.200
Now when I click Commit 7 files,
all of that work will

00:31:53.200 --> 00:31:55.110
be put onto the branch.

00:31:57.460 --> 00:31:59.830
So now I've committed all
that work into my branch,

00:31:59.830 --> 00:32:03.190
and Xcode also automatically
switched us to this branch so that

00:32:03.250 --> 00:32:05.270
we could continue working on it.

00:32:05.980 --> 00:32:09.020
But I'm ready now for
Eric to finish this work,

00:32:09.020 --> 00:32:11.860
so I'm going to push
all this to our remote.

00:32:11.940 --> 00:32:15.960
So I'll go do file, source control, push.

00:32:16.050 --> 00:32:19.750
And now we see that since I just
created that new photos branch locally,

00:32:19.840 --> 00:32:22.840
I need to create it on
the remote when I push it.

00:32:23.250 --> 00:32:25.290
So I'll hit push.

00:32:26.200 --> 00:32:31.160
and now we have pushed this branch to the
remote so Eric can start working on it.

00:32:31.160 --> 00:32:33.480
But you may remember that I was
also working a little bit on the

00:32:33.480 --> 00:32:36.780
master branch before I committed
all that to the branch.

00:32:36.910 --> 00:32:40.680
So I need to switch back to my
other branch so I can push it.

00:32:40.680 --> 00:32:43.130
So I can do that from the

00:32:43.800 --> 00:32:46.920
Now if I go down here to the
My Best Friend working copy,

00:32:46.920 --> 00:32:49.510
the blue folder,
we see here that the current

00:32:49.650 --> 00:32:52.780
branch is that new photos
branch that I just created.

00:32:54.430 --> 00:32:56.800
Now I can switch the branch.

00:32:56.890 --> 00:33:01.310
We also see here that the commit that
I just did adding some new engineer

00:33:01.510 --> 00:33:05.090
photos is listed here in the log
as well as the commit that I did on

00:33:05.090 --> 00:33:07.460
master branch before I even switched.

00:33:07.600 --> 00:33:10.220
That's because when
I branched from that commit,

00:33:10.220 --> 00:33:12.300
it still had all that work as well.

00:33:12.420 --> 00:33:15.800
So now I'm going to
switch back to master.

00:33:16.330 --> 00:33:21.860
And we see that that commit that I did
only to the branch is not there anymore.

00:33:22.460 --> 00:33:26.860
If I go back to branches
and click new photos,

00:33:26.940 --> 00:33:29.500
we see it there, but not on master.

00:33:29.570 --> 00:33:31.170
So it looks good.

00:33:31.280 --> 00:33:34.620
So I'm going to push this work on master.

00:33:34.690 --> 00:33:35.920
up to the remote.

00:33:35.920 --> 00:33:39.940
And since we'd already
pushed this before,

00:33:39.940 --> 00:33:41.360
it doesn't ask me to create it.

00:33:41.360 --> 00:33:43.490
It's just going to update the remote.

00:33:44.270 --> 00:33:45.700
So I'll click push.

00:33:45.710 --> 00:33:49.220
And now we have pushed all
this work up to the remote.

00:33:49.220 --> 00:33:51.320
So what did we just go over?

00:33:51.370 --> 00:33:54.220
We took a look at the
Version editor inside of Xcode

00:33:54.220 --> 00:33:56.350
and its better change detection.

00:33:57.300 --> 00:34:00.960
as well as the ability to skip
or discard individual changes.

00:34:01.080 --> 00:34:06.150
The best part about this feature is also
that it works for Subversion as well.

00:34:08.900 --> 00:34:14.360
And we also talked about how you
can then commit to a new branch.

00:34:14.360 --> 00:34:17.660
So the last thing I'm going to be
talking about is ignoring files.

00:34:17.800 --> 00:34:18.880
You're going to be asking why.

00:34:18.960 --> 00:34:20.700
All of my work is now
under source control.

00:34:20.700 --> 00:34:23.670
Why do I need this
certain file as ignored?

00:34:24.220 --> 00:34:33.150
Well, not every file that is part of your
project is crucial to your work.

00:34:33.150 --> 00:34:33.150
It's not necessarily source files.

00:34:33.370 --> 00:34:37.240
So you don't want to always clutter
up the window when you're committing.

00:34:37.290 --> 00:34:40.670
You might not also want them cluttering
up your repository when you look

00:34:40.820 --> 00:34:42.770
at the files on the repository.

00:34:44.100 --> 00:34:45.900
So what files might you want to ignore?

00:34:45.940 --> 00:34:49.980
I'll talk about which files
we may want to ignore and how.

00:34:50.660 --> 00:34:53.800
I'll also talk about what if
I committed those already,

00:34:53.810 --> 00:34:55.780
and how do I fix that?

00:34:57.470 --> 00:34:59.400
So what do we want to ignore?

00:34:59.400 --> 00:35:02.200
You may consider
ignoring finder settings.

00:35:02.200 --> 00:35:05.390
These are stored in the .DS store files.

00:35:07.450 --> 00:35:09.990
You may also consider
ignoring window geometry.

00:35:10.020 --> 00:35:13.180
These are specific to Xcode
and they are stored in the user

00:35:13.180 --> 00:35:15.600
interface to XC user state files.

00:35:15.670 --> 00:35:18.940
You may also consider ignoring
private schemes and breakpoints.

00:35:19.230 --> 00:35:22.150
These are the ones personal to you.

00:35:22.280 --> 00:35:26.270
They're stored in your
usernames.xc user data D files.

00:35:27.910 --> 00:35:30.180
So in order to use --
ignore all these files,

00:35:30.350 --> 00:35:33.680
you're going to need to
use the command line tools.

00:35:33.720 --> 00:35:37.110
Depending on your system configuration,
you may not have them

00:35:37.420 --> 00:35:38.960
installed by default.

00:35:38.960 --> 00:35:42.560
But they are installed as part
of Xcode in a private location.

00:35:42.560 --> 00:35:46.680
In order to access that
version of Git and Subversion,

00:35:46.700 --> 00:35:49.130
you can use XCRUN to run those.

00:35:49.140 --> 00:35:54.530
You can also use those to run any of
the other Xcode command line tools.

00:35:54.530 --> 00:35:54.550
We'll see an example of this in a moment.

00:35:56.760 --> 00:36:00.700
So you have a few choices
with ignoring files in Git.

00:36:00.740 --> 00:36:02.800
First is per repository.

00:36:02.800 --> 00:36:07.570
In order to ignore files per repository,
you place a .gitignore file at

00:36:07.660 --> 00:36:09.500
the root of your working copy.

00:36:09.580 --> 00:36:11.100
It may look a little something like this.

00:36:11.150 --> 00:36:16.210
Here I'm ignoring the DS store file
and the user interface state file.

00:36:16.440 --> 00:36:18.740
Just separated by new lines.

00:36:18.770 --> 00:36:23.020
You can then commit this file
to the repository and push it,

00:36:23.020 --> 00:36:26.120
and now everyone that closes
your -- clones your repository

00:36:26.410 --> 00:36:31.400
from the remote will take
advantage of your gitignore file.

00:36:32.950 --> 00:36:36.400
If you're like me,
you work with a lot of Git repositories.

00:36:36.400 --> 00:36:38.400
You may want to set it up globally.

00:36:38.400 --> 00:36:41.350
This will affect every
repository that you clone no

00:36:41.480 --> 00:36:43.220
matter where you got it from.

00:36:43.390 --> 00:36:47.050
In order to do this,
you can create a .gitignore global

00:36:47.050 --> 00:36:51.770
file in your home folder and then
you need to tell Git to use this one.

00:36:52.270 --> 00:36:55.660
You can combine this with
the .gitignore file as well.

00:36:55.660 --> 00:36:59.100
So in order to tell Git to
use this gitignore file,

00:36:59.100 --> 00:37:03.660
you use XCRUN git config
to point to that file.

00:37:03.660 --> 00:37:09.070
And here we see XCRUN prepended to
Git so that it will find the one

00:37:09.070 --> 00:37:12.610
that's used by Xcode and use that one.

00:37:12.930 --> 00:37:18.040
Now, the best way to ignore files
for Subversion is globally.

00:37:18.120 --> 00:37:22.140
In order to do that,
you'll edit the .subversion/config

00:37:22.290 --> 00:37:26.510
file in your home folder,
and you need to find the

00:37:26.510 --> 00:37:27.710
global-ignore setting.

00:37:27.900 --> 00:37:30.050
It may be commented out.

00:37:32.030 --> 00:37:33.660
And you make it look a
little bit like this.

00:37:33.690 --> 00:37:36.440
Here we're ignoring the same two files,
the DSStore and the

00:37:36.440 --> 00:37:39.300
userinterface.xcuserstate file.

00:37:39.440 --> 00:37:42.330
And they're just separated by
spaces all in the same line.

00:37:42.430 --> 00:37:45.040
Once you do that,
Subversion will ignore those files and

00:37:45.060 --> 00:37:47.000
you won't see them while committing.

00:37:48.290 --> 00:37:50.200
But what if I already
committed these files?

00:37:50.200 --> 00:37:52.900
How do I fix this?

00:37:52.900 --> 00:37:57.200
This is easiest in the terminal,
where you'll CD to that working

00:37:57.290 --> 00:37:59.710
copy that you want to fix.

00:38:00.380 --> 00:38:05.410
and you use XCRUN to tell Git or
Subversion to remove those files.

00:38:05.900 --> 00:38:09.650
and you'll need to do this for
every file that you want to remove.

00:38:09.720 --> 00:38:11.800
Once you've done that,
you need to actually

00:38:11.800 --> 00:38:13.020
commit that deletion.

00:38:13.340 --> 00:38:15.700
Otherwise, it didn't do anything.

00:38:15.720 --> 00:38:18.790
It just did the removal locally.

00:38:19.030 --> 00:38:21.470
So you commit the removal.

00:38:22.080 --> 00:38:24.940
And then you set up the
ignore files just as I showed.

00:38:25.000 --> 00:38:27.350
So in summary,
I talked a little bit about source

00:38:27.350 --> 00:38:30.950
control for new projects and how
Xcode makes it easy to create a

00:38:30.950 --> 00:38:33.340
Git repository instead of remotes.

00:38:33.470 --> 00:38:37.780
Talked about what's new while committing,
especially the great new feature

00:38:37.960 --> 00:38:41.800
where you can disable individual
differences in a single file.

00:38:41.920 --> 00:38:44.860
And also which files you
may want to ignore and how.

00:38:44.970 --> 00:38:48.620
So Eric will come back up and
talk about sharing your code.

00:38:54.900 --> 00:38:57.540
So once we've made all these changes,
we're going to want to

00:38:57.540 --> 00:39:00.500
share our code so that,
say, if you're going to the

00:39:00.570 --> 00:39:03.090
beer bash this afternoon,
one of your coworkers can take care

00:39:03.140 --> 00:39:05.060
of any bugs you've just introduced.

00:39:05.180 --> 00:39:08.760
So there are a few workflows that
make it easy to work with other

00:39:08.760 --> 00:39:13.390
people or even just share code between
multiple computers in your office.

00:39:13.770 --> 00:39:16.690
The first step is getting all
of your code locally up to date.

00:39:16.950 --> 00:39:18.600
Now, depending on whether you're
using Git or Subversion,

00:39:18.600 --> 00:39:23.400
this is either a pull for
Git or an update in Subversion.

00:39:23.440 --> 00:39:25.960
Doing this means that you have all
the local code -- or all the code on

00:39:25.960 --> 00:39:28.670
the server is now locally up to date.

00:39:29.950 --> 00:39:31.330
You may also need to merge some branches.

00:39:31.510 --> 00:39:35.740
So Kevin was showing earlier
how to make a branch.

00:39:35.840 --> 00:39:39.220
And we're going to need to merge
that in if we're ready to put

00:39:39.220 --> 00:39:41.220
that into our mainline code.

00:39:42.180 --> 00:39:46.090
Both this and the update operation
may involve resolving a few conflicts.

00:39:46.230 --> 00:39:48.440
So if both Kevin and I,
or any number of other

00:39:48.440 --> 00:39:51.360
people working on our code,
touch the same file in

00:39:51.360 --> 00:39:57.750
roughly the same place,
there may be a conflict where we

00:39:57.750 --> 00:39:59.180
both tried to change the same thing,
and we need to resolve it.

00:39:59.180 --> 00:39:59.180
We're going to go over that.

00:39:59.330 --> 00:40:02.330
And finally, to make sure that everyone
else has your code,

00:40:02.330 --> 00:40:04.210
you're going to need to do
a push if you're using Git,

00:40:04.250 --> 00:40:07.170
because when you first commit,
it's only locally stored

00:40:07.240 --> 00:40:09.090
on your local repository.

00:40:10.190 --> 00:40:13.140
So let's go over what we were
looking at before with Kevin's code.

00:40:13.170 --> 00:40:16.990
Now, Kevin finished pushing to the
remote at the end of his work.

00:40:17.080 --> 00:40:20.540
So that means that our remote looks
more or less like this on the right.

00:40:20.600 --> 00:40:25.810
It has a task branch as well as a
master that has a few changes as well.

00:40:26.100 --> 00:40:29.600
Now, locally, since I wasn't up to date
with Kevin's code yet,

00:40:29.670 --> 00:40:33.060
I just had the master from
before he was working on that.

00:40:33.110 --> 00:40:36.200
If I want to start working on some
of the code he was just changing,

00:40:36.200 --> 00:40:37.840
I'm going to need to do a pull.

00:40:37.900 --> 00:40:41.990
That pull is going to get my master
branch up to date with all the

00:40:42.030 --> 00:40:43.980
changes he made on the master branch.

00:40:44.040 --> 00:40:46.500
But what if I'm interested in
Kevin's task branch where he was

00:40:46.530 --> 00:40:47.850
adding those engineer photos?

00:40:48.030 --> 00:40:50.480
In that case, I'm going to need to begin
tracking that branch.

00:40:50.560 --> 00:40:52.480
That's going to give me a local copy.

00:40:52.530 --> 00:40:54.480
I might also make a
few changes to master.

00:40:54.550 --> 00:40:57.390
But I might also want
to pull Kevin's branch.

00:40:57.750 --> 00:41:01.340
and bring that in,
and I need to track it to do that.

00:41:01.380 --> 00:41:04.760
That will require me tracking his branch,
which will give me a

00:41:04.760 --> 00:41:06.260
local copy of his branch.

00:41:06.340 --> 00:41:09.470
Finally, to get all the changes
that I made on master,

00:41:09.470 --> 00:41:11.230
as well as any changes that
Kevin made in his branch,

00:41:11.230 --> 00:41:14.540
all into our mainline code,
ready to submit to the App Store,

00:41:14.590 --> 00:41:16.700
we're going to need to do a merge.

00:41:17.030 --> 00:41:20.070
That may involve
resolving some conflicts,

00:41:20.070 --> 00:41:21.910
and we'll see how to do that.

00:41:22.220 --> 00:41:26.200
Finally, since I want Kevin to finish
working on the code later today,

00:41:26.240 --> 00:41:27.600
I have to do a push.

00:41:27.630 --> 00:41:31.780
That's going to put it back up
on the server already merged.

00:41:32.650 --> 00:41:35.500
So let's go over how we do that in Xcode.

00:41:35.630 --> 00:41:38.100
And I'm going to open up the same
project that Kevin was working on.

00:41:38.180 --> 00:41:39.900
So here's the My Best Friends project.

00:41:39.980 --> 00:41:42.270
If we look at it,
we see that under the engineers,

00:41:42.270 --> 00:41:45.760
I don't have the photos that
Kevin added to the repository.

00:41:45.810 --> 00:41:49.510
And if we look at the controller,
my engineers still bark.

00:41:49.700 --> 00:41:51.750
There's still an audio player here.

00:41:51.920 --> 00:41:54.320
Now, I don't want that,
and Kevin already did that work.

00:41:54.540 --> 00:41:58.740
So I'm going to go to File,
Source Control, Update and Pull.

00:41:58.960 --> 00:42:01.340
Since we have both a Git and
Subversion repository,

00:42:01.410 --> 00:42:03.410
we're actually going to be
doing both operations to get

00:42:03.410 --> 00:42:05.590
our local code up to date.

00:42:05.720 --> 00:42:07.830
Here we see those two repositories,
engineers,

00:42:07.950 --> 00:42:10.560
which was our resource repository,
and My Best Friend,

00:42:10.660 --> 00:42:12.640
which was our code repository.

00:42:12.710 --> 00:42:16.690
I want all the updates possible,
so I'm going to leave both checked

00:42:16.690 --> 00:42:18.770
and go ahead and press Choose.

00:42:20.950 --> 00:42:22.830
Now, in this case,
we didn't have to see any of

00:42:22.920 --> 00:42:26.090
those changes in a sheet like
you may have been familiar with

00:42:26.090 --> 00:42:27.700
in previous versions of Xcode.

00:42:27.740 --> 00:42:30.400
This is because if there are no
conflicts and you've already selected

00:42:30.400 --> 00:42:33.790
that you want to update and pull,
we'll go ahead and make all those

00:42:33.970 --> 00:42:37.460
changes and locally keep you up to date.

00:42:37.540 --> 00:42:39.660
So there's no further
interaction necessary.

00:42:39.700 --> 00:42:45.400
And if we go into the supporting files,
under Resources and Engineers,

00:42:45.430 --> 00:42:47.450
we see that I still don't have
those engineer photos because

00:42:47.450 --> 00:42:49.570
Kevin committed them on a branch.

00:42:51.160 --> 00:42:54.670
And I also want to add a few myself.

00:42:54.840 --> 00:42:59.410
So I have a few images here,
the other four engineers of our eight.

00:42:59.650 --> 00:43:03.100
and I'm going to add them
to my project as well.

00:43:03.170 --> 00:43:05.800
This way when we merge,
we'll have all eight images.

00:43:05.970 --> 00:43:08.070
So I've added those, and I'm going to go
ahead and commit that.

00:43:08.240 --> 00:43:09.560
I'm on master, but that's all right.

00:43:09.570 --> 00:43:10.400
I'm just adding images.

00:43:10.400 --> 00:43:18.090
I'm not touching any of our code,
so I don't need to

00:43:18.090 --> 00:43:18.090
commit to a new branch.

00:43:18.090 --> 00:43:18.090
So I'm going to add some engineer.

00:43:18.700 --> 00:43:20.500
Photos.

00:43:20.590 --> 00:43:24.960
And I'm just going to
commit those five files.

00:43:24.960 --> 00:43:27.010
Of course, I've modified my project file
because I added photos to it.

00:43:31.630 --> 00:43:33.650
So I've committed that.

00:43:33.810 --> 00:43:36.400
Now I want to start looking
at some of Kevin's work.

00:43:36.520 --> 00:43:41.140
So if we go to the organizer,
to the My Best Friend repository,

00:43:41.230 --> 00:43:44.000
and to branches,
we see I only have master.

00:43:44.140 --> 00:43:50.330
Just like we were looking
before on the slide,

00:43:50.330 --> 00:43:50.500
since I only have a
master branch locally,

00:43:50.500 --> 00:43:50.500
I don't have any of Kevin's changes.

00:43:50.810 --> 00:43:54.370
If we look at the remotes, though,
since Kevin finished pushing his branch

00:43:54.380 --> 00:43:57.940
up to the origin and created it there,
if we expand the origin remote,

00:43:58.070 --> 00:44:01.780
we see that it actually has two branches,
master and new photos.

00:44:01.890 --> 00:44:03.900
Now,
I already have a local copy of master,

00:44:04.020 --> 00:44:06.870
but I want this new
photos branch as well.

00:44:07.010 --> 00:44:11.490
So with it selected,
I'm going to press track branch.

00:44:11.630 --> 00:44:13.060
I'm going to give it a
name and a starting point,

00:44:13.060 --> 00:44:15.440
in this case, new photos,
and I'm going to keep the

00:44:15.530 --> 00:44:16.800
name the same locally.

00:44:16.840 --> 00:44:19.390
I don't want to switch to this branch,
since I don't want to do work on it.

00:44:19.400 --> 00:44:21.640
I want to merge it into the
master branch to get it ready

00:44:21.640 --> 00:44:23.750
for our App Store submission.

00:44:24.640 --> 00:44:26.260
So I'm going to click Create.

00:44:26.300 --> 00:44:31.870
And now, if we go back to Branches,
we see that I have two branches locally.

00:44:31.930 --> 00:44:34.220
I'm all ready to do the merge.

00:44:35.210 --> 00:44:39.100
So let's go back to my
workspace and go to File,

00:44:39.370 --> 00:44:42.580
Source Control, Merge.

00:44:43.900 --> 00:44:45.340
Now, in this case,
we still have two repositories,

00:44:45.430 --> 00:44:47.590
the Engineer's and My Best Friend.

00:44:47.710 --> 00:44:49.100
Since we didn't make
any changes in Engineer,

00:44:49.100 --> 00:44:53.000
we never created branches for it,
since it's just our resources.

00:44:53.080 --> 00:44:55.900
So in this case,
we only have branches in My Best Friend.

00:44:55.970 --> 00:44:58.940
It's checked, we want to merge it in,
and we want to merge

00:44:58.970 --> 00:44:59.840
this new Photos branch.

00:45:00.100 --> 00:45:01.210
If we select it,
we see that's actually the

00:45:01.210 --> 00:45:03.730
only branch I can merge in,
because there's only two branches,

00:45:03.730 --> 00:45:06.500
and I'm already on master.

00:45:06.600 --> 00:45:09.010
So let's go ahead and start the merge.

00:45:10.390 --> 00:45:13.230
Now here we see the changes that are
going to happen during the merge.

00:45:13.390 --> 00:45:14.490
We actually haven't done the merge yet.

00:45:14.500 --> 00:45:17.590
I can simply push Cancel
if I want to back out.

00:45:17.800 --> 00:46:45.200
[Transcript missing]

00:46:45.920 --> 00:46:47.900
Of course,
I want all eight of these images.

00:46:48.010 --> 00:46:50.640
So I want to add Kevin's
changes as well as my own.

00:46:50.890 --> 00:46:52.660
And there's two different
ways I can do this.

00:46:52.710 --> 00:46:55.700
I can either do a left
and then right merge,

00:46:55.730 --> 00:47:00.860
in which case my changes, being the left,
are placed on top of Kevin's.

00:47:00.910 --> 00:47:04.160
Or since Kevin committed first,
I'll go ahead and put the changes

00:47:04.160 --> 00:47:05.800
that Kevin made before mine.

00:47:05.870 --> 00:47:07.660
So in this case,
we see all the images are added.

00:47:07.670 --> 00:47:09.700
We have eight images.

00:47:09.880 --> 00:47:13.850
And we don't have to worry about missing
any of those images or doing all this

00:47:13.940 --> 00:47:16.320
work over again that we've already done.

00:47:16.440 --> 00:47:17.140
I still can't merge.

00:47:17.240 --> 00:47:19.100
There must be another
conflict in this file.

00:47:19.200 --> 00:47:21.150
In this case,
it's because we both added the

00:47:21.150 --> 00:47:24.570
engineers to the workspace,
as well as set them up as

00:47:24.570 --> 00:47:26.330
resources for our application.

00:47:26.600 --> 00:47:28.000
So that's part of the build phase.

00:47:28.120 --> 00:47:30.270
So just like before,
I'm going to select a

00:47:30.280 --> 00:47:33.230
right and then left merge.

00:47:33.850 --> 00:47:35.850
Here we see I again
have all eight images.

00:47:36.050 --> 00:47:40.170
Now, I know that this file is no
longer in conflict because the

00:47:40.180 --> 00:47:44.880
C image here has changed to a
blue icon instead of the red icon.

00:47:45.210 --> 00:47:48.640
This means that the file was in conflict,
but those conflicts have been resolved.

00:47:48.690 --> 00:47:50.400
I can also now push the Merge button.

00:47:50.400 --> 00:47:51.860
It's no longer disabled.

00:47:51.950 --> 00:47:54.210
So let's go ahead and do that merge.

00:47:58.740 --> 00:48:06.470
And now, if I open up My Best Friends,
Supporting Files, Resources, Engineers,

00:48:06.610 --> 00:48:08.680
we see that I have eight images there.

00:48:08.770 --> 00:48:10.900
So we didn't have to throw out
my work just because Kevin also

00:48:10.900 --> 00:48:14.040
made work that conflicted with it,
even in a project file.

00:48:14.080 --> 00:48:16.800
So we don't even have to just worry --
so this can also happen in source files,

00:48:16.840 --> 00:48:20.520
but you can even resolve project
files as non-binary files.

00:48:27.620 --> 00:48:30.110
And I made a few changes to that
project file to resolve the conflict,

00:48:30.220 --> 00:48:31.600
so I need to commit.

00:48:31.710 --> 00:48:35.900
So I'm just resolving a conflict here.

00:48:35.950 --> 00:48:37.900
If I commit that...

00:48:38.210 --> 00:48:41.440
The branch has been
successfully merged in.

00:48:41.580 --> 00:48:45.900
If I go to File, Source Control Push,

00:48:46.540 --> 00:48:49.830
I can push all those changes of
merging the branch in up to the server,

00:48:50.020 --> 00:48:53.730
and now our server has all the work
for Kevin to do during the beer bash.

00:48:55.870 --> 00:48:57.530
All right, well, that is our project.

00:48:57.600 --> 00:49:02.000
It has now got all the changes we want,
so let's go ahead and run it.

00:49:08.300 --> 00:49:11.470
So just like before,
it's a matching game.

00:49:11.660 --> 00:49:14.040
Let's try a few of these tiles.

00:49:14.060 --> 00:49:14.840
Nope.

00:49:14.860 --> 00:49:17.770
Anyone have any ideas of which tiles?

00:49:30.700 --> 00:49:55.600
[Transcript missing]

00:50:02.270 --> 00:50:03.300
There's Kerry, my manager.

00:50:03.300 --> 00:50:07.400
Can't believe that
sweater still fits him.

00:50:17.450 --> 00:50:19.590
There's Kevin.

00:50:19.660 --> 00:50:21.560
Let's see if we can find... Nope.

00:50:21.560 --> 00:50:23.060
Eight.

00:50:23.270 --> 00:50:25.550
Eight.

00:50:25.650 --> 00:50:27.190
There's Mike.

00:50:35.410 --> 00:50:40.740
So we've got Mike, again.

00:50:40.740 --> 00:50:41.460
So we have two more.

00:50:41.690 --> 00:50:43.270
Any ideas?

00:50:53.950 --> 00:50:56.140
And then last we have Mirzai.

00:50:56.170 --> 00:51:04.820
So there are our Xcode engineers.

00:51:04.820 --> 00:51:08.100
And you can see what working
on Xcode does to you.

00:51:09.720 --> 00:51:13.000
So we saw how you can work with
multiple repositories in Xcode,

00:51:13.000 --> 00:51:16.120
even if they're a mixture
of Subversion and Git.

00:51:16.990 --> 00:51:19.320
We've seen how you can resolve
conflicts in project files and not

00:51:19.320 --> 00:51:20.950
necessarily treat them as binary files.

00:51:21.090 --> 00:51:24.130
This, of course,
also works in your code files.

00:51:24.740 --> 00:51:28.940
This can, of course,
happen during an update or a merge.

00:51:29.080 --> 00:51:30.670
And finally,
we see now you push code so that

00:51:31.060 --> 00:51:34.230
when you're working under Git,
that code is updated to whatever

00:51:34.280 --> 00:51:36.500
remote you're currently connected to.

00:51:37.330 --> 00:51:39.520
For more information,
please feel free to contact

00:51:39.580 --> 00:51:43.200
Michael Jurwitz or use the
Apple Developer Forums.

00:51:43.250 --> 00:51:44.650
Thank you.