WEBVTT

00:00:10.660 --> 00:00:13.790
Welcome to Working with
Schemes and Projects in Xcode.

00:00:13.960 --> 00:00:16.700
I'm Rick Ballard,
and with me today is Mirza Garibovic,

00:00:16.750 --> 00:00:20.110
and we're going to take you through
how to build and work effectively

00:00:20.400 --> 00:00:23.200
with your projects in Xcode.

00:00:24.150 --> 00:00:27.760
Whenever you want to build or perform an
action with your built product in Xcode,

00:00:27.800 --> 00:00:30.000
use a Scheme to do it.

00:00:30.110 --> 00:00:34.480
A Scheme is an object that can build
your product and perform the five

00:00:34.480 --> 00:00:39.180
Scheme actions on that product:
running, testing,

00:00:39.250 --> 00:00:42.700
profiling for performance,
analyzing your source code,

00:00:42.770 --> 00:00:44.940
and archiving for distribution.

00:00:44.990 --> 00:00:49.370
When you select one of these actions,
Xcode will build the targets needed to

00:00:49.470 --> 00:00:54.010
produce your product and then perform
the selected action on your product.

00:00:54.230 --> 00:00:56.940
So Schemes are the tools that
you use to configure and drive

00:00:56.940 --> 00:01:00.180
all your actions in Xcode,
and that's why they're the central

00:01:00.180 --> 00:01:02.110
topic of today's presentation.

00:01:02.360 --> 00:01:05.300
I'm going to start out today
by covering the core concepts:

00:01:05.560 --> 00:01:10.540
workspaces, projects, targets, schemes,
and run destinations.

00:01:10.690 --> 00:01:12.840
This may be review for some of you,
but these are the fundamentals

00:01:12.840 --> 00:01:16.100
that you'll need to understand
the rest of our presentation.

00:01:16.210 --> 00:01:19.380
Then we're going to dive into some
use cases to help you get the most

00:01:19.570 --> 00:01:21.260
out of the five scheme actions.

00:01:21.260 --> 00:01:23.870
We'll tell you how to work with
your build products and how

00:01:23.870 --> 00:01:25.420
to customize their location.

00:01:25.530 --> 00:01:29.760
Then go over how to manage your schemes
and share them with your coworkers.

00:01:29.880 --> 00:01:32.530
Finally, we're going to finish today by
showing you how you can work with

00:01:32.670 --> 00:01:35.500
static libraries for iOS projects.

00:01:35.610 --> 00:01:36.520
So let's get started.

00:01:36.710 --> 00:01:39.160
We're going to go into the core concepts.

00:01:40.570 --> 00:01:44.100
Our first concept today is workspaces.

00:01:44.150 --> 00:01:47.490
A workspace groups together references
to projects and the related files

00:01:47.550 --> 00:01:50.970
that you want to work with together
into one workspace document.

00:01:51.100 --> 00:01:53.950
Generally, you'll create a workspace for
each distinct set of projects that

00:01:54.070 --> 00:01:55.400
you want to work with together.

00:01:55.570 --> 00:01:59.400
And when you group projects in this way,
they share some important things.

00:01:59.450 --> 00:02:02.400
Every workspace gets
a unique symbol index,

00:02:02.400 --> 00:02:07.240
a location for build products,
saved window state, and build logs.

00:02:07.330 --> 00:02:10.990
Furthermore, a workspace allows implicit
dependencies to be resolved

00:02:10.990 --> 00:02:12.970
between targets in that workspace.

00:02:13.090 --> 00:02:16.160
If one target produces a product
that another target in the

00:02:16.260 --> 00:02:19.770
same workspace links against,
Xcode will discover this and it will

00:02:19.830 --> 00:02:23.630
automatically build the target that
builds the library before the target

00:02:23.630 --> 00:02:26.000
that links against that library.

00:02:26.200 --> 00:02:28.540
There's one more thing you should
know about workspaces in Xcode,

00:02:28.540 --> 00:02:31.960
and that's even if you haven't created
an explicit workspace document,

00:02:31.960 --> 00:02:34.820
when you open a project in Xcode,
you always have a workspace.

00:02:34.820 --> 00:02:38.410
If you just open a standalone project,
Xcode creates an implicit

00:02:38.410 --> 00:02:41.760
workspace for that project,
and will actually stash a workspace

00:02:41.760 --> 00:02:43.440
file inside the project wrapper.

00:02:43.440 --> 00:02:46.800
So anytime you're working with a project,
you have a workspace,

00:02:46.920 --> 00:02:51.270
which includes a unique symbol index,
locations for build products, and more.

00:02:52.370 --> 00:02:54.800
Any time in this presentation that
I say something about a workspace,

00:02:54.800 --> 00:03:00.010
you can assume that the same thing is
true about a standalone project as well.

00:03:00.350 --> 00:03:04.500
Now let's talk about projects
and about build configurations.

00:03:04.550 --> 00:03:08.100
A project contains references to
your source files and resources,

00:03:08.230 --> 00:03:11.680
targets which process those source
files to produce your product,

00:03:11.760 --> 00:03:16.870
and schemes which build those targets
and perform actions on their products.

00:03:17.040 --> 00:03:19.350
Projects also contain
build configurations,

00:03:19.470 --> 00:03:22.930
which allow you to specify different
values for your build settings for

00:03:22.930 --> 00:03:26.790
debug and release over any other
custom configurations you've created.

00:03:27.270 --> 00:03:30.740
Every project comes with debug
and release build configurations.

00:03:30.860 --> 00:03:32.950
And most build settings
only have one value,

00:03:32.950 --> 00:03:36.990
but some, like your optimization level,
will have a different value

00:03:37.000 --> 00:03:38.650
for debug and release.

00:03:38.780 --> 00:03:42.440
Most of you can get by with just debug
and release build configurations.

00:03:42.540 --> 00:03:45.310
But if you need to vary your build
settings for some other purpose,

00:03:45.420 --> 00:03:48.700
you can create another build
configuration to do so.

00:03:48.910 --> 00:03:51.840
You get at your build configurations
in the project editor.

00:03:51.960 --> 00:03:55.180
First, you select your project in the
project navigator on the left,

00:03:55.270 --> 00:03:58.140
then select the project in
the source list in the middle.

00:03:58.270 --> 00:04:03.250
The project editor will be on the right
and contains your build configurations.

00:04:03.420 --> 00:04:06.010
Now let's talk about targets.

00:04:06.970 --> 00:04:10.980
A target is the set of instructions
for processing some source files

00:04:10.980 --> 00:04:13.220
and producing one build product.

00:04:13.350 --> 00:04:17.510
So your target will reference some or
all of the source files in its project,

00:04:17.570 --> 00:04:21.220
and it contains some build phases,
which are the ordered sequence

00:04:21.220 --> 00:04:24.620
of steps that the target will
take to produce your product.

00:04:24.850 --> 00:04:28.250
There are a set of build rules which
tell the compile sources build phase

00:04:28.330 --> 00:04:30.860
how to compile those source files.

00:04:30.930 --> 00:04:34.100
And there are a set of build
settings which control just about

00:04:34.100 --> 00:04:36.140
every aspect of the build process.

00:04:36.260 --> 00:04:38.590
Targets can also have
explicit dependencies on

00:04:38.590 --> 00:04:40.110
one or more other targets.

00:04:40.240 --> 00:04:43.920
So if a target depends on another target,
the target depended on will always

00:04:43.920 --> 00:04:48.280
be automatically built whenever the
target that depends on it is built.

00:04:48.800 --> 00:04:52.240
You edit your target settings
by selecting the project in the

00:04:52.330 --> 00:04:56.250
project navigator on the left and
then instead selecting the target

00:04:56.250 --> 00:04:58.420
in the source list in the middle.

00:04:58.880 --> 00:05:02.370
In the target editor on the right,
if we select the Build Phases tab,

00:05:02.520 --> 00:05:06.070
you will see all the build phases,
the ordered sequence of steps,

00:05:06.190 --> 00:05:08.560
that are taken to produce
this target's product.

00:05:08.590 --> 00:05:12.230
So let's talk about a few of the
things that you might want to do here.

00:05:12.470 --> 00:05:15.400
If you want to make your target
explicitly depend on another target,

00:05:15.520 --> 00:05:18.170
you can add it in the
Target Dependencies build phase.

00:05:18.310 --> 00:05:21.440
If you click the plus button here,
you'll see all the targets

00:05:21.440 --> 00:05:25.060
in this target's project,
as well as all targets in projects that

00:05:25.210 --> 00:05:27.510
this target's project has a reference to.

00:05:27.640 --> 00:05:29.960
So if you're not seeing the
target you want to depend on,

00:05:30.010 --> 00:05:33.540
make sure that this target's project has
a reference to the project that contains

00:05:33.610 --> 00:05:35.060
the target you want to depend on.

00:05:35.130 --> 00:05:40.300
The Compile Sources phase allows
you to set per-file compiler flags,

00:05:40.370 --> 00:05:43.870
and also lets you just see and control
which source files this target will

00:05:44.020 --> 00:05:46.060
compile to produce your product.

00:05:46.380 --> 00:05:48.930
If you want your product to link
against some libraries or frameworks,

00:05:49.050 --> 00:05:51.900
you do that in the Link Binaries
with Libraries phase.

00:05:52.020 --> 00:05:54.930
You click the plus button here,
we'll show you all the libraries

00:05:54.930 --> 00:05:58.360
available in your chosen SDK,
as well as all libraries produced

00:05:58.490 --> 00:06:00.340
by targets in this workspace.

00:06:00.460 --> 00:06:03.290
You can also drag in any library or
framework that you have a reference

00:06:03.360 --> 00:06:07.410
to in your workspace just by dragging
it in from the project navigator.

00:06:08.720 --> 00:06:11.450
If you're building a framework,
you can control which headers wind

00:06:11.450 --> 00:06:14.440
up in the public and private headers
location inside that framework

00:06:14.980 --> 00:06:17.200
with a copy headers build phase.

00:06:17.320 --> 00:06:21.000
Any headers you leave in the project
section here will not be copied into

00:06:21.000 --> 00:06:26.040
your built framework and will instead
only be available to the project itself.

00:06:26.700 --> 00:06:29.800
If you want to copy some image files
or other resources into your product,

00:06:29.930 --> 00:06:32.520
you can do so with a copy
bundle resources phase,

00:06:32.690 --> 00:06:36.240
which copies the selected resources
into the resources directory

00:06:36.240 --> 00:06:38.040
inside your product bundle.

00:06:38.180 --> 00:06:43.170
Or you can use a copy files phase to copy
resources into any other location within

00:06:43.170 --> 00:06:45.790
the product or your build directory.

00:06:46.100 --> 00:06:49.080
Finally, if what you need to do to build
your product isn't covered

00:06:49.080 --> 00:06:52.080
by these other build phases,
you can always use a run script

00:06:52.080 --> 00:06:55.670
build phase to do anything
that a shell script can do.

00:06:55.780 --> 00:06:58.390
You can reorder this phase among
the other phases to control

00:06:58.390 --> 00:07:01.930
exactly when it runs and have
as many of them as you want.

00:07:02.590 --> 00:07:04.980
If you select the Build Rules tab,
you'll see the default set of

00:07:04.980 --> 00:07:08.040
rules that we use to control how
the compile sources phase works.

00:07:08.140 --> 00:07:10.160
Most of you don't need
to ever do anything here,

00:07:10.260 --> 00:07:12.350
but if you do have some special
type of source file that you

00:07:12.350 --> 00:07:15.220
need to compile in a special way,
you can set up a build

00:07:15.250 --> 00:07:16.570
rule to do it here.

00:07:16.960 --> 00:07:18.600
Finally, we have the build settings.

00:07:18.660 --> 00:07:21.600
You'll notice that most build
settings only have one value,

00:07:21.750 --> 00:07:24.000
but there are some,
like optimization level,

00:07:24.080 --> 00:07:27.400
that you'll have set with different
values for each configuration.

00:07:27.500 --> 00:07:30.700
If you want to vary a build setting's
value across different configurations,

00:07:30.840 --> 00:07:34.700
you can click on the disclosure triangle
to the left of the build setting.

00:07:34.870 --> 00:07:38.370
And if you want to set further
conditions per SDK or per architecture

00:07:38.370 --> 00:07:41.720
to vary your build setting further,
you can hover over the build

00:07:41.720 --> 00:07:45.850
configuration here and click the
little plus button that shows up.

00:07:46.690 --> 00:07:49.230
Now, there's one more important axis of
configuration with your build settings,

00:07:49.330 --> 00:07:50.700
and that's the levels.

00:07:50.820 --> 00:07:54.300
If you click on the Levels tab,
you'll see the complete hierarchy from

00:07:54.300 --> 00:07:56.840
which your build settings are inherited.

00:07:56.950 --> 00:07:59.860
On the right are the default values
that will be used for each build

00:07:59.860 --> 00:08:01.940
setting if you don't override them.

00:08:02.050 --> 00:08:04.930
And to the left of that are the
project-level build settings.

00:08:05.140 --> 00:08:07.530
If you go back to the Project Editor,
you'll notice that there's

00:08:07.620 --> 00:08:08.850
a Settings tab there,
too.

00:08:08.950 --> 00:08:12.030
And any build setting values that
you set at the project level will

00:08:12.060 --> 00:08:14.880
be inherited by all of its targets.

00:08:15.000 --> 00:08:17.480
The Target Level Build Settings is
where you go to set build setting

00:08:17.510 --> 00:08:20.940
values that apply to just this target,
and it will override the values

00:08:21.050 --> 00:08:23.000
set at the project or the default.

00:08:23.100 --> 00:08:25.280
And finally, on the left,
we show you the resolved value

00:08:25.310 --> 00:08:28.370
that will be used for every
build setting in the target.

00:08:29.460 --> 00:08:31.800
You'll notice that there's
some green boxes drawn here.

00:08:31.930 --> 00:08:35.460
We draw a green box around the level
from which the final value of each of

00:08:35.460 --> 00:08:38.120
these build settings is being taken,
so you can just see at a

00:08:38.280 --> 00:08:41.490
glance where your actual build
setting values are coming from.

00:08:42.420 --> 00:08:43.440
So that's targets.

00:08:43.520 --> 00:08:46.540
Let's talk about the
schemes that build them.

00:08:46.550 --> 00:08:49.830
A scheme is a file that contains the
instructions for building a set of

00:08:49.920 --> 00:08:54.140
targets to produce a product and then
performing actions on that product.

00:08:54.300 --> 00:08:58.720
So we have actions for running, testing,
profiling for your performance,

00:08:58.850 --> 00:09:02.860
analyzing your source code,
and archiving for distribution.

00:09:03.010 --> 00:09:06.250
For each of those actions,
the scheme contains a specification

00:09:06.250 --> 00:09:09.750
of the targets that will be built
when you perform that action.

00:09:10.140 --> 00:09:13.360
You can get at your schemes in the upper
left-hand corner of the Workspace window,

00:09:13.440 --> 00:09:14.520
in the Scheme pop-up.

00:09:14.660 --> 00:09:16.260
When you click this,
you'll see a list of all the

00:09:16.260 --> 00:09:17.630
schemes available in your Workspace.

00:09:17.840 --> 00:09:20.960
And if you choose Edit Scheme,
we'll bring up the Scheme sheet

00:09:20.960 --> 00:09:24.010
and let you edit the settings
of your selected scheme.

00:09:25.700 --> 00:09:28.080
When you want to perform a Scheme action,
you can do so from the

00:09:28.080 --> 00:09:30.990
Product menu in Xcode's menu bar,
or you can click the button in the upper

00:09:30.990 --> 00:09:32.940
left-hand corner of the Workspace window.

00:09:33.300 --> 00:09:40.890
And actually, if you hold this,
we offer the four Scheme actions

00:09:40.890 --> 00:09:42.170
that you often want to run
repeatedly by clicking often,

00:09:42.170 --> 00:09:42.170
which are Run, Test, Profile,
and Analyze.

00:09:43.060 --> 00:09:47.300
And you'll notice that I haven't
mentioned build as a scheme action.

00:09:47.450 --> 00:09:48.730
Build is not one of the actions.

00:09:48.890 --> 00:09:52.440
Building is actually a step that
always happens before a scheme action.

00:09:52.440 --> 00:09:54.820
So when you're building,
you're always building for some purpose,

00:09:55.010 --> 00:09:57.840
like I want to build my
product to run on the debugger,

00:09:57.840 --> 00:10:01.400
or I'm ready to build my product
to archive for distribution.

00:10:01.530 --> 00:10:04.020
The action that you've chosen
here specifies how you build,

00:10:04.020 --> 00:10:06.490
and that it can choose which
targets you're building from

00:10:06.490 --> 00:10:10.290
the scheme and which build
configuration they should build with.

00:10:10.690 --> 00:10:13.500
We do offer a plain build
command in the product menu,

00:10:13.550 --> 00:10:16.050
but that's actually just a
shortcut for build for running,

00:10:16.050 --> 00:10:19.170
which is the most common
reason you want to build.

00:10:20.130 --> 00:10:22.340
In this Scheme Edit sheet,
you'll notice that the five Scheme

00:10:22.340 --> 00:10:25.340
commands are listed on the left,
but at the top above them,

00:10:25.370 --> 00:10:28.040
there's a section for Build,
and that's where you go to configure how

00:10:28.040 --> 00:10:30.970
your Scheme actions build in the Scheme.

00:10:31.590 --> 00:10:34.030
The scheme lists all the targets
that the scheme will build,

00:10:34.230 --> 00:10:37.400
along with checkboxes that determine
which scheme actions build which targets.

00:10:37.600 --> 00:10:39.530
So, you know,
most of your targets you want to

00:10:39.530 --> 00:10:42.160
build for all five scheme actions,
but sometimes you don't.

00:10:42.300 --> 00:10:44.350
So, for example,
if you have a unit test bundle,

00:10:44.480 --> 00:10:46.330
you really only need to build
those tests when you're going

00:10:46.430 --> 00:10:48.690
to perform the test action,
so you only need to have that

00:10:48.930 --> 00:10:50.820
checked for the test action here.

00:10:50.920 --> 00:10:53.410
You notice that some of these
checkboxes can't be disabled?

00:10:53.580 --> 00:10:55.550
Well,
if a scheme action is actually using the

00:10:55.550 --> 00:10:59.420
product of one of these targets directly,
like, say, your run action is running

00:10:59.420 --> 00:11:02.280
the application product of
your application target,

00:11:02.330 --> 00:11:05.540
then that target must be
built for that scheme action,

00:11:05.580 --> 00:11:08.800
and you can't disable it
without unsetting the scheme

00:11:08.810 --> 00:11:10.660
action using that product.

00:11:11.480 --> 00:11:13.200
We have some other options here.

00:11:13.300 --> 00:11:15.560
By default,
Xcode will try to parallelize the

00:11:15.560 --> 00:11:20.120
build of all your targets as long as
it can with respect to dependencies.

00:11:20.250 --> 00:11:23.410
If for some reason you need Xcode
to instead build each target

00:11:23.410 --> 00:11:27.240
listed in your scheme in series,
you can turn off parallel builds.

00:11:27.320 --> 00:11:30.630
Also, the implicit dependencies feature
I mentioned earlier can be turned

00:11:30.630 --> 00:11:33.430
off here if you don't want Xcode
to automatically find and build

00:11:33.430 --> 00:11:36.920
targets that produce libraries
before it builds the targets that

00:11:36.920 --> 00:11:38.720
link against those libraries.

00:11:39.730 --> 00:11:43.060
You noticed that build configuration
was not there in the build slice.

00:11:43.210 --> 00:11:46.600
That's because each action specifies
its own build configuration.

00:11:46.750 --> 00:11:49.180
For example, when running or testing,
you usually want your

00:11:49.190 --> 00:11:50.440
debug build configuration.

00:11:50.600 --> 00:11:52.730
But when profiling or
archiving for distribution,

00:11:52.900 --> 00:11:55.240
you usually want your
release build configuration.

00:11:55.400 --> 00:12:00.830
If you select an action here,
like the test action that I've selected,

00:12:01.000 --> 00:12:04.750
you'll see a control that lets you
control which build configuration

00:12:04.750 --> 00:12:04.750
is used when performing that action.

00:12:05.600 --> 00:12:06.520
So that's schemes.

00:12:06.760 --> 00:12:08.440
Now,
when you're performing a scheme action,

00:12:08.510 --> 00:12:10.640
you always have to tell Xcode
where you want to perform it,

00:12:10.810 --> 00:12:13.500
and that where is the run destination.

00:12:13.630 --> 00:12:18.700
Run destination encompasses the device
that you want to build for and run on.

00:12:18.810 --> 00:12:21.840
So we give you a choice among
the plugged-in iOS devices

00:12:21.900 --> 00:12:25.290
configured for development,
all your available simulators,

00:12:25.400 --> 00:12:28.350
and the local Mac,
depending on what your product supports.

00:12:28.560 --> 00:12:31.880
You'll note that you only see
devices that are actually compatible

00:12:31.880 --> 00:12:35.500
with your target's base SDK and
deployment target build settings.

00:12:35.500 --> 00:12:38.920
You get at your run destinations
in the upper left on the right-hand

00:12:38.990 --> 00:12:41.500
side of the scheme pop-up,
and when you select that,

00:12:41.500 --> 00:12:44.780
we'll show you all available run
destinations that are compatible with

00:12:44.960 --> 00:12:47.220
the targets in your selected scheme.

00:12:48.500 --> 00:12:50.400
That covers the core fundamentals.

00:12:50.560 --> 00:12:53.730
Now I'd like to invite Mirza up on
stage to walk you through some use

00:12:53.930 --> 00:12:56.390
cases for the five scheme actions.

00:12:59.430 --> 00:13:03.290
So I have a project here,
and suppose I'm an iOS app developer,

00:13:03.290 --> 00:13:06.370
and I'm getting ready
to ship my latest app.

00:13:06.760 --> 00:13:09.290
I've had my coworker
Rick here testing it for me,

00:13:09.340 --> 00:13:11.670
and he just sent me an
email about a crash.

00:13:11.770 --> 00:13:16.200
I ran my app and tried to reproduce it,
but I couldn't, so I asked Rick to send

00:13:16.280 --> 00:13:17.630
me his application data.

00:13:17.660 --> 00:13:21.240
The application data represents
the saved state of my application

00:13:21.250 --> 00:13:23.920
on a particular device,
and Rick collected it

00:13:23.920 --> 00:13:28.130
from his application,
from his device, by using the organizer,

00:13:28.170 --> 00:13:29.920
which you can find here
in the window menu.

00:13:29.920 --> 00:13:34.650
In order to use the
application data on my device,

00:13:34.650 --> 00:13:38.950
I'm going to want to
add it to my workspace.

00:13:38.950 --> 00:13:38.950
So first I'll extract this.

00:13:42.640 --> 00:13:45.140
and then just drag it into
the project navigator.

00:13:45.330 --> 00:13:47.420
I'll copy it into my project,
but I don't actually want to

00:13:47.420 --> 00:13:51.870
add it to a target because it
isn't part of my application.

00:13:53.350 --> 00:13:56.080
Next up,
I need to configure the run action to use

00:13:56.080 --> 00:13:59.190
this app data every time it runs my app.

00:13:59.190 --> 00:14:02.640
I can get to the run action by going
through the edit scheme settings here,

00:14:02.640 --> 00:14:04.580
but since I'm going to be
running right after this,

00:14:04.720 --> 00:14:07.570
there's a better way to do that,
and that's to hold option

00:14:07.580 --> 00:14:10.160
when I click on run here,
or hold option and click on

00:14:10.220 --> 00:14:11.800
the run button right here.

00:14:12.130 --> 00:14:13.990
So let's do that.

00:14:15.070 --> 00:14:18.500
So here's the edit scheme sheet
showing me the run settings.

00:14:18.530 --> 00:14:20.490
I have a bunch of options
here for what I'm going to run

00:14:20.500 --> 00:14:22.000
and how I'm going to run it.

00:14:22.080 --> 00:14:24.400
And I'm going to skip right
here to the Options tab and

00:14:24.400 --> 00:14:26.000
look at the application data.

00:14:26.120 --> 00:14:29.000
The pop-up shows all the app
data packages in my workspace,

00:14:29.010 --> 00:14:30.920
and here's the one I just added.

00:14:31.110 --> 00:14:33.240
You'll notice that because
I held down Option,

00:14:33.240 --> 00:14:35.890
there's a Run button here in
addition to a Done button.

00:14:36.050 --> 00:14:40.080
So I can click to run right here
as soon as I made my changes.

00:14:44.360 --> 00:14:47.190
So Xcode's launching my
project in the simulator.

00:14:47.300 --> 00:14:49.020
So I have a bit of a stopwatch app.

00:14:49.070 --> 00:14:50.440
It's preloaded with Rick's data.

00:14:50.440 --> 00:14:53.100
I can still interact with it.

00:14:53.100 --> 00:14:56.250
And Rick's told me that if I just
add and remove a few items,

00:14:56.250 --> 00:14:58.570
I should be able to reproduce the crash.

00:14:59.300 --> 00:15:00.860
Now,
Xcode's running my app in the debugger,

00:15:00.860 --> 00:15:04.220
and when I crash, it can tell me what
happened where I've crashed.

00:15:04.380 --> 00:15:05.910
You can see right here
that I'm somewhere in,

00:15:06.070 --> 00:15:08.160
obviously, Message Send,
but this isn't really

00:15:08.300 --> 00:15:10.330
a useful crash point.

00:15:10.530 --> 00:15:13.270
Now I noticed this code has some
weird memory management practices,

00:15:13.270 --> 00:15:15.350
and it hasn't been
switched over to Arc yet.

00:15:15.490 --> 00:15:18.520
So I suspect I might be using a
dangling pointer or maybe sending

00:15:18.520 --> 00:15:20.380
a message to a deallocated object.

00:15:20.400 --> 00:15:24.410
The tool we usually use
for that is NSZombies.

00:15:25.010 --> 00:15:27.720
Now,
let's configure Xcode to help me do that.

00:15:27.850 --> 00:15:31.210
If I option click on Run again
to go back to the Scheme options

00:15:31.600 --> 00:15:34.600
and switch to Diagnostics,
you can see that I have

00:15:34.600 --> 00:15:36.140
a bunch of options here.

00:15:36.150 --> 00:15:39.050
I can enable these with checkboxes
instead of having to know the

00:15:39.050 --> 00:15:42.190
underlying environment variables
that control these in the OS.

00:15:42.350 --> 00:15:45.250
You might want to enable all of these,
but they all have pros and cons,

00:15:45.260 --> 00:15:47.770
so look inside our
documentation for what they are.

00:15:47.870 --> 00:15:51.200
I'll enable zombie objects,
and let's run again.

00:15:53.320 --> 00:15:57.600
So Xcode relaunched my app,
reloaded the application data,

00:15:57.650 --> 00:16:01.800
and what I'm going to do is play around
and see if I can reproduce that again.

00:16:01.800 --> 00:16:03.490
And here we go.

00:16:03.540 --> 00:16:07.350
Now, I'm still getting assembly here,
but if I look into the debug console,

00:16:07.470 --> 00:16:11.590
I can see a message about a message
being sent to the allocated object.

00:16:11.590 --> 00:16:13.200
That's definitely a zombie, right?

00:16:13.270 --> 00:16:17.700
If I look around in this stack
frame up here and go up to my code,

00:16:17.740 --> 00:16:20.820
I can see where in my code I've crashed.

00:16:20.940 --> 00:16:24.780
So I'm sending a message or I'm trying to
print a message with this object's array.

00:16:24.940 --> 00:16:28.680
That seems pretty harmless,
but if I backtrack a little bit up here,

00:16:28.680 --> 00:16:31.840
you can see that I'm trying to
save some memory by releasing

00:16:31.840 --> 00:16:33.490
this array when it's empty.

00:16:33.540 --> 00:16:37.610
But that leaves me with a potentially
daggling pointer in the object's IVAR,

00:16:37.610 --> 00:16:40.490
and the rest of my code
isn't set up to handle that.

00:16:40.820 --> 00:16:44.900
So I could set this to nil and then
compensate elsewhere in my code,

00:16:44.980 --> 00:16:46.240
but you know,
this seems an awful lot like

00:16:46.350 --> 00:16:48.900
premature optimization to me,
so I'm just going to delete

00:16:48.960 --> 00:16:50.700
this block of code altogether.

00:16:50.700 --> 00:16:55.800
Okay, let's try again.

00:17:00.600 --> 00:17:02.470
Fresh state.

00:17:02.520 --> 00:17:04.060
And that seems to work.

00:17:04.060 --> 00:17:06.770
It's not crashing the same way.

00:17:07.150 --> 00:17:08.890
All right.

00:17:09.050 --> 00:17:10.950
Let's move on to the test action.

00:17:11.090 --> 00:17:14.240
If I click and hold here,
I can change my current action to test,

00:17:14.290 --> 00:17:17.590
and I'll option click to go
straight into the settings.

00:17:18.670 --> 00:17:21.480
You can see here that all my
tests run under a debugger,

00:17:21.590 --> 00:17:23.720
and here are my application tests.

00:17:23.780 --> 00:17:26.240
Now, my app's actually using
a static library as well,

00:17:26.240 --> 00:17:29.360
and I'd like to run those
tests any time I run my tests.

00:17:29.470 --> 00:17:32.890
If I click on plus here,
I'll see all the tests in my workspace,

00:17:32.890 --> 00:17:36.450
I can add my library tests,
and let's test that right away.

00:17:39.100 --> 00:17:42.040
So Xcode's running my tests,
and I can immediately see that

00:17:42.040 --> 00:17:43.820
I already have a failure right here.

00:17:44.000 --> 00:17:47.910
If I go to the log navigator,
I can see the tests as it's running them.

00:17:48.080 --> 00:17:50.430
Now, I have a lot of tests here,
and they're going to take a while to run,

00:17:50.570 --> 00:17:52.080
so I'll just stop this.

00:17:52.140 --> 00:17:55.650
I want to focus on the test that failed,
and I can actually set up Xcode

00:17:55.720 --> 00:17:58.860
to use just that one test,
so I can quickly iterate on it.

00:17:58.860 --> 00:18:03.050
I'll option click on test again,
and I can expand these groups,

00:18:03.050 --> 00:18:06.430
and option click here to
enable and disable everything,

00:18:06.430 --> 00:18:10.580
then I'll disable the library
tests and the test I saw failing.

00:18:10.640 --> 00:18:13.210
If I just test again here...

00:18:14.450 --> 00:18:17.420
I'll get that test failure and
none of my other tests are running.

00:18:17.550 --> 00:18:20.800
Now, if I click on this,
I can bring it up in the source editor.

00:18:20.920 --> 00:18:22.490
So here's my test code.

00:18:22.630 --> 00:18:24.780
This seems like a little bit
of a strange place to fail,

00:18:24.780 --> 00:18:27.340
so I'm creating a new
account with the name John,

00:18:27.450 --> 00:18:29.710
then I'm checking that the
new account name is John.

00:18:29.720 --> 00:18:31.910
That should just work, right?

00:18:32.020 --> 00:18:35.180
Now, every time I run my tests,
Xcode is running them in the debugger.

00:18:35.190 --> 00:18:38.180
So if I want to take a closer look,
I can set a breakpoint right

00:18:38.180 --> 00:18:40.630
here and hit Test again.

00:18:42.510 --> 00:18:45.140
Okay, here we are,
stopped in the debugger,

00:18:45.140 --> 00:18:49.160
and I'm just going to step over
this line and expect the results.

00:18:49.160 --> 00:18:51.470
So if I look at the
variables view right here,

00:18:51.470 --> 00:18:53.210
I can see that this account is nil.

00:18:53.380 --> 00:18:54.380
It seems a little strange.

00:18:54.380 --> 00:18:55.620
I should have gotten an account.

00:18:55.880 --> 00:19:00.510
So I can go to the debug console
right here and print the error.

00:19:00.720 --> 00:19:03.820
So I'm being told that an account
named John already exists and

00:19:04.040 --> 00:19:07.440
the account creation failed.

00:19:07.440 --> 00:19:10.650
So actually you can see my test
case set of code right here.

00:19:10.730 --> 00:19:13.040
I already created an
account with the name John.

00:19:13.340 --> 00:19:14.560
There's a collision, right?

00:19:14.690 --> 00:19:16.480
I still want to test
account creation separately,

00:19:16.480 --> 00:19:21.710
so I'll just change this name
to Johnny and test again.

00:19:25.380 --> 00:19:27.030
So I stopped at my breakpoint.

00:19:27.280 --> 00:19:30.370
I can remove it and continue on.

00:19:30.510 --> 00:19:32.000
And my test succeeded.

00:19:32.190 --> 00:19:32.600
All right.

00:19:32.610 --> 00:19:35.800
That's how you can configure Xcode to
control exactly which tests you run and

00:19:35.800 --> 00:19:38.340
then debug the tests you're working with.

00:19:38.420 --> 00:19:40.330
Let's move on to the profile action.

00:19:40.480 --> 00:19:43.790
If I click and hold here,
switch to profile,

00:19:46.260 --> 00:19:48.570
Xcode launches instruments for me.

00:19:48.570 --> 00:19:50.880
And I have a bunch of tools
here that I can use to measure

00:19:50.880 --> 00:19:51.980
the performance of my app.

00:19:52.110 --> 00:19:54.270
That's generally what you
would use profiling for,

00:19:54.380 --> 00:19:55.890
to measure performance issues.

00:19:56.030 --> 00:19:59.640
Now, Rick's been testing my app again,
and he told me that if he plays

00:19:59.640 --> 00:20:03.190
with it for a really long time,
it crashes eventually.

00:20:03.310 --> 00:20:04.620
That sounds like memory growth, right?

00:20:04.820 --> 00:20:06.440
The first thing I like
to check for is leaks,

00:20:06.440 --> 00:20:09.930
and I can select, re-select here,
and profile.

00:20:10.020 --> 00:20:12.490
But if I'm going to be
working with leaks a lot,

00:20:12.490 --> 00:20:15.960
I can actually set up Xcode to
launch leaks directly for me.

00:20:16.030 --> 00:20:18.720
So let's cancel that, go back to Xcode.

00:20:18.760 --> 00:20:22.460
I'll option-click on profile,
bring up the edit scheme sheet,

00:20:22.520 --> 00:20:25.960
and you can see that I have
an option right here to select

00:20:25.960 --> 00:20:27.950
the instrument I want to use.

00:20:28.190 --> 00:20:29.160
There's leaks.

00:20:29.160 --> 00:20:32.980
I'll change that and hit profile again.

00:20:33.140 --> 00:20:35.280
So here's instruments.

00:20:37.460 --> 00:20:44.060
immediately opened up Leaks,
and it's running my app in the simulator.

00:20:44.150 --> 00:20:48.690
So I'll play around here a little
bit and see if we can see anything.

00:20:55.450 --> 00:20:57.730
So if you look down here,
you can see there seem to

00:20:57.730 --> 00:20:59.430
be leaking NSDate objects.

00:20:59.550 --> 00:21:02.280
Now, my app's actually showing dates,
so that kind of makes sense.

00:21:02.490 --> 00:21:05.130
So I'll stop this recording
and look at the data.

00:21:05.230 --> 00:21:08.250
Instruments telling me that
the responsible stack frame is

00:21:08.340 --> 00:21:09.960
in my insert new object code.

00:21:10.070 --> 00:21:12.570
And if I click in the toolbar
to bring in the full stack,

00:21:12.800 --> 00:21:16.580
I can double-click on my
stack frame and see my code.

00:21:17.550 --> 00:21:21.670
So I'm creating a date with alloc init,
then adding it to an objects array,

00:21:21.670 --> 00:21:23.320
and this isn't Arc code, right?

00:21:23.450 --> 00:21:26.080
So I still have ownership of this date,
and I need to release it

00:21:26.190 --> 00:21:26.970
after I'm done with it.

00:21:27.130 --> 00:21:28.830
That's why it's leaking.

00:21:29.090 --> 00:21:32.400
Now I can go back to Xcode
and fix this profile again,

00:21:32.450 --> 00:21:34.380
but there's another way
I could have caught this before

00:21:34.380 --> 00:21:37.460
I even started Instruments,
and that's the analyze action.

00:21:37.600 --> 00:21:39.670
Let's go back and try that.

00:21:41.190 --> 00:21:44.380
So I can click and hold
here to switch to analyze.

00:21:44.410 --> 00:21:47.470
When I run the analyzer,
Xcode runs the Clang static analyzer

00:21:47.550 --> 00:21:49.380
on all the source in my targets.

00:21:49.510 --> 00:21:51.780
The results are similar
to compiler warnings,

00:21:51.940 --> 00:21:54.670
but the analyzer employs more
thorough algorithms that reason

00:21:54.670 --> 00:21:57.570
about the semantics of my code,
and it can track down leaks

00:21:57.570 --> 00:21:58.980
like the one we just saw.

00:21:59.340 --> 00:22:02.980
So I click here to analyze,
and that was pretty quick.

00:22:02.980 --> 00:22:04.280
I have an issue here.

00:22:04.280 --> 00:22:05.470
I can click on that.

00:22:05.560 --> 00:22:09.310
I'm being told that I might be leaking
an object stored into the variable date.

00:22:09.390 --> 00:22:13.230
If I click on this annotation,
I get a control flow graph.

00:22:13.320 --> 00:22:15.610
So by the time I get
to step two right here,

00:22:15.690 --> 00:22:18.890
it's telling me I'm no longer using date,
I've leaked it.

00:22:18.930 --> 00:22:22.350
So I can fix that just by
adding date release right here.

00:22:25.050 --> 00:22:28.540
Okay, let's analyze again,
see if that helps.

00:22:28.540 --> 00:22:31.000
Okay, so analysis succeeded.

00:22:31.000 --> 00:22:32.990
There are no more warnings.

00:22:33.120 --> 00:22:36.580
So I fixed the crash, I fixed the leak,
my text cases are all good,

00:22:36.720 --> 00:22:38.500
there are no more warnings here.

00:22:38.680 --> 00:22:42.340
If I'm ready to ship this app,
I'll use the archive action.

00:22:42.420 --> 00:22:45.840
So when you archive,
Xcode builds an optimized release build

00:22:46.000 --> 00:22:48.490
of your product ready for distribution.

00:22:48.650 --> 00:22:50.520
First of all,
I'll change my destination to a

00:22:50.520 --> 00:22:54.260
device because I want to distribute
something that runs on a device.

00:22:54.340 --> 00:22:57.790
Then I'll go up to the products
menu and click on archive.

00:23:03.900 --> 00:23:04.910
So here's the organizer.

00:23:05.140 --> 00:23:08.890
Here's my new archive,
but there's a bit of a problem here,

00:23:08.890 --> 00:23:09.290
right?

00:23:09.420 --> 00:23:11.040
It's not showing my application icon.

00:23:11.040 --> 00:23:13.740
Instead, I'm getting this generic
default archive icon.

00:23:13.740 --> 00:23:17.120
And Xcode's telling me that the archive
type is a generic Xcode archive.

00:23:17.120 --> 00:23:18.350
There's no version number.

00:23:18.410 --> 00:23:19.600
There's no identifier.

00:23:19.600 --> 00:23:22.240
This isn't something I'm going to
be able to submit to the store.

00:23:23.020 --> 00:23:25.710
So to see what's wrong here,
we're going to have to learn a little

00:23:25.720 --> 00:23:27.390
bit about the structure of archives.

00:23:27.390 --> 00:23:29.510
Let's switch back to slides for a moment.

00:23:29.550 --> 00:23:30.820
So what is an archive?

00:23:30.820 --> 00:23:33.860
It's actually a bundle,
and it contains three things.

00:23:33.860 --> 00:23:35.970
An install style build
of your application,

00:23:35.970 --> 00:23:38.690
which has post-processing steps
applied to it to make your

00:23:38.730 --> 00:23:40.720
application ready for distribution.

00:23:40.720 --> 00:23:44.150
It contains your app's debug
symbols so that you can symbolicate

00:23:44.150 --> 00:23:46.240
crash logs and debug other things.

00:23:46.240 --> 00:23:49.270
And it also contains metadata
about your submission status,

00:23:49.440 --> 00:23:51.820
comments,
and notes you might want to record.

00:23:53.860 --> 00:23:57.200
There's a specific type of archive
called an application archive.

00:23:57.270 --> 00:24:01.120
The definition is that it contains
nothing other than your application.

00:24:01.260 --> 00:24:03.740
So your build process must take
care not to install anything

00:24:03.750 --> 00:24:05.430
else separately into the archive.

00:24:05.440 --> 00:24:09.800
A common problem with apps that use
frameworks or libraries is that they

00:24:09.950 --> 00:24:13.150
accidentally install the framework
and library next to the archive in

00:24:13.150 --> 00:24:14.850
addition to inside their application.

00:24:14.860 --> 00:24:18.030
So what you want to do is just embed
frameworks in your application,

00:24:18.150 --> 00:24:20.450
link in the libraries,
but make sure they aren't

00:24:20.450 --> 00:24:21.960
installed in the archive.

00:24:21.960 --> 00:24:26.620
And for that,
we have a skip install build setting.

00:24:26.640 --> 00:24:30.660
So let's go back to my project and
see if that's what's going wrong.

00:24:31.780 --> 00:24:36.400
So let's dig into this archive,
take a close look at the inside.

00:24:36.440 --> 00:24:38.610
Here's a bundle, I right click on it.

00:24:38.610 --> 00:24:39.740
Here's a bundle.

00:24:39.770 --> 00:24:42.930
I right click on that to
show the package contents.

00:24:43.060 --> 00:24:45.040
Here are the things I mentioned.

00:24:45.040 --> 00:24:48.240
Here are my debug symbols,
an info with metadata and a products

00:24:48.330 --> 00:24:51.460
directory with my project products.

00:24:51.460 --> 00:24:54.680
There's my application right there.

00:24:54.680 --> 00:24:57.240
And here's my straight static library.

00:24:57.240 --> 00:24:59.260
It's not supposed to be in here; right?

00:24:59.260 --> 00:25:01.560
Now, I can't just delete
this from the archive.

00:25:01.560 --> 00:25:04.290
I need to go back to Xcode and
tell it how to create a new

00:25:04.290 --> 00:25:05.730
archive without that library.

00:25:05.830 --> 00:25:10.420
If I look inside the project navigator,
I can see that I am using a

00:25:10.530 --> 00:25:12.650
static library right here.

00:25:12.650 --> 00:25:16.690
And if I go to its target's
build settings and search for

00:25:17.840 --> 00:25:22.190
I see that I've set that to no,
but it's really supposed to be yes.

00:25:22.310 --> 00:25:25.090
So let's change that in Archive again.

00:25:32.940 --> 00:25:33.800
So here we go.

00:25:33.970 --> 00:25:34.650
Here's an archive.

00:25:34.650 --> 00:25:36.090
It has my app icon.

00:25:36.380 --> 00:25:38.740
Xcode recognizes it as
an application archive.

00:25:38.740 --> 00:25:41.730
It has a version number
and a bundle identifier.

00:25:42.650 --> 00:25:46.420
So that's how you can look inside
Archive to fix common problems and

00:25:46.420 --> 00:25:49.020
get your app ready for distribution,
making sure that you're not

00:25:49.020 --> 00:25:50.850
shipping anything you don't expect.

00:25:53.880 --> 00:25:56.560
So that covers the basic scheme actions.

00:25:56.730 --> 00:26:00.980
The one you'll use mostly, day to day,
is the run action.

00:26:00.980 --> 00:26:03.970
It also has the most useful options.

00:26:04.200 --> 00:26:07.220
So I'm going to demonstrate a
more advanced use case that shows

00:26:07.220 --> 00:26:10.650
you how to use custom executables
and environment variables or

00:26:10.650 --> 00:26:14.090
arguments based on build settings.

00:26:14.230 --> 00:26:18.240
Suppose that I'm working in a
plugin for a Mac OS X application.

00:26:19.080 --> 00:26:23.860
The way plugins usually work is that the
plugin is a bundle or dynamic library,

00:26:23.890 --> 00:26:27.100
and the host application is developed
separately but is then instructed to

00:26:27.100 --> 00:26:29.060
load the plugin dynamically at runtime.

00:26:29.140 --> 00:26:31.370
It needs to know where to find
the plugin in order to load it.

00:26:31.510 --> 00:26:34.380
So I've created an app
here from the template,

00:26:34.450 --> 00:26:35.830
the bundle template.

00:26:36.140 --> 00:26:39.000
And I can build this, test it,
analyze it,

00:26:39.010 --> 00:26:41.710
but I can't actually run it or
profile it because a standalone

00:26:41.710 --> 00:26:43.800
plugin doesn't really do anything.

00:26:43.930 --> 00:26:47.060
What I need to do is tell
Xcode to automate the act of

00:26:47.060 --> 00:26:50.380
launching the host application,
telling it where to

00:26:50.380 --> 00:26:52.660
find and load my plugin,
and then connecting with a

00:26:52.680 --> 00:26:56.050
debugger so that I can verify
my plugin actually works.

00:26:56.240 --> 00:26:58.820
And I can do all that
in the run settings.

00:26:58.980 --> 00:27:01.370
I'm going to option click on run again.

00:27:01.600 --> 00:27:03.660
and go to the Info tab.

00:27:03.780 --> 00:27:07.530
You see here that I have a control
for the executable I'm running.

00:27:07.650 --> 00:27:10.370
It's empty because my
plugin has no executables,

00:27:10.370 --> 00:27:11.000
right?

00:27:11.120 --> 00:27:15.320
What I can do here is select
Other to find my host application.

00:27:16.750 --> 00:27:19.740
Now,
I have an app here called Quux Arcade.

00:27:19.890 --> 00:27:22.460
It acts like an arcade cabinet.

00:27:22.540 --> 00:27:26.600
It loads plugins to provide
the games that it later shows.

00:27:26.630 --> 00:27:31.190
I'll select that, and let's just run it
and see what happens.

00:27:31.400 --> 00:27:35.260
So Xcode's building my plugin,
and it's going to launch Quark's

00:27:35.260 --> 00:27:39.190
Arcade attached with a debugger,
but Quark's Arcade doesn't know

00:27:39.300 --> 00:27:41.280
where to find my plugin yet.

00:27:41.510 --> 00:27:43.410
So I'm getting a message
in the bug console,

00:27:43.480 --> 00:27:44.460
no plugins found.

00:27:44.500 --> 00:27:50.440
I need to figure out how to tell
Xcode where to find my plugin.

00:27:50.460 --> 00:27:53.660
Quark's Arcade is instructing
me that I can pass extra

00:27:53.660 --> 00:27:57.880
plugins path in the environment,
and this is how I'll tell

00:27:58.050 --> 00:28:00.210
it where to find my plugin.

00:28:00.600 --> 00:28:02.720
I'm going to copy this right here.

00:28:02.760 --> 00:28:06.990
Now, when Xcode builds my plugin,
it puts it in its build products there.

00:28:07.550 --> 00:28:11.000
I need to tell Quark's Arcade
where my build's project is,

00:28:11.040 --> 00:28:13.770
and also do that in the run settings.

00:28:15.090 --> 00:28:17.850
If I switch to the Arguments tab,
I'll see a section for

00:28:17.850 --> 00:28:19.190
environment variables.

00:28:19.350 --> 00:28:22.610
Create a new one and paste
in extra plugins path.

00:28:22.820 --> 00:28:25.570
Now, how do I know where my
build product store is?

00:28:25.710 --> 00:28:28.480
Xcode actually provides
it in a build setting.

00:28:28.620 --> 00:28:31.040
This way I don't have to know
where it is in case I move my

00:28:31.040 --> 00:28:33.460
project or reconfigure it otherwise.

00:28:33.670 --> 00:28:41.000
So what I'm going to do here is click
and use $brace build product store.

00:28:41.970 --> 00:28:45.570
And the $BRIS or parentheses
syntax tells Xcode to expand this

00:28:45.670 --> 00:28:48.860
build setting in this value when
it launches the host application.

00:28:48.990 --> 00:28:51.470
If you look at our documentation,
you'll find a list of

00:28:51.470 --> 00:28:53.140
useful build settings.

00:28:53.250 --> 00:28:56.250
The only thing left is to
tell Xcode which target to

00:28:56.250 --> 00:28:58.710
get that build setting from,
and I'm going to select

00:28:58.710 --> 00:29:00.490
Spruce Blasters right here.

00:29:00.580 --> 00:29:02.370
So let's run again.

00:29:03.700 --> 00:29:06.460
So here's Quark's Arcade
and it found Swift Blasters.

00:29:06.630 --> 00:29:07.840
Great.

00:29:07.930 --> 00:29:10.130
So that's how you can use custom
executables and environment

00:29:10.230 --> 00:29:12.210
variables from build settings.

00:29:12.420 --> 00:29:13.450
All right.

00:29:13.520 --> 00:29:16.020
I'd like to hand over to Rick to
tell you more about how to

00:29:16.030 --> 00:29:18.510
work with your build products.

00:29:23.100 --> 00:29:24.440
Thanks, Mirza.

00:29:24.460 --> 00:29:28.450
I'm going to show you how you can work
with and customize your build products.

00:29:28.560 --> 00:29:31.500
But first,
let's talk a bit about where they go.

00:29:31.590 --> 00:29:34.710
Every workspace has its
own derived data directory,

00:29:34.850 --> 00:29:39.540
and that's where we put derived data,
your source code index, your build logs,

00:29:39.840 --> 00:29:43.410
your save Windows date goes in there,
and your build products and

00:29:43.410 --> 00:29:45.180
intermediates by default.

00:29:46.390 --> 00:29:49.590
Workspaces are distinguished by path,
so if you have multiple

00:29:49.590 --> 00:29:52.800
copies of the same workspace,
they actually get their own

00:29:52.800 --> 00:29:56.310
derived data directory because
they're at different paths.

00:29:57.190 --> 00:29:59.730
So I'm going to show you how
we can dive in and customize

00:29:59.860 --> 00:30:02.560
where this derived data goes.

00:30:02.730 --> 00:30:03.640
Great.

00:30:04.050 --> 00:30:07.780
In Xcode,
if you go to Xcode's preferences,

00:30:08.920 --> 00:30:13.100
There's a Locations preference panel,
and here you can see that

00:30:13.100 --> 00:30:15.770
there's a derived data setting.

00:30:15.920 --> 00:30:19.380
This allows me to control exactly
where my derived data goes.

00:30:19.420 --> 00:30:22.690
And if I click this arrow,
Xcode will bring up the derived

00:30:22.690 --> 00:30:24.410
data location in Finder.

00:30:24.540 --> 00:30:27.140
Here you can see I've got a bunch
of different folders with kind of

00:30:27.140 --> 00:30:29.040
a long gibberish suffix after that.

00:30:29.180 --> 00:30:31.680
Well,
each of these folders are each workspaces

00:30:31.870 --> 00:30:34.060
per workspace derived data directory.

00:30:34.190 --> 00:30:38.210
And they're named after the
workspace they apply to and have

00:30:38.210 --> 00:30:42.100
appended a hash that's generated
from that workspace path.

00:30:42.250 --> 00:30:46.240
So it can disambiguate which
one goes with which workspace.

00:30:46.340 --> 00:30:49.830
If I look inside one of these,
you'll see that I have build products

00:30:49.980 --> 00:30:52.020
and an index and stuff like that.

00:30:52.140 --> 00:30:54.690
So one thing I might want to do,
you know, by default this goes in

00:30:54.690 --> 00:30:57.340
my home library folder,
but one thing I might want to do

00:30:57.380 --> 00:31:00.600
is put it in a secure location,
like an encrypted disk image,

00:31:00.630 --> 00:31:01.900
for security reasons.

00:31:01.980 --> 00:31:04.470
So it's actually really easy to do that.

00:31:04.610 --> 00:31:07.230
Let's go back to Xcode here,
and I can choose a different

00:31:07.330 --> 00:31:09.060
location for my derived data.

00:31:09.140 --> 00:31:13.580
So I'm going to choose custom,
and I'll bring up the file chooser,

00:31:13.580 --> 00:31:16.160
and I've got a secure disk image here.

00:31:16.730 --> 00:31:21.910
And I'm going to name this
one Secure Derived Data.

00:31:24.040 --> 00:31:26.750
Now if I choose this,
all my derived data for all

00:31:26.750 --> 00:31:29.960
my projects go into folders,
per workspace derived data folders,

00:31:30.000 --> 00:31:33.980
at that location instead of
in my home library folder.

00:31:34.460 --> 00:31:37.280
I might also want to set this
on a per-workspace basis.

00:31:37.360 --> 00:31:40.900
If, say, different workspaces need to go
into different secure disk images,

00:31:40.900 --> 00:31:43.380
like maybe I'm a consultant and
I have different clients who

00:31:43.500 --> 00:31:44.800
have different security needs.

00:31:44.860 --> 00:31:48.700
So I'm going to set this back to
default and close my preferences.

00:31:48.700 --> 00:31:53.490
If I go to the File menu,
I can choose Project Settings,

00:31:53.550 --> 00:31:55.760
or if this is an explicit
workspace document,

00:31:55.760 --> 00:31:57.350
it would be called Workspace Settings.

00:31:57.360 --> 00:32:01.510
And here I get a sheet that
gives me the same control,

00:32:01.510 --> 00:32:07.030
so I can set a custom drive data
location on a per-workspace basis.

00:32:07.730 --> 00:32:11.490
Okay, another thing I might want to be
able to do is find my build products

00:32:11.590 --> 00:32:14.560
so that I can easily manipulate
them directly or inspect them.

00:32:14.720 --> 00:32:17.940
So, you know,
say I want to use the NM tool to inspect

00:32:18.050 --> 00:32:20.190
the symbol table of my build product.

00:32:20.450 --> 00:32:22.600
Let me show you how to do that.

00:32:22.760 --> 00:32:25.000
First, I'm going to launch Terminal.

00:32:25.160 --> 00:32:27.600
And I'm going to type xc run nm.

00:32:27.630 --> 00:32:29.290
xc run-- whoops-- nm.

00:32:29.870 --> 00:32:35.890
xc run will find nm in my installed
Xcode and launch it out of there.

00:32:36.010 --> 00:32:39.100
And I'll pass -a to say I want
to dump the whole symbol table.

00:32:39.180 --> 00:32:41.600
And now I need to pass it
the path to my build product.

00:32:41.770 --> 00:32:44.600
So let's figure out how
to get that in Xcode.

00:32:44.660 --> 00:32:47.760
If I go back here and
click the Advanced button,

00:32:47.810 --> 00:32:50.560
I'll get a sheet that gives
me direct control over exactly

00:32:50.560 --> 00:32:52.690
where my build products go.

00:32:52.830 --> 00:32:56.380
It also has these fields down at the
bottom that show me the path to my build

00:32:56.380 --> 00:32:58.400
products and my build intermediates.

00:32:58.430 --> 00:33:01.170
And I can just click this button
here to bring up the build

00:33:01.170 --> 00:33:03.010
products folder for this workspace.

00:33:03.210 --> 00:33:07.000
You can see I've got a per
configuration build directory in here.

00:33:07.050 --> 00:33:08.480
And there's my build product.

00:33:08.500 --> 00:33:12.440
So I'm just going to drag this right
into terminal to paste in its path.

00:33:12.680 --> 00:33:17.750
I'm also going to supply the path
to the binary inside this bundle.

00:33:18.110 --> 00:33:20.400
And there's my symbol table.

00:33:20.690 --> 00:33:22.570
That was pretty easy.

00:33:22.690 --> 00:33:26.000
Okay, another thing I might want to
do is share build products.

00:33:26.130 --> 00:33:29.300
As I said, by default,
each workspace gets its own derived

00:33:29.300 --> 00:33:32.100
data directory with its own build
products so that one workspace

00:33:32.220 --> 00:33:33.420
doesn't get mixed up with another.

00:33:33.420 --> 00:33:36.530
It doesn't clobber another workspace's
build products or accidentally

00:33:36.650 --> 00:33:39.760
link against something that was
produced by a different workspace.

00:33:39.770 --> 00:33:43.600
But sometimes I actually want to
intentionally share build products

00:33:43.600 --> 00:33:46.040
between multiple projects or workspaces.

00:33:46.290 --> 00:33:49.410
So, for example, let me close this down.

00:33:49.660 --> 00:33:54.250
I have my Smith Blasters plugin here,
and it goes into the

00:33:54.280 --> 00:33:56.440
build products directory,
and Quarks Arcade knows

00:33:56.550 --> 00:33:57.660
to look for it there now.

00:33:57.660 --> 00:34:01.460
But I have another plugin project
called Super X Code World,

00:34:01.460 --> 00:34:05.210
and I want Super X Code World to
also get picked up by Quarks Arcade

00:34:05.210 --> 00:34:09.540
at the same time when it launches,
so I load both plugins.

00:34:09.540 --> 00:34:11.410
Since Quarks Arcade is just looking
at my build products directory,

00:34:11.490 --> 00:34:14.260
that means they both need to be in
the same build products directory,

00:34:14.260 --> 00:34:15.060
both plugins.

00:34:15.070 --> 00:34:17.260
So there are a couple ways I can do this.

00:34:17.260 --> 00:34:20.040
The first way is to put both
projects into the same workspace.

00:34:20.080 --> 00:34:24.060
So I'm going to go ahead
and create a new workspace,

00:34:24.060 --> 00:34:27.480
and I'll call it Quarks Arcade plugins.

00:34:27.480 --> 00:34:30.870
And I'll just stick this on my desktop.

00:34:33.530 --> 00:34:38.520
And now I can go ahead and drag
in both the Spiff Blasters project

00:34:38.650 --> 00:34:41.400
and the Super Xcode World project.

00:34:41.550 --> 00:34:44.190
And now since both projects
are in the same workspace,

00:34:44.370 --> 00:34:47.510
they're both going to use this
workspace's derived data directory,

00:34:47.510 --> 00:34:49.500
as long as I have the
workspace open here.

00:34:49.640 --> 00:34:52.120
And that means that their build
products are going to go in the

00:34:52.120 --> 00:34:53.700
same build products directory.

00:34:53.860 --> 00:34:58.440
So I can select my Super Xcode
World scheme and just build.

00:34:58.580 --> 00:35:02.100
So that'll put its plugin in
my build products directory.

00:35:02.220 --> 00:35:05.960
And the same Spiff Blaster scheme
that I set up before is available

00:35:05.960 --> 00:35:09.200
through the workspace because
it's in that project here.

00:35:09.300 --> 00:35:11.680
So when I build and run,
it'll still launch Quark's Arcade

00:35:11.680 --> 00:35:14.300
and it's still set up to look
in my build products directory.

00:35:14.420 --> 00:35:17.450
And you can see Quark's Arcade
now finds both plugins in the

00:35:17.450 --> 00:35:19.600
build products directory at once.

00:35:20.210 --> 00:35:22.200
Okay,
what if I want to do something similar,

00:35:22.200 --> 00:35:24.460
sharing build products,
but I don't actually want to

00:35:24.460 --> 00:35:27.000
have to put all the projects I'm
working with into one workspace

00:35:27.000 --> 00:35:28.130
and have them all open at once?

00:35:28.240 --> 00:35:30.000
There's a way to do that, too.

00:35:30.000 --> 00:35:33.920
I'm going to close my workspace
and open Spiff Blaster's backup.

00:35:33.920 --> 00:35:37.470
Go back to File, Project Settings,
Advanced,

00:35:37.600 --> 00:35:42.940
which is where I get direct control
over where my build products go.

00:35:42.940 --> 00:35:45.770
You see,
one of the options here is Shared Folder.

00:35:45.820 --> 00:35:49.930
When I choose Shared Folder,
my workspace will put its build products

00:35:50.100 --> 00:35:54.020
into a folder of the name I specify
here inside the derived data location,

00:35:54.020 --> 00:35:56.960
instead of into this
per-workspace derived data folder.

00:35:56.960 --> 00:36:00.800
So I can call this shared
folder Quark's Arcade Plugins,

00:36:00.800 --> 00:36:04.720
and if I were to open Super Xcode
World and set Shared Folder

00:36:04.720 --> 00:36:08.070
there to the same folder,
then both these workspaces would

00:36:08.130 --> 00:36:11.030
build into the same folder,
and Quark's Arcade would be able

00:36:11.030 --> 00:36:12.750
to find both plugins the same way.

00:36:12.780 --> 00:36:14.940
I can also set this.

00:36:15.500 --> 00:36:18.030
Globally, for all my projects,
if I really want to,

00:36:18.030 --> 00:36:20.530
in Xcode's location preferences,
the same way.

00:36:22.300 --> 00:36:24.050
Okay,
I'm going to show you something else now.

00:36:24.060 --> 00:36:27.780
Often you may have an external tool
or script that you want to run on

00:36:27.780 --> 00:36:31.400
your build products outside of Xcode,
but the problem you run into is,

00:36:31.420 --> 00:36:33.760
how does that tool know where
to find your build products,

00:36:34.090 --> 00:36:36.860
especially if it's running on an
automated server or something like that?

00:36:36.880 --> 00:36:39.920
There are a couple different
ways you can tell external tools

00:36:40.000 --> 00:36:41.000
how to find your build products.

00:36:41.060 --> 00:36:44.650
The first way is to choose a
location where you're going to

00:36:44.650 --> 00:36:47.640
place those build products yourself
and tell Xcode to put them there,

00:36:47.640 --> 00:36:49.960
and then tell that external
tool the same location.

00:36:50.810 --> 00:36:54.200
So if I choose custom here,
I'm going to choose an absolute location,

00:36:54.200 --> 00:36:58.390
and I'll use the file picker
under products to choose my

00:36:58.390 --> 00:37:02.800
secure source disk image,
and I'll create a products folder here,

00:37:02.800 --> 00:37:04.920
create that, and choose it.

00:37:05.190 --> 00:37:08.600
And now this workspace will put all
its build products at that location.

00:37:08.600 --> 00:37:10.720
So since that's a path
that's known to me,

00:37:10.720 --> 00:37:13.300
I can just give that path to
my external tool or script,

00:37:13.500 --> 00:37:15.700
and it will know how to find
my build products there too.

00:37:15.700 --> 00:37:20.080
Well, what if I don't want to abandon
per-workspace derived data directories,

00:37:20.190 --> 00:37:21.980
because I'm working with Xcode,
multiple copies of this workspace,

00:37:21.980 --> 00:37:23.540
and I don't want them
to clobber each other,

00:37:23.540 --> 00:37:27.320
but I still want to give my path,
my products path to an external tool.

00:37:27.320 --> 00:37:29.130
There's another way I can do that.

00:37:29.240 --> 00:37:33.520
I'm going to leave this set to the
default location and dismiss this sheet,

00:37:33.730 --> 00:37:35.700
and I'm going to bring up terminal again.

00:37:35.700 --> 00:37:38.960
And to do this,
I'm going to use Xcode build to print

00:37:38.960 --> 00:37:40.800
out the build settings of this target.

00:37:40.800 --> 00:37:45.500
So I'm going to say Xcode build
and pass the dash show build

00:37:45.500 --> 00:37:47.680
settings command line flag.

00:37:47.680 --> 00:37:50.700
Now I need to pass dash project
and go to the build settings.

00:37:50.700 --> 00:37:51.880
I can give it the path to my project.

00:37:51.940 --> 00:37:55.620
So I'll drag in spiff
blasters to paste that in.

00:37:57.110 --> 00:37:59.990
Now I need to say -target and say which
targets build settings I want to see.

00:38:00.090 --> 00:38:03.070
So it's the Spiff Blaster's target.

00:38:04.150 --> 00:38:06.640
Now when I hit return,
Xcode build prints out all the build

00:38:06.640 --> 00:38:08.480
setting values from this target.

00:38:08.640 --> 00:38:14.300
So if I do a find here and
search for built products dir,

00:38:14.300 --> 00:38:19.240
you can see that it's printed out the
location where my build products are.

00:38:19.360 --> 00:38:22.900
So I could have my external tool or
script run this same command itself and

00:38:22.900 --> 00:38:26.710
parse out the build products dir value
from this output and look there to find

00:38:26.830 --> 00:38:28.940
the build products that it wants to find.

00:38:28.940 --> 00:38:30.560
Great.

00:38:31.170 --> 00:38:33.630
There's one more thing you often
do with your build products,

00:38:33.750 --> 00:38:37.570
and that's to clean them out
so you can do a clean build.

00:38:37.760 --> 00:38:42.610
In Xcode, when you use the clean command,
we will analyze the targets in

00:38:42.620 --> 00:38:46.610
your selected scheme and delete the
primary product of each of those

00:38:46.750 --> 00:38:49.100
targets so that you start over clean.

00:38:49.100 --> 00:38:52.140
Sometimes this can take a little while,
and the other downside here is

00:38:52.140 --> 00:38:53.630
it can sometimes miss files.

00:38:53.730 --> 00:38:57.130
If you have a copy files build phase
or run script build phase that lay

00:38:57.260 --> 00:39:01.160
things down in the products directory
that aren't in your actual product,

00:39:01.260 --> 00:39:03.700
the clean command doesn't
know how to remove those.

00:39:03.810 --> 00:39:06.240
So sometimes,
both for speed and for thoroughness,

00:39:06.340 --> 00:39:09.710
it makes more sense to just delete
your build products folder outright.

00:39:10.050 --> 00:39:12.400
And I know a lot of you go
and do this in Finder often.

00:39:12.470 --> 00:39:14.240
Well, there's a way to do it
straight from Xcode,

00:39:14.280 --> 00:39:15.390
which is more convenient.

00:39:15.520 --> 00:39:18.680
If you hold down the option key,
the clean command turns into

00:39:18.680 --> 00:39:20.500
a clean build folder command.

00:39:20.610 --> 00:39:24.420
If you choose that and confirm the sheet,
we just delete the build

00:39:24.420 --> 00:39:26.300
products folder outright.

00:39:26.420 --> 00:39:28.570
All right,
that's about enough about build products.

00:39:28.750 --> 00:39:30.940
I'm going to go back to slides.

00:39:31.730 --> 00:39:35.140
And let's move on to talk about
how to manage your schemes and

00:39:35.140 --> 00:39:37.480
share them with your coworkers.

00:39:38.380 --> 00:39:41.700
The first thing you generally want
to know is when schemes are created.

00:39:41.810 --> 00:39:44.490
You can create them manually,
but Xcode will also create

00:39:44.640 --> 00:39:47.900
schemes automatically for you
under a couple of circumstances.

00:39:48.050 --> 00:39:52.360
First, whenever you create a new target
or a new project with targets,

00:39:52.360 --> 00:39:55.510
Xcode will create a scheme
for each new target.

00:39:55.670 --> 00:39:58.230
Second of all,
whenever you open an existing project or

00:39:58.320 --> 00:40:02.190
workspace that you haven't opened before,
or that you have but someone's

00:40:02.300 --> 00:40:04.990
created new targets in it
since you last had it open,

00:40:05.070 --> 00:40:08.880
Xcode will go and create a scheme
for you for each of the new targets

00:40:08.880 --> 00:40:10.860
in that project or workspace.

00:40:10.980 --> 00:40:15.150
These auto-created targets are per user,
so they're not shared with anyone else.

00:40:15.210 --> 00:40:17.620
And if you delete them,
Xcode will remember that it's

00:40:17.640 --> 00:40:20.160
auto-created them for you in the past,
so it knows not to

00:40:20.170 --> 00:40:22.210
auto-create them again,
and so you don't have to play

00:40:22.210 --> 00:40:25.200
whack-a-mole with unwanted schemes.

00:40:25.340 --> 00:40:27.140
I said we create a
scheme for every target,

00:40:27.140 --> 00:40:28.420
but that's not quite right.

00:40:28.590 --> 00:40:30.760
For most targets,
we auto-create a scheme for you,

00:40:30.760 --> 00:40:32.930
like framework targets,
application targets.

00:40:33.070 --> 00:40:35.000
But if you have a unit
test bundle target,

00:40:35.120 --> 00:40:39.320
we'll instead try to add that test bundle
to the test action of another scheme.

00:40:39.430 --> 00:40:42.500
So if your test bundle or unit
tests for your application,

00:40:42.500 --> 00:40:46.490
we'll find your application scheme and
just add the test bundle to the test

00:40:46.580 --> 00:40:48.690
action of that application scheme.

00:40:48.770 --> 00:40:51.410
If you create a new test bundle
and you get a scheme with it,

00:40:51.510 --> 00:40:54.190
you usually want to delete that
test scheme and just add the

00:40:54.280 --> 00:40:59.080
test bundle to the test action of
whatever scheme the tests test.

00:40:59.990 --> 00:41:02.320
If you have a large workspace,
you may get a lot of auto-created

00:41:02.320 --> 00:41:03.630
schemes when you open it.

00:41:03.760 --> 00:41:05.900
Don't feel like you
have to keep them all.

00:41:06.080 --> 00:41:09.470
For example, if I have a framework scheme
and an application scheme,

00:41:09.710 --> 00:41:11.900
but my application links
against my framework,

00:41:11.900 --> 00:41:14.090
I can go ahead and delete
my framework scheme,

00:41:14.090 --> 00:41:16.530
because whenever I build
the application scheme,

00:41:16.530 --> 00:41:19.730
it'll build that framework
target as well via dependencies.

00:41:20.190 --> 00:41:24.130
You can manage your schemes by going
to the Scheme pop-up in the upper left,

00:41:24.140 --> 00:41:26.240
where you'll see all the
schemes in your workspace,

00:41:26.390 --> 00:41:28.940
and choosing the Manage Schemes option.

00:41:29.010 --> 00:41:30.750
This brings down the
Scheme Management sheet,

00:41:30.850 --> 00:41:35.360
which is where you can go to create,
delete, reorder schemes,

00:41:35.720 --> 00:41:37.920
and to change some other options.

00:41:38.020 --> 00:41:40.070
So, first of all,
in the upper left-hand corner,

00:41:40.070 --> 00:41:41.890
we have an Auto Create Schemes checkbox.

00:41:42.070 --> 00:41:43.600
Most of you will want
to leave this checked,

00:41:43.660 --> 00:41:47.180
but if you have a complicated
workspace with complicated

00:41:47.320 --> 00:41:50.100
shared schemes that you've set
up that you want your team using,

00:41:50.130 --> 00:41:52.430
and you don't want new team members
getting all the auto-created schemes

00:41:52.580 --> 00:41:55.480
when they open your workspace because
you want them to use your shared ones,

00:41:55.500 --> 00:41:59.310
you can turn this checkbox off,
and Xcode won't auto-create

00:41:59.310 --> 00:42:00.600
schemes for them.

00:42:00.720 --> 00:42:04.420
The Auto Create Schemes Now button will
cause Xcode to create a scheme for every

00:42:04.420 --> 00:42:07.890
target in your workspace that isn't
already part of an existing scheme.

00:42:08.020 --> 00:42:11.270
So, this is useful if you've deleted a
whole bunch of auto-created schemes,

00:42:11.270 --> 00:42:12.700
but now want to get them back.

00:42:13.160 --> 00:42:16.590
So say you've authored a complicated
scheme with some very specific settings,

00:42:16.610 --> 00:42:19.320
and now you want to share them
with other people on your team.

00:42:19.420 --> 00:42:21.650
Well,
if you check the Shared checkbox here,

00:42:21.720 --> 00:42:25.540
Xcode will move that scheme from your
per-user data location to the shared

00:42:25.540 --> 00:42:29.100
data location inside the project,
and everybody else who's working

00:42:29.200 --> 00:42:32.100
with that project or workspace
will see that scheme too.

00:42:32.190 --> 00:42:35.120
Any modifications you make to
the scheme at this point will

00:42:35.120 --> 00:42:36.730
also be shared with everybody.

00:42:37.040 --> 00:42:39.490
Sometimes you may have a lot of
schemes that are shared that other

00:42:39.490 --> 00:42:42.300
people on your team have created
that you don't actually care about,

00:42:42.400 --> 00:42:44.730
like maybe some QA schemes
if you're in engineering,

00:42:44.820 --> 00:42:47.650
and you don't want to see them
cluttering up your scheme pop-up.

00:42:47.750 --> 00:42:51.130
If you uncheck the Show checkbox,
we won't show that in the

00:42:51.130 --> 00:42:54.480
scheme pop-up anymore,
but this checkbox is per-user,

00:42:54.540 --> 00:42:57.000
so you won't be affecting anybody else.

00:42:57.390 --> 00:42:59.810
Sometimes you have a shared
scheme and you want to make

00:42:59.810 --> 00:43:02.940
a quick one-off change to it,
like add some argument to the run action.

00:43:03.000 --> 00:43:05.500
But you don't want to accidentally
make that change for everybody

00:43:05.580 --> 00:43:06.710
if you forget to delete it.

00:43:06.840 --> 00:43:10.570
So what we recommend in that case is
to select the shared scheme and choose

00:43:10.580 --> 00:43:12.640
Duplicate from the gear menu down here.

00:43:12.940 --> 00:43:16.300
That will give you a per-user
temporary copy of that scheme.

00:43:16.360 --> 00:43:18.480
Well, it can be temporary,
it can be permanent, up to you.

00:43:18.710 --> 00:43:21.840
And you can make your changes and then
just delete it when you're done with

00:43:21.890 --> 00:43:24.300
it if you don't want to keep it around.

00:43:25.270 --> 00:43:28.960
The container column here shows you
where each of these schemes is stored.

00:43:29.130 --> 00:43:32.450
So, you know,
every scheme file is stored inside

00:43:32.450 --> 00:43:36.140
a project or workspace wrapper,
and you can choose to store

00:43:36.140 --> 00:43:39.370
your schemes in a project if
you want everyone who works with

00:43:39.370 --> 00:43:42.870
that project to see that scheme,
or you can choose to store them in a

00:43:42.870 --> 00:43:46.410
workspace if you want certain schemes
to only show up for people who are

00:43:46.470 --> 00:43:48.680
using one of your specific workspaces.

00:43:49.480 --> 00:43:53.700
So let's talk a bit more about exactly
where these scheme files go on disk.

00:43:53.850 --> 00:43:57.740
Inside each project or workspace wrapper,
there are two interesting directories:

00:43:57.800 --> 00:44:01.690
XE user data, which is all the user data
for that project or workspace,

00:44:01.840 --> 00:44:04.280
and XE shared data,
which is all the shared data.

00:44:04.430 --> 00:44:10.620
So inside the shared data directory,
there's an XE schemes directory,

00:44:10.680 --> 00:44:13.970
and inside there are all the scheme
files that are shared for users

00:44:13.970 --> 00:44:13.970
of this project or workspace.

00:44:14.220 --> 00:44:17.510
In the XC User Data folder,
you'll see a separate folder for each

00:44:17.600 --> 00:44:20.300
user of this project or workspace,
named after the short

00:44:20.330 --> 00:44:21.600
username of that user.

00:44:21.720 --> 00:44:24.440
Inside there is another
XC Schemes folder,

00:44:24.600 --> 00:44:28.010
and inside there you'll find
all the per-user schemes,

00:44:28.050 --> 00:44:30.400
as well as an XC Scheme
Management Property List,

00:44:30.510 --> 00:44:33.360
which stores things like which
schemes you've chosen to show or hide,

00:44:33.460 --> 00:44:35.630
what order you've arranged
them to show up in,

00:44:35.770 --> 00:44:39.910
and which schemes Xcode has auto-created
for you in the past so it knows

00:44:39.910 --> 00:44:42.060
not to auto-create them again.

00:44:42.570 --> 00:44:44.650
If you bring up the
Source Control Commit sheet,

00:44:44.660 --> 00:44:47.460
you'll see the same
hierarchy represented here.

00:44:47.590 --> 00:44:49.500
And generally,
you want to commit all your shared

00:44:49.500 --> 00:44:52.290
schemes so that you can actually
share them with your coworkers.

00:44:52.390 --> 00:44:54.920
You may also want to commit your
per-user schemes in your Scheme

00:44:54.950 --> 00:44:57.540
Management Property List if
you want to save those things.

00:44:57.670 --> 00:45:02.250
By default, we don't add any schemes
to Source Control.

00:45:02.300 --> 00:45:06.750
So when you want to commit a scheme,
you need to make sure to check

00:45:06.750 --> 00:45:06.750
the checkbox on the left here
to add it to Source Control.

00:45:07.360 --> 00:45:09.700
That's about all you need to
know about Scheme Management.

00:45:09.700 --> 00:45:12.330
So to finish today,
I'd like to invite Mirza back up to

00:45:12.330 --> 00:45:16.920
take you through a demo of how you can
work with static libraries for iOS.

00:45:22.440 --> 00:45:23.100
Thanks, Rick.

00:45:23.340 --> 00:45:25.060
Hello again.

00:45:25.060 --> 00:45:31.060
So what I'd like to show you here is
how you can start with an application,

00:45:31.210 --> 00:45:35.140
extract your utility code
into a static library,

00:45:35.370 --> 00:45:39.540
and then use that library
in your other applications.

00:45:39.540 --> 00:45:43.540
So I have a project
here called Hazard Map.

00:45:46.120 --> 00:45:51.480
If I launch this in the simulator,
I can see it displays a map.

00:45:51.530 --> 00:45:55.630
I want to use this map view across
my other applications as well.

00:45:55.880 --> 00:46:00.230
So the first step is to create a
separate project for my static library.

00:46:00.410 --> 00:46:03.860
I'm going to go to File, New Project.

00:46:04.620 --> 00:46:08.270
Select the Cocoa Touch Static
Library template,

00:46:08.270 --> 00:46:10.250
and I'll call it libmap.

00:46:13.020 --> 00:46:16.380
For my application to use my library,
I need to add a reference to the

00:46:16.400 --> 00:46:20.100
library project for my app project,
and there's a shortcut that

00:46:20.190 --> 00:46:21.890
I can use to do that right here.

00:46:21.930 --> 00:46:26.530
If I select Hazard Map,
I've created a libraries group for it.

00:46:27.120 --> 00:46:30.030
Now I need to take care not to
put my library source inside

00:46:30.030 --> 00:46:34.200
my application source because
I want to share this library

00:46:34.200 --> 00:46:35.540
across other applications as well.

00:46:35.540 --> 00:46:39.350
So I'm just going to put
it up here next to my apps.

00:46:41.800 --> 00:46:42.150
Great.

00:46:42.260 --> 00:46:43.500
So I have a static library here.

00:46:43.500 --> 00:46:47.040
It comes with some sample
code that I can delete.

00:46:49.490 --> 00:46:51.580
And now I need to set up this library.

00:46:51.740 --> 00:46:52.940
I'm going to do three things.

00:46:52.940 --> 00:46:56.260
I'm going to copy source code into it,
copy resources,

00:46:56.380 --> 00:46:59.890
and then figure out what headers
I want my clients to be able to access.

00:47:00.000 --> 00:47:03.960
So I want this view controller, this map,
and this map view.

00:47:04.090 --> 00:47:07.890
And I'm just going to drag them
up here into the library project.

00:47:08.570 --> 00:47:11.810
I do want to copy the source
into my library source,

00:47:11.920 --> 00:47:15.660
and I want to compile these things,
so I'm going to add them to my target.

00:47:18.460 --> 00:47:20.900
I cannot delete them from my application.

00:47:20.940 --> 00:47:23.070
I'm going to trash them
because I've copied them over.

00:47:23.210 --> 00:47:27.200
Next up, I want to copy some resources
from my app to my library.

00:47:27.200 --> 00:47:30.040
Specifically, I have this mapping data
and this view controller,

00:47:30.040 --> 00:47:30.980
Zib.

00:47:31.090 --> 00:47:34.810
So I'm going to create a group
for the resources right here

00:47:34.910 --> 00:47:37.150
and just call it Resources.

00:47:38.250 --> 00:47:44.210
And then I'll select these two,
copy them over the same way.

00:47:44.860 --> 00:47:48.070
But this time,
I don't want to add them to my target,

00:47:48.070 --> 00:47:51.150
because a static library target
cannot process resources.

00:47:51.240 --> 00:47:54.290
Instead, I'll want to add these
to my application target,

00:47:54.410 --> 00:47:55.780
and I'll show you how
to do that in a moment.

00:47:56.010 --> 00:47:58.330
For now, I'll leave this unchecked.

00:48:01.900 --> 00:48:05.400
And again, I can delete these.

00:48:05.600 --> 00:48:07.890
So the last step in setting
up the library is figuring out

00:48:08.020 --> 00:48:09.870
what headers I want to export.

00:48:09.950 --> 00:48:12.340
I look at the library's build faces.

00:48:12.360 --> 00:48:14.570
If you've ever built a framework before,
you know that a framework

00:48:14.660 --> 00:48:16.580
has a copy headers face.

00:48:16.660 --> 00:48:20.370
But copy headers isn't intended
for use with static libraries.

00:48:20.460 --> 00:48:22.530
If you have one,
you should get rid of it because

00:48:22.630 --> 00:48:25.600
it will definitely mess up
your distribution archives.

00:48:25.610 --> 00:48:28.900
What we're going to do instead
is use a copy files face.

00:48:28.900 --> 00:48:31.830
If you're using the latest
Xcode 4.5 developer preview,

00:48:31.840 --> 00:48:33.930
the static library
template will include this.

00:48:33.950 --> 00:48:38.180
If not, you can add it yourself using
the add build face button.

00:48:39.460 --> 00:48:42.820
This phase is set up to copy my
headers into my products directory

00:48:43.250 --> 00:48:46.520
in a sub-directory called include,
and a sub-directory under that

00:48:46.700 --> 00:48:48.620
that's going to be my library name.

00:48:48.840 --> 00:48:53.210
Here I am using the same $brace
syntax to expand product name into

00:48:53.210 --> 00:48:55.890
what's going to be my library name.

00:48:55.980 --> 00:48:58.640
So the header I want is this
view controller right here.

00:48:58.890 --> 00:49:00.860
I'm just going to drag it in.

00:49:00.930 --> 00:49:02.020
So that should be it.

00:49:02.080 --> 00:49:05.380
Let me build my static
library to make sure it works.

00:49:06.310 --> 00:49:08.040
Okay, build succeeded.

00:49:08.260 --> 00:49:09.920
Let's go back to the app.

00:49:09.920 --> 00:49:14.940
So the next step here is to look at what
configuration I need to make in my app

00:49:14.940 --> 00:49:16.840
to include the static library correctly.

00:49:16.840 --> 00:49:18.940
The first step is the
reference to the project,

00:49:18.970 --> 00:49:21.260
and I already did that
when I created a library.

00:49:21.260 --> 00:49:26.260
Next up, I need my app to link
against my static library.

00:49:26.260 --> 00:49:29.290
If I go to my application
targets build phases,

00:49:29.290 --> 00:49:32.070
I have a link binary
with libraries phase.

00:49:32.140 --> 00:49:35.100
I can click plus here to
add my static library.

00:49:36.430 --> 00:49:38.970
When I do this,
Xcode's implicit dependencies are

00:49:39.230 --> 00:49:42.560
going to build my static library
every time I build my application,

00:49:42.680 --> 00:49:45.680
so I don't need to add an
explicit dependency here.

00:49:46.680 --> 00:49:50.360
Next up, I want my app to use the
resources from my library,

00:49:50.360 --> 00:49:53.240
specifically the zip file
and the mapping data.

00:49:53.330 --> 00:49:55.710
To do that,
I need a reference to each of these

00:49:55.750 --> 00:49:58.950
resources in my application project,
and what I'll do is

00:49:59.120 --> 00:50:01.190
create a brand new group.

00:50:01.360 --> 00:50:06.610
I'll just call it LibMap,
and I'll drag these in.

00:50:07.560 --> 00:50:09.650
This time,
I need to take care not to copy them

00:50:09.650 --> 00:50:14.140
over because I want to pick up changes
that are made in my static library.

00:50:14.210 --> 00:50:17.410
I will add them to my target
so that they are copied into my

00:50:17.420 --> 00:50:19.910
application target every time I build.

00:50:19.920 --> 00:50:23.140
This is a bit of a manual
process because every time I add

00:50:23.140 --> 00:50:26.680
a new resource to the library,
I'm going to need to add another

00:50:26.870 --> 00:50:28.990
reference inside my application.

00:50:30.360 --> 00:50:34.470
So now if I look at my application's
Copy Bundle Resources phase,

00:50:34.650 --> 00:50:37.970
I'll see these two new resources,
and that's what I want.

00:50:38.600 --> 00:50:42.000
Okay, now let's look at my app delegate.

00:50:42.170 --> 00:50:46.040
When my sources all live together,
I could import my library headers or my

00:50:46.170 --> 00:50:48.240
view control headers directly by name.

00:50:48.290 --> 00:50:50.830
But in this case, I'm getting an error,
and the reason is that my

00:50:50.830 --> 00:50:53.510
application doesn't know where
to find my library headers.

00:50:53.520 --> 00:50:57.140
Now remember how my library has a
copy files phase that copies headers

00:50:57.140 --> 00:51:00.790
into the product directory under
include under the library name.

00:51:01.800 --> 00:51:04.730
So Xcode's standard header search
paths are already set up to look

00:51:04.820 --> 00:51:08.100
inside the product directory include,
but I also need to add

00:51:08.100 --> 00:51:09.640
my library name here.

00:51:09.680 --> 00:51:14.720
So I'm going to import libmap
slash hazard map view controller.

00:51:15.490 --> 00:51:17.290
This way,
each of my library's headers are

00:51:17.440 --> 00:51:20.650
nicely segregated by library name
so that libraries that have similar

00:51:20.650 --> 00:51:22.640
header names aren't going to collide.

00:51:22.750 --> 00:51:24.160
There's one last step here.

00:51:24.290 --> 00:51:27.290
When you link against a static library,
the linker is actually only

00:51:27.290 --> 00:51:30.020
going to include the things it
can detect that you're using.

00:51:30.160 --> 00:51:31.880
That way it keeps your app small.

00:51:32.000 --> 00:51:35.260
But Objective-C is such a dynamic
language that you could potentially

00:51:35.260 --> 00:51:39.600
use a class without the linker being
able to detect that you're using it.

00:51:39.690 --> 00:51:44.320
So I need to tell the linker to be
really aggressive about including all

00:51:44.320 --> 00:51:47.260
Objective-C code from static libraries.

00:51:47.390 --> 00:51:50.440
I'm going to look at my application
target's build settings.

00:51:50.520 --> 00:51:54.330
I'll search for other linker
flags in all the build settings.

00:51:54.380 --> 00:51:55.840
And here it is.

00:51:55.980 --> 00:52:00.900
So what I want to do is add -objc.

00:52:01.620 --> 00:52:02.360
And that's it.

00:52:02.440 --> 00:52:05.640
That should tell the linker to
bring in all classes and categories

00:52:05.730 --> 00:52:07.550
from any static library I'm using.

00:52:08.430 --> 00:52:13.920
So what I'm going to do is a clean
build folder to start from scratch

00:52:14.050 --> 00:52:16.290
and make sure we got this right.

00:52:17.810 --> 00:52:20.700
And then I'm going to run
my app in the simulator.

00:52:20.770 --> 00:52:24.320
Okay, here it is showing the map again,
but this time it's getting the

00:52:24.320 --> 00:52:26.970
map from my static library.

00:52:27.480 --> 00:52:30.880
So this is how you can set up your iOS
applications to use static libraries.

00:52:30.940 --> 00:52:35.100
What I'm going to do is close this
and open up my other application

00:52:35.100 --> 00:52:38.380
right here and show you how
to get started on setting that

00:52:38.380 --> 00:52:40.070
one up to use the same library.

00:52:40.450 --> 00:52:42.440
I've created a libraries
group right here.

00:52:42.560 --> 00:52:46.700
If I right-click on that,
I can choose to add files to it.

00:52:46.870 --> 00:52:50.000
And I need to find my library project.

00:52:50.090 --> 00:52:51.540
And I don't want to add it to my target.

00:52:51.640 --> 00:52:54.150
I'm just referencing it here.

00:52:55.030 --> 00:52:57.180
And now we can go ahead and set
up the linkage and the headers

00:52:57.220 --> 00:52:58.900
the same way I did before.

00:52:59.060 --> 00:53:00.590
All right.

00:53:01.730 --> 00:53:03.190
Go back to slides.

00:53:03.280 --> 00:53:05.770
So that's how you can
effectively use static libraries

00:53:05.770 --> 00:53:08.090
in your iOS applications.

00:53:09.340 --> 00:53:10.770
I hope you find this session useful.

00:53:10.890 --> 00:53:13.780
If you have any questions,
please contact Michael Jurowicz,

00:53:13.820 --> 00:53:15.740
our developer evangelist.

00:53:15.790 --> 00:53:19.300
We also have excellent documentation
available on developer.apple.com.

00:53:19.300 --> 00:53:21.660
And if you have any
questions after the labs,

00:53:21.660 --> 00:53:25.740
you can always ask them
on devforums.apple.com.

00:53:26.210 --> 00:53:29.700
Here's a few more related sessions,
some of which are coming up this week,

00:53:29.830 --> 00:53:32.090
some of which already happened
but you can find online.

00:53:32.180 --> 00:53:34.100
Thanks, and enjoy your WWDC.