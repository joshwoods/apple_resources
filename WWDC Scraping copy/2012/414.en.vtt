WEBVTT

00:00:10.650 --> 00:00:11.700
Good afternoon.

00:00:11.750 --> 00:00:17.400
Welcome to session number 414, Building,
Archiving, and Submitting Your App.

00:00:17.460 --> 00:00:20.590
You've probably spent most of
this week learning how to take

00:00:20.650 --> 00:00:24.640
advantage of the great new features
in iOS 6 and Mountain Lion while

00:00:24.640 --> 00:00:27.050
developing your application.

00:00:27.160 --> 00:00:29.950
So I thought that this afternoon
we would do something completely

00:00:29.950 --> 00:00:33.970
different and talk about distribution,
how you can get your software

00:00:33.970 --> 00:00:36.870
product into your customers' hands.

00:00:37.030 --> 00:00:42.130
And since I realize that I am all
that stands between you and free food,

00:00:42.290 --> 00:00:44.710
we're going to keep it to three things.

00:00:45.750 --> 00:00:48.680
Distributing your application
outside of the App Store using a

00:00:48.680 --> 00:00:51.740
new technology called Developer ID.

00:00:51.800 --> 00:00:55.220
Then we're going to talk about how
you can take your application and

00:00:55.220 --> 00:00:58.120
distribute it in the App Store,
taking advantage of all the

00:00:58.270 --> 00:01:02.680
features and technologies available
to both you and your customers.

00:01:02.900 --> 00:01:06.070
And then we'll talk about
some best practices on iOS,

00:01:06.070 --> 00:01:07.980
as well as some new features
that are available in the

00:01:07.980 --> 00:01:10.960
App Store this year in iOS 6.

00:01:11.070 --> 00:01:13.710
So let's get started by talking
about how to distribute your

00:01:13.790 --> 00:01:15.660
application outside the App Store.

00:01:15.740 --> 00:01:19.370
The App Store offers you the
opportunity to take advantage of a

00:01:19.370 --> 00:01:25.180
number of incredible technologies
that exist on our platforms.

00:01:26.110 --> 00:01:29.840
One of them is security.

00:01:29.930 --> 00:01:32.220
But we don't think that should be
something that you can only take

00:01:32.250 --> 00:01:34.440
advantage of in the App Store.

00:01:34.550 --> 00:01:39.690
And to that end, we've introduced a new
technology called Gatekeeper.

00:01:40.340 --> 00:01:42.800
Customers of the App Store have
the advantage of knowing that the

00:01:42.870 --> 00:01:47.800
software that they receive from the
App Store comes directly from you.

00:01:47.870 --> 00:01:51.140
And with Gatekeeper and Developer ID,
they can do the same with your software

00:01:51.140 --> 00:01:53.700
that comes from outside the App Store.

00:01:54.400 --> 00:01:57.380
Gatekeeper is turned on by
default in Mountain Lion,

00:01:57.380 --> 00:02:01.100
and it's designed to protect your
users from malicious applications.

00:02:01.180 --> 00:02:04.000
Now, this sounds a little scary,
but in reality,

00:02:04.000 --> 00:02:06.120
this is actually a problem.

00:02:06.250 --> 00:02:09.300
Anyone with access to your web
server can modify an application

00:02:09.300 --> 00:02:12.750
that you created and do whatever
they want on your user systems,

00:02:13.010 --> 00:02:14.460
and that's bad.

00:02:14.600 --> 00:02:18.400
So Gatekeeper allows you to make
sure that the application your

00:02:18.400 --> 00:02:22.710
customer is running is exactly
what you intended it to be.

00:02:24.120 --> 00:02:28.120
By default, Gatekeeper allows you to run
applications that were obtained

00:02:28.210 --> 00:02:33.000
either from the Mac App Store or
that were signed with a Developer ID.

00:02:33.090 --> 00:02:36.640
If neither of those is true,
your customer will see

00:02:36.640 --> 00:02:38.200
something like this.

00:02:38.360 --> 00:02:41.240
How do you make sure your customer
doesn't see something like this?

00:02:41.280 --> 00:02:43.920
You take advantage of what
we've been talking about,

00:02:43.920 --> 00:02:44.800
Developer ID.

00:02:44.930 --> 00:02:46.330
So what is it?

00:02:46.480 --> 00:02:51.960
A Developer ID identifies you as
being someone who's trusted by Apple.

00:02:52.040 --> 00:02:54.800
And by virtue of the fact
that you're trusted by Apple,

00:02:54.850 --> 00:02:59.090
the OS trusts you,
and your software can run freely.

00:02:59.350 --> 00:03:01.880
And like other technologies
for distribution,

00:03:01.970 --> 00:03:05.460
it has built-in support in Xcode so
you can share your application with

00:03:05.460 --> 00:03:08.600
your customers right from the IDE.

00:03:09.430 --> 00:03:11.680
Now we're going to talk about how
to take advantage of this when

00:03:11.740 --> 00:03:15.170
you're ready to distribute your app,
starting with how to

00:03:15.350 --> 00:03:17.060
obtain a Developer ID.

00:03:17.120 --> 00:03:19.560
If you've previously had
experience distributing your

00:03:19.560 --> 00:03:22.960
software through App Stores,
this will be something that's similar,

00:03:23.020 --> 00:03:25.970
but we're going to run through
it now in case you haven't.

00:03:26.130 --> 00:03:28.530
From the Organizer,
you can choose this option

00:03:28.600 --> 00:03:30.800
from the Editor menu,
which is to refresh from

00:03:30.800 --> 00:03:32.060
the Developer Portal.

00:03:32.130 --> 00:03:34.490
And once you do that,
Xcode will communicate

00:03:34.490 --> 00:03:37.370
with the Developer Portal,
figure out all the assets that

00:03:37.370 --> 00:03:39.960
you're entitled to based on
what teams you're a member of,

00:03:40.150 --> 00:03:42.460
and ask you if you want to download them.

00:03:42.540 --> 00:03:44.820
Naturally, it will say yes.

00:03:44.900 --> 00:03:48.560
And then once you do,
it'll ask if you want to export them.

00:03:48.640 --> 00:03:51.400
And this is something that's
actually very important,

00:03:51.470 --> 00:03:56.220
because your Developer ID is
like your Social Security number.

00:03:56.290 --> 00:03:59.360
Anyone who has it can pretend to be you.

00:03:59.420 --> 00:04:02.930
And if you don't have it,
you can't prove that you are you.

00:04:03.050 --> 00:04:05.420
So it's important to make sure
you have a copy of it somewhere

00:04:05.460 --> 00:04:07.680
that's kept safe and secure.

00:04:07.920 --> 00:04:09.870
And as an added convenience,
if you want to set up a

00:04:09.980 --> 00:04:13.720
second Mac for development,
your exported developer identity

00:04:13.720 --> 00:04:17.230
and profile is a single document
that you can open inside of

00:04:17.230 --> 00:04:18.820
Xcode and get up and running.

00:04:18.870 --> 00:04:21.170
No need to go to keychain access,
no need to download

00:04:21.170 --> 00:04:22.090
things from the portal.

00:04:22.150 --> 00:04:23.880
You can just double-click it and go.

00:04:24.010 --> 00:04:26.710
So once you've got that,
you can take a look at what

00:04:26.710 --> 00:04:27.800
you've actually obtained.

00:04:27.860 --> 00:04:30.960
And these are the identities that
are associated with your team.

00:04:30.990 --> 00:04:34.200
And they come in, for Mac developers,
two categories:

00:04:34.310 --> 00:04:36.380
those that begin with Mac,
which are what you would use for

00:04:36.380 --> 00:04:39.960
your Mac apps for submissions,
and those that begin with Developer ID,

00:04:39.960 --> 00:04:41.960
which is what I'm going
to talk about right now.

00:04:41.960 --> 00:04:44.960
And there are two flavors:
Developer ID application,

00:04:44.960 --> 00:04:48.960
and this is an identity that
you use to sign your .apps,

00:04:49.200 --> 00:04:52.960
either that you distribute in
an archive or on a disk image,

00:04:52.960 --> 00:04:56.240
and then Developer ID installer,
which is what you use to sign

00:04:56.240 --> 00:04:59.960
the installer that you use to
give your customers their .apps.

00:04:59.960 --> 00:05:01.960
And it's important to realize this,
because, you know,

00:05:01.960 --> 00:05:04.460
installers are actually executable code.

00:05:04.460 --> 00:05:06.800
So there's a possibility
for tampering there.

00:05:06.960 --> 00:05:09.460
So it's important to make
sure that that's signed.

00:05:11.590 --> 00:05:15.060
And once you have these,
it's often useful to take advantage of

00:05:15.060 --> 00:05:17.590
them while developing your application.

00:05:17.720 --> 00:05:20.860
It's useful to test what your
customers are actually going

00:05:20.940 --> 00:05:24.320
to receive by codesigning your
application during development and

00:05:24.320 --> 00:05:26.440
working with it under a debugger.

00:05:26.670 --> 00:05:30.340
Similarly, codesigned applications are
treated differently by the

00:05:30.340 --> 00:05:33.490
OS in a few circumstances,
like when they actually are launched.

00:05:33.640 --> 00:05:37.990
So it's often useful to profile your
application as if it was codesigned.

00:05:39.670 --> 00:05:44.040
So to actually produce this,
what you can do is go

00:05:44.040 --> 00:05:47.100
to your project editor,
and the summary panel offers you the

00:05:47.100 --> 00:05:49.200
option to codesign the application.

00:05:49.330 --> 00:05:53.560
Checking this box will cause Xcode to
automatically select the appropriate

00:05:53.560 --> 00:05:55.340
identity for your application.

00:05:55.440 --> 00:05:57.040
And usually this is correct.

00:05:57.160 --> 00:06:01.590
However, if you run a bunch of teams or
you're doing something special,

00:06:01.620 --> 00:06:05.590
you can actually override this
yourself inside of the build settings

00:06:05.590 --> 00:06:09.890
editor just by going to the code
setting identity build setting

00:06:09.890 --> 00:06:12.130
and choosing a different one.

00:06:13.290 --> 00:06:16.010
When you're ready to
distribute your application,

00:06:16.010 --> 00:06:19.000
you can produce something called
an archive from within Xcode.

00:06:19.050 --> 00:06:22.770
And this is a really fundamental
and powerful feature that

00:06:22.770 --> 00:06:24.590
we introduced with Xcode 4.

00:06:24.660 --> 00:06:27.990
It lets you package up your application,
its symbols,

00:06:28.080 --> 00:06:31.970
and some information that Xcode knows
how to read into a single bundle

00:06:31.970 --> 00:06:34.300
that the organizer can deal with.

00:06:34.340 --> 00:06:36.600
And from that archive,
you're ready to distribute it,

00:06:36.640 --> 00:06:39.590
submit it to the stores,
validate it to make sure it's

00:06:39.590 --> 00:06:40.610
ready to go to the stores.

00:06:40.730 --> 00:06:42.280
These are all things
we'll talk about later,

00:06:42.370 --> 00:06:46.080
but you can do them all from an
archive from within the organizer.

00:06:46.230 --> 00:06:48.520
So once we've created
one of these archives,

00:06:48.680 --> 00:06:50.800
which we're going to show
you how to do in a minute,

00:06:50.920 --> 00:06:53.190
you can choose to distribute it.

00:06:53.280 --> 00:06:57.100
And to distribute it, in this case,
we're going to choose to distribute it

00:06:57.100 --> 00:06:59.760
as a Developer ID signed application.

00:07:00.070 --> 00:07:02.460
And once we do,
we'll be prompted to save it

00:07:02.610 --> 00:07:06.000
someplace on the file system,
and then we can distribute it to

00:07:06.080 --> 00:07:08.170
our customers however we choose.

00:07:08.630 --> 00:07:12.430
That's one security feature
that's available to customers

00:07:12.540 --> 00:07:14.000
of the Mac App Store.

00:07:14.130 --> 00:07:16.220
And as I said earlier,
we don't want those to be features

00:07:16.320 --> 00:07:18.190
that are unique to the store.

00:07:18.320 --> 00:07:22.550
So to talk about two other features
related to security present in the

00:07:22.550 --> 00:07:26.060
Mac App Store that are available to
your Developer ID signed applications,

00:07:26.150 --> 00:07:28.860
I'd like to introduce up Yevgeny.

00:07:29.010 --> 00:07:29.860
Good afternoon.

00:07:29.880 --> 00:07:34.550
As Mac and iOS users,
we love to brag that our

00:07:34.560 --> 00:07:37.290
platforms are really secure.

00:07:37.560 --> 00:07:41.990
And as developers,
we really want to make sure that our

00:07:42.120 --> 00:07:48.150
products don't contain any security
vulnerabilities on these platforms.

00:07:48.420 --> 00:07:53.210
And a really good way to do that is
to take advantage of a technology that

00:07:53.210 --> 00:07:57.190
we have called Application Sandboxing.

00:07:57.370 --> 00:08:02.070
The word sandbox is actually really
appropriate here because it means

00:08:02.140 --> 00:08:08.940
that your app has the freedom to do
what it wants in its own little space.

00:08:09.180 --> 00:08:13.680
But it's walled off from doing
anything malicious or damaging to

00:08:13.680 --> 00:08:16.450
the system in case it misbehaves.

00:08:17.350 --> 00:08:20.800
When you launch an app
with sandboxing enabled,

00:08:20.810 --> 00:08:24.690
the security framework prevents
it from doing a few things.

00:08:24.750 --> 00:08:29.330
You can't access the file system
outside of your own sandbox directory.

00:08:29.440 --> 00:08:33.480
You can't connect to or
host any network servers.

00:08:33.550 --> 00:08:36.540
You can't access devices
such as the camera,

00:08:36.540 --> 00:08:39.400
microphone, USB devices or printers.

00:08:39.480 --> 00:08:43.890
And you can't access the user's
personal data like contacts,

00:08:43.990 --> 00:08:46.530
calendars, and location services.

00:08:46.830 --> 00:08:50.760
And what this means is that it's
a great benefit to our users.

00:08:50.820 --> 00:08:53.970
Because even if a bug is found at
some point in your software that

00:08:54.280 --> 00:08:58.720
creates an exploitable vulnerability,
then the potential for damage is

00:08:58.720 --> 00:09:03.980
limited to just the files that are
created by the user in your app.

00:09:05.010 --> 00:09:09.700
And Xcode makes it simple for you
to take advantage of app sandboxing.

00:09:09.810 --> 00:09:14.540
All you have to do is go into
your app's target editor,

00:09:14.630 --> 00:09:19.900
click on the summary pane,
and enable entitlements.

00:09:19.990 --> 00:09:23.070
Then click enable app sandboxing.

00:09:23.330 --> 00:09:27.750
Of course, as soon as you do that,
you're soon likely to run into the

00:09:27.750 --> 00:09:32.340
situation where you want to do something
that sandboxing won't let you do.

00:09:32.430 --> 00:09:35.930
Let's say you want to use
the microphone or the camera.

00:09:36.870 --> 00:09:40.980
Fortunately, sandboxing isn't an
all-or-nothing proposition.

00:09:41.070 --> 00:09:44.520
You can take advantage of something
called entitlements to allow

00:09:44.710 --> 00:09:47.830
fine-grained access to system resources.

00:09:49.490 --> 00:09:53.000
An entitlement is just a permission
to use a resource in the system,

00:09:53.080 --> 00:09:56.800
like the microphone or location services.

00:09:56.900 --> 00:09:59.800
And in this way,
you can take advantage of the

00:10:00.400 --> 00:10:04.740
principle of least privilege,
meaning that your app only has

00:10:04.740 --> 00:10:09.320
permission to do what it needs to
do in order to get its job done,

00:10:09.400 --> 00:10:11.680
and it's not allowed
to touch anything else.

00:10:11.910 --> 00:10:15.960
And you can take advantage of
entitlements in Xcode just as easily

00:10:16.020 --> 00:10:20.720
by going back to the target editor
and when you enable sandboxing,

00:10:20.760 --> 00:10:24.570
you'll notice that there are check
boxes and drop downs to select which

00:10:24.610 --> 00:10:27.150
entitlements your app wants to use.

00:10:27.730 --> 00:10:32.600
And once you make those changes,
then Xcode will create a property list

00:10:32.730 --> 00:10:35.400
file called the Entitlements file.

00:10:35.600 --> 00:10:40.880
It'll populate it with those keys and
then package it into your app bundle.

00:10:40.950 --> 00:10:44.130
Then when the app is launched,
the security framework will

00:10:44.180 --> 00:10:48.840
read it and grant your app
access to those entitlements.

00:10:48.980 --> 00:10:53.610
And that's how easy it is to add a
whole layer of security into your app.

00:10:54.220 --> 00:10:59.300
So now how do we create an app
that's signed by Developer ID?

00:10:59.300 --> 00:11:01.100
There are four steps to this.

00:11:01.160 --> 00:11:04.600
The first is to actually obtain
the Developer ID from Apple.

00:11:04.620 --> 00:11:06.560
Once you have it,
you want to configure your

00:11:06.560 --> 00:11:09.400
project to use code signing.

00:11:09.430 --> 00:11:12.400
Then enable sandboxing and
entitlements in your app.

00:11:12.450 --> 00:11:15.790
And finally, build and distribute it.

00:11:16.300 --> 00:11:20.380
So let's actually see this in action.

00:11:20.660 --> 00:11:25.920
I'd like to show you a demo of how
we can sign an app with Developer ID.

00:11:26.120 --> 00:11:30.010
So let's say we've already
got an app that's pre-built.

00:11:30.020 --> 00:11:32.800
And my app happens to be a recipe viewer.

00:11:32.800 --> 00:11:36.000
And I want to open it up
and take a quick look at it.

00:11:36.150 --> 00:11:39.880
We'll go ahead and run it.

00:11:39.880 --> 00:11:39.880
And there it is.

00:11:40.090 --> 00:11:43.740
On my left here I've got a
sidebar with all of my recipes,

00:11:43.750 --> 00:11:46.760
and I can click through them,
and I can take a look,

00:11:46.800 --> 00:11:49.240
I can see the description
for how to make it,

00:11:49.430 --> 00:11:53.380
and I've got a nice image of
how the food is supposed to

00:11:53.380 --> 00:11:56.000
turn out if I make it properly.

00:11:56.000 --> 00:11:57.990
And this app looks great to me.

00:11:58.170 --> 00:12:01.560
So I want to package it up and
I want to ship it to developers.

00:12:02.070 --> 00:12:04.510
Well, right away,
there's already a couple

00:12:04.570 --> 00:12:06.060
of problems with this.

00:12:06.210 --> 00:12:10.270
If I take the app that Xcode just
built and I put it on a website

00:12:10.710 --> 00:12:13.730
and have people download it,
then anybody could

00:12:13.740 --> 00:12:15.370
download it and modify it.

00:12:15.400 --> 00:12:16.160
They could tamper with it.

00:12:16.220 --> 00:12:22.120
They could inject malicious code
into it and then redistribute

00:12:22.120 --> 00:12:22.120
it to unsuspecting users.

00:12:22.910 --> 00:12:25.550
What's worse is that the users will just,
they won't know what happened.

00:12:25.560 --> 00:12:28.040
They won't know they're
even running this malware.

00:12:28.130 --> 00:12:32.780
At best, they'll get a panel on Lion and
older systems that says,

00:12:32.780 --> 00:12:34.510
"This app has been
downloaded from the internet.

00:12:34.540 --> 00:12:38.150
Are you sure you want to launch
it?" And most users will end up

00:12:38.150 --> 00:12:43.450
clicking "Yes." And on Mountain Lion,
we've gotten more strict with Gatekeeper.

00:12:43.590 --> 00:12:48.660
And so your second problem is that,
by default, if a user tries to launch

00:12:48.660 --> 00:12:52.230
your app on Mountain Lion,
the system just won't let it run.

00:12:52.310 --> 00:12:53.030
It'll deny it.

00:12:53.040 --> 00:12:55.940
It'll pop up that panel
that Rob showed you.

00:12:56.050 --> 00:12:58.340
And that's great news from
a security standpoint,

00:12:58.420 --> 00:13:01.700
but it's not so great from
a usability standpoint.

00:13:01.810 --> 00:13:04.300
So what's the solution?

00:13:04.370 --> 00:13:07.590
Well, you just have to use
Developer ID to sign your app.

00:13:08.570 --> 00:13:12.000
So I want to show you how to
use Developer ID right now.

00:13:12.120 --> 00:13:14.000
Let's close up our app.

00:13:16.110 --> 00:13:19.490
And the first step is going to
be to request the ID from Apple.

00:13:19.580 --> 00:13:21.980
You do that from the organizer.

00:13:24.340 --> 00:13:28.620
In the Devices tab,
click on Provisioning Profiles.

00:13:28.780 --> 00:13:30.670
Now, if you've already made
a developer account,

00:13:30.760 --> 00:13:31.730
that's great.

00:13:31.900 --> 00:13:33.000
You need to have one to use this.

00:13:33.000 --> 00:13:36.600
If not,
go and sign up for a developer account.

00:13:36.900 --> 00:13:38.430
But let's say you've already got one.

00:13:38.580 --> 00:13:41.470
So now what you can do is go
to the Editor menu and click

00:13:41.470 --> 00:13:44.610
Refresh from Developer Portal.

00:13:44.690 --> 00:13:46.370
You sign in.

00:13:48.490 --> 00:13:51.080
Save your password.

00:13:51.100 --> 00:13:54.460
And then Xcode will connect to
the portal and check for which

00:13:54.460 --> 00:13:56.400
developer identities you're eligible.

00:13:56.510 --> 00:13:58.830
And if it finds that there
are certain identities that

00:13:58.830 --> 00:14:01.370
you haven't yet downloaded,
Xcode will offer to download

00:14:01.370 --> 00:14:02.310
and install them for you.

00:14:02.460 --> 00:14:05.200
And that's what it's
doing here right now.

00:14:05.200 --> 00:14:08.520
And there are a few different
kinds of developer identities.

00:14:08.530 --> 00:14:11.400
And Xcode will ask me once for each kind.

00:14:11.400 --> 00:14:14.200
These include the
Developer ID application and installer

00:14:14.400 --> 00:14:19.290
identities that Rob mentioned earlier,
as well as Mac App Store submission

00:14:19.290 --> 00:14:23.400
installer and development identities
that we're going to talk about later.

00:14:23.850 --> 00:14:26.800
So Xcode here is asking me
once for each type of identity.

00:14:26.860 --> 00:14:28.680
So I'm just going to
go ahead and say yes,

00:14:28.680 --> 00:14:30.390
submit the request.

00:14:30.840 --> 00:14:34.240
And once that's done,
Xcode is being really helpful here and

00:14:34.240 --> 00:14:37.180
offering to export my developer profile.

00:14:37.340 --> 00:14:41.590
And the developer profile is a way to
package up all of your provisioning

00:14:41.680 --> 00:14:46.670
profiles and development identities
and private keys into one file.

00:14:47.010 --> 00:14:49.510
The reason you want to do that
is so that you can back it

00:14:49.510 --> 00:14:52.060
all up into a secure location.

00:14:52.060 --> 00:14:55.880
It's really important that you
hang on to these credentials and

00:14:55.880 --> 00:14:59.820
don't let anybody else have them,
because if you lose them,

00:15:00.160 --> 00:15:01.200
It'll be really painful for you.

00:15:01.200 --> 00:15:03.800
You're going to have to
set up a new Developer ID.

00:15:03.900 --> 00:15:05.500
You won't have access to your old one.

00:15:05.500 --> 00:15:08.740
You won't be able to
submit new apps under it.

00:15:08.830 --> 00:15:11.460
And it'll be painful for
both you and your customers.

00:15:11.550 --> 00:15:14.390
So we really want to stress that
you should export your profile

00:15:14.750 --> 00:15:17.340
and keep it safe and secure.

00:15:17.420 --> 00:15:19.680
So I'm going to do this now.

00:15:22.800 --> 00:15:25.320
Give it a nice name.

00:15:25.410 --> 00:15:26.980
Save it to My Desktop and
give it a password.

00:15:27.000 --> 00:15:30.390
Again,
make sure that the password is secure.

00:15:30.460 --> 00:15:32.950
Because if anybody gets
access to your profile,

00:15:33.090 --> 00:15:36.170
they can have your identity,
which means they can do anything

00:15:36.170 --> 00:15:38.800
on the App Store that you can,
and that's bad.

00:15:38.820 --> 00:15:41.830
So here it is saved on My Desktop.

00:15:41.930 --> 00:15:46.170
And if you ever want to do
this again in the future,

00:15:46.260 --> 00:15:49.030
you can go ahead in the organizer,
in the sidebar, click on your team.

00:15:49.520 --> 00:15:53.030
Go to the Editor menu,
and under Developer Profile,

00:15:53.100 --> 00:15:56.370
choose Export Developer Profile.

00:15:57.850 --> 00:15:59.740
And as long as we're here,
I want to point out a couple

00:15:59.830 --> 00:16:01.350
of things that you're seeing.

00:16:01.460 --> 00:16:03.340
When you click on your
team in the organizer,

00:16:03.340 --> 00:16:06.650
it'll show you a list of all
of the identities which you've

00:16:06.730 --> 00:16:08.290
downloaded from this team.

00:16:08.490 --> 00:16:12.560
Notice that only one of these
identities has my name on it.

00:16:12.630 --> 00:16:17.980
That's because this is the only
identity that's tied to me personally.

00:16:18.110 --> 00:16:21.990
The other identities are
shared by the team at large.

00:16:22.630 --> 00:16:28.280
Also notice that there is a green
checkmark or badge next to each identity.

00:16:28.320 --> 00:16:32.390
That means that this identity is
valid and you can use it to code sign.

00:16:32.540 --> 00:16:35.260
If you ever encounter a situation
where that's not the case,

00:16:35.270 --> 00:16:37.780
where there is no badge,
it means there is no private

00:16:37.780 --> 00:16:41.500
key installed and that identity
can't be used to code sign.

00:16:41.550 --> 00:16:44.420
Some of you might have the
situation where none of your

00:16:44.420 --> 00:16:46.000
identities have a badge.

00:16:46.000 --> 00:16:50.500
And this usually happens when
you have a couple of machines

00:16:50.500 --> 00:16:51.500
that you're developing on.

00:16:51.500 --> 00:16:54.400
You'll start a project on one machine.

00:16:54.490 --> 00:16:58.480
You'll submit your code to a repository,
download your Developer ID,

00:16:58.500 --> 00:17:00.500
and submit apps, no problem.

00:17:00.500 --> 00:17:04.800
But as soon as you take that code
and download it to another machine,

00:17:04.920 --> 00:17:10.330
You could forget to move
your private key onto it.

00:17:10.780 --> 00:17:13.290
And then, for some reason,
you'll find that you're unable to sign.

00:17:13.340 --> 00:17:15.870
Well, I'm telling you now that
that's because you probably

00:17:15.870 --> 00:17:18.670
just forgot your private key,
and so go ahead and put

00:17:18.670 --> 00:17:20.490
it on your other machine.

00:17:21.300 --> 00:17:24.020
But anyway, let's get back to our app.

00:17:24.120 --> 00:17:25.870
We now have our Developer ID.

00:17:26.050 --> 00:17:28.160
It's been downloaded.

00:17:28.180 --> 00:17:32.590
And so we could, if we wanted to,
sign the app with it and distribute it.

00:17:34.040 --> 00:17:38.140
But if we did that,
we'd be releasing a product

00:17:38.140 --> 00:17:40.720
that has not been tested.

00:17:40.770 --> 00:17:43.580
It's a different product than
we've been developing because a

00:17:43.580 --> 00:17:45.260
Developer ID will sign your app.

00:17:45.260 --> 00:17:49.170
It'll codesign your binary,
whereas by default,

00:17:49.270 --> 00:17:52.300
your development binary
will not be codesigned.

00:17:52.300 --> 00:17:55.700
And so to the system,
these appear different.

00:17:55.700 --> 00:17:57.900
And so when you're testing
and debugging and developing,

00:17:57.900 --> 00:18:00.680
you really want to be running the same
thing you're going to be shipping.

00:18:00.730 --> 00:18:06.840
So we suggest that you enable
codesigning while you're developing.

00:18:06.870 --> 00:18:10.650
You can do that in Xcode by
going to your target editor,

00:18:10.650 --> 00:18:14.600
Summary Pane,
and clicking on Codesign Application.

00:18:17.220 --> 00:18:19.240
And now I want you to take
a moment and ask yourself,

00:18:19.240 --> 00:18:22.980
well, why do I want to use a
Developer ID in the first place?

00:18:23.460 --> 00:18:26.630
The answer is you want to create
a product that's secure and that

00:18:26.630 --> 00:18:31.520
gives your users confidence that
you're protecting their data.

00:18:31.750 --> 00:18:35.220
More and more, every day,
we're seeing users be more

00:18:35.220 --> 00:18:37.500
concerned about security.

00:18:37.500 --> 00:18:43.200
And they expect that developers will be
taking these concerns very seriously.

00:18:43.200 --> 00:18:47.210
They are protecting their
data 100% of the time.

00:18:47.780 --> 00:18:50.770
And as I mentioned,
sandboxing is a great way to add a

00:18:50.820 --> 00:18:52.460
whole layer of security to your app.

00:18:52.470 --> 00:18:56.760
And so we strongly encourage
all of you to enable it.

00:18:57.030 --> 00:18:59.090
And I'll show you how that's done.

00:19:01.250 --> 00:19:06.340
Back in your target editor,
enable Entitlements.

00:19:06.340 --> 00:19:10.940
When you do that, Xcode will helpfully
enable sandboxing as well.

00:19:10.950 --> 00:19:12.970
And also notice that the
Entitlements file has been created

00:19:13.090 --> 00:19:15.530
for us in the Project Navigator.

00:19:15.600 --> 00:19:19.830
I can click on it, examine its contents,
and here I see it's just

00:19:19.830 --> 00:19:21.660
an ordinary property list.

00:19:21.710 --> 00:19:24.710
It's got the key for
sandboxing already in there.

00:19:26.300 --> 00:19:29.910
And I go back to my target editor
and I notice that there are all

00:19:29.910 --> 00:19:31.860
these options for entitlements.

00:19:31.980 --> 00:19:36.040
And let's say that I want to
add a couple of features to

00:19:36.060 --> 00:19:38.800
my app where I use the camera,
for example,

00:19:38.800 --> 00:19:42.580
to take photos of my great recipes
after I finish cooking them.

00:19:42.710 --> 00:19:46.150
And I also want to enable printing
so that I can give a copy of

00:19:46.150 --> 00:19:50.490
my recipe to my grandmother who
refuses to get internet access.

00:19:50.580 --> 00:19:54.740
So I can do that by clicking
the appropriate check boxes.

00:19:56.940 --> 00:20:01.180
And so now the app is
ready to be shipped.

00:20:01.270 --> 00:20:03.800
It's got the security
layer of sandboxing,

00:20:03.800 --> 00:20:06.800
it's got the appropriate entitlements,
we've tested it with code signing,

00:20:06.800 --> 00:20:09.590
and so now it's totally
ready to be shipped.

00:20:10.180 --> 00:20:13.650
So finally, let's distribute it
with the Developer ID.

00:20:13.800 --> 00:20:17.710
We do that by going to the
product menu and choosing Archive.

00:20:19.670 --> 00:20:24.480
The app will compile and build,
and it'll appear in my organizer.

00:20:24.630 --> 00:20:27.690
I can now click Distribute,
and I'll choose

00:20:27.700 --> 00:20:30.600
Export Developer ID Signed Application.

00:20:31.250 --> 00:20:34.700
On the next page,
I'll choose the Developer ID that

00:20:34.700 --> 00:20:35.820
I'm using for my team.

00:20:35.950 --> 00:20:39.540
And if it doesn't appear here,
just click Refresh Developer ID.

00:20:40.840 --> 00:20:43.920
Finally, on the next page,
I'll be able to save it.

00:20:43.980 --> 00:20:47.600
And before I save it,
Xcode actually needs to

00:20:47.740 --> 00:20:51.700
codesign my binary with the
private key that I'm using.

00:20:51.700 --> 00:20:53.700
And since it's the first
time that I'm using this key,

00:20:53.700 --> 00:20:57.700
the key chain is going to ask me to
confirm that I really want to use it.

00:20:57.700 --> 00:21:00.790
And so I'm going to go ahead
and allow Xcode to use it.

00:21:01.680 --> 00:21:04.100
And we save the app to our desktop.

00:21:04.100 --> 00:21:04.590
And there it is.

00:21:04.600 --> 00:21:05.600
It's ready to go.

00:21:05.600 --> 00:21:08.270
It's fully signed and
fully authenticated,

00:21:08.330 --> 00:21:12.470
and people can go and download it
and feel really safe and secure.

00:21:12.980 --> 00:21:17.900
And that's how easy it is to
distribute an app using Developer ID.

00:21:19.500 --> 00:21:24.740
So now I'd like to invite my colleague
Rob back to talk about how to distribute

00:21:25.650 --> 00:21:27.870
an app using the Mac App Store.

00:21:28.210 --> 00:21:31.400
So that's how you distribute an
application outside of the App Store.

00:21:31.490 --> 00:21:33.990
But like I said earlier,
there are tons of great features

00:21:34.000 --> 00:21:37.780
that you can take advantage of
and provide to your customers if

00:21:37.850 --> 00:21:40.200
your application is in the store.

00:21:40.280 --> 00:21:43.240
Things like iCloud,
Apple's push notification service

00:21:43.240 --> 00:21:47.100
for responding to things happening
while your application isn't running.

00:21:47.180 --> 00:21:51.710
Game Center, so that if you have a game,
your customers can actually

00:21:51.780 --> 00:21:54.700
play with their friends
regardless of where they are.

00:21:54.970 --> 00:21:57.100
And in-app purchase,
if you'd like to provide

00:21:57.100 --> 00:22:00.200
additional content in your
application to your customers.

00:22:00.310 --> 00:22:04.220
Submitting to the App Store is a process
that's well integrated in Xcode and used

00:22:04.220 --> 00:22:06.800
by thousands of developers every day.

00:22:06.920 --> 00:22:11.600
And while Gatekeeper works out of the box
for applications distributed through the

00:22:11.700 --> 00:22:16.400
App Store or signed with Developer ID,
users of the OS can actually tighten

00:22:16.400 --> 00:22:16.800
the security of the application.

00:22:16.800 --> 00:22:19.800
So if you want to distribute an
application outside of the Mac App Store,

00:22:19.800 --> 00:22:21.800
you can do that by using the
security threshold and say,

00:22:21.800 --> 00:22:24.460
"I only want applications that are
coming from the Mac App Store."

00:22:24.600 --> 00:22:28.070
So distributing here is the way to
guarantee that your software will run

00:22:28.070 --> 00:22:29.990
on all of your customers' systems.

00:22:31.200 --> 00:22:34.240
So we just built an application.

00:22:34.680 --> 00:22:36.700
What would it take to
get it in the App Store?

00:22:36.770 --> 00:22:39.030
Well,
we're going to talk about three things

00:22:39.030 --> 00:22:43.670
today-- the app's bundle ID and how it
relates to the app ID you set up when

00:22:43.700 --> 00:22:46.330
creating your application in the portal,

00:22:46.450 --> 00:22:48.840
Sandboxing,
and some entitlements that we use

00:22:48.960 --> 00:22:53.310
for App Store specific technologies,
and how to make sure your application

00:22:53.640 --> 00:22:57.810
is technically ready and all set
up to be submitted to the store.

00:22:57.830 --> 00:23:00.440
Let's start off by talking
about your bundle ID.

00:23:00.470 --> 00:23:03.240
This is represented by your
application's Info.plist as

00:23:03.240 --> 00:23:05.400
the CFBundle identifier key.

00:23:05.460 --> 00:23:08.040
And by convention,
it's something that we want to

00:23:08.040 --> 00:23:09.800
be unique throughout the system.

00:23:09.840 --> 00:23:12.300
A lot of our APIs expect that.

00:23:12.340 --> 00:23:16.660
It should match your app ID that you've
created in your provisioning profile.

00:23:16.710 --> 00:23:20.780
And if you have an application that you
distribute outside the App Store and

00:23:20.940 --> 00:23:24.680
have turned on sandboxing for it,
it's a really great thing for your

00:23:24.700 --> 00:23:28.300
customers if you have the same
bundle ID for your application that

00:23:28.400 --> 00:23:31.950
comes from both the App Store and
from outside the App Store.

00:23:32.050 --> 00:23:36.220
If they're buying two copies of your app,
this guarantees that they

00:23:36.220 --> 00:23:38.240
can share data between them.

00:23:39.500 --> 00:23:45.940
If we talk about sandboxing,
sandboxing is required for

00:23:45.940 --> 00:23:47.110
distribution through the App Store.

00:23:47.420 --> 00:23:50.270
And if you,
when we go back and think about the

00:23:50.380 --> 00:23:54.270
technologies that are available to
our customers through the App Store,

00:23:54.290 --> 00:23:56.160
one of them is iCloud.

00:23:56.160 --> 00:23:58.460
And there are some entitlements
you can set up for that for using

00:23:58.460 --> 00:24:02.880
either the Key Values Store or for
custom document and data containers.

00:24:02.990 --> 00:24:07.260
Submitting your app is something
that you want to take seriously.

00:24:07.290 --> 00:24:09.650
And it would be nice to know
that you've actually set up your

00:24:09.770 --> 00:24:13.740
project in a way that it will be
accepted and appear on the store.

00:24:13.750 --> 00:24:16.700
And Xcode has a workflow to help
you make sure that that's the case.

00:24:16.780 --> 00:24:18.860
And we call it validation.

00:24:18.890 --> 00:24:22.530
It makes sure that things like
your application's copyright

00:24:22.600 --> 00:24:24.910
string is set properly,
that you have a category

00:24:24.910 --> 00:24:27.430
specified for your app,
things that are essential for

00:24:27.430 --> 00:24:29.950
being listed on the store,
as well as enforcing some other

00:24:30.090 --> 00:24:34.160
policies that are specific to the
Mac App Store or to the iOS App Store.

00:24:34.220 --> 00:24:37.170
And we actually update these
over the web to make sure that

00:24:37.260 --> 00:24:41.500
they are exactly what you will be
tested against when you submit.

00:24:41.530 --> 00:24:44.600
And to do that,
once you've created an archive,

00:24:44.620 --> 00:24:47.220
you can actually validate it
from right within the organizer.

00:24:47.340 --> 00:24:49.320
It's the button right
on top of distribute.

00:24:49.350 --> 00:24:54.260
And you can choose to validate against
the Mac App Store's requirements.

00:24:54.650 --> 00:24:59.240
And now, if you don't pass validation,
Xcode will tell you about it,

00:24:59.330 --> 00:25:05.090
and you can go and fix up the warning or
the error and revalidate and then submit.

00:25:05.520 --> 00:25:08.440
To talk about some of the technologies
that are available only in the

00:25:08.440 --> 00:25:11.530
Mac App Store and how you can take
advantage of them in your app,

00:25:11.550 --> 00:25:13.400
I'd now like to invite up Itai.

00:25:13.470 --> 00:25:16.400
Thanks, Rob, and good afternoon,
everybody.

00:25:16.520 --> 00:25:18.960
As Rob mentioned,
when you choose to distribute

00:25:19.070 --> 00:25:21.720
your app on the App Store,
you get to take advantage

00:25:21.720 --> 00:25:23.400
of some great technologies.

00:25:23.470 --> 00:25:27.530
iCloud, Game Center, In-App Purchase,
and Push Notifications are

00:25:27.940 --> 00:25:30.400
services that customers love.

00:25:30.400 --> 00:25:32.400
And if you take advantage
of them in your apps,

00:25:32.550 --> 00:25:36.500
then customers will love your apps
even more than they already do.

00:25:36.890 --> 00:25:38.800
So before I move on,
I just want to point out that everything

00:25:38.800 --> 00:25:42.800
I'll be talking about is applicable
to both the iOS and Mac App Stores,

00:25:42.870 --> 00:25:46.000
with a few exceptions that
I'll point out as I go along.

00:25:46.900 --> 00:25:49.960
So here's a brief overview of
what I'll be talking about.

00:25:49.980 --> 00:25:53.120
Now, when you set down the path
of building an App Store app,

00:25:53.130 --> 00:25:56.680
one of the things you should know
about is provisioning profiles.

00:25:56.780 --> 00:26:01.500
So I'll tell you a little bit about what
they are and how to create and use them.

00:26:01.550 --> 00:26:03.950
In addition,
one of the big new changes in

00:26:04.040 --> 00:26:07.880
Xcode is the addition of support
for in-app purchase content.

00:26:07.920 --> 00:26:10.790
With the new version of Xcode,
you can create, package,

00:26:10.790 --> 00:26:14.460
and submit in-app purchase content
from directly within the IDE.

00:26:14.480 --> 00:26:16.820
And if you've used
in-app purchase before,

00:26:16.850 --> 00:26:19.880
you'll find this greatly
streamlines your workflow.

00:26:22.370 --> 00:26:25.630
So a lot of what I'm going to show
you involving provisioning profiles

00:26:25.630 --> 00:26:30.100
involves performing administrative tasks
like creating provisioning profiles,

00:26:30.230 --> 00:26:32.090
registering devices and app IDs.

00:26:32.360 --> 00:26:36.570
And depending on how your team is set up,
you may not necessarily have

00:26:36.570 --> 00:26:40.640
every team member have access to
perform these administrative tasks.

00:26:40.700 --> 00:26:45.180
There are three roles that you can
assign to each individual on your team:

00:26:45.180 --> 00:26:47.190
member, admin, and agent.

00:26:48.270 --> 00:26:52.200
Now, most of the people on your
team will probably be members.

00:26:52.260 --> 00:26:56.640
This is typically all of the development
engineers or testers on your team.

00:26:56.770 --> 00:27:00.760
And people who are assigned the member
role can download provisioning profiles,

00:27:00.820 --> 00:27:03.630
request certificates,
and also obtain software assets

00:27:03.690 --> 00:27:06.970
like pre-release SDKs and
beta releases of the tools.

00:27:07.310 --> 00:27:11.600
So if you think of your team
with a file system analogy,

00:27:11.720 --> 00:27:13.690
team members essentially
have read-only access.

00:27:13.890 --> 00:27:16.220
They can download and use
your development assets,

00:27:16.280 --> 00:27:18.850
but they can't create them themselves.

00:27:19.480 --> 00:27:21.840
In order to do most of
what I'm going to show you,

00:27:21.860 --> 00:27:23.720
you'd have to be an admin.

00:27:23.740 --> 00:27:26.800
Now,
admins can manage your team's membership.

00:27:26.840 --> 00:27:30.180
They create and approve
certificates for your team members.

00:27:30.220 --> 00:27:34.820
They create provisioning profiles and
also register hardware and app IDs.

00:27:35.790 --> 00:27:38.520
Finally,
the team agent is the individual who

00:27:38.520 --> 00:27:42.130
is the primary contact for your team,
and they're responsible for your team's

00:27:42.130 --> 00:27:44.500
membership in the development program.

00:27:44.530 --> 00:27:46.530
Most importantly,
they're also the only individual

00:27:46.830 --> 00:27:50.820
who can submit applications and can
generate distribution certificates and

00:27:50.820 --> 00:27:53.600
distribution provisioning profiles.

00:27:53.630 --> 00:27:55.350
Now, if you stop and think
about this for a moment,

00:27:55.420 --> 00:27:59.490
that makes a lot of sense because
any software distributed using

00:27:59.490 --> 00:28:04.030
these assets reflects on your
organization's identity and reputation.

00:28:04.300 --> 00:28:06.740
So you want to make sure that
only responsible individuals

00:28:07.100 --> 00:28:08.970
can actually do this.

00:28:10.740 --> 00:28:14.080
So what is a provisioning profile?

00:28:14.080 --> 00:28:17.990
Now, this is a great topic to talk
about just before the beer bash.

00:28:19.870 --> 00:28:24.040
And I take no responsibility if this
drives you to overindulge tonight.

00:28:24.110 --> 00:28:26.560
But I'm going to try to make
provisioning profiles as simple

00:28:26.560 --> 00:28:27.430
to understand as possible.

00:28:27.510 --> 00:28:29.980
They're really not that complicated.

00:28:30.370 --> 00:28:35.320
So I like to think of a provisioning
profile as a big blue box.

00:28:35.370 --> 00:28:35.930
OK, that's it.

00:28:36.010 --> 00:28:37.580
Let's move on.

00:28:38.570 --> 00:28:39.960
Just kidding.

00:28:40.010 --> 00:28:43.560
Provisioning profiles contain three
things that you need to know about.

00:28:43.590 --> 00:28:46.020
The first one is an app ID.

00:28:46.020 --> 00:28:48.600
Now the app ID, as Rob mentioned,
is roughly analogous

00:28:48.600 --> 00:28:49.950
to a bundle identifier.

00:28:50.000 --> 00:28:53.580
And I'll talk about it in a little bit
more detail in a couple more slides.

00:28:53.720 --> 00:28:55.640
But right now,
all you need to know is this

00:28:55.800 --> 00:28:59.450
is a string that identifies
an app developed by your team.

00:29:00.310 --> 00:29:03.000
They also contain a list of certificates.

00:29:03.050 --> 00:29:06.800
Now, earlier, Yevgeny showed you how to
generate certificates in Xcode,

00:29:06.820 --> 00:29:09.610
and these are essentially the
public-facing half of each of

00:29:09.610 --> 00:29:11.800
your developers' identities.

00:29:11.860 --> 00:29:15.200
Each developer also has a private key,
which they should keep to themselves

00:29:15.200 --> 00:29:16.160
and not share with anybody.

00:29:16.290 --> 00:29:18.200
That's why it's called a private key.

00:29:18.200 --> 00:29:20.400
The certificate is the public,
shareable half of that,

00:29:20.530 --> 00:29:23.730
and each provisioning profile
you create will contain a list

00:29:23.820 --> 00:29:27.070
of the developers in your team,
essentially.

00:29:27.780 --> 00:29:29.630
Finally, a list of device IDs.

00:29:29.640 --> 00:29:31.840
This is probably the
most straightforward one.

00:29:31.890 --> 00:29:35.270
Every device that your team uses
in the development process should

00:29:35.270 --> 00:29:36.980
be registered on the portal.

00:29:37.060 --> 00:29:41.100
All of your Macs and iOS
devices have hardware IDs.

00:29:41.160 --> 00:29:42.640
And when you create a
provisioning profile,

00:29:42.640 --> 00:29:44.990
it specifies a list of these.

00:29:45.310 --> 00:29:49.580
So what do you get once you put
all of these things in a box?

00:29:49.930 --> 00:29:53.140
Well, essentially,
you get a provisioning profile which

00:29:53.140 --> 00:29:57.700
tells the operating system that an
app signed by the following people

00:29:57.730 --> 00:29:59.980
may run on the following devices.

00:30:00.010 --> 00:30:03.620
That's essentially the most basic
thing a provisioning profile does.

00:30:03.620 --> 00:30:08.450
It tells the operating system under
which circumstances your app can launch.

00:30:09.800 --> 00:30:11.780
Now,
it does do a couple additional things.

00:30:11.820 --> 00:30:14.230
Most importantly,
it tells the operating system which

00:30:14.310 --> 00:30:18.660
services your app should have access to,
and things like iCloud.

00:30:18.890 --> 00:30:20.990
And the way it does
that is via the app ID.

00:30:21.140 --> 00:30:23.900
So let's talk about app IDs a little bit.

00:30:24.630 --> 00:30:27.100
There are two kinds.

00:30:27.160 --> 00:30:29.140
The first one is called
an explicit app ID.

00:30:29.140 --> 00:30:31.860
And this is probably the
simplest one to understand.

00:30:31.920 --> 00:30:33.550
It looks just like a bundle identifier.

00:30:33.560 --> 00:30:37.560
So the one you can see on the
screen is com.apple.recipes.

00:30:37.610 --> 00:30:39.890
That's the bundle identifier
for the Recipes app that

00:30:39.910 --> 00:30:41.820
Yevgeny showed you earlier.

00:30:41.880 --> 00:30:44.330
And that's an explicit app ID.

00:30:44.770 --> 00:30:48.620
It matches one specific
application developed by our team.

00:30:48.680 --> 00:30:50.440
And we can create these
on the developer portal.

00:30:50.440 --> 00:30:53.070
We can make as many as we want.

00:30:53.190 --> 00:30:56.520
Each explicit app ID needs to be unique.

00:30:56.600 --> 00:30:58.160
And if you're going to
use in-app purchase,

00:30:58.360 --> 00:31:02.540
game center, or push notifications,
you actually have to create one of these

00:31:02.650 --> 00:31:04.920
on the portal before you can use those.

00:31:06.520 --> 00:31:10.640
The other kind of App ID is
called a wildcard App ID.

00:31:10.650 --> 00:31:14.310
And believe it or not,
it's called that because at the end

00:31:14.310 --> 00:31:16.880
of the string is a wildcard character.

00:31:17.100 --> 00:31:19.220
I'm sure you didn't see that coming.

00:31:19.770 --> 00:31:22.900
The example you see on the screen,
com.apple.*,

00:31:22.940 --> 00:31:26.400
essentially will match any application
developed by our team whose bundle

00:31:26.400 --> 00:31:27.810
identifier starts with com.apple.

00:31:27.980 --> 00:31:30.140
So com.apple.recipes would match.

00:31:30.240 --> 00:31:32.340
com.apple.recipes beta would match.

00:31:32.600 --> 00:31:34.020
Anything like that.

00:31:34.070 --> 00:31:36.740
Now, Xcode creates one of these
automatically for you.

00:31:36.840 --> 00:31:39.430
So you may not actually
need to create one yourself.

00:31:39.560 --> 00:31:42.230
And these tend to be useful when
you start developing new apps.

00:31:42.380 --> 00:31:45.770
You can get off the ground very
quickly without having to configure

00:31:45.870 --> 00:31:48.110
anything on the developer portal.

00:31:48.630 --> 00:31:51.800
Also, if you're not using any
App Store-specific technologies

00:31:51.800 --> 00:31:54.990
or you're only using iCloud,
then you can probably do all of your

00:31:54.990 --> 00:31:56.890
development using a wildcard app ID.

00:31:56.900 --> 00:31:58.500
So keep that in mind.

00:32:01.540 --> 00:32:04.470
OK, so let's say you've decided you
need to create your own app ID.

00:32:04.520 --> 00:32:06.000
How do you actually do that?

00:32:06.000 --> 00:32:08.600
So you start by logging
into the Developer Portal.

00:32:08.630 --> 00:32:11.470
This is actually the version for the Mac.

00:32:11.480 --> 00:32:14.000
The iOS one is very similar.

00:32:14.010 --> 00:32:16.450
You choose to register a new app ID,
and all you have to do is

00:32:16.600 --> 00:32:17.470
fill in these two fields.

00:32:17.620 --> 00:32:21.130
You type in a description so you remember
what this app ID is actually for,

00:32:21.130 --> 00:32:24.090
and you also type in your
bundle ID search string,

00:32:24.090 --> 00:32:26.600
in this case, com.apploadrecipes.

00:32:26.680 --> 00:32:28.360
So remember this one,
because I'm going to actually

00:32:28.360 --> 00:32:29.550
use this a little bit later.

00:32:31.730 --> 00:32:33.660
Once you've done that,
you can enable your app

00:32:33.740 --> 00:32:36.310
ID for additional services.

00:32:38.150 --> 00:32:41.530
On the Mac,
you'll see checkboxes for iCloud,

00:32:41.730 --> 00:32:44.000
Game Center, and push notifications.

00:32:44.170 --> 00:32:46.000
Now, this is one difference from iOS.

00:32:46.210 --> 00:32:48.800
For iOS,
if you want to use in-app purchase,

00:32:48.880 --> 00:32:51.000
you actually have to check
a fourth box for that.

00:32:51.000 --> 00:32:57.250
On the Mac, as long as you're using
an explicit app ID,

00:32:57.270 --> 00:32:58.990
you can use in-app purchase
in your application.

00:32:58.990 --> 00:32:58.990
So in this case, I've enabled iCloud.

00:33:01.170 --> 00:33:02.810
So that's all there is
to know about App IDs,

00:33:02.810 --> 00:33:03.300
really.

00:33:03.340 --> 00:33:05.330
Now,
a few other details about provisioning

00:33:05.410 --> 00:33:08.990
profiles that you should be aware
of are that Xcode creates these

00:33:09.270 --> 00:33:10.690
team provisioning profiles for you.

00:33:10.720 --> 00:33:12.790
And you've probably seen them.

00:33:12.800 --> 00:33:15.480
If you're developing for iOS,
there's an iOS team provisioning profile.

00:33:15.480 --> 00:33:20.380
If you're developing for the Mac,
there's a Mac team provisioning profile.

00:33:20.420 --> 00:33:24.020
These are essentially generic
profiles that Xcode creates for you.

00:33:24.090 --> 00:33:25.540
It maintains them for you.

00:33:25.590 --> 00:33:28.590
And they'll automatically
contain all of the devices and

00:33:28.620 --> 00:33:30.340
certificates that your team uses.

00:33:30.380 --> 00:33:34.610
They'll also use a wildcard app ID that
matches any app developed by your team.

00:33:34.830 --> 00:33:37.700
So again, you can use these when
you're developing new apps,

00:33:37.700 --> 00:33:39.760
get off the ground very quickly.

00:33:40.100 --> 00:33:44.290
And for some apps,
this is really all you need.

00:33:44.620 --> 00:33:48.160
If you need to create a provisioning
profile with an explicit app ID,

00:33:48.160 --> 00:33:50.390
you can do that in Xcode,
and I'll show you how to

00:33:50.390 --> 00:33:51.290
do that in a little bit.

00:33:51.550 --> 00:33:55.440
And finally, when it's time to distribute
your app on the App Store,

00:33:55.440 --> 00:33:58.710
you need to use something called
a Production Provisioning Profile

00:33:58.710 --> 00:34:02.180
on the Mac or a Distribution
Provisioning Profile on iOS.

00:34:02.180 --> 00:34:05.460
And again, only your team agent can
create and use these.

00:34:08.990 --> 00:34:14.320
Now, changing gears a little bit,
in-app purchase.

00:34:14.400 --> 00:34:18.200
In the new version of Xcode,
we've added project templates for both

00:34:18.200 --> 00:34:22.600
Mac and iOS so that you can create in-app
purchase content directly in the IDE.

00:34:22.940 --> 00:34:25.800
All you have to do is create
a new project or add a target

00:34:25.910 --> 00:34:29.520
to an existing project,
drag in your resources,

00:34:29.600 --> 00:34:32.330
and you can archive, package,
and submit your in-app purchase

00:34:32.330 --> 00:34:34.510
content directly from within Xcode.

00:34:34.720 --> 00:34:37.570
And I'll show you how to do that,
actually.

00:34:37.760 --> 00:34:39.380
In just a moment,
I'll head over to the demo

00:34:39.380 --> 00:34:43.280
machine and show you a few things,
including how to enable iCloud,

00:34:43.320 --> 00:34:46.930
how to create a provisioning profile,
and then how to submit an app and in-app

00:34:47.010 --> 00:34:49.100
purchase content to the App Store.

00:34:49.320 --> 00:34:51.390
So let's take a look at that.

00:34:52.190 --> 00:34:55.640
So here we are looking at the Recipes
app that Yevgeny showed you earlier.

00:34:55.670 --> 00:35:00.980
Now, what you might not know is that this
app uses the iCloud Key Value Store.

00:35:01.010 --> 00:35:03.640
Now, before I can actually submit
this app to the App Store,

00:35:03.680 --> 00:35:06.320
I need to do a little bit of
work in order to enable that.

00:35:06.380 --> 00:35:09.880
If I look at the debug log from
the last time Yevgeny ran the app,

00:35:09.920 --> 00:35:13.120
you'll see there's a somewhat
scary-looking error message.

00:35:13.190 --> 00:35:16.600
But all it really says is that we
haven't enabled iCloud for our app,

00:35:16.680 --> 00:35:18.480
and we're trying to use iCloud.

00:35:18.590 --> 00:35:20.520
So how do we do that?

00:35:20.540 --> 00:35:22.560
There's a couple steps.

00:35:22.880 --> 00:35:26.640
I'll go back to the Target Editor and
show you the first one.

00:35:26.940 --> 00:35:31.360
The first step involves turning
on the entitlement within our app.

00:35:31.420 --> 00:35:35.710
And I can do that simply by checking
this iCloud Key Value Store checkbox

00:35:35.710 --> 00:35:37.510
in the Target Editor.

00:35:38.080 --> 00:35:40.280
Okay, that's half of what I need to do,
and that was pretty easy.

00:35:40.280 --> 00:35:44.860
Now, the second half actually involves
creating a provisioning profile.

00:35:44.860 --> 00:35:47.590
Now, if you'll recall,
there are three things that you need

00:35:47.680 --> 00:35:49.380
to have in a provisioning profile.

00:35:49.380 --> 00:35:51.190
One is an app ID.

00:35:51.190 --> 00:35:52.960
I already created an app ID.

00:35:52.960 --> 00:35:56.030
It was the one I showed you in the slide,
so that's all done,

00:35:56.040 --> 00:35:57.110
and it's enabled for iCloud.

00:35:57.120 --> 00:36:00.120
The second one is a
development certificate.

00:36:00.120 --> 00:36:03.510
Well, Yevgeny created that in his demo,
so I already have that.

00:36:04.070 --> 00:36:07.280
The third one is a device ID,
so I need to register my device on the

00:36:07.280 --> 00:36:09.480
portal before I can create a profile.

00:36:09.480 --> 00:36:10.690
So let's do that.

00:36:12.350 --> 00:36:14.240
You can do that within Xcode's Organizer.

00:36:14.340 --> 00:36:17.480
I'll click on the Organizer
button here in the corner.

00:36:17.880 --> 00:36:21.960
Click over to the Devices tab
and select My Mac in the sidebar.

00:36:21.980 --> 00:36:25.050
And all I have to do to register
my Mac on the portal is click

00:36:25.390 --> 00:36:28.580
this Add to Portal button
on the bottom of the window.

00:36:28.610 --> 00:36:31.220
Now my Mac has been registered,
and I can create a provisioning

00:36:31.320 --> 00:36:33.040
profile that refers to it.

00:36:33.100 --> 00:36:35.460
So let's do that.

00:36:37.150 --> 00:36:39.030
In order to do that,
I can click on the Provisioning

00:36:39.140 --> 00:36:43.690
Profiles item and click New on
the bottom of the window.

00:36:43.820 --> 00:36:47.650
And now all I have to do to create
a profile is fill out this sheet.

00:36:47.770 --> 00:36:49.400
So I'll type in a name.

00:36:49.430 --> 00:36:51.240
This should be something
descriptive so that you know

00:36:51.240 --> 00:36:54.720
what this profile is used for,
especially if you need to update your

00:36:54.720 --> 00:36:58.250
app six or 12 months down the line,
it's useful to actually know

00:36:58.340 --> 00:37:00.140
which profile you're using.

00:37:00.470 --> 00:37:03.060
I'll click on Mac since
this is for a Mac app.

00:37:03.110 --> 00:37:05.140
And now I need to select an app ID.

00:37:05.170 --> 00:37:09.480
I'll choose the one I created earlier,
which is already enabled for iCloud.

00:37:10.180 --> 00:37:14.150
And next, I need to choose the list of
devices and certificates that

00:37:14.150 --> 00:37:15.760
I want to include in the profile.

00:37:15.810 --> 00:37:18.940
Now, if you're on a larger team,
of course, you'll see a lot more devices

00:37:18.940 --> 00:37:21.310
and certificates in this list,
and you can select

00:37:21.310 --> 00:37:24.240
just the ones you want,
or you can select all of them.

00:37:24.260 --> 00:37:26.900
Now, in this case,
I'm a one-person team with one device,

00:37:27.090 --> 00:37:30.750
so I'll just choose
everything and click Finish.

00:37:30.910 --> 00:37:34.670
And you'll see that Xcode has
created a profile for me on the

00:37:34.670 --> 00:37:37.290
portal and downloaded it to my Mac.

00:37:39.180 --> 00:37:42.610
In order to use this profile,
I need to first install it on my Mac,

00:37:42.610 --> 00:37:46.300
and I can do that simply by dragging
it onto my Mac in the sidebar.

00:37:46.440 --> 00:37:49.070
And now if I click on Provisioning
Profiles under my Mac,

00:37:49.170 --> 00:37:51.890
you'll see that it's installed.

00:37:52.410 --> 00:37:55.240
Great, so now it's ready to use.

00:37:55.270 --> 00:37:59.210
Let's go back to my project and
configure it to use my profile.

00:37:59.660 --> 00:38:02.010
The way to do that is via the
Code Signing Identity build

00:38:02.060 --> 00:38:04.280
setting that Rob showed you.

00:38:04.380 --> 00:38:07.040
So I'll click on
Build Settings for my target,

00:38:07.040 --> 00:38:10.760
and let's take a look at the
Code Signing Identity build setting.

00:38:10.810 --> 00:38:13.910
You can see here that the automatic
profile selector has actually already

00:38:13.910 --> 00:38:15.840
chosen the correct identity for me.

00:38:15.880 --> 00:38:19.470
I want to use my
Johnny Appleseed identity,

00:38:19.470 --> 00:38:21.900
and it's also using my
Recipe's development profile,

00:38:21.950 --> 00:38:23.480
which I just created.

00:38:23.540 --> 00:38:26.480
But in case that's not
choosing the right thing,

00:38:26.530 --> 00:38:29.870
you can also see further down in
the list that Xcode lists all of the

00:38:29.870 --> 00:38:33.280
provisioning profiles I have installed,
and all of the identities that are

00:38:33.280 --> 00:38:35.100
included in those provisioning profiles.

00:38:35.130 --> 00:38:39.020
And I can just choose the
one that I want to use.

00:38:40.700 --> 00:38:44.940
Now I'm ready to build and run my app,
and iCloud should be enabled.

00:38:45.020 --> 00:38:47.950
So if I go look at the debug log again,

00:38:48.670 --> 00:38:50.490
We'll see no scary
error message this time.

00:38:50.530 --> 00:38:52.140
Everything is working.

00:38:52.180 --> 00:38:54.620
OK, so now I'm ready to submit
my app to the App Store.

00:38:54.650 --> 00:38:56.180
Everything looks great.

00:38:56.260 --> 00:39:00.340
So I'll start by archiving it,
just like we did for Developer ID.

00:39:00.600 --> 00:39:03.360
And the archive will
appear in the organizer.

00:39:03.590 --> 00:39:05.900
Now, as Rob mentioned,
one practice that we really

00:39:05.900 --> 00:39:09.200
recommend you do is to validate
your app before you submit it.

00:39:09.250 --> 00:39:12.410
And you should do this frequently
throughout your development cycle so that

00:39:12.660 --> 00:39:16.660
you don't get a nasty surprise when it's
time to submit your app to the App Store.

00:39:16.750 --> 00:39:19.310
So let's start off by validating.

00:39:19.490 --> 00:39:21.330
And I can do that by
clicking the Validate button,

00:39:21.520 --> 00:39:25.160
selecting Mac App Store,
and hitting Next.

00:39:25.260 --> 00:39:27.760
Now, in order to validate,
Xcode needs to connect to

00:39:27.780 --> 00:39:30.700
iTunes Connect and download
all of the application records

00:39:30.850 --> 00:39:32.900
that I've already set up.

00:39:34.700 --> 00:39:37.280
So I'll type in my iTunes
Connect credentials,

00:39:37.320 --> 00:39:38.180
hit Next.

00:39:38.180 --> 00:39:43.820
And now you'll see that Xcode has
downloaded all of my application records.

00:39:43.840 --> 00:39:45.540
If you don't see any here,
it might mean that you haven't

00:39:45.540 --> 00:39:49.120
actually created one yet,
so you'll want to go do that.

00:39:49.130 --> 00:39:52.160
And I can select the code
signing identity that I want

00:39:52.160 --> 00:39:54.880
to sign this with and hit Next.

00:39:55.140 --> 00:39:59.930
Now, Xcode is going to codesign my
application and upload it for validation.

00:40:00.160 --> 00:40:02.530
And once again,
I'm being asked for access because

00:40:02.610 --> 00:40:05.940
this is the first time I'm using my
Mac App Store distribution identity.

00:40:09.700 --> 00:40:12.860
So since this is an application
developed by some great Apple engineers,

00:40:12.860 --> 00:40:15.360
there shouldn't be any validation errors,
right?

00:40:15.440 --> 00:40:18.810
But it looks like we do have one.

00:40:19.150 --> 00:40:22.900
And the important thing to keep
in mind when this happens is that

00:40:23.360 --> 00:40:26.610
this is definitely Yevgeny's fault.

00:40:26.950 --> 00:40:32.670
So usually what I do at this point
is type up an angry email and send

00:40:32.670 --> 00:40:34.600
it to Yevgeny and his manager.

00:40:34.910 --> 00:40:39.210
But since I want to actually show you
how to submit an app to the App Store,

00:40:39.210 --> 00:40:40.900
let's go ahead and fix it.

00:40:41.160 --> 00:40:44.250
In this case, it looks like we're missing
an application category.

00:40:44.290 --> 00:40:45.560
And this is actually really common.

00:40:45.560 --> 00:40:49.180
If you're taking a pre-existing app and
you want to submit it to the App Store,

00:40:49.220 --> 00:40:52.900
you might not already have a category
set up because you distributed it

00:40:52.900 --> 00:40:54.940
through your website previously.

00:40:54.990 --> 00:40:56.930
It's also very easy to fix.

00:40:57.050 --> 00:41:00.870
So let's click Finish and go
back to the project to fix it.

00:41:02.050 --> 00:41:06.000
I'll select my project and return
to the target summary editor.

00:41:06.140 --> 00:41:08.530
And you'll see at the very top,
there's a pop-up from which

00:41:08.600 --> 00:41:10.000
you can select a category.

00:41:10.000 --> 00:41:12.910
So all I have to do is choose
the one that looks right,

00:41:13.050 --> 00:41:15.290
in this case, Lifestyle.

00:41:15.730 --> 00:41:19.950
and build a new archive because I've
modified my application's Info.plist,

00:41:19.950 --> 00:41:21.600
so I need a new archive.

00:41:21.650 --> 00:41:24.590
Now I should be ready to
submit to the App Store.

00:41:24.760 --> 00:41:27.600
So to do that,
all I do is click Distribute,

00:41:27.600 --> 00:41:30.600
select Submit to the Mac App Store,
and hit Next.

00:41:30.660 --> 00:41:34.350
Once again, Xcode will want my iTunes
Connect credentials.

00:41:36.920 --> 00:41:38.100
This is the same as before.

00:41:38.100 --> 00:41:40.420
Again, if you're not seeing
your app record here,

00:41:40.440 --> 00:41:42.600
you might have forgotten to create it,
or you might have forgotten to

00:41:42.600 --> 00:41:44.920
mark it as ready for upload.

00:41:45.680 --> 00:41:48.140
I'll hit Next,
and now my application again is being

00:41:48.140 --> 00:41:50.360
codesigned and uploaded to the store.

00:41:50.410 --> 00:41:53.780
And once this is done,
I should see a very

00:41:53.780 --> 00:41:57.100
nice message that says,
"My app has been submitted."

00:41:57.220 --> 00:42:00.050
So let's just give it a few moments.

00:42:00.180 --> 00:42:00.790
And there we are.

00:42:00.940 --> 00:42:04.340
That's how easy it is to
submit an app from Xcode.

00:42:05.500 --> 00:42:06.240
So that's great.

00:42:06.310 --> 00:42:09.720
Now my app is available for my customers.

00:42:09.800 --> 00:42:12.880
I was able to submit it
from Xcode very easily.

00:42:13.230 --> 00:42:16.700
Now I'd like to add some additional
value so that my customers enjoy using

00:42:16.700 --> 00:42:18.590
my app even more and keep coming back.

00:42:18.730 --> 00:42:21.830
So I can do that by creating
in-app purchase content.

00:42:21.960 --> 00:42:25.100
And now with the new version of Xcode,
I can do it very easily.

00:42:25.370 --> 00:42:27.620
So let me show you how to do that.

00:42:29.140 --> 00:42:34.210
I'll go back to my project
and hit the Add Target button.

00:42:35.470 --> 00:42:39.020
When I select Other here under OS X,
I'll see that I have a new

00:42:39.120 --> 00:42:42.080
in-app purchase content template.

00:42:42.170 --> 00:42:45.380
So all I have to do is hit
Next and give it a name.

00:42:48.260 --> 00:42:50.100
And click Finish.

00:42:50.330 --> 00:42:52.740
And now Xcode has created a
new target in my project for

00:42:52.740 --> 00:42:54.500
my in-app purchase content.

00:42:54.560 --> 00:42:57.960
You'll see we have a custom
target summary editor for it,

00:42:58.070 --> 00:43:01.740
so I can choose to rename my in-app
purchase content if I'd like,

00:43:01.830 --> 00:43:05.670
change its identifier,
or change its content version.

00:43:06.030 --> 00:43:09.150
I can also drag some additional
files into this group that's

00:43:09.160 --> 00:43:10.840
been created in my project.

00:43:10.880 --> 00:43:13.760
But in this case,
I think this is all I need to do.

00:43:13.860 --> 00:43:17.960
So I'll go ahead and archive
and submit this to the store.

00:43:18.500 --> 00:43:22.580
The first thing I need to do in order to
do that is to select the correct scheme.

00:43:22.660 --> 00:43:26.840
When I added the target to my project,
Xcode added a new scheme for me.

00:43:27.060 --> 00:43:29.640
So I'll choose that and Archive.

00:43:29.660 --> 00:43:31.960
The archive appears in the organizer.

00:43:31.970 --> 00:43:36.440
I can click Distribute,
choose Submit In-App Purchase Content,

00:43:36.450 --> 00:43:38.000
click Next.

00:43:38.020 --> 00:43:41.280
Again, Xcode needs to log into iTunes
Connect and download any records

00:43:41.280 --> 00:43:43.320
that I've created because
there's a separate type of record

00:43:43.550 --> 00:43:45.220
for in-app purchase content.

00:43:45.310 --> 00:43:48.300
So you can see here my
application record is listed,

00:43:48.320 --> 00:43:52.900
and the record I created for my
in-app purchase content is available.

00:43:52.960 --> 00:43:56.980
And now all I have to do is click Next,
and Xcode will upload my

00:43:56.980 --> 00:43:59.410
content to the App Store.

00:44:00.170 --> 00:44:02.720
That's all you have to do to
submit in-app purchase content now.

00:44:02.730 --> 00:44:05.750
You can do it all from within Xcode.

00:44:06.120 --> 00:44:07.490
And we're done.

00:44:07.610 --> 00:44:10.660
So now we've shown you how to
distribute applications outside of

00:44:10.670 --> 00:44:14.780
the App Store and in the App Store,
and I'd like to invite my colleague,

00:44:14.910 --> 00:44:17.980
Rob Marin,
back onto the stage to show you

00:44:18.070 --> 00:44:20.000
some iOS application best practices.

00:44:20.450 --> 00:44:21.500
Thanks, Itai.

00:44:21.500 --> 00:44:26.000
So most of what we just showed you
applies equally to iOS and to Mac OS X.

00:44:26.000 --> 00:44:29.000
But right now,
we're going to focus exclusively on iOS,

00:44:29.110 --> 00:44:32.500
beginning with a new feature
in the App Store for iOS 6,

00:44:32.500 --> 00:44:34.500
Application Deltas.

00:44:34.660 --> 00:44:38.000
This is something that we've actually
had in the Mac App Store since Lion.

00:44:38.000 --> 00:44:41.430
In fact, earlier this week,
we released an update to Xcode

00:44:41.430 --> 00:44:45.000
4.3 that was just 97 megabytes.

00:44:45.160 --> 00:44:48.490
Gone are the days of needing to
download 4-gigabyte installers

00:44:48.500 --> 00:44:50.470
just to get an updated SDK.

00:44:50.610 --> 00:44:56.500
Application Update Deltas are fantastic
from the perspective of your customers.

00:44:56.500 --> 00:45:00.490
The good news is they're
also fantastic for you.

00:45:00.500 --> 00:45:02.900
Deltas are generated from
your application based

00:45:02.990 --> 00:45:05.600
on each file's contents,
and they're managed

00:45:05.600 --> 00:45:07.000
entirely by the store.

00:45:07.120 --> 00:45:10.000
It keeps track of which
versions to publish,

00:45:10.000 --> 00:45:12.480
which ones to give to your
customers based on what versions

00:45:12.490 --> 00:45:15.080
of the apps they have installed,
and the store takes care

00:45:15.080 --> 00:45:16.490
of generating them for you.

00:45:16.810 --> 00:45:20.500
All you need to do is submit
your application as normal.

00:45:20.630 --> 00:45:23.380
But there are some things you can
do to make sure your application

00:45:23.380 --> 00:45:26.700
update delta is as small as possible.

00:45:26.900 --> 00:45:30.990
For instance,
if you were to change the name of a file,

00:45:30.990 --> 00:45:34.000
the entire file would be
included in the delta.

00:45:34.040 --> 00:45:36.200
If you were to change
the name of a directory,

00:45:36.260 --> 00:45:39.400
the entire directory's contents
would be included in the delta,

00:45:39.440 --> 00:45:43.300
and it would take that much longer for
your customers to download the update.

00:45:43.340 --> 00:45:46.800
And if you were to change your
application's name on disk,

00:45:46.820 --> 00:45:50.200
all of the application's contents
would end up in the delta,

00:45:50.270 --> 00:45:54.250
which would probably lead
to some unhappy customers.

00:45:55.850 --> 00:46:00.470
But that only really applies once you're
ready to submit an update to the store.

00:46:00.630 --> 00:46:04.240
How do you actually know you're
ready to go live with your update?

00:46:04.410 --> 00:46:08.280
For that, we have a process we
call ad hoc distribution,

00:46:08.380 --> 00:46:12.080
which most commonly is used for
producing a beta of your application

00:46:12.080 --> 00:46:14.490
to provide to your customers to test.

00:46:14.580 --> 00:46:17.860
A lot of you work in small teams,
maybe one or two people,

00:46:17.980 --> 00:46:20.560
and you don't have a
dedicated quality staff.

00:46:20.680 --> 00:46:24.340
Doing a beta test allows you to
make sure that the customers that

00:46:24.340 --> 00:46:28.950
matter to you are satisfied with the
state of your application's quality.

00:46:29.050 --> 00:46:32.340
It lets you interact directly with them,
obtain feedback,

00:46:32.340 --> 00:46:34.640
and respond to them in a rapid fashion.

00:46:34.700 --> 00:46:37.680
And it lets your customers feel
like they're directly influencing

00:46:37.680 --> 00:46:39.880
the direction of your product.

00:46:39.910 --> 00:46:42.780
And as a bonus, it lets you,
before your app actually

00:46:42.780 --> 00:46:45.850
goes live on the store,
identify what the weak points and

00:46:45.850 --> 00:46:49.900
strong points of it are so you can
start planning your next update.

00:46:50.830 --> 00:46:56.240
So today we're going to talk about
some best practices for doing this.

00:46:56.380 --> 00:47:00.940
And it's important to know that
we don't want to do a lot of work.

00:47:01.060 --> 00:47:05.560
We have fantastic tools,
and we want Xcode to do the work for us.

00:47:05.640 --> 00:47:08.300
So we're going to explore how to
take advantage of the Xcode build

00:47:08.300 --> 00:47:11.250
system to set up our application beta.

00:47:11.280 --> 00:47:14.270
And then we're going to talk
about how to get our beta into our

00:47:14.270 --> 00:47:18.090
customers' hands easily and quickly.

00:47:18.810 --> 00:47:22.360
So, specifically, we have some goals.

00:47:22.400 --> 00:47:26.490
The first is we want our
application to coexist on our

00:47:26.590 --> 00:47:30.200
customers' devices alongside the
version shipping in the store.

00:47:30.240 --> 00:47:31.830
And to do that,
we're going to take advantage

00:47:31.870 --> 00:47:33.600
of the app's bundle ID.

00:47:33.610 --> 00:47:36.960
As it turns out,
iOS devices unique installed applications

00:47:36.960 --> 00:47:39.590
on the home screen via the bundle ID.

00:47:39.690 --> 00:47:43.530
So we're going to provide a different
one for our beta application.

00:47:43.960 --> 00:47:46.900
Second,
we want our beta to be something that

00:47:46.990 --> 00:47:51.190
can be quickly identified alongside our
shipping application by our customers.

00:47:51.260 --> 00:47:54.710
So to do that,
we're going to provide a separate icon.

00:47:55.160 --> 00:47:58.330
And keeping in mind our
earlier goal of doing less,

00:47:58.330 --> 00:48:02.100
we want Xcode to figure out
which one to produce for us.

00:48:03.200 --> 00:48:06.860
And then, of course, we actually want our
customers to test our product.

00:48:06.980 --> 00:48:10.290
So we want to make sure we can
provide them with our application

00:48:10.750 --> 00:48:15.130
in a way that they can quickly
and easily install wirelessly.

00:48:15.240 --> 00:48:18.360
And in fact, you can do that from Xcode.

00:48:18.650 --> 00:48:21.040
Once you've produced an
archive of your application,

00:48:21.090 --> 00:48:24.070
you can distribute it in a way that
allows you to save it for what we

00:48:24.180 --> 00:48:26.940
call ad hoc or enterprise deployment.

00:48:27.010 --> 00:48:29.840
And when you do this,
you'll be prompted to provide some

00:48:29.900 --> 00:48:33.720
additional information to Xcode,
and it can produce one of these

00:48:33.720 --> 00:48:35.560
installer manifests for you.

00:48:35.630 --> 00:48:39.310
The things you'll need are a
URL where you plan to host the

00:48:39.310 --> 00:48:44.110
.IPA file that Xcode will save out,
as well as the title of your app.

00:48:44.200 --> 00:48:47.000
And then you can give it some
artwork or some additional text,

00:48:47.060 --> 00:48:50.910
and it'll show that when it provides
the installer UI on the device.

00:48:51.070 --> 00:48:55.120
And once you save this out,
Xcode will give you not only your IPA,

00:48:55.200 --> 00:48:57.410
but a property list file
that's pretty short.

00:48:57.420 --> 00:48:59.300
It looks something like this.

00:48:59.330 --> 00:49:01.020
And for those of you who like
to view your property list

00:49:01.020 --> 00:49:04.840
in the source code editor,
it would look like this.

00:49:05.020 --> 00:49:08.680
And if you were to host this on
a website alongside the .IPA,

00:49:08.780 --> 00:49:12.660
if you browse to it in Safari,
and your application-- and your device,

00:49:12.660 --> 00:49:16.390
rather-- is listed in the provisioning
profile for your application,

00:49:16.420 --> 00:49:19.120
your device will offer to install it.

00:49:19.120 --> 00:49:21.110
It's great.

00:49:21.360 --> 00:49:25.410
So now, I think I'm going to
show you how to do that.

00:49:25.640 --> 00:49:30.400
So I'm going to go ahead and close
this because I'm working on an iOS app,

00:49:30.450 --> 00:49:34.060
and I'm hoping Yevgeny hasn't touched it.

00:49:34.340 --> 00:49:38.510
So I have a copy of it here,
and I'm going to go ahead and open it.

00:49:39.560 --> 00:49:43.600
And since I know that you really
don't want to see me type,

00:49:43.600 --> 00:49:48.560
I've gone ahead and written out some
text already that I'm going to use.

00:49:48.750 --> 00:49:52.870
Specifically, if I take a look at my
project in the project editor,

00:49:53.180 --> 00:49:57.100
I'm taking advantage of a feature
of Xcode called Configurations.

00:49:57.150 --> 00:50:01.700
I've created a new configuration
for my application called a beta.

00:50:02.080 --> 00:50:05.340
And I did so by just
hitting this plus button.

00:50:05.510 --> 00:50:09.730
And what I would like to do is
tell Xcode that when I'm building

00:50:09.730 --> 00:50:12.250
for the beta configuration,
I want to take certain

00:50:12.250 --> 00:50:14.690
things into account,
and those things are

00:50:14.690 --> 00:50:16.600
build system settings.

00:50:16.770 --> 00:50:19.590
So I've defined those in my target.

00:50:21.330 --> 00:50:26.530
And if I go to the Build Settings Editor,
I'm gonna hide this inspector,

00:50:26.710 --> 00:50:30.100
go to the bottom,
you can see I've defined two build

00:50:30.210 --> 00:50:39.050
settings in the User Defined section,
one of which is recipe_bundle_id_suffix,

00:50:39.180 --> 00:50:42.400
because build systems
really like underbars.

00:50:42.500 --> 00:50:46.820
And I've provided a value for that
only for the beta configuration,

00:50:46.930 --> 00:50:48.890
which is .beta,

00:50:49.120 --> 00:50:52.330
And this is going to allow
me to provide the Xcode build

00:50:52.330 --> 00:50:56.640
system the context that says,
when this string appears in something

00:50:56.640 --> 00:51:00.340
that we're going to preprocess,
replace it with .beta.

00:51:00.400 --> 00:51:05.440
And similarly,
I specified one for my recipe icon name.

00:51:05.570 --> 00:51:09.410
And in my project, I actually have

00:51:09.900 --> 00:51:14.980
Two icons, one of which is recipe,
and one of which is recipe beta.

00:51:15.580 --> 00:51:18.350
So where we're going to use
these build settings is in

00:51:18.350 --> 00:51:20.980
our Applications Info.plist.

00:51:21.080 --> 00:51:24.390
So for the bundle identifier,
I've actually--

00:51:24.630 --> 00:51:30.500
At the end of the string,
appended RecipeBundleID suffix.

00:51:30.750 --> 00:51:33.010
And for our icon,

00:51:33.910 --> 00:51:38.240
I've specified recipe icon name suffix.

00:51:38.300 --> 00:51:42.200
Now, when I build my application as
normal for debug or release,

00:51:42.260 --> 00:51:44.660
those two build settings are going
to evaluate to an empty string

00:51:44.660 --> 00:51:46.360
and everything will be left alone.

00:51:46.410 --> 00:51:52.000
But when I build it for the beta setting,
they'll actually be real values.

00:51:52.060 --> 00:51:56.150
So I'm going to go ahead and
actually build my application for the

00:51:56.180 --> 00:51:59.390
simulator in its normal configuration
to show you what it looks like,

00:51:59.500 --> 00:52:02.760
just to, you know,
make sure there's no tricks here.

00:52:03.640 --> 00:52:06.230
Here's the app,
and if I go to the home screen,

00:52:06.230 --> 00:52:06.620
there it is.

00:52:06.760 --> 00:52:09.230
As you can see,
it's the standard application,

00:52:09.230 --> 00:52:10.980
standard icon.

00:52:11.400 --> 00:52:15.740
So what I'd like to do now is to
actually provide the iPhone simulator

00:52:15.800 --> 00:52:17.640
the beta configuration of it.

00:52:17.770 --> 00:52:20.200
So to do that,
I'm going to manage my schemes,

00:52:20.270 --> 00:52:23.520
and I'll actually duplicate
this recipe scheme.

00:52:24.260 --> 00:52:28.190
And what I want to do is tell it,
when I'm building,

00:52:28.310 --> 00:52:30.300
use the beta configuration.

00:52:30.350 --> 00:52:33.190
And similarly,
I want to provide this to my customers.

00:52:33.450 --> 00:52:37.440
So when I'm archiving,
use the beta configuration.

00:52:37.480 --> 00:52:39.240
I'll hit OK.

00:52:39.320 --> 00:52:42.530
And now I'm going to run
again on the iPhone simulator.

00:52:42.830 --> 00:52:45.640
My application is still running,
so I'll stop that.

00:52:45.700 --> 00:52:48.060
And now I'll run again
on the iPhone simulator.

00:52:48.130 --> 00:52:48.840
And here we are.

00:52:48.890 --> 00:52:50.840
Here's the application.

00:52:50.890 --> 00:52:53.870
If I hit the Home button, you can see,
there it is alongside

00:52:53.870 --> 00:52:54.920
our regular version.

00:52:54.920 --> 00:52:56.470
It has the new icon.

00:52:56.560 --> 00:52:57.990
Great.

00:52:58.480 --> 00:53:00.730
So now I want to provide
it to my customers.

00:53:00.880 --> 00:53:04.770
So I'm going to archive this application,
but before I do that,

00:53:04.800 --> 00:53:07.240
I want to actually provide
them with a device version,

00:53:07.380 --> 00:53:10.390
so I'll choose that as our active device.

00:53:10.560 --> 00:53:13.300
And now I'll archive the application.

00:53:15.850 --> 00:53:20.800
Now Xcode is going to show me this
inside of the Xcode Organizer.

00:53:21.220 --> 00:53:26.330
And I can distribute it in the same
fashion as we've been seeing all day.

00:53:26.480 --> 00:53:29.360
But I can distribute it for
enterprise or ad hoc deployment.

00:53:29.370 --> 00:53:31.410
And if I choose that,

00:53:31.970 --> 00:53:34.650
Xcode asks me for a
code-signing identity.

00:53:34.750 --> 00:53:37.000
My secret alias is
actually Johnny Appleseed,

00:53:37.110 --> 00:53:40.150
so I'll hit Next.

00:53:43.960 --> 00:53:46.240
And when it's done,
it's going to prompt me

00:53:46.240 --> 00:53:48.240
to save this somewhere.

00:53:48.300 --> 00:53:52.600
And I'm going to choose this Save for
Enterprise Distribution flag.

00:53:52.610 --> 00:53:55.520
And at this point,
I'm going to tell Xcode where

00:53:55.520 --> 00:53:57.640
my IPA is going to be hosted.

00:53:57.780 --> 00:53:59.730
Since those recipes look
pretty good naturally,

00:53:59.760 --> 00:54:02.200
this will be right on apple.com.

00:54:05.890 --> 00:54:09.190
Typing on stage is a lot
harder than it might seem.

00:54:09.240 --> 00:54:12.100
Interesting fact about WWDC.

00:54:12.170 --> 00:54:14.310
And then I'll give it a title.

00:54:15.250 --> 00:54:18.580
So now I've chosen to save out
an IPA of my app to my desktop

00:54:18.870 --> 00:54:22.530
along with this install manifest,
which is a property list that

00:54:22.530 --> 00:54:25.860
contains the URL to the IPA.

00:54:26.030 --> 00:54:28.420
So I'll go ahead and save that.

00:54:28.770 --> 00:54:33.290
And if I go back to Finder
and take a look on my desktop,

00:54:33.420 --> 00:54:36.260
there's the IPA and
there's the property list.

00:54:36.500 --> 00:54:38.750
And I'll open that
next code for a second,

00:54:38.860 --> 00:54:42.230
and you can just see
what its contents are.

00:54:42.560 --> 00:54:46.000
And if I put this property
list on a web server,

00:54:46.000 --> 00:54:49.130
as I said,
and browse through it with the device,

00:54:49.130 --> 00:54:51.060
it'll prompt me to install.

00:54:51.370 --> 00:54:53.690
I'm going to go ahead and close that.

00:54:53.860 --> 00:54:56.450
Now we'll switch back to slides.

00:54:56.620 --> 00:54:59.900
So let's talk about
what we went over today.

00:54:59.960 --> 00:55:04.820
First, how to distribute your application
outside of the App Store in a way

00:55:04.820 --> 00:55:08.410
that ensures that it's available to
your customers running Mountain Lion,

00:55:08.410 --> 00:55:11.900
as well as providing them with a sense
of security and confidence in the quality

00:55:11.900 --> 00:55:14.600
of your application and its security.

00:55:14.640 --> 00:55:17.470
We also talked about how to take
advantage of technologies available

00:55:17.470 --> 00:55:20.720
through the Mac App Store and how
to submit your application to the

00:55:20.770 --> 00:55:23.520
Mac App Store and the iOS App Store.

00:55:23.720 --> 00:55:26.210
And in iOS,
we talked about how to provide your

00:55:26.330 --> 00:55:30.170
customers with a pre-release copy
of your application distributed

00:55:30.170 --> 00:55:33.890
ad hoc in the form of a beta,
as well as some new features in

00:55:33.890 --> 00:55:36.980
the App Store in the form of deltas
and how to make sure that your

00:55:36.980 --> 00:55:39.420
delta is as small as possible.

00:55:40.130 --> 00:55:43.520
For more information, please feel free to
contact Michael Jurowicz,

00:55:43.520 --> 00:55:44.500
our evangelist.

00:55:44.500 --> 00:55:45.900
You've probably seen
him around this week.

00:55:45.900 --> 00:55:48.600
He's the guy in the suit
with the big camera.

00:55:48.600 --> 00:55:52.140
There's also some documentation
in the form of the Tools Workflow

00:55:52.140 --> 00:55:54.350
Guides for Mac and for iOS.

00:55:54.460 --> 00:55:58.060
And if you have any questions,
we're available on the dev forums.

00:55:58.140 --> 00:56:01.390
If you're interested in the
OS X application sandbox or taking

00:56:01.750 --> 00:56:05.330
advantage of Gatekeeper and Developer ID,
there were some sessions about

00:56:05.330 --> 00:56:06.440
that earlier in the week.

00:56:06.510 --> 00:56:08.340
It'll be available on video.

00:56:08.420 --> 00:56:11.280
There's also a session on how to take
advantage of some new features in

00:56:11.280 --> 00:56:14.490
iTunes Connect for those of you managing
a lot of in-app purchase content.

00:56:14.610 --> 00:56:15.360
Thank you.