WEBVTT

00:00:11.630 --> 00:00:13.960
Good afternoon.

00:00:13.990 --> 00:00:19.710
I'm Ken Orr.

00:00:19.770 --> 00:00:23.950
I'm the manager of the
Xcode debugger UI team.

00:00:25.930 --> 00:00:28.360
I saw a very interesting
talk the other day.

00:00:28.360 --> 00:00:29.130
It was a TED talk.

00:00:29.250 --> 00:00:31.930
Those are the technology, entertainment,
and design talks.

00:00:33.580 --> 00:00:39.440
And it was a talk about how to use a
paper towel by a guy named Joe Smith.

00:00:39.530 --> 00:00:43.280
And he was showing how we could
vastly reduce the amount of paper

00:00:43.280 --> 00:00:47.970
waste we produce each year by doing
just a couple things differently

00:00:48.030 --> 00:00:49.880
when we go to dry our hands.

00:00:50.210 --> 00:00:54.280
Now, what intrigued me so much about
Joe's talk was that he was

00:00:54.280 --> 00:01:00.780
presenting in such a prominent
venue about such an ordinary task.

00:01:00.980 --> 00:01:04.200
You know, and that got me thinking,
that is exactly what I'm

00:01:04.200 --> 00:01:07.160
here to do today with you,
to talk about debugging,

00:01:07.160 --> 00:01:09.590
something that's second
nature probably to most of us,

00:01:10.250 --> 00:01:14.560
something that seems so ordinary,
but it's still a task that has many

00:01:14.560 --> 00:01:20.200
simple things that we can do to eliminate
waste and become more effective.

00:01:20.360 --> 00:01:23.970
And so when you leave here today,
I want you to be able to just tweak

00:01:24.030 --> 00:01:28.040
a few things about how you work,
and that small amount of change

00:01:28.680 --> 00:01:33.090
will add up to a large amount
of saved time over the long run.

00:01:35.060 --> 00:01:38.450
Now, what is it that we're
doing when we're debugging?

00:01:38.600 --> 00:01:41.440
Well, probably a number of things,
but two of the most important

00:01:41.440 --> 00:01:45.190
are we're trying to analyze
the control flow of our app,

00:01:45.430 --> 00:01:48.550
so what lines of code
are being hit and when.

00:01:48.550 --> 00:01:51.510
And then we're also trying
to evaluate correctness.

00:01:51.750 --> 00:01:54.220
Are we showing the right
information to our users?

00:01:54.220 --> 00:01:59.440
And Xcode provides us with some fantastic
and very powerful tools to do this,

00:01:59.440 --> 00:02:03.740
namely breakpoints and
variables in the variables view.

00:02:05.420 --> 00:02:07.620
So today,
I want to spend some time talking

00:02:07.620 --> 00:02:10.540
about these and show you how you
can be more effective in using

00:02:10.540 --> 00:02:13.420
these tools that Xcode provides you.

00:02:14.890 --> 00:02:19.080
So we'll start by talking about
breakpoints and breakpoint actions.

00:02:19.110 --> 00:02:23.540
Now, before we do that, let me ask,
how many people are

00:02:24.140 --> 00:02:25.320
not using breakpoints?

00:02:25.330 --> 00:02:27.590
Or perhaps you don't know what they are.

00:02:27.840 --> 00:02:31.980
I know there's got to be somebody,
but in fact, my own brother,

00:02:31.980 --> 00:02:34.650
who's in academia and also
does some development,

00:02:34.650 --> 00:02:40.810
was not using breakpoints until I gave
him a private demo of these and showed

00:02:40.840 --> 00:02:42.150
him how it would change his life.

00:02:42.390 --> 00:02:45.410
But that meant he was
doing a lot of this.

00:02:45.410 --> 00:02:48.450
And this is extremely inefficient.

00:02:48.450 --> 00:02:54.260
So you have to first find the line of
code where you're having a problem.

00:02:54.260 --> 00:02:55.720
You have to stop running.

00:02:56.050 --> 00:02:57.700
You have to insert the log statement.

00:02:57.710 --> 00:02:58.990
You have to build.

00:02:59.250 --> 00:03:00.060
You have to run.

00:03:00.270 --> 00:03:01.780
You have to get back
to that line of code.

00:03:01.780 --> 00:03:03.340
You have to evaluate what's going on.

00:03:03.620 --> 00:03:04.580
Then you're not done.

00:03:04.580 --> 00:03:05.480
You need to stop.

00:03:05.720 --> 00:03:08.040
And then you need to take this out,
because if you don't,

00:03:08.070 --> 00:03:10.640
you're going to leave that
debugging cruft in there,

00:03:10.640 --> 00:03:11.440
and we don't want that.

00:03:11.440 --> 00:03:15.350
So this is an extremely
inefficient way to debug.

00:03:15.420 --> 00:03:17.870
So we do not want you to do this.

00:03:17.870 --> 00:03:22.040
And in fact, if you use breakpoints
and breakpoint actions,

00:03:22.040 --> 00:03:25.690
you'll never have to put another
NS log in your code again.

00:03:27.580 --> 00:03:33.740
So let's start back at the very beginning
and talk about how to create breakpoints.

00:03:33.820 --> 00:03:35.680
Well, that's very easy in Xcode 4.

00:03:35.790 --> 00:03:37.780
Of course,
you can just simply click in the

00:03:38.180 --> 00:03:41.380
source code editor margin there,
the gutter.

00:03:41.520 --> 00:03:43.900
And alternatively,
if you're a keyboard person,

00:03:43.960 --> 00:03:46.890
you can press Command-backslash.

00:03:47.480 --> 00:03:50.500
Now,
deleting a breakpoint is just as easy.

00:03:50.500 --> 00:03:51.780
You can drag that out.

00:03:51.880 --> 00:03:54.570
A lot of people don't know that,
but that's a very easy

00:03:54.570 --> 00:03:56.640
way to delete breakpoints.

00:03:56.770 --> 00:03:58.840
And now,
once you've created these breakpoints,

00:03:58.840 --> 00:04:01.430
you've taken the time to set these,
you're probably gonna

00:04:01.430 --> 00:04:02.060
want to manage them.

00:04:02.260 --> 00:04:04.660
So you're gonna want to
see them all in one place.

00:04:04.820 --> 00:04:08.890
And the place you do that
is the breakpoint navigator.

00:04:08.980 --> 00:04:11.300
So you get to the breakpoint
navigator by clicking this

00:04:11.390 --> 00:04:13.260
little breakpoint icon here.

00:04:13.380 --> 00:04:16.260
Or you can also press Command + 6.

00:04:16.820 --> 00:04:20.660
And let's take a closer look
at the breakpoint navigator.

00:04:20.660 --> 00:04:25.590
So if you're using a workspace,
then by default, all of your breakpoints,

00:04:25.600 --> 00:04:27.680
they live with the workspace.

00:04:27.680 --> 00:04:30.300
So they're attached to the workspace.

00:04:30.300 --> 00:04:32.760
But they don't have to stay that way.

00:04:32.760 --> 00:04:35.990
So workspaces are they're
composed of projects,

00:04:35.990 --> 00:04:37.530
one or more projects.

00:04:37.530 --> 00:04:40.830
And, in fact,
you can move breakpoints to live with

00:04:40.830 --> 00:04:43.560
the project instead of the workspace.

00:04:43.560 --> 00:04:46.560
So here we can move the breakpoint.

00:04:46.560 --> 00:04:48.460
There's only one project here.

00:04:48.460 --> 00:04:51.660
But I'm going to move it
to the sketch project.

00:04:51.660 --> 00:04:53.850
Now, why would you want to do this?

00:04:54.020 --> 00:04:56.420
Well, there's a couple reasons.

00:04:56.420 --> 00:04:59.380
So first,
you may want to open that project

00:04:59.510 --> 00:05:01.540
up outside of the workspace.

00:05:01.540 --> 00:05:03.670
So if you want to do that
and you want the breakpoints

00:05:03.750 --> 00:05:06.030
to come along for the ride,
then you're going to want to

00:05:06.030 --> 00:05:09.400
associate the breakpoint with the
project rather than the workspace.

00:05:09.400 --> 00:05:14.240
And the second reason is that
oftentimes the project will be

00:05:14.240 --> 00:05:16.320
associated with many workspaces.

00:05:16.330 --> 00:05:19.890
And if that's the case and
you want the breakpoint to be

00:05:19.890 --> 00:05:23.870
associated with the project,
this is how you achieve that.

00:05:24.170 --> 00:05:26.550
Now, we can also share breakpoints.

00:05:26.630 --> 00:05:30.090
A lot of people don't know this,
but sharing breakpoints

00:05:30.190 --> 00:05:33.870
means that anybody can have
access to the breakpoint.

00:05:33.970 --> 00:05:37.420
So anybody that opens the project or
workspace will see that breakpoint.

00:05:37.440 --> 00:05:39.780
And this is also useful
for a couple reasons.

00:05:39.780 --> 00:05:43.300
You can, if your team, for example,
has a number of breakpoints

00:05:43.460 --> 00:05:45.920
that apply to everybody,
and in fact some of the

00:05:45.920 --> 00:05:48.540
teams at Apple work this way,
then you can share that set

00:05:48.730 --> 00:05:51.630
of breakpoints and then all
your team members can see them.

00:05:53.390 --> 00:05:58.660
Also, the way I use these is if I'm
providing reproduction steps for a bug,

00:05:58.680 --> 00:06:04.060
I will write up the steps,
then set a shared breakpoint,

00:06:04.060 --> 00:06:06.320
zip that all up,
send it to the person that's

00:06:06.320 --> 00:06:09.690
going to reproduce the bug,
and now they can see exactly

00:06:09.690 --> 00:06:14.020
where in the code they need to
land in order to see that issue.

00:06:14.020 --> 00:06:16.690
So a great tool to do that.

00:06:16.760 --> 00:06:21.050
So here we've created
our shared breakpoint.

00:06:21.900 --> 00:06:25.890
And then there's one last place
that we can stash our breakpoints,

00:06:25.990 --> 00:06:28.310
and that's in this special user group.

00:06:28.490 --> 00:06:34.000
So the user group is a special
group that lives on your machine.

00:06:34.000 --> 00:06:36.230
So it's associated
with your user account,

00:06:36.230 --> 00:06:40.600
and now any breakpoints you put in here
will be available from any projects

00:06:40.690 --> 00:06:42.910
and any workspaces that you open up.

00:06:43.000 --> 00:06:45.460
And we'll see in just a
minute why this is useful.

00:06:47.980 --> 00:06:50.440
So here we've moved
that to the user group.

00:06:50.540 --> 00:06:55.210
Okay, also in the breakpoint navigator,
we can create a couple

00:06:55.590 --> 00:06:58.000
special kinds of breakpoints.

00:06:58.080 --> 00:07:03.230
So, namely, the exception breakpoint
and the symbolic breakpoint.

00:07:03.240 --> 00:07:08.450
So an exception breakpoint
is one that's hit any time an

00:07:08.450 --> 00:07:10.770
exception is thrown or caught.

00:07:10.900 --> 00:07:13.620
Now, if you'll remember in
Objective-C and in Cocoa,

00:07:13.620 --> 00:07:17.890
we don't use exceptions for control flow,
like you might in .NET or Java,

00:07:17.900 --> 00:07:21.270
but in fact,
they're used only for exceptional cases.

00:07:21.280 --> 00:07:24.080
So they're really cases
that you want to debug.

00:07:24.160 --> 00:07:25.950
That's when we'll use those.

00:07:26.020 --> 00:07:28.680
Now, when you create one of
these exception breakpoints,

00:07:28.680 --> 00:07:31.780
you'll see this little popover,
and there's a couple of knobs

00:07:31.780 --> 00:07:33.060
that you can twist on here.

00:07:33.060 --> 00:07:37.860
And the first knob that you can
twist is you can decide when or

00:07:38.060 --> 00:07:39.820
the type of exception breakpoint.

00:07:39.820 --> 00:07:41.240
Do you want to break on all exceptions?

00:07:41.240 --> 00:07:45.120
Do you want to break just on
Objective-C or just C++ exceptions?

00:07:46.440 --> 00:07:47.860
Typically, I just leave that on all.

00:07:47.860 --> 00:07:50.320
That's the easier setting,
and that's the default.

00:07:52.300 --> 00:07:54.960
Then you can also decide
when you want to break.

00:07:55.060 --> 00:07:57.700
So do you want to break when
the exception is thrown,

00:07:57.770 --> 00:07:59.360
or do you want to break when it's caught?

00:07:59.420 --> 00:08:02.340
Now, the default is thrown,
and that's where I leave

00:08:02.350 --> 00:08:05.230
this most of the time,
because that will-- then you'll

00:08:05.230 --> 00:08:08.360
stop at the line of code that
actually caused the problem.

00:08:08.500 --> 00:08:13.560
So that's probably where you want to be,
so I would just leave that on throw.

00:08:13.900 --> 00:08:16.020
We're going to skip those
two options for now,

00:08:16.020 --> 00:08:17.400
but we'll come back to them.

00:08:17.400 --> 00:08:20.280
Now,
when we create a symbolic breakpoint,

00:08:20.280 --> 00:08:22.400
we see this little popover.

00:08:22.400 --> 00:08:26.430
And let's talk about what
a symbolic breakpoint is.

00:08:26.430 --> 00:08:30.560
So a symbolic breakpoint lets
you specify a symbol name.

00:08:30.560 --> 00:08:34.240
So that would be something
like a method or a function.

00:08:34.240 --> 00:08:37.260
And when that method
or function is called,

00:08:37.260 --> 00:08:40.910
we'll pause execution and
we'll stop you on the line of

00:08:40.910 --> 00:08:43.280
code that's making that call.

00:08:43.910 --> 00:08:47.530
Now, this is useful in cases where
you want to set a breakpoint,

00:08:47.530 --> 00:08:50.150
but you don't have access
to the source code.

00:08:50.150 --> 00:08:52.970
So if you want to stop on
malloc underscore debug,

00:08:52.970 --> 00:08:55.690
you don't have the source code for that.

00:08:55.830 --> 00:08:58.110
So you can't open it up in
the source code editor and

00:08:58.110 --> 00:08:59.840
set a file in line breakpoint.

00:08:59.840 --> 00:09:02.840
So you want to create a symbolic
breakpoint with that function name.

00:09:02.880 --> 00:09:06.910
Now, you can also have a symbolic
breakpoint that resolves to

00:09:06.910 --> 00:09:09.120
multiple places in your code.

00:09:09.160 --> 00:09:13.880
So if you wanted to stop any time
draw rect was called across any class,

00:09:13.950 --> 00:09:18.110
you could do that by putting
a symbol name of draw rect.

00:09:18.210 --> 00:09:20.520
Now,
that would stop you in a lot of places,

00:09:20.520 --> 00:09:24.550
but you can start to think about when
you can use this type of breakpoint.

00:09:26.170 --> 00:09:33.170
Now, you can also specify the shared
library that you care about.

00:09:33.380 --> 00:09:37.250
So if you know exactly what
shared library your symbol name

00:09:37.250 --> 00:09:40.030
is in or the only shared library
that you care about to stop in,

00:09:40.120 --> 00:09:41.630
you can specify that here.

00:09:41.740 --> 00:09:46.850
Now, if you leave it blank,
we'll stop any time the symbol

00:09:46.900 --> 00:09:51.210
is hit and we'll resolve it
across all shared libraries.

00:09:51.210 --> 00:09:51.210
But you can whittle
it down if you'd like.

00:09:52.820 --> 00:09:56.430
Okay, so we've seen how to create
symbolic and exception breakpoints,

00:09:56.480 --> 00:09:58.030
which are both very, very useful.

00:09:58.350 --> 00:10:00.540
But let's take a look at some
things that we can tweak about

00:10:00.540 --> 00:10:03.450
just simple file breakpoints.

00:10:04.390 --> 00:10:07.620
So the first thing we can do, well,
is edit it.

00:10:07.620 --> 00:10:10.140
And this is a little-known
keyboard shortcut,

00:10:10.140 --> 00:10:11.500
well, keyboard mouse shortcut.

00:10:11.500 --> 00:10:15.230
So if you hold down Option and Command,
and then you click that

00:10:15.270 --> 00:10:18.520
little blue breakpoint icon,
you'll get that nice little popover.

00:10:18.540 --> 00:10:21.550
And you can do that either
from the breakpoint navigator,

00:10:21.550 --> 00:10:24.160
or you can do that from
the source code editor.

00:10:24.160 --> 00:10:28.800
That will shave at least a
few seconds off your day.

00:10:31.210 --> 00:10:34.280
So the first thing we can
tweak here is the condition.

00:10:34.280 --> 00:10:39.060
So if you have a line of code that's
hit in a lot of different scenarios

00:10:39.060 --> 00:10:42.700
and there's only one particular
scenario that you care about,

00:10:42.760 --> 00:10:47.410
well, you can articulate that by
entering in an expression.

00:10:47.480 --> 00:10:51.950
And that expression will be, of course,
evaluated either to true or to false.

00:10:52.050 --> 00:10:56.030
If it's evaluated to true,
we'll stop at that line of code.

00:10:56.040 --> 00:10:59.050
False, we'll just pretend that it wasn't
even there and continue going.

00:10:59.790 --> 00:11:03.630
So the expression is,
it's a line of code just like

00:11:03.730 --> 00:11:05.010
you'd put in your source code.

00:11:06.980 --> 00:11:09.000
Now,
you can also specify an ignore count,

00:11:09.000 --> 00:11:14.930
and this is useful if you're debugging
drag-and-drop code or drawing code where

00:11:15.340 --> 00:11:20.740
you just don't care about the first
50 times that a line of code is hit.

00:11:20.800 --> 00:11:23.360
So you're dragging over,
and you only care when you

00:11:23.360 --> 00:11:27.180
get to the drop target,
and it takes 50 times to hit

00:11:27.270 --> 00:11:30.820
that line before you care,
so you just enter the number 50,

00:11:30.820 --> 00:11:34.010
and then we'll skip the
breakpoint 50 times,

00:11:34.010 --> 00:11:35.850
and time 51 will stop.

00:11:37.980 --> 00:11:42.940
Now, the last option here gives you the
ability to automatically continue.

00:11:42.940 --> 00:11:47.500
So, if you check that box after
we evaluate the breakpoint,

00:11:47.750 --> 00:11:50.700
then we'll actually
automatically continue.

00:11:50.700 --> 00:11:55.900
Now, by itself, that isn't particularly
useful to just keep going,

00:11:55.900 --> 00:11:58.900
but when we combine that with the
next thing we're gonna talk about,

00:11:58.900 --> 00:12:01.680
which is breakpoint actions,
we'll see how that can

00:12:01.680 --> 00:12:03.490
become much more useful.

00:12:05.580 --> 00:12:10.500
Now, breakpoint actions are-- they're
operations that are-- that are

00:12:10.500 --> 00:12:13.140
run when a breakpoint is hit.

00:12:13.570 --> 00:12:16.300
You can add one simply by
pressing that little guy there,

00:12:16.340 --> 00:12:19.860
the Add Action button,
and subsequent actions

00:12:19.860 --> 00:12:21.500
you can-- you can add.

00:12:21.500 --> 00:12:25.500
So you can have any number
of actions on a breakpoint.

00:12:25.540 --> 00:12:27.500
Typically, I have one to two.

00:12:27.500 --> 00:12:30.500
That's about as many as
I find useful usually,

00:12:30.500 --> 00:12:33.140
but you can have as many as you want.

00:12:33.340 --> 00:12:36.520
And today we're going to talk
about five of the standard

00:12:36.520 --> 00:12:40.580
breakpoint actions in Xcode,
starting with the debugger

00:12:40.720 --> 00:12:41.740
command breakpoint action.

00:12:41.760 --> 00:12:46.140
Now,
this action is probably the most useful.

00:12:46.140 --> 00:12:47.520
You'll probably find
this one the most useful,

00:12:47.520 --> 00:12:49.460
and it's also probably the most used.

00:12:49.700 --> 00:12:53.060
And the way I use this is
I use this to get rid of that

00:12:53.410 --> 00:12:58.390
NSLog statement in my code,
and I do that by something like this.

00:12:58.680 --> 00:13:02.380
So instead of an NSLog,
I create an action that does a PO,

00:13:02.380 --> 00:13:05.100
so that's the LLDB command
to print an object.

00:13:05.100 --> 00:13:08.850
And then I just put my variable there,
and then oftentimes I'll

00:13:08.850 --> 00:13:12.350
check automatically continue
so that I won't even stop.

00:13:12.460 --> 00:13:14.130
Because usually I don't
really want to stop,

00:13:14.130 --> 00:13:15.250
I just want to see the value.

00:13:15.300 --> 00:13:18.710
So now I've added a logging
statement to my code without

00:13:18.710 --> 00:13:20.680
adding a logging statement.

00:13:22.270 --> 00:13:24.890
Now, you can actually get much fancier,
and in fact,

00:13:25.000 --> 00:13:28.530
you could really add an NSLog
to your code if you wanted

00:13:28.850 --> 00:13:30.600
without adding it to your code.

00:13:30.730 --> 00:13:32.830
And you could do that by
running an expression.

00:13:32.840 --> 00:13:34.640
So here I'm doing an expr.

00:13:34.750 --> 00:13:37.760
That's the LLDB command
to run an expression.

00:13:37.870 --> 00:13:40.560
And then I'm calling the NSLog function.

00:13:40.660 --> 00:13:44.080
And then I'm passing it my variable,
just like I would do for my source code.

00:13:44.260 --> 00:13:48.360
And now I've added a real NSLog
without even touching my code.

00:13:48.360 --> 00:13:51.060
And I can do this all while I'm running.

00:13:52.390 --> 00:13:55.400
And you can really get much
more sophisticated if you want.

00:13:55.490 --> 00:14:00.440
So if you had a conditional
breakpoint and you met the condition,

00:14:00.490 --> 00:14:04.840
then as one of the actions,
you could set subsequent breakpoints.

00:14:04.910 --> 00:14:07.000
So you could chain breakpoints together.

00:14:07.040 --> 00:14:10.130
And you could do that by running
the breakpoint set command and

00:14:10.130 --> 00:14:13.080
then passing in the file and line.

00:14:13.200 --> 00:14:16.330
So you can see here,
you have all the power

00:14:16.420 --> 00:14:19.990
of the console in Xcode,
and you have that right here from

00:14:19.990 --> 00:14:22.180
this simple little breakpoint action.

00:14:22.230 --> 00:14:25.000
So you have a lot of power there.

00:14:25.600 --> 00:14:28.740
Now, the next action is the log
message breakpoint action.

00:14:28.740 --> 00:14:32.290
This is a very simple action,
and I typically use this to

00:14:32.330 --> 00:14:36.110
just print out a simple message,
something like this.

00:14:36.680 --> 00:14:39.040
Anything between at
signs is an expression,

00:14:39.130 --> 00:14:41.440
and that will be evaluated for you.

00:14:41.440 --> 00:14:47.060
If you use the %H macro,
we will replace that with the hit count.

00:14:47.250 --> 00:14:51.500
There's also the %B macro,
which will print out the breakpoint name.

00:14:51.500 --> 00:14:54.580
So I like to use this when
I care to find out how often

00:14:54.650 --> 00:14:56.510
a line of code is being hit.

00:14:56.610 --> 00:15:00.030
I'll just add one of these actions,
put the %H in there, and then I can see a

00:15:00.030 --> 00:15:01.520
quick count in my console.

00:15:04.580 --> 00:15:06.490
So then we have the shell
command breakpoint action.

00:15:06.490 --> 00:15:10.650
Now, this one gives you a lot,
a lot of flexibility because you can do

00:15:10.650 --> 00:15:14.930
anything that you can do from terminal,
you can do using this action

00:15:14.980 --> 00:15:16.770
because it just runs a shell script.

00:15:17.380 --> 00:15:22.210
So one usage I found for this is
to actually take a screen capture.

00:15:22.210 --> 00:15:26.560
So I'll set a breakpoint on some
drawing code where I'm having a problem,

00:15:26.590 --> 00:15:30.810
and then I'll kick off a screen capture,
and then I'll check the wait until

00:15:30.810 --> 00:15:34.620
done box so that we finish the screen
capture before we continue evaluating.

00:15:34.620 --> 00:15:38.370
And then now I can go and I can
inspect that screen capture

00:15:38.510 --> 00:15:42.480
after I've continued evaluating,
and this is just a really,

00:15:42.630 --> 00:15:45.550
really powerful, powerful way to debug.

00:15:48.680 --> 00:15:50.130
So then we have the
sound breakpoint action,

00:15:50.130 --> 00:15:52.390
which is probably my favorite action.

00:15:52.560 --> 00:15:59.030
So, as you might guess,
this one plays a sound.

00:15:59.170 --> 00:16:03.440
I like to use this when
I want to determine how

00:16:03.440 --> 00:16:04.670
often a method is being hit.

00:16:04.760 --> 00:16:07.540
So if I have some timer code and
that's calling a method and it

00:16:07.540 --> 00:16:10.900
should be called every second,
well, I can quickly evaluate whether

00:16:10.900 --> 00:16:12.940
that's working by setting
a sound breakpoint action,

00:16:12.940 --> 00:16:14.240
and then I can just listen to it.

00:16:14.310 --> 00:16:19.070
Now, you could, of course,
add logging to do the same thing,

00:16:19.070 --> 00:16:23.480
but what I find is that there's
so much logging going on in our

00:16:23.560 --> 00:16:26.370
apps that oftentimes it gets lost.

00:16:26.580 --> 00:16:28.000
That message gets lost in there.

00:16:28.000 --> 00:16:31.390
And so the sound breakpoint action,
it gives you another channel of

00:16:31.390 --> 00:16:35.690
sensory information that you can
use to analyze the control flow,

00:16:35.740 --> 00:16:37.140
and that's what we're trying to do here.

00:16:37.140 --> 00:16:40.450
We're trying to better analyze and
more quickly analyze control flow,

00:16:40.450 --> 00:16:43.000
so we have to use all the
tools that we have access to.

00:16:44.290 --> 00:16:47.790
Now, as an added bonus,
any sounds that you put in

00:16:48.030 --> 00:16:51.750
tilde library sounds will be
available to you from Xcode.

00:16:51.860 --> 00:16:53.910
So that's your home directory.

00:16:54.050 --> 00:16:57.500
And so you can have a
lot of fun with this one.

00:16:58.760 --> 00:17:01.460
And then our last action is the
AppleScript breakpoint action.

00:17:01.460 --> 00:17:04.490
Now, like the shell command action,
this one gives us a lot of

00:17:04.490 --> 00:17:08.130
power and flexibility to do
things outside of Xcode itself.

00:17:08.180 --> 00:17:14.830
So one usage I found for this is,
so say you have a long-running test.

00:17:14.960 --> 00:17:17.540
It takes like three, four hours,
and there's a failure in there.

00:17:17.540 --> 00:17:19.540
You know the line of code,
but you don't know how you're

00:17:19.550 --> 00:17:20.390
getting into this case.

00:17:20.420 --> 00:17:25.360
So you set a breakpoint,
and you add an AppleScript action,

00:17:25.360 --> 00:17:29.980
and then you set it up to email you,
when that action is hit.

00:17:30.040 --> 00:17:32.970
So now I can leave.

00:17:32.980 --> 00:17:36.300
I can go do something else,
and then when I get an email

00:17:36.300 --> 00:17:38.810
two hours later on my iPhone,
I can come back to work,

00:17:38.890 --> 00:17:40.120
and then I can analyze the problem.

00:17:40.140 --> 00:17:43.820
So you can get really creative,
and I encourage you to try all

00:17:43.830 --> 00:17:46.500
these out and make yourself more
effective when you're debugging.

00:17:46.540 --> 00:17:50.290
Now here to give us a quick
demo of breakpoints and

00:17:50.540 --> 00:17:52.210
breakpoint actions is Alex.

00:18:00.110 --> 00:18:01.490
Hi, my name's Alex Raftiis.

00:18:01.580 --> 00:18:04.280
I'm an engineer on the UI debugger team.

00:18:04.280 --> 00:18:07.190
And I'm here to show you some examples
of what Ken was just talking about.

00:18:07.280 --> 00:18:10.110
So let me switch over to...

00:18:10.440 --> 00:18:11.140
Our machine.

00:18:11.140 --> 00:18:13.050
And first,
I want to give you a quick idea

00:18:13.050 --> 00:18:14.500
of what we wrote to demo this.

00:18:14.520 --> 00:18:17.520
And we chose to write a client-server
application because we also

00:18:17.870 --> 00:18:20.460
wanted to show you that you
can actually debug two processes

00:18:20.460 --> 00:18:22.430
running simultaneously in Xcode.

00:18:22.460 --> 00:18:24.830
So I'll give you a quick
look at our project.

00:18:24.830 --> 00:18:27.450
We have a workspace,
and here we see the three

00:18:27.450 --> 00:18:28.820
projects we have in it.

00:18:28.910 --> 00:18:31.060
First, we have a HIKES framework.

00:18:31.060 --> 00:18:34.750
This framework contains our common object
model code and code that needs to be

00:18:34.750 --> 00:18:36.780
shared between the client and server.

00:18:37.160 --> 00:18:40.720
We have a HIKES iOS target here,
which is our application.

00:18:40.730 --> 00:18:43.860
And then we have a HIKES server,
which is a Mac OS X application

00:18:43.860 --> 00:18:46.900
that is responsible for
vending the hiking information.

00:18:48.800 --> 00:18:51.820
Now, before I show you this running,
I wanted to give you an example

00:18:51.820 --> 00:18:53.580
of Ken's favorite breakpoint.

00:18:53.690 --> 00:18:55.840
So I'm going to use open quickly,
command-shift-O,

00:18:55.840 --> 00:18:59.540
and bring up hikeserver.m.

00:18:59.600 --> 00:19:03.860
And I'm going to go to line
207 here and set a breakpoint.

00:19:03.910 --> 00:19:07.080
Now I'm going to use
option-command-click to edit that.

00:19:08.880 --> 00:19:10.760
And I'm going to add an action here.

00:19:10.800 --> 00:19:14.160
I'm going to choose the sound breakpoint
and have it play a ping sound.

00:19:14.160 --> 00:19:18.500
I'm also going to have it automatically
continue evaluating after I'm done.

00:19:18.610 --> 00:19:20.480
Now,
I've done this on the line of code where

00:19:20.490 --> 00:19:24.700
when the client connects to the server,
this is the method that is called

00:19:24.700 --> 00:19:26.300
and this is going to give me a ping.

00:19:26.410 --> 00:19:29.700
In this case,
this is useful because frequently when

00:19:29.890 --> 00:19:33.730
you're debugging a client and a server,
you'll find that you have the client

00:19:33.730 --> 00:19:36.760
code actually displaying in the console,
not the server's console,

00:19:36.840 --> 00:19:40.750
so you could very easily miss a log
message that something had happened.

00:19:40.970 --> 00:19:43.160
So this will just let us
know that in fact the client

00:19:43.190 --> 00:19:44.600
is connected to the server.

00:19:44.770 --> 00:19:47.160
So let me go ahead and launch our server.

00:19:47.160 --> 00:19:54.040
And let me go ahead
and launch the client.

00:20:11.670 --> 00:20:13.730
Sorry, it sounded like I didn't have
all the internal speakers,

00:20:13.730 --> 00:20:16.270
but my Mac Pro up here
just pinged for me.

00:20:16.450 --> 00:20:19.980
So let me switch over to our iPad.

00:20:20.950 --> 00:20:23.220
And here you can see
our application running.

00:20:23.340 --> 00:20:25.300
I know that it connected
because I heard the ping,

00:20:25.300 --> 00:20:28.680
so if I click on our hikes,
I expect to see data show up, and I do.

00:20:28.680 --> 00:20:33.310
I can select the central coast here,
and I can select to see a hike.

00:20:37.490 --> 00:20:37.880
There's the hike.

00:20:38.030 --> 00:20:43.290
And this is showing me a hike on
the Montana de Oro Bluff Trail.

00:20:45.230 --> 00:20:47.280
Now let me show you one more
thing to set up the next,

00:20:47.330 --> 00:20:50.020
which is I'm going to go look
at the Cerro San Luis Trail,

00:20:50.020 --> 00:20:53.860
and this time it gave me a world map,
so something seems to be going wrong.

00:20:53.940 --> 00:20:57.470
So what can we do to try to figure
out what's going wrong with this?

00:21:01.940 --> 00:21:05.360
So to diagnose this,
I'm going to set another breakpoint.

00:21:05.370 --> 00:21:10.980
Again, it's going to be in HK server.m,
but this time at line 382.

00:21:13.660 --> 00:21:16.430
Actually, it's gonna be at 383.

00:21:16.500 --> 00:21:21.300
I'm gonna set a breakpoint here
and edit this breakpoint again.

00:21:21.360 --> 00:21:23.900
This time, I'm gonna add an action.

00:21:25.660 --> 00:21:30.220
And this action is going to be... Oops,
I zoomed out too far.

00:21:32.780 --> 00:21:36.360
A debugger command,
which I'm going to drop in here.

00:21:36.400 --> 00:21:39.330
And this debugger command, as Ken showed,
is going to run a log statement.

00:21:39.460 --> 00:21:41.620
And it's just going to log
the map ID that the client's

00:21:41.620 --> 00:21:43.070
requesting from the server.

00:21:43.170 --> 00:21:47.800
I'm going to click to continue after
evaluating again and click done.

00:21:48.060 --> 00:21:50.490
Zoom out,
come down here into the debugger area

00:21:50.520 --> 00:21:53.310
and select the hike servers console.

00:21:53.390 --> 00:21:57.020
I'm gonna go to the iPad
again and select the trail.

00:21:57.270 --> 00:22:00.870
And you'll see here that, sure enough,
I asked for a map ID,

00:22:00.870 --> 00:22:02.920
but I don't see anything.

00:22:03.180 --> 00:22:06.000
So I want a little bit more
information about what's going on here.

00:22:06.000 --> 00:22:08.510
And so certainly I could add
some more log statements and

00:22:08.530 --> 00:22:11.410
recompile and all of that,
but I can do more.

00:22:11.420 --> 00:22:15.240
We've actually, into our server,
built in a logging mechanism,

00:22:15.310 --> 00:22:17.560
and that's where you're seeing
these info logs come from.

00:22:17.560 --> 00:22:19.680
But we have a higher level of logging,
a debug level,

00:22:19.680 --> 00:22:22.870
that'll give us a whole bunch of
information that we don't normally want

00:22:22.880 --> 00:22:25.920
to run with because it would put so much
information in the console we'd just

00:22:25.920 --> 00:22:27.730
lose any relevant information we wanted.

00:22:28.700 --> 00:22:32.700
But I can come in here with a
debug command and an action,

00:22:32.700 --> 00:22:36.760
but this time I'm going
to set a condition.

00:22:40.520 --> 00:22:45.030
And in that condition,
as you can see here, I'm going to do map

00:22:45.100 --> 00:22:48.410
ID is equal to string,
the CXPR unique identifier

00:22:48.410 --> 00:22:49.800
that that map has.

00:22:49.800 --> 00:22:57.480
That means that I'm only going to do this
action when that map ID request comes in.

00:22:58.640 --> 00:23:00.560
I'm also going to set an
expression on this one.

00:23:00.560 --> 00:23:00.960
Oops.

00:23:00.960 --> 00:23:01.800
All right.

00:23:01.800 --> 00:23:03.400
I'm going to add an action again.

00:23:05.800 --> 00:23:09.420
Make sure the field's selected
and set an expression.

00:23:09.430 --> 00:23:12.570
And this time,
I'm actually going to use the

00:23:12.570 --> 00:23:16.960
LLDB expression command to assign
a new value into our log level.

00:23:16.960 --> 00:23:19.930
I can do this directly to an instance
variable here because we're in

00:23:19.930 --> 00:23:22.760
the scope of the HK server object,
so I have access to

00:23:22.760 --> 00:23:23.960
its instance variables.

00:23:23.960 --> 00:23:26.540
And log level four, of course,
is our debug level.

00:23:26.560 --> 00:23:29.700
And click to automatically
continue after evaluating.

00:23:29.710 --> 00:23:33.260
But I need to take one more step here,
which is also to come down here

00:23:33.300 --> 00:23:37.550
and set another breakpoint because
I want to turn this log level off.

00:23:37.640 --> 00:23:41.000
The whole point is not to have a ton
of log messages going to the console.

00:23:41.000 --> 00:23:44.680
I only want the log
messages I care about.

00:23:44.830 --> 00:23:48.990
So again, I need to set a condition.

00:23:54.170 --> 00:23:56.360
In this condition, we'll be the same as
the one we did before.

00:23:56.360 --> 00:24:00.270
I'm going to add an action.

00:24:02.230 --> 00:24:05.340
And this action is going to be
simpler to what we did before,

00:24:05.370 --> 00:24:08.090
but this time we're in
the scope of a block,

00:24:08.200 --> 00:24:11.340
not actually in the scope
of our HK server object.

00:24:11.410 --> 00:24:13.560
And because of that,
I don't have direct access to

00:24:13.640 --> 00:24:15.340
the instance variables anymore.

00:24:15.410 --> 00:24:19.030
But I can still change the log level
because I know our connection object,

00:24:19.200 --> 00:24:21.940
which is in the scope of the block,
has a server delegate,

00:24:21.940 --> 00:24:25.350
which is my server,
and I can just call the setLogLevel

00:24:25.360 --> 00:24:29.610
method on the server object and
set the log level back to 3.

00:24:30.660 --> 00:24:33.970
I'll set to automatically continue again.

00:24:33.970 --> 00:24:36.480
And now I'm just going
to click on the map.

00:24:38.130 --> 00:24:40.820
And you'll see here that, yeah,
we wrote some data,

00:24:40.940 --> 00:24:43.900
so obviously the server thinks it's
sending something back to the client,

00:24:43.960 --> 00:24:47.320
but I'm looking at this and I can
see the number of bytes written,

00:24:47.320 --> 00:24:48.170
and it's not very much.

00:24:48.250 --> 00:24:51.540
It's certainly not enough to
actually represent an entire hike.

00:24:51.650 --> 00:24:54.830
So that makes me think that there
may be something wrong with my file.

00:24:55.150 --> 00:24:58.560
So I'm going to come into my
maps here and select the map,

00:24:58.560 --> 00:25:02.910
and sure enough, for some reason,
I have an empty KML document here.

00:25:03.150 --> 00:25:05.700
So I'm just going to delete that.

00:25:06.720 --> 00:25:10.140
Drop the correct KML data in here,
and this obviously looks

00:25:10.140 --> 00:25:12.380
like a much better data file.

00:25:12.560 --> 00:25:14.560
Save that.

00:25:14.640 --> 00:25:16.900
Request the map again.

00:25:20.810 --> 00:25:23.200
And this time you're going to see
that we actually wrote a whole

00:25:23.340 --> 00:25:25.810
bunch more data out to the client.

00:25:25.960 --> 00:25:29.220
So probably something's
going right this time.

00:25:29.220 --> 00:25:32.680
Unfortunately, I'm seeing something
else wrong on the iPad,

00:25:32.680 --> 00:25:34.300
so I'm not going to be able
to show you that trail.

00:25:34.300 --> 00:25:37.510
But with that,
I've been able to show you that

00:25:37.510 --> 00:25:42.140
without having to stop your client,
stopping your server, add a log command,

00:25:42.140 --> 00:25:44.600
recompile your server,
relaunch your server,

00:25:44.600 --> 00:25:47.480
relaunch your client, and get you back to
where you wanted to be,

00:25:47.930 --> 00:25:51.100
you've been able to see that we've been
able to get all this kind of diagnostics

00:25:51.100 --> 00:25:52.740
information out of the debugger.

00:25:52.780 --> 00:25:54.930
So with that,
I'd like to turn it back over to Ken.

00:25:54.940 --> 00:25:56.210
Thank you.

00:26:02.900 --> 00:26:05.460
Thank you, Alex.

00:26:05.460 --> 00:26:09.720
So we've seen how we can better
analyze control flow using

00:26:09.790 --> 00:26:12.410
breakpoints and breakpoint actions.

00:26:12.680 --> 00:26:16.780
Let's take a look at inspecting
our data in the variables view.

00:26:18.280 --> 00:26:22.300
So the variables view,
it gives us a window onto our application

00:26:22.300 --> 00:26:26.090
state at a given point in time.

00:26:26.530 --> 00:26:29.140
Now, there are a number of different
viewing modes that we can use

00:26:29.190 --> 00:26:30.280
when we're in the variables view.

00:26:30.280 --> 00:26:33.330
So we have the auto mode.

00:26:33.340 --> 00:26:34.240
Now, that's the default.

00:26:34.240 --> 00:26:37.160
And in this mode,
we'll try to show you only the

00:26:37.160 --> 00:26:40.530
relevant variables at the line
of code that you're stopped at.

00:26:40.650 --> 00:26:43.420
So we'll look at the context,
try to filter out the noise,

00:26:43.420 --> 00:26:45.050
and show you only the most useful stuff.

00:26:45.290 --> 00:26:46.600
Then we have the local mode.

00:26:46.710 --> 00:26:49.150
So that will show you all
the variables in local scope.

00:26:49.200 --> 00:26:50.560
And then we have all.

00:26:50.560 --> 00:26:54.180
So this will show you locals, registers,
globals.

00:26:54.680 --> 00:26:58.240
It'll be a lot of information,
but it's there if you need to access it.

00:26:59.350 --> 00:27:00.580
Then we have the variable kind.

00:27:00.850 --> 00:27:04.020
So this is a nice little icon badge
which at a glance will tell you

00:27:04.020 --> 00:27:06.040
what it is that you're looking at.

00:27:06.170 --> 00:27:11.000
So am I looking at a local, an argument,
a static, a global, a regular register,

00:27:11.240 --> 00:27:13.350
an instance variable, or an expression?

00:27:13.400 --> 00:27:16.660
So a quick glance,
you can tell what you're looking at.

00:27:16.720 --> 00:27:17.350
Then we have the name.

00:27:17.410 --> 00:27:21.820
So this is the name of your variable
as it appears inside your code.

00:27:22.290 --> 00:27:24.020
And then we have the dynamic type.

00:27:24.230 --> 00:27:28.380
So the dynamic type is the
runtime type of your object.

00:27:28.530 --> 00:27:31.820
So you may use an NSString in your code.

00:27:32.270 --> 00:27:34.070
That's the static type.

00:27:34.400 --> 00:27:40.900
But at runtime, you can see here,
like the title object is

00:27:40.900 --> 00:27:43.030
actually an __nscsString.

00:27:43.360 --> 00:27:44.440
You didn't put that in your code.

00:27:44.480 --> 00:27:47.440
That's the runtime or dynamic type.

00:27:47.560 --> 00:27:52.090
So another example of that is
maybe you're passing around

00:27:52.140 --> 00:27:54.640
a shape object in your code.

00:27:54.680 --> 00:27:56.080
That's the static type.

00:27:56.130 --> 00:27:59.310
The runtime type would be something
like a circle or a rectangle,

00:27:59.310 --> 00:28:01.300
the actual implementation.

00:28:02.420 --> 00:28:03.900
Then we have the variables value.

00:28:03.900 --> 00:28:05.980
So here it's a pointer,
but it could be something like

00:28:06.030 --> 00:28:09.100
one or 5.3 if it's a primitive.

00:28:09.150 --> 00:28:11.940
And then finally,
but certainly not least,

00:28:12.040 --> 00:28:13.700
and we'll talk about
this more in a minute,

00:28:13.750 --> 00:28:15.990
is the variable summary.

00:28:17.660 --> 00:28:20.230
Before we talk about that,
I want to show you a new feature

00:28:20.760 --> 00:28:23.670
in Xcode 4.4 in the variables view.

00:28:23.670 --> 00:28:28.960
Have you ever found yourself
in a situation like this?

00:28:28.960 --> 00:28:31.780
So here we have a method,
current process name string.

00:28:31.810 --> 00:28:34.160
And that method,
it's building up this string.

00:28:34.280 --> 00:28:36.700
So it's concatenating something together.

00:28:36.740 --> 00:28:38.330
And then it's returning that.

00:28:38.330 --> 00:28:40.710
And it's doing this all in a single line.

00:28:40.710 --> 00:28:44.130
And then the calling method,
update label,

00:28:44.130 --> 00:28:46.830
is just passing that right along.

00:28:47.030 --> 00:28:49.520
And it's passing it to another method.

00:28:49.520 --> 00:28:52.890
And at no point now do we have a
way that we can actually see the

00:28:52.890 --> 00:28:55.070
value of current process name string.

00:28:55.300 --> 00:28:58.080
Now, you may say, okay, well, yeah,
we can pull it out.

00:28:58.100 --> 00:29:00.280
We can capture that in the variable.

00:29:00.280 --> 00:29:04.080
But you shouldn't have to change
the way you're working in order

00:29:04.080 --> 00:29:05.860
to get the tools to work for you.

00:29:05.950 --> 00:29:10.750
So this is something that Xcode in
the variables view can do for you.

00:29:10.750 --> 00:29:13.300
And now in Xcode 4.4, it can.

00:29:13.520 --> 00:29:16.500
So here we can see that
if we set a breakpoint,

00:29:16.500 --> 00:29:21.710
we hit this line of code,
we press the step out button,

00:29:23.180 --> 00:29:26.810
We land in the calling line of code,
and now in the variables view,

00:29:26.810 --> 00:29:29.480
you can see that we show
you this return value.

00:29:29.500 --> 00:29:31.480
So...

00:29:37.660 --> 00:29:41.290
We're giving you access to information
that you never had before and hopefully

00:29:41.570 --> 00:29:48.140
we're shaving off one cycle on that
debugging iteration that you're doing.

00:29:50.840 --> 00:29:53.940
So now let's go back to summaries.

00:29:54.110 --> 00:29:59.620
So summaries show you the most important
piece of information about an object.

00:29:59.750 --> 00:30:02.440
Now for an NSString,
that's the character data.

00:30:02.590 --> 00:30:06.320
For an NSBundle,
it's the path to that bundle.

00:30:06.600 --> 00:30:10.760
So it's--we're surfacing
information that we think that

00:30:10.760 --> 00:30:13.850
you're probably going to need,
and we're doing that

00:30:13.850 --> 00:30:15.400
in the variables view.

00:30:15.680 --> 00:30:20.500
Now, it turns out in GDB,
we didn't actually have summaries

00:30:20.770 --> 00:30:23.000
built into the debugger itself.

00:30:23.130 --> 00:30:27.390
We provided them from Xcode,
but in order to do that,

00:30:27.620 --> 00:30:31.980
we actually had to run
code like this many times.

00:30:32.050 --> 00:30:37.670
Now, running code like this is not great,
and it's not great for a

00:30:37.670 --> 00:30:40.810
couple of different reasons.

00:30:40.810 --> 00:30:40.810
So, first,

00:30:41.230 --> 00:30:45.100
Running any code can change
the state of your application.

00:30:45.240 --> 00:30:48.650
So we're running this code
sort of behind your back,

00:30:48.650 --> 00:30:50.820
and that might have side effects.

00:30:51.040 --> 00:30:53.150
And the debugger should
never have side effects,

00:30:53.340 --> 00:30:56.580
especially when you
don't know about them.

00:30:58.530 --> 00:31:03.100
The second problem here is
that it may not always work.

00:31:03.240 --> 00:31:07.480
So we're running code,
which means we may be allocating objects.

00:31:07.580 --> 00:31:10.470
Now, if we're allocating objects,
then we need the malloc lock.

00:31:10.700 --> 00:31:13.280
If the malloc lock is
taken by another thread,

00:31:13.320 --> 00:31:16.260
then we're not going to
be able to get that lock.

00:31:16.980 --> 00:31:20.160
Fortunately, the debugger was smart
enough to notice this,

00:31:20.160 --> 00:31:23.400
and it wouldn't deadlock,
but you would end up with no

00:31:23.400 --> 00:31:25.620
summary or summary unavailable.

00:31:26.020 --> 00:31:26.810
So that's not good.

00:31:26.890 --> 00:31:29.110
That's not useful for you.

00:31:30.450 --> 00:31:35.250
Well, in LLDB, they've built summaries
directly into the debugger,

00:31:35.350 --> 00:31:38.930
and they've done so in
a very extensible way.

00:31:39.120 --> 00:31:44.600
So the summary generators actually
have access to the LLDB APIs.

00:31:44.600 --> 00:31:47.510
So they can do things
like read memory directly.

00:31:47.520 --> 00:31:51.020
And in fact, that's what the summary
for an NSString does.

00:31:51.140 --> 00:31:55.270
It knows how the class is laid out,
and then it goes in and it reads

00:31:55.270 --> 00:31:56.970
out the character data directly.

00:31:56.980 --> 00:31:59.340
And this is great for a few reasons.

00:31:59.480 --> 00:32:02.710
One, we're not running any code,
so we're not going to change

00:32:02.710 --> 00:32:03.860
the state of your program.

00:32:04.400 --> 00:32:07.450
Two, we're not running any code,
so we're not going to

00:32:07.450 --> 00:32:09.780
need to take any locks,
so it's probably going

00:32:09.780 --> 00:32:10.760
to work all the time.

00:32:10.760 --> 00:32:16.260
And three, we're not running any code,
and reading memory is way faster,

00:32:16.340 --> 00:32:19.430
so it's just an all-around win for you.

00:32:21.890 --> 00:32:25.180
Now,
we have these great summaries built in,

00:32:25.190 --> 00:32:27.640
and there's lots of built-in summaries.

00:32:27.710 --> 00:32:31.440
But like I mentioned,
it's actually a very extensible system.

00:32:31.580 --> 00:32:36.940
So now you have the ability to
write your own custom summaries,

00:32:36.990 --> 00:32:39.400
which will show up right
in the variables view.

00:32:39.480 --> 00:32:44.160
And so you can help yourself reduce
that debugging iteration cycle.

00:32:44.330 --> 00:32:47.330
And I want to show you
quickly how to do that.

00:32:47.700 --> 00:32:52.140
So the first thing you can do
is you can add a Python script.

00:32:52.260 --> 00:32:55.940
So here I've added a Python script
named custom summaries.

00:32:56.090 --> 00:32:58.210
Doesn't matter what you name it.

00:32:58.450 --> 00:33:00.740
And then you actually
need to write this script.

00:33:00.920 --> 00:33:02.340
Now,
I'm not gonna show you the whole thing,

00:33:02.340 --> 00:33:05.690
but I do want to point
out a few key pieces.

00:33:06.100 --> 00:33:09.720
So the first thing you need to do in this
Python script is you need to import LLDB.

00:33:09.870 --> 00:33:12.970
So you need access to the LLDB APIs.

00:33:13.360 --> 00:33:16.190
Now, then you need to define a function.

00:33:16.320 --> 00:33:18.200
You can call the function
whatever you want,

00:33:18.210 --> 00:33:22.200
but it's important that the function
has-- it takes two parameters.

00:33:22.200 --> 00:33:24.200
So the first parameter
is this value object.

00:33:24.200 --> 00:33:26.200
That's an SB value.

00:33:26.200 --> 00:33:28.200
So that is an LLDB API object.

00:33:28.200 --> 00:33:33.200
That represents your object at the point
where you're gonna be inspecting it.

00:33:33.200 --> 00:33:37.010
And then there's the second parameter,
which is-- that's an internal

00:33:37.010 --> 00:33:40.700
use-only LLDB parameter,
so you don't want to use that one.

00:33:41.240 --> 00:33:44.200
And now we actually need
to implement that function.

00:33:44.490 --> 00:33:48.250
So here I'm writing a
summary for an SKT circle.

00:33:48.410 --> 00:33:50.060
And I'm not going to
show you the whole thing,

00:33:50.060 --> 00:33:51.500
but I'll show you the
most important parts,

00:33:51.560 --> 00:33:53.390
which is the beginning and then the end.

00:33:53.530 --> 00:33:57.690
So what I've done is my SKT circle,
it has an IVAR.

00:33:57.960 --> 00:34:00.060
And that IVAR is underscore bounds.

00:34:00.200 --> 00:34:02.420
So I want to reach
into this value object,

00:34:02.430 --> 00:34:04.660
which represents my SKT circle.

00:34:04.660 --> 00:34:08.180
And I'm going to reach in and I'm going
to grab that underscore bounds IVAR.

00:34:08.400 --> 00:34:10.960
Then I'm going to--
that's just an NSRect.

00:34:11.060 --> 00:34:12.740
So that NSRect, of course, has a size.

00:34:12.740 --> 00:34:14.660
So I'm going to reach
in and grab the size.

00:34:14.760 --> 00:34:17.200
And then in the middle here,
I'm just doing some calculations.

00:34:17.200 --> 00:34:21.500
So I'm figuring out the major radius,
the minor radius, and the area.

00:34:21.730 --> 00:34:24.200
And then I'm building
that all into a string.

00:34:24.200 --> 00:34:25.290
And then I'm returning that.

00:34:25.440 --> 00:34:29.720
And that string that I return is what
we show you in the variables field.

00:34:29.780 --> 00:34:33.570
So it's very easy to write your
own summary without running

00:34:33.570 --> 00:34:36.910
any code and then provide that
right to the variables field.

00:34:37.060 --> 00:34:40.820
So here to give us a
demo of this is Troy.

00:34:46.010 --> 00:34:47.150
Thank you, Ken.

00:34:47.250 --> 00:34:47.900
My name is Troy.

00:34:47.900 --> 00:34:50.230
I'm an engineer on the Xcode team.

00:34:50.410 --> 00:34:54.100
The purpose for me of using a
debugger is getting information

00:34:54.350 --> 00:34:55.660
out of my application.

00:34:55.750 --> 00:34:57.860
And really the best way
to get that information is

00:34:57.860 --> 00:34:58.640
through the variables view.

00:34:58.640 --> 00:35:02.190
So I'd like to give a
demonstration of how that works.

00:35:02.360 --> 00:35:04.800
So I'm going to return to the same
application Alex was showing us.

00:35:04.930 --> 00:35:07.540
As you recall, that's a hike application.

00:35:07.540 --> 00:35:10.810
I'm going to be mostly dealing
with the client side of that.

00:35:10.890 --> 00:35:11.850
So let me get that running.

00:35:11.850 --> 00:35:14.510
Run the server.

00:35:17.640 --> 00:35:20.780
and I will run the client in that.

00:35:20.780 --> 00:35:23.630
Let's run it on the iPad.

00:35:23.630 --> 00:35:23.640
How about that?

00:35:25.210 --> 00:35:25.790
All right.

00:35:25.800 --> 00:35:27.820
So as you remember,
we click into one of these

00:35:27.890 --> 00:35:30.180
hikes and we get a hike.

00:35:30.370 --> 00:35:34.390
I would like to know in any given
map whether or not these mile marker

00:35:34.670 --> 00:35:39.620
points are being created successfully
and how many mile markers there are.

00:35:39.750 --> 00:35:42.440
So I'm going to set a
break point in Xcode.

00:35:42.510 --> 00:35:47.790
I happen to know that map is drawn
on the detail view controller,

00:35:47.790 --> 00:35:47.790
so let's use open quickly to get to that.

00:35:48.780 --> 00:35:52.800
and I'm going to use this new type
ahead filtering for the method selector

00:35:52.800 --> 00:35:58.540
to get to the configure view method
and quickly jump to that where I happen

00:35:58.540 --> 00:36:02.580
to know the points are being called.

00:36:02.740 --> 00:36:06.180
The way the points are created
is we have this parser for the

00:36:06.180 --> 00:36:07.770
KML files that Alex is showing us.

00:36:07.950 --> 00:36:11.000
And so the first thing this method
does is check for the parser.

00:36:11.060 --> 00:36:14.940
And then down here,
it queries the parser for the points.

00:36:15.010 --> 00:36:19.460
So I'm going to set a breakpoint
there and refresh the data.

00:36:23.200 --> 00:36:24.710
and hit that breakpoint.

00:36:24.710 --> 00:36:28.070
So typically when you're debugging,
you don't know exactly

00:36:28.170 --> 00:36:30.560
where you want to go,
so you set your breakpoint a step

00:36:30.810 --> 00:36:32.440
higher and then step into the method.

00:36:32.560 --> 00:36:33.960
So this is the method I want.

00:36:34.030 --> 00:36:35.870
I'm going to step into that method.

00:36:35.880 --> 00:36:36.510
All right.

00:36:36.570 --> 00:36:39.650
First thing it does is
creates a mutable array,

00:36:39.650 --> 00:36:43.660
it gets the place marks out of
our own place marks and gets a

00:36:43.860 --> 00:36:45.470
point out of that place mark.

00:36:45.470 --> 00:36:49.130
If that point is valid,
we're going to put it into the array,

00:36:49.150 --> 00:36:52.900
which it is, so that was the first
thing I wanted to know.

00:36:52.900 --> 00:36:55.080
So now I'm going to
jump out of that method.

00:36:55.080 --> 00:36:57.920
Oh,
but I forgot to know -- I forgot to find

00:36:57.920 --> 00:37:00.870
out how many points were being created.

00:37:00.870 --> 00:37:08.840
This has typically been a problem because
the object we have here is a method call,

00:37:08.840 --> 00:37:16.440
so we don't have an instance to
query in the -- to query directly.

00:37:16.450 --> 00:37:17.840
So what could you do here?

00:37:17.840 --> 00:37:19.330
You could -- You could
iterate over that loop,

00:37:19.470 --> 00:37:22.140
but that's going to be tedious,
so we're not going to do that.

00:37:22.220 --> 00:37:29.530
I could also copy this method call,
open up the console, and PO that value.

00:37:29.860 --> 00:37:33.750
But as Ken said,
that might be changing the outcome of the

00:37:33.750 --> 00:37:38.220
program running because this is a parser.

00:37:38.220 --> 00:37:40.640
It might be reparsing things.

00:37:40.640 --> 00:37:41.880
It might be changing
the number of points.

00:37:41.960 --> 00:37:43.440
So we're not going to do that either.

00:37:43.440 --> 00:37:46.520
Instead, I'd like to draw your attention
to this new return value,

00:37:46.590 --> 00:37:49.310
which shows us that it's an NSRA,
and it shows us exactly how

00:37:49.380 --> 00:37:50.740
many objects are in there.

00:37:51.840 --> 00:37:54.410
Also,
we can control-click on this and send

00:37:54.750 --> 00:37:59.030
the description of that return value
into the console so we can inspect

00:37:59.490 --> 00:38:02.930
the individual elements right there,
which can be really useful.

00:38:06.080 --> 00:38:09.600
Now I'd like to debug a real
problem in this application,

00:38:09.600 --> 00:38:10.400
a real bug.

00:38:10.490 --> 00:38:13.710
As you can see,
the master view controller

00:38:13.870 --> 00:38:16.340
on this has a distance label,
but those distances

00:38:16.500 --> 00:38:19.490
look completely wrong.

00:38:19.720 --> 00:38:24.390
I don't know exactly how far it is to
some of these central coast places,

00:38:24.390 --> 00:38:29.030
but I know 18 miles is not far enough.

00:38:29.260 --> 00:38:30.710
So what's going on here?

00:38:30.910 --> 00:38:33.600
I guess I got to go
set another breakpoint,

00:38:33.600 --> 00:38:36.340
dive in, and see how I can fix that.

00:38:36.470 --> 00:38:41.340
So that is in the master view controller,
but I know even better that cell is

00:38:41.340 --> 00:38:45.300
being created in a delegate method,
which I can jump to directly

00:38:45.360 --> 00:38:47.330
in this open quickly dialog.

00:38:47.440 --> 00:38:52.110
So that's in the table view,
cell for row.

00:38:52.350 --> 00:38:53.300
There it is.

00:38:53.360 --> 00:38:56.340
That jumps me right to the right one.

00:39:00.890 --> 00:39:05.140
So it goes through this
thing and down here,

00:39:05.140 --> 00:39:07.700
after it gets the location,
it calculates the distance.

00:39:07.700 --> 00:39:09.100
So let's set a breakpoint there.

00:39:09.140 --> 00:39:13.190
And I'll reload this data.

00:39:19.530 --> 00:39:23.300
Okay, so we have this object
which is being asked for the

00:39:23.340 --> 00:39:25.140
distance from current location.

00:39:25.140 --> 00:39:28.210
But this object is an HK map,
and as you can see down here,

00:39:28.240 --> 00:39:30.110
it's just kind of an opaque object.

00:39:30.450 --> 00:39:33.210
The only value it can
show us is the pointer.

00:39:33.390 --> 00:39:37.990
So we would really like to add a custom
summary to that to make that more useful.

00:39:40.300 --> 00:39:45.120
I happen to have a custom
Python summary over here in the project,

00:39:45.120 --> 00:39:47.290
so let's take a look at
how that's put together.

00:39:47.300 --> 00:39:51.260
First, we import the LLDB APIs,
which is important.

00:39:51.630 --> 00:39:55.300
These APIs provide us things like this
get child member with name kind of stuff.

00:39:55.300 --> 00:40:00.660
I'm not going to go through everything,
but also recognize that there's these two

00:40:00.660 --> 00:40:04.300
important parameters to this function.

00:40:04.480 --> 00:40:07.240
And down here at the bottom,
we have a special method which

00:40:07.240 --> 00:40:12.920
LLDB will call for us when we
import this Python file into LLDB.

00:40:13.510 --> 00:40:16.990
And what we want to do in
this function is add a type

00:40:16.990 --> 00:40:19.300
summary for this HKMap object.

00:40:19.300 --> 00:40:23.200
And that will tell LLDB that
whenever there's this HKMap object,

00:40:23.560 --> 00:40:26.690
use this custom summary,
and Xcode knows how to use

00:40:26.690 --> 00:40:28.300
that in the variables view.

00:40:28.500 --> 00:40:33.300
And you'll also note that it
specifies which function to call,

00:40:33.300 --> 00:40:36.170
And that's the same
name as the one up here.

00:40:38.560 --> 00:40:44.270
So let's get back to our running code.

00:40:44.380 --> 00:40:47.220
All I need to do is a command.

00:40:48.670 --> 00:40:50.840
and Alex Farley.

00:40:52.600 --> 00:40:52.840
Hi, everyone.

00:40:52.840 --> 00:40:52.840
I'm Troy Koelling.

00:40:52.890 --> 00:40:54.840
I'm the head of the Xcode
engineering team at the LLDB.

00:40:54.840 --> 00:40:56.840
I'm going to show you how to do this.

00:40:56.910 --> 00:40:58.840
I'm going to go ahead and
start with the script import.

00:40:58.860 --> 00:41:02.840
You'll notice the auto-completion,
which helps with demo mistakes.

00:41:02.840 --> 00:41:06.840
And I'm going to drag and drop that
custom hiked summary Python script in

00:41:06.840 --> 00:41:08.630
here so we get the full path to this.

00:41:08.890 --> 00:41:11.570
Now, of course,
you could drop this line into your

00:41:11.600 --> 00:41:14.830
tilde slash dot LLDB init file,
and that will initialize

00:41:14.840 --> 00:41:16.840
every time you run,
which is really helpful so you don't

00:41:16.840 --> 00:41:16.840
have to do this manually every time.

00:41:16.900 --> 00:41:17.900
But for the sake of this demo,
we're just going to do it

00:41:17.900 --> 00:41:17.900
here on the command line.

00:41:18.560 --> 00:41:23.720
Now when I open up the variables view,
the custom summary is right here,

00:41:23.850 --> 00:41:27.260
giving us latitude, longitude,
and distance.

00:41:27.480 --> 00:41:29.140
That distance doesn't
look completely right,

00:41:29.180 --> 00:41:32.380
so let me try a different map real quick.

00:41:34.230 --> 00:41:37.620
Okay,
the distance here is 315 kilometers.

00:41:37.880 --> 00:41:40.490
That's nothing like the
18 miles we were seeing.

00:41:40.630 --> 00:41:45.110
In fact, if I step over this line,
the distance,

00:41:45.150 --> 00:41:50.010
the core location distance that this
map returns is also about 315,000,

00:41:50.010 --> 00:41:51.060
this time it's in meters.

00:41:51.350 --> 00:41:54.540
So those two numbers agree,
whereas our text label

00:41:54.540 --> 00:41:56.370
was not agreeing at all.

00:41:57.000 --> 00:41:59.460
Well, the text label comes in this
next line where it creates

00:41:59.540 --> 00:42:03.400
a string from this function,
this helper function here.

00:42:03.400 --> 00:42:07.070
So let's dive into that and
see what could be going wrong.

00:42:07.400 --> 00:42:38.300
[Transcript missing]

00:42:38.500 --> 00:42:41.320
and take a look at this map data.

00:42:41.410 --> 00:42:43.740
I'll delete that one.

00:42:43.740 --> 00:42:47.380
Here we're getting closer to 200 miles,
which is much more reasonable

00:42:47.380 --> 00:42:51.920
for the amount of distance it is
from here to the Central Coast.

00:42:52.060 --> 00:42:55.900
So all because of data formatters,
we were able to find, track down,

00:42:55.900 --> 00:43:00.770
and fix a bug that would have taken
a lot longer in any other case.

00:43:01.180 --> 00:43:03.580
Now I'd like to return it to Ken.

00:43:10.100 --> 00:43:12.900
Thanks, Troy.

00:43:12.900 --> 00:43:14.190
All right,
so now I want to show you a few

00:43:14.200 --> 00:43:16.800
advanced debugging features.

00:43:16.800 --> 00:43:21.840
And the first is one
that is new in Xcode 4.4,

00:43:21.840 --> 00:43:25.030
and that's the ability to debug as root.

00:43:25.870 --> 00:43:29.720
So you may need to debug as
root if you need to launch your

00:43:29.820 --> 00:43:33.760
process as root because you
need access to privileged ports,

00:43:33.930 --> 00:43:37.150
say, so ports below 1024,
the whole class of things you

00:43:37.150 --> 00:43:38.410
may need access to as root.

00:43:38.420 --> 00:43:41.080
And now you can do that by
bringing down the scheme sheet,

00:43:41.080 --> 00:43:42.240
so you press Command-Less-Than.

00:43:42.240 --> 00:43:45.360
And then you'll notice
this new option here.

00:43:45.380 --> 00:43:47.490
So we're in the Run Action Info tab.

00:43:47.500 --> 00:43:52.180
We see this option to launch and
run as root rather than the user

00:43:52.180 --> 00:43:54.670
that I'm currently logged in as.

00:43:56.270 --> 00:44:01.020
Now, running as root is also useful
when you're debugging XPC services,

00:44:01.020 --> 00:44:04.320
because XPC services
often need privileges.

00:44:04.400 --> 00:44:07.950
That's sometimes the point
of using XPC services.

00:44:07.960 --> 00:44:10.450
And in fact,
I just want to briefly talk about them,

00:44:10.460 --> 00:44:12.010
because I know they're new,
so maybe we're not all

00:44:12.010 --> 00:44:12.940
familiar with those.

00:44:13.000 --> 00:44:20.380
So an XPC service is a way to
offload logic from your app,

00:44:20.380 --> 00:44:26.000
from your process,
and run that in another process.

00:44:26.240 --> 00:44:31.860
So in this example here, I have my app,
and now I'm calling this third-party API,

00:44:31.860 --> 00:44:34.430
which is a little bit crashy,
and then I also have this

00:44:34.430 --> 00:44:36.120
privilege stuff that I want to do.

00:44:36.120 --> 00:44:41.370
Well, it's actually much better if I can
pull that out into XPC services,

00:44:41.420 --> 00:44:45.260
because now what I can do is my
crashy bits there that I'm calling

00:44:45.260 --> 00:44:47.560
will no longer take down my app.

00:44:47.640 --> 00:44:53.590
I can then respond to the crash
of the XPC service rather than

00:44:53.610 --> 00:44:56.100
have the user see Crash Tracer.

00:44:56.200 --> 00:44:59.070
So I can react to the
crash of the XPC service,

00:44:59.150 --> 00:45:03.300
either show a message to the user
or just call the method again,

00:45:03.300 --> 00:45:03.840
try it again.

00:45:03.840 --> 00:45:06.920
Now, also, if I want to do some
privileged operations,

00:45:06.920 --> 00:45:12.030
and I don't want to escalate my
entire app to have those privileges,

00:45:12.110 --> 00:45:15.820
I can pull that all out into an
XPC service and just have that one little

00:45:15.820 --> 00:45:18.020
bit that gets escalated privileges.

00:45:18.020 --> 00:45:22.510
Now, these, by design, of course,
are running, these XPC services are

00:45:22.510 --> 00:45:24.640
running in a separate process.

00:45:24.660 --> 00:45:26.180
So you may be able to do that.

00:45:26.180 --> 00:45:28.960
You may be thinking, okay,
how am I going to debug these from Xcode?

00:45:28.960 --> 00:45:33.900
Because these processes are, in fact,
launched not by Xcode,

00:45:33.900 --> 00:45:37.200
but they're launched automatically
behind the scenes for you by LaunchD.

00:45:37.200 --> 00:45:40.720
So how is Xcode going to know about this?

00:45:40.960 --> 00:45:44.310
Well, it turns out that there's actually
a very easy workflow for this,

00:45:44.420 --> 00:45:47.890
and here to give us a demo of
that workflow and debugging

00:45:47.890 --> 00:45:49.970
as root in general is Hanming.

00:46:01.400 --> 00:46:03.640
and James Han-Minng Ong.

00:46:03.640 --> 00:46:06.900
And I'm here to show you the two
things that Ken mentioned about.

00:46:06.900 --> 00:46:10.030
We're a little bit short on time,
so let's dive right into it.

00:46:13.670 --> 00:46:16.400
So first thing I want to show
you is debugging as root.

00:46:16.400 --> 00:46:21.580
I have the map server
chosen in my scheme editor,

00:46:21.770 --> 00:46:22.840
scheme chooser.

00:46:22.980 --> 00:46:24.590
Let's go ahead and run it.

00:46:32.370 --> 00:46:35.180
So immediately you will see that
you actually have a-- you don't have

00:46:35.180 --> 00:46:37.630
permissions to run the root server,
the map server,

00:46:37.730 --> 00:46:41.880
because you don't have access to
some of the privileged assets,

00:46:41.880 --> 00:46:44.940
in this case, a port below 1024.

00:46:44.980 --> 00:46:48.190
Now, this is fairly typical
of a server that you run,

00:46:48.190 --> 00:46:51.810
because, you know,
they need access to privileged access.

00:46:51.890 --> 00:46:54.580
The reason why you're getting the
error is because-- in this case,

00:46:54.940 --> 00:46:57.980
with Xcode,
it's because Xcode set it up such

00:46:58.090 --> 00:47:01.250
that you're running as yourself,
which is the right thing to do

00:47:01.250 --> 00:47:03.190
for the majority of the time.

00:47:03.320 --> 00:47:13.380
So to fix that... we'll bring
down the Scheme Editor...

00:47:13.520 --> 00:47:17.600
for the--for this scheme,
and we'll just switch to root.

00:47:22.800 --> 00:47:26.130
So you'll be asked to
authenticate as the main user.

00:47:26.200 --> 00:47:33.190
And voila, in this case,
you're running as root now.

00:47:34.780 --> 00:47:39.020
So let me switch gears a little bit
and talk about debugging as XPC.

00:47:39.410 --> 00:47:43.610
Now, the way we wrote the map server
is that we compressed the data

00:47:43.730 --> 00:47:47.940
on the server side and sent it to
the client for efficiency reasons.

00:47:48.010 --> 00:47:51.360
So imagine this scenario that
you are given this super-duper

00:47:51.360 --> 00:47:56.500
compression library that
compresses 99.99% of the data.

00:47:56.520 --> 00:48:00.910
But you're not sure about its stability,
so you don't want to do it

00:48:00.910 --> 00:48:04.420
in such a way that if your
compression service goes down,

00:48:04.450 --> 00:48:06.060
your server goes down.

00:48:06.110 --> 00:48:09.240
Because, you know,
your server is earning you these billions

00:48:09.240 --> 00:48:13.400
of dollars that I've read about on the
internet and needs to stay up because

00:48:13.400 --> 00:48:16.610
you've got a mortgage to pay and stuff.

00:48:16.980 --> 00:48:19.200
This is a good scenario in which,
can't say you partition

00:48:19.200 --> 00:48:21.700
the XPC service out.

00:48:21.720 --> 00:48:23.940
If it crashes,
your server deals with it and, you know,

00:48:23.940 --> 00:48:25.790
use the old way.

00:48:27.870 --> 00:48:30.230
So I'm not going to go through all
the details of how we wrote it,

00:48:30.230 --> 00:48:33.560
but just want to point out a
couple of interesting things.

00:48:33.570 --> 00:48:40.140
We did it by adding a target, XPC target,
service target, to our frameworks.

00:48:40.150 --> 00:48:42.190
And you can see that Xcode
by default gives you a pretty

00:48:42.190 --> 00:48:44.040
nice XPC service bundle.

00:48:44.080 --> 00:48:45.750
We chose that.

00:48:49.740 --> 00:48:54.320
Give us a main.m file,
which is mainly boilerplates.

00:48:54.390 --> 00:48:58.430
The section you have to do
is to handle the message.

00:48:58.560 --> 00:49:03.520
In our case, we compress it up and send
it back to the caller.

00:49:05.120 --> 00:49:09.000
The color in our case is the map server.

00:49:09.020 --> 00:49:13.700
So it gets hold of the XPC servers
by its well-known name.

00:49:13.990 --> 00:49:19.820
Sensor the data and expects the
compressed bytes to come back.

00:49:20.050 --> 00:49:24.900
So I have my server running,
so let's go ahead and run the client.

00:49:55.630 --> 00:49:56.460
All right, nothing came back.

00:49:56.610 --> 00:50:01.090
So the only thing I added
was the XPC service,

00:50:01.090 --> 00:50:03.300
so I must have screwed up, right?

00:50:03.400 --> 00:50:05.720
So let's debug that.

00:50:06.130 --> 00:50:08.590
To debug the XPC service,

00:50:09.740 --> 00:50:14.660
We choose the scheme,
bring down the scheme editor.

00:50:14.740 --> 00:50:22.300
Let's choose the binary
of the XPC service.

00:50:26.700 --> 00:50:30.180
So bear in mind that the map
server is the one that's asking

00:50:30.300 --> 00:50:33.230
launchd to launch the XPC service,
and because the map

00:50:33.370 --> 00:50:36.700
server is running as root,
you need to debug as root.

00:50:36.780 --> 00:50:40.990
So Xcode in this case is not launching,
so Xcode has to wait for it.

00:50:43.160 --> 00:50:45.460
Let's go ahead and wait for it.

00:50:45.530 --> 00:50:47.380
You can see an activity viewer.

00:50:47.500 --> 00:50:49.190
That's what we're doing.

00:50:52.000 --> 00:50:54.000
Let's run the server.

00:50:54.000 --> 00:50:58.080
And let's put a break point
here where I want to debug

00:50:58.400 --> 00:51:01.070
the why is it not compressing.

00:51:01.330 --> 00:51:03.750
are sending us data back.

00:51:03.960 --> 00:51:05.960
Server is running.

00:51:05.980 --> 00:51:07.480
Let's run the client.

00:51:07.500 --> 00:51:08.980
I'm not going to switch back to the iPad.

00:51:08.980 --> 00:51:11.530
I'm just going to trigger the breakpoint.

00:51:19.960 --> 00:51:22.860
All right, so as you can see,
I've hit the breakpoint.

00:51:22.910 --> 00:51:24.330
Let's step through it.

00:51:24.570 --> 00:51:29.210
So here I'm getting the data over,
and I'm getting zero bytes.

00:51:29.430 --> 00:51:34.160
So let's see what I--
let's look at the color.

00:51:35.680 --> 00:51:37.260
Here's how I send it over.

00:51:37.360 --> 00:51:39.020
So there's a typo error.

00:51:39.040 --> 00:51:41.160
When I'm sending the bytes
over from the caller,

00:51:41.160 --> 00:51:43.540
I'm using the keyword bytes.

00:51:43.560 --> 00:51:46.110
And on the receiver, I'm using my bytes.

00:51:46.250 --> 00:51:49.900
So if you were smarter than me,
you would have to abstract this out

00:51:49.900 --> 00:51:54.980
into a .h file so that it's shared
between the caller and the colleague.

00:51:54.980 --> 00:51:56.260
Let's fix that.

00:51:56.260 --> 00:52:00.500
Recompile.

00:52:08.500 --> 00:52:19.800
[Transcript missing]

00:52:30.800 --> 00:52:33.280
Okay, let's step through.

00:52:33.280 --> 00:52:37.770
All right, this time I'm getting,
I think the right number of bytes.

00:52:39.200 --> 00:52:40.710
Continue.

00:52:40.940 --> 00:52:43.360
Switch you back to the iPad to
prove that it actually works.

00:52:43.400 --> 00:52:43.700
There you go.

00:52:43.700 --> 00:52:44.390
Here's my map.

00:52:44.590 --> 00:52:46.000
With that,
I'm going to hand you back to Ken.

00:52:46.030 --> 00:52:47.710
Thank you very much.

00:52:55.820 --> 00:52:57.560
Thank you, Han-Ming.

00:52:57.560 --> 00:53:00.590
Okay, so you can find more information
out about especially the

00:53:00.590 --> 00:53:04.390
LLDB custom summaries,
and I encourage you to check these out.

00:53:04.670 --> 00:53:07.170
This is a great way to help
yourself debug your own code.

00:53:07.200 --> 00:53:14.740
So LLDB.LVM.org,
you can find out about custom summaries,

00:53:14.740 --> 00:53:14.740
scripting, LLDB in general.

00:53:15.830 --> 00:53:18.500
There are a few related sessions,
and whether you're watching

00:53:18.500 --> 00:53:20.100
at home or whether you're here
with us at the conference,

00:53:20.100 --> 00:53:22.790
I encourage you to check these out.

00:53:24.440 --> 00:53:28.080
There are, in fact,
a couple more Xcode labs and LLDB labs.

00:53:28.160 --> 00:53:30.790
In fact, there's one right after this.

00:53:33.270 --> 00:53:37.640
So today we've seen how we can eliminate
some of the waste in our everyday,

00:53:37.660 --> 00:53:39.360
ordinary debugging.

00:53:39.660 --> 00:53:42.580
We've seen how we can more quickly
get access to the information

00:53:42.580 --> 00:53:44.440
it is that we're looking for.

00:53:44.440 --> 00:53:46.960
And I hope you can take just a
couple of the things back that

00:53:46.960 --> 00:53:50.630
we showed you and incorporate
those into your everyday workflow,

00:53:50.790 --> 00:53:52.370
and that will save you time.

00:53:52.660 --> 00:53:53.160
Thank you very much.