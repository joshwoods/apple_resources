WEBVTT

00:00:10.500 --> 00:00:13.690
My name is Joshua Pennington,
and I'm an engineer on the

00:00:13.770 --> 00:00:15.440
Interface Builder team.

00:00:15.510 --> 00:00:17.300
And today,
we're going to talk about how you

00:00:17.340 --> 00:00:20.160
can adopt Storyboards in your app.

00:00:20.510 --> 00:00:22.600
We're going to cover
a couple topics today.

00:00:22.700 --> 00:00:27.320
I'm going to start out by giving
you a quick overview of Storyboards.

00:00:27.410 --> 00:00:31.050
Then my colleague Tony is going
to come up here and talk about

00:00:31.050 --> 00:00:35.440
how you can adopt Storyboards in
applications that use CoderZibs.

00:00:35.600 --> 00:00:38.890
And then I'm going to finish
by talking about some great new

00:00:38.890 --> 00:00:41.320
features for Storyboards in iOS 6.

00:00:42.130 --> 00:00:44.200
Let's start with the basics.

00:00:44.400 --> 00:00:46.220
This is a Storyboard.

00:00:46.270 --> 00:00:51.540
And a Storyboard allows you to view your
app's entire user interface in one place.

00:00:51.580 --> 00:00:56.100
And you can also view the transitions
between the parts of your application,

00:00:56.130 --> 00:00:59.580
so you can very quickly get
an overview of the application

00:00:59.580 --> 00:01:01.160
just by glancing at it.

00:01:02.160 --> 00:01:04.170
And there are two main
concepts in a Storyboard.

00:01:04.330 --> 00:01:07.500
The first concept is that of a Scene.

00:01:07.530 --> 00:01:09.560
A Scene is a view controller.

00:01:09.610 --> 00:01:13.260
And it can represent the
entire screen in your app or

00:01:13.480 --> 00:01:16.550
just one major component area,
like a split view pane in a

00:01:16.550 --> 00:01:19.220
split view controller on iPad.

00:01:20.950 --> 00:01:22.060
And you can drag in views.

00:01:22.070 --> 00:01:23.780
You can select things and resize them.

00:01:23.930 --> 00:01:26.460
You can inspect their
attributes in the inspector.

00:01:26.600 --> 00:01:30.900
So all of the normal interface
builder affordances are present here.

00:01:32.360 --> 00:01:34.750
And this is where you're going to
spend most of your time flushing

00:01:34.750 --> 00:01:36.180
out the UI of your application.

00:01:36.340 --> 00:01:38.900
So that's the first concept, a Scene.

00:01:40.670 --> 00:01:42.740
The second concept is that of a Segway.

00:01:42.820 --> 00:01:46.340
A Segway defines navigation
in your Storyboard.

00:01:46.470 --> 00:01:48.400
Shows you how to get from point A to B.

00:01:50.210 --> 00:01:52.500
And you create a Segway by
picking an event source,

00:01:52.500 --> 00:01:55.580
like a button or a table view cell,
and then choosing the Scene that

00:01:55.580 --> 00:01:57.420
you would like to transition to.

00:01:57.500 --> 00:02:17.000
[Transcript missing]

00:02:17.330 --> 00:02:20.760
Now, another important concept
in an application is

00:02:21.170 --> 00:02:23.540
passing information around.

00:02:23.580 --> 00:02:26.360
I have this list of events,
and when the user taps

00:02:26.530 --> 00:02:29.000
on one of the events,
I want it to display a map view

00:02:29.010 --> 00:02:31.270
controller that shows the event.

00:02:31.380 --> 00:02:34.720
In defining this navigation
in the Storyboard as a breeze,

00:02:34.720 --> 00:02:39.180
we just create a segue from the cell
to the scene that we want to display.

00:02:39.530 --> 00:02:42.050
When this Segway runs,
what we want to do is pass

00:02:42.210 --> 00:02:45.450
some information along so
we can know what to display.

00:02:45.680 --> 00:02:47.530
We've got a method for that.

00:02:47.570 --> 00:02:48.400
Prepare for Segway.

00:02:48.490 --> 00:02:52.300
This is a method on UI View Controller,
and it's intended to be overridden.

00:02:52.300 --> 00:02:54.980
We'll give it a call on
the Source View Controller,

00:02:54.980 --> 00:02:59.800
and you can write code here that will
take effect whenever the Segway fires.

00:03:01.720 --> 00:03:03.590
So, whenever the Segway runs,
we'll call that method,

00:03:03.590 --> 00:03:06.870
and you can pass along any
information that you need to display

00:03:06.890 --> 00:03:09.060
in the Destination View Controller.

00:03:10.620 --> 00:03:13.820
So, let's take a look at what this
looks like inside of an application.

00:03:17.890 --> 00:03:17.890
All right, so let's open that up.

00:03:19.110 --> 00:03:21.640
Let's go into full screen mode.

00:03:21.670 --> 00:03:25.540
And here in my Storyboard,
I have three scenes.

00:03:25.580 --> 00:03:28.240
The first scene is a
navigation controller.

00:03:28.310 --> 00:03:31.730
This is a standard UIKit object
that manages a stack of view

00:03:31.730 --> 00:03:35.100
controllers that have been presented,
and then also manages the

00:03:35.100 --> 00:03:41.270
transition between these scenes
with a nice push animation.

00:03:41.630 --> 00:03:45.250
It also draws the nav bar at the top
that gives us a title and a back button.

00:03:45.260 --> 00:03:48.170
The second scene is a list of events.

00:03:48.200 --> 00:03:50.700
And I'm using a table view for this.

00:03:50.700 --> 00:03:54.540
And so at runtime,
I have some code that looks in a database

00:03:54.540 --> 00:03:58.380
and it makes a number of copies of
this prototype cell that I've defined.

00:03:58.380 --> 00:04:00.450
We'll talk more about
table views in a bit.

00:04:00.470 --> 00:04:04.370
And the last scene I have
is a map view controller.

00:04:04.370 --> 00:04:08.960
And you'll notice if I zoom in here,
You can zoom in on storyboards

00:04:08.960 --> 00:04:12.210
and double tap to zoom back in.

00:04:12.300 --> 00:04:15.260
In the left,
I have a Segway connecting the Navigation

00:04:15.260 --> 00:04:17.340
Controller to the list of events.

00:04:17.450 --> 00:04:20.600
This is a type of a Segway
called a Relationship Segway.

00:04:20.720 --> 00:04:23.460
And it simply defines the
root view controller property

00:04:23.460 --> 00:04:25.780
on the Navigation Controller.

00:04:25.890 --> 00:04:28.260
And so this kind of just
bootstraps the process.

00:04:28.510 --> 00:04:31.200
So when the Navigation
Controller is displayed,

00:04:31.200 --> 00:04:33.120
the scene comes along with it.

00:04:33.360 --> 00:04:37.800
The second segue connects the list
of events to the map view controller.

00:04:37.920 --> 00:04:40.720
And this segue is linked
up to that table view cell,

00:04:40.850 --> 00:04:44.440
so whenever it's tapped,
we slide across to the map.

00:04:44.570 --> 00:04:47.880
What I'd like to do is add a second
scene that's going to display

00:04:47.880 --> 00:04:49.780
information about the event.

00:04:49.840 --> 00:04:51.860
I want to display the details about it.

00:04:51.980 --> 00:04:55.060
And I'd like this segue to be
triggered when the user taps on the

00:04:55.060 --> 00:04:59.160
little blue arrow on the side of it,
like the phone application.

00:05:00.160 --> 00:05:01.100
So I'm going to create a new scene.

00:05:01.160 --> 00:05:05.070
And I create a scene just by dragging
a view controller from the library

00:05:05.070 --> 00:05:07.690
and dropping it on the canvas,
like this.

00:05:07.900 --> 00:05:10.780
So I'm just going to give us a
little bit of room here and drag

00:05:10.800 --> 00:05:13.360
out a new table view controller.

00:05:15.160 --> 00:05:17.790
I can create a Segway by
control-dragging from the

00:05:17.790 --> 00:05:20.710
TableView cell and choosing this scene.

00:05:20.920 --> 00:05:23.750
You can see here that
it's presented a list,

00:05:23.750 --> 00:05:25.720
and there's two sections in this list.

00:05:25.780 --> 00:05:29.420
The first one says "Selection
Segway," and it has a number

00:05:29.540 --> 00:05:31.140
of Segway types below that.

00:05:31.210 --> 00:05:35.120
And this is called the "trigger."
So this would let me create a Segway

00:05:35.120 --> 00:05:39.060
that's going to be fired when a normal
tap takes place on the TableView cell.

00:05:39.160 --> 00:05:43.030
And we've already got one of these
wired up to the Event Map Controller.

00:05:43.160 --> 00:05:46.890
The second section says "Accessory
Action." And this is what's going

00:05:46.890 --> 00:05:50.190
to happen whenever the user taps
on the Accessory Action area.

00:05:50.320 --> 00:05:51.680
And we want to create one of those.

00:05:51.770 --> 00:05:54.260
So I'm going to choose a new Push Segway.

00:05:58.100 --> 00:06:01.970
So you can see that we now have a segue
that's going from that table view cell

00:06:02.310 --> 00:06:04.160
to the scene that we just created.

00:06:04.160 --> 00:06:07.520
And we also still have that
normal selection segue wired

00:06:07.680 --> 00:06:09.720
up to the map view controller.

00:06:09.840 --> 00:06:12.080
So let's customize this
scene that we created.

00:06:12.270 --> 00:06:13.680
I'm going to give it a title.

00:06:13.680 --> 00:06:16.110
I'm just going to call it Details.

00:06:16.820 --> 00:06:19.460
And I have a table view below that.

00:06:19.550 --> 00:06:21.540
And table views come in two flavors.

00:06:21.680 --> 00:06:25.370
We have a prototype-based table view,
which is where you have one

00:06:25.370 --> 00:06:28.640
or more prototype cells that
you assign identifiers to.

00:06:28.750 --> 00:06:30.880
And then at runtime,
you write code that asks

00:06:31.100 --> 00:06:33.570
for copies of these cells,
which you then customize

00:06:33.570 --> 00:06:34.960
with the information.

00:06:35.000 --> 00:06:38.090
And this is fantastic for things
like news feeds or emails,

00:06:38.090 --> 00:06:41.850
where you have a dynamic number of
items that you'd like to display.

00:06:42.230 --> 00:06:45.250
The second type of table view
is called a static table view.

00:06:45.260 --> 00:06:49.580
And a static table view allows you to
define the data set entirely in IB.

00:06:49.580 --> 00:06:53.860
So for things like menus where
you may already know exactly how

00:06:53.880 --> 00:06:56.720
many things you'd like to display,
this works out great.

00:06:56.780 --> 00:06:58.970
It also works out great if you have,
you know,

00:06:58.970 --> 00:07:00.930
something like details for an event.

00:07:00.980 --> 00:07:03.260
I already know I have two
rows I'd like to display.

00:07:03.260 --> 00:07:05.600
So I'm going to use a
static table view for this.

00:07:05.720 --> 00:07:09.370
And I can change this table view
to static by clicking on it.

00:07:09.940 --> 00:07:12.990
And in the attributes inspector,
changing its content from dynamic

00:07:12.990 --> 00:07:14.470
prototypes to static cells.

00:07:17.100 --> 00:07:20.220
I can select a cell and hit delete.

00:07:20.420 --> 00:07:25.280
I can also command click on this
other cell and select both of them.

00:07:25.310 --> 00:07:26.440
I actually selected its parent there.

00:07:26.440 --> 00:07:29.000
Let me try that again.

00:07:29.040 --> 00:07:29.380
All right.

00:07:29.430 --> 00:07:32.900
And TableView cells have a
number of built-in styles.

00:07:32.900 --> 00:07:35.850
I'm going to choose the right
detail style so we can get two

00:07:35.850 --> 00:07:37.920
nice columns with information.

00:07:37.930 --> 00:07:41.300
And I'm going to select
these labels on the right,

00:07:41.300 --> 00:07:45.280
or on the left actually,
and type in some information.

00:07:45.280 --> 00:07:46.900
I'm going to call this author name.

00:07:47.100 --> 00:07:51.780
And for the second row,
this is going to display the date.

00:07:53.490 --> 00:07:55.810
And while I'm at it,
I think that the style would look

00:07:55.860 --> 00:07:59.600
better if it was set to grouped,
so I'm going to change that as well.

00:08:00.200 --> 00:08:30.800
[Transcript missing]

00:08:32.590 --> 00:08:35.740
So now when this controller is created,
it's going to be an

00:08:35.740 --> 00:08:37.470
instance of that subclass.

00:08:37.700 --> 00:08:40.850
So we've got this segue that
hooks up to this controller,

00:08:40.850 --> 00:08:43.360
and the controller knows
how to display an event.

00:08:43.370 --> 00:08:45.420
We just need to give it an event now.

00:08:45.510 --> 00:08:47.530
So we're going to use that
method that we talked about a

00:08:47.530 --> 00:08:49.890
bit ago called prepareForSegue.

00:08:49.920 --> 00:08:52.970
And prepareForSegue is going
to run on that list of events

00:08:53.160 --> 00:08:54.880
whenever this segue is initiated.

00:08:55.140 --> 00:08:58.250
So we're going to put some
code there that's going to pass

00:08:58.250 --> 00:09:00.300
this event model object along.

00:09:00.320 --> 00:09:03.400
And whenever you write a
prepareForSegue implementation,

00:09:03.420 --> 00:09:06.760
you're going to look for
identifiers on the segues.

00:09:06.790 --> 00:09:09.920
And the identifier is just a string,
so we're going to

00:09:09.920 --> 00:09:11.500
assign one to the segue.

00:09:11.560 --> 00:09:14.280
And segues are just like
any other object in IB.

00:09:14.310 --> 00:09:16.390
You can select one.

00:09:17.590 --> 00:09:20.200
In the Inspector, assign attributes.

00:09:20.200 --> 00:09:23.190
I'm going to call this "Show Details."

00:09:24.690 --> 00:09:27.900
And if I hop over to the subclass
for the Events View Controller,

00:09:27.950 --> 00:09:31.360
I can implement Prepare for Segway.

00:09:31.410 --> 00:09:34.510
I'm going to use the jump bar
to move over to that file.

00:09:35.200 --> 00:09:38.740
And you can see that I already have
an implementation of prepare for

00:09:38.740 --> 00:09:42.950
segue here that finds the event that
goes along with the cell that was

00:09:43.020 --> 00:09:45.400
selected and sends that to the map.

00:09:45.510 --> 00:09:49.370
I'm going to paste in another
fragment that does the same thing

00:09:49.370 --> 00:09:51.510
but for the show detail segue.

00:09:52.520 --> 00:09:55.440
So once again,
this just looks at the list of events,

00:09:55.520 --> 00:09:58.520
finds the correct one,
and sets that on a property on

00:09:58.520 --> 00:10:00.340
the destination view controller.

00:10:00.550 --> 00:10:03.150
Let's hit Build and
Run and see what we have.

00:10:03.380 --> 00:10:08.380
Okay, so we've got a list of events,
and when I tap on one of the events,

00:10:08.460 --> 00:10:11.980
a map is displayed showing
the event's location.

00:10:12.030 --> 00:10:14.000
I can hit the back button
and go back to the list.

00:10:14.000 --> 00:10:18.250
And if I tap on the detailed disclosure
button on the right-hand side,

00:10:18.250 --> 00:10:20.840
that second segue is fired.

00:10:20.840 --> 00:10:26.040
We load the information and customize
it for the event that was selected.

00:10:27.840 --> 00:10:31.520
So you can see that we were very quickly
able to create a UI for our application

00:10:31.520 --> 00:10:35.610
using these two main concepts,
and using that prepare for segue method

00:10:35.610 --> 00:10:38.210
as a glue to pass some information along.

00:10:38.210 --> 00:10:42.590
And this is the basis of how you'll
build any application using a Storyboard.

00:10:44.580 --> 00:10:47.940
So, I'm going to invite Tony up,
and he's going to talk about

00:10:47.940 --> 00:10:51.500
how you can mix Storyboards
with existing applications that

00:10:51.500 --> 00:10:53.380
are using code or ZIP files.

00:10:53.430 --> 00:10:54.500
Tony?

00:10:54.530 --> 00:10:58.890
Thanks, Joshua.

00:11:01.020 --> 00:11:01.970
Good afternoon.

00:11:02.140 --> 00:11:04.550
My name is Tony Ricciaardi,
and I'm also an engineer on

00:11:04.550 --> 00:11:06.970
the Interface Builder team.

00:11:08.210 --> 00:11:11.670
In the app Joshua just showed you,
the UI was implemented entirely

00:11:11.670 --> 00:11:15.500
within a single Storyboard document,
and that document served as the

00:11:15.620 --> 00:11:17.790
entry point to the application.

00:11:17.950 --> 00:11:22.270
Now I'd like to show you a few ways
you can integrate Storyboards into

00:11:22.270 --> 00:11:27.050
your app when you'd prefer to implement
certain parts of your UI and code.

00:11:27.780 --> 00:11:30.990
First, I'll show you how you can
combine views from Storyboards

00:11:31.100 --> 00:11:33.240
with views implemented in code.

00:11:33.240 --> 00:11:37.030
And then I'll show you a couple ways
you can customize transitions between

00:11:37.030 --> 00:11:39.470
scenes in your Storyboard using code.

00:11:39.990 --> 00:11:41.990
Let's start with an example.

00:11:42.190 --> 00:11:43.000
This is my game.

00:11:43.210 --> 00:11:45.010
It's called Dungeon Plunder.

00:11:45.120 --> 00:11:49.040
It's a retro role-playing
game that I've implemented

00:11:49.040 --> 00:11:51.730
entirely in code using OpenGL.

00:11:51.830 --> 00:11:54.150
In this game,
you explore this dungeon and you

00:11:54.150 --> 00:11:58.560
collect treasure and you fight monsters
that you encounter along the way.

00:11:58.680 --> 00:12:02.500
And today,
I'd like to add a new feature to this

00:12:02.630 --> 00:12:06.700
game that lets me browse through my
character's inventory and see all the

00:12:06.700 --> 00:12:09.330
items I've collected in this dungeon.

00:12:09.930 --> 00:12:14.260
I'd really like to implement this
inventory screen using a new feature

00:12:14.260 --> 00:12:16.900
of UIKit called Collection View.

00:12:16.940 --> 00:12:21.810
A Collection View is like a table view
in that it manages a collection of cells

00:12:21.990 --> 00:12:25.410
and also gives you a lot of freedom
with how you can layout those cells.

00:12:25.710 --> 00:12:28.580
In this case,
I'd like to use a two-dimensional

00:12:28.640 --> 00:12:30.310
grid layout like this.

00:12:31.030 --> 00:12:34.670
In Xcode, we're making it very easy to
design collection views in

00:12:34.720 --> 00:12:37.140
Storyboards with Interface Builder.

00:12:37.240 --> 00:12:41.260
And so I'd like a way to implement
this new inventory screen with a

00:12:41.270 --> 00:12:46.350
Storyboard and then wire it up to the
rest of my app without going back and

00:12:46.380 --> 00:12:49.120
reimplementing all my old UI code.

00:12:49.290 --> 00:12:53.040
So I can do that using
the Storyboard API.

00:12:53.410 --> 00:12:56.110
First,
there's a class method on UIStoryboard

00:12:56.350 --> 00:12:59.180
called StoryboardWithNameBundle.

00:12:59.400 --> 00:13:04.310
And that just lets me load a Storyboard
document at any point in code.

00:13:04.740 --> 00:13:08.770
And then I can call a method on
that Storyboard called Instantiate

00:13:08.790 --> 00:13:10.850
Initial View Controller.

00:13:11.190 --> 00:13:16.220
And that gives me a copy of the initial
view controller of that Storyboard.

00:13:16.220 --> 00:13:20.670
The initial view controller is the
entry point into the Storyboard,

00:13:20.930 --> 00:13:26.100
and it's generally the root
scene in your scene graph.

00:13:26.100 --> 00:13:30.650
And that view controller I get back
is indistinguishable at runtime

00:13:30.660 --> 00:13:35.410
from any other view controller that
I would create in code normally.

00:13:37.530 --> 00:13:40.840
So now I'm going to show you a demo
where I integrate that new feature

00:13:40.840 --> 00:13:42.400
into my app using a Storyboard.

00:13:42.530 --> 00:13:45.080
Okay, so this is my Xcode project.

00:13:45.160 --> 00:13:49.980
And you can see I've already added
that Storyboard to my project.

00:13:50.050 --> 00:13:52.120
But I haven't yet wired it
up to the rest of my app.

00:13:52.170 --> 00:13:55.280
And before I do that,
I just want to hit Build and Run.

00:13:55.380 --> 00:13:57.620
So let me quit the simulator.

00:13:57.620 --> 00:14:04.060
I'll just hit Build and Run so
you can see what that currently

00:14:04.060 --> 00:14:05.300
does before I make any changes.

00:14:07.400 --> 00:14:13.300
I need to do a clean build.

00:14:20.300 --> 00:14:45.700
[Transcript missing]

00:14:45.920 --> 00:14:48.700
So in this Storyboard,
I have three scenes.

00:14:48.810 --> 00:14:50.880
On the left,
I have my navigation controller,

00:14:50.880 --> 00:14:53.790
which controls the navigation stack.

00:14:54.200 --> 00:15:11.400
[Transcript missing]

00:15:11.780 --> 00:15:14.670
So that's all already been implemented,
and I just want to wire it up.

00:15:14.910 --> 00:15:18.610
So I'm going to go over
to my AppDelegate file.

00:15:21.470 --> 00:15:23.820
And now we're in
Application Did Finish Launching

00:15:23.820 --> 00:15:24.680
with Options.

00:15:24.820 --> 00:15:27.020
And in here,
I just create the view controllers

00:15:27.100 --> 00:15:32.240
for my tabs and add them to
this array of view controllers

00:15:32.350 --> 00:15:35.410
managed by the tab bar controller.

00:15:36.390 --> 00:15:40.010
So I'm going to paste in
a couple lines of code.

00:15:40.010 --> 00:15:42.780
And these lines just
use the API I discussed.

00:15:42.810 --> 00:15:45.400
The first line loads
the Storyboard document,

00:15:45.450 --> 00:15:49.990
and the second line creates a copy
of the initial view controller.

00:15:51.130 --> 00:15:55.070
Now all I have to do is add that
view controller to this array,

00:15:55.120 --> 00:15:55.960
and I'll hit Build and Run.

00:15:55.960 --> 00:15:59.950
And you can see I have that third tab.

00:16:02.350 --> 00:16:08.500
I can tap on a cell and see the
details using that detail screen.

00:16:10.380 --> 00:16:13.780
So as I mentioned before,
I really wanted to have this inventory

00:16:13.860 --> 00:16:17.680
screen laid out using a two-dimensional
grid instead of this single column

00:16:17.680 --> 00:16:20.020
that I have here with a table view.

00:16:20.270 --> 00:16:23.570
So to do that, I'm going to go back to my
project and swap out the table

00:16:23.630 --> 00:16:25.830
view with a collection view.

00:16:32.500 --> 00:16:35.780
First thing I'll do is delete
the table view controller.

00:16:35.780 --> 00:16:40.110
And I'll open the library and drag
out a collection view controller.

00:16:43.860 --> 00:16:47.740
So collection views in Interface
Builder are very similar to table views.

00:16:47.760 --> 00:16:49.860
They have this notion
of a prototype cell,

00:16:49.870 --> 00:16:53.780
which is this square you see up here.

00:16:53.900 --> 00:17:11.400
[Transcript missing]

00:17:11.530 --> 00:17:13.350
That's going to show an image of my item.

00:17:13.440 --> 00:17:16.550
So I'll just drag out an image
view and add it to the cell.

00:17:18.300 --> 00:17:20.990
At runtime when I create
copies of this cell,

00:17:20.990 --> 00:17:23.610
I need a way to reference
that image view.

00:17:23.640 --> 00:17:28.060
And I can do that by creating a custom
subclass of UICollectionViewCell

00:17:28.070 --> 00:17:30.400
that has an outlet to an image view.

00:17:30.440 --> 00:17:32.720
I've already done that,
and I'll just show you

00:17:32.750 --> 00:17:34.360
that class really quickly.

00:17:35.610 --> 00:17:40.340
So that's all we have here is a
subclass of UI Collection ViewCell

00:17:40.380 --> 00:17:43.310
that has an outlet to an ImageView.

00:17:43.560 --> 00:17:46.250
So now I'm going to go
back to my Storyboard.

00:17:46.580 --> 00:17:51.700
I'll open up the outline
so I can select the cell,

00:17:51.840 --> 00:17:54.560
and I'm going to give
it that custom class.

00:17:56.600 --> 00:17:59.610
Now I can wire up the outlet
by control dragging from the

00:17:59.630 --> 00:18:02.060
cell over to the image view.

00:18:05.320 --> 00:18:09.650
I also need some code to actually
go and create the copies at runtime,

00:18:09.650 --> 00:18:12.740
and that is all implemented
in my custom subclass of

00:18:13.010 --> 00:18:16.880
UI Collection View Controller.

00:18:17.260 --> 00:18:19.630
Let's look at that code.

00:18:24.800 --> 00:18:33.320
So this method here is part of the
UI Collection View Data Source Protocol.

00:18:33.410 --> 00:18:37.750
It's called Collection View Cell for
Item at Index Path.

00:18:37.860 --> 00:18:41.260
And all I do in this method is
create a copy of my prototype,

00:18:41.300 --> 00:18:44.060
which I reference using
a reuse identifier,

00:18:44.150 --> 00:18:46.280
which I call inventory cell.

00:18:46.330 --> 00:18:48.990
And then I just set
the image of that cell.

00:18:50.900 --> 00:18:53.290
So I'm going to go back to
Interface Builder and give the

00:18:53.300 --> 00:18:57.590
cell this reuse identifier so
that I can refer to it at runtime.

00:18:57.670 --> 00:18:58.800
So the cell's already selected.

00:18:58.800 --> 00:19:03.760
I'll just go to the attribute
inspector and call it inventory cell.

00:19:06.040 --> 00:19:09.320
I'm also going to need to give
this CollectionViewController

00:19:09.580 --> 00:19:13.800
a custom subclass so that that
data source method gets called.

00:19:17.810 --> 00:19:23.000
Now I want to add a header view to this
collection view that shows up above

00:19:23.030 --> 00:19:26.170
each section of items and just says
what kind of items are in that section,

00:19:26.170 --> 00:19:28.980
like weapons, armor, potions.

00:19:28.980 --> 00:19:32.480
And I'm going to do that the
same way I designed the cell.

00:19:32.480 --> 00:19:36.040
So in Interface Builder,
we also have the notion of a prototype

00:19:36.040 --> 00:19:39.770
section header view for collection
views that use a flow layout,

00:19:39.770 --> 00:19:42.620
which gives you that
two-dimensional grid.

00:19:44.950 --> 00:19:48.060
So I can select the collection view
and go to the attributes inspector

00:19:48.340 --> 00:19:49.560
and give it a section header.

00:19:49.560 --> 00:19:55.170
I'm just going to add a
label to that header view.

00:19:58.220 --> 00:20:01.890
I'll give it some white
text so we can see it,

00:20:01.890 --> 00:20:04.150
and I'll make it a little bigger.

00:20:06.700 --> 00:20:09.640
And now I'm going to do the
same thing I did for this cell.

00:20:09.650 --> 00:20:12.390
I have a custom subclass.

00:20:14.490 --> 00:20:21.370
UI Collection Reusable View,
which just has an outlet to a label.

00:20:21.610 --> 00:20:25.720
And I'm going to go and set that as
the custom class of my header view.

00:20:30.400 --> 00:20:33.480
Now I can control drag from
the header view over to the

00:20:34.330 --> 00:20:36.540
label and wire up that outlet.

00:20:39.700 --> 00:20:42.250
If we take another
look at my data source,

00:20:42.330 --> 00:20:48.210
my collection view controller,
you'll see I have this other method here.

00:20:49.740 --> 00:20:51.690
I'm going to show you a
tutorial called Collection View,

00:20:51.700 --> 00:20:55.680
View for Supplementary
Element of Kind at IndexPath,

00:20:55.680 --> 00:20:59.700
which creates copies of that
prototype header view I created.

00:20:59.700 --> 00:21:04.990
And I reference it using this
reuse identifier inventory header.

00:21:06.170 --> 00:21:11.600
So I'll go back and give that reuse
identifier to the header view.

00:21:12.810 --> 00:21:15.980
Now I need to wire up some segues.

00:21:16.020 --> 00:21:19.170
I want to make this
Collection View Controller the root view

00:21:19.170 --> 00:21:25.300
controller of my Navigation Controller,
so I'll drag out a Relationship Segway.

00:21:26.550 --> 00:21:28.470
And you can see when I do that,
I get a nav bar,

00:21:28.510 --> 00:21:29.570
which I can give a title.

00:21:29.660 --> 00:21:31.680
I'll call it inventory.

00:21:33.900 --> 00:21:38.330
I also want to make a push segue
from the cell to the detail screen,

00:21:38.390 --> 00:21:42.080
so that when the user taps on the cell,
they see those details.

00:21:42.080 --> 00:21:48.290
So I'll select the cell
and drag out a push

00:21:52.700 --> 00:22:08.700
[Transcript missing]

00:22:13.100 --> 00:22:31.800
[Transcript missing]

00:22:33.130 --> 00:22:36.340
In this code,
all I do is set the title and image

00:22:36.370 --> 00:22:41.330
and the attributes that's going
to show up in that detail screen.

00:22:41.430 --> 00:22:48.020
So I need to go back and give
this identifier to that segue.

00:22:48.070 --> 00:22:51.850
I'll just select the segue
and call it item detail.

00:22:57.200 --> 00:23:00.910
Okay, now I'll hit Build and Run.

00:23:01.000 --> 00:23:04.450
And let's take another look
at the inventory screen.

00:23:04.610 --> 00:23:07.920
You can see now I've swapped out the
table view for the collection view,

00:23:07.940 --> 00:23:10.340
but I still have all
the same data show up.

00:23:10.370 --> 00:23:14.730
And I can tap on a cell and
see the details for that item.

00:23:23.100 --> 00:23:26.500
There's just one more thing I'd like
to add to this inventory screen.

00:23:26.820 --> 00:23:30.570
I'd really like a way to know where
I found this item in the dungeon.

00:23:30.770 --> 00:23:32.840
Down the line,
I might be running low on potions

00:23:32.900 --> 00:23:35.560
and I need to find some more.

00:23:35.560 --> 00:23:38.150
And it might be useful to know
where I found this potion so

00:23:38.150 --> 00:23:39.450
I can go look in the same area.

00:23:39.750 --> 00:23:44.480
So I'd like a button that shows up on
this screen that I can tap and it'll

00:23:44.480 --> 00:23:49.700
take me back over to this map screen
and show me where I found that item.

00:23:49.710 --> 00:23:51.690
So let's go add that.

00:23:54.460 --> 00:23:58.000
I mentioned earlier that that
map view was implemented in code.

00:23:58.150 --> 00:24:01.360
So I need a way to wire up a
segue from my detail screen over

00:24:01.360 --> 00:24:05.440
to that map view controller while
having it load its view from code

00:24:05.440 --> 00:24:07.580
rather than from the Storyboard.

00:24:07.820 --> 00:24:10.140
Well, it's actually very easy to do that.

00:24:10.220 --> 00:24:15.010
If I set the custom class of a view
controller in my Storyboard and that

00:24:15.010 --> 00:24:20.060
custom class overrides load view,
then at runtime when I reach that scene,

00:24:20.220 --> 00:24:23.010
I'm going to execute
that load view method,

00:24:23.010 --> 00:24:25.290
which loads the view from code.

00:24:25.500 --> 00:24:44.800
[Transcript missing]

00:24:46.300 --> 00:25:01.900
[Transcript missing]

00:25:04.830 --> 00:25:08.140
This first scene will represent
the Game View Controller.

00:25:08.180 --> 00:25:10.570
This will represent the
Map View Controller.

00:25:10.680 --> 00:25:15.070
And I'm going to wire up a third
relationship segue here for

00:25:15.070 --> 00:25:17.790
the Inventory View Controller.

00:25:21.290 --> 00:25:23.940
So let's zoom in on
the GameViewController.

00:25:23.980 --> 00:25:26.160
As I mentioned,
I already override LoadView in

00:25:26.160 --> 00:25:30.450
my GameViewController class,
so I just need to set the custom

00:25:30.450 --> 00:25:32.390
class of this ViewController.

00:25:35.700 --> 00:25:38.770
And I can just delete this
view since it won't be loaded

00:25:38.770 --> 00:25:40.580
from the Storyboard anyway.

00:25:40.580 --> 00:25:44.350
So now what we have here is a
scene with a view controller

00:25:44.350 --> 00:25:46.700
but no view in the Storyboard.

00:25:46.700 --> 00:25:50.800
I'm also going to
customize its tab bar item.

00:25:52.200 --> 00:25:54.840
I'll give it an image.

00:25:55.220 --> 00:25:56.530
There we go.

00:25:57.000 --> 00:25:59.960
And I'll do the same thing
for the map view controller.

00:25:59.960 --> 00:26:06.800
Delete its root view and
give it a custom class.

00:26:06.800 --> 00:26:10.180
And I'll customize its tab bar item.

00:26:19.880 --> 00:26:23.130
Now I want to add that button
from this detail screen over

00:26:23.290 --> 00:26:26.000
to my map view controller.

00:26:28.100 --> 00:26:32.590
Let's zoom in on the detail
screen and I'll add a button

00:26:32.610 --> 00:26:35.840
and I'll call it location found.

00:26:43.120 --> 00:26:45.860
I'll wire up a segue from
the button over here,

00:26:45.930 --> 00:26:47.980
make it a push segue.

00:26:47.990 --> 00:26:51.480
I'll rearrange these scenes a little bit.

00:26:55.270 --> 00:26:59.130
So now I need to go back and
delete that code that previously

00:26:59.130 --> 00:27:03.540
created the tab bar controller and
those two other view controllers,

00:27:03.540 --> 00:27:07.740
and then load the tab bar controller
from the Storyboard instead.

00:27:07.860 --> 00:27:10.650
So let's go back to the AppDelegate file.

00:27:12.400 --> 00:27:16.800
I'm just going to select
all this code and delete it.

00:27:16.860 --> 00:27:18.520
Then paste in two lines.

00:27:18.520 --> 00:27:21.940
The first one loads the Storyboard
and the second one sets the tab

00:27:21.940 --> 00:27:24.970
bar controller as the initial
view controller of the Storyboard.

00:27:25.020 --> 00:27:28.970
I'm going to hit build and run now.

00:27:30.600 --> 00:27:33.540
And you can see I have the same
functionality I had before,

00:27:33.560 --> 00:27:37.420
but now these view controllers are
being loaded from the Storyboard instead

00:27:37.420 --> 00:27:39.870
of using that code I had previously.

00:27:40.330 --> 00:27:43.700
So you can see my map screen that
shows me my character's location,

00:27:43.740 --> 00:27:50.050
and I can tap on an item and reuse
that same scene in the Storyboard,

00:27:50.150 --> 00:27:53.240
create a separate copy using that segue.

00:27:53.260 --> 00:27:56.760
And now this shows,
now using that to prepare for segue

00:27:56.760 --> 00:28:02.050
method on my detail view controller,
I passed along the location of the item.

00:28:07.230 --> 00:28:11.080
So in that example,
I showed you how I could combine views.

00:28:11.260 --> 00:28:14.750
I could integrate this Storyboard,
this new feature for the Storyboard

00:28:14.750 --> 00:28:18.940
into my app while still using my
views that I implemented in code.

00:28:19.050 --> 00:28:23.790
And I could also load those
code-based views from the Storyboard,

00:28:23.920 --> 00:28:29.060
which let me visualize the entire flow
of my application without reimplementing

00:28:29.060 --> 00:28:31.220
the UI for those old features.

00:28:31.570 --> 00:28:34.390
Now I'm going to show you a few
ways you can use code to customize

00:28:34.390 --> 00:28:37.450
transitions between scenes.

00:28:39.010 --> 00:28:42.260
Let's say I wanted to add a
game over screen to my app.

00:28:42.380 --> 00:28:49.130
I wanted to present this view when my
character's life total went down to zero.

00:28:49.770 --> 00:28:52.840
Normally, you would create a segue by
dragging out a connection from

00:28:52.840 --> 00:28:54.940
the triggering UI element,
like a button,

00:28:54.970 --> 00:28:56.940
over to the destination scene.

00:28:57.080 --> 00:28:59.870
But in this case,
there's no UI element that's

00:28:59.870 --> 00:29:01.780
going to trigger the segue.

00:29:01.900 --> 00:29:06.120
I want it triggered by custom logic,
when I know that my character's

00:29:06.120 --> 00:29:08.400
life total goes down to zero.

00:29:08.520 --> 00:29:10.810
So I need to create what
we call a manual segue,

00:29:11.040 --> 00:29:15.400
and I do that by dragging out from
the ViewController's icon in the

00:29:15.640 --> 00:29:18.140
dock over to the destination scene.

00:29:18.170 --> 00:29:20.340
And then in code,
at the appropriate time,

00:29:20.340 --> 00:29:24.010
I can trigger the segue by calling
a method on UIViewController

00:29:24.560 --> 00:29:27.950
called performSegueWithIdentifier.

00:29:27.950 --> 00:29:30.340
And that identifier is
just a string constant.

00:29:30.340 --> 00:29:33.450
I give the segue an interface builder.

00:29:36.300 --> 00:29:40.180
Now let's say that you have a
scene in your Storyboard that

00:29:40.250 --> 00:29:44.620
represents an error handling view,
and you want to present this

00:29:44.620 --> 00:29:47.690
whenever there's a problem
communicating with the server.

00:29:47.930 --> 00:29:51.970
Your app might have 300 different
places where you talk to the server,

00:29:51.970 --> 00:29:57.130
and you need a way to present this
screen from an arbitrary line of code

00:29:57.150 --> 00:30:00.200
where you might not have a reference
to a view controller and be able to

00:30:00.200 --> 00:30:02.520
call perform segue with identifier.

00:30:02.730 --> 00:30:06.610
So you need a way to jump to
this scene without a segue.

00:30:06.930 --> 00:30:10.500
You can do that by giving
the view controller an

00:30:10.550 --> 00:30:13.070
identifier in the Storyboard,

00:30:13.190 --> 00:30:16.740
And then calling a method
on UI Storyboard called

00:30:16.800 --> 00:30:19.810
InstantiateViewControllerWithIdentifier.

00:30:20.580 --> 00:30:26.060
And that just lets you hop to any scene
in your graph without using a segue.

00:30:28.750 --> 00:30:32.090
So before Josh comes back up here,
I just want to recap a few of the

00:30:32.090 --> 00:30:36.510
techniques I showed you for integrating
Storyboards into your app while

00:30:36.510 --> 00:30:39.760
implementing custom behavior and code.

00:30:40.130 --> 00:30:44.400
First, you can mix views from
Storyboards with views from code,

00:30:44.730 --> 00:30:48.220
either by loading a Storyboard
from code or by having your view

00:30:48.220 --> 00:30:52.790
controllers in your Storyboard
load their views from code.

00:30:52.960 --> 00:30:56.090
I also showed you a couple ways
you can customize transitions,

00:30:56.230 --> 00:31:01.450
either by triggering segues manually
using perform segue with identifier,

00:31:01.450 --> 00:31:05.110
or by jumping directly to
scenes using instantiate view

00:31:05.110 --> 00:31:07.290
controller with identifier.

00:31:08.320 --> 00:31:11.290
Now Josh is going to come back up here
and talk about some cool new features

00:31:11.300 --> 00:31:13.540
we're adding to Storyboards in iOS 6.

00:31:13.580 --> 00:31:14.950
Josh.

00:31:17.600 --> 00:31:20.090
Thanks, Tony.

00:31:20.240 --> 00:31:22.080
Thank you, Tony.

00:31:22.220 --> 00:31:28.110
So, let's talk about some of the new
features in iOS 6 for Storyboards.

00:31:28.180 --> 00:31:32.280
We've got a couple new ways that you
can use Storyboards in your apps.

00:31:32.340 --> 00:31:35.500
And let's talk about View Controllers.

00:31:35.620 --> 00:31:38.990
So View Controllers are an
essential part of any app,

00:31:39.010 --> 00:31:44.450
and they're also that first important
concept seen in a Storyboard.

00:31:44.790 --> 00:31:47.300
And they're sometimes used in isolation.

00:31:47.480 --> 00:31:50.640
You might have one for an
entire screen worth of content,

00:31:50.650 --> 00:31:53.770
and you'll use something like a
navigation controller or a tab bar

00:31:53.810 --> 00:31:55.470
controller to manage the display of them.

00:31:55.470 --> 00:31:58.080
However,
sometimes you want to display a view

00:31:58.170 --> 00:32:00.580
controller inside of a view controller.

00:32:00.580 --> 00:32:05.030
So if you wanted to do
this in some applications,

00:32:05.030 --> 00:32:08.750
you might use it for something
like you've got Chrome around the

00:32:08.750 --> 00:32:10.520
edge of a navigation controller.

00:32:10.520 --> 00:32:14.680
So you can use view controller
containment APIs added in iOS files.

00:32:14.700 --> 00:32:16.690
to achieve this.

00:32:17.010 --> 00:32:20.090
If you wanted to do this today,
you would assign an

00:32:20.120 --> 00:32:22.100
identifier to a scene.

00:32:22.150 --> 00:32:26.290
You'd write a bunch of code to
make a copy of it and use the

00:32:26.290 --> 00:32:31.730
containment APIs to install it
inside of another view controller.

00:32:32.580 --> 00:32:34.360
But you have to write
a lot of code for this,

00:32:34.360 --> 00:32:38.830
and you don't get to position
the view in Interface Builder.

00:32:39.030 --> 00:32:43.030
So today, with iOS 6,
you can create embed segues.

00:32:43.090 --> 00:32:47.080
You just drop in a container
view and wire up an embed segue.

00:32:47.120 --> 00:32:50.100
And when your view controller loads,
you automatically have another

00:32:50.100 --> 00:32:52.500
view controller inside of it.

00:32:52.540 --> 00:32:53.220
And that's it.

00:32:53.350 --> 00:32:56.120
There's no code for this.

00:32:56.120 --> 00:32:57.840
Thanks.

00:32:58.400 --> 00:33:00.240
I'm pretty excited about this too.

00:33:00.350 --> 00:33:03.480
So let's hop over and
take a look at this.

00:33:03.540 --> 00:33:07.040
And I've got this app I wrote
earlier for looking at information

00:33:07.370 --> 00:33:09.430
about the gross domestic product.

00:33:09.500 --> 00:33:12.020
I'm an economics nerd,
so I like this stuff.

00:33:12.100 --> 00:33:14.910
And I've got three
scenes in my Storyboard.

00:33:14.910 --> 00:33:16.680
I've got a nav controller.

00:33:16.680 --> 00:33:18.740
You guys all know about that.

00:33:18.860 --> 00:33:20.530
I've got a list of states.

00:33:20.530 --> 00:33:24.040
And on the right-hand side,
I've got a detail view controller.

00:33:24.040 --> 00:33:26.560
This is a pretty standard
master detail app.

00:33:26.800 --> 00:33:30.660
And what I'd like to do is have
a map on that very last scene.

00:33:30.700 --> 00:33:34.580
But I have this map view controller
that I always use in my projects

00:33:34.700 --> 00:33:39.240
because it knows how to do stuff like
display a highlight region and display

00:33:39.240 --> 00:33:42.440
annotations and a bunch of other complex
stuff that I don't want to duplicate

00:33:42.440 --> 00:33:44.050
in every single view controller.

00:33:44.050 --> 00:33:47.430
And I want to use this view
controller inside of that other one.

00:33:47.440 --> 00:33:51.510
So I'm going to use the new
embed segue to take care of that.

00:33:51.600 --> 00:34:04.500
[Transcript missing]

00:34:06.000 --> 00:34:49.000
[Transcript missing]

00:34:49.360 --> 00:34:53.210
And let's take a look at that
subclass I'm talking about.

00:34:53.450 --> 00:34:55.280
So I've got a pretty
straightforward class here.

00:34:55.460 --> 00:34:56.900
I've got two properties.

00:34:56.930 --> 00:35:00.720
I've got an outlet to a map view,
so we can wire up a map view.

00:35:00.780 --> 00:35:04.580
And I've got another property that
specifies the highlight region.

00:35:04.640 --> 00:35:08.200
And this just takes an object that
conforms to a protocol that has some

00:35:08.200 --> 00:35:10.740
basic points to outline the shape.

00:35:10.840 --> 00:35:13.660
So I'm going to go back to Interface
Builder and add a map view,

00:35:13.660 --> 00:35:15.050
and we'll wire that up.

00:35:15.150 --> 00:35:19.240
So let's hop back over to the
Storyboard using the jump bar.

00:35:19.290 --> 00:35:22.700
And I'm going to drag in a map view.

00:35:27.960 --> 00:35:30.140
I'm going to hook up
that map view outlet.

00:35:30.140 --> 00:35:35.620
And so now we've got a
view controller that,

00:35:35.640 --> 00:35:38.050
if I hit Build and Run,
would be embedded inside of

00:35:38.050 --> 00:35:40.500
that container view controller.

00:35:41.070 --> 00:35:43.930
What I'd like to do is pass
that highlight region along.

00:35:44.120 --> 00:35:48.460
So I'm going to give that segue an
identifier and then implement prepare

00:35:48.550 --> 00:35:52.290
for segue on the detail scene so
I can pass that information along.

00:35:52.400 --> 00:35:57.680
So I'm going to click on the segue
and type in embed map controller

00:35:57.850 --> 00:36:02.160
and hop over to the subclass for
the detail view controller and

00:36:02.160 --> 00:36:05.080
paste in a bit of code that I wrote.

00:36:05.330 --> 00:36:09.410
And what this does is it looks
for the identifier and it passes

00:36:09.410 --> 00:36:14.060
along the detail item that I'm
inspecting as the highlight region.

00:36:14.140 --> 00:36:17.830
And so this is just a model object
that represents the state and

00:36:17.830 --> 00:36:19.860
it conforms to that protocol.

00:36:19.960 --> 00:36:23.550
So I'm going to hit build and run and
we can take a look at this in action.

00:36:26.990 --> 00:36:29.560
So you can see that
I have a list of states,

00:36:29.560 --> 00:36:33.080
and when I tap on one,
the map view controller is installed

00:36:33.550 --> 00:36:35.430
and displays the highlight region.

00:36:35.550 --> 00:36:38.620
So we're able to very quickly
have a view controller inside of

00:36:38.620 --> 00:36:42.180
another view controller and not
have to write a single line of code

00:36:42.350 --> 00:36:45.200
except for that for customizing it.

00:36:45.300 --> 00:36:48.400
So I'm going to hop
back over to the slides.

00:36:49.900 --> 00:38:21.500
[Transcript missing]

00:38:22.320 --> 00:38:25.200
I've got this application here,
and it has a couple scenes

00:38:25.200 --> 00:38:28.800
that the user can navigate
through to create an account.

00:38:28.820 --> 00:38:31.270
And when they're done,
they have the option to hit

00:38:31.270 --> 00:38:35.050
Done and dismiss the form sheet,
or hit Reset and go back to

00:38:35.190 --> 00:38:39.060
the beginning of the sheet to
re-enter in their account details.

00:38:39.370 --> 00:38:41.340
In my Storyboard, it looks like this.

00:38:41.350 --> 00:38:46.080
I've got a scene that presents a
navigation controller and a form sheet.

00:38:46.300 --> 00:39:28.300
[Transcript missing]

00:39:29.330 --> 00:39:31.800
And so we do this by
adding unwind actions,

00:39:31.800 --> 00:39:36.310
which are a new type of Ivy action,
to your view controller subclasses.

00:39:36.310 --> 00:39:40.440
And these serve the purpose of
declaring points of interest for you

00:39:40.440 --> 00:39:42.710
to roll back to in your application.

00:39:42.750 --> 00:39:46.000
So you'd add an unwind action
like done or reset to your

00:39:46.050 --> 00:39:48.000
view controller subclasses.

00:39:48.000 --> 00:39:53.560
And then we display these as destinations
in Xcode when you go to create a segue.

00:39:54.770 --> 00:39:59.880
And so we do this by
adding unwind actions,

00:40:00.040 --> 00:40:09.310
which are a new type of Ivy action,
to your view controller subclasses.

00:40:09.310 --> 00:40:19.820
And then we display these as destinations
in Xcode when you go to create a segue.

00:40:20.040 --> 00:40:24.640
And whenever you connect to that,
we'll display a list of unwind actions.

00:40:24.760 --> 00:40:28.700
So in the case of reset,
I would connect to that and choose reset.

00:40:28.890 --> 00:40:31.540
So now we have an unwind segue.

00:40:31.660 --> 00:40:34.970
And when that unwind segue fires,
the first thing that we're going

00:40:35.110 --> 00:40:36.780
to do is find the destination.

00:40:36.960 --> 00:40:41.720
So we'll walk up the chain of
presented items until we find a match.

00:40:42.020 --> 00:40:45.090
At which point, we'll call prepare for
segue in the source.

00:40:45.210 --> 00:40:47.780
So in the case of the example,
the confirmation view controller

00:40:47.780 --> 00:40:50.700
will receive prepare for segue.

00:40:50.800 --> 00:40:53.470
Then the destination's
unwind action will be ran,

00:40:53.590 --> 00:40:56.670
so it gets a chance to
prepare for the segue.

00:40:56.770 --> 00:40:58.640
And then we actually
trigger the navigation.

00:40:58.760 --> 00:41:01.580
So in the case of a
modal view controller,

00:41:01.580 --> 00:41:05.720
we'd call dismissModalViewController,
and it would go away.

00:41:05.890 --> 00:41:09.290
So let's talk a bit
about the search order.

00:41:09.430 --> 00:41:12.580
There's a little bit to it
besides just walking up the chain.

00:41:12.710 --> 00:41:16.590
So when the reset button fires,
we're going to start by asking the

00:41:16.650 --> 00:41:20.460
source view controller if it would
like to handle the unwind action.

00:41:20.540 --> 00:41:23.680
And we have a new method
on UIViewController called

00:41:23.840 --> 00:41:26.400
canPerformUnwindSegueAction.

00:41:26.450 --> 00:41:28.400
And by default,
this does the right thing.

00:41:28.690 --> 00:41:31.170
So it just looks at the
receiver and checks to see if

00:41:31.300 --> 00:41:33.090
it has implemented the method.

00:41:33.220 --> 00:41:35.670
So in this case,
if it had a method called reset,

00:41:35.810 --> 00:41:39.530
this would return yes,
and we'd declare it as the destination.

00:41:39.630 --> 00:41:43.330
If you're doing something special,
like if you have a social network

00:41:43.430 --> 00:41:47.660
app that has three view controllers
that all have the same unwind action,

00:41:47.710 --> 00:41:50.620
and you've presented them in a row,
you can use the information that we

00:41:50.620 --> 00:41:55.400
supply in this method to disambiguate
and return the appropriate result.

00:41:55.440 --> 00:41:59.000
But for the primary case,
you don't have to do anything here.

00:41:59.110 --> 00:42:03.040
So in the case of the confirmation sheet,
it doesn't implement reset.

00:42:03.190 --> 00:42:05.850
So we know that this
is not the destination.

00:42:05.900 --> 00:42:09.940
At this point, we're going to step up to
the parent view controller.

00:42:10.010 --> 00:42:12.440
That's the navigation
controller in this app.

00:42:12.490 --> 00:42:16.210
And it has a responsibility to search
through its presented controllers to

00:42:16.320 --> 00:42:19.980
find a match for the unwind action.

00:42:19.980 --> 00:42:21.980
So we're going to click on
View Controller for this.

00:42:21.980 --> 00:42:24.430
And if you're using the
built-in UIKit containers

00:42:24.520 --> 00:42:27.660
like UI Navigation Controller,
you don't have to do anything here.

00:42:27.660 --> 00:42:29.600
It just does the right thing.

00:42:29.730 --> 00:42:32.250
If you are creating a custom
container that uses the view

00:42:32.290 --> 00:42:35.370
controller containment APIs,
you'll want to override this

00:42:35.370 --> 00:42:38.850
and search your child view
controllers until you find a match.

00:42:40.130 --> 00:42:42.910
So,
Navigation Controller is going to search

00:42:43.240 --> 00:42:45.130
the controllers that it's presented.

00:42:45.280 --> 00:42:48.880
It checks the next controller,
which doesn't implement reset,

00:42:48.950 --> 00:42:50.230
so it returns no.

00:42:50.720 --> 00:42:53.850
We then try the next one,
which has a method called reset.

00:42:54.020 --> 00:42:57.190
So we're going to pick
this as the destination.

00:42:57.730 --> 00:43:00.240
So at this point,
we need to actually get an

00:43:00.240 --> 00:43:03.030
object to perform the navigation.

00:43:03.420 --> 00:43:06.150
If you're using the built-in
kit provided controllers,

00:43:06.150 --> 00:43:09.160
this method is already implemented,
so you don't have to think about it.

00:43:09.180 --> 00:43:11.800
If you're creating a custom container,
you'll want to override this

00:43:11.970 --> 00:43:16.130
to return an object that will
perform the appropriate navigation.

00:43:16.290 --> 00:43:19.350
So whatever type of transition
is appropriate for your custom

00:43:19.360 --> 00:43:22.080
container will be taken care of here.

00:43:23.130 --> 00:43:26.910
So the Navigation Controller chooses
to return an object that we'll

00:43:27.280 --> 00:43:30.230
call PopToViewControllerAnimated.

00:43:30.230 --> 00:43:33.300
And at this point,
we'll call PrepareForSegue

00:43:33.360 --> 00:43:37.220
on the SourceViewController
so it can fix up any state.

00:43:37.330 --> 00:43:42.190
We then call the Unwind action on
the destination so it can customize.

00:43:42.300 --> 00:43:45.700
And then we perform the navigation,
which causes, in this case,

00:43:45.790 --> 00:43:48.400
Pop the View Controller to be called.

00:43:48.610 --> 00:43:52.180
We'd do a similar search for the done
unwind action whenever that happens,

00:43:52.300 --> 00:43:55.570
except that we'd go one more hop up
the chain until we found a match.

00:43:55.580 --> 00:43:57.420
So, that's the theory.

00:43:57.420 --> 00:44:00.230
Let's go look in the app and
see how it actually happens.

00:44:00.280 --> 00:44:02.650
Okay, so I've got a project here.

00:44:02.660 --> 00:44:03.850
Here we go.

00:44:04.400 --> 00:44:32.500
[Transcript missing]

00:44:33.090 --> 00:44:39.070
So I'm going to go to the reset
controller and paste in a bit of code.

00:44:43.200 --> 00:44:45.440
With Unwind Actions,
there's just two pieces

00:44:45.440 --> 00:44:46.400
that we care about.

00:44:46.570 --> 00:44:50.370
We care that their return type is
IB Action and that the argument

00:44:50.380 --> 00:44:52.900
is typed UI Storyboard Segway.

00:44:52.950 --> 00:44:56.210
We look for these in Xcode
to add them to the list.

00:44:56.340 --> 00:45:00.560
And whenever your Unwind Action fires,
you can do whatever you want in there.

00:45:00.560 --> 00:45:03.610
You can pull information back
from the Segway because you

00:45:03.610 --> 00:45:07.460
have access to the source or the
place that you're unwinding from.

00:45:07.460 --> 00:45:10.280
And you can also fix up any
state on the controller.

00:45:10.280 --> 00:45:13.160
In the case of reset,
I'm going to reset some fields

00:45:13.160 --> 00:45:16.630
that the user has entered in
so they can start over again.

00:45:16.630 --> 00:45:21.000
So let's add another Unwind
Action to the very first controller.

00:45:21.000 --> 00:45:27.190
This is what's going to happen
when the Done Action fires.

00:45:28.360 --> 00:45:30.500
And we do a little bit more here.

00:45:30.550 --> 00:45:33.330
What we do is we access the
destination view controller

00:45:33.820 --> 00:45:37.180
of the source view controller.

00:45:37.220 --> 00:45:39.880
And that is the confirmation sheet.

00:45:40.090 --> 00:45:43.180
And when I wrote this app,
I made a property on the confirmation

00:45:43.180 --> 00:45:46.890
sheet that wraps up the account
information that the user's entered in.

00:45:47.010 --> 00:45:49.760
So I'm just going to pull that
back and use it in the app.

00:45:49.890 --> 00:45:54.520
And I also update UI to show a success
view so the user gets a bit of feedback.

00:45:54.780 --> 00:45:59.940
So we have these unwind actions so we
can find places to unwind to at runtime.

00:46:00.110 --> 00:46:03.170
So let's go back to the
Storyboard and add unwind segues

00:46:03.430 --> 00:46:04.430
that target these actions.

00:46:04.530 --> 00:46:06.980
I'm going to go back over here.

00:46:08.650 --> 00:46:12.070
Go to the Storyboard.

00:46:12.290 --> 00:46:17.800
And I can create the unwind segue by
Control-dragging to the exit icon.

00:46:17.830 --> 00:46:21.480
And you can see that it's
populated that list with the unwind

00:46:21.480 --> 00:46:23.950
actions that we created earlier.

00:46:24.110 --> 00:46:29.260
So I'm going to choose
Reset for this one.

00:46:29.460 --> 00:46:33.300
Then I'm going to do the same
for the Done unwind action.

00:46:37.740 --> 00:46:42.880
So now, when I hit Build and Run,
we can take a look and see what we get.

00:46:44.160 --> 00:46:47.730
So I've got this app here and
when I hit add an account,

00:46:47.730 --> 00:46:53.100
I can step through the sheet here
and fill out the information.

00:46:53.100 --> 00:46:56.380
And when I hit reset,

00:46:57.090 --> 00:46:59.340
We slide back to that first controller.

00:46:59.470 --> 00:47:02.320
So it walked up the chain of
controllers until it found

00:47:02.580 --> 00:47:04.300
something that implemented a reset.

00:47:04.370 --> 00:47:07.950
And then we ran the reset action,
and it reset any information

00:47:07.950 --> 00:47:09.030
that was present.

00:47:09.130 --> 00:47:12.610
So let's go back and do the
same thing for the done action.

00:47:13.700 --> 00:47:55.400
[Transcript missing]