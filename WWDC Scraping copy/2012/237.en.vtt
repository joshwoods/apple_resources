WEBVTT

00:00:10.300 --> 00:00:11.340
Good afternoon.

00:00:11.380 --> 00:00:12.760
Welcome to session 237.

00:00:12.760 --> 00:00:13.730
My name is Mark Piccirelli.

00:00:13.740 --> 00:00:16.620
I'm an engineer in the
Cocoa Frameworks Group.

00:00:16.810 --> 00:00:21.590
Today I'm going to talk about
advanced iCloud document storage.

00:00:22.800 --> 00:00:25.390
And what I mean by that,
if you were looking at our documentation,

00:00:25.410 --> 00:00:27.650
you know there's iCloud Storage,
which includes iCloud

00:00:27.650 --> 00:00:29.710
Document Storage and
also Key-Value Storage.

00:00:29.870 --> 00:00:33.310
Not going to be doing any talking
about Key-Value Storage today.

00:00:33.480 --> 00:00:36.070
Interestingly enough,
from the title of the session,

00:00:36.070 --> 00:00:39.480
I'm actually not going to talk
about documents at all either today.

00:00:39.550 --> 00:00:45.440
iCloud Document Storage is what we call
the ability to store files in iCloud.

00:00:53.670 --> 00:00:53.730
And I'm not going to talk
about storing what the user

00:00:53.730 --> 00:00:53.730
thinks of his files in iCloud.

00:00:53.730 --> 00:00:53.730
I'm going to talk about
shoebox applications.

00:00:54.410 --> 00:00:57.130
So what do we mean by
a shoebox application?

00:00:57.330 --> 00:01:01.240
Well, many applications, of course,
do not deal in documents.

00:01:01.240 --> 00:01:06.090
They show the user their data,
but they don't reveal that the

00:01:06.140 --> 00:01:08.970
data is stored in files on disk.

00:01:09.030 --> 00:01:13.830
So popular examples are
things like iPhoto and iTunes.

00:01:13.980 --> 00:01:16.180
So-- and we call them this informally.

00:01:16.180 --> 00:01:18.750
It's an informal term and we tried
to make formal term but we couldn't,

00:01:18.760 --> 00:01:19.850
so we just stick with this.

00:01:19.980 --> 00:01:23.410
It's like a shoebox of pictures or tapes.

00:01:23.700 --> 00:01:26.940
What's interesting from the point of
view of this talk is that I'm going to

00:01:26.940 --> 00:01:31.320
be talking about the kind of applications
where you don't get to use AppKit's

00:01:31.320 --> 00:01:37.160
NSDocument class or UIKit's UIDocument
class because those provide a model.

00:01:37.160 --> 00:01:39.500
It's very useful,
but it's just not appropriate

00:01:39.600 --> 00:01:42.320
for most kinds of what we
call shoebox applications.

00:01:44.000 --> 00:02:45.200
[Transcript missing]

00:02:46.330 --> 00:02:52.150
So file coordination in the context
of iCloud Document Storage is

00:02:52.150 --> 00:02:54.960
pretty important because
iCloud Document Storage,

00:02:54.960 --> 00:02:59.000
maybe more than anywhere else,
introduces multiple processes

00:02:59.030 --> 00:03:00.600
accessing the same file.

00:03:00.600 --> 00:03:03.320
Of course,
there have always been situations

00:03:03.320 --> 00:03:06.490
where multiple processes
are accessing the same file,

00:03:06.620 --> 00:03:09.600
but now with iCloud,
they're really going at it.

00:03:09.640 --> 00:03:12.610
iCloud is downloading things to
disk while your application is

00:03:12.680 --> 00:03:14.660
showing those things on disk to user.

00:03:15.390 --> 00:03:18.480
Of course, when I say disk,
I also mean SSD about half the time.

00:03:23.170 --> 00:03:44.090
- But since these introduce a situation,
we have to deal with problems like

00:03:44.090 --> 00:03:44.090
the fact that one process writing
a file while another is reading

00:03:44.090 --> 00:03:44.090
is bad because the process that's
reading might read inconsistent

00:03:44.090 --> 00:03:44.090
or incomplete contents because the
first process is still writing stuff.

00:03:44.090 --> 00:03:44.090
So it begs the question,
how does a process know when

00:03:44.090 --> 00:03:44.090
it is safe to read or write?

00:03:44.270 --> 00:03:47.040
Another thing that comes up is the
fact that iCloud changes files and

00:03:47.080 --> 00:03:48.790
then your application must read them.

00:03:48.800 --> 00:03:53.980
It automatically downloads data from
the network and leaves the files on

00:03:53.980 --> 00:03:58.340
disk and then your application has to
bounce that up and show it to the user.

00:03:58.480 --> 00:04:00.490
So we need an answer to the question,
how does a process

00:04:00.620 --> 00:04:01.560
know when it must read?

00:04:04.160 --> 00:04:09.210
and one last thing is that iCloud
needs your files up to date on

00:04:09.210 --> 00:04:11.250
disk to do conflict detection.

00:04:11.410 --> 00:04:13.880
So in the example I showed
you of a picture editor,

00:04:13.880 --> 00:04:20.240
when the user's editing things
like the rating or adding keywords

00:04:20.300 --> 00:04:24.340
on there or something like that,
there are times where iCloud needs you

00:04:24.490 --> 00:04:28.220
to stamp that stuff on disk because
it needs to read it immediately.

00:04:28.260 --> 00:04:31.380
So we need an answer to the question,
how does the process

00:04:31.380 --> 00:04:33.150
know when it must write?

00:04:33.980 --> 00:04:37.240
And the answer to all these
questions is file coordination,

00:04:37.270 --> 00:04:40.720
which number one is a locking
mechanism in that it prevents your

00:04:40.730 --> 00:04:45.100
application from reading while
iCloud writes and vice versa,

00:04:45.120 --> 00:04:46.380
and actually also vice versa.

00:04:46.380 --> 00:04:50.140
So this is not totally novel.

00:04:50.140 --> 00:04:54.080
There have been plenty of locking
mechanisms in the history of computers.

00:04:54.080 --> 00:04:57.440
But file coordination is also a
notification mechanism in that

00:04:57.440 --> 00:05:00.990
it tells your application when
iCloud changes have happened.

00:05:01.800 --> 00:05:04.740
And once again, this is not the first
time this has happened.

00:05:04.740 --> 00:05:11.740
There's FS events, there's KQs,
and there's Vino dispatch sources.

00:05:11.740 --> 00:05:15.380
But one good thing is that this is all
one mechanism and it helps us avoid a lot

00:05:15.380 --> 00:05:17.420
of race conditions and things like that.

00:05:17.420 --> 00:05:21.690
But the most novel aspect of it is
that it's also a triggering mechanism.

00:05:21.970 --> 00:05:25.000
In that when something like
iCloud reads or writes files,

00:05:25.000 --> 00:05:27.560
your application gets a
chance to do things first.

00:05:27.560 --> 00:05:28.950
So that's kind of new.

00:05:29.170 --> 00:05:31.620
The File Coordination
API takes the form of,

00:05:31.620 --> 00:05:34.640
number one,
a class called NSFileCoordinator,

00:05:34.640 --> 00:05:39.940
which you instantiate on the basis of,
you know, one per fairly large-scale

00:05:39.970 --> 00:05:42.670
file operation,
like saving a big batch of changes or

00:05:42.670 --> 00:05:44.580
moving the file or something like that.

00:05:44.600 --> 00:05:49.020
You instantiate it and then you use
it to do coordinated file access.

00:05:49.370 --> 00:05:52.700
The other big piece of the API is
a protocol called NSFilePresenter,

00:05:52.700 --> 00:05:56.100
and it's a protocol that you
implement in your application

00:05:56.100 --> 00:06:00.050
to hear about coordinated file
access done by other processes

00:06:00.140 --> 00:06:02.190
that are using NSFileCoordinator.

00:06:04.500 --> 00:06:07.610
So, and I mentioned NSDocument and
UIDocument do a bunch of stuff for you,

00:06:07.610 --> 00:06:10.250
you know, in applications where
those are applicable.

00:06:10.260 --> 00:06:12.190
This is one of the big
things they do for you.

00:06:12.190 --> 00:06:15.500
They implement the
NSFilepresenter protocol for you.

00:06:18.000 --> 00:06:39.800
[Transcript missing]

00:06:40.100 --> 00:06:43.640
So I'm not going to go through all
the NSFileCoordinator API at all.

00:06:43.640 --> 00:06:46.370
Just for people who are brand new to it,
I'm just going to give a

00:06:46.370 --> 00:06:47.200
little introduction here.

00:06:47.200 --> 00:06:50.960
These are the two most
unsurprising methods in the class.

00:06:50.960 --> 00:06:56.310
CoordinateReadingItemAtURL and
CoordinateWritingItemAtURL.

00:06:56.500 --> 00:07:58.100
[Transcript missing]

00:07:59.660 --> 00:08:04.320
So the NSFilePresenter, half of the API,
there's two main ways to use it.

00:08:04.370 --> 00:08:08.370
The first one is that you register a
file presenter of an individual file.

00:08:08.370 --> 00:08:14.040
So, you know,
you instantiate some class of your own.

00:08:14.040 --> 00:08:17.900
It could be the application delegate,
for example, and you invoke a method

00:08:17.900 --> 00:08:19.140
add file presenter.

00:08:19.140 --> 00:08:22.940
And when you do that, from then on,
while you're registered,

00:08:22.970 --> 00:08:27.080
you'll hear about the file being
changed by other processes and also

00:08:27.100 --> 00:08:29.420
being moved by other processes.

00:08:29.600 --> 00:08:30.700
Thank you.

00:08:31.580 --> 00:08:33.550
So you'll also get asked to save changes.

00:08:33.550 --> 00:08:36.840
I'll tell you in a little bit why
iCloud might ask you to save changes,

00:08:36.840 --> 00:08:39.120
but the idea is that
this is very generic.

00:08:39.120 --> 00:08:41.810
So you're not even really
supposed to care why you're

00:08:41.810 --> 00:08:43.400
being asked to save changes.

00:08:43.590 --> 00:08:46.340
Just that, you know,
the contract is that you have a file

00:08:46.340 --> 00:08:50.060
presenter and if you're letting the
user edit what's being presented,

00:08:50.060 --> 00:08:52.760
when you're asked to,
you write that to disk.

00:08:52.820 --> 00:08:56.860
You might also be asked to do what
we call accommodating deletion.

00:08:56.860 --> 00:08:59.640
And accommodate is an
intentionally generic term.

00:08:59.640 --> 00:09:00.760
What do you mean accommodate?

00:09:00.940 --> 00:09:02.740
Well, it depends on your application.

00:09:02.830 --> 00:09:05.230
You know,
very often it means stop presenting that

00:09:05.270 --> 00:09:07.420
file to the user because it's going away.

00:09:07.420 --> 00:09:09.470
And if that's something
that's selected in the UI,

00:09:09.470 --> 00:09:11.860
you know, select something else,
the next thing in the list

00:09:11.860 --> 00:09:12.700
or something like that.

00:09:12.910 --> 00:09:15.840
And a somewhat more abstract concept
is that you might be asked to

00:09:15.840 --> 00:09:17.630
relinquish to readers and writers.

00:09:17.730 --> 00:09:21.090
And I'll talk about that in a little bit.

00:09:21.740 --> 00:09:24.130
So the other thing you can
do with NSFilePrecenter,

00:09:24.220 --> 00:09:27.790
even though its name is NSFilepresenter,
it's actually kind of abbreviation

00:09:27.790 --> 00:09:31.120
for NSFile or FilePackage or
other kind of directory presenter.

00:09:31.120 --> 00:09:34.800
You can register a file presenter
of an entire directory tree to find

00:09:34.800 --> 00:09:38.880
out as files are changed and moved
anywhere inside that directory tree.

00:09:38.880 --> 00:09:42.120
So in a substantial shoebox application,
you'll probably end

00:09:42.120 --> 00:09:43.430
up using it both ways.

00:09:43.440 --> 00:09:47.040
Your shoebox has a directory
full of files and you want

00:09:47.040 --> 00:09:48.980
to know as they come and go.

00:09:49.480 --> 00:09:52.410
But when your UI is letting
the user focus on one

00:09:52.490 --> 00:09:56.820
particular item or something,
you'll register as a file presenter

00:09:57.130 --> 00:09:59.470
of the file that backs that item.

00:10:03.280 --> 00:10:07.490
The kind of messages that you have
to respond to when you're a file

00:10:07.490 --> 00:10:11.340
presenter include the ones where you
get notified about an individual file.

00:10:11.340 --> 00:10:15.520
For example, presented item did change
is sent to your application,

00:10:15.550 --> 00:10:18.700
your file presenter,
whenever the file is changed,

00:10:18.720 --> 00:10:22.090
whether that's the contents
or the metadata or what.

00:10:22.160 --> 00:10:24.750
The idea is that you're supposed
to look at what's on disk

00:10:24.750 --> 00:10:26.160
and find out what changed.

00:10:26.210 --> 00:10:30.100
You also get messages about
presented item did move to

00:10:30.100 --> 00:10:32.540
URL when it's renamed or moved.

00:10:33.100 --> 00:10:36.680
Your file presenter isn't
merely notified about things.

00:10:36.680 --> 00:10:40.110
It also gets told to do important things.

00:10:41.550 --> 00:10:45.740
When you register,
you register a file presenter, again,

00:10:45.740 --> 00:10:48.170
when you first present the
corresponding item in the UI so

00:10:48.170 --> 00:10:49.860
that you get messages like this.

00:10:49.860 --> 00:10:53.180
And the idea is that you stay
registered until you're done letting

00:10:53.180 --> 00:10:54.940
the user view or edit the item.

00:10:54.940 --> 00:10:57.690
So, you know,
you don't want to let the file

00:10:57.690 --> 00:11:02.020
presenters pile up or something like
that because you will get messages

00:11:02.020 --> 00:11:04.340
for each one of them when appropriate.

00:11:04.340 --> 00:11:07.300
In the context of iCloud...

00:11:07.500 --> 00:12:00.200
[Transcript missing]

00:12:02.950 --> 00:12:05.660
And in the typical usage,
when a file's been deleted,

00:12:05.680 --> 00:12:08.220
the usual action,
I say typically and I say words

00:12:08.230 --> 00:12:10.790
like should instead of must because,
you know,

00:12:10.790 --> 00:12:15.140
there's going to be a great variety of
applications that people write with us,

00:12:15.140 --> 00:12:17.920
so it's a little early to
lay down a blanket rule.

00:12:17.920 --> 00:12:21.810
But you should deregister your file
presenter when the file's going away.

00:12:24.490 --> 00:12:26.240
So the more abstract concept
that I mentioned before,

00:12:26.240 --> 00:12:29.760
this concept of relinquishment,
when something does a coordinated

00:12:29.760 --> 00:12:33.000
reading or writing of your file,
your file presenter is asked

00:12:33.000 --> 00:12:34.480
to relinquish to it first.

00:12:34.480 --> 00:12:36.640
And this is another one of those
intentionally generic names.

00:12:36.650 --> 00:12:37.750
Relinquish what?

00:12:37.760 --> 00:12:41.150
Well, it's relinquish doing whatever
you can't do when something else

00:12:41.150 --> 00:12:42.900
is reading or writing the file.

00:12:42.900 --> 00:12:46.530
So it might be something that's
reflected in the UI or it may make

00:12:46.660 --> 00:12:48.820
a timer stop or something like that.

00:12:50.600 --> 00:12:53.080
But aside from that,
what's interesting about these methods

00:12:53.080 --> 00:12:56.720
is that they're both your first and last
notification that something has happened.

00:12:56.730 --> 00:13:03.650
So notice, by the way,
those methods take a block that returns,

00:13:03.650 --> 00:13:08.010
they take a block that returns a block.

00:13:08.030 --> 00:13:12.000
So what you do is when you're asked to
relinquish a presented item to a writer,

00:13:12.000 --> 00:13:15.790
for example, you, when you are able to,
you invoke the writer block that

00:13:15.790 --> 00:13:19.440
you're passed and you pass it
what's called a reacquirer block.

00:13:20.780 --> 00:13:24.210
When that writer is done,
your reacquirer block will be invoked.

00:13:24.210 --> 00:13:28.540
So you find out both the beginning and
the end of operations by other processes.

00:13:29.340 --> 00:13:32.660
And what's interesting about that is
that it ends up being a very handy

00:13:32.660 --> 00:13:36.660
way to delineate batches of the other
messages that an NS file presenter gets.

00:13:36.660 --> 00:13:40.960
A pretty common situation in iCloud is
that iCloud needs to both change a file

00:13:41.100 --> 00:13:44.970
because that's what the user did on
another device and also rename it all

00:13:44.970 --> 00:13:49.520
in the same operation because that's
what's happened in another device.

00:13:50.940 --> 00:13:53.430
So in response to messages like
presented item did change or

00:13:53.430 --> 00:13:56.270
presented item did move to URL,
very often you don't actually do

00:13:56.270 --> 00:13:59.260
anything right then other than
note the fact that it happened.

00:13:59.260 --> 00:14:01.840
And when your file presenter
reacquires the file,

00:14:01.840 --> 00:14:05.200
you handle both things at the same time,
if that's what it takes to be

00:14:05.260 --> 00:14:06.960
correct in your application.

00:14:10.230 --> 00:14:12.020
So those are messages
about individual files.

00:14:12.030 --> 00:14:15.320
You can, as I mentioned earlier,
you can also use NSFilePrecenter to get

00:14:15.320 --> 00:14:17.460
notified about things in your directory.

00:14:17.460 --> 00:14:20.910
For example,
presented sub-item did change

00:14:20.910 --> 00:14:25.000
at URL or presented sub-item
at URL did move to URL.

00:14:25.000 --> 00:14:27.630
And these are the two most
interesting ones that are other

00:14:27.630 --> 00:14:30.720
ones in the headers like presented
sub-item did appear at URL.

00:14:30.720 --> 00:14:33.010
You should probably ignore that.

00:14:33.060 --> 00:14:35.890
If you've been experimenting with this,
you find out it doesn't actually

00:14:35.890 --> 00:14:37.580
get sent in the context of iCloud.

00:15:04.970 --> 00:15:05.140
So when a file appears,
you'll just get presented

00:15:05.140 --> 00:15:05.240
sub-item did change at URL.

00:15:05.240 --> 00:15:05.460
So let's go through, you know,
a sequence of how this stuff

00:15:05.460 --> 00:15:05.700
ends up appearing to be used in
a typical shoebox application.

00:15:05.700 --> 00:15:05.850
Here's our picture viewing application.

00:15:05.860 --> 00:15:06.000
It just has two pictures appearing.

00:15:06.000 --> 00:15:06.160
They're pictures of the
numbers one and two.

00:15:06.170 --> 00:15:06.280
So and the user adds another one.

00:15:06.280 --> 00:15:06.350
They add a third item.

00:15:06.360 --> 00:15:06.530
So what the application
has to do is it has to do a

00:15:06.530 --> 00:15:06.970
coordinated write of the file.

00:15:07.710 --> 00:15:11.200
to disk to the applications
iCloud storage space.

00:15:11.200 --> 00:15:15.080
And a quick code sample,
the way you do it is you instantiate

00:15:15.080 --> 00:15:19.960
a file coordinator and you invoke this
method coordinate writing item at URL.

00:15:19.960 --> 00:15:24.640
And these kind of methods, by the way,
you want to try avoid invoking them

00:15:24.640 --> 00:15:29.730
on the main thread because other
processes might do other things

00:15:29.740 --> 00:15:32.160
before it's your turn to do things.

00:15:32.160 --> 00:15:37.430
But when it is your turn to write,
your block will be invoked and then

00:15:37.430 --> 00:15:42.280
you'll use the APIs we've always had,
things like NSData and NSFileWrapper,

00:15:42.280 --> 00:15:45.050
the POSIX APIs for writing to disk.

00:15:45.060 --> 00:15:47.640
The file coordination
mechanism is something that

00:15:47.730 --> 00:15:50.100
you wrap around file access.

00:15:50.100 --> 00:15:54.000
So it doesn't actually introduce
any new file access APIs of its own.

00:15:54.020 --> 00:15:57.980
So here's a pretty typical use of
a file wrapper where this picture

00:15:57.980 --> 00:16:02.140
object that can save itself knows
how to create a file wrapper and then

00:16:02.140 --> 00:16:03.700
just stamp it on disk where it goes.

00:16:03.700 --> 00:16:06.270
When the application has
written the file to disk,

00:16:06.780 --> 00:16:09.640
iCloud,
without any other action on your part,

00:16:09.700 --> 00:16:15.430
uploads the file to the cloud if the
machine is connected to the network.

00:16:15.440 --> 00:16:17.800
If it's not,
it waits until it is connected.

00:16:17.800 --> 00:16:21.010
So it's its job to deal
with issues like that.

00:16:21.060 --> 00:16:22.350
All right.

00:16:24.770 --> 00:16:29.210
So, but iCloud is most useful when you
have multiple devices connected to it.

00:16:29.310 --> 00:16:34.290
So in our example, we have the same
application running on iPad.

00:16:34.400 --> 00:18:41.300
[Transcript missing]

00:18:44.710 --> 00:18:48.440
So that was the regular case of the
application on one device writes

00:18:48.440 --> 00:18:52.200
to disk and that gets uploaded to
iCloud and it gets downloaded onto

00:18:52.200 --> 00:18:54.510
another device and it's read there.

00:18:54.520 --> 00:18:57.780
But there are more complicated
situations and they introduce

00:18:57.780 --> 00:18:59.380
the need for file versions.

00:18:59.400 --> 00:19:03.520
So users, of course,
can edit on multiple devices at once.

00:19:03.520 --> 00:19:07.230
And at once can mean literally at once,
though people probably

00:19:07.230 --> 00:19:08.900
don't do that that often.

00:19:08.900 --> 00:19:12.760
But it also means virtually at once
where because one of the machines

00:19:12.760 --> 00:19:16.410
is disconnected from the network,
one or both, and then eventually when

00:19:16.410 --> 00:19:19.320
it gets reconnected,
a whole bunch of uploading to and

00:19:19.320 --> 00:19:21.950
downloading from the cloud happens.

00:19:21.960 --> 00:19:24.050
So and then all the other
machines hear about it.

00:19:53.990 --> 00:19:53.990
So, and this can result in conflicts
because the user can make a change on

00:19:53.990 --> 00:19:53.990
their iPad while it's in airport mode,
for example, or airplane mode.

00:19:53.990 --> 00:19:53.990
And, you know,
and then they get home and they

00:19:53.990 --> 00:19:53.990
start working on their Macintosh
and they forgot they already

00:19:53.990 --> 00:19:53.990
changed the stuff on iPads,
so they edit on Macintosh.

00:19:53.990 --> 00:19:53.990
And then they remember to take their iPad
out of airplane mode and then everything,

00:19:53.990 --> 00:19:53.990
you know, crosses paths as things gets
uploaded and downloaded.

00:19:53.990 --> 00:19:53.990
And now we have two versions
of a bunch of files.

00:19:53.990 --> 00:19:53.990
So, and those are conflicts.

00:19:54.770 --> 00:19:57.980
So the iCloud machinery is
pretty cool in that it senses

00:19:57.980 --> 00:20:01.080
conflicts and it picks a winner.

00:20:01.080 --> 00:20:05.820
So when you have a file and there's
two possible contents because they're

00:20:06.020 --> 00:20:09.820
saved on two different machines,
iCloud picks one.

00:20:09.820 --> 00:20:12.890
And I think the rule right now is
it picks the most recent change,

00:20:12.890 --> 00:20:14.760
though it doesn't have to be that way.

00:20:14.760 --> 00:20:15.980
That's what it does.

00:20:15.980 --> 00:20:18.610
And it puts the winning
contents actually in the file,

00:20:18.610 --> 00:20:21.650
in the file system where the
application expects to find it.

00:20:22.380 --> 00:20:26.810
So and it does this even when
your application is not running.

00:20:26.810 --> 00:20:31.010
And the idea is that every file
always has some decent contents in it.

00:20:31.010 --> 00:20:34.350
It might not be exactly what the
user wants because the user hasn't

00:20:34.350 --> 00:20:36.030
been told what they did yet.

00:20:36.060 --> 00:20:39.100
But there's always, you know,
something in there and it's good.

00:20:39.120 --> 00:20:43.000
This matters a lot more in document-based
applications where on OS X it's

00:20:43.210 --> 00:20:47.320
possible with the All My Files window
to actually drag things out of iCloud,

00:20:47.320 --> 00:20:49.860
you know, onto the desktop or, you know,
on the desktop.

00:20:49.860 --> 00:20:52.320
Or email them to somebody
as an attachment.

00:20:52.320 --> 00:20:55.800
So we want to make sure that every
file has something good in it.

00:20:55.890 --> 00:20:59.220
But even in the context of a shoebox app,
it's good that when your

00:20:59.310 --> 00:21:02.310
application first launches,
there is not, you know,

00:21:02.310 --> 00:21:04.280
something crazy in the files.

00:21:07.630 --> 00:21:08.880
So that's iCloud sensing.

00:21:08.880 --> 00:21:12.650
That's not really iCloud
resolving conflicts,

00:21:12.680 --> 00:21:13.580
though.

00:21:13.580 --> 00:21:15.840
So who does resolve conflicts?

00:21:15.840 --> 00:21:17.990
Well,
your application must resolve conflicts,

00:21:17.990 --> 00:21:20.240
either because it gets a
message while it's running or

00:21:20.240 --> 00:21:21.640
the next time it's launched.

00:21:23.830 --> 00:21:28.050
So when I said iCloud picks winners,
well, your application might

00:21:28.050 --> 00:21:29.180
have to look at the losers.

00:21:29.180 --> 00:21:32.610
And that begs the question,
where did iCloud leave them?

00:21:32.610 --> 00:21:37.230
And the answer is that it
leaves them in NSFileVersions.

00:21:37.260 --> 00:21:39.950
So NSFileVersion is a really generic API.

00:21:39.950 --> 00:21:43.060
I don't even know if it
came up first for iCloud.

00:21:43.060 --> 00:21:45.640
It's also used by NSDocument's
autosaving mechanism.

00:21:45.660 --> 00:21:49.290
If you go to the versions browser
and something like TextEdit on OS X,

00:21:49.290 --> 00:21:52.100
you'll see multiple
versions of your document.

00:21:52.100 --> 00:21:53.300
Those are all NSFileVersions.

00:21:53.700 --> 00:21:55.690
So the API is pretty generic.

00:21:55.690 --> 00:22:00.130
You can get the file version that
corresponds to the current file and

00:22:00.130 --> 00:22:04.720
also NSFileVersions that correspond
to other versions of a file.

00:22:04.720 --> 00:22:06.460
And where are they stored?

00:22:06.460 --> 00:22:08.740
Well, they're stored somewhere
else on the volume.

00:22:08.740 --> 00:22:12.220
If you want to find out,
just look at the URL for them.

00:22:12.220 --> 00:22:13.830
But, you know,
if that's subject to change,

00:22:13.830 --> 00:22:15.320
you're not supposed to care too much.

00:22:15.320 --> 00:22:19.200
And if you're wondering, hey,
doesn't this waste space?

00:22:19.200 --> 00:22:20.630
No, it diffs stuff.

00:22:20.630 --> 00:22:22.760
It just saves changes on disk.

00:22:23.700 --> 00:22:25.010
Amen.

00:22:25.240 --> 00:22:28.300
So, but for iCloud,
what really matters are the

00:22:28.300 --> 00:22:32.540
versions that represent unresolved
conflicts of any particular file.

00:22:32.540 --> 00:22:35.410
And you get a list of
them using this method.

00:22:37.410 --> 00:22:41.140
And once you get an NSFile version,
what you do, and it really depends

00:22:41.210 --> 00:22:43.370
on your application,
how you do this,

00:22:43.370 --> 00:22:46.480
the UI that you use to do this,
you present the different

00:22:46.480 --> 00:22:47.780
versions to the user.

00:22:47.780 --> 00:22:51.340
That can be as simple as, you know,
a sheet that tells the user,

00:22:51.340 --> 00:22:54.780
here are your different versions,
and they can be identified

00:22:54.780 --> 00:22:55.970
by localized name.

00:22:55.970 --> 00:22:58.610
You know,
and when we say localized in our API,

00:22:58.610 --> 00:23:01.250
we usually just mean
presentable to the user.

00:23:01.380 --> 00:23:03.490
So this is the display name of the file.

00:23:03.490 --> 00:23:07.200
And by the way,
the reason this is a property of NSFile,

00:23:07.200 --> 00:23:11.110
is because files can get renamed but
still be considered the same file.

00:23:11.120 --> 00:23:14.040
So that is something you can
show to the user when the user

00:23:14.040 --> 00:23:15.240
creates conflicts that way.

00:23:15.240 --> 00:23:18.110
Also,
the display name of the saving computer,

00:23:18.110 --> 00:23:21.540
that's a really important hint
that you can show to the user

00:23:21.540 --> 00:23:25.110
about what this conflict is about,
and also the modification date,

00:23:25.110 --> 00:23:26.080
when they changed it.

00:23:26.190 --> 00:23:28.950
And first of all, of course, is the URL.

00:23:28.950 --> 00:23:31.500
Where are the contents of the version?

00:23:31.590 --> 00:23:34.460
So, you know,
you might want to show that to

00:23:34.460 --> 00:23:37.340
the user or you just use it,
you know, you might want to show that to

00:23:37.340 --> 00:23:39.700
the user or you just use it,
you know, when you resolve the conflict.

00:23:39.700 --> 00:23:44.220
In general, the way that you use NSFile
version to resolve conflicts,

00:23:44.300 --> 00:23:47.300
well, there's a couple things.

00:23:47.410 --> 00:23:51.140
One of the methods NSFile version
has is called replace item at URL.

00:23:51.160 --> 00:23:53.690
And what that is,
is it takes the content,

00:23:53.690 --> 00:23:56.530
it takes the contents of a
file version and puts it in,

00:23:56.700 --> 00:23:58.890
you know,
a normal place in the file system.

00:23:58.960 --> 00:24:02.850
It makes a real file out of a version
instead of something that's merely

00:24:02.860 --> 00:24:05.290
attached to another file as a version.

00:24:05.530 --> 00:24:07.750
And there's a couple
different ways to use it.

00:24:07.890 --> 00:24:12.040
For example,
if your application shows the conflict to

00:24:12.040 --> 00:24:17.760
the user and the user disagrees with what
iCloud chose when it sensed the conflict,

00:24:17.820 --> 00:24:19.720
use this to override it.

00:24:19.800 --> 00:24:22.980
You can pass as the URL the
URL of the original file when

00:24:22.980 --> 00:24:24.980
you invoke replace item at URL.

00:24:24.980 --> 00:24:28.840
You can replace the actual file
that this version came from.

00:24:30.900 --> 00:26:17.500
[Transcript missing]

00:26:19.350 --> 00:26:21.180
So as I mentioned before,
this stuff is kind of generic.

00:26:21.180 --> 00:26:23.100
Not all file versions
represent conflicts.

00:26:23.100 --> 00:26:26.410
So when you do get one of these messages,
you should check to see

00:26:26.410 --> 00:26:27.640
if it is a conflict.

00:26:27.640 --> 00:26:29.960
This is a Boolean property,
just conflict.

00:26:29.960 --> 00:26:33.820
So conflicts can also be resolved
from the point of view of your

00:26:33.920 --> 00:26:38.440
application running on a device at any
time because the user might resolve

00:26:38.460 --> 00:26:40.800
the conflicts on another device.

00:26:41.620 --> 00:26:46.330
So it's pretty common for, you know,
while you're testing to see conflicts,

00:26:46.330 --> 00:26:49.970
your conflict UI appear on two
devices at the same time right

00:26:49.970 --> 00:26:52.140
next to each other because,
you know,

00:26:52.140 --> 00:26:54.890
you're doing crazy things that a
user probably wouldn't do but you

00:26:54.890 --> 00:26:56.660
still have to do them during testing.

00:26:56.660 --> 00:27:00.310
So but the result is that, you know,
when you dismiss a sheet or whatever

00:27:00.310 --> 00:27:03.060
that you're using on one device,
that should be dismissed

00:27:03.270 --> 00:27:05.420
automatically on the other device too.

00:27:05.420 --> 00:27:08.620
The user shouldn't have to repeat
themselves during conflict resolution.

00:27:08.620 --> 00:27:11.120
So it happens on the other device,
the one that the user...

00:27:11.540 --> 00:27:13.400
Didn't resolve the conflict on.

00:27:13.400 --> 00:27:15.030
It'll get messages like this.

00:27:15.130 --> 00:27:18.330
Presented item did resolve conflict
version or presented sub-item at

00:27:18.330 --> 00:27:20.180
URL did resolve conflict version.

00:27:20.180 --> 00:27:24.150
So it's important to keep in mind,
you know, while you're presenting

00:27:24.150 --> 00:27:27.740
UI for conflict resolution,
you know, more of these messages

00:27:27.740 --> 00:27:29.550
will be coming and going.

00:27:29.560 --> 00:27:32.390
You know, more conflicts might be
discovered if the user,

00:27:32.390 --> 00:27:35.950
you know, plugs in another device to the
network or something or they might

00:27:36.000 --> 00:27:37.740
go away completely dynamically.

00:27:37.800 --> 00:27:40.220
So you have to keep listening
for these messages even when

00:27:40.220 --> 00:27:42.190
you're handling... You know,
you're not going to be able to

00:27:42.200 --> 00:27:43.240
get the same message back to
the network or the same device.

00:27:43.240 --> 00:27:44.510
So you have to keep listening for these
messages even when you're handling

00:27:44.510 --> 00:27:45.240
ones that you've already gotten.

00:27:45.240 --> 00:27:46.230
So what's it look like in practice?

00:27:46.240 --> 00:27:48.240
You know, how do these APIs show up when
something is actually happening?

00:27:48.270 --> 00:27:50.210
Well, let's show up.

00:27:50.320 --> 00:27:52.200
Let's start with, you know,
our iPad and our iMac again.

00:27:52.260 --> 00:27:56.190
But this time the iPad
is in airplane mode.

00:27:56.600 --> 00:28:42.300
[Transcript missing]

00:28:44.300 --> 00:28:47.720
So it'll leave it on disk and
that's where it'll stop for now.

00:28:47.730 --> 00:28:53.380
But when the user eventually does
take the iPad out of airplane mode

00:28:53.380 --> 00:28:53.380
and lets it connect to the network,

00:28:53.840 --> 00:28:58.220
What happens is that the version that
was in the cloud gets downloaded,

00:28:58.220 --> 00:29:00.300
the version that was
on disk gets uploaded,

00:29:00.300 --> 00:29:04.680
and now both the cloud and the
iPad have two versions on them.

00:29:04.880 --> 00:29:07.520
Actually, the Macintosh does too,
but it's out of the picture right now.

00:29:07.540 --> 00:29:11.380
And so the applications file
presenter on the iPad will receive

00:29:11.380 --> 00:29:13.450
a message that looks like this.

00:29:13.450 --> 00:29:16.630
Presented sub-item at
URL did gain version.

00:29:16.630 --> 00:29:20.650
And the UI that you're going to
do for this is very different

00:29:20.650 --> 00:29:23.060
for each kind of application.

00:29:23.380 --> 00:29:25.340
So,
but what it should do is it should check

00:29:25.360 --> 00:29:27.160
to see if the version is a conflict.

00:29:27.160 --> 00:29:31.660
And really in the context of
an iCloud application handling

00:29:32.040 --> 00:29:37.100
the files that it's put,
you know, in its iCloud store on disk,

00:29:37.100 --> 00:29:39.220
of course it's going to be a conflict.

00:29:39.220 --> 00:29:42.100
But before you start doing
conflict type things with it,

00:29:42.100 --> 00:29:44.310
you should at least
check just to not crash,

00:29:44.330 --> 00:29:45.160
basically.

00:29:45.160 --> 00:29:47.940
When it does this,
it finds out that there's a conflict for

00:29:48.060 --> 00:29:50.140
a file or a conflict version for a file.

00:29:50.140 --> 00:29:52.050
It should say, you know,
is this a file I even recognize?

00:29:52.050 --> 00:29:56.880
In this case,
this program has a method picture a URL.

00:29:56.880 --> 00:29:58.580
I don't, you know,
do we even recognize this URL?

00:29:58.580 --> 00:30:00.640
And if so,
and it discovers that there's a

00:30:00.640 --> 00:30:04.870
conflict of some sort for this picture,
it should present that to the user.

00:30:04.880 --> 00:30:07.580
So, and while it's presenting
that to the user,

00:30:07.610 --> 00:30:11.120
it still has to handle other
messages of this sort coming in.

00:30:11.120 --> 00:30:17.220
So, but when your UI is all done,
and the users made their choice,

00:30:17.220 --> 00:30:23.380
the application writes
the contents on to disk.

00:30:23.380 --> 00:30:27.220
It actually probably isn't taking it
from memory and writing it on disk.

00:30:27.220 --> 00:30:32.100
It probably just uses NS file version
replace item at URL in this case.

00:30:33.690 --> 00:30:37.320
And once that's done,
that is automatically propagated to

00:30:37.320 --> 00:30:40.820
the cloud by the iCloud machinery,
the agents and demons

00:30:41.140 --> 00:30:42.390
running on OS X or iOS.

00:30:42.550 --> 00:30:46.380
And then that conflict resolution will
automatically propagate to other devices

00:30:46.420 --> 00:30:48.410
like this Macintosh that's connected.

00:30:49.230 --> 00:30:51.440
So because the user chose
the version that the user

00:30:51.440 --> 00:30:54.380
had edited on the Macintosh,
there's actually no news to report to

00:30:54.380 --> 00:30:56.320
the file presenter on the Macintosh.

00:30:56.320 --> 00:30:59.570
So that one doesn't get another message.

00:30:59.710 --> 00:31:03.510
It's just that now the iPad and
the Mac are showing the same items.

00:31:05.960 --> 00:31:07.180
So some tips and advice.

00:31:07.180 --> 00:31:13.570
First of all, at application startup,
there's a new method for you to use to

00:31:13.590 --> 00:31:16.240
even find out if iCloud is turned on.

00:31:16.240 --> 00:31:17.880
There's a couple different
ways to turn off iCloud.

00:31:17.880 --> 00:31:21.140
There is not being logged
into iCloud at all.

00:31:21.140 --> 00:31:23.840
And then also in the
iCloud preferences pane,

00:31:23.840 --> 00:31:28.000
there is a checkbox where you can
turn off iCloud documents and data.

00:31:28.000 --> 00:31:31.460
And there's a bunch of checkboxes there,
but this is the one we're talking about,

00:31:31.460 --> 00:31:32.780
the documents and data one.

00:32:04.010 --> 00:32:04.220
Your application, you know,
is probably going to do different

00:32:04.220 --> 00:32:04.220
things depending on whether
or not iCloud is turned on.

00:32:04.220 --> 00:32:04.220
It's still pretty early
days in developing,

00:32:04.220 --> 00:32:04.220
you know, UI for this sort of thing.

00:32:04.220 --> 00:32:04.220
Some people just want to say, you know,
my application only works if

00:32:04.220 --> 00:32:04.220
you're logged into iCloud.

00:32:04.220 --> 00:32:04.220
Other people are storing, you know,
two copies of things so that

00:32:04.220 --> 00:32:04.220
in case the user logs out.

00:32:04.220 --> 00:32:04.220
So we'll see which kind of
applications people like best.

00:32:04.220 --> 00:32:04.220
But when your application has to
make decisions at launch time,

00:32:04.220 --> 00:32:04.220
this is the one that it should do.

00:32:05.450 --> 00:32:08.530
So what's interesting about ubiquity
identity token is number one,

00:32:08.530 --> 00:32:11.490
this method is fast enough
to use on the main thread,

00:32:11.490 --> 00:32:15.900
unlike this existing NS file manager
method URL for ubiquity container.

00:32:15.900 --> 00:32:18.080
So this has been kind of a big issue.

00:32:18.080 --> 00:32:20.000
You know, what do I do during startup?

00:32:20.000 --> 00:32:22.170
I don't want my
application to just block.

00:32:22.340 --> 00:32:26.280
Well, the answer is that you invoke
ubiquity identity token.

00:32:27.480 --> 00:32:35.240
By the way, what's the... By the way,
what's the token about it is it's

00:32:35.240 --> 00:32:39.030
a different token depending on
what account the user logged into.

00:32:39.250 --> 00:32:41.740
So the user, of course,
can log out and then log back into

00:32:41.740 --> 00:32:43.460
a completely different account.

00:32:43.470 --> 00:32:48.840
These tokens are both encodable if
you need to record something to match,

00:32:48.840 --> 00:32:52.000
you know, what the user's logged into.

00:32:52.000 --> 00:32:53.830
And they're also comparable too.

00:32:53.850 --> 00:32:59.540
So you still have to invoke URL for
ubiquity container at some point.

00:32:59.540 --> 00:33:04.050
The answer is it didn't get that
much... It got a little faster,

00:33:04.050 --> 00:33:05.250
it didn't get that much faster.

00:33:05.360 --> 00:33:08.700
You should try not to invoke
it on the main thread.

00:33:08.700 --> 00:33:12.480
So while you're doing stuff on
your initial reading thread,

00:33:12.590 --> 00:33:16.290
you should be showing good UI,
letting the user, you know,

00:33:16.290 --> 00:33:18.500
know what they're waiting for.

00:33:18.500 --> 00:33:21.850
And so because the user can log
out or log back in or just turn off

00:33:21.850 --> 00:33:25.820
iCloud documents and data completely,
you should be listening for this

00:33:25.820 --> 00:33:29.960
NS notification center notifications,
not NS distributed notification

00:33:29.960 --> 00:33:31.680
center notifications.

00:33:31.680 --> 00:33:31.690
Yeah.

00:33:32.960 --> 00:33:37.000
And NS ubiquity identity did change.

00:33:37.000 --> 00:33:42.050
So and the ubiquity identity
token stuff is new in OS X,

00:33:42.050 --> 00:33:44.240
10.8 and iOS 6.

00:33:47.820 --> 00:33:51.180
So when you're reading files,
as I showed you in the graphics before,

00:33:51.180 --> 00:33:53.790
coordinated reading can
trigger downloading.

00:33:53.800 --> 00:33:56.420
And that, of course, can take a while.

00:33:56.420 --> 00:34:00.540
Everything that involves network
access can take an unpredictable while.

00:34:00.540 --> 00:34:05.070
So this is something you want to
avoid doing on the main thread.

00:34:05.080 --> 00:34:08.810
So I think, in general, the advice,
don't do file system

00:34:08.810 --> 00:34:12.490
access on the main thread,
is just getting repeated over and

00:34:12.490 --> 00:34:14.800
over again on both iOS and OS X.

00:34:14.800 --> 00:34:19.170
So the fact that reading is
coordinated doesn't really change that.

00:34:19.340 --> 00:34:20.930
You still have to do good error checking.

00:34:20.940 --> 00:34:25.470
For example,
NSFileCoordinator coordinate reading,

00:34:25.470 --> 00:34:27.540
it returns an NSError.

00:34:27.540 --> 00:34:30.940
It might be an error about something
like the file couldn't be downloaded.

00:34:30.960 --> 00:34:33.830
Even if that doesn't return
an error and your block,

00:34:33.830 --> 00:34:38.080
your reading block is invoked,
you still have to do good error checking.

00:34:38.080 --> 00:34:39.670
The file might not even exist.

00:34:39.680 --> 00:34:41.380
And that's correct.

00:34:41.460 --> 00:34:44.780
So the file might have been
deleted while you're away.

00:34:44.780 --> 00:34:45.590
You're waiting to read it.

00:34:45.600 --> 00:34:48.470
NSFileCoordination isn't going to
call that an error just because

00:34:48.470 --> 00:34:51.520
somebody else deleted the file
while you were waiting to read it.

00:34:54.400 --> 00:36:22.800
[Transcript missing]

00:36:23.310 --> 00:36:26.700
So, and then you might notice if you've
already written code with this,

00:36:26.700 --> 00:36:29.320
had an NSFilePresenter,
the file doesn't actually get

00:36:29.370 --> 00:36:30.960
deleted a lot of the time.

00:36:30.960 --> 00:36:32.250
A lot of the time it just gets moved.

00:36:32.250 --> 00:36:36.320
So that is iCloud's caching machinery.

00:36:36.320 --> 00:36:41.230
When a file like that gets deleted,
it might come back pretty quick in

00:36:41.230 --> 00:36:43.940
a bunch of different situations.

00:36:43.950 --> 00:36:46.610
So iCloud isn't in a big
hurry to delete it off disk.

00:36:46.610 --> 00:36:47.860
It will eventually.

00:36:47.860 --> 00:36:50.880
But in the meantime,
it just moves it into a directory that

00:36:50.880 --> 00:36:52.900
was supposed to be kind of a secret.

00:36:53.240 --> 00:36:54.360
It ended up not being so secret.

00:36:54.360 --> 00:36:56.880
Whose name starts with .ubd.

00:36:56.880 --> 00:37:01.910
You only notice this if you don't
deregister your file presenter when

00:37:01.910 --> 00:37:05.120
you're told that a file is being deleted.

00:37:05.120 --> 00:37:08.100
But what we want you to do is
try not to take advantage of the

00:37:08.120 --> 00:37:10.040
implementation details like that.

00:37:10.100 --> 00:37:13.540
They will see if you don't
deregister your NSFilepresenter.

00:37:13.540 --> 00:37:17.360
So when we say deletion in the context of
NSFilepresenter or something like that,

00:37:17.410 --> 00:37:19.280
it's a pretty high level operation.

00:37:19.280 --> 00:37:24.840
It doesn't necessarily map exactly to,
you know, the underlying POSIX calls.

00:37:24.890 --> 00:37:27.520
It's, you know,
it's at a higher level what the

00:37:27.610 --> 00:37:29.460
user might think of as deletion.

00:37:29.460 --> 00:37:32.450
And of course,
something like deletion to the user,

00:37:32.450 --> 00:37:35.030
you know,
the item is gone doesn't necessarily

00:37:35.120 --> 00:37:37.010
mean that the file has to be gone.

00:37:37.060 --> 00:37:40.140
So this is kind of,
it's kind of the thing throughout the

00:37:40.190 --> 00:37:42.730
file coordinator and file presenter APIs.

00:37:42.730 --> 00:37:44.590
They operate at a higher level.

00:37:44.590 --> 00:37:47.580
So you don't do, for example,
a coordinated read for

00:37:47.800 --> 00:37:49.310
each individual POSIX call.

00:37:49.310 --> 00:37:52.890
You do it when you are
loading a document's contents.

00:37:53.200 --> 00:37:54.120
Things like that.

00:37:54.200 --> 00:37:59.230
So then they're meant to wrap around
sequences of lower level operations.

00:37:59.290 --> 00:38:03.640
Some advice that comes from, you know,
watching how people have

00:38:03.650 --> 00:38:05.540
been using this already.

00:38:05.540 --> 00:38:08.360
Save settings in the right place.

00:38:08.360 --> 00:38:11.680
So preferences like scroll
bar and window positions,

00:38:11.680 --> 00:38:16.000
it's kind of questionable a lot of the
time whether or not those go in your

00:38:16.000 --> 00:38:20.880
document at all because all of our
devices support different screen sizes.

00:38:20.900 --> 00:38:22.590
Even before then,
there was always a possibility

00:38:22.590 --> 00:38:24.580
of giving something like a
document to another person.

00:38:24.580 --> 00:38:27.320
But even when we're not
even worrying about,

00:38:27.320 --> 00:38:29.850
you know,
giving documents to other people,

00:38:29.850 --> 00:38:32.200
we're just talking about
the same user using,

00:38:32.200 --> 00:38:34.380
you know, the stuff in their shoebox.

00:38:34.380 --> 00:38:36.730
They're still using
multiple devices to do that.

00:38:36.730 --> 00:38:39.300
So it may as well be different
users from the point of view

00:38:39.300 --> 00:38:40.860
of things like screen sizes.

00:38:40.860 --> 00:38:46.980
So be careful about what you write
in files that get uploaded to iCloud.

00:38:50.600 --> 00:41:15.200
[Transcript missing]

00:41:16.700 --> 00:43:22.900
[Transcript missing]