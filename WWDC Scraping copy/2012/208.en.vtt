WEBVTT

00:00:10.650 --> 00:00:12.100
Good afternoon.

00:00:12.100 --> 00:00:13.600
Welcome to WWDC.

00:00:13.600 --> 00:00:20.170
I hope everybody's been having
a great time so far today.

00:00:21.160 --> 00:00:22.100
Thank you.

00:00:22.100 --> 00:00:23.860
My name is Gordie Friedman.

00:00:23.890 --> 00:00:27.790
I work on UIKit at Apple,
and we're going to talk about

00:00:28.000 --> 00:00:32.420
saving and restoring state
in iOS applications today.

00:00:33.590 --> 00:00:37.970
So before I start, just to get a sense,
if you've written an application,

00:00:38.080 --> 00:00:39.500
could you raise your hand?

00:00:39.580 --> 00:00:42.200
Anybody who's-- wow.

00:00:42.760 --> 00:00:43.630
Very good.

00:00:43.630 --> 00:00:46.880
Okay, and if you're new,
if iOS is new to you,

00:00:46.880 --> 00:00:50.260
bring it up just to see
if we got some new people.

00:00:50.360 --> 00:00:51.230
Okay, a few.

00:00:51.410 --> 00:00:52.250
Welcome.

00:00:52.250 --> 00:00:57.280
And if you're currently working on
a new app or revising yours heavily,

00:00:57.280 --> 00:00:58.860
I just wanted to see.

00:00:58.860 --> 00:01:00.880
We got a lot of coders here.

00:01:00.880 --> 00:01:02.220
People are busy.

00:01:02.220 --> 00:01:03.140
All right.

00:01:03.340 --> 00:01:04.980
That's excellent.

00:01:05.420 --> 00:01:09.060
If you have an application,
I want you to leave here knowing

00:01:09.060 --> 00:01:12.880
what you can do to implement
state restoration for the app,

00:01:12.880 --> 00:01:13.540
to add it.

00:01:13.820 --> 00:01:16.970
And if you're working on a new app,
I want you to leave knowing, you know,

00:01:16.980 --> 00:01:20.710
how you can put this in as you go along,
hit the ground running with the new app.

00:01:20.760 --> 00:01:23.510
And if you are new,
for a few new people that we have,

00:01:23.510 --> 00:01:26.880
I just want to continue to give
you insights into our development

00:01:26.900 --> 00:01:31.070
environment and one more good reason
to want to write an iOS application.

00:01:33.220 --> 00:01:36.860
So I'm going to talk
about four things today.

00:01:37.150 --> 00:01:40.150
I'm going to describe state restoration,
what the feature is,

00:01:40.270 --> 00:01:42.440
why we decided to do it.

00:01:42.480 --> 00:01:45.400
I'll talk about concepts,
things that are important to

00:01:45.400 --> 00:01:50.180
understand to be able to make
the most effective use out of it.

00:01:50.840 --> 00:01:52.500
I'm going to discuss how
you can incorporate it.

00:01:52.500 --> 00:01:55.560
I'll go through some examples and
then we'll show what we did so you can

00:01:55.640 --> 00:01:57.350
see how you put this into your app.

00:01:57.350 --> 00:02:01.040
And throughout the talk,
we'll kind of describe some tips and

00:02:01.270 --> 00:02:03.980
tricks that'll be useful as you go along.

00:02:05.240 --> 00:02:11.790
This is a new feature in iOS 6,
brand new API as part of our SDK.

00:02:13.100 --> 00:02:14.600
All right, let's get started.

00:02:14.600 --> 00:02:17.000
So what is state restoration?

00:02:17.050 --> 00:02:20.530
The main idea is when an
application starts up,

00:02:20.550 --> 00:02:25.380
it goes right back to where it was
the last time the user had used it.

00:02:25.770 --> 00:02:28.100
So in order to do that,
you need to preserve

00:02:28.320 --> 00:02:30.400
the application state.

00:02:30.460 --> 00:02:32.330
And I'll talk a lot about that.

00:02:32.440 --> 00:02:38.070
It's both what you see and also
the behavior of the application.

00:02:38.220 --> 00:02:40.780
So we don't want to just come
back up with a thin veneer

00:02:40.890 --> 00:02:43.980
of what the user was doing,
but we want it to appear as if

00:02:43.980 --> 00:02:47.330
the application had just been in
the background the whole time,

00:02:47.480 --> 00:02:48.480
even though it exited.

00:02:48.610 --> 00:02:52.130
So we want it to come right
back to where the user was.

00:02:52.930 --> 00:02:56.870
This is similar to the application
lifecycle we have on the desktop.

00:02:57.070 --> 00:03:00.080
So if you've seen that or used that,
it should be pretty familiar.

00:03:00.310 --> 00:03:02.300
There's a few differences, though.

00:03:02.490 --> 00:03:06.660
One big change is on the desktop,
applications are driven

00:03:06.660 --> 00:03:07.950
with one or more windows.

00:03:07.950 --> 00:03:10.150
So you have one window,
a few windows in your app,

00:03:10.230 --> 00:03:13.100
and that's kind of the
top level unit of coin.

00:03:13.210 --> 00:03:17.400
On iOS, we use view controllers,
and we have a hierarchy of those.

00:03:17.540 --> 00:03:20.550
So here we'll focus on stitching
back our view controllers,

00:03:20.620 --> 00:03:24.350
and you'll see how that
plays in state restoration.

00:03:24.550 --> 00:03:27.800
If you run an application
the first time on iOS 6,

00:03:27.820 --> 00:03:30.790
nothing unexpected will happen,
both for the user,

00:03:30.790 --> 00:03:33.360
your code won't encounter anything weird.

00:03:33.390 --> 00:03:35.740
This is entirely opt-in.

00:03:35.810 --> 00:03:38.130
So you control whether you
want to do this or not.

00:03:38.140 --> 00:03:40.490
It's very easy to use,
but we just want to make sure

00:03:40.730 --> 00:03:43.180
no surprise is out of the gate.

00:03:43.670 --> 00:03:45.530
You can also do this in phases.

00:03:45.780 --> 00:03:50.460
You can pick a couple important things,
save and preserve that state, ship that,

00:03:50.460 --> 00:03:52.950
or just do incremental development.

00:03:53.100 --> 00:03:55.150
So you don't have to do
it all or nothing at all.

00:03:55.370 --> 00:03:57.860
You don't have to start off and
adopt a whole bunch of stuff.

00:03:58.080 --> 00:03:59.140
You can kind of ease in.

00:04:01.690 --> 00:04:04.830
Throughout the talk,
I'll be describing semantic state,

00:04:04.990 --> 00:04:07.600
so I just want to go into what
I mean by that a little bit.

00:04:07.700 --> 00:04:10.470
So, essentially,
we're looking at what your

00:04:10.550 --> 00:04:11.990
application understands.

00:04:12.140 --> 00:04:14.920
So it might be that the
user is editing some media,

00:04:15.000 --> 00:04:18.540
manipulating some photos,
maybe they're doing something social.

00:04:18.580 --> 00:04:20.360
This is all the semantic state.

00:04:20.440 --> 00:04:23.320
And we want to try to save
things from the top level,

00:04:23.500 --> 00:04:25.600
so save it from the top on down.

00:04:25.640 --> 00:04:28.120
As developers,
you know what your application is

00:04:28.120 --> 00:04:31.640
doing and how it's built and all the
little tiny parts that go into it,

00:04:31.700 --> 00:04:34.320
but we really want to
think from the top down.

00:04:34.480 --> 00:04:37.240
Now, aside from what the user is doing,
there may be some things

00:04:37.240 --> 00:04:38.870
happening in the background.

00:04:38.950 --> 00:04:43.400
Computation, you might be connected to a
server up in the sky somewhere.

00:04:43.420 --> 00:04:47.550
That's all part of the high-level
state we want to keep track of.

00:04:47.980 --> 00:04:51.400
And to do this,
you really want to think like a user.

00:04:51.500 --> 00:04:54.690
So again, even though you know how your
application is structured,

00:04:54.780 --> 00:04:56.740
when you're thinking
about state restoration,

00:04:56.810 --> 00:04:59.040
approach it as if, hey, I'm using this.

00:04:59.370 --> 00:05:01.400
What am I doing?

00:05:03.120 --> 00:05:07.500
As an example, what's going on here?

00:05:07.500 --> 00:05:10.140
So if a user was in this application,
they'd think, "Well,

00:05:10.140 --> 00:05:11.250
I've got a song queued up.

00:05:11.500 --> 00:05:14.640
It's paused, looking at the album cover.

00:05:14.680 --> 00:05:17.920
And I've got the advanced
controls so I can scrub." So if

00:05:17.920 --> 00:05:21.340
we were going to save state,
what would we want to focus on here?

00:05:21.340 --> 00:05:25.050
Well, not every little bit
and piece on the screen,

00:05:25.050 --> 00:05:27.910
not all the controls,
but essentially what I just said.

00:05:28.020 --> 00:05:30.540
We'd remember what song it was,
that it was paused,

00:05:30.780 --> 00:05:35.040
maybe a Boolean to keep track of the fact
that we've got that scrubber showing.

00:05:35.050 --> 00:05:36.110
Not much else.

00:05:36.200 --> 00:05:38.190
How about here?

00:05:38.450 --> 00:05:41.280
may notice I switched albums.

00:05:41.760 --> 00:05:44.390
Same thing, but we're looking at the
back of the album cover.

00:05:44.630 --> 00:05:46.730
Not much difference,
so there's not going to be a lot more

00:05:46.870 --> 00:05:49.300
state we have to save to get here.

00:05:49.650 --> 00:05:51.800
Finally, how about this?

00:05:52.620 --> 00:05:54.690
When you're listening to a song,
there's different ways you

00:05:54.700 --> 00:05:55.480
could have gotten to it.

00:05:55.510 --> 00:05:57.630
You could have gone to
an artist's song list.

00:05:57.630 --> 00:05:59.700
You could have used a playlist,
as I did here.

00:05:59.700 --> 00:06:01.640
We want to remember that as well.

00:06:01.640 --> 00:06:05.180
So it's important to remember
what you're doing and also

00:06:05.540 --> 00:06:07.340
remember how you got there.

00:06:08.180 --> 00:06:10.380
So you might think, okay,
sounds like a nice feature.

00:06:10.540 --> 00:06:11.100
It's pretty cool.

00:06:11.100 --> 00:06:12.150
I'll put it on my list.

00:06:12.330 --> 00:06:13.940
And I've got a few other things to do.

00:06:13.940 --> 00:06:15.330
I'll get to it.

00:06:15.480 --> 00:06:17.600
Well, we think this is a
really critical feature,

00:06:17.600 --> 00:06:20.800
something that's really important
to do as soon as you can.

00:06:20.900 --> 00:06:22.620
So why?

00:06:23.560 --> 00:06:26.500
Applications are for users,
and whenever you can

00:06:26.500 --> 00:06:29.700
better that experience,
make things a little smoother for them,

00:06:29.750 --> 00:06:33.490
you get a lot of bang back for that buck.

00:06:33.660 --> 00:06:37.190
So how does this play to do that?

00:06:37.640 --> 00:06:39.960
Sometimes when you put an
application in the background,

00:06:39.960 --> 00:06:41.250
you have this tension.

00:06:41.300 --> 00:06:44.500
You're kind of wondering,
is it going to come back where I was?

00:06:44.580 --> 00:06:46.430
If you're doing something
fairly complicated,

00:06:46.430 --> 00:06:49.220
if you've navigated deeply into the app,
the phone rings,

00:06:49.220 --> 00:06:52.640
you might feel like I don't really
want to answer it right now.

00:06:52.640 --> 00:06:54.900
You know, you have this mistrust.

00:06:55.160 --> 00:06:58.340
So if we can bring the
app back to where it was,

00:06:58.370 --> 00:07:02.390
make the user feel more comfortable,
it's like the app is working for the

00:07:02.390 --> 00:07:04.460
user instead of the other way around.

00:07:04.740 --> 00:07:07.680
And it's the same thing if you
need to update an application.

00:07:07.740 --> 00:07:09.520
There might be a great
new feature you want,

00:07:09.660 --> 00:07:12.160
but you're in the middle of
engaging in something and you don't

00:07:12.270 --> 00:07:15.200
want to take the time to update,
because now the app's going to

00:07:15.210 --> 00:07:17.010
start back at the beginning.

00:07:17.390 --> 00:07:18.980
Now this may seem like a small thing.

00:07:19.120 --> 00:07:22.200
I save a few seconds of time
when I go back into the app.

00:07:22.200 --> 00:07:25.780
But it actually really
plays big psychologically.

00:07:25.820 --> 00:07:28.660
People flip in and out
of apps all day long,

00:07:28.700 --> 00:07:29.560
back and forth.

00:07:29.590 --> 00:07:33.480
And we don't always remember exactly
what we were doing in an application.

00:07:33.520 --> 00:07:36.240
You might also be leaving
the house or in a hurry,

00:07:36.240 --> 00:07:39.800
and you want to run into an app quickly,
just get something done.

00:07:39.990 --> 00:07:43.320
And if you go back in and the
application is right at the beginning,

00:07:43.370 --> 00:07:44.450
it's jarring.

00:07:44.450 --> 00:07:48.010
So we want to provide a
more seamless experience.

00:07:48.080 --> 00:07:52.300
And all of that adds up to a more
pleasant experience using the app.

00:07:52.510 --> 00:07:56.160
Again, we want to make it seem like the
application never really quit.

00:07:56.310 --> 00:07:57.840
So it's kind of magical.

00:07:57.880 --> 00:08:01.990
It's just always there doing
what the user wants it to do.

00:08:02.320 --> 00:08:06.130
If you have a number of apps in the
store that have similar feature sets,

00:08:06.170 --> 00:08:09.970
you know that the one that feels
nicer to use is going to be the one

00:08:09.970 --> 00:08:11.640
people are going to generally prefer.

00:08:11.640 --> 00:08:15.190
So this helps to make
things more competitive.

00:08:16.100 --> 00:08:19.450
So how do we help you to do this?

00:08:19.520 --> 00:08:22.300
iOS does a lot of the process flow.

00:08:22.340 --> 00:08:24.840
We coordinate saving your state.

00:08:24.870 --> 00:08:26.560
We coordinate restoring it.

00:08:26.610 --> 00:08:31.230
We handle a lot of the scaffolding,
things that are tricky to get right.

00:08:31.350 --> 00:08:34.400
We also have some default behaviors.

00:08:34.430 --> 00:08:36.840
Chris mentioned this if you
were at the talk before.

00:08:36.910 --> 00:08:40.580
We'll remember the navigation stack,
selected tabs, scroll position.

00:08:40.850 --> 00:08:43.520
I'll go over many of those
as we go through the talk.

00:08:43.660 --> 00:08:46.160
And this is really convenient,
saves you a lot of time

00:08:46.160 --> 00:08:48.050
and effort as well.

00:08:49.070 --> 00:08:50.790
We made it very easy to adopt.

00:08:51.080 --> 00:08:53.000
You can opt in quickly.

00:08:53.130 --> 00:08:55.090
You can do pieces of your application.

00:08:55.190 --> 00:08:57.100
You don't have to do
the whole thing at once.

00:08:57.180 --> 00:09:01.920
So we really want to make it easy for
people to be able to start using this.

00:09:02.310 --> 00:09:04.830
If you have more than one application,
by using this,

00:09:04.830 --> 00:09:07.840
you get a consistent approach
to saving and restoring state.

00:09:08.200 --> 00:09:09.410
That's good for your users.

00:09:09.550 --> 00:09:10.840
It's also good for you.

00:09:10.840 --> 00:09:13.040
You don't have to keep
reinventing the wheel.

00:09:13.230 --> 00:09:18.040
And if more developers adopt this,
users will come to expect a specific,

00:09:18.040 --> 00:09:22.100
consistent approach,
and they'll get it when you have this.

00:09:23.010 --> 00:09:24.740
This is important.

00:09:24.740 --> 00:09:28.620
We've implemented some APIs,
mostly methods that you'll write,

00:09:28.740 --> 00:09:32.520
and it kind of focuses your attention
on the things you need to save,

00:09:32.520 --> 00:09:36.090
what you need to understand and do,
and we take care of a whole bunch

00:09:36.090 --> 00:09:39.850
of other stuff so you don't have
to do all this needless coding

00:09:39.920 --> 00:09:43.080
just to get the scaffolding set up.

00:09:43.080 --> 00:09:45.290
So what do you have to do?

00:09:46.700 --> 00:09:49.000
I talked about the semantic state.

00:09:49.000 --> 00:09:50.260
That's the first thing.

00:09:50.280 --> 00:09:51.540
Understand your app.

00:09:51.710 --> 00:09:53.060
Know thyself.

00:09:53.100 --> 00:09:54.410
You probably already do, so look at that.

00:09:54.540 --> 00:09:57.000
We've already got one knocked off.

00:09:57.200 --> 00:09:59.320
When you identify what
state you want to save,

00:09:59.510 --> 00:10:02.380
you write some methods
to save and restore it.

00:10:02.540 --> 00:10:05.890
So this seems pretty straightforward,
probably about what you'd expect, right?

00:10:06.010 --> 00:10:07.140
How do you save state?

00:10:07.180 --> 00:10:07.670
You save it.

00:10:07.860 --> 00:10:09.400
How do you restore it?

00:10:09.400 --> 00:10:10.640
You restore it.

00:10:10.710 --> 00:10:12.550
Here's the tricky part, though.

00:10:12.690 --> 00:10:16.260
Sometimes when an application starts
up and you want to get back to a state,

00:10:16.420 --> 00:10:19.410
the user might have pushed
some navigation on the stack.

00:10:19.550 --> 00:10:21.460
They might have presented
some controllers.

00:10:21.520 --> 00:10:23.060
And we'll need to recreate those.

00:10:23.310 --> 00:10:24.830
And we make it easy to do that.

00:10:25.030 --> 00:10:28.100
And you'll see how we can just
focus you on the right task

00:10:28.220 --> 00:10:30.080
to make sure we come back.

00:10:30.170 --> 00:10:33.670
I just want to caution you,
when you're saving and restoring state,

00:10:33.850 --> 00:10:37.710
don't conflate the model or
the view with your state.

00:10:37.830 --> 00:10:40.050
You've already got something
that manages your model data,

00:10:40.060 --> 00:10:44.460
a database, maybe you're document-based,
or there's a server with information.

00:10:44.520 --> 00:10:45.830
At best, you'd be redundant.

00:10:45.840 --> 00:10:47.410
At worst, it would be inconsistent.

00:10:47.530 --> 00:10:51.970
So you really want to focus on restoring
what the app is doing and not use

00:10:51.970 --> 00:10:54.490
this as a way to save model data.

00:10:54.640 --> 00:10:55.760
Same with views.

00:10:55.760 --> 00:10:57.850
You've already got something
that manages all your views.

00:10:57.860 --> 00:10:59.730
You've got code that you've written.

00:10:59.810 --> 00:11:01.230
You should be able to reuse all of that.

00:11:01.410 --> 00:11:05.960
If you're using storyboards or nibs,
it's all going to be very natural.

00:11:06.040 --> 00:11:07.160
Okay.

00:11:07.160 --> 00:11:10.460
So I'm going to wander over here,
put on my demo hat,

00:11:10.530 --> 00:11:12.630
and I got something quick to show you.

00:11:12.720 --> 00:11:13.840
Okay.

00:11:13.840 --> 00:11:15.930
So you can see here we have an iPhone.

00:11:16.050 --> 00:11:19.150
Hopefully you're all
familiar with the WWDC app.

00:11:19.570 --> 00:11:20.900
I love it.

00:11:20.950 --> 00:11:22.390
Use it all the time.

00:11:22.540 --> 00:11:26.230
So this is a fairly-- you know,
similar structure to many

00:11:26.230 --> 00:11:27.500
apps that you'll see.

00:11:27.500 --> 00:11:30.910
We've got a tab bar
controller at the top level,

00:11:30.940 --> 00:11:33.340
and we've got various things
that are pretty useful.

00:11:33.340 --> 00:11:36.900
So right here,
the first tab is the schedule,

00:11:36.900 --> 00:11:38.760
and it's got a navigation controller.

00:11:38.760 --> 00:11:40.500
We've got a table view
controller in here,

00:11:40.500 --> 00:11:42.540
and I'll scroll around a little bit.

00:11:42.540 --> 00:11:46.000
You know, maybe I'm curious about what's
happening a little bit later in the day.

00:11:46.000 --> 00:11:48.030
So I'm looking at Wednesday here.

00:11:48.160 --> 00:11:50.360
We've got a favorites tab.

00:11:50.650 --> 00:11:51.650
Similar.

00:11:51.660 --> 00:11:53.500
It's got a navigation
controller with a table view.

00:11:53.540 --> 00:11:57.500
I'm gonna just scroll down to the
bottom because I'm excited to see

00:11:57.500 --> 00:12:00.420
what's coming up at the end of the week.

00:12:00.620 --> 00:12:02.410
If you're lost, we've got some maps.

00:12:02.410 --> 00:12:05.170
This is pretty basic stuff,
and this is going to be

00:12:05.280 --> 00:12:06.320
common in a lot of apps.

00:12:06.430 --> 00:12:08.980
So let's say, you know,
I'm just kind of using this in

00:12:09.000 --> 00:12:10.410
the same way I normally would.

00:12:10.420 --> 00:12:12.220
I went to look at a certain time of day.

00:12:12.280 --> 00:12:14.110
I'm sort of checking out my favorites.

00:12:14.110 --> 00:12:16.260
I want to see what's
up on the third floor.

00:12:16.260 --> 00:12:18.260
Maybe there's some new news.

00:12:18.260 --> 00:12:18.800
Okay.

00:12:18.800 --> 00:12:21.320
So now I'm going to put
the app in the background.

00:12:21.320 --> 00:12:25.240
Either I decide to go do something else,
maybe the phone rings, whatever.

00:12:25.240 --> 00:12:29.340
Okay, so I'm going to do something
I don't recommend you normally do.

00:12:29.340 --> 00:12:30.480
I'm just doing it for personal use.

00:12:30.500 --> 00:12:32.580
I'm going to kill it outright.

00:12:32.580 --> 00:12:34.880
Okay, so that app's not running.

00:12:34.880 --> 00:12:38.800
So if we restarted this
application on iOS 5,

00:12:38.800 --> 00:12:41.320
it would just go right
back to the beginning.

00:12:41.320 --> 00:12:45.000
And that would be both kind of jarring
and it would interrupt your flow.

00:12:45.000 --> 00:12:47.780
Now, I just did this quick little demo,
so you saw what I did.

00:12:47.780 --> 00:12:49.400
You probably already remember.

00:12:49.400 --> 00:12:51.670
But imagine four hours
later you come back.

00:12:51.690 --> 00:12:53.330
What session was I looking at?

00:12:53.330 --> 00:12:54.890
Was I reading this news item?

00:12:54.900 --> 00:12:55.970
What was I doing?

00:12:55.980 --> 00:12:58.770
And maybe in your app,
you've written some code

00:12:58.780 --> 00:13:00.480
to handle this on iOS 5.

00:13:00.500 --> 00:13:03.770
or prior and could be pretty
complicated to get it all right.

00:13:04.050 --> 00:13:05.390
So let's see what happens here.

00:13:05.390 --> 00:13:07.660
I'm going to start it back up.

00:13:07.670 --> 00:13:09.260
Let's see where it goes.

00:13:09.470 --> 00:13:10.340
Alright, look at that.

00:13:10.450 --> 00:13:13.500
So we're back on the
same tab we had before.

00:13:13.500 --> 00:13:14.930
Still looking at news.

00:13:15.050 --> 00:13:17.170
So the app is kind of working for me.

00:13:17.170 --> 00:13:19.930
It's helping me to
remember what I was doing.

00:13:19.940 --> 00:13:22.820
So if we go back here,
still on the third floor.

00:13:22.820 --> 00:13:26.590
If I look at my favorites,
still scrolled to the bottom there,

00:13:26.590 --> 00:13:28.910
schedules at 10.15.

00:13:29.770 --> 00:13:32.830
So it's really like the
application had never quit.

00:13:32.830 --> 00:13:38.090
So let me just recap real
quick what was important there.

00:13:39.790 --> 00:13:40.590
So this is key.

00:13:40.830 --> 00:13:43.120
We brought the user right
back to where they were.

00:13:43.320 --> 00:13:45.010
So it feels kind of magical.

00:13:45.340 --> 00:13:47.800
You've probably noticed
if you do things right,

00:13:47.800 --> 00:13:50.240
people don't always give you any credit.

00:13:50.240 --> 00:13:52.480
You do something wrong,
you hear about it.

00:13:52.530 --> 00:13:55.910
So here, we want to do something right,
even if we don't get, you know,

00:13:55.910 --> 00:13:58.800
a big deal from the users,
this is really going to be nice.

00:13:58.800 --> 00:14:01.180
It's going to give
people a better feeling.

00:14:01.180 --> 00:14:03.070
This is also important.

00:14:03.080 --> 00:14:05.180
So even though a lot
of this wasn't visible,

00:14:05.180 --> 00:14:08.090
we remembered the state of the app,
even things that weren't

00:14:08.090 --> 00:14:09.500
being shown right away.

00:14:09.850 --> 00:14:12.660
Okay, so how much code was it to do that?

00:14:12.660 --> 00:14:14.430
How much did I have to write?

00:14:14.460 --> 00:14:16.840
You know, 50 lines, 20 lines?

00:14:16.840 --> 00:14:20.700
You know, well,
sometimes there actually is a free lunch,

00:14:20.870 --> 00:14:22.800
or at least an appetizer.

00:14:22.870 --> 00:14:25.830
So in this case, that was zero.

00:14:26.080 --> 00:14:27.840
Zero lines of code.

00:14:28.010 --> 00:14:30.190
So how did we do that?

00:14:34.260 --> 00:14:36.100
That's how we rope you in.

00:14:36.130 --> 00:14:37.100
Okay.

00:14:37.100 --> 00:14:38.730
So what do you have to do?

00:14:38.940 --> 00:14:41.460
I lied a little bit,
'cause I like the word "zero."

00:14:41.670 --> 00:14:43.310
There were two lines of code.

00:14:43.520 --> 00:14:46.600
Remember I mentioned you opt in,
so one line, "Yes,

00:14:46.600 --> 00:14:49.650
I would like to save state."
We'll see where that goes later.

00:14:49.850 --> 00:14:52.630
One line, "Yes, I would like to restore
it." That's pretty easy.

00:14:52.630 --> 00:14:53.260
You just write a method.

00:14:53.260 --> 00:14:55.920
But how do we get all the rest back?

00:14:56.490 --> 00:14:59.970
We added restoration identifiers
to everything we cared about.

00:15:00.060 --> 00:15:03.670
That includes the views we wanted to
have restored and the view controllers.

00:15:03.740 --> 00:15:05.630
And then we did the rest.

00:15:05.730 --> 00:15:09.000
So let me talk about restoration
identifiers for a minute.

00:15:09.380 --> 00:15:12.290
It's just a property,
both on view and view controller.

00:15:12.300 --> 00:15:15.180
You can set it whenever
you want in your code.

00:15:15.270 --> 00:15:18.200
But you can also set it
up in Interface Builder,

00:15:18.280 --> 00:15:22.600
which is really convenient when you're
constructing your nibs or storyboards.

00:15:22.660 --> 00:15:24.800
That's a good place
sometimes to think about,

00:15:24.840 --> 00:15:26.030
"Where do I want to name this?

00:15:26.080 --> 00:15:26.930
Where do I want to go?

00:15:27.050 --> 00:15:29.290
And what do I want to save?

00:15:30.800 --> 00:15:33.260
If something doesn't have
a restoration identifier,

00:15:33.370 --> 00:15:34.400
we don't touch it.

00:15:34.510 --> 00:15:37.110
So this is how you can kind
of opt in a piece at a time.

00:15:37.110 --> 00:15:40.280
So you start giving things
restoration identifiers,

00:15:40.460 --> 00:15:41.290
they start to play.

00:15:41.440 --> 00:15:44.270
If things don't have
restoration identifiers,

00:15:44.270 --> 00:15:45.320
they're out.

00:15:45.450 --> 00:15:49.160
And we also use this internally to
be able to map and find objects.

00:15:49.240 --> 00:15:53.670
You can actually refer to other objects
in your state restoration archive and

00:15:53.670 --> 00:15:56.100
we'll wire them back up correctly.

00:15:57.290 --> 00:15:59.110
So here we are in Interface Builder.

00:15:59.230 --> 00:16:02.000
I actually liked Chris's picture
better if you saw the last talk.

00:16:02.000 --> 00:16:04.980
But anyway,
I've got a view controller over here.

00:16:05.020 --> 00:16:10.110
And on the right side in the properties,
here's my restoration ID.

00:16:10.270 --> 00:16:13.860
Now, if you're using a storyboard,
you might have already set a

00:16:13.860 --> 00:16:16.260
storyboard ID for a view controller.

00:16:16.260 --> 00:16:20.340
We do that so that you can
instantiate the view controller from

00:16:20.340 --> 00:16:23.460
code right out of the storyboard
or you can wire things up,

00:16:23.470 --> 00:16:24.380
have segues.

00:16:24.480 --> 00:16:27.260
And I would recommend if
you're using a storyboard ID,

00:16:27.280 --> 00:16:29.480
set the restoration ID to the same thing.

00:16:29.510 --> 00:16:32.370
So you see the convenient
little checkbox right there.

00:16:32.370 --> 00:16:33.800
It will fill it in for you.

00:16:33.860 --> 00:16:36.060
Otherwise, the left hand thinks
it's called one thing.

00:16:36.060 --> 00:16:38.700
The right hand thinks it's
called something else.

00:16:38.710 --> 00:16:41.240
Now, we still let you set it
differently if you want to.

00:16:41.410 --> 00:16:42.540
There might be a good reason.

00:16:42.540 --> 00:16:45.240
You know, your data model and the way
that your view controllers are

00:16:45.240 --> 00:16:47.370
constructed may require that.

00:16:47.500 --> 00:16:51.460
But as a general rule,
I'd start by using the same ID.

00:16:51.460 --> 00:16:54.010
So let's look at the
example app that we had.

00:16:54.110 --> 00:16:56.080
How did we wire that up?

00:16:56.090 --> 00:16:59.390
Well,
we had a root tab bar and I gave it the

00:16:59.420 --> 00:17:01.620
restoration identifier root tab bar.

00:17:01.620 --> 00:17:03.920
I actually like to use the
word root at the top level.

00:17:03.920 --> 00:17:06.640
It makes debugging a little
bit easier when you see that

00:17:06.640 --> 00:17:08.320
and pin things off of that.

00:17:08.320 --> 00:17:09.140
We had some children.

00:17:09.140 --> 00:17:11.890
I didn't show them all just so the
picture wouldn't be too cluttered.

00:17:11.890 --> 00:17:14.520
But you can see I have a
navigation for schedule.

00:17:14.590 --> 00:17:16.460
I have one for favorites.

00:17:16.460 --> 00:17:17.410
I've got my map.

00:17:17.710 --> 00:17:22.150
And those first two actually were
navigation controllers with a child.

00:17:22.150 --> 00:17:23.570
So I gave them names.

00:17:23.580 --> 00:17:24.390
And here's our views.

00:17:24.390 --> 00:17:29.960
So I cared about restoring the schedule,
the favorites, the tab bar,

00:17:30.270 --> 00:17:33.520
the navigation stack,
and I also cared about these three views.

00:17:33.530 --> 00:17:36.450
The map scroller got us to
the right map automatically.

00:17:36.530 --> 00:17:40.680
That was actually just a scrolling
view we snapped to a quantum.

00:17:40.800 --> 00:17:42.870
And then the schedule table and
the favorites table remembered

00:17:42.870 --> 00:17:44.620
where they were scrolled to for us.

00:17:44.780 --> 00:17:47.270
So we got a lot of stuff for free there.

00:17:47.450 --> 00:17:50.200
Now when we track the
restoration identifier,

00:17:50.220 --> 00:17:52.340
we actually track a scoped path.

00:17:52.390 --> 00:17:55.140
You notice that we have a
hierarchy of view controllers,

00:17:55.190 --> 00:17:58.500
so we want to keep track of
these things using the same path.

00:17:58.660 --> 00:18:01.160
Here we're starting off with the tab bar.

00:18:01.210 --> 00:18:02.160
Here's our navigation.

00:18:02.160 --> 00:18:04.570
You notice up at the top
it's like a file path.

00:18:04.620 --> 00:18:06.580
It's just a simple scoped path.

00:18:06.650 --> 00:18:09.630
So we'll go down to the schedule,
finally down to his view.

00:18:09.740 --> 00:18:11.680
So you can see we built up a path.

00:18:11.720 --> 00:18:15.650
The reason we do that is so you
can use the same restoration

00:18:15.650 --> 00:18:18.370
identifier in multiple places.

00:18:18.410 --> 00:18:22.340
As long as they're in different places,
you can keep the same ID.

00:18:22.340 --> 00:18:24.180
All right, so here's an example.

00:18:24.220 --> 00:18:25.850
We've got a list of contacts.

00:18:25.910 --> 00:18:29.520
So what would be a good
restoration identifier for that?

00:18:29.520 --> 00:18:30.300
I don't know.

00:18:30.300 --> 00:18:31.220
Contact list.

00:18:31.220 --> 00:18:32.890
We pick a contact.

00:18:33.020 --> 00:18:34.730
We pull it out of a storyboard.

00:18:34.760 --> 00:18:37.920
And let's say that we set the
restoration identifier in the storyboard.

00:18:37.990 --> 00:18:39.700
So now I've got contact details.

00:18:39.760 --> 00:18:41.850
Should I call it?

00:18:41.870 --> 00:18:42.050
How about contact details?

00:18:42.080 --> 00:18:43.050
I'm going to call it contact details.

00:18:43.050 --> 00:18:45.360
All right, so we've pulled this out.

00:18:45.450 --> 00:18:48.850
And you'll notice right here we've
got some linked contacts so we can

00:18:48.880 --> 00:18:51.040
get to another contact from here.

00:18:51.060 --> 00:18:53.770
And when I select one of those,
I'm just going to go pull one of

00:18:53.770 --> 00:18:56.080
these out of the storyboard again.

00:18:56.080 --> 00:18:58.550
And what's it going to have
for a restoration identifier?

00:18:58.670 --> 00:18:59.310
Same thing.

00:18:59.310 --> 00:19:01.840
Is that okay?

00:19:01.840 --> 00:19:03.410
Well, it turns out it's fine.

00:19:03.410 --> 00:19:06.490
As long as you're not in the
same part of the hierarchy,

00:19:06.650 --> 00:19:08.460
you can use the same ID.

00:19:08.550 --> 00:19:11.450
And really for view controllers,
the same part of the hierarchy

00:19:11.450 --> 00:19:13.060
really just doesn't matter.

00:19:13.060 --> 00:19:14.070
They're at the root level.

00:19:14.130 --> 00:19:17.540
So if your application delegate sometimes
swaps out an entire tree of view

00:19:17.560 --> 00:19:22.460
controllers and puts in another one,
don't give the roots the same name.

00:19:22.460 --> 00:19:26.660
For views, you can't give any two views
in the same view controller,

00:19:26.670 --> 00:19:28.440
the same restoration identifier.

00:19:28.440 --> 00:19:30.720
But across view controllers, that's fine.

00:19:30.770 --> 00:19:34.630
So that means you don't have to contrive
these big long-winded weird names to

00:19:34.630 --> 00:19:37.260
try to identify the path to get to them.

00:19:37.260 --> 00:19:37.790
Okay.

00:19:37.940 --> 00:19:40.890
Let's go back to the same
example we have before,

00:19:40.890 --> 00:19:43.550
see a couple more things.

00:19:43.820 --> 00:19:46.000
Okay, so here we are on the Favorites.

00:19:46.000 --> 00:19:50.340
Let's say that we want to go and
look at one of these in particular.

00:19:50.340 --> 00:19:52.590
So I like asynchronous design patterns.

00:19:52.730 --> 00:19:54.460
That's a totally cool one.

00:19:54.460 --> 00:19:55.460
So here I am.

00:19:55.460 --> 00:19:59.100
I just pushed something on my
nav stack in that Favorites tab.

00:19:59.100 --> 00:20:00.940
And I want to make sure
I know where it is.

00:20:00.940 --> 00:20:01.940
There's the pin.

00:20:01.940 --> 00:20:02.930
It's in Pacific Heights.

00:20:03.440 --> 00:20:03.940
Cool.

00:20:03.940 --> 00:20:07.030
And now I'm gonna go back
and-- I actually want to read

00:20:07.030 --> 00:20:10.490
the description a little bit,
prepare myself before I go.

00:20:10.500 --> 00:20:12.800
But before I do that,
I want to look at a few other things.

00:20:12.800 --> 00:20:13.790
And you know how it is.

00:20:13.800 --> 00:20:16.510
You jump around in an app
sometimes and you leave little

00:20:16.560 --> 00:20:18.500
breadcrumbs to go back to.

00:20:18.500 --> 00:20:21.420
So what I'm gonna do here,
I'm gonna change the day to

00:20:21.420 --> 00:20:25.300
Monday because I remember there was
some interesting stuff on Monday.

00:20:25.420 --> 00:20:26.420
But wait a minute.

00:20:26.420 --> 00:20:27.420
There was more than that.

00:20:27.420 --> 00:20:28.420
Where did it go?

00:20:28.440 --> 00:20:31.200
Well, I turned off labs in this filter.

00:20:31.200 --> 00:20:32.600
So I'm gonna turn them back on.

00:20:32.600 --> 00:20:34.340
So let me just dismiss that.

00:20:34.340 --> 00:20:38.320
So I had a PresentedController that
set up some semantic state for me.

00:20:38.340 --> 00:20:41.240
So let's say that I pull that up
and I want to hone in on some stuff.

00:20:41.240 --> 00:20:42.240
Maybe I scroll to the bottom.

00:20:42.240 --> 00:20:43.570
to see if there's anything important.

00:20:43.620 --> 00:20:44.760
And, oh, the phone rings.

00:20:46.770 --> 00:20:48.660
Well, you can see where this is going.

00:20:48.700 --> 00:20:51.840
Let's say the phone rings,
somebody wants to go out and get coffee,

00:20:51.840 --> 00:20:53.790
we want to talk about
one of the sessions,

00:20:53.790 --> 00:20:57.900
we're having fun, we're writing code,
one thing leads to another,

00:20:57.900 --> 00:21:00.580
this poor application gets killed.

00:21:00.800 --> 00:21:02.230
Now that app's all gone.

00:21:02.420 --> 00:21:03.360
All right.

00:21:03.480 --> 00:21:07.200
Now, six hours later, I come back to it,
and I'm like, "All right,

00:21:07.200 --> 00:21:10.750
let me prepare for what I want to do
tomorrow." I start the app back up.

00:21:11.050 --> 00:21:12.980
What's it going to do?

00:21:13.300 --> 00:21:14.200
Look at that.

00:21:14.360 --> 00:21:16.430
Got our presented controller back.

00:21:16.550 --> 00:21:19.120
It's even scrolled to the right place.

00:21:19.190 --> 00:21:20.200
All right.

00:21:20.200 --> 00:21:21.270
So we'll get rid of him.

00:21:21.530 --> 00:21:23.260
It still remembers that it was Monday.

00:21:23.260 --> 00:21:24.290
You can see up there.

00:21:24.470 --> 00:21:27.420
And it has the correct
sessions loaded for Monday,

00:21:27.420 --> 00:21:29.620
which is important because
when you change the day,

00:21:29.700 --> 00:21:31.420
you've got to reload that table view.

00:21:31.480 --> 00:21:33.300
So we want to have the right info there.

00:21:33.370 --> 00:21:34.140
How about favorites?

00:21:34.230 --> 00:21:35.480
What was I doing on favorites?

00:21:35.550 --> 00:21:37.580
I knew I was doing something.

00:21:37.630 --> 00:21:38.100
There we go.

00:21:38.260 --> 00:21:39.970
I wanted to read that description.

00:21:40.000 --> 00:21:40.740
So here I am.

00:21:40.740 --> 00:21:42.900
I'm scrolled to the right place.

00:21:42.940 --> 00:21:46.340
And I've still got the correct
favorite that was selected.

00:21:46.340 --> 00:21:49.460
And when I come back off, you know,
it's even going to sort of

00:21:49.550 --> 00:21:53.940
nicely transition that cell that
shows me what I had selected.

00:21:53.980 --> 00:21:54.400
Okay.

00:21:54.840 --> 00:21:58.190
So let's see what we
had to do to get that.

00:22:01.370 --> 00:22:02.830
So now you do get to write
a little bit of code.

00:22:02.840 --> 00:22:05.390
What exactly did you do there?

00:22:05.840 --> 00:22:08.300
Okay, so we had the day.

00:22:08.300 --> 00:22:09.300
We remembered that.

00:22:09.320 --> 00:22:11.800
We remembered what was in the
table view for the current day.

00:22:11.800 --> 00:22:13.690
We introduced something new.

00:22:13.700 --> 00:22:16.400
We created a new view
controller for that session.

00:22:16.400 --> 00:22:18.030
We put that on our nav stack.

00:22:18.060 --> 00:22:20.730
We also presented a controller.

00:22:20.740 --> 00:22:23.910
And what's interesting about that,
and this is probably a common

00:22:23.910 --> 00:22:26.980
thing that people do in apps,
we had some shared state.

00:22:27.000 --> 00:22:29.820
So a lot of these objects
don't exist in isolation.

00:22:30.400 --> 00:22:32.600
When you create a view
controller to present it,

00:22:32.840 --> 00:22:35.450
you'll often hand it some
other piece of context,

00:22:35.570 --> 00:22:36.290
another object.

00:22:36.300 --> 00:22:39.290
In this case,
it had a reference to one of

00:22:39.290 --> 00:22:40.500
the other view controllers.

00:22:40.500 --> 00:22:44.760
So it could query it for the data
store and be wired into the application

00:22:44.760 --> 00:22:46.330
and not just out there in the fringe.

00:22:48.210 --> 00:22:51.990
We had to create both the session
details that we were looking

00:22:52.640 --> 00:22:54.590
at and the presented filter.

00:22:54.700 --> 00:22:58.440
That's because when the app starts up,
it's not going to create them by default.

00:22:58.470 --> 00:23:01.240
Your application is not going to
start up and create every possible

00:23:01.240 --> 00:23:04.590
view controller just on the off
chance you might want to restore it.

00:23:04.710 --> 00:23:08.510
So we'll do it in a targeted fashion,
and then we'll restore the state.

00:23:08.570 --> 00:23:10.620
So let's look at all that.

00:23:11.070 --> 00:23:13.390
Before I talk about
actually how the code works,

00:23:13.400 --> 00:23:15.270
though,
I want to just show you quickly the

00:23:15.270 --> 00:23:18.350
structure of the restoration archive.

00:23:18.650 --> 00:23:21.880
These are all keyed archivers,
which is great because keyed

00:23:21.880 --> 00:23:23.280
archivers are really convenient.

00:23:23.280 --> 00:23:25.510
You know,
you can give things semantic key names

00:23:25.660 --> 00:23:27.640
that represent what you're saving.

00:23:27.670 --> 00:23:30.480
You get one for the top
level application delegate.

00:23:30.510 --> 00:23:32.280
There's a few methods we call on that.

00:23:32.280 --> 00:23:34.100
They'll all get the same coder.

00:23:34.140 --> 00:23:37.140
Every one of your view controllers
gets its own keyed archiver.

00:23:37.230 --> 00:23:39.740
So we've got one at the
root level with the tab bar,

00:23:39.740 --> 00:23:42.260
and then all the other view
controllers get their own.

00:23:42.410 --> 00:23:47.150
Finally, any views that save state,
they get their own coder.

00:23:47.230 --> 00:23:47.910
So this is nice.

00:23:47.910 --> 00:23:51.880
Again, you don't have to contrive weird
names to try to disambiguate things.

00:23:51.880 --> 00:23:55.400
You could just call a comment a comment,
whatever you want, you know,

00:23:55.780 --> 00:23:57.660
something in the table,
you can give it a rational

00:23:57.660 --> 00:23:58.820
name that makes sense.

00:23:58.820 --> 00:24:02.970
It's going to be in your own
little cubby hole for that object.

00:24:03.010 --> 00:24:05.390
Okay, let's look at saving code.

00:24:05.400 --> 00:24:08.180
So remember I changed the
date of Monday over here.

00:24:08.500 --> 00:24:10.690
So what did I have to do?

00:24:11.320 --> 00:24:15.710
We have a new method that you
implement on ViewController,

00:24:15.710 --> 00:24:17.630
EncodeRestorableStateWithCoder.

00:24:17.690 --> 00:24:19.140
It gets passed in an NSCoder.

00:24:19.140 --> 00:24:21.410
It's actually that keyed
archiver I told you about.

00:24:21.490 --> 00:24:22.640
So you'll implement this.

00:24:22.720 --> 00:24:24.640
So what do you have to save here?

00:24:24.720 --> 00:24:28.340
We wanted to remember what day it was,
so it's pretty simple.

00:24:28.430 --> 00:24:33.020
We just ask the data source,
"What day did I tell you it was?"

00:24:33.320 --> 00:24:34.700
We save that.

00:24:34.840 --> 00:24:35.400
Hey, we're done.

00:24:35.640 --> 00:24:35.940
That was it.

00:24:36.020 --> 00:24:39.020
That's all you had to
do to get that back.

00:24:39.470 --> 00:24:40.750
Don't forget to call super.

00:24:40.910 --> 00:24:45.290
We do have some default behaviors
that you'll get when you do that.

00:24:45.400 --> 00:24:47.700
Also, it's tempting when you're
writing this code to just type

00:24:47.830 --> 00:24:48.930
in the name of the string.

00:24:48.940 --> 00:24:52.070
I probably don't have to tell you this,
but if you use a define

00:24:52.110 --> 00:24:54.410
or a constant string,
it's going to be a lot nicer

00:24:54.410 --> 00:24:58.300
because you're going to use
that same key when you decode.

00:24:58.300 --> 00:24:59.710
It avoids errors.

00:24:59.800 --> 00:25:00.170
Okay.

00:25:00.510 --> 00:25:03.280
How about the session details?

00:25:03.320 --> 00:25:04.400
This one's interesting.

00:25:04.560 --> 00:25:07.150
So we actually created the
session view controller.

00:25:07.360 --> 00:25:09.000
We want to come back and restore that.

00:25:09.160 --> 00:25:11.190
So what do you think we need to save?

00:25:11.190 --> 00:25:13.960
Well,
we had a description for that session.

00:25:13.960 --> 00:25:15.730
We had a title, what time it was.

00:25:15.730 --> 00:25:18.120
We had a map that showed
us how to get there.

00:25:18.120 --> 00:25:19.910
Do we need to save that?

00:25:19.910 --> 00:25:21.180
Actually not.

00:25:21.190 --> 00:25:24.510
Let's just grab the session
ID out of our data model.

00:25:24.560 --> 00:25:28.240
So in our application,
every session has a unique ID.

00:25:28.240 --> 00:25:31.960
So all I have to do is
save that and I'm done.

00:25:31.980 --> 00:25:35.690
Now, one other thing that we keep track
of in our application is where

00:25:35.690 --> 00:25:37.260
we showed that session object.

00:25:37.260 --> 00:25:39.600
And this is something you
might do in your code as well.

00:25:39.710 --> 00:25:43.970
You'll have a view controller that
you pull out of a nib or a storyboard,

00:25:44.030 --> 00:25:47.620
and you'll place it in various
different parts of your app.

00:25:47.820 --> 00:25:50.720
So this might go in the schedule view,
that first tab,

00:25:50.720 --> 00:25:52.770
or it might go in the favorites view.

00:25:52.940 --> 00:25:55.360
And in fact,
that's exactly how our app works.

00:25:55.470 --> 00:25:57.760
We want to save a Boolean
so that when we come back,

00:25:57.760 --> 00:26:00.230
we remember where we're supposed to be.

00:26:00.380 --> 00:26:01.720
Pretty easy.

00:26:01.860 --> 00:26:04.600
Super and some defaults and you're done.

00:26:04.620 --> 00:26:05.490
How about the filter?

00:26:05.490 --> 00:26:07.230
What do we have to save for that?

00:26:08.890 --> 00:26:11.990
I mentioned that we were
sharing a view controller.

00:26:12.110 --> 00:26:15.470
We had some shared context so
that this guy wasn't a lone wolf,

00:26:15.470 --> 00:26:18.120
but he was actually wired into the app.

00:26:18.120 --> 00:26:20.900
So we're going to go and we're going to
encode one of the other view controllers,

00:26:21.040 --> 00:26:24.140
just an instance variable that
I set up when I created it.

00:26:24.280 --> 00:26:27.670
We don't really save the
whole view controller.

00:26:28.380 --> 00:26:29.840
We just save a reference.

00:26:29.940 --> 00:26:32.080
That's because we don't want to
restore another view controller

00:26:32.080 --> 00:26:34.060
object that's not the one you expect.

00:26:34.080 --> 00:26:37.140
So we'll save a reference to it,
wire you back up later,

00:26:37.160 --> 00:26:38.450
and we'll see that happen.

00:26:38.510 --> 00:26:40.410
Call super, we have our define,
we're cool.

00:26:40.560 --> 00:26:41.480
Okay, how about all the views?

00:26:41.480 --> 00:26:42.850
There was a whole bunch
of views in there.

00:26:42.850 --> 00:26:45.020
There were table view cells,
we had the title,

00:26:45.020 --> 00:26:47.330
we had a whole bunch of different stuff.

00:26:47.330 --> 00:26:50.300
You don't have to save any of those.

00:26:50.300 --> 00:26:52.920
Well, we have some default behaviors.

00:26:53.120 --> 00:26:55.070
We remember the scrolling
position for views,

00:26:55.070 --> 00:26:57.680
so that's why you didn't
have to take care of that.

00:26:57.680 --> 00:27:00.160
But also, in general,
your views just kind

00:27:00.160 --> 00:27:01.590
of come back naturally.

00:27:01.590 --> 00:27:05.110
We're trying to devise a way for
you to leverage all the code you've

00:27:05.110 --> 00:27:08.640
already written that brings your app
to whatever state it's in so that when

00:27:08.640 --> 00:27:11.200
you come back in state restoration,
you don't have to go and reinvent

00:27:11.270 --> 00:27:12.670
the wheel and duplicate stuff.

00:27:12.790 --> 00:27:15.050
Okay.

00:27:15.120 --> 00:27:17.250
So let's look at the
control flow for doing that.

00:27:17.250 --> 00:27:20.850
Again, a little diagram here,
pretty simple.

00:27:20.890 --> 00:27:21.430
Okay.

00:27:21.620 --> 00:27:23.700
So I mentioned this is opt-in.

00:27:23.830 --> 00:27:26.140
So this is the first thing we
do is we ask the app delegate

00:27:26.140 --> 00:27:27.690
if we should even save state.

00:27:27.940 --> 00:27:28.520
Might say no.

00:27:28.520 --> 00:27:30.340
If it does, we're done.

00:27:30.370 --> 00:27:32.580
We're sad, but we're done.

00:27:32.580 --> 00:27:37.620
If it says yes, happy face.

00:27:37.620 --> 00:27:41.220
Then we will tell the delegate that
we're going to encode its state.

00:27:41.220 --> 00:27:45.340
So we call a method application,
will encode RestorableStateWithCoder.

00:27:45.340 --> 00:27:47.940
Now, both of these methods actually
get passed to the same coder.

00:27:48.010 --> 00:27:50.510
It's that top-level keyed
archiver for the app delegate.

00:27:50.680 --> 00:27:53.960
So it can track whatever it wants,
things that might be relevant to the app.

00:27:53.960 --> 00:27:54.950
So we're going to call it,
and we're going to call it the app.

00:27:54.950 --> 00:27:56.010
So we're going to call it the app.

00:27:56.010 --> 00:27:56.870
So we're going to call it the app.

00:27:56.870 --> 00:27:57.210
So we're going to call it the app.

00:27:57.240 --> 00:27:57.680
So we're going to call it the app.

00:27:57.680 --> 00:27:58.110
And then we're going to call it the app.

00:27:58.110 --> 00:27:58.680
And then we're going to call it the app.

00:27:58.680 --> 00:27:58.930
So we're going to call it the app.

00:27:59.000 --> 00:27:59.380
And then we're going to call it the app.

00:27:59.390 --> 00:27:59.870
So we're going to call it the app.

00:27:59.870 --> 00:28:00.280
And then we're going to call it the app.

00:28:00.320 --> 00:28:00.810
And then we're going to call it the app.

00:28:00.860 --> 00:28:01.250
And then we're going to call it the app.

00:28:01.250 --> 00:28:01.750
And then we're going to call it the app.

00:28:01.760 --> 00:28:02.180
And then we're going to call it the app.

00:28:02.180 --> 00:28:02.680
And then we're going to call it the app.

00:28:05.280 --> 00:28:07.700
We look at the windows
on the main screen,

00:28:07.750 --> 00:28:09.370
main screen only.

00:28:09.440 --> 00:28:12.720
We look for the root view
controllers for those windows that

00:28:12.720 --> 00:28:14.360
have a restoration identifier.

00:28:14.360 --> 00:28:18.430
If we find any, we put them in a list,
we save their state.

00:28:18.440 --> 00:28:21.170
We tell them to save state and
you saw those methods and code

00:28:21.190 --> 00:28:22.760
Restorable State with Coder.

00:28:22.760 --> 00:28:34.370
We save state in view
controllers and views.

00:28:34.370 --> 00:28:37.480
You might actually refer
to other view controllers.

00:28:37.530 --> 00:28:40.250
We saw that with the filter,
that presented controller.

00:28:40.300 --> 00:28:42.050
It referred to another view controller.

00:28:42.120 --> 00:28:44.690
Navigation controller
refers to its children.

00:28:44.690 --> 00:28:47.000
Tab bar controller
refers to its children.

00:28:47.060 --> 00:28:50.950
So we find that there's more view
controllers we need to take into account.

00:28:50.960 --> 00:28:52.760
We tack them on the end of a list.

00:28:52.760 --> 00:28:55.010
We loop back, take care of those.

00:28:55.430 --> 00:28:56.560
Maybe we get a few more.

00:28:56.560 --> 00:29:02.350
Eventually, hopefully,
it finishes and we're all done.

00:29:02.600 --> 00:29:04.810
Okay,
I just want to talk for a moment about

00:29:04.810 --> 00:29:09.260
how to manage view controllers in a way
that works well with state restoration.

00:29:09.390 --> 00:29:12.490
So there's two major things
to keep track of with this.

00:29:12.610 --> 00:29:16.630
One is, how do we find view controllers
when we're restoring state?

00:29:16.730 --> 00:29:18.120
We saw a few examples here.

00:29:18.420 --> 00:29:20.840
How did we find all the view controllers?

00:29:21.010 --> 00:29:23.100
So let's go into that.

00:29:24.830 --> 00:29:27.110
In the first demo,
you didn't have to write any

00:29:27.110 --> 00:29:28.900
code to return view controllers.

00:29:28.980 --> 00:29:31.160
We were able to find them implicitly.

00:29:31.270 --> 00:29:34.760
We did that because they were
created before we needed them.

00:29:34.920 --> 00:29:38.780
So if your application starts up,
the main storyboard of the main nib

00:29:38.780 --> 00:29:42.190
creates a set of view controllers,
or you do it in code before

00:29:42.190 --> 00:29:46.260
state restoration starts,
we can find them.

00:29:46.550 --> 00:29:49.080
Now, if you have view controllers
that aren't normally part of your

00:29:49.080 --> 00:29:52.740
application when it starts up,
we're going to have to ask for them.

00:29:52.740 --> 00:29:55.590
And the best way for your
application to do this is to

00:29:55.680 --> 00:29:58.140
specify a restoration class.

00:29:58.140 --> 00:30:00.360
It's actually a factory.

00:30:00.390 --> 00:30:02.070
There will be a class
method we'll consult.

00:30:02.070 --> 00:30:03.560
We'll ask for a view controller.

00:30:03.560 --> 00:30:06.910
We'll give it the whole restoration path
so you know which one we're asking for.

00:30:06.910 --> 00:30:10.980
We'll even give you the coder so you can
look in there if you need any context.

00:30:10.980 --> 00:30:15.060
So that's nice because it encapsulates
the code that finds things along

00:30:15.070 --> 00:30:16.700
with the code that creates them.

00:30:16.800 --> 00:30:20.410
So whatever's managing view controllers
and creating them in the first place is

00:30:20.410 --> 00:30:24.460
going to be what's used to restore them,
to find it when we're doing restoration.

00:30:24.480 --> 00:30:27.520
There's also kind of a
catch-all on the app delegate.

00:30:27.520 --> 00:30:31.320
If we can't find it implicitly and if
you don't have a restoration class,

00:30:31.320 --> 00:30:34.520
then we'll call a method on
the application delegate and

00:30:34.520 --> 00:30:36.240
ask for the view controller.

00:30:36.240 --> 00:30:39.240
And that's convenient for things
like root level view controllers.

00:30:39.240 --> 00:30:42.180
If you're changing your view
controller hierarchy at the top,

00:30:42.180 --> 00:30:46.830
if there's any code that your application
delegate uses to create view controllers,

00:30:46.880 --> 00:30:50.660
you probably want to keep the code
to find them in the same place.

00:30:50.860 --> 00:30:52.730
So we can do that.

00:30:53.720 --> 00:30:56.700
And it's always fine to return nil.

00:30:56.770 --> 00:30:58.660
If we're asking for a
presented controller,

00:30:58.660 --> 00:31:00.860
we get back nil,
we just won't present it.

00:31:00.940 --> 00:31:04.060
If we're asking for something on
a nav stack and we get back nil,

00:31:04.150 --> 00:31:04.840
we'll ignore it.

00:31:04.840 --> 00:31:07.320
We just won't go down that
far in the navigation stack.

00:31:07.340 --> 00:31:11.520
And it turns out that because your
application might be restarting

00:31:11.520 --> 00:31:15.590
after the data's changed drastically,
something that the user was looking

00:31:15.590 --> 00:31:17.940
at may no longer be relevant,
may not exist.

00:31:17.960 --> 00:31:20.590
Or you might have had a
presented controller that said,

00:31:20.590 --> 00:31:24.240
"You need to set up an account."
They go set that account up on another

00:31:24.240 --> 00:31:26.140
device and your app starts back up.

00:31:26.200 --> 00:31:29.470
You don't want to show them something
that's useless at that point.

00:31:29.500 --> 00:31:31.050
So you can just return nil.

00:31:31.560 --> 00:31:33.370
We'll be fine.

00:31:34.710 --> 00:31:37.140
Now, you've already created view
controllers in your application.

00:31:37.300 --> 00:31:39.160
Otherwise,
it really wouldn't do very much.

00:31:39.290 --> 00:31:41.990
But there's some things that you
can do that sort of make state

00:31:41.990 --> 00:31:44.960
restoration a little bit easier.

00:31:45.160 --> 00:31:50.160
So it's tempting sometimes when you
create a view controller in response

00:31:50.160 --> 00:31:53.630
to some user action to create it,
configure it for the

00:31:53.720 --> 00:31:57.100
specific context it's in,
and then present it right then and there.

00:31:57.100 --> 00:31:59.200
So you have, like, one nice method.

00:31:59.270 --> 00:32:01.660
I need to create a person,
go and make it.

00:32:01.660 --> 00:32:03.200
Here's some initialization info.

00:32:03.200 --> 00:32:04.490
Here's the context it's in.

00:32:04.570 --> 00:32:05.800
Present it for me.

00:32:05.930 --> 00:32:08.520
But if you do that,
you can't really reuse that

00:32:08.670 --> 00:32:11.870
code when we ask for the view
controller during state restoration,

00:32:11.900 --> 00:32:12.820
'cause we just want to get it.

00:32:12.900 --> 00:32:15.490
We're gonna present it or
push it on the nav stack.

00:32:15.590 --> 00:32:18.300
And you're also gonna decode
its state from a coder,

00:32:18.300 --> 00:32:22.400
so you don't want to jump the gun
and set it up in a specific way.

00:32:22.480 --> 00:32:24.840
So you can write a shared
initialization routine,

00:32:24.910 --> 00:32:27.840
and you use it during
your normal operation,

00:32:27.910 --> 00:32:29.480
just as you would now.

00:32:29.560 --> 00:32:33.000
And you'll also consult that when
we ask for the view controller.

00:32:33.070 --> 00:32:35.300
And it turns out if you
structure your code this way,

00:32:35.380 --> 00:32:38.770
it becomes much more natural to do this,
and it doesn't cost you anything

00:32:38.770 --> 00:32:40.960
more to do it like that.

00:32:41.560 --> 00:32:45.500
It's also a good place to
set the restoration class.

00:32:45.610 --> 00:32:48.920
So if you're using a restoration
class to encapsulate the creation,

00:32:49.040 --> 00:32:53.090
you don't really want to have multiple
sites that create view controllers and

00:32:53.090 --> 00:32:55.760
forget to set the class in one of them.

00:32:56.940 --> 00:33:01.140
So let's look at the session
details and see how we did it there.

00:33:01.140 --> 00:33:02.200
So I got some code up here.

00:33:02.400 --> 00:33:02.860
Okay.

00:33:03.120 --> 00:33:05.900
So here's a shared initialization method.

00:33:05.930 --> 00:33:06.600
I'm setting it up.

00:33:06.680 --> 00:33:09.040
Now,
the view controller will need some things

00:33:09.040 --> 00:33:12.740
to come into existence fully formed
so that it can operate and function.

00:33:12.740 --> 00:33:15.080
So we're telling it what
session it represents.

00:33:15.110 --> 00:33:19.710
And this is also a nice place, as I said,
to set the restoration class.

00:33:19.710 --> 00:33:22.800
Now, why am I setting the
restoration identifier here?

00:33:22.800 --> 00:33:24.110
I could set it in a nib.

00:33:24.110 --> 00:33:26.790
Well, in this case,
I've got an init method.

00:33:26.950 --> 00:33:28.360
I'm not actually using a nib.

00:33:28.410 --> 00:33:31.040
I'm actually creating this just in code.

00:33:31.130 --> 00:33:32.800
And that's a common thing to do.

00:33:32.920 --> 00:33:37.220
So in that case, don't forget to set your
restoration identifier in the code.

00:33:37.220 --> 00:33:39.900
Why am I using response to selector?

00:33:40.020 --> 00:33:42.650
Why am I bothering to do that?

00:33:42.900 --> 00:33:46.460
Well, when you implement this for iOS 6,
you get a great new feature,

00:33:46.460 --> 00:33:50.080
but you don't want to lock out
users on previous versions that

00:33:50.080 --> 00:33:51.470
haven't been able to upgrade yet.

00:33:51.500 --> 00:33:55.850
So by doing a response to selector check,
you won't erroneously try to set

00:33:55.850 --> 00:34:00.040
a property that doesn't exist
on iOS 5.1 or older versions,

00:34:00.060 --> 00:34:01.880
and your code will
continue to work there.

00:34:01.880 --> 00:34:04.230
You just won't get the feature,
which you don't lose.

00:34:04.260 --> 00:34:07.930
Now, let's say you did use
a nib or a storyboard.

00:34:07.940 --> 00:34:10.550
We still need to set
that restoration class.

00:34:10.650 --> 00:34:12.810
How do we do it when we're
pulling an object out of a nib?

00:34:12.820 --> 00:34:15.590
I recommend putting it in Awake from Nib.

00:34:15.600 --> 00:34:18.110
Just set the restoration
class right there.

00:34:18.120 --> 00:34:19.200
Easy peasy.

00:34:19.200 --> 00:34:19.840
Okay.

00:34:19.840 --> 00:34:24.410
Now, in the previous slide,
I showed an init with session.

00:34:24.420 --> 00:34:27.310
If you pull things out of a nib,
you're going to want some shared

00:34:27.310 --> 00:34:30.790
initialization that you can call
just to make this object functional.

00:34:30.800 --> 00:34:33.120
So here we have it right here,
just a simple method.

00:34:33.120 --> 00:34:35.850
So that replaces creating
it in code entirely.

00:34:37.870 --> 00:34:40.040
So with that in mind,
let's look at what we did

00:34:40.600 --> 00:34:42.140
to restore everything.

00:34:42.160 --> 00:34:45.260
Now I mentioned you can
phase your development in.

00:34:45.320 --> 00:34:48.050
So we're going to just take off
where we left off from the first

00:34:48.170 --> 00:34:51.450
demo where I had just simply set
some restoration identifiers,

00:34:51.530 --> 00:34:53.420
opted in the application delegate.

00:34:53.450 --> 00:34:54.720
We'll add some more code to that.

00:34:54.720 --> 00:34:56.370
We don't have to really
do anything different.

00:34:56.390 --> 00:34:59.060
We just do more.

00:34:59.120 --> 00:35:02.940
So first I'm going to have to find
those additional view controllers,

00:35:02.950 --> 00:35:06.220
the session details, and that filter.

00:35:06.220 --> 00:35:08.270
And then we'll just restore their state.

00:35:08.360 --> 00:35:09.980
So let's look at it.

00:35:10.020 --> 00:35:11.170
Here's our session details.

00:35:11.180 --> 00:35:11.980
Remember that guy?

00:35:11.980 --> 00:35:14.360
I was going to go back
and read the description.

00:35:14.440 --> 00:35:16.280
So how do I create it?

00:35:16.410 --> 00:35:20.460
We have a new protocol,
UIViewControllerRestoration.

00:35:20.470 --> 00:35:24.530
It has one method,
ViewControllerWithRestorationIdentifierP

00:35:24.800 --> 00:35:24.800
ath.

00:35:24.810 --> 00:35:29.570
This is implemented on the restoration
class that I described before.

00:35:29.980 --> 00:35:31.530
So here's my view controller.

00:35:31.700 --> 00:35:33.700
He's set up as the restoration class.

00:35:33.700 --> 00:35:37.160
He implements the protocol
and here's his method body.

00:35:37.220 --> 00:35:39.070
So we've got to create that session.

00:35:39.070 --> 00:35:41.220
So how do we do

00:35:41.840 --> 00:35:43.290
I'm going to set up a view controller.

00:35:43.410 --> 00:35:46.380
I'm going to initialize it to
nil in case I can't create it.

00:35:46.470 --> 00:35:49.800
It's always kind of good practice
to initialize this to nil.

00:35:49.870 --> 00:35:51.840
That way you don't return
something that didn't get set.

00:35:51.860 --> 00:35:53.180
Okay.

00:35:53.180 --> 00:35:56.220
Let's look in the coder
for the session ID.

00:35:56.220 --> 00:36:00.300
So you remember when we saved our
state for the session details,

00:36:00.300 --> 00:36:02.140
we just saved the session ID.

00:36:02.820 --> 00:36:06.520
I'll take that and I'll check to
see if that session still exists.

00:36:06.520 --> 00:36:09.810
And this piece of code is
particular to our application.

00:36:09.810 --> 00:36:11.240
We're using core data.

00:36:11.240 --> 00:36:14.220
So I'm looking in the database to
see do we still have a session.

00:36:14.220 --> 00:36:18.880
If we do, there's that shared method
that we just looked at before.

00:36:18.880 --> 00:36:22.050
So I've got this nice shared init
method that I was able to use when my

00:36:22.050 --> 00:36:24.030
app was creating it in the first place.

00:36:24.070 --> 00:36:25.910
I'm just leveraging it again here.

00:36:27.910 --> 00:36:29.920
Finally, we return the view controller.

00:36:29.950 --> 00:36:31.550
Note that we might have returned to nil.

00:36:31.880 --> 00:36:35.420
So if this session no longer existed,
if it was canceled,

00:36:35.420 --> 00:36:39.020
and you went back to the application,
we wouldn't bother showing you

00:36:39.020 --> 00:36:40.790
something that was irrelevant.

00:36:41.080 --> 00:36:42.990
How about the filter?

00:36:43.100 --> 00:36:45.220
The filter's a little easier
because you don't have to look up

00:36:45.260 --> 00:36:49.570
any specific information for it,
although we did wire it back

00:36:49.640 --> 00:36:51.340
to another view controller.

00:36:51.340 --> 00:36:53.910
And I'm going to pull that
out now so that I can create

00:36:53.910 --> 00:36:55.970
this thing fully functional.

00:36:55.970 --> 00:36:57.940
But it's just two lines of code.

00:36:57.950 --> 00:37:01.680
So these methods are typically very easy,
leveraging your application

00:37:01.680 --> 00:37:03.450
structure as it already exists.

00:37:04.480 --> 00:37:06.650
So let's restore all the state,
and we're done.

00:37:06.650 --> 00:37:08.260
Remember, it was Monday.

00:37:08.300 --> 00:37:12.260
I changed the day, loaded some different
sessions in the table view.

00:37:12.340 --> 00:37:13.970
What do we have to do there?

00:37:15.810 --> 00:37:19.200
Well, we saved the day, literally.

00:37:19.340 --> 00:37:20.960
Okay, so we pull that back.

00:37:21.070 --> 00:37:23.540
We just get the day out of the coder.

00:37:23.670 --> 00:37:25.960
Now, when we set the day as
an instance variable,

00:37:25.960 --> 00:37:28.200
that's great,
but we have to make sure that we remember

00:37:28.200 --> 00:37:33.760
to reload the table view with the correct
sessions for that day and update any UI.

00:37:33.760 --> 00:37:36.540
I already had a method that
did that in our application.

00:37:36.660 --> 00:37:40.600
When the user went and tapped
on it to change the day,

00:37:40.710 --> 00:37:42.500
we'd call this method, and we'd go,
"Okay, great.

00:37:42.500 --> 00:37:45.760
Let me reload my table view
with sessions for this day,

00:37:45.930 --> 00:37:48.800
and let me go and update
everything correctly." You know,

00:37:48.800 --> 00:37:49.420
the title.

00:37:49.570 --> 00:37:50.840
So we're just gonna use it here.

00:37:50.840 --> 00:37:52.760
So we don't really have
to write a lot more code.

00:37:52.970 --> 00:37:54.000
And we call super.

00:37:54.120 --> 00:37:55.680
So that's not really very much.

00:37:55.760 --> 00:37:57.230
So that was pretty easy.

00:37:57.270 --> 00:38:01.640
We found it in a couple lines of code,
restored state in pretty much one line.

00:38:01.760 --> 00:38:03.260
We're done.

00:38:03.430 --> 00:38:04.850
Okay.

00:38:05.770 --> 00:38:09.500
So now let's look at
restoring session state.

00:38:09.730 --> 00:38:13.950
Remember that when I created it,
the views hadn't been created yet.

00:38:14.020 --> 00:38:17.020
So when this method is called,
we've now got our views,

00:38:17.020 --> 00:38:20.330
and I'm gonna go and I'm gonna
keep track of the fact that

00:38:20.360 --> 00:38:23.760
I was launched from inside of the
schedule view or the favorites view.

00:38:23.760 --> 00:38:26.950
So I'm just restoring
only what's necessary when

00:38:26.950 --> 00:38:28.260
I create the view controller.

00:38:28.260 --> 00:38:30.260
In the previous slide,
when I went and found it,

00:38:30.260 --> 00:38:34.080
I just want to create what you need
to get a functioning object and

00:38:34.340 --> 00:38:38.020
then defer restoring the rest of the
state until I actually need it here.

00:38:38.020 --> 00:38:39.510
Call super, and we're done.

00:38:39.520 --> 00:38:42.020
Okay, how about the filter?

00:38:42.020 --> 00:38:46.130
We don't actually have to
do anything for that guy.

00:38:46.860 --> 00:38:49.000
That's because it was just
created fully functional.

00:38:49.210 --> 00:38:51.280
There was nothing else
that we really saved.

00:38:51.380 --> 00:38:52.510
So we're good to go.

00:38:52.580 --> 00:38:54.560
So not a lot of code there.

00:38:54.600 --> 00:38:56.900
Let's look at the control flow for this.

00:38:56.940 --> 00:38:57.790
Okay.

00:38:57.890 --> 00:39:02.480
So we've introduced a new method
when we start your app up.

00:39:02.530 --> 00:39:06.180
Application will finish
launching with options.

00:39:06.210 --> 00:39:09.610
This method is called before
we do state restoration.

00:39:09.710 --> 00:39:11.970
We then ask if we should restore state.

00:39:12.070 --> 00:39:15.480
Again, because this is all opt-in,
we're going to ask your delegate

00:39:15.480 --> 00:39:17.190
if we should even do it.

00:39:17.480 --> 00:39:20.700
If you say no, we skip right ahead and we
call did finish launching.

00:39:20.700 --> 00:39:24.500
If you say yes,
we'll go through state restoration.

00:39:24.770 --> 00:39:28.640
So let me just talk about "We'll
finish launching." The idea here is

00:39:28.640 --> 00:39:32.490
you'll want to set up state before
we go and do any state restoration.

00:39:32.500 --> 00:39:36.620
You make your main windows visible,
you've got your main nib or storyboard

00:39:36.620 --> 00:39:40.020
loaded and you might want to go and tweak
that or create some view controllers.

00:39:40.290 --> 00:39:43.250
Whatever your application does
when it normally starts up,

00:39:43.250 --> 00:39:47.090
your default state gets created here.

00:39:48.550 --> 00:39:52.800
You can pretty much hoist all your
initialization code from did finish

00:39:52.800 --> 00:39:55.000
launching into will finish launching.

00:39:55.000 --> 00:39:57.660
Just do it right up front,
then we'll go ahead and do state

00:39:57.660 --> 00:39:59.330
restoration on top of that.

00:39:59.450 --> 00:40:02.900
But you might still want to do a
few things in did finish launching.

00:40:02.950 --> 00:40:04.530
There's a couple reasons.

00:40:04.660 --> 00:40:09.400
One of them is you might
want a login or password.

00:40:09.430 --> 00:40:11.880
And if that's the case,
if you're going to force users to enter

00:40:11.950 --> 00:40:16.600
a password to unlock some critical data,
or if you want them to log into a server,

00:40:16.620 --> 00:40:18.190
you want to make sure you do that last.

00:40:18.200 --> 00:40:21.400
You don't want to restore that
panel and then have us restore

00:40:21.400 --> 00:40:22.890
something else on top of it.

00:40:23.000 --> 00:40:24.980
You want to wait until
everything is set up,

00:40:25.090 --> 00:40:28.500
make your decision,
and do that in did finish launching.

00:40:28.620 --> 00:40:33.610
Also, you might want to deploy on
earlier versions in iOS 6.

00:40:33.910 --> 00:40:38.000
And I showed you about using response
to selector for the property,

00:40:38.130 --> 00:40:42.360
but how do you get this method to be
called correctly if you run on iOS 5,

00:40:42.360 --> 00:40:44.370
which doesn't even have it?

00:40:44.810 --> 00:40:47.660
Grant Central Dispatch
has a really cool feature:

00:40:47.720 --> 00:40:48.620
Dispatch Once.

00:40:48.830 --> 00:40:50.500
You can give it a block of code.

00:40:50.590 --> 00:40:52.110
It will only execute it once.

00:40:52.240 --> 00:40:55.460
You can call it repeatedly,
but it'll be a no-op

00:40:55.590 --> 00:40:57.100
every subsequent call.

00:40:57.260 --> 00:40:58.940
And we're going to leverage that.

00:40:58.940 --> 00:41:01.160
So I just used a comment,
whatever comment's set up.

00:41:01.230 --> 00:41:03.500
That could be quite a lot
of stuff you're doing.

00:41:03.550 --> 00:41:05.950
I'm making my window visible,
doing whatever it is that

00:41:05.950 --> 00:41:08.490
I would normally have done
and did finish launching.

00:41:08.650 --> 00:41:12.210
It's in this block,
inside of a Dispatch Once.

00:41:13.310 --> 00:41:17.050
So here I am in my new method,
"WillFinishLaunching." So I just call

00:41:17.090 --> 00:41:19.700
the method that does the dispatch once.

00:41:19.760 --> 00:41:24.300
On iOS 6, this method gets called,
so "WillFinishLaunching" will come

00:41:24.300 --> 00:41:26.100
up before we do state restoration.

00:41:26.260 --> 00:41:27.410
We'll set up our state.

00:41:27.720 --> 00:41:28.250
We're fine.

00:41:28.510 --> 00:41:32.030
On iOS 5, this method won't be called,
older versions.

00:41:32.200 --> 00:41:32.690
Okay.

00:41:32.860 --> 00:41:39.040
How about "DidFinishLaunching"? On iOS 6,
it'll get called, but we've already done

00:41:39.040 --> 00:41:40.030
our initialization.

00:41:40.050 --> 00:41:42.940
So when we call this, it'll be a no-op.

00:41:43.060 --> 00:41:45.500
So that way,
nothing weird happens on iOS 6.

00:41:45.500 --> 00:41:46.690
We get exactly what we want.

00:41:46.830 --> 00:41:49.510
And importantly,
on previous versions where we didn't

00:41:49.510 --> 00:41:53.600
have application "WillFinishLaunching,"
this time it will execute that code.

00:41:53.640 --> 00:41:57.390
And I put the comment "Other stuff."
So if you wanted to show your

00:41:57.410 --> 00:42:00.940
password or something like that,
you'd do it here.

00:42:02.110 --> 00:42:04.840
So let's look at the
order of restoration now.

00:42:04.920 --> 00:42:07.640
We have a list of view
controllers we want to bring back.

00:42:07.680 --> 00:42:08.600
We have to look them up.

00:42:08.710 --> 00:42:10.900
We're either going to
find them implicitly,

00:42:10.900 --> 00:42:13.500
ask the restoration class
or the app delegate.

00:42:13.550 --> 00:42:15.880
If we don't find them, no worries.

00:42:15.920 --> 00:42:16.500
That's fine.

00:42:16.500 --> 00:42:18.820
But if we do, we'll load their view.

00:42:18.920 --> 00:42:21.780
And we'll put them in a list
that we're going to consult

00:42:21.780 --> 00:42:23.500
to then restore their state.

00:42:24.870 --> 00:42:28.240
We then go through that list
of every found view controller.

00:42:28.270 --> 00:42:31.210
We tell it to restore its state,
and then we take every view

00:42:31.210 --> 00:42:34.060
with a restoration identifier,
and we give it a chance

00:42:34.060 --> 00:42:35.480
to restore its state.

00:42:35.530 --> 00:42:38.110
When we're done with all that,
we tell the delegate,

00:42:38.330 --> 00:42:40.790
"We've restored your
state." We call Application,

00:42:40.940 --> 00:42:45.370
Did Restore, Codable State,
and give it a chance to pull back

00:42:45.450 --> 00:42:49.500
anything at the top level for the app
that it might have wanted to save.

00:42:50.780 --> 00:42:55.080
Okay, I've got one more demo,
and this one builds on the other two,

00:42:55.080 --> 00:42:55.900
as I've been doing.

00:42:55.900 --> 00:43:01.060
I'll show you one more thing that
we do inside of the WWDC app.

00:43:01.610 --> 00:43:04.940
So here I am on Monday,
and let's say that I enjoyed a

00:43:04.940 --> 00:43:08.880
session from this morning and
I want to go back and find it.

00:43:08.940 --> 00:43:11.340
And it was one of the new sessions.

00:43:11.340 --> 00:43:13.500
So we've got a search bar here.

00:43:13.500 --> 00:43:18.080
I'm going to go in there and I'm
just going to search for new session.

00:43:18.140 --> 00:43:22.860
So you can see here I am typing away,
and I get a set of search results.

00:43:22.860 --> 00:43:26.200
And I really liked what's
new in Cocoa Touch.

00:43:26.200 --> 00:43:30.680
So I'm going to go in there,
and I actually want to leave feedback.

00:43:30.740 --> 00:43:35.930
Because I thought it was a great session,
but I do have one comment.

00:43:36.700 --> 00:43:41.060
I think you could have used more Cowbell.

00:43:41.060 --> 00:43:42.460
So I'm doing that.

00:43:42.600 --> 00:43:44.510
And now the phone rings, right?

00:43:44.660 --> 00:43:46.440
And you can probably
see where this is going.

00:43:46.440 --> 00:43:48.940
Okay, so the app's in the background.

00:43:49.040 --> 00:43:50.960
No worries.

00:43:51.070 --> 00:43:52.840
Interesting phone call.

00:43:52.990 --> 00:43:54.360
Time passes.

00:43:54.360 --> 00:43:55.660
Gets killed.

00:43:55.780 --> 00:43:56.860
Uh-oh.

00:43:57.000 --> 00:43:58.870
So now a few hours elapse.

00:43:58.970 --> 00:44:01.060
I come back to the application.

00:44:01.120 --> 00:44:03.100
I don't even remember what I was doing.

00:44:03.200 --> 00:44:05.200
When am I going to get back?

00:44:05.280 --> 00:44:06.350
Hey, look at that.

00:44:06.360 --> 00:44:07.420
I've still got my text.

00:44:07.590 --> 00:44:10.190
It still has my very profound comment.

00:44:10.340 --> 00:44:12.200
It remembers what I was doing.

00:44:12.260 --> 00:44:14.990
What happens if I back out of here?

00:44:15.180 --> 00:44:16.990
Let's say I sent that comment.

00:44:17.170 --> 00:44:21.100
Still showing me the correct
session that I was looking at.

00:44:21.270 --> 00:44:23.390
Still even has my search context.

00:44:23.470 --> 00:44:26.270
So the search is active,
the keyboard is up,

00:44:26.540 --> 00:44:30.650
exactly as if I hadn't left
the application at all.

00:44:35.020 --> 00:44:37.120
So what did we have to
do in order to get that?

00:44:37.410 --> 00:44:40.400
We had additional state
that we wanted to save,

00:44:40.430 --> 00:44:42.100
the feedback,
the comment we were leaving,

00:44:42.100 --> 00:44:44.860
the fact that we were
showing that view controller,

00:44:44.920 --> 00:44:48.210
and of course, all the search context,
right?

00:44:48.800 --> 00:44:51.120
We're going to have to find
that feedback controller,

00:44:51.250 --> 00:44:54.650
similar to what we did with
the session we were looking at.

00:44:55.220 --> 00:44:56.600
and then we'll restore
our state for them.

00:44:56.630 --> 00:44:58.670
So this should start to
feel a little familiar.

00:44:58.760 --> 00:45:01.550
I'm gonna kind of reiterate some
of the things we already did just

00:45:01.660 --> 00:45:04.100
for some new view controllers.

00:45:04.340 --> 00:45:06.810
So here's our feedback.

00:45:08.180 --> 00:45:13.410
When we save the state, you'd think,
well, we just have to save that comment.

00:45:13.610 --> 00:45:16.380
But don't forget,
it's for a particular session.

00:45:16.510 --> 00:45:19.150
So we're going to do the same
thing we did with the session.

00:45:19.150 --> 00:45:21.100
We're going to save the session ID.

00:45:21.100 --> 00:45:25.890
That way, we remember what we're
sending feedback for.

00:45:26.660 --> 00:45:29.450
Now, this object also referred
to another object,

00:45:29.450 --> 00:45:33.150
so this is just another example of how
you can encode a view controller and

00:45:33.150 --> 00:45:35.200
will just wire up a reference to it.

00:45:35.300 --> 00:45:37.540
So we're going to save the
view controller that presented

00:45:37.710 --> 00:45:40.270
it so we can tell it what our
feedback is when we're done.

00:45:40.320 --> 00:45:44.290
We want to make sure we come back
wired back together in the application.

00:45:44.350 --> 00:45:46.950
Okay, finally we get to the comment.

00:45:47.050 --> 00:45:48.700
So I grab it out of the text field.

00:45:48.700 --> 00:45:52.540
I'm just coding defensively here
to make sure there is a comment.

00:45:52.640 --> 00:45:53.940
I save it.

00:45:53.990 --> 00:45:54.470
We're done.

00:45:54.660 --> 00:45:55.480
Pretty easy.

00:45:55.500 --> 00:45:57.180
OK, so not a lot there.

00:45:57.370 --> 00:45:59.550
How about search state?

00:46:01.080 --> 00:46:04.680
Okay, to save you from trying to read a
whole bunch of code on the screen,

00:46:04.680 --> 00:46:07.300
I just put comments here,
but it's really this simple.

00:46:07.410 --> 00:46:09.710
We just remembered if the
search bar was active.

00:46:09.880 --> 00:46:11.070
It might not have been.

00:46:11.200 --> 00:46:13.590
We also remembered if we were editing.

00:46:13.700 --> 00:46:16.570
The user might have started
scrolling in the search results,

00:46:16.570 --> 00:46:17.600
and we're no longer editing.

00:46:17.600 --> 00:46:21.320
The keyboard goes away,
so we want to come back correctly.

00:46:21.650 --> 00:46:22.760
They typed in some text.

00:46:22.950 --> 00:46:23.860
We'd save the text.

00:46:24.010 --> 00:46:26.600
Now, sometimes with search,
you'll notice this in Mail.

00:46:26.600 --> 00:46:29.980
You have something called the scope bar,
which allows you to specify

00:46:30.060 --> 00:46:31.100
what you're searching.

00:46:31.100 --> 00:46:33.880
In Mail, it's from, to, subject, all.

00:46:34.040 --> 00:46:37.250
You could just grab what scope
setting that the user had selected,

00:46:37.480 --> 00:46:38.290
save that as well.

00:46:38.300 --> 00:46:41.310
We don't have it in this example.

00:46:41.690 --> 00:46:43.740
Remember before we kept
track of what day it was.

00:46:43.870 --> 00:46:45.440
This is our schedule view.

00:46:45.440 --> 00:46:47.030
We called super, so we're out.

00:46:47.220 --> 00:46:51.790
So not a whole lot you have to do
to get back all that search state.

00:46:51.840 --> 00:46:56.250
And let's look at the flip
side with restoration.

00:46:57.940 --> 00:47:00.790
Well, we have to find the
feedback view controller.

00:47:00.840 --> 00:47:01.900
We're going to ask for it.

00:47:01.910 --> 00:47:05.300
This is very similar to what we did
when we looked for a specific session.

00:47:05.320 --> 00:47:08.240
We start off with the view controller,
predict failure,

00:47:08.430 --> 00:47:10.380
even though we're going to succeed.

00:47:10.460 --> 00:47:14.210
Session, we look it up,
check to see if we have a session,

00:47:14.210 --> 00:47:17.760
and then we create it with
our shared initialization.

00:47:17.810 --> 00:47:19.280
Don't forget I had a delegate here.

00:47:19.280 --> 00:47:21.890
I pull it out of the coder and
I wire it right back up here.

00:47:22.080 --> 00:47:24.790
So now I've got a fully
functioning object,

00:47:24.790 --> 00:47:27.740
or nil,
but hopefully we've found the object.

00:47:27.740 --> 00:47:28.210
Okay.

00:47:28.250 --> 00:47:30.450
Then we're going to decode its state.

00:47:30.570 --> 00:47:32.700
So why am I decoding the comment here?

00:47:32.860 --> 00:47:38.100
Why did I set everything else up in the
method that found the view controller?

00:47:38.140 --> 00:47:41.670
I try to defer as much as
I can until the decode method.

00:47:41.670 --> 00:47:45.610
When I showed you the control flow,
the view isn't loaded when we

00:47:45.770 --> 00:47:46.950
ask for the view controller.

00:47:46.950 --> 00:47:50.310
That's because the view controller
hasn't even been created yet.

00:47:50.310 --> 00:47:53.000
But after we get back
the view controller,

00:47:53.040 --> 00:47:55.640
we do load its view,
and it's guaranteed to be

00:47:55.640 --> 00:47:57.510
loaded when we call this method.

00:47:57.590 --> 00:48:00.120
So here with the comment text,
we're going to go and

00:48:00.390 --> 00:48:01.620
set it in the text view.

00:48:01.620 --> 00:48:05.700
We couldn't have done that until the
view had been loaded and it existed.

00:48:05.700 --> 00:48:08.020
It also sort of separates your concerns.

00:48:08.050 --> 00:48:10.520
In the other method,
we need to create something

00:48:10.730 --> 00:48:13.810
that's functional,
but it's not fully initialized yet in

00:48:13.820 --> 00:48:16.060
terms of the context it's running in.

00:48:16.110 --> 00:48:19.360
Here we set it up exactly
as it was when it left.

00:48:19.620 --> 00:48:20.360
All right.

00:48:20.360 --> 00:48:22.280
How about the search?

00:48:22.280 --> 00:48:25.040
In the grand old tradition
I started two minutes ago,

00:48:25.040 --> 00:48:28.980
I'll just show you the comments,
was to search Was the search bar active?

00:48:28.980 --> 00:48:30.630
Were we editing?

00:48:31.010 --> 00:48:32.400
Get the text back.

00:48:32.400 --> 00:48:34.190
Don't forget,
we want to remember what day it was,

00:48:34.190 --> 00:48:37.060
just like we did in the earlier example,
and we're done.

00:48:37.200 --> 00:48:40.550
So all that search stuff, really easy.

00:48:40.640 --> 00:48:42.610
One thing, though.

00:48:43.100 --> 00:48:46.260
When we were looking at the search,
I actually had gone

00:48:46.260 --> 00:48:49.830
and selected something,
and then on top of that,

00:48:49.830 --> 00:48:51.870
I selected feedback.

00:48:52.050 --> 00:48:56.190
So I didn't really have the
search results up at the top.

00:48:56.190 --> 00:49:00.910
It might not be a good idea to be
messing around with the view hierarchy,

00:49:00.910 --> 00:49:04.510
setting up the search
table when I'm not topmost.

00:49:04.600 --> 00:49:06.130
So I'm going to defer that.

00:49:06.330 --> 00:49:08.970
The way I do it when
I decode my restorable state,

00:49:09.050 --> 00:49:11.940
I'm just going to slap that
into instance variables.

00:49:11.990 --> 00:49:15.110
So I'm going to keep track of
whether or not search was active,

00:49:15.120 --> 00:49:17.470
whether the keyboard was
up and what the text was,

00:49:17.470 --> 00:49:19.260
all in some instance variables.

00:49:19.380 --> 00:49:22.410
I won't directly apply it yet.

00:49:22.410 --> 00:49:26.190
And then when the view
is going to appear,

00:49:26.630 --> 00:49:28.160
Don't forget to call super.

00:49:28.220 --> 00:49:30.530
I'll check,
did I restore some search state?

00:49:30.720 --> 00:49:31.660
I might not have.

00:49:31.660 --> 00:49:35.010
The user might not have been searching,
but if I did, I'll apply it right there.

00:49:35.310 --> 00:49:37.500
So I'll set the bar active.

00:49:37.560 --> 00:49:39.500
I'll figure out if I was editing.

00:49:39.640 --> 00:49:41.460
And then I'm going to clear that.

00:49:41.540 --> 00:49:45.200
Don't forget to clear any state that
you pull into instance variables.

00:49:45.300 --> 00:49:48.500
You may then go from this view
controller to another one and back.

00:49:48.600 --> 00:49:51.450
Every time it appears,
you don't want to redundantly

00:49:51.470 --> 00:49:52.930
execute the same code.

00:49:53.310 --> 00:49:55.790
So there's one little tiny twist to this,
though.

00:49:56.030 --> 00:49:59.440
What if the user saves their state,
they're searching,

00:49:59.520 --> 00:50:02.590
they start the app back up,
we restore it into instance

00:50:02.620 --> 00:50:06.100
variables so we can apply it
when the view will appear,

00:50:06.230 --> 00:50:07.200
but the view never appears?

00:50:07.330 --> 00:50:09.040
The user doesn't back up to it.

00:50:09.220 --> 00:50:11.690
And then they save their state again.

00:50:11.800 --> 00:50:14.940
So we just have to make sure we
get the state from the right place.

00:50:15.040 --> 00:50:18.140
So the encode routine,
tiny bit more complex.

00:50:18.140 --> 00:50:22.860
We check to see if we had restored
some state but had not applied it yet.

00:50:22.860 --> 00:50:25.680
And this might be a common
pattern that you'll use if you

00:50:25.680 --> 00:50:29.220
have anything with state that's,
you know, sufficiently complex that you

00:50:29.220 --> 00:50:32.070
do need to wait until the view
will appear before you apply it.

00:50:32.070 --> 00:50:35.330
If you do something like that,
make sure you grab the right state.

00:50:35.380 --> 00:50:38.620
Otherwise, if the user comes in and
out of the app a few times,

00:50:38.620 --> 00:50:40.040
you'll lose the state.

00:50:40.070 --> 00:50:43.640
Now, if we didn't have any state saved,
we'll just use whatever's current

00:50:43.640 --> 00:50:45.020
in there and we're good to go.

00:50:46.310 --> 00:50:48.600
So I have one more thing to talk about.

00:50:48.670 --> 00:50:49.540
And this is kind of neat.

00:50:49.610 --> 00:50:50.920
This is important.

00:50:51.010 --> 00:50:52.550
So here we are in the schedule view.

00:50:52.700 --> 00:50:54.320
We've got a bunch of table view cells.

00:50:54.400 --> 00:50:56.700
We've got index paths to get to them.

00:50:56.790 --> 00:50:59.620
So I'm scrolled to the keynote.

00:50:59.710 --> 00:51:04.990
Notice I didn't say I'm scrolled
to index path 00 or index path 04,

00:51:04.990 --> 00:51:06.300
wherever that is.

00:51:06.350 --> 00:51:10.070
I said I'm scrolled to the keynote,
because that's the semantic state.

00:51:10.150 --> 00:51:12.010
That's what the user
thinks they're looking at.

00:51:12.120 --> 00:51:15.120
They don't know anything
about index paths.

00:51:15.430 --> 00:51:18.560
And if I select a cell,
let's say I tap that,

00:51:18.560 --> 00:51:21.550
and I start showing the details for it,
I want to remember

00:51:21.780 --> 00:51:23.290
what cell was selected.

00:51:23.490 --> 00:51:26.580
On the iPhone,
when you back off from something

00:51:26.580 --> 00:51:29.410
in the navigation controller,
it will sort of fade the cell out,

00:51:29.410 --> 00:51:34.390
which is a subtle but nice visual cue to
the user about what they were looking at.

00:51:34.710 --> 00:51:38.510
More importantly, on an iPad,
you usually have a split view.

00:51:38.650 --> 00:51:40.960
So you have your table view on the left,
this,

00:51:40.960 --> 00:51:45.200
and on the right you have the details,
so you're still showing that table view.

00:51:45.200 --> 00:51:46.890
So you want to see what's selected.

00:51:47.090 --> 00:51:51.680
And when you restore your state,
you want to restore what was selected.

00:51:52.080 --> 00:51:55.540
Now keep in mind,
these might move around.

00:51:55.670 --> 00:51:59.400
So when the application starts back up,
even though you had the

00:51:59.400 --> 00:52:01.970
second cell selected,
that cell may have moved.

00:52:02.130 --> 00:52:04.500
We may have inserted some
more labs in the front.

00:52:04.500 --> 00:52:07.740
We might have moved the
time of the session.

00:52:07.960 --> 00:52:12.270
So in that case,
we'll consult our data source and we'll

00:52:12.270 --> 00:52:17.120
keep track of what we really care about,
the semantic identity of that.

00:52:17.230 --> 00:52:21.650
So we have a new protocol,
UIDatasourceModelAssociation.

00:52:21.720 --> 00:52:25.940
You implement it on the data
source for the table view.

00:52:25.940 --> 00:52:27.540
It has two methods.

00:52:27.540 --> 00:52:28.400
The first

00:52:28.790 --> 00:52:32.640
creates an identifier that has
meaning to your application

00:52:33.170 --> 00:52:35.800
from the existing index path.

00:52:36.510 --> 00:52:39.930
On the back end, when we restore a state,
we'll call the opposite method.

00:52:39.930 --> 00:52:41.900
And we'll say, okay,
given this identifier,

00:52:41.900 --> 00:52:43.930
where's the index path now?

00:52:43.940 --> 00:52:48.460
Now, hopefully, in your application,
or I'm sorry,

00:52:48.460 --> 00:52:50.800
hopefully in this application,
we're not going to change

00:52:50.800 --> 00:52:52.920
the sessions on you,
so we're not going to ruin your

00:52:52.920 --> 00:52:54.150
week or screw up your Friday.

00:52:54.160 --> 00:52:58.840
But imagine that this was a bunch
of events over the course of a year.

00:52:59.280 --> 00:53:01.500
And we canceled the
picnic because of rain,

00:53:01.500 --> 00:53:04.920
and we moved it out to next month,
we changed the date of a concert,

00:53:04.920 --> 00:53:07.080
we inserted a couple
different dinner parties,

00:53:07.080 --> 00:53:07.930
things like that.

00:53:08.150 --> 00:53:09.650
So things can move around.

00:53:09.660 --> 00:53:12.530
If this also managed some
media or a list of items that

00:53:12.530 --> 00:53:16.340
it fetched off the internet,
things could change from day to day.

00:53:16.340 --> 00:53:18.300
When you load the app back up,
you kind of want to go

00:53:18.300 --> 00:53:19.430
back to where you were.

00:53:21.310 --> 00:53:22.940
So let's look at how it's used.

00:53:22.980 --> 00:53:24.870
Here's my data source for the table view.

00:53:25.040 --> 00:53:26.670
I implement the protocol.

00:53:26.800 --> 00:53:28.180
Here's the method.

00:53:28.230 --> 00:53:31.960
So we're going to automatically call this
when we're saving the table view's state.

00:53:32.010 --> 00:53:34.420
It's called actually out
of the table view object.

00:53:34.540 --> 00:53:36.770
Now, table view subclasses scroll view.

00:53:36.970 --> 00:53:38.840
So if you don't implement
this by default,

00:53:38.930 --> 00:53:42.120
we'll just scroll by points
back to where we were.

00:53:42.130 --> 00:53:43.590
So better than nothing.

00:53:43.880 --> 00:53:46.900
But if you do implement this,
you have a better shot at getting

00:53:46.900 --> 00:53:48.620
back exactly where you were.

00:53:48.680 --> 00:53:49.540
Pretty simple.

00:53:49.560 --> 00:53:52.430
Remember, I had a session object.

00:53:52.570 --> 00:53:54.850
I find the one at that index path.

00:53:54.850 --> 00:53:56.500
I'm just going to use its session ID.

00:53:56.570 --> 00:53:57.680
That's unique.

00:53:57.820 --> 00:53:59.510
So I'm good to go.

00:53:59.590 --> 00:54:01.610
If I return nil, there's no worries.

00:54:01.910 --> 00:54:04.420
Maybe I couldn't find the session,
some odd thing happened,

00:54:04.430 --> 00:54:06.210
or maybe I don't even
implement this method.

00:54:06.460 --> 00:54:08.760
Again, we used a scroll view.

00:54:08.880 --> 00:54:11.050
Here's the reverse, okay?

00:54:11.180 --> 00:54:13.790
I'm handed that identifier.

00:54:13.830 --> 00:54:15.390
I'm going to look up a session for it.

00:54:15.390 --> 00:54:18.990
Now, again, remember,
the session might be gone.

00:54:19.080 --> 00:54:21.700
So if it's gone,
I won't be able to get anything back.

00:54:21.700 --> 00:54:24.060
But if it still exists,
then I'll try to find

00:54:24.060 --> 00:54:26.440
the index path for it,
and I'll return that.

00:54:26.660 --> 00:54:28.200
Otherwise, I'll return nil.

00:54:28.310 --> 00:54:30.930
So if the session moves,
we go back to the right place.

00:54:31.020 --> 00:54:35.440
If you scroll to a certain point,
we come back to a meaningful point.

00:54:35.490 --> 00:54:36.990
Now,
something interesting about this app,

00:54:37.110 --> 00:54:39.690
I'm coming back to the
session you were scrolled to.

00:54:39.730 --> 00:54:42.920
I certainly want to come back to the
right session if it was selected.

00:54:42.920 --> 00:54:46.220
It would be weird if I didn't come
back to what you had selected.

00:54:46.280 --> 00:54:48.110
However, for scrolling,
your methods here,

00:54:48.110 --> 00:54:48.450
you might make the change.

00:54:48.450 --> 00:54:48.980
You might make the change to
the app that you're using.

00:54:48.980 --> 00:54:48.980
You might make the change to
the app that you're using.

00:54:48.980 --> 00:54:49.400
You might make the change to
the app that you're using.

00:54:49.400 --> 00:54:49.980
You might make the change to
the app that you're using.

00:54:49.980 --> 00:54:50.590
You might make the change to
the app that you're using.

00:54:50.600 --> 00:54:51.300
You might make the change to
the app that you're using.

00:54:51.300 --> 00:54:51.980
You might make the change to
the app that you're using.

00:54:51.980 --> 00:54:53.660
I'm going to keep track
of what time it is.

00:54:53.660 --> 00:54:57.090
So if I was at 10:30 or 10:15,
maybe that's what you remember,

00:54:57.090 --> 00:54:59.040
and not the session for
the scroll position.

00:54:59.140 --> 00:55:03.010
So when the user comes back into the app,
if session's moved around,

00:55:03.010 --> 00:55:06.760
you come back to the right time,
which is what they would expect.

00:55:06.760 --> 00:55:08.770
This is all up to you,
depending on the semantic

00:55:08.770 --> 00:55:10.190
meaning for your app.

00:55:10.190 --> 00:55:10.700
Okay.

00:55:10.830 --> 00:55:15.130
I mentioned that we have some default
behaviors on view controllers.

00:55:15.130 --> 00:55:16.720
We remember the selected tab.

00:55:16.720 --> 00:55:18.630
We bring back the navigation stack.

00:55:18.630 --> 00:55:22.220
If you presented a controller,
we automatically bring it back.

00:55:22.470 --> 00:55:26.310
Also, split view controller will make
sure that its children get added to

00:55:26.320 --> 00:55:28.690
the list of objects to be encoded.

00:55:29.050 --> 00:55:31.070
I talked about a couple
of the views already.

00:55:31.280 --> 00:55:33.990
We bring back your scroll
position automatically.

00:55:34.080 --> 00:55:35.700
Remember the selected table view cell?

00:55:35.700 --> 00:55:36.960
We just talked about that.

00:55:37.080 --> 00:55:38.100
Couple more.

00:55:38.170 --> 00:55:41.040
If you have an image view
and the user's been pinching,

00:55:41.040 --> 00:55:43.980
rotating, and zooming,
we'll bring all that back.

00:55:44.140 --> 00:55:46.660
So we'll restore the image transform.

00:55:46.870 --> 00:55:50.320
And for web views,
we'll keep track of everything that had

00:55:50.320 --> 00:55:51.900
been happening inside of that web view.

00:55:52.090 --> 00:55:54.120
Users can load multiple URLs.

00:55:54.200 --> 00:55:56.500
They can select URLs and
load another page.

00:55:56.500 --> 00:55:57.700
And they can go backwards.

00:55:57.710 --> 00:56:01.760
And they have a stack of history
both backwards and forwards.

00:56:01.830 --> 00:56:04.990
We also remember the scroll position.

00:56:05.100 --> 00:56:08.300
And if you had pinched and zoomed the
web page to make it easier to read,

00:56:08.310 --> 00:56:09.380
all that will come back.

00:56:09.380 --> 00:56:13.500
So it's seamless as if the app
had been running the whole time.

00:56:13.500 --> 00:56:14.700
Okay.

00:56:14.700 --> 00:56:16.310
You might decide you don't
want default behaviors,

00:56:16.310 --> 00:56:16.690
though.

00:56:16.700 --> 00:56:18.940
So we mentioned it's
important to call super.

00:56:18.940 --> 00:56:21.240
And I think in most cases,
you always want to get

00:56:21.240 --> 00:56:22.410
the default behaviors.

00:56:22.570 --> 00:56:26.500
But if you do want to override,
you have a couple things you can do.

00:56:26.500 --> 00:56:29.580
First thing you can do is just don't
give the object a restoration identifier.

00:56:29.580 --> 00:56:33.560
If you don't want to present a
controller to come back automatically,

00:56:33.570 --> 00:56:35.370
don't give it a restoration identifier.

00:56:35.370 --> 00:56:36.320
We won't save it.

00:56:36.330 --> 00:56:38.750
If you don't want a view to
remember its image transform,

00:56:38.750 --> 00:56:41.480
let's say you have an image and
it literally changes every time

00:56:41.480 --> 00:56:42.720
the user goes into the app.

00:56:42.790 --> 00:56:47.110
It's like the surprise, you know,
I'm feeling lucky image of the day.

00:56:47.140 --> 00:56:47.910
So the app comes up.

00:56:47.910 --> 00:56:49.070
You show a different image.

00:56:49.080 --> 00:56:51.240
It would be kind of weird
if you remembered the image

00:56:51.240 --> 00:56:52.510
transform of the last one.

00:56:52.630 --> 00:56:54.940
So you don't give it a
restoration identifier.

00:56:55.020 --> 00:56:56.080
No problem.

00:56:56.090 --> 00:56:59.980
The other thing you can do if you
have a subclass of one of our classes,

00:57:00.000 --> 00:57:02.760
just don't call super to override it.

00:57:02.760 --> 00:57:04.940
If you do that,
make sure you do it consistently.

00:57:04.940 --> 00:57:08.080
If you don't call it on encode,
don't call it on decode.

00:57:08.090 --> 00:57:10.300
And make sure you have a good reason,
because in general,

00:57:10.310 --> 00:57:12.480
you're going to want to
get the default behaviors.

00:57:12.500 --> 00:57:16.520
We just want to make sure that we
don't trap you and force you to.

00:57:16.520 --> 00:57:18.160
A couple more things.

00:57:18.160 --> 00:57:21.510
You might want to know what version
of the application saved state.

00:57:21.540 --> 00:57:24.520
And you might want to know this way,
way down decoding a view

00:57:24.520 --> 00:57:25.960
controller somewhere.

00:57:25.960 --> 00:57:29.440
You don't want to have to go
fiddle around with awful globals.

00:57:29.530 --> 00:57:31.450
In all the coders,
we're going to keep track of some

00:57:31.450 --> 00:57:34.100
information to make it convenient
for you so you don't have to

00:57:34.110 --> 00:57:35.710
have a global that you consult.

00:57:35.880 --> 00:57:39.330
So we'll remember what version
of the app saved state.

00:57:39.490 --> 00:57:43.080
Let's say that a user is running
version one of your app or version two.

00:57:43.220 --> 00:57:45.060
And three years goes by,
they've hardly ever used

00:57:45.070 --> 00:57:46.240
the app for some reason.

00:57:46.240 --> 00:57:47.580
You come out with version five.

00:57:47.580 --> 00:57:49.200
Version five totally rocks.

00:57:49.200 --> 00:57:50.810
They've got to have it.

00:57:50.810 --> 00:57:52.180
They update to it.

00:57:52.330 --> 00:57:54.370
But version five is so
different than version two,

00:57:54.370 --> 00:57:55.840
they're almost not even the same.

00:57:55.840 --> 00:57:56.840
They're the same app.

00:57:56.870 --> 00:57:59.660
So when we come back in and we call
your state restoration code and

00:57:59.720 --> 00:58:02.840
ask if you want to restore state,
you can look at this key and say,

00:58:02.840 --> 00:58:03.430
"Forget it.

00:58:03.560 --> 00:58:04.360
I don't even want to do it.

00:58:04.360 --> 00:58:06.080
It's such an edge case.

00:58:06.280 --> 00:58:09.240
It's not worth doing."
Or maybe you do want to do it,

00:58:09.320 --> 00:58:11.910
but certain view controllers
need to take into account,

00:58:11.920 --> 00:58:14.400
"Wow,
my state was saved to the really old

00:58:14.400 --> 00:58:17.050
version." So they look at this key.

00:58:17.050 --> 00:58:20.190
Another one that we keep
track of is the idiom.

00:58:20.200 --> 01:01:04.200
[Transcript missing]

01:01:04.870 --> 01:01:08.540
Okay, so in summary,
I think this is a great feature.

01:01:08.660 --> 01:01:11.120
I'm kind of running out of time here,
so sorry I'm rushing a

01:01:11.120 --> 01:01:12.230
little bit at the end.

01:01:12.340 --> 01:01:15.590
But something that we really
want to see everybody implement.

01:01:15.700 --> 01:01:19.680
We've tried to make it easy to adopt,
made it so that you could phase

01:01:19.680 --> 01:01:21.800
it in and do it a piece at a time.

01:01:21.800 --> 01:01:25.750
By structuring your
code with this in mind,

01:01:25.750 --> 01:01:28.600
we think you can get a
lot of leverage out of it,

01:01:28.600 --> 01:01:28.600
and we think that users are
going to really love it.

01:01:28.850 --> 01:01:30.940
We've got a lot of documentation.

01:01:30.940 --> 01:01:32.990
Please consult that.

01:01:33.000 --> 01:01:35.080
We're going to have some really
nice stuff that tells you about

01:01:35.080 --> 01:01:36.120
all the ins and outs of this.

01:01:36.200 --> 01:01:38.330
Jake Behrens would love to hear from you.

01:01:38.330 --> 01:01:40.340
If you're thinking of doing
this or you have questions,

01:01:40.340 --> 01:01:41.620
please contact us.

01:01:41.780 --> 01:01:42.750
And that's it.

01:01:42.810 --> 01:01:44.220
Thank you for coming.