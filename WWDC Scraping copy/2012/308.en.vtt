WEBVTT

00:00:11.060 --> 00:00:12.500
Hi, everybody.

00:00:12.540 --> 00:00:13.450
My name is Aubrey Ness.

00:00:13.560 --> 00:00:15.630
I'm the App Store Operations Manager.

00:00:15.740 --> 00:00:18.600
And welcome to session 308,
Managing Subscriptions

00:00:18.600 --> 00:00:20.720
with In-App Purchase.

00:00:26.940 --> 00:00:30.480
Is in-app purchase important to you?

00:00:30.480 --> 00:00:33.360
As you know,
in-app purchase has been wildly

00:00:33.360 --> 00:00:35.420
successful on the app store.

00:00:35.420 --> 00:00:38.960
Another thing you might not know is
that some of the most popular apps,

00:00:38.960 --> 00:00:41.580
the ones that are on
our top grossing charts,

00:00:41.760 --> 00:00:45.140
are making their revenue
solely from in-app purchase.

00:00:45.140 --> 00:00:48.650
Whether or not it's a paid app that
has in-app purchase to unlock new

00:00:48.650 --> 00:00:52.620
features or add additional content,
or if it's not even a paid app,

00:00:52.680 --> 00:00:56.520
it's a completely free app for download,
they're also making their

00:00:56.520 --> 00:00:58.040
money off of in-app purchase.

00:00:58.040 --> 00:01:00.670
And that is amazing to us,
that these guys can be part of the

00:01:00.770 --> 00:01:03.270
top grossing charts on the store.

00:01:03.730 --> 00:01:08.520
Furthermore, we know that iOS users
expect a lot from you.

00:01:08.530 --> 00:01:11.130
They want you to update the
app to give them new content.

00:01:11.210 --> 00:01:12.400
They want you to fix bugs.

00:01:12.620 --> 00:01:15.980
They want you to continuously
giving them something new.

00:01:15.980 --> 00:01:20.200
And subscriptions are a really great
new way to take advantage of that.

00:01:20.310 --> 00:01:22.680
It's sort of like you're
establishing this long-term

00:01:22.680 --> 00:01:24.480
relationship with your customer.

00:01:24.620 --> 00:01:27.140
It's really kind of a
communication and dialogue that

00:01:27.210 --> 00:01:28.840
you're doing within the app.

00:01:28.840 --> 00:01:31.820
And we want you to take advantage
of the subscription model to be

00:01:31.890 --> 00:01:36.360
able to deliver those recurring new
pieces of content you might have.

00:01:36.360 --> 00:01:39.190
And then it gets your customers
more excited to download your app,

00:01:39.190 --> 00:01:42.650
gets them more excited to launch the app
every day and kind of see what's new.

00:01:44.640 --> 00:01:49.340
So with that, today's agenda,
we're going to talk about how to actually

00:01:49.340 --> 00:01:52.810
implement auto-renewable subscriptions

00:01:52.930 --> 00:01:55.690
Then we're going to talk a little bit
about our older model of subscriptions,

00:01:55.820 --> 00:01:58.220
non-auto-renewing subscriptions.

00:01:58.220 --> 00:02:01.490
And we really want to make it
clear to you which one will

00:02:01.490 --> 00:02:03.480
be better for your business.

00:02:04.590 --> 00:02:07.130
Then we're going to talk
about iTunes Connect setup.

00:02:07.330 --> 00:02:09.790
We want to make sure that you're
setting all this up correctly so that

00:02:09.810 --> 00:02:11.830
you can be successful in the app store.

00:02:11.940 --> 00:02:15.260
We're going to talk about the
customer experience based on what

00:02:15.260 --> 00:02:16.840
you set up in iTunes Connect.

00:02:16.900 --> 00:02:18.750
And finally,
we're going to discuss some best

00:02:18.750 --> 00:02:22.960
practices and some pricing information
that you can take away at the end

00:02:23.080 --> 00:02:25.290
of this session to go implement.

00:02:26.130 --> 00:02:28.820
And to kick us off,
we'll go ahead and bring up David Neumann

00:02:29.080 --> 00:02:33.800
from iTunes Store Engineering to give
you some education on Subscriptions 101.

00:02:33.860 --> 00:02:35.790
Okay, thank you.

00:02:38.000 --> 00:03:43.000
[Transcript missing]

00:03:44.130 --> 00:03:50.140
The key attribute of these things
are that they are iOS only today.

00:03:50.140 --> 00:03:51.460
They're restorable.

00:03:51.510 --> 00:03:54.680
Now,
non-consumables are an in-app you may

00:03:54.680 --> 00:03:57.620
be familiar with are also restorable.

00:03:57.780 --> 00:04:01.810
But there's also these things called
consumables which aren't restorable.

00:04:01.810 --> 00:04:04.490
And you'll find that auto renewables are
kind of a hybrid of both these things.

00:04:04.530 --> 00:04:07.960
They are both restorable and
consumable in that you can buy

00:04:07.960 --> 00:04:09.850
the same one over and over again.

00:04:10.000 --> 00:07:38.900
[Transcript missing]

00:07:39.410 --> 00:07:41.600
Now, let's zoom into one of those
periods and talk about some of the

00:07:41.660 --> 00:07:42.930
details that happen in each one.

00:07:43.060 --> 00:07:47.390
So, the first thing we're going to do
after the user buys for the first time,

00:07:47.390 --> 00:07:49.440
but only after that initial purchase,
is we're going to send this

00:07:49.530 --> 00:07:51.000
welcome email to the user.

00:07:51.060 --> 00:07:55.080
It says purchase confirmation,
but basically it introduces

00:07:55.140 --> 00:07:56.240
the user to the subscription.

00:07:56.240 --> 00:07:59.130
It tells them how they can control
their auto-renew settings or if

00:07:59.220 --> 00:08:02.100
they wish to auto-renew where
they can go to turn it on or off.

00:08:02.100 --> 00:08:05.090
It has privacy policy information
and a bunch of other stuff.

00:08:05.200 --> 00:08:07.200
That's just sent once.

00:08:07.470 --> 00:08:09.590
After that gets sent,
you actually have this

00:08:09.590 --> 00:08:11.050
active subscription now.

00:08:11.160 --> 00:08:13.200
Now,
if someone clicks a buy button in the

00:08:13.200 --> 00:08:16.660
middle of your app when it is active,
we're going to raise a

00:08:16.660 --> 00:08:18.000
dialogue that looks like this.

00:08:18.000 --> 00:08:20.030
It says you're currently
subscribed to this.

00:08:20.130 --> 00:08:23.400
Basically,
we know whether you're subscribed to

00:08:23.400 --> 00:08:25.890
it and we won't let you buy it again.

00:08:26.710 --> 00:08:29.410
So, another thing we're going to
send during the lifecycle of

00:08:29.410 --> 00:08:30.830
this is a renewal reminder.

00:08:30.830 --> 00:08:35.710
Now, I have like 20 subscriptions
and most of them are monthly.

00:08:35.710 --> 00:08:38.310
And not all of them, but most of them.

00:08:38.310 --> 00:08:40.470
And it would be kind of
annoying if we sent 20,

00:08:40.580 --> 00:08:43.390
for people like me,
20 renewal reminders every single month

00:08:43.420 --> 00:08:45.420
when something got close to expiration.

00:08:45.420 --> 00:08:46.220
So, we don't do that.

00:08:46.220 --> 00:08:48.200
We actually aggregate
these things on the store.

00:08:48.200 --> 00:08:51.200
We look at everything in the next month
that's just going to expire or everything

00:08:51.200 --> 00:08:52.820
in the next month that's going to renew.

00:08:53.420 --> 00:08:56.320
And we have, you know,
at most two aggregated emails

00:08:56.390 --> 00:08:58.210
which go out at most once a month.

00:08:58.490 --> 00:09:01.190
But again,
we're only looking at stuff which

00:09:01.190 --> 00:09:03.490
is going to expire or renew soon.

00:09:03.490 --> 00:09:06.350
So, if you had a yearly subscription
like in our previous example,

00:09:06.430 --> 00:09:08.370
in that case,
you're only going to see one of these

00:09:08.600 --> 00:09:10.620
emails and it's basically going to be,
you know,

00:09:10.620 --> 00:09:12.570
basically like the end of the life of it.

00:09:12.620 --> 00:09:13.720
Anyway, enough of that.

00:09:13.770 --> 00:09:15.270
So, that gets sent.

00:09:15.270 --> 00:09:19.170
Important point that's not in any
docs anywhere is what we do at

00:09:19.170 --> 00:09:21.640
T-minus 10 days to expiration.

00:09:21.640 --> 00:09:23.390
And to illustrate kind
of what we're doing,

00:09:23.400 --> 00:09:23.400
we're going to send a new
subscription to iTunes Connect.

00:09:23.400 --> 00:09:25.420
And to illustrate kind of
what we're doing there,

00:09:25.420 --> 00:09:27.590
I want to just talk about
what happens for a particular

00:09:27.590 --> 00:09:29.040
event like a price increase.

00:09:29.140 --> 00:09:31.090
In this scenario where
you may be accidentally,

00:09:31.190 --> 00:09:32.980
may be on purpose,
but sometimes accidents

00:09:32.980 --> 00:09:35.500
happen and you may have
accidentally increased the price,

00:09:35.500 --> 00:09:36.790
it goes up, it goes down.

00:09:36.950 --> 00:09:40.830
For this user,
since it happened before this 10-day

00:09:41.110 --> 00:09:46.770
period or time in this subscription,
those changes are invisible to this user.

00:09:46.870 --> 00:09:49.940
Now, if they happened after the 10-day
period and you're in the subscription,

00:09:49.950 --> 00:09:51.790
you're going to have to
wait a little bit longer.

00:09:51.930 --> 00:09:53.010
So, you're going to have to
wait a little bit longer.

00:09:53.140 --> 00:09:55.210
And you're in this 10 days to expiration.

00:09:55.210 --> 00:09:57.860
We're actually going to be
looking for price increases.

00:09:57.860 --> 00:09:59.880
And if we see them,
we're going to turn off auto renew.

00:09:59.880 --> 00:10:02.200
And we're going to send
an email to the user.

00:10:02.220 --> 00:10:05.110
And if the user approves
the higher price,

00:10:05.280 --> 00:10:09.400
then we're going to turn auto renew
back on and you're back in business.

00:10:09.430 --> 00:10:11.440
Okay.

00:10:11.440 --> 00:10:14.020
Now, another thing we're going to be
doing during this period is testing

00:10:14.020 --> 00:10:15.920
for the user's ability to pay.

00:10:16.050 --> 00:10:19.120
If a user maybe had a
credit card when it started,

00:10:19.120 --> 00:10:21.220
obviously, but maybe they pulled
the credit card off,

00:10:21.220 --> 00:10:22.820
maybe they tried to buy a song
and their card gets to go.

00:10:22.820 --> 00:10:26.400
Maybe their card is expired.

00:10:26.710 --> 00:10:28.060
You know, there's a lot of things
which can go wrong.

00:10:28.060 --> 00:10:29.710
If something goes wrong,
we're actually going to start looking

00:10:29.810 --> 00:10:32.900
for it now and we'll send out an email
to the customer if it looks like we

00:10:32.990 --> 00:10:35.920
think they're not going to be able
to pay because we don't want them to,

00:10:35.920 --> 00:10:38.570
you know, lapse on their subscription.

00:10:38.670 --> 00:10:39.200
Okay.

00:10:39.250 --> 00:10:42.980
Now, at T minus 24 hours to expiry,
this is the window within

00:10:42.980 --> 00:10:45.470
which we're actually going
to try and renew the thing.

00:10:45.900 --> 00:10:48.660
Now, this doesn't mean we're actually
going to try and fire off renewal

00:10:48.660 --> 00:10:50.530
purchases at T minus 24 hours.

00:10:50.540 --> 00:10:52.520
It just means that somewhere in there,
that's when we're going to

00:10:52.520 --> 00:10:52.520
start to see a lot of changes.

00:10:52.520 --> 00:10:54.520
We're going to start doing it.

00:10:54.520 --> 00:10:56.800
Now, if it fails,
we're going to keep trying

00:10:56.980 --> 00:10:59.120
to renew this subscription.

00:10:59.120 --> 00:11:02.920
But eventually,
a little bit after expiration,

00:11:02.920 --> 00:11:05.700
we're going to basically give up.

00:11:06.130 --> 00:11:09.350
Send a billing problem email if
we think that we had to give up

00:11:09.360 --> 00:11:11.640
because of a billing problem.

00:11:11.680 --> 00:11:12.920
Now, the user will get that email.

00:11:12.980 --> 00:11:16.700
Hopefully, they will either go into
iTunes and basically fix

00:11:16.790 --> 00:11:20.340
their billing info and then,
you know, inside iTunes,

00:11:20.340 --> 00:11:21.600
interactively renewal there.

00:11:21.640 --> 00:11:24.100
Or they might, in your app,
click buy again.

00:11:24.150 --> 00:11:27.140
Now,
when it was active and they clicked buy,

00:11:27.140 --> 00:11:28.560
you know,
they got that other dialogue which says,

00:11:28.560 --> 00:11:29.490
hey, you're already subscribed.

00:11:29.550 --> 00:11:30.780
Well, now they're no longer subscribed.

00:11:30.830 --> 00:11:33.260
So instead,
you just get the same confirmation type

00:11:33.340 --> 00:11:35.340
dialogue and the purchase happens again.

00:11:35.400 --> 00:11:38.290
Except in this case,
I call it interactive

00:11:38.290 --> 00:11:40.320
renewal buy has occurred.

00:11:40.410 --> 00:11:42.560
Their subscription is
active again in this case.

00:11:42.660 --> 00:11:43.750
But you have this service gap.

00:11:43.960 --> 00:11:46.230
Now, if you have an audio streaming
or video streaming type

00:11:46.230 --> 00:11:49.310
service or something like that,
you don't really care.

00:11:49.600 --> 00:11:52.550
But if you have a subscription
to discrete content like

00:11:52.550 --> 00:11:55.400
magazines and so on,
well, that could be a deal.

00:11:55.400 --> 00:11:56.830
I mean,
because if that gap is big enough,

00:11:56.970 --> 00:11:58.610
you know,
might have missed -- that customer

00:11:58.680 --> 00:12:02.060
might have missed an issue they
otherwise would have been entitled to.

00:12:02.300 --> 00:15:03.200
[Transcript missing]

00:15:03.500 --> 00:15:03.710
Okay.

00:15:03.710 --> 00:15:07.560
Now, I just mentioned cancellation,
so a note on that.

00:15:07.560 --> 00:15:09.300
Users cannot cancel.

00:15:09.300 --> 00:15:12.460
They can't do anything in a live
subscription inside iTunes that will

00:15:12.460 --> 00:15:15.900
cause the service to be terminated
and for their money to be returned.

00:15:16.040 --> 00:15:19.190
However, iTunes customer support
does have this capability,

00:15:19.190 --> 00:15:23.060
and for customer satisfaction reasons,
they can go in and cancel something.

00:15:23.060 --> 00:15:25.960
And when they do,
that's when you see this cancellation

00:15:25.960 --> 00:15:27.400
date show up in the receipts.

00:15:27.600 --> 00:15:30.110
And furthermore,
that's when verify receipt,

00:15:30.110 --> 00:15:33.530
which we'll talk about more in a sec,
will return inactive and

00:15:33.530 --> 00:15:35.380
return active immediately.

00:15:35.400 --> 00:15:36.460
All right.

00:15:36.520 --> 00:15:38.900
So a few other new things.

00:15:38.900 --> 00:15:40.890
These are the timestamp additions.

00:15:40.890 --> 00:15:42.880
There isn't any new data here.

00:15:42.900 --> 00:15:46.530
It's just we're providing PST and
milliseconds in the receipt for

00:15:46.530 --> 00:15:49.200
all these different timestamps,
expires date, purchase date,

00:15:49.200 --> 00:15:51.400
original purchase date, and so on.

00:15:51.400 --> 00:15:53.380
These are just a developer convenience.

00:15:53.410 --> 00:15:55.400
The milliseconds is just
more machine friendly.

00:15:55.400 --> 00:15:57.400
It was available for some
timestamps but not all.

00:15:57.400 --> 00:15:59.400
This makes it consistent.

00:15:59.400 --> 00:16:01.400
PST format is more human friendly.

00:16:01.450 --> 00:16:06.820
And you might be wondering why add
PST when we already had GMT in there.

00:16:07.190 --> 00:16:09.400
We wanted PST in there because
in the iTunes store we do

00:16:09.400 --> 00:16:10.740
calendar-based renewals.

00:16:10.870 --> 00:16:13.240
That means if I buy something
on the 5th of March,

00:16:13.240 --> 00:16:17.430
the 5th of April, the 5th of May,
the 5th of June, and so on and so forth,

00:16:17.490 --> 00:16:18.370
it's always going to be on the 5th.

00:16:18.480 --> 00:16:20.240
Customers can predict when
the renew is going to happen.

00:16:20.240 --> 00:16:23.340
But that means,
as this example illustrates,

00:16:23.350 --> 00:16:25.550
some weird things can happen.

00:16:25.560 --> 00:16:28.520
And I just want to give you
the example so you understand.

00:16:28.520 --> 00:16:31.940
If you order a monthly subscription,
for example, at 2 a.m.

00:16:31.940 --> 00:16:35.320
on April 1st in New York City,
that's Eastern Standard Time.

00:16:36.230 --> 00:16:40.740
Now, in California, that's March 31st.

00:16:40.820 --> 00:16:43.140
So why does that matter?

00:16:43.140 --> 00:16:45.170
Well, the customer,
they're looking at their calendar,

00:16:45.190 --> 00:16:45.970
they see the 1st.

00:16:46.020 --> 00:16:48.680
But when they see dialogues from us,
when they get e-mails from us,

00:16:48.680 --> 00:16:51.750
when they look at the UI from us,
they're going to see something talking

00:16:51.790 --> 00:16:54.330
about essentially the end of a month
and not the beginning of a month.

00:16:54.480 --> 00:16:58.240
So if you've ever wondered why you
saw something like that on occasion,

00:16:58.240 --> 00:17:00.840
this hopefully will
shed some light on that.

00:17:02.620 --> 00:17:03.500
All right.

00:17:03.500 --> 00:17:07.780
So let's talk about how these
receipts are used when you

00:17:07.780 --> 00:17:09.130
do something like a purchase.

00:17:09.200 --> 00:17:12.390
So the players we have up here is
the iPhone representing your app.

00:17:12.450 --> 00:17:16.300
You've got the iTunes store there at
the top with the little note icon by it.

00:17:16.300 --> 00:17:18.110
And this is supposed to be your
server down here at the bottom.

00:17:18.110 --> 00:17:19.180
Okay.

00:17:19.180 --> 00:17:23.660
So we do the buy request
and a receipt is generated.

00:17:23.660 --> 00:17:25.760
Basically a transaction
record is generated.

00:17:25.760 --> 00:17:26.980
It is returned to your app.

00:17:27.030 --> 00:17:32.130
And you take that receipt and what
you should do is unlock content.

00:17:32.140 --> 00:17:34.450
So you want to pass that
to your server to do that.

00:17:34.500 --> 00:17:37.030
So you're going to present the receipt
to your server and your server should

00:17:37.030 --> 00:17:38.700
turn around and call verify receipt.

00:17:38.700 --> 00:17:42.070
So it calls verify receipt and
when it does it passes the receipt

00:17:42.140 --> 00:17:44.100
and it passes the shared secret.

00:17:44.100 --> 00:17:46.930
The shared secret is one of
these things you configure in

00:17:47.010 --> 00:17:50.290
iTunes Connect and here's a place
where it actually gets used.

00:17:50.290 --> 00:17:54.070
Now what we're going to do is
return one of these statuses.

00:17:54.100 --> 00:17:54.580
Okay.

00:17:54.600 --> 00:17:58.520
So let's talk about why you'd
want to call verify receipt.

00:17:58.520 --> 00:18:01.780
Initially after a buy, after a buy,
you're going to want

00:18:01.780 --> 00:18:01.780
to call verify receipt.

00:18:01.780 --> 00:18:03.830
after a purchase, I should say.

00:18:03.830 --> 00:18:06.780
If you call this,
this assures you that that

00:18:06.780 --> 00:18:07.740
purchase really happened.

00:18:07.740 --> 00:18:09.720
Your server doesn't know from
Adam this thing that's coming

00:18:09.720 --> 00:18:10.820
in and sending it the receipt.

00:18:10.820 --> 00:18:12.800
It could be a receipt for
a totally different app.

00:18:12.800 --> 00:18:16.650
It might be just a bunch of characters
that have no meaning whatsoever.

00:18:16.650 --> 00:18:19.500
Is your server just going to
take its word for it and provide

00:18:19.500 --> 00:18:21.160
service to whatever called?

00:18:21.160 --> 00:18:22.240
I don't think so.

00:18:22.240 --> 00:18:25.460
So you call verify receipt,
you can find out if it's really

00:18:25.520 --> 00:18:28.280
a receipt that's actually
signed by the iTunes store,

00:18:28.280 --> 00:18:31.470
and furthermore, since you can get the
properties of the receipt last,

00:18:31.530 --> 00:18:34.950
you can find out that it's actually
for your app and not someone else's.

00:18:34.960 --> 00:18:35.930
So this is important.

00:18:35.970 --> 00:18:39.390
If everything is in good shape,
we're going to turn green there.

00:18:39.390 --> 00:18:40.850
That's zero, active.

00:18:41.100 --> 00:18:44.630
But if there's something tampered with or
something not right about that receipt,

00:18:44.820 --> 00:18:46.190
we'll return malformed.

00:18:46.330 --> 00:18:50.160
So that's why you want to call
it initially after a purchase.

00:18:50.180 --> 00:18:52.130
Now,
in the time after the initial purchase,

00:18:52.130 --> 00:18:55.250
you're still going to want to call
verify receipt because this is

00:18:55.250 --> 00:18:58.700
how you're going to learn about
renewal on an expired receipt if

00:18:58.700 --> 00:19:00.340
that's all you have on your server.

00:19:00.590 --> 00:19:03.890
This is how you can find out
about cancellation immediately

00:19:04.430 --> 00:19:07.440
after someone -- basically,
you can have a receipt

00:19:07.440 --> 00:19:10.560
that hasn't expired yet,
but if you call verify receipt, say,

00:19:10.560 --> 00:19:13.490
every day or every month or whatever,
you can find out about cancellations

00:19:13.600 --> 00:19:18.240
more promptly and maybe terminate
service if that's your business model.

00:19:18.240 --> 00:19:21.790
Also, if it's active,
you're going to get the latest receipt.

00:19:21.990 --> 00:19:24.150
You don't actually have to wait
for the client to send it to you

00:19:24.150 --> 00:19:25.630
for you to get the latest receipt.

00:19:25.630 --> 00:19:27.560
You can actually find out
for yourself on the server.

00:19:27.560 --> 00:19:29.370
And finally, we're always going to give
you the last good receipt.

00:19:29.370 --> 00:19:29.640
So you can find out for
yourself on the server.

00:19:29.660 --> 00:19:30.120
And finally, we're always going to give
you the last good receipt.

00:19:30.140 --> 00:19:30.140
And finally, we're always going to give
you the last good receipt.

00:19:30.140 --> 00:19:30.210
And finally, we're always going to give
you the last good receipt.

00:19:30.340 --> 00:19:33.580
And this could be useful
because even if it's expired,

00:19:33.580 --> 00:19:35.940
you're going to get info
about that last good receipt.

00:19:35.940 --> 00:19:39.220
And if you know when something lapsed,
that helps you compute a

00:19:39.220 --> 00:19:41.110
meaningful maybe grace period.

00:19:42.340 --> 00:19:45.620
Okay,
so let's go back to this diagram here.

00:19:45.760 --> 00:19:50.670
Let's say we've returned status zero
for success because everything worked.

00:19:50.810 --> 00:19:54.530
And now that our server is completely
satisfied that this purchase is in order,

00:19:54.670 --> 00:19:57.330
your server is satisfied,
your phone is satisfied,

00:19:57.420 --> 00:20:00.210
now is the time to
finish the transaction.

00:20:00.400 --> 00:20:02.190
So, we still don't have any content yet.

00:20:02.320 --> 00:20:04.480
So, let's see about getting that.

00:20:04.610 --> 00:20:08.570
So, we call get content and this is
something you might call right after

00:20:08.570 --> 00:20:11.970
the purchase or this might be something
you call in the hours and weeks

00:20:12.060 --> 00:20:13.730
and days after that initial purchase.

00:20:13.900 --> 00:20:16.740
The point is after the purchase,
your clients are going to be

00:20:16.800 --> 00:20:18.660
coming in and asking for content.

00:20:18.660 --> 00:20:20.520
Now, when they do so,
they should probably

00:20:20.520 --> 00:20:21.780
just present the receipt.

00:20:21.890 --> 00:20:24.000
They could present the original
transaction ID and we go

00:20:24.000 --> 00:20:25.400
through this whole cycle of,
you know,

00:20:25.400 --> 00:20:27.260
verifying the receipt again and all that.

00:20:27.510 --> 00:20:31.280
But the point is you come back after
you finish the transaction and over the

00:20:31.280 --> 00:20:33.660
space of the life of the subscription,
you're going to be calling get

00:20:33.660 --> 00:20:35.160
content in some way or another.

00:20:35.260 --> 00:20:37.890
So, in this case, there's like this new
issue of a magazine.

00:20:38.050 --> 00:20:41.150
It gets returned to
your phone in that case.

00:20:41.430 --> 00:20:45.500
In this situation,
we have paid with the iTunes store.

00:20:45.500 --> 00:20:49.030
You verified that the payment
is all in order with your server

00:20:49.110 --> 00:20:51.320
calling ours for verified receipt.

00:20:51.400 --> 00:20:54.410
Once you know you're in a position
to fulfill the customer's purchase,

00:20:54.600 --> 00:20:57.400
you finish the transaction so
that gets out of the queue.

00:20:57.400 --> 00:21:00.340
And then finally,
over the course of the days and months,

00:21:00.340 --> 00:21:02.160
you've delivered some content.

00:21:02.360 --> 00:21:03.090
All right.

00:21:03.180 --> 00:21:06.390
Now, for this renewal example,
I want to just pretend that someone

00:21:06.400 --> 00:21:08.960
actually would put their phone in a
drawer when they went on vacation.

00:21:09.130 --> 00:21:10.840
So the phone is not on.

00:21:11.040 --> 00:21:12.410
The app isn't running.

00:21:12.520 --> 00:21:14.100
But meanwhile,
the iTunes store is running

00:21:14.210 --> 00:21:15.460
and we're renewing this thing.

00:21:15.670 --> 00:21:18.260
So maybe a month goes by and
another month goes by and we've

00:21:18.390 --> 00:21:19.990
got two renewals sitting out there.

00:21:20.160 --> 00:21:22.900
So what happens when the user
comes back from vacation?

00:21:22.900 --> 00:21:25.900
They come back, they fire up their phone,
they go to your app.

00:21:26.040 --> 00:21:27.160
Right now,
the app just has one issue of the app.

00:21:27.160 --> 00:21:28.870
issue of a magazine and
it's got one receipt.

00:21:30.400 --> 00:21:33.860
Well, StoreKit is going to recognize that
there's some outstanding transactions for

00:21:33.860 --> 00:21:37.200
this user and it is just going to go get
those transactions and pull them down.

00:21:37.300 --> 00:21:39.780
So now your phone knows
about these three receipts,

00:21:39.950 --> 00:21:41.390
but it doesn't have any content yet.

00:21:41.490 --> 00:21:43.870
So once you do that,
whenever your app wakes up and

00:21:43.970 --> 00:21:46.710
it finds these transactions,
just like you would do

00:21:46.710 --> 00:21:50.070
after a buy or purchase,
you're going to pass that content to

00:21:50.070 --> 00:21:52.140
unlock anything associated with it.

00:21:52.140 --> 00:21:54.710
In this case, we're passing two receipts
down to your server.

00:21:54.820 --> 00:21:57.640
We're going to verify those receipts just
like we did after the original purchase,

00:21:57.640 --> 00:22:01.010
make sure nothing got canceled,
and so on.

00:22:01.950 --> 00:22:04.980
And finish the transaction
once we're satisfied,

00:22:04.980 --> 00:22:08.250
once our server has told us, yes,
I've processed these receipts,

00:22:08.300 --> 00:22:11.100
everything's in good order,
go ahead and finish the transaction.

00:22:11.100 --> 00:22:12.190
So you do.

00:22:12.340 --> 00:22:15.110
And now when you get content by maybe
presenting the receipt again and

00:22:15.110 --> 00:22:17.740
going through the whole verify cycle,
well,

00:22:17.740 --> 00:22:22.200
it turns out there were two issues of a
magazine that this user was entitled to

00:22:22.200 --> 00:22:25.400
because of the two previous purchases
that had happened while they were out.

00:22:25.440 --> 00:22:28.320
So we return that to the user.

00:22:28.590 --> 00:22:33.490
Okay,
so we have renewed on the iTunes Store.

00:22:33.590 --> 00:22:34.760
A few weeks go by.

00:22:35.070 --> 00:22:37.300
The app, when it wakes up,
is going to discover this content.

00:22:37.300 --> 00:22:40.130
That content,
the proof of those purchases

00:22:40.200 --> 00:22:43.600
have been sent to our server,
sent to your server.

00:22:43.600 --> 00:22:44.580
You verify them.

00:22:44.580 --> 00:22:47.980
Once all that has been acknowledged,
we finish the transactions

00:22:47.980 --> 00:22:49.260
in the iTunes Store.

00:22:49.260 --> 00:22:51.520
And as it turns out,
we've delivered some content.

00:22:51.520 --> 00:22:53.820
It turns out, you know,
two issues of a magazine.

00:22:55.020 --> 00:22:55.640
Okay.

00:22:55.860 --> 00:22:59.820
Now, for Restore All,
this isn't new for auto renewables.

00:22:59.820 --> 00:23:02.370
You'd want to do it for
other kinds of in-apps,

00:23:02.370 --> 00:23:04.260
too, like non-consumables.

00:23:04.260 --> 00:23:06.340
The thing that's unique about
Restore All for auto renewables

00:23:06.340 --> 00:23:08.640
is the fact that you're not going
to get just one receipt back.

00:23:08.720 --> 00:23:09.620
You're not going to get the first one.

00:23:09.620 --> 00:23:10.920
You're not going to get the last one.

00:23:11.120 --> 00:23:12.260
You're going to get all of them.

00:23:12.260 --> 00:23:16.370
So if you have 24 months of a monthly,
when you call Restore All,

00:23:16.370 --> 00:23:18.860
that user is going to
get 24 receipts back.

00:23:18.910 --> 00:23:21.160
Now, why do you want to do this?

00:23:21.160 --> 00:23:24.640
The most obvious reason is because, well,
devices can get wiped out.

00:23:24.710 --> 00:23:26.210
Apps can get deleted.

00:23:26.230 --> 00:23:28.880
You want to be able
to allow users to get,

00:23:28.880 --> 00:23:32.200
you know, their service re-enabled
or get the lost content.

00:23:32.200 --> 00:23:34.850
Now, another thing you think you should
be aware of with Restore All is

00:23:34.850 --> 00:23:36.780
what happens with multiple devices.

00:23:36.780 --> 00:23:39.590
So you have this phone,
and you've bought the app,

00:23:39.590 --> 00:23:41.100
and you've got the receipt on it.

00:23:41.100 --> 00:23:41.640
Great.

00:23:41.640 --> 00:23:43.710
Now, you get another phone.

00:23:43.730 --> 00:23:45.270
You do a Restore All.

00:23:45.330 --> 00:23:47.680
Something happened when that Restore
All happened in the iTunes Store.

00:23:47.680 --> 00:23:50.270
Not only did it get restored,
iTunes Store now knows

00:23:50.270 --> 00:23:51.730
about both of these devices.

00:23:51.950 --> 00:23:54.340
That means when a renewal happens,
we actually put a transaction

00:23:54.340 --> 00:23:54.340
back in the iTunes Store.

00:23:54.360 --> 00:23:57.240
So you can see the transaction
in the queues of both devices.

00:23:57.270 --> 00:23:59.920
And if a third device comes along,
you can restore on that.

00:23:59.930 --> 00:24:04.060
Notice in this case two receipts
came down instead of one.

00:24:04.070 --> 00:24:05.800
When renews happen,
there's going to be transactions in

00:24:05.800 --> 00:24:07.100
the queues for all those devices.

00:24:07.100 --> 00:24:09.060
So this way,
it's sort of like auto-download

00:24:09.060 --> 00:24:12.920
for in-apps with auto-renewables,
just so you know that's going on.

00:24:12.950 --> 00:24:15.500
So some things about the sandbox.

00:24:16.800 --> 00:26:16.900
[Transcript missing]

00:26:17.140 --> 00:26:20.890
Now, one last thing about the Sandbox
I want to talk about is some

00:26:20.890 --> 00:26:22.860
app review considerations.

00:26:22.860 --> 00:26:24.760
This happens to everybody
who uses auto renewables.

00:26:24.760 --> 00:26:27.660
It's a tricky thing and the best way
for me to explain it is first to talk

00:26:27.660 --> 00:26:30.770
about the development environment,
then the production environment,

00:26:30.770 --> 00:26:33.000
and then the hybrid
environment that is app review.

00:26:33.000 --> 00:26:34.960
So in development,
you have a dev-signed app.

00:26:34.990 --> 00:26:39.000
Dev-signed apps are hardwired into
talking to the iTunes Store Sandbox.

00:26:39.130 --> 00:26:41.090
Now,
dev-signed apps are also hardwired to

00:26:41.090 --> 00:26:43.000
probably talking to your test server.

00:26:43.000 --> 00:26:45.220
Of course,
test servers are going to want to

00:26:45.220 --> 00:26:46.950
talk to the iTunes Store in test.

00:26:46.990 --> 00:26:48.970
So it's test, test, test.

00:26:49.010 --> 00:26:51.000
And that all makes sense.

00:26:51.000 --> 00:26:52.380
Now,
you go into production and it's the same

00:26:52.410 --> 00:26:54.000
deal except it's a production-signed app.

00:26:54.100 --> 00:26:56.000
Production-signed apps talk
to production iTunes Store.

00:26:56.000 --> 00:26:58.000
Production-signed apps talk
to your production server.

00:26:58.330 --> 00:27:02.000
Production servers verify receipts
against the production iTunes Store.

00:27:02.050 --> 00:27:03.000
And this is all consistent.

00:27:03.090 --> 00:27:05.000
Production, production, production.

00:27:05.110 --> 00:27:05.360
Okay.

00:27:05.440 --> 00:27:07.990
But in app review,
you have this hybrid deal.

00:27:08.000 --> 00:27:10.790
You have a production-signed app, okay,
but it just thinks it's talking

00:27:11.050 --> 00:27:13.000
to production iTunes Store,
but it's not.

00:27:13.000 --> 00:27:14.300
It's talking to the Sandbox.

00:27:14.300 --> 00:27:16.650
But your production-signed
app is hardwired to talking

00:27:16.650 --> 00:27:18.000
to your production server.

00:27:18.000 --> 00:27:20.860
So you have this situation where
you have your server having to,

00:27:20.860 --> 00:27:22.970
in one case,
talk to production iTunes Store,

00:27:22.970 --> 00:27:25.000
and in another case, talk to Sandbox.

00:27:25.000 --> 00:27:25.470
Okay.

00:27:25.470 --> 00:27:27.200
So what can you do about this?

00:27:27.330 --> 00:27:29.650
There's several different strategies.

00:27:29.650 --> 00:27:31.450
I'm just going to mention two.

00:27:31.610 --> 00:27:34.000
One I call the smart production server.

00:27:34.000 --> 00:27:35.860
In this case,
what you do is you pass to your

00:27:35.870 --> 00:27:37.440
server the version ID of your app.

00:27:37.460 --> 00:27:41.000
And hopefully your server is aware of
what's in production and what isn't.

00:27:41.000 --> 00:27:44.000
And if it sees like a 2.0 and it
knows the highest version that

00:27:44.000 --> 00:27:48.520
is actually in production is 1.5,
it can discriminate and send the verify

00:27:48.520 --> 00:27:51.000
receipt request to the right place.

00:27:51.020 --> 00:27:54.090
But I think a more bulletproof and
probably higher performance way to

00:27:54.090 --> 00:27:56.000
go is the reactive production server.

00:27:56.000 --> 00:27:59.000
So in this case,
your production server always talks

00:27:59.000 --> 00:28:02.780
to iTunes Store production first,
and 99.9% of the time,

00:28:02.780 --> 00:28:05.000
that's going to be the right thing.

00:28:05.000 --> 00:28:07.350
But once in a blue moon,
the next version of your app

00:28:07.350 --> 00:28:08.930
will be reviewed in app review.

00:28:09.040 --> 00:28:12.000
So that production server will
get one of these Sandbox receipts.

00:28:12.000 --> 00:28:15.220
When it does,
we're going to return status 21007,

00:28:15.260 --> 00:28:18.000
that's Sandbox receipt
received in production.

00:28:18.000 --> 00:28:19.470
And that's your signal to go off and,
okay,

00:28:19.570 --> 00:28:20.990
that's not -- this is a Sandbox receipt.

00:28:21.030 --> 00:28:22.000
Someone's doing some app review.

00:28:22.000 --> 00:28:26.000
I'll just go and talk to iTunes
Sandbox to handle this receipt.

00:28:29.420 --> 00:28:31.890
All right,
so using non-auto-renewing subscriptions.

00:28:32.010 --> 00:28:34.900
This subscription name so
poorly I gave it a new name.

00:28:34.990 --> 00:28:38.500
So here's what it's about.

00:28:38.870 --> 00:28:42.890
Basically, these kinds of subscriptions
are a kind of consumable.

00:28:43.030 --> 00:28:45.210
You can buy them again and again,
which is what you want with

00:28:45.210 --> 00:28:46.700
something that's a subscription.

00:28:46.700 --> 00:28:47.700
You want to have the same thing.

00:28:47.700 --> 00:28:48.600
You can buy it again and again.

00:28:48.600 --> 00:28:50.560
That rules out non-consumables.

00:28:50.560 --> 00:28:52.600
So it's a kind of consumable.

00:28:52.600 --> 00:28:55.160
All purchases happen
interactively in the app.

00:28:55.240 --> 00:28:57.140
There's no background purchasing
with this sort of thing.

00:28:57.180 --> 00:28:59.280
So it's all upfront purchasing.

00:28:59.300 --> 00:29:01.790
You're in the app doing the renewals.

00:29:01.790 --> 00:29:03.980
So those sound like downsides.

00:29:03.980 --> 00:29:06.620
And maybe they are.

00:29:06.620 --> 00:29:09.910
But the reasons you'd want to use
this are you do theoretically have

00:29:10.030 --> 00:29:11.940
more control over the situation.

00:29:11.940 --> 00:29:13.400
And so do your users.

00:29:13.400 --> 00:29:14.640
So that's nice.

00:29:14.640 --> 00:29:17.320
But bottom line is not all apps
are going to be allowed to use

00:29:17.420 --> 00:29:19.060
auto-renewing subscriptions.

00:29:19.060 --> 00:29:20.900
So this is what you have to work with.

00:29:20.960 --> 00:29:23.520
So what are some strategies you
can use for something like this?

00:29:23.520 --> 00:29:24.690
There's several.

00:29:24.690 --> 00:29:28.640
I'm going to talk about one in some
detail and touch on another one.

00:29:28.640 --> 00:29:29.280
But one of the things I'm going to
talk about is the fact that you can

00:29:29.280 --> 00:29:29.280
use auto-renewing subscriptions.

00:29:29.280 --> 00:29:31.680
One strategy is iCloud strategy.

00:29:31.680 --> 00:29:36.090
So the idea here is that you save
the purchased receipts in iCloud.

00:29:36.410 --> 00:29:39.680
Being consumables,
these receipts can't be restored

00:29:39.680 --> 00:29:42.190
on demand from the iTunes
store once they're finished.

00:29:42.220 --> 00:29:44.340
That's why you have to
save them someplace.

00:29:44.360 --> 00:29:46.720
And iCloud is a pretty
convenient place to put them.

00:29:46.720 --> 00:29:49.510
Basically,
you can access these receipts if

00:29:49.510 --> 00:29:52.260
they're saved in iCloud from any device.

00:29:52.260 --> 00:29:55.270
So it kind of handles
some restore scenarios.

00:29:55.270 --> 00:29:58.490
There's no extra
registration step for iCloud.

00:29:58.490 --> 00:30:01.620
I mean, users are registered by the
time they turn on their phone,

00:30:01.620 --> 00:30:03.060
if it's iOS 5 or higher.

00:30:03.060 --> 00:30:03.520
So that's nice.

00:30:03.520 --> 00:30:05.960
Now, regardless of where these
receipts are stored,

00:30:05.960 --> 00:30:09.220
you need to, you know,
test if something has

00:30:09.230 --> 00:30:10.250
expired or not in the app.

00:30:10.320 --> 00:30:13.090
So how can you do that on something
where the receipt that you have

00:30:13.100 --> 00:30:14.160
doesn't have an expiration date?

00:30:14.180 --> 00:30:18.680
Well, fortunately for you,
there's no opt-ins and there's no trials.

00:30:18.680 --> 00:30:22.000
So you actually can
take the purchase date,

00:30:22.000 --> 00:30:26.400
combine that with your product
ID from which you can derive

00:30:26.410 --> 00:30:29.240
the duration and you can figure,
you know, what your expiration date is

00:30:29.240 --> 00:30:29.240
and do some expiration testing
when people are using your app.

00:30:29.240 --> 00:30:33.690
So let's just kind of diagram this
out and look at how it might work.

00:30:33.690 --> 00:30:34.420
All right.

00:30:34.470 --> 00:30:40.070
So you've got your app and you buy
one of these consumable-like products.

00:30:40.070 --> 00:30:42.730
You get a receipt back for it.

00:30:42.730 --> 00:30:42.730
You

00:30:43.080 --> 00:30:45.570
And the very first thing you
do is you store this in iCloud.

00:30:45.660 --> 00:30:49.020
So once your app stores it in
iCloud and your app knows it's

00:30:49.020 --> 00:30:51.790
successfully stored in iCloud,
then and only then do you

00:30:51.860 --> 00:30:53.490
finish the transaction.

00:30:53.570 --> 00:30:55.140
Okay, because once that
transaction is finished,

00:30:55.150 --> 00:30:55.690
it's gone.

00:30:55.770 --> 00:30:56.510
It's gone from the queue.

00:30:56.720 --> 00:30:58.530
And you want to finish the
transaction because if you don't,

00:30:58.670 --> 00:31:00.440
that transaction will hang
around in your queue and every

00:31:00.440 --> 00:31:02.600
time a user goes to their app,
they're going to be prompted

00:31:02.600 --> 00:31:03.360
to log in to get it.

00:31:03.430 --> 00:31:05.820
So you need to finish it,
but you just need to finish

00:31:05.890 --> 00:31:06.960
it at the right time.

00:31:07.020 --> 00:31:07.540
All right.

00:31:07.610 --> 00:31:10.340
So you've got that receipt.

00:31:10.520 --> 00:31:13.260
Now you just unlock service pretty
much like we did in the first example.

00:31:13.260 --> 00:31:14.700
So receipt gets passed to your server.

00:31:14.700 --> 00:31:18.630
You verify that it's actually a
legitimate receipt from the iTunes

00:31:18.630 --> 00:31:20.250
store and you can unlock service.

00:31:20.360 --> 00:31:22.420
So the user is paid.

00:31:22.420 --> 00:31:25.860
You've persisted the thing someplace,
in this case iCloud.

00:31:25.860 --> 00:31:27.660
Once you know you've
successfully persisted it,

00:31:27.660 --> 00:31:30.230
you've acknowledged that with
the iTunes store by finishing the

00:31:30.270 --> 00:31:33.690
transaction and then finally you've
flipped on service when you told

00:31:33.700 --> 00:31:35.800
your server about that purchase.

00:31:35.850 --> 00:31:38.050
Now, the renewal is manual.

00:31:38.050 --> 00:31:38.950
It all happens in the front.

00:31:38.990 --> 00:31:40.360
So what is that like?

00:31:40.360 --> 00:31:41.750
Your phone wakes up.

00:31:41.800 --> 00:31:44.360
Every time it launches,
it should check for receipts,

00:31:44.360 --> 00:31:45.500
in this case in iCloud.

00:31:45.600 --> 00:31:47.130
It gets the receipt.

00:31:47.480 --> 00:31:48.650
It checks for expiry.

00:31:48.870 --> 00:31:51.650
Now, you know, 99% of the time when
it checks for expiry,

00:31:51.650 --> 00:31:52.470
nothing's expired.

00:31:52.700 --> 00:31:53.860
But eventually it's going to be expired.

00:31:53.860 --> 00:31:55.410
And when it does,
you can present the buy button

00:31:55.410 --> 00:31:58.310
to the customer and ask them,
hey, do you want to renew

00:31:58.310 --> 00:31:59.100
your subscription now?

00:31:59.250 --> 00:32:00.840
If they agree, they click buy.

00:32:00.930 --> 00:32:02.180
You buy the consumable again.

00:32:02.180 --> 00:32:03.200
You get another receipt.

00:32:03.420 --> 00:32:05.240
This is receipt number two.

00:32:05.500 --> 00:32:06.070
Store that.

00:32:06.260 --> 00:32:09.390
Once you're sure that's stored,
finish the transaction and

00:32:09.390 --> 00:32:10.260
then you unlock service.

00:32:10.260 --> 00:32:12.360
Just like we did in the previous case.

00:32:12.520 --> 00:32:16.260
Pass the new receipt, verify it,
and you're back in business.

00:32:16.440 --> 00:32:16.850
All right.

00:32:16.950 --> 00:32:20.690
So we've queried for status by looking
at our stored receipts in iCloud.

00:32:20.930 --> 00:32:23.590
We know the purchase date of all
those receipts and we have the

00:32:23.770 --> 00:32:25.120
product ID in all those receipts.

00:32:25.140 --> 00:32:27.430
So we know when each of them expired.

00:32:27.480 --> 00:32:31.830
And if things have expired, well,
we're going to let the user buy again.

00:32:31.830 --> 00:32:33.950
We'll persist that new receipt.

00:32:33.990 --> 00:32:36.910
We'll acknowledge that by
finishing the transaction and

00:32:36.910 --> 00:32:38.510
then we'll extend service.

00:32:39.170 --> 00:32:42.420
Okay, so in this restore example,
we've got a phone that

00:32:42.420 --> 00:32:43.720
has just been wiped.

00:32:43.840 --> 00:32:47.520
Okay, so it's completely empty.

00:32:47.580 --> 00:32:49.160
It's just like in the previous example.

00:32:49.160 --> 00:32:50.250
There's really no difference.

00:32:50.350 --> 00:32:54.540
As long as your app is always set up to
always get receipts from iCloud first,

00:32:54.540 --> 00:32:58.370
this app is going to discover, oh, look,
I've got two purchases.

00:32:58.430 --> 00:33:01.490
It's going to pull those
down and unlock service.

00:33:01.920 --> 00:33:07.100
and verify the receipts just like
before and you're back in business here.

00:33:07.100 --> 00:33:10.400
So we can query status just like
we did in the previous example.

00:33:10.520 --> 00:33:14.360
We verified with the iTunes store
when we verified the receipt

00:33:14.360 --> 00:33:16.360
and we've enabled service.

00:33:16.470 --> 00:33:19.520
Now that all sounds great except
there is this one downside.

00:33:19.630 --> 00:33:22.650
And I don't know how common
this is and maybe it's not a big

00:33:22.650 --> 00:33:24.260
deal but it's just a problem.

00:33:24.600 --> 00:33:25.650
So you've got this phone.

00:33:25.650 --> 00:33:26.450
It's your phone.

00:33:26.450 --> 00:33:27.400
You're still you.

00:33:27.400 --> 00:33:30.100
You've not logged out of it at all as
far as the iTunes store is concerned.

00:33:30.100 --> 00:33:31.990
But maybe you log out of iCloud.

00:33:32.050 --> 00:33:33.660
I don't know why but maybe you do.

00:33:33.750 --> 00:33:34.760
If you do, you log out.

00:33:34.790 --> 00:33:36.140
Log in as a different user.

00:33:36.240 --> 00:33:39.290
Those receipts have essentially
disappeared from this app.

00:33:39.380 --> 00:33:41.020
This app is going to
look for those receipts.

00:33:41.020 --> 00:33:42.350
It's not going to find anything.

00:33:42.440 --> 00:33:45.430
So, you know, status is queried.

00:33:45.470 --> 00:33:46.480
No receipts.

00:33:46.480 --> 00:33:47.500
No service.

00:33:47.620 --> 00:33:50.180
So what can you do about this?

00:33:52.120 --> 00:33:54.320
This is a totally optional strategy,
I just want to stress,

00:33:54.500 --> 00:33:57.900
but you could register the user.

00:33:57.900 --> 00:34:00.960
I mean, it basically could be an
account registration step.

00:34:01.110 --> 00:34:05.140
The idea here is you ask the user
to register before they purchase,

00:34:05.140 --> 00:34:08.070
after they purchase,
but before you finish the transaction,

00:34:08.100 --> 00:34:08.990
you need to do two things.

00:34:09.060 --> 00:34:11.870
You need to take that receipt and
that account they just created,

00:34:12.060 --> 00:34:14.500
you need to pass them in one
transaction to your server,

00:34:14.560 --> 00:34:17.640
make sure that receipt is saved,
make sure you've associated it

00:34:17.640 --> 00:34:19.880
with that registered account,
return success,

00:34:19.880 --> 00:34:23.300
and only when you've returned success
that your servers accomplish this,

00:34:23.380 --> 00:34:25.130
that you finish the transaction.

00:34:25.230 --> 00:34:28.440
And now moving forward,
you consult your server for receipt

00:34:28.440 --> 00:34:29.790
restoration instead of iCloud.

00:34:29.800 --> 00:34:33.460
You consult your server for this
expiration testing instead of iCloud.

00:34:33.530 --> 00:34:39.030
So the basic responsibilities are you
need to associate receipts with a user.

00:34:39.350 --> 00:34:41.200
And iCloud kind of does
that automatically,

00:34:41.220 --> 00:34:42.630
so that's nice, so that's easy.

00:34:42.740 --> 00:34:44.880
But if you don't want to use that,
you need to do it yourself and you

00:34:44.880 --> 00:34:47.060
need to ask the user to register,
which is a little more work

00:34:47.120 --> 00:34:49.360
for both you and your user.

00:34:49.420 --> 00:34:50.500
You need to persist the receipts.

00:34:50.500 --> 00:34:52.800
You can either use iCloud storage
in the previous example or your

00:34:52.800 --> 00:34:54.350
own server in the second example.

00:34:54.440 --> 00:34:57.900
But no matter where they're stored,
you need to provide a way for users

00:34:57.900 --> 00:35:00.760
to get at those receipts so they
can do restore-alls and get their

00:35:00.760 --> 00:35:04.540
content back or their service back
regardless of which device they're on.

00:35:04.580 --> 00:35:07.680
Okay,
so let me just talk about up everything

00:35:07.750 --> 00:35:10.680
I talked about in this little section.

00:35:10.740 --> 00:35:12.200
We talked about the
subscription life cycle.

00:35:12.340 --> 00:35:15.540
I wanted you to know what happened when,
the kinds of checks we do,

00:35:15.540 --> 00:35:18.970
the kinds of emails we send and why
we send them and when we send them.

00:35:19.020 --> 00:35:21.740
I wanted you to have a better idea of
the kinds of things which are important

00:35:21.740 --> 00:35:24.700
in a receipt for auto renewables
and how those receipts fly around

00:35:24.700 --> 00:35:29.830
between all the different parties,
your app, store, your servers.

00:35:29.910 --> 00:35:33.580
We've talked about some limitations
and considerations in the sandbox.

00:35:33.610 --> 00:35:35.740
And finally,
we've talked about some approaches

00:35:35.740 --> 00:35:38.740
for using non-auto renewables.

00:35:38.840 --> 00:35:42.330
For talking about customer experience,
here's Aubrey talking

00:35:42.330 --> 00:35:44.180
more about iTunes Connect.

00:35:49.210 --> 00:35:51.100
Thanks, Dave.

00:35:51.110 --> 00:35:56.830
So, we have a bunch of different ways
that you have an opportunity to

00:35:56.830 --> 00:35:58.190
interface with your customers.

00:35:58.300 --> 00:36:00.680
And Dave talked a little bit
about all of these different email

00:36:00.680 --> 00:36:04.040
confirmations that go out throughout
the subscription life cycle.

00:36:04.040 --> 00:36:07.320
So, I'm going to step through some
areas of iTunes Connect and show

00:36:07.320 --> 00:36:10.630
you exactly the impact that what
you enter in iTunes Connect will

00:36:10.630 --> 00:36:12.930
have in these email confirmations.

00:36:12.930 --> 00:36:15.840
I'm also going to cover
just basic device UI.

00:36:15.840 --> 00:36:18.770
So all of the UI that is
generated for your customer,

00:36:18.930 --> 00:36:22.520
you might be wondering how the
information you're entering in ITC is

00:36:22.520 --> 00:36:24.620
actually showing up to that customer.

00:36:24.620 --> 00:36:28.580
We get these questions a lot and we just
want to make it really clear for you.

00:36:29.190 --> 00:36:30.940
So if you're currently
selling on the App Store,

00:36:30.940 --> 00:36:32.450
you're all using iTunes Connect.

00:36:32.450 --> 00:36:35.660
And I'm going to cover three different
areas of iTunes Connect that relate

00:36:35.820 --> 00:36:38.370
to your customer's experience.

00:36:38.560 --> 00:36:40.540
The first is going to be metadata.

00:36:40.770 --> 00:36:42.290
Second, pricing.

00:36:42.440 --> 00:36:44.400
And third, availability.

00:36:44.490 --> 00:36:46.500
So let's talk about metadata.

00:36:46.640 --> 00:36:48.000
Now, what is metadata?

00:36:48.220 --> 00:36:51.500
Well, it's just information
that you're entering.

00:36:51.590 --> 00:36:56.070
We know that iTunes Connect is the
gateway to the App Store and everything

00:36:56.070 --> 00:37:00.450
that we collect from you in iTunes
Connect ultimately will display in

00:37:00.450 --> 00:37:04.880
the App Store with the exception of
a couple pieces of information that

00:37:04.880 --> 00:37:06.080
are facing just for you for reporting,
et cetera.

00:37:06.730 --> 00:37:10.700
So let's talk about the most
important piece of metadata that you

00:37:10.700 --> 00:37:13.430
will enter in iTunes Connect when
it comes to your subscriptions.

00:37:13.570 --> 00:37:15.700
That's the In-App Purchas display name.

00:37:15.810 --> 00:37:18.470
And if you take one thing
away from this session today,

00:37:18.590 --> 00:37:20.520
it's that this needs to be right.

00:37:20.700 --> 00:37:25.920
And that really is because this shows
up in the most areas for your customer.

00:37:26.250 --> 00:37:29.720
And I think you'll be surprised to see
all the different places this will show.

00:37:29.810 --> 00:37:30.950
Imagine if you spelled it wrong.

00:37:30.950 --> 00:37:33.060
Probably wouldn't be a great
thing for your customer.

00:37:33.740 --> 00:37:36.230
And this is why we call this
your subscription brand.

00:37:36.230 --> 00:37:39.290
It's your opportunity to brand
your In-App Purchas to name it

00:37:39.290 --> 00:37:43.260
correctly to describe exactly what
you're offering to your customer.

00:37:43.260 --> 00:37:47.170
It's entered right
here in iTunes Connect.

00:37:47.680 --> 00:37:50.730
And you do have an opportunity
here to think globally.

00:37:51.030 --> 00:37:55.190
We offer 28 different languages
for localization in iTunes Connect.

00:37:55.190 --> 00:37:59.140
And we really want to encourage you
to take advantage of that because it's

00:37:59.140 --> 00:38:01.500
a great experience for the customer.

00:38:01.500 --> 00:38:07.310
We base all of these settings on the
customer's iOS language or OS language.

00:38:07.770 --> 00:38:13.500
So we will make a smart decision about
what translation of your In-App Purchas

00:38:13.500 --> 00:38:15.600
display name will show up to them.

00:38:15.610 --> 00:38:17.320
So we want you to take advantage of it.

00:38:17.380 --> 00:38:19.340
The most successful developers
are the ones that are

00:38:19.340 --> 00:38:21.950
localizing and moving globally.

00:38:23.130 --> 00:38:25.200
Now, first example,
we're going to go through

00:38:25.200 --> 00:38:26.840
my New Yorker subscription.

00:38:26.950 --> 00:38:30.440
So In-App Purchase display name shows
right there in the subject line of the

00:38:30.440 --> 00:38:32.290
email and in the body of the email.

00:38:32.540 --> 00:38:35.820
And this is that subscription
confirmation that goes out

00:38:35.920 --> 00:38:38.000
immediately after a purchase.

00:38:38.160 --> 00:38:42.390
We also show you display
name in the receipt.

00:38:42.970 --> 00:38:46.390
and in the price increase notification
that goes out in the subject

00:38:46.470 --> 00:38:49.400
line and in the email itself.

00:38:49.460 --> 00:38:52.190
And I'll talk a little bit more
about these price increase emails

00:38:52.290 --> 00:38:54.990
later when we talk about pricing.

00:38:56.130 --> 00:38:59.170
Also, your auto renewal reminder,
so when the customer gets that nice

00:38:59.170 --> 00:39:02.490
reminder email letting them know
they have something renewing soon,

00:39:02.610 --> 00:39:05.340
again, right there in the renewal.

00:39:05.900 --> 00:39:09.470
In the Manage Subscriptions UI,
title bar of the iPhone and

00:39:09.470 --> 00:39:12.110
in the Manage Subscriptions,
every time they go visit

00:39:12.110 --> 00:39:16.100
this area of the App Store,
they will see your display name.

00:39:18.230 --> 00:39:21.430
and if not the most important dialogue,
the gateway to get them to

00:39:21.430 --> 00:39:23.140
purchase your subscription.

00:39:23.140 --> 00:39:26.860
Right there in the UI,
you'll see the display name.

00:39:29.390 --> 00:39:32.070
And now after you're live on the store,
you're doing pretty well

00:39:32.260 --> 00:39:33.670
on your app product page.

00:39:33.880 --> 00:39:35.690
There it is again.

00:39:36.100 --> 00:39:39.480
You also have the ability to customize
this using SK Product Class and

00:39:39.480 --> 00:39:42.520
StoreKit so you can pull in the
display name that you enter in iTunes

00:39:42.610 --> 00:39:44.840
Connect to display right in the UI.

00:39:44.980 --> 00:39:46.540
You can also take
advantage of the pricing.

00:39:46.650 --> 00:39:50.390
You can pull that in and the description.

00:39:51.480 --> 00:39:56.040
So we like to show
examples of what not to do.

00:39:56.040 --> 00:40:00.390
And we really don't want you to name
your In-App Purchasse subscription

00:40:01.020 --> 00:40:05.040
because subscribe to the subscription
looks a little weird and probably is not

00:40:05.040 --> 00:40:07.500
going to lead to a lot of subscriptions.

00:40:07.500 --> 00:40:09.220
So keep that in mind.

00:40:09.280 --> 00:40:12.340
Another thing,
don't encode the duration of

00:40:12.350 --> 00:40:14.820
the subscription into the name.

00:40:14.960 --> 00:40:17.680
Subscribe to one year
subscription for one year.

00:40:17.800 --> 00:40:18.930
It's a little redundant.

00:40:19.090 --> 00:40:20.850
And we have seen this, by the way.

00:40:21.000 --> 00:40:23.200
So keep that in mind.

00:40:23.280 --> 00:40:27.220
And moving on to the second piece
of metadata I want to cover,

00:40:27.220 --> 00:40:28.710
publication name.

00:40:29.000 --> 00:40:33.210
Now, this is an opportunity to take
advantage of the marketing

00:40:33.210 --> 00:40:35.480
opt-in that Dave talked about.

00:40:35.480 --> 00:40:38.500
And we wanted to give you some
flexibility about displaying

00:40:38.500 --> 00:40:41.860
a different piece of metadata
just for this information.

00:40:41.970 --> 00:40:45.140
So this is another opportunity to
brand yourself as a publication.

00:40:45.140 --> 00:40:47.850
Maybe you're not
specifically a publication,

00:40:47.850 --> 00:40:51.160
but you can still use this to
have that pop-up in the UI.

00:40:52.300 --> 00:40:55.700
Now, it's entered in iTunes
Connect just like the display name.

00:40:55.930 --> 00:40:58.540
And this is actually new for 2012.

00:40:58.730 --> 00:41:01.130
And this was a direct
request from developers.

00:41:01.230 --> 00:41:05.890
They wanted more flexibility to be able
to enter a different piece of data.

00:41:06.750 --> 00:41:08.900
It's another opportunity to localize.

00:41:08.990 --> 00:41:09.730
Take advantage of this.

00:41:09.900 --> 00:41:12.580
28 languages worldwide.

00:41:13.740 --> 00:41:15.340
And to show you exactly
where this shows up,

00:41:15.480 --> 00:41:17.600
we have House and Garden here.

00:41:17.670 --> 00:41:19.700
House and Garden wants me to
share my personal information.

00:41:19.700 --> 00:41:22.240
Well, that's a big decision
for me as a customer,

00:41:22.400 --> 00:41:26.650
so I want to know exactly who I'm
sharing that information with.

00:41:27.030 --> 00:41:30.230
Putting in your developer
name is not a great strategy,

00:41:30.320 --> 00:41:33.080
so we want to recommend that you
always think about what the publication

00:41:33.080 --> 00:41:36.290
name is going to be because it's
going to lead to that really valuable

00:41:36.290 --> 00:41:40.590
piece of information that you're
going to have in your opt-in reports.

00:41:42.280 --> 00:41:47.100
Privacy Policy URL and Support URL,
another piece of metadata.

00:41:47.150 --> 00:41:49.850
Entered for your apps in iTunes Connect.

00:41:50.000 --> 00:41:53.090
The Privacy Policy URL is
required for free subscription.

00:41:53.110 --> 00:41:55.560
It's also required for
auto-renewable subscriptions,

00:41:55.650 --> 00:41:58.320
so we will ask for this.

00:41:58.850 --> 00:42:02.410
And we do display these,
both the support URL and the privacy

00:42:02.410 --> 00:42:05.480
policy URL in the email confirmation.

00:42:06.550 --> 00:42:10.740
We display the support
URLs all over the App Store.

00:42:10.800 --> 00:42:13.430
As a marketplace for you,
we want to make sure that we're

00:42:13.550 --> 00:42:16.480
putting your customers in front
of you to get the help and offer

00:42:16.480 --> 00:42:18.140
the feedback about your apps.

00:42:18.280 --> 00:42:21.060
So it's really critical
to get this URL right.

00:42:21.100 --> 00:42:24.110
Make sure that it sends the customer
somewhere to where they can actually

00:42:24.110 --> 00:42:25.420
reach you to get the support.

00:42:25.420 --> 00:42:28.570
You'd be surprised at how many of
the reviews we see on the store

00:42:28.570 --> 00:42:32.330
from customers that are dissatisfied
with not hearing from the developer

00:42:32.330 --> 00:42:35.860
if they're trying to reach out
to them through the support URL.

00:42:35.860 --> 00:42:39.650
And if the support URL is dead,
it's likely going to get you an

00:42:39.650 --> 00:42:41.660
unhappy rejection from App Review.

00:42:41.660 --> 00:42:44.510
So keep that in mind, too.

00:42:45.680 --> 00:42:49.400
The last piece of metadata
I want to cover is product IDs.

00:42:49.490 --> 00:42:53.160
Also very important for your code,
best practice we want to

00:42:53.240 --> 00:42:58.760
recommend here is entering the
duration into your product ID.

00:42:58.880 --> 00:43:02.120
This is great for the non-auto
renewing because then you'll be able

00:43:02.120 --> 00:43:03.840
to identify what the duration is.

00:43:03.940 --> 00:43:08.090
And your reports for each transaction
in your sales and trend reports and

00:43:08.090 --> 00:43:11.940
in your payment financial reports
are going to reflect the product ID.

00:43:12.100 --> 00:43:15.980
So it's really convenient if you
actually have the duration encoded

00:43:15.980 --> 00:43:17.970
right there in the product ID.

00:43:19.260 --> 00:43:21.540
So let's move on to pricing.

00:43:21.650 --> 00:43:24.660
Great thing about the App Store is
that you have the ability to price

00:43:24.890 --> 00:43:29.080
freely and accordingly based on the
content you upload at the app level

00:43:29.250 --> 00:43:30.830
and at the In-App Purchas level.

00:43:30.930 --> 00:43:34.720
You can change this at any time in
iTunes Connect and it is live immediately

00:43:34.720 --> 00:43:36.950
in the App Store to your customer.

00:43:38.100 --> 00:43:41.580
So looking at the price increase
notification that goes out,

00:43:41.620 --> 00:43:44.260
Dave described how and when we send this.

00:43:44.310 --> 00:43:48.280
But I wanted to sort of zoom in
here on the area where we show the

00:43:48.280 --> 00:43:51.620
before price and the after price
that will go out to the customer.

00:43:51.680 --> 00:43:54.440
We want you to be aware
of how this functions,

00:43:54.470 --> 00:43:57.750
because if you do go in
and you do change pricing,

00:43:57.860 --> 00:44:02.260
we do recommend that you understand how
this is going to affect the customer.

00:44:02.260 --> 00:44:05.790
It's not going to immediately
necessarily blast out your customer base,

00:44:05.790 --> 00:44:08.780
but we want you to know that
it will disable the auto renew.

00:44:08.910 --> 00:44:11.980
So you can see here for my New Yorker,
they raised the price on

00:44:11.980 --> 00:44:15.010
me during my subscription,
and they want me to go ahead and

00:44:15.010 --> 00:44:16.440
opt in again at the higher price.

00:44:16.440 --> 00:44:18.580
So you can see on the right,
we have the manage

00:44:18.680 --> 00:44:23.180
subscriptions UI again,
and I have to voluntarily opt in.

00:44:24.480 --> 00:44:26.330
And you can run sales in iTunes Connect.

00:44:26.520 --> 00:44:27.960
You can set pricing in advance.

00:44:28.210 --> 00:44:29.380
You can set your In-App price.

00:44:29.470 --> 00:44:32.060
Maybe you want to run a specific
sale on a specific date.

00:44:32.180 --> 00:44:33.600
And we encourage you to do this.

00:44:33.720 --> 00:44:37.160
Just be very aware of how it's
going to affect your end user.

00:44:37.280 --> 00:44:40.430
And just something to note,
price decreases don't send out

00:44:40.480 --> 00:44:42.260
notifications to your user.

00:44:42.260 --> 00:44:45.650
It's just kind of an added perk
for the customer to get the

00:44:45.650 --> 00:44:47.690
auto renew at the lower price.

00:44:49.580 --> 00:44:52.700
And last but not least,
we have availability.

00:44:52.860 --> 00:44:54.850
Cleared for Sale.

00:44:54.920 --> 00:44:57.590
Kind of want to demystify
what that cleared for sale

00:44:57.590 --> 00:44:59.740
button does in iTunes Connect.

00:44:59.820 --> 00:45:03.570
We get the what does this
do question quite a lot.

00:45:04.140 --> 00:45:08.810
And it's just a radio button, yes or no,
set for every In-App Purchas

00:45:08.810 --> 00:45:10.390
in iTunes Connect.

00:45:10.800 --> 00:45:17.200
And just to kind of highlight what
happens when you do set this to no,

00:45:17.230 --> 00:45:20.400
I wanted to walk through all
these available actions for you.

00:45:20.560 --> 00:45:22.760
So a new purchase for a customer.

00:45:22.930 --> 00:45:26.070
We require that the In-App Purchas
is cleared for sale in order for new

00:45:26.070 --> 00:45:28.850
customers to purchase the In-App Purchas.

00:45:28.960 --> 00:45:32.520
If it's not cleared for sale,
then they cannot purchase it.

00:45:33.260 --> 00:45:36.700
You as a developer can deliver
content regardless of the setting.

00:45:36.700 --> 00:45:39.070
So it doesn't matter if
it's clear for sale or not.

00:45:39.240 --> 00:45:43.460
We want to allow you to take care of
your existing customers that already

00:45:43.460 --> 00:45:45.830
have your content on their device.

00:45:47.230 --> 00:45:48.100
Restore.

00:45:48.100 --> 00:45:52.060
You can restore content
regardless of the setting.

00:45:52.200 --> 00:45:56.900
And the auto renew setting will be
disabled if it's not cleared for sale.

00:45:56.900 --> 00:46:01.340
So you should kind of keep that in
mind when you are messing with this.

00:46:01.470 --> 00:46:03.460
It tends to be sort of a mystery.

00:46:03.460 --> 00:46:06.490
So we wanted to just make
that a little bit more clear.

00:46:07.930 --> 00:46:10.220
And none of those settings
actually apply for Sandbox,

00:46:10.260 --> 00:46:11.660
so you don't have to worry about that.

00:46:11.860 --> 00:46:14.920
You can set something to not
clear for sale and actually have

00:46:14.930 --> 00:46:17.200
it return in Sandbox for you.

00:46:17.400 --> 00:46:20.900
Now, if you come to a time where you
need to discontinue a subscription,

00:46:21.010 --> 00:46:23.430
we want to make sure that you
know that this is possible,

00:46:23.560 --> 00:46:26.660
but we do want you to honor all
of your existing customers that

00:46:26.660 --> 00:46:27.900
are expecting content from you.

00:46:27.900 --> 00:46:30.160
Again, better customer experience.

00:46:30.160 --> 00:46:33.600
If I've subscribed to something for
one year and maybe you as a developer

00:46:33.710 --> 00:46:37.500
are no longer going to offer that
subscription for additional customers,

00:46:37.500 --> 00:46:41.140
I want to make sure that as a customer
I receive that content for a year.

00:46:41.140 --> 00:46:44.300
So please remember that you do
need to honor that agreement

00:46:44.300 --> 00:46:46.400
you've made with the customer.

00:46:47.970 --> 00:46:52.170
But the best advice we can give if you
need to discontinue a subscription is

00:46:52.220 --> 00:46:57.100
remove the In-App Purchas from sale first
and then delete it out of iTunes Connect.

00:46:57.250 --> 00:47:00.770
You no longer need to see it,
just tends to get confusing

00:47:00.770 --> 00:47:02.360
and you can delete it.

00:47:03.320 --> 00:47:05.700
And like the price increase
email notification,

00:47:05.700 --> 00:47:08.820
we will send a notification to
let the customer know that the

00:47:08.880 --> 00:47:11.200
subscription was actually discontinued.

00:47:11.250 --> 00:47:14.860
We want to present them with the
option to go in and subscribe to any

00:47:14.860 --> 00:47:17.270
new duration you might have available.

00:47:18.330 --> 00:47:22.480
So to summarize best practices, remember,
these are your customers.

00:47:22.610 --> 00:47:25.750
We're very happy to provide this
amazing marketplace and we're

00:47:25.750 --> 00:47:29.260
so excited that you're there to
develop apps for us in the store.

00:47:29.390 --> 00:47:30.430
But these are your customers.

00:47:30.460 --> 00:47:31.520
Take care of them.

00:47:31.660 --> 00:47:34.090
The great thing about subscription
is that it is long term.

00:47:34.120 --> 00:47:35.980
You're establishing that
relationship with them because

00:47:35.980 --> 00:47:37.210
they're going to keep coming back.

00:47:37.350 --> 00:47:40.610
They're going to want
to get more content.

00:47:40.680 --> 00:47:43.000
They're going to auto renew.

00:47:43.070 --> 00:47:44.430
It's a great relationship between
the customer and developer.

00:47:44.800 --> 00:47:46.100
And think global.

00:47:46.220 --> 00:47:50.800
We are moving very fast globally
and we just announced this week that

00:47:50.800 --> 00:47:53.740
we're going to be moving into more
app stores worldwide and we want

00:47:53.740 --> 00:47:55.200
you to come with us on that journey.

00:47:55.200 --> 00:47:58.290
We really give you a lot of
tools to localize your content

00:47:58.290 --> 00:48:01.140
and we think that's really,
really important.

00:48:03.140 --> 00:48:06.190
So for more information,
please contact our wonderful

00:48:06.190 --> 00:48:08.780
app services evangelist,
Paul Marcos.

00:48:08.980 --> 00:48:11.240
Documentation that we
recommend you check out.

00:48:11.300 --> 00:48:13.900
In-App Purchasse programming
guide is a really great resource,

00:48:14.090 --> 00:48:16.560
covers a lot of the
information you've seen today.

00:48:16.680 --> 00:48:23.220
And then our iTunes
Connect developer guide,

00:48:23.220 --> 00:48:23.220
it's really great, includes all the setup
step by step for you.

00:48:23.510 --> 00:48:26.970
Getting started with In-App Purchasse,
great resource for links

00:48:27.070 --> 00:48:28.350
and developer forums.

00:48:28.540 --> 00:48:31.330
Get help from your fellow developers.

00:48:32.000 --> 00:48:35.380
Some related sessions we had yesterday,
the selling products with StoreKit,

00:48:35.380 --> 00:48:37.040
great session.

00:48:37.080 --> 00:48:39.900
We had the building great newsstand
apps a little bit earlier today.

00:48:39.900 --> 00:48:42.820
If you're a newsstand developer,
check that out on video.

00:48:42.820 --> 00:48:46.600
And then what's new in iTunes Connect for
app developers took place this morning.