WEBVTT

00:00:11.900 --> 00:00:17.210
Welcome to Debugging UIWebViews
and Websites in iOS Safari.

00:00:17.300 --> 00:00:18.070
I'm Tim Hatcher.

00:00:18.310 --> 00:00:22.010
I work on the Safari team,
and I hope you're as excited

00:00:22.010 --> 00:00:26.100
as I am to be here talking
about developer tools for iOS.

00:00:26.100 --> 00:00:30.840
How many of you are
app content developers?

00:00:32.450 --> 00:00:33.510
What about web developers?

00:00:33.510 --> 00:00:34.800
Just plain old web developers?

00:00:34.800 --> 00:00:37.480
Okay, a good mix of both.

00:00:37.480 --> 00:00:41.640
So either way,
if you've had to deal with debugging

00:00:41.640 --> 00:00:47.690
a website in mobile Safari,
and you've probably been left with a lot

00:00:47.700 --> 00:00:54.130
of question marks over your head where
it's not always easy to get information

00:00:55.040 --> 00:01:01.840
out of your mobile device when you're
trying to debug your app or Safari.

00:01:02.630 --> 00:01:06.540
And the same applies to your app,
not just Safari.

00:01:09.860 --> 00:01:13.350
But maybe you might think, okay, well,
it's Safari, right?

00:01:13.370 --> 00:01:16.880
I could use the Safari that
comes on my Mac.

00:01:16.970 --> 00:01:21.230
And after all,
they're built on the same WebKit engine,

00:01:21.390 --> 00:01:25.200
and Safari on Mac has some
great developer tools.

00:01:25.260 --> 00:01:32.860
But Safari and iOS Safari are
really not equal in a few key areas.

00:01:32.880 --> 00:01:35.640
There's differences in frame behavior.

00:01:35.640 --> 00:01:37.930
There's differences in resource limits.

00:01:37.980 --> 00:01:41.740
There's differences in the
existence of touch events and

00:01:41.740 --> 00:01:44.190
the nonexistence of touch events.

00:01:44.240 --> 00:01:47.750
So that can really make debugging
your website difficult in the

00:01:47.930 --> 00:01:50.690
desktop version of Safari,
even though there are

00:01:50.690 --> 00:01:52.260
a lot of similarities.

00:01:54.120 --> 00:01:56.780
But like I said,
there's these great developer tools

00:01:56.860 --> 00:02:00.620
that come with Safari that you
might be familiar with when you've

00:02:00.620 --> 00:02:04.780
worked on a standalone website and
you've tried to get away with it.

00:02:05.200 --> 00:02:09.190
Maybe you're not using any of those
advanced features in Safari for iOS,

00:02:09.190 --> 00:02:10.100
so you can.

00:02:10.100 --> 00:02:15.440
But when you really are having
trouble with debugging your site,

00:02:15.440 --> 00:02:20.670
you really want to use those same
tools and plug in your device and

00:02:20.670 --> 00:02:21.780
tether it up and use those same tools.

00:02:21.780 --> 00:02:26.080
it up and use the same great
tools that come with Safari.

00:02:26.750 --> 00:02:27.960
Same for the simulator.

00:02:27.970 --> 00:02:32.150
You want to open up the simulator
and bring up the Web Inspector.

00:02:32.210 --> 00:02:35.530
If you've ever used the Web Inspector,
that's what we're going

00:02:35.670 --> 00:02:38.830
to be talking about today,
and not just for mobile Safari,

00:02:38.830 --> 00:02:40.620
but for your iOS app as well.

00:02:43.460 --> 00:02:49.350
And in Safari 6 and iOS 6,
you now have the brand new

00:02:49.440 --> 00:02:53.190
Safari Web Inspector at your disposal.

00:02:59.590 --> 00:03:02.720
And if you're first,
if this is the first time seeing this,

00:03:02.750 --> 00:03:05.980
it might look somewhat familiar
if you've ever used Xcode,

00:03:05.980 --> 00:03:08.800
and I'm sure a lot of you
have used Xcode before.

00:03:08.950 --> 00:03:12.230
So we've taken a lot of the same cues,
but I want to go over it.

00:03:12.320 --> 00:03:14.040
If you're familiar with
the old Web Inspector,

00:03:14.040 --> 00:03:19.320
you might notice some similarities,
and there's some new things as well.

00:03:19.320 --> 00:03:25.220
So the first question I get asked is,
what are all these icons?

00:03:25.580 --> 00:03:29.820
And we're going to go over that,
and we're also going to go

00:03:29.820 --> 00:03:34.000
over inspection and tweaking,
and then some performance

00:03:34.650 --> 00:03:37.010
analysis and debugging issues.

00:03:37.580 --> 00:03:40.240
So let's first go over the Web Inspector.

00:03:40.360 --> 00:03:42.980
So like I said,
the first question I get asked is,

00:03:42.980 --> 00:03:45.040
what are those icons in the top left?

00:03:45.040 --> 00:03:50.370
And that's the navigation sidebar,
and the switching buttons at the

00:03:50.380 --> 00:03:52.870
top are your navigation area.

00:03:52.870 --> 00:03:58.290
So let's go over the
navigation bar specifically.

00:03:58.920 --> 00:04:02.440
The first icon is where
you'll find resource loads.

00:04:02.440 --> 00:04:07.100
And this is all of the resources that
your page or your UIWebView bring

00:04:07.100 --> 00:04:09.650
in as part of the loading process.

00:04:09.650 --> 00:04:13.720
And each of these sidebars
also has a keyboard shortcut.

00:04:13.720 --> 00:04:17.610
This one's Control 1
through 8 in this case.

00:04:17.700 --> 00:04:23.380
And this is where you'll also find frames
and something we call anonymous scripts.

00:04:23.560 --> 00:04:28.460
And that's if you use the eval function,
which you might or might not use.

00:04:30.340 --> 00:04:33.710
The next icon over is
the Storage Navigator,

00:04:33.710 --> 00:04:38.220
and this is where you'll find cookies,
anything that saves

00:04:38.220 --> 00:04:40.590
information on the device.

00:04:42.460 --> 00:04:44.860
And then you have your
instrument navigator,

00:04:44.860 --> 00:04:47.370
and this is where you'll
find the timelines,

00:04:47.370 --> 00:04:52.020
the network loads, the script timeline,
and layout and rendering timelines,

00:04:52.020 --> 00:04:59.930
as well as one-off JavaScript profiles
that you can take if you use

00:05:00.100 --> 00:05:06.230
console.profile or a new CSS profiler
that lets you see how slow or

00:05:06.230 --> 00:05:06.230
fast your CSS selectors are.

00:05:07.430 --> 00:05:10.540
And then the next one
over is self-explanatory.

00:05:10.540 --> 00:05:14.030
This is a full-text search,
lets you search all of the

00:05:14.030 --> 00:05:16.320
resources and the DOM trees.

00:05:17.050 --> 00:05:21.970
Next over is the Issue Navigator,
and this is where you'll find

00:05:21.970 --> 00:05:26.450
all of the JavaScript exceptions,
any console errors that

00:05:26.970 --> 00:05:30.290
your page is emitting,
and any HTML errors that

00:05:30.460 --> 00:05:32.500
the WebKit produces for you.

00:05:32.510 --> 00:05:38.240
And these are all grouped
together in this one place.

00:05:39.770 --> 00:05:42.860
The next navigator over
is the Debug Navigator,

00:05:42.860 --> 00:05:47.460
and this really is only useful
when you're paused in the debugger.

00:05:47.460 --> 00:05:50.380
And this is where you'll
see the current call stack.

00:05:52.080 --> 00:05:55.160
And next to last is the
Breakpoint Navigator,

00:05:55.340 --> 00:06:00.380
where you'll see all of the breakpoints
for the resources in your page,

00:06:00.630 --> 00:06:04.860
and you'll only see ones for
actually loaded resources and some

00:06:04.860 --> 00:06:10.230
special breakpoints for controlling
when exceptions are broken on.

00:06:10.230 --> 00:06:10.230
Tim Hatcher

00:06:10.460 --> 00:06:12.660
And the final one is the Log Navigator.

00:06:12.670 --> 00:06:16.360
And this is where you'll see your
current JavaScript console log,

00:06:16.430 --> 00:06:19.330
and if you reload,
you will see previous logs with all

00:06:19.330 --> 00:06:21.820
the results from any previous session.

00:06:21.820 --> 00:06:29.590
So that's a good way to switch back
to see what an error might have been

00:06:29.590 --> 00:06:29.590
in an earlier session of that page.

00:06:30.450 --> 00:06:35.220
So those are a quick overview
of the navigation bar and

00:06:35.220 --> 00:06:37.450
the navigation sidebar.

00:06:37.780 --> 00:06:38.860
Next, the middle area.

00:06:38.860 --> 00:06:42.620
This is really the meat and
potatoes of the Web Inspector,

00:06:42.620 --> 00:06:47.260
and this is where you find the full
content of what you're looking at.

00:06:47.260 --> 00:06:50.210
And this is,
you see this content based on what

00:06:50.310 --> 00:06:52.830
you get to in the navigation sidebar.

00:06:52.830 --> 00:06:57.700
But you can hide both of these
sidebars and see just the content,

00:06:57.700 --> 00:07:01.980
and that leaves you really
a limited way to navigate.

00:07:01.980 --> 00:07:06.800
But you have your back forward buttons
and the navigation bar at the top.

00:07:07.160 --> 00:07:11.490
And let's go ahead and talk
about that navigation bar.

00:07:14.220 --> 00:07:16.750
So you have the buttons that
let you hide the sidebar,

00:07:16.790 --> 00:07:20.340
and you have your back-forward buttons,
so you can go back to whatever

00:07:20.340 --> 00:07:23.240
you were previously looking
at in the content browser.

00:07:23.240 --> 00:07:26.680
And then you have what
we call the content path,

00:07:26.730 --> 00:07:31.320
and this is the path from the
navigation sidebar of where you got

00:07:31.320 --> 00:07:34.050
to that view to see that resource.

00:07:34.060 --> 00:07:38.660
And usually it's one or two levels deep,
but if you're looking at a frame,

00:07:38.660 --> 00:07:41.050
you could be multiple frames deep.

00:07:41.720 --> 00:07:46.160
And then certain views have
special view selectors,

00:07:46.160 --> 00:07:49.420
and in this case,
a frame that I'm looking at has

00:07:49.640 --> 00:07:54.000
the ability to switch between the
original source code and the DOM tree.

00:07:54.000 --> 00:07:58.030
So you can go back and see what actually
came over the network or see the actual

00:07:58.030 --> 00:08:00.120
DOM representation of that frame.

00:08:03.560 --> 00:08:06.610
And the final thing,
if you're looking at the DOM tree,

00:08:06.610 --> 00:08:09.290
you will have the current selection path.

00:08:09.420 --> 00:08:12.770
So these are all the DOM nodes,
the hierarchy up to the root

00:08:12.770 --> 00:08:16.080
node of what I have currently
selected in the DOM view.

00:08:16.080 --> 00:08:19.460
And like the content view
selector and any of these,

00:08:19.560 --> 00:08:23.620
they're all clickable,
so you can jump between siblings.

00:08:23.620 --> 00:08:27.780
So you can quickly jump to another
DOM node that's a sibling of the one

00:08:27.780 --> 00:08:30.480
you have selected anywhere in this path.

00:08:32.640 --> 00:08:35.310
And the final item,
also special to the DOM,

00:08:35.490 --> 00:08:37.130
is the DOM node locator.

00:08:37.250 --> 00:08:40.250
If you've used the Web Inspector before
and are looking for the magnifying

00:08:40.250 --> 00:08:42.890
glass that lets you highlight
a specific element on the page,

00:08:42.890 --> 00:08:46.940
it's now this pointer icon,
this finger pointer icon,

00:08:46.940 --> 00:08:50.940
that lets you select it,
and it highlights in blue.

00:08:50.940 --> 00:08:55.380
And when it's in this mode,
you can go tap anywhere on the

00:08:55.380 --> 00:08:57.930
device to select the DOM node.

00:08:57.930 --> 00:08:59.890
And I'll go into that
in more detail later.

00:08:59.890 --> 00:08:59.890
Tim Hatcher

00:09:00.340 --> 00:09:02.860
So that's the navigation bar.

00:09:02.880 --> 00:09:06.620
And the content area is in the middle,
and that's pretty self-explanatory.

00:09:06.750 --> 00:09:09.370
That's the content that you're
looking at for that resource.

00:09:09.440 --> 00:09:11.660
And at the bottom is what
we call the Quick Console.

00:09:11.660 --> 00:09:15.230
And this usually starts
out as a small strip,

00:09:15.420 --> 00:09:19.600
and as you type and evaluate,
the results show up and

00:09:19.600 --> 00:09:21.860
automatically expand.

00:09:21.860 --> 00:09:21.860
Tim Hatcher

00:09:22.820 --> 00:09:25.920
So it's an auto-expanding
console that you can evaluate,

00:09:25.920 --> 00:09:28.380
and when you're on the
current breakpoint,

00:09:28.380 --> 00:09:32.270
it's evaluating in the current scope,
and you have access to special

00:09:32.270 --> 00:09:34.420
variables when you're on the DOM tree.

00:09:34.520 --> 00:09:39.530
So $0 is the current selected DOM node,
so you can evaluate object properties

00:09:39.530 --> 00:09:42.150
off of that current selected DOM node.

00:09:42.240 --> 00:09:48.490
So it's really fast and efficient if
you're wanting a command line console.

00:09:48.490 --> 00:09:48.490
This is it.

00:09:48.960 --> 00:09:53.000
And you'll notice on the right-hand side,
you have your debugger controls.

00:09:53.060 --> 00:09:57.880
When you're paused in the debugger,
you'll see extra controls pop in.

00:09:58.010 --> 00:10:01.440
When you're not paused,
you'll just have a pause button.

00:10:01.580 --> 00:10:06.520
And these let you do
your standard step-over,

00:10:06.520 --> 00:10:06.520
step-in-to, step-out controls.

00:10:08.120 --> 00:10:11.350
So that's the Content Browser
and Quick Console.

00:10:11.680 --> 00:10:16.670
And the last sidebar on the
right is the Details sidebar.

00:10:17.040 --> 00:10:20.770
And this is a contextual sidebar,
so things come and go in this

00:10:21.140 --> 00:10:25.460
sidebar based on the current resource
that's selected from the navigation

00:10:25.460 --> 00:10:27.580
sidebar and the current view.

00:10:27.970 --> 00:10:34.300
So if you have a DOM node selected,
the DOM node details will

00:10:34.300 --> 00:10:34.300
change in this sidebar as well.

00:10:34.520 --> 00:10:38.140
So let's talk about some of
the sidebars that you'll see

00:10:38.220 --> 00:10:40.280
in this sidebar real quick.

00:10:40.280 --> 00:10:40.280
Tim Hatcher

00:10:40.480 --> 00:10:41.660
So you have the resource details.

00:10:41.750 --> 00:10:43.290
This one you'll pretty much always have.

00:10:43.310 --> 00:10:48.380
This is whatever details the current URL,
the full URL of that resource,

00:10:48.420 --> 00:10:52.520
and any query parameters,
request and response headers,

00:10:52.620 --> 00:10:54.010
things like that.

00:10:54.540 --> 00:10:56.800
And like I said,
you'll pretty much always have

00:10:56.800 --> 00:11:00.790
this because almost everything is
resource-based in the new Web Inspector.

00:11:01.600 --> 00:11:04.340
The next one over is
specific to the DOM view,

00:11:04.510 --> 00:11:07.910
and this is details about
the current selected nodes.

00:11:08.050 --> 00:11:14.810
So you have your type, your value,
any attributes, DOM properties,

00:11:14.810 --> 00:11:14.810
and event listeners are in here.

00:11:15.350 --> 00:11:19.800
Usually when you have a DOM node,
it has style information.

00:11:19.800 --> 00:11:28.550
Any CSS rules that
match for this DOM node,

00:11:28.550 --> 00:11:30.230
HTML attributes,
base rules that are brought in

00:11:30.230 --> 00:11:30.230
by WebKit that you can't edit.

00:11:30.660 --> 00:11:33.470
The next one over is
the Appearance Details,

00:11:33.470 --> 00:11:38.020
and this is where you'll find box
model information about the DOM node,

00:11:38.020 --> 00:11:41.790
any position, padding, margin,
that sort of thing.

00:11:43.720 --> 00:11:46.080
The next one over is kind of rare,
so we don't even have a

00:11:46.100 --> 00:11:47.380
keyboard shortcut for it.

00:11:47.570 --> 00:11:49.810
This is when you have an
application cache and you have

00:11:49.810 --> 00:11:51.180
it selected in the sidebar.

00:11:51.180 --> 00:11:58.760
And you'll see the manifest and the
frame URLs that this cache applies to.

00:11:58.760 --> 00:12:05.390
Again, if you're using application cache,
this is probably useful

00:12:05.390 --> 00:12:05.390
information for you.

00:12:05.390 --> 00:12:05.390
And the offline status of
that application cache.

00:12:05.660 --> 00:12:09.120
And the final one only shows up
when you're paused in the debugger,

00:12:09.120 --> 00:12:12.220
and this will be where you'll
see all the local variables,

00:12:12.220 --> 00:12:14.760
your global variables, things like that.

00:12:14.880 --> 00:12:19.800
And this will automatically
come in and select for you

00:12:19.800 --> 00:12:19.800
when you pause in the debugger.

00:12:20.530 --> 00:12:25.760
So that's the details sidebar and
overall the new Safari Web Inspector.

00:12:25.870 --> 00:12:29.570
So now let's talk about what
you can actually do with the

00:12:29.570 --> 00:12:34.510
Web Inspector and how you can use
it in your application and Safari.

00:12:34.630 --> 00:12:38.310
So let's talk about
inspection and tweaking.

00:12:38.570 --> 00:12:39.640
So what do I mean by this?

00:12:39.860 --> 00:12:44.880
There's a long process in web development
where you need to modify something,

00:12:44.880 --> 00:12:47.000
and usually it's kind of involved.

00:12:47.010 --> 00:12:49.950
You have your resource
that you want to edit,

00:12:49.950 --> 00:12:53.800
and say you're an app developer
and you're building content

00:12:53.800 --> 00:12:55.760
in a UIWebView in your app.

00:12:55.910 --> 00:12:58.480
So you're in Xcode
trying to edit this file,

00:12:58.480 --> 00:13:01.980
and you think you fixed something
or you want to try out this

00:13:02.010 --> 00:13:03.830
change to the appearance.

00:13:06.220 --> 00:13:11.740
And you have to then, in Xcode,
command R, build and run, and wait.

00:13:13.500 --> 00:13:29.500
[Transcript missing]

00:13:29.740 --> 00:13:37.830
So once Xcode's done getting that
onto your device or in the simulator,

00:13:37.830 --> 00:13:45.850
you can now start the long process of
getting to the spot in your app that

00:13:46.470 --> 00:13:49.240
reproduces this problem or has this
appearance that you want to look at,

00:13:49.240 --> 00:13:49.240
and you go around tapping, following this

00:13:49.420 --> 00:13:56.500
- You can use the treasure map
to try to find where you need

00:13:56.500 --> 00:13:56.500
to get in your application.

00:13:56.500 --> 00:13:56.500
And you finally get there,

00:13:56.830 --> 00:13:59.380
And you hit a bug.

00:13:59.490 --> 00:14:00.060
And now what?

00:14:00.060 --> 00:14:02.130
You have to redo this whole process.

00:14:02.130 --> 00:14:04.640
And that's never fun.

00:14:04.640 --> 00:14:09.940
And usually the second time comes
with a little more hatred and angst.

00:14:09.940 --> 00:14:13.670
So how do we solve that
with the new Web Inspector?

00:14:13.670 --> 00:14:15.630
So I'm going to jump to a demo now.

00:14:17.760 --> 00:14:27.130
So I have the iOS 6 SDK installed as well
as Safari 6 installed in Mountain Lion.

00:14:27.920 --> 00:14:31.680
So I'm going to -- first things first,
I need to enable the

00:14:31.690 --> 00:14:33.730
developer tools in Safari.

00:14:33.730 --> 00:14:38.000
And if you've never done this before,
you need to go to Safari and

00:14:38.120 --> 00:14:40.470
go to the Safari preferences.

00:14:43.700 --> 00:14:47.480
And in Advanced Preferences,
you can enable the Develop menu,

00:14:47.480 --> 00:14:50.440
and that will give you a
new menu item in Safari.

00:14:50.440 --> 00:14:53.260
And a lot of you have
probably done this before.

00:14:53.260 --> 00:14:56.140
I just want to make sure to
cover the basis for everyone.

00:14:56.140 --> 00:14:59.520
So that's enabling it in Safari.

00:14:59.520 --> 00:15:01.310
So now I have the iOS Simulator.

00:15:01.310 --> 00:15:05.370
I'm going to use the Simulator,
but you can use your device, your iPhone,

00:15:05.370 --> 00:15:07.730
your iPad,
as long as it's running iOS 6 and

00:15:07.730 --> 00:15:10.020
it's plugged in with a USB cable.

00:15:10.740 --> 00:15:15.420
And we're just using the
Simulator for demo purposes here.

00:15:15.430 --> 00:15:19.190
But it works just fine if you
don't have a device or you

00:15:19.190 --> 00:15:21.340
just prefer the Simulator.

00:15:21.420 --> 00:15:22.490
This works just great.

00:15:22.690 --> 00:15:25.640
So we need to enable
it in the Settings app,

00:15:25.640 --> 00:15:29.230
and we need to enable
it in Safari's Settings.

00:15:31.660 --> 00:15:37.570
And that's it.

00:15:38.010 --> 00:15:40.460
So we'll go ahead and exit out of here.

00:15:40.610 --> 00:15:43.840
And now I'm going to go ahead
and open up Safari on iOS.

00:15:43.960 --> 00:15:46.740
And I have a couple tabs open.

00:15:46.760 --> 00:15:54.020
And the first one I have is Vimeo,
and the other one I have is Apple.com.

00:15:54.660 --> 00:16:02.270
So let's go ahead and switch
back to Safari on the Mac.

00:16:02.270 --> 00:16:02.270
And in the Develop menu,

00:16:02.460 --> 00:16:05.250
You'll see, when I bring it up,
you see a new section here

00:16:05.310 --> 00:16:08.240
for all of your devices,
including the simulator.

00:16:08.240 --> 00:16:11.730
If I had an iPhone or iPad,
they would also show up here.

00:16:11.740 --> 00:16:17.120
And the menu shows all of the running
apps and all of the WebViews in that app,

00:16:17.130 --> 00:16:19.560
and I'm going to zoom out here.

00:16:19.560 --> 00:16:22.480
You'll notice as I mouse
over the menu item,

00:16:22.480 --> 00:16:24.970
it highlights which WebView it is.

00:16:25.060 --> 00:16:27.530
So if you have multiple
WebViews in your app,

00:16:27.530 --> 00:16:29.850
this is a good way to
find which one it is.

00:16:29.850 --> 00:16:32.550
And in Safari's case,
it's pretty self-explanatory.

00:16:32.560 --> 00:16:35.000
But you're probably
wondering where Apple.com is.

00:16:35.000 --> 00:16:36.780
It's supposed to be loaded, right?

00:16:36.780 --> 00:16:39.690
Well,
Safari on iOS optimizes background tabs,

00:16:39.830 --> 00:16:43.720
and they're really not debuggable
and sometimes not even loaded.

00:16:43.720 --> 00:16:45.300
So keep that in mind.

00:16:45.460 --> 00:16:50.300
If you want to debug a website,
it needs to be the frontmost app,

00:16:50.300 --> 00:16:55.010
and it needs to be usually on
screen in Safari to be usable.

00:16:55.040 --> 00:16:56.600
at all.

00:16:56.860 --> 00:17:01.120
So I'm going to go ahead and open
up the Web Inspector for Vimeo

00:17:01.120 --> 00:17:05.120
and just pick the menu item,
and it brings up a window in

00:17:05.450 --> 00:17:11.410
Safari connected to the iPhone simulator,
the Safari app, and Vimeo.com.

00:17:12.510 --> 00:17:17.960
And you'll see the resource list
over here on the side for all of

00:17:17.970 --> 00:17:19.810
the resources that Vimeo brought in.

00:17:19.810 --> 00:17:23.330
And some of them are
on Vimeo's CDN server.

00:17:23.700 --> 00:17:25.280
Some of them are on other servers.

00:17:25.280 --> 00:17:28.720
And you'll notice it's
kind of a lightweight site,

00:17:28.720 --> 00:17:32.140
and that's a really good
thing for a mobile site.

00:17:32.140 --> 00:17:36.490
But Vimeo has actually got
pretty heavy in its content

00:17:36.490 --> 00:17:39.400
where there's all these images.

00:17:40.100 --> 00:17:45.570
And you'll notice as I scroll down,
Vimeo is automatically loading

00:17:45.570 --> 00:17:48.360
in more images as I scroll down.

00:17:49.100 --> 00:17:53.440
And once I reach a certain threshold,
the Web Inspector will smartly start

00:17:53.570 --> 00:17:55.790
organizing all of these resources.

00:17:55.880 --> 00:17:58.590
So now they're in folders.

00:17:59.200 --> 00:18:03.780
based on the type of
resource that was loaded.

00:18:03.910 --> 00:18:06.750
And this can be a little cumbersome
if you have a really large site with

00:18:06.750 --> 00:18:11.480
a lot of subframes and things like
that and you really only care about

00:18:11.480 --> 00:18:14.240
all the CSS files or all the JPEGs.

00:18:14.240 --> 00:18:17.500
And that's what the filter
bar down here is for.

00:18:17.580 --> 00:18:24.160
I'll go ahead and type
in a simple glob query.

00:18:24.160 --> 00:18:28.520
So this filters out and shows me
all the JPEGs that were loaded.

00:18:28.520 --> 00:18:33.980
And you can do the same for CSS or
anything that came from Google.

00:18:33.980 --> 00:18:37.040
We'll immediately show
you those resources.

00:18:37.040 --> 00:18:39.820
And that's a quick way to focus
and find what you're actually

00:18:39.820 --> 00:18:42.380
looking for in the Web Inspector.

00:18:42.380 --> 00:18:44.260
And that applies to
all of the navigators.

00:18:44.260 --> 00:18:46.870
They're all filterable in this way.

00:18:47.530 --> 00:18:50.280
So I'll go ahead and clear that out.

00:18:50.390 --> 00:18:53.290
So I want to tweak some of
the spacing on this site.

00:18:53.540 --> 00:18:56.640
I think it's a little tight,
and I want to expand it

00:18:56.740 --> 00:18:58.390
and play around with it.

00:18:58.600 --> 00:19:03.970
So you'll notice as I hover
over the DOM nodes here,

00:19:05.100 --> 00:19:10.790
I have the highlights,
just like you would expect if you've

00:19:10.790 --> 00:19:10.790
ever used the Web Inspector before.

00:19:11.040 --> 00:19:13.700
And you'll start to be able
to dig in without really

00:19:13.700 --> 00:19:15.450
even knowing the structure.

00:19:15.590 --> 00:19:21.130
I now know that all of the
videos are in this sub-element.

00:19:23.430 --> 00:19:29.440
And if I select one,
I can go ahead and bring up the style

00:19:29.440 --> 00:19:33.820
information in the detail sidebar.

00:19:33.910 --> 00:19:36.280
But say I want to find
it a different way.

00:19:36.410 --> 00:19:43.770
Say I don't really want to dig
in and hunt and peck for it.

00:19:43.770 --> 00:19:43.770
I can use the node selector.

00:19:43.960 --> 00:19:47.110
This button right here, we'll turn it on,
it'll turn blue,

00:19:47.130 --> 00:19:51.210
and now I'll go back to the device and
I'll just tap on what I want to select.

00:19:51.390 --> 00:19:54.180
So I want to take a look at this byline.

00:19:54.400 --> 00:20:01.490
So that takes me right to that
H3 element in this WebView.

00:20:01.740 --> 00:20:05.160
And I can now take a look
at that style information,

00:20:05.390 --> 00:20:09.570
even look at the metrics where I can
see individual boxes as I hover

00:20:09.760 --> 00:20:12.290
over to see what specific one I is.

00:20:12.300 --> 00:20:13.520
So this is the margin.

00:20:13.520 --> 00:20:16.880
And I could take and double-click
this value and change it

00:20:16.880 --> 00:20:18.320
to be whatever I want.

00:20:18.350 --> 00:20:21.460
And now I've updated the margin top.

00:20:22.300 --> 00:20:26.990
But you'll notice that only
applied to this one element.

00:20:27.080 --> 00:20:30.600
It's not applying to everything because
it's only specific to that element.

00:20:30.640 --> 00:20:34.120
It's actually setting a style
rule down here in the DOM.

00:20:34.120 --> 00:20:38.200
So we'll just go ahead and revert that.

00:20:38.870 --> 00:20:42.590
And I really want to edit
the actual style rules.

00:20:42.700 --> 00:20:50.090
So in the style details,
I'll go and find the margin.

00:20:50.090 --> 00:20:50.090
Whoa.

00:20:51.590 --> 00:20:54.590
So here's the same margin rule,
and this applies to all

00:20:54.590 --> 00:20:57.500
of the video H3 elements,
but I noticed that they

00:20:57.500 --> 00:20:59.300
have line height as well.

00:20:59.300 --> 00:21:03.330
So I'm going to actually edit
the line height and zoom out

00:21:03.600 --> 00:21:05.820
here so you can see the changes.

00:21:05.820 --> 00:21:09.530
And if I hit the arrow keys,
you'll notice all of them are updating.

00:21:09.540 --> 00:21:13.050
It's incrementing and decrementing
as I hit the arrow keys.

00:21:13.060 --> 00:21:16.940
And I have fine-grained control
if I hold down the option key.

00:21:16.940 --> 00:21:19.480
So this is a good way to tweak and test.

00:21:33.090 --> 00:21:33.090
Where I would have had to rebuild and
test each of these individual changes.

00:21:33.090 --> 00:21:33.090
Now I can just do it all at once and take
these changes back to my original code.

00:21:33.090 --> 00:21:33.090
So I like this spacing,
so I'm just going to go ahead

00:21:33.090 --> 00:21:33.090
and hit enter and commit it.

00:21:34.130 --> 00:21:38.110
And that's using the
Web Inspector in Safari,

00:21:38.110 --> 00:21:42.630
but it works just as well
with your application.

00:21:42.790 --> 00:21:43.740
So I have an application.

00:21:43.740 --> 00:21:45.750
It's a chat client called Colloquy.

00:21:45.750 --> 00:21:48.950
And if anyone knows me,
I originally developed

00:21:49.030 --> 00:21:51.170
Colloquy for the Mac ages ago.

00:21:51.170 --> 00:21:54.100
And some of my friends
have developed it for iOS,

00:21:54.100 --> 00:21:57.860
taking the same open source
code and porting it over to iOS.

00:21:58.500 --> 00:22:02.500
And I remember when they did this,
their frustration of using

00:22:02.500 --> 00:22:08.540
UIWebView and making sure it worked and
debugging any problems they ran into,

00:22:08.540 --> 00:22:13.030
because they used
UIWebView for the chat view.

00:22:13.280 --> 00:22:16.920
And I'll just go ahead and open it up,
and it's going to take a

00:22:16.920 --> 00:22:18.790
second to join a network.

00:22:27.720 --> 00:22:31.090
And while that's loading up,
it's going to be

00:22:31.290 --> 00:22:34.020
bringing in this WebView,
and I have a WebView here.

00:22:34.020 --> 00:22:34.820
It's currently empty.

00:22:34.820 --> 00:22:37.930
This is where all the chat will show up.

00:22:38.650 --> 00:22:40.780
And I'm just going to go
ahead and say something here.

00:22:40.780 --> 00:22:43.320
So now we have some chat information.

00:22:43.320 --> 00:22:47.730
But I have no way to know what this is,
what the DOM looks like in this view,

00:22:47.790 --> 00:22:48.640
because it's all dynamic.

00:22:48.640 --> 00:22:51.830
I can look at the original HTML,
but it's just going to be blank

00:22:51.830 --> 00:22:53.500
because nothing was there.

00:22:53.500 --> 00:22:57.740
So as a developer, I want to know how to
style this information.

00:22:57.740 --> 00:23:01.280
So I'm going to go switch
back to Safari now.

00:23:01.280 --> 00:23:06.540
As I have Coloquy open and up,
I'll go back to the iPhone simulator.

00:23:07.060 --> 00:23:09.410
And now I have a new app running.

00:23:09.420 --> 00:23:12.340
And Coloquy is the only item here.

00:23:12.340 --> 00:23:16.290
And I'm going to go ahead
and select this web view.

00:23:16.770 --> 00:23:22.070
So now I can see, for the first time,
the actual DOM tree in my UIWebView,

00:23:22.070 --> 00:23:25.930
and I can dig in and see all
these individual elements

00:23:25.930 --> 00:23:28.420
just like I would in Safari.

00:23:30.000 --> 00:23:33.810
And same for all the style rules,
all the colors.

00:23:33.810 --> 00:23:36.170
And I can tweak any of these.

00:23:36.310 --> 00:23:43.330
Double click, tweak some of the color
using the arrow keys.

00:23:45.700 --> 00:24:09.100
[Transcript missing]

00:24:09.300 --> 00:24:28.900
[Transcript missing]

00:24:31.920 --> 00:24:36.500
So in summary, you can finally get
View Source in Safari for iOS.

00:24:36.680 --> 00:24:40.240
This is something that you've
been asking for and more.

00:24:40.240 --> 00:24:43.460
You now have the whole
Web Inspector available to you,

00:24:43.460 --> 00:24:44.890
not just View Source.

00:24:45.440 --> 00:24:48.690
And you can tweak without the
endless rebuild cycle that you

00:24:48.690 --> 00:24:50.280
might have been used to before.

00:24:50.460 --> 00:24:55.190
Please.

00:24:59.950 --> 00:25:04.590
And hover DOM nodes and highlight
their CSS boxes on screen.

00:25:04.850 --> 00:25:07.760
And in general,
anything that you can see in

00:25:07.760 --> 00:25:12.500
the DOM or style is editable,
so you can double-click and tweak it.

00:25:12.960 --> 00:25:15.850
So that's inspection and tweaking.

00:25:16.090 --> 00:25:19.550
Now let's talk about
performance analysis.

00:25:21.350 --> 00:25:24.910
And in the mobile space,
performance is critical.

00:25:25.010 --> 00:25:27.970
Where you have your app,
it might be loading on a

00:25:27.970 --> 00:25:31.890
Wi-Fi network one minute and
a cellular network the next.

00:25:31.890 --> 00:25:35.470
And you might have noticed
the speed on my device,

00:25:35.490 --> 00:25:37.800
my simulator, was reduced.

00:25:37.800 --> 00:25:39.940
I was simulating a 3G connection.

00:25:41.170 --> 00:25:45.020
And with the Web Inspector,
you can tether and turn off your

00:25:45.020 --> 00:25:49.960
Wi-Fi network on your device and take
advantage of the actual 3G network to

00:25:49.960 --> 00:25:55.320
see how slow it actually is going to
load all of your resources for your page.

00:25:57.090 --> 00:26:01.870
And you might think, okay,
I have just this single HTML file.

00:26:02.180 --> 00:26:06.280
It's not that big,
and I have a script that it pulls down,

00:26:06.280 --> 00:26:09.750
and I have just a handful
of images like Vimeo,

00:26:09.760 --> 00:26:12.890
and that's a really lightweight site,
and if you can really achieve

00:26:12.890 --> 00:26:15.850
something like this in size,
you're definitely winning.

00:26:15.850 --> 00:26:22.860
But often, things get out of hand,
scope changes, you had all these images,

00:26:23.020 --> 00:26:26.560
and you're pulling
down tons of resources.

00:26:27.140 --> 00:26:28.520
And there's things you can do.

00:26:28.520 --> 00:26:31.930
You can try to group them all together,
make one big file, that helps.

00:26:32.670 --> 00:26:35.890
But then you just end up with...

00:26:36.400 --> 00:26:58.400
[Transcript missing]

00:26:58.640 --> 00:27:01.220
And if you can reduce
those library dependencies,

00:27:01.220 --> 00:27:04.540
you're really going to speed up
the load time of your website.

00:27:04.540 --> 00:27:07.440
And if you're interested
in this information,

00:27:07.440 --> 00:27:12.320
you should definitely attend the session
that's immediately following this,

00:27:12.320 --> 00:27:15.950
which is all about updating your
site and your app for better

00:27:15.950 --> 00:27:18.060
performance on an iOS device.

00:27:19.470 --> 00:27:22.370
But don't get me wrong,
images can be a big culprit here too,

00:27:22.440 --> 00:27:25.790
and if you attend the next session,
you'll see why.

00:27:25.790 --> 00:27:31.310
But let's see how the Web Inspector can
help us pinpoint some of these problems.

00:27:32.460 --> 00:27:37.670
So let's go back to Safari for iOS,
and we're on Vimeo again.

00:27:37.670 --> 00:27:43.190
And let's bring up the Web Inspector.

00:27:47.590 --> 00:27:52.660
And we're mostly going to talk about
the instruments in this section,

00:27:53.070 --> 00:27:56.680
because this is where you
can find all the fine-grained

00:27:56.680 --> 00:27:59.550
information about the page load.

00:27:59.560 --> 00:28:02.880
And the resource sidebar will
give you some information,

00:28:02.880 --> 00:28:05.870
but to get the actual
picture of the network load,

00:28:05.880 --> 00:28:08.580
you really need to capture
that while it's loading.

00:28:09.790 --> 00:28:12.060
And you'll notice this
is blank at this point,

00:28:12.100 --> 00:28:15.570
because the Web Inspector is
optimized to not record any of this

00:28:15.570 --> 00:28:17.550
information when it's not open.

00:28:18.220 --> 00:28:21.960
So you'll need to reload the page
with the Inspector open to capture

00:28:21.960 --> 00:28:26.180
this load information and all the
other timelines that we captured now.

00:28:27.970 --> 00:28:31.450
And without even touching the device,
I'm just going to go ahead and hit

00:28:31.700 --> 00:28:34.460
Command-Shift-R in the Web Inspector.

00:28:34.850 --> 00:28:40.630
And this is going to reload the page
on my device without even touching it.

00:28:40.600 --> 00:29:06.500
[Transcript missing]

00:29:07.010 --> 00:29:09.450
And right now it's
sorted by the timeline,

00:29:09.450 --> 00:29:12.780
and I'm going to go ahead and
press this button over here,

00:29:12.790 --> 00:29:19.060
which will expand the timeline
completely and just give me the

00:29:19.250 --> 00:29:22.280
name and the timeline graph.

00:29:22.380 --> 00:29:24.600
And if you've ever used
the Web Inspector before,

00:29:24.600 --> 00:29:26.140
this graph is pretty familiar.

00:29:26.140 --> 00:29:29.000
If you haven't,
there's two different bars.

00:29:29.000 --> 00:29:31.300
There's the light shade
and the dark shade.

00:29:31.890 --> 00:29:37.580
The light shade is how long it took for
WebKit to want that resource before the

00:29:37.990 --> 00:29:40.930
server responded with the first byte.

00:29:40.940 --> 00:29:42.910
And it's 1.5 seconds later.

00:29:42.940 --> 00:29:45.740
And remember,
I'm simulating a 3G network here,

00:29:45.740 --> 00:29:48.400
so that's pretty realistic
on a mobile device.

00:29:48.500 --> 00:29:54.640
And the latency drastically dwarfs
the actual load time because cellular

00:29:55.560 --> 00:29:59.810
networks are pretty high latency,
even though they might have a lot

00:29:59.810 --> 00:30:01.670
of bandwidth to download the data.

00:30:01.720 --> 00:30:01.960
data.

00:30:03.830 --> 00:30:10.090
And we can collapse this out and
go find the highest latency thing.

00:30:11.350 --> 00:30:16.790
And you'll see it took 3.2
seconds to load this non-Vimeo

00:30:16.790 --> 00:30:21.280
resource to load this website.

00:30:21.740 --> 00:30:25.380
And remember what I was saying
about scripts are usually the

00:30:25.380 --> 00:30:27.460
largest resource on the page?

00:30:27.460 --> 00:30:30.300
So let's go ahead and
sort by transferred.

00:30:30.360 --> 00:30:34.600
And sure enough,
some script from some server is

00:30:34.600 --> 00:30:41.980
the largest resource on this page,
slowing down this page load of vimeo.com.

00:30:42.560 --> 00:30:45.900
And we have two different size columns,
size and transferred.

00:30:45.900 --> 00:30:50.550
If your server is
employing GZIP encoding,

00:30:50.650 --> 00:30:53.570
the transferred size should
be smaller when it's actually

00:30:53.570 --> 00:30:55.940
efficiently compressing that resource.

00:30:55.940 --> 00:30:57.960
So that's one thing to look out for.

00:30:57.960 --> 00:31:00.400
If both columns are
pretty much the same size,

00:31:00.400 --> 00:31:04.030
you're not fully optimizing the
download speed of that content.

00:31:06.740 --> 00:31:11.570
So that's just a brief look at
the timeline view in the new

00:31:11.620 --> 00:31:14.700
Web Inspector in the network view.

00:31:14.940 --> 00:31:20.200
But you'll notice we have three
different timelines here at the top.

00:31:20.200 --> 00:31:20.200
We have

00:31:20.700 --> 00:31:24.570
The Layout and Rendering Timeline
and JavaScript and Events.

00:31:24.690 --> 00:31:27.760
And this is where you'll see all
of the JavaScript load events and

00:31:27.860 --> 00:31:29.710
any other events that are firing.

00:31:29.830 --> 00:31:33.460
Touch events will show up here.

00:31:33.710 --> 00:31:44.570
This is easily the best way to
find when an event is happening

00:31:44.570 --> 00:31:44.570
or a timer is firing and let you
jump right to that source code.

00:31:45.200 --> 00:31:51.490
So that's a brief look at all
of the different timelines.

00:31:51.490 --> 00:31:56.950
And if you want to, again,
if you want to know more

00:31:56.950 --> 00:32:01.480
about optimizing your content,
definitely stay for the next

00:32:01.480 --> 00:32:01.480
section where they'll talk about
what optimizations you can take

00:32:01.480 --> 00:32:01.480
and put in place for your website.

00:32:02.730 --> 00:32:05.700
So in summary,
always test the cell network.

00:32:05.740 --> 00:32:08.150
If you're always testing
the Wi-Fi network,

00:32:08.320 --> 00:32:12.520
you're not getting the full picture of
what your users might experience if they

00:32:12.520 --> 00:32:14.710
are only living on the cell network.

00:32:14.810 --> 00:32:19.140
And minimize the number of
resources and the number of large

00:32:19.220 --> 00:32:24.420
resources that you are bringing in
in your page as much as possible.

00:32:24.420 --> 00:32:27.900
Get rid of those JavaScript libraries
if you're really only using the

00:32:27.900 --> 00:32:29.480
bare minimum of them anyway.

00:32:29.480 --> 00:32:31.170
Things like that.

00:32:32.720 --> 00:32:35.890
And minify,
if you have to have JavaScript,

00:32:35.890 --> 00:32:41.950
which it's a necessary evil sometimes,
definitely minify it so it's compressed,

00:32:41.990 --> 00:32:47.120
gzip encoded on the server,
and sends down the smallest it can be.

00:32:48.980 --> 00:32:52.770
And I'm not going to go into details,
but we have some new capabilities

00:32:52.780 --> 00:32:56.660
in WebKit to do asynchronous
loading or deferred script loading.

00:32:56.660 --> 00:33:00.130
So if your script doesn't need to
block other loads or it doesn't

00:33:00.400 --> 00:33:03.220
need to run until the very
end when DOM content is ready,

00:33:03.220 --> 00:33:05.070
then you can tell us to defer it.

00:33:05.070 --> 00:33:08.030
And again,
there's going to be some more information

00:33:08.030 --> 00:33:10.090
about that in the next session.

00:33:12.660 --> 00:33:15.400
So that's performance analysis.

00:33:15.410 --> 00:33:17.380
Now let's talk about debugging.

00:33:17.500 --> 00:33:20.670
And this is where we're going to
talk about JavaScript debugging.

00:33:20.930 --> 00:33:25.330
And if you've ever written an iOS
app that talks to a UIWebView,

00:33:25.470 --> 00:33:30.260
you've probably used string by
evaluating JavaScript string.

00:33:30.260 --> 00:33:32.370
How many of you have used that?

00:33:33.530 --> 00:33:37.860
How many have successfully
debugged a problem in that?

00:33:37.930 --> 00:33:41.750
That's what I thought.

00:33:41.750 --> 00:33:41.750
So,

00:33:42.330 --> 00:33:47.330
Since you've, some of you have risen your
hand that mastered this,

00:33:47.330 --> 00:33:51.740
you can probably tune out,
but anyone else that rose their

00:33:51.740 --> 00:33:56.600
hand that has never successfully
debugged a problem with this,

00:33:56.600 --> 00:34:01.810
you'll know how much of a black hole,
black box that function call is,

00:34:01.950 --> 00:34:04.720
and you really have no information.

00:34:04.790 --> 00:34:09.740
Sometimes you can send something in,
and it comes out just fine,

00:34:09.740 --> 00:34:10.100
but often you send something in

00:34:10.270 --> 00:34:13.440
And then you're just left wondering.

00:34:13.450 --> 00:34:14.800
What happened?

00:34:14.800 --> 00:34:15.420
Why?

00:34:15.440 --> 00:34:18.640
And all sorts of things.

00:34:18.780 --> 00:34:21.590
So let me show you another demo.

00:34:21.990 --> 00:34:24.180
And I'm going to use Coliqui.

00:34:24.200 --> 00:34:28.420
I pointed out before that it was
dynamically modifying the UIWebView.

00:34:28.590 --> 00:34:33.000
And to do that, they're using string by
evaluating JavaScript string.

00:34:33.200 --> 00:34:36.100
So I'm going to switch
back to Coliqui here.

00:34:37.020 --> 00:34:42.970
And while it connects,
I'm going to go ahead and

00:34:42.970 --> 00:34:42.970
bring up the Web Inspector.

00:34:52.120 --> 00:34:56.580
I know they're using a function
-- they're calling a function in

00:34:56.580 --> 00:35:01.980
StringByEvaluating JavaScript String
that's called appendMessage.

00:35:01.980 --> 00:35:06.750
Whenever someone types a message,
it gets funneled through this function.

00:35:08.050 --> 00:35:17.940
So I'm just going to go ahead
and do a search for that.

00:35:17.940 --> 00:35:17.940
And I found two hits in transcript.js.

00:35:17.940 --> 00:35:17.940
And you can see the first one

00:35:18.620 --> 00:35:24.670
is the call site,
and the final one is the actual function.

00:35:25.980 --> 00:35:29.100
So let's just set a break point here.

00:35:29.100 --> 00:35:30.430
This is JavaScript after all.

00:35:30.440 --> 00:35:32.350
I should be able to debug it.

00:35:32.540 --> 00:35:37.900
So I'm going to go ahead and
go back to the simulator and go

00:35:37.900 --> 00:35:41.300
ahead and type a new message.

00:35:41.300 --> 00:35:45.290
And you'll notice I'm now
paused in the debugger.

00:35:50.230 --> 00:35:58.510
So over here,
it switched me to the debug sidebar,

00:35:58.510 --> 00:35:58.510
the debug navigator,
and you'll see the call stack.

00:35:58.710 --> 00:36:04.390
of all of the functions that
it passed through calling into

00:36:04.390 --> 00:36:04.390
where I set the breakpoint.

00:36:05.730 --> 00:36:09.780
And as I switch through here,
you'll see all of the different

00:36:09.780 --> 00:36:13.730
local variables for that call frame,
and you can expand and

00:36:13.880 --> 00:36:17.340
see all of the functions,
arguments that came in.

00:36:17.340 --> 00:36:23.290
You can see all the objects that are
local variables that are being built up.

00:36:24.630 --> 00:36:34.290
And I really want to know what this
object is that we're about to append,

00:36:34.290 --> 00:36:34.290
and I know

00:36:34.530 --> 00:36:36.430
I can use the Quick Console here.

00:36:36.450 --> 00:36:42.760
And I know it's called message, oh yeah,
that's it, message wrapper.

00:36:42.780 --> 00:36:48.600
And I'm just auto-completing on the
current scope for this call frame,

00:36:48.610 --> 00:36:50.350
and we'll just go ahead and evaluate it.

00:36:50.510 --> 00:36:56.600
It's undefined currently because
it hasn't even been declared yet.

00:36:56.690 --> 00:36:59.920
So I'm just gonna go ahead
and step with the debugger,

00:36:59.930 --> 00:37:01.680
with the controls down here.

00:37:01.690 --> 00:37:05.790
And you'll notice the tool tip tells
you what all the key commands are.

00:37:06.880 --> 00:37:11.050
I'm just going to step over
until we get to this object,

00:37:11.050 --> 00:37:16.420
and I'm going to go ahead and hit
the up arrow and reevaluate that.

00:37:16.630 --> 00:37:19.110
And you'll see it's now
an empty div element.

00:37:19.110 --> 00:37:23.000
And this is a serialization
of that DOM element.

00:37:23.000 --> 00:37:26.080
It's an actual DOM object,
but we're going to show it to you as

00:37:26.130 --> 00:37:30.120
an HTML representation because that's
the best way to see those things.

00:37:31.500 --> 00:37:35.540
So I'm just going to keep stepping
over as it builds up this object,

00:37:35.540 --> 00:37:36.550
this DOM node.

00:37:36.700 --> 00:37:37.940
And here it appends.

00:37:37.940 --> 00:37:40.410
So let's go ahead and log that again.

00:37:40.410 --> 00:37:43.290
And you'll see now we have
another child element.

00:37:43.290 --> 00:37:47.020
And you'll see that it's building up this
DOM node as we go through this function.

00:37:48.910 --> 00:37:53.010
And let's go all the way to the
end here and log the final thing.

00:37:53.100 --> 00:37:57.530
Now we have both of our DOM elements,
and this is what you'll need to style it.

00:37:57.780 --> 00:38:01.370
You need to know the
class names that end up,

00:38:01.440 --> 00:38:06.930
and maybe you didn't know what they were,
and now you can pause in the

00:38:07.200 --> 00:38:12.040
debugger and see what they
are as they're being built up.

00:38:12.040 --> 00:38:12.350
Or you run into some JavaScript error
that you need to correct.

00:38:12.350 --> 00:38:12.350
Tim Hatcher

00:38:12.620 --> 00:38:16.350
So that's using the
debugger in a UIWebView.

00:38:16.700 --> 00:38:20.560
And again,
this works just as well on Safari.

00:38:20.560 --> 00:38:23.730
So if you're needing to debug
those touch events that you

00:38:23.730 --> 00:38:27.020
can't debug any other way,
you can now pause on those touch

00:38:27.020 --> 00:38:31.050
events and see what exactly the
information is you're getting.

00:38:32.270 --> 00:38:35.900
So finally,
String by Evaluating JavaScript String

00:38:35.900 --> 00:38:41.140
is no longer that black box that you
have no idea what's going on inside.

00:38:41.140 --> 00:38:44.200
You can finally open
up the Web Inspector,

00:38:44.370 --> 00:38:50.170
set a breakpoint,
log the local variables,

00:38:50.270 --> 00:38:53.890
and see exactly what's going
on with your code like you've

00:38:53.890 --> 00:38:53.890
never been able to do before.

00:38:54.560 --> 00:38:59.000
And one tip for that debugging
is call functions instead

00:38:59.000 --> 00:39:01.350
of passing in big scripts.

00:39:01.430 --> 00:39:05.950
It's easier to be able to go find the
actual script like I did in Colloquy,

00:39:05.950 --> 00:39:10.040
find the function that they're calling,
and set the breakpoint instead

00:39:10.290 --> 00:39:13.770
of trying to debug this string
that hasn't been parsed yet.

00:39:14.480 --> 00:39:17.980
Not to mention that's a performance
issue where the engine is always

00:39:17.980 --> 00:39:19.870
reparsing the same string.

00:39:19.870 --> 00:39:24.060
So try to keep your scripts small
and call into functions that

00:39:24.060 --> 00:39:26.280
can have a lot of meat to them.

00:39:28.540 --> 00:39:33.220
And you can evaluate again in the
Quick Console against the current scope,

00:39:33.240 --> 00:39:38.160
and that's really handy and useful
when you want to use that command line.

00:39:38.160 --> 00:39:46.120
You can also use the sidebar,
the variable, the scope chain sidebar

00:39:46.120 --> 00:39:49.450
like I showed you,
but if you're used to the

00:39:49.450 --> 00:39:49.450
command line and like typing,
that's what you want to use.

00:39:50.290 --> 00:39:55.370
So that's debugging with the
new Safari Web Inspector in

00:39:55.370 --> 00:39:57.490
your app and Safari.

00:39:58.240 --> 00:40:03.410
So in summary,
there's some sessions coming up that

00:40:03.990 --> 00:40:06.270
Talk about optimizing, like I said.

00:40:06.270 --> 00:40:10.530
And if you're really curious about
optimizing for the Retina display,

00:40:10.530 --> 00:40:13.800
the new MacBook Pro,
you should definitely attend the

00:40:13.800 --> 00:40:17.950
session on Wednesday talking about
how to take advantage of that 4X

00:40:17.950 --> 00:40:22.460
pixel density that you'll now be able
to take advantage of with your website

00:40:22.460 --> 00:40:25.030
in addition to Retina iOS devices.

00:40:26.700 --> 00:40:30.640
Talk about optimizing, like I said.

00:40:30.640 --> 00:40:35.500
And if you're really
curious about optimizing,

00:40:35.560 --> 00:40:37.000
like I said.

00:40:37.220 --> 00:40:41.920
And if you're really
curious about optimizing,

00:40:41.920 --> 00:40:43.450
like I said.

00:40:43.850 --> 00:40:47.950
And I hope you like the new
streamlined look in the Web Inspector.

00:40:47.960 --> 00:40:50.990
Definitely give us feedback if
there's anything missing or you

00:40:50.990 --> 00:40:52.770
find something that's hard to use.

00:40:52.770 --> 00:40:55.190
You can come down to
the lab or file bugs,

00:40:55.290 --> 00:40:57.480
and we'll definitely be listening.

00:40:59.620 --> 00:41:05.320
And you can finally be informed
in your debugging of your app and

00:41:05.350 --> 00:41:08.580
your mobile websites in Safari.