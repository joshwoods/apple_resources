WEBVTT

00:00:11.400 --> 00:00:16.760
Welcome to session 202, introduction to
Auto Layout for iOS and OSÂ X.

00:00:16.860 --> 00:00:18.010
I'm Marian Goldeen.

00:00:18.170 --> 00:00:21.440
I'm an engineer on UI kit,
and I'm here to help you get

00:00:21.440 --> 00:00:23.160
acquainted with Auto Layout.

00:00:23.620 --> 00:00:25.300
So come on in.

00:00:25.300 --> 00:00:27.140
The water's fine.

00:00:28.280 --> 00:00:30.570
Well, what is Auto Layout?

00:00:30.720 --> 00:00:35.610
Some of you probably remember that
it was introduced in Cocoa last year,

00:00:35.740 --> 00:00:39.780
and it's new this year on iOS.

00:00:40.380 --> 00:00:43.370
But just to make sure everyone
knows what we're talking about,

00:00:43.400 --> 00:00:46.460
when we say Auto Layout,
we're not talking about the

00:00:46.460 --> 00:00:48.610
layout of autos in a parking lot.

00:00:49.040 --> 00:00:52.450
We're talking about the
layout of your controls and

00:00:52.450 --> 00:00:54.690
views in your user interface.

00:00:57.140 --> 00:01:01.390
Auto Layout is a constraint
based descriptive layout system.

00:01:01.580 --> 00:01:06.890
Well that's very well and good,
but what do I actually mean by that?

00:01:06.940 --> 00:01:10.140
Hard coded layout,
which you're all familiar with,

00:01:10.150 --> 00:01:15.250
is when you say, put some specific magic
numbers in for your frames,

00:01:15.460 --> 00:01:18.970
like for instance the
button's frame origin is 124,

00:01:19.030 --> 00:01:23.240
396, and that works just fine
as long as nothing happens.

00:01:23.250 --> 00:01:26.940
Of course, something changes a little
bit and then that frame origin

00:01:26.940 --> 00:01:29.200
doesn't actually do what you want.

00:01:29.350 --> 00:01:33.960
So hard coded layout is not
descriptive and it's not what we want.

00:01:34.370 --> 00:01:38.640
Auto Layout is descriptive because
instead of just putting out these

00:01:38.640 --> 00:01:43.810
numbers that have no actual meaning,
we describe what we want from our layout.

00:01:43.920 --> 00:01:48.940
For example, we want the button centered
horizontally in its super view,

00:01:49.070 --> 00:01:53.260
and we want it a fixed
distance from the bottom.

00:01:53.320 --> 00:01:56.310
And if you think about that description,

00:01:56.740 --> 00:02:02.820
Those two aspects that we're describing
can be represented as linear equations.

00:02:03.040 --> 00:02:07.560
The button center X is equal
to the super view center X.

00:02:07.760 --> 00:02:12.700
The button's bottom is equal to the
super view's bottom minus the padding.

00:02:12.820 --> 00:02:16.700
And those equations are
what we call constraints.

00:02:16.910 --> 00:02:19.990
So that's the
constraint-based part of it.

00:02:20.750 --> 00:02:24.540
So if you describe the layout,
because it's descriptive,

00:02:24.540 --> 00:02:31.540
with constraints,
and here comes the auto part,

00:02:31.540 --> 00:02:31.540
the system calculates the
frames for you automatically.

00:02:35.290 --> 00:02:37.580
Here's what we're going
to go through today.

00:02:37.700 --> 00:02:41.420
We're going to start with setting
up a simple constraint-based layout.

00:02:41.510 --> 00:02:44.410
Just where do you begin?

00:02:44.780 --> 00:02:47.860
Then I'm going to tell you a little
bit about what's going on behind the

00:02:47.860 --> 00:02:50.770
scenes to take care of that layout.

00:02:51.340 --> 00:02:54.150
After that, we're going to discuss the
visual format language,

00:02:54.310 --> 00:02:58.460
which is some helpful things in code
to make your code easier to read

00:02:58.460 --> 00:03:01.020
and actually a bit more concise.

00:03:01.910 --> 00:03:04.700
I'm also going to tell you about
a couple of pitfalls that are

00:03:04.700 --> 00:03:08.030
important and unfortunately,
you're all going to hit

00:03:08.130 --> 00:03:09.940
them as you get started,
so it's good to know

00:03:09.940 --> 00:03:12.800
about them ahead of time.

00:03:12.800 --> 00:03:17.190
And there's an important compatibility
issue that I want to point out.

00:03:19.680 --> 00:03:22.360
So let's get going.

00:03:22.420 --> 00:03:27.400
And the best way to start with
setting up Auto Layout is with a demo.

00:03:31.730 --> 00:03:36.690
So here what we have is the
single view template from iOS,

00:03:36.690 --> 00:03:38.000
and we're ready to go.

00:03:38.130 --> 00:03:42.080
In the Utilities panel on the right,
in the tab on the left,

00:03:42.200 --> 00:03:44.590
we have the File Inspector.

00:03:45.370 --> 00:03:48.790
And if you select the file inspector
and down in the middle there's a

00:03:48.790 --> 00:03:52.700
check box that says use Auto Layout.

00:03:52.860 --> 00:03:54.890
Yeah, there it is.

00:03:55.350 --> 00:03:57.580
This checkbox is now going
to be checked by default,

00:03:57.580 --> 00:04:01.030
but I actually want to start
out this demo by unchecking it

00:04:01.030 --> 00:04:06.060
just to give you a sort of where
we're coming from kind of demo.

00:04:06.200 --> 00:04:08.700
So suppose you pull a button out.

00:04:09.200 --> 00:04:11.040
of your palette and drop it in.

00:04:11.120 --> 00:04:15.040
As you move it around,
Xcode draws these guides for you.

00:04:15.040 --> 00:04:17.970
And what these guides are telling you
when you're not using Auto Layout are

00:04:18.110 --> 00:04:20.520
different from what they're telling
you when you are using Auto Layout.

00:04:20.670 --> 00:04:24.420
So what they're telling me right
now is that if I choose this frame,

00:04:24.420 --> 00:04:28.170
I'm going to be in a position that's
the standard distances from the sides.

00:04:28.240 --> 00:04:31.700
If I choose this frame,
my frame will be centered horizontally

00:04:31.700 --> 00:04:34.440
and a standard distance from the bottom.

00:04:34.440 --> 00:04:37.070
So that's like my pictures before,
so that's so I'm going to choose,

00:04:37.190 --> 00:04:39.170
give it a name.

00:04:40.720 --> 00:04:43.780
And I build and run.

00:04:43.930 --> 00:04:47.260
And I find that what I've done here
is I've done hard coded layout.

00:04:47.350 --> 00:04:50.330
I've just set the frame of the button,
although I might not know

00:04:50.340 --> 00:04:51.840
exactly what frame I set.

00:04:51.840 --> 00:04:53.220
That's all I did.

00:04:53.360 --> 00:04:55.830
And when I rotate, of course,
the button's off screen.

00:04:55.910 --> 00:04:56.280
Darn it.

00:04:56.510 --> 00:04:59.220
That's not what I wanted.

00:04:59.380 --> 00:05:03.190
But if we'd done the exact
same thing with Auto Layout,

00:05:04.060 --> 00:05:06.640
Let's just remove this and
start from the beginning.

00:05:06.730 --> 00:05:08.900
Turn on Auto Layout.

00:05:09.000 --> 00:05:11.800
Now, if I do the exact same
thing with Auto Layout,

00:05:11.930 --> 00:05:15.740
once again, I have these guides,
but this time, the guides are indicating

00:05:15.740 --> 00:05:16.660
something different.

00:05:16.800 --> 00:05:19.440
The guides are saying, well,
if you put it here,

00:05:19.440 --> 00:05:25.160
you're telling me that I want
constraints to have the left edge

00:05:25.290 --> 00:05:31.400
and bottom edge of the button at
this fixed H-I-defined distance,

00:05:31.520 --> 00:05:34.780
and if you put it here, you're saying,
I want this button centered,

00:05:34.780 --> 00:05:36.800
and I want it a distance from the bottom.

00:05:36.900 --> 00:05:38.780
So that's an important
difference from saying,

00:05:38.780 --> 00:05:41.900
I want this frame that happens
to right now be centered.

00:05:42.020 --> 00:05:44.800
You're saying,
I want this always to be centered.

00:05:45.000 --> 00:05:47.190
So when you drop it,

00:05:48.140 --> 00:05:50.540
You're telling IB what
constraints you want,

00:05:50.540 --> 00:05:52.360
and IB obediently creates them.

00:05:52.470 --> 00:05:53.830
You can see these little blue lines.

00:05:53.970 --> 00:05:58.120
You can roll over them and kind
of see them a little better.

00:05:58.360 --> 00:06:00.140
There's the vertical,
that's the centering one,

00:06:00.140 --> 00:06:03.130
and then there's a little
I-beam for the spacer.

00:06:03.700 --> 00:06:07.160
If you look over here on the left,
you see that the constraints

00:06:07.230 --> 00:06:10.020
are full-fledged objects.

00:06:10.020 --> 00:06:12.400
In IB,
you can connect up outlets to them,

00:06:12.420 --> 00:06:14.280
and we'll be doing that later.

00:06:14.830 --> 00:06:17.530
Also, once they're selected,
they have attributes,

00:06:17.530 --> 00:06:19.940
which we'll also talk
about in a later demo.

00:06:20.120 --> 00:06:22.860
And if I build and run at this point,

00:06:23.370 --> 00:06:26.800
Then I've described my layout,
and the layout system

00:06:26.800 --> 00:06:29.790
calculates the frames for me,
and it gets them right.

00:06:29.860 --> 00:06:33.860
So, thank you.

00:06:38.490 --> 00:06:40.630
That's that simple demo.

00:06:40.630 --> 00:06:45.860
So that's how you describe the layout
with constraints in Interface Builder.

00:06:45.860 --> 00:06:47.290
You can also do it in code.

00:06:48.910 --> 00:06:52.210
Now, Interface Builder did a
couple of steps for you.

00:06:52.480 --> 00:06:54.560
And so you're going to have to
do the two steps separately.

00:06:54.560 --> 00:06:58.020
And those steps are creating the
constraints and adding them to a view.

00:06:58.020 --> 00:07:02.250
So step one, you create your constraints.

00:07:02.340 --> 00:07:07.370
And the API for that is
in NSLayoutConstraint.h.

00:07:07.370 --> 00:07:11.590
This is a header that's exported
both by AppKit and UIKit.

00:07:12.640 --> 00:07:14.900
You don't have to pound
import it separately.

00:07:15.010 --> 00:07:16.640
It's in the umbrella headers.

00:07:16.640 --> 00:07:20.640
But I'm telling you the header name in
case you like to read header comments.

00:07:21.230 --> 00:07:24.970
The general form of a constraint
is just this equation,

00:07:25.240 --> 00:07:28.080
and that helps you remember the API.

00:07:28.220 --> 00:07:34.330
But the attribute of the first item is
equal to a multiplier times the attribute

00:07:34.340 --> 00:07:36.760
of the second item plus a constant.

00:07:36.840 --> 00:07:39.340
And I'm actually simplifying
things a little bit.

00:07:39.460 --> 00:07:42.590
That equal sign can
also be an inequality,

00:07:42.660 --> 00:07:46.760
but it's just easier to look
at the equal sign for now.

00:07:47.140 --> 00:07:50.550
So the API just follows
out directly from that.

00:07:50.610 --> 00:07:54.390
It's a little bit lengthy
when you first look at it,

00:07:54.520 --> 00:07:55.740
but you keep your head on.

00:07:55.740 --> 00:07:59.190
And the first item is on the
left side of the equation there

00:07:59.450 --> 00:08:01.440
for the first two arguments.

00:08:01.440 --> 00:08:05.660
The attribute can be center, left, top,
bottom, there's a bunch.

00:08:06.580 --> 00:08:10.870
Then the relation is the
equals part or the inequality.

00:08:10.870 --> 00:08:14.840
Then the second item and its attribute
are the fourth and fifth arguments.

00:08:14.870 --> 00:08:17.020
And then come the
multiplier and the constant.

00:08:17.020 --> 00:08:20.920
Concretely,
with the example that we're using so far,

00:08:21.010 --> 00:08:26.320
you just have the center of the button
is equal to the super view center.

00:08:26.320 --> 00:08:30.500
And so you see that our relation
is NS layout relation equals.

00:08:30.500 --> 00:08:34.250
You see that our attributes are
NS layout attribute center X.

00:08:34.250 --> 00:08:36.260
Multiplier is one, constant is zero.

00:08:36.260 --> 00:08:39.760
Bottom, same deal,
we accept our attribute is bottom.

00:08:39.760 --> 00:08:41.550
Our relation is still equal.

00:08:41.550 --> 00:08:43.260
We have minus our padding.

00:08:43.350 --> 00:08:46.070
You sort of have to
remember your sign here.

00:08:46.070 --> 00:08:48.820
If you get that wrong,
it goes the other way.

00:08:48.900 --> 00:08:52.150
And you say, "Oh, whoops,
got my sign wrong."

00:08:52.490 --> 00:08:55.030
At this point, you might be looking at
this API and thinking,

00:08:55.040 --> 00:08:56.900
that's kind of a lot of code.

00:08:56.900 --> 00:08:58.880
It was pretty easy to
do in Interface Builder.

00:08:59.100 --> 00:09:01.990
Why would I ever want to do it in code?

00:09:02.370 --> 00:09:03.810
There's a few reasons.

00:09:03.810 --> 00:09:07.010
One reason is didactic,
which is you're trying to

00:09:07.050 --> 00:09:09.610
teach yourself what's going on,
and you can remember, okay,

00:09:09.610 --> 00:09:12.720
there's this unitary equation,
and that's our elementary API,

00:09:12.720 --> 00:09:14.350
and I can kind of put it together.

00:09:14.390 --> 00:09:17.240
And now I understand
what IB is doing for me.

00:09:17.340 --> 00:09:18.460
That's why I'm doing it here.

00:09:18.500 --> 00:09:21.230
But, of course, there are other reasons
for using the code.

00:09:21.310 --> 00:09:23.330
And sometimes you just kind of got to.

00:09:23.450 --> 00:09:26.850
Like you have a view controller that
vends different views at runtime

00:09:26.850 --> 00:09:30.000
and those views you want to replace,
so you have to set up the

00:09:30.000 --> 00:09:31.480
constraints at runtime.

00:09:31.520 --> 00:09:33.940
And there are a few kinds of
constraints that you actually

00:09:34.090 --> 00:09:37.250
can't set up in interface builder,
and you must set them up in code.

00:09:37.270 --> 00:09:40.060
So those are some reasons why
you actually care about the code.

00:09:45.550 --> 00:09:49.890
So now that we've created
our constraints and code,

00:09:50.090 --> 00:09:53.590
the next thing we want to
do is add them to a view.

00:09:53.790 --> 00:09:59.950
And that's another piece of API that
on AppKit is in NSLayoutConstraint.h.

00:10:00.390 --> 00:10:04.300
In UIKit, we've put it in UIView.h.

00:10:04.300 --> 00:10:09.450
It's defined in a category on
NSView and AppKit and UIView and UIKit.

00:10:09.760 --> 00:10:12.380
And it's just add constraint.

00:10:12.380 --> 00:10:13.430
Simple enough.

00:10:13.470 --> 00:10:17.510
There's also add constraints,
remove constraint, remove constraints.

00:10:17.540 --> 00:10:19.610
They all go together,
and then you're doing

00:10:19.660 --> 00:10:20.820
what you might expect.

00:10:20.820 --> 00:10:23.060
So, okay, you need to add your
constraint to a view.

00:10:23.160 --> 00:10:25.500
Add them to which view?

00:10:25.500 --> 00:10:29.010
The answer is you want to add
them to the two views closest

00:10:29.140 --> 00:10:34.400
common ancestor where every view is
considered an ancestor of itself.

00:10:34.400 --> 00:10:37.910
So what I mean by that is if
the two views are siblings,

00:10:37.950 --> 00:10:41.130
you add the constraint to their parents.

00:10:41.150 --> 00:10:44.340
If the two views are cousins,
you add the constraint

00:10:44.340 --> 00:10:46.110
to their grandparent.

00:10:46.390 --> 00:10:49.060
If the two views are parent and child,
which they are in this

00:10:49.120 --> 00:10:53.590
example that we're using,
you add the constraint to the parent.

00:10:55.000 --> 00:11:00.720
So now I'm just going to run through
that same example using code.

00:11:05.510 --> 00:11:09.780
I'm just going to do everything
I did in an IB in code.

00:11:09.780 --> 00:11:12.860
Remove the button,
so I'm going to do it in code.

00:11:12.860 --> 00:11:16.900
Go to my view controller.m file.

00:11:16.950 --> 00:11:19.510
Doing this in view did load
in the view controller,

00:11:19.510 --> 00:11:21.500
perfectly good place to
set up your constraints.

00:11:21.640 --> 00:11:26.100
It doesn't have to go there,
but it's a good place to do it sometimes.

00:11:27.180 --> 00:11:31.740
And I'm going to just pound define
in the code that I wrote already.

00:11:31.920 --> 00:11:32.740
Don't need this view.

00:11:32.740 --> 00:11:34.730
Let's give us a little more room.

00:11:34.830 --> 00:11:36.000
All right.

00:11:36.140 --> 00:11:39.150
Here I'm just setting up
my views and my button,

00:11:39.150 --> 00:11:42.390
creating my button and
adding it as a subview.

00:11:43.020 --> 00:11:46.600
So here's where I create my constraint,
and it's exactly like

00:11:46.600 --> 00:11:48.160
I had in that slide.

00:11:48.210 --> 00:11:57.930
We have the button center X is equal to
the super view center X times 1 plus 0.

00:11:58.210 --> 00:12:02.380
And we add the constraint to the
super view because it's the parent

00:12:02.520 --> 00:12:05.070
of the super view and the button.

00:12:06.820 --> 00:12:08.890
I should say the ancestor.

00:12:08.940 --> 00:12:12.770
And then the second constraint
we have the button's bottom is

00:12:12.770 --> 00:12:16.460
equal to the super view's bottom.

00:12:16.670 --> 00:12:24.570
Times 1 minus 20, add the constraint,
build and run,

00:12:24.570 --> 00:12:28.310
and works just like I set it up in IB.

00:12:29.880 --> 00:12:32.290
There's something I want
to point out to you here.

00:12:32.370 --> 00:12:37.790
And what I want to point out is
that if I search for set frame,

00:12:45.010 --> 00:12:47.000
Not found.

00:12:47.000 --> 00:12:52.150
This is important.

00:12:52.270 --> 00:12:56.370
I never set the frame of that
button because the layout system

00:12:56.610 --> 00:12:59.570
is what's setting the frame,
and that's something you need to keep

00:12:59.570 --> 00:13:01.760
in mind when you're using Auto Layout.

00:13:01.780 --> 00:13:06.690
You're not the one
who's setting the frame.

00:13:06.690 --> 00:13:06.690
You're just describing the layout.

00:13:09.750 --> 00:13:14.970
Some of you who might be fairly
experienced with doing layout may have

00:13:14.970 --> 00:13:17.540
had this thought cross their mind.

00:13:17.560 --> 00:13:19.100
I can do that with springs and struts.

00:13:19.180 --> 00:13:22.700
Everything I did here,
I could do with springs and struts.

00:13:22.820 --> 00:13:25.330
Just flexible left margin,
flexible right margin,

00:13:25.340 --> 00:13:27.190
flexible top margin on the bottom.

00:13:27.250 --> 00:13:28.310
I get the same behavior.

00:13:28.510 --> 00:13:30.200
You'd be absolutely right.

00:13:30.390 --> 00:13:33.900
Everything you can do
with springs and struts,

00:13:33.950 --> 00:13:35.550
you can do with constraints.

00:13:35.550 --> 00:13:35.550
This turns out to be important.

00:13:35.550 --> 00:13:35.550
Marian

00:13:36.430 --> 00:13:41.540
With constraints,
you can do a whole lot more.

00:13:41.540 --> 00:13:45.680
Constraints can apply to any two views,
regardless of their view hierarchy.

00:13:45.680 --> 00:13:47.960
You may remember with springs and struts,
you have to have that

00:13:48.380 --> 00:13:52.970
parent-child relationship,
and furthermore, it's directional.

00:13:52.980 --> 00:13:56.080
It goes from the parent to the child,
and the position or size of the child

00:13:56.180 --> 00:13:57.910
doesn't affect the parent at all.

00:13:58.030 --> 00:14:00.200
Constraints can go either way.

00:14:01.180 --> 00:14:03.690
You can establish maximums
and minimums with constraints.

00:14:03.790 --> 00:14:05.970
You remember that you
can use inequalities.

00:14:06.080 --> 00:14:08.200
This comes in handy.

00:14:09.110 --> 00:14:12.720
And constraints can also be prioritized.

00:14:12.720 --> 00:14:14.660
So up to now,
the constraints that we've been

00:14:14.660 --> 00:14:19.000
talking about have been required.

00:14:19.300 --> 00:14:24.990
There's a property on
NSLayoutConstraint called priority.

00:14:25.140 --> 00:14:30.000
The data type is different in
AppKit and UIKit just with the prefix,

00:14:30.000 --> 00:14:33.480
and we didn't just do that
because of the prefixes.

00:14:33.480 --> 00:14:37.060
We actually have slightly
different system-defined priority

00:14:37.060 --> 00:14:38.970
levels for the two cases.

00:14:39.000 --> 00:14:41.300
So we've got different names.

00:14:41.340 --> 00:14:45.630
The most important thing to
remember right now and what you

00:14:45.630 --> 00:14:51.560
need for going forward is that the
required priority level is 1,000.

00:14:51.560 --> 00:14:56.180
Anything less than that is not
required and will be satisfied by

00:14:56.180 --> 00:14:58.620
the systems as much as possible.

00:14:58.780 --> 00:15:01.470
So any error will be minimized.

00:15:02.510 --> 00:15:07.520
And you can set the priority on
a constraint any time before the

00:15:07.520 --> 00:15:10.010
constraint's added to a view.

00:15:11.240 --> 00:15:14.830
So with that in mind,
I can continue the demo and

00:15:14.880 --> 00:15:18.390
do a few things that you can't
do with springs and struts.

00:15:24.920 --> 00:15:28.490
So here's where we left off
at the end of the first demo.

00:15:28.780 --> 00:15:32.420
We had our button,
and we had a centering constraint

00:15:32.420 --> 00:15:34.430
and a bottom spacer constraint.

00:15:34.530 --> 00:15:40.030
And we decide that the button actually
needs a label to go along with it.

00:15:43.760 --> 00:15:48.690
So notice I'm getting another guide
here to the right of the label.

00:15:48.740 --> 00:15:52.560
And that guide is letting me
know that I'm going to ask for

00:15:52.560 --> 00:15:55.040
a space or constraint between
the label and the button.

00:15:55.040 --> 00:15:56.120
That is what I want.

00:15:56.300 --> 00:15:57.230
So I'm going to stop there.

00:15:57.230 --> 00:16:03.280
And you can actually -- I'll just show it
to you here because it's kind of small.

00:16:04.600 --> 00:16:10.000
We have a horizontal spacer there
between the label and the button.

00:16:10.130 --> 00:16:14.350
And I'm going to give the label
a sort of slightly better name.

00:16:18.910 --> 00:16:26.410
A nice little thing you can do
in Interface Builder is if you

00:16:26.410 --> 00:16:26.410
select the view controller,

00:16:26.890 --> 00:16:28.460
In the attributes for
the view controller,

00:16:28.500 --> 00:16:32.640
you can change the simulated orientation.

00:16:32.800 --> 00:16:36.940
And it'll actually lay out
as if you had built and run.

00:16:37.010 --> 00:16:42.390
And so, indeed,
here we have the label is actually just

00:16:42.660 --> 00:16:44.140
sticking right there next to the button.

00:16:44.140 --> 00:16:47.000
It didn't move around or anything.

00:16:47.200 --> 00:16:50.700
We've constrained it to be just this
fixed space to the left of the button,

00:16:50.720 --> 00:16:55.020
and the button's centered,
and it's all working the way we want.

00:16:56.430 --> 00:16:59.210
So the next thing that might
happen is you might have a

00:16:59.210 --> 00:17:01.500
different label for the button.

00:17:01.500 --> 00:17:04.340
You might have a label that
takes up a little more room.

00:17:04.340 --> 00:17:11.170
I want to make sure I'm still centered
and got all the constraints that I want.

00:17:17.160 --> 00:17:20.000
So now I have the button centered,
it has a long title.

00:17:20.000 --> 00:17:22.790
Let's say I did build
and run at this point.

00:17:25.810 --> 00:17:30.860
Well, I'm running into a little
problem here with my layout.

00:17:31.150 --> 00:17:34.980
I like the landscape layout,
but in the portrait,

00:17:34.980 --> 00:17:37.940
the label has kind of fallen
off the side of the view.

00:17:37.940 --> 00:17:39.460
It's actually clipped there.

00:17:39.460 --> 00:17:42.290
You know,
the view is just kind of out of bounds.

00:17:42.410 --> 00:17:43.320
And I don't want that.

00:17:43.390 --> 00:17:50.750
I want that label to never
get closer to the edge than

00:17:50.780 --> 00:17:52.060
the HIDefied standard margin.

00:17:52.890 --> 00:17:56.020
And, but you know,
I want to allow it to get

00:17:56.020 --> 00:17:58.150
bigger than that in landscape.

00:17:58.210 --> 00:18:02.390
And so that's where an inequality
constraint could be helpful.

00:18:03.110 --> 00:18:10.360
So I want to put in a constraint on the
left as a left spacer for the label.

00:18:10.450 --> 00:18:13.690
So I want to create a new constraint,
and there's two places you can do it.

00:18:13.760 --> 00:18:17.710
You can find it in the
editor menu under Pin.

00:18:18.180 --> 00:18:24.260
I'm going to do it from this button
down here in the lower right.

00:18:24.390 --> 00:18:28.070
There's a little picture like an I-beam,
and that's your hint

00:18:28.150 --> 00:18:29.700
that it's a constraint.

00:18:29.830 --> 00:18:32.200
So we'll pop it up,
and I want to pin the leading

00:18:32.200 --> 00:18:35.100
space to the super view,
and since English is left to right,

00:18:35.180 --> 00:18:38.130
leading space gives me the left one.

00:18:38.660 --> 00:18:43.440
And then if I look over on the
right in the attributes inspector,

00:18:43.490 --> 00:18:45.480
I don't want the relation to be equal,
remember?

00:18:45.480 --> 00:18:49.300
I wanted it to be a minimum,
so I want greater than or equal to.

00:18:49.350 --> 00:18:51.610
And of course, 79 is too big.

00:18:51.610 --> 00:18:53.890
I just want the standard space.

00:18:54.570 --> 00:18:57.800
So I click that for standard,
and now we should be good and

00:18:57.800 --> 00:19:02.370
not have the label bumping
into the edge of the frame.

00:19:03.650 --> 00:19:04.840
Hmm.

00:19:04.910 --> 00:19:06.360
All right.

00:19:06.510 --> 00:19:08.860
Still good in landscape.

00:19:09.330 --> 00:19:11.790
But we've clipped the label.

00:19:12.780 --> 00:19:18.250
So it turns out that it's more important
to the constraint system at this point

00:19:18.330 --> 00:19:23.830
to keep that button centered than
it is to avoid keeping the label.

00:19:24.900 --> 00:19:26.560
But I say, hey, look,
there's kind of more

00:19:26.620 --> 00:19:27.620
room there on the right.

00:19:27.700 --> 00:19:33.400
I'd actually like it to be more important
to show the entire contents of the label

00:19:33.770 --> 00:19:35.420
than it is to keep that button centered.

00:19:35.420 --> 00:19:41.730
So this is where I want to change the
priority of my centering constraint.

00:19:42.440 --> 00:19:43.720
So I stop and I go back.

00:19:43.800 --> 00:19:48.600
I can either select the button,
which will show the constraints,

00:19:48.600 --> 00:19:50.270
and then I can select the constraint.

00:19:50.280 --> 00:19:55.120
Or I could have gone straight to the
constraint in the menu on the outline

00:19:55.120 --> 00:19:57.300
view on the left and selected it there.

00:19:57.300 --> 00:20:01.280
But I select the constraint,
and then I have these priorities.

00:20:01.400 --> 00:20:04.160
So you see that by default it
had been brought out with a

00:20:04.160 --> 00:20:06.290
required priority of 1,000.

00:20:06.620 --> 00:20:12.460
And once you start moving this slider,
you get a helpful tool tip that

00:20:12.460 --> 00:20:16.150
gives you an idea of where your
constraint falls in priority with

00:20:16.150 --> 00:20:19.150
respect to system-defined priorities.

00:20:19.250 --> 00:20:23.420
And I actually want a pretty
low priority here to be lower.

00:20:23.420 --> 00:20:28.450
It's not that important to the
system to avoid clipping the label.

00:20:28.550 --> 00:20:30.810
So I make that priority
pretty low on that centering

00:20:30.860 --> 00:20:33.300
constraint to be lower than that.

00:20:33.300 --> 00:20:35.140
Build and run.

00:20:36.700 --> 00:20:40.400
Okay, now I've got what I want.

00:20:40.400 --> 00:20:41.980
I can read everything.

00:20:41.980 --> 00:20:44.890
I don't have any label truncation.

00:20:45.240 --> 00:20:47.720
I rotate,
the button is centered in landscape

00:20:47.830 --> 00:20:50.200
where there's room to do that.

00:20:50.210 --> 00:20:53.170
I go back to portrait,
and the button isn't centered,

00:20:53.220 --> 00:20:54.240
but it's almost centered.

00:20:54.240 --> 00:20:58.950
It very clearly did the best it could,
so I'm satisfied.

00:21:00.810 --> 00:21:04.160
So now I've showed you the priorities
and the inequalities and how they

00:21:04.170 --> 00:21:08.570
can actually work together to
make your layout do what you want.

00:21:08.910 --> 00:21:11.950
But I want to show you one more thing,
which is about cross-view

00:21:11.950 --> 00:21:13.690
hierarchy constraints.

00:21:13.710 --> 00:21:18.630
It's not that unusual to maybe
have some sort of container view

00:21:18.630 --> 00:21:21.740
containing some portion of your UI.

00:21:21.920 --> 00:21:24.730
So I'm going to make a container view.

00:21:25.440 --> 00:21:31.640
And I'll just make it be Aqua guidelines.

00:21:31.760 --> 00:21:32.890
Okay?

00:21:32.980 --> 00:21:35.310
And, you know, as I was pulling it out
to those guidelines,

00:21:35.310 --> 00:21:36.800
I was telling it where
I wanted my constraints.

00:21:36.800 --> 00:21:40.780
I'm perfectly satisfied with
these margin spacer constraints.

00:21:40.780 --> 00:21:44.970
Normally, with a container view,
you might make the background

00:21:45.050 --> 00:21:46.300
color completely clear.

00:21:46.360 --> 00:21:52.480
I'm going to leave it showing just so
you can follow my demo a little better.

00:21:52.640 --> 00:21:55.360
So I'll leave it showing.

00:21:55.360 --> 00:22:01.250
Now, suppose that I've written some
appearance containment stuff with

00:22:01.500 --> 00:22:03.120
appearance when contained in.

00:22:03.310 --> 00:22:06.320
So I just happen to have
a view subclass here,

00:22:06.650 --> 00:22:09.140
which makes switches orange.

00:22:09.140 --> 00:22:13.270
So this is going to be a container
view that makes switches orange.

00:22:13.270 --> 00:22:15.510
So I'll pull a switch out in there.

00:22:20.900 --> 00:22:24.130
The constraints that IB will
make for me for this switch are

00:22:24.130 --> 00:22:25.650
with respect to its super view.

00:22:25.660 --> 00:22:28.710
So I'll just go ahead and set those in,
and it's centering in its super view.

00:22:28.860 --> 00:22:31.110
It looks pretty good in landscape
because I do want the switch

00:22:31.300 --> 00:22:32.350
centered over the button.

00:22:32.660 --> 00:22:35.100
I'm going to build and run.

00:22:36.000 --> 00:22:38.110
And the switch is orange,
which it got from the

00:22:38.110 --> 00:22:39.490
appearance containment.

00:22:39.490 --> 00:22:41.070
But it looks a little cockeyed.

00:22:41.070 --> 00:22:44.740
It looks pretty good in landscape
where it's centered over the button.

00:22:44.740 --> 00:22:47.300
But in portrait,
it's still centered in its super

00:22:47.300 --> 00:22:50.420
view when I actually want it to
stay centered over the button,

00:22:50.460 --> 00:22:53.550
but of course we can't count
on the button to stay centered.

00:22:53.550 --> 00:22:57.320
So I want to tie the center of the
switch to the center of the button.

00:22:59.220 --> 00:23:01.230
And I think, oh, you know,
I ought to be able to do that in IB.

00:23:01.230 --> 00:23:02.540
Maybe I can do that in IB.

00:23:02.540 --> 00:23:05.170
I could go into IB and I could
select the two items and add

00:23:05.360 --> 00:23:07.140
a constraint between them,
too.

00:23:07.140 --> 00:23:09.180
So you go, okay,
so I'll select the button,

00:23:09.180 --> 00:23:12.210
and then I'll shift select the switch.

00:23:12.210 --> 00:23:15.470
Huh, right, it selected its super view
because it's at the same

00:23:15.580 --> 00:23:17.360
hierarchy level as the button.

00:23:17.360 --> 00:23:20.930
And you go, oh, well,
IB can't quite do this yet.

00:23:21.100 --> 00:23:25.540
So that's where you say, well,
I better set this constraint up in code.

00:23:27.260 --> 00:23:31.930
Remember that the constraints are
full-fledged objects in Interface Builder

00:23:32.080 --> 00:23:34.120
so that you can hook up the outlets.

00:23:34.120 --> 00:23:37.990
So we go to the editor view so we can
look at the header at the same time

00:23:38.130 --> 00:23:40.600
as we're looking at the storyboard.

00:23:41.090 --> 00:23:44.800
And I've already set up my
outlets to save us a little time.

00:23:44.920 --> 00:23:50.710
We'll need to remove the centering
constraint on the switch because

00:23:50.710 --> 00:23:53.760
we're going to be putting our
own centering constraint on.

00:23:53.930 --> 00:23:57.700
So we'll need an outlet to
that in order to remove it.

00:23:58.300 --> 00:24:01.860
And when we send remove constraint,
we'll have to be able to send it to

00:24:01.870 --> 00:24:07.340
the view that has the constraint,
and that would be the common ancestor

00:24:07.450 --> 00:24:10.960
of the switch and the container view,
which is the container view.

00:24:11.120 --> 00:24:12.760
So we set up that outlet.

00:24:12.910 --> 00:24:15.510
And then we need outlets to the two
controls that are going into the

00:24:15.510 --> 00:24:17.300
constraint that we're going to create.

00:24:17.500 --> 00:24:23.220
So we need an outlet to the button
and an outlet to the switch.

00:24:24.500 --> 00:24:30.090
Okay, once that code is set up, I mean,
once those outlets are set up, excuse me,

00:24:32.540 --> 00:24:38.580
Then we can go to our
code in viewcontroller.m.

00:24:38.580 --> 00:24:42.320
Again, I'm doing this in viewDidLoad.

00:24:42.410 --> 00:24:47.090
And the first thing we do is we
remove the constraint we don't want.

00:24:48.310 --> 00:24:49.680
So it's simple enough.

00:24:49.790 --> 00:24:55.650
We send the old constraint in
the message remove constraint

00:24:56.100 --> 00:25:02.340
to the view that has it,
which is the switch container.

00:25:02.340 --> 00:25:02.340
And then we create

00:25:04.150 --> 00:25:08.040
The constraint we actually want,
which is that the center of

00:25:08.040 --> 00:25:12.730
the orange switch is equal
to the center of the button.

00:25:13.080 --> 00:25:16.460
And again, the multiplier is 1
and the constant is 0.

00:25:16.490 --> 00:25:18.620
And we add the constraint.

00:25:35.530 --> 00:25:35.530
And sure enough,
now the switch stays with

00:25:35.530 --> 00:25:35.530
its center over the button,
which is what we wanted.

00:25:35.530 --> 00:25:35.530
Rotate, and we're good.

00:25:35.530 --> 00:25:35.530
So there we have an example.

00:25:36.500 --> 00:25:47.500
[Transcript missing]

00:25:47.920 --> 00:25:49.970
And it was a pretty simple example,
but you might have

00:25:50.030 --> 00:25:53.300
already begun to notice

00:25:54.580 --> 00:25:58.060
that something's going
on behind the scenes.

00:25:58.180 --> 00:25:59.650
There's something global going on.

00:25:59.920 --> 00:26:03.710
You know,
some constraint or something might

00:26:03.870 --> 00:26:07.100
apply to some view over here,
but because of the situation,

00:26:07.100 --> 00:26:10.200
another view somewhere else in the
view hierarchy might get affected,

00:26:10.200 --> 00:26:14.840
and so there is something
going on behind the scenes.

00:26:15.000 --> 00:26:20.530
When the UI's just sitting there,
it's drawn, everything's fine,

00:26:20.530 --> 00:26:22.100
then something happens.

00:26:22.140 --> 00:26:24.280
Say, for example,
you rotate the device or

00:26:24.280 --> 00:26:27.840
there's a window resize,
and the situation has changed,

00:26:27.840 --> 00:26:33.220
and so the solution for the constraints,
the answer, the frames, has changed.

00:26:33.600 --> 00:26:36.380
So we need to redraw,
and before we redraw,

00:26:36.540 --> 00:26:38.800
we have to apply the new layout.

00:26:38.950 --> 00:26:41.640
Other things that might happen
is a view might get added,

00:26:41.660 --> 00:26:45.580
such as a badge of some kind,
and when a view gets added,

00:26:45.580 --> 00:26:47.580
it's going to be added
with its constraints,

00:26:47.730 --> 00:26:50.980
and they have to be
brought into the system,

00:26:50.980 --> 00:26:53.720
and you get a new view,
and you get a new solution,

00:26:53.720 --> 00:26:57.090
and that has to be applied,
so we're gonna have to redraw.

00:26:58.300 --> 00:28:25.000
[Transcript missing]

00:28:26.440 --> 00:28:30.100
You can poke the system and say,
you know, hey,

00:28:30.100 --> 00:28:35.660
I'm sending in a request for any of
these passes with set needs display,

00:28:35.660 --> 00:28:39.940
set needs layout,
set needs update constraints.

00:28:40.090 --> 00:28:45.100
The only difference between
the two kits is the argument,

00:28:45.100 --> 00:28:50.240
the colon on the app kit side,
and the only reason there's

00:28:50.260 --> 00:28:50.740
this difference is for internal
consistency within the kits.

00:28:51.340 --> 00:28:57.720
The only really new piece of API is
set needs update constraints on UIView.

00:28:57.970 --> 00:29:01.820
UIView already has set needs-display
and set needs-layout from

00:29:01.820 --> 00:29:05.820
the existing display passes,
and they just are -- we co-opted

00:29:05.920 --> 00:29:08.600
them with the Auto Layout,
so when you're using auto-layout,

00:29:08.680 --> 00:29:10.400
the same ones work.

00:29:10.400 --> 00:29:13.700
And set needs-update
constraints completes the deal.

00:29:13.740 --> 00:29:16.530
You can also have this sort of
thing happen immediately rather

00:29:16.540 --> 00:29:20.410
than waiting for the next time
the system is going to do it,

00:29:20.520 --> 00:29:24.160
with layout if needed
on UIView and UI window,

00:29:24.160 --> 00:29:28.880
and layout subtree if needed on
NSView and layout if needed on NSWindow.

00:29:28.900 --> 00:29:31.380
This reminds me of something
I meant to say earlier,

00:29:31.380 --> 00:29:34.200
which is with the cross-view
hierarchy constraints,

00:29:34.200 --> 00:29:37.230
this question doesn't come up in AppKit,
but in UIKit,

00:29:37.340 --> 00:29:39.110
UIWindow is a subclass of UIView.

00:29:39.380 --> 00:29:42.840
I don't mean cross-window constraints,
okay?

00:29:42.840 --> 00:29:44.070
We don't support that.

00:29:44.160 --> 00:29:48.190
Your constraints all have to be
within the same window to apply.

00:29:48.190 --> 00:29:53.510
So in case -- that's a subtlety,
but just, you know, remember that.

00:29:54.260 --> 00:29:57.960
Anyways, let's go back to these phases
of display one more time.

00:29:57.990 --> 00:29:59.300
We're interested in layout.

00:29:59.300 --> 00:30:04.200
So let's just say that we know that
the constraints are up to date.

00:30:04.310 --> 00:30:07.040
And we know that after we've laid out,
we're going to draw somehow.

00:30:07.110 --> 00:30:08.240
So we're not going to think about that.

00:30:09.430 --> 00:30:13.130
What's happening during this
phase where we apply the layout?

00:30:13.570 --> 00:30:19.090
That's where the system is sending
layout on AppKit and layout

00:30:19.090 --> 00:30:22.420
subviews on UIKit to the views.

00:30:22.600 --> 00:30:27.400
Now, layout subviews heretofore
has been a no-op on UIView.

00:30:27.650 --> 00:30:30.810
And going forward,
if you're using Auto Layout,

00:30:30.810 --> 00:30:37.070
layout subviews in UIKit is where
the Auto Layout solution is applied.

00:30:39.920 --> 00:30:43.930
During that layout pass,
we take our solution and we

00:30:44.060 --> 00:30:49.010
send set frame in NSView and
set bounds in set center.

00:30:49.160 --> 00:30:56.070
to UI view to get the solution
onto your view hierarchy.

00:30:56.910 --> 00:31:00.930
So unfortunately when
you're working with layout,

00:31:01.120 --> 00:31:02.890
sometimes you run it and
you don't see what you want,

00:31:02.980 --> 00:31:05.300
and you say something's
gone wrong with the layout.

00:31:05.430 --> 00:31:09.030
Well, if you're using Auto Layout,
you need to think again because

00:31:09.170 --> 00:31:10.700
the layout task is pretty simple.

00:31:10.700 --> 00:31:14.370
We're just applying these
frames from the solution.

00:31:14.700 --> 00:31:17.980
Something might have gone
wrong with your constraints.

00:31:18.030 --> 00:31:19.040
That's more likely.

00:31:19.110 --> 00:31:23.200
There are two things that are
required about your constraints.

00:31:23.350 --> 00:31:25.740
First of all,
the constraints that you set must

00:31:25.740 --> 00:31:31.110
be sufficient to fully define the
position and the size of your view.

00:31:31.620 --> 00:31:34.600
Also, the constraints must not
conflict with each other.

00:31:34.620 --> 00:31:37.310
You must actually have something
that could exist in real life

00:31:37.440 --> 00:31:41.710
without an alternate dimension.

00:31:42.610 --> 00:31:44.570
I think I pulled a fast one
on you because I said the

00:31:44.630 --> 00:31:46.500
constraints have to be sufficient.

00:31:46.540 --> 00:31:48.740
What's going on here?

00:31:48.880 --> 00:31:52.920
I said I have the constraint saying
that the button's center X is

00:31:52.920 --> 00:31:55.320
equal to the superview's center X.

00:31:55.410 --> 00:31:57.900
And I have a constraint saying that
the button's bottom is equal to the

00:31:57.930 --> 00:32:00.140
superview's bottom minus the padding.

00:32:00.140 --> 00:32:03.120
But did I put any constraints
on that had anything to do

00:32:03.120 --> 00:32:04.740
with the size of the button?

00:32:04.750 --> 00:32:06.830
How -- where did the size come from?

00:32:06.830 --> 00:32:09.330
I didn't put any constraints on there.

00:32:09.560 --> 00:32:11.010
Well, it came from here.

00:32:11.160 --> 00:32:15.960
There's a method on NS view and
UI view called intrinsic content size.

00:32:15.970 --> 00:32:20.140
And the base implementation
basically says,

00:32:20.140 --> 00:32:21.380
oh, nothing, you know.

00:32:21.380 --> 00:32:27.830
But for some -- for some views,
there actually is a size that

00:32:27.830 --> 00:32:29.820
makes sense that we could return.

00:32:29.820 --> 00:32:34.200
Like for a button, for example,
you know about the content,

00:32:34.200 --> 00:32:36.380
like the label or the image.

00:32:36.380 --> 00:32:38.120
You know something about the size of it.

00:32:38.330 --> 00:32:41.880
You know about the image that's going to
be used for the background of the button.

00:32:41.970 --> 00:32:44.400
So the system can actually
come up with a preferred size.

00:32:44.400 --> 00:32:50.600
So the -- the kits have implemented
intrinsic content size to

00:32:50.600 --> 00:32:56.940
return actual sizes in -- for
specific subclasses of the views.

00:32:56.940 --> 00:32:58.100
And you can also override this, too.

00:32:58.100 --> 00:33:02.070
I'm not going to talk any more about
this because there's a lot more

00:33:02.070 --> 00:33:06.220
details and in the session on Thursday,
mastering Auto Layout,

00:33:06.340 --> 00:33:07.320
you can learn a lot more.

00:33:07.370 --> 00:33:09.760
But now you know I'm
not just tricking you.

00:33:09.760 --> 00:33:10.840
Okay.

00:33:11.030 --> 00:33:12.330
All right.

00:33:12.480 --> 00:33:17.420
So what I'd like to dive right into
now is the things that can go wrong.

00:33:18.360 --> 00:33:23.290
However,
Interface Builder does its very best

00:33:23.570 --> 00:33:27.770
to help you avoid these problems.

00:33:28.120 --> 00:33:31.220
That means it would be hard
for me to demonstrate these

00:33:31.220 --> 00:33:33.080
problems in Interface Builder.

00:33:33.080 --> 00:33:36.100
So I'm going to demonstrate
these problems in code.

00:33:36.240 --> 00:33:44.630
And that elementary API,
while it's easy to remember,

00:33:44.630 --> 00:33:44.630
once you start writing out
four of those for every view,

00:33:44.930 --> 00:33:47.810
You get kind of a big
pile of hard to read code.

00:33:47.810 --> 00:33:56.200
So that's why I'm going to first talk
about the visual format language,

00:33:56.300 --> 00:33:59.000
which makes the code easier to read,
because then you'll follow

00:33:59.000 --> 00:33:59.000
along better when I show you
the things that can go wrong.

00:33:59.660 --> 00:34:01.430
So here's an example.

00:34:01.580 --> 00:34:04.540
Here we have a pretty simple
constraint that we're setting up,

00:34:04.540 --> 00:34:07.400
a constraint between this
cancel and accept button.

00:34:07.420 --> 00:34:10.310
And when you look at the picture,
you can see right away that

00:34:10.430 --> 00:34:14.380
you're setting up a fixed spacer,
and that the cancel button's on the left

00:34:14.380 --> 00:34:16.940
and the accept button's on the right.

00:34:18.500 --> 00:34:20.500
So when you look at the code,
if you look at it fast,

00:34:20.500 --> 00:34:23.270
you might even get left and right
mixed up because that left attribute

00:34:23.270 --> 00:34:25.660
is right there next to accept button,
and we're not saying the

00:34:25.800 --> 00:34:28.330
accept button is on the left,
we're saying that the left side of the

00:34:28.430 --> 00:34:30.990
accept button is to the right of the,
and okay, you know, so the,

00:34:30.990 --> 00:34:33.610
that means the accept
button is on the right.

00:34:33.690 --> 00:34:36.180
It's just a lot easier
to look at this picture.

00:34:36.250 --> 00:34:38.740
You don't even hardly
have to think about it.

00:34:38.850 --> 00:34:41.360
So wouldn't it be awesome
if you could just say,

00:34:41.420 --> 00:34:45.090
here are my pictures,
you please write the constraints for me.

00:34:45.840 --> 00:34:48.520
If there was only,
there was a way to draw such

00:34:48.520 --> 00:34:51.320
a simple picture in Xcode.

00:34:51.320 --> 00:34:55.450
And for those of you who
like to do ASCII art,

00:34:55.560 --> 00:35:00.540
there is a way.

00:35:06.000 --> 00:35:13.600
[Transcript missing]

00:35:17.700 --> 00:35:23.380
The API is constraints
with visual format.

00:35:23.540 --> 00:35:27.990
And the parser will just read
that ASCII format string and write

00:35:27.990 --> 00:35:29.790
those elementary API constraints.

00:35:29.910 --> 00:35:31.870
There's a couple of other arguments.

00:35:31.880 --> 00:35:32.940
We'll get into that.

00:35:32.940 --> 00:35:36.490
And there's the views dictionary
which tells the parser what

00:35:36.490 --> 00:35:38.850
objects those strings represent.

00:35:39.060 --> 00:35:42.750
And we even have a nifty little macro
for you so that if those strings are

00:35:42.810 --> 00:35:46.900
the same as your local variable names,
you can use NSDictionary of variable

00:35:46.960 --> 00:35:51.780
bindings to create that dictionary
which makes it a lot easier.

00:35:51.780 --> 00:35:53.660
I like that a lot.

00:35:54.380 --> 00:36:00.260
If you break in the debugger and
look at your views dictionary,

00:36:00.260 --> 00:36:09.210
it'll just be what you expect,
except without bogus addresses.

00:36:09.590 --> 00:36:11.630
Naturally,
you want to express more than just

00:36:11.630 --> 00:36:15.860
two views are next to each other,
and taking automatic sizing,

00:36:15.860 --> 00:36:18.900
you might want to be able
to put in specific sizes.

00:36:18.900 --> 00:36:20.220
So you can.

00:36:20.220 --> 00:36:23.110
You can specifically
say what sizes you want.

00:36:23.110 --> 00:36:25.940
And you can do even more.

00:36:25.940 --> 00:36:29.140
I'm going to give you a few simple
examples to give you an idea.

00:36:29.140 --> 00:36:32.380
There's lots more information
in the documentation,

00:36:32.480 --> 00:36:33.900
lots more examples.

00:36:34.330 --> 00:36:37.780
It's actually pretty straightforward.

00:36:37.780 --> 00:36:40.000
You can get the hang of it pretty
quickly and then refer to the

00:36:40.000 --> 00:36:41.900
documentation to refresh your memory.

00:36:41.900 --> 00:36:44.660
So for example,
you can put in inequalities

00:36:44.660 --> 00:36:46.300
next to those numbers.

00:36:46.300 --> 00:36:51.100
And so here's a view that
has a minimum width of 60.

00:36:51.100 --> 00:36:53.820
So it has a width that can be
greater than or equal to 60.

00:36:53.990 --> 00:36:56.280
And we actually have a priority on that.

00:36:56.280 --> 00:36:57.560
It's at 700.

00:36:57.560 --> 00:37:01.780
So width greater than or equal
to 60 at a priority of 700.

00:37:02.300 --> 00:37:04.690
Of course,
we want to do vertical constraints too,

00:37:04.800 --> 00:37:09.820
so we turn our head on our side
to look at the ASCII art and put

00:37:09.820 --> 00:37:12.920
a V colon in front of the string.

00:37:12.920 --> 00:37:16.960
And then we know that we're vertical.

00:37:16.960 --> 00:37:19.870
We have a little shorthand so you
don't have to put in zeros if you want

00:37:19.870 --> 00:37:21.640
the views right next to each other.

00:37:21.640 --> 00:37:23.120
You just abut the brackets.

00:37:23.120 --> 00:37:26.280
And you can also say that the
dimension of one view is equal

00:37:26.280 --> 00:37:28.320
to the dimension of another view.

00:37:28.320 --> 00:37:29.370
In this case, it's the height.

00:37:29.790 --> 00:37:33.910
I'm saying that the yellow box height
is equal to the red box height.

00:37:36.210 --> 00:37:55.780
: You can combine a bunch
of views all at once,

00:37:55.780 --> 00:37:55.780
and you can talk to the super view.

00:37:55.780 --> 00:37:55.780
The pipes there on
either side are saying,

00:37:55.780 --> 00:37:55.780
"Connect me to the super view."
I put in an H colon here.

00:37:55.780 --> 00:37:55.780
That's the default,
so if you don't put in that prefix,

00:37:55.780 --> 00:37:55.780
it's going to be horizontal,
but sometimes it's nice to put in the

00:37:55.780 --> 00:37:55.780
prefix to just keep your mind straight.

00:37:56.130 --> 00:37:59.320
Now I want you to think about
this example for a minute.

00:37:59.320 --> 00:38:01.720
We actually have a bunch
of constraints here.

00:38:01.720 --> 00:38:04.710
Remember the API is
constraints with visual format.

00:38:04.710 --> 00:38:09.270
We've got four spacer constraints
plus a width constraint.

00:38:09.270 --> 00:38:13.700
So if you think about that,
that's just right there.

00:38:14.000 --> 00:38:19.200
That's five of those elementary
API messages that were

00:38:19.200 --> 00:38:20.620
all kind of hard to read.

00:38:20.620 --> 00:38:25.040
And you're pretty happy to do that
if you add on to that an option,

00:38:25.040 --> 00:38:29.660
an alignment option,
NS layout format align all baseline.

00:38:29.660 --> 00:38:33.640
You've added a few more constraints
to keep them lined up vertically.

00:38:33.750 --> 00:38:37.830
So you're getting a lot of bang
for the buck with this syntax.

00:38:37.880 --> 00:38:45.180
And now that I've introduced
this syntax to you,

00:38:45.180 --> 00:38:48.810
now you can follow along with
the things that can go wrong.

00:38:48.960 --> 00:38:50.930
What were those things again?

00:38:51.010 --> 00:38:52.060
All right.

00:38:52.060 --> 00:38:53.130
You have to make sure that you're not
going to have a lot of constraints.

00:38:53.130 --> 00:38:55.090
You have to make sure that the
constraints are sufficient to define

00:38:55.580 --> 00:38:58.280
the position and size of the views.

00:38:58.370 --> 00:39:01.760
And if you don't have that,
if you break that,

00:39:02.140 --> 00:39:04.190
you have ambiguous layout.

00:39:04.360 --> 00:39:06.890
Also,
you must make sure that the constraints

00:39:07.080 --> 00:39:09.100
do not conflict with each other.

00:39:09.100 --> 00:39:13.180
And if you break that rule,
you have unsatisfiable constraints.

00:39:13.230 --> 00:39:16.640
So that's what I'm going
to demonstrate to you next,

00:39:16.850 --> 00:39:19.870
ambiguous layout and
unsatisfiable constraints.

00:39:21.810 --> 00:39:22.690
All right.

00:39:22.690 --> 00:39:23.930
So here we are.

00:39:23.990 --> 00:39:25.500
Back in our view.

00:39:25.500 --> 00:39:28.870
And now let's say I want to
add to that container view a

00:39:28.920 --> 00:39:31.060
couple of buttons up at the top.

00:39:31.130 --> 00:39:34.520
A cancel button and an accept button,
how about.

00:39:34.520 --> 00:39:35.140
All right?

00:39:35.140 --> 00:39:40.680
So I have some code to add it
in View Did Load to create my

00:39:40.680 --> 00:39:44.300
buttons and add them as subviews.

00:39:44.330 --> 00:39:46.020
And then I say, okay,
I'm going to use that

00:39:46.020 --> 00:39:48.260
visual format language,
because it's cool and it

00:39:48.260 --> 00:39:49.630
will save me a lot of typing.

00:39:49.630 --> 00:39:53.230
Plus when I come back later,
I'll be able to read what I did.

00:39:53.230 --> 00:39:58.300
And the views I'm interested in are the
cancel button and the accept button.

00:39:58.300 --> 00:40:01.520
So I'm going to use the
NSDictionary of variable bindings

00:40:01.520 --> 00:40:04.080
macro to set up my views dictionary.

00:40:04.100 --> 00:40:06.340
And then I get my constraints.

00:40:07.340 --> 00:40:10.100
with constraints with visual format.

00:40:10.100 --> 00:40:14.500
And I remember that the super view of
the buttons is that switch the container,

00:40:14.580 --> 00:40:18.190
and this is why I left the
container where you could see it.

00:40:18.190 --> 00:40:22.990
It actually already has the margins
from the view controller view.

00:40:23.000 --> 00:40:25.540
So I don't want to double up the margins.

00:40:25.540 --> 00:40:31.640
So I have the cancel button flush
with the border of its super view.

00:40:31.640 --> 00:40:34.320
And same thing with the
accept button on the right.

00:40:34.320 --> 00:40:38.780
Then I decide I want the system-defined
distance between the two of them.

00:40:39.200 --> 00:40:41.360
And of course I want them
aligned all on the baseline.

00:40:41.360 --> 00:40:42.780
So I'm like, okay, that's good.

00:40:42.780 --> 00:40:45.820
I've defined my constraints.

00:40:45.840 --> 00:40:47.770
So I build and run.

00:40:50.200 --> 00:40:52.640
I get something that
doesn't look that good.

00:40:52.640 --> 00:40:54.580
It kind of looks wrong.

00:40:54.630 --> 00:40:58.900
The accept buttons have like
floated up to the top of the window.

00:40:59.150 --> 00:41:01.000
And it's definitely
not what I had in mind.

00:41:01.000 --> 00:41:02.360
I mean, after all,
there's subviews of this

00:41:02.360 --> 00:41:06.000
container view and ugh.

00:41:06.120 --> 00:41:08.980
At this point,
this is where you need to start thinking,

00:41:09.030 --> 00:41:11.990
do I have ambiguous layout?

00:41:12.360 --> 00:41:16.580
And this is such a simple example
that if you think about it,

00:41:16.580 --> 00:41:20.380
you might actually just be
able to solve this by thinking,

00:41:20.430 --> 00:41:24.130
but we're going to
pretend that you can't.

00:41:24.800 --> 00:41:28.100
Topkit has some great visualizing
aids for this that you'll hear more

00:41:28.100 --> 00:41:29.800
about in mastering Auto Layout.

00:41:29.890 --> 00:41:31.550
I'm not going to go into them here.

00:41:31.650 --> 00:41:34.430
Unfortunately,
not available at this time on iOS.

00:41:34.680 --> 00:41:37.800
However, we do have something you
can do in the debugger.

00:41:37.800 --> 00:41:40.200
It's rudimentary,
but it gets the job done.

00:41:40.250 --> 00:41:42.840
You can pause in the debugger.

00:41:44.940 --> 00:41:50.650
And you can send to the key window.

00:41:54.130 --> 00:41:57.980
Message under Auto Layout trace.

00:41:58.000 --> 00:42:04.490
All right, so you send this message,
you get a message

00:42:05.200 --> 00:42:08.070
You get an abbreviated view hierarchy.

00:42:08.100 --> 00:42:09.840
And look at this.

00:42:09.870 --> 00:42:12.100
Ambiguous layout here.

00:42:12.100 --> 00:42:14.200
My rounded rec button.

00:42:14.220 --> 00:42:15.400
Another ambiguous layout.

00:42:15.530 --> 00:42:15.790
All right.

00:42:15.950 --> 00:42:17.190
So it was as I suspected.

00:42:17.210 --> 00:42:18.540
I have ambiguous layout.

00:42:18.750 --> 00:42:23.230
And the reason the layout is ambiguous
is because I didn't say exactly where

00:42:23.230 --> 00:42:25.480
vertically I wanted those things,
you know?

00:42:25.480 --> 00:42:30.120
I just said I want them aligned
with each other vertically,

00:42:30.120 --> 00:42:33.380
but that's not quite
enough to get an answer.

00:42:33.380 --> 00:42:33.380
So...

00:42:34.020 --> 00:42:36.190
I go back to my code and I say,
all right,

00:42:36.200 --> 00:42:39.540
I need to vertically align something.

00:42:39.540 --> 00:42:46.150
So let's just vertically
specifically align the cancel button.

00:42:47.260 --> 00:42:49.090
And I only have to
align the cancel button,

00:42:49.110 --> 00:42:51.500
because remember,
the accept button is already aligned

00:42:51.500 --> 00:42:55.990
with the cancel button vertically
with the align all baseline.

00:42:56.130 --> 00:42:56.940
There we go.

00:42:56.940 --> 00:42:58.100
It's better.

00:42:58.740 --> 00:43:00.460
So it's enough to align
the cancel button.

00:43:00.460 --> 00:43:01.710
I just say I want the top.

00:43:01.800 --> 00:43:03.210
Remember, turn your head on the side.

00:43:03.230 --> 00:43:04.660
This is vertical.

00:43:04.660 --> 00:43:05.510
This is vertical.

00:43:05.840 --> 00:43:07.420
So that's the top.

00:43:07.660 --> 00:43:09.800
And I'm just using the
same views dictionary.

00:43:09.850 --> 00:43:14.050
Don't worry if the views dictionary
has a few extra views in it.

00:43:14.050 --> 00:43:16.680
You're fine just using the same one.

00:43:16.820 --> 00:43:20.040
So once I do that,
these buttons should have

00:43:20.110 --> 00:43:22.070
a position vertically.

00:43:22.490 --> 00:43:26.560
So I build and run, and sure enough,
I'm good.

00:43:26.610 --> 00:43:29.180
There it's set up where
I want vertically.

00:43:29.580 --> 00:43:33.940
But I don't actually want to walk away
from this layout with the cancel button

00:43:33.940 --> 00:43:37.940
all bigger than the accept button.

00:43:37.980 --> 00:43:40.730
And unfortunately, I wasn't able to quite
demonstrate this to you,

00:43:40.880 --> 00:43:46.240
but what could have happened here
is we could have the not always

00:43:46.240 --> 00:43:49.390
being the same one that's bigger.

00:43:50.140 --> 00:43:54.120
That's what happens with ambiguous layout
is you get sort of unpredictable results.

00:43:54.250 --> 00:43:56.250
Sometimes it will be always wrong in
the same way and then you're like,

00:43:56.340 --> 00:43:59.100
oh my God, and then I ran it and it was
wrong in a different way.

00:43:59.330 --> 00:44:02.940
Okay, that's a big cue that
you've got ambiguous layout.

00:44:03.120 --> 00:44:08.940
And the reason we have -- in fact, well,
I'll just show you in

00:44:08.940 --> 00:44:08.940
the debugger real quick,
too.

00:44:13.430 --> 00:44:16.050
Sure enough, layout's still ambiguous.

00:44:16.100 --> 00:44:21.000
And the reason we have ambiguous layout
is because the system couldn't quite

00:44:21.010 --> 00:44:25.240
satisfy having the boundaries of those
buttons pinned to the edge and having

00:44:25.240 --> 00:44:31.680
the fixed space be the Aqua distance and
fitting the button with its intrinsic

00:44:31.820 --> 00:44:33.580
content size that we mentioned.

00:44:33.610 --> 00:44:36.720
So it had to stretch one of the buttons,
but it couldn't really

00:44:36.720 --> 00:44:38.230
pick which one to stretch.

00:44:38.320 --> 00:44:39.430
You're like, well,
but I don't want you to

00:44:39.590 --> 00:44:40.490
stretch it in this situation.

00:44:40.560 --> 00:44:43.190
Obviously, you should just be
splitting the difference.

00:44:44.300 --> 00:44:47.510
Well, yeah, but it's not so obvious,
so you actually have to do that yourself.

00:44:48.350 --> 00:44:48.910
All right.

00:44:51.040 --> 00:44:56.390
So the way we do that, a nice,
easy-- there are many ways,

00:44:56.510 --> 00:44:58.550
but the way I'm going to
do it is I'm going to say,

00:44:58.550 --> 00:45:01.150
well, actually,
I want the accept button width to

00:45:01.210 --> 00:45:04.210
be equal to the cancel button width.

00:45:04.420 --> 00:45:07.370
And I'm going to spell
cancel button correctly,

00:45:07.370 --> 00:45:09.300
or else I'm going to
demonstrate something else.

00:45:09.440 --> 00:45:13.570
All right, no,
I think I spelled it correctly.

00:45:14.200 --> 00:45:19.060
And yes, so this is much better

00:45:19.580 --> 00:45:23.240
That's a lot more kind of an
acceptable sort of layout behavior.

00:45:23.260 --> 00:45:29.670
And if I pause and look
at the Auto Layout trace,

00:45:31.760 --> 00:45:32.700
We're good.

00:45:32.700 --> 00:45:38.220
We're no longer ambiguous.

00:45:38.220 --> 00:45:38.220
So, yeah.

00:45:44.100 --> 00:45:46.730
So the problems are a little subtle
when you have ambiguous layouts,

00:45:46.730 --> 00:45:49.600
which is why I spent a
little more time on this.

00:45:49.850 --> 00:45:51.740
Because when you have
unsatisfiable constraints,

00:45:51.770 --> 00:45:54.040
the system actually
kind of squawks at you.

00:45:54.040 --> 00:45:56.200
So I'll just stick in an
unsatisfiable constraint here

00:45:56.200 --> 00:45:58.700
real quick to show you that.

00:45:58.700 --> 00:46:01.900
So one good way that you end up
with unsatisfiable constraints is

00:46:01.930 --> 00:46:04.580
you kind of forgot what you did and
you come back later and you say,

00:46:04.580 --> 00:46:06.620
oh, I want this other constraint, okay?

00:46:06.670 --> 00:46:09.950
And so let's say I forgot what
I did and I want the cancel

00:46:09.950 --> 00:46:14.040
button to be 130 points wide,
so I just put in this

00:46:14.040 --> 00:46:18.910
hard-coded width on it,
and at this point I build and run.

00:46:19.640 --> 00:46:24.460
and you may have noticed a
complaint right away in the logs.

00:46:24.480 --> 00:46:26.480
One of the constraints that
we had established before,

00:46:26.480 --> 00:46:29.980
which was required,
it was required but it's

00:46:29.980 --> 00:46:33.600
broken and that's that distance
between the two buttons.

00:46:33.600 --> 00:46:39.560
So down here, if I had my breakpoints on,
I would have hit a breakpoint too.

00:46:39.560 --> 00:46:39.560
So,

00:46:40.080 --> 00:46:44.000
You get a big debugger spew,
and don't be afraid of it.

00:46:44.180 --> 00:46:47.940
Go to mastering Auto Layout,
and you'll learn about

00:46:47.940 --> 00:46:49.300
reading through that spew.

00:46:49.460 --> 00:46:52.730
But the important thing here is this.

00:46:53.300 --> 00:46:58.200
I have created unsatisfiable constraints.

00:46:58.200 --> 00:47:02.600
So that's what's going to
happen to you if you do that.

00:47:02.890 --> 00:47:08.690
And I'll just remove that
because it's ungainly.

00:47:08.740 --> 00:47:13.180
And then we're back to
the world that we like.

00:47:13.600 --> 00:47:16.060
All right.

00:47:16.060 --> 00:47:17.140
Okay.

00:47:17.140 --> 00:47:21.090
And I want that button.

00:47:21.100 --> 00:47:21.100
All right.

00:47:24.390 --> 00:47:28.940
So now that I've pointed out
the things that can go wrong,

00:47:29.010 --> 00:47:31.710
you're pretty much ready to go,
except for one thing.

00:47:31.750 --> 00:47:36.570
There's some compatibility issue that
I need to make sure you all know about.

00:47:37.100 --> 00:47:37.500
Everybody.

00:47:37.500 --> 00:47:40.300
What is it you need to
know about compatibility?

00:47:40.300 --> 00:47:42.660
You're ready to convert to Auto Layout.

00:47:42.660 --> 00:47:43.390
What do you care?

00:47:43.600 --> 00:47:44.700
Well, first of all, great.

00:47:44.700 --> 00:47:46.900
I'm glad you're ready to
convert to Auto Layout.

00:47:46.900 --> 00:47:51.550
Please attend both sessions on Thursday,
Mastering Auto Layout and

00:47:51.580 --> 00:47:54.280
Auto Layout by Example.

00:47:54.300 --> 00:47:57.980
Lots of great help for
doing the conversion.

00:47:58.160 --> 00:48:02.280
However, you will have to know about this
compatibility issue because it

00:48:02.280 --> 00:48:05.890
will affect something you do
when you create your constraints.

00:48:07.800 --> 00:48:09.800
Well, maybe you're not ready to convert.

00:48:09.800 --> 00:48:10.800
You're not going to convert yet.

00:48:10.800 --> 00:48:12.140
You're just planning on it.

00:48:12.140 --> 00:48:17.910
Well, you'll be glad to know that none
of this system turns on until you,

00:48:17.910 --> 00:48:21.800
in your app,
add constraints and kick it off.

00:48:21.800 --> 00:48:26.610
But you still might want to
continue and get to know this thing.

00:48:27.660 --> 00:48:32.040
And what if you just want to use
Auto Layout in part of your application,

00:48:32.040 --> 00:48:35.840
or you have a new section that you
can want to use Auto Layout there,

00:48:35.840 --> 00:48:38.860
and you don't want to have
to worry about it elsewhere?

00:48:39.760 --> 00:48:42.140
Well,
this is what the compatibility is for.

00:48:42.140 --> 00:48:45.250
The compatibility is for being
able to use Auto Layout in

00:48:45.250 --> 00:48:51.170
part of your application,
and that's what you need to know about.

00:48:51.270 --> 00:48:55.630
So, let's say you have some general
UI layout where you have a large

00:48:55.630 --> 00:48:59.800
view that has a flexible width and
flexible height auto-resizing mask,

00:48:59.940 --> 00:49:03.340
and then you have on the left a tall,
narrow view that has a flexible height,

00:49:03.340 --> 00:49:06.410
and you have a little view in the
upper left that isn't flexible at all.

00:49:06.420 --> 00:49:10.390
And into this happy world,
you introduce some views that you're

00:49:10.450 --> 00:49:11.420
going to layout with constraints.

00:49:11.520 --> 00:49:15.480
Well, yep, the Auto Layout system
now gets turned on.

00:49:17.490 --> 00:49:22.400
So what happens to all those views
that you didn't apply constraints to?

00:49:22.830 --> 00:49:26.810
Well, I said that every view has to
have constraints sufficient to,

00:49:26.810 --> 00:49:31.960
you know, define its position and size,
don't we have ambiguous layout?

00:49:31.960 --> 00:49:33.900
And the answer is no.

00:49:33.900 --> 00:49:39.580
We have a property called translates
auto-resizing mask into constraints.

00:49:39.830 --> 00:49:42.510
And this property is on NSVU and UI view.

00:49:42.910 --> 00:49:44.780
This property is on by default.

00:49:44.780 --> 00:49:48.600
So you add constraints,
Auto Layout gets turned on,

00:49:48.670 --> 00:49:53.930
and all your views which don't have
constraints now get system defined

00:49:53.930 --> 00:49:58.760
constraints to keep them behaving as if
they had their old auto-resizing mask.

00:49:58.760 --> 00:50:01.260
Remember,
everything you can do with springs and

00:50:01.260 --> 00:50:05.840
struts you can do with constraints,
so this is how we can do this.

00:50:05.840 --> 00:50:07.510
There's one more subtlety.

00:50:07.510 --> 00:50:13.200
You might have noticed that two of
these views have auto-resizing masks,

00:50:13.200 --> 00:50:13.200
and

00:50:13.650 --> 00:50:16.420
But one of them doesn't.

00:50:16.680 --> 00:50:19.360
What happened to that view, right?

00:50:19.770 --> 00:50:24.180
Well, the truth is, even if your view has
auto resizing mask none,

00:50:24.180 --> 00:50:26.600
none doesn't really mean none.

00:50:26.600 --> 00:50:34.310
There is actually an
implicit auto resizing mask,

00:50:34.310 --> 00:50:35.870
which is fixed left margin, fixed width,

00:50:36.000 --> 00:50:55.900
[Transcript missing]

00:50:58.260 --> 00:50:59.750
This is where it comes in.

00:50:59.980 --> 00:51:03.500
Those views that you're
setting up with constraints,

00:51:03.550 --> 00:51:06.070
they have to turn this off.

00:51:06.400 --> 00:51:08.520
Because, you know,
if you're trying to position

00:51:08.520 --> 00:51:11.060
it with constraints,
you don't want system auto resizing

00:51:11.060 --> 00:51:14.220
mass constraints getting in there
and fighting with your constraints.

00:51:14.300 --> 00:51:19.010
So you have to turn this off unless,
of course, you set up your constraints

00:51:19.010 --> 00:51:21.800
interface builder,
because interface builder takes care of

00:51:21.800 --> 00:51:23.300
making sure this property is correct.

00:51:23.300 --> 00:51:26.450
And, you know,
if you were quick and paying attention,

00:51:26.450 --> 00:51:29.300
because I did, you know,
try to slide it past you,

00:51:29.300 --> 00:51:33.300
in my code examples, all those views that
I set up in constraints,

00:51:33.300 --> 00:51:38.290
I did send this message to to make
sure that the demos would work.

00:51:39.840 --> 00:51:45.200
All right, so taken together,
this should be enough to get you going

00:51:45.200 --> 00:51:47.530
to start playing around with Auto Layout.

00:51:47.600 --> 00:51:50.780
I showed you how to set up
constraint based layout,

00:51:50.990 --> 00:51:52.620
both in IB and in code.

00:51:52.620 --> 00:51:58.400
I told you -- gave you an idea of what's
going on behind the scenes in layout.

00:51:58.400 --> 00:52:04.470
I showed you the visual format language
so you can set up your constraints

00:52:04.470 --> 00:52:08.200
in a more readable fashion in code.

00:52:08.200 --> 00:52:12.420
We talked about two important
things that can go wrong.

00:52:12.420 --> 00:52:13.940
And we talked about compatibility.

00:52:15.930 --> 00:52:19.800
So in summary,
remember you have the elementary API.

00:52:19.840 --> 00:52:23.790
This is great for when you're
learning what's happening.

00:52:24.880 --> 00:52:32.600
And, you know, also when you need it,
we have the visual format language.

00:52:32.880 --> 00:52:38.510
and we have interface builder
which gives you the most readable

00:52:38.650 --> 00:52:44.360
situation that you can possibly
have and it's incredibly useful.

00:52:44.630 --> 00:52:50.590
So don't forget that interface
builder gives you some power.

00:52:50.740 --> 00:52:52.600
Our related sessions.

00:52:52.650 --> 00:52:55.940
Be sure to attend the
other Auto Layout sessions.

00:52:55.990 --> 00:53:00.460
Best Practices for Mastering
Auto Layout and Auto Layout by Example.

00:53:00.490 --> 00:53:01.040
Those are great.

00:53:01.130 --> 00:53:03.990
They'll really fill in a lot
of details that I left out.

00:53:04.100 --> 00:53:10.880
Also, for those of you on iOS,
the evolution of view controllers on iOS,

00:53:10.880 --> 00:53:16.490
he has some examples of some
specific view controller related

00:53:16.490 --> 00:53:16.490
Auto Layout that I didn't mention here.

00:53:17.330 --> 00:53:20.550
For more information,
please contact Jake Behrens,

00:53:20.650 --> 00:53:22.560
our frameworks evangelist.

00:53:22.560 --> 00:53:24.100
The docs are terrific.

00:53:24.390 --> 00:53:27.710
Don't forget to refer to them
when you forget what I said.

00:53:27.960 --> 00:53:32.050
Last year's keynote on
Cocoa Auto Layout is largely

00:53:32.120 --> 00:53:35.040
still applicable on iOS as well.

00:53:35.080 --> 00:53:38.370
If you're interested in how we
actually arrive at the solution

00:53:38.440 --> 00:53:42.090
given these constraints,
you might be interested in the

00:53:42.700 --> 00:53:46.360
arithmetic constraint solving
algorithm that's published at the

00:53:46.360 --> 00:53:49.440
University of Washington CS website.

00:53:49.490 --> 00:53:52.680
If you like linear algebra,
I highly recommend this paper.

00:53:52.680 --> 00:53:56.750
And following along with paper and
pencil and working out the examples,

00:53:56.810 --> 00:53:58.450
it's pretty interesting.

00:53:58.640 --> 00:54:01.800
And of course,
there's the Apple developer forums.