WEBVTT

00:00:11.860 --> 00:00:15.840
Welcome to Thursday afternoon at WWDC.

00:00:15.960 --> 00:00:17.140
My name's Vicki Murley.

00:00:17.140 --> 00:00:20.030
I'm the Safari Technologies Evangelist
at Apple,

00:00:20.050 --> 00:00:23.940
and this is session 604,
Advanced Effects with

00:00:23.940 --> 00:00:26.580
HTML5 Media Technologies.

00:00:27.810 --> 00:00:32.600
So if you're here for a session
on advanced media topics,

00:00:32.600 --> 00:00:35.820
you're probably already familiar
with the audio and video elements.

00:00:35.820 --> 00:00:39.400
These have been around
for quite a while now.

00:00:39.400 --> 00:00:44.980
They were actually part of the very first
public draft of the HTML5 specification.

00:00:44.980 --> 00:00:50.600
They were two elements that were,
at the time, radically different than the

00:00:50.880 --> 00:00:56.560
headers and paragraphs that people
were accustomed to seeing in HTML.

00:00:56.560 --> 00:01:00.480
This early definition of how
these elements should behave

00:01:00.540 --> 00:01:02.450
had kind of a domino effect.

00:01:02.560 --> 00:01:06.580
The first thing that happened
was that browser implementers,

00:01:06.890 --> 00:01:09.480
like the people at
Apple who work on Safari,

00:01:09.500 --> 00:01:14.030
were able to add support for these
elements to their web browsers.

00:01:14.040 --> 00:01:18.250
So Safari was the first browser
to support the audio and video

00:01:18.250 --> 00:01:22.090
element way back in 2007,
five years ago.

00:01:23.010 --> 00:01:26.620
The next kind of line in the domino
effect was that since so many

00:01:26.750 --> 00:01:32.230
browsers were adopting these elements,
websites were able to adopt them without

00:01:32.230 --> 00:01:35.480
a whole lot of compatibility worries.

00:01:35.480 --> 00:01:40.110
So if you've watched video on
the web in the last couple years,

00:01:40.190 --> 00:01:44.360
you've probably been using
an HTML5 media player.

00:01:44.360 --> 00:01:48.160
Vimeo is a great site
that has an HTML5 player.

00:01:48.160 --> 00:01:52.020
On Apple.com,
we actually show all of our videos.

00:01:52.490 --> 00:01:54.220
That looks like a built-in
system controller,

00:01:54.220 --> 00:01:56.880
but it's actually built
purely with HTML5.

00:01:56.880 --> 00:02:00.570
And, of course,
these elements have been essential

00:02:00.570 --> 00:02:05.540
because they let us watch video and
listen to audio in web pages on iOS,

00:02:05.540 --> 00:02:08.760
which is a platform that doesn't
support internet plugins.

00:02:11.380 --> 00:02:18.540
So today I'm here to talk to you about
some new technologies for HTML5 media,

00:02:18.640 --> 00:02:21.960
new in Safari 6 and new on iOS 6.

00:02:21.960 --> 00:02:26.470
If you've been using the HTML5
audio and video elements,

00:02:26.470 --> 00:02:31.260
there may have been times where
you were trying to add a specific

00:02:31.260 --> 00:02:36.680
feature or achieve a certain effect
and you have been frustrated.

00:02:37.910 --> 00:02:41.480
So today I'm going to talk to you
about technologies that solve some of

00:02:41.580 --> 00:02:46.970
these common problems and hopefully
also inspire you to come up with some

00:02:46.970 --> 00:02:50.430
great new interfaces on your websites.

00:02:50.480 --> 00:02:55.000
So I'm going to teach you how
to do three things today as far

00:02:55.000 --> 00:02:58.040
as media integration with HTML5.

00:02:59.560 --> 00:03:02.620
First,
I'm going to show you how to synchronize

00:03:02.620 --> 00:03:08.580
multiple media elements with some
new API that's available in Safari 6.

00:03:09.290 --> 00:03:13.640
Next, I'm going to show you how to
implement full screen interfaces.

00:03:13.660 --> 00:03:17.150
If you've ever wanted to overlay your
own custom controls for your video

00:03:17.150 --> 00:03:20.300
player and haven't been able to,
you're going to be really

00:03:20.300 --> 00:03:22.190
interested in this topic.

00:03:22.710 --> 00:03:25.680
And finally,
I'm going to tell you how you can

00:03:25.680 --> 00:03:28.940
augment your user interface with audio.

00:03:28.980 --> 00:03:32.600
In this section, I'm going to cover the
basics of the Web Audio API,

00:03:32.810 --> 00:03:37.060
which is now available in Safari 6
on Lion and Mountain Lion,

00:03:37.160 --> 00:03:39.280
and in Safari on iOS 6 as well.

00:03:39.300 --> 00:03:45.860
So let's get started talking about
synchronizing multiple media elements.

00:03:47.110 --> 00:03:50.140
There are lots of times when you
might want to have two pieces of

00:03:50.150 --> 00:03:53.710
media on your website in perfect sync.

00:03:53.810 --> 00:03:56.210
Believe it or not,
I created this mockup without

00:03:56.210 --> 00:03:57.540
any design help whatsoever.

00:03:57.540 --> 00:03:58.960
It's pretty amazing.

00:03:58.960 --> 00:04:03.420
But as you can see, I have a video on
either side of the page,

00:04:03.420 --> 00:04:07.160
and I have these sharks kind of
swimming from one side to another,

00:04:07.160 --> 00:04:11.450
and the waves of the water are, you know,
they have a cohesive effect.

00:04:11.520 --> 00:04:15.190
You may have seen other video
effects like this in websites where

00:04:15.330 --> 00:04:19.290
there's a video across the top of
the page and on one side of the page,

00:04:19.290 --> 00:04:22.940
and something is traveling
down from one video to another.

00:04:23.700 --> 00:04:25.810
In order to achieve
these types of effects,

00:04:25.810 --> 00:04:28.120
you have to keep those
videos in perfect sync.

00:04:28.120 --> 00:04:33.460
So, decoration is one instance where
I would need this technology.

00:04:33.750 --> 00:04:37.760
Another is if you want to add
a sign language video track

00:04:37.950 --> 00:04:39.680
to the media on your site.

00:04:39.680 --> 00:04:42.720
There's this guy,
his name is Stephen Torrance, and he does

00:04:42.720 --> 00:04:46.600
American Sign Language interpretations
of popular songs.

00:04:46.600 --> 00:04:49.360
I found him on YouTube and
then I was really surprised to

00:04:49.360 --> 00:04:51.530
learn that he works at Apple,
actually.

00:04:51.620 --> 00:04:55.180
But if you wanted to synchronize
one of his sign language

00:04:55.210 --> 00:04:59.830
interpretations with your own media,
you'd need this technology.

00:05:00.260 --> 00:05:04.680
If you want to compare two
like things on your website,

00:05:04.920 --> 00:05:07.680
maybe we have a snowboarder,
a snowboarding competition,

00:05:07.680 --> 00:05:12.800
and we want to compare the performance
of two different snowboarders

00:05:12.890 --> 00:05:14.440
coming off of the same jump.

00:05:14.520 --> 00:05:17.230
Or maybe we want to compare
two baseball swings,

00:05:17.230 --> 00:05:20.660
or two soccer kicks,
or two models walking down a runway.

00:05:20.660 --> 00:05:25.080
Comparing two like elements in real time,
you would need to keep these

00:05:25.080 --> 00:05:26.790
pieces of video in sync.

00:05:27.660 --> 00:05:31.420
Finally, you might have a piece
of video on your site,

00:05:31.580 --> 00:05:35.250
and you want to substitute
an alternate audio track,

00:05:35.260 --> 00:05:37.320
like in this case.

00:05:37.450 --> 00:05:42.370
Hi, I'm Vicki Murley from the
Software Evangelism team at Apple.

00:05:45.500 --> 00:05:48.580
Sounded a little different when
I recorded it in the studio,

00:05:48.600 --> 00:05:52.520
but thanks to Alan Schaffer
for the voice talent here.

00:05:52.520 --> 00:05:55.190
But this is one kind of, you know,
funny example,

00:05:55.190 --> 00:05:58.110
but there are plenty of other
times where you'd want to do

00:05:58.110 --> 00:05:59.960
this for practical purposes.

00:06:01.020 --> 00:06:02.400
So how do we do this?

00:06:02.400 --> 00:06:07.500
If you've tried to do this in the past,
you may have thought, okay, well,

00:06:07.500 --> 00:06:10.700
I'm going to fetch all of
the videos on the page,

00:06:10.700 --> 00:06:13.740
put them into an array,
cycle through them,

00:06:13.740 --> 00:06:16.170
and just call play on all of them.

00:06:16.180 --> 00:06:20.270
And maybe JavaScript, it's super fast,
maybe this will be able

00:06:20.270 --> 00:06:21.970
to keep them all in sync.

00:06:22.030 --> 00:06:24.400
That's not actually
what is going to happen.

00:06:24.400 --> 00:06:27.130
They're always going to be
a little bit out of sync.

00:06:27.180 --> 00:06:30.150
Even if you're doing
something fancier than this,

00:06:30.280 --> 00:06:30.620
like trying to do a little bit
of a play on all of the videos,

00:06:30.620 --> 00:06:31.000
you're going to have to do a little
bit of a play on all of the videos.

00:06:31.000 --> 00:06:34.140
And then trying to start them all once
they hit at the one second mark and then

00:06:34.140 --> 00:06:35.880
keep them in sync as they're playing.

00:06:35.880 --> 00:06:37.760
It's really difficult to do.

00:06:37.760 --> 00:06:40.560
Script execution is always
going to take a finite and

00:06:40.670 --> 00:06:44.340
unpredictable amount of time,
even if that time is really small.

00:06:44.340 --> 00:06:49.220
And it's not as if media playback
is blocked by script execution.

00:06:52.700 --> 00:06:55.900
So we really need, oh,
and that's just playing the media.

00:06:56.020 --> 00:06:58.670
When we start to think about
some of the other issues that

00:06:58.670 --> 00:07:01.650
come into play with media,
it becomes obvious that this is

00:07:01.650 --> 00:07:04.120
really difficult to do on your own.

00:07:04.150 --> 00:07:07.770
How do you determine when all of
the videos have enough data buffered

00:07:07.770 --> 00:07:09.580
to play them all the way through?

00:07:09.910 --> 00:07:13.690
If you wanted to change the playback
rate to do like a slow motion effect

00:07:13.780 --> 00:07:17.030
or fast forward through the video,
how would you do that on several

00:07:17.030 --> 00:07:19.970
videos at exactly the same time?

00:07:20.170 --> 00:07:21.730
What if one video stalls?

00:07:21.860 --> 00:07:24.440
You'd have to somehow detect
that stall and then pause all

00:07:24.440 --> 00:07:26.170
the other videos and then,
again,

00:07:26.170 --> 00:07:28.780
start playing them at all the same time.

00:07:28.890 --> 00:07:30.690
This is really difficult.

00:07:30.990 --> 00:07:33.300
Lucky for you, if you're trying to do
something like this,

00:07:33.450 --> 00:07:38.820
there is a new feature in HTML5 and
new in Safari 6.0 available on Lion and

00:07:38.820 --> 00:07:41.740
Mountain Lion called Media Controllers.

00:07:41.780 --> 00:07:47.930
So Media Controllers basically let you
slave any number of media elements,

00:07:47.930 --> 00:07:53.120
for example, four pieces of video,
to a single controller.

00:07:53.890 --> 00:07:56.160
And then when I call
play on the controller,

00:07:56.160 --> 00:07:58.400
all of the pieces of video start to play.

00:07:58.400 --> 00:08:02.270
When I call pause on the controller,
they're all paused.

00:08:04.340 --> 00:08:08.970
Play and pause are probably two functions
that are really familiar to you if you've

00:08:09.040 --> 00:08:10.640
been using the audio and video elements.

00:08:10.670 --> 00:08:13.740
And in fact,
a media controller has all of the

00:08:13.740 --> 00:08:18.510
same API that you're used to using
for the audio and video elements.

00:08:18.580 --> 00:08:21.430
So the play, pause,
and can play type functions,

00:08:21.430 --> 00:08:23.770
all of the attributes
that you're used to,

00:08:23.890 --> 00:08:26.560
like current time, duration, ended, etc.

00:08:26.560 --> 00:08:29.900
All of the events that you're
used to listening for if you've

00:08:29.980 --> 00:08:32.140
ever made an HTML5 media player.

00:08:32.680 --> 00:08:36.150
The only two attributes that
are not supported for media

00:08:36.170 --> 00:08:38.620
controllers are loop and autoplay.

00:08:38.620 --> 00:08:42.260
So how do we set up one of
these media controllers?

00:08:42.260 --> 00:08:46.650
Well, if I wanted to synchronize one of
Stephen Torrance's sign language

00:08:46.650 --> 00:08:50.670
tracks to this Bohemian Rhapsody video,
the first thing I would do is

00:08:50.830 --> 00:08:54.270
set the media group attribute on
all of the elements that I want

00:08:54.500 --> 00:08:56.230
to slave to one controller.

00:08:56.230 --> 00:08:59.380
And that is going to
look something like this.

00:08:59.380 --> 00:09:01.840
Here are my two video tags.

00:09:02.790 --> 00:09:07.090
And I'm just going to add the media group
attribute and set them to the same value,

00:09:07.090 --> 00:09:08.820
which is video controller.

00:09:08.820 --> 00:09:13.030
By putting this HTML,
I've just created a media

00:09:13.030 --> 00:09:15.450
controller implicitly.

00:09:15.610 --> 00:09:17.700
That's all you have to do.

00:09:18.630 --> 00:09:22.300
Once I've declared the media controller,
to access that controller,

00:09:22.300 --> 00:09:24.940
I can get the controller on
any of the slaved elements,

00:09:25.040 --> 00:09:28.050
and that will give me the controller
that's common to all of them.

00:09:28.060 --> 00:09:31.040
So here,
I've just used getElementsByTagName to

00:09:31.040 --> 00:09:33.660
get the first piece of video on the page.

00:09:33.660 --> 00:09:35.460
I could have also used querySelector.

00:09:35.460 --> 00:09:38.140
I get the controller
object on that video,

00:09:38.140 --> 00:09:41.160
and then I can just call
the play and pause methods

00:09:41.250 --> 00:09:43.360
directly on that controller.

00:09:43.360 --> 00:09:46.190
And as I said before,
doing so will play and pause all

00:09:46.190 --> 00:09:48.000
of the slaved pieces of media.

00:09:50.820 --> 00:09:53.940
In JavaScript, it's similarly simple.

00:09:53.940 --> 00:09:57.000
Maybe you have some kind of
dynamic effect and you want to

00:09:57.020 --> 00:10:01.580
start playing two pieces of media
at the same time on the fly.

00:10:01.580 --> 00:10:06.900
You can create a media controller object
just by calling new media controller.

00:10:06.900 --> 00:10:13.610
Set that controller object to the
controller on any media element.

00:10:14.410 --> 00:10:19.100
And then again, just control that media,
all those slave pieces of media,

00:10:19.100 --> 00:10:19.900
through the controller.

00:10:19.900 --> 00:10:23.960
So here I'm calling play
and pause on the controller.

00:10:25.710 --> 00:10:29.390
So to show us how this works,
synchronizing video playback

00:10:29.460 --> 00:10:31.900
with media controllers,
I'd like to invite Beth Dakin

00:10:31.920 --> 00:10:33.240
to join me on stage.

00:10:33.240 --> 00:10:38.480
So I was inspired to create this
demo by this beautiful video.

00:10:38.480 --> 00:10:42.580
This is a video created by a
photographer named Joe Capra.

00:10:42.580 --> 00:10:45.530
He went to Iceland during
the time of year when the sun

00:10:45.530 --> 00:10:48.600
doesn't set for a bunch of days,
and he took all of these

00:10:48.600 --> 00:10:52.360
photographs and then made this
beautiful stop motion video.

00:10:52.360 --> 00:10:55.130
So this is his webpage
where he has the video,

00:10:55.130 --> 00:10:59.460
and I made my own little mock-up of
it for the purposes of this demo.

00:10:59.460 --> 00:11:06.000
Okay, so I wanted to create a really
cool tile effect with this video.

00:11:06.000 --> 00:11:10.190
So in your slides, you were showing how
to sync up two videos,

00:11:10.190 --> 00:11:13.900
but for this demo,
I wanted to sync up four videos.

00:11:13.900 --> 00:11:14.950
Whoa, wow.

00:11:15.220 --> 00:11:20.800
So you're telling me you're about
to sync four videos on this webpage.

00:11:20.800 --> 00:11:21.140
Oh yeah.

00:11:21.140 --> 00:11:21.920
Oh my gosh.

00:11:21.920 --> 00:11:22.300
This is happening.

00:11:22.360 --> 00:11:23.260
I'm really excited.

00:11:23.260 --> 00:11:24.440
It's going to be awesome.

00:11:24.440 --> 00:11:25.350
Oh my gosh.

00:11:25.360 --> 00:11:25.740
Okay.

00:11:25.740 --> 00:11:28.600
And then you're going to do
some cool effects with it?

00:11:28.600 --> 00:11:28.760
Yeah.

00:11:28.760 --> 00:11:29.540
I can't wait.

00:11:29.560 --> 00:11:29.800
Okay.

00:11:29.800 --> 00:11:30.420
I'm so excited.

00:11:30.420 --> 00:11:34.490
So this looks like one
video here in my page,

00:11:34.490 --> 00:11:37.020
but it's actually four.

00:11:37.020 --> 00:11:40.290
So I have four different video elements,
each in its own div.

00:11:40.350 --> 00:11:43.200
I have a different version where
I put a border around the div,

00:11:43.210 --> 00:11:44.460
just so you can see that.

00:11:44.580 --> 00:11:49.330
So I have four divs here,
and they each are clipping out a portion

00:11:49.350 --> 00:11:52.260
of the video using overflow hidden.

00:11:52.360 --> 00:11:55.930
And then they have the video element
positioned correctly so that they'll

00:11:56.020 --> 00:11:57.760
all line up as if it were one video.

00:11:57.760 --> 00:11:58.360
I see.

00:11:58.360 --> 00:12:02.360
And so since it's lined up
as if it was a single video,

00:12:02.360 --> 00:12:04.990
I want everything to be in sync.

00:12:05.060 --> 00:12:05.630
I see.

00:12:05.750 --> 00:12:09.190
So let's take a look at the code
because what I have going on right

00:12:09.190 --> 00:12:11.120
now is not really doing that.

00:12:11.120 --> 00:12:12.350
Okay.

00:12:12.470 --> 00:12:16.980
So this is what I was trying to do,
where I was getting all of the

00:12:16.980 --> 00:12:20.220
videos and looping through and
trying to tell each video to play.

00:12:20.220 --> 00:12:23.390
And as you were just
telling us in your slides,

00:12:23.390 --> 00:12:25.390
this does not really work.

00:12:25.420 --> 00:12:26.490
No, it does not.

00:12:26.610 --> 00:12:29.290
It's not possible to keep
everything in sync all the time.

00:12:29.400 --> 00:12:31.090
This is just very inconsistent.

00:12:33.200 --> 00:12:34.560
So I want to use a media controller.

00:12:34.560 --> 00:12:36.490
So this is my HTML file.

00:12:36.490 --> 00:12:40.590
I have my four videos here,
each in their own div.

00:12:40.590 --> 00:12:45.510
And I'm just going to add an
attribute to each of these files.

00:12:45.530 --> 00:12:49.330
So I'm going to add each of the videos.

00:12:49.330 --> 00:12:54.420
So I just want to add this
attribute in each of these places.

00:12:54.420 --> 00:12:57.270
So I'm going to give
them all the same value,

00:12:57.270 --> 00:13:02.090
tile controller, because I want all four
videos to be slave files.

00:13:02.660 --> 00:13:02.850
So I want to use a media controller.

00:13:02.850 --> 00:13:03.160
So I'm going to add each of these files.

00:13:03.160 --> 00:13:22.460
So I'm going to add each of these files.

00:13:22.460 --> 00:13:23.690
So I'm going to add each of these files.

00:13:25.170 --> 00:13:30.980
So this version of the function just
starts by getting the video controller.

00:13:31.170 --> 00:13:33.940
And since all of the videos
have the same controller,

00:13:33.940 --> 00:13:37.100
I can just take any one of those
videos and get its controller,

00:13:37.100 --> 00:13:39.640
since that's the controller
for all of the videos.

00:13:39.750 --> 00:13:43.380
And then instead of telling a
video element to play or pause,

00:13:43.450 --> 00:13:46.800
I'm just going to tell the
controller to play or pause.

00:13:48.850 --> 00:13:50.320
I can't wait.

00:13:50.400 --> 00:13:50.800
I'm so excited.

00:13:50.800 --> 00:13:51.780
Should we check it out?

00:13:51.830 --> 00:13:52.800
Yes.

00:13:52.800 --> 00:13:53.790
Should we check it out?

00:13:53.800 --> 00:13:54.630
I'm really excited.

00:13:54.800 --> 00:13:55.800
All right.

00:13:55.930 --> 00:13:57.190
This is going to be awesome.

00:13:57.190 --> 00:13:58.140
So let's reload.

00:13:59.800 --> 00:14:01.990
Check it out!

00:14:01.990 --> 00:14:03.240
They're all in sync!

00:14:03.610 --> 00:14:10.040
It looks just like one piece
of video on a web page.

00:14:10.040 --> 00:14:11.080
Yeah, but they're all in sync.

00:14:11.080 --> 00:14:12.030
Isn't that awesome?

00:14:12.040 --> 00:14:12.980
Wait a second.

00:14:13.100 --> 00:14:17.190
I thought you said you were going
to show us some really cool tiling

00:14:17.190 --> 00:14:18.540
effects or something like that.

00:14:18.540 --> 00:14:20.540
Well, but this is really cool too.

00:14:20.540 --> 00:14:20.540
They're all in sync.

00:14:20.540 --> 00:14:22.540
Wait a minute there.

00:14:22.540 --> 00:14:24.530
I have to say,
I'm not going to lie to you,

00:14:24.540 --> 00:14:25.540
I'm a little disappointed right now.

00:14:25.540 --> 00:14:29.540
Alright, I'm just going to do two things.

00:14:29.540 --> 00:14:31.450
Okay, I'm ready.

00:14:31.540 --> 00:14:35.540
First, I'm going to click this button.

00:14:35.600 --> 00:14:37.540
And then I'm just going to type my name,
okay?

00:14:37.540 --> 00:14:39.520
Okay, I'm ready.

00:14:39.540 --> 00:14:44.020
B-E-T-R-I-N-G.

00:14:44.100 --> 00:15:00.700
[Transcript missing]

00:15:02.330 --> 00:15:03.010
Whoa.

00:15:03.310 --> 00:15:04.440
What's happening now?

00:15:04.440 --> 00:15:06.930
I'm going to press F now.

00:15:06.930 --> 00:15:08.720
You want to know what this is?

00:15:08.720 --> 00:15:09.620
What's happening here?

00:15:09.620 --> 00:15:10.190
All right.

00:15:10.340 --> 00:15:14.920
So here I'm using an awesome new
feature in Safari 6 called CSS Filters.

00:15:14.920 --> 00:15:19.590
And with just one line of CSS,
I can apply one of these really cool

00:15:19.590 --> 00:15:22.220
effects to each of these videos.

00:15:22.920 --> 00:15:26.090
And so here I'm just randomizing
the different filter effects.

00:15:26.110 --> 00:15:28.370
And as I click on them,
a different filter

00:15:28.370 --> 00:15:29.960
effect is being applied.

00:15:29.960 --> 00:15:32.640
And when I press F,
it's getting a new filter

00:15:32.640 --> 00:15:34.620
effect for all of the videos.

00:15:34.710 --> 00:15:35.170
Cool.

00:15:35.390 --> 00:15:38.720
So you get to apply a filter
with just one line of CSS,

00:15:38.750 --> 00:15:39.410
basically.

00:15:39.560 --> 00:15:40.000
Yes.

00:15:40.000 --> 00:15:40.640
That's it.

00:15:40.820 --> 00:15:42.710
Pretty cool.

00:15:42.710 --> 00:15:42.710
Awesome.

00:15:43.100 --> 00:15:47.800
So how did you get this to show
up and take over the whole screen?

00:15:47.800 --> 00:15:49.640
That's something I have
never seen before.

00:15:49.640 --> 00:15:51.040
So I'm glad you asked.

00:15:51.040 --> 00:15:54.280
I used another awesome
new API in Safari 6,

00:15:54.360 --> 00:15:58.160
a new JavaScript API for
taking any element full screen.

00:15:58.160 --> 00:16:01.790
So this is different than the
Safari full screen feature that

00:16:02.130 --> 00:16:05.930
shipped in Safari Online originally,
where I pressed that button

00:16:06.160 --> 00:16:09.620
up there to take the whole
Safari application full screen.

00:16:09.620 --> 00:16:14.200
That's like a Safari feature where all
of this is just built into the browser,

00:16:14.200 --> 00:16:15.800
same on every web page.

00:16:15.800 --> 00:16:20.040
Here I'm taking advantage of this
new JavaScript API where I'm fully

00:16:20.040 --> 00:16:24.780
controlling this full screen experience
and the look and behavior of it.

00:16:24.860 --> 00:16:29.580
So you may notice a few ways in
which I customize that experience.

00:16:29.620 --> 00:16:34.200
So obviously a few things
are pretty obvious.

00:16:34.310 --> 00:16:39.610
Like I have it so that the
video tiles split apart.

00:16:39.620 --> 00:16:43.130
And grow apart when you
go into full screen.

00:16:43.340 --> 00:16:47.070
And I also have it so that
the background color changes.

00:16:47.340 --> 00:16:49.840
And I had all these cool effects.

00:16:49.840 --> 00:16:54.200
These hot keys are hooked up to
different JavaScript functions to

00:16:54.200 --> 00:16:56.640
do these different things in CSS.

00:16:56.710 --> 00:16:58.580
And that's all only in full screen.

00:16:58.610 --> 00:17:03.330
So if I press those buttons normally
when we are not in full screen,

00:17:03.590 --> 00:17:05.420
then we would not see those cool effects.

00:17:05.490 --> 00:17:06.170
I see.

00:17:06.290 --> 00:17:08.730
And another thing is that you may
have seen all of those elements.

00:17:08.820 --> 00:17:09.520
I see.

00:17:09.520 --> 00:17:12.530
And the elements on the page are
flying off in different directions

00:17:12.670 --> 00:17:14.620
when we go in and out of full screen.

00:17:14.620 --> 00:17:16.950
And then they fly back on as well.

00:17:17.020 --> 00:17:20.040
So you're saying that that's
not the default behavior for

00:17:20.040 --> 00:17:22.640
the web page elements to fly
off in different directions?

00:17:22.640 --> 00:17:24.320
No, that's totally customized.

00:17:24.340 --> 00:17:25.140
Okay, great.

00:17:25.140 --> 00:17:26.100
Cool.

00:17:26.180 --> 00:17:26.840
That's awesome.

00:17:26.840 --> 00:17:27.330
Yeah.

00:17:27.480 --> 00:17:28.580
Well, thanks, Beth,
for showing that to us.

00:17:28.580 --> 00:17:30.580
Thank you.

00:17:35.330 --> 00:17:39.990
So Beth has conveniently brought
me to the second part of this talk,

00:17:40.030 --> 00:17:44.600
which is all about implementing
full screen interfaces.

00:17:45.000 --> 00:17:48.620
If you have been coming to
WWDC for a few years now,

00:17:48.620 --> 00:17:51.300
you probably saw Beth and
I on stage in 2010,

00:17:51.300 --> 00:17:53.880
where we showed you a demo
that looked like this.

00:17:53.960 --> 00:17:58.500
And in this demo,
we had our own custom controls.

00:17:58.500 --> 00:18:01.400
You can see a play button
and then a full screen button

00:18:01.480 --> 00:18:03.330
over on the right-hand side.

00:18:03.340 --> 00:18:06.600
But this full screen button
was using an older API,

00:18:06.600 --> 00:18:10.340
and that would just take the
video element full screen.

00:18:11.120 --> 00:18:13.820
And then when we were
in the full screen mode,

00:18:13.820 --> 00:18:17.600
our only option was to
overlay the default controls.

00:18:17.600 --> 00:18:18.900
That was the built-in behavior.

00:18:18.900 --> 00:18:20.300
It wasn't customizable.

00:18:20.300 --> 00:18:23.510
You couldn't show your own
custom controls in this view.

00:18:25.120 --> 00:18:29.860
So, as Beth said,
now there's a new JavaScript API which

00:18:29.860 --> 00:18:33.540
you can use to take any web
page element full screen.

00:18:33.540 --> 00:18:36.780
The element that has your video
and the controls inside of it.

00:18:36.820 --> 00:18:39.840
You can take a paragraph full
screen if you really wanted to.

00:18:39.840 --> 00:18:42.640
And it's really simple
and really powerful.

00:18:43.260 --> 00:18:47.670
It boils down to doing two things,
knowing how to enter and

00:18:47.670 --> 00:18:51.450
exit full screen mode,
and knowing how to define a

00:18:51.450 --> 00:18:56.470
custom or appearance or behavior
for the full screen element.

00:18:58.260 --> 00:19:01.860
So let's tackle the first part,
how to take any web page

00:19:01.860 --> 00:19:03.470
element full screen.

00:19:03.480 --> 00:19:05.660
It's actually really simple.

00:19:05.660 --> 00:19:08.890
All you have to do is fetch
that element and then request

00:19:09.020 --> 00:19:10.980
full screen on that element.

00:19:10.980 --> 00:19:14.130
So in our demo example,
the element that we wanted to

00:19:14.130 --> 00:19:18.350
take full screen was named main,
and so we just fetched that and called

00:19:18.350 --> 00:19:20.670
WebKit request full screen on it.

00:19:21.700 --> 00:19:25.070
I want to take a moment just to
mention that all of the API that

00:19:25.070 --> 00:19:28.350
I'm going to talk about right
now has the WebKit prefix on it

00:19:28.360 --> 00:19:32.470
because these APIs are still part
of a developing specification,

00:19:32.470 --> 00:19:35.240
which you can take a
closer look at at this URL.

00:19:35.240 --> 00:19:38.620
So when you call request
full screen on any element,

00:19:38.620 --> 00:19:43.520
it's going to take over the screen
from which the request was initiated.

00:19:43.520 --> 00:19:47.460
By that, I'm just referring to any
kind of dual monitor scenario.

00:19:47.460 --> 00:19:49.870
Like if you have Safari on
your leftmost monitor,

00:19:49.870 --> 00:19:51.510
it'll take over the leftmost.

00:19:51.700 --> 00:19:53.200
Screen, not both monitors.

00:19:53.200 --> 00:19:59.800
And it has to be triggered by an
explicit user action such as a click.

00:19:59.800 --> 00:20:04.200
You can't trigger full screen,
for example, from an onload handler.

00:20:04.200 --> 00:20:09.190
A mouse move event also does not
qualify as an explicit user action.

00:20:09.400 --> 00:20:12.400
Imagine going to a website and
having an advertisement come up

00:20:12.400 --> 00:20:15.960
and you move the mouse one pixel
and it takes over the full screen.

00:20:15.960 --> 00:20:17.730
You would not want that experience.

00:20:17.860 --> 00:20:21.700
One other reminder here is that case.

00:20:21.700 --> 00:20:24.140
Matters when you're calling
request full screen.

00:20:24.200 --> 00:20:25.640
It's a lowercase s here.

00:20:25.640 --> 00:20:29.470
I don't know how many times I've
mistyped and used an uppercase S,

00:20:29.470 --> 00:20:34.310
but make sure you use the lowercase
S because the specification has changed.

00:20:34.330 --> 00:20:36.560
And if you use an uppercase,
you're going to be using an

00:20:36.560 --> 00:20:37.750
older version of this API.

00:20:39.550 --> 00:20:43.160
That's how you enter full screen.

00:20:43.160 --> 00:20:46.280
Exiting full screen is
really just as simple.

00:20:46.280 --> 00:20:49.640
You just call exit full
screen on the document.

00:20:49.640 --> 00:20:53.940
This also requires an
explicit user action.

00:20:53.940 --> 00:20:57.660
But in this case,
that initial click to enter full screen

00:20:57.660 --> 00:21:02.730
mode might qualify as the action that
you can use to exit full screen mode.

00:21:02.760 --> 00:21:18.790
For example, if a user clicks a link,
you can set a timeout from that click.

00:21:18.790 --> 00:21:18.790
If a user clicks a link,
you can trigger full screen mode

00:21:18.790 --> 00:21:18.790
and in that same action set a
timeout to exit full screen mode

00:21:18.790 --> 00:21:18.790
after a certain amount of time.

00:21:18.930 --> 00:21:21.660
And again,
just like entering full screen,

00:21:21.820 --> 00:21:24.550
case matters for exit
full screen as well.

00:21:26.040 --> 00:21:32.140
So what about knowing when full
screen has been triggered and exited?

00:21:32.140 --> 00:21:36.200
There's actually a single
event listener for both events,

00:21:36.240 --> 00:21:38.640
and it's called full screen change.

00:21:40.980 --> 00:21:44.460
So I will just get the element
that I'm taking full screen.

00:21:44.460 --> 00:21:47.400
In our example,
that element has an ID of main,

00:21:47.400 --> 00:21:51.220
and I'm going to add an event listener,
the event listener for

00:21:51.220 --> 00:21:52.780
full screen change.

00:21:54.190 --> 00:21:57.480
And then when that happens,
I'm going to add my listener that

00:21:57.480 --> 00:22:01.530
listens for those key presses that
Beth was doing only in full screen mode,

00:22:01.540 --> 00:22:03.830
that worked only in full screen mode.

00:22:04.500 --> 00:22:08.180
We want to do this because we wouldn't
want those key handlers to be in action

00:22:08.180 --> 00:22:09.960
when we were in line in the page.

00:22:11.370 --> 00:22:14.920
If a user was entering a comment
on my blog or something like that,

00:22:14.920 --> 00:22:19.140
they would be pretty surprised if
video elements started moving around.

00:22:19.520 --> 00:22:23.800
So there's a single event for
both entering and exiting.

00:22:23.800 --> 00:22:28.610
The way you determine which direction
you're going is to look for a full

00:22:28.610 --> 00:22:31.200
screen element on the document.

00:22:31.200 --> 00:22:34.530
So if you have a full screen
element on the document,

00:22:34.530 --> 00:22:39.640
if document.webkit full screen element,
then you are entering full screen mode.

00:22:39.660 --> 00:22:42.090
So at that point,
I'm going to add my event listener

00:22:42.090 --> 00:22:43.680
to handle those key presses.

00:22:43.680 --> 00:22:47.930
And if you don't have that,
then you are exiting full screen mode.

00:22:48.240 --> 00:22:50.780
So in my example,
I then removed that event

00:22:50.830 --> 00:22:53.060
listener to handle key presses.

00:22:55.730 --> 00:23:10.600
As I mentioned, you can take any web
page element full screen.

00:23:10.630 --> 00:23:10.630
An image, a paragraph, a heading,
anything you like.

00:23:10.630 --> 00:23:10.630
You can even take the body
full screen if you wanted to.

00:23:10.800 --> 00:23:14.000
iFrames have a special behavior though.

00:23:14.140 --> 00:23:18.890
If you have an iFrame on your site,
you're often getting

00:23:18.890 --> 00:23:22.480
content from somewhere else,
some third party,

00:23:22.480 --> 00:23:25.020
and you don't necessarily
control that content that

00:23:25.070 --> 00:23:26.720
you're embedding on your page.

00:23:26.720 --> 00:23:31.630
So you might not want that
content to be able to take over

00:23:31.630 --> 00:23:34.470
the full screen on your page.

00:23:34.860 --> 00:23:39.280
If we take a closer look,
this one has a full screen button.

00:23:39.280 --> 00:23:44.650
You can set an attribute on your
iframe that lets you control

00:23:44.650 --> 00:23:50.820
whether or not an iframe is
allowed to take itself full screen.

00:23:51.280 --> 00:23:57.150
So I may want to allow full screen on an
iframe that is from a trusted video site.

00:23:57.310 --> 00:24:00.210
I want users to be able to
take that element full screen.

00:24:00.240 --> 00:24:03.300
I want that iframe content to be
able to take itself full screen.

00:24:03.300 --> 00:24:07.180
But I might not want to set
the allow full screen attribute

00:24:07.180 --> 00:24:12.100
on an iframe that contains an
advertisement or something like that.

00:24:12.100 --> 00:24:16.690
I wouldn't want that advertisement to
be able to take over the full screen.

00:24:17.230 --> 00:24:21.600
The iframe itself knows about the
decision that you have made on your site.

00:24:21.610 --> 00:24:25.980
The iframe can call
document.webkit fullscreenenabled

00:24:25.980 --> 00:24:29.290
to detect your decision here.

00:24:29.300 --> 00:24:32.830
So they can detect whether or not
you have set this attribute to enable

00:24:32.830 --> 00:24:34.920
fullscreen mode for their content.

00:24:49.290 --> 00:24:49.290
The iframe itself knows about the
decision that you have made on your site.

00:24:49.290 --> 00:24:49.290
The iframe can call
document.webkit fullscreenenabled

00:24:49.290 --> 00:24:49.290
to detect your decision here.

00:24:49.290 --> 00:24:49.290
So they can detect whether or not
you have set this attribute to enable

00:24:49.290 --> 00:24:49.290
fullscreen mode for their content.

00:24:51.130 --> 00:24:55.570
So those are all the details of
entering and exiting full screen mode.

00:24:55.660 --> 00:25:00.090
Now let's talk about how to define a
custom appearance or a behavior for that

00:25:00.090 --> 00:25:02.280
element that we're taking full screen.

00:25:04.710 --> 00:25:10.320
So this first explanation really doesn't
have much to do with full screen mode,

00:25:10.320 --> 00:25:13.440
but many of you might be wondering,
looking for a little more

00:25:13.460 --> 00:25:14.700
information about it.

00:25:14.780 --> 00:25:18.320
CSS filters is a brand
new feature in Safari 6,

00:25:18.450 --> 00:25:21.970
and as Beth said,
you can use just one line of CSS to

00:25:22.050 --> 00:25:26.500
apply a filter effect to any element,
including video.

00:25:26.500 --> 00:25:30.460
So this is the filter property,
and it can take one or

00:25:30.460 --> 00:25:32.760
many of several functions.

00:25:33.360 --> 00:25:41.810
You can add a sepia tone,
invert the values, add contrast,

00:25:41.810 --> 00:25:46.880
set grayscale, change the opacity,
change the hue rotation, set a blur,

00:25:46.880 --> 00:25:49.700
change the brightness,
or add a drop shadow.

00:25:49.700 --> 00:25:52.060
You can specify just
one of these functions,

00:25:52.170 --> 00:25:54.770
or you, oh,
and this is what they look like.

00:25:54.780 --> 00:25:58.310
So I've taken this image of the tulips,
which is up in the

00:25:58.320 --> 00:26:02.110
upper left-hand corner,
and applied the following filters to it.

00:26:02.120 --> 00:26:05.840
In each example here,
with just one line of CSS,

00:26:06.180 --> 00:26:07.830
it's pretty amazing.

00:26:08.250 --> 00:26:12.780
You can also combine multiple
filter functions into one.

00:26:13.160 --> 00:26:17.290
So if I wanted to see what a
hue rotation of 320 degrees with

00:26:17.300 --> 00:26:19.740
a contrast of two looked like,
I could do that.

00:26:19.780 --> 00:26:23.520
And also, the filter property,
like many CSS properties,

00:26:23.650 --> 00:26:24.840
can be animated.

00:26:24.840 --> 00:26:29.840
So if I say that I want to animate
the filter property over five seconds,

00:26:29.840 --> 00:26:33.000
I would actually see this
effect in my web page,

00:26:33.150 --> 00:26:35.830
the colors kind of changing over time.

00:26:35.830 --> 00:26:37.180
Pretty cool.

00:26:38.910 --> 00:26:43.150
You may have noticed that the
performance as we were filtering

00:26:43.150 --> 00:26:46.390
these elements and moving them
around screen was really great,

00:26:46.390 --> 00:26:49.820
and that's because in most cases,
CSS filters are hardware accelerated,

00:26:50.030 --> 00:26:53.000
so you're going to get great performance.

00:26:53.160 --> 00:27:00.180
Okay, so now that that is out of the way,
let's focus on how we achieve some

00:27:00.180 --> 00:27:02.950
of these effects in full screen.

00:27:03.210 --> 00:27:06.510
You may have noticed that
the interface changed when we

00:27:06.510 --> 00:27:08.060
went into full screen mode.

00:27:08.260 --> 00:27:12.240
Our full screen button disappeared,
we had a close button appear

00:27:12.240 --> 00:27:16.190
in the upper left corner,
the video obviously got

00:27:16.190 --> 00:27:20.360
bigger and split into pieces,
and all of these other page

00:27:20.360 --> 00:27:24.530
elements kind of slid off the
screen in different directions.

00:27:25.080 --> 00:27:28.480
Well,
those effects were all achieved with

00:27:28.650 --> 00:27:33.110
basically one CSS pseudo class that
is available in full screen mode,

00:27:33.160 --> 00:27:35.360
and it's called the full
screen pseudo class.

00:27:35.550 --> 00:27:39.390
Here it has a WebKit prefix,
as I mentioned before.

00:27:40.050 --> 00:27:43.100
If you're not familiar
with CSS pseudo-classes,

00:27:43.100 --> 00:27:46.620
they're applied by the browser,
and you define the appearance

00:27:46.620 --> 00:27:49.890
when the browser applies it.

00:27:50.070 --> 00:27:52.700
So a really common
pseudo-class is colon hover,

00:27:52.700 --> 00:27:55.240
and it's used on links
on tons of websites.

00:27:55.280 --> 00:27:58.840
Here I have a link,
and the color of the text is gray.

00:27:58.840 --> 00:28:03.330
When the user hovers over it,
I want to color the text white and

00:28:03.530 --> 00:28:06.320
add a background color of dark cyan.

00:28:06.320 --> 00:28:09.180
So it's just going to
change instantaneously.

00:28:10.820 --> 00:28:18.140
I can animate that change by just adding
one line to my anchor style definition.

00:28:18.140 --> 00:28:21.870
That's the transition property,
and I'm saying that I want the background

00:28:21.900 --> 00:28:26.260
color to animate over two seconds and
the color to animate over two seconds.

00:28:26.400 --> 00:28:31.200
So now when a user puts their
mouse pointer over this link,

00:28:31.220 --> 00:28:36.190
it's going to change over time instead
of making an instantaneous change.

00:28:36.350 --> 00:28:41.130
And that's how we achieved many of the
effects that you saw in this interface.

00:28:41.230 --> 00:28:44.670
The most simple example was
changing the background color.

00:28:44.840 --> 00:28:49.100
Here I've added sort of a yellow
outline to the element main,

00:28:49.100 --> 00:28:52.670
which was the element that
I was taking full screen.

00:28:53.260 --> 00:28:56.680
In the page view,
the background color was white,

00:28:56.900 --> 00:29:00.860
but when this element was
displayed in full screen mode,

00:29:00.860 --> 00:29:02.810
I wanted the background
color to be black.

00:29:02.890 --> 00:29:10.180
So I just select the main element with
the full screen pseudo class in this way.

00:29:11.950 --> 00:29:15.360
I wanted that to animate over time,
so I just added the transition

00:29:15.360 --> 00:29:18.130
property to change the background
color over two seconds.

00:29:18.140 --> 00:29:22.020
This is how the sliding
effects were also done.

00:29:22.020 --> 00:29:24.580
So we had this logo at the top.

00:29:24.750 --> 00:29:27.060
It was just a div with
a background image.

00:29:27.060 --> 00:29:31.030
The logo was inside of the element main,
so it was inside of the element

00:29:31.140 --> 00:29:33.220
that we were taking full screen.

00:29:33.220 --> 00:29:37.150
So we used the CSS pseudo class.

00:29:37.150 --> 00:29:40.260
We select it differently than
we do for the main element.

00:29:41.010 --> 00:29:44.880
So here I'm saying that when this
logo element is in full screen mode,

00:29:44.900 --> 00:29:46.820
I want to translate
it in the Y direction,

00:29:46.820 --> 00:29:49.020
negative 300 pixels, so off the page.

00:29:49.020 --> 00:29:51.800
And again,
I just add the transition property so

00:29:51.800 --> 00:29:56.200
that the change isn't instantaneous,
so that it animates off the page.

00:29:58.620 --> 00:30:03.300
One case where you're going to
definitely be using the full screen

00:30:03.360 --> 00:30:08.730
pseudo class is when you're actually
resizing your element to fit the screen.

00:30:08.740 --> 00:30:12.470
So by default,
Safari and WebKit will preserve the

00:30:12.470 --> 00:30:18.090
size of the element and its aspect
ratio when you go into full screen mode.

00:30:18.100 --> 00:30:20.460
And this is actually kind of useful.

00:30:20.460 --> 00:30:22.260
Imagine you have a video.

00:30:22.260 --> 00:30:27.580
Most videos have a different aspect ratio
than the ratio of the user's screen,

00:30:27.580 --> 00:30:29.260
or they might have a
different aspect ratio.

00:30:29.260 --> 00:30:32.190
So if we just stretch this
for you in both directions,

00:30:32.190 --> 00:30:33.680
it might not look right.

00:30:33.720 --> 00:30:37.580
So you can actually customize
the width and height of your

00:30:37.580 --> 00:30:39.740
element in full screen mode.

00:30:39.740 --> 00:30:43.670
So if I wanted this purple box to
just take over the entire screen,

00:30:43.670 --> 00:30:48.010
I could change the width to
100% and the height to 100%.

00:30:48.080 --> 00:30:52.130
and then it would do just that,
fill the entire screen.

00:30:52.630 --> 00:30:55.330
So to summarize,
with full screen interfaces,

00:30:55.360 --> 00:31:00.680
you really have complete control
with just a few simple pieces of API.

00:31:00.770 --> 00:31:04.850
It's really easy to trigger
and detect full screen mode.

00:31:04.960 --> 00:31:09.180
You get to decide how the
iframes on your website behave.

00:31:09.210 --> 00:31:13.170
They cannot take themselves full
screen without your permission.

00:31:13.480 --> 00:31:17.230
It's really easy to define a
custom appearance and behavior

00:31:17.230 --> 00:31:21.740
with the Fullscreen Pseudo Class,
the Fullscreen Change Event,

00:31:21.860 --> 00:31:26.400
and the ability to access the
fullscreen element on the document.

00:31:26.570 --> 00:31:30.400
So that's implementing
fullscreen interfaces.

00:31:30.440 --> 00:31:36.240
Now I want to talk about augmenting
your interface with audio.

00:31:37.010 --> 00:31:40.670
So if you have been using the
audio tag on your website,

00:31:40.790 --> 00:31:44.360
you've probably noticed that
it's great for certain things.

00:31:44.360 --> 00:31:47.830
It is designed to stream audio.

00:31:47.830 --> 00:31:52.360
That is more complicated than
it sounds behind the scenes.

00:31:52.360 --> 00:31:54.650
You're getting audio
from a remote source,

00:31:54.800 --> 00:31:57.290
it's buffered,
the audio element knows exactly

00:31:57.290 --> 00:32:00.840
how to handle that changing
environment and play that media.

00:32:00.840 --> 00:32:07.060
It's really easy to use the audio
tag to add a background audio

00:32:07.160 --> 00:32:10.690
track to any website or web app.

00:32:10.690 --> 00:32:10.690
It's as easy as dropping in an image.

00:32:10.980 --> 00:32:15.010
And of course, without the audio element,
we wouldn't be able to play

00:32:15.010 --> 00:32:21.060
audio in our websites on iOS
devices without this element.

00:32:21.310 --> 00:32:24.800
But if you've used the audio tag,
if you've tried to use the audio

00:32:24.930 --> 00:32:28.670
tag to do some other things,
you might have found some things quite

00:32:28.940 --> 00:32:31.220
difficult and in some cases impossible.

00:32:31.240 --> 00:32:35.180
So with the audio tag,
it's not easy to play a

00:32:35.180 --> 00:32:37.560
sound at an exact time.

00:32:37.560 --> 00:32:41.410
You might by chance get that
sound to play at the exact time,

00:32:41.410 --> 00:32:45.080
but if you needed to schedule
that sound in the future,

00:32:45.080 --> 00:32:48.920
you might not get the behavior
that you're always looking

00:32:48.920 --> 00:32:50.610
for with the audio tag.

00:32:52.450 --> 00:32:55.460
You can't use the audio
tag to dynamically apply

00:32:55.460 --> 00:32:58.540
effects like reverb and echo.

00:32:58.930 --> 00:33:01.690
You definitely cannot generate
a sound from the audio tag.

00:33:01.720 --> 00:33:05.580
The audio tag takes
existing media and plays it.

00:33:05.820 --> 00:33:12.570
And finally, you can't use the audio tag
to access raw audio data.

00:33:12.650 --> 00:33:15.430
It's just,
it's great in some ways because

00:33:15.430 --> 00:33:18.100
it's as simple as adding
an image to your website,

00:33:18.100 --> 00:33:22.810
but it doesn't let you kind of
see the bits inside and create

00:33:22.810 --> 00:33:25.460
new interfaces based on that.

00:33:26.040 --> 00:33:30.550
So there is a new technology that lets
you do all of these things and more

00:33:30.790 --> 00:33:35.620
that the audio tag isn't designed for,
and that is the Web Audio API.

00:33:35.750 --> 00:33:40.000
And the Web Audio API is
available in Safari 6 on Lion and

00:33:40.000 --> 00:33:44.450
Mountain Lion and in Safari on iOS 6.

00:33:44.580 --> 00:33:47.060
And right now,
I just want to show you a demo

00:33:47.240 --> 00:33:49.380
to show you what's possible.

00:33:49.970 --> 00:33:53.870
So what I've created here
with the Web Audio API is

00:33:53.870 --> 00:33:56.100
just a simple audio sequencer.

00:33:56.380 --> 00:33:58.810
And on the left,
I have a number of instruments,

00:33:58.930 --> 00:34:02.080
and they're getting highlighted
as I mouse over them.

00:34:02.110 --> 00:34:05.630
If you're looking for sounds
for your own audio interfaces,

00:34:05.630 --> 00:34:08.230
freesound.org is a really great resource.

00:34:08.530 --> 00:34:12.670
People have put a lot of time and effort
into recreating all different kinds of

00:34:12.810 --> 00:34:16.270
sounds from all different instruments,
and that's actually where

00:34:16.270 --> 00:34:18.500
I got the sounds for this demo.

00:34:18.770 --> 00:34:20.820
So right now I'm
hovering over the symbol,

00:34:20.880 --> 00:34:22.480
but if I click on it,
the sound is going to

00:34:22.570 --> 00:34:23.540
play instantaneously.

00:34:23.540 --> 00:34:29.570
Then maybe I can make it a little louder.

00:34:32.100 --> 00:34:33.200
Okay, that's better.

00:34:33.220 --> 00:34:36.740
So we've got the symbol
here that I'm clicking on,

00:34:36.740 --> 00:34:38.050
the snare.

00:34:41.430 --> 00:34:44.270
The clap, which is my favorite.

00:34:44.500 --> 00:34:49.900
If things start going badly,
I can just generate applause for myself.

00:34:49.900 --> 00:34:54.330
And also the kick drum,
which is this nice low beat.

00:34:54.330 --> 00:34:59.760
So you can already see that this
is an incredibly responsive UI.

00:34:59.760 --> 00:35:03.010
I'm just clicking,
clicking a bunch of times.

00:35:03.080 --> 00:35:05.300
It's completely responsive.

00:35:05.570 --> 00:35:10.500
This Web Audio API also lets
me schedule the exact time

00:35:10.500 --> 00:35:11.650
that a sound should be played.

00:35:11.670 --> 00:35:15.610
And that's really important in any
kind of game that you're creating

00:35:15.700 --> 00:35:20.000
for a website and also in this
type of sequencer application.

00:35:20.000 --> 00:35:22.220
So I'm just going to
select the kick drum here,

00:35:22.220 --> 00:35:26.120
and then I'm going to click play to
start the playhead on my audio sequencer.

00:35:26.120 --> 00:35:32.370
And you're going to see the kick drum
always playing at the exactly right time.

00:35:37.700 --> 00:35:38.930
It's pretty exciting.

00:35:39.070 --> 00:35:43.700
But it gets even better when we start
combining multiple sounds at once.

00:35:43.700 --> 00:35:50.060
So if you've ever wanted to play two
pieces of sound at the same time on iOS,

00:35:50.060 --> 00:35:54.010
in Safari on iOS,
this is your solution for doing that.

00:35:54.130 --> 00:36:01.470
I'm going to select this symbol
and then click play again,

00:36:01.590 --> 00:36:02.080
and we'll hear them play
at the exact same time.

00:36:05.300 --> 00:36:11.490
The kind of fine-grained control is
really important for something like this.

00:36:11.570 --> 00:36:14.630
If it were even a little bit off,
it would be really noticeable.

00:36:14.820 --> 00:36:17.160
And of course,
it's incredibly important if you're

00:36:17.160 --> 00:36:18.890
making something like a web game.

00:36:18.900 --> 00:36:24.690
You need a sound to play as an explosion
happens or as two things collide.

00:36:24.960 --> 00:36:28.690
So let's just make this example a
little more complicated so that we can

00:36:28.810 --> 00:36:31.840
see the sounds just playing perfectly.

00:36:31.900 --> 00:36:36.990
I'm going to bring in
maybe this drum up here.

00:37:17.500 --> 00:37:47.000
[Transcript missing]

00:38:06.280 --> 00:38:11.380
This audio visualizer here, the spectrum,
that's a pretty simple use case

00:38:11.690 --> 00:38:15.900
of accessing the raw audio data,
but you could imagine making an

00:38:15.900 --> 00:38:21.060
entire music video on your website and
synchronizing all of the elements in that

00:38:21.060 --> 00:38:23.770
video to the exact beats of the song.

00:38:23.780 --> 00:38:24.910
It would be really cool.

00:38:26.720 --> 00:38:29.080
Today, so this API, it's really powerful.

00:38:29.170 --> 00:38:30.320
It's also very vast.

00:38:30.320 --> 00:38:31.480
There's a lot to it.

00:38:31.610 --> 00:38:35.760
So today, since we don't have a
whole lot of time left,

00:38:35.760 --> 00:38:41.250
I'm going to just cover some basic
concepts to help you get started playing

00:38:41.850 --> 00:38:45.050
sounds and fetching and creating sounds.

00:38:46.290 --> 00:38:49.460
The other reason that I'm not going
in depth on this is because this is

00:38:49.460 --> 00:38:51.400
an API that is still in development.

00:38:51.400 --> 00:38:54.400
It's in the versions of
Safari that you have with you.

00:38:54.860 --> 00:38:55.700
We're encouraging you to
go ahead and download it.

00:38:55.920 --> 00:38:56.480
So if you're new to the app,
I encourage you to try it out.

00:38:56.510 --> 00:38:57.310
Give us feedback.

00:38:57.310 --> 00:38:59.680
Let us know how you like it,
what needs to be different.

00:38:59.680 --> 00:39:03.740
But today, I'm just going to cover the
basics for you to get started.

00:39:05.400 --> 00:39:08.430
So the Web Audio API,
it kind of reminds me of the

00:39:08.430 --> 00:39:11.170
Canvas API that people use for drawing.

00:39:11.170 --> 00:39:14.900
An image tag, you just drop it in,
and that's sort of it.

00:39:15.070 --> 00:39:16.660
It's sort of a black box.

00:39:16.660 --> 00:39:21.460
But the Canvas tag lets you
have a context that you draw to.

00:39:21.470 --> 00:39:25.320
And so like the Canvas tag,
the context that you're drawing to,

00:39:26.680 --> 00:39:28.630
there's also a context
for the Web Audio API.

00:39:28.630 --> 00:39:32.760
And on that context,
you're going to build up a graph of nodes

00:39:32.770 --> 00:39:38.160
that you route your audio through and
then eventually play on your website.

00:39:40.340 --> 00:39:45.800
So the most basic audio context
graph might look something like this.

00:39:45.800 --> 00:39:50.480
I would have a source,
and that is just routed to a destination.

00:39:50.480 --> 00:39:54.950
And in almost all cases,
there is a default destination,

00:39:54.950 --> 00:39:55.660
and that is just a destination.

00:39:57.100 --> 00:39:58.720
So that is just your speakers.

00:39:58.720 --> 00:40:02.180
There's a built-in default
destination on every audio context,

00:40:02.180 --> 00:40:03.630
and that is the speakers.

00:40:03.630 --> 00:40:04.760
So let's take a look.

00:40:04.820 --> 00:40:08.320
This is a really simple example,
but this is where it all starts.

00:40:08.320 --> 00:40:11.960
So let's take a closer look at
how to work with audio sources.

00:40:11.960 --> 00:40:15.630
So in most scenarios,
in a lot of scenarios,

00:40:15.630 --> 00:40:21.270
you're going to be creating an
audio source from a remote resource.

00:40:21.270 --> 00:40:26.110
And most of the time,
you're going to be using XML, HTML,

00:40:26.110 --> 00:40:30.000
HTTP request to get that raw file data.

00:40:30.360 --> 00:40:34.280
So when you're using XHR to
fetch these remote resources,

00:40:34.280 --> 00:40:37.610
you have to do a couple special things.

00:40:37.610 --> 00:40:40.120
The first two lines look really standard.

00:40:40.120 --> 00:40:41.820
We're creating a new request.

00:40:41.820 --> 00:40:45.720
We're calling open on the
request with the resource,

00:40:45.720 --> 00:40:47.420
the URL for our file.

00:40:48.080 --> 00:40:51.950
We're setting the response type
on the request to array buffer.

00:40:51.950 --> 00:40:58.370
And this is telling the browser,
telling XMLHTP request that we just want

00:40:58.370 --> 00:41:01.910
the ones and zeros from this raw file.

00:41:01.920 --> 00:41:04.780
Most of the time when you
are using XMLHTP request,

00:41:04.790 --> 00:41:06.670
you want text as your response.

00:41:06.670 --> 00:41:09.090
When we set response
type to array buffer,

00:41:09.090 --> 00:41:11.980
we're just going to be
getting ones and zeros.

00:41:11.980 --> 00:41:15.770
I'm going to add an event listener
to this request to call process

00:41:15.770 --> 00:41:17.920
buffer once the load event is set.

00:41:18.080 --> 00:41:22.740
is emitted, and then I'm going to
call send on that request.

00:41:23.200 --> 00:42:19.300
[Transcript missing]

00:42:19.470 --> 00:42:24.340
And then I'm going to, on that source,
I'm going to fill the buffer object

00:42:24.480 --> 00:42:28.800
with the contents of the file that
I have fetched from a remote location.

00:42:28.800 --> 00:42:32.710
So now we have all of our
sound data in this buffer,

00:42:32.850 --> 00:42:36.670
and we need it to play at
exactly the right time.

00:42:36.680 --> 00:42:40.210
So a user taps the screen,
and we want a sound to be emitted.

00:42:40.230 --> 00:42:42.860
To do that,
there is a function called noteOn,

00:42:42.860 --> 00:42:44.870
and you just have to tell it when.

00:42:46.140 --> 00:42:47.880
It looks something like this.

00:42:48.060 --> 00:42:50.600
This is where we left off
on the previous slide.

00:42:50.600 --> 00:42:54.930
We had just created an audio buffer
source node and filled it with our

00:42:54.930 --> 00:42:57.620
buffer contents from our remote file.

00:43:00.210 --> 00:43:04.420
What we have to do next is connect
that to the default output.

00:43:04.580 --> 00:43:09.440
My audio context has a destination
object on it by default.

00:43:09.890 --> 00:43:12.100
So I'm just going to pass
that to the connect function.

00:43:12.100 --> 00:43:16.400
And then I can call note on on my source.

00:43:16.500 --> 00:43:21.190
And if I provide a parameter of zero,
that tells the browser to

00:43:21.370 --> 00:43:23.600
play that sound right now.

00:43:23.620 --> 00:43:31.590
So that covers a really common case
of fetching a remote resource and

00:43:31.650 --> 00:43:35.800
using the Web Audio API to play it.

00:43:35.800 --> 00:43:39.280
There are other ways to generate
sounds with the Web Audio API.

00:43:39.800 --> 00:43:44.880
You can actually hook up to an audio
element and use a media element

00:43:44.880 --> 00:43:50.320
audio source node to play the audio,
to route the audio from your audio

00:43:50.320 --> 00:43:53.380
element through the Web Audio API.

00:43:54.020 --> 00:43:56.230
You can synthesize a sound from nothing.

00:43:56.360 --> 00:44:02.080
We've been talking a lot about files,
fetching them from remote locations.

00:44:02.240 --> 00:44:05.440
You can use a built-in audio
source called Oscillator.

00:44:05.440 --> 00:44:08.360
This is great for just
beeps or simple tones.

00:44:08.360 --> 00:44:10.890
If you wanted to create
a really simple organ,

00:44:10.890 --> 00:44:13.970
you could use the Oscillator
audio source to do that.

00:44:14.040 --> 00:44:17.350
Create a sound from scratch.

00:44:17.750 --> 00:44:21.540
And also, similarly,
it's easy to generate a completely

00:44:21.690 --> 00:44:27.130
custom sound from JavaScript using
JavaScript Audio Node.

00:44:28.930 --> 00:44:32.300
So those are really the
basics of the Web Audio API.

00:44:32.300 --> 00:44:35.920
You have a source,
and it's a source node,

00:44:35.920 --> 00:44:39.820
and it's connected to a destination node,
and both of these are

00:44:39.940 --> 00:44:41.340
on your audio context.

00:44:41.360 --> 00:44:45.530
I mentioned that you're going
to be building up a graph of

00:44:45.530 --> 00:44:51.030
nodes on this audio context,
and this can actually get fairly complex.

00:44:51.110 --> 00:44:53.560
It can get as complex
as you want it to be,

00:44:53.600 --> 00:44:54.240
in fact.

00:44:55.620 --> 00:44:58.250
But it all, so we're starting with three
different sources here,

00:44:58.260 --> 00:45:01.100
routing them through a bunch of filters,
and then eventually they're

00:45:01.100 --> 00:45:02.580
getting to the destination.

00:45:02.580 --> 00:45:05.540
But even this,
most of these things in the middle are

00:45:05.540 --> 00:45:08.090
just filter nodes that you're adding in.

00:45:08.100 --> 00:45:11.360
You now know the basics of declaring
a source and a destination,

00:45:11.380 --> 00:45:13.510
hooking them up, and playing a sound.

00:45:13.540 --> 00:45:20.060
So that's augmenting your
interface with audio.

00:45:23.840 --> 00:45:29.380
So in closing, I just want to remind you
that there are some great new

00:45:29.380 --> 00:45:33.540
APIs for HTML5 Media in Safari 6,
which is available on

00:45:33.540 --> 00:45:36.510
Lion and Mountain Lion,
and in iOS 6.

00:45:36.520 --> 00:45:41.160
They are going to let you solve some
common problems that you've been

00:45:41.260 --> 00:45:46.460
facing and also let you integrate
media in new ways in your web content.

00:45:46.460 --> 00:45:50.540
The media synchronization and
full-screen APIs are really simple,

00:45:50.540 --> 00:45:53.120
but they're also incredibly powerful.

00:45:53.720 --> 00:45:57.030
We saw some pretty cool stuff
today done with just a few

00:45:57.250 --> 00:45:59.040
lines of JavaScript and CSS.

00:46:01.070 --> 00:46:04.960
And then finally, Web Audio,
available in Safari 6 on

00:46:04.960 --> 00:46:09.100
the desktop and on iOS 6,
really enables an entirely

00:46:09.100 --> 00:46:11.480
new class of web applications.

00:46:11.480 --> 00:46:15.710
For more information,
you can email me directly if you need to,

00:46:15.840 --> 00:46:17.580
vickieatapple.com.

00:46:17.580 --> 00:46:21.160
There's also documentation
on the Safari Dev Center.

00:46:21.160 --> 00:46:25.490
The w3.org website has copies of
all the specifications of things

00:46:25.630 --> 00:46:27.960
that I've been discussing today.

00:46:28.780 --> 00:46:31.820
And also, if you haven't already,
you should join the

00:46:31.850 --> 00:46:34.460
Safari Developer Program,
which is free to join.

00:46:34.460 --> 00:46:38.290
All you need is an email address,
because that will give you access to a

00:46:38.290 --> 00:46:42.090
Safari section of the developer forums,
and many of the engineers from

00:46:42.170 --> 00:46:44.980
the Safari and WebKit team
are there answering questions,

00:46:45.050 --> 00:46:46.310
and I'm there as well.