WEBVTT

00:00:11.330 --> 00:00:12.090
Hi, everyone.

00:00:12.210 --> 00:00:16.700
I'm Jacob Xiao,
and I work on iOS Frameworks.

00:00:17.120 --> 00:00:20.420
There are more and more applications
on the App Store these days,

00:00:20.460 --> 00:00:23.800
and that makes it really hard for
your application to get noticed.

00:00:23.920 --> 00:00:26.770
But one great way that you can
really make your application unique

00:00:27.110 --> 00:00:29.920
is to customize its appearance.

00:00:31.330 --> 00:00:34.970
Today, I'm going to tell you about some
general tips for how to get the

00:00:34.970 --> 00:00:39.320
most out of customizing your
application and also some specifics on

00:00:39.320 --> 00:00:42.440
customizing different UIKit controls.

00:00:42.500 --> 00:00:45.980
We'll also have a special
guest speaker at the end.

00:00:46.660 --> 00:00:49.190
But first,
I'd like to show you a demo application

00:00:49.310 --> 00:00:52.240
that we'll be talking about today.

00:00:52.260 --> 00:00:55.680
It's a simple application
for controlling a spaceship.

00:00:57.180 --> 00:01:01.960
You can activate the power,
which shows an animated image,

00:01:01.960 --> 00:01:03.800
and also deactivate it.

00:01:03.880 --> 00:01:07.700
And while it's activating,
you can see a progress view as well.

00:01:07.770 --> 00:01:12.450
You can also open and close the doors,
the front and back,

00:01:13.040 --> 00:01:14.560
And also lock them.

00:01:14.560 --> 00:01:20.500
And both of these are just
UI buttons with custom images.

00:01:20.500 --> 00:01:26.180
You can also control
other systems on the ship.

00:01:26.180 --> 00:01:31.340
And finally,
you can view and edit the ship's logs.

00:01:31.340 --> 00:01:36.800
Including searching.

00:01:41.960 --> 00:01:45.050
So as you can see,
our application works fine,

00:01:45.050 --> 00:01:46.900
but it looks kind of plain.

00:01:46.920 --> 00:01:51.370
It has all of the standard appearances,
so it doesn't really stick out.

00:01:52.360 --> 00:01:55.810
So today, I'm going to show you how to go
from this standard appearance

00:01:56.290 --> 00:01:58.890
to a much more customized look.

00:02:01.090 --> 00:02:04.750
Now, those of you listening to the talk
today are probably in one of two groups,

00:02:04.930 --> 00:02:08.160
either developers or designers.

00:02:08.270 --> 00:02:10.870
If you're a developer,
then the code that we talk

00:02:10.870 --> 00:02:14.720
about today will be directly
usable in your applications.

00:02:14.830 --> 00:02:18.000
We'll also talk about
how to prepare artwork,

00:02:18.060 --> 00:02:20.110
and that's information that
you should communicate to the

00:02:20.220 --> 00:02:21.520
designers that you work with.

00:02:22.650 --> 00:02:27.850
Now, those of you listening to the talk
today are probably in one of two groups,

00:02:27.960 --> 00:02:30.380
either developers or designers.

00:02:30.460 --> 00:02:33.660
If you're a developer,
then the code that we talk

00:02:33.840 --> 00:02:38.110
about today will be directly
usable in your applications.

00:02:38.110 --> 00:02:38.110
We'll also talk about
how to prepare artwork,

00:02:38.110 --> 00:02:38.110
and that's information that
you should communicate to the

00:02:38.110 --> 00:02:38.110
designers that you work with.

00:02:39.000 --> 00:02:41.170
All right,
let's get started with some general

00:02:41.170 --> 00:02:44.200
tips for customizing your application.

00:02:45.020 --> 00:02:47.800
One of the most important parts
of a custom appearance in your

00:02:47.880 --> 00:02:50.700
application is the artwork you use.

00:02:50.810 --> 00:02:55.500
Generally, for all iOS artwork,
you'll want to use the ping image format.

00:02:55.610 --> 00:02:59.720
And when you use ping images,
Xcode will also optimize all of

00:02:59.720 --> 00:03:02.300
your images at build time for iOS.

00:03:02.590 --> 00:03:08.700
You should also include 1X and 2X
Retina versions of all of your artwork.

00:03:09.000 --> 00:03:13.130
The 2x versions should have an
@2x suffix in the file name and

00:03:13.130 --> 00:03:17.660
should be exactly double the
pixel dimensions of the 1x images.

00:03:17.780 --> 00:03:20.620
Then when you use these
images in your application,

00:03:20.750 --> 00:03:25.650
you can just use UIImage, image named,
with a base file name,

00:03:25.740 --> 00:03:27.970
just leaving off the extension.

00:03:29.080 --> 00:03:33.370
If your application is universal,
you may have artwork that you want

00:03:33.370 --> 00:03:36.480
to be different on iPhone and iPad.

00:03:36.580 --> 00:03:38.150
And that's easy to do.

00:03:38.270 --> 00:03:43.780
Just add a ~iPhone or ~iPad
suffix into your file name.

00:03:44.080 --> 00:03:46.320
And for the 2x version,
notice that the tilde

00:03:46.410 --> 00:03:49.050
suffix comes after the @2x.

00:03:49.370 --> 00:03:52.340
Then,
when you use the same image named method,

00:03:52.350 --> 00:03:56.690
you'll get the correct
version for iPhone and iPad.

00:03:56.780 --> 00:04:01.020
Again, just leave off the extension
and the tilde iPhone/iPad.

00:04:02.680 --> 00:04:06.090
Now let's say we were creating
a custom button like these.

00:04:06.300 --> 00:04:10.500
Our first thought might be to
create artwork for these like this,

00:04:10.500 --> 00:04:14.300
where the entire contents of
the buttons are in the artwork.

00:04:14.380 --> 00:04:16.590
But this is not the best approach to use.

00:04:16.760 --> 00:04:23.540
Instead, it's better to separate out the
foreground and the background.

00:04:23.650 --> 00:04:28.960
In this case, the foreground would be the
star image or the tap text,

00:04:28.960 --> 00:04:32.600
and the background would
be the green button image.

00:04:32.860 --> 00:04:36.400
Now, doing this separation allows
you to reuse the same background

00:04:36.400 --> 00:04:39.110
image on many different buttons.

00:04:39.110 --> 00:04:43.010
And separating out the text from your
image allows for better localization

00:04:43.140 --> 00:04:45.810
and accessibility for your applications.

00:04:46.500 --> 00:04:51.260
Once we've separated out the image,
we can use a resizable image to draw it.

00:04:51.450 --> 00:04:55.080
Resizable images are a common
technique on iOS that allows

00:04:55.080 --> 00:04:59.370
you to draw a large image,
like this one, with a smaller image,

00:04:59.370 --> 00:05:00.410
like this.

00:05:02.500 --> 00:05:07.000
To do so, we just separate the
smaller image into regions.

00:05:07.110 --> 00:05:09.750
In this case,
we would create a three-part

00:05:09.750 --> 00:05:14.460
resizable image where the left and
the right are fixed and the center

00:05:14.500 --> 00:05:19.030
region resizes as necessary for
the size that we're drawing at.

00:05:22.020 --> 00:05:27.300
To create a resizable image, just use the
ResizableImageWithCapInsets method.

00:05:27.310 --> 00:05:30.940
And this method allows you
to pass in a cap insets,

00:05:30.970 --> 00:05:34.450
which indicate the size
to remove on the left,

00:05:34.520 --> 00:05:36.590
right, or top or bottom.

00:05:37.080 --> 00:05:42.000
And you can create these cap insets
with the UI EdgeInsetsMake function.

00:05:42.060 --> 00:05:46.340
This allows you to pass in all of
the four dimensions that you want,

00:05:46.340 --> 00:05:50.430
and then you can use this edge insets
to pass the resizable image with cap

00:05:50.430 --> 00:05:53.640
insets method to an existing UI image.

00:05:53.750 --> 00:05:57.100
And you'll get a new
UI image that's resizable.

00:05:57.170 --> 00:05:59.560
The order of these arguments
is easy to remember.

00:05:59.650 --> 00:06:02.200
Just start at the top
and go counterclockwise.

00:06:02.270 --> 00:06:05.470
Top, left, bottom, right.

00:06:06.120 --> 00:06:09.780
For horizontally resizable images,
just pass zero for the

00:06:09.780 --> 00:06:11.640
top and bottom values.

00:06:11.780 --> 00:06:14.760
But if you use all four values,
you'll get an image that's both

00:06:14.890 --> 00:06:19.140
horizontally and vertically resizable,
like this one.

00:06:19.230 --> 00:06:23.390
As you can see,
it's a nine-part resizable image with

00:06:23.400 --> 00:06:26.730
fixed corners and a resizable center.

00:06:28.160 --> 00:06:32.150
Now, when you create a resizable image,
there are two different ways that

00:06:32.240 --> 00:06:37.230
the center part can be resized,
either by stretching or tiling.

00:06:37.340 --> 00:06:39.740
So if we use this
example background image,

00:06:39.770 --> 00:06:42.380
you'll see that it has
a textured appearance.

00:06:42.480 --> 00:06:45.360
So if we were to use
stretching for the center part,

00:06:45.430 --> 00:06:47.420
then the center looks kind of
blurry because it's just getting

00:06:47.420 --> 00:06:50.220
stretched out to the necessary width.

00:06:50.270 --> 00:06:53.520
On the other hand,
if we tiled the center region,

00:06:53.580 --> 00:06:57.790
we'd get the correct textured
appearance across the entire center.

00:06:58.990 --> 00:07:02.200
When you use the resizable
image with cap insets method,

00:07:02.310 --> 00:07:07.870
we'll automatically choose tiling for
larger images and stretching if the

00:07:07.870 --> 00:07:10.390
center region is just one point wide.

00:07:10.490 --> 00:07:13.300
And this is because for
one point wide images,

00:07:13.300 --> 00:07:17.340
stretching looks the same as tiling,
and if stretching always

00:07:17.340 --> 00:07:19.200
has a better performance.

00:07:19.330 --> 00:07:24.110
However, if you want to specify something
custom for your resizable image,

00:07:24.170 --> 00:07:26.270
this is now possible in iOS 6.

00:07:26.480 --> 00:07:29.910
You can use this new method,
resizable image with cap insets,

00:07:29.910 --> 00:07:33.410
resizing mode,
to specify whether you want your

00:07:33.410 --> 00:07:36.300
resizable image to stretch or tile.

00:07:36.440 --> 00:07:40.750
However, note that this method is not
available in iOS 6 Seed 1,

00:07:40.750 --> 00:07:42.990
but it will be in the next Seeds.

00:07:45.100 --> 00:07:49.950
Many UIKit controls will change the
size of their end caps based on the

00:07:50.010 --> 00:07:52.660
cap insets of their background images.

00:07:52.900 --> 00:07:58.150
For example, if we use this background
image with these cap insets,

00:07:58.150 --> 00:08:01.910
we'd get a control with
relatively small end caps.

00:08:02.030 --> 00:08:04.390
However,
if we used a larger background image

00:08:04.540 --> 00:08:08.890
with corresponding larger cap insets,
we'd get these larger margins.

00:08:09.190 --> 00:08:12.560
So this allows you to change the
geometry of your control just by

00:08:12.620 --> 00:08:14.600
changing its background image.

00:08:18.980 --> 00:08:22.450
Now, many images that you use in
your application will have

00:08:22.690 --> 00:08:24.660
effects like shadows or glows.

00:08:24.720 --> 00:08:28.100
And when you're lining up
these images with other images,

00:08:28.330 --> 00:08:31.900
you generally don't want them to
line up based on these shadows.

00:08:32.100 --> 00:08:34.520
Instead,
you probably want them to line up

00:08:34.520 --> 00:08:36.900
with the main edges of the control.

00:08:36.950 --> 00:08:39.720
And in iOS 6, we have a new method
that makes that easier.

00:08:39.880 --> 00:08:42.900
Image with alignment-wrecked insets.

00:08:43.060 --> 00:08:46.580
You pass this to an image to specify
insets that should be used for

00:08:46.860 --> 00:08:48.880
purposes of laying out that image.

00:08:48.880 --> 00:08:53.150
And this uses the same edge
insets input as resizable images

00:08:53.150 --> 00:08:54.900
that we talked about earlier.

00:08:54.900 --> 00:08:59.780
And in fact, you can even use these two
methods together to create images

00:08:59.780 --> 00:09:04.400
that are both resizable and that
have alignment-wrecked insets.

00:09:04.850 --> 00:09:07.830
For this example image,
we could use alignment

00:09:07.830 --> 00:09:10.470
rect insets like this.

00:09:10.470 --> 00:09:15.610
With the top inset of 0,
a left inset of 1, bottom of 3,

00:09:15.880 --> 00:09:16.690
and right of 1.

00:09:16.690 --> 00:09:20.690
This image was then lay
out exactly as we intended.

00:09:22.220 --> 00:09:25.700
Now, our application includes
this custom lock button.

00:09:25.840 --> 00:09:29.900
And the image for this is pretty small,
which makes it kind of hard to tap.

00:09:30.570 --> 00:09:32.490
In fact,
the human interface guidelines say

00:09:32.510 --> 00:09:38.300
that the minimum size of tappable
elements should be 44 by 44 points.

00:09:38.410 --> 00:09:41.250
And our button is smaller than that.

00:09:42.190 --> 00:09:46.020
But there's a technique that we can
use to make its effective area larger,

00:09:46.020 --> 00:09:49.140
and that's the
PointInsideWithEvent method.

00:09:49.520 --> 00:09:53.790
This is a method on UIView that
gets called for all views when an

00:09:53.790 --> 00:09:58.360
event comes in to determine whether
that view should get the event.

00:09:58.740 --> 00:10:03.950
The default implementation of UIView
just returns whether that point

00:10:04.020 --> 00:10:06.700
is within the bounds of the view.

00:10:06.780 --> 00:10:11.600
But we can create a UIButton
subclass and override this method.

00:10:12.020 --> 00:10:16.030
In our--what we override,
we'll just specify a larger

00:10:16.030 --> 00:10:21.550
region with a size of 44 by 44,
and then we'll return whether the

00:10:21.610 --> 00:10:23.790
point is in this larger region.

00:10:24.310 --> 00:10:28.260
This way, if a touch comes in that's
outside of the button's bounds

00:10:28.630 --> 00:10:33.540
but inside of the larger region,
our button will still get the event.

00:10:34.400 --> 00:10:36.200
However,
one thing to keep in mind when using

00:10:36.200 --> 00:10:40.140
this technique is that this larger
boundary is actually invisible.

00:10:40.250 --> 00:10:46.640
So it's easy to accidentally align other
views to overlap this invisible region.

00:10:46.690 --> 00:10:49.830
And if you did this,
you'd get unpredictable touch handling.

00:10:49.960 --> 00:10:52.990
So it's best to avoid this
and make sure that all of your

00:10:53.010 --> 00:10:55.350
views have large enough margins.

00:11:00.160 --> 00:11:03.640
As you're customizing your application,
please try to use standard

00:11:03.720 --> 00:11:06.200
UIKit controls whenever possible.

00:11:06.340 --> 00:11:09.300
As you'll see today,
they're very customizable.

00:11:09.430 --> 00:11:13.370
So even if you want a very custom look,
you can still use default

00:11:13.370 --> 00:11:15.300
controls and customize them.

00:11:15.380 --> 00:11:18.290
You don't need to create
your own new button class

00:11:18.380 --> 00:11:20.250
just to get a different look.

00:11:21.300 --> 00:11:25.440
You also get the standard behaviors
when you use the standard controls.

00:11:25.560 --> 00:11:29.000
This way, your controls will behave
like all of the rest of iOS,

00:11:29.110 --> 00:11:34.190
which will make your app more predictable
and easier to use for your customers.

00:11:34.280 --> 00:11:37.760
And finally, we're improving the
system with every release.

00:11:37.860 --> 00:11:40.510
And so if you use standard controls,
you'll get all of these

00:11:40.570 --> 00:11:43.550
improvements for free,
instead of having to always work

00:11:43.720 --> 00:11:48.590
to keep your control up to date
with new additions and changes.

00:11:51.710 --> 00:11:55.560
Now, as you're customizing your controls,
it's generally a good idea to

00:11:55.560 --> 00:11:58.200
customize all parts of the control.

00:11:58.370 --> 00:12:02.110
For example, with this segmented control,
we wouldn't want to customize

00:12:02.250 --> 00:12:05.360
just the background image
but not the divider images.

00:12:05.490 --> 00:12:08.450
Here, I've just set a custom
background but left the divider

00:12:08.450 --> 00:12:11.680
images as the default blue,
which doesn't look great.

00:12:11.810 --> 00:12:14.710
Instead,
if we customize all of the images,

00:12:14.740 --> 00:12:17.580
we'll get a much more consistent look.

00:12:19.500 --> 00:12:23.770
Now, if you and your application wanted
to use a standard UIKit control but

00:12:23.830 --> 00:12:27.400
show it in a different orientation,
like a vertical slider,

00:12:27.550 --> 00:12:30.980
this is actually something
that's very easy to do today.

00:12:31.770 --> 00:12:35.530
UI view has a transform
property and you can set that

00:12:35.530 --> 00:12:37.560
transform to whatever you want.

00:12:37.690 --> 00:12:41.450
So for a vertical slider like this,
we would set an affine transform

00:12:41.900 --> 00:12:44.800
that has a rotation of half pi.

00:12:45.010 --> 00:12:48.390
And this is in radians and is
the equivalent of 90 degrees.

00:12:48.670 --> 00:12:51.650
If you've forgotten all of this geometry,
you might need to go back to your high

00:12:51.750 --> 00:12:54.290
school geometry book to do some review.

00:12:56.190 --> 00:12:59.060
One really easy way to get a
very custom appearance in your

00:12:59.140 --> 00:13:01.920
application is with tint color.

00:13:02.230 --> 00:13:06.100
Most controls in UIKit have a tint
color property that allows you to

00:13:06.160 --> 00:13:08.900
recolor them in whatever color you want.

00:13:09.020 --> 00:13:13.680
In fact, some controls even have multiple
tint colors that you can set.

00:13:14.380 --> 00:13:18.500
And this allows you to heavily customize
your application without having to

00:13:18.640 --> 00:13:21.000
create any custom artwork yourself.

00:13:21.120 --> 00:13:24.440
So it's a really great
way to get a custom look.

00:13:24.540 --> 00:13:28.440
And we have an example of
this also in the sample code.

00:13:31.760 --> 00:13:35.190
As you're customizing your application,
it can be kind of tedious to have

00:13:35.290 --> 00:13:40.210
to send methods to each individual
control that you want to customize.

00:13:40.900 --> 00:13:44.110
In iOS 5,
we introduced a new way that you can

00:13:44.110 --> 00:13:47.710
customize all of your controls at once.

00:13:48.120 --> 00:13:52.190
To do this, instead of sending the method
to an individual control,

00:13:52.440 --> 00:13:56.900
send it to the appearance proxy that's
returned by that control's class.

00:13:56.970 --> 00:14:00.200
Then, when you send the method,
all of the controls of that

00:14:00.650 --> 00:14:02.490
class will be customized.

00:14:02.670 --> 00:14:06.770
And one way that you can make it easier
to do this is to cast the appearance

00:14:06.770 --> 00:14:11.400
proxy that's returned as an instance
of the class that it's representing.

00:14:11.510 --> 00:14:16.040
So for the case of a slider,
we would cast it as a UISlider instance.

00:14:16.110 --> 00:14:20.150
This way, we'll get build time warnings
if we try to send it any methods

00:14:20.170 --> 00:14:22.110
that it doesn't respond to.

00:14:22.470 --> 00:14:25.250
And one thing to keep in mind
when using the appearance proxy

00:14:25.530 --> 00:14:28.880
is that customizations only
happen for a given control when

00:14:28.970 --> 00:14:31.300
it's first added to its window.

00:14:31.410 --> 00:14:34.190
So if you already have a control
that's visible and you send

00:14:34.260 --> 00:14:38.720
appearance proxy methods afterwards,
the control will not get updated.

00:14:38.810 --> 00:14:41.270
Because of this,
it's generally best to do all your

00:14:41.390 --> 00:14:44.840
appearance proxy customization
early in your application,

00:14:44.940 --> 00:14:47.740
generally at application launch time.

00:14:50.920 --> 00:14:54.190
And if you want to learn more about
appearance proxy customization,

00:14:54.260 --> 00:14:57.680
you can watch last year's talk,
Customizing the Appearance

00:14:57.680 --> 00:15:01.100
of UIKit Controls,
which is available on video.

00:15:02.810 --> 00:15:06.000
You may have noticed that the
silver default style status

00:15:06.000 --> 00:15:10.800
bar has been replaced in iOS
6 by this new blue status bar.

00:15:10.890 --> 00:15:12.700
In fact,
some people have noticed this and

00:15:12.700 --> 00:15:15.690
have had very strong reactions.

00:15:17.330 --> 00:15:20.300
But this is not actually just
a blue static status bar.

00:15:20.510 --> 00:15:24.560
It actually matches the color of
the top navigation bar that's shown.

00:15:24.730 --> 00:15:28.950
For a blue default navigation bar,
we'll show a blue status bar.

00:15:29.070 --> 00:15:31.860
But if you have a tint color
on your navigation bar,

00:15:31.970 --> 00:15:36.390
then we'll actually match the status
bar to that navigation bar's tint color.

00:15:36.640 --> 00:15:39.230
And we'll even do this if you
have a custom background image

00:15:39.410 --> 00:15:43.790
for your navigation bar or a
custom subclass of navigation bar.

00:15:45.090 --> 00:15:49.060
However, this tinting of the status
bar only happens on iPhone.

00:15:49.260 --> 00:15:51.880
It doesn't happen on iPad.

00:15:51.880 --> 00:15:55.730
It also only happens when
you use the status bar style

00:15:55.730 --> 00:15:58.110
UI status bar style default.

00:15:58.310 --> 00:16:01.800
For the black opaque and black
transparent status bar styles,

00:16:01.890 --> 00:16:04.340
these look as they always have.

00:16:05.330 --> 00:16:08.150
Now, if your application uses one
of these tinted status bars,

00:16:08.150 --> 00:16:11.690
then you should tell the system
about what kind of a navigation bar

00:16:11.690 --> 00:16:15.370
you have so that at launch time,
we can match the animation

00:16:15.370 --> 00:16:16.950
of your application.

00:16:17.060 --> 00:16:19.250
And this is similar to
how default.pngs work,

00:16:19.400 --> 00:16:21.430
where before your
application has launched,

00:16:21.510 --> 00:16:25.630
the system doesn't know what to show,
so you provide a default.png image.

00:16:25.700 --> 00:16:28.640
To provide the kind of
navigation bar you have,

00:16:28.640 --> 00:16:31.840
you just need to add an
entry to your Info.plist.

00:16:31.940 --> 00:16:35.820
And this entry should be called
UI Status Bar Tint Parameters.

00:16:36.220 --> 00:16:39.420
Inside of that,
you'll add a dictionary with

00:16:39.560 --> 00:16:41.580
the key UINavigationBar.

00:16:41.720 --> 00:16:46.700
Then you just need to specify
the style of your navigation bar,

00:16:46.810 --> 00:16:52.500
whether it's translucent,
and its tint color, if it has one.

00:16:52.600 --> 00:16:55.550
Once you've got this set
up in your Info.plist,

00:16:55.660 --> 00:16:59.470
the system will match the
status bar style at launch time.

00:17:00.690 --> 00:17:04.300
Another appearance change in iOS
6 is that we now show shadows

00:17:05.160 --> 00:17:10.900
beneath the navigation bars,
toolbars, and tab bars.

00:17:11.240 --> 00:17:14.230
This is a pretty subtle effect,
so I've kind of increased the contrast

00:17:14.300 --> 00:17:16.530
here so you can better see it.

00:17:17.410 --> 00:17:20.100
Now, this effect happens in your
application automatically.

00:17:20.260 --> 00:17:22.500
There's nothing that you
need to do to opt into it.

00:17:22.640 --> 00:17:26.640
However, there are a few things to keep
in mind about these new shadows.

00:17:28.020 --> 00:17:31.200
For this navigation bar,
here are its bounds,

00:17:31.320 --> 00:17:33.960
and here is where the shadow appears.

00:17:34.090 --> 00:17:36.750
As you can see,
the shadow actually extends beyond

00:17:36.820 --> 00:17:42.290
the bounds of the navigation bar and
into the area of the content below.

00:17:42.410 --> 00:17:45.980
And this means that if your
content view is above the

00:17:45.980 --> 00:17:49.420
navigation bar in its hierarchy,
the content will actually

00:17:49.450 --> 00:17:52.400
cover up the shadow,
making it invisible.

00:17:52.560 --> 00:17:57.040
So always make sure that your bars
are on top of their content area

00:17:57.210 --> 00:17:59.770
so that their shadow is visible.

00:18:00.490 --> 00:18:04.130
If you still notice that your
navigation bar's shadow is invisible,

00:18:04.250 --> 00:18:07.530
then check that its ClipSubviews
property is turned off.

00:18:07.640 --> 00:18:10.980
If ClipSubviews is turned on,
then the shadow will be clipped

00:18:10.980 --> 00:18:14.600
to the navigation bar's bounds,
which again will make it invisible.

00:18:14.680 --> 00:18:17.210
If you create your navigation
bar in Interface Builder,

00:18:17.420 --> 00:18:20.310
then you can change the
ClipSubviews property here

00:18:20.420 --> 00:18:22.090
in the Attributes Inspector.

00:18:23.960 --> 00:18:28.800
If you use custom navigation bar
subclasses or toolbar subclasses,

00:18:28.990 --> 00:18:32.470
then we have an easy way that will make
it easier for your application to use

00:18:32.580 --> 00:18:35.500
these with UI Navigation Controller.

00:18:35.670 --> 00:18:39.200
The new method,
initWithNavigationBarClass, ToolbarClass,

00:18:39.350 --> 00:18:42.800
allows you to create a navigation
controller that has your custom

00:18:42.880 --> 00:18:45.400
subclasses already ready to use.

00:18:45.560 --> 00:18:48.760
This is new in iOS 6,
but the great thing is it's

00:18:48.760 --> 00:18:50.840
available back to iOS 5.

00:18:50.970 --> 00:18:54.080
So if you use the iOS 6 SDK,
you can still use this even if your

00:18:54.300 --> 00:18:57.840
deployment target goes back to 5.0.

00:19:03.440 --> 00:19:07.460
Now let's talk about customizing
some specific UIKit controls.

00:19:07.680 --> 00:19:09.480
We'll start with buttons.

00:19:09.550 --> 00:19:12.160
Buttons are pretty easy to customize.

00:19:12.310 --> 00:19:15.030
First, you should remember what
we talked about earlier,

00:19:15.060 --> 00:19:18.090
to separate out the
foreground and the background.

00:19:18.240 --> 00:19:21.010
And also,
we should use resizable images for

00:19:21.080 --> 00:19:23.620
the background whenever possible.

00:19:23.660 --> 00:19:29.150
Using resizable images makes it so that
your images are smaller and also allows

00:19:29.150 --> 00:19:32.660
you to reuse them in different buttons,
even if those buttons

00:19:32.750 --> 00:19:34.350
have different sizes.

00:19:35.130 --> 00:19:38.880
For the background,
we can use the setBackgroundImageForState

00:19:38.880 --> 00:19:41.240
method to set the background image.

00:19:41.330 --> 00:19:45.240
And for the foreground,
we can either use setImageForState

00:19:45.320 --> 00:19:47.130
or setTitleForState.

00:19:47.230 --> 00:19:50.070
And again,
setting the title as text instead of

00:19:50.070 --> 00:19:54.900
an image is better for localization
and accessibility in your application.

00:19:56.500 --> 00:20:00.500
Now, these methods introduce
the new state per input,

00:20:00.510 --> 00:20:03.270
and this allows you to customize
the control differently

00:20:03.320 --> 00:20:04.710
for its different states.

00:20:04.860 --> 00:20:11.590
The possible values you can use here are
Normal for the default state of control,

00:20:11.740 --> 00:20:15.530
Highlighted for while the
button is being tapped,

00:20:15.900 --> 00:20:20.060
disabled for when the
control can't be used,

00:20:20.310 --> 00:20:26.100
and selected for toggleable
or selectable elements,

00:20:26.100 --> 00:20:26.100
like UI Segmented Control.

00:20:26.510 --> 00:20:29.240
These are the custom images
that we're using for our custom

00:20:29.240 --> 00:20:32.090
button in the example code.

00:20:32.590 --> 00:20:36.100
And when you're setting your own
custom images for your controls,

00:20:36.210 --> 00:20:39.700
it's always good to at least
set the normal state's value.

00:20:39.790 --> 00:20:43.340
If you only set the normal state and
don't set any of the other states,

00:20:43.420 --> 00:20:47.400
then we'll use the normal state's
value and modify that for the

00:20:47.400 --> 00:20:49.900
different states as necessary.

00:20:50.070 --> 00:20:53.880
Also, these control states are not
actually mutually exclusive.

00:20:53.990 --> 00:20:56.160
So, for example,
you could set a different

00:20:56.160 --> 00:21:00.000
image for while a control is
both highlighted and selected.

00:21:00.120 --> 00:21:04.910
And to do this, just use bitwise or to
combine the states together.

00:21:07.880 --> 00:21:10.710
Segmented controls are
very similar to buttons,

00:21:10.710 --> 00:21:13.300
but they can have multiple sections.

00:21:13.610 --> 00:21:18.340
Here is the custom segmented control
that we use in the example application.

00:21:18.340 --> 00:21:21.460
And here are the
components that make it up.

00:21:21.510 --> 00:21:24.760
Once again,
there's a background image that we'll

00:21:24.760 --> 00:21:29.920
use a resizable image for so that it can
stretch to whatever size is necessary.

00:21:30.070 --> 00:21:33.230
And for segmented controls,
if you don't use an image

00:21:33.320 --> 00:21:36.570
that's already resizable,
then we'll make it resizable

00:21:36.960 --> 00:21:40.600
for you by assuming a center
region of one point and using the

00:21:40.920 --> 00:21:43.700
rest as left and right end caps.

00:21:44.200 --> 00:21:48.130
Also, for segmented controls,
it's generally a good idea to set

00:21:48.130 --> 00:21:52.050
at least the normal and selected
values for the background image

00:21:52.340 --> 00:21:55.490
so that the currently selected
segment will look different

00:21:55.600 --> 00:21:57.720
visually from all of the others.

00:21:57.930 --> 00:22:01.360
There's also a divider image
that's shown in the middle

00:22:01.510 --> 00:22:03.500
between two different segments.

00:22:03.550 --> 00:22:06.660
And we can set custom
images for that as well.

00:22:06.690 --> 00:22:10.510
And notice that the custom
image method for this allows

00:22:10.510 --> 00:22:15.240
us to set different images for
different left and right states.

00:22:15.270 --> 00:22:18.600
And these are for the states
of the two segments on the left

00:22:18.600 --> 00:22:20.490
and right of a given divider.

00:22:22.150 --> 00:22:25.500
Steppers are a control that
we introduced in iOS 5.

00:22:25.530 --> 00:22:28.900
And in iOS 6,
we're adding a lot of customization

00:22:28.900 --> 00:22:30.700
options to them as well.

00:22:30.910 --> 00:22:34.060
Here are the components
of our custom stepper.

00:22:34.080 --> 00:22:36.270
In the foreground,
there's a decrement and

00:22:36.320 --> 00:22:39.100
increment image that we can set.

00:22:39.190 --> 00:22:41.900
And in the background,
there's a divider image and a

00:22:41.900 --> 00:22:47.050
background image that are customized
very similarly to segmented controls.

00:22:49.780 --> 00:22:52.800
Sliders are very simple,
easy to use controls,

00:22:52.900 --> 00:22:56.260
but they also have a lot of
available customizability.

00:22:56.420 --> 00:22:59.800
For example, here is a default slider.

00:22:59.930 --> 00:23:03.770
And here's the custom slider
that we used in our application.

00:23:04.340 --> 00:23:08.440
As you can see, it's very different,
and here are the elements

00:23:08.440 --> 00:23:10.530
that make up those changes.

00:23:10.740 --> 00:23:13.540
On the left and right
sides of the slider,

00:23:13.580 --> 00:23:16.400
there's a minimum and
maximum value image.

00:23:16.450 --> 00:23:20.070
The images that you use here
should represent the property

00:23:20.310 --> 00:23:22.780
that the slider is changing.

00:23:22.940 --> 00:23:26.490
In the case of our application,
this slider controls the

00:23:26.490 --> 00:23:28.300
speed of the spaceship.

00:23:28.300 --> 00:23:33.990
So we're using images that represent
the spaceship going slow and fast.

00:23:34.200 --> 00:23:37.970
There's also a thumb image that
goes in the center of the slider,

00:23:37.980 --> 00:23:39.800
and that can be customized as well.

00:23:39.950 --> 00:23:44.510
Finally, there are track images that are
shown at the back of the slider,

00:23:44.540 --> 00:23:47.820
and these can be customized
for the minimum on the left

00:23:48.020 --> 00:23:50.480
and the maximum on the right.

00:23:50.830 --> 00:23:53.000
Once again,
you should use resizable images

00:23:53.000 --> 00:23:56.270
for these since they'll be shown
at different widths depending

00:23:56.310 --> 00:23:58.630
on the value of the slider.

00:24:05.740 --> 00:24:10.940
Progress views show the status of an
ongoing operation in your application.

00:24:10.940 --> 00:24:14.160
Here is a custom slider view that
we used in the example application

00:24:14.920 --> 00:24:16.820
and here are its components.

00:24:16.870 --> 00:24:21.040
There's a track image at the back
and a progress image in the front.

00:24:21.040 --> 00:24:25.130
The track image is drawn across the
entire width of the progress view,

00:24:25.130 --> 00:24:29.030
whereas the progress image is drawn
just in the section that's completed

00:24:29.340 --> 00:24:32.000
and is put on top of the track image.

00:24:32.000 --> 00:24:35.390
Note that this is a different
behavior than sliders,

00:24:35.500 --> 00:24:39.690
where for sliders only half is drawn
in each different custom image.

00:24:40.920 --> 00:24:44.300
Once again, with progress views,
it's good to use resizable images

00:24:44.780 --> 00:24:48.580
so that your image can be redrawn to
whatever width is necessary for the

00:24:48.580 --> 00:24:50.970
current state of the progress view.

00:24:52.300 --> 00:24:55.210
Switches are a very
basic control in UIKit,

00:24:55.210 --> 00:24:58.580
but even they have a lot of
customizability available.

00:24:58.790 --> 00:25:03.530
In iOS 5,
we introduced the On Tint Color property,

00:25:03.530 --> 00:25:07.200
and this allows you to set the
color of the on part of the switch.

00:25:07.260 --> 00:25:10.500
In iOS 6, we're adding even more options.

00:25:10.580 --> 00:25:14.440
You can now set a Thumb Tint Color,
which affects just the

00:25:14.480 --> 00:25:18.750
color of the center thumb,
and you can set a Tint Color,

00:25:19.040 --> 00:25:24.500
which affects both the thumb's color and
the color of the off part of the switch.

00:25:24.560 --> 00:25:27.060
And of course,
you can combine all of these colors

00:25:27.060 --> 00:25:30.790
however you want to create exactly
the appearance that you want.

00:25:31.380 --> 00:25:35.500
We're also adding methods to set
custom images for your switch.

00:25:35.610 --> 00:25:39.300
This lets you set a custom image for
the on and off part of the switch.

00:25:39.300 --> 00:25:44.260
But it's a good idea to keep these
images at 77 by 27 points or smaller

00:25:44.610 --> 00:25:47.290
so that they fit within the switch.

00:25:48.330 --> 00:25:53.200
Next, let's talk about customizing the
navigation bar for our application.

00:25:53.240 --> 00:25:57.440
Navigation bars are a common
element in many iOS applications,

00:25:57.500 --> 00:26:00.770
and there's a lot that we
can do to customize them.

00:26:00.840 --> 00:26:03.500
We'll start with the background image.

00:26:03.560 --> 00:26:07.310
Once again, notice that the background
image is separate from the

00:26:07.400 --> 00:26:09.300
text and all of the buttons.

00:26:09.330 --> 00:26:12.510
Again,
this allows for better reusability and

00:26:12.700 --> 00:26:15.770
better localization and accessibility.

00:26:16.780 --> 00:26:20.120
Also, instead of drawing the
entire background image,

00:26:20.120 --> 00:26:23.790
we'll use a smaller, resizable image,
as usual.

00:26:24.690 --> 00:26:28.890
Once we have this smaller image,
we can use the setBackgroundImage

00:26:28.960 --> 00:26:32.600
for bar metrics method to set
this for the navigation bar.

00:26:32.730 --> 00:26:36.500
Notice that there's a new
parameter here for bar metrics.

00:26:37.040 --> 00:26:41.440
Bar metrics specify the
different types of bar heights.

00:26:41.440 --> 00:26:46.460
For example, the default is shown
in portrait on iPhone,

00:26:46.470 --> 00:26:49.450
and this has a height of 44 points.

00:26:49.530 --> 00:26:52.850
On landscape on iPhone,
we decrease the height of the

00:26:52.850 --> 00:26:56.200
navigation bars to 32 points,
and this is represented by the

00:26:56.200 --> 00:26:57.840
landscape phone bar metrics.

00:26:57.840 --> 00:27:01.740
And as its name implies,
this doesn't happen on iPad.

00:27:01.740 --> 00:27:06.910
On iPad, all navigation bars have
a height of 44 points.

00:27:07.000 --> 00:27:07.420
Amen.

00:27:08.530 --> 00:27:11.060
So using bar metrics,
we can set different custom

00:27:11.060 --> 00:27:15.310
background images for each of
these different bar metrics.

00:27:16.260 --> 00:27:20.050
When you're setting your image,
if you use an image that's taller

00:27:20.050 --> 00:27:23.310
than the height of the bar,
which is 44 in default

00:27:23.390 --> 00:27:26.160
and 32 in landscape,
then we won't clip it to

00:27:26.170 --> 00:27:29.100
the height of the bar,
but we'll actually show the full

00:27:29.140 --> 00:27:30.790
height of the image you set.

00:27:30.880 --> 00:27:36.080
And this allows you to set a larger image
that will extend into the content below,

00:27:36.160 --> 00:27:40.400
so you can provide your own shadow as
part of the custom background image.

00:27:40.460 --> 00:27:43.140
And if you do this,
then we'll turn off the new shadows

00:27:43.140 --> 00:27:47.270
that we add in iOS 6 so that they don't
interfere with the shadow that you're

00:27:47.270 --> 00:27:49.470
providing in the background image.

00:27:49.980 --> 00:27:53.500
And speaking of shadows,
we can also customize the new

00:27:53.600 --> 00:27:56.740
shadows that were added in iOS 6.

00:27:57.000 --> 00:28:05.180
To do so, just use NavigationBar's
setShadowImage method,

00:28:05.410 --> 00:28:11.610
and you can set the image
that you want to use.

00:28:11.610 --> 00:28:12.770
This is the custom image that we
used in our sample application.

00:28:12.770 --> 00:28:12.770
You can't see it there?

00:28:12.770 --> 00:28:12.770
It's right here.

00:28:12.920 --> 00:28:15.960
It's very small because this
should be a very subtle effect.

00:28:16.080 --> 00:28:19.230
The shadow is generally just
a very -- a few points tall,

00:28:19.330 --> 00:28:23.000
and we can use a one-point wide image
because since it's the same across the

00:28:23.130 --> 00:28:25.860
entire width of the navigation bar,
we don't need to provide

00:28:25.910 --> 00:28:26.620
the entire width.

00:28:26.850 --> 00:28:31.230
We can just use a one-point wide image,
and it'll be tiled or stretched.

00:28:32.960 --> 00:28:37.400
Now that we've customized the background,
the default text that's shown there

00:28:37.550 --> 00:28:39.320
doesn't really match very well.

00:28:39.500 --> 00:28:43.840
But we can customize the
appearance of that text as well.

00:28:44.340 --> 00:28:47.710
To do so,
we can just set a dictionary for

00:28:47.710 --> 00:28:50.440
the bar's title text attributes.

00:28:50.580 --> 00:28:53.640
Title text attributes allows
us to set custom fonts,

00:28:53.740 --> 00:28:58.520
colors, and shadows for the text that's
shown in the navigation bar.

00:28:58.620 --> 00:29:02.290
And this technique is used in many
other UIKit controls as well to set

00:29:02.350 --> 00:29:07.110
a dictionary of text attributes to
customize the text that's shown.

00:29:08.380 --> 00:29:12.640
So we've now customized the
navigation bar's background image,

00:29:12.640 --> 00:29:15.750
its shadow image, and its title.

00:29:16.020 --> 00:29:19.540
The only parts remaining are
the two buttons that are shown.

00:29:19.750 --> 00:29:23.460
And these are represented
by UI bar button items.

00:29:24.150 --> 00:29:28.100
will start customizing the bar
button item with its background.

00:29:28.140 --> 00:29:32.760
And as usual, we'll use a resizable
image for the background.

00:29:33.020 --> 00:29:36.940
If you don't use a resizable image
for your bar button item's background,

00:29:36.970 --> 00:29:40.860
then we'll make it resizable for
you once again by using -- assuming

00:29:40.860 --> 00:29:46.490
a center region of one point and
the rest as left and right end caps.

00:29:49.780 --> 00:29:52.720
Just like with the background
of the navigation bar itself,

00:29:52.720 --> 00:29:56.860
we'll use a different image for
the background in landscape.

00:29:57.190 --> 00:30:00.490
Now,
the images you use for the background

00:30:00.490 --> 00:30:05.850
images for bar button items should
generally be 30 points tall for the

00:30:05.850 --> 00:30:11.620
default bar metrics and 24 points
tall for the landscape bar metrics.

00:30:11.800 --> 00:30:15.350
Once you have your images,
you can set them with the method

00:30:15.730 --> 00:30:18.940
setBackgroundImage for state bar metrics.

00:30:19.060 --> 00:30:21.410
And this is how we can set
these two background images

00:30:21.810 --> 00:30:24.430
for our bar button items.

00:30:25.510 --> 00:30:30.000
If your bars include done style buttons
in addition to bordered style buttons,

00:30:30.190 --> 00:30:32.620
then you may want to set
different background images for

00:30:32.620 --> 00:30:36.790
the two types of buttons so that
they look visually different.

00:30:37.170 --> 00:30:40.670
In iOS 5,
you could do that by setting manually

00:30:40.930 --> 00:30:45.840
a different background image on
each of these two types of buttons.

00:30:45.890 --> 00:30:49.210
But if you use the appearance proxy
to customize all of the background

00:30:49.210 --> 00:30:52.330
images for your bar button items,
then the same background image

00:30:52.680 --> 00:30:56.810
would be used for the bordered
style and done style buttons.

00:30:56.910 --> 00:31:00.840
In iOS 6, we're introducing a method
to make this easier.

00:31:00.880 --> 00:31:04.110
This new method allows you to set
a background image and specify

00:31:04.110 --> 00:31:06.890
a style so that you can have
different background images for

00:31:06.890 --> 00:31:12.290
the bordered and done button items,
even if you use the appearance proxy.

00:31:13.310 --> 00:31:16.030
Next, we'll customize the back button.

00:31:16.110 --> 00:31:18.870
Once again,
this is just a UI bar button item,

00:31:19.010 --> 00:31:22.030
and we can customize this by
using the different method

00:31:22.030 --> 00:31:24.190
setBackButtonBackgroundImage.

00:31:24.270 --> 00:31:27.910
Again, we'll use a resizable image,
and this time we'll use

00:31:27.910 --> 00:31:32.390
asymmetric cap insets for the
asymmetric image that we have.

00:31:33.910 --> 00:31:37.270
Now, when you have all of your images,
depending on your design,

00:31:37.480 --> 00:31:40.350
you may want to customize the
positioning of the different elements

00:31:40.540 --> 00:31:42.560
that are shown in your navigation bar.

00:31:42.690 --> 00:31:45.840
And there's lots of properties
that you can use to do that.

00:31:45.980 --> 00:31:48.740
For the text's position,
you can use these three properties

00:31:49.200 --> 00:31:52.550
to set the positioning of
the back button items text,

00:31:52.680 --> 00:31:58.240
the main title text,
and the text for normal bar button items.

00:31:58.360 --> 00:32:01.340
If you want to change the
positioning of the backgrounds for

00:32:01.390 --> 00:32:05.200
the different bar button items,
you can use these two properties.

00:32:05.350 --> 00:32:08.580
And finally, if you have images for
your bar button items,

00:32:08.720 --> 00:32:12.260
then you can also customize
their positions using the

00:32:12.260 --> 00:32:14.110
image insets property.

00:32:15.720 --> 00:32:19.580
Now, toolbars are customized very
similarly to navigation bars.

00:32:19.700 --> 00:32:22.800
Once again,
we can set a custom background

00:32:23.230 --> 00:32:25.100
image and a custom shadow image.

00:32:25.210 --> 00:32:30.040
And these follow all of the same rules
as their equivalents for navigation bars.

00:32:30.150 --> 00:32:38.150
The only difference is that for toolbars,
the shadow will extend up into the

00:32:38.150 --> 00:32:39.400
content instead of down into the
content as with navigation bars.

00:32:39.960 --> 00:32:43.820
Toolbars also use the same UI bar
button items as navigation bars,

00:32:43.820 --> 00:32:48.130
and these can be customized in the
same way that we talked about earlier.

00:32:48.250 --> 00:32:51.740
However, for toolbars,
you can also use plain

00:32:51.740 --> 00:32:53.620
style bar button items.

00:32:53.860 --> 00:32:57.660
These are using the UI bar
button item style plain type,

00:32:57.760 --> 00:32:59.580
and they look like this.

00:32:59.690 --> 00:33:03.910
And if you want to use a custom image
for your plain style bar button item,

00:33:04.030 --> 00:33:09.010
all you have to do is create a simple
monochrome image like this one.

00:33:09.620 --> 00:33:13.030
These images are drawn as a
stencil and the colors in the

00:33:13.030 --> 00:33:15.140
image are actually ignored.

00:33:15.230 --> 00:33:18.740
So, for example, for this image,
the black will be ignored and the

00:33:18.740 --> 00:33:20.940
image will be colored as white.

00:33:21.010 --> 00:33:23.830
And then the shadow etched effect
that you can see in the toolbar

00:33:24.160 --> 00:33:27.740
when the image is used will be
applied for you by the toolbar.

00:33:27.860 --> 00:33:30.470
So you don't need to include
this in your artwork.

00:33:30.780 --> 00:33:34.700
You can also use the tint color of
both the toolbar and the bar button

00:33:34.770 --> 00:33:40.210
item to change the colorization
that happens for your custom image.

00:33:41.990 --> 00:33:46.490
Now, search bars always include a search
field at the top and can optionally

00:33:46.530 --> 00:33:49.700
include a search bar beneath that.

00:33:50.150 --> 00:33:53.160
And search bars can be
heavily customized as well.

00:33:53.260 --> 00:33:56.280
If we separate out the components,
you can better see which

00:33:56.420 --> 00:33:58.000
parts can be customized.

00:33:58.160 --> 00:34:01.640
You can set a custom background
image that's shown behind.

00:34:01.770 --> 00:34:05.560
Also, a custom background image
for the search field itself,

00:34:05.680 --> 00:34:10.100
which is drawn on top of the
entire search bar background.

00:34:10.250 --> 00:34:12.940
And finally,
you can customize the different icons

00:34:12.940 --> 00:34:17.190
that are shown within the search field,
like this magnifying glass icon.

00:34:17.320 --> 00:34:21.330
Now, the cancel button itself does not
have a direct way to customize it,

00:34:21.330 --> 00:34:24.300
but it's represented by
a UI bar button item.

00:34:24.410 --> 00:34:27.670
And this means that you can use
UI bar button item appearance proxy

00:34:27.780 --> 00:34:32.490
customization to customize it just
like other UI bar button items.

00:34:33.180 --> 00:34:35.750
If you have a scope
bar in your search bar,

00:34:35.800 --> 00:34:38.100
then you can also customize that.

00:34:38.140 --> 00:34:41.600
There's a different background
image for the scope bar,

00:34:41.730 --> 00:34:45.220
and the scope bar also has a
background image and divider

00:34:45.240 --> 00:34:49.990
images that can be customized in
the same way as segmented controls.

00:34:50.930 --> 00:34:54.030
This is what our customized
search bar looks like when you

00:34:54.030 --> 00:34:55.910
put the pieces back together.

00:34:57.640 --> 00:35:02.530
Tab bars are a very complex control
that have a lot of different parts.

00:35:02.670 --> 00:35:07.030
Here's a standard tab bar
and here are its components.

00:35:07.120 --> 00:35:10.100
As you can see,
you can customize the tab bar

00:35:10.150 --> 00:35:14.260
both with the UI tab bar itself
and with the UI tab bar items

00:35:14.620 --> 00:35:17.320
that appear inside of the tab bar.

00:35:17.520 --> 00:35:20.380
On the tab bar,
there's a background image and a shadow

00:35:20.380 --> 00:35:24.490
image that behave in the same way as
the other bars that we've talked about.

00:35:24.700 --> 00:35:27.500
And there's also a
selection indicator image.

00:35:27.590 --> 00:35:31.880
This image is drawn in front of
the background of the tab bar and

00:35:31.880 --> 00:35:34.680
behind the currently selected tab.

00:35:35.490 --> 00:35:38.320
In the tab bar Items,
there's an image and title

00:35:38.640 --> 00:35:41.820
that represent the item,
and there's also title text

00:35:41.820 --> 00:35:46.270
attributes that you can use to
change how the title is drawn.

00:35:49.610 --> 00:35:54.790
Here are the custom images that we
use in our sample apps custom tab bar.

00:35:54.880 --> 00:35:58.770
As you can see, we've customized all of
the images for the tab bar,

00:35:58.770 --> 00:36:04.150
and we're also using different custom
images for the tab bar's items.

00:36:04.340 --> 00:36:07.430
Also,
you may notice that none of the images,

00:36:07.470 --> 00:36:11.160
the custom images that we used,
include any of the text.

00:36:11.570 --> 00:36:14.670
And also, each of these images is
separate from each other.

00:36:14.940 --> 00:36:17.540
We're not mixing them together.

00:36:17.690 --> 00:36:22.340
When we put these back together,
this is the final tab bar that we get.

00:36:24.230 --> 00:36:28.000
Now, whenever you create a tab bar item,
it should have an image

00:36:28.000 --> 00:36:29.260
that represents it.

00:36:29.330 --> 00:36:33.960
These images should be just
simple monochrome stencil images,

00:36:33.960 --> 00:36:38.340
just like the plain style toolbar
items that we talked about earlier.

00:36:38.600 --> 00:36:43.070
And this plain stencil image will
be drawn as gray when the tab bar

00:36:43.130 --> 00:36:46.840
item is unselected and will be
shown with a glowing blue when

00:36:46.920 --> 00:36:48.840
the tab bar item is selected.

00:36:48.910 --> 00:36:51.200
Again,
you can use the tab bar's tint color

00:36:51.580 --> 00:36:56.610
or selected image tint color to
change the colorization that occurs.

00:36:56.980 --> 00:36:59.900
But if you don't like this
default appearance and don't want

00:36:59.900 --> 00:37:04.190
to use it in your application,
you can also set fully custom images

00:37:04.300 --> 00:37:09.180
that are used as is in the tab bar
without any effects applied to them.

00:37:09.530 --> 00:37:12.470
That's what we did in our custom
tab bar in the application,

00:37:12.520 --> 00:37:14.740
and these are the images that we used.

00:37:14.860 --> 00:37:18.610
Notice that the unselected
images have an inner shadow,

00:37:18.610 --> 00:37:21.760
and the selected images have a
metallic gradient that's different

00:37:22.020 --> 00:37:25.100
from the standard blue glowing look.

00:37:25.210 --> 00:37:29.250
To set these kinds of images,
you can use Set the Finished Images

00:37:29.250 --> 00:37:30.800
for the tab bar item.

00:37:30.930 --> 00:37:34.310
The word "finished" here means
that these images should have all

00:37:34.400 --> 00:37:36.250
effects already included in them.

00:37:36.390 --> 00:37:39.800
We won't add any colorization
or shadows or glows to them,

00:37:39.890 --> 00:37:44.270
so you should include any effects that
you want inside of your custom artwork.

00:37:44.940 --> 00:37:49.510
Also, notice that you have to set both
the selected and unselected images

00:37:49.600 --> 00:37:51.100
when you're using this method.

00:37:51.300 --> 00:37:55.100
And this is to make sure that the
two images will match each other.

00:37:55.170 --> 00:37:58.400
Once you've set these,
the images you set will be

00:37:58.520 --> 00:38:00.770
used directly in the tab bar.

00:38:02.110 --> 00:38:06.280
Table views are a very complex topic and
we could probably spend an entire session

00:38:06.280 --> 00:38:08.350
just talking about how to customize them.

00:38:08.510 --> 00:38:12.360
So we'll just talk about a few
different small topics today.

00:38:12.720 --> 00:38:15.120
If you're customizing a
group style table view,

00:38:15.130 --> 00:38:18.460
then you may want to change its
background image from the default

00:38:18.460 --> 00:38:22.640
background so that it better
matches the content that you show.

00:38:22.780 --> 00:38:25.160
To do so,
you can use the setBackgroundView

00:38:25.160 --> 00:38:27.200
method on TableView.

00:38:27.250 --> 00:38:30.640
This allows you to set any kind of
UI view you want as the background that

00:38:30.640 --> 00:38:33.460
will be shown behind the TableView.

00:38:33.530 --> 00:38:37.480
In the sample application,
we've just used a basic image view

00:38:37.480 --> 00:38:39.970
with a tiled image as its contents.

00:38:41.280 --> 00:38:47.150
Another common item to customize is the
headers that are shown in table views.

00:38:47.230 --> 00:38:51.430
And in iOS 6, we're introducing a new
class to make that easier.

00:38:52.040 --> 00:38:56.710
The UI table view header footer view is
the class that we use for the default

00:38:56.710 --> 00:38:59.060
headers that are shown in table views.

00:38:59.190 --> 00:39:01.920
And with this class,
you can now -- it makes it easier

00:39:01.920 --> 00:39:03.940
to do small changes to the headers.

00:39:04.030 --> 00:39:05.840
So, for example,
in the sample application,

00:39:05.930 --> 00:39:08.440
we use the standard headers,
but we just slightly change

00:39:08.440 --> 00:39:12.310
its text color to better
match the rest of our content.

00:39:12.910 --> 00:39:15.980
And finally,
remember that tables include cells

00:39:15.980 --> 00:39:19.670
and headers that are just views,
so you can always add whatever

00:39:19.670 --> 00:39:23.370
custom controls or views you want
to them to do any customization

00:39:23.440 --> 00:39:25.720
you want of your table view.

00:39:26.490 --> 00:39:29.840
All right, now that we've customized
all of the different parts,

00:39:29.840 --> 00:39:34.710
let's see how it looks like when it's all
put together in the sample application.

00:39:48.380 --> 00:39:53.080
As you can see, our application now has a
fully metallic theme to it.

00:39:53.190 --> 00:39:57.000
It has a custom navigation bar,
including the bar button item,

00:39:57.140 --> 00:40:01.860
and it also has a new status bar
color that matches the navigation bar.

00:40:02.040 --> 00:40:04.780
We also have our fully
customized tab bar,

00:40:04.890 --> 00:40:10.100
including a different appearance for
both the selected and unselected tabs.

00:40:10.100 --> 00:40:16.100
We also now have our custom button,
including all of the different states.

00:40:16.100 --> 00:40:19.590
And we have our custom progress view.

00:40:21.170 --> 00:40:26.600
We can also see the customized segmented
control that matches the navigation bar.

00:40:27.150 --> 00:40:29.390
And for the lock button,
if I click just a little

00:40:29.390 --> 00:40:32.710
bit outside of its bounds,
you can see that it's still

00:40:32.730 --> 00:40:35.700
toggled because we're using the
technique point inside with event

00:40:35.830 --> 00:40:38.000
that I talked about earlier.

00:40:39.180 --> 00:40:43.000
Also, all of the controls and the
background image that's shown

00:40:43.000 --> 00:40:46.710
behind them are now customized here.

00:40:47.070 --> 00:40:52.100
And finally, in the Logs view,
we have a customized toolbar and

00:40:52.100 --> 00:40:55.510
our fully customized search bar.

00:40:57.560 --> 00:41:00.270
And this sample application is
actually available for you to

00:41:00.270 --> 00:41:02.740
download from the WWDC website.

00:41:02.840 --> 00:41:07.160
Just go to the webpage for this
talk and you can download it.

00:41:17.170 --> 00:41:19.270
So that's great,
but how does all of this actually

00:41:19.270 --> 00:41:21.640
work in a real shipping application?

00:41:21.900 --> 00:41:25.910
Well, we have Scott Lopatin from
Find My Friends here to talk about

00:41:26.230 --> 00:41:30.550
how they used customization to
customize their app's appearance.

00:41:30.730 --> 00:41:30.730
Scott?

00:41:35.910 --> 00:41:37.400
Thank you, Jacob.

00:41:37.460 --> 00:41:40.080
You'll never believe it,
but Find My Friends uses a ton

00:41:40.080 --> 00:41:42.290
of appearance customization.

00:41:42.890 --> 00:41:45.530
Today I'm going to give you an overview,
a quick overview of the

00:41:45.530 --> 00:41:50.040
Find My Friends skin look,
how we used code organization to put

00:41:50.040 --> 00:41:55.240
all of our skinning code into one place,
and then I'm going to cover some specific

00:41:55.240 --> 00:41:57.040
UI elements and how we skin those.

00:41:57.160 --> 00:42:00.110
If you haven't seen on
Monday on the developer site,

00:42:00.120 --> 00:42:02.810
we actually released beta
2 of Find My Friends,

00:42:02.910 --> 00:42:05.210
which includes some great new features.

00:42:05.330 --> 00:42:09.940
One is this new friends tab,
which includes a split map and

00:42:09.940 --> 00:42:12.680
friend list on the main screen.

00:42:12.770 --> 00:42:15.900
An easy way to find your nearby friends.

00:42:16.040 --> 00:42:19.330
And an industry-first feature which
lets you set geofences on yourself

00:42:19.470 --> 00:42:23.700
or friends which fire notifications
that push to the other person.

00:42:25.560 --> 00:42:29.560
As you can see, Find My Friends includes
this custom leather texture,

00:42:29.630 --> 00:42:33.500
which looks great on a retina
display and especially the new iPad,

00:42:33.590 --> 00:42:37.000
providing an amazing
immersive experience.

00:42:37.010 --> 00:42:38.870
Let's take a look at that.

00:42:40.930 --> 00:42:43.050
Now,
I know what you're probably thinking.

00:42:43.180 --> 00:42:47.550
There's kind of some debate out there
as to whether this is actually a cool

00:42:47.610 --> 00:42:53.800
design or if it's merely kind of a
-- somewhat of a skewed distraction.

00:42:53.960 --> 00:42:56.470
But in any case,

00:42:58.030 --> 00:43:01.450
The application, once you skin it and
provide a custom theme,

00:43:01.590 --> 00:43:04.400
lets it easily stand out amongst
the many different applications

00:43:04.400 --> 00:43:05.800
out there on the App Store.

00:43:05.900 --> 00:43:08.550
And that's probably why
you came to this talk.

00:43:10.190 --> 00:43:15.200
The UI isn't exactly lickable,
but it's kind of alive.

00:43:15.210 --> 00:43:17.580
So when we set up to
make Find My Friends,

00:43:17.680 --> 00:43:22.060
we wanted every single background,
texture, button, selected state,

00:43:22.060 --> 00:43:25.460
unselected state,
everything completely custom.

00:43:25.530 --> 00:43:28.510
This is a ton of images,
especially when you consider

00:43:28.510 --> 00:43:32.340
buttons have control states
and you have 1X and 2X images.

00:43:32.340 --> 00:43:37.820
So how are we going to organize all this
custom theming code in our application?

00:43:37.930 --> 00:43:41.010
Well, we're going to do it with a theme.

00:43:41.730 --> 00:43:46.270
This theme lets us organize
our code into a certain place,

00:43:46.270 --> 00:43:50.720
and I'm going to show you how to
do that in our next part of the

00:43:50.900 --> 00:43:53.470
talk with code organization tips.

00:43:54.050 --> 00:43:57.300
Our theme all started with a protocol.

00:43:57.370 --> 00:44:01.160
Think of this protocol as a catalog.

00:44:01.310 --> 00:44:06.790
of all the different colors, images,
and fonts used throughout

00:44:06.860 --> 00:44:07.880
your application.

00:44:08.030 --> 00:44:11.330
Notice we didn't refer to the colors as
like the red color or the blue color,

00:44:11.340 --> 00:44:15.400
but merely as their usage
within the application.

00:44:15.810 --> 00:44:18.420
You'll also note that to
get an immersive theme,

00:44:18.580 --> 00:44:21.210
you don't have to pick
20 different colors.

00:44:21.300 --> 00:44:26.510
Just a few basic colors that kind of
go together will get you very far.

00:44:29.410 --> 00:44:32.120
Now that we've defined
this theme protocol,

00:44:32.360 --> 00:44:35.160
we can implement it in
many different ways.

00:44:35.280 --> 00:44:38.080
The sample application
uses the same method,

00:44:38.090 --> 00:44:41.700
and that's how Jacob switched between the
two themes with just one line of code.

00:44:41.790 --> 00:44:45.030
So now we're providing a leather theme,
but you can implement any other

00:44:45.030 --> 00:44:49.060
different kind of theme you want based
on user selection or A/B testing when

00:44:49.190 --> 00:44:52.530
you're developing your application
to show off different aspects that

00:44:52.530 --> 00:44:54.830
you might be playing with on the side.

00:44:56.030 --> 00:45:01.870
This theme class can also do some
work to return the current theme,

00:45:01.870 --> 00:45:05.720
let's say, and then anywhere in your
code you can just say theme,

00:45:05.720 --> 00:45:08.480
current theme,
get me those images or colors, fonts,

00:45:08.530 --> 00:45:11.060
whatever,
used throughout your application.

00:45:12.270 --> 00:45:16.260
Now, we have a ton of custom buttons
used throughout the application,

00:45:16.260 --> 00:45:18.720
and we could have made
subclasses for all these,

00:45:18.720 --> 00:45:21.500
but instead we did something
a little bit different.

00:45:21.630 --> 00:45:23.270
First...

00:45:23.600 --> 00:45:26.390
We made an enumeration
of all our button types.

00:45:26.480 --> 00:45:30.560
An add button, a refresh button,
any different types.

00:45:30.690 --> 00:45:34.250
And then we use these types when
we're making our new buttons.

00:45:34.260 --> 00:45:37.860
So anywhere in our code,
here we're creating a new button.

00:45:37.950 --> 00:45:42.890
And immediately we're saying theme
button with type from our current theme.

00:45:44.500 --> 00:45:47.300
In our theme class,
we're defining this method,

00:45:47.350 --> 00:45:48.900
themeButtonWithType.

00:45:48.900 --> 00:45:53.800
And then we can check in this method,
okay, here is the leather button types.

00:45:53.800 --> 00:45:57.560
Let's pull out from the theme
our current background image

00:45:57.560 --> 00:45:59.560
and set this for the button.

00:46:00.250 --> 00:46:05.840
A little trick we used also is to add
the state into this theme button method.

00:46:05.860 --> 00:46:10.030
So if we do button image for state,
we have one method to get all of

00:46:10.030 --> 00:46:15.790
the images for this button and that
method will pick out from which

00:46:16.260 --> 00:46:19.200
state to return the proper image.

00:46:19.240 --> 00:46:22.660
That's reducing the number
of methods on our theme file.

00:46:25.370 --> 00:46:28.520
You'll probably notice that a
lot of your buttons have probably

00:46:28.530 --> 00:46:31.030
the same different styles,
maybe the same font color,

00:46:31.030 --> 00:46:32.130
the same shadow.

00:46:32.240 --> 00:46:36.170
So set all these first and
then override at probably the

00:46:36.220 --> 00:46:38.210
bottom where these differ.

00:46:38.570 --> 00:46:43.410
And you'll probably find that
these are pretty small differences.

00:46:45.610 --> 00:46:48.840
Sleep better at night knowing that
the right images are going to the

00:46:48.930 --> 00:46:52.140
right control state by this trick
of naming the images after the

00:46:52.250 --> 00:46:54.240
control state used in your button.

00:46:54.240 --> 00:46:56.630
Saves a lot of hair loss.

00:46:57.240 --> 00:47:00.580
So to overview,
our theme class defines this protocol,

00:47:00.580 --> 00:47:04.010
this list of all our images, fonts,
and colors.

00:47:04.160 --> 00:47:08.520
We have enumerations of
styles of each type of object,

00:47:08.520 --> 00:47:11.490
buttons or different objects.

00:47:11.720 --> 00:47:15.160
and the main theming methods,
this one line of code we can add

00:47:15.160 --> 00:47:20.500
after creating any of our objects
anywhere in the code to theme.

00:47:20.600 --> 00:47:25.160
Then the concrete implementations of
that protocol can just know how to

00:47:25.170 --> 00:47:29.060
do the work of finding those images,
fonts, and colors.

00:47:29.200 --> 00:47:31.180
At the end of the day,

00:47:31.870 --> 00:47:35.390
You have this one line of code that
wherever you are in your application,

00:47:35.460 --> 00:47:38.230
whenever you're creating a
new button or a new object,

00:47:38.320 --> 00:47:43.090
you can say, yeah, just theme this,
and the theme files will do all the work.

00:47:43.170 --> 00:47:46.260
Another huge benefit is when
you're working with designers,

00:47:46.260 --> 00:47:50.200
you have one place to go to say, oh, yes,
I am using the right color or the right

00:47:50.220 --> 00:47:52.590
shadow offset or the right shadow color.

00:47:54.320 --> 00:47:57.670
Now I'm going to talk about some
specific examples of how we skin some

00:47:57.670 --> 00:48:00.500
of our UI elements in Find My Friends.

00:48:00.590 --> 00:48:03.860
I'm going to talk about
the navigation bar.

00:48:05.060 --> 00:48:07.080
Our new tab bar in 2.0.

00:48:07.080 --> 00:48:09.590
Sand stitching, you'll notice.

00:48:09.700 --> 00:48:12.290
And the segmented controls.

00:48:13.810 --> 00:48:17.240
Starting with the navigation bar,
when we make a navigation controller,

00:48:17.240 --> 00:48:22.160
we're pulling out the navigation bar and
calling that one line of code to theme,

00:48:22.160 --> 00:48:24.190
theme nav bar with style.

00:48:25.120 --> 00:48:28.850
Then we can go through and do the
work such as pulling out a background

00:48:28.850 --> 00:48:32.210
image from our current theme,
whatever that current theme is

00:48:32.300 --> 00:48:35.770
that the theme class manages,
and setting that set background

00:48:35.770 --> 00:48:37.380
image for bar metrics.

00:48:40.190 --> 00:48:43.450
For our bar button items,
we're using appearance when contained

00:48:43.450 --> 00:48:45.000
in UI Navigation Controller.

00:48:45.000 --> 00:48:47.390
And that's because our toolbars
also have bar button items,

00:48:47.400 --> 00:48:49.790
but they might have a
different kind of custom style,

00:48:49.820 --> 00:48:52.710
which we don't want to overlap
with the navigation bars.

00:48:52.790 --> 00:48:57.310
Since our navigation bars have the
same background image in this case,

00:48:57.350 --> 00:49:01.950
we're using appearance when contained
in UI Navigation Controller.

00:49:01.950 --> 00:49:06.280
And this is defined in the theme method
where we're theming the navigation bar.

00:49:06.280 --> 00:49:08.700
Even though we're theming
the navigation bar,

00:49:08.700 --> 00:49:11.810
we can also apply these appearance
proxies for everything related

00:49:11.820 --> 00:49:13.110
to those navigation bars.

00:49:15.480 --> 00:49:21.270
Our background images are nine-part
images with UI Edge insets.

00:49:21.490 --> 00:49:24.550
If these edge insets differ
depending on your theme,

00:49:24.550 --> 00:49:28.690
you can always have the theme also
return edge insets if you'd like.

00:49:29.040 --> 00:49:34.360
And then we define the image with
resizable image with cap insets.

00:49:34.360 --> 00:49:38.600
Little trick we used is this
custom leather texture navigation

00:49:38.600 --> 00:49:40.800
bar background has a texture.

00:49:40.800 --> 00:49:44.870
So you can use the alpha channel of
the background images for the bar

00:49:44.870 --> 00:49:49.250
button items to let the texture shine
through so you don't have any problems

00:49:49.250 --> 00:49:54.530
matching up textures or wasting bits
in your application of extra texture.

00:49:57.660 --> 00:50:00.420
Finally,
styling text with the text -- title

00:50:00.420 --> 00:50:03.050
text attributes that Jacob mentioned.

00:50:03.070 --> 00:50:07.100
A dictionary containing the font,
text color, shadow color,

00:50:07.100 --> 00:50:10.290
and shadow offset used
in the bar button items.

00:50:10.410 --> 00:50:15.320
Again, we're using the appearance proxy,
appearance when contained

00:50:15.320 --> 00:50:15.320
in in this case as well.

00:50:21.180 --> 00:50:27.860
So what we're left with is this main one
line of code where we create a navigation

00:50:27.860 --> 00:50:29.660
controller and say theme nav bar.

00:50:29.660 --> 00:50:33.500
And all the aspects of this navigation
bar are themed with one line of code

00:50:33.500 --> 00:50:35.880
from wherever we are in our application.

00:50:36.730 --> 00:50:39.580
Moving on to tab bars,
done similarly with a

00:50:39.580 --> 00:50:41.360
set background image.

00:50:41.360 --> 00:50:46.970
We'll probably create a theme tab bar
in our theme class and we do some work

00:50:46.970 --> 00:50:50.030
like setting the background image.

00:50:50.890 --> 00:50:54.920
We use finished images for our tab bar,
so for the items when we create them,

00:50:54.970 --> 00:50:58.770
we're setting finished selected
and finished unselected images.

00:50:58.830 --> 00:51:02.260
And you'll notice we're actually
using the same method in our theme

00:51:02.260 --> 00:51:06.160
class to pull out those images,
just set it in Boolean whether

00:51:06.160 --> 00:51:11.350
they're finished or not,
providing -- so then you can look

00:51:11.350 --> 00:51:16.010
in one place to see what images are
actually being returned in this case.

00:51:17.020 --> 00:51:20.890
Our selection indicator image set on the
tab bar is somewhat translucent as well,

00:51:21.020 --> 00:51:25.890
providing that texture to shine
through even when an item is selected.

00:51:26.740 --> 00:51:28.510
And you'll notice
I didn't mention the text,

00:51:28.630 --> 00:51:31.890
and that's because when your
tab bar items are created,

00:51:31.890 --> 00:51:37.200
pull out a localized string from your
localized strings file and set init

00:51:37.210 --> 00:51:40.710
with title with that localized string.

00:51:41.950 --> 00:51:45.160
To style that text,
use our familiar title text

00:51:45.220 --> 00:51:49.060
attributes to set the font,
text color, shadow color,

00:51:49.100 --> 00:51:50.660
and shadow offset.

00:51:51.550 --> 00:51:54.260
In this case,
we used the main appearance proxy,

00:51:54.260 --> 00:51:56.840
not when contained in,
because we have one tab

00:51:56.840 --> 00:51:58.340
bar in our application.

00:51:58.500 --> 00:52:02.660
And even if we had more,
they'd probably look the same,

00:52:02.660 --> 00:52:06.600
so we're just going to set it
for all the tab bar items used.

00:52:08.200 --> 00:52:10.100
Finally, segmented controls.

00:52:10.110 --> 00:52:13.900
We have a few different types of
segmented controls in the application.

00:52:14.000 --> 00:52:18.640
There's a bunch of different parts,
but really it boils

00:52:18.640 --> 00:52:21.280
down to three API calls:
setBackgroundImage, setDividerImage,

00:52:21.280 --> 00:52:21.280
and setTitleTextAttributes.

00:52:21.990 --> 00:52:24.920
For background image,
we have one method defined in our

00:52:24.990 --> 00:52:28.750
theme where we pass through the control
state and set these for the normal,

00:52:28.750 --> 00:52:33.540
selected, highlighted,
and disabled states on our segment.

00:52:35.730 --> 00:52:40.080
These are, again,
nine-part images using UI Edge insets.

00:52:40.330 --> 00:52:44.680
The segmented control knows,
depending on the position of the button

00:52:44.680 --> 00:52:49.780
or the background image in the segment,
where to slice off the edges to stretch

00:52:50.380 --> 00:52:52.700
and make the proper size button.

00:52:52.890 --> 00:52:58.170
So in this case,
the selected is on the left

00:52:58.170 --> 00:52:58.380
and it's chopped off the right
side of the UI Edge inset.

00:53:01.870 --> 00:53:05.320
For divider images, as Jacob mentioned,
you can have different divider

00:53:05.580 --> 00:53:09.120
images depending on if the left is
selected or if the right is selected.

00:53:09.220 --> 00:53:12.290
And you can pull out different
images for all of these.

00:53:12.510 --> 00:53:14.690
In our case, though,
we have the same image no

00:53:14.690 --> 00:53:17.140
matter if the left is selected
or the right is selected,

00:53:17.290 --> 00:53:21.600
so we just do one call with
one image for the normal state,

00:53:21.600 --> 00:53:26.150
and all the other states are picked
up as this is the lowest level.

00:53:26.890 --> 00:53:29.700
Finally,
those familiar title text attributes

00:53:29.700 --> 00:53:33.360
to style the text on the segment
not drawn as background images

00:53:33.370 --> 00:53:35.300
into the segment to control.

00:53:35.450 --> 00:53:38.760
Setting the font, text color,
shadow color, and shadow offset.

00:53:40.820 --> 00:53:44.870
So today I went through an overview
of the Find My Friends skin look,

00:53:45.010 --> 00:53:48.980
getting far with an immersive experience
and not using tons of different colors,

00:53:49.090 --> 00:53:52.240
showed you some code organization
tips of how you can organize your

00:53:52.240 --> 00:53:53.830
code with a theming protocol.

00:53:53.930 --> 00:54:00.150
The sample code provided with the
session uses this as we've done.

00:54:00.360 --> 00:54:03.270
And then I covered some specific
UI elements and how we skin

00:54:03.270 --> 00:54:04.730
those in Find My Friends.

00:54:04.850 --> 00:54:06.490
Back to Jacob.

00:54:13.590 --> 00:54:15.380
Thanks, Scott.

00:54:15.580 --> 00:54:20.500
So today we saw some general tips
when customizing your application,

00:54:20.620 --> 00:54:27.060
including some of the new appearance
changes in iOS 6 and how to use

00:54:27.060 --> 00:54:29.490
resizable images to make your
images smaller and more reusable.

00:54:30.530 --> 00:54:34.860
We saw some specific details about
customizing different UIKit controls,

00:54:34.860 --> 00:54:39.100
including how to prepare your artwork and
how to separate the different elements

00:54:39.210 --> 00:54:42.390
inside of a control to best customize it.

00:54:42.480 --> 00:54:44.720
And finally,
we heard from Scott about how

00:54:44.720 --> 00:54:47.400
Find My Friends customized
their appearance,

00:54:47.600 --> 00:54:51.910
including how they achieved their
skin look and also how you can use

00:54:51.910 --> 00:54:57.400
themes to organize and maintain your
custom artwork and your customizations.

00:54:58.410 --> 00:55:01.730
If you want more information,
you can contact Jake Behrens.

00:55:01.730 --> 00:55:05.430
And please remember to go to the
WWDC website to download our sample

00:55:05.430 --> 00:55:09.620
code so you can check out all of the
techniques that we talked about today.

00:55:09.940 --> 00:55:12.170
There are a few related sessions
that you might be interested in.

00:55:12.390 --> 00:55:14.400
What's New in Cocoa Touch and
Introduction to

00:55:14.430 --> 00:55:16.850
Auto Layout are already over,
but you'll be able to

00:55:16.850 --> 00:55:18.300
watch the videos for those.

00:55:18.350 --> 00:55:21.840
And Introduction to Attributed
Strings is later today,

00:55:21.900 --> 00:55:26.420
and that'll tell you about how you
can do even more customization of the

00:55:26.500 --> 00:55:28.880
text that's shown in your application.