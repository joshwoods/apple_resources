WEBVTT

00:00:14.990 --> 00:00:19.340
My name is Gregory Hughes and I work on
the OS X Accessibility Engineering team.

00:00:19.400 --> 00:00:22.300
I'm really excited to have the
opportunity to be able to speak to

00:00:22.300 --> 00:00:25.340
you today about accessibility on OS X.

00:00:25.490 --> 00:00:27.730
Today we're going to talk about
how to make your applications,

00:00:27.740 --> 00:00:31.240
your custom UI,
your really robust interfaces

00:00:31.240 --> 00:00:34.030
accessible for all users.

00:00:34.260 --> 00:00:36.090
There are three main
areas of today's talk.

00:00:36.100 --> 00:00:39.540
We're going to start out
and talk about technologies.

00:00:39.760 --> 00:00:42.490
This is going to cover some of
the assistive technologies that

00:00:42.490 --> 00:00:46.390
Apple includes in all of our products,
and we're also going to talk a little

00:00:46.390 --> 00:00:49.840
bit about why you might want to
include accessibility in your software.

00:00:50.300 --> 00:00:51.910
We're then going to talk about the API.

00:00:51.970 --> 00:00:55.550
This is the API that you're going to use
to make your software fully accessible.

00:00:55.630 --> 00:00:57.640
It's a really rich and robust API.

00:00:57.660 --> 00:01:01.710
It's incredibly powerful,
yet also easy to use.

00:01:02.400 --> 00:01:05.780
Finally, and perhaps most importantly,
we're going to look at some

00:01:05.780 --> 00:01:07.300
case studies of custom UI.

00:01:07.420 --> 00:01:09.460
When doing research for this talk,
we looked at a lot of

00:01:09.460 --> 00:01:12.810
different applications,
talked to a lot of different developers,

00:01:12.830 --> 00:01:16.090
and we found that one of the places
that developers often get hung up is

00:01:16.170 --> 00:01:18.070
making their custom UI accessible.

00:01:18.190 --> 00:01:21.290
And so we wanted to go through
a few case studies of how you'd

00:01:21.290 --> 00:01:25.050
approach completely custom UI and
custom drawing routines and making

00:01:25.120 --> 00:01:27.320
them fully accessible to all users.

00:01:28.170 --> 00:01:31.100
So, first I want to start
talking about technology.

00:01:31.100 --> 00:01:34.900
And to start off,
I want to reflect on something that

00:01:34.900 --> 00:01:37.940
Tim Cook said in yesterday's keynote.

00:01:38.040 --> 00:01:43.480
Tim said, "The products that we make,
combined with the software you create,

00:01:43.480 --> 00:01:46.080
can fundamentally change the world."

00:01:46.720 --> 00:01:48.840
Those are really powerful words, right?

00:01:49.040 --> 00:01:50.780
Fundamentally change the world.

00:01:50.780 --> 00:01:54.500
Here at Apple, we truly believe that.

00:01:54.500 --> 00:01:58.770
We truly believe that with your help,
we can change the world.

00:02:00.320 --> 00:02:03.060
And part of that is by making
software and hardware fully

00:02:03.060 --> 00:02:04.510
accessible for all users.

00:02:04.510 --> 00:02:06.890
And this is so important to us.

00:02:06.890 --> 00:02:11.650
We work so hard and spend so much
engineering time and resources in

00:02:11.650 --> 00:02:15.330
creating really magical products
that we want everyone to be able

00:02:15.340 --> 00:02:18.890
to pick up the same product,
experience the same sense of magic

00:02:18.890 --> 00:02:22.310
and intrigue and exploration when
they use any of our products,

00:02:22.310 --> 00:02:24.780
regardless of their
abilities or disabilities.

00:02:25.340 --> 00:02:28.060
And so accessibility is
incredibly important to us.

00:02:29.300 --> 00:02:30.360
And so accessibility is
incredibly important to us.

00:02:30.360 --> 00:02:31.300
We don't just talk about accessibility.

00:02:31.300 --> 00:02:32.800
We deliver accessibility.

00:02:32.800 --> 00:02:36.720
We have a ton of accessibility
features throughout the range of

00:02:36.800 --> 00:02:40.980
our products to help users with
a varying degree of abilities.

00:02:41.300 --> 00:02:44.180
On OS X and Mountain Lion,
we've continued to push the bar

00:02:44.180 --> 00:02:47.630
and continued to implement various
accessibility features that are

00:02:47.670 --> 00:02:49.360
going to really help our users.

00:02:59.280 --> 00:03:02.770
And so accessibility allows you to turn
on or turn off various accessibility

00:03:02.770 --> 00:03:04.400
features no matter where you are.

00:03:04.400 --> 00:03:06.390
So if you're at the login window,
in Xcode,

00:03:06.390 --> 00:03:09.350
or in a full-screen mail application,
you can enable or disable

00:03:09.350 --> 00:03:12.460
accessibility features really,
really simply and easily.

00:03:12.460 --> 00:03:15.340
So this is going to help our
users a lot in providing them

00:03:15.340 --> 00:03:19.130
the functionality to get to the
features they need to very quickly.

00:03:20.850 --> 00:03:23.140
Now,
we also have a lot of in-depth features,

00:03:23.140 --> 00:03:25.920
of course, and so to help users get
to those more easily,

00:03:25.920 --> 00:03:28.970
we've redesigned the
accessibility preference pane.

00:03:29.090 --> 00:03:34.140
This new redesign helps users get to
features much more quickly and easily.

00:03:34.370 --> 00:03:39.050
We've grouped things better and
provided more intuitive UI to customize

00:03:39.180 --> 00:03:42.110
the various assistive technologies.

00:03:43.190 --> 00:03:46.440
We've also continued to work really
hard with closed caption content

00:03:46.440 --> 00:03:52.140
providers in creating as much content
as we can on the iTunes store.

00:03:52.220 --> 00:03:56.980
And of course, closed caption content is
available for playback on the Mac,

00:03:56.980 --> 00:03:59.730
on iTunes, on all iOS devices and iPods.

00:04:01.120 --> 00:04:04.300
We've continued to push the
bar of accessibility on iOS.

00:04:04.340 --> 00:04:06.290
As you heard yesterday,
we've introduced some great new

00:04:06.290 --> 00:04:07.790
features like guided access.

00:04:07.870 --> 00:04:12.390
We've done a lot of improvements
to VoiceOver as well in iOS 6.

00:04:14.530 --> 00:04:17.890
One of those products on
iOS and OS X is VoiceOver.

00:04:18.140 --> 00:04:21.740
It's a screen reading software
for users who are blind.

00:04:21.850 --> 00:04:25.830
What a screen reader does is takes
the graphical user interface and

00:04:25.830 --> 00:04:29.730
converts it into a spoken interface
for users who can't see the screen.

00:04:29.850 --> 00:04:32.430
And primarily today I want to talk
about how we're going to make our

00:04:32.470 --> 00:04:35.810
software accessible for this product.

00:04:36.140 --> 00:04:38.130
I really want to focus on it
because it's one of the big

00:04:38.130 --> 00:04:39.600
challenges of software design.

00:04:39.600 --> 00:04:42.600
We spend so long working on
our graphical user interface,

00:04:42.600 --> 00:04:46.220
our point and click interface,
dealing with mouse events,

00:04:46.370 --> 00:04:50.600
that oftentimes it's easy to forget
about users who can't see the screen

00:04:50.600 --> 00:04:52.860
or users who can't use the mouse.

00:04:53.090 --> 00:04:55.900
It's also challenging because
sometimes some of these graphical

00:04:55.900 --> 00:04:59.930
user interfaces are so mouse oriented
that it's difficult to think about how

00:04:59.930 --> 00:05:01.950
someone might use it without a mouse.

00:05:02.020 --> 00:05:06.180
And so we'll talk a bit more
about that in a little while.

00:05:06.940 --> 00:05:12.110
VoiceOver now has been shipping
on the Mac for about six years.

00:05:12.200 --> 00:05:28.070
: VoiceOver is also available on a
wide range of our other products.

00:05:28.070 --> 00:05:28.070
VoiceOver is on OS X, on Apple TV,
on iOS, on the iPod Nano,

00:05:28.070 --> 00:05:28.070
the iPod Shuffle, and the iPod Touch.

00:05:28.070 --> 00:05:28.070
So this is really important.

00:05:28.800 --> 00:05:32.290
The voiceover ships with these
products because someone who's

00:05:32.290 --> 00:05:37.110
blind now can walk up to any Mac and
turn on voiceover and use it.

00:05:38.460 --> 00:05:41.400
So this might not seem
important at first glance,

00:05:41.440 --> 00:05:45.530
but what this means is that someone with
a disability now can walk into a public

00:05:46.360 --> 00:05:51.230
library or walk into a school lab and
use the same computer as the rest of us.

00:05:51.310 --> 00:05:53.950
Someone with a vision impairment
can walk into an Apple store,

00:05:54.040 --> 00:05:57.310
pick up an iPad and feel the same
sense of magic as everyone else

00:05:57.340 --> 00:05:59.280
that comes into an Apple store.

00:05:59.360 --> 00:06:03.620
And this is what's so important to us,
this inclusive technology

00:06:03.630 --> 00:06:05.200
that anyone can use.

00:06:05.250 --> 00:06:08.950
As I said, on the Mac,
VoiceOver has been shipping for six

00:06:09.000 --> 00:06:12.280
years and it's currently installed
on millions of Macs because it

00:06:12.320 --> 00:06:14.720
ships for free with every Mac.

00:06:14.820 --> 00:06:18.120
So our install base is enormous.

00:06:18.160 --> 00:06:21.390
And it's also important to note
here that our install base is

00:06:21.400 --> 00:06:25.180
larger than all of the other
competing screen readers combined.

00:06:25.270 --> 00:06:29.590
And so by far,
we have the largest install base.

00:06:29.660 --> 00:06:32.120
And this is really important
because you really get the most

00:06:32.260 --> 00:06:35.200
bang for your buck making your
software accessible for VoiceOver.

00:06:35.200 --> 00:06:38.300
compared to other products.

00:06:39.350 --> 00:06:42.520
Now, VoiceOver also has a lot of
unparalleled features in the world

00:06:42.540 --> 00:06:44.640
of screen reading technology.

00:06:44.750 --> 00:06:47.770
For example, we have amazing plug and
play Braille support.

00:06:47.890 --> 00:06:49.850
We support a huge list
of Braille displays,

00:06:49.860 --> 00:06:51.360
both Bluetooth and USB.

00:06:51.360 --> 00:06:55.240
And they don't require drivers or
sighted assistants to configure them.

00:06:55.240 --> 00:06:57.680
You can just plug them in
and they work right away.

00:06:59.280 --> 00:07:01.720
And so this is another thing
that's really important to us,

00:07:01.720 --> 00:07:03.520
to be able to allow
users to be independent,

00:07:03.600 --> 00:07:06.930
use the technology on their own without
requiring assistance from other users.

00:07:07.110 --> 00:07:11.090
And we work really hard to continue to
create features like that and also create

00:07:11.090 --> 00:07:14.970
a really collaborative environment,
as you'll see in a little while.

00:07:17.380 --> 00:07:19.990
So those are some of the products.

00:07:20.030 --> 00:07:22.870
A small sample of all of the
assistive technology that

00:07:22.870 --> 00:07:24.300
we work hard here at Apple.

00:07:24.300 --> 00:07:28.440
But you might be wondering yourself,
well, why is accessibility important?

00:07:28.440 --> 00:07:32.400
Why do you want to implement
accessibility in your projects?

00:07:32.760 --> 00:07:37.330
Well, as I talked about,
the first thing is access to everyone.

00:07:37.510 --> 00:07:42.150
We work so hard on our software and our
hardware that we want to go that little

00:07:42.150 --> 00:07:44.780
extra mile to make it fully accessible.

00:07:44.910 --> 00:07:48.640
You work really hard creating these
amazing applications that provide

00:07:48.640 --> 00:07:50.410
a lot of functionality to users.

00:07:50.630 --> 00:07:52.440
In every case,
it's always worthwhile to do that

00:07:52.470 --> 00:07:56.460
little extra 5% of effort to make
that software accessible to everyone,

00:07:56.460 --> 00:07:59.060
regardless of their abilities.

00:08:00.180 --> 00:08:04.570
Accessibility is also important because
it can help expand your user base.

00:08:04.700 --> 00:08:07.890
And it can help expand your
user base by a huge amount.

00:08:08.160 --> 00:08:11.710
In the U.S., there are 10 million
Americans with vision impairments,

00:08:11.960 --> 00:08:15.210
31 million Americans with
hearing impairments,

00:08:15.210 --> 00:08:19.090
and 12 million Americans with
learning disabilities.

00:08:20.140 --> 00:08:23.980
When you add all of this up,
one in five people in the U.S.

00:08:24.010 --> 00:08:27.310
has a disability.

00:08:27.310 --> 00:08:29.690
That's 50 million Americans.

00:08:30.200 --> 00:08:33.100
. Think about that for a second.

00:08:33.100 --> 00:08:35.180
50 million Americans have a disability.

00:08:35.800 --> 00:08:39.220
This is a huge audience for you.

00:08:39.500 --> 00:08:42.450
So because of all the technologies
that we've included in every

00:08:42.450 --> 00:08:45.800
single Mac that we sell,
every single iOS that we sell,

00:08:45.880 --> 00:08:49.430
we've opened up an enormous
market for you to take advantage

00:08:49.430 --> 00:08:52.290
of and for you to implement and
create wonderful software in.

00:08:52.300 --> 00:08:56.040
The best case of this that we've
seen is the education market.

00:08:56.040 --> 00:08:58.890
For students with disabilities,
this market has exploded.

00:08:58.890 --> 00:09:00.420
And it's such a new market.

00:09:00.420 --> 00:09:04.830
It's such a market that's available
for you to create new applications

00:09:04.890 --> 00:09:08.620
and really take advantage of
the openness of the market.

00:09:09.400 --> 00:09:12.610
and your ability to innovate.

00:09:13.100 --> 00:09:16.490
So,
accessibility is also important because

00:09:16.490 --> 00:09:19.200
some markets require accessibility.

00:09:19.310 --> 00:09:22.300
For example, in the US,
a lot of government and education

00:09:22.300 --> 00:09:26.370
markets require software that they
purchase to be fully accessible.

00:09:26.870 --> 00:09:28.190
This is obviously a key thing.

00:09:28.190 --> 00:09:30.820
If the market requires this,
you're going to need to implement it

00:09:30.910 --> 00:09:32.720
in order to compete in that market.

00:09:33.010 --> 00:09:37.090
And also, since the market requires this,
there aren't a lot of other competitors.

00:09:37.190 --> 00:09:42.090
So it's a pretty easy market to compete
in if you implement your accessibility.

00:09:43.060 --> 00:09:47.070
And finally, it's a great way to
gain a competitive edge.

00:09:47.270 --> 00:09:50.110
The accessibility community is a
really vibrant and vocal community,

00:09:50.110 --> 00:09:53.720
and we've seen a lot of applications
go viral just because the developer

00:09:53.720 --> 00:09:57.450
spent a little bit of extra time and
made their application accessible.

00:09:57.730 --> 00:10:01.190
So, it's a great way to really
increase your user base,

00:10:01.190 --> 00:10:07.000
compete in new markets,
and provide access to everyone.

00:10:07.940 --> 00:10:09.160
But how are you going to do this?

00:10:09.160 --> 00:10:10.960
How are you going to
implement this accessibility?

00:10:10.960 --> 00:10:13.740
Hopefully now I've convinced you
that it's the right thing to do,

00:10:13.830 --> 00:10:16.230
that you're going to want to
do this for your projects.

00:10:16.230 --> 00:10:18.850
I'm sure you're wondering
now how to do it.

00:10:20.150 --> 00:10:23.610
Before we really dive into the API,
I thought first we'd take a look

00:10:23.610 --> 00:10:27.660
at what the API actually does,
how the API works with VoiceOver.

00:10:27.660 --> 00:10:30.400
And to do that,
I wanted to start with a demo.

00:10:30.400 --> 00:10:32.060
So here I'm in Calculator.

00:10:32.150 --> 00:10:35.690
I'm going to start VoiceOver by
pressing Command F5 and we'll

00:10:35.860 --> 00:10:37.800
hear a short welcome message.

00:10:39.880 --> 00:10:41.490
Welcome to VoiceOver.

00:10:41.580 --> 00:10:45.690
VoiceOver speaks descriptions of items
on the screen and can be used to control

00:10:45.690 --> 00:10:47.780
the computer using only your keyboard.

00:10:47.780 --> 00:10:53.540
If you already know how to use VoiceOver,
press the V key now.

00:10:53.610 --> 00:10:56.400
If you want to learn
how to use VoiceOver,

00:10:56.400 --> 00:10:58.290
press the space bar now.

00:10:59.310 --> 00:11:01.590
So this is the welcome
message for VoiceOver.

00:11:01.680 --> 00:11:04.890
It's a great opportunity for
users if they accidentally turn

00:11:04.890 --> 00:11:06.690
on VoiceOver to cancel out of it.

00:11:06.690 --> 00:11:10.350
This is also a really good opportunity
to learn how to use VoiceOver.

00:11:10.350 --> 00:11:13.360
Now, VoiceOver, as I said,
is for users who are blind.

00:11:13.420 --> 00:11:16.260
And this class of users isn't
going to be using the mouse

00:11:16.290 --> 00:11:18.260
to navigate the interface.

00:11:18.260 --> 00:11:21.740
So in order to accommodate,
VoiceOver has a lot of custom keystrokes.

00:11:21.740 --> 00:11:24.530
So if you've never used VoiceOver before,
I'd strongly,

00:11:24.530 --> 00:11:27.450
strongly recommend that you go
through our tutorial to learn

00:11:27.450 --> 00:11:29.180
how to use these keystrokes.

00:11:29.200 --> 00:11:32.950
It'll walk you through some examples
and give you an opportunity to

00:11:32.950 --> 00:11:37.320
practice with VoiceOver before you're
let loose in the OS with VoiceOver.

00:11:37.320 --> 00:11:40.210
I happen to already know
how to use VoiceOver.

00:11:40.250 --> 00:11:48.150
So as instructed,
I'm just going to hit the V key.

00:11:48.200 --> 00:12:45.000
[Transcript missing]

00:12:45.180 --> 00:12:48.560
So I'm now going to use some voiceover
commands and navigate around.

00:12:48.620 --> 00:12:51.730
You'll hear various buttons and we'll
do some simple math in the calculator.

00:12:51.740 --> 00:12:53.380
. Three button.

00:12:53.380 --> 00:12:55.580
Press three button.

00:12:55.580 --> 00:12:56.770
Six button.

00:12:56.810 --> 00:12:58.050
Add button.

00:12:58.180 --> 00:12:59.400
Press add button.

00:12:59.470 --> 00:13:00.540
Six button.

00:13:00.660 --> 00:13:01.940
Press, six button.

00:13:02.020 --> 00:13:02.870
Add button.

00:13:02.940 --> 00:13:04.140
Equals default button.

00:13:04.140 --> 00:13:06.300
Press equals default button.

00:13:06.300 --> 00:13:08.330
Nine.

00:13:08.950 --> 00:13:13.140
So, by using Voice over here,
I was able to navigate around the app,

00:13:13.380 --> 00:13:16.960
hear various buttons,
and also press on those buttons and

00:13:16.960 --> 00:13:19.070
then finally get to the results.

00:13:20.120 --> 00:13:22.730
So, the question now is how
is VoiceOver doing this?

00:13:22.810 --> 00:13:25.040
How is VoiceOver getting
all of this information from

00:13:25.040 --> 00:13:26.500
the calculator application?

00:13:26.500 --> 00:13:29.400
VoiceOver off.

00:13:31.370 --> 00:13:34.410
Well, Calculator is its own application.

00:13:34.540 --> 00:13:37.300
It's running in its own process space.

00:13:37.580 --> 00:13:39.600
VoiceOver is also its own application.

00:13:39.760 --> 00:13:41.900
It's running in a completely
different process space.

00:13:41.910 --> 00:13:44.530
VoiceOver is not running in
the same process space as all

00:13:44.530 --> 00:13:46.040
of the other applications.

00:13:47.040 --> 00:13:49.820
So there's obviously some kind
of communication going on here.

00:13:49.820 --> 00:13:52.180
And between these two,
there's an IPC layer,

00:13:52.250 --> 00:13:56.370
an interprocess communication layer,
that happens to use Mach messaging.

00:13:56.370 --> 00:14:00.130
But you really don't need to worry about
that layer because we wrap it up really,

00:14:00.230 --> 00:14:02.880
really nicely with the
NS Accessibility Protocol.

00:14:02.900 --> 00:14:06.400
So we deal with all the packaging,
all the communication between the

00:14:06.400 --> 00:14:10.370
application and VoiceOver or the
application and any assistive technology.

00:14:10.400 --> 00:14:14.050
And you just need to adhere to the
NS Accessibility Protocol and we'll do

00:14:14.050 --> 00:14:16.170
all the other heavy lifting for you.

00:14:17.040 --> 00:14:19.180
So, what does that protocol look like?

00:14:19.180 --> 00:14:20.890
What does it do?

00:14:22.350 --> 00:14:24.540
The protocol provides a lot of things.

00:14:24.650 --> 00:14:27.800
One thing that it provides are
things like the description.

00:14:28.550 --> 00:14:31.150
In Calculator,
the description and the title of those

00:14:31.150 --> 00:14:34.350
buttons were things like 6 or plus.

00:14:34.350 --> 00:14:37.370
And with all standard Cocoa controls,
you're going to be able to provide that

00:14:37.370 --> 00:14:39.290
information right in Interface Builder.

00:14:39.300 --> 00:14:42.230
In Interface Builder here,
we're looking at the inspector,

00:14:42.230 --> 00:14:45.200
and you can see you can provide
the accessibility description,

00:14:45.470 --> 00:14:48.350
the help tag, the title element,
and the linked element.

00:14:48.360 --> 00:14:51.410
So for all your standard Cocoa controls,
it's going to be really easy

00:14:51.410 --> 00:14:52.880
to provide accessibility.

00:14:52.880 --> 00:14:55.630
And we'll take a little bit
deeper look at that in a bit.

00:14:56.580 --> 00:14:59.740
But the point here I want to make is
that you should always use standard

00:14:59.740 --> 00:15:01.560
Cocoa controls whenever possible.

00:15:01.560 --> 00:15:05.440
Now, I said in the beginning that we're
going to look at some custom UI,

00:15:05.440 --> 00:15:08.880
and we wholeheartedly know
that it's not always possible.

00:15:08.880 --> 00:15:12.570
But the first thing you always want to
think about when you have a piece of

00:15:12.570 --> 00:15:15.260
UI is if you can use a Cocoa control,
you should.

00:15:15.300 --> 00:15:17.750
Because you're going to be able
to take advantage of all the

00:15:17.790 --> 00:15:20.400
accessibility work that we've done,
all of the event handling

00:15:20.400 --> 00:15:22.800
work that we've done,
and really also take advantage of

00:15:22.800 --> 00:15:24.420
any changes that come in the future.

00:15:26.160 --> 00:15:28.690
So what if you're not using
a standard Cocoa control?

00:15:29.000 --> 00:15:31.790
What if you have a custom control?

00:15:32.000 --> 00:15:35.300
Well, we have a nice little
recipe for custom controls.

00:15:35.430 --> 00:15:38.400
First thing you're going to want
to do is subclass appropriately.

00:15:38.530 --> 00:15:41.820
So if you have something that
looks kind of like an NS Button,

00:15:41.820 --> 00:15:45.040
behaves kind of like an NS Button,
but you have some little

00:15:45.040 --> 00:15:48.810
slightly different functionality,
it's probably going to be best to inherit

00:15:48.810 --> 00:15:50.910
right from NS Button and NS Button cell.

00:15:50.920 --> 00:15:53.920
Part of the reason for this
is that we work really,

00:15:53.920 --> 00:15:57.010
really hard to make your
job as easy as possible.

00:15:57.010 --> 00:15:59.800
We want to do as much work as
we can so that you can make

00:16:00.000 --> 00:16:01.780
your applications accessible.

00:16:01.900 --> 00:16:03.000
Thank you.

00:16:03.180 --> 00:16:05.480
In doing that,
we will provide a lot of accessibility

00:16:05.480 --> 00:16:08.000
functionality on NS Button to begin with.

00:16:08.000 --> 00:16:11.400
If you have something that behaves like
a button and you inherit from NS Button,

00:16:11.530 --> 00:16:15.000
you will get a lot of our
accessibility work for free.

00:16:15.970 --> 00:16:20.860
So after you've subclassed appropriately,
you're going to want to figure out

00:16:20.900 --> 00:16:23.900
what accessibility attributes you
need to provide for your specific UI.

00:16:23.900 --> 00:16:27.650
The way to do this is to look up the
Apple documentation accessibility

00:16:27.980 --> 00:16:30.080
attributes and roles reference.

00:16:30.140 --> 00:16:33.620
And here we're looking at the attributes
that we need to provide for a button.

00:16:33.640 --> 00:16:36.560
This will tell us what attributes
are required and what attributes

00:16:36.620 --> 00:16:37.980
are optional for a button.

00:16:37.980 --> 00:16:42.020
For a button, there's about 10 attributes
that are required and one action

00:16:42.020 --> 00:16:43.610
that you need to implement.

00:16:44.190 --> 00:16:46.530
As we'll see later,
you don't need to implement all of these.

00:16:46.560 --> 00:16:48.060
It's actually much, much more reasonable.

00:16:50.180 --> 00:16:54.100
Another way to get to that information
is to use Accessibility Inspector.

00:16:54.180 --> 00:16:57.970
Accessibility Inspector is a tool that
allows you to hover the mouse over

00:16:57.970 --> 00:17:01.850
any piece of UI and it will show you
all the accessibility information.

00:17:02.000 --> 00:17:05.090
This is a great tool for figuring
out which of the optional attributes

00:17:05.160 --> 00:17:06.430
you might want to provide.

00:17:06.550 --> 00:17:09.030
So the documentation will
tell you what's required.

00:17:09.210 --> 00:17:12.010
The optional attributes you
can figure out by looking at

00:17:12.010 --> 00:17:14.870
any other piece of UI that you
want to mimic and look at what

00:17:14.910 --> 00:17:17.290
accessibility attributes it supports.

00:17:17.740 --> 00:17:21.260
Accessibility Inspector is even
easier than ever to get to.

00:17:21.300 --> 00:17:23.390
Right now you can just
click on the Xcode menu,

00:17:23.480 --> 00:17:26.610
then click on Open Developer Tool and
Accessibility Inspector is

00:17:26.610 --> 00:17:27.700
right in that menu.

00:17:27.700 --> 00:17:30.580
So there are some great
WWDC talks in the past that go

00:17:30.580 --> 00:17:34.180
into more depth on Accessibility
Inspector and how to use it,

00:17:34.180 --> 00:17:37.450
so I'd strongly recommend looking
at those if you're more curious

00:17:37.470 --> 00:17:39.130
about Accessibility Inspector.

00:17:40.770 --> 00:17:43.680
So we've subclassed appropriately
and figured out what

00:17:43.680 --> 00:17:45.290
attributes we need to support.

00:17:45.390 --> 00:17:47.630
How do we actually support them now?

00:17:47.730 --> 00:17:51.460
Well, to do that, we're going to use the
NS Accessibility Protocol.

00:17:51.580 --> 00:17:54.630
This is the API that provides
the accessibility information

00:17:54.630 --> 00:17:56.890
to any assistive technology.

00:17:57.030 --> 00:17:59.540
There's really six key main parts.

00:17:59.730 --> 00:18:02.010
First is ignored.

00:18:02.100 --> 00:18:04.740
As we'll see in a little bit,
this is where a lot of

00:18:04.740 --> 00:18:06.220
developers get hung up.

00:18:06.220 --> 00:18:08.980
You want to make sure that your custom
UI is not ignored by accessibility.

00:18:09.480 --> 00:18:10.950
Next, attributes.

00:18:11.130 --> 00:18:14.640
Attributes are things like title,
description.

00:18:14.990 --> 00:18:17.130
And for an attribute,
you're going to need to provide

00:18:17.150 --> 00:18:20.560
which attributes you support,
a getter for those attributes,

00:18:20.560 --> 00:18:22.890
and a setter for those attributes.

00:18:23.920 --> 00:18:26.300
We then have parameterized attributes.

00:18:26.400 --> 00:18:28.280
And these are attributes
that take a parameter.

00:18:28.430 --> 00:18:32.110
For example,
string for range or line for index.

00:18:32.240 --> 00:18:34.040
Just like attributes,
you're going to need to provide which

00:18:34.180 --> 00:18:36.980
parameterized attributes you support,
and you're going to need to

00:18:36.980 --> 00:18:40.390
provide a getter for those
parameterized attributes.

00:18:41.400 --> 00:18:43.150
Actions are similar.

00:18:43.490 --> 00:18:46.400
Actions are things like press, increment,
or decrement.

00:18:46.540 --> 00:18:49.240
For an action,
you're going to need to provide which

00:18:49.250 --> 00:18:54.130
actions are supported and the ability
for VoiceOver to perform those actions.

00:18:55.940 --> 00:18:59.400
: Hit testing and focus
testing is really important,

00:18:59.420 --> 00:19:01.540
but for the most part,
we're going to do all

00:19:01.540 --> 00:19:02.590
of this work for you.

00:19:02.620 --> 00:19:03.900
It's something to be aware of.

00:19:03.900 --> 00:19:06.890
In some advanced cases,
you're going to need to implement these.

00:19:06.890 --> 00:19:08.970
And again,
there have been some great past

00:19:08.970 --> 00:19:12.780
WWDC talks on advanced accessibility,
which we'll talk more about these.

00:19:13.100 --> 00:19:15.990
But hit testing and focus
testing help VoiceOver figure

00:19:16.060 --> 00:19:17.590
out what's on the screen.

00:19:17.590 --> 00:19:20.860
If your hit testing doesn't work,
then we can't figure out

00:19:20.860 --> 00:19:23.610
what's under the mouse,
and things like accessibility

00:19:23.610 --> 00:19:23.610
inspector also won't work.

00:19:24.300 --> 00:19:26.910
Finally, notifications,
which are probably the most

00:19:26.910 --> 00:19:28.210
advanced part of this API.

00:19:28.500 --> 00:19:31.990
You rarely need them,
but notifications are for doing things

00:19:31.990 --> 00:19:36.970
like informing voiceover when the focus
changes or the value of an item changes.

00:19:37.090 --> 00:19:39.330
So, those are the six key parts.

00:19:39.570 --> 00:19:41.890
How do we actually implement them?

00:19:42.910 --> 00:19:45.810
Well, first accessibility is ignored.

00:19:46.000 --> 00:19:48.900
As I said and I will say
multiple times again,

00:19:48.980 --> 00:19:50.870
this is really important.

00:19:51.000 --> 00:19:54.190
By default,
NSVue is ignored by accessibility.

00:19:54.300 --> 00:19:57.470
So if you inherit from NSVue,
your view is going to be ignored

00:19:57.470 --> 00:20:00.960
by accessibility and completely
skipped over by voiceover.

00:20:00.960 --> 00:20:04.560
We do this because in a lot of
applications there are tons of NSVues.

00:20:04.560 --> 00:20:07.690
We've seen 10 or even 100
NSVues deep just to get the

00:20:07.760 --> 00:20:09.550
layout that a developer wants.

00:20:09.770 --> 00:20:12.780
So we can't let a voiceover user
land on every single one of those

00:20:12.790 --> 00:20:16.560
hundreds of empty NSVues or NSVues
that are just there for formatting.

00:20:16.560 --> 00:20:20.170
So we ignore NSVue by default.

00:20:21.750 --> 00:20:22.910
Then there are the attributes.

00:20:23.000 --> 00:20:24.330
As I said,
you're going to need to provide

00:20:24.340 --> 00:20:25.600
which attributes are supported.

00:20:25.740 --> 00:20:28.980
You're going to do this with
accessibility attribute names.

00:20:29.070 --> 00:20:32.120
And you're going to need to provide
a way for us to get at an attribute.

00:20:32.250 --> 00:20:34.870
You're going to do that with
accessibility attribute value.

00:20:34.970 --> 00:20:40.370
This takes in an attribute and
returns an object that represents

00:20:40.600 --> 00:20:43.070
the value of that attribute.

00:20:43.070 --> 00:20:43.070
Now, attributes are also settable.

00:20:43.470 --> 00:20:46.120
So you're going to implement the
accessibility attribute is set-able

00:20:46.120 --> 00:20:51.630
method and accessibility set value for
attribute method to allow VoiceOver to

00:20:51.660 --> 00:20:54.870
set a specific attribute for your value,
for your object.

00:20:54.940 --> 00:20:58.090
Now, parameterized attributes are
pretty much the same way.

00:20:58.090 --> 00:21:02.040
You're going to report which
attributes you support by responding

00:21:02.040 --> 00:21:05.420
to parameterized attribute name,
accessibility parameterized

00:21:05.430 --> 00:21:06.220
attribute names.

00:21:06.620 --> 00:21:09.900
And you're also going to provide
a way for us to get the value

00:21:09.910 --> 00:21:13.560
for an attribute given a specific
parameter with accessibility

00:21:13.560 --> 00:21:15.700
attribute value for parameter.

00:21:15.720 --> 00:21:20.740
So this is where something like
range for line will take in a line

00:21:20.740 --> 00:21:25.890
number and return NS range for that,
as we'll see in a minute.

00:21:26.890 --> 00:21:28.450
Now, there are also actions.

00:21:28.470 --> 00:21:30.350
Just like attributes,
you're going to need to provide

00:21:30.350 --> 00:21:33.440
which actions are supported
with accessibility action names.

00:21:33.440 --> 00:21:35.960
This is going to return
an array of action names.

00:21:35.960 --> 00:21:39.850
For example,
things like AX Press or AX Increment.

00:21:40.080 --> 00:21:42.240
Then you're going to need to provide
a way for us to get a description,

00:21:42.240 --> 00:21:44.750
a human readable
description for an action.

00:21:44.800 --> 00:21:47.300
It's accessibility action description.

00:21:47.500 --> 00:21:50.650
And finally,
you're going to need to provide a

00:21:50.720 --> 00:21:52.190
way for us to perform an action.

00:21:52.230 --> 00:21:57.080
Accessibility perform action.

00:22:00.130 --> 00:22:02.970
Finally, hit testing and focus testing.

00:22:03.120 --> 00:22:06.240
As I said, one of the more advanced
parts of the protocol.

00:22:06.420 --> 00:22:08.130
Given a point,
you would return an object that

00:22:08.230 --> 00:22:11.200
represents the accessibility
object at that point.

00:22:11.200 --> 00:22:14.300
Assuming you're inheriting from NSVU,
we're going to do most

00:22:14.300 --> 00:22:15.750
of this work for you.

00:22:15.880 --> 00:22:18.330
Same thing with accessibility
focused UI element.

00:22:18.560 --> 00:22:20.880
This is the element that
currently has keyboard focus.

00:22:20.880 --> 00:22:23.220
So it's really,
really important that both of

00:22:23.220 --> 00:22:26.750
these behave correctly in order
for voiceover to work correctly.

00:22:28.180 --> 00:22:31.100
Lastly, we have the notifications.

00:22:31.250 --> 00:22:34.500
And posting notifications is
something you will do with the value

00:22:34.530 --> 00:22:38.420
changes or you need to do something
special with keyboard focus.

00:22:38.560 --> 00:22:40.650
But again, for the most part,
we're going to deal entirely

00:22:40.740 --> 00:22:42.110
with notifications for you.

00:22:42.220 --> 00:22:43.400
It's just something to be aware of.

00:22:43.430 --> 00:22:46.680
It's one of those pretty
advanced parts of the protocol,

00:22:46.680 --> 00:22:51.070
which you can learn more about in the
past advanced accessibility talks.

00:22:53.940 --> 00:22:57.100
So we're going through our recipe again.

00:22:57.150 --> 00:23:00.660
First thing we've done is
subclassed appropriately.

00:23:00.660 --> 00:23:02.200
We've figured out what
attributes we need.

00:23:02.340 --> 00:23:06.500
We've figured out what NS accessibility
protocols we need to implement.

00:23:06.960 --> 00:23:10.520
One key part of this is
to always call super.

00:23:10.630 --> 00:23:14.030
As I said, we work really hard to make
your lives as easy as possible.

00:23:14.070 --> 00:23:16.520
We want to do the hit
testing for you when we can.

00:23:16.630 --> 00:23:18.100
We want to do the focus testing.

00:23:18.100 --> 00:23:20.560
We want to report the bounds
and the position on screen

00:23:20.560 --> 00:23:22.700
of every object that we can.

00:23:22.780 --> 00:23:26.500
So you need to allow us to do that,
and always call super for any

00:23:26.500 --> 00:23:27.710
attributes that you don't handle.

00:23:27.820 --> 00:23:30.000
And we'll see lots of examples of this.

00:23:30.170 --> 00:23:32.870
But accessibility is ignored,
and forgetting to call super

00:23:33.050 --> 00:23:35.820
are two of the biggest problems
I've seen developers run into.

00:23:35.920 --> 00:23:37.800
And they're really,
really simple things to fix

00:23:37.800 --> 00:23:38.800
once you know about them.

00:23:41.000 --> 00:23:43.400
Finally,
we're going to want to test our results.

00:23:43.500 --> 00:23:45.120
We're going to want to
look at our application,

00:23:45.120 --> 00:23:48.070
look at it with voiceover,
and see how well it behaves with all

00:23:48.110 --> 00:23:50.470
of the new accessibility information.

00:23:51.980 --> 00:23:55.140
So, let's look at a few case studies now.

00:23:55.240 --> 00:23:58.430
Let's look at some custom
UI that does its own drawing,

00:23:58.500 --> 00:24:02.300
its own event handling,
and how we might make them accessible.

00:24:02.440 --> 00:24:06.130
There are four pieces of UI that
I wanted to look at today.

00:24:06.300 --> 00:24:08.690
First, a pretty simple button.

00:24:08.780 --> 00:24:10.370
It does its own custom drawing,
it's going to have its

00:24:10.460 --> 00:24:14.300
own highlight state,
and do some other special things that we

00:24:14.300 --> 00:24:16.630
couldn't get with a standard NS button.

00:24:17.140 --> 00:24:21.290
Then, a custom text area,
a static text field.

00:24:21.400 --> 00:24:24.550
This might be used in something
like a greeting card application

00:24:24.550 --> 00:24:28.600
or a presentation application where
you can't use the standard NS text

00:24:28.660 --> 00:24:32.770
field or NS text view and you
want to do your own text layout.

00:24:33.560 --> 00:24:36.700
Then we're going to look at a multi-line,
multi-column text field.

00:24:36.900 --> 00:24:38.100
This is the same case as before.

00:24:38.100 --> 00:24:42.390
We want to do our own text layout,
use our own text rendering engine.

00:24:42.570 --> 00:24:50.560
: We are still trying to
make it accessible for users

00:24:50.560 --> 00:24:50.560
with visual impairments.

00:24:51.330 --> 00:24:53.920
Finally,
we're going to look at a custom stepper.

00:24:54.100 --> 00:24:57.110
Now, in this case, from our HI team,
they wanted a stepper

00:24:57.110 --> 00:24:59.700
with a specific look,
a specific animation,

00:24:59.860 --> 00:25:04.040
and our engineering team decided the
best way to do that is with OpenGL.

00:25:04.150 --> 00:25:06.440
So, in this case,
we're going to actually look at how

00:25:06.440 --> 00:25:10.140
you would make something that's drawn
entirely in OpenGL fully accessible.

00:25:11.310 --> 00:25:14.040
We're going to look at this
today with our sample app called

00:25:14.040 --> 00:25:15.950
Accessibility UI Examples.

00:25:16.080 --> 00:25:18.760
This app is available for download and
you can look at all the source code,

00:25:18.760 --> 00:25:22.240
so don't worry about feverishly
writing anything down.

00:25:23.290 --> 00:25:25.380
So let's take a quick look at that now.

00:25:25.460 --> 00:25:27.880
So here we have our application.

00:25:27.960 --> 00:25:29.950
And the first object here
that we're going to look at is

00:25:29.950 --> 00:25:31.280
just a standard Cocoa button.

00:25:31.280 --> 00:25:32.270
It says Apple on it.

00:25:32.330 --> 00:25:35.350
And when I press it,
the press count increments.

00:25:35.360 --> 00:25:40.290
Next is a standard NS button that
has an up image and a down image.

00:25:40.500 --> 00:25:43.290
Again, this is just a standard control.

00:25:44.210 --> 00:25:46.260
Next we have our custom button.

00:25:46.370 --> 00:25:49.580
And this we created because we
wanted more functionality than the

00:25:49.580 --> 00:25:51.220
standard button could provide us.

00:25:51.300 --> 00:25:53.420
In this case we wanted to
have a highlight state so that

00:25:53.420 --> 00:25:56.700
when I hover my mouse over the
button it changes highlight.

00:25:56.850 --> 00:26:03.610
And it also has the up
image and the down image.

00:26:03.610 --> 00:26:03.610
Then the core text arc.

00:26:15.880 --> 00:26:15.880
The multi-line, multi-column text field.

00:26:15.880 --> 00:26:15.880
And finally,
our custom stepper with custom animation.

00:26:15.880 --> 00:26:15.880
So the first thing we're
going to want to do is take a

00:26:15.880 --> 00:26:15.880
look at these with voiceover.

00:26:16.670 --> 00:26:19.520
So let's turn on VoiceOver now and
navigate through and see what we hear.

00:26:19.600 --> 00:26:23.890
VoiceOver on accessibility
UI examples copy.

00:26:24.130 --> 00:26:25.600
Press count two.

00:26:25.600 --> 00:26:29.590
Apple button.

00:26:29.590 --> 00:26:29.590
Press Apple button.

00:26:30.100 --> 00:26:32.210
So we see here I was able
to navigate to the standard

00:26:32.210 --> 00:26:34.130
control and use it just fine.

00:26:34.220 --> 00:26:36.090
This is a really important point.

00:26:36.230 --> 00:26:38.570
For this standard button,
I literally needed to do no

00:26:38.570 --> 00:26:39.990
work to make it accessible.

00:26:39.990 --> 00:26:44.440
This is where we're continuing to
work hard to make your lives easy.

00:26:44.510 --> 00:26:46.640
When you make a standard button
like this with a standard label,

00:26:46.710 --> 00:26:48.820
it's fully accessible
right out of the box.

00:26:48.820 --> 00:26:51.100
And as I navigated there,
I landed on that label

00:26:51.100 --> 00:26:52.310
that said press count.

00:26:52.540 --> 00:26:54.160
That's a standard NS text field.

00:26:54.160 --> 00:26:56.900
So again,
fully accessible right out of the box.

00:26:56.900 --> 00:26:58.900
You need to do zero work for those.

00:27:00.580 --> 00:27:02.700
Let's look at the next example where
I have a button that's just an image.

00:27:02.700 --> 00:27:07.820
And as button with image,
press count for button.

00:27:08.090 --> 00:27:11.590
So here, VoiceOver just says button,
because that's all of the

00:27:11.650 --> 00:27:12.490
information that we have.

00:27:12.590 --> 00:27:16.000
We don't have any other information
other than this is a button.

00:27:16.110 --> 00:27:17.980
So since this is a
standard Cocoa control,

00:27:18.070 --> 00:27:21.630
this one's really, really simple to fix,
and we can do it right now.

00:27:21.710 --> 00:27:23.480
VoiceOver off.

00:27:24.380 --> 00:27:29.100
If we launch the project in Xcode,
right here I have the nib loaded.

00:27:29.180 --> 00:27:34.280
If I click on the button and
look at the identity inspector,

00:27:34.520 --> 00:27:37.080
Under here you see accessibility
identity and I can enter a

00:27:37.080 --> 00:27:39.200
description right in here.

00:27:39.320 --> 00:27:45.340
So I'm going to type in Apple,
save and run my project.

00:27:50.470 --> 00:27:52.550
And now let's look at
this again with VoiceOver.

00:27:52.600 --> 00:27:53.370
VoiceOver on.

00:27:53.440 --> 00:27:54.150
Accessibility.

00:27:54.250 --> 00:27:54.850
Press count.

00:27:54.940 --> 00:27:55.320
Zero.

00:27:55.350 --> 00:27:57.110
Button.

00:27:57.120 --> 00:28:02.730
: Something went wrong.

00:28:02.730 --> 00:28:02.730
Let's try that again.

00:28:10.440 --> 00:28:11.390
VoiceOver on.

00:28:11.420 --> 00:28:12.400
Press count zero.

00:28:12.400 --> 00:28:13.900
Apple button.

00:28:14.090 --> 00:28:14.900
There we go.

00:28:14.900 --> 00:28:16.720
So we now land on the button.

00:28:16.730 --> 00:28:17.970
It says Apple button.

00:28:18.120 --> 00:28:18.890
Really, really simple.

00:28:18.890 --> 00:28:21.400
Just a quick change in the nib.

00:28:22.000 --> 00:28:24.740
So let's look at the next case,
our custom button.

00:28:24.820 --> 00:28:26.040
Custom button.

00:28:26.140 --> 00:28:27.770
Press count zero.

00:28:27.850 --> 00:28:28.530
Apple button.

00:28:28.540 --> 00:28:31.640
Close.

00:28:32.190 --> 00:28:33.990
Voice over off.

00:28:36.020 --> 00:28:37.900
Sorry, that wasn't supposed to work yet.

00:28:37.900 --> 00:28:41.200
VoiceOver on accessibility UI exam.

00:28:41.450 --> 00:28:44.400
Let's look at the custom button now
before I run the example that has

00:28:44.420 --> 00:28:46.720
all the accessibility work done.

00:28:46.800 --> 00:28:48.450
Press count zero.

00:28:48.550 --> 00:28:50.180
An example of a custom.

00:28:50.270 --> 00:28:52.800
So here,
VoiceOver skipped right over the button.

00:28:52.970 --> 00:28:54.210
VoiceOver didn't even land on it.

00:28:54.290 --> 00:28:56.020
VoiceOver knows nothing about it.

00:28:56.110 --> 00:28:58.570
And this is because there's
no accessibility information

00:28:58.570 --> 00:28:59.640
for VoiceOver to get to.

00:28:59.840 --> 00:29:02.750
This is also because right
now it's reporting that it

00:29:02.750 --> 00:29:04.690
is ignored by accessibility.

00:29:05.060 --> 00:29:06.440
Let's look at the custom arc.

00:29:06.510 --> 00:29:07.500
Core text arc.

00:29:07.740 --> 00:29:08.800
An example of table.

00:29:08.850 --> 00:29:10.630
An example of table.

00:29:10.700 --> 00:29:14.770
So again, I can navigate around it,
but I can't actually land on the text.

00:29:14.840 --> 00:29:15.740
Our multi-column sample.

00:29:15.740 --> 00:29:16.970
Core text columns.

00:29:17.210 --> 00:29:19.780
An example of a Zen app table.

00:29:20.170 --> 00:29:23.100
I can navigate around it,
but I can't land on it.

00:29:23.190 --> 00:29:25.430
I'm sure you can guess what
will happen with the stepper,

00:29:25.430 --> 00:29:27.930
I'll be able to navigate around
it but I can't land on it.

00:29:27.930 --> 00:29:30.960
This is because none of the
accessibility information is

00:29:31.060 --> 00:29:32.530
there for VoiceOver to get to.

00:29:32.560 --> 00:29:35.780
This is also the point at which a
lot of developers feel frustrated.

00:29:35.820 --> 00:29:39.070
They feel that VoiceOver can't get to
any of their UI and it's hopeless and

00:29:39.070 --> 00:29:40.670
they might as well not do anything.

00:29:40.670 --> 00:29:43.380
You'll see in a little bit that
it's actually really simple.

00:29:43.380 --> 00:29:45.950
Just by saying that accessibility
is not ignored for your view,

00:29:45.950 --> 00:29:47.660
you're going to let VoiceOver land on it.

00:29:47.670 --> 00:29:50.850
And then you're just going to need to
implement a few methods to provide a

00:29:50.900 --> 00:29:55.610
great accessibility user experience.

00:29:55.610 --> 00:29:55.610
VoiceOver off.

00:29:56.290 --> 00:30:01.310
So let's start by looking at how we're
going to make a button fully accessible.

00:30:01.600 --> 00:30:05.230
Well, we're going to follow our
recipe that we outlined earlier.

00:30:05.320 --> 00:30:07.260
We're first going to
subclass appropriately,

00:30:07.420 --> 00:30:09.500
figure out which attributes
we need to implement,

00:30:09.500 --> 00:30:13.840
implement those attributes,
and finally test.

00:30:13.930 --> 00:30:17.030
Now, for the purposes of demonstration,
if I had subclassed from

00:30:17.030 --> 00:30:19.680
NSButton and NSButtonCell,
I could have done all of this

00:30:19.730 --> 00:30:21.280
work right in Interface Builder.

00:30:21.400 --> 00:30:24.280
So it wouldn't really
have made much of a demo.

00:30:24.970 --> 00:30:27.660
We also learned that a lot of developers
are dealing with some legacy code,

00:30:27.660 --> 00:30:30.490
some code that perhaps was written
quickly to meet a deadline.

00:30:30.590 --> 00:30:32.700
So you don't always
subclass appropriately,

00:30:32.810 --> 00:30:33.970
although you should.

00:30:34.120 --> 00:30:36.340
In the real world,
it doesn't always happen.

00:30:36.470 --> 00:30:39.930
So for demonstration purposes,
we're going to skip that step and

00:30:39.930 --> 00:30:43.080
just look at what would happen
if we had an NS button that was

00:30:43.120 --> 00:30:46.970
-- we created our own button that
was a direct subclass of NS view.

00:30:47.980 --> 00:30:50.500
So first we're going to refer to
our documentation and figure out

00:30:50.500 --> 00:30:53.580
all of the attributes that we need
to provide and the one action,

00:30:53.620 --> 00:30:55.740
the AXPress action.

00:30:55.770 --> 00:30:58.100
Now,
as long as you remember to call super,

00:30:58.130 --> 00:31:01.060
NSView is going to provide
much of this for you.

00:31:01.100 --> 00:31:04.900
We're going to give you as much
accessibility information as we can,

00:31:04.900 --> 00:31:07.490
and you're only going to
need to provide the role,

00:31:07.550 --> 00:31:10.720
the description, and the AXPress action.

00:31:10.820 --> 00:31:13.140
So really simple when we
start stepping through it and

00:31:13.140 --> 00:31:16.050
looking at what accessibility
we actually need to implement.

00:31:16.130 --> 00:31:20.600
So how do we implement these three things
now at the NS Accessibility Protocol?

00:31:20.870 --> 00:31:23.870
Well, first, as always,
remember to return that your element

00:31:23.890 --> 00:31:25.960
is not ignored by accessibility.

00:31:26.210 --> 00:31:27.850
Really,
really important to do and will save

00:31:27.850 --> 00:31:30.970
you hours of frustrating debugging time.

00:31:31.690 --> 00:31:38.250
: We're then going to report
which attributes we support.

00:31:38.250 --> 00:31:38.250
There's a little bit of code here,
but it's pretty simple

00:31:38.250 --> 00:31:38.250
and straightforward.

00:31:38.500 --> 00:31:40.170
We always want to call super.

00:31:40.320 --> 00:31:43.640
In this method, we're going to figure out
what attribute super supports.

00:31:43.770 --> 00:31:46.200
We're going to get that array back.

00:31:46.560 --> 00:31:48.790
Build up an array of attributes
that we want to support,

00:31:48.980 --> 00:31:51.930
in this case,
the role in the description.

00:31:52.910 --> 00:32:07.710
: We're going to add the attributes
we want to support to the attributes

00:32:07.710 --> 00:32:07.710
that super supports and we want
to make sure we don't create

00:32:07.710 --> 00:32:07.710
any duplicates in that array.

00:32:07.710 --> 00:32:07.710
So really simple and straightforward,
we get the array from super,

00:32:07.710 --> 00:32:07.710
we add our attributes to it and make
sure not to create any duplicates.

00:32:08.910 --> 00:32:11.530
Then once we've reported
which attributes we support,

00:32:11.550 --> 00:32:14.630
we need to provide a way
to get at those attributes.

00:32:14.740 --> 00:32:18.740
We're going to do this with
accessibility attribute value.

00:32:19.120 --> 00:32:23.610
This method will take in an
attribute and return an object

00:32:23.610 --> 00:32:25.520
with that attribute's value.

00:32:28.130 --> 00:32:30.440
So first, when we're asked for
the role in this case,

00:32:30.440 --> 00:32:32.100
we're going to return
that this is a button.

00:32:32.100 --> 00:32:37.100
When asked for the description,
we're going to return a human

00:32:37.100 --> 00:32:40.100
readable string that is the
description of this button,

00:32:40.100 --> 00:32:41.090
in this case, Apple.

00:32:41.100 --> 00:32:45.650
It's important to note here that this
is also localized because we want this

00:32:45.720 --> 00:32:47.420
to work in multiple countries as well.

00:32:47.420 --> 00:32:50.590
Finally, and as always,
don't forget to call super.

00:32:50.620 --> 00:32:54.020
This is really important because
we're going to respond to things

00:32:54.020 --> 00:32:57.940
like the position on the screen
or the bounds of this element.

00:32:58.100 --> 00:33:02.460
So if you forget to do this,
a lot of the accessibility won't work.

00:33:02.860 --> 00:33:06.150
We're then going to need
to support the action.

00:33:06.210 --> 00:33:08.680
And supporting actions is just
like supporting attributes.

00:33:08.680 --> 00:33:11.680
We're going to return an array
of actions that we support.

00:33:11.810 --> 00:33:14.150
Again, just like attributes and just
like any accessibility method,

00:33:14.240 --> 00:33:15.410
we always want to call super.

00:33:15.410 --> 00:33:18.100
So in this case,
we're going to figure out which actions

00:33:18.100 --> 00:33:21.530
our super class supports and then add
the AX press action to that array,

00:33:21.530 --> 00:33:23.780
assuming it doesn't already include it.

00:33:24.980 --> 00:33:27.410
So one tip here that you might want
to keep in mind is whenever you write

00:33:27.410 --> 00:33:30.570
one of these accessibility methods,
your first line of code should

00:33:30.570 --> 00:33:33.120
probably be a line of code
that calls your super class,

00:33:33.120 --> 00:33:36.780
because that line almost certainly
needs to be in your method somewhere.

00:33:47.170 --> 00:33:47.170
Just like responding to attributes,
we're going to need

00:33:47.170 --> 00:33:47.170
to respond to actions.

00:33:47.170 --> 00:33:47.170
We're going to need to provide
a way to perform an action.

00:33:47.170 --> 00:33:47.170
So,

00:33:47.490 --> 00:33:49.640
When we're asked to
perform the press action,

00:33:49.700 --> 00:33:54.680
we're going to perform
our own internal press.

00:33:54.770 --> 00:33:59.170
Any other actions that we're asked to do,
we're going to let Super handle them.

00:34:01.610 --> 00:34:19.290
: So really simple and straightforward.

00:34:19.290 --> 00:34:19.290
There were just a few methods,
a few lines of code,

00:34:19.290 --> 00:34:19.290
and as we'll see later,
now our button -- actually, in this case,

00:34:19.290 --> 00:34:19.290
as we already saw,
once we implement this accessibility,

00:34:19.290 --> 00:34:19.290
our button is fully accessible.

00:34:19.290 --> 00:34:19.290
But what about our text field?

00:34:19.290 --> 00:34:19.290
I'll show you the text field is
a little bit more complicated.

00:34:21.120 --> 00:34:24.760
Again, if we look up the attributes that
are required for a text field,

00:34:24.760 --> 00:34:28.480
we get this list of about
12 or 15 attributes.

00:34:28.530 --> 00:34:30.810
NSVUE is going to provide
most of these for us.

00:34:30.810 --> 00:34:34.790
So NSVUE does a lot of the heavy lifting.

00:34:35.310 --> 00:34:39.200
We're now down to this
list of seven attributes.

00:34:39.400 --> 00:34:42.830
And most of these now are things
that we're going to need to do.

00:34:42.990 --> 00:34:45.320
But our static text field
doesn't support selection.

00:34:45.320 --> 00:34:47.150
It doesn't support keyboard navigation.

00:34:47.150 --> 00:34:50.320
So since it's just a
standard static text field,

00:34:50.320 --> 00:34:54.200
we don't need to support
this selection information.

00:34:54.390 --> 00:34:56.760
So now we're just down to
four simple attributes.

00:34:56.970 --> 00:35:00.720
We just need to implement the role,
the value, the number of characters,

00:35:00.840 --> 00:35:03.300
and the visible character range.

00:35:03.400 --> 00:35:06.680
So again, at first it seemed like an
overwhelming amount of information,

00:35:06.680 --> 00:35:09.580
but when we break it down and
walk through it with our recipe,

00:35:09.630 --> 00:35:13.560
it's really not that much
information that we need to provide.

00:35:13.830 --> 00:35:15.200
So how are we going to do that?

00:35:15.220 --> 00:35:19.630
Well, we're going to use the same API,
the same process as before.

00:35:19.770 --> 00:35:22.600
First, as always,
make sure to return no that your

00:35:22.680 --> 00:35:25.250
object is not ignored by accessibility.

00:35:26.570 --> 00:35:29.350
Then we're going to report
which attributes we support.

00:35:29.520 --> 00:35:32.140
This is the same exact format
as we saw in the button case.

00:35:32.260 --> 00:35:35.160
In this case,
we're just going to add the role, value,

00:35:35.290 --> 00:35:38.380
number of characters,
and visible character range to the

00:35:38.380 --> 00:35:40.510
list of attributes that we support.

00:35:42.070 --> 00:35:44.240
Now,
how about actually implementing them?

00:35:44.310 --> 00:35:48.590
Well, we only have one more attribute,
but it's still pretty simple.

00:35:49.070 --> 00:35:52.910
First, when we're asked for the role,
we're going to return this

00:35:52.910 --> 00:35:54.690
as a static text area.

00:35:56.100 --> 00:35:59.430
When asked for the value,
we're going to return the value

00:35:59.430 --> 00:36:00.740
that we're displaying on screen.

00:36:00.990 --> 00:36:04.760
This is just the string that
we're showing in the curved text.

00:36:05.650 --> 00:36:07.850
When asked for the number of characters,
surprisingly,

00:36:07.850 --> 00:36:09.500
we return the number of characters.

00:36:09.500 --> 00:36:12.330
If you note,
this method always returns an ID.

00:36:12.330 --> 00:36:14.930
So you want to make sure that
you're always encapsulating

00:36:14.930 --> 00:36:16.440
your return value in an object.

00:36:16.470 --> 00:36:19.350
In this case,
we're encapsulating the number

00:36:19.350 --> 00:36:21.430
of characters in an NSNumber.

00:36:22.520 --> 00:36:24.630
Finally, the visible character range.

00:36:24.630 --> 00:36:28.880
In this case, we know that our entire
string is visible on screen,

00:36:28.880 --> 00:36:32.400
so we're just going to return a range
from zero to the length of the string.

00:36:32.590 --> 00:36:35.410
And we're going to stuff
that in an NSValue so that we

00:36:35.410 --> 00:36:37.110
can return it as an object.

00:36:39.120 --> 00:36:41.760
Finally, as always,
don't forget to call Super so

00:36:41.820 --> 00:36:43.720
that we can do some work for you.

00:36:43.720 --> 00:36:47.330
You don't want to be implementing
all of the extra accessibility

00:36:47.330 --> 00:36:48.980
methods if you don't have to.

00:36:50.460 --> 00:36:53.830
So there's only one
extra attribute -- sorry,

00:36:53.900 --> 00:36:57.300
two extra attributes on top of an
NS button that we needed to implement.

00:36:57.300 --> 00:37:00.270
And as you'll see,
that now made our completely inaccessible

00:37:00.270 --> 00:37:03.900
text field become a completely accessible
text field that a voiceover user

00:37:03.900 --> 00:37:05.840
can navigate and get to the text of.

00:37:05.930 --> 00:37:07.900
And it doesn't take that much work.

00:37:08.110 --> 00:37:12.190
And assuming that you're subclassing
appropriately in your own project,

00:37:12.280 --> 00:37:15.630
you're probably only going to
need to do this in a few places.

00:37:15.630 --> 00:37:18.480
And now all of a sudden all
of your custom text fields

00:37:18.480 --> 00:37:18.840
are going to be accessible.

00:37:20.130 --> 00:37:22.000
So next,
as we're increasing in difficulty,

00:37:22.000 --> 00:37:25.700
we're going to look at a multi-line,
multi-column text field.

00:37:25.830 --> 00:37:29.060
This is a great example of a text
field that you might see in an e-book

00:37:29.060 --> 00:37:32.660
reader or a magazine reader or an
application that's displaying a lot of

00:37:32.660 --> 00:37:34.640
text on screen at one point in time.

00:37:34.750 --> 00:37:37.350
Now,
we could implement this exactly the same

00:37:37.440 --> 00:37:39.800
way we did with a single line text field.

00:37:40.020 --> 00:37:43.280
We could implement the role, the value,
the number of characters,

00:37:43.280 --> 00:37:45.160
and the visible character range.

00:37:45.310 --> 00:37:46.240
And that would be okay.

00:37:46.400 --> 00:37:48.600
That accessibility would work.

00:37:48.600 --> 00:37:51.400
The problem is that now a voiceover
user is going to land on that,

00:37:51.460 --> 00:37:54.140
and they're going to hear the
entire string all at once.

00:37:54.240 --> 00:37:57.520
So just like there's
good UI and a better UI,

00:37:57.520 --> 00:38:02.670
there's good accessibility and
there's better accessibility.

00:38:02.870 --> 00:38:05.230
In this case,
we want to provide better accessibility.

00:38:05.230 --> 00:38:08.230
We want to provide accessibility
where the voiceover can navigate line

00:38:08.230 --> 00:38:10.830
by line or character by character,
paragraph by paragraph,

00:38:10.830 --> 00:38:13.580
and really interact with the text,
be able to reread sentences or

00:38:13.580 --> 00:38:17.100
pronounce specific words phonetically
so that a user knows how to spell them.

00:38:17.100 --> 00:38:17.100
So just like there's
good UI and a better UI,

00:38:17.100 --> 00:38:17.100
there's good accessibility,
and there's better accessibility.

00:38:17.100 --> 00:38:17.100
In this case,
we want to provide better accessibility.

00:38:17.100 --> 00:38:17.100
We want to provide accessibility
where the voiceover can navigate line

00:38:17.100 --> 00:38:17.100
by line or character by character,
paragraph by paragraph,

00:38:17.100 --> 00:38:17.100
and really interact with the text,
be able to reread sentences or

00:38:17.100 --> 00:38:17.100
pronounce specific words phonetically
so that a user knows how to spell them.

00:38:17.100 --> 00:38:21.600
so that a user knows how to spell
some more complicated words.

00:38:21.820 --> 00:38:25.760
To do this, we're going to implement a
few parameterized attributes.

00:38:25.810 --> 00:38:29.210
The attributes that we're going
to implement are string for range,

00:38:29.210 --> 00:38:33.650
attributed string for range,
line for index, range for line,

00:38:33.650 --> 00:38:35.430
and bounds for range.

00:38:36.070 --> 00:38:38.990
And these six attributes are kind of
the secret sauce that are going to

00:38:39.000 --> 00:38:44.890
allow VoiceOver to navigate line by line
in a text field with multiple lines.

00:38:45.890 --> 00:38:49.600
So, we just already saw how you
would implement the accessibility

00:38:49.600 --> 00:38:51.500
for a single line text field.

00:38:51.500 --> 00:38:53.840
We're going to do all of
that same accessibility for

00:38:53.840 --> 00:38:55.300
the multi-line text field.

00:38:55.480 --> 00:38:58.860
And let's just jump right into
what we now need to do for

00:38:58.940 --> 00:39:01.090
the parameterized attributes.

00:39:01.770 --> 00:39:05.050
Well, just like regular attributes,
we're going to need to return our

00:39:05.050 --> 00:39:08.240
array of all the parameterized
attributes that we support.

00:39:08.310 --> 00:39:11.210
First, we're going to call super,
figure out what parameterized

00:39:11.220 --> 00:39:13.650
attributes super supports,
build up an array of all

00:39:13.650 --> 00:39:16.340
the parameterized attributes
that we want to support,

00:39:16.340 --> 00:39:19.180
and then merge the two arrays,
making sure that we don't

00:39:19.180 --> 00:39:20.640
create any duplicates.

00:39:22.410 --> 00:39:25.740
So then what about responding
to these attributes?

00:39:25.830 --> 00:39:30.260
We're asked for a parameterized
attribute and we're given a parameter.

00:39:30.300 --> 00:39:34.250
The first one, string for range,
we're passed an NS value that

00:39:34.600 --> 00:39:38.580
contains an NS range and we're going
to call our own internal method that

00:39:38.580 --> 00:39:40.720
returns a string for that range.

00:39:40.830 --> 00:39:47.010
Now, one thing that's important to note
for parameterized value for -- sorry,

00:39:47.010 --> 00:39:51.030
accessibility attribute
value for parameter is that

00:39:51.600 --> 00:39:54.820
We guarantee the parameter
is going to be an object.

00:39:55.000 --> 00:39:57.500
We don't guarantee what
type it's going to be.

00:39:57.500 --> 00:40:00.600
You always want to make sure to
type check the input parameter and

00:40:00.600 --> 00:40:02.500
make sure it's the type you expect.

00:40:02.640 --> 00:40:06.890
Otherwise you can run into big problems
if you start passing string methods

00:40:07.130 --> 00:40:09.310
into something that's an NS value.

00:40:09.470 --> 00:40:11.400
In this case we're expecting an NS value.

00:40:11.570 --> 00:40:16.260
We first made sure it was an NS value
and then we got our range out of it.

00:40:18.010 --> 00:40:21.230
So, pretty much the same code for
attributed string for range.

00:40:21.370 --> 00:40:23.000
When we're asked for the
attributed string for range,

00:40:23.000 --> 00:40:25.930
we type check our input value,
we extract the range

00:40:25.930 --> 00:40:28.650
from the input value,
and then we call our own internal

00:40:28.820 --> 00:40:32.100
method that just gets the
attributed string for that range.

00:40:35.100 --> 00:40:42.900
: So, the range for line -- sorry,
line for index, given an index, again,

00:40:42.900 --> 00:40:42.900
which comes in as an NS value.

00:40:43.360 --> 00:40:46.840
We're going to extract the index out and
then call our own internal method that's

00:40:46.880 --> 00:40:48.900
going to return a number for that line.

00:40:49.040 --> 00:40:51.820
And just as we saw before,
we're going to bottle this up

00:40:51.820 --> 00:40:55.900
in an NSNumber so that it can be
returned through that IPC layer.

00:40:57.700 --> 00:41:00.640
Range for line works
pretty much the same way.

00:41:00.720 --> 00:41:03.360
We're going to extract the line
number from the input parameter.

00:41:03.360 --> 00:41:05.400
We're going to call our own
internal method to figure

00:41:05.400 --> 00:41:06.630
out the range for that line.

00:41:06.650 --> 00:41:10.770
And finally, we're going to bottle up the
return value in an NS value so

00:41:10.770 --> 00:41:12.630
that we can return an object.

00:41:14.500 --> 00:41:31.970
: Balance for range is a
really important one as well.

00:41:31.970 --> 00:41:31.970
Balance for range is what
enables VoiceOver to draw that

00:41:31.970 --> 00:41:31.970
VoiceOver cursor on screen correctly.

00:41:31.970 --> 00:41:31.970
This is incredibly important for
collaboration so that users can

00:41:31.970 --> 00:41:31.970
work together and a sighted user
can see where a VoiceOver user

00:41:31.970 --> 00:41:31.970
is currently located on screen.

00:41:32.160 --> 00:41:36.810
So bounds for range takes an NS value,
we extract the NS value,

00:41:36.820 --> 00:41:39.080
we call our own internal
method to get the bounds,

00:41:39.230 --> 00:41:43.040
and then we bottle that back up
in an NS value and return it.

00:41:44.400 --> 00:41:48.390
And as always with all of our methods,
we always make sure to call super.

00:41:48.520 --> 00:41:51.400
Really, really important again because
we also will respond to some

00:41:51.400 --> 00:41:54.030
parameterized attributes for you.

00:41:54.130 --> 00:41:55.640
That's all there is to it.

00:41:55.660 --> 00:41:57.990
There's a little bit of code,
a little bit more code

00:41:57.990 --> 00:41:59.480
than the previous example.

00:41:59.590 --> 00:42:02.540
But one thing to keep in mind is that
the amount of code here that we needed to

00:42:02.610 --> 00:42:06.480
do for accessibility pales in comparison
to the amount of code I needed to write

00:42:06.480 --> 00:42:09.160
to get this to draw and screen this way.

00:42:09.500 --> 00:42:11.730
Whenever you are looking at
drawing something custom,

00:42:11.750 --> 00:42:15.400
doing your own drawing routines,
doing your own text layout,

00:42:15.480 --> 00:42:18.360
you always have to do more work
to do that drawing initially.

00:42:18.460 --> 00:42:20.720
When you do that extra work,
you will always have to do a little

00:42:20.720 --> 00:42:22.300
bit more accessibility work as well.

00:42:22.370 --> 00:42:26.040
This you should take into account
when you are deciding if you

00:42:26.040 --> 00:42:29.940
should use custom controls or
use existing app kit controls.

00:42:31.660 --> 00:42:34.580
Finally,
we're going to look at a custom stepper.

00:42:34.730 --> 00:42:36.180
In this case, it's a volume stepper.

00:42:36.200 --> 00:42:38.560
It increments and decrements the volume.

00:42:38.650 --> 00:42:42.140
And in accessibility,
we refer to a stepper as an incrementer.

00:42:42.220 --> 00:42:45.060
So we're going to look up the
accessibility information that's

00:42:45.060 --> 00:42:46.510
needed for an incrementer.

00:42:48.280 --> 00:42:51.810
So, just like our previous examples,
we have quite a bit of information

00:42:51.810 --> 00:42:53.200
that we need to provide.

00:42:53.200 --> 00:42:57.180
But as always, as long as we call super,
NSVU is going to provide as much

00:42:57.180 --> 00:42:59.140
of that information as it can.

00:42:59.660 --> 00:43:02.900
So we're down to just a
handful of attributes.

00:43:02.940 --> 00:43:05.290
We need to provide the role.

00:43:05.690 --> 00:43:09.680
We need to provide whether it's enabled,
the description, the children,

00:43:09.680 --> 00:43:13.000
the increment button,
and the decrement button.

00:43:13.000 --> 00:43:15.680
So the first time here, you see children.

00:43:15.820 --> 00:43:17.120
Children is an interesting one, right?

00:43:17.120 --> 00:43:18.800
We haven't seen that yet.

00:43:18.920 --> 00:43:20.440
Just like there's a
structure of your views,

00:43:20.440 --> 00:43:24.920
you have a super view that has sub views,
accessibility has a structure.

00:43:25.050 --> 00:43:27.360
Every object can have
accessibility children.

00:43:27.470 --> 00:43:30.600
In this case, an incrementer has to have
accessibility children.

00:43:30.710 --> 00:43:35.030
It has to have a child that's an
increment button and a decrement button.

00:43:35.480 --> 00:43:42.370
: This is a problem for us because
in this case we don't have children.

00:43:42.370 --> 00:43:42.370
We just have one view that's
drawing both of these buttons.

00:43:42.580 --> 00:43:44.900
So, what are we to do?

00:43:45.010 --> 00:43:48.620
Well, we're going to create what
we call faux UI elements.

00:43:48.750 --> 00:43:51.650
This is an important concept in
the accessibility protocol that

00:43:51.650 --> 00:43:55.500
every object that's represented
in the accessibility information,

00:43:55.520 --> 00:43:58.880
every piece of UI that's
represented to accessibility has

00:43:58.990 --> 00:44:00.590
to have an object backing it.

00:44:00.700 --> 00:44:04.110
It has to be an object to respond
to the methods and report all of

00:44:04.110 --> 00:44:06.300
the accessibility information.

00:44:06.650 --> 00:44:09.190
In this case,
we've distributed a really great class

00:44:09.190 --> 00:44:11.040
called the Faux UI Element class.

00:44:11.110 --> 00:44:13.440
And this class is just meant
to bottle up that information.

00:44:13.440 --> 00:44:18.380
It's just a really lightweight object
that responds to accessibility requests.

00:44:18.500 --> 00:44:23.260
Here, this is going to be my own internal
method for building up my fake children.

00:44:23.310 --> 00:44:27.350
I'm going to create a Faux UI Element for
my up button and a Faux UI Element for

00:44:27.420 --> 00:44:31.680
my down button and return that array.

00:44:32.160 --> 00:44:36.420
There is a little bit more involved in
reporting attributes on FOA UI elements,

00:44:36.420 --> 00:44:38.940
but you'll be able to take a
look at that in the example.

00:44:38.940 --> 00:44:42.940
So now how do we provide the rest
of the accessibility for this bot?

00:44:43.590 --> 00:44:47.210
Well, as always, we need to start with
accessibility as ignored.

00:44:47.340 --> 00:44:50.280
Make sure that we return
that we're not ignored.

00:44:51.240 --> 00:44:55.310
For the accessibility attributes,
this is the same method we used before.

00:44:55.340 --> 00:44:58.120
We're going to add the attributes
that we want to support into the array

00:44:58.120 --> 00:45:02.680
of attributes that Super supports,
making sure not to create any duplicates.

00:45:03.900 --> 00:45:07.640
And now,
how do we report these attributes?

00:45:07.750 --> 00:45:11.580
Well, first, when asked for the role,
we're going to return that

00:45:11.580 --> 00:45:12.630
this is an incrementer.

00:45:12.940 --> 00:45:15.010
When asked for the children,
we're going to turn the array of

00:45:15.180 --> 00:45:18.080
full UI elements that we built up.

00:45:18.690 --> 00:45:21.700
When asked for the increment button,
we're going to return the first

00:45:21.700 --> 00:45:27.020
child because we know that we put
the up button in position zero.

00:45:27.020 --> 00:45:29.760
And for the decrement button,
we know that we put the

00:45:29.760 --> 00:45:31.460
down button in position one.

00:45:32.560 --> 00:45:34.870
For description,
we're going to return the human readable

00:45:34.870 --> 00:45:36.840
localized string for this incrementer.

00:45:36.840 --> 00:45:39.790
In this case,
it's our volume incrementer.

00:45:40.550 --> 00:45:43.470
And finally, as always,
we're going to make sure to call Super.

00:45:43.550 --> 00:45:45.270
Super is going to handle
a lot of the other things,

00:45:45.300 --> 00:45:47.750
and by calling it,
we take advantage of all of that work.

00:45:50.100 --> 00:45:52.750
We also saw that there were two
actions we needed to report.

00:45:52.840 --> 00:45:54.790
So we're going to need to add
the increment and the decrement

00:45:54.800 --> 00:45:59.080
action into the array of actions
that our superclass supports.

00:46:01.270 --> 00:46:03.770
And finally, we're going to need to be
able to perform those actions.

00:46:03.880 --> 00:46:05.760
So when asked to perform
the increment action,

00:46:05.760 --> 00:46:08.680
we call our own internal
method to perform an increment.

00:46:08.900 --> 00:46:11.390
And when asked to perform
the decrement action,

00:46:11.400 --> 00:46:14.890
we perform our own internal
method to perform the decrement.

00:46:16.440 --> 00:46:18.000
That's all there is to it.

00:46:18.060 --> 00:46:21.380
Again, there was a little bit more code,
but this is a pretty complex example.

00:46:21.400 --> 00:46:27.850
We were creating our own fake elements
just to support accessibility here.

00:46:28.130 --> 00:46:31.010
This example can be extrapolated.

00:46:31.290 --> 00:46:35.290
You can make anything you can draw
on the screen fully accessible.

00:46:35.450 --> 00:46:39.440
A game that was done entirely in
OpenGL could use the same technique,

00:46:39.440 --> 00:46:42.870
the same foe UI elements and
make the entire user interface

00:46:42.870 --> 00:46:45.370
accessible for someone who can't see.

00:46:47.270 --> 00:46:50.120
So let's take a look at our app now
that it's finished with all of that

00:46:50.120 --> 00:46:52.570
accessibility information in it.

00:46:53.010 --> 00:46:54.750
So here's our app.

00:46:54.760 --> 00:46:56.510
And first we're going to
start with the custom button.

00:46:56.610 --> 00:46:59.400
I'm going to turn on voiceover
and navigate to that button.

00:46:59.410 --> 00:47:00.890
Voiceover on.

00:47:01.000 --> 00:47:02.430
Press count zero.

00:47:02.500 --> 00:47:03.550
Apple button.

00:47:03.700 --> 00:47:05.240
Press Apple button.

00:47:05.250 --> 00:47:08.100
So you see now it's fully accessible.

00:47:08.260 --> 00:47:09.550
Next, the Cortex Arc.

00:47:09.660 --> 00:47:11.160
Cortex Arc.

00:47:11.220 --> 00:47:12.390
Hello, world.

00:47:12.590 --> 00:47:13.540
Fully accessible again.

00:47:13.540 --> 00:47:16.800
The voiceover cursor draws
correctly around the text.

00:47:16.860 --> 00:47:18.770
We have the Cortex multi-column view.

00:47:18.880 --> 00:47:20.420
Cortex columns.

00:47:20.590 --> 00:47:22.160
Text, Apple designs Macs.

00:47:22.400 --> 00:47:24.290
Interact with text, Apple designs Macs.

00:47:24.360 --> 00:47:27.660
The best personal computers in the world,
along with OS X, iLife, iWork,

00:47:27.660 --> 00:47:28.840
and professional software.

00:47:28.990 --> 00:47:30.950
Apple leads the digital music revolution.

00:47:31.020 --> 00:47:34.360
So you see, voiceover now can go through
and read each sentence.

00:47:34.390 --> 00:47:37.130
But I can also navigate line
by line or word by word.

00:47:37.320 --> 00:47:37.960
Online store.

00:47:38.040 --> 00:47:38.500
It's iPods.

00:47:38.500 --> 00:47:39.230
And app music revolution.

00:47:39.280 --> 00:47:40.150
Apple lead digital.

00:47:40.200 --> 00:47:41.080
The leads.

00:47:41.190 --> 00:47:41.640
Apple.

00:47:41.920 --> 00:47:43.180
Or even character by character.

00:47:43.280 --> 00:47:46.680
P-P-P-L-E.

00:47:46.700 --> 00:47:49.510
So really, really powerful now with that
little bit of extra effort.

00:47:49.660 --> 00:47:52.940
We've created great user experience
for a user using something like an

00:47:53.000 --> 00:47:57.180
electronic textbook or a text messaging
application that has a lot of text that

00:47:57.180 --> 00:47:59.970
a voiceover user needs to get through.

00:48:00.180 --> 00:48:02.550
Finally, our custom stepper,
or as we call it in the

00:48:02.550 --> 00:48:04.690
accessibility world,
an incrementer.

00:48:04.850 --> 00:48:05.830
Custom stepper.

00:48:05.890 --> 00:48:07.060
Volume stepper.

00:48:07.270 --> 00:48:08.700
Interact with stepper.

00:48:08.830 --> 00:48:10.120
Stop interacting with stepper.

00:48:10.190 --> 00:48:11.220
Interact.

00:48:11.260 --> 00:48:12.540
Volume incrementing.

00:48:12.600 --> 00:48:13.530
Volume incrementing.

00:48:13.590 --> 00:48:14.630
Volume incrementing.

00:48:14.650 --> 00:48:16.760
Volume incrementing.

00:48:16.810 --> 00:48:18.340
Volume decrementing.

00:48:18.430 --> 00:48:19.820
So now I can interact with the stepper.

00:48:19.820 --> 00:48:20.560
I can control it.

00:48:20.580 --> 00:48:23.390
I can increment the volume
and decrement the volume.

00:48:23.620 --> 00:48:27.320
So really, really powerful now,
a view that was entirely in OpenGL.

00:48:27.320 --> 00:48:29.280
One view drew multiple controls.

00:48:29.460 --> 00:48:32.140
And I was able to make it fully
accessible with VoiceOver with

00:48:32.200 --> 00:48:34.720
just a handful of code.

00:48:35.830 --> 00:48:41.700
So as I said, this demo code is available
for you on the WWDC website.

00:48:41.700 --> 00:48:43.800
And it's a great example of some UI.

00:48:43.800 --> 00:48:45.760
There are also some bonus
examples in the code.

00:48:45.830 --> 00:48:48.790
If you download it,
you'll be able to take a look at.

00:48:49.610 --> 00:48:52.140
And I'm sure right now you're
thinking about a lot of your UI,

00:48:52.140 --> 00:48:54.500
how are you going to make it accessible,
and what you need to do.

00:48:54.500 --> 00:48:58.520
And Apple has a lot of
great resources for you.

00:48:59.410 --> 00:49:03.290
One great starting point is the
accessibility web page on Apple.com.

00:49:03.290 --> 00:49:06.230
It's Apple.com/accessibility.

00:49:06.340 --> 00:49:09.350
This web page is a great starting
point because it provides links

00:49:09.360 --> 00:49:12.850
to the developer information,
it provides links to mailing lists,

00:49:12.850 --> 00:49:16.320
and it shows all of the accessible
products that Apple works on.

00:49:17.160 --> 00:49:19.600
I also have some great
contact information here,

00:49:19.690 --> 00:49:22.920
including our application
technology evangelist,

00:49:23.020 --> 00:49:26.090
the developer mailing list,
and the accessibility mailing list,

00:49:26.160 --> 00:49:30.500
which are all great resources to ask
your accessibility related questions to.

00:49:30.630 --> 00:49:34.410
So in summary,
we talked about a lot today.

00:49:34.550 --> 00:49:37.490
We talked about the various
technologies that Apple works on,

00:49:37.710 --> 00:49:41.330
how important accessibility is to us,
how important we feel

00:49:41.330 --> 00:49:43.470
accessibility should be to you.

00:49:43.570 --> 00:49:47.900
We looked at some of the APIs and
how to implement accessibility.

00:49:47.990 --> 00:49:51.300
And we did a few case studies,
which do two things.

00:49:51.300 --> 00:49:54.530
They provide specific examples
on how to make some specific

00:49:54.550 --> 00:49:56.080
pieces of UI accessible.

00:49:56.180 --> 00:50:00.020
But they also highlight that pretty
much anything you can dream up,

00:50:00.020 --> 00:50:01.380
our API can support.

00:50:01.470 --> 00:50:06.540
Any pixel you can render on the screen,
we can make accessible with our API.

00:50:06.620 --> 00:50:09.610
And so thinking about custom controls,
I don't want you to stop at

00:50:09.630 --> 00:50:12.380
the four examples I gave you,
but use those as a starting

00:50:12.380 --> 00:50:13.460
point for thinking about how you
can make your API accessible.

00:50:13.460 --> 00:50:17.570
you might make other
custom controls accessible.

00:50:18.030 --> 00:50:21.890
And I want to come back to the
words that Tim said yesterday,

00:50:21.910 --> 00:50:26.140
that we have the opportunity
to dramatically and

00:50:26.290 --> 00:50:29.190
fundamentally change the world.

00:50:29.470 --> 00:50:33.550
I truly believe that and I really hope
you can help us change the world by

00:50:33.900 --> 00:50:36.640
helping to make your software accessible.

00:50:36.830 --> 00:50:39.000
Thank you very much for your
time and I hope you have a

00:50:39.070 --> 00:50:40.440
great rest of the week at WWDC.