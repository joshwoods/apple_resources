WEBVTT

00:00:09.760 --> 00:00:10.550
Hi.

00:00:10.550 --> 00:00:13.300
Good afternoon.

00:00:13.370 --> 00:00:14.600
So my name is Ben Nielsen.

00:00:14.600 --> 00:00:19.440
I work on iOS applications,
applications and frameworks.

00:00:19.450 --> 00:00:21.680
I'd like to welcome you to session 307.

00:00:21.830 --> 00:00:23.780
We're building great Newsstand apps.

00:00:23.780 --> 00:00:28.190
Yeah, so Newsstand has had a lot
of success this last year.

00:00:28.190 --> 00:00:32.070
And I'd really like to just first off
thank you all for all of the hard work

00:00:32.070 --> 00:00:35.840
that you've done to really make some
great content and bring it to iOS,

00:00:35.840 --> 00:00:39.480
and really make it an
enjoyable experience for users.

00:00:39.480 --> 00:00:41.380
So what are we going to talk about today?

00:00:41.380 --> 00:00:45.060
Well, to clarify the purpose,
we're not actually covering any new API.

00:00:45.060 --> 00:00:48.700
What we're going to be talking
about is a lot of best practices,

00:00:48.700 --> 00:00:49.920
possible pitfalls.

00:00:49.920 --> 00:00:53.590
There are a couple of behavioral
changes in the system to work out some

00:00:53.710 --> 00:00:55.680
issues that you've told us you've had.

00:00:55.890 --> 00:00:58.880
But mostly we're going to be
talking about issues that your

00:00:58.880 --> 00:01:04.400
peers have had and what they and us,
what we have done to help with that.

00:01:04.400 --> 00:01:07.710
So we're going to approach this from
three very different standpoints.

00:01:07.710 --> 00:01:11.890
The first is we're going to talk about
it from kind of a business standpoint.

00:01:11.920 --> 00:01:16.650
When we're making our Newsstand apps,
what are the things we need to consider

00:01:16.650 --> 00:01:19.240
to make a really great Newsstand app?

00:01:19.240 --> 00:01:21.870
And then after we talk about that,
we're going to approach it from more

00:01:21.950 --> 00:01:26.020
of an operations logistics standpoint,
especially talking about iTunes

00:01:26.020 --> 00:01:28.780
Connect and all of the things
you need to set up there.

00:01:28.780 --> 00:01:32.550
And then finally we're going to
approach it from a Newsstand kit and

00:01:32.550 --> 00:01:36.860
other related APIs perspective and
some of the issues we've seen there.

00:01:36.990 --> 00:01:39.370
So with that,
I'd like to invite Carl Good up

00:01:39.450 --> 00:01:42.630
here to tell us what it takes
to make a great Newsstand app.

00:01:42.700 --> 00:01:42.700
Thanks, Ben.

00:01:50.030 --> 00:01:52.820
So since Newsstand launched,
I've had the privilege

00:01:52.850 --> 00:01:56.280
of working with many,
many publishers worldwide to help

00:01:56.380 --> 00:01:58.430
them bring their content to Newsstand.

00:01:58.520 --> 00:02:01.590
And during this time,
I think I've learned some key

00:02:01.590 --> 00:02:05.280
elements that really contribute
to making a great Newsstand app,

00:02:05.300 --> 00:02:07.770
and some that also have
the opposite effect.

00:02:07.850 --> 00:02:10.100
So I'd like to share some
of these with you today,

00:02:10.140 --> 00:02:13.480
and I call these elements
of great Newsstand apps.

00:02:14.430 --> 00:02:17.220
So first up, Retina Display.

00:02:17.280 --> 00:02:20.960
Text and graphics have never
looked so crisp and clear as they

00:02:20.960 --> 00:02:22.730
do today on a Retina Display.

00:02:22.850 --> 00:02:26.640
If you have a Newsstand app that is
live in the App Store that doesn't

00:02:26.640 --> 00:02:31.310
yet support the Retina Display or has
optimized content for Retina Display,

00:02:31.410 --> 00:02:33.450
you're doing a disservice to your users.

00:02:33.450 --> 00:02:37.590
Your users are disadvantaged
and I would really urge you to

00:02:37.590 --> 00:02:40.180
support Retina as soon as you can.

00:02:40.580 --> 00:02:43.330
Great Newsstand Apps package
high resolution assets to

00:02:43.710 --> 00:02:45.060
support the Retina Display.

00:02:45.060 --> 00:02:47.660
Downloading content in the background.

00:02:47.660 --> 00:02:52.720
So another fantastic feature of
Newsstand is the ability for you as

00:02:52.720 --> 00:02:57.670
a publisher to push content in the
background to your Newsstand application.

00:02:57.680 --> 00:03:00.290
This provides a fantastic
user experience.

00:03:00.380 --> 00:03:03.940
From the user's perspective,
they can go into your application

00:03:03.940 --> 00:03:06.900
and the moment they go in,
there's content ready for

00:03:07.170 --> 00:03:08.500
them there to consume.

00:03:08.500 --> 00:03:10.460
But think for a moment.

00:03:10.460 --> 00:03:13.760
What if you haven't yet
implemented background downloads

00:03:13.760 --> 00:03:15.880
as a feature in your application?

00:03:15.880 --> 00:03:19.350
Think of the user experience that
that user is going to have if,

00:03:19.350 --> 00:03:21.550
for instance, they're on the tube.

00:03:21.630 --> 00:03:22.740
Sorry, subway.

00:03:22.740 --> 00:03:24.640
Or if they got on a plane.

00:03:24.640 --> 00:03:29.440
And they go to your application,
they open it up, and they look for some

00:03:29.440 --> 00:03:31.040
content to consume.

00:03:31.040 --> 00:03:32.420
And there's nothing there.

00:03:32.420 --> 00:03:36.180
What do you think they will think of you
as a developer or you as a publisher?

00:03:36.180 --> 00:03:38.480
I actually think they're going
to be pretty disappointed.

00:03:38.520 --> 00:03:40.460
Great Newsstand apps.

00:03:40.480 --> 00:03:42.520
Download new issues in the background.

00:03:42.520 --> 00:03:44.960
And I would urge you all to
implement this functionality.

00:03:47.100 --> 00:03:51.660
Another key thing for you to think
about is offering potential subscribers

00:03:52.050 --> 00:03:54.870
the opportunity to experience
the content in your publication.

00:03:54.880 --> 00:03:58.280
And again, the key word here is
potential subscribers.

00:03:58.280 --> 00:04:00.860
And I don't just mean
showing them the cover.

00:04:00.860 --> 00:04:03.470
I don't just mean giving them
one or two pages of content,

00:04:03.470 --> 00:04:07.900
but giving them something substantial
that they can consume that will help

00:04:07.900 --> 00:04:11.360
take them on the journey to make
that subscription decision and sign

00:04:11.360 --> 00:04:13.240
up to subscribe to your content.

00:04:14.140 --> 00:04:18.090
Free trial periods are a fantastic piece
of functionality that exists in our

00:04:18.090 --> 00:04:23.040
platform and offer you as a developer and
a publisher the ability to offer a free

00:04:23.160 --> 00:04:26.060
period of subscription of your choosing.

00:04:26.060 --> 00:04:28.800
It's under your control
to potential subscribers.

00:04:28.800 --> 00:04:30.920
And from the potential
subscribers' perspective,

00:04:30.920 --> 00:04:32.780
this is also a great experience for them.

00:04:32.780 --> 00:04:39.280
They get to try out some of that
content with no price or risk to them.

00:04:39.280 --> 00:04:42.800
Great Newsstand Apps offer free
trial period to subscribers.

00:04:43.680 --> 00:04:46.620
Also think about how you deliver
your content to your consumer.

00:04:46.620 --> 00:04:51.040
The reader of your application
doesn't want to be forced to consume

00:04:51.040 --> 00:04:52.680
content in the way you want them to.

00:04:52.680 --> 00:04:57.610
They're used to consuming content in the
way that they like to consume content.

00:04:57.620 --> 00:05:01.750
So a key thing for you to
consider is not just forcing

00:05:01.770 --> 00:05:04.710
portrait mode or landscape mode.

00:05:04.740 --> 00:05:09.590
Great news stand up support both
portrait and landscape orientations.

00:05:10.780 --> 00:05:11.540
Accessibility.

00:05:11.540 --> 00:05:13.760
Everybody forgets about accessibility.

00:05:13.760 --> 00:05:17.300
And actually you're forgetting about
a huge potential new audience to

00:05:17.300 --> 00:05:20.380
your content who aren't accessing
it because they can't and you

00:05:20.430 --> 00:05:22.190
haven't made it available to them.

00:05:22.200 --> 00:05:24.980
Think about some of the cool
iOS technologies we have.

00:05:25.340 --> 00:05:27.540
Things like voiceover that
really can help bring that

00:05:27.690 --> 00:05:29.210
content to that new audience.

00:05:29.220 --> 00:05:33.410
The ability to dictate out loud
using voiceover text content

00:05:33.410 --> 00:05:37.200
within your application is a
phenomenal opportunity for you.

00:05:38.100 --> 00:05:40.560
Also think about some of the other
things that users have become

00:05:40.560 --> 00:05:42.660
used to using in applications.

00:05:42.720 --> 00:05:45.760
Things like the dictionary,
the ability to look up a word

00:05:45.780 --> 00:05:49.450
and understand its context,
the way in which it's being used.

00:05:49.460 --> 00:05:52.520
These are system features and
services that are available to

00:05:52.520 --> 00:05:53.940
you to use in your news stand up.

00:05:53.940 --> 00:05:55.940
And we would urge you to do so.

00:05:56.170 --> 00:05:59.190
Great news stand apps are
accessible and make the most of iOS

00:05:59.190 --> 00:06:01.310
technologies and system services.

00:06:01.340 --> 00:06:03.230
Subscription terms.

00:06:03.340 --> 00:06:06.130
This is something too where
I see developers get it wrong.

00:06:06.260 --> 00:06:07.700
And they offer very complex solutions.

00:06:07.790 --> 00:06:11.610
Complex subscription terms that are
difficult for the user to understand what

00:06:11.610 --> 00:06:14.640
exactly it is that they're signing up to.

00:06:14.940 --> 00:06:18.570
Think about making very clear,
concise and to the point

00:06:19.000 --> 00:06:23.680
subscription terms that are easy
for that user to understand.

00:06:23.760 --> 00:06:26.800
Great Newsstand apps offer
clear subscription terms.

00:06:26.860 --> 00:06:29.770
Again,
think about those subscription offers.

00:06:30.000 --> 00:06:33.120
Don't confuse and bamboozle
the user with a myriad of

00:06:33.120 --> 00:06:35.280
different subscription packages.

00:06:35.330 --> 00:06:36.580
Make it relevant to them.

00:06:36.820 --> 00:06:39.640
Think of one or two,
maybe a few different subscription

00:06:39.640 --> 00:06:42.540
packages that work with the
business model that you have

00:06:43.020 --> 00:06:44.370
for your Newsstand application.

00:06:44.800 --> 00:06:47.750
It's important that the user really
understands the value of that

00:06:47.750 --> 00:06:50.740
subscription and they feel as though
they're getting their money's worth for

00:06:50.740 --> 00:06:52.610
the product that they're subscribing to.

00:06:53.130 --> 00:06:59.150
Great Newsstand apps are simple,
reasonably priced subscription options.

00:06:59.980 --> 00:07:01.300
Don't bloat your application.

00:07:01.300 --> 00:07:03.310
This is something people
get wrong all the time.

00:07:03.420 --> 00:07:06.590
They push as much content as they
can into the Newsstand application.

00:07:06.790 --> 00:07:07.900
Think also about video.

00:07:07.900 --> 00:07:11.300
If you've got a lot of video
content in your application,

00:07:11.340 --> 00:07:13.140
make sure you optimize it.

00:07:13.200 --> 00:07:15.820
Better still,
if you can stream some of it online,

00:07:15.820 --> 00:07:17.860
stream it online versus bundling.

00:07:17.950 --> 00:07:20.140
Think about using system fonts.

00:07:20.180 --> 00:07:22.980
Don't include extra fonts
and baggage in your Newsstand

00:07:22.980 --> 00:07:24.660
edition if you don't need to.

00:07:24.750 --> 00:07:26.040
Think about images too.

00:07:26.040 --> 00:07:29.380
Make sure you compress them,
but be careful when you compress.

00:07:29.560 --> 00:07:31.720
Also think about quality,
and there's a fine line between

00:07:31.720 --> 00:07:35.300
compression and the quality that
you want within your application.

00:07:35.460 --> 00:07:38.440
Great Newsstand apps are not bloated.

00:07:38.500 --> 00:07:42.620
Also think about the experience that the
user has when they're navigating through

00:07:42.620 --> 00:07:45.660
the content in your digital publication.

00:07:45.710 --> 00:07:51.000
A common problem with a lot of digital
publications today is giving the user

00:07:51.000 --> 00:07:54.460
a sense of perspective in terms of
where they are in the application.

00:07:54.540 --> 00:07:55.560
Where have they been?

00:07:55.630 --> 00:07:56.340
Where are they now?

00:07:56.540 --> 00:07:59.100
And where can they go to?

00:07:59.100 --> 00:08:01.660
If you think about the print world,
they've addressed this for hundreds of

00:08:01.660 --> 00:08:05.820
years using things like page numbers or
perhaps highlighting a particular segment

00:08:05.850 --> 00:08:08.290
or section in a magazine or paper.

00:08:08.410 --> 00:08:11.760
Now, we're not specifically asking you to
replicate these types of features,

00:08:11.880 --> 00:08:16.000
but just to be cognizant of the fact
that your user is navigating through a

00:08:16.000 --> 00:08:19.680
lot of content that it's not always easy
for them to find out where they are.

00:08:20.050 --> 00:08:24.020
Perhaps think of a visual cue or even
an audible cue that will help them

00:08:24.020 --> 00:08:28.700
navigate through that content and
again understand where they've been,

00:08:28.700 --> 00:08:30.740
where they are, and where they can go to.

00:08:30.750 --> 00:08:35.600
Great Newsstand apps telegraph a
sense of place in a publication.

00:08:35.620 --> 00:08:39.160
And finally,
many Newsstand apps offer what

00:08:39.290 --> 00:08:41.360
we call evergreen content.

00:08:41.390 --> 00:08:45.250
Now, evergreen content is content that
isn't just consumed once by that user,

00:08:45.300 --> 00:08:47.460
but it's something they want
to go back and reference.

00:08:47.480 --> 00:08:51.330
So think, for instance,
maybe a food magazine with a recipe,

00:08:51.420 --> 00:08:55.730
something that user is going to
want to go back to and refer to,

00:08:55.730 --> 00:08:57.260
perhaps to cook a meal in the future.

00:08:57.290 --> 00:08:58.300
Maybe it's a men's health magazine.

00:08:58.300 --> 00:09:01.250
Some sports routine that you
wish to go back and repeat.

00:09:01.330 --> 00:09:05.860
Think of ways that you can help
the consumer bookmark that content,

00:09:05.860 --> 00:09:09.300
create reference points that they can
come back to and easily find the content.

00:09:09.300 --> 00:09:13.160
Even think about clipping the content,
letting the user take that content

00:09:13.190 --> 00:09:15.210
and put it into another application.

00:09:15.300 --> 00:09:20.230
Great Newsstand apps give users the
ability to clip or bookmark content.

00:09:20.300 --> 00:09:23.290
So I'm going to hand
you over to Aubrey Ness,

00:09:23.290 --> 00:09:25.570
and I think as Ben mentioned,
Aubrey's going to talk about

00:09:25.570 --> 00:09:27.900
iTunes Connect and some
best practices in this area.

00:09:27.920 --> 00:09:29.290
I think we're going to talk about
some best practices in terms of

00:09:29.340 --> 00:09:30.890
managing your Newsstand content
once it's uploaded to iTunes.

00:09:30.900 --> 00:09:30.900
Aubrey.

00:09:39.680 --> 00:09:40.140
Hi, everyone.

00:09:40.360 --> 00:09:41.540
Thanks, Karl.

00:09:41.650 --> 00:09:45.240
So now that you've learned a little bit
about how to build a great Newsstand app,

00:09:45.240 --> 00:09:49.070
let's talk about what you do in iTunes
Connect to get it onto the App Store.

00:09:49.750 --> 00:09:51.110
I'm going to cover four areas.

00:09:51.350 --> 00:09:53.400
First,
we're going to talk about the setup.

00:09:53.430 --> 00:09:55.750
So exactly what you need to
do in iTunes Connect to get

00:09:55.750 --> 00:09:59.200
everything set up correctly,
set up your subscription and then

00:09:59.200 --> 00:10:01.540
your subsequent issues for Newsstand.

00:10:01.630 --> 00:10:03.300
Then I'm going to walk
through some automation.

00:10:03.300 --> 00:10:04.910
We know that your time
is important to you.

00:10:05.010 --> 00:10:08.200
We want to give you as many
tips as we can to help automate

00:10:08.290 --> 00:10:09.850
and save you some time.

00:10:10.200 --> 00:10:11.090
Then you're ready to go.

00:10:11.090 --> 00:10:12.010
You're ready to submit.

00:10:12.130 --> 00:10:15.050
So I'm going to cover a
little bit about submission.

00:10:15.050 --> 00:10:18.080
And then how does this all impact
the app store at the end of the day?

00:10:18.200 --> 00:10:20.180
Customers are what
you're looking to gain.

00:10:20.380 --> 00:10:24.260
So we want to make sure you understand
everything you set up in iTunes Connect,

00:10:24.270 --> 00:10:26.730
how it ultimately shows
up on the app store.

00:10:27.010 --> 00:10:29.000
So let's talk about setup.

00:10:29.030 --> 00:10:31.210
Now,
I've been working on iTunes Connect since

00:10:31.520 --> 00:10:33.060
the launch of the App Store.

00:10:33.060 --> 00:10:35.920
And one of the number one
questions we get about

00:10:36.430 --> 00:10:38.240
subscriptions are what is a family?

00:10:38.480 --> 00:10:41.780
What does this mean when I set
this up in iTunes Connect?

00:10:41.780 --> 00:10:46.260
So the best way to describe the
family is it's the best way to stay

00:10:46.260 --> 00:10:47.960
organized for your subscription.

00:10:47.960 --> 00:10:50.410
As you know,
as a Newsstand app developer,

00:10:50.410 --> 00:10:53.680
you have to have at least one
auto-renewable subscription

00:10:53.720 --> 00:10:56.860
or free subscription to
be eligible for Newsstand.

00:10:56.860 --> 00:10:58.410
So you're setting these
up in iTunes Connect.

00:10:58.560 --> 00:11:00.090
You want to stay organized.

00:11:00.100 --> 00:11:02.610
I'm just going to walk you through a
little bit of an example to highlight

00:11:02.610 --> 00:11:06.860
how this works and how this ultimately
ends up to show up for the customer.

00:11:06.960 --> 00:11:08.050
So I have my app.

00:11:08.050 --> 00:11:11.620
And I'm going to highlight
Bon Appetit magazine.

00:11:11.620 --> 00:11:14.610
And I want to set up a subscription
family for Bon Appetit.

00:11:14.670 --> 00:11:18.380
I want to offer different durations
of subscriptions for my Newsstand app.

00:11:18.540 --> 00:11:21.900
So I'm going to go ahead and
name it Bon Appetit Subscription.

00:11:21.940 --> 00:11:24.610
From there,
I've set up two different durations

00:11:24.610 --> 00:11:26.820
for my auto-renewable subscription.

00:11:26.890 --> 00:11:28.520
One month and one year.

00:11:28.600 --> 00:11:32.100
This means that my customers can
subscribe to a one-month offering of

00:11:32.100 --> 00:11:34.180
Bon Appetit or a one-year offering.

00:11:34.250 --> 00:11:36.270
Now, let's say I want to add
a six-month duration.

00:11:36.450 --> 00:11:39.480
Well, I'm just going to add it to
the same family because all of

00:11:39.480 --> 00:11:43.210
the same content for your app
should live within one family.

00:11:43.350 --> 00:11:47.170
It's actually very rare to
have two families for one app.

00:11:47.310 --> 00:11:48.860
And I'll show you why.

00:11:48.980 --> 00:11:50.450
It's going to look like this.

00:11:50.560 --> 00:11:52.050
You can see Aubrey's Magazine.

00:11:52.050 --> 00:11:54.780
This is when I duplicated
a family in iTunes Connect.

00:11:54.800 --> 00:11:56.780
Makes it a little bit confusing.

00:11:56.860 --> 00:11:57.780
Which one do I click on?

00:11:57.780 --> 00:11:59.440
Which one do I subscribe to?

00:11:59.510 --> 00:12:03.440
So we want to make sure you avoid
that based on how you set this up.

00:12:03.510 --> 00:12:05.840
Now,
just to walk through managing your in-app

00:12:05.860 --> 00:12:09.610
purchases and setting up a subscription,
click on Manage In-App Purchases.

00:12:09.810 --> 00:12:13.440
You can see I've just learned I should
probably use an existing family.

00:12:13.440 --> 00:12:15.320
This is Bon Appetit magazine.

00:12:15.410 --> 00:12:18.470
So I'm going to choose to add my
in-app purchase to the existing

00:12:18.470 --> 00:12:22.610
family because I want to set up that
six-month duration we just talked about.

00:12:23.710 --> 00:12:27.340
So you can see my existing
one month and one year here.

00:12:27.360 --> 00:12:29.860
And I go ahead and add my language.

00:12:29.860 --> 00:12:31.040
And I fill everything out.

00:12:31.120 --> 00:12:35.030
Fill out my price, set up my product ID,
everything I want for

00:12:35.030 --> 00:12:38.080
that six-month duration,
all part of the same family.

00:12:38.140 --> 00:12:41.140
Ultimately going to result in the
best experience for your customer.

00:12:41.180 --> 00:12:47.210
We've seen the common pitfall
of setting up multiple families,

00:12:47.210 --> 00:12:47.210
so we really wanted to drive
this one home today for you.

00:12:47.700 --> 00:12:49.900
So now I've set up my subscription.

00:12:49.970 --> 00:12:50.780
That's not the end of it.

00:12:50.850 --> 00:12:52.480
We want you to set up issues.

00:12:52.480 --> 00:12:54.400
And this is really the
spirit of Newsstand.

00:12:54.400 --> 00:12:58.240
It's an opportunity to showcase
metadata for your different issues

00:12:58.240 --> 00:12:59.590
on the store to your customer.

00:12:59.630 --> 00:13:00.540
It keeps it interesting.

00:13:00.540 --> 00:13:02.700
It keeps it fresh.

00:13:03.800 --> 00:13:06.190
One of the first things
you're going to need to do,

00:13:06.270 --> 00:13:09.660
if you're distributing on the App Store,
you're probably familiar with this page.

00:13:09.760 --> 00:13:12.600
It's actually your version
details page of your app.

00:13:12.710 --> 00:13:16.440
And for Vogue magazine,
I need to set up my default cover art.

00:13:16.440 --> 00:13:19.750
And the reason why this is important
is because we always need some

00:13:19.750 --> 00:13:22.620
sort of art to fall back on on
the App Store in case you don't

00:13:22.650 --> 00:13:24.710
have a current issue that's active.

00:13:24.740 --> 00:13:31.650
Default cover art is really important
to have a very generic kind of feel.

00:13:31.880 --> 00:13:35.610
And that's because you have individual
issue art that you're also adding that's

00:13:35.610 --> 00:13:37.560
more specific to that exact issue.

00:13:37.730 --> 00:13:40.050
The default cover art is
going to represent your brand.

00:13:40.050 --> 00:13:43.140
As you can see here with Vogue magazine,
we just have a nice picture.

00:13:43.720 --> 00:13:46.000
There's no specific wording.

00:13:46.960 --> 00:13:49.800
and just to highlight some great
examples of default cover art,

00:13:49.980 --> 00:13:53.640
House and Garden does a good job
here with their standard cover art.

00:13:53.770 --> 00:13:58.040
Very basic and generic compared to
their issue art which is exactly very

00:13:58.160 --> 00:14:00.680
specific to the issue they want to offer.

00:14:01.120 --> 00:14:03.540
GQ also does a great job at this.

00:14:03.580 --> 00:14:07.260
Very generic picture of a celebrity.

00:14:07.260 --> 00:14:09.380
Not sure who that guy is
actually at the moment.

00:14:09.430 --> 00:14:12.120
Michael Fassbender, new issue.

00:14:12.230 --> 00:14:16.390
Got all of the specific
information for that issue.

00:14:17.510 --> 00:14:18.880
Before we walk through
how to set this up,

00:14:18.880 --> 00:14:21.400
I want to emphasize to you we're
going to be making a change soon

00:14:21.400 --> 00:14:27.000
where we are requiring 1024 high
res icon art for your issues.

00:14:27.160 --> 00:14:29.780
So we want to make sure the next
time you're in iTunes Connect,

00:14:29.780 --> 00:14:31.720
go ahead and update
those to the high res.

00:14:31.820 --> 00:14:36.920
We want to support our new iPad users
and the 1024 art looks great on the iPad.

00:14:37.250 --> 00:14:40.360
So we are going to be
requiring that very soon.

00:14:40.520 --> 00:14:43.440
So let's walk through
how to set up an issue.

00:14:44.000 --> 00:14:46.760
Click on my Newsstand icon.

00:14:46.870 --> 00:14:51.340
You can see that I have all issues that
are currently set up for Vogue magazine.

00:14:51.410 --> 00:14:54.680
I want to go ahead and add an issue,
so I'm going to click that.

00:14:54.920 --> 00:14:57.530
I'm going to walk through each step here.

00:14:57.830 --> 00:15:00.790
Publish date is going to be the
date that the issue first shows up

00:15:00.870 --> 00:15:03.580
on the app store to your customers.

00:15:03.970 --> 00:15:07.760
The end date is optional because you can
run an issue for as long as you want.

00:15:07.830 --> 00:15:09.860
You don't necessarily
need to put one in there.

00:15:09.930 --> 00:15:12.250
If you do,
it will end on that date and it will

00:15:12.250 --> 00:15:16.310
actually go back to your default cover
art or will start your next issue.

00:15:16.820 --> 00:15:19.760
Issue ID, very important to Newsstand
kit for your coding,

00:15:19.760 --> 00:15:22.950
so you got to make sure this is
right when you set this up so

00:15:22.950 --> 00:15:25.080
you can call to that correctly.

00:15:26.150 --> 00:15:28.210
Your summary, it's exactly that.

00:15:28.470 --> 00:15:30.880
What's the summary of the specific issue?

00:15:30.880 --> 00:15:32.860
So what are your customers
going to be getting?

00:15:32.910 --> 00:15:34.100
What are they going to see on the store?

00:15:34.100 --> 00:15:37.660
How are you going to get them
to subscribe to that issue?

00:15:37.740 --> 00:15:41.360
And then the individual issue art,
very specific to what

00:15:41.370 --> 00:15:42.990
is inside that issue.

00:15:44.160 --> 00:15:46.560
So now I'm all set up,
and you can see I have a nice

00:15:46.560 --> 00:15:47.800
little active button here.

00:15:47.920 --> 00:15:50.400
So we want to show you that
this current issue is actually

00:15:50.400 --> 00:15:51.850
the one that's on the store.

00:15:52.030 --> 00:15:55.640
Anything that's not active will actually
go into a previous issues button,

00:15:55.760 --> 00:15:59.350
and you can check it out later
if you want to catalog that.

00:16:01.120 --> 00:16:06.840
So you might be thinking that that's kind
of a lot of steps to create every issue.

00:16:06.840 --> 00:16:08.320
So how can we automate?

00:16:08.510 --> 00:16:11.050
One of the great things about
Newsstand is we offer you an

00:16:11.050 --> 00:16:13.000
Atom feed for issue management.

00:16:13.000 --> 00:16:15.980
It allows you to host your
web content for your issues,

00:16:16.020 --> 00:16:18.660
all of your art and your metadata,
set up a feed with us,

00:16:18.710 --> 00:16:21.000
and you can actually
just prepare in advance.

00:16:21.000 --> 00:16:24.280
We have a technical specification
of all the XML on iTunes

00:16:24.280 --> 00:16:26.000
Connect for your download.

00:16:26.000 --> 00:16:28.760
And you're going to enter
this information here.

00:16:28.760 --> 00:16:30.710
We'll validate that the URL is active.

00:16:31.070 --> 00:16:32.930
and you're good to go.

00:16:33.290 --> 00:16:36.260
And just stepping back
to that issue I set up,

00:16:36.260 --> 00:16:39.020
all of these individual steps,

00:16:39.230 --> 00:16:41.860
Over and over and over.

00:16:41.920 --> 00:16:44.100
Don't need to worry about
that with the Atom feed.

00:16:44.100 --> 00:16:45.860
You can see my Spin magazine.

00:16:45.860 --> 00:16:48.460
I've set up all my issues in advance.

00:16:48.600 --> 00:16:51.100
Even if they change or
the content changes,

00:16:51.100 --> 00:16:53.040
you can update that.

00:16:53.130 --> 00:16:53.560
It's great.

00:16:53.820 --> 00:16:59.890
We actually pull in the issues every
24 hours so you can keep it updated.

00:17:01.000 --> 00:17:04.290
So you've set up your issues,
you've set up your subscriptions,

00:17:04.390 --> 00:17:05.880
and now you're all ready to submit.

00:17:05.880 --> 00:17:10.370
Well, the good news about Newsstand is
that you can update all the issue

00:17:10.370 --> 00:17:14.210
metadata at any time in iTunes Connect,
we're not requiring a new

00:17:14.210 --> 00:17:17.460
binary for every upload,
it's something that we're making

00:17:17.460 --> 00:17:21.110
it flexible for you because we
understand that things change,

00:17:21.250 --> 00:17:24.460
and we find that with Newsstand
developers they tend to be

00:17:24.460 --> 00:17:28.370
updating their content a lot more
than a lot of other developers.

00:17:28.420 --> 00:17:30.900
But the one thing we need to
remember here is that once

00:17:30.900 --> 00:17:34.480
you're live in Newsstand,
you're always in Newsstand.

00:17:34.670 --> 00:17:37.120
We don't mean this to be scary.

00:17:37.180 --> 00:17:40.430
It's really just to keep you
motivated that once your app is live

00:17:40.430 --> 00:17:43.580
in the springboard in Newsstand,
it's the best experience for

00:17:43.690 --> 00:17:46.500
your customer to have you
remain in that springboard.

00:17:46.500 --> 00:17:48.860
You can imagine if you wake up
in the morning and you're going

00:17:48.860 --> 00:17:51.380
to read your magazine and it's
gone out of your springboard.

00:17:51.500 --> 00:17:53.950
So we want to make sure that
the customers are going to know

00:17:54.070 --> 00:17:57.580
exactly where your content is,
and that's the reason behind this.

00:17:57.620 --> 00:17:57.620
Thank you.

00:18:00.820 --> 00:18:04.900
Now, how does this all
relate to the App Store?

00:18:05.030 --> 00:18:08.240
So another great benefit of Newsstand,
and this is really

00:18:08.240 --> 00:18:11.100
exclusive to Newsstand,
is your coverage that you're going to

00:18:11.170 --> 00:18:13.800
gain on the App Store as a Newsstand app.

00:18:13.930 --> 00:18:17.380
And this works because your
primary category you're setting up,

00:18:17.490 --> 00:18:21.460
just like you would any other app,
it's your choice, relevant to the content

00:18:21.460 --> 00:18:23.160
of your publication.

00:18:23.500 --> 00:18:28.140
But then what we do is we assign
Newsstand as a secondary category.

00:18:28.300 --> 00:18:33.300
So what this does is it allows you to
show up in multiple places on the store.

00:18:33.490 --> 00:18:36.880
We also introduced Newsstand
subcategories very recently,

00:18:36.990 --> 00:18:40.510
so you can further subcategorize
what your Newsstand app is.

00:18:40.690 --> 00:18:42.970
And this, again,
will get you two times the coverage.

00:18:42.980 --> 00:18:46.630
It's pretty amazing because you can
actually chart in both the Newsstand

00:18:46.630 --> 00:18:49.980
section of the App Store and,
let's say, the lifestyle section.

00:18:49.980 --> 00:18:52.040
It's a great benefit for
Newsstand developers,

00:18:52.100 --> 00:18:54.710
and we really want you to
take advantage of that.

00:18:56.380 --> 00:18:59.240
And going back again to
my Vogue issue we set up,

00:18:59.250 --> 00:19:01.800
this is exactly how
I entered in iTunes Connect.

00:19:01.870 --> 00:19:02.800
It's one-to-one.

00:19:02.800 --> 00:19:07.880
Everything you type in and save is going
to show up exactly on the App Store.

00:19:10.180 --> 00:19:13.820
So just to run a little bit of a
comparison between normal subscriptions,

00:19:13.820 --> 00:19:17.400
so maybe you're using subscription
now but you're not using Newsstand,

00:19:17.400 --> 00:19:20.080
and then Newsstand subscriptions.

00:19:20.220 --> 00:19:23.290
Karl talked a little bit about background
downloading and how great that is,

00:19:23.350 --> 00:19:25.260
one of the great features of Newsstand.

00:19:25.430 --> 00:19:28.210
We now introduce the Atom feed.

00:19:28.440 --> 00:19:32.900
We introduced individual issue metadata,
an opportunity to showcase up-to-date

00:19:32.900 --> 00:19:35.560
information about your issues.

00:19:35.690 --> 00:19:39.240
And then custom cover art,
beautiful art variations you can have

00:19:39.240 --> 00:19:41.290
if you have a newspaper or a magazine.

00:19:41.290 --> 00:19:45.240
We offer all of these different
customized cover art options for you.

00:19:45.350 --> 00:19:47.340
Well, let's take a look at
background downloading.

00:19:47.420 --> 00:19:50.140
Not currently available for
regular subscriptions that

00:19:50.140 --> 00:19:51.440
are not using Newsstand.

00:19:51.650 --> 00:19:55.070
However, it's available for
Newsstand subscriptions.

00:19:55.260 --> 00:20:00.110
The Atom feed, also available currently
only to Newsstand apps.

00:20:01.050 --> 00:20:03.500
Individual issue metadata,
not something that we offer

00:20:03.500 --> 00:20:04.730
for regular subscriptions.

00:20:04.880 --> 00:20:07.760
Newsstand subscriptions definitely can.

00:20:07.810 --> 00:20:11.840
And customized cover art,
not available for regular subscriptions.

00:20:12.050 --> 00:20:14.500
Starting to see a pattern here.

00:20:14.800 --> 00:20:17.600
Newsstand and subscriptions
really are better together.

00:20:17.710 --> 00:20:20.490
If you have a periodical and
you are not using Newsstand,

00:20:20.610 --> 00:20:21.660
you definitely should be.

00:20:21.870 --> 00:20:26.600
It's going to get you leaps ahead
of other developers on the store.

00:20:27.550 --> 00:20:30.920
And just to summarize best practices,
go ahead and automate

00:20:30.920 --> 00:20:32.380
using the Atom feed.

00:20:32.460 --> 00:20:35.160
Once in Newsstand, always in Newsstand.

00:20:35.220 --> 00:20:36.730
And double your app store coverage.

00:20:36.810 --> 00:20:37.840
Let us do that for you.

00:20:37.980 --> 00:20:40.490
Take advantage of it with Newsstand.

00:20:41.160 --> 00:20:43.330
And with that,
I'd like to bring up Ben Nielsen again to

00:20:43.370 --> 00:20:45.370
talk about Newsstand KIPP best practices.

00:20:45.640 --> 00:20:47.370
Thank you.

00:20:49.000 --> 00:20:49.660
Thanks.

00:20:49.660 --> 00:20:52.690
All right,
so we've had a little of the business,

00:20:52.690 --> 00:20:55.870
business ideas that go
into making Newsstand apps,

00:20:55.870 --> 00:20:57.910
a little more of the logistics.

00:20:57.910 --> 00:21:00.380
Now let's get down into some of the API.

00:21:00.380 --> 00:21:04.430
Specifically, Newsstand Kit and the
APIs that are related to it.

00:21:04.510 --> 00:21:08.710
So in this section, we're going to cover
three different aspects.

00:21:08.710 --> 00:21:11.740
The first one's going to
be push notifications.

00:21:11.740 --> 00:21:14.670
Everything starts with
a push notification.

00:21:14.670 --> 00:21:18.980
This is how the app knows that
there's new content available.

00:21:19.000 --> 00:21:21.850
So this is one of the
most important parts.

00:21:21.850 --> 00:21:25.360
Or rather,
this is really where it all starts.

00:21:25.360 --> 00:21:27.760
And so it's really
important because of that.

00:21:27.810 --> 00:21:30.620
But then we're going to talk
about background downloadings.

00:21:30.620 --> 00:21:33.020
And background downloading is
really the heart of Newsstand.

00:21:33.020 --> 00:21:37.500
As both Karl and Aubrey mentioned,
this is what sets you apart from

00:21:37.500 --> 00:21:39.680
any other app on the App Store.

00:21:40.000 --> 00:24:54.800
[Transcript missing]

00:24:54.880 --> 00:24:57.960
So let's see how this works.

00:24:57.960 --> 00:25:01.440
To go back to our example here,
the first one is when you sent and

00:25:01.440 --> 00:25:02.540
that's kind of when you target.

00:25:02.540 --> 00:25:07.800
So the next two markers, the green ones,
depict when you would expect to

00:25:07.910 --> 00:25:09.930
be sending the next two days.

00:25:09.940 --> 00:25:13.040
So you couldn't actually send that
time and you sent a little late on one

00:25:13.040 --> 00:25:14.720
day and a little early on the next.

00:25:14.720 --> 00:25:17.640
Well, in iOS 5, this wouldn't work well,
right?

00:25:17.690 --> 00:25:19.550
You'd throttle that third day.

00:25:20.050 --> 00:25:22.660
But in iOS 6,
you're just fine because you're

00:25:22.820 --> 00:25:26.150
no more than four hours before
or after your regular time,

00:25:26.150 --> 00:25:27.400
your target time.

00:25:27.400 --> 00:25:31.160
But it's interesting because these are,
in fact, only 16 hours apart and,

00:25:31.160 --> 00:25:33.260
in fact, happen on the same logical day.

00:25:33.280 --> 00:25:34.640
That's just fine.

00:25:34.640 --> 00:25:37.360
As long as you can
keep this idea in mind,

00:25:37.360 --> 00:25:39.430
your push will get through.

00:25:39.440 --> 00:25:44.240
So that's one benefit with
iOS 6 to help with this issue.

00:25:44.240 --> 00:25:47.730
But it is important to realize
that this still averages out to be

00:25:47.730 --> 00:25:49.860
one Newsstand push notification.

00:25:49.920 --> 00:25:55.530
So that's one benefit with
iOS 6 to help with this issue.

00:25:56.480 --> 00:26:00.830
But we also, in 5.1,
we encountered a situation where we

00:26:00.830 --> 00:26:05.240
realized maybe we need to adjust what
actually triggers the start and the

00:26:05.240 --> 00:26:07.910
end times of these throttling windows.

00:26:08.430 --> 00:26:12.000
So in iOS 5.1,
it was actually triggered by the receive

00:26:12.070 --> 00:26:15.260
time of the push on the device itself.

00:26:15.260 --> 00:26:19.040
This was a little problematic because
what happens when the device was off,

00:26:19.200 --> 00:26:21.590
right, or when it was out of range?

00:26:21.710 --> 00:26:24.290
Well, let's go back to my handy
little timeline here.

00:26:24.400 --> 00:26:28.910
So let's say on the first white dot,
you actually sent and it was received on

00:26:28.910 --> 00:26:31.040
the device and everything worked great.

00:26:31.140 --> 00:26:32.980
The second one, you sent right on time.

00:26:33.000 --> 00:26:36.310
Everything was great,
but the device was off.

00:26:36.550 --> 00:26:38.580
And they turned it back on
a couple of hours later and

00:26:38.580 --> 00:26:41.600
they got the notification,
you know, downloaded the content,

00:26:41.600 --> 00:26:45.340
everything's great there, but, well,
we've got the same problem we did before.

00:26:45.340 --> 00:26:48.730
You know, that third day got throttled
when it was on and it could

00:26:48.730 --> 00:26:52.710
have gotten that notification,
but it thought that it was too recent.

00:26:52.720 --> 00:26:56.660
So, again,
this ends up throttling the next day.

00:26:56.660 --> 00:26:59.440
But it's actually a little bit
worse than the first problem.

00:26:59.440 --> 00:27:02.960
It's worse because the throttling
window varies very widely on

00:27:03.010 --> 00:27:05.020
all these different devices.

00:27:05.020 --> 00:27:08.390
You send on time, you thought,
but you weren't sure when

00:27:08.390 --> 00:27:09.540
they were going to get it.

00:27:09.560 --> 00:27:13.330
And any particular device
could be very different.

00:27:13.360 --> 00:27:15.500
So this makes debugging a real headache.

00:27:15.520 --> 00:27:17.960
So in iOS 6 we wanted
to address this as well.

00:27:17.960 --> 00:27:22.820
So what we do is we're actually
recording the time stamp that

00:27:22.820 --> 00:27:27.560
the push notification service had
when it got your notification.

00:27:27.560 --> 00:27:30.760
And we send that down along with
the notification to the device

00:27:30.760 --> 00:27:34.510
and the device can use that
for its throttling decisions.

00:27:34.680 --> 00:27:39.600
So hopefully this will make it consistent
across all of your users' devices

00:27:39.770 --> 00:27:43.280
and it's going to get rid of the
intermittent connectivity problem because

00:27:44.420 --> 00:27:48.130
it doesn't matter when they get it,
it matters when you sent it.

00:27:48.240 --> 00:27:49.760
This should make it very consistent.

00:27:49.760 --> 00:27:53.020
You should know when you sent it
that everything's going to work fine.

00:27:54.950 --> 00:27:56.960
Okay, so let's,
those are some of the changes that

00:27:56.970 --> 00:28:01.200
we made to make push throttling
work a little bit better for you.

00:28:01.200 --> 00:28:04.440
Let's talk about some of the
pitfalls that you've run into.

00:28:04.440 --> 00:28:08.080
The first is to remember that
the push notification service is

00:28:08.150 --> 00:28:10.300
not a store and forward service.

00:28:10.300 --> 00:28:14.010
It will store the last notification
if the device is not reachable,

00:28:14.080 --> 00:28:16.240
but only the last one.

00:28:16.370 --> 00:28:20.170
This means that it's easy to
stomp a content notification with

00:28:20.170 --> 00:28:22.560
some other type of notification.

00:28:22.560 --> 00:28:24.090
So what's the rationale behind this?

00:28:24.240 --> 00:28:28.500
Well, some people have thought, well,
I don't know if the notification

00:28:28.500 --> 00:28:30.800
is going to get throttled,
the push notification,

00:28:30.830 --> 00:28:33.340
the Newsstand notification
is going to get throttled.

00:28:33.410 --> 00:28:35.540
So I'm going to send that and
then I'm going to immediately

00:28:35.540 --> 00:28:36.900
turn around and send another one.

00:28:36.940 --> 00:28:39.470
And this is going to have an alert
to let the user know that new

00:28:39.470 --> 00:28:41.040
content should be downloading.

00:28:41.150 --> 00:28:44.220
The problem is you just
throttled yourself.

00:28:44.270 --> 00:28:46.700
That device wasn't immediately reachable.

00:28:46.740 --> 00:28:47.700
Now they're not going to get it.

00:28:47.830 --> 00:28:50.030
They're just going to get the alert.

00:28:50.780 --> 00:28:54.250
So the solution is there's no
reason you can't combine the two.

00:28:54.380 --> 00:28:58.560
You can mark your push notification
with the content available

00:28:58.560 --> 00:29:02.460
keyword that lets us know that
it's a Newsstand notification.

00:29:02.510 --> 00:29:05.820
But you can also include
the other alert keywords.

00:29:05.830 --> 00:29:08.760
And what will happen,
that push notification comes in.

00:29:08.760 --> 00:29:10.420
We see it's a Newsstand notification.

00:29:10.420 --> 00:29:12.720
We say, do we need to throttle this?

00:29:12.750 --> 00:29:15.440
If we say no,
we're going to launch your app,

00:29:15.460 --> 00:29:17.700
deliver you the notification,
and it's not going to be

00:29:17.770 --> 00:29:20.070
processed by any other subsystem.

00:29:20.170 --> 00:29:23.790
But you will, since your app is running,
have access to any of the normal APIs to

00:29:23.850 --> 00:29:27.830
interact with the user if you need to.

00:29:28.250 --> 00:29:31.980
But what becomes interesting
is if it does decide it has

00:29:31.990 --> 00:29:35.300
to throttle that notification,
it's going to route it

00:29:35.350 --> 00:29:36.460
to Notification Center.

00:29:36.530 --> 00:29:39.610
And Notification Center is going to
roll a banner or pop a modal alert

00:29:39.890 --> 00:29:41.500
or play a sound or badge the icon.

00:29:41.500 --> 00:29:43.880
Any of the normal things that
Notification Center does,

00:29:43.890 --> 00:29:45.500
it will do with that notification.

00:29:45.500 --> 00:29:51.280
So this can be a really elegant way of
solving this problem if you find you need

00:29:51.280 --> 00:29:54.270
to interact with the user more directly.

00:29:54.970 --> 00:29:57.190
But like I said,
most of that I think you'll

00:29:57.310 --> 00:30:00.500
find won't be necessary with the
other changes that we've made.

00:30:00.500 --> 00:30:03.360
So, other pitfalls.

00:30:03.390 --> 00:30:07.100
You really need to adopt
Newsstand completely.

00:30:07.100 --> 00:30:10.780
It's really designed to work
well as a cohesive unit.

00:30:10.780 --> 00:30:12.130
So what do I mean by this?

00:30:12.250 --> 00:30:13.960
Well, there are kind of two
things you need to do.

00:30:13.960 --> 00:30:15.740
You need to support multitasking.

00:30:15.740 --> 00:30:19.610
To get a content notification
in the background or to

00:30:19.650 --> 00:30:23.530
do background downloading,
you need to tell us that you support

00:30:23.920 --> 00:30:25.680
those types of functionalities.

00:30:25.710 --> 00:30:31.720
And you do that by adding the Newsstand
content key to your UI background

00:30:31.720 --> 00:30:33.730
modes array in your Info.plist.

00:30:33.790 --> 00:30:35.940
This enables both of
those functionalities.

00:30:36.020 --> 00:30:39.080
But there's a second piece that,
you know,

00:30:39.080 --> 00:30:41.600
this first piece most of you get.

00:30:41.710 --> 00:30:45.120
But the second piece we've
seen some confusion over.

00:30:45.120 --> 00:30:48.760
And that's you really need to register
for the push notification type.

00:30:48.760 --> 00:30:51.660
Even if you don't actually
use push notifications,

00:30:51.860 --> 00:30:54.730
and I'll explain why.

00:30:54.740 --> 00:30:57.050
But to do this, it's really easy.

00:30:57.060 --> 00:31:00.740
In your application to finish launching,
you just register for remote types.

00:31:00.780 --> 00:31:01.880
It's just an API call.

00:31:01.880 --> 00:31:03.070
And you pass in this type.

00:31:03.160 --> 00:31:06.340
Bit wise or with any of the
other types that you use.

00:31:06.340 --> 00:31:08.900
Why is this so important?

00:31:08.900 --> 00:31:11.420
Well,
background downloads are only helpful

00:31:11.420 --> 00:31:13.860
if you can actually kick them off,
right?

00:31:13.860 --> 00:31:15.510
Otherwise, there's no real point to them.

00:31:15.540 --> 00:31:20.590
But more than that,
the user needs a way of

00:31:20.590 --> 00:31:24.190
telling the application,
you know, I actually, I don't know,

00:31:24.260 --> 00:31:27.640
I've got data concerns,
I've got something, I don't want you to

00:31:27.640 --> 00:31:29.060
download in the background.

00:31:29.060 --> 00:31:31.060
That's a valid thing for
them to be able to say.

00:31:31.060 --> 00:31:36.000
And so the push notification type
is actually what we key off of to

00:31:36.040 --> 00:31:38.860
know if you're allowed to do that.

00:31:38.860 --> 00:31:40.860
To give the user that choice.

00:31:40.860 --> 00:31:43.350
Which means if you don't
register for that type,

00:31:43.360 --> 00:31:46.360
your background downloading
is automatically turned off.

00:31:46.360 --> 00:31:48.820
So it's a good idea to do this.

00:31:48.860 --> 00:31:53.700
But to clarify what this means,
the background downloading facility,

00:31:53.700 --> 00:31:55.960
the APIs that do the
background downloading,

00:31:55.960 --> 00:31:57.960
they are still available even
if the user turns it off.

00:31:57.960 --> 00:31:59.960
You can use them just fine.

00:31:59.960 --> 00:32:01.950
But what it means is that
when your app is not running,

00:32:02.020 --> 00:32:03.950
you won't be downloading.

00:32:03.960 --> 00:32:07.960
But while your app is from most,
you'll get full access to all of the

00:32:07.960 --> 00:32:09.950
the NSURail connection resources.

00:32:09.960 --> 00:32:11.960
Okay.

00:32:11.960 --> 00:32:13.610
So,

00:32:14.910 --> 00:32:19.140
Just two other quick points before
we move on to background downloading.

00:32:19.140 --> 00:32:21.440
That is debugging.

00:32:21.440 --> 00:32:25.440
We have gotten a lot of questions about,
how do I know if my push

00:32:25.440 --> 00:32:27.960
notification got to the device?

00:32:27.960 --> 00:32:33.230
Some simple solution that's not
foolproof but it works fairly well,

00:32:33.230 --> 00:32:37.790
is you can just correlate a unique
identifier with that push notification,

00:32:37.800 --> 00:32:40.190
send it down in your
payload to the device,

00:32:40.190 --> 00:32:43.080
and then when your app
gets the push notification,

00:32:43.080 --> 00:32:46.780
you can just ping that back to the
server as well as with information on

00:32:46.780 --> 00:32:48.960
whether or not the push type was enabled.

00:32:48.960 --> 00:32:52.200
You can see how quickly the
devices respond to this,

00:32:52.200 --> 00:32:58.960
people have them off at certain times,
or if they just turned off

00:32:58.960 --> 00:33:01.590
your downloading facility,
your push notification

00:33:01.600 --> 00:33:03.260
facility completely.

00:33:03.260 --> 00:33:06.300
This can give you an idea of how well
this is working for you and what your

00:33:06.300 --> 00:33:09.880
customers are thinking about this.

00:33:09.900 --> 00:33:14.730
Also, don't forget,
there is a -- there is a user default

00:33:14.730 --> 00:33:18.860
that you set in your app that will
allow -- that will turn off the push

00:33:18.860 --> 00:33:22.310
throttling for your developer devices
so you can practice as much as you

00:33:22.320 --> 00:33:24.540
want and really perfect things.

00:33:24.550 --> 00:33:28.220
It's kind of long,
so I'll just point you to it here,

00:33:28.220 --> 00:33:31.040
but you just set --
using NS user default,

00:33:31.040 --> 00:33:34.960
set Boolean true or yes
for key to that key,

00:33:34.960 --> 00:33:39.180
and then that will turn off
the throttling for your app.

00:33:39.350 --> 00:33:42.340
Okay, so now let's switch over
to background downloads.

00:33:42.500 --> 00:33:46.430
And again, to reiterate,
the key is just do it.

00:33:46.560 --> 00:33:48.540
This is an important part of Newsstand.

00:33:48.640 --> 00:33:52.700
This is really the power of
what Newsstand brings you

00:33:52.700 --> 00:33:54.910
and brings to your users.

00:33:55.460 --> 00:33:59.410
But possible pitfalls regarding this
is you have to realize that not all

00:33:59.410 --> 00:34:02.690
NSURL connections are created equal,
even though that's the

00:34:02.690 --> 00:34:06.580
facility that we use,
it's not the normal run of the mill one.

00:34:06.590 --> 00:34:08.370
For example,
you can get an NSURL connection

00:34:08.370 --> 00:34:10.900
object that will start up
an Internet connection,

00:34:10.900 --> 00:34:13.950
download or network connection,
download whatever content there

00:34:13.950 --> 00:34:17.280
is using NSURL connection,
connection with request.

00:34:17.530 --> 00:34:21.240
However, this is very,
very different than NKS at download,

00:34:21.270 --> 00:34:23.000
download with delegate.

00:34:23.000 --> 00:34:27.120
Even though they look very similar,
the first one is completely in process.

00:34:27.220 --> 00:34:28.540
It's your app running it.

00:34:28.540 --> 00:34:31.500
Your app has to be alive and kicking.

00:34:31.500 --> 00:34:34.740
The run loop has to be turning
in order for this one to work.

00:34:34.740 --> 00:34:38.560
Whereas the second one is really
just a thin wrapper into the system.

00:34:38.560 --> 00:34:42.040
We really gave you a hook into
the system's downloading facility.

00:34:42.040 --> 00:34:44.920
And so even when your app stops,
it terminates, it does whatever,

00:34:44.920 --> 00:34:46.170
we keep downloading it.

00:34:46.180 --> 00:34:47.900
So they're not the same thing.

00:34:47.900 --> 00:34:50.650
So you really need to be
using the Newsstand Kit API to

00:34:50.650 --> 00:34:52.740
do background downloading.

00:34:52.740 --> 00:34:57.080
And as I said,
this isn't just background downloading.

00:34:57.080 --> 00:34:59.680
It works for, you know,
even when background

00:34:59.680 --> 00:35:01.500
downloading is turned off,
it will still download

00:35:01.500 --> 00:35:02.580
while your app is alive.

00:35:02.580 --> 00:35:07.100
So there's really no loss to
functionality by using NKS at

00:35:07.100 --> 00:35:11.940
download over an NSURL connection,
as opposed to NSURL connection.

00:35:11.950 --> 00:35:15.300
But like I said,
don't forget to register the push

00:35:15.300 --> 00:35:17.980
type since this gates that facility.

00:35:17.980 --> 00:35:19.780
Okay.

00:35:21.120 --> 00:35:23.250
When thinking about
background downloading,

00:35:23.250 --> 00:35:25.660
it's really important to
remember that you need to make

00:35:25.660 --> 00:35:27.100
your content easy to deliver.

00:35:27.100 --> 00:35:33.100
If you've got 18,000 HTML files
and images and CSS files or

00:35:33.100 --> 00:35:36.130
PDFs or whatever they may be,
if you've got lots and

00:35:36.130 --> 00:35:39.340
lots and lots of them,
this can be pretty problematic.

00:35:39.350 --> 00:35:42.540
Because the more connections
that you have that you fire off,

00:35:42.630 --> 00:35:46.370
the more room there is for error and
the more room there is for delay.

00:35:46.380 --> 00:35:48.380
It can add a significant
overhead to the system.

00:35:50.400 --> 00:35:55.250
And the intermittent nature of
the cellular connectivity and

00:35:55.250 --> 00:35:59.440
device coming and going and all
that can really make this much,

00:35:59.440 --> 00:36:00.350
much worse.

00:36:00.350 --> 00:36:03.500
So we suggest you keep
the file count low.

00:36:03.700 --> 00:36:07.650
And that is we keep the file count
low while you're transmitting it.

00:36:07.890 --> 00:36:11.590
Package it up, zip it up, do whatever,
make some type of archive for your

00:36:11.650 --> 00:36:16.710
transmission and then unpackage it and
put it wherever and put it in the proper

00:36:16.710 --> 00:36:19.660
location once it gets onto the device.

00:36:19.660 --> 00:36:20.980
This can really give you a nice,
performance boost,

00:36:21.280 --> 00:36:24.760
especially if there are a lot of,
if the system is under heavy load and

00:36:24.760 --> 00:36:27.590
a lot of new stand kit apps working.

00:36:27.780 --> 00:36:31.340
Okay, so let's talk about the
Newsstand repository.

00:36:31.340 --> 00:36:33.820
With iOS 5.0,
we introduced with Newsstand

00:36:33.820 --> 00:36:37.410
Kit a managed repository
for all of your content.

00:36:37.600 --> 00:36:42.100
Now, this is a really big deal because
it's not getting backed up.

00:36:42.100 --> 00:36:45.660
And this is a very, very good thing.

00:36:45.660 --> 00:36:48.100
And we're going to talk
about this more in a second.

00:36:48.100 --> 00:36:53.460
But the idea is that you should put all
the content for your issues in the issue

00:36:53.510 --> 00:36:56.560
location specified in the repository.

00:36:57.700 --> 00:37:00.010
So you can download them
with the Newsstand Kit API.

00:37:00.010 --> 00:37:02.940
That's going to take and download
them to a temporary location.

00:37:02.940 --> 00:37:06.150
You can take, unpackage them,
and then move them all into

00:37:06.150 --> 00:37:07.870
this particular location.

00:37:07.870 --> 00:37:11.230
And you're going to find this is going
to give you a really good user experience

00:37:11.350 --> 00:37:12.980
for a bunch of different reasons.

00:37:13.010 --> 00:37:15.300
But let's talk about the first one.

00:37:15.340 --> 00:37:17.930
You know, why is it good for it
not to be backed up?

00:37:17.930 --> 00:37:21.710
Well, say you put it in some other place,
like the documents directory,

00:37:21.710 --> 00:37:23.260
that backs up to iCloud.

00:37:23.260 --> 00:37:26.660
And more than that,
it's not just that it backs up to iCloud,

00:37:26.660 --> 00:37:27.680
but it's also that it's a very
good way to back up your issues.

00:37:27.680 --> 00:37:28.650
It's always there.

00:37:28.650 --> 00:37:32.110
Which means it can take
up a lot of room on disk.

00:37:32.170 --> 00:37:37.060
It's really easy to fill up a user's
partition with lots and lots of issues.

00:37:37.060 --> 00:37:38.590
And it doesn't ever go away.

00:37:38.640 --> 00:37:41.750
And then, of course,
when that backs up to iCloud,

00:37:41.800 --> 00:37:45.220
you've completely overrun
their iCloud backup space.

00:37:45.220 --> 00:37:48.060
And now the user isn't
very happy with you.

00:37:48.080 --> 00:37:52.030
So it's not a good idea to put it
in one of these types of locations.

00:37:52.030 --> 00:37:55.060
More than that,
it can significantly increase the

00:37:55.060 --> 00:37:57.370
time it takes to back up that data.

00:37:57.660 --> 00:38:02.030
And it can significantly increase the
amount of bandwidth to back that up.

00:38:02.030 --> 00:38:05.430
So if they hit backup because they're
about to swap phones somewhere,

00:38:05.430 --> 00:38:08.510
you know, for whatever reason,
they're on a cell connection,

00:38:08.510 --> 00:38:12.300
you could cause them to completely
eat up through their data allotment.

00:38:12.300 --> 00:38:14.390
So this isn't a very good idea either.

00:38:14.390 --> 00:38:17.690
And, of course,
all of that does have a battery cost.

00:38:17.690 --> 00:38:19.780
Hopefully, they're plugged in.

00:38:19.790 --> 00:38:23.500
But if they're not plugged in,
you just cost them a lot of time,

00:38:23.500 --> 00:38:24.680
a lot of battery.

00:38:26.440 --> 00:38:29.640
So it's a good idea to follow
the iOS data storage guidelines.

00:38:29.640 --> 00:38:32.140
You can find them on developer.apple.com.

00:38:32.140 --> 00:38:34.370
Keep in mind this is something
that AppReview is looking at,

00:38:34.430 --> 00:38:39.400
so if you're a big offender here,
they just may not approve your app.

00:38:39.400 --> 00:38:41.380
So important thing to remember.

00:38:41.400 --> 00:38:43.400
So talking about disk space.

00:38:43.400 --> 00:38:45.370
So what's the solution?

00:38:45.370 --> 00:38:50.130
Letting Newsstand manage the
repository for you allows the system

00:38:50.130 --> 00:38:53.400
to free up space when the user
wants to download another issue,

00:38:53.400 --> 00:38:54.400
a newer issue.

00:38:54.400 --> 00:38:57.650
Or when the user wants to take a picture,
you know,

00:38:57.720 --> 00:39:00.400
or the user wants to download a new app.

00:39:00.400 --> 00:39:02.400
Whatever they're wanting to do,
they expect that to work.

00:39:02.400 --> 00:39:08.330
And this allows NewsstandKit to help
keep the user happy in that regard.

00:39:08.460 --> 00:39:13.400
And you can help us do a better job of
this by giving us certain information.

00:39:13.400 --> 00:39:16.460
You can tell us what issue is the
most important to your user so that

00:39:16.460 --> 00:39:18.400
we can prioritize this over others.

00:39:18.400 --> 00:39:22.400
You can also,
by supplying the date parameter,

00:39:22.400 --> 00:39:22.400
this allows us to see what
are the most important issues.

00:39:22.400 --> 00:39:25.400
What are they most likely
going to be wanting?

00:39:25.400 --> 00:39:29.740
Therefore,
we can do a smart job of trying to

00:39:29.880 --> 00:39:34.400
keep these things for you so that
you don't have to manage it and,

00:39:34.400 --> 00:39:36.400
most importantly,
the user doesn't have to manage it.

00:39:36.400 --> 00:39:39.380
Because, like we said,
bandwidth and cloud storage are not free.

00:39:39.460 --> 00:39:42.580
Should they run into a problem,
they can see that your app

00:39:42.740 --> 00:39:44.400
is causing an issue for them.

00:39:44.400 --> 00:39:46.400
They're going to see that in settings.

00:39:46.400 --> 00:39:50.400
And then if you make them
go and manage it themselves,

00:39:50.400 --> 00:39:50.400
the most likely outcome is they're going
to be able to manage it themselves.

00:39:50.400 --> 00:39:53.290
The most likely outcome
is they're going to be,

00:39:53.290 --> 00:39:54.580
"It's not worth it.

00:39:54.870 --> 00:39:59.380
Delete." Which is just the worst
experience for everybody involved.

00:39:59.390 --> 00:40:02.400
So we really don't want that.

00:40:02.410 --> 00:40:08.340
But, of course, if these issues can be
evicted from the system,

00:40:08.530 --> 00:40:12.070
users are going to want to be able
to go back and see whatever issues

00:40:12.080 --> 00:40:14.380
that they've previously purchased.

00:40:14.440 --> 00:40:17.400
So you should allow them to
re-download that content.

00:40:17.400 --> 00:40:18.400
You really should think
of this as a cache.

00:40:18.400 --> 00:40:22.680
Think of this as a cache,
an on-device cache.

00:40:22.900 --> 00:40:26.130
and really those are the main
points for Newsstand Kit.

00:40:26.240 --> 00:40:30.840
So in summary, remember,
don't stop your push notifications.

00:40:30.840 --> 00:40:33.980
Use NK asset download to do all
of your background downloading and

00:40:33.990 --> 00:40:36.190
really do background downloading.

00:40:36.190 --> 00:40:37.800
This is a great feature.

00:40:37.800 --> 00:40:42.030
Package things up for an efficient
transfer and keep your files in the

00:40:42.030 --> 00:40:46.990
repository so we can make the best user
experience possible so that they are more

00:40:46.990 --> 00:40:51.800
happy with your app so that they don't
have to manually go in and manage things.

00:40:51.800 --> 00:40:55.800
Okay, and that's really it for
Newsstand Kit best practices.

00:40:55.800 --> 00:40:58.800
We have Paul Marcos is our
app services evangelist.

00:40:58.800 --> 00:41:02.770
He'd love to hear from you if you have
problems or if you've got some feedback.

00:41:02.770 --> 00:41:03.740
We'd love to hear that.

00:41:03.820 --> 00:41:08.580
There's some really good documentation
up on developer.apple.com and I'd like

00:41:08.600 --> 00:41:10.800
to single out the Atom feed again.

00:41:10.810 --> 00:41:14.800
Really great resource for automation
to make your lives much simpler.

00:41:14.800 --> 00:41:17.800
The data storage guidelines, of course.

00:41:17.870 --> 00:41:19.500
We have some sessions,
some past and some upcoming that

00:41:19.560 --> 00:41:20.800
you'll probably be interested in.

00:41:20.800 --> 00:41:26.710
Some iTunes store accessibility,
of course.

00:41:26.770 --> 00:41:29.730
Also, Aubrey will be delivering an
iTunes Connect for app developers

00:41:29.750 --> 00:41:32.800
session immediately after this one
if you want to follow her on over.

00:41:32.800 --> 00:41:36.800
And subscriptions.

00:41:36.800 --> 00:41:38.800
And with that,
I'd like to thank you all for coming.

00:41:38.800 --> 00:41:40.510
It's been a pleasure.

00:41:40.510 --> 00:41:40.800
Thank you.