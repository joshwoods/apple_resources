WEBVTT

00:00:11.090 --> 00:00:11.980
My name is Brooke.

00:00:12.130 --> 00:00:14.410
I'm an engineer on the Xcode team.

00:00:14.490 --> 00:00:19.630
This session is about how you can
most efficiently work with Xcode.

00:00:20.700 --> 00:00:23.270
Xcode supports a wide
variety of working styles.

00:00:23.330 --> 00:00:25.860
When we were designing Xcode,
we knew that different engineers would

00:00:25.890 --> 00:00:27.700
want to use their tools differently.

00:00:27.700 --> 00:00:30.420
So in this session,
we'd like to show you three

00:00:30.450 --> 00:00:32.090
different ways to use Xcode.

00:00:32.660 --> 00:00:35.210
First,
I'll show you my single window workflow.

00:00:35.450 --> 00:00:37.700
After that,
Kelly will come up and show you her

00:00:37.700 --> 00:00:40.300
workflow using tabs and behaviors.

00:00:40.630 --> 00:00:44.050
And finally, Chris will come up and show
you his keyboard-centric

00:00:44.050 --> 00:00:45.930
workflow using multiple windows.

00:00:48.600 --> 00:00:53.600
All right, so let's look at how
I use a single window.

00:00:53.610 --> 00:00:57.760
Xcode tries to automatically show you
just what you need at the time for

00:00:57.760 --> 00:01:00.180
whatever your current activity is.

00:01:01.400 --> 00:01:05.050
and But sometimes you'll want
to show or hide different

00:01:05.060 --> 00:01:06.980
parts of the window yourself,
so it's convenient to know

00:01:06.980 --> 00:01:08.400
the keyboard shortcuts.

00:01:08.460 --> 00:01:11.520
After we look at that,
we'll see how you can find and

00:01:11.520 --> 00:01:13.400
open content in the editor.

00:01:13.400 --> 00:01:17.460
And then we'll look at some
source editor tips and tricks.

00:01:18.810 --> 00:01:21.030
So let's see a demo.

00:01:21.090 --> 00:01:24.990
So I've got a bug to fix,
but the first thing I notice here is

00:01:24.990 --> 00:01:28.220
that I've got the utility area open,
and I know I'm not going to need

00:01:28.220 --> 00:01:31.260
it because I'm just going to
be doing some source editing.

00:01:31.340 --> 00:01:33.410
So I can hide that with
this button up here,

00:01:33.420 --> 00:01:36.000
but there's also a keyboard
shortcut I like to use,

00:01:36.000 --> 00:01:37.380
Command-Option-0.

00:01:38.000 --> 00:01:39.940
And if I want even more
space for the editor,

00:01:39.940 --> 00:01:43.560
I can hide the navigator
area with Command 0.

00:01:43.900 --> 00:01:45.340
Let's bring that back for now.

00:01:45.380 --> 00:01:50.900
So in my bug,
I've got a crash in the app delegate.

00:01:50.900 --> 00:01:54.960
So I'm just going to click down here,
type app del,

00:01:55.000 --> 00:01:57.590
and there's my app delegate.

00:01:58.110 --> 00:02:03.560
Actually, my crash report says what
method I'm crashing in.

00:02:03.610 --> 00:02:07.360
So instead,
I'm going to use OpenQuickly to

00:02:07.430 --> 00:02:10.770
bring that up with Command Shift O.

00:02:11.700 --> 00:02:15.870
Type in the name of that method,
save context.

00:02:15.870 --> 00:02:20.360
Open quickly is really powerful
and actually kind of forgiving.

00:02:20.600 --> 00:02:26.460
It'll find files or symbols both
in my project or in the SDK.

00:02:26.460 --> 00:02:31.090
And often I don't even need to type the
name of what I'm looking for correctly.

00:02:31.310 --> 00:02:34.640
So now that it's found the
method I'm looking for,

00:02:34.640 --> 00:02:36.540
I'm just going to hit return.

00:02:36.960 --> 00:02:39.200
and it's shown me the
symbol that I'm looking for.

00:02:39.200 --> 00:02:42.960
So what you just saw is an example
of what we call navigation.

00:02:43.080 --> 00:02:47.080
Navigation is the act of opening
a document or a specific location

00:02:47.080 --> 00:02:48.740
of a document in the editor.

00:02:48.800 --> 00:02:50.890
So, on to my bug.

00:02:50.960 --> 00:02:54.570
So I see in here it looks
like we're calling abort.

00:02:54.570 --> 00:02:56.340
That's probably where we're crashing.

00:02:56.380 --> 00:03:01.490
And it must be from the save error.

00:03:01.610 --> 00:03:05.550
And I've even got a comment here telling
me that I need to fix the bug here.

00:03:05.620 --> 00:03:07.490
Okay, well...

00:03:09.000 --> 00:03:12.810
I wonder if NSManager object
context has another method,

00:03:12.810 --> 00:03:15.840
another save method that might
deal with this error for me.

00:03:15.840 --> 00:03:20.450
So I'm going to jump to the definition.

00:03:21.300 --> 00:03:25.210
of the Save method in the
Assistant Editor by holding down Command,

00:03:25.210 --> 00:03:26.810
Option, and clicking on it.

00:03:26.930 --> 00:03:31.420
So now I can, so that's brought up,
and it's managed object context

00:03:31.420 --> 00:03:34.000
in the Assistant Editor,
so I can use this as a reference

00:03:34.490 --> 00:03:39.280
while I'm still looking at my
primary document that I'm working on.

00:03:40.690 --> 00:03:44.600
This is what we call modified navigation.

00:03:44.720 --> 00:03:50.930
Normally, if I were to command-click
on the saved method,

00:03:51.000 --> 00:03:52.510
it would open it up
in the primary editor.

00:03:52.720 --> 00:03:55.900
But in this case, by holding down Option,
I jumped to Definition in

00:03:55.920 --> 00:03:57.620
the Assistant Editor instead.

00:03:58.470 --> 00:04:02.550
So, looking around in an
S-managed object context,

00:04:02.550 --> 00:04:05.820
I see no, there's no other save method,
so...

00:04:06.100 --> 00:04:08.430
That's not going to help me.

00:04:08.520 --> 00:04:10.310
But there's something else I could try.

00:04:10.370 --> 00:04:12.100
Maybe I could,
instead of fixing the error here,

00:04:12.100 --> 00:04:16.240
I might want to,
I might try pushing the error

00:04:16.240 --> 00:04:18.890
onto the callers instead.

00:04:19.650 --> 00:04:24.590
So if I click on the
Assistant Editor category pop-up here,

00:04:24.690 --> 00:04:30.470
I see one of the new categories in the
latest version of Xcode is Callers.

00:04:30.700 --> 00:04:35.200
I'll select that, and I see there are
three different callers,

00:04:35.200 --> 00:04:36.980
and they're actually all right here,
and none of them are doing

00:04:36.980 --> 00:04:39.920
any other error handling,
so that's not going to help me either.

00:04:39.940 --> 00:04:43.050
Alright, so I'm done with the
Assistant Editor for now.

00:04:43.270 --> 00:04:50.410
I'm just going to put that
away with Command-Return.

00:04:56.900 --> 00:05:01.420
Alright, so clearly I'm not going to fix
this bug in front of all of you.

00:05:01.420 --> 00:05:03.490
Instead,

00:05:04.500 --> 00:05:07.660
I'm just going to make this
comment a to-do to make it

00:05:07.710 --> 00:05:09.610
a little bit more obvious.

00:05:11.960 --> 00:05:18.680
You can see when I did that,
it made-- it promoted that

00:05:18.680 --> 00:05:18.680
comment into the function pop-up.

00:05:20.930 --> 00:05:22.180
As you know,
the function pop-up will show you

00:05:22.180 --> 00:05:26.220
all the symbols in your document,
but you can also annotate the

00:05:26.220 --> 00:05:31.120
function pop-up with to-dos,
pragmas like this one here,

00:05:31.120 --> 00:05:39.070
or fix-me comments like
this one down here.

00:05:41.580 --> 00:05:43.640
Another feature of the Function
Popup you might not know about

00:05:43.660 --> 00:05:45.190
is you can actually search in it.

00:05:45.290 --> 00:05:51.930
So if I type "application," it'll show me
just the matching entries in the popup.

00:05:54.300 --> 00:06:01.140
and I can just click to
navigate to one of those.

00:06:01.140 --> 00:06:01.140
Another way I like to use
the function pop-up is

00:06:01.390 --> 00:06:04.940
With the keyboard shortcut, I can use,
I can just press

00:06:04.940 --> 00:06:09.460
Control 6 to bring it up,
arrow up to the method I'm looking for,

00:06:09.460 --> 00:06:12.690
and hit return, and I'm there.

00:06:14.500 --> 00:06:17.060
Actually,
I remember earlier I was in this

00:06:17.060 --> 00:06:21.140
file and I saw there's a really messy
list of imports at the top here,

00:06:21.230 --> 00:06:23.140
and I'd like to clean that up.

00:06:23.180 --> 00:06:25.980
And I'm going to do this using
Mac OS 10's tech services.

00:06:26.000 --> 00:06:30.780
Mac OS X has powerful tech services that,
and since Xcode is, Xcode,

00:06:30.780 --> 00:06:35.290
like any Cocoa application,
can take advantage of these for free.

00:06:35.300 --> 00:06:37.670
The best part about it is that
you can create them yourself,

00:06:37.670 --> 00:06:40.050
and I'd like to show you how
right now using Automator.

00:06:40.060 --> 00:06:43.860
So all I need to do is click on
Automator to create a new document.

00:06:44.500 --> 00:06:45.020
Let me zoom out.

00:06:45.020 --> 00:06:47.630
I'm going to click on
Service and then Choose.

00:06:47.640 --> 00:06:50.940
This is going to create a new tech
service that takes a selection

00:06:51.480 --> 00:06:55.200
from any application and replaces
the selection with its output.

00:06:58.600 --> 00:07:03.640
I'm going to add a run shell script
that's going to run a bash script for me.

00:07:03.640 --> 00:07:08.340
It's going to sort and unique the text.

00:07:08.760 --> 00:07:11.710
And I'm just going to
call that sort and unique.

00:07:13.700 --> 00:07:15.460
and then I'll just quit out of Automator.

00:07:15.610 --> 00:07:23.480
Now I can,
I've got my text selected in Xcode,

00:07:23.480 --> 00:07:28.480
I can control click on it to
bring up the context menu,

00:07:28.480 --> 00:07:28.480
I'll select my service and as
you can see it sorted in ForB.

00:07:32.660 --> 00:07:35.490
So I can keep my imports
nice and organized,

00:07:35.490 --> 00:07:38.410
and I don't really have
to care too much about it.

00:07:40.500 --> 00:07:45.020
The last thing I'd like to show
you is how you can get back to

00:07:45.090 --> 00:07:47.300
documents you've already found.

00:07:47.300 --> 00:07:50.480
I could manually manage the files
I'm working on with Windows or Tabs.

00:07:50.520 --> 00:07:52.790
On the other hand,
I've already implicitly told Xcode

00:07:52.790 --> 00:07:55.740
I'm interested in those files
by opening and modifying them.

00:07:55.900 --> 00:08:00.650
Thankfully,
Xcode has a few ways to automatically

00:08:00.650 --> 00:08:00.650
surface the files in my working set.

00:08:01.000 --> 00:08:03.450
Under the Related Items pop-up,
there's Recent Files,

00:08:03.550 --> 00:08:08.170
which will show me the
next 10 files I've been in.

00:08:08.180 --> 00:08:11.260
There's also History,
which will show me not only the files,

00:08:11.260 --> 00:08:13.960
but all the places I've
been to in those files.

00:08:14.000 --> 00:08:17.230
And I can just click this or
hit back a few times until

00:08:17.310 --> 00:08:19.430
I get to what I'm looking for.

00:08:19.440 --> 00:08:22.700
But my favorite way to get back
to files I've already been in

00:08:22.720 --> 00:08:24.730
is with the Project Navigator.

00:08:24.740 --> 00:08:26.760
Most of the time,
I work with this open using

00:08:26.830 --> 00:08:28.280
the Source Control filter.

00:08:28.280 --> 00:08:29.900
So I'll click that now.

00:08:31.000 --> 00:08:35.170
And now the project navigator is showing
me just the files that I modified.

00:08:36.400 --> 00:08:39.180
I like to start off any task this way.

00:08:39.350 --> 00:08:42.280
As I make changes,
files are added to the list.

00:08:42.660 --> 00:08:45.800
This view helps keep me focused
on just the bug I'm working on.

00:08:45.800 --> 00:08:47.930
And the best part is,
now I've got one-click access

00:08:47.930 --> 00:08:50.260
to all the files that I'm most
likely to navigate to next.

00:08:50.260 --> 00:08:53.610
So you just saw that you can
easily organize Xcode's user

00:08:53.890 --> 00:08:56.120
interface with keyboard shortcuts.

00:08:56.870 --> 00:09:00.720
You saw a few ways to find and
navigate to your documents,

00:09:00.720 --> 00:09:08.810
and some source editor tips and tricks,
and how you can get back to documents

00:09:08.840 --> 00:09:14.510
you've already been in through some
automatic working set features in Xcode.

00:09:14.520 --> 00:09:18.230
Now I'd like to invite up
Kelly Keenan to show you her

00:09:18.320 --> 00:09:21.120
workflow using tabs and behaviors.

00:09:21.120 --> 00:09:22.470
Thanks, Brooke.

00:09:22.500 --> 00:09:23.880
Hi, everyone.

00:09:23.880 --> 00:09:24.720
I'm Kelly Keenan.

00:09:25.000 --> 00:09:27.240
And I would love to talk to
you about three things today.

00:09:27.300 --> 00:09:31.710
The first is I'd like to talk
about how I use task-based tabs

00:09:31.710 --> 00:09:34.180
in my workflow in my daily use.

00:09:34.240 --> 00:09:38.570
The second is how I use behaviors
in conjunction with those tabs.

00:09:38.600 --> 00:09:42.130
And the third are some more editing
tips and tricks that you all can

00:09:42.130 --> 00:09:43.900
use while working with Xcode.

00:09:44.030 --> 00:09:45.870
And the best way to
show all these things,

00:09:45.980 --> 00:09:47.430
of course, is with a demo.

00:09:49.040 --> 00:09:53.800
My favorite way to work, actually,
is unlike a lot of my coworkers,

00:09:53.800 --> 00:09:57.410
is to just use a 13-inch
MacBook Air on my couch.

00:09:57.700 --> 00:10:01.480
And so I use a one-window feature a lot.

00:10:01.810 --> 00:10:05.800
And I used to work this way,
where I used a lot of dynamic

00:10:05.850 --> 00:10:07.900
user interface changes,
where I moved things in

00:10:07.900 --> 00:10:09.060
and out all the time.

00:10:09.330 --> 00:10:12.560
But I found that I really need
something a little more static,

00:10:12.560 --> 00:10:14.040
a little more concrete.

00:10:14.120 --> 00:10:17.090
And so I started using tabs.

00:10:19.140 --> 00:10:23.600
So this is the way I usually work,
which is I have a bunch

00:10:23.600 --> 00:10:25.160
of different tabs here.

00:10:25.200 --> 00:10:30.590
Now you can create new tabs
by holding down Command-T.

00:10:30.760 --> 00:10:33.410
That'll give you a new tab,
and you'll see one popped up on the end,

00:10:33.410 --> 00:10:36.280
and it's exactly like
the tab I just came from.

00:10:36.500 --> 00:10:40.110
If I ever want to close a tab,
I use Command-W.

00:10:40.960 --> 00:10:47.350
And to navigate between tabs,
I can use Command-Shift-Square Bracket,

00:10:47.350 --> 00:10:50.140
otherwise known as Command-Curly Brace.

00:10:50.160 --> 00:10:54.270
And I can use that to easily
move between all of my tabs.

00:10:55.910 --> 00:10:59.360
Now, the first tab that I have here
is one that I use a lot to work

00:10:59.380 --> 00:11:03.190
specifically with either storyboards
or with my core data model.

00:11:03.190 --> 00:11:05.250
And you'll see I close most everything.

00:11:05.250 --> 00:11:09.000
I keep the utility window open so
that I have the inspector in the

00:11:09.000 --> 00:11:13.270
library so I can edit my objects
and drag objects out of the library.

00:11:13.280 --> 00:11:15.970
And I use the tips and tricks
that Brooke showed you about

00:11:16.050 --> 00:11:18.950
opening and closing assistants
and things like that to be able

00:11:19.000 --> 00:11:21.650
to look at code when I need it,
but make it go away whenever

00:11:21.730 --> 00:11:23.140
I don't want it there.

00:11:24.000 --> 00:11:31.460
Now, one of the things that I like about
tabs is that I can keep each of the

00:11:31.550 --> 00:11:37.710
tasks that I do in a separate area,
in a separate tab.

00:11:37.710 --> 00:11:37.710
Only, when I go and look at
the name of these tabs...

00:11:38.530 --> 00:11:43.000
You see that they're named after the
file that's open in the primary editor.

00:11:43.050 --> 00:11:48.140
Now what I would really like to see
here is what task I'm doing in this tab.

00:11:48.400 --> 00:11:52.670
And so I can edit my tab name
by just double-clicking on it.

00:11:53.050 --> 00:11:56.090
And now I can call this a design tab.

00:11:56.910 --> 00:12:01.360
So now, whenever I change files in here,
that tab name is going to stay the same,

00:12:01.360 --> 00:12:06.280
and I know it's where I go to edit my
storyboards and my core data models.

00:12:06.430 --> 00:12:08.700
Now let's go to the next tab.

00:12:09.630 --> 00:12:14.000
Again, we can command-shift,
square bracket to get over.

00:12:14.000 --> 00:12:18.010
And this is where I do most
of my source code editing.

00:12:18.120 --> 00:12:20.430
I usually start off
with one tab like this,

00:12:20.430 --> 00:12:22.900
and I'll sometimes open
two or three of them,

00:12:22.900 --> 00:12:25.320
depending on how many
different files I'm looking at.

00:12:25.440 --> 00:12:27.800
Now I hide the navigators
in the utility window,

00:12:27.800 --> 00:12:30.590
and I keep open the assistant editor,
because a lot of times I want to

00:12:30.600 --> 00:12:33.800
look at some other code that's
similar to what I'm working on,

00:12:33.920 --> 00:12:35.460
or related in some way.

00:12:35.520 --> 00:12:41.390
And so I use that jump bar a
lot to move in between there.

00:12:41.580 --> 00:12:47.200
Now, since this is where I edit my code,
I'm going to rename this tab "Edit."

00:12:47.460 --> 00:12:50.010
And then let's go to the next tab.

00:12:50.920 --> 00:12:56.700
So this tab I use just for finding,
and I'm going to call it find right away.

00:12:56.750 --> 00:13:02.400
And so, for example,
I use a lot of multi-file finds,

00:13:02.400 --> 00:13:08.840
and I see I have an author property here,
and I'm just going to search for that.

00:13:09.070 --> 00:13:12.670
And now I can easily look
between all of the different

00:13:12.820 --> 00:13:18.980
files that that selection is in.

00:13:19.700 --> 00:13:24.230
and I are all the time knowing that if
I go back to my edit and my design tabs,

00:13:24.310 --> 00:13:26.640
they're exactly where I left them.

00:13:26.780 --> 00:13:30.570
But I could use this tab to just
search everywhere throughout the

00:13:30.810 --> 00:13:35.180
project and not have to worry that
I've lost my place in what I'm doing.

00:13:35.180 --> 00:13:38.600
So while we're in the find tab,
I have a couple tips and tricks

00:13:38.600 --> 00:13:41.150
I want to show you about finding.

00:13:41.150 --> 00:13:45.260
Now, I think you're probably all
familiar with using Command F,

00:13:45.260 --> 00:13:48.370
and that will open a find bar at
the top to do an in-file find.

00:13:48.610 --> 00:13:51.810
Now,
the trick I'd like to show you is that

00:13:51.810 --> 00:13:56.620
you can make a selection in your editor,
and now if you hit Command-E,

00:13:56.620 --> 00:14:00.680
it actually takes that selection
and puts it into the find pasteboard

00:14:00.680 --> 00:14:02.600
without opening the find bar.

00:14:02.600 --> 00:14:08.870
And now I can Command-G through my file
and just search for that selection.

00:14:08.880 --> 00:14:11.170
I do this all the time for finding,
because I don't want

00:14:11.210 --> 00:14:12.280
to open the find bar.

00:14:12.280 --> 00:14:15.910
It's great, but if all I'm doing is
looking for one little thing,

00:14:15.910 --> 00:14:17.370
I can do that quickly.

00:14:17.610 --> 00:14:18.960
Command-E, Command-G.

00:14:18.960 --> 00:14:24.620
So now I want to be able to change
these three instances of display.

00:14:24.620 --> 00:14:30.160
So I want to make a selection here,
and one of the things I can do is

00:14:30.160 --> 00:14:34.670
I can double-click on this curly brace,
and it will select that

00:14:34.810 --> 00:14:37.200
whole block of code,
which is kind of handy.

00:14:37.200 --> 00:14:43.110
Now, you might have seen earlier,
if I do Command-F to open the find bar,

00:14:43.110 --> 00:14:45.560
I can change it to replace.

00:14:47.750 --> 00:14:50.920
Now if we scroll in over here,
I want to change the word

00:14:50.920 --> 00:14:53.010
display with the word show.

00:14:54.120 --> 00:14:58.230
Now my options are find all, replace,
well, replace all,

00:14:58.410 --> 00:14:59.660
replace and replace and find.

00:14:59.680 --> 00:15:02.830
But we have a new one,
which is if I hold down the option key,

00:15:02.900 --> 00:15:04.450
it'll change to in selection.

00:15:04.450 --> 00:15:07.330
I'm going to scroll back
out before I do that,

00:15:07.330 --> 00:15:11.870
and when I do hold down option,
in selection, and now it changes show in

00:15:12.030 --> 00:15:15.650
the three instances that were
inside of that selection.

00:15:15.770 --> 00:15:19.030
If I command G,
it still exists in the rest of the file,

00:15:19.030 --> 00:15:21.430
just not in that selection anymore.

00:15:22.140 --> 00:15:24.720
So those are the tips and tricks
I want to show you about finding.

00:15:24.720 --> 00:15:28.040
And so let's look at our next tab.

00:15:29.880 --> 00:15:33.260
Now in this last tab,
this is the tab that I use to

00:15:33.260 --> 00:15:35.700
review what I've been working on.

00:15:36.020 --> 00:15:41.120
And to do that, I use what Brooke showed,
where I keep the file

00:15:41.200 --> 00:15:43.940
navigator open and I...oops.

00:15:44.770 --> 00:15:49.190
And I keep the source control filter
turned on so that all I see are the files

00:15:49.250 --> 00:15:51.960
that I personally have edited recently.

00:15:51.960 --> 00:15:54.900
And I also use the comparison editor.

00:15:54.960 --> 00:15:58.470
By doing this, I can quickly,
if somebody comes into my office

00:15:58.470 --> 00:16:01.350
and wants to do a code review,
I just switch to this tab.

00:16:01.410 --> 00:16:03.200
I'm like, "Oh yeah,
here's all the stuff I've

00:16:03.200 --> 00:16:08.630
changed already." So let's
name this one our review tab.

00:16:10.010 --> 00:16:13.430
Now, there's two other tabs
that I keep normally open,

00:16:13.520 --> 00:16:18.050
and I'd like to show you how to use
behaviors to dynamically open these tabs.

00:16:18.170 --> 00:16:22.010
So,
behaviors lives in Xcode's preferences,

00:16:22.050 --> 00:16:25.190
and we can open that using Command-comma.

00:16:26.060 --> 00:16:30.930
We can click on Behaviors,
and the idea of behaviors

00:16:30.930 --> 00:16:36.220
is that on the left,
your left, we have triggers,

00:16:36.220 --> 00:16:41.980
and on the right is where you can set
up actions or UI changes that will

00:16:41.980 --> 00:16:45.000
happen when those triggers happen.

00:16:45.070 --> 00:16:50.060
So in this case, I want to look at
Build Generates New Issues.

00:16:50.470 --> 00:16:54.240
And when a build generates a new issue,
like a warning or an error,

00:16:54.240 --> 00:16:56.560
I want it to open a new tab.

00:16:56.970 --> 00:17:00.090
Well, I want it to show a tab named,
and in this case,

00:17:00.090 --> 00:17:02.490
I want to show it a tab named Build.

00:17:02.630 --> 00:17:05.470
Now what's going to happen is,
if that tab already exists,

00:17:05.480 --> 00:17:08.630
like it does in my project at the moment,
whenever a new issue or

00:17:08.630 --> 00:17:11.830
warning happens when building,
it's going to open that existing tab.

00:17:11.840 --> 00:17:16.390
Now if that tab doesn't exist already,
it will create a new tab and open

00:17:16.390 --> 00:17:18.910
that up when a build issue appears.

00:17:18.920 --> 00:17:21.560
So you could also set a
bunch of these other options,

00:17:21.560 --> 00:17:24.590
and Chris is going to show you
how to do that in a little bit.

00:17:24.700 --> 00:17:29.280
But the other trigger I want to
change is when the run pauses,

00:17:29.280 --> 00:17:31.960
I want to show a tab named Debug.

00:17:33.450 --> 00:17:35.400
And this way,
if I hit something like a breakpoint,

00:17:35.640 --> 00:17:37.160
it's going to show me a debug window.

00:17:37.160 --> 00:17:37.900
So let's try that.

00:17:37.900 --> 00:17:41.230
Now I can Command-W to close this window.

00:17:41.450 --> 00:17:45.600
And we're going to use
Command-R to build and run.

00:17:45.860 --> 00:17:50.220
And earlier, before the demo,
I put an error in here.

00:17:50.310 --> 00:17:54.320
So that you'll notice that
we opened up the Build tab.

00:17:54.360 --> 00:17:55.960
It shows the Issue Navigator.

00:17:55.960 --> 00:17:57.770
I can click on that issue.

00:17:58.030 --> 00:18:04.360
And right down here, it says, oh,
I needed to put an underscore in there.

00:18:04.500 --> 00:18:07.570
So now I can build and run again.

00:18:08.140 --> 00:18:10.910
And this time,
it hits the breakpoint I put in earlier

00:18:11.030 --> 00:18:15.730
and opens up the debug tab so that
I'm all ready to do my debugging.

00:18:15.870 --> 00:18:19.550
And the great thing about using
task-based tabs is at any point

00:18:19.550 --> 00:18:23.620
I can go back to the other tabs and
they're exactly the way I left them.

00:18:23.700 --> 00:18:28.410
So let's then go back to the edit
tab and I have some editing tips

00:18:28.460 --> 00:18:31.010
and tricks I want to show you.

00:18:31.700 --> 00:18:33.660
We can stop that from running first.

00:18:33.660 --> 00:18:36.300
Okay, so back in the editor.

00:18:36.300 --> 00:18:39.140
Now, Brooke showed you
Open Quickly for navigating,

00:18:39.170 --> 00:18:42.830
and I want to show you an additional
thing that you can use with Open Quickly.

00:18:42.840 --> 00:18:48.960
So you type Command-Shift-O to
open quickly.

00:18:48.960 --> 00:18:52.560
I can type in my root,
look for root view controller.

00:18:52.560 --> 00:18:57.960
Now, if I press Return right now,
it's going to open in the primary editor.

00:18:58.960 --> 00:19:02.960
And if I press Option-Navigation,
so if I Option-Return,

00:19:02.960 --> 00:19:04.750
it's going to open the assistant editor.

00:19:04.840 --> 00:19:08.360
And there's another option that
you might not know about yet,

00:19:08.360 --> 00:19:12.270
which is if I hold down
Option-Shift-Return,

00:19:12.930 --> 00:19:17.940
and I are going to show you how
to use the navigation chooser.

00:19:17.940 --> 00:19:23.000
This allows me to use either the
mouse or keyboard to determine

00:19:23.040 --> 00:19:25.610
where I want this file to open.

00:19:25.620 --> 00:19:31.420
I can use the arrow keys to just arrow
around and I can open into a new tab,

00:19:31.430 --> 00:19:37.090
I can open into the existing editors
or I can add a new assistant editor.

00:19:37.090 --> 00:19:37.090
If I hit return here,
it opens a new assistant editor for me.

00:19:37.700 --> 00:19:40.740
So that's what I wanted to
show you about navigation.

00:19:40.770 --> 00:19:46.640
Now there's two other main topics
I want to talk about in editing.

00:19:46.640 --> 00:19:49.070
And to do those,
I'm going to close the Assistant Editor,

00:19:49.170 --> 00:19:53.460
or in this case,
just open the Primary Editor using

00:19:53.460 --> 00:19:55.190
Command-Return.

00:19:55.490 --> 00:19:59.390
Now I want to talk about code
completion and code snippets.

00:19:59.440 --> 00:20:02.300
And it's hard to really
talk about them separately,

00:20:02.300 --> 00:20:04.050
so we're going to talk
about them at the same time.

00:20:04.060 --> 00:20:08.600
Now this is a core data project,
and I see that I have a title

00:20:08.600 --> 00:20:11.160
and an author property here.

00:20:11.160 --> 00:20:16.610
And I'd like to check both of them
to make sure that they aren't empty.

00:20:16.620 --> 00:20:18.350
And so I'd like to validate them.

00:20:18.430 --> 00:20:20.530
And to do that,
I'm going to go look to see

00:20:20.620 --> 00:20:23.510
if there's a code snippet
that will help me to do this.

00:20:23.620 --> 00:20:26.490
If you look through some of the menus,
you'll find some very specific

00:20:26.550 --> 00:20:27.740
commands that you can use.

00:20:27.740 --> 00:20:30.220
And in this case,
there's commands that open

00:20:30.220 --> 00:20:32.400
very specific libraries,
even.

00:20:32.420 --> 00:20:38.340
So I can use Control Option Command 2,
and that actually opens the code

00:20:38.340 --> 00:20:41.280
snippet library specifically.

00:20:41.980 --> 00:20:45.620
Now you'll see we have a bunch
of code snippets available to us.

00:20:45.620 --> 00:20:49.230
And I can start typing "valid"
and I see that I have a

00:20:49.230 --> 00:20:52.310
Core Data Property Validation
method that I can use.

00:20:52.660 --> 00:20:55.970
Now I'm going to make
a little space for it.

00:20:56.280 --> 00:20:58.910
And all I have to do is drag
it out of the code snippet

00:20:58.910 --> 00:21:01.120
library and drop it in here.

00:21:01.300 --> 00:21:05.790
Now, as part of this code snippet,
there's two placeholders,

00:21:05.790 --> 00:21:10.590
and I can move between the
placeholders using Tab or Shift Tab.

00:21:10.840 --> 00:21:13.690
When I'm ready to accept the placeholder,
I just start typing.

00:21:13.940 --> 00:21:16.040
And in this case,
I need a capitalized property name.

00:21:16.040 --> 00:21:17.920
And the first one I want
to validate is title.

00:21:18.090 --> 00:21:20.490
So I'm going to type in "title."

00:21:20.990 --> 00:21:23.140
and then tab to the validation code.

00:21:23.140 --> 00:21:27.070
Now I need to write some code.

00:21:27.120 --> 00:21:31.200
This is going to be fun because I need
to show you code completion and if

00:21:31.200 --> 00:21:34.900
any of you have done big demos before,
this is where things go wrong.

00:21:35.140 --> 00:21:39.940
So the next thing I want to do is I want
to know if value ref is equal to nil,

00:21:40.030 --> 00:21:42.220
then I'm going to have some problems.

00:21:42.260 --> 00:21:45.340
I need to write out an error.

00:21:46.250 --> 00:21:49.590
Well, actually, if it's not nil,
I don't remember.

00:21:49.610 --> 00:21:51.550
Okay, let's just go along with it.

00:21:51.670 --> 00:21:53.000
I know what I'm supposed to write.

00:21:53.150 --> 00:21:54.780
Let's just write the correct thing.

00:21:54.890 --> 00:21:58.180
Okay, so if I start typing if,
what you see is the code

00:21:58.180 --> 00:22:00.240
completion window shows up.

00:22:00.600 --> 00:22:03.000
Now,
there's a couple things you can do here.

00:22:03.000 --> 00:22:05.600
One is I could just press
Return and accept it,

00:22:05.690 --> 00:22:07.510
but that wouldn't make much for a demo.

00:22:07.730 --> 00:22:11.350
So, what I want to tell you about
is if you want it to go away,

00:22:11.350 --> 00:22:12.910
you can type Escape.

00:22:13.370 --> 00:22:16.600
If you want it to reappear,
you can use control space.

00:22:16.600 --> 00:22:21.160
And I could accept it, or in this case,
sometimes you're just typing along

00:22:21.160 --> 00:22:22.470
and you just want to ignore it.

00:22:22.680 --> 00:22:23.370
We'll go right ahead.

00:22:23.390 --> 00:22:24.560
Just keep typing.

00:22:24.560 --> 00:22:25.970
Nobody's going to stop you.

00:22:27.980 --> 00:22:32.660
Now what I want to show you is
that code completion has given me a

00:22:32.660 --> 00:22:37.880
suggestion to remind me that I need
to put an ending parentheses here.

00:22:38.200 --> 00:22:40.060
We're going to accept
it a little bit later,

00:22:40.190 --> 00:22:46.530
but I want to show you that if
you do remove what you have,

00:22:46.620 --> 00:22:49.330
it's going to go away.

00:22:49.330 --> 00:22:49.330
If you type again,
it's going to come back.

00:22:49.980 --> 00:22:54.750
And I can now just keep typing
and you'll see code completion

00:22:54.770 --> 00:22:58.120
offers the parameter that I have.

00:22:58.420 --> 00:23:02.370
So to accept this,
all I have to do is hit tab.

00:23:02.820 --> 00:23:09.410
And I can continue on my merry way
and try not to type crazy stuff.

00:23:09.720 --> 00:23:16.290
So now I want to check to
see if it's an empty string.

00:23:16.520 --> 00:23:23.650
So I'm going to type in value ref,
tab again to accept that, and is,

00:23:23.880 --> 00:23:26.880
let's type the right thing today, equal,
okay.

00:23:26.880 --> 00:23:30.970
So the next thing
I want to show you is...

00:23:31.400 --> 00:23:33.390
Partial completions.

00:23:33.400 --> 00:23:37.560
So, let's move the cursor
out of the way a little.

00:23:37.560 --> 00:23:40.240
You'll see that there's
a little gray underline.

00:23:40.260 --> 00:23:44.240
And so what that shows is
if I type tab right now,

00:23:44.280 --> 00:23:48.510
it's just going to partially
complete to the end of that word.

00:23:48.530 --> 00:23:50.520
So it's just going to
partially complete equal.

00:23:51.200 --> 00:24:02.880
So I can hit tab,
and then I can keep typing.

00:24:02.880 --> 00:24:02.880
So if I want to, tab again,
and then string,

00:24:02.880 --> 00:24:02.880
and then I can tab to finally
finish what I was doing.

00:24:04.350 --> 00:24:09.200
So, now I can type in that I want
to check for the empty string.

00:24:09.200 --> 00:24:15.680
And here I can tab to accept the
square bracket that was there.

00:24:16.000 --> 00:24:20.420
And I could tab to accept this
ending parenthesis as well.

00:24:20.460 --> 00:24:22.280
However,
I want to show you another trick,

00:24:22.350 --> 00:24:25.780
which is usually if you're ending
an expression for an if statement,

00:24:25.860 --> 00:24:29.510
the next thing you're going to type
after this is an open curly brace.

00:24:29.840 --> 00:24:33.080
So we have a little trick,
and I can just type it right now.

00:24:33.210 --> 00:24:35.400
So if I just type the open curly brace,
surprise,

00:24:35.460 --> 00:24:39.540
it gives me the ending parenthesis and
the open curly brace in the right spot.

00:24:39.590 --> 00:24:41.640
Yeah, you can clap for that, that's good.

00:24:41.640 --> 00:24:44.380
It's exciting, I like it.

00:24:45.000 --> 00:24:48.660
So now if I hit return,
I can continue on.

00:24:48.720 --> 00:24:52.480
And so now what I need to do
is I need to check to see,

00:24:52.510 --> 00:24:56.980
well, I want an error in this case
because value ref was nil and

00:24:57.080 --> 00:25:01.190
value ref or value ref was,
you know, an empty string.

00:25:01.200 --> 00:25:03.780
So now I got to check to see
if there's an error before

00:25:03.780 --> 00:25:05.290
I can put an error in there.

00:25:05.320 --> 00:25:08.040
So I got to make sure
it's not equal to null.

00:25:08.040 --> 00:25:09.960
So I can start typing if.

00:25:10.030 --> 00:25:11.880
In this case, I'm just going to return.

00:25:13.110 --> 00:25:19.020
And I want to know if out
error is not equal to null.

00:25:19.020 --> 00:25:21.440
Or do I want it is equal to null?

00:25:21.440 --> 00:25:22.930
Who knows?

00:25:22.930 --> 00:25:24.900
It's yes or no.

00:25:24.900 --> 00:25:26.030
Somebody tell me, quick.

00:25:27.720 --> 00:25:28.590
Keep going?

00:25:28.650 --> 00:25:29.290
Okay, good.

00:25:29.420 --> 00:25:30.400
Just checking.

00:25:30.420 --> 00:25:33.420
I should have brought my notes.

00:25:33.630 --> 00:25:36.930
So this next part, well, yeah,
this next part,

00:25:36.980 --> 00:25:40.760
part of what I want you to
watch as we're finishing this

00:25:40.960 --> 00:25:44.930
up is the number of characters,
like the characters I'm actually typing

00:25:44.930 --> 00:25:46.860
versus how much code gets written.

00:25:46.860 --> 00:25:48.930
Because, you know,
I want to go through this

00:25:48.930 --> 00:25:50.280
next part fairly quickly.

00:25:50.280 --> 00:25:53.460
I am going to show you
a couple other things,

00:25:53.630 --> 00:25:55.800
but let's just start typing.

00:25:55.800 --> 00:25:58.840
We're going to make a dictionary,
and one of the things I want you

00:25:58.840 --> 00:26:02.440
to notice here is that we've added
Quick Help into the code completion.

00:26:03.010 --> 00:26:05.490
So this will help you pick between
the suggestions that you have.

00:26:05.580 --> 00:26:09.900
And so I'm going to create a dictionary,
going to call it User Info.

00:26:09.900 --> 00:26:13.540
I have to type that whole thing because,
sadly, Xcode doesn't know what I want

00:26:13.540 --> 00:26:15.000
to call my variable names.

00:26:15.020 --> 00:26:19.090
And now, oh, I'm going to use one of
these cool new literals.

00:26:19.090 --> 00:26:20.980
Yeah, that's awesome.

00:26:20.980 --> 00:26:22.580
Like the dictionary literal thing.

00:26:22.580 --> 00:26:24.200
Now I've got to remember this hard thing.

00:26:24.270 --> 00:26:29.660
NSLocalize, localize, I can, oh,
I don't want, description key, oh,

00:26:29.660 --> 00:26:30.930
that looks good.

00:26:31.610 --> 00:26:31.980
Awesome.

00:26:32.650 --> 00:26:36.810
And I'm going to call it, title is empty.

00:26:36.820 --> 00:26:41.070
Okay, I need, oh, I need this.

00:26:41.080 --> 00:26:42.230
Okay.

00:26:42.430 --> 00:26:43.940
Yeah, semicolon.

00:26:44.310 --> 00:26:48.410
And I want to put this into OutError.

00:26:48.790 --> 00:26:53.140
Tab equals NSError.

00:26:53.160 --> 00:26:54.970
That looks good.

00:26:55.030 --> 00:26:56.120
Error with domain.

00:26:56.140 --> 00:26:57.170
Oh, sweet.

00:26:57.280 --> 00:26:59.220
NSCoco.

00:26:59.220 --> 00:27:00.020
Yeah, that one.

00:27:00.020 --> 00:27:05.340
NSManagedObject something valid.

00:27:05.340 --> 00:27:06.850
Validation error.

00:27:06.850 --> 00:27:07.340
Sweet.

00:27:07.340 --> 00:27:10.200
I am so grateful for this right now.

00:27:10.200 --> 00:27:10.980
User info.

00:27:10.980 --> 00:27:18.830
And the last thing I need to do is
set validation result equal to no.

00:27:19.690 --> 00:27:23.300
Okay, the only way I could possibly get
through this today is thanks to code

00:27:23.360 --> 00:27:26.570
completion and my code snippets,
because there's no way I was going

00:27:26.570 --> 00:27:29.400
to remember NSLocalize dictionary
key right in front of you.

00:27:29.500 --> 00:27:32.830
Description key, yeah,
see I can even say it right.

00:27:32.980 --> 00:27:36.790
So that's one of the powerful
things about code completion is

00:27:36.790 --> 00:27:40.970
really being able to get the right,
the things you're looking for

00:27:41.110 --> 00:27:43.720
quickly and easily and accurately.

00:27:44.700 --> 00:27:46.940
I also want to validate author.

00:27:46.940 --> 00:27:49.980
And so I'm going to have you
watch me do this all again.

00:27:50.020 --> 00:27:50.430
Just kidding.

00:27:50.550 --> 00:27:54.670
What I really want to do is
I could just copy and paste this,

00:27:54.670 --> 00:27:58.350
but it's probably likely I'm going
to use the same bit of code over

00:27:58.660 --> 00:28:00.610
and over again in other projects.

00:28:00.620 --> 00:28:04.790
So what I'm going to do
now is drag this code,

00:28:04.790 --> 00:28:08.790
if I had more space here,
into my code snippet library.

00:28:09.420 --> 00:28:15.990
And now at the bottom,
I have this little code snippet.

00:28:15.990 --> 00:28:15.990
And if we double-click on it,

00:28:16.400 --> 00:28:23.750
Let's scroll in here a little
bit so you guys can see this.

00:28:23.900 --> 00:28:30.790
So this is the code that's going to be
entered into my project if I drag it in.

00:28:30.890 --> 00:28:32.800
And I want one of those
cool placeholders,

00:28:32.800 --> 00:28:34.800
so I'm going to have to edit this.

00:28:34.930 --> 00:28:35.780
Edit.

00:28:35.810 --> 00:28:36.800
Okay.

00:28:36.800 --> 00:28:40.600
And I want title to be a placeholder
like we saw in those other things.

00:28:40.660 --> 00:28:44.220
So in this case,
let's scroll this out a little bit.

00:28:44.330 --> 00:28:49.200
I'm going to use angle
brackets and hash marks.

00:28:50.390 --> 00:28:54.300
So, angle brackets and hash marks
delineate my placeholder.

00:28:54.300 --> 00:28:58.100
And here I'm going to remind
myself I need a property name.

00:28:58.800 --> 00:29:00.900
So I can put that in there.

00:29:01.060 --> 00:29:07.050
I'm going to copy this and put it
down here in my description key,

00:29:07.110 --> 00:29:09.660
because I want that same name there.

00:29:09.660 --> 00:29:12.460
And now back at the top,
in my code snippet library,

00:29:12.460 --> 00:29:14.060
I don't want to just leave
it as my code snippet,

00:29:14.110 --> 00:29:20.260
so I'm going to call
it Property Validation.

00:29:20.460 --> 00:29:23.480
The key thing here is using
the completion shortcut.

00:29:23.480 --> 00:29:28.580
In this case,
I'm just going to call it PropVal.

00:29:28.590 --> 00:29:28.590
Awesome.

00:29:28.800 --> 00:29:30.480
So, hit done.

00:29:30.890 --> 00:29:32.390
Ooh, go the other way.

00:29:32.730 --> 00:29:35.940
Sorry if I'm making you all seasick.

00:29:35.990 --> 00:29:36.940
Hit return.

00:29:37.130 --> 00:29:39.940
Now,
here I can just start typing prop val.

00:29:39.940 --> 00:29:42.980
Code completion knows about
my new code snippet already.

00:29:43.070 --> 00:29:44.440
I hit return.

00:29:44.450 --> 00:29:45.200
It shows up here.

00:29:45.200 --> 00:29:46.280
I have a property name.

00:29:46.280 --> 00:29:47.560
I type in author.

00:29:47.740 --> 00:29:48.660
I hit tab.

00:29:48.690 --> 00:29:50.610
I hit author again.

00:29:50.610 --> 00:29:51.580
Author.

00:29:51.580 --> 00:29:53.680
And I'm done.

00:29:53.680 --> 00:29:58.130
So, that's how you can make
your own code snippet.

00:30:03.150 --> 00:30:06.460
Thank you for dealing
with my typing on stage.

00:30:06.710 --> 00:30:09.720
These are the things that we just
went over in the last few minutes.

00:30:09.760 --> 00:30:13.240
I showed you how to use task-based
tabs as part of your workflow and

00:30:13.310 --> 00:30:15.240
set up a tab-based environment.

00:30:15.240 --> 00:30:19.310
I showed you how to use behaviors
so that you could dynamically open

00:30:19.310 --> 00:30:21.340
those tabs when you need them.

00:30:21.340 --> 00:30:25.300
And I showed you some new
editing tips and tricks.

00:30:25.350 --> 00:30:26.940
Hopefully they were new to you.

00:30:26.970 --> 00:30:32.640
One is using the navigation chooser to be
able to decide where to open your files.

00:30:33.250 --> 00:30:37.120
Another is code completion
and how to type your code

00:30:37.120 --> 00:30:39.510
fast and accurately using it.

00:30:39.600 --> 00:30:43.740
And the third was snippets and how
to make your own code snippets.

00:30:43.740 --> 00:30:47.890
So I'd like to invite Chris Hanson
up here to talk to you about multiple

00:30:47.890 --> 00:30:50.710
window workflows and keyboard shortcuts.

00:30:52.560 --> 00:30:54.520
So I'm Chris Hanson.

00:30:54.660 --> 00:30:56.390
I'm also an Xcode engineer.

00:30:56.490 --> 00:31:00.930
And I really like to use
a multi-window workflow.

00:31:01.020 --> 00:31:05.650
That lets me bring up auxiliary
content around what I'm working on and

00:31:05.770 --> 00:31:10.280
keep it sort of organized spatially,
while keeping my primary and

00:31:10.280 --> 00:31:14.710
my assistant editor focused on
the task on which I'm working.

00:31:14.970 --> 00:31:19.660
I'd also like to show you how you can
really drive Xcode from the keyboard.

00:31:19.660 --> 00:31:22.600
That lets you get around your
code really fast and work

00:31:22.700 --> 00:31:26.380
with Xcode sort of naturally,
where you just think about what

00:31:26.650 --> 00:31:29.900
you want to do with your code and
your fingers know how to do it.

00:31:30.060 --> 00:31:37.990
And how almost everything in Xcode
from the keyboard is configurable,

00:31:38.000 --> 00:31:40.300
so you can really optimize it
for what you would like to do.

00:31:41.070 --> 00:31:44.080
So I'm just going to
go straight into demo,

00:31:44.080 --> 00:31:47.240
and I'm just going to bring
up my checkout of the project

00:31:47.350 --> 00:31:50.330
that we've all been working on.

00:31:51.330 --> 00:31:54.720
Now the first thing I'd like
to show you is how to actually

00:31:54.730 --> 00:31:57.370
get to new windows in Xcode.

00:31:57.450 --> 00:31:58.270
It's pretty simple.

00:31:58.470 --> 00:32:03.350
You just double-click on a
file and Xcode will open it

00:32:03.350 --> 00:32:06.450
in a new editor-style window.

00:32:07.780 --> 00:32:11.740
And this is great both
for just general editing,

00:32:11.740 --> 00:32:15.590
especially if, say,
you resize your main window a little bit,

00:32:15.660 --> 00:32:18.550
resize that down,
and I can arrange some of my

00:32:18.550 --> 00:32:20.320
other windows around here.

00:32:20.320 --> 00:32:23.660
I can open up, say,
a data model and put it

00:32:23.660 --> 00:32:27.300
in a nice big window,
independent of the main

00:32:27.300 --> 00:32:29.830
window that I'm working in.

00:32:30.990 --> 00:32:34.440
And that really lets me sort
of organize my work spatially,

00:32:34.440 --> 00:32:39.340
because now I know I just need to go over
here to get to my root view controller.

00:32:39.340 --> 00:32:42.720
Over here, I have my app delegate.

00:32:42.720 --> 00:32:44.940
Down here, I have my data model.

00:32:44.940 --> 00:32:51.750
And I can get around these windows both
using the mouse and using the keyboard.

00:32:51.760 --> 00:32:54.530
Because on OS X,
we have a standard keyboard

00:32:54.530 --> 00:32:58.410
shortcut for going between windows,
just like we have one for

00:32:58.490 --> 00:33:00.550
going between applications.

00:33:00.970 --> 00:33:06.060
So to go between applications,
you would use Command-Tab.

00:33:06.700 --> 00:33:08.760
and Command-Shift-Tab.

00:33:08.870 --> 00:33:12.510
Well, to go between windows,
you use Command and the Backquote

00:33:12.620 --> 00:33:14.880
key right above the Tab key.

00:33:15.040 --> 00:33:18.790
So it's really easy to remember
and it really leverages how your

00:33:18.790 --> 00:33:22.440
fingers kind of want to work
already as you're working with OS X.

00:33:22.580 --> 00:33:27.180
So I'm going to hold down the Command key
and press Backquote and that rotates

00:33:27.600 --> 00:33:30.530
me forwards through my list of windows.

00:33:30.950 --> 00:33:33.110
And it does it in spatial order.

00:33:33.250 --> 00:33:38.190
Now, if I add in the shift key,
I go the opposite direction.

00:33:39.990 --> 00:33:44.150
But sometimes I know exactly
what window I want to be in.

00:33:44.260 --> 00:33:47.030
I know, for example,
if I'm editing some code

00:33:47.030 --> 00:33:50.410
over here in my app delegate,
okay, now I want to make a change

00:33:50.440 --> 00:33:53.090
in my root view controller,
and I know it's just over there.

00:33:53.110 --> 00:33:56.340
I don't necessarily want to
use the mouse to do that.

00:33:56.470 --> 00:34:03.000
So I can bring up the navigation
chooser just by pressing Command J.

00:34:04.220 --> 00:34:06.740
And then,
while holding down the command key,

00:34:06.750 --> 00:34:09.390
I can use the arrow keys to,
instead of targeting a

00:34:09.390 --> 00:34:13.960
new area in this window,
switch which window I'm targeting

00:34:13.960 --> 00:34:15.860
in this navigation chooser.

00:34:16.020 --> 00:34:19.590
So I'm going to pick the window that
contains my root view controller,

00:34:19.770 --> 00:34:24.290
hit return,
and my insertion point is now over here.

00:34:25.530 --> 00:34:29.210
And to get back, I can just bring up
the navigation chooser,

00:34:29.420 --> 00:34:32.240
switch back, and there I am.

00:34:33.430 --> 00:34:37.200
And that makes it really easy to
not only use multiple windows,

00:34:37.200 --> 00:34:39.590
but also get between
them as you're editing,

00:34:39.590 --> 00:34:44.490
so you can make changes in several
of them sort of at the same time.

00:34:45.300 --> 00:34:48.300
Now, one other thing that we've added
in the latest version of Xcode

00:34:48.500 --> 00:34:52.400
is the ability for behaviors
to not just target new tabs,

00:34:52.710 --> 00:34:55.500
but also target new windows.

00:34:55.660 --> 00:35:00.150
So to do that, well,
let's say I want to bring up a console

00:35:00.150 --> 00:35:03.560
window anytime I run my application.

00:35:04.200 --> 00:35:09.540
What I'm going to do is go straight to my
Behaviors menu and choose Edit Behaviors.

00:35:09.580 --> 00:35:15.040
And that's a nice shortcut to the
Behaviors tab of Xcode's preferences.

00:35:15.350 --> 00:35:18.550
And I'm going to edit
the Run Starts trigger,

00:35:18.580 --> 00:35:22.270
so that any time Xcode
starts running something,

00:35:23.300 --> 00:35:26.850
It's going to show a tab named Console,
but it's not going to show

00:35:26.850 --> 00:35:28.770
that tab in the active window.

00:35:28.880 --> 00:35:32.400
Instead, it's going to show it
in a separate window.

00:35:32.470 --> 00:35:35.540
I'm going to make sure that
it's hiding the Navigator,

00:35:35.690 --> 00:35:38.840
that it's showing the Debugger
with just the Console view,

00:35:38.920 --> 00:35:42.120
and that it's hiding some other
areas of the window that I don't

00:35:42.120 --> 00:35:48.380
think I need in that Console window,
in particular, the big Editor area.

00:35:48.830 --> 00:35:52.410
So now that I've set this up,
I can just press Command-R to run.

00:35:52.610 --> 00:35:56.190
Xcode builds my application,
starts running it in the simulator,

00:35:56.250 --> 00:35:58.790
and you can see it brought
up this console window,

00:35:58.900 --> 00:36:01.720
and I got some log output
in it from my application.

00:36:01.720 --> 00:36:05.640
I love this because I like to
work on multiple monitors at once,

00:36:05.800 --> 00:36:10.180
and I just like to throw my console
window over on a different one.

00:36:11.700 --> 00:36:14.560
In fact, for right now,
I'm just going to resize it down

00:36:14.690 --> 00:36:16.780
here and keep it sort of down below.

00:36:16.910 --> 00:36:19.720
Now,
as we've been talking about behaviors,

00:36:19.880 --> 00:36:22.740
there are lots of triggers
that are built into Xcode.

00:36:22.880 --> 00:36:26.760
But you can also create custom behaviors.

00:36:29.140 --> 00:36:34.260
If I just edit behaviors here,
one thing I like to do is keep my editing

00:36:34.260 --> 00:36:38.200
UI when I'm working on source code
organized kind of like Kelly showed.

00:36:38.220 --> 00:36:41.560
But like I said, I like to use multiple
windows rather than tabs.

00:36:41.660 --> 00:36:46.470
So what I'd like to do is have a simple
way to just arrange Xcode's UI to be

00:36:46.490 --> 00:36:49.570
exactly how I like it while I'm editing.

00:36:49.580 --> 00:36:53.430
What I'm going to do is press
this plus button at the bottom

00:36:53.440 --> 00:36:57.670
of the list of behaviors,
and that lets me create a new one.

00:36:58.440 --> 00:37:01.990
I'm just going to call this
behavior source editing.

00:37:02.200 --> 00:37:06.360
And this command symbol here,
this cloverleaf, means that I can assign

00:37:06.360 --> 00:37:07.400
it a key shortcut.

00:37:07.400 --> 00:37:13.160
So I'm going to assign it F13
and click away to accept it.

00:37:13.260 --> 00:37:17.620
And that means any time I want to
edit sources the way that I like to,

00:37:17.620 --> 00:37:22.210
I just have to press F13 and whatever
I'm looking at in Xcode will reconfigure

00:37:22.310 --> 00:37:24.250
itself to be the way that I want it.

00:37:24.320 --> 00:37:28.180
And to do that, I'm going to just hide
the project navigator.

00:37:28.180 --> 00:37:31.560
I'm going to make it hide any debugger,
hide any utilities.

00:37:32.100 --> 00:37:34.720
I'm going to leave the toolbar alone
in whatever window I'm looking at.

00:37:34.790 --> 00:37:38.990
And I'm going to make sure that the
editor is showing as an assistant editor.

00:37:41.320 --> 00:37:46.750
So now, if I'm working on
Core Data Books App Delegate here,

00:37:46.750 --> 00:37:50.750
and I want it to be arranged
like I like an editor arranged,

00:37:50.860 --> 00:37:55.420
I just have to press F13 and
Xcode's UI rearranges itself.

00:37:55.530 --> 00:37:59.010
For the next part of the demo though,
I'm actually going to bring back

00:37:59.080 --> 00:38:03.420
the Navigator with Command-0,
and I'm going to switch back to just

00:38:03.420 --> 00:38:05.900
the primary editor with Command-Return.

00:38:06.490 --> 00:38:10.070
And most of what you're going
to do in Xcode is editing.

00:38:10.080 --> 00:38:12.450
You're going to be editing your project,
you're going to be

00:38:12.520 --> 00:38:14.440
editing your data models,
you're going to be editing

00:38:14.440 --> 00:38:15.970
your user interfaces,
and most of all,

00:38:15.980 --> 00:38:17.900
you're going to be editing source code.

00:38:17.900 --> 00:38:21.790
So I've got a few more editing
tips and tricks for you.

00:38:21.820 --> 00:38:25.490
And to start with,
as an OS X application,

00:38:25.490 --> 00:38:30.760
we support all of the standard
OS X text editing gestures.

00:38:31.410 --> 00:38:34.720
So for example,
you can arrow around in your code,

00:38:34.790 --> 00:38:39.370
you can add in the modifier keys like
command and option to change how far

00:38:39.370 --> 00:38:42.240
you're jumping by using the arrow keys.

00:38:43.980 --> 00:38:47.160
You can throw in the shift
key to extend your selection,

00:38:47.190 --> 00:38:48.580
all the usual stuff.

00:38:48.580 --> 00:38:52.720
But in addition to the max
standard editing gestures,

00:38:52.720 --> 00:38:57.750
OS X supports a bunch of Emacs
keyboard shortcuts as well.

00:38:57.770 --> 00:39:02.440
So if I want to go to the next line,
I can press control N, you know,

00:39:02.600 --> 00:39:05.860
because I'm kind of an
Emacs user from way back.

00:39:05.860 --> 00:39:07.030
My fingers are just used to that.

00:39:07.030 --> 00:39:09.090
I want to go to the next line,
I try to hit control N,

00:39:09.090 --> 00:39:11.730
and Xcode doesn't beep at me,
it just says, oh,

00:39:11.820 --> 00:39:15.330
you're using Emacs keys,
I'm going to go to the next line.

00:39:15.330 --> 00:39:19.410
I can use control B and control F to
go backwards and forwards in my text.

00:39:19.450 --> 00:39:23.080
I can even use keys like control
E and control A to go to the end

00:39:23.160 --> 00:39:25.040
and the beginning of the line.

00:39:25.040 --> 00:39:27.150
All those kinds of Emacs gestures.

00:39:27.150 --> 00:39:30.000
But we don't just support
cursor navigation.

00:39:30.000 --> 00:39:34.880
We actually have support for advanced
Emacs concepts like the kill ring.

00:39:34.880 --> 00:39:37.580
And this isn't something
that Xcode adds specifically.

00:39:37.670 --> 00:39:41.750
It's actually global throughout
OS X because it's part of Cocoa.

00:39:42.660 --> 00:39:45.010
And if you're interested in
a little bit more of how this

00:39:45.090 --> 00:39:48.970
Cocoa text editing works,
the Cocoa Event Handling Guide has

00:39:48.970 --> 00:39:52.580
some detailed information
on that from an API level.

00:39:53.400 --> 00:39:55.690
Now, as you're editing,
you're probably not going

00:39:55.780 --> 00:39:58.620
to be thinking in terms of,
"I want to change this sequence

00:39:58.660 --> 00:40:01.880
of characters to that sequence
of characters." Instead,

00:40:01.950 --> 00:40:05.490
you're probably going to be
thinking at a more semantic level,

00:40:05.600 --> 00:40:08.270
"I want to change this
identifier to that."

00:40:08.600 --> 00:40:12.060
So let's say in my root
view controller here,

00:40:12.060 --> 00:40:16.720
down at the bottom, oops,
I switched in the wrong window.

00:40:16.720 --> 00:40:17.400
Okay.

00:40:17.400 --> 00:40:19.360
Down at the bottom of
root view controller,

00:40:19.360 --> 00:40:23.190
I have a method called add view
controller did finish with save.

00:40:23.190 --> 00:40:26.960
And the second parameter to
that method is just called save.

00:40:27.320 --> 00:40:30.330
Well, I think did save might
be a better name for it.

00:40:30.880 --> 00:40:33.170
So of course,
I could use find and replace

00:40:33.170 --> 00:40:34.650
to replace all of those.

00:40:34.710 --> 00:40:37.970
But we actually have a feature
called edit all in scope.

00:40:38.030 --> 00:40:41.690
So if I put my insertion
point in that identifier,

00:40:41.690 --> 00:40:46.400
Xcode gives us a nice little
underline under that identifier and

00:40:46.790 --> 00:40:51.400
under any other matching identifiers
that are in the same scope.

00:40:51.500 --> 00:40:55.820
That indicates that I can edit
that identifier in scope and Xcode

00:40:55.820 --> 00:41:00.640
will automatically propagate my
changes to all the other instances.

00:41:00.820 --> 00:41:02.130
Love it.

00:41:02.310 --> 00:41:05.440
So to do that,
I could choose it from a menu,

00:41:05.500 --> 00:41:08.550
but I'm just going to
press Command Control E.

00:41:09.670 --> 00:41:13.200
Whoops,
I pressed Command Control W instead.

00:41:13.770 --> 00:41:15.100
I'll go back to that.

00:41:15.100 --> 00:41:15.580
There we are.

00:41:15.580 --> 00:41:18.340
And Xcode remembered my place in my file.

00:41:18.340 --> 00:41:19.460
I'll zoom in again.

00:41:19.540 --> 00:41:22.780
And this time I will
press Command-Control-E.

00:41:22.980 --> 00:41:28.560
And now you can see that underline
became a box around the save identifier.

00:41:28.590 --> 00:41:34.840
And we have a grayed out box behind
the other instance of that identifier.

00:41:34.980 --> 00:41:38.810
So I'm just going to
start typing did save,

00:41:38.810 --> 00:41:44.470
and I'm going to control D and
type S to make it all nice

00:41:44.500 --> 00:41:46.180
and properly capitalized.

00:41:46.230 --> 00:41:49.770
And you can see that not only did the
one that I'm actively editing change,

00:41:49.920 --> 00:41:52.900
but so did the other instance of
this identifier in this method.

00:41:53.060 --> 00:41:55.760
And it doesn't really matter how
many instances of it we have.

00:41:56.050 --> 00:41:57.900
It's not just limited to one.

00:41:57.900 --> 00:41:59.490
It could be five, it could be ten.

00:41:59.690 --> 00:42:02.250
It'll do all of the identifiers.

00:42:03.190 --> 00:42:06.700
Now, as I'm working,
I probably also want to reference

00:42:06.700 --> 00:42:08.980
other code and documentation.

00:42:09.360 --> 00:42:11.780
Brooke was working on a bug
earlier where he was seeing

00:42:11.780 --> 00:42:15.920
a crash in the app delegate,
and he's asked me to take a look at it.

00:42:16.020 --> 00:42:18.190
Maybe I might have an idea of what to do.

00:42:18.340 --> 00:42:21.540
So he said it was in
the SaveChanges method.

00:42:21.580 --> 00:42:23.730
I'm just going to use
OpenQuickly to get there.

00:42:23.890 --> 00:42:26.770
It's actually called SaveContext.

00:42:27.240 --> 00:42:33.110
And I'm just going to
use my counterparts.

00:42:33.640 --> 00:42:37.580
Oh, actually, this is up at the top,
so I'm going to use my pop-up

00:42:37.660 --> 00:42:41.290
to get down to the definition of
this method and take a look at it.

00:42:41.500 --> 00:42:45.730
Well, the issue is basically to do
with NSManagedObjectContext

00:42:45.730 --> 00:42:48.130
returning an error from saving.

00:42:48.140 --> 00:42:55.320
So what I'm going to do is take a look
at some documentation on the save method.

00:42:55.360 --> 00:42:58.900
Now, I could do this by holding
down the Option key,

00:42:58.900 --> 00:43:03.250
my cursor changes to a question mark,
and I can just click on that

00:43:03.270 --> 00:43:05.510
identifier and I get quick help.

00:43:05.560 --> 00:43:09.960
And new in the latest versions of Xcode,
quick help doesn't just show an abstract,

00:43:09.970 --> 00:43:16.540
it also shows the parameters and return
values of a lot of framework methods.

00:43:17.190 --> 00:43:19.940
And I can click out of
that to put it away,

00:43:20.090 --> 00:43:23.120
but I'm often just
editing with my keyboard.

00:43:23.410 --> 00:43:25.700
I don't necessarily want to have
to use the mouse just to bring

00:43:25.760 --> 00:43:27.020
up some quick documentation.

00:43:27.020 --> 00:43:31.890
So what I can do is press
Command-Control-Question Mark,

00:43:31.960 --> 00:43:35.580
or Shift-Slash as you
type a question mark,

00:43:35.640 --> 00:43:39.320
and that brings up the quick help pop-up.

00:43:39.420 --> 00:43:42.300
It appears to have brought
it up in the wrong place,

00:43:42.460 --> 00:43:44.970
but I think it was matching
my cursor position,

00:43:45.020 --> 00:43:46.860
so I'll just try that again.

00:43:47.210 --> 00:43:50.010
Command-Control-Shift-Slash.

00:43:50.020 --> 00:43:50.330
Yeah.

00:43:50.400 --> 00:43:53.730
So when I bring this
up with the keyboard,

00:43:53.830 --> 00:43:57.860
I can just press Escape to dismiss it,
and my insertion point

00:43:57.860 --> 00:43:58.870
is back where I left it.

00:43:58.980 --> 00:44:01.410
So I don't actually have to take
my hands off the keyboard just

00:44:01.650 --> 00:44:04.390
to see some quick documentation
about what I'm working with.

00:44:04.520 --> 00:44:08.810
And that includes things around my code.

00:44:10.250 --> 00:44:13.260
Now,
one other thing I might want to do is

00:44:13.260 --> 00:44:16.520
jump to a definition of another method.

00:44:16.570 --> 00:44:20.310
Brooke showed you how you
can just command click.

00:44:20.770 --> 00:44:25.590
to replace your primary editor with
the contents of what you've jumped to,

00:44:25.590 --> 00:44:29.140
and how you can command option
click to open it in a new assistant.

00:44:29.140 --> 00:44:34.580
Well, I like to use multiple windows,
so what I'd really like to do is

00:44:34.580 --> 00:44:40.760
have that kind of gesture open what
I'm jumping to in a new window.

00:44:41.110 --> 00:44:44.310
I'm going to put the
assistant editor away,

00:44:44.530 --> 00:44:48.360
and if I say I want to see
the definition of NSError,

00:44:48.540 --> 00:44:52.890
I can command double-click it,
and it just opens in a new window for me.

00:44:52.940 --> 00:44:55.960
It's that double-click gesture again.

00:44:57.890 --> 00:45:01.120
But again, sometimes I don't want to
take my hands off the keyboard

00:45:01.120 --> 00:45:03.300
to do that sort of thing.

00:45:03.710 --> 00:45:06.930
So, well,
to bring it up in the Assistant Editor,

00:45:07.130 --> 00:45:10.900
I would just type
Command-Control-Option-J,

00:45:10.900 --> 00:45:13.320
and that goes into the Assistant Editor.

00:45:13.320 --> 00:45:17.440
But my Assistant Editor is often
looking at something that's already

00:45:17.440 --> 00:45:19.510
related to what I'm working on.

00:45:19.520 --> 00:45:22.350
So I'd really like to bring
this up in a separate window.

00:45:22.360 --> 00:45:28.590
And the way I can do that is to change
one of Xcode's preferences under the

00:45:28.590 --> 00:45:32.470
General pane for how navigation behaves.

00:45:33.180 --> 00:45:37.410
Brooke talked about modified navigation,
and this lets you tweak

00:45:37.720 --> 00:45:39.870
it to match your workflow.

00:45:40.060 --> 00:45:42.500
Here,
I'm going to say optional navigation,

00:45:42.530 --> 00:45:46.040
which is the navigation that
happens when I press the Option key.

00:45:46.050 --> 00:45:50.740
Instead of using an Assistant Editor,
should use a separate window.

00:45:50.910 --> 00:45:54.990
Now, if I put this Assistant Editor away
with Command-Return,

00:45:55.340 --> 00:46:01.640
And I press Command-Control-Option-J to
jump to definition.

00:46:01.640 --> 00:46:05.300
I get the definition of
NSError in a separate window.

00:46:05.350 --> 00:46:08.050
I can use my page up and page
down keys to scroll through it,

00:46:08.120 --> 00:46:11.220
and then I can press Command-W to
put that window away.

00:46:11.220 --> 00:46:16.440
And my primary editor
is exactly as I left it.

00:46:18.790 --> 00:46:22.800
Now these are all just
Xcode's default key bindings.

00:46:22.840 --> 00:46:27.800
Let's say you really would rather
use F5 for running your application.

00:46:27.800 --> 00:46:32.330
Almost all of the commands in Xcode
are customizable in terms of how

00:46:32.330 --> 00:46:34.970
you invoke them from the keyboard.

00:46:34.980 --> 00:46:38.360
And you do that in Xcode's
key bindings preferences.

00:46:38.380 --> 00:46:42.950
And you see,
we show all sorts of commands here.

00:46:43.160 --> 00:46:46.900
You can see the complete
list of all of our commands,

00:46:46.940 --> 00:46:50.580
just our menu commands,
or our text commands that

00:46:50.630 --> 00:46:51.640
you invoke from the keyboard.

00:46:51.640 --> 00:46:54.900
You can also see which commands
have already been customized,

00:46:54.900 --> 00:46:59.140
and any commands that have
conflicts either within Xcode or

00:46:59.140 --> 00:47:01.790
with system-level key bindings.

00:47:01.800 --> 00:47:05.680
I'm just going to switch back to all,
and I'm going to look for

00:47:05.680 --> 00:47:09.400
some running-related command
that I can bind to F5.

00:47:09.420 --> 00:47:11.580
I'm just going to type in run here.

00:47:13.130 --> 00:47:17.060
And I see that I have
run in the product menu.

00:47:17.770 --> 00:47:21.700
Well, to change that key binding,
I just double-click it,

00:47:21.850 --> 00:47:26.370
and I'll press my new key, F5,
and I'll click out to

00:47:26.520 --> 00:47:28.450
accept that binding.

00:47:29.060 --> 00:47:32.570
Now,
I have some text down at the bottom here

00:47:32.820 --> 00:47:37.480
that says that it's already bound to
something and my new binding won't take

00:47:37.480 --> 00:47:39.990
effect until the conflict is resolved.

00:47:40.150 --> 00:47:43.720
And they also have this little
icon here indicating that there's

00:47:43.830 --> 00:47:46.000
a conflict with my key bindings.

00:47:46.000 --> 00:47:49.990
I can see that in the conflict button.

00:47:50.490 --> 00:47:55.810
And looking through here,
there are just these two major conflicts.

00:47:55.890 --> 00:47:58.200
I need to resolve that
before F5 will do anything.

00:47:58.200 --> 00:48:01.680
And since I'm not doing
much OpenGL work right now,

00:48:01.680 --> 00:48:05.280
I'm just going to highlight the
OpenGL command that's bound to

00:48:05.390 --> 00:48:07.610
F5 and press delete to unbind it.

00:48:08.020 --> 00:48:10.480
And that leaves F5
bound to my run command.

00:48:10.480 --> 00:48:13.760
And now,
if I close the prefs and press F5,

00:48:13.760 --> 00:48:18.500
Xcode asks me if I want to stop
the app that's already running.

00:48:18.500 --> 00:48:23.310
It builds my app, it runs it,
my console window comes up

00:48:23.310 --> 00:48:27.900
exactly where I left it,
and everything is good.

00:48:29.220 --> 00:48:36.100
Now let's say I want to bind a text
editing command like "end." I don't want

00:48:36.100 --> 00:48:40.540
"end" to scroll to the end of the file,
which is the default for the Mac.

00:48:40.540 --> 00:48:45.480
I actually want it to move my insertion
point to the end of the current line,

00:48:45.600 --> 00:48:48.490
because that's just how I prefer to work.

00:48:48.830 --> 00:48:50.540
Once again,
I can just bring up Xcode's key

00:48:50.640 --> 00:48:53.630
bindings preferences using Command,
Command,

00:48:53.630 --> 00:48:55.740
Comma to bring up the Prefs window.

00:48:55.740 --> 00:48:58.290
And I'll start typing End.

00:48:58.290 --> 00:49:02.200
You can see we have a lot
of different commands whose

00:49:02.750 --> 00:49:04.870
name includes the text End.

00:49:04.870 --> 00:49:08.210
So if I just start scrolling down here,
at the bottom,

00:49:08.280 --> 00:49:10.440
I have Scroll to End of Document.

00:49:10.440 --> 00:49:14.350
And it's bound to a
key with a symbol here.

00:49:14.350 --> 00:49:16.780
Now if I zoom in on that,
it's a little downward

00:49:16.780 --> 00:49:18.330
rightward facing arrow.

00:49:18.940 --> 00:49:20.560
And it's highlighted.

00:49:20.700 --> 00:49:23.000
It turns out this is the
symbol for the End key that

00:49:23.120 --> 00:49:24.900
will appear in menus and such.

00:49:24.900 --> 00:49:29.890
And it's highlighted because Xcode
didn't just search for commands that

00:49:29.890 --> 00:49:32.520
contain the term End in their text.

00:49:32.520 --> 00:49:35.580
It also searched on the name of the key.

00:49:35.580 --> 00:49:39.790
So if I want to see all of the
commands that involve arrow keys,

00:49:39.860 --> 00:49:42.080
I can actually type in Arrow.

00:49:42.080 --> 00:49:44.560
And I can see all of the
commands that involve left,

00:49:44.660 --> 00:49:46.420
right, up, or down arrow keys.

00:49:47.140 --> 00:49:50.020
If I want to see commands
that involve the Control key,

00:49:50.180 --> 00:49:51.270
I can type Control.

00:49:51.510 --> 00:49:56.840
And that'll show me all commands
that use Control in their binding,

00:49:56.930 --> 00:49:59.940
which include a lot of those
Emacs commands that I like to use.

00:49:59.940 --> 00:50:05.940
I can even stack these, for example,
by adding in Command as well.

00:50:05.940 --> 00:50:09.600
And that shows me all of the
commands that involve both the

00:50:09.640 --> 00:50:11.940
Control key and the Command key.

00:50:11.940 --> 00:50:14.680
Xcode knows to And these terms together.

00:50:14.680 --> 00:50:14.940
And that's it.

00:50:14.940 --> 00:50:15.930
Thank you.

00:50:21.460 --> 00:50:26.400
Now, Xcode isn't the only thing that lets
you customize your keyboard shortcuts.

00:50:26.550 --> 00:50:30.940
OS X itself also lets you do
that using the keyboard pane

00:50:30.940 --> 00:50:33.300
in the system preferences.

00:50:34.560 --> 00:50:37.370
The first thing I like to do,
because I do use a lot

00:50:37.370 --> 00:50:40.080
of those Emacs commands,
as you can see if you've

00:50:40.080 --> 00:50:44.500
been watching what I type,
is fix my control key.

00:50:44.560 --> 00:50:50.500
I prefer the control key to be where caps
lock is on most keyboards these days.

00:50:50.600 --> 00:50:56.490
It just makes for a lot less distance
to reach when invoking those commands.

00:50:56.590 --> 00:51:00.350
I can do that just in the
modifier keys section.

00:51:01.600 --> 00:51:04.620
And now I can make my caps lock
key a control key and those Emacs

00:51:04.620 --> 00:51:06.800
commands are a lot more comfortable.

00:51:06.840 --> 00:51:11.700
I can also assign keyboard
shortcuts and change them for

00:51:11.760 --> 00:51:13.800
a lot of the OS X defaults.

00:51:13.870 --> 00:51:19.470
And I can even assign keyboard shortcuts
to things like services that I create.

00:51:19.610 --> 00:51:21.940
So Brooke added this
sort and unique service.

00:51:22.000 --> 00:51:24.180
If I wanted,
I could actually bind it to a

00:51:24.180 --> 00:51:28.860
keyboard shortcut and then anywhere
in OS X that I have text selected,

00:51:28.910 --> 00:51:32.590
I could press the keyboard
equivalent for that service and

00:51:32.590 --> 00:51:34.920
have that text sorted and unique.

00:51:34.980 --> 00:51:37.930
And like I said,
the Koko event handling guide

00:51:38.130 --> 00:51:42.020
talks a lot about how the key
binding mechanism in OS X works,

00:51:42.060 --> 00:51:45.840
at both the programmatic
level and from a user level.

00:51:47.590 --> 00:51:50.000
Now I'm going to take
us back to our slides.

00:51:50.130 --> 00:51:52.730
And well, what did we talk about?

00:51:52.780 --> 00:51:55.940
I showed you how you can use
multiple windows to really

00:51:55.940 --> 00:51:58.210
organize your work spatially.

00:51:58.350 --> 00:52:01.380
So you can have some main
text that you're working with,

00:52:01.380 --> 00:52:04.630
some main tasks,
and then the auxiliary content

00:52:04.680 --> 00:52:09.400
that you're using with that task
around what you're working with.

00:52:09.740 --> 00:52:12.300
And I showed you how you
can really drive Xcode,

00:52:12.310 --> 00:52:16.060
both for text editing and for
getting around from the keyboard.

00:52:16.060 --> 00:52:19.740
That lets you efficiently edit your
text and build up muscle memory or

00:52:19.740 --> 00:52:23.480
leverage the muscle memory that you
already have by modifying Xcode's

00:52:23.480 --> 00:52:25.540
key bindings to what you prefer.

00:52:27.710 --> 00:52:30.980
Now we have some related
sessions on Xcode this week,

00:52:31.080 --> 00:52:34.870
such as working with schemes
and projects in Xcode tomorrow,

00:52:34.960 --> 00:52:39.350
source control management in
Xcode on Thursday in Nob Hill,

00:52:39.510 --> 00:52:42.440
and debugging in Xcode also on Thursday.

00:52:42.440 --> 00:52:44.720
If you'd like any more
information about Xcode,

00:52:44.720 --> 00:52:47.440
you can always contact our
developer tools evangelist,

00:52:47.440 --> 00:52:48.470
Michael Jurowicz.

00:52:49.140 --> 00:52:52.100
You can check out our Xcode 4
user guide in the documentation,

00:52:52.100 --> 00:52:55.550
and if you'd like to take a look at the
sample code that we've been demoing with,

00:52:55.640 --> 00:52:58.490
it's called Core Data Books,
and it's just available on

00:52:58.490 --> 00:52:59.790
Apple's sample code site.

00:52:59.800 --> 00:53:02.460
Thank you very much.

00:53:02.460 --> 00:53:03.750
Thank you.