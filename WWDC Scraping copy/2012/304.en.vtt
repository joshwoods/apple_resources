WEBVTT

00:00:11.400 --> 00:01:17.800
[Transcript missing]

00:01:18.200 --> 00:01:23.230
Then Event Kit Data Isolation,
which is a feature currently on iOS

00:01:23.450 --> 00:01:26.100
that you're going to need to pay
attention to if you're writing new apps

00:01:26.100 --> 00:01:28.700
or even just to retrofit your old apps.

00:01:28.850 --> 00:01:30.980
Finally, we'll be talking about
Calendar Store on OS X.

00:01:31.240 --> 00:01:35.340
Calendar Store is the API that you
would use in versions of OS X before

00:01:35.340 --> 00:01:38.800
Mountain Lion if you wanted to
work with Events and Reminders.

00:01:38.890 --> 00:01:42.160
Alright,
let's get started with Calendar Events.

00:01:42.670 --> 00:01:47.570
So, Calendar Events are here.

00:01:47.680 --> 00:01:51.200
If you're working with
Event Kit and Calendar Events,

00:01:51.200 --> 00:01:56.910
you're working with the same persistence
as is used on the iPad and the iPhone

00:01:56.910 --> 00:02:01.200
and OS X for Events and Reminder.

00:02:01.200 --> 00:02:02.600
But in this case,
we're talking about Events.

00:02:02.770 --> 00:02:07.370
So, one of the new features in
Mountain Lion is that if you

00:02:07.370 --> 00:02:10.700
do not have Calendar running
and you create new Events,

00:02:10.730 --> 00:02:14.790
they will still sync to
Exchange and CalDAV accounts.

00:02:14.860 --> 00:02:17.200
Those of you who have been
working on OS X before,

00:02:17.200 --> 00:02:18.400
that should be good news.

00:02:18.470 --> 00:02:21.300
Alright, so let's actually talk in more
detail about why you would

00:02:21.470 --> 00:02:22.670
care about Calendar Events.

00:02:22.880 --> 00:02:25.120
So, you're out there making
your awesome apps,

00:02:25.120 --> 00:02:28.310
thank you very much,
and you're moseying along

00:02:28.390 --> 00:02:30.600
and things are going well,
and then one day you meet

00:02:30.600 --> 00:02:32.800
someone and you fall in love.

00:02:32.850 --> 00:02:35.560
And you decide, "Hey,
let's get married!" And you do,

00:02:35.560 --> 00:02:39.300
but it turns out there's all this
planning involved in getting married.

00:02:39.300 --> 00:02:40.500
If you've done it before,
you'll know this is true.

00:02:40.500 --> 00:02:40.500
You'll know that you're getting married.

00:02:40.500 --> 00:02:40.500
But if you've done it before,
you'll know this is true.

00:02:40.500 --> 00:02:40.500
But if you've done it before,
you'll know this is true.

00:02:40.500 --> 00:02:45.770
And you have to get together with the
venue to plan out exactly how things are,

00:02:45.770 --> 00:02:48.650
and scheduling with them is a hassle,
and get together with the cake

00:02:48.650 --> 00:02:50.300
maker and plan things out.

00:02:50.450 --> 00:02:55.070
And so, you and your super geeky spouse,
you get married, but then you think,

00:02:55.340 --> 00:02:56.600
"That was a hassle.

00:02:56.710 --> 00:02:58.290
Let's make it easier for
somebody else next time.

00:02:58.330 --> 00:03:02.020
Let's make awesome wedding!" So,
awesome wedding, you decide,

00:03:02.210 --> 00:03:05.290
is going to be this app that
is going to help other people

00:03:05.290 --> 00:03:06.800
plan out all of the details.

00:03:06.800 --> 00:03:10.300
Remember the details about the florist,
remember the details about

00:03:10.300 --> 00:03:10.300
making cake and things like that.

00:03:10.300 --> 00:03:13.450
So, if you put it on the app
store just with those details,

00:03:13.450 --> 00:03:16.880
I think it would do well,
but what's going to happen is your users

00:03:16.910 --> 00:03:20.760
are going to plan out the cake testing,
and they're not going to

00:03:20.840 --> 00:03:21.500
see it on their calendar.

00:03:21.500 --> 00:03:23.430
Because you haven't put
it onto their calendar,

00:03:23.510 --> 00:03:26.240
and they will plan to go golfing instead,
or something like that.

00:03:26.450 --> 00:03:28.680
And that's not going to work
out so well with your spouse.

00:03:28.900 --> 00:03:31.860
So,
what you really want in this case is you

00:03:31.860 --> 00:03:37.150
want your users to see the events that
are important to them that you're working

00:03:37.150 --> 00:03:40.090
with and put them on their calendar.

00:03:40.100 --> 00:03:40.100
So, just having events that are
important to them is going to help

00:03:40.100 --> 00:03:40.100
you plan out all of the details.

00:03:40.100 --> 00:03:42.400
So, having events on your
users' calendars is great,

00:03:42.400 --> 00:03:45.420
and that draws them in with the
things that you're doing in your apps.

00:03:45.520 --> 00:03:49.040
Some other benefits are that you can
put a link back to your application

00:03:49.660 --> 00:03:51.400
and draw users in that way.

00:03:51.400 --> 00:03:54.430
And you can also add alarms
so that users don't forget to

00:03:54.570 --> 00:03:56.090
go and do the cake testing.

00:03:56.280 --> 00:04:01.580
Okay, so let's talk about the elements
of EventKit and how you go about

00:04:01.580 --> 00:04:04.250
not missing your cake testing.

00:04:04.280 --> 00:04:09.900
So, here is the OS X calendar app,
and in the left-hand corner,

00:04:09.900 --> 00:04:13.070
left-hand side,
you see here are a bunch of calendars.

00:04:13.160 --> 00:04:17.010
The calendar app contains many calendars,
and then each calendar

00:04:17.010 --> 00:04:19.780
contains many events.

00:04:19.900 --> 00:06:49.100
[Transcript missing]

00:06:50.600 --> 00:06:52.920
So, EK Event,
we talked in great detail about

00:06:52.980 --> 00:06:56.220
at that session a few years ago,
so I'm not going to go into great detail,

00:06:56.220 --> 00:07:01.210
but we'll just show here the iOS
Event Editor and the OS X Inspector.

00:07:01.320 --> 00:07:05.660
Most of the fields you see here,
you can edit in your EK Events.

00:07:06.240 --> 00:07:09.100
All right,
so let's look at some actual code.

00:07:09.310 --> 00:07:13.650
Here is the events in a
week shown in OS X Calendar.

00:07:14.120 --> 00:07:17.190
Let's walk through the code
that you would use if you

00:07:17.190 --> 00:07:19.060
wanted to have an application,
an app,

00:07:19.170 --> 00:07:24.140
that would fetch all of the events
in your Calendar for a given week.

00:07:24.680 --> 00:07:26.600
So the first thing we need to do,
as we were just discussing,

00:07:26.600 --> 00:07:28.940
is create an EK Event Store.

00:07:28.940 --> 00:07:32.700
And in this case we're going to
initialize it with EKEntityMaskEvent,

00:07:32.800 --> 00:07:34.600
because we're interested in events.

00:07:34.600 --> 00:07:36.400
Next,
we want to find all of our calendars,

00:07:36.410 --> 00:07:38.410
but actually we don't
want all of our calendars,

00:07:38.410 --> 00:07:40.600
we just want the calendars
that involve events.

00:07:40.600 --> 00:07:46.600
So we're going to fetch calendars
for entity type EKEntityTypeEvent.

00:07:46.600 --> 00:07:51.550
Then once we have event calendars,
we want to create a predicate that

00:07:51.590 --> 00:07:54.600
will describe the fetch we want to run.

00:07:54.600 --> 00:07:58.600
So the predicate needs to know
what the start of the range is,

00:07:58.600 --> 00:08:01.600
the end of the range,
and which calendars you're working with.

00:08:01.600 --> 00:08:03.790
So I'm not going to go into detail
right now about how you create

00:08:03.820 --> 00:08:06.000
an NSState for the beginning of
the week or the end of the week,

00:08:06.000 --> 00:08:08.850
we'll actually talk about that later,
but let's imagine that you

00:08:08.850 --> 00:08:11.600
have some NSStates for that
and we create a predicate.

00:08:11.600 --> 00:08:14.450
And then with that predicate,
it's as easy as saying

00:08:14.750 --> 00:08:16.600
Store Events Matching Predicate.

00:08:16.600 --> 00:08:20.380
And then you have an array and you can
iterate over it and we can print them

00:08:20.650 --> 00:08:22.840
out with their titles and start dates.

00:08:22.840 --> 00:08:26.520
And you have a not very well
sorted utility for printing

00:08:26.520 --> 00:08:28.590
out the events in your week.

00:08:29.300 --> 00:08:32.350
All right, well, with that,
now that we've talked about

00:08:32.350 --> 00:08:36.750
EK Calendar and EK Event Store,
I'd like to invite up my colleague,

00:08:36.860 --> 00:08:41.290
Matt Lanter, to give you a more in-depth
demo using Calendar Events.

00:08:41.600 --> 00:08:43.060
Thank you, Jeffrey.

00:08:43.140 --> 00:08:46.460
I'm Matt Lanter,
and I'm an engineer on the Calendar team.

00:08:46.610 --> 00:08:50.070
Outside of work,
I like playing poker with friends.

00:08:50.270 --> 00:08:53.020
A few months ago,
a group of my friends and I had

00:08:53.020 --> 00:08:54.890
an impromptu game of poker.

00:08:55.020 --> 00:08:56.700
It was a ton of fun.

00:08:56.840 --> 00:08:59.440
Some of us won money,
some of us lost money,

00:08:59.520 --> 00:09:02.820
but we all had fun,
which is all that matters.

00:09:02.950 --> 00:09:05.830
So much fun, in fact,
we invited more and more

00:09:05.830 --> 00:09:07.670
of our friends to join.

00:09:07.990 --> 00:09:11.830
Unfortunately,
it's become harder and harder to find

00:09:11.960 --> 00:09:14.060
the time that works for all of us.

00:09:14.200 --> 00:09:18.900
We tried solving this using iMessage,
which works okay,

00:09:19.030 --> 00:09:23.450
but it's hard to keep track of
the times everyone is suggesting.

00:09:23.860 --> 00:09:25.830
Given that I always
have my phone with me,

00:09:25.830 --> 00:09:29.000
and I'm often at my computer,
this seems like a great opportunity

00:09:29.000 --> 00:09:32.100
for an app to solve this problem.

00:09:32.240 --> 00:09:35.340
Let's look at an app
I created that does just this.

00:09:35.520 --> 00:09:38.990
First,
I created a shared calendar called Shared

00:09:38.990 --> 00:09:41.740
Poker and invited all my friends to it.

00:09:41.860 --> 00:09:43.800
Then they can just open
up this application,

00:09:44.060 --> 00:09:48.330
select that calendar,
and they can suggest a time that

00:09:48.330 --> 00:09:50.380
works for them to play poker.

00:09:50.500 --> 00:10:10.800
[Transcript missing]

00:10:11.080 --> 00:10:14.160
I used Event Kit to
create this application.

00:10:14.160 --> 00:10:17.350
The great part about using Event Kit is
that I was able to use the exact

00:10:17.520 --> 00:10:21.320
same model code on both iOS and OS X.

00:10:21.780 --> 00:10:27.090
Here's the iOS version,
and here's the OS X version.

00:10:27.330 --> 00:10:29.350
They have different
views and controllers,

00:10:29.370 --> 00:10:33.760
but it's the exact same
model code underneath them.

00:10:33.900 --> 00:10:38.700
Let's look at a couple of the methods
we need to implement in the model.

00:10:40.690 --> 00:10:43.300
First, we need to fetch the Calendars.

00:10:43.300 --> 00:10:46.180
We'll use this to populate the
drop-down list so you can select

00:10:46.180 --> 00:10:48.010
the shared Poker Calendar.

00:10:48.280 --> 00:10:53.090
Second, we need to be able to view all
the upcoming Events so we can

00:10:53.250 --> 00:10:55.570
display that in the Table View.

00:10:55.970 --> 00:10:59.990
Third, we want the ability to create
Events so that my friends can

00:10:59.990 --> 00:11:02.500
suggest times that work for them.

00:11:02.590 --> 00:11:05.870
And finally, the most important part
of this app is voting,

00:11:05.870 --> 00:11:09.970
so that we can find the time
that works best for all of us.

00:11:10.310 --> 00:11:13.480
Let's go into Xcode and look at
how we'd implement these methods.

00:11:13.750 --> 00:11:17.160
First we'll start out and
look at what the application,

00:11:17.160 --> 00:11:19.350
the app looks like with
none of these implemented.

00:11:19.390 --> 00:11:20.070
So just the view.

00:11:20.340 --> 00:11:22.630
And then we'll go through and
implement them one at a time and see

00:11:22.750 --> 00:11:24.200
what it looks like after we do that.

00:11:24.200 --> 00:11:26.310
If we go to the demo machine,
we see here's the

00:11:26.470 --> 00:11:27.720
application in the middle.

00:11:27.720 --> 00:11:30.180
Currently it doesn't
display anything though.

00:11:30.190 --> 00:11:32.200
If I click Calendars, nothing happens.

00:11:32.200 --> 00:11:36.180
There's nothing in the list and
adding an event does not work either.

00:11:36.200 --> 00:11:40.440
So let's go into Xcode and first
we'll do the init method and then

00:11:40.440 --> 00:11:43.200
we'll get into some of those methods.

00:11:43.560 --> 00:11:45.200
Here we have an init.

00:11:45.200 --> 00:11:48.430
As Jeffrey mentioned earlier,
we want the event store

00:11:48.430 --> 00:11:50.200
to be long-lived ideally.

00:11:50.200 --> 00:11:53.810
So we'll store that as
an instance variable,

00:11:53.810 --> 00:11:56.530
as a property within our model.

00:11:58.410 --> 00:12:00.650
To do this,
we'll call init with access to the

00:12:00.780 --> 00:12:02.660
types and we'll specify events.

00:12:02.800 --> 00:12:03.680
The entity mask event.

00:12:03.770 --> 00:12:05.900
We only care about events
in this application,

00:12:05.910 --> 00:12:06.450
this app.

00:12:06.530 --> 00:12:09.340
We don't care about Reminders.

00:12:09.480 --> 00:12:13.260
Next, we also want to keep track of
the Calendar the user currently

00:12:13.260 --> 00:12:15.990
has selected in the UI,
which we'll use in some

00:12:15.990 --> 00:12:17.490
of our later methods.

00:12:17.810 --> 00:12:21.100
We need a good default
starting value though,

00:12:21.190 --> 00:12:23.500
so we'll use the default
Calendar for new events.

00:12:23.620 --> 00:12:28.360
This is the Calendar the user
specified in the Settings app on iOS

00:12:28.360 --> 00:12:31.520
or within Calendar Preferences on OS X.

00:12:31.920 --> 00:12:34.650
In addition,
we have some data structures we use

00:12:34.650 --> 00:12:38.800
in this model to basically store the
current events we're showing to the user.

00:12:38.880 --> 00:12:41.000
We're not too concerned
about those for the demo,

00:12:41.000 --> 00:12:44.910
but we'll initialize them here.

00:12:45.900 --> 00:12:50.660
Finally, when we fetch the Poker Events,
we want to do this on a background

00:12:50.750 --> 00:12:53.710
thread so we don't block the
UI while that's happening.

00:12:53.830 --> 00:12:58.540
We'll use Grand Central Dispatch,
which is a great API available

00:12:58.540 --> 00:13:01.410
on both iOS and Mac OS X,
to do this.

00:13:01.680 --> 00:13:04.600
We need to create a
queue as part of this.

00:13:04.680 --> 00:13:08.940
So we'll create the queue,
and we'll call dispatchQueueCreate,

00:13:09.000 --> 00:13:11.260
give it a title,
and then specify some options.

00:13:11.320 --> 00:13:15.390
In this case, it's a serial queue,
meaning only one thing

00:13:15.440 --> 00:13:17.020
runs on it at a time.

00:13:17.730 --> 00:13:19.120
Okay, so that's our NIT method.

00:13:19.160 --> 00:13:23.140
Let's look at how we fetch the Calendars.

00:13:23.140 --> 00:13:24.940
Here we have a method, Calendars.

00:13:25.060 --> 00:13:27.630
Currently it just returns
empty array using the new

00:13:27.630 --> 00:13:29.610
Objective-C array literal syntax.

00:13:29.700 --> 00:13:31.620
Let's think about what
we want to do here.

00:13:31.690 --> 00:13:35.700
We want all of the events
supporting Calendars.

00:13:35.700 --> 00:13:38.700
We don't care about the ones
that only support Reminders.

00:13:38.930 --> 00:13:44.880
And then we want the
ones that are writable,

00:13:44.880 --> 00:13:48.860
that we can add events to.

00:13:48.860 --> 00:13:48.860
So to get the ones that support events,
we will

00:13:49.270 --> 00:13:52.140
call Calendars for Entity
Type on the Event Store and

00:13:52.260 --> 00:13:54.740
we'll specify Entity Type Event.

00:13:54.840 --> 00:13:57.320
We need to filter this down
though to the writable ones.

00:13:57.370 --> 00:14:00.680
So we'll create an array to
store the filtered results.

00:14:02.240 --> 00:14:04.870
Just in the rain,
we'll call that Filtered Calendars.

00:14:04.870 --> 00:14:08.300
Then we'll iterate through
the All Event Calendars.

00:14:08.370 --> 00:14:10.500
And so for each Calendar and
All Event Calendars,

00:14:10.580 --> 00:14:13.610
we want to check if we
can add Events to it.

00:14:14.200 --> 00:14:16.980
So we'll check, does the Calendar allow
content modifications?

00:14:17.060 --> 00:14:18.530
Basically, can we add items to it?

00:14:18.860 --> 00:14:21.590
If so,
we'll add that to Filtered Calendars,

00:14:21.590 --> 00:14:25.680
and then we just want to return
that Filtered Calendars array.

00:14:26.260 --> 00:14:29.700
I will run this by clicking "Run"
in the upper left-hand corner,

00:14:29.700 --> 00:14:33.840
and we should hopefully see that we
now have the shared poker calendar,

00:14:33.840 --> 00:14:37.270
as well as my home and
work personal calendars.

00:14:37.820 --> 00:14:40.270
Currently, though,
I can't view the times my

00:14:40.270 --> 00:14:41.850
friends have suggested.

00:14:41.870 --> 00:14:44.400
So let's look at how we'd fetch
all the upcoming events so we

00:14:44.400 --> 00:14:46.850
can populate the table view.

00:14:48.970 --> 00:14:51.900
Here's a method, FetchPokerEvents,
which we'll use to do that.

00:14:51.950 --> 00:14:53.950
As I mentioned earlier,
we want to do this on a background

00:14:53.950 --> 00:14:56.140
thread so we don't block the UI.

00:14:56.290 --> 00:14:59.390
We'll use Grand Central Dispatch.

00:14:59.640 --> 00:15:06.280
and we'll call dispatch async and we'll
specify that queue we created earlier.

00:15:07.230 --> 00:15:11.090
Now, we want to fetch the events
within a current range.

00:15:11.240 --> 00:15:14.650
For this demo,
I arbitrarily chose one day in the

00:15:14.650 --> 00:15:16.140
past to two months in the future.

00:15:16.260 --> 00:15:19.370
We need to create NSDates that
represent these points in time so

00:15:19.370 --> 00:15:21.440
we can then fetch within that range.

00:15:21.650 --> 00:15:26.360
To do this,
we need the user's current NS Calendar.

00:15:28.170 --> 00:15:33.600
So we'll call Current Calendar,
and then we'll create NSDate components.

00:15:33.630 --> 00:15:38.310
So one day ago components,
we'll set the day to -1,

00:15:38.310 --> 00:15:40.510
but we need an NSDate.

00:15:40.710 --> 00:15:42.840
To get the NSDate from
the NSDate components,

00:15:42.840 --> 00:15:46.670
we'll call
dateByAddingComponents to date.

00:15:46.670 --> 00:15:48.940
So we'll specify the
components we just created,

00:15:49.120 --> 00:15:52.720
the NSDateDate,
this returns the current date time,

00:15:52.900 --> 00:15:55.100
and that will return
the NSDate one day ago.

00:15:55.160 --> 00:15:59.090
We want to do the same thing
for two months in the future.

00:16:00.610 --> 00:16:01.320
So here we do that.

00:16:01.570 --> 00:16:04.830
The main difference is
our month is a positive 2.

00:16:04.970 --> 00:16:08.520
Now that we have those two NSDates,
we want to get a predicate from the

00:16:08.520 --> 00:16:14.000
Event Store that encapsulates those two
dates and a calendar we'll search in.

00:16:17.590 --> 00:16:20.900
will call the predicate
for events with start date,

00:16:20.900 --> 00:16:22.660
specified one day ago.

00:16:22.660 --> 00:16:27.350
The end date is two months in the future,
and the calendars we will use the

00:16:27.350 --> 00:16:29.900
new Objective-C array literal syntax.

00:16:29.900 --> 00:16:32.000
So this takes in an NSArray.

00:16:32.000 --> 00:16:35.090
So we're basically specifying
an NSArray with the selected

00:16:35.240 --> 00:16:37.400
calendar we created in a Nib.

00:16:37.400 --> 00:16:41.300
Now that we have this predicate,
we want to run it to

00:16:41.300 --> 00:16:41.300
get the matching events.

00:16:42.840 --> 00:16:45.870
We will, on the Event Store,
call Events Matching Predicate,

00:16:46.060 --> 00:16:48.030
pass in that predicate,
and that will give us

00:16:48.030 --> 00:16:49.240
an array of results.

00:16:49.300 --> 00:16:51.650
We need to filter this down, though,
by title.

00:16:51.760 --> 00:16:54.790
We only want the events
whose title is Poker.

00:16:54.860 --> 00:16:58.220
We'll create a standard
Dennis predicate to do this.

00:16:59.790 --> 00:17:02.700
So we'll call a predicate
format where the title,

00:17:02.700 --> 00:17:05.290
so I counter that title,
matches our parameter,

00:17:05.290 --> 00:17:07.690
which in this case is poker.

00:17:07.810 --> 00:17:11.360
Then we'll just run that predicate by
calling filtered array using predicate,

00:17:11.410 --> 00:17:14.130
passing that predicate,
and we'll set that back

00:17:14.140 --> 00:17:15.700
to our results array.

00:17:15.700 --> 00:17:18.610
Now that we have this array of results,
we want to update those data

00:17:18.620 --> 00:17:20.700
structures we created in there.

00:17:20.700 --> 00:17:24.620
We're not concerned about everything
we do as part of that for this demo,

00:17:24.900 --> 00:17:28.700
so we have a helper
function that will do that.

00:17:28.700 --> 00:17:31.500
update those internal data structures.

00:17:31.870 --> 00:17:35.960
Now that we have gotten all the results,
we want to notify the UI so that

00:17:35.960 --> 00:17:40.500
it can update and refresh and
show the user the latest events.

00:17:40.620 --> 00:17:43.950
We want to do this on the main thread
since it's likely the UI will do some

00:17:44.080 --> 00:17:46.900
work when it gets a notification.

00:17:47.220 --> 00:17:50.200
We will dispatch async
back onto the main queue,

00:17:50.200 --> 00:17:54.030
which runs on the main thread,
and we'll post a notification

00:17:54.030 --> 00:17:55.990
saying our model changed.

00:17:56.150 --> 00:17:58.980
I'll run this again,
and now we should hopefully

00:17:58.980 --> 00:18:00.860
see all the upcoming events.

00:18:01.010 --> 00:18:03.990
So we see here, Shared Poker,
and then we see all the upcoming events.

00:18:04.150 --> 00:18:09.280
So we see today at 6:00 p.m., tomorrow
7:00 p.m., and then Friday at 8:00 p.m.

00:18:09.400 --> 00:18:11.140
Currently, tomorrow is winning.

00:18:11.380 --> 00:18:19.070
However, I would really like to play
tonight at 10:00 p.m., so I'd

00:18:19.070 --> 00:18:19.070
like to create a new time.

00:18:19.070 --> 00:18:19.070
Unfortunately, I can't do that yet.

00:18:19.460 --> 00:18:25.790
Because we can't add new Events,
so let's look at how we would add Events.

00:18:26.470 --> 00:18:30.690
Here we have Add Event with Start Time,
which takes in the start time.

00:18:30.910 --> 00:18:34.300
And first we want to
create a blank EK event.

00:18:34.460 --> 00:18:36.410
Then we'll set a bunch of
properties on this event,

00:18:36.620 --> 00:18:39.540
and finally we want to save this event.

00:18:39.970 --> 00:18:44.240
To create the blank EK event,
we'll call EK event,

00:18:44.260 --> 00:18:46.370
Event with Event Store,
and this will basically create

00:18:46.370 --> 00:18:49.560
a new event that's bound to
the specified Event Store.

00:18:51.220 --> 00:18:55.700
Now we want to set
several properties on it.

00:18:55.880 --> 00:19:00.140
So here we set the title, time zone,
start date, end date,

00:19:00.640 --> 00:19:04.100
and for the demo we just always
assume the duration is one hour.

00:19:04.300 --> 00:19:08.100
And then we specify what calendar
this event should go into.

00:19:08.260 --> 00:19:11.310
We want to save this event now.

00:19:14.070 --> 00:19:17.400
So we'll call saveEvent,
pass in that event.

00:19:17.400 --> 00:19:19.260
We specify a span.

00:19:19.290 --> 00:19:22.900
The span only matters
for non-recurring events.

00:19:23.010 --> 00:19:25.190
Or sorry,
it only matters for recurring events,

00:19:25.240 --> 00:19:26.690
and this is not a recurring event.

00:19:26.960 --> 00:19:28.790
So it doesn't really
matter what we put here.

00:19:28.920 --> 00:19:31.830
But if you'd like to learn
more about recurring events,

00:19:31.830 --> 00:19:34.900
I'd suggest watching the
WWDC talk from two years ago.

00:19:34.900 --> 00:19:37.670
We specify that we commit yes,
so we'll immediately commit this.

00:19:37.910 --> 00:19:39.900
And then if there's an
error for some reason,

00:19:39.900 --> 00:19:40.840
we'll log that out.

00:19:40.900 --> 00:19:45.310
The example of an error would be if
I did not specify the start date,

00:19:45.310 --> 00:19:46.900
I would get an error.

00:19:47.600 --> 00:19:50.500
Let's run this and we
should hopefully see,

00:19:50.500 --> 00:19:53.340
we see all the times people suggested.

00:19:53.360 --> 00:19:57.410
I'll create one for 10:00 PM tonight.

00:19:57.790 --> 00:19:59.340
And now we see 10:00 PM.

00:19:59.350 --> 00:20:01.130
Awesome.

00:20:01.210 --> 00:20:04.260
I'd like to vote on this though,
so I can convince my friends

00:20:04.260 --> 00:20:07.500
to come to this time tonight.

00:20:07.630 --> 00:20:11.970
We have increased vote on event,
which takes an event.

00:20:12.720 --> 00:20:14.430
First,
we want to get the current phone count.

00:20:14.630 --> 00:20:17.400
So we'll call Event Number of Votes.

00:20:17.600 --> 00:20:19.800
You may be thinking,
"I've never realized there's a

00:20:19.800 --> 00:20:26.640
Number of Votes field on an event."
This field is created using custom code,

00:20:26.650 --> 00:20:30.700
specifically using a category,
which I did for this demo.

00:20:30.700 --> 00:20:33.740
We stored it in the Notes field for
this demo for simplicity's sake.

00:20:33.810 --> 00:20:36.850
In an actual application,
you might want to store it on an external

00:20:36.850 --> 00:20:41.140
server and then tie it back to this
event with some sort of event identifier.

00:20:41.410 --> 00:20:42.600
But now that we have
this number of votes,

00:20:42.600 --> 00:20:44.900
we want to increase it by one.

00:20:44.900 --> 00:20:47.360
So we'll just set the
number of votes plus one.

00:20:47.360 --> 00:20:51.300
And since we modified the notes field,
we want to save this event.

00:20:51.300 --> 00:20:55.620
We'll call Save Event,
and this is the same thing we just

00:20:55.620 --> 00:20:58.300
did when we created a new event.

00:20:58.300 --> 00:21:01.580
We'll run this again,
and hopefully I should

00:21:01.580 --> 00:21:03.160
be able to vote on it.

00:21:03.390 --> 00:21:04.660
So here's the one I just created.

00:21:04.660 --> 00:21:05.300
I'll click.

00:21:05.320 --> 00:21:08.950
And now we have one vote,
which is awesome.

00:21:09.340 --> 00:21:13.510
We will -- the great part about this,
as I mentioned earlier,

00:21:13.580 --> 00:21:17.710
is I can use the exact same
model code for both iOS and OS X.

00:21:18.500 --> 00:21:21.330
So let's try and-- let's
build the iOS version.

00:21:21.330 --> 00:21:24.660
And I already created the
Viewer and Controller for it.

00:21:24.820 --> 00:21:28.290
I just need to run it,
and then hopefully it will use

00:21:28.290 --> 00:21:30.840
this model we have just created.

00:21:30.970 --> 00:21:33.400
So I'll switch to the mobile target.

00:21:33.570 --> 00:21:34.840
Build this.

00:21:35.030 --> 00:21:38.840
And then we'll switch to my device.

00:21:38.990 --> 00:21:41.480
And here we see the application running.

00:21:41.600 --> 00:21:43.220
We see the 10 PM one I just created.

00:21:43.380 --> 00:21:46.720
I'll click on that and
increase the vote to 2.

00:21:46.910 --> 00:21:49.910
We see in this application,
we see all the times my

00:21:50.160 --> 00:21:51.530
friends have suggested.

00:21:51.750 --> 00:21:54.280
I can click Calendars in the
upper left-hand corner if

00:21:54.280 --> 00:21:55.860
I want to change the calendar.

00:21:55.900 --> 00:21:59.910
I can create a new event using plus
in the upper right-hand corner.

00:22:00.260 --> 00:22:02.120
And so that's iOS application.

00:22:02.120 --> 00:22:05.990
And this uses the exact same
model code we just created.

00:22:06.090 --> 00:22:08.960
If we go back to the demo machine.

00:22:11.100 --> 00:22:15.960
We see that it is automatically updated,
so the 10:00 PM one has two votes now.

00:22:16.120 --> 00:22:16.800
This is great.

00:22:16.800 --> 00:22:19.960
Event Kit takes care of all the
syncing for you behind the scenes.

00:22:20.050 --> 00:22:22.790
You notice all we do is we save
the event and then everything

00:22:22.790 --> 00:22:25.750
is taken care of for you.

00:22:25.870 --> 00:22:27.460
Okay.

00:22:27.580 --> 00:22:29.490
I'm showing you...

00:22:30.490 --> 00:22:33.330
and I will be talking about
how easy it is to create an

00:22:33.380 --> 00:22:35.400
application using Event Kit.

00:22:35.440 --> 00:22:38.400
The great part about Event Kit is
you can have the exact same

00:22:38.400 --> 00:22:43.400
model code to create both an iOS
and an OS X version of the app.

00:22:43.400 --> 00:22:47.930
Now, over to Aaron,
who will talk to you more about Reminder.

00:22:52.670 --> 00:22:56.280
I'm Aaron, I'm an iOS Event Kit Engineer,
and I'm excited to talk to you

00:22:56.280 --> 00:22:58.990
about Reminder in Event Kit today.

00:23:00.110 --> 00:23:03.760
In iOS 5, we introduced this great new
Reminder app that helps you keep

00:23:03.760 --> 00:23:07.840
track of all the things you have
to do on both your iPhone and iPad.

00:23:07.960 --> 00:23:11.170
And then in the OS X Mountain Lion,
we brought it to the Mac,

00:23:11.180 --> 00:23:15.050
so your Reminders are really
useful because they're on

00:23:15.050 --> 00:23:17.080
all your Apple devices.

00:23:17.380 --> 00:23:20.080
But there's one place
they haven't yet been,

00:23:20.320 --> 00:23:21.900
and that's your apps.

00:23:22.030 --> 00:23:27.070
So now I'm excited to show
you how you can integrate

00:23:27.070 --> 00:23:29.010
Reminder into your own apps.

00:23:29.010 --> 00:23:33.690
And I'm looking forward to seeing
the interesting and awesome

00:23:33.710 --> 00:23:36.240
ways you use them in your apps.

00:23:37.330 --> 00:23:43.700
So, you may already be familiar with
something that uses Event Kit Reminders.

00:23:43.780 --> 00:23:44.990
That's Siri.

00:23:45.120 --> 00:23:47.840
Siri has been using Event Kit behind
the scenes to create

00:23:47.840 --> 00:23:49.930
Reminders when you ask it to.

00:23:50.180 --> 00:23:55.260
So, to go through this,
let's take an example of a task

00:23:55.410 --> 00:23:57.800
I've been putting off for a while.

00:23:57.890 --> 00:24:04.100
My cat has started smelling a little bad
lately and I need to give her a bath.

00:24:04.230 --> 00:24:08.440
And some of you know all too well why
I might have been putting off this task.

00:24:08.570 --> 00:24:13.570
So I'm going to ask Siri to
create a Reminder to help me.

00:24:13.670 --> 00:24:18.480
I want to ask Siri,
"Remind me to give my cat a bath."

00:24:18.630 --> 00:24:21.220
Up will pop something like this.

00:24:22.660 --> 00:24:23.600
A reminder.

00:24:23.770 --> 00:24:27.650
So, how would we create this
using Event Kit code?

00:24:28.320 --> 00:24:32.090
Well, we're going to start out just like
we were doing to create an EK event.

00:24:32.210 --> 00:24:34.560
That is, we need an EK Event Store.

00:24:34.790 --> 00:24:38.490
And because we want this to be
an Event Store for Reminders,

00:24:38.630 --> 00:24:43.970
we'll in it with access to Entity
Types and pass in EKEntityMaskReminder.

00:24:44.340 --> 00:24:49.080
Next, we need an EK Reminder object
to represent this Reminder.

00:24:49.180 --> 00:24:53.160
So we'll just create this using
Reminder with Event Store.

00:24:53.220 --> 00:24:55.560
Next, we're going to set a
couple of properties on it.

00:24:55.710 --> 00:25:00.100
First, the title, "Give My Cat a Bath,"
and then the Calendar.

00:25:00.160 --> 00:25:03.840
Now, when you create an event
or a Reminder through Siri,

00:25:03.900 --> 00:25:07.210
it'll use the default list
for new Reminders that you

00:25:07.300 --> 00:25:09.100
specified in your settings.

00:25:09.170 --> 00:25:14.570
So we're going to do the same here by
using default Calendar for new Reminders.

00:25:15.430 --> 00:25:19.970
Next, all we have to do is save that
Reminder using EK Events Store's

00:25:19.970 --> 00:25:21.570
SaveReminder method.

00:25:23.430 --> 00:25:27.720
Now, I might keep putting off this event,
or this task,

00:25:27.960 --> 00:25:30.660
if it never pops up and reminds me.

00:25:30.840 --> 00:25:34.140
So let's talk about how to
create a time-based Reminder.

00:25:34.290 --> 00:25:40.140
If I were asking Siri, I'd ask, "Siri,
remind me to give my cat a bath tomorrow

00:25:40.140 --> 00:25:43.940
at 4:00 p.m." Let's look at the code.

00:25:44.280 --> 00:25:47.140
To represent when I want
the alarm to fire,

00:25:47.170 --> 00:25:51.030
I'll use an EK alarm,
alarm with absolute date specifically.

00:25:51.220 --> 00:25:54.350
If you're already familiar
with creating alarms on events,

00:25:54.600 --> 00:25:56.600
it works very much the same way.

00:25:56.680 --> 00:25:59.720
Now,
you'll notice here that we kind of left

00:25:59.720 --> 00:26:03.350
out how to get this tomorrow at 4:00 p.m.

00:26:03.390 --> 00:26:06.700
date, but this bears more investigation.

00:26:07.800 --> 00:26:13.100
[Transcript missing]

00:26:13.580 --> 00:26:17.600
This is... How many of you
know what this number means?

00:26:17.740 --> 00:26:19.780
86,400.

00:26:19.910 --> 00:26:22.580
That's the number of seconds in a day,
right?

00:26:22.760 --> 00:26:24.300
Except when it's not.

00:26:24.430 --> 00:26:27.160
Thanks to our good old
friend Daylight Savings Time,

00:26:27.270 --> 00:26:31.230
this will be wrong
probably twice per year,

00:26:31.230 --> 00:26:35.630
but only probably in inconsistent
locales and at inconsistent

00:26:35.630 --> 00:26:37.730
times on inconsistent days.

00:26:37.870 --> 00:26:42.380
So, how on earth are we going to
get this right all the time?

00:26:42.490 --> 00:26:46.060
We're going to use NS Calendar,
like Matt mentioned earlier.

00:26:46.230 --> 00:26:48.830
Specifically,
we want to use the Gregorian

00:26:48.830 --> 00:26:52.590
Calendar because Event Kit for
Reminders at this time only

00:26:52.590 --> 00:26:54.860
supports the Gregorian Calendar.

00:26:54.990 --> 00:26:58.140
So, now that we've specified
this NS Calendar,

00:26:58.140 --> 00:27:00.770
we need to go from today to tomorrow.

00:27:00.920 --> 00:27:06.610
So, we'll use NSDate Components
and set its Day Component to 1.

00:27:08.680 --> 00:27:12.780
Next, we want to add one day
to the current date.

00:27:12.910 --> 00:27:15.460
If you're not familiar
with the NSDate API,

00:27:15.460 --> 00:27:18.700
NSDate is simply a wrapper
around an absolute time,

00:27:18.830 --> 00:27:23.940
and the date method returns an absolute
time for the current time right now.

00:27:24.090 --> 00:27:29.150
So, I'll use that calendar to get a new
NSDate for tomorrow by adding these

00:27:29.300 --> 00:27:32.530
one-day components to the current date.

00:27:32.700 --> 00:27:37.100
Now that I have the NSDate for tomorrow,
what I need to do is get the

00:27:37.100 --> 00:27:41.590
components out of that so that
I can set them to a specific time.

00:27:41.760 --> 00:27:45.770
So I don't care about the hours, minutes,
and seconds yet.

00:27:45.990 --> 00:27:51.710
I just want to get the year and
the month and the day for tomorrow.

00:27:52.180 --> 00:27:56.720
We're going to put in an era just
for future forward compatibility.

00:27:57.140 --> 00:28:00.610
Then, so you see we have the
components from that date,

00:28:00.610 --> 00:28:02.390
and that'll give us,
and as a date components

00:28:02.390 --> 00:28:05.680
for tomorrow at 4:00 PM,
sends the time.

00:28:05.700 --> 00:28:08.840
Then we want to specifically
set the hour to 16,

00:28:08.850 --> 00:28:12.420
this is 24 hour time we're dealing with,
and then we'll set the

00:28:12.420 --> 00:28:14.370
minute and second to zero.

00:28:14.680 --> 00:28:21.540
And finally, one last thing,
because the EK Alarm API wants an NSDate,

00:28:21.540 --> 00:28:25.650
not NSDate components,
we're going to get an NSDate back

00:28:25.650 --> 00:28:31.170
from those components using
NSCalendar's dateFromComponents method.

00:28:31.390 --> 00:28:36.600
All right, so we're done talking about
how to get this crazy date,

00:28:36.640 --> 00:28:41.080
but it'll be right in all
locales and all time zones.

00:28:42.130 --> 00:28:46.300
Again, we're going to create this
EK alarm with an absolute date,

00:28:46.420 --> 00:28:49.000
and then we're going to add
that alarm to the Reminder.

00:28:49.250 --> 00:28:52.000
Before we save though,
there's one last step.

00:28:52.000 --> 00:28:54.490
We have to set the due
date components as well.

00:28:54.680 --> 00:28:58.230
This helps it show up as
overdue after the Reminder has

00:28:58.230 --> 00:29:00.390
fired in the Reminder's app.

00:29:00.590 --> 00:29:04.450
So, we're going to set the due date
components property to those

00:29:04.450 --> 00:29:09.500
NSDate components that NSCalendar
helped us calculate just a second ago.

00:29:09.890 --> 00:29:12.500
Finally, we'll save that Reminder.

00:29:12.790 --> 00:29:17.190
Now, let's talk about
location-based Reminders.

00:29:17.440 --> 00:29:21.300
We all know that giving a cat a bath
can be very hazardous to your health.

00:29:21.300 --> 00:29:25.780
So,
I'm going to want a little bit of armor.

00:29:26.240 --> 00:29:30.220
Specifically, I want to ask Siri,
"Remind me to pick up a

00:29:30.220 --> 00:29:34.870
chainmail suit when I leave work,
so those claws of fury don't

00:29:34.870 --> 00:29:39.170
leave a flesh wound." So,
how do we create a Reminder

00:29:39.170 --> 00:29:41.040
that looks like that?

00:29:41.900 --> 00:29:44.800
We're going to use an
EK structure location object.

00:29:44.850 --> 00:29:48.800
This is new in the new Reminder's API.

00:29:48.800 --> 00:29:51.800
This will create using
location with title.

00:29:52.030 --> 00:29:55.350
And the title here is something
that you use to show your

00:29:55.350 --> 00:29:58.750
users what this location is.

00:29:59.410 --> 00:30:04.790
Next,
we need to show where on earth work is.

00:30:04.910 --> 00:30:08.780
So we're going to use the
CLLocation class for that.

00:30:08.890 --> 00:30:12.730
Now, normally you might want to use
CL Geocoder or some other core

00:30:12.730 --> 00:30:14.800
location APIs to get this for you.

00:30:14.800 --> 00:30:18.720
But I just happen to know the location
for work off the top of my head.

00:30:18.800 --> 00:30:23.320
So I'm going to create this
CLLocation object using a latitude

00:30:23.320 --> 00:30:25.800
and longitude specifically.

00:30:25.940 --> 00:30:31.970
Then I need to set that on the structure
location as the geolocation property.

00:30:33.480 --> 00:30:36.090
Next, this is still an alarm after all.

00:30:36.100 --> 00:30:37.500
It's still popping up at you.

00:30:37.500 --> 00:30:41.900
So I'm going to create an
EK alarm just using alloc

00:30:41.900 --> 00:30:44.020
init without any date or time.

00:30:44.270 --> 00:30:46.470
and next I'm going to set
a couple properties on it.

00:30:46.760 --> 00:30:49.440
First, the structure location
to what we just created,

00:30:49.460 --> 00:30:52.520
and then because I want this to
be when I leave work as opposed

00:30:52.520 --> 00:30:56.150
to when I arrive at work,
I'm going to set the proximity

00:30:56.150 --> 00:30:59.680
property to EK_ALARM_PROXIMITY_LEAVE.

00:31:00.720 --> 00:31:03.770
Finally, as before,
I'm going to add this alarm to the

00:31:03.830 --> 00:31:06.800
Reminder and save the Reminder.

00:31:07.870 --> 00:31:08.800
All right.

00:31:08.800 --> 00:31:13.900
Now, what if my poor cat gets
dirty on a regular basis?

00:31:14.030 --> 00:31:18.270
How do I have it remind me to
give my cat a bath every month,

00:31:18.310 --> 00:31:19.590
for example?

00:31:19.710 --> 00:31:23.900
If I were asking Siri this,
she'd pop up something like that.

00:31:23.970 --> 00:31:26.340
In code, it's easy.

00:31:26.580 --> 00:31:29.960
We'll use an EK recurrence rule
to represent how it repeats.

00:31:30.230 --> 00:31:32.920
If you're already familiar
with Event Kit for Events,

00:31:32.940 --> 00:31:34.550
this should be old hat to you.

00:31:34.650 --> 00:31:38.410
So, we'll create this recurrence rule
with a recurrence frequency of

00:31:38.410 --> 00:31:42.840
monthly and an interval of one
to specify that it's every month.

00:31:42.940 --> 00:31:46.320
Then, we're going to add this
recurrence rule to the Reminder.

00:31:46.380 --> 00:31:48.800
And before we save,
there's one more step.

00:31:48.840 --> 00:31:53.420
We have to set the start date
components for when it starts repeating.

00:31:53.460 --> 00:31:55.810
Now,
we already talked in depth about how to

00:31:55.890 --> 00:32:00.040
get the NSDate components for any time,
so I'll just use the

00:32:00.040 --> 00:32:03.660
NSDate components for right now.

00:32:03.740 --> 00:32:04.460
Finally, we're going to add a new
rule to the Reminder.

00:32:04.460 --> 00:32:05.400
to save this reminder.

00:32:07.740 --> 00:32:11.700
Now, there is a slight difference
in how Events and Reminders

00:32:11.700 --> 00:32:13.600
that repeat regenerate.

00:32:13.600 --> 00:32:16.620
If you look in your Calendar,
you'll see repeating

00:32:17.560 --> 00:32:19.300
Events generating out indefinitely.

00:32:19.490 --> 00:32:21.400
However,
if you look in the Reminders app,

00:32:21.400 --> 00:32:24.030
you don't see a million
Reminders of the same thing.

00:32:24.270 --> 00:32:28.500
You only see the next one that's not due,
that hasn't been completed.

00:32:28.630 --> 00:32:32.190
So, once you check that one
completes in the Reminders app,

00:32:32.270 --> 00:32:35.480
that's when it will
generate the next instance.

00:32:35.670 --> 00:32:40.430
Speaking of checking reminders complete,
let's talk about how to do that.

00:32:41.180 --> 00:32:43.740
In the Reminders app,
if I were to check a complete,

00:32:43.810 --> 00:32:47.400
it would go from looking
like that to that.

00:32:47.460 --> 00:32:49.690
And that's what we call
the completed card.

00:32:49.770 --> 00:32:51.860
So, how do we do that in code?

00:32:51.970 --> 00:32:53.100
Simple.

00:32:53.190 --> 00:32:58.490
All we have to do is set the completed
property and then save the reminder.

00:33:01.460 --> 00:33:04.990
Now, the completion date,
which you'll see right there,

00:33:04.990 --> 00:33:09.230
is when you completed
an event or a reminder.

00:33:09.280 --> 00:33:13.040
It's automatically set to the current
time when you set this completed

00:33:13.130 --> 00:33:15.800
property to "yes" and save the reminder.

00:33:15.850 --> 00:33:20.420
But what if you were importing some
old data and some of the reminders in

00:33:20.560 --> 00:33:24.160
that old data were already completed
at a specific time that you know?

00:33:24.210 --> 00:33:27.560
Well,
to set that arbitrary time in the past,

00:33:27.560 --> 00:33:31.860
we would use the completion
date property of EKReminder.

00:33:33.250 --> 00:33:36.400
All right, so that's all there is to it.

00:33:36.400 --> 00:33:38.900
We've gone over how to create
all sorts of Reminders,

00:33:38.900 --> 00:33:43.690
including time-based Reminders that
fire at a specific time in the future.

00:33:43.790 --> 00:33:46.250
We talked about how to use

00:33:46.430 --> 00:33:51.100
location-based Reminders
using EK Structured Location.

00:33:51.170 --> 00:33:56.300
And we talked about how to make Reminders
that repeat using EK Recurrence Rule.

00:33:56.490 --> 00:34:01.850
And finally,
we all know how to mark a Reminder done.

00:34:02.100 --> 00:34:04.110
So that's great,
but what if I have an existing

00:34:04.200 --> 00:34:06.340
app that uses Reminder?

00:34:06.410 --> 00:34:10.190
I'd like to invite up
Scott to talk about that.

00:34:13.800 --> 00:36:55.800
[Transcript missing]

00:36:56.030 --> 00:36:58.510
Next, we're going to set the title to
the name of the ingredient and

00:36:58.580 --> 00:37:01.040
the notes we'll set to the amount.

00:37:01.130 --> 00:37:03.200
And then finally,
we're going to save each Reminder.

00:37:03.410 --> 00:37:05.360
Now, the important thing here,
and we haven't really

00:37:05.370 --> 00:37:08.340
talked about this too much,
is that in this Save Reminder call,

00:37:08.650 --> 00:37:11.290
we're going to set
Commit right here to No.

00:37:11.540 --> 00:37:13.870
And the reason we're doing that is
if you were to set Commit to Yes,

00:37:14.000 --> 00:37:16.860
we'd have a database save every
single Reminder that you're creating.

00:37:16.860 --> 00:37:19.400
So if you had 50 ingredients,
there'd be 50 database saves.

00:37:19.410 --> 00:37:20.450
That'd be kind of slow.

00:37:20.460 --> 00:37:22.480
So we're just going to say Commit No.

00:37:22.480 --> 00:37:25.880
And then at the very end here,
we're going to commit the whole thing.

00:37:25.900 --> 00:37:27.280
And then we're going to call Event Store.

00:37:27.360 --> 00:37:30.190
So what that'll do is that'll then
actually do a database save of all those

00:37:30.200 --> 00:37:32.400
Reminders that you didn't commit before.

00:37:32.450 --> 00:37:33.900
So it's just a little optimization.

00:37:34.130 --> 00:37:37.650
And then I just added a little
UI alert view in this case that

00:37:37.650 --> 00:37:41.690
will put up an alert saying,
hey, your Reminder was created.

00:37:42.200 --> 00:37:49.270
So let me show you an example
of what that looks like here.

00:37:49.270 --> 00:37:49.270
And so here's my Recipes app.

00:37:49.880 --> 00:37:53.110
and these are all my recipes,
and if I pick Chocolate Cake,

00:37:53.110 --> 00:37:57.340
I can scroll down and here's my
new Create Shopping Reminders,

00:37:57.400 --> 00:37:59.330
and it's right after my
whole list of ingredients,

00:37:59.550 --> 00:38:01.700
so I'm gonna tap this.

00:38:01.780 --> 00:38:07.030
And it gets my alert up that says
Shopping Reminders have been added.

00:38:07.060 --> 00:38:08.990
So if I say OK here,

00:38:09.380 --> 00:38:12.390
If I go to the Reminder app,
here's my regular Reminder list

00:38:12.390 --> 00:38:16.300
and there's now Chocolate Cake,
which was just created.

00:38:16.300 --> 00:38:19.290
And there's my Chocolate Cake.

00:38:19.410 --> 00:38:21.900
So that's the basic demo.

00:38:28.030 --> 00:38:32.650
So next I wanted to talk about
something that's new in iOS 6,

00:38:32.720 --> 00:38:35.580
which is Event Kit Data Isolation.

00:38:35.600 --> 00:38:37.460
So exactly what is it?

00:38:37.660 --> 00:38:41.220
Well, this is what's under Privacy
and Settings in iOS 6.

00:38:41.300 --> 00:38:43.740
We've talked a lot about
this in other sessions.

00:38:43.740 --> 00:38:48.210
But the point here is that your
apps now have to ask for permission

00:38:48.210 --> 00:38:50.630
to get to Reminders and Events.

00:38:50.780 --> 00:38:54.970
So when you want access to it,
we're going to ask the users,

00:38:55.070 --> 00:38:57.900
just like you were used to
with location in the past.

00:38:58.610 --> 00:39:02.410
So they're prompted whenever your
EK Event Store is instantiated.

00:39:02.630 --> 00:39:05.730
Now this is really important to
remember because we want you to keep

00:39:05.800 --> 00:39:08.730
your EK Event Store around a lot,
but we don't want you to create

00:39:08.820 --> 00:39:11.420
it right at the beginning of
your app unless it's needed right

00:39:11.420 --> 00:39:12.900
at the beginning of your app.

00:39:13.020 --> 00:39:16.560
So the reason for this is that,
like in the Recipes application,

00:39:16.560 --> 00:39:19.430
we don't want to ask to access
Reminder when they're just

00:39:19.430 --> 00:39:20.670
looking at their recipes.

00:39:20.860 --> 00:39:25.200
We only want to ask them when they
actually tap on the Make Shopping List.

00:39:25.240 --> 00:39:28.040
And that's because they don't
want necessarily to say,

00:39:28.040 --> 00:39:30.000
"Yeah, I want to look at my recipe.

00:39:30.000 --> 00:39:33.460
Why do you need Reminder?" They want it
to be at the time they're doing something

00:39:33.460 --> 00:39:34.890
that actually needs access to Reminder.

00:39:35.110 --> 00:39:37.730
Now if you're writing something
that's reading Reminder

00:39:37.730 --> 00:39:40.720
right away and doing stuff,
then create your EK Event Store right

00:39:40.720 --> 00:39:42.030
away and you'll ask the user.

00:39:42.370 --> 00:39:45.640
Now this will only ask the
first time they ask for it and

00:39:45.640 --> 00:39:49.440
then they'll decide yes or no,
and then the next time your app

00:39:49.440 --> 00:39:51.490
runs and you won't ask again.

00:39:52.230 --> 00:39:57.160
Now the important thing is when we
do ask that your code is not blocked.

00:39:57.160 --> 00:40:00.020
This is an asynchronous call
that brings up this alert view.

00:40:00.020 --> 00:40:03.670
Now it's important because you
may have written apps in the

00:40:03.670 --> 00:40:06.440
past that just go ahead and do
stuff if you're doing events.

00:40:06.440 --> 00:40:08.430
If you're doing reminders, it's all new.

00:40:08.620 --> 00:40:10.170
So you should do this correctly.

00:40:10.250 --> 00:40:13.440
But if your app exists right now
and you just go and do things,

00:40:13.440 --> 00:40:17.310
you may get errors like if you try to
save things before the user has said yes,

00:40:17.310 --> 00:40:19.510
you have access,
you might actually get errors back

00:40:19.630 --> 00:40:22.430
saying you don't have access to do this.

00:40:22.450 --> 00:40:25.790
So we'll show you some tricks
on how to deal with this.

00:40:26.550 --> 00:40:33.840
Then what happens is, while your app is,
while the asynchronous dialogue is up,

00:40:33.990 --> 00:40:38.200
your app will eventually get an
Event Store Change Notification,

00:40:38.220 --> 00:40:40.840
and then you'll be able to
check and see what did they say.

00:40:40.840 --> 00:40:44.190
Did they say, "Yes, you're allowed," or,
"No, you're not allowed."

00:40:45.520 --> 00:40:48.640
And then what's really important
is this usage description.

00:40:48.640 --> 00:40:50.630
Now that's what's
highlighted in yellow here,

00:40:50.670 --> 00:40:53.060
and that's what you're going
to be automatically shown to

00:40:53.060 --> 00:40:57.100
the user saying why you need
access to Events or Reminder.

00:40:57.230 --> 00:40:59.880
And it's really important to be
specific here and cover any of

00:40:59.880 --> 00:41:01.600
the cases that your app might use.

00:41:01.600 --> 00:41:03.460
You're only going to be asked
once for your whole app,

00:41:03.550 --> 00:41:05.700
so if you have multiple places
you're using Reminder or

00:41:05.700 --> 00:41:08.600
multiple places using Events,
make sure it covers those cases.

00:41:08.690 --> 00:41:11.060
But try to give something
clear that people,

00:41:11.060 --> 00:41:14.770
that everyday people,
not just developers, will understand.

00:41:15.430 --> 00:41:17.370
So let me show you how we do this.

00:41:17.710 --> 00:41:24.300
And if we go back to,
I have some code way up here.

00:41:24.300 --> 00:41:27.390
So I'll comment out
this Make Shopping List.

00:41:27.810 --> 00:41:32.940
and I'll show you the code we wrote
to actually make the shopping list,

00:41:33.120 --> 00:41:38.700
this time dealing with data isolation.

00:41:40.020 --> 00:41:41.850
You might recognize
the beginning of this.

00:41:42.010 --> 00:41:43.500
We create the Event Store.

00:41:43.670 --> 00:41:44.900
Same thing as what we did before.

00:41:44.900 --> 00:41:46.740
And again, we're creating it when
they hit the button.

00:41:46.740 --> 00:41:52.120
That's the important thing is that
we'll be asked when we hit the button.

00:41:52.230 --> 00:41:54.150
and then we actually are
going to register for the

00:41:54.150 --> 00:41:56.780
Event Store Change Notification,
which will call this

00:41:56.910 --> 00:41:58.660
function Event Store Changed.

00:41:59.270 --> 00:42:01.860
Then we're going to check
our authorization status.

00:42:01.930 --> 00:42:08.460
Now, the main thing here with checking
authorization status is that we want to

00:42:08.460 --> 00:42:10.930
see if they've already been authorized,
they've already been

00:42:10.930 --> 00:42:14.100
denied or restricted,
and also if they're pending.

00:42:14.100 --> 00:42:15.990
And pending is that asynchronous
call I talked about.

00:42:16.090 --> 00:42:19.650
So if we're authorized,
we're just going to go ahead and create

00:42:19.650 --> 00:42:22.100
the Reminders just like we did before.

00:42:22.120 --> 00:42:25.290
If they're denied or restricted,
we're going to put up an

00:42:25.290 --> 00:42:28.130
alert that we have created,
that you will create,

00:42:28.240 --> 00:42:32.090
or however you want to deal with
them being denied or restricted.

00:42:32.100 --> 00:42:35.320
And in this case,
we put up an alert that says you're not

00:42:35.320 --> 00:42:39.170
allowed to use this and to use Reminders,
and you can go change it in

00:42:39.250 --> 00:42:41.090
your settings if you want to.

00:42:41.100 --> 00:42:43.660
If they're restricted,
that could be someone turned on

00:42:43.750 --> 00:42:47.220
restrictions that doesn't allow us to
even ask them because you're not allowed

00:42:47.340 --> 00:42:49.100
to change your access to Reminders.

00:42:49.100 --> 00:42:52.100
And then if they're not determined,
that's the asynchronous call.

00:42:52.100 --> 00:42:54.360
So in this case,
I added a flag to this view controller

00:42:54.360 --> 00:42:58.100
saying we're pending authorization,
and I'm going to set that flag,

00:42:58.100 --> 00:43:02.100
and then I'm not going to do anything
until we get our notification back.

00:43:02.100 --> 00:43:04.630
So let me show you that notification.

00:43:05.800 --> 00:43:09.330
We don't change the code
at all for Create Reminder,

00:43:09.550 --> 00:43:11.870
same code as before.

00:43:12.390 --> 00:43:15.270
and here's our event
store changed function.

00:43:15.590 --> 00:43:19.920
And what we're going to do is if we were
setting this pending authorization flag,

00:43:20.190 --> 00:43:22.730
then we're going to go in and we're
going to look and see what our

00:43:22.730 --> 00:43:24.150
current authorization status is.

00:43:24.180 --> 00:43:26.980
Most likely they've changed
the authorization status.

00:43:27.150 --> 00:43:31.110
So if it's now determined,
we're going to go and we're going to say,

00:43:31.220 --> 00:43:32.280
okay, are we authorized?

00:43:32.470 --> 00:43:34.500
If we're authorized, we create Reminder.

00:43:34.500 --> 00:43:36.580
If we're not authorized,
we're going to present

00:43:36.650 --> 00:43:38.300
an alert that says,
hey, you're denied,

00:43:38.300 --> 00:43:40.800
you're not allowed access to Reminder.

00:43:40.800 --> 00:43:43.500
Now there's one other
thing I didn't show,

00:43:43.500 --> 00:43:47.310
which is here inside the info P list,
let's see if we can --

00:43:47.310 --> 00:43:51.110
it's kind of small here,
but if you can see down here,

00:43:51.110 --> 00:43:54.490
there's this Reminder's
usage description.

00:43:54.490 --> 00:43:58.700
And there's also other ones
for contacts usage description

00:43:58.700 --> 00:44:00.950
and calendars and location.

00:44:00.950 --> 00:44:05.550
So what you do is you set in here that
user presented string that says why

00:44:05.560 --> 00:44:07.420
you need access to your Reminders.

00:44:07.420 --> 00:44:09.990
And you can -- we just said
create new shopping list

00:44:10.170 --> 00:44:12.020
for recipe ingredients here.

00:44:12.020 --> 00:44:13.830
So that's where you're going to
set it for your whole application.

00:44:13.830 --> 00:44:15.990
So you might have different
-- you might use locations,

00:44:16.080 --> 00:44:18.220
you might have one for location in there.

00:44:18.220 --> 00:44:19.540
And then we can just build and run this.

00:44:19.540 --> 00:44:22.380
So let me go to my phone here.

00:44:22.380 --> 00:44:26.300
So I actually am running
the version that knows about

00:44:26.400 --> 00:44:29.410
restrictions or knows about privacy.

00:44:29.460 --> 00:44:33.950
So let me go to settings and show
you how this shows up in settings.

00:44:33.950 --> 00:44:36.900
So we go inside of privacy.

00:44:37.650 --> 00:44:40.830
and we can go to Reminder and
you'll see that Recipes has

00:44:40.830 --> 00:44:43.110
already been given access.

00:44:43.230 --> 00:44:48.140
So what I'm going to do is I'm going
to turn off Recipes and no longer allow

00:44:48.140 --> 00:44:50.060
access and you'll see how this works.

00:44:50.080 --> 00:44:53.390
So I'm going to go back to Recipes.

00:44:53.500 --> 00:45:54.600
[Transcript missing]

00:45:55.330 --> 00:46:00.190
And now,
if I launch the Recipes app again,

00:46:00.190 --> 00:46:03.640
and let's try the crepes.

00:46:03.840 --> 00:46:06.940
I scroll down here,
I'll say Create Shopping List.

00:46:07.000 --> 00:46:10.820
And now this is a system alert
that comes up with our usage

00:46:10.820 --> 00:46:12.390
string right here in here.

00:46:12.480 --> 00:46:14.810
So it says create new shopping
list for recipe ingredients,

00:46:14.960 --> 00:46:16.200
and I can allow or not allow.

00:46:16.200 --> 00:46:19.610
So if I say allow,
what's happening behind the scenes is

00:46:19.610 --> 00:46:24.800
we're talking to the system service that
is going to allow us to create Reminders,

00:46:24.890 --> 00:46:27.700
and then we get our message back.

00:46:27.820 --> 00:46:29.700
So we can see that it actually worked.

00:46:29.720 --> 00:46:33.360
And if I go to the Reminders app,
we'll see that I actually

00:46:33.370 --> 00:46:37.290
have now grapes right there.

00:46:37.310 --> 00:46:38.050
And that's it.

00:46:38.140 --> 00:46:42.000
And that's everything.

00:46:43.400 --> 00:49:57.200
[Transcript missing]