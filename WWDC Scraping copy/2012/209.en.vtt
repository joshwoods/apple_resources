WEBVTT

00:00:10.130 --> 00:00:10.810
Good afternoon.

00:00:11.000 --> 00:00:11.690
I'm Eric Krugler.

00:00:11.720 --> 00:00:12.380
Oh, thank you.

00:00:12.380 --> 00:00:13.140
Please, please.

00:00:15.800 --> 00:00:19.700
I'm Eric Krugler with iCloud Engineering,
and we're going to be talking

00:00:19.700 --> 00:00:22.800
about the iCloud Storage Overview
with you for the next hour,

00:00:22.800 --> 00:00:23.990
hopefully a little less.

00:00:24.000 --> 00:00:28.120
And I'm going to give
you an update on iCloud.

00:00:28.730 --> 00:00:31.000
So a year ago at WWDC,
we announced iCloud,

00:00:31.000 --> 00:00:34.200
a way to get all of your
content on all of your devices.

00:00:34.310 --> 00:00:36.340
And a lot has happened in the past year.

00:00:36.470 --> 00:00:37.460
We released a beta.

00:00:37.710 --> 00:00:40.000
We got great feedback from developers.

00:00:40.000 --> 00:00:42.000
We incorporated that feedback
back into the product.

00:00:42.060 --> 00:00:46.940
And in October of last year,
we launched iCloud along with iOS 5.

00:00:46.940 --> 00:00:50.990
And the adoption has been phenomenal.

00:00:51.910 --> 00:00:55.940
Over 125 million accounts
have been created for iCloud.

00:00:55.940 --> 00:01:00.870
And the reason for this is because iCloud
is deeply integrated into iOS and OS X.

00:01:00.880 --> 00:01:03.380
And it starts with the setup experience.

00:01:03.420 --> 00:01:07.300
Any new user of an iOS device,
an iPhone or an iPad,

00:01:07.300 --> 00:01:11.000
the very first thing they're going to
see is setting up their iCloud account.

00:01:11.000 --> 00:01:13.660
And they can either use
an existing Apple ID,

00:01:13.660 --> 00:01:15.880
or they can create one right in the flow.

00:01:15.880 --> 00:01:20.990
And with OS X Mountain Lion,
it gets even better, as that same setup

00:01:20.990 --> 00:01:22.580
experience comes to the Mac.

00:01:22.660 --> 00:01:25.970
So what this means for you
developers is that there's over

00:01:25.970 --> 00:01:30.620
125 million accounts ready to use
your iCloud-enabled application.

00:01:30.620 --> 00:01:32.060
So how do you use iCloud?

00:01:32.060 --> 00:01:34.400
Well, you use the iCloud Storage API.

00:01:34.400 --> 00:01:39.740
And this API is deeply
integrated into iOS and OS X.

00:01:39.740 --> 00:01:43.700
It runs alongside your application so
that updates can happen automatically,

00:01:43.700 --> 00:01:45.790
even when your application isn't running.

00:01:45.820 --> 00:01:49.700
And iCloud Storage really
has three different types.

00:01:51.530 --> 00:01:54.560
The first is the Key-Value Storage.

00:01:54.640 --> 00:01:59.560
This is a brain-dead simple API that
lets you store things like preferences,

00:01:59.800 --> 00:02:01.770
configuration, game state.

00:02:01.910 --> 00:02:04.240
It is so simple,
we actually don't have another

00:02:04.270 --> 00:02:07.220
session talking about it because
you can just go and do it.

00:02:07.220 --> 00:02:11.450
So this is an API you really
should seriously consider using

00:02:11.450 --> 00:02:13.700
in all of your applications.

00:02:14.080 --> 00:02:17.240
The second is the Document Storage.

00:02:17.400 --> 00:02:20.830
This provides a file system in the
cloud scoped to your application

00:02:20.830 --> 00:02:24.480
that allows you to store files
and packages and folders just like

00:02:24.480 --> 00:02:27.350
you would on a local file system,
but it goes to the cloud and

00:02:27.350 --> 00:02:28.860
it goes to all of your devices.

00:02:28.860 --> 00:02:31.660
It's really ideally suited
for productivity apps,

00:02:31.770 --> 00:02:34.370
you know, like iWork,
but you can pretty much do

00:02:34.370 --> 00:02:36.400
whatever you want with this API.

00:02:37.460 --> 00:02:38.820
And finally, Core Data.

00:02:38.820 --> 00:02:43.040
The existing Core Data API has
been extended to use iCloud so that

00:02:43.360 --> 00:02:46.850
you can take these database-like
applications that you use Core Data to

00:02:46.850 --> 00:02:49.880
create and get them in the cloud
and across various devices.

00:02:52.930 --> 00:02:55.110
So who's using iCloud?

00:02:55.230 --> 00:02:57.630
Well, it turns out there's thousands
of applications and app

00:02:57.720 --> 00:02:59.060
developers using iCloud today.

00:02:59.060 --> 00:03:02.490
And here's an example of some
of these great applications.

00:03:02.490 --> 00:03:05.250
Notice the breadth of the
apps represented here.

00:03:05.250 --> 00:03:09.240
From Infinity Blade 2,
which lets you start a game on your

00:03:09.480 --> 00:03:14.690
iPhone and finish it on your iPad,
to Sketchbook Pro from Autodesk that lets

00:03:14.690 --> 00:03:18.980
you conceive of an idea on your phone,
develop it on your Mac,

00:03:18.980 --> 00:03:21.770
and then present it on your iPad.

00:03:21.780 --> 00:03:26.200
And developers aren't the
only ones using iCloud.

00:03:26.530 --> 00:03:29.560
Apple is also using iCloud
across its applications.

00:03:29.560 --> 00:03:34.860
The latest mail application for iOS
6 and for OS X Mountain Lion now

00:03:35.250 --> 00:03:39.520
takes its VIP list,
its recent senders,

00:03:39.650 --> 00:03:43.240
and its preferences and makes
sure all of those are available

00:03:43.240 --> 00:03:44.340
on all of your devices.

00:03:44.340 --> 00:03:47.400
So the next time that you want
to type ahead and send an email

00:03:47.500 --> 00:03:50.460
to someone on your iPhone that
you've never actually sent before,

00:03:50.460 --> 00:03:52.780
it'll actually show up now
because it actually was on your

00:03:52.780 --> 00:03:54.230
Mac and it made it to your iPhone.

00:03:55.120 --> 00:03:57.880
This kind of seamless integration
is enabled by using iCloud.

00:03:57.880 --> 00:04:02.100
Simply put, iCloud is integrated into
everything that we do.

00:04:03.480 --> 00:04:04.770
So what does iCloud do for you?

00:04:04.910 --> 00:04:07.070
Well, you know,
here's a checklist for you to consider.

00:04:07.320 --> 00:04:09.430
The first is account setup.

00:04:09.590 --> 00:04:13.040
125 million accounts ready
to use your application.

00:04:13.110 --> 00:04:16.620
This means you don't have to educate your
customers on how to set up an account

00:04:17.050 --> 00:04:18.900
before they can actually use your app.

00:04:18.940 --> 00:04:21.360
All they need to do is go to the store,
download your app,

00:04:21.360 --> 00:04:24.260
and they can start using it immediately.

00:04:24.810 --> 00:04:25.630
Client APIs.

00:04:25.890 --> 00:04:30.690
The iCloud Storage API is deeply
integrated into OS X and into iOS.

00:04:30.940 --> 00:04:34.110
It runs alongside your application,
so updates can happen automatically

00:04:34.270 --> 00:04:35.740
even when your app isn't running.

00:04:35.970 --> 00:04:39.610
And this is something that you
just simply cannot do if you're

00:04:39.610 --> 00:04:43.320
using a third-party SDK or
library in your application.

00:04:44.030 --> 00:04:46.900
and we've written a lot of
server code on your behalf.

00:04:46.970 --> 00:04:50.900
This includes things like load balancing,
replication, disaster recovery.

00:04:50.900 --> 00:04:52.830
Believe me,
there's a lot of code behind iCloud,

00:04:52.950 --> 00:04:55.900
and this means you don't
have to do this type of work.

00:04:55.900 --> 00:04:57.790
And operations.

00:04:58.110 --> 00:05:04.580
7 by 24 support on Christmas Day even,
especially Christmas Day.

00:05:04.920 --> 00:05:08.840
We get a lot of people on
Christmas Day using our applications.

00:05:09.000 --> 00:05:13.720
So what this means for you is
stress-free iCloud Storage.

00:05:15.600 --> 00:05:18.100
So all you have to do is
use the iCloud Storage API.

00:05:18.100 --> 00:05:23.220
This allows you to focus on building
amazing iOS and OS X applications

00:05:23.220 --> 00:05:24.940
with no server code required.

00:05:24.940 --> 00:05:27.610
Now,
if you happen to know some friends who

00:05:28.000 --> 00:05:31.040
like writing server code that scales
to hundreds of millions of users,

00:05:31.040 --> 00:05:32.190
send them our way.

00:05:32.200 --> 00:05:32.910
We're hiring.

00:05:32.920 --> 00:05:36.470
And now, I'd like to turn it
over to Dallas De Atley,

00:05:36.470 --> 00:05:39.460
who will take you through
all that's new in iOS and

00:05:39.460 --> 00:05:41.640
OS X with the iCloud Storage API.

00:05:41.640 --> 00:05:42.320
Thank you.

00:05:42.350 --> 00:05:43.380
Hi, everyone.

00:05:43.630 --> 00:05:45.940
My name is Dallas,
and for the rest of the session,

00:05:45.940 --> 00:05:48.490
we're going to talk about
how you can take advantage of

00:05:48.530 --> 00:05:50.160
iCloud in your application.

00:05:51.770 --> 00:05:53.740
So to give you an idea of some of the
things we're going to talk about today,

00:05:53.740 --> 00:05:57.040
we're going to talk about how
iCloud Storage actually works,

00:05:57.040 --> 00:06:00.280
talk about how you can use
it in your application.

00:06:00.280 --> 00:06:03.720
We're going to go through examples
of some of the best practices for

00:06:03.730 --> 00:06:05.980
interacting with iCloud with your app.

00:06:06.030 --> 00:06:09.080
And we're going to talk about some of
the debugging tools that you can take

00:06:09.080 --> 00:06:12.220
advantage of when you're developing
your application with iCloud.

00:06:12.220 --> 00:06:15.820
iCloud is really implemented
under the hood by two services.

00:06:15.820 --> 00:06:18.480
There's the Key-Value Storage,
and there's what the user

00:06:18.480 --> 00:06:19.950
sees as documents and data.

00:06:20.320 --> 00:06:23.900
As Eric mentioned previously,
you really think of the applications

00:06:23.920 --> 00:06:26.680
in terms of three different
buckets that they might fall into.

00:06:26.680 --> 00:06:30.860
KVS clients, documents,
and core data applications.

00:06:30.880 --> 00:06:34.000
All of them are supported by
the services under the hood.

00:06:35.790 --> 00:06:38.840
Let's talk a little bit
about Key-Value Storage.

00:06:38.860 --> 00:06:44.120
We provide a single API that's
available on both iOS and OS X called

00:06:44.120 --> 00:06:46.190
NS Ubiquitous Key-Value Store.

00:06:46.270 --> 00:06:52.200
So your application can adopt this API to
put simple plist values into iCloud.

00:06:52.200 --> 00:06:55.200
And when you use this API,
what's happening under the hood

00:06:55.200 --> 00:06:59.180
is it's talking to a service
that's running on the device.

00:06:59.650 --> 00:07:03.500
and is responsible for interacting
with iCloud on your behalf.

00:07:03.580 --> 00:07:07.000
So your application doesn't have to
do anything with the iCloud account.

00:07:07.000 --> 00:07:09.500
It doesn't have to do anything
about configuring the network.

00:07:09.500 --> 00:07:13.790
It doesn't have to worry about handing
off between Wi-Fi and cellular.

00:07:13.920 --> 00:07:16.190
The services under the hood
are doing that on your behalf.

00:07:16.320 --> 00:07:20.290
All you have to do is
interact with that one API.

00:07:20.920 --> 00:07:24.010
In the case of document storage,
it's similar, but we have a lot more

00:07:24.100 --> 00:07:26.400
sophisticated APIs for your
application to interact with.

00:07:26.460 --> 00:07:29.400
At a high level,
we have a set of APIs for

00:07:29.400 --> 00:07:31.180
document-based applications.

00:07:31.180 --> 00:07:33.260
So on iOS, there's UI Document.

00:07:33.260 --> 00:07:37.340
On OS X,
NS Document is now fully iCloud-aware.

00:07:37.340 --> 00:07:41.860
UI Managed Document is a concrete
subclass of UI Document for

00:07:41.950 --> 00:07:43.130
your core data applications.

00:07:43.140 --> 00:07:48.340
And applications can also directly
manage their files using the lower-level

00:07:48.350 --> 00:07:50.530
file management APIs we provide as well.

00:07:50.900 --> 00:07:53.660
But all of these APIs are
fully iCloud-aware,

00:07:53.660 --> 00:07:56.680
and they're fundamentally
talking to a document service,

00:07:56.680 --> 00:08:01.050
which is also responsible for moving
data up to the cloud and then reflecting

00:08:01.050 --> 00:08:02.340
it down to all the other devices.

00:08:02.340 --> 00:08:04.570
So again,
your application doesn't have to

00:08:04.600 --> 00:08:08.160
worry about any of the nitty-gritty
details of talking to iCloud.

00:08:08.160 --> 00:08:11.280
You just need to interact
with the APIs on the device.

00:08:13.400 --> 00:08:15.550
So let's talk a little bit about
what it takes to actually enable

00:08:15.560 --> 00:08:18.400
iCloud support in your project.

00:08:18.530 --> 00:08:22.620
So one thing to note is that these
APIs are only available for applications

00:08:22.750 --> 00:08:24.660
that ship from the App Store.

00:08:25.150 --> 00:08:27.330
And if you're developing
an application for iOS,

00:08:27.350 --> 00:08:31.050
of course, you'll need to provision your
iOS device for development.

00:08:31.380 --> 00:08:35.290
and then set entitlements in
the Xcode project that inform

00:08:35.300 --> 00:08:39.360
the device that your application
wants to take advantage of iCloud.

00:08:40.010 --> 00:08:41.390
Let's talk about
provisioning a little bit.

00:08:41.440 --> 00:08:43.900
So what actually is provisioning?

00:08:43.950 --> 00:08:47.610
By default,
all iOS devices will only support

00:08:47.770 --> 00:08:51.280
applications that either shipped with
the OS or came from the App Store.

00:08:51.280 --> 00:08:54.760
And all of that code is
cryptographically signed.

00:08:54.760 --> 00:08:57.640
So as a result,
we need to allow the ability for

00:08:57.690 --> 00:09:01.840
you as a developer to sign your
own app and run it on that device.

00:09:01.840 --> 00:09:06.140
But we need to do it in such a way
that the entire population of iOS

00:09:06.140 --> 00:09:09.040
devices in the world are still secure.

00:09:09.040 --> 00:09:12.060
And that's where provisioning comes in.

00:09:12.060 --> 00:09:16.020
It allows you to provision your
devices for your signing key.

00:09:16.020 --> 00:09:18.060
So the first thing you do
is register your iOS device

00:09:18.060 --> 00:09:19.380
with the developer portal.

00:09:19.380 --> 00:09:22.600
And once that's taken care of,
Xcode in the Xcode organizer

00:09:22.600 --> 00:09:25.640
is responsible for bringing
down from the portal what we

00:09:25.640 --> 00:09:29.320
call a provisioning profile and
putting that onto your device.

00:09:29.320 --> 00:09:32.480
Now,
a provisioning profile is fundamentally

00:09:32.660 --> 00:09:35.200
what defines your set of devices.

00:09:35.200 --> 00:09:39.010
So it contains the list of
identifiers for all of your devices.

00:09:39.040 --> 00:09:43.120
And what it's also doing is it's also
defining your developer certificate.

00:09:43.120 --> 00:09:46.690
So what it's doing is it's telling
the device not only trust all of the

00:09:46.690 --> 00:09:50.320
default signatures coming from Apple,
but also trust anything that

00:09:50.370 --> 00:09:52.380
was signed by this developer.

00:09:52.380 --> 00:09:52.740
So what it's doing is it's telling
the device not only trust all of the

00:09:52.740 --> 00:09:53.140
default signatures coming from Apple,
but also trust anything that

00:09:53.140 --> 00:09:53.490
was signed by this developer.

00:09:54.670 --> 00:09:57.650
And lastly,
the provisioning profile is what's

00:09:57.720 --> 00:10:01.560
granting that iCloud support to your
app so that when they call the APIs,

00:10:01.560 --> 00:10:05.990
those two services are going
to go ahead and interact.

00:10:06.690 --> 00:10:09.600
So to actually do that,
you need to turn on some entitlements.

00:10:09.690 --> 00:10:12.860
So again, what's an entitlement?

00:10:12.900 --> 00:10:17.140
The basic idea behind an entitlement
is very simple access control.

00:10:17.230 --> 00:10:21.030
So we don't want to have our developers
have to learn about access control

00:10:21.030 --> 00:10:22.850
lists and set up things like that.

00:10:22.940 --> 00:10:25.400
Instead,
the idea is that you're going to set

00:10:25.400 --> 00:10:27.440
an entitlement in your application.

00:10:27.470 --> 00:10:29.680
It's included in the
signature of your app.

00:10:29.830 --> 00:10:32.100
And at that point,
once the app is trusted,

00:10:32.140 --> 00:10:35.400
all the service is going to
ask when you call that API is,

00:10:35.430 --> 00:10:36.600
does the app have the entitlement?

00:10:36.740 --> 00:10:37.200
Great.

00:10:37.200 --> 00:10:39.180
And it's off to the races.

00:10:39.270 --> 00:10:41.300
So to set the entitlements
in your application,

00:10:41.300 --> 00:10:41.900
there are two.

00:10:41.900 --> 00:10:44.200
If you're going to use
the Key-Value Storage,

00:10:44.270 --> 00:10:46.840
this is for the KVS service.

00:10:46.930 --> 00:10:51.550
And there's a second entitlement
for using document storage.

00:10:51.580 --> 00:10:54.440
And once you've set those
in Xcode and built your app,

00:10:54.480 --> 00:10:56.800
that's all you really
need to do at that point.

00:10:56.800 --> 00:10:58.760
So let's talk about KVS in particular.

00:10:58.910 --> 00:11:02.130
So we provide a single
API for working with KVS.

00:11:02.210 --> 00:11:02.910
It's very simple.

00:11:02.960 --> 00:11:04.080
It's called NSubiquitousKeyValueStore.

00:11:05.400 --> 00:11:10.560
The idea is that you're going to
store simple plist values in iCloud.

00:11:10.730 --> 00:11:14.640
So the same types of items that you might
put into an NS dictionary-- so strings,

00:11:14.640 --> 00:11:18.240
and numbers, and Boolean values, NSData,
that type of thing.

00:11:18.240 --> 00:11:21.340
It has a similar look and
feel to NSUserDefaults,

00:11:21.390 --> 00:11:24.990
but it's specifically
for working with iCloud.

00:11:25.460 --> 00:11:28.640
It offers very simple
conflict resolution.

00:11:28.730 --> 00:11:32.230
So if your application is on two
devices and they both changed

00:11:32.620 --> 00:11:37.420
the value for the same key,
KVS is going to choose a winner based

00:11:37.420 --> 00:11:40.400
on the timestamp of the last change.

00:11:40.510 --> 00:11:43.950
So whichever device made
the last change wins.

00:11:45.170 --> 00:11:48.950
One thing to note about KVS is that
it is usable even if your iCloud

00:11:48.950 --> 00:11:50.670
account isn't configured on the device.

00:11:50.710 --> 00:11:55.470
So your application can start
calling these APIs right away,

00:11:55.520 --> 00:11:57.700
and you don't have to worry
if the user goes and turns

00:11:57.700 --> 00:11:59.940
on an iCloud account later.

00:11:59.940 --> 00:12:03.040
KVS will take care of
that on your behalf.

00:12:05.250 --> 00:12:10.650
When we introduced KVS last year,
we were fairly conservative in

00:12:10.790 --> 00:12:15.520
its behavior because that service
is running on the device and it's

00:12:15.620 --> 00:12:20.110
doing work that includes firing up
the network and talking to iCloud.

00:12:20.120 --> 00:12:24.140
And so we wanted to make sure that we
weren't going to be taxing the device and

00:12:24.150 --> 00:12:26.620
specifically the battery and the radios.

00:12:26.620 --> 00:12:31.520
And so we tuned KVS to what we thought
the right behavior was going to be.

00:12:32.490 --> 00:12:36.660
What we learned is we were too
conservative in how KVS worked.

00:12:38.010 --> 00:12:40.830
So what we've done is we've
increased the capacity,

00:12:40.830 --> 00:12:43.300
so the amount of data you
can actually put into KVS.

00:12:43.300 --> 00:12:48.220
And so you can now store a
maximum of 1,024 keys with

00:12:48.450 --> 00:12:51.360
NS Ubiquitous Key-Value Store.

00:12:51.360 --> 00:12:55.440
And you can store up to a
full megabyte per application.

00:12:55.440 --> 00:12:58.860
And this quota is not a part
of the overall user quota.

00:12:58.860 --> 00:13:00.530
This quota is specific to your app.

00:13:00.600 --> 00:13:03.050
Now,
you can have a single key-value pair,

00:13:03.050 --> 00:13:05.260
and the value can be a full megabyte.

00:13:06.120 --> 00:13:09.180
Or you can spread that
across about 1,000 keys.

00:13:09.180 --> 00:13:14.200
We also improved the responsiveness of
the key-value service on the device,

00:13:14.200 --> 00:13:16.380
so that when your application
interacts with the API,

00:13:16.380 --> 00:13:19.890
it's going to be talking to
iCloud that much more often.

00:13:19.900 --> 00:13:22.680
In particular,
you can make about 15 requests

00:13:22.680 --> 00:13:24.590
to the API every 90 seconds.

00:13:26.590 --> 00:13:28.670
So let's talk a little bit
about what the code looks like.

00:13:28.720 --> 00:13:30.060
It's pretty simple.

00:13:30.150 --> 00:13:33.620
The first thing that your
application will do is go ahead and

00:13:33.720 --> 00:13:37.270
get access to the default store,
and then it's going to register

00:13:37.360 --> 00:13:41.150
for standard notification,
but specifically an external

00:13:41.150 --> 00:13:44.740
change notification so that your
application is going to get that

00:13:44.840 --> 00:13:49.810
selector called when the Key-V store
is changed on another device.

00:13:49.960 --> 00:13:52.100
Once you've registered
for that notification,

00:13:52.160 --> 00:13:55.910
go ahead and tell the service
to go ahead and talk to iCloud.

00:13:58.200 --> 00:14:01.180
Now, if you want to make a change in KVS,
once you've got that store,

00:14:01.180 --> 00:14:02.900
it's as simple as setting objects.

00:14:02.900 --> 00:14:06.540
So, again, it's very similar to setting
something in an NSDictionary or

00:14:06.540 --> 00:14:09.960
in something like NSUserDefaults.

00:14:10.000 --> 00:14:12.000
You can set an object
and you give it a key.

00:14:12.000 --> 00:14:14.560
You can also set specific
object types like a Boolean.

00:14:14.560 --> 00:14:18.750
We also recommend that the
data that you put into KVS,

00:14:18.840 --> 00:14:21.640
you might want to cache locally.

00:14:21.640 --> 00:14:24.130
So, for example,
if your application wants to

00:14:24.140 --> 00:14:27.530
make a different decision than
the conflict resolution did,

00:14:27.540 --> 00:14:30.480
you've got a local copy
of it to override with.

00:14:30.710 --> 00:14:33.960
This is,
one example might be if you have a game

00:14:33.960 --> 00:14:37.760
that is keeping track of the user's
high achievements across devices.

00:14:37.760 --> 00:14:40.910
Well,
if the user is playing on one device

00:14:40.910 --> 00:14:46.060
but doesn't break his high achievement,
and you set that store in KVS,

00:14:46.060 --> 00:14:47.560
on another device, you might want to say,
no,

00:14:47.560 --> 00:14:49.380
his high score is still this other value.

00:14:49.380 --> 00:14:51.680
And, again,
once you've set something in the store,

00:14:51.680 --> 00:14:53.890
go ahead and tell it to talk
to iCloud on your behalf.

00:14:55.970 --> 00:14:59.400
So that's the API that you're
fundamentally gonna use for

00:14:59.510 --> 00:15:03.000
setting values and registering
for your notification.

00:15:03.270 --> 00:15:06.280
Once that notification does get fired,
you're going to get back that

00:15:06.360 --> 00:15:09.690
standard user info dictionary,
and one of the keys in that

00:15:09.800 --> 00:15:12.480
is going to be the reason that
we fired the notification.

00:15:12.480 --> 00:15:14.490
And there are a few different reasons.

00:15:14.500 --> 00:15:17.370
The first is,
if this was the initial download,

00:15:17.370 --> 00:15:20.640
so you turned on KVS for the first time,
we're going to post a

00:15:20.640 --> 00:15:23.250
notification to tell you,
hey, we just brought everything

00:15:23.250 --> 00:15:24.130
down from iCloud.

00:15:24.140 --> 00:15:27.940
We're also going to post a notification
if there was an external change.

00:15:27.950 --> 00:15:31.790
So if your application modified
the KVS store on another device,

00:15:31.790 --> 00:15:36.180
your application on the other device
is going to get that notification.

00:15:36.180 --> 00:15:40.960
We also provide a reason if
you've gone over the quota.

00:15:40.960 --> 00:15:43.210
So your application is
going to get a notification,

00:15:43.210 --> 00:15:45.830
and the reason is going to say, hey,
you put too much data into

00:15:45.830 --> 00:15:47.460
iCloud or you put too many keys.

00:15:47.460 --> 00:15:50.570
Now, once you do get an external
change notification,

00:15:50.570 --> 00:15:52.730
you can then ask,
what are the set of keys

00:15:52.810 --> 00:15:54.350
that actually changed?

00:15:54.360 --> 00:15:57.780
So instead of having to actually
keep track of every key value pair,

00:15:57.880 --> 00:16:02.050
you've put into the key value store,
we're going to tell you explicitly,

00:16:02.050 --> 00:16:03.620
here are the keys that changed.

00:16:03.620 --> 00:16:07.620
And at that point,
you can go grab those values and, again,

00:16:07.620 --> 00:16:08.910
consider storing them locally.

00:16:08.920 --> 00:16:13.350
So some best practices to keep in
mind with using the key value storage.

00:16:13.360 --> 00:16:15.250
Take advantage of KVS.

00:16:15.320 --> 00:16:17.160
It's a very simple API.

00:16:17.160 --> 00:16:18.390
It's very easy to adopt.

00:16:18.440 --> 00:16:22.240
And you can use it for
things like configuration,

00:16:22.240 --> 00:16:25.270
so that the user only has to
set up your app on one device,

00:16:25.270 --> 00:16:28.900
and those configuration settings
are automatically reflected

00:16:28.900 --> 00:16:30.050
to all his other devices.

00:16:30.060 --> 00:16:32.230
You can also use it for state.

00:16:32.260 --> 00:16:35.190
So if a user is doing
something on one device,

00:16:35.260 --> 00:16:38.160
like reading a book,
and when he transitions

00:16:38.160 --> 00:16:40.990
and uses another device,
he can pick up right where he left off.

00:16:41.000 --> 00:16:46.290
So KVS is a great way to provide a
consistent user experience across all

00:16:46.380 --> 00:16:49.400
of the user's devices with your app.

00:16:50.060 --> 00:16:54.380
One thing to keep in mind,
don't use KVS for storing passwords.

00:16:54.540 --> 00:16:57.700
The absolute best place to put the
cat password is in the keychain,

00:16:57.870 --> 00:17:03.770
specifically using the SecItem API,
which is available on both OS X and iOS.

00:17:03.900 --> 00:17:07.510
If you didn't get a chance to
see our security framework talk

00:17:07.540 --> 00:17:10.250
earlier where we went into some
greater detail on the keychain,

00:17:10.420 --> 00:17:13.290
that session will also be posted online.

00:17:14.020 --> 00:17:16.740
And again,
think about keeping a local cache

00:17:17.020 --> 00:17:20.840
in the event that your application
wants to make a different change

00:17:21.200 --> 00:17:23.000
based on the conflict resolution.

00:17:23.000 --> 00:17:26.500
And keep an eye on
those quota violations.

00:17:26.610 --> 00:17:30.290
If your application is consistently
putting too much data into the cloud,

00:17:30.450 --> 00:17:33.210
you might want to think about
using document storage for

00:17:33.210 --> 00:17:35.000
that larger amount of data.

00:17:35.000 --> 00:17:37.830
Let's talk about document storage.

00:17:39.570 --> 00:17:41.810
If you're familiar with
developing for iOS,

00:17:41.910 --> 00:17:44.740
we have the concept of
an application container.

00:17:44.860 --> 00:17:47.400
So when your application is
downloaded to the device,

00:17:47.580 --> 00:17:52.360
we create a container that your
application runs within that isolates

00:17:52.360 --> 00:17:53.700
it from the rest of the system.

00:17:53.800 --> 00:17:56.010
And this provides for...

00:17:56.440 --> 00:17:59.740
Great stability and security for
your app and the data of other

00:17:59.740 --> 00:18:01.970
applications on the device as well.

00:18:02.350 --> 00:18:06.840
Document Storage also provides
an additional Ubiquiti container.

00:18:07.040 --> 00:18:10.210
You may have also heard us refer
to this as an iCloud container.

00:18:10.440 --> 00:18:13.880
This is a physically separate
directory on the device that

00:18:13.880 --> 00:18:18.380
your application gets access to,
and any file data that your application

00:18:18.450 --> 00:18:22.740
puts into the Ubiquiti container is
going to be uploaded to iCloud and

00:18:22.740 --> 00:18:25.390
then pushed to those other devices.

00:18:26.560 --> 00:18:28.770
So let's talk through a high-level
example of what's actually

00:18:28.780 --> 00:18:29.790
going on underneath the hood.

00:18:29.800 --> 00:18:33.620
So when your application goes to put
something in the Ubiquiti container,

00:18:33.620 --> 00:18:38.120
the document service is first going to
break up the file into a set of chunks.

00:18:38.120 --> 00:18:42.040
And if this is the first time the file's
been put into the Ubiquiti container,

00:18:42.040 --> 00:18:44.960
all of those chunks are
going to move up to iCloud,

00:18:44.960 --> 00:18:46.840
and now you've got the
first version in iCloud.

00:18:46.840 --> 00:18:51.340
But when the user modifies the document,
most likely only a subset of that

00:18:51.340 --> 00:18:53.680
file is actually going to change.

00:18:53.980 --> 00:18:57.150
So the document service is going to

00:18:57.380 --> 00:19:02.060
Take advantage of that and only send
the set of changes that are necessary

00:19:02.060 --> 00:19:04.120
to reflect that new version to iCloud.

00:19:04.120 --> 00:19:07.890
So the benefit is that your application
doesn't have to worry about any of

00:19:07.890 --> 00:19:12.160
the details of transferring changes
and any of the network efficiency that

00:19:12.160 --> 00:19:14.010
we might want to take advantage of.

00:19:14.060 --> 00:19:15.100
It's all done for you.

00:19:15.630 --> 00:19:19.080
Another concept to keep in mind
about document storage is that the

00:19:19.080 --> 00:19:22.260
system is very aggressive about
pushing metadata to the cloud.

00:19:22.620 --> 00:19:25.740
And when we're talking about metadata,
what we're talking about is

00:19:25.810 --> 00:19:27.420
the information about the file.

00:19:27.420 --> 00:19:30.330
So the name, the size,
all of the attributes that

00:19:30.330 --> 00:19:32.030
really describe the file.

00:19:32.040 --> 00:19:34.700
So when a file is first
put into the container,

00:19:34.700 --> 00:19:39.600
the first thing the system is going
to do is put the metadata into iCloud,

00:19:39.600 --> 00:19:42.400
and that metadata is also going to
make it to all the other devices.

00:19:42.400 --> 00:19:46.230
So what this means is that your
application is going to be aware of all

00:19:46.230 --> 00:19:50.370
of the files that are available to it,
even if it's not yet in iCloud and

00:19:50.370 --> 00:19:52.500
even if it's not yet been downloaded.

00:19:52.690 --> 00:19:55.850
downloaded to the device
the app is running on.

00:19:56.100 --> 00:19:58.910
In particular,
each device is going to pull when

00:19:58.910 --> 00:20:00.630
it's appropriate for that platform.

00:20:00.640 --> 00:20:04.850
So, for example,
a Mac is going to have larger

00:20:04.850 --> 00:20:09.740
storage capacity than an iOS device,
and so the policy on OS X is that any

00:20:09.740 --> 00:20:13.350
time a new file is put into iCloud,
it's automatically going to

00:20:13.350 --> 00:20:14.610
be brought down to the Mac.

00:20:14.620 --> 00:20:17.610
However, on iOS,
the application will be told

00:20:17.610 --> 00:20:21.040
about the existence of the file,
but it needs to explicitly

00:20:21.040 --> 00:20:22.980
ask the service,
hey, go ahead and bring that

00:20:23.100 --> 00:20:23.860
down to the device.

00:20:24.610 --> 00:20:27.300
Now, at that point,
once the file is on the device,

00:20:27.340 --> 00:20:31.510
any additional changes,
so any subsequent edits to that document,

00:20:31.520 --> 00:20:34.480
are automatically going to
move to the iOS device as well.

00:20:36.710 --> 00:20:40.180
Another optimization that the service
takes advantage of on your behalf is

00:20:40.180 --> 00:20:45.000
that it does peer-to-peer between devices
that are on the same local network.

00:20:45.160 --> 00:20:49.710
So if the user has a Mac on
his home network and his iPad,

00:20:50.180 --> 00:20:53.690
When the Mac uploads a file to iCloud,
the iPad's going to learn about

00:20:53.690 --> 00:20:56.000
the existence of that file,
but instead of having to

00:20:56.050 --> 00:20:59.730
download it all the way from
iCloud down to the iOS device,

00:20:59.740 --> 00:21:01.320
it can pull it directly from the Mac.

00:21:01.380 --> 00:21:05.280
And again, all of this is done
automatically under the hood.

00:21:05.280 --> 00:21:07.830
Your application doesn't have to
worry about any of the details.

00:21:07.840 --> 00:21:09.290
Thank you.

00:21:10.170 --> 00:21:15.000
The document service also supports the
concept of automatic conflict resolution.

00:21:15.100 --> 00:21:18.000
What this means is that if
the same document is edited

00:21:18.000 --> 00:21:21.500
on two different devices,
the system is going to pick a winner.

00:21:21.900 --> 00:21:25.000
That being said,
your application will be given access

00:21:25.000 --> 00:21:29.190
to the other version if you would
like to make a different decision.

00:21:29.900 --> 00:21:32.120
Another feature that we
provide with document storage

00:21:32.380 --> 00:21:33.740
is the idea of URL publishing.

00:21:33.740 --> 00:21:38.300
So you can take a document and
publish its state as it is at that

00:21:38.380 --> 00:21:42.230
point in time and make it available
for someone to download via Safari.

00:21:42.240 --> 00:21:45.510
So what you'll get back from the
service is a URL that you can then

00:21:45.670 --> 00:21:47.560
include in an email attachment.

00:21:47.560 --> 00:21:51.000
So this is a nice alternative
to putting large documents into

00:21:51.000 --> 00:21:54.830
email that might not necessarily
make it through a mail server.

00:21:55.810 --> 00:21:58.860
One thing to keep in mind
with URL publishing is that

00:21:58.860 --> 00:22:01.240
the URL that you publish is,
again,

00:22:01.280 --> 00:22:03.960
the document as of that state in time.

00:22:03.960 --> 00:22:06.670
So if the user edits the document
after it's been published,

00:22:06.670 --> 00:22:09.340
those changes are not going
to be a part of the URL.

00:22:09.340 --> 00:22:13.270
Also, it's not going to be published
as a URL permanently.

00:22:13.270 --> 00:22:15.900
It will expire naturally over time.

00:22:18.290 --> 00:22:21.220
So one of the things that we've
learned in the past year is that

00:22:21.220 --> 00:22:26.340
developers are looking for a better way
to determine if the user has configured

00:22:26.340 --> 00:22:27.980
an iCloud account on the device.

00:22:27.980 --> 00:22:32.000
So unlike KVS,
document storage does require that there

00:22:32.000 --> 00:22:35.120
is an actual iCloud account configured.

00:22:35.120 --> 00:22:39.080
And what we've introduced in
Mountain Lion and iOS 6 is the

00:22:39.080 --> 00:22:41.880
concept of a ubiquity identity token.

00:22:41.880 --> 00:22:46.740
This is a very inexpensive identifier
that your application can ask for.

00:22:47.220 --> 00:22:50.620
And if it's present,
then you know the account is configured.

00:22:50.620 --> 00:22:54.000
And the next time you ask for it,
if the token is changed,

00:22:54.000 --> 00:22:55.940
you know the user has changed accounts.

00:22:55.940 --> 00:23:00.120
In particular, this token is anonymous,
so it's not going to tell you exactly

00:23:00.120 --> 00:23:02.090
what the user's iCloud credentials are.

00:23:02.100 --> 00:23:06.720
And it's going to be specific
to your app on that device.

00:23:06.720 --> 00:23:11.580
So your app on two different devices
for the same iCloud account are going to

00:23:11.580 --> 00:23:13.220
get two different values for that token.

00:23:14.920 --> 00:23:19.160
We also post a notification if the
iCloud account changes while your

00:23:19.160 --> 00:23:21.890
application is running or otherwise
suspended in the background.

00:23:21.900 --> 00:23:24.800
So at that point when
the notification fires,

00:23:24.800 --> 00:23:27.100
you can determine if the
iCloud account has changed.

00:23:27.100 --> 00:23:30.790
And this is very useful for those of
us who are doing iCloud development

00:23:30.790 --> 00:23:35.790
or test engineers who are switching
between accounts as a part of QA.

00:23:37.220 --> 00:23:39.910
We also provide what we
call a container URL.

00:23:40.000 --> 00:23:45.000
So your application will ask the
document service for the file

00:23:45.000 --> 00:23:47.390
URL to that Ubiquiti container.

00:23:47.470 --> 00:23:51.640
And in fact, at the time that you ask the
system for that container URL,

00:23:51.730 --> 00:23:54.550
that's when the system goes ahead
and configures the container

00:23:54.610 --> 00:23:57.230
on behalf of your application.

00:23:57.490 --> 00:24:00.790
We do recommend that you
avoid calling the API for that

00:24:00.860 --> 00:24:02.720
container URL on your main thread.

00:24:02.740 --> 00:24:06.790
You want your main thread to be available
for responding to input from the user.

00:24:08.860 --> 00:24:12.440
So let's walk through some simple
code examples for what your app

00:24:12.480 --> 00:24:15.300
should do when it first launches.

00:24:15.340 --> 00:24:18.580
The first thing you'll want to
do is check to see if the iCloud

00:24:18.580 --> 00:24:20.300
account has been configured.

00:24:20.300 --> 00:24:24.800
And you can call the new API in
NSFileManager to get that Ubiquiti token.

00:24:24.910 --> 00:24:28.300
If the token's present,
you know the account is enabled.

00:24:28.320 --> 00:24:32.300
And then you can cache that token so that
the next time your application launches,

00:24:32.300 --> 00:24:35.290
you can determine if the
account has been changed.

00:24:36.280 --> 00:24:39.840
You also want to go ahead and
register for notifications so that

00:24:39.840 --> 00:24:43.820
while your application is running,
or if it's suspended in the background,

00:24:43.930 --> 00:24:47.010
you'll know if the account changed.

00:24:47.540 --> 00:24:49.930
And lastly, you'll want to go ahead
and tell the system,

00:24:49.990 --> 00:24:54.640
"Okay, I want to start using document
storage," and ask for the container URL.

00:24:54.640 --> 00:24:56.760
And again, in this example,
you'll see that we're not

00:24:56.870 --> 00:24:59.400
doing that on the main thread.

00:25:00.300 --> 00:25:07.580
So some best practices to keep in mind
when using the new iCloud account APIs.

00:25:07.700 --> 00:25:09.140
Listen for that account notification.

00:25:09.210 --> 00:25:12.200
So you want your app to be
responsive if the user has gone

00:25:12.200 --> 00:25:16.320
into settings or system preferences
and changed the iCloud account.

00:25:16.590 --> 00:25:20.710
If that account token does change,
you might want to clear out any

00:25:20.780 --> 00:25:23.880
caches that you have that are
specific to that account that are

00:25:23.890 --> 00:25:27.390
local to your application container.

00:25:27.470 --> 00:25:30.700
You also want to refresh your UI so
that if the account does change,

00:25:30.870 --> 00:25:33.540
the application doesn't feel stale.

00:25:33.600 --> 00:25:37.550
And again, set up that Ubiquiti container
on a separate thread.

00:25:38.390 --> 00:25:41.400
So let's talk a little bit about
the types of documents that you

00:25:41.400 --> 00:25:43.890
might want to use with iCloud.

00:25:43.930 --> 00:25:45.900
The first type are regular files.

00:25:45.940 --> 00:25:48.440
We also have a concept of a package.

00:25:48.500 --> 00:25:52.480
So these are for more sophisticated
documents that are not stored as

00:25:52.480 --> 00:25:54.160
single files on the file system.

00:25:54.270 --> 00:25:56.790
We'll talk a little bit more about
what a package is in a moment.

00:25:57.050 --> 00:25:59.420
Core data is also fully iCloud aware.

00:25:59.420 --> 00:26:02.220
So if your application is
using a Core Data Store,

00:26:02.240 --> 00:26:05.110
you can take advantage of iCloud as well.

00:26:05.890 --> 00:26:08.380
So in the case of the file type,
we support all of the

00:26:08.390 --> 00:26:13.140
standard Unix file types,
so regular files, symlinks, directories.

00:26:13.140 --> 00:26:15.520
If you create any of these
in the Ubiquiti container,

00:26:15.520 --> 00:26:19.500
they are going to be reflected in
iCloud and on the user's other devices.

00:26:19.500 --> 00:26:24.300
That includes the extended attributes,
so the additional metadata that describes

00:26:24.370 --> 00:26:26.880
those files will also be put into iCloud.

00:26:28.390 --> 00:26:32.540
One thing to keep in mind, though,
is the concept of case sensitivity.

00:26:32.650 --> 00:26:35.930
So if you're working on an iOS
device and you put something

00:26:35.930 --> 00:26:38.840
into the Ubiquiti container,
that Ubiquiti container is going

00:26:38.880 --> 00:26:42.340
to be reflected on the Mac,
but it might have a different

00:26:42.340 --> 00:26:44.400
file system case sensitivity.

00:26:44.500 --> 00:26:47.750
So, for example,
a case-sensitive file system

00:26:48.110 --> 00:26:51.610
is one where a file with the same
name but different capitalization

00:26:52.010 --> 00:26:54.160
is treated as two separate files.

00:26:54.290 --> 00:26:57.840
So, for example,
all caps foo is not-- the file

00:26:57.840 --> 00:27:02.010
system sees all lowercase as a
different file in the file system.

00:27:02.160 --> 00:27:04.560
That's not the case if
the user is running on a

00:27:04.640 --> 00:27:06.730
case-insensitive file system.

00:27:06.810 --> 00:27:10.650
In that case, if you write out a file
with the name all caps foo,

00:27:10.760 --> 00:27:12.660
you can later look it up
with all lowercase foo.

00:27:12.660 --> 00:27:14.600
You're gonna get the same file back.

00:27:14.680 --> 00:27:17.760
So this is something to keep in mind
when you're putting files into the

00:27:17.760 --> 00:27:22.060
iCloud container that you need to
be aware of case sensitivity issues.

00:27:22.280 --> 00:27:24.880
So in general,
it's probably a good idea to treat

00:27:24.880 --> 00:27:29.400
your files as if they were going
into a case-insensitive system.

00:27:30.800 --> 00:27:34.560
So the second type of document
that we discussed is a package.

00:27:34.710 --> 00:27:37.870
The idea of a package is that you
have multiple files that represent

00:27:38.000 --> 00:27:41.570
a document in a single directory.

00:27:41.940 --> 00:27:46.110
And so all of the assets of that
document are broken out into separate

00:27:46.110 --> 00:27:48.740
files and managed independently.

00:27:48.940 --> 00:27:53.000
And so you can have lots of small
files for an overall document.

00:27:53.150 --> 00:27:56.500
And what this means is that when
you modify one of those files,

00:27:56.500 --> 00:28:01.340
it's making smaller updates
or fewer updates to iCloud.

00:28:02.030 --> 00:28:06.330
Also keep in mind that the document
service treats any change to a package as

00:28:06.330 --> 00:28:08.700
an atomic change to the overall system.

00:28:08.700 --> 00:28:11.760
So when your application
receives notifications that

00:28:11.760 --> 00:28:14.180
the file's been changed,
it's going to be -- or as

00:28:14.180 --> 00:28:18.400
the package has been changed,
they're going to be treated atomically.

00:28:19.190 --> 00:28:21.600
Now,
we have two sessions in the future that

00:28:21.600 --> 00:28:25.660
are going to go into greater detail
if you're using files and packages,

00:28:25.660 --> 00:28:28.540
using uiCloud with UIDocument on iOS.

00:28:28.540 --> 00:28:33.310
There's also a talk using
iCloud with NSDocument for OS X.

00:28:35.360 --> 00:28:38.380
Now, the third type of document
type is core data.

00:28:38.460 --> 00:28:41.410
And so you may have heard us refer
to these types of applications

00:28:41.460 --> 00:28:43.140
as shoebox applications.

00:28:43.220 --> 00:28:48.460
A good example would be iPhoto or
iTunes that are collecting a lot of

00:28:48.560 --> 00:28:54.200
information on behalf of the user
and organizing them with a database.

00:28:55.890 --> 00:29:00.140
So the way that Core Data supports
iCloud is that the Core Data stores

00:29:00.200 --> 00:29:04.740
actually remains local to
your application container.

00:29:04.750 --> 00:29:09.000
And what Core Data is doing is
uploading the change logs to that

00:29:09.000 --> 00:29:12.440
store to iCloud that are then
brought down to the other device,

00:29:12.440 --> 00:29:16.720
and those changes are then applied
to the local store on that device.

00:29:17.380 --> 00:29:22.010
Now, Core Data supports the idea
of XML and binary stores in

00:29:22.010 --> 00:29:24.660
addition to a SQLite store.

00:29:24.840 --> 00:29:29.240
XML and binary stores mean
that when you make a change to

00:29:29.290 --> 00:29:32.980
any element within that store,
the entire back end is written

00:29:32.980 --> 00:29:34.540
out to the file system.

00:29:34.540 --> 00:29:38.260
So these types of binary stores
are good for small data sets

00:29:38.260 --> 00:29:40.780
that don't change very often.

00:29:41.300 --> 00:29:45.440
We provide an API for iOS
applications that use core data

00:29:45.440 --> 00:29:47.200
called UI Managed Document.

00:29:47.200 --> 00:29:50.340
This is a concrete
subclass of UI Document,

00:29:50.340 --> 00:29:52.280
and it fully supports iCloud.

00:29:53.620 --> 00:29:57.810
One thing to keep in mind is that
NS Persistent Document on OS X is

00:29:57.810 --> 00:30:03.450
not enabled for iCloud the same
way that UI Managed Document is.

00:30:04.490 --> 00:30:06.580
If you'd like to learn more
about how to use your core

00:30:06.580 --> 00:30:09.590
data application with iCloud,
there's another session on

00:30:09.610 --> 00:30:12.640
Wednesday that'll go into a lot of
great detail about how that works.

00:30:14.800 --> 00:30:18.540
So now that you've figured out what
type of document your application uses,

00:30:18.540 --> 00:30:22.000
you want to start thinking about
how your document format will

00:30:22.190 --> 00:30:24.090
affect usability with iCloud.

00:30:24.100 --> 00:30:27.070
So one thing to keep in
mind is design your document

00:30:27.070 --> 00:30:29.230
format for network efficiency.

00:30:29.240 --> 00:30:32.740
So you don't want to be writing
out lots of changes very often

00:30:32.740 --> 00:30:36.400
that don't necessarily represent
changes made by the user.

00:30:36.980 --> 00:30:39.030
Because remember,
every time you modify a file

00:30:39.030 --> 00:30:41.920
in that Ubiquiti container,
the document service has to

00:30:41.920 --> 00:30:45.050
determine what that change was
and do work on your behalf.

00:30:47.190 --> 00:30:50.090
Also, design your document format
to be cross-platform.

00:30:50.170 --> 00:30:55.090
So if you have an application on
OS X and another application on iOS,

00:30:55.220 --> 00:30:58.350
You want to be aware of any
platform incompatibilities with

00:30:58.460 --> 00:31:02.810
the way that you're encoding
your document in the file system.

00:31:02.890 --> 00:31:05.080
So, for example,
if you're using keyed archivers,

00:31:05.090 --> 00:31:11.880
the data might be written out in one
format on OS X and differently on iOS.

00:31:12.230 --> 00:31:15.090
So one concept you might want
to keep in mind is the idea of

00:31:15.090 --> 00:31:18.260
having a cloud representation,
so that if your document is

00:31:18.260 --> 00:31:21.100
written out into the Ubiquiti
container on an iOS device,

00:31:21.100 --> 00:31:23.660
it's written into an
intermediate representation.

00:31:23.660 --> 00:31:27.340
And when it's read in on a Mac,
it's read into the native

00:31:27.340 --> 00:31:30.050
representation you have for the Mac.

00:31:33.720 --> 00:31:39.290
Also, think about designing your document
format with application upgrades in mind.

00:31:39.370 --> 00:31:41.420
So over time,
you're probably going to release

00:31:41.450 --> 00:31:44.470
new versions of your application,
and you're probably going to make

00:31:44.560 --> 00:31:46.560
changes to your document format as well.

00:31:46.560 --> 00:31:50.470
And so think about versioning your
document format so that different

00:31:50.470 --> 00:31:54.000
versions of your application
know what version of the document

00:31:54.080 --> 00:31:56.220
they're going to be working with.

00:31:56.960 --> 00:31:59.580
You want to keep in mind
version compatibility.

00:31:59.580 --> 00:32:03.160
So you want to think about,
does the latest version of

00:32:03.160 --> 00:32:06.090
your application support
older document formats?

00:32:06.160 --> 00:32:08.640
For example,
do you want to be able to modify

00:32:08.640 --> 00:32:12.140
those old documents so that an
older version of the same app on a

00:32:12.140 --> 00:32:14.670
different device can still read them?

00:32:16.180 --> 00:32:19.210
Do you want to have the new version
only support a read-only mode where

00:32:19.210 --> 00:32:22.210
it can import and maybe make a
copy and write out a new version?

00:32:22.220 --> 00:32:27.070
Or do you simply want to say we don't
support documents of that older type?

00:32:27.240 --> 00:32:29.990
These are the types of things you
should keep in mind as you're designing

00:32:29.990 --> 00:32:31.770
your document format for iCloud.

00:32:33.540 --> 00:32:36.720
Some things to keep in
mind regarding performance.

00:32:36.810 --> 00:32:38.080
Beware of sync loops.

00:32:38.240 --> 00:32:41.870
And a sync loop is where your
application on one device makes a

00:32:41.870 --> 00:32:45.550
change and a different version of
your app receives it on that device

00:32:45.740 --> 00:32:47.950
and rewrites the file back out.

00:32:48.060 --> 00:32:50.710
Then the original version of your
application sees that change,

00:32:50.710 --> 00:32:53.180
decides to write it out again,
and you have two versions of

00:32:53.180 --> 00:32:56.970
your app playing ping pong
with the user's iCloud account.

00:32:57.550 --> 00:33:02.820
Also, avoid making rapid changes to
your documents tied to user input.

00:33:02.840 --> 00:33:06.100
So, for example, if the user's actively
scrolling through the document,

00:33:06.140 --> 00:33:09.470
you don't need to be writing
those out to the file system live.

00:33:09.660 --> 00:33:11.740
You'll also want to keep
in mind modification dates.

00:33:11.740 --> 00:33:14.660
So you probably don't need to
be putting the last open date

00:33:14.870 --> 00:33:17.780
into the document format itself.

00:33:19.040 --> 00:33:22.860
Also, keep in mind privacy
issues with using iCloud.

00:33:22.990 --> 00:33:27.040
In particular,
iCloud is for the user's data only.

00:33:27.090 --> 00:33:29.210
So for example,
it's not the right place to

00:33:29.210 --> 00:33:31.960
be putting caches that your
application might be using.

00:33:32.040 --> 00:33:35.180
It's also probably not the right
place to be putting temporary files.

00:33:35.200 --> 00:33:37.760
In the case of caches
and temporary files,

00:33:37.780 --> 00:33:41.280
you want to be putting those in
the local application container.

00:33:41.320 --> 00:33:43.880
If your application
auto-generates content,

00:33:43.880 --> 00:33:47.540
so the first time that it launches,
it's going to go pre-cache some data,

00:33:47.750 --> 00:33:51.520
this is probably not the right
content to be putting into iCloud,

00:33:51.520 --> 00:33:54.490
because your application can
auto-generate that content on

00:33:54.490 --> 00:33:57.010
every device that it's running on.

00:33:58.470 --> 00:34:02.000
Also, if you're going to be using
the URL publishing feature,

00:34:02.190 --> 00:34:04.750
keep in mind that you don't want to
be publishing sensitive information

00:34:04.760 --> 00:34:06.460
that's going to be surprising the user.

00:34:06.460 --> 00:34:09.850
For example,
if the user's been editing a document

00:34:09.850 --> 00:34:13.980
and making a bunch of changes
and you store the undo history,

00:34:13.980 --> 00:34:17.190
that's not the type of thing that you
want to be publishing that he might make

00:34:17.400 --> 00:34:19.570
available via email to another person.

00:34:21.650 --> 00:34:25.400
So let's talk a little bit about
the actual APIs that you can

00:34:25.400 --> 00:34:28.210
use to interact with iCloud.

00:34:29.300 --> 00:34:32.720
First, there's the NS File Manager APIs.

00:34:32.830 --> 00:34:36.100
It's available in
Foundation on both platforms.

00:34:36.150 --> 00:34:40.390
It supports the new Account Token
API that we've introduced.

00:34:40.620 --> 00:34:44.990
And it also is how your application
retrieves the container URL of

00:34:44.990 --> 00:34:46.160
your Ubiquiti container.

00:34:46.160 --> 00:34:49.630
And again, that's the URL that tells
the system that you want to

00:34:49.630 --> 00:34:51.020
start interacting with iCloud.

00:34:53.220 --> 00:34:57.170
NS File Manager is how your application
should be doing the low-level file

00:34:57.170 --> 00:35:00.520
management with the Ubiquiti container.

00:35:01.270 --> 00:35:03.520
And in doing so,
you'll want to learn about

00:35:03.520 --> 00:35:06.090
NS File Coordinator and
NS File Presenter.

00:35:06.190 --> 00:35:10.330
These are the APIs that your
document-based application can use

00:35:10.830 --> 00:35:12.570
to best cooperate with the system.

00:35:12.650 --> 00:35:16.720
So as your application is making changes
to a document stored in the container,

00:35:16.870 --> 00:35:20.330
the document service is going to
also want to be looking at the file,

00:35:20.510 --> 00:35:23.660
chunking it up,
and sending it up to the server.

00:35:23.870 --> 00:35:28.300
and NS File Coordinator is how
the two cooperate with each other.

00:35:28.420 --> 00:35:31.090
There's also NS Metadata Query.

00:35:31.370 --> 00:35:35.390
If you remember,
iCloud is very aggressive about

00:35:35.390 --> 00:35:39.130
uploading metadata changes
independent of the file data.

00:35:39.140 --> 00:35:43.460
And what this means is that your
applications are going to learn about

00:35:43.460 --> 00:35:47.960
the existence of a new file before
they might be available on the device.

00:35:47.960 --> 00:35:52.940
So the way that your application can
keep track of the changes to files,

00:35:52.940 --> 00:35:58.320
additions and updates and deletes,
is with a live NS metadata query.

00:35:58.500 --> 00:36:03.020
So if you're familiar with using
metadata query for things like Spotlight,

00:36:03.020 --> 00:36:07.400
we also have NS metadata query
available for the Ubiquiti container.

00:36:07.400 --> 00:36:09.830
And in fact,
you can use an NS metadata query

00:36:09.840 --> 00:36:13.300
for discovering not just the
files in the Ubiquiti container,

00:36:13.350 --> 00:36:16.240
but also for all of the
files available locally.

00:36:16.240 --> 00:36:20.560
We also provide iCloud
support in NS Document.

00:36:20.560 --> 00:36:23.000
So NS Document is fully iCloud aware.

00:36:23.000 --> 00:36:28.080
And on iOS, UI Document is also
fully supporting iCloud.

00:36:28.500 --> 00:36:31.960
If you're a core data application on iOS,
you can take advantage

00:36:31.970 --> 00:36:34.610
of UI Managed Document,
which is a concrete

00:36:34.610 --> 00:36:36.420
subclass of UI Document.

00:36:38.630 --> 00:36:42.300
So let's talk a little bit
about NS Document on OS X.

00:36:42.570 --> 00:36:45.960
As I mentioned, NS Document is now fully
integrated with iCloud.

00:36:46.240 --> 00:36:49.600
So if your application
subclasses NS Document,

00:36:49.610 --> 00:36:54.170
you've done most of the work
already to be an iCloud application.

00:36:54.620 --> 00:36:58.060
In particular,
it will enable the Ubiquiti container.

00:36:58.110 --> 00:37:02.600
It will do all of the coordination
for file coordinator and presenter.

00:37:02.700 --> 00:37:04.980
It will actually keep track
of all of the files that are

00:37:04.980 --> 00:37:06.600
available to your application.

00:37:06.600 --> 00:37:11.600
It will support all of the versioning
and all of the conflict resolution.

00:37:11.600 --> 00:37:16.400
So all of the file management level APIs,
NS Document abstracts all of that

00:37:16.400 --> 00:37:19.360
complexity away from your application.

00:37:19.920 --> 00:37:22.760
In iOS -- excuse me, in OS X,
we've introduced the

00:37:22.780 --> 00:37:27.140
new Cloud Library UI,
so the user can directly manage

00:37:27.140 --> 00:37:31.140
all of the files that are in his
iCloud account directly using

00:37:31.140 --> 00:37:33.620
the new NS Document Open Panel.

00:37:34.130 --> 00:37:37.520
If the user wants to actually see
other versions of the application,

00:37:37.520 --> 00:37:40.230
the support is built
into the system for you,

00:37:40.230 --> 00:37:43.350
as well as the UI for allowing
the user to choose that other

00:37:43.350 --> 00:37:44.680
version that he wants to use.

00:37:44.680 --> 00:37:49.880
So NS Document really takes a lot
of the complexity of handling all of

00:37:49.890 --> 00:37:52.930
these details and does them for you.

00:37:52.940 --> 00:37:55.570
If you want to learn more about
how NS Document does this,

00:37:55.570 --> 00:37:57.830
as I mentioned,
there's a session on Wednesday in

00:37:57.940 --> 00:38:01.630
the afternoon that goes into a lot
of great detail about NS Document and

00:38:01.630 --> 00:38:03.420
how you can use it with iCloud.

00:38:05.370 --> 00:38:08.930
So let's talk a little bit about the
typical workflow of an application.

00:38:09.060 --> 00:38:11.840
So on iOS,
when you create a new document,

00:38:11.890 --> 00:38:14.600
you want to create that as
a subclass of UI document.

00:38:14.630 --> 00:38:18.090
And on OS X, you want to use NS document.

00:38:18.320 --> 00:38:22.780
If you're doing a new Core Data document
and you subclass UI Managed Document,

00:38:22.930 --> 00:38:26.200
you get all of your iCloud
support through that class.

00:38:26.450 --> 00:38:31.600
And NS Persistent Document is
how you use Core Data on iCloud,

00:38:31.600 --> 00:38:34.510
but remember, it's not iCloud enabled.

00:38:35.140 --> 00:38:38.320
Now, if you're an iOS device,
your application is responsible for

00:38:38.340 --> 00:38:44.240
tracking the files and presenting a UI of
documents that are available to the user,

00:38:44.410 --> 00:38:46.950
and you can discover all of
the files that are available to

00:38:47.080 --> 00:38:50.500
your app using NSMetadata query,
and that's a live query.

00:38:50.500 --> 00:38:54.390
So as changes are made to the container,
your application is going

00:38:54.390 --> 00:38:58.000
to receive notifications,
and you'll be able to respond to them.

00:38:58.120 --> 00:39:00.150
On OS X,

00:39:00.430 --> 00:39:04.300
The user can discover what files
and documents are in iCloud

00:39:04.560 --> 00:39:07.460
using the new iCloud Library UI.

00:39:08.900 --> 00:39:12.350
When the system decides to
resolve conflicts on your behalf,

00:39:12.350 --> 00:39:18.140
UI document and NSFile version allow
you to make a different decision on iOS.

00:39:18.140 --> 00:39:22.230
And on OS X, as I mentioned,
we present that system UI for

00:39:22.230 --> 00:39:26.590
managing files and versions and
choosing a different version for you.

00:39:26.600 --> 00:39:29.090
If you want to rename
or move files around,

00:39:29.240 --> 00:39:31.290
you can use the NSFile Manager.

00:39:31.300 --> 00:39:34.580
And again, you'll want to learn more
about NSFile Coordinator.

00:39:34.580 --> 00:39:37.980
And that's also talked about in
the NSDocument with iCloud Talk.

00:39:38.940 --> 00:39:41.360
Again, on OS X,
that type of management is all

00:39:41.360 --> 00:39:43.030
done via the new iCloud UI.

00:39:45.310 --> 00:39:49.110
So some best practices to keep in mind
with using your documents in iCloud.

00:39:49.110 --> 00:39:53.820
Subclass those native document classes,
UI document, NS document,

00:39:53.820 --> 00:39:55.250
UI managed document.

00:39:55.250 --> 00:40:00.210
They're going to take away all of the
complexity of working with the Ubiquiti

00:40:00.210 --> 00:40:02.780
container and do it on your behalf.

00:40:02.820 --> 00:40:07.120
In order to subclass those classes,
you will need to enable autosave

00:40:07.120 --> 00:40:09.320
behavior in your application.

00:40:09.320 --> 00:40:14.840
Now, when the OS X team went to
adopt iCloud and TextEdit,

00:40:14.840 --> 00:40:18.240
fundamentally all they had to
do was enable autosave behavior

00:40:18.260 --> 00:40:21.050
in their NS document subclass,
and that was it.

00:40:23.010 --> 00:40:25.290
If you're a Core Data application,
there are a few things

00:40:25.290 --> 00:40:27.620
you should keep in mind.

00:40:27.740 --> 00:40:30.540
Again,
Core Data will keep the Core Data store

00:40:30.540 --> 00:40:33.370
local in your application container.

00:40:33.440 --> 00:40:37.630
And what's being synced via
iCloud are the actual change logs.

00:40:37.780 --> 00:40:39.230
Those are what's moving
into the container,

00:40:39.360 --> 00:40:42.230
being uploaded,
and then downloaded to the other devices.

00:40:42.330 --> 00:40:46.830
Then those change logs are applied
to the local Core Data store.

00:40:47.980 --> 00:40:51.000
If your application is going
to pre-populate a store

00:40:51.000 --> 00:40:54.870
when it first launches,
we recommend against actually taking

00:40:54.870 --> 00:40:58.830
a pre-existing Core Data store and
physically moving it into place.

00:40:58.920 --> 00:41:03.290
Instead, you'll want to create that new
Core Data object and use the migration

00:41:03.350 --> 00:41:06.020
API to populate the data that way.

00:41:06.180 --> 00:41:10.490
Some things to keep in mind that are
specific to iOS clients of iCloud.

00:41:10.850 --> 00:41:13.000
You want to be actively
tracking your documents,

00:41:13.000 --> 00:41:18.360
so take advantage of the NS Metadata
Query API for learning about all of the

00:41:18.360 --> 00:41:20.500
documents that are available to your app.

00:41:20.580 --> 00:41:23.020
And again,
keep in mind that your application

00:41:23.020 --> 00:41:27.480
is going to be notified about the
existence of files that might not

00:41:27.480 --> 00:41:30.250
yet be downloaded to that device.

00:41:30.550 --> 00:41:34.620
So your application will need
to explicitly tell the system,

00:41:34.620 --> 00:41:37.540
now that this file exists and
it's uploaded into iCloud,

00:41:37.660 --> 00:41:41.690
go ahead and bring it down
to my Ubiquiti container.

00:41:42.160 --> 00:41:44.660
And remember,
once you've asked the system to

00:41:44.680 --> 00:41:49.230
download a document on your behalf,
any changes to that document that are

00:41:49.230 --> 00:41:54.600
made on other devices are automatically
going to go to your device as well.

00:41:55.290 --> 00:41:57.820
In particular, you'll want to be aware
of conflict resolution.

00:41:57.820 --> 00:42:01.020
So the system's going to
choose a winner on your behalf,

00:42:01.030 --> 00:42:04.230
but if your application would
like to make a different decision,

00:42:04.240 --> 00:42:07.660
UI documents supports a
state that'll tell you that

00:42:07.660 --> 00:42:08.980
the document is in conflict.

00:42:08.980 --> 00:42:11.860
So when you get a notification
the document has changed,

00:42:11.860 --> 00:42:15.110
you can also find out,
did it conflict with another version?

00:42:15.110 --> 00:42:17.190
And if you want to go
choose another version,

00:42:17.190 --> 00:42:17.720
you can.

00:42:18.800 --> 00:42:23.080
We do recommend that you avoid
asking the user to make a decision.

00:42:23.080 --> 00:42:25.600
So if you've got two different
versions and you're going

00:42:25.600 --> 00:42:28.200
to reconcile those changes,
you should try to do it

00:42:28.200 --> 00:42:31.020
automatically so that you don't
actually have to ask the user.

00:42:31.020 --> 00:42:34.500
Some things to keep in mind
that are specific to OS X.

00:42:36.150 --> 00:42:37.760
Avoid deadlocks with modal UI.

00:42:37.760 --> 00:42:41.860
So if your application is bringing
up a sheet or modal UI and

00:42:41.910 --> 00:42:44.430
you're interacting with iCloud,
that's something you'll

00:42:44.430 --> 00:42:45.240
want to be aware of.

00:42:45.260 --> 00:42:48.990
And again, they're going to go into some
more detail on how this works

00:42:48.990 --> 00:42:52.670
in the NS document and advanced
iCloud sessions later in the week.

00:42:55.060 --> 00:42:58.810
The OS will manage conflict
resolution on your behalf,

00:42:58.830 --> 00:43:03.020
so the iCloud Library UI and
the Versions UI will allow the

00:43:03.020 --> 00:43:05.390
user to go and make changes.

00:43:06.470 --> 00:43:09.550
And of course,
the new iCloud Library UI is what

00:43:09.550 --> 00:43:13.350
allows a user to discover what
files are in his iCloud library

00:43:13.540 --> 00:43:17.400
and when he creates new files,
choose to put them there.

00:43:18.800 --> 00:43:23.460
So one of the things that we've learned
over the past year is that it can be a

00:43:23.470 --> 00:43:30.340
little bit difficult to determine if your
application is using iCloud correctly.

00:43:30.470 --> 00:43:35.680
So here are some tips and tricks for
debugging your application with iCloud.

00:43:35.740 --> 00:43:37.980
In particular,
test with multiple devices.

00:43:38.080 --> 00:43:42.110
So if you've got two iOS devices
or a mix of iOS and Macs,

00:43:42.280 --> 00:43:45.380
you want to be testing
your application on both.

00:43:45.900 --> 00:43:48.040
You want to be monitoring
the network traffic.

00:43:48.120 --> 00:43:51.370
And this is a good idea so that
you understand how the format

00:43:51.390 --> 00:43:55.230
of your document is interacting
with the Ubiquiti container.

00:43:55.300 --> 00:43:58.640
Now, OS X has a network utility manager
that can kind of get you started

00:43:58.640 --> 00:44:01.090
on looking at that type of data.

00:44:02.550 --> 00:44:05.960
For conflict resolution on an iOS device,
you can put the device

00:44:05.980 --> 00:44:07.010
into airplane mode.

00:44:07.020 --> 00:44:12.250
And what that's going to do is actually
disable the radios on the device so

00:44:12.330 --> 00:44:16.090
that neither Wi-Fi nor cellular can
actually reach the iCloud server.

00:44:16.100 --> 00:44:20.520
So one technique for inducing
a conflict is have the same

00:44:20.520 --> 00:44:24.720
document on two iOS devices,
put it into airplane mode,

00:44:24.720 --> 00:44:28.700
then edit those documents differently,
then take them out of airplane mode.

00:44:29.080 --> 00:44:32.100
And that will give you a good
idea of how to exercise conflict

00:44:32.100 --> 00:44:33.800
resolution on your device.

00:44:36.320 --> 00:44:39.030
We're also introducing a
configuration profile that

00:44:39.030 --> 00:44:41.200
will be made available online.

00:44:41.230 --> 00:44:44.890
And this configuration profile
will enable additional logging

00:44:44.900 --> 00:44:46.550
with the document service.

00:44:46.650 --> 00:44:50.340
So if you believe you're running
into a bug with the system,

00:44:50.460 --> 00:44:54.460
you can download this profile and
include that data with your bug report,

00:44:54.490 --> 00:44:59.400
and that will help engineers at
Apple figure out what might be going on.

00:44:59.980 --> 00:45:01.960
But in particular, file bug reports.

00:45:02.000 --> 00:45:04.500
And this is something
that's really important,

00:45:04.500 --> 00:45:06.800
not just to iCloud,
but to every technology.

00:45:06.800 --> 00:45:11.000
As you're using our APIs,
if you believe the APIs are misbehaving,

00:45:11.000 --> 00:45:14.780
or if there are specific enhancements
that would make it a lot easier to

00:45:14.810 --> 00:45:18.520
build a really great application,
absolutely file a bug report.

00:45:18.600 --> 00:45:21.700
You can do that with bugreport.apple.com.

00:45:21.700 --> 00:45:24.100
But fundamentally,
bug reports are the lifeblood

00:45:24.100 --> 00:45:25.400
of software engineering.

00:45:25.400 --> 00:45:29.890
It's the way that engineers know how
their APIs are fundamentally being used.

00:45:29.900 --> 00:45:33.290
That and talking to them
directly in the labs.

00:45:33.880 --> 00:45:35.940
Also,
take advantage of the developer forums.

00:45:35.970 --> 00:45:38.880
There are a lot of developers who
may have already adopted these

00:45:38.930 --> 00:45:42.590
APIs ahead of you and have more
familiarity with how they behave.

00:45:42.660 --> 00:45:46.180
Apple engineers are also available
on the forums to ask your questions.

00:45:46.260 --> 00:45:50.560
In addition to all of those methods
for testing your application,

00:45:50.560 --> 00:45:55.340
we're also introducing a new
tool called developer.icloud.com.

00:45:55.820 --> 00:45:59.440
One thing to keep in mind with
this new service is that it's

00:45:59.440 --> 00:46:03.940
only available if you've activated
an iOS device running iOS 6.

00:46:03.940 --> 00:46:05.860
This won't always be the case.

00:46:05.860 --> 00:46:07.200
This is only temporarily.

00:46:07.200 --> 00:46:10.430
So by the time iOS 6 and
Mountain Lion are final,

00:46:10.440 --> 00:46:14.020
you won't have to go through
this additional step.

00:46:14.060 --> 00:46:19.110
But developer.icloud.com is what
allows you as a developer to

00:46:19.110 --> 00:46:24.100
actually get a better feel for
what data is going into iCloud.

00:46:25.880 --> 00:46:29.730
So when you go to the website,
you're going to be presented with

00:46:30.360 --> 00:46:32.300
Your usual iCloud credential API.

00:46:32.300 --> 00:46:35.440
So once you log in,
we're actually going to show you

00:46:35.450 --> 00:46:39.240
every Ubiquiti container that
is associated with your account.

00:46:39.280 --> 00:46:42.080
So every application
that is using iCloud,

00:46:42.080 --> 00:46:45.040
specifically the
document storage service,

00:46:45.050 --> 00:46:48.540
is going to have its Ubiquiti
container visible on this

00:46:48.540 --> 00:46:50.730
developer-specific portal.

00:46:51.560 --> 00:46:53.940
And then what you can do
is you can drill into your

00:46:53.970 --> 00:46:58.020
application's Ubiquiti container,
and what this is showing you are the

00:46:58.070 --> 00:47:00.310
files that are actually in iCloud.

00:47:00.320 --> 00:47:05.170
So you can tell if when your application
put a file into the Ubiquiti container,

00:47:05.200 --> 00:47:07.690
you can then see that it got to iCloud.

00:47:07.700 --> 00:47:11.880
And we also allow you to download
the files from iCloud so you can

00:47:11.880 --> 00:47:14.020
see what data made it as well.

00:47:16.790 --> 00:47:22.050
If you'd like more information about
any of the APIs that we discussed today,

00:47:22.050 --> 00:47:24.370
we have a lot of great
documentation online,

00:47:24.370 --> 00:47:25.970
and of course,
they're to the developer forums.

00:47:25.980 --> 00:47:31.070
We've also introduced a new iCloud
Design Guide that goes into a lot of

00:47:31.070 --> 00:47:35.230
really wonderful detail about how the
system works and how your application

00:47:35.230 --> 00:47:39.640
can take advantage of both Key-Value
Storage and the Document Storage APIs.

00:47:40.140 --> 00:47:42.420
I really recommend,
if you want to use iCloud,

00:47:42.420 --> 00:47:45.040
and you should,
take a look at that Design Guide.

00:47:45.040 --> 00:47:47.840
It's going to go into a lot of detail
about the stuff we talked about today.

00:47:49.770 --> 00:47:53.730
We have a bunch of related sessions
that are coming up later in the week.

00:47:53.830 --> 00:47:57.510
So if you want to learn specifically
how to use UI document and

00:47:57.510 --> 00:48:01.460
NS document on our two platforms,
these talks are going to go into

00:48:01.480 --> 00:48:04.050
greater detail about how that works.

00:48:04.110 --> 00:48:08.070
We also have a talk that is specifically
about using core data with iCloud.

00:48:08.190 --> 00:48:11.520
And there's an advanced iCloud document
storage that's going to go into a lot of

00:48:11.530 --> 00:48:15.060
greater detail about how all of it works.

00:48:15.150 --> 00:48:19.600
So in summary, iCloud makes for a really
great user experience.

00:48:19.650 --> 00:48:24.250
And we highly recommend that your
applications take advantage of it.

00:48:24.380 --> 00:48:27.300
Key-Value Storage in particular
allows your application to build

00:48:27.300 --> 00:48:31.600
a persistent and consistent user
experience across all devices.

00:48:31.640 --> 00:48:34.770
And the API is very simple to use.

00:48:34.920 --> 00:48:38.900
We've also added new APIs in iCloud
Accounts so that your application

00:48:39.130 --> 00:48:41.740
can very simply determine if
an iCloud account is configured

00:48:41.740 --> 00:48:47.360
on the device and learn about
notifications if the account changes.

00:48:48.030 --> 00:48:52.630
And we also talked about document
storage and the types of documents

00:48:52.630 --> 00:48:55.610
that you can be putting into iCloud
and some of the best practices for

00:48:55.670 --> 00:48:57.400
interacting with the Ubiquiti container.

00:48:57.400 --> 00:48:59.030
And so with that,
I'd like to thank you very

00:48:59.030 --> 00:49:00.460
much for coming this afternoon.

00:49:00.460 --> 00:49:01.800
I hope you have a great week.