WEBVTT

00:00:11.130 --> 00:00:12.530
Good afternoon.

00:00:12.650 --> 00:00:15.490
Welcome to the Evolution of
View Controllers on iOS.

00:00:15.700 --> 00:00:18.850
I'm Matt Gamble,
member of the UI kit team here at Apple.

00:00:18.930 --> 00:00:21.730
I'll be joined on stage
later by my colleague,

00:00:21.730 --> 00:00:22.710
Bruce Nilo.

00:00:23.900 --> 00:00:25.790
Now,
today we're going to be talking a little

00:00:25.790 --> 00:00:29.430
bit about why we use view controllers,
how we can use them most

00:00:29.540 --> 00:00:31.430
effectively in our applications.

00:00:31.650 --> 00:00:34.290
And then later,
Bruce is going to talk about some of

00:00:34.290 --> 00:00:38.340
the changes that we've had in iOS 6
and how to get your apps ready for a

00:00:38.340 --> 00:00:41.330
lot of the changes as we move forward.

00:00:44.270 --> 00:00:47.500
So, view controllers.

00:00:47.990 --> 00:00:50.700
Why do we want to use UI View Controller?

00:00:50.740 --> 00:00:54.880
Well, view controllers make
common tasks simpler.

00:00:57.110 --> 00:00:59.860
Now, first of all, as you could probably
guess from the name,

00:00:59.980 --> 00:01:01.690
view controllers manage a view.

00:01:02.050 --> 00:01:05.120
Well, actually, more specifically,
they manage a view hierarchy

00:01:05.120 --> 00:01:06.890
that's rooted at a view.

00:01:06.990 --> 00:01:11.080
And this could be a view hierarchy
that you compose in code yourself,

00:01:11.210 --> 00:01:14.250
or it could be one that you
design in Interface Builder.

00:01:14.570 --> 00:01:17.270
In either case,
UIViewController takes care

00:01:17.330 --> 00:01:20.760
of loading the view when
it's necessary automatically,

00:01:20.810 --> 00:01:21.990
even from a nib.

00:01:24.790 --> 00:01:27.810
In addition,
there's also some appearance calls

00:01:27.860 --> 00:01:32.150
that UI View Controller takes care of
to tell you when your view is moving

00:01:32.150 --> 00:01:34.140
in and out of the view hierarchy.

00:01:34.300 --> 00:01:36.920
And as Bruce will show you later,
there's actually some interesting

00:01:36.920 --> 00:01:40.140
things that you can do with
these calls if you're designing

00:01:40.140 --> 00:01:42.100
your own custom container.

00:01:43.700 --> 00:01:44.970
Auto rotation.

00:01:44.970 --> 00:01:48.470
This is another benefit
of UI View Controller.

00:01:48.470 --> 00:01:53.160
And this can be as simple as setting your
auto resizing masks correctly or taking

00:01:53.160 --> 00:01:55.700
advantage of the new Auto Layout system.

00:01:55.700 --> 00:01:59.860
Or you can actually make use of some
callbacks in the View Controller API,

00:01:59.860 --> 00:02:02.700
such as will rotate to
interface orientation,

00:02:02.700 --> 00:02:05.700
which is telling you when
this rotation is beginning.

00:02:05.700 --> 00:02:09.700
And then will animate rotation
to interface orientation.

00:02:09.700 --> 00:02:12.680
And this is where if you wanted
to do some interesting animations

00:02:12.710 --> 00:02:16.820
as part of this rotation,
in your own View Controller,

00:02:16.820 --> 00:02:18.700
you could take care of this here.

00:02:18.700 --> 00:02:22.560
And then finally did rotate to
interface orientation when the

00:02:22.560 --> 00:02:24.700
rotation event has completed.

00:02:27.660 --> 00:02:31.600
UI View Controller also
centralizes responsibility.

00:02:31.650 --> 00:02:34.250
I'd like to illustrate
this with an example.

00:02:34.280 --> 00:02:37.600
So let's imagine we have a view
hierarchy with a common goal,

00:02:37.600 --> 00:02:43.340
maybe taking some input from the user or
presenting some content from somewhere.

00:02:43.590 --> 00:02:46.550
And for everything to work together,
there's a bunch of messages being

00:02:46.550 --> 00:02:50.710
passed as different things are updating
their state and changing other state.

00:02:50.890 --> 00:02:53.850
And then maybe we throw in a model
object we got from somewhere,

00:02:53.850 --> 00:02:56.770
and then, of course,
that guy has to talk to everybody else.

00:02:57.190 --> 00:03:01.280
Everybody's talking with each other,
and this quickly becomes infeasible

00:03:01.280 --> 00:03:03.040
and a nightmare to maintain.

00:03:03.130 --> 00:03:06.370
Well,
UI View Controller is a great place to

00:03:06.410 --> 00:03:13.360
centralize this responsibility so that
it manages the content from the model

00:03:13.710 --> 00:03:16.880
and updating the view as is appropriate.

00:03:16.920 --> 00:03:21.410
Now, if this diagram looks pretty
familiar -- this is actually because

00:03:21.410 --> 00:03:26.640
it should -- this is a pattern,
the MVC, Model View Controller pattern,

00:03:26.640 --> 00:03:26.640
that you've probably heard of.

00:03:26.640 --> 00:03:32.650
And so the View Controller acts
as the controller in this pattern,

00:03:32.650 --> 00:03:36.780
mediating between the model and the view.

00:03:38.550 --> 00:03:42.750
So managing a view hierarchy,
centralizing responsibility,

00:03:42.800 --> 00:03:46.740
it's also a very reusable class.

00:03:46.740 --> 00:03:49.140
Now let's imagine we have our
interface that we've designed,

00:03:49.140 --> 00:03:51.900
perhaps an interface builder like here.

00:03:51.900 --> 00:03:56.040
We could just present this view
as in our application just as is.

00:03:56.110 --> 00:03:57.500
That's great.

00:03:57.500 --> 00:04:00.350
Or we could use this as the
view controller class that we

00:04:00.350 --> 00:04:04.940
vend to a page view controller
with its data source methods.

00:04:04.940 --> 00:04:07.350
We're reusing this,
changing the content as makes

00:04:07.420 --> 00:04:09.790
sense for our application.

00:04:10.420 --> 00:04:12.220
Maybe we have a universal application.

00:04:12.490 --> 00:04:16.580
We can reuse this same ViewController
class and show its content in

00:04:16.580 --> 00:04:18.810
a popover controller instead.

00:04:19.090 --> 00:04:22.570
Or maybe we need to design our
own custom application flow,

00:04:22.570 --> 00:04:27.940
and we've elected to use the new
containment API from Introducing 5.0,

00:04:27.960 --> 00:04:31.140
and we can use it showing it on screen
with some other view controllers,

00:04:31.240 --> 00:04:34.740
whatever makes the most sense
for our application flow.

00:04:36.770 --> 00:04:40.660
Also, you can take advantage of a lot
of the container controllers

00:04:40.790 --> 00:04:45.470
that the system provides that
take care of common workflows.

00:04:45.600 --> 00:04:49.200
Just like the navigation controller
or the tab bar controller,

00:04:49.200 --> 00:04:50.540
and there's many others.

00:04:50.640 --> 00:04:52.900
And your clients are used to these.

00:04:52.900 --> 00:04:54.760
They've used them in
lots of applications,

00:04:54.760 --> 00:04:58.390
and they'll be able to get
up to speed very quickly.

00:05:00.190 --> 00:05:04.870
There's also some view controllers
that we vend that you could then

00:05:04.940 --> 00:05:08.190
present in your application,
such as this Tweet Compose

00:05:08.190 --> 00:05:11.700
View Controller and many others.

00:05:11.800 --> 00:05:13.880
And for this reason,
they make a nice size

00:05:13.990 --> 00:05:16.590
block to pass around,
and that's something you

00:05:16.590 --> 00:05:18.080
want to be considering.

00:05:21.280 --> 00:05:23.260
So hopefully I've convinced
you that it's a good idea to

00:05:23.420 --> 00:05:25.000
make use of view controllers.

00:05:25.000 --> 00:05:26.590
They can really help you.

00:05:26.710 --> 00:05:30.170
And so now let's talk a little bit
about how to use view controllers in

00:05:30.170 --> 00:05:32.390
your applications most effectively.

00:05:33.210 --> 00:05:36.440
So to begin with, the typical application
will have one window,

00:05:36.440 --> 00:05:40.440
and this one window will have
one root view controller.

00:05:40.570 --> 00:05:43.500
And you would establish this relationship
probably in one of the application

00:05:43.500 --> 00:05:47.930
did or will finish launching methods
by passing it to the window with

00:05:47.940 --> 00:05:51.400
the set root view controller method.

00:05:51.470 --> 00:05:54.980
So this establishes this
relationship with the window.

00:05:55.410 --> 00:05:59.260
And then, when we want to be building our
view controller hierarchy to

00:05:59.260 --> 00:06:04.190
describe our application flow,
there's generally three main

00:06:04.470 --> 00:06:06.370
paths that we'll be using.

00:06:06.750 --> 00:06:11.840
Now, the first of these paths is with
the system-provided containers,

00:06:11.920 --> 00:06:14.540
such as the Navigation
Controller and Tab Bar Controller,

00:06:14.540 --> 00:06:16.520
and there's many others like
the Split View Controller and

00:06:16.520 --> 00:06:18.000
the Page View Controller.

00:06:18.060 --> 00:06:21.730
And like I mentioned,
these are commonly used

00:06:21.730 --> 00:06:25.560
in applications on iOS,
so users are already familiar with them.

00:06:25.560 --> 00:06:26.690
They know how to use them.

00:06:26.790 --> 00:06:29.300
They're ready to go.

00:06:29.300 --> 00:06:32.290
They'll be familiar with your
app before they've even used it.

00:06:32.390 --> 00:06:36.210
So it's a great idea to use these
and take advantage of them whenever

00:06:36.210 --> 00:06:38.820
it makes sense for your application.

00:06:39.780 --> 00:06:43.050
Now, the second path is presentation.

00:06:43.180 --> 00:06:48.110
Presentation can be a great way to
present content that exists outside

00:06:48.110 --> 00:06:50.540
of your standard application flow.

00:06:50.830 --> 00:06:54.630
Perhaps it's some modal content,
like maybe a login or

00:06:54.820 --> 00:06:56.830
some other idea like this.

00:06:57.000 --> 00:07:01.480
And so you can simply present
this content over top of

00:07:01.770 --> 00:07:04.040
your other view controllers.

00:07:04.110 --> 00:07:06.780
And since you're using the
presentation mechanics,

00:07:06.980 --> 00:07:11.290
all of your rotation and all of the
standard view controller mechanisms

00:07:11.390 --> 00:07:14.770
that you expect will work correctly.

00:07:17.830 --> 00:07:21.600
And finally, creating a custom container.

00:07:21.650 --> 00:07:25.680
If you have an application
flow that is not provided by

00:07:25.680 --> 00:07:29.930
one of our system containers,
or if perhaps you want to

00:07:30.340 --> 00:07:33.900
use transitions between your
content that we don't provide,

00:07:33.980 --> 00:07:36.960
you can do it yourself with a
custom container controller,

00:07:37.040 --> 00:07:41.730
taking advantage of the containment
API that was introduced in iOS 5.

00:07:42.240 --> 00:07:44.950
I'd like to go into a little bit more
detail as to how you would do this.

00:07:45.220 --> 00:07:48.740
So let's say we have our parent
view controller with its view

00:07:48.740 --> 00:07:52.150
hierarchy rooted at its view,
and we want to add a

00:07:52.150 --> 00:07:54.300
child view controller.

00:07:54.400 --> 00:07:57.730
Well, we'd begin by calling the
addChildViewController method

00:07:57.730 --> 00:08:00.630
on the parent view controller,
passing in the child.

00:08:00.930 --> 00:08:04.510
This establishes the view
controller relationship,

00:08:04.510 --> 00:08:05.740
parent-child.

00:08:06.140 --> 00:08:09.400
Then we go ahead and add the
root view of this child view

00:08:09.400 --> 00:08:13.140
controller's view hierarchy wherever
it makes sense in our application,

00:08:13.140 --> 00:08:16.940
in our view hierarchy, with add subview.

00:08:17.060 --> 00:08:19.770
And then finally we call
didMoveToParentViewController on

00:08:19.770 --> 00:08:22.960
the child view controller passing
in the parent view controller,

00:08:22.960 --> 00:08:25.160
which in this case is the new parent.

00:08:25.230 --> 00:08:28.560
Now you'll notice that we didn't
call willMove at the beginning,

00:08:28.570 --> 00:08:31.420
and that's actually because
the addChildViewController

00:08:31.560 --> 00:08:33.950
takes care of that for us,
and so we're only

00:08:34.050 --> 00:08:36.130
responsible for the didMove.

00:08:36.230 --> 00:08:39.550
So let's say in our application
flow it's now come time to

00:08:39.550 --> 00:08:41.600
remove this view controller.

00:08:41.640 --> 00:08:46.420
And to do so, we start by calling the
willMoveToParentViewController

00:08:46.420 --> 00:08:48.810
saying that nil,
it's not going to have

00:08:48.840 --> 00:08:50.100
a parent at this point.

00:08:50.130 --> 00:08:54.200
And just as we saw before,
we're calling the will and we won't

00:08:54.200 --> 00:08:56.930
be calling the did at the end of this.

00:08:57.750 --> 00:09:03.610
Next, we'll remove the view from
its superviews hierarchy.

00:09:04.220 --> 00:09:05.940
And then finally,
call remove from parent view

00:09:05.940 --> 00:09:09.060
controller on the child,
and that severs this relationship.

00:09:09.160 --> 00:09:11.060
And we're back to where we started.

00:09:11.170 --> 00:09:14.110
Now, there's a lot more -- there
are a lot more interesting

00:09:14.110 --> 00:09:15.160
things that you can do here.

00:09:15.360 --> 00:09:17.580
And, again,
Bruce is going to go into some

00:09:17.680 --> 00:09:20.930
more details to how you can
do this in your applications.

00:09:22.030 --> 00:09:26.420
So there's a few rules when it comes to,
to custom containers.

00:09:26.420 --> 00:09:29.440
More like guidelines,
but they're good to follow.

00:09:29.590 --> 00:09:32.050
First one is, well, the main one,
is parents make the rules

00:09:32.060 --> 00:09:34.230
and children follow them.

00:09:34.330 --> 00:09:37.780
So parents add children,
not the other way around.

00:09:37.780 --> 00:09:41.850
It's not a great idea to find some view
controller that you want to be a parent

00:09:41.890 --> 00:09:46.660
of this child for whatever reason and
use the containment API to establish

00:09:46.660 --> 00:09:48.770
that relationship by calling add child.

00:09:48.960 --> 00:09:52.510
You'd want to use whatever the
API that that container provides,

00:09:52.660 --> 00:09:54.220
because that will be its entry point.

00:09:54.390 --> 00:09:56.570
And you see we do that a
lot with our containers,

00:09:56.680 --> 00:09:59.280
like push view controller
on navigation controller,

00:09:59.410 --> 00:09:59.800
et cetera.

00:09:59.800 --> 00:10:02.700
So use that API, not the containment API.

00:10:02.700 --> 00:10:05.990
That's really meant only for subclassers.

00:10:06.540 --> 00:10:12.000
And also,
parents manage their children's views.

00:10:12.060 --> 00:10:14.870
There will be an example later as
to why this makes as much sense,

00:10:14.910 --> 00:10:18.000
but this calls back to the
centralizing responsibility.

00:10:18.000 --> 00:10:21.770
If all the views, the children views,
are taking care of their own layout,

00:10:21.880 --> 00:10:24.330
things can quickly get confusing,
especially when there

00:10:24.330 --> 00:10:26.100
needs to be communication.

00:10:26.100 --> 00:10:29.570
So it's best to let the root
view controller manage the

00:10:29.570 --> 00:10:31.900
layout of its children's views.

00:10:32.850 --> 00:10:34.720
So, quick summary.

00:10:35.040 --> 00:10:36.700
Why use view controllers?

00:10:36.880 --> 00:10:39.500
Well, they manage a view hierarchy,
making that easy.

00:10:39.560 --> 00:10:41.460
They centralize responsibility.

00:10:41.550 --> 00:10:44.490
And they're very usable,
which makes them this great size

00:10:44.490 --> 00:10:48.200
unit to vend and to get back
from the system and use yourself.

00:10:48.200 --> 00:10:54.300
And using them effectively,
one window with one root view controller,

00:10:54.600 --> 00:10:58.840
and then to build up your
view controller hierarchy,

00:10:59.080 --> 00:11:02.640
take advantage of our
system provided containers,

00:11:03.020 --> 00:11:06.420
of the presentation mechanism,
and then finally creating

00:11:06.500 --> 00:11:08.920
your own custom containers.

00:11:09.500 --> 00:11:13.010
So now I'd like to invite Bruce on
stage to talk to us about where

00:11:13.010 --> 00:11:15.280
we're going with view controllers.

00:11:20.790 --> 00:11:23.790
Thank you, Matt.

00:11:23.860 --> 00:11:25.720
Good afternoon.

00:11:25.850 --> 00:11:27.600
My name's Bruce Nilo.

00:11:27.710 --> 00:11:31.700
My business card says I'm
a view controller mechanic.

00:11:32.090 --> 00:11:36.000
Not a messy job,
as some mechanic jobs are,

00:11:36.140 --> 00:11:39.610
but after this week I think I'm going
to ask my boss for a promotion to view

00:11:39.730 --> 00:11:41.890
controller philosopher or something.

00:11:41.900 --> 00:11:45.860
I'm going to pick up where Matt left off.

00:11:45.980 --> 00:11:49.260
I want to talk a little
bit about the new APIs,

00:11:49.260 --> 00:11:54.340
some of the new APIs that we're
adding to View Controller in iOS 6,

00:11:54.340 --> 00:11:57.850
and some of the APIs that
we're going to say goodbye to.

00:11:59.320 --> 00:12:02.960
We're going to drill down a little bit
more into view controller containment.

00:12:03.110 --> 00:12:07.830
Another way of thinking about that is
how you might embed a view controller's

00:12:07.830 --> 00:12:10.180
view hierarchy into another one.

00:12:11.200 --> 00:12:12.930
We're going to talk about auto rotation.

00:12:12.960 --> 00:12:19.600
We're kind of changing our approach to
auto rotation in iOS 6 a little bit.

00:12:19.700 --> 00:12:21.410
And it's important to understand that.

00:12:21.530 --> 00:12:23.090
And then there's going to
be a bunch of other stuff.

00:12:23.240 --> 00:12:25.530
The other stuff is actually important.

00:12:25.640 --> 00:12:29.560
It's kind of more of what's
motivating some of these changes.

00:12:29.560 --> 00:12:33.060
So you get a sense of where we're going
and where we're going to be taking

00:12:33.060 --> 00:12:35.990
view controllers into the future.

00:12:36.830 --> 00:12:40.510
So I'm also going to demonstrate
an application that I put together

00:12:40.640 --> 00:12:44.500
to highlight some of these points.

00:12:45.030 --> 00:12:47.400
I want to take a little digression,
if you'll let me,

00:12:47.400 --> 00:12:52.330
to talk about that upside-down
pachyderm in the picture.

00:12:52.780 --> 00:12:55.400
It really has nothing to
do with this presentation.

00:12:55.400 --> 00:13:01.290
It's just a photo that I took,
except I realized about a couple of

00:13:01.290 --> 00:13:06.730
days ago that it's actually a metaphor
for how we sometimes evolve APIs.

00:13:06.760 --> 00:13:08.530
It can be a little bit
of a balancing act.

00:13:08.560 --> 00:13:11.680
And I didn't realize it,
but my subconscious was a

00:13:11.680 --> 00:13:13.670
little bit prescient there.

00:13:14.840 --> 00:13:20.020
So this is going to be showing an
application with a custom container

00:13:20.090 --> 00:13:22.510
with its own kind of application flow.

00:13:22.820 --> 00:13:25.420
You get a sense of it there.

00:13:25.900 --> 00:13:29.900
We're going to talk about
best containment practices.

00:13:30.120 --> 00:13:34.810
We're going to talk about how to
adopt the new auto-rotation behavior

00:13:35.010 --> 00:13:37.740
that I will be discussing shortly.

00:13:37.850 --> 00:13:43.740
And we're going to talk about
how do you ensure that your view

00:13:43.740 --> 00:13:47.790
controller knows how to lay itself
independently of the interface

00:13:47.790 --> 00:13:50.690
orientation that it's presented in.

00:13:51.000 --> 00:13:53.310
And finally,
we're going to highlight some

00:13:53.400 --> 00:13:58.890
examples where some of these best
practices should actually be applied.

00:14:00.430 --> 00:14:04.700
So, let's talk about where view
controllers are right now.

00:14:04.820 --> 00:14:08.970
And there's kind of this big general
abstract point is that we want view

00:14:09.050 --> 00:14:13.320
controllers to be able to basically
compose well with one another.

00:14:13.320 --> 00:14:16.030
And by compose,
what I mean is that I should be

00:14:16.030 --> 00:14:20.040
able to present a view controller
on top of another view controller

00:14:20.040 --> 00:14:23.760
that maybe is inside of a form
sheet where a popover might pop up

00:14:23.760 --> 00:14:26.220
that has another view controller.

00:14:26.830 --> 00:14:30.100
And all of these things interact
and I can rotate it and the status

00:14:30.100 --> 00:14:31.690
bar winds up in the right place.

00:14:32.010 --> 00:14:34.740
It all just works consistently
one with the other.

00:14:34.800 --> 00:14:36.580
That's a primary objective.

00:14:36.580 --> 00:14:42.640
View controllers should just work
in all of the various presentation

00:14:42.640 --> 00:14:45.290
operators we have in UIKit.

00:14:45.720 --> 00:14:50.210
But over time, some of the assumptions
have changed a little bit.

00:14:50.330 --> 00:14:52.100
We've started to add new device types.

00:14:52.100 --> 00:14:57.920
We began to add many view controllers
onto the screen at the same time.

00:14:57.920 --> 00:15:01.830
So this is kind of an evolution from
where we started with the phone.

00:15:02.840 --> 00:15:07.670
And we're constantly adding new system
view controllers that you can call

00:15:07.670 --> 00:15:10.840
out to from your own view controllers
and from other view controllers.

00:15:10.840 --> 00:15:16.340
So the whole network of application flows
that is possible has grown substantially.

00:15:16.340 --> 00:15:20.550
And because of that,
some of the internal APIs have to evolve

00:15:20.550 --> 00:15:23.330
so that we can keep them consistent.

00:15:23.340 --> 00:15:26.870
I guess another way of framing what
I'm going to be talking about in

00:15:26.870 --> 00:15:30.530
terms of the APIs is I'm not going
to be talking about the intelligent

00:15:30.530 --> 00:15:32.340
design of view controllers.

00:15:32.340 --> 00:15:34.170
controllers.

00:15:36.150 --> 00:15:38.150
Sorry about that.

00:15:38.290 --> 00:15:41.280
So let's talk a little bit about

00:15:41.640 --> 00:15:43.100
How we've changed containment.

00:15:43.180 --> 00:15:50.320
Containment for view controllers, again,
was really added in iOS 5 to meet

00:15:50.320 --> 00:15:54.840
that objective of being able to
compose view controllers with

00:15:54.840 --> 00:15:56.340
one another in a consistent way.

00:15:56.830 --> 00:15:59.970
Prior to iOS 5,
basically the only way to embed one view

00:15:59.970 --> 00:16:04.650
controller in another was to grab its
view and slam it into the view hierarchy

00:16:04.650 --> 00:16:09.040
of another view controller's view,
except for our system containers,

00:16:09.090 --> 00:16:13.760
which magically knew how to manage this
relationship between view controllers.

00:16:13.760 --> 00:16:20.700
So that was no longer a very
composable recommendation.

00:16:20.700 --> 00:16:24.170
We needed to provide a way for
you as third-party developers to

00:16:24.180 --> 00:16:26.380
build your own custom containers.

00:16:26.460 --> 00:16:29.060
And inform the system
that you were doing so.

00:16:29.140 --> 00:16:33.540
So this picture that Matt has shown
earlier demonstrates that before you

00:16:33.570 --> 00:16:38.480
add the view hierarchy of a child view
controller into another view hierarchy,

00:16:38.480 --> 00:16:43.580
tell the system, tell the parent, hey,
I am a child.

00:16:43.600 --> 00:16:49.600
And that allows us in the system to
know that there's another informed

00:16:49.600 --> 00:16:56.050
or interested player in the mix when
we start presenting and rotating.

00:16:56.600 --> 00:16:58.270
and the like.

00:17:01.960 --> 00:17:04.220
All right,
so I'm going to talk about some

00:17:04.220 --> 00:17:05.970
of the new API that we've added.

00:17:06.220 --> 00:17:12.610
There's one API which we've
called Should Automatically

00:17:12.980 --> 00:17:15.340
Forward Appearance Methods.

00:17:15.420 --> 00:17:17.000
There used to be a much
bigger method name,

00:17:17.000 --> 00:17:20.510
and I'll show you what that
was a little bit later.

00:17:21.070 --> 00:17:22.770
Let's make believe we return no.

00:17:22.890 --> 00:17:27.340
The default for this is yes, by the way,
because most of the time

00:17:27.340 --> 00:17:31.750
the system takes handles,
the forwarding of appearance.

00:17:31.850 --> 00:17:34.500
That's appearance methods are
basically view will appear,

00:17:34.500 --> 00:17:38.930
view did appear, view will disappear,
and view did disappear to its

00:17:38.930 --> 00:17:41.520
children at the right points in time.

00:17:41.570 --> 00:17:44.730
But you might want to build a
container that actually doesn't

00:17:44.740 --> 00:17:47.200
want to use the default logic.

00:17:47.230 --> 00:17:50.980
You would override this
method and return no.

00:17:52.590 --> 00:17:56.360
So this is an example,
some hypothetical container class,

00:17:56.360 --> 00:17:58.000
which has a revealed child method.

00:17:58.000 --> 00:18:01.000
And we've added two new methods.

00:18:01.000 --> 00:18:05.600
These actually weren't
published as API on iOS 5,

00:18:05.730 --> 00:18:09.500
called BeginAppearanceTransition,
Animated, EndAppearanceTransition.

00:18:09.890 --> 00:18:16.410
And basically these are used by
a subclass of UIViewController

00:18:16.500 --> 00:18:21.440
that's implementing a container
to inform its children that they

00:18:21.440 --> 00:18:25.330
are about to appear or disappear.

00:18:25.970 --> 00:18:27.740
Why would you want to do that?

00:18:27.860 --> 00:18:31.980
Well, sometimes you might be building
a complex container controller,

00:18:31.980 --> 00:18:36.560
and maybe the actual views of the
children are tiled off-screen.

00:18:36.560 --> 00:18:40.740
And what you're really trying
to do is you want to animate one

00:18:40.790 --> 00:18:45.510
of these off-screen views into
front and center stage somehow.

00:18:46.280 --> 00:18:50.080
And the system wouldn't
do the right thing then,

00:18:50.180 --> 00:18:52.910
because you want to basically
tell the view controller that's

00:18:52.910 --> 00:18:56.320
off-screen that it's appearing when
you actually intend it to appear

00:18:56.320 --> 00:18:58.170
and animate it front and center.

00:18:58.180 --> 00:19:01.190
Normally,
the way that the appearance callbacks

00:19:01.190 --> 00:19:04.920
are generated is tied to when a
child view controller's view is

00:19:04.920 --> 00:19:09.380
added to the window hierarchy and
removed from the window hierarchy.

00:19:09.400 --> 00:19:13.140
So in such a case,
if you have such a complex set of

00:19:13.410 --> 00:19:18.890
animations that you want to animate,
you would return no from the method

00:19:18.890 --> 00:19:22.380
that was on the previous page,
you would implement a

00:19:22.380 --> 00:19:25.510
method like this one,
and you'd call those two new

00:19:25.510 --> 00:19:28.930
API methods highlighted below.

00:19:31.880 --> 00:19:34.260
As I was saying,
normally you would just add the subview.

00:19:34.260 --> 00:19:36.140
You wouldn't have to do anything else.

00:19:36.200 --> 00:19:39.180
But in this case,
just to emphasize the point,

00:19:39.330 --> 00:19:43.740
we've created an animation
using the UIView animation API.

00:19:43.960 --> 00:19:50.200
And inside the animation block,
we are going to animate the frame into

00:19:50.200 --> 00:19:53.680
the visible section of the window.

00:19:54.250 --> 00:19:58.020
One thing not to forget is
that the container's appearance

00:19:58.020 --> 00:20:04.040
callbacks need to forward that
information to its children as well,

00:20:04.040 --> 00:20:06.120
and their own view will
appear if you did disappear.

00:20:06.120 --> 00:20:08.850
For example,
if I have a container controller

00:20:08.920 --> 00:20:12.820
and some child presents another
view controller full screen,

00:20:12.820 --> 00:20:15.910
that container is actually
going to disappear.

00:20:15.920 --> 00:20:18.810
And so when it reappears,
you want to tell its children in

00:20:18.830 --> 00:20:20.680
turn that they are reappearing.

00:20:20.700 --> 00:20:22.860
Now,
I didn't show the other side of this,

00:20:22.860 --> 00:20:26.910
the disappearing, but it's an inverse,
effectively, of these methods.

00:20:31.800 --> 00:20:34.540
Matt made this point earlier.

00:20:34.630 --> 00:20:37.070
In general,
what you want to do is you want

00:20:37.260 --> 00:20:42.000
to wrap all of the calls to the
View Controller Containment API into

00:20:42.000 --> 00:20:47.550
a method that is effectively
published for use by its clients.

00:20:47.730 --> 00:20:50.910
So, in this case,
Reveal Child calls the internal

00:20:51.280 --> 00:20:55.080
View Controller methods
that are highlighted there,

00:20:55.180 --> 00:20:59.150
and then anyone who wants to
add a child into that container

00:20:59.150 --> 00:21:01.580
class would call Reveal Child.

00:21:07.150 --> 00:21:10.060
Another point that Matt made
that I'd like to reemphasize

00:21:10.060 --> 00:21:13.180
is the parent's responsible
for the frames of its children.

00:21:13.180 --> 00:21:16.530
And by frames of its children,
I mean the frames of the

00:21:16.530 --> 00:21:18.070
view of its children.

00:21:20.980 --> 00:21:25.940
The child view controller is
responsible for its own view hierarchy.

00:21:26.060 --> 00:21:28.840
So in its view,
we'll lay out subviews methods,

00:21:28.860 --> 00:21:34.240
and now in iOS 6,
in its update view constraints method,

00:21:34.300 --> 00:21:36.510
it can go wild below itself.

00:21:36.630 --> 00:21:39.580
It can access its bounds,
it can move things around,

00:21:39.650 --> 00:21:42.980
but it can't indicate,
or it shouldn't indicate,

00:21:43.040 --> 00:21:46.560
where it lives in its parent's view.

00:21:48.510 --> 00:21:52.030
And just to go back to this method again,
that's what that method

00:21:52.030 --> 00:21:53.670
Adjust Frame for Child.

00:21:53.810 --> 00:21:57.140
That is a method that is
implemented in the parent,

00:21:57.140 --> 00:21:58.570
in the container controller.

00:22:02.770 --> 00:22:04.740
So there is a worst practice.

00:22:04.740 --> 00:22:07.270
I mean,
kind of a semi-bad practice might be that

00:22:07.270 --> 00:22:10.710
you've implemented a parent and child,
and the child adds its view

00:22:10.710 --> 00:22:12.090
directly to its parent.

00:22:12.350 --> 00:22:15.120
It's not great, but it's not the worst.

00:22:15.150 --> 00:22:18.110
The worst is that you add it
on a class you have nothing--

00:22:18.300 --> 00:22:19.620
you know nothing about.

00:22:19.630 --> 00:22:21.940
And this has actually happened.

00:22:21.940 --> 00:22:25.470
And sometimes it actually
was a useful thing to do.

00:22:25.680 --> 00:22:27.930
But it is really bad practice.

00:22:27.940 --> 00:22:32.420
We might start throwing exceptions
and really not being happy

00:22:32.420 --> 00:22:35.120
if that continues to happen.

00:22:35.160 --> 00:22:39.050
If Dante were alive,
I might petition him.

00:22:42.430 --> 00:22:45.440
Okay, we have a few other changes.

00:22:45.590 --> 00:22:46.390
This is that method.

00:22:46.400 --> 00:22:48.400
I'm a little bit embarrassed
about this method.

00:22:48.400 --> 00:22:50.180
It got introduced in iOS 5.

00:22:50.410 --> 00:22:52.230
We're deprecating it now.

00:22:52.320 --> 00:22:56.000
I think it competed for the
longest selector name in iOS.

00:22:56.170 --> 00:22:59.100
I'm not sure,
and I'm not even going to try to say it.

00:22:59.260 --> 00:23:02.810
But we broke that
method into two methods.

00:23:04.290 --> 00:23:08.490
There's the should automatically
forward rotation methods and the should

00:23:08.490 --> 00:23:12.190
automatically forward appearance methods,
which we talked about.

00:23:12.330 --> 00:23:15.260
Typically,
subclassers of UIViewController that are

00:23:15.260 --> 00:23:19.920
implementing containers really only care
about one or the other and not both,

00:23:19.940 --> 00:23:24.480
so it made perfect sense to split
the method and shorten the name.

00:23:26.500 --> 00:23:30.800
We discuss the begin appearance and
end appearance transition methods.

00:23:30.910 --> 00:23:34.280
Just in case it's not obvious,
it takes a Boolean,

00:23:34.280 --> 00:23:38.770
which is yes if we're talking
about a view controller appearing

00:23:38.910 --> 00:23:41.820
or no if it's disappearing.

00:23:44.920 --> 00:23:46.180
Auto rotation.

00:23:46.310 --> 00:23:50.200
So this is kind of a big set of changes.

00:23:50.300 --> 00:23:54.600
So in iOS 5 and earlier,
I mean from the beginning,

00:23:54.680 --> 00:23:57.810
basically a view controller
would override should auto

00:23:57.920 --> 00:24:03.390
rotate to interface orientation,
and this method is queried

00:24:03.390 --> 00:24:03.390
prior to a rotation.

00:24:05.690 --> 00:24:06.600
Great.

00:24:06.780 --> 00:24:10.440
Perhaps less intuitively,
it's also queried prior to presentations.

00:24:10.440 --> 00:24:15.640
And sometimes you can end up with
kind of weird mixed orientations where

00:24:15.640 --> 00:24:19.400
you're holding the device in portrait
and something slides in in landscape

00:24:19.400 --> 00:24:22.140
and the status bar is off to one side.

00:24:22.140 --> 00:24:26.510
And this was all the way it was,
this was the mechanics by which we

00:24:26.590 --> 00:24:29.120
were able to determine what to do.

00:24:30.330 --> 00:24:33.940
Oftentimes the container controllers
would ask their children,

00:24:33.980 --> 00:24:36.830
what is my supported
interface orientation?

00:24:36.840 --> 00:24:40.660
So you'd push a navigation controller on,
the navigation controller

00:24:40.660 --> 00:24:42.560
would be a review controller,
you'd rotate it,

00:24:42.590 --> 00:24:45.620
and whether or not the navigation
controller rotated was really

00:24:45.620 --> 00:24:48.710
a function of what the top
view controller said to do.

00:24:48.720 --> 00:24:52.510
So sometimes it would rotate,
sometimes it wouldn't rotate.

00:24:56.000 --> 00:24:59.240
So there are a couple
of problems with that.

00:24:59.300 --> 00:25:00.700
Let's go through a few of them.

00:25:00.800 --> 00:25:03.930
So the first one that kind
of gives an inkling that

00:25:04.010 --> 00:25:07.740
something's a little bit amiss is,
you know, what might support interface

00:25:07.750 --> 00:25:11.740
orientations is really not the same
question as do I want to rotate.

00:25:11.820 --> 00:25:15.660
These are not the same thing,
but they're kind of used

00:25:15.660 --> 00:25:18.350
interchangeably by that method.

00:25:18.800 --> 00:25:22.890
It's a little bit odd as we're moving
into this world of custom containers

00:25:22.950 --> 00:25:26.690
and multiple view controllers
on a screen that children get

00:25:26.810 --> 00:25:33.130
to veto what the supported interfaces
orientations of the parent are.

00:25:33.240 --> 00:25:37.220
It kind of encourages a way of thinking
about how you should lay yourself out

00:25:37.220 --> 00:25:39.620
based on your interface orientation.

00:25:39.620 --> 00:25:43.640
And back in the day when everything
was kind of full screen on a phone,

00:25:43.710 --> 00:25:45.230
that made a lot of sense.

00:25:45.230 --> 00:25:48.020
It begins to make less sense.

00:25:48.020 --> 00:25:49.440
So let's look at that.

00:25:49.440 --> 00:25:51.670
I mean, interface orientation.

00:25:51.680 --> 00:25:52.880
That's a method or a property.

00:25:52.880 --> 00:25:54.880
It's a property on UI view controller.

00:25:54.950 --> 00:25:58.660
And sometimes it just
doesn't mean that much.

00:25:58.660 --> 00:26:02.660
So there's a view controller,
a child view controller,

00:26:02.710 --> 00:26:07.280
and you could ask it what
its interface orientation is.

00:26:07.280 --> 00:26:11.120
On iOS 5 and earlier,
it's not exactly clear

00:26:11.120 --> 00:26:14.800
what that would return.

00:26:15.540 --> 00:26:17.620
Similarly, you have a popover controller.

00:26:17.750 --> 00:26:22.860
You can ask the popover controller,
"What is its interface orientation?"

00:26:22.970 --> 00:26:27.440
I can rotate and ask the popover
controller the exact same question,

00:26:27.500 --> 00:26:30.350
"What is its interface orientation?" Now,
some of you might know

00:26:30.350 --> 00:26:31.160
the answer to this.

00:26:31.160 --> 00:26:36.900
It's going to tell you that its
interface orientation is portrait.

00:26:37.020 --> 00:26:41.020
Part of the issue with that, in terms of,
again, going back to composability

00:26:41.020 --> 00:26:45.390
and making things consistent,
is that it kind of leads you to think,

00:26:45.470 --> 00:26:47.880
well, portrait is default layout, right?

00:26:47.880 --> 00:26:51.110
I mean, I'm now thinking that portrait
is what I mean when I just want

00:26:51.110 --> 00:26:52.670
the default layout to occur.

00:26:52.710 --> 00:26:56.860
So we're trying to shift away from
that type of thinking a little.

00:26:56.860 --> 00:27:00.430
So one other issue is that
interface orientation is also

00:27:00.480 --> 00:27:02.770
tightly coupled with rotation.

00:27:02.780 --> 00:27:03.940
And guess what?

00:27:04.010 --> 00:27:08.820
In iOS 5, we changed when rotation
callbacks actually are made.

00:27:08.900 --> 00:27:12.570
So it didn't even work anymore on iOS 5.

00:27:12.580 --> 00:27:15.920
So if I presented a full-screen
controller over another controller,

00:27:15.920 --> 00:27:16.730
rotated...

00:27:19.180 --> 00:27:20.100
Great.

00:27:20.100 --> 00:27:24.540
All of those rotation callbacks
that Matt enumerated earlier get

00:27:24.890 --> 00:27:26.750
sent to the top view controller.

00:27:26.780 --> 00:27:27.830
That's great.

00:27:27.960 --> 00:27:31.840
Now when I dismiss the top
view controller on iOS 5,

00:27:31.920 --> 00:27:36.590
those rotation callbacks do not get
sent to the presenting controller.

00:27:38.380 --> 00:27:45.270
So we've gotten a lot of bugs about that,
and it is a change in behavior that

00:27:45.280 --> 00:27:49.900
we talked about on iOS 5 and in WWDC,
in fact.

00:27:50.040 --> 00:27:54.610
So how do you target
earlier iOS releases?

00:27:55.690 --> 00:28:01.420
So, pre-iOS behavior has to be
checked by a selector check,

00:28:01.510 --> 00:28:02.440
basically.

00:28:02.580 --> 00:28:06.140
So, if you will layout subviews
is not implemented,

00:28:06.140 --> 00:28:10.320
you know you're on a pre-iOS 5 system,
which means that if you care about

00:28:10.400 --> 00:28:14.570
layout in a rotation like that,
you got to implement it

00:28:14.570 --> 00:28:17.250
in the rotation callbacks.

00:28:17.370 --> 00:28:21.920
So, typically what we recommend
is refactor your layout call,

00:28:22.040 --> 00:28:25.120
and if you're targeting
something prior to iOS 5,

00:28:25.120 --> 00:28:29.690
you're going to need to call out to
that method in the rotation callback.

00:28:29.810 --> 00:28:34.950
Otherwise, view will layout subviews is
going to handle the job just fine.

00:28:38.150 --> 00:28:40.740
So, moving forward.

00:28:40.800 --> 00:28:44.990
View controllers in general as
reusable components should attempt

00:28:45.230 --> 00:28:47.470
to support all orientations.

00:28:47.600 --> 00:28:52.330
Certainly most of the view controllers
that are vended by iOS are moving

00:28:52.510 --> 00:28:54.540
towards that -- into that direction.

00:28:54.540 --> 00:28:59.790
In fact,
I think they all do that at this point.

00:29:00.460 --> 00:29:03.180
A child view controller should
be able to lay out in any

00:29:03.310 --> 00:29:05.390
frame its parent specifies.

00:29:05.530 --> 00:29:07.400
So that kind of gets to,
it really doesn't care

00:29:07.400 --> 00:29:12.000
about interface orientation,
because maybe the parent is a

00:29:12.000 --> 00:29:16.140
subview off to the side somewhere.

00:29:16.790 --> 00:29:18.680
So this deserves a little bit of comment.

00:29:18.750 --> 00:29:22.890
There's a canonical example where you
present a video controller from portrait

00:29:23.050 --> 00:29:28.230
and the whole interface slides up in
landscape because in general we want

00:29:28.230 --> 00:29:30.350
video to kind of display in landscape.

00:29:30.420 --> 00:29:34.900
So we do have a way that you can
indicate that a presentation should

00:29:34.900 --> 00:29:39.410
come up in an orientation that's
distinct from the actual current

00:29:39.410 --> 00:29:42.040
orientation that the device is at.

00:29:42.110 --> 00:29:46.660
And this is the one way that we are
going to kind of allow these mixed

00:29:46.660 --> 00:29:49.460
orientations to continue forward.

00:29:49.950 --> 00:29:51.640
And in fact, that's the API.

00:29:51.690 --> 00:29:56.600
It's called Preferred Interface
Orientation for Presentation.

00:29:56.660 --> 00:30:00.520
A view controller that is
being presented can indicate,

00:30:00.590 --> 00:30:02.320
hey,
I always want to come up in landscape.

00:30:02.400 --> 00:30:05.000
It's one of my supported
interface orientations,

00:30:05.040 --> 00:30:07.290
and the system will do that for you.

00:30:07.410 --> 00:30:11.900
Another small change here is that
we only are going to be consulting

00:30:11.900 --> 00:30:14.470
the topmost full-screen controller.

00:30:14.580 --> 00:30:16.300
So that's typically the
root view controller,

00:30:16.300 --> 00:30:20.360
but it can be any other controller
that's presented full-screen.

00:30:22.230 --> 00:30:26.120
And one of the big things is, like,
an application should say,

00:30:26.210 --> 00:30:29.610
"These are the orientations
I support." You know,

00:30:29.670 --> 00:30:31.310
a view controller might
support everything,

00:30:31.480 --> 00:30:34.660
but an application might say,
"I only want to be -- to run in

00:30:34.680 --> 00:30:39.340
a landscape set of orientations."
And so we're making it a lot easier

00:30:39.340 --> 00:30:42.820
for the application to just do that,
typically with no code

00:30:42.820 --> 00:30:44.100
written whatsoever.

00:30:44.230 --> 00:30:47.740
So, for example,
inside of the Info.plist,

00:30:47.820 --> 00:30:53.910
there's a great interface in Xcode
where you can actually specify that.

00:30:54.070 --> 00:30:56.760
Previously, this kind of had to do
with launch orientations.

00:30:56.760 --> 00:31:00.920
Now it's also going to be respected
in terms of what the application's

00:31:01.160 --> 00:31:03.310
preferred orientations are.

00:31:05.810 --> 00:31:08.560
We're also going to add a method
to the application delegate

00:31:08.920 --> 00:31:12.580
so the application delegate,
if it wants, can compute what its

00:31:12.580 --> 00:31:15.870
preferred orientations are.

00:31:16.350 --> 00:31:18.670
All right, so let's summarize.

00:31:18.770 --> 00:31:22.820
We are deprecating that
mouthful of a method.

00:31:22.940 --> 00:31:26.540
We are introducing a
couple of new methods,

00:31:26.540 --> 00:31:33.950
supported interface orientations
and preferred interface

00:31:34.930 --> 00:31:36.770
orientation for presentation,
which I just discussed.

00:31:39.900 --> 00:31:42.030
We're going to introduce
a string constant.

00:31:42.060 --> 00:31:45.020
We will throw exceptions every
now and then if you do wacky

00:31:45.020 --> 00:31:48.070
things in your application,
like say you don't support any

00:31:48.070 --> 00:31:52.110
orientations or you have a preferred
orientation that isn't one of your

00:31:52.120 --> 00:31:56.790
accepted or supported orientations,
stuff like that.

00:31:58.580 --> 00:32:01.860
Now, I wanted to take a little
bit of a detour and say,

00:32:01.860 --> 00:32:03.990
okay, here's reality.

00:32:03.990 --> 00:32:05.730
I have an iOS 5 app.

00:32:05.860 --> 00:32:08.400
You know, I have this thing that
only works in portrait.

00:32:08.400 --> 00:32:11.400
I push something onto a
navigation controller.

00:32:11.400 --> 00:32:13.770
I rotate to the landscape,
and I really want to

00:32:13.770 --> 00:32:16.070
pop back into portrait,
and I really need all

00:32:16.070 --> 00:32:17.350
of that stuff to work.

00:32:17.640 --> 00:32:21.640
I don't have time to adopt the
new approach you're talking about.

00:32:21.640 --> 00:32:24.730
So there is a way to do that,
and it's going to require

00:32:24.780 --> 00:32:26.230
a little bit of work.

00:32:26.300 --> 00:32:29.290
If you're using one of
our system containers,

00:32:29.340 --> 00:32:31.500
you might have to subclass it.

00:32:31.560 --> 00:32:35.870
You might have to subclass it
just so you can override what the

00:32:35.870 --> 00:32:40.950
supported interface orientations are,
and then you'll get mostly the

00:32:40.950 --> 00:32:45.920
same behavior that you were looking
for or that you had in iOS 5.

00:32:47.480 --> 00:32:51.480
The one exception to that is any
use of set status bar orientation.

00:32:51.480 --> 00:32:54.500
I don't know how many of
you guys actually use that,

00:32:54.500 --> 00:32:58.380
but that is going to have to be
converted into a presentation if you

00:32:58.380 --> 00:33:03.110
want to kind of try to manipulate where
the status bar actually is oriented.

00:33:06.510 --> 00:33:11.580
So there are a couple other
changes that I want to go through.

00:33:12.370 --> 00:33:13.300
Okay, that's the big one.

00:33:13.300 --> 00:33:17.180
I did say that set status bar
orientation is being deprecated in iOS 6.

00:33:17.340 --> 00:33:21.430
The way to get that functionality
is by breaking your application into

00:33:21.430 --> 00:33:27.970
presenting a controller that wants to
be presented in a different orientation.

00:33:32.670 --> 00:33:36.790
So, this auto-rotation stuff,
the seed that you guys have

00:33:37.270 --> 00:33:39.300
has this capability in it.

00:33:39.380 --> 00:33:41.380
It's not turned on by default.

00:33:41.610 --> 00:33:46.640
You can turn it on basically by going
into a schema of your application

00:33:46.640 --> 00:33:48.880
and setting that launch argument.

00:33:49.000 --> 00:33:52.780
Then it'll turn on the behavior for
supported interface orientation.

00:33:52.780 --> 00:33:54.620
There are going to be a
couple more changes that come

00:33:54.620 --> 00:33:58.160
out in the subsequent seeds,
so please stay tuned

00:33:58.160 --> 00:34:00.630
and check release notes.

00:34:02.530 --> 00:34:05.600
Okay, view will unload, view did unload.

00:34:05.600 --> 00:34:07.320
We're not going to call it anymore.

00:34:07.320 --> 00:34:10.200
I mean,
there's kind of a cost-benefit equation

00:34:10.200 --> 00:34:13.720
and analysis that we went through.

00:34:13.720 --> 00:34:17.340
And in the early days,
there was a real performance need for

00:34:17.340 --> 00:34:21.070
us to ensure that on memory warnings,
we unloaded views.

00:34:21.070 --> 00:34:25.760
There was all kinds of graphics,
backing stores, and so forth that would

00:34:25.790 --> 00:34:27.170
also get unloaded.

00:34:27.420 --> 00:34:30.130
We now unload those
independently of the view,

00:34:30.130 --> 00:34:33.870
so it isn't that big a deal for
us to force views to be unloaded.

00:34:33.900 --> 00:34:37.320
And there were so many bugs where
there would be pointers into

00:34:37.420 --> 00:34:41.040
unloaded views that didn't get
cleared that at the end of the day,

00:34:41.040 --> 00:34:44.820
we didn't think it was worth
automatically calling those.

00:34:44.840 --> 00:34:47.500
So we're going to
deprecate those methods.

00:34:47.500 --> 00:34:49.740
You can still get the same behavior.

00:34:49.890 --> 00:34:54.100
Your view controllers will still receive,
did receive memory warning.

00:34:54.230 --> 00:34:57.060
And if they want to,
they can nil out that view.

00:34:57.060 --> 00:35:01.000
It will work as expected.

00:35:01.020 --> 00:35:05.120
You might want to check first
that your view isn't in the

00:35:05.580 --> 00:35:07.840
window before you release it.

00:35:08.670 --> 00:35:13.150
I make that point because some
applications actually used ViewWillUnload

00:35:13.430 --> 00:35:18.700
and ViewDidUnload as a means to get rid
of other resources as well that weren't

00:35:18.720 --> 00:35:21.430
necessarily related to the view per se.

00:35:21.600 --> 00:35:25.940
And so now that code might have to
shift into DidReceiveMemoryWarning.

00:35:30.360 --> 00:35:32.530
These were effectively
deprecated in iOS 5,

00:35:32.530 --> 00:35:35.870
the present modal view controller,
dismiss modal view controller.

00:35:36.040 --> 00:35:39.050
They have more or less a
direct replacement called

00:35:39.150 --> 00:35:43.900
present view controller,
which also takes a completion block.

00:35:43.990 --> 00:35:46.420
There's not much to say about that.

00:35:46.780 --> 00:35:49.760
So there's other new stuff,
and I guess this can fall in the

00:35:49.760 --> 00:35:52.440
category of intelligent design.

00:35:52.770 --> 00:35:57.440
We've added constraint-based
layout to UIKit,

00:35:57.460 --> 00:36:01.940
Auto Layout, and view controllers play
really well with that.

00:36:02.120 --> 00:36:06.550
There is a method called
update view constraints,

00:36:06.780 --> 00:36:11.260
and you can kind of think of it
as view will layout subviews,

00:36:11.260 --> 00:36:12.730
but it's working on constraints.

00:36:12.800 --> 00:36:15.100
It's going to get called if
your constraints are modified,

00:36:15.100 --> 00:36:17.780
and I'm a big fan of that method.

00:36:18.100 --> 00:36:20.840
Storyboards are improving.

00:36:20.840 --> 00:36:24.500
They now support unwinding,
which basically means you can actually

00:36:25.110 --> 00:36:29.180
indicate to go back to where you started,
so you can pop a navigation controller

00:36:29.180 --> 00:36:31.330
or you can dismiss a view controller.

00:36:31.500 --> 00:36:35.140
So that's pretty cool.

00:36:35.450 --> 00:36:41.620
There's a whole new kind of sub-feature
where view controllers are intimately

00:36:41.620 --> 00:36:46.120
involved in helping an application
do state restoration so that if a

00:36:46.120 --> 00:36:50.210
state is -- if an application is
suspended or killed and resumed,

00:36:50.330 --> 00:36:58.690
you can have the illusion of coming
right back to where you were when

00:36:58.690 --> 00:36:58.690
you last were using that application.

00:37:00.020 --> 00:37:04.960
So I want to go move into the demo
and highlight some points in code,

00:37:05.220 --> 00:37:08.540
the demo, God's willing.

00:37:08.540 --> 00:37:12.600
Before I do that,
it will be helpful to talk a little bit

00:37:12.740 --> 00:37:17.360
about the structure of the demo app,
just so you know what I'm talking about.

00:37:17.430 --> 00:37:20.300
We're implementing a custom
view controller container.

00:37:20.580 --> 00:37:23.020
It is the root view
controller of the window.

00:37:23.220 --> 00:37:25.530
And let me make a little
side comment about this.

00:37:25.600 --> 00:37:32.480
We have changed the behavior of
when or how a view controller

00:37:32.480 --> 00:37:34.250
becomes the root view controller.

00:37:34.440 --> 00:37:37.300
For a long time,
we've been admonishing everybody,

00:37:37.300 --> 00:37:41.610
call set root view controller,
don't rely on adding a view

00:37:41.610 --> 00:37:45.300
controller's view to the window to
make it the root view controller.

00:37:45.360 --> 00:37:48.760
Well, in iOS 6,
you can add a view controller's

00:37:48.760 --> 00:37:51.000
view to the window,
but it's not going to be

00:37:51.000 --> 00:37:53.100
the root view controller,
which means it won't get rotated.

00:37:53.100 --> 00:37:57.630
So, if you have patient callbacks,
it'll be as if nothing's working.

00:37:57.680 --> 00:38:01.330
What you really need to do is
call set root view controller now.

00:38:02.380 --> 00:38:07.230
So, this custom container class
is initialized with content.

00:38:07.410 --> 00:38:10.840
It so happens that the content
for this demo app is just a photo

00:38:10.840 --> 00:38:12.640
browsing type of view controller.

00:38:12.870 --> 00:38:16.960
It could have been a page view controller
that loaded other view controllers,

00:38:17.050 --> 00:38:21.170
but for purposes of pedagogy,
it's a relatively simple

00:38:21.170 --> 00:38:23.190
content view controller.

00:38:23.330 --> 00:38:30.340
The container view controller
manages a comment view controller,

00:38:30.400 --> 00:38:32.390
which is then associated
with the content,

00:38:32.450 --> 00:38:34.900
which you can see on this screen.

00:38:35.010 --> 00:38:37.940
And then it ties in with the
rest of some of the features

00:38:37.940 --> 00:38:41.240
that are available on UIKit,
like you can tweet the photo with

00:38:41.240 --> 00:38:43.140
the comment to any friends you want.

00:38:43.220 --> 00:38:44.390
You can email it.

00:38:44.540 --> 00:38:47.740
And that ties in with the
new activity view controller,

00:38:47.740 --> 00:38:51.130
which is available on iOS 6 as well.

00:38:53.400 --> 00:40:21.600
[Transcript missing]

00:40:22.690 --> 00:40:25.440
Look at it on an iPad.

00:40:25.570 --> 00:40:30.730
So, if I do a long tap gesture,
you'll see that the comment

00:40:30.990 --> 00:40:32.840
controller comes up.

00:40:32.960 --> 00:40:37.640
I can rotate it,
and it lays out pretty nicely.

00:40:37.750 --> 00:40:41.210
It doesn't support upside down,
which I guess is a little

00:40:41.210 --> 00:40:42.560
bit odd on an iPad.

00:40:42.560 --> 00:40:46.470
I would want it to
support all orientations.

00:40:47.920 --> 00:40:50.550
And I can bring up a camera.

00:40:50.720 --> 00:40:52.600
This is a full screen presentation.

00:40:52.600 --> 00:40:57.370
We can look at the switcher box here.

00:40:57.480 --> 00:41:00.530
And when I dismiss it,

00:41:00.600 --> 00:41:02.380
I'm going to notice a
little problem here,

00:41:02.510 --> 00:41:05.240
and this is one of the things
I want to talk to in code as well.

00:41:05.580 --> 00:41:09.000
You'll notice that the comment
controller is off to the side now.

00:41:09.000 --> 00:41:13.600
So it kind of didn't get laid out
the way we expect it to get laid out.

00:41:13.700 --> 00:41:18.190
So what I'm going to do is --

00:41:18.700 --> 00:41:23.940
Let's switch to the -- switch to Xcode.

00:41:23.940 --> 00:41:27.670
And I'm going to talk a little bit
about how this code is structured.

00:41:27.780 --> 00:41:33.200
So to make it easy for myself,
I created some pound defines

00:41:33.200 --> 00:41:35.540
here that you can see.

00:41:35.540 --> 00:41:38.480
So I can kind of enable like the
different pieces of code that

00:41:38.620 --> 00:41:40.000
I want to talk to you about.

00:41:40.170 --> 00:41:43.730
Because if I actually
had to type it right now,

00:41:43.730 --> 00:41:45.750
I'd run over time by far.

00:41:46.000 --> 00:41:48.670
Before we go there,
let's look at the supported

00:41:48.670 --> 00:41:50.350
interface orientation.

00:41:50.450 --> 00:41:53.950
So remember it didn't rotate upside down.

00:41:53.960 --> 00:41:57.290
Well, now I'm going to make it rotate
upside down by clicking that.

00:41:57.400 --> 00:41:59.890
Next time we run it, we'll see it.

00:42:00.000 --> 00:42:09.190
And now let's look and see how we were
dealing with the layout on that rotation.

00:42:11.700 --> 00:42:15.590
Well,
what we'll see is that the layout is

00:42:15.650 --> 00:42:21.260
being driven inside of the "will animate
rotation to interface" orientation.

00:42:22.600 --> 00:42:26.980
That works great when the
view controller is actually

00:42:27.380 --> 00:42:31.190
presented in front and center,
but it doesn't work, as we discussed,

00:42:31.200 --> 00:42:34.340
when there's a full-screen
presentation over that view controller

00:42:34.340 --> 00:42:36.640
and subsequently gets rotated.

00:42:36.770 --> 00:42:39.200
So, we're going to fix that.

00:42:39.980 --> 00:42:48.280
And the way we're going to fix that is
we're going to use the new Auto Layout.

00:42:48.560 --> 00:42:52.620
I will look at the code,
but before we go to the code,

00:42:52.620 --> 00:42:55.200
I'm just going to change
the pound defines.

00:42:55.340 --> 00:42:58.930
So let's search for Auto Layout.

00:43:05.360 --> 00:43:12.120
I'm glossing over a little bit of the
calls that are done in Auto Layout just

00:43:12.210 --> 00:43:16.040
because those aren't entirely
germane to the view controller talk.

00:43:16.340 --> 00:43:20.260
But what you'll see here is that
I've provided an implementation

00:43:20.330 --> 00:43:22.200
for update view constraints.

00:43:22.270 --> 00:43:25.970
And in case you haven't seen the talk,
I recommend that you do

00:43:25.970 --> 00:43:27.850
download it or see the talk.

00:43:27.970 --> 00:43:32.330
But what constraints do is that
they create linear relationships

00:43:32.510 --> 00:43:34.400
between different view attributes.

00:43:34.460 --> 00:43:42.150
And then the layout engine figures
out how to satisfy those constraints,

00:43:42.150 --> 00:43:44.410
possibly by moving sub views around.

00:43:44.690 --> 00:43:47.230
And what I decided was, you know,
I didn't like the fact that

00:43:47.230 --> 00:43:51.300
the size of that comment
controller was always the same.

00:43:51.330 --> 00:43:55.010
It would be much better if it kind
of tracked the aspect ratio of

00:43:55.010 --> 00:43:57.290
the actual interface orientation.

00:43:57.490 --> 00:44:01.440
So what these constraints do is,
first of all, it says,

00:44:01.440 --> 00:44:07.570
I always want the -- I always
want that comment controller to

00:44:07.570 --> 00:44:10.140
be in the center of the screen.

00:44:10.230 --> 00:44:13.330
So you'll see there's a relationship
for equal on the center.

00:44:13.520 --> 00:44:17.600
I also always want it to be
on the bottom of the screen.

00:44:17.650 --> 00:44:21.300
And finally,
I want the width and the height to

00:44:21.300 --> 00:44:29.200
be a proportion of the width and the
height of my containing super view.

00:44:29.770 --> 00:44:35.600
And with those changes, more or less,
we're going to run it again.

00:44:35.600 --> 00:44:37.860
Devices ready?

00:44:40.910 --> 00:44:41.320
All right.

00:44:41.380 --> 00:44:45.380
My pachyderm friend
always makes me happy.

00:44:45.380 --> 00:44:48.530
So...

00:44:50.380 --> 00:44:52.060
Check that it's rotating now.

00:44:52.130 --> 00:44:54.440
Oh, look, this is upside down.

00:44:54.440 --> 00:44:57.600
You can tell because
the cable's sticking up.

00:44:57.780 --> 00:45:00.300
So, that -- changing the info P list,
really easy.

00:45:00.300 --> 00:45:02.390
Change your supported
interface orientations.

00:45:02.410 --> 00:45:05.710
I'm doing a long press now.

00:45:05.890 --> 00:45:07.440
And we're in the center.

00:45:07.440 --> 00:45:11.840
Notice how the aspect ratio of
the comment container has changed.

00:45:11.840 --> 00:45:16.100
Let's see what happens when
I present something full screen.

00:45:16.210 --> 00:45:18.650
I'm going to dismiss now.

00:45:18.860 --> 00:45:19.900
And we're centered.

00:45:20.020 --> 00:45:25.220
So using Update View Constraints,
it's really simple.

00:45:26.480 --> 00:45:29.920
It's really simple to figure out
what your layout is in a way that's

00:45:29.920 --> 00:45:33.930
completely independent of the
interface orientation of rotation.

00:45:34.250 --> 00:45:37.480
So it's certainly something
that you should be looking

00:45:37.480 --> 00:45:39.510
forward to using in your apps.

00:45:39.650 --> 00:45:43.700
So one thing I wanted to
talk about was -- it's okay.

00:45:43.700 --> 00:45:45.200
It's a comment container controller.

00:45:45.200 --> 00:45:47.660
I should be able to write a comment.

00:45:47.800 --> 00:45:49.200
So -- oh.

00:45:49.370 --> 00:45:51.740
So there's another problem.

00:45:51.760 --> 00:45:54.670
And, you know, this is not a big problem,
right?

00:45:54.680 --> 00:45:57.640
I mean, the keyboard came up, oh, God,
I've got to move my views.

00:45:57.640 --> 00:45:59.760
There's a notification I can listen to.

00:45:59.760 --> 00:46:04.210
But what I wanted to,
the reason I'm showing this is because

00:46:05.290 --> 00:46:10.530
there's different ways you might
consider how should I move that,

00:46:10.630 --> 00:46:14.600
this particular view,
the comment container,

00:46:14.600 --> 00:46:18.550
not the comment container,
the comment view controller's view

00:46:18.850 --> 00:46:20.500
inside of the window hierarchy.

00:46:21.460 --> 00:46:24.290
You might say, well,
it's the comment container

00:46:24.290 --> 00:46:25.840
that needs to be moved.

00:46:25.840 --> 00:46:29.400
It can register for a keyboard
notification and move it itself.

00:46:29.400 --> 00:46:35.720
So that's actually not what we want you
to do or not what we recommend you do.

00:46:35.720 --> 00:46:39.740
Part of the reason for that is it
kind of violates encapsulation.

00:46:39.740 --> 00:46:42.080
If you think about it,
a container controller

00:46:42.080 --> 00:46:43.400
can have many children.

00:46:43.420 --> 00:46:45.770
Maybe more than one of
these things has to move.

00:46:45.880 --> 00:46:48.980
And so now each one of those is
going to be like registering and

00:46:48.980 --> 00:46:51.220
listening and kind of cross-fighting.

00:46:51.220 --> 00:46:54.030
And so you're going to have
to figure out how to do that.

00:46:54.040 --> 00:46:57.110
And so this is really the job
of the parent view controller.

00:46:57.120 --> 00:47:00.570
So let's look at the
code for how we do that.

00:47:00.570 --> 00:47:03.760
You'll notice there's a handy macro.

00:47:08.630 --> 00:47:13.410
So in the viewDidAppear method,
we register for the keyboard

00:47:13.530 --> 00:47:15.700
willShow and hide notifications.

00:47:15.700 --> 00:47:18.100
We unregister and viewDidDisappear.

00:47:18.210 --> 00:47:20.700
And then the implementation
is really simple.

00:47:21.020 --> 00:47:23.200
Mind you,
this is in the container view controller.

00:47:23.420 --> 00:47:26.780
So this is in the view controller
that got initialized with the content

00:47:26.920 --> 00:47:28.720
photo controller and everything.

00:47:28.860 --> 00:47:32.620
And what it's going to do,
it's going to grab the geometry

00:47:32.620 --> 00:47:36.230
out of the keyboard notification,
convert it to the correct

00:47:36.230 --> 00:47:38.770
coordinate system,
and then it's going to call

00:47:38.770 --> 00:47:44.130
a method that it implements,
which is to adjust the commentY

00:47:44.240 --> 00:47:47.300
position of that comment controller.

00:47:47.420 --> 00:47:49.390
And all that's doing is,
guess what it's doing?

00:47:49.420 --> 00:47:54.220
It's recalculating the frame for that
comment controller and then setting it.

00:47:54.380 --> 00:47:58.640
And it's setting it inside of an
animation block so that it animates

00:47:58.640 --> 00:48:02.350
smoothly with the keyboard animation.

00:48:02.500 --> 00:48:07.500
So I'm going to run
now with these changes.

00:48:15.000 --> 00:48:16.990
A long tap again.

00:48:17.020 --> 00:48:22.460
This time I'm going to hit the keyboard
and everything animates up smoothly.

00:48:22.740 --> 00:48:26.710
So you can enter a comment here.

00:48:32.770 --> 00:48:37.040
I can bring up the
Activity View Controller.

00:48:37.040 --> 00:48:42.550
I can tweet it to my
friends if I feel like it.

00:48:42.740 --> 00:48:45.450
And that demonstrates kind
of a recommended way for

00:48:45.450 --> 00:48:48.070
doing keyboard avoidance.

00:49:01.470 --> 00:49:06.920
And I just want to give some closing
remarks about what you've seen.

00:49:11.530 --> 00:49:14.700
So in general,
custom container controllers,

00:49:14.700 --> 00:49:19.770
embedding view controllers, you know,
you're free to implement these.

00:49:19.770 --> 00:49:25.200
The best reason for implementing them is
because you have a new application flow.

00:49:25.200 --> 00:49:28.760
You have something that you want
to reuse that makes sense to reuse.

00:49:28.760 --> 00:49:33.040
If you ever find yourself taking a view
controller's view and really wanting

00:49:33.040 --> 00:49:37.200
to add it into another view hierarchy,
you should immediately think

00:49:37.200 --> 00:49:40.990
there is a relationship between
another view controller that

00:49:40.990 --> 00:49:43.280
I need to factor into the picture.

00:49:43.280 --> 00:49:47.690
Usually that will bring,
sometimes it'll be very easy to do it,

00:49:47.730 --> 00:49:51.670
sometimes it'll bring into
focus a part of the design that

00:49:51.670 --> 00:49:56.270
will make your application a
lot more robust moving forward.

00:49:56.280 --> 00:50:00.320
Having said that,
we have lots of... As Matt pointed out,

00:50:00.430 --> 00:50:02.670
many, many system container controllers.

00:50:02.700 --> 00:50:06.300
And they provide a lot of functionality.

00:50:06.300 --> 00:50:07.600
They have a lot of knobs.

00:50:07.720 --> 00:50:11.960
And if one of those works,
you should use it.

00:50:12.000 --> 00:50:15.910
But what's great is you can compose
all of these things together.

00:50:16.050 --> 00:50:18.080
You can use your own custom
container controller.

00:50:18.080 --> 00:50:20.380
You can put in a system controller.

00:50:20.520 --> 00:50:24.230
Like in this application,
I could have had a page view

00:50:24.250 --> 00:50:26.360
controller as one of the children.

00:50:26.360 --> 00:50:28.760
And then instead of this...
Instead of like clicking up and down,

00:50:28.760 --> 00:50:28.760
you can have a page view controller.

00:50:28.760 --> 00:50:31.200
And then instead of a button
to flip between my photos,

00:50:31.230 --> 00:50:34.940
I could have swiped just like
we see in the photos app.

00:50:35.320 --> 00:50:40.480
So these changes that we make in
UI view controller are really so that

00:50:40.670 --> 00:50:47.940
those types of compositions continue
to work well for your applications.

00:50:52.930 --> 00:50:56.050
Interface orientation, rotation, layout.

00:50:56.050 --> 00:51:00.680
Rotation callback should
really be used if you want to

00:51:00.800 --> 00:51:03.380
participate in the rotation.

00:51:03.400 --> 00:51:07.390
Layout, for most view controllers,
should really be

00:51:07.390 --> 00:51:11.790
independent of the question,
am I in portrait, am I in landscape?

00:51:11.800 --> 00:51:14.250
There are exceptions to this,
but in general,

00:51:14.250 --> 00:51:17.430
if you want to be able to compose
your view controllers cleanly

00:51:17.580 --> 00:51:21.720
with other view controllers,
you'll be making an effort to

00:51:21.720 --> 00:51:25.500
be looking in the bounds of
your view controller's view.

00:51:25.500 --> 00:51:28.920
And sometimes you don't even
have to look at the bounds.

00:51:28.940 --> 00:51:31.880
I mean, with update view constraints,
you can express these things

00:51:31.880 --> 00:51:35.440
pretty declaratively without
even knowing that information.

00:51:35.440 --> 00:51:40.860
Again, you know, there's a couple of
ways of expressing this,

00:51:40.860 --> 00:51:43.560
but the bottom line is that
a view controller should

00:51:43.560 --> 00:51:45.000
never set its own frame.

00:51:49.460 --> 00:51:55.480
Auto rotation is changing,
and view controllers in general should

00:51:55.480 --> 00:51:59.100
strive to support all orientations.

00:51:59.190 --> 00:52:02.910
I realize I'm going to
get some flack for this,

00:52:03.030 --> 00:52:03.700
except on the phone.

00:52:03.730 --> 00:52:06.750
It's okay not to support
upside down on the phone.

00:52:06.760 --> 00:52:07.970
In fact, that's recommended.

00:52:11.470 --> 00:52:16.280
Apps can now easily indicate the
orientations that they support.

00:52:16.440 --> 00:52:18.840
I mean, most of the time you're not even
going to have to write any code.

00:52:18.840 --> 00:52:21.830
You're going to click something in the
info P list and it's just going to work.

00:52:21.830 --> 00:52:25.180
And as I said,
rotation callbacks are really for

00:52:25.180 --> 00:52:27.640
participating in the rotation.

00:52:29.980 --> 00:52:33.640
Kind of big picture,
Matt touched on this.

00:52:33.840 --> 00:52:38.380
View controllers are really
the cornerstone of iOS apps.

00:52:38.380 --> 00:52:41.390
It's probably going to
get more and more so.

00:52:41.420 --> 00:52:45.270
We are vending more
view controllers as API.

00:52:45.520 --> 00:52:49.540
So, and we're going to
continue to add features.

00:52:49.540 --> 00:52:57.470
So, they're useful and they make
a lot of your tasks easier.

00:52:58.590 --> 00:53:00.540
View controllers are a great abstraction.

00:53:00.850 --> 00:53:02.600
Design them with an eye to reuse.

00:53:02.600 --> 00:53:06.430
And really, think about how you want them
to interact with each other in

00:53:06.430 --> 00:53:08.130
terms of your application flow.

00:53:08.160 --> 00:53:10.220
Not everything needs to
be a view controller.

00:53:10.250 --> 00:53:14.560
It is more often the case than not
that what you really want is you want

00:53:14.630 --> 00:53:17.180
to manage some subviews directly.

00:53:17.180 --> 00:53:19.410
And a view controller
can do that just fine,

00:53:19.410 --> 00:53:21.730
and you can animate
between your subviews.

00:53:24.560 --> 00:53:29.060
And kind of the bigger take-home
message for this kind of non-intelligent

00:53:29.060 --> 00:53:34.120
design of view controllers
talk is really looking forward,

00:53:34.120 --> 00:53:39.160
you want to kind of try to track
the new APIs as they're coming out.

00:53:39.180 --> 00:53:43.660
And at least don't participate
in some of the deprecated APIs.

00:53:43.660 --> 00:53:48.450
If you do that, you're going to evolve
with the whole ecosystem,

00:53:48.450 --> 00:53:52.860
and your apps are going to be
more robust and work better.

00:53:52.860 --> 00:53:54.540
So I think that's all I have.

00:53:54.560 --> 00:53:56.050
Actually, I have one more slide.

00:53:56.060 --> 00:53:59.840
There were, I did refer to a couple of
supporting technologies.

00:53:59.840 --> 00:54:02.460
I believe there is a state
restoration talk that's going

00:54:02.460 --> 00:54:03.930
to happen in 15 minutes.

00:54:04.020 --> 00:54:07.110
The other two talks,
you're going to need to grab off the web.

00:54:07.120 --> 00:54:09.420
These are our contacts.

00:54:09.500 --> 00:54:13.100
Any bugs in the demo app,
feel free to contact Jake Behrens.