WEBVTT

00:00:10.450 --> 00:00:11.480
So good morning.

00:00:11.550 --> 00:00:14.400
Thank you for coming to Power Management.

00:00:14.420 --> 00:00:15.990
My name is Ethan Bold.

00:00:16.010 --> 00:00:20.220
I'm on the CoreOS I/O Kit team,
and I work on sleep/wake.

00:00:20.400 --> 00:00:23.890
And I'm going to talk to you about
power management features and

00:00:23.890 --> 00:00:26.400
Mountain Lion that you should know about.

00:00:26.410 --> 00:00:29.270
And then after that, my coworker,
Soren Spies, is going to come up,

00:00:29.270 --> 00:00:34.300
and he's going to tell you about some
energy-efficient coding practices

00:00:34.400 --> 00:00:38.400
that you can use in OS X and in iOS.

00:00:38.400 --> 00:00:40.240
So let's talk about Mountain Lion.

00:00:40.240 --> 00:00:43.200
I'm going to talk to you
about three things today.

00:00:43.400 --> 00:00:45.390
The first, power assertions.

00:00:45.390 --> 00:00:51.130
Power assertions are an API that your
app can use to tell OS X when you

00:00:51.130 --> 00:00:54.400
need the system to stay powered on.

00:00:54.400 --> 00:00:56.400
I'm going to talk about dark wake.

00:00:56.790 --> 00:01:02.390
That's a new system power state
between asleep and fully awake.

00:01:02.500 --> 00:01:05.520
And then we're going to look at
some debugging tools that will help

00:01:05.550 --> 00:01:08.400
you understand what's going on in
your system with power assertions.

00:01:08.400 --> 00:01:12.400
Power assertions and sleep
and wake and dark wake.

00:01:12.420 --> 00:01:15.400
So let's jump in and talk
about power assertions.

00:01:15.410 --> 00:01:22.010
Power assertions allow your app to
specify when you're doing user-requested

00:01:22.190 --> 00:01:24.400
work that you want to complete.

00:01:24.530 --> 00:01:28.400
You can take a power assertion
to prevent idle sleep.

00:01:28.400 --> 00:01:34.690
That is, to keep the computer awake and
prevent it from idle sleeping while

00:01:34.690 --> 00:01:36.360
you're holding this assertion.

00:01:36.410 --> 00:01:40.400
You can take a power assertion
to prevent idle display sleep.

00:01:40.400 --> 00:01:45.400
That is, to keep the display on as long
as you're holding this assertion.

00:01:45.860 --> 00:01:50.760
Power assertions are hints
or suggestions to OS X.

00:01:50.760 --> 00:01:55.750
We can't guarantee that OS X will
honor all power assertions.

00:01:55.820 --> 00:01:58.800
There's always things like
the user closing of the lid,

00:01:58.930 --> 00:02:02.650
running out of battery,
or overheating that will cause the

00:02:02.700 --> 00:02:08.160
system to have to sleep anyway,
even if you're holding a power assertion.

00:02:08.330 --> 00:02:11.200
Not everyone should use power assertions.

00:02:11.200 --> 00:02:13.660
There's a few good reasons not to.

00:02:13.660 --> 00:02:18.370
You shouldn't use them if the user
isn't expecting your work to complete.

00:02:18.930 --> 00:02:22.340
If your work is resumable and
the user is not waiting for it,

00:02:22.430 --> 00:02:26.500
then the system can fall asleep
and wake up again and your

00:02:26.510 --> 00:02:28.570
work can resume after that.

00:02:28.800 --> 00:03:59.000
[Transcript missing]

00:03:59.100 --> 00:05:00.600
[Transcript missing]

00:05:01.200 --> 00:05:03.630
This is going to create our assertion.

00:05:03.750 --> 00:05:09.440
There's a couple of other APIs similar to
this one that you can find in the header.

00:05:09.630 --> 00:05:14.300
First argument to assertion create
with name is the assertion type.

00:05:14.370 --> 00:05:19.370
We're passing type prevent
user idle system sleep.

00:05:20.090 --> 00:05:26.140
We're passing an initial level,
K-I-O-P-M assertion level on.

00:05:26.140 --> 00:05:29.620
I won't talk about it here,
but there are some APIs you can use in

00:05:29.630 --> 00:05:36.510
this header to toggle the level of an
assertion from on to off and off to on.

00:05:37.160 --> 00:05:40.760
You could do that if you wanted to
create one assertion and reuse it.

00:05:40.790 --> 00:05:42.900
But you can check those out for yourself.

00:05:42.920 --> 00:05:46.860
Next up, we're going to pass a
descriptive name for this power

00:05:46.860 --> 00:05:49.250
assertion that we're creating.

00:05:49.410 --> 00:05:53.300
Here I chose to name the assertion
"Processing Giant Files." I might

00:05:53.420 --> 00:05:56.820
be a video editing app that
needs to edit 4 gigs of data,

00:05:56.820 --> 00:06:00.640
which could take minutes to complete,
and I want that work to finish.

00:06:00.760 --> 00:06:05.150
So by calling it "Processing
Giant Files," I let power users

00:06:05.200 --> 00:06:10.510
and admins and other developers
and me know exactly why I'm

00:06:10.640 --> 00:06:13.450
holding this power assertion.

00:06:13.760 --> 00:06:21.300
And finally, the API returns an assertion
ID in the argument newAssertion.

00:06:21.330 --> 00:06:25.300
When this function completes,
I'm holding a brand new power assertion.

00:06:25.340 --> 00:06:29.200
I've hinted to OS X that I want
the system to stay awake,

00:06:29.200 --> 00:06:32.560
and I'm going to do my computation,
whether it takes a few

00:06:32.560 --> 00:06:34.200
seconds or a few hours.

00:06:34.260 --> 00:06:39.200
And when I'm done,
I'm going to call IOPM assertion release,

00:06:39.230 --> 00:06:43.200
and that lets go of this
assertion I just created.

00:06:43.200 --> 00:06:47.180
And it's very important to call
IOPM assertion release as soon

00:06:47.200 --> 00:06:52.030
as you're done with your work,
because that lets OS X reevaluate system

00:06:52.030 --> 00:06:58.170
sleep state and idle the system to sleep,
if appropriate.

00:06:58.210 --> 00:07:03.200
So your app may hold
several assertions at once.

00:07:03.500 --> 00:07:08.200
Realistically, you shouldn't hold more
than five or ten at a time,

00:07:08.200 --> 00:07:13.280
but the upper limit is 1024.

00:07:14.200 --> 00:10:12.800
[Transcript missing]

00:10:13.220 --> 00:10:16.860
When you run Caffeinate,
it takes an assertion.

00:10:16.990 --> 00:10:20.100
And when you kill Caffeinate,
it drops that assertion.

00:10:20.180 --> 00:10:26.540
The way we're invoking it here is
we're passing it the argument Make.

00:10:26.590 --> 00:10:29.160
Caffeinate is going to take
that argument and run Make,

00:10:29.210 --> 00:10:34.040
and keep Make running,
and let Make run until it completes.

00:10:34.040 --> 00:10:39.090
When Make exits, Caffeinate will exit,
and Caffeinate will drop

00:10:39.090 --> 00:10:41.040
its power assertion.

00:10:41.040 --> 00:10:44.310
So this could have been a
build that took two hours,

00:10:44.350 --> 00:10:50.680
and Caffeinate held the Prevent User Idle
System Sleep assertion in that time.

00:10:51.130 --> 00:10:55.960
Check out the man page for both
PMSET and Caffeinate for other options.

00:10:55.980 --> 00:11:03.980
Some of you may already be aware of,
or may be using, the API IOCancel.com.

00:11:03.980 --> 00:11:10.980
This is a way to prevent idle
sleep in OS X since 10.0.

00:11:10.990 --> 00:11:15.390
But we are asking that you
move away from that and use

00:11:15.610 --> 00:11:18.970
I/O power assertions instead.

00:11:19.060 --> 00:11:24.670
Using I/O cancel power change and
I register for system power to call

00:11:24.670 --> 00:11:29.980
I/O cancel power change doesn't give
us the same amount of accountability

00:11:29.980 --> 00:11:33.920
for who's preventing sleep.

00:11:33.930 --> 00:11:35.920
Just like disk I/O, it's kind of sloppy.

00:11:35.920 --> 00:11:40.240
It doesn't let us detect exactly
when you're done doing work and

00:11:40.250 --> 00:11:42.920
when we can go back to sleep.

00:11:42.940 --> 00:11:47.080
So for those reasons,
please move on to power assertions if

00:11:47.180 --> 00:11:49.920
you're using I/O cancel power change.

00:11:50.060 --> 00:11:54.910
We are not deprecating this API,
cancel power change, right now,

00:11:54.950 --> 00:11:58.920
but we probably will do
so in a future release.

00:11:58.920 --> 00:12:00.920
That was power assertions.

00:12:00.920 --> 00:12:03.860
Power assertions aren't
new in Mountainside.

00:12:03.860 --> 00:12:05.860
They've been around since Lion.

00:12:05.860 --> 00:12:11.710
But they are increasingly important
given things like the disk I/O no

00:12:12.110 --> 00:12:14.770
longer keeping the system awake.

00:12:14.970 --> 00:12:20.840
It's more important for you to tell us
what you intend for sleep and wake to do.

00:12:20.920 --> 00:12:24.420
So next up, let's talk about dark wake.

00:12:25.150 --> 00:12:29.340
Like I said, dark wake is a system
state between sleep,

00:12:29.520 --> 00:12:32.440
where everything's off,
and between full wake,

00:12:32.630 --> 00:12:34.400
where everything's on.

00:12:34.400 --> 00:12:41.980
When you're in dark wake, the CPU is on,
the network is on, the disk is usable,

00:12:41.980 --> 00:12:45.390
any USB buses, firewire,
thunderbolt buses,

00:12:45.390 --> 00:12:50.130
and any devices hanging off of
them are powered and usable.

00:12:55.060 --> 00:12:58.440
Also, DarkWake is Apple only.

00:12:58.440 --> 00:13:02.740
We aren't exposing any APIs to
run in DarkWake or to access

00:13:02.800 --> 00:13:05.100
DarkWake in Mountain Lion.

00:13:05.100 --> 00:13:15.080
But I do want to talk about it,
and I want you to know what

00:13:15.080 --> 00:13:15.090
DarkWake is and what it means
for your Macs because you

00:13:15.800 --> 00:13:18.670
Because you may see it,
you may observe your software

00:13:19.070 --> 00:13:21.250
running in dark wake.

00:13:21.390 --> 00:13:29.500
Apple doesn't take any -- we don't take
any measures to keep your code stopped.

00:13:29.500 --> 00:13:32.520
We don't turn off the
CPU scheduler while we're in

00:13:32.540 --> 00:13:34.770
dark wake so your code could run.

00:13:34.910 --> 00:13:40.540
But you may find yourself running in a
situation where the disk is -- I'm sorry,

00:13:40.540 --> 00:13:42.710
the disk is available,
where the graphics aren't available

00:13:42.940 --> 00:13:45.200
and the audio aren't available.

00:13:45.540 --> 00:13:51.300
And because we aren't exposing
dark/wake to developers or even

00:13:51.300 --> 00:13:55.440
to many Apple internal apps,
we've suppressed a lot of

00:13:55.530 --> 00:13:59.240
system-wide notifications,
like sleep/wake notifications.

00:13:59.420 --> 00:14:02.200
We don't deliver those
while we're in dark/wake.

00:14:02.320 --> 00:14:03.750
And network reachability.

00:14:03.800 --> 00:14:08.390
We don't expose a lot of network
reachability notifications or

00:14:08.390 --> 00:14:11.300
state while we're in dark/wake.

00:14:11.440 --> 00:14:16.820
So you should be aware that your
app could run in this situation.

00:14:17.140 --> 00:14:23.690
And your app should handle it gracefully
if the network isn't available or if

00:14:23.920 --> 00:14:29.960
you can't talk to the Windows server
or graphics or audio devices.

00:14:32.650 --> 00:14:37.210
So we've had DarkWake
in some form since 10.6,

00:14:37.230 --> 00:14:41.670
and we've been building
on it with every release.

00:14:41.740 --> 00:14:46.050
Starting in 10.6,
we used DarkWake to keep your

00:14:46.050 --> 00:14:51.310
system's network state up to date
while your computer was asleep.

00:14:52.570 --> 00:14:59.350
And so your computer would be
asleep but wake up every 90 minutes

00:14:59.410 --> 00:15:06.460
or so to refresh your DHCP lease,
to remind your local Bonjor

00:15:06.460 --> 00:15:11.500
sleep proxy server that your
computer exists and is reachable,

00:15:11.630 --> 00:15:16.140
and to tell iCloud and back to my
Mac that your computer is reachable.

00:15:16.140 --> 00:15:20.910
Adding to that in Lion, in 10.7,
we added a -- we started

00:15:21.340 --> 00:15:25.320
using Dark Wake to respond
to environmental changes.

00:15:25.530 --> 00:15:28.540
That's plugging and
unplugging the AC power,

00:15:28.550 --> 00:15:30.460
plugging in a new USB device.

00:15:30.730 --> 00:15:34.100
So whereas in the past,
when you plugged in a USB mouse,

00:15:34.100 --> 00:15:38.370
the system would wake up all the
way into full wake and stay awake.

00:15:38.600 --> 00:15:41.170
Now what we do is we
wake up into dark wake,

00:15:41.440 --> 00:15:46.960
recognize that USB mouse,
reconfigure the USB mouse bus,

00:15:47.320 --> 00:15:50.650
and put the system back to
sleep as soon as possible.

00:15:51.140 --> 00:15:57.240
And adding to that in Mountain Lion,
we have Power Nap.

00:15:57.250 --> 00:16:02.000
This is now a user-visible feature in
Mountain Lion with a checkbox and energy

00:16:02.080 --> 00:16:04.440
saver to turn it on and turn it off.

00:16:04.440 --> 00:16:10.980
We're going to be using Dark Wake to
wake up every hour or so on battery

00:16:10.980 --> 00:16:16.000
and on AC power and check your mail,
check for new iCal events,

00:16:16.100 --> 00:16:19.960
check the App Store for
updates and system updates.

00:16:20.080 --> 00:16:25.550
And to perform time machine
backups and spotlight indexes.

00:16:27.440 --> 00:16:29.370
So that's Dark Wake.

00:16:29.630 --> 00:16:35.680
Please keep in mind that your software
may very well run in one of these,

00:16:35.680 --> 00:16:38.860
in a Dark Wake state,
and please handle that case gracefully.

00:16:43.280 --> 00:16:47.350
So that was power assertions in DarkWake,
and I want to talk briefly about

00:16:47.350 --> 00:16:53.600
some debugging tools that you can
use to understand what's going on.

00:16:53.720 --> 00:16:58.230
I've got PMset on screen again.

00:16:58.600 --> 00:18:19.600
[Transcript missing]

00:18:21.370 --> 00:18:27.840
And we can see that the next day at
4:18 p.m., the system did a dark wake.

00:18:27.950 --> 00:18:31.720
And this was a dark wake due to EHC1.

00:18:31.810 --> 00:18:36.970
I know that EHC1 is the
PCI hardware code for the USB stack,

00:18:36.970 --> 00:18:38.370
for the USB bus.

00:18:38.730 --> 00:18:43.290
So this was probably me, the user,
plugging in a USB keyboard.

00:18:43.390 --> 00:18:49.130
And the system woke up, recognized it,
and went back to sleep.

00:18:49.840 --> 00:18:53.280
It goes back to sleep 19 seconds later.

00:18:53.280 --> 00:18:56.390
Again, due to a clamshell sleep,
the lid is still closed,

00:18:56.390 --> 00:18:59.810
but it's returning to
sleep from dark wake.

00:19:00.640 --> 00:19:06.160
And a minute and a half after that,
the user opens the lid

00:19:06.270 --> 00:19:07.230
and wakes the system.

00:19:07.330 --> 00:19:10.720
And you can see that
the charge is 95% now,

00:19:10.880 --> 00:19:12.780
the battery charge.

00:19:12.940 --> 00:19:21.260
And the wake event is due to EC lid zero,
and I know that's the wake

00:19:21.500 --> 00:19:24.300
up code for a lid wake.

00:19:24.300 --> 00:19:30.050
And I truncated the log right here,
but the next sleep/wake event is

00:19:30.070 --> 00:19:33.950
probably 2662 seconds later on.

00:19:34.910 --> 00:19:36.650
So that's sleep and wake.

00:19:36.760 --> 00:19:42.100
Let's look at what taking assertions
and releasing assertions looks

00:19:42.100 --> 00:19:45.330
like in NPM set minus G log.

00:19:47.040 --> 00:19:54.240
This sample shows PID163 network
browser taking a power assertion

00:19:54.510 --> 00:19:59.170
for the reason for the name AirDrop,
and they used a very descriptive name

00:19:59.310 --> 00:20:05.070
that tells us very concisely what the
network browser tool app was doing.

00:20:05.070 --> 00:20:09.600
And it held that
assertion for 12 seconds.

00:20:09.630 --> 00:20:14.390
So that was probably me copying this
very keynote presentation from one

00:20:14.490 --> 00:20:18.030
computer to to another over airdrop.

00:20:19.080 --> 00:20:25.990
Next,
we can see that PID 5681 address book,

00:20:26.120 --> 00:20:32.040
address book source sync took a prevent
user idle system sleep assertion

00:20:32.200 --> 00:20:36.780
for 22 seconds and then released it.

00:20:37.770 --> 00:20:44.290
Yeah, they were probably syncing
address book data with iCloud.

00:20:46.650 --> 00:20:48.760
So that's it for me.

00:20:48.800 --> 00:20:49.440
Thank you very much.

00:20:49.440 --> 00:20:50.490
And here's Soren Spies.

00:20:50.810 --> 00:20:51.570
Good morning.

00:20:51.600 --> 00:20:52.820
Thank you all for being here.

00:20:52.910 --> 00:20:56.830
My name is Soren,
and I am an energy enthusiast.

00:20:56.840 --> 00:21:01.950
And this morning we're going to
talk about energy for software.

00:21:02.330 --> 00:21:04.780
First of all, I'm going to tell you a
little bit of Energy 101.

00:21:04.850 --> 00:21:08.720
One slide, everything you need to know to
understand energy efficiency

00:21:08.790 --> 00:21:12.200
and the power-time trade-off.

00:21:12.200 --> 00:21:14.880
We're going to talk about the rationale,
why we care about software

00:21:14.890 --> 00:21:15.970
and its energy efficiency.

00:21:16.200 --> 00:21:19.400
And we have a good little home
economics example for energy versus

00:21:19.530 --> 00:21:23.040
utility to kind of help you think
about your software and how can you

00:21:23.040 --> 00:21:25.200
make your software more efficient.

00:21:25.200 --> 00:21:28.070
You've got to have a slightly
different mindset when you are

00:21:28.070 --> 00:21:31.200
optimizing for energy efficiency
versus time performance,

00:21:31.200 --> 00:21:33.200
although they're related,
as you will see.

00:21:33.200 --> 00:21:35.570
The last section of the talk
is principles and techniques

00:21:35.840 --> 00:21:38.180
for debugging your software,
finding idle energy leaks,

00:21:38.240 --> 00:21:41.200
and being as efficient
as you possibly can be.

00:21:41.200 --> 00:21:45.590
So first of all, here's the Energy 101.

00:21:45.900 --> 00:21:47.760
Energy is very simple.

00:21:47.850 --> 00:21:51.760
Its power, in this case a 27-inch iMac,
not at full screen brightness,

00:21:51.890 --> 00:21:54.000
draws 100 watts.

00:21:54.120 --> 00:21:56.740
You run that for two hours.

00:21:57.500 --> 00:24:03.900
[Transcript missing]

00:24:04.270 --> 00:24:06.630
products, and we want your products
to also be efficient.

00:24:06.640 --> 00:24:09.810
So we're going to talk about how
to make your software efficient.

00:24:09.810 --> 00:24:12.420
So one thing you may
not have thought about,

00:24:12.420 --> 00:24:15.270
you may realize that you put your
laptop to sleep when you're not

00:24:15.410 --> 00:24:17.720
using it and when it's asleep,
it lasts a long time,

00:24:17.720 --> 00:24:19.240
especially our standby machines.

00:24:19.520 --> 00:24:22.490
The ratio, very roughly,
from being awake and idle

00:24:22.510 --> 00:24:24.630
to asleep is about 10 to 1.

00:24:24.640 --> 00:24:28.730
So you can leave your computer
sitting there for an hour or 10 hours,

00:24:28.910 --> 00:24:32.960
and if it's asleep, 10 hours of battery
disappears as about one hour.

00:24:32.960 --> 00:24:36.380
But what you may not realize
is that while you're running,

00:24:36.380 --> 00:24:39.160
you're sitting there idle,
there's also a 10 to 1

00:24:39.490 --> 00:24:41.310
ratio between full out GPU,
CPU,

00:24:41.310 --> 00:24:43.820
everything is going crazy versus idle.

00:24:43.840 --> 00:24:45.430
There's a big difference.

00:24:45.430 --> 00:24:48.450
Again,
so from all the way like full idle to

00:24:48.690 --> 00:24:52.220
totally asleep is like 100 to 1 ratio.

00:24:52.220 --> 00:24:57.470
So you want to minimize your power
consumption when you are running,

00:24:57.560 --> 00:25:00.240
especially when you're idle,
because that's what you

00:25:00.240 --> 00:25:01.400
do most of the time.

00:25:01.520 --> 00:25:06.120
Also, batteries are only so big,
so you can only expend them.

00:25:06.120 --> 00:25:08.940
You can sort of -- you're
going to use up that energy,

00:25:08.950 --> 00:25:12.700
you want to use it as coolly,
lowest temperature,

00:25:12.700 --> 00:25:14.260
and as slowly as possible.

00:25:14.260 --> 00:25:16.600
So there's sort of a tradeoff
between time and heat,

00:25:16.670 --> 00:25:20.450
and then what value is
your software delivering?

00:25:20.460 --> 00:25:24.380
So here's just a little
graphic to help explain.

00:25:24.430 --> 00:25:26.280
First of all,
we want to make the energy last.

00:25:26.280 --> 00:25:29.000
But even .1% CPU,
if you look in activity monitor,

00:25:29.000 --> 00:25:31.000
you're like, oh,
my software is barely doing anything.

00:25:31.000 --> 00:25:31.000
.1%. That's not going to help.

00:25:31.000 --> 00:25:32.150
That's going to be a .1% CPU.

00:25:32.150 --> 00:25:34.980
Depending on how it does it,
it can actually be significantly

00:25:34.980 --> 00:25:39.590
elevating the power draw of the system,
and that can have a very negative

00:25:39.590 --> 00:25:41.470
effect on your battery life.

00:25:41.470 --> 00:25:43.930
It can easily cost even
an hour of battery life,

00:25:44.090 --> 00:25:45.660
even though it looks so tiny.

00:25:45.660 --> 00:25:47.660
I'll show you in a
minute why that happens.

00:25:47.660 --> 00:25:48.510
So here's a graph.

00:25:48.800 --> 00:25:52.200
This is showing sort of the all out,
like maxed out machine, full bore.

00:25:52.600 --> 00:25:54.980
Batteries just like
disappears in like one hour.

00:25:55.230 --> 00:25:58.350
Theoretically it's like a 7-hour battery,
but you go all out and

00:25:58.570 --> 00:25:59.390
disappears in like one hour.

00:25:59.400 --> 00:25:59.600
So here's a graph.

00:25:59.600 --> 00:26:01.570
This is showing sort of the all out,
like maxed So...

00:26:01.820 --> 00:26:02.900
that's not what we want.

00:26:03.000 --> 00:26:04.680
Most users,
they kind of have this experience.

00:26:04.770 --> 00:26:06.930
They're running a lot of apps,
they're busy doing stuff,

00:26:06.950 --> 00:26:10.570
and their battery lasts, you know,
five to seven hours, right?

00:26:10.570 --> 00:26:13.400
But ideally, if you're just, like,
sitting there, you're, like,

00:26:13.410 --> 00:26:14.530
maybe running your word
processor or something,

00:26:14.530 --> 00:26:15.990
you'd like to get, like,
maybe ten hours of

00:26:15.990 --> 00:26:17.090
battery life if you could.

00:26:17.120 --> 00:26:23.990
And so these bars all have the same area,
and as we reduce the power,

00:26:23.990 --> 00:26:26.340
you can see the time jumps out.

00:26:26.350 --> 00:26:28.220
And we're not reducing
the power very much,

00:26:29.120 --> 00:26:30.080
but, man, did you see that?

00:26:30.080 --> 00:26:33.170
We reduced it, like, two pixels,
and it's, like, getting way out there.

00:26:33.170 --> 00:26:37.670
And this is what we're talking about,
is get your software so it's really

00:26:37.670 --> 00:26:39.380
chill when it's not doing anything.

00:26:39.380 --> 00:26:42.030
When it is doing stuff, great,
no problem, but when it's not,

00:26:42.030 --> 00:26:43.080
get it really chill.

00:26:43.080 --> 00:26:48.520
And let's figure out how do we eke out
these last few little bits of extra

00:26:48.810 --> 00:26:51.520
battery life so that instead of saying,
well, I've got a bunch of apps running,

00:26:51.520 --> 00:26:53.570
so I'm only going to get
four hours of battery life,

00:26:53.570 --> 00:26:55.440
you say,
I've got a bunch of apps running,

00:26:55.440 --> 00:26:57.020
but they're all really
good power citizens,

00:26:57.070 --> 00:26:58.220
really good energy citizens.

00:26:58.930 --> 00:27:01.330
And now I'm still getting a
lot of battery life as if I was

00:27:01.500 --> 00:27:03.180
only running my word processor.

00:27:04.930 --> 00:27:07.890
So this is going to
be a little diversion.

00:27:08.040 --> 00:27:09.100
Bear with me.

00:27:09.100 --> 00:27:11.260
It is going to help you
think about your software.

00:27:11.490 --> 00:27:13.940
A microwave appliance,
very simple device,

00:27:13.940 --> 00:27:15.560
basically does two things.

00:27:15.690 --> 00:27:20.000
It can heat things, primarily food,
and it has a clock.

00:27:20.050 --> 00:27:23.300
Turns out heating is about
1500 watts on the microwave.

00:27:23.420 --> 00:27:25.410
And at least on my
somewhat older microwave,

00:27:25.410 --> 00:27:27.910
it's not Energy Star labeled,
it takes three watts just

00:27:27.990 --> 00:27:29.240
to operate the clock.

00:27:29.320 --> 00:27:31.700
Now, the clock itself is not
consuming three watts.

00:27:31.750 --> 00:27:34.710
It's the power supply for the clock
that's kind of radiating some heat.

00:27:34.810 --> 00:27:38.960
Well, it's converting 120 volts to
whatever voltage the clock wants.

00:27:38.960 --> 00:27:42.400
So let's think about, remember,
energy equals power times time.

00:27:42.400 --> 00:27:45.280
So here, those green spikes are
the heating energy.

00:27:45.280 --> 00:27:48.700
Let's say I heat up some
stuff three times a day.

00:27:48.700 --> 00:27:50.120
I run it for about two minutes each.

00:27:50.120 --> 00:27:53.210
And then,
but every single minute of the day,

00:27:53.250 --> 00:27:55.020
that clock is running.

00:27:55.020 --> 00:27:56.890
You see that down,
you barely see it along the bottom,

00:27:56.890 --> 00:27:58.700
but there's just three
watts along the bottom.

00:27:58.700 --> 00:28:00.280
So let's add up the energy.

00:28:00.280 --> 00:28:01.940
Energy is power times time.

00:28:01.970 --> 00:28:04.220
So here's a little kind of step graph.

00:28:04.740 --> 00:28:07.040
This is just the heating energy, right?

00:28:07.040 --> 00:28:09.360
So we have, each time we use it,
it bumps up.

00:28:09.380 --> 00:28:10.980
You know, here, use it, okay,
that's great.

00:28:10.980 --> 00:28:12.390
Use it again, okay, great.

00:28:12.610 --> 00:28:14.370
Let's add in the clock, right?

00:28:14.380 --> 00:28:17.540
You can see that over time,
that clock is slowly adding

00:28:17.600 --> 00:28:19.380
to the energy consumption.

00:28:19.380 --> 00:28:22.040
And it's actually, by the end of the day,
there's a significant, you know,

00:28:22.100 --> 00:28:23.480
it's not just like a
little bit of energy,

00:28:23.490 --> 00:28:24.740
it's a significant amount.

00:28:24.740 --> 00:28:28.740
In fact,
500 to 1 ratio between the heating

00:28:28.740 --> 00:28:34.500
energy and the clock energy,
or sorry, heating power and clock power.

00:28:34.680 --> 00:28:39.110
It's only a 2 to 1 ratio between
heating energy and clock energy.

00:28:39.200 --> 00:28:42.010
So this is a critical
thing to understand.

00:28:42.020 --> 00:28:44.860
The things that you do
for short periods of time,

00:28:44.930 --> 00:28:49.200
the power matters,
but the things that you do for

00:28:49.200 --> 00:28:52.610
long periods of time have a
much larger impact on energy.

00:28:52.740 --> 00:28:55.520
So we're going to talk about
how to achieve that in a moment.

00:28:55.880 --> 00:28:57.720
For those of you who are
sort of math-oriented,

00:28:57.720 --> 00:29:01.780
you can kind of see in my equation that
the 1500 watts and the 1400 minutes,

00:29:01.780 --> 00:29:04.290
that's minutes in a day,
is about the same.

00:29:04.820 --> 00:29:08.580
And then the 2 to 1 ratio comes
from the 6 minutes total of the

00:29:08.650 --> 00:29:10.860
microwave versus the 3 watts.

00:29:11.000 --> 00:29:14.300
So for your software,
think about what your user wants.

00:29:14.540 --> 00:29:15.580
What are you doing for the user?

00:29:15.580 --> 00:29:19.860
What are you delivering versus
any background activity costs?

00:29:19.860 --> 00:29:22.420
Because if those background
activity costs are,

00:29:22.470 --> 00:29:25.680
you know, 50% of the cost of your
software on the battery,

00:29:25.770 --> 00:29:26.660
you can do better.

00:29:26.930 --> 00:29:29.880
And we want to help you do better.

00:29:30.500 --> 00:37:18.200
[Transcript missing]

00:37:18.550 --> 00:37:24.400
You can also use Dtrace on the command
line to get some stacks from your system.

00:37:24.400 --> 00:37:26.820
So this first example is I want
to know when are those get

00:37:26.820 --> 00:37:28.380
time of day calls happening.

00:37:28.380 --> 00:37:31.200
And you can say just focus on my
app and give me a user stack every

00:37:31.200 --> 00:37:32.960
time get time of day gets called.

00:37:32.960 --> 00:37:34.890
And you can go back and look
and say -- you can also set a

00:37:34.890 --> 00:37:39.200
break point in the debugger and
see why is this getting called.

00:37:39.200 --> 00:37:42.810
Then this is kind of
the big hammer weapon.

00:37:42.830 --> 00:37:45.600
I don't know how much you Dtrace,
but you can basically say every

00:37:45.600 --> 00:37:48.340
single function call I want
to know when it gets called.

00:37:48.340 --> 00:37:51.120
And you'll get the information about
the function call getting called.

00:37:51.120 --> 00:37:53.950
You can filter this down a little
bit once you get an idea of maybe

00:37:54.040 --> 00:37:56.080
what the most frequent ones are.

00:37:56.150 --> 00:37:59.700
But this will definitely determine
-- this is like the ultimate

00:37:59.700 --> 00:38:01.210
determinant of is your app idle?

00:38:01.210 --> 00:38:02.490
Is it running software or not?

00:38:02.490 --> 00:38:03.330
Is it running code?

00:38:03.340 --> 00:38:05.520
Are function calls getting called?

00:38:05.520 --> 00:38:09.240
And we also have both system trace
and within system trace we have

00:38:09.240 --> 00:38:13.060
the system call instrument that can
help you get back traces for these

00:38:13.080 --> 00:38:16.100
things so you can figure out where
in your code this is happening.

00:38:16.230 --> 00:38:16.800
This is happening.

00:38:19.500 --> 00:45:00.200
[Transcript missing]

00:45:00.350 --> 00:45:02.230
Peripherals in particular
are conservative.

00:45:02.260 --> 00:45:04.960
They tend to power up and then
they kind of hang out for a

00:45:04.970 --> 00:45:06.640
while and then they spin down.

00:45:06.770 --> 00:45:11.500
And so ideally we want
to tell them we're done.

00:45:11.840 --> 00:45:13.200
We're going to turn it off now.

00:45:13.230 --> 00:45:17.930
So often there's API for this,
whether it's dropping an assertion

00:45:17.930 --> 00:45:21.990
like Ethan mentioned or a close
or a release or a disable.

00:45:22.260 --> 00:45:24.270
There are many different ways
for the different frameworks to

00:45:24.320 --> 00:45:25.390
say I'm done with the camera.

00:45:25.400 --> 00:45:27.200
I don't need the GPS anymore.

00:45:27.200 --> 00:45:29.650
I have closed my networking connection.

00:45:29.650 --> 00:45:34.070
All of those things you can proactively
kind of shut down and finish up with.

00:45:34.070 --> 00:45:38.490
On iOS in particular there's
a UI kit background task

00:45:38.500 --> 00:45:40.200
completion that times out.

00:45:40.200 --> 00:45:41.600
Don't let it time out.

00:45:41.940 --> 00:45:45.280
Release it when you are done so
that we can immediately go ahead

00:45:45.280 --> 00:45:47.190
and put the system to sleep.

00:45:47.230 --> 00:45:50.180
As Ethan mentioned,
we have both frameworks and iOS does

00:45:50.240 --> 00:45:54.200
this extensively depending on which
framework calls are currently active.

00:45:54.200 --> 00:45:56.100
It will hold assertions on your behalf.

00:45:56.470 --> 00:45:57.200
OS X has a framework that
allows you to do that.

00:45:57.200 --> 00:45:59.190
It has more direct
access to the assertions.

00:45:59.200 --> 00:46:02.310
But you want to close those things,
release those assertions,

00:46:02.310 --> 00:46:05.730
drop your references, et cetera,
so that we can go ahead and say, oh,

00:46:05.730 --> 00:46:07.130
this software is done.

00:46:07.440 --> 00:46:10.200
Let's go ahead and power down.

00:46:10.200 --> 00:46:13.200
So the first thing to check is
first of all is your CPU still idle?

00:46:13.200 --> 00:46:16.440
A lot of times you do some work and,
you know, idle, work,

00:46:16.600 --> 00:46:19.300
and then you kind of don't
go all the way back because

00:46:19.300 --> 00:46:21.200
you left some timers running.

00:46:21.200 --> 00:46:24.190
You have some animations still on screen.

00:46:24.200 --> 00:46:26.200
So exercise your code
and then analyze idle.

00:46:26.200 --> 00:46:30.060
First do your idle
analysis when you launch.

00:46:30.200 --> 00:46:32.610
But then also do a bunch
of automated tests,

00:46:32.610 --> 00:46:35.720
run all your automated tests,
and then see am I still idle

00:46:35.720 --> 00:46:39.190
or do I have stuff that's kind
of running in the background.

00:46:39.200 --> 00:46:41.670
I often find that quitting and
restarting an app will cause

00:46:41.670 --> 00:46:43.200
its CPU consumption to go down.

00:46:43.200 --> 00:46:48.160
And I'm, oh, you know,
it's an opportunity for optimization.

00:46:48.300 --> 00:46:52.620
GPU mux on OS X,
we have this two graphics processing

00:46:52.620 --> 00:46:55.200
units on some of our blocks.

00:46:55.200 --> 00:46:57.200
We have some of our portable products.

00:46:57.400 --> 00:47:02.480
And the sort of the external one
versus the one that's built into the

00:47:02.570 --> 00:47:05.980
motherboard chipset is more power hungry.

00:47:06.350 --> 00:47:09.010
And so we will switch between these
depending on what you're doing.

00:47:09.330 --> 00:47:11.780
But there's a developer
Q&A that makes sure that if

00:47:11.790 --> 00:47:14.540
your process is using the GPU,
you do it wisely so that

00:47:14.540 --> 00:47:17.100
when these switches happen,
you don't end up leaving

00:47:17.140 --> 00:47:18.200
both of them powered on.

00:47:18.200 --> 00:47:21.200
There's a particular break point here.

00:47:21.200 --> 00:47:24.190
CGL bad application
not mux aware lockdown.

00:47:24.200 --> 00:47:27.180
You can set that break point
and see if you get called.

00:47:27.200 --> 00:47:29.010
But check out that Q&A.

00:47:29.540 --> 00:47:33.200
Finally, iOS has a wonderful energy
diagnostic instrument.

00:47:33.200 --> 00:47:37.020
This does not give you back traces,
but it does give you kind of a high

00:47:37.020 --> 00:47:39.200
level view of is the GPS turned on?

00:47:39.200 --> 00:47:41.950
Is the display bright?

00:47:42.250 --> 00:47:43.200
Am I doing network activity?

00:47:43.200 --> 00:47:46.090
And just kind of gives you a notion
of you can run your software,

00:47:46.090 --> 00:47:48.190
you can see it kind of
light up the machine,

00:47:48.200 --> 00:47:52.170
and then when you try to go back to idle,
you can see where you were successful.

00:47:52.230 --> 00:47:53.200
Did the machine idle back down?

00:47:53.200 --> 00:47:56.200
And you can also see how
long it took in some cases.

00:47:56.200 --> 00:47:58.170
Maybe you didn't fully close things.

00:47:58.220 --> 00:48:01.190
Maybe you let something time out
instead of actively closing it.

00:48:01.200 --> 00:48:03.550
But it gives you a pretty
wide view of Bluetooth,

00:48:03.580 --> 00:48:06.060
sleep/wake, et cetera, et cetera,
et cetera.

00:48:06.200 --> 00:48:11.510
So that is a tool that you can use for
iOS particularly to see which parts

00:48:11.510 --> 00:48:14.200
of the system you left turned on.

00:48:14.500 --> 00:49:46.600
[Transcript missing]