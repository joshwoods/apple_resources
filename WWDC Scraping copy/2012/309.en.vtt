WEBVTT

00:00:15.930 --> 00:00:16.580
Good afternoon.

00:00:16.580 --> 00:00:19.400
Welcome to Part 2 of our
Introduction to Passbook.

00:00:19.490 --> 00:00:21.900
I'm Ken Ferrry,
and Eliza Block and I will be

00:00:22.110 --> 00:00:24.030
speaking to you this afternoon.

00:00:24.040 --> 00:00:26.200
So this is Part 2.

00:00:26.210 --> 00:00:29.240
In Part 1, what did we do?

00:00:29.240 --> 00:00:33.660
We talked about this file format that we
defined for a pass in Passbook that you

00:00:33.860 --> 00:00:36.350
need to use if you're going to make one.

00:00:36.400 --> 00:00:40.370
And already from that, you know,
that's actually kind of strange, right?

00:00:40.370 --> 00:00:42.580
Apple doesn't usually
define file formats.

00:00:42.680 --> 00:00:45.240
We usually vend frameworks
to let you make things.

00:00:45.910 --> 00:00:49.000
But in this case,
we had to do a file format because a

00:00:49.080 --> 00:00:53.220
pass is usually rendered out on a server,
kind of the same way it gets a

00:00:53.220 --> 00:00:55.860
request and it renders out a web page.

00:00:55.880 --> 00:00:57.640
In this case, it renders out a pass.

00:00:57.640 --> 00:01:03.030
Now, already from this,
you can see that the ecosystem sort

00:01:03.030 --> 00:01:08.740
of for Passbook has more pieces
than is usual for an Apple API.

00:01:08.740 --> 00:01:11.540
And what we're going to do today
is talk about the different

00:01:11.540 --> 00:01:14.240
pieces of that ecosystem,
except for the file format,

00:01:14.240 --> 00:01:15.880
because we did that already.

00:01:15.880 --> 00:01:18.940
So there are three things
we're going to talk about.

00:01:18.940 --> 00:01:21.510
The first one is the
idea of a companion app.

00:01:21.520 --> 00:01:25.600
So this would be something like if
you're a coffee shop and you want to let

00:01:25.600 --> 00:01:28.920
the user add more money to their pass,
that's not something

00:01:29.000 --> 00:01:30.460
they can do in Passbook.

00:01:30.510 --> 00:01:34.340
So you're going to have some
sort of extended companion.

00:01:34.340 --> 00:01:37.320
We want to talk about a conduit app,
we're calling it.

00:01:37.570 --> 00:01:40.870
This is something like Safari or Mail,
which isn't something that

00:01:40.870 --> 00:01:43.650
sort of you think of as
having much to do with passes,

00:01:43.740 --> 00:01:45.580
but it can take attachments.

00:01:45.910 --> 00:01:47.900
So you can write these two.

00:01:47.900 --> 00:01:52.140
On the system, Safari and Mail are
both in this category.

00:01:52.140 --> 00:01:55.600
And externally,
if you had an instant messaging

00:01:55.600 --> 00:01:59.690
client or if you had something
like VoodooPad or just a personal

00:02:00.150 --> 00:02:04.190
wiki that takes attachments,
that's the kind of thing that

00:02:04.310 --> 00:02:06.350
you might be able to use.

00:02:06.380 --> 00:02:09.410
And then last,
we're going to talk about the server.

00:02:09.410 --> 00:02:11.130
This is really interesting.

00:02:11.130 --> 00:02:14.500
I don't think we've ever done
something quite like this.

00:02:15.990 --> 00:02:18.390
So we're going to talk about a
service API that's almost the same

00:02:18.390 --> 00:02:21.590
kind of thing as a delegate protocol,
except that instead of calling an object,

00:02:21.590 --> 00:02:23.040
we're calling it on a server.

00:02:23.040 --> 00:02:24.840
And it's layered over top of push.

00:02:24.840 --> 00:02:28.140
And Eliza's going to go through this,
and she has really good animations,

00:02:28.140 --> 00:02:29.380
so I'm sure you'll love it.

00:02:29.500 --> 00:02:31.180
Okay, so let's get started.

00:02:31.180 --> 00:02:34.400
And first we're going to talk
about these companion apps.

00:02:34.500 --> 00:02:38.190
Okay, so like we said,
a companion app is going to be something

00:02:38.260 --> 00:02:42.640
that offers extended functionality
past what Passbook itself does.

00:02:42.790 --> 00:02:45.230
And usually what that's going to mean
is it's going to mean modifying things.

00:02:45.240 --> 00:02:45.690
Okay.

00:02:45.900 --> 00:02:48.800
So Passbook does display
and it does browsing,

00:02:48.800 --> 00:02:52.040
but it doesn't do any
user-driven modification.

00:02:53.720 --> 00:02:56.500
So let's kind of go through
this sort of task by task.

00:02:56.620 --> 00:03:00.420
In order to write this kind of app,
the first thing you're going to be able

00:03:00.420 --> 00:03:03.390
to have to do is to show the user what
passes are already installed on the

00:03:03.630 --> 00:03:05.160
device so that they can modify them.

00:03:05.200 --> 00:03:07.590
There are two classes involved with that.

00:03:07.740 --> 00:03:10.390
There's the PKPass library,
which represents the

00:03:10.400 --> 00:03:12.380
collection of installed passes.

00:03:12.380 --> 00:03:14.910
And then there's PKPass,
which is relatively obvious.

00:03:16.820 --> 00:03:18.480
So let's go through those in turn.

00:03:18.480 --> 00:03:20.680
So first,
you're going to need to be able to

00:03:20.680 --> 00:03:24.940
grab back the list of installed passes,
which you'll do using PKPass library,

00:03:24.940 --> 00:03:26.780
which is mostly pretty straightforward.

00:03:26.780 --> 00:03:28.940
You create it with alloc init.

00:03:29.110 --> 00:03:32.990
You ask for its passes,
which returns an array of passes.

00:03:32.990 --> 00:03:37.720
And then you probably want to register
with the notification center to get

00:03:37.720 --> 00:03:41.850
notified if those passes change,
because your UI will have to

00:03:41.900 --> 00:03:44.230
be updated to account for that.

00:03:44.560 --> 00:03:47.420
You might think it's impossible for
passes to change while the user is

00:03:47.420 --> 00:03:50.080
in your app without you knowing it,
but that's not true.

00:03:50.080 --> 00:03:53.600
It might, because of the server API,
something might change

00:03:53.600 --> 00:03:56.830
behind the scenes there,
or iCloud sync might kick in and

00:03:56.830 --> 00:03:59.040
something might change that way.

00:03:59.060 --> 00:04:02.100
And especially iCloud sync,
you really can't control,

00:04:02.160 --> 00:04:03.910
so this always might happen.

00:04:03.940 --> 00:04:05.620
Now,
there is one thing on here that I want

00:04:05.690 --> 00:04:08.940
to call your attention to that is a
little bit different than sometimes.

00:04:08.940 --> 00:04:11.060
Note the object of that notification.

00:04:11.240 --> 00:04:13.490
The pass library there, it's not nil.

00:04:14.800 --> 00:04:19.170
That's because each pass library
issues its own notifications.

00:04:19.170 --> 00:04:21.850
And you just want to,
it's not a singleton.

00:04:21.850 --> 00:04:25.640
You just want to register to observe
a single pass library object.

00:04:25.660 --> 00:04:27.570
And in fact,
if you try to pass nil there,

00:04:27.680 --> 00:04:29.730
if you don't instantiate
any pass libraries,

00:04:29.780 --> 00:04:31.760
you'll never get any notifications.

00:04:31.760 --> 00:04:34.790
Or if there happened to be three
instantiated because three different

00:04:34.790 --> 00:04:37.200
areas of the process are using it,
you'd get three.

00:04:37.200 --> 00:04:39.500
So be sure that you pass that there.

00:04:39.890 --> 00:04:42.580
Sort of a little bit more on that line.

00:04:42.580 --> 00:04:44.240
It's sort of the same model as Core Data.

00:04:44.790 --> 00:04:50.060
The PK pass library always
represents the same underlying data,

00:04:50.080 --> 00:04:52.000
but it's sort of a
differing interfaces to it,

00:04:52.170 --> 00:04:53.180
like a managed object context.

00:04:53.280 --> 00:04:58.060
And they're thread confined,
or queue confined.

00:04:58.060 --> 00:05:00.430
So generally, you'd just be using one
from the main thread,

00:05:00.430 --> 00:05:02.560
and that's fine,
and you won't have to worry about it.

00:05:02.970 --> 00:05:07.360
But be aware, that's the threading model
if you want to use it.

00:05:07.360 --> 00:05:09.230
And Eliza's going to show
you this a little bit,

00:05:09.230 --> 00:05:11.560
and a little bit of a caveat
there when she does a demo.

00:05:12.900 --> 00:08:37.200
[Transcript missing]

00:08:37.460 --> 00:08:39.400
So you don't display.

00:08:39.400 --> 00:08:42.260
We don't actually vend any view
classes at all in Passbook.

00:08:42.260 --> 00:08:43.440
We vend model-level data.

00:08:43.440 --> 00:08:45.840
So you can do that kind
of display in a table,

00:08:45.840 --> 00:08:47.400
but not the full-on pass.

00:08:47.400 --> 00:08:48.400
For that, go to Passbook.

00:08:50.130 --> 00:08:56.220
So, if that's the case,
if there's no browsing in your app,

00:08:56.310 --> 00:08:59.090
and if we're saying that you
should just do it in Passbook,

00:08:59.170 --> 00:09:02.260
you should realize at this point
what companion apps are really for.

00:09:02.260 --> 00:09:04.290
They're not for browsing,
they're not for reproducing

00:09:04.290 --> 00:09:05.230
that same experience.

00:09:05.280 --> 00:09:08.740
They're for extended,
for different things.

00:09:08.900 --> 00:09:10.220
They're generally for editing.

00:09:10.240 --> 00:09:11.510
They're for modifying passes.

00:09:11.520 --> 00:09:13.930
And that's it.

00:09:14.080 --> 00:09:16.450
So, you may find,
when you think about it, actually,

00:09:16.450 --> 00:09:17.630
I don't need to do that.

00:09:17.720 --> 00:09:20.890
I have a simpler case where the
user is really just going to need

00:09:20.980 --> 00:09:22.810
to see their passes and pick one.

00:09:22.820 --> 00:09:25.210
And if that's the case,
you shouldn't write an app.

00:09:25.300 --> 00:09:28.350
Because it's a really,
really good user experience.

00:09:28.420 --> 00:09:30.720
It's really the experience
we're kind of aiming for,

00:09:30.720 --> 00:09:34.240
that passes should be self-contained
and should be useful by themselves.

00:09:34.240 --> 00:09:34.960
It's very lightweight.

00:09:34.960 --> 00:09:37.850
The user already understands
it if they understand Passbook.

00:09:37.910 --> 00:09:39.850
It's just nice, you know?

00:09:39.910 --> 00:09:43.090
I mean, and of course, if you need it,
you should write a companion app,

00:09:43.190 --> 00:09:45.050
but don't just do it for no good reason.

00:09:45.060 --> 00:09:47.640
So, with that said, let's go.

00:09:47.640 --> 00:09:50.420
Let's go ahead and actually talk
about genuinely modifying a pass.

00:09:50.490 --> 00:09:53.980
In this case, the example might be for
this airline choosing a seat.

00:09:53.980 --> 00:09:55.040
Okay?

00:09:56.680 --> 00:10:00.040
This would be easier, perhaps,
if PKPass was mutable, and it's not.

00:10:00.090 --> 00:10:02.990
So you have to be able to sign
your pass in order to make a pass,

00:10:03.030 --> 00:10:06.030
and if your signing certificate
was present on the device,

00:10:06.030 --> 00:10:09.040
that wouldn't be a very good secret,
would it?

00:10:09.040 --> 00:10:11.290
Since anybody would be
able to sign with that.

00:10:13.410 --> 00:10:15.410
So as a result,
if you want to modify a pass,

00:10:15.410 --> 00:10:19.080
the way you're going to have to do it is
you're going to have to talk to a server,

00:10:19.170 --> 00:10:21.550
your server,
tell it what it is you want done,

00:10:21.550 --> 00:10:25.450
and then the server will
send back the full signed,

00:10:25.450 --> 00:10:27.280
zipped PKPass data.

00:10:27.280 --> 00:10:29.940
And that's ad hoc,
that's in your own hands,

00:10:29.940 --> 00:10:33.380
handle authentication,
however seems appropriate.

00:10:33.380 --> 00:10:35.620
One thing you will have to do
in order to be able to do this,

00:10:35.620 --> 00:10:38.780
though, is to identify what pass is being
talked about to your server.

00:10:38.780 --> 00:10:41.500
And so for that,
we're just basically saying, yes,

00:10:41.500 --> 00:10:42.920
these methods do exist.

00:10:43.350 --> 00:10:46.080
Pass type identifier and serial number,
if you remember,

00:10:46.080 --> 00:10:49.500
these two are what Passbook uses to
uniquely identify a pass together.

00:10:49.500 --> 00:10:51.800
And so it's available to you,
and you can tell your server,

00:10:51.800 --> 00:10:54.250
and that way your server should
know what it's operating on.

00:10:54.290 --> 00:10:57.910
Okay, so once you've got that
data back from the server,

00:10:58.030 --> 00:11:00.710
you need to incorporate it into Passbook.

00:11:00.710 --> 00:11:02.730
How are you going to do that?

00:11:02.790 --> 00:11:06.180
Well, you can do PKPass alloc init,
and then once you have it,

00:11:06.180 --> 00:11:10.440
you can call this method on pass library,
which is replace pass with pass.

00:11:10.440 --> 00:11:12.960
It has this little bit of a funny name.

00:11:12.960 --> 00:11:13.260
You might expect it to be a
little bit of a funny name.

00:11:13.380 --> 00:11:14.740
You might expect it to be add pass,
right?

00:11:14.740 --> 00:11:18.940
But the distinction is that
adding a completely new pass to

00:11:19.010 --> 00:11:23.700
Passbook is something that we
say requires user interaction.

00:11:23.700 --> 00:11:25.700
The Passbook is theirs.

00:11:25.700 --> 00:11:27.220
You can't just kind of
stuff stuff in there.

00:11:27.260 --> 00:11:28.440
They have to hit add.

00:11:28.500 --> 00:11:29.800
They have to okay it with a button.

00:11:29.800 --> 00:11:34.300
So what we do let you do is that
if you have a new pass and an old

00:11:34.320 --> 00:11:39.800
pass that both have the same pass
type identifier and serial number,

00:11:39.800 --> 00:11:42.870
then we consider the new one to
be a new version of the old one.

00:11:43.020 --> 00:11:45.480
And we'll let you update it in place.

00:11:45.590 --> 00:11:48.460
The user would not see it as a new pass,
would not think of it as a new pass.

00:11:48.480 --> 00:11:51.710
They would think of it
as the pass changed.

00:11:51.740 --> 00:11:53.550
Okay, so that's what it is.

00:11:53.690 --> 00:11:55.930
But since they're immutable,
we don't actually modify them.

00:11:55.940 --> 00:11:56.690
We're just replacing them.

00:11:56.780 --> 00:11:57.650
Okay, great.

00:11:57.820 --> 00:12:01.110
So at this point,
I would like to invite up Eliza to show

00:12:01.110 --> 00:12:06.120
you a demo of some of the things we've
been talking about in the Passbook API.

00:12:06.120 --> 00:12:07.410
Okay.

00:12:13.310 --> 00:12:15.610
So I'm going to do a little
demo where I'm going to build

00:12:15.690 --> 00:12:18.460
an app that Ken already showed
you some screenshots from.

00:12:18.460 --> 00:12:20.700
Okay, so this is the app.

00:12:20.790 --> 00:12:22.030
It doesn't do anything yet.

00:12:22.130 --> 00:12:25.120
It's showing us a list of our passes,
but I haven't written the part

00:12:25.120 --> 00:12:27.800
that's actually going to go
get the passes out of Passbook.

00:12:27.870 --> 00:12:29.720
So let me do that now.

00:12:29.720 --> 00:12:35.370
So what I did to create this project
was I basically took the stock Xcode

00:12:35.380 --> 00:12:39.060
master detail view controller template.

00:12:39.480 --> 00:12:41.870
I made one,
and I made a few modifications to

00:12:41.940 --> 00:12:44.100
it just to make the UI look pretty.

00:12:44.100 --> 00:12:48.060
But the interesting thing here is
in this master view controller,

00:12:48.060 --> 00:12:51.440
which is the view that I just
showed you that was empty,

00:12:51.440 --> 00:12:54.880
what we want to do is
instantiate a pass library,

00:12:54.950 --> 00:12:59.050
and we're also going to fill
up this array of passes here in

00:12:59.140 --> 00:13:03.090
order to display the list of the
users' currently installed passes.

00:13:03.100 --> 00:13:06.280
So in my init method,
I'm going to create a pass

00:13:06.650 --> 00:13:09.440
library just by allocating one,
an init.

00:13:09.480 --> 00:13:15.440
And then I'm going to grab the passes
out of it by asking it for its passes.

00:13:15.440 --> 00:13:19.560
Now, one thing to note about this is
that these passes are going to

00:13:19.690 --> 00:13:21.960
come back in an arbitrary order.

00:13:21.960 --> 00:13:24.640
We don't actually sort them in
any way when giving them back,

00:13:24.640 --> 00:13:27.780
so it's kind of non-deterministic
how they're going to come out.

00:13:27.820 --> 00:13:31.680
So you might want to display them
to the user in some useful order.

00:13:31.680 --> 00:13:35.230
In this case, this is an Oceanic app,
and it's going to show a list

00:13:35.230 --> 00:13:38.230
of your upcoming flights,
so we might want to sort them by date.

00:13:38.300 --> 00:13:38.830
Now, if you're going to do this,
you're going to want to do it in

00:13:38.830 --> 00:13:39.400
a way that's going to show you
the list of your upcoming flights.

00:13:39.400 --> 00:13:39.460
So you might want to display them
to the user in some useful order.

00:13:39.480 --> 00:13:42.300
Now, passes, as you may remember
from our first session,

00:13:42.300 --> 00:13:45.050
have the possibility of
having a relevant date,

00:13:45.080 --> 00:13:47.960
which is the time at which you would
most likely want to use that pass.

00:13:48.040 --> 00:13:50.890
In this case,
Oceanic has chosen to use that

00:13:50.890 --> 00:13:54.820
relevant date to store the
departure time of the flight.

00:13:54.820 --> 00:13:57.720
So that would be a good
property to sort the passes on.

00:13:57.720 --> 00:14:00.370
So I'm going to create
some sort descriptors.

00:14:00.470 --> 00:14:00.640
Whoa.

00:14:00.640 --> 00:14:03.480
Okay, so I'm going to create
these sort descriptors.

00:14:03.480 --> 00:14:07.480
We're going to sort by the
relevant date property ascending.

00:14:07.480 --> 00:14:12.700
And then instead of just setting this...
To the raw result of calling passes,

00:14:12.700 --> 00:14:18.940
we're going to sort the result
first by that descriptor.

00:14:18.940 --> 00:14:23.800
So this is the new literal array
syntax that's equivalent to calling

00:14:23.800 --> 00:14:26.500
NSArray array with object by date.

00:14:26.550 --> 00:14:27.890
Much more compact.

00:14:27.930 --> 00:14:29.040
New in iOS 6.

00:14:29.040 --> 00:14:29.340
Okay.

00:14:29.340 --> 00:14:32.390
So now we've got our passes.

00:14:32.400 --> 00:14:34.590
So our model is set up.

00:14:34.680 --> 00:14:39.370
We need to now configure the table view
cells to actually display the data.

00:14:39.390 --> 00:14:43.600
So I'm going to scroll down
here to my table view cell

00:14:43.600 --> 00:14:46.270
for row at index path method.

00:14:46.280 --> 00:14:49.880
And again, this is pretty much just the
stock method that gets produced.

00:14:49.880 --> 00:14:53.980
With the one exception that I've
created a UI table view cell subclass,

00:14:54.080 --> 00:14:57.510
which is... Its job is simply
to make these cells lay

00:14:57.510 --> 00:14:59.100
themselves out all pretty.

00:14:59.100 --> 00:15:01.630
So I'm going to show
you the header for that.

00:15:01.660 --> 00:15:04.870
It's got one interesting method.

00:15:04.880 --> 00:15:07.750
Configure with departure code,
arrival code, flight date,

00:15:07.850 --> 00:15:08.700
passenger seat.

00:15:08.790 --> 00:15:11.510
So if we... If we can get all
that information out of the pass,

00:15:11.540 --> 00:15:15.040
we can just configure it on the cell
and then the cell will lay itself out.

00:15:15.040 --> 00:15:16.890
So that's what we're going to do next.

00:15:17.040 --> 00:15:18.420
All right.

00:15:18.450 --> 00:15:19.400
So switching back.

00:15:19.410 --> 00:15:24.420
We need to grab the pass for this row,
which is just the object at index row.

00:15:24.580 --> 00:15:28.750
And then we're going to call that method
that I just showed you on the cell.

00:15:28.920 --> 00:15:31.810
And to get all this
information out of the pass,

00:15:31.860 --> 00:15:36.560
we're going to use the localized value
for field key method that Ken discussed.

00:15:36.560 --> 00:15:41.860
So the departure code is... The localized
value for the field key depart.

00:15:41.910 --> 00:15:45.190
And the reason that I know that
is that I wrote the pass also,

00:15:45.260 --> 00:15:45.820
right?

00:15:45.940 --> 00:15:47.240
So I got to choose these keys.

00:15:47.320 --> 00:15:51.840
And so I know that I chose to use the key
depart for my departure code and so on.

00:15:51.840 --> 00:15:54.750
So I'm relying... You're
relying on the fact that the app

00:15:54.750 --> 00:15:56.180
writer is also the pass writer.

00:15:56.330 --> 00:15:59.950
So we can just go ahead
and fill these in.

00:16:00.250 --> 00:16:03.520
Arrive, flight, date, passenger, seat.

00:16:03.600 --> 00:16:06.730
So now we've grabbed all that
data out of the pass and we're now

00:16:06.730 --> 00:16:08.630
ready to go ahead and display it.

00:16:08.720 --> 00:16:11.790
So... I'm gonna run this again.

00:16:12.040 --> 00:16:15.740
And now we actually
see some data show up.

00:16:15.920 --> 00:16:20.080
So here's a list of these
flights that Hugo Reyes is going

00:16:20.170 --> 00:16:23.280
to take from Sydney to Perth,
back to Sydney, and then to LA,

00:16:23.280 --> 00:16:25.640
where he never actually arrives.

00:16:25.640 --> 00:16:29.700
And we're going to, so now let's suppose
that on his way to Perth,

00:16:29.730 --> 00:16:32.630
he decides that he wants
to change his seat.

00:16:32.700 --> 00:16:35.730
So we can go into the
detail view controller now,

00:16:35.730 --> 00:16:40.180
and the detail view controller,
I'm producing all of this information

00:16:40.240 --> 00:16:42.490
up here by just the same method.

00:16:42.570 --> 00:16:45.460
I'm grabbing that same information
out of the PK pass object.

00:16:45.520 --> 00:16:50.800
So suppose he chooses to change his seat,
and maybe he selects 3A.

00:16:50.800 --> 00:16:53.870
So now when he is going
to tap the 3A button,

00:16:53.870 --> 00:16:57.860
what's going to happen is this
app is going to send a request

00:16:57.860 --> 00:17:02.580
to the Oceanic server and say,
I would like to update this pass.

00:17:02.660 --> 00:17:04.630
I'm going to start with
this serial number,

00:17:04.690 --> 00:17:07.590
and I want to update it by
changing the seat to 3A.

00:17:07.660 --> 00:17:10.660
And then the server is going to try to
process that request however it does,

00:17:10.660 --> 00:17:13.700
and it will send back
a new PK pass object,

00:17:13.840 --> 00:17:16.660
which will then insert
into the pass library.

00:17:16.660 --> 00:17:18.610
So I'm going to go ahead and do it.

00:17:18.670 --> 00:17:21.380
Now, to tell the truth,
I didn't actually write

00:17:21.420 --> 00:17:23.790
an Oceanic server,
so what I'm really doing is

00:17:23.790 --> 00:17:26.660
waiting three seconds and then
returning a prepackaged pass.

00:17:26.660 --> 00:17:30.230
So let's see if it works.

00:17:31.200 --> 00:22:23.500
[Transcript missing]

00:22:24.050 --> 00:22:26.190
Okay, so it worked here.

00:22:26.250 --> 00:22:29.480
If I go back to the table view,
now you can see that it did update.

00:22:29.480 --> 00:22:33.130
So it got the notification from the pass
library and updated its UI in response.

00:22:33.200 --> 00:22:35.870
So I'm going to turn it back over
to Ken to talk about Conduit apps.

00:22:35.880 --> 00:22:37.110
Ken Ferrity

00:22:37.750 --> 00:22:38.700
Thank you, Eliza.

00:22:38.700 --> 00:22:40.930
Right, so that's everything we had
to say about companion apps.

00:22:40.950 --> 00:22:44.130
So the last thing I want to
talk about before I give it

00:22:44.190 --> 00:22:45.480
to Eliza is conduit apps.

00:22:45.790 --> 00:22:51.210
Again, these are things that sort of deal
with arbitrary attachments in the OS.

00:22:51.330 --> 00:22:52.460
Mail is a really great example.

00:22:52.460 --> 00:22:58.860
And it just wants to be able to sort of
display a little bit of stuff like this,

00:22:58.860 --> 00:23:02.780
like this little attachment bubble,
and then it wants to let the user

00:23:02.780 --> 00:23:02.780
add the pass to the pass library.

00:23:02.800 --> 00:33:40.300
[Transcript missing]

00:33:40.340 --> 00:33:42.900
You're going to need a couple tables
to store some of this information.

00:33:42.900 --> 00:33:46.700
One of them is going to
be a table of devices.

00:33:46.700 --> 00:33:50.380
So this is where you would store
associations between devices,

00:33:50.380 --> 00:33:52.760
and these are the device
IDs that we're sending you,

00:33:52.760 --> 00:33:53.680
and push tokens.

00:33:53.700 --> 00:33:56.550
So you're going to store
the device ID and push token

00:33:56.610 --> 00:34:00.300
that we just sent you in this
registration request in that table,

00:34:00.300 --> 00:34:02.230
if you don't already have it.

00:34:02.300 --> 00:34:04.050
Maybe this might be the second
or third pass that's been

00:34:04.050 --> 00:34:05.920
registered for this device,
and if you already have it,

00:34:05.920 --> 00:34:07.180
you don't need to store it again.

00:34:08.540 --> 00:34:11.530
So you also are going to need
to have a registrations table,

00:34:11.530 --> 00:34:14.600
and that's where you're going
to store associations between

00:34:14.630 --> 00:34:18.350
devices and individual passes that
are registered for that device.

00:34:18.380 --> 00:34:21.690
So in this case,
you're going to make a new row here

00:34:21.910 --> 00:34:26.780
with the device that we just sent you
and the pass that we just sent you,

00:34:26.780 --> 00:34:30.030
and that stores the fact that this
particular pass is now registered

00:34:30.030 --> 00:34:31.600
with this particular device.

00:34:31.600 --> 00:34:32.770
Pretty straightforward.

00:34:32.780 --> 00:34:36.770
Okay, so let's look at what that
looks like in practice.

00:34:36.780 --> 00:34:36.780
How are we going to actually
send you this stuff?

00:34:36.800 --> 00:34:41.090
We're going to send a post
to your web service URL,

00:34:41.090 --> 00:34:44.620
slash, V1, which is version one.

00:34:44.620 --> 00:34:46.580
All of our stuff is
going to begin with that.

00:34:46.620 --> 00:34:49.560
And then we have this
long URL after that.

00:34:49.570 --> 00:34:53.250
It's devices and then the device ID,
registrations, and then the pass type

00:34:53.250 --> 00:34:56.830
identifier and the serial number,
and that indicates that this

00:34:56.870 --> 00:34:58.920
device is registering this pass.

00:34:59.020 --> 00:35:02.900
In the header for that post,
we're going to have an

00:35:03.070 --> 00:35:05.020
authorization field,
and the value for that is going to

00:35:05.020 --> 00:35:07.230
be "add_pass". And then the value
for that is going to be "Apple

00:35:07.230 --> 00:35:08.860
pass" and then the auth token.

00:35:08.860 --> 00:35:11.620
So that's what you should
then check against the pass,

00:35:11.620 --> 00:35:12.860
make sure it matches.

00:35:12.860 --> 00:35:16.570
And the payload for this post
is going to be a JSON dictionary

00:35:16.640 --> 00:35:18.790
consisting of the push token.

00:35:19.190 --> 00:35:22.920
So that's how we're getting all
that information across to you.

00:35:22.990 --> 00:35:25.580
All right, we have a similar
unregistration endpoint.

00:35:25.660 --> 00:35:28.450
We're going to hit this endpoint
if the user deletes a pass that was

00:35:28.530 --> 00:35:32.010
previously registered to your service,
or if they actually opt out of

00:35:32.390 --> 00:35:34.930
receiving push notifications,
which they might do.

00:35:35.060 --> 00:35:37.120
And that just looks
like the exact same URL,

00:35:37.120 --> 00:35:40.170
except we're sending a delete this time,
and we're sending the

00:35:40.170 --> 00:35:41.720
same authorization field.

00:35:41.910 --> 00:35:43.410
OK.

00:35:43.760 --> 00:35:48.750
So let's go back for a minute to
storage because there's another aspect

00:35:48.810 --> 00:35:52.770
of storage that I haven't mentioned,
which is kind of the

00:35:52.770 --> 00:35:55.400
most important aspect,
which is a table that actually

00:35:55.440 --> 00:35:58.290
contains all of the data
that's backing these passes.

00:35:58.300 --> 00:36:02.180
So in the case of Oceanic,
imagine we're writing the Oceanic server,

00:36:02.300 --> 00:36:04.360
we've got a boarding passes table.

00:36:04.360 --> 00:36:05.880
Of course,
you would have a different table,

00:36:05.920 --> 00:36:07.680
you know,
depending on what data you're vending.

00:36:08.440 --> 00:36:11.650
So the boarding passes table
is going to just contain the

00:36:11.710 --> 00:36:14.010
information for one of these passes.

00:36:14.020 --> 00:36:17.060
Here's Hugo's flight
from Sydney to Perth,

00:36:17.060 --> 00:36:20.860
and then there's maybe
some other flights on here.

00:36:20.860 --> 00:36:24.080
And there's one column that
I've left blank because I wanted

00:36:24.080 --> 00:36:25.580
to draw attention to it.

00:36:25.670 --> 00:36:28.350
It's going to be the most important
column for what's coming next.

00:36:28.380 --> 00:36:32.490
And that's a column for storing
the last updated date or tag,

00:36:32.490 --> 00:36:36.080
however you want to do it,
for each of these rows.

00:36:36.260 --> 00:36:38.980
So each of these rows was created at
some time and then has potentially

00:36:38.980 --> 00:36:40.460
been updated a few times since.

00:36:40.460 --> 00:36:43.930
And you're going to store maybe a
timestamp for when that happened.

00:36:43.940 --> 00:36:46.130
Now, I say maybe a timestamp.

00:36:46.200 --> 00:36:47.880
This is actually up to you.

00:36:47.880 --> 00:36:50.180
So we consider this to be a tag.

00:36:50.180 --> 00:36:51.160
It's opaque to us.

00:36:51.320 --> 00:36:53.090
We're going to send it back and forth.

00:36:53.250 --> 00:36:54.810
But the only really
important thing about it,

00:36:54.860 --> 00:36:56.960
well, there's two really
important things about it.

00:36:57.050 --> 00:36:59.460
One is that they're
monotonically increasing.

00:36:59.460 --> 00:37:01.810
So you always, you know,
a new one is always

00:37:01.860 --> 00:37:03.640
greater than previous ones.

00:37:03.640 --> 00:37:06.000
And you should be able to
compare two of them and see.

00:37:06.080 --> 00:37:07.260
And see which one is later.

00:37:07.260 --> 00:37:10.810
So whatever system works best for
you to do that is totally fine.

00:37:10.920 --> 00:37:13.560
Timestamps are a pretty
obvious way to implement it.

00:37:13.560 --> 00:37:14.760
So that's what I'm going to go with.

00:37:14.780 --> 00:37:16.160
All right.

00:37:16.160 --> 00:37:20.840
So now suppose that
Hugo were to go into the app,

00:37:20.840 --> 00:37:23.860
for example,
or maybe onto the Oceanic website

00:37:23.860 --> 00:37:26.520
and change his seat as he did
in the demo that I just gave.

00:37:26.520 --> 00:37:30.690
So he's changing the
seat for this top row.

00:37:30.820 --> 00:37:33.070
And he changes it to 3A.

00:37:33.350 --> 00:37:35.820
So the first thing that you're
going to do is update the --

00:37:35.820 --> 00:37:37.900
the update tag to a later date.

00:37:38.020 --> 00:37:39.760
Maybe he did it, you know, at 5:00 p.m.

00:37:39.760 --> 00:37:40.420
on the 18th.

00:37:40.420 --> 00:37:42.640
So we now have a new
update tag for that row.

00:37:42.660 --> 00:37:49.110
And now you want to notify all of the
devices that this particular pass is

00:37:49.110 --> 00:37:53.710
registered with that something changed so
that they can go pull down the new seat.

00:37:53.720 --> 00:37:58.000
So looking over to the
registrations table,

00:37:58.220 --> 00:38:01.780
you're going to find that serial number,
JA38, in that table.

00:38:01.780 --> 00:38:04.530
And we find that, okay,
it's registered to two different devices,

00:38:04.530 --> 00:38:05.620
device A and device B.

00:38:05.620 --> 00:38:09.820
So now we can go to the devices table,
find those two devices,

00:38:09.860 --> 00:38:13.190
and now we've got the
associated push tokens.

00:38:13.220 --> 00:38:16.300
So those are the push tokens to which
we're going to send a push notification.

00:38:16.320 --> 00:38:17.300
All right.

00:38:17.380 --> 00:38:18.320
So that's how that process works.

00:38:18.460 --> 00:38:19.320
Okay.

00:38:19.320 --> 00:38:21.820
Now watch really carefully
because this is my best animation.

00:38:21.950 --> 00:38:22.820
All right.

00:38:22.820 --> 00:38:24.320
Sending a push notification.

00:38:25.530 --> 00:38:27.400
Thank you.

00:38:27.400 --> 00:38:29.380
All right.

00:38:29.420 --> 00:38:31.400
Okay,
so you want to send a push notification.

00:38:31.400 --> 00:38:33.370
What you're going to do is
talk to the Apple Push service.

00:38:33.430 --> 00:38:36.480
The only two pieces of information
you give the Apple Push service are

00:38:36.520 --> 00:38:40.400
the pass type identifier and the push
token that you're sending this push to.

00:38:40.410 --> 00:38:44.230
The pass type identifier is actually
built into the cert that you're going

00:38:44.230 --> 00:38:46.400
to use to send the push notification.

00:38:46.460 --> 00:38:50.380
So Apple Push service
delivers that to the device.

00:38:50.400 --> 00:38:53.400
And so the device receives
the pass type identifier.

00:38:53.400 --> 00:38:56.400
Now, this is a really small
amount of information.

00:38:56.400 --> 00:39:01.750
And you might wonder why you didn't,
for example, tell us what changed in

00:39:01.910 --> 00:39:03.400
the payload of the push.

00:39:03.400 --> 00:39:08.390
The reason is that push is not
a guaranteed delivery mechanism.

00:39:08.400 --> 00:39:11.610
So push notifications can be
coalesced if the device was offline,

00:39:11.610 --> 00:39:13.510
for example,
at the time that you sent it,

00:39:13.510 --> 00:39:15.400
and then you sent another one after it.

00:39:15.400 --> 00:39:18.300
When the device comes back online,
it's only going to receive

00:39:18.300 --> 00:39:21.390
the last push notification for
your particular identifier.

00:39:21.400 --> 00:39:25.910
So we didn't want to take the
chance that any information about

00:39:25.910 --> 00:39:28.390
a crucial update would be lost.

00:39:28.400 --> 00:39:31.350
So when you give us just
the pass type identifier,

00:39:31.420 --> 00:39:33.400
we're basically guaranteed
to receive one of those,

00:39:33.400 --> 00:39:35.400
even if you send a lot of them.

00:39:35.400 --> 00:39:38.400
So we're now going to go
and find out what changed.

00:39:38.400 --> 00:39:41.580
And the effect of this is that
we're guaranteed to always get all

00:39:41.580 --> 00:39:43.320
of the updates and never miss one.

00:39:43.400 --> 00:39:46.370
So we've got the pass type identifier.

00:39:46.400 --> 00:39:49.390
We need to go figure out what passes
we need to redownload from you.

00:39:49.430 --> 00:39:53.260
And the way we're going to do it
is by asking you this question,

00:39:53.270 --> 00:39:54.400
what changed?

00:39:54.400 --> 00:39:57.350
And we're going to send
our device identifier,

00:39:57.350 --> 00:40:00.390
the pass type identifier
that you just gave us,

00:40:00.400 --> 00:40:03.400
and the update tag that we have stored.

00:40:03.400 --> 00:40:07.870
Now, the update tag represents kind
of a snapshot of the state of

00:40:07.870 --> 00:40:12.320
the passes for your service that
are currently on the device.

00:40:12.400 --> 00:40:15.380
We got it from you in the past,
and I'll explain how that worked.

00:40:15.450 --> 00:40:17.400
So now your job at this point is to
figure out what changes you've made.

00:40:17.400 --> 00:40:21.070
So the first thing you're going to
do is to figure out what passes have

00:40:21.070 --> 00:40:23.400
changed since that snapshot was taken.

00:40:23.530 --> 00:40:27.400
And you're going to send us back a list
of the serial numbers that have changed.

00:40:27.400 --> 00:40:30.530
It might be more than one because
we might have missed a bunch of

00:40:30.530 --> 00:40:34.310
updates in a row if we were offline
for a while going under a tunnel.

00:40:34.400 --> 00:40:38.190
And then you're going to send
us a new update tag to store.

00:40:38.330 --> 00:40:40.900
All right, so let's look at a particular
example of this to see how you're

00:40:40.900 --> 00:40:41.960
going to do this calculation.

00:40:41.960 --> 00:40:45.120
So suppose that in this case,
it was device A that received

00:40:45.150 --> 00:40:49.600
the push notification,
and the pass type ID is pass.oceanic,

00:40:49.640 --> 00:40:54.860
and maybe the update tag we had on
file was September 12th at 10 a.m.

00:40:55.510 --> 00:40:59.320
Okay, so you're going to go look
at your registrations table

00:40:59.320 --> 00:41:03.490
with this information in mind,
and you're going to find all of

00:41:03.490 --> 00:41:07.670
the serial numbers that match
the device and the pass type.

00:41:07.720 --> 00:41:10.050
So in this case,
it's the first three rows here,

00:41:10.050 --> 00:41:12.620
and so these are the serial
numbers for the passes that

00:41:12.630 --> 00:41:14.480
are registered to that device.

00:41:14.500 --> 00:41:18.380
Now if we go over to our boarding
passes table and we look at those rows,

00:41:18.380 --> 00:41:21.020
and I've highlighted
the rows that we found,

00:41:21.020 --> 00:41:24.730
now we look at the last
update tag that was sent.

00:41:25.180 --> 00:41:28.870
And we see, okay, so of those rows,
which ones have changed since then?

00:41:28.920 --> 00:41:31.780
And if you look at those,
you can see that the only one that

00:41:31.800 --> 00:41:34.030
changed since the 12th at 10 a.m.

00:41:34.110 --> 00:41:35.240
is that first row.

00:41:35.240 --> 00:41:38.260
And we know that because we
actually just changed it,

00:41:38.370 --> 00:41:38.860
right?

00:41:38.960 --> 00:41:40.520
So this algorithm worked.

00:41:40.540 --> 00:41:45.740
And so what we're going to want to
respond is this is what changed.

00:41:45.740 --> 00:41:48.150
So we're going to take the
serial number from that row,

00:41:48.150 --> 00:41:50.460
and we're going to take the
update tag from that row,

00:41:50.460 --> 00:41:52.170
and we're going to send them back.

00:41:52.180 --> 00:41:54.880
Now note that there could have been
more than one row that changed.

00:41:55.120 --> 00:41:57.250
So in that case, you would have taken all
of the serial numbers,

00:41:57.250 --> 00:41:59.950
and you would have taken the
latest of the update tags.

00:42:00.350 --> 00:42:01.160
Okay.

00:42:01.300 --> 00:42:04.570
So back to this situation,
you're responding with the

00:42:04.680 --> 00:42:07.000
list of serial numbers,
so you're going to send the

00:42:07.180 --> 00:42:08.430
information that we just computed.

00:42:08.520 --> 00:42:13.460
At that point, we know, okay,
we're supposed to go ask for a pass JA38.

00:42:13.660 --> 00:42:17.300
So that's how that whole
little dance works.

00:42:17.500 --> 00:42:20.520
All right,
let's look at how it works in practice.

00:42:20.520 --> 00:42:21.900
How are we actually asking you for this?

00:42:22.080 --> 00:42:25.060
We're doing a get to what
should now be a familiar.

00:42:25.190 --> 00:42:28.360
So we're going to pass the
pass type identifier endpoint,

00:42:28.360 --> 00:42:32.060
V1 devices, the device ID/registrations,
and then the pass type identifier.

00:42:32.060 --> 00:42:35.980
We are also going to pass this
update tag that we have in the

00:42:36.180 --> 00:42:38.130
form of a query on this URL.

00:42:38.300 --> 00:42:44.360
So you respond with a list of serial
numbers in a JSON dictionary as an array,

00:42:44.430 --> 00:42:46.660
and then a new last updated
tag for us to store.

00:42:46.660 --> 00:42:50.170
Okay,
so of course this whole process requires

00:42:50.170 --> 00:42:54.360
that we already have a tag stored,
and the very first time that we do this,

00:42:54.360 --> 00:42:55.590
we're not going to have one.

00:42:55.600 --> 00:43:00.020
So you also have to be prepared
to be able to answer this get

00:43:00.020 --> 00:43:02.800
request with no query attached.

00:43:03.380 --> 00:43:05.200
And in that case,
you basically have no choice

00:43:05.200 --> 00:43:07.600
but to respond with all of
the registered serial numbers,

00:43:07.600 --> 00:43:09.840
and then you give us a
tag for the last update,

00:43:09.840 --> 00:43:11.340
at which point the whole
process gets started.

00:43:11.340 --> 00:43:12.990
Hopefully this will
happen the first time,

00:43:13.090 --> 00:43:16.110
and there will only be one or two,
and so it won't be that much wasted work.

00:43:16.120 --> 00:43:19.580
All right,
so just looking again at this passes

00:43:19.580 --> 00:43:24.730
updated since last updated business,
it may remind you of the standard

00:43:24.830 --> 00:43:30.040
HTTP if modified since last modified
optimization that you use to kind of

00:43:30.100 --> 00:43:33.180
gate access to a resource on a server.

00:43:33.380 --> 00:43:37.290
So I want to talk about why,
first of all, why are we not just using

00:43:37.290 --> 00:43:39.380
the standard HTTP mechanism?

00:43:39.380 --> 00:43:44.840
So there's actually a pretty important
difference between this optimization

00:43:44.850 --> 00:43:50.700
for preventing downloading extra stuff
and the standard if modified since one.

00:43:50.700 --> 00:43:55.630
So if modified since is designed
to optimize access to a single

00:43:55.630 --> 00:43:58.510
monolithic resource on a server.

00:43:58.520 --> 00:44:03.200
So basically you've got a timestamp,
and if I say give me this resource.

00:44:03.390 --> 00:44:07.120
If modified since this timestamp,
either the resource as a whole has

00:44:07.140 --> 00:44:09.010
changed since then or it hasn't.

00:44:09.080 --> 00:44:11.610
And so you're going to either
return the whole resource or you're

00:44:11.700 --> 00:44:13.460
going to return 304 not modified.

00:44:13.460 --> 00:44:16.990
But in our case,
we care about gating access to

00:44:17.390 --> 00:44:20.260
individual elements of a collection.

00:44:20.260 --> 00:44:23.850
We don't want the whole collection if
it's changed or nothing if it hasn't.

00:44:23.900 --> 00:44:28.300
We want the individual elements of
the collection that have changed.

00:44:28.300 --> 00:44:31.300
And so if modified since is actually
not appropriate for our use case,

00:44:31.300 --> 00:44:33.300
which is why we've invented this similar.

00:44:33.380 --> 00:44:35.650
Mechanism that was
actually the hard part.

00:44:35.790 --> 00:44:37.160
The rest of the stuff is pretty easy.

00:44:37.160 --> 00:44:39.950
So getting the up to date pass
is really straightforward.

00:44:40.010 --> 00:44:43.370
We're going to hit you with the
pass we want and the auth token,

00:44:43.370 --> 00:44:45.810
and you're going to respond
with the zipped data.

00:44:45.820 --> 00:44:52.220
And what that looks like in practice
is this is a new looking URL.

00:44:52.220 --> 00:44:53.990
So it's V1 slash passes now.

00:44:54.120 --> 00:44:56.330
Up until now,
we've always been talking about

00:44:56.390 --> 00:44:57.920
registrations for a device.

00:44:57.970 --> 00:45:02.900
So we've been talking in terms of
serial numbers and and device IDs.

00:45:03.240 --> 00:45:05.250
Now we're actually going to be
talking in terms of past data.

00:45:05.260 --> 00:45:07.290
So we hit V1 slash passes.

00:45:07.300 --> 00:45:09.810
We pass you the pass type
ID and the serial number.

00:45:09.820 --> 00:45:13.010
We're going to use the standard
authorization Apple pass

00:45:13.070 --> 00:45:14.590
auth token in the header.

00:45:14.620 --> 00:45:17.950
And you're going to respond
with the signed zip data for

00:45:17.970 --> 00:45:19.810
the pass that we asked for.

00:45:19.820 --> 00:45:21.120
If the auth token matches.

00:45:21.120 --> 00:45:22.080
All right.

00:45:22.100 --> 00:45:23.790
Now there's one extra thing here.

00:45:23.800 --> 00:45:28.680
Since this actually is a single resource,
we're actually going to support.

00:45:28.810 --> 00:45:32.940
In fact, we're going to require that you
implement the if modified since caching.

00:45:32.940 --> 00:45:36.050
Because we don't want you to
give us back this data if in

00:45:36.090 --> 00:45:38.220
fact we have the latest version.

00:45:38.220 --> 00:45:43.200
And so you're going to either respond
with the with the zip pass data

00:45:43.270 --> 00:45:45.820
or 304 if it hasn't been modified.

00:45:45.820 --> 00:45:48.060
And then in the response header,
of course,

00:45:48.060 --> 00:45:52.260
you'll give us a new timestamp to
store the standard HTTP mechanism.

00:45:52.260 --> 00:45:57.410
So I said that you have to respond
with zipped signed PK pass data.

00:45:57.470 --> 00:45:59.560
So you might be wondering
how to produce that.

00:45:59.630 --> 00:46:02.720
I want to talk about the
algorithm for pass data.

00:46:02.720 --> 00:46:04.720
So I'm going to talk about the
algorithm for pass signing.

00:46:05.090 --> 00:46:07.680
Now,
we actually have given you in the session

00:46:07.680 --> 00:46:11.630
materials associated with this session
two different implementations of this

00:46:11.670 --> 00:46:12.720
algorithm that you can go check out.

00:46:12.740 --> 00:46:16.720
One of them is in the sign pass tool
that you can actually build in Xcode.

00:46:16.720 --> 00:46:22.610
And the other one is in our server,
a reference server implementation.

00:46:22.720 --> 00:46:24.720
And it's a Ruby implementation
of the pass signing algorithm.

00:46:24.720 --> 00:46:26.720
But this is what the algorithm is.

00:46:26.720 --> 00:46:28.720
You may have to go off and implement
this in some other language.

00:46:28.720 --> 00:46:30.720
So it's good to understand
what you're doing.

00:46:30.720 --> 00:46:32.480
So I'm going to go ahead
and show you the algorithm.

00:46:32.500 --> 00:46:37.060
You're going to create -- so you've
got your pass directory with all of

00:46:37.060 --> 00:46:39.500
your resources and your pass.json file.

00:46:39.500 --> 00:46:43.500
So in that directory,
you're going to create a JSON dictionary.

00:46:43.500 --> 00:46:47.500
And you're going to save it at the top
level of the directory as manifest.json.

00:46:47.500 --> 00:46:49.490
So now this is a dictionary.

00:46:49.620 --> 00:46:54.490
The keys are relative paths
in your pass directory.

00:46:54.500 --> 00:46:57.500
So if you have, you know,
a background.ping at the top level,

00:46:57.500 --> 00:47:00.500
then you'll have one key
that says background.ping.

00:47:00.680 --> 00:47:02.280
The values -- so you can see
that the values are relative

00:47:02.280 --> 00:47:02.280
paths in your pass directory.

00:47:02.280 --> 00:47:07.230
So the values are the SHA1
hash of the data at that path.

00:47:07.340 --> 00:47:10.360
And you're going to hex encode
that data because you can't

00:47:10.560 --> 00:47:12.200
stick data raw into a JSON.

00:47:12.280 --> 00:47:15.560
So you -- yes, you're creating -- you're
building up this dictionary of

00:47:15.560 --> 00:47:17.280
all the stuff in your directory.

00:47:17.280 --> 00:47:19.280
You save it as manifest.json.

00:47:19.280 --> 00:47:24.110
Then you take the data of that manifest
file and you sign it with your cert.

00:47:24.300 --> 00:47:27.620
So this has to be done on a server
because you can't do signing with a cert

00:47:27.660 --> 00:47:30.280
on a device since it wouldn't be secure.

00:47:30.280 --> 00:47:32.020
You're going to save the
result as signature.json.

00:47:32.070 --> 00:47:34.840
And then you're going to take
the contents of that directory,

00:47:35.010 --> 00:47:38.050
including the manifest and the signature,
and you're going to zip them up.

00:47:38.250 --> 00:47:40.060
Don't zip up the directory itself.

00:47:40.060 --> 00:47:42.060
Zip up the contents of the directory.

00:47:42.060 --> 00:47:46.060
And what you get out of that
process is a .pk pass object.

00:47:46.170 --> 00:47:48.060
That's what you send around.

00:47:48.060 --> 00:47:50.060
Okay.

00:47:50.060 --> 00:47:52.720
So I'm going to bring Ken back
up to just show you how to set

00:47:52.720 --> 00:47:56.060
up this reference server to send
a push notification and so on.

00:47:56.370 --> 00:47:58.510
Thank you, Eliza.

00:48:01.750 --> 00:48:04.580
So if you go into this material,
you'll see this pass server directory.

00:48:04.580 --> 00:48:10.050
You'll see this readme that I'm not
going to read because we're hardcore,

00:48:10.050 --> 00:48:10.780
I guess.

00:48:10.780 --> 00:48:13.930
By the way,
the readme pretty much covers every

00:48:14.060 --> 00:48:18.300
single thing I'm talking about up here,
so really it's more like

00:48:18.380 --> 00:48:20.420
it would steal my thunder.

00:48:20.420 --> 00:48:23.890
Okay, now in order to be
able to use the server,

00:48:23.890 --> 00:48:27.530
we need to put our pass data
into the server so we can

00:48:27.530 --> 00:48:29.930
see something that's ours.

00:48:30.620 --> 00:48:32.150
And in order to do that,
that's going to be in

00:48:32.150 --> 00:48:33.380
this data directory,
okay?

00:48:33.380 --> 00:48:35.340
And there are two bits of
data we have to give it.

00:48:35.390 --> 00:48:40.380
We have to give it our actual pass
instead of this sample pass that's here.

00:48:40.380 --> 00:48:43.400
And we have to give it a
certificate to sign the pass.

00:48:43.480 --> 00:48:47.290
Since here, actually,
you see this is not a signed zip pass.

00:48:47.390 --> 00:48:49.390
This is the contents of a pass,
so it still has to be done.

00:48:49.400 --> 00:48:53.120
So in order to do that,
we'll take the pass

00:48:53.120 --> 00:48:56.300
that we built in Part 1,
okay?

00:48:56.300 --> 00:48:57.950
And we'll just dump that in there.

00:48:58.020 --> 00:49:03.450
Though do be aware that the...
The serial number actually has to match,

00:49:03.450 --> 00:49:04.060
okay?

00:49:04.060 --> 00:49:06.560
It has to be sample in this case.

00:49:06.560 --> 00:49:09.430
Okay, so we dump that in there.

00:49:09.500 --> 00:49:13.860
And then we need to... Oh,
and then we need to put our

00:49:13.860 --> 00:49:16.040
certificate for that in here.

00:49:16.040 --> 00:49:20.020
Now, in the first part of our session,
we added our certificate to the keychain.

00:49:20.020 --> 00:49:22.360
Okay, here it is.

00:49:22.440 --> 00:49:24.670
It was this
pass.com.oceanic.boardingpass.

00:49:24.740 --> 00:49:29.690
So what we want to do is
choose to export this...

00:49:29.880 --> 00:49:33.570
As a P12,
we saw some people on the forums who

00:49:33.570 --> 00:49:36.500
are having a little trouble with this,
so this is how you do this.

00:49:36.600 --> 00:49:38.940
In this case,
it doesn't matter what you call it,

00:49:39.050 --> 00:49:41.460
so I'm just going to call it, well,
I'll call it this.

00:49:41.640 --> 00:49:43.030
And you have to give it a password.

00:49:43.030 --> 00:49:45.760
I'm going to have to type the
password out plain text in a minute,

00:49:45.760 --> 00:49:47.760
so it's just going to have to be 123.

00:49:47.840 --> 00:49:52.820
Okay,
and now we should see that's in there.

00:49:52.820 --> 00:49:54.040
Okay.

00:49:54.040 --> 00:49:56.180
So now I want to start the server up.

00:49:56.200 --> 00:49:58.220
Okay.

00:49:58.220 --> 00:50:01.540
So we go to the terminal,
we go into the server reference,

00:50:01.540 --> 00:50:04.440
we go into pass server.

00:50:04.440 --> 00:50:07.380
And actually, I'm sorry, see,
I didn't read the readme.

00:50:07.380 --> 00:50:08.660
I'm not going to start the server.

00:50:08.660 --> 00:50:15.420
I'm going to first import my pass,
set up the server.

00:50:15.440 --> 00:50:17.550
S for setup, I believe.

00:50:17.620 --> 00:50:19.300
Okay.

00:50:19.310 --> 00:50:21.720
I need to give it my host name,
which I'm going to use the

00:50:21.720 --> 00:50:24.610
bonjour name of this computer,
which is nefali.local.

00:50:24.710 --> 00:50:29.280
I'm going to give the pass type
identifier out of that pass,

00:50:29.380 --> 00:50:33.650
which is pass.com.oceanic.boardingpass.

00:50:33.650 --> 00:50:35.300
And that needs to match.

00:50:35.300 --> 00:50:37.460
And that has now set up the server.

00:50:37.460 --> 00:50:40.820
Okay, having set up the server,
this is a rack server.

00:50:40.820 --> 00:50:43.130
So we run it with,
as soon as I check that

00:50:43.130 --> 00:50:45.790
we're in the directory,
we run it with rack up

00:50:45.790 --> 00:50:47.360
and then dash p for port.

00:50:47.450 --> 00:50:48.400
for port.

00:50:48.420 --> 00:50:51.920
It's going to be running on port 4567.

00:50:51.920 --> 00:50:52.960
And we'll just start that running.

00:50:52.960 --> 00:50:54.650
Oh, wants my password.

00:50:54.650 --> 00:50:56.810
Like I said, that was 123.

00:50:56.810 --> 00:50:57.300
Okay.

00:50:57.380 --> 00:50:58.340
That's that.

00:50:58.340 --> 00:51:01.240
So now we're going to go
switch over to the iPhone and

00:51:01.310 --> 00:51:03.220
we need to get that passed.

00:51:03.220 --> 00:51:06.730
Now, this is now running a
Web server on that port.

00:51:06.730 --> 00:51:10.640
So actually the very first thing
I'm going to do is show you in

00:51:10.640 --> 00:51:14.820
settings here under Developer there's
now a pass kit testing area.

00:51:14.990 --> 00:51:18.120
And we're going to want
to do this last one,

00:51:18.200 --> 00:51:20.420
this allow HTTP services.

00:51:20.420 --> 00:51:23.740
This is HTTP as opposed to HTTPS.

00:51:23.760 --> 00:51:27.870
Because normally for passes it's
required that the Web service

00:51:27.870 --> 00:51:29.380
that you use be secure.

00:51:29.430 --> 00:51:31.480
But that's kind of inconvenient
in testing setups like this.

00:51:31.480 --> 00:51:32.960
So we provide a way to turn it off.

00:51:32.960 --> 00:51:34.980
But only on developer devices.

00:51:35.240 --> 00:51:40.840
Okay, now we are going to go to Safari,
and if we had actually read the readme,

00:51:40.840 --> 00:51:50.890
we would realize that nefaly.local
port 4567@pass.pkpass,

00:51:51.280 --> 00:51:54.860
and that's part of the server,
should get me a pass.

00:51:54.900 --> 00:51:56.020
Hey, and it worked.

00:51:56.020 --> 00:51:59.350
It reached it.

00:52:00.000 --> 00:52:02.920
Okay, we're halfway there.

00:52:02.920 --> 00:52:03.920
We still have to be able to get a push.

00:52:03.920 --> 00:52:07.000
Okay, so I'm going to add that.

00:52:07.060 --> 00:52:08.140
Great.

00:52:08.140 --> 00:52:11.190
Okay, now I'm going to look at it in
Passbook because that's kind of fun,

00:52:11.190 --> 00:52:11.610
I guess.

00:52:11.860 --> 00:52:13.700
And then I'm going to put that away.

00:52:13.710 --> 00:52:17.190
I'm going to go back to the Mac because
we have to do the part where we actually

00:52:17.190 --> 00:52:20.480
change the pass on the server and
get to see it update on the device.

00:52:21.110 --> 00:52:25.340
You can see here, by the way,
that we have these 200-level messages.

00:52:25.340 --> 00:52:28.610
This was the iPhone just checked
in with the server and said,

00:52:28.700 --> 00:52:30.910
here's my pass token, here's my device.

00:52:31.000 --> 00:52:35.130
So that was that registration
endpoint that Eliza was talking about.

00:52:35.270 --> 00:52:36.380
And you can see that stuff go by.

00:52:36.380 --> 00:52:40.330
So now I'm going to leave the server
running in that other terminal and go

00:52:40.330 --> 00:52:43.820
down into the server reference again,
into the pass server.

00:52:43.820 --> 00:52:47.050
There's that version of the
signing implemented in Ruby,

00:52:47.050 --> 00:52:49.940
by the way,
is in the pass signing directory.

00:52:51.080 --> 00:52:52.240
Go down here.

00:52:52.530 --> 00:52:58.370
And then if I do lib, can't type,
lib pass server control dash notify,

00:52:58.370 --> 00:53:02.950
N for notify, and hit enter,
then it's going to want my

00:53:03.000 --> 00:53:05.710
certificate password again.

00:53:05.740 --> 00:53:08.370
But I won't hit enter because I'm
going to switch back to the phone

00:53:08.520 --> 00:53:11.710
so that you can see the push come
through exactly like it's supposed to,

00:53:11.720 --> 00:53:12.280
right?

00:53:12.370 --> 00:53:14.780
Over the terrible networking situation.

00:53:14.780 --> 00:53:16.550
So I'm going to hit enter right now.

00:53:16.550 --> 00:53:17.730
That's all I will do.

00:53:17.910 --> 00:53:18.400
Nothing up my sleeve.

00:53:18.460 --> 00:53:19.040
Bam.

00:53:23.800 --> 00:53:24.800
Okay.

00:53:24.800 --> 00:53:28.800
And we tap it,
and it even circles the change.

00:53:28.800 --> 00:53:31.660
I think at the keynote,
people may have thought that was

00:53:31.700 --> 00:53:32.760
actually part of the keynote template.

00:53:32.870 --> 00:53:35.780
That was actually real.

00:53:35.800 --> 00:53:38.490
We can dismiss that,
and then we can delete the

00:53:38.710 --> 00:53:41.460
pass because that's pretty fun.

00:53:42.390 --> 00:53:44.870
Okay, and that's all I've got.

00:53:45.070 --> 00:53:46.010
So back to Eliza.

00:53:53.200 --> 00:58:13.900
[Transcript missing]