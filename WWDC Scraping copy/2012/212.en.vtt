WEBVTT

00:00:09.620 --> 00:00:12.290
Good morning, everyone.

00:00:12.450 --> 00:00:14.740
Thank you for coming.

00:00:14.810 --> 00:00:19.160
So, this is session 212,
basics plus habits,

00:00:19.230 --> 00:00:22.240
building your software projects to last.

00:00:22.250 --> 00:00:25.370
I'm Ken Kocienda, and again,
thank you for coming.

00:00:26.300 --> 00:00:29.950
So, I think, right, when you think about
building a great project,

00:00:29.950 --> 00:00:32.980
I mean, you kind of, it means for us,
for this audience,

00:00:32.980 --> 00:00:35.800
it means building a great application,
right?

00:00:35.800 --> 00:00:37.300
That's why you're at WWDC.

00:00:37.300 --> 00:00:41.800
You're probably your app developers
and you want to make great apps,

00:00:41.800 --> 00:00:42.530
right?

00:00:42.610 --> 00:00:44.920
And if you are successful
in making an app,

00:00:44.960 --> 00:00:48.140
that means that your app is
probably going to change.

00:00:48.180 --> 00:00:51.040
You're going to be shipping updates
to that app as new features,

00:00:51.110 --> 00:00:53.540
new OS releases come out.

00:00:53.540 --> 00:00:55.620
There are going to be bug fixes,
you know, updates,

00:00:55.700 --> 00:00:56.780
all of this kind of thing.

00:00:56.780 --> 00:01:01.300
So, success means your software
is going to change.

00:01:02.210 --> 00:01:04.460
You probably know that
radical changes rarely work.

00:01:04.510 --> 00:01:08.970
If we take the example from biology,
Darwinian evolution,

00:01:08.970 --> 00:01:11.590
most mutations kill the organism.

00:01:11.870 --> 00:01:14.190
You have a radical change,
it doesn't work.

00:01:14.190 --> 00:01:18.390
I think the same holds true for software.

00:01:18.550 --> 00:01:21.100
So incremental change is better.

00:01:21.140 --> 00:01:23.670
And last year,
how many of you saw my easy to

00:01:23.670 --> 00:01:25.900
change code talk last year perhaps?

00:01:25.900 --> 00:01:27.300
I guess a couple had security.

00:01:27.300 --> 00:01:29.350
Those are the people you
probably want to leave.

00:01:29.400 --> 00:01:32.090
They're crazy enough to come
to my talk two years in a row.

00:01:32.220 --> 00:01:33.700
But no, for the couple, thank you.

00:01:33.700 --> 00:01:35.590
Thank you for coming again.

00:01:35.600 --> 00:01:38.370
But for those of you who
weren't here last year with

00:01:38.370 --> 00:01:43.390
the easy to change code talk,
I talked about this incremental

00:01:43.390 --> 00:01:45.210
change idea last year.

00:01:45.520 --> 00:01:49.280
But in getting some of your feedback,

00:01:49.300 --> 00:01:54.470
I realized that there were some problems
with some of the things that I said.

00:01:54.580 --> 00:01:57.980
Like, I talked about notifications.

00:01:58.040 --> 00:02:02.070
I said in one part of the talk,
notifications are good because

00:02:02.150 --> 00:02:06.010
they promote loose coupling between
different parts of your software system,

00:02:06.100 --> 00:02:07.300
and that's a good thing.

00:02:07.300 --> 00:02:11.160
But then in another part, I said,
half jokingly, half seriously,

00:02:11.160 --> 00:02:15.800
that notifications are bad because
they're just glorified go-to statements.

00:02:15.800 --> 00:02:18.820
So it kind of seems that
both of these can't be right.

00:02:19.000 --> 00:02:20.670
But hang on, there's more.

00:02:20.750 --> 00:02:24.240
I also talked about in
my session about hygiene,

00:02:24.240 --> 00:02:26.870
where the best writing is rewriting.

00:02:27.130 --> 00:02:28.280
Quoting E.B.

00:02:28.280 --> 00:02:30.640
White, a great, great writer,

00:02:30.700 --> 00:02:34.160
But then I also said,
don't throw away old code, right?

00:02:34.160 --> 00:02:37.450
You just kind of want to incrementally
change software to sort of bring

00:02:37.450 --> 00:02:39.140
new features to it or change it.

00:02:39.140 --> 00:02:43.690
And this kind of seems, again,
both of those can't be right.

00:02:43.700 --> 00:02:44.830
That's like paradoxes, right?

00:02:44.870 --> 00:02:47.100
You wind up with this:
Too many cooks spoil the broth,

00:02:47.220 --> 00:02:49.220
but many hands make light work.

00:02:49.500 --> 00:02:49.720
Right?

00:02:50.060 --> 00:02:53.030
Again,
these things don't seem to make sense

00:02:53.070 --> 00:02:55.700
when you say them both at the same time.

00:02:55.700 --> 00:02:59.470
But of course they do, I think,
in all of those cases,

00:02:59.590 --> 00:03:02.900
if you say one of those
things in the right context.

00:03:02.950 --> 00:03:03.350
Right?

00:03:03.350 --> 00:03:05.500
Those statements don't exist in a vacuum.

00:03:05.500 --> 00:03:08.100
When they do, yeah,
you can wind up with nonsense.

00:03:08.100 --> 00:03:11.880
But if you've got the context, right,
if you know how to match

00:03:11.880 --> 00:03:16.900
one of those things,
it can make sense.

00:03:17.800 --> 00:03:22.720
This talk, Basics + Habits,
is really the context, I think,

00:03:22.800 --> 00:03:25.140
for that incremental change
that I talked about last year.

00:03:25.270 --> 00:03:27.430
It fills in more of the details.

00:03:27.510 --> 00:03:30.000
You can kind of understand,
perhaps even go out on iTunes and

00:03:30.070 --> 00:03:33.750
look at last year's talk this year,
sort of have your own little time travel.

00:03:33.840 --> 00:03:37.370
That's the context for
your incremental change,

00:03:37.370 --> 00:03:38.600
Basics + Habits.

00:03:38.910 --> 00:03:39.800
Well, what does that mean?

00:03:39.800 --> 00:03:40.490
Basics.

00:03:40.490 --> 00:03:44.040
When I say basics,
I mean it's the fundamental choices

00:03:44.040 --> 00:03:46.740
that you make at the start of a project.

00:03:46.800 --> 00:03:49.360
You kind of make this
whole series of choices,

00:03:49.360 --> 00:03:52.170
what your project is going to do,
what your ideas,

00:03:52.170 --> 00:03:55.800
software you're going to use,
all of those kinds of things.

00:03:55.800 --> 00:03:58.800
All of those fundamental choices you
make at the beginning of a project.

00:03:58.810 --> 00:04:02.900
And then habits are the things
that you do every day after that,

00:04:02.900 --> 00:04:06.060
building on the basics,
and then you actually go

00:04:06.090 --> 00:04:10.410
and do all of the work,
invest all of the time and effort to

00:04:10.410 --> 00:04:13.600
actually make the project come to life.

00:04:13.730 --> 00:04:15.710
And so basics plus habits.

00:04:15.860 --> 00:04:19.130
Hopefully,
you'll see that I've got some ideas

00:04:19.200 --> 00:04:23.380
today about how this will create
this context that then you can

00:04:23.380 --> 00:04:25.960
add in your incremental change,
some of those ideas

00:04:26.060 --> 00:04:28.980
from last year's talk,
and eventually wind up

00:04:28.980 --> 00:04:32.670
with kind of a situation,
a framework that will help you

00:04:32.740 --> 00:04:37.180
to make your software project
successful and last a long time.

00:04:37.540 --> 00:04:41.740
I've got six basics that I'd
like to talk about today.

00:04:41.750 --> 00:04:42.670
We'll go through them.

00:04:42.830 --> 00:04:48.380
The first one being define
your physics and chemistry.

00:04:48.440 --> 00:04:52.730
So physics and chemistry,
I like this little analogy.

00:04:52.810 --> 00:04:55.220
You think about this
in terms of software.

00:04:55.430 --> 00:04:56.800
Again, it's an analogy.

00:04:56.800 --> 00:04:59.430
Physics are the fundamental
laws of your project,

00:04:59.430 --> 00:05:02.790
of your software world that
you create in your software.

00:05:02.920 --> 00:05:06.140
And then chemistry are the way
that things can mix together.

00:05:06.140 --> 00:05:08.040
I'll be using this analogy quite a bit.

00:05:08.140 --> 00:05:10.910
And here's the first example.

00:05:11.200 --> 00:05:14.540
When I think of a very
basic block diagram,

00:05:14.540 --> 00:05:18.270
a generic one,
physics are the blue boxes.

00:05:18.500 --> 00:05:21.360
They're kind of the basic
elements of your system.

00:05:21.500 --> 00:05:23.680
Particularly when you look
at them from the outside,

00:05:23.680 --> 00:05:24.160
right?

00:05:24.160 --> 00:05:27.230
It's the basic physics,
the real sort of unchangeable

00:05:27.280 --> 00:05:30.400
nuggets in your system,
or at least fundamental nuggets.

00:05:30.400 --> 00:05:33.340
And then the arrows are the chemistry,
or the way that then

00:05:33.420 --> 00:05:34.540
these things combine.

00:05:34.820 --> 00:05:37.200
In this case,
like a model view controller example,

00:05:37.470 --> 00:05:43.970
they combine in ways that, you know,
in keeping with that MVC pattern.

00:05:44.120 --> 00:05:47.650
They combine in well-defined
ways to make your software

00:05:47.890 --> 00:05:49.900
work in the way that it does.

00:05:49.920 --> 00:05:50.910
Right?

00:05:50.920 --> 00:05:52.480
So the physics and the chemistry.

00:05:52.480 --> 00:05:57.060
Now, I mean, this is such a basic idea,
such a fundamental idea

00:05:57.060 --> 00:05:58.960
about how software works.

00:05:58.960 --> 00:06:02.500
And I think there are other
analogies that people use oftentimes,

00:06:02.500 --> 00:06:05.920
like nouns and verbs,
where nouns are the abstractions

00:06:05.920 --> 00:06:08.680
and verbs are the way that
things combine with each other.

00:06:08.680 --> 00:06:11.130
Another, you know,
obviously very popular one

00:06:11.140 --> 00:06:13.080
is objects and interfaces,
right?

00:06:13.080 --> 00:06:17.400
It's the encapsulated bits and then the
exposed bits and the interfaces that

00:06:17.410 --> 00:06:19.800
you have to get at those exposed bits.

00:06:19.820 --> 00:06:21.620
And so forth.

00:06:21.690 --> 00:06:26.520
I still think that physics and chemistry,
though, is the best analogy.

00:06:26.740 --> 00:06:29.760
And again,
I'll be returning to this quite a few

00:06:29.760 --> 00:06:32.180
times during the rest of the talk.

00:06:32.270 --> 00:06:35.120
And I do think that, you know,
that ultimately, you know,

00:06:35.120 --> 00:06:37.020
most coding is chemistry, right?

00:06:37.020 --> 00:06:40.750
You're most often sort of using
the interfaces that you create.

00:06:40.840 --> 00:06:45.380
You create interfaces much
less often than you use them.

00:06:45.450 --> 00:06:47.840
And of course,
this chemistry is expressed

00:06:47.840 --> 00:06:49.720
in terms of those interfaces.

00:06:49.740 --> 00:06:52.520
It's expressed in terms of those physics.

00:06:52.520 --> 00:06:55.300
And so here now,
if we go back and look at a

00:06:55.300 --> 00:06:59.420
more concrete example of that
diagram that I had before,

00:06:59.420 --> 00:07:04.920
this basically, very basically,
describes the design

00:07:04.920 --> 00:07:08.330
for the iOS keyboard,
text entry system that

00:07:08.330 --> 00:07:09.410
I did a lot of work for.

00:07:09.490 --> 00:07:13.420
This was my design for the 1.0 keyboard.

00:07:13.420 --> 00:07:16.010
As you can see at the top,
I've got a keyboard controller.

00:07:16.020 --> 00:07:19.620
Over then on the input manager side,
right?

00:07:19.620 --> 00:07:20.580
I've got the model.

00:07:20.620 --> 00:07:23.600
And then over on this side,
I've got user interface, keyboard layout,

00:07:23.600 --> 00:07:24.620
text field, right?

00:07:24.620 --> 00:07:28.510
It really is sort of an MVC type pattern.

00:07:28.550 --> 00:07:33.220
Now, if I go in and add in the arrows,
now, I'd like you to look closely.

00:07:33.220 --> 00:07:37.670
Perhaps even if you can't see
how I'll describe the view side,

00:07:37.860 --> 00:07:40.220
the arrows are bidirectional.

00:07:40.240 --> 00:07:42.480
They go both ways.

00:07:42.480 --> 00:07:46.940
Yet on the model side,
the arrows only go one way.

00:07:47.090 --> 00:07:51.020
And this actually was an
important design idea that I had

00:07:51.330 --> 00:07:52.240
very much at the beginning.

00:07:52.240 --> 00:07:54.470
Again,
a basic level decision about how the

00:07:54.470 --> 00:07:56.440
software system was going to work.

00:07:56.440 --> 00:08:01.240
I didn't want the dictionary to be
calling back up to the controller.

00:08:01.240 --> 00:08:01.840
No, no, no.

00:08:01.850 --> 00:08:05.750
The dictionary,
the input manager system was

00:08:05.820 --> 00:08:07.420
called and returned to value.

00:08:07.590 --> 00:08:09.500
That's all that it did.

00:08:09.500 --> 00:08:12.760
It only came into the
system when it was called.

00:08:12.840 --> 00:08:15.830
Whereas, of course,
the view system needed to respond

00:08:15.840 --> 00:08:19.330
to user touches and needed to,
of course, be updated as appropriate.

00:08:19.380 --> 00:08:24.180
Maybe when an auto correction
suggestion came in here and again.

00:08:24.300 --> 00:08:29.780
So the point here, though,
is that this fundamental design was a

00:08:29.780 --> 00:08:34.090
basic decision I made at the beginning
of the project and that I carried

00:08:34.150 --> 00:08:36.820
through to the rest of the system.

00:08:37.170 --> 00:08:39.790
wasn't like this.

00:08:40.200 --> 00:08:42.640
Very specifically,
it wasn't like that where

00:08:42.740 --> 00:08:44.860
anything could call anything else.

00:08:45.030 --> 00:08:45.240
Right?

00:08:45.420 --> 00:08:47.670
And of course it wouldn't be a
show if you didn't have flames,

00:08:47.670 --> 00:08:48.100
right?

00:08:48.100 --> 00:08:49.430
Okay.

00:08:49.680 --> 00:08:54.330
Now,
this is a much more sort of sensible,

00:08:54.330 --> 00:08:58.070
basic design for an MVC system.

00:09:00.160 --> 00:09:02.950
So the idea is, I think too,
is that you want to

00:09:03.020 --> 00:09:04.340
strive for solid physics.

00:09:04.340 --> 00:09:08.790
Again, from that last example,
those big blue boxes, they were sensible,

00:09:08.790 --> 00:09:09.250
right?

00:09:09.440 --> 00:09:16.440
Sensible design, sensible,
big ideas for components of the system.

00:09:16.510 --> 00:09:21.340
And so you want to strive for that solid
physics at the beginning of your project.

00:09:21.340 --> 00:09:25.420
And you don't want to redefine the
rules of your universe very lightly.

00:09:25.420 --> 00:09:28.980
Of course, we can't change gravity and
the conservation of energy.

00:09:28.980 --> 00:09:32.860
And the physics we have in the
natural world are decided for us.

00:09:32.900 --> 00:09:35.230
But in your software,
you can change things

00:09:35.230 --> 00:09:36.620
just about as you want.

00:09:36.620 --> 00:09:37.700
Right?

00:09:37.840 --> 00:09:38.370
But don't.

00:09:38.600 --> 00:09:38.770
Right?

00:09:38.820 --> 00:09:41.150
With great power comes
great responsibility.

00:09:41.570 --> 00:09:41.800
Right?

00:09:41.860 --> 00:09:44.650
You want to kind of get your
physics right at the start

00:09:44.650 --> 00:09:45.960
of your project if you can.

00:09:46.140 --> 00:09:46.740
Right?

00:09:46.960 --> 00:09:49.810
And perhaps maybe even the
final way of talking about this,

00:09:49.870 --> 00:09:53.890
which is maybe a little bit more playful,
maybe something that makes writing

00:09:53.890 --> 00:09:57.270
software so attractive to all of us
is that you get to make a sandbox

00:09:57.350 --> 00:09:58.940
that you get to go and play with.

00:09:58.940 --> 00:09:59.450
Right?

00:09:59.640 --> 00:10:01.810
Which is, again,
it's sort of like you have

00:10:01.810 --> 00:10:04.790
that good feeling about a good,
successful project,

00:10:04.890 --> 00:10:07.570
that you like what you've
made and you enjoy going,

00:10:07.570 --> 00:10:09.540
improving it, making it better.

00:10:09.540 --> 00:10:11.240
And of course,
all of you making great apps

00:10:11.240 --> 00:10:14.090
that then go out to customers,
you get great feedback from them.

00:10:14.100 --> 00:10:18.490
And it feels good when you have
a successful project like that.

00:10:18.780 --> 00:10:24.300
So again, defining physics and chemistry,
the first basic decision

00:10:24.300 --> 00:10:26.030
you need to make.

00:10:26.060 --> 00:10:29.240
Second, choosing the right technology.

00:10:29.260 --> 00:10:32.000
Make a technology choice for how
you're going to make your project

00:10:32.130 --> 00:10:33.390
work right at the beginning.

00:10:33.510 --> 00:10:37.850
Now, of course, in choosing technology,
right, you're here at WWC sort

00:10:37.890 --> 00:10:39.980
of preaching to the choir,
right?

00:10:40.030 --> 00:10:41.860
You've chosen great technology.

00:10:41.860 --> 00:10:42.700
You've chosen Apple.

00:10:42.700 --> 00:10:44.940
You've chosen iOS and Mac OS, right?

00:10:45.120 --> 00:10:46.810
So congratulations.

00:10:46.860 --> 00:10:47.960
You're all awesome, right?

00:10:47.960 --> 00:10:52.360
Give yourself a round of applause.

00:10:52.800 --> 00:10:53.600
Thank you so much.

00:10:53.600 --> 00:10:55.390
Of course, you've also chosen
this talk this morning,

00:10:55.400 --> 00:10:58.620
so thank you for that.

00:10:59.010 --> 00:11:02.660
So, but now, sort of more to the point,
right?

00:11:02.660 --> 00:11:07.980
If you think about tools when
you're maybe going to build a house,

00:11:08.130 --> 00:11:10.140
you know that, you know,
sometimes you need to go and grab a

00:11:10.180 --> 00:11:12.740
hammer and that's an appropriate tool,
and sometimes you need to grab a

00:11:12.740 --> 00:11:15.030
wrench and that's an appropriate tool,
but they're not

00:11:15.120 --> 00:11:17.650
appropriate for all tasks,
pretty obvious.

00:11:17.750 --> 00:11:19.550
The same is true for software.

00:11:19.700 --> 00:11:24.500
We've got some great
software on our platforms.

00:11:24.500 --> 00:11:25.960
Core Data is a great example.

00:11:25.960 --> 00:11:30.740
It's a great piece of software for,
you know, if you're developing an app,

00:11:30.790 --> 00:11:34.500
you've got some objects in your system,
you know, at runtime,

00:11:34.500 --> 00:11:37.340
you want to maybe save some of
the state out for those objects

00:11:37.430 --> 00:11:42.060
or save the objects themselves,
use Core Data, save them to a database.

00:11:42.310 --> 00:11:44.110
Boy, it's a great technology.

00:11:44.190 --> 00:11:46.060
It does that object
relational mapping system.

00:11:46.060 --> 00:11:48.590
How many people, yes,
my name is Ken Kocienda and I've made

00:11:48.590 --> 00:11:50.940
my own object relational mapping system,
right?

00:11:50.960 --> 00:11:52.000
I have a problem.

00:11:52.070 --> 00:11:53.170
Right, I've done this many times.

00:11:53.350 --> 00:11:54.500
Core Data solves that problem.

00:11:54.500 --> 00:11:56.500
You don't have to do that yourself.

00:11:56.500 --> 00:11:59.500
It's a great technology choice
if you're an app developer,

00:11:59.500 --> 00:12:03.490
but if you're building
a web search engine,

00:12:03.490 --> 00:12:07.600
maybe making a big sort of server farm,
you know, whatever, probably Core Data is

00:12:07.600 --> 00:12:09.430
not the best choice,
right,

00:12:09.430 --> 00:12:10.500
even though it's a great technology.

00:12:10.500 --> 00:12:13.870
It's not the great best choice
for that particular task,

00:12:13.870 --> 00:12:14.500
right?

00:12:14.500 --> 00:12:20.190
So I think the message here,
particularly at WWDC,

00:12:20.320 --> 00:12:24.500
is that if you're new to our platforms,
you're going to have to be very careful.

00:12:24.560 --> 00:12:28.000
Kind of new to iOS,
new to Mac OS development.

00:12:28.010 --> 00:12:29.080
Learn our frameworks.

00:12:29.190 --> 00:12:30.030
Know what's available.

00:12:30.260 --> 00:12:31.130
Go to the labs.

00:12:31.220 --> 00:12:32.260
Find an Apple engineer.

00:12:32.260 --> 00:12:36.120
If you've got an idea,
see if we've got software already there

00:12:36.120 --> 00:12:38.740
for you that you can take advantage of.

00:12:38.780 --> 00:12:40.500
Learn our frameworks.

00:12:40.500 --> 00:12:42.490
Know what's available, right?

00:12:42.500 --> 00:12:46.010
And figure out how to best match
what you need to do to the task

00:12:46.060 --> 00:12:48.500
that you want to accomplish,
right?

00:12:48.500 --> 00:12:52.880
Now, sometimes, even after you do that,
you find out everything that's available,

00:12:52.920 --> 00:12:54.490
everything that we've got.

00:12:54.500 --> 00:12:57.460
And it doesn't quite
match what you want to do.

00:12:57.550 --> 00:13:00.410
Sometimes then, but only from knowledge.

00:13:00.500 --> 00:13:02.420
You need to go outside the box.

00:13:02.530 --> 00:13:06.800
And again, there's, you know,
an example that I'd like to tell

00:13:07.060 --> 00:13:10.500
you about is NSString in Foundation.

00:13:10.500 --> 00:13:13.460
Of course, it's great for general
purpose programming.

00:13:13.500 --> 00:13:17.470
But is it great for high
performance string handling?

00:13:17.530 --> 00:13:20.220
High performance,
I need to be making substrings,

00:13:20.220 --> 00:13:24.500
doing lots and lots of comparisons like,
again,

00:13:24.500 --> 00:13:24.500
the example was the iPhone keyboard.

00:13:24.500 --> 00:13:28.500
When I was making the original
auto correction algorithm,

00:13:28.500 --> 00:13:33.620
right, the first few tries that I made
was basically brute force,

00:13:33.680 --> 00:13:38.330
searching the entire dictionary
every time you typed a key.

00:13:38.600 --> 00:13:40.500
Logically, that's what it was doing.

00:13:40.500 --> 00:13:42.500
But obviously, it couldn't do that.

00:13:42.500 --> 00:13:46.180
So I needed to have some high
performance string routines to

00:13:46.260 --> 00:13:48.380
make that actually perform well.

00:13:48.570 --> 00:13:52.470
And so what I wound up
doing was developing my own

00:13:52.470 --> 00:13:54.500
custom C++ string class.

00:13:54.500 --> 00:13:57.500
So I got a stack allocation using
the short string optimization.

00:13:57.500 --> 00:14:00.500
You got to get a little sort of
C++ geekness into every show.

00:14:00.500 --> 00:14:03.500
Not only that, yes,
the short string optimization,

00:14:03.500 --> 00:14:09.230
which is now in libc++,
the new C++ library that we're developing

00:14:09.620 --> 00:14:12.500
and making available as part of LLVM,
which is really nice.

00:14:12.500 --> 00:14:15.450
We didn't have that back in 2005.

00:14:15.740 --> 00:14:18.440
So should you do this?

00:14:18.610 --> 00:14:20.490
Probably not.

00:14:20.750 --> 00:14:24.580
Only, you only make a choice like that,
go outside of the box when you've

00:14:24.580 --> 00:14:26.840
determined that you really need to.

00:14:26.840 --> 00:14:30.500
Because again,
what we're providing to you as part of

00:14:30.620 --> 00:14:33.590
our frameworks don't quite fit the bill.

00:14:34.740 --> 00:14:38.540
Now, I will say, interestingly,
that even though that seems like a

00:14:38.540 --> 00:14:42.300
sort of a low-level optimization,
was that premature optimization?

00:14:42.300 --> 00:14:43.660
And I don't really think that it is.

00:14:43.730 --> 00:14:47.050
And again,
I think because this is an optimization

00:14:47.050 --> 00:14:50.050
that has to do with physics,
I could have changed that

00:14:50.120 --> 00:14:52.590
string class out for another
one with the same interface and

00:14:52.590 --> 00:14:53.890
it would have been all right.

00:14:53.890 --> 00:14:57.130
I didn't really paint
myself into a corner.

00:14:57.390 --> 00:15:01.110
In other words, this was an optimization
that was a technology choice,

00:15:01.110 --> 00:15:06.180
not an activity, not making sort of very,
very complicated algorithms that had a

00:15:06.180 --> 00:15:10.160
lot of interdependencies on each other,
which then are much more difficult

00:15:10.220 --> 00:15:14.600
to undo if later you decide it
doesn't really quite work or that

00:15:14.600 --> 00:15:16.820
you need to change your system.

00:15:16.850 --> 00:15:17.700
Right?

00:15:17.730 --> 00:15:21.520
This kind of optimization, you know,
in terms of physics,

00:15:21.560 --> 00:15:26.150
sometimes can be a little bit safer
than optimization in chemistry.

00:15:26.590 --> 00:15:26.990
Right.

00:15:27.090 --> 00:15:31.490
Again, the real message here in this
section is learn our frameworks.

00:15:31.530 --> 00:15:32.890
Come to our labs.

00:15:33.020 --> 00:15:35.990
After the show,
go out on to our developer forums.

00:15:36.200 --> 00:15:37.210
Find an Apple engineer.

00:15:37.310 --> 00:15:38.450
Ask your question.

00:15:38.460 --> 00:15:40.700
Find, learn what we have available.

00:15:41.490 --> 00:15:43.360
So that's basic number two.

00:15:43.390 --> 00:15:47.010
Basic number three is
build solid abstractions.

00:15:47.120 --> 00:15:50.150
When you're thinking about
your project up front,

00:15:50.190 --> 00:15:52.920
you kind of think about, again,
kind of this may be even basic

00:15:52.920 --> 00:15:58.870
chemistry building blocks that
you want to use for your code.

00:15:59.090 --> 00:16:00.230
And so I've got an example.

00:16:00.400 --> 00:16:05.830
Here is a declaration of
the dispatch async call part

00:16:05.830 --> 00:16:08.840
of the dispatch framework.

00:16:08.840 --> 00:16:12.180
Of course, this is a really,
really great part of our frameworks.

00:16:12.250 --> 00:16:14.540
Of course, as it says,
a function schedules a block

00:16:14.540 --> 00:16:17.000
for concurrent execution
with the dispatch framework.

00:16:17.150 --> 00:16:18.960
Really, really neat technology.

00:16:19.000 --> 00:16:19.760
It's a great feature.

00:16:19.760 --> 00:16:23.310
It makes writing concurrent code much,
much easier to do.

00:16:24.980 --> 00:16:28.940
So, now that you know this, right,
you've read the man page,

00:16:28.940 --> 00:16:33.840
you've read the developer documentation,
and now you've got a piece of code

00:16:33.950 --> 00:16:37.530
like this where you've got a loop
and you need to do expensive work

00:16:37.680 --> 00:16:42.600
with every object in an array and,
ugh,

00:16:42.600 --> 00:16:45.390
you go in your profile and it's slow,
right?

00:16:45.520 --> 00:16:48.700
So you figure, "Oh, I've got a couple of
cores on this system.

00:16:48.700 --> 00:16:51.940
I'll just go and fix
it like that," right?

00:16:51.950 --> 00:16:55.170
I'll just go and dispatch async and
do all this work on the background

00:16:55.170 --> 00:16:59.100
thread and it's just like,
"Wahoo," right?

00:16:59.360 --> 00:17:01.850
No, not Wahoo.

00:17:01.940 --> 00:17:02.460
Why?

00:17:02.870 --> 00:17:04.370
Why is that not the right answer?

00:17:04.380 --> 00:17:08.360
Now, I think that what you've done,
what that piece of code has

00:17:08.360 --> 00:17:12.270
done is that's now given you
chemistry without physics,

00:17:12.280 --> 00:17:12.400
right?

00:17:12.400 --> 00:17:16.290
You just sprinkle in a
little dispatch async.

00:17:16.710 --> 00:17:19.200
"Probably not the right thing to do.

00:17:19.200 --> 00:17:21.940
And again, this is why it's not
the right thing to do.

00:17:22.110 --> 00:17:23.530
You've got chemistry without physics.

00:17:23.530 --> 00:17:25.700
Concurrent code is complex.

00:17:25.700 --> 00:17:29.950
And I think that when you
introduce that into your program,

00:17:29.950 --> 00:17:35.700
you need suitable abstractions to build
on in order to make it come out right.

00:17:35.700 --> 00:17:35.700
And so,

00:17:35.900 --> 00:17:39.220
I think the way to do that is in
terms of objects and interfaces,

00:17:39.300 --> 00:17:39.400
right?

00:17:39.400 --> 00:17:43.330
Define your work in terms of
the job that you want done.

00:17:43.500 --> 00:17:46.540
So now, right,
so here is this little trivial example.

00:17:46.540 --> 00:17:51.810
Let's maybe use a different example
that's a little bit more real world,

00:17:51.810 --> 00:17:59.490
which is maybe an image piece,
image app that generates

00:17:59.490 --> 00:18:02.500
thumbnails for larger images.

00:18:02.500 --> 00:18:05.100
You'll see here,
so I've got a thumbnail maker

00:18:05.100 --> 00:18:07.820
interface that says make a thumbnail,
right?

00:18:08.260 --> 00:18:13.270
And then an observer which gives
me a hooked call back after a

00:18:13.290 --> 00:18:17.500
thumbnail is finished being made.

00:18:17.570 --> 00:18:19.500
So here's a piece of code to do this.

00:18:19.500 --> 00:18:22.460
I've got my photo program,
which is itself a

00:18:22.460 --> 00:18:24.500
thumbnail maker observer.

00:18:24.500 --> 00:18:27.370
Maybe I've got now this
interface that perhaps,

00:18:27.370 --> 00:18:30.570
you know, some other part of my
software calls to say,

00:18:30.570 --> 00:18:32.500
okay, I've got an image now and
I need a thumbnail for it.

00:18:32.550 --> 00:18:37.040
I dispatch async onto a background
cue to the thumbnail maker object,

00:18:37.210 --> 00:18:42.500
which is of course defined on the bottom
of the screen to go and make a thumbnail.

00:18:42.500 --> 00:18:45.500
I pass myself in as the observer, right?

00:18:45.500 --> 00:18:48.500
So now, of course,
that code goes and runs.

00:18:48.500 --> 00:18:51.500
It makes the thumbnail, churn, churn,
churn, does the work,

00:18:51.500 --> 00:18:55.660
makes the thumbnail,
dispatches async back to the observer,

00:18:55.660 --> 00:18:58.500
back to the main program, says it's done,
okay.

00:18:58.500 --> 00:18:59.500
Thumbnail available now.

00:18:59.500 --> 00:19:01.500
Go and update the user interface.

00:19:01.500 --> 00:19:02.440
Take the little quick look.

00:19:02.510 --> 00:19:05.880
I'm going to go to the gray box
and replace it with the thumbnail,

00:19:06.040 --> 00:19:06.500
right?

00:19:06.500 --> 00:19:08.500
So very, very simple.

00:19:08.500 --> 00:19:11.870
But what I think you can see is
that this is chemistry with physics,

00:19:12.030 --> 00:19:12.500
right?

00:19:12.500 --> 00:19:14.500
There's design, right?

00:19:14.500 --> 00:19:18.020
Dispatch async is really
it's an implementation detail

00:19:18.020 --> 00:19:22.500
of this larger picture,
which you could sketch on a board, right?

00:19:22.500 --> 00:19:25.500
You have your big boxes now, right?

00:19:26.370 --> 00:19:26.880
It's better.

00:19:26.900 --> 00:19:29.530
That's a much,
much better way to approach the problem.

00:19:29.540 --> 00:19:32.630
Again, kind of a trivial example,
but I think it gets across

00:19:32.720 --> 00:19:34.300
a really important point.

00:19:34.300 --> 00:19:40.080
Because it now,
you're thinking about the software

00:19:40.080 --> 00:19:43.090
now in terms of thumbnails,
not in terms of just

00:19:43.090 --> 00:19:45.390
dispatching as part of a loop,
right?

00:19:45.450 --> 00:19:49.900
You've got sort of a structure,
a framework for your thinking.

00:19:49.980 --> 00:19:54.710
You've got an interface that will
hopefully stand the test of time.

00:19:55.300 --> 00:19:57.860
And additionally,
if you need to change your

00:19:57.860 --> 00:20:02.760
implementation sometime in the future
to maybe server-generated thumbnails,

00:20:02.850 --> 00:20:04.990
that you're not going to be shipping
these images over a network,

00:20:05.010 --> 00:20:07.290
to have the thumbnail generated
and have it come back,

00:20:07.480 --> 00:20:10.960
it's right, probably that interface,
that might actually work.

00:20:10.960 --> 00:20:14.440
Instead of dispatch async, well,
send the image, the raw,

00:20:14.450 --> 00:20:17.420
the full-resolution image
over the network to have a

00:20:17.420 --> 00:20:19.370
thumbnail generated for it.

00:20:19.460 --> 00:20:23.740
So I think that's a much,
much more solid abstraction.

00:20:23.740 --> 00:20:29.110
Again, defining your work in terms
of the job that you want done.

00:20:29.250 --> 00:20:33.090
And I think that's basic number three.

00:20:33.180 --> 00:20:35.100
Build solid abstractions.

00:20:35.140 --> 00:20:36.320
Okay, number four.

00:20:36.470 --> 00:20:38.800
Optimize for humans.

00:20:38.820 --> 00:20:42.850
I think this is something that is a
good idea to always keep in mind as

00:20:42.850 --> 00:20:47.470
you're designing your project that
particularly if it's going to have a

00:20:47.470 --> 00:20:50.870
long life that you're going to need
to be maintaining it and you want to

00:20:50.890 --> 00:20:53.100
be kind to your future self today.

00:20:53.220 --> 00:20:56.100
So here is an example of that.

00:20:56.100 --> 00:21:00.290
A lot of times we use these data
and wire formats in our program XML,

00:21:00.290 --> 00:21:03.750
JSON, PLIS, Google protocol buffers,
what have you.

00:21:04.100 --> 00:21:08.060
And here's an example of a little
JSON structure that I might be getting.

00:21:08.160 --> 00:21:09.100
It's a coupon, right?

00:21:09.100 --> 00:21:11.100
It has an expiration date and name.

00:21:11.100 --> 00:21:12.820
Hey, and it's got a pitch too.

00:21:12.820 --> 00:21:15.100
Get 25% off on your next purchase.

00:21:15.100 --> 00:21:18.830
So now you might think that, well,
if I'm going to be receiving this over

00:21:18.860 --> 00:21:22.080
the network from some service or partner,
perhaps this is maybe

00:21:22.080 --> 00:21:23.100
I'm making a purchase.

00:21:23.100 --> 00:21:26.860
I'm going to use this coupon,
the next great coupon app, right?

00:21:27.170 --> 00:21:31.200
I might think that in my program
then I'll receive this JSON over

00:21:31.200 --> 00:21:35.100
the network and then I'm going
to need some Objective-C code

00:21:35.100 --> 00:21:37.100
to deal with that coupon.

00:21:37.100 --> 00:21:39.100
And I'll just write it like this.

00:21:39.110 --> 00:21:44.070
I'll just have a get property set
property interface for the coupon and

00:21:44.070 --> 00:21:47.100
that's how I'll pick apart the details.

00:21:47.110 --> 00:21:51.060
And I think that's a bad idea.

00:21:51.150 --> 00:21:53.080
Now you've got chemistry
trumping your physics.

00:21:53.110 --> 00:21:57.100
Now you've got the fact that you're
using JSON or one of these other

00:21:57.100 --> 00:22:01.100
wire formats making decisions about
how your software is designed.

00:22:01.100 --> 00:22:03.100
You're not designing it for yourself.

00:22:03.100 --> 00:22:05.100
You're designing it for this wire format.

00:22:05.100 --> 00:22:07.100
And you wind up with a
weird universe like that.

00:22:07.100 --> 00:22:11.050
Instead of something like this,
you wind up with something like this.

00:22:11.160 --> 00:22:17.100
You've overemphasized how data is
traveling from one place to another

00:22:17.100 --> 00:22:21.090
rather than how you need to deal
with it when it gets to your program.

00:22:21.100 --> 00:22:22.230
to your program.

00:22:24.080 --> 00:22:28.510
And I think this is bad because brain
power is your scarcest resource.

00:22:28.630 --> 00:22:30.800
If you're trying to remember
what's the property name?

00:22:30.800 --> 00:22:33.730
Was the pitch inside of a dictionary?

00:22:33.800 --> 00:22:34.800
Did I need to get this?

00:22:34.900 --> 00:22:37.500
You don't want to be worried about that.

00:22:38.400 --> 00:22:42.460
It's not CPU power or network bandwidth
that is going to be the limiting

00:22:42.460 --> 00:22:43.940
factor in making your software.

00:22:43.940 --> 00:22:44.740
It's brain power.

00:22:44.740 --> 00:22:47.250
And you want to conserve
that as much as you can.

00:22:47.360 --> 00:22:49.730
So what can you do in
a situation like this?

00:22:49.740 --> 00:22:55.380
Instead of having an interface, right,
a weak object interface, get property,

00:22:55.380 --> 00:22:59.970
set property, I think you could do
something like this instead,

00:23:00.140 --> 00:23:04.120
where you've got methods
that take JSON data in,

00:23:04.120 --> 00:23:08.280
create your object,
can also vend JSON data back out,

00:23:08.280 --> 00:23:08.280
and you can also do something like this.

00:23:08.300 --> 00:23:10.830
In case you need to send
it back out on the network,

00:23:10.830 --> 00:23:14.520
perhaps even after modifying it,
and then give yourself a nice, good,

00:23:14.520 --> 00:23:16.670
strong object interface to work with.

00:23:16.740 --> 00:23:19.440
Now you don't need to remember,
is the pitch inside of

00:23:19.530 --> 00:23:20.770
some kind of dictionary?

00:23:20.880 --> 00:23:22.740
If it is or isn't, it doesn't matter.

00:23:22.830 --> 00:23:26.360
You will have taken care of that,
presumably, in the init method.

00:23:26.360 --> 00:23:30.260
And now that property is just
available for you to go and use.

00:23:30.260 --> 00:23:32.130
Now you can go and see,
maybe you've gone away from

00:23:32.130 --> 00:23:33.170
this code for a few months.

00:23:33.290 --> 00:23:35.960
Now you can come back and look at the
header and see what's in a coupon.

00:23:35.960 --> 00:23:39.460
You don't need to kind of go in with,
do I have an example of one of those

00:23:39.460 --> 00:23:41.640
coupon JSON data is on a disk somewhere?

00:23:41.640 --> 00:23:43.520
You don't need to worry about that.

00:23:43.570 --> 00:23:44.080
Right?

00:23:44.080 --> 00:23:46.370
You've done the work to
give yourself a good,

00:23:46.370 --> 00:23:47.750
strong object interface.

00:23:47.820 --> 00:23:49.990
You've optimized for yourself, right?

00:23:50.180 --> 00:23:53.070
Not for the serialization
of the networking protocol.

00:23:54.960 --> 00:23:58.420
And again, I think that's something that
you bake into your project at

00:23:58.420 --> 00:24:01.650
the beginning when you're making
your fundamental interfaces,

00:24:01.650 --> 00:24:03.980
designing how your system works.

00:24:04.020 --> 00:24:07.050
So optimize for yourself.

00:24:07.880 --> 00:24:14.640
Next, basic number five:
Focus Your Development Effort.

00:24:14.870 --> 00:24:15.190
Focus.

00:24:15.220 --> 00:24:16.880
You know,
I think at the beginning of the project,

00:24:17.080 --> 00:24:19.420
you think it's a good idea to
ask yourself what it is that

00:24:19.420 --> 00:24:20.700
you're trying to be great at.

00:24:20.700 --> 00:24:22.700
You should have a good
answer for that question.

00:24:22.860 --> 00:24:22.970
Right?

00:24:22.970 --> 00:24:23.950
What are you trying to be great at?

00:24:23.950 --> 00:24:24.670
Who's your audience?

00:24:24.720 --> 00:24:27.030
Who else in the world,
once they find my app,

00:24:27.160 --> 00:24:29.200
is going to think that it's great?

00:24:29.330 --> 00:24:31.130
And why are they going
to think that it's great?

00:24:31.300 --> 00:24:31.400
Right?

00:24:31.400 --> 00:24:34.390
You want to make sure you have
good answers for those questions,

00:24:34.520 --> 00:24:34.900
right?

00:24:34.990 --> 00:24:37.990
And you want to make sure that
you're building that then.

00:24:38.320 --> 00:24:39.200
Right?

00:24:39.340 --> 00:24:42.920
That you're actually delivering on that
greatness that you're trying to achieve.

00:24:42.920 --> 00:24:49.710
And I think that, of course,
iOS and OS X give you great

00:24:50.090 --> 00:24:53.790
Sort of foundation to stand on,
sort of literally and figuratively,

00:24:53.790 --> 00:24:54.350
right?

00:24:54.370 --> 00:24:56.200
Foundation framework, right?

00:24:56.370 --> 00:24:57.340
Stand on our shoulders.

00:24:57.620 --> 00:25:02.310
Build your great software
using our frameworks.

00:25:02.370 --> 00:25:04.590
Learn them again.

00:25:04.780 --> 00:25:07.850
A broken record for those of you who
are old enough to know what that is.

00:25:08.370 --> 00:25:09.700
Learn our frameworks.

00:25:09.700 --> 00:25:13.200
What's kind of interesting too,
it's just kind of a little digression,

00:25:13.200 --> 00:25:16.160
is that we wind up with sort of a
recursive physics and chemistry.

00:25:16.220 --> 00:25:19.840
Now there are people obviously
in Apple who for UIKit,

00:25:20.030 --> 00:25:22.200
that's their little chemistry set.

00:25:22.200 --> 00:25:26.650
They're going and developing UIKit,
deciding what the physics

00:25:26.700 --> 00:25:27.700
and the chemistry is.

00:25:27.700 --> 00:25:29.700
For you, that's just physics.

00:25:29.700 --> 00:25:31.200
UIKit is what it is.

00:25:31.200 --> 00:25:33.200
I mean, it's not changeable by you.

00:25:33.200 --> 00:25:39.510
That's just part of the physical reality,
sort of the unchangeable law of your

00:25:39.620 --> 00:25:42.100
universe if you're working on iOS,
right?

00:25:42.200 --> 00:25:43.700
And that's kind of interesting too.

00:25:43.700 --> 00:25:45.700
You might want to do that
in your own software.

00:25:45.700 --> 00:25:49.200
You know, sort of develop libraries that
then are sort of unchangeable

00:25:49.260 --> 00:25:50.570
by higher levels of code.

00:25:50.700 --> 00:25:54.700
You might even want
to do this for models,

00:25:54.700 --> 00:25:57.640
for the model of your program,
and then have user interface

00:25:57.640 --> 00:25:59.700
level one for iPad,
one for iPhone,

00:25:59.700 --> 00:26:03.640
that then treat that model layer
as sort of an unchangeable physics.

00:26:03.760 --> 00:26:06.700
Kind of an interesting little idea,
I think.

00:26:06.700 --> 00:26:09.640
Okay, so now more concrete examples,
right?

00:26:09.800 --> 00:26:15.470
Which is sort of getting to the idea
of that you want to focus on what makes

00:26:15.470 --> 00:26:17.700
your software novel and interesting.

00:26:17.700 --> 00:26:20.510
An example is,
if you love the way that iOS

00:26:20.570 --> 00:26:23.700
device auto rotation works,
don't spend time

00:26:23.700 --> 00:26:25.700
implementing that yourself.

00:26:25.700 --> 00:26:28.160
You need to learn our
frameworks and find out that

00:26:28.160 --> 00:26:28.700
UI View Controller provides that.

00:26:28.700 --> 00:26:30.240
Right?

00:26:31.070 --> 00:26:33.700
Similarly,
if you need database interaction,

00:26:33.700 --> 00:26:37.700
you want to save some of your apps,
runtime data in a database,

00:26:37.700 --> 00:26:39.700
learn about core data.

00:26:39.700 --> 00:26:43.700
Don't go invent your own object
relational mapping software.

00:26:43.700 --> 00:26:46.700
If you need animations,
learn about core animation, right?

00:26:46.700 --> 00:26:47.700
It's the same thing over and over.

00:26:47.700 --> 00:26:51.600
If you need X, and you're maybe not even
quite sure what that is,

00:26:51.710 --> 00:26:54.630
what name to call it,
because you don't know if we

00:26:54.630 --> 00:26:56.670
have that in our frameworks,
ask in the labs.

00:26:56.730 --> 00:26:57.690
That's why you're here this week.

00:26:57.700 --> 00:27:00.120
Go to the developer
forums after this week,

00:27:00.120 --> 00:27:00.700
right?

00:27:00.710 --> 00:27:02.700
This week, since you're here,
find an Apple engineer

00:27:02.700 --> 00:27:03.680
and ask your question.

00:27:03.700 --> 00:27:05.690
Get it answered, right?

00:27:05.720 --> 00:27:07.490
Because in the end,
you want to be working on the

00:27:07.490 --> 00:27:10.700
thing that's going to make
or break your application.

00:27:10.700 --> 00:27:11.700
Right?

00:27:11.700 --> 00:27:12.700
That's what you want to be working on.

00:27:12.700 --> 00:27:14.700
That's where you want to
be spending your time.

00:27:14.900 --> 00:27:19.120
Focus your development
effort right from the start.

00:27:19.120 --> 00:27:21.780
And then lastly,
you always want to be looking

00:27:21.780 --> 00:27:23.980
to the horizon a little bit.

00:27:24.570 --> 00:27:26.300
What if you're successful?

00:27:26.360 --> 00:27:30.450
What if your app works and people
love it and are downloading it?

00:27:30.510 --> 00:27:34.750
What if maybe you've got maybe even
a little service that's attached to

00:27:34.750 --> 00:27:37.890
it where people can upload content
or download content or whatever?

00:27:37.980 --> 00:27:39.190
Can you handle it?

00:27:39.460 --> 00:27:39.810
Right?

00:27:40.080 --> 00:27:41.000
What about performance?

00:27:41.000 --> 00:27:45.320
How much headroom do you have in your
software for things like performance

00:27:45.620 --> 00:27:49.700
or perhaps even for future features
that you may not be able to get to

00:27:49.700 --> 00:27:53.530
in your 1.0 but you definitely know
that you want to get to for your 2.0?

00:27:53.620 --> 00:27:57.880
So you really want to be building
in a little bit of headroom if

00:27:57.880 --> 00:28:00.110
you can to your application.

00:28:00.160 --> 00:28:01.350
Think about how to do that.

00:28:01.420 --> 00:28:01.560
Right?

00:28:01.560 --> 00:28:05.700
Another area to think about
if you saw Henri's talk on

00:28:06.060 --> 00:28:10.310
Monday about internationalization,
there's a huge opportunity out

00:28:10.420 --> 00:28:14.640
there for you to ship your app all
around the world if you localize

00:28:14.790 --> 00:28:18.620
it into the language spoken by
those people in other countries.

00:28:18.620 --> 00:28:22.610
We've got great support
for internationalizing,

00:28:22.620 --> 00:28:22.620
localizing your app.

00:28:22.620 --> 00:28:26.620
String, dates, times, addresses, names,
whatever.

00:28:26.620 --> 00:28:31.940
You want to be thinking about using our
software right from the beginning so

00:28:31.940 --> 00:28:36.590
that when it comes time to localize,
you're sort of in the ruts in the road.

00:28:36.750 --> 00:28:40.040
You can kind of take advantage of
our great localization features to

00:28:40.040 --> 00:28:41.600
ship your app all over the world.

00:28:41.600 --> 00:28:43.160
I really, really urge you to do that.

00:28:43.160 --> 00:28:44.620
It's a huge opportunity for you.

00:28:44.660 --> 00:28:47.910
And kind of getting back
to that idea I said,

00:28:47.980 --> 00:28:51.940
you may have an idea for a
2.0 version of your program,

00:28:51.940 --> 00:28:55.380
or maybe you think of a great new
feature after you've gotten feedback

00:28:55.500 --> 00:28:59.420
from users about your 1.0 release,
right?

00:28:59.420 --> 00:29:00.930
Your next feature idea, will it blend?

00:29:00.940 --> 00:29:05.780
Well, it's kind of reasonable to believe
that if you've wound up with a

00:29:05.780 --> 00:29:08.930
chemistry and physics like this,
that adding a new feature

00:29:08.930 --> 00:29:10.700
maybe won't be so daunting.

00:29:10.700 --> 00:29:13.040
But if at the end of,
you've gotten to the end of your

00:29:13.040 --> 00:29:17.600
1.0 and your design looks like this,
it's because you kind of needed to

00:29:17.600 --> 00:29:20.620
hack in those features and you're just
going as fast as you could and you

00:29:20.620 --> 00:29:23.710
really wanted to make a great release
for your users by getting that one

00:29:23.720 --> 00:29:27.670
last feature in there and you needed
to maybe make things a little bit

00:29:27.740 --> 00:29:29.110
more complicated than you would like.

00:29:29.190 --> 00:29:30.230
Look, that happens.

00:29:30.360 --> 00:29:31.580
That's real world.

00:29:31.600 --> 00:29:33.760
That absolutely happens all the time.

00:29:33.780 --> 00:29:36.580
But you don't want to
be living with this,

00:29:36.580 --> 00:29:38.160
you know, then for your 2.0.

00:29:38.160 --> 00:29:41.040
And I'll kind of get to that,
how you might fix that

00:29:41.040 --> 00:29:42.840
later on in the show.

00:29:43.390 --> 00:29:49.120
Sort of burn that image in your mind of
how that software might wind up looking

00:29:49.120 --> 00:29:51.340
and how you might want to fix it.

00:29:51.360 --> 00:29:52.840
We'll get back to it later.

00:29:52.840 --> 00:29:57.090
Maybe you need to do a stop and
clean up and refact your code again.

00:29:57.100 --> 00:29:59.940
Talk about that a little bit later.

00:29:59.940 --> 00:30:02.110
But those are the basics, right?

00:30:02.200 --> 00:30:04.870
The basic ideas,
at least a good number of

00:30:04.870 --> 00:30:08.470
them from my experience,
the kinds of decisions that

00:30:08.470 --> 00:30:09.890
I make at the start of a project.

00:30:09.960 --> 00:30:13.260
Things that I want to get right,
right from the start.

00:30:13.320 --> 00:30:14.520
Right?

00:30:14.520 --> 00:30:16.220
It's the fundamental
choices that you make.

00:30:16.220 --> 00:30:17.910
And then that takes us to habits.

00:30:17.960 --> 00:30:21.080
Once you've made those decisions,
then you're going to be living with

00:30:21.080 --> 00:30:26.640
them and working and working and working
in that physics and chemistry sandbox,

00:30:26.640 --> 00:30:30.450
to mix my metaphors,
that you've made for yourself.

00:30:30.480 --> 00:30:35.360
And I've got six topics that I'd like
to talk about in terms of habits.

00:30:36.700 --> 00:32:40.500
[Transcript missing]

00:32:41.360 --> 00:32:45.200
The second habit,
thing that we do all the time,

00:32:45.200 --> 00:32:47.190
is we make changes to our projects.

00:32:47.200 --> 00:32:50.300
I think that changes,
again this is sort of something

00:32:50.300 --> 00:32:54.340
I talked about last year with easy
to change and incremental change,

00:32:54.340 --> 00:32:58.380
is that I think that obvious
and unsurprising change is what

00:32:58.380 --> 00:32:59.170
you should be striving for.

00:32:59.200 --> 00:33:03.860
Smaller changes are better, you know,
in sort of practical terms,

00:33:03.860 --> 00:33:05.980
I think is the takeaway there.

00:33:06.630 --> 00:33:11.980
Right, so again,
going back to the block diagram,

00:33:11.980 --> 00:33:11.980
so now let's say

00:33:12.420 --> 00:33:16.220
You've been working, working hard,
it gets to Friday evening,

00:33:16.380 --> 00:33:18.860
maybe you check and
do your last check-in,

00:33:18.860 --> 00:33:20.800
and that's how you leave the system.

00:33:20.850 --> 00:33:26.630
That's how it looked when you
left to go home for the weekend.

00:33:26.630 --> 00:33:30.560
So now let's say that somebody
came in over the weekend,

00:33:30.700 --> 00:33:35.850
somebody else from your team,
and added a feature, right?

00:33:36.070 --> 00:33:40.020
Changed that one object by maybe
adding a new property to add a

00:33:40.060 --> 00:33:44.360
new feature to the software that
you all knew about ahead of time,

00:33:44.360 --> 00:33:46.930
and the person just was enterprising,
came in over the weekend and did it.

00:33:46.990 --> 00:33:50.600
Now you come back in on Monday morning
and you see that change.

00:33:50.670 --> 00:33:51.290
Great.

00:33:51.300 --> 00:33:52.260
I knew about the feature.

00:33:52.260 --> 00:33:53.900
I knew that it was coming.

00:33:53.910 --> 00:33:55.500
My teammate came in and did it.

00:33:55.620 --> 00:33:56.700
Feels good.

00:33:56.700 --> 00:33:58.560
You understand how everything works.

00:33:58.590 --> 00:33:59.370
Everything's fine.

00:33:59.410 --> 00:34:05.320
But now, what if instead you are
working with a crazy developer?

00:34:05.320 --> 00:34:05.940
They're out there.

00:34:05.940 --> 00:34:06.770
It's like some of you.

00:34:06.780 --> 00:34:08.740
No, never mind.

00:34:08.790 --> 00:34:11.820
Crazy developer who got this
whole new idea about how

00:34:11.820 --> 00:34:14.500
to re-architect everything,
and you come back in on

00:34:14.540 --> 00:34:18.860
Monday morning and the system winds,
it looks like this, right?

00:34:18.860 --> 00:34:19.250
Right.

00:34:19.250 --> 00:34:20.560
This never happens, right?

00:34:20.560 --> 00:34:21.960
This never, ever happens.

00:34:21.960 --> 00:34:23.460
No, it does happen, right?

00:34:23.460 --> 00:34:25.460
And now you're going
Monday morning and it's just like,

00:34:25.460 --> 00:34:28.190
what happened to the project?

00:34:28.210 --> 00:34:30.420
That's not obvious or
unsurprising at all.

00:34:30.500 --> 00:34:33.900
It's shocking and horrifying, right?

00:34:33.900 --> 00:34:35.890
It probably means that you
have bad communication.

00:34:35.930 --> 00:34:38.820
Probably this was the image that
this engineer would have drawn on the

00:34:38.820 --> 00:34:42.720
whiteboard all the time and now secretly
is going to impose it on you all,

00:34:42.880 --> 00:34:43.280
right?

00:34:43.280 --> 00:34:45.410
Not what you want, right?

00:34:45.420 --> 00:34:47.400
Not obvious or unsurprising change.

00:34:47.550 --> 00:34:52.190
But you can make big changes
to your software over time,

00:34:52.460 --> 00:34:53.020
right?

00:34:53.040 --> 00:34:54.860
Consider WebKit is a great example.

00:34:54.860 --> 00:34:58.520
I started working on WebKit in
2001 right from the beginning.

00:34:58.520 --> 00:35:02.500
And if you go and look at that
WebKit and the WebKit that we have today,

00:35:02.610 --> 00:35:05.840
you'll see that there's been
a huge amount of change.

00:35:05.840 --> 00:35:07.080
It's sort of like Theseus's ship.

00:35:07.080 --> 00:35:09.520
There's probably not a single line
of code that hasn't been changed,

00:35:09.520 --> 00:35:10.000
right?

00:35:10.000 --> 00:35:11.560
But is it the same software?

00:35:11.560 --> 00:35:14.000
I don't know if you know that story,
right?

00:35:14.000 --> 00:35:18.000
You can make big changes to your
software project a plank at a time,

00:35:18.000 --> 00:35:20.480
just like in Theseus's ship, right?

00:35:20.480 --> 00:35:24.620
A line of code at a time,
a class at a time, a function at a time.

00:35:24.630 --> 00:35:28.350
If your changes are small,
they're well documented

00:35:28.350 --> 00:35:32.350
like they are on WebKit,
you sort of consider you have a good

00:35:32.350 --> 00:35:35.960
code review process where you're
going and reviewing these changes.

00:35:35.960 --> 00:35:40.010
The changes are communicated throughout
the very large project in this case,

00:35:40.120 --> 00:35:40.600
right?

00:35:40.600 --> 00:35:41.920
And big changes are possible.

00:35:41.960 --> 00:35:44.630
The great thing about WebKit,
if you want to learn about

00:35:44.630 --> 00:35:46.770
how changes are made,
is that the changes are available

00:35:46.980 --> 00:35:48.200
since it's an open source project.

00:35:48.200 --> 00:35:50.040
Go and look at the, you know, at the web.

00:35:50.100 --> 00:35:52.280
You know, at the changes go by.

00:35:52.310 --> 00:35:55.610
All right,
so big changes are possible if,

00:35:55.610 --> 00:35:58.940
and they're possible by
packaging them up as small,

00:35:58.970 --> 00:36:00.230
incremental changes.

00:36:00.310 --> 00:36:02.280
And again,
it's all a matter of communication.

00:36:02.280 --> 00:36:06.290
You go step by step,
make sure everybody is sort of bought in,

00:36:06.390 --> 00:36:09.800
knowledgeable about how
the change is necessary,

00:36:09.880 --> 00:36:13.060
why the change is necessary, what it is,
and so forth.

00:36:13.080 --> 00:36:16.510
So we make changes all the time,
communicate.

00:36:16.700 --> 00:36:19.600
And then number three,
probably our favorite part, right?

00:36:19.600 --> 00:36:21.030
Is that you write code.

00:36:21.140 --> 00:36:25.340
Again, this is sort of tying back
into the basic thing as your,

00:36:25.340 --> 00:36:26.400
the basic idea.

00:36:26.510 --> 00:36:28.720
You really do want to be
writing code for each other.

00:36:29.130 --> 00:36:32.330
Ideally, your code,
when and where possible,

00:36:32.340 --> 00:36:34.080
is self-documenting.

00:36:34.460 --> 00:36:35.630
I couldn't resist.

00:36:35.680 --> 00:36:38.990
I had this line of code
on the screen last year.

00:36:39.000 --> 00:36:42.080
This was an actual line of
code that I pulled out of

00:36:42.080 --> 00:36:44.590
an earlier version of iOS.

00:36:44.780 --> 00:36:48.000
And even a year later,
I still don't know what it does.

00:36:48.070 --> 00:36:51.720
It's that vexing exclamation
point which changes the result

00:36:51.830 --> 00:36:54.210
of the ternary expression,
right?

00:36:54.380 --> 00:36:57.630
I still don't know what this does
and why it's written this way,

00:36:57.630 --> 00:36:58.160
right?

00:36:58.280 --> 00:37:00.190
Now,
I'm not even going to let you look at it.

00:37:00.190 --> 00:37:03.060
You should probably be counting
the braces and looking and saying,

00:37:03.060 --> 00:37:04.850
"You don't want to be doing that, right?

00:37:04.860 --> 00:37:06.610
You're not an IDE which matches braces.

00:37:06.610 --> 00:37:08.010
You don't want to be doing that.

00:37:08.010 --> 00:37:13.110
It's not worth your time, right?" So now,
here's another example drawn from WebKit,

00:37:13.150 --> 00:37:13.820
actually.

00:37:14.050 --> 00:37:16.960
You see it's the location
text field for Safari.

00:37:17.280 --> 00:37:20.120
And I like to just call out
a couple of lines of code,

00:37:20.350 --> 00:37:21.830
things that got added.

00:37:21.830 --> 00:37:24.580
This margin before
URL got added at the top,

00:37:24.580 --> 00:37:25.810
a new constant.

00:37:26.100 --> 00:37:28.000
And then the later chart.

00:37:28.000 --> 00:37:29.800
And then the later chunk
actually uses that.

00:37:29.800 --> 00:37:35.040
It's actually got a comment
describing what this margin is for.

00:37:35.040 --> 00:37:37.080
It's actually -- I don't
have on the slide,

00:37:37.080 --> 00:37:41.210
but then the check-in comment described
yet further other changes which may

00:37:41.270 --> 00:37:43.360
be coming to this code later on.

00:37:43.430 --> 00:37:47.060
And so the thing is you look at that,
and it's not scary.

00:37:47.200 --> 00:37:50.310
If that developer made that
change and then went on vacation,

00:37:50.340 --> 00:37:52.550
it's just like, "Oh, Ken, boy, yeah,
the change came in.

00:37:52.760 --> 00:37:56.460
Can you go in there and make that
change that was mentioned in that

00:37:56.460 --> 00:38:00.210
check-in comment?" It's like I'd
go and look at that code and say,

00:38:00.210 --> 00:38:03.110
"Yeah, yeah,
I could do that and be pretty confident

00:38:03.110 --> 00:38:07.880
that I wouldn't mess it up." Because the
code is written in an intelligible way,

00:38:07.910 --> 00:38:08.550
right?

00:38:08.620 --> 00:38:10.880
It's almost like it was written
for me to come and understand

00:38:10.940 --> 00:38:11.810
it at some later point.

00:38:12.050 --> 00:38:15.030
So I think that's the
takeaway for writing code.

00:38:15.100 --> 00:38:17.060
Ideally,
you want it to be self-documenting.

00:38:17.310 --> 00:38:19.260
Write it for your teammates.

00:38:19.380 --> 00:38:23.030
Write it for your future self.

00:38:23.150 --> 00:38:25.340
Good habit to adopt.

00:38:25.460 --> 00:38:25.720
Okay.

00:38:26.060 --> 00:38:27.520
Number four.

00:38:27.520 --> 00:38:29.280
The review code.

00:38:29.550 --> 00:38:30.960
Hopefully.

00:38:30.960 --> 00:38:33.270
Review our code.

00:38:33.280 --> 00:38:36.040
Give it to our teammates to look at,
people working on the same project.

00:38:36.170 --> 00:38:38.120
Perhaps if you have an
open source project,

00:38:38.180 --> 00:38:42.160
you have your community look
at it before you check it in.

00:38:42.160 --> 00:38:46.320
So the example that I'd like to use here,
this wonderful set of lectures

00:38:46.320 --> 00:38:50.240
that Richard Feynman did
at Cornell in the '60s.

00:38:50.240 --> 00:38:51.760
Go out on the net and find them.

00:38:51.760 --> 00:38:52.790
They're absolutely wonderful.

00:38:52.810 --> 00:38:54.880
Seven lectures, each an hour long.

00:38:54.880 --> 00:38:55.720
Really, really wonderful.

00:38:55.760 --> 00:38:57.280
It's also wonderful to hear.

00:38:57.350 --> 00:38:59.740
A guy from New York talk about physics.

00:39:00.010 --> 00:39:01.240
What a real New York accent.

00:39:01.540 --> 00:39:03.840
Really just wonderful to have.

00:39:03.840 --> 00:39:08.860
You just don't expect great truths
about the natural world coming

00:39:08.860 --> 00:39:11.560
out from a guy that you'd see on
the street corner in New York,

00:39:11.630 --> 00:39:13.040
or at least that's what he sounds like.

00:39:13.210 --> 00:39:14.160
Those wonderful shows.

00:39:14.160 --> 00:39:18.010
So now in one section,
he talks about how physicists

00:39:18.010 --> 00:39:20.200
look for new physical laws.

00:39:20.320 --> 00:39:23.760
And he said it's a three-step process.

00:39:23.760 --> 00:39:27.040
He says first, you guess.

00:39:27.670 --> 00:39:30.610
There might be a new
physical law which does this.

00:39:30.740 --> 00:39:34.240
I don't know if it's right,
but that's my guess.

00:39:34.290 --> 00:39:35.600
So you make a guess.

00:39:35.610 --> 00:39:40.100
And then you compute all of
the implications of your guess.

00:39:40.190 --> 00:39:42.300
Well, what if this thing was true?

00:39:42.300 --> 00:39:43.650
What would that mean?

00:39:43.680 --> 00:39:44.250
Right?

00:39:44.250 --> 00:39:48.400
So you make all those computations
and you wind up with your results,

00:39:48.600 --> 00:39:52.560
and then you compare those results
to experimental observation,

00:39:52.600 --> 00:39:53.360
right?

00:39:54.690 --> 00:39:57.490
And if the results from your
computation matches what the

00:39:57.490 --> 00:40:00.770
physical world seems to do,
maybe the guess is right.

00:40:00.840 --> 00:40:03.740
And if it doesn't match, then it's wrong.

00:40:03.840 --> 00:40:05.000
Very, very simple.

00:40:05.000 --> 00:40:06.660
That's how science works, right?

00:40:08.000 --> 00:40:10.700
What does this have to
do with code reviews?

00:40:10.720 --> 00:40:14.400
I think it has a lot to do with it
because it outlines a process that

00:40:14.470 --> 00:40:17.300
I think we go through in our mind,
right?

00:40:17.380 --> 00:40:21.770
And that code reviews are stories
and you want to tell the story of

00:40:21.770 --> 00:40:25.920
how you came up with the change
really following that same procedure,

00:40:25.990 --> 00:40:26.480
right?

00:40:26.630 --> 00:40:31.060
Probably when you see a bug in your
software and you're thinking now,

00:40:31.140 --> 00:40:32.600
it's like you're not
searching for a physical law.

00:40:32.600 --> 00:40:36.540
What you're searching for is
why is this bug happening?

00:40:36.740 --> 00:40:39.250
You make a guess based on
your knowledge of the system,

00:40:39.250 --> 00:40:39.750
right?

00:40:39.760 --> 00:40:43.250
Just like a way a physicist makes a guess
based on knowledge of physical laws,

00:40:43.250 --> 00:40:43.620
right?

00:40:43.690 --> 00:40:45.660
So in the software, you make a guess.

00:40:45.660 --> 00:40:48.450
Why do you think,
and maybe a guess as to how you're

00:40:48.450 --> 00:40:51.220
going to change your system,
and you're sitting there guessing, well,

00:40:51.250 --> 00:40:55.060
why will the change that I haven't
yet written but that I have in

00:40:55.070 --> 00:40:57.620
my mind and I'm about to type,
why does that work?

00:40:57.820 --> 00:40:59.010
Why will that work?

00:40:59.250 --> 00:41:00.630
Why will that fix the bug?

00:41:00.790 --> 00:41:03.410
So you make your guess,
and then you write your code,

00:41:03.440 --> 00:41:05.530
and then you compile it,
and then you run it.

00:41:05.740 --> 00:41:10.700
You actually have the software run,
right?

00:41:10.700 --> 00:41:14.740
And then you need to go and look at the
results and figure out how to test them,

00:41:14.740 --> 00:41:19.500
and then you compare those test
results from how the program works,

00:41:19.500 --> 00:41:20.300
right?

00:41:20.300 --> 00:41:21.970
Did it actually fix the bug?

00:41:22.020 --> 00:41:24.750
You compare it to how
your users will see it.

00:41:24.860 --> 00:41:27.030
See if the bug is gone.

00:41:27.040 --> 00:41:31.220
You also want to ask yourself if you're
sure that the bug is really gone,

00:41:31.220 --> 00:41:34.020
that maybe you actually understood
it right from the beginning.

00:41:34.890 --> 00:41:38.480
And also, not only those three steps,
but I think there's a very important

00:41:38.480 --> 00:41:42.140
fourth step that you want to
communicate in your code reviews.

00:41:42.200 --> 00:41:46.090
I think you want to tell people
about your guesses that didn't work.

00:41:47.710 --> 00:41:49.430
If you made any.

00:41:49.470 --> 00:41:53.160
I make ten wrong guesses for
every right one that I make.

00:41:53.270 --> 00:41:57.170
And I want to tell people about them
because so often other people have a

00:41:57.170 --> 00:42:00.230
different perspective and they say,
"You know, that first guess that you

00:42:00.230 --> 00:42:02.940
had was actually right if
you had just done this." Or,

00:42:02.950 --> 00:42:04.690
"No, you read the bug wrong.

00:42:04.700 --> 00:42:05.570
It's not about that.

00:42:05.580 --> 00:42:09.010
It's actually about this and
your second guess was right."

00:42:09.330 --> 00:42:11.960
If you make this other little change.

00:42:12.130 --> 00:42:14.830
And of course if you'd never
told any of the people about your

00:42:14.830 --> 00:42:18.020
failures in your code reviews,
they wouldn't have had the opportunity

00:42:18.080 --> 00:42:22.140
to make that contribution or suggestion.

00:42:22.490 --> 00:42:27.020
I think code reviews are stories
and the best thing about this,

00:42:27.030 --> 00:42:31.900
this is one of the best ways to build
that shared understanding that will help

00:42:31.910 --> 00:42:33.400
your whiteboard test come out right.

00:42:33.400 --> 00:42:37.470
Go and get somebody who works on
some other part of your software,

00:42:37.470 --> 00:42:40.920
maybe not exactly in your area,
and explain to them about

00:42:40.960 --> 00:42:44.400
this bug and your guesses
and how you made this change.

00:42:44.400 --> 00:42:49.350
That whole process will help
them get more knowledge about how

00:42:49.350 --> 00:42:52.380
your particular subsystem works.

00:42:52.400 --> 00:42:52.400
Build that shared understanding.

00:42:52.400 --> 00:42:55.400
I think that's what
code reviews are about.

00:42:55.400 --> 00:42:58.560
Forget about where the braces are
and where the semicolons are and

00:42:58.560 --> 00:43:00.400
whether you've got the underscores.

00:43:00.400 --> 00:43:03.400
You need to do that,
but that's not really what code

00:43:03.410 --> 00:43:06.390
reviews are about ultimately,
about stories.

00:43:08.360 --> 00:43:10.300
and building a shared understanding.

00:43:10.300 --> 00:43:12.280
Okay, number five.

00:43:12.350 --> 00:43:14.940
We test code, hopefully all the time.

00:43:15.000 --> 00:43:17.700
And again,
so I have an example based on my

00:43:17.700 --> 00:43:21.720
experience of working in Safari,
working on Safari all the time.

00:43:21.720 --> 00:43:24.380
Of course, you know,
you go and make a code change, you know,

00:43:24.380 --> 00:43:26.430
in WebCore, you know,
change the way the style

00:43:26.490 --> 00:43:28.120
system works and whatever.

00:43:28.180 --> 00:43:30.310
And, you know, you compile that.

00:43:30.320 --> 00:43:33.150
It's just like, well,
I've broken the entire Internet by

00:43:33.150 --> 00:43:34.760
going and making that change,
right?

00:43:34.830 --> 00:43:35.890
Boy, it sure did happen.

00:43:35.900 --> 00:43:38.570
It's like I go and make the change,
I just start up the web browser,

00:43:38.570 --> 00:43:41.540
and I load a page,
and it's a white screen.

00:43:41.540 --> 00:43:42.800
Nothing works, right?

00:43:42.800 --> 00:43:44.720
You've broken everything.

00:43:44.750 --> 00:43:47.490
It absolutely happened all the time.

00:43:47.670 --> 00:43:48.920
So obviously you made a wrong guess.

00:43:49.000 --> 00:43:52.440
You got to go back and do something else.

00:43:52.510 --> 00:43:54.690
Or the other joke was,

00:43:54.760 --> 00:43:56.340
Okay, so I made this change.

00:43:56.340 --> 00:43:59.280
You go and take websites
beginning with A through M,

00:43:59.330 --> 00:44:02.420
and I'll take N through Z,
and we'll get back together and

00:44:02.430 --> 00:44:06.630
see if our tests pass to see if
that code change actually worked.

00:44:06.740 --> 00:44:10.520
But no, obviously you can't do that,
so you need some other

00:44:10.520 --> 00:44:12.260
kind of testing regime.

00:44:12.260 --> 00:44:16.240
And in the Safari project
back from the beginning,

00:44:16.360 --> 00:44:23.210
we came up with sort of this
fundamental way of testing the browser,

00:44:23.340 --> 00:44:28.870
and it was built on, firstly,
the page load test, the PLT.

00:44:29.350 --> 00:44:34.300
I remember talking to Gramps one day
about going and making the PLT and

00:44:34.300 --> 00:44:37.300
it turned out to be one of the best
things that we ever did for the project.

00:44:37.300 --> 00:44:41.300
The idea was we had a performance test,
it was built into the browser,

00:44:41.340 --> 00:44:45.300
easy to run, go to the develop menu,
bring up the page load test,

00:44:45.300 --> 00:44:52.300
run the test, took the browser through a
series of 40 well-chosen URLs,

00:44:52.300 --> 00:44:53.300
go and load them all.

00:44:53.300 --> 00:44:56.610
At the end, once it was finished running,
it would give you one number

00:44:56.610 --> 00:44:58.300
saying this is how long it took.

00:44:58.300 --> 00:45:01.830
We did a little statistical computation,
but basically the average time

00:45:01.830 --> 00:45:03.300
for loading all the pages.

00:45:03.300 --> 00:45:04.870
It was great.

00:45:05.580 --> 00:45:09.300
Again, built in, easy to run,
we ran it all the time.

00:45:09.300 --> 00:45:13.300
Typically how we would use
this is we would get a bug,

00:45:13.350 --> 00:45:14.240
I need to fix this bug.

00:45:14.400 --> 00:45:17.300
First I'll run the PLT and see
where everything is this morning.

00:45:17.300 --> 00:45:21.110
I'll go and make my code change,
build the software,

00:45:21.330 --> 00:45:23.850
and now before I check it in
I'll run the PLT again to see if

00:45:24.130 --> 00:45:27.300
I caused a performance problem.

00:45:27.300 --> 00:45:30.300
It wasn't a performance
problem that I was fixing.

00:45:30.300 --> 00:45:33.300
99% of the time it wasn't.

00:45:33.300 --> 00:45:35.300
Some other change.

00:45:35.300 --> 00:45:40.300
Feature addition, correct, bug,
correctness bug, what have you.

00:45:40.300 --> 00:45:45.700
By doing this all the time I wound up
with a thick stack of yellow legal pad

00:45:45.700 --> 00:45:50.260
papers with just list and list and list,
day after day after day after day,

00:45:50.340 --> 00:45:53.300
code change after code change
of how the PLT was running.

00:45:53.300 --> 00:45:56.300
It was just wonderful then later to
go back and see that we were making

00:45:56.300 --> 00:45:56.300
the browser faster and faster.

00:45:56.300 --> 00:46:02.430
Simply because we had this easy
to run test that we could rely on,

00:46:02.430 --> 00:46:06.290
run all the time to tell
us how we were doing.

00:46:06.640 --> 00:46:09.290
This is great to do.

00:46:09.620 --> 00:46:13.570
If you can build in a performance
test like that and then really use

00:46:13.570 --> 00:46:17.900
it to drive your effort and never,
I think the final key is never

00:46:17.990 --> 00:46:20.000
let any regressions check in.

00:46:20.000 --> 00:46:22.770
Or never check in any regressions.

00:46:22.850 --> 00:46:26.710
Never commit code that winds
up making your program slower.

00:46:26.800 --> 00:46:30.700
Again, I think I said this last year,
the great characteristic about

00:46:30.700 --> 00:46:33.110
that is that if you never
make your software slower,

00:46:33.340 --> 00:46:35.560
it can only get faster or stay the same.

00:46:36.230 --> 00:46:41.300
And so if you take a hard line on that,
your performance won't help to improve.

00:46:41.300 --> 00:46:45.260
So many times you'd make a code
change that seemed to have nothing

00:46:45.260 --> 00:46:47.430
to do with performance and you
ran the PLT and it's just like,

00:46:47.430 --> 00:46:48.900
the code got faster.

00:46:48.900 --> 00:46:49.480
Wait a minute.

00:46:49.500 --> 00:46:52.390
It's a wonderful bonus and we'd
go and investigate and a lot of

00:46:52.390 --> 00:46:55.720
times that actually pointed us to
another direction where we could

00:46:55.720 --> 00:46:57.270
get even more performance gains.

00:46:57.300 --> 00:47:00.250
Just some aspect of the system
changed which actually turned

00:47:00.260 --> 00:47:01.700
out to have a good effect.

00:47:01.700 --> 00:47:03.700
It's actually a good mutation, right?

00:47:03.700 --> 00:47:04.410
It does happen.

00:47:06.100 --> 00:47:08.930
All right, so the page load test,
build in, those testing,

00:47:08.990 --> 00:47:10.230
and that performance.

00:47:10.330 --> 00:47:12.660
The second kind of test that we added,
layout tests.

00:47:12.870 --> 00:47:14.500
These are correctness tests.

00:47:14.600 --> 00:47:17.910
These are basically just web
pages where you load them.

00:47:17.910 --> 00:47:24.210
We would print out the render tree
structure for the web browser,

00:47:24.210 --> 00:47:29.240
take a screenshot of that page,
and then we would have a means to compare

00:47:29.260 --> 00:47:35.720
before and after to see whether or not
a change altered the correct rendering.

00:47:36.100 --> 00:47:38.500
For web content.

00:47:38.610 --> 00:47:43.530
This is also a great
thing to add to your code.

00:47:43.900 --> 00:47:47.160
Um, you know,
having this system that's easy to run,

00:47:47.160 --> 00:47:51.130
we could run this from the command line,
adding a test was as simple as just

00:47:51.130 --> 00:47:57.110
going and putting a new HTML file
in a directory in the project.

00:47:57.210 --> 00:47:59.620
When you added that,
the system would see that it didn't

00:47:59.620 --> 00:48:03.000
have expected results and would just
generate them right then and there.

00:48:03.000 --> 00:48:06.590
It was just so simple and
wonderful and easy to add tests.

00:48:06.590 --> 00:48:09.790
If you're in the WebKit project,
it's like you know that you can't

00:48:09.790 --> 00:48:13.110
check in anything that has to do with
rendering without adding a layout test.

00:48:13.370 --> 00:48:15.200
So we've got thousands of tests now.

00:48:15.410 --> 00:48:19.100
And the other two great things
about both of those kinds of tests,

00:48:19.100 --> 00:48:22.120
you think about them as unit tests,
but they're really not.

00:48:22.430 --> 00:48:24.430
They're really whole program tests.

00:48:24.440 --> 00:48:29.000
When you're testing rendering,
obviously it's also testing, you know,

00:48:29.020 --> 00:48:33.480
network loading, and it's testing whole
other aspects of the system.

00:48:33.520 --> 00:48:37.890
You know, HTML parsing, you know,
style parsing, you know,

00:48:37.900 --> 00:48:42.760
all kinds of parts of the system that
I may not be working on right now,

00:48:43.030 --> 00:48:47.630
but I'm still exercising and making
sure that I haven't caused any...

00:48:48.970 --> 00:48:51.660
"Unintended regressions.

00:48:51.660 --> 00:48:54.490
Of course,
really the end result of all of this

00:48:54.490 --> 00:48:59.200
is that it gives you confidence that
your changes are not having these

00:48:59.480 --> 00:49:02.570
hidden evil effects on your software.

00:49:02.640 --> 00:49:05.910
You go and you make a change,
you run all your tests,

00:49:06.000 --> 00:49:10.690
and it gives you confidence that you
can check in that change without having

00:49:10.910 --> 00:49:13.460
any ill effects that you didn't intend.

00:49:13.500 --> 00:49:17.570
You get confidence from your tests,
which is great."

00:49:17.760 --> 00:49:19.070
That's number five.

00:49:19.200 --> 00:49:24.620
Number six, the last habit,
is that you reevaluate your basics.

00:49:24.710 --> 00:49:28.750
And what this does is it sort of
kicks off the feedback loop back up

00:49:28.880 --> 00:49:31.280
to the top of your basic decisions.

00:49:31.360 --> 00:49:35.170
Right, you made your basic decisions,
you did the best that

00:49:35.170 --> 00:49:38.860
you could with them,
you lived with them for a while,

00:49:38.860 --> 00:49:42.300
you have all your habits,
you write your software, whatever,

00:49:42.380 --> 00:49:47.040
and then at some point, a lot of times,
you realize, man, boy,

00:49:47.040 --> 00:49:49.850
that decision to design that
object that way didn't really work.

00:49:49.950 --> 00:49:55.400
We can't change it now,
but maybe later on, before we do 2.0,

00:49:55.400 --> 00:49:57.930
we're going to go and
make a change with that.

00:49:57.940 --> 00:50:04.830
A great example of this was I did the
work to add HTML editing to WebKit,

00:50:04.840 --> 00:50:07.880
which of course is now
used in Mail and OS X.

00:50:07.910 --> 00:50:12.160
It's used for all of the text
editing that we have on iOS.

00:50:12.410 --> 00:50:15.710
So while I was doing that,
the initial idea for where the

00:50:15.710 --> 00:50:19.260
insertion point was blinking,
which I tell you is the hardest bit

00:50:19.270 --> 00:50:23.140
of code that I ever wrote in my life,
was to take an arbitrary bit of web

00:50:23.140 --> 00:50:28.760
content and be able to just arrow
through it one character at a time to

00:50:28.840 --> 00:50:30.890
the end of the content and then back.

00:50:31.200 --> 00:50:35.090
It's just absolutely, really,
just incredibly difficult

00:50:35.120 --> 00:50:36.640
to do for web content.

00:50:36.800 --> 00:50:40.300
And the problem was I had
insufficiently good physical

00:50:40.710 --> 00:50:42.560
notions about how to do that.

00:50:42.570 --> 00:50:47.220
I had a position in a DOM document
which turned out to be not

00:50:47.220 --> 00:50:50.710
powerful enough because there were
positions which were visible and

00:50:50.840 --> 00:50:52.990
positions which were not visible.

00:50:53.090 --> 00:50:55.290
So I found two of my very,
very smart friends.

00:50:55.330 --> 00:50:58.050
I found Darren Adler and Trey Madison,
if you know those two people.

00:50:58.090 --> 00:51:00.680
It's just the guy who, you know,
Darren Adler you may know.

00:51:00.680 --> 00:51:02.560
And so, of course,
he leads the WebKit project

00:51:02.560 --> 00:51:04.830
now and he also was leader of
the Blue Minis on System 7.

00:51:05.090 --> 00:51:06.750
And Trey Madison,
all he did was invent apps.

00:51:06.760 --> 00:51:07.690
He invented the WebKit.

00:51:07.760 --> 00:51:12.760
So I found those two guys and I said,
"Guys, you got to help me here." Right?

00:51:12.760 --> 00:51:16.670
And all I was smart enough to do was to
find the smart people and they introduced

00:51:16.670 --> 00:51:20.660
this notion of a visible position,
a new physical construct.

00:51:20.760 --> 00:51:23.280
It was only a position
that when you arrowed,

00:51:23.280 --> 00:51:26.670
you had an iterator on the
visible position that would just

00:51:26.670 --> 00:51:28.760
go to the next visible position.

00:51:28.760 --> 00:51:33.180
And all of that smarts which used to
be sprinkled out through the system got

00:51:33.180 --> 00:51:35.750
gathered up into one physical notion.

00:51:35.760 --> 00:51:36.760
And it made sense.

00:51:36.760 --> 00:51:38.980
It made the whole sort
of chemistry change,

00:51:38.980 --> 00:51:42.320
the whole physics and chemistry
balance of the system and made

00:51:42.320 --> 00:51:45.750
it actually possible to get
that code written correctly.

00:51:47.130 --> 00:51:51.280
Again, that was a whole story having
to do with reevaluating a basic

00:51:51.320 --> 00:51:56.430
decision after living with it
for a while at the habits point.

00:51:56.440 --> 00:51:58.120
So now, what do you really wind up with?

00:51:58.170 --> 00:51:59.240
What does this wind up looking like?

00:51:59.240 --> 00:52:01.570
You've got your basics,
you go and you do your basics,

00:52:01.640 --> 00:52:03.920
you kind of get down to the bottom
here and you just go back to the

00:52:03.920 --> 00:52:05.800
beginning at some later point.

00:52:05.940 --> 00:52:09.800
If you remember that image that
I told you to burn into your memory,

00:52:09.800 --> 00:52:14.430
you wound up having this sort
of exploded spaghetti factory,

00:52:14.430 --> 00:52:16.840
sort of chemistry.

00:52:17.030 --> 00:52:19.530
You know,
you probably want to reevaluate that at

00:52:19.570 --> 00:52:21.880
some point and this is the time to do it.

00:52:22.130 --> 00:52:25.270
When you're going back up
to the top to your basics,

00:52:25.470 --> 00:52:29.080
reevaluate your basics as a habit.

00:52:29.410 --> 00:52:29.570
Right?

00:52:29.780 --> 00:52:34.480
And I think that what that gives
is a process for long-term change.

00:52:34.620 --> 00:52:38.020
Kind of go through your basics,
live with it, and then go back to the

00:52:38.030 --> 00:52:39.060
top and start again.

00:52:39.560 --> 00:52:42.730
Maybe at the boundary of major releases,
you know,

00:52:43.010 --> 00:52:47.190
maybe when you realize that you've got
this fundamental performance problem

00:52:47.190 --> 00:52:51.100
which is just seems intractable,
maybe go back and reevaluate some

00:52:51.170 --> 00:52:54.700
of your basic notions about how your
software works and maybe that's the way

00:52:54.900 --> 00:52:58.090
to get through and solve the problem.

00:52:58.580 --> 00:53:01.680
And so that's the last habit.

00:53:01.780 --> 00:53:07.160
And so, right, that gets us to basics,
the fundamental choices you make,

00:53:07.360 --> 00:53:09.960
and habits, the things you do every day.

00:53:09.960 --> 00:53:13.620
And as I said,
hopefully that gives you some ideas

00:53:13.620 --> 00:53:16.500
for building your software to last.

00:53:16.670 --> 00:53:17.720
And that's it.

00:53:17.720 --> 00:53:19.600
Thank you very much.