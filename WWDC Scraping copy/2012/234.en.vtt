WEBVTT

00:00:11.030 --> 00:00:14.700
Welcome to our WWDC 2012
printing session.

00:00:14.700 --> 00:00:15.900
I'm Howard Miller.

00:00:15.900 --> 00:00:18.210
I'm the engineering manager for printing.

00:00:18.400 --> 00:00:23.500
And I'm going to lead you through
printing systems on Mac OS X and

00:00:24.110 --> 00:00:27.410
iOS and talk about AirPrint.

00:00:28.060 --> 00:00:30.390
So we'll start with an
overview of AirPrint,

00:00:30.390 --> 00:00:32.220
our technology for printing.

00:00:32.220 --> 00:00:36.800
We're going to cover very
briefly Mac OS X printing.

00:00:36.800 --> 00:00:40.020
We're going to spend a fair
amount of time on iOS printing,

00:00:40.020 --> 00:00:44.770
which should help any iOS developer bring
quality printing to their application.

00:00:44.840 --> 00:00:48.030
Then we're going to show you some
of the tools that we've developed

00:00:48.140 --> 00:00:51.760
that should help you debug printing
applications on both platforms.

00:00:51.760 --> 00:00:54.210
So let's start with our
printing architecture.

00:00:54.340 --> 00:00:59.320
Early in the days of Mac OS X,
we introduced... the most advanced

00:00:59.950 --> 00:01:02.200
printing system on the planet.

00:01:02.290 --> 00:01:07.230
We provided two sets of rich APIs,
Carbon and Cocoa, for your application.

00:01:07.380 --> 00:01:10.020
We provided a comprehensive
printing system,

00:01:10.360 --> 00:01:13.870
which wraps up the graphics
capability of the Mac in a way that

00:01:13.900 --> 00:01:15.590
allows you to print that content.

00:01:15.640 --> 00:01:18.460
We layered it on a
world-class spooling system.

00:01:18.460 --> 00:01:21.980
Many of you know that we use CUPS,
the Common Unix printing system.

00:01:22.160 --> 00:01:26.660
And then we've provided a plethora
of third-party printer drivers.

00:01:26.660 --> 00:01:31.050
In fact, Apple,
Apple ships via software updates over

00:01:31.170 --> 00:01:34.670
three gigabytes of software drivers.

00:01:34.950 --> 00:01:39.640
Starting in Lion,
we introduced AirPrint to Mac OS X,

00:01:39.700 --> 00:01:41.930
which allows you to
print without drivers.

00:01:41.930 --> 00:01:45.900
In Mountain Lion,
we now prefer that as our

00:01:45.900 --> 00:01:49.920
default printing path,
so you will get driverless

00:01:49.920 --> 00:01:52.090
printing on Mac OS X.

00:01:52.100 --> 00:01:54.930
For iOS,
we brought the best of the printing

00:01:55.040 --> 00:01:57.480
system and our spooling system over.

00:01:57.480 --> 00:02:02.370
We used the same AirPrint architecture,
and we provided a thin set of APIs,

00:02:02.420 --> 00:02:06.960
which will allow your apps to
easily and quickly adopt printing.

00:02:06.960 --> 00:02:10.420
And that's where the bulk of
today's presentation will be spent.

00:02:12.160 --> 00:02:17.610
So on the OS X printing system,
we provide an interesting

00:02:17.610 --> 00:02:19.360
user experience.

00:02:19.450 --> 00:02:21.690
We provide a simple mode by default.

00:02:21.840 --> 00:02:24.520
Users get the essentials
of what they need to print.

00:02:24.520 --> 00:02:28.270
There's a more options,
show details view where you now

00:02:28.410 --> 00:02:32.480
have a huge number of options
that can go in front of the user.

00:02:33.380 --> 00:02:36.210
About half of the users
stay in the simple mode,

00:02:36.210 --> 00:02:38.490
the other half go to the advanced mode.

00:02:38.650 --> 00:02:41.290
Starting in Mountain Lion,
as I mentioned,

00:02:41.300 --> 00:02:45.420
we will default for AirPrint printers
to the AirPrint architecture,

00:02:45.460 --> 00:02:48.000
which means no drivers are necessary.

00:02:48.000 --> 00:02:51.240
If you use the legacy path,
you have an older printer,

00:02:51.240 --> 00:02:55.620
we will continue to automatically
download the drivers for the user.

00:02:57.810 --> 00:03:02.580
The OS X printing experience is
great for application developers.

00:03:02.650 --> 00:03:05.050
It is flexible and powerful.

00:03:05.050 --> 00:03:08.020
And if you want to know more about it,
your best bet is to go

00:03:08.190 --> 00:03:11.810
on to the developer site,
look at our sample code or buy just

00:03:11.810 --> 00:03:15.600
about any book on OS X programming
and they'll cover printing.

00:03:15.600 --> 00:03:17.820
We're only going to touch
on it briefly today.

00:03:19.120 --> 00:03:22.530
The OS was designed from the
ground up to be easy to use.

00:03:22.620 --> 00:03:25.610
We wanted the user to be
able to get consistent,

00:03:25.750 --> 00:03:28.470
high quality output
without messing it up.

00:03:29.790 --> 00:03:33.140
Too many options on other printing
systems make it too hard for the

00:03:33.140 --> 00:03:34.310
user to get the wrong options.

00:03:34.310 --> 00:03:37.970
No drivers, there's no queues to set up,
you pick your printer and print.

00:03:37.980 --> 00:03:41.400
In fact, you see here all of the
options that we make available

00:03:41.400 --> 00:03:43.060
at print time to the users.

00:03:43.060 --> 00:03:47.450
People often ask me, well,
how does the user pick the paper size?

00:03:48.160 --> 00:03:51.270
And it may not have dawned on you,
but the user picks the paper size down

00:03:51.270 --> 00:03:53.330
at Staples when they bought their paper.

00:03:53.330 --> 00:03:58.080
Why at print time do they need to
tell your application or the printing

00:03:58.170 --> 00:04:01.020
system what size paper they are using?

00:04:01.020 --> 00:04:04.630
AirPrint and the architecture
on iOS takes care of that.

00:04:04.730 --> 00:04:08.700
The printer will tell us what paper
size is loaded and at print time

00:04:08.700 --> 00:04:12.220
we will tell your application,
render for that size.

00:04:12.300 --> 00:04:16.530
Smarter, more intelligent and
easier to use for the user.

00:04:16.540 --> 00:04:18.140
And then we still provide the user
with the best possible printer.

00:04:18.180 --> 00:04:22.180
We also provide for you an easy,
simple way to add printing

00:04:22.180 --> 00:04:24.300
to your application.

00:04:24.350 --> 00:04:27.760
It is flexible and powerful and
produces the same great quality

00:04:27.760 --> 00:04:29.800
output as we get from the desktop.

00:04:31.840 --> 00:04:35.780
The AirPrint technology itself, again,
was designed to provide

00:04:35.780 --> 00:04:37.340
a great user experience.

00:04:37.450 --> 00:04:41.770
It's available on all of our
platforms starting with iOS 4.2

00:04:41.960 --> 00:04:45.640
and in Mac OS X starting with Lion.

00:04:45.740 --> 00:04:49.290
It's standards based and it
is a zero cost license for

00:04:49.290 --> 00:04:51.560
all printer manufacturers.

00:04:51.650 --> 00:04:57.170
As you know, we started in 2010
shipping printers from HP.

00:04:57.380 --> 00:05:01.440
For those who are following, 2011,
several other major manufacturers

00:05:01.440 --> 00:05:06.240
came online and we have licensed every
major manufacturer on the planet,

00:05:06.680 --> 00:05:08.580
including some of the
reference companies.

00:05:08.580 --> 00:05:13.510
CSR makes reference platforms for other
printer companies and they will provide

00:05:13.510 --> 00:05:17.630
a complete AirPrint solution if you
want to do a printer with AirPrint.

00:05:18.990 --> 00:05:23.480
Speaking of AirPrint printers,
it's pretty much been raining AirPrint

00:05:23.480 --> 00:05:27.910
printers this year and by June 1st,
we have over 75 million

00:05:27.910 --> 00:05:29.990
AirPrint printers sold.

00:05:29.990 --> 00:05:35.180
If you go into your favorite
electronics store and you buy a printer,

00:05:35.340 --> 00:05:40.090
you may not even realize it,
but the vast majority of consumer ink

00:05:40.210 --> 00:05:46.110
jets and laser printers are AirPrint and
AirPrint is expanding into the larger

00:05:46.110 --> 00:05:47.800
lasers and wider formats as we see.

00:05:47.800 --> 00:05:47.900
Thank you.

00:05:48.650 --> 00:06:00.370
Thank you.

00:06:01.810 --> 00:06:05.270
As you design your application,
you're going to take care of all your

00:06:05.270 --> 00:06:07.990
user requirements and you probably,
as you get to the end,

00:06:07.990 --> 00:06:09.380
start thinking about printing.

00:06:09.380 --> 00:06:11.440
Maybe you think about
it at the beginning,

00:06:11.440 --> 00:06:14.030
that's why you're here,
and we thank you for that.

00:06:14.060 --> 00:06:19.700
A print experience is designed for paper,
not for the display.

00:06:19.860 --> 00:06:24.840
An 8.5 by 11 piece of paper has
higher resolution than even our

00:06:24.920 --> 00:06:27.500
new MacBook Pro Retina display.

00:06:27.500 --> 00:06:29.260
You have to plan ahead.

00:06:29.270 --> 00:06:33.100
You have to provide your assets
in a form that's of high quality.

00:06:33.100 --> 00:06:35.890
You should draw with vector when you can.

00:06:35.890 --> 00:06:40.010
You should make sure that you
provide the correct size icons.

00:06:40.140 --> 00:06:43.960
You can archive all that so
it's not taking a lot of space.

00:06:44.060 --> 00:06:47.120
But plan ahead for paper.

00:06:47.120 --> 00:06:50.110
And I just have to come
back to the big point.

00:06:50.360 --> 00:06:54.110
WYSIWYG was so 1985.

00:06:54.620 --> 00:06:57.200
In today's world,
design your app for the screen

00:06:57.310 --> 00:06:59.250
real estate and make it look great.

00:07:00.030 --> 00:07:03.430
And then design your output for
paper and make it look great.

00:07:03.430 --> 00:07:05.620
Those two are not going to be the same.

00:07:06.620 --> 00:07:10.500
Here is a great application, Quicksail.

00:07:10.680 --> 00:07:13.620
Great user experience
they've put forth here.

00:07:13.620 --> 00:07:16.600
On the screen,
they've made great use of all

00:07:16.600 --> 00:07:17.960
the real estate of the iPad.

00:07:17.960 --> 00:07:19.640
You can select what items.

00:07:19.640 --> 00:07:22.010
It makes sort of a punch list,
gives you the price.

00:07:22.080 --> 00:07:23.350
You can put in discounts.

00:07:23.390 --> 00:07:24.400
It gives you the tax.

00:07:24.560 --> 00:07:27.370
A total is there,
but you're not going to give

00:07:27.410 --> 00:07:30.940
your customer the iPad and say,
here, mail me a check.

00:07:30.940 --> 00:07:34.890
No, you're going to mail your
customer an actual invoice.

00:07:34.900 --> 00:07:38.360
And this is a... An invoice,
they took the same information

00:07:38.360 --> 00:07:39.580
that you see on the screen.

00:07:39.580 --> 00:07:42.680
They formatted it for
print onto this invoice,

00:07:42.680 --> 00:07:44.470
which demands payment.

00:07:44.480 --> 00:07:47.850
So, as you're working on your app,
design it for the screen,

00:07:47.960 --> 00:07:49.320
make it beautiful.

00:07:49.320 --> 00:07:51.700
And when you go to print,
design it for print

00:07:51.700 --> 00:07:53.140
and make it beautiful.

00:07:55.010 --> 00:08:01.170
Let me talk just briefly
about OSX printing.

00:08:02.330 --> 00:08:02.880
There are no changes.

00:08:02.880 --> 00:08:05.580
So if you have an app
that prints on Mac OS X,

00:08:05.580 --> 00:08:08.320
it should continue to
print on Mac OS X today.

00:08:08.320 --> 00:08:13.440
I would, however, ask you to think about
what APIs you were using.

00:08:13.440 --> 00:08:16.460
The OS has gotten pretty
mature at this point,

00:08:16.460 --> 00:08:21.480
and many APIs throughout the entire
operating system have been deprecated,

00:08:21.530 --> 00:08:25.590
and we continue to see some
of these deprecated APIs used.

00:08:25.660 --> 00:08:29.680
So take your application,
recompile it on a clean version

00:08:29.750 --> 00:08:33.300
of Xcode on Mountain Lion,
and all of those warnings

00:08:33.300 --> 00:08:36.010
or errors that you get,
fix those.

00:08:36.040 --> 00:08:37.620
It's not just going to be printing.

00:08:37.750 --> 00:08:40.890
It may be across your application
if it's an older application.

00:08:40.890 --> 00:08:41.680
Clean it up.

00:08:41.680 --> 00:08:45.200
Make sure your app remains modern,
because some of these APIs do

00:08:45.200 --> 00:08:47.620
disappear in future versions of the OS.

00:08:47.620 --> 00:08:50.390
So that's everything you
need to know about Mac OS X.

00:08:50.540 --> 00:08:53.400
Go buy a quality book or go
to our developer website.

00:08:53.400 --> 00:08:56.350
If you have an existing app,
just recompile it.

00:08:56.410 --> 00:08:57.790
Make sure life still looks good.

00:08:57.800 --> 00:09:01.040
With that, we're going to get to the
focus of today's meeting,

00:09:01.040 --> 00:09:06.380
which is what does it take to make
your iOS app print beautifully?

00:09:06.380 --> 00:09:09.220
And with that,
I'm going to bring up Paul Danbold,

00:09:09.220 --> 00:09:11.520
who will drive you through
the details of our API.

00:09:11.520 --> 00:09:14.840
So Howard had one slide on OS X printing.

00:09:14.840 --> 00:09:17.180
I've got a few more to
talk about iOS printing.

00:09:17.180 --> 00:09:22.960
But let me start with just
emphasizing a point that Howard made,

00:09:22.960 --> 00:09:24.920
and that is iOS printing is easy.

00:09:24.920 --> 00:09:27.840
Easy for users,
because a few taps on screen gets what

00:09:27.840 --> 00:09:29.320
they want from your apps onto paper.

00:09:29.320 --> 00:09:32.760
But easy for you,
because with a few well-designed

00:09:32.850 --> 00:09:35.490
APIs and a very little bit of code,
which we'll see in a few minutes,

00:09:35.580 --> 00:09:39.050
you can add supporting to your apps,
printing support to your apps.

00:09:41.700 --> 00:09:45.250
So a quick rundown of the
UIKit printing classes.

00:09:45.650 --> 00:09:47.200
This won't take a moment.

00:09:47.260 --> 00:09:51.230
The print interaction controller is
the controller for running a print job.

00:09:51.310 --> 00:09:53.650
It has the methods to bring up
the user interface for printing.

00:09:53.650 --> 00:09:56.360
It brings together the
metadata for any print job,

00:09:56.460 --> 00:09:57.980
the content to be printed.

00:09:57.980 --> 00:10:00.410
It has a couple of informational classes.

00:10:01.200 --> 00:10:04.720
UI Print Info encapsulates
information about any print job,

00:10:04.720 --> 00:10:09.090
its name, whether the job's coming out
portrait or landscape orientation,

00:10:09.150 --> 00:10:12.580
one-sided, two-sided,
and those sort of settings.

00:10:12.580 --> 00:10:16.800
And then you have UI Print Paper,
which describes basically a sheet

00:10:16.850 --> 00:10:21.270
of paper and the printer's hardware
margins for that paper size.

00:10:21.310 --> 00:10:24.400
And the hardware margins dictate
where you can draw your content.

00:10:26.440 --> 00:10:30.950
We have these formatter classes that
know how to deal with simple text,

00:10:30.950 --> 00:10:33.180
markup text, web views, and text views.

00:10:33.180 --> 00:10:35.940
And you'll use those for
that kind of content.

00:10:36.070 --> 00:10:39.200
And then last on this list,
we have UIPrintPageRenderer.

00:10:39.320 --> 00:10:40.980
It's an abstract base class.

00:10:41.130 --> 00:10:45.750
You'll subclass it when you want to
take full control over page layout.

00:10:46.900 --> 00:10:49.070
Here's how you print.

00:10:49.310 --> 00:10:50.260
Pretty straightforward.

00:10:50.300 --> 00:10:51.910
You get the print interaction controller.

00:10:51.930 --> 00:10:55.170
It's a shared object,
so no need to allocate it.

00:10:56.160 --> 00:10:58.760
You set on the controller the
content you want to print.

00:10:58.860 --> 00:11:03.140
This could be as simple as providing
a PDF file or a JPEG image.

00:11:03.250 --> 00:11:06.400
It could be one of the formatter objects
that we mentioned on the previous slide,

00:11:06.490 --> 00:11:09.980
or it could be a custom page
renderer that you created.

00:11:10.610 --> 00:11:12.140
You tell us about the output type.

00:11:12.300 --> 00:11:15.860
This is very important because the
settings appropriate for printing,

00:11:15.860 --> 00:11:17.360
let's say,
a photo are very different from the

00:11:17.450 --> 00:11:19.780
settings appropriate for printing,
let's say,

00:11:19.780 --> 00:11:22.530
a web page or a simple text document.

00:11:22.690 --> 00:11:25.400
You give every print
job a meaningful name,

00:11:25.400 --> 00:11:28.920
a user-visible name,
in case the user wants to find that

00:11:29.040 --> 00:11:31.490
job in the print queue on the device.

00:11:31.860 --> 00:11:34.820
and last you present the UI for printing,
or you tell us to present

00:11:34.820 --> 00:11:35.940
the UI for printing.

00:11:35.940 --> 00:11:38.590
From there we handle
interaction with the user,

00:11:38.590 --> 00:11:41.560
prepare the print job,
talk to the printer to get it processed.

00:11:41.620 --> 00:11:44.310
Now in iOS 6 you can use the
activity view control for printing,

00:11:44.310 --> 00:11:46.820
and I'll talk about that later,
and in that case the steps

00:11:46.820 --> 00:11:51.890
are a little different,
but for the most part you'll be following

00:11:51.890 --> 00:11:55.280
this sequence to print your content.

00:11:56.080 --> 00:11:59.440
Here's a little bit of code
to show you what's involved.

00:11:59.440 --> 00:12:01.460
We're going to print a PDF.

00:12:01.510 --> 00:12:05.670
It's a good idea to check before
you proceed down the rest of the

00:12:05.960 --> 00:12:08.400
code here that the content you're
going to provide us to print is,

00:12:08.400 --> 00:12:09.320
in fact, printable.

00:12:09.320 --> 00:12:12.460
So if you provide us something
in an unrecognized format

00:12:12.460 --> 00:12:16.520
or the data is corrupted,
for example, there's no point going on.

00:12:16.670 --> 00:12:20.860
But if you're okay,
you get the print interaction controller,

00:12:20.860 --> 00:12:22.110
shared object.

00:12:22.540 --> 00:12:24.520
You set on the controller
what you want to print.

00:12:24.630 --> 00:12:28.220
In this case, it's the PDF URL.

00:12:29.900 --> 00:12:32.470
You obtain a print info object
and here you can see you're

00:12:32.570 --> 00:12:35.050
setting the output type,
which is telling us about

00:12:35.120 --> 00:12:37.490
the content to be printed,
and you're setting the job

00:12:37.570 --> 00:12:40.190
name to the URL for the PDF.

00:12:40.190 --> 00:12:42.780
And you set that print
info on the controller,

00:12:42.780 --> 00:12:46.460
makes a copy of it,
and it uses that when the UI comes up

00:12:46.460 --> 00:12:48.930
and when the print job is generated.

00:12:49.740 --> 00:12:52.590
If you're going to print
a multi-page document,

00:12:52.690 --> 00:12:57.340
it's a good idea to set the show
page range option on the controller,

00:12:57.380 --> 00:13:00.570
which means that the user will see
the page range option in the printing

00:13:00.690 --> 00:13:04.840
sheet in case he or she doesn't
want to print every page in the job.

00:13:05.000 --> 00:13:08.360
And last, you tell us to bring
up the UI for printing.

00:13:08.480 --> 00:13:10.360
This is the code that
you'll use on iPhone.

00:13:10.360 --> 00:13:11.600
It'll bring up the printing sheet.

00:13:11.600 --> 00:13:14.440
If you're on the iPad,
you'll do something slightly differently.

00:13:14.620 --> 00:13:16.730
But that's all there is to it.

00:13:17.980 --> 00:13:20.000
So I mentioned output type.

00:13:20.020 --> 00:13:23.640
And if you're using OS X or
most other platforms,

00:13:23.720 --> 00:13:26.390
you're used to having a print
dialogue where the user can

00:13:26.390 --> 00:13:29.570
manually select a paper size,
a media type, a quality mode,

00:13:29.610 --> 00:13:30.180
and that sort of thing.

00:13:30.180 --> 00:13:34.730
But we like to make life a little
simpler for the user of iOS devices.

00:13:34.730 --> 00:13:38.320
And generally speaking,
your apps know what you're printing.

00:13:38.320 --> 00:13:40.470
You know that you're printing
a photo or a web page,

00:13:40.570 --> 00:13:41.260
for example.

00:13:41.360 --> 00:13:44.050
So by telling us the output type,
in other words,

00:13:44.270 --> 00:13:47.750
telling us about the content that
you're going to give us to print,

00:13:47.750 --> 00:13:51.830
we can make smart decisions about the
paper size to use for the print job,

00:13:51.860 --> 00:13:55.270
the quality mode appropriate,
and the options appropriate for

00:13:55.340 --> 00:13:57.600
printing that kind of content in the UI.

00:14:00.110 --> 00:14:03.570
We've defined three kinds
that you can specify.

00:14:03.570 --> 00:14:08.110
If you set the output type
to UIPrintInfoOutputPhoto,

00:14:08.110 --> 00:14:10.980
we tell the printer to print
in its highest quality mode.

00:14:11.010 --> 00:14:13.700
And we use a photo
paper size if available,

00:14:13.700 --> 00:14:18.980
and if the printer can print borderless,
it'll do that for this kind of content.

00:14:19.000 --> 00:14:23.100
There's no point in offering
two-sided printing for photos,

00:14:23.490 --> 00:14:26.220
and for that matter,
there's no point in offering a page

00:14:26.310 --> 00:14:31.550
range control in the interface because
it's one photo per sheet of paper.

00:14:32.030 --> 00:14:35.060
Second kind we've defined is
UI print info output general.

00:14:35.080 --> 00:14:38.890
So a web page falls into this category,
mixed text and graphics.

00:14:38.890 --> 00:14:41.470
And for this kind of content,
there's no point in asking the printer

00:14:41.560 --> 00:14:43.260
to print in its highest quality mode.

00:14:43.280 --> 00:14:48.020
And the paper size associated, sorry,
paper size appropriate for this kind

00:14:48.020 --> 00:14:50.400
of content would be letter or A4.

00:14:51.920 --> 00:14:54.320
If the user selected
printer has a duplexer,

00:14:54.490 --> 00:14:57.760
we enable the user to pick
one-sided or two-sided output.

00:14:57.760 --> 00:15:00.640
And if you set the page range
option on the controller,

00:15:00.640 --> 00:15:03.660
we allow the user to pick a
page range for the print job.

00:15:06.230 --> 00:15:09.860
The third kind is
UI PrintInfo output grayscale.

00:15:09.870 --> 00:15:12.870
This may be the best option
to use if you know there's no

00:15:12.870 --> 00:15:14.640
color content to be printed.

00:15:14.790 --> 00:15:19.450
We ask the printer to print in
a faster print speed in a way

00:15:19.450 --> 00:15:22.340
that reduces ink or toner usage.

00:15:22.540 --> 00:15:25.180
Document page size makes
sense in this case,

00:15:25.180 --> 00:15:28.310
so again letter or A4,
and we conditionally enable

00:15:28.380 --> 00:15:32.590
duplex and page range as we did
with UI PrintInfo output general.

00:15:34.690 --> 00:15:39.080
We can find out from any printer
which paper sizes it supports,

00:15:39.080 --> 00:15:41.830
but that's a very different matter
from actually knowing what paper

00:15:41.830 --> 00:15:44.000
sizes are loaded at print time.

00:15:44.150 --> 00:15:49.250
We're actually working with the printer
manufacturers to bring to market printers

00:15:49.250 --> 00:15:54.240
that can sense and report to us the sizes
of papers loaded in the paper trays.

00:15:54.450 --> 00:15:59.260
When they do that, we can, in many cases,
just automatically pick the correct

00:15:59.410 --> 00:16:01.700
paper size to use for a print job.

00:16:01.820 --> 00:16:06.000
Or, in some cases,
we can present to the user the available

00:16:06.000 --> 00:16:08.700
paper sizes to choose for a print job.

00:16:08.700 --> 00:16:11.610
And we do this in the
case of printing photos.

00:16:13.040 --> 00:16:14.760
I mentioned job name a few slides ago.

00:16:14.760 --> 00:16:21.440
So the user can see the queued
jobs on their device and they can

00:16:21.440 --> 00:16:22.940
get information about any job.

00:16:23.140 --> 00:16:26.950
So it's helpful if you help
your users identify print

00:16:26.970 --> 00:16:29.060
jobs that came from your app.

00:16:31.090 --> 00:16:36.110
So the code example we had for
printing a PDF was an example

00:16:36.110 --> 00:16:38.520
of what we call printing items.

00:16:38.570 --> 00:16:40.950
And printing items means printing
content that's already in a

00:16:40.950 --> 00:16:42.620
format well suited for printing.

00:16:42.750 --> 00:16:45.570
So that's PDF, JPEG,
other image types that

00:16:45.720 --> 00:16:47.950
ImageIO knows how to support.

00:16:48.050 --> 00:16:51.960
All you have to do is set one of those
items on the interaction controller,

00:16:52.080 --> 00:16:54.190
tell us the output type,
give the print job a name,

00:16:54.310 --> 00:16:56.790
and we take care of the rest for you.

00:16:57.070 --> 00:17:01.590
If you're pulling a picture out of the
photo library with the image picker,

00:17:01.970 --> 00:17:04.300
you don't even need to load
the image into your app,

00:17:04.370 --> 00:17:06.120
just send us the URL.

00:17:06.390 --> 00:17:09.210
And you can hand us an
array of items to print.

00:17:09.320 --> 00:17:12.620
And the array doesn't even have to
contain all items of the same format.

00:17:12.710 --> 00:17:15.760
And we'll print one,
each one of those items in the

00:17:16.090 --> 00:17:18.310
array as a print job in itself.

00:17:19.970 --> 00:17:21.800
So, four matters.

00:17:21.920 --> 00:17:26.910
This is all about printing simple text,
HTML, markup text, web views,

00:17:27.000 --> 00:17:28.950
and text views.

00:17:30.000 --> 00:17:32.400
As you probably know,
if you've got that kind of

00:17:32.400 --> 00:17:35.060
content and you're trying to
draw it into a particular area,

00:17:35.060 --> 00:17:39.020
let's say a particular paper size,
a particular page orientation,

00:17:39.020 --> 00:17:43.350
it's a lot of work to figure out where to
do your line breaks and your page breaks.

00:17:43.380 --> 00:17:46.170
But formatters take care of
all that complexity for you.

00:17:46.180 --> 00:17:49.950
You can use a formatter standalone,
setting it on a print interaction

00:17:49.950 --> 00:17:53.150
controller if you've just got,
say, a plain text document to

00:17:53.320 --> 00:17:55.000
print or a web page to print.

00:17:55.030 --> 00:17:58.790
Or you can associate formatters
with print page renderers.

00:17:59.780 --> 00:18:02.210
And I'll talk about
that in a few minutes.

00:18:02.600 --> 00:18:06.270
If you want to use a
simple text formatter,

00:18:06.550 --> 00:18:08.880
setting it on the print
interaction controller,

00:18:08.880 --> 00:18:13.100
you get to choose the font, the color,
the text alignment.

00:18:13.100 --> 00:18:15.730
And if you're using the
markup text formatter,

00:18:15.730 --> 00:18:19.390
you're using the same HTML rendering
engine that Safari uses.

00:18:20.570 --> 00:18:23.440
Again, not a lot of code involved.

00:18:23.440 --> 00:18:25.100
We've got the
Print Interaction Controller,

00:18:25.210 --> 00:18:28.640
and here you're creating
a markup text formatter,

00:18:28.770 --> 00:18:33.040
handing it maybe some HTML that
you generated or was downloaded,

00:18:33.130 --> 00:18:34.090
for example.

00:18:34.200 --> 00:18:36.640
You set it on the controller.

00:18:36.820 --> 00:18:40.590
You set up your PrintInfo object
and put that on the controller.

00:18:41.130 --> 00:18:44.640
Tell us to bring up the UI,
and that's all there is to it.

00:18:44.640 --> 00:18:45.330
Almost no code.

00:18:47.910 --> 00:18:51.180
Just a couple of diagrams to
talk about where the formatters

00:18:51.180 --> 00:18:52.610
lay out their content.

00:18:52.660 --> 00:18:54.880
So we've got the paper rect,
which represents the

00:18:54.990 --> 00:18:57.950
physical sheet of paper,
origin 00.

00:18:57.950 --> 00:19:00.100
And inside there,
you've got the printable rect,

00:19:00.180 --> 00:19:02.310
which is the area dictated
by the printer's hardware

00:19:02.310 --> 00:19:03.740
margins for that paper size.

00:19:04.360 --> 00:19:07.690
And by default,
the formatter is going to draw its

00:19:08.050 --> 00:19:10.220
content into that printable rect.

00:19:10.270 --> 00:19:14.840
But you can adjust the area in which
the formatter draws its content.

00:19:14.840 --> 00:19:18.470
And there's a few cases where
you might want to do that.

00:19:18.530 --> 00:19:22.470
And the most common one is where
you're using formatters in conjunction

00:19:22.470 --> 00:19:24.110
with a print page renderer.

00:19:24.110 --> 00:19:27.890
And you want formatters maybe to
draw their given content in assigned

00:19:27.990 --> 00:19:32.050
little rectangles at various parts
of various pages in the print job.

00:19:33.380 --> 00:19:37.050
When you're doing something like that,
you need to constrain the area in

00:19:37.050 --> 00:19:39.200
which the formatter does its drawing.

00:19:39.200 --> 00:19:41.440
And you can do that with content insets.

00:19:41.540 --> 00:19:44.730
And as you can see here,
you can specify a top, left,

00:19:44.900 --> 00:19:47.500
and right inset from the printable rect.

00:19:47.590 --> 00:19:50.360
And the formatter will start
drawing into that rectangle.

00:19:50.360 --> 00:19:53.570
But you don't set the bottom inset,
because the formatter will

00:19:53.690 --> 00:19:56.430
carry on drawing until it gets
to the end of its content,

00:19:56.430 --> 00:19:59.100
which may involve going
over multiple pages.

00:19:59.100 --> 00:20:04.780
And note that the top inset applies
to... just the first page on which the

00:20:04.780 --> 00:20:07.600
formatter starts doing its drawing.

00:20:07.750 --> 00:20:10.950
I was talking about using formatters
for simple text and markup text,

00:20:11.170 --> 00:20:14.340
but you can also use formatters
for web views and text views.

00:20:14.470 --> 00:20:17.080
And it's as simple as,
as you can see here in the code,

00:20:17.230 --> 00:20:20.000
just asking for a view
print formatter for,

00:20:20.470 --> 00:20:21.860
in this case, a web view.

00:20:22.010 --> 00:20:25.600
And once you've got that formatter,
you set it on the print interaction

00:20:25.600 --> 00:20:29.580
controller and it's the same kind
of code as you've seen before.

00:20:29.870 --> 00:20:31.660
All very straightforward.

00:20:31.910 --> 00:20:34.770
You can ask for a view print
format of other kinds of views and

00:20:34.770 --> 00:20:38.280
we'll return a generic formatter,
but generally that wouldn't

00:20:38.290 --> 00:20:40.200
be the recommended technique.

00:20:40.290 --> 00:20:43.620
It would be better to use a
print page renderer and do the

00:20:43.620 --> 00:20:45.730
drawing of those views yourself.

00:20:47.700 --> 00:20:52.780
So, formatters are for simple text,
markup text, web views, and text views.

00:20:53.230 --> 00:20:55.090
Print page renderers.

00:20:55.090 --> 00:20:59.100
So, you know, Howard was talking about
designing for paper.

00:20:59.100 --> 00:21:03.800
You know,
what you present on screen doesn't

00:21:03.800 --> 00:21:06.270
necessarily make sense or doesn't
necessarily take full advantage

00:21:06.270 --> 00:21:07.460
of what you can put on paper.

00:21:07.460 --> 00:21:09.920
And for that matter,
the way you present your content

00:21:09.920 --> 00:21:12.940
on iPhone screen may be different
from what you do on the iPad.

00:21:12.940 --> 00:21:15.350
So for paper,
you want to think about the best

00:21:15.440 --> 00:21:17.120
way to present your content.

00:21:17.640 --> 00:21:20.360
And when it comes to taking
full control of a page layout,

00:21:20.360 --> 00:21:22.980
this is where print page
renderers come into play.

00:21:24.940 --> 00:21:29.130
They give you full drawing control,
in other words, full control over what

00:21:29.130 --> 00:21:31.640
goes where on the paper.

00:21:32.060 --> 00:21:36.430
And what you'll do is you'll subclass
the UI print page renderer base class

00:21:36.540 --> 00:21:39.000
to create a custom page drawing object.

00:21:39.000 --> 00:21:41.000
And we're going to ask
you to do two things.

00:21:41.000 --> 00:21:44.780
One, calculate and tell us how many pages
are going to be in the print job.

00:21:45.110 --> 00:21:49.020
And two, we're going to call you to draw
each page in the print job.

00:21:49.900 --> 00:21:53.480
We let you designate an area
at the top and bottom of every

00:21:53.700 --> 00:21:56.340
page if you want to draw,
for example, a header,

00:21:56.340 --> 00:21:59.870
a title string at the top of every page,
and a page number at the

00:21:59.870 --> 00:22:01.310
bottom of every page.

00:22:01.750 --> 00:22:06.940
And we let you assign formaters
to a print page renderer.

00:22:06.940 --> 00:22:10.400
You can have multiple formaters
all drawing their given content

00:22:10.400 --> 00:22:12.380
in various places on the page.

00:22:12.430 --> 00:22:16.430
And if you specified headers and footers,
we'll make sure the formaters

00:22:16.600 --> 00:22:20.190
don't draw into the areas reserved
for those headers and footers.

00:22:21.210 --> 00:22:22.040
Here's what you'll do.

00:22:22.160 --> 00:22:24.630
You'll subclass UI print page renderer.

00:22:24.870 --> 00:22:27.470
It's got a lot of functionality,
but you're going to need to

00:22:27.470 --> 00:22:29.020
override number of pages.

00:22:29.140 --> 00:22:34.640
When the user picks the printer,
you've told us the output type,

00:22:34.690 --> 00:22:37.940
we'll select a paper size
appropriate for the content,

00:22:37.990 --> 00:22:40.650
and we'll return to you that
paper rect and printable rect.

00:22:40.810 --> 00:22:43.850
You know your content,
you calculate and tell us how many

00:22:43.850 --> 00:22:46.120
pages are going to be in the print job.

00:22:46.170 --> 00:22:50.020
and then you're going to implement
draw content for page at index in Rect.

00:22:50.020 --> 00:22:53.940
That's where we're going to call you
to draw each page in the print job.

00:22:54.020 --> 00:22:57.180
And having created your
custom print page renderer,

00:22:57.180 --> 00:23:00.640
you're going to set it on the controller
just in the same way as you saw before

00:23:00.640 --> 00:23:04.970
when we were putting a format or
printing item on the controller.

00:23:06.770 --> 00:23:08.770
Another diagram,
so we have the paper rect,

00:23:08.910 --> 00:23:12.660
the printable rect, and optionally,
you can specify a header

00:23:12.660 --> 00:23:14.700
height and a footer height.

00:23:14.860 --> 00:23:19.020
And those are either for you to draw
your titles and your page numbers,

00:23:19.020 --> 00:23:24.910
or just to impose a top and
bottom margin on every page that's

00:23:24.910 --> 00:23:29.700
maybe larger than the hardware
margins dictated by the printer.

00:23:30.060 --> 00:23:34.150
Between the header and the footer,
you've got the content rect.

00:23:36.380 --> 00:23:39.460
and set the stage for
a little bit of code.

00:23:39.500 --> 00:23:41.940
We won't have a header and
a footer in this example.

00:23:42.010 --> 00:23:44.280
We've just got a bunch
of graphics to draw,

00:23:44.330 --> 00:23:46.810
like a table view, down the page.

00:23:46.810 --> 00:23:51.390
And to make our code simple,
all those items have the same height.

00:23:52.380 --> 00:23:56.300
Here's your print page renderer.

00:23:56.300 --> 00:23:59.750
We've got a method here that
we're going to call to draw each

00:23:59.760 --> 00:24:03.400
graphic going down the page.

00:24:03.530 --> 00:24:06.240
Because each one of those
graphics has got the same height,

00:24:06.290 --> 00:24:10.500
we can easily calculate just
once how many can fit on a page.

00:24:10.590 --> 00:24:13.280
Then we've got the methods
we're going to override:

00:24:13.330 --> 00:24:16.690
number of pages and draw content
for page at index in rect.

00:24:16.810 --> 00:24:18.980
Here are the overrides.

00:24:19.620 --> 00:24:23.290
We don't have a header or a footer,
so we just divide the height

00:24:23.290 --> 00:24:27.040
of those graphics into the
height of the printable rect.

00:24:27.070 --> 00:24:29.240
We know how many items
we've got to print,

00:24:29.370 --> 00:24:32.780
so we can calculate how
many pages in the print job.

00:24:33.170 --> 00:24:39.030
In the override for draw page at index,
sorry, draw content for page at index,

00:24:39.030 --> 00:24:42.230
you need to set the clip to
the content rect because we

00:24:42.300 --> 00:24:44.940
don't clip by default for you.

00:24:45.000 --> 00:24:49.860
And then you're going to be calling your
method to draw each of those graphics,

00:24:49.970 --> 00:24:52.410
one after the other,
iterating through the

00:24:52.480 --> 00:24:55.950
array along the way,
calculating the offset relative

00:24:55.990 --> 00:24:58.160
to the origin of the content rect.

00:24:58.360 --> 00:25:00.680
Again, not a lot of code.

00:25:02.160 --> 00:25:07.790
The PrintPageRenderer class has got a
number of methods that you can override.

00:25:07.870 --> 00:25:11.540
Draw page at index in Rect
is the main entry point.

00:25:11.560 --> 00:25:14.440
And most apps won't
want to override this.

00:25:14.570 --> 00:25:16.870
But if you wanted to take
complete control of drawing

00:25:16.970 --> 00:25:19.730
everything on the page,
you could override draw

00:25:19.730 --> 00:25:21.000
page at index in Rect.

00:25:21.250 --> 00:25:24.130
Otherwise,
it's going to invoke the methods

00:25:24.130 --> 00:25:27.950
listed below in the order
in which I've listed them.

00:25:29.330 --> 00:25:33.390
If you set a header height and if
your print page renderer subclass

00:25:33.470 --> 00:25:39.210
implements drawHeaderForPageredIndex,
then we'll call you to draw that

00:25:39.210 --> 00:25:41.400
title string at the top of every page.

00:25:41.400 --> 00:25:45.440
And similarly for the footer,
your subclass will implement

00:25:45.530 --> 00:25:47.820
drawFooterForPageredIndex.

00:25:49.840 --> 00:25:54.090
Most of the work is likely to happen in
draw content for page at index in Rect,

00:25:54.090 --> 00:25:57.600
and that's the code that you
saw on the previous slide.

00:25:58.660 --> 00:26:03.190
Now if you've associated formatters
with your print page renderer,

00:26:03.190 --> 00:26:06.840
the print page renderer class is
going to call draw print formatter

00:26:06.840 --> 00:26:10.160
for page at index to get the
formatters to do their work.

00:26:10.230 --> 00:26:14.540
And for the vast majority of apps,
you wouldn't override this method.

00:26:14.620 --> 00:26:19.000
But a case of when you would want
to do that is if you wanted the

00:26:19.120 --> 00:26:24.150
formatters to do their drawing and
then you wanted to draw content after,

00:26:24.210 --> 00:26:27.970
effectively on top of what
the formatters had drawn.

00:26:31.250 --> 00:26:36.050
Okay, so we've covered printing items,
using formatters, and doing custom layout

00:26:36.060 --> 00:26:37.670
with print page renderers.

00:26:37.790 --> 00:26:42.200
I'm going to talk about a few
topics that are associated with

00:26:42.200 --> 00:26:44.910
the user interface for printing.

00:26:47.190 --> 00:26:49.200
So the standard ways of
bringing up the interface for

00:26:49.200 --> 00:26:51.720
printing on the iPhone here,
you've got present animated

00:26:51.720 --> 00:26:54.920
with a completion handler to
bring up the sheet for printing.

00:26:54.920 --> 00:26:58.060
On iPad,
to bring up the popover for printing,

00:26:58.120 --> 00:27:03.250
you can either bring it up from a
location in a rectangle on a view,

00:27:03.250 --> 00:27:07.830
present from rect in view,
or from a bar button item.

00:27:09.060 --> 00:27:14.640
But maybe you want to embed our
printing UI in some UI you have.

00:27:14.640 --> 00:27:17.340
And the screenshot here
is from Apple's Pages app.

00:27:17.380 --> 00:27:19.600
And you can see it's got a
share and print nav controller

00:27:19.600 --> 00:27:22.100
with print as one of the items.

00:27:22.200 --> 00:27:27.130
So if you want to do that,
you'll implement print interaction

00:27:27.300 --> 00:27:30.290
control parent view controller,
the delegate method.

00:27:30.340 --> 00:27:33.960
When you call one of those present
methods that were on the previous slide,

00:27:34.020 --> 00:27:37.790
we'll invoke your delegate
to get the view controller.

00:27:38.300 --> 00:27:42.200
If you've got a nav controller,
we'll call it push.

00:27:42.220 --> 00:27:44.420
If it's a view controller,
we'll call it present modal.

00:27:44.420 --> 00:27:48.540
And basically what's going to happen is,
as you can see here,

00:27:48.540 --> 00:27:54.760
we'll slide our printer
options UI into your UI.

00:27:54.760 --> 00:27:57.750
The back button comes from the app,
but at this point the user can

00:27:57.860 --> 00:27:59.580
select their options to print.

00:28:00.620 --> 00:28:02.970
Now,
you've got access to our view controller,

00:28:02.970 --> 00:28:03.780
but don't peek.

00:28:03.810 --> 00:28:06.340
Don't make any assumptions
about the UI we present,

00:28:06.340 --> 00:28:09.610
because sooner or later we'll change
our UI and the consequences for

00:28:09.610 --> 00:28:11.610
your app aren't going to be good.

00:28:15.470 --> 00:28:23.320
Another thing Howard was talking
about was the fact that printing

00:28:23.320 --> 00:28:25.500
in iOS is what we call dynamic.

00:28:25.500 --> 00:28:26.690
It's not whizzy-wig.

00:28:26.770 --> 00:28:28.310
What you see is what you
get most of the time.

00:28:28.560 --> 00:28:33.400
And you're going to, for the most part,
sorry,

00:28:33.520 --> 00:28:40.330
the vast majority of apps are going
to let the user pick a printer,

00:28:40.340 --> 00:28:44.680
tell us the output type,
get back a page size,

00:28:44.700 --> 00:28:46.910
and then make your layout decisions.

00:28:46.920 --> 00:28:50.000
There's no page setup dialogue
or anything like that.

00:28:50.000 --> 00:28:54.750
But there are a few apps whose purpose
is to enable the user to create a

00:28:54.750 --> 00:28:57.580
document for a particular paper size.

00:28:58.300 --> 00:29:00.670
And this is what Pages does.

00:29:00.790 --> 00:29:05.280
So it allows the user to
choose between US letter or A4.

00:29:05.460 --> 00:29:07.740
So if you're going to
do something like this,

00:29:07.750 --> 00:29:10.530
if you want to get involved
in paper size selection,

00:29:10.560 --> 00:29:13.280
you're going to have
to provide your own UI.

00:29:13.290 --> 00:29:16.750
And you're going to have to get
involved in the process of picking

00:29:16.750 --> 00:29:21.580
from the printer's list of papers
one that's a good match for the paper

00:29:21.580 --> 00:29:24.320
size your user selected in your app.

00:29:24.340 --> 00:29:27.250
You do that with this print
interaction controller delegate,

00:29:27.360 --> 00:29:28.180
choose paper.

00:29:28.280 --> 00:29:34.720
It gets called after the user
picks a printer and we provide the

00:29:34.720 --> 00:29:39.240
list of papers that the printer
says it supports or even better,

00:29:39.290 --> 00:29:41.700
for printers that can report
their loaded paper sizes,

00:29:41.770 --> 00:29:43.740
the list of loaded paper sizes.

00:29:43.830 --> 00:29:48.570
You've got the paper size that the user
selected and you want to find one from

00:29:48.790 --> 00:29:51.490
the printer's list that's a good match.

00:29:52.700 --> 00:29:57.100
Here's a contrived
implementation of choose paper.

00:29:57.100 --> 00:30:02.350
Let's say you want to find a US letter,
8.5 by 11 inches in points.

00:30:02.400 --> 00:30:10.310
We provide class method on UIPrintPaper,
best page for page size.

00:30:10.340 --> 00:30:15.950
You hand in the paper size you want,
along with the printer's

00:30:15.950 --> 00:30:20.700
list of paper sizes,
and we return a UIPrintPaper

00:30:20.700 --> 00:30:22.500
that's a good match.

00:30:22.600 --> 00:30:27.090
and that's the one that will
be used for the print job.

00:30:28.150 --> 00:30:34.700
Now, last but not least,
there's the activity sheet new in iOS 6.

00:30:34.720 --> 00:30:39.590
And if you have content to print that's
appropriate for not only for printing,

00:30:39.590 --> 00:30:42.640
but for using by the other items
shown on the screenshot here,

00:30:42.640 --> 00:30:46.560
then printing by the activity sheet
may be the best way of printing and the

00:30:46.560 --> 00:30:48.810
easiest way of printing from your app.

00:30:50.480 --> 00:30:54.640
There's no print interaction
controller in this kind of printing,

00:30:54.670 --> 00:30:58.120
so there are a couple of
restrictions currently using

00:30:58.420 --> 00:31:00.650
the UI activity view controller.

00:31:00.660 --> 00:31:04.440
You don't have a way of allowing
the user to choose a page range,

00:31:04.470 --> 00:31:08.390
and because there's no print
interaction controller delegate,

00:31:08.390 --> 00:31:12.540
choose paper, you can't get involved
in paper size selection.

00:31:15.490 --> 00:31:20.980
To give you an idea of the code involved,
you've got an array of activities,

00:31:20.980 --> 00:31:23.990
activity items,
basically the items you want to share.

00:31:23.990 --> 00:31:26.840
So print, mail,
and the other things that you saw on

00:31:26.840 --> 00:31:29.150
the screenshot on the previous slide.

00:31:30.660 --> 00:31:33.580
What you're going to do is
you're going to provide,

00:31:33.580 --> 00:31:36.310
in this case,
an instance of a custom print page

00:31:36.710 --> 00:31:39.890
renderer object that you set up,
the print info containing the

00:31:39.940 --> 00:31:44.390
settings for the print job,
and what you want to print, in this case,

00:31:44.500 --> 00:31:46.270
let's say a web page.

00:31:46.710 --> 00:31:51.290
If you wanted to,
instead of a print page renderer,

00:31:51.290 --> 00:31:54.600
you could set a formatter
here or a printable item.

00:31:54.690 --> 00:31:58.600
But basically when you
present your view controller,

00:31:58.600 --> 00:32:00.480
the user can see mail, print, etc.

00:32:00.620 --> 00:32:03.910
If they tap on print,
we're going to compose a print job

00:32:04.000 --> 00:32:07.730
using your custom print page renderer,
the print info you've provided,

00:32:07.890 --> 00:32:11.580
and the content,
create a print job and process it.

00:32:11.600 --> 00:32:14.070
Alternatively,
if the user tapped on mail,

00:32:14.070 --> 00:32:17.380
then we can compose a mail
message with that same web page.

00:32:19.680 --> 00:32:23.190
Okay, so that's printing items,
formatters, print page renderers,

00:32:23.270 --> 00:32:25.680
and a few UI considerations.

00:32:25.750 --> 00:32:27.510
Hopefully you got the message.

00:32:27.520 --> 00:32:29.360
It's all very easy and straightforward.

00:32:29.360 --> 00:32:32.220
I'm going to hand you over to Todd to
talk about the printer simulator.

00:32:32.250 --> 00:32:34.510
Thank you.

00:32:35.670 --> 00:32:38.260
I'm Todd Riitland, a printing engineer.

00:32:38.340 --> 00:32:39.990
So you just saw a lot of
information about all the

00:32:40.000 --> 00:32:43.100
different APIs for printing on iOS.

00:32:43.210 --> 00:32:46.070
If you're new to this,
you might be wondering, "Well,

00:32:46.070 --> 00:32:49.100
how do I start?" 'Cause
that's a lot of information.

00:32:49.530 --> 00:32:53.090
Another good question that
developers ask themselves is,

00:32:53.090 --> 00:32:56.630
what tools are available
to help make my job easier?

00:32:57.000 --> 00:33:00.190
We've developed a tool to
help you make putting printing

00:33:00.190 --> 00:33:03.740
into your app a lot easier,
and it's the printer simulator.

00:33:03.760 --> 00:33:07.560
It creates virtual printers on your Mac,
so you can avoid wasting paper as

00:33:07.560 --> 00:33:10.440
you're developing your application.

00:33:10.570 --> 00:33:16.160
It outputs PDF representations of what
would actually go on a printed page.

00:33:16.510 --> 00:33:19.700
We actually use this as our reference
implementation for AirPrint.

00:33:19.840 --> 00:33:22.540
So it's not a trick,
we're not faking anything.

00:33:22.830 --> 00:33:27.070
It's actually the entire AirPrint
protocol from the iOS device or the

00:33:27.070 --> 00:33:29.500
iOS simulator to the printer simulator.

00:33:29.610 --> 00:33:31.620
And I'll show it to you right now.

00:33:33.510 --> 00:33:38.250
Okay, so we have Mountain Lion here
with the seed version of Xcode.

00:33:38.550 --> 00:33:40.900
And I have downloaded the
print web view sample.

00:33:40.900 --> 00:33:44.400
This is available on Apple's
developer connection website.

00:33:44.560 --> 00:33:46.060
It's a great example.

00:33:46.370 --> 00:33:51.400
If you're just starting out,
it has formatters and renderers.

00:33:51.440 --> 00:33:55.400
So we'll just double click it,
open it up in Xcode.

00:33:55.400 --> 00:34:00.400
So I've chosen the iPhone simulator.

00:34:00.400 --> 00:34:00.400
We'll just click run.

00:34:02.810 --> 00:34:04.700
And there we have it.

00:34:04.820 --> 00:34:06.840
It's a pretty simple UI.

00:34:06.840 --> 00:34:12.840
It's just a text field where you enter a
URL and a web view that has content and

00:34:12.840 --> 00:34:15.060
then a little share button here to print.

00:34:15.060 --> 00:34:22.600
I'll tap this to bring
up the printing UI.

00:34:27.030 --> 00:34:29.700
So right now we don't have
any AirPrint printers.

00:34:29.830 --> 00:34:32.060
There shouldn't be any around here.

00:34:32.060 --> 00:34:33.840
And that's where the
printer simulator comes in.

00:34:33.920 --> 00:34:38.650
So to access the printer simulator,
in the iOS simulator, we go to file,

00:34:38.650 --> 00:34:41.140
open printer simulator.

00:34:41.260 --> 00:34:42.740
And we just tap that.

00:34:42.850 --> 00:34:45.260
And then this is our printer simulator.

00:34:45.460 --> 00:34:50.020
Because we use Bonjour,
the printers will just pop

00:34:50.240 --> 00:34:52.100
up right in our UI here.

00:34:52.280 --> 00:34:53.260
So I'll choose to select
the simulated laser.

00:34:55.240 --> 00:34:57.780
Tap print.

00:34:57.840 --> 00:35:00.580
And output, there's our output.

00:35:00.610 --> 00:35:02.760
So you notice a few things here.

00:35:02.760 --> 00:35:08.340
The yellow that's around the edge of the
sheet represents the unprintable area.

00:35:08.390 --> 00:35:12.790
This is the printable rect that
you saw Paul mention earlier.

00:35:12.990 --> 00:35:15.680
So I actually inserted
a bug into the sample,

00:35:15.720 --> 00:35:18.950
which is why we see here this
header is going off the page and

00:35:18.950 --> 00:35:20.050
it's in this unprintable area.

00:35:20.060 --> 00:35:22.240
So that's not what we want.

00:35:23.600 --> 00:35:26.090
So we'll go back into our sample.

00:35:26.420 --> 00:35:28.960
Luckily,
I know exactly where to fix this.

00:35:28.990 --> 00:35:33.990
In our MyPrintPageRenderer,
we have a couple of defines.

00:35:34.240 --> 00:35:37.860
Header left text inset
I changed to negative 20.

00:35:38.010 --> 00:35:40.100
Should be positive 20.

00:35:40.100 --> 00:35:41.300
So I'll save that change.

00:35:41.300 --> 00:35:45.290
We'll click run.

00:35:48.410 --> 00:35:51.200
So we'll do the exact same thing again.

00:35:51.250 --> 00:35:53.760
Tat print.

00:35:53.760 --> 00:35:56.540
And there we have our corrected output.

00:35:56.590 --> 00:35:58.060
So the header is in the right place.

00:35:58.110 --> 00:35:59.730
Everything looks good.

00:35:59.810 --> 00:36:01.120
And so we're good to go.

00:36:01.240 --> 00:36:02.930
So this is a simulated laser.

00:36:02.990 --> 00:36:04.810
It's a black and white laser.

00:36:04.930 --> 00:36:08.870
The other simulated
printers that are available,

00:36:08.870 --> 00:36:12.960
we have some inkjet printers,
which actually do the iOS

00:36:12.960 --> 00:36:14.150
device does the rendering.

00:36:14.320 --> 00:36:17.130
We have Save Original,
which is a special queue,

00:36:17.130 --> 00:36:22.260
or a special printer that will
actually preserve... Someone else

00:36:22.350 --> 00:36:25.330
is printing to my printer simulator.

00:36:26.340 --> 00:36:30.950
The save original will preserve your
content if you're printing items,

00:36:30.950 --> 00:36:32.100
JPEGs or images.

00:36:32.100 --> 00:36:34.960
It will save that original
and open it up in preview.

00:36:35.100 --> 00:36:40.240
Or if you're drawing using print
page renderer or formatter,

00:36:40.530 --> 00:36:44.800
we'll capture those into a
PDF in its original form.

00:36:44.830 --> 00:36:52.690
So if we choose that and click print,
we'll notice if we zoom in here, we have

00:36:53.130 --> 00:36:55.600
We can select the text.

00:36:55.680 --> 00:36:59.690
You can zoom in and see
unrasterized content.

00:36:59.780 --> 00:37:03.040
So if you're doing custom drawing,
you can zoom right in and see exactly,

00:37:03.140 --> 00:37:06.510
you know, if your corners are matching,
if you're closing loops

00:37:06.510 --> 00:37:07.810
and things like that.

00:37:11.910 --> 00:37:17.000
So there's a few preferences that will
help with testing in Printer Simulator.

00:37:17.170 --> 00:37:21.010
And we go to Printer Simulator
Preferences to take a look at those.

00:37:21.180 --> 00:37:27.060
So you can choose to save the print jobs
on your desktop or some other location.

00:37:27.180 --> 00:37:29.310
By default, they don't get saved,
so when you close the app,

00:37:29.430 --> 00:37:31.400
they all disappear.

00:37:32.060 --> 00:37:35.190
You can turn on and off "show
printable area." This is that yellow

00:37:35.190 --> 00:37:37.310
area around the edge of the page.

00:37:37.690 --> 00:37:40.640
and you can turn on simulate print
times to slow down to actually

00:37:40.730 --> 00:37:42.750
simulate the real timing of a printer.

00:37:43.040 --> 00:37:47.160
This might be helpful
if you print center,

00:37:47.160 --> 00:37:49.600
if you want to take a look at
print center to see your job name.

00:37:49.600 --> 00:37:52.560
Normally the printer simulator goes
so fast you don't get a chance to

00:37:52.560 --> 00:37:54.360
look at print center to see the job.

00:37:54.360 --> 00:37:58.600
So if you want to make sure that
your names are showing up correctly,

00:37:58.600 --> 00:38:01.500
you can turn on simulate print times.

00:38:01.590 --> 00:38:05.180
So as I mentioned, using it for testing,
we recommend that you use all

00:38:05.180 --> 00:38:06.850
four of the simulated printers.

00:38:07.180 --> 00:38:09.260
Save original is good while
you're developing your app.

00:38:09.390 --> 00:38:12.090
For testing,
we think you should use all four.

00:38:12.180 --> 00:38:15.590
Each one has different margins,
different characteristics,

00:38:15.590 --> 00:38:17.140
different resolutions.

00:38:17.270 --> 00:38:19.590
Some support duplex, some don't.

00:38:19.670 --> 00:38:22.130
When you print duplex,
some printers even change the margins.

00:38:22.230 --> 00:38:23.850
This is pretty typical
of inkjet printers.

00:38:23.950 --> 00:38:26.420
So you actually get
quite a bit of testing,

00:38:26.420 --> 00:38:29.820
quite a bit of coverage just
by using all four of them.

00:38:30.380 --> 00:38:34.700
and any content in the yellow area of the
page will be collected by the printer.

00:38:34.740 --> 00:38:37.470
One thing I wanted to mention is
printer simulator is great for

00:38:37.570 --> 00:38:40.990
testing but it doesn't substitute
for using a real printer.

00:38:41.250 --> 00:38:48.920
It's important that you use real
printers so you see what your output

00:38:48.920 --> 00:38:48.920
looks like so you get a sense of how
it's going to behave with your app.

00:38:50.580 --> 00:38:55.060
For anyone familiar with the printer
simulator may have noticed a new button.

00:38:55.140 --> 00:38:56.990
It's new in the iOS 6 SDK.

00:38:57.000 --> 00:38:59.500
It's a load paper button.

00:38:59.600 --> 00:39:02.050
Now, I'm have you wondering, load paper?

00:39:02.330 --> 00:39:04.650
I thought this was a simulated printer.

00:39:04.770 --> 00:39:08.560
Is this some kind of like a Zynga
game where you have to load,

00:39:08.600 --> 00:39:10.380
you know, virtual paper?

00:39:10.500 --> 00:39:11.250
It's not.

00:39:11.270 --> 00:39:15.200
It's actually -- this
represents paper-sized sensors,

00:39:15.200 --> 00:39:17.450
as has been mentioned before.

00:39:17.500 --> 00:39:22.940
A lot of AirPrint printers in the future
will have these paper-sized sensors.

00:39:23.350 --> 00:39:25.690
This is how the user selects
the size that they want,

00:39:25.810 --> 00:39:29.440
is they put the paper into the
printer and the sensors will

00:39:29.440 --> 00:39:32.740
tell the system what size to use.

00:39:32.880 --> 00:39:36.320
So if your app prints items,
the operating system will

00:39:36.410 --> 00:39:39.810
automatically size the PDF or
photo to whatever is loaded.

00:39:40.190 --> 00:39:44.650
If your app uses formatters or renderers,
the paper rect and the printable

00:39:45.030 --> 00:39:48.090
rect will represent the size
that's loaded at the printer.

00:39:50.200 --> 00:39:56.800
This is the printer simulator UI for
selecting these different loaded papers.

00:39:56.890 --> 00:40:01.040
We have one drop down for each tray.

00:40:01.040 --> 00:40:03.150
And I'll show that to you right now.

00:40:04.120 --> 00:40:07.660
So we'll click on this load
paper button and here's the

00:40:07.660 --> 00:40:10.130
UI that I was mentioning before.

00:40:10.140 --> 00:40:14.330
So for the simulated laser,
we'll go ahead and choose change U.S.

00:40:14.410 --> 00:40:15.870
letter to U.S.

00:40:15.870 --> 00:40:19.160
legal, which is 8.5 by 14.

00:40:23.350 --> 00:40:26.660
We'll do the same thing
that we did before,

00:40:26.660 --> 00:40:28.990
choosing a simulated laser.

00:40:30.060 --> 00:40:34.410
and we'll see that now our
output is on 8.5 by 14.

00:40:34.480 --> 00:40:36.940
Just to show that again,
we'll look at a little

00:40:37.820 --> 00:40:42.320
bit longer website.

00:40:42.320 --> 00:40:44.520
And there we have a legal page.

00:40:48.600 --> 00:40:50.490
So there's a little bit
of difference in the UI,

00:40:50.490 --> 00:40:55.000
as Paul mentioned,
when you're using photo output type.

00:40:55.140 --> 00:41:00.690
Print photo is another developer
example we have that prints photos,

00:41:00.930 --> 00:41:03.910
so we'll go ahead and look at that.

00:41:04.310 --> 00:41:07.280
When a printer says it knows
what size it has loaded,

00:41:07.280 --> 00:41:10.810
if there are more than one size
and we're printing a photo,

00:41:10.820 --> 00:41:14.960
that's the only time that we'll show this
paper UI for the user to select paper.

00:41:15.080 --> 00:41:17.660
Because we really don't know
which size the user would

00:41:17.660 --> 00:41:19.250
want to print their photo on.

00:41:19.370 --> 00:41:21.470
So in this example,
we're printing to our laser.

00:41:21.740 --> 00:41:24.550
Let's say that we want to choose legal.

00:41:25.530 --> 00:41:27.630
This is what it would look like
if a user was printing a photo to

00:41:27.730 --> 00:41:30.900
a black and white laser on legal.

00:41:35.980 --> 00:41:39.630
So as I mentioned,
the printer simulator is a

00:41:39.630 --> 00:41:42.190
complete AirPrint -- it implements
the complete AirPrint protocol,

00:41:42.190 --> 00:41:45.190
so it'll work on a local
network with any iOS device,

00:41:45.220 --> 00:41:45.960
as we saw earlier.

00:41:45.960 --> 00:41:49.900
Some people in the
audience were using it.

00:41:51.800 --> 00:41:54.640
So we can actually,
you can use your real iOS device.

00:41:54.640 --> 00:41:56.400
I'll close this.

00:41:56.450 --> 00:41:59.430
You can use a real iOS device if
you're just on the same network.

00:41:59.760 --> 00:42:00.330
You can test.

00:42:00.440 --> 00:42:03.790
It works with that and the iOS simulator.

00:42:04.130 --> 00:42:07.120
As Howard mentioned,
we have Mac OS X now supports

00:42:07.290 --> 00:42:10.190
printing directly to these
AirPrint printers from Lion on.

00:42:10.550 --> 00:42:12.990
In Mountain Lion, it's the default.

00:42:13.210 --> 00:42:15.250
So let's see how that works.

00:42:15.370 --> 00:42:16.700
Because we have our
printer simulator running,

00:42:16.700 --> 00:42:19.010
we should be able to
use it right from here.

00:42:19.050 --> 00:42:23.080
So all we do is select.

00:42:24.080 --> 00:42:27.600
The printer, it automatically figures out
everything that it needs.

00:42:27.650 --> 00:42:29.750
It'll get the icon.

00:42:31.070 --> 00:42:32.970
We can even get supply levels.

00:42:33.140 --> 00:42:34.960
This is a simulated supply level.

00:42:34.990 --> 00:42:39.440
So you get a full printing experience
to these AirPrint printers.

00:42:39.440 --> 00:42:41.460
We just click print.

00:42:41.580 --> 00:42:43.600
And there we have our output.

00:42:45.980 --> 00:42:47.590
So this is pretty powerful.

00:42:47.600 --> 00:42:51.630
On both Mac OS X and iOS,
all you need to do is select

00:42:51.760 --> 00:42:53.900
your printer and tap print.

00:42:54.030 --> 00:42:56.690
There's no extra setup,
there's no drivers to download.

00:42:56.880 --> 00:42:59.650
It happens nearly instantaneously.

00:42:59.990 --> 00:43:00.880
and that's a pretty cool thing.

00:43:01.090 --> 00:43:07.190
So with that,
I'll give it back over to here, Howard.

00:43:08.080 --> 00:43:12.550
So you've seen the overview
of our AirPrint technology.

00:43:12.740 --> 00:43:15.080
It's very pervasive in
the market at this point.

00:43:15.080 --> 00:43:19.880
It is the only supported
printing technology from iOS.

00:43:19.880 --> 00:43:24.830
It's now the default
print path on Mac OS X.

00:43:24.960 --> 00:43:29.950
If you're a Mac OS X developer,
just recompile your program.

00:43:29.950 --> 00:43:33.900
Make sure you don't have
any deprecated APIs.

00:43:33.910 --> 00:43:36.330
If you're an iOS developer
and you're looking to bring

00:43:36.330 --> 00:43:39.900
printing to your application,
we have a lot of sample code available.

00:43:39.900 --> 00:43:41.900
It's very simple.

00:43:41.900 --> 00:43:45.140
If you're printing items,
a matter of 10 or 12 lines of

00:43:45.140 --> 00:43:46.900
code and you are good and done.

00:43:46.900 --> 00:43:49.950
If you're writing a
full-fledged application that

00:43:49.960 --> 00:43:53.860
requires detailed printing,
Paul's given you a great overview

00:43:53.860 --> 00:43:57.760
of formatters and print renderers,
which should allow you to create

00:43:57.930 --> 00:43:59.900
desktop-quality printed output.

00:43:59.900 --> 00:44:02.900
And then as Todd has shown you,
we've created this printer simulator,

00:44:02.900 --> 00:44:03.900
which will let you
print your own printer.

00:44:03.900 --> 00:44:08.340
It will let you, in development,
simulate typical printers,

00:44:08.340 --> 00:44:09.900
both inkjet and laser.

00:44:09.900 --> 00:44:14.900
And it's also a tool that's
very useful in your QA process.

00:44:14.900 --> 00:44:16.810
We recommend that you buy
a few AirPrint printers,

00:44:16.930 --> 00:44:20.120
but you should be able to get
a lot of your work done without

00:44:20.120 --> 00:44:21.900
having to waste any paper.

00:44:21.900 --> 00:44:25.110
In terms of resources, Paul Danbold,
our evangelist,

00:44:25.110 --> 00:44:26.900
is always available to you.

00:44:26.900 --> 00:44:30.500
We have a complete set of
iOS printing documentation

00:44:31.070 --> 00:44:33.900
developed on developer.apple.com.

00:44:33.900 --> 00:44:36.600
And then of course,
we have several bits of sample

00:44:36.670 --> 00:44:40.880
code that will show you how to
use everything for iOS printing.

00:44:41.010 --> 00:44:44.900
Same website has samples and
documentation for OS X printing.

00:44:48.200 --> 00:44:50.910
Of course you should subscribe
to the developer forums if there

00:44:50.910 --> 00:44:54.260
are questions about printing,
many of us are there to answer.

00:44:54.380 --> 00:44:58.340
And if you're interested in AirPrint
or in particular what AirPrint

00:44:58.460 --> 00:45:02.320
printers are available today,
we keep a comprehensive list in this

00:45:02.320 --> 00:45:05.820
AirPrint 101 knowledge base article.

00:45:06.450 --> 00:45:09.380
If you missed it,
you can go back to the videos and

00:45:09.380 --> 00:45:13.890
you can see the Cocoa Touch class,
which covers some interesting

00:45:13.890 --> 00:45:15.560
elements related to UI.

00:45:15.620 --> 00:45:18.300
And with that,
we hope you have a great WWDC.

00:45:18.380 --> 00:45:19.140
Thank you for being here.