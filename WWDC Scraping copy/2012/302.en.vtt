WEBVTT

00:00:10.460 --> 00:00:15.600
Good afternoon.

00:00:15.650 --> 00:00:18.060
So welcome to Selling
Products with Store Kit.

00:00:18.160 --> 00:00:22.330
My name is Daniel, and I manage the
Mac App Store engineering team.

00:00:22.460 --> 00:00:27.840
And Store Kit is the framework
on both iOS and Mac OS X that

00:00:27.840 --> 00:00:29.370
lets you do in-app purchase.

00:00:29.370 --> 00:00:34.560
And in-app purchase lets you do
things inside of your app like sell

00:00:34.560 --> 00:00:40.380
additional levels to a game or perhaps
unlock some new feature of your app.

00:00:40.400 --> 00:00:45.620
So if you have a camera app,
perhaps you sell additional lenses.

00:00:45.620 --> 00:00:50.600
Or it could do something like sell
additional issues to a magazine.

00:00:50.600 --> 00:00:54.500
You can do all these things and a lot
of other things with in-app purchase.

00:00:54.500 --> 00:00:56.460
You've probably used an app that does it.

00:00:56.460 --> 00:00:59.030
Some of you have probably
written an app that does it.

00:00:59.090 --> 00:01:03.370
What you might not be as familiar
with is that at the time of writing,

00:01:03.370 --> 00:01:07.410
75% of the top-grossing iPhone
apps on the store use in-app

00:01:07.410 --> 00:01:09.530
purchase for their revenue.

00:01:09.540 --> 00:01:10.260
So what's the difference between an
in-app purchase and an in-app purchase?

00:01:10.540 --> 00:01:13.480
So to be clear,
the apps are free in the store,

00:01:13.480 --> 00:01:16.020
and all of the revenue
comes from in-app purchase.

00:01:16.020 --> 00:01:19.030
So I think it's safe to say
it's been a huge success,

00:01:19.070 --> 00:01:20.380
thanks to you guys.

00:01:20.380 --> 00:01:23.950
And the other thing to point out is
that in-app purchase is what lets you

00:01:24.100 --> 00:01:26.070
be flexible with your business model.

00:01:26.070 --> 00:01:29.150
We understand that selling an
app for one flat fee in the

00:01:29.150 --> 00:01:31.300
store doesn't work for everybody.

00:01:31.300 --> 00:01:35.530
And in-app purchase is the feature
that lets you take another approach.

00:01:35.530 --> 00:01:39.620
So with that in mind,
let's talk about our agenda today.

00:01:41.400 --> 00:01:43.540
We're going to start with a great
new feature I'm very excited about.

00:01:43.590 --> 00:01:48.000
It lets you sell any iTunes store or apps
or content inside of your application,

00:01:48.060 --> 00:01:51.020
so books and movies and songs,
things like that.

00:01:51.100 --> 00:01:53.540
We're going to move on to
traditional in-app purchase,

00:01:53.550 --> 00:01:56.180
selling your own content
inside of your application.

00:01:56.180 --> 00:02:00.620
We'll focus specifically on the
purchase queue and why it's so

00:02:00.620 --> 00:02:02.910
important to get that right.

00:02:03.120 --> 00:02:06.000
We'll then back out and talk
about another great feature,

00:02:06.000 --> 00:02:08.960
App Store hosted content,
and we'll wrap up with

00:02:08.960 --> 00:02:10.530
some best practices.

00:02:10.560 --> 00:02:14.920
So let's get right into it and
talk about selling store content,

00:02:15.020 --> 00:02:19.170
a new way to sell movies, music, apps,
anything that's in the iTunes

00:02:19.180 --> 00:02:21.380
store inside of your application.

00:02:21.510 --> 00:02:23.730
Let me show you an example.

00:02:23.900 --> 00:02:26.990
You're using an application,
something like Shazam,

00:02:27.110 --> 00:02:29.310
and Shazam deals with a lot of songs.

00:02:29.310 --> 00:02:33.040
So I found some great song on the
radio with Shazam that I want to buy,

00:02:33.240 --> 00:02:36.400
and you can see there's a button
in the middle of the phone that

00:02:36.400 --> 00:02:38.220
lets me download on iTunes.

00:02:38.220 --> 00:02:43.020
So I tap it, and I'm taken to the iTunes
store where I can buy the song.

00:02:43.020 --> 00:02:44.110
And that's great.

00:02:44.210 --> 00:02:45.280
I bought the song.

00:02:45.280 --> 00:02:48.800
It works really well,
and it's been working well for a while.

00:02:48.800 --> 00:02:53.520
But we're now out of your application,
which might not be exactly what you want.

00:02:53.800 --> 00:02:57.190
So we have a new solution that
we think you'll like a lot more.

00:02:57.190 --> 00:02:59.410
And it works like this.

00:03:00.420 --> 00:03:03.370
Same app, same button,
but this time we bring

00:03:03.430 --> 00:03:06.820
up a new view controller,
and it's a little piece of

00:03:07.120 --> 00:03:10.940
the iTunes store or app store
inside of your application.

00:03:10.970 --> 00:03:13.810
So we have never left your application.

00:03:13.840 --> 00:03:18.900
What you're seeing here is a song,
of course, but you could use this for a

00:03:19.200 --> 00:03:22.040
movie or another application,
anything you want.

00:03:22.080 --> 00:03:23.780
User taps.

00:03:23.800 --> 00:03:28.920
That they're done, and they're right back
inside of your application.

00:03:29.070 --> 00:03:33.090
So what we've seen here is an application
that deals with a lot of different songs,

00:03:33.140 --> 00:03:34.360
a lot of different media.

00:03:34.410 --> 00:03:36.990
But you might also consider
using this for cross-promotion

00:03:37.280 --> 00:03:38.800
of your own applications.

00:03:38.940 --> 00:03:41.710
So inside of one of your apps,
if you'd like to sell

00:03:41.710 --> 00:03:44.430
your other applications,
you can do that.

00:03:44.490 --> 00:03:46.290
Let me show you how.

00:03:46.970 --> 00:03:50.680
At a high level,
first what you do is look up the item

00:03:50.680 --> 00:03:53.450
identifier for whatever you want to sell.

00:03:53.530 --> 00:03:56.900
Everything on the store,
the iTunes store, the App Store,

00:03:56.900 --> 00:03:59.070
has a unique identifying number.

00:03:59.160 --> 00:04:02.060
And we have three ways
that you can get it.

00:04:02.490 --> 00:04:04.890
The first is a search API.

00:04:04.990 --> 00:04:08.270
That's a web service that you can hit
and query it with bundle identifiers,

00:04:08.270 --> 00:04:11.200
other things, other fields,
and get back information

00:04:11.200 --> 00:04:13.590
about products on the store.

00:04:15.030 --> 00:04:17.150
You can also use the
Enterprise Partner Feed.

00:04:17.260 --> 00:04:20.990
It's another way for some of
you to get data from the store.

00:04:21.060 --> 00:04:23.600
The third way is probably
the simplest for most of you,

00:04:23.800 --> 00:04:26.180
and that's simply parsing iTunes URLs.

00:04:26.250 --> 00:04:29.350
If you've ever gone and looked
in Safari at your application

00:04:29.810 --> 00:04:32.910
and the preview page that we
have for each application,

00:04:33.170 --> 00:04:35.920
you'll notice one big number in the URL.

00:04:36.070 --> 00:04:40.190
That's actually your item identifier,
and if that works for your needs,

00:04:40.190 --> 00:04:41.620
you can get it there.

00:04:42.240 --> 00:04:43.620
So you have the item identifier.

00:04:43.620 --> 00:04:47.200
The next step is to configure
this new ViewController class

00:04:47.200 --> 00:04:51.460
that we're providing in iOS 6,
SKStoreProductViewController.

00:04:51.730 --> 00:04:54.440
Configure it with that item identifier.

00:04:54.440 --> 00:04:58.410
Tell the ViewController to
load up that page of content.

00:05:05.840 --> 00:05:05.840
So, those are the steps.

00:05:05.840 --> 00:05:05.840
Let's actually look through it in code.

00:05:06.810 --> 00:05:09.430
You'll want to first choose
where you're going to do this,

00:05:09.530 --> 00:05:13.360
most likely on a button tab,
like we saw with Shazam.

00:05:13.500 --> 00:05:19.490
Simply instantiate that view controller,
set yourself as the delegate,

00:05:20.000 --> 00:05:36.200
[Transcript missing]

00:05:52.250 --> 00:05:52.250
So, what we're going to do is we're
going to tell that view controller

00:05:52.250 --> 00:05:52.250
to load with the parameters that
we chose and a completion block.

00:05:52.250 --> 00:05:52.250
So, it's going to go and hit the
network and load up that page.

00:05:52.250 --> 00:05:52.250
Once it's done that,
it'll call your completion block.

00:05:52.250 --> 00:05:52.250
Assuming that was successful,

00:05:52.520 --> 00:05:57.130
All you have to do is present the view
controller and it's right there to go.

00:05:57.230 --> 00:06:01.550
Now, should you want to know when the
user is back inside your application,

00:06:01.590 --> 00:06:03.740
that's where the delegate
method comes in handy.

00:06:03.830 --> 00:06:06.890
So we have this delegate method that
you can respond to to know when the

00:06:07.020 --> 00:06:09.240
user is back inside of your application.

00:06:09.320 --> 00:06:10.140
Great.

00:06:10.240 --> 00:06:13.520
So it's as simple as that to
sell anything you want in the

00:06:13.580 --> 00:06:15.950
store inside of your application.

00:06:16.170 --> 00:06:19.680
Let's move from selling other
people's content now to selling your

00:06:19.680 --> 00:06:22.180
own content with In-App Purchas.

00:06:22.210 --> 00:06:25.240
And I want to point out that
In-App Purchas is virtually

00:06:25.240 --> 00:06:28.240
identical between iOS and the Mac.

00:06:28.330 --> 00:06:30.540
And I'll point out the few
differences that there are.

00:06:30.620 --> 00:06:34.720
But if you have it done in one platform
and you want to move it to the other,

00:06:34.780 --> 00:06:36.770
it's really pretty simple.

00:06:37.460 --> 00:06:41.480
There are four types of things that
you can sell using In-App Purchas.

00:06:41.480 --> 00:06:43.230
The first we call consumable.

00:06:43.430 --> 00:06:47.820
These are used up like tokens in a game
or power-ups that a player in a game

00:06:47.820 --> 00:06:50.300
would just use up and they're gone.

00:06:50.430 --> 00:06:52.180
Contrast this with non-consumable.

00:06:52.390 --> 00:06:57.530
This would be something like a feature
in your application that you unlock and

00:06:57.530 --> 00:07:00.140
the user has access to from then on.

00:07:00.480 --> 00:07:02.630
We offer auto-renewing subscriptions.

00:07:02.730 --> 00:07:06.300
You'll want to use this for something
like a magazine that has content

00:07:06.300 --> 00:07:09.990
that's released periodically,
new content.

00:07:10.100 --> 00:07:13.080
Contrast that with
non-renewing subscription,

00:07:13.140 --> 00:07:15.240
which is for something
more like a service,

00:07:15.240 --> 00:07:18.070
like an app that ties into a dating
service that you want to give

00:07:18.080 --> 00:07:22.120
somebody access to for three months,
or whatever the case may be.

00:07:22.260 --> 00:07:24.640
So those are the things you can sell.

00:07:24.750 --> 00:07:27.020
Let's talk about how to sell.

00:07:27.390 --> 00:07:30.680
At a very high level,
there are three steps.

00:07:30.780 --> 00:07:32.160
The first is set up your content.

00:07:32.180 --> 00:07:34.960
If you're building a game and you
want to sell additional levels,

00:07:34.990 --> 00:07:37.020
well, you've got to make those levels.

00:07:37.120 --> 00:07:40.240
Once you've done that,
test it inside of your app in Xcode,

00:07:40.270 --> 00:07:43.270
and you'll want to enter
information about what you're

00:07:43.390 --> 00:07:45.380
going to sell in iTunes Connect.

00:07:45.520 --> 00:07:50.590
So that happens sort of ahead of time,
right?

00:07:50.590 --> 00:07:50.590
Well before the user ever
enters your application.

00:07:50.830 --> 00:07:53.840
What happens at purchase
time is on the device or Mac.

00:07:53.840 --> 00:07:57.030
That's when the user is
actually using your application

00:07:57.110 --> 00:07:58.820
and goes to buy something.

00:07:58.840 --> 00:08:01.290
That's where you want to use Store Kit.

00:08:01.490 --> 00:08:05.680
Finally, well after they've purchased it,
subsequent launches of the application,

00:08:05.700 --> 00:08:07.860
you're going to verify those purchases,
make sure they really

00:08:07.960 --> 00:08:10.970
came from the app store,
and that you're not being

00:08:10.970 --> 00:08:12.520
pirated in some way.

00:08:12.610 --> 00:08:15.540
What we're focusing on in this
talk is the purchase process

00:08:15.660 --> 00:08:18.180
and what happens in your app.

00:08:18.340 --> 00:08:21.940
So let's break that up and
go through it step by step.

00:08:23.630 --> 00:08:27.200
So this whole process,
to put it in some context for you,

00:08:27.300 --> 00:08:29.320
happens when the user
is inside of your app,

00:08:29.320 --> 00:08:32.600
taps on something that says Store,
or you otherwise want to present

00:08:32.880 --> 00:08:34.660
what there is for them to buy.

00:08:34.790 --> 00:08:36.490
That's where we're starting.

00:08:36.600 --> 00:08:39.980
Now, the first step of that is
to get item identifiers.

00:08:40.140 --> 00:08:43.180
So just like everything
in the iTunes Store,

00:08:43.290 --> 00:08:46.050
you need to provide a unique
identifier for everything that

00:08:46.050 --> 00:08:47.240
you want to sell in your app.

00:08:47.240 --> 00:08:49.440
And we'll talk about how to do that.

00:08:49.490 --> 00:08:52.870
Excuse me, you set that up ahead of
time in iTunes Connect.

00:09:19.620 --> 00:09:20.190
So, what's the best way to
deliver your content?

00:09:20.190 --> 00:09:20.190
Well,
the best way to deliver your content

00:09:20.190 --> 00:09:20.190
is to use the same identifiers
that you set up in iTunes Connect.

00:09:20.190 --> 00:09:20.190
You can get them into your
app in one of two ways.

00:09:20.190 --> 00:09:20.190
The first is have them in your app.

00:09:20.190 --> 00:09:20.190
They could be just hard coded or you
could load them in from a P list.

00:09:20.190 --> 00:09:20.190
The second is to talk to your own server.

00:09:20.190 --> 00:09:20.190
Then it's up to you to come up with
some kind of communication between

00:09:20.190 --> 00:09:20.190
your device and server to get those.

00:09:20.190 --> 00:09:20.190
So, that gives you a lot more
flexibility if you want to add

00:09:20.190 --> 00:09:20.190
more things to buy later on.

00:09:20.190 --> 00:09:20.190
But if you just have simple needs,
you might choose to go with just

00:09:20.190 --> 00:09:20.190
putting them inside of your application.

00:09:20.430 --> 00:09:23.230
Next step,
we take those item identifiers and

00:09:23.230 --> 00:09:26.310
we fetch up-to-date information
about each of those products.

00:09:26.310 --> 00:09:29.660
In iTunes Connect,
we let you change the price

00:09:29.660 --> 00:09:32.160
or the title of what you're
going to sell at any moment.

00:09:32.180 --> 00:09:35.080
So immediately before you show
the user what they can buy,

00:09:35.150 --> 00:09:37.650
you need to go get that
up-to-date information.

00:09:37.680 --> 00:09:38.890
That's this step.

00:09:40.310 --> 00:09:43.320
Take those item identifiers,
create an NS set so that

00:09:43.320 --> 00:09:45.920
we know they're unique,
and you can use that to make

00:09:45.920 --> 00:09:47.950
an SK Products request object.

00:09:47.980 --> 00:09:50.600
This is what will do the hard
work of talking to the server.

00:09:50.600 --> 00:09:53.000
Set yourself as a
delegate and call start,

00:09:53.000 --> 00:09:56.120
and Store Kit is off to the
races talking to the server and

00:09:56.130 --> 00:09:58.270
getting that information for you.

00:09:59.710 --> 00:10:02.720
We will call your delegate back
on one of two callback methods.

00:10:02.830 --> 00:10:04.960
The first one is the success case.

00:10:05.060 --> 00:10:08.760
We'll give you an
SK products response object.

00:10:08.880 --> 00:10:13.100
And that object will have two properties
that you'll probably be interested in.

00:10:13.320 --> 00:10:15.400
The first is a products array.

00:10:15.490 --> 00:10:19.900
Each item in this array is an SK products
object with a lot of metadata.

00:10:19.900 --> 00:10:23.880
It'll have the description and the name
of the price of whatever it is for sale.

00:10:23.980 --> 00:10:27.600
And the other property is the
invalid product identifiers array.

00:10:27.700 --> 00:10:32.620
Now, if you had a typo in an identifier
that you sent us or forgot to

00:10:32.770 --> 00:10:37.230
register it with the iTunes store,
something like that,

00:10:37.230 --> 00:10:38.600
it'll be returned here so that you
know that there's some issue with it.

00:10:38.810 --> 00:10:41.470
If there's an error with
the request overall,

00:10:41.580 --> 00:10:42.980
like you're not connected
to the internet,

00:10:43.120 --> 00:10:45.080
for example,
you'll get an NSError back in

00:10:45.370 --> 00:10:48.430
this delegate callback method,
and you should respond

00:10:48.460 --> 00:10:50.280
accordingly in your UI.

00:10:51.200 --> 00:10:53.500
So we have that up-to-date information.

00:10:53.530 --> 00:10:54.800
Now is the fun part.

00:10:54.840 --> 00:10:59.420
You get to present whatever it is you
want to sell inside of your application.

00:10:59.440 --> 00:11:00.960
This is entirely up to you.

00:11:01.030 --> 00:11:02.320
It's your responsibility.

00:11:02.360 --> 00:11:05.630
And the reason for that is
it needs to fit your app.

00:11:05.890 --> 00:11:10.880
You might have a really immersive game
that takes the user through forests,

00:11:10.880 --> 00:11:13.420
and they're fighting animals,
and they find this tavern where

00:11:13.420 --> 00:11:15.070
they can buy new swords and shields.

00:11:15.200 --> 00:11:17.240
Well,
Store Kit can't provide that for you.

00:11:17.480 --> 00:11:20.970
We need you to create whatever makes
sense inside of your application.

00:11:21.040 --> 00:11:23.540
If you have an app
that's more conventional,

00:11:23.570 --> 00:11:26.660
it could be a more conventional
list of things that are for sale.

00:11:26.770 --> 00:11:31.390
But I do want to impress upon you that
this is an opportunity to really sell,

00:11:31.680 --> 00:11:33.630
not just show what's for sale,
but sell it.

00:11:33.700 --> 00:11:35.310
Make it look really great.

00:11:35.380 --> 00:11:37.700
If this is where your
revenue is coming from,

00:11:37.890 --> 00:11:41.590
all the more reason to put a
lot of effort into this UI.

00:11:41.940 --> 00:11:44.360
So the user has chosen
what they want to buy.

00:11:44.400 --> 00:11:46.300
How do you actually buy it?

00:11:46.320 --> 00:11:50.460
Well, take that SK product object
that we got two steps ago,

00:11:50.480 --> 00:11:53.670
and you're going to use it
to create an SK payment.

00:11:54.460 --> 00:11:57.680
Simply take that payment and
add it to the SK Payment Queue,

00:11:57.720 --> 00:11:59.300
and you've started the purchase.

00:11:59.350 --> 00:12:02.800
SK Payment Queue is a class that we're
seeing for the first time right now,

00:12:02.800 --> 00:12:04.640
and we're going to come
back to again and again.

00:12:04.680 --> 00:12:07.240
It's really the backbone
of In-App Purchase.

00:12:07.370 --> 00:12:10.470
So from there,
you've actually started the purchase.

00:12:10.690 --> 00:12:14.820
The user experience once
you've done this is as follows.

00:12:14.910 --> 00:12:16.710
We'll put up a confirmation dialogue.

00:12:16.760 --> 00:12:19.120
This is what it looks like on the Mac.

00:12:19.500 --> 00:12:22.480
Assuming they click through that,
they're asked for their

00:12:22.480 --> 00:12:24.560
login information,
and they can log into the store.

00:12:24.560 --> 00:12:27.780
Assuming they remember their
password and all goes well,

00:12:27.780 --> 00:12:30.300
we're ready to process the transaction.

00:12:30.300 --> 00:12:34.170
So the server is going to tell
Store Kit everything went great.

00:12:34.200 --> 00:12:37.870
Store Kit is ready to tell your
application everything went great.

00:12:37.890 --> 00:12:39.930
But we didn't set a delegate here.

00:12:39.930 --> 00:12:43.210
How do we know what in your
application should be told that

00:12:43.210 --> 00:12:45.170
the purchase was successful?

00:12:45.240 --> 00:12:49.370
Well, there's actually a step that's at
the very beginning of the process.

00:12:49.400 --> 00:12:51.900
Actually,
before the beginning of the process.

00:12:51.930 --> 00:12:54.400
It needs to be done on the
launch of your application.

00:12:54.400 --> 00:12:56.400
We're talking about it now
because it's coming into play.

00:12:56.400 --> 00:13:03.090
But I want to impress upon you that
when your application is launched,

00:13:03.090 --> 00:13:10.080
this is when you should register an
observer on this SK Payment Queue.

00:13:10.080 --> 00:13:10.080
We'll talk in just a moment about why
it's important to do it at the launch.

00:13:10.560 --> 00:13:14.300
So whatever object you
choose implements a protocol.

00:13:14.320 --> 00:13:17.740
The most important callback is
this updated transactions callback.

00:13:17.750 --> 00:13:21.180
We're going to talk about
this a bunch starting now.

00:13:21.530 --> 00:13:23.960
So this transaction was just successful.

00:13:23.960 --> 00:13:25.320
The user bought something.

00:13:25.490 --> 00:13:27.880
We're going to call your
observer method here,

00:13:27.950 --> 00:13:30.800
and we're going to pass back
an array of transactions.

00:13:30.860 --> 00:13:33.000
Now,
if the user just purchased one thing,

00:13:33.000 --> 00:13:34.480
there's going to be one transaction.

00:13:34.570 --> 00:13:37.120
But we'll talk about other cases
where there might be more than one.

00:13:37.120 --> 00:13:39.580
So it's best to loop through it.

00:13:39.650 --> 00:13:41.590
Each transaction has a state.

00:13:41.680 --> 00:13:42.900
There's four possible states.

00:13:42.900 --> 00:13:45.710
We're going to talk
about two at the moment.

00:13:45.790 --> 00:13:47.230
The first is purchased.

00:13:47.470 --> 00:13:50.640
That means everything was great,
was successful.

00:14:01.130 --> 00:14:01.130
It could also be failed,
in which case the transaction

00:14:01.130 --> 00:14:01.130
will have an NSError,
and you're going to want to

00:14:01.130 --> 00:14:01.130
respond to that in a manner
that's appropriate for your UI.

00:14:01.130 --> 00:14:01.130
But let's say that it was successful.

00:14:01.330 --> 00:14:03.780
We're now ready to make
the asset available.

00:14:03.890 --> 00:14:06.200
You have two choices to do this.

00:14:06.280 --> 00:14:09.700
The first one is simply to unlock
something inside of your application.

00:14:09.730 --> 00:14:12.500
The functionality that was already there,
the purchase is basically just

00:14:12.500 --> 00:14:13.920
giving the user access to it.

00:14:13.950 --> 00:14:17.740
And the second is to download
additional content from your server.

00:14:17.740 --> 00:14:20.860
Maybe you have a cooking app and
they bought some recipes and you need

00:14:20.860 --> 00:14:24.300
to go and get the files from your
server that represent those recipes.

00:14:24.300 --> 00:14:27.300
So whatever makes sense for you to do,
these are the options

00:14:27.300 --> 00:14:28.640
that you have right now.

00:14:53.930 --> 00:14:53.930
The third one is to always
finish the transaction.

00:14:53.930 --> 00:14:53.930
SK Payment Queue has a method
called Finish Transaction and

00:14:53.930 --> 00:14:53.930
you always need to call it.

00:14:53.930 --> 00:14:53.930
If you find that every time
you launch your application,

00:14:53.930 --> 00:14:53.930
you're being prompted to
log into the App Store,

00:14:53.930 --> 00:14:53.930
it's probably because there's
something stuck in the queue and you

00:14:53.930 --> 00:14:53.930
didn't call Finish Transaction on it.

00:14:53.930 --> 00:14:53.930
So it's really important in all
situations to call Finish Transaction.

00:14:54.380 --> 00:14:57.650
So that's the purchase process,
and that's what happens when

00:14:57.650 --> 00:14:59.380
the user wants to buy something.

00:14:59.500 --> 00:15:02.660
There's a concept called Restore
that I want to talk about now.

00:15:02.690 --> 00:15:05.540
And that's not to be confused
with restoring a device.

00:15:05.570 --> 00:15:09.440
This restore is a way for users
to get back all of their content.

00:15:09.620 --> 00:15:13.590
So this is especially important when
the user redownloads your app from the

00:15:13.840 --> 00:15:15.490
store or in multiple device scenarios.

00:15:15.640 --> 00:15:18.280
So I bought an in-app
purchase on my iPhone,

00:15:18.330 --> 00:15:20.840
but my iPad doesn't get
that content automatically.

00:15:20.870 --> 00:15:23.990
I need to do a restore
on my iPad to get it.

00:15:24.720 --> 00:15:28.050
So applications really must offer this.

00:15:28.120 --> 00:15:31.630
The user needs a way to get
back all of their content.

00:15:33.160 --> 00:15:36.740
That said, consumables don't come
back when you restore.

00:15:37.080 --> 00:15:38.730
These are things that were used up,
presumably.

00:15:38.850 --> 00:15:44.090
So it's only non-consumable and
auto-renewable types that come back.

00:15:44.160 --> 00:15:48.070
And the last thing I want to mention is
it's best not to do this automatically.

00:15:48.250 --> 00:15:51.810
This will cause a prompt
for logging into the store,

00:15:52.040 --> 00:15:55.880
and you're going to want to let your
user initiate this because of that.

00:15:56.150 --> 00:15:59.660
So that being said,
let's look at how we do that.

00:15:59.760 --> 00:16:03.590
The last three steps are exactly the
same as they were for a purchase.

00:16:03.700 --> 00:16:05.370
And the first step is very simple.

00:16:05.660 --> 00:16:08.740
You just kick off the restore with
one method on SK Payment Queue,

00:16:08.740 --> 00:16:10.650
Restore Completed Transactions.

00:16:10.660 --> 00:16:13.040
From there, it's basically the same.

00:16:13.040 --> 00:16:15.560
Same callback, updated transactions.

00:16:15.560 --> 00:16:19.130
You're going to want to loop through it,
check that state.

00:16:19.130 --> 00:16:23.040
But this time, the state will be restored
if it was successful.

00:16:23.580 --> 00:16:26.140
So that's just a little clue that if you
want to do something different between

00:16:26.140 --> 00:16:28.890
when something's purchased and restored,
you can check the state and

00:16:28.980 --> 00:16:30.240
know that it was restored.

00:16:31.910 --> 00:16:35.280
Same two options for actually
giving the user their content.

00:16:35.370 --> 00:16:38.540
You can unlock something in your app,
or you can go and pull

00:16:38.540 --> 00:16:40.460
it down from your server.

00:16:40.660 --> 00:16:43.790
Same last step, finish the transaction.

00:16:44.270 --> 00:16:46.800
So now we've talked about all
the code that you need inside

00:16:46.800 --> 00:16:48.090
your application to do this.

00:16:48.270 --> 00:16:49.520
That's it.

00:16:49.540 --> 00:16:52.000
What I want to talk
about next is testing it.

00:16:52.030 --> 00:16:55.120
And that's where the sandbox
environment comes in.

00:16:55.300 --> 00:16:59.070
So the production environment is
what you think of as the app store.

00:16:59.100 --> 00:17:02.130
It's what users are buying your
in-app purchases from when they go

00:17:02.130 --> 00:17:04.300
and get your app from the app store.

00:17:04.530 --> 00:17:07.800
We have what is essentially a copy
of that that we call the sandbox.

00:17:07.820 --> 00:17:11.090
And the purpose is that you can
hit it and have real transactions

00:17:11.090 --> 00:17:14.280
and buy things as much as you
want without using real money.

00:17:14.450 --> 00:17:16.090
Sounds amazing, right?

00:17:16.290 --> 00:17:20.600
So you're working on an app,
either on an iPad, iOS device,

00:17:20.630 --> 00:17:21.700
or your Mac.

00:17:21.800 --> 00:17:24.480
How can you get it to
talk to the sandbox?

00:17:24.500 --> 00:17:28.260
Well,
StoreKit knows which environment to point

00:17:28.340 --> 00:17:31.370
at based on the signature on your app.

00:17:31.610 --> 00:17:33.800
So if an app comes
right out of the store,

00:17:33.810 --> 00:17:36.290
it's going to point to
production naturally.

00:17:36.560 --> 00:17:38.540
If you've signed it with
your development cert,

00:17:38.560 --> 00:17:41.300
we will automatically point to sandbox.

00:17:41.420 --> 00:17:42.520
I do want to point out.

00:17:42.540 --> 00:17:45.160
That should you forget to
sign your application at all,

00:17:45.180 --> 00:17:47.700
which is a little bit
easier to do on the Mac,

00:17:47.790 --> 00:17:49.090
we're not going to hit any server.

00:17:49.140 --> 00:17:51.200
So if you're just getting
back errors all the time,

00:17:51.200 --> 00:17:53.310
make sure your application is signed.

00:17:54.010 --> 00:17:57.210
The question comes up quite often,
how can I know for sure that

00:17:57.210 --> 00:17:58.800
I am pointed to the sandbox?

00:17:58.900 --> 00:18:03.350
Well, the easiest way to do that is to
look in any dialogue that comes up,

00:18:03.350 --> 00:18:05.330
and it will say environment sandbox.

00:18:05.440 --> 00:18:07.700
So that obviously doesn't
happen on the production store,

00:18:07.780 --> 00:18:10.770
but this is your clue that you are
successfully pointing to sandbox.

00:18:10.770 --> 00:18:16.490
A few notes about the sandbox
environment and how to get set up.

00:18:16.960 --> 00:18:20.940
You're going to want to first do a
little bit of setup in iTunes Connect.

00:18:20.990 --> 00:18:23.040
You're going to want
to create a test user.

00:18:23.110 --> 00:18:25.380
You obviously have a user
for the real app store.

00:18:25.500 --> 00:18:28.270
You need a separate one for
the test sandbox environment.

00:18:28.340 --> 00:18:32.680
And I do want to point out that you can
use the same users across iOS and Mac.

00:18:32.710 --> 00:18:34.750
You only need one for both.

00:18:34.830 --> 00:18:38.600
You'll also want to enter information
about the products that are for sale.

00:18:38.690 --> 00:18:40.160
So the server needs to know about them.

00:18:40.290 --> 00:18:42.380
That's the setup step.

00:18:42.490 --> 00:18:45.540
From there, you want to build and
sign your application,

00:18:45.590 --> 00:18:46.810
of course.

00:18:46.890 --> 00:18:48.560
And on the Mac,
there's one additional step,

00:18:48.560 --> 00:18:50.210
which is fetching a receipt.

00:18:50.380 --> 00:18:52.320
All Mac apps have a
receipt inside of them.

00:18:52.370 --> 00:18:54.160
Not going to go into
detail at this moment,

00:18:54.160 --> 00:18:58.240
but I will point you to information
on how to do that a little bit later.

00:19:13.140 --> 00:19:13.140
So that's everything you need
to know to write the code in

00:19:13.140 --> 00:19:13.140
your application and test it.

00:19:13.370 --> 00:19:16.500
I want to focus now on that
purchase queue again because

00:19:16.740 --> 00:19:18.540
it's really important.

00:19:18.670 --> 00:19:21.480
So let's first survey all the
different players that are

00:19:21.480 --> 00:19:23.140
involved with the purchase.

00:19:23.210 --> 00:19:25.810
There's your app, of course,
which links against the

00:19:25.900 --> 00:19:27.760
Store Kit framework.

00:19:28.000 --> 00:19:33.430
has been the first to launch
a new app called iTunes Store,

00:19:33.560 --> 00:19:36.690
which has the SK Payment Queue.

00:19:36.690 --> 00:19:41.610
Now, you've done as we recommended,
hopefully,

00:19:41.610 --> 00:19:41.720
and you've registered in an observer
on the launch of your application.

00:19:41.720 --> 00:19:41.720
And the last player involved
is the iTunes Store,

00:19:41.720 --> 00:19:41.720
which lives someplace across the cloud.

00:19:42.010 --> 00:19:45.260
So the user has chosen to buy something.

00:19:45.360 --> 00:19:47.820
You've created an SK payment object.

00:19:47.830 --> 00:19:51.520
And of course, you've added it to the
queue to start the process.

00:19:51.540 --> 00:19:55.770
What Store Kit will do is wrap that
payment in an SK transaction so

00:19:55.780 --> 00:19:59.520
that we can keep track of some state
between Store Kit and the server.

00:19:59.530 --> 00:20:02.030
And we'll hand it over to the server.

00:20:02.040 --> 00:20:05.480
The server will charge the credit card,
actually complete the purchase,

00:20:05.630 --> 00:20:09.160
and we'll hand it back to
Store Kit when it's successful.

00:20:09.630 --> 00:20:12.800
At that point, we'd like to hand it
back to your application,

00:20:12.820 --> 00:20:15.510
but this is where things
get really interesting.

00:20:15.810 --> 00:20:17.500
Your application might not be there.

00:20:17.650 --> 00:20:21.520
So the user could be on an iPhone,
and they were on a train and

00:20:21.520 --> 00:20:22.970
literally just entered a tunnel.

00:20:22.970 --> 00:20:26.040
Or it could be as simple as
they just quit your application.

00:20:26.050 --> 00:20:27.890
I would say maybe it crashes,
but of course,

00:20:27.970 --> 00:20:30.180
that doesn't happen to our applications,
right?

00:20:31.520 --> 00:20:35.410
Now, how do we know when to
give it back to you?

00:20:35.410 --> 00:20:40.060
Well, that is why it's so important that
when your application does come back,

00:20:40.060 --> 00:20:42.910
you register that observer,
because there could be

00:20:42.960 --> 00:20:45.030
something still in the queue,
and that's when we know

00:20:45.030 --> 00:20:46.060
to hand it back to you.

00:20:47.020 --> 00:20:51.550
So the takeaways from here are, first,
register that observer on launch,

00:20:51.550 --> 00:20:55.050
because something could come
out of the queue at any time.

00:20:55.400 --> 00:21:06.100
[Transcript missing]

00:21:06.280 --> 00:21:10.090
So now that we've focused on that,
I want to tell you about a

00:21:10.100 --> 00:21:12.940
great new feature that we have.

00:21:13.510 --> 00:21:17.020
Starting with iOS 6 and Mountain Lion.

00:21:17.230 --> 00:21:21.710
We previously said you have two choices
for making your asset available.

00:21:22.500 --> 00:21:34.000
[Transcript missing]

00:21:37.000 --> 00:21:40.390
We think this is really exciting,
especially for small developers.

00:21:40.480 --> 00:21:41.610
Why is it so exciting?

00:21:41.620 --> 00:21:46.600
Well, the main reason is you no longer
need to host this content yourself.

00:21:46.660 --> 00:21:50.970
This is going to save you tons
of time and money and bugs.

00:21:51.340 --> 00:21:55.230
You can also depend on the scalability
and reliability of the app store itself.

00:21:55.310 --> 00:21:57.760
So you write some really cool app.

00:21:57.800 --> 00:22:00.200
It gets successful overnight.

00:22:00.250 --> 00:22:00.670
Great.

00:22:00.860 --> 00:22:02.610
You don't have to drive off
to North Carolina and set

00:22:02.690 --> 00:22:03.760
up your own data center.

00:22:03.790 --> 00:22:05.540
We've actually already done that for you.

00:22:05.570 --> 00:22:08.540
So you can just rely on us for that.

00:22:08.540 --> 00:22:12.640
It's also going to save a lot of time
on the client side with our easy-to-use

00:22:12.640 --> 00:22:14.680
API that we're about to go into.

00:22:14.720 --> 00:22:17.790
Again, saving you development time.

00:22:17.900 --> 00:22:31.500
[Transcript missing]

00:22:31.690 --> 00:22:33.890
And finally,
you can take advantage of background

00:22:33.890 --> 00:22:37.740
downloads both on iOS and the Mac.

00:22:40.400 --> 00:22:46.120
So what that means is that if
the user quits your application,

00:22:46.140 --> 00:22:48.770
we'll keep downloading it
for you pursuant to certain

00:22:48.770 --> 00:22:50.400
battery-related cases.

00:22:50.430 --> 00:22:53.520
A few more notes about
this hosted content.

00:22:53.800 --> 00:22:57.800
There is no additional cost
to host your content with us.

00:23:01.750 --> 00:23:05.600
As you know, it's a 30/70 revenue split,
and that continues to be the case even

00:23:05.600 --> 00:23:08.350
if you host your content with Apple.

00:23:08.730 --> 00:23:11.800
There is a 2GB limit per product.

00:23:11.800 --> 00:23:14.220
And then there's a few things
I want to point out that are not

00:23:14.280 --> 00:23:18.180
different from In-App Purchas
before but are worth mentioning.

00:23:18.250 --> 00:23:21.250
They do go through review,
so they need to be approved

00:23:21.250 --> 00:23:23.120
before they go live to users.

00:23:24.300 --> 00:23:27.060
They can't contain code,
nothing that's executable,

00:23:27.180 --> 00:23:30.150
and whatever's inside them has to
follow the same rules for content

00:23:30.410 --> 00:23:32.400
that applications do themselves.

00:23:32.430 --> 00:23:35.940
There's not a backdoor to sneak
new content into your apps.

00:23:36.100 --> 00:23:39.140
So, knowing that,
here's the overall process

00:23:39.140 --> 00:23:40.660
for how this works.

00:23:40.740 --> 00:23:42.440
It's pretty simple.

00:23:42.440 --> 00:23:45.140
You're going to build and test
your content just like before,

00:23:45.280 --> 00:23:49.700
write an issue to your magazine,
make those recipes, levels to a game.

00:23:49.800 --> 00:23:53.200
Now, instead of just putting
metadata in iTunes Connect,

00:23:53.390 --> 00:23:57.090
you're going to actually upload
that asset to iTunes Connect.

00:24:21.210 --> 00:24:22.090
So let's actually go through the
same steps we did for Purchas and

00:24:22.090 --> 00:24:22.090
just look where there are changes
now that when you have content

00:24:22.090 --> 00:24:22.090
that's hosted with the App Store.

00:24:22.090 --> 00:24:22.090
First step, getting your identifiers.

00:24:22.090 --> 00:24:22.090
No change there.

00:24:22.090 --> 00:24:22.090
Get them from your bundle or
get them from your server.

00:24:23.140 --> 00:24:25.220
Second step, getting that information.

00:24:25.270 --> 00:24:28.690
Well, setting up the SK products
request object is the same,

00:24:28.750 --> 00:24:33.810
but there are a few new fields on the
SK product objects that you get back.

00:24:33.860 --> 00:24:35.040
The first one is a Bool.

00:24:35.090 --> 00:24:36.020
It's downloadable.

00:24:36.210 --> 00:24:40.520
And that will be yes if that product
is hosted with the App Store,

00:24:40.600 --> 00:24:42.020
or no if it's not.

00:24:42.080 --> 00:24:44.430
If it is, you can get a content version.

00:24:44.660 --> 00:24:47.500
This is something you will set,
something like 1.0.1,

00:24:47.500 --> 00:24:50.280
whatever the case may be,
just like an app version.

00:24:50.370 --> 00:24:53.090
And you can get a content length
so you know how big ahead of time

00:24:53.090 --> 00:24:54.620
that download is going to be.

00:25:04.700 --> 00:25:04.900
You'll notice it's an array.

00:25:04.900 --> 00:25:04.900
This is a future-proofed API,
so you'll notice that we're

00:25:04.900 --> 00:25:04.900
plural in a few cases,
but you can expect one

00:25:04.900 --> 00:25:04.900
content length here for now.

00:25:05.710 --> 00:25:07.180
Next step, showing the UI.

00:25:07.450 --> 00:25:10.280
Same as before,
it's entirely up to you what you want

00:25:10.280 --> 00:25:12.630
to do inside of your application.

00:25:13.600 --> 00:25:15.100
Making the purchase?

00:25:15.440 --> 00:25:16.500
Same as before.

00:25:16.650 --> 00:25:19.770
Create an escape payment,
add it to that queue.

00:25:20.650 --> 00:25:22.660
Processing the transaction
is where things start to get

00:25:22.680 --> 00:25:24.300
a little bit interesting.

00:25:24.410 --> 00:25:31.120
Same callback, loop through it,
but now in iOS 6.0 and Mountain Lion,

00:25:31.150 --> 00:25:34.640
each transaction object
has an array of downloads.

00:25:34.970 --> 00:25:37.320
If that's not nil,
it means that there's a download

00:25:37.320 --> 00:25:41.890
that's hosted with the App Store.

00:25:41.890 --> 00:25:42.480
So you can check that to know
if you have something hosted.

00:25:42.630 --> 00:25:45.360
To start the downloads,
it's as simple as calling a new

00:25:45.360 --> 00:25:50.080
method on the purchase queue,
Start Downloads, and we'll kick it off.

00:25:51.570 --> 00:25:55.300
So before we said making your asset
available was the step where you would

00:25:55.300 --> 00:25:56.880
download something from your server.

00:25:56.930 --> 00:26:00.500
Now it's the step where you're going
to download something from our server.

00:26:00.620 --> 00:26:03.440
We have a new callback
method on the queue,

00:26:03.580 --> 00:26:05.640
updated downloads,
that we're going to call over and

00:26:05.640 --> 00:26:08.460
over again as the download proceeds,
and we'll continue to give you download

00:26:08.460 --> 00:26:11.460
progress about the state of the download.

00:26:12.030 --> 00:26:13.720
Each download in that
array is a new class,

00:26:13.800 --> 00:26:16.810
skdownload, and I want to show you a
few of the properties that

00:26:16.920 --> 00:26:18.550
are available to you on it.

00:26:18.690 --> 00:26:19.920
Notably, there's progress.

00:26:19.970 --> 00:26:22.430
It's going to be a
number between 0 and 1.

00:26:22.540 --> 00:26:25.770
1 means 100% of your
download is complete.

00:26:25.860 --> 00:26:29.660
We'll give you a time estimate in
seconds so that if you'd like to include

00:26:29.660 --> 00:26:32.710
that in your UI and give the user
some idea of when it's going to be done,

00:26:32.790 --> 00:26:34.210
you can.

00:26:58.050 --> 00:26:58.050
Then there's state.

00:26:58.050 --> 00:26:58.050
As the download goes along,
it goes through different states.

00:26:58.050 --> 00:26:58.050
It could be active,
meaning we're downloading

00:26:58.050 --> 00:26:58.050
this thing right now.

00:26:58.050 --> 00:26:58.050
It could be waiting,
meaning we're downloading something

00:26:58.050 --> 00:26:58.050
else and this one is waiting.

00:26:58.050 --> 00:26:58.050
It could be finished.

00:26:58.050 --> 00:26:58.050
That means we're done, of course.

00:26:58.050 --> 00:26:58.050
And I do want to say on that that
it's better to know -- to check for

00:26:58.050 --> 00:26:58.050
the state being finished to know
when a download is done as opposed

00:26:58.050 --> 00:26:58.050
to checking that the progress is won.

00:26:58.050 --> 00:26:58.050
So keep that in mind.

00:27:14.940 --> 00:27:14.940
A download could be failed or it
could be paused or canceled if

00:27:14.940 --> 00:27:14.940
that's what the user did to it.

00:27:14.940 --> 00:27:14.940
If it is failed, there'll be an error.

00:27:14.940 --> 00:27:14.940
And if it's finished,
there'll be a content URL property.

00:27:14.940 --> 00:27:14.940
This is a URL to the location on
disk where we just put this content.

00:27:15.600 --> 00:27:17.980
So knowing that about SK Download,
let's go back and talk

00:27:18.060 --> 00:27:19.670
about showing progress.

00:27:19.760 --> 00:27:23.170
Well, you'll want to respond in your
observer to that updated downloads

00:27:23.200 --> 00:27:27.700
method and pull out the progress
and the time remaining to update

00:27:27.700 --> 00:27:30.020
whatever UI you have in your app.

00:27:30.310 --> 00:27:32.870
You could also choose-- you
should look at the state,

00:27:32.870 --> 00:27:37.300
and if it's failed,
handle that error accordingly in your UI.

00:27:37.620 --> 00:27:40.860
Now, if you want to give the user the
option of pausing and resuming,

00:27:40.860 --> 00:27:45.200
you can do so with-- or canceling-- with
three new methods on the payment queue.

00:27:45.360 --> 00:27:48.400
They all take an array of downloads,
just like start downloads did,

00:27:48.490 --> 00:27:50.830
and you just hand them,
and Store Kit will do

00:27:50.830 --> 00:27:52.920
whatever that action is.

00:27:53.780 --> 00:27:57.800
We talked about accessing the content,
when the download is finished,

00:27:57.800 --> 00:27:59.770
and only when it's finished.

00:28:00.220 --> 00:28:04.710
That content URL property will be
populated and you can use it to

00:28:04.710 --> 00:28:08.090
know where on disk that stuff is.

00:28:08.400 --> 00:28:10.420
Final step, finish the transaction.

00:28:10.540 --> 00:28:12.680
Same as before, no change there.

00:28:12.680 --> 00:28:15.720
Always call Finish Transaction.

00:28:16.910 --> 00:28:17.610
How about a restore?

00:28:17.670 --> 00:28:18.880
How does it change a restore?

00:28:18.910 --> 00:28:22.100
Well, it's really almost identical.

00:28:22.120 --> 00:28:25.210
The one thing I want to point out is
that you should continue to check for

00:28:25.330 --> 00:28:29.160
transaction.downloads to know if this is
something that's hosted with the store.

00:28:29.220 --> 00:28:34.360
And the difference with this restore
is that you should choose-- it's

00:28:34.480 --> 00:28:37.680
your decision whether you actually
want to do the download or not.

00:28:37.740 --> 00:28:39.800
With a purchase,
the user just bought one thing,

00:28:39.800 --> 00:28:41.200
they probably want it right away.

00:28:41.220 --> 00:28:43.440
With a restore,
they're getting everything they ever

00:28:43.440 --> 00:28:47.630
purchased and they might not want all of
that content to be downloaded at once.

00:28:47.750 --> 00:28:49.980
So depending on what
they did in your app,

00:28:50.000 --> 00:28:53.010
it might make sense to show them
what they bought and not necessarily

00:28:53.020 --> 00:28:55.250
download all of that content,
which they could do on

00:28:55.250 --> 00:28:56.240
a subsequent restore.

00:28:56.440 --> 00:28:57.570
So keep that in mind.

00:28:57.880 --> 00:29:00.500
But regardless of whether you
actually do the download or not,

00:29:00.530 --> 00:29:03.000
always call finish transaction.

00:29:03.340 --> 00:29:08.330
And so those are all of the code changes
that it will take to use App Store hosted

00:29:08.340 --> 00:29:10.970
content inside of your application.

00:29:11.180 --> 00:29:12.870
But what actually are these things?

00:29:12.930 --> 00:29:15.430
I want to talk about the content,
what it is on disk,

00:29:15.610 --> 00:29:17.600
and how you're going to build it.

00:29:17.650 --> 00:29:18.770
Well, it's basically a folder.

00:29:18.780 --> 00:29:21.380
It's a folder with whatever data
you want to put inside of it that

00:29:21.380 --> 00:29:23.150
makes sense for your application.

00:29:23.220 --> 00:29:27.410
Just a couple of things that we
need-- a content Info.plist right at

00:29:27.410 --> 00:29:32.010
the root level of it with two keys,
a content version provided by you,

00:29:32.010 --> 00:29:36.980
something like 1.0,
and an IAP product identifier.

00:29:37.030 --> 00:29:40.590
This is the unique identifier
that should match whatever unique

00:29:40.590 --> 00:29:43.990
identifier you put in iTunes Connect.

00:29:45.200 --> 00:29:47.080
The other thing that you need
is inside of the main folder,

00:29:47.080 --> 00:29:49.490
there should be a subfolder
that's called Contents,

00:29:49.580 --> 00:29:53.800
and inside of there is where you can
put really whatever data you want.

00:29:53.910 --> 00:29:55.080
So that's what it is.

00:29:55.140 --> 00:29:57.890
Looking at it another way,
if the slash is that folder,

00:29:57.970 --> 00:30:00.960
you have ContentInfo.plist,
a Contents folder,

00:30:01.020 --> 00:30:02.550
and then I have a couple
movies here as examples,

00:30:02.630 --> 00:30:05.170
but you would put whatever data you need.

00:30:05.270 --> 00:30:06.990
And that's what it is.

00:30:07.090 --> 00:30:08.020
How do you make it?

00:30:08.330 --> 00:30:11.860
Well, we have updated Xcode and
Application Loader to make

00:30:11.910 --> 00:30:13.600
this super easy for you.

00:30:13.730 --> 00:30:16.260
So when you add a new
target to your project now,

00:30:16.260 --> 00:30:21.200
you'll see choices to create in-app
content for both iOS and the Mac.

00:30:21.310 --> 00:30:23.270
Choose that,
and you'll be given the chance to

00:30:23.320 --> 00:30:25.000
enter some information about it.

00:30:25.100 --> 00:30:28.500
We're going to talk in a minute about
an application that lets you buy fruit,

00:30:28.620 --> 00:30:30.300
so here we're selling a banana.

00:30:30.400 --> 00:30:34.990
And this is your chance to
enter that unique identifier.

00:30:35.100 --> 00:30:38.600
Do that,
and Xcode will set up everything for you.

00:30:38.610 --> 00:30:39.560
A lot going on here.

00:30:39.660 --> 00:30:41.400
I want to point out two things.

00:30:41.530 --> 00:30:45.000
First, here's where Xcode has added
the folder and file for me.

00:30:45.070 --> 00:30:47.500
It's added ContentInfo.plist for me.

00:30:47.560 --> 00:30:51.110
I added that banana picture to
represent whatever data it is that you

00:30:51.110 --> 00:30:53.890
would want to add for this product.

00:31:02.310 --> 00:31:02.310
And when I look at my target,
Xcode gives me an easy way

00:31:02.310 --> 00:31:02.310
to enter information for it,
a version and the

00:31:02.310 --> 00:31:02.310
unique identifier again.

00:31:02.530 --> 00:31:04.800
So once you build a
great level to your game,

00:31:04.800 --> 00:31:07.940
you're issued to a magazine,
and you've tested it in Xcode,

00:31:07.940 --> 00:31:10.040
you're ready to upload
it to iTunes Connect.

00:31:10.150 --> 00:31:11.700
Xcode helps you there too.

00:31:11.700 --> 00:31:16.230
You can archive one of these targets
just like you do your application,

00:31:16.230 --> 00:31:18.940
and you can distribute it using Xcode.

00:31:18.940 --> 00:31:22.210
So Xcode can upload it
for you to iTunes Connect.

00:31:22.260 --> 00:31:25.330
Alternatively,
you can use Application Loader

00:31:25.330 --> 00:31:29.100
to both enter in-app purchases
and upload this content.

00:31:29.100 --> 00:31:32.320
So the tools are there to support you.

00:31:32.400 --> 00:31:33.500
Thank you.

00:31:34.460 --> 00:31:37.340
I want to now come back to
where these things live on disk

00:31:37.460 --> 00:31:41.200
because this is one of the few
differences between iOS and the Mac.

00:31:41.310 --> 00:31:45.060
On iOS,
we're going to put it in caches to start,

00:31:45.130 --> 00:31:47.430
so it won't be purgeable
while we're downloading it,

00:31:47.500 --> 00:31:50.320
but like other things in caches,
after you call finish transaction,

00:31:50.320 --> 00:31:52.310
it will be purgeable.

00:31:52.410 --> 00:31:55.360
If that's not what you want,
then you'll want to move that

00:31:55.430 --> 00:31:58.500
content to the Documents folder
or someplace that makes sense.

00:31:58.500 --> 00:32:00.040
It'll stay local then.

00:32:00.040 --> 00:32:00.700
It won't be purgeable.

00:32:00.700 --> 00:32:04.440
If you then want it to be backed up,
you'll need to set a flag on the

00:32:04.600 --> 00:32:08.190
content so that it will be backed
up either to iCloud or iTunes,

00:32:08.700 --> 00:32:10.420
depending on the user's settings.

00:32:10.420 --> 00:32:13.060
So in iOS,
as soon as that download is done,

00:32:13.060 --> 00:32:16.990
it's your responsibility to move
the content if you want to move it

00:32:16.990 --> 00:32:19.400
and to track where it is henceforth.

00:32:20.120 --> 00:32:21.530
A little different on the Mac.

00:32:21.530 --> 00:32:25.410
On the Mac, we put it in a special
application support folder,

00:32:25.410 --> 00:32:28.210
and we give you APIs to access it.

00:32:28.250 --> 00:32:29.370
Two APIs.

00:32:29.380 --> 00:32:32.840
These are both class
methods on SK Download.

00:32:32.840 --> 00:32:35.560
The first one takes one of those
unique product identifiers and

00:32:35.560 --> 00:32:37.140
gives you the URL to the content.

00:32:37.140 --> 00:32:39.410
And should you want to clean
up and make some space,

00:32:39.410 --> 00:32:41.050
the second one lets you delete it.

00:32:41.100 --> 00:32:44.010
So I want to point out that
these are really for subsequent

00:32:44.100 --> 00:32:45.850
launches of your application.

00:32:45.860 --> 00:32:48.810
When the user actually did the purchase,
then we had that download

00:32:48.840 --> 00:32:49.860
that content URL.

00:32:49.860 --> 00:32:51.930
And the third one is the
URL that you can use to go get

00:32:52.000 --> 00:32:53.450
the location of the content.

00:32:53.470 --> 00:32:56.170
So if you relaunch your app,
you don't have that,

00:32:56.170 --> 00:32:58.800
you need these APIs to
go and get that content.

00:32:58.830 --> 00:33:01.460
Of course, on the Mac,
we recommend checking your receipt,

00:33:01.460 --> 00:33:03.460
getting the product
identifiers from there,

00:33:03.460 --> 00:33:05.790
so you'll have them to go
and look up this content.

00:33:05.800 --> 00:33:08.030
And that's where it
actually gets installed.

00:33:08.040 --> 00:33:11.820
Now, there might be a time when
you want to update content.

00:33:11.820 --> 00:33:13.210
How can you do that?

00:33:13.220 --> 00:33:14.560
So you do have a recipe app.

00:33:14.560 --> 00:33:18.110
You're selling for a dollar grandma's
famous chicken noodle soup recipe,

00:33:18.170 --> 00:33:20.040
and you forgot the main ingredient.

00:33:20.040 --> 00:33:21.330
Grandma ain't gonna be happy.

00:33:21.330 --> 00:33:24.380
How do we update this content when
it's already out on users' devices?

00:33:24.380 --> 00:33:27.750
Well, naturally,
first you need to edit the content.

00:33:27.820 --> 00:33:29.880
So if you have a level
to a game or a recipe,

00:33:29.950 --> 00:33:33.040
you need to change whatever files,
whatever content needs to be

00:33:33.160 --> 00:33:34.770
changed to make that happen.

00:33:34.800 --> 00:33:38.230
You'll want to bump that
version in content Info.plist.

00:33:38.230 --> 00:33:41.480
So if it was 1.0, maybe it's 1.0.1 now.

00:33:41.960 --> 00:33:45.130
And re-upload it to iTunes Connect.

00:33:45.560 --> 00:33:47.740
Nothing automatic happens from there.

00:33:47.910 --> 00:33:49.740
For the content to get
to a user's machine,

00:33:49.740 --> 00:33:52.500
they need to initiate a restore.

00:33:52.940 --> 00:33:56.680
So if you should choose to prompt
the user that there's something new,

00:33:56.680 --> 00:33:58.670
this is how you can do it.

00:33:58.750 --> 00:34:02.000
You'll first want to get the SK products,
just like we did before when we

00:34:02.000 --> 00:34:05.350
were making a purchase so you have
all the up-to-date information.

00:34:05.430 --> 00:34:08.810
And you want to compare the
version there with the version

00:34:08.810 --> 00:34:10.770
in your contentinfo.plist.

00:34:10.790 --> 00:34:13.960
So essentially,
check the version of what's on disk

00:34:13.960 --> 00:34:16.390
with the version that's on the server.

00:34:16.390 --> 00:34:19.670
And if what's on the server is newer,
you know that there's a new

00:34:19.670 --> 00:34:19.670
version of your content available.

00:34:20.730 --> 00:34:23.320
One note for those of you who
already use In-App Purchas and

00:34:23.410 --> 00:34:26.840
would like to transition to hosting
your content with the App Store,

00:34:26.980 --> 00:34:31.360
and that's that these products must be
listed as new products in iTunes Connect.

00:34:31.480 --> 00:34:34.840
There's no magical bit that can be
flipped to take something existing

00:34:34.840 --> 00:34:36.670
and start hosting it with the store.

00:34:36.810 --> 00:34:39.670
So you do need to support any
products that you're already selling.

00:34:41.820 --> 00:34:43.480
So with that,
I'd like to take you through

00:34:43.480 --> 00:34:45.200
how this actually works.

00:34:45.260 --> 00:34:48.820
We are going to be looking
at an app called Fruit Stand.

00:34:48.820 --> 00:34:52.130
And Fruit Stand is a silly little thing
that lets you buy pictures of fruit.

00:34:52.130 --> 00:34:54.590
And we are going to take it
from where it was last year,

00:34:54.590 --> 00:34:57.150
where you could buy pictures
that were already inside of

00:34:57.150 --> 00:34:58.710
the bundle of the application.

00:34:58.800 --> 00:35:01.470
We just unlocked them to using
App Store hosted content.

00:35:01.480 --> 00:35:03.520
So let's go ahead and do that.

00:35:04.400 --> 00:35:05.350
So here's Fruit Stand.

00:35:05.350 --> 00:35:06.330
Let me show you around.

00:35:08.180 --> 00:35:10.860
First thing we're doing up here
is just logging what's going

00:35:10.860 --> 00:35:12.560
on so that it's easy to see.

00:35:12.610 --> 00:35:15.500
You notice we already added
an observer onto the queue,

00:35:15.540 --> 00:35:19.170
and we've loaded product
identifiers in from the bundle.

00:35:38.710 --> 00:35:38.710
So in our case,
we just have them in the bundle.

00:35:38.710 --> 00:35:38.710
Not talking to a server, very simple.

00:35:38.710 --> 00:35:38.710
We have a button here that will
start fetching that product info.

00:35:38.710 --> 00:35:38.710
When we get it,
the idea is that we will populate

00:35:38.710 --> 00:35:38.710
a list of things for sale.

00:35:38.710 --> 00:35:38.710
You can select one and purchase it.

00:35:38.710 --> 00:35:38.710
And if all goes well, the pictures of the
fruit should appear here.

00:35:39.310 --> 00:35:43.020
We also have a downloads window where,
by the end of this,

00:35:43.150 --> 00:35:46.200
we'll hook it up so that we
can see progress of in-app

00:35:46.200 --> 00:35:48.600
content that's being downloaded.

00:35:48.890 --> 00:35:50.750
So now that we've seen it,
let's go and look at how we're

00:35:50.760 --> 00:35:52.720
doing some of this in code.

00:35:52.770 --> 00:35:55.100
Let me make Xcode a little bit bigger.

00:35:55.180 --> 00:35:57.970
So I want to start an application
that did finish launching.

00:35:58.080 --> 00:36:01.020
You notice that the very
first thing we're doing

00:36:01.490 --> 00:36:05.430
is adding that observer, in this case,
self.

00:36:05.830 --> 00:36:09.010
We get our product
identifiers from the bundle.

00:36:21.610 --> 00:36:21.610
We'll do some things that
are Fruit Stand specific.

00:36:21.610 --> 00:36:21.610
And here we're showing content
that was previously purchased.

00:36:21.610 --> 00:36:21.610
So we haven't bought anything yet,
but if we had,

00:36:21.610 --> 00:36:21.610
this would be where we go and
get the pictures of fruit already

00:36:21.610 --> 00:36:21.610
and load them into our app.

00:36:22.390 --> 00:36:25.990
Here's the IB action that responds
to that Fetch Product Info button.

00:36:26.110 --> 00:36:28.980
And you can see in here,
we're taking those identifiers

00:36:29.060 --> 00:36:31.770
that we got from our bundle,
and we're creating an NS set

00:36:31.930 --> 00:36:33.900
so that they're unique.

00:36:34.020 --> 00:36:37.080
And we're creating our
SK Products Request object.

00:36:37.670 --> 00:36:40.800
Set yourself as the
delegate and call start,

00:36:40.900 --> 00:36:43.510
and Store Kit will go
and talk to the server.

00:36:45.250 --> 00:36:48.600
Here are those two callback methods
that we talked about earlier.

00:36:48.700 --> 00:36:50.850
If there's an error,
you'll want to handle it in some

00:36:50.850 --> 00:36:52.600
way that's appropriate for your UI.

00:36:52.730 --> 00:36:55.730
But if it's successful,
you'll have a response object with

00:36:55.730 --> 00:36:58.940
an array of products that you'll
want to keep around for later.

00:36:59.050 --> 00:37:03.870
You'll also want to update your UI so
that the user knows what they can buy.

00:37:03.870 --> 00:37:05.570
So let's look at that.

00:37:12.270 --> 00:37:29.280
So we click Fetch Product Info.

00:37:29.280 --> 00:37:29.280
Here you can see all the
things that are for sale now.

00:37:29.280 --> 00:37:29.280
So you can see that we took the
title and the price out of the

00:37:29.280 --> 00:37:29.280
SK products that we get back from the
server and we're putting them here.

00:37:29.280 --> 00:37:29.280
But

00:37:29.740 --> 00:37:32.730
I want to point out the additional
information that you have available to

00:37:32.730 --> 00:37:34.560
you now that you're using hosted content.

00:37:34.680 --> 00:37:37.540
So let's go back into the
code and make a change.

00:37:37.650 --> 00:37:41.140
So let's look inside of where
we're actually updating that table.

00:37:41.260 --> 00:37:43.810
So this is specific to our demo app,
but I want to point a

00:37:43.850 --> 00:37:44.880
couple of things out.

00:37:44.990 --> 00:37:48.360
You can see we're iterating
over the products,

00:37:48.530 --> 00:37:51.190
setting up our price,
and creating that string,

00:37:51.210 --> 00:37:52.670
which is what you see.

00:37:53.290 --> 00:37:57.500
But what we can do now,
should you choose to,

00:37:57.510 --> 00:38:01.590
is you can check product.downloadable
to know if this is something

00:38:01.590 --> 00:38:03.720
that's hosted with the store.

00:38:03.830 --> 00:38:09.410
So let's go ahead and put
the old string in here.

00:38:09.490 --> 00:38:12.140
And although this wasn't running--

00:38:15.400 --> 00:38:17.280
Let's see if that took effect.

00:38:17.280 --> 00:38:20.600
In fact, that's not the version
that we're running.

00:38:20.600 --> 00:38:25.510
Let's just make sure that
we have an executable.

00:38:28.940 --> 00:38:32.310
Well, this is a good chance to
show you fetching a receipt.

00:38:32.340 --> 00:38:36.980
So the first time you
want to fetch a receipt,

00:38:37.150 --> 00:38:39.770
you'll need to run it outside of Xcode.

00:38:40.460 --> 00:38:43.890
Once you do that,
you'll be prompted to log into the store,

00:38:43.890 --> 00:38:47.910
assuming you exit with
the right exit code.

00:38:50.430 --> 00:38:53.900
And once we have a receipt,
your app will relaunch.

00:38:53.920 --> 00:38:56.300
So we have a receipt inside
of our application now.

00:38:56.330 --> 00:38:58.120
We can go back to Xcode and run it.

00:38:58.390 --> 00:39:01.720
And this time,
Fruit Stand will run for real.

00:39:02.630 --> 00:39:05.390
Fresh product information now,
and you can see that change

00:39:05.390 --> 00:39:07.100
that we made taking effect.

00:39:07.210 --> 00:39:10.280
So we only have the lemon that's
actually inside the bundle now.

00:39:10.300 --> 00:39:13.390
The other pieces of fruit
are hosted with the store.

00:39:13.710 --> 00:39:17.130
So you wouldn't really want to
do this inside your application

00:39:17.240 --> 00:39:20.280
and show that they're hosted,
but should you want to

00:39:20.350 --> 00:39:23.690
know which ones are hosted,
you have that Boolean to take

00:39:24.150 --> 00:39:25.730
advantage of on your SK product.

00:39:25.730 --> 00:39:29.030
So now you should be able to
select something and buy it,

00:39:29.030 --> 00:39:30.750
but we have a little work to
do yet before that's done.

00:39:32.730 --> 00:39:37.710
So here's the IB action that's called
when you click on that purchase button.

00:39:37.970 --> 00:39:41.010
We're going to figure out from
that table which piece of fruit the

00:39:41.010 --> 00:39:45.140
user was intending to buy and get
the SK product associated with it.

00:39:45.250 --> 00:39:49.370
Create an SK payment with that product,
and we're going to add it to the queue.

00:39:49.530 --> 00:39:52.290
And that's going to start
the purchase process.

00:39:52.790 --> 00:39:56.240
So here's that infamous
callback updated transactions.

00:39:56.300 --> 00:39:59.020
You can see that we're looping
through the transactions,

00:39:59.070 --> 00:40:02.180
and we're switching on the
state and handling each state.

00:40:02.240 --> 00:40:05.960
But what I want to show you is
just the purchase state for now.

00:40:06.100 --> 00:40:08.960
We're going to look inside
Providing Content for Transaction.

00:40:09.030 --> 00:40:13.020
And here you can see the way that
we were doing things up until now,

00:40:13.310 --> 00:40:15.380
which is just getting
fruit from our bundle.

00:40:15.480 --> 00:40:18.320
So we're getting an image
actually inside of our bundle.

00:40:18.380 --> 00:40:19.790
We're showing it in the UI.

00:40:19.890 --> 00:40:22.180
And of course,
we're calling Finish Transaction.

00:40:22.290 --> 00:40:24.490
But we're going to need
to make some changes here,

00:40:24.530 --> 00:40:25.590
so let's do that.

00:40:52.340 --> 00:40:52.480
Now we actually want
to start the download.

00:40:52.480 --> 00:40:52.480
We can check transaction.downloads
to know that this is hosted.

00:40:52.480 --> 00:40:52.480
This is specific to our demo app,
but we're going to show a progress bar.

00:40:52.480 --> 00:40:52.480
You would do whatever
UI you want to start.

00:40:52.480 --> 00:40:52.480
And you'll just call startDownloads.

00:40:52.480 --> 00:40:52.480
And the downloads will
go ahead and begin.

00:40:52.480 --> 00:40:52.480
Now if there's no downloads,
we'll want to do what we were doing

00:40:52.480 --> 00:40:52.480
before because we know that it's one
of our older in-app purchase items.

00:40:52.740 --> 00:40:57.080
So in order to get progress,
we know that there's a new callback

00:40:57.110 --> 00:40:59.880
that our observer needs to implement,
and that's updated downloads.

00:40:59.980 --> 00:41:01.640
So what's going to go in there?

00:41:01.760 --> 00:41:03.470
Well,
I'm going to drop in a bunch of code,

00:41:03.500 --> 00:41:05.710
and then we're going to talk through it.

00:41:06.760 --> 00:41:08.660
We're going to loop
through those downloads.

00:41:08.680 --> 00:41:10.770
Again, this is a future-proof API.

00:41:11.030 --> 00:41:15.260
Right now, you really just have to
expect one download at a time.

00:41:15.370 --> 00:41:18.420
We're going to log so that
we know what's going on.

00:41:18.440 --> 00:41:21.080
We're going to switch on the
state to do different things.

00:41:21.120 --> 00:41:23.080
But really, we're just updating UI.

00:41:23.170 --> 00:41:27.880
So if we're waiting, paused, or active,
we're just going to update that progress

00:41:28.010 --> 00:41:32.330
bar by pulling out the progress from
that download and the time remaining

00:41:32.330 --> 00:41:34.470
so we can go and update our UI.

00:41:34.790 --> 00:41:38.690
If the download is canceled or failed,
well, it's over, essentially.

00:41:38.840 --> 00:41:41.540
So in addition to
removing the progress bar,

00:41:41.540 --> 00:41:44.290
we also want to call Finish Transaction.

00:41:45.060 --> 00:41:48.610
If the download is finished, well,
we're ready to show our fruit.

00:41:48.760 --> 00:41:50.370
So we do that.

00:42:02.500 --> 00:42:02.500
We also want to update our
progress bar in our download UI,

00:42:02.500 --> 00:42:02.500
and finally, call finish transaction
because we're done.

00:42:02.500 --> 00:42:02.500
So I want to jump inside and show you
how we're showing that piece of fruit.

00:42:04.130 --> 00:42:06.860
So because we know the download
is in the finish state,

00:42:06.940 --> 00:42:09.570
content URL is populated.

00:42:09.610 --> 00:42:13.330
So we're ready to use that
URL to actually show the fruit.

00:42:13.470 --> 00:42:15.530
So that's what we're doing here.

00:42:15.740 --> 00:42:18.690
Having done that,
let's try and do a purchase.

00:42:36.600 --> 00:42:36.600
So let me bring up the download
window so you can see that.

00:42:36.600 --> 00:42:36.600
We'll fetch product info.

00:42:36.600 --> 00:42:36.600
This time we'll choose a piece of
fruit and we'll click purchase.

00:42:36.600 --> 00:42:36.600
You can see we're prompted to make sure
this is really what we want to buy.

00:42:36.600 --> 00:42:36.600
We are in the sandbox and
it's asking me to log in.

00:42:53.290 --> 00:42:53.290
I've already actually
bought a pair before,

00:42:53.290 --> 00:42:53.290
so it's just telling me
that that is the case.

00:42:53.290 --> 00:42:53.290
And when that happens,
you can see it's pretty fast,

00:42:53.290 --> 00:42:53.290
but the download just completed,
and there's our pair.

00:42:53.290 --> 00:42:53.290
Let's do one more of those.

00:43:06.700 --> 00:43:22.900
[Transcript missing]

00:43:23.600 --> 00:43:25.540
So that's great.

00:43:25.570 --> 00:43:28.340
But if I launch the
application a second time,

00:43:28.360 --> 00:43:30.940
you'll notice that the
fruit didn't show up.

00:43:30.970 --> 00:43:32.420
Well, we don't want that.

00:43:32.430 --> 00:43:35.430
If somebody bought something inside
your application and they relaunch it,

00:43:35.430 --> 00:43:36.880
you want them to get that content.

00:43:36.880 --> 00:43:39.110
So we're going to have
to make a change there.

00:43:39.600 --> 00:43:41.710
So I'm going to jump back
to Did Finish Launching,

00:43:41.710 --> 00:43:46.940
and it's time to look at this method,
Show Previously Purchased Content.

00:43:46.990 --> 00:43:49.480
You can see what we're doing right
now only works with something

00:43:49.480 --> 00:43:51.780
that's in the bundle already.

00:43:52.480 --> 00:43:55.230
So we've created this array of
identifiers from the receipt.

00:43:55.270 --> 00:43:58.490
Because Fruit Stand is a Mac app,
we've gone and read the receipt.

00:43:58.530 --> 00:44:01.150
We've verified it was
legitimately purchased.

00:44:01.250 --> 00:44:04.360
And we've pulled out the identifiers
for the things that were bought.

00:44:04.390 --> 00:44:07.100
The receipt on a Mac contains
a record of every single in-app

00:44:07.180 --> 00:44:08.370
purchase that was bought.

00:44:08.460 --> 00:44:09.490
So we have those identifiers.

00:44:09.620 --> 00:44:12.840
And what we're doing now is
loading fruit from our bundle.

00:44:12.880 --> 00:44:15.950
But that's not what we want
to do with hosted content.

00:44:17.780 --> 00:44:21.990
What we want to do with hosted
content is use that identifier and

00:44:21.990 --> 00:44:26.530
the new class method on skdownload
to get the URL to that content.

00:44:26.740 --> 00:44:29.780
If there is a URL,
we know this was in fact hosted.

00:44:29.820 --> 00:44:32.720
And we're setting some state here
that's specific to our demo app.

00:44:32.860 --> 00:44:34.850
You would do whatever you need to do.

00:44:34.940 --> 00:44:37.140
And we're showing that fruit.

00:44:37.300 --> 00:44:43.290
So we can move this old way of
doing things in the else statement.

00:44:59.820 --> 00:44:59.820
And now we should be loading
content into our app on launch,

00:44:59.820 --> 00:44:59.820
whether it's from the bundle,
something we purchased, you know,

00:44:59.820 --> 00:44:59.820
an old product,
or whether it's one that's

00:44:59.820 --> 00:44:59.820
hosted with a store.

00:44:59.820 --> 00:44:59.820
So if we relaunch our application,
you can see there's our fruit.

00:44:59.820 --> 00:44:59.820
Everything is working great.

00:45:00.140 --> 00:45:03.120
So we took a look at Fruit Stand,
silly application,

00:45:03.120 --> 00:45:06.600
but that's what you would need to do
if you want to go from an application

00:45:06.600 --> 00:45:09.560
that already uses in-app purchase
and just gets things out of your

00:45:09.560 --> 00:45:13.980
bundle or your own server to using
the new app store hosted content.

00:45:14.100 --> 00:45:17.210
I'd like to wrap up with
a few best practices.

00:45:18.140 --> 00:45:22.590
The first one is just remember
always to check that queue on launch.

00:45:22.750 --> 00:45:24.750
Transactions can come out
of the queue at any time,

00:45:24.960 --> 00:45:27.080
and you should be ready for them.

00:45:46.910 --> 00:45:46.910
I do want to point out one more
thing about finished transaction.

00:45:46.910 --> 00:45:46.910
If you call it in the
middle of a download that's

00:45:46.910 --> 00:45:46.910
coming from the App Store,
it's the same as a cancel.

00:45:46.910 --> 00:45:46.910
We will cancel the download.

00:45:46.910 --> 00:45:46.910
So you want the download to complete
before you call finished transaction.

00:45:47.440 --> 00:45:49.590
Third, restoring purchases is required.

00:45:49.820 --> 00:45:54.500
Your users need a way to get back all
of the content that they've purchased.

00:45:55.110 --> 00:45:58.930
On iOS, make sure that you move your
content out of caches if you

00:45:58.930 --> 00:46:00.360
don't want it to be purgeable.

00:46:00.550 --> 00:46:02.760
Maybe you do,
depending on your situation,

00:46:02.790 --> 00:46:05.110
but make sure you move it if you don't.

00:46:05.760 --> 00:46:08.120
Always test in Sandbox before deploying.

00:46:08.170 --> 00:46:09.040
Can't say that enough.

00:46:09.040 --> 00:46:13.250
That's the only really legitimate way
to make sure that everything is working.

00:46:13.820 --> 00:46:15.990
So in conclusion,
I just want to say thank you.

00:46:16.070 --> 00:46:19.590
In-App Purchas is a huge success,
and it's because of you guys.

00:46:19.650 --> 00:46:22.350
If you haven't used it,
consider using it and what it

00:46:22.350 --> 00:46:24.010
might do for your application.

00:46:24.070 --> 00:46:26.460
If you have,
consider hosting with the store.

00:46:26.680 --> 00:46:29.170
We think it'll really make
things easier for you.

00:46:29.250 --> 00:46:31.460
And if you've used
In-App Purchas on one platform,

00:46:31.600 --> 00:46:33.880
consider using it on the other.

00:46:33.880 --> 00:46:36.390
We have some great information
to help you with In-App Purchas.

00:46:36.530 --> 00:46:38.440
There's, of course,
our lovely evangelist.

00:46:38.620 --> 00:46:40.520
There's also some really
good documentation.

00:46:40.580 --> 00:46:42.600
There's the In-App Purchas
Programming Guide.

00:46:42.680 --> 00:46:45.890
It talks about everything I talked
about and in much more detail.

00:46:45.980 --> 00:46:49.120
We also have a document on
validating App Store receipts

00:46:49.210 --> 00:46:50.980
for both iOS and the Mac.

00:46:51.010 --> 00:46:53.160
It teaches you everything
you need to know.

00:46:53.250 --> 00:46:55.540
And with that,
let's finish this transaction.

00:46:55.590 --> 00:46:57.380
Thank you very much.