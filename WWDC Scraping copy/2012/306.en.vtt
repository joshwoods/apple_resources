WEBVTT

00:00:10.500 --> 00:00:12.000
My name is Lestat.

00:00:12.010 --> 00:00:14.810
I am an iOS software engineer
and I'm here to talk to you

00:00:14.810 --> 00:00:21.290
about integrating with Facebook,
Twitter, and Sinai Weibo on iOS and OS X.

00:00:21.360 --> 00:00:23.290
So let's get started.

00:00:24.890 --> 00:00:27.330
So far this week you've been fire
hosed with a lot of announcements,

00:00:27.330 --> 00:00:27.750
I'm sure.

00:00:27.960 --> 00:00:31.800
So we're going to start by just
having an overview of the lay

00:00:31.800 --> 00:00:36.160
of the land on iOS and OS X,
see some of the new social features

00:00:36.230 --> 00:00:40.440
that we've brought to both platforms.

00:00:40.490 --> 00:00:44.430
On iOS 6, you're all familiar, I'm sure,
with Twitter integration,

00:00:44.430 --> 00:00:46.770
which we added in iOS 5.

00:00:46.830 --> 00:00:50.020
And in iOS 6,
we have finally brought the long

00:00:50.020 --> 00:00:53.940
anticipated Facebook integration.

00:00:53.970 --> 00:00:55.580
And--

00:00:56.690 --> 00:00:59.100
For our Chinese customers,
we have added integration

00:00:59.100 --> 00:01:04.470
with Sinai Weibo,
which is a Chinese microblogging service.

00:01:04.700 --> 00:01:09.120
On OS X, Mountain Lion,
we brought Facebook, Twitter,

00:01:09.390 --> 00:01:12.790
Sinai Weibo, and in addition,
we brought Flickr,

00:01:12.790 --> 00:01:17.480
Vimeo as social sharing options
and a few other social services

00:01:17.480 --> 00:01:19.760
that are popular in China.

00:01:22.520 --> 00:01:24.800
What does that all mean to you?

00:01:24.820 --> 00:01:28.410
You are developers and you're
sitting here wondering what that

00:01:28.430 --> 00:01:30.740
integration means to you and your apps.

00:01:30.810 --> 00:01:34.550
So I've prepared this diagram to
kind of help us look at the world

00:01:34.560 --> 00:01:37.900
as it is now and how you can benefit
from these integration features.

00:01:37.970 --> 00:01:39.960
So on one hand,
we have shareable content.

00:01:40.190 --> 00:01:42.140
This is user land.

00:01:42.420 --> 00:01:45.720
They have text, movies, files,
they have media,

00:01:45.840 --> 00:01:47.540
all provided by your apps.

00:01:47.590 --> 00:01:50.870
And on the other hand,
we have social networks like Facebook,

00:01:50.870 --> 00:01:52.270
Twitter, and Weibo.

00:01:52.270 --> 00:01:53.870
And your app is sitting
there in the middle,

00:01:54.000 --> 00:01:54.130
right?

00:01:54.470 --> 00:01:58.020
Your users are using your app and
they are interested in sharing

00:01:58.180 --> 00:02:01.330
some aspect of their experience
of their app with the world.

00:02:01.400 --> 00:02:02.540
This is the 21st century.

00:02:02.540 --> 00:02:04.600
We live in an age of social media.

00:02:04.640 --> 00:02:06.890
And you can be sure that
people want to do that.

00:02:06.960 --> 00:02:09.730
So you all know people love your apps.

00:02:10.020 --> 00:02:11.860
They download them by the
billions from the App Store.

00:02:11.860 --> 00:02:13.860
For both iOS and OS X.

00:02:13.860 --> 00:02:18.860
And if you want to deliver a more modern,
a more compelling and engaging

00:02:18.860 --> 00:02:21.860
experience to your users,
you have got to do social integration.

00:02:21.860 --> 00:02:23.990
This is the thing that's happening now.

00:02:23.990 --> 00:02:29.460
So how is it that you can enable
your users to share content

00:02:29.600 --> 00:02:31.500
seamlessly with social networks?

00:02:31.530 --> 00:02:34.470
And how can you get information
from those social networks,

00:02:34.470 --> 00:02:37.750
information from that social graph,
and deliver it to your users to

00:02:37.750 --> 00:02:39.520
give them a better experience?

00:02:39.520 --> 00:02:43.620
And I know many of you are are
clear sort of on the sharing aspect

00:02:43.830 --> 00:02:47.700
but might not be so clear how the
arrow goes the other direction.

00:02:47.700 --> 00:02:49.920
And an example I can think
of right now is Flipboard.

00:02:49.920 --> 00:02:51.050
It's a great app.

00:02:51.220 --> 00:02:53.910
You know, it shows you, like,
your RSS feeds or New York Times or

00:02:53.910 --> 00:02:56.230
whatever newspaper,
very nice, great UI.

00:02:56.230 --> 00:02:58.550
But it also does something great.

00:02:58.550 --> 00:03:02.380
It gets your Facebook or Twitter feeds
and it shows them to you,

00:03:02.380 --> 00:03:06.070
delivers them as newspapers that
you can read in the morning.

00:03:06.140 --> 00:03:06.900
Very relevant.

00:03:06.900 --> 00:03:07.610
Very direct.

00:03:07.610 --> 00:03:10.380
A great example of how you can
bring the social graph to your

00:03:10.380 --> 00:03:12.080
your users and make great apps.

00:03:12.120 --> 00:03:14.710
And there are many other
examples out there.

00:03:14.780 --> 00:03:18.000
So you're wondering why do I care if
I already have social integration?

00:03:18.050 --> 00:03:20.300
Well,
we're going to show you our APIs that

00:03:20.380 --> 00:03:22.340
will make your life a lot easier.

00:03:22.340 --> 00:03:26.150
You can adopt these
APIs and you will have

00:03:26.670 --> 00:03:33.060
More maintainable code, simpler code,
lots less of the code.

00:03:33.460 --> 00:03:34.380
Let's see, what will you learn?

00:03:34.540 --> 00:03:36.980
This is sort of a very broad agenda.

00:03:37.060 --> 00:03:39.340
Our first half of the talk is
going to deal with what I'm

00:03:39.440 --> 00:03:41.080
going to call UI integration.

00:03:41.120 --> 00:03:44.390
I'd like to clarify the term now
because I know it can be a little vague.

00:03:44.400 --> 00:03:47.760
UI integration is basically anything
you add that is a UI element,

00:03:47.760 --> 00:03:51.310
a view controller that will let
your users share on social networks.

00:03:51.330 --> 00:03:55.400
We're going to cover how to do
that both on iOS and on OS X.

00:03:55.400 --> 00:03:58.000
And then we're going to talk
about advanced integration in

00:03:58.000 --> 00:03:59.400
the second half of the talk.

00:03:59.400 --> 00:04:03.470
And you can think of advanced integration
as just the way you get access to a

00:04:03.570 --> 00:04:05.400
user's account with their permission.

00:04:05.400 --> 00:04:09.380
And then you can use that account to
communicate with the service directly.

00:04:09.390 --> 00:04:13.400
So you can, if you want to talk to
Facebook API on behalf of the client,

00:04:13.400 --> 00:04:16.670
get information from their Facebook feed,
that's the section you

00:04:16.670 --> 00:04:18.260
really want to listen to.

00:04:19.120 --> 00:04:21.500
So let's do a quick
overview of UI integration.

00:04:21.580 --> 00:04:23.820
There's a lot to talk about,
so I want to summarize

00:04:23.820 --> 00:04:26.180
from the beginning,
give you the TLDR version.

00:04:26.180 --> 00:04:29.980
Back to that diagram,
your app sitting there in the middle,

00:04:29.980 --> 00:04:31.600
you're wondering, well,
what API is it going to use

00:04:31.630 --> 00:04:34.760
to make my app UI integrated?

00:04:34.760 --> 00:04:38.610
And the answer we're going to give
you to begin with are these two APIs,

00:04:38.620 --> 00:04:44.910
UI Activity View Controller on iOS
and NSSharing Service Speaker on OS X.

00:04:44.920 --> 00:04:49.280
And the really great thing about those
APIs is that they're going to hide

00:04:49.280 --> 00:04:54.760
all the details about what the content
being shared is and where it's going.

00:04:54.760 --> 00:04:57.200
So you don't have to worry
whether the person is sharing

00:04:57.200 --> 00:05:00.180
a movie and is that going to be
uploadable to Twitter or maybe not,

00:05:00.180 --> 00:05:01.020
maybe it's Flickr.

00:05:01.020 --> 00:05:02.220
You don't have to worry about that.

00:05:02.260 --> 00:05:05.790
You don't have to worry about
what networks are available,

00:05:05.800 --> 00:05:08.840
what integration is available on the
device and how it fits with the content.

00:05:08.840 --> 00:05:13.580
And there's a lot more benefits
to using this built-in UI,

00:05:13.580 --> 00:05:14.970
not just the ones that I mentioned.

00:05:14.980 --> 00:05:19.440
You are creating a very,
very consistent user experience

00:05:19.440 --> 00:05:20.760
by adopting those APIs.

00:05:20.760 --> 00:05:23.760
Your users will open the app and
if they want to share something,

00:05:23.760 --> 00:05:26.010
they're going to see the Facebook sheet
that we built in every app.

00:05:26.190 --> 00:05:27.180
They're going to see the tweet sheet.

00:05:27.180 --> 00:05:30.850
They're going to recognize
that UI immediately and they're

00:05:30.850 --> 00:05:31.600
going to be able to use it.

00:05:31.600 --> 00:05:32.370
And people love that.

00:05:32.430 --> 00:05:33.520
It's attractive UI.

00:05:33.520 --> 00:05:34.640
It's present everywhere.

00:05:34.640 --> 00:05:35.220
It's familiar.

00:05:35.220 --> 00:05:36.870
People trust it and they will use it.

00:05:38.910 --> 00:05:40.770
And you're making use of Single Sign On.

00:05:40.920 --> 00:05:44.150
What that means is that user has
entered their password once in

00:05:44.150 --> 00:05:47.940
settings and they don't have to keep
entering it every time an app wants

00:05:48.340 --> 00:05:50.280
to access their account to post.

00:05:50.540 --> 00:05:54.780
So what you get from that is not just
that it's a one-time password entry,

00:05:54.980 --> 00:05:57.200
you're getting automatic
credential management.

00:05:57.290 --> 00:06:00.320
That means the user goes on Facebook,
changes their password,

00:06:00.530 --> 00:06:02.290
you don't have to worry about that.

00:06:02.400 --> 00:06:06.280
We take care of prompting them again
for their password on the device

00:06:06.640 --> 00:06:10.790
so that you can continue to share
without worrying about these details.

00:06:16.740 --> 00:06:20.250
Another benefit is that it's
really easy to integrate.

00:06:20.410 --> 00:06:24.530
You'll see in the next few slides,
often all you need is like four, three,

00:06:24.580 --> 00:06:25.900
four, five lines of code.

00:06:25.900 --> 00:06:29.070
Not sure exactly how much it is,
but that's all you need to integrate

00:06:29.110 --> 00:06:32.500
a view controller into your app
that will let your users share.

00:06:32.500 --> 00:06:34.510
So maybe five minutes of work, that's it.

00:06:34.530 --> 00:06:36.910
You can even take the code
samples that we give you,

00:06:36.910 --> 00:06:39.430
copy paste them,
and they're almost ready to use.

00:06:39.450 --> 00:06:40.830
That's how easy it is.

00:06:40.830 --> 00:06:43.100
And you get improvements over time.

00:06:43.100 --> 00:06:46.580
So that's the it's all in the SDK.

00:06:46.600 --> 00:06:49.400
You upgrade your SDK,
you link against it,

00:06:49.400 --> 00:06:51.970
and you've got a new UI, maybe a bug fix.

00:06:52.120 --> 00:06:53.610
It's all great for you for free.

00:06:55.350 --> 00:06:58.650
So let's get started with the
iOS part of the integration.

00:06:58.660 --> 00:07:00.700
And in this talk,
we're going to start with

00:07:00.700 --> 00:07:02.320
UI Activity View Controller.

00:07:02.330 --> 00:07:05.640
And for the purposes of explaining
how this View Controller works,

00:07:05.650 --> 00:07:08.020
we're going to use a demo
app called Daily Cat Facts.

00:07:08.080 --> 00:07:10.410
Some of you might have
heard of the Cat Facts meme.

00:07:10.420 --> 00:07:12.260
This is going to play on it a lot.

00:07:12.320 --> 00:07:16.060
So this app basically
gives you a daily cat fact,

00:07:16.060 --> 00:07:17.800
as it's called.

00:07:17.800 --> 00:07:20.200
And there's a picture of
a cat there just for fun,

00:07:20.260 --> 00:07:21.540
because I want to share that cat.

00:07:21.580 --> 00:07:23.820
So I see that,
and I just want to share that, right?

00:07:23.930 --> 00:07:24.700
So how can I do that?

00:07:24.700 --> 00:07:26.240
There's a Share button right there.

00:07:26.240 --> 00:07:28.840
It's sitting lonely in
the toolbar at the bottom.

00:07:28.850 --> 00:07:31.390
Let's say the user taps that.

00:07:32.050 --> 00:07:33.260
What they see is this.

00:07:33.460 --> 00:07:35.480
This is UI activity view controller.

00:07:35.610 --> 00:07:38.290
Notice how all the
sharing options are there.

00:07:38.530 --> 00:07:41.590
Twitter, Facebook, Weibo,
and a few other things that

00:07:41.590 --> 00:07:44.390
the user might want to do to
share the picture and the text.

00:07:44.630 --> 00:07:47.320
And let's say they hit
the Facebook button.

00:07:47.880 --> 00:07:48.370
That's what they get.

00:07:48.450 --> 00:07:49.950
They get the Facebook sheet.

00:07:50.140 --> 00:07:54.140
And it's already populated with the
image that the user wants to share.

00:07:54.230 --> 00:07:56.440
It's populated with the text
that the user wanted to share.

00:07:56.490 --> 00:07:58.810
All they have to do
is hit post and there,

00:07:58.810 --> 00:08:00.080
it's on Facebook.

00:08:00.990 --> 00:08:03.060
So how do you do that in code?

00:08:03.090 --> 00:08:03.730
That's it.

00:08:03.920 --> 00:08:07.180
That block of code is all it
took to create what you saw,

00:08:07.180 --> 00:08:08.720
that UI experience.

00:08:08.840 --> 00:08:13.420
First we start by allocating a string,
which is just hello world or

00:08:13.420 --> 00:08:16.380
whatever it is that you want there,
your daily cat fact, for example.

00:08:16.380 --> 00:08:18.580
Then we allocate a UI image.

00:08:18.710 --> 00:08:20.320
We use image name to get that image.

00:08:20.340 --> 00:08:24.010
And then we put the image and the
text in an array using the new

00:08:24.010 --> 00:08:26.580
collection syntax in Objective C3.

00:08:26.580 --> 00:08:29.240
And then we take those activity items.

00:08:29.240 --> 00:08:33.120
We allocate a UI activity
view controller.

00:08:33.280 --> 00:08:35.940
And then we pass those in as an argument.

00:08:35.950 --> 00:08:37.890
And that's all it takes.

00:08:38.130 --> 00:08:40.010
Next up,
you just present the view controller

00:08:40.230 --> 00:08:44.390
and you get exactly that experience
that I showed in the slides before.

00:08:45.730 --> 00:08:48.060
For some of you,
this might be a little too broad.

00:08:48.240 --> 00:08:50.520
Maybe you're not interested in
supporting all these social networks.

00:08:50.630 --> 00:08:54.110
Maybe you do care about integrating
specifically with Facebook,

00:08:54.110 --> 00:08:55.600
with Twitter, with Weibo.

00:08:55.700 --> 00:08:58.560
And for you guys,
I would recommend targeted integration.

00:08:58.600 --> 00:09:00.600
And we have APIs that support that.

00:09:00.600 --> 00:09:04.440
So, you might remember the tweet sheet,
right?

00:09:04.780 --> 00:09:05.600
From iOS 5.

00:09:05.600 --> 00:09:08.350
We have equivalent sheets like
the Facebook sheet that you

00:09:08.350 --> 00:09:09.600
guys just saw a minute ago.

00:09:09.710 --> 00:09:12.600
And we have the Weibo sheet,
which is similar to the tweet sheet.

00:09:12.600 --> 00:09:15.600
And if your app wants to integrate
one of those sheets only,

00:09:15.720 --> 00:09:17.910
that's definitely something you can do.

00:09:18.100 --> 00:09:20.340
In the past,
the Twitter framework that we shipped

00:09:20.340 --> 00:09:21.930
in iOS 5 enabled you to do that.

00:09:22.000 --> 00:09:25.030
So you had a TW Tweet Compose
View Controller that you would

00:09:25.130 --> 00:09:27.760
present and there you go,
you got a tweet sheet.

00:09:27.870 --> 00:09:31.150
But the Twitter framework is
now deprecated and we'd like

00:09:31.150 --> 00:09:34.760
you to move away from using
TW Tweet Compose View Controller.

00:09:34.840 --> 00:09:38.460
Instead, we're going to deliver a new
framework that supports all of

00:09:38.460 --> 00:09:40.330
our social integration features.

00:09:41.230 --> 00:09:43.580
So say hello to the Social framework.

00:09:43.690 --> 00:09:45.660
The Social framework,
you can think of it sort of as an

00:09:45.660 --> 00:09:48.500
expansion over the Twitter framework.

00:09:48.620 --> 00:09:51.730
So here's Twitter and here's Social.

00:09:52.160 --> 00:09:55.490
It not only supports Twitter,
it's not going to give you

00:09:55.490 --> 00:09:59.040
APIs specific to Twitter only,
its APIs will also support

00:09:59.040 --> 00:10:00.930
Facebook and Sinai Weibo.

00:10:01.800 --> 00:10:05.570
And the one thing I want to first
stress for this part of the talk is

00:10:05.630 --> 00:10:09.240
that you're going to want to learn
more about SL Compose View Controller.

00:10:09.240 --> 00:10:11.860
That's the API that's going to
help you display the tweet sheet,

00:10:11.940 --> 00:10:13.960
the Facebook sheet, or the Weibo sheet.

00:10:14.080 --> 00:10:17.610
And to do that, all you need is just to
use this factory method,

00:10:17.670 --> 00:10:20.660
a class method on
SL Compose View Controller.

00:10:20.690 --> 00:10:24.290
It's called Compose
View Controller for type.

00:10:25.520 --> 00:10:26.900
So how do you use that?

00:10:26.900 --> 00:10:28.420
You're going to have to
specify a service type,

00:10:28.510 --> 00:10:28.590
right?

00:10:28.600 --> 00:10:30.390
That's the one parameter it takes.

00:10:30.480 --> 00:10:32.700
And there are three different options.

00:10:32.700 --> 00:10:35.500
If you want to display
the Facebook sheet,

00:10:35.560 --> 00:10:38.300
you would start with
SL service type Facebook.

00:10:38.400 --> 00:10:42.430
If you want to display the tweet sheet,
SL service type Twitter.

00:10:42.510 --> 00:10:45.750
And for the Weibo sheet,
you would use SL service

00:10:45.750 --> 00:10:47.220
type Sinai Weibo.

00:10:48.400 --> 00:10:50.430
Now how do you present an
SL Compose View Controller?

00:10:50.440 --> 00:10:52.900
Again, the code is very simple.

00:10:52.900 --> 00:10:55.400
You start by using the factory
method that I just mentioned,

00:10:55.400 --> 00:10:56.950
Compose View Controller for type.

00:10:57.010 --> 00:10:58.930
And here we're trying to
get a Facebook post sheet.

00:10:59.080 --> 00:11:03.040
So what we're going to do is
give it SL service type Facebook.

00:11:03.090 --> 00:11:06.760
Then we will set the initial
text on that View Controller.

00:11:06.950 --> 00:11:11.440
And then we add an image to that
view controller using add image.

00:11:11.550 --> 00:11:13.060
And finally, we present it.

00:11:13.120 --> 00:11:16.420
And that's all it takes to
just show a Facebook post sheet

00:11:16.420 --> 00:11:19.660
with an image and text in it.

00:11:19.920 --> 00:11:23.090
Now for UI integration on OS X,
I'd like to welcome Julien

00:11:23.090 --> 00:11:24.370
Robert to the stage.

00:11:31.670 --> 00:11:33.730
Thank you Lestat.

00:11:33.730 --> 00:11:34.720
Hello, my name is Julien.

00:11:34.840 --> 00:11:40.900
I will show you how easy it is to
add some sharing capabilities to your

00:11:40.900 --> 00:11:44.120
application running on Mountain Lion.

00:11:44.170 --> 00:11:47.060
First thing I want to talk
about is the share menu.

00:11:47.140 --> 00:11:50.840
So the share menu is the
class NSSharingServiceSpeaker.

00:11:50.840 --> 00:11:53.480
And it displays a menu as you can see.

00:11:53.690 --> 00:11:58.270
But the good thing about this
list of menu is that it will only

00:11:58.270 --> 00:12:00.600
show the services that make sense.

00:12:00.600 --> 00:12:02.220
So what does it mean?

00:12:02.220 --> 00:12:06.900
It means that it's based
on what you want to share,

00:12:06.900 --> 00:12:12.610
but also what accounts are
configured for the current user,

00:12:12.610 --> 00:12:17.320
as well as in which region
the user currently is.

00:12:17.540 --> 00:12:19.070
Also, this menu can be customized.

00:12:19.210 --> 00:12:22.840
You can remove some services that
do not make sense for your app,

00:12:22.870 --> 00:12:27.210
but you can also add some entries
to this menu if you want to plug

00:12:27.440 --> 00:12:31.740
existing services that you may
have already in your application.

00:12:32.070 --> 00:12:36.870
And finally, I want to stress that this
is the easiest way to share.

00:12:36.870 --> 00:12:39.800
And as you see,
it's a class that is in AppKit.

00:12:40.020 --> 00:12:44.330
So you don't need to link
against any other framework.

00:12:44.390 --> 00:12:47.090
And even better,
if your app is sandboxed,

00:12:47.090 --> 00:12:52.220
you don't need any entitlements because
everything is done out of process.

00:12:53.380 --> 00:12:56.120
So once a user will
pick a sharing option,

00:12:56.180 --> 00:12:57.260
what happens?

00:12:57.300 --> 00:13:00.460
Well,
we'll display what we call a share sheet.

00:13:00.480 --> 00:13:03.860
We have one for Twitter,
another one for Facebook.

00:13:03.920 --> 00:13:08.200
So you can see they are very
similar to the iOS counterparts.

00:13:08.220 --> 00:13:15.120
But we support a few more services,
like you can easily upload

00:13:15.120 --> 00:13:15.120
some photos to Flickr.

00:13:15.640 --> 00:13:19.630
But also you can easily send
some pictures or movies to

00:13:19.630 --> 00:13:21.860
your friends on iMessage.

00:13:21.860 --> 00:13:27.210
And also bigger fries over
airdrop on a local network.

00:13:28.600 --> 00:13:31.400
Let's see the sharing architecture.

00:13:31.470 --> 00:13:35.560
So this is a schema we saw
earlier with the shareable

00:13:35.620 --> 00:13:38.190
contents and the social networks.

00:13:38.690 --> 00:13:43.290
So you would give the shareable
content to the picker,

00:13:43.290 --> 00:13:48.390
and the picker has a list of sharing
services which points to social networks.

00:13:48.590 --> 00:13:52.990
So the thing to note is that the
sharing picker has a delegate,

00:13:52.990 --> 00:13:58.290
but also each service
has their own delegates.

00:13:59.450 --> 00:14:01.560
But first, let's see what can you share.

00:14:01.570 --> 00:14:02.700
Well, it's easy.

00:14:02.700 --> 00:14:05.570
You can share any basic
types such as images,

00:14:05.970 --> 00:14:10.230
text, which can be attributed or not,
as well as URLs,

00:14:10.360 --> 00:14:15.380
which can be local URLs pointing
to files on your system or

00:14:15.380 --> 00:14:18.380
remote URLs like for websites.

00:14:18.490 --> 00:14:25.120
But you can also use your custom object
providing the implement and writing.

00:14:26.130 --> 00:14:30.700
So now let's add this
sharing menu to your app.

00:14:30.760 --> 00:14:31.540
So what do you need to do?

00:14:31.540 --> 00:14:36.420
First, create this button.

00:14:36.420 --> 00:14:38.830
This is a standard button,
and we want all share

00:14:38.830 --> 00:14:38.830
buttons to look the same.

00:14:39.260 --> 00:14:43.070
On click, you will present the picker.

00:14:43.070 --> 00:14:45.110
And then when the user
will pick a service,

00:14:45.200 --> 00:14:49.070
you will want to specify a
delegate for this service.

00:14:49.150 --> 00:14:53.010
And finally,
implement some delegate methods.

00:14:53.050 --> 00:14:57.200
Okay, now let's dive into the code and
see how to create this button.

00:14:57.230 --> 00:14:59.950
So it's a regular NS button.

00:14:59.950 --> 00:15:05.690
But we have a shared template image
that you can use to add this arrow.

00:15:06.180 --> 00:15:09.770
An important detail is that
since we are displaying a menu,

00:15:09.780 --> 00:15:12.460
the menu should appear on mouse down.

00:15:12.460 --> 00:15:16.160
And since the default action
of a button is on mouse up,

00:15:16.290 --> 00:15:20.810
you have to specify that you want
it to be called on mouse down.

00:15:21.290 --> 00:15:25.130
Then we set the targets and
the action of the button.

00:15:25.200 --> 00:15:28.310
And now let's see the
action of this button.

00:15:28.380 --> 00:15:33.230
So first, we gather what we want to
share in an array of items.

00:15:33.750 --> 00:15:37.540
Then we create the
picker from this array.

00:15:37.590 --> 00:15:41.330
We set the delegate to be self.

00:15:41.390 --> 00:15:44.460
And finally,
we ask the picker to be displayed.

00:15:44.570 --> 00:15:47.770
So it's displayed relative
to a rect in a view.

00:15:48.070 --> 00:15:51.710
But in this case, we want it displayed
relative to our button,

00:15:51.820 --> 00:15:52.890
which is sender.

00:15:52.960 --> 00:15:55.260
And another rect means bounce.

00:15:55.320 --> 00:16:03.130
And then preferred edge lets you display
the menu above or below the button.

00:16:05.050 --> 00:16:07.920
So let's go back to our previous schema.

00:16:07.950 --> 00:16:11.600
So we've seen that the picker
has a delegate and when the

00:16:11.600 --> 00:16:17.120
user will select a service,
the service needs a delegate too.

00:16:17.120 --> 00:16:19.440
But where is it coming from?

00:16:19.440 --> 00:16:28.160
Well, the delegate for the service
is given by the delegate of the

00:16:28.160 --> 00:16:28.160
picker using this delegate method.

00:16:30.360 --> 00:16:33.420
Okay, so now we've talked a
lot about this delegates,

00:16:33.580 --> 00:16:37.720
but what is it, what it is used for?

00:16:38.540 --> 00:16:42.740
Well first,
the delegates will allow you to be aware

00:16:42.740 --> 00:16:45.470
of what's happening with the sharing.

00:16:45.740 --> 00:16:48.770
So you will be called when
the share sheet is displayed

00:16:49.320 --> 00:16:51.780
with a will share item.

00:16:51.820 --> 00:16:55.340
But also, when the sharing did
complete successfully,

00:16:55.500 --> 00:16:58.580
with the did_share_item delegates method.

00:16:58.620 --> 00:17:04.420
But since bad things can happen,
we also have did_fail_to-share_item

00:17:04.520 --> 00:17:06.100
method with an error.

00:17:06.440 --> 00:17:10.900
And you may want to display
the error somewhere in your UI.

00:17:10.950 --> 00:17:15.880
But you need to special case
the NSUserCancelledError,

00:17:15.930 --> 00:17:18.580
because it means that the user
just cancels the share sheet.

00:17:18.590 --> 00:17:22.590
So don't display an error in this case.

00:17:23.570 --> 00:17:29.370
But the delegate of the service also is
useful to make sharing a beautiful user

00:17:29.370 --> 00:17:33.070
experience by animating the share sheet.

00:17:33.150 --> 00:17:36.780
And for that, we need a few information
from your application,

00:17:36.810 --> 00:17:42.630
like the item of the-- the frame
of the item that you are sharing,

00:17:42.630 --> 00:17:42.630
if it's an image.

00:17:43.040 --> 00:17:50.140
But also a transition image,
the source window, and the content scope.

00:17:50.170 --> 00:17:54.390
But before going back to all that,
I would like to do a quick

00:17:54.510 --> 00:17:59.090
demo so that you have a better
idea of what I'm talking about.

00:17:59.880 --> 00:18:06.130
OK, so this is a very simple
recipe application.

00:18:07.000 --> 00:18:09.790
We have recipes with images.

00:18:09.860 --> 00:18:14.240
We want to share that,
like to invite some friends for dinner.

00:18:14.240 --> 00:18:15.010
So I cheated a bit.

00:18:15.120 --> 00:18:21.650
I already added a button here that
I created with the -- I set the

00:18:21.720 --> 00:18:26.250
template image that we've talked about.

00:18:26.250 --> 00:18:28.690
But for now, as you can see,
nothing happens because there is no

00:18:28.690 --> 00:18:28.690
code in the action of the button.

00:18:29.320 --> 00:18:31.280
So let's go into the code.

00:18:31.320 --> 00:18:35.290
And before implementing the action,
the first thing we want to do is

00:18:35.290 --> 00:18:39.000
to call this action on mouse down.

00:18:39.100 --> 00:18:44.170
So let's do that when the
application finishes launching.

00:18:44.370 --> 00:18:47.250
Okay, so now the action will be
called and now it's done.

00:18:47.370 --> 00:18:50.950
And let's implement it.

00:18:51.240 --> 00:18:53.080
So it's here.

00:18:53.190 --> 00:18:58.000
The first thing we want to do is
get the current recipe to gather

00:18:58.000 --> 00:18:59.380
the items we want to share.

00:18:59.490 --> 00:19:02.100
So in this case,
we want the name of the recipe,

00:19:02.230 --> 00:19:04.790
the image that corresponds
to this recipe,

00:19:04.790 --> 00:19:08.570
and the contents,
which is a description of the recipe.

00:19:09.070 --> 00:19:11.140
Then we create the picker.

00:19:11.170 --> 00:19:14.520
We need it with the
items we just created.

00:19:14.630 --> 00:19:18.150
We set ourselves as a
delegate of the picker.

00:19:18.290 --> 00:19:22.740
And finally, we tell it to be shown
relative to the button.

00:19:22.860 --> 00:19:24.250
OK, so it's very simple.

00:19:24.470 --> 00:19:27.550
Let's run now and see what happens.

00:19:29.210 --> 00:19:33.640
So now you can see we have a
menu of all available services.

00:19:33.660 --> 00:19:37.720
And I can pick one, like for example,
Twitter.

00:19:37.780 --> 00:19:40.320
And we have a tweet sheet that appears.

00:19:40.370 --> 00:19:46.190
But as you can see,
it's not very nice because it's not

00:19:46.310 --> 00:19:50.810
bound to the window of our application.

00:19:51.130 --> 00:19:53.860
And there was no nice animation.

00:19:53.860 --> 00:19:53.860
So let's see how we can improve that.

00:19:54.050 --> 00:19:57.940
Well, first we want to set a
delegate for the service.

00:19:57.980 --> 00:20:01.500
So for that,
we use a delegate for sharing service

00:20:01.500 --> 00:20:04.110
method that we've seen earlier.

00:20:04.690 --> 00:20:07.470
And now we are the delegate of
the service and we can implement

00:20:08.080 --> 00:20:10.560
the animation delegate methods.

00:20:10.580 --> 00:20:14.920
The first thing is we will
return the frame of the image.

00:20:14.980 --> 00:20:19.600
And since we already support Quick Look,
we have a convenience method that

00:20:19.740 --> 00:20:22.000
we can use to return this frame.

00:20:22.480 --> 00:20:26.580
Next,
we want to return a transition image.

00:20:26.580 --> 00:20:30.780
And this will be the image
that is shown in the button.

00:20:30.780 --> 00:20:34.940
And finally,

00:20:35.560 --> 00:20:39.560
We want to return the source window,
which is self window,

00:20:39.560 --> 00:20:42.220
as well as the content scope.

00:20:42.220 --> 00:20:46.630
And we'll talk about
the content scope later.

00:20:46.630 --> 00:20:46.630
And now if I run again,

00:20:47.920 --> 00:20:51.080
And I want to tweet.

00:20:51.100 --> 00:20:52.460
We have a nice animation.

00:20:52.460 --> 00:20:56.500
And we can send the message.

00:21:03.410 --> 00:21:09.730
Okay, so let's review what we did
to have this nice animation.

00:21:10.830 --> 00:21:16.400
Well, first, we provided a frame for the
image using the source frame

00:21:16.450 --> 00:21:18.440
on screen delegate method.

00:21:18.520 --> 00:21:21.830
And the frame should be
in screen coordinates.

00:21:22.530 --> 00:21:25.710
Second thing we did is
provide the transition image.

00:21:25.800 --> 00:21:27.630
And as you can see in
the delegate method,

00:21:27.690 --> 00:21:29.670
there is this content rect.

00:21:29.770 --> 00:21:32.300
But what is this content rect thing?

00:21:32.430 --> 00:21:35.910
So for example, if you use quick look
to generate a thumbnail,

00:21:35.940 --> 00:21:38.870
the image you would return is this thing.

00:21:38.980 --> 00:21:41.060
But as you can see there are borders.

00:21:41.150 --> 00:21:45.060
And the content rect
corresponds to this area,

00:21:45.160 --> 00:21:49.080
which is the core of the
image without the decoration.

00:21:49.190 --> 00:21:51.740
So again,
if you use quick look thumbnail,

00:21:51.740 --> 00:21:56.700
you can get this frame using
the get content rect function.

00:21:57.650 --> 00:22:04.810
Next, we implemented this method
to return the source window,

00:22:04.810 --> 00:22:08.090
but also you saw the content scope.

00:22:08.600 --> 00:22:10.600
And let's talk more about content scope.

00:22:10.620 --> 00:22:16.590
So content scopes are hints for us
to tweak the share sheet animation.

00:22:17.070 --> 00:22:22.720
So you will declare from the
context of your items so that we

00:22:22.720 --> 00:22:24.910
make the best animation possible.

00:22:24.930 --> 00:22:28.480
For example, if you share some items
that are in a list,

00:22:28.480 --> 00:22:33.600
like files in the browser,
you would use an item content scope.

00:22:33.600 --> 00:22:38.080
But if you are sharing something
that is part of a bigger content,

00:22:38.080 --> 00:22:42.840
like an image in a document,
you would use a partial content scope.

00:22:42.850 --> 00:22:46.760
And finally,
if you want to share the whole document,

00:22:46.760 --> 00:22:49.080
you would use a full content scope.

00:22:49.100 --> 00:22:54.440
So if you implement that,
this will make sure that your

00:22:54.440 --> 00:22:57.310
animation looks as good as possible.

00:22:58.180 --> 00:23:02.510
But maybe the sharing
picker is not what you need.

00:23:02.510 --> 00:23:06.430
And for that,
you need more targeting integration.

00:23:06.480 --> 00:23:10.220
Example is if you want to
customize a trigger UI,

00:23:10.220 --> 00:23:14.500
like in this example,
it's a custom contextual menu.

00:23:14.820 --> 00:23:18.810
Or if you want to target
a specific service,

00:23:18.810 --> 00:23:24.200
like if you want to add a tweet
button in your application,

00:23:24.200 --> 00:23:25.740
you can use a sharing service directly.

00:23:25.910 --> 00:23:29.940
And of course, when the user will call
NS serving service,

00:23:29.960 --> 00:23:34.500
it will display the same share
sheets as we've seen before,

00:23:34.500 --> 00:23:40.320
including the animations will
be used if you set the delegate.

00:23:40.880 --> 00:23:41.400
So how to do that?

00:23:41.550 --> 00:23:43.500
So it's very easy.

00:23:43.650 --> 00:23:47.070
So when your trigger URL is clicked,
so for example when

00:23:47.170 --> 00:23:55.090
the button is clicked,
you will get the sharing service that

00:23:55.090 --> 00:23:57.310
corresponds to the action you want to do.

00:23:57.310 --> 00:23:57.310
In this example,
if you want to post on Twitter,

00:23:57.610 --> 00:24:01.440
You set yourself as a
delegate for the service.

00:24:01.510 --> 00:24:06.130
And you just call perform with an
array of items that is the same array

00:24:06.130 --> 00:24:09.720
of items that you use for the picker.

00:24:10.260 --> 00:24:14.840
You may want to enable
your control conditionally,

00:24:14.840 --> 00:24:20.400
like to disable the tweet button if
there is no Twitter account configured.

00:24:20.430 --> 00:24:26.340
To do that,
you can use the can perform with

00:24:26.410 --> 00:24:32.210
items method on the service and
it will tell you if it's possible

00:24:32.210 --> 00:24:32.210
to share with this service or not.

00:24:33.800 --> 00:24:38.800
And that concludes the
OS X part of sharing.

00:24:38.800 --> 00:24:40.700
And Lestat will continue.

00:24:45.700 --> 00:24:49.110
So let's recap the two important
points we've talked about in

00:24:49.110 --> 00:24:51.220
the first half of the talk.

00:24:51.530 --> 00:24:55.040
If you want a beautiful, a simple,
a seamless sharing

00:24:55.040 --> 00:24:58.830
experience in your app,
on iOS all you have to do is present

00:24:59.210 --> 00:25:04.700
a UI activity view controller and an
OS X and NS sharing service speaker.

00:25:04.950 --> 00:25:07.450
And that's really all there is to it.

00:25:08.520 --> 00:25:11.090
Now let's jump into advanced integration.

00:25:11.090 --> 00:25:13.530
And this is really the
exciting part of the talk.

00:25:13.590 --> 00:25:15.630
This is for the ultimate
integration experience.

00:25:15.720 --> 00:25:19.870
It will give you the power to access
the account and will show you how

00:25:19.870 --> 00:25:23.160
to use that account to communicate
with service APIs on your own.

00:25:23.300 --> 00:25:26.510
So there's really the sky's
the limit at that point.

00:25:27.110 --> 00:25:28.440
So here's a sample request.

00:25:28.550 --> 00:25:31.340
Sort of to ground us in this discussion,
we're going to look at an

00:25:31.340 --> 00:25:34.270
example of what you can do once
you have advanced integration.

00:25:34.480 --> 00:25:36.270
It's a very simple example.

00:25:36.440 --> 00:25:38.640
There's your app on one hand,
and on the other hand,

00:25:38.640 --> 00:25:39.880
we have the Facebook server.

00:25:39.950 --> 00:25:43.680
And my app is going to try and
get the me object from the me

00:25:43.680 --> 00:25:45.900
graph object from Facebook.

00:25:45.900 --> 00:25:50.000
So it's going to send a request
to graph.facebook.com slash me.

00:25:50.000 --> 00:25:52.130
The server is going to get the request.

00:25:52.240 --> 00:25:55.460
It's going to build my me object
with information about me.

00:25:55.460 --> 00:25:56.980
And it's going to send
that request to me.

00:25:57.000 --> 00:25:57.560
And it's going to send
that back to your app.

00:25:57.570 --> 00:26:00.330
Now,
if you've ever done that in real life,

00:26:00.330 --> 00:26:02.110
you know the cake is a lie.

00:26:02.110 --> 00:26:03.920
This is not how it happens.

00:26:03.930 --> 00:26:06.580
This is completely oversimplified.

00:26:06.580 --> 00:26:08.770
So what you're going to have to
worry about is how you're going

00:26:08.770 --> 00:26:10.120
to authenticate with the service.

00:26:10.120 --> 00:26:12.100
You're going to have to set
up your request properly.

00:26:12.100 --> 00:26:14.100
There's a lot more than
there is in that slide.

00:26:14.100 --> 00:26:16.860
But what we're going to show
you with the APIs that we have,

00:26:16.890 --> 00:26:18.340
it will be almost that simple.

00:26:18.510 --> 00:26:21.360
You will feel as if you just
animated one little object from one

00:26:21.370 --> 00:26:22.950
side of the screen to the other.

00:26:22.950 --> 00:26:24.460
That's how easy it will be.

00:26:24.500 --> 00:26:26.500
So let's get started.

00:26:26.500 --> 00:26:27.090
All right.

00:26:27.090 --> 00:26:29.770
I want to just do a quick overview
because there are three main

00:26:29.870 --> 00:26:31.550
sections we're going to deal with.

00:26:31.660 --> 00:26:34.140
And the first is going to be
how to access user accounts.

00:26:34.210 --> 00:26:36.290
Then after we see how
to access user accounts,

00:26:36.300 --> 00:26:39.060
we're going to talk about
how to construct requests.

00:26:39.110 --> 00:26:42.510
And finally, we're going to have a quick
discussion of permissions.

00:26:42.510 --> 00:26:46.150
And this is mostly geared towards people
who want to do Facebook integration

00:26:46.150 --> 00:26:49.990
because it's a little more nuanced than
it would be with Twitter and Weibo.

00:26:51.830 --> 00:26:55.640
So the social framework that we just
introduced a moment ago not only

00:26:55.680 --> 00:26:59.300
gives you SL ComposeViewController,
it also provides a

00:26:59.440 --> 00:27:01.170
class called SLRequest.

00:27:01.280 --> 00:27:04.560
And I want to just take a moment to,
I think many of you may have seen

00:27:04.560 --> 00:27:07.710
the deprecation sign and gone like,
"Oh my god, don't worry.

00:27:08.060 --> 00:27:12.360
You only have to change prefixes
in 90% of the cases." TWRequest

00:27:12.360 --> 00:27:16.630
and TWT ComposeViewController
are very similar classes,

00:27:16.640 --> 00:27:19.610
so transitioning will be very easy.

00:27:19.710 --> 00:27:22.920
Anyway, for SLRequest,
you are going to be able

00:27:23.010 --> 00:27:25.300
to talk to Facebook,
Twitter, and Sinai Weibo.

00:27:25.300 --> 00:27:26.700
So it's a more generic API.

00:27:26.740 --> 00:27:28.260
It's a lot more flexible.

00:27:28.260 --> 00:27:31.120
It's a lot better than TWRequest.

00:27:32.280 --> 00:27:35.950
And to use it,
first you get the user's account.

00:27:36.290 --> 00:27:37.810
You request access, actually.

00:27:37.940 --> 00:27:40.510
You need their permission, of course.

00:27:40.770 --> 00:27:43.070
And then you get the account.

00:27:43.520 --> 00:27:46.560
And then you create the SL request.

00:27:46.560 --> 00:27:47.900
And you provide it with the account.

00:27:47.900 --> 00:27:49.350
This is a very important step.

00:27:49.470 --> 00:27:52.230
That's where you associate
the account with the request.

00:27:52.390 --> 00:27:56.480
And that's how we know to
authenticate the request for you.

00:27:56.560 --> 00:27:58.740
And finally, you send the SL request.

00:27:58.850 --> 00:28:02.140
You wait for the response
to come back and continue

00:28:02.180 --> 00:28:04.320
your app's behavior as usual.

00:28:04.470 --> 00:28:08.480
So to access user accounts,
and this is step number one in the grand

00:28:08.500 --> 00:28:10.720
scheme of how to request something.

00:28:11.320 --> 00:28:13.360
You'll need to become friends
with the accounts framework.

00:28:13.480 --> 00:28:16.130
That is where all accounts,
all social accounts are

00:28:16.130 --> 00:28:17.950
stored on iOS and OS X.

00:28:18.060 --> 00:28:22.090
And in order to get access to
accounts from that framework,

00:28:22.420 --> 00:28:25.450
we provide a method on
AC Account Store called

00:28:25.450 --> 00:28:28.880
Request Access to Accounts with
Account Type with Completion Handler.

00:28:28.880 --> 00:28:31.360
And we'll see how to use
that in just a moment.

00:28:32.320 --> 00:28:34.910
Now for Facebook,
you're going to need to add a special

00:28:35.020 --> 00:28:36.680
dictionary in your info.p list.

00:28:36.790 --> 00:28:38.780
We're going to cover that
in detail once we get to the

00:28:38.790 --> 00:28:40.140
Facebook section of the talk.

00:28:40.140 --> 00:28:43.060
But for now, just keep that note in mind
because it's really important.

00:28:43.060 --> 00:28:45.080
Otherwise,
you will not be able to get access.

00:28:46.780 --> 00:28:48.610
Now let's look at code.

00:28:48.760 --> 00:28:49.990
This is how you get a Facebook account.

00:28:50.160 --> 00:28:51.250
Not a whole lot of code.

00:28:51.460 --> 00:28:53.900
You just have to do it
once and then you're good.

00:28:54.060 --> 00:28:57.710
First you start by allocating and
initializing an account store.

00:28:57.710 --> 00:29:00.140
And I would like you to note how
that account store is actually

00:29:00.140 --> 00:29:02.160
a property on the class I'm in.

00:29:02.220 --> 00:29:05.610
And that's really important because
the lifetime of the account store is

00:29:05.700 --> 00:29:07.440
tied to the accounts that it vends.

00:29:07.490 --> 00:29:12.530
You should not release your account store
when you're just done requesting access.

00:29:12.700 --> 00:29:15.940
It needs to live for as
long as the accounts live.

00:29:16.010 --> 00:29:17.410
All right?

00:29:17.800 --> 00:29:20.400
So then we get the account type object.

00:29:20.400 --> 00:29:21.300
Very simple call.

00:29:21.300 --> 00:29:23.660
We just say account type
with account type identifier.

00:29:23.760 --> 00:29:27.170
We pass in the string
identifier for Facebook.

00:29:27.560 --> 00:29:30.060
Then we go on to call the
request access method.

00:29:30.110 --> 00:29:33.040
We pass in the account type
object we just got and then we

00:29:33.040 --> 00:29:34.900
pass in a completion handler.

00:29:34.990 --> 00:29:37.110
And that completion handler is
going to take two arguments.

00:29:37.140 --> 00:29:39.130
It's going to provide you
back with two arguments.

00:29:39.260 --> 00:29:41.770
One of them is going to be a
Boolean and it's going to say,

00:29:41.890 --> 00:29:46.190
"Yes, you were granted access" or "No,
you were not granted access." And then

00:29:46.190 --> 00:29:49.660
the second argument is going to be
an NSError object that will contain

00:29:49.660 --> 00:29:53.480
information about anything that may
have gone wrong during the request.

00:29:53.820 --> 00:29:57.970
Now, if you were granted access, hooray,
all you have to do is just call accounts

00:29:57.970 --> 00:30:02.730
with account type and pass in the account
type object that you got a moment ago.

00:30:02.730 --> 00:30:05.990
And then you have an array of the
accounts that are on the--that

00:30:05.990 --> 00:30:07.820
have been added to the device.

00:30:07.920 --> 00:30:10.800
Now, for Facebook accounts,
this is not true for Twitter and Weibo,

00:30:10.800 --> 00:30:13.160
but for Facebook accounts,
on iOS and OS X,

00:30:13.160 --> 00:30:15.920
there's only one account per device.

00:30:16.080 --> 00:30:19.470
So you can call last object
on that array and you've got a

00:30:19.470 --> 00:30:20.980
Facebook account ready to use.

00:30:21.140 --> 00:30:24.120
So we're going to hold that in
our property and self.facebook

00:30:24.490 --> 00:30:27.610
account and we're going to get
back to it in just a moment.

00:30:28.500 --> 00:30:30.860
So to build your request,
you've got your account, right?

00:30:30.950 --> 00:30:31.790
That's great.

00:30:31.980 --> 00:30:34.590
You initialize your SL request instance.

00:30:34.650 --> 00:30:35.900
You're going to have to have a URL.

00:30:36.020 --> 00:30:38.780
You need to know what you're
going to talk to on the server.

00:30:38.840 --> 00:30:40.290
You need to have an HTTP method.

00:30:40.300 --> 00:30:42.570
You need to know what
that endpoint accepts.

00:30:42.650 --> 00:30:43.700
Is it get?

00:30:43.740 --> 00:30:44.410
Is it post?

00:30:44.570 --> 00:30:46.310
Is it delete?

00:30:46.360 --> 00:30:47.820
And then finally,
you're going to need to know what

00:30:47.970 --> 00:30:50.240
parameters that endpoint is expecting.

00:30:50.240 --> 00:30:51.660
And this may be a nil dictionary.

00:30:51.730 --> 00:30:54.810
It might be a dictionary
of several parameters.

00:30:55.330 --> 00:30:59.600
And finally, you set the account property
on the on the SR request.

00:30:59.690 --> 00:31:01.160
That's where the
association is happening.

00:31:01.210 --> 00:31:03.200
I can't stress how important that is.

00:31:03.200 --> 00:31:06.700
And then finally,
you perform it and handle the response.

00:31:06.700 --> 00:31:12.120
So the reason I keep stressing this is
that the association between the account

00:31:12.120 --> 00:31:15.920
and the request is what allows us to take
care of the signing the request for you.

00:31:15.920 --> 00:31:20.700
And I'm going to show you how to do that.

00:31:20.700 --> 00:31:23.900
So let's go ahead and start with the OS.

00:31:23.900 --> 00:31:24.210
So the OS is a service that allows
you to authenticate your code.

00:31:24.210 --> 00:31:25.280
And that is awesome.

00:31:25.510 --> 00:31:28.880
It just you cannot imagine how
much code goes into writing a

00:31:28.980 --> 00:31:30.730
lot of one or two implementation.

00:31:30.730 --> 00:31:33.380
And how many bugs get written fixed
just to be able to authenticate

00:31:33.380 --> 00:31:34.850
a request with a service.

00:31:34.850 --> 00:31:37.000
And we're going to do
all of that for you.

00:31:37.000 --> 00:31:40.780
So many of you might be familiar with
the We're calling the OS sandwich.

00:31:40.840 --> 00:31:44.710
And it's basically your app on the top
and the top one and the bottom one.

00:31:44.710 --> 00:31:47.800
There's the API for Twitter, Facebook,
or whatever you want to talk to you.

00:31:47.800 --> 00:31:47.800
And there's all sitting in the middle
all the time because you need to

00:31:47.800 --> 00:31:47.800
authenticate with a service somehow.

00:31:47.800 --> 00:31:47.800
And that's the way it works.

00:31:47.900 --> 00:31:51.280
So the OS is a service that allows
you to authenticate your code.

00:31:51.280 --> 00:31:56.430
And that's the protocol
everyone's adopting.

00:31:56.430 --> 00:32:00.600
And we know how much fun
that is to implement.

00:32:00.600 --> 00:32:00.600
But when you use SL request,
that's all gone.

00:32:00.600 --> 00:32:00.600
You don't have to worry about it anymore.

00:32:03.020 --> 00:32:04.740
Yeah, I heard that.

00:32:04.750 --> 00:32:06.520
You've written the code before.

00:32:06.520 --> 00:32:08.440
So how to access a user's profile.

00:32:08.440 --> 00:32:10.340
That's the example we sort of
started with at the beginning,

00:32:10.340 --> 00:32:11.800
if you remember, my me object.

00:32:11.800 --> 00:32:13.640
And now I'm going to
implement it in code.

00:32:13.640 --> 00:32:14.510
And look at all that.

00:32:14.510 --> 00:32:15.690
It's like four or five lines.

00:32:15.690 --> 00:32:16.800
Nothing more is needed.

00:32:16.800 --> 00:32:18.100
First, you get your URL.

00:32:18.100 --> 00:32:19.460
We already know what it is.

00:32:19.480 --> 00:32:21.360
Graph.facebook.com slash me.

00:32:21.780 --> 00:32:25.290
And then we use the class method
on SL request to get the object.

00:32:25.330 --> 00:32:26.960
So we use SL service type Facebook.

00:32:27.110 --> 00:32:29.740
That's the service type we
used to get the Facebook sheet,

00:32:29.810 --> 00:32:31.080
if you remember still.

00:32:31.080 --> 00:32:34.320
And then we pass in the method get
because we're going to that's the

00:32:34.460 --> 00:32:36.640
HTTP method accepted by that endpoint.

00:32:36.640 --> 00:32:38.560
And then we give it the URL.

00:32:38.560 --> 00:32:41.570
And there's no parameters
necessary for that endpoint.

00:32:41.700 --> 00:32:42.810
So we just pass nil.

00:32:42.810 --> 00:32:45.970
Then we associate magic
happens behind the scene.

00:32:45.970 --> 00:32:48.940
And we perform the
request with this handler.

00:32:48.940 --> 00:32:51.760
And the handler is going to come back
with it's very similar to the request.

00:32:51.780 --> 00:32:53.000
So any URL handle handler.

00:32:53.000 --> 00:32:56.100
So you're going to get NSData,
which is a response from the server.

00:32:56.100 --> 00:32:59.420
You're going to get an
NS HTTP URL response describing

00:32:59.420 --> 00:33:03.820
the response from the server with
things like the HTTP status code.

00:33:03.820 --> 00:33:06.590
And finally,
we're going to get an NSError object

00:33:06.670 --> 00:33:08.990
indicating if an error happened or not.

00:33:11.440 --> 00:33:15.540
Now I would like to demo
the great APIs for account

00:33:15.680 --> 00:33:17.330
access and for SLR request.

00:33:17.390 --> 00:33:19.060
And for that purpose,
we're going to use the

00:33:19.060 --> 00:33:19.920
app daily cat facts.

00:33:20.050 --> 00:33:23.870
We're going to see an improved
version of that by my colleague,

00:33:23.870 --> 00:33:24.770
Kal Haglunds.

00:33:27.560 --> 00:33:28.400
So, hello everyone.

00:33:28.640 --> 00:33:34.180
The app I'm dev'ing today is,
as Lestat said, the Daily Cat Facts.

00:33:34.180 --> 00:33:38.510
So the purpose of Daily Cat Facts
is to give a nugget of cat

00:33:38.510 --> 00:33:41.500
information to the user every day.

00:33:41.500 --> 00:33:44.280
So you already have this app
installed in the iPhone simulator.

00:33:44.760 --> 00:33:47.780
Just dive in and see
what this looks like.

00:33:47.910 --> 00:33:50.800
So here you see the daily cat facts app.

00:33:50.800 --> 00:33:53.440
And at the top, you see a kitten.

00:33:53.620 --> 00:33:56.680
Its only purpose is there to be cute.

00:33:56.850 --> 00:34:00.590
And below the kitten, you see a cat fact.

00:34:01.330 --> 00:34:06.060
Did you guys know that a cat
can jump up to five times its

00:34:06.060 --> 00:34:09.190
own height in a single bound?

00:34:09.500 --> 00:34:14.000
I sure didn't know that and we'll see
that my immediate urge is to share this

00:34:14.000 --> 00:34:17.790
amazing fact with my friends on Facebook.

00:34:17.790 --> 00:34:21.970
So to do that,
I've added a button below the fact.

00:34:23.040 --> 00:34:28.400
But if I press that button now,
nothing happens.

00:34:28.470 --> 00:34:32.060
That is because even though
I wired this button up to call

00:34:32.060 --> 00:34:36.200
a method in my view controller,
there's no code in there yet.

00:34:36.550 --> 00:34:41.040
So,
how can we make this app a social app?

00:34:41.090 --> 00:34:43.430
Well,
first I would like to point out that

00:34:43.580 --> 00:34:47.780
this app would be a prime candidate
for the U Activity View controller.

00:34:47.810 --> 00:34:50.040
It would be very easy to implement that.

00:34:50.130 --> 00:34:53.950
But for the sake of this demonstration,
we'll do the deeper integration

00:34:54.130 --> 00:34:57.710
here and try to post this fact
directly to the Facebook timeline.

00:34:59.120 --> 00:35:03.250
So the first thing we need to
do is to add the dictionary with

00:35:03.250 --> 00:35:05.360
keys into our applications plist.

00:35:05.480 --> 00:35:08.400
So let's start Xcode and
see how we'll do that.

00:35:13.350 --> 00:35:17.040
So now we're in Xcode.

00:35:17.100 --> 00:35:20.940
Let's try to locate my application plist.

00:35:25.500 --> 00:35:29.500
And I drop it right in here.

00:35:29.620 --> 00:35:32.110
As you can see,
I added a dictionary with the key

00:35:32.350 --> 00:35:35.610
AC Facebook Client Access Info.

00:35:35.890 --> 00:35:39.100
If I open this dictionary up,
you can see there's a

00:35:39.100 --> 00:35:40.840
bunch of keys in there.

00:35:40.900 --> 00:35:44.740
I won't go over them in detail now
because Lestat will do that later.

00:35:44.850 --> 00:35:48.500
But I would like to point out
that this dictionary in the

00:35:48.500 --> 00:35:51.440
P list is only for seed one.

00:35:51.560 --> 00:35:54.890
In a future seed,
you'll pass this dictionary in with

00:35:54.890 --> 00:35:56.980
the request to the account store.

00:35:57.320 --> 00:35:59.350
I will show that later.

00:36:00.860 --> 00:36:05.590
So, now that we have the dictionary
in the application's plist,

00:36:05.590 --> 00:36:08.650
let's go and try to request
access to the account.

00:36:08.770 --> 00:36:12.730
To do that, I open up the view
controller for this app.

00:36:16.810 --> 00:36:19.090
And here you can see
I have my post method.

00:36:19.190 --> 00:36:22.480
This method is the method
which is called when we tap the

00:36:22.480 --> 00:36:24.630
button in the user interface.

00:36:29.310 --> 00:36:32.680
So to start up, we are setting the status
label at the bottom of the app

00:36:32.810 --> 00:36:35.270
to waiting for authorization.

00:36:37.660 --> 00:36:39.970
We then check in for our account stores,
Neil.

00:36:40.010 --> 00:36:42.560
If it is, we allocate it into
the new account store.

00:36:42.560 --> 00:36:45.340
And as Lestat said,
it's very important to keep this account

00:36:45.340 --> 00:36:49.690
store around as long as you're using the
accounts you got from that account store.

00:36:54.320 --> 00:36:59.970
We then go ahead and fetch
the Facebook account type

00:37:00.480 --> 00:37:02.320
from the account store.

00:37:08.300 --> 00:37:11.740
If we have that Facebook account type,
we can request access to the account.

00:37:11.740 --> 00:37:15.090
We do it by calling request
access to accounts with type,

00:37:15.090 --> 00:37:17.730
we pass in our type,
and we pass in a completion

00:37:17.730 --> 00:37:21.350
handler which will be called when
the user has made a decision.

00:37:22.800 --> 00:37:27.940
So in that completion handler,
we check for success.

00:37:28.920 --> 00:37:33.410
That means that either we already
had access or the user pressed OK,

00:37:33.410 --> 00:37:34.870
I'll show that later.

00:37:38.080 --> 00:37:43.450
If you're successful,
we set a status message so

00:37:43.450 --> 00:37:45.670
you can keep around for later.

00:37:47.970 --> 00:37:52.090
And then we go ahead and fetch the
Facebook accounts from the account

00:37:52.180 --> 00:37:55.550
store with accounts with account type.

00:37:55.550 --> 00:37:58.070
And as Lestat said,
there will only be one

00:37:58.070 --> 00:38:00.260
Facebook account on the device.

00:38:00.390 --> 00:38:03.050
So here for simplicity,
I just go ahead and fetch the

00:38:03.050 --> 00:38:04.790
last object from that array.

00:38:08.570 --> 00:38:12.820
When we have that object,
we'll be posting the cat factor

00:38:12.820 --> 00:38:16.490
to feed by calling in the
post cat factor feed method.

00:38:16.670 --> 00:38:21.150
Also, we have to handle the failure case
in case we don't have access to user

00:38:21.150 --> 00:38:23.400
press no or something like that.

00:38:23.480 --> 00:38:26.890
And you probably need some more
intricate error handling here,

00:38:26.890 --> 00:38:28.500
but keep it simple for now.

00:38:28.640 --> 00:38:32.980
So if I scroll down now,
you see there's no code in the

00:38:32.980 --> 00:38:34.870
post cat factor feed method.

00:38:35.150 --> 00:38:38.420
But before we implement that,
let's build and run the app

00:38:38.520 --> 00:38:40.430
and see what it looks like.

00:38:48.880 --> 00:38:51.700
So here's the daily catfacts app again.

00:38:51.730 --> 00:38:57.020
It looks as it did before,
but when I hit the post

00:38:57.020 --> 00:38:58.970
to Facebook button,

00:38:59.900 --> 00:39:01.760
You see that a dialog pops up.

00:39:01.780 --> 00:39:06.660
This is the accounts framework asking
the user if it's OK that this app

00:39:06.690 --> 00:39:09.090
uses the user's Facebook account.

00:39:09.420 --> 00:39:13.730
And we want to post this
cat effect to the timeline,

00:39:13.730 --> 00:39:15.640
so we just press OK.

00:39:15.700 --> 00:39:18.290
If you now go into the settings app,

00:39:20.730 --> 00:39:24.230
and go into the Facebook section.

00:39:24.300 --> 00:39:27.370
You see that a daily
CatFacts app is listed.

00:39:27.580 --> 00:39:30.570
This means the user can turn
on and off access at any time.

00:39:30.770 --> 00:39:33.270
The users are in control.

00:39:34.870 --> 00:39:40.880
So let's see how we can implement
posting to Timeline in our app.

00:39:40.880 --> 00:39:43.050
Open up Xcode again.

00:39:52.470 --> 00:39:54.980
We start by creating a
dictionary with the parameters

00:39:54.980 --> 00:39:56.370
we want to send to Facebook.

00:39:56.400 --> 00:39:59.060
In this case,
this is the message parameter,

00:39:59.060 --> 00:40:01.290
and we have set a value to cat fact.

00:40:04.010 --> 00:40:06.780
Then we create a URL which points
to the endpoint we want to talk

00:40:06.780 --> 00:40:08.330
to on the Facebook platform.

00:40:08.660 --> 00:40:11.830
In this case,
this is the Me Feed endpoint.

00:40:15.660 --> 00:40:18.930
Then we just go ahead
and create a request.

00:40:18.980 --> 00:40:20.670
We're calling it request
for service type.

00:40:20.780 --> 00:40:23.200
We pass in as a service type Facebook.

00:40:23.250 --> 00:40:27.940
This is an HTTP post request,
so we pass in as a request method post.

00:40:28.000 --> 00:40:31.200
We pass in the feed URL we
just created and the parameters

00:40:31.240 --> 00:40:33.130
dictionary we just created.

00:40:38.000 --> 00:40:41.820
So, very importantly,
we then set the account property on the

00:40:41.840 --> 00:40:47.170
request so the request can authenticate
itself against the Facebook platform.

00:40:50.880 --> 00:40:56.490
Then we simply call perform
request with handler and

00:40:56.920 --> 00:41:01.930
In the completion handler,
we should probably check HTTP status,

00:41:02.140 --> 00:41:04.320
check for platform errors.

00:41:04.320 --> 00:41:07.820
But in this case,
I'm just going to set the status

00:41:08.310 --> 00:41:11.480
label text to fact posted to Facebook.

00:41:11.580 --> 00:41:16.160
And please note that I'm dispatching
this to the main thread in the app.

00:41:16.270 --> 00:41:19.410
That's because any completion
handler in both the accounts

00:41:19.510 --> 00:41:23.520
framework and the social framework
will be called an arbitrary thread.

00:41:23.640 --> 00:41:26.200
So if you want to do UI updates,
you have to dispatch

00:41:26.200 --> 00:41:31.390
that to the main thread.

00:41:31.540 --> 00:41:34.680
So let's build around
and see if this works.

00:41:39.440 --> 00:41:43.040
So now when I press the
post to Facebook button,

00:41:43.040 --> 00:41:47.530
we won't get an alert because the
counselor has already asked us about that

00:41:47.530 --> 00:41:50.170
and it remembers that we gave it access.

00:41:51.200 --> 00:41:53.410
Press post to Facebook.

00:41:53.480 --> 00:41:55.960
And set fact post to Facebook.

00:41:56.070 --> 00:41:58.870
So let's go in mobile Safari.

00:42:02.830 --> 00:42:06.320
and as you can see,
the fact was posted to my timeline

00:42:06.480 --> 00:42:08.420
so all my friends can see it.

00:42:08.550 --> 00:42:12.910
Thank you very much and I would like
to welcome Lestat back up on the stage.

00:42:14.630 --> 00:42:15.590
Thank you, Kal.

00:42:15.660 --> 00:42:16.600
That was a great demo.

00:42:16.610 --> 00:42:19.280
Don't you just love it when people
can spam you with daily cat facts

00:42:19.280 --> 00:42:21.040
every day on your Facebook wall?

00:42:22.350 --> 00:42:27.440
We're going to get to the section
with dealing with permissions,

00:42:27.440 --> 00:42:27.440
but.

00:42:27.920 --> 00:42:30.890
Since we're running really tight on time,
we're going to have to go a little

00:42:31.000 --> 00:42:32.110
too fast for some of you guys.

00:42:32.110 --> 00:42:34.080
You might not appreciate
how fast I'm going.

00:42:34.140 --> 00:42:36.030
Our lab is just after the session.

00:42:36.030 --> 00:42:39.640
Please feel free to come talk
to me if anything is unclear.

00:42:39.740 --> 00:42:42.580
So you may have been tipped off by
that more info button in the access

00:42:42.580 --> 00:42:46.610
request that there's something to
Facebook permissions that's not as

00:42:46.610 --> 00:42:49.000
clear as maybe Twitter or Weibo.

00:42:49.070 --> 00:42:55.680
And so you do have to handle access
to Facebook accounts with a little

00:42:55.680 --> 00:42:57.300
more nuance than with Twitter.

00:42:57.370 --> 00:42:59.750
And the reason is people put
a lot of personal information

00:42:59.750 --> 00:43:02.330
in the Facebook accounts,
maybe a little more than Twitter.

00:43:02.490 --> 00:43:09.440
So access to those accounts is protected
in a more fine-grained way because you

00:43:09.530 --> 00:43:11.980
kind of want to tell the person what it
is you want to do with their account.

00:43:12.050 --> 00:43:14.770
Most people will not feel comfortable
just handing you over access to their

00:43:14.770 --> 00:43:16.450
account and you can do whatever you want.

00:43:16.520 --> 00:43:19.200
There's a lot of potential for misuse.

00:43:19.340 --> 00:43:23.570
So you have to tell us what
permissions you want for that account.

00:43:23.640 --> 00:43:25.800
You have to tell us what you intend
to do with it and we're going to

00:43:25.890 --> 00:43:29.840
pass that information onto the server
so that Facebook knows what you're

00:43:29.840 --> 00:43:32.300
planning on doing with the account.

00:43:32.880 --> 00:43:35.780
And those permissions are all
documented on Facebook's website.

00:43:35.870 --> 00:43:37.320
You'll see an example
of them in the slides,

00:43:37.470 --> 00:43:40.270
but there's a lot of them and
they're very well documented on

00:43:40.270 --> 00:43:42.030
the Facebook developer website.

00:43:42.040 --> 00:43:46.250
So the Access Dictionary that we've
been keeping mysterious for so long.

00:43:46.250 --> 00:43:47.680
Finally, we're going to get to it.

00:43:47.680 --> 00:43:48.800
We're going to talk about it a little.

00:43:48.830 --> 00:43:53.950
It's something that you have to pass
under AC Facebook Client Access Info

00:43:54.020 --> 00:43:56.850
in your InfoP list only for Seed 1.

00:43:56.860 --> 00:43:59.550
So for those of you
watching this in the future,

00:43:59.760 --> 00:44:02.760
do not put this in your InfoP list.

00:44:03.070 --> 00:44:08.630
This goes as a parameter in
the access request method.

00:44:09.210 --> 00:44:12.060
Now,
the Access Dictionary is pretty simple,

00:44:12.120 --> 00:44:13.320
just four keys.

00:44:13.390 --> 00:44:16.460
The first key is App ID,
just pass in your Facebook App ID,

00:44:16.540 --> 00:44:17.670
that's on the website.

00:44:17.950 --> 00:44:22.140
The second key, don't worry about it,
it's going to become optional in C2.

00:44:22.140 --> 00:44:24.250
It is for those who are planning
to do more of an advanced

00:44:24.250 --> 00:44:27.050
integration and they have to deal
with different platform versions.

00:44:27.090 --> 00:44:29.720
Most of you will not have to
care about this and you won't

00:44:29.720 --> 00:44:31.490
have to enter it C2 and onward.

00:44:31.820 --> 00:44:34.380
The next key is the permissions
key and that's where you enter

00:44:34.380 --> 00:44:37.210
an array of the permissions
you're requesting from Facebook.

00:44:37.250 --> 00:44:40.160
Now, this is the one we use
for daily cat facts.

00:44:40.320 --> 00:44:42.990
The permission is called publish
stream and it means we're going

00:44:43.010 --> 00:44:44.460
to write to the user's timeline.

00:44:44.460 --> 00:44:47.540
And that's the only thing we
want to do with the account,

00:44:47.540 --> 00:44:50.310
so that's the only
permission that we requested,

00:44:50.310 --> 00:44:51.970
but you may request more.

00:44:52.160 --> 00:44:55.590
Finally,
AC Facebook permission group key is

00:44:55.590 --> 00:44:59.610
the last parameter you have to pass
and it needs to describe as closely

00:44:59.740 --> 00:45:03.600
as possible the permissions that
you are requesting in that array.

00:45:03.600 --> 00:45:05.030
So there are three values.

00:45:05.310 --> 00:45:08.600
There's read, there's write,
and there's read write.

00:45:08.760 --> 00:45:11.040
And you pass in a value,
basically we're going to talk

00:45:11.040 --> 00:45:14.600
about how to determine the value,
but conceptually speaking it's simple.

00:45:14.600 --> 00:45:16.610
You just describe what you're
about to do with the account,

00:45:16.620 --> 00:45:18.090
what permissions you're requesting.

00:45:18.240 --> 00:45:21.860
We want to write to the timeline,
so we just pass in write.

00:45:24.120 --> 00:45:25.580
Now, how do you choose it?

00:45:25.660 --> 00:45:30.160
I prepared a few examples to help
you get the right permission group.

00:45:30.160 --> 00:45:32.780
If you want to use permissions
like user about me,

00:45:32.780 --> 00:45:35.350
basically read anything
from the user profile.

00:45:35.350 --> 00:45:37.580
Or if you want to read from
their friends' profiles,

00:45:37.610 --> 00:45:39.400
or if you want to get a
list of email addresses,

00:45:39.500 --> 00:45:40.800
you should be passing in read.

00:45:40.800 --> 00:45:44.160
Now, if you want to do things
that write to their profile,

00:45:44.280 --> 00:45:47.490
like publish actions on their
behalf or publish things like

00:45:47.490 --> 00:45:50.460
status updates to their stream,
then you need to use the

00:45:50.640 --> 00:45:51.850
permission group right.

00:45:51.860 --> 00:45:55.150
And if you want both
kinds of permissions,

00:45:55.150 --> 00:45:57.590
you would pass in read right.

00:45:58.110 --> 00:45:59.050
Pretty simple.

00:45:59.050 --> 00:46:03.760
Now one tiny caveat is you can't request
all permissions right now in Seed 1.

00:46:03.760 --> 00:46:07.930
There are some permissions labeled
as extended permissions and those

00:46:07.930 --> 00:46:10.460
you can't request in your Info.plist.

00:46:10.460 --> 00:46:13.780
So this includes reading
the entire user's timeline.

00:46:13.780 --> 00:46:17.240
And this is a little different
from reading status updates

00:46:17.240 --> 00:46:19.050
or some items that they post.

00:46:19.060 --> 00:46:23.230
Reading their timeline includes
other friends posts and so that's why

00:46:23.230 --> 00:46:25.640
it's labeled an extended permission.

00:46:25.640 --> 00:46:27.980
Or managing pages on the page.

00:46:28.000 --> 00:46:29.750
So you can't request all permissions on
their behalf and a few other permissions

00:46:29.750 --> 00:46:31.840
that are going to be documented online.

00:46:31.840 --> 00:46:35.880
And this may or may not
change in the future.

00:46:35.880 --> 00:46:35.880
Just stay tuned.

00:46:35.880 --> 00:46:35.880
We're working on it.

00:46:36.770 --> 00:46:40.290
Right, so the last topic that's
Facebook specific is you need

00:46:40.490 --> 00:46:43.250
to make sure that you always
have access to the account.

00:46:43.270 --> 00:46:46.370
It's not as clear as it might
be with Twitter and Weibo.

00:46:46.470 --> 00:46:50.340
And Kal actually showed you
one way you might lose access.

00:46:50.420 --> 00:46:52.130
If you go to settings,
if the user goes to settings,

00:46:52.190 --> 00:46:54.620
they might flip the switch on your app,
right?

00:46:54.700 --> 00:46:56.840
And then you can't access
the account anymore.

00:46:56.910 --> 00:46:58.960
But there are other
things that might happen.

00:46:59.030 --> 00:47:03.340
And every app basically gets
issued a token when they request

00:47:03.340 --> 00:47:05.700
authorization to access the account.

00:47:05.770 --> 00:47:08.050
And that token will expire.

00:47:08.180 --> 00:47:09.790
And when that token expires,
you need to be ready.

00:47:09.800 --> 00:47:12.090
And I'm going to show you what to do.

00:47:12.290 --> 00:47:15.800
Also, the user can remove your app
from the Facebook website.

00:47:16.000 --> 00:47:17.650
Every profile, there's an apps tab.

00:47:17.660 --> 00:47:19.850
You can go there and hit
X next to any app you want.

00:47:19.920 --> 00:47:20.810
It goes away right away.

00:47:21.430 --> 00:47:25.170
So, and finally,
there's also the switch in settings.

00:47:25.240 --> 00:47:26.530
Keep that in mind.

00:47:26.530 --> 00:47:27.650
So, what do you do?

00:47:27.660 --> 00:47:30.930
The way you find out that you lost
access most of the time is you

00:47:30.940 --> 00:47:34.780
get an error 190 when you send
a request to the Facebook API.

00:47:34.780 --> 00:47:36.450
And that comes back in the NSData.

00:47:36.450 --> 00:47:39.690
When you serialize that to JSON or
whatever your preferred format is,

00:47:39.800 --> 00:47:42.080
you're going to see an
error object in there.

00:47:42.200 --> 00:47:44.150
And it's going to have code 190 in it.

00:47:44.190 --> 00:47:47.880
And what you need to do at that
point is you renew your token by

00:47:48.500 --> 00:47:52.180
calling an AC account store method
whose name is renew credentials

00:47:52.180 --> 00:47:53.700
for account with handler.

00:47:53.700 --> 00:47:55.110
You pass in the account.

00:47:55.110 --> 00:47:57.100
You pass in a completion handler.

00:47:57.100 --> 00:48:00.510
In the completion handler,
you're going to get one of three results.

00:48:00.620 --> 00:48:03.130
One could be credential renewal renewed.

00:48:03.220 --> 00:48:04.070
That's great.

00:48:04.280 --> 00:48:06.010
Your token had just expired.

00:48:06.010 --> 00:48:07.010
That's normal.

00:48:07.080 --> 00:48:08.320
We renew it for you.

00:48:08.320 --> 00:48:08.920
Great.

00:48:09.530 --> 00:48:12.780
Now,
you may have been rejected by the user.

00:48:12.780 --> 00:48:16.750
What that means is the user has performed
some action that indicates that they no

00:48:16.750 --> 00:48:18.740
longer want you to access their account.

00:48:18.770 --> 00:48:21.480
And that might be that they turned off
the switch in settings or it might be

00:48:21.480 --> 00:48:23.100
that they removed you from the website.

00:48:23.100 --> 00:48:25.710
That's when you get that
completion callback.

00:48:27.590 --> 00:48:30.930
Finally, you might get renewal failed and
that indicates that some sort of

00:48:30.930 --> 00:48:32.640
error happened beyond our control.

00:48:32.640 --> 00:48:35.620
You might try again and succeed.

00:48:36.170 --> 00:48:39.780
Now, if you have FB Connect already,
some of you have integrated

00:48:39.780 --> 00:48:41.380
that with their apps.

00:48:41.390 --> 00:48:42.760
That's great.

00:48:42.760 --> 00:48:46.060
You'll be pleased to know that
support will be pretty much automatic.

00:48:46.090 --> 00:48:50.210
We're just going to update our
own APIs in the next year to help

00:48:50.330 --> 00:48:52.630
FB Connect build on top of that.

00:48:53.000 --> 00:48:56.310
And there's going to be a major update
to FB Connect soon enough that will

00:48:56.310 --> 00:48:58.380
allow you to just get automatic support.

00:48:58.500 --> 00:49:01.700
So there's really very
little you have to do.

00:49:01.750 --> 00:49:04.510
Now, if you need more information,
please contact Paul Marcos or

00:49:04.510 --> 00:49:06.240
refer to the documentation online.

00:49:06.240 --> 00:49:08.660
I'm going to have to
quickly go through that.

00:49:08.800 --> 00:49:11.080
For those of you watching online,
just pause and get the links.

00:49:11.120 --> 00:49:13.700
And finally,
just a summary before you guys

00:49:13.700 --> 00:49:15.920
leave of the things we talked about.

00:49:15.940 --> 00:49:18.360
If you want UI integration, very easy.

00:49:18.360 --> 00:49:21.780
All you have to do is use UI Activity
View Controller on iOS and

00:49:21.780 --> 00:49:24.160
NS Sharing Service Speaker on OS X.

00:49:24.160 --> 00:49:27.650
If you want deeper integration,
talk to the accounts framework

00:49:27.650 --> 00:49:31.390
for access and then use SL Request
to send requests to the service.

00:49:31.700 --> 00:49:35.100
And finally, if you have FB Connect,
really, there's not much to worry about.

00:49:35.100 --> 00:49:36.490
You'll get automatic support.

00:49:36.500 --> 00:49:37.780
That's it.

00:49:37.930 --> 00:49:39.140
Thank you, everyone, for coming.

00:49:39.140 --> 00:49:40.610
I hope you have a great beer bash.