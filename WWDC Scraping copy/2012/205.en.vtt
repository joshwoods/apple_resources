WEBVTT

00:00:11.420 --> 00:00:15.200
Welcome to this WWDC session
on Collection Views.

00:00:15.280 --> 00:00:18.590
My name is Olivier Gutknecht,
and I am an iOS engineer

00:00:18.780 --> 00:00:20.460
in the UIKit team.

00:00:20.550 --> 00:00:25.570
And today,
we have a great new addition to UIKit.

00:00:26.190 --> 00:00:29.260
Sometimes,
developing applications on iOS is

00:00:29.920 --> 00:00:35.120
really about pushing the limits
on UI design and maybe finding

00:00:35.120 --> 00:00:38.100
new ways to visualize information.

00:00:38.250 --> 00:00:44.590
And we think Collection View is
going to be an amazing tool for that.

00:00:45.270 --> 00:00:47.200
What we're going to talk about today.

00:00:48.080 --> 00:00:50.200
First, collection view.

00:00:50.200 --> 00:00:51.200
Surprise.

00:00:51.440 --> 00:00:56.200
And we'll see the basics
of collection view.

00:00:56.200 --> 00:00:58.940
The view architecture,
how can you actually provide

00:00:58.940 --> 00:01:00.670
data and interact with it.

00:01:00.680 --> 00:01:05.680
And then,
we're going to talk about flow layout.

00:01:05.930 --> 00:01:11.060
And flow layout is a standard layout
we ship on iOS 6 for collection view.

00:01:11.180 --> 00:01:16.690
And you'll see how you can tune and tweak
flow layout for your application's needs.

00:01:16.700 --> 00:01:22.760
So, what can collection view do for you?

00:01:24.800 --> 00:01:30.040
and David Wright, Rose and Columns.

00:01:30.040 --> 00:01:30.040
Lines of items.

00:01:31.920 --> 00:01:37.000
Something that wasn't that
easy to do or elegant in UIKit.

00:01:37.060 --> 00:01:38.800
We're improving that.

00:01:38.890 --> 00:01:45.300
And actually,
we already use Collection View on iOS 6.

00:01:45.950 --> 00:01:48.660
This brand new Clocks app on iPad.

00:01:48.760 --> 00:01:52.290
This top view is just a
very simple collection view.

00:01:52.720 --> 00:01:57.020
We use also Collection View in
Maps in this new info pane,

00:01:57.170 --> 00:01:58.840
this Photos tab.

00:01:58.970 --> 00:02:02.510
We use Collection View in
some GameKit UIs.

00:02:03.400 --> 00:02:05.400
and I are going to show
you how to do that.

00:02:05.400 --> 00:02:07.400
And I think it's going to be a
great tool for your applications,

00:02:07.400 --> 00:02:07.400
too.

00:02:07.810 --> 00:02:09.400
So, let's get started.

00:02:09.400 --> 00:02:12.870
But first,

00:02:13.700 --> 00:02:16.000
A small comparison.

00:02:16.020 --> 00:02:21.690
We already have tools to manage
collection of data on our platforms.

00:02:22.160 --> 00:02:26.250
On OS X, we have NSCollectionView.

00:02:26.350 --> 00:02:28.860
NSCollectionView, UICollectionView,
same name.

00:02:28.860 --> 00:02:31.700
It's not exactly the same model.

00:02:32.210 --> 00:02:35.820
In AppKit on OS X,
NSCollectionView is really about

00:02:36.030 --> 00:02:40.100
managing a grid of NSView controllers.

00:02:40.120 --> 00:02:45.340
And the model we use for
UICollectionView is actually

00:02:45.340 --> 00:02:48.100
closer to UITableView.

00:02:48.230 --> 00:02:52.560
we have the same common principles.

00:02:52.960 --> 00:02:59.310
But let me stress that collection
view is not a replacement for-- oh,

00:02:59.710 --> 00:02:59.820
yeah.

00:02:59.990 --> 00:03:04.320
UICollectionView is not
replacing UI TableView.

00:03:04.730 --> 00:03:08.540
We have a lot of built-in
behaviors in TableViews.

00:03:08.670 --> 00:03:13.080
That's really one of the major
building blocks we use for iOS

00:03:13.090 --> 00:03:15.890
application on iPad and iPhone.

00:03:16.040 --> 00:03:17.970
And we're not changing that.

00:03:18.160 --> 00:03:21.100
We have things like headers, footers.

00:03:21.170 --> 00:03:22.740
We have edit mode.

00:03:22.790 --> 00:03:25.950
We have row animations.

00:03:26.050 --> 00:03:31.510
Many of these don't really make
sense in a collection view world,

00:03:31.530 --> 00:03:38.590
because collection view is more
abstract and generic than TableView.

00:03:39.710 --> 00:03:43.790
What did we build Collection View?

00:03:43.930 --> 00:03:50.050
We wanted to give you an extremely
flexible way to represent data

00:03:50.180 --> 00:03:53.160
content in your applications.

00:03:53.500 --> 00:03:58.840
And we wanted to do that while
keeping our usual patterns.

00:03:58.940 --> 00:04:02.340
We use all of the place in UIKit.

00:04:02.460 --> 00:04:06.640
So CollectionView is data source-based.

00:04:06.840 --> 00:04:09.660
It's delegate-based.

00:04:09.700 --> 00:04:11.370
We use cells.

00:04:11.460 --> 00:04:15.040
And if you used TableView before,
you should be at home

00:04:15.040 --> 00:04:17.170
with CollectionView.

00:04:17.280 --> 00:04:22.390
And we wanted to do that and keep
high performance in CollectionView,

00:04:22.390 --> 00:04:29.190
even with very large
datasets in your app.

00:04:30.750 --> 00:04:33.610
Let's check a quick example.

00:04:33.800 --> 00:04:40.200
Let's say that my data set is
actually my vacation pictures.

00:04:40.260 --> 00:04:42.920
A few pictures, some albums,

00:04:43.770 --> 00:04:46.460
I want to be an app for that.

00:04:46.530 --> 00:04:51.120
And what my designer gave me is this.

00:04:51.770 --> 00:04:53.690
Okay.

00:04:53.780 --> 00:04:57.390
How can I build that
with Collection View?

00:04:58.300 --> 00:05:07.700
[Transcript missing]

00:05:08.530 --> 00:05:14.660
A cell is really a representation
for one item in your data set.

00:05:14.750 --> 00:05:18.090
So you might have one
picture in that library,

00:05:18.090 --> 00:05:20.190
and you want one cell to represent that.

00:05:20.420 --> 00:05:23.400
And you, in that case,
are probably just going

00:05:23.620 --> 00:05:27.890
to use some UIImageView,
set the image, bam, that's done.

00:05:28.660 --> 00:05:34.500
The important thing here is
cells are really data-driven.

00:05:34.610 --> 00:05:39.760
It's your data model that drives what is
in Collection View for the cells part.

00:05:39.770 --> 00:05:42.130
It's based on the data source.

00:05:43.250 --> 00:05:47.950
The second concept we use in
Collection View is actually

00:05:48.480 --> 00:05:51.710
a new name for an old ID.

00:05:52.140 --> 00:05:55.700
It's what we call supplementary views.

00:05:55.790 --> 00:05:57.640
And what are supplementary views?

00:05:57.780 --> 00:06:02.480
Well, it's when you want to
add some views here,

00:06:02.610 --> 00:06:09.330
these two album titles,
that are really metadata about a section.

00:06:09.500 --> 00:06:11.100
It could be an album title.

00:06:11.250 --> 00:06:14.460
It could be the album
index somewhere else.

00:06:14.630 --> 00:06:17.500
It could be a block of text,
the story of that album.

00:06:17.500 --> 00:06:21.500
The important thing is it
applies to an entire section.

00:06:21.500 --> 00:06:26.210
And like cells, it's data-driven.

00:06:27.370 --> 00:06:30.170
And the reason why we don't
call that eaters or footers,

00:06:30.200 --> 00:06:34.550
because that's really the same concept
that we used before in TableView,

00:06:34.700 --> 00:06:39.230
it's, well, CollectionView is not
exactly table-based,

00:06:39.230 --> 00:06:39.960
right?

00:06:40.100 --> 00:06:43.210
So is that small thing a footer?

00:06:43.330 --> 00:06:44.820
Yeah, maybe.

00:06:44.960 --> 00:06:47.550
But, again, it's more generic than that.

00:06:47.690 --> 00:06:54.810
So we decided on supplementary views
to describe these additional things.

00:06:57.450 --> 00:07:01.950
The third concept we
use in Collection Views,

00:07:02.000 --> 00:07:07.190
and that's new,
is what we call decoration views.

00:07:07.190 --> 00:07:07.190
And...

00:07:07.670 --> 00:07:13.920
Decoration views is not like
cells and supplementary views.

00:07:14.000 --> 00:07:17.710
It's not something that is
going to be data-driven.

00:07:19.200 --> 00:07:23.340
It's going to be in the
visual side of the world.

00:07:23.470 --> 00:07:29.420
So it's more about the layout of
the collection view when you want to

00:07:29.420 --> 00:07:33.150
add some embellishment to some part.

00:07:33.250 --> 00:07:36.950
And here,
it's basically two kinds of views.

00:07:37.030 --> 00:07:44.440
We have this top part and the shelf
element that we repeat three times.

00:07:44.590 --> 00:07:47.780
And decoration views are
really useful to have,

00:07:47.890 --> 00:07:49.740
for instance,

00:07:49.860 --> 00:07:54.650
A background scrolling with your content,
which again was something that wasn't

00:07:54.780 --> 00:07:57.990
that easy to do before in TableViews.

00:07:58.360 --> 00:08:05.900
And with these three elements,
I can actually implement that design.

00:08:05.990 --> 00:08:10.740
So,
so View Architecture in Collection View.

00:08:11.600 --> 00:08:15.580
Sales,
Supplementary Views on the data side,

00:08:15.620 --> 00:08:23.780
Decoration View on the
visual/layout side.

00:08:25.530 --> 00:08:30.320
How do you provide content
to a collection view?

00:08:30.370 --> 00:08:37.010
Well, we have this Objective-C protocol
called UICollectionViewDataSource.

00:08:38.300 --> 00:08:44.530
That is something that one of your class
in your application must implement.

00:08:45.500 --> 00:08:48.490
And when we're about to
display things on screen,

00:08:48.490 --> 00:08:52.900
we need to call that data source
a few methods so we can know

00:08:53.040 --> 00:08:58.400
how many sections do we have,
how many items in a given section,

00:08:58.480 --> 00:09:04.130
and how should we actually
configure our cells or headers.

00:09:04.230 --> 00:09:09.660
Oh, well, supplementary views in
the more generic sense.

00:09:09.770 --> 00:09:12.660
So let's see how that works.

00:09:14.500 --> 00:09:19.580
The first thing is we call from
the collection view one method

00:09:19.600 --> 00:09:25.760
on your data source number of
sections in collection view.

00:09:25.760 --> 00:09:25.760
Actually,

00:09:26.000 --> 00:09:28.200
You don't have to implement that one.

00:09:28.300 --> 00:09:32.550
If you don't, we just assume that we
have just one section.

00:09:34.020 --> 00:09:35.160
How many sections?

00:09:35.190 --> 00:09:37.130
Two.

00:09:37.200 --> 00:09:38.470
Next step.

00:09:38.610 --> 00:09:42.090
We're going to ask for each section

00:09:42.760 --> 00:09:47.460
How many items do you have in
your data source for that section?

00:09:47.560 --> 00:09:50.200
Well, section 0, 4 items.

00:09:50.200 --> 00:09:53.130
Section 1, 5 items.

00:09:53.910 --> 00:09:59.220
And then, when we're ready to
display things on screen,

00:09:59.230 --> 00:10:03.890
we're going to call on your data source,
and you must implement that one

00:10:03.910 --> 00:10:05.990
if you want to display something.

00:10:06.410 --> 00:10:10.590
Collection view,
cell for item at index pass.

00:10:10.700 --> 00:10:16.980
And then you should actually fetch what
you need in your data set and configure

00:10:16.980 --> 00:10:19.850
the cell we're going to give you.

00:10:21.810 --> 00:10:28.570
It's important to note that in this case,
we will only ask you about these

00:10:28.570 --> 00:10:32.290
cells for what is actually on screen.

00:10:32.580 --> 00:10:38.800
: We don't want to allocate cells for
every single item in your data set.

00:10:38.900 --> 00:10:44.400
That would be quite a bad idea
on a memory-limited device.

00:10:45.200 --> 00:10:49.700
We have another trick for performance.

00:10:49.840 --> 00:10:51.810
Again, it's a technique we used before.

00:10:52.020 --> 00:10:55.990
It's cell and view reuse.

00:10:56.240 --> 00:10:57.440
What does that mean?

00:10:57.560 --> 00:11:02.040
In this case,
when we scroll a collection view,

00:11:02.150 --> 00:11:05.300
that might cause a few cells
or views to go off-screen,

00:11:05.430 --> 00:11:06.250
right?

00:11:06.400 --> 00:11:10.900
And in that case,
we don't want to deallocate these cells.

00:11:11.010 --> 00:11:14.980
We're just going to move
these into a reuse queue.

00:11:17.660 --> 00:11:22.030
When the user is about to scroll again,
we need new serves.

00:11:22.110 --> 00:11:26.870
So we are just going to grab
what we have in the reuse queue.

00:11:27.510 --> 00:11:33.340
Prepare that by asking you
with your data source method,

00:11:33.340 --> 00:11:36.450
and then we can actually screw it up.

00:11:37.050 --> 00:11:40.600
So with that,
we minimize the number of allocation

00:11:40.600 --> 00:11:43.000
and deallocation we need to do.

00:11:43.070 --> 00:11:48.000
That works quite well for large datasets.

00:11:48.380 --> 00:11:49.990
But...

00:11:50.600 --> 00:11:53.070
We actually improved that.

00:11:53.190 --> 00:11:56.600
We were using that technique
in TableView before.

00:11:56.680 --> 00:11:59.300
And we tweaked that.

00:11:59.380 --> 00:12:00.800
How?

00:12:01.760 --> 00:12:06.380
When you set up a collection view,
and that's usually in this viewDidLoad

00:12:06.400 --> 00:12:12.190
method in your UI view controller,
we ask you to register the class

00:12:12.470 --> 00:12:17.040
you're going to use for a cell,
for a reuse identifier.

00:12:17.160 --> 00:12:21.100
That is, the kind of data,
the kind of cell you want.

00:12:21.220 --> 00:12:26.620
And after that, in the dataSource method,

00:12:27.650 --> 00:12:30.010
We're going to call you
with CollectionView,

00:12:30.200 --> 00:12:32.500
the index pass we want to display.

00:12:32.560 --> 00:12:40.530
And what you will need to do is to
actually call on the CollectionView the

00:12:40.530 --> 00:12:43.980
QReusableCell with reuse identifier.

00:12:44.290 --> 00:12:49.880
And then you can actually configure
that cell by setting the image,

00:12:49.880 --> 00:12:51.620
returning the cell.

00:12:52.930 --> 00:12:57.400
What if we don't have any
cell available in ReaSQ?

00:12:57.550 --> 00:13:00.600
Before, you had to check for that.

00:13:01.260 --> 00:13:03.270
Not anymore.

00:13:03.430 --> 00:13:05.190
Why?

00:13:05.290 --> 00:13:07.660
Because you did help us.

00:13:07.870 --> 00:13:10.290
by registering that class.

00:13:10.400 --> 00:13:12.100
So we know the class for that cell.

00:13:12.140 --> 00:13:16.640
So even if we don't have a cell
available in the reuse queue,

00:13:16.680 --> 00:13:18.940
we can instantiate that for you.

00:13:18.980 --> 00:13:23.410
So that code just goes away.

00:13:29.210 --> 00:13:33.420
And we like that so much,
we added the same

00:13:33.420 --> 00:13:36.260
technique to UITableView.

00:13:42.200 --> 00:13:46.100
So, let's summarize.

00:13:46.220 --> 00:13:50.990
We always instantiate a cell
or supplementary view for you.

00:13:51.180 --> 00:13:54.730
You just need to register the
class for that cell or that

00:13:54.730 --> 00:14:00.310
supplemental review of kind,
header, footer, anything.

00:14:00.790 --> 00:14:05.000
You can also set up that
cell in Interface Builder

00:14:05.100 --> 00:14:10.200
and just register as an IP,
something we had before in TableViews.

00:14:10.320 --> 00:14:13.490
And then, in DataSource,

00:14:13.750 --> 00:14:17.820
Just in the queue, we have two methods,
one for sales and one

00:14:17.820 --> 00:14:19.970
for supplementary views.

00:14:21.400 --> 00:14:23.300
Nice and easy.

00:14:23.440 --> 00:14:28.910
Then, how do we interact with content?

00:14:29.320 --> 00:14:32.540
It's time for yet another
Objective-C protocol for you,

00:14:32.590 --> 00:14:34.460
UICollectionViewDelegate.

00:14:34.500 --> 00:14:42.800
And that delegate will control how cells
are actually highlighted when you tap.

00:14:44.000 --> 00:14:45.900
Selected.

00:14:45.910 --> 00:14:49.640
And also,
we have support for these nice menu

00:14:49.640 --> 00:14:53.920
actions when you long tap a cell.

00:14:54.210 --> 00:14:58.760
And that's something
we actually improved,

00:14:58.760 --> 00:14:59.510
too.

00:14:59.550 --> 00:15:03.390
So just to be clear on the vocabulary,

00:15:04.200 --> 00:15:08.460
That cell on the left
is an highlighted cell.

00:15:08.630 --> 00:15:14.740
It's when I touch the screen,
but before touch up, right?

00:15:14.770 --> 00:15:18.760
And on touch up, what happens is the
cell might be selected,

00:15:18.780 --> 00:15:22.240
which is the case for
these three other cells.

00:15:23.840 --> 00:15:27.300
How did we improve that?

00:15:27.300 --> 00:15:28.980
First...

00:15:29.570 --> 00:15:35.700
On each cell, we have two properties,
selected and highlighted.

00:15:36.020 --> 00:15:41.390
And we defined a very precise
flow for highlighting and

00:15:41.390 --> 00:15:43.290
selection in Collection View.

00:15:43.470 --> 00:15:45.170
How does that work?

00:15:46.320 --> 00:15:51.570
First step is when the
finger touches the screen,

00:15:52.360 --> 00:15:58.360
Here we call on your delegate if
you actually implement that method.

00:15:58.430 --> 00:16:02.300
CollectionView should
highlight item at index pass.

00:16:02.360 --> 00:16:06.230
And that's new.

00:16:06.270 --> 00:16:08.230
In TableView,

00:16:09.510 --> 00:16:13.900
: You can control selection,
but even if you don't want

00:16:13.900 --> 00:16:20.060
a cell to be selected,
you would get that highlighting feedback,

00:16:20.150 --> 00:16:24.740
which is not that good from a
user experience point of view.

00:16:24.830 --> 00:16:27.700
So in Collection View,

00:16:28.110 --> 00:16:32.200
We first ask,
should we actually highlight the cell?

00:16:32.330 --> 00:16:36.800
And if you return no to that method,
we don't highlight,

00:16:36.930 --> 00:16:42.520
but we completely bypass
the selection process.

00:16:43.120 --> 00:16:44.660
stops here.

00:16:44.750 --> 00:16:49.950
If you return yes, then, well,
we switch that highlighted

00:16:49.950 --> 00:16:52.810
property to yes,
and we call on your delegate

00:16:53.080 --> 00:16:58.340
didHighlightItemAtIndexPass.

00:16:58.510 --> 00:17:00.570
The next step is

00:17:02.110 --> 00:17:09.080
: When we switch up,
should we actually select that cell?

00:17:09.080 --> 00:17:15.190
So, again,
if you choose to implement that method,

00:17:15.810 --> 00:17:20.620
CollectionView should
select item at index pass.

00:17:20.620 --> 00:17:20.620
And if you return yes, okay,
we do a bunch of things.

00:17:20.620 --> 00:17:20.620
We switch selected to true.

00:17:21.480 --> 00:17:22.990
We switch back, highlight it to false.

00:17:23.120 --> 00:17:28.180
And at the same time, we call
CollectionViewDidAnalyteItemAtIndexPass

00:17:28.260 --> 00:17:31.540
and
CollectionViewDidSelectItemAtIndexPass.

00:17:31.680 --> 00:17:38.800
So you can hook whatever you want on
the actual end of the selection process.

00:17:40.130 --> 00:17:42.260
What's next?

00:17:42.370 --> 00:17:45.140
Unselect.

00:17:45.310 --> 00:17:47.760
So that's when you tap again a cell.

00:17:47.800 --> 00:17:52.800
And in that case, we call should deselect
item at index pass.

00:17:52.840 --> 00:17:58.340
Returning yes means
that you deny unselect.

00:17:58.420 --> 00:18:00.940
So the cell would stay selected.

00:18:01.030 --> 00:18:03.580
If you return yes, then...

00:18:03.670 --> 00:18:07.750
We call didSelect, didDeselect,
item at index pass,

00:18:07.750 --> 00:18:11.140
and we switch back the
selected property to false.

00:18:11.240 --> 00:18:17.240
So that's a very precise
flow for selection and

00:18:17.240 --> 00:18:19.630
highlight in Collection View.

00:18:19.780 --> 00:18:24.560
And, of course,
you can also set up on Collection View if

00:18:24.560 --> 00:18:29.640
you want selection or multiple
selection or no selection at all.

00:18:29.730 --> 00:18:31.560
And we do the right thing.

00:18:31.700 --> 00:18:33.100
Then...

00:18:35.500 --> 00:18:39.700
Bringing actual content on screen.

00:18:39.830 --> 00:18:42.600
We have two interesting things here.

00:18:42.770 --> 00:18:45.760
Cells and layout.

00:18:45.910 --> 00:18:48.190
First, cells.

00:18:49.900 --> 00:18:51.900
There is one thing you need to know.

00:18:52.010 --> 00:18:55.790
The collection view is not
in the content business.

00:18:55.870 --> 00:18:57.260
It's your content.

00:18:57.270 --> 00:19:01.930
We do not define any
style in collection view.

00:19:02.490 --> 00:19:04.900
So you don't have, like,
table view things like,

00:19:05.070 --> 00:19:08.830
give me that cell with one image,
one label, two labels.

00:19:08.890 --> 00:19:12.120
No styles at all.

00:19:12.120 --> 00:19:12.120
But...

00:19:12.150 --> 00:19:16.760
We do help you by tracking
selection and highlight,

00:19:16.760 --> 00:19:17.950
as we saw.

00:19:18.060 --> 00:19:21.820
And we do actually a bit more than that.

00:19:22.660 --> 00:19:28.300
When we call setHighlighted
or setSelected on a cell,

00:19:28.300 --> 00:19:34.940
what we actually do is we walk the
entire view sub-tree for that cell.

00:19:35.000 --> 00:19:41.270
And if any view here actually implements
setSelected or setHighlighted,

00:19:41.270 --> 00:19:43.200
we're going to call that.

00:19:43.710 --> 00:19:45.380
What does that mean?

00:19:45.500 --> 00:19:51.080
It means that if in a collection
view cell you actually use

00:19:51.110 --> 00:19:55.020
any standard UIKit control,
you will get selection and highlight

00:19:55.400 --> 00:20:00.780
for free because we're going to
call that on the UIKit controls.

00:20:01.590 --> 00:20:05.200
The next thing we do-- and you can
do that for your own custom view,

00:20:05.200 --> 00:20:07.040
of course.

00:20:07.150 --> 00:20:09.370
The next thing we do is

00:20:10.430 --> 00:20:13.600
We give you two additional
properties on CELS.

00:20:13.600 --> 00:20:18.930
You can configure a background view
and a selected background view.

00:20:19.390 --> 00:20:24.140
And if you do that, we're going to switch
when we track selection,

00:20:24.140 --> 00:20:25.540
background view and
selected background view.

00:20:25.540 --> 00:20:30.300
So it's really easy to
implement these styles.

00:20:30.690 --> 00:20:37.250
So we know what the UICollectionViewCell
view hierarchy looks like now.

00:20:37.440 --> 00:20:43.390
We have UICollectionViewCell,
and we're probably going to supply that.

00:20:43.710 --> 00:20:51.030
The first view is the background view,
if you did provide one such

00:20:51.030 --> 00:20:53.100
view to CollectionViewCell.

00:20:53.100 --> 00:20:56.750
The next view is the
selected background view,

00:20:56.770 --> 00:20:58.600
if you did configure that.

00:20:58.910 --> 00:21:02.100
And on top of that,
we have a content view

00:21:02.100 --> 00:21:04.100
that we set up for you.

00:21:04.310 --> 00:21:09.740
And you should really add your own
content to that content view and not

00:21:09.740 --> 00:21:16.020
to the main CollectionViewCell view,
because that would mean that your

00:21:16.020 --> 00:21:20.600
views would be behind background
or selected background view,

00:21:20.640 --> 00:21:23.600
which wouldn't be a good idea.

00:21:23.830 --> 00:21:25.600
Okay.

00:21:25.600 --> 00:21:27.310
Now...

00:21:29.300 --> 00:21:32.620
That's what we know about CollectionView.

00:21:32.770 --> 00:21:35.500
It's actually a ScrollView subclass.

00:21:36.150 --> 00:21:38.940
It cooperates with
UICollectionViewDelegate and

00:21:38.940 --> 00:21:43.090
UICollectionViewDataSource,
which are in your application.

00:21:43.210 --> 00:21:47.380
And it manages a bunch of cells.

00:21:47.680 --> 00:21:49.730
We have something else.

00:21:50.760 --> 00:21:55.810
UICollectionViewLayout.

00:21:55.810 --> 00:21:55.810
And

00:21:55.860 --> 00:22:03.990
UICollectionView actually
doesn't know anything about

00:22:03.990 --> 00:22:03.990
how to set up cells on screen.

00:22:05.200 --> 00:22:08.960
It cooperates with a
UICollectionViewLayout

00:22:08.960 --> 00:22:11.870
instance to do that.

00:22:11.900 --> 00:22:19.700
And might be just a subclass of that,
like the flow layout we ship in iOS 6.

00:22:19.930 --> 00:22:25.200
But you can actually subclass
UICollectionViewLayout.

00:22:25.550 --> 00:22:27.700
What does that mean?

00:22:27.700 --> 00:22:31.750
It means that you can bring
your own layout to the party.

00:22:32.600 --> 00:22:36.940
A layout's responsibility is to compute,
generate layout

00:22:36.940 --> 00:22:40.730
information for each cell,
supplementary views,

00:22:40.850 --> 00:22:45.230
or decoration views we would
have in a collection view.

00:22:45.670 --> 00:22:53.640
And these layout attributes,
this layout information is a few

00:22:53.640 --> 00:22:56.600
things you might want to set.

00:22:57.310 --> 00:23:02.510
Eventually on a cell,
like position for a cell,

00:23:04.020 --> 00:23:07.400
The actual size for each cell.

00:23:07.660 --> 00:23:11.320
But you can also set opacity.

00:23:13.560 --> 00:23:17.500
Even z-index,
if you have overlapping cells,

00:23:17.500 --> 00:23:23.090
with the index you can control which cell
is going to be above or below the other.

00:23:23.100 --> 00:23:29.120
And you can even set up a simple
transform on a cell so you can

00:23:29.120 --> 00:23:31.800
scale a cell relative to others.

00:23:31.800 --> 00:23:36.070
And because UICollectionViewLayout
attribute is actually a class,

00:23:36.070 --> 00:23:40.300
you can supply that and add
other information that we're

00:23:40.300 --> 00:23:43.400
going to give to your view,
your cell class.

00:23:43.400 --> 00:23:44.600
Thank you.

00:23:44.930 --> 00:23:47.340
So, what does that mean?

00:23:47.410 --> 00:23:50.490
Well, that's a layout that

00:23:50.750 --> 00:23:55.670
UICollectionViewFlowLayout might
generate perfectly fine layout,

00:23:55.670 --> 00:24:01.650
two sections, two supplementary views
for header-like things,

00:24:01.750 --> 00:24:03.570
and a bunch of cells.

00:24:03.760 --> 00:24:09.530
But that is a perfectly fine layout.

00:24:09.600 --> 00:24:14.310
It's just not generated by flow layout,
but we have two sections.

00:24:15.470 --> 00:24:19.010
Two subliminal reviews, bunch of cells,
and that's something

00:24:19.330 --> 00:24:23.150
that one of your class,
subclassing your UICollectionView layout

00:24:23.630 --> 00:24:26.160
might actually generate.

00:24:26.290 --> 00:24:32.670
So, now, let's talk about flow layout.

00:24:34.410 --> 00:24:39.770
FlowLayout is an interesting class.

00:24:40.150 --> 00:24:46.690
Something we wanted to share to give you
some basic behavior for Collection View.

00:24:47.030 --> 00:24:50.700
And what can we do with
CollectionViewFlowLayout?

00:24:50.820 --> 00:24:55.320
We can go from really simple things,
some things that you

00:24:55.320 --> 00:24:57.840
asked us to do before,

00:24:58.400 --> 00:25:07.800
[Transcript missing]

00:25:08.320 --> 00:25:10.780
having it different sizes.

00:25:11.150 --> 00:25:15.140
Eaters and footers with, again,
different sizes.

00:25:15.190 --> 00:25:18.310
And CollectionViewLayout,
CollectionViewFlowLayout

00:25:18.310 --> 00:25:20.060
make that really easy to do.

00:25:20.190 --> 00:25:23.700
So what I want to do now is
to give you a very short demo

00:25:23.700 --> 00:25:27.050
of CollectionViewFlowLayout.

00:25:38.210 --> 00:25:44.700
This is an extremely simple
collection view with a flow layout.

00:25:44.830 --> 00:25:50.260
And here, my cells are just a small
label with just one letter.

00:25:50.430 --> 00:25:56.140
And that section is just
showing these cells.

00:25:58.420 --> 00:26:03.250
: Working nicely.

00:26:03.290 --> 00:26:11.670
And if we have another section,
like when I want to display Helvetica,

00:26:11.670 --> 00:26:11.670
notice that my cells are now--

00:26:12.080 --> 00:26:13.740
with different size.

00:26:13.800 --> 00:26:17.110
And that's built in
UICollectionViewFlowLayout.

00:26:17.390 --> 00:26:20.920
Another thing we built in is
when you actually rotate a

00:26:20.920 --> 00:26:23.370
device with a flow layout,

00:26:25.770 --> 00:26:29.800
We nicely crossfade cells if we need to.

00:26:29.880 --> 00:26:33.730
We actually detect-- we actually
detect if it's going to look

00:26:33.730 --> 00:26:36.550
good or not when we make cells.

00:26:36.650 --> 00:26:39.400
If it doesn't, we crossfade.

00:26:39.520 --> 00:26:40.400
For free.

00:26:40.400 --> 00:26:42.400
We don't have anything to do here.

00:26:44.990 --> 00:26:52.770
The next demo I want to
do is a small gallery app.

00:26:52.770 --> 00:26:59.840
And I think that's something
that you also requested before.

00:26:59.840 --> 00:27:01.980
Horizontal starting.

00:27:06.220 --> 00:27:10.750
So it's much better than just
table view in a horizontal mode.

00:27:10.870 --> 00:27:13.920
That's a collection view,
and here I have a custom

00:27:14.630 --> 00:27:16.720
header on the side.

00:27:17.040 --> 00:27:19.000
A few items in that section.

00:27:19.040 --> 00:27:24.290
I go to another section
with different insets.

00:27:25.430 --> 00:27:30.620
: I'm going to start
with the collection view.

00:27:30.620 --> 00:27:38.350
And here I just customize the
internal item space between my cells.

00:27:38.350 --> 00:27:43.980
And again,
we support rotation out of the box.

00:27:53.500 --> 00:27:55.250
That was FlowLayout.

00:27:55.380 --> 00:27:58.140
Well, the demo of FlowLayout.

00:27:58.270 --> 00:28:01.140
And so FlowLayout is...

00:28:01.270 --> 00:28:04.310
A line-oriented layout is just not grids.

00:28:04.480 --> 00:28:05.840
You can configure that as a grid.

00:28:06.000 --> 00:28:07.170
You don't have to.

00:28:07.420 --> 00:28:12.150
And because that's really useful,
in FlowLayout, we do include support

00:28:12.240 --> 00:28:14.180
for headers and footers.

00:28:14.200 --> 00:28:19.810
And to talk about FlowLayout,
I'd like to introduce

00:28:19.880 --> 00:28:22.200
you to Luke Hiesterman.

00:28:22.500 --> 00:28:24.300
Thank you, Olivier.

00:28:30.430 --> 00:28:33.610
So as Olivier said,
you can bring all kinds of arbitrary

00:28:33.620 --> 00:28:38.100
layouts to Collection View,
but we've built in a tremendous

00:28:38.100 --> 00:28:42.610
layout that we think is really
awesome that we're shipping with iOS

00:28:42.810 --> 00:28:47.950
6 that you guys can use to produce
some really great UIs already today.

00:28:47.960 --> 00:28:51.800
So I'm going to talk to you
about UICollectionViewFlowLayout,

00:28:51.800 --> 00:28:54.200
which is our built-in layout,
which you just saw on

00:28:54.200 --> 00:28:58.300
screen in Olivier's demo,
and all of the different bells and

00:28:58.300 --> 00:29:02.080
whistles we have for you to tweak
within that layout to be able to do

00:29:02.170 --> 00:29:05.130
interesting things right out of the box.

00:29:05.240 --> 00:29:08.620
So to start off,
let's define what flow layout means.

00:29:08.660 --> 00:29:11.970
Maybe this is a sort of
interesting term for some of us.

00:29:12.120 --> 00:29:16.780
Well, we think of it as really
a line-oriented layout.

00:29:16.780 --> 00:29:19.930
We said right up front you're
going to be able to do grids,

00:29:19.930 --> 00:29:21.370
and absolutely.

00:29:21.520 --> 00:29:25.940
Grids are the degenerate case
of a line-oriented layout.

00:29:26.030 --> 00:29:30.420
If every item is the same size,
we end up laying them out in

00:29:30.420 --> 00:29:31.800
something that looks like a grid.

00:29:31.940 --> 00:29:37.720
But this could be a grouping of lines
of things that are not of like size.

00:29:37.880 --> 00:29:43.380
If you have different sizes,
we will lay them out sort of on a line

00:29:43.380 --> 00:29:44.990
until we hit the end of the screen.

00:29:45.090 --> 00:29:48.910
We break to another line,
and we start laying things out again.

00:29:48.920 --> 00:29:51.520
It's sort of like a text
system in that sense.

00:29:51.720 --> 00:29:54.330
And we include support
for headers and footers,

00:29:54.450 --> 00:29:55.390
which you've seen.

00:29:57.440 --> 00:30:01.600
So we have a bunch of ways
to customize the flow layout,

00:30:01.600 --> 00:30:04.100
and these include
everything you see here.

00:30:04.110 --> 00:30:06.840
You can change the item size, number one.

00:30:06.870 --> 00:30:09.900
You can change the
spacing between the lines.

00:30:09.930 --> 00:30:12.220
You can change the
spacing between the cells.

00:30:12.290 --> 00:30:14.450
You can change the scroll direction.

00:30:14.450 --> 00:30:16.740
So, you know,
we're all familiar with horizontal

00:30:16.740 --> 00:30:19.340
or rather vertical scrolling
that we've done in TableView.

00:30:19.340 --> 00:30:21.920
And one of the big requests
people have had is,

00:30:21.920 --> 00:30:25.690
hey, I want something like a
TableView to scroll horizontally.

00:30:25.700 --> 00:30:29.200
Well, we haven't given you a
horizontally scrolling TableView.

00:30:29.200 --> 00:30:30.370
We've given you something better.

00:30:30.370 --> 00:30:33.940
We've given you something that can
scroll horizontally and display

00:30:33.940 --> 00:30:36.900
content in whatever way makes sense.

00:30:37.230 --> 00:30:42.090
The little painting demo
that Olivier showed you,

00:30:42.600 --> 00:30:47.700
acted similarly to what a horizontal
table view would be in the sense that

00:30:47.730 --> 00:30:54.440
we only had one cell per row there,
per column, but we accomplished that by

00:30:54.440 --> 00:30:59.440
using insets around the section,
which is one of the other bells and

00:30:59.440 --> 00:31:01.140
whistles that we'll talk about here.

00:31:01.160 --> 00:31:03.830
And you can also specify the
sizes that you want to use

00:31:03.830 --> 00:31:04.690
for your headers and footers.

00:31:04.740 --> 00:31:07.040
So this is all within the
built-in flow layout that

00:31:07.120 --> 00:31:09.130
we're talking about right now.

00:31:09.250 --> 00:31:14.720
So the item size for any particular
thing can be configured globally based

00:31:14.720 --> 00:31:17.780
on a property on the actual flow layout.

00:31:17.940 --> 00:31:20.910
And you can just say, "Hey,
I want to make my item size

00:31:20.910 --> 00:31:23.810
100 by 100," or whatever it is.

00:31:24.100 --> 00:32:43.500
[Transcript missing]

00:32:43.830 --> 00:32:45.880
We also provide line spacing.

00:32:46.320 --> 00:32:50.570
This is different from the inter-item
spacing in that if you have,

00:32:50.570 --> 00:32:55.880
say, a vertically scrolling grid,
then the space between the items

00:32:56.110 --> 00:33:00.030
is that horizontal space that we
just saw on the previous slide.

00:33:00.140 --> 00:33:02.840
But line spacing,
also provided as a minimum,

00:33:03.020 --> 00:33:07.230
gives us the ability to provide
the definition of how much space

00:33:07.540 --> 00:33:09.850
is between the individual lines.

00:33:10.130 --> 00:33:14.310
And that's pretty straightforward
as to what that means if all your

00:33:14.310 --> 00:33:18.300
items are of the same height in
a vertically scrolling layout.

00:33:18.560 --> 00:33:21.830
But if you have something
that looks like this,

00:33:22.040 --> 00:33:25.710
then maybe it's a little less
obvious right out of the box

00:33:25.970 --> 00:33:27.290
what that actually means.

00:33:27.590 --> 00:33:31.640
Well, since it's a minimum, what we mean,
what we guarantee is the distance

00:33:31.640 --> 00:33:39.640
from the bottom of the furthest
down item is-- and to the top of the

00:33:39.640 --> 00:33:44.710
furthest up item on the following line,
that is at least the minimum

00:33:44.710 --> 00:33:47.490
value that you have specified.

00:33:47.630 --> 00:33:51.920
So that's what minimum
line spacing gets you.

00:33:52.300 --> 00:33:55.100
So spacing is something,
both of these properties

00:33:55.190 --> 00:33:56.440
can be configured globally.

00:33:56.440 --> 00:33:58.560
We have properties
directly on the layout.

00:33:58.740 --> 00:34:01.560
You can say my minimum
spacing for the line,

00:34:01.560 --> 00:34:04.110
my minimum spacing for
the item is this much,

00:34:04.110 --> 00:34:05.730
and you're done.

00:34:05.800 --> 00:34:08.100
For a lot of us,
this is going to be the way to go.

00:34:08.100 --> 00:34:10.200
We set it up when we
configure the layout,

00:34:10.200 --> 00:34:11.120
and we're done.

00:34:11.120 --> 00:34:14.920
But just like with item sizing,
we have delegate methods so that

00:34:15.110 --> 00:34:17.250
we can specify this dynamically.

00:34:17.410 --> 00:34:22.060
Some sections may have different
spacing between their items and between

00:34:22.060 --> 00:34:23.900
their lines than other sections.

00:34:23.960 --> 00:34:27.380
You saw this work in
Olivier's demo before,

00:34:27.400 --> 00:34:32.960
where different sections had
different spaces between the items.

00:34:33.130 --> 00:34:36.060
So between these three properties
that you've talked about

00:34:36.120 --> 00:34:39.020
or that we've talked about,
you may have started to

00:34:39.020 --> 00:34:44.030
pick up a pattern that we're
introducing here in FlowLayout,

00:34:44.030 --> 00:34:47.500
which is everything can be
configured globally if you want to

00:34:47.560 --> 00:34:51.680
use that thing for your FlowLayout
everywhere and set it up up front,

00:34:51.680 --> 00:34:53.910
or we can do it on a per-delegate basis.

00:34:53.920 --> 00:35:00.000
This is true basically for all
properties on the FlowLayout.

00:35:00.140 --> 00:35:04.710
And the thing that makes this
convenient for you is the delegate

00:35:04.710 --> 00:35:08.340
that the FlowLayout uses is actually
the delegate of the CollectionView.

00:35:08.340 --> 00:35:13.840
So that same delegate that gets the
item did select and should highlight

00:35:14.020 --> 00:35:19.650
all of those highlight selection calls,
that same delegate is going to

00:35:19.750 --> 00:35:23.900
get calls from the FlowLayout
asking for things like,

00:35:23.920 --> 00:35:26.660
things like item sizing and such.

00:35:26.790 --> 00:35:30.700
So to accomplish that,
the flow layout actually defines

00:35:30.700 --> 00:35:35.820
an additional protocol which
extends UICollectionViewDelegate--

00:35:35.840 --> 00:35:39.770
and we call that
UICollectionViewDelegate-- flow layout

00:35:40.000 --> 00:35:57.300
[Transcript missing]

00:35:57.500 --> 00:37:26.800
[Transcript missing]

00:37:27.230 --> 00:37:31.370
You're specifying a width and a height,
but we're only going to actually

00:37:31.370 --> 00:37:33.220
use one of those dimensions.

00:37:33.350 --> 00:37:37.160
And which dimension we use
depends on the scroll direction.

00:37:37.310 --> 00:37:41.590
So this is a header that we're
going to put into a vertically

00:37:41.590 --> 00:37:46.160
scrolling collection view using
UICollectionViewFlowLayout.

00:37:46.270 --> 00:37:49.930
And you specify some height
for that collection view.

00:37:49.960 --> 00:37:52.200
You actually give us a size,
because we're going to ask

00:37:52.200 --> 00:37:53.330
size for header and section.

00:37:53.520 --> 00:37:57.490
But the dimension that we
care about is the height.

00:37:57.720 --> 00:38:01.910
and we're going to take that height
and stretch the view out to fit

00:38:01.910 --> 00:38:05.760
the bounds of the collection view.

00:38:05.760 --> 00:38:05.760
So...

00:38:06.340 --> 00:38:14.570
and I will be working
on the collection view.

00:38:14.570 --> 00:38:23.470
We will stretch the height of
that header view to fit the

00:38:23.860 --> 00:38:26.580
collection view bounds that way.

00:38:26.580 --> 00:38:29.540
So the dimension that we care
about depends on the dimension

00:38:29.570 --> 00:38:30.830
that you're scrolling in.

00:38:30.890 --> 00:38:33.590
Just as we change the dimension
on which we lay out lines,

00:38:33.730 --> 00:38:38.490
we change the dimension in which we
stretch your headers and footers.

00:38:39.150 --> 00:38:43.100
So to summarize what we have
done with headers and footers,

00:38:43.530 --> 00:38:49.430
these are defined as supplementary
views in the CollectionViewSpeak.

00:38:49.830 --> 00:38:53.570
The flow layout actually defines
two types of supplementary

00:38:53.570 --> 00:38:58.040
views that are used,
section header and section footer,

00:38:58.040 --> 00:38:58.390
namely.

00:38:58.640 --> 00:39:02.640
And you'll notice that we've
actually kept the term flow

00:39:02.810 --> 00:39:05.100
layout out of those definitions.

00:39:05.150 --> 00:39:09.600
And that's because if you
go write your own layout,

00:39:09.660 --> 00:39:12.890
you may find that your layout
works in section headers

00:39:12.920 --> 00:39:14.500
and section footers as well.

00:39:14.570 --> 00:39:21.490
And you can just reuse these
supplementary types in your own layout.

00:39:22.740 --> 00:39:26.290
So in order to get them on screen,
it's really just the same dance that

00:39:26.290 --> 00:39:28.040
you're used to doing with cells.

00:39:28.050 --> 00:39:33.630
You'll register a class or a nib,
and then when in your data source

00:39:33.760 --> 00:39:38.410
you'll implement the appropriate method,
we will ask you for a view

00:39:38.410 --> 00:39:41.880
for the appropriate kind,
and you can dequeue a view

00:39:42.020 --> 00:39:45.520
of the type that you have
registered and return it to us.

00:39:45.630 --> 00:39:47.740
It's really the same thing
that you've done with cells,

00:39:47.880 --> 00:39:50.160
so that should be pretty
simple code for you to write.

00:39:50.180 --> 00:39:53.180
Let's talk about section insets.

00:39:53.180 --> 00:39:57.450
This is another little tweak
that you can do on your content.

00:39:57.820 --> 00:40:01.840
And so if you imagine having a bunch
of content that looks like this,

00:40:01.840 --> 00:40:05.770
you got it laid out, it's sort of within,
it's got a header on top and a footer on

00:40:05.770 --> 00:40:10.510
bottom and a bunch of stuff in between,
section insets is a property on that

00:40:10.560 --> 00:40:15.480
content that allows you to specify
a box surrounding the content,

00:40:15.480 --> 00:40:23.060
and then the insets, top, bottom, left,
and right, allow you to shrink that box.

00:40:23.060 --> 00:40:28.180
So that bounding box can change your
section header and footer stay put,

00:40:28.470 --> 00:40:32.370
but your content gets laid
out in a smaller area.

00:40:32.490 --> 00:40:34.500
And that's what section
inset will do for you.

00:40:35.800 --> 00:40:41.940
We used that in Olivier's demo before
in order to ensure that we only had one

00:40:41.950 --> 00:40:48.240
column for each of the artistic drawings,
and that got us a nice little line,

00:40:48.380 --> 00:40:51.740
horizontally scrolling line layout.

00:40:52.110 --> 00:40:55.730
So those also can be configured
globally or via the delegate.

00:40:56.070 --> 00:40:56.860
Very simple.

00:40:56.860 --> 00:40:59.500
It will be a pattern
that you'll be used to.

00:41:02.160 --> 00:41:04.500
When you walk out of here,
I want you to think about the

00:41:04.640 --> 00:41:07.340
Flow Layout as your new best friend.

00:41:07.370 --> 00:41:11.870
The Flow Layout is the thing that you
want to go home and play with tonight

00:41:12.270 --> 00:41:16.920
when you roll out Collection View and
you want to see what it's capable of,

00:41:17.050 --> 00:41:21.290
what kind of powers that it can bring
into your life for creating new,

00:41:21.290 --> 00:41:22.340
beautiful UI.

00:41:22.340 --> 00:41:24.220
It's really, really powerful.

00:41:24.220 --> 00:41:28.650
We have a lot of little bells and
whistles that you can tweak in there to

00:41:28.650 --> 00:41:34.410
produce really great new user interfaces
that maybe would have taken a lot,

00:41:34.480 --> 00:41:39.490
a lot of code to write in iOS 5,
but in iOS 6, you'll find yourself

00:41:39.490 --> 00:41:41.740
building them in an evening.

00:41:41.840 --> 00:41:45.290
So we have a lot of built-in
behaviors that let you do that.

00:41:45.510 --> 00:41:49.980
The amount of time that you'll save,
just, you're going to go buy

00:41:50.040 --> 00:41:51.440
yourself some ice cream.

00:41:51.440 --> 00:41:53.130
You'll be so happy about it.

00:41:53.150 --> 00:41:54.610
Yeah.

00:41:55.560 --> 00:41:59.730
And all of this that we've shown
is almost the tip of the iceberg.

00:41:59.960 --> 00:42:05.240
We've designed Collection View so that
layouts themselves are subclassable.

00:42:05.380 --> 00:42:07.740
And this includes
UICollectionViewFlowLayout.

00:42:08.500 --> 00:42:11.970
By subclassing the flow out,
you can provide all kinds of

00:42:11.970 --> 00:42:16.500
little tweaks specific to whatever
your imagination has come up with.

00:42:16.500 --> 00:42:19.840
So this is going to be a really
fantastic starting point for all

00:42:19.840 --> 00:42:24.500
of you to make applications that
are going to just blow us all away

00:42:24.500 --> 00:42:25.500
and even I can't dream of today.

00:42:25.500 --> 00:42:28.560
So with that,
I'd like to invite Olivier back

00:42:28.560 --> 00:42:32.440
on stage to show us a beautiful
demo of the capabilities of

00:42:32.440 --> 00:42:37.490
Collection View and wrap -- put this
whole thing back together for us.

00:42:37.570 --> 00:42:39.400
Doctor?

00:42:46.450 --> 00:42:48.570
First, a quick recap.

00:42:48.710 --> 00:42:50.770
So what do we know about Collection View?

00:42:51.020 --> 00:42:55.030
It's a data-driven view,
data source-based.

00:42:55.470 --> 00:42:59.230
We do selection and
ROI tracking built-in for you,

00:42:59.240 --> 00:43:02.150
and we help you build your
cells to support that.

00:43:02.240 --> 00:43:06.040
It's based on cell decoration views,
elementary views,

00:43:06.100 --> 00:43:10.340
and collection view actually
doesn't know anything about layout.

00:43:10.410 --> 00:43:14.400
That's the job of the layout class.

00:43:15.710 --> 00:43:18.970
We have more in Collection View.

00:43:19.060 --> 00:43:21.530
We have fine-grained,
block-based updates when

00:43:21.580 --> 00:43:23.340
you change your data source.

00:43:23.370 --> 00:43:27.160
We have a very fine and
precise flow of the layout,

00:43:27.170 --> 00:43:31.980
and the Collection View is going to
manage insertion and deletion of items.

00:43:32.020 --> 00:43:36.200
We have some built-in hooks
for animation and relay out.

00:43:36.220 --> 00:43:43.020
And you saw the one with this
rotation crossfade with FlowLayout.

00:43:43.410 --> 00:43:47.220
CollectionView is actually
a ScrollView subclass,

00:43:47.220 --> 00:43:50.000
but it's quite well integrated.

00:43:50.230 --> 00:43:54.480
The layout can know that we're
scrolling and compute some

00:43:54.740 --> 00:43:59.330
final position for a cell,
for instance.

00:44:00.100 --> 00:44:04.100
and I are going to show you how
to do that with some layouts.

00:44:04.100 --> 00:44:07.100
That's quite a big deal
in Collection View.

00:44:07.100 --> 00:44:10.100
But I don't want to talk about that.

00:44:10.100 --> 00:44:12.000
Let me show you.

00:44:12.100 --> 00:44:15.170
What we want to do now is to
give you a little taste of

00:44:15.260 --> 00:44:16.610
what Collection View can do,
actually.

00:44:22.030 --> 00:44:25.910
OK, so what do we have here?

00:44:25.960 --> 00:44:28.710
It's a very simple flow layout.

00:44:28.870 --> 00:44:31.960
: Every cell having the same size.

00:44:31.960 --> 00:44:40.800
I just added a few section insets to
show you that we have different sections.

00:44:40.930 --> 00:44:44.150
I can actually select on that.

00:44:44.910 --> 00:44:50.720
I even added some more
keyframe animation.

00:44:50.720 --> 00:44:50.720
And...

00:44:51.170 --> 00:44:55.080
What happens when you actually
insert or remove items?

00:44:55.180 --> 00:44:57.880
Well, when we insert, it's quite easy.

00:44:57.940 --> 00:45:02.050
We just move new cells
to the right place.

00:45:02.200 --> 00:45:07.610
And when we remove,
if we remove within a section,

00:45:07.880 --> 00:45:09.010
what do we do?

00:45:09.140 --> 00:45:11.900
Actually, we just animate.

00:45:11.900 --> 00:45:13.130
We don't have anything to do.

00:45:13.310 --> 00:45:17.590
You get that behavior for free.

00:45:18.240 --> 00:45:22.730
I might have forgotten
something about Collection View.

00:45:22.990 --> 00:45:26.390
For a given Collection View with
a collection

00:45:27.040 --> 00:45:29.590
Configure with a layout.

00:45:29.690 --> 00:45:31.530
You can call a method on
CollectionView which is

00:45:32.040 --> 00:45:34.500
setCollectionViewLayout.

00:45:34.620 --> 00:45:39.300
So you can switch to a new layout.

00:45:39.400 --> 00:45:42.290
What do we do in that case?

00:45:42.380 --> 00:45:45.500
Well, we animate.

00:45:45.500 --> 00:45:55.440
And that is one line of code.

00:46:02.100 --> 00:46:09.400
[Transcript missing]

00:46:09.810 --> 00:46:15.460
That grid layout, that stacked layout,
they are quite generic layout, right?

00:46:15.610 --> 00:46:20.190
Could apply to pictures, to CD albums,
anything.

00:46:20.910 --> 00:46:26.730
One thing you can do if you write
your own layout could be to actually

00:46:26.780 --> 00:46:33.510
peek into your data set and build your
layout based on some information about

00:46:33.510 --> 00:46:36.360
the actual item you want to display.

00:46:36.470 --> 00:46:40.510
Like, for instance, for pictures,
I don't know.

00:46:41.080 --> 00:46:43.590
GPS coordinates.

00:46:43.710 --> 00:46:47.320
And that's just a custom layout
with one small decoration view,

00:46:47.320 --> 00:46:49.960
one big decoration view.

00:46:49.960 --> 00:46:51.680
And we just animate.

00:46:53.450 --> 00:46:59.210
When we switch layout like that,
we actually call a method on

00:46:59.210 --> 00:47:02.840
each cells that are going to
appear in the next layout.

00:47:02.920 --> 00:47:04.620
Why that?

00:47:06.760 --> 00:47:11.530
You might start with a cell with
a very small size and get into the

00:47:11.530 --> 00:47:15.320
layout where the cell size is huge
because the cell doesn't decide.

00:47:15.380 --> 00:47:17.100
It's a layout job, right?

00:47:17.230 --> 00:47:22.760
So in a huge cell size, well,
you could add additional information,

00:47:22.760 --> 00:47:27.140
a label for the picture, the date,
anything else.

00:47:27.190 --> 00:47:32.440
Or what you could do, too,
is just tweak the visual

00:47:32.440 --> 00:47:38.180
appearance for that cell so it
matches best the new layout.

00:47:38.310 --> 00:47:44.280
Here, I'm just changing the corner radius
when switching to that new layout.

00:47:44.480 --> 00:47:47.470
So that's another custom layout.

00:47:48.690 --> 00:47:50.200
quite a simple one.

00:47:50.260 --> 00:47:56.530
And when I implemented that layout,
I needed to--

00:47:57.010 --> 00:47:59.440
For my implementation,
I need two properties.

00:47:59.470 --> 00:48:04.000
One is that reference point
for that cluster of cells.

00:48:04.160 --> 00:48:07.940
And the other one is the cell distance.

00:48:10.200 --> 00:48:15.480
: One thing I could do is to actually
add a gesture recognizer on my

00:48:15.480 --> 00:48:22.040
collection view and just change
the distance and that reference point

00:48:22.690 --> 00:48:26.090
on my layout is just a parameter,
right?

00:48:26.170 --> 00:48:28.160
Just call the setter.

00:48:28.160 --> 00:48:30.190
So let's pinch.

00:48:30.630 --> 00:48:32.200
And move.

00:48:32.230 --> 00:48:35.360
And I'm just changing two things.

00:48:35.440 --> 00:48:36.430
Set distance.

00:48:36.530 --> 00:48:37.280
Set point.

00:48:37.320 --> 00:48:38.340
That's all.

00:48:38.420 --> 00:48:41.720
And what happens is the layout
invalidates the collection view,

00:48:41.820 --> 00:48:45.820
compute the new state for the cell,
set everything to the right place.

00:48:45.850 --> 00:48:49.150
Again, it's just a few lines of code.

00:48:56.200 --> 00:49:03.690
But what if I just call setDistance,
setReferencePoint?

00:49:03.720 --> 00:49:05.200
What's going to happen?

00:49:05.230 --> 00:49:07.960
Well, in that case,
we change the parameters of that layout,

00:49:08.110 --> 00:49:11.040
so the layout is going to
jump in the next state,

00:49:11.040 --> 00:49:14.200
which visually is maybe not what I want.

00:49:14.200 --> 00:49:17.200
So what we can do is
use this fine-grained,

00:49:17.200 --> 00:49:20.430
blog-based update mechanism.

00:49:20.430 --> 00:49:24.460
So we can ask the CollectionView to
actually animate when

00:49:24.460 --> 00:49:26.200
changing a parameter in code.

00:49:26.200 --> 00:49:28.660
for a layout.

00:49:28.720 --> 00:49:30.240
No ends.

00:49:33.620 --> 00:49:37.470
So, you can do some really crazy layout.

00:49:37.680 --> 00:49:40.190
Please talk to your designer before.

00:49:42.170 --> 00:49:48.420
Things like circle layouts, wave layouts,
grid-back layouts-- maybe

00:49:48.420 --> 00:49:50.670
not grid-back layouts.

00:49:51.900 --> 00:49:55.440
And that one is actually
quite interesting.

00:49:55.530 --> 00:50:00.050
Remember in my first layout,
the grid one, I was adding and removing

00:50:00.050 --> 00:50:02.710
items from my data source,
and cells would just

00:50:02.840 --> 00:50:06.510
appear and disappear,
or even animate.

00:50:06.660 --> 00:50:08.100
What happens in that case?

00:50:08.120 --> 00:50:14.400
Well, we try to do the right thing,
which is we're going to actually add

00:50:14.400 --> 00:50:20.550
the cell at the right position or just
fade out a cell when we remove an item.

00:50:21.020 --> 00:50:26.880
Everything should just
work out of the box.

00:50:27.160 --> 00:50:30.560
One thing you can do when you
implement a custom layout,

00:50:30.560 --> 00:50:37.080
you can define the initial position
for a cell when it's appearing.

00:50:37.300 --> 00:50:42.000
You can define the final state
for a cell when it's disappearing.

00:50:42.120 --> 00:50:44.580
And what is that initial and final state?

00:50:44.730 --> 00:50:47.490
Well, again,
it's that UICollectionViewLayout

00:50:47.540 --> 00:50:51.660
attribute that define cell position.

00:50:51.920 --> 00:50:57.050
Cell size, cell opacity,
a simple transform,

00:50:57.050 --> 00:50:59.600
and you can do things like that.

00:51:02.700 --> 00:51:11.290
And that was adding a cell,
but you can get creative for deletion.

00:51:11.370 --> 00:51:14.790
Okay, so that was quite a simple layout.

00:51:18.180 --> 00:51:23.150
Because that transform actually,
it's a CA transform 3D.

00:51:25.930 --> 00:51:28.900
So, what could you do with that?

00:51:28.900 --> 00:51:33.380
Something like that.

00:51:38.910 --> 00:51:40.420
And it's actually quite
an interesting layout,

00:51:40.510 --> 00:51:41.360
too.

00:51:41.370 --> 00:51:45.550
Because in that case, when I swipe,

00:51:46.180 --> 00:51:53.240
I actually need to compute
again the cell state.

00:51:53.240 --> 00:51:59.530
And CollectionView is just tracking that
and asking the layout at the right time.

00:51:59.800 --> 00:52:05.970
And you might notice, too,
if I just scroll,

00:52:06.020 --> 00:52:10.200
that the cell perfectly snapped in place.

00:52:10.310 --> 00:52:15.600
And that was the scroll view/layout
integration I was talking about.

00:52:15.700 --> 00:52:22.860
And, of course, selections still work.

00:52:28.270 --> 00:52:32.990
My last layout is my final layout.

00:52:33.100 --> 00:52:34.540
That was not a Keynote animation.

00:52:34.540 --> 00:52:37.600
That was just a 10-lines layout.

00:52:39.760 --> 00:52:44.040
One thing about this demo,
every single layout,

00:52:44.220 --> 00:52:50.860
every single custom layout we add
here is about one page of code.

00:52:51.200 --> 00:52:55.500
It's that easy to create new custom
layouts with Collection View.

00:53:02.010 --> 00:53:04.840
Collection view is all
about your content,

00:53:04.920 --> 00:53:07.500
your sales, your layouts.

00:53:07.700 --> 00:53:12.270
Simple things are quite simple
because we ship flow layout for you,

00:53:12.270 --> 00:53:16.600
and we can't wait to see what
you're going to do with that.

00:53:16.850 --> 00:53:20.590
So, for more information,

00:53:20.970 --> 00:53:29.200
Please check the UIKit API documentation
or mail Jake Behrens or Evangelist.

00:53:29.260 --> 00:53:33.890
And we have this iOS 6
developer forums online.

00:53:34.160 --> 00:53:38.000
We're going to have some sample
code posted really soon now.

00:53:38.180 --> 00:53:41.270
So again, thank you.

00:53:41.360 --> 00:53:43.160
Hope you enjoyed that.

00:53:43.210 --> 00:53:45.100
Have a great week.