WEBVTT

00:00:10.230 --> 00:00:12.070
Good afternoon, everybody.

00:00:12.160 --> 00:00:15.600
Is everyone having a great WWDC thus far?

00:00:18.750 --> 00:00:20.700
That's what I like to hear.

00:00:20.700 --> 00:00:24.540
If you'd like to make a digital book,
you've come to the right place.

00:00:24.670 --> 00:00:29.480
This is session 515, HTML, CSS,
and DOM for Book Authors.

00:00:29.560 --> 00:00:32.550
I'm Edward O'Connor,
a web technology engineer on the

00:00:32.550 --> 00:00:34.900
Safari and WebKit team here at Apple.

00:00:35.060 --> 00:00:36.330
So iBooks.

00:00:36.760 --> 00:00:39.860
iBooks supports three kinds of books.

00:00:40.000 --> 00:00:45.290
First, flowing books, like novels,
which consist primarily

00:00:45.410 --> 00:00:48.390
of text and images,
fixed-layout books.

00:00:48.880 --> 00:00:52.920
which allow the book designer precise
control over the placement and

00:00:52.930 --> 00:00:55.200
position of everything on the page.

00:00:55.200 --> 00:00:58.980
And MultiTouch Books,
exceptionally easy to

00:00:59.470 --> 00:01:01.080
author with iBooks Author.

00:01:01.240 --> 00:01:05.680
So rich,
beautiful books your readers will love.

00:01:05.940 --> 00:01:10.360
So three formats, one core set of
technologies for all three.

00:01:10.520 --> 00:01:11.800
It's web technology.

00:01:12.090 --> 00:01:17.870
In MultiTouch Books, you can build rich,
interactive widgets with HTML for

00:01:17.870 --> 00:01:20.440
flowing and fixed-layout books.

00:01:20.560 --> 00:01:26.060
EPUB provides the structure of your book,
but the contents are HTML, CSS,

00:01:26.080 --> 00:01:29.280
and JavaScript,
the core web technologies.

00:01:29.390 --> 00:01:33.080
So if you're not a web developer,
or if the last time you looked at HTML,

00:01:33.310 --> 00:01:36.360
the blink tag was the new hotness,
you're in the right place.

00:01:36.460 --> 00:01:40.120
We're going to take a
look at the key parts,

00:01:40.250 --> 00:01:41.980
the core bits of web technology that
are essential to building a book.

00:01:41.980 --> 00:01:45.810
technology for making
great digital books.

00:01:46.420 --> 00:01:47.540
So let's get started.

00:01:47.630 --> 00:01:50.870
I thought we could take
a look at a document that

00:01:50.870 --> 00:01:52.800
hopefully you've all heard of.

00:01:52.990 --> 00:01:58.670
So I took a copy of the US Constitution,
exported it to HTML,

00:01:58.670 --> 00:02:01.720
and dropped it into an EPUB.

00:02:02.300 --> 00:02:03.960
And this is what it looks like.

00:02:04.080 --> 00:02:09.160
We've got a little bit of work to do to
make this be a really great-looking book.

00:02:09.270 --> 00:02:11.720
So in a few minutes,
you'll know everything you'll need

00:02:11.720 --> 00:02:14.200
to make it look like this instead,
something far more

00:02:14.200 --> 00:02:15.790
compelling for your readers.

00:02:15.890 --> 00:02:23.840
We'll start by looking at the
basic structure of your document.

00:02:23.920 --> 00:02:25.680
So the tool I used basically just
gave me automatic line breaks.

00:02:25.980 --> 00:02:28.520
This is the BR tag in HTML.

00:02:28.520 --> 00:02:37.070
For iBooks to format your book nicely,
we first need to tell it what

00:02:37.070 --> 00:02:38.690
each part of our content is.

00:02:38.690 --> 00:02:38.690
HTML provides a variety of elements.

00:02:39.250 --> 00:02:42.940
For basic page elements,
so you have the P element

00:02:42.940 --> 00:02:46.340
for your paragraphs,
various heading elements for

00:02:46.360 --> 00:02:49.500
your headings and subheadings,
and so on.

00:02:49.500 --> 00:02:53.030
And there are many great
tutorials and references online

00:02:53.030 --> 00:02:57.050
that you can use to look up the
basic structural HTML elements.

00:02:57.180 --> 00:03:01.210
And as you can see,
we've immediately gotten from iBooks

00:03:01.560 --> 00:03:04.100
much better formatting by default.

00:03:04.260 --> 00:03:08.850
So as I flip through this book,
I'm seeing that each of my paragraphs

00:03:09.740 --> 00:03:14.930
has this extra space in between,
and the first lines aren't indented.

00:03:15.790 --> 00:03:20.120
This is the default
presentation of text on the web,

00:03:20.250 --> 00:03:22.930
but it's not what you expect in a book.

00:03:23.100 --> 00:03:24.930
In a book,
you typically have your paragraphs

00:03:25.130 --> 00:03:29.240
right next to each other,
and you indent those first lines.

00:03:29.370 --> 00:03:34.660
To do this in web technology,
we're going to use what's

00:03:35.290 --> 00:03:37.140
called a style sheet.

00:03:37.140 --> 00:03:37.140
CSS

00:03:37.700 --> 00:03:41.870
stands for Cascading Style Sheets,
is the language we use to describe

00:03:41.870 --> 00:03:44.600
what our content should look like.

00:03:44.720 --> 00:03:49.260
So first, we'll link to our style
sheet from our HTML.

00:03:49.440 --> 00:03:52.480
So what goes in the style sheet?

00:03:52.480 --> 00:03:56.610
Well,
you need to identify the parts of the

00:03:56.760 --> 00:04:02.750
content you'd like to alter and then
provide iBooks with commands that will

00:04:02.750 --> 00:04:02.750
describe how you'd like it to look.

00:04:03.030 --> 00:04:07.950
In this case, we want to affect the
indentation of every paragraph.

00:04:08.420 --> 00:04:12.130
So we use what's called
an element name selector.

00:04:12.400 --> 00:04:15.330
In this case, I've named the P element.

00:04:15.540 --> 00:04:18.700
This will match every
paragraph in our book.

00:04:18.860 --> 00:04:23.070
And as you can see, we've got this nice
indentation on our first lines.

00:04:24.270 --> 00:04:28.690
But one of the key differences
between digital books and print is

00:04:28.690 --> 00:04:32.640
that your reader can change the font
size they use to read your book.

00:04:32.740 --> 00:04:36.840
So if we do that,
we'll find our nice-looking indent

00:04:36.840 --> 00:04:40.070
from before doesn't look so nice now.

00:04:40.190 --> 00:04:41.990
Well, what happened?

00:04:42.690 --> 00:04:48.640
We've used a unit of length, the pixel,
that's relative to the screen,

00:04:48.690 --> 00:04:51.430
not to the size of the font.

00:04:51.890 --> 00:04:55.540
You really want to express things
like indentation in terms that

00:04:55.540 --> 00:05:00.340
are relative to the font size,
so that when your user changes the font,

00:05:00.340 --> 00:05:01.970
it still looks great.

00:05:02.770 --> 00:05:07.310
There are several such thought-relative
units available in CSS.

00:05:07.410 --> 00:05:09.470
One of them is the M, or EM.

00:05:10.390 --> 00:05:13.740
The name comes to us
from print typography.

00:05:13.850 --> 00:05:17.730
It used to refer to the
width of the uppercase M.

00:05:18.090 --> 00:05:21.680
And now it's a little more complicated,
but that'll do.

00:05:21.900 --> 00:05:26.130
So once we've done this,
we change the font size,

00:05:26.130 --> 00:05:28.620
our indentation looks great.

00:05:31.110 --> 00:05:35.380
So now that we've taken care of that,
we still have these spaces

00:05:35.380 --> 00:05:37.390
between our paragraphs.

00:05:38.450 --> 00:05:46.420
To fix this,
we need to learn about how elements

00:05:48.160 --> 00:05:50.110
have space around them in CSS.

00:05:50.110 --> 00:05:50.110
There are two kinds of space
that you need to worry about:

00:05:50.110 --> 00:05:50.110
margin and padding.

00:05:50.670 --> 00:05:55.720
And this is because all elements
can have a border put around them.

00:05:55.770 --> 00:06:01.660
Margins are the space around the border,
whereas padding is the

00:06:01.740 --> 00:06:04.290
space inside the border.

00:06:06.280 --> 00:06:11.890
By default, paragraphs in HTML get
a top-and-bottom margin.

00:06:13.400 --> 00:06:18.540
So to remove that,
we simply set margin zero in our CSS.

00:06:18.670 --> 00:06:21.240
So this is already looking
a lot more like a book and

00:06:21.240 --> 00:06:22.800
a lot less like a web page.

00:06:22.920 --> 00:06:28.260
It's common in print for the
first paragraph after a heading

00:06:28.310 --> 00:06:32.660
or subheading to not be indented,
that only subsequent

00:06:32.660 --> 00:06:34.740
paragraphs should be indented.

00:06:34.880 --> 00:06:37.610
We can achieve this in CSS,

00:06:38.220 --> 00:06:40.860
by using what's called
a sibling selector.

00:06:41.050 --> 00:06:51.470
So remember,
our element name selector picked

00:06:51.470 --> 00:06:51.470
out every paragraph in the document.

00:06:51.470 --> 00:06:51.470
The sibling selector

00:06:52.950 --> 00:06:56.300
says,
"Give me all the elements that follow

00:06:56.420 --> 00:07:01.580
this other element." So here we've said,
"I'd like only the paragraphs that

00:07:01.580 --> 00:07:06.530
follow another paragraph directly in
the document." So now our indentation

00:07:06.530 --> 00:07:08.920
is only applied where we'd like it.

00:07:09.200 --> 00:07:13.100
Something else you may have noticed
is that iBooks is automatically

00:07:13.100 --> 00:07:15.770
hyphenating your content.

00:07:15.880 --> 00:07:17.800
This is really great.

00:07:18.370 --> 00:07:19.430
And it's dynamic.

00:07:19.550 --> 00:07:23.510
When the user changes the
font size or orientation,

00:07:23.720 --> 00:07:26.080
The hyphenation will
update automatically,

00:07:26.140 --> 00:07:28.590
and your text will
continue looking great.

00:07:28.910 --> 00:07:34.980
Automatic hyphenation is wonderful,
but sometimes you need to override it.

00:07:35.100 --> 00:07:43.770
Maybe you're writing a technical
manual and you're using a

00:07:43.770 --> 00:07:43.770
technical word that's not in the
default hyphenation dictionary.

00:07:43.970 --> 00:07:47.470
You can use what's called
the soft hyphen character,

00:07:47.500 --> 00:07:51.570
shy, to manually specify
each hyphenation point.

00:07:52.890 --> 00:07:57.150
Conversely,
you might want to disable hyphenation.

00:07:57.280 --> 00:07:59.710
This is very common with headings.

00:08:00.090 --> 00:08:05.110
You can use the epub-css
property to disable hyphenation.

00:08:05.930 --> 00:08:11.140
Another common structural element
of flowing books are quotes.

00:08:11.460 --> 00:08:15.320
Unfortunately, there aren't any quotes
in the Constitution,

00:08:15.320 --> 00:08:18.180
but I'm sure you can imagine
in the hot Philadelphia summer,

00:08:18.690 --> 00:08:22.420
People scribbled various
notes in the margin,

00:08:22.440 --> 00:08:26.980
and via extensive historical research,
I found one such note.

00:08:28.490 --> 00:08:32.150
So as you can see,
the element we use in HTML for

00:08:32.280 --> 00:08:34.540
quotes is called blockquote.

00:08:34.870 --> 00:08:38.020
And it gets, by default,
a little bit of margin on the

00:08:38.020 --> 00:08:42.120
left and right to distinguish
it from the surrounding text.

00:08:42.230 --> 00:08:50.290
One thing you might want to do
here is restrict the width of

00:08:50.300 --> 00:08:53.990
a quote or many other elements.

00:08:53.990 --> 00:08:53.990
This is very easy to do in CSS.

00:08:53.990 --> 00:08:53.990
You simply use the width property.

00:08:54.810 --> 00:08:58.490
Here I've chosen to use a percentage.

00:08:58.570 --> 00:09:03.510
This allows for the element
to take up the same amount of

00:09:03.510 --> 00:09:09.200
space on the screen on an iPad,
an iPhone, or an iPod Touch.

00:09:09.270 --> 00:09:12.300
Once you've restricted the
width of an element like this,

00:09:12.360 --> 00:09:14.790
you might want to center it on the page.

00:09:15.190 --> 00:09:20.150
And we can do this with a special
kind of margin called an auto margin.

00:09:20.170 --> 00:09:25.090
So before we had one value that
we were giving to a margin.

00:09:25.240 --> 00:09:32.500
When you give it two values,
the first specifies the vertical

00:09:32.500 --> 00:09:32.500
margin and the second the horizontal.

00:09:33.200 --> 00:09:37.300
So here, we've given it auto for
our horizontal margin.

00:09:37.330 --> 00:09:40.930
iBooks knows that the element
takes up 75% of the width,

00:09:40.970 --> 00:09:45.340
so it automatically allocates
the remaining 25% on either side.

00:09:45.420 --> 00:09:49.040
This quote still appears to
be part of the main document,

00:09:49.130 --> 00:09:53.890
but really we want it to be off to the
side as a pull quote or margin quote.

00:09:54.900 --> 00:09:58.560
We do this in CSS by floating an element.

00:09:58.680 --> 00:10:02.220
The float property does several things.

00:10:03.550 --> 00:10:07.000
It removes the element from the
main flow and moves it off to

00:10:07.110 --> 00:10:08.610
either the left or the right.

00:10:09.580 --> 00:10:13.890
So as you can see,
the Article 1 heading is following

00:10:13.890 --> 00:10:18.420
immediately after the preamble as if
there weren't anything in between.

00:10:19.720 --> 00:10:23.260
Floating an element also causes
the rest of the content to

00:10:23.260 --> 00:10:27.980
flow around it automatically,
so you don't have any ugly overlaps.

00:10:29.600 --> 00:10:32.400
Now that we have our
quote off to the side,

00:10:32.580 --> 00:10:36.410
we could use a variety of
CSS properties to make it visually

00:10:37.000 --> 00:10:38.720
distinct from the main text.

00:10:38.830 --> 00:10:43.680
And there are many great tutorials
and references online for the various

00:10:43.680 --> 00:10:46.220
CSS properties at your disposal.

00:10:46.330 --> 00:10:50.610
One very common thing to do
is to use a different font.

00:10:51.920 --> 00:10:56.980
So let's take a look a little bit at
how to work with fonts in your books.

00:10:58.880 --> 00:11:02.330
So the first thing to think about
here is that your reader can use a

00:11:02.390 --> 00:11:05.800
different font than you specified.

00:11:05.800 --> 00:11:10.310
iBooks supplies a font menu
with several great options.

00:11:11.790 --> 00:11:14.030
So if you're looking for a
font to specify for your book,

00:11:14.130 --> 00:11:17.790
you might first look at iBooks List.

00:11:17.900 --> 00:11:22.510
These are all fonts that are designed
for readability on the screen.

00:11:23.890 --> 00:11:26.840
But you're not limited to these fonts.

00:11:26.900 --> 00:11:29.680
iOS comes with many other fonts.

00:11:29.760 --> 00:11:32.560
One of my favorites is...

00:11:34.820 --> 00:11:42.590
Charter is very readable,
but even better would be Markerfelt.

00:11:42.600 --> 00:11:48.490
I'm pretty sure this is exactly what
the Founding Fathers had in mind.

00:11:49.650 --> 00:11:52.330
So this brings up a good point.

00:11:52.450 --> 00:11:54.860
If you want to change a font,
you should always have

00:11:54.860 --> 00:11:56.400
your readers in mind.

00:11:56.510 --> 00:11:59.050
Readability is the goal here.

00:11:59.150 --> 00:12:04.820
In this case, marker felt might not be a
suitable font for your body text.

00:12:04.910 --> 00:12:09.850
Maybe it's better just for headings
or other runs of large text.

00:12:11.890 --> 00:12:15.210
You're not limited to the
fonts available on the system.

00:12:15.290 --> 00:12:20.880
You can include a custom font that
you have a license for in your book.

00:12:22.220 --> 00:12:26.070
You simply include the
font file in your EPUB,

00:12:26.180 --> 00:12:31.380
and then you tell iBooks about this font
by using what's called an @fontface rule.

00:12:31.510 --> 00:12:34.760
This looks a little more complicated
than the CSS we've seen already,

00:12:34.800 --> 00:12:36.640
but it's pretty straightforward.

00:12:36.750 --> 00:12:38.860
It contains two parts.

00:12:38.990 --> 00:12:42.550
We use the font family
property to name the font,

00:12:42.700 --> 00:12:46.800
and then the source property
to specify the font file.

00:12:46.950 --> 00:12:50.080
And then in our CSS,
we just refer to it like

00:12:50.080 --> 00:12:52.100
any other system font.

00:12:53.050 --> 00:12:57.430
So in this case,
I've loaded what's called FelEnglish,

00:12:57.430 --> 00:13:03.280
which is a revival of an
18th century manual typeface,

00:13:03.280 --> 00:13:06.890
because I thought it's
a historical document,

00:13:06.890 --> 00:13:10.440
and an appropriate historical
typeface might fit with it.

00:13:10.550 --> 00:13:15.590
But I'm using Charter for my
body for better readability.

00:13:18.620 --> 00:13:21.010
Custom fonts typically
come in multiple files,

00:13:21.010 --> 00:13:24.620
so your italic will be in a
separate file from the bold,

00:13:24.620 --> 00:13:25.920
et cetera.

00:13:26.850 --> 00:13:34.400
To load multiple files for the same font,
you just use multiple @fontface rules.

00:13:34.400 --> 00:13:37.210
And you use the font style
and font weight properties

00:13:37.300 --> 00:13:39.080
to specify which is which.

00:13:42.180 --> 00:13:44.620
Now remember,
your reader can change the font

00:13:44.620 --> 00:13:46.540
they're using to read your book.

00:13:46.600 --> 00:13:51.010
If you specify a custom font,
how do you make sure that your user

00:13:51.060 --> 00:13:55.980
can get back to that custom font
if they've chosen a different one?

00:13:57.470 --> 00:14:01.020
In your Apple Display Options file
inside your EPUB,

00:14:01.020 --> 00:14:05.940
you include the specified fonts option,
and this enables the original

00:14:05.940 --> 00:14:07.640
item in the font menu.

00:14:07.750 --> 00:14:11.840
When I think about custom
fonts and the Constitution,

00:14:11.840 --> 00:14:16.640
I think of this sort of iconic
first page with this ginormous "We

00:14:16.640 --> 00:14:19.820
the People," a very bold statement.

00:14:19.850 --> 00:14:23.890
So I'd like to bling
up our preamble a bit.

00:14:25.290 --> 00:14:30.790
Now, before, in our CSS,
we've selected whole classes of elements,

00:14:30.800 --> 00:14:33.190
all of the paragraphs, et cetera.

00:14:34.980 --> 00:14:39.260
To select just the preamble,
I can give it a class in my markup

00:14:39.490 --> 00:14:43.620
and then refer to that class
from CSS using a class selector,

00:14:43.620 --> 00:14:47.500
which is just the class
name with a dot prepended.

00:14:48.710 --> 00:14:50.750
So I've made it a lot bigger,
made it italic.

00:14:50.990 --> 00:14:52.730
It's starting to look kind of nice.

00:14:52.890 --> 00:14:59.510
It's very, very common in books to
want to style a line,

00:14:59.510 --> 00:15:01.270
or the first line or the
first letter of a paragraph.

00:15:02.470 --> 00:15:06.780
But if the user changes the font size,
what's included on that

00:15:06.780 --> 00:15:08.540
first line will change.

00:15:09.210 --> 00:15:12.720
Fortunately,
we have a first line and a first

00:15:12.840 --> 00:15:15.490
letter pseudo-element in CSS.

00:15:15.690 --> 00:15:18.690
And this will dynamically update
and always match what's in

00:15:18.800 --> 00:15:23.660
that first line as orientation
changes and font size changes.

00:15:24.330 --> 00:15:27.550
I still want that "We the People"
to really kind of pop out,

00:15:27.550 --> 00:15:28.260
though.

00:15:28.260 --> 00:15:31.820
There wasn't any element just surrounding
"We the People," so I added one.

00:15:31.920 --> 00:15:35.170
And I'm using a similar
class selector like before.

00:15:35.470 --> 00:15:38.730
Now unlike print,
you're not going to get charged extra

00:15:39.050 --> 00:15:40.820
for using different colored ink.

00:15:40.820 --> 00:15:43.470
So just don't make it really ugly.

00:15:43.620 --> 00:15:44.020
Think about it.

00:15:47.300 --> 00:15:49.760
So that's looking pretty nice.

00:15:49.900 --> 00:15:52.630
Flowing books are more than just text.

00:15:54.600 --> 00:16:00.770
The judicious use of excellent images
can really improve the look of your book.

00:16:02.240 --> 00:16:07.040
Working with images in iBooks is really,
really easy.

00:16:07.040 --> 00:16:10.980
So here's a portrait of the
signing of the Constitution.

00:16:11.230 --> 00:16:13.600
Let's pop that right in there.

00:16:13.720 --> 00:16:16.690
We use the image element in HTML.

00:16:17.810 --> 00:16:20.450
to put an image in our markup.

00:16:20.610 --> 00:16:22.340
Takes two attributes.

00:16:22.470 --> 00:16:25.420
Source attribute
specifies the image file,

00:16:25.420 --> 00:16:30.540
and the alt attribute specifies
alternative text that will

00:16:30.540 --> 00:16:33.120
be used instead of the image.

00:16:34.570 --> 00:16:37.620
Remember,
many of your readers cannot see the

00:16:37.620 --> 00:16:39.740
images you've included in your book.

00:16:41.170 --> 00:16:44.580
And if an image is
worth a thousand words,

00:16:44.680 --> 00:16:47.280
you can probably spare 20
or 30 to describe each of

00:16:47.280 --> 00:16:49.290
your images appropriately.

00:16:50.740 --> 00:16:54.220
One thing I haven't done here,
I haven't told iBooks anything about

00:16:54.220 --> 00:16:56.460
how to size or place this image.

00:16:56.520 --> 00:17:05.360
That's because iBooks goes to
great lengths to figure out an

00:17:05.360 --> 00:17:06.690
appropriate size for your image,
to make sure it won't break across pages,

00:17:06.690 --> 00:17:06.690
and that sort of thing.

00:17:06.970 --> 00:17:08.890
It does this across devices.

00:17:08.930 --> 00:17:10.740
This looks great on the iPhone, too.

00:17:10.820 --> 00:17:12.910
And it didn't have to do anything.

00:17:13.830 --> 00:17:19.070
You might want to control the
width or placement of your image.

00:17:19.560 --> 00:17:23.880
The best way to do this in iBooks
is to put the image in a container

00:17:23.880 --> 00:17:26.840
and then style that container.

00:17:26.970 --> 00:17:32.350
So here I've used the same width and
auto margins from before to center and

00:17:32.560 --> 00:17:35.370
give a little space around my image.

00:17:35.470 --> 00:17:38.050
At this point, we can start to have fun.

00:17:38.750 --> 00:17:42.500
I decided to put a little bit
of a shadow behind my image.

00:17:42.600 --> 00:17:45.480
In CSS, there's a box shadow property.

00:17:45.650 --> 00:17:47.960
Which takes four arguments.

00:17:47.960 --> 00:17:50.770
The first two are the
offset from the image,

00:17:50.880 --> 00:17:54.570
then a bit of a blur,
and finally the color of the shadow.

00:17:54.690 --> 00:17:59.540
Another thing to keep in mind when
working with images and books is

00:17:59.540 --> 00:18:08.540
that your reader can change the theme
they use to read your book in iBooks.

00:18:08.540 --> 00:18:08.950
I do this all the time.

00:18:08.950 --> 00:18:08.950
My favorite is the night theme.

00:18:09.210 --> 00:18:11.060
Actually,
my wife's favorite is the night theme

00:18:11.170 --> 00:18:15.220
because I can't put the book down.

00:18:15.330 --> 00:18:17.970
I've been in bed for an hour,
and the light's off,

00:18:17.970 --> 00:18:19.370
and I'm keeping her up.

00:18:19.660 --> 00:18:26.890
So I turn on the night theme,
and hopefully the book still looks great.

00:18:26.890 --> 00:18:26.890
In this case, though,

00:18:27.560 --> 00:18:29.220
Something's not right.

00:18:29.220 --> 00:18:32.400
This image has a white background.

00:18:32.400 --> 00:18:35.500
And in normal theme, it looked great.

00:18:35.500 --> 00:18:38.500
In the night theme, not so much.

00:18:39.740 --> 00:18:41.800
This is an easy problem to avoid.

00:18:41.930 --> 00:18:45.900
Simply use an image with
a transparent background.

00:18:46.310 --> 00:18:50.390
This will continue to look
great in normal mode and

00:18:50.390 --> 00:18:52.400
in the night theme as well.

00:18:52.720 --> 00:18:55.660
So now we've looked at dealing with
the basic structure of our documents

00:18:55.810 --> 00:19:00.140
and how to work with custom fonts
and how to include images in them.

00:19:00.430 --> 00:19:07.830
But digital books are so much
more than a static recreation

00:19:07.830 --> 00:19:07.830
of print onto the screen.

00:19:08.690 --> 00:19:11.170
So let's go beyond print and look
at some of the things that you

00:19:11.240 --> 00:19:13.980
can only do in a digital book.

00:19:13.980 --> 00:19:21.330
We'll start by looking at animating
content in a fixed-layout book.

00:19:21.330 --> 00:19:21.330
A fixed-layout book

00:19:22.930 --> 00:19:29.580
is almost like a sequence of web pages.

00:19:29.580 --> 00:19:29.580
Each page is its own HTML document.

00:19:30.950 --> 00:19:33.570
So for each page,
we have to tell iBooks how

00:19:33.570 --> 00:19:35.570
big the page expects to be.

00:19:35.670 --> 00:19:39.390
We do this by defining
a viewport in our HTML,

00:19:39.410 --> 00:19:44.300
and then we set our body
dimensions to match that in CSS.

00:19:45.420 --> 00:19:48.680
Be sure to set zero margins
on your body so that the

00:19:48.680 --> 00:19:51.180
dimensions will actually match.

00:19:52.360 --> 00:19:54.840
So now we have this blank page,
a blank canvas.

00:19:54.840 --> 00:19:59.300
We can tell any story we want.

00:19:59.330 --> 00:20:03.490
So I thought we could create
a story about a sheep.

00:20:05.510 --> 00:20:07.320
But not just any sheep.

00:20:07.530 --> 00:20:11.270
This sheep has an
overriding goal in life,

00:20:11.320 --> 00:20:13.870
to help children sleep by jumping fences.

00:20:13.870 --> 00:20:19.600
Over and over and over again,
as many times as it takes.

00:20:20.340 --> 00:20:23.000
So we'll need a fence.

00:20:23.000 --> 00:20:24.610
In fixed-layout books,
you'll typically have a

00:20:24.610 --> 00:20:27.140
background image on each page.

00:20:27.320 --> 00:20:31.160
To set a background image in CSS,
you use the background property.

00:20:31.160 --> 00:20:33.410
You point to the image, and that's it.

00:20:33.410 --> 00:20:37.020
Make sure the dimensions of
your image match the viewport

00:20:37.100 --> 00:20:39.390
dimensions that you've set.

00:20:41.350 --> 00:20:45.260
Okay, so we've got our field, our fence.

00:20:45.290 --> 00:20:47.370
Let's put our sheep on there.

00:20:47.810 --> 00:20:48.800
This is just like before.

00:20:49.010 --> 00:20:53.970
You use the image element in your markup,
and there we have our sheet.

00:20:54.320 --> 00:20:55.360
There's a bit of a problem, though.

00:20:55.360 --> 00:21:01.200
It looks like our sheet might
be falling from a great height.

00:21:01.300 --> 00:21:03.230
And I'm a little worried.

00:21:03.330 --> 00:21:05.590
We need to put them on the ground.

00:21:06.120 --> 00:21:08.990
So to position elements
like this on the page,

00:21:09.040 --> 00:21:11.370
we can use absolute positioning.

00:21:12.620 --> 00:21:16.180
In CSS, you set your position
property to absolute,

00:21:16.180 --> 00:21:21.240
and then you use the top, right, bottom,
and left properties to position

00:21:21.250 --> 00:21:23.500
the element wherever you'd like.

00:21:23.680 --> 00:21:27.600
So there he is, safe on the ground.

00:21:27.730 --> 00:21:29.840
Let's give him some friends.

00:21:31.350 --> 00:21:36.800
So I have an image of a flock of sheep,
positioned exactly like the first sheep.

00:21:37.190 --> 00:21:38.860
But where did the sheep go?

00:21:38.970 --> 00:21:41.580
The flock is sitting on top of them.

00:21:41.660 --> 00:21:46.250
When you use absolute positioning
to position elements on the page,

00:21:46.250 --> 00:21:47.780
they can overlap.

00:21:47.990 --> 00:21:51.190
So to control the
stacking of your elements,

00:21:51.260 --> 00:21:53.850
you can use the z-index property.

00:21:55.630 --> 00:21:57.320
It's very simple.

00:21:57.340 --> 00:22:00.220
The bigger z-index value wins.

00:22:00.220 --> 00:22:04.620
So by setting the sheep z-index
higher than my flock's z-index,

00:22:04.660 --> 00:22:06.470
I've put it back on top.

00:22:07.370 --> 00:22:11.610
This is all you need to know to position
and stack every element on your page,

00:22:11.740 --> 00:22:14.140
but we still haven't made the move.

00:22:14.870 --> 00:22:19.610
To do this, we'll use what's called
keyframe animations.

00:22:19.690 --> 00:22:22.140
A keyframe animation
is a series of steps.

00:22:22.170 --> 00:22:26.890
Each step is a keyframe.

00:22:26.890 --> 00:22:26.890
You say, "I'm going to create a keyframe.

00:22:27.560 --> 00:22:30.440
This far through,
this is how things should look.

00:22:30.510 --> 00:22:32.800
This much farther,
this is how things should look.

00:22:32.880 --> 00:22:35.030
And so on.

00:22:35.190 --> 00:22:39.010
So I thought we could start
by defining an animation

00:22:39.820 --> 00:22:42.580
Let's have our sheep just
walk across the screen.

00:22:42.640 --> 00:22:48.120
We'll get to what goes in
our keyframes in a bit.

00:22:48.120 --> 00:22:55.730
To tell our sheep to animate,
we use the animation name property,

00:22:55.730 --> 00:22:57.870
and name -- we give it the same
name that we gave our keyframes.

00:22:57.870 --> 00:22:57.870
We have to tell iBooks how
long the animation should go.

00:22:58.250 --> 00:23:01.790
We do this with the
animation duration property.

00:23:01.850 --> 00:23:04.590
In this case, I've said one second.

00:23:05.070 --> 00:23:08.520
And you can control the timing
of your animation with the

00:23:08.530 --> 00:23:11.010
animation timing function.

00:23:11.340 --> 00:23:16.350
"Well, what does that mean?"
This is the scariest slide.

00:23:16.850 --> 00:23:21.240
So the easiest one is a
linear timing function.

00:23:21.330 --> 00:23:23.290
And this simply says--

00:23:23.350 --> 00:23:26.650
You know,
at 50% of the way through our animation,

00:23:26.650 --> 00:23:29.570
we should be 50% through our keyframes.

00:23:30.050 --> 00:23:34.290
So in a one-second animation,
a half a second will be at

00:23:34.290 --> 00:23:37.760
50%. Another common timing
function is called ease,

00:23:37.760 --> 00:23:41.500
and this provides a gentle
acceleration at the beginning

00:23:41.530 --> 00:23:44.880
and a deceleration at the end,
which will make your

00:23:44.880 --> 00:23:47.300
animation look really smooth.

00:23:48.330 --> 00:23:52.880
There are several other predefined
timing functions in CSS,

00:23:52.880 --> 00:23:58.310
but you might want to describe
your own custom timing function.

00:23:58.740 --> 00:24:00.450
You can also do this.

00:24:00.620 --> 00:24:01.800
Okay.

00:24:01.950 --> 00:24:04.410
So we've wired up our animation.

00:24:04.500 --> 00:24:05.830
We've told it how long it will take.

00:24:06.030 --> 00:24:08.660
But what goes in those keyframes?

00:24:08.770 --> 00:24:10.730
Well, if you think about it,

00:24:11.130 --> 00:24:14.560
When you want to animate things,
you typically want to move

00:24:14.560 --> 00:24:16.720
them around on the canvas.

00:24:16.730 --> 00:24:21.040
You can make them bigger or smaller,
maybe rotate them.

00:24:21.170 --> 00:24:24.230
We can do all of these
things with one CSS property,

00:24:24.380 --> 00:24:25.980
the transform property.

00:24:26.090 --> 00:24:35.010
To use the transform property
to move something around,

00:24:35.010 --> 00:24:36.010
you can use the translate function,
which takes an X and a Y offset

00:24:36.010 --> 00:24:36.010
and scoots your element

00:24:36.460 --> 00:24:38.160
along that offset.

00:24:38.170 --> 00:24:41.740
To make something bigger or smaller,
you use the scale transform.

00:24:41.930 --> 00:24:45.030
In this case,
a scale of two doubles the size.

00:24:45.800 --> 00:24:50.930
And to spin or rotate things,
you guessed it, the rotate transform,

00:24:50.930 --> 00:24:52.540
which takes an angle

00:24:53.720 --> 00:24:55.000
And does the rest.

00:24:55.160 --> 00:24:58.220
So to cause our sheep to
walk across the screen,

00:24:58.220 --> 00:25:01.200
we'll use the translate transform.

00:25:01.230 --> 00:25:04.790
We'll just need two
keyframes at the start.

00:25:05.170 --> 00:25:07.100
We don't want to translate it all.

00:25:07.230 --> 00:25:09.390
And at the end,
we will have fully translated

00:25:09.910 --> 00:25:11.880
to our destination.

00:25:12.970 --> 00:25:15.070
And there you have it.

00:25:15.140 --> 00:25:20.500
To show you how to use keyframe
animations and CSS transforms to cause

00:25:20.500 --> 00:25:26.140
our sheep to actually jump that fence,
I'd like to invite up Adele Peterson.

00:25:29.850 --> 00:25:31.360
Thanks, Ted.

00:25:31.400 --> 00:25:32.860
Hi, I'm Adele Peterson.

00:25:33.090 --> 00:25:36.500
We're going to start with an animation
very similar to the one that Ted just

00:25:36.520 --> 00:25:41.000
showed you guys in the slides,
and then I'll show you how to make

00:25:41.000 --> 00:25:46.510
it fancier and then eventually
get the sheep to jump the fence.

00:25:47.990 --> 00:25:51.620
So you guys see the
beginning wiggle there?

00:25:51.650 --> 00:25:52.400
There he goes.

00:25:52.400 --> 00:25:53.680
And then he kind of scoots.

00:25:53.680 --> 00:25:54.070
OK.

00:25:54.510 --> 00:25:59.990
So let's go back to our machine.

00:26:01.420 --> 00:26:04.160
We're going to drop in
a few more keyframes.

00:26:04.160 --> 00:26:05.740
Okay, so now I added a few more.

00:26:05.740 --> 00:26:09.670
Again, we're continuing to
translate along the x-axis,

00:26:09.670 --> 00:26:12.800
and we're doing that
wiggle back and forth.

00:26:12.850 --> 00:26:13.840
Look at him go.

00:26:13.840 --> 00:26:15.430
All right, all right.

00:26:15.540 --> 00:26:15.910
Okay.

00:26:15.980 --> 00:26:20.210
And finally,
we're going to jump the fence.

00:26:23.300 --> 00:26:28.510
Okay, so here we now have an extra
parameter in our translate function.

00:26:28.610 --> 00:26:34.540
So by 80%, we're going to translate
in the Y direction 200 pixels up.

00:26:34.570 --> 00:26:39.940
And we've straightened our rotation
back out to zero so that the sheep is

00:26:39.940 --> 00:26:42.880
on firm footing as he makes his jump.

00:26:42.880 --> 00:26:42.880
Okay.

00:26:44.320 --> 00:26:45.570
Come on, Brucie, you can do it.

00:26:45.600 --> 00:26:48.910
And there he goes.

00:26:49.080 --> 00:26:50.950
All right.

00:26:51.030 --> 00:26:52.940
Back to you, Ted.

00:26:55.790 --> 00:27:01.120
So we've seen how to animate
elements on the page.

00:27:01.120 --> 00:27:04.910
One of the other things we can do
in digital books is make use of

00:27:04.910 --> 00:27:07.520
multimedia like audio and video.

00:27:07.570 --> 00:27:10.860
I don't have much to tell you about
this because there isn't much to say.

00:27:10.980 --> 00:27:12.280
It's very easy.

00:27:12.350 --> 00:27:15.960
Just like we use the image
element to include an image,

00:27:15.960 --> 00:27:20.980
we can use the audio or video
element to include audio or video.

00:27:20.990 --> 00:27:24.140
They both take a source attribute
just like the image element.

00:27:24.140 --> 00:27:28.490
The video element also takes a
poster attribute which specifies an

00:27:28.490 --> 00:27:34.860
image to be used as a placeholder
like so until the user has hit play.

00:27:34.860 --> 00:27:39.750
You specify the controls attribute
so that the user has controls to

00:27:39.750 --> 00:27:43.520
play and pause and scrub your media.

00:27:43.520 --> 00:27:45.870
And just like that, you've got...

00:27:46.410 --> 00:27:49.000
Great sound and video in your book.

00:27:49.170 --> 00:27:53.700
Sometimes you'd like your book
to do something that you can't

00:27:53.700 --> 00:27:55.960
express in an animation alone.

00:27:56.040 --> 00:27:59.540
You'd like to change the
content on the page dynamically.

00:27:59.540 --> 00:28:03.820
One way we could do this,
or one reason we might want to do this,

00:28:03.940 --> 00:28:09.310
is to count the number of times Bruce the
Sheep has jumped the fence already.

00:28:09.310 --> 00:28:14.000
This thing can get outrageously
large and somewhat depressing.

00:28:14.000 --> 00:28:14.840
Why isn't Iris asleep yet?

00:28:15.510 --> 00:28:21.490
Well, how would we achieve
this with web technology?

00:28:21.560 --> 00:28:27.810
JavaScript is the programming
language of the web,

00:28:27.810 --> 00:28:27.810
and we can use it in our books as well.

00:28:28.710 --> 00:28:35.890
Everything in your HTML is
exposed to JavaScript in what's

00:28:35.890 --> 00:28:35.890
called the Document Object Model,
or DOM.

00:28:36.100 --> 00:28:40.420
So all of your elements have some kind
of corresponding JavaScript object

00:28:40.630 --> 00:28:43.690
that you can manipulate from a program.

00:28:43.770 --> 00:28:47.770
You can add or remove elements,
modify their contents.

00:28:48.000 --> 00:28:52.370
So if we want to count each
time the sheep jumps the fence,

00:28:52.370 --> 00:28:58.190
we're going to need to get some kind
of message about when this happens.

00:28:58.490 --> 00:29:03.520
And in the DOM,
we have what are called DOM events.

00:29:03.520 --> 00:29:08.360
And these are just messages that
happen as something changes.

00:29:08.540 --> 00:29:12.790
Keyframe animations cause several
different kinds of events to happen.

00:29:13.510 --> 00:29:18.830
The animation start event happens when
the animation initially kicks off.

00:29:19.140 --> 00:29:22.580
The animation iteration event
happens at the end of every

00:29:22.580 --> 00:29:24.840
iteration of that animation.

00:29:24.840 --> 00:29:28.110
And finally,
the animation end event happens

00:29:28.110 --> 00:29:30.190
when the animation stops.

00:29:31.110 --> 00:29:35.140
Sadly for Bruce,
this animation is never going to stop.

00:29:35.400 --> 00:29:37.710
So what we want to do is we

00:29:38.200 --> 00:29:43.730
is used the DOM first to get a reference
to the image that represents our sheep.

00:29:44.220 --> 00:29:50.490
The getElementById method does
this very straightforwardly.

00:29:50.490 --> 00:29:50.490
You just pass it the ID of that element.

00:29:51.310 --> 00:29:55.400
Next, we'll try to listen for the
animation iteration event.

00:29:55.410 --> 00:29:59.740
And each time we get it,
we'll update that count by

00:29:59.740 --> 00:30:02.640
using some DOM manipulation.

00:30:02.770 --> 00:30:06.640
So the next iteration, our count goes up.

00:30:06.960 --> 00:30:12.480
It was kind of ugly that it said zero.

00:30:12.480 --> 00:30:12.480
The Romans didn't even
have a concept of zero.

00:30:12.930 --> 00:30:16.150
So maybe that's a bit too
much for a children's book.

00:30:16.290 --> 00:30:20.930
So we could hide the zero and
wait until the first iteration

00:30:20.930 --> 00:30:24.080
happens to then display our count.

00:30:24.200 --> 00:30:28.410
To hide and show elements in CSS,
you use the display property.

00:30:28.760 --> 00:30:33.930
So in this case,
I've put a class on my count.

00:30:34.270 --> 00:30:37.600
I've used that class
to hide the elements.

00:30:37.680 --> 00:30:40.310
And then from the DOM,

00:30:40.620 --> 00:30:45.940
I can remove that class to
cause the count to appear.

00:30:45.940 --> 00:30:51.340
HTML5 provides a very convenient
classless API for the manipulation

00:30:51.340 --> 00:30:53.330
of classes on elements.

00:30:53.390 --> 00:30:55.860
You can add or remove classes.

00:30:55.990 --> 00:31:01.430
You can check to see if a class is
there or toggle the presence of one.

00:31:01.430 --> 00:31:06.090
By using classes like this,
we can describe different states

00:31:06.090 --> 00:31:10.170
of our animation and the dynamic
behavior of our book with meaningful

00:31:10.180 --> 00:31:16.090
names which makes it much easier to
work with for you as the book author.

00:31:18.010 --> 00:31:25.250
So in this case,
we can simply call classless.remove

00:31:25.250 --> 00:31:25.250
and give it our class to cause--

00:31:25.950 --> 00:31:27.840
Our count to be shown.

00:31:27.960 --> 00:31:31.450
So I'm going to invite Adele back up,
and she's going to have a little bit of

00:31:31.450 --> 00:31:33.750
fun with making our sheep do a bit more.

00:31:33.940 --> 00:31:36.900
Here's Adele.

00:31:37.370 --> 00:31:39.030
Thanks, Ted.

00:31:39.050 --> 00:31:42.700
So I'm going to quickly walk
you through adding the counter

00:31:42.700 --> 00:31:47.460
that Ted just showed you,
and then we're going to add a

00:31:47.460 --> 00:31:51.310
super realistic sound effect.

00:31:51.310 --> 00:31:51.310
OK.

00:31:51.310 --> 00:31:51.310
So--

00:31:51.330 --> 00:31:54.900
Let's take a look at our JavaScript here.

00:31:54.900 --> 00:32:00.010
So here we've added an event
listener to our window to listen

00:32:00.010 --> 00:32:02.400
for the DOM content-loaded event.

00:32:02.430 --> 00:32:06.800
So when the web page, or in this case,
the page of the book, first loads,

00:32:06.800 --> 00:32:09.500
we'll end up calling this init function.

00:32:09.500 --> 00:32:10.860
We'll do our initialization.

00:32:11.080 --> 00:32:16.380
So here is where we
have our sheep element.

00:32:16.900 --> 00:32:24.960
So actually, before I go farther,
Let's add in our HTML for the counter.

00:32:27.050 --> 00:32:28.000
Okay, so pretty simple.

00:32:28.000 --> 00:32:33.060
We have our paragraph and our counter,
and here's that class that Ted mentioned,

00:32:33.060 --> 00:32:37.620
and that's how we're going to
control the appearance of this class.

00:32:39.730 --> 00:32:41.870
Okay, so back to the JavaScript.

00:32:42.050 --> 00:32:45.240
All right,
so we have this initialization function,

00:32:45.320 --> 00:32:49.080
and the first thing that we're going
to do is to add that event listener for

00:32:49.120 --> 00:32:51.960
the WebKit animation iteration event.

00:32:51.960 --> 00:32:55.740
So this fires at the end of
each iteration of our animation.

00:32:55.890 --> 00:32:57.180
When that happens,
we're going to call this

00:32:57.200 --> 00:32:59.000
updateCount function.

00:32:59.200 --> 00:33:01.740
So updateCount...

00:33:01.930 --> 00:33:03.460
is fairly simple as well.

00:33:03.460 --> 00:33:08.370
We increment our jumped sheep,
we grab our counter element,

00:33:08.370 --> 00:33:11.710
and we set the text content
property of the counter to

00:33:11.710 --> 00:33:13.670
the number of jumped sheep.

00:33:14.900 --> 00:33:24.010
Okay, now we're going to go
and hide the counter.

00:33:24.010 --> 00:33:24.010
Let's see, where's my... Okay, so...

00:33:25.000 --> 00:33:31.330
We're just going to drop in some
really basic CSS to set that zero

00:33:31.330 --> 00:33:37.880
class to display none to hide it.

00:33:37.880 --> 00:33:41.760
And then in our JavaScript,
in update count,

00:33:41.760 --> 00:33:41.760
when we have reached the first iteration,

00:33:42.840 --> 00:33:46.700
We're going to use the class
list API to remove that class.

00:33:46.760 --> 00:33:51.400
Okay, so let's switch over
and see how that looks.

00:33:54.500 --> 00:33:56.500
We're continuing to count,
so that's good.

00:33:56.500 --> 00:34:01.380
Okay, so now let's add our super
realistic sound effect.

00:34:01.740 --> 00:34:05.030
So this may defeat the purpose of
trying to get your kid to go to sleep,

00:34:05.030 --> 00:34:06.540
but it's kind of cool anyway.

00:34:06.760 --> 00:34:10.000
So you may have to learn how to
build a mute button into this later.

00:34:10.330 --> 00:34:17.850
Okay, so again,
let's go back to our XHTML,

00:34:17.850 --> 00:34:17.850
and we'll add our audio element.

00:34:19.420 --> 00:34:24.290
Now, this is a little different from
the example that Ted showed you

00:34:24.330 --> 00:34:31.290
on his slides because it doesn't
have a controls attribute.

00:34:31.290 --> 00:34:34.270
And the reason for that is we don't
want the user to control this media.

00:34:34.270 --> 00:34:34.270
We want to control
ourselves in JavaScript.

00:34:34.270 --> 00:34:34.270
So I'm going to show you how to do that.

00:34:35.130 --> 00:34:41.810
So we are going to add a little more
code to our initialization function.

00:34:42.130 --> 00:34:51.270
We're getting the audio element by ID,
using getElementByID,

00:34:51.270 --> 00:34:54.670
and we're calling load
on that audio element.

00:34:54.670 --> 00:34:54.670
This is just so the audio file
actually gets loaded and is ready

00:34:54.670 --> 00:34:54.670
to play when it's time to play.

00:34:55.460 --> 00:35:02.370
We're going to add our function
to actually play the audio.

00:35:03.880 --> 00:35:06.810
And here,
when we actually play the sound effect,

00:35:06.810 --> 00:35:10.320
we're going to play it on a slight delay.

00:35:10.760 --> 00:35:14.350
So this is so if it starts playing
at the beginning of an iteration,

00:35:14.390 --> 00:35:17.140
we can actually play
it a little bit later,

00:35:17.310 --> 00:35:21.000
maybe around the time that the
sheep is jumping the fence.

00:35:26.080 --> 00:35:31.410
And then every time we iterate,
I'm sorry, let's see.

00:35:31.850 --> 00:35:36.430
Every time we iterate,
we'll call play sound effect.

00:35:42.500 --> 00:35:45.860
Okay, so there's actually a
problem with this code.

00:35:45.870 --> 00:35:48.400
Every time you iterate,
you're going to play the sound effect,

00:35:48.400 --> 00:35:49.560
which happens on a delay.

00:35:49.570 --> 00:35:52.690
This actually means that the first
time the sheep jumps the fence,

00:35:52.690 --> 00:35:54.940
you're going to miss
getting the sound effect.

00:35:55.140 --> 00:36:00.020
That's because this event,
this animation iteration event,

00:36:00.230 --> 00:36:02.940
happens at the end of each iteration.

00:36:03.090 --> 00:36:08.820
So we're going to also add an event
listener for WebKit animation start and

00:36:08.820 --> 00:36:09.500
also start playing the sound effect then.

00:36:13.220 --> 00:36:17.190
Okay, so I think we are set
up to make this work.

00:36:17.560 --> 00:36:20.200
Let's switch over.

00:36:20.200 --> 00:36:23.200
Bah-ha-ha-ha.

00:36:23.200 --> 00:36:28.620
Bah-ha-ha-ha.

00:36:28.950 --> 00:36:31.310
All right, back to you, Ted.

00:36:36.090 --> 00:36:40.340
Well, what have we learned today?

00:36:40.500 --> 00:36:44.700
First off, it's exceptionally easy

00:36:45.070 --> 00:36:48.870
to make a great-looking,
flowable book using just

00:36:48.870 --> 00:36:53.950
a couple of CSS properties
and some very basic markup.

00:36:55.920 --> 00:37:00.810
Secondly,
you have very fine-grained control

00:37:01.810 --> 00:37:07.430
over layout and the appearance of
things in a fixed-layout book using,

00:37:07.430 --> 00:37:10.710
again, just a little bit of CSS,

00:37:11.970 --> 00:37:17.530
And it's also very easy to add
some fairly complex enhancements,

00:37:17.540 --> 00:37:19.720
such as animation and multimedia.

00:37:20.240 --> 00:37:23.800
Remember,

00:37:26.200 --> 00:37:29.880
This is all just web technology.

00:37:29.880 --> 00:37:35.010
And there's an amazing
amount of material out there.

00:37:35.090 --> 00:37:39.630
It's all very applicable
to making great books.

00:37:43.740 --> 00:37:48.080
There have been many related
sessions here at WWDC this year,

00:37:48.270 --> 00:37:50.780
several of which have already occurred.

00:37:50.900 --> 00:37:54.730
If you missed them,
the videos will be posted very soon.

00:37:56.680 --> 00:38:02.440
Tomorrow morning, there's a session on
accessibility in books,

00:38:02.440 --> 00:38:03.360
which is going to be awesome.

00:38:03.360 --> 00:38:04.470
I'm really looking forward to it.

00:38:05.900 --> 00:38:08.960
And then on Friday,
there's actually a repeat

00:38:09.090 --> 00:38:13.340
of the Building Books with
iBooks Author session.

00:38:13.340 --> 00:38:15.790
It should be a great
session if you miss it.

00:38:16.000 --> 00:38:17.240
I think it was Monday.

00:38:17.410 --> 00:38:19.620
No, sorry, Tuesday.

00:38:20.060 --> 00:38:23.450
And of course, for more information,
you can contact Vicki Murley,

00:38:23.530 --> 00:38:26.740
our Safari Technologies Evangelist.

00:38:26.970 --> 00:38:31.710
You can participate in our developer
forums at devforums@apple.com.

00:38:31.710 --> 00:38:32.340
Thank you so much.