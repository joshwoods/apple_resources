WEBVTT

00:00:11.610 --> 00:00:14.640
All right, so hello, my name is Brady.

00:00:14.840 --> 00:00:17.940
I'm an engineer on the Maps client team,
and I'd like to welcome you to

00:00:17.940 --> 00:00:21.930
this year's Map Kit talk called
Getting Around with Map Kit.

00:00:22.200 --> 00:00:26.320
And in this talk we'll be going over
what's new in Map Kit and iOS 6.

00:00:26.320 --> 00:00:29.070
So let's take a look at the agenda.

00:00:30.290 --> 00:00:34.580
So we're going to begin with something
I'm sure you're very interested in,

00:00:34.580 --> 00:00:36.530
the new look of Map Kit.

00:00:36.640 --> 00:00:42.210
We've got all new Apple Maps cartography
in iOS 6 and this 2D cartography

00:00:42.270 --> 00:00:43.140
is coming to Map Kit.

00:00:43.270 --> 00:00:48.810
I'm going to be going over what this
means to you as a Map Kit developer.

00:00:49.820 --> 00:00:53.080
Then we're going to be introducing
a new API called MKMapItem,

00:00:53.140 --> 00:00:55.590
which makes it really easy
to launch maps with a minimal

00:00:55.590 --> 00:00:57.820
amount of code from your app.

00:00:58.960 --> 00:01:01.090
And then we're going to end
by talking about something

00:01:01.130 --> 00:01:04.810
Scott hinted at yesterday,
which is a new API specifically

00:01:04.900 --> 00:01:08.260
for routing apps to
integrate directly with Maps.

00:01:08.390 --> 00:01:09.220
More about that later.

00:01:09.330 --> 00:01:12.110
Let's begin with a new look of Map Kit.

00:01:13.770 --> 00:01:16.820
So we've got all new
Apple Maps cartography

00:01:16.900 --> 00:01:19.200
and Apple Maps and iOS 6.

00:01:19.320 --> 00:01:20.900
Here it is on the iPhone.

00:01:21.070 --> 00:01:25.050
And of course, it's on the iPad as well.

00:01:25.230 --> 00:01:29.220
And this 2D cartography
is coming to Map Kit.

00:01:29.580 --> 00:01:32.870
But I'm sure one question
you have as a developer is,

00:01:33.210 --> 00:01:36.550
the maps look great,
but what do I need to do to get

00:01:36.550 --> 00:01:38.420
Apple Maps working in my app?

00:01:38.420 --> 00:01:40.420
And I think you're going
to like the answer.

00:01:40.510 --> 00:01:44.490
Some of you might have noticed
already if you updated to the beta.

00:01:44.730 --> 00:01:46.860
And the answer is absolutely nothing.

00:01:46.890 --> 00:01:49.910
It's just going to work
straight out of the box.

00:01:49.920 --> 00:01:52.800
And the reason this is possible
is because we brought the new

00:01:52.800 --> 00:01:55.590
Apple Maps cartography to the same API.

00:01:55.660 --> 00:01:59.280
So whatever Map Kit code you've
already written or you're just starting

00:01:59.310 --> 00:02:01.110
to learn is still going to work.

00:02:02.070 --> 00:02:05.940
So as an example of how
this is still working,

00:02:05.940 --> 00:02:10.160
I want to show you Find My Friends,
which uses an MKMapView and Map Kit.

00:02:10.160 --> 00:02:13.280
But this is the same
binary that ran on iOS 5,

00:02:13.280 --> 00:02:15.000
now running on iOS 6.

00:02:15.050 --> 00:02:20.240
So here it is, no code changes,
same binary, it just works.

00:02:20.340 --> 00:02:23.310
And it gets the new
Apple Maps cartography.

00:02:23.690 --> 00:02:26.720
Now this is an example
of standard map mode,

00:02:26.720 --> 00:02:30.700
but of course you have an
updated satellite mode as well.

00:02:31.980 --> 00:02:34.970
and a hybrid mode,
which is a combination of the new

00:02:34.980 --> 00:02:40.340
Apple Maps satellite imagery with the
standard roads and labels layered on top.

00:02:40.350 --> 00:02:43.240
So beginning the three new map
modes with no code changes.

00:02:43.300 --> 00:02:45.540
If you're using annotations
in your app before,

00:02:45.590 --> 00:02:47.570
they're still going to work.

00:02:47.680 --> 00:02:51.660
So here we have a sample app that
would have worked just fine on iOS 5,

00:02:51.790 --> 00:02:53.740
but here it is running on iOS 6.

00:02:54.050 --> 00:02:56.560
And the annotations
behave exactly the same.

00:02:56.880 --> 00:03:00.080
They're still MK annotations,
but now they're being placed on top

00:03:00.080 --> 00:03:02.320
of the new Apple Maps cartography.

00:03:02.620 --> 00:03:06.620
If you're using overlays in your app,
those are also still going to work.

00:03:06.650 --> 00:03:10.540
So here we have another sample app
where we have an MK Polyline overlay

00:03:10.540 --> 00:03:13.120
view for each county in California.

00:03:13.180 --> 00:03:15.460
And this app would have
worked just fine on iOS 5,

00:03:15.520 --> 00:03:19.960
but here it is running on iOS 6,
except with a new satellite mode.

00:03:20.570 --> 00:03:22.640
So you're going to get
the multiple map modes,

00:03:22.640 --> 00:03:26.200
and annotations and overlays are still
going to work just like they did before.

00:03:26.320 --> 00:03:29.260
But we've improved the way
we render the map in iOS 6.

00:03:29.340 --> 00:03:33.180
And you're going to be seeing the
benefits of this in your Map Kit apps.

00:03:33.370 --> 00:03:36.620
So I want to show you one
example with pinch to zoom.

00:03:37.000 --> 00:03:41.600
So in iOS 5,
the map was rendered using static images.

00:03:41.770 --> 00:03:45.600
And when you pinch to zoom,
you have to stretch that static image.

00:03:45.690 --> 00:03:47.900
And when you pinch to
zoom in your MKMapView,

00:03:47.960 --> 00:03:49.920
you would notice something like this.

00:03:50.090 --> 00:03:53.200
The roads and labels start to get blurry.

00:03:53.230 --> 00:03:56.750
And it wasn't until we hit that next
zoom level that the new tiles would

00:03:56.750 --> 00:03:58.990
come in and the map look good again.

00:03:59.110 --> 00:04:01.400
But in iOS 6, the map is dynamic.

00:04:01.400 --> 00:04:03.060
It renders on the fly.

00:04:03.160 --> 00:04:06.700
So if your app is using MKMapView and
your user pinches to zoom,

00:04:06.760 --> 00:04:09.830
you'll notice that it's a nice,
crisp zooming experience

00:04:10.220 --> 00:04:11.110
with readable labels.

00:04:11.300 --> 00:04:13.400
And there isn't any zoom levels anymore.

00:04:13.400 --> 00:04:16.180
It's just a consistent
map as you pinch to zoom.

00:04:16.270 --> 00:04:18.920
So you'll be getting a much better
zooming experience because we

00:04:18.920 --> 00:04:21.020
can render at any zoom level.

00:04:21.980 --> 00:04:25.230
So because we can render
at any zoom level,

00:04:25.230 --> 00:04:29.740
you're also going to get more control of
your map region than you did in iOS 5.

00:04:29.740 --> 00:04:33.800
Let's look at an example of what
you might have noticed in iOS 5.

00:04:34.270 --> 00:04:37.920
So say you call set
region with this blue box.

00:04:38.220 --> 00:04:40.940
You would have expected that your
MKMapView would give you a region

00:04:41.250 --> 00:04:43.340
just surrounding that blue box.

00:04:43.460 --> 00:04:46.000
But this wasn't always
the case in your app.

00:04:46.060 --> 00:04:48.760
You would sometimes get this,
which is a little more zoomed

00:04:48.760 --> 00:04:50.200
out than what you wanted.

00:04:50.340 --> 00:04:52.330
So what was happening here?

00:04:53.040 --> 00:04:57.760
Well, as I said earlier,
in iOS 5 we rendered using static images.

00:04:57.790 --> 00:05:01.320
And we can only make those images
look crisp at certain zoom levels.

00:05:01.400 --> 00:05:06.650
So if you change the region by calling
setRegion or setVisibleMapRect,

00:05:06.760 --> 00:05:09.870
what would happen is we would zoom
you out to the previous zoom level

00:05:09.960 --> 00:05:15.430
to ensure that the map looked great,
but also show that full region.

00:05:15.600 --> 00:05:20.240
So this is no longer necessary in iOS 6,
because we can render a

00:05:20.240 --> 00:05:22.180
nice map at any zoom level.

00:05:22.190 --> 00:05:25.670
So if you relink your app with iOS 6,
you'll get full control

00:05:25.720 --> 00:05:28.770
over your map region,
which you didn't have before.

00:05:31.180 --> 00:05:34.010
Another benefit you'll see as a
result of how we've changed the

00:05:34.020 --> 00:05:35.860
rendering in iOS 6 is heading mode.

00:05:35.990 --> 00:05:38.260
We think it's going to
be much more useful.

00:05:38.940 --> 00:05:42.170
So this is just a demonstration of what
you would have noticed if you turned on

00:05:42.170 --> 00:05:45.300
heading mode in your MKMapView in iOS 5.

00:05:45.420 --> 00:05:48.700
As you turned it on and
your user faced south,

00:05:48.790 --> 00:05:50.560
the labels would turn upside down.

00:05:50.690 --> 00:05:54.910
And this is because with a static map,
if it rotates upside down,

00:05:54.920 --> 00:05:58.700
the labels are part of that map
and the map rotates with it.

00:05:59.000 --> 00:06:19.200
[Transcript missing]

00:06:20.890 --> 00:06:22.900
So that's the new look of Map Kit.

00:06:22.920 --> 00:06:26.860
And again, you could be getting the new
display with the same APIs.

00:06:26.860 --> 00:06:29.430
It's still going to work out of the box.

00:06:30.650 --> 00:06:33.620
You're also going to be seeing the
benefits of improved map rendering,

00:06:33.650 --> 00:06:37.640
including an improved pinch to zoom
experience in your MK Map View,

00:06:37.670 --> 00:06:40.940
better heading mode,
and if you relink your app with iOS 6,

00:06:41.010 --> 00:06:43.710
you'll get full control
over the map region.

00:06:43.800 --> 00:06:45.610
Test your apps.

00:06:45.690 --> 00:06:48.910
Although the API hasn't changed,
the implementation has changed a lot.

00:06:49.140 --> 00:06:51.240
So make sure you go
through and test your apps.

00:06:51.250 --> 00:06:53.570
And if things aren't working
the way you expect them to,

00:06:53.580 --> 00:06:54.760
please file a bug.

00:06:54.870 --> 00:06:56.660
So that's a new look of Map Kit.

00:06:56.920 --> 00:06:59.400
But for the most part,
we don't have any new APIs here.

00:06:59.690 --> 00:07:01.930
We do have some new
APIs to introduce today.

00:07:02.200 --> 00:07:06.370
So let's introduce a new API, MKMapItem.

00:07:07.190 --> 00:07:10.560
So MKMapItem makes it really
easy to launch maps with

00:07:10.560 --> 00:07:12.240
a minimal amount of code.

00:07:12.290 --> 00:07:17.040
Some of you might be doing this already
in your Map Kit apps using URLs.

00:07:17.080 --> 00:07:21.390
But we introduced MKMapItem

00:07:21.690 --> 00:07:23.420
to make it really,
really easy to do this.

00:07:23.570 --> 00:07:25.980
So why would you want to launch Maps?

00:07:26.160 --> 00:07:32.080
Well, one reason is we've got brand new
turn by turn navigation in Apple Maps.

00:07:32.200 --> 00:07:36.360
So if you have a store locator
app or a restaurant guide,

00:07:36.420 --> 00:07:39.790
and the focus of your app is more
finding places than getting directions,

00:07:39.790 --> 00:07:42.250
you can launch into Maps and
let the user take advantage of

00:07:42.280 --> 00:07:44.180
the turn by turn navigation.

00:07:44.240 --> 00:07:47.820
And there's some other reasons why
you might want to give the users

00:07:47.820 --> 00:07:51.480
the ability to jump into Maps,
like to just drop a pin,

00:07:51.550 --> 00:07:55.570
or be able to save the data
to their contacts or bookmarks

00:07:55.580 --> 00:07:56.830
in a familiar interface.

00:07:57.100 --> 00:08:00.440
Or even let the user
explore the landmark in 3D.

00:08:02.060 --> 00:08:06.540
So to help you open maps from your app,
we're introducing MKMapItem.

00:08:06.810 --> 00:08:10.120
And before MKMapItem,
if you wanted to open maps,

00:08:10.120 --> 00:08:12.690
you had to do it by
generating a maps URL.

00:08:12.710 --> 00:08:17.160
And this was kind of cumbersome and
limited in terms of what it could do.

00:08:17.160 --> 00:08:20.640
And it also seemed kind of silly to
generate a URL just to open an app.

00:08:20.900 --> 00:08:23.720
You're not opening a website,
you're opening an app.

00:08:23.760 --> 00:08:27.620
So with MKMapItem, it's a fully objective
C API where you can open maps

00:08:27.740 --> 00:08:30.140
with a minimal amount of code.

00:08:30.140 --> 00:08:34.060
You can even open maps with
multiple pins if you want to.

00:08:34.070 --> 00:08:36.170
And we'll demonstrate this later.

00:08:37.910 --> 00:08:40.420
also gives you the ability to
jump directly into directions,

00:08:40.420 --> 00:08:45.800
driving or walking,
and even getting turn by turn navigation.

00:08:46.050 --> 00:08:50.910
And lastly, you can specify options to
customize the map display.

00:08:52.590 --> 00:08:55.410
So let's look at an example of
an app that could use MKMapItem.

00:08:55.690 --> 00:08:58.540
So here we just have a sample
app that's an Apple store locator

00:08:58.540 --> 00:09:00.320
and it shows nearby stores.

00:09:00.350 --> 00:09:04.450
And it's got a table view and
a cell for each nearby store.

00:09:04.560 --> 00:09:09.140
We can use the UI table view
methods to hook up tapping that

00:09:09.150 --> 00:09:11.550
cell to open maps with MKMapItem.

00:09:11.710 --> 00:09:16.080
And here we just open maps and drop
the pin for where the Apple store is,

00:09:16.200 --> 00:09:18.280
the San Francisco store.

00:09:18.990 --> 00:09:21.000
And we did this with a
really small amount of code.

00:09:21.120 --> 00:09:22.950
Let's look at how it works.

00:09:23.100 --> 00:09:25.460
First, you instantiate an mkplace mark.

00:09:25.510 --> 00:09:30.070
And this is an existing API class
that just lets you define a

00:09:30.120 --> 00:09:34.800
location and if you want to
provide one an address dictionary.

00:09:34.970 --> 00:09:38.090
So the mkplace mark is
the pin you want to open.

00:09:38.720 --> 00:09:40.790
Then you create this MKMap item.

00:09:40.790 --> 00:09:44.990
And the MKMap item has convenience
methods for opening in the maps.

00:09:45.600 --> 00:09:48.060
specifically open a map
with launch options.

00:09:48.060 --> 00:09:51.980
If you call that on the MKMap item,
it will take that map item,

00:09:51.980 --> 00:09:54.520
send it to Maps, and drop a pin.

00:09:55.500 --> 00:09:57.000
And here's the code.

00:09:57.020 --> 00:10:00.320
First you instantiate the
MKMap item with a place mark

00:10:00.320 --> 00:10:02.500
you want to get directions to.

00:10:03.600 --> 00:10:05.660
And then you call open a
Maps with launch options.

00:10:05.660 --> 00:10:08.000
So two lines of code,
and you've opened Maps.

00:10:08.000 --> 00:10:09.570
That's it.

00:10:11.290 --> 00:10:13.830
We want to add some more details here.

00:10:14.080 --> 00:10:16.170
Like if you notice,
we've kind of lost some information

00:10:16.220 --> 00:10:18.610
about what we were showing.

00:10:18.780 --> 00:10:20.210
We're showing the
address and the call out,

00:10:20.210 --> 00:10:21.780
but really this is more than an address.

00:10:21.870 --> 00:10:23.630
This is the Apple Store.

00:10:23.780 --> 00:10:26.300
And if you look at the info card,
you don't see many

00:10:26.300 --> 00:10:27.260
details about it either.

00:10:27.260 --> 00:10:30.340
It's just the address and not much more.

00:10:30.420 --> 00:10:33.000
What we'd really like it to look
like is something like this.

00:10:33.090 --> 00:10:37.920
The Apple Store SF and a more
interesting info card with a name,

00:10:38.330 --> 00:10:41.070
phone number,
and URL of the place you're going.

00:10:41.210 --> 00:10:44.490
So by adding these additional details,
when we launch Maps,

00:10:44.490 --> 00:10:49.200
it seems like a more seamless experience
when jumping from your app to Maps.

00:10:50.190 --> 00:10:52.370
MKMapItem makes it
really easy to do this.

00:10:52.600 --> 00:10:54.900
So just like before,
you start with a place mark

00:10:54.900 --> 00:10:57.130
you want to get directions to.

00:10:57.880 --> 00:11:01.320
And then you instantiate an
MKMap item and provide the name,

00:11:01.440 --> 00:11:04.190
phone number, and URL if you would like.

00:11:05.120 --> 00:11:07.240
and then call Open in Maps.

00:11:07.240 --> 00:11:09.840
And when you do that,
it'll send the placemark and the

00:11:09.840 --> 00:11:15.100
additional metadata and Maps will use
this data to add details to the pin.

00:11:16.060 --> 00:11:17.880
and we don't have much
more code here either.

00:11:17.900 --> 00:11:20.640
We instantiate the MKMap
item like we did before.

00:11:20.660 --> 00:11:23.000
And then below we call open a Maps.

00:11:23.050 --> 00:11:27.240
But in between we have this extra
three lines of code to give it a name,

00:11:27.240 --> 00:11:29.300
a phone number, and a URL.

00:11:29.300 --> 00:11:32.310
And Maps will use this
data when we're launched.

00:11:35.100 --> 00:11:40.040
So I mentioned that you can also open
multiple pins and maps with mkmapitem.

00:11:40.140 --> 00:11:43.820
So here we've modified our app
to have it open all on Maps.

00:11:43.890 --> 00:11:47.180
And you might want to use this
if you have multiple places that

00:11:47.180 --> 00:11:50.330
the user might want to go to,
but you want to let the user

00:11:50.340 --> 00:11:52.520
choose which one is closest.

00:11:52.620 --> 00:11:55.950
So here we've hooked up the
Open All on Maps button to drop

00:11:56.020 --> 00:11:58.120
a pin for each one of the stores.

00:11:58.180 --> 00:12:02.230
And Maps will wrap those pins
in a reasonable bounding box

00:12:02.330 --> 00:12:04.500
and show it all on the map.

00:12:04.600 --> 00:12:05.720
So we've got multiple pins.

00:12:05.900 --> 00:12:07.570
How do we do it?

00:12:07.980 --> 00:12:11.020
Well this time we're going to
start with multiple MKMap items.

00:12:11.050 --> 00:12:14.240
One for each pin we want to drop in Maps.

00:12:14.800 --> 00:12:18.200
Then we group them
together in an NSArray.

00:12:19.900 --> 00:12:22.480
Once we have that array,
we'll use a class method on an

00:12:22.480 --> 00:12:27.570
MKMapItem called OpenMapsWithItems,
pass the array of items we want to drop.

00:12:27.690 --> 00:12:31.530
And when we call this, it will open maps,
drop a pin for each

00:12:31.530 --> 00:12:33.980
one of those map items,
and give you a nice

00:12:33.980 --> 00:12:35.590
bounding box around it.

00:12:37.410 --> 00:12:38.660
Here's the code.

00:12:39.000 --> 00:12:44.430
First you instantiate an NSArray using
the three items you want to open,

00:12:44.430 --> 00:12:46.190
or as many items as you want.

00:12:47.190 --> 00:12:50.860
And then use the class method, MKMapItem,
open maps with items,

00:12:50.860 --> 00:12:53.150
and then pass the array of items.

00:12:53.350 --> 00:12:55.850
And when you do this,
two lines of code and you have

00:12:56.110 --> 00:12:57.340
multiple pins open to maps.

00:12:57.610 --> 00:12:59.130
Really easy.

00:13:01.030 --> 00:13:03.500
So we have this launch
options dictionary,

00:13:03.650 --> 00:13:09.600
both for the instance method,
open in Maps with launch

00:13:09.600 --> 00:13:12.040
options for one item,
and for multiple items,

00:13:12.040 --> 00:13:14.080
open maps with items.

00:13:14.080 --> 00:13:19.080
So you can specify various properties
with the launch options dictionary,

00:13:19.080 --> 00:13:22.760
and that will change what
Maps does when it opens.

00:13:22.760 --> 00:13:26.670
You can give a specific map type if
you want to change it to standard,

00:13:26.670 --> 00:13:28.780
satellite, or hybrid mode.

00:13:28.780 --> 00:13:32.120
You can even give a
custom coordinate region.

00:13:32.120 --> 00:13:34.990
Or enable or disable traffic,
all with a launch options dictionary.

00:13:40.030 --> 00:13:43.400
So say your app wants to drop
a pin at the White House.

00:13:43.450 --> 00:13:46.580
And you think it'd be more interesting
to open maps in satellite mode.

00:13:46.850 --> 00:13:49.080
Well to do this, you create a dictionary.

00:13:49.120 --> 00:13:50.940
That'll be your launch
options dictionary.

00:13:51.080 --> 00:13:54.550
And then for the map type key,
you specify satellite mode.

00:13:54.800 --> 00:13:57.690
So with this simple dictionary,
we've opened Maps and

00:13:57.690 --> 00:13:59.880
enabled satellite mode.

00:14:00.100 --> 00:14:03.000
is a great example of how to
integrate your app with your own map.

00:14:03.140 --> 00:14:06.000
But we can do a little more to
make opening maps more interesting.

00:14:06.070 --> 00:14:08.980
Because we're kind of more
zoomed out here than we'd like.

00:14:09.000 --> 00:14:12.000
Really, we just want to focus on a
specific coordinate region.

00:14:12.130 --> 00:14:15.000
Specifically, this orange box.

00:14:15.000 --> 00:14:17.210
And by doing so,
we'll get a nicer view just of the

00:14:17.210 --> 00:14:17.210
White House and the White House lawn.

00:14:17.520 --> 00:14:21.810
So to do this, when we create our launch
options dictionary,

00:14:21.870 --> 00:14:24.810
we'll specify some additional options.

00:14:24.960 --> 00:14:28.040
We'll give a custom map center
with a center over the lawn.

00:14:28.060 --> 00:14:30.120
And this is an MK coordinate.

00:14:30.430 --> 00:14:32.600
And then we'll give a custom map span.

00:14:32.600 --> 00:14:36.980
In this case,
a span over the White House.

00:14:36.980 --> 00:14:40.670
And when we do this,
we get a nice region when we open maps.

00:14:40.700 --> 00:14:43.750
It's a beautiful view of the
White House and we've centered

00:14:43.760 --> 00:14:45.530
over the lawn instead of the pin.

00:14:45.690 --> 00:14:48.280
All of this with a
custom coordinate region.

00:14:51.040 --> 00:14:54.500
You can even enable traffic or
disable traffic with MKMapItem.

00:14:54.620 --> 00:14:58.120
It's just another key that shows
traffic key and you can set it to

00:14:58.120 --> 00:15:02.290
yes or no and that will override
whatever setting is currently in Maps.

00:15:04.610 --> 00:15:07.980
So we've got brand new turn by turn
navigation in Apple Maps and your

00:15:07.980 --> 00:15:10.000
users might want to get access to it.

00:15:10.090 --> 00:15:12.800
And you can go directly into
directions with MKMap Item for

00:15:12.800 --> 00:15:15.440
driving or walking directions.

00:15:17.090 --> 00:15:18.240
So how do you do it?

00:15:18.260 --> 00:15:22.700
Well, it's just another launch
options dictionary key.

00:15:22.700 --> 00:15:25.120
In this case,
it's the directions mode key.

00:15:25.130 --> 00:15:28.260
And you can set it to driving or walking.

00:15:29.370 --> 00:15:31.650
And then you'll instantiate
the MKMap item that you want,

00:15:31.750 --> 00:15:35.620
in this case, Moscone item,
that you want directions to.

00:15:35.680 --> 00:15:38.960
And when you call Open in
Maps with Launch Options,

00:15:39.330 --> 00:15:42.350
It will understand that you
want directions to that item

00:15:42.590 --> 00:15:43.630
from your current location.

00:15:45.780 --> 00:15:48.330
So when Maps is opened,
you'll go directly into an overview

00:15:48.590 --> 00:15:52.300
of driving directions from your
current location to Moscone.

00:15:52.330 --> 00:15:54.910
And then from there,
the user can hit start to go directly

00:15:54.910 --> 00:15:56.890
into turn by turn navigation.

00:15:58.340 --> 00:15:59.960
Here's the code.

00:16:00.050 --> 00:16:03.820
So like before, we start with the item
that we want directions to.

00:16:03.860 --> 00:16:06.540
We create our launch options dictionary.

00:16:06.590 --> 00:16:08.300
And then on the item
we want directions to,

00:16:08.350 --> 00:16:13.280
we call open a maps with launch
options with directions to that item.

00:16:13.280 --> 00:16:15.470
And because the directions
mode key is set to driving,

00:16:15.480 --> 00:16:18.230
we'll go directly into
driving directions.

00:16:19.860 --> 00:16:22.300
You can even specify a
custom origin if you want.

00:16:22.370 --> 00:16:26.040
So say your app wants to show
directions from the airport to Moscone,

00:16:26.070 --> 00:16:27.700
but the user isn't at the airport yet.

00:16:27.700 --> 00:16:32.550
Well, to get custom directions,
you first create a map item for where you

00:16:32.650 --> 00:16:34.640
want to start and where you want to end.

00:16:34.700 --> 00:16:37.920
In this case,
you want to start at the airport

00:16:37.920 --> 00:16:40.110
and end at the Moscone item.

00:16:41.770 --> 00:16:44.200
Then you group these items
together in an NSArray,

00:16:44.260 --> 00:16:48.130
just like we did before when we
wanted to open multiple pins and maps.

00:16:48.230 --> 00:16:51.280
And we also set the directions
mode key to whether we want

00:16:51.280 --> 00:16:54.110
driving or walking directions.

00:16:55.010 --> 00:16:58.410
Then we use the class method,
open a map with items since

00:16:58.410 --> 00:16:59.890
we have multiple items.

00:16:59.890 --> 00:17:02.680
And when we do that,
Maps will understand that

00:17:02.710 --> 00:17:05.860
we want directions from the
first item to the last item.

00:17:05.890 --> 00:17:09.210
And when Maps launches,
it'll show directions from that

00:17:09.640 --> 00:17:11.340
first item to the last item.

00:17:12.630 --> 00:17:13.690
Here's the code.

00:17:13.810 --> 00:17:16.080
We first create an array with
the first element being the

00:17:16.080 --> 00:17:18.600
airport where we want to start.

00:17:18.720 --> 00:17:22.410
And the destination
MKMapItem Moscone West.

00:17:22.780 --> 00:17:27.420
Then we create our launch options
dictionary with the driving mode key set,

00:17:27.420 --> 00:17:31.650
or the driving key,
driving value set for driving.

00:17:32.600 --> 00:17:35.300
And then we use the
class method MKMapItem,

00:17:35.300 --> 00:17:38.470
open maps with items,
pass the array of items,

00:17:38.470 --> 00:17:42.800
and then pass the launch dictionary
specifying we want driving directions.

00:17:43.020 --> 00:17:47.080
So sometimes you might want to specify
your current location with an MKMap item.

00:17:47.090 --> 00:17:49.910
Whether or not you want to open maps
to show the current location or get

00:17:49.990 --> 00:17:54.790
directions from some point to your
current location instead of from.

00:17:54.860 --> 00:17:57.670
To represent your current location,
you don't have to use

00:17:57.670 --> 00:17:58.490
core location at all.

00:17:58.660 --> 00:18:01.680
You can just use mkMapItem,
mapItem for current location.

00:18:01.980 --> 00:18:05.800
And this will just return a symbolic
map item referencing whatever your

00:18:05.840 --> 00:18:07.790
current location is right now.

00:18:08.170 --> 00:18:10.800
and because it's symbolic,
it won't have a place mark.

00:18:10.810 --> 00:18:14.500
Instead, it will just have a flag
set to is current location,

00:18:14.500 --> 00:18:15.100
yes.

00:18:15.200 --> 00:18:17.890
So this is just a singleton
that represents whatever

00:18:18.090 --> 00:18:19.800
your current location is.

00:18:20.760 --> 00:18:24.000
So say you want to get directions
from Moscone to your current location

00:18:24.290 --> 00:18:26.020
for directions when you come back.

00:18:26.040 --> 00:18:28.720
To launch maps with directions
to your current location,

00:18:28.740 --> 00:18:32.340
you create an array with the first
element being where you want to start.

00:18:32.390 --> 00:18:36.020
And we've swapped out the last
item to be our current location.

00:18:36.020 --> 00:18:37.480
And then everything else is the same.

00:18:37.480 --> 00:18:40.220
We've got the driving
value set for directions.

00:18:40.510 --> 00:18:44.030
And we just use mkmapitem
open maps with items.

00:18:44.430 --> 00:18:45.720
So that's mkmapitem.

00:18:45.910 --> 00:18:49.290
And it makes it really easy
to open maps with a minimal

00:18:49.290 --> 00:18:51.160
amount of code from your app.

00:18:51.570 --> 00:18:57.290
And we think this is great because
if your app is a store locator app

00:18:57.560 --> 00:19:01.200
or a restaurant guide or any other
app that might want to open maps,

00:19:01.200 --> 00:19:05.630
you can offer quick access in your
app to navigation and other familiar

00:19:05.690 --> 00:19:10.180
maps features like bookmarks and
contacts and even exploring in 3D.

00:19:11.780 --> 00:19:13.900
And maybe your app doesn't
even have a map view.

00:19:13.910 --> 00:19:17.080
You can use MKMapItem to keep
your app focused on what it does,

00:19:17.100 --> 00:19:19.140
maybe finding certain data or addresses.

00:19:19.170 --> 00:19:21.080
And then if the user wants
to see it in the map,

00:19:21.100 --> 00:19:24.300
you can use MKMapItem to open maps.

00:19:25.650 --> 00:19:28.560
So MKMapItem is an API that
makes it really easy to go

00:19:28.560 --> 00:19:31.860
from your app into Maps.

00:19:31.970 --> 00:19:35.160
But the next API,
specifically for routing apps,

00:19:35.340 --> 00:19:37.400
goes the other direction.

00:19:37.860 --> 00:19:41.120
So in iOS 6,
we're introducing a new API where if

00:19:41.120 --> 00:19:46.040
you're the developer of a routing app,
you can make your app launchable by Maps.

00:19:46.070 --> 00:19:48.990
And we think this is going to
be a really big opportunity.

00:19:49.180 --> 00:19:52.100
is a great example of how to integrate
your app with your application.

00:19:52.100 --> 00:19:54.100
Now, I'm going to talk about why.

00:19:54.100 --> 00:19:56.100
Because routing apps
are extremely important.

00:19:56.100 --> 00:20:00.100
And they're really important because
there isn't a single solution to routing.

00:20:00.100 --> 00:20:03.090
Instead, there are many solutions.

00:20:03.100 --> 00:20:06.100
And this is because there's all
different kinds of transportation modes,

00:20:06.100 --> 00:20:09.150
and also different user experiences
that people are looking for when

00:20:09.430 --> 00:20:10.280
taking that transportation mode.

00:20:10.900 --> 00:20:13.680
So say you're trying to get to WWDC.

00:20:13.710 --> 00:20:17.680
One person might want to bike there,
but he wants to do more than that.

00:20:17.710 --> 00:20:21.240
He also wants to share the route
with his friends afterwards,

00:20:21.270 --> 00:20:25.830
or see the average speed of his ride.

00:20:26.400 --> 00:20:29.280
is a great app for people who are
looking to build their own maps.

00:20:29.320 --> 00:20:32.300
It's a great app for people who are
looking to build their own maps.

00:20:32.450 --> 00:20:35.300
And another user,
maybe she doesn't want to bike there,

00:20:35.300 --> 00:20:38.300
she wants to take public transit instead,
but she wants to do more than that too.

00:20:38.300 --> 00:20:39.610
She would like to get a push
notification if her bus is running late.

00:20:40.960 --> 00:20:43.390
Maybe the third person is running late.

00:20:43.680 --> 00:20:44.790
He doesn't care about the route.

00:20:44.890 --> 00:20:47.460
He just wants a taxi to pick
him up and take him there.

00:20:47.520 --> 00:20:50.970
These are all examples of routing
apps with customized experiences

00:20:50.970 --> 00:20:53.090
for custom transportation modes.

00:20:53.170 --> 00:20:55.650
And this just shows you why
there isn't a single solution.

00:20:55.820 --> 00:21:01.710
But instead,
there are multiple solutions.

00:21:01.710 --> 00:21:02.970
And that's why we think that routing
apps are really important on iOS.

00:21:03.550 --> 00:21:06.090
We think that they're so
important that in iOS 6,

00:21:06.120 --> 00:21:10.970
we're going to let you integrate directly
with Maps and be launchable by Maps.

00:21:11.890 --> 00:21:15.540
So this is a big opportunity and
I'm going to go over how this works.

00:21:15.720 --> 00:21:20.200
So for many people, many users,
the starting point of figuring

00:21:20.200 --> 00:21:22.290
out where you're going is Maps.

00:21:22.350 --> 00:21:24.700
So say you want to get
directions to Apple headquarters.

00:21:24.820 --> 00:21:28.110
Well, if you want to get directions,
you hit the directions button.

00:21:29.010 --> 00:21:31.770
And that presents the direction sheet.

00:21:31.990 --> 00:21:36.100
If you want to use the Routing Apps mode,
you choose the third option,

00:21:36.100 --> 00:21:39.260
the Routing Apps option,
and then hit Route.

00:21:39.930 --> 00:21:44.200
Here you'll be presented
with a new Routing Apps UI.

00:21:44.250 --> 00:21:46.710
This is a combination
of just Routing Apps,

00:21:46.970 --> 00:21:49.550
some installed,
and some from the App Store.

00:21:49.670 --> 00:21:53.100
And these are just Routing
Apps that have integrated with Maps.

00:21:54.470 --> 00:21:57.220
At the top,
we have recommended routing apps that

00:21:57.220 --> 00:21:59.500
are installed in the user's device.

00:21:59.570 --> 00:22:03.770
But this is only routing apps
that Maps thinks is relevant.

00:22:03.940 --> 00:22:06.900
So if you're in San Francisco,
it won't show routing apps that

00:22:06.900 --> 00:22:09.110
only apply to New York City.

00:22:11.640 --> 00:22:15.000
Below we have routing
apps from the App Store.

00:22:15.020 --> 00:22:18.820
And these are routing apps that the
App Store think could possibly provide

00:22:18.820 --> 00:22:23.360
a route based off of the start and
end point that we've selected in Maps.

00:22:23.370 --> 00:22:26.440
Notice that there are reviews
and transportation modes

00:22:26.540 --> 00:22:27.520
with these routing apps.

00:22:27.600 --> 00:22:29.390
And there's even a price.

00:22:29.450 --> 00:22:33.350
And you'll be able to purchase
these apps right inside of Maps.

00:22:33.760 --> 00:22:36.400
So we think this is a really
big opportunity because you'll

00:22:36.400 --> 00:22:40.990
be able to get your app seen by
users who really want to use it.

00:22:41.900 --> 00:22:44.800
So once the app is installed,
which you can do right in Maps,

00:22:44.810 --> 00:22:47.750
if you want to open an app,
you hit Route.

00:22:47.780 --> 00:22:50.410
And when you hit Route,
Maps will send the starting point

00:22:50.840 --> 00:22:53.200
and the ending point to that app.

00:22:53.320 --> 00:22:57.040
And that app can use it to
provide an instant route.

00:22:57.080 --> 00:23:00.280
So for this demo,
or for this presentation,

00:23:00.280 --> 00:23:02.940
we've made a sample app
called WWDC Transit,

00:23:02.960 --> 00:23:06.200
which just provides basic
Caltrain directions.

00:23:06.510 --> 00:23:08.040
So I'm going to show you how it works.

00:23:08.120 --> 00:23:09.300
You hit Route.

00:23:09.300 --> 00:23:11.680
It will jump us into our app.

00:23:12.700 --> 00:23:16.250
And then here our sample app has
told us that we should get on the

00:23:16.250 --> 00:23:20.870
San Francisco Caltrain station and get
off at the Sunnyvale Caltrain station.

00:23:20.990 --> 00:23:24.220
So notice that the user hasn't
done anything other than hit route.

00:23:24.260 --> 00:23:27.760
And it just jumped into our app and
our app instantly provided a route.

00:23:27.810 --> 00:23:31.150
This showcases just how
integrated these apps are.

00:23:33.330 --> 00:23:35.580
So that's how the workflow is.

00:23:35.640 --> 00:23:37.700
But what does it take
to become a routing app?

00:23:37.720 --> 00:23:39.570
And a routing app, again,
is any app that helps you

00:23:39.640 --> 00:23:40.300
get where you're going.

00:23:40.330 --> 00:23:42.260
It doesn't necessarily
have to show a route,

00:23:42.260 --> 00:23:44.390
like with a taxi example.

00:23:45.000 --> 00:23:47.140
First you have to declare
your app as a routing app.

00:23:47.180 --> 00:23:49.280
And you do this in your Info.plist.

00:23:49.330 --> 00:23:51.540
But Xcode makes it really easy.

00:23:52.400 --> 00:23:54.920
The second step is you need
to specify where your app

00:23:55.030 --> 00:23:57.100
is relevant geographically.

00:23:57.130 --> 00:24:00.150
And Maps will use this data
to only show your app if it

00:24:00.270 --> 00:24:02.270
thinks you can provide a route.

00:24:03.930 --> 00:24:07.030
And then the third step is you need
to use the data that Maps sends

00:24:07.100 --> 00:24:09.500
you to instantly provide a route.

00:24:09.560 --> 00:24:11.800
And that will make your app
seem much more integrated rather

00:24:11.800 --> 00:24:14.290
than just a basic app launch.

00:24:16.370 --> 00:24:18.040
So the first step is really easy.

00:24:18.040 --> 00:24:19.620
You just go into Xcode.

00:24:19.620 --> 00:24:22.810
And when you select your target,
there'll be a new option in

00:24:22.810 --> 00:24:25.540
Xcode to enable directions.

00:24:25.540 --> 00:24:29.290
And then you can select what type
of directions your app provides.

00:24:32.400 --> 00:24:38.430
Then the second step is to specify
where your app can provide routes.

00:24:38.890 --> 00:24:42.020
This is where you want users
to be able to launch your app.

00:24:42.740 --> 00:24:45.560
So for our Caltrain example,
this is a perfectly

00:24:45.610 --> 00:24:47.580
reasonable coverage area.

00:24:47.590 --> 00:24:51.290
And for this coverage area,
if the starting point and ending

00:24:51.370 --> 00:24:55.870
point are within the region,
then Maps will say, OK,

00:24:56.040 --> 00:24:58.180
your app can provide a route.

00:24:58.480 --> 00:25:00.730
But if you're out of
the San Francisco area,

00:25:00.730 --> 00:25:05.360
or out of the Bay Area, then say,
just the destination is outside,

00:25:05.360 --> 00:25:07.140
then it won't suggest our app.

00:25:07.200 --> 00:25:11.190
So they will only see your app
when your app can provide a route.

00:25:12.600 --> 00:25:16.340
So this is an example for
what a Caltrain app might use.

00:25:16.390 --> 00:25:19.200
But maybe your app provides
directions all over the US.

00:25:19.240 --> 00:25:23.890
This is a perfectly reasonable coverage
region if your app covers most of the US.

00:25:24.540 --> 00:25:28.190
Or maybe your app has different
spots where it has coverage.

00:25:28.380 --> 00:25:32.840
Here we have an app that might provide
directions in various cities in Europe.

00:25:32.840 --> 00:25:37.020
And you can see here how you
can specify multiple regions.

00:25:37.100 --> 00:25:39.920
So how do you specify
your geographic coverage?

00:25:39.950 --> 00:25:42.320
Well to do this,
you'll create a file using

00:25:42.320 --> 00:25:45.510
the GeoJSON file format,
which is a public standard

00:25:45.610 --> 00:25:48.130
for declaring geographic data.

00:25:48.170 --> 00:25:50.420
For the purposes of routing apps,
we're going to use a

00:25:50.430 --> 00:25:53.560
subset of that standard,
just a single multi-polygon.

00:25:53.570 --> 00:25:56.890
And a multi-polygon is a set
of polygons where your app

00:25:56.950 --> 00:25:58.970
says it can provide directions.

00:26:00.150 --> 00:26:01.220
So keep it simple.

00:26:01.230 --> 00:26:04.980
It's not all about fine tuning with
a million points along the coastline.

00:26:04.980 --> 00:26:07.860
It's more just a general,
where does your app provide directions?

00:26:07.940 --> 00:26:10.320
And if the start and end
point are in that region,

00:26:10.390 --> 00:26:12.320
we'll suggest your app.

00:26:13.000 --> 00:26:17.490
So you shouldn't need to specify
more than 20 polygons for most apps.

00:26:17.500 --> 00:26:19.840
And you don't need to get too
fine tuned with your polygon.

00:26:19.840 --> 00:26:21.120
No more than 20 points.

00:26:23.740 --> 00:26:26.260
One thing I want to mention
is that this coverage file is

00:26:26.300 --> 00:26:28.000
not part of your app bundle.

00:26:28.170 --> 00:26:30.840
It's submitted to iTunes
Connect separately.

00:26:30.930 --> 00:26:35.260
And the reason we're doing this is
because we want to make it really easy

00:26:35.640 --> 00:26:37.760
to update where your app gives coverage.

00:26:37.840 --> 00:26:39.640
So you don't have to go
through the app review process,

00:26:39.640 --> 00:26:42.840
you just upload it directly to
iTunes Connect and then it will

00:26:42.840 --> 00:26:45.300
be delivered to all of your users.

00:26:45.300 --> 00:26:47.210
So it's really easy.

00:26:48.630 --> 00:26:52.260
To help you test this,
we've now included Maps in the simulator.

00:26:52.290 --> 00:26:54.830
And this is going to make it
really easy to test the whole

00:26:54.830 --> 00:26:57.530
workflow of your routing app,
from starting in Maps to

00:26:57.530 --> 00:27:00.400
figure out where you're going,
to launching your app.

00:27:03.250 --> 00:27:05.620
When you're testing your routing app,
you also want to make sure that your

00:27:05.620 --> 00:27:08.220
app only appears when it's relevant.

00:27:08.310 --> 00:27:11.430
And this is verifying whether
or not your GeoJSON coverage

00:27:11.510 --> 00:27:13.790
file is behaving correctly.

00:27:13.870 --> 00:27:16.800
So you should only see your
app in the top section when

00:27:16.800 --> 00:27:18.870
your app can provide a route.

00:27:20.010 --> 00:27:23.840
One thing I want to mention is if you
do not see your app when you expect it,

00:27:23.970 --> 00:27:26.000
there could be something
wrong with your coverage file.

00:27:26.010 --> 00:27:28.900
Maps might not have been able to read it.

00:27:29.010 --> 00:27:33.400
And to catch this, if you don't see it,
go in the console if you're using the

00:27:33.400 --> 00:27:35.900
simulator and look for a syslog for Maps.

00:27:35.900 --> 00:27:41.240
And we'll demo this in a moment,
but Maps will log an error if it

00:27:41.240 --> 00:27:43.900
couldn't read your coverage file.

00:27:44.040 --> 00:27:47.610
If you're testing on the device,
you can use Xcode Organizer

00:27:47.610 --> 00:27:48.890
to check the syslog.

00:27:50.320 --> 00:27:52.880
So we have a sample
app that I showed you,

00:27:52.900 --> 00:27:55.000
that WWDC Transit app.

00:27:55.120 --> 00:27:58.440
And currently it's in
a state of a basic app.

00:27:58.550 --> 00:28:01.160
And I'm going to go through the
process of converting it from a basic

00:28:01.160 --> 00:28:03.600
app to a Maps integrated routing app.

00:28:03.690 --> 00:28:05.730
So let's look at it.

00:28:05.890 --> 00:28:08.690
OK,
so let me show you what I have so far.

00:28:10.490 --> 00:28:14.100
And this is sample code that
we'll be distributing later.

00:28:14.170 --> 00:28:17.040
And when you build and run,
you'll see that our app is very basic,

00:28:17.080 --> 00:28:22.110
but it just has an annotation for
each one of the stops on Caltrain.

00:28:22.480 --> 00:28:26.400
and you can tap on the stops
and see what the stop is.

00:28:26.460 --> 00:28:27.900
So it's not integrated with Maps yet.

00:28:27.900 --> 00:28:31.820
So if you want to get directions,
you have to use its own built in UI.

00:28:31.820 --> 00:28:34.880
And the built in UI is very simple.

00:28:34.880 --> 00:28:37.380
You have to type in an address
for the starting and ending point.

00:28:37.380 --> 00:28:39.960
So this is an example of an app
that could definitely benefit

00:28:40.250 --> 00:28:44.660
from that integration with Maps,
where the user experience for finding

00:28:44.660 --> 00:28:48.340
where you're going is much more polished.

00:28:48.360 --> 00:28:51.000
So I'm going to type in
the address of Moscone.

00:28:57.000 --> 00:29:08.500
[Transcript missing]

00:29:09.600 --> 00:29:15.870
at the San Francisco Caltrain stop and
get off at the Sunnyvale Caltrain stop.

00:29:16.610 --> 00:29:20.000
So now let's go through the process
of getting it integrated with Maps.

00:29:20.030 --> 00:29:24.370
The first step,
we need to go into our Info.plist.

00:29:24.750 --> 00:29:29.230
Or because Xcode has UI for editing it,
we can just click the target,

00:29:29.350 --> 00:29:31.120
scroll to the bottom,

00:29:32.260 --> 00:29:35.450
And then check Enable Directions.

00:29:35.660 --> 00:29:38.960
And then we'll say what kind
of directions our app supports.

00:29:39.000 --> 00:29:40.050
In this case, we're a train app.

00:29:40.240 --> 00:29:43.240
But you can select multiple options.

00:29:43.280 --> 00:29:48.940
Now when I build and run,
nothing has changed here.

00:29:49.000 --> 00:29:51.070
But if I go into Maps--

00:29:54.420 --> 00:29:58.960
Then type in where I'm going,
in this case, Apple Inc.

00:29:58.970 --> 00:30:00.950
Hit the Directions button.

00:30:01.210 --> 00:30:04.160
Choose Routing Apps, hit Route.

00:30:04.230 --> 00:30:05.920
You'll see that our app appears.

00:30:06.070 --> 00:30:10.050
And notice this is the train option,
which we selected in Xcode.

00:30:10.230 --> 00:30:12.960
So if you click the Route button,
that'll just launch our app.

00:30:13.100 --> 00:30:14.440
But it doesn't do anything yet.

00:30:14.520 --> 00:30:16.830
It's showing the route from before,
but it didn't do anything

00:30:16.830 --> 00:30:17.800
other than launch the app.

00:30:17.800 --> 00:30:20.780
And that's because we haven't
handled the launch from Maps.

00:30:21.200 --> 00:30:23.100
Also notice that we haven't
done the second step yet,

00:30:23.100 --> 00:30:24.660
which is declaring our coverage file.

00:30:24.930 --> 00:30:27.480
And for debugging purposes,
we're going to show your app even

00:30:27.480 --> 00:30:29.060
if it doesn't have a coverage file.

00:30:29.150 --> 00:30:31.650
But you won't be able to submit
it to the App Store unless

00:30:31.650 --> 00:30:34.220
you provide a coverage file.

00:30:34.340 --> 00:30:36.900
So let's go through the
process of testing that.

00:30:37.870 --> 00:30:41.300
To help you make a coverage file,
we've made another sample app

00:30:41.300 --> 00:30:46.160
called Region Definer that
we'll also be distributing.

00:30:46.220 --> 00:30:48.290
So I'm going to build and run this.

00:30:49.710 --> 00:30:53.740
And with Region Definer,
you can draw a region

00:30:53.820 --> 00:30:55.280
around the Bay Area.

00:30:55.400 --> 00:30:58.940
And you just do this by pressing
and holding to drop a pin.

00:30:59.540 --> 00:31:04.500
And as I do this, you'll see a green
polygon starts to appear.

00:31:04.520 --> 00:31:07.690
And this polygon represents
our coverage area.

00:31:10.850 --> 00:31:15.920
So here's a perfectly fine
coverage file for the Bay Area.

00:31:15.980 --> 00:31:19.320
And if I hit Log,
notice that it logs this

00:31:19.320 --> 00:31:21.160
coverage file to the console.

00:31:21.210 --> 00:31:23.980
And this is valid GeoJSON that
we can use in our app.

00:31:24.170 --> 00:31:27.400
So for testing your GeoJSON,
you can use this.

00:31:27.460 --> 00:31:30.730
And you don't have to deal
with even learning the spec.

00:31:37.390 --> 00:31:44.100
So let's take this GeoJSON and
switch into our app.

00:31:44.130 --> 00:31:46.890
And then I'm going to go
and create a new file.

00:31:48.890 --> 00:31:51.080
And then choose a resource GeoJSON file.

00:31:51.140 --> 00:31:57.480
I'm going to call this Bay Area.GeoJSON.

00:31:57.760 --> 00:32:00.070
Remember that you don't need to
include it as part of your target

00:32:00.190 --> 00:32:01.640
because it's submitted separately.

00:32:01.690 --> 00:32:02.970
And it's also tested separately.

00:32:03.150 --> 00:32:05.240
So don't add it to your target.

00:32:07.900 --> 00:32:11.180
And this just gives us a basic
template with no polygons.

00:32:11.200 --> 00:32:14.210
But we already have our
GeoJSON that we've made.

00:32:14.320 --> 00:32:16.400
So I'm just going to paste this in.

00:32:16.400 --> 00:32:19.830
And it's got our single
polygon over the Bay Area.

00:32:21.230 --> 00:32:22.980
And then there's one
more step for testing.

00:32:23.010 --> 00:32:26.780
Because it's not part of the app bundle,
you need to edit your scheme,

00:32:26.780 --> 00:32:28.280
go to the Run option.

00:32:28.320 --> 00:32:31.980
And for routing app coverage file,
choose your GeoJSON file.

00:32:31.980 --> 00:32:35.810
And now when you build and run,
it'll use that GeoJSON file.

00:32:39.110 --> 00:32:40.060
and close the other app.

00:32:40.080 --> 00:32:45.430
Now when I build and run.

00:32:47.860 --> 00:32:48.780
And then switch into Maps.

00:32:48.840 --> 00:32:55.260
So this example, our app should appear,
because Apple Inc.

00:32:55.260 --> 00:32:56.920
is within the Bay Area.

00:32:56.940 --> 00:33:00.980
So when we hit Route,
our app appears like we expected it to.

00:33:01.150 --> 00:33:03.350
But what if you choose--

00:33:03.300 --> 00:33:19.400
[Transcript missing]

00:33:23.680 --> 00:33:26.120
So what if something goes wrong
when you're making a GeoJSON file?

00:33:26.320 --> 00:33:29.940
Like say,
you forgot the last curly brace.

00:33:29.990 --> 00:33:32.380
Then what you're going to
notice is Maps isn't going

00:33:32.500 --> 00:33:35.900
to be able to parse the file,
and then it won't suggest your app.

00:33:36.250 --> 00:33:40.800
So to test this,
I'm going to build and run and

00:33:40.800 --> 00:33:42.790
show you what you might see.

00:33:44.600 --> 00:33:47.140
Switch to Maps.

00:33:47.160 --> 00:33:50.160
Get directions to Apple Inc,
which should work.

00:33:50.630 --> 00:33:51.620
But our app isn't there.

00:33:51.670 --> 00:33:52.560
So what happened?

00:33:52.680 --> 00:33:54.260
Well, it couldn't parse our file.

00:33:54.320 --> 00:33:58.580
And Maps is going to complain
when you hit that Route button.

00:33:58.680 --> 00:34:00.990
So if you go into Console--

00:34:01.760 --> 00:34:06.670
and filter for logs from Maps,
you'll see if you query for GeoJSON that

00:34:06.950 --> 00:34:09.100
Maps had an error parsing the file.

00:34:09.240 --> 00:34:12.920
And if you look at it, it said,
unexpected end of file

00:34:12.920 --> 00:34:13.800
while parsing object.

00:34:13.910 --> 00:34:20.700
And this is because you didn't
include that last curly brace.

00:34:20.700 --> 00:34:20.700
So if you don't see your
app when you expect it to,

00:34:20.700 --> 00:34:20.700
check the logs.

00:34:21.900 --> 00:34:23.720
So we've now done the first two steps.

00:34:23.790 --> 00:34:27.050
We've declared an app as a routing app,
and then we've declared

00:34:27.050 --> 00:34:28.380
where it can provide routes.

00:34:28.430 --> 00:34:30.820
Let's go back to the slides.

00:34:31.720 --> 00:34:33.700
So we've got one last step.

00:34:33.760 --> 00:34:35.840
If you open our app,
like we showed earlier,

00:34:35.920 --> 00:34:37.130
all we do is open the app.

00:34:37.420 --> 00:34:39.160
We don't do anything special about it.

00:34:39.280 --> 00:34:43.480
But what we'd really like to do is
go directly into showing a route.

00:34:43.550 --> 00:34:45.140
That will make it seem
much more seamless,

00:34:45.170 --> 00:34:48.620
and the user will enjoy
jumping into your app more.

00:34:49.450 --> 00:34:51.140
So how does this work?

00:34:51.140 --> 00:34:56.500
Well, we start with MKMap items,
just like the same API you

00:34:56.500 --> 00:34:58.220
used for opening maps before.

00:34:58.350 --> 00:34:59.900
It's the same model.

00:34:59.910 --> 00:35:02.580
One for the starting point
and one for the ending point.

00:35:02.650 --> 00:35:06.890
But in the example we've been showing,
the first item is your current location.

00:35:08.070 --> 00:35:11.060
Then Maps is going to create
an MK directions request.

00:35:11.140 --> 00:35:13.550
And when you check the
Enable Directions button,

00:35:13.680 --> 00:35:16.890
you said that your app can
handle directions requests.

00:35:17.890 --> 00:35:22.040
Then Mas will create a URL pointing
to that directions request and then

00:35:22.040 --> 00:35:25.030
use URL opening to open your app.

00:35:26.070 --> 00:35:28.620
So in your app,
you'll get open from a URL,

00:35:28.620 --> 00:35:30.850
just like any other URL.

00:35:30.920 --> 00:35:33.720
And when this happens,
in your UI application delegate,

00:35:33.740 --> 00:35:36.920
you want to check to see is it
an MK directions request URL.

00:35:36.950 --> 00:35:39.690
And there's a convenience
method for doing this.

00:35:40.330 --> 00:35:42.960
If it is,
then you're being launched from Maps.

00:35:43.050 --> 00:35:46.790
So you should instantiate the
MK directions request using the URL.

00:35:48.750 --> 00:35:53.030
Then this directions request will include
a starting item and an ending item.

00:35:53.150 --> 00:35:55.860
In this case the starting point being
our current location and the ending

00:35:55.910 --> 00:35:59.100
point being Apple headquarters.

00:35:59.100 --> 00:36:03.600
But remember that the current location
MKMap item doesn't have a placemark.

00:36:03.600 --> 00:36:05.600
It doesn't have a coordinate
associated with it.

00:36:05.600 --> 00:36:08.670
So if you get that symbolic
current location item,

00:36:08.670 --> 00:36:12.600
you need to use CoreLocation to resolve
it to whatever the user's location is.

00:36:12.860 --> 00:36:14.900
This is pretty important.

00:36:15.700 --> 00:36:18.920
Once you have that information,
then you should use

00:36:19.120 --> 00:36:20.600
it to provide a route.

00:36:20.600 --> 00:36:23.420
And remember that MKMap item has
additional details like a title

00:36:23.420 --> 00:36:25.280
and maybe a phone number and URL.

00:36:25.280 --> 00:36:27.180
So you can use this to
customize your display.

00:36:29.960 --> 00:36:31.240
So here's the code.

00:36:31.250 --> 00:36:33.130
This is an existing
UI application delegate method

00:36:33.560 --> 00:36:35.660
for handling opening URLs.

00:36:35.700 --> 00:36:38.600
And if you haven't
implemented this already,

00:36:38.630 --> 00:36:42.780
you'll add that delegate and then
add a check to see if the URL is

00:36:42.780 --> 00:36:45.260
an MK Directions Request URL.

00:36:45.280 --> 00:36:48.390
If it is,
then you're being launched from Maps.

00:36:49.520 --> 00:36:54.280
Then you can instantiate
MK directions request using that URL.

00:36:54.320 --> 00:36:58.620
And then that directions request
will have a start item and end item.

00:36:58.670 --> 00:37:01.200
And you can use these items to
instantly provide a new route.

00:37:01.310 --> 00:37:06.230
So this is the starting code
for providing custom directions.

00:37:06.590 --> 00:37:11.380
So let's go through that third step with
our sample app of letting our app handle

00:37:11.380 --> 00:37:14.980
launches from Maps more gracefully.

00:37:15.120 --> 00:37:18.590
So I'm going to go to
our application delegate.

00:37:20.820 --> 00:37:23.270
And we haven't implemented
URL opening yet,

00:37:23.270 --> 00:37:27.090
so I'm just going to drag and code
the exact code from the slides.

00:37:30.300 --> 00:37:32.410
I just got to block a code here,
but this is the same

00:37:32.410 --> 00:37:33.520
code from the slides.

00:37:33.560 --> 00:37:39.240
So it checks to see if you're being
launched for a directions request URL.

00:37:39.240 --> 00:37:41.700
And if so,
we instantiate one and then pull

00:37:41.700 --> 00:37:44.600
out the start item and end item.

00:37:44.630 --> 00:37:47.320
So now we need to do something
with that information.

00:37:48.010 --> 00:37:50.340
So I'm going to delete this to do.

00:37:50.350 --> 00:37:55.790
And then just drag in three lines of code
that uses code that we've implemented in

00:37:55.790 --> 00:38:00.460
our app to first create a My Place model,
which is just a custom model for our

00:38:00.720 --> 00:38:02.820
app representing the starting point.

00:38:02.840 --> 00:38:06.220
And you give it a name and
coordinate from the MKMap item.

00:38:06.240 --> 00:38:08.630
And then we do the same for the end item.

00:38:09.300 --> 00:38:14.110
And once we have those two My Places,
our app has a method called

00:38:14.290 --> 00:38:15.900
Route From Place to Place.

00:38:15.950 --> 00:38:20.550
And it uses the start and end
places to instantly provide a route.

00:38:20.650 --> 00:38:22.390
Now we're not done here yet.

00:38:22.510 --> 00:38:26.840
And this is because we haven't handled
the case where the starting point

00:38:26.860 --> 00:38:28.450
is a current location MQMap item.

00:38:28.680 --> 00:38:31.020
But I'm just going to
show you what happens.

00:38:32.830 --> 00:38:36.200
So I'm going to go into our app,
hit Route.

00:38:36.220 --> 00:38:39.080
And now when I hit Route for our app,
you'll see we get an error.

00:38:39.080 --> 00:38:40.740
So what's happening here?

00:38:40.770 --> 00:38:42.930
Well, I'm going to go into the debugger.

00:38:57.000 --> 00:39:10.100
[Transcript missing]

00:39:17.380 --> 00:39:19.800
You'll notice that the starting
point is our current location.

00:39:19.800 --> 00:39:21.670
So that means it has a nil place mark.

00:39:21.790 --> 00:39:23.580
So we need to figure out what
the user's location is before

00:39:23.580 --> 00:39:25.740
we try to provide a route.

00:39:26.200 --> 00:39:28.940
And the end item,
this is false because this

00:39:28.940 --> 00:39:29.960
is Apple headquarters.

00:39:30.010 --> 00:39:33.080
So we already know what the latitude
and longitude is for that endpoint.

00:39:33.100 --> 00:39:37.100
So let's get to fixing this.

00:39:42.540 --> 00:39:46.490
So I've got another block of code that
checks to see if either the start item

00:39:46.620 --> 00:39:48.260
or the end item is our current location.

00:39:48.440 --> 00:39:51.990
You don't have to worry about them
both being your current location.

00:39:53.190 --> 00:39:56.010
So first we check to see if the
start item is our current location.

00:39:56.140 --> 00:40:00.810
And if so, we know where the end item is,
but we need to get our current location

00:40:00.810 --> 00:40:03.400
first before providing a route.

00:40:04.140 --> 00:40:07.340
If the opposite is the case and the
end item is our current location,

00:40:07.350 --> 00:40:10.250
then we know the starting point,
but we need to get the current location

00:40:10.260 --> 00:40:12.540
before trying to provide a route.

00:40:13.200 --> 00:40:16.350
and these are two methods
we still need to implement.

00:40:16.350 --> 00:40:20.080
In the else case, we know the start item
and end item coordinates.

00:40:20.130 --> 00:40:22.910
So the code that we already had
right here is still going to work.

00:40:22.910 --> 00:40:29.030
So I'm just going to cut that in
and paste it into the else block.

00:40:30.510 --> 00:40:32.000
So we just got a little more here.

00:40:32.120 --> 00:40:35.130
We need to implement these two methods,
which look up our current

00:40:35.140 --> 00:40:37.240
location before providing a route.

00:40:37.730 --> 00:40:40.600
So this is implemented in
our map view controller.

00:40:40.670 --> 00:40:43.170
So we go to the header file.

00:40:43.290 --> 00:40:47.960
And here's our route from place to place,
which expects places with coordinates.

00:40:48.940 --> 00:40:52.620
I'm going to drag in two extra
methods that we were looking for.

00:40:52.680 --> 00:40:55.240
One if the starting point is our
current location and one if the

00:40:55.240 --> 00:40:57.280
ending point is our current location.

00:40:58.260 --> 00:41:01.160
Then I'm going to go into
the implementation file,

00:41:01.220 --> 00:41:03.950
scroll down to that
route from place method.

00:41:06.030 --> 00:41:08.470
Here it is.

00:41:08.620 --> 00:41:11.120
And then below it,
I'm going to implement the two

00:41:11.120 --> 00:41:13.510
methods we just added in the header.

00:41:15.400 --> 00:41:19.920
So these are pretty much the same method,
but they're for the two different cases.

00:41:20.090 --> 00:41:24.490
And if you don't know the
user's current location,

00:41:24.700 --> 00:41:27.380
but we know the end place,
then first we acquire the

00:41:27.380 --> 00:41:28.670
user's current location.

00:41:28.790 --> 00:41:32.400
And then this block we've
implemented has a block that,

00:41:32.400 --> 00:41:36.510
once it knows the user's location,
will create a MyPlace for the current

00:41:36.530 --> 00:41:39.830
location and then call routeFromPlace,
that method above,

00:41:40.000 --> 00:41:43.250
from our current location to
the end place we already knew.

00:41:43.310 --> 00:41:47.180
And pretty much the opposite
for if we know the starting

00:41:47.240 --> 00:41:50.010
place but not the ending place,
since it's our current location.

00:41:50.130 --> 00:41:53.040
So we get our current location,
create a MyPlace for

00:41:53.050 --> 00:41:56.030
our current location,
then call routeFromPlace with the

00:41:56.100 --> 00:41:59.390
start place we knew and the end
place being our current location.

00:41:59.470 --> 00:42:00.450
And now we're done.

00:42:00.570 --> 00:42:02.530
So if I build and run--

00:42:07.110 --> 00:42:09.240
Switch to Maps.

00:42:09.270 --> 00:42:12.270
Hit Directions.

00:42:12.320 --> 00:42:14.600
And this time when we launch our app,
we're going to do more

00:42:14.600 --> 00:42:15.760
than just launch our app.

00:42:15.780 --> 00:42:18.080
Our app is instantly
going to provide a route.

00:42:18.150 --> 00:42:21.360
So you see the user hasn't hit anything
else other than the Route button.

00:42:21.400 --> 00:42:25.590
And it knows that we should get on at the
San Francisco Caltrain Station and get

00:42:25.690 --> 00:42:27.880
off at the Sunnyvale Caltrain Station.

00:42:28.000 --> 00:42:29.800
But notice that you don't
even have to have a map.

00:42:29.810 --> 00:42:33.400
If your app was a taxi example,
the taxi app could just say

00:42:33.400 --> 00:42:36.880
your estimated price is this,
taxi coming at this time.

00:42:36.880 --> 00:42:39.090
It's coming to pick you up now.

00:42:39.270 --> 00:42:43.470
So you don't need to use an
MKMapView to be a routing app.

00:42:43.800 --> 00:42:44.340
So this is it.

00:42:44.410 --> 00:42:47.020
We're done converting
our app to a routing app.

00:42:47.050 --> 00:42:48.550
Go back to the slides.

00:42:48.630 --> 00:42:51.600
So I've told you how to make a
routing app and why it's really great.

00:42:51.670 --> 00:42:54.830
But what are some good practices
for making a routing app?

00:42:55.090 --> 00:42:57.700
Well, the first step is--

00:42:57.800 --> 00:42:59.660
You want to minimize the
user input after launch.

00:42:59.700 --> 00:43:02.650
And I've mentioned this a couple times,
but it's really important because

00:43:02.670 --> 00:43:05.730
you want to make your app feel like
it's just another directions mode.

00:43:05.890 --> 00:43:07.960
The easier it is,
the more likely they are

00:43:07.960 --> 00:43:09.600
to jump into your app.

00:43:10.760 --> 00:43:12.750
Also,
because this is the same API where you

00:43:12.800 --> 00:43:16.940
can add extra metadata with MKMapItem,
use that metadata to

00:43:16.940 --> 00:43:18.070
customize your route.

00:43:18.120 --> 00:43:22.590
Instead of saying
directions to 39 latitude,

00:43:22.660 --> 00:43:25.590
negative 122 longitude,
use that MKMapItem to use

00:43:25.660 --> 00:43:27.740
a title and phone number to
make it really customized,

00:43:27.740 --> 00:43:30.460
like have a call this place button.

00:43:30.470 --> 00:43:33.500
Lastly, be reasonable with your
geographic coverage.

00:43:33.510 --> 00:43:36.100
Your users don't want to see
your app where you definitely

00:43:36.170 --> 00:43:37.700
can't provide a route.

00:43:37.730 --> 00:43:41.460
But they also don't want to see your
app missing where they expect it could.

00:43:41.540 --> 00:43:45.360
So be reasonable,
but don't cover much more than you think

00:43:45.360 --> 00:43:47.880
you would or much less than you might.

00:43:49.880 --> 00:43:52.240
So that's the Routing Apps feature.

00:43:52.280 --> 00:43:54.980
And as we said,
we think this is a great opportunity

00:43:55.550 --> 00:43:58.950
for Routing Apps because you'll now be
able to integrate directly with Maps.

00:43:59.000 --> 00:44:01.070
And for many people,
Maps is a starting point when

00:44:01.070 --> 00:44:02.910
figuring out where they're going.

00:44:05.450 --> 00:44:09.220
So we expect that you'll see
increased traffic because instead

00:44:09.220 --> 00:44:13.100
of being maybe buried in the
third page of the home screen,

00:44:13.140 --> 00:44:17.330
now your app will be presented in
Maps when you can really provide a route.

00:44:18.740 --> 00:44:21.680
You'll also get promoted to
users that don't have your app

00:44:21.700 --> 00:44:23.480
when users care about using it.

00:44:23.540 --> 00:44:27.080
So this is targeted promotion
based off the start and end point.

00:44:27.140 --> 00:44:31.750
So again, a big opportunity to be seen by
users who want to use your app.

00:44:33.310 --> 00:44:35.240
So that's the Routing Apps API.

00:44:35.240 --> 00:44:37.590
We've gone over a lot
of new things in iOS 6.

00:44:37.820 --> 00:44:42.560
First, being we have all new
maps with the same API.

00:44:42.630 --> 00:44:44.110
So your code is just going to work.

00:44:44.180 --> 00:44:48.050
And if you notice that something
isn't behaving the way you expect,

00:44:48.120 --> 00:44:49.710
please file a bug.

00:44:50.670 --> 00:44:54.440
Then we introduced MKMapItem,
which makes it really easy to open

00:44:54.440 --> 00:44:56.930
maps with a minimal amount of code.

00:44:57.530 --> 00:45:01.550
And then lastly we went over this brand
new integration with Routing Apps.

00:45:01.670 --> 00:45:05.370
We will integrate Routing Apps directly
into Maps and launch your app.

00:45:06.100 --> 00:45:09.690
That's what's new with Map Kit and iOS 6.

00:45:09.740 --> 00:45:13.040
If you'd like more information,
our evangelist is Paul Marcos.

00:45:13.050 --> 00:45:14.800
You can send him an email.

00:45:14.940 --> 00:45:18.040
If you're new to Map Kit,
this was more of what's new in iOS 6.

00:45:18.040 --> 00:45:20.410
But if you're new to Map Kit,
check out the documentation.

00:45:20.420 --> 00:45:23.520
We've got really great
documentation online.

00:45:23.520 --> 00:45:27.380
MKMapView specifically is a good
starting point for how to use Map Kit.

00:45:27.400 --> 00:45:32.000
And it also links to other information,
like how to use annotations and overlays.

00:45:32.120 --> 00:45:34.440
So it's a really good starting point.

00:45:34.440 --> 00:45:37.000
If you're looking to more
in-depth coverage of how to use

00:45:37.310 --> 00:45:39.680
location services in your app,
check out the Location

00:45:39.730 --> 00:45:40.940
Awareness Programming Guide.

00:45:41.060 --> 00:45:44.000
It's got a lot of more stuff in detail.

00:45:44.000 --> 00:45:48.940
Also, because the API is the same,
last year's WWDC talk is still relevant.

00:45:48.980 --> 00:45:50.610
So it's really good.

00:45:50.670 --> 00:45:52.780
It goes over a lot of
the basics of Map Kit.

00:45:52.780 --> 00:45:54.780
You can check it out online.

00:45:55.010 --> 00:45:58.960
It's called Visualizing
Information Geographically with Map Kit.

00:45:58.960 --> 00:46:01.450
And if you have any questions that
don't get answered at the labs,

00:46:01.760 --> 00:46:03.750
feel free to ask them
on the developer forums.

00:46:06.310 --> 00:46:10.430
So we've got a repeat session this
afternoon at 3:15 in Pacific Heights,

00:46:10.450 --> 00:46:15.220
if you know anyone who
could make this one.

00:46:15.280 --> 00:46:17.240
If you're thinking about
submitting a routing app,

00:46:17.240 --> 00:46:20.920
you'll be going over how to submit a
GeoJSON file using iTunes Connect in

00:46:20.920 --> 00:46:22.380
the iTunes Connect session.

00:46:22.400 --> 00:46:25.180
That's at Nob Hill at Thursday on 9.

00:46:26.330 --> 00:46:29.860
And if your app uses Map Kit,
location services is

00:46:29.980 --> 00:46:31.160
probably important to you.

00:46:31.280 --> 00:46:35.000
So I recommend checking out the Staying
on Track with Location Services talk.

00:46:35.120 --> 00:46:37.620
And that's at Nob Hill on
Wednesday at 2:00 PM.

00:46:37.680 --> 00:46:40.270
And that's Map Kit in iOS 6.

00:46:40.270 --> 00:46:40.270
Thank you.