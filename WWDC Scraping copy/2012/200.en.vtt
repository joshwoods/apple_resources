WEBVTT

00:00:10.450 --> 00:00:13.070
Welcome this morning to
What's New in Cocoa Touch.

00:00:13.070 --> 00:00:14.940
Thank you for coming by.

00:00:14.940 --> 00:00:17.970
We've been putting together a
lot of new changes for iOS 6,

00:00:17.970 --> 00:00:21.230
and I thought I'd take you through
a quick tour of some of the

00:00:21.230 --> 00:00:23.370
bigger changes that we're making.

00:00:23.420 --> 00:00:26.460
So we'd like to get started
with some of the things that

00:00:26.480 --> 00:00:28.120
we're doing for appearance.

00:00:28.120 --> 00:00:30.490
So in iOS 5,
we spent a lot of time making

00:00:30.490 --> 00:00:33.410
sure that we added a lot of
customization opportunities

00:00:33.470 --> 00:00:36.690
to UI kits so you guys could,
you know, your designers could give

00:00:36.740 --> 00:00:38.770
you a bunch of artwork,
and you'd be able to scan and

00:00:38.830 --> 00:00:42.820
customize UI kit in order to
really fit the design of your app.

00:00:42.830 --> 00:00:46.420
So we've made a lot of
changes in that for iOS 5.

00:00:46.420 --> 00:00:49.660
We're doing some
additional stuff for iOS 6,

00:00:49.660 --> 00:00:52.360
and we'll start with
UI popover background view.

00:00:52.360 --> 00:00:56.060
So popover background view was
introduced in iOS 5 so that you could

00:00:56.060 --> 00:00:59.450
put your own popover artwork in place,
and then put your own

00:00:59.630 --> 00:01:01.480
view controllers in that.

00:01:01.480 --> 00:01:04.660
And if you were customizing this,
you might have gone and

00:01:04.660 --> 00:01:08.310
done something like,
say, try to duplicate the iBooks look.

00:01:08.360 --> 00:01:14.970
And you'd get this little
sort of beige popover view,

00:01:14.970 --> 00:01:14.970
and you'd get this little sort of

00:01:15.170 --> 00:01:19.670
You made your background view clear,
and you still got that inset

00:01:19.670 --> 00:01:24.730
and the drop shadow that we
put onto the default popover.

00:01:24.740 --> 00:01:27.350
So if you override wants
default content appearance,

00:01:27.350 --> 00:01:30.300
it's a new class method on
UI popover background view,

00:01:30.300 --> 00:01:31.860
we'll stop doing that,
and you'll get a completely

00:01:31.860 --> 00:01:35.060
flat look for the popover.

00:01:35.080 --> 00:01:38.950
So if you've been getting that inset
and it's been driving you crazy,

00:01:38.950 --> 00:01:40.570
you can get rid of it now.

00:01:41.940 --> 00:01:44.800
Wait till you see what
we have for you later.

00:01:44.800 --> 00:01:47.180
That'll be good.

00:01:47.180 --> 00:01:52.060
UI Stepper,
not our most customizable class ever.

00:01:52.060 --> 00:01:54.500
Pretty much you dragged it
out of IB or you allocated

00:01:54.500 --> 00:01:56.270
it and this is what you got.

00:01:56.280 --> 00:01:59.340
So you'll be able to tint it now, right?

00:01:59.340 --> 00:02:03.060
You can choose really
terrible colors like this one.

00:02:03.060 --> 00:02:06.580
This is why I'm an engineer and
not one of the designer guys.

00:02:06.580 --> 00:02:09.570
You'll also be able to set the
background image for a particular state,

00:02:09.570 --> 00:02:09.990
right?

00:02:10.110 --> 00:02:12.680
So instead of getting that
gray chrome with the inset,

00:02:12.720 --> 00:02:15.140
you'll be able to set your
own background images.

00:02:15.140 --> 00:02:17.600
You'll also be able to set
the divider images for the

00:02:17.600 --> 00:02:19.800
left and right segment states,
right?

00:02:19.800 --> 00:02:23.220
So as the user is tapping on
the plus and minus images,

00:02:23.220 --> 00:02:26.500
you can set the left and right divider
images to get exactly the kind of

00:02:26.500 --> 00:02:29.080
pressed or unpressed look you want.

00:02:29.080 --> 00:02:31.290
And you'll also be able to set
the increment and decrement

00:02:31.290 --> 00:02:32.670
images for particular states.

00:02:32.670 --> 00:02:34.890
So if you want to use an up arrow
and a down arrow or something

00:02:34.890 --> 00:02:37.780
else that means increment and
decrement to your application,

00:02:37.860 --> 00:02:39.120
you'll be able to do that.

00:02:39.120 --> 00:02:43.000
So the HIG sort of still applies.

00:02:43.000 --> 00:02:46.410
They should be increment and decrement
and you should stick with that.

00:02:46.530 --> 00:02:49.020
But you'll be able to
put your own images in.

00:02:49.060 --> 00:02:53.630
UI switch, our other not quite
so customizable class.

00:02:53.630 --> 00:02:58.100
You'll be able to put
tint color on this also.

00:02:58.100 --> 00:03:00.640
And you can also put a thumb
tint color in there as well.

00:03:00.640 --> 00:03:03.380
So you'll be able to
tinker around with that.

00:03:03.380 --> 00:03:07.190
And we've also gone ahead
and added image customization

00:03:07.190 --> 00:03:09.060
for the on and off images as

00:03:12.850 --> 00:03:15.530
UI Navigation Bar and Tab Bar.

00:03:16.000 --> 00:03:21.290
When you put a nav controller as
the review controller in iOS 6 or

00:03:21.290 --> 00:03:25.340
put that view into any other view,
you'll see that there's now a

00:03:25.420 --> 00:03:28.810
shadow image on the navigation bar,
and if you're using a tab bar,

00:03:28.810 --> 00:03:30.340
there's a shadow on that as well.

00:03:30.340 --> 00:03:32.890
You'll be able to customize
and turn that on and off.

00:03:32.990 --> 00:03:34.780
It's kind of subtle,
so it doesn't show up very

00:03:34.780 --> 00:03:36.780
well in screenshots here,
so we didn't put one in,

00:03:36.780 --> 00:03:38.410
but you'll be able to
set your own images,

00:03:38.410 --> 00:03:40.140
or you can set it to
nil and get rid of it.

00:03:41.950 --> 00:03:45.190
Toolbar, of course,
on the iPad now can go at the top or the

00:03:45.190 --> 00:03:49.320
bottom of your view or view controller,
so you'll be able to set the shadow

00:03:49.320 --> 00:03:51.640
image for a given toolbar position.

00:03:51.640 --> 00:03:53.820
So if you're putting it
at the bottom or the top,

00:03:53.820 --> 00:03:55.820
you'll be able to control that as well.

00:03:57.310 --> 00:03:59.770
And UI bar button item,
we've also now added some things

00:03:59.820 --> 00:04:02.940
for set background image for state,
style, and bar metrics.

00:04:02.990 --> 00:04:06.530
The bar metrics change depending
on whether you're in portrait

00:04:06.550 --> 00:04:09.170
or landscape on an iPhone,
idiom device.

00:04:09.300 --> 00:04:11.580
And this is mostly to be able to do
things like for the done button and

00:04:11.580 --> 00:04:13.040
the edit button and stuff like that.

00:04:13.040 --> 00:04:17.160
So you'll be able to customize images
for all of those things now as well.

00:04:18.650 --> 00:04:21.690
UI page control,
another little tiny control,

00:04:21.690 --> 00:04:24.500
the little dots for the page indicators.

00:04:24.500 --> 00:04:28.020
You'll now be able to tint those,
both the background color

00:04:28.020 --> 00:04:30.040
and the page indicator color.

00:04:30.040 --> 00:04:34.460
So you'll be able to fit that directly
into your app's design as well.

00:04:35.940 --> 00:04:39.700
We have some new UI image API that allows
you to create images directly from data.

00:04:39.700 --> 00:04:41.070
UI image is pretty smart.

00:04:41.070 --> 00:04:44.360
It speaks almost everything
that image IO can do.

00:04:44.360 --> 00:04:46.740
But if you are going to
give us a raw NSData,

00:04:46.740 --> 00:04:48.500
we do need to know the scale.

00:04:48.500 --> 00:04:51.600
We can't really derive that
out of whatever metadata

00:04:51.600 --> 00:04:53.500
might be inside that NSData.

00:04:53.500 --> 00:04:54.300
We can't guarantee it.

00:04:54.380 --> 00:04:56.600
So you'll have to tell us
the scale on the way in.

00:04:56.600 --> 00:04:59.610
So there's a convenience method
for that and an initializer.

00:04:59.610 --> 00:05:03.160
And we've also set it up so you can
create images from CI images now.

00:05:03.160 --> 00:05:05.600
So image with CI image
scale and orientation.

00:05:05.940 --> 00:05:08.890
You'll be able to move back
and forth between CI image

00:05:08.890 --> 00:05:10.510
and UI image much easier.

00:05:10.520 --> 00:05:13.130
UI page view controller has a new mode.

00:05:13.130 --> 00:05:15.840
So remember the book mode from last year?

00:05:15.860 --> 00:05:19.530
We were able to page through,
and it looks almost exactly

00:05:19.890 --> 00:05:21.670
like the iBooks transition.

00:05:21.680 --> 00:05:24.160
Page view controller now allows
you to set up a scrolling

00:05:24.160 --> 00:05:25.610
mode with view controllers.

00:05:25.610 --> 00:05:31.460
So if you initialize it with UI page
view controller transition style scroll.

00:05:31.460 --> 00:05:33.960
I wish I had autocomplete
for speaking for that.

00:05:34.040 --> 00:05:34.730
That would be great.

00:05:35.940 --> 00:05:40.630
You'll be able to kick that into a mode
where you can use gestures in order to

00:05:40.710 --> 00:05:44.640
just have view controllers come on the
screen and scroll through automatically.

00:05:44.640 --> 00:05:48.230
The option for inter-page spacing
is a way that you can adjust the

00:05:48.230 --> 00:05:51.600
spacing between view controllers
so it doesn't look like they're all

00:05:51.600 --> 00:05:53.100
butted right up next to each other.

00:05:53.100 --> 00:05:55.580
There are also some new delegate methods.

00:05:55.580 --> 00:05:59.700
We had page view controller did
transition to view controller before.

00:05:59.700 --> 00:06:02.190
We're now introducing
page view controller will

00:06:02.190 --> 00:06:04.100
transition to view controllers.

00:06:04.100 --> 00:06:06.460
So you have the opportunity when
the gesture begins for you to find

00:06:06.530 --> 00:06:09.620
out that that happened and which
view controllers are going to be

00:06:09.740 --> 00:06:12.800
coming into as child view controllers
into the page view controller.

00:06:12.840 --> 00:06:15.980
If you implement presentation
count for page view controller and

00:06:16.030 --> 00:06:19.340
presentation index for page view
controller for that sliding mode,

00:06:19.340 --> 00:06:22.150
we'll go ahead and automatically
put a UI page control down at

00:06:22.160 --> 00:06:25.720
the bottom of the page view
controller and keep track of that.

00:06:25.820 --> 00:06:30.000
So as you update it and things slide,
that little indicator is going to update.

00:06:30.000 --> 00:06:33.570
And I'd like to show you that right now.

00:06:34.910 --> 00:06:36.750
And because you have a captive
-- I have a captive audience,

00:06:36.760 --> 00:06:38.860
you're all going to
see pictures of my dog.

00:06:38.860 --> 00:06:41.520
So, this is Bud.

00:06:41.520 --> 00:06:42.900
This is a really simple app.

00:06:42.990 --> 00:06:46.340
It's a view.iview controller that
just goes and loads an image,

00:06:46.340 --> 00:06:48.770
and then the delegate
is holding an array,

00:06:48.770 --> 00:06:50.260
in this case five of them.

00:06:50.290 --> 00:06:52.500
You can see the page
control at the bottom there.

00:06:52.500 --> 00:06:58.010
And all of this scrolling stuff
is just taken care of for you.

00:06:58.010 --> 00:07:02.730
So there's no -- this is a
couple of delegate methods,

00:07:02.730 --> 00:07:05.630
and I just took a
UI page view controller,

00:07:05.760 --> 00:07:09.820
allocated it, parked it into the view of
the root view controller.

00:07:09.880 --> 00:07:11.530
I think I inset it a little bit.

00:07:11.760 --> 00:07:15.840
And this is his please stop
taking pictures of me look.

00:07:15.840 --> 00:07:20.630
And you can see as I'm scrolling through,
the page view -- the page control

00:07:20.670 --> 00:07:22.580
is updating at the bottom.

00:07:22.790 --> 00:07:26.390
All I'm doing is telling the
page view controller which of the

00:07:26.390 --> 00:07:31.440
page -- of the view controllers
is highlighted -- is selected.

00:07:31.440 --> 00:07:33.370
And it just updates all of that for me.

00:07:33.420 --> 00:07:36.440
So very small amount of code there.

00:07:36.440 --> 00:07:41.750
It's basically maybe 25 or 30
lines after creating a new sample.

00:07:41.840 --> 00:07:42.560
Right?

00:07:42.560 --> 00:07:45.320
So not much -- not much to that.

00:07:45.720 --> 00:07:47.080
That's Page View Controller.

00:07:47.100 --> 00:07:49.600
So those new delegate methods,
you do have to implement both of them,

00:07:49.600 --> 00:07:52.910
both the count and the index,
the presentation count

00:07:52.910 --> 00:07:54.850
and presentation index,
in order to get that

00:07:54.850 --> 00:07:56.090
page control to show up.

00:07:56.160 --> 00:08:00.960
There is one appearance session,
Advanced Appearance Customization on iOS.

00:08:00.960 --> 00:08:03.970
So if you've been doing a lot
of customization with UIKit,

00:08:04.070 --> 00:08:05.020
please come by.

00:08:05.480 --> 00:08:08.750
We've got one of our own engineers
and one of the engineers on one of the

00:08:08.750 --> 00:08:12.560
teams that uses all the API who has a
lot of experience in customizing UIKit,

00:08:12.560 --> 00:08:16.310
and they'll be talking about the best
ways to handle customization in UIKit.

00:08:18.470 --> 00:08:21.860
Next on our tour, UI Table View.

00:08:21.860 --> 00:08:24.750
We've made a bunch of changes to
UI Table View to try to make it a little

00:08:24.750 --> 00:08:26.400
bit easier for you guys to use it.

00:08:26.420 --> 00:08:28.690
There's some new features
in there as well.

00:08:28.820 --> 00:08:31.400
Table View is really the
workhorse of UIKit for a lot of

00:08:31.400 --> 00:08:34.400
navigation style applications,
and there were some things we

00:08:34.400 --> 00:08:35.400
thought we could do better.

00:08:35.400 --> 00:08:37.500
So we're going to roll those out now.

00:08:38.570 --> 00:08:42.600
We've changed the way UI Table View cell
reuse works a little bit in iOS 6.

00:08:42.600 --> 00:08:45.810
So you used to be able to do register
nib for cell reuse identifier,

00:08:45.810 --> 00:08:46.230
right?

00:08:46.330 --> 00:08:48.060
You'd give us a UI nib instance.

00:08:48.080 --> 00:08:51.020
We'd instantiate those things
out of the dequeuing mechanism.

00:08:51.020 --> 00:08:54.570
You can now register a class up
front for cell reuse identifier.

00:08:54.590 --> 00:08:57.540
So you've got your custom
UI Table View cell class.

00:08:57.580 --> 00:09:00.120
You register that with your identifier.

00:09:00.120 --> 00:09:02.780
And now in iOS 6,
what we're going to ask you to

00:09:02.780 --> 00:09:06.750
do is call dequeue reusable cell
with identifier for index path.

00:09:06.900 --> 00:09:08.040
And this method has a
couple of real-time changes.

00:09:08.120 --> 00:09:10.970
It's got really neat kind of properties.

00:09:10.970 --> 00:09:15.050
And remember writing this code, right?

00:09:15.160 --> 00:09:18.020
Dequeue reusable cell with identifier.

00:09:18.020 --> 00:09:19.720
Check to see if you got a cell.

00:09:19.720 --> 00:09:22.210
If you didn't get a cell,
allocate it to the thing, fill it out,

00:09:22.210 --> 00:09:24.760
you know, and then go through and
configure your cell.

00:09:25.360 --> 00:09:29.390
If you call dequeue reusable cell
with identifier for index path,

00:09:29.450 --> 00:09:32.250
you will always get initialized instance.

00:09:32.250 --> 00:09:35.570
It will also be the right
size for that index path.

00:09:36.520 --> 00:09:37.980
So you'll be able to do layout inside.

00:09:38.170 --> 00:09:39.830
And you'll be able to do layout
inside your content view at that point

00:09:39.830 --> 00:09:40.710
knowing that the size is correct.

00:09:40.860 --> 00:09:43.460
So on iOS 6,
you don't have to write that other code.

00:09:49.000 --> 00:09:51.660
So we're making sure you can write less.

00:09:51.690 --> 00:09:55.370
So UI Table View Header Footer
View is also a new class in iOS 6.

00:09:55.510 --> 00:09:59.500
It's a way to be able to do cell
reuse for headers and footers as well.

00:09:59.500 --> 00:10:02.740
And it's very similar to
UI Table View Cell itself.

00:10:02.740 --> 00:10:03.680
You can set a tint color.

00:10:03.680 --> 00:10:05.540
You'll have text and detail text labels.

00:10:05.540 --> 00:10:06.590
There's a content view.

00:10:06.590 --> 00:10:08.820
There's a background view
for highlighted state.

00:10:08.820 --> 00:10:12.460
All of these things work very
similar to UI Table View Cell,

00:10:12.460 --> 00:10:14.640
including the way reuse works.

00:10:14.640 --> 00:10:17.280
So you'll be able to initialize
with reuse identifier.

00:10:17.280 --> 00:10:21.950
You'll get a prepare for reuse method
on your table header footer views.

00:10:21.950 --> 00:10:24.720
And the same thing.

00:10:24.720 --> 00:10:27.770
You'll be able to register those,
and you'll call DQ reusable header

00:10:27.880 --> 00:10:29.500
footer view with identifier.

00:10:29.500 --> 00:10:30.900
You'll get a new instance.

00:10:30.970 --> 00:10:31.810
It'll be cooked.

00:10:31.910 --> 00:10:33.220
It'll be the right size.

00:10:33.220 --> 00:10:36.550
Header view for section and footer
view for section are how you can

00:10:36.620 --> 00:10:38.800
return these to the table view system.

00:10:38.800 --> 00:10:41.550
And you'll be able to also,
in that index on the right-hand side,

00:10:41.580 --> 00:10:44.610
you know, when you put up a table view,
and you've got the table view,

00:10:44.620 --> 00:10:44.620
you'll be able to do that.

00:10:44.650 --> 00:10:47.870
So you can now actually theme
those as well with colors.

00:10:47.990 --> 00:10:50.780
The section index color
is for the actual text,

00:10:50.780 --> 00:10:55.060
and then the section index tracking
background color is what color to use

00:10:55.060 --> 00:10:59.540
when the user puts their finger down
on the index and starts moving around.

00:10:59.540 --> 00:11:02.620
So you can now also theme
those things as well.

00:11:04.460 --> 00:11:06.670
There are also new table
view delegate methods.

00:11:06.720 --> 00:11:09.350
So the delegate is how you're
finding out about things like

00:11:09.350 --> 00:11:13.380
user events as well as when views
come in and out of the table view.

00:11:13.470 --> 00:11:17.620
So we always had table view,
will display cell for row at index path.

00:11:17.920 --> 00:11:20.500
We're now introducing will
display header view for section,

00:11:20.500 --> 00:11:24.300
will display footer view for section.

00:11:24.800 --> 00:11:28.760
did end displaying cell,
did end displaying header view,

00:11:28.820 --> 00:11:30.200
and did end displaying footer view.

00:11:30.200 --> 00:11:33.690
So now, as you're scrolling through,
that delegate is going to get called

00:11:33.720 --> 00:11:36.660
back on all of these methods and
tell you when the cells are coming

00:11:36.660 --> 00:11:38.220
in and out of the view hierarchy.

00:11:38.300 --> 00:11:43.100
So you'll be able to
respond to events there.

00:11:45.420 --> 00:11:49.140
And how many people actually
have installed the seed?

00:11:49.140 --> 00:11:52.880
How many people were able to get through
on the Wi-Fi to install the seed?

00:11:52.880 --> 00:11:53.480
Okay.

00:11:53.480 --> 00:11:55.540
If you've been fooling around
with the refresh control,

00:11:55.550 --> 00:11:56.560
you've seen this.

00:11:56.730 --> 00:11:59.770
It's available on TableView,
and it's very easy to use

00:11:59.770 --> 00:12:01.070
on TableView Controller.

00:12:01.220 --> 00:12:04.400
The UI refresh control is
a subclass of UI control,

00:12:04.400 --> 00:12:06.950
and when you pull down,
you're going to see that

00:12:07.330 --> 00:12:10.490
round refresh circle,
the arrow chasing its tail,

00:12:10.490 --> 00:12:14.680
and then if you pull down farther,
we're making that extend,

00:12:14.680 --> 00:12:17.480
and then you release it,
and you get the little

00:12:17.480 --> 00:12:19.690
indeterminate progress indicator.

00:12:19.890 --> 00:12:21.490
That is a UI refresh control.

00:12:21.560 --> 00:12:23.200
It's set up just by calling init.

00:12:23.200 --> 00:12:25.840
It is a UI control,
so you're going to set a target

00:12:25.840 --> 00:12:30.090
action on it so that when that
control starts refreshing,

00:12:30.090 --> 00:12:33.660
you'll get a message on
the target of the action.

00:12:33.660 --> 00:12:36.860
You can find out whether
or not it's refreshing.

00:12:36.900 --> 00:12:39.650
You can tint it,
and if you're using it via

00:12:39.650 --> 00:12:42.820
UI TableView Controller,
when you pull it down and

00:12:42.820 --> 00:12:44.990
you hit the threshold,
we'll fire its target

00:12:44.990 --> 00:12:46.060
action automatically.

00:12:46.060 --> 00:12:49.030
You're responsible actually for
calling end refreshing in order to

00:12:49.030 --> 00:12:51.440
get it back into its normal state,
but you can also trigger

00:12:51.440 --> 00:12:54.340
that programmatically just
by calling begin refreshing,

00:12:54.550 --> 00:12:54.840
right?

00:12:54.840 --> 00:12:57.690
But you will have to call
end refreshing on your own.

00:12:57.690 --> 00:13:00.660
So UI Collection View.

00:13:00.660 --> 00:13:04.310
If UI TableView is the workhorse
of navigation in UIKit,

00:13:04.310 --> 00:13:08.500
UI Collection View is how you're
going to do things that involve

00:13:08.620 --> 00:13:12.750
more than one column and do really
sophisticated layout with it.

00:13:12.760 --> 00:13:16.540
So, you know, TableView is great for
showing something vertically.

00:13:16.540 --> 00:13:18.760
Collection View is far more flexible.

00:13:18.760 --> 00:13:20.440
If you've installed
the seed on your iPads,

00:13:20.440 --> 00:13:23.940
you've noticed, hey, look,
there's a clock app now.

00:13:23.940 --> 00:13:26.690
That clock app is using
UI Collection View and its

00:13:26.890 --> 00:13:28.980
default layout for this view.

00:13:28.980 --> 00:13:30.680
This is basically a grid.

00:13:30.680 --> 00:13:34.040
It's got a bunch of regular sort of,
you know, everything is the same size.

00:13:34.040 --> 00:13:35.350
They're laid out really cleanly.

00:13:35.480 --> 00:13:37.160
There's an add button there.

00:13:37.160 --> 00:13:37.760
It's really -- it looks like a grid.

00:13:37.760 --> 00:13:39.880
It looks like the rest of the clocks.

00:13:39.960 --> 00:13:42.480
This is all possible
with the default layout.

00:13:42.540 --> 00:13:49.520
But you can also do far more
complex layouts like this one.

00:13:49.520 --> 00:13:53.620
This is the alarms layout
inside the same application.

00:13:53.620 --> 00:13:56.030
It's a weekly kind of calendar.

00:13:56.070 --> 00:14:00.590
It shows all the alarms that
you've got set on your iPad.

00:14:01.020 --> 00:14:02.780
So the parts are really familiar.

00:14:02.780 --> 00:14:05.770
UI Collection View has a data
source as a delegate there,

00:14:05.770 --> 00:14:09.190
UI Collection View sells,
but it has this other layout object.

00:14:09.300 --> 00:14:11.030
So the system works the same way.

00:14:11.100 --> 00:14:13.860
Collection View asks its
data source for the number of

00:14:13.860 --> 00:14:15.610
sections in a Collection View.

00:14:15.610 --> 00:14:18.490
Once it finds that out,
it starts asking for the number

00:14:18.490 --> 00:14:20.360
of items in a particular section.

00:14:20.360 --> 00:14:23.740
Once it finds out how many items,
it starts asking for cells for an

00:14:23.850 --> 00:14:25.730
item at the particular index path.

00:14:25.730 --> 00:14:29.830
You're going to vend those
UI Collection View cells at that point.

00:14:31.020 --> 00:14:33.440
The one difference between
this is UI Collection View cell

00:14:33.570 --> 00:14:34.890
versus UI Table View cell.

00:14:35.000 --> 00:14:38.280
Table View cell, remember,
has all of those custom,

00:14:38.280 --> 00:14:40.030
those default styles.

00:14:40.030 --> 00:14:43.580
You know, there's one for subtext and
detail text and things like that.

00:14:44.160 --> 00:14:45.740
Collection View cell is really simple.

00:14:45.740 --> 00:14:46.450
It's a cell.

00:14:46.450 --> 00:14:47.420
It's just a view.

00:14:47.420 --> 00:14:48.880
It's got a background view.

00:14:48.980 --> 00:14:50.760
It has a selected background view.

00:14:50.780 --> 00:14:54.850
So these are how you're going to be able
to do highlights and things like that.

00:14:55.030 --> 00:14:57.560
And then it's also got a content view,
and the content view is where you're

00:14:57.560 --> 00:14:58.800
going to put all of your stuff.

00:14:58.860 --> 00:14:59.900
Right?

00:14:59.900 --> 00:15:01.220
That's... it.

00:15:01.260 --> 00:15:05.590
You can do anything you want inside that,
but there's no default

00:15:05.700 --> 00:15:07.150
styles or anything like that.

00:15:07.260 --> 00:15:11.620
This gives you tremendous flexibility
in how you lay things out and how all of

00:15:12.030 --> 00:15:13.670
your appearance stuff is going to work.

00:15:13.760 --> 00:15:16.990
So the delegate is very similar.

00:15:17.000 --> 00:15:17.590
Right?

00:15:17.660 --> 00:15:20.910
That's where you're going to find
out about user events that are

00:15:20.910 --> 00:15:24.420
happening as the user taps on
various things in the interface.

00:15:24.420 --> 00:15:24.920
Right?

00:15:24.920 --> 00:15:27.220
So you'll get should
highlight item at index path.

00:15:27.220 --> 00:15:29.520
Collection View should
select item at index path.

00:15:29.570 --> 00:15:30.620
Or did select item at index path.

00:15:30.620 --> 00:15:33.620
All of those things are events
that you can respond to,

00:15:33.620 --> 00:15:38.620
and you'll get messages
about them on the delegate.

00:15:38.620 --> 00:15:44.380
The layout is really where
Collection View's power lives.

00:15:44.540 --> 00:15:48.950
So the layout is a way to be able
to have the Collection View be

00:15:48.950 --> 00:15:51.420
told where each item should go.

00:15:51.620 --> 00:15:55.460
So Collection View is really good
at laying things out in a grid.

00:15:55.810 --> 00:15:59.470
The default layout mechanism is
called UI Collection View Flow Layout.

00:15:59.620 --> 00:16:00.480
And by default, it's a way to have the
collection view be able to be

00:16:00.480 --> 00:16:00.480
told where each item should go.

00:16:00.480 --> 00:16:02.780
And by default,
it's just going to sort of throw things

00:16:02.780 --> 00:16:04.480
out into this very regular pattern.

00:16:04.480 --> 00:16:07.220
And you can put section titles or
supplementary views and decoration

00:16:07.220 --> 00:16:08.480
views and things like that.

00:16:08.480 --> 00:16:10.720
It's not just about putting
the cells in as well,

00:16:10.720 --> 00:16:13.240
and those are all
controlled by the layout.

00:16:13.290 --> 00:16:15.380
But this isn't very interesting.

00:16:15.380 --> 00:16:17.330
And if you have to have
everything be the same size,

00:16:17.330 --> 00:16:18.640
it's not particularly flexible.

00:16:18.640 --> 00:16:22.580
So Flow Layout also allows
you to do things like this,

00:16:22.640 --> 00:16:24.880
where not all the cells
are the same shape,

00:16:24.910 --> 00:16:26.490
not all the cells are the same size.

00:16:26.600 --> 00:16:28.780
The rows don't have to be the same size.

00:16:28.820 --> 00:16:30.330
You can think of it a little bit as type.

00:16:30.420 --> 00:16:34.340
You can think of it as typing into a
word processor and having things wrap.

00:16:34.340 --> 00:16:37.540
You'll be able to set things
up so that you get exactly

00:16:37.540 --> 00:16:39.340
the kind of look you want.

00:16:39.340 --> 00:16:44.140
If Flow Layout doesn't do it for you,
you can go right on to

00:16:44.140 --> 00:16:48.340
customizing and subclassing
UI Collection View Layout yourself.

00:16:48.360 --> 00:16:52.660
And you'll be able to do things
like custom layouts that do stacks

00:16:52.660 --> 00:16:56.340
of things or custom layouts that
don't fit readily into a grid.

00:16:56.340 --> 00:16:58.260
Right?

00:16:59.400 --> 00:17:02.200
This -- This is the Flow Layout.

00:17:02.200 --> 00:17:04.200
This guy is actually -- this other one,
the alarms one,

00:17:04.280 --> 00:17:05.170
is actually a custom layout.

00:17:05.300 --> 00:17:09.600
It's not amazingly complicated,
but it's one example of how you

00:17:09.650 --> 00:17:15.580
can exactly position all of the
various elements of your collection.

00:17:15.730 --> 00:17:19.130
There are two collection view sessions,
introducing collection views

00:17:19.130 --> 00:17:22.030
and advanced collection views
and building custom layouts.

00:17:22.180 --> 00:17:25.920
I hear that the demo in introducing
collection views right at the end

00:17:25.920 --> 00:17:27.190
of the session is pretty amazing.

00:17:27.190 --> 00:17:33.770
So if you guys want to see
the kinds of things that are

00:17:33.770 --> 00:17:33.770
possible with UI collection view,
you should definitely go to that talk.

00:17:35.320 --> 00:17:37.260
UI view controller.

00:17:37.300 --> 00:17:39.160
Again, another workhorse of UIKit.

00:17:39.160 --> 00:17:45.440
UI view controller is how we've been
composing API and UI for a while,

00:17:45.440 --> 00:17:46.670
right?

00:17:46.750 --> 00:17:49.300
We've been vending a lot of
things as UI view controllers now.

00:17:49.300 --> 00:17:53.700
They're really how we put together
interfaces in a really flexible way.

00:17:53.700 --> 00:17:55.890
It allows you to use navigation
controller and things like

00:17:55.890 --> 00:17:56.960
that really effectively.

00:17:57.010 --> 00:18:02.280
We're working on trying to make
UI view controller easier to use.

00:18:02.280 --> 00:18:05.510
One of the things we looked
at was in view unloading.

00:18:05.510 --> 00:18:07.380
So view will unload and view did unload.

00:18:07.380 --> 00:18:12.230
These are called automatically in iOS 5
when you get did receive memory warning,

00:18:12.330 --> 00:18:13.020
right?

00:18:13.020 --> 00:18:16.530
You're going to take some steps to
release some caches and things like that.

00:18:16.570 --> 00:18:18.360
And then we're going to go
ahead and call view will unload,

00:18:18.360 --> 00:18:20.150
and then we were taking the
view out of the view hardware,

00:18:20.150 --> 00:18:21.650
we were unloading it
from the view controller,

00:18:21.650 --> 00:18:23.240
and then we would call view did unload.

00:18:23.240 --> 00:18:26.050
There are actually two
interesting things here.

00:18:26.050 --> 00:18:30.680
One was we were trying to help everybody
control memory in an automated fashion.

00:18:30.680 --> 00:18:32.240
And we really wanted to make
sure that we were doing it in a

00:18:32.240 --> 00:18:32.260
way that was really easy to use.

00:18:32.260 --> 00:18:34.820
And we really wanted to be able to
make sure that everybody was using

00:18:34.970 --> 00:18:37.890
only exactly what they needed to use.

00:18:38.880 --> 00:18:41.840
The catch is these are
really hard to write.

00:18:41.840 --> 00:18:44.420
It's very easy to wind up in your
view will unload and view did

00:18:44.420 --> 00:18:47.440
unload leaving a dangling pointer
reference behind and then when we

00:18:47.440 --> 00:18:52.260
go ahead and unload those views,
suddenly your app crashes.

00:18:52.260 --> 00:18:54.790
And memory warnings are hard
things to actually debug around,

00:18:54.920 --> 00:18:57.030
so it's a tricky situation to be in.

00:18:57.260 --> 00:18:58.590
Also, we did science.

00:18:58.620 --> 00:19:02.360
We do science at Apple occasionally,
and this is one case where we did it,

00:19:02.360 --> 00:19:06.840
and we realized that the memory savings
from cleaning up a pointer here and

00:19:06.840 --> 00:19:11.580
there in view will unload and view did
unload is absolutely nothing compared

00:19:11.680 --> 00:19:15.330
to the fact that Core Animation is
already taking the back end sort of

00:19:15.330 --> 00:19:18.830
layer out when it's not displayed anyway,
and so all of that memory is the

00:19:18.830 --> 00:19:23.100
little bits of memory that you were
cleaning up is completely dominated

00:19:23.100 --> 00:19:25.520
by what Core Animation is doing.

00:19:25.520 --> 00:19:28.580
So in iOS 6, these are deprecated.

00:19:28.580 --> 00:19:30.890
We're not calling them anymore.

00:19:36.140 --> 00:19:40.820
That was not what I thought
you guys were going to do.

00:19:40.820 --> 00:19:43.730
We also recommend that
in iOS 5 and before,

00:19:43.730 --> 00:19:46.180
you don't implement them anymore.

00:19:46.180 --> 00:19:49.550
So if you're going to be deploying --
building on iOS 6 and deploying back,

00:19:49.550 --> 00:19:55.320
I think the earliest deployment target
you can get in Xcode these days is 4.3.

00:19:55.350 --> 00:19:56.540
Don't implement it.

00:19:56.580 --> 00:19:57.460
Don't bother.

00:19:57.500 --> 00:19:59.240
Write less code.

00:19:59.240 --> 00:20:02.680
If you were doing some things in
ViewWillUnload and ViewDidUnload,

00:20:02.680 --> 00:20:12.510
you should look and figure out whether
those things are more appropriately

00:20:12.570 --> 00:20:12.570
done either in the dialog or in
ViewWillDisappear and ViewDidDisappear.

00:20:13.180 --> 00:20:18.320
But this was tough to figure out,
and when we were running

00:20:18.320 --> 00:20:21.720
this in test code,
we discovered that we fixed an

00:20:21.730 --> 00:20:26.590
entire class of crashers that
really just were worth fixing.

00:20:26.700 --> 00:20:29.930
So that's why we're deprecating this.

00:20:30.560 --> 00:20:32.220
The forwarding callbacks.

00:20:32.480 --> 00:20:36.660
When we introduced containment in iOS,
what was it, 4, 3, 5?

00:20:36.660 --> 00:20:40.000
We introduced containment a while back,
and it was a way to formalize parent

00:20:40.040 --> 00:20:41.800
and child view controller relationships.

00:20:41.800 --> 00:20:45.680
One of the things that we did was
set it up so that parents forwarded

00:20:45.680 --> 00:20:50.550
their appearance callbacks and their
rotation callbacks to their children.

00:20:50.560 --> 00:20:55.210
So if you were overriding automatically
forward appearance and rotation methods

00:20:55.210 --> 00:20:58.640
to child view controllers to return no,
then you were on the hook for

00:20:58.640 --> 00:20:59.800
doing that stuff yourself.

00:21:00.400 --> 00:21:02.330
We're splitting this into two methods.

00:21:02.450 --> 00:21:05.640
We're deprecating that first really long
one that I'm not going to say again.

00:21:05.640 --> 00:21:09.920
And we're putting that into should
automatically forward rotation

00:21:09.920 --> 00:21:12.600
methods and should automatically
forward appearance methods.

00:21:12.620 --> 00:21:14.870
So these still return yes by default.

00:21:14.930 --> 00:21:17.930
We're still going to go
ahead and forward those.

00:21:17.960 --> 00:21:20.450
But if you override the latter one,
should automatically

00:21:20.450 --> 00:21:22.910
forward appearance methods,
we're going to ask you to do

00:21:22.910 --> 00:21:24.640
something a little bit different.

00:21:26.500 --> 00:21:29.170
If you were overriding this and
doing the forwarding by hand,

00:21:29.170 --> 00:21:32.460
you were sending viewWillAppear
and viewDidAppear to the child

00:21:32.460 --> 00:21:34.360
view controllers yourself.

00:21:34.490 --> 00:21:38.970
It's tricky to get right in terms
of when animations are happening and

00:21:38.970 --> 00:21:42.300
getting that in the right order and
making sure that the state machine

00:21:42.300 --> 00:21:45.400
is preserved so that viewWillAppear
always happens before viewDidAppear,

00:21:45.400 --> 00:21:47.580
and sometimes it's easy
to get those reversed,

00:21:47.710 --> 00:21:49.390
things like that.

00:21:49.470 --> 00:21:53.530
Rather than have you keep
calling those by hand,

00:21:53.890 --> 00:21:56.540
and if you're forwarding it,
UIKit also takes steps to

00:21:56.630 --> 00:21:58.980
make sure that some of those
viewDidAppear or viewDidDisappear

00:21:58.980 --> 00:22:00.800
occur at the end of the run loop.

00:22:00.870 --> 00:22:02.400
We're going to ask you to
call a different method.

00:22:02.400 --> 00:22:04.780
It's called
beginAppearanceTransitionAnimated

00:22:04.860 --> 00:22:06.800
and endAppearanceTransition.

00:22:06.970 --> 00:22:09.690
beginAppearanceTransitionAnimated,
you're going to tell us if the view

00:22:09.690 --> 00:22:11.300
is appearing or it's disappearing.

00:22:11.300 --> 00:22:14.950
It's appearing if it's true,
is appearing is no if you're taking

00:22:15.040 --> 00:22:18.130
the view out of the view hierarchy,
and whether or not that

00:22:18.300 --> 00:22:20.800
appearance transition is animated.

00:22:20.910 --> 00:22:22.310
And then when you're done
with that transition,

00:22:22.360 --> 00:22:23.800
you'll call endAppearanceTransition.

00:22:23.810 --> 00:22:27.890
What this does is it goes ahead and
calls viewWillAppear and viewDidAppear or

00:22:27.890 --> 00:22:31.900
viewWillDisappear and viewDidDisappear,
and it makes sure to call them at

00:22:31.900 --> 00:22:35.160
exactly the right time so that the rest
of UIKit is self-consistent in terms

00:22:35.160 --> 00:22:36.800
of animations and things like that.

00:22:36.800 --> 00:22:40.770
This is a new method in iOS 6.

00:22:40.850 --> 00:22:43.640
But it turns out it exists back in iOS 5.

00:22:43.640 --> 00:22:49.220
So if you're compiling on iOS 6,
we've retro published it.

00:22:49.220 --> 00:22:52.310
It's available for use back in 5.0.

00:22:57.660 --> 00:23:01.360
I'd like to talk a little bit about
rotation and interface orientation.

00:23:01.380 --> 00:23:03.780
So this is our old friend,
should auto rotate to

00:23:03.870 --> 00:23:05.090
interface orientation.

00:23:05.100 --> 00:23:07.600
Remember what happens
when we rotate the device,

00:23:07.600 --> 00:23:09.880
we go through and if it's a
navigation controller like this one,

00:23:09.880 --> 00:23:12.190
we're going to go ahead and ask a
whole bunch of questions about the

00:23:12.210 --> 00:23:15.240
child view controllers and whether
the top view controller supports that.

00:23:15.240 --> 00:23:16.520
It's going to get asked,
should auto rotate?

00:23:16.520 --> 00:23:18.020
It says, sure, let's auto rotate.

00:23:18.020 --> 00:23:21.150
We go ahead and rotate the device,
and then we counter rotate

00:23:21.520 --> 00:23:24.850
the interface in order to make
sure everything looks right.

00:23:26.010 --> 00:23:30.380
But interface orientation and rotation
are kind of combined in this concept.

00:23:30.570 --> 00:23:32.600
And when you start
looking at how that works,

00:23:32.700 --> 00:23:35.990
it gets a little more confusing when
you move to something like an iPad.

00:23:36.000 --> 00:23:37.000
Right?

00:23:37.000 --> 00:23:40.000
Because the iPad has a whole bunch of
view controllers that tend to get nested.

00:23:40.000 --> 00:23:42.880
If you're using split view controller,
you're kind of in this mode now.

00:23:42.940 --> 00:23:47.000
If you look at that guy right there,
that's a view controller.

00:23:47.000 --> 00:23:50.210
He's a child view controller
of another view controller,

00:23:50.210 --> 00:23:52.840
which is the child of
another view controller,

00:23:52.840 --> 00:23:55.000
which is the root view controller.

00:23:55.000 --> 00:23:55.000
So we're four levels deep here.

00:23:55.290 --> 00:23:57.900
And while this thing has
an interface orientation,

00:23:57.900 --> 00:23:59.740
it kind of doesn't make
a whole lot of sense.

00:23:59.740 --> 00:24:03.440
And one of the questions is,
should this even be

00:24:03.510 --> 00:24:06.420
allowed to deny rotation,
right?

00:24:06.420 --> 00:24:10.220
One of the things that we've been looking
at is the fact that many times people

00:24:10.350 --> 00:24:15.600
are conflating interface orientation
with layout and thinking things like,

00:24:15.600 --> 00:24:19.680
oh, hey, yeah, if I'm in landscape,
I must be wider than I am tall.

00:24:19.980 --> 00:24:21.760
Well,
that's clearly not the case here for

00:24:21.760 --> 00:24:24.020
that highlighted view controller,
right?

00:24:24.020 --> 00:24:26.020
He's taller than he is wide,
but the interface

00:24:26.020 --> 00:24:27.420
orientation is landscape.

00:24:27.420 --> 00:24:31.140
And so trying to pile together
the idea of layout with your

00:24:31.140 --> 00:24:33.900
orientation isn't quite right.

00:24:33.900 --> 00:24:35.870
We'd like you to think about layout
as something that you're responsive

00:24:35.870 --> 00:24:38.650
to as the bounds of your view changes,
right?

00:24:38.660 --> 00:24:41.560
Parent view controllers can
take a child view controller,

00:24:41.560 --> 00:24:44.130
park their view in any
aspect ratio they want.

00:24:44.170 --> 00:24:48.720
Your view controller should be
responsive to that kind of layout.

00:24:48.720 --> 00:24:51.860
So we're looking at how to
deal with some of these things.

00:24:51.940 --> 00:24:53.950
So it conflates interface
orientation with rotation.

00:24:53.960 --> 00:24:56.420
It conflates interface
orientation with layout.

00:24:56.450 --> 00:24:58.110
And in a lot of cases, it's meaningless.

00:24:58.200 --> 00:25:00.430
We saw the child view
controller case a minute ago,

00:25:00.550 --> 00:25:02.820
but a form sheet is another good example,
right?

00:25:02.820 --> 00:25:03.900
It's this little small thing.

00:25:03.900 --> 00:25:05.780
It hovers in the middle of the screen.

00:25:05.780 --> 00:25:08.260
It doesn't really have
interface orientation.

00:25:08.310 --> 00:25:11.430
So what we're looking at doing,
and this is available in the seed,

00:25:11.430 --> 00:25:14.550
is we're going to change
things a little bit.

00:25:14.570 --> 00:25:18.380
Should auto rotate to
interface orientation,

00:25:18.380 --> 00:25:21.330
we're going to look at moving
to the side a little bit.

00:25:21.340 --> 00:25:23.800
And we're going to go with
supported interface orientations.

00:25:23.900 --> 00:25:27.730
This is a bit mask of the
interface orientations that

00:25:27.800 --> 00:25:31.060
your view controller supports,
right?

00:25:31.060 --> 00:25:34.910
And preferred interface orientation
for presentation is used when you're

00:25:35.030 --> 00:25:36.620
modally presenting a view controller.

00:25:36.630 --> 00:25:39.070
You're doing a full screen presentation,
it's going to come up.

00:25:39.070 --> 00:25:43.560
Sometimes your view controller will
support all the interface orientations,

00:25:43.570 --> 00:25:47.330
but it really prefers to be in
landscape and the devices in portrait.

00:25:47.330 --> 00:25:50.380
A great example of this is from
Scott's demo yesterday when he

00:25:50.500 --> 00:25:53.240
called up the preview of the movie,
right?

00:25:53.240 --> 00:25:55.240
That movie player came in,
it came up in landscape,

00:25:55.240 --> 00:25:57.440
you saw the device rotate, right?

00:25:57.440 --> 00:26:00.100
He rotated the device in order to see it.

00:26:00.100 --> 00:26:04.140
So if you're going to be presenting view
controllers with different orientations

00:26:04.140 --> 00:26:07.440
from the one that's on screen,
you'll have that view controller

00:26:07.830 --> 00:26:11.830
return preferred interface
orientation for presentation.

00:26:12.750 --> 00:26:15.150
There's also a new
method in UI application,

00:26:15.340 --> 00:26:18.180
supported interface
orientations for window.

00:26:18.180 --> 00:26:21.210
You'll be able to turn supported
interface orientations on and off

00:26:21.230 --> 00:26:24.790
for a given window at that level,
but if you don't implement this,

00:26:24.890 --> 00:26:27.540
what we're doing now is we're
going to believe what you

00:26:27.610 --> 00:26:29.060
told us in the Info.plist.

00:26:29.120 --> 00:26:33.260
So if you only want your application to
do landscape left and landscape right,

00:26:33.260 --> 00:26:35.110
go ahead and declare
that in the Info.plist.

00:26:35.110 --> 00:26:37.050
All of this is not on by default.

00:26:37.130 --> 00:26:40.720
I'm getting a lot of like, oh, my God,
this is, wow, big change.

00:26:40.720 --> 00:26:41.410
It is.

00:26:41.470 --> 00:26:42.580
It's not on by default.

00:26:42.580 --> 00:26:45.190
We'd like you to experiment with it,
and the way you're going

00:26:45.190 --> 00:26:47.740
to experiment with it is by
using UI application supported

00:26:47.740 --> 00:26:49.640
interface orientations is enabled.

00:26:49.640 --> 00:26:51.610
It's an NS user default key.

00:26:52.340 --> 00:26:56.130
You can set this in your
argument domain right from Xcode,

00:26:56.130 --> 00:26:59.100
or you can register it as a user
default with NS user default.

00:26:59.630 --> 00:27:01.880
So we're going to set this in our
user defaults register defaults.

00:27:01.890 --> 00:27:05.050
This will turn on a mode where
we will start asking supported

00:27:05.050 --> 00:27:07.420
interface orientations,
and we're only going

00:27:07.420 --> 00:27:08.430
to ask it at two times.

00:27:08.550 --> 00:27:12.490
We're going to ask it when you rotate,
but we'll ask it of the root view

00:27:12.490 --> 00:27:16.790
controller and of the topmost
presented full screen view controller.

00:27:16.930 --> 00:27:21.020
It used to be really easy to wind
up in a situation where you'd have

00:27:21.160 --> 00:27:23.970
supported interface orientations,
and somewhere deep in the hierarchy,

00:27:24.070 --> 00:27:26.780
one of those things is going to say
supported interface orientations.

00:27:26.780 --> 00:27:28.500
Should auto-rotate interface orientation?

00:27:28.500 --> 00:27:29.880
No.

00:27:29.880 --> 00:27:32.330
And then suddenly, it breaks.

00:27:32.440 --> 00:27:34.060
You have no idea why it's not rotating.

00:27:34.060 --> 00:27:36.530
You have to go through and find all
of the places where you've implemented

00:27:36.530 --> 00:27:37.970
that method and get it exactly right.

00:27:37.980 --> 00:27:40.410
Declaring supported
interface orientations helps

00:27:40.410 --> 00:27:41.660
alleviate a lot of that.

00:27:41.720 --> 00:27:43.940
So please turn this on in the
seed with your applications.

00:27:43.940 --> 00:27:46.520
Let us know what's working
and what isn't working.

00:27:46.800 --> 00:27:49.280
we'd like to be able to
turn this on pretty soon.

00:27:51.200 --> 00:27:53.420
There's a UI view controller
session called the Evolution of

00:27:53.420 --> 00:27:54.700
View Controllers on iOS.

00:27:54.700 --> 00:27:57.800
It's going to talk a lot about
effective use of view controllers and

00:27:57.800 --> 00:28:03.450
how best to work alongside UIKit and
the view controllers that we vend.

00:28:03.970 --> 00:28:05.440
So let's talk about Auto Layout,
another thing that's

00:28:05.440 --> 00:28:09.530
coming from OS X to iOS.

00:28:13.210 --> 00:28:16.500
View layout in iOS 5, pretty constrained,
right?

00:28:16.500 --> 00:28:19.200
You can do explicit layout by
calling set frame on your views.

00:28:19.230 --> 00:28:22.320
You're probably writing a lot of
layout subviews code there in order

00:28:22.320 --> 00:28:25.660
to make sure that when things change,
you're positioning all of

00:28:25.740 --> 00:28:27.500
those views exactly right.

00:28:29.340 --> 00:28:32.620
Not very flexible, tremendously powerful,
lots of control.

00:28:32.620 --> 00:28:36.380
You can use auto-resizing masks,
springs and struts, right?

00:28:36.380 --> 00:28:39.950
You can set flexible width for, you know,
particular left margin, right margin,

00:28:39.950 --> 00:28:42.360
flexible height for, you know,
things like that.

00:28:42.360 --> 00:28:45.960
And that allows you to say, well,
this view is always a fixed

00:28:45.960 --> 00:28:49.640
distance from the bottom,
a flexible distance from the top,

00:28:49.640 --> 00:28:52.170
but it's always relative
to its super view,

00:28:52.170 --> 00:28:53.060
right?

00:28:53.060 --> 00:28:55.100
And the minute your designer
comes along and says,

00:28:55.100 --> 00:28:56.540
hey, I've got this great idea.

00:28:56.540 --> 00:28:59.920
I want to have a button that's
always 20%. 20 points to

00:28:59.940 --> 00:29:02.360
the left of another button,
no matter where that other button is.

00:29:02.360 --> 00:29:03.930
And now you've been
using springs and struts,

00:29:03.960 --> 00:29:05.820
everything's been great,
and your designer just came

00:29:05.820 --> 00:29:08.050
to you with this great idea,
and now you're like, oh, man,

00:29:08.060 --> 00:29:09.740
I've got to write all
this layout subviews code.

00:29:09.760 --> 00:29:13.630
Constraints allow you to express the
relationships between two objects,

00:29:13.630 --> 00:29:16.200
and once you've expressed
those relationships,

00:29:16.220 --> 00:29:20.160
the frames get calculated automatically
all the way down the view hierarchy

00:29:20.160 --> 00:29:22.900
for you whenever the layout changes,
right?

00:29:23.040 --> 00:29:27.950
So the way you'll express this is
by bringing in NSLayoutConstraint.

00:29:27.960 --> 00:29:29.150
LayoutConstraint.

00:29:29.370 --> 00:29:30.660
LayoutConstraint has
constraint with item.

00:29:30.660 --> 00:29:33.560
You're going to set up a
constraint between two items.

00:29:33.600 --> 00:29:37.230
LayoutConstraint with item
attribute related by two item

00:29:37.280 --> 00:29:39.640
attribute multiplier constant.

00:29:39.640 --> 00:29:42.000
There's that autocomplete thing again.

00:29:42.000 --> 00:29:46.330
And if we wanted to express that,
it's really item one attribute is

00:29:46.330 --> 00:29:51.210
equal to some multiplier times item
two attribute plus the constant.

00:29:51.220 --> 00:29:54.040
All the math geeks out there are going,
it's y equals mx plus b.

00:29:54.040 --> 00:29:54.860
This is so cool.

00:29:54.860 --> 00:29:59.340
Those relationships can also be greater.

00:29:59.340 --> 00:30:02.100
They're equal to, less than or equal to.

00:30:02.100 --> 00:30:04.980
In this case, we're going to use an
equal to relationship.

00:30:05.090 --> 00:30:07.570
And the way it looks with
those two buttons is this.

00:30:07.720 --> 00:30:11.820
We're going to set up the constraint
between button one's right edge.

00:30:11.890 --> 00:30:15.000
It should be equal to
button two's left edge,

00:30:15.070 --> 00:30:17.070
NSLayoutAttribute left.

00:30:17.220 --> 00:30:19.880
The multiplier is going to be 1.0,
but you can play around with that and

00:30:19.940 --> 00:30:21.400
see scaling effects in the equation.

00:30:21.400 --> 00:30:23.880
And the constant is minus 20.

00:30:24.110 --> 00:30:27.450
That's 20 points to the left,
so the right edge of that button is

00:30:27.450 --> 00:30:31.430
going to be 20 points to the left of
the left edge of the second button.

00:30:31.440 --> 00:30:35.310
As these constraints change,
if you set the constraint on

00:30:35.310 --> 00:30:38.730
that second button to move,
the first one's just going

00:30:38.730 --> 00:30:40.030
to line up on its own.

00:30:40.040 --> 00:30:42.670
You can also set up minimums and
maximums and things like that.

00:30:42.710 --> 00:30:46.560
LayoutConstraint.h defines the relations,
so you can do less than or equal to,

00:30:46.650 --> 00:30:48.480
equal or greater than or equal to.

00:30:49.140 --> 00:30:51.980
It also is going to define
a bunch of attributes,

00:30:52.030 --> 00:30:56.690
so you can do left, right, top, bottom,
leading and trailing space.

00:30:56.780 --> 00:30:59.520
You can do heights, center, X, center, Y.

00:30:59.520 --> 00:31:01.600
You can also line up on baselines.

00:31:01.600 --> 00:31:04.630
So, for instance,
text fields vend their text

00:31:04.630 --> 00:31:08.320
baseline out as one of the
attributes you can line up on.

00:31:16.970 --> 00:31:19.540
Constraints are also
there's a visual format.

00:31:19.540 --> 00:31:21.550
You can do all of this in IB, by the way.

00:31:21.650 --> 00:31:23.700
If you've got your nib up
and you're clicking around,

00:31:23.700 --> 00:31:27.040
you'll see constraints
show up in the inspector.

00:31:27.040 --> 00:31:29.340
You can set the relationships
up between two objects,

00:31:29.340 --> 00:31:31.310
and it will emit those
directly into the nib.

00:31:31.320 --> 00:31:33.190
They'll get loaded and set
up for you automatically.

00:31:33.700 --> 00:31:36.420
There's also a visual format,
which is really easy to use.

00:31:36.420 --> 00:31:40.400
It returns an NSArray of constraints,
because that one constraint that we

00:31:40.400 --> 00:31:42.700
did earlier just describes one thing.

00:31:42.700 --> 00:31:44.730
But you can set the
visual format up to say,

00:31:44.760 --> 00:31:47.110
well,
this view is 20 points from this other

00:31:47.110 --> 00:31:51.160
view and 30 points from this view,
and it has a minimum width of 60.

00:31:51.160 --> 00:31:53.070
You can set up their optional.

00:31:53.070 --> 00:31:55.850
There's a whole
evaluation hierarchy here.

00:31:55.850 --> 00:31:59.260
You can make them prioritize
so that certain constraints

00:31:59.260 --> 00:32:03.400
must be satisfied at a greater
priority than other constraints.

00:32:03.420 --> 00:32:06.890
The maximums and minimums
are really interesting,

00:32:07.350 --> 00:32:11.750
because you'll be able to do things
like handle localization by setting

00:32:11.750 --> 00:32:14.190
constraints on your text views.

00:32:14.220 --> 00:32:16.360
And then as the strings
get longer or shorter,

00:32:16.360 --> 00:32:18.980
all of the constraints that
are bound to that text view are

00:32:18.980 --> 00:32:20.390
going to go ahead and update.

00:32:20.390 --> 00:32:24.250
So the buttons will always be in the
right place as your localizations change.

00:32:24.260 --> 00:32:28.150
It'll be a really, really handy way to be
able to do localizations.

00:32:28.220 --> 00:32:30.280
And it can apply to any two views.

00:32:30.700 --> 00:32:33.470
Those two views don't have
to be in the same place.

00:32:33.540 --> 00:32:36.140
They don't have to be in the
same direct sub-view hierarchy.

00:32:36.140 --> 00:32:37.240
They don't even have to be peers.

00:32:37.250 --> 00:32:38.940
They just have to have a common ancestor.

00:32:38.940 --> 00:32:43.170
So when you add the constraint
to the view hierarchy,

00:32:43.250 --> 00:32:46.130
you have to add that constraint
to the nearest common ancestor.

00:32:46.260 --> 00:32:50.210
If you do this in IB,
it's all taken care of.

00:32:50.930 --> 00:32:55.840
The Auto Layout session is,
there are several, but the UI kit one,

00:32:55.840 --> 00:32:59.230
the introduction to
Auto Layout for iOS and OS X.

00:32:59.340 --> 00:33:05.000
State restoration,
another thing coming to iOS from OS X.

00:33:05.100 --> 00:34:28.700
[Transcript missing]

00:34:28.730 --> 00:34:29.700
Right.

00:34:29.820 --> 00:34:32.400
So user hit the home button.

00:34:32.450 --> 00:34:35.370
All of these things got their
little opportunity to encode

00:34:35.370 --> 00:34:38.720
a bunch of Restorable State,
everything wanders off,

00:34:38.720 --> 00:34:40.170
and the app gets killed.

00:34:40.510 --> 00:34:41.740
User relaunches the app.

00:34:41.850 --> 00:34:44.430
We're going to start restoring state.

00:34:44.650 --> 00:34:47.700
What happens here is this
delegate method gets called,

00:34:47.700 --> 00:34:52.750
"Application will finish launching with
options." It's a new method in iOS 6,

00:34:52.990 --> 00:34:56.000
and if you're using state restoration,
what you're going to want to do

00:34:56.000 --> 00:34:58.540
is take most of the things that
you were doing and did finish

00:34:58.540 --> 00:35:00.270
launching and move them up.

00:35:00.350 --> 00:35:03.560
So if you were initializing things
that are required for your apps,

00:35:03.590 --> 00:35:05.410
run, move it into,
"Will finish launching with

00:35:05.470 --> 00:35:08.760
options," if you want to be
able to use state restoration.

00:35:08.960 --> 00:35:11.010
Once we've gone through that,
just before we call

00:35:11.010 --> 00:35:14.570
didFinishLaunchingWithOptions,
we're going to run through and

00:35:14.570 --> 00:35:19.130
start asking you to create view
controllers based on identifiers

00:35:19.170 --> 00:35:20.290
and identifier components.

00:35:20.340 --> 00:35:21.590
You can think of them like key paths.

00:35:21.720 --> 00:35:25.610
ViewControllerWithRestorationIdentifierP
athCoder is going to get called.

00:35:25.610 --> 00:35:28.630
It's a class method that will get
called and ask you to return a view

00:35:28.720 --> 00:35:30.880
controller for this particular thing.

00:35:30.880 --> 00:35:32.760
Here's the coder we used to write it out.

00:35:33.240 --> 00:35:35.580
And then those view controllers
will get called with

00:35:35.580 --> 00:35:37.440
DecodeRestorableStateWithCoder.

00:35:37.440 --> 00:35:41.550
And that's where you can pull out all
of that stuff you put in in the first

00:35:41.660 --> 00:35:44.140
place when the app started to go down.

00:35:46.430 --> 00:35:48.740
State Preservation and
Restoration sessions,

00:35:48.790 --> 00:35:51.320
Saving and Restoring Applications,
State on iOS.

00:35:51.330 --> 00:35:54.640
This is a way to be able to do things
in a really fine-grained fashion.

00:35:54.700 --> 00:35:58.080
One of the really cool things about
the way State Preservation is working

00:35:58.210 --> 00:36:01.660
in iOS with view controllers is we're
doing a bunch of this stuff for you.

00:36:01.710 --> 00:36:05.200
So, Table View Controller is going to
go ahead and scroll away its scroll

00:36:05.200 --> 00:36:06.770
position and things like that.

00:36:06.810 --> 00:36:10.050
So, Navigation Controller is going
to tell you about the navigation

00:36:10.160 --> 00:36:14.060
stack that's been pushed onto it by
giving you those component paths.

00:36:14.230 --> 00:36:17.650
So, we're doing a bunch of
work on your behalf.

00:36:17.740 --> 00:36:20.620
What we'd like you to be able to do is
concentrate on the state restoration

00:36:20.620 --> 00:36:23.840
bits that are unique to your view
controllers and your applications.

00:36:23.860 --> 00:36:26.690
This should make it a lot easier
to be able to get the user back

00:36:26.690 --> 00:36:29.870
to that state where they left off
right after the app got killed.

00:36:31.730 --> 00:36:35.800
One of the things that we talk
about a lot in the hallway is

00:36:35.860 --> 00:36:40.560
what makes a great user interface.

00:36:40.810 --> 00:36:48.400
User interfaces are --
they're kind of funny things.

00:36:48.520 --> 00:36:51.470
Great UI design -- somebody said
this on the hallway the other day.

00:36:51.610 --> 00:36:55.980
Great UI design allows expression
and nuance in how the user

00:36:55.980 --> 00:36:58.800
interacts with your application.

00:36:58.810 --> 00:36:58.810
And

00:36:59.630 --> 00:37:01.440
It's a neat statement.

00:37:01.460 --> 00:37:05.440
It's a little bit about just how
you're able to give the user a

00:37:05.440 --> 00:37:08.170
really great user experience,
but we also want you guys to be

00:37:08.170 --> 00:37:11.580
able to express the things that
are important in your application

00:37:11.580 --> 00:37:13.390
in a really effective manner.

00:37:13.470 --> 00:37:17.540
Great UI design allows expression
and nuance in how the user

00:37:17.540 --> 00:37:20.200
interacts with your application.

00:37:20.290 --> 00:37:21.800
This is running on my iPad.

00:37:21.800 --> 00:37:22.860
It is a UI label.

00:37:22.920 --> 00:37:24.400
It is an NS attributed string.

00:37:24.400 --> 00:37:26.520
It is one label.

00:37:26.950 --> 00:37:30.190
We are bringing styled text to iOS.

00:37:36.420 --> 00:37:39.710
Getting piped all the
way through our API.

00:37:39.800 --> 00:37:44.290
So if you go look at UILabel,
you'll see set attributed text.

00:37:44.380 --> 00:37:46.240
You can do this on UILabel.

00:37:46.450 --> 00:37:50.580
You can do it on all the strings
that you feed to UIPickerView.

00:37:51.010 --> 00:37:56.710
UITableViewCell has
attributed text setters now.

00:37:57.100 --> 00:39:04.000
[Transcript missing]

00:39:05.320 --> 00:39:07.930
We support a bunch of
different attributes.

00:39:07.930 --> 00:39:12.760
UI kit NSAttributedString.h is defining
things like the font attribute,

00:39:12.760 --> 00:39:18.050
paragraph styles, foreground color,
background color, baseline offset,

00:39:18.050 --> 00:39:21.090
strikethroughs, underlines, shadows.

00:39:21.200 --> 00:39:23.230
You'll be able to do all
kinds of things with this.

00:39:37.830 --> 00:39:37.830
We now also have a string drawing
category on NSAttributedString.

00:39:37.830 --> 00:39:37.830
Size, draw at point, and draw on rect are
the really basic ones.

00:39:37.830 --> 00:39:37.830
Just go ahead and splat this attributed
string onto the screen at this point.

00:39:38.530 --> 00:39:42.150
There's also some more
sophisticated string drawing API,

00:39:42.150 --> 00:39:47.020
Draw with Rect Options Context and
Bounding Rect with Size Options Context.

00:39:47.120 --> 00:39:48.900
The former actually does the drawing.

00:39:48.950 --> 00:39:52.870
The latter will tell you how
big a particular chunk of

00:39:52.870 --> 00:39:56.160
rendering has turned out to be.

00:39:56.160 --> 00:39:59.290
These are really,
really powerful for being able

00:39:59.290 --> 00:40:01.370
to draw directly into images.

00:40:01.400 --> 00:40:06.450
So the options are things like
truncating the last visible line,

00:40:06.690 --> 00:40:07.020
right?

00:40:07.020 --> 00:40:09.180
If it's going to hit the end
and you're not going to be able

00:40:09.180 --> 00:40:12.660
to render the entire string,
we'll go ahead and put an ellipsis there.

00:40:12.820 --> 00:40:15.500
Things like line fragment origins
to be able to find exactly

00:40:15.590 --> 00:40:17.290
where things are starting.

00:40:17.290 --> 00:40:21.100
Font letting and device
metrics are also used.

00:40:21.100 --> 00:40:24.700
And that string drawing context is
an object that's basically telling

00:40:24.700 --> 00:40:27.760
you -- that's your opportunity
to tell us exactly the parameters

00:40:27.760 --> 00:40:28.960
of how you want it to draw.

00:40:28.960 --> 00:40:32.280
So things like the minimum scale
factor and tracking adjustment.

00:40:32.280 --> 00:40:33.400
Or the actual scale factor.

00:40:33.400 --> 00:40:36.740
And actual tracking
adjustment for the context.

00:40:36.740 --> 00:40:41.240
And the total bounds of how
big you want that drawing.

00:40:41.240 --> 00:40:45.600
So this is really, really powerful stuff.

00:40:45.630 --> 00:40:48.860
And hopefully it's going to be
able to help you guys write really

00:40:48.860 --> 00:40:53.040
fantastic styled text apps that really
express what you want to the user.

00:40:53.040 --> 00:40:55.890
So introduction to
attributed strings for iOS.

00:40:55.970 --> 00:40:58.360
The advanced attributed strings talk.

00:40:58.360 --> 00:41:03.380
So we've got text engineers from UI kit
who are going to be here to tell you

00:41:03.380 --> 00:41:05.400
all about all about attributed strings.

00:41:08.500 --> 00:41:09.640
There are a lot of other sessions.

00:41:09.640 --> 00:41:11.800
There's also a lot of
other things in UIKit,

00:41:11.800 --> 00:41:14.860
things like UI Activity View Controller,
which is a way to be able to

00:41:14.860 --> 00:41:18.210
take advantage of all of the new
social stuff that's going on,

00:41:18.290 --> 00:41:22.740
including as well as doing all of
the things you could do before,

00:41:22.740 --> 00:41:26.870
like mailing something to someone
or tweeting it or printing it,

00:41:26.870 --> 00:41:28.140
things like that.

00:41:28.340 --> 00:41:29.860
Please take a look through the headers.

00:41:29.860 --> 00:41:31.800
Lots of other sessions going on.

00:41:31.800 --> 00:41:36.140
The social stuff, new social services,
the Twitter framework has now been

00:41:36.140 --> 00:41:38.040
brought into the social framework.

00:41:38.040 --> 00:41:41.260
So there's Facebook integration
for Chinese users.

00:41:41.260 --> 00:41:43.680
We've got Sina Weibo and a
number of other social things

00:41:43.680 --> 00:41:44.920
that are going on there.

00:41:44.920 --> 00:41:46.580
It works with Apple accounts.

00:41:46.580 --> 00:41:49.920
So all of the things that we did for
Twitter integration to be able to make

00:41:49.950 --> 00:41:53.510
it easy for you guys to tweet from your
applications without having to handle

00:41:53.510 --> 00:41:56.600
all of the authentication business,
we're doing for all of these

00:41:56.600 --> 00:41:58.200
other services now as well.

00:41:58.200 --> 00:42:00.050
So you don't have to
handle any of that stuff.

00:42:01.630 --> 00:42:03.240
Game Center.

00:42:03.240 --> 00:42:06.120
You heard Scott talk about some of this
at the end of the keynote a little bit.

00:42:06.300 --> 00:42:08.160
Challenges are available.

00:42:08.330 --> 00:42:11.340
You'll be able to send challenges not
just from the Game Center application,

00:42:11.340 --> 00:42:13.520
but from within your
application yourselves.

00:42:13.540 --> 00:42:16.060
There's a new consolidated
view controller,

00:42:16.060 --> 00:42:18.780
and you'll get some control
over the authentication

00:42:18.890 --> 00:42:20.510
API for Game Center as well.

00:42:20.580 --> 00:42:23.800
There are, I think,
four or five Game Center sessions.

00:42:23.930 --> 00:42:26.890
Please check your schedules if you're
using Game Center to go find out.

00:42:26.890 --> 00:42:28.330
There's a lot of new stuff here.

00:42:31.080 --> 00:42:43.090
There's a new map application.

00:42:43.170 --> 00:42:43.390
You'll see maps look fantastic
in all of your apps when

00:42:43.410 --> 00:42:43.520
they're brought in from MapKit.

00:42:43.520 --> 00:42:43.830
But there are now new ways to launch
maps and indicate points of interest.

00:42:43.830 --> 00:42:44.130
And also there's new APIs for being
able to write transit apps that will

00:42:44.140 --> 00:42:44.490
interact with the map application.

00:42:44.620 --> 00:42:45.790
PassKit.

00:42:45.790 --> 00:42:49.420
You saw PassBook as well in the demo.

00:42:49.690 --> 00:43:00.680
PassKit is a way to be able to have
downloadable cards for your applications.

00:43:00.720 --> 00:43:00.720
It has coupons and boarding passes,
event tickets, things like that.

00:43:00.720 --> 00:43:00.720
They get pushed to the device.

00:43:00.720 --> 00:43:00.720
They're signed.

00:43:00.720 --> 00:43:00.720
There's an entire API both
for e-mail and e-mail.

00:43:00.740 --> 00:43:05.150
You can use the API both for interacting
with PassBook cards on the device as well

00:43:05.180 --> 00:43:09.390
as all of the server API that you would
have to implement in order to support it.

00:43:09.810 --> 00:43:12.080
There are a couple of
talks about that this week.

00:43:12.130 --> 00:43:14.260
Please go to those as well.

00:43:14.260 --> 00:43:15.300
In-app purchases.

00:43:15.410 --> 00:43:17.860
There are new aspects
to in-app purchases.

00:43:17.860 --> 00:43:21.760
You'll be able to track downloads
and payment transactions.

00:43:21.890 --> 00:43:30.360
You'll be able to do content purchase
right from within your application.

00:43:30.360 --> 00:43:30.360
And Apple can host your content.

00:43:30.360 --> 00:43:30.360
So if you're going to
be doing things online,

00:43:30.360 --> 00:43:30.360
Apple will be able to host your content.

00:43:30.360 --> 00:43:33.480
your content.

00:43:34.590 --> 00:43:37.460
EventKit,
there are new APIs in EventKit to

00:43:37.460 --> 00:43:40.940
get proximity information
and time-based alarms,

00:43:40.940 --> 00:43:45.520
you know, proximity information for your
reminders and things like that.

00:43:45.600 --> 00:43:48.580
There's also a really
great data privacy talk,

00:43:48.580 --> 00:43:52.120
and if you're interacting
with core location reminders,

00:43:52.280 --> 00:43:56.710
address book, photos, or EventKit,
we're taking new steps in order

00:43:56.840 --> 00:44:00.630
to make sure that the user gets
to control exactly when your

00:44:00.630 --> 00:44:03.420
app gets access to their data,
right?

00:44:03.420 --> 00:44:06.510
We're trying to make it very clear about
what's happening and make it easier

00:44:06.510 --> 00:44:10.280
for you guys to know exactly when the
user's allowed access to their data.

00:44:10.280 --> 00:44:13.630
There are new messages for
users so that you can find out,

00:44:13.660 --> 00:44:18.340
so that you can provide a reason why
you need this information from the user.

00:44:18.340 --> 00:44:22.560
And also there's some API for when
to present and not present UI.

00:44:22.560 --> 00:44:25.030
So if you've been denied
access to something and you

00:44:25.030 --> 00:44:28.060
just want to hide a button,
there's API for that as well.

00:44:28.060 --> 00:44:31.080
There's this data privacy
session is happening.

00:44:31.080 --> 00:44:33.390
I think it's tomorrow,
but check yourself.

00:44:33.400 --> 00:44:35.390
You can find out more about
that in the next few weeks.

00:44:35.460 --> 00:44:36.710
So if you're interested in that,
check yourself.

00:44:36.830 --> 00:44:37.860
And if you're interested
in the next few weeks,

00:44:37.860 --> 00:44:38.360
check yourself.

00:44:38.360 --> 00:44:39.420
And if you're interested
in the next few weeks,

00:44:39.420 --> 00:44:39.890
check yourself.

00:44:39.980 --> 00:44:40.980
There are a number of
related sessions this week.

00:44:40.980 --> 00:44:42.180
Building concurrent
user interfaces in iOS.

00:44:42.180 --> 00:44:44.000
Anything you can do to not block
the main thread is a great idea,

00:44:44.010 --> 00:44:45.490
so we've got some engineers
talking about that.

00:44:45.630 --> 00:44:48.280
Keyboard input in iOS,
if you're doing any kind of sophisticated

00:44:48.300 --> 00:44:50.950
custom keyboards and things like that,
we'll have an engineer

00:44:50.950 --> 00:44:52.020
talking about that.

00:44:52.020 --> 00:44:54.390
Enhancing user experience
with scroll views.

00:44:54.500 --> 00:44:57.340
It's the Josh and Eliza show, again.

00:44:57.340 --> 00:44:58.800
Go see that.

00:44:58.880 --> 00:45:00.430
That is a fantastic talk every year,
and it's everything about, you know,

00:45:00.430 --> 00:45:01.100
real-time data privacy.

00:45:01.100 --> 00:45:02.100
And I'm sure you'll be able
to find out more about that.

00:45:02.100 --> 00:45:05.630
So we're talking about, you know,
really advanced techniques in

00:45:05.630 --> 00:45:07.640
using scroll views effectively.

00:45:07.660 --> 00:45:10.620
Up and running, making a great impression
with every launch.

00:45:10.670 --> 00:45:15.230
Got a couple of UI kit and Siri engineers
talking about how to get through

00:45:15.230 --> 00:45:20.250
application did finish launching as fast
as possible and the kinds of things to

00:45:20.260 --> 00:45:25.080
do to really get a great impression from
your app every time the user launches it.

00:45:25.130 --> 00:45:27.360
Polishing your interface rotations.

00:45:27.390 --> 00:45:32.040
Rotation is -- the rotation experience
is a key part of being -- of using iOS.

00:45:32.110 --> 00:45:35.460
It keeps the illusion of how
fluid everything really is.

00:45:35.510 --> 00:45:38.000
Please go see that if you're
doing anything with rotations.

00:45:38.060 --> 00:45:40.130
Building advanced gesture recognizers,
right?

00:45:40.160 --> 00:45:43.400
Nobody wants to be overriding begin and
end touches and all that other stuff.

00:45:43.450 --> 00:45:45.640
Gesture recognizers are really powerful.

00:45:45.780 --> 00:45:46.820
We've got to talk about that.

00:45:46.910 --> 00:45:49.900
And internationalization tips and tricks,
right?

00:45:50.110 --> 00:45:52.800
Tim said to get your
apps ready for China.

00:45:52.990 --> 00:45:53.820
It's not just China.

00:45:53.820 --> 00:45:56.970
It's every country that we release in,
you guys have an opportunity

00:45:56.970 --> 00:45:58.100
to sell your apps in.

00:45:58.100 --> 00:46:01.950
And if you're going to be doing that,
internationalization is a key part of it.

00:46:01.980 --> 00:46:02.060
Okay.

00:46:02.060 --> 00:46:02.080
All right.

00:46:02.100 --> 00:46:02.600
Thank you.

00:46:02.620 --> 00:46:05.440
More information about all of this stuff,
Mr.

00:46:05.440 --> 00:46:07.680
Jake Behrens,
our UI frameworks evangelist,

00:46:07.680 --> 00:46:09.100
would be happy to talk to you.

00:46:09.120 --> 00:46:11.640
There's documentation online
at developer.apple.com.

00:46:11.640 --> 00:46:12.750
The forums are open.