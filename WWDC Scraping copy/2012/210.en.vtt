WEBVTT

00:00:10.970 --> 00:00:12.910
Welcome to iOS accessibility.

00:00:13.210 --> 00:00:14.090
My name is Chris Fleizach.

00:00:14.150 --> 00:00:15.860
I'm on the iOS accessibility team.

00:00:15.950 --> 00:00:19.110
Today I want to talk about how
do you take your app to the next

00:00:19.520 --> 00:00:21.580
level in terms of accessibility.

00:00:21.850 --> 00:00:26.140
I'm going to be saying the word
accessibility a lot in this presentation.

00:00:26.210 --> 00:00:27.600
So what do I mean when I say this word?

00:00:27.600 --> 00:00:29.790
It can have a lot of different meanings.

00:00:29.800 --> 00:00:33.530
Mainly I'm talking about using
technology to overcome challenges.

00:00:33.710 --> 00:00:36.780
So things like computer
controlled wheelchairs,

00:00:36.830 --> 00:00:41.650
assistive communication devices
like ProLogo to go for the iPad,

00:00:41.650 --> 00:00:44.990
screen readers,
so people with low vision and

00:00:45.050 --> 00:00:49.350
blindness can use computers,
and of course there's many,

00:00:49.350 --> 00:00:50.790
many other examples of this.

00:00:51.690 --> 00:00:55.460
On iOS we have a number of
accessibility features that are

00:00:55.460 --> 00:01:00.000
designed to help people use a device
in the same way that everyone does.

00:01:00.040 --> 00:01:03.600
So VoiceOver is one of
our flagship products.

00:01:03.600 --> 00:01:06.340
It allows people who are blind,
have low vision to use

00:01:06.400 --> 00:01:07.840
a touch screen device.

00:01:07.840 --> 00:01:11.360
It works by changing the gestures
that are used so that instead

00:01:11.360 --> 00:01:14.770
of a touch to activate model,
you have a touch to speak model.

00:01:14.870 --> 00:01:19.170
So this provides a safe environment
to explore the phone without worrying

00:01:19.170 --> 00:01:21.160
about something that will happen.

00:01:22.260 --> 00:01:23.640
We also have Zoom.

00:01:23.840 --> 00:01:29.280
Zoom allows you to use three finger
gestures to zoom in and to pan around

00:01:29.670 --> 00:01:34.160
so you can get in close on text and
read things if you have low vision.

00:01:34.630 --> 00:01:37.540
In iOS 5.0 we added assistive touch.

00:01:37.540 --> 00:01:41.590
Assistive touch allows access
to all the hardware buttons,

00:01:41.680 --> 00:01:45.180
multi-finger gestures,
even creating custom gestures

00:01:45.630 --> 00:01:50.080
through either a hardware device
or if you only have access to

00:01:50.080 --> 00:01:54.530
a single finger or a stylus,
you can also drive these gestures.

00:01:54.900 --> 00:04:05.100
[Transcript missing]

00:04:05.930 --> 00:04:09.830
We've also added some enhancements
that's built upon previous work.

00:04:09.950 --> 00:04:12.760
So custom vibrations was added in 5.0.

00:04:12.860 --> 00:04:15.350
It only applied to phone
calls and FaceTime,

00:04:15.350 --> 00:04:15.760
though.

00:04:16.090 --> 00:04:18.150
In 6.0, it will apply to everything.

00:04:18.290 --> 00:04:22.430
So if you want a custom vibration
for a text message from your wife,

00:04:22.710 --> 00:04:25.320
for example,
you can set that and have it play

00:04:25.320 --> 00:04:28.040
specifically just for a text message.

00:04:28.040 --> 00:04:32.950
And that applies to calendar alerts,
Facebook items, reminders,

00:04:32.950 --> 00:04:35.490
and the whole list of notifications.

00:04:36.330 --> 00:04:39.600
VoiceOver and Zoom finally
worked together.

00:04:39.600 --> 00:04:43.540
Before, there was conflicts between
the gestures being used.

00:04:43.540 --> 00:04:47.560
We've overcome some of those so that
you can use them at the same time.

00:04:48.190 --> 00:04:51.730
and we made a number of
enhancements to SpeakSelection,

00:04:51.800 --> 00:04:54.600
which I want to show you now.

00:04:54.710 --> 00:04:57.100
SpeakSelection was introduced in 5.0.

00:04:57.180 --> 00:04:59.590
It allows you to select some
text and have it spoken.

00:04:59.700 --> 00:05:01.300
We made two enhancements
that I want to show.

00:05:01.340 --> 00:05:05.260
One is much better support
for multiple languages.

00:05:05.460 --> 00:05:10.680
So I have the same sentence
in three languages,

00:05:10.680 --> 00:05:14.130
English, Arabic, and Greek.

00:05:14.360 --> 00:05:15.170
And now if I want to speak them,

00:05:16.050 --> 00:05:19.660
Speak selection tells me that there
are English and two other languages

00:05:19.660 --> 00:05:21.430
available and when I select those.

00:05:21.440 --> 00:05:26.060
The revolutionary iPhone also includes
an equally revolutionary screen reader.

00:05:26.160 --> 00:05:32.810
iPhone is also included in the
revolutionary screen reader.

00:05:32.900 --> 00:05:37.690
The revolutionary phone also
includes a six-way revolutionary

00:05:37.690 --> 00:05:40.600
program for computer recognition.

00:05:40.990 --> 00:05:45.140
So, can automatically detect
languages based on script and

00:05:45.140 --> 00:05:47.740
other identifying information.

00:05:47.740 --> 00:05:51.560
If there are ambiguous languages,
we look around and see what

00:05:51.560 --> 00:05:54.120
other languages you might
want to speak at any time.

00:05:54.230 --> 00:05:57.240
So, much better smarts for
international support.

00:05:57.300 --> 00:06:01.200
We've also added
word-by-word highlighting.

00:06:01.350 --> 00:06:04.770
So, if I go to...

00:06:05.750 --> 00:06:11.070
Turn on highlight words in the
speak selection menu and come back.

00:06:13.250 --> 00:06:17.160
When we speak these items now,
the revolutionary iPhone also includes

00:06:17.220 --> 00:06:19.510
an equally revolutionary screen reader.

00:06:20.030 --> 00:06:26.400
iPhone Thauria yatadoumenou aydon
qari ishashati Thauria ala hadsa wa.

00:06:26.400 --> 00:06:31.200
To epanastatiko telephono perilambani
episis ena eksisu epanastatiko

00:06:31.200 --> 00:06:34.380
programma anagnosis othonis.

00:06:34.780 --> 00:06:38.560
So I'm sure you got all of that,
but just some of the enhancements

00:06:38.610 --> 00:06:41.540
that we've added for speak selection.

00:06:47.550 --> 00:06:52.280
So let's talk about what the meat
of this presentation is about,

00:06:52.430 --> 00:06:54.470
and that's really using

00:06:54.910 --> 00:06:59.100
UI accessibility to make your app
more accessible for voiceover.

00:06:59.210 --> 00:07:00.700
Now, why is this important?

00:07:00.880 --> 00:07:05.080
VoiceOver is a special application.

00:07:05.300 --> 00:07:09.300
VoiceOver is used to overcome
a very challenging difficulty,

00:07:09.300 --> 00:07:14.540
blindness, which made more so by the
touchscreen in and of itself.

00:07:14.650 --> 00:07:18.250
So,
making your app accessible means that you

00:07:18.250 --> 00:07:23.150
implement some API and a VoiceOver user
can get more information out of your

00:07:23.150 --> 00:07:25.440
app and know how to use it effectively.

00:07:25.540 --> 00:07:27.510
So, we're going to be talking
about the basic API,

00:07:27.750 --> 00:07:31.140
how do you do the most important
things to make your app work well.

00:07:31.300 --> 00:07:33.420
We're going to be talking
about the new API for the

00:07:33.460 --> 00:07:35.740
things that we've added in 6.0.

00:07:35.850 --> 00:07:38.740
And then I want to have a
deeper dive into some things

00:07:38.740 --> 00:07:39.740
that you may not have known.

00:07:39.740 --> 00:07:42.320
This is the fourth year
that we've done this.

00:07:42.420 --> 00:07:44.800
Some of you might be very
familiar with the API,

00:07:44.910 --> 00:07:49.390
and I think there's some things
that you'll be able to learn.

00:07:50.230 --> 00:07:51.750
So how does this work?

00:07:51.870 --> 00:07:55.100
VoiceOver is running on
iOS when you turn it on.

00:07:55.660 --> 00:07:58.900
And it intercepts all gestures.

00:07:59.100 --> 00:08:03.190
So when I touch somewhere, for example,
I touch somewhere in notes,

00:08:03.190 --> 00:08:07.860
VoiceOver intercepts that and says
what's the element at this point?

00:08:07.910 --> 00:08:12.740
And it does that by going through
UI accessibility and then asking the app.

00:08:12.740 --> 00:08:16.680
The app gathers some information
about what's at a specific point

00:08:17.300 --> 00:08:21.740
and then bundles that up and
sends it back over to VoiceOver.

00:08:21.840 --> 00:08:25.480
VoiceOver is then able to take that
and transform it into synthesized

00:08:25.480 --> 00:08:29.380
speech or maybe Braille output
or some other alternative output

00:08:29.390 --> 00:08:31.060
that's appropriate for the user.

00:08:34.210 --> 00:08:36.240
So how do we add
accessibility to your app?

00:08:36.300 --> 00:08:39.090
The good news is a lot
of it comes for free.

00:08:39.150 --> 00:08:42.080
So if you're using UI kit
controls to do things,

00:08:42.080 --> 00:08:44.250
most of it is just going to work.

00:08:44.400 --> 00:08:48.050
So your job in that case
is mostly to add labels.

00:08:48.220 --> 00:08:52.860
Things that are images or buttons
that have images inside of them.

00:08:52.900 --> 00:08:57.390
All you need to do is set a label most of
the time and things will start to work.

00:08:58.490 --> 00:09:03.140
So most of this information is
conveyed through attributes.

00:09:03.330 --> 00:09:07.900
Attributes are the core
of an accessibility API.

00:09:07.990 --> 00:09:10.110
Basically,
they allow you to encode certain

00:09:10.110 --> 00:09:13.600
information about an object so
the voiceover knows what to do.

00:09:13.680 --> 00:09:16.710
So, for example,
we have a UI image view here.

00:09:16.820 --> 00:09:19.560
By default,
this has some attributes built in.

00:09:19.730 --> 00:09:22.580
Specifically, we know the file name.

00:09:22.700 --> 00:09:25.130
So here, you know,
voiceover might have seen the

00:09:25.180 --> 00:09:29.500
image view and known that the file
name is Apple logo 512 by 512.

00:09:29.570 --> 00:09:32.010
But obviously,
that's not a great user experience

00:09:32.280 --> 00:09:33.840
if that's what they're hearing.

00:09:33.920 --> 00:09:37.540
So instead, it's up to you to set the
appropriate attribute,

00:09:37.580 --> 00:09:39.220
in this case, the label for it.

00:09:39.420 --> 00:09:42.490
And the label might be
something like Apple logo.

00:09:44.890 --> 00:09:49.810
The two most important attributes
in the API address the fundamental

00:09:49.900 --> 00:09:52.400
questions about is your app accessible.

00:09:52.400 --> 00:09:54.930
One,
can a VoiceOver user reach an element?

00:09:55.170 --> 00:09:58.300
Can they touch and have it spoken?

00:09:58.350 --> 00:10:00.940
And then two, what will be spoken?

00:10:01.000 --> 00:10:03.760
The first question is answered
in is accessibility element.

00:10:03.760 --> 00:10:07.450
You return yes, that means VoiceOver will
be able to see it.

00:10:07.560 --> 00:10:10.930
The second question is answered
with accessibility label.

00:10:11.100 --> 00:10:14.410
Accessibility label is a string
that you can return that will be the

00:10:14.410 --> 00:10:17.310
textual representation of the object.

00:10:17.570 --> 00:10:20.480
By default,
these are filled in for UIKit controls,

00:10:20.480 --> 00:10:25.880
so a UI label automatically returns
its text for the accessibility label.

00:10:26.810 --> 00:10:29.260
Some other common attributes,
accessibility hint is a good

00:10:29.270 --> 00:10:32.550
way to provide a little bit more
information about what to do if the

00:10:32.630 --> 00:10:34.260
context is not completely clear.

00:10:34.510 --> 00:10:35.790
It's optional.

00:10:35.920 --> 00:10:41.220
And accessibility traits provide you with
a way to control what are the behaviors,

00:10:41.300 --> 00:10:45.060
the roles, other important information
about this object.

00:10:45.180 --> 00:10:46.660
Is it selected?

00:10:46.660 --> 00:10:48.770
Is it a link or a button?

00:10:49.870 --> 00:10:51.370
So a little bit more about the traits.

00:10:51.590 --> 00:10:55.040
Say we have a screen
that looks like this.

00:10:55.040 --> 00:10:59.840
At the top we have an element that might
be labeled with a static text trait.

00:11:00.180 --> 00:11:03.400
In the middle, we have an element that
has the image trait.

00:11:03.540 --> 00:11:06.220
Towards the bottom, there is a button.

00:11:06.220 --> 00:11:08.840
And at the bottom,
very bottom is a slider which

00:11:09.080 --> 00:11:11.040
would have an adjustable trait.

00:11:11.210 --> 00:11:16.140
So there's about 16 or 15 or so
traits that allow you to decide how

00:11:16.140 --> 00:11:19.360
VoiceOver will interact with something.

00:11:21.410 --> 00:11:23.640
So how do we go about
and add these attributes?

00:11:23.680 --> 00:11:26.220
Obviously there's some
objectives to see methods,

00:11:26.220 --> 00:11:28.740
but you can also add them
through interface builder.

00:11:28.820 --> 00:11:31.830
So in the inspector pane,
you might see a screen that

00:11:31.830 --> 00:11:35.280
looks a little bit like this,
and all the information we talked

00:11:35.360 --> 00:11:37.000
about is encoded here as well.

00:11:37.040 --> 00:11:39.920
Is accessibility element
corresponds to this checkbox?

00:11:40.110 --> 00:11:43.640
Accessibility label is the label,
hint the hint,

00:11:43.890 --> 00:11:48.490
and then this array of traits where
you can select what's appropriate.

00:11:51.140 --> 00:11:54.650
So interface builder is great if you
sort of have a static design or a

00:11:54.660 --> 00:11:56.640
button just is there all the time.

00:11:56.640 --> 00:11:59.520
But if you have a little bit
more dynamic of an interface

00:11:59.520 --> 00:12:04.650
or you're doing things in code,
you may need to set values in code.

00:12:04.660 --> 00:12:06.350
So one way is to use the setters.

00:12:06.380 --> 00:12:09.100
Say, for example,
we have a my control object.

00:12:09.180 --> 00:12:11.940
By default,
things that are just UI controls

00:12:11.940 --> 00:12:14.060
don't have any accessibility.

00:12:14.060 --> 00:12:17.490
So you need to go in there and set
is accessibility element yes and set

00:12:17.490 --> 00:12:19.760
the appropriate accessibility label.

00:12:20.300 --> 00:12:21.540
In this case, maybe it's a play button.

00:12:24.140 --> 00:12:27.960
If you have objects that change
their value or change their label

00:12:27.960 --> 00:12:31.500
depending on your data model,
you may need to override.

00:12:31.610 --> 00:12:33.240
You don't just have to use the setters.

00:12:33.460 --> 00:12:37.540
You can override and say, yes,
this is an accessibility element

00:12:37.540 --> 00:12:41.720
and my accessibility label is
something that's appropriate.

00:12:43.560 --> 00:12:50.210
Accessibility attributes,
that will take you 85% of the way there.

00:12:50.260 --> 00:12:53.030
Most of the work you'll do will
just be setting attributes here

00:12:53.270 --> 00:12:56.740
and there and your apps are going
to become a lot more accessible.

00:12:56.790 --> 00:13:00.510
Now, sometimes you also need to tell
VoiceOver when things happen.

00:13:00.770 --> 00:13:03.560
And these are done through
accessibility notifications.

00:13:03.700 --> 00:13:06.000
So when a few things
change on the screen,

00:13:06.230 --> 00:13:08.230
you need to tell VoiceOver to update.

00:13:08.330 --> 00:13:12.490
So if we look at this example in Clock,
when you press the edit button,

00:13:12.490 --> 00:13:13.680
what do you get?

00:13:13.750 --> 00:13:16.530
Well,
there's a few new elements on the screen.

00:13:16.540 --> 00:13:19.140
A delete switch,
something disappears and so on.

00:13:19.600 --> 00:13:22.440
In that case, you need to tell
VoiceOver to update itself.

00:13:22.440 --> 00:13:24.070
Just a few things have happened.

00:13:24.320 --> 00:13:28.880
To do that, we call UI accessibility
post notification with a

00:13:28.880 --> 00:13:30.980
layout change argument.

00:13:31.950 --> 00:13:34.250
The other type of notification
that's important is the

00:13:34.250 --> 00:13:35.800
screen change notification.

00:13:35.950 --> 00:13:38.260
This is when the whole
context switches out,

00:13:38.480 --> 00:13:40.910
VoiceOver needs to update itself,
it will play a sound,

00:13:40.910 --> 00:13:43.260
it will move to a new element, and so on.

00:13:43.410 --> 00:13:48.790
And you do that similarly by sending
the screen change notification.

00:13:48.790 --> 00:13:52.190
So, for example, if you select a new tab
in the tab controller,

00:13:52.190 --> 00:13:54.350
that will generate a screen change.

00:13:54.490 --> 00:13:57.330
And these are sent for all the
basic UIKit controls already.

00:13:57.370 --> 00:14:00.120
It's only if you're doing custom
things do you need to worry

00:14:00.120 --> 00:14:01.800
about these notifications.

00:14:02.760 --> 00:14:06.780
So that's going to take
you 90% of the way there.

00:14:06.830 --> 00:14:09.350
Notifications and attributes,

00:14:11.010 --> 00:14:13.600
are really the most important
things you have to worry about

00:14:13.600 --> 00:14:15.950
when making your app accessible.

00:14:16.230 --> 00:14:23.330
So let's start in with the demo and
some of the code and see what we can do.

00:14:23.810 --> 00:14:27.820
The demo app that we're using this
year is one that I've created.

00:14:27.820 --> 00:14:30.690
It's called the NSZombie Apocalypse.

00:14:30.700 --> 00:14:34.860
Let's see how the app works before
we try to make it accessible.

00:14:34.860 --> 00:14:36.740
Then we can look at it with VoiceOver.

00:14:36.740 --> 00:14:40.540
So basically the zombies,
the NSZombies are

00:14:40.540 --> 00:14:42.860
running amok in your app.

00:14:42.860 --> 00:14:47.300
And when things happen,
more zombies go and eventually you run

00:14:47.540 --> 00:14:50.360
out of memory and the app will crash.

00:14:50.360 --> 00:14:54.500
So your job is to keep deploying
these memory release techniques

00:14:54.950 --> 00:14:57.910
like arc or auto release and you
can make these zombies go away.

00:14:57.950 --> 00:15:01.970
I believe I have some sounds, too.

00:15:04.610 --> 00:15:09.750
If you use garbage collection,
that will actually add more

00:15:09.760 --> 00:15:14.740
memory to your program,
so don't do that one.

00:15:14.740 --> 00:15:19.480
We also have this little help screen
with a little story that I wrote.

00:15:19.480 --> 00:15:23.750
So, the question -- so this
is how you play the app.

00:15:23.860 --> 00:15:27.220
The question is:
How do we make it accessible?

00:15:27.220 --> 00:15:32.750
So the first step to doing that
is to turn on voiceover and sort

00:15:33.050 --> 00:15:35.980
of audit it for accessibility.

00:15:35.980 --> 00:15:37.410
So how do we do that?

00:15:37.410 --> 00:15:44.790
The easiest way to do that is to
go to settings and -- let's see.

00:15:45.210 --> 00:15:49.250
Go to accessibility and then
you go to triple click home and

00:15:49.270 --> 00:15:52.450
set VoiceOver to triple click.

00:15:52.930 --> 00:15:57.540
Once we do that,
we can triple click and VoiceOver will

00:15:57.540 --> 00:16:00.150
turn on and off when you toggle that.

00:16:00.260 --> 00:16:03.760
Let's go back to our app,
turn on VoiceOver.

00:16:03.810 --> 00:16:05.590
Landscape.

00:16:05.590 --> 00:16:06.560
Home button to the left.

00:16:06.560 --> 00:16:08.140
NSZombie Apocalypse.

00:16:08.340 --> 00:16:11.560
Let's start to examine
what's wrong with the app.

00:16:11.560 --> 00:16:15.240
The first thing, if I try to touch in the
zombie meter... VoiceOver on.

00:16:15.240 --> 00:16:16.660
Zombie meter.

00:16:17.830 --> 00:16:19.260
Nothing really happens.

00:16:19.280 --> 00:16:21.530
An object was retained too many times.

00:16:21.550 --> 00:16:21.820
Six minutes.

00:16:21.840 --> 00:16:22.760
I can touch that.

00:16:22.790 --> 00:16:23.910
So that looks fairly standard.

00:16:23.940 --> 00:16:25.080
What about the buttons?

00:16:25.200 --> 00:16:26.560
Self-release.

00:16:26.590 --> 00:16:27.960
Self-release.

00:16:28.010 --> 00:16:32.700
So it didn't say it was a button and
also the frames are rather small.

00:16:33.010 --> 00:16:35.140
That one just says button.

00:16:37.220 --> 00:16:46.370
: There's a screen change here,
but nothing really happened.

00:16:46.370 --> 00:16:46.370
Those ones also say button.

00:16:47.280 --> 00:16:53.060
If I start to examine by swiping
around so I can move from element

00:16:53.140 --> 00:16:55.400
to element by doing a swipe gesture.

00:16:55.720 --> 00:17:01.800
Self-delock, self-release, self-autority,
garbage, self-free button.

00:17:01.840 --> 00:17:03.740
An object was zombiemeter.

00:17:03.840 --> 00:17:06.820
So I can swipe through and go through
all the elements in the screen and

00:17:06.820 --> 00:17:08.440
find out if something's missing.

00:17:08.440 --> 00:17:11.100
I also wasn't able to touch
on the zombies at all.

00:17:11.160 --> 00:17:13.860
That's sort of an empty area.

00:17:13.930 --> 00:17:18.540
So there's a few things that we can
do to make this a better experience.

00:17:18.850 --> 00:17:21.680
One, we can make sure that the
zombiemeter is described.

00:17:21.940 --> 00:17:25.270
We can make sure the
zombies are elements.

00:17:42.440 --> 00:17:42.460
We can make sure the buttons
say that they're buttons.

00:17:42.460 --> 00:17:42.460
We can probably give some hints about
what to do because it's not immediately

00:17:42.460 --> 00:17:42.460
clear what you do with those buttons.

00:17:42.460 --> 00:17:42.460
And then obviously there's
the Help Button needs some

00:17:42.460 --> 00:17:42.460
labels and stuff like that.

00:17:42.460 --> 00:17:42.460
So let's go to the code
and see what we can do.

00:17:47.030 --> 00:17:52.450
I wrote down a bug list and I also
have some screenshots so it will be

00:17:52.450 --> 00:17:55.310
easy to look at what we want to do.

00:17:58.540 --> 00:18:04.920
So here, the buttons at the bottom
are not really buttons.

00:18:06.360 --> 00:18:12.560
That means that, let's see,
these buttons are not really buttons.

00:18:12.710 --> 00:18:16.630
So instead, we need to make sure that

00:18:17.350 --> 00:18:21.780
: How do we do that?

00:18:21.780 --> 00:18:26.540
Let's look at here and
go to our button view.

00:18:26.540 --> 00:18:28.670
How come it didn't speak button?

00:18:28.900 --> 00:18:32.900
Well, it looks like the button
view is just a UI control.

00:18:32.900 --> 00:18:36.930
Inside of that,
there's a label which looks like the

00:18:36.930 --> 00:18:42.520
thing that VoiceOver was focusing on
and then it does some other stuff.

00:18:42.520 --> 00:18:43.980
How do we do this?

00:18:43.980 --> 00:18:47.290
Is accessibility element return yes?

00:18:49.110 --> 00:18:51.000
And then let's return the label.

00:18:51.160 --> 00:18:53.600
What is the label for this button?

00:18:53.700 --> 00:18:58.500
The label is likely just
the text of the label view.

00:18:58.680 --> 00:19:07.490
And then finally we need to
set the traits to say button.

00:19:11.090 --> 00:19:15.780
So that will make sure that the
buttons behave like buttons.

00:19:15.830 --> 00:19:17.710
Now the buttons also need some hints.

00:19:17.820 --> 00:19:19.560
So how do we do that?

00:19:19.570 --> 00:19:21.520
Let's override

00:19:21.700 --> 00:19:27.800
[Transcript missing]

00:19:28.400 --> 00:19:37.700
[Transcript missing]

00:19:39.010 --> 00:19:42.780
So hopefully that should give
enough context what to do.

00:19:42.790 --> 00:19:45.820
Now the zombiemeter description
sort of needs a label.

00:19:45.960 --> 00:19:49.100
So all I could touch was on
that label of the zombiemeter.

00:19:49.110 --> 00:19:52.130
Luckily there's a class
called zombiemeter.

00:19:52.130 --> 00:19:55.460
It's just a UI view with
a label inside of it.

00:19:55.580 --> 00:19:57.770
So what we're going to do

00:19:58.990 --> 00:20:09.580
is make this an accessibility element.

00:20:09.580 --> 00:20:09.580
So you just have to find
one giant zombie meter.

00:20:09.580 --> 00:20:09.580
We'll make sure it has the right label.

00:20:11.600 --> 00:20:16.120
And that will also be
the text of the label.

00:20:16.250 --> 00:20:20.020
And then we want to return
the value of the zombie meter.

00:20:20.020 --> 00:20:21.560
The thing kept going up and up.

00:20:21.570 --> 00:20:23.640
It has some sort of
percentage associated with it.

00:20:23.640 --> 00:20:25.510
So in that case,
we can use something that

00:20:25.510 --> 00:20:28.480
I haven't mentioned yet,
which is called accessibility-value.

00:20:28.510 --> 00:20:32.200
Value is great for things that change,
that have some dynamically

00:20:32.520 --> 00:20:33.780
changing value to it.

00:20:33.800 --> 00:20:37.040
So in this case,
we can return in a string,

00:20:37.060 --> 00:20:44.490
a string with format and percent 0f,
percent percent.

00:20:44.630 --> 00:20:46.640
zombie level times 100.

00:20:46.640 --> 00:20:47.260
Great.

00:20:47.260 --> 00:20:50.580
So that would give me
accessibility value.

00:20:50.580 --> 00:20:53.860
Now the question mark
buttons need a label.

00:20:54.120 --> 00:20:58.530
So let's look at our
question mark button here.

00:20:58.530 --> 00:21:02.460
It looks like it takes a symbol
and might have been a question

00:21:02.520 --> 00:21:04.020
mark or an X or something.

00:21:04.020 --> 00:21:08.390
And then it looks like it
does a draw rect right in

00:21:08.390 --> 00:21:11.690
the middle with that string.

00:21:11.690 --> 00:21:15.780
So it draws a rect with the
circle and then it looks like

00:21:15.780 --> 00:21:17.250
it has a label beneath it.

00:21:17.250 --> 00:21:19.980
So we added a label
subview to that button.

00:21:19.980 --> 00:21:22.240
So we can see why
VoiceOver doesn't speak anything.

00:21:22.390 --> 00:21:24.400
There's a button and there's
a label inside of it.

00:21:24.530 --> 00:21:26.930
So what we have to do is tell
VoiceOver to speak the right thing.

00:21:26.930 --> 00:21:29.140
Now we could say it speak
whatever that label has.

00:21:29.140 --> 00:21:31.400
We could tell it speak
question mark or X.

00:21:31.720 --> 00:21:35.940
But that's not the semantic
information about the button.

00:21:35.940 --> 00:21:38.030
The button is really about

00:21:38.150 --> 00:21:40.320
Help or Close or something like that.

00:21:40.410 --> 00:21:43.730
So let's find out where
we set these things.

00:21:43.930 --> 00:21:48.000
and set the right accessibility
label with a setter.

00:21:48.000 --> 00:21:52.720
We can call this one help
and find the next one.

00:21:52.960 --> 00:21:59.040
This one looks like it
should say next or something.

00:21:59.210 --> 00:22:03.600
And the last one is hiding here.

00:22:03.600 --> 00:22:07.600
Looks like this is a help one.

00:22:11.200 --> 00:22:20.400
[Transcript missing]

00:22:21.540 --> 00:22:25.160
When you press the question mark,
VoiceOver needs to reset itself.

00:22:25.300 --> 00:22:31.640
When we're on the screen and we press
that X or we press the question mark,

00:22:31.790 --> 00:22:34.990
we need to reset itself so
VoiceOver knows the context has changed.

00:22:35.010 --> 00:22:36.180
How do we do that?

00:22:36.330 --> 00:22:41.160
Let's find out where that happens.

00:22:41.160 --> 00:22:43.510
I'm looking at question pressed.

00:22:43.600 --> 00:22:45.130
This looks like the right place.

00:22:45.210 --> 00:22:49.550
I'm going to post an
accessibility notification.

00:22:53.450 --> 00:22:57.400
screen change notification.

00:22:57.400 --> 00:23:01.000
So that will tell VoiceOver to reset
when the question mark is pressed.

00:23:01.000 --> 00:23:05.490
Let's also do the same thing
when we close the help.

00:23:05.670 --> 00:23:07.480
: So that will be good.

00:23:07.480 --> 00:23:09.960
And then our final bug,
the zombies should be

00:23:09.960 --> 00:23:11.880
elements and have labels.

00:23:11.900 --> 00:23:13.600
So where are those zombies hiding?

00:23:13.600 --> 00:23:16.120
The ZBE walking dead.

00:23:16.120 --> 00:23:19.600
It looks like they have
a bunch of body parts.

00:23:19.600 --> 00:23:27.560
Let's just find a body and then
we can set accessibility element

00:23:27.560 --> 00:23:33.430
and the accessibility label
will be something appropriate.

00:23:39.670 --> 00:23:41.700
So make sure you also
localize all your strings.

00:23:41.700 --> 00:23:44.200
I'm not doing that now
for the sake of brevity,

00:23:44.200 --> 00:23:47.180
but VoiceOver speaks
like 30 languages or so.

00:23:47.620 --> 00:23:51.100
So make sure you use localization if
your app is going to be localized.

00:23:51.100 --> 00:23:51.470
All right.

00:23:51.520 --> 00:23:52.860
So we tried that.

00:23:52.860 --> 00:23:54.360
NSZombie Apocalypse.

00:23:54.380 --> 00:23:58.100
Zombie meter,
0%. So we check the zombie meter.

00:23:58.110 --> 00:24:01.640
Zombie meter,
15%. So saying the right percentage.

00:24:01.650 --> 00:24:03.100
Walking dead in the house.

00:24:03.140 --> 00:24:03.550
Great.

00:24:03.550 --> 00:24:05.260
I can touch the zombie if I want to.

00:24:05.280 --> 00:24:06.630
Self-release button.

00:24:06.760 --> 00:24:07.840
It says self-release button.

00:24:07.840 --> 00:24:10.500
Memory technique over zombies
and release to deploy.

00:24:10.530 --> 00:24:11.830
And that was the hint.

00:24:11.860 --> 00:24:14.600
If we can trust the help button.

00:24:14.820 --> 00:24:16.140
Help button.

00:24:16.170 --> 00:24:19.400
When we press the help button,
we should reset.

00:24:19.930 --> 00:24:21.160
Great.

00:24:21.860 --> 00:24:32.980
So we reset to the top of the screen.

00:24:32.980 --> 00:24:32.980
Let's check.

00:24:32.980 --> 00:24:32.980
That says the right thing.

00:24:32.980 --> 00:24:32.980
That says the right thing.

00:24:32.980 --> 00:24:32.980
So let's close.

00:24:33.500 --> 00:24:38.300
Zombie meter, 35%. Chris Fleizach:
So we also went to the

00:24:38.300 --> 00:24:41.400
first element in the screen,
which was the zombie meter in that case.

00:24:41.420 --> 00:24:45.380
Zombie meter, 42%. Chris Fleizach:
So it looks like we have

00:24:45.380 --> 00:24:46.840
addressed all those bugs.

00:24:46.890 --> 00:24:49.850
The app is becoming more and
more usable all the time.

00:24:49.880 --> 00:24:53.810
So let's go back and

00:24:54.120 --> 00:24:57.000
So those are the basic
accessibility attributes.

00:24:57.000 --> 00:24:59.670
With just a little bit of work,
we can start to make our

00:24:59.970 --> 00:25:03.130
apps more accessible,
even something as dynamic and

00:25:03.190 --> 00:25:06.000
graphically intense as that game is.

00:25:06.000 --> 00:25:09.990
So let's talk about what's new in 6.

00:25:10.680 --> 00:25:13.410
We've already learned that
with just a little bit of

00:25:13.410 --> 00:25:16.480
work we can get a lot of gain.

00:25:16.980 --> 00:25:19.660
So where do we go from here?

00:25:19.660 --> 00:25:22.970
We've added new ways to
interact with VoiceOver.

00:25:23.450 --> 00:25:26.660
We've added some new attributes
and traits to help make

00:25:26.700 --> 00:25:28.340
your app more complete.

00:25:28.340 --> 00:25:31.210
And something I won't demo,
but if you have a custom text

00:25:31.280 --> 00:25:35.100
view based on UI text input,
VoiceOver will work with it natively.

00:25:35.160 --> 00:25:39.070
No extra work required as long
as you implement UI text input.

00:25:40.920 --> 00:25:42.170
So let's look at the new API.

00:25:42.430 --> 00:25:46.040
First one,
Accessibility Perform Magic Tap.

00:25:46.080 --> 00:25:47.600
So what is this?

00:25:47.770 --> 00:25:51.070
So if you've used VoiceOver,
you may know that there's a gesture.

00:25:51.070 --> 00:25:52.700
It's a two-finger double tap.

00:25:52.860 --> 00:25:56.470
When you do a two-finger double tap,
VoiceOver does the magic thing.

00:25:56.470 --> 00:25:59.650
This means if you're playing music,
it will pause the music.

00:25:59.990 --> 00:26:02.860
If you're in a phone call,
it will answer the phone call

00:26:02.860 --> 00:26:04.360
or hang up the phone call.

00:26:04.590 --> 00:26:08.030
If you're in the clock app,
it will start or stop the stopwatch.

00:26:08.130 --> 00:26:10.740
If you're in camera,
it will take a picture.

00:26:10.980 --> 00:26:14.000
So two-finger double tap
magically does the right thing

00:26:14.190 --> 00:26:15.960
in whatever context you're in.

00:26:16.090 --> 00:26:19.690
You can also add this to your app, too,
if you need to.

00:26:19.860 --> 00:26:24.340
So you implement this method,
you do whatever you need

00:26:24.590 --> 00:26:28.210
to do and return yes,
and make your app seem

00:26:28.290 --> 00:26:30.300
like magic as well.

00:26:30.490 --> 00:26:32.250
Just like that.

00:26:34.030 --> 00:26:38.900
So we also allow you to now move
VoiceOver focus if you need to.

00:26:40.260 --> 00:26:44.460
Sometimes you want the voiceover to
be at a specific place in your app to

00:26:44.460 --> 00:26:46.670
learn and understand what's going on.

00:26:46.800 --> 00:26:50.160
Before 6.0,
that was quite challenging to do.

00:26:50.180 --> 00:26:53.980
So now what you can do is use the
argument for the accessibility

00:26:54.050 --> 00:26:58.610
notification for either layout change
or screen change and pass in an element

00:26:58.610 --> 00:27:00.680
that you want voiceover to move to.

00:27:00.710 --> 00:27:03.180
So, for example,
if I have a screen change and I want

00:27:03.520 --> 00:27:08.300
voiceover to move to a specific button,
I can do that passing in as an argument.

00:27:08.300 --> 00:27:12.120
You can also now find out when
voiceover finishes speaking something.

00:27:12.200 --> 00:27:13.370
Finishes speaking what?

00:27:13.640 --> 00:27:16.500
There's another notification that
I haven't mentioned yet called

00:27:16.500 --> 00:27:18.240
the announcement notification.

00:27:18.240 --> 00:27:20.360
That came out in 4.0.

00:27:20.360 --> 00:27:24.460
And the announcement notification allows
you to tell voiceover to speak something.

00:27:24.460 --> 00:27:25.930
Any string you want.

00:27:26.110 --> 00:27:30.500
Now, this is sort of nice if you need to
have an announcement or the screen

00:27:30.500 --> 00:27:34.500
changes or something's happening
that's not immediately clear.

00:27:34.500 --> 00:27:38.060
You can use that to inform the
voiceover user what's going on.

00:27:38.060 --> 00:27:41.200
But if you needed to string multiple
instances of those together,

00:27:41.250 --> 00:27:44.480
for example, you're reading sort of a
book in a row or something,

00:27:44.560 --> 00:27:48.130
you wouldn't know when
voiceover is finished speaking.

00:27:48.150 --> 00:27:51.310
So you would interrupt what voiceover
-- what you told voiceover to speak.

00:27:51.330 --> 00:27:55.100
So now you can listen for the
announcement did finish notification.

00:27:55.100 --> 00:27:58.240
And that's an NS notification
center notification.

00:27:58.240 --> 00:27:59.980
And when that comes in,
you know that voiceover is

00:28:00.050 --> 00:28:02.880
finished speaking your string.

00:28:05.150 --> 00:28:08.990
We've added a new API to help you
order things when voiceover is

00:28:09.290 --> 00:28:12.290
navigating through your interface.

00:28:12.310 --> 00:28:13.320
So what do I mean?

00:28:13.480 --> 00:28:15.700
Let's look at the clock app, for example.

00:28:15.810 --> 00:28:19.960
The clock app has all these little alarms
and sort of a random grid of array.

00:28:19.960 --> 00:28:23.050
And you would like voiceover
users to navigate through

00:28:23.050 --> 00:28:24.700
them in a specific order.

00:28:24.700 --> 00:28:26.070
How do you navigate?

00:28:26.270 --> 00:28:28.230
Through a single finger swipe,
left or right.

00:28:28.290 --> 00:28:31.030
So as you're doing this,
swiping through left or right,

00:28:31.030 --> 00:28:34.530
by default, voiceover is going to go
top left to bottom right.

00:28:34.690 --> 00:28:37.700
So it's going to go sort of
row by row through things.

00:28:37.700 --> 00:28:42.480
If you want to order them differently,
you should group accessibility children.

00:28:42.480 --> 00:28:47.530
And that tells voiceover that these
things in this view should be together.

00:28:50.040 --> 00:28:53.850
We've added a new trait,
the UI accessibility trait header.

00:28:54.020 --> 00:28:58.920
So this screenshot of Game Center,
I would identify two things as

00:28:59.160 --> 00:29:01.920
possibly being the header in this case.

00:29:02.400 --> 00:29:06.970
So they allow you to identify the
VoiceOver that said this thing is sort of

00:29:06.970 --> 00:29:09.870
like a heading over some sort of content.

00:29:10.270 --> 00:29:15.720
And that can be useful for
locating where you want to be or

00:29:15.720 --> 00:29:17.030
understanding the layout of the app.

00:29:18.200 --> 00:29:22.350
So let's go back to our app and see
what we can do to use some of this

00:29:22.350 --> 00:29:24.880
new API to make it even better.

00:29:26.370 --> 00:29:30.630
So the second demo bugs,
what do we want to do?

00:29:30.670 --> 00:29:35.060
Let's implement this magic
tap and see what we can do.

00:29:35.110 --> 00:29:39.340
Let's try to move VoiceOver focus
when the question mark disappears.

00:29:39.620 --> 00:29:43.950
So when you press this X button,
let's try to move VoiceOver focus

00:29:43.970 --> 00:29:47.580
to something more appropriate
like maybe the status view.

00:29:47.580 --> 00:29:51.570
So we can try to move VoiceOver

00:29:51.900 --> 00:30:23.600
[Transcript missing]

00:30:23.700 --> 00:30:29.720
on here to on the NSZombie Apocalypse
heading to identify that appropriately.

00:30:29.800 --> 00:30:30.630
All right.

00:30:30.640 --> 00:30:32.600
So first up, perform magic tap.

00:30:32.790 --> 00:30:36.780
So I'm going to go to my app delegate and

00:30:41.100 --> 00:30:42.480
Override this.

00:30:42.610 --> 00:30:43.560
Return yes.

00:30:43.560 --> 00:30:47.680
And you can implement perform
magic tap on an object,

00:30:47.860 --> 00:30:51.160
an individual object,
or a parent in the view

00:30:51.160 --> 00:30:56.560
hierarchy or the UI application
or the UI application delegate.

00:30:56.560 --> 00:31:01.250
VoiceOver will go up the chain of things,
trying out each one.

00:31:01.470 --> 00:31:07.160
And I think what we
should do is toggle pause.

00:31:07.310 --> 00:31:09.980
So I know this is a fast-moving game.

00:31:10.030 --> 00:31:10.900
It's very challenging.

00:31:10.900 --> 00:31:14.190
If you get tired and need a break,
you should be able to pause it.

00:31:15.260 --> 00:31:20.940
Move VoiceOver focus to the status
when the question mark disappears.

00:31:20.940 --> 00:31:22.230
Let's go to our view controller.

00:31:22.360 --> 00:31:23.600
Help did close.

00:31:23.660 --> 00:31:24.640
This looks appropriate.

00:31:24.750 --> 00:31:27.200
Now let's just pass in status view.

00:31:27.470 --> 00:31:28.200
Done.

00:31:28.200 --> 00:31:31.080
Should group children on
the button collection view.

00:31:31.180 --> 00:31:35.200
How do we make these
things order together?

00:31:35.200 --> 00:31:39.900
There's a nice button collection view.

00:31:39.900 --> 00:31:39.900
And then here...

00:31:41.530 --> 00:31:45.980
Let's return yes for that.

00:31:45.980 --> 00:31:48.770
And then the heading trait
on the question mark title.

00:31:48.770 --> 00:31:50.030
So help view.

00:31:50.030 --> 00:31:53.350
There's a giant label here somewhere.

00:31:53.380 --> 00:31:55.190
This looks like it.

00:31:55.310 --> 00:32:01.120
: You can set the accessibility
traits to be the right.

00:32:05.160 --> 00:32:07.940
is running.

00:32:08.070 --> 00:32:09.880
NSZombie Apocalypse.

00:32:09.890 --> 00:32:11.200
So what do we do?

00:32:11.290 --> 00:32:13.500
So the first thing,
the swipe order of this

00:32:13.500 --> 00:32:14.580
should be together.

00:32:14.610 --> 00:32:18.300
Self-delock, self-reli-self-watch,
garbage, arc, help, button.

00:32:18.380 --> 00:32:22.740
So if you notice I swiping through I went
from... Self-self-self-self-garbage-arc,

00:32:22.840 --> 00:32:23.400
help, button.

00:32:23.440 --> 00:32:27.910
I went through all the buttons and then
after that I went to that help button.

00:32:28.180 --> 00:32:30.210
So buttons ordered together.

00:32:30.610 --> 00:32:30.830
Good.

00:32:30.830 --> 00:32:31.600
Things are working.

00:32:31.630 --> 00:32:33.570
We did the magic tap.

00:32:34.520 --> 00:32:35.700
paused.

00:32:35.710 --> 00:32:37.260
Zombies are finally paused.

00:32:37.260 --> 00:32:41.500
You can go get a break and
get yourself an Odwalla.

00:32:41.520 --> 00:32:46.780
When you're -- can double tap and
start the game again if you need to.

00:32:46.930 --> 00:32:50.560
What else do we want to do when... Help.

00:32:50.620 --> 00:32:51.890
NSZombie Apocalypse.

00:32:52.150 --> 00:32:52.800
Heading.

00:32:53.060 --> 00:32:53.230
Great.

00:32:53.290 --> 00:32:55.800
That thing says heading
just like we asked it to.

00:32:55.800 --> 00:33:00.870
And finally when we close this one,
we should move back to that status view.

00:33:01.710 --> 00:33:03.430
Memory leak, three megabytes.

00:33:03.640 --> 00:33:03.760
Great.

00:33:03.900 --> 00:33:07.640
So we closed that thing and we told
VoiceOver to move to a specific

00:33:07.640 --> 00:33:10.260
element and it worked just fine.

00:33:10.450 --> 00:33:16.700
So let's go back and talk
about some other cool things.

00:33:17.550 --> 00:33:20.760
Let's talk about some of
the more deeper topics.

00:33:20.760 --> 00:33:22.800
If you've made your
app accessible already,

00:33:22.810 --> 00:33:24.890
you may have had a standard app.

00:33:24.890 --> 00:33:26.000
It might have gone very easily.

00:33:26.000 --> 00:33:29.520
But chances are that as your
apps become more complicated,

00:33:29.520 --> 00:33:33.340
you need to use some other
accessibility techniques to continue

00:33:33.340 --> 00:33:35.960
to ensure your apps remain accessible.

00:33:35.970 --> 00:33:39.800
The first thing I want to talk about
is what happens if there is no view.

00:33:39.800 --> 00:33:42.760
So, for example,
you're using draw at point with a string.

00:33:42.760 --> 00:33:44.390
You're using overriding draw rect.

00:33:44.590 --> 00:33:46.190
Maybe you're using OpenGL.

00:33:46.280 --> 00:33:47.960
A good example is Maps.

00:33:48.130 --> 00:33:51.960
Obviously,
there's not a new UI view for every road.

00:33:51.960 --> 00:33:53.960
So what do we do in this case?

00:33:53.960 --> 00:33:57.940
So what you want to do is make an
array of UI accessibility elements.

00:33:58.140 --> 00:34:01.660
UI accessibility element is
basically just a container

00:34:02.120 --> 00:34:04.340
for some idea in your program.

00:34:04.730 --> 00:34:09.550
So for every distinct interface
object that you want to expose,

00:34:09.550 --> 00:34:11.280
make a new element.

00:34:12.040 --> 00:34:13.880
How does this work?

00:34:13.900 --> 00:34:17.360
So, for example,
say we have an array of roads.

00:34:17.360 --> 00:34:20.830
We want to gather all of our roads
together and return those as elements

00:34:20.840 --> 00:34:23.810
so VoiceOver can interact with them.

00:34:24.070 --> 00:34:26.370
First thing we need to
do is make the element.

00:34:26.510 --> 00:34:29.000
So we do that by initing it.

00:34:29.000 --> 00:34:34.870
Notice the accessibility container
should be the view that does the drawing.

00:34:35.000 --> 00:34:37.980
So VoiceOver starts by drilling
down through the view hierarchy

00:34:37.980 --> 00:34:40.940
starting at the window and then
all the views all the way down.

00:34:41.000 --> 00:34:46.000
If your view is the last thing before it
starts drawing random things everywhere,

00:34:46.310 --> 00:34:48.990
then that is the accessibility container.

00:34:50.240 --> 00:34:52.510
You need to set the accessibility
label for that object so

00:34:52.520 --> 00:34:54.830
VoiceOver can speak something.

00:34:54.830 --> 00:34:58.040
And then maybe you want
to store that in an array.

00:34:58.150 --> 00:34:59.560
So it's good to cache these things.

00:34:59.560 --> 00:35:01.550
VoiceOver will ask for them often.

00:35:01.590 --> 00:35:05.280
So if you can cache them in
some sort of array or something,

00:35:05.280 --> 00:35:07.100
it will make life easier.

00:35:07.830 --> 00:35:10.100
So next up,
how do we tell VoiceOver what they are?

00:35:10.100 --> 00:35:15.100
So we want to implement what we call
the UI accessibility container protocol.

00:35:15.100 --> 00:35:17.880
Three methods,
pretty much just like NSArray.

00:35:17.880 --> 00:35:20.190
First one, the count.

00:35:20.470 --> 00:35:22.090
How many accessibility
elements are there?

00:35:22.090 --> 00:35:23.770
Easy enough if you have
an array set there,

00:35:23.770 --> 00:35:24.990
you can just return the count.

00:35:25.950 --> 00:35:29.160
Next up, what's the index of an
accessibility element?

00:35:29.420 --> 00:35:32.050
Here you can mirror index
of object from NSArray.

00:35:32.090 --> 00:35:35.090
And finally,
what's the element at an index?

00:35:35.100 --> 00:35:36.100
Again, mirrors NSArray.

00:35:37.200 --> 00:35:39.170
So six or so lines of code.

00:35:39.230 --> 00:35:44.090
Pretty simple if you have this
modeled on an array to start with.

00:35:46.000 --> 00:37:27.900
[Transcript missing]

00:37:28.920 --> 00:37:31.820
This is what UI accessibility
announcements are good for.

00:37:31.820 --> 00:37:35.430
So for example, if we have a continued
tracking method where we're

00:37:35.430 --> 00:37:39.180
tracking where this object is,
we can detect when things happen

00:37:39.180 --> 00:37:40.710
and tell VoiceOver about it.

00:37:40.880 --> 00:37:44.400
So for example, if we're near an edge,
we can tell VoiceOver you're

00:37:44.430 --> 00:37:46.570
nearing the left border,
you're nearing the top border,

00:37:46.570 --> 00:37:48.450
nearing the bottom border.

00:37:48.580 --> 00:37:52.320
If we are on empty space,
we can say on empty space,

00:37:52.320 --> 00:37:54.280
lift finger to cancel.

00:37:54.280 --> 00:37:56.480
And if we're over
something that's important,

00:37:56.480 --> 00:38:00.190
we can say on top of artist,
lift finger to replace.

00:38:00.620 --> 00:38:04.080
So notice here I've pound defined
post to be the much longer

00:38:04.180 --> 00:38:07.240
UI accessibility post notification.

00:38:07.680 --> 00:38:10.410
That's just so it fits on the slide.

00:38:11.150 --> 00:38:15.820
The last thing I wanted to talk about
is direct touch or direct interaction.

00:38:16.060 --> 00:38:20.520
This is designed as a way for you
to allow VoiceOver to interact with

00:38:20.520 --> 00:38:22.440
something that is very dynamic.

00:38:22.440 --> 00:38:24.390
A good example is a keyboard.

00:38:24.540 --> 00:38:28.050
Keyboard really requires you
to press things in real time.

00:38:28.050 --> 00:38:30.450
You don't want to
double tap on every key.

00:38:30.800 --> 00:38:33.090
That would be a very tedious
way of making a song.

00:38:33.240 --> 00:38:37.700
VoiceOver allows you to do
this by setting the direct

00:38:37.700 --> 00:38:40.800
interaction trait on an object.

00:38:40.900 --> 00:38:43.540
When you do that,
it means a certain area will allow

00:38:43.560 --> 00:38:46.060
VoiceOver to interact with it directly.

00:38:46.130 --> 00:38:52.590
You can also allow VoiceOver to explore
elements within the direct touch area.

00:38:53.060 --> 00:38:57.040
This keyboard is composed of
many keys that have information.

00:38:57.040 --> 00:38:58.860
For example,
you might know that this is a C3

00:38:58.860 --> 00:39:02.000
key and you might want to inform
the VoiceOver user of that.

00:39:02.160 --> 00:39:03.740
So how does that work?

00:39:03.920 --> 00:39:05.340
Well,
VoiceOver has a number of gestures to

00:39:05.420 --> 00:39:10.100
control things and one of the things they
control is whether direct touch or direct

00:39:10.140 --> 00:39:12.860
interaction is on by default or off.

00:39:12.990 --> 00:39:16.360
So if they turn it off,
they can continue exploring an area.

00:39:16.530 --> 00:39:19.360
When they turn it on,
they can interact with it.

00:39:19.970 --> 00:39:21.460
So some code to show how you do that.

00:39:21.460 --> 00:39:24.640
Maybe you have something
like a piano view.

00:39:24.640 --> 00:39:26.730
And in your accessibility
traits of piano view,

00:39:26.730 --> 00:39:30.560
you'll return the appropriate trait,
which is this direct interaction trait.

00:39:30.560 --> 00:39:33.800
Notice that it is an accessibility
element because this is what you

00:39:33.800 --> 00:39:35.500
want VoiceOver to interact with.

00:39:35.500 --> 00:39:40.620
But you can also set the objects within
this view as accessibility elements.

00:39:40.630 --> 00:39:45.560
So a VoiceOver user can explore
things within a direct touch area.

00:39:45.580 --> 00:39:48.920
So sort of a nice trick to
remember if you have an app

00:39:48.920 --> 00:39:51.320
that uses this kind of paradigm.

00:39:51.990 --> 00:39:56.510
So let's take a look at how we can
make our app even more accessible

00:39:56.780 --> 00:39:58.630
using some of these techniques.

00:39:58.800 --> 00:40:02.090
And I want to try to use the use
announcements while dragging technique

00:40:02.490 --> 00:40:05.440
to provide a little bit more information.

00:40:05.540 --> 00:40:08.530
So the one thing that might
have been hard about this app is

00:40:08.530 --> 00:40:12.120
where do you drag those buttons,
especially if you can't see?

00:40:12.980 --> 00:40:16.500
So I believe we have some
helpful methods here.

00:40:16.550 --> 00:40:21.120
Button selected, button dragged,
button finished.

00:40:21.210 --> 00:40:27.030
So I think we can make this a better
experience by posting some notifications

00:40:29.520 --> 00:40:30.430
That tell you what to do.

00:40:30.710 --> 00:40:35.850
So when the button is first selected,
what should we say?

00:40:36.050 --> 00:40:42.190
My guess is something like
drag button over zombies.

00:40:44.700 --> 00:40:59.410
: That should be good enough.

00:40:59.410 --> 00:40:59.410
Now, when you're dragging,
there's a few different states.

00:40:59.410 --> 00:40:59.410
First example,
if the button is inside of the

00:40:59.410 --> 00:40:59.410
iPad view and it's the first
time inside the iPad view,

00:41:02.790 --> 00:41:09.930
We should probably say something
appropriate like lift to deploy memory.

00:41:10.610 --> 00:41:16.150
And if you've left the iPad
view for the first time,

00:41:16.210 --> 00:41:19.870
maybe we can say,
"No longer over Zombies.

00:41:19.890 --> 00:41:22.880
Live to cancel."

00:41:24.400 --> 00:41:48.200
[Transcript missing]

00:41:48.380 --> 00:41:51.500
So just by providing a
few extra announcements,

00:41:51.710 --> 00:41:54.290
a few lines of code,
you can make your app,

00:41:54.320 --> 00:42:00.900
even if it requires a lot of interaction,
make it a lot more usable.

00:42:01.040 --> 00:42:07.720
So final topic I want to mention
are things that you may not have

00:42:07.720 --> 00:42:10.240
known about UI accessibility.

00:42:10.240 --> 00:42:14.260
Some cool things that you
can do if you've really gone

00:42:14.260 --> 00:42:15.710
into the advanced techniques.

00:42:15.860 --> 00:42:19.700
So one is control the
language of the entire app.

00:42:19.810 --> 00:42:21.900
So how do we do that?

00:42:22.560 --> 00:42:26.060
You can set the accessibility
language on a UI application.

00:42:26.200 --> 00:42:30.040
So accessibility language is another
attribute that tells VoiceOver what

00:42:30.070 --> 00:42:32.600
language to use when it speaks.

00:42:32.740 --> 00:42:35.860
If you want it for the entire
app or just a specific element,

00:42:35.910 --> 00:42:38.240
you set it on the right thing.

00:42:38.370 --> 00:42:41.600
You can also set it for
a range within a string.

00:42:41.700 --> 00:42:44.860
So for example, let's say we have an
attributed string that has some

00:42:44.870 --> 00:42:46.840
Japanese and some English in it.

00:42:46.920 --> 00:42:49.890
And you want VoiceOver to
speak with using a certain

00:42:49.890 --> 00:42:51.880
language for a certain range.

00:42:51.940 --> 00:42:55.140
You can add the attribute
accessibility language with

00:42:55.140 --> 00:42:57.720
the right value for that range.

00:42:57.780 --> 00:43:02.820
Now the values for these things
are some standard Unicode thing.

00:43:02.820 --> 00:43:04.480
J-A-J-P is Japanese.

00:43:04.510 --> 00:43:07.270
F-R, F-R is France, French.

00:43:07.300 --> 00:43:12.100
Easy enough to find a list of them
and the ones that VoiceOver supports.

00:43:12.170 --> 00:43:14.590
And then once you have that,
you can use that as the

00:43:14.690 --> 00:43:15.930
accessibility label.

00:43:16.030 --> 00:43:18.060
So accessibility label
says it takes a string.

00:43:18.120 --> 00:43:19.860
You don't have to
believe it all the time.

00:43:19.860 --> 00:43:23.240
You can also pass in an attribute
to string if you want to.

00:43:23.240 --> 00:43:27.770
Now that attributed strings are
much more prevalent in iOS 6,

00:43:29.820 --> 00:43:32.110
How do you deal with
controls without views?

00:43:32.210 --> 00:43:36.510
So there's a few controls in iOS
that are challenging to get at.

00:43:36.560 --> 00:43:41.000
One of them is the UI segmented control,
specifically, you know,

00:43:41.000 --> 00:43:43.120
something that looks like that
where you want to override it

00:43:43.120 --> 00:43:46.430
to say something different than
degree sign F or degree sign C.

00:43:46.430 --> 00:43:49.590
In this case, in weather,
you would like it to say

00:43:49.770 --> 00:43:51.990
Fahrenheit or Celsius.

00:43:51.990 --> 00:43:55.120
So how do you get at those things?

00:43:55.120 --> 00:43:59.940
Normally, you create your UI segmented
controls with the NSString or image.

00:43:59.940 --> 00:44:02.260
So in that case,
just set the accessibility

00:44:02.260 --> 00:44:05.210
label on the NSString itself.

00:44:05.290 --> 00:44:08.460
or if you have an image,
just set the accessibility label directly

00:44:08.460 --> 00:44:11.640
on the image and then when you insert
those things into the segmented controls,

00:44:11.810 --> 00:44:15.370
VoiceOver will pick that up
and speak the right thing.

00:44:16.880 --> 00:44:20.040
Another example is
UI table view index titles.

00:44:20.110 --> 00:44:23.900
Here's a thing that you return an
array of strings for a table to get

00:44:23.900 --> 00:44:26.960
the ones that you want to appear.

00:44:26.960 --> 00:44:30.660
You can change what VoiceOver speaks
for each of these things as well

00:44:30.660 --> 00:44:34.710
by overriding the accessibility
label and setting that on NSString.

00:44:37.220 --> 00:44:41.170
So, in summary, obviously,
we want you to add

00:44:41.480 --> 00:44:43.100
accessibility to your app.

00:44:43.100 --> 00:44:45.500
I think you guys are
all committed already.

00:44:45.500 --> 00:44:46.910
That's why you're here.

00:44:47.050 --> 00:44:49.090
It's an important task.

00:44:49.100 --> 00:44:50.550
The reasons are numerous.

00:44:50.550 --> 00:44:51.570
Just a few of them.

00:44:51.570 --> 00:44:53.670
One is going to increase your user base.

00:44:53.710 --> 00:44:56.400
Obviously,
you want more users using your apps.

00:44:56.400 --> 00:44:58.980
So, that's a good reason.

00:44:58.980 --> 00:45:01.830
I think another great reason
is that you get a lot of really

00:45:02.450 --> 00:45:03.980
good feedback from users.

00:45:03.980 --> 00:45:08.740
So, users are very excited when they
find out that an app is accessible.

00:45:08.740 --> 00:45:11.940
It's really nice and rewarding
to get that kind of feedback.

00:45:11.940 --> 00:45:15.280
And finally,
Apple takes accessibility seriously.

00:45:15.280 --> 00:45:19.390
It is a partnership with developers.

00:45:19.400 --> 00:45:22.600
We are working hand in hand to
try to make the most accessible

00:45:22.740 --> 00:45:24.680
platform that's ever existed.

00:45:24.680 --> 00:45:28.400
And it really requires
Apple's commitment.

00:45:28.640 --> 00:45:33.640
And your commitment to ensure that
everything works as well as it can.

00:45:33.640 --> 00:45:36.750
So, I think this is a really worthy goal.

00:45:37.040 --> 00:45:39.640
Something that you should be
telling your friends about.

00:45:39.640 --> 00:45:45.100
It makes for a really compelling use
case for iOS to see just everyone

00:45:45.100 --> 00:45:46.940
being able to use this device.

00:45:46.940 --> 00:45:52.100
And getting the same satisfaction
that all of us do every day.

00:45:52.970 --> 00:45:56.330
If you're interested in related sessions,
there's an accessibility

00:45:56.440 --> 00:45:59.550
in iBooks session tomorrow.

00:45:59.630 --> 00:46:01.540
And if you want to make
a custom text view,

00:46:01.540 --> 00:46:04.900
like I mentioned, keyboard input in iOS
is a good one to attend.

00:46:05.020 --> 00:46:06.900
And lots of more information.

00:46:06.900 --> 00:46:10.050
There's accessibility programming
guideline which will repeat a

00:46:10.050 --> 00:46:12.850
lot of the stuff that I said
here about common attributes,

00:46:12.910 --> 00:46:14.580
protocol reference,
and then VoiceOver user

00:46:14.580 --> 00:46:17.710
manual will tell you all the
gestures that VoiceOver can do.

00:46:17.950 --> 00:46:25.790
So, I think it's quite useful.

00:46:25.790 --> 00:46:25.790
Thanks for coming out and
attending WWDC 2012 and keep

00:46:25.790 --> 00:46:25.790
making great accessible apps.

00:46:25.790 --> 00:46:25.790
Thank you.