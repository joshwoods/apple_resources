WEBVTT

00:00:10.990 --> 00:00:12.620
Good afternoon.

00:00:12.650 --> 00:00:13.730
I'm Anders Bertelrud.

00:00:13.730 --> 00:00:17.420
Welcome to session 404, Building from the
Command Line with Xcode.

00:00:17.720 --> 00:00:21.050
A lot of the Xcode sessions in this
week are going to talk about various

00:00:21.050 --> 00:00:25.380
aspects of the Xcode user interface,
the editor, source code management,

00:00:25.540 --> 00:00:27.000
building, debugging.

00:00:27.080 --> 00:00:29.410
But in this next hour,
we're going to focus on working with

00:00:29.480 --> 00:00:31.110
your projects from the command line.

00:00:31.260 --> 00:00:33.210
So the first question is, why?

00:00:33.380 --> 00:00:36.140
Well, why work from the command
line when there's a great IDE?

00:00:36.230 --> 00:00:40.050
Turns out that it's both
interesting and useful to do that,

00:00:40.100 --> 00:00:43.650
and we'll show many examples
of that in this session.

00:00:43.900 --> 00:00:47.130
And so after convincing ourselves
that it's useful and interesting,

00:00:47.250 --> 00:00:49.630
we're going to talk about
how to use Xcode build.

00:00:49.900 --> 00:00:54.290
Xcode build is the main gateway
to Xcode from the command line.

00:00:54.590 --> 00:00:56.500
After that,
we'll look at how you can customize

00:00:56.620 --> 00:01:00.230
your project in the Xcode user
interface so that you can use Xcode

00:01:00.230 --> 00:01:02.000
build with it more effectively.

00:01:02.000 --> 00:01:06.270
You can set up some defaults that
you can then invoke from Xcode build.

00:01:06.590 --> 00:01:12.890
Then we'll look at automating your
build workflow using Xcode build and...

00:01:13.550 --> 00:01:14.000
Excellent.

00:01:14.000 --> 00:01:16.050
You're in the right session.

00:01:16.150 --> 00:01:18.140
And after that,
we're going to take a look at how you

00:01:18.220 --> 00:01:22.390
can invoke the compiler and linker
directly if you're using a project that

00:01:22.390 --> 00:01:25.080
doesn't even use the Xcode build system.

00:01:25.500 --> 00:01:26.640
So first of all, why?

00:01:26.680 --> 00:01:29.520
Well, in a word, it's automation.

00:01:29.640 --> 00:01:35.180
So on a Unix-based OS like Mac OS X,
the command line tools are

00:01:35.180 --> 00:01:39.010
the way to automate things,
whether it's through shell scripts or

00:01:39.120 --> 00:01:40.990
Python or Perl or anything like that.

00:01:41.040 --> 00:01:43.910
The automation works
by invoking commands.

00:01:43.910 --> 00:01:46.820
And so using this,
you can set up nightly builds

00:01:46.820 --> 00:01:50.150
or daily builds so that when
you come into the morning,

00:01:50.150 --> 00:01:54.750
there's a ready-built version for
the testers or for yourself to use.

00:01:55.400 --> 00:01:58.460
And of course, you can integrate with
continuous integration systems.

00:01:58.460 --> 00:02:00.030
Some of you may not
be familiar with that,

00:02:00.030 --> 00:02:02.630
so we'll talk more in detail about
that in the second part of the talk,

00:02:02.630 --> 00:02:03.380
what that is.

00:02:03.400 --> 00:02:07.810
And then a secondary use for command
line tools are if you have a build

00:02:07.810 --> 00:02:10.510
system that doesn't use Xcode at all.

00:02:10.510 --> 00:02:13.520
So you may have a cross-platform
project that you're working on that

00:02:13.520 --> 00:02:15.330
works on a lot of different systems.

00:02:15.340 --> 00:02:19.200
And Xcode, of course, is an OS X app,
so you may need to use the

00:02:19.200 --> 00:02:23.360
linker and compiler directly
in order to build your project.

00:02:23.380 --> 00:02:26.520
And there are various systems like
Mac Ports and Fink and Homebrew

00:02:26.520 --> 00:02:29.450
that use the tools directly,
the compiler and linker.

00:02:31.530 --> 00:02:34.740
So in order to use Xcode Build,
let's take a look first,

00:02:34.850 --> 00:02:35.720
what is Xcode Build?

00:02:35.830 --> 00:02:39.750
So Xcode Build, it's a command line tool,
and it allows you to work with

00:02:39.860 --> 00:02:41.680
the projects and workspaces.

00:02:41.720 --> 00:02:44.090
Xcode 4 introduces the
concept of workspaces,

00:02:44.090 --> 00:02:48.160
and Xcode Build understands both,
projects and workspaces.

00:02:48.220 --> 00:02:51.480
And what it lets you do is to
perform batch operations on

00:02:51.480 --> 00:02:53.360
your projects and workspaces.

00:02:53.680 --> 00:02:57.360
What I mean by that is,
it's not a tool for opening up your

00:02:57.360 --> 00:03:01.410
project in a console editor and for
customizing your project or working

00:03:01.410 --> 00:03:02.770
with it at a fine-grained level.

00:03:03.010 --> 00:03:06.600
It's a tool for operating on
projects and workspaces as a whole.

00:03:06.670 --> 00:03:09.600
So you can build them,
you can archive them,

00:03:09.670 --> 00:03:13.600
and for OS X projects,
you can do unit testing automatically.

00:03:13.670 --> 00:03:17.720
And you can also query your projects
and workspaces for information,

00:03:17.930 --> 00:03:22.300
such as what schemes they define,
what the names of the targets are,

00:03:22.300 --> 00:03:23.590
those kinds of things.

00:03:23.600 --> 00:03:27.510
And Xcode Build is a very rich
tool that has a lot of options,

00:03:27.600 --> 00:03:31.740
and there is an excellent man page,
the standard Unix man

00:03:31.740 --> 00:03:33.360
command for manuals.

00:03:33.460 --> 00:03:35.300
It gives you a lot of information.

00:03:35.300 --> 00:03:37.350
We're going to cover
some of it in this talk,

00:03:37.360 --> 00:03:40.710
but there's a lot more
information using man Xcode Build.

00:03:41.580 --> 00:03:43.640
Okay,
so let me bring up a Terminal window

00:03:43.850 --> 00:03:47.500
because no command line tool session
would be complete without Terminal.

00:03:47.500 --> 00:03:51.970
And I'm just going to show you some
of the most common uses of it and then

00:03:51.970 --> 00:03:54.490
we'll get progressively more advanced.

00:03:54.500 --> 00:03:56.720
So first of all,
Xcode build works like many

00:03:56.720 --> 00:03:59.500
of the other build tools that
you may be familiar with.

00:03:59.690 --> 00:04:02.510
Make or Ant or any of the other
ones like that where you first

00:04:02.510 --> 00:04:06.500
change directory into the directory
that contains your project.

00:04:06.500 --> 00:04:10.450
And then the simplest thing to
do is to just invoke Xcode build

00:04:10.500 --> 00:04:13.680
and that will build your project
using the settings that you had the

00:04:13.680 --> 00:04:15.480
last time you opened it in Xcode.

00:04:15.530 --> 00:04:19.870
So the same thing that would
happen if you hit Command R to

00:04:19.870 --> 00:04:22.390
build and run in Xcode itself.

00:04:22.500 --> 00:04:24.500
So when you do that,
you get a bunch of output.

00:04:24.500 --> 00:04:26.500
The first part of it we see here.

00:04:26.500 --> 00:04:29.750
And that's the build log and so it
shows you the details of everything

00:04:29.750 --> 00:04:31.500
that happened during the build.

00:04:31.500 --> 00:04:34.500
So let's take a look at what
that actually is showing you.

00:04:34.500 --> 00:04:36.500
So first of all, the build log is a
little bit more complex.

00:04:36.500 --> 00:04:39.960
The build log has a hierarchical
structure and at the top level are

00:04:39.960 --> 00:04:43.500
the one or more targets that you're
building as part of that build log.

00:04:43.500 --> 00:04:46.680
It could be just your single app
or it could be a very complicated

00:04:46.680 --> 00:04:50.500
workspace that has 50 projects,
each of which has 10 targets.

00:04:50.500 --> 00:04:53.500
So at the top level, the targets.

00:04:53.580 --> 00:04:57.470
And then for each target,
it's built using one or more commands.

00:04:57.610 --> 00:05:02.410
You could have a very large
project such as the WebKit,

00:05:02.520 --> 00:05:06.500
the project that builds WebKit that
has thousands of compiler invocations.

00:05:06.600 --> 00:05:09.380
But you could also have a target
whose only purpose is to run a

00:05:09.380 --> 00:05:13.500
custom shell script to just produce
some file that you have set up.

00:05:13.500 --> 00:05:16.500
In that case,
it's just one command for the target.

00:05:16.500 --> 00:05:18.130
But in either case,
that's the second level

00:05:18.350 --> 00:05:19.500
underneath the targets.

00:05:19.500 --> 00:05:21.810
And then of course,
we hope that our build completes

00:05:21.930 --> 00:05:24.430
without a single warning or error,
but that's not always the case.

00:05:24.500 --> 00:05:28.500
So if there are diagnostics,
they show up underneath the commands.

00:05:28.500 --> 00:05:31.190
So even when you're looking
at a flat text output,

00:05:31.350 --> 00:05:34.500
that's the basic structure of a command,
of a build log.

00:05:34.500 --> 00:05:38.690
So looking at this build log again,
you see at the top there is a

00:05:39.230 --> 00:05:42.500
fairly handy summary of what
it is you're actually building.

00:05:42.500 --> 00:05:44.500
In this case, just the one target.

00:05:44.500 --> 00:05:47.510
But one of those will show up
at the beginning of each target.

00:05:47.900 --> 00:05:49.230
And then of course the commands.

00:05:49.340 --> 00:05:52.350
Each one has a summary
line at the beginning,

00:05:52.360 --> 00:05:55.060
and then the actual commands
that get run underneath.

00:05:55.060 --> 00:05:59.640
On a console they'll actually wrap,
but I made them not wrap here just

00:05:59.690 --> 00:06:01.800
to show the basic structure of it.

00:06:02.180 --> 00:06:06.610
Further on down we see, for example,
an interface builder compilation.

00:06:06.730 --> 00:06:10.800
Those are resources too that get
compiled into a runtime format.

00:06:10.800 --> 00:06:15.710
A pre-compilation of a header to
speed up the rest of the build,

00:06:15.840 --> 00:06:18.640
and then some compiler commands.

00:06:18.800 --> 00:06:20.890
So if you look at this,
you'll see every little switch

00:06:21.070 --> 00:06:22.800
that Xcode is actually generating.

00:06:22.800 --> 00:06:26.800
So Xcode, when it compiles,
most of you know this, but some may not,

00:06:26.800 --> 00:06:29.420
is actually invoking the same
command line tools that you

00:06:29.450 --> 00:06:31.800
would invoke outside of Xcode.

00:06:31.920 --> 00:06:34.270
And it's passing arguments
that are generated based on the

00:06:34.270 --> 00:06:35.710
configuration of your project.

00:06:35.800 --> 00:06:38.800
So at the bottom here we have
one or more link commands.

00:06:38.800 --> 00:06:40.800
If you're building
something that gets loaded.

00:06:40.800 --> 00:06:42.800
So this is the first
one that gets linked.

00:06:42.800 --> 00:06:44.800
One or more because there could
be multiple architectures.

00:06:44.800 --> 00:06:46.800
And then hopefully the build succeeds.

00:06:46.800 --> 00:06:48.790
So that's the status line at the end.

00:06:48.800 --> 00:06:51.200
So this is really the same thing that
we're seeing in the Xcode console,

00:06:51.210 --> 00:06:51.700
basically.

00:06:52.170 --> 00:06:54.800
The Xcode run log.

00:06:54.800 --> 00:06:58.190
And so at the top you
have some filter fields.

00:06:58.550 --> 00:07:02.000
Just to let you narrow things down,
and then you see the target level here.

00:07:02.040 --> 00:07:04.530
Just trying to draw an association
here between the Xcode build

00:07:04.530 --> 00:07:07.640
output and what you may already
be familiar with in the IDE.

00:07:07.710 --> 00:07:10.560
You see the commands
underneath in the IDE,

00:07:10.560 --> 00:07:12.490
and then the status line at the end.

00:07:12.500 --> 00:07:15.700
So that's really the same as
the build log on the console.

00:07:15.740 --> 00:07:16.650
Except for one thing.

00:07:16.680 --> 00:07:19.700
You don't actually see
the commands in the IDE,

00:07:19.700 --> 00:07:20.440
right?

00:07:20.490 --> 00:07:21.300
Or do you?

00:07:21.350 --> 00:07:22.520
You actually do.

00:07:22.600 --> 00:07:24.730
You see the summary command,
but then there is a little

00:07:24.740 --> 00:07:27.140
widget on the right side,
which you can click,

00:07:27.240 --> 00:07:30.200
and you can actually see the
command that Xcode will execute,

00:07:30.250 --> 00:07:32.500
which is the same thing
you see on the console.

00:07:32.620 --> 00:07:35.660
So if you twist that down
by clicking on the widget,

00:07:35.700 --> 00:07:39.600
you'll see actually the same summary
line as you see on the console.

00:07:39.640 --> 00:07:44.100
You'll see the changing of the
directory into the directory

00:07:44.100 --> 00:07:48.010
that contains the project,
setting environment variables,

00:07:48.010 --> 00:07:49.720
and invoking the full command.

00:07:49.770 --> 00:07:52.450
And here's a little useful tip.

00:07:52.520 --> 00:07:55.920
You can actually copy the commands
from the build log inside.

00:07:55.920 --> 00:07:58.280
You can actually copy the commands
from the build log inside of Xcode and

00:07:58.280 --> 00:07:59.790
paste them into a terminal window to
change the directory to the right place,

00:07:59.870 --> 00:08:02.600
set the right environment variables,
and call the right command.

00:08:02.730 --> 00:08:04.490
This can be useful if
you want to invoke it,

00:08:04.610 --> 00:08:09.240
for example, with extra verbosity to see
exactly what the compiler is doing.

00:08:09.410 --> 00:08:12.450
So that's a useful tip.

00:08:12.590 --> 00:08:15.580
So after having seen the build
log and what the output is,

00:08:15.720 --> 00:08:17.950
one of the questions is,
where do the outputs go?

00:08:18.060 --> 00:08:23.360
If you build and run in Xcode, the IDE,
then Xcode puts them someplace,

00:08:23.480 --> 00:08:27.620
and you can use show in finder
to actually get to the outputs,

00:08:27.620 --> 00:08:30.040
or if you make an archive,
it shows up in the organizer.

00:08:30.060 --> 00:08:32.320
But on the command line,
we need to know where they go.

00:08:32.380 --> 00:08:33.720
So there are three kinds of outputs.

00:08:33.720 --> 00:08:36.640
There are the intermediates, of course,
which are the compiled code

00:08:36.640 --> 00:08:38.040
and the generated sources.

00:08:38.040 --> 00:08:41.820
These are the files that you
don't actually ship to your users.

00:08:41.820 --> 00:08:45.760
They're just there to make the builds
go faster if you do iterative builds.

00:08:46.060 --> 00:08:50.040
And so you can control that using
a build setting called objroot.

00:08:50.040 --> 00:08:52.530
It's kind of an archaic name,
but it's for where the objects go.

00:08:52.540 --> 00:08:55.640
So that's the root directory
where the objects go.

00:08:55.640 --> 00:09:00.660
And there's a shared precomp dur that's
similar for the precompiled headers.

00:09:00.920 --> 00:09:05.390
They're shared because they're shared
between the targets in your workspace.

00:09:05.480 --> 00:09:07.980
The second level of output
are the debug products.

00:09:08.060 --> 00:09:10.940
So these are similar to what
you would ship to your users,

00:09:11.030 --> 00:09:14.520
but they are built maybe
without optimization by default.

00:09:14.660 --> 00:09:16.700
They're built with extra debug symbols.

00:09:16.800 --> 00:09:20.760
And so they're more suitable for
debugging than the release products are.

00:09:20.850 --> 00:09:22.860
So there is a setting that
controls where they go.

00:09:23.060 --> 00:09:25.600
That's the SIM route for
the symbolicated routes.

00:09:25.710 --> 00:09:27.560
And that's also where the DSIM files go.

00:09:27.560 --> 00:09:31.400
These are what the files that contain
the DWARF debug output that get

00:09:31.400 --> 00:09:36.800
included automatically in an archive
when building from Xcode itself.

00:09:36.910 --> 00:09:40.130
The release products go into what
we call the distribution route,

00:09:40.200 --> 00:09:43.290
DST route,
and these are the actual release products

00:09:43.530 --> 00:09:46.360
that are built with full optimization.

00:09:46.480 --> 00:09:48.620
And if you have specified
an install path,

00:09:48.710 --> 00:09:50.800
which you would not do for an app,
but for example,

00:09:50.820 --> 00:09:54.070
if you have a kernel extension,
then they get put underneath the

00:09:54.070 --> 00:09:57.460
dest route in a path which is
equivalent to the install route.

00:09:57.460 --> 00:09:59.950
So that's where the outputs go.

00:10:00.120 --> 00:10:04.740
And so you can customize -- so that's
something you control on an invocation

00:10:04.830 --> 00:10:06.550
basis when you invoke Xcode build.

00:10:06.730 --> 00:10:10.000
But you can also customize your project
and set things that you want to be true

00:10:10.000 --> 00:10:12.300
every time you build with Xcode build.

00:10:12.300 --> 00:10:14.690
And there are two main ways to do that.

00:10:14.810 --> 00:10:17.290
You control that using schemes.

00:10:17.390 --> 00:10:18.260
That's the main way.

00:10:18.490 --> 00:10:21.090
But you can also override
individual build settings.

00:10:21.200 --> 00:10:23.460
So any build setting that
you can set in your project,

00:10:23.460 --> 00:10:25.910
you can actually override on
the Xcode build command line.

00:10:25.920 --> 00:10:27.360
We'll look at detail how to do that.

00:10:27.360 --> 00:10:30.020
And so that involves configuration files.

00:10:30.020 --> 00:10:32.890
There is a flag to Xcode build
to use a particular configuration

00:10:32.890 --> 00:10:34.250
file full of settings.

00:10:34.360 --> 00:10:36.700
But you can also specifically
set architectures,

00:10:36.700 --> 00:10:42.110
SDKs, or any other build settings
that you have the name of.

00:10:43.850 --> 00:10:46.380
So just a quick note about schemes.

00:10:46.490 --> 00:10:49.650
So there will be a session
tomorrow in Marina at 4:30,

00:10:49.860 --> 00:10:53.470
same time as this,
talking in detail about schemes and

00:10:53.470 --> 00:10:55.280
how to put them to good use in Xcode.

00:10:55.430 --> 00:10:59.300
But just briefly here today so the
rest of the content makes sense.

00:10:59.610 --> 00:11:01.990
A scheme is essentially a
collection of targets to build.

00:11:02.210 --> 00:11:05.860
For a simple iOS app,
it would probably be just a single app.

00:11:06.080 --> 00:11:11.250
For something else like client server,
it may be things that have meaning

00:11:11.250 --> 00:11:13.650
to you as a user to go together.

00:11:13.670 --> 00:11:15.680
There's some semantic connection
even though there may not

00:11:15.740 --> 00:11:17.460
be a technical connection.

00:11:17.570 --> 00:11:20.280
So you can collect any arbitrary
collection of targets you

00:11:20.280 --> 00:11:23.160
want into a scheme and say,
"Yep, when I build this scheme,

00:11:23.170 --> 00:11:26.250
I want all these guys built."
And you can then specify a

00:11:26.250 --> 00:11:28.450
configuration to use for building.

00:11:28.560 --> 00:11:32.110
You can specify a different
configuration for archiving.

00:11:32.220 --> 00:11:35.860
Typically you would use debug for debug
builds and release for archive builds.

00:11:35.860 --> 00:11:40.350
You can also specify an optional
collection of tests that you want to run.

00:11:40.350 --> 00:11:42.950
So unit tests are a great
way to test your code.

00:11:42.960 --> 00:11:46.020
Make sure that you don't introduce
any regressions when you make changes.

00:11:46.160 --> 00:11:49.610
And you can specify those
in a scheme as well.

00:11:50.170 --> 00:11:56.570
In addition, you can define anything that
you can run as a shell script,

00:11:56.870 --> 00:12:00.020
you can actually define as a
pre-condition or a pre-action

00:12:00.020 --> 00:12:01.860
or post-processing action.

00:12:01.950 --> 00:12:04.250
So you can say, for example,
that after my build,

00:12:04.420 --> 00:12:08.340
I want to go ahead and upload
my build product to an internal

00:12:08.340 --> 00:12:13.070
staging server I'm going to use
for testing or anything like that.

00:12:13.770 --> 00:12:17.940
So in order to know which schemes
to build from the command line,

00:12:17.940 --> 00:12:21.240
you want to be able to see which
schemes are in the project.

00:12:21.260 --> 00:12:24.840
And both workspaces and
projects can contain schemes.

00:12:25.140 --> 00:12:28.130
So in this case, we're going to list the
schemes in a workspace here.

00:12:28.250 --> 00:12:32.520
So we use the Xcode build command,
and we specify dash workspace to

00:12:32.520 --> 00:12:34.560
give it the name of the workspace.

00:12:34.590 --> 00:12:38.000
And then the list command will
tell you what's in the workspace.

00:12:38.030 --> 00:12:41.740
In this particular workspace,
there are just two schemes.

00:12:41.850 --> 00:12:43.260
There could be other
things in the workspace,

00:12:43.340 --> 00:12:44.720
but that's all we have right here.

00:12:44.800 --> 00:12:47.380
But those names are the actual
names that you would then

00:12:47.380 --> 00:12:49.040
specify on the command line.

00:12:49.050 --> 00:12:52.190
Now, if we look in the IDE,
we see the exact same thing

00:12:52.190 --> 00:12:53.680
in the scheme manager.

00:12:53.880 --> 00:12:58.300
So you have here, for example,
baffle-os10 and baffle-ios, which are,

00:12:58.300 --> 00:13:01.880
in this case,
two sample projects in this workspace.

00:13:02.080 --> 00:13:05.940
So that's the correlation there
with the IDE and the command line.

00:13:05.950 --> 00:13:10.700
And then to use the schemes,
you basically configure it in Xcode,

00:13:10.730 --> 00:13:11.840
and then you use it in Xcode.

00:13:11.840 --> 00:13:12.820
build.

00:13:12.880 --> 00:13:14.490
That's the general pattern here.

00:13:14.960 --> 00:13:18.600
And the Scheme flag is the flag that
you use when you build in Xcode.

00:13:18.600 --> 00:13:20.300
So, pretty straightforward.

00:13:20.430 --> 00:13:24.300
So some ideas for how to customize
Schemes are just to show you some of

00:13:24.300 --> 00:13:25.800
this UI if you're not familiar with it.

00:13:25.910 --> 00:13:28.800
Again, the session tomorrow
at 4:30 gives details.

00:13:28.920 --> 00:13:30.780
But you can set up what
happens when you build,

00:13:30.780 --> 00:13:32.690
you can set up what
happens when you archive.

00:13:32.800 --> 00:13:35.800
And here's an example,
not sure if it's readable,

00:13:35.800 --> 00:13:39.980
but it's an example of invoking a
shell script after building that

00:13:40.370 --> 00:13:45.800
uses SFTP to actually put the
archived binaries up onto a server,

00:13:45.800 --> 00:13:49.800
and then sends out an email letting
you know that a new build is available.

00:13:49.800 --> 00:13:52.380
For example,
you might have this run every night so

00:13:52.380 --> 00:13:55.430
that every morning when you come in,
there's a new build.

00:13:56.970 --> 00:13:58.940
So how do you specify a
scheme on the command line?

00:13:59.070 --> 00:14:01.720
So, well, the scheme option,
as I mentioned.

00:14:01.720 --> 00:14:05.900
And make sure you put the exact
name that you saw in the list

00:14:05.910 --> 00:14:08.670
as output from the list flag.

00:14:09.840 --> 00:14:14.240
Another thing you can specify
as an override are the SDKs.

00:14:14.340 --> 00:14:17.470
So, for example,
you may have a project that you currently

00:14:17.470 --> 00:14:20.380
have set up to build against 10.7,
but you want to try

00:14:20.380 --> 00:14:22.840
building it against 10.8,
see what kind of warnings come out.

00:14:22.900 --> 00:14:26.830
You can see what SDKs are available
for you to build against by

00:14:26.830 --> 00:14:28.880
using the "show SDKs" flag.

00:14:28.900 --> 00:14:31.100
And I know I'm going through
these fairly quickly,

00:14:31.100 --> 00:14:35.390
but these are all documented, again,
in the man page in full detail.

00:14:35.400 --> 00:14:38.950
This is mainly to get you aware
of what settings are available.

00:14:39.210 --> 00:14:42.670
We'll also see later on in the talk how
to put this to practical use in a demo.

00:14:42.800 --> 00:14:45.900
So, I realize I'm going fairly
quickly through these.

00:14:45.910 --> 00:14:48.770
On the left side,
you see the actual description

00:14:48.770 --> 00:14:50.940
of what the SDK is,
and on the right,

00:14:50.940 --> 00:14:54.370
what the actual name of it is,
the identifier that you need

00:14:54.370 --> 00:14:56.220
to pass on the command line.

00:14:56.520 --> 00:15:01.450
And so, use the -sdk flag to
specify one of those.

00:15:03.000 --> 00:16:58.900
[Transcript missing]

00:16:59.430 --> 00:17:02.200
Or, as I mentioned,
you can set it in the environment.

00:17:02.220 --> 00:17:04.550
And in this case,
you want to just set the same thing.

00:17:04.560 --> 00:17:09.500
You export a variable with the same name,
and then just invoke Xcode build.

00:17:09.510 --> 00:17:11.560
And the same thing will happen.

00:17:11.560 --> 00:17:13.060
So there are a lot of build settings.

00:17:13.100 --> 00:17:17.080
And we have great documentation
on the details of that.

00:17:17.090 --> 00:17:19.640
It's a document called Xcode
build settings reference.

00:17:19.640 --> 00:17:22.480
And it's available inside the
Xcode built-in documentation,

00:17:22.480 --> 00:17:23.350
of course.

00:17:23.390 --> 00:17:26.950
It's also available as both
HTML and a PDF file on the

00:17:26.950 --> 00:17:30.040
developer resources PDF file,
so you can put it on your

00:17:30.040 --> 00:17:33.060
iPad and read at the beach,
of course.

00:17:33.220 --> 00:17:35.530
What else could be better?

00:17:35.670 --> 00:17:40.480
So to put this all together,
we looked at different settings here,

00:17:40.480 --> 00:17:43.160
and before we go to a
demo a little bit later,

00:17:43.170 --> 00:17:46.650
I'm going to show you what a realistic
command line invocation of Xcode

00:17:46.650 --> 00:17:48.580
build would look like for real.

00:17:48.600 --> 00:17:51.490
So I'm going to use the
backslash notation here,

00:17:51.490 --> 00:17:54.600
which is the line
continuation in shell syntax.

00:17:54.760 --> 00:17:56.600
So Xcode build, of course.

00:17:56.660 --> 00:17:59.370
And then you need to
specify the workspace,

00:17:59.370 --> 00:18:04.600
again, because your directory may contain
multiple projects and workspaces,

00:18:04.600 --> 00:18:06.600
so you need to tell
Xcode which one to use.

00:18:06.810 --> 00:18:09.600
You'll want to specify
a scheme specifically.

00:18:09.600 --> 00:18:12.510
You don't want to leave that out,
because if you leave it out,

00:18:12.660 --> 00:18:15.600
Xcode will use the active
scheme in the workspace.

00:18:15.600 --> 00:18:18.050
But the active scheme is what you've
chosen in the pop-up in Xcode,

00:18:18.080 --> 00:18:20.590
so that means that you don't
really get predictable results.

00:18:20.600 --> 00:18:24.580
You get whatever the active chosen
scheme is for you the last time

00:18:24.580 --> 00:18:26.590
you open it in the workspace.

00:18:26.600 --> 00:18:30.580
And again, this automation,
a lot of it is about predictability,

00:18:30.580 --> 00:18:30.940
right?

00:18:30.980 --> 00:18:33.760
So you want to make sure that you really
specify what it is you want to build,

00:18:33.760 --> 00:18:36.600
especially if you're doing
that through a nightly build

00:18:36.600 --> 00:18:38.180
script or something like that.

00:18:38.680 --> 00:18:41.560
The next thing is you can
optionally specify an SDK.

00:18:41.560 --> 00:18:43.900
If you don't specify one,
it will use whatever

00:18:43.900 --> 00:18:45.560
is set in the target.

00:18:45.560 --> 00:18:47.580
But if you specify one,
like in this case,

00:18:47.610 --> 00:18:51.290
you can actually test build against
a different SDK that may be useful

00:18:51.370 --> 00:18:54.320
to see what warnings show up,
those kinds of things.

00:18:54.440 --> 00:18:58.470
And then I'm going to override the three
build settings that I mentioned earlier:

00:18:58.580 --> 00:19:00.740
obdroute, symroute, and destroute.

00:19:00.840 --> 00:19:03.560
In real life,
you wouldn't want to send those

00:19:03.670 --> 00:19:07.200
outputs to temp because that will go
away when your machine is rebooted.

00:19:07.310 --> 00:19:09.960
If you're doing a nightly build,
you'll actually want to put

00:19:09.960 --> 00:19:12.570
those someplace that you can
get back to if there turns out

00:19:12.570 --> 00:19:14.230
to be a problem with the build.

00:19:15.570 --> 00:19:17.960
So there's one more question, though,
that needs to be answered.

00:19:17.960 --> 00:19:22.720
And that is, if I just run Xcode build,
well, which Xcode build?

00:19:22.720 --> 00:19:25.500
There's one Xcode build for each Xcode.

00:19:25.590 --> 00:19:28.460
So all of you have Xcode 4.3.

00:19:28.460 --> 00:19:30.320
As of yesterday, you have 4.3.3.

00:19:30.320 --> 00:19:32.900
That's the latest GM version of Xcode.

00:19:32.900 --> 00:19:35.590
That's the one you need to use
to submit to the App Store.

00:19:35.860 --> 00:19:39.620
It's the one you need to use for
the final build of your apps.

00:19:39.620 --> 00:19:42.740
And it's the production Xcode.

00:19:42.740 --> 00:19:46.020
And so you'll still want to
have that on your system.

00:19:46.060 --> 00:19:50.170
But as of yesterday,
you also have an Xcode 4.5 preview.

00:19:50.220 --> 00:19:52.040
So now you have two Xcodes on the system.

00:19:52.040 --> 00:19:58.580
And I'm sure you're eager to try out
what all the new things are in Xcode 4.5,

00:19:58.580 --> 00:19:59.540
the SDKs.

00:19:59.580 --> 00:20:02.350
But you still need to be able to
choose which Xcode build to invoke,

00:20:02.360 --> 00:20:06.120
which build system,
which set of tools get invoked.

00:20:06.120 --> 00:20:09.500
And each of these Xcodes contains
inside of it a set of the low-level

00:20:09.500 --> 00:20:12.700
command line tools-- the compiler,
which is Clang.

00:20:12.700 --> 00:20:13.720
Clang for us.

00:20:13.760 --> 00:20:19.650
The linker, lex, yak, make,
even some subversion and get.

00:20:19.660 --> 00:20:24.290
Those commands are all inside
of the Xcode app wrapper.

00:20:24.370 --> 00:20:28.020
But there's another set of them
as well that are in the preview.

00:20:28.050 --> 00:20:29.900
So that's a preview
release of the compiler,

00:20:29.900 --> 00:20:30.950
the linker, et cetera.

00:20:30.960 --> 00:20:35.790
And you don't want to use that
for a production build of your OS.

00:20:35.930 --> 00:20:38.950
So which Xcode build gets chosen?

00:20:39.100 --> 00:20:42.450
And the answer is there's
a tool called Xcode Select.

00:20:42.560 --> 00:20:43.880
And that is in user bin.

00:20:44.110 --> 00:20:47.600
And what it does is it sets the default
Xcode that gets used when you type

00:20:47.600 --> 00:20:51.000
Xcode build on the Terminal window.

00:20:51.060 --> 00:20:54.490
And it has an option called print
path that will just give you what

00:20:54.490 --> 00:20:56.330
is the path of the current one.

00:20:56.460 --> 00:21:01.790
So assuming you installed Xcode,
the GM release from the App Store,

00:21:01.900 --> 00:21:05.770
it will be an application's Xcode,
and the developer directory

00:21:05.880 --> 00:21:08.320
underneath it will be the default.

00:21:08.410 --> 00:21:13.600
But you can switch that to be
the 4.5 preview in this case,

00:21:13.610 --> 00:21:16.250
and you can just provide
the path to the app,

00:21:16.250 --> 00:21:20.330
and then Xcode Select will actually set
the developer path underneath there to

00:21:20.330 --> 00:21:27.970
be the place where it looks for headers,
libraries, for the command line tools by

00:21:27.990 --> 00:21:31.300
default when you're building
from the command line.

00:21:31.460 --> 00:21:35.360
So now if I say Xcode build-version,
you'll see that this has

00:21:35.480 --> 00:21:37.290
been set to the preview.

00:21:37.550 --> 00:21:40.860
So that sets it for the entire system.

00:21:40.860 --> 00:21:44.890
And what it actually does is it
sets the default that's used by a

00:21:44.890 --> 00:21:47.700
bunch of tools that are in user bin.

00:21:47.830 --> 00:21:51.500
So there's an Xcode build in user
bin that calls the right one in

00:21:51.500 --> 00:21:53.790
whatever Xcode select you have chosen.

00:21:53.890 --> 00:21:56.700
There's XCRUN, which is a tool I haven't
mentioned yet in this talk,

00:21:56.820 --> 00:21:58.580
which is also very handy.

00:21:58.840 --> 00:22:00.440
I'll talk about it in a moment.

00:22:00.530 --> 00:22:05.320
OpenDiff is a tool that lets you
open up -- it's the same as diff,

00:22:05.510 --> 00:22:08.030
but instead of showing you the
differences graphically -- or

00:22:08.030 --> 00:22:11.520
differences in the console,
it opens it up inside of a tool

00:22:11.520 --> 00:22:15.000
called File Merge and shows
your graphical difference.

00:22:15.080 --> 00:22:20.470
Instruments is the command line interface
to the Instruments developer tools app.

00:22:20.570 --> 00:22:24.130
And there are also a variety of other
tools in there that look at the setting.

00:22:24.220 --> 00:22:27.730
And again, that's all on the man pages.

00:22:27.800 --> 00:22:29.840
XCRUN is particularly interesting.

00:22:29.840 --> 00:22:32.480
And so let's take a closer look at that.

00:22:32.510 --> 00:22:37.490
So Xcode build is what you use when
you want to simply build or operate on

00:22:37.490 --> 00:22:41.320
an entire Xcode workspace or project.

00:22:41.360 --> 00:22:43.670
XCRun is finer grained than that.

00:22:44.010 --> 00:22:47.700
It's a tool that lets you run
a particular command line tool

00:22:48.050 --> 00:22:49.390
that lives inside of Xcode.

00:22:49.530 --> 00:22:52.800
So the compiler, the linker,
those kinds of things.

00:22:52.850 --> 00:22:55.980
It's context sensitive,
meaning that it depends on what build

00:22:55.980 --> 00:23:00.840
settings you pass in as override,
it depends on the SDK you've chosen,

00:23:00.840 --> 00:23:06.240
and returns you the appropriate
tool to use for those conditions.

00:23:06.290 --> 00:23:10.530
And it also falls back on using
the standard Unix path variable,

00:23:10.690 --> 00:23:14.050
so that if you ask for
the path of a command that

00:23:14.050 --> 00:23:17.940
doesn't exist inside of Xcode,
it will return one from the system.

00:23:17.940 --> 00:23:22.380
So you always get a good result back
if there's anything at all in the path.

00:23:22.440 --> 00:23:23.520
There are two modes to use this.

00:23:23.720 --> 00:23:26.130
One is to just get back
the path of the tool.

00:23:26.250 --> 00:23:29.940
So that's the find command,
the find option to that.

00:23:29.990 --> 00:23:35.340
The second mode is to
prefix the path of the tool.

00:23:35.340 --> 00:23:38.100
So you prefix the name
of the tool with XCRun,

00:23:38.130 --> 00:23:39.630
and then provide the arguments.

00:23:39.700 --> 00:23:42.540
So in that mode,
XCRun will look up the tool,

00:23:42.540 --> 00:23:46.250
find the path,
and then invoke it with the arguments.

00:23:47.450 --> 00:23:52.410
So an example of that is finding
the CC alias for the Client

00:23:52.410 --> 00:23:56.550
Compiler will return the full
path that's inside of Xcode.

00:23:57.210 --> 00:24:01.970
But invoking it directly is if we just
invoke the compiler prefix with XCRUN,

00:24:01.970 --> 00:24:03.600
we'll just invoke the compiler.

00:24:03.760 --> 00:24:07.080
And this can be particularly
useful when you are configuring a

00:24:07.080 --> 00:24:09.000
makefile or something like that.

00:24:10.200 --> 00:24:15.100
Another use of XCRUN is for
the version control commands.

00:24:15.200 --> 00:24:18.490
So if you recall,
I mentioned that Xcode also includes Git,

00:24:18.490 --> 00:24:21.580
SVN, and those commands inside of it.

00:24:21.720 --> 00:24:25.950
So if you say XCRUN find Git,
it will find the one that's inside

00:24:25.950 --> 00:24:28.440
of whatever Xcode you've selected.

00:24:28.520 --> 00:24:32.640
And so when you go to run
Git from the command line,

00:24:32.640 --> 00:24:37.490
then you can use XCRUN as a prefix,
but you can also take advantage

00:24:37.490 --> 00:24:42.100
of shell aliases and set up,
in this case, this is bash syntax,

00:24:42.100 --> 00:24:43.440
which is the default shell.

00:24:43.530 --> 00:24:47.400
So you can set up that Git is
an alias for XCRUN Git.

00:24:47.550 --> 00:24:52.400
So in this case, every time you type Git,
it's actually going to call XCRUN Git.

00:24:52.480 --> 00:24:55.090
So you'll get whatever Xcode
has been selected at that time.

00:24:55.230 --> 00:24:59.410
So then if I just say Git-version,
it actually calls XCRUN Git,

00:24:59.600 --> 00:25:04.430
which redirects inside of Xcode
and invokes the right one.

00:25:06.930 --> 00:25:10.400
But there's one caveat here,
or something to keep in mind.

00:25:10.530 --> 00:25:13.160
It's really convenient to have
a default Xcode when you're

00:25:13.160 --> 00:25:15.790
just typing at the Terminal,
and you just type Xcode

00:25:15.790 --> 00:25:17.440
build and those things.

00:25:17.580 --> 00:25:21.160
But again, if you're automating this and
running this from a nightly script,

00:25:21.270 --> 00:25:24.540
you really want to make sure that
you're invoking a specific Xcode build.

00:25:24.640 --> 00:25:27.480
Because otherwise,
if somebody uses Xcode select to

00:25:27.500 --> 00:25:31.860
change which Xcode is the default,
you may get an unexpected one.

00:25:31.990 --> 00:25:34.700
So to do that,
what you want to do is you want to

00:25:34.700 --> 00:25:38.920
set the developer dir environment
variable in the environment,

00:25:38.990 --> 00:25:42.490
or you could just pass it directly.

00:25:42.570 --> 00:25:44.850
There's different shell
notations for doing this,

00:25:44.850 --> 00:25:46.660
but one is to use the export command.

00:25:46.790 --> 00:25:50.860
So if you set that in the environment,
then Xcode build and Xcode run

00:25:50.860 --> 00:25:54.230
and all the other tools will
look at that in preference to

00:25:54.390 --> 00:25:56.670
whatever you have Xcode selected.

00:25:56.890 --> 00:25:59.890
So setting developer dir in the
environment overrides whatever

00:25:59.890 --> 00:26:01.290
has been Xcode selected.

00:26:01.390 --> 00:26:03.940
So this means that for a particular
invocation of Xcode build,

00:26:03.940 --> 00:26:05.900
you can guarantee that
you get a certain one.

00:26:05.950 --> 00:26:10.600
That gets important for automated builds,
as we'll see in the demo.

00:26:12.050 --> 00:26:16.680
And then of course XCRUN after
this will find the right one.

00:26:16.800 --> 00:26:19.000
And on to Xcode build.

00:26:19.870 --> 00:26:21.580
So with that,
I'd like to ask my colleague

00:26:21.640 --> 00:26:24.860
Daniel Dunbar to come up and
provide a more concrete example

00:26:24.860 --> 00:26:26.610
of putting some of this to use.

00:26:26.800 --> 00:26:28.180
Thanks.

00:26:33.110 --> 00:26:34.070
All right.

00:26:34.090 --> 00:26:34.890
Thanks, Anders.

00:26:34.900 --> 00:26:35.940
My name's Daniel Dunbar.

00:26:35.940 --> 00:26:38.060
I'm an engineer on the
Apple compiler team.

00:26:38.060 --> 00:26:41.300
And what I want to do is make some
of the ideas Anders talked about a

00:26:41.300 --> 00:26:44.980
little more concrete by giving an
example of automating Xcode build,

00:26:45.070 --> 00:26:47.800
and, in particular,
using Xcode build within the

00:26:47.800 --> 00:26:49.980
context of continuous integration.

00:26:50.110 --> 00:26:53.810
So I hope a lot of you already know
the term continuous integration.

00:26:53.910 --> 00:26:56.860
But if not,
here's a slightly formal definition.

00:26:56.860 --> 00:26:59.930
So continuous integration,
also referred to as CI,

00:27:00.070 --> 00:27:04.300
means defining a continuous process
for integrating and applying quality

00:27:04.300 --> 00:27:06.340
checks to software development.

00:27:06.340 --> 00:27:07.820
What does that actually mean?

00:27:07.820 --> 00:27:10.230
For most developers,
continuous integration is

00:27:10.230 --> 00:27:11.740
a pretty simple process.

00:27:11.740 --> 00:27:15.590
You're working, you're developing commits
to your source repository.

00:27:15.660 --> 00:27:18.730
And then somewhere else there's
a continuous integration server

00:27:18.980 --> 00:27:20.620
which is watching that repository.

00:27:20.770 --> 00:27:23.240
And when you make a new commit,
it's going to automatically

00:27:23.370 --> 00:27:25.110
dispatch a build of your software.

00:27:25.760 --> 00:27:28.850
Typically you'll run any automated
tests that you have available.

00:27:28.940 --> 00:27:32.100
And then finally usually
you'll publish those either for

00:27:32.100 --> 00:27:34.850
deployment or for further testing.

00:27:35.340 --> 00:27:37.880
So if you're new to
continuous integration,

00:27:37.880 --> 00:27:40.600
you may think, OK,
when would that be useful for me?

00:27:40.700 --> 00:27:44.490
Well, there's a very compelling
example we have here at WWDC.

00:27:44.620 --> 00:27:47.640
So a common problem is,
as Anders mentioned,

00:27:47.700 --> 00:27:49.320
you have the Xcode GM tools.

00:27:49.400 --> 00:27:51.820
You have Xcode 4.3,
and you need to be using

00:27:51.820 --> 00:27:53.280
that to work on your app.

00:27:53.380 --> 00:27:56.070
But you might also want to start
experimenting with the new preview.

00:27:56.080 --> 00:27:57.700
Maybe you're going to
write some test code.

00:27:57.740 --> 00:28:01.120
Maybe you're just going to check
how it builds against the new SDK.

00:28:01.180 --> 00:28:03.660
And so you'd like to build with
both versions of the tools,

00:28:03.690 --> 00:28:05.980
make sure everything keeps working.

00:28:06.030 --> 00:28:08.610
Also,
I know a lot of developers have code,

00:28:08.610 --> 00:28:12.170
or some part of code,
that's shared between a product

00:28:12.170 --> 00:28:14.400
for OS X and a product for iOS.

00:28:14.470 --> 00:28:19.600
If you make a change to the shared code,
then you don't want to always have to

00:28:19.600 --> 00:28:24.560
switch to another target to make sure you
didn't break the build on that platform.

00:28:24.610 --> 00:28:27.750
And that would be disruptive
to your development.

00:28:27.930 --> 00:28:28.850
So how can we solve this?

00:28:29.000 --> 00:28:30.780
Well, it's pretty straightforward.

00:28:30.840 --> 00:28:34.870
We can use Xcode build in conjunction
with a continuous integration system

00:28:35.050 --> 00:28:37.690
to automatically do these builds.

00:28:37.740 --> 00:28:40.020
And we'll give an example
of that in a second.

00:28:40.090 --> 00:28:43.190
So before I get to the example,
there's a couple important points

00:28:43.190 --> 00:28:46.120
to remember when you're going
to try and automate Xcode build.

00:28:46.170 --> 00:28:50.450
And this is sort of just reiterating some
of the points Anders mentioned before.

00:28:50.720 --> 00:28:53.390
But these are things that are
worth keeping in mind when you

00:28:53.390 --> 00:28:55.480
want to automate the build.

00:28:55.500 --> 00:28:59.070
The first one is you should almost
always be setting developer dir.

00:28:59.230 --> 00:29:01.430
You want to make sure that
you're building against a very

00:29:01.430 --> 00:29:05.080
specific version of Xcode,
not whatever was most recently

00:29:05.090 --> 00:29:07.260
selected on the system.

00:29:07.280 --> 00:29:11.100
Also, make sure you use the appropriate
options to set the workspace,

00:29:11.100 --> 00:29:13.180
the scheme, and the SDK.

00:29:13.510 --> 00:29:16.080
And finally,
you probably want to use build settings

00:29:16.180 --> 00:29:17.860
to control where the output files go.

00:29:17.880 --> 00:29:21.410
You don't want them to go in
the default derived data folder.

00:29:21.730 --> 00:29:23.680
Generally,
you want them to go in a specific

00:29:23.680 --> 00:29:27.730
directory that's going to be managed
by your continuous integration system.

00:29:27.970 --> 00:29:30.940
There are two other points
that are a little more subtle.

00:29:30.940 --> 00:29:34.670
Oh, sorry, the settings,
as Anders mentioned, are destroot,

00:29:34.730 --> 00:29:37.390
obstrut, symroot, and sharedprecomster.

00:29:37.590 --> 00:29:42.180
So there's two other slightly
more obscure points that

00:29:42.180 --> 00:29:44.600
I just want to make clear.

00:29:44.750 --> 00:29:49.730
So usually a continuous integration
system runs as an alternate user.

00:29:49.850 --> 00:29:53.450
So you need to make sure that that
user account on the system has

00:29:53.550 --> 00:29:55.800
accepted the license agreement.

00:29:55.800 --> 00:29:58.800
If you have complete control over the
system and you know all the users,

00:29:58.800 --> 00:30:02.810
you can also accept the license agreement
for all the users on the system by

00:30:02.810 --> 00:30:05.590
running sudo xcode build-license.

00:30:05.740 --> 00:30:10.550
So that will accept the license agreement
for all of the users on the system.

00:30:10.710 --> 00:30:13.910
The other important point is if
you're going to do builds for iOS,

00:30:13.910 --> 00:30:18.000
then code signing needs access to
appropriate development certificates.

00:30:18.160 --> 00:30:20.860
And a full discussion of this is
outside the scope of this talk,

00:30:20.990 --> 00:30:24.970
but the tools that you would need to
use to do that are keychain access,

00:30:25.030 --> 00:30:28.260
which manages the keychains
that have the certificates,

00:30:28.410 --> 00:30:31.670
and then there's a command line
tool called security that lets

00:30:31.670 --> 00:30:33.700
you access those certificates.

00:30:34.040 --> 00:30:38.330
So with those prefaces out of the way,
I'm going to go ahead and switch

00:30:38.370 --> 00:30:42.730
to the demo machine and look at
an example of actually setting up

00:30:42.730 --> 00:30:45.240
a continuous integration system.

00:30:45.250 --> 00:30:48.900
So the continuous integration system
here I'm using here is called Jenkins.

00:30:49.040 --> 00:30:54.500
There are a lot of free
and open source -- Cool.

00:30:54.770 --> 00:30:58.700
There are a lot of free and open source
continuous integration systems out there.

00:30:58.700 --> 00:31:01.700
Some other popular ones are
Buildbot or Cruise Control.

00:31:01.820 --> 00:31:04.870
The basic mechanics of all
of them are very similar.

00:31:04.960 --> 00:31:08.680
So what I'm showing here should apply in
almost any continuous integration system.

00:31:08.700 --> 00:31:12.690
So in this case, this system is installed
on the local machine here.

00:31:12.690 --> 00:31:15.800
Generally this would be on a
server on your private network,

00:31:15.950 --> 00:31:18.700
but for the purposes of the demo,
it's just on the machine right here.

00:31:18.960 --> 00:31:22.590
And what I have here is Safari,
and this is showing the

00:31:22.650 --> 00:31:24.440
web access to the server.

00:31:24.770 --> 00:31:27.860
So what we're going to do is
we're going to start by creating

00:31:27.860 --> 00:31:29.700
a new job for our test project.

00:31:29.700 --> 00:31:32.900
I'm going to click New Job here,
and I'm going to say I'm

00:31:32.960 --> 00:31:34.700
creating a job for Baffle.

00:31:34.700 --> 00:31:35.700
That's the name of our project.

00:31:35.700 --> 00:31:38.660
And I'm going to say I want to
build a multi-configuration project.

00:31:38.850 --> 00:31:41.190
That just means that we're
going to end up doing multiple

00:31:41.190 --> 00:31:42.700
builds from the same sources.

00:31:42.700 --> 00:31:44.700
I'm going to click OK.

00:31:44.700 --> 00:31:47.650
And then we need to define the
full configuration for our project.

00:31:47.750 --> 00:31:49.670
So I'll start with a simple description.

00:31:49.730 --> 00:31:51.600
As you can see,
it's an amazing word game.

00:31:51.700 --> 00:31:56.380
And the first thing we need to do is tell
the continuous integration system where

00:31:56.390 --> 00:31:58.610
to find the sources for our project.

00:31:58.700 --> 00:32:01.890
Again, because it's a demo,
I just have the SVN repository

00:32:01.970 --> 00:32:03.700
set up on the local machine.

00:32:03.700 --> 00:32:07.590
Normally this would be
out on your network.

00:32:07.930 --> 00:32:11.400
So that's the path to the
SVN repository on this machine.

00:32:11.570 --> 00:32:16.310
And then I also need to tell the
system how often it should look for

00:32:16.480 --> 00:32:18.760
changes in the source repository.

00:32:18.810 --> 00:32:21.490
Again, because it's a demo,
I'm just going to say,

00:32:21.490 --> 00:32:23.790
why don't you check every single minute?

00:32:24.540 --> 00:32:27.200
So now we're going to
define a build variable.

00:32:27.300 --> 00:32:31.790
This is a custom variable that we're
going to use eventually to select what

00:32:31.930 --> 00:32:33.640
version of Xcode to build against.

00:32:33.750 --> 00:32:35.910
So for now,
I'm just going to give this build

00:32:35.910 --> 00:32:39.330
variable something called XcodeAppName,
and the value I'm going

00:32:39.380 --> 00:32:40.580
to give it is just Xcode.

00:32:40.800 --> 00:32:43.660
You'll see in a minute what
I'm going to use this for.

00:32:44.130 --> 00:32:47.090
So finally,
the last and really the important part,

00:32:47.090 --> 00:32:49.930
and the part that relates to this talk,
is we need to define how

00:32:50.010 --> 00:32:51.540
do we build our project.

00:32:51.660 --> 00:32:55.960
And generally, you're going to do this by
writing some kind of shell script.

00:32:57.200 --> 00:33:00.660
So let's start by just taking the
commands that Anders showed before

00:33:00.910 --> 00:33:03.340
and integrating them into this script.

00:33:03.420 --> 00:33:07.100
So we'll start by setting the
developer dir environment variable.

00:33:07.100 --> 00:33:11.930
And you can see what I'm doing here is
just using that Xcode app name variable

00:33:11.930 --> 00:33:16.600
I defined before to automatically
derive the correct developer dir path.

00:33:16.600 --> 00:33:21.540
So in this case, it's going to expand to
applications developer.app,

00:33:21.560 --> 00:33:25.100
and then the correct Xcode
build will get invoked.

00:33:25.100 --> 00:33:29.100
And then the only other thing we need
to do is set up the call to Xcode build.

00:33:29.100 --> 00:33:32.100
So this should look very similar
to what Anders showed before.

00:33:32.100 --> 00:33:36.100
We're calling Xcode build,
we're setting -- passing the workspace,

00:33:36.100 --> 00:33:38.710
passing a scheme,
and then we're setting up all

00:33:38.710 --> 00:33:43.080
build setting overrides so that the
outputs go in the directory we want.

00:33:43.170 --> 00:33:45.170
And in this case,
we're using one additional

00:33:45.170 --> 00:33:49.060
environment variable workspace here,
and that's just a variable which has

00:33:49.160 --> 00:33:51.920
automatically been provided by Jenkins,
and it says where it

00:33:51.920 --> 00:33:53.090
wants our outputs to go.

00:33:53.100 --> 00:33:57.080
So with that out of the way,
I'm going to go ahead and click save,

00:33:57.110 --> 00:33:58.100
and let's kick off a build.

00:33:58.100 --> 00:34:01.090
I'm going to click build now,
and in a few seconds,

00:34:01.200 --> 00:34:03.080
you'll see a build has started.

00:34:03.130 --> 00:34:07.100
I can click on that,
and then I can navigate to the build log.

00:34:07.100 --> 00:34:09.480
And what you see here is pretty
typical of what you would see in

00:34:09.480 --> 00:34:11.100
any continuous integration system.

00:34:11.100 --> 00:34:16.040
The first thing it's doing is running a
local -- an SVN checkout of our project.

00:34:16.190 --> 00:34:19.100
You can see it's getting the shared code,
the shared resources.

00:34:19.130 --> 00:34:21.100
And if I scroll down,
then you'll see what it's doing

00:34:21.100 --> 00:34:21.100
after that is embedding the build.

00:34:21.100 --> 00:34:25.100
And it's just running the
shell script we ran before,

00:34:25.100 --> 00:34:29.040
or that we defined before.

00:34:29.100 --> 00:34:32.100
So it's setting developer dir,
and it's calling Xcode build.

00:34:32.100 --> 00:34:36.100
And everything after that is just the
build log output from Xcode build,

00:34:36.100 --> 00:34:39.330
which is the same thing you would
have seen -- very similar to what

00:34:39.330 --> 00:34:41.100
you would have seen in the IDE.

00:34:41.190 --> 00:34:44.870
And if we scroll down to the bottom,
then --

00:34:46.370 --> 00:34:50.340
If we scroll down to the bottom,
then you'll see that the build

00:34:50.340 --> 00:34:54.680
succeeded and the continuous
integration system declared success.

00:34:55.300 --> 00:34:58.800
Pretty simple.

00:34:58.800 --> 00:35:00.440
But that's just one build.

00:35:00.440 --> 00:35:02.680
What we wanted was a
more complicated matrix.

00:35:02.680 --> 00:35:04.580
So let's go ahead and set that up.

00:35:04.580 --> 00:35:08.410
I'm going to go back to our
project and click configure again.

00:35:08.410 --> 00:35:14.880
And the first thing we're going to do is
just add to this to the Xcode app name.

00:35:14.880 --> 00:35:18.670
We're going to say we also want
to build against Xcode 4.5 DP1.

00:35:18.910 --> 00:35:24.260
That's the default name of the Xcode
4.5 preview that you got yesterday.

00:35:24.260 --> 00:35:27.140
So we're also going to
add a new build variable.

00:35:27.140 --> 00:35:31.200
We're going to call it SDK name and
we're going to put in the values of

00:35:31.200 --> 00:35:33.280
the SDKs we want to build against.

00:35:33.280 --> 00:35:38.780
So in this case, I'm putting in Mac OS X,
iPhone simulator and iPhone OS.

00:35:38.780 --> 00:35:41.200
And one thing that
Anders didn't mention before,

00:35:41.200 --> 00:35:44.410
when you pass the SDK name,
you can actually just pass it without

00:35:44.480 --> 00:35:50.270
the version and Xcode will use whatever
the most recent version of the SDK is.

00:35:50.520 --> 00:35:54.820
So now I'm going to update my
build script to use that variable.

00:35:54.820 --> 00:35:58.660
And the things I need to change are the
scheme here has been hard-coded to OS X.

00:35:58.770 --> 00:36:02.400
So we're going to have to fix that,
and we also need to pass the SDK option.

00:36:02.440 --> 00:36:07.400
So let's start by deriving the correct
scheme based on the SDK name variable.

00:36:07.400 --> 00:36:09.400
And this is just a little
bit of shell programming.

00:36:09.400 --> 00:36:12.240
If you're not familiar with shell syntax,
that's okay.

00:36:12.450 --> 00:36:15.400
It's pretty easy to figure it out.

00:36:15.400 --> 00:36:18.500
So all we're doing is we're testing
if the SDK name is Mac OS X,

00:36:18.500 --> 00:36:22.390
then we're going to say the
scheme name is baffle-osX.

00:36:22.400 --> 00:36:25.400
Otherwise, the scheme name is baffle-ios.

00:36:25.410 --> 00:36:28.730
And so now we just need to update this.

00:36:30.240 --> 00:36:32.860
So here's our new build command.

00:36:33.000 --> 00:36:36.570
So we passed the workspaces before,
and this time we pass in the

00:36:36.600 --> 00:36:40.380
derived scheme name variable,
we pass in the SDK name,

00:36:40.590 --> 00:36:42.340
and everything else is the same.

00:36:42.460 --> 00:36:45.550
So when we save this now,
you'll see that Jenkins shows us

00:36:45.550 --> 00:36:48.940
a table of all six configurations
that are defined here.

00:36:49.030 --> 00:36:51.740
There's two versions of Xcode,
and there's three SDKs

00:36:51.740 --> 00:36:53.160
we want to build against.

00:36:53.300 --> 00:36:57.100
So let's go ahead and kick off
another build and see how things do.

00:36:57.140 --> 00:37:00.300
Again, after a few seconds,
the build should show up.

00:37:00.450 --> 00:37:02.360
And we'll click here,
and what's happening is the

00:37:02.450 --> 00:37:05.860
continuous integration system is
automatically dispatching the builds.

00:37:06.000 --> 00:37:09.570
And this machine,
it's decided to just do two at once,

00:37:09.710 --> 00:37:13.830
and it's sort of randomly picked
two of the iPhone OS -- the

00:37:13.830 --> 00:37:16.560
iOS versions in the preview.

00:37:16.680 --> 00:37:19.800
So what you can see here is those
builds have actually failed.

00:37:19.930 --> 00:37:21.300
Red indicates failure.

00:37:21.390 --> 00:37:23.120
So let's go ahead and
see what that looks like.

00:37:23.120 --> 00:37:27.120
So if we go to console output
and we view as plain text,

00:37:27.120 --> 00:37:31.670
so now if I scroll down to the bottom,
what you can see is Xcode build is

00:37:31.730 --> 00:37:33.020
reporting this build has failed.

00:37:33.380 --> 00:37:36.260
Because Xcode build is
returning an error in that case,

00:37:36.540 --> 00:37:39.180
Jenkins is also saying, oh,
the build failed.

00:37:39.180 --> 00:37:43.180
And what happened is there's two
compile commands that failed.

00:37:43.180 --> 00:37:46.770
An easy way to find them is just
to search for error colon in

00:37:46.770 --> 00:37:53.080
a build log that quickly takes
you to the compiler output.

00:37:53.080 --> 00:37:55.540
And what happens is that the compiler
output is saying that there's multiple

00:37:55.600 --> 00:37:57.080
declarations of methods contains word.

00:37:57.080 --> 00:38:00.910
So you may be wondering, well,
how come the build succeeded before?

00:38:01.300 --> 00:38:05.080
Well, remember,
this was the build against Xcode 4.5.

00:38:05.080 --> 00:38:07.400
Every time we come out
with a new compiler,

00:38:07.400 --> 00:38:10.960
there are almost always new
warnings or improved diagnostics.

00:38:11.080 --> 00:38:17.080
And so this is a new diagnostic that got
added in the Xcode 4.5 version of Clang.

00:38:17.080 --> 00:38:19.510
And because I build my
project with -w error,

00:38:19.510 --> 00:38:20.940
warnings become errors.

00:38:21.100 --> 00:38:22.880
And so that caused this project to fail.

00:38:23.040 --> 00:38:26.040
So let's just go ahead and fix that.

00:38:26.040 --> 00:38:28.040
So I'll start Xcode 4.5.

00:38:28.040 --> 00:38:30.990
And you can see I've already
got it set to open my project.

00:38:31.310 --> 00:38:34.060
And let me just kick off a build here.

00:38:34.670 --> 00:38:38.580
So very quickly, the build's done,
and you can see that the same

00:38:38.580 --> 00:38:40.650
diagnostic is shown here in Xcode.

00:38:40.830 --> 00:38:42.960
And this is a pretty obvious error.

00:38:42.960 --> 00:38:46.300
It turns out that there was just
probably a paste error and there's

00:38:46.300 --> 00:38:49.220
a duplicate version of the method,
and Clang has just decided

00:38:49.220 --> 00:38:52.500
to warn on this because it's
a code cleanliness issue.

00:38:52.630 --> 00:38:55.730
So let's just delete that,
and then let's commit this

00:38:55.880 --> 00:38:57.640
to our local repository.

00:38:57.760 --> 00:39:02.690
I'll type a quick message,
"Fix a duplicated method name."

00:39:05.780 --> 00:39:07.000
And hit commit.

00:39:07.140 --> 00:39:11.770
So again,
that went to the local SVN repository.

00:39:12.170 --> 00:39:17.980
Let me switch back now to
the dashboard of Jenkins.

00:39:18.570 --> 00:39:23.390
So as you remember, before,
when we defined the SVM repository,

00:39:23.390 --> 00:39:28.500
we also set up a source control
management polling behavior.

00:39:28.630 --> 00:39:32.380
So any continuous integration system
is generally going to want to have

00:39:32.380 --> 00:39:34.200
some way to watch for commits.

00:39:34.320 --> 00:39:36.940
And so this system is
just polling every minute.

00:39:36.940 --> 00:39:40.090
And so what you can see here is
that now it's already automatically

00:39:40.090 --> 00:39:44.540
scheduled build number three because
it saw I had committed a new change,

00:39:44.580 --> 00:39:48.100
and without me having to do anything,
it's kicked off that build.

00:39:48.110 --> 00:39:51.400
And if I click this now, you can see,
in fact, already four of the

00:39:51.400 --> 00:39:54.210
builds are already done,
and they've all succeeded.

00:39:54.320 --> 00:39:57.100
And now every build is finished,
and they've all succeeded.

00:39:57.290 --> 00:40:00.680
So I made a change to the code
I built and tested against one

00:40:00.870 --> 00:40:05.110
configuration in one version of Xcode,
but the automated system handled

00:40:05.110 --> 00:40:09.640
automatically doing the builds
in the six flavors I cared about.

00:40:09.660 --> 00:40:14.720
And so I hope that gives you an
idea of why you might want to use

00:40:14.790 --> 00:40:19.430
a continuous integration system and
how Xcode build can fit into that.

00:40:19.530 --> 00:40:23.420
And so with that,
let's switch back to the slides.

00:40:23.560 --> 00:40:26.480
So far,
we've talked just about Xcode build.

00:40:26.780 --> 00:40:30.230
What happens when you need
to work outside of Xcode?

00:40:30.370 --> 00:40:32.920
So if you're familiar
with OS X development,

00:40:32.920 --> 00:40:35.840
Xcode is really the place
to do OS X development.

00:40:35.880 --> 00:40:37.710
Why would you want to
work outside of Xcode?

00:40:37.850 --> 00:40:38.990
Well, there's a couple reasons.

00:40:39.050 --> 00:40:41.970
The main one is there are many
projects out there in the world that

00:40:41.970 --> 00:40:44.720
don't supply native Xcode projects.

00:40:44.790 --> 00:40:47.300
A couple examples, you may have some kind
of legacy code base.

00:40:47.300 --> 00:40:49.960
It's been around before Xcode, possibly.

00:40:50.040 --> 00:40:52.830
You may want to do traditional
Unix development where all the

00:40:52.900 --> 00:40:55.140
tools are available in your path.

00:40:55.200 --> 00:40:58.780
Or you may be working with some kind
of cross-platform open source project,

00:40:58.780 --> 00:41:02.960
and the maintainers of the
project haven't defined an Xcode,

00:41:02.960 --> 00:41:06.900
haven't set up an Xcode project for that.

00:41:07.230 --> 00:41:10.690
So I want to talk now about the
tools for working outside of Xcode,

00:41:10.710 --> 00:41:14.060
and in particular what I want
to convey is an understanding of

00:41:14.060 --> 00:41:16.340
the command line tools package.

00:41:16.530 --> 00:41:20.920
So this is a brief roadmap
for this part of the session.

00:41:21.080 --> 00:41:24.940
So the first thing I want to just say
what is the command line tools package

00:41:24.940 --> 00:41:26.760
and talk about how you install it.

00:41:26.810 --> 00:41:29.970
And then I want to give some best
practices as far as when should

00:41:29.970 --> 00:41:33.330
you use the command line tools
package and when do you not need

00:41:33.330 --> 00:41:35.340
the command line tools package.

00:41:35.440 --> 00:41:37.400
So the command line tools package,
what is it?

00:41:37.540 --> 00:41:38.570
Well, it's new.

00:41:38.680 --> 00:41:42.580
It was introduced in Xcode 4.3,
which GMed earlier this year.

00:41:42.720 --> 00:41:47.240
And it's a separate package for doing
extensive command line development.

00:41:47.320 --> 00:41:50.140
And the main thing is it's the
supportive mechanism for doing

00:41:50.160 --> 00:41:53.690
Unix-style development where
you need tools and headers,

00:41:53.690 --> 00:41:57.400
et cetera, to be present in /user.

00:41:57.930 --> 00:41:59.800
So what does the package contain?

00:41:59.990 --> 00:42:02.700
Well, roughly speaking,
it contains everything for

00:42:02.780 --> 00:42:03.780
command line development.

00:42:03.830 --> 00:42:07.750
It contains the same tools
that Xcode and Xcode build use,

00:42:07.800 --> 00:42:09.770
but it contains them
packaged in a different way.

00:42:09.800 --> 00:42:13.790
They're bundled at the
standard Unix location.

00:42:14.120 --> 00:42:17.660
There's really three main pieces
of the command line tools package.

00:42:17.840 --> 00:42:21.200
There's the tools themselves,
things like the compiler and the linker,

00:42:21.270 --> 00:42:24.840
but there's also a version of the
OS X SDK and the documentation,

00:42:24.840 --> 00:42:27.540
the man pages that we've
been talking about.

00:42:27.580 --> 00:42:29.940
And the tools that are included
here aren't just the development

00:42:30.090 --> 00:42:31.840
tools like the compiler.

00:42:31.890 --> 00:42:35.370
It also includes things like debuggers
as well as source control tools.

00:42:35.480 --> 00:42:38.330
So if you need SVN or
Git from the command line,

00:42:38.500 --> 00:42:39.200
they're there.

00:42:39.270 --> 00:42:43.610
And in general, any tool that's available
embedded inside Xcode,

00:42:43.820 --> 00:42:46.300
so for example,
the tools for working with AppleScript,

00:42:46.370 --> 00:42:49.900
those are available in the
command line tools package.

00:42:50.210 --> 00:42:51.010
How do you get it?

00:42:51.190 --> 00:42:52.340
There are two ways.

00:42:52.420 --> 00:42:55.860
You can either download it
from the developer resources

00:42:55.860 --> 00:42:59.340
section of developer.apple.com,
or if you have Xcode installed,

00:42:59.340 --> 00:43:01.540
you can actually install directly,
and I'll show that in a second.

00:43:01.540 --> 00:43:02.490
That's the easier way.

00:43:02.500 --> 00:43:06.560
So to get it from developer.apple.com,
it's fairly straightforward.

00:43:06.560 --> 00:43:09.470
You just go to the resources
section of the site,

00:43:09.500 --> 00:43:13.770
and then select Mac OS X downloads
from the OS X development section.

00:43:14.180 --> 00:43:16.880
From there, that takes you to this page,
and the best way to find

00:43:16.880 --> 00:43:19.360
the tools is just type in
command line tools for Xcode,

00:43:19.360 --> 00:43:22.490
and the top link will be the latest
version of the command line tools.

00:43:24.080 --> 00:43:25.760
From Xcode, it's much simpler.

00:43:25.760 --> 00:43:32.160
All you do is open the Preferences pane
and then select the Downloads section.

00:43:32.290 --> 00:43:35.380
So from there,
there's a row for command line tools,

00:43:35.380 --> 00:43:38.750
and if you select Install,
Xcode will handle automatically

00:43:38.760 --> 00:43:42.360
downloading and installing
that package for you.

00:43:44.200 --> 00:43:46.390
So when should you install this package?

00:43:46.510 --> 00:43:50.400
For 99% of people on a Mac,
and developers included,

00:43:50.410 --> 00:43:53.440
the main reason to install the package
is if you're doing some kind of open

00:43:53.440 --> 00:43:56.430
source development or you want to
work with some open source component.

00:43:56.490 --> 00:44:01.080
Maybe you just want some open source
server running on your machine.

00:44:01.230 --> 00:44:04.960
So this is really the recommended
practice for working with any of the

00:44:05.000 --> 00:44:09.810
open source package management facilities
like Fink and Maxports and Homebrew.

00:44:09.920 --> 00:44:14.060
What you may not realize is that when
you run a command like Fink install WGIT,

00:44:14.090 --> 00:44:19.260
many times what's actually happening is
that the binary isn't being downloaded,

00:44:19.310 --> 00:44:20.860
but the source is being downloaded.

00:44:20.880 --> 00:44:24.040
And that tool is actually being built
and installed local to your machine.

00:44:24.190 --> 00:44:26.180
So that means you need a version
of the development tools,

00:44:26.310 --> 00:44:30.600
and that's really what the command
line tools package is geared for,

00:44:30.600 --> 00:44:31.600
for most people.

00:44:31.880 --> 00:44:34.890
You might also want it if you just
happen to be doing extensive command

00:44:34.890 --> 00:44:38.080
line development like we talked before,
whether that be you have

00:44:38.080 --> 00:44:40.510
a traditional workflow,
legacy projects,

00:44:40.510 --> 00:44:44.920
or you're doing some kind of
development outside of Xcode.

00:44:45.160 --> 00:44:49.350
So the key defining feature here is
that you need all of the tools to

00:44:49.350 --> 00:44:51.860
be available on the command line.

00:44:51.860 --> 00:44:55.040
You want to be able to type Clang,
you want to be able to type CC,

00:44:55.060 --> 00:44:57.240
and you want them to be
available in your path.

00:44:57.260 --> 00:45:02.690
You want standard I/O.h to
be available at user include.

00:45:03.090 --> 00:45:06.380
The last reason is if you're only
doing a small amount of development,

00:45:06.410 --> 00:45:10.660
maybe you have a server and you just
need to build a small tool remotely,

00:45:11.000 --> 00:45:15.390
then the command line tools package
is a very small download size.

00:45:15.490 --> 00:45:17.560
It's also completely self-contained.

00:45:17.670 --> 00:45:21.190
So the command line tools package
doesn't contain the IDE or other package.

00:45:21.270 --> 00:45:25.100
It's completely independent,
and that means it's about 120 megabytes.

00:45:25.230 --> 00:45:29.550
It doesn't take much disk space,
very quick to download.

00:45:30.320 --> 00:45:32.600
So that's great.

00:45:32.640 --> 00:45:35.640
And I know for almost all of you,
you want to just click install

00:45:35.640 --> 00:45:38.420
on everything to get everything
you could possibly have.

00:45:38.620 --> 00:45:42.670
But why might you not want
to install the package?

00:45:42.670 --> 00:45:42.670
Well,

00:45:43.370 --> 00:45:46.370
My recommendation is don't
install the command line tools

00:45:46.460 --> 00:45:48.880
just to get access to SVN or Git.

00:45:48.880 --> 00:45:51.670
If that's all you want to be
able to type on the command line,

00:45:51.880 --> 00:45:57.020
then instead use XCRUN and use shell
aliases like Anders showed before.

00:45:57.110 --> 00:45:59.240
And in general,
the message is don't install the

00:45:59.240 --> 00:46:01.260
command line tools unless you need them.

00:46:01.290 --> 00:46:03.130
They're the same tools that are in Xcode.

00:46:03.180 --> 00:46:05.620
They're not new tools.

00:46:05.750 --> 00:46:08.760
And there's only one instance
of the command line tools.

00:46:09.050 --> 00:46:13.540
Because they're packaged in /user,
they can only be one instance.

00:46:13.670 --> 00:46:16.570
And that means also the
install is distinct from Xcode.

00:46:16.570 --> 00:46:17.930
It's a separate copy.

00:46:18.020 --> 00:46:20.930
So what that means is if
you update your Xcode,

00:46:21.020 --> 00:46:24.130
you should probably also manually
update your command line tools.

00:46:24.270 --> 00:46:28.730
And if you never need them,
there's no reason to do that work.

00:46:29.100 --> 00:46:31.340
So that covers the command
line tools package.

00:46:31.370 --> 00:46:35.890
And I know we've covered a lot
of disparate things in this talk,

00:46:36.010 --> 00:46:40.260
so I wanted to do a bit of a
review of the main takeaways.

00:46:40.980 --> 00:46:44.710
So the primary commands that
you're going to use when doing

00:46:44.710 --> 00:46:48.840
command line development with Xcode
are the top three listed here.

00:46:48.890 --> 00:46:53.260
So Xcode select is the tool you'll
use to choose the default Xcode.

00:46:53.270 --> 00:46:56.850
Xcode build is the tool you'll use
to interact with your projects,

00:46:56.850 --> 00:46:59.040
whether that be to build them,
to archive them,

00:46:59.040 --> 00:47:00.790
or to query information from them.

00:47:00.950 --> 00:47:04.840
And Xc run is the tool you use to
get more fine-grain information,

00:47:04.860 --> 00:47:08.390
where are individual tools,
or to execute individual tools.

00:47:08.610 --> 00:47:11.760
And for all of those,
and any of the other command line tools,

00:47:11.790 --> 00:47:16.670
you can use the built-in man command
to get access to the documentation.

00:47:17.060 --> 00:47:20.420
So I also wanted to provide a
brief summary of the main options

00:47:20.590 --> 00:47:24.070
that you'll use for these tools,
because many of them, for example,

00:47:24.130 --> 00:47:27.600
Xcode build has many more options
if you look at the man page.

00:47:27.700 --> 00:47:30.100
So for Xcode select,
there's really only two.

00:47:30.170 --> 00:47:33.460
Print path will show you what
the currently selected default

00:47:33.460 --> 00:47:35.200
Xcode developer directory is.

00:47:35.310 --> 00:47:40.130
And you can also use dash switch to
pass the path to a new Xcode that

00:47:40.200 --> 00:47:42.980
you want to become the default.

00:47:43.250 --> 00:47:45.320
For Xcode build,
the main options that you'll

00:47:45.320 --> 00:47:47.560
use are -workspace or -project.

00:47:47.700 --> 00:47:50.010
That specifies what
you want to operate on.

00:47:50.050 --> 00:47:53.370
And then in conjunction,
you'll use -scheme and -sdk to

00:47:53.380 --> 00:47:56.620
override what the defaults are,
what was set in the project

00:47:56.620 --> 00:47:58.100
the last time it was open.

00:47:58.140 --> 00:48:01.790
As far as querying information,
-show_sdks shows you the

00:48:01.790 --> 00:48:05.960
installed SDKs on your system,
and -list can tell you the schemes

00:48:05.960 --> 00:48:08.100
and targets in your project.

00:48:08.100 --> 00:48:10.710
Finally,
-show_buildsettings is very helpful for

00:48:10.870 --> 00:48:13.030
showing you the active build settings.

00:48:13.140 --> 00:48:15.190
Those are the things that you
could use in your configuration,

00:48:15.250 --> 00:48:18.100
or the things that get inherited
because of what you've set up before.

00:48:18.100 --> 00:48:20.540
And if you need to
override a build setting,

00:48:20.540 --> 00:48:22.980
the syntax you use is name,
then an equals,

00:48:22.980 --> 00:48:25.070
and the value you want to set it to.

00:48:25.100 --> 00:48:29.100
So for XCRUN, there are two main ways
of invoking the tool.

00:48:29.100 --> 00:48:33.090
You can use -find to find
the tool inside the app.

00:48:33.100 --> 00:48:37.100
And then you can also pass the name of
the tool and then a bunch of arguments

00:48:37.100 --> 00:48:37.100
if you just want to make sure that
the tool is in the right place.

00:48:37.100 --> 00:48:37.100
So for XCRUN, there are two main ways
of invoking the tool.

00:48:37.100 --> 00:48:37.100
You can use -find to find
the tool inside the app.

00:48:37.100 --> 00:48:37.100
And then you can also pass the name of
the tool and then a bunch of arguments

00:48:37.100 --> 00:48:37.100
if you just want to make sure that
the tool is in the right place.

00:48:37.100 --> 00:48:37.630
So for XCRUN,
there are two main ways of invoking

00:48:37.700 --> 00:48:38.530
the tool and then a bunch of arguments
if you just want to make sure that

00:48:38.530 --> 00:48:39.100
the tool is in the right place.

00:48:39.100 --> 00:48:43.340
And for either of those,
you can pass -sdk to specify

00:48:43.340 --> 00:48:46.100
the SDK to look up the tools in.

00:48:46.700 --> 00:50:01.800
[Transcript missing]

00:50:02.100 --> 00:50:05.500
I hope I've made a compelling argument
for why you might want to look into using

00:50:05.500 --> 00:50:10.500
continuous integration for improving your
own development if you aren't already.

00:50:10.500 --> 00:50:13.340
And lastly,
use the command line tools package

00:50:13.450 --> 00:50:17.310
when you need to work outside of Xcode,
when you need to work with some

00:50:17.310 --> 00:50:19.140
kind of open source project.

00:50:19.140 --> 00:50:23.780
So that's it for us.

00:50:23.790 --> 00:50:23.790
Thanks and have a great WWDC.