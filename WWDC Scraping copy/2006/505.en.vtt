WEBVTT

00:00:10.730 --> 00:00:15.020
Welcome to WWDC and Network File Systems.

00:00:15.060 --> 00:00:16.780
Glad to have you all here today.

00:00:16.780 --> 00:00:20.470
My name is Rusty,
and I'll be your host and

00:00:20.470 --> 00:00:22.400
part-time demo monkey today.

00:00:22.400 --> 00:00:24.160
Hopefully, that'll all go well.

00:00:24.200 --> 00:00:32.970
So this session is really geared towards
both admins and developers alike.

00:00:33.030 --> 00:00:36.850
So we're going to be going
into what's new in our network

00:00:36.980 --> 00:00:38.440
file systems for Leopard.

00:00:38.440 --> 00:00:40.160
Start off with an overview.

00:00:40.160 --> 00:00:43.310
Then we're going to get into
some more of the detail and

00:00:43.310 --> 00:00:45.460
drill down some of the features.

00:00:45.460 --> 00:00:48.520
We'll have the engineers
responsible for those features

00:00:48.580 --> 00:00:50.120
come up and present to you.

00:00:50.170 --> 00:00:54.160
And then we'll follow up with
some good general information.

00:00:54.200 --> 00:00:57.260
So, before we get into the Q&A session,
I noticed that there were a

00:00:57.260 --> 00:00:59.950
lot of you who had gone to the
Network Home Directory's brown

00:00:59.950 --> 00:01:01.200
bag and got shut out of that.

00:01:01.200 --> 00:01:06.950
So hopefully we can kind of take some
of those questions at the end of that.

00:01:08.110 --> 00:01:10.150
So what's new?

00:01:10.300 --> 00:01:14.930
Today we have AFP as our
primary network file system.

00:01:14.950 --> 00:01:19.480
We recommend this for use whether
it's network home directories,

00:01:19.540 --> 00:01:22.600
personal file sharing,
or workgroup serving.

00:01:22.600 --> 00:01:26.520
This is really what we promote to
provide the best performance and

00:01:26.600 --> 00:01:28.970
capabilities across the board.

00:01:29.480 --> 00:01:34.780
We also provide NFS and SMB,
but that's not really the focus

00:01:34.780 --> 00:01:37.120
for Tiger and for Mac OS X.

00:01:38.970 --> 00:01:41.790
Moving forward, we want to change that.

00:01:41.940 --> 00:01:46.190
We want to make a big major shift
and provide much better support for

00:01:46.550 --> 00:01:51.280
SMB and NFS so that you have the
freedom to choose which is really

00:01:51.410 --> 00:01:56.520
best for your situation for your
network or for your applications.

00:01:56.820 --> 00:01:58.430
But how do we get there from here?

00:01:58.740 --> 00:02:07.320
So let's take a look at pretty much
why we're really favoring AFP today.

00:02:07.410 --> 00:02:09.740
First of all,
it provides the highest performance

00:02:09.740 --> 00:02:11.300
of our network file systems.

00:02:11.300 --> 00:02:14.890
It's got great copy performance.

00:02:14.900 --> 00:02:19.050
It's really favored by
creative professionals in

00:02:19.050 --> 00:02:20.800
their large file use and so on.

00:02:20.800 --> 00:02:22.680
It's also secure.

00:02:22.680 --> 00:02:24.820
It provides Kerbero
security for authentication.

00:02:24.820 --> 00:02:25.180
It's also secure.

00:02:25.180 --> 00:02:26.260
It provides Kerbero
security for authentication.

00:02:26.260 --> 00:02:27.920
It's also a mobile file system.

00:02:27.920 --> 00:02:32.120
What we mean by that for
mobility is that it can survive

00:02:32.210 --> 00:02:36.310
sleep and wake transitions,
network changes,

00:02:36.310 --> 00:02:39.060
and it provides reconnect capabilities.

00:02:39.070 --> 00:02:43.880
Of course, it has support,
native support, for all of the great

00:02:43.880 --> 00:02:49.260
Mac OS X features like ACLs,
extended attributes, and of course,

00:02:49.380 --> 00:02:53.570
support for applications
through file manager APIs.

00:02:55.030 --> 00:02:59.900
SMB is not quite up to par
with AFP in a couple of areas.

00:02:59.900 --> 00:03:03.820
It's not providing the same level
of performance that we require.

00:03:03.820 --> 00:03:08.710
It's not a mobile file system,
and it doesn't have support for extended

00:03:08.710 --> 00:03:13.500
attributes or the top applications
through the file manager APIs.

00:03:13.500 --> 00:03:16.760
NFS is so much similar.

00:03:17.200 --> 00:03:20.660
It doesn't have the same performance
and doesn't have any security

00:03:20.660 --> 00:03:26.180
at all in today's networks,
and is lacking ACL, extended attribute,

00:03:26.310 --> 00:03:30.730
and Carbon file manager support natively.

00:03:30.920 --> 00:03:34.930
But so in Leopard,
we want to really to change that,

00:03:35.100 --> 00:03:37.200
and especially with SMB.

00:03:37.320 --> 00:03:41.670
We want to make SMB a real
first-class citizen as a part of

00:03:41.670 --> 00:03:44.240
a network file system in Leopard.

00:03:44.380 --> 00:03:46.480
It improves the performance.

00:03:46.480 --> 00:03:49.900
It already has the security that we need,
adding mobility.

00:03:50.090 --> 00:03:53.520
It's got the ACL support already,
but we're going to, to that,

00:03:53.520 --> 00:03:59.040
add support for extended attributes and
all the top applications through native

00:03:59.270 --> 00:04:01.520
support through file manager APIs.

00:04:01.520 --> 00:04:06.640
Similar with NFS,
we're going to go and improve

00:04:06.640 --> 00:04:10.400
its performance and add
security to NFS with Kerbero.

00:04:10.400 --> 00:04:15.200
ACLs, extended attributes,
and file manager support,

00:04:15.200 --> 00:04:21.800
that needs to wait for NFS version 4,
and that'll be coming after Leopard.

00:04:22.850 --> 00:04:26.090
So let's take a look at
kind of where we are,

00:04:26.130 --> 00:04:30.670
the progress that we've made so far,
starting with the copy performance.

00:04:31.100 --> 00:04:35.010
One of the benchmarks that we do is
a finer copy performance benchmark,

00:04:35.030 --> 00:04:40.500
because that's people's main interface
to the file systems for Mac OS X.

00:04:40.500 --> 00:04:43.020
We're measuring throughput
in megabytes per second,

00:04:43.020 --> 00:04:48.680
and we're going to compare AFP, SMB,
and NFS on Mac OS X and compare that

00:04:48.790 --> 00:04:55.380
to XBee Performance running SMB,
their native network file system.

00:04:55.680 --> 00:04:58.050
And the setup for this
is a core Duo iMac,

00:04:58.110 --> 00:05:02.240
although the Mac Mini makes a
really great test machine as well.

00:05:02.430 --> 00:05:06.970
Measuring over gigabit Ethernet,
and we're going from a cold start,

00:05:07.070 --> 00:05:09.570
meaning this is not a
cached file transfer.

00:05:09.630 --> 00:05:10.900
We're not reading just from memory.

00:05:10.900 --> 00:05:12.970
It's exercising the whole machine.

00:05:12.970 --> 00:05:15.970
And we're looking at
a large file transfer,

00:05:15.980 --> 00:05:20.030
and on the Windows side,
we've got a measure that's running

00:05:20.030 --> 00:05:22.790
under boot camp on the same machine.

00:05:24.890 --> 00:05:26.660
So let's start with Tiger GM.

00:05:26.900 --> 00:05:30.460
How did we compare against XP?

00:05:30.520 --> 00:05:33.180
You can see our scale
here is going to go XP,

00:05:33.180 --> 00:05:37.950
SMB, NFS, and so on,
and throughput in megabytes per second.

00:05:38.200 --> 00:05:42.200
So we're really looking at the top
end of this would be saturating what

00:05:42.200 --> 00:05:44.250
the disk can do on that machine.

00:05:44.970 --> 00:05:47.060
So XP turns out a real
favorable performance.

00:05:47.060 --> 00:05:52.590
It's almost over 250 megabits per second,
so that's a quarter of a

00:05:52.760 --> 00:05:55.900
gigabit ethernet all by itself.

00:05:55.920 --> 00:06:01.900
SMB came in a little bit less
at 29 megabytes per second.

00:06:01.900 --> 00:06:07.310
NFS was quite low for the finder copy,
although in our CP and command line

00:06:07.310 --> 00:06:09.900
performance it does much better.

00:06:09.900 --> 00:06:12.890
AFP performance was nearly
saturated in the disks,

00:06:13.000 --> 00:06:16.570
getting the maximum
throughput from that machine.

00:06:17.090 --> 00:06:21.600
So we made some improvements in
the releases leading up to 10.4.7.

00:06:21.730 --> 00:06:24.440
We've really,
we've started to work on this and

00:06:24.440 --> 00:06:27.910
to deliver with the Intel machines,
we wanted to bring that out

00:06:28.340 --> 00:06:30.180
in the software updates.

00:06:30.400 --> 00:06:35.300
And so today, we've got better than
XP performance with RSMB and

00:06:35.300 --> 00:06:38.430
nearly double the NFS performance.

00:06:38.490 --> 00:06:39.880
And we didn't break AFP.

00:06:39.900 --> 00:06:41.510
That was good.

00:06:45.480 --> 00:06:49.280
So beyond 10.4.7, we're looking at,
for Leopard, really, you know,

00:06:49.280 --> 00:06:51.530
Vista's coming on the scene,
so we need to exceed what

00:06:51.530 --> 00:06:55.400
Vista's doing across the board,
not just with AFP and SMB,

00:06:55.420 --> 00:06:59.250
and to really try and saturate
the network or disk performance

00:06:59.370 --> 00:07:01.070
with all the protocols.

00:07:03.640 --> 00:07:09.620
So in the in-copy performance,
there was a number of things

00:07:09.620 --> 00:07:12.990
that we learned in tuning things
up that I really want to share,

00:07:12.990 --> 00:07:16.010
especially with the
developers in the audience.

00:07:16.590 --> 00:07:20.240
So optimizing performance,
really for network protocols,

00:07:20.300 --> 00:07:22.850
minimizing the number of
transactions you make.

00:07:22.920 --> 00:07:27.200
A lot of times when we first
take a look at a new application,

00:07:27.210 --> 00:07:30.740
you find that it's really leaning on
stat or the get catalog info calls

00:07:30.740 --> 00:07:34.540
a lot to find out what's happening
with the files that it's dealing with.

00:07:34.540 --> 00:07:38.570
And a lot, in many cases,
there are a number of redundant calls

00:07:38.570 --> 00:07:44.000
that even if with caching we can't absorb
all that and maintain good performance.

00:07:44.000 --> 00:07:50.770
A very good tool for finding out how your
application is performing in this area

00:07:50.770 --> 00:07:54.180
is to use fsusage on the command line.

00:07:54.180 --> 00:07:58.080
And it'll show all of the file system
transactions and the time that they take.

00:07:58.160 --> 00:08:04.170
Each one of those transactions that
goes out on the wire incurs latency.

00:08:07.530 --> 00:08:11.820
And that latency,
even on gigabit networks,

00:08:11.820 --> 00:08:16.680
will slow down saving document
performance or copy performance.

00:08:16.720 --> 00:08:21.180
And if you're looking at wireless,
which is increasingly important,

00:08:21.200 --> 00:08:27.620
or transfers over the wide area internet,
it's very, very noticeable.

00:08:27.620 --> 00:08:31.380
The second way to beat the latency
game is to maximize concurrency.

00:08:31.390 --> 00:08:35.120
And in some applications,
it's possible to factor the problem

00:08:35.120 --> 00:08:37.040
so that you've got multiple threads.

00:08:37.210 --> 00:08:40.020
So even if you do have to make
a large number of transactions,

00:08:40.130 --> 00:08:42.200
they can be going in parallel.

00:08:42.210 --> 00:08:46.680
And especially with the servers that
we have today that have multiple disks,

00:08:46.680 --> 00:08:50.330
they can handle that and turn
around and beat the latency

00:08:50.360 --> 00:08:52.870
that you get over the network.

00:08:53.750 --> 00:08:58.740
And finally, increasing the buffer sizes,
especially in bulk transfer of data.

00:08:58.820 --> 00:09:02.060
There's a good call that you can
use in the file system to find

00:09:02.060 --> 00:09:04.120
what is the right buffer size.

00:09:04.140 --> 00:09:07.600
You don't have to guess in the
application what might be good.

00:09:07.790 --> 00:09:11.300
The file systems will report
that to you through StataFS.

00:09:11.360 --> 00:09:14.750
The StataFS FIO size
reports back the optimal,

00:09:14.760 --> 00:09:20.060
you know, minimum block size of transfer
unit for that file system.

00:09:23.690 --> 00:09:25.150
So what about AFP?

00:09:25.200 --> 00:09:30.070
We're looking at making a lot
of improvements in SMB and NFS,

00:09:30.070 --> 00:09:34.760
but AFP, it's still number one and still
the one that I know a lot of

00:09:34.760 --> 00:09:36.910
the admins are depending on.

00:09:37.370 --> 00:09:40.630
And so, as you heard,
we're introducing Spotlight

00:09:40.840 --> 00:09:42.220
searching over AFP.

00:09:42.400 --> 00:09:45.180
In the seed that you have today,
you can look in there,

00:09:45.180 --> 00:09:50.600
and you'll see a new
servers or the volume,

00:09:50.600 --> 00:09:51.860
any mounted volume.

00:09:52.150 --> 00:09:53.840
And you can search that.

00:09:53.940 --> 00:09:57.060
And quickly,
even faster than the search that

00:09:57.070 --> 00:10:02.420
we had with Spotlight in Tiger,
find information that's on the disk,

00:10:02.420 --> 00:10:06.160
any disk, on your network.

00:10:08.260 --> 00:10:10.620
So that's Spotlight Searching.

00:10:10.620 --> 00:10:13.890
It's available for AFP in the seed.

00:10:14.490 --> 00:10:19.580
It works with both personal file
sharing and Mac OS X Server.

00:10:19.580 --> 00:10:22.200
And it's coming to SMB and Leopard.

00:10:25.730 --> 00:10:30.040
AFP scalability,
that's always one of the number one

00:10:30.040 --> 00:10:34.770
issues that I think we feel from
customers and in terms of inquiry.

00:10:34.930 --> 00:10:37.460
I'm sure a lot of the people that
were at the network home directory

00:10:37.460 --> 00:10:43.130
brown bag trying to attend that
were interested in AFP scalability.

00:10:43.140 --> 00:10:47.690
There's been a lot of activities
on the bulletin boards and

00:10:47.690 --> 00:10:51.800
the websites this year,
so much so that I had an

00:10:51.800 --> 00:10:53.780
alternate title for this slide.

00:10:53.780 --> 00:10:57.570
AFP, it ain't so bad.

00:10:58.670 --> 00:11:05.910
I know Nigel posted a really good
tuning article on AFP548.com,

00:11:05.920 --> 00:11:09.420
and I would encourage everyone to take
a look at that and pick up on some

00:11:09.420 --> 00:11:15.020
of the tips that he's provided there,
because they're all very good.

00:11:15.060 --> 00:11:18.460
Some of them were so good that
we're actually making them part

00:11:18.460 --> 00:11:21.870
of 10.4.7 Universal Edition.

00:11:21.880 --> 00:11:27.900
We've added new defaults to AFP Server,
so it's now defaulting to 200 threads.

00:11:28.030 --> 00:11:30.330
And on the client side,
we've increased the

00:11:30.330 --> 00:11:32.620
WAN quantum size to 32K.

00:11:32.950 --> 00:11:36.690
So even over slower links,
it's transferring larger

00:11:36.690 --> 00:11:39.490
blocks of data at a time.

00:11:44.200 --> 00:11:47.790
One of the ways that we measure
AFP scalability in our testing is

00:11:47.790 --> 00:11:50.450
we use a test called AFP Load Test.

00:11:50.450 --> 00:11:54.180
And that it approximates
a home directory workload,

00:11:54.180 --> 00:11:59.920
which is really a mix of operations
heavy on the metadata side,

00:12:00.150 --> 00:12:05.510
browsing, and file transfer mixed in.

00:12:05.730 --> 00:12:09.820
And it looks somewhat like this.

00:12:10.190 --> 00:12:14.380
We started doing these measurements
back in the Panther timeframe,

00:12:14.430 --> 00:12:16.300
in 10.3 GM.

00:12:16.460 --> 00:12:23.500
Looking at with a dual G5 XServe,
less than a thousand operations

00:12:23.500 --> 00:12:28.110
per second in that test.

00:12:28.820 --> 00:12:31.870
But as we were moving
forward and developing Tiger,

00:12:31.880 --> 00:12:35.900
we know that with Tiger coming,
the Tiger client has a much higher

00:12:35.950 --> 00:12:42.100
demand for file system access,
whether it's spotlight, mail,

00:12:42.120 --> 00:12:45.530
a large number of new activities
going on in the system.

00:12:45.650 --> 00:12:47.710
So we started delivering
some of the updates,

00:12:47.710 --> 00:12:50.030
improvements in efficiency
through that time,

00:12:50.030 --> 00:12:55.000
so that by the 1039, by this benchmark,
we were at four times the level

00:12:55.330 --> 00:12:57.390
that we shipped in Panther GM.

00:12:57.590 --> 00:13:01.940
Some further efficiency
improvements came with Tiger GM,

00:13:02.150 --> 00:13:04.470
so we're up to five times there.

00:13:04.580 --> 00:13:08.880
So now we've got looking at
great new hardware coming out,

00:13:08.880 --> 00:13:12.830
and we want to be able
to support that as well.

00:13:13.130 --> 00:13:18.940
And we've made some estimates
testing with the Mac Pros,

00:13:18.940 --> 00:13:23.340
with the Universal 1047,
and we're close to 17 times

00:13:23.580 --> 00:13:26.300
Panther performance on the Dual X or G5.

00:13:26.300 --> 00:13:30.300
But we're still, even with that,
we're leaving something on the table.

00:13:30.300 --> 00:13:33.620
And we need to go beyond efficiency
improvements and introduce

00:13:33.840 --> 00:13:37.230
some finer grain locking,
so that we can really take

00:13:37.310 --> 00:13:41.300
advantage of the quad cores that
are available in that hardware.

00:13:41.300 --> 00:13:50.100
And our goal is to get to 20X performance
when we ship in Leopard on that platform.

00:13:53.300 --> 00:13:56.590
So AFP scalability,
just to summarize that,

00:13:56.590 --> 00:14:00.600
improvements in efficiency,
finer grain locking,

00:14:00.600 --> 00:14:04.730
and reducing the client workload
whenever we can to improve the number

00:14:04.730 --> 00:14:09.510
of clients that we can support in
home directory servers especially.

00:14:13.860 --> 00:14:19.430
So to wrap up,
coming online with secure NFS in Leopard,

00:14:19.500 --> 00:14:24.990
that puts us one of our major
milestones on the path to NFS version 4.

00:14:26.690 --> 00:14:31.160
We're going to completely overhaul the
automounter and replace it with AutoFS.

00:14:31.160 --> 00:14:34.020
So there won't be a
single line of code left.

00:14:37.030 --> 00:14:40.260
Promote SMB to a first-class
citizen on the platform.

00:14:40.310 --> 00:14:43.610
Give it all the features
that we have in AFP.

00:14:44.700 --> 00:14:48.380
And of course,
continue to improve performance and

00:14:48.430 --> 00:14:54.640
scalability on the platform and provide
spotlight searching for network volumes.

00:14:56.250 --> 00:14:59.630
Now I'd like to introduce
to you Brent Callaghan,

00:14:59.750 --> 00:15:05.470
who will come up and
talk about secure NFS.

00:15:09.900 --> 00:15:16.140
I talk about insecure NFS,
that's the NFS we have

00:15:16.140 --> 00:15:18.940
now today in Tiger.

00:15:19.000 --> 00:15:21.790
Just to explain about
what insecure NFS means,

00:15:21.790 --> 00:15:25.900
let's look at an NFS transaction
where the client and the server are

00:15:25.900 --> 00:15:29.880
quite friendly towards each other,
they trust each other.

00:15:29.880 --> 00:15:32.620
And each NFS request there's
a thing called the credential

00:15:32.620 --> 00:15:36.400
and the header where the client
explains to the server who it is,

00:15:36.490 --> 00:15:39.660
and the server just
trusts that information.

00:15:39.750 --> 00:15:43.340
The client can really invent
anything it likes to go in there.

00:15:43.340 --> 00:15:44.760
And that's causing kind
of a bit of a problem.

00:15:44.890 --> 00:15:48.680
It's all right in your friendly network,
but in a more hostile network that's

00:15:48.740 --> 00:15:50.900
really not going to work at all.

00:15:50.900 --> 00:15:55.950
So fortunately secure NFS can
fit into an NFS authentication

00:15:55.950 --> 00:15:59.000
framework that already exists.

00:15:59.000 --> 00:16:04.350
We're just not making very good use of it
with our current use of the credential.

00:16:04.410 --> 00:16:07.690
There's also a thing called the verifier
that comes back from the server and

00:16:07.790 --> 00:16:09.420
this allows the server to authenticate.

00:16:09.420 --> 00:16:11.320
It's self to the client.

00:16:11.320 --> 00:16:13.600
You never quite know when
you're talking to an NFS server

00:16:13.830 --> 00:16:16.120
just who that server really is.

00:16:16.120 --> 00:16:17.520
You're sending your valuable
data to that server.

00:16:17.560 --> 00:16:21.740
Is that the server you were talking to
yesterday or was it some server that

00:16:21.860 --> 00:16:23.880
just popped up just to take your data?

00:16:23.880 --> 00:16:25.440
You don't really know.

00:16:25.440 --> 00:16:30.060
So fortunately this framework lets us
use other kinds of security and this

00:16:30.060 --> 00:16:33.380
is where we can just plug in Kerberos.

00:16:33.380 --> 00:16:36.530
So with Kerberos authentication,
the client and the server do not

00:16:36.600 --> 00:16:39.180
start off on a nice friendly basis.

00:16:39.340 --> 00:16:40.680
They do not trust each other.

00:16:40.680 --> 00:16:43.570
They are hostile towards each other.

00:16:43.610 --> 00:16:47.460
This is where the
Kerberos server comes in.

00:16:47.580 --> 00:16:51.220
Both the client and the server
know and trust the Kerberos server.

00:16:51.220 --> 00:16:53.260
It's like their mutual friend.

00:16:53.260 --> 00:16:56.420
So they don't trust each other but
they do trust the Kerberos server.

00:16:56.490 --> 00:16:58.580
The Kerberos server keeps
all of their keys on it,

00:16:58.580 --> 00:17:02.300
although the keys never
actually go across the network.

00:17:02.300 --> 00:17:06.490
Using the Kerberos server,
the client and the server can

00:17:06.490 --> 00:17:08.940
negotiate a secure session.

00:17:08.940 --> 00:17:13.670
So part of the session is a session
key that the client and the server

00:17:14.100 --> 00:17:18.180
can use to digitally sign the
credential and the verifier.

00:17:18.180 --> 00:17:21.290
So this is really pretty secure.

00:17:21.910 --> 00:17:26.190
So looking a little more
closely at Kerberos NFS,

00:17:26.290 --> 00:17:30.480
first of all, a super user no longer
has any super powers.

00:17:30.660 --> 00:17:33.680
So because you can become super
user on the client does not mean

00:17:33.680 --> 00:17:36.890
that you can become any user
and access their home directory.

00:17:36.900 --> 00:17:38.860
You can't do that anymore.

00:17:38.860 --> 00:17:41.680
The only way you can really get
to somebody's home directory is

00:17:41.680 --> 00:17:45.540
if you know their password and you
can get their Kerberos credential.

00:17:45.720 --> 00:17:48.460
So that's really good.

00:17:48.500 --> 00:17:53.540
The next thing is we're encrypting or
we're digitally signing the verifier

00:17:53.540 --> 00:17:55.910
that comes back from the server.

00:17:56.060 --> 00:18:00.040
So the server not only trusts the client,
but the client can now trust that

00:18:00.040 --> 00:18:02.040
it's talking to the right server.

00:18:02.040 --> 00:18:04.320
So that's important as well.

00:18:04.330 --> 00:18:08.080
Another thing that we get with
Kerberos authentication is because

00:18:08.080 --> 00:18:12.880
we no longer send the UID and
the GID across the wire anymore,

00:18:12.890 --> 00:18:17.080
we actually use the Kerberos
principal name that comes when

00:18:17.080 --> 00:18:18.280
we set up this Kerberos server.

00:18:18.280 --> 00:18:21.410
So Kerberos is a very useful way
to get into the Kerberos context.

00:18:21.410 --> 00:18:23.580
And the server just maps
this principal name.

00:18:23.660 --> 00:18:25.720
It looks something like an email address.

00:18:25.720 --> 00:18:28.320
Maps this to the user's UID and
from that it generates the

00:18:28.400 --> 00:18:29.860
groups that the user is in.

00:18:29.880 --> 00:18:35.410
So that means if you're at home and
you're user 501 on your kid's Mac and

00:18:35.440 --> 00:18:40.940
you mount your home directory from work,
you will not be user 501.

00:18:40.980 --> 00:18:45.810
You'll be the user that the server
sees you when you log in at work.

00:18:45.820 --> 00:18:47.900
So that's quite nice.

00:18:48.480 --> 00:18:52.280
Finally, we're not particularly
new to Kerberos NFS.

00:18:52.280 --> 00:18:54.750
This is already quite widely
supported in the industry.

00:18:54.930 --> 00:19:00.350
So you can get this today, Linux 2.6,
NetApp servers have it, EMC, Solaris,

00:19:00.370 --> 00:19:02.820
they all support Kerberos on NFS.

00:19:02.820 --> 00:19:04.740
So this will slot right in there.

00:19:06.500 --> 00:19:08.620
So how do you turn it on on the server?

00:19:08.860 --> 00:19:14.670
So mostly what it comes down to is
a new security option called Sec=.

00:19:14.770 --> 00:19:19.620
And if you set Sec= on your export,
then you can select Kerbero

00:19:19.620 --> 00:19:21.850
as one of the options there.

00:19:22.040 --> 00:19:24.640
So the default is still Sec=Sys.

00:19:24.950 --> 00:19:28.320
So if you didn't have any security there,
that's the default.

00:19:28.330 --> 00:19:31.000
Sys means trust me security.

00:19:31.030 --> 00:19:33.520
But you probably want
to use Kerbero security.

00:19:33.520 --> 00:19:38.800
So if you use Kerbero,
you can set it up on the Sec= option.

00:19:38.810 --> 00:19:41.680
You can also put a list there.

00:19:41.680 --> 00:19:44.000
So you can say Sec=KRB5:Sys.

00:19:44.000 --> 00:19:48.160
And what the server says
to the client here is,

00:19:48.160 --> 00:19:54.010
I prefer you use Kerbero's version 5,
but if you don't support that,

00:19:54.380 --> 00:19:57.600
then you can continue to use
the old trust me security.

00:19:57.600 --> 00:20:01.000
And this is probably what you want
to set up when you're initially

00:20:01.000 --> 00:20:04.720
migrating all of your clients
from Tiger across to Leopard.

00:20:04.720 --> 00:20:07.450
You don't want to make it too disruptive.

00:20:07.490 --> 00:20:11.390
And at some point in the future,
you just remove the Sys when you

00:20:11.390 --> 00:20:14.550
assume everybody's converted over,
and off you go with a

00:20:14.560 --> 00:20:15.930
pure Kerbero solution.

00:20:15.960 --> 00:20:17.110
So that's the default.

00:20:17.230 --> 00:20:20.120
So on the client,
when the client is doing the mount,

00:20:20.210 --> 00:20:25.280
there is a sec equals option there too,
but you don't really have to use it.

00:20:25.280 --> 00:20:29.960
The good news is that version 3
clients and servers will auto-negotiate

00:20:30.020 --> 00:20:32.620
what kind of security they're using.

00:20:32.680 --> 00:20:35.670
So if you just go and turn
Kerbero security on on the server

00:20:36.160 --> 00:20:40.330
and the client supports it,
then the client will automatically mount,

00:20:40.330 --> 00:20:43.240
will do that mount
using Kerbero security.

00:20:43.340 --> 00:20:46.800
If you do use that option,
then that's really a way of asserting

00:20:46.810 --> 00:20:49.340
what security type you want.

00:20:49.450 --> 00:20:55.140
So if the server doesn't support Kerbero
and you use the sec equals Kerb 5 option,

00:20:55.310 --> 00:20:56.790
then the mount will fail.

00:20:56.900 --> 00:20:59.300
So that's just a way of making
sure that you've got the kind of

00:20:59.300 --> 00:21:00.880
security that you think you need.

00:21:00.970 --> 00:21:03.560
But in general, you shouldn't really
have to set this option.

00:21:03.760 --> 00:21:06.860
You don't have to set it
in your automounter maps or

00:21:06.910 --> 00:21:08.870
in your mount command line.

00:21:09.670 --> 00:21:14.340
So we understand now that the
Trust Me security really doesn't provide

00:21:14.340 --> 00:21:16.720
you any kind of secure authentication.

00:21:16.720 --> 00:21:20.600
And with Kerbero's version 5,
we can get secure authentication.

00:21:20.600 --> 00:21:21.280
That's really good.

00:21:21.280 --> 00:21:22.900
That's a huge step.

00:21:22.910 --> 00:21:26.600
But the client and server
have this session key,

00:21:26.600 --> 00:21:28.590
and they can use it for other things.

00:21:28.740 --> 00:21:33.680
So not only can they use it to digitally
sign the credential on the verifier,

00:21:33.680 --> 00:21:38.600
they can use it to digitally sign
the entire NFS request and reply.

00:21:38.720 --> 00:21:42.640
So as a result, we get another flavor
of Kerbero security,

00:21:42.640 --> 00:21:46.600
and it's KRB5I,
the I's for integrity protection.

00:21:46.750 --> 00:21:50.180
So if you turn that on,
then you can send your

00:21:50.180 --> 00:21:52.370
NFS data across a network.

00:21:52.600 --> 00:21:56.050
It may be a hostile network,
comfortable in the knowledge that

00:21:56.050 --> 00:22:00.600
nobody can change your data as it goes
between the client and the server.

00:22:00.770 --> 00:22:03.940
And we've actually seen this used
in some networks where there weren't

00:22:04.030 --> 00:22:06.990
hostile people in the network,
but there were hostile

00:22:07.060 --> 00:22:09.530
routers or hostile networkers,
network routers that were

00:22:09.580 --> 00:22:13.000
dropping bits on the way,
and the TCP checksum

00:22:13.000 --> 00:22:15.600
wasn't quite up to it,
and we got some data corruption.

00:22:15.600 --> 00:22:19.060
So we turned on the Kerbero's
integrity protection,

00:22:19.100 --> 00:22:21.600
and that really fixed the problem.

00:22:21.600 --> 00:22:28.080
Also with that key, if you're really,
really paranoid, you can use KRB5P,

00:22:28.110 --> 00:22:29.590
P for privacy.

00:22:29.610 --> 00:22:33.970
And we can use that session key to
encrypt the data going between the client

00:22:33.990 --> 00:22:36.600
and the server so that nobody can see it.

00:22:36.600 --> 00:22:40.590
So the downside to that is that there
is a performance cost in doing that.

00:22:40.600 --> 00:22:43.690
You'll reduce your throughput somewhat,
but that's up to you to pick

00:22:43.850 --> 00:22:46.600
the kind of Kerbero security
that you really think you need.

00:22:47.980 --> 00:22:51.780
So moving on to deployment,
how do you deploy secure NFS?

00:22:51.780 --> 00:22:54.930
If you're already using
Kerbero in your network,

00:22:55.080 --> 00:22:57.340
for instance,
if you're using Open Directory,

00:22:57.380 --> 00:23:00.620
then your clients will already
have Kerbero's key set up,

00:23:00.670 --> 00:23:03.620
because that's what you need
to log into Open Directory.

00:23:03.640 --> 00:23:07.090
Then on the server,
all you need to do is just set up those

00:23:07.090 --> 00:23:11.720
exports you want with the KRB5 option,
and off you go.

00:23:11.830 --> 00:23:13.800
And really,
you have to do nothing on the clients.

00:23:13.800 --> 00:23:17.180
If they're Leopard clients,
they will auto-negotiate

00:23:17.180 --> 00:23:19.430
that Kerbero security,
so you don't have to do

00:23:19.430 --> 00:23:21.000
anything on the clients.

00:23:21.010 --> 00:23:22.960
And when the users log
into those clients,

00:23:22.960 --> 00:23:26.080
they'll be issued their
Kerbero's keys when they log in.

00:23:26.260 --> 00:23:28.810
So deployment's really pretty easy,
as long as you already have

00:23:28.810 --> 00:23:31.290
Kerbero set up in your network.

00:23:31.480 --> 00:23:36.670
So just to summarize where we are,
we took a quick look at the

00:23:36.670 --> 00:23:39.690
TrustMe security that we're
currently using in Tiger.

00:23:39.790 --> 00:23:42.900
And we can look forward to the
Kerberos security coming in Leopard,

00:23:42.900 --> 00:23:45.530
which will give us some
strong authentication.

00:23:45.600 --> 00:23:46.950
That's what we need most.

00:23:47.170 --> 00:23:49.700
And kind of as a bonus,
you'll get integrity

00:23:49.740 --> 00:23:52.940
protection or privacy,
if you really need it.

00:23:52.940 --> 00:23:54.540
It's already quite widely supported.

00:23:54.630 --> 00:23:59.630
So if you're using other kinds of
NFS clients and servers in your network,

00:23:59.630 --> 00:24:02.430
then we will interoperate with those.

00:24:02.550 --> 00:24:05.260
Fairly easy to deploy if
you're already using Kerberos.

00:24:05.530 --> 00:24:10.330
And unfortunately,
it's not in the CD that

00:24:10.330 --> 00:24:11.530
we gave out the other day.

00:24:11.570 --> 00:24:12.980
But it will be in Leopard.

00:24:13.040 --> 00:24:15.940
So you can look forward to
Kerberos coming in Leopard.

00:24:16.450 --> 00:24:22.800
So to introduce Guy Harris coming next,
and he'll be introducing the new

00:24:22.800 --> 00:24:26.250
automounter coming in Leopard.

00:24:38.720 --> 00:24:41.400
First question is,
why do we have an automatter?

00:24:41.400 --> 00:24:44.120
Well, one thing is to
automatically mount things.

00:24:44.120 --> 00:24:48.770
It'll mount remote file systems
on demand when you refer to them,

00:24:48.830 --> 00:24:51.400
rather than having to mount a
whole bunch of stuff you may

00:24:51.400 --> 00:24:53.340
never use when the system starts.

00:24:53.340 --> 00:24:56.990
And you can also use it to provide
a global file system namespace.

00:24:57.020 --> 00:25:00.120
You could, for instance,
if you had source code for

00:25:00.120 --> 00:25:03.540
a software development shop,
you could have a mount

00:25:03.540 --> 00:25:05.150
point called releases.

00:25:05.160 --> 00:25:08.780
And under that,
you might have subdirectories

00:25:08.870 --> 00:25:10.400
for each release you've put out.

00:25:10.580 --> 00:25:13.320
They might be on different servers,
but the clients wouldn't

00:25:13.320 --> 00:25:14.380
have to know that.

00:25:14.380 --> 00:25:18.890
They go to release 1.0,
and there's the source to 1.0.

00:25:19.140 --> 00:25:22.870
So we have a new automounter
that we'll be providing.

00:25:23.040 --> 00:25:27.580
It's a modern one, multi-threaded,
more robust, faster,

00:25:27.580 --> 00:25:31.600
and it'll be based on
the one in OpenSolaris.

00:25:32.110 --> 00:25:35.670
It will do in-place mounting,
none of those symlinks that

00:25:35.950 --> 00:25:38.540
trigger the mount that point off
to where it's really mounted.

00:25:38.540 --> 00:25:43.790
And you take the path and run it
through real path or any of the

00:25:43.790 --> 00:25:45.340
Carbon APIs that use real path.

00:25:45.340 --> 00:25:47.710
And you now have something
that won't trigger the mount,

00:25:47.850 --> 00:25:51.760
so you have to undo all that,
no more of that.

00:25:51.780 --> 00:25:54.330
And it will mount things
from a server one at a time.

00:25:54.440 --> 00:25:57.790
If you refer to something from a server,
it's not going to mount everything

00:25:57.870 --> 00:26:00.410
from that server all at once.

00:26:00.940 --> 00:26:03.840
And here's what the
Tiger Automounter looks like.

00:26:03.880 --> 00:26:06.840
It's implemented as an NFS server,
so in the kernel,

00:26:06.880 --> 00:26:10.320
you have the NFS client,
and if you refer to something

00:26:10.320 --> 00:26:14.380
that's under the automounter,
it will go through the NFS client,

00:26:14.380 --> 00:26:20.900
which will talk to one of two
NFS servers that are set up and mounted.

00:26:20.900 --> 00:26:24.550
There's the FSTab and
static automounter process,

00:26:24.590 --> 00:26:27.900
which gives you things
like network servers,

00:26:27.900 --> 00:26:34.900
network applications, network library,
and then there's one for the NSL,

00:26:34.900 --> 00:26:37.950
which is used for network browsing.

00:26:39.030 --> 00:26:43.130
With Leopard, instead we have a new
in-kernel file system,

00:26:43.130 --> 00:26:48.680
AutoFS, based on the Solaris AutoFS,
and references to network servers,

00:26:48.680 --> 00:26:51.600
network applications,
or anything else that goes to the

00:26:51.760 --> 00:26:55.660
automounter will go through AutoFS,
and that will talk to a

00:26:55.660 --> 00:27:02.130
Solaris-derived automount daemon,
but it won't do that on every reference.

00:27:02.130 --> 00:27:03.970
It's just when it needs
to mount something,

00:27:03.990 --> 00:27:06.800
it talks to the automounter,
but once it's mounted,

00:27:06.800 --> 00:27:08.880
the automounter daemon is out of the box.

00:27:08.900 --> 00:27:13.700
We also have a daemon called AutoFSd,
which is new.

00:27:13.700 --> 00:27:19.300
It listens for network change events
and anything else that would change

00:27:19.300 --> 00:27:23.480
what's actually being mounted,
and will run the Solaris-derived

00:27:23.480 --> 00:27:27.250
automount command,
which actually mounts the

00:27:27.280 --> 00:27:30.000
AutoFS on the desired targets.

00:27:30.060 --> 00:27:33.850
We can also run automount
directly from the command line,

00:27:33.850 --> 00:27:37.130
but that would mainly
be for testing purposes.

00:27:37.170 --> 00:27:43.140
New Automounter will actually be able
to get hold of the Kerbero credentials

00:27:43.510 --> 00:27:47.340
of the process doing the mount,
so that requesting the mount,

00:27:47.540 --> 00:27:52.630
so that if the mount requires Kerbero
credentials such as an AFP mount,

00:27:52.780 --> 00:27:58.890
an SMB mount, or a Kerberized NFS mount,
it will be able to do the mount

00:27:59.040 --> 00:28:00.400
with the correct credentials.

00:28:00.400 --> 00:28:03.090
It won't mount as guest
or anything like that.

00:28:03.310 --> 00:28:07.100
That will work in a GUI session,
but it will also work if you SSH in.

00:28:07.100 --> 00:28:14.150
You'll be able to get your AFP mounts
done as you rather than as guest.

00:28:16.950 --> 00:28:20.300
The new automatter will support
standard automatter maps,

00:28:20.300 --> 00:28:24.680
the RFC 2037-BIS, for those of you who
know what that means.

00:28:24.890 --> 00:28:26.120
It's more to the point.

00:28:26.120 --> 00:28:30.100
It's compatible with what Linux and
Solaris automatters are using,

00:28:30.100 --> 00:28:34.200
so you won't have to take your
automatter maps and do an LDAP dump

00:28:34.510 --> 00:28:38.770
and run them through a script
and turn them into text files and

00:28:38.980 --> 00:28:43.940
stick them onto your Macs and say,
OK, go mount from this file.

00:28:43.960 --> 00:28:46.500
It'll just plug in,
pick up the mounts from your

00:28:46.500 --> 00:28:51.130
LDAP or NIST server just as
your other Unix boxes do.

00:28:52.350 --> 00:28:55.210
And, after all that,
we're still supporting

00:28:55.210 --> 00:28:56.420
the same old stuff.

00:28:56.790 --> 00:29:02.360
We have a -fstab and
-static special maps,

00:29:02.360 --> 00:29:06.960
and that'll get you to network server,
as well as static mounts

00:29:06.960 --> 00:29:11.070
like network library,
network applications.

00:29:11.690 --> 00:29:15.190
And we will also support
Solaris' executable maps,

00:29:15.300 --> 00:29:19.260
which is something similar to
a CGI script for automounting.

00:29:19.430 --> 00:29:23.870
Instead of making a request
to an LDAP or a NIST server to

00:29:23.870 --> 00:29:27.390
get the contents of the map,
it will actually pass an

00:29:27.390 --> 00:29:29.350
argument to a program.

00:29:29.430 --> 00:29:33.680
So you have the executable map,
and that map might be used

00:29:33.680 --> 00:29:36.120
for a directory of items.

00:29:36.160 --> 00:29:39.360
And if you refer to one of
the items in the directory,

00:29:39.380 --> 00:29:44.370
the name of the item in the directory
gets passed to the executable map,

00:29:44.600 --> 00:29:49.410
and it looks in whatever data source it's
written to use and returns an indication

00:29:49.460 --> 00:29:51.620
of what should be mounted there.

00:29:51.640 --> 00:29:56.840
It could be a URL,
it could be a hostname, colon, NFS style,

00:29:56.840 --> 00:29:58.990
and it will mount that.

00:29:59.360 --> 00:30:04.290
And we've added an extension to that so
that you can actually do browsing on it.

00:30:04.460 --> 00:30:07.550
You can say, here's a directory,
what are the names of

00:30:07.550 --> 00:30:08.950
all the items in that?

00:30:08.960 --> 00:30:14.100
And so there, you pass the executable
map zero arguments,

00:30:14.250 --> 00:30:18.690
and that will tell it that just look
in the data source and then print

00:30:18.690 --> 00:30:22.670
to the standard output a list of all
the items that are in that directory,

00:30:22.730 --> 00:30:26.790
and those will show up in an
LS or in a finder listing.

00:30:27.020 --> 00:30:30.240
And here's a quick example
of an automatter map,

00:30:30.390 --> 00:30:36.560
that executable map,
that we can use to implement /home,

00:30:36.560 --> 00:30:44.430
which is a map that the directories in
/home correspond to the names of users,

00:30:44.510 --> 00:30:46.270
and they give you that
user's home directory.

00:30:46.280 --> 00:30:49.060
So the first thing the
script does is says,

00:30:49.060 --> 00:30:52.700
was I passed zero arguments,
which means it wants a

00:30:52.710 --> 00:30:54.150
listing of the users,
in effect.

00:30:54.160 --> 00:31:00.120
So it will run LDAP search against
whatever your LDAP server is and say,

00:31:00.550 --> 00:31:06.100
dump out all the records for the users,
and then a little bit of sed to convert

00:31:06.180 --> 00:31:08.780
that into just the names of the users.

00:31:09.660 --> 00:31:13.390
Otherwise, it was given an argument,
and that argument is, in effect,

00:31:13.520 --> 00:31:14.500
the name of a user.

00:31:14.680 --> 00:31:19.390
And so it'll take that,
it'll do a query of the LDAP server,

00:31:19.490 --> 00:31:23.400
and this time it'll say,
show me the entry with

00:31:23.560 --> 00:31:23.980
this user's home directory.

00:31:23.980 --> 00:31:28.020
So it'll take that user's ID and give
me their home directory property,

00:31:28.020 --> 00:31:30.570
and then there's a little bit
of awk that will take that home

00:31:30.590 --> 00:31:35.770
directory property and form a
NFS name or URL out of it to say,

00:31:35.830 --> 00:31:37.900
go mount this.

00:31:37.900 --> 00:31:43.560
And we have a demonstration
of another automatter demo.

00:31:43.600 --> 00:31:49.400
[Transcript missing]

00:32:00.300 --> 00:32:08.600
[Transcript missing]

00:32:11.760 --> 00:32:18.830
Let me just... So we've configured
it to run the new automounter

00:32:18.840 --> 00:32:23.370
by setting in /etc/host/config
to set it to automount new,

00:32:23.700 --> 00:32:29.420
reboot,
and the new automounter takes over.

00:32:29.880 --> 00:32:32.270
From there,
we'll need to configure automounter

00:32:32.280 --> 00:32:35.720
then to run our executable map.

00:32:35.760 --> 00:32:43.400
So within the automaster file,
which is also in /etc,

00:32:43.400 --> 00:32:48.210
you can see the various mappings here
where we map network servers to the

00:32:48.390 --> 00:32:53.500
-fs tab that Guy was talking about,
and network public,

00:32:53.500 --> 00:32:57.020
which is our executable map,
to auto public.

00:32:57.040 --> 00:33:01.150
Now auto public is a script that's
going to discover NFS servers using

00:33:01.150 --> 00:33:04.990
Bonjour so that we can have ad hoc NFS.

00:33:12.590 --> 00:33:14.140
So you can see the script.

00:33:14.140 --> 00:33:16.860
I'll make that a little bit bigger here.

00:33:16.890 --> 00:33:19.400
In this case, we've got a Ruby script
that's interacting with,

00:33:19.580 --> 00:33:23.880
that's using the DNSSD service
discovery library.

00:33:23.880 --> 00:33:28.840
And we walk through,
if there's no arguments passed,

00:33:28.940 --> 00:33:32.670
it'll do a listing of all of the
NFS servers on the subnet that

00:33:32.670 --> 00:33:34.900
are advertising over Bonjour.

00:33:34.900 --> 00:33:38.370
And if it's provided a name,
in the case where you're actually

00:33:38.370 --> 00:33:42.340
trying to CD into that directory,
that's when it'll go up and

00:33:42.680 --> 00:33:46.930
provide the mount record so
that AutoFS can do the mount.

00:33:49.300 --> 00:33:50.700
So we can see that.

00:33:50.970 --> 00:33:52.960
And since these are just scripts,
you can just run them

00:33:52.960 --> 00:33:53.790
on the command line.

00:33:53.800 --> 00:33:55.830
It's just simple text output.

00:33:55.980 --> 00:33:59.550
So NFS Server Demo is
this machine over here,

00:33:59.680 --> 00:34:06.190
Power Mac G5 running NFS and
advertising its exports over Bunchor.

00:34:07.980 --> 00:34:15.520
And the next thing,
if we then run AutoPublic

00:34:15.520 --> 00:34:16.660
with passing the--

00:34:17.630 --> 00:34:21.650
The name of that server,
we can see that it returns back,

00:34:21.820 --> 00:34:26.850
it just returns them out, you know,
simply returns them out record through

00:34:26.910 --> 00:34:30.490
standard input to tell us where to mount.

00:34:32.550 --> 00:34:34.300
Well, the magic of spaces.

00:34:34.300 --> 00:34:35.120
OK, here we go.

00:34:35.120 --> 00:34:36.500
How do we get back?

00:34:36.500 --> 00:34:38.060
There we go.

00:34:38.070 --> 00:34:41.260
So from Finder,
you can see that we click on Public,

00:34:41.260 --> 00:34:43.540
and it's done the browsing.

00:34:43.540 --> 00:34:45.750
It's found the server demo.

00:34:45.900 --> 00:34:50.610
Click on it, mounts it, and boom,
there it is.

00:34:50.970 --> 00:34:53.040
Thanks, and back to Guy.

00:35:03.110 --> 00:35:07.230
The capabilities that we have
in what's in the WWDC seed,

00:35:07.240 --> 00:35:12.290
it can mount NFS and
AFP and SMB with URL equals,

00:35:12.290 --> 00:35:16.760
can mount NFS with URL,
as well as mounting NFS with

00:35:16.760 --> 00:35:18.700
a standard NFS specifier.

00:35:18.700 --> 00:35:22.490
It can read standard
automatter maps from files.

00:35:22.500 --> 00:35:27.800
It can read mount records from
NIS or LDAP with FSTab and static.

00:35:27.800 --> 00:35:30.180
And NFS home directories work.

00:35:30.180 --> 00:35:31.490
They have to work.

00:35:31.610 --> 00:35:32.750
That's how I do my work.

00:35:33.000 --> 00:35:39.030
Not in the seed, however,
we don't yet support Kerberoz mounts.

00:35:39.310 --> 00:35:46.000
So your mounts have to be either NFS or
they have to be guest AFP or SMB mounts.

00:35:46.160 --> 00:35:50.280
We don't yet have support for
reading the standard maps.

00:35:50.290 --> 00:35:54.000
And you can't log in with
an AFP home directory.

00:35:54.670 --> 00:35:59.490
And because its capabilities
are not all there,

00:35:59.820 --> 00:36:02.920
it's not the default in the WWDC seed.

00:36:02.980 --> 00:36:06.940
So to turn it on,
there's a line in the etc.host

00:36:07.020 --> 00:36:10.130
config file that controls whether
the automounter is on or off.

00:36:10.220 --> 00:36:11.960
We have a third option.

00:36:12.120 --> 00:36:15.130
You find the line that
says automount equals yes,

00:36:15.130 --> 00:36:17.810
and you change it to
automount equals new,

00:36:17.810 --> 00:36:21.830
all caps new, and then reboot,
and the system will come up with a

00:36:21.830 --> 00:36:24.580
new automounter for testing purposes.

00:36:24.600 --> 00:36:28.390
When we ship Leopard,
you will not have to do this.

00:36:28.590 --> 00:36:31.550
The new automounter will be the default,
and in fact,

00:36:31.550 --> 00:36:36.440
it will be the only automounter,
and it will support all the things

00:36:36.440 --> 00:36:38.690
that were listed in the top.

00:36:40.310 --> 00:36:44.280
And in summary,
it's an auto fast automounter.

00:36:44.280 --> 00:36:46.960
It's multi-threaded,
so if it's waiting for

00:36:46.960 --> 00:36:49.810
some server to respond,
that doesn't mean that every

00:36:50.100 --> 00:36:53.330
single reference to anything
automounted hangs up behind it.

00:36:53.550 --> 00:36:57.820
It'll be mounting things in place,
so you won't have to deal with these

00:36:57.820 --> 00:37:01.900
symlinks that cause your directory
not to be what you think it is.

00:37:01.900 --> 00:37:05.400
No more private automount,
private network.

00:37:05.680 --> 00:37:09.300
And in summary,
it's an autofast automounter.

00:37:09.340 --> 00:37:11.900
It's multi-threaded,
so if it's waiting for

00:37:11.900 --> 00:37:14.890
some server to respond,
that doesn't mean that every

00:37:14.890 --> 00:37:18.580
single reference to anything
automounted hangs up behind it.

00:37:18.580 --> 00:37:22.870
It'll be mounting things in place,
so you won't have to deal with these

00:37:22.870 --> 00:37:27.120
symlinks that cause your directory
not to be what you think it is,

00:37:27.120 --> 00:37:29.940
no more private automount,
private network.

00:37:29.940 --> 00:37:31.840
The automounter won't be
required to access a file

00:37:31.840 --> 00:37:31.840
system once it's been mounted.

00:37:34.700 --> 00:37:37.700
Thank you Guy.

00:37:37.700 --> 00:37:38.700
Good afternoon.

00:37:38.700 --> 00:37:42.370
Let's see if I can get started.

00:37:42.630 --> 00:37:44.610
We have many new features
and enhancements coming

00:37:44.610 --> 00:37:46.700
in the Leopard release,
and I'd like to go over a

00:37:46.700 --> 00:37:48.740
few of those with you today.

00:37:49.450 --> 00:37:52.400
We now support Windows 2003
straight out of the box.

00:37:52.510 --> 00:37:54.730
What I mean by that is we
support the default security

00:37:54.750 --> 00:37:57.780
settings for Windows 2003.

00:37:58.150 --> 00:38:01.340
We can now connect using port 445,
so if you're firewall

00:38:01.340 --> 00:38:04.040
blocking your net bias ports,
this is no longer a problem for us as

00:38:04.090 --> 00:38:06.860
we can still connect to your servers.

00:38:07.200 --> 00:38:10.000
We've added SMB signing,
which prevents man-in-the-middle attacks

00:38:10.090 --> 00:38:11.880
and gives you message authentication.

00:38:11.880 --> 00:38:15.880
The Leopard client will automatically
use signing if required to by the server.

00:38:16.030 --> 00:38:19.680
Should be a note here that
there is a performance impact

00:38:19.690 --> 00:38:21.410
when using SMB signing.

00:38:21.560 --> 00:38:24.220
And all of this is in
your Leopard Seed today,

00:38:24.360 --> 00:38:26.420
so you can try it out.

00:38:26.770 --> 00:38:29.360
We now can reconnect with SMB.

00:38:29.430 --> 00:38:32.340
Anytime you have a connection failure,
SMB will automatically attempt

00:38:32.440 --> 00:38:34.690
to reconnect to the server.

00:38:35.560 --> 00:38:37.590
Once the connect/reconnect
gets established,

00:38:37.640 --> 00:38:40.800
SMB will then attempt to reestablish
the state to what it was before

00:38:40.850 --> 00:38:42.500
the connection went down.

00:38:42.730 --> 00:38:46.280
This should be a big boost for home
directory users who hopefully won't even

00:38:46.280 --> 00:38:48.420
notice they had a connection failure.

00:38:48.810 --> 00:38:51.350
We will no longer prevent your
systems from going to sleep.

00:38:51.400 --> 00:38:55.200
In previous releases,
if you had an SMB volume mounted,

00:38:55.380 --> 00:38:58.550
we wouldn't allow your machines
to go to sleep automatically.

00:38:58.850 --> 00:39:02.070
This is due to the fact that
we didn't support reconnects.

00:39:02.240 --> 00:39:04.230
All of this is also in your Leopard Seed.

00:39:04.330 --> 00:39:06.680
We don't have support for
Kerbero's reconnects currently,

00:39:06.680 --> 00:39:09.460
but we will have them before we ship.

00:39:09.620 --> 00:39:14.040
It is our goal to make SMB work
and behave more like AFP.

00:39:14.270 --> 00:39:17.720
In that vein,
we have added better Carbon, Cocoa,

00:39:17.720 --> 00:39:19.890
and POSIX application support.

00:39:20.970 --> 00:39:25.520
We now support open-deny modes
and mandatory byte range locking.

00:39:25.560 --> 00:39:28.070
This should allow Office and
other applications to work

00:39:28.070 --> 00:39:29.980
more like they do with AFP.

00:39:32.560 --> 00:39:35.400
You can now rename or
delete an open file.

00:39:35.530 --> 00:39:38.690
This is needed by many applications,
but especially by Cocoa and

00:39:38.770 --> 00:39:40.320
POSIX applications.

00:39:40.320 --> 00:39:44.400
So hopefully they'll work a little bit
better when dealing with SMB volumes.

00:39:44.700 --> 00:39:47.310
We have better finder interoperability.

00:39:47.480 --> 00:39:53.110
We now support create times,
and we have more accurate modified times.

00:39:53.270 --> 00:39:55.080
Previous releases,
the modified times were

00:39:55.080 --> 00:39:56.260
on a two-second interval.

00:39:56.410 --> 00:39:58.760
They are now on nanoseconds.

00:39:58.890 --> 00:40:01.620
A lot of applications require
accurate modified times,

00:40:01.620 --> 00:40:05.360
and you might have noticed this if you
played around with the finder in SMB.

00:40:05.550 --> 00:40:09.420
We now support the finder lock bit,
and we map the Windows hidden

00:40:09.420 --> 00:40:11.670
bit to the finder invisible bit.

00:40:12.750 --> 00:40:15.160
We have complete Dropbox support now.

00:40:15.200 --> 00:40:17.940
The Dropbox may reside
on a Macintosh server,

00:40:17.970 --> 00:40:20.200
a Windows server, or any Samba server.

00:40:20.340 --> 00:40:25.060
If your server is using
the Access Control List,

00:40:25.090 --> 00:40:26.960
then your user will need to traverse,
create,

00:40:27.110 --> 00:40:29.660
and write privileges on that Dropbox.

00:40:29.790 --> 00:40:33.960
If your server is doing POSIX permission,
then your user will need to write and

00:40:33.960 --> 00:40:36.400
execute privileges to that Dropbox.

00:40:37.300 --> 00:40:39.910
We now have full Macintosh
file name support.

00:40:40.040 --> 00:40:44.360
We can do this because we are now
mapping the Windows Reserve characters.

00:40:46.170 --> 00:40:51.240
So, any file name that can reside on
your local file system can now reside

00:40:51.240 --> 00:40:53.640
and be used on your SMB volume.

00:40:53.740 --> 00:40:57.000
And I know that one works
and it's in your seed.

00:40:57.120 --> 00:40:59.830
SMB is now working and behaving
more and more like AFP,

00:41:00.000 --> 00:41:00.970
but you know what?

00:41:00.990 --> 00:41:03.390
With all these things that we've added,
there still seems to

00:41:03.450 --> 00:41:04.490
be one thing missing.

00:41:04.500 --> 00:41:06.980
I'm not sure what that is.

00:41:07.710 --> 00:41:09.170
Oh yeah, we have one more thing.

00:41:09.280 --> 00:41:11.040
We still have those
silly .underbar files,

00:41:11.040 --> 00:41:11.900
don't we?

00:41:12.090 --> 00:41:12.940
Not anymore.

00:41:13.070 --> 00:41:15.790
We're blowing them away in Leopard.

00:41:20.670 --> 00:41:23.360
No more dot under bar files with SMB.

00:41:23.390 --> 00:41:28.660
Any server-- well, skip, sorry.

00:41:28.660 --> 00:41:28.660
Getting ahead of myself.

00:41:29.160 --> 00:41:33.840
We currently now support Microsoft's
NTFS stream for client and the server.

00:41:34.030 --> 00:41:39.100
So any system that says they support
streams no longer will need ._files.

00:41:39.150 --> 00:41:44.200
It is also our goal to work with all
systems that say they support streams.

00:41:46.270 --> 00:41:50.340
Currently, the services for Macintosh
streams are fully supported.

00:41:50.340 --> 00:41:53.030
We treat all other streams
as extended attributes.

00:41:53.320 --> 00:41:55.910
There is a size limit
to an extended adder,

00:41:55.910 --> 00:41:59.310
so this might cause some
issues with some streams.

00:41:59.910 --> 00:42:04.200
We have a one-to-one name mapping
between extended attributes and streams.

00:42:04.200 --> 00:42:06.300
We've added stream support
to the Samba server,

00:42:06.300 --> 00:42:10.000
so both the client and the server
will be doing this name mapping.

00:42:10.170 --> 00:42:12.880
All of this code will be
given back to the community,

00:42:12.880 --> 00:42:16.950
so hopefully other vendors can take
these extensions and implement them.

00:42:17.980 --> 00:42:21.010
For FAT file systems,
and this will include your Tiger servers,

00:42:21.190 --> 00:42:24.500
the Leopard client will automatically
revert back to using ._files,

00:42:24.650 --> 00:42:28.580
the same as your Tiger clients.

00:42:28.580 --> 00:42:28.580
So it's just something to be aware of.

00:42:28.930 --> 00:42:31.560
We do have something for upgrading.

00:42:31.660 --> 00:42:37.430
The .clean tool will convert .underbar
files to their native storage format.

00:42:38.420 --> 00:42:42.280
You can run the .clean tool
against any local folder or volume.

00:42:42.540 --> 00:42:46.980
Do not run the .clean tool against any
folder or volume being exported by NFS.

00:42:47.110 --> 00:42:50.930
NFS still uses ._ files and
converting them might cause

00:42:50.930 --> 00:42:53.070
you some unneeded problems.

00:42:53.430 --> 00:42:56.300
If you have a non-Macintosh
file system out there,

00:42:56.370 --> 00:42:59.270
the Leopard Client can help
you with this conversion.

00:42:59.390 --> 00:43:03.110
Just mount the volume with your
Leopard Client and then run the .clean

00:43:03.110 --> 00:43:04.710
tool against the mounted volume.

00:43:04.760 --> 00:43:09.060
You should make sure that no other users
are using that volume at the same time.

00:43:09.210 --> 00:43:12.040
And now,
Rusty is going to come up and show you a

00:43:12.080 --> 00:43:14.800
quick demo of the .clean tool in action.

00:43:19.800 --> 00:43:27.600
[Transcript missing]

00:43:28.030 --> 00:43:31.140
All right, so a lot of you have seen
this kind of display.

00:43:31.140 --> 00:43:33.900
You have a SMB client
connect to your server,

00:43:33.900 --> 00:43:37.860
copies a bunch of files in there,
maybe fonts like this.

00:43:38.000 --> 00:43:40.680
And from Finder,
instead of seeing font files,

00:43:40.710 --> 00:43:43.500
you see a lot of things that
look like UNIX executable files.

00:43:43.500 --> 00:43:52.860
The reason being for that is
that rather than the-- got to

00:43:52.860 --> 00:43:53.490
get to the right directory.

00:43:55.350 --> 00:44:01.070
that a lot of the important information
from those files is missing,

00:44:01.270 --> 00:44:03.010
at least from Finder's perspective.

00:44:03.020 --> 00:44:05.940
It's expected to find it
in the native location,

00:44:06.180 --> 00:44:10.160
in the Finder info,
as part of extended attributes,

00:44:10.160 --> 00:44:12.070
or in the resource fork.

00:44:12.070 --> 00:44:14.810
But in this case, it's set aside.

00:44:15.550 --> 00:44:18.770
In the separate .underbar
file that you can see here,

00:44:18.780 --> 00:44:21.720
we can list on the command line,
you can see those files that

00:44:21.830 --> 00:44:23.290
are invisible from Finder.

00:44:23.330 --> 00:44:26.180
They actually have all of the size.

00:44:26.450 --> 00:44:32.400
In a lot of these cases,
the entire data of these font

00:44:32.400 --> 00:44:37.470
files is kept in the resource work,
so that's where all the information is.

00:44:40.400 --> 00:44:43.980
So what we want to do is fix
that up so that when you're

00:44:44.290 --> 00:44:46.820
running your Leopard SMB client,

00:44:48.900 --> 00:44:53.080
It's not going to know what to
do with these things either.

00:44:53.250 --> 00:44:55.320
So run .clean.

00:44:56.340 --> 00:44:59.250
Specify the directory you
want to clean up and bam,

00:44:59.260 --> 00:45:02.610
just like that, it goes through,
iterates through that

00:45:02.610 --> 00:45:04.610
entire directory hierarchy.

00:45:08.000 --> 00:45:11.590
and recovers all the information that
was lost in the .underbar file and

00:45:11.600 --> 00:45:14.420
gets it back into the native location.

00:45:14.700 --> 00:45:18.130
And again,
that'll be something you'll want

00:45:18.130 --> 00:45:21.610
to do not during the upgrade,
but after you've migrated

00:45:21.610 --> 00:45:22.700
to Leopard Clients.

00:45:23.160 --> 00:45:23.450
Thanks.

00:45:23.450 --> 00:45:25.250
Back to George.

00:45:32.330 --> 00:45:34.960
Okay, now when you have multiple
different types of clients

00:45:34.960 --> 00:45:38.570
accessing your Leopard server,
things are going to be simpler and

00:45:38.570 --> 00:45:40.510
more reliable than ever before.

00:45:40.750 --> 00:45:43.770
Leopard and Windows clients will
automatically use streams without any

00:45:43.770 --> 00:45:46.970
configuration needed on any of your part.

00:45:47.320 --> 00:45:49.650
Tiger clients won't need
any configuration either.

00:45:49.850 --> 00:45:52.830
That's because the Leopard
Sandbook server is automatically

00:45:52.830 --> 00:45:56.730
going to convert your ._ files
to their native storage format.

00:45:57.380 --> 00:46:00.350
AFP and SMB, and this will include
your Windows clients,

00:46:00.350 --> 00:46:04.170
will all now be able to share the same
storage and work seamlessly together

00:46:04.270 --> 00:46:06.300
without any hassles or problems.

00:46:06.790 --> 00:46:10.070
If you have a Windows server that
has an NTFS volume it's sharing,

00:46:10.220 --> 00:46:14.880
you're going to have to turn the streams
option on for your Lepre clients.

00:46:15.020 --> 00:46:16.700
There's two ways of doing this.

00:46:16.830 --> 00:46:20.190
One is to create a special file
on the top level of the share,

00:46:20.190 --> 00:46:23.340
and I'm not going to read it,
on top level of that share,

00:46:23.340 --> 00:46:25.460
and all your Lepre clients,
when they access that share,

00:46:25.460 --> 00:46:27.520
will automatically use streams.

00:46:27.630 --> 00:46:30.430
The second method is to edit
the client's configuration file.

00:46:30.680 --> 00:46:33.860
This will cause that client to
use streams on any share it comes

00:46:33.900 --> 00:46:35.880
to that says it supports streams.

00:46:36.570 --> 00:46:39.230
All modern Windows clients
automatically use streams,

00:46:39.270 --> 00:46:42.380
so there's no configuration
needed on their part.

00:46:42.700 --> 00:46:44.680
If you have a Tiger client
in this environment,

00:46:44.800 --> 00:46:47.700
we recommend that you either
leave streams turned off,

00:46:47.740 --> 00:46:51.920
use some third-party product,
or preferably just switch

00:46:52.000 --> 00:46:53.920
to using a Leopard server.

00:46:54.590 --> 00:46:57.440
In this environment,
we have a Windows 2003 server,

00:46:57.670 --> 00:47:02.160
a Leopard server,
and a variety of clients accessing it.

00:47:02.370 --> 00:47:04.840
They can all share the same storage.

00:47:04.840 --> 00:47:07.260
You can copy data from
one server to the other.

00:47:07.260 --> 00:47:11.120
So you can take a Services for Macintosh
volume running on your Windows box,

00:47:11.300 --> 00:47:15.200
copy that data to your Leopard server,
turn Services for Macintosh off,

00:47:15.360 --> 00:47:18.310
and all your clients will be able to
access that native storage as if it

00:47:18.310 --> 00:47:20.200
was natively stored there all along.

00:47:20.200 --> 00:47:24.200
You can move data between clients,
and all the data stays together.

00:47:24.200 --> 00:47:27.390
That's because the finder information,
the resource fork,

00:47:27.390 --> 00:47:30.010
the extended attributes,
and the data fork are all

00:47:30.010 --> 00:47:31.200
part of the same file.

00:47:31.240 --> 00:47:33.030
So you can move it from
one system to the other,

00:47:33.030 --> 00:47:36.200
from one server to the other,
and never lose any valuable information.

00:47:39.450 --> 00:47:43.160
SMB has now become a first-class
citizen on the Macintosh.

00:47:43.210 --> 00:47:47.200
To review,
we now support Windows 2003 and ReConnex.

00:47:47.200 --> 00:47:50.640
We have better Carbon, Cocoa,
and POSIX application support.

00:47:50.640 --> 00:47:51.980
We interop with the Finder better.

00:47:52.070 --> 00:47:53.720
We support Dropbox.

00:47:53.760 --> 00:47:55.720
We now have full Macintosh
file name support,

00:47:55.720 --> 00:47:58.280
and the last little thing there,
we now support Streams.