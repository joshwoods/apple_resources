WEBVTT

00:00:10.370 --> 00:00:14.100
Okay, well, the titles on the slides show
only one aspect of our lives.

00:00:14.100 --> 00:00:17.530
For the over past year now,
David and I have been more than a

00:00:17.530 --> 00:00:19.400
utility infielder and a word wrangler.

00:00:19.400 --> 00:00:21.020
We've been leading secret lives.

00:00:21.020 --> 00:00:22.700
In fact, we've been book authors.

00:00:22.700 --> 00:00:25.080
Today's session... Thank you.

00:00:30.160 --> 00:00:32.650
Everything that we talk about
today will be in the book that

00:00:32.660 --> 00:00:36.390
we released earlier this year,
Programming with Quartz.

00:00:36.540 --> 00:00:38.600
In fact,
the book contains a lot more than

00:00:38.730 --> 00:00:41.100
what we're going to talk about today.

00:00:41.190 --> 00:00:44.870
It's a comprehensive guide to Quartz,
and it contains a lot of code examples,

00:00:44.870 --> 00:00:46.980
all of which are available for download.

00:00:46.980 --> 00:00:52.480
But I'll tell you a lot more
about the book later on.

00:00:52.480 --> 00:00:56.780
I'm going to start off the session,
and David's going to return later.

00:00:57.610 --> 00:01:00.060
In this session,
you'll learn what Quartz is.

00:01:00.190 --> 00:01:03.900
You'll also learn the fundamental
concepts that are necessary to

00:01:03.900 --> 00:01:06.540
use the Quartz 2D API effectively.

00:01:06.750 --> 00:01:11.750
But most of the session,
David and I will show you how to use the

00:01:11.750 --> 00:01:15.460
Quartz 2D API to accomplish these tasks.

00:01:15.620 --> 00:01:19.140
All of the code that you see today
is in the Quartz 2D basic sample

00:01:19.140 --> 00:01:26.290
application that's available for download
on the WWDC site for this session.

00:01:27.710 --> 00:01:29.820
We'll wrap up the session
by showing you some of the

00:01:29.860 --> 00:01:31.620
advanced capabilities of Quartz.

00:01:31.630 --> 00:01:35.400
And then we'll conclude by giving
you some tips for how you can get

00:01:35.470 --> 00:01:37.500
started as a Quartz programmer.

00:01:39.620 --> 00:01:41.970
Now Quartz has many facets.

00:01:42.060 --> 00:01:45.490
It's really a catch-all term
that's used to describe most

00:01:45.520 --> 00:01:48.260
of the graphics technologies
that are available in Mac OS X.

00:01:48.260 --> 00:01:52.230
In the beginning of Mac OS X,
Quartz referred to the windowing

00:01:52.230 --> 00:01:54.790
system and the 2D drawing engine.

00:01:54.800 --> 00:02:00.560
The Quartz 2D API at that time supported
2D drawing and display management.

00:02:00.560 --> 00:02:03.200
But with each release
of the operating system,

00:02:03.200 --> 00:02:06.330
more and more capabilities
have been added to Quartz.

00:02:07.280 --> 00:02:09.430
For example,
the image handling capabilities

00:02:09.430 --> 00:02:12.970
have grown with each release,
and today it's almost trivial to read

00:02:12.970 --> 00:02:14.940
an image data and to export it out.

00:02:16.370 --> 00:02:20.310
With Tiger, in addition to the advanced
image handling capabilities,

00:02:20.370 --> 00:02:23.580
a number of other Quartz
technologies were introduced,

00:02:23.580 --> 00:02:27.100
including Core Image,
which is the image processing API,

00:02:27.100 --> 00:02:29.790
Core Video,
which is an API that allows you to

00:02:29.790 --> 00:02:33.190
get frame-level access to video,
and Quartz Composer,

00:02:33.480 --> 00:02:37.330
which brings together a number of
Mac OS X technologies in a graphical

00:02:37.330 --> 00:02:41.860
programming environment that you
can use to create motion graphics.

00:02:42.480 --> 00:02:48.280
And PDFKit, which supports opening,
viewing, and searching PDF documents

00:02:48.280 --> 00:02:50.020
in an application.

00:02:50.210 --> 00:02:53.930
And with Leopard, you've heard about two
other Quartz technologies.

00:02:54.150 --> 00:02:57.740
Core animation that allows you to
render layers and animate those

00:02:57.740 --> 00:03:01.100
layers so that you can create
front-row style applications.

00:03:01.330 --> 00:03:04.770
And ImageKit,
which supports user interface elements

00:03:04.770 --> 00:03:10.690
for image views so that your users can
view and edit images and also get access

00:03:10.700 --> 00:03:14.100
to core image filters and to use them.

00:03:14.100 --> 00:03:18.640
Today's talk, however,
focuses solely on Quartz 2D.

00:03:22.120 --> 00:03:24.430
So let me go over a few of the features.

00:03:24.560 --> 00:03:26.440
Device independence.

00:03:26.510 --> 00:03:29.110
This means that when you draw on Quartz,
you don't have to think of the

00:03:29.140 --> 00:03:30.820
device that you're drawing to.

00:03:30.870 --> 00:03:33.490
Quartz takes care of the details for you.

00:03:33.620 --> 00:03:37.260
Quartz will map coordinates,
match colors, and if necessary,

00:03:37.350 --> 00:03:40.320
convert pixel formats and do
anything else that's necessary to

00:03:40.320 --> 00:03:43.170
convert your drawing to the device.

00:03:43.320 --> 00:03:45.190
Quartz is resolution independent.

00:03:45.300 --> 00:03:48.460
Its coordinate space is in units,
not pixels.

00:03:48.530 --> 00:03:51.140
When you draw,
Quartz makes sure that your drawing

00:03:51.140 --> 00:03:55.470
output is at the optimal resolution
for the device that you're drawing to.

00:03:56.080 --> 00:04:01.370
Quartz is high performance in
that it leverages the graphics

00:04:01.370 --> 00:04:01.370
hardware whenever it can.

00:04:02.060 --> 00:04:05.450
It has fully anti-alias
graphics and text.

00:04:05.450 --> 00:04:08.240
It supports alpha transparency,
which you'll see more about in a moment.

00:04:08.240 --> 00:04:10.990
And it has built-in PDF support.

00:04:11.000 --> 00:04:14.950
PDF, in fact,
is a metafile format for Quartz.

00:04:14.960 --> 00:04:17.950
And because of that,
Quartz drawing can be fully

00:04:17.970 --> 00:04:21.980
captured in PDF without the need
to downsample or to compress.

00:04:23.560 --> 00:04:25.850
And this is really important too.

00:04:25.940 --> 00:04:29.100
Quartz is the gateway to using
other graphics technologies.

00:04:29.170 --> 00:04:31.840
Quartz images, for example,
can be used in Core Image.

00:04:31.980 --> 00:04:35.780
And Core Image and other
technologies use Quartz colors.

00:04:36.570 --> 00:04:38.240
So where is Quartz 2D?

00:04:38.390 --> 00:04:40.250
First of all,
I'd like to see how many of you are

00:04:40.250 --> 00:04:43.060
new to the Mac platform or to WWDC.

00:04:43.060 --> 00:04:48.480
Okay, so as you go on this week,
you may see here that Core Graphics

00:04:48.480 --> 00:04:50.860
is used as a synonym for Quartz 2D.

00:04:50.860 --> 00:04:54.140
And that's because the Quartz
2D API is largely declared in

00:04:54.140 --> 00:04:55.980
the Core Graphics framework.

00:04:55.980 --> 00:05:00.060
The image handling capabilities are
declared in the Image.io framework.

00:05:00.630 --> 00:05:04.220
And the diagram here that you see
gives you an idea of where Quartz

00:05:04.230 --> 00:05:07.370
sits in relation to the other
graphics technologies in Mac OS X.

00:05:10.170 --> 00:05:14.540
Just about any software that's
built for Mac OS X can use Quartz.

00:05:14.710 --> 00:05:18.680
The Cocoa Drawing API is
built directly on Quartz 2D.

00:05:18.760 --> 00:05:21.190
And in some cases,
Cocoa developers will want to

00:05:21.190 --> 00:05:26.180
call the Quartz API directly,
either to get access to features

00:05:26.180 --> 00:05:31.010
that might not be exposed
in the Cocoa Drawing API,

00:05:31.010 --> 00:05:33.970
or to gain finer-grained control
over some of the features that

00:05:33.970 --> 00:05:33.970
are needed for your program.

00:05:34.500 --> 00:05:38.300
Now Carbon is the procedural
C API for Mac OS X,

00:05:38.300 --> 00:05:40.800
and Quartz 2D is procedural as well.

00:05:40.930 --> 00:05:45.320
In fact, Quartz 2D is the API to use in
Carbon applications if you want to draw.

00:05:45.320 --> 00:05:49.480
You'll find C and C++
developers will find that it's

00:05:49.480 --> 00:05:51.990
really easy to use this API.

00:05:52.360 --> 00:05:56.200
Now Carbon is the procedural
C API for Mac OS X,

00:05:56.200 --> 00:05:58.700
and Quartz 2D is procedural as well.

00:05:58.700 --> 00:06:03.180
In fact, Quartz 2D is the API to use in
Carbon applications if you want to draw.

00:06:03.220 --> 00:06:07.380
You'll find C and C++
developers will find that it's

00:06:07.620 --> 00:06:09.900
really easy to use this API.

00:06:24.830 --> 00:06:28.600
Now Carbon is the procedural
C API for Mac OS X,

00:06:28.610 --> 00:06:31.100
and Quartz 2D is procedural as well.

00:06:31.100 --> 00:06:32.630
In fact, Quartz 2D is the API to use in
Carbon applications if you want to draw.

00:06:32.630 --> 00:06:32.630
You'll find C and C++
developers will find that it's

00:06:32.630 --> 00:06:32.630
really easy to use this API.

00:06:33.200 --> 00:06:37.600
The Quartz 2D API is organized
around opaque data types.

00:06:37.680 --> 00:06:39.210
And there's a number
of opaque data types,

00:06:39.250 --> 00:06:42.780
so I've chosen to show
you only a few here today.

00:06:42.880 --> 00:06:46.850
Each opaque data type in
Quartz represents an object.

00:06:47.220 --> 00:06:52.140
For example, the CG image ref data type
represents a Quartz image.

00:06:52.200 --> 00:06:55.040
CG color ref represents a color object.

00:06:55.130 --> 00:06:59.240
And the CG path ref data type
represents a path object.

00:06:59.380 --> 00:07:02.420
Now you'll see how to use a
number of these opaque data

00:07:02.420 --> 00:07:05.400
types and more today as we go on.

00:07:05.960 --> 00:07:08.680
Now because Quartz has
its object-like flavor,

00:07:08.780 --> 00:07:13.050
its API is designed with a
number of functions that create,

00:07:13.260 --> 00:07:16.440
access, modify, use,
and more importantly,

00:07:16.440 --> 00:07:17.620
reuse Quartz objects.

00:07:17.620 --> 00:07:21.000
So here I've put some examples
of some of the functions that

00:07:21.120 --> 00:07:22.780
are in the Quartz 2D API.

00:07:22.780 --> 00:07:26.100
And as you can see,
it's a pretty well-designed API.

00:07:26.100 --> 00:07:29.160
The function names are
pretty straightforward.

00:07:29.160 --> 00:07:31.980
You can pretty much guess
what the functions do.

00:07:31.980 --> 00:07:35.320
And the CG prefix
refers to core graphics.

00:07:38.240 --> 00:07:41.600
Well, with any API that uses objects,
there are going to be some

00:07:41.600 --> 00:07:44.550
rules for memory management,
and they're pretty simple.

00:07:44.670 --> 00:07:47.660
If you create an object in Quartz,
you own it.

00:07:48.050 --> 00:07:51.450
Owners must release all objects that they
create when they no longer need them.

00:07:51.450 --> 00:07:55.060
If you don't own an object,
don't release it.

00:07:55.060 --> 00:07:58.370
But if you want to keep an
object around that you don't own,

00:07:58.370 --> 00:07:59.680
you need to retain it.

00:08:00.480 --> 00:08:05.200
Quartz provides functions for many
of the opaque data types that will

00:08:05.200 --> 00:08:08.840
retain and release that specific type,
as you can see for images.

00:08:08.930 --> 00:08:14.200
But because Quartz opaque data
types are derived directly from

00:08:14.200 --> 00:08:18.400
core foundation CF type data types,
you can also use the functions

00:08:18.400 --> 00:08:19.790
CF retain and CF release.

00:08:23.200 --> 00:08:26.240
The Quartz has a very
flexible coordinate system.

00:08:26.250 --> 00:08:29.980
The Quartz coordinates
are floating point values.

00:08:30.220 --> 00:08:32.390
And the origin is at the lower left.

00:08:32.700 --> 00:08:38.480
X values increase from left to right,
and Y values increase from bottom to top.

00:08:39.550 --> 00:08:41.910
Quartz provides a number of
functions that allow you to

00:08:41.910 --> 00:08:43.410
operate on coordinate space.

00:08:43.510 --> 00:08:46.740
Here I've listed three of the
simplest functions that you can use.

00:08:46.760 --> 00:08:50.110
As you can see, you can change the scale
of the coordinates space.

00:08:50.230 --> 00:08:52.470
You can turn or rotate
the coordinate space.

00:08:52.590 --> 00:08:55.300
You can move or translate the origin.

00:08:55.990 --> 00:08:58.860
For example, you can scale the space.

00:08:58.930 --> 00:09:01.180
Okay,
let's take a look at the default again.

00:09:01.260 --> 00:09:04.030
You can also concatenate
several operations together.

00:09:04.110 --> 00:09:06.750
So for example,
you can flip the coordinate space by

00:09:06.750 --> 00:09:10.870
translating and scaling X negatively.

00:09:11.300 --> 00:09:13.100
Okay,
let's go back and look at the default.

00:09:13.330 --> 00:09:17.120
If you look at the text on the woman's
shirt and the stain on her sleeve,

00:09:17.140 --> 00:09:20.420
you'll see that indeed it's been flipped,
and that the origin is

00:09:20.420 --> 00:09:22.900
now at the lower right,
and X values now go

00:09:23.080 --> 00:09:25.200
increase from right to left.

00:09:25.220 --> 00:09:27.640
You can also skew the space.

00:09:27.640 --> 00:09:34.710
And by the way, if you want to know why
the woman is screaming,

00:09:34.710 --> 00:09:35.510
you'll have to read our book.

00:09:35.510 --> 00:09:35.510
The answer's in there.

00:09:35.820 --> 00:09:40.160
Now, transforming space is very powerful
because it allows you to operate

00:09:40.160 --> 00:09:44.080
on the space rather than having
to manipulate object coordinates.

00:09:44.180 --> 00:09:47.180
So, for example,
if you want to make an object bigger and

00:09:47.200 --> 00:09:53.890
draw it in a different part of the space,
it's much easier to transform the space.

00:09:53.970 --> 00:09:57.580
Now, for example,
you can do really easy zooming that way.

00:10:00.070 --> 00:10:04.250
Now Quartz 2D has a number of
graphics primitives as you might

00:10:04.250 --> 00:10:06.910
expect in any 2D drawing library.

00:10:08.670 --> 00:10:12.260
And as you might expect,
Quartz supports line art drawing.

00:10:12.260 --> 00:10:15.870
You can create paths in Quartz,
and paths are made up

00:10:15.870 --> 00:10:17.590
of lines and curves.

00:10:17.750 --> 00:10:22.360
And the paths can be open, closed,
simple, complex.

00:10:22.410 --> 00:10:26.000
You can draw just about any
arbitrary shape that you want.

00:10:27.900 --> 00:10:31.190
Quartz supports a number
of image formats as well.

00:10:31.240 --> 00:10:36.330
It supports JPEG, PNG, TIFF, GIF,
camera raw formats that can

00:10:36.330 --> 00:10:38.560
contain multiple images.

00:10:38.560 --> 00:10:42.420
You can create thumbnails and you
can load images incrementally.

00:10:42.560 --> 00:10:48.540
Quartz provides a number of functions
for you to manipulate images,

00:10:48.640 --> 00:10:51.600
for you to read an image
data and export it,

00:10:51.600 --> 00:10:51.600
and even to create image masks.

00:10:52.950 --> 00:10:55.780
And because PDF is the
metafile format for Quartz,

00:10:55.840 --> 00:10:58.930
as you might expect,
the PDF is the first class

00:10:59.140 --> 00:11:00.550
graphic primitive too.

00:11:00.660 --> 00:11:05.120
You can just as easily create
PDF content as to draw it.

00:11:05.730 --> 00:11:08.090
Now, Quartz has a number of
low-level text functions.

00:11:08.150 --> 00:11:12.370
Now, these text functions are used
primarily by higher-level frameworks.

00:11:12.450 --> 00:11:15.480
In this talk today,
we're not going to tell you anything

00:11:15.480 --> 00:11:17.590
more about Quartz text functions.

00:11:17.610 --> 00:11:20.240
In most cases,
applications either need more

00:11:20.250 --> 00:11:23.870
sophisticated text layout and
rendering than what Quartz offers,

00:11:23.870 --> 00:11:26.400
or they need something really simple,
like a text field.

00:11:26.420 --> 00:11:29.620
So, if you need to support
text in your application,

00:11:29.720 --> 00:11:32.690
I invite you to look at one
of the other Mac OS X APIs,

00:11:32.810 --> 00:11:35.280
such as Cocoa Drawing or Quartz Text.

00:11:37.790 --> 00:11:40.040
Okay, now Quartz uses a painter's model.

00:11:40.240 --> 00:11:41.750
The painter's model is nothing new.

00:11:41.800 --> 00:11:46.970
It's been around for hundreds of years,
used by such people as Rembrandt.

00:11:47.340 --> 00:11:51.440
Now, just as in Rembrandt's time,
if you have paint that you want to

00:11:51.440 --> 00:11:55.530
apply to the canvas like Rembrandt
did in our digital model here,

00:11:55.530 --> 00:11:59.180
if you want to change any paint
that's on the virtual page,

00:11:59.220 --> 00:12:03.480
the only way that you can do it is
to apply more paint on top of it.

00:12:03.500 --> 00:12:05.380
So let's see how that works.

00:12:05.380 --> 00:12:06.930
Here we have a gradient.

00:12:06.930 --> 00:12:09.740
We have an image of a
rather nasty-looking cat,

00:12:09.740 --> 00:12:11.280
and we have some text.

00:12:11.840 --> 00:12:16.020
We have our blank canvas,
and we first draw the gradient,

00:12:16.020 --> 00:12:18.110
then the text, then the cat.

00:12:18.120 --> 00:12:20.980
You'll see that the drawing
order really matters,

00:12:21.080 --> 00:12:24.660
and we have a result that isn't
quite as pleasing as if we change the

00:12:24.660 --> 00:12:29.020
drawing order and draw our gradient,
our cat, and our text.

00:12:29.020 --> 00:12:32.040
So as you can see,
you can create rather sophisticated

00:12:32.130 --> 00:12:36.160
images in Quartz using a small
number of very powerful primitives.

00:12:38.160 --> 00:12:41.010
Now Quartz also supports
alpha transparency.

00:12:41.220 --> 00:12:46.480
Every color component in Quartz has
an alpha component attached to it.

00:12:47.270 --> 00:12:52.320
And the alpha component of a color,
the value can range from 0 to 1.

00:12:52.320 --> 00:12:55.160
1 means that that color
is completely opaque,

00:12:55.210 --> 00:12:57.260
and 0 means that it's
completely transparent.

00:12:57.260 --> 00:12:59.140
So let's see how this works.

00:12:59.140 --> 00:13:02.180
I have my canvas,
I draw the image of my screaming woman,

00:13:02.180 --> 00:13:05.240
and on top of it I'm going
to paint a red rectangle,

00:13:05.240 --> 00:13:07.900
and the alpha value of
that red color is 1.

00:13:08.240 --> 00:13:11.200
It's completely opaque,
so you cannot see the image underneath.

00:13:11.200 --> 00:13:15.590
But if I change the alpha
value of the red color to 0.5,

00:13:15.650 --> 00:13:17.720
you'll see that the image
underneath shows through.

00:13:17.720 --> 00:13:20.720
And finally,
if I draw that rectangle using a

00:13:20.740 --> 00:13:24.620
red color with an alpha value of 0,
it's as if I didn't draw

00:13:24.690 --> 00:13:26.360
the rectangle at all.

00:13:28.960 --> 00:13:32.820
Quartz also has the
notion of global alpha.

00:13:32.870 --> 00:13:37.230
And global alpha is applied to
all the colors that are drawn.

00:13:37.330 --> 00:13:41.580
So if the alpha value is 1,
that means that everything that's

00:13:41.670 --> 00:13:43.540
drawn will be completely opaque.

00:13:43.540 --> 00:13:44.580
Nothing is changed here.

00:13:44.580 --> 00:13:48.530
So we can see in our image that our
image here looks just like it did on

00:13:48.530 --> 00:13:50.850
the previous slides that I showed you.

00:13:51.290 --> 00:13:54.540
But if we change the global alpha,
as we decrease the global alpha,

00:13:54.540 --> 00:13:58.000
that image will dim until
finally when the value is zero,

00:13:58.230 --> 00:14:00.440
you won't be able to
see the image at all.

00:14:00.440 --> 00:14:02.110
It's as if I didn't draw it.

00:14:02.250 --> 00:14:06.030
Now when you combine the notion
of alpha transparency with the

00:14:06.030 --> 00:14:08.730
notion of the painter's model,
you'll see that what we really

00:14:08.730 --> 00:14:12.200
have in Quartz is a watercolor
artist painter's model.

00:14:12.200 --> 00:14:16.410
So you might think of someone like
Winslow Homer instead of Rembrandt.

00:14:18.420 --> 00:14:21.680
Now, color management is the process
of ensuring consistent color

00:14:21.880 --> 00:14:25.540
across peripheral devices,
such as displays or printers,

00:14:25.670 --> 00:14:27.420
and across operating system platforms.

00:14:27.440 --> 00:14:30.920
Now, Quartz, fortunately,
has built-in color management.

00:14:30.920 --> 00:14:34.450
But let's take a look at what
a color-managed picture looks

00:14:34.470 --> 00:14:36.620
like compared to one that's not.

00:14:36.640 --> 00:14:38.710
As you can see,
the color-managed picture,

00:14:38.710 --> 00:14:41.220
the colors exactly match
what's in the top image.

00:14:41.220 --> 00:14:44.520
But in the one that's not color-managed,
there are striking differences.

00:14:45.780 --> 00:14:49.160
One of them you can look at is
the color of the life vests.

00:14:49.180 --> 00:14:51.370
But the water, the raft,
there are some striking

00:14:51.400 --> 00:14:52.700
color differences there.

00:14:52.700 --> 00:14:56.590
But fortunately in Quartz,
if you use the correct color functions,

00:14:56.600 --> 00:14:58.600
which David will show
you how to do later,

00:14:58.600 --> 00:15:00.180
you do not have to worry about this.

00:15:00.180 --> 00:15:01.640
You will get color management for free.

00:15:04.790 --> 00:15:10.460
Now, Quartz, one set of drawing commands
will draw to any destination.

00:15:10.550 --> 00:15:13.660
Your drawing commands are
independent of the destination.

00:15:13.860 --> 00:15:18.370
All you'd have to do is specify
your drawing and tell Quartz what

00:15:18.370 --> 00:15:20.700
destination that you want to draw to.

00:15:20.790 --> 00:15:24.480
Whether it's a window review, a printer,
a PDF or a bitmap,

00:15:24.570 --> 00:15:27.100
the drawing commands are the same.

00:15:27.140 --> 00:15:31.830
So how do you specify to Quartz which
destination that you want to draw to?

00:15:33.290 --> 00:15:37.810
You do that with a graphics context,
which is represented by the

00:15:37.810 --> 00:15:39.800
CG context rep data type.

00:15:39.800 --> 00:15:44.850
A Quartz graphics context is an
abstract drawing destination.

00:15:44.990 --> 00:15:46.820
There are several flavors of them.

00:15:47.000 --> 00:15:50.890
There are graphics contexts
for on-screen drawing,

00:15:50.890 --> 00:15:54.890
off-screen drawing, printing,
PDF documents.

00:15:55.090 --> 00:15:59.080
So I'd like to show you how to create
some on-screen drawing contexts,

00:15:59.110 --> 00:16:00.560
and later on,
David's going to show you how

00:16:00.560 --> 00:16:04.000
to create some of the other
flavors of drawing contexts.

00:16:04.000 --> 00:16:08.240
So let's start with Cocoa first.

00:16:09.100 --> 00:16:12.780
So Cocoa programmers need to
obtain a Quartz graphics context

00:16:12.780 --> 00:16:15.270
in the drawRect method for the
view that they want to draw to.

00:16:15.280 --> 00:16:19.960
The first thing they need to do is
to call the current context method

00:16:20.030 --> 00:16:24.670
of the NSGraphicsContext class to
obtain the Cocoa graphics context

00:16:24.720 --> 00:16:27.210
associated with the current thread.

00:16:27.220 --> 00:16:29.310
Now that's a Cocoa graphics context.

00:16:29.310 --> 00:16:33.040
Quartz is at a much lower level,
so you need to extract the lower

00:16:33.040 --> 00:16:36.600
level graphics context out of
the Cocoa graphics context,

00:16:36.740 --> 00:16:39.190
and you do that by calling
the GraphicsPort method.

00:16:39.200 --> 00:16:42.460
After you have the
Quartz graphics context,

00:16:42.570 --> 00:16:45.660
you can then pass out to the
appropriate Quartz drawing functions.

00:16:45.660 --> 00:16:47.380
That's all there is to it.

00:16:47.420 --> 00:16:47.990
It's pretty easy.

00:16:49.630 --> 00:16:52.850
Now, for Carbon developers,
it's just as easy.

00:16:52.850 --> 00:16:55.330
First,
you install an event handler on the

00:16:55.330 --> 00:16:57.610
HIVO object that you want to draw to.

00:16:57.610 --> 00:17:01.630
Then, in your drawing event handler,
you call the Carbon event

00:17:01.630 --> 00:17:03.900
manager function,
get event parameter,

00:17:03.900 --> 00:17:06.280
to extract the Quartz graphics context.

00:17:06.280 --> 00:17:09.860
And then you pass that context to the
appropriate Quartz drawing functions.

00:17:10.300 --> 00:17:13.820
Now, the one caveat here is that the
window that's associated with

00:17:13.820 --> 00:17:17.240
the HIVO that you're drawing to
must have compositing turned on.

00:17:17.240 --> 00:17:20.280
But compositing is on by default,
so just make sure that

00:17:20.320 --> 00:17:21.690
you don't turn it off.

00:17:24.880 --> 00:17:29.180
Quartz maintains a graphic state,
and that state contains a lot

00:17:29.180 --> 00:17:32.180
of parameters that control
exactly how drawing is done.

00:17:32.180 --> 00:17:34.500
I've listed only a few
of the parameters here,

00:17:34.580 --> 00:17:42.330
such as stroke color, fill color,
and any coordinate space transformations

00:17:42.330 --> 00:17:42.330
that you apply to the coordinate space.

00:17:42.690 --> 00:17:44.610
Now,
the other thing about Quartz's graphic

00:17:44.610 --> 00:17:46.200
state is that it's stack-based.

00:17:46.200 --> 00:17:52.090
And that means that you can save
a snapshot of the current state by

00:17:52.090 --> 00:17:53.830
pushing it onto the graphics stack.

00:17:53.880 --> 00:17:58.880
And you can push several snapshots
of the graphic state on if you want.

00:17:58.880 --> 00:18:05.190
And you can return to previous states by
popping states from the graphics stack.

00:18:05.980 --> 00:18:07.780
Now, the only way that you
can change parameters,

00:18:07.910 --> 00:18:10.660
well, there's two ways that you can
actually have parameters change.

00:18:10.660 --> 00:18:15.290
One is to set the value of a parameter,
and that parameter will stay set to

00:18:15.290 --> 00:18:20.140
that value until you either set it to
a different value or until you restore

00:18:20.140 --> 00:18:23.500
a graphic state to a previous value.

00:18:23.500 --> 00:18:28.290
So let's see how working
with a graphics stack works.

00:18:29.350 --> 00:18:30.950
works here.

00:18:31.070 --> 00:18:33.140
Here I have my current graphic state.

00:18:33.150 --> 00:18:37.610
And in it I have only two parameters,
the stroke color and the fill color.

00:18:38.560 --> 00:18:42.380
Now, if I call the Quartz
function CGContextSaveGState,

00:18:42.470 --> 00:18:45.900
what that does is it makes
a copy of the current state

00:18:45.900 --> 00:18:51.320
and pushes it onto the stack,
and that copy now

00:18:51.320 --> 00:18:51.320
becomes my current state.

00:18:51.500 --> 00:18:55.390
Now any operations I do in changing the
parameters associated with that state,

00:18:55.440 --> 00:18:58.800
such as the fill color,
operate on the current state.

00:18:58.860 --> 00:19:03.240
I can go ahead and do drawing
and my fill color will be green.

00:19:03.340 --> 00:19:06.280
If I want to revert back
to a previous state,

00:19:06.280 --> 00:19:10.520
I simply call the function
CGContextRestoredGState and that

00:19:10.620 --> 00:19:13.560
pops the state off the stack and
I revert to the previous one.

00:19:13.640 --> 00:19:16.740
So graphic state management,
it's that easy.

00:19:17.850 --> 00:19:20.230
Okay, enough talking about Quartz.

00:19:20.290 --> 00:19:22.980
It's time to take a look at some code.

00:19:24.270 --> 00:19:28.230
And I'm going to start with
filling and stroking a rectangle.

00:19:28.320 --> 00:19:30.990
So here I put five of the
convenience functions that

00:19:31.140 --> 00:19:34.700
Quartz offers for drawing shapes.

00:19:34.810 --> 00:19:37.660
What I want you to notice about this
is that in each of these functions,

00:19:37.740 --> 00:19:41.090
the first parameter
is a graphics context.

00:19:41.320 --> 00:19:44.700
The second parameter is the
shape that you want to draw.

00:19:44.820 --> 00:19:48.280
And for the case of the ellipse,
the rectangle defines the major

00:19:48.280 --> 00:19:50.200
and minor axis of the ellipse.

00:19:50.380 --> 00:19:52.850
Now one of the functions
takes a third parameter,

00:19:52.960 --> 00:19:55.580
CGContextFillRex,
and that's a function that

00:19:55.580 --> 00:19:57.020
will fill many rectangles.

00:19:57.260 --> 00:20:00.490
The third parameter indicates
to Quartz how many rectangles

00:20:00.530 --> 00:20:02.190
you're passing it to fill.

00:20:02.620 --> 00:20:04.230
So let's take a look at a routine.

00:20:04.290 --> 00:20:06.580
I'm going to step through
this line by line so you can

00:20:06.580 --> 00:20:08.890
understand exactly what's going on.

00:20:09.540 --> 00:20:12.020
The first thing I'm going to
do is to create a rectangle.

00:20:12.170 --> 00:20:13.880
This is just an abstract rectangle.

00:20:13.880 --> 00:20:15.560
No drawing will be done.

00:20:15.580 --> 00:20:21.220
I'll call the function CG_rectmake,
and I'm going to provide the origin of

00:20:21.220 --> 00:20:23.960
that rectangle and the width and height.

00:20:24.090 --> 00:20:30.030
So here I've specified x equals 10,
y equals 10, and the width has 130 units,

00:20:30.080 --> 00:20:32.430
and the height is 100 units.

00:20:33.230 --> 00:20:36.450
Next, I want to set my fill color by
providing a color to Quartz,

00:20:36.640 --> 00:20:38.670
the new fill color,
because by default the fill

00:20:38.670 --> 00:20:41.480
color is black and it's not
going to show up very well here.

00:20:41.480 --> 00:20:45.780
So I'm providing a blue color,
and I'm getting that color from

00:20:45.780 --> 00:20:49.200
a function that David wrote,
my get blue color,

00:20:49.200 --> 00:20:51.850
and David will show you how
to write this function later.

00:20:51.860 --> 00:20:54.510
It's going to provide me a
color-managed blue color.

00:20:54.520 --> 00:20:57.070
So, so far, no drawing's been done yet.

00:20:57.100 --> 00:21:00.590
Now I'll call a function that
will actually fill the rectangle,

00:21:00.590 --> 00:21:01.970
and this is my result.

00:21:03.540 --> 00:21:05.230
Of course, the axes aren't drawn.

00:21:05.260 --> 00:21:08.470
I put them there just to remind
you that the origin of the

00:21:08.490 --> 00:21:10.520
rectangle is at X equals 10,
Y equals 10.

00:21:12.150 --> 00:21:14.240
Okay, let's stroke that same rectangle.

00:21:14.370 --> 00:21:17.840
So now I need to set a stroke color,
and I'm going to provide a green color,

00:21:17.840 --> 00:21:20.420
again, using another function
that David's written.

00:21:20.420 --> 00:21:25.510
And then I'm actually going to call a
function that will stroke the rectangle,

00:21:25.630 --> 00:21:28.200
providing it a width of 10 units.

00:21:28.200 --> 00:21:30.070
And this is my result.

00:21:30.080 --> 00:21:33.180
So here's where I'd like to
take a little detour to show you

00:21:33.220 --> 00:21:35.300
exactly how Quartz does stroking.

00:21:37.210 --> 00:21:39.720
So a path is an abstract concept.

00:21:39.790 --> 00:21:42.260
It's infinitely thin.

00:21:42.590 --> 00:21:46.310
When you ask Quartz to stroke a path,
it applies paint such that

00:21:46.370 --> 00:21:47.890
the paint straddles the path.

00:21:47.900 --> 00:21:52.540
So in the case of my rectangular path,
the stroke is 10 units wide,

00:21:52.540 --> 00:21:55.390
5 units of the paint will
be on one side of the path,

00:21:55.440 --> 00:21:56.900
and 5 units will be on the other.

00:21:56.900 --> 00:22:00.430
Now this has implications for
how the results come out because

00:22:00.430 --> 00:22:03.150
drawing order will matter,
as you'll see.

00:22:04.300 --> 00:22:06.230
Now in the second part of this routine,
I'm going to do just the

00:22:06.290 --> 00:22:07.440
opposite of what I've done.

00:22:07.440 --> 00:22:10.510
First, I'm going to stroke the rectangle,
then I'm going to fill it so that you

00:22:10.570 --> 00:22:12.600
can see the difference in drawing order.

00:22:12.600 --> 00:22:16.640
The first thing I'll do in the second
part here is to save the graphic state.

00:22:16.760 --> 00:22:17.200
Why?

00:22:17.200 --> 00:22:22.180
Because next I'm going to translate the
origin 200 units in the X direction.

00:22:22.180 --> 00:22:24.330
So that's what I'll have.

00:22:24.410 --> 00:22:25.890
Now when I start drawing,
it's going to be with

00:22:25.910 --> 00:22:27.020
respect to that new origin.

00:22:27.020 --> 00:22:29.540
My stroke and fill
colors are already set,

00:22:29.540 --> 00:22:33.380
so I'm just going to go right ahead
and call my stroking function.

00:22:34.310 --> 00:22:35.180
And this is what I'll get.

00:22:35.180 --> 00:22:38.300
Then I'll call the filling function,
and that's what I'll get.

00:22:38.320 --> 00:22:40.080
Now you can compare the two.

00:22:40.080 --> 00:22:42.880
You'll see in the case of the one on
the left that the stroke partially

00:22:43.060 --> 00:22:45.530
obscures the filled rectangle,
whereas on the right,

00:22:45.530 --> 00:22:47.940
the filled rectangle
partially obscures the stroke.

00:22:47.980 --> 00:22:52.940
And that has to do with how
strokes are accomplished in quartz.

00:22:54.540 --> 00:22:57.260
Okay, now finally I'm going
to restore my state,

00:22:57.280 --> 00:22:59.750
my graphic state,
and that will push the origin back

00:22:59.820 --> 00:23:01.160
over to where it was to begin with.

00:23:01.220 --> 00:23:04.510
So if I want to do any other drawing,
it's been reset that way.

00:23:06.010 --> 00:23:07.570
Okay,
with that I'd like to bring David up,

00:23:07.710 --> 00:23:09.250
and he's going to show
you a lot more code,

00:23:09.450 --> 00:23:11.590
starting with images.

00:23:18.130 --> 00:23:19.280
Thanks, Bunny.

00:23:19.330 --> 00:23:20.290
And the microphone works?

00:23:20.340 --> 00:23:22.350
Great.

00:23:22.410 --> 00:23:24.940
I'm used to being a utility
infielder and coming off the bench,

00:23:24.940 --> 00:23:25.590
so here I am.

00:23:25.660 --> 00:23:27.950
And we're going to talk about
drawing an image from a file.

00:23:27.960 --> 00:23:31.280
Bunny's already talked about
some of the capabilities of

00:23:31.350 --> 00:23:32.820
Quartz for drawing images.

00:23:32.990 --> 00:23:36.490
And I want to show you
how easy it is to do.

00:23:37.290 --> 00:23:40.560
So these are the functions we're going
to use in our code to draw an image.

00:23:40.560 --> 00:23:44.090
This function here,
CGImageSourceCreateWithURL,

00:23:44.090 --> 00:23:47.400
is a function to create
an image source object.

00:23:47.450 --> 00:23:51.800
That Quartz-- it provides a way
to get at image data that may be

00:23:51.800 --> 00:23:53.620
on disk or in some other manner.

00:23:53.700 --> 00:23:57.640
This function is to get
at data that's on disk.

00:23:57.680 --> 00:24:00.390
Once we have an image source,
we can create from that

00:24:00.390 --> 00:24:05.010
image source a CGImageObject,
a CGImageRef.

00:24:05.200 --> 00:24:09.880
CGImageObjects are what Quartz uses
to represent an individual image.

00:24:09.910 --> 00:24:14.120
And once we have an image,
we can draw it with CGContextDrawImage.

00:24:14.300 --> 00:24:16.300
So let's take a look at
some code that does that.

00:24:16.300 --> 00:24:20.380
This is just going to read an image
from a URL and draw it to the context

00:24:20.380 --> 00:24:22.490
that's passed into the function.

00:24:22.650 --> 00:24:26.120
First thing we do is we create
an image source from that URL.

00:24:26.150 --> 00:24:28.880
We have a Quartz object
that we've created.

00:24:28.920 --> 00:24:33.140
The next line of code is to create
an image from that image source.

00:24:33.150 --> 00:24:37.110
Now, image sources can contain a
wide variety of types of data.

00:24:37.250 --> 00:24:39.910
For example, JPEG, PNG,
the data formats that

00:24:39.910 --> 00:24:41.880
Bunny's already talked about.

00:24:41.910 --> 00:24:44.180
There's a lot of image
sources that are supported.

00:24:44.200 --> 00:24:49.560
Some of those image sources can contain
more than one image in the image source.

00:24:49.610 --> 00:24:53.820
So I don't know if you went to
the resolution-independent user

00:24:53.820 --> 00:24:56.200
interface talk earlier this week,
but for example,

00:24:56.200 --> 00:25:02.560
it was recommended that you supply
multiple TIF images in a TIF file,

00:25:02.560 --> 00:25:02.990
for example, as a