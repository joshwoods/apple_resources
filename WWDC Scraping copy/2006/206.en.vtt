WEBVTT

00:00:10.520 --> 00:00:11.490
Good morning everyone.

00:00:11.490 --> 00:00:13.920
Welcome to the Quartz
Composer Overview session.

00:00:13.920 --> 00:00:17.200
This is going to be the first
of our three Quartz Composer

00:00:17.200 --> 00:00:19.580
sessions this year at WWDC.

00:00:20.750 --> 00:00:23.150
I'm Pierre-Olivier Latour,
Engineering Manager of

00:00:23.150 --> 00:00:26.770
Quartz Composer at Apple.

00:00:27.160 --> 00:00:32.920
Can you go back to slides please?

00:00:32.920 --> 00:00:32.920
Thanks.

00:00:33.120 --> 00:00:36.170
All right, so what are we going to learn
today in these overview sessions?

00:00:36.200 --> 00:00:38.860
Well, first of all,
the basics of course of Composer,

00:00:38.860 --> 00:00:41.340
how the technology works,
what is it made of?

00:00:41.460 --> 00:00:45.340
We'll look at building a simple
composition as an example,

00:00:45.500 --> 00:00:49.000
then we'll look at where you
can use those compositions out

00:00:49.020 --> 00:00:52.430
of the box inside Mac OS X,
how to leverage the new

00:00:52.430 --> 00:00:56.480
composition repository that
we're introducing in Leopard.

00:00:56.480 --> 00:01:00.790
We'll also have a rapid look at how
you can integrate compositions directly

00:01:00.870 --> 00:01:04.620
inside your applications using our APIs,
interface builders and so on,

00:01:04.620 --> 00:01:08.380
and we'll finish on an overview
of what's new regarding course

00:01:08.380 --> 00:01:11.330
Composer in Mac OS X Leopard.

00:01:11.660 --> 00:01:14.100
So first of all,
what exactly is Quartz Composer?

00:01:14.360 --> 00:01:17.290
Quartz Composer is a technology
that's deeply integrated into

00:01:17.360 --> 00:01:19.110
the US at a fairly low level.

00:01:19.180 --> 00:01:23.690
It's completely built around OpenGL,
which gives us high performances

00:01:23.690 --> 00:01:25.520
and a great visual quality.

00:01:25.610 --> 00:01:29.370
Now what we do with that technology
is we use it as a visual synthesizer,

00:01:29.370 --> 00:01:30.940
and we build compositions.

00:01:31.080 --> 00:01:33.010
And compositions,
we're going to learn a lot more

00:01:33.010 --> 00:01:34.950
about them in the upcoming hour.

00:01:35.060 --> 00:01:37.330
But for now,
you can just consider composition

00:01:37.330 --> 00:01:41.040
as some kind of black boxes that
have some input parameters and

00:01:41.110 --> 00:01:44.040
produce some output results.

00:01:44.040 --> 00:01:46.860
Those compositions can also
interact with the user.

00:01:47.010 --> 00:01:50.900
And there are various possibilities,
like the mouse, the keyboard, tablets,

00:01:50.950 --> 00:01:51.750
media devices.

00:01:51.760 --> 00:01:54.220
It's actually pretty large.

00:01:54.440 --> 00:01:57.240
A big difference between this technology
and a number of other graphics

00:01:57.240 --> 00:02:01.370
technology we have in the OS is this
one comes with a full featured graphical

00:02:01.370 --> 00:02:03.400
editor that is part of the DevTools.

00:02:03.400 --> 00:02:06.010
So if you install the
DevTools on Tiger Leopard,

00:02:06.080 --> 00:02:08.400
you will have the Quartz Composer tool.

00:02:08.400 --> 00:02:13.250
And finally, we have made it so it's very
easy to integrate Quartz Composer

00:02:13.250 --> 00:02:15.400
inside your applications.

00:02:15.400 --> 00:02:19.760
I mentioned earlier that Quartz
Composer was a really integrated

00:02:19.910 --> 00:02:21.400
into the OS technology.

00:02:21.400 --> 00:02:24.580
And what it does exactly is it
leverage a number of graphics

00:02:24.580 --> 00:02:26.400
and non-graphics technologies.

00:02:26.400 --> 00:02:29.660
So as you can see on the slide,
we have typical graphics

00:02:29.660 --> 00:02:32.400
technologies like OpenGL of course,
but also Core Image,

00:02:32.400 --> 00:02:34.400
Core Video and so on.

00:02:34.400 --> 00:02:37.130
And a bunch of non-graphics
one that can be,

00:02:37.180 --> 00:02:40.360
you know, Safari, RSS,
JavaScript and so on.

00:02:40.500 --> 00:02:43.900
All those technologies are integrated
through Quartz Composer which

00:02:43.900 --> 00:02:46.400
you use to build compositions.

00:02:46.400 --> 00:02:50.400
And then those compositions are in turn
used everywhere into the operating system

00:02:50.400 --> 00:02:53.470
system or inside your own applications.

00:02:53.720 --> 00:02:57.700
We have a number of clients that
are using Quartz Composer one way or

00:02:57.700 --> 00:03:02.490
another in the system or applications
we ship and there is also of course all

00:03:02.490 --> 00:03:05.560
the applications you guys have made.

00:03:06.410 --> 00:03:10.440
So for my first demo,
I would like to show you-- can

00:03:10.440 --> 00:03:11.830
you switch to a demo machine,
please?

00:03:11.950 --> 00:03:16.050
I would like to show you a number of
compositions so that you get an overview

00:03:16.050 --> 00:03:18.130
of what exactly are those things.

00:03:21.560 --> 00:03:25.100
So let me start with those
two compositions here.

00:03:25.100 --> 00:03:27.900
So those are your
typical motion graphics.

00:03:27.900 --> 00:03:34.960
So it's animated, it has colors,
and it's moving with time, and so on.

00:03:34.960 --> 00:03:40.360
We have another one here that is a little
more complex than the first one here.

00:03:40.360 --> 00:03:42.000
This one has text.

00:03:42.030 --> 00:03:45.650
And you can see that there is also
another text in the background,

00:03:45.650 --> 00:03:49.170
and that text is blurred
and has a real-time blurring

00:03:49.170 --> 00:03:50.740
effect that's going on it.

00:03:50.740 --> 00:03:54.170
Now the first thing to notice
with compositions is that I can

00:03:54.220 --> 00:03:56.530
actually resize the window.

00:03:56.870 --> 00:03:59.060
"And the rendering remains sharp.

00:03:59.130 --> 00:04:02.450
I can go full screen and the
rendering will stay perfectly sharp.

00:04:02.570 --> 00:04:05.470
And that's a very important
thing about compositions is

00:04:05.470 --> 00:04:09.760
the fact that they're visually,
they're independent of the

00:04:09.760 --> 00:04:11.710
rendering destination size.

00:04:15.880 --> 00:04:19.300
A usual way to do animations
is to use particle systems.

00:04:19.300 --> 00:04:22.890
So Quartz Composer has a simple particle
system that's built in and I just

00:04:22.890 --> 00:04:25.090
want to show you rapidly two examples.

00:04:25.090 --> 00:04:28.390
This one is, you know,
a typical kind of fireworks thing

00:04:28.390 --> 00:04:30.010
made with a particle system.

00:04:30.040 --> 00:04:32.590
But you can do completely different
things with particle system.

00:04:32.680 --> 00:04:35.960
For example,
this blobby object that's moving around,

00:04:35.960 --> 00:04:37.810
it's also a particle system.

00:04:40.840 --> 00:04:45.300
I mentioned earlier that compositions
can have input parameters.

00:04:45.300 --> 00:04:49.680
So what I can do here is I can
display them and this composition

00:04:49.990 --> 00:04:56.280
has a number of settings and
take a primary input as an image.

00:04:56.280 --> 00:04:56.280
So let's use a

00:04:56.940 --> 00:05:02.060
"I have a demo image for that and
now what I can do is control all

00:05:02.130 --> 00:05:05.470
the parameters of the composition to
control how the effect is applied.

00:05:05.510 --> 00:05:08.830
So in that case I can apply a glow,
I can kind of warm the image,

00:05:09.000 --> 00:05:11.460
control the fading, those kind of things.

00:05:11.480 --> 00:05:13.890
So that's the second big
point about composition.

00:05:13.900 --> 00:05:16.380
They're not completely
opaque black boxes.

00:05:16.490 --> 00:05:19.050
They're actually,
you can communicate with

00:05:19.050 --> 00:05:20.960
them and control the inputs."

00:05:24.250 --> 00:05:26.680
Among the technologies that
I mentioned earlier that are fully

00:05:26.680 --> 00:05:30.080
integrated inside QuartzComposer,
there is Core Image, obviously.

00:05:30.080 --> 00:05:34.120
And you can use QuartzComposer as a
development environment for Core Image.

00:05:34.120 --> 00:05:36.800
You can write your own
Core Image kernels.

00:05:36.800 --> 00:05:40.160
So I have two examples here that
were made by Apple engineers.

00:05:40.160 --> 00:05:44.950
The first one is kind of rotating gears,
and it's completely done

00:05:44.950 --> 00:05:46.380
on a GPU using Core Image.

00:05:46.380 --> 00:05:49.140
It's not two images that are rotating
around or anything like that.

00:05:49.140 --> 00:05:52.030
It's computed on a
GPU and drawn on a GPU.

00:05:52.060 --> 00:05:53.810
I have another example here that's great.

00:05:53.820 --> 00:05:56.600
It's July iteration fractal thing.

00:05:56.620 --> 00:05:58.490
And it's also done on a GPU.

00:05:58.770 --> 00:06:02.910
And it's a Core Image filter that
is written inside QuartzComposer.

00:06:04.300 --> 00:06:07.340
I mentioned you could use
various input devices,

00:06:07.340 --> 00:06:12.060
the biggest of all being the camera
that we now have on a number of Macs.

00:06:12.060 --> 00:06:15.600
So here I have a composition that
is actually using the video camera

00:06:15.600 --> 00:06:19.510
that's on that machine and a number of
effects with core image and feedback

00:06:19.510 --> 00:06:23.750
rendering and so on and you can achieve
some pretty cool effect with that.

00:06:28.000 --> 00:06:31.750
Still on interactivity,
I wanted to show you another one.

00:06:31.760 --> 00:06:35.450
So here I have a regular tablet
and what I can do with it and the

00:06:35.540 --> 00:06:40.400
pen is I have a composition that
reacts to pressure sensitivity

00:06:40.480 --> 00:06:43.000
and also to the speed and so on.

00:06:43.000 --> 00:06:47.800
And we use that to do some rendering
in Core Image with feedback and you

00:06:47.800 --> 00:06:50.910
achieve that very nice trailing effect.

00:06:52.430 --> 00:06:55.040
And to conclude that series
of demo compositions,

00:06:55.100 --> 00:06:58.100
I'm going to show you
another interactivity that's

00:06:58.190 --> 00:07:02.830
possible in Quartz Composer,
and in that case, it's using MIDI.

00:07:03.120 --> 00:07:07.970
So here I have a regular MIDI keyboard
with a bunch of controls on it and

00:07:08.130 --> 00:07:12.540
various parameters of that composition
have been just wired to the MIDI.

00:07:12.540 --> 00:07:15.860
So now what I can do is by tweaking
the sliders and everything,

00:07:15.920 --> 00:07:18.840
I can control the color,
the size as well as the rotation,

00:07:18.840 --> 00:07:21.220
everything regarding that composition.

00:07:21.220 --> 00:07:27.220
Back to slides please.

00:07:31.410 --> 00:07:32.300
All right.

00:07:32.300 --> 00:07:35.200
So now how exactly does
Quartz Composer work?

00:07:35.200 --> 00:07:36.300
How is it conceived?

00:07:36.490 --> 00:07:40.360
Well, at the base of Quartz Composer,
we have what we call patches.

00:07:40.360 --> 00:07:41.720
They're the basic processing units.

00:07:41.720 --> 00:07:43.710
That's what we use to
build those compositions.

00:07:43.960 --> 00:07:47.760
So a patch is something that is
executed by the Quartz Composer engine.

00:07:47.760 --> 00:07:51.430
It gets some input parameters
through input ports,

00:07:51.440 --> 00:07:57.530
and it will produce a result either by
producing that result on output ports

00:07:57.530 --> 00:08:02.930
or by rendering it on the destination,
which typically is the screen.

00:08:02.960 --> 00:08:06.460
So you can say that those patches
are like programming functions.

00:08:06.460 --> 00:08:08.800
They take a number of inputs.

00:08:08.800 --> 00:08:12.180
They might also depend on time,
and they produce a given result.

00:08:12.180 --> 00:08:13.950
Let's look at a few examples here.

00:08:14.120 --> 00:08:19.220
So the first patch here is LFO,
which stands for Low Frequency Osteator.

00:08:19.350 --> 00:08:24.230
So it means it's a patch that produces
a wave that's oscillating with time.

00:08:24.300 --> 00:08:26.550
So typically, it will depend on time.

00:08:26.620 --> 00:08:30.420
Its result would be the height of
the wave at a given point in time.

00:08:30.420 --> 00:08:32.830
It will have parameters
like the type of the wave,

00:08:32.830 --> 00:08:36.400
if it's a sinusoidal wave, a square wave,
triangular, and so on,

00:08:36.420 --> 00:08:39.230
as well as the period and the amplitude.

00:08:39.240 --> 00:08:42.260
Now, not all patches need to
have inputs and outputs.

00:08:42.350 --> 00:08:44.900
For instance,
the mouse patch here only has outputs,

00:08:44.900 --> 00:08:49.640
because its goal is only to output
the x and y position of the mouse.

00:08:49.640 --> 00:08:52.340
The other way, you can have patches
that only have inputs.

00:08:52.380 --> 00:08:54.280
So the sprite patch,
which draws a quad on

00:08:54.280 --> 00:08:58.580
screen with an image,
has two inputs to position that quad,

00:08:58.590 --> 00:09:00.370
one to receive the image.

00:09:00.510 --> 00:09:03.000
to draw in that quad,
as well as a color you can

00:09:03.000 --> 00:09:05.310
use to modulate the image.

00:09:06.440 --> 00:09:10.280
So all those patches receive the
data and potentially produce data

00:09:10.280 --> 00:09:12.900
through inputs and output ports,
and we support a number of types.

00:09:12.900 --> 00:09:16.210
We support values that can be
numerical values like Booleans,

00:09:16.210 --> 00:09:19.080
floating point values, string,
and colors,

00:09:19.080 --> 00:09:21.850
but we also support more complex objects.

00:09:21.850 --> 00:09:26.620
Two of them specifically, a structure,
which is a generic data container,

00:09:26.620 --> 00:09:29.190
like an NSRA, NSDictionary,
that kind of thing,

00:09:29.190 --> 00:09:31.970
as well as a generic image container,
and that's one of the

00:09:32.060 --> 00:09:33.190
most powerful things.

00:09:33.220 --> 00:09:35.980
I'm saying generic image
container because it doesn't

00:09:35.980 --> 00:09:38.960
matter what the image contains.

00:09:39.030 --> 00:09:43.060
It could be texture on the GPU,
it could be an image on disk,

00:09:43.070 --> 00:09:45.880
or whoever knows what,
but what you manipulate

00:09:45.890 --> 00:09:49.490
inside Course Composer is
an OPEC image container.

00:09:50.440 --> 00:09:53.310
I'd like to show you now the
basics of Quartz Composer and

00:09:53.310 --> 00:09:55.510
a rapid tour of the editor.

00:09:59.370 --> 00:10:01.400
So let me launch the editor.

00:10:01.400 --> 00:10:05.900
The editor is located inside the
developer applications folder in Leopard

00:10:05.900 --> 00:10:11.390
and located in developer application
graphic tools on Tiger machines.

00:10:12.010 --> 00:10:17.100
I'm going to change a quick thing
here and create a blank document.

00:10:17.290 --> 00:10:20.100
So that's the Quartz
Composer environment.

00:10:20.100 --> 00:10:25.040
The biggest thing is obviously
the viewer on the right here,

00:10:25.040 --> 00:10:27.460
which renders the composition,
where you can visualize in real

00:10:27.540 --> 00:10:29.310
time what the composition does.

00:10:29.330 --> 00:10:33.010
Then we have the editor
on the left side here,

00:10:33.010 --> 00:10:37.080
which is where you assemble the
patches we just talked about.

00:10:37.080 --> 00:10:39.950
This editor is made of a number of pens.

00:10:39.990 --> 00:10:41.780
The biggest one is the workspace.

00:10:41.780 --> 00:10:43.440
We assemble the patches.

00:10:43.610 --> 00:10:47.280
And then here on the left,
you can see a pretty big list of patches,

00:10:47.280 --> 00:10:51.440
and we have probably 150
to 200 patches right now.

00:10:51.440 --> 00:10:55.960
And core image filters and Quartz
Composer built-in patches and so on.

00:10:57.300 --> 00:11:00.410
So what I'm going to do here is build
a simple composition to demonstrate to

00:11:00.410 --> 00:11:02.080
you the principles of Quartz Composer.

00:11:02.190 --> 00:11:05.180
Now for extensive knowledge on
how to build compositions and

00:11:05.380 --> 00:11:08.210
way more complex than that,
you would need to go to the

00:11:08.210 --> 00:11:11.240
Wednesday session of Quartz
Composer in the morning,

00:11:11.290 --> 00:11:17.740
which will be a hands-on session
and cover deeply how to build

00:11:17.740 --> 00:11:17.740
compositions and build efficient ones.

00:11:18.570 --> 00:11:24.000
So the first thing I'm going to do
is paint the viewer with a gradient.

00:11:25.700 --> 00:11:30.000
So I can search in the list of
patches for a patch that's going

00:11:30.000 --> 00:11:32.220
to allow me to paint a gradient.

00:11:32.270 --> 00:11:33.740
So here it is.

00:11:33.750 --> 00:11:36.840
You can see-- let me just
zoom in-- you can see that the

00:11:36.840 --> 00:11:39.330
gradient has a number of inputs.

00:11:39.340 --> 00:11:42.300
It should be pretty straightforward,
you know, start color, middle color,

00:11:42.350 --> 00:11:43.360
end color, and so on.

00:11:43.580 --> 00:11:47.110
To edit one of those inputs,
I can just double click on them.

00:11:47.140 --> 00:11:49.650
So I'm going to set it to blue.

00:11:49.660 --> 00:11:55.160
Edit the three to various
shades of the same blue.

00:11:57.700 --> 00:11:59.900
Okay.

00:11:59.950 --> 00:12:02.580
Now what I'm going to use is an image.

00:12:02.580 --> 00:12:04.500
I would like to draw an image
on top of that gradient.

00:12:04.540 --> 00:12:06.660
So let's import an image.

00:12:06.740 --> 00:12:10.750
In our case,
the one of the new Quartz Composer logo.

00:12:10.980 --> 00:12:13.390
And there are many ways in Quartz
Composer to display an image,

00:12:13.390 --> 00:12:18.000
but I'm going to use the simplest of all,
which is using a billboard patch.

00:12:18.560 --> 00:12:22.640
The billboard part has inputs like,
you know, what's the image to display

00:12:22.640 --> 00:12:24.600
and where to display it.

00:12:24.700 --> 00:12:28.000
I have my image in that patch here and
I got the billboard on the right there.

00:12:28.000 --> 00:12:32.160
So what I need to do now is
connect the image output to the

00:12:32.160 --> 00:12:33.840
image input of the billboard.

00:12:33.890 --> 00:12:37.620
And now the billboard has the
image it needs to display.

00:12:37.780 --> 00:12:41.150
What I'm going to do here is
slightly move it to the right.

00:12:44.850 --> 00:12:46.180
So that's better for what's coming.

00:12:46.320 --> 00:12:49.560
Then a cheap way to add animation,
like I mentioned at the very beginning,

00:12:49.560 --> 00:12:52.420
is to use a particle system.

00:12:52.480 --> 00:12:55.740
So let's add an instance
of the particle patch.

00:12:56.660 --> 00:12:59.640
The particle system,
for those of you who don't know,

00:12:59.640 --> 00:13:02.810
is a system of particles,
like the name implies,

00:13:02.810 --> 00:13:04.600
that are actually evolving with time.

00:13:04.600 --> 00:13:08.150
And the evolution happens taking
into account a number of parameters,

00:13:08.150 --> 00:13:11.120
like the velocity of the particles,
their sizes.

00:13:11.120 --> 00:13:14.300
And then particles can disappear
after a certain amount of time,

00:13:14.300 --> 00:13:18.160
and gravity is also taken into account,
and so on.

00:13:18.230 --> 00:13:21.540
Right now we see a number of white
boxes that are moving around.

00:13:21.580 --> 00:13:24.420
Those are the particles,
but they don't have an image on them.

00:13:24.420 --> 00:13:25.390
So let's import an image.

00:13:25.400 --> 00:13:28.910
Same technique as before.

00:13:29.160 --> 00:13:32.640
And the first thing I'm going to do
here is change the way the images

00:13:32.640 --> 00:13:34.090
are composited on top of each other.

00:13:34.100 --> 00:13:36.290
There are several what
we call blending modes,

00:13:36.290 --> 00:13:39.110
and in that case I'm going to set
it to "Add." So now we get a nice

00:13:39.110 --> 00:13:43.300
saturation effect and the blackness
of the image has disappeared.

00:13:46.400 --> 00:13:49.210
When you want to edit a number
of parameters in the editor,

00:13:49.210 --> 00:13:51.580
you don't have to double
click on every of them.

00:13:51.810 --> 00:13:55.300
We actually have an inspector
with a number of pens,

00:13:55.420 --> 00:13:59.620
and one of them is input parameters,
and it lists in one single area all the

00:13:59.620 --> 00:14:03.150
input parameters of the selected patch.

00:14:03.260 --> 00:14:04.920
So here I'm going to
do a couple of changes.

00:14:05.020 --> 00:14:06.830
First of all,
I'm going to remove the attraction

00:14:06.930 --> 00:14:08.900
so that the particles just fly away.

00:14:08.930 --> 00:14:13.240
I'm going to add some gravity
so that they slowly fall down.

00:14:14.150 --> 00:14:19.730
And what I would ultimately like is to
have the particles emit from the top of

00:14:19.730 --> 00:14:21.980
the WAN and go towards the left side,
like that.

00:14:22.080 --> 00:14:26.960
So I'm going to have to control the
initial velocities of those particles.

00:14:30.930 --> 00:14:34.610
Now I'm also going to want them to be,
to go higher,

00:14:34.670 --> 00:14:38.100
so that means make sure they
don't start going with a velocity

00:14:38.100 --> 00:14:40.460
that would make them going down.

00:14:41.220 --> 00:14:42.080
That's good enough.

00:14:42.090 --> 00:14:44.820
And finally, we don't care about Z,
so I'm just going to-- we

00:14:44.820 --> 00:14:47.130
don't care about the depth,
so I'm just going to have

00:14:47.140 --> 00:14:48.490
them go towards the left.

00:14:48.800 --> 00:14:52.830
Now what I can do is position the
origin of that particle system

00:14:52.850 --> 00:14:58.900
approximately on the top of the wand.

00:14:58.930 --> 00:14:58.930
So here we go.

00:14:58.930 --> 00:14:58.930
Something like that.

00:15:00.750 --> 00:15:04.100
Now the last thing I can
do is add some colors.

00:15:04.120 --> 00:15:07.160
If I click on the color input,
then I can see directly the

00:15:07.160 --> 00:15:12.100
color picker where I can select,
you know, various colors.

00:15:12.330 --> 00:15:16.140
But ideally you would like to
have that changing with time so

00:15:16.220 --> 00:15:18.710
that it's automatically animated.

00:15:19.050 --> 00:15:20.200
Here's the color input.

00:15:20.470 --> 00:15:22.140
What I want to change
in the color is the hue.

00:15:22.140 --> 00:15:23.400
I don't care about the other components.

00:15:23.480 --> 00:15:24.660
I want them constant.

00:15:24.780 --> 00:15:27.080
Fortunately,
we have a patch that's called

00:15:27.140 --> 00:15:30.370
HSL Color that takes hue
saturation and luminosity inputs

00:15:30.590 --> 00:15:32.780
and builds a color out of that.

00:15:33.200 --> 00:15:35.710
So I'm going to connect the
output of the color patch of the

00:15:35.710 --> 00:15:38.220
HSL color patch to the color input.

00:15:38.220 --> 00:15:42.980
And now just reduce the luminosity
to 60%. Probably going to be good.

00:15:43.080 --> 00:15:45.610
And now I can play with the U.

00:15:45.610 --> 00:15:49.860
And you can see all the colors are
changing in the particle system.

00:15:49.910 --> 00:15:53.890
There is one last step to make
that automatically animating.

00:15:54.100 --> 00:15:57.040
Basically what I need is to use a patch
that's going to generate a value between

00:15:57.040 --> 00:15:59.240
0 and 1 that's continuously oscillating.

00:15:59.380 --> 00:16:02.060
So the LFO is a good thing for that.

00:16:02.750 --> 00:16:05.780
And its default settings actually
generate a value between 0 and 1,

00:16:05.810 --> 00:16:06.710
so it's all good.

00:16:06.880 --> 00:16:10.370
And you can see here what's happening.

00:16:14.360 --> 00:16:17.140
So now my particle system is
starting to look pretty good.

00:16:17.150 --> 00:16:21.400
What I have to do is add some text,
and it will look even better.

00:16:21.420 --> 00:16:24.600
So how do you add text
in Quartz Composer?

00:16:24.960 --> 00:16:27.200
Quartz Composer is ultimately
built around images,

00:16:27.240 --> 00:16:30.460
so we're going to generate an
image which has text inside it.

00:16:34.430 --> 00:16:37.510
And there is a patch that's called
Image with String that does exactly that.

00:16:37.680 --> 00:16:41.300
How do we display an image
while still using the billboard

00:16:41.300 --> 00:16:43.450
as it's the simplest way?

00:16:44.090 --> 00:16:48.570
Image Restring provides us a convenience
output which is the optimal width

00:16:48.600 --> 00:16:50.470
at which to display that image.

00:16:50.470 --> 00:16:52.800
So I'm just going to make that as well.

00:16:52.930 --> 00:16:56.410
And now I can change a
couple of things on the text.

00:16:57.560 --> 00:17:01.020
Namely the font,
so I'm going to set it to Lucida Grande,

00:17:01.190 --> 00:17:03.920
bold, let's see.

00:17:04.800 --> 00:17:05.700
Here we go.

00:17:05.700 --> 00:17:12.700
Change the character size to a
little bigger and then just move

00:17:12.810 --> 00:17:16.920
the image slightly to the left.

00:17:21.020 --> 00:17:24.280
And to have that text
be a bit less boring,

00:17:24.280 --> 00:17:25.590
I'm going to add an effect on it.

00:17:25.760 --> 00:17:28.230
We have all the core image filters
available in Quartz Composer,

00:17:28.230 --> 00:17:30.060
so I'm just going to pick one.

00:17:30.120 --> 00:17:33.030
Keep its default setting,
the Bloom filter.

00:17:35.980 --> 00:17:39.580
And now, I have my texture.

00:17:39.670 --> 00:17:43.130
So remember, at the very beginning,
I mentioned that one of the very

00:17:43.130 --> 00:17:46.720
important things about composition is
that they can have input parameters.

00:17:46.770 --> 00:17:49.630
So how do we add input
parameters to that composition?

00:17:49.760 --> 00:17:51.900
Well, it's pretty straightforward.

00:17:52.020 --> 00:17:54.040
First of all here,
what could be our input parameters?

00:17:54.100 --> 00:17:56.650
Well, the text is an obvious answer,
but there is also the general

00:17:56.650 --> 00:17:57.520
color of the background.

00:17:57.600 --> 00:18:00.220
So let's make those two input parameters.

00:18:00.250 --> 00:18:02.840
I can control click
on the ImageRisString,

00:18:02.840 --> 00:18:04.970
and there is a contextual
menu that appears.

00:18:05.100 --> 00:18:07.410
And in there,
I can select the input I want

00:18:07.410 --> 00:18:10.530
to publish to the upper level,
and that's going to turn it into

00:18:10.530 --> 00:18:12.480
a parameter of the composition.

00:18:12.540 --> 00:18:16.220
So I'm going to select the
string input and read a text.

00:18:16.290 --> 00:18:19.090
And now, if I display the input
parameters of the composition,

00:18:19.090 --> 00:18:22.440
I have a text here,
which I can change to whatever I want,

00:18:22.450 --> 00:18:25.560
and it's becoming an
input of the composition.

00:18:28.780 --> 00:18:32.290
The Gradient is an interesting case
because it has three color inputs.

00:18:32.320 --> 00:18:35.440
However, that wouldn't be very useful
to publish those three colors.

00:18:35.460 --> 00:18:39.380
What you want is to have a single
color and control it and have the two

00:18:39.380 --> 00:18:42.970
others be built upon the first one.

00:18:43.180 --> 00:18:46.770
There is a pretty convenient
patch that we have called a

00:18:46.770 --> 00:18:51.100
splitter when you want to connect
a single input to multiple outputs.

00:18:51.160 --> 00:18:54.560
So I'm just going to create one,
make it color because that's what

00:18:54.560 --> 00:18:57.140
I want to move through that splitter,
color subject.

00:18:57.580 --> 00:18:59.800
Connect it to start.

00:19:00.040 --> 00:19:02.820
And now I can set the input
of the splitter to the same

00:19:02.820 --> 00:19:05.210
blue we originally had.

00:19:05.410 --> 00:19:08.020
So we're pretty much
back to the beginning,

00:19:08.020 --> 00:19:11.050
except now I'm going to compute
the middle and end color

00:19:11.140 --> 00:19:13.130
according to that start color.

00:19:13.280 --> 00:19:16.740
And for that we have a patch
that's called Color Transformation.

00:19:16.750 --> 00:19:19.500
So let's create two instances of it.

00:19:20.450 --> 00:19:25.440
Have the color go through them
and back to middle and end.

00:19:25.470 --> 00:19:28.270
And finally, all I have to do is change

00:19:28.400 --> 00:19:32.660
The luminosity so that each
of those two colors is darker

00:19:32.660 --> 00:19:34.790
than the very original one.

00:19:34.970 --> 00:19:38.810
And finally, I can take the color input
that's on that splitter,

00:19:38.860 --> 00:19:40.590
publish it,

00:19:41.620 --> 00:19:43.800
Give it a name,
and now I have a composition

00:19:43.800 --> 00:19:47.320
which has two inputs,
text and color.

00:19:53.550 --> 00:19:57.060
So that concludes our simple composition.

00:19:57.090 --> 00:19:59.600
I would like to get back to slides,
please.

00:20:06.300 --> 00:20:09.580
For the next few slides,
I would like to do some theory,

00:20:09.610 --> 00:20:13.200
but be assured it's going to be short
just so that we get the principles right.

00:20:13.270 --> 00:20:16.850
So this is pretty much what we build,
a number of patches with inputs

00:20:16.930 --> 00:20:18.960
and outputs on the workspace.

00:20:18.990 --> 00:20:21.620
Then we interconnect those patches.

00:20:21.760 --> 00:20:23.710
Some of those patches are
going to pull data from the

00:20:23.710 --> 00:20:25.220
other one and render something.

00:20:25.290 --> 00:20:28.190
So you can see an example here in red.

00:20:28.510 --> 00:20:32.540
Then what we can do is assemble
those patches into a macro patch.

00:20:32.540 --> 00:20:35.300
Pretty much like you group your
functions when you're programming,

00:20:35.300 --> 00:20:36.400
it's the same concept.

00:20:36.400 --> 00:20:39.780
What becomes interesting is that we
could say for instance that the central

00:20:39.870 --> 00:20:44.510
patch here is itself another macro
patch made of sub-patches whose inputs,

00:20:44.540 --> 00:20:47.400
whose summing of the inputs and
outputs have been published.

00:20:47.400 --> 00:20:50.390
And are therefore connected to
the patch at the above level.

00:20:50.390 --> 00:20:55.390
So we can go a long way with that and
build a hierarchical patch of three,

00:20:55.450 --> 00:20:57.400
uh, tree of patches, that's better.

00:20:58.470 --> 00:21:01.110
Then what you have,
since it's a tree of patches,

00:21:01.110 --> 00:21:02.230
is obviously a root.

00:21:02.390 --> 00:21:05.390
So that's what we call the
root patch of the composition.

00:21:05.400 --> 00:21:07.400
And this is pretty much
what a composition is.

00:21:07.400 --> 00:21:12.400
It's just a tree of macro patches and at
each level they're all interconnected.

00:21:12.400 --> 00:21:16.650
And they produce a topology from
which you have data that goes in,

00:21:16.650 --> 00:21:19.910
data that goes out,
and a result is rendered.

00:21:20.870 --> 00:21:24.300
Now how does that exactly
execute within the engine?

00:21:24.440 --> 00:21:25.570
Well, it's pretty straightforward.

00:21:25.580 --> 00:21:28.600
The engine starts at the top
level of the composition.

00:21:28.660 --> 00:21:30.860
And then it's going to
see it's a macro patch.

00:21:30.950 --> 00:21:34.670
So it's going to go to the lower
level to compute all the sub-patches.

00:21:34.790 --> 00:21:36.300
One of them turns to be a macro patch.

00:21:36.300 --> 00:21:40.600
So it goes another level down
and so on until all is computed,

00:21:40.600 --> 00:21:43.760
and it can go back up and
produce the final result.

00:21:43.840 --> 00:21:48.260
And how are things executed exactly
at a given macro patch level?

00:21:48.350 --> 00:21:51.000
So here's a typical example.

00:21:51.080 --> 00:21:55.370
You can see we only have five patches,
a clear one that paints the screen,

00:21:55.480 --> 00:21:56.790
a sprite that draws an image.

00:21:56.950 --> 00:22:00.900
And then you can guess that
the position of the sprite is

00:22:00.900 --> 00:22:03.640
determined by the mouse position,
and the width and height are

00:22:03.760 --> 00:22:05.790
kind of oscillating on their own.

00:22:05.990 --> 00:22:08.940
The first thing to know here is
that not all patches are equal.

00:22:09.030 --> 00:22:10.460
We have three types of patches.

00:22:10.460 --> 00:22:12.650
Most important of them are the consumers.

00:22:12.940 --> 00:22:14.970
We call them consumers because
they're the ones pulling

00:22:14.980 --> 00:22:17.880
data from the other patches,
and they're the ones that actually

00:22:18.030 --> 00:22:20.160
produce the result and render something.

00:22:20.200 --> 00:22:23.270
In the Quartz Composer Editor,
you will see them, recognize them,

00:22:23.270 --> 00:22:24.840
because they have that pink color.

00:22:25.030 --> 00:22:28.560
And another important thing about them is
the fact they're rendering a given order.

00:22:28.730 --> 00:22:31.110
That's important when you draw on screen.

00:22:31.180 --> 00:22:34.990
So you can see as well on the top
right hand corner of those sprites,

00:22:35.130 --> 00:22:39.940
of those patches, there is a number which
indicates the execution order.

00:22:41.180 --> 00:22:44.480
Then we have processors,
which are pretty much lazy patches.

00:22:44.480 --> 00:22:48.020
They just execute whenever the
inputs are needed and whenever the

00:22:48.020 --> 00:22:51.380
inputs are changing or the time is
changing if they depend on the time.

00:22:51.380 --> 00:22:52.590
They just do data processing.

00:22:52.680 --> 00:22:53.720
Pretty basic.

00:22:53.820 --> 00:22:57.090
The third type of patches
we have are providers.

00:22:57.200 --> 00:23:00.180
So they're required when you want
to have data that comes from the

00:23:00.180 --> 00:23:02.100
outside world inside Quartz Composer.

00:23:02.170 --> 00:23:05.820
And they have the specificity that they
execute whenever the outputs are needed,

00:23:05.820 --> 00:23:08.600
obviously,
but not more than once per frame

00:23:08.600 --> 00:23:09.650
that Quartz Composer renders.

00:23:09.730 --> 00:23:13.390
The idea being that if one of
those patches are typically

00:23:13.390 --> 00:23:16.800
connected to a hardware device,
there is no point in curing the hardware

00:23:16.800 --> 00:23:21.860
device more than once per frame when you
want to use the data in the composition.

00:23:22.550 --> 00:23:24.980
So now it's time to look
at how it exactly executes.

00:23:25.010 --> 00:23:27.200
So remember, consumer first in the order.

00:23:27.200 --> 00:23:28.710
So we start with clear.

00:23:28.740 --> 00:23:30.010
Then we go to Sprite.

00:23:30.020 --> 00:23:33.780
And Sprite has inputs that
depends on other patches.

00:23:33.780 --> 00:23:34.900
So they're undetermined.

00:23:34.900 --> 00:23:36.560
They need to be computed first.

00:23:36.580 --> 00:23:40.160
So the other patches that
it depends on are computed.

00:23:40.330 --> 00:23:44.190
Then when all the results are available,
the Sprite can render.

00:23:45.270 --> 00:23:47.830
It's now time to look at where
you can use your composition

00:23:47.840 --> 00:23:50.310
out of the box in Mac OS X.

00:23:50.570 --> 00:23:53.340
And we've got great support
in Mac OS X and it's getting

00:23:53.340 --> 00:23:54.500
even better in Leopard.

00:23:54.610 --> 00:23:56.550
You can use your composition
as screen savers,

00:23:56.550 --> 00:23:59.500
you can use them as animated desktops,
we have full QuickTime support,

00:23:59.650 --> 00:24:02.940
and we now have also WebKit support,
so that means Safari, Dashboard,

00:24:02.960 --> 00:24:03.500
and so on.

00:24:03.500 --> 00:24:06.490
Let me do some demos here.

00:24:13.020 --> 00:24:18.050
Let's start with the
composition we just built.

00:24:19.110 --> 00:24:24.690
And the easiest way to use the Composer
in Mac OS X is simply as a screen saver.

00:24:25.320 --> 00:24:29.700
So I can open the screen server folder
that's located into the library folder,

00:24:29.730 --> 00:24:35.790
drop the composition into it,
go to System Preferences, Screen Servers,

00:24:35.880 --> 00:24:38.540
And in the part they appear
in the other category.

00:24:38.540 --> 00:24:39.760
Here we go.

00:24:39.830 --> 00:24:41.090
And that's my screen saver.

00:24:41.280 --> 00:24:46.480
Now what's cool is the input parameters
of that composition are available

00:24:46.550 --> 00:24:48.440
as options on the screen savers.

00:24:48.520 --> 00:24:50.660
So here I can change that.

00:24:50.660 --> 00:24:54.610
Whatever.

00:24:54.610 --> 00:24:54.610
Okay.

00:24:57.520 --> 00:24:58.900
Oops.

00:24:58.900 --> 00:25:00.810
Here we go.

00:25:00.880 --> 00:25:03.460
And that doesn't touch the
original Composition file.

00:25:03.460 --> 00:25:07.290
Those are just input parameters
that are saved as preferences.

00:25:08.110 --> 00:25:10.150
New in Leopard,
we can use the same composition

00:25:10.200 --> 00:25:13.300
as Animated Desktop,
which is pretty cool too.

00:25:14.500 --> 00:25:16.060
So here we go.

00:25:16.110 --> 00:25:18.270
See, now you have those nice
obnoxious backgrounds now

00:25:18.280 --> 00:25:20.410
all the time when you work.

00:25:20.680 --> 00:25:21.770
And it can get even better.

00:25:21.770 --> 00:25:23.770
So for instance,
I have a great composition to

00:25:23.770 --> 00:25:27.060
use here as an animated desktop.

00:25:27.540 --> 00:25:30.720
It takes a couple seconds to work,
but here we go.

00:25:30.820 --> 00:25:33.130
So very relaxing and you know
it's really animated desktop.

00:25:33.140 --> 00:25:35.750
The whole thing is
working fine on top of it.

00:25:35.810 --> 00:25:39.930
Except I'm not going to keep
that around for the demos because

00:25:39.930 --> 00:25:44.580
I want you guys to focus on Quartz
Composer and not on some ducky.

00:25:44.580 --> 00:25:44.580
So let's see.

00:25:44.580 --> 00:25:44.580
Here we go.

00:25:45.830 --> 00:25:48.720
All right, so those are pretty easy
way to use Composition,

00:25:48.720 --> 00:25:50.440
but that's not very professional.

00:25:50.440 --> 00:25:51.530
I think we all agree.

00:25:51.800 --> 00:25:54.990
And we have professional support
kind of thing for Quartz Composer.

00:25:55.000 --> 00:25:59.430
So I can still use the exact
same Composition we built,

00:25:59.470 --> 00:26:00.960
open it in QuickTime,

00:26:01.410 --> 00:26:02.580
And it's natively supported.

00:26:02.700 --> 00:26:03.450
I can resize.

00:26:03.540 --> 00:26:07.240
Remember, composition is independent
of the rendering size and

00:26:07.240 --> 00:26:08.200
QuickTime supports that.

00:26:08.280 --> 00:26:10.910
So when I go full screen,
it's still perfectly sharp.

00:26:11.060 --> 00:26:13.320
I can even control the
composition playback,

00:26:13.360 --> 00:26:15.180
you know, back and forth in time.

00:26:15.650 --> 00:26:18.400
When it gets even better
is what if I save the file?

00:26:18.400 --> 00:26:22.120
You can see Self Content Movie,
they're saying here

00:26:22.710 --> 00:26:24.800
About 170 kilobytes.

00:26:24.850 --> 00:26:28.680
So for something that's resolution
independent that you can use in any

00:26:28.680 --> 00:26:31.240
application that supports QuickTime,
that's pretty powerful.

00:26:31.240 --> 00:26:34.620
I'll let you imagine the size of that
file if you wanted to have it in,

00:26:34.620 --> 00:26:39.390
let's say, 1600 by 900 in, you know,
25 frames per second, full quality.

00:26:39.500 --> 00:26:41.900
It would be gigabytes of data.

00:26:41.970 --> 00:26:47.330
Here, whatever the length,
it's going to be-- the duration,

00:26:47.330 --> 00:26:47.330
it's going to be 170 kilobytes.

00:26:49.200 --> 00:26:54.440
Another support that we added
in Mac OS X Leopard is WebKit.

00:26:54.500 --> 00:26:59.140
So I can just launch Safari and
still use our same composition.

00:27:00.950 --> 00:27:04.960
And it will play within WebKit browsers.

00:27:04.960 --> 00:27:07.020
Well, that's pretty limited,
but hopefully we can do a

00:27:07.020 --> 00:27:08.160
lot more than just playback.

00:27:08.260 --> 00:27:11.340
You can actually control the
composition from JavaScript.

00:27:11.490 --> 00:27:14.740
We have a full JavaScript API that
allows you to control the playback

00:27:14.940 --> 00:27:17.980
and as well as communicate with it.

00:27:18.090 --> 00:27:20.280
A typical example is Dashboard.

00:27:20.280 --> 00:27:23.500
That's a great place where you can do
amazing widgets using Quartz Composer.

00:27:23.650 --> 00:27:25.980
So I got a few demos here.

00:27:26.820 --> 00:27:28.700
Let me start with this one.

00:27:28.700 --> 00:27:30.700
It's a simple widget that's
rendering a composition.

00:27:30.700 --> 00:27:32.700
You can see it's interactive,
the glowing effect, transparency,

00:27:32.700 --> 00:27:36.610
all the things you can
get with Quartz Composer.

00:27:37.360 --> 00:27:43.720
This other one here is a bit more
complex and it's rendering a graph,

00:27:43.800 --> 00:27:46.360
it's a very simple graph,
it's basically a proof

00:27:46.360 --> 00:27:49.850
of concept and the data,
the names that are displayed in

00:27:49.850 --> 00:27:52.660
that area as well as the bars,
the height of the bars is

00:27:52.660 --> 00:27:54.380
coming directly from JavaScript.

00:27:54.530 --> 00:27:58.570
So you can start seeing that
you can do pretty powerful

00:27:58.570 --> 00:28:03.050
AJAXing with JavaScript doing
data processing and so on,

00:28:03.050 --> 00:28:03.790
giving the result to the
composition for display.

00:28:04.590 --> 00:28:11.340
As another example of that concept,
I would like to show you this photocast.

00:28:11.340 --> 00:28:12.640
Let's hope we have an
internet connection.

00:28:12.640 --> 00:28:14.030
OK, we do.

00:28:14.310 --> 00:28:20.380
What this one does is there is a
JavaScript back end that is retrieving

00:28:20.390 --> 00:28:22.300
some images from the internet.

00:28:22.340 --> 00:28:25.410
And then they go through the composition
where some filter is applied.

00:28:25.470 --> 00:28:27.960
We made it very simple in that case,
just a CPR.

00:28:28.110 --> 00:28:32.020
And the result is displayed
into that album kind of thing,

00:28:32.080 --> 00:28:35.330
where each of those
subviews is a composition.

00:28:35.430 --> 00:28:38.290
Now each time I actually
show Dashboard again,

00:28:38.290 --> 00:28:40.780
it refreshes the images.

00:28:41.130 --> 00:28:43.750
As you can imagine,
you can build way more complex

00:28:43.850 --> 00:28:45.990
widgets than those simple examples.

00:28:46.000 --> 00:28:49.990
I'd like to go back to slides, please.

00:28:54.400 --> 00:28:58.430
Let's talk a little bit about
the details of QuickTime support.

00:28:58.570 --> 00:29:01.860
Well, first of all,
it's Micros 10 Tiger only part only.

00:29:02.000 --> 00:29:06.000
That means no prior version of Micros
10 or no Windows or anything else.

00:29:06.000 --> 00:29:08.940
If you want to actually use a
Composition on the platform,

00:29:08.940 --> 00:29:12.150
you would have to render it in
QuickTime as a regular movie file.

00:29:12.150 --> 00:29:14.070
We have a few restrictions as well.

00:29:14.070 --> 00:29:17.200
If your Composition requires user
events like keyboard and mouse,

00:29:17.250 --> 00:29:20.280
those do not get through right
now in a QuickTime pipeline,

00:29:20.280 --> 00:29:23.120
so we're not handling them
at the Composition level.

00:29:23.120 --> 00:29:25.720
For security reason,
we have to disable all

00:29:25.720 --> 00:29:28.310
Internet communications,
so that means if your Composition

00:29:28.320 --> 00:29:31.900
download images or RSS feeds or
anything like that from the Internet,

00:29:31.930 --> 00:29:34.320
it won't work within the
QuickTime environment.

00:29:34.420 --> 00:29:37.560
And finally, for QuickTime programmers,
you cannot access through

00:29:37.560 --> 00:29:40.980
the QuickTime API at the
Composition input parameters.

00:29:41.290 --> 00:29:45.010
So it's pretty much playback,
but remember, we have a great quality.

00:29:45.080 --> 00:29:47.830
However, in QuickTime,
there is no concept for tracks

00:29:47.830 --> 00:29:52.820
that have infinite time--I mean
infinite duration and no size at all.

00:29:52.820 --> 00:29:56.820
So we need the track that is
created when you open a Composition

00:29:56.830 --> 00:30:02.000
inside QuickTime is a track of
type QDZ for Course Composer.

00:30:02.000 --> 00:30:04.780
And this track is going to have
default dimensions and duration.

00:30:04.880 --> 00:30:07.620
It doesn't really matter regarding
the dimension when you draw it on

00:30:07.620 --> 00:30:10.450
screen or display it because remember,
it's going to be displayed

00:30:10.580 --> 00:30:11.700
at the final size anyway.

00:30:12.040 --> 00:30:14.040
However,
if you were to export it or if you

00:30:14.040 --> 00:30:17.130
were to convert it to another format,
then the track size are going

00:30:17.140 --> 00:30:19.250
to matter and you're going to
have to pay attention to that.

00:30:19.260 --> 00:30:24.500
Another important point is the
characteristic of the track,

00:30:24.500 --> 00:30:27.390
especially if you want to interleave
it with other video materials.

00:30:27.390 --> 00:30:31.720
The frames that are produced by the track
are progressive and use square pixels and

00:30:31.720 --> 00:30:33.870
the alpha channel is completely valid.

00:30:33.870 --> 00:30:38.580
So you can do completely valid blending
with all the tracks underneath and so on.

00:30:38.580 --> 00:30:41.370
For best performances,
if you have a QuickTime application and

00:30:41.370 --> 00:30:44.450
you want to support Course Composer,
you would need to use the

00:30:44.550 --> 00:30:47.930
new API in QuickTime 7,
namely the visual context and core

00:30:47.930 --> 00:30:51.600
video or for high level programmers,
QD Kit and HIMovieView.

00:30:51.600 --> 00:30:54.550
If you don't and use the old API,
GWorld and Friends,

00:30:54.560 --> 00:30:57.980
it's still going to work but
it's just going to be pretty,

00:30:57.980 --> 00:30:58.540
pretty slow.

00:31:01.010 --> 00:31:04.700
Another important thing
is the WebKit support.

00:31:04.700 --> 00:31:09.980
It's Mac OS X Leopard,
or we also have it in Tiger 10.4.7 now.

00:31:10.600 --> 00:31:13.930
It's only working in
WebKit-based browsers,

00:31:13.930 --> 00:31:17.310
like I mentioned earlier,
the best client being Dashboard.

00:31:17.440 --> 00:31:19.820
Not all patches are available
for security reasons.

00:31:19.880 --> 00:31:21.820
The same thing,
we have a white list of patches that

00:31:21.890 --> 00:31:23.560
we allow in the WebKit environment.

00:31:23.720 --> 00:31:25.780
Typically,
we block access to some devices,

00:31:25.790 --> 00:31:29.150
like the video camera, for instance.

00:31:29.280 --> 00:31:33.740
What's very interesting and powerful is
the fact you can access the composition

00:31:33.740 --> 00:31:36.920
through the DOM and talk to it
through JavaScript API to control the

00:31:37.040 --> 00:31:39.450
playback or access the input outputs.

00:31:39.520 --> 00:31:41.080
And finally, we also have transparency.

00:31:41.080 --> 00:31:43.770
Remember my first example.

00:31:44.660 --> 00:31:47.510
Now I would like to cover
the Composition Repository.

00:31:47.510 --> 00:31:48.600
So that's brand new.

00:31:48.600 --> 00:31:51.960
We're introducing that
in Mac OS X Leopard.

00:31:51.990 --> 00:31:56.040
The concept here is that let's have
in a system a central location for

00:31:56.040 --> 00:31:58.510
Quartz Composer composition files.

00:31:58.660 --> 00:32:02.580
Anything you put at that
location is shared system-wide.

00:32:02.900 --> 00:32:06.360
Apple is putting compositions in there,
a number of effects and

00:32:06.360 --> 00:32:08.100
animated background and such.

00:32:08.140 --> 00:32:10.840
And to install new ones,
you just have to drag and drop them.

00:32:10.840 --> 00:32:13.570
I mean, you just have to drag and drop
them in the appropriate locations.

00:32:13.640 --> 00:32:15.940
It's exactly like a phone folder.

00:32:16.010 --> 00:32:20.400
And we provide an API and a way for
applications to curate that repository.

00:32:20.450 --> 00:32:23.190
We have a few clients right
now at that seat of Lepard.

00:32:23.330 --> 00:32:26.260
They're PhotoBoost and iChat,
which leverage the repository

00:32:26.260 --> 00:32:27.940
for all their effects.

00:32:27.990 --> 00:32:31.360
And the client's going to
be your own applications.

00:32:31.980 --> 00:32:34.290
Now, the compositions that
go into that repository,

00:32:34.300 --> 00:32:35.470
they're a bit special.

00:32:35.660 --> 00:32:40.240
We're really focusing on the concept of
the composition as a graphic module that

00:32:40.290 --> 00:32:43.230
takes inputs and produce output result.

00:32:43.290 --> 00:32:46.860
So it has to communicate with
the host application through

00:32:46.860 --> 00:32:48.370
some standard inputs and outputs.

00:32:48.390 --> 00:32:50.810
Otherwise,
you get a composition from the repository

00:32:50.810 --> 00:32:52.260
and you don't know how to use it.

00:32:52.330 --> 00:32:55.940
So we're defining a new thing here,
which are composition protocols.

00:32:55.970 --> 00:32:58.550
And we're going to talk about
that just more in a minute.

00:32:58.660 --> 00:33:02.770
But for now, just consider defining
inputs and outputs.

00:33:03.100 --> 00:33:06.580
We have an updated version of the editor
that is building such compositions which

00:33:06.580 --> 00:33:09.210
are tagged with the proper protocols.

00:33:09.520 --> 00:33:11.400
So what exactly are protocols?

00:33:11.520 --> 00:33:13.200
For those of you who are
familiar with Objective-C,

00:33:13.200 --> 00:33:16.150
it's pretty much the same thing
as a protocol in Objective-C.

00:33:16.220 --> 00:33:20.110
It defines a set of inputs and
outputs in the scope of a given usage,

00:33:20.110 --> 00:33:23.900
and it guarantees that any composition
that complies to that protocol

00:33:23.900 --> 00:33:25.780
will have those inputs and outputs.

00:33:25.900 --> 00:33:29.350
For instance,
let's look at a transition composition.

00:33:29.460 --> 00:33:31.480
So a transition takes two images.

00:33:31.570 --> 00:33:34.590
They're going to come in
through inputs of type image,

00:33:34.710 --> 00:33:36.800
one with the name input image,
the other one with the

00:33:37.080 --> 00:33:38.330
name input target image.

00:33:38.400 --> 00:33:41.450
And the result is going to be
another image that comes on an output

00:33:41.450 --> 00:33:46.500
port with the name output image,
and also depends on time in that matter.

00:33:46.900 --> 00:33:49.840
We have a few protocols that are
available in that Leopard Seed.

00:33:49.870 --> 00:33:52.950
Animation, in the simplest of all,
it simply defines that you can use

00:33:52.950 --> 00:33:57.450
that composition that is suitable for
background animations or foreground,

00:33:57.450 --> 00:34:00.400
like screen savers, animated desktop,
those kind of things.

00:34:00.490 --> 00:34:06.630
We have filters, we have imaging,
image out, we have transitions,

00:34:06.630 --> 00:34:06.630
two imaging, one image out.

00:34:07.820 --> 00:34:11.640
Using the Composition Repository
programmatically is really simple.

00:34:11.640 --> 00:34:16.500
We introduce a new class in
Objective-C that's called QC Composition.

00:34:16.660 --> 00:34:20.310
And it's an OPEC object that represents
a composition in a repository.

00:34:20.460 --> 00:34:23.540
And it's OPEC because you
don't know what the backup is,

00:34:23.540 --> 00:34:25.480
where the file is,
or those kind of details.

00:34:25.600 --> 00:34:29.100
The only thing you can do with that
QC Composition object is curate

00:34:29.110 --> 00:34:33.460
and access to the usual attributes,
name, description, and so on,

00:34:33.460 --> 00:34:35.460
as well as obviously the protocol list.

00:34:35.630 --> 00:34:38.360
But you also have access to a
unique persistent identifier,

00:34:38.360 --> 00:34:42.050
which allows you to refer to
that composition later in time.

00:34:42.060 --> 00:34:44.720
And the identifier is persistent,
so you reboot your machine,

00:34:44.720 --> 00:34:47.150
you move the composition among
the various repositories,

00:34:47.240 --> 00:34:48.460
all those kind of things.

00:34:48.470 --> 00:34:50.940
You will be guaranteed,
as long as the composition is somewhere,

00:34:50.940 --> 00:34:53.890
that you can retrieve
it with that identifier.

00:34:54.070 --> 00:34:56.860
To query programmatically
the CompositionRepository,

00:34:57.070 --> 00:34:59.450
there is that
QCCompositionRepository class.

00:34:59.460 --> 00:35:00.500
It's a shared instance.

00:35:00.500 --> 00:35:01.730
So you just get the shared instance.

00:35:01.790 --> 00:35:04.190
And then you ask,
give me all the compositions that

00:35:04.220 --> 00:35:08.690
comply to all those protocols
and that have those attributes.

00:35:08.810 --> 00:35:11.020
So the protocols are end operation.

00:35:11.020 --> 00:35:14.650
So the compositions have to comply
to all of them at the same time,

00:35:14.650 --> 00:35:17.150
because potentially,
you can have compositions that

00:35:17.170 --> 00:35:19.180
implement multiple protocols.

00:35:19.180 --> 00:35:22.000
And you can do kind of
post-filtering of the results,

00:35:22.000 --> 00:35:25.470
specifying attributes,
like I only want the composition that

00:35:25.580 --> 00:35:28.630
complied to the image filter protocol,
but made by Apple or made

00:35:28.630 --> 00:35:30.750
by this other manufacturer,
those kind of things,

00:35:30.750 --> 00:35:33.030
so that's what the attributes are for.

00:35:33.870 --> 00:35:36.790
To make it even easier to use
the Composition Repository,

00:35:36.790 --> 00:35:39.400
we're introducing a new UI,
Standard Composition Picker,

00:35:39.400 --> 00:35:42.290
that you can either embed in
your application as a standalone

00:35:42.290 --> 00:35:46.210
panel version or as an embedded
view in an existing window.

00:35:47.710 --> 00:35:50.930
Now, you get those composition,
QC Composition objects either

00:35:50.930 --> 00:35:54.690
programmatically or using the pickers.

00:35:54.850 --> 00:35:55.790
And how do you use them?

00:35:55.900 --> 00:35:58.350
Well,
we extended our playback APIs in the

00:35:58.390 --> 00:36:02.350
Quartz Composer API so that they can
take those QC Composition objects.

00:36:02.440 --> 00:36:06.730
So the QC view, the QC Composition layer
for core animation,

00:36:06.730 --> 00:36:12.250
we'll talk more about that in a bit,
the QC renderer for low-level rendering,

00:36:12.280 --> 00:36:14.490
it's very straightforward.

00:36:14.490 --> 00:36:14.600
They all take a QC Composition object.

00:36:15.880 --> 00:36:18.300
So let's recap the basics of
the Composition Repository.

00:36:18.560 --> 00:36:20.540
First thing,
you want to show the picker on screen

00:36:20.540 --> 00:36:23.350
so that the user can pick a composition.

00:36:23.470 --> 00:36:28.180
So we get the composition panel,
we configure it to display compositions.

00:36:28.420 --> 00:36:32.540
Now, you can see here that you configure
it to display composition of a given

00:36:32.540 --> 00:36:34.620
protocol and a subset of attributes.

00:36:34.690 --> 00:36:38.600
We don't say protocols because it would
be pretty inconsistent from a UI point of

00:36:38.600 --> 00:36:42.070
view if you were able to display in the
panel compositions that are transitions

00:36:42.070 --> 00:36:43.760
and other that are filters and whatnot.

00:36:43.800 --> 00:36:44.790
It would be confusing.

00:36:44.900 --> 00:36:48.370
So you have to settle down on one
protocol and have the user select

00:36:48.750 --> 00:36:50.820
one composition among that list.

00:36:51.100 --> 00:36:53.500
Then we need to set a delegate
so that the panel can call us

00:36:53.590 --> 00:36:55.940
back and finally display it.

00:36:55.940 --> 00:36:57.500
Then in a delegate,
you're simply going to have

00:36:57.590 --> 00:36:59.080
to implement that method.

00:36:59.300 --> 00:37:01.490
Composition picker panel
did select composition,

00:37:01.490 --> 00:37:04.670
which is called whenever the user
selects a composition object.

00:37:04.800 --> 00:37:06.500
And then you get a QC composition.

00:37:06.680 --> 00:37:09.630
And from then on, you can pass it to one
of the numerous QC APIs,

00:37:09.630 --> 00:37:14.560
like if you had a QC view around,
you would simply do load composition.

00:37:14.710 --> 00:37:17.810
So let's do a demo of that
Composition Repository.

00:37:28.430 --> 00:37:32.130
So let me launch this
Composition Repository Browser,

00:37:32.130 --> 00:37:35.140
which is a simple demo app that we built.

00:37:35.320 --> 00:37:39.080
You can see the picker in its
HUD version that I mentioned earlier.

00:37:39.600 --> 00:37:43.360
And we have a number of compositions
that are right now in the repository.

00:37:43.360 --> 00:37:44.870
Most of them are placeholders.

00:37:44.880 --> 00:37:47.220
We'll have, obviously,
the final set of composition for

00:37:47.320 --> 00:37:49.140
the final version of Laypart.

00:37:49.170 --> 00:37:52.450
But for now, you can experiment with
the repository using those.

00:37:52.590 --> 00:37:57.000
So selecting one of those compositions,
they appear here in a standard QC view.

00:37:57.000 --> 00:38:00.530
Here you can see I can edit all
the parameters of the composition,

00:38:00.530 --> 00:38:05.700
change the color,
and the various speeds and so on.

00:38:05.710 --> 00:38:09.150
We have plenty of image
filters that are built in.

00:38:09.250 --> 00:38:12.070
As you can see here,
some of them are coming from PhotoBush.

00:38:12.080 --> 00:38:14.020
Some of them are new ones.

00:38:14.040 --> 00:38:16.880
So I can just select them and
then display in the QC view.

00:38:16.880 --> 00:38:19.440
And I can change the input
image to something else.

00:38:19.480 --> 00:38:21.260
So here we go.

00:38:21.450 --> 00:38:22.180
Works fine.

00:38:22.380 --> 00:38:23.870
And it's very straightforward.

00:38:23.880 --> 00:38:26.090
There's no code in that demo.

00:38:26.500 --> 00:38:28.430
and you can browse the
composition picker,

00:38:28.440 --> 00:38:30.400
you know,
just clicking letters and so on.

00:38:30.400 --> 00:38:33.570
And finally, we have a few transitions
that we put in the repository.

00:38:33.870 --> 00:38:35.700
Some of them are coming
straight from Core Image.

00:38:35.700 --> 00:38:42.070
Other ones were added like this cube
one or this sliver effect as well.

00:38:42.730 --> 00:38:46.830
Now let's look at building such
a composition for the repository.

00:38:46.890 --> 00:38:49.190
The editor has been updated so

00:38:49.250 --> 00:38:52.520
When I launch it,
I can select "New from template"

00:38:52.690 --> 00:38:55.330
and you will have a template
to build an appropriate

00:38:55.330 --> 00:38:57.030
composition from the repository.

00:38:57.150 --> 00:39:01.800
What we're going to build in that
case is a simple image filter.

00:39:08.020 --> 00:39:11.410
So the composition workspace is
prepopulated with the required

00:39:11.410 --> 00:39:13.450
inputs and outputs for that filter.

00:39:13.490 --> 00:39:16.140
If I display the input
parameters of the composition,

00:39:16.140 --> 00:39:17.920
I can see, obviously, an input image.

00:39:18.030 --> 00:39:21.800
And there is actually-- I didn't mention
that in the slide-- but there is an

00:39:21.800 --> 00:39:27.310
optional input for the filter protocol
which the host application may use

00:39:27.350 --> 00:39:31.180
to indicate if it's OK to display the
filter and can have a preview mode that

00:39:31.180 --> 00:39:33.230
is lower quality and therefore faster.

00:39:33.270 --> 00:39:35.570
So we're going to ignore that for now.

00:39:35.650 --> 00:39:37.750
So let's pick up demo image here.

00:39:37.980 --> 00:39:41.750
And if I connect the input image,

00:39:42.000 --> 00:39:48.800
: I'm going to show you how to
create a simple blueprint effect.

00:39:48.800 --> 00:39:56.520
It's fairly straightforward to
build using some core image filters.

00:39:56.720 --> 00:40:00.000
First one I'm going to
need is Color Posterize.

00:40:00.060 --> 00:40:02.230
Going to insert it in the middle.

00:40:05.960 --> 00:40:08.720
And now all I need to do is kind
of colorize the result to make

00:40:08.720 --> 00:40:10.940
sure it's in a single color.

00:40:10.940 --> 00:40:14.900
And we have a convenient filter
for that which is false color.

00:40:14.900 --> 00:40:17.670
So I'm going to insert that in a chain.

00:40:20.470 --> 00:40:26.540
And now I can look at the colors
and change it to blue and white.

00:40:26.990 --> 00:40:30.730
And now I have a great
kind of blueprint effect.

00:40:30.730 --> 00:40:34.290
You can go through a few more
iterations and improve that effect.

00:40:34.300 --> 00:40:37.770
So I'm going to show you
here the final version.

00:40:41.770 --> 00:40:45.580
Okay,
so you can recognize here the original

00:40:45.710 --> 00:40:48.090
color posterized and false color.

00:40:48.350 --> 00:40:52.500
Here there's some more core image filters
on a custom kernel to kind of build

00:40:52.860 --> 00:40:57.140
those little edges that you can see
and improve the quality of the effect.

00:40:57.300 --> 00:41:01.710
And the other thing that was done here
is take the overall blue color and make

00:41:01.710 --> 00:41:06.490
it an input parameter as well so that
we can change that to whatever we want.

00:41:06.490 --> 00:41:10.490
Now what I can do with that composition

00:41:10.850 --> 00:41:32.550
is just take the composition folder
that is located in library compositions,

00:41:32.550 --> 00:41:32.550
take the blueprint, drop it there.

00:41:32.550 --> 00:41:32.550
Now if I relaunch the composition
browser and go to image filter,

00:41:32.550 --> 00:41:32.550
well now it's just there and
you can see the color is there.

00:41:32.550 --> 00:41:32.550
Oops, there we go.

00:41:32.550 --> 00:41:32.550
And I can also launch PhotoBoost.

00:41:35.000 --> 00:41:56.900
[Transcript missing]

00:42:00.780 --> 00:42:03.280
We have numerous ways for you
to integrate Quartz Composer

00:42:03.330 --> 00:42:05.090
content inside your application.

00:42:05.110 --> 00:42:09.300
The easiest of all is the QC view,
which is a subclass of NSU that allows

00:42:09.340 --> 00:42:11.320
you to do Quartz Composer playback.

00:42:11.460 --> 00:42:15.780
It also has--it can also be used
directly in Interface Builder

00:42:15.780 --> 00:42:18.610
and has Cocoa Binding support,
but that doesn't mean you

00:42:18.610 --> 00:42:19.760
have to use it this way.

00:42:19.760 --> 00:42:22.300
You can also use it
completely programmatically.

00:42:22.340 --> 00:42:26.630
We have new in Mac OS X Leopard
the QC Composition Layer for

00:42:26.630 --> 00:42:30.860
fully native integration inside
a core animation environment.

00:42:30.890 --> 00:42:34.300
And for people who want to integrate
Quartz Composer into kind of

00:42:34.370 --> 00:42:38.140
already existing engines or do
low-level processing of composition

00:42:38.140 --> 00:42:41.150
and control completely what's
happening during the rendering,

00:42:41.300 --> 00:42:43.700
they can use our low-level
QC renderer class,

00:42:43.740 --> 00:42:47.570
and that class will be covered
extensively tomorrow during the

00:42:47.570 --> 00:42:49.850
advanced Quartz Composer session.

00:42:51.560 --> 00:42:56.680
So let's do a quick demo
of that QCview integration.

00:42:59.600 --> 00:43:04.700
I'm going to use here the old version
of the interface builder because the

00:43:04.700 --> 00:43:10.710
components we require for that demo,
it's not complete yet.

00:43:10.830 --> 00:43:14.510
So first of all,
let's create a blank application.

00:43:15.850 --> 00:43:17.720
Then the first time you
use Interface Builder,

00:43:17.740 --> 00:43:20.240
you need to add the
Quartz Composer palette.

00:43:20.240 --> 00:43:25.460
So you can do that through the
preferences and it's located in,

00:43:25.610 --> 00:43:28.270
let's see, Leopard Developers

00:43:28.640 --> 00:43:29.500
There we go.

00:43:29.500 --> 00:43:35.020
Developer, Extra, Palettes,
and Quartz Composer.

00:43:45.200 --> 00:43:47.400
That's good.

00:43:47.400 --> 00:43:48.200
All right.

00:43:48.200 --> 00:43:54.410
Okay, I'll just try it again.

00:44:07.740 --> 00:44:09.790
: Go figure.

00:44:09.920 --> 00:44:10.230
OK.

00:44:10.230 --> 00:44:14.000
So now I have that palette which
showcases a number of elements,

00:44:14.000 --> 00:44:17.970
but the two we're only interested in
today are the QC view here and the

00:44:17.970 --> 00:44:20.560
QC patch controller for Cocoa Bindings.

00:44:21.190 --> 00:44:24.440
Let's instantiate the QC view.

00:44:24.440 --> 00:44:29.480
Oops, I'm just going to configure
it to resize with the window.

00:44:35.600 --> 00:44:40.320
And what we can have here is in
the attributes the ability to

00:44:40.320 --> 00:44:41.460
load a composition on the view.

00:44:41.480 --> 00:44:46.370
So I'm just going to click on
the load button and load our

00:44:46.820 --> 00:44:48.660
very initial compositions.

00:44:48.670 --> 00:44:54.100
Now I can run the Nib file and you
will see the composition just plays and

00:44:54.170 --> 00:44:56.250
it resized correctly and everything.

00:44:56.360 --> 00:44:58.380
So it was zero cutting.

00:44:59.360 --> 00:45:01.760
But we can do something
that's more interactive,

00:45:01.810 --> 00:45:04.370
still without leaving
IB and cutting anything.

00:45:04.370 --> 00:45:11.710
So I'm going to upload the composition
and just resize that to 320 by 240.

00:45:12.610 --> 00:45:15.870
And when you want to do Cocoa bindings,
you need a controller.

00:45:15.920 --> 00:45:18.190
So we have a QC patch controller.

00:45:18.190 --> 00:45:21.850
So remember, it's the model view paradigm
in Objective-C where you have

00:45:21.980 --> 00:45:23.900
a model that is your data set.

00:45:23.960 --> 00:45:26.420
Then you have a controller
that acts as an intermediary

00:45:26.420 --> 00:45:27.940
between the model and the view.

00:45:28.120 --> 00:45:31.420
In our case, the view is a QC view,
the model is the composition,

00:45:31.420 --> 00:45:34.000
and the controller is
a QC patch controller.

00:45:34.090 --> 00:45:38.950
In the attributes of
the QC patch controller,

00:45:38.950 --> 00:45:38.990
I can load a composition file.

00:45:39.730 --> 00:45:47.140
What I did is slightly modified the
BluePrint effect that was built earlier

00:45:47.140 --> 00:45:48.840
so that it's kind of autonomous.

00:45:48.840 --> 00:45:52.340
And I added a few things here.

00:45:52.460 --> 00:45:55.950
First of all, there is now a video input
patch that grabs video from

00:45:56.120 --> 00:45:58.120
the camera on the computer.

00:45:58.310 --> 00:46:02.860
Then the video is processed to
improve the quality of the image by

00:46:02.860 --> 00:46:05.860
doing fairly simple noise reduction.

00:46:05.860 --> 00:46:08.720
Then it goes through the Blueprint
effect that we built just earlier,

00:46:08.720 --> 00:46:09.820
the exact same one.

00:46:09.820 --> 00:46:12.290
And finally,
there is a macro here that draws

00:46:12.540 --> 00:46:17.100
the composition with the frame
that you can notice around here.

00:46:18.080 --> 00:46:20.750
And we also have another macro
here that handles the text

00:46:20.820 --> 00:46:22.870
display in the lower left corner.

00:46:22.870 --> 00:46:25.080
This composition has
two input parameters,

00:46:25.120 --> 00:46:29.710
a color, the name color,
and an arbitrary text with the name text.

00:46:31.990 --> 00:46:33.730
So back to IB.

00:46:33.770 --> 00:46:37.830
On the QC patch controller,
I can select that composition

00:46:37.830 --> 00:46:40.470
file I just showed to you.

00:46:42.700 --> 00:46:47.460
Then I can go to select the QC view,
show the bindings span,

00:46:47.460 --> 00:46:50.020
and the QC view has a
binding that's called patch,

00:46:50.040 --> 00:46:53.370
and it's simply the patch that
the QC view is going to render.

00:46:53.390 --> 00:46:54.650
So let's configure that.

00:46:54.860 --> 00:46:57.860
We want to bind to the
QC patch controller.

00:46:59.100 --> 00:47:01.400
And that's, remember,
that's a controller that is

00:47:01.400 --> 00:47:03.230
loading our composition and so on.

00:47:03.290 --> 00:47:06.940
What we want to retrieve from it is
the top patch of the composition,

00:47:06.940 --> 00:47:09.690
the root patch,
because this is what we want to display,

00:47:09.690 --> 00:47:12.630
and we can do that simply
with the patch controller key.

00:47:13.000 --> 00:47:19.650
Now I can run this little nib file,
and it's pretty much as if you had loaded

00:47:19.790 --> 00:47:21.350
the file directly on the Composition.

00:47:21.390 --> 00:47:22.820
It does the same.

00:47:22.850 --> 00:47:26.090
When it becomes more powerful is
that I can now use Cocoa Bindings

00:47:26.260 --> 00:47:27.800
to talk to the Composition.

00:47:27.820 --> 00:47:29.590
Remember, we have two inputs.

00:47:29.640 --> 00:47:32.020
So let's take a color.

00:47:32.020 --> 00:47:33.280
Add it there.

00:47:33.290 --> 00:47:39.540
And I can bind more of that color
well control to the patch controller,

00:47:39.550 --> 00:47:42.040
retrieve the root patch
of the Composition.

00:47:42.050 --> 00:47:46.690
Then retrieve the color input,
and from that color input, get the value.

00:47:49.000 --> 00:47:54.240
Okay, so now Cocoa Bindings,
it just works.

00:47:55.020 --> 00:48:01.140
I have a second input that was text,
so let's build that as well.

00:48:02.700 --> 00:48:19.900
[Transcript missing]

00:48:22.160 --> 00:48:27.470
And I'm going to have that button
perform the copy action on the view.

00:48:30.060 --> 00:48:33.130
All right, now I have a little
autonomous application that

00:48:33.130 --> 00:48:36.010
allows me to type text and

00:48:36.200 --> 00:48:47.100
[Transcript missing]

00:48:49.430 --> 00:48:51.390
I'm sure you're all wondering
where I'm going with this demo.

00:48:51.400 --> 00:48:55.900
Well, I am going somewhere and I'm going
to build a little comic here.

00:48:55.900 --> 00:48:59.550
You'll see how you can build a little
application very fast and use it.

00:48:59.630 --> 00:49:02.400
So let's switch.

00:49:02.400 --> 00:49:03.290
Some text.

00:49:03.290 --> 00:49:06.300
Okay.

00:49:06.310 --> 00:49:16.400
Okay, I'll put that here.

00:49:16.400 --> 00:49:17.400
Okay.

00:49:19.400 --> 00:49:21.400
Okay.

00:49:21.400 --> 00:49:30.100
Here we go.

00:49:30.100 --> 00:49:30.100
All right.

00:49:37.360 --> 00:49:41.300
Live comic, no Xcode, no code, nothing.

00:49:41.300 --> 00:49:44.210
Okay, back to slides please.

00:49:47.510 --> 00:49:49.300
The QC view you have
in Interface Builder,

00:49:49.300 --> 00:49:52.960
you can access it
programmatically in your nib file.

00:49:52.960 --> 00:49:54.640
And the API is pretty straightforward.

00:49:54.640 --> 00:49:59.120
You can control rendering completely,
start, stop, pose, all those things.

00:49:59.130 --> 00:50:01.270
You can load a new
composition file on it,

00:50:01.410 --> 00:50:02.820
load composition from file.

00:50:03.030 --> 00:50:05.340
In Mac OS X Leopard,
we have a new method that's

00:50:05.340 --> 00:50:07.280
called unloadComposition.

00:50:07.310 --> 00:50:09.930
The point is that if you
have your QC view around,

00:50:10.040 --> 00:50:12.530
and you don't need the
composition anymore,

00:50:12.530 --> 00:50:16.070
you can just unload it,
and this will save resources from

00:50:16.320 --> 00:50:18.640
the video card and the CPU and so on.

00:50:18.680 --> 00:50:21.290
So it's a good thing
to do if you can do it.

00:50:22.210 --> 00:50:25.160
To communicate with the composition,
the API is also straightforward.

00:50:25.160 --> 00:50:28.700
You can retrieve the values properly,
like the attributes, you know, name,

00:50:28.700 --> 00:50:31.060
description, those kind of things,
as well as the list

00:50:31.060 --> 00:50:32.240
of inputs and outputs.

00:50:32.240 --> 00:50:37.340
To access the inputs and outputs,
you need to call setValueForInputKey

00:50:37.420 --> 00:50:39.370
or valueForOutputKey.

00:50:39.380 --> 00:50:43.920
New in Leopard, we have that new method,
valueForOutputKeyOfType,

00:50:43.920 --> 00:50:47.790
which allows you to explicitly
request for the output object

00:50:47.840 --> 00:50:49.490
to be in a given class.

00:50:50.460 --> 00:50:51.740
So let's look at what's supported here.

00:50:51.740 --> 00:50:55.540
Remember, we have a number of port
types in Course Composer,

00:50:55.650 --> 00:50:57.950
Boolean index numbers, and so on.

00:50:57.960 --> 00:51:00.650
And for each of them,
there are a number of object

00:51:00.670 --> 00:51:03.970
classes that are supported
when you pass input objects.

00:51:04.040 --> 00:51:08.210
For instance, a color input port,
you can pass an NSColor, obviously,

00:51:08.210 --> 00:51:11.190
but you can also pass a
CGColorRef and CIColor.

00:51:11.200 --> 00:51:14.390
And if that color port was an output,
you would also be able to

00:51:14.390 --> 00:51:16.180
retrieve one of those three.

00:51:16.180 --> 00:51:18.410
When it comes to images,
we support a great

00:51:18.410 --> 00:51:19.920
number of image formats.

00:51:20.400 --> 00:51:21.450
Inputs and outputs.

00:51:21.460 --> 00:51:25.170
What's important here, however,
is that you make sure you always pass

00:51:25.170 --> 00:51:27.460
the original image to Course Composer.

00:51:27.460 --> 00:51:29.750
For instance,
if you have a Core Video Buffer,

00:51:29.750 --> 00:51:32.300
pass the Core Video Buffer
to Course Composer.

00:51:32.300 --> 00:51:35.560
Do not pass, like, the Core Video Buffer
converted to a texture and

00:51:35.560 --> 00:51:37.310
then pass that texture object.

00:51:37.320 --> 00:51:40.540
Or the Core Video Buffer converted
to a CI image and pass the CI image.

00:51:40.540 --> 00:51:41.960
Always pass the primitive.

00:51:41.960 --> 00:51:42.750
It's important.

00:51:42.760 --> 00:51:44.900
This way,
you ensure maximum performances.

00:51:47.810 --> 00:51:50.190
Now it's time to look at the
new Quartz Composer API and

00:51:50.260 --> 00:51:52.940
patches we have in Leopard.

00:51:53.650 --> 00:51:56.570
First of all, the most important request
from developers is the ability

00:51:56.570 --> 00:51:58.180
to write your custom patches.

00:51:58.230 --> 00:52:01.250
We made it very simple and
powerful like the rest of QC and we

00:52:01.250 --> 00:52:04.500
completely leverage Objective-C 2.0,
so that's really a great thing.

00:52:04.500 --> 00:52:07.500
You're still going to have to wait
a little more to discover that.

00:52:07.500 --> 00:52:11.390
It will be fully covered during
tomorrow's session in the afternoon,

00:52:11.450 --> 00:52:13.400
the Advanced Course Composer 1.

00:52:14.550 --> 00:52:18.390
Then we have a number of new patches,
one that is the Composer that

00:52:18.390 --> 00:52:21.600
allows you to load a Composition
within Composer Composition.

00:52:21.610 --> 00:52:24.790
That's also going to be covered
in details tomorrow afternoon.

00:52:24.790 --> 00:52:28.770
And then other patches like
GLSL support and so on.

00:52:30.060 --> 00:52:33.170
We added a number of methods to
the QCVU to be able to do basic

00:52:33.170 --> 00:52:37.140
things like going full screen,
in and out of full screen,

00:52:37.170 --> 00:52:39.630
retrieve the current image
on the QCVU as a snapshot,

00:52:39.650 --> 00:52:43.400
and what's great here is you can get the
snapshot in your favorite image format.

00:52:43.490 --> 00:52:46.480
So, you know, CG image, CI image,
and the QCVU will take

00:52:46.480 --> 00:52:47.300
care of everything.

00:52:47.300 --> 00:52:50.360
Downloading the image from the GPU,
putting it on a CPU,

00:52:50.360 --> 00:52:54.190
flipping it vertically if it's necessary,
all those kind of things.

00:52:54.690 --> 00:52:56.200
We made the QC view more powerful.

00:52:56.380 --> 00:52:59.360
We added a number of methods so
that you can suspend rendering,

00:52:59.460 --> 00:53:00.880
pause it, and resume it.

00:53:00.920 --> 00:53:03.600
We have advanced method
that allows you to,

00:53:03.600 --> 00:53:06.820
if you subclass QC view,
kind of customize an interface directly

00:53:06.830 --> 00:53:08.690
with the rendering of the QC view.

00:53:08.910 --> 00:53:11.820
So that's a pretty powerful feature,
as well as the ability to retrieve

00:53:11.820 --> 00:53:15.420
the internal OpenGL context for
sharing or using that subclassing.

00:53:15.450 --> 00:53:19.750
And those last two points will be
covered as well in a two more session.

00:53:20.610 --> 00:53:26.100
We made the QC renderer better with the
ability to integrate it even lower in

00:53:26.100 --> 00:53:31.370
your existing OpenGL pipeline so you can
now use a CGL context object as well as

00:53:31.510 --> 00:53:35.960
provide the output color space into which
Quartz Composer should render and we

00:53:35.960 --> 00:53:38.990
only support RGB color space right now.

00:53:39.320 --> 00:53:41.910
For those of you who want to do
off-screen rendering of composition,

00:53:41.910 --> 00:53:43.700
well, it's never been easier.

00:53:43.700 --> 00:53:46.190
You just need to call
initOffScreenWithSize,

00:53:46.190 --> 00:53:48.980
and it will take care of everything--
creating the OpenGL context,

00:53:48.990 --> 00:53:50.570
creating the OpenGLP buffer.

00:53:50.680 --> 00:53:52.320
So you don't have to
deal with OpenGL at all.

00:53:52.360 --> 00:53:55.150
You will just create a
QC renderer off-screen,

00:53:55.460 --> 00:53:58.280
and you can get the image out
using the same snapshot API that

00:53:58.280 --> 00:53:59.920
is available on the QC view.

00:53:59.960 --> 00:54:02.710
You call snapshotImage,
or createSnapShotImageOfType,

00:54:02.890 --> 00:54:03.890
and you get it.

00:54:04.000 --> 00:54:08.210
One important note about that is
createSnapShotImageOfType does not

00:54:08.210 --> 00:54:09.600
return a notori release object.

00:54:09.620 --> 00:54:12.220
So be careful about memory leaks here.

00:54:13.300 --> 00:54:15.380
Last but not least,
we have full integration

00:54:15.440 --> 00:54:16.520
in the new Core Animation.

00:54:16.620 --> 00:54:21.200
So there is a new Core Animation layer
that's called the QC Composition Layer.

00:54:21.450 --> 00:54:25.320
Very straightforward to create,
just Composition Layer with a file,

00:54:25.320 --> 00:54:27.200
file being a composition file on disk.

00:54:27.200 --> 00:54:31.320
And then you can use similar APIs to
the one on QC View and QC Renderer to

00:54:31.320 --> 00:54:36.170
be able to retrieve the attributes of
the Composition and communicate with it.

00:54:38.230 --> 00:54:41.380
Finally,
we have a conveniency that is the

00:54:41.380 --> 00:54:42.930
new Composition Parameter View.

00:54:43.060 --> 00:54:45.570
If you have your composition
and you want to display in the

00:54:45.610 --> 00:54:48.500
UI all the parameters at once,
no need to build it yourself anymore.

00:54:48.500 --> 00:54:52.090
You can just use the standard
QC Composition Parameter View.

00:54:52.220 --> 00:54:53.000
Very easy to use.

00:54:53.050 --> 00:54:55.770
All you have to do is call
setCompositionRenderer on it and

00:54:55.770 --> 00:54:58.100
you can pass either a QC view,
a QC renderer,

00:54:58.100 --> 00:55:02.100
or a new core animation layer.

00:55:02.100 --> 00:55:05.290
And it exists in two versions,
either as an embedded view or as a

00:55:05.290 --> 00:55:09.100
standalone patterned version as well.

00:55:09.110 --> 00:55:12.080
Let's do a demo of those new features.

00:55:15.130 --> 00:55:17.900
First one I wanted to show you is
a new patch that's really cool.

00:55:17.900 --> 00:55:20.120
It's called Mathematical Expression.

00:55:20.200 --> 00:55:25.350
So here I have a basic composition
that displays two Apple logos on the

00:55:25.710 --> 00:55:29.120
bottom left and top right corners and
they're actually anchored to the screen.

00:55:29.170 --> 00:55:35.050
So when I resize the composition,
the Apple logo stays in the corners.

00:55:35.190 --> 00:55:37.280
It might sound simple,
but it's not that simple

00:55:37.280 --> 00:55:40.550
because in Quartz Composer,
our coordinate system, well,

00:55:40.600 --> 00:55:44.400
we want one unit horizontally to be
always the same as one unit vertically.

00:55:44.500 --> 00:55:47.990
So which means when you resize
and change the aspect ratio,

00:55:48.010 --> 00:55:50.500
well,
the coordinate system slightly changes.

00:55:50.590 --> 00:55:54.880
So you need to do a little computation
to make sure the Apple stays anchored.

00:55:54.950 --> 00:56:00.200
If you were to do it using the Mat Patch,
well, each Mat Patch can do

00:56:00.200 --> 00:56:03.150
a number of operations,
but they have to be sequential and so on.

00:56:03.240 --> 00:56:04.240
So this is what we would need.

00:56:04.240 --> 00:56:07.080
We would need two Mat Patches
for the X and two Mat Patches for

00:56:07.080 --> 00:56:08.670
the Y coordinate of the Apple.

00:56:08.860 --> 00:56:11.670
Well,
I can do the same thing here with the new

00:56:11.670 --> 00:56:15.720
Mathematical Expression Patch where where
whatever the number of mat operation,

00:56:15.720 --> 00:56:18.030
you just have one.

00:56:18.520 --> 00:56:23.600
The way it works is you simply type
formula and automatically it populates

00:56:23.640 --> 00:56:25.290
the inputs and outputs of the patch.

00:56:25.290 --> 00:56:29.370
So for instance,
I can add something here.

00:56:30.400 --> 00:56:33.200
And now I can go back to the inputs.

00:56:33.260 --> 00:56:35.580
And you can see-- there we go.

00:56:35.630 --> 00:56:37.200
It just works.

00:56:37.270 --> 00:56:40.680
What we did with that mathematical
expression is also the ability for

00:56:40.720 --> 00:56:42.810
you to indirectly use it anywhere.

00:56:42.830 --> 00:56:46.680
So I can just enter computations.

00:56:46.970 --> 00:56:51.250
"In any text field where you enter
numerical values and it just works.

00:56:51.250 --> 00:56:53.100
So that's pretty useful."

00:56:54.310 --> 00:56:56.400
What's even more useful
is the Composition Loader

00:56:56.400 --> 00:56:58.690
I talked about earlier,
and I just want to do

00:56:58.690 --> 00:56:59.930
a quick overview here.

00:56:59.930 --> 00:57:03.410
Remember, it's going to be covered
in tomorrow's session.

00:57:04.130 --> 00:57:08.500
So what I have here is a composition
that has two composition loaders.

00:57:08.650 --> 00:57:14.290
What you do with it is you specify
the location of a composition on disk,

00:57:14.290 --> 00:57:16.470
or URL, something like that.

00:57:16.760 --> 00:57:21.050
And it will load the composition and
render it as if it was just embedded

00:57:21.340 --> 00:57:24.030
in the original composition here.

00:57:24.110 --> 00:57:27.200
So in that example,
I'm loading the slide composition,

00:57:27.200 --> 00:57:31.570
which is one of our examples,
and rendering it here.

00:57:31.580 --> 00:57:33.610
And on top of that,
I added a particle system,

00:57:33.610 --> 00:57:36.420
just to show you that an
integration is straightforward.

00:57:36.430 --> 00:57:40.320
What's better is the input parameters
and outputs of the composition

00:57:40.320 --> 00:57:41.780
you load are also accessible.

00:57:41.880 --> 00:57:45.150
So here,
I have the shape input and the color

00:57:45.640 --> 00:57:48.360
input of that slide composition
that are available as well.

00:57:48.420 --> 00:57:51.950
So that means I can just
change the composition,

00:57:51.960 --> 00:57:53.210
and it all works.

00:57:54.550 --> 00:57:57.360
Composition loader is very
powerful because you can now

00:57:57.470 --> 00:58:01.230
take a monolithic composition
and explode it into a master one,

00:58:01.250 --> 00:58:04.380
kind of an assembly composition,
and a number of sub-compositions.

00:58:04.450 --> 00:58:06.840
And then you can have graphic
artists work on sub-composition

00:58:06.890 --> 00:58:09.620
and so on and they don't break
anything in a master composition.

00:58:09.620 --> 00:58:11.650
Everything's independent.

00:58:15.670 --> 00:58:19.700
Another patch of interest
is the XML Downloader.

00:58:19.730 --> 00:58:25.310
A number of people have been doing
kind of Ajax kind of things but inside

00:58:25.310 --> 00:58:30.890
Quartz Composer using RSS and kind of
formatting the data using RSS and so on.

00:58:30.980 --> 00:58:33.630
So what we have now is
an easier way to do that.

00:58:33.670 --> 00:58:38.050
There is XML support so you
can have here more XML file.

00:58:38.050 --> 00:58:39.240
It's purely arbitrary format.

00:58:39.340 --> 00:58:43.610
What I just did is I built that
as a list of images and for each

00:58:43.670 --> 00:58:45.600
entry you have a pass to a file.

00:58:45.600 --> 00:58:50.600
You have the name to display as well as a
color to kind of colorize the image with.

00:58:50.800 --> 00:58:52.590
Pretty simple.

00:58:52.710 --> 00:58:58.240
Now I build that composition
here that reads that same XML.

00:58:58.350 --> 00:59:02.700
Let me just make that a bit bigger.

00:59:02.700 --> 00:59:02.700
That same XML file

00:59:04.650 --> 00:59:08.540
Using the new XML Downloader
Patch and you can see it's produced

00:59:09.070 --> 00:59:11.460
as a Quartz Composer structure.

00:59:11.570 --> 00:59:14.940
Then you can do all the
usual operations with it.

00:59:15.010 --> 00:59:17.180
You can parse the structure,
extract the members,

00:59:17.210 --> 00:59:20.700
so in that case the location of the file,
the text to display and the

00:59:20.700 --> 00:59:22.070
color to modulate it with it.

00:59:22.240 --> 00:59:25.880
And then there is some timing
logic but ultimately it displays

00:59:25.880 --> 00:59:27.410
all that thing on screen.

00:59:28.170 --> 00:59:33.280
So now you have a Composition whose
original dataset is just an XML file.

00:59:38.450 --> 00:59:41.490
One of the experimental patches
we have right now is GLSL support.

00:59:41.540 --> 00:59:44.800
So I'm saying experimental
because it's not fully finished,

00:59:44.920 --> 00:59:48.250
but you can already play with it
and do pretty powerful things.

00:59:48.340 --> 00:59:52.240
So I got a couple of
GLSL composition here.

00:59:52.240 --> 00:59:54.180
So that's the usual OpenGL teapot.

00:59:54.180 --> 00:59:56.440
I'm sure you've seen that before.

00:59:56.500 --> 01:00:01.130
And what happens here is it's rendered
with a GLSL shader on top of it.

01:00:01.940 --> 01:00:05.000
The way it works is that the
GLSL shader in the inspector,

01:00:05.000 --> 01:00:08.530
you can display the vertex shader
and fragment shader and edit it in

01:00:08.530 --> 01:00:12.440
real time there and all the changes
reflect in the viewer window.

01:00:12.470 --> 01:00:17.300
The GLSL shader patch is a macro patch,
so it loads the shader and then

01:00:17.300 --> 01:00:20.930
everything that you put inside
that macro patch is rendered

01:00:21.010 --> 01:00:22.130
and affected by the shader.

01:00:22.150 --> 01:00:26.050
In that case, we have just a trackball to
do the rotation thing and

01:00:26.140 --> 01:00:27.880
we have the teapot object.

01:00:28.960 --> 01:00:31.390
The same way you use
the Core Image Kernel to

01:00:31.390 --> 01:00:34.530
write your own kernels,
here you could write your own

01:00:34.530 --> 01:00:38.240
GLSL shaders and any changes
you do here regarding the

01:00:38.340 --> 01:00:41.560
uniforms of the GLSL shader,
namely the variables,

01:00:41.710 --> 01:00:47.080
public variables if you want,
will appear automatically

01:00:47.390 --> 01:00:47.970
as input of the GLSL patch.

01:00:49.070 --> 01:00:50.450
Let me show you another example.

01:00:50.460 --> 01:00:52.200
In that case,
it's doing a simple environment

01:00:52.200 --> 01:00:57.460
mapping using that source image.

01:00:57.460 --> 01:00:59.220
Here we go.

01:00:59.330 --> 01:01:01.410
Pretty simple as well.

01:01:02.550 --> 01:01:05.700
I would like to show you now
the Core Animation integration.

01:01:05.780 --> 01:01:11.540
So here I have a simple
Core Animation app that is used

01:01:11.540 --> 01:01:15.690
to browse your-- in that case,
the file hierarchy on disk.

01:01:15.970 --> 01:01:18.460
And the background is, of course,
Composer Composition.

01:01:18.730 --> 01:01:22.340
The way it's added is just a
layer in Core Animation world.

01:01:22.470 --> 01:01:24.630
You create the layer from
the Composition file,

01:01:24.630 --> 01:01:27.150
insert it at the proper place
in the Core Animation tree,

01:01:27.310 --> 01:01:28.640
and boom, you're done.

01:01:28.640 --> 01:01:30.290
And you got perfect rendering.

01:01:30.300 --> 01:01:33.680
It's all synchronized with the
display rate and all of that.

01:01:33.710 --> 01:01:37.570
And the input parameters of the
Composition are still accessible.

01:01:37.780 --> 01:01:41.420
So that's really powerful when you
combine core animation with the layering

01:01:41.470 --> 01:01:46.710
system and you have real time synthesized
content that comes from Quartz Composer,

01:01:46.780 --> 01:01:51.920
especially considering that Quartz
Composer renders at arbitrary sizes.

01:01:51.960 --> 01:01:55.830
And core animation takes that into
account as well to make sure the

01:01:55.900 --> 01:02:00.330
Quartz Composer layer is always
rendered at its optimal size,

01:02:00.330 --> 01:02:02.200
ensuring maximum quality.

01:02:02.300 --> 01:02:04.510
Back to slides, please.

01:02:09.530 --> 01:02:12.100
So we've seen a lot today,
but if you were to

01:02:12.100 --> 01:02:14.340
remember only a few things,
which I hope you're not going to do,

01:02:14.470 --> 01:02:17.400
but remember more,
Quartz Composer is really a

01:02:17.590 --> 01:02:21.090
visual programming environment
and you can use it for two things,

01:02:21.090 --> 01:02:22.060
primarily.

01:02:22.070 --> 01:02:25.200
Explore the world of all our
graphics technologies on Mac OS X.

01:02:25.200 --> 01:02:27.760
Remember, we have Core Image,
we have GLSL, we have OpenGL,

01:02:27.760 --> 01:02:33.200
all those things you can play with
in a single unified environment.

01:02:33.480 --> 01:02:37.730
You can use it to create compositions
that have input parameters.

01:02:37.730 --> 01:02:40.060
So we call them
parameterized compositions.

01:02:40.060 --> 01:02:43.270
And those are very powerful and you
can use them in your application,

01:02:43.310 --> 01:02:44.900
communicate with them and so on.

01:02:44.920 --> 01:02:48.880
We made it easy for you to integrate
those compositions in your applications.

01:02:48.880 --> 01:02:51.900
A new thing in Leopard is
the composition repository.

01:02:51.900 --> 01:02:56.770
So you should definitely try to
leverage that to add visual effects

01:02:56.850 --> 01:03:03.390
and animations to your applications and
let the user pick those compositions.

01:03:03.400 --> 01:03:06.280
For simple integration,
there is all the interface builder,

01:03:06.330 --> 01:03:09.040
Cocoa binding support and
we have those super simple

01:03:09.080 --> 01:03:11.400
playback APIs with the QC view.

01:03:11.410 --> 01:03:14.610
And in Mac OS X Leopard,
we have the ability to

01:03:14.610 --> 01:03:19.070
write custom patches,
the ability to add your

01:03:19.120 --> 01:03:21.900
own effects to photo boost,
eye chat and so on.

01:03:21.900 --> 01:03:27.350
We have animated desktop support
and the WebKit support as well.

01:03:27.730 --> 01:03:31.250
Remember, we have two Quartz Composer
sessions coming tomorrow.

01:03:31.250 --> 01:03:34.310
The first one at 10:30 in the morning
will be ""Creating Your Quartz Composer

01:03:34.310 --> 01:03:39.000
Composition."" The one in the afternoon
will be ""Advanced Quartz Composer,""

01:03:39.000 --> 01:03:42.530
which is more programming techniques,
how to write your own patches and really

01:03:42.700 --> 01:03:44.330
use Quartz Composer to the maximum.

01:03:44.570 --> 01:03:48.300
For more information about the
Quartz Composer technology,

01:03:48.300 --> 01:03:52.830
please refer to Alan Schaffer,
our 2D and 3D graphics evangelist.

01:03:52.830 --> 01:03:55.540
As usual,
you can get documentation sample

01:03:55.540 --> 01:03:57.600
code from the WWDC website.

01:03:58.620 --> 01:04:01.910
Three labs of interest:
the Late Night Graphics and Media Lab,

01:04:01.910 --> 01:04:04.000
they will be Quartz Composer forks here.

01:04:04.000 --> 01:04:06.310
It's tomorrow at 6pm.

01:04:06.700 --> 01:04:10.200
Then there is a dedicated Quartz
Composer Lab which is Thursday at 3:30

01:04:10.200 --> 01:04:13.560
and there is also a Core Image Lab at
the same time in the same place.