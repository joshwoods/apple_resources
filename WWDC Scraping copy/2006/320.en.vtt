WEBVTT

00:00:10.280 --> 00:00:11.240
My name is Robert Bowdidge.

00:00:11.290 --> 00:00:14.940
I'm a member of the developer
tools team at Apple.

00:00:14.970 --> 00:00:18.000
And I'd like to tell you about
a feature that the team I work

00:00:18.000 --> 00:00:23.890
on has been involved with,
refactoring.

00:00:26.370 --> 00:00:28.940
To give you an idea about what we're
going to be going through today,

00:00:29.040 --> 00:00:31.480
we're first going to start off
explaining what refactoring is and

00:00:31.480 --> 00:00:34.420
why you should be really excited that
you now have access to it in Xcode.

00:00:34.420 --> 00:00:37.490
Second, we're going to give you
some demonstrations of what

00:00:37.490 --> 00:00:40.420
refactoring in Xcode looks like,
so you can see how it works.

00:00:40.420 --> 00:00:42.150
And finally,
we're going to give you some details

00:00:42.150 --> 00:00:44.880
about how you can actually refactor your
own code and some of the things that you

00:00:44.880 --> 00:00:46.410
should be aware of as you're doing so.

00:00:46.420 --> 00:00:48.550
Now, before I start,
how many of you actually

00:00:48.550 --> 00:00:49.950
know what refactoring is?

00:00:49.960 --> 00:00:54.260
How many of you have used
refactoring for other languages?

00:00:55.800 --> 00:00:59.450
How many of you have used
refactoring for C-like languages?

00:01:00.490 --> 00:01:02.720
Better than I thought.

00:01:02.870 --> 00:01:05.970
Okay, what is refactoring?

00:01:06.010 --> 00:01:10.800
For those of you who haven't seen it,
refactoring is a way to make global,

00:01:10.800 --> 00:01:14.790
structured,
controlled changes to your source code.

00:01:14.900 --> 00:01:16.800
By global,
that means that we actually have

00:01:16.800 --> 00:01:19.240
ways that can go through your entire
program and change all of your

00:01:19.240 --> 00:01:20.790
source code in some particular way.

00:01:20.800 --> 00:01:23.300
By structural,
we mean that the changes involve

00:01:23.300 --> 00:01:26.220
either your design or your
structure of your program,

00:01:26.220 --> 00:01:30.190
what the names of things are,
what abstractions exist, and so on.

00:01:30.200 --> 00:01:33.620
And they're controlled because a
refactoring tool gives you ways of

00:01:33.620 --> 00:01:37.360
changing the code in ways that maintain
properties that you really want,

00:01:37.400 --> 00:01:40.270
such as whether the code compiles
the same before as after,

00:01:40.270 --> 00:01:42.920
as well as whether it runs
the same before as after.

00:01:43.440 --> 00:01:46.670
And refactoring is really cool
because it gives you a way to

00:01:46.710 --> 00:01:49.310
make your code more maintainable,
and it gives you a way to

00:01:49.310 --> 00:01:52.280
make it easier to enhance your
programs to add new features.

00:01:52.440 --> 00:01:56.610
Now, to give you some examples of that,
here's the most simple example that

00:01:56.760 --> 00:02:01.440
most of you probably have seen before:
the idea of renaming a declaration.

00:02:01.440 --> 00:02:05.440
So, let's imagine that you work for
a company that does car rentals.

00:02:05.460 --> 00:02:09.900
And one day your boss comes in and says,
"Hey, I've got a great idea.

00:02:09.900 --> 00:02:11.430
Let's rent trucks."

00:02:12.920 --> 00:02:15.300
Now the problem is that you already
have this class called CarRental

00:02:15.300 --> 00:02:17.260
that represents the rental record.

00:02:17.350 --> 00:02:21.720
And the problem is that for anyone
else on the team who sees this,

00:02:21.770 --> 00:02:23.180
they may think that this means only cars.

00:02:23.280 --> 00:02:26.230
But when you go to trucks,
when you're renting cars and trucks,

00:02:26.310 --> 00:02:28.940
does this class only apply to cars,
or does it apply to all the

00:02:28.940 --> 00:02:30.390
vehicles that you're renting?

00:02:30.490 --> 00:02:35.550
And so what you'd like to be able to
do is change that name and replace it

00:02:35.560 --> 00:02:37.200
with a new name that's more meaningful.

00:02:37.430 --> 00:02:39.330
And you'd like to make
sure that by doing so,

00:02:39.410 --> 00:02:41.020
you're not breaking your code.

00:02:41.420 --> 00:02:44.970
A slightly more complex example is
the idea of partitioning a class,

00:02:45.170 --> 00:02:47.400
breaking it up into multiple classes.

00:02:47.400 --> 00:02:49.400
So for example,
with this rental car example,

00:02:49.400 --> 00:02:52.900
you could imagine the idea that
you have a car class representing

00:02:52.900 --> 00:02:54.400
the cars that you're renting.

00:02:54.400 --> 00:02:56.290
And there may be parts
of that that are generic,

00:02:56.290 --> 00:03:00.400
that involve things like what the
mileage is and when the next repair is.

00:03:00.400 --> 00:03:03.210
And there may be parts of the
class that are specific to cars,

00:03:03.480 --> 00:03:06.930
such as how many seats it has,
and whether it's a convertible or not.

00:03:07.220 --> 00:03:12.600
And so, if you were actually going to
add an enhancement to be able to

00:03:12.690 --> 00:03:16.440
add the idea of renting trucks,
this model's not going to work,

00:03:16.510 --> 00:03:19.000
because you already have the
car stuff embedded in there.

00:03:19.000 --> 00:03:22.450
And what you'd instead like
is something like this,

00:03:22.450 --> 00:03:25.640
where you break your car
class into two parts,

00:03:25.640 --> 00:03:29.500
one being the vehicle generic behavior
and one being the car-specific behavior.

00:03:30.030 --> 00:03:33.380
You make the vehicle class a superclass,
and then you subclass the vehicle

00:03:33.380 --> 00:03:35.990
class to make your truck behavior,
and then you add your

00:03:36.180 --> 00:03:37.400
truck behavior in there.

00:03:37.400 --> 00:03:40.530
And this is how refactoring gives you a
way to make your code more maintainable,

00:03:40.540 --> 00:03:42.090
by making it easy for you to do this.

00:03:45.780 --> 00:03:47.690
Now people do this.

00:03:47.790 --> 00:03:49.450
How many of you actually
have refactored by hand,

00:03:49.470 --> 00:03:51.460
not with a tool?

00:03:51.460 --> 00:03:53.500
It's like everyone.

00:03:54.200 --> 00:03:59.070
I should just skip the intro,
but I'll go through it anyway,

00:03:59.180 --> 00:04:00.940
just for practice.

00:04:01.570 --> 00:04:04.580
And the reason why refactoring is hard
is because it's such a pain to do.

00:04:04.580 --> 00:04:05.290
People will do this.

00:04:05.300 --> 00:04:07.250
You can look at Fowler's book,
and he has all the examples

00:04:07.250 --> 00:04:09.900
about how to actually do these
kinds of changes by hand.

00:04:09.970 --> 00:04:13.300
To be able to refactor by hand,
you have to make sure the code compiles,

00:04:13.300 --> 00:04:15.290
you have to make sure
it behaves the same,

00:04:15.330 --> 00:04:17.980
and that means you actually
have to run your unit tests,

00:04:17.980 --> 00:04:19.480
assuming you have those.

00:04:21.940 --> 00:04:23.330
Then what you have to do is,
once you've figured

00:04:23.330 --> 00:04:25.570
out how your code runs,
now you want to start making the change.

00:04:25.600 --> 00:04:28.640
And one of the things you need to make
sure is that you understand what the

00:04:28.640 --> 00:04:32.230
constraints are on the transformation.

00:04:32.430 --> 00:04:34.800
What are the preconditions
that need to hold,

00:04:34.800 --> 00:04:37.900
and what are the things that could
keep you from doing the transformation?

00:04:37.900 --> 00:04:39.680
For example,
if you're renaming a declaration,

00:04:39.800 --> 00:04:43.810
are there already declarations with
that name somewhere else in the program?

00:04:44.060 --> 00:04:45.770
And you want to be able to check that,
so you have to go searching

00:04:45.770 --> 00:04:46.890
through your code looking for that.

00:04:47.140 --> 00:04:49.700
Then what you need to do, of course,
is you need to go to every

00:04:49.710 --> 00:04:52.010
single place that could possibly
change in the source code.

00:04:52.020 --> 00:04:54.280
And you need to look
at every single spot,

00:04:54.280 --> 00:04:57.270
and you need to decide what
change needs to go there.

00:04:57.280 --> 00:05:00.680
And you need to decide exactly whether
that change deserves to be there.

00:05:00.680 --> 00:05:01.700
You need to make the change correct.

00:05:01.790 --> 00:05:05.110
And that's really detailed,
and that's really nasty.

00:05:05.180 --> 00:05:08.470
And in fact, I had a friend in graduate
school who tried something like

00:05:08.600 --> 00:05:10.140
this with the Sun OS kernel.

00:05:10.140 --> 00:05:11.410
He was adding some networking code.

00:05:11.850 --> 00:05:14.000
And he had to go through every
line of the networking code,

00:05:14.000 --> 00:05:17.010
and he had to figure out what was going
on with a particular buffer to figure

00:05:17.010 --> 00:05:18.920
out how the behavior was going to change.

00:05:18.920 --> 00:05:22.210
And he spent three days going
through all that source code.

00:05:22.220 --> 00:05:24.420
Because he couldn't stop,
because he'd forget what

00:05:24.420 --> 00:05:27.120
he'd been doing before,
and he didn't want to lose his place.

00:05:30.230 --> 00:05:32.400
And that's why we need refactoring.

00:05:32.400 --> 00:05:33.760
And finally,
once you've done your change,

00:05:33.770 --> 00:05:35.600
you actually need to compile it and
test it and make sure it actually

00:05:35.600 --> 00:05:37.270
behaves the same as you expected,
just to make sure you

00:05:37.270 --> 00:05:38.100
haven't broken things.

00:05:41.470 --> 00:05:42.890
Why should you have to do this?

00:05:42.990 --> 00:05:45.700
Although we're programmers,
we can't read source code that well.

00:05:45.760 --> 00:05:48.290
We can't look at 100,000 lines of source
code and remember all the details.

00:05:48.300 --> 00:05:51.400
We can't make changes across a
million lines of source code easily.

00:05:51.570 --> 00:05:52.900
But we've got tools that can.

00:05:52.980 --> 00:05:54.100
We've got things like compilers.

00:05:54.100 --> 00:05:55.400
We've got things like the IDE.

00:05:55.400 --> 00:06:00.150
Xcode does code completion,
and it can read my source code.

00:06:00.150 --> 00:06:02.900
So why can't it do the work for me?

00:06:02.900 --> 00:06:02.900
And in fact,

00:06:03.150 --> 00:06:05.580
I, as the programmer,
know what my design should be.

00:06:05.620 --> 00:06:08.500
I should be able to say,
I want my program to look like this.

00:06:08.600 --> 00:06:10.150
And the tools should be
able to do all the nasty,

00:06:10.410 --> 00:06:14.100
dirty little details of
actually making those changes.

00:06:15.260 --> 00:06:19.160
And as we've all seen,
as we've seen in this room,

00:06:19.210 --> 00:06:20.680
there are these kind of
tools for other languages,

00:06:20.680 --> 00:06:24.720
but in general these tools have not
been available for C-like languages,

00:06:24.760 --> 00:06:25.520
or at least not broadly.

00:06:25.520 --> 00:06:27.950
And so for me as an
Objective-C programmer,

00:06:28.060 --> 00:06:31.050
and a C programmer,
I don't have access to these tools,

00:06:31.050 --> 00:06:32.910
and many of you don't either.

00:06:35.660 --> 00:06:38.520
So what we're here to tell
you about today is that Xcode

00:06:38.520 --> 00:06:40.580
now has refactoring support.

00:06:40.580 --> 00:06:42.330
And better than that,
we don't just have support

00:06:42.330 --> 00:06:44.920
for changing source code,
but we also understand

00:06:44.920 --> 00:06:46.540
the Apple environment.

00:06:46.540 --> 00:06:48.210
And so that means that not
only are we going to modify

00:06:48.310 --> 00:06:51.290
your Objective-C and C sources,
but we're also going to change

00:06:51.290 --> 00:06:54.780
the non-source-style files
that exist in your programs.

00:06:54.780 --> 00:06:58.350
For example, if you have an application
with a user interface,

00:06:58.350 --> 00:06:59.810
you have nib files.

00:06:59.910 --> 00:07:03.610
And nib files have mention
of interface variable names,

00:07:03.610 --> 00:07:04.730
it has mention of classes.

00:07:04.780 --> 00:07:07.930
And so if you were to rename a class,
you need to make sure you rename

00:07:07.930 --> 00:07:10.680
the stuff in the nib file as well.

00:07:10.680 --> 00:07:12.790
And we also have these
things like key-value coding,

00:07:12.910 --> 00:07:14.750
where the name of a method
is related to the instance

00:07:14.820 --> 00:07:15.850
variable that it manipulates.

00:07:15.850 --> 00:07:17.220
And so if we change
the instance variable,

00:07:17.220 --> 00:07:18.190
we need to change the method.

00:07:19.890 --> 00:07:21.840
And finally,
we've added support for being

00:07:21.840 --> 00:07:25.170
able to do some transformations to
move things into Objective-C 2.0,

00:07:25.170 --> 00:07:28.500
so that you can actually start
moving over to the new language.

00:07:30.940 --> 00:07:35.700
Now, the operations that you
can do on refactoring,

00:07:35.700 --> 00:07:37.780
as most of you know,
are called transformations.

00:07:37.780 --> 00:07:40.360
We call them transformations
because they're mathematical.

00:07:40.360 --> 00:07:42.080
They're converting the program
from one form to another,

00:07:42.080 --> 00:07:45.180
while maintaining all those properties
of keeping the code running the

00:07:45.180 --> 00:07:47.180
same and compiling the same.

00:07:47.180 --> 00:07:49.380
The transformations that we're
supporting in this first version

00:07:49.380 --> 00:07:52.420
that's coming out with the
Leopard Preview are the following.

00:07:52.430 --> 00:07:55.540
First of all, we have rename,
so that you can rename declarations.

00:07:55.720 --> 00:07:58.840
Second, we have the idea of
manipulating class hierarchies,

00:07:58.860 --> 00:08:01.530
so that you can create an abstract
superclass and start moving instance

00:08:01.530 --> 00:08:03.290
variables and methods up into that.

00:08:03.290 --> 00:08:06.790
Third, we have the idea of
encapsulating a variable.

00:08:06.810 --> 00:08:09.780
Right now,
it's going to be fields of structures

00:08:09.780 --> 00:08:11.890
or instance variables of classes.

00:08:11.890 --> 00:08:14.720
And finally,
we have the transformations for

00:08:14.720 --> 00:08:19.170
manipulating Objective-C 2.0 programs,
specifically modernizing iterations over

00:08:19.170 --> 00:08:22.450
NSArrays to be using the new loop format,
as well as converting instance

00:08:22.450 --> 00:08:23.870
variables into properties.

00:08:23.880 --> 00:08:26.430
Now, to go into detail about
these transformations,

00:08:26.470 --> 00:08:28.600
I'd like to bring Andrew Pontious up
on stage to demonstrate some of the

00:08:28.600 --> 00:08:28.600
things that we're going to be doing.

00:08:28.600 --> 00:08:28.600
Now, the operations that you
can do on refactoring,

00:08:28.600 --> 00:08:28.600
are called transformations.

00:08:28.600 --> 00:08:28.600
The first thing that you can
do is to create a variable.

00:08:28.600 --> 00:08:28.600
The first thing that you can
do is to create a variable.

00:08:28.600 --> 00:08:30.610
The second thing that you can do
is to create to demonstrate these.

00:08:37.050 --> 00:08:39.300
Thank you, Robert.

00:08:39.380 --> 00:08:45.240
So as Robert said, there are four sets of
transformations in Xcode.

00:08:45.320 --> 00:08:47.940
I'm going to start with rename.

00:08:48.910 --> 00:08:55.320
Now, in order to have a project to use
to show you these transformations,

00:08:55.320 --> 00:08:58.100
we're going to bring together
an application which stems

00:08:58.100 --> 00:08:59.970
from the following problem.

00:09:00.490 --> 00:09:05.010
Now, how many of you have had any trouble
this week finding the right room for

00:09:05.100 --> 00:09:06.410
a session that you wanted to go to?

00:09:06.420 --> 00:09:08.160
Okay, some of you.

00:09:08.160 --> 00:09:11.880
Or maybe you know where the room is,
but you need to know how long

00:09:11.880 --> 00:09:14.980
it's going to take for you to get
from where you are to that room,

00:09:14.980 --> 00:09:18.080
so you don't miss any of the wonderful
content we have for you this week.

00:09:18.080 --> 00:09:22.000
So, the problem is getting
to your conference room.

00:09:22.000 --> 00:09:26.170
Now, there are plenty of resources out
on the web to help you get from,

00:09:26.170 --> 00:09:29.240
say,
your hotel room to the conference center,

00:09:29.540 --> 00:09:33.040
but once you get inside the building,
you're on your own.

00:09:33.040 --> 00:09:38.650
So, the solution that you and your
buddy came up with was a new

00:09:38.650 --> 00:09:41.980
application called Get a Room.

00:09:43.900 --> 00:09:45.710
What?

00:09:45.760 --> 00:09:50.320
OK, so the Getter Room application
consists of a variety of classes.

00:09:50.610 --> 00:09:53.740
The first class represents the entire
structure that you're navigating through,

00:09:53.890 --> 00:09:56.720
so that is the conference center class.

00:09:56.720 --> 00:10:00.940
And then, because conference centers
consist of a number of floors,

00:10:00.940 --> 00:10:02.260
there's also the floor class.

00:10:02.260 --> 00:10:05.490
And then because floors
consist of a number of rooms,

00:10:05.490 --> 00:10:07.430
there's also the room class.

00:10:07.430 --> 00:10:10.690
And then,
to round out the list of classes,

00:10:10.910 --> 00:10:14.360
they're the classes that have to do
with getting from one floor to another,

00:10:14.360 --> 00:10:18.370
and these are the escalator floor,
excuse me, the escalator class,

00:10:18.390 --> 00:10:20.580
the elevator class, and the stair class.

00:10:20.600 --> 00:10:24.290
Okay, so in order to transform
any of these classes,

00:10:24.290 --> 00:10:28.640
or anything in your project,
you need to follow these three steps.

00:10:28.640 --> 00:10:34.040
First, you need to select the text that
represents what you wish to transform.

00:10:34.040 --> 00:10:37.970
Second,
you need to preview the transformation

00:10:37.970 --> 00:10:41.380
using the refactoring window in Xcode.

00:10:41.380 --> 00:10:45.010
And third, you need to apply the
changes to your project.

00:10:45.090 --> 00:10:47.580
So we're going to go
ahead and show you that.

00:10:47.630 --> 00:10:49.440
So if we could switch
to the demo machine.

00:10:53.780 --> 00:10:56.680
Okay, so now,
when your buddy saw the Get a

00:10:56.680 --> 00:11:00.950
Room application that you had written,
your buddy noticed that all the logic

00:11:00.960 --> 00:11:05.820
for getting from one room to another
was not just for conference centers.

00:11:05.820 --> 00:11:10.010
It was also very general purpose for
any other structure that you were in,

00:11:10.010 --> 00:11:13.560
for example, a museum or a skyscraper,
things like that.

00:11:13.640 --> 00:11:15.920
So when you finally
marketed this application,

00:11:16.000 --> 00:11:18.250
you made it a very general
purpose application,

00:11:18.290 --> 00:11:20.140
and you got more sales because of it.

00:11:20.500 --> 00:11:22.630
But you know that down
in the source code,

00:11:22.630 --> 00:11:25.380
there's still a class
called Conference Center.

00:11:25.380 --> 00:11:28.970
Now, this doesn't disrupt your code,
the first version of it.

00:11:29.230 --> 00:11:31.630
Everything still compiles
and runs just fine.

00:11:31.640 --> 00:11:35.740
But when someone else comes to the code
later on and wants to make new changes,

00:11:35.740 --> 00:11:38.890
wants to add new features,
they might be a little confused

00:11:38.890 --> 00:11:42.060
at the fact that the name
doesn't match its functionality.

00:11:42.060 --> 00:11:45.220
So we're going to go ahead
and rename that class now.

00:11:46.780 --> 00:11:49.060
OK, so we're going to follow
those three steps,

00:11:49.140 --> 00:11:52.070
the first step being select the text.

00:11:53.200 --> 00:11:56.260
In our case, we're selecting the class
name Conference Center.

00:11:56.320 --> 00:11:59.100
The second step was to bring
up the refactoring window.

00:11:59.130 --> 00:12:01.500
There are actually four ways to
bring up the refactoring window.

00:12:01.500 --> 00:12:05.080
The first way is through the Edit menu.

00:12:05.080 --> 00:12:06.580
There's a Refactor menu item there.

00:12:06.580 --> 00:12:09.500
The second way is to use
the keystroke shortcut,

00:12:09.570 --> 00:12:10.960
Command-Shift-J.

00:12:10.960 --> 00:12:12.260
That's probably the fastest way.

00:12:13.330 --> 00:12:26.050
The third way involves clicking on the
refactoring icon in your icon toolbar.

00:12:26.050 --> 00:12:26.050
Now, by default, there's actually no
refactoring icon there,

00:12:26.050 --> 00:12:26.050
so in order to add it,
you need to customize your toolbar.

00:12:28.780 --> 00:12:33.500
and add up that icon to your toolbar,
then you're all set.

00:12:33.550 --> 00:12:37.320
Now, the fourth way is just to bring up
the contextual menu of your selection.

00:12:37.370 --> 00:12:40.060
And again,
there's a refactor menu item there.

00:12:40.140 --> 00:12:42.370
So OK, we're going to pick away,
and we're going to bring

00:12:42.370 --> 00:12:43.860
up the refactor window.

00:12:45.270 --> 00:12:50.940
Okay, now as you can see,
the UI there combines to form a

00:12:50.940 --> 00:12:54.200
sort of sentence that describes
what you're going to do.

00:12:54.250 --> 00:12:59.800
In our case, we are renaming
Conference Center to a new name.

00:12:59.880 --> 00:13:03.910
So this new name, we need to type it in,
and in our case we're going to use

00:13:03.910 --> 00:13:07.980
"building" because that's a more
general purpose name for the class.

00:13:08.130 --> 00:13:11.440
Now, as you can see,
there's a few other pieces of UI here

00:13:11.440 --> 00:13:12.800
that we'll get to in a little bit.

00:13:12.880 --> 00:13:16.190
There's the Related KVC Members checkbox.

00:13:16.480 --> 00:13:18.370
There's also a Snapshot checkbox.

00:13:18.500 --> 00:13:21.430
Now, we'll get to the Snapshot
checkbox at the very end.

00:13:21.510 --> 00:13:23.970
So right now,
we can click the Preview button.

00:13:24.350 --> 00:13:26.900
Okay, now as you saw,
there was a little bit of activity going

00:13:26.900 --> 00:13:29.240
on there in the refactoring window.

00:13:29.240 --> 00:13:33.400
That activity shows you that we
are in the middle of setting up,

00:13:33.560 --> 00:13:35.460
putting together that preview for you.

00:13:35.460 --> 00:13:39.490
So now the result here is there
are several classes which have

00:13:39.490 --> 00:13:43.330
checkboxes next to their name,
and a tally of the number of

00:13:43.330 --> 00:13:47.740
changes that are being made to
those files on the right-hand side.

00:13:47.740 --> 00:13:49.860
So that's a good overview
of what we've done,

00:13:49.900 --> 00:13:53.720
but if you want to see more details,
you need to select one of those files.

00:13:57.930 --> 00:14:01.340
So as you can see,
selecting the file brings up a view

00:14:01.340 --> 00:14:05.990
that shows you what the changes
are that we're going to make.

00:14:06.540 --> 00:14:10.000
In this case,
we're changing the class declaration

00:14:10.000 --> 00:14:12.040
name from Conference Center to Building.

00:14:12.200 --> 00:14:14.910
If we go to the .m file,

00:14:15.570 --> 00:14:18.560
You can see we're also changing
the class definition name.

00:14:18.590 --> 00:14:22.870
And if you go to the third file,
you can see that we're also changing

00:14:22.870 --> 00:14:27.790
a usage of the Conference Center class
name to the new name.

00:14:27.860 --> 00:14:29.340
So that all looks good.

00:14:29.340 --> 00:14:31.880
Let's apply those changes.

00:14:34.050 --> 00:14:36.600
Now,
if we go back to the project window here,

00:14:36.630 --> 00:14:41.060
you'll see that the number of files
that show as being edited are the

00:14:41.060 --> 00:14:44.200
same files that we showed as having
changes in the refactoring window.

00:14:44.200 --> 00:14:48.460
What we've done is we've applied these
changes by editing those files for you.

00:14:49.740 --> 00:14:51.440
Okay,
so that was our first transformation.

00:14:51.440 --> 00:14:53.760
If we could go back to the slide machine.

00:14:58.250 --> 00:15:02.110
Okay, so now that we've gone through our
very first transformation in Xcode,

00:15:02.170 --> 00:15:06.120
I'd like to go through the
features of the refactoring

00:15:06.340 --> 00:15:08.310
window in a little more detail.

00:15:08.800 --> 00:15:11.700
So the refactoring window
consists of three areas:

00:15:11.830 --> 00:15:17.080
the setup area, the results area,
and the comparison area at the bottom.

00:15:17.170 --> 00:15:19.950
The setup area comes up first, and again,
as I said,

00:15:20.200 --> 00:15:23.730
the UI there shows you a bit of a
sentence to describe what's going on.

00:15:23.820 --> 00:15:27.960
In our case,
rename Conference Center to the new name.

00:15:28.360 --> 00:15:31.980
Now, while rename is the
default transformation

00:15:31.980 --> 00:15:35.370
that comes up in this area,
you can also bring up all the other

00:15:35.370 --> 00:15:36.820
transformations that are possible.

00:15:36.820 --> 00:15:40.420
Now, this pop-up button menu shows
you all of the transformations,

00:15:40.450 --> 00:15:44.180
but only the transformations that
are valid for your current selection

00:15:44.180 --> 00:15:47.240
will actually be active and be
something that you can select.

00:15:47.260 --> 00:15:50.690
So now, if we hit the preview button,
as I said before,

00:15:50.830 --> 00:15:52.930
now the results area comes up.

00:15:53.000 --> 00:15:56.180
Now, the files in the results area
have different state depending

00:15:56.180 --> 00:15:57.770
on what's going on with them.

00:15:58.300 --> 00:16:00.870
If they are inactive,
that means that we haven't quite

00:16:00.970 --> 00:16:02.700
gotten to them yet in the preview.

00:16:02.700 --> 00:16:05.860
If they're active but have a little
progress indicator next to them,

00:16:05.960 --> 00:16:09.480
that means that we are in the process
of analyzing that file right then.

00:16:09.480 --> 00:16:14.510
And if there are checkboxes next to them,
that means we are done analyzing them,

00:16:14.560 --> 00:16:17.870
and we know what kind of
changes we want to make to them.

00:16:17.880 --> 00:16:20.170
So again,
if you select one of these files,

00:16:20.170 --> 00:16:23.560
then the final area comes up,
which is the comparison area.

00:16:23.560 --> 00:16:25.790
Now,
you might notice that this comparison

00:16:25.790 --> 00:16:29.410
area looks a lot like another application
that most of you have probably used,

00:16:29.410 --> 00:16:31.080
which is file merge, right?

00:16:31.080 --> 00:16:34.270
So there are, of course,
similarities and differences

00:16:34.270 --> 00:16:36.340
between file merge and this area.

00:16:36.340 --> 00:16:41.980
One of the differences is that
this area is coordinated with

00:16:42.100 --> 00:16:45.350
the file row in the results area.

00:16:45.360 --> 00:16:48.460
So you see that there's a
checkbox there in the file.

00:16:48.460 --> 00:16:51.760
That means that all of the changes
that by default will be made for this

00:16:51.760 --> 00:16:53.860
transformation are going to be made.

00:16:53.880 --> 00:16:58.750
And you can see this as well because the
arrows all point from... Left to right.

00:17:00.490 --> 00:17:03.170
Now, if you say, OK,
for this particular file,

00:17:03.170 --> 00:17:06.520
I've decided that I don't want
to make any of those changes,

00:17:06.520 --> 00:17:08.330
you can uncheck that checkbox.

00:17:08.740 --> 00:17:12.150
And now, all of the arrows have switched
for pointing from left to

00:17:12.150 --> 00:17:14.460
right to right to left.

00:17:14.490 --> 00:17:16.820
And this also shows one of
the other differences between

00:17:17.020 --> 00:17:20.750
this area and File Merge,
which is, in File Merge,

00:17:20.750 --> 00:17:23.360
when you want to see the
results of the choices you've

00:17:23.360 --> 00:17:26.550
made for a particular merge,
you have to look at the bottom pane,

00:17:26.700 --> 00:17:28.940
the third pane of a File Merge window.

00:17:29.100 --> 00:17:30.970
But in our case,
we only have the two panes.

00:17:31.040 --> 00:17:36.070
So we show the results of the choices
that you made only in the right pane.

00:17:36.150 --> 00:17:38.740
So if you say, OK,
I don't want to make any changes,

00:17:38.790 --> 00:17:42.140
now all of those changes disappear
from the right-hand side.

00:17:42.140 --> 00:17:43.990
But if you come back and you say, OK,
well,

00:17:43.990 --> 00:17:47.170
maybe I want to make that first change,
what you do is you select that row and

00:17:47.180 --> 00:17:51.570
you flip the arrow using the arrow keys,
the same way you would do in File Merge.

00:17:51.750 --> 00:17:53.600
And now that one change is made.

00:17:53.820 --> 00:17:55.700
Now again,
we have synchronized with that checkbox.

00:17:55.760 --> 00:17:59.140
So the checkbox now,
instead of showing unchecked,

00:17:59.140 --> 00:18:00.380
now shows mixed.

00:18:00.460 --> 00:18:02.100
Some changes have been made.

00:18:02.340 --> 00:18:03.720
Some changes haven't.

00:18:03.810 --> 00:18:06.830
So if you go ahead and say, OK,
now I'm going to make that

00:18:07.060 --> 00:18:10.330
second change as well,
now all the arrows point to the right,

00:18:10.330 --> 00:18:12.430
and the checkbox is fully checked.

00:18:12.430 --> 00:18:15.550
OK, so we've had a bit of a
look at the refactor window.

00:18:15.550 --> 00:18:18.920
There is, in fact,
still more to look at in the rename demo.

00:18:19.030 --> 00:18:21.480
So if we could go back to that demo.

00:18:23.250 --> 00:18:25.810
Okay,
so for our second shot here at Rename,

00:18:25.950 --> 00:18:29.470
we're going to go to the Room class.

00:18:33.710 --> 00:18:35.460
We bring up room.h.

00:18:35.500 --> 00:18:38.880
And one of the instance
variables here is called picture.

00:18:38.940 --> 00:18:42.780
Now, if we look at a sample
picture in this project,

00:18:43.090 --> 00:18:47.240
You can see that in fact,
it isn't really a photo.

00:18:47.310 --> 00:18:49.460
It's more like a map or a floor plan.

00:18:49.590 --> 00:18:52.430
So in the same way that the
Conference Center class name was a bit

00:18:52.510 --> 00:18:56.930
misaligned with the actual functionality,
this instance variable is also

00:18:56.930 --> 00:18:58.110
not quite named correctly.

00:18:58.350 --> 00:18:59.830
So we're going to change it.

00:18:59.910 --> 00:19:01.480
So we can go through those steps again.

00:19:01.650 --> 00:19:04.480
First, we need to select the text.

00:19:04.530 --> 00:19:08.020
Next, we need to bring up
the refactoring window.

00:19:08.330 --> 00:19:10.500
Now, as you can see here,
that checkbox that

00:19:10.500 --> 00:19:14.110
I told you about before,
the related KVC members checkbox,

00:19:14.160 --> 00:19:15.320
is now active.

00:19:15.410 --> 00:19:19.370
And it's active because you have selected
an Objective-C class instance variable.

00:19:19.510 --> 00:19:21.690
So let's go ahead and check that.

00:19:22.110 --> 00:19:26.090
And so again,
we're saying rename picture2,

00:19:26.230 --> 00:19:27.540
and we need a new name.

00:19:27.540 --> 00:19:30.570
In our case,
we're going to call it floorplan.

00:19:32.300 --> 00:19:34.200
All right,
so we can go ahead and preview this.

00:19:34.200 --> 00:19:41.010
Wow, so, okay, so again we see that, hey,
what's going on?

00:19:41.030 --> 00:19:43.100
There's a nib file in the results.

00:19:43.100 --> 00:19:47.180
So when we did the first transformation,
only source code files showed up there.

00:19:47.180 --> 00:19:50.580
But now, a nib file shows up,
so what's going on?

00:19:50.660 --> 00:19:53.970
Well, you've probably already seen
this a lot in your own code,

00:19:54.440 --> 00:19:57.210
that whenever you change
instance variable names in

00:19:57.210 --> 00:20:00.500
classes that you're working on,
that doesn't change them in the

00:20:00.500 --> 00:20:03.320
nib files if those classes are
referred to in any nib files.

00:20:03.340 --> 00:20:06.240
So what you need to do is you
need to find those nib files and

00:20:06.240 --> 00:20:09.540
either drag the header over again
and reconnect everything up,

00:20:09.540 --> 00:20:11.060
or you type in a new name.

00:20:11.060 --> 00:20:12.650
You have to do this for every nib file.

00:20:12.660 --> 00:20:15.190
It's error-prone, it's tedious,
and with refactoring,

00:20:15.190 --> 00:20:16.830
you don't have to do that anymore.

00:20:16.840 --> 00:20:20.480
So let's have a look at the room.

00:20:20.660 --> 00:20:22.340
that name file.

00:20:23.540 --> 00:20:25.880
Okay, as you can see here,
we've gone ahead and

00:20:25.880 --> 00:20:27.000
made that change for you.

00:20:27.000 --> 00:20:30.000
We've changed the picture
outlet to floor plan.

00:20:30.000 --> 00:20:33.250
And that outlet is still connected,
everything will still work

00:20:33.410 --> 00:20:34.440
properly for your code.

00:20:34.440 --> 00:20:37.040
Yeah.

00:20:40.500 --> 00:20:42.260
We think it's pretty neat too.

00:20:42.380 --> 00:20:43.630
But we're still not done.

00:20:43.700 --> 00:20:47.340
So if we go to the room.m file,

00:20:49.800 --> 00:20:50.380
Yep.

00:20:50.830 --> 00:20:54.900
You'll see that we are changing the
instance variable picture to floor plan,

00:20:54.960 --> 00:20:57.280
but we're also changing a couple
of other things in this file.

00:20:57.280 --> 00:20:59.740
We're also changing some method names.

00:20:59.780 --> 00:21:03.880
In this case,
the picture and set picture method names.

00:21:03.900 --> 00:21:05.380
So why are we doing that?

00:21:05.430 --> 00:21:09.480
We're doing that because we checked
that related KVC members checkbox.

00:21:09.480 --> 00:21:11.620
Now, KVC stands for key value coding.

00:21:11.620 --> 00:21:16.140
This is a way to refer to the data in
your class instead of directly by methods

00:21:16.140 --> 00:21:18.870
by using string-based keys and key paths.

00:21:19.360 --> 00:21:23.700
So how this works is there are
also methods that are related to

00:21:23.700 --> 00:21:26.160
those keys by various patterns.

00:21:26.160 --> 00:21:29.200
The patterns here are there's
a getter and setter pattern.

00:21:29.200 --> 00:21:31.800
And so, again, the getter is very simple.

00:21:31.800 --> 00:21:33.700
It's just picture,
and the setter is set picture.

00:21:33.700 --> 00:21:37.120
Now, there are plenty of other more
complicated patterns for methods

00:21:37.270 --> 00:21:38.970
related to particular key names.

00:21:38.970 --> 00:21:42.430
They especially come up
with too many relationships.

00:21:42.430 --> 00:21:45.130
We're not going to be
showing those today.

00:21:45.130 --> 00:21:48.920
But you can see that we have changed all
of the places in this particular file.

00:21:48.980 --> 00:21:52.640
particular file that
are related by a KPC.

00:21:52.880 --> 00:21:53.520
Right?

00:21:53.620 --> 00:21:56.070
So we can go ahead and
commit these changes,

00:21:56.110 --> 00:21:56.800
apply these changes as well.

00:21:56.800 --> 00:22:01.280
All right.

00:22:01.300 --> 00:22:03.300
So we can go back to the demo machine.

00:22:03.410 --> 00:22:05.270
Actually, the slide machine.

00:22:08.160 --> 00:22:09.620
All right.

00:22:09.750 --> 00:22:14.420
So the next set of transformations
I'll be going over today have

00:22:14.430 --> 00:22:16.000
to do with class hierarchy.

00:22:16.000 --> 00:22:19.320
So what we've been doing so far is
only changing individual classes.

00:22:19.320 --> 00:22:23.340
However, sometimes you also want to
change a series of classes,

00:22:23.340 --> 00:22:26.090
classes that are related by
class hierarchy or should be.

00:22:26.090 --> 00:22:31.220
And the classes that fit that bill in the
get a room application are the escalator,

00:22:31.260 --> 00:22:33.480
elevator, and stairs classes.

00:22:33.700 --> 00:22:38.160
Now, if we look at a snippet from a
class model that was generated

00:22:38.160 --> 00:22:41.560
by the get a room project,
we can see that, in fact,

00:22:41.560 --> 00:22:44.040
they all have exactly the same content.

00:22:44.040 --> 00:22:48.730
They all have a name, instance variable,
and they all have a duration in

00:22:48.730 --> 00:22:51.280
seconds from floor to floor method.

00:22:51.280 --> 00:22:54.280
Now, again,
this is all fine in your code.

00:22:54.390 --> 00:22:56.390
It will all work properly.

00:22:56.560 --> 00:23:00.590
However, when someone comes in
later to maintain the code,

00:23:00.590 --> 00:23:04.710
to fix bugs, or to add new features,
what they're going to find

00:23:04.800 --> 00:23:07.130
is if they want to add new
features to one of these classes,

00:23:07.190 --> 00:23:10.140
they have to add it to all three if they
want to make them all work the same way.

00:23:10.140 --> 00:23:13.060
And it's very easy for the
functionality of these classes

00:23:13.060 --> 00:23:16.040
to diverge slightly over time,
for bugs to be introduced in one

00:23:16.110 --> 00:23:17.470
place and not in another place.

00:23:17.470 --> 00:23:18.880
It can get to be a real mess.

00:23:18.880 --> 00:23:22.360
So the way you want to get around
that is to take all of the shared

00:23:22.360 --> 00:23:26.750
code from these three classes and
abstract it out to a single superclass.

00:23:26.750 --> 00:23:29.170
And that is what we're going
to do for you right now.

00:23:29.200 --> 00:23:30.720
So if we can go back to the demo machine.

00:23:30.720 --> 00:23:33.680
So at this point, we're going to be doing
a little bit of a demo.

00:23:33.750 --> 00:23:37.530
Let's go to the stairs class, stairs.h.

00:23:40.330 --> 00:23:42.220
Okay, and again,
we need to follow our steps.

00:23:42.280 --> 00:23:44.230
We're going to select the thing
that we wish to transform,

00:23:44.530 --> 00:23:47.270
in our case, the stairs class.

00:23:47.860 --> 00:23:50.700
and bring up the
refactoring window again.

00:23:50.700 --> 00:23:53.700
But in this case, we're not going to use
the Rename transformation.

00:23:53.700 --> 00:23:56.770
We're going to switch to another one,
which will be the

00:23:56.850 --> 00:23:59.700
CreateSuperclass transformation.

00:24:01.690 --> 00:24:04.210
Now again, as before, there's a kind of a
sentence going on here.

00:24:04.270 --> 00:24:08.840
Create superclass of stairs named a
new name that you have to type in.

00:24:08.880 --> 00:24:12.820
In our case,
we'll call that new class floor changer,

00:24:13.080 --> 00:24:13.780
I guess.

00:24:13.920 --> 00:24:15.750
That's not really a great name,
but it's all I can

00:24:15.750 --> 00:24:17.100
come up with right now.

00:24:17.180 --> 00:24:20.220
However, if I come up with a
really great name later,

00:24:20.340 --> 00:24:25.180
you can use the rename transformation
to rename it to that better name.

00:24:25.330 --> 00:24:27.900
So we can go ahead and
apply the changes here.

00:24:29.020 --> 00:24:31.680
So as you can see,
we've made changes to two files here.

00:24:31.680 --> 00:24:36.110
If we go to the .h file,
you can see that we have created

00:24:36.110 --> 00:24:40.700
a new decoration for the floor
changer class in the same file as

00:24:40.700 --> 00:24:42.070
the decoration of the stairs class.

00:24:42.080 --> 00:24:45.550
And if you go to the .m file,
you can see that we've created a new

00:24:45.760 --> 00:24:50.410
definition of the floor changer class in
the same file as the stairs definition.

00:24:51.420 --> 00:24:53.850
So, okay, we can go ahead and apply that.

00:24:53.880 --> 00:24:57.280
As you can see, right now,
the floor changer class is empty,

00:24:57.280 --> 00:24:58.990
and that's not what we want.

00:24:59.000 --> 00:25:02.290
So what we need to do now is
move up some of the content

00:25:02.290 --> 00:25:04.440
from stairs to floor changer.

00:25:04.440 --> 00:25:07.480
Now, actually,
the first thing we want to do

00:25:07.480 --> 00:25:09.650
here is a bit of housekeeping.

00:25:09.720 --> 00:25:13.880
So what we need to do is we actually need
to save these files before we continue.

00:25:13.880 --> 00:25:15.460
Now, why do we need to do that?

00:25:15.520 --> 00:25:19.700
This is because the refactoring
functionality in Xcode relies

00:25:19.700 --> 00:25:21.400
on the Xcode project instance.

00:25:21.420 --> 00:25:23.040
So we need to save the index
for some of its functionality.

00:25:23.040 --> 00:25:26.160
And currently,
the index requires that files be

00:25:26.160 --> 00:25:30.750
saved before their new contents are
re-indexed for us to know about.

00:25:30.780 --> 00:25:35.230
So this means that because
the floor changer is only

00:25:35.240 --> 00:25:38.560
in files which are unsaved,
that means the indexer

00:25:38.660 --> 00:25:40.430
doesn't know about it,
and we need the index to

00:25:40.510 --> 00:25:41.880
know about this new class.

00:25:41.880 --> 00:25:43.760
So we're going to go ahead
and save these files,

00:25:43.760 --> 00:25:44.980
and then we can continue.

00:25:51.470 --> 00:25:54.790
So now we're going to select
the name instance variable,

00:25:54.790 --> 00:25:57.730
and again,
bring up the refactoring window.

00:25:58.840 --> 00:26:04.170
And this time we're going to switch
to the move up transformation.

00:26:06.500 --> 00:26:07.970
Now, as you can see here, again,
there's a sentence,

00:26:08.060 --> 00:26:10.120
move up name to class for changer.

00:26:10.120 --> 00:26:12.710
But in this case,
we already know everything we need to

00:26:12.780 --> 00:26:14.850
know to make the transformation work.

00:26:14.850 --> 00:26:17.730
And that means that you don't have
to type anything new in yourself.

00:26:17.800 --> 00:26:19.840
All you need to do is
click that preview button,

00:26:19.840 --> 00:26:20.960
which we will do now.

00:26:23.260 --> 00:26:27.970
Now, one of the things you saw there very
briefly was that for just a second,

00:26:28.100 --> 00:26:30.920
there were a lot of
extra files in that list.

00:26:30.920 --> 00:26:35.570
And they were all system
header files for the most part.

00:26:35.690 --> 00:26:38.310
So what happens is,
when we come up with that initial list

00:26:38.310 --> 00:26:41.690
of files to look into to see if we
need to make changes to these files,

00:26:41.690 --> 00:26:44.340
what we're doing is we're
just very simply asking,

00:26:44.340 --> 00:26:46.510
who knows about something called name?

00:26:47.380 --> 00:26:49.640
And of course, name is a very common,
well, name.

00:26:49.640 --> 00:26:52.770
That means that there are a
lot of false positives there.

00:26:52.780 --> 00:26:58.250
But we know enough to disallow these
files very quickly from the results,

00:26:58.250 --> 00:27:00.830
and only narrow down to exactly
the files and the classes that

00:27:00.880 --> 00:27:02.260
we actually want to change.

00:27:02.260 --> 00:27:04.160
In this case, the stairs class.

00:27:04.160 --> 00:27:05.010
So here we go.

00:27:05.190 --> 00:27:06.650
We'll hit the header here.

00:27:06.700 --> 00:27:07.940
Okay.

00:27:07.940 --> 00:27:11.670
So here, as you can see...

00:27:19.760 --> 00:27:21.200
Okay, yeah, okay.

00:27:21.300 --> 00:27:21.950
All right, well, okay.

00:27:22.060 --> 00:27:24.460
So a little bit of a glitch there,
but as you can see,

00:27:24.580 --> 00:27:30.680
what happened was we moved up the name
declaration from stairs to floor changer.

00:27:30.680 --> 00:27:31.300
Very simple.

00:27:31.300 --> 00:27:34.000
So now we're going to do
that again with the method.

00:27:34.000 --> 00:27:37.440
But as you can see,
in the duration in seconds

00:27:37.440 --> 00:27:39.790
from floor to floor...

00:27:41.860 --> 00:27:46.710
Okay, so in this case, however,
we have a method name which is actually

00:27:46.710 --> 00:27:49.020
broken out over several parameter names.

00:27:49.030 --> 00:27:52.780
So we can't just select the entire
name in one contiguous selection.

00:27:52.780 --> 00:27:56.750
But all we really need to do here is
actually select a portion of the name,

00:27:56.850 --> 00:27:59.300
and as we bring up the
refactoring window,

00:27:59.300 --> 00:28:03.810
and switch to move up,

00:28:05.860 --> 00:28:09.000
You'll see that in fact we have the
entire name correctly listed there.

00:28:09.160 --> 00:28:11.760
We can operate on partial selections.

00:28:12.090 --> 00:28:13.800
That can be very useful to you.

00:28:13.800 --> 00:28:15.780
So, we're all set.

00:28:15.850 --> 00:28:17.890
We can hit the preview
button here as well.

00:28:19.000 --> 00:28:22.250
Now, if you look at these files again,
in the .h file and the .m file,

00:28:22.460 --> 00:28:26.080
you can see that, again,
we've moved things up from stairs

00:28:26.530 --> 00:28:28.380
to the four changer clouds.

00:28:28.460 --> 00:28:30.990
If we actually look at the .m file,

00:28:33.570 --> 00:28:36.550
Here it actually looks,
here the method is long enough that

00:28:36.600 --> 00:28:39.530
actually the diffing engine that
we're using treats that as something

00:28:39.530 --> 00:28:42.120
that's pinned and everything else
as something that's moved around.

00:28:42.120 --> 00:28:45.040
But it still is all,
all the changes have been made correctly,

00:28:45.110 --> 00:28:47.230
so we can go ahead and
apply these changes.

00:28:52.460 --> 00:28:56.360
So that is, oh actually,
so we've done some of

00:28:56.360 --> 00:28:57.160
the work here for you.

00:28:57.950 --> 00:28:59.990
However, the transformations
can't do all of the work.

00:28:59.990 --> 00:29:06.050
In fact, you still need to either delete
or merge in yourself all of the

00:29:06.200 --> 00:29:09.440
methods from the other classes,
escalator and elevator.

00:29:09.440 --> 00:29:12.980
And you also need to, by hand,
connect those classes up

00:29:13.070 --> 00:29:15.980
to their new superclass,
4changer.

00:29:15.980 --> 00:29:19.550
So we can't do everything for you here,
but we can automate some of the work,

00:29:19.550 --> 00:29:21.940
which again should make
your life a lot easier.

00:29:22.400 --> 00:29:25.610
Okay, so go back to the swipe machine.

00:29:28.650 --> 00:29:33.760
So we're going to go to
the third transformation,

00:29:33.800 --> 00:29:35.220
which is encapsulate.

00:29:35.360 --> 00:29:38.340
Now what we've seen so far is that
we've been working on the classes

00:29:38.790 --> 00:29:40.000
of the Getter Room application.

00:29:40.000 --> 00:29:43.130
But there are some places in
this code where you decided when

00:29:43.130 --> 00:29:45.860
you were writing the code that
it didn't need a full class.

00:29:45.860 --> 00:29:49.260
Some of this logic was simple enough
that all you really needed was a very

00:29:49.260 --> 00:29:51.920
simple structure to make that work,
a C structure.

00:29:51.920 --> 00:29:55.800
One of these places was
the TransitInfo structure.

00:29:55.800 --> 00:30:00.140
Now what this structure does is it's a
place to add up all of the information

00:30:00.140 --> 00:30:04.270
from the individual steps of the transit,
of the progress you need to make

00:30:04.270 --> 00:30:07.380
to get from one place to another,
so that you can have it all

00:30:07.380 --> 00:30:09.810
aggregated together somewhere.

00:30:10.710 --> 00:30:13.290
So, but what has happened then,
again in version 2,

00:30:13.290 --> 00:30:14.960
in version 1 this was fine.

00:30:14.960 --> 00:30:17.680
In version 2,
what you found is that you need to do

00:30:17.680 --> 00:30:19.740
more complex logic with this structure.

00:30:19.740 --> 00:30:22.700
You may need to calculate a
variety of different routes

00:30:22.700 --> 00:30:25.930
according to certain criteria,
like I want to be able to get

00:30:25.930 --> 00:30:28.490
the most exercise from my trip,
so I want to go by the

00:30:28.490 --> 00:30:29.670
stairs as much as possible.

00:30:29.680 --> 00:30:32.720
Or I want a wheelchair accessible route,
which would use only the elevator.

00:30:32.720 --> 00:30:35.560
So a simple structure
is no longer required.

00:30:36.290 --> 00:30:41.400
However, if you need to add all of this
custom logic to your application

00:30:41.930 --> 00:30:44.390
everywhere where these structured
fields are accessed directly,

00:30:44.460 --> 00:30:45.740
that's going to be a nightmare.

00:30:45.900 --> 00:30:50.090
So what you really need to do is
abstract out that logic into one place,

00:30:50.100 --> 00:30:52.780
where then you can make these extra
changes that you want to make.

00:30:53.200 --> 00:30:56.440
So, we're going to show you
how to do that right now.

00:30:56.500 --> 00:30:59.300
So again, one more time,
back to the demo machine.

00:31:01.430 --> 00:31:07.260
Okay, so if we go to the
transitinfo.h header file,

00:31:07.290 --> 00:31:10.290
we can see the decoration
of our structure.

00:31:10.540 --> 00:31:14.610
Now, unfortunately,
in this preview version of Xcode,

00:31:14.660 --> 00:31:19.260
we can't initiate a transformation from
this particular header file because of a

00:31:19.260 --> 00:31:24.180
glitch that has to do with if structures
are only referred to by a .m file.

00:31:24.280 --> 00:31:25.760
So we can't do that right now.

00:31:25.970 --> 00:31:30.170
But what we can do is we can go to
one of the usages of the structure and

00:31:30.170 --> 00:31:32.360
initiate the transformation from there.

00:31:32.460 --> 00:31:37.450
So we'll go to the
conference-center.m file.

00:31:37.540 --> 00:31:39.640
And if you go to the very bottom--

00:31:41.860 --> 00:31:46.430
We can see that the duration in
seconds field is being used here.

00:31:46.630 --> 00:31:48.500
Now, it's being used in two ways.

00:31:48.560 --> 00:31:51.370
We are setting its value,
and then we are also getting

00:31:51.370 --> 00:31:53.850
its value in order to calculate
the new value to set it to.

00:31:53.860 --> 00:31:57.860
So, let's get started with
the transformation.

00:31:57.960 --> 00:32:00.810
We select duration in seconds,
bring up the refactoring window,

00:32:00.840 --> 00:32:06.690
and switch to the
encapsulate transformation.

00:32:09.050 --> 00:32:12.730
and here the sentence is:
"Encapsulate duration in seconds,

00:32:12.730 --> 00:32:13.830
setter and getter."

00:32:16.210 --> 00:32:18.760
So in this case,
because we're dealing with

00:32:18.760 --> 00:32:23.200
C structures instead of with instance
variables in an Objective-C class,

00:32:23.360 --> 00:32:25.670
since there's no class,
we can't actually make methods here.

00:32:25.750 --> 00:32:28.560
So what we're actually going to
do is we're going to make C global

00:32:28.560 --> 00:32:32.200
functions for the setter and getters.

00:32:32.240 --> 00:32:35.650
So if we go ahead and preview this--

00:32:49.610 --> 00:32:51.030
OK, and we look at the .m file here.

00:32:51.100 --> 00:32:58.100
OK, this is a bit of a glitch here,
but we can look at the

00:32:58.820 --> 00:33:00.680
comparison area at first.

00:33:00.720 --> 00:33:04.930
So as you can see,
the places where we're setting the

00:33:04.930 --> 00:33:09.820
value of the field have been replaced
by an invocation of the setter function,

00:33:09.820 --> 00:33:12.710
and the places where we're getting
the value have been replaced by

00:33:12.770 --> 00:33:15.340
invocations of the getter function.

00:33:15.450 --> 00:33:18.650
We've also added the--

00:33:19.300 --> 00:33:34.700
[Transcript missing]

00:33:38.060 --> 00:33:40.010
Quit Xcode and Try Again.

00:33:40.010 --> 00:33:43.970
So that may happen sometimes
in your own usage of the

00:33:43.970 --> 00:33:45.740
refactoring feature in Xcode.

00:33:46.000 --> 00:33:48.170
If this happens,
just close the project and

00:33:48.170 --> 00:33:50.180
reopen it and try again,
and it should work then.

00:34:02.080 --> 00:34:03.500
Okay, there you can see the changes.

00:34:03.500 --> 00:34:07.560
If we go to the .h file,
you can very quickly see

00:34:07.560 --> 00:34:08.600
the function decoration.

00:34:08.600 --> 00:34:11.540
Everything looks good,
so we're going to apply those changes.

00:34:11.540 --> 00:34:13.990
Great.

00:34:14.060 --> 00:34:15.600
So back to the slide machine.

00:34:19.310 --> 00:34:21.060
Okay?

00:34:21.130 --> 00:34:23.810
So the fourth set of transformations
I'm going to show you today

00:34:24.170 --> 00:34:26.780
have to do with Objective-C 2.0.

00:34:26.870 --> 00:34:30.820
And the two things that we can do for
you are to modernize your loops and to

00:34:30.820 --> 00:34:34.010
convert to using properties in your code.

00:34:35.100 --> 00:34:37.050
So for modernizing loops,
as you can see from

00:34:37.050 --> 00:34:39.320
the code snippet here,
we do two things.

00:34:39.390 --> 00:34:44.910
We erase all of the working
variables that are no longer needed.

00:34:45.010 --> 00:34:49.160
And we also changed the loop
statement to use the for-in syntax.

00:34:49.220 --> 00:34:53.550
Now, that for-in syntax can be optimized
a little better by the compiler,

00:34:53.680 --> 00:34:56.640
so you get faster code,
and you also get more streamlined code,

00:34:56.640 --> 00:35:00.100
because we've taken out a
bit of extra work there.

00:35:00.360 --> 00:35:04.930
So one thing to note about what we do
here for you is we will only change

00:35:04.930 --> 00:35:10.050
loops which have to do with iterating
over an NSSet or an NSMutableSet or

00:35:10.050 --> 00:35:11.720
an NSArray or an NSMutableArray.

00:35:11.720 --> 00:35:15.730
We will only convert things
which go a very straightforward

00:35:15.730 --> 00:35:17.840
way through the array or set.

00:35:17.860 --> 00:35:21.630
If you go backwards, if you do any other
sort of special logic,

00:35:21.630 --> 00:35:24.230
what we do is we play it safe,
because we want to have that

00:35:24.230 --> 00:35:26.560
guarantee that we are not going to
change the meaning of your code.

00:35:26.560 --> 00:35:29.260
So if we see anything we can't do,
we just leave it alone.

00:35:29.950 --> 00:35:33.960
But for the ones which are safe,
we go ahead and translate this for you.

00:35:34.530 --> 00:35:37.690
So for using properties,
what we do is we add a property

00:35:37.700 --> 00:35:43.410
decoration to your classes that refers to
existing instance variables in the class.

00:35:43.500 --> 00:35:47.490
Here we're adding a
decoration for myString.

00:35:48.140 --> 00:35:50.980
And so these are very neat
features in Objective-C 2.0.

00:35:51.030 --> 00:35:53.000
We're not going to have time
to explain them here today,

00:35:53.070 --> 00:35:54.940
but go ahead and look
at the documentation on

00:35:54.940 --> 00:35:59.960
Objective-C 2.0 yourselves,
and you'll find out cool it is.

00:36:00.040 --> 00:36:02.370
So now we're going to demo this.

00:36:03.690 --> 00:36:08.300
Now, there is a transformation for
changing one loop at a time.

00:36:08.390 --> 00:36:11.870
And like the other transformations,
it involves you selecting something

00:36:11.870 --> 00:36:13.360
and bringing up the window.

00:36:13.430 --> 00:36:17.300
But for these particular conversions,
there's also another way to

00:36:17.300 --> 00:36:18.620
get going for your project.

00:36:18.780 --> 00:36:22.710
And that is by looking at the
Edit menu and selecting the Convert

00:36:22.710 --> 00:36:25.160
to Objective-C 2.0 menu item.

00:36:27.560 --> 00:36:29.390
Now, why is this a separate menu item?

00:36:29.520 --> 00:36:31.830
This is separate because,
unlike the other times when you

00:36:31.830 --> 00:36:35.100
need a valid selection to get going,
this is project-wide.

00:36:35.100 --> 00:36:38.850
As long as your project is open,
as long as you're not indexing,

00:36:38.850 --> 00:36:40.400
this will be active.

00:36:40.480 --> 00:36:44.380
So we can see in this window
that there are the two checkboxes

00:36:44.460 --> 00:36:45.650
for the two possibilities.

00:36:45.780 --> 00:36:50.020
We're going to go ahead and check both
of those and get going with the preview.

00:36:52.000 --> 00:36:55.620
Now, why is the UseProperties
checkbox not checked by default?

00:36:55.620 --> 00:36:59.240
This is because UseProperties is
a bit more experimental than the

00:36:59.620 --> 00:37:01.790
Modernize Loops functionality.

00:37:01.800 --> 00:37:05.680
There may be times when you apply this
to your code where there are some places,

00:37:05.680 --> 00:37:08.040
unfortunately,
where the additions that we're

00:37:08.040 --> 00:37:10.100
putting into your code don't compile.

00:37:10.100 --> 00:37:13.260
So you'll need to take those
back out manually yourself,

00:37:13.280 --> 00:37:14.720
and then you'll be okay.

00:37:14.720 --> 00:37:19.470
But we figured that the times where
the additions are correct certainly

00:37:19.590 --> 00:37:21.940
outnumber the times where they aren't,
so we think we're still

00:37:21.940 --> 00:37:23.040
saving you some effort there.

00:37:23.040 --> 00:37:25.530
But again, just so you know,
it's a bit more experimental.

00:37:25.540 --> 00:37:29.800
So as you can see the results here,
you can go to conferencecenter.m,

00:37:29.800 --> 00:37:30.640
the very first file.

00:37:32.810 --> 00:37:37.500
And you'll see that the first change
that we made is to modernize a group.

00:37:37.580 --> 00:37:39.090
In this case,
we've actually modernized a group

00:37:39.160 --> 00:37:42.100
which is using the NSEnumerator class.

00:37:43.380 --> 00:37:48.110
So now if we go to the second file,
you'll see that in this file,

00:37:48.110 --> 00:37:49.890
we've added a property.

00:37:50.130 --> 00:37:52.700
And in this case,
this property decoration is also

00:37:52.700 --> 00:37:54.770
referring to a getter method as well.

00:37:54.770 --> 00:37:57.470
Again,
there's a lot of neat functionality here,

00:37:57.490 --> 00:38:00.000
so I urge you to look
at the documentation.

00:38:00.000 --> 00:38:04.760
Alright, so that looks good,
so we're going to apply

00:38:04.760 --> 00:38:06.910
these changes as well.

00:38:07.150 --> 00:38:08.580
And we're done.

00:38:08.580 --> 00:38:10.380
Go back to slides.

00:38:10.380 --> 00:38:13.290
Go back to the slide machine.

00:38:17.200 --> 00:38:22.000
So, in this very brief amount of time,
I made a lot of changes to this project.

00:38:22.000 --> 00:38:24.600
What happens if I say,
after I've done all these changes,

00:38:24.600 --> 00:38:27.390
"Oh no, I screwed up.

00:38:27.500 --> 00:38:28.810
I shouldn't have made all these changes.

00:38:28.830 --> 00:38:31.710
Maybe we're shipping tomorrow,
maybe we're going in an

00:38:31.710 --> 00:38:33.200
entirely different direction.

00:38:33.200 --> 00:38:37.480
I need to get my code back to the place
that it was in before I started." Now,

00:38:37.530 --> 00:38:39.850
if I had made changes
to individual files,

00:38:39.980 --> 00:38:41.030
that would be fine.

00:38:41.030 --> 00:38:44.200
I'd just hit Command-Z and
I would undo those changes.

00:38:44.200 --> 00:38:46.200
But once you get into
large-scale changes,

00:38:46.420 --> 00:38:49.200
hundreds of files even,
that becomes a lot harder.

00:38:49.200 --> 00:38:51.970
You need to go to each file and
hit Command-Z for each one of them.

00:38:52.190 --> 00:38:55.160
And of course, for nibs,
you don't even have that possibility,

00:38:55.240 --> 00:38:59.200
because when we make changes
to nib files in refactoring,

00:38:59.200 --> 00:39:00.200
there's no undo stack.

00:39:00.200 --> 00:39:02.160
We're changing the nib
files directly on disk.

00:39:02.160 --> 00:39:04.100
So you can't undo them.

00:39:04.200 --> 00:39:07.150
So Xcode can now make
these mass changes for you.

00:39:07.270 --> 00:39:10.200
We need a way to roll those changes back.

00:39:10.240 --> 00:39:15.240
And the way that we allow you to do
that is a feature that was already

00:39:15.240 --> 00:39:18.200
announced this week on Monday:
snapshots.

00:39:18.200 --> 00:39:21.130
Now,
snapshots are not just for refactoring.

00:39:21.260 --> 00:39:24.300
They're for any time when you're
making large-scale changes or

00:39:24.300 --> 00:39:29.000
checkpointing certain places in your
code before you go and do something new.

00:39:29.210 --> 00:39:32.400
and SnapShots are project-wide,
unlike the stacks for

00:39:32.400 --> 00:39:34.660
individual text files.

00:39:34.820 --> 00:39:39.800
And unlike Undo, which happens sort of in
the background silently,

00:39:39.850 --> 00:39:41.700
without you needing to do
anything or see anything,

00:39:41.700 --> 00:39:46.730
we have UI to let you see what snapshots
you've taken and what they look like.

00:39:46.810 --> 00:39:49.480
So I'm going to show
that to you right now.

00:39:52.620 --> 00:39:57.300
So one of the things that I pointed out
before was how there was this snapshot

00:39:57.300 --> 00:39:59.670
checkbox in the UI for refactoring.

00:39:59.750 --> 00:40:01.500
And we checked that,
and we checked that for all of

00:40:01.500 --> 00:40:03.420
the refactorings that we did.

00:40:03.540 --> 00:40:06.750
So what that means is we have now
taken a snapshot for each point

00:40:06.830 --> 00:40:08.780
where we did a transformation.

00:40:08.900 --> 00:40:11.920
So we can have a look at that by
bringing up the Snapshots window,

00:40:11.920 --> 00:40:15.060
which is available under the Edit menu.

00:40:19.240 --> 00:40:22.280
So as you can see,
there are now snapshots with names

00:40:22.330 --> 00:40:24.600
which should look familiar to you.

00:40:25.060 --> 00:40:28.260
Before Rename Conference Center,
Before Move Up,

00:40:28.260 --> 00:40:31.240
we've given them these default names,
which should be very easy for

00:40:31.240 --> 00:40:32.550
you to spot what's going on.

00:40:32.580 --> 00:40:37.790
So now, if we have a look at the very
first snapshot that we took...

00:40:40.090 --> 00:40:43.220
You will see that we list all of the
files that are different in the snapshot

00:40:43.580 --> 00:40:45.800
from the current state of your project.

00:40:45.890 --> 00:40:46.580
So we can have a look.

00:40:46.740 --> 00:40:49.340
Let's say, look at the room.h file.

00:40:52.310 --> 00:40:56.730
So this file now has the aggregate of
all the changes we've made to it in all

00:40:56.730 --> 00:40:58.960
of the refactorings we've done so far.

00:40:58.970 --> 00:41:02.020
We have changed the picture
instance variable to floor plan,

00:41:02.040 --> 00:41:05.630
and we've also added
a property decoration.

00:41:05.730 --> 00:41:07.560
So OK, so this looks good.

00:41:07.600 --> 00:41:11.560
So let's restore to this snapshot.

00:41:13.550 --> 00:41:15.360
Now, as you can see,
there's that little progress

00:41:15.700 --> 00:41:16.900
dialogue that shows up.

00:41:16.900 --> 00:41:20.200
And that dialogue showed up every
time we did a transformation as well.

00:41:20.460 --> 00:41:24.120
And that dialogue shows that
we are taking a snapshot.

00:41:24.390 --> 00:41:26.480
We're just restoring a snapshot,
so what's going on?

00:41:26.610 --> 00:41:29.270
In fact,
we actually take a new snapshot every

00:41:29.310 --> 00:41:31.220
time you restore from an old snapshot.

00:41:31.220 --> 00:41:33.440
So it's actually a
little hard to describe.

00:41:33.440 --> 00:41:36.040
But in any case,
what we do is we make it easier for you,

00:41:36.250 --> 00:41:40.020
every time you do something large-scale,
to go back to the way it was before.

00:41:40.020 --> 00:41:45.440
And what we're trying to do here is to
make your coding a bit more fearless.

00:41:45.440 --> 00:41:48.460
You can make large-scale changes,
they're going to be more safe than ever,

00:41:48.460 --> 00:41:51.570
and you know that you can always fall
back to what we were doing before.

00:41:51.570 --> 00:41:53.330
So go back to the slides, please.

00:41:56.710 --> 00:41:59.640
And so that's it for the demos
that I'm going to show you today.

00:41:59.660 --> 00:42:02.660
Now I will pass it back over to Robert,
where he will talk about

00:42:02.660 --> 00:42:04.420
hints for using refactoring.

00:42:04.460 --> 00:42:05.910
Thank you.

00:42:12.100 --> 00:42:13.300
Thank you.

00:42:13.310 --> 00:42:14.630
Okay.

00:42:14.720 --> 00:42:17.090
So at this point,
you have seen or you have

00:42:17.100 --> 00:42:19.170
heard what refactoring is,
which most of you

00:42:19.170 --> 00:42:20.200
actually knew what it was.

00:42:20.200 --> 00:42:21.640
I was very impressed.

00:42:21.750 --> 00:42:24.260
You've also seen how
refactoring looks in Xcode,

00:42:24.260 --> 00:42:26.100
and you've seen how you would use it.

00:42:26.120 --> 00:42:31.590
What I'd like to do now is tell you
a little about what issues you may

00:42:31.600 --> 00:42:35.650
encounter as you are actually using this,
some of the things to keep in mind,

00:42:35.650 --> 00:42:35.650
some of the things to be aware of,
and so on.

00:42:36.010 --> 00:42:40.310
Now, before that,
one of the things that hopefully

00:42:40.310 --> 00:42:42.200
all of you were thinking about
as you saw this example is,

00:42:42.220 --> 00:42:44.730
that was nice, but that seemed like a
relatively small example.

00:42:44.740 --> 00:42:47.180
I wonder how it works on
my 250,000 lines of code.

00:42:47.180 --> 00:42:50.610
Actually, how many people asked that?

00:42:52.080 --> 00:42:52.830
Oh, I won't bring it up.

00:42:52.920 --> 00:42:57.210
One of the fun things
with refactoring is that,

00:42:57.260 --> 00:42:58.640
you know, you're actually doing
things like parsing code,

00:42:58.640 --> 00:42:59.480
and so it takes a while.

00:42:59.480 --> 00:43:02.690
And so one of the big issues is,
how is this going to work?

00:43:02.720 --> 00:43:04.290
I want to be able to use this on my code.

00:43:04.300 --> 00:43:07.100
I've got a project with, you know,
100,000 lines of code,

00:43:07.100 --> 00:43:08.400
250,000 lines of code.

00:43:08.400 --> 00:43:09.350
Can I actually use it?

00:43:09.440 --> 00:43:10.540
And the answer is yes.

00:43:10.540 --> 00:43:13.200
In general,
the amount of time it takes to do a

00:43:13.200 --> 00:43:16.520
refactoring will be proportional to the
number of files that we need to parse.

00:43:16.520 --> 00:43:20.460
So the kind of times I see on
typical machines in my office

00:43:20.460 --> 00:43:23.460
is to parse a single file,
it usually takes about 10 seconds.

00:43:23.460 --> 00:43:25.050
Now, you may be saying,
why does it take 10

00:43:25.070 --> 00:43:25.900
seconds to parse a file?

00:43:25.900 --> 00:43:28.580
But the reason is that when
you parse that first file,

00:43:28.580 --> 00:43:30.260
that's when we actually
parse the system headers.

00:43:30.260 --> 00:43:33.930
And so when you're including
Cocoa slash Cocoa.h,

00:43:33.940 --> 00:43:36.660
that means you're including 100,000
lines of headers at that point.

00:43:36.660 --> 00:43:40.170
And that 10 seconds is from the
point where you start bringing

00:43:40.170 --> 00:43:42.900
up the refactoring menu,
not when you hit the preview button.

00:43:42.900 --> 00:43:47.910
If you have about 36...
In about 26... In 20 seconds,

00:43:47.910 --> 00:43:49.320
we can parse about 36 files.

00:43:49.320 --> 00:43:51.280
In about a minute,
we can parse 100 files.

00:43:51.280 --> 00:43:53.970
And so that should give you an idea
of how long refactoring might take.

00:43:53.980 --> 00:43:57.270
Now, this doesn't mean that if
your project is 100 files,

00:43:57.280 --> 00:43:58.280
it's always going to take a minute.

00:43:58.280 --> 00:44:00.750
We only parse the files
that we think are necessary.

00:44:00.760 --> 00:44:03.770
As Andrew mentioned,
what we do is we actually look

00:44:03.790 --> 00:44:06.320
at the names that are used in
a given file to find out which

00:44:06.350 --> 00:44:07.760
files might be interesting.

00:44:07.760 --> 00:44:09.700
And we only parse those particular files.

00:44:13.410 --> 00:44:15.580
Now, a second thing that you did
not see in the example-- well,

00:44:15.830 --> 00:44:18.120
actually,
you did if you were very careful

00:44:18.290 --> 00:44:22.540
about spotting things-- was the idea
of what happens when you have errors.

00:44:22.710 --> 00:44:25.640
All of the transformations we
did didn't have any errors,

00:44:25.640 --> 00:44:27.850
but what happens when that does happen?

00:44:27.960 --> 00:44:30.590
Now, errors are really important,
because part of the reason why

00:44:30.590 --> 00:44:33.740
you're going through all this work
of doing refactoring is because

00:44:33.740 --> 00:44:36.870
you want the tools to tell you,
hey, that's not a really good idea.

00:44:36.970 --> 00:44:38.890
You don't want to do that.

00:44:39.320 --> 00:44:43.120
And so what the refactoring
feature of Xcode will do

00:44:43.120 --> 00:44:45.410
depends on how bad the error is.

00:44:45.490 --> 00:44:48.100
So, for example, if it's a problem where
we just simply say,

00:44:48.100 --> 00:44:49.000
we can't do this.

00:44:49.000 --> 00:44:52.670
For example, you're making changes where
we're going to have to make a

00:44:52.670 --> 00:44:55.040
lot of changes inside macros,
or, for example,

00:44:55.040 --> 00:44:57.690
on a rename like this one here,
you're trying to rename a

00:44:57.690 --> 00:45:00.510
class called SKT Graphic and
convert it to SKT Graphic View,

00:45:00.600 --> 00:45:02.000
which already exists.

00:45:02.000 --> 00:45:03.890
We need to tell you, no,
we can't do this.

00:45:04.060 --> 00:45:06.170
And so what you'll see is
you'll have a dialog box,

00:45:06.170 --> 00:45:08.280
a sheet come down,
and it will actually say, no,

00:45:08.380 --> 00:45:09.800
we can't do it for this reason.

00:45:13.180 --> 00:45:15.560
Now there's also errors that only
occur on certain points where

00:45:15.620 --> 00:45:18.880
we can do the transformation,
but there's a certain number

00:45:18.880 --> 00:45:20.250
of places where we can't.

00:45:20.260 --> 00:45:23.410
So this example here is
from doing an encapsulate.

00:45:23.430 --> 00:45:27.350
So we were trying to hide a
particular field of structure,

00:45:27.460 --> 00:45:30.700
the left call structure on the left.

00:45:30.700 --> 00:45:34.520
And what happens is that
if you look really closely,

00:45:34.520 --> 00:45:39.140
that field isn't being read or written,
it's being incremented.

00:45:40.280 --> 00:45:42.560
And we can't do an
increment with just a get.

00:45:42.760 --> 00:45:44.720
We can't do it with
just a setter function.

00:45:44.820 --> 00:45:47.190
And so we have to say, hey,
you need to look at this.

00:45:47.280 --> 00:45:48.620
We're not sure what to do.

00:45:48.740 --> 00:45:51.470
And so you as the programmer,
when you get one of these, can decide,

00:45:51.470 --> 00:45:54.620
OK, do I want to make a third function
that wraps this variable that's

00:45:54.620 --> 00:45:56.200
going to be an increment function?

00:45:56.290 --> 00:45:58.330
Do I want to get the
value and then set it?

00:45:58.420 --> 00:46:01.180
Or do I just want to give up on this
transformation because I realize this is

00:46:01.180 --> 00:46:03.120
a little more complex than I imagined?

00:46:03.180 --> 00:46:05.430
These are the two types of errors
you're going to see and the two

00:46:05.430 --> 00:46:08.100
ways that you can recover from them.

00:46:13.470 --> 00:46:16.280
And now a couple practical
tips that Andrew brought up.

00:46:16.280 --> 00:46:18.500
Now,
one of the things to keep in mind is that

00:46:18.500 --> 00:46:20.600
refactoring changes your source code.

00:46:20.600 --> 00:46:22.520
It changes a lot of your source code.

00:46:22.520 --> 00:46:24.800
It can change all the
files in your project.

00:46:24.800 --> 00:46:27.350
And because your source
code is your work product,

00:46:27.450 --> 00:46:31.040
because it is the thing of value,
you want to be really careful with it.

00:46:31.040 --> 00:46:33.980
We can make insane amounts of
changes to your source code,

00:46:33.980 --> 00:46:37.100
and you may find out after
you've done several refactorings,

00:46:37.100 --> 00:46:40.880
either that the direction that the
refactorings are going isn't correct,

00:46:40.880 --> 00:46:43.360
or that you're not doing the right thing.

00:46:43.480 --> 00:46:45.810
Or that perhaps you're not going
to be able to do the transformation

00:46:45.810 --> 00:46:48.240
you want because the last one
can't actually be done correctly,

00:46:48.330 --> 00:46:50.940
or you realize at the end, no,
that's not what I really wanted to do.

00:46:50.940 --> 00:46:53.010
You need to be able to save
your source code so that you

00:46:53.010 --> 00:46:55.150
can back off in those cases,
because that does happen

00:46:55.150 --> 00:46:56.270
in real refactoring.

00:46:58.040 --> 00:47:00.150
And so in those cases,
you need to make sure you're either

00:47:00.150 --> 00:47:02.990
saving the files off on the side,
you're using the snapshot feature,

00:47:03.000 --> 00:47:05.390
you're using a source
code control system.

00:47:05.530 --> 00:47:07.830
Whatever it is, please make sure to
save your source code.

00:47:07.880 --> 00:47:13.480
We don't want to have changed your source
code in ways that you don't want anymore.

00:47:15.160 --> 00:47:19.110
Another thing to keep in mind is
that part of the fun of refactoring,

00:47:19.110 --> 00:47:21.020
part of the thing that makes it so hard,
is that we actually have

00:47:21.040 --> 00:47:22.000
to parse your source code.

00:47:22.000 --> 00:47:25.000
We have to act like a compiler
to be able to understand it.

00:47:25.000 --> 00:47:29.500
And that's how refactoring is able to
do the precise changes it needs to do.

00:47:29.500 --> 00:47:32.910
And as a result,
if your code doesn't parse,

00:47:32.960 --> 00:47:37.150
if it's not syntactically valid code,
we aren't going to be able to

00:47:37.150 --> 00:47:38.500
do the analysis that we want.

00:47:38.530 --> 00:47:39.410
Now, we don't restrict you.

00:47:39.520 --> 00:47:42.450
We don't say, "Hey,
you've got some warnings in your code.

00:47:42.450 --> 00:47:44.500
We're not going to let you refactor."

00:47:45.140 --> 00:47:48.680
But we're going to let you
actually do the refactorings.

00:47:48.720 --> 00:47:50.780
But if your code doesn't parse,
we may not make all the

00:47:50.840 --> 00:47:52.080
changes that are appropriate.

00:47:52.210 --> 00:47:56.510
So if you know that your program is in an
incomplete state and you do refactorings,

00:47:56.510 --> 00:47:58.800
be a little more careful about
checking to make sure the

00:47:58.800 --> 00:48:00.350
changes are what were intended.

00:48:00.440 --> 00:48:02.950
For example,
you might have cases where changes after

00:48:02.950 --> 00:48:05.000
a syntax error don't actually get made.

00:48:08.650 --> 00:48:10.640
Okay,
now this is also the first time that

00:48:10.750 --> 00:48:13.380
we've shipped refactoring with Xcode.

00:48:13.380 --> 00:48:17.800
So in the, in Leopard Preview, it's,
it's our first version.

00:48:17.800 --> 00:48:19.320
There's going to be some
issues to keep in mind.

00:48:19.330 --> 00:48:22.780
One of the caveats that you should
keep in mind is that this only works

00:48:22.780 --> 00:48:24.690
for C and Objective-C right now.

00:48:25.500 --> 00:48:27.850
So as long as you're,
so you can refactor to your heart's

00:48:27.850 --> 00:48:31.110
delight in code that's completely C,
Objective-C.

00:48:31.210 --> 00:48:34.500
If you have Objective-C++
or C++ in your code,

00:48:34.500 --> 00:48:38.610
that means that you can't start
refactoring from those files.

00:48:39.680 --> 00:48:42.280
Now, you can actually have a case
where you've got a class that's

00:48:42.280 --> 00:48:45.510
defined in an Objective-C file or
in an Objective-C header that's

00:48:45.510 --> 00:48:47.160
used in the Objective-C++ files.

00:48:47.160 --> 00:48:49.070
You can start a refactoring like that.

00:48:49.070 --> 00:48:51.440
We're not going to tell you
where those changes are.

00:48:51.440 --> 00:48:53.570
You're going to actually have,
if there's changes in

00:48:53.570 --> 00:48:55.720
the Objective-C++ files,
you're going to have to search

00:48:55.840 --> 00:48:59.050
them on your own using the good
old-fashioned approaches of text search.

00:48:59.060 --> 00:49:02.260
And hopefully that will remind you of
what life was like before refactoring.

00:49:05.850 --> 00:49:07.580
But that's how it is.

00:49:07.710 --> 00:49:11.600
Another thing to keep in mind is
that many people try to move to

00:49:11.600 --> 00:49:15.870
Objective-C++ or try to work with C++
by turning all their Objective-C files

00:49:15.880 --> 00:49:18.900
into Objective-C++ files,
into .mm files.

00:49:18.900 --> 00:49:21.100
And if they do this,
it has the advantage that you don't have

00:49:21.100 --> 00:49:23.850
to worry about when you're including
C++ headers and when you're not.

00:49:23.860 --> 00:49:26.410
If you're doing that,
you might actually need to back off a

00:49:26.430 --> 00:49:29.330
little and convert some of your files
back to being straight Objective-C and

00:49:29.330 --> 00:49:34.590
only including C and Objective-C headers,
so that you can actually refactor those.

00:49:37.520 --> 00:49:38.840
Now,
one of the things that makes C such an

00:49:38.840 --> 00:49:42.400
interesting language is we've got this
cool thing called the C preprocessor.

00:49:42.400 --> 00:49:46.010
And the C preprocessor is fun because
it's this own little language,

00:49:46.010 --> 00:49:48.400
and it has the ability to do
arbitrary text substitution,

00:49:48.400 --> 00:49:50.400
it allows you to do
conditional compilation,

00:49:50.400 --> 00:49:52.360
it allows you to do really clever things.

00:49:52.410 --> 00:49:55.690
And unfortunately,
it makes life absolutely miserable for

00:49:55.690 --> 00:49:58.190
anybody who's doing source code analysis.

00:49:59.700 --> 00:50:04.060
So for this first version of refactoring,
the way that we're going to handle the

00:50:04.060 --> 00:50:09.000
preprocessor is that we are only going to
handle the current build configuration.

00:50:09.030 --> 00:50:11.990
That is, you're building development
or you're building deployment.

00:50:12.140 --> 00:50:15.770
Whatever would compile as part of
that build configuration is what

00:50:15.850 --> 00:50:17.890
code we are willing to change.

00:50:18.040 --> 00:50:20.990
You can find your build configuration
either from the project menu or

00:50:20.990 --> 00:50:25.810
in the figure you can see on the
screen here up in your toolbar.

00:50:26.060 --> 00:50:27.650
So for example,
with the code you see here,

00:50:27.660 --> 00:50:30.540
we have a variable
called dailyRentalRate.

00:50:30.540 --> 00:50:32.730
And if you decide to rename that,
we're certainly going to

00:50:32.730 --> 00:50:35.640
change the occurrence on the
first line and the last line.

00:50:35.790 --> 00:50:40.380
However, that occurrence in the middle is
used inside of a if-deft code,

00:50:40.380 --> 00:50:43.160
inside conditional code,
where we only compile that

00:50:43.160 --> 00:50:44.600
if the debug macro is set.

00:50:44.710 --> 00:50:46.920
The only time we're going to
change that occurrence that's in

00:50:47.210 --> 00:50:49.750
yellow is if the debug macro was
set in the build configuration

00:50:49.790 --> 00:50:51.240
that you're currently using.

00:50:51.310 --> 00:50:52.540
So make sure that when
you do refactoring,

00:50:52.540 --> 00:50:54.930
you're using the build configuration
that's it's going to include the

00:50:54.950 --> 00:50:57.290
code that you most want to refactor.

00:51:00.910 --> 00:51:03.430
Another caveat to keep in mind
is that we're currently only

00:51:03.430 --> 00:51:05.140
going to work on single projects.

00:51:05.140 --> 00:51:07.510
So for example,
if you have your application

00:51:07.580 --> 00:51:11.040
broken into multiple projects,
you have one for your frameworks

00:51:11.040 --> 00:51:13.840
and one for your applications,
we are only going to change

00:51:13.850 --> 00:51:15.560
things in one project.

00:51:15.560 --> 00:51:20.120
So for example, in this case here,
if you want to rename the class foo,

00:51:20.120 --> 00:51:20.120
you're

00:51:22.450 --> 00:51:25.700
We're certainly going to change the two
occurrences in the My Framework class,

00:51:25.700 --> 00:51:27.140
if that's where you're
doing the refactoring from.

00:51:27.140 --> 00:51:29.430
However,
we're not necessarily going to change

00:51:29.430 --> 00:51:31.340
the occurrence in the MyApp project.

00:51:33.210 --> 00:51:35.690
So if you want to change
the stuff in other projects,

00:51:35.740 --> 00:51:38.630
then you either need to go and
do that by hand using regular

00:51:38.630 --> 00:51:40.700
text search and replace.

00:51:40.700 --> 00:51:43.120
Another thing you can try is
doing this with refactoring.

00:51:43.350 --> 00:51:46.630
Now, we do have a little restriction
on the transformations right now.

00:51:46.670 --> 00:51:51.380
In general, we try not to allow you to do
refactorings if you're changing something

00:51:51.380 --> 00:51:54.350
where you don't own the declaration,
where it's not defined

00:51:54.350 --> 00:51:55.260
in your current project.

00:51:55.260 --> 00:51:58.180
So for example,
we don't let you rename NSArray because

00:51:58.180 --> 00:52:00.590
we can't change foundation.

00:52:01.270 --> 00:52:04.610
And so for the example of Foo,
if you tried to rename Foo

00:52:04.610 --> 00:52:07.800
in the MyApp project here,
we wouldn't actually let you change it,

00:52:07.940 --> 00:52:09.520
because we'd say, hey,
we don't know what Foo is,

00:52:09.520 --> 00:52:11.680
we don't know where it is,
we can't change the name.

00:52:11.780 --> 00:52:14.550
If you run into this case,
one workaround that you can do is you

00:52:14.550 --> 00:52:18.710
can actually create a temporary dummy
definition somewhere in that project,

00:52:18.800 --> 00:52:22.310
rename it,
then pull out the dummy definition.

00:52:25.580 --> 00:52:33.880
Now, a couple other minor issues
you should keep in mind.

00:52:34.670 --> 00:52:37.640
We don't allow you to actually
rename-- if you decide to

00:52:37.640 --> 00:52:41.380
rename-- let's start again.

00:52:41.830 --> 00:52:45.090
Many Objective-C programmers like
the idea to make sure that the

00:52:45.110 --> 00:52:48.080
name of the file that a class is
defined in matches the class name.

00:52:48.080 --> 00:52:50.090
If you're one of those people,
then you're going to find

00:52:50.090 --> 00:52:52.010
that when you rename a class,
we don't necessarily

00:52:52.010 --> 00:52:52.990
rename the file name yet.

00:52:53.020 --> 00:52:54.740
So that's something to keep in mind.

00:52:54.740 --> 00:52:56.720
Another thing to keep in mind is
that we don't rename comments.

00:52:56.800 --> 00:52:58.560
So if you change the
name of a declaration,

00:52:58.610 --> 00:53:01.230
you're going to have to go through,
and if there's places in your

00:53:01.230 --> 00:53:03.300
comments where you want the
name to be changed as well,

00:53:03.300 --> 00:53:04.510
go through and do those by hand.

00:53:05.400 --> 00:53:08.960
And finally, for this first version,
we're not allowing you to do things

00:53:08.960 --> 00:53:12.270
like rename macros or protocols
or categories or properties.

00:53:19.180 --> 00:53:22.280
So what you've heard now is you've
understood what refactoring is,

00:53:22.420 --> 00:53:24.000
you've seen how we do
refactoring in Xcode,

00:53:24.000 --> 00:53:27.640
and you've heard some of the details
about how to make refactoring work for

00:53:27.640 --> 00:53:30.350
your own programs when you're doing it.

00:53:30.620 --> 00:53:34.080
As you've heard,
refactoring is a way to make global,

00:53:34.230 --> 00:53:38.090
structured,
controlled changes to your program.

00:53:38.160 --> 00:53:42.050
And refactoring makes sure that the code
should compile the same before as after,

00:53:42.070 --> 00:53:43.480
and it should have the
same output behavior.

00:53:43.480 --> 00:53:46.230
It should run the same before as after.

00:53:46.530 --> 00:53:49.540
And the refactoring feature allows
you to have a better time doing

00:53:49.540 --> 00:53:52.960
maintenance and enhancement style
changes to your source code.

00:53:53.360 --> 00:53:54.600
This is the first version.

00:53:54.640 --> 00:53:56.360
We hope to continue improving it.

00:53:56.410 --> 00:53:58.820
We also hope that this will be a
base for other tools in Xcode that

00:53:58.820 --> 00:54:00.240
manipulate source code or do analysis.

00:54:00.240 --> 00:54:03.290
We're looking forward to
hearing what you think of this.

00:54:03.390 --> 00:54:06.640
We're looking forward to hearing what
you like about the refactoring feature,

00:54:06.640 --> 00:54:08.360
what you don't like about
the refactoring feature,

00:54:08.360 --> 00:54:09.360
what you'd like us to do.

00:54:09.360 --> 00:54:10.210
Please file bugs.

00:54:10.210 --> 00:54:11.260
Please send feedback.

00:54:11.260 --> 00:54:12.590
We would love to hear about it.

00:54:12.640 --> 00:54:14.400
And we hope you enjoy the feature.

00:54:14.400 --> 00:54:17.860
With that, I'd like to bring Matt Formica
on to close the session.