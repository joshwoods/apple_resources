WEBVTT

00:00:10.460 --> 00:00:14.400
Welcome to Beyond Buttons and Sliders:
Complex Controls in Cocoa.

00:00:14.400 --> 00:00:19.550
My name's Corbin Dunn.

00:00:19.580 --> 00:00:21.890
I work in AppKit at Apple.

00:00:21.900 --> 00:00:23.400
I'm a software engineer.

00:00:23.400 --> 00:00:28.400
And this is a hands-on talk,
but unfortunately the sample code

00:00:28.400 --> 00:00:29.400
isn't available to download yet.

00:00:29.400 --> 00:00:31.400
There's been a little snafu with it.

00:00:31.550 --> 00:00:34.450
This is a great talk,
and you can follow along with

00:00:34.550 --> 00:00:35.400
me and you'll check it out.

00:00:35.400 --> 00:00:39.400
We'll get the sample code out for you,
and you can come to the lab.

00:00:39.400 --> 00:00:41.400
They made a typo there.

00:00:41.400 --> 00:00:43.260
I should say AppKit, not Apple Lab.

00:00:43.400 --> 00:00:45.400
A little bit too much of
a spell checking going on.

00:00:45.400 --> 00:00:48.380
But tomorrow at 2 o'clock,
come to the lab.

00:00:48.400 --> 00:00:50.400
You can find me or any
of our other developers.

00:00:50.400 --> 00:00:52.350
We can get you the source
if you don't have it.

00:00:52.400 --> 00:00:55.400
Keep going to the session
120 page and hitting reload.

00:00:55.400 --> 00:00:58.400
And eventually, hopefully,
it'll appear up there.

00:00:59.700 --> 00:01:02.030
Okay, complex controls in Cocoa.

00:01:02.180 --> 00:01:03.380
So what does that mean?

00:01:03.510 --> 00:01:06.410
What I'm going to talk about
is how to create a custom cell.

00:01:06.520 --> 00:01:10.190
And I'm going to go over four
basic operations with the cell.

00:01:11.300 --> 00:01:14.620
I'm sorry about this.

00:01:14.650 --> 00:01:19.600
I'm going to talk about custom drawing,
custom tracking in the cell,

00:01:19.760 --> 00:01:22.520
custom hit testing,
which is something new on

00:01:22.520 --> 00:01:26.650
Leopard that you need to do,
and custom editing of a cell.

00:01:26.980 --> 00:01:30.210
In addition, what's a complex cell
without a complex control?

00:01:30.210 --> 00:01:33.080
So I'm going to take the complex
control in this outline view,

00:01:33.190 --> 00:01:35.920
subclass it,
and we're going to add some cool

00:01:35.990 --> 00:01:37.900
rollover highlighting to it.

00:01:37.980 --> 00:01:40.170
In addition,
we have a cool new control in

00:01:40.170 --> 00:01:43.900
Leopard called Innis Rule Editor and
Innis Predicate Editor.

00:01:43.960 --> 00:01:47.470
And we're going to go over how
to create custom searches using

00:01:47.470 --> 00:01:52.810
Innis Predicate Editor and give
an overview of Innis Rule Editor.

00:01:52.900 --> 00:01:58.030
So let's just dump right into this source
code and start taking a look at the demo.

00:01:58.300 --> 00:02:00.570
Let's go to demo.

00:02:02.680 --> 00:02:05.270
This is the photo search sample
which you will eventually have.

00:02:05.310 --> 00:02:12.300
I'm going to go ahead and do a build,
a debug, or sorry, build,

00:02:12.350 --> 00:02:14.120
build and go breakpoints off.

00:02:14.200 --> 00:02:17.200
And this is going to run the app,
and I'm going to show you what it is.

00:02:17.420 --> 00:02:19.680
So what we see here

00:02:19.700 --> 00:02:22.050
I'm going to go ahead
and hide everything else.

00:02:22.350 --> 00:02:25.300
This is our photo search
sample application.

00:02:25.300 --> 00:02:27.860
What you see at the top is this
new Innes rule editor control,

00:02:27.860 --> 00:02:29.320
which we're going to talk about.

00:02:29.460 --> 00:02:32.720
It's also Innes predicate
editor as a subclass of it.

00:02:32.720 --> 00:02:34.050
I'm going to go ahead and do a search.

00:02:34.160 --> 00:02:37.610
I'm going to search for Corbin,
just because I like that name.

00:02:37.740 --> 00:02:41.860
And what you see in here are search
results inside of an outline view.

00:02:42.010 --> 00:02:44.200
The outline view is using
some new leopard features.

00:02:44.200 --> 00:02:48.660
It's got this group row look and
kind of a spotlight-like look

00:02:48.660 --> 00:02:51.540
and spans across all the columns.

00:02:51.540 --> 00:02:54.650
We have a custom cell here,
which we're going to

00:02:54.650 --> 00:02:55.880
talk about how to create.

00:02:56.050 --> 00:02:59.480
Custom cell is an image, some title,
a little subtitle.

00:02:59.620 --> 00:03:03.040
This outline view has
rollover highlighting.

00:03:03.040 --> 00:03:06.540
It's going to be easy to go ahead and
add this rollover highlighting with

00:03:06.540 --> 00:03:08.420
a custom subclass of outline view.

00:03:08.420 --> 00:03:10.420
I'm going to show you how to do that.

00:03:10.420 --> 00:03:11.860
You can double click on things.

00:03:11.860 --> 00:03:15.860
And it will go ahead and open
up that image in preview.

00:03:15.980 --> 00:03:18.350
If you hit the little eye
when you roll over it,

00:03:18.350 --> 00:03:21.840
it's going to do a
finder info thing on it.

00:03:23.810 --> 00:03:29.230
We're going to discuss this rule editor,
how it creates these new rules and rows.

00:03:29.570 --> 00:03:32.300
In addition,
some other things that you see in here.

00:03:32.310 --> 00:03:36.160
At the bottom, we have a new, in Leopard,
NSPathControl.

00:03:36.340 --> 00:03:38.500
I'm not going to talk about it,
but you can just take a look at it and

00:03:38.500 --> 00:03:41.080
see that source code and how to use it.

00:03:41.090 --> 00:03:45.660
Another thing is you may
have seen the ability to add

00:03:45.950 --> 00:03:47.520
any type of view to a menu.

00:03:47.520 --> 00:03:50.000
And in here,
you can just put about a game,

00:03:50.000 --> 00:03:53.240
a Quartz Composer window,
anything in a menu there.

00:03:53.240 --> 00:03:56.340
We aren't going to discuss it,
but you'll have the source

00:03:56.340 --> 00:03:58.670
code to see how to do it.

00:03:58.830 --> 00:04:01.490
All right, let's go back to slides.

00:04:05.250 --> 00:04:09.140
So this cell,
there's a class called ImagePreviewCell,

00:04:09.180 --> 00:04:12.660
and inside the cell we're going to
take this nice big rectangle and

00:04:12.660 --> 00:04:15.030
just break it up into smaller pieces.

00:04:15.180 --> 00:04:17.820
That image there,
we're going to override the

00:04:17.870 --> 00:04:21.670
standard NSL method called
ImageRecForBounds and return that

00:04:21.670 --> 00:04:23.540
custom location for our image.

00:04:23.860 --> 00:04:27.580
Another NSL method that's already
there is TitleRecForBounds.

00:04:27.620 --> 00:04:31.440
We're going to override that to
return just that little title location

00:04:31.440 --> 00:04:33.480
that we want to draw the title out.

00:04:33.810 --> 00:04:35.790
We want to add some extra
things to this cell,

00:04:35.800 --> 00:04:38.880
so we'll have another method
called Subtitle Rect for Bounds,

00:04:38.880 --> 00:04:41.700
which will return just the subtitle area.

00:04:41.840 --> 00:04:45.240
Finally, that cool little info button
where you mouse over and it does

00:04:45.240 --> 00:04:48.500
the rolling highlight thing,
we'll have another method called

00:04:48.500 --> 00:04:52.690
Info Button for Bounds that returns
that rect for the info button.

00:04:52.700 --> 00:04:55.480
All this code is in the
imagepreviewcell.in file,

00:04:55.540 --> 00:04:58.700
which hopefully you'll take
a look at after the session.

00:04:58.700 --> 00:04:59.670
Why are we going to do this?

00:04:59.670 --> 00:05:03.250
It's going to make drawing really easy,
because we know all the

00:05:03.250 --> 00:05:04.700
locations to draw at.

00:05:05.330 --> 00:05:08.430
Hit testing is going to be
very easy because we have

00:05:08.430 --> 00:05:10.310
all the portions broken up.

00:05:10.310 --> 00:05:13.500
Editing is going to be easy because
we know we want to edit just that

00:05:13.500 --> 00:05:16.200
little title area and nothing else.

00:05:16.200 --> 00:05:18.200
Tracking is going to be easy.

00:05:18.200 --> 00:05:21.890
So when you hit that little iInfo button,
it's going to act like

00:05:21.900 --> 00:05:25.200
a button and track,
and only in that portion.

00:05:25.200 --> 00:05:30.730
Let's go back over to the demo
and dive into some of this code.

00:05:36.500 --> 00:05:39.180
All right, inside of Xcode,
if you are following along and

00:05:39.180 --> 00:05:42.040
maybe one of the three people
who have the source code,

00:05:42.150 --> 00:05:49.340
you can open up the Photo Search demo
app and you can expand the classes.

00:05:49.340 --> 00:05:52.330
And in here there's a
custom cells and controls,

00:05:52.500 --> 00:05:54.620
and there's ImagePreviewCell.m.

00:05:54.660 --> 00:05:57.740
If you are following along,
hopefully you have it open.

00:05:57.900 --> 00:06:02.110
And I'm going to go ahead and
collapse the big Apple header because

00:06:02.110 --> 00:06:05.050
I really don't want to look at it.

00:06:05.390 --> 00:06:08.220
And up here at the start of the file,
we see a bunch of defines.

00:06:08.420 --> 00:06:11.440
These turn on individual
features in this file.

00:06:11.540 --> 00:06:15.270
So I'm going to go ahead and
turn these off by making it

00:06:15.270 --> 00:06:17.660
pound hit define hit test zero.

00:06:17.660 --> 00:06:21.450
And it's going to just turn
off a bunch of features.

00:06:21.450 --> 00:06:25.300
And we're going to turn them
back on one at a time and see

00:06:25.300 --> 00:06:25.540
what they do and how they work.

00:06:26.730 --> 00:06:31.450
I'm going to hit Command F and
we're going to search for draw int.

00:06:31.460 --> 00:06:37.060
And if you're following along make sure
that ignore case is checked and hit next.

00:06:37.060 --> 00:06:42.050
And what that will do is it will take you
to the method draw interior with frame.

00:06:43.400 --> 00:06:46.400
At the start of this,
we see a bunch of code that

00:06:46.400 --> 00:06:49.700
determines if we should be highlighted
or not inside the table view.

00:06:49.720 --> 00:06:53.730
Take a look at that on your own and
you can figure out how to draw with

00:06:53.740 --> 00:06:55.700
the blue background and the white text.

00:06:55.700 --> 00:06:59.650
But below that, what we see,

00:07:00.880 --> 00:07:02.920
If I went a little too far.

00:07:02.920 --> 00:07:05.560
We have Image Rect for bounds.

00:07:05.600 --> 00:07:08.150
So we took that big
rectangle and broke it up,

00:07:08.150 --> 00:07:09.910
and that gives us that Image Rect.

00:07:09.980 --> 00:07:11.040
And then what are we going to do?

00:07:11.040 --> 00:07:14.690
We're going to take our Image IVAR and
just draw it in that Rect.

00:07:14.860 --> 00:07:18.100
So the advantage of breaking
that rectangle up into little

00:07:18.100 --> 00:07:20.090
pieces made drawing really easy.

00:07:20.270 --> 00:07:22.340
Below that we have Title Rect for bounds.

00:07:22.510 --> 00:07:26.460
So we took the Title Rect and
we're going to do the same thing:

00:07:26.460 --> 00:07:27.350
Draw in Rect.

00:07:27.440 --> 00:07:32.120
Below that,
we grab our attributed subtitle string.

00:07:32.120 --> 00:07:35.900
We grab the attribute subtitle rect.

00:07:35.900 --> 00:07:37.640
And what are we going to do?

00:07:37.640 --> 00:07:39.000
It's going to be another draw on rect.

00:07:39.000 --> 00:07:44.800
This is all very simple stuff
that you can do in Tiger today.

00:07:46.100 --> 00:07:51.800
[Transcript missing]

00:07:52.640 --> 00:07:55.490
a little click happy,
and finally at the bottom

00:07:55.670 --> 00:07:58.820
InfoRect button for bounds where
it grabs that little info button,

00:07:58.900 --> 00:08:00.880
and then all that is, is an image.

00:08:00.880 --> 00:08:03.540
It's not any fancy button or anything.

00:08:03.540 --> 00:08:08.160
And so we grab the info button image
and do a draw and rect of that,

00:08:08.160 --> 00:08:08.780
too.

00:08:08.780 --> 00:08:13.460
So let's take a look at this application
with all the drawing stuff enabled.

00:08:13.460 --> 00:08:17.020
So I'm going to go ahead
and do debug or build.

00:08:17.020 --> 00:08:19.720
Build and go breakpoints
off inside Xcode,

00:08:19.720 --> 00:08:23.400
and this will build the project
and quickly run it and launch it.

00:08:23.460 --> 00:08:27.410
I'm going to do a search for
Corbin again and hit enter.

00:08:27.810 --> 00:08:29.070
And so this did a search here.

00:08:29.160 --> 00:08:32.270
Now all the drawing is
happening and working correctly,

00:08:32.270 --> 00:08:34.610
but let's take a look at what happens
when we don't implement some of the

00:08:34.610 --> 00:08:37.300
other events and methods correctly.

00:08:37.410 --> 00:08:40.650
Like let's say I want to just single
click right there on that image.

00:08:40.830 --> 00:08:42.080
What's going to happen?

00:08:42.180 --> 00:08:45.760
So I single click on it,
and it starts an editing session.

00:08:45.880 --> 00:08:48.480
Now notice the editing
session is way too big,

00:08:48.490 --> 00:08:50.250
and that's not what we want.

00:08:50.360 --> 00:08:53.660
We also don't want to start the editing
session when you click on the title.

00:08:53.770 --> 00:08:55.500
And let me step back for a second.

00:08:55.620 --> 00:08:58.140
On Leopard,
we enhanced the in-as-table view.

00:08:58.430 --> 00:09:02.270
You no longer have to do a double click
to start editing a cell's contents.

00:09:02.410 --> 00:09:04.880
You can just single
click right on the title,

00:09:04.880 --> 00:09:08.400
just like in Finder,
and it'll start the editing session.

00:09:10.700 --> 00:09:12.480
See, what else is wrong with this?

00:09:12.560 --> 00:09:16.480
Well, when I roll over that eye,
it was doing that little highlight.

00:09:16.610 --> 00:09:18.310
That's not working anymore.

00:09:18.380 --> 00:09:21.270
And if I click the eye, well,
it should start the

00:09:21.270 --> 00:09:24.700
little Show Info thing,
but it's doing an editing session.

00:09:24.940 --> 00:09:27.540
So those are some problems
which we want to fix.

00:09:27.630 --> 00:09:30.090
So I'm going to go
ahead and quit that app.

00:09:30.400 --> 00:09:34.120
And right below that drawing method,
you will see this defined,

00:09:34.120 --> 00:09:36.790
which we turned off, #if hit test.

00:09:36.790 --> 00:09:39.050
I'm going to go ahead and turn
it back on by commenting it

00:09:39.050 --> 00:09:42.290
to be #if1 to enable the code.

00:09:42.400 --> 00:09:43.610
Hit test for event.

00:09:43.820 --> 00:09:45.440
What is this method?

00:09:45.540 --> 00:09:47.960
It's new in Leopard,
so let me go ahead and open up the

00:09:47.960 --> 00:09:50.390
header for NSL and take a look at it.

00:09:50.490 --> 00:09:53.200
If you are following along,
you don't have to do this.

00:09:53.280 --> 00:09:57.490
I'm just going to pop
up and open up NSL.h.

00:09:57.950 --> 00:10:00.860
and look for hit test in this file.

00:10:00.910 --> 00:10:04.690
So inside of NSL.h,
we have a new category

00:10:05.430 --> 00:10:07.500
for the hit test method.

00:10:07.590 --> 00:10:09.450
We have hit test for event.

00:10:09.650 --> 00:10:13.110
So we're passed in an event of
where the hit testing should happen.

00:10:13.160 --> 00:10:16.200
An event has a location in the window.

00:10:16.480 --> 00:10:19.440
It has a particular rect,
which is the cell frame that you're in,

00:10:19.440 --> 00:10:22.990
because in a table your
frame might be different.

00:10:23.250 --> 00:10:26.520
And it also has the control view
that happened in past to it.

00:10:26.730 --> 00:10:30.500
So what can you return for this,
and why is this important?

00:10:30.640 --> 00:10:34.140
Well,
above it are the things you can return.

00:10:34.310 --> 00:10:37.840
These things you can OR together
to return more than one result.

00:10:38.010 --> 00:10:40.450
So first thing,
if you didn't hit anything,

00:10:40.470 --> 00:10:42.380
you can just return NSCellHit: None.

00:10:42.510 --> 00:10:45.360
So you didn't hit any
content or nothing at all.

00:10:45.500 --> 00:10:51.560
If you hit a content area,
you'll return NSCellHit: Content Area.

00:10:51.710 --> 00:10:53.220
But that's not too interesting.

00:10:53.310 --> 00:10:57.400
Where it starts to get interesting is
when you want to begin editing text.

00:10:57.500 --> 00:11:01.270
So if you hit text,
you want to return NSCellHit:

00:11:01.270 --> 00:11:02.800
Editable Text Area.

00:11:02.800 --> 00:11:05.850
And that will start the editing session.

00:11:05.990 --> 00:11:09.480
In addition,
when we hit the little iInfo button,

00:11:09.480 --> 00:11:13.100
we want to be tracking right then,
because you want to do mouse tracking

00:11:13.100 --> 00:11:15.080
to make it actually work like a button.

00:11:15.170 --> 00:11:17.600
So for that little portion,
you want to return

00:11:17.600 --> 00:11:19.080
NSCellHitTrackableArea.

00:11:19.180 --> 00:11:23.130
And all these are keys to the table
view and outline view to do certain

00:11:23.130 --> 00:11:25.610
things with your complex cell.

00:11:25.720 --> 00:11:29.390
So I'm going to go ahead
and close that file,

00:11:29.390 --> 00:11:32.200
and let's take a look at that method.

00:11:33.640 --> 00:11:36.990
If I can find it again.

00:11:37.100 --> 00:11:39.960
So it's under the draw
interior with frame.

00:11:40.250 --> 00:11:42.080
We see the hit test for event.

00:11:42.270 --> 00:11:44.260
So what are we doing here?

00:11:44.380 --> 00:11:48.060
The first thing we do is we
take that event's location,

00:11:48.080 --> 00:11:51.140
and we want to convert into
coordinates that we know about.

00:11:51.180 --> 00:11:54.220
So I call convert point
from a view of nil.

00:11:54.220 --> 00:11:56.490
So it's converting from the
window's coordinates to our

00:11:56.490 --> 00:11:58.160
coordinates of the control view.

00:11:58.200 --> 00:12:01.680
And that gives us a point
that's in our coordinate system.

00:12:01.730 --> 00:12:04.840
Then again, we took that big rect,
and we broke it up into those

00:12:04.840 --> 00:12:09.160
small little pieces for the
purpose of hit testing and drawing.

00:12:09.460 --> 00:12:14.300
So we can just do a NSMouse in rect
to see if that points in our rect.

00:12:14.320 --> 00:12:17.740
And if it is in the title rect, well,
that's a content area.

00:12:17.850 --> 00:12:23.740
And we're going to go ahead and or
that with the hit editable text area.

00:12:23.790 --> 00:12:25.960
So that way,
it'll start an editing session when

00:12:26.020 --> 00:12:28.750
you click on that and only that area.

00:12:28.860 --> 00:12:31.580
The image rect, well,
we grab that image rect.

00:12:31.600 --> 00:12:32.960
And that's just a content area.

00:12:32.960 --> 00:12:34.860
It won't be anything fancy.

00:12:34.880 --> 00:12:38.180
Below that,
we grab the attribute subtitle,

00:12:38.250 --> 00:12:43.140
grab the rect for it,
and then again do a mouse in rect.

00:12:43.150 --> 00:12:45.140
Return that to content area.

00:12:45.160 --> 00:12:46.620
Simple enough.

00:12:46.980 --> 00:12:49.680
But what about that little info button?

00:12:49.730 --> 00:12:53.930
We grab the info button rect,
do a mouse in rect.

00:12:53.960 --> 00:12:55.200
It's also a content area.

00:12:55.440 --> 00:12:59.360
But more importantly,
it's a cell hit trackable area.

00:12:59.380 --> 00:13:01.440
So when you click on
that little info button,

00:13:01.500 --> 00:13:03.820
it's going to tell the cell
that it needs to start tracking.

00:13:03.840 --> 00:13:06.350
And so the table view will call
you back and start a tracking

00:13:06.350 --> 00:13:07.490
in the side of the cell.

00:13:07.740 --> 00:13:10.100
And then the default's
going to be NSL hit none,

00:13:10.100 --> 00:13:12.100
meaning you didn't hit anything else.

00:13:12.100 --> 00:13:14.480
So I'm going to go ahead
and save this file.

00:13:14.490 --> 00:13:18.820
And I'm going to do build and go
breakpoints off to compile that

00:13:18.820 --> 00:13:21.240
with that hit test for event method.

00:13:21.260 --> 00:13:23.210
And let's see how well that works.

00:13:23.280 --> 00:13:25.400
So I do another search.

00:13:25.470 --> 00:13:29.320
And now before,
if I single clicked on that image,

00:13:29.320 --> 00:13:31.380
it started an editing session.

00:13:31.380 --> 00:13:33.720
So I'm going to go ahead and quit that.

00:13:33.720 --> 00:13:35.880
And I'm going to go ahead and
do a single click on that.

00:13:35.950 --> 00:13:37.600
And it's not doing an editing session.

00:13:37.660 --> 00:13:39.760
So that's working like we want to.

00:13:39.940 --> 00:13:43.940
Now if I single click on the title,
it starts an editing session.

00:13:44.000 --> 00:13:45.420
That's excellent.

00:13:45.500 --> 00:13:46.820
It's still too big.

00:13:46.940 --> 00:13:49.260
We'll fix that next.

00:13:49.260 --> 00:13:50.750
And then what about the info button?

00:13:50.840 --> 00:13:53.180
Well,
the rollover highlight isn't working yet.

00:13:53.190 --> 00:13:57.260
But if I click on the single eye,
it should start tracking.

00:13:57.260 --> 00:14:01.280
We didn't implement tracking code yet,
so it's not doing anything.

00:14:01.280 --> 00:14:02.590
that.

00:14:03.010 --> 00:14:08.800
Now below that, we see another method,
another defined #ifeditframe.

00:14:08.830 --> 00:14:12.020
I'm going to turn this
back on by making it #if1.

00:14:12.020 --> 00:14:15.910
And if you happen to be following along,
hopefully everyone has this change

00:14:16.030 --> 00:14:20.370
to being #if1 and commenting
out the edit frame portion.

00:14:21.000 --> 00:14:26.610
Edit with Frame, In View, Editor,
Delegate, Event is a method that's

00:14:26.650 --> 00:14:30.980
been around for a while,
and it lets you begin an editing session.

00:14:31.000 --> 00:14:34.960
So what we're going to do is we
only want to edit the title rect.

00:14:35.090 --> 00:14:36.960
So again,
we take that big broken up cell,

00:14:37.000 --> 00:14:41.170
grab that title rect,
and we slightly tweak it to

00:14:41.170 --> 00:14:43.000
kind of make it look nicer.

00:14:43.000 --> 00:14:47.000
And this was just something that
was done by experimentation.

00:14:47.000 --> 00:14:49.920
And then we call a super edit with
frame passing in that title rect.

00:14:50.000 --> 00:14:53.170
So what this will do,
it'll force the editing session

00:14:53.190 --> 00:14:56.730
just to be that smaller title
rect portion and nothing else.

00:14:57.000 --> 00:15:03.250
Now below that is select with frame,
which is implemented exactly

00:15:03.250 --> 00:15:06.570
like edit with frame,
calling the super,

00:15:06.640 --> 00:15:09.000
passing in the title rect.

00:15:09.000 --> 00:15:11.000
Now why do we have to
implement both of these?

00:15:11.160 --> 00:15:13.150
Well, in this table view and
in this outline view,

00:15:13.150 --> 00:15:17.480
we'll call select with frame
or edit with frame depending

00:15:17.550 --> 00:15:19.000
on what type of cell you are.

00:15:19.000 --> 00:15:22.560
So if you are an in this text
field cell or a subclass thereof,

00:15:22.690 --> 00:15:26.000
like what this cell is,
then it will call select with frame.

00:15:26.150 --> 00:15:29.840
And what's that telling you to do is
it'll start the editing session and

00:15:29.960 --> 00:15:32.000
it'll select the text all at once.

00:15:32.000 --> 00:15:36.000
So you have to implement both
to make it work properly.

00:15:36.000 --> 00:15:40.000
So I'm going to go ahead and do build,
build and go breakpoints off,

00:15:40.000 --> 00:15:44.000
and we'll take a look and see what
happens when we properly implement that.

00:15:44.000 --> 00:15:48.000
So I search for Corbin
or something again.

00:15:48.000 --> 00:15:49.850
So what this application
is actually doing,

00:15:49.880 --> 00:15:53.270
I forgot to mention that,
it's using Spotlight and it's generating

00:15:53.350 --> 00:15:57.380
a Spotlight query search to do a
search for images only on my system.

00:15:57.770 --> 00:16:02.640
So now, if I single click right
on the title there,

00:16:02.650 --> 00:16:05.870
it begins an editing session
and it's editing exactly

00:16:05.960 --> 00:16:07.690
the portion we want to edit.

00:16:07.760 --> 00:16:09.280
Super.

00:16:13.800 --> 00:16:21.790
Get practical guidance on how to
extend Cocoa to your own custom cells,

00:16:21.790 --> 00:16:21.790
and how to customize menus
in a variety of ways.

00:16:22.640 --> 00:16:26.740
The first method is a class method:
prefers tracking until mouse up.

00:16:26.810 --> 00:16:32.450
So if your cell wants to track when
you mouse down up until you mouse up,

00:16:32.540 --> 00:16:35.600
you need to return yes
from this class method.

00:16:35.690 --> 00:16:37.530
If you don't,
you're going to have problems,

00:16:37.660 --> 00:16:39.580
which I can mention to you later offline.

00:16:39.620 --> 00:16:40.490
Feel free to find me in the lab.

00:16:40.590 --> 00:16:43.600
But the bottom line is if you
track mouse until it's up,

00:16:43.600 --> 00:16:44.590
return yes from this method.

00:16:44.600 --> 00:16:47.600
By default, in this cell, return is no.

00:16:47.600 --> 00:16:50.120
So if you don't override this,
you may have some subtle

00:16:50.120 --> 00:16:51.570
bugs in your cell subclass.

00:16:53.220 --> 00:16:55.220
Now for tracking,
there are several points that

00:16:55.220 --> 00:16:56.480
you can override tracking.

00:16:56.650 --> 00:16:59.940
We're going to override it on
the highest level inside of NSL.

00:17:00.080 --> 00:17:06.040
We're going to override track mouse,
in-rect, of view, until mouse up.

00:17:06.140 --> 00:17:09.620
So this is called by the
table view or outline view,

00:17:09.740 --> 00:17:12.230
or even a regular control,
when you should begin

00:17:12.230 --> 00:17:14.090
tracking inside of your cell.

00:17:14.540 --> 00:17:17.120
And what are we going to do in this?

00:17:17.170 --> 00:17:20.740
Well, we only want to track
in that Info Button.

00:17:20.740 --> 00:17:24.590
So we go and grab the Info
Button Rack for the bounds,

00:17:24.660 --> 00:17:27.550
and we're going to do a big while loop.

00:17:28.410 --> 00:17:29.920
And what are we going to loop for?

00:17:30.020 --> 00:17:34.060
Well, we're going to do a while loop
until we get the mouse up.

00:17:34.060 --> 00:17:37.700
So we're looking for the event
that is in this left mouse up.

00:17:38.060 --> 00:17:41.230
Now this is a very simple
event tracking mechanism.

00:17:41.310 --> 00:17:46.060
It does the same taking of the point,
converting it to our local coordinates

00:17:46.060 --> 00:17:48.120
for the cell and the control.

00:17:48.120 --> 00:17:51.880
It does an NSMouse and REC to find if
that point that you're in right then

00:17:51.880 --> 00:17:54.220
with the mouse is in that info button.

00:17:54.220 --> 00:17:57.890
And if it is,
it sets this internal IVAR called

00:17:57.890 --> 00:18:00.460
Mouse Down In Info Button.

00:18:00.460 --> 00:18:03.510
And it calls a control view
to re-display in that cell.

00:18:03.520 --> 00:18:06.840
So what this is going to do is it's
going to make that little eye go from

00:18:06.840 --> 00:18:12.300
the normal looking to the down press
look by telling the IVAR used to draw

00:18:12.320 --> 00:18:14.510
that image to draw with a darker image.

00:18:16.030 --> 00:18:21.490
Then it also checks for a mouse entered
and mouse exited events and uses

00:18:21.490 --> 00:18:27.000
NSApp SendEvent to dispatch out some
extra events that we want to process.

00:18:27.200 --> 00:18:30.110
Finally,
the key to the whole event loop portion,

00:18:30.110 --> 00:18:34.120
tracking portion,
is grabbing the Controls window and

00:18:34.120 --> 00:18:38.490
doing Next Event Matching Mask for the,
well, we want to know if the

00:18:38.510 --> 00:18:41.900
left mouse has been up,
the left mouse has been dragged,

00:18:42.030 --> 00:18:45.650
or a mouse was entered or
exited from our little racks,

00:18:45.660 --> 00:18:48.210
which I'll talk about in a bit too.

00:18:49.150 --> 00:18:51.500
So what do we do at the end of this?

00:18:51.560 --> 00:18:54.370
Well, if that mouse was down
in the Info button,

00:18:54.630 --> 00:18:58.760
we want to send a special action
out to do some special event.

00:18:58.850 --> 00:19:01.010
In this particular app's case,
it opens up that little

00:19:01.300 --> 00:19:02.770
info window in Finder.

00:19:02.940 --> 00:19:05.780
So if the mouse was down,
we reset the flag,

00:19:05.830 --> 00:19:11.750
and then we call NSApp send action to
send an internally set action for it.

00:19:11.980 --> 00:19:16.290
Key portion from TrackMouse is
what you have to return from this,

00:19:16.300 --> 00:19:17.040
yes or no.

00:19:17.190 --> 00:19:19.760
It's kind of confusing if
you don't know at first.

00:19:19.850 --> 00:19:22.860
And from TrackMouse,
you have to return yes if

00:19:22.900 --> 00:19:24.840
you process the mouse up.

00:19:24.900 --> 00:19:28.070
If you don't return yes,
you will have more subtle bugs

00:19:28.230 --> 00:19:31.910
where the table view or outline
view will think that it should still

00:19:31.910 --> 00:19:34.060
track because you didn't return yes.

00:19:34.120 --> 00:19:36.920
Normally it will stop
when you return yes.

00:19:37.110 --> 00:19:38.760
All right,
so let's go ahead and take a look

00:19:38.760 --> 00:19:43.550
at this by doing another build,
build and go breakpoints off,

00:19:43.550 --> 00:19:47.630
and see it working and see if that
info button can then be clicked on.

00:19:47.680 --> 00:19:50.090
So I'm going to do another search.

00:19:51.190 --> 00:19:54.420
So I clicked the little iInfo button,
and it tracked,

00:19:54.510 --> 00:19:59.430
and it went and sent the action,
and showed the little info window.

00:19:59.470 --> 00:20:01.030
All right, super.

00:20:01.160 --> 00:20:03.640
So let's go back to slides.

00:20:07.240 --> 00:20:09.970
So a quick review of what
we just talked about.

00:20:10.050 --> 00:20:12.000
By taking that big wreck
and breaking it up,

00:20:12.000 --> 00:20:14.000
it made drawing to be really easy.

00:20:14.320 --> 00:20:19.670
Hit testing was really easy,
editing was easy, and tracking was easy.

00:20:20.070 --> 00:20:26.140
Now, something else new to Leopard:
Tracking Areas, which are on NSView.

00:20:26.140 --> 00:20:29.500
NSView has a new method
called UpdateTrackingAreas

00:20:29.530 --> 00:20:31.440
to add an NSTrackingArea.

00:20:31.440 --> 00:20:36.160
NSTrackingAreas,
they are basically the replacement

00:20:36.160 --> 00:20:40.820
for TrackingRex on Leopard,
and they're a lot easier to use.

00:20:41.100 --> 00:20:44.730
So here's a snippet of some of
the code from Leopard for NSView.

00:20:44.840 --> 00:20:47.140
And what you see here is
you see Add Tracking Area,

00:20:47.140 --> 00:20:48.990
where it's going to
add an NSTrackingArea,

00:20:49.290 --> 00:20:52.730
Remove Tracking Area,
and a Tracking Areas array.

00:20:52.840 --> 00:20:56.180
So this is an array of all the
tracking areas inside the view.

00:20:56.250 --> 00:20:58.960
In addition,
there's Update Tracking Areas.

00:20:59.030 --> 00:21:02.550
The only method that you will probably
override here is Update Tracking Areas.

00:21:02.690 --> 00:21:05.380
Before, you'd have to know when
your reqs were moved,

00:21:05.470 --> 00:21:08.920
if you should add,
if you should re-add the tracking reqs,

00:21:08.920 --> 00:21:10.150
if your frame moved.

00:21:10.150 --> 00:21:13.240
It was really a little bit difficult
inside of Tiger to figure out when

00:21:13.240 --> 00:21:14.970
to do this and to do it correctly.

00:21:15.090 --> 00:21:19.260
Now you have one override point to do it,
and it makes it very easy.

00:21:19.430 --> 00:21:22.910
So this is in NSView.h.

00:21:23.640 --> 00:21:26.500
In this tracking area is
this new class to Leopard,

00:21:26.500 --> 00:21:28.500
so let's take a look at it.

00:21:28.500 --> 00:21:31.000
Here's a snippet from its header.

00:21:31.030 --> 00:21:34.470
What you see here is the initializer,
init with rect,

00:21:34.610 --> 00:21:38.290
so you pass in a little tracking area
rect that you want to be tracking,

00:21:38.430 --> 00:21:41.590
some options,
which I'll discuss in a minute, an owner,

00:21:41.590 --> 00:21:45.490
so the owner is the person who's
going to get the actual events

00:21:45.490 --> 00:21:49.190
that happen for your tracking area,
and a user info dictionary to

00:21:49.190 --> 00:21:53.160
pass in some state information
that you want to keep track of.

00:21:53.700 --> 00:21:55.820
So what options are we going to use?

00:21:56.070 --> 00:21:57.600
We have some NS Tracking Area options.

00:21:57.600 --> 00:22:01.810
We want to be enabled during mouse drag,
so we pass in NS Tracking

00:22:01.860 --> 00:22:03.960
enabled during mouse drag.

00:22:03.960 --> 00:22:06.650
We OR it with NS Tracking
mouse entered and exited,

00:22:06.700 --> 00:22:11.300
because the events that we want to
get are entered and exited events.

00:22:11.300 --> 00:22:15.000
And then we want to always track,
so we add NS Tracking active always.

00:22:15.020 --> 00:22:17.680
If you don't have this flag,
and there are other flags,

00:22:17.690 --> 00:22:22.080
you can control if it tracks when your
window is key or when it's not key,

00:22:22.150 --> 00:22:22.450
etc.

00:22:22.800 --> 00:22:26.180
You can take a look at those extra flags.

00:22:26.180 --> 00:22:31.590
So having these options causes
the owner to give it mouse

00:22:31.590 --> 00:22:34.230
entered and mouse exited.

00:22:34.510 --> 00:22:37.460
This code is in its tracking area, dot h.

00:22:37.570 --> 00:22:41.000
It's another typo there,
copy and paste error.

00:22:41.000 --> 00:22:43.120
And all right, tracking areas, great.

00:22:43.120 --> 00:22:46.140
How are we going to actually use that
in our sample code in our demo app?

00:22:46.140 --> 00:22:49.560
We want to automatically add
tracking areas for cells.

00:22:49.560 --> 00:22:54.980
So we're going to define a
contract for the cell to adhere to.

00:22:54.980 --> 00:22:58.240
And here is a snippet of that
contract that we are defining.

00:22:58.240 --> 00:23:02.900
We're going to have this category,
add tracking areas for view,

00:23:02.900 --> 00:23:07.070
interact with user info at
a particular mouse location,

00:23:07.220 --> 00:23:11.870
and then the cell will want to get
mouse entered and mouse exited events.

00:23:11.880 --> 00:23:16.020
So this is a contract which we're
defining for any cell to implement.

00:23:16.020 --> 00:23:18.610
This is in cell tracking rec, dot h,
in the sample code,

00:23:18.610 --> 00:23:21.780
and image preview cell, dot m,
for an implementation.

00:23:21.780 --> 00:23:24.930
So again, this is a hands-on talk,
so let's dive back into the sample

00:23:24.940 --> 00:23:26.110
code and take a look at this.

00:23:30.800 --> 00:23:34.280
So underneath that last method
that we just took a look at,

00:23:34.380 --> 00:23:38.280
there's another defined,
Pound If Tracking Area.

00:23:38.500 --> 00:23:41.730
So let's do the same thing of
turning it back on by making it #f1

00:23:41.870 --> 00:23:44.450
and calling out the other portion.

00:23:44.910 --> 00:23:48.510
So this, we will show the code for
the outline view subclass,

00:23:48.510 --> 00:23:52.850
but it will automatically call us,
telling us to add our own tracking areas.

00:23:52.990 --> 00:23:55.820
So we implemented this
contract we defined,

00:23:55.820 --> 00:23:57.900
add tracking areas for view.

00:23:58.030 --> 00:23:59.900
What do we want to track?

00:23:59.900 --> 00:24:01.810
Well,
when you mouse over that info button,

00:24:01.810 --> 00:24:02.890
we want to highlight.

00:24:02.890 --> 00:24:07.870
So we grab that info button rect,
and we want it to be, well,

00:24:07.900 --> 00:24:10.980
we discussed the options,
we enabled during drag, enabled during,

00:24:10.980 --> 00:24:13.850
we want to get the mouse
entered and mouse exited events,

00:24:14.090 --> 00:24:15.900
and we want to always be active.

00:24:15.900 --> 00:24:20.050
In addition, we do an NSMouseInRect to
see if that mouse location

00:24:20.050 --> 00:24:22.900
is in the info button rect,
and if it is,

00:24:22.900 --> 00:24:26.900
we add NSTrackingAssume inside.

00:24:26.900 --> 00:24:31.220
So that means that we'll start out
in our tracking rect at that point,

00:24:31.220 --> 00:24:32.960
tracking area, sorry.

00:24:33.290 --> 00:24:34.740
Then what do we do?

00:24:34.800 --> 00:24:38.740
We call NSTrackingAreaAlloc and
use that initWithRect method,

00:24:38.800 --> 00:24:42.100
passing in the info button Rect,
passing in the options.

00:24:42.320 --> 00:24:45.680
The owner who's going to get the
events isn't going to be the cell,

00:24:45.960 --> 00:24:47.700
but it needs to be the control.

00:24:47.730 --> 00:24:50.700
So the control is going
to get that event,

00:24:50.950 --> 00:24:55.130
and we're passing in some user info that
was kind of just passed through to us.

00:24:55.200 --> 00:24:58.290
Then we call ControlView,
add tracking area to

00:24:58.290 --> 00:25:01.420
add the tracking area,
and then release it.

00:25:01.650 --> 00:25:05.110
So that means the control
is going to call our mouse

00:25:05.110 --> 00:25:07.980
entered and mouse exit events.

00:25:07.980 --> 00:25:11.550
And what we're going to do is we're
just going to set an IVAR indicating

00:25:11.550 --> 00:25:15.510
that we're in that hovered info
button and that we'll draw with a

00:25:15.510 --> 00:25:20.920
different color rect at that point,
or different info button image.

00:25:21.190 --> 00:25:24.360
Now, if you know how table view
and outline view works,

00:25:24.430 --> 00:25:27.630
if you set this flag-- well,
table view uses one cell and

00:25:27.630 --> 00:25:31.100
kind of just stamps it out on
each row over and over again.

00:25:31.190 --> 00:25:33.140
So if you think about it,
if you set this flag,

00:25:33.310 --> 00:25:37.190
won't it stamp out that same cell
with that same flag on each row?

00:25:37.410 --> 00:25:38.290
Normally, yes.

00:25:38.480 --> 00:25:41.380
But we'll talk about how to
actually make that work properly

00:25:41.720 --> 00:25:43.840
by subclassing outline view.

00:25:43.980 --> 00:25:48.870
Mouse exited just undoes
what mouse entered did.

00:25:49.100 --> 00:25:52.820
So let's go ahead and do build,
build and go, breakpoints off,

00:25:52.840 --> 00:25:56.050
and take a look at what happens
when we implement this event,

00:25:56.050 --> 00:25:56.900
or method.

00:25:57.600 --> 00:25:59.490
Let me do another search.

00:25:59.490 --> 00:26:01.930
And now if I hover over
the Info button there,

00:26:01.940 --> 00:26:05.600
I wave the mouse over it,
it turns to a different image,

00:26:05.780 --> 00:26:09.340
kind of a grayish eye Info button,
which is what we want.

00:26:09.470 --> 00:26:10.500
Super.

00:26:10.500 --> 00:26:14.650
Okay, let's go back to slides.

00:26:19.300 --> 00:26:21.730
So how are we going to finish
up adding these automatic

00:26:21.730 --> 00:26:23.150
tracking areas for the cells?

00:26:23.310 --> 00:26:25.520
Well, the control has to do some work.

00:26:25.530 --> 00:26:28.220
So we're going to subclass
in this outline view and

00:26:28.220 --> 00:26:33.370
automatically add tracking areas
for each cell that we can see.

00:26:33.700 --> 00:26:34.600
What are we going to do?

00:26:34.600 --> 00:26:36.940
We're going to override that
new NSView method in Leopard

00:26:37.100 --> 00:26:38.770
called UpdateTrackingAreas.

00:26:38.970 --> 00:26:43.100
So it's the one portion where we need
to actually add our tracking areas.

00:26:43.240 --> 00:26:46.640
Now, any tracking area that was added,
we have to explicitly remove.

00:26:46.760 --> 00:26:50.560
So we'll loop through and remove
our existing tracking areas.

00:26:50.660 --> 00:26:53.320
And now what you see here in the
first line is 4 in its tracking

00:26:53.320 --> 00:26:55.160
area and in its self-tracking areas.

00:26:55.310 --> 00:26:59.860
That's using the new for-in syntax
there to kind of do a quick looping.

00:27:00.000 --> 00:27:03.760
And we have to only add one remove
tracking areas that we added.

00:27:03.870 --> 00:27:07.200
If we remove arbitrary tracking areas,
you don't want to do that because it's

00:27:07.200 --> 00:27:11.940
possible that AppKit at some portion or
some time may want to add tracking areas.

00:27:12.050 --> 00:27:14.940
So we'll show you how
to remove just yours.

00:27:15.060 --> 00:27:18.220
Next is a little for loop,
which is kind of some pseudocode there.

00:27:18.350 --> 00:27:22.660
For each visible row and column,
it grabs the cell.

00:27:22.930 --> 00:27:25.080
Now, what is it going to grab?

00:27:25.180 --> 00:27:29.620
New in Leopard is a new table view
and outline view method called

00:27:29.870 --> 00:27:33.130
prepared cell at column row.

00:27:33.190 --> 00:27:37.140
That's going to give us a fully formed,
ready-to-use cell that

00:27:37.140 --> 00:27:40.740
will be drawn with,
that has bindings information

00:27:40.740 --> 00:27:42.780
automatically filled into it.

00:27:42.800 --> 00:27:45.980
It can be used for tracking, drawing,
and various other things.

00:27:45.990 --> 00:27:48.400
So we're going to grab
that fully formed cell,

00:27:48.540 --> 00:27:51.520
fully prepared cell,
and we're going to call that new method,

00:27:51.520 --> 00:27:55.880
that new contract that we defined,
add tracking areas for view in Rect

00:27:55.880 --> 00:27:59.100
with the user info at a mouse location.

00:28:00.010 --> 00:28:04.900
This code is in the subclass
trackable_outline_view.m.

00:28:04.970 --> 00:28:07.820
And again, hands-on talk,
so let's dive back into this

00:28:07.820 --> 00:28:10.010
code and take a look at that.

00:28:13.930 --> 00:28:18.180
So I'm going to go ahead and
open up trackableoutlineview.m.

00:28:18.180 --> 00:28:21.250
If you do happen to be following along,
go ahead and open up

00:28:21.260 --> 00:28:23.170
trackableoutlineview.m.

00:28:24.770 --> 00:28:28.000
And I'm going to collapse
the big old header.

00:28:28.090 --> 00:28:32.460
And if we scroll down a little bit,
we see the update tracking areas

00:28:32.460 --> 00:28:35.320
method that I was just discussing.

00:28:35.810 --> 00:28:39.180
It's doing that for loop,
and we're going to remove

00:28:39.290 --> 00:28:44.740
tracking areas where the owner
of the tracking area is us,

00:28:44.900 --> 00:28:49.910
and the user info has a special
key which we are going to add,

00:28:49.930 --> 00:28:51.240
the row key.

00:28:51.240 --> 00:28:54.120
So if it has a row key in the user info,
we know we added it.

00:28:54.120 --> 00:28:56.040
So we're going to go ahead and remove it.

00:28:56.040 --> 00:28:59.260
Next, what are we going to do?

00:28:59.260 --> 00:29:04.270
We're going to grab the visible rows
using table view's method rows and rect,

00:29:04.470 --> 00:29:07.620
and the visible columns
using columns and rect.

00:29:07.620 --> 00:29:11.340
Another feature on Leopard is the
ability to hide table columns.

00:29:11.340 --> 00:29:14.080
So we have to find out which
columns are visible because you

00:29:14.180 --> 00:29:15.790
might have some hidden there.

00:29:16.150 --> 00:29:20.320
We're going to find out that mouse
location of the current event,

00:29:20.350 --> 00:29:22.200
and we're going to enumerate
through all the rows.

00:29:22.200 --> 00:29:25.570
So we're going to go four of
the rows in the first visible

00:29:25.630 --> 00:29:28.190
row and go through all of them.

00:29:28.500 --> 00:29:32.720
Now I'm going to ignore a little bit
of code here where a full width cell,

00:29:32.720 --> 00:29:35.840
so cells can actually span
across all columns now.

00:29:35.930 --> 00:29:39.750
So I'm going to ignore this bit of code
which goes for the full width portion.

00:29:39.870 --> 00:29:43.140
And we're going to look at
the portion where it iterates

00:29:43.140 --> 00:29:45.060
through all the columns.

00:29:45.070 --> 00:29:48.210
It uses that new table view
and outline view method,

00:29:48.210 --> 00:29:52.060
prepared cell at column,
to grab the fully prepared cell,

00:29:52.160 --> 00:29:57.210
respond to selector to see if it
actually adheres to our contract,

00:29:57.360 --> 00:29:59.620
add tracking areas for view.

00:29:59.700 --> 00:30:02.820
And if it does,
our user info that we're going

00:30:02.820 --> 00:30:09.120
to pass through to it is a
dictionary which has the column,

00:30:09.190 --> 00:30:12.080
and a column key, and a row,
and the row key.

00:30:12.300 --> 00:30:16.600
So we know what row and column this
tracking area is going to be for.

00:30:16.770 --> 00:30:21.260
And then we call the cells method
to actually add its tracking areas.

00:30:21.610 --> 00:30:25.470
So if you recall,
the owner was this actual view,

00:30:25.470 --> 00:30:28.640
and it's going to get the mouse
entered and mouse exited events.

00:30:28.670 --> 00:30:31.630
So it's getting mouse entered.

00:30:31.860 --> 00:30:34.640
And here's the implementation
of mouse entered.

00:30:34.680 --> 00:30:38.740
What it does is we dissect that
information that we put inside of the

00:30:39.040 --> 00:30:41.800
user info to grab the row and column.

00:30:42.100 --> 00:30:44.880
And if we do have a row and column,
then it's definitely an

00:30:44.880 --> 00:30:46.100
event that we wanted.

00:30:46.350 --> 00:30:48.370
And we grab the integer value.

00:30:48.470 --> 00:30:51.580
Again, we use prepared cell at column
to get that fully formed cell.

00:30:51.600 --> 00:30:57.280
We have an IVAR in this class
called underbar mouse cell.

00:30:57.740 --> 00:30:59.600
We release the old one.

00:30:59.600 --> 00:31:03.690
We store off the column and
the row where it happened at,

00:31:03.690 --> 00:31:05.410
and we copy that cell.

00:31:05.600 --> 00:31:14.940
Now, in just a second,
you'll see a neat trick that we

00:31:14.940 --> 00:31:20.470
can do with that copied cell.

00:31:20.470 --> 00:31:20.470
So this is going to,
or then we call mouse cell mouse entered.

00:31:20.470 --> 00:31:20.470
So that's giving your cell the entered
event where it can set up its own state.

00:31:21.540 --> 00:31:24.560
Now, right underneath this
we see mouse exited,

00:31:24.620 --> 00:31:27.220
which basically undoes
exactly what we did,

00:31:27.220 --> 00:31:28.990
and I'm not going to discuss that.

00:31:29.190 --> 00:31:33.880
But the key portion is that new method,
preparedCellAtColumn.

00:31:33.920 --> 00:31:37.360
Well, if everything is going through this
inside table view and outline view,

00:31:37.510 --> 00:31:40.590
not only can we call it,
but we can also override it

00:31:40.790 --> 00:31:42.610
and do some special stuff.

00:31:42.890 --> 00:31:47.270
So, if the row that it's asking
for is that mouse row,

00:31:47.350 --> 00:31:52.000
and is that mouse column,
we're going to return that copied cell.

00:31:52.060 --> 00:31:56.030
So that means table view is going
to be stamping out these rows one

00:31:56.040 --> 00:31:59.000
at a time with that same cell,
until it gets to the one where

00:31:59.000 --> 00:32:01.190
you did the mouse entered,
and it's going to use

00:32:01.270 --> 00:32:04.290
your copied version,
which maintains its own state,

00:32:04.370 --> 00:32:07.190
and then it'll go ahead and
do the rest of the stuff.

00:32:07.660 --> 00:32:12.470
In addition, we also override UpdateCell,
and we call setNeedsDisplayInRect

00:32:12.650 --> 00:32:16.320
if the cell it's updating
is that particular one cell.

00:32:16.370 --> 00:32:22.490
So that gives us automatic tracking
areas by some simple subclassing.

00:32:22.550 --> 00:32:25.000
Let's go back to some slides.

00:32:28.220 --> 00:32:33.040
Okay, another cool thing in Leopard:
Expansion Tooltips.

00:32:33.060 --> 00:32:36.200
What are expansion tooltips and
how do you take advantage of them?

00:32:36.520 --> 00:32:41.200
Well, these are automatic for
tables and browsers.

00:32:41.290 --> 00:32:42.850
Here's a little screenshot from Mail.

00:32:43.080 --> 00:32:47.060
You can see it has a title there where
it's kind of truncated some text.

00:32:47.230 --> 00:32:50.240
So if you take your mouse and kind of
hover it over there for just a second,

00:32:50.270 --> 00:32:56.500
now automatically what you will see
is pop a cool tooltip right over what

00:32:56.550 --> 00:32:58.180
you saw will expand the text there.

00:32:58.200 --> 00:32:59.490
there.

00:33:00.280 --> 00:33:03.430
Now we have a new NSL method
allowing you developers to override

00:33:03.440 --> 00:33:05.700
it and customize what you see there.

00:33:05.760 --> 00:33:08.710
This will work automatically for
all our cells which we actually

00:33:09.080 --> 00:33:12.980
ship and it will work pretty well
with everyone else's custom cells,

00:33:13.000 --> 00:33:15.200
but sometimes you have to customize it.

00:33:15.240 --> 00:33:20.200
So the way you customize it is overriding
ExpansionFrameWithFrame in view.

00:33:20.360 --> 00:33:23.250
So what you do here is,
basically your cell is

00:33:23.250 --> 00:33:27.730
drawing in this little rect,
and you're passing in that cell frame

00:33:27.740 --> 00:33:30.200
when ExpansionFrameWithFrame is called.

00:33:30.430 --> 00:33:32.870
Now if the frame is
not big enough for you,

00:33:32.870 --> 00:33:36.200
you can return the frame
that you need to draw in.

00:33:36.310 --> 00:33:40.040
Then if you return that bigger frame,
DrawWithExpansionFrame will then be

00:33:40.040 --> 00:33:42.200
called for you to draw in that big frame.

00:33:42.200 --> 00:33:45.190
And that lets you draw expanded.

00:33:45.200 --> 00:33:48.430
If you don't need to draw expanded,
you can just return

00:33:48.430 --> 00:33:50.200
NSZeroRect and EmptyRect.

00:33:50.200 --> 00:33:53.200
And it will just not
do that expanded stuff.

00:33:53.370 --> 00:33:55.200
So this is in NSL.h.

00:33:55.200 --> 00:33:58.700
And again, hands on,
so let's just go ahead and dive back on

00:33:58.700 --> 00:34:00.990
into the code and take a look at that.

00:34:04.400 --> 00:34:10.280
So I'm going to go ahead and open up
the image preview cell.m file again.

00:34:12.160 --> 00:34:15.180
And if you are happening to follow along,
hopefully you have image

00:34:15.180 --> 00:34:18.980
preview cell.m open by now,
and you're taking a look at it.

00:34:19.060 --> 00:34:21.950
And below there, you see another define,
which we're going to turn on

00:34:21.950 --> 00:34:24.470
this feature to look at it.

00:34:24.570 --> 00:34:27.410
Or actually, let's run with it off and
see what it looks like.

00:34:27.620 --> 00:34:29.900
So if you don't implement this,
what happens?

00:34:30.010 --> 00:34:34.780
So I'm going to do build and go,
breakpoints off.

00:34:34.860 --> 00:34:37.660
And let's take a look
and see what happens.

00:34:37.730 --> 00:34:39.930
So I do a search.

00:34:40.200 --> 00:34:44.960
Now I resize that column to
be small and hover over it.

00:34:45.040 --> 00:34:48.840
If I wait a second, ah,
so the expansion frame popped up.

00:34:48.850 --> 00:34:51.250
Now it's drawing incorrectly.

00:34:51.410 --> 00:34:52.560
It's drawing our image.

00:34:52.590 --> 00:34:54.360
It's drawing that little info button.

00:34:54.380 --> 00:34:57.080
We really want to just
pop up the bit of text,

00:34:57.080 --> 00:34:58.740
which you couldn't see.

00:34:59.020 --> 00:35:02.370
But notice the rect it's using
is actually the right size rect.

00:35:02.550 --> 00:35:05.000
It's just drawing the wrong stuff.

00:35:05.030 --> 00:35:11.290
So what InnoCell is going to do by
default is it's going to call title rect

00:35:11.420 --> 00:35:13.700
for bounds and return that title rect.

00:35:13.740 --> 00:35:17.700
So we need to do some customization
to actually make this work right.

00:35:18.470 --> 00:35:22.200
So, I'm going to go ahead and turn
this feature on by making it

00:35:22.200 --> 00:35:26.910
#F1 and commenting out the
expansion frame support portion.

00:35:28.000 --> 00:35:29.840
Expansion Frame with Frame.

00:35:29.840 --> 00:35:32.980
This new method in Leopard,
we just call it Supers

00:35:32.980 --> 00:35:36.830
Expansion Frame with Frame,
and we check to see if it's empty,

00:35:36.900 --> 00:35:39.000
because if it was empty,
it had enough space,

00:35:39.000 --> 00:35:41.720
and we're going to tweak it to
make it just a couple pixels wider,

00:35:41.800 --> 00:35:43.580
or a couple points wider, actually.

00:35:43.580 --> 00:35:47.490
But the real key portion was
the drawing was incorrect.

00:35:48.670 --> 00:35:52.540
So inside of the new Leopard method,
Draw with Expansion Frame,

00:35:52.540 --> 00:35:57.080
we're going to go ahead and just grab
our Attributed String value for the cell,

00:35:57.240 --> 00:36:01.650
and we're just going to
do Title Draw on Rect,

00:36:01.650 --> 00:36:04.380
and just draw the title there,
because that's all we want to see.

00:36:04.380 --> 00:36:06.040
We don't want to see the
image or anything else.

00:36:06.040 --> 00:36:10.040
So now if I go ahead and do
Build and Go Breakpoints Off,

00:36:10.040 --> 00:36:12.040
let's see how well it works then.

00:36:12.040 --> 00:36:15.000
Do a search again.

00:36:17.300 --> 00:36:22.620
I hover over it, and then it pops up,
and it's the right size.

00:36:22.700 --> 00:36:24.270
Super.

00:36:28.000 --> 00:36:33.440
Let's go back to slides.

00:36:33.440 --> 00:36:37.310
So I discussed a bunch of stuff
about NSL and NSOutlineView.

00:36:37.440 --> 00:36:39.280
I'm going to now turn
you over to Peter Ammon,

00:36:39.280 --> 00:36:43.610
and he's going to talk about
NSRuleEditor and NSPredicateEditor.

00:36:52.240 --> 00:36:53.780
Hello.

00:36:53.850 --> 00:36:54.600
I'm Peter Ammon.

00:36:54.600 --> 00:36:56.180
I'm an engineer on the Cocoa team.

00:36:56.420 --> 00:37:01.600
I'm going to talk about
NSRuleEditor and NSProductedEditor.

00:37:01.840 --> 00:37:03.820
We're going to talk about
what we mean by rules.

00:37:03.900 --> 00:37:08.470
We're going to talk about some of the new
classes we have in Cocoa for using rules.

00:37:08.600 --> 00:37:11.040
We're going to give a demo of
them with the code we just saw.

00:37:11.170 --> 00:37:13.450
We'll talk about their APIs,
and then we'll talk about

00:37:13.450 --> 00:37:15.470
localization of rules.

00:37:15.550 --> 00:37:20.100
So what do we mean by a rule?

00:37:20.260 --> 00:37:24.310
Rule is when the user tells
your application exactly what

00:37:24.360 --> 00:37:26.500
to find or to act on or to do.

00:37:26.500 --> 00:37:28.330
For example,
if you've ever used Spotlight,

00:37:28.500 --> 00:37:30.140
sometimes there's really simple rules.

00:37:30.140 --> 00:37:32.960
You want to search for maybe
files that contain rolling stones.

00:37:33.100 --> 00:37:34.130
You type it in the text field.

00:37:34.680 --> 00:37:35.180
That's a rule.

00:37:37.300 --> 00:37:40.580
Sometimes rules are more complicated.

00:37:40.580 --> 00:37:43.240
On Mac OS X,
Mail has a rule called News from

00:37:43.240 --> 00:37:46.300
Apple for finding all the news,
the emails that Apple sends you,

00:37:46.600 --> 00:37:48.560
and it looks like that.

00:37:50.280 --> 00:37:54.300
So sometimes rules are for searching or
filtering like these last two examples,

00:37:54.300 --> 00:37:55.920
but they aren't all.

00:37:56.100 --> 00:37:59.380
For example,
the actions you perform on the messages

00:37:59.380 --> 00:38:02.010
you find are also a type of rule,
even though they're not

00:38:02.050 --> 00:38:03.440
searching or filtering.

00:38:04.930 --> 00:38:07.190
And these are getting used
more and more in Mac OS X,

00:38:07.260 --> 00:38:07.840
right?

00:38:07.840 --> 00:38:10.800
We have it in the Finder,
we have it in the Open Panel,

00:38:10.930 --> 00:38:13.500
and now let's get it
into your application.

00:38:14.710 --> 00:38:16.420
So we have two new classes.

00:38:16.610 --> 00:38:19.790
We have NSPredicateEditor
and NSRuleEditor.

00:38:19.970 --> 00:38:21.000
And they look the same.

00:38:21.210 --> 00:38:22.010
They both look like that.

00:38:22.130 --> 00:38:25.470
It's the part at the top of
the PhotoSearch application.

00:38:27.840 --> 00:38:28.690
So how are they related?

00:38:28.700 --> 00:38:33.220
Well,
NS Rule Editor subclass is NS Control,

00:38:33.220 --> 00:38:37.390
and NS Predicate Editor specializes
Rule Editor for predicates.

00:38:37.550 --> 00:38:40.970
But they have the exact same
user interface and the exact

00:38:41.120 --> 00:38:42.380
same localization mechanism.

00:38:45.460 --> 00:38:46.240
So how are they different?

00:38:46.240 --> 00:38:48.840
Why do we have two?

00:38:48.850 --> 00:38:52.510
Well, NSPredicate Editor is
for editing NSPredicates.

00:38:52.510 --> 00:38:55.150
But NSRule Editor is for
editing abstract rules.

00:38:55.150 --> 00:38:57.510
Your application is going to
define what it means by a rule.

00:38:59.640 --> 00:39:04.880
and his Predicate Editor has a simple
API which is focused on predicates.

00:39:04.880 --> 00:39:07.600
But Rule Editor has a more
flexible and larger API.

00:39:07.600 --> 00:39:09.390
It's more difficult.

00:39:10.600 --> 00:39:12.560
Predicate Editor has a push model.

00:39:12.620 --> 00:39:15.560
What we mean by that is you're going
to set the available predicates on

00:39:15.560 --> 00:39:18.300
the Predicate Editor in a certain way.

00:39:18.600 --> 00:39:21.460
NS Rule Editor has a poll model.

00:39:21.560 --> 00:39:22.900
It's sort of like NS Toolbar.

00:39:23.090 --> 00:39:24.370
How does the Toolbar work?

00:39:24.460 --> 00:39:27.960
Well, the Toolbar has a delegate,
and the Toolbar will ask your delegate

00:39:28.070 --> 00:39:30.750
for the Toolbar items and then
arrange them in the view and allow

00:39:30.750 --> 00:39:32.500
the user to arrange them in the view.

00:39:32.630 --> 00:39:34.190
Rule Editor works the same way.

00:39:34.280 --> 00:39:40.320
It's going to ask the delegate
for the rule items and arrange

00:39:40.320 --> 00:39:40.320
them in the view and allow the
user to arrange them in the view.

00:39:41.240 --> 00:39:44.800
And lastly, Predicate Editor has some
support in Interface Builder,

00:39:44.800 --> 00:39:45.760
new in Leopard.

00:39:45.760 --> 00:39:48.700
Rule Editor does not have any yet.

00:39:48.700 --> 00:39:56.550
So let's see this in action.

00:39:56.550 --> 00:39:56.550
Can we switch over?

00:39:56.550 --> 00:39:56.550
Can we switch over?

00:40:01.790 --> 00:40:09.690
Okay, so I'm going to open up the main
menu .nib in Interface Builder 3.

00:40:19.330 --> 00:40:25.200
Okay, so let's see what we have in here.

00:40:25.480 --> 00:40:29.430
Let's go over to the outline mode.

00:40:29.430 --> 00:40:29.430
Within the window,

00:40:30.480 --> 00:40:33.570
We have a scroll view,
another scroll view,

00:40:33.770 --> 00:40:34.600
and the view at the bottom.

00:40:34.600 --> 00:40:36.040
The view at the bottom
is the path control,

00:40:36.040 --> 00:40:38.190
which is showing you
where the photos are.

00:40:38.300 --> 00:40:44.400
If we expand the bottom scroll view,
we have the predicate editor.

00:40:44.510 --> 00:40:48.250
Let's select that and just
delete that entire view.

00:40:49.360 --> 00:40:51.630
We'll recreate it.

00:40:51.720 --> 00:40:57.320
So in the library, under Tools,
Show Library, we'll go to Data Views,

00:40:57.320 --> 00:41:00.760
and the Predicate Editor is this
bubbly type control down here.

00:41:00.810 --> 00:41:05.300
So we'll select it and we'll drag it out,
and we'll drop it there.

00:41:05.300 --> 00:41:07.400
Let's put it where we want it.

00:41:08.820 --> 00:41:14.900
"We'll take that and we'll drag it wide.

00:41:18.040 --> 00:41:21.440
Let's make sure that it's
set to resize properly.

00:41:21.530 --> 00:41:25.480
View Inspector, excuse me.

00:41:31.400 --> 00:41:36.380
Okay, so right now it comes preloaded
with a couple of demo rules,

00:41:36.380 --> 00:41:36.980
right?

00:41:37.050 --> 00:41:39.100
There's age is less than, name is Rick.

00:41:39.200 --> 00:41:40.820
These are just samples.

00:41:40.900 --> 00:41:43.320
We want to replace them with our own.

00:41:43.490 --> 00:41:46.050
So in our tool to show inspector,

00:41:47.660 --> 00:41:50.860
We'll click on the row,
and over here we see left expressions,

00:41:50.860 --> 00:41:53.480
operators, and right expressions.

00:41:54.260 --> 00:41:57.260
So the left expression,
we want to have a key path.

00:41:57.380 --> 00:41:59.620
We want this to be the file name.

00:41:59.620 --> 00:42:02.690
And the key path for the file
name is something from Spotlight.

00:42:02.700 --> 00:42:07.360
It's KMDItemFSName.

00:42:07.460 --> 00:42:11.280
This is defined in the MD Item header.

00:42:12.040 --> 00:42:13.280
Now, what operators do we want?

00:42:13.300 --> 00:42:15.830
Well, we don't want less than or
greater than because names,

00:42:15.830 --> 00:42:16.950
that doesn't make sense for names.

00:42:17.020 --> 00:42:18.560
We'll unclick those.

00:42:18.600 --> 00:42:20.000
We want to have equal.

00:42:20.040 --> 00:42:23.600
We want to have begins with, ends with,
and we want to do contains,

00:42:23.720 --> 00:42:27.830
but a sort of interesting property of
Spotlight is you really want to have in.

00:42:27.840 --> 00:42:31.370
So we're saying the name is
in whatever the user types,

00:42:31.390 --> 00:42:33.310
but that means contains.

00:42:33.850 --> 00:42:38.260
Now the Write Expressions has
a short text field for numbers.

00:42:38.260 --> 00:42:41.180
We want that to be type of string,
so we'll click on that

00:42:41.180 --> 00:42:42.690
and choose Strings.

00:42:43.590 --> 00:42:45.910
And that row is finished.

00:42:45.980 --> 00:42:47.080
Select the second row.

00:42:47.130 --> 00:42:48.300
This will be for file kind.

00:42:48.340 --> 00:42:52.100
So a user can search for
JPEGs or PNGs or GIFs.

00:42:52.220 --> 00:42:58.380
So in that case,
the key path is KMDItemContentTypeTree,

00:42:58.440 --> 00:43:01.440
which is again defined
in the MDItem header.

00:43:01.530 --> 00:43:03.580
We only want to have one
operator for file kind.

00:43:03.580 --> 00:43:04.840
That's the equals.

00:43:04.940 --> 00:43:08.080
And for constant values,
we're going to type in UTIs.

00:43:08.150 --> 00:43:12.170
So for JPEGs, the UTI is public.JPEG.

00:43:12.410 --> 00:43:17.800
And we'll have public.GIF and public.PNG.

00:43:19.220 --> 00:43:22.490
Okay, well, the user doesn't want
to see KMDItemFS name,

00:43:22.500 --> 00:43:22.600
right?

00:43:22.600 --> 00:43:25.090
The user wants to see file name,
or maybe just name.

00:43:25.090 --> 00:43:27.020
So we're going to double
click on the pop-up button,

00:43:27.100 --> 00:43:29.720
and we'll just change this to name.

00:43:30.450 --> 00:43:33.750
Because we had to choose
"in" for the operator,

00:43:33.920 --> 00:43:35.660
it's in,
so we're going to make that "contained"

00:43:35.730 --> 00:43:39.800
because that's what it really means,
even though the operator is in.

00:43:39.830 --> 00:43:42.840
We'll drag that to the
top so it's the default.

00:43:43.980 --> 00:43:46.900
And for the second row,
instead of content type tree,

00:43:46.900 --> 00:43:48.320
we'll call it kind.

00:43:48.670 --> 00:43:55.160
Instead of public.jpg, just jpg, gif,
and png.

00:43:56.050 --> 00:43:58.900
Okay, so we're done configuring
the predicate editor.

00:43:58.900 --> 00:44:01.180
All we have to do is hook it up now.

00:44:01.180 --> 00:44:05.750
So what I'm going to do
is right click on it,

00:44:05.750 --> 00:44:10.930
and we're going to set the action.

00:44:12.040 --> 00:44:16.010
I'm going to drag that over
to the window controller.

00:44:16.010 --> 00:44:18.440
And that's going to set every
time the Predicate Editor change,

00:44:18.440 --> 00:44:21.590
it's going to send its action and invoke
the Predicate Editor change method.

00:44:22.050 --> 00:44:24.140
We also have to hook up the
IVAR of the window controller,

00:44:24.200 --> 00:44:28.070
so I'm going to right click on that,
choose the predicate editor,

00:44:28.190 --> 00:44:31.590
and click and point it
at our predicate editor.

00:44:32.150 --> 00:44:33.340
So I'm going to save this.

00:44:33.340 --> 00:44:38.060
And if we did this right and
I didn't mistype the spotlight names,

00:44:38.090 --> 00:44:40.850
then build and go breakpoints off.

00:44:40.870 --> 00:44:41.380
It should work just like it did before.

00:44:44.040 --> 00:44:44.350
There it is.

00:44:44.410 --> 00:44:47.500
We'll type Corbin.

00:44:47.560 --> 00:44:49.720
Oh, well.

00:44:49.840 --> 00:44:51.520
Not sure what happened there.

00:44:51.700 --> 00:44:53.310
Likely I mistyped the names.

00:44:53.470 --> 00:44:55.310
So I'll show you some of the
features of the Predicate Editor.

00:44:55.400 --> 00:44:59.400
You can, by clicking the plus buttons,
you can add additional rows.

00:44:59.400 --> 00:45:03.400
You can, if you hold down Option,
it's going to turn into a gear.

00:45:03.400 --> 00:45:05.400
You can add nested rows.

00:45:05.400 --> 00:45:09.430
You can drag and click
them and rearrange them.

00:45:13.940 --> 00:45:18.700
So you can make complicated,
sophisticated compound predicates.

00:45:18.700 --> 00:45:21.900
And we can click and select a bunch
and hit delete and they go away.

00:45:21.900 --> 00:45:25.900
Alright, let's go back to slides.

00:45:28.790 --> 00:45:33.040
So let's talk about the programmatic
APIs for these new controls.

00:45:33.120 --> 00:45:35.650
So a rule, as we just saw,
is made up of rows.

00:45:35.740 --> 00:45:36.360
What's in a row?

00:45:36.360 --> 00:45:37.830
A row contains pop-up buttons.

00:45:37.860 --> 00:45:38.890
It contains text fields.

00:45:38.900 --> 00:45:41.540
It can contain any sort of view you want,
really.

00:45:41.720 --> 00:45:45.030
And rows can also contain other rows,
sub-rows, nested rows.

00:45:45.220 --> 00:45:48.780
And you can nest arbitrarily
deeply if you want.

00:45:48.870 --> 00:45:51.180
So how do we get these
views into the control?

00:45:51.180 --> 00:45:53.280
Where do they come from?

00:45:53.330 --> 00:45:56.020
Well, the answer is different
for the two controls.

00:45:56.980 --> 00:45:58.820
The Predicate Editor,
they're coming from what's

00:45:58.860 --> 00:45:59.980
called as row templates.

00:46:00.010 --> 00:46:01.400
What's a row template?

00:46:01.460 --> 00:46:05.300
It's an instance of a new class,
NSPredicateEditorRowTemplate.

00:46:05.320 --> 00:46:06.240
What's that?

00:46:06.250 --> 00:46:06.890
It's a mouthful.

00:46:06.970 --> 00:46:10.820
We're going to call
it template for short.

00:46:10.820 --> 00:46:14.880
So in the screenshot here,

00:46:16.610 --> 00:46:20.400
A template is something that
describes related predicates,

00:46:20.500 --> 00:46:22.780
in the sense they have the
same form and the same views.

00:46:22.800 --> 00:46:25.670
For example,
the middle three rows all have a

00:46:25.670 --> 00:46:29.160
date property as the left popup
and then some operator and then

00:46:29.160 --> 00:46:32.180
a date picker as the right view.

00:46:32.180 --> 00:46:34.640
These are all represented
by the same template.

00:46:34.890 --> 00:46:36.580
But the bottom row is different.

00:46:36.580 --> 00:46:38.900
It's got three popups instead of two.

00:46:38.900 --> 00:46:41.300
It's got that extra text field in there.

00:46:41.340 --> 00:46:43.320
So that's going to be
a different template.

00:46:43.360 --> 00:46:47.400
And even the compound row at
the top is another template.

00:46:47.510 --> 00:46:49.870
So we have three templates for this view.

00:46:51.690 --> 00:46:53.760
So how do you make a template?

00:46:53.960 --> 00:46:56.970
Well, you make a template the same
way you make an NMS predicate,

00:46:56.980 --> 00:46:57.600
in a sense.

00:46:57.720 --> 00:46:58.600
How do you make a predicate?

00:46:58.600 --> 00:47:01.850
You're going to pass it an
array of left expression,

00:47:01.970 --> 00:47:04.600
an operator, and a right expression.

00:47:04.600 --> 00:47:06.660
But with erode templates,
you're going to pass it an

00:47:06.660 --> 00:47:08.910
array of left expressions,
an array of operators,

00:47:08.910 --> 00:47:10.600
and an array of right expressions.

00:47:10.630 --> 00:47:15.300
So the available predicates
are anything you can make from

00:47:15.300 --> 00:47:17.190
choosing one left expression,
one operator, and one right expression.

00:47:17.900 --> 00:47:20.080
So, for example,
let's say you wanted to make a

00:47:20.080 --> 00:47:21.720
template that looks like this.

00:47:21.800 --> 00:47:24.870
Favorite movie is Fried Green Tomatoes.

00:47:25.660 --> 00:47:27.390
What we're going to do is
we're going to start by making

00:47:27.400 --> 00:47:28.560
the array of left expressions.

00:47:28.560 --> 00:47:30.200
These are going to be key paths.

00:47:30.260 --> 00:47:32.600
For example,
favorite movie or favorite food.

00:47:32.600 --> 00:47:34.550
We're going to make
an array of operators.

00:47:34.660 --> 00:47:35.600
These are just NSNumbers.

00:47:35.600 --> 00:47:36.600
Excuse me.

00:47:36.600 --> 00:47:37.600
We're going to make the
array of right expressions,

00:47:37.600 --> 00:47:40.600
which are the values the user can pick.

00:47:40.640 --> 00:47:46.010
And we'll have the array of operators,
which are the is or contains for that.

00:47:48.100 --> 00:47:50.860
So you're going to pass these all
to Predicate Editor row template,

00:47:50.930 --> 00:47:52.910
and you're going to get a
template that looks like that.

00:47:53.050 --> 00:47:55.080
So you're giving it the
array of left expressions,

00:47:55.090 --> 00:47:59.520
the array of right expressions,
a modifier such as direct or too many,

00:47:59.540 --> 00:48:02.740
just like NSPredicate,
the array of operators,

00:48:02.740 --> 00:48:04.310
and no options here.

00:48:05.190 --> 00:48:07.390
So what if you want,
instead of a pop-up button on the right,

00:48:07.440 --> 00:48:09.600
you want a text field like this?

00:48:09.680 --> 00:48:10.850
How do you make that?

00:48:10.960 --> 00:48:12.590
Well,
you're going to make the array of left

00:48:12.630 --> 00:48:15.580
expressions the same way you did before,
but instead of an array

00:48:15.610 --> 00:48:17.630
of constant values,
you're going to pass

00:48:17.630 --> 00:48:18.500
it an attribute type.

00:48:18.680 --> 00:48:20.990
In this case, we have a text field.

00:48:21.060 --> 00:48:21.760
We want a text field.

00:48:21.760 --> 00:48:24.220
We're going to pass it
a string attribute type,

00:48:24.260 --> 00:48:25.260
so we get strings.

00:48:25.360 --> 00:48:27.650
And also the array of
operators like before.

00:48:27.760 --> 00:48:33.130
You're going to call a different init
method on NSPredicateEditorRowTemplate.

00:48:33.300 --> 00:48:36.050
Go to path to the left expressions,
the string attribute type,

00:48:36.190 --> 00:48:40.300
direct modifier again, the operators,
and no options.

00:48:40.480 --> 00:48:41.390
That gets you a text field.

00:48:41.400 --> 00:48:43.970
If you pass it maybe date type,
you get a date picker.

00:48:44.190 --> 00:48:47.220
You can also pass it number type
to get the short text field.

00:48:47.440 --> 00:48:49.400
So, okay, that's nice.

00:48:49.400 --> 00:48:50.400
What if you want to go beyond that?

00:48:50.400 --> 00:48:53.390
What if you want to have
more than three views?

00:48:53.490 --> 00:48:56.790
What if you want to have some,
handle some sophisticated

00:48:56.790 --> 00:49:00.550
subquery predicates that we're
making available in Leopard?

00:49:00.830 --> 00:49:05.070
Well, you can do that by subclassing
NSPredicate Editor row template.

00:49:05.100 --> 00:49:07.670
And you're going to override
some of its methods.

00:49:08.520 --> 00:49:11.360
So what are the interesting methods?

00:49:11.370 --> 00:49:13.360
Well, the first one is template views.

00:49:13.400 --> 00:49:16.800
This just returns the array of
views that get put into the row.

00:49:16.800 --> 00:49:18.830
It's pretty simple.

00:49:19.330 --> 00:49:21.010
The next one is Match Your Predicate.

00:49:21.290 --> 00:49:25.150
This is how your template is going to
indicate which predicates it's able to

00:49:25.150 --> 00:49:27.690
create and which it's able to display.

00:49:27.820 --> 00:49:31.820
So, Match Your Predicate returns a
floating point value because it

00:49:31.820 --> 00:49:34.990
sometimes multiple templates can
display a particular predicate.

00:49:35.140 --> 00:49:37.690
So whichever template returns the
highest value is the one which is

00:49:37.690 --> 00:49:39.290
going to end up actually displaying it.

00:49:39.460 --> 00:49:43.390
It's saying it's best at
displaying that predicate.

00:49:44.910 --> 00:49:46.560
There's also set predicate,
so when you receive the

00:49:46.560 --> 00:49:49.040
set predicate message,
you want to configure your views

00:49:49.040 --> 00:49:51.320
to represent that predicate.

00:49:52.160 --> 00:49:53.870
And there's predicate
with sub-predicates.

00:49:54.100 --> 00:49:55.810
When you get this,
you want to return the predicate

00:49:55.810 --> 00:49:58.320
represented by your views and
also the sub-predicates which

00:49:58.450 --> 00:49:59.700
correspond to your sub-rows.

00:50:05.260 --> 00:50:08.340
So there's a bit of a problem.

00:50:08.590 --> 00:50:11.700
The problem is we need to have multiple
instances of the same template.

00:50:11.750 --> 00:50:15.730
For example, in this screenshot,
we have the three rows that are

00:50:15.730 --> 00:50:16.980
all exactly the same template.

00:50:17.140 --> 00:50:20.490
They all have name, contains,
and then some text field.

00:50:21.040 --> 00:50:24.790
So the way we handle this is we make
sure the templates are copyable.

00:50:25.140 --> 00:50:28.140
When you want to have multiple
instances of a single template,

00:50:28.250 --> 00:50:29.280
we'll copy it.

00:50:29.280 --> 00:50:32.030
And if you make a custom template,
you have to make sure your

00:50:32.030 --> 00:50:34.240
templates are copyable as well.

00:50:35.090 --> 00:50:38.500
One of the easier ways to do this is
just load your views in a nib file.

00:50:38.560 --> 00:50:40.440
That way you can load the nib
file over and over and each

00:50:40.440 --> 00:50:42.730
time you'll get fresh views.

00:50:44.930 --> 00:50:48.680
Okay, we'll talk about Rule Editor now.

00:50:48.850 --> 00:50:50.830
So Rule Editor is, remember,
the base class,

00:50:50.850 --> 00:50:52.190
and it's just about user interface.

00:50:52.280 --> 00:50:56.310
It doesn't try to put more structure
than necessary on your rules.

00:50:57.780 --> 00:50:59.930
The delegate, as we discussed,
is going to be providing the

00:50:59.930 --> 00:51:00.980
views to the rule editor.

00:51:00.980 --> 00:51:04.220
So how does it do that?

00:51:04.570 --> 00:51:06.220
Well, we'll look at an example.

00:51:06.340 --> 00:51:10.180
Let's say we're trying to identify files
like in the photo search application.

00:51:10.370 --> 00:51:11.250
How do we do that?

00:51:11.300 --> 00:51:14.740
Well, the user is going to
work from left to right.

00:51:14.740 --> 00:51:16.780
He's going to see a
pop-up button on the left.

00:51:16.780 --> 00:51:22.720
It's going to have a couple options:
kind, name, date, open, last modified.

00:51:22.720 --> 00:51:24.940
And when he chooses one of these,
that's going to affect the

00:51:24.940 --> 00:51:25.940
views he sees to the right of

00:51:27.510 --> 00:51:29.040
So let's say he chooses kind.

00:51:29.090 --> 00:51:32.520
Well,
there's only one sub-option of that,

00:51:32.610 --> 00:51:34.610
only one operator, which is is.

00:51:34.780 --> 00:51:38.910
We only made one available
in Interface Builder.

00:51:39.300 --> 00:51:40.840
So after he sees "is", what's next?

00:51:40.990 --> 00:51:42.860
Well, he's going to have
different types of files:

00:51:42.880 --> 00:51:48.030
applications, images, texts, and music.

00:51:49.410 --> 00:51:52.090
If he chooses music, let's say,
we're going to have

00:51:52.090 --> 00:51:55.410
different types of music:
AAC, MP3.

00:51:55.420 --> 00:52:01.460
So each sub-choice is a
child of the previous choice.

00:52:01.590 --> 00:52:05.790
So in a sense,
the rules form a multi-way tree

00:52:06.000 --> 00:52:09.300
where every item has child items.

00:52:09.340 --> 00:52:14.260
My item term we're using is called
"criteria." So in this diagram up here,

00:52:14.260 --> 00:52:16.620
every blue box is a criterion.

00:52:19.420 --> 00:52:21.640
So a rule then is just
a path through the tree.

00:52:21.670 --> 00:52:26.500
It's just a selection of
criteria at each column.

00:52:28.500 --> 00:52:32.340
So how do you expose this
tree to the rule editor?

00:52:32.450 --> 00:52:36.460
Well, your delegate is going
to provide the criteria,

00:52:36.460 --> 00:52:38.800
and the criteria could
be any object you want.

00:52:38.800 --> 00:52:39.970
It's up to your application.

00:52:40.120 --> 00:52:42.960
That's the sense in which
the rules are abstract.

00:52:45.400 --> 00:52:47.460
To express a tree,
you need to know two things.

00:52:47.540 --> 00:52:51.500
You need to know the number of
children of a given criterion,

00:52:51.830 --> 00:52:55.270
That's rule editor number of
children for criterion with row type.

00:52:55.270 --> 00:52:58.410
This is a net method that
your delegate will implement.

00:52:59.390 --> 00:53:02.300
And you need to know the
child at a given index.

00:53:02.340 --> 00:53:07.560
So for this, you're going to return a new
criterion representing the child at

00:53:07.660 --> 00:53:09.920
that index for the parent criterion.

00:53:11.080 --> 00:53:14.050
So what do the criteria look like?

00:53:14.290 --> 00:53:16.790
Well, it's called display value.

00:53:16.800 --> 00:53:17.720
That's what you actually see.

00:53:17.720 --> 00:53:19.890
That's what the views are.

00:53:20.300 --> 00:53:25.000
So you can return a string, a view,
or a menu item as the display value.

00:53:25.090 --> 00:53:28.050
So in this case,
we see three strings that

00:53:28.050 --> 00:53:29.240
the delegate returned.

00:53:29.240 --> 00:53:31.840
Last open is within last and days.

00:53:31.980 --> 00:53:36.070
And in one case, the delegate returned a
view for the display value.

00:53:36.270 --> 00:53:40.200
The method here is just rule editor
display value for criterion in row,

00:53:40.400 --> 00:53:44.180
and all you do here is return a string,
a menu item, or a view depending on what

00:53:44.180 --> 00:53:46.370
your criterion looks like.

00:53:48.570 --> 00:53:52.500
The method here is just rule editor
display value for criterion in row,

00:53:52.500 --> 00:53:56.480
and all you do here is return a string,
a menu item, or a view depending on what

00:53:56.480 --> 00:53:58.190
your criterion looks like.

00:54:01.550 --> 00:54:05.480
The method here is just rule editor
display value for criterion in row,

00:54:05.570 --> 00:54:09.480
and all you do here is return a string,
a menu item, or a view depending on what

00:54:09.480 --> 00:54:11.680
your criterion looks like.

00:54:19.470 --> 00:54:24.390
So the way we're going to handle this
localization is with a strings file.

00:54:24.530 --> 00:54:27.550
We have some additional
syntax in strings files.

00:54:27.920 --> 00:54:31.370
For this particular case,
you'd say "kind is rock music"

00:54:31.370 --> 00:54:36.800
enclosing each pop-up in
brackets and the percent at sign.

00:54:36.800 --> 00:54:38.870
And you're going to make
that equal to "Class A.S.

00:54:38.970 --> 00:54:43.100
Musica de la Roca." Now you can
rearrange the text fields with

00:54:43.100 --> 00:54:45.580
the number dollar sign syntax,
which is familiar syntax

00:54:45.660 --> 00:54:46.800
from strings files.

00:54:46.800 --> 00:54:49.610
And you can also insert
the extra text field,

00:54:49.610 --> 00:54:52.500
the day,
just by putting it in the string.

00:54:58.260 --> 00:54:59.360
That can be a lot of strings.

00:54:59.540 --> 00:55:01.140
If you have a lot of rules,
there's a bit of a

00:55:01.140 --> 00:55:02.740
combinatoric explosion.

00:55:02.880 --> 00:55:04.550
For example,
there's "kind is rock music,"

00:55:04.620 --> 00:55:07.450
"country music," "disco," "opera,"
"kind is not," all of these.

00:55:07.600 --> 00:55:09.810
You can get it out of
hand pretty quickly.

00:55:10.870 --> 00:55:16.620
So the solution to this is we have,
you can group them with commas.

00:55:16.860 --> 00:55:19.360
So because most of the strings
will localize the same way,

00:55:19.360 --> 00:55:23.260
meaning you're going to move the pop-ups
to the same position and it will just

00:55:23.310 --> 00:55:28.420
be translation for the remainder,
you can group strings that need to be

00:55:28.420 --> 00:55:30.290
translated the same way within brackets.

00:55:30.380 --> 00:55:34.770
So in this case, kind is, is not,
and contains can all be just

00:55:34.820 --> 00:55:38.530
translated to the Spanish equivalents
as no S and contiene.

00:55:43.740 --> 00:55:44.560
What do we have?

00:55:44.680 --> 00:55:46.520
We have a common interface for rules.

00:55:46.690 --> 00:55:48.000
That's Rule Editor and Predicate Editor.

00:55:48.000 --> 00:55:50.140
It's going to be used
throughout Mac OS X.

00:55:50.150 --> 00:55:53.700
It's localizable, it's accessible,
it supports drag and drop as we saw.

00:55:53.700 --> 00:55:56.850
Predicate Editor is for
editing NSPredicates when your

00:55:56.850 --> 00:56:00.210
data model is in NSPredicate,
and Rule Editor is when your

00:56:00.210 --> 00:56:03.470
data is more abstract and you
want to have more control.

00:56:04.600 --> 00:56:13.100
[Transcript missing]

00:56:15.090 --> 00:56:18.910
So for more information you can
contact Derek Horn and we'll have

00:56:18.910 --> 00:56:21.420
the sample code up as soon as we can.

00:56:21.510 --> 00:56:22.730
It's up now?

00:56:22.770 --> 00:56:24.500
Sample code is available now.

00:56:24.500 --> 00:56:26.000
You can get this and
play with it right now.