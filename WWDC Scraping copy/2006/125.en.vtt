WEBVTT

00:00:10.400 --> 00:00:12.060
Good afternoon.

00:00:12.100 --> 00:00:12.540
Welcome.

00:00:12.540 --> 00:00:16.830
This is Creating Great Automator Actions:
Advanced Topics.

00:00:17.110 --> 00:00:20.360
I'm Kerry Hazelgren,
and hopefully most of you were able to

00:00:20.440 --> 00:00:25.260
attend the session earlier this morning,
Creating Great Automator Actions:

00:00:25.260 --> 00:00:26.300
The Basics.

00:00:26.300 --> 00:00:31.320
That session dealt mostly with
what you can do today in Tiger to

00:00:31.320 --> 00:00:34.300
create great Automator Actions.

00:00:34.330 --> 00:00:39.370
In this session, though,
we will focus mostly on Leopard and a

00:00:39.370 --> 00:00:42.520
couple of advanced topics for Tiger.

00:00:42.560 --> 00:00:44.530
So let's start.

00:00:44.840 --> 00:00:48.610
We're going to start by giving
a brief overview of some of

00:00:48.700 --> 00:00:53.490
the new features that we have
planned for Leopard for Automator.

00:00:53.640 --> 00:00:57.690
And then we will go into some
of those features in depth.

00:00:57.730 --> 00:01:01.300
And then we'll talk about
application integration,

00:01:01.450 --> 00:01:05.480
which is a new thing that we've
added for Leopard where you can

00:01:05.480 --> 00:01:10.290
actually integrate Automator
workflows into your application.

00:01:10.770 --> 00:01:14.860
Okay,
so what is new for Automator in Letbird?

00:01:14.990 --> 00:01:16.910
First of all, we have variables.

00:01:17.040 --> 00:01:22.500
And this is a great new way for actions
in a workflow to be able to share data

00:01:22.520 --> 00:01:27.500
which is independent from the actual
data that's running through the workflow.

00:01:27.540 --> 00:01:32.770
And we'll talk about this in
depth and give some demos on it.

00:01:33.740 --> 00:01:37.860
Okay,
so what is new for Automator in Letbird?

00:01:37.860 --> 00:01:39.940
First of all, we have variables.

00:01:39.940 --> 00:01:45.430
And this is a great new way for actions
in a workflow to be able to share data

00:01:45.450 --> 00:01:50.500
which is independent from the actual
data that's running through the workflow.

00:01:50.500 --> 00:01:55.560
And we'll talk about this in
depth and give some demos on it.

00:02:03.710 --> 00:02:25.780
Okay,
so what is new for Automator in Letbird?

00:02:25.780 --> 00:02:25.780
First of all, we have variables.

00:02:25.780 --> 00:02:25.780
And this is a great new way for actions
in a workflow to be able to share data

00:02:25.780 --> 00:02:25.780
which is independent from the actual
data that's running through the workflow.

00:02:25.780 --> 00:02:25.780
And we'll talk about this in
depth and give some demos on it.

00:02:35.420 --> 00:02:47.360
Next we have Automatic Serialization.

00:02:47.360 --> 00:02:47.360
It's kind of a long title
and a complex topic,

00:02:47.360 --> 00:02:47.360
but we will go into that further
in depth in a few minutes.

00:02:50.290 --> 00:02:53.380
And lastly, performance improvements.

00:02:53.600 --> 00:02:54.030
Yay!

00:02:54.190 --> 00:02:57.560
I actually wanted
Lightning McQueen on here,

00:02:57.560 --> 00:03:01.200
but they told me that nothing
could possibly be that fast.

00:03:01.200 --> 00:03:05.180
But I tried to convince them and
basically we're left with this.

00:03:05.380 --> 00:03:07.360
But the point is,
Automator has got a lot of

00:03:07.360 --> 00:03:12.320
performance improvements,
both in the UI and workflow execution.

00:03:12.320 --> 00:03:15.430
We've done a lot to try and
streamline and speed everything up.

00:03:15.630 --> 00:03:17.890
So we wanted to highlight that.

00:03:17.960 --> 00:03:21.580
So let's go into some
of the new features.

00:03:21.700 --> 00:03:30.070
We're going to talk
about variables first,

00:03:30.070 --> 00:03:30.070
then automatic serialization,
and then we're going to talk about the

00:03:30.540 --> 00:03:33.120
To finish up,
sort of with defining data types

00:03:33.120 --> 00:03:36.740
and creating conversion actions,
two topics which pretty

00:03:36.820 --> 00:03:38.740
much go hand in hand.

00:03:38.740 --> 00:03:40.860
So let's start with variables.

00:03:42.660 --> 00:03:46.840
Variables, you can think of variables
as global variables.

00:03:46.840 --> 00:03:51.200
They're a way that actions in
the workflow can share data.

00:03:51.490 --> 00:03:54.420
So, for example,
if you have an action that

00:03:54.530 --> 00:03:58.680
creates a new folder and then an
action that creates a disk image

00:03:58.680 --> 00:04:04.400
and one that creates a package,
they can all share a variable that

00:04:04.400 --> 00:04:07.920
would represent the name of the folder,
the name of the disk image,

00:04:07.980 --> 00:04:09.600
the name of the package.

00:04:09.640 --> 00:04:13.040
And you can,
every time you run the workflow,

00:04:13.040 --> 00:04:18.150
you can just change the value of that
variable and it will change the entire

00:04:18.150 --> 00:04:23.170
behavior of the workflow without actually
modifying the actions themselves.

00:04:23.540 --> 00:04:26.640
So they're really flexible.

00:04:26.640 --> 00:04:32.090
We've given you four types for now,
and you can set them either in the UI or

00:04:32.090 --> 00:04:38.470
you can set the values programmatically,
and we'll talk about that.

00:04:38.670 --> 00:04:45.420
One thing you do need to do is to add
support for variables to your actions,

00:04:45.440 --> 00:04:48.190
but it's really easy to do.

00:04:48.370 --> 00:04:50.680
The first thing you need to do is
we've created a palette because

00:04:50.980 --> 00:04:53.150
we provided a couple new classes.

00:04:53.150 --> 00:04:58.010
So there's a new Automator palette
that's compatible with Interface Builder

00:04:58.010 --> 00:05:02.500
3 and it's located in Developer Extras,
Palettes,

00:05:02.500 --> 00:05:05.570
and is called Automator Palette.

00:05:06.480 --> 00:05:07.760
Simple enough.

00:05:07.800 --> 00:05:09.480
So just load that up.

00:05:09.510 --> 00:05:12.750
And then we've got two controls
that support variables.

00:05:12.860 --> 00:05:14.910
The first is text fields.

00:05:15.250 --> 00:05:20.960
So you'll want to change any text fields
in your action UIs to token fields.

00:05:20.960 --> 00:05:23.540
And there's a somewhat fuzzy screenshot.

00:05:23.540 --> 00:05:24.730
We don't have high DPI yet.

00:05:24.880 --> 00:05:28.900
But there's a screenshot,
and that's what a variable

00:05:28.900 --> 00:05:30.410
looks like in a text field.

00:05:30.660 --> 00:05:35.000
It's a token, just like you would
see in a mail message.

00:05:35.950 --> 00:05:39.360
Then also pop-up buttons
support variables.

00:05:39.360 --> 00:05:44.660
And if you have an NSPopupButton,
you will want to change

00:05:44.660 --> 00:05:44.660
that to NSPopupButton.

00:05:44.850 --> 00:05:51.390
and pop-up button.

00:05:51.440 --> 00:05:51.440
And you can see there's a little
variables icon next to the value.

00:05:54.430 --> 00:05:57.440
Before I go to the demo,
there is one other control,

00:05:57.530 --> 00:06:02.700
the AM Path pop-up button,
which we introduced in

00:06:02.700 --> 00:06:05.680
Tiger for Automator.

00:06:05.850 --> 00:06:09.690
If you have one of those,
we use them a lot in Apple's actions,

00:06:09.820 --> 00:06:15.350
they support variables automatically.

00:06:15.350 --> 00:06:15.350
That's one thing you
don't have to mess with.

00:06:15.580 --> 00:06:19.310
So to demo variables,
I'm going to bring up the

00:06:19.310 --> 00:06:21.940
engineer that was mostly
responsible for implementing them,

00:06:21.940 --> 00:06:26.760
and you may have seen her this morning,
and that would be Emily Kim.

00:06:26.760 --> 00:06:26.760
Emily?

00:06:32.500 --> 00:06:34.500
Hi, so if you didn't see the
session this morning,

00:06:34.570 --> 00:06:37.860
I'm Emily, and we're going to talk about
a little bit about variables.

00:06:37.950 --> 00:06:41.900
So what I'm going to show in this demo
is how you can change the controls

00:06:41.900 --> 00:06:45.500
in your action to take advantage of
the variable features in Automator,

00:06:45.610 --> 00:06:48.920
and then we're going to take a quick
look at how these variables can be

00:06:48.920 --> 00:06:50.990
extremely useful in your workflows.

00:06:51.040 --> 00:06:53.420
So to the demo machine, please.

00:06:56.050 --> 00:06:57.500
So here I have a project.

00:06:57.500 --> 00:07:00.080
This action imports photos into iPhoto.

00:07:00.150 --> 00:07:04.750
So all I have to do is open up
the Nib in Interface Builder.

00:07:04.750 --> 00:07:08.380
And here I have my text field.

00:07:08.410 --> 00:07:10.520
And I'm going to show the inspector.

00:07:10.540 --> 00:07:14.650
And here all I have to do is
change its class to AM Token Field,

00:07:14.860 --> 00:07:16.130
just like that.

00:07:16.270 --> 00:07:17.950
Save it.

00:07:17.980 --> 00:07:20.540
And that's actually all I have to do.

00:07:20.610 --> 00:07:24.720
So now I have already a built version
that I'm going to use to show you.

00:07:24.890 --> 00:07:30.550
And we're going to get some pictures.

00:07:30.880 --> 00:07:34.300
And that's actually what I just did
was drag some files into Automator.

00:07:34.300 --> 00:07:35.680
In case you didn't
know you could do that,

00:07:35.680 --> 00:07:38.050
it'll create a get specified
finder items for you,

00:07:38.060 --> 00:07:40.590
and I think that's very exciting.

00:07:40.810 --> 00:07:45.630
So then we'll make a new folder,
get the pictures out of the folder,

00:07:45.770 --> 00:07:49.780
and then we are going to import
these photos into iPhoto.

00:07:50.000 --> 00:07:55.000
And to take advantage of variables,
let's say I want to have,

00:07:55.000 --> 00:07:58.380
this is actually a workflow that
I use when I'm getting the photos

00:07:58.380 --> 00:08:00.000
from my camera onto my computer.

00:08:00.000 --> 00:08:03.220
And so I like to keep them in a
separate folder and then I import them

00:08:03.310 --> 00:08:07.000
into iPhoto without taking advantage
of iPhoto's directory structure.

00:08:07.020 --> 00:08:10.000
So I'm going to have a
variable here called album.

00:08:10.000 --> 00:08:12.890
Its value is nature.

00:08:12.990 --> 00:08:16.000
And so I'm going to put it
in the name of my new folder.

00:08:16.000 --> 00:08:19.000
And I also want it in my album name.

00:08:19.040 --> 00:08:22.990
So, nice auto complete.

00:08:23.160 --> 00:08:27.130
And then I can also add the
current date to my album,

00:08:27.130 --> 00:08:29.000
which is what I often do in iPhoto.

00:08:29.000 --> 00:08:31.890
And this is also extremely useful
because currently there are a lot

00:08:32.010 --> 00:08:36.000
of Automator actions which just say
append current date to this file name.

00:08:36.000 --> 00:08:40.000
And now you can just use variables
and put that wherever you want.

00:08:40.000 --> 00:08:41.000
So you can see we have that.

00:08:41.000 --> 00:08:43.580
And then as Kerry mentioned,
we also have support

00:08:43.660 --> 00:08:44.920
for Path Popup buttons.

00:08:45.000 --> 00:08:49.000
So I can drag a path type
variable into one of those.

00:08:49.000 --> 00:08:55.490
So now what I have here is a workflow
which takes some photos and creates

00:08:55.490 --> 00:08:59.000
a new folder with a name that I've
specified in a variable in a destination

00:08:59.000 --> 00:09:01.000
that I've specified also as a variable.

00:09:01.000 --> 00:09:03.720
And then it imports them into
iPhoto using the album name,

00:09:03.740 --> 00:09:07.000
which is the same as the folder name,
as well as the current date.

00:09:07.000 --> 00:09:10.000
So what happens when I run this?

00:09:10.000 --> 00:09:12.940
We're going to hit run.

00:09:14.010 --> 00:09:17.140
And here you can see it's imported
the photos into an album that has a

00:09:17.140 --> 00:09:19.740
variable name and the current date.

00:09:19.830 --> 00:09:22.860
So, that's kind of exciting,
but what if I just hard-coded

00:09:23.110 --> 00:09:25.590
nature and the date in and
that would have been fine?

00:09:25.740 --> 00:09:29.320
Well now what I can do is I can actually
change the value of this variable

00:09:29.430 --> 00:09:36.850
to something like pretty pictures,
and then maybe change the photos since

00:09:36.850 --> 00:09:42.630
I already have these to these photos.

00:09:42.830 --> 00:09:45.800
And maybe I also want to
change the format of my date.

00:09:45.830 --> 00:09:47.900
I want to change it to this one now.

00:09:48.070 --> 00:09:51.300
So all I have to do is change
those and run the workflow again

00:09:51.300 --> 00:09:55.070
and you can see now I have another
album called Pretty Pictures and

00:09:55.070 --> 00:09:59.370
a current date in a new format.

00:10:02.950 --> 00:10:05.140
You can see how this could
become extremely useful,

00:10:05.140 --> 00:10:08.340
especially with path pop-up,
with A and path pop-up buttons,

00:10:08.340 --> 00:10:10.040
if you keep your variables.

00:10:10.150 --> 00:10:13.040
If you have a lot of actions
that are dealing with data

00:10:13.060 --> 00:10:15.860
going all into the same place,
you can set the path once in

00:10:15.860 --> 00:10:18.450
the beginning of your workflow
and it will use that same path

00:10:18.450 --> 00:10:19.810
for the rest of the workflow.

00:10:20.900 --> 00:10:24.620
Additionally,
we also have a new results feature.

00:10:24.730 --> 00:10:28.730
If you just turn the action over,
you can see results on the other side in

00:10:28.730 --> 00:10:31.760
a better form than what we currently had,
which was this.

00:10:31.930 --> 00:10:34.200
Now we have also,
you can see them as a list or

00:10:34.200 --> 00:10:35.900
you can see them as pictures.

00:10:35.900 --> 00:10:38.690
That's that.

00:10:38.920 --> 00:10:40.900
Back to slides, please.

00:10:48.470 --> 00:10:50.020
Thanks Emily.

00:10:50.020 --> 00:10:53.100
She promised she would be nicer to
me than she was to Todd this morning.

00:10:53.100 --> 00:10:55.020
So far, so good.

00:10:55.460 --> 00:10:59.630
Okay, so the next topic is
Automatic Serialization.

00:10:59.690 --> 00:11:04.540
And basically this is a way whereby
Automator can take the data that

00:11:04.630 --> 00:11:09.400
is flowing through a workflow
and serialize it so that actions

00:11:09.400 --> 00:11:14.190
can just receive one piece of
input at a time and loop over them.

00:11:14.400 --> 00:11:15.450
Now I said loop.

00:11:15.450 --> 00:11:18.380
It is essentially looping,
but it is not the kind of

00:11:18.500 --> 00:11:22.380
looping you would expect because
it's not user configurable.

00:11:22.450 --> 00:11:26.220
It's based on certain
properties of the action.

00:11:26.400 --> 00:11:28.450
So we didn't really
want to call it looping.

00:11:28.540 --> 00:11:30.240
We call it automatic serialization.

00:11:30.660 --> 00:11:35.400
And I've got a nice diagram to
demonstrate or to explain it.

00:11:35.400 --> 00:11:40.860
So in Tiger, in a typical workflow,
you would start with a

00:11:40.980 --> 00:11:43.400
group of data such as this.

00:11:43.400 --> 00:11:49.300
And the first action would receive that
data and it would iterate over the data.

00:11:49.550 --> 00:11:51.400
Essentially it would
loop inside the action.

00:11:51.400 --> 00:11:55.400
From that action to the
next action to the next.

00:11:55.400 --> 00:11:59.400
And then you would have your
output again essentially a list.

00:11:59.400 --> 00:12:04.400
Automator and Tiger dealt
mostly with lists of data.

00:12:05.540 --> 00:12:12.400
So, this works great for most
workflows and most actions,

00:12:12.400 --> 00:12:21.010
but for a certain class of actions,
it can be really problematic.

00:12:21.010 --> 00:12:21.010
If the task is to open

00:12:21.720 --> 00:12:25.200
open a Photoshop file, for example,
and you get past a list of 50 of them,

00:12:25.200 --> 00:12:29.290
you don't really want to be
opening 50 Photoshop documents.

00:12:29.340 --> 00:12:31.070
At the same time,
you would quickly eat up

00:12:31.160 --> 00:12:33.010
all your system resources.

00:12:33.010 --> 00:12:37.520
In fact, one of our developers developed
a suite of Photoshop document

00:12:37.620 --> 00:12:41.780
or Photoshop automator actions,
and he had to come up with a clever

00:12:42.060 --> 00:12:44.830
workaround for this sort of a workflow.

00:12:44.830 --> 00:12:49.050
The good news is, though,
we made that a lot easier.

00:12:49.200 --> 00:12:54.250
And the only thing you have to do to
take advantage of it is change the input

00:12:54.290 --> 00:12:58.840
type of your action from list to single.

00:12:58.840 --> 00:13:00.120
And I'll show you how to do that.

00:13:00.120 --> 00:13:04.240
You may have seen a little
bit of that this morning.

00:13:04.240 --> 00:13:09.040
So if you do that,
let's look at how a workflow

00:13:09.040 --> 00:13:12.100
in Leopard would behave.

00:13:12.100 --> 00:13:14.100
So we have five actions here.

00:13:14.100 --> 00:13:18.040
And the first one and the last
one take a single list input.

00:13:18.060 --> 00:13:21.840
The center three, however,
take single input.

00:13:21.870 --> 00:13:24.960
So once we run this workflow,
we'll get a list of data,

00:13:24.960 --> 00:13:28.840
and the first action will
iterate over that data until

00:13:28.840 --> 00:13:31.990
it is finished processing it.

00:13:33.210 --> 00:13:36.790
Well then at this point,
Automator is going to say the next

00:13:36.790 --> 00:13:42.720
three actions require single input
and the added criteria is that they

00:13:42.720 --> 00:13:45.100
are part of the same application.

00:13:45.100 --> 00:13:47.900
So they're all Photoshop actions,
they're all iTunes actions,

00:13:47.960 --> 00:13:51.000
they're all your application's actions.

00:13:51.100 --> 00:13:54.060
So at that point,
Automator will create a loop

00:13:54.170 --> 00:13:58.180
and it will just send the first
item of data through that loop.

00:13:58.850 --> 00:14:04.000
"And then it will go to the second,
and the third, and the fourth,

00:14:04.020 --> 00:14:10.060
and it will temporarily hold
the results of that loop."

00:14:10.240 --> 00:14:15.310
Until it is completed,
iterating all of the data.

00:14:15.500 --> 00:14:17.550
So once it has done that,
then it'll send that

00:14:17.680 --> 00:14:23.520
through to the next action,
which will receive a list as it requires.

00:14:23.650 --> 00:14:25.800
"And it will process it and all is good.

00:14:25.950 --> 00:14:30.590
So it works, most actions will work just
the same if it's good for them.

00:14:30.880 --> 00:14:35.340
But actions which need this behavior,
require it really,

00:14:35.340 --> 00:14:37.600
can take advantage of it.

00:14:37.650 --> 00:14:43.450
So it's not for every action,
but if it is a data intensive action,

00:14:43.450 --> 00:14:45.350
this is really handy.

00:14:45.350 --> 00:14:52.870
So all you need to do to set your action
to single input is open up the project,

00:14:52.970 --> 00:14:55.910
select your target.

00:14:57.550 --> 00:15:02.960
And in the inspector,
under the container type, input type,

00:15:03.080 --> 00:15:04.880
select single.

00:15:05.200 --> 00:15:09.200
This was mostly unused in Tiger,
so most of your actions

00:15:09.510 --> 00:15:14.790
most likely are set to list,
but you can take advantage

00:15:14.790 --> 00:15:16.760
of that and set it to single.

00:15:18.200 --> 00:15:36.100
[Transcript missing]

00:15:41.650 --> 00:15:44.020
So here I have a workflow.

00:15:44.050 --> 00:15:47.670
And it's going to start
with getting some files.

00:15:51.040 --> 00:15:54.540
Copy files to the
desktop with this action.

00:15:54.540 --> 00:15:57.860
I have slightly modified
versions of Flip Images,

00:15:58.080 --> 00:16:01.990
Crop Images, and Scale Images that
all take single input.

00:16:01.990 --> 00:16:05.000
All I did was change the
input type of those actions.

00:16:05.150 --> 00:16:07.920
It will end up with
Open Images and Preview,

00:16:07.960 --> 00:16:10.690
which is another list type input action.

00:16:11.050 --> 00:16:15.440
As you can see, when this runs,
it's going to copy them

00:16:15.550 --> 00:16:18.900
all to the desktop,
but then it's going to loop

00:16:18.900 --> 00:16:25.420
over each item of data,
just processing them one at

00:16:25.470 --> 00:16:32.080
a time until it completes.

00:16:38.000 --> 00:16:48.490
The last action got all of the data at
once because it opened them all as a set.

00:16:48.600 --> 00:17:01.400
[Transcript missing]

00:17:04.730 --> 00:17:08.000
Again, it's not for most actions,
but if this sort of behavior

00:17:08.270 --> 00:17:12.680
is important to your action,
please go ahead and take a look at

00:17:12.760 --> 00:17:15.100
it and see if it's right for you.

00:17:15.110 --> 00:17:17.050
Now the next feature.

00:17:17.920 --> 00:17:21.260
is defining custom data types.

00:17:21.290 --> 00:17:25.480
The typical scenario of an
Automator Action Developer,

00:17:25.610 --> 00:17:27.960
well, an Apple Script Automator
Action Developer,

00:17:27.980 --> 00:17:34.140
is you have a scriptable application,
and it defines in its scripting

00:17:34.140 --> 00:17:38.580
terminology certain objects,
and you want to create an Automator

00:17:38.580 --> 00:17:42.020
Action that will deal with those objects.

00:17:42.020 --> 00:17:45.070
We do that with mail actions.

00:17:45.140 --> 00:17:49.230
Like mail messages is
a type that we define.

00:17:49.440 --> 00:17:55.020
Mailboxes, et cetera, iTunes songs,
those are all data types

00:17:55.020 --> 00:17:56.680
that we have defined.

00:17:57.070 --> 00:18:01.010
So if you're creating an action
that has an input type or an output

00:18:01.010 --> 00:18:04.710
type of one of your custom objects,
then you'll want to define a

00:18:04.710 --> 00:18:10.750
data type so that Automator knows
how to work with that object.

00:18:13.330 --> 00:18:17.110
Data types in Automator are UTIs.

00:18:17.310 --> 00:18:23.200
And UTIs are simple strings,
reverse domain name formatted strings,

00:18:23.340 --> 00:18:25.870
that can represent any object.

00:18:26.100 --> 00:18:30.600
And Automator defines a number of them,
which you can, let's see,

00:18:30.600 --> 00:18:33.340
in the Automator Programming Guide,
there's a whole list of

00:18:33.510 --> 00:18:35.600
types that Automator defines.

00:18:35.680 --> 00:18:39.590
We have types for strings and
paths and all sorts of things.

00:18:39.600 --> 00:18:42.950
I can't name them all right here,
but we have a lot of them.

00:18:43.180 --> 00:18:47.200
And so you can use these existing types,
but a lot of times you will

00:18:47.200 --> 00:18:48.360
need to define your own.

00:18:48.510 --> 00:18:50.390
So how do you do that?

00:18:50.950 --> 00:18:53.200
What you want to do is
come up with your string,

00:18:53.220 --> 00:18:58.570
your UTI, and then you'll want to
create a definition bundle.

00:18:59.230 --> 00:19:01.900
"Or a definition file, as we call it.

00:19:01.920 --> 00:19:08.030
And what you want to do is open up Xcode
and go to the new project template.

00:19:08.330 --> 00:19:11.200
You will see a definition
bundle type there.

00:19:11.370 --> 00:19:18.190
Select that, open it up,
and what you will see is a property list

00:19:18.480 --> 00:19:25.200
where you can add or define your types
there along with the human readable name.

00:19:25.270 --> 00:19:28.860
That is important because
Automator in various locations

00:19:29.280 --> 00:19:30.910
displays the name of your type.

00:19:31.390 --> 00:19:35.220
Automator behind the scenes acts
on the UTI type but displays the

00:19:35.230 --> 00:19:37.200
human readable name to the user.

00:19:37.200 --> 00:19:38.270
Amen.

00:19:39.230 --> 00:19:43.720
So once you've got that,
just build it and install it.

00:19:43.760 --> 00:19:49.920
And it can go in any of the appropriate
library automator type locations.

00:19:50.040 --> 00:19:53.410
Or it can even go in the
bundle of your application.

00:19:53.420 --> 00:19:58.730
If you put a library slash automator
folder in the bundle of your app,

00:19:58.870 --> 00:20:01.960
you can put a definition file in there.

00:20:01.990 --> 00:20:03.720
You can even put actions in there.

00:20:03.740 --> 00:20:06.480
Don't know if you knew,
but you can put actions in there.

00:20:06.590 --> 00:20:10.630
And once your app is installed,
Automator will automatically

00:20:11.260 --> 00:20:12.680
see those actions.

00:20:12.730 --> 00:20:16.660
And they'll be loaded
when Automator starts up.

00:20:19.110 --> 00:20:22.170
But you're not really done there,
because defining a custom data type

00:20:22.480 --> 00:20:30.840
isn't the whole story to allowing
Automator to play with your object.

00:20:30.910 --> 00:20:37.090
Because it needs to really be able to
convert from your custom object type to

00:20:37.090 --> 00:20:39.980
other types that it already knows about.

00:20:40.140 --> 00:20:43.890
And that's where
conversion actions come in.

00:20:44.020 --> 00:20:47.780
Emily talked a little bit about
conversion actions this morning.

00:20:47.790 --> 00:20:52.410
But basically what they do
is they convert or filter

00:20:54.060 --> 00:20:56.800
"Your data that's flowing
through a workflow.

00:20:56.850 --> 00:21:01.490
An example of filtering it would be an
action that outputs files and folders

00:21:01.600 --> 00:21:04.960
and the next action requires image files.

00:21:04.990 --> 00:21:07.930
So the conversion action
would just filter out anything

00:21:08.320 --> 00:21:10.000
that isn't an image file.

00:21:10.000 --> 00:21:16.290
The cases of actually converting data or
things like in this example where we have

00:21:16.350 --> 00:21:21.760
an action that outputs an iTunes song,
well the next one requires

00:21:22.610 --> 00:21:23.400
files and folders.

00:21:24.120 --> 00:21:27.990
So what the conversion action does,
which gets executed automatically,

00:21:28.000 --> 00:21:30.700
it just takes a property.

00:21:30.700 --> 00:21:34.000
I think the path to the song is
a property of an iTunes song.

00:21:34.000 --> 00:21:39.500
So it extracts that property
and passes that along.

00:21:40.030 --> 00:21:43.670
So conversion actions are really
important for your actions to

00:21:43.670 --> 00:21:52.950
be able to seamlessly coexist
in the whole Automator world.

00:21:53.550 --> 00:22:04.520
The way that you create
an Automator Action,

00:22:04.520 --> 00:22:04.520
they're really just special
types of Automator Actions.

00:22:04.520 --> 00:22:04.530
You would follow all of the steps to
create a regular Automator Action,

00:22:04.530 --> 00:22:04.530
but

00:22:04.960 --> 00:22:07.050
It has no UI,
so you don't have to worry about that.

00:22:07.270 --> 00:22:09.420
You can, in fact, delete the main nib.

00:22:10.100 --> 00:22:15.210
And then you want to take one
more step and change the product

00:22:15.210 --> 00:22:19.500
extension from Action to C Action.

00:22:20.160 --> 00:22:22.690
And that's all there is to it.

00:22:22.750 --> 00:22:24.340
That's actually the
really important part.

00:22:24.340 --> 00:22:25.770
You can leave the main nib if you want.

00:22:25.870 --> 00:22:27.100
It won't get shown.

00:22:27.150 --> 00:22:31.100
But the one thing that Automator
looks at is the product extension.

00:22:31.100 --> 00:22:34.270
And if it's a C action,
it considers that a conversion action.

00:22:34.280 --> 00:22:37.290
And I'm not going to
go into how to do it.

00:22:37.290 --> 00:22:38.860
We demoed that last year.

00:22:38.860 --> 00:22:42.300
And there's documentation on it in
the Automator Programming Guide.

00:22:42.300 --> 00:22:46.920
But just to give you a little
understanding about why conversion

00:22:46.920 --> 00:22:53.450
actions are important and how they
exist with your custom objects

00:22:53.970 --> 00:22:55.220
and your custom data types.

00:22:55.300 --> 00:23:00.300
And now we get to go on to
the really exciting part.

00:23:00.300 --> 00:23:03.290
This is the part that
I worked on for Leopard.

00:23:04.140 --> 00:23:15.570
New for Leopard,
you are able to load an Automator

00:23:15.570 --> 00:23:21.810
workflow in your application,
execute it, and receive the results back

00:23:21.890 --> 00:23:23.710
in your application as well.

00:23:24.110 --> 00:23:29.340
We have new APIs and new objects
that allow you to do this.

00:23:30.000 --> 00:23:48.500
[Transcript missing]

00:23:49.290 --> 00:23:53.340
So here's the new objects
in the Automator framework.

00:23:53.370 --> 00:23:56.180
The controller object obviously
acts as the link between

00:23:56.620 --> 00:24:00.200
AM workflow and AM workflow view.

00:24:00.360 --> 00:24:03.140
Now these are the same objects
the Automator itself uses.

00:24:03.140 --> 00:24:07.200
The view especially is the same
view that you see in Automator

00:24:07.200 --> 00:24:09.920
and we'll show it later in a demo.

00:24:10.320 --> 00:24:16.270
You may have seen, if you recall in the
Developer Tools State of the Union,

00:24:16.340 --> 00:24:20.550
Todd demonstrated an
Automator workflow in Xcode.

00:24:21.810 --> 00:24:23.800
So, AM Workflow.

00:24:23.910 --> 00:24:29.200
This is the model object for a workflow,
and you load it simply by passing

00:24:29.200 --> 00:24:33.280
it a URL to an Automator workflow.

00:24:33.610 --> 00:24:40.100
Then you can access the properties,
or the actions rather, and the input,

00:24:40.300 --> 00:24:42.740
and the variables as well.

00:24:44.330 --> 00:24:48.930
The NaM Workflow Controller is the
controller object that is mostly

00:24:48.930 --> 00:24:51.280
responsible for running a workflow.

00:24:52.050 --> 00:25:01.020
It also has a set of delegate methods
that you can optionally implement to get

00:25:01.020 --> 00:25:03.190
progress on the running of the workflow.

00:25:03.200 --> 00:25:06.790
You can use it to run a workflow,
such as when the

00:25:06.920 --> 00:25:10.570
workflow starts or stops,
when an action starts

00:25:10.640 --> 00:25:14.910
running or stops running,
or when an error occurs.

00:25:16.600 --> 00:25:20.860
And then there's AM Workflow View,
which is not yet present,

00:25:20.930 --> 00:25:25.890
but it will be for Leopard,
and will allow you to view

00:25:25.890 --> 00:25:31.600
the actions in a workflow,
edit them, add, remove, delete,

00:25:31.680 --> 00:25:32.430
all of that.

00:25:32.640 --> 00:25:36.540
So that behavior,
like creating new workflows,

00:25:36.640 --> 00:25:40.500
is not yet present in the seed,
but it will be.

00:25:40.500 --> 00:25:43.700
So what you can do currently is
you can still load a workflow,

00:25:43.700 --> 00:25:48.500
change the value of a variable,
and save your changes.

00:25:50.500 --> 00:25:54.000
So here's a little bit of code
on how you would load a workflow.

00:25:54.080 --> 00:25:59.600
You would start by a URL or a
path to an Automator document,

00:25:59.780 --> 00:26:02.230
and you would pass that to

00:26:02.720 --> 00:26:09.830
AM workflow, init with contents of URL,
and then there's also an error parameter.

00:26:12.000 --> 00:26:16.430
And then if the result is nil,
then an error occurred and

00:26:16.430 --> 00:26:18.520
you can inspect the error.

00:26:20.020 --> 00:26:22.660
Then how would you get the variables?

00:26:22.780 --> 00:26:26.380
Pretty simple-- value
for variable with name.

00:26:26.390 --> 00:26:30.420
And that will return you
the value of a variable.

00:26:30.420 --> 00:26:33.280
You do have to know the names
of the variables beforehand.

00:26:33.280 --> 00:26:36.640
There isn't an accessor method
to get all of the variables,

00:26:36.650 --> 00:26:39.860
because that doesn't really make
sense in an Automator workflow,

00:26:39.960 --> 00:26:42.970
because you don't know for
a given variable name what

00:26:42.970 --> 00:26:44.640
the actual function of it is.

00:26:44.710 --> 00:26:49.780
So we envision this typically as a
developer would create a workflow

00:26:49.900 --> 00:26:56.040
to perform some specific task,
and then you would save that and bundle

00:26:56.120 --> 00:26:58.640
it possibly in the bundle of your app.

00:26:58.650 --> 00:27:05.030
And then you can load it at will,
or when it makes sense to you,

00:27:05.580 --> 00:27:10.360
and set the values of the variables
before you execute the workflow.

00:27:11.000 --> 00:27:14.620
So that's getting it and then setting
the value of a variable you would

00:27:14.620 --> 00:27:18.170
call set value for variable with name.

00:27:20.610 --> 00:27:23.520
Okay,
so when it comes time to run a workflow,

00:27:23.520 --> 00:27:26.290
there are actually two
different ways to do it.

00:27:26.300 --> 00:27:31.670
And one is really, really easy,
and the other one is just really easy.

00:27:32.190 --> 00:27:37.690
"We have a class method,
so it's a single line in AM workflow.

00:27:37.690 --> 00:27:44.250
And then we have, and I'll show you that,
and then we have AM workflow controller,

00:27:44.250 --> 00:27:44.250
which, um,

00:27:44.440 --> 00:27:48.120
It's a little more work,
but you get more control.

00:27:48.170 --> 00:27:50.720
And workflows, actually,
when you run them,

00:27:50.750 --> 00:27:53.000
they will run in a separate process.

00:27:53.030 --> 00:27:56.840
They will not run in your
application's memory space.

00:27:57.020 --> 00:28:00.880
So the point of that is if the
workflow or an action in the

00:28:00.880 --> 00:28:05.060
workflow crashes while it's running,
it won't bring down your application.

00:28:05.070 --> 00:28:10.650
And you're also protected from errors and
memory leaks and all sorts of that bad

00:28:10.650 --> 00:28:13.570
stuff that we don't like to talk about.

00:28:15.330 --> 00:28:20.350
Okay, so here's how you run a
workflow from the class method.

00:28:21.000 --> 00:28:24.320
Again,
start with a URL to an Automator workflow

00:28:24.750 --> 00:28:32.620
and then hand it off to AMWorkflow,
run workflow at URL with input,

00:28:32.640 --> 00:28:34.880
and the input is optional.

00:28:35.570 --> 00:28:38.440
and then there's an
error parameter as well.

00:28:38.480 --> 00:28:44.180
So if an error happens, well if it runs
successfully and completes,

00:28:44.190 --> 00:28:45.740
you'll get,
because it runs synchronously,

00:28:45.740 --> 00:28:46.900
you'll get the results.

00:28:46.910 --> 00:28:50.020
If the results are nil,
then an error occurred.

00:28:50.570 --> 00:28:53.940
You shouldn't try and inspect
the error if the results aren't

00:28:53.940 --> 00:28:57.530
nil because we won't have set
the error parameter to anything.

00:28:57.590 --> 00:28:59.500
We're not going to set it to nil,
we're just not going to even touch it.

00:28:59.500 --> 00:29:05.450
So just ignore it if there was no
error or if the results were not nil.

00:29:05.490 --> 00:29:09.300
But if the results were nil,
then the error will be an

00:29:09.300 --> 00:29:14.500
NSError object that you can inspect
to find out what went wrong.

00:29:14.500 --> 00:29:16.210
I show the error code.

00:29:16.580 --> 00:29:20.200
We've published also in the
Automator Framework a list of

00:29:20.200 --> 00:29:23.890
the error codes that we return,
so you should be able to

00:29:23.890 --> 00:29:28.380
get a nice description of,
or at least understand what happened.

00:29:29.400 --> 00:29:30.300
All right, so let's demo.

00:29:30.300 --> 00:29:34.500
We're going to demo AM Workflow,
the class method.

00:29:34.500 --> 00:29:39.770
And I should probably show it this way
if you went to the earlier session,

00:29:39.770 --> 00:29:41.700
because that'll make more sense to you.

00:29:41.700 --> 00:29:44.500
And we're going to have
Emily demonstrate it for you.

00:29:46.700 --> 00:29:48.960
Kerry may have written this feature,
but I was the one who wrote the

00:29:49.020 --> 00:29:56.550
cool action we're about to demo,
so... Switch to the demo machine, please.

00:29:59.320 --> 00:30:02.790
Here I have a copy of
TextEdit that I already built,

00:30:02.820 --> 00:30:04.590
and so I'm going to open up this.

00:30:04.970 --> 00:30:06.300
I learned from the earlier session.

00:30:06.300 --> 00:30:09.610
I apologize if anyone couldn't see
from the back from the earlier session,

00:30:09.660 --> 00:30:11.020
so I've learned now.

00:30:11.170 --> 00:30:18.010
And we're going to convert this to, say,
NubText.

00:30:18.450 --> 00:30:19.300
That's great.

00:30:19.300 --> 00:30:23.300
And you can see that we can,
straight from TextEdit, convert,

00:30:23.300 --> 00:30:25.300
basically run Automator
workflows on the input.

00:30:25.300 --> 00:30:29.300
Oh wow, this is completely legible.

00:30:29.690 --> 00:30:33.700
So to see how we did that,
we can open up the TextEdit project

00:30:33.700 --> 00:30:38.440
and here just in the controller
in TextEdit we have a setNudeText.

00:30:38.440 --> 00:30:44.000
And so you can see that we take
the text that was in the document

00:30:44.420 --> 00:30:49.960
and we find the workflow and then
as Kerry pointed out in his slide,

00:30:49.960 --> 00:30:53.800
we simply run workflow at
URL with the input that was

00:30:53.800 --> 00:30:56.260
in the text document already.

00:30:56.260 --> 00:31:01.680
Then we get the result and we basically
put it back into the text document.

00:31:01.680 --> 00:31:02.620
And that's that easy.

00:31:02.620 --> 00:31:05.640
As he said, it was really, really easy.

00:31:05.670 --> 00:31:10.200
So that's TextEdit and I'll hand
it back to Kerry so he can show

00:31:10.200 --> 00:31:12.150
you just the really easy way.

00:31:12.220 --> 00:31:16.150
Back to slides.

00:31:20.780 --> 00:31:21.910
Thanks, Emily.

00:31:21.960 --> 00:31:26.380
Emily came from MIT, so people like that,
I mean, they can read stuff like this.

00:31:26.550 --> 00:31:28.500
It's illegible to me.

00:31:29.410 --> 00:31:34.000
Okay, so running a workflow with
AM Workflow Controller.

00:31:34.170 --> 00:31:39.390
It's a little more work in that
you need to actually load an

00:31:39.390 --> 00:31:44.300
AM Workflow object and then load
an AM Workflow Controller object,

00:31:44.300 --> 00:31:46.630
but it's still just a few lines of code.

00:31:46.790 --> 00:31:51.570
And the delegate is optional, but

00:31:51.790 --> 00:31:54.440
You will need to implement certain
delegate methods if you need to

00:31:54.440 --> 00:32:00.420
know when the workflow finished,
for example, so you can get the

00:32:00.420 --> 00:32:03.660
output of the workflow,
because it runs asynchronously.

00:32:03.830 --> 00:32:07.290
So this is a bit of
code on how that works.

00:32:07.300 --> 00:32:10.700
We have starting with a
URL to a workflow object,

00:32:10.930 --> 00:32:15.370
then we're going to use
that to load an AM workflow.

00:32:17.090 --> 00:32:22.100
Then once we have that, we'll allocate an
AMWorkflowController object,

00:32:22.100 --> 00:32:24.610
which is a simple init method.

00:32:25.360 --> 00:32:29.760
Then we'll use that controller
object and we'll set the workflow.

00:32:29.780 --> 00:32:33.100
We'll set the delegate,
in this case to be self.

00:32:33.370 --> 00:32:35.230
"And then we'll tell it to run.

00:32:35.380 --> 00:32:37.680
And it'll go off and it'll run.

00:32:37.770 --> 00:32:39.390
Runs in a separate process.

00:32:39.630 --> 00:32:41.730
And if we've got our
delegate methods implemented,

00:32:41.750 --> 00:32:43.290
we'll know when it finished.

00:32:43.370 --> 00:32:47.090
And we can go and get the actions,
we can get the output from each action.

00:32:47.090 --> 00:32:51.680
And most likely you're interested
in the output of the last action,

00:32:51.680 --> 00:32:54.800
which is the output of
the entire workflow."

00:32:56.000 --> 00:33:48.800
[Transcript missing]

00:33:50.320 --> 00:33:51.740
Okay, now I'm going to demo.

00:33:51.740 --> 00:33:55.000
I'm going to show you essentially
the same thing that you saw in the

00:33:55.000 --> 00:33:59.170
developer tools state of the union
where we've got it running in Xcode,

00:33:59.230 --> 00:34:03.280
but then I'm going to show you a little
bit of the code and how we did that.

00:34:03.520 --> 00:34:10.090
So if I have, for example,
I have got an action project here.

00:34:10.150 --> 00:34:11.600
Demo machine?

00:34:11.600 --> 00:34:13.060
There we go.

00:34:13.590 --> 00:34:19.700
Okay, I have an action project here
and I can just go to the Xcode

00:34:19.700 --> 00:34:25.500
application menu and here I've got some
workflows that I've built into Xcode.

00:34:25.500 --> 00:34:32.490
The first one is to create a disk
image and it'll take the product

00:34:32.880 --> 00:34:37.490
or the action that this project
builds and it will package it up.

00:34:37.910 --> 00:34:42.970
and then take the package and put it
into a disk image that we're ready to

00:34:43.150 --> 00:34:48.460
send off to our beta testers or whoever.

00:34:48.460 --> 00:34:52.290
Now the nice thing about this,
and it shows the really

00:34:52.710 --> 00:34:56.220
really,
really useful integration of AM workflow

00:34:56.220 --> 00:35:02.190
and variables is that Xcode actually,
before it loaded and showed you this,

00:35:02.190 --> 00:35:05.480
it set the values of the
variables in this workflow.

00:35:05.480 --> 00:35:09.790
So like right here,
the product name has already been sent,

00:35:09.910 --> 00:35:13.660
set to the product name of
this particular project,

00:35:13.910 --> 00:35:18.420
and the product version has been
read and set for this project.

00:35:18.540 --> 00:35:23.830
So each, no matter what project you open,
those variables will be set and will be

00:35:23.830 --> 00:35:26.490
relevant to the project that you're in.

00:35:26.490 --> 00:35:30.890
And so if we run this, we

00:35:31.860 --> 00:35:37.200
We should see that it's going to
create a package there on the desktop.

00:35:37.400 --> 00:36:45.600
[Transcript missing]

00:36:48.740 --> 00:36:52.910
So that's AM Workflow Controller,
and that's new and supposedly

00:36:53.760 --> 00:36:57.540
totally functional in Leopard.

00:36:57.540 --> 00:37:02.130
So that's all we have for today,
and we've learned a lot of important

00:37:02.150 --> 00:37:05.000
things about Automator in Leopard.

00:37:05.000 --> 00:37:10.300
Variables, an important new feature,
and automatic serialization for those

00:37:10.430 --> 00:37:17.380
of you who have data-intensive actions,
and also application integration

00:37:18.340 --> 00:37:22.170
and how to create and define custom
data types and conversion actions.

00:37:22.170 --> 00:37:25.070
So for more information, go to
http://www.amworkflow.com/application-

00:37:25.070 --> 00:37:25.860
integration/.

00:37:27.520 --> 00:37:31.780
We have an Automator
Action Lab directly after this session,

00:37:31.890 --> 00:37:33.690
well at 3:30.

00:37:33.780 --> 00:37:37.560
And so come to us in the lab and
we'll try and answer any questions

00:37:37.560 --> 00:37:41.400
you might have regarding Leopard
or Tiger or Automator Actions,

00:37:41.500 --> 00:37:43.500
Conversion Actions, everything.

00:37:43.550 --> 00:37:47.050
And then there's an
AppleScript Studio session

00:37:47.210 --> 00:37:48.450
and lab tomorrow.

00:37:48.830 --> 00:37:50.500
Sal Segoian, where's Sal?

00:37:50.640 --> 00:37:51.500
Sal's there.

00:37:51.500 --> 00:37:53.470
Sal, who you all know, is here.

00:37:53.490 --> 00:37:59.500
And Todd Fernandez is the
Automation Tools Manager.

00:37:59.500 --> 00:38:02.500
He knows how to create
great Automator Actions.

00:38:02.500 --> 00:38:06.500
And then we also have an Automator
Developer's Mailing List.