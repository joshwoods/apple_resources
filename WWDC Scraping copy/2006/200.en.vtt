WEBVTT

00:00:10.500 --> 00:00:13.140
Hello.

00:00:13.140 --> 00:00:13.740
Hi, everybody.

00:00:13.740 --> 00:00:17.880
Thanks for hanging out
to the end of the day.

00:00:17.880 --> 00:00:19.780
We got some good stuff to show you.

00:00:19.780 --> 00:00:23.700
I don't think the session is
going to go the entire length,

00:00:23.700 --> 00:00:27.660
but we got some great demos,
so it'll be worth your time.

00:00:27.660 --> 00:00:30.450
So we're here talking about
Leopard at the conference,

00:00:30.490 --> 00:00:34.160
which is the latest in our
series of OS X releases.

00:00:34.160 --> 00:00:36.570
If you've been with us
through the whole journey,

00:00:36.570 --> 00:00:38.290
it's been quite an amazing one.

00:00:38.320 --> 00:00:43.150
And I'm going to talk a little bit about
some of the things we've done through

00:00:43.150 --> 00:00:46.220
the journey of Mac OS X since 10.0.

00:00:46.220 --> 00:00:50.790
And I'm going to talk about it from
a standpoint of an innovation cycle,

00:00:50.790 --> 00:00:55.580
where we build technologies into the OS,
and the applications take advantage of

00:00:55.580 --> 00:00:57.700
those technologies and build products.

00:00:57.800 --> 00:01:00.030
And then we see how the
products worked out,

00:01:00.040 --> 00:01:02.210
we get some feedback,
we think of new ideas

00:01:02.210 --> 00:01:05.840
how to make that easier,
and build more technology back in the OS.

00:01:05.950 --> 00:01:08.300
And we've been doing that for the
five years that OS X has been around.

00:01:08.320 --> 00:01:11.320
And I think it's done really well.

00:01:11.320 --> 00:01:13.590
So let's do a little bit of
a history review right now.

00:01:13.600 --> 00:01:19.520
So on the technology front,
when OS X 1.0 came out, or 10.0 came out,

00:01:19.820 --> 00:01:22.660
there was a bunch of things we knew
we had to do in the operating system,

00:01:22.660 --> 00:01:25.380
obviously,
to modernize ourselves from the

00:01:25.450 --> 00:01:27.770
old classic Mac OS code base.

00:01:27.910 --> 00:01:29.570
So first was 2D graphics.

00:01:29.580 --> 00:01:33.320
The 2D graphics,
the engine of the user interface,

00:01:33.320 --> 00:01:37.970
we upgraded with PDF and
PostScript compatible imaging model.

00:01:38.320 --> 00:01:42.040
We used a windowing system that
had a compositing engine built

00:01:42.040 --> 00:01:45.900
into it for nice alpha anti-aliased
windows with drop shadows.

00:01:46.080 --> 00:01:51.540
We used QuickTime, obviously,
for our media strategy.

00:01:51.570 --> 00:01:54.810
QuickTime, very popular and been
around for a long time,

00:01:54.930 --> 00:01:58.650
tried and true, and we put that right
into Mac OS X as well.

00:01:58.820 --> 00:02:02.390
For 3D graphics,
the choice was pretty obvious, OpenGL.

00:02:02.560 --> 00:02:03.690
We built that in.

00:02:03.760 --> 00:02:06.480
For audio,
we knew we had to do some work.

00:02:06.560 --> 00:02:12.500
Sound Manager was... Not really going to
cut it in our modern operating system.

00:02:12.740 --> 00:02:17.680
So we moved to Core Audio,
really low latency audio solution for

00:02:17.680 --> 00:02:20.860
a full preemptive operating system.

00:02:20.860 --> 00:02:23.000
Really a great innovation there.

00:02:23.200 --> 00:02:26.950
And at the time, digital photography was
starting to come out.

00:02:27.320 --> 00:02:31.860
So we built in support in OS X.0,
just plug and play with a lot

00:02:31.860 --> 00:02:35.890
of the USB cameras that were
coming online at the time.

00:02:36.080 --> 00:02:37.950
Then let's look at what we did.

00:02:38.000 --> 00:02:38.280
Then let's look at what we did.

00:02:38.280 --> 00:02:40.310
We added in Jaguar.

00:02:40.450 --> 00:02:44.190
Jaguar, we added Quartz Extreme,
which was taking that 2D windowing

00:02:44.310 --> 00:02:48.170
system with all the alpha channel and
compositing and moving all of that

00:02:48.170 --> 00:02:53.440
up to the GPU to accelerate it to
get a really fluid windowing system.

00:02:55.010 --> 00:02:59.270
We also upgraded QuickTime at that
point to track the standards that

00:02:59.370 --> 00:03:00.960
were going on in the media industry.

00:03:00.960 --> 00:03:03.980
That was MPEG-4,
a critical standard there,

00:03:03.980 --> 00:03:07.800
especially for audio, the AAC standard,
which was a really great

00:03:07.800 --> 00:03:10.530
investment for us with QuickTime 6.

00:03:10.540 --> 00:03:17.570
Then in Panther OS 10.3,
a couple of more things we added.

00:03:17.580 --> 00:03:20.210
We added WebKit,
working with the open source

00:03:20.210 --> 00:03:24.460
community to build a really great
browsing engine right into Mac OS X.

00:03:24.900 --> 00:03:29.110
GPUs were coming on the scene with
programmability at this point,

00:03:29.260 --> 00:03:33.100
and so we built in all the
programmable APIs into OpenGL so you

00:03:33.100 --> 00:03:35.700
could access GPU programmability.

00:03:35.700 --> 00:03:41.420
This was a pretty significant
thing in the evolution of GPUs.

00:03:41.610 --> 00:03:47.580
And as you know, last release in Tiger,
we released a bunch of new stuff as well.

00:03:47.580 --> 00:03:49.960
On the QuickTime front,
we upgraded the codecs once

00:03:50.050 --> 00:03:53.600
again following our standard
strategy to go with H.264.

00:03:53.600 --> 00:03:58.340
This has been a great codec for us,
a real important foundation technology.

00:03:58.410 --> 00:04:01.780
We added camera RAW support
into the OS for all the digital

00:04:01.780 --> 00:04:03.470
still cameras out there.

00:04:03.480 --> 00:04:06.630
Very complicated to
decode the sensor data,

00:04:06.630 --> 00:04:09.090
and we built all that into the OS.

00:04:09.220 --> 00:04:10.900
You can just open RAW images and preview.

00:04:11.710 --> 00:04:12.310
That's great.

00:04:12.720 --> 00:04:16.100
And then Core Image,
an image processing framework

00:04:16.100 --> 00:04:20.500
built to survive the test of time
in terms of revolutionary GPU and

00:04:20.500 --> 00:04:24.800
CPU parallel architectures,
where you can express algorithms

00:04:25.090 --> 00:04:29.100
that you don't have to recode them
every time a processor changes.

00:04:29.100 --> 00:04:33.900
And of course, Quartz Composer,
really a fun tool that we added

00:04:33.900 --> 00:04:38.710
to build procedural animations
and data-driven animations without

00:04:38.720 --> 00:04:41.140
having to write a line of code.

00:04:41.370 --> 00:04:44.900
And so that's what kind of we've
been up to at the technology front.

00:04:44.900 --> 00:04:48.360
And let's kind of rewind the clock
and go back through some of the

00:04:48.360 --> 00:04:50.230
products that came out of that.

00:04:50.360 --> 00:04:51.870
First off, the Aqua user interface.

00:04:52.220 --> 00:04:55.700
Aqua user interface,
incredible in the day to look at those

00:04:55.700 --> 00:05:00.760
edges of those anti-aliased windows,
the dock, how it's smoothly animated,

00:05:00.760 --> 00:05:03.960
you know,
with no aliasing when it's scaled.

00:05:03.960 --> 00:05:06.450
I mean,
really upgraded the user experience

00:05:06.570 --> 00:05:10.300
and just the fit and finish
of a desktop operating system.

00:05:10.300 --> 00:05:11.340
A huge amount.

00:05:11.340 --> 00:05:13.280
Of course, we weren't accelerating
anything at that point,

00:05:13.470 --> 00:05:17.340
but we took the hit because we know we
wanted a compositing windowing system,

00:05:17.450 --> 00:05:19.340
and that was a great investment.

00:05:20.430 --> 00:05:22.300
The other thing that came
along about that time,

00:05:22.300 --> 00:05:24.300
2002, was iPhoto.

00:05:24.320 --> 00:05:27.560
Again, taking advantage of the digital
camera support in the OS,

00:05:27.630 --> 00:05:29.750
obviously taking advantage
of QuickTime and all of

00:05:29.750 --> 00:05:31.080
our 2D graphics APIs.

00:05:31.080 --> 00:05:36.150
In 2003, the Music Store came online,
and here's where the investment in

00:05:36.150 --> 00:05:40.250
AAC and some modern audio coding
technology really helped out.

00:05:40.260 --> 00:05:43.720
Of course, Core Audio playing a role
as well as QuickTime.

00:05:46.020 --> 00:05:47.300
And then Keynote.

00:05:47.300 --> 00:05:50.800
Keynote was a real significant
application for me.

00:05:50.800 --> 00:05:53.810
I think we talked about it at
one of the WWDCs a few years ago,

00:05:54.130 --> 00:05:56.910
because it really, of the day,
took advantage of a lot of

00:05:56.910 --> 00:05:58.590
the technology we built in.

00:05:58.600 --> 00:06:01.700
Gorgeous 2D graphics and typography,
video on a texture

00:06:01.770 --> 00:06:05.140
complete with transparency,
OpenGL, when you go full screen

00:06:05.210 --> 00:06:07.630
and do a presentation,
it's taking advantage

00:06:07.710 --> 00:06:09.140
of the graphics card.

00:06:09.140 --> 00:06:12.540
All of the technology is built
together to make a really

00:06:12.540 --> 00:06:15.880
compelling presentation application.

00:06:15.900 --> 00:06:18.440
That I still think has yet to be beaten.

00:06:18.440 --> 00:06:21.020
I think Keynote's a
really great application.

00:06:21.020 --> 00:06:22.920
Safari.

00:06:22.920 --> 00:06:29.370
Again, reinvigorating the web
browser market a little bit.

00:06:29.380 --> 00:06:32.940
After a hiatus,
Safari and the other open source

00:06:32.940 --> 00:06:35.740
browsing engines really came online
and really kind of drove browsing

00:06:36.180 --> 00:06:37.800
experiences to the next level.

00:06:37.800 --> 00:06:41.370
And I always remember as a graphics
guy when I first saw Safari rendering

00:06:41.640 --> 00:06:45.020
with nice anti-aliased fonts and
everything looking really cool.

00:06:45.020 --> 00:06:45.880
It's like, yeah, you never know.

00:06:45.880 --> 00:06:48.260
I never knew the web could look so good.

00:06:48.260 --> 00:06:51.210
And really,
I think Safari is a great application

00:06:51.210 --> 00:06:55.240
that shows off a lot of the graphics
technology in the OS as well.

00:06:55.240 --> 00:06:56.320
Then Expose.

00:06:56.360 --> 00:07:01.530
Expose was interesting because it was
an interplay between the technology

00:07:01.530 --> 00:07:03.830
and the user experience guys.

00:07:03.840 --> 00:07:06.800
Once they realized with Quartz
Extreme that we could move around

00:07:06.800 --> 00:07:10.020
all the windows in real time and
everything was getting accelerated,

00:07:10.020 --> 00:07:12.580
they said, well, hey,
we can apply that to the problem

00:07:12.580 --> 00:07:15.880
of window management and make it
a lot easier for users to manage.

00:07:15.880 --> 00:07:17.430
Windows on their screen.

00:07:17.560 --> 00:07:21.040
And so we get Expose,
which was a really great innovation.

00:07:21.040 --> 00:07:26.720
Again, leveraging OpenGL and
the power of the GPU.

00:07:26.720 --> 00:07:31.190
Apple came out with Motion,
an application that kind of redefined how

00:07:31.190 --> 00:07:34.040
motion graphics applications are done.

00:07:34.040 --> 00:07:38.040
Very visual, lots of feedback,
real-time feedback.

00:07:38.040 --> 00:07:43.880
Really great application and leveraging a
lot of the technology built into the OS.

00:07:43.880 --> 00:07:44.700
Then, of course,
I think the most important

00:07:44.700 --> 00:07:45.880
thing is that we have a lot
of the technology that we use.

00:07:45.880 --> 00:07:48.740
iChat U plus 3 has that great
user interface done with

00:07:48.860 --> 00:07:52.640
OpenGL with the reflections,
uses the greatest codec technology,

00:07:52.640 --> 00:07:56.790
H.264, core audio,
all of those things put together to

00:07:56.800 --> 00:07:59.240
make a compelling user experience.

00:07:59.240 --> 00:08:02.890
Dashboard, again,
once you realize you can

00:08:02.890 --> 00:08:07.070
put an information overlay
over an entire display,

00:08:07.220 --> 00:08:12.110
and you can use WebKit to do that,
you have a great way to manage

00:08:12.120 --> 00:08:15.300
data as an overlay on your display.

00:08:15.880 --> 00:08:18.900
Next up was Aperture, again,
taking advantage of the

00:08:18.900 --> 00:08:19.960
digital photography.

00:08:19.980 --> 00:08:23.330
The Quartz Extreme compositing
windowing system for some of their

00:08:23.370 --> 00:08:26.690
heads-up user interfaces and their
animated full-screen displays.

00:08:26.840 --> 00:08:29.680
Taking advantage of
Bra built into the platform,

00:08:29.730 --> 00:08:32.320
taking advantage of Core Image for
the processing pipeline.

00:08:32.710 --> 00:08:37.360
Kind of pushing the limits in how
to deal with digital photography and

00:08:37.460 --> 00:08:40.490
really some breakthrough things there.

00:08:42.020 --> 00:08:44.440
Then again,
back to iTunes for the Video Store.

00:08:44.440 --> 00:08:48.960
The Video Store was launched in 2005,
takes advantage of H.264 and

00:08:49.350 --> 00:08:54.560
QuickTime to be able to sell videos
on the web that are reasonable size

00:08:54.570 --> 00:08:56.900
to download and pretty good quality.

00:08:59.680 --> 00:09:00.150
Photo Booth.

00:09:00.320 --> 00:09:03.990
Photo Booth was a great
application to kind of,

00:09:03.990 --> 00:09:08.010
I think it happened in the
span of about three weeks.

00:09:08.020 --> 00:09:10.460
You know, we were going to ship these
iMacs with the cameras in them,

00:09:10.460 --> 00:09:12.290
and someone said, well,
unless you've got a

00:09:12.290 --> 00:09:15.040
buddy to conference with,
there's really nothing when a consumer

00:09:15.040 --> 00:09:16.290
opens it that they would have.

00:09:16.320 --> 00:09:18.060
And so there was this
bomb run effort to see,

00:09:18.060 --> 00:09:19.900
well, what can we do that's sort of fun?

00:09:19.900 --> 00:09:21.080
And Photo Booth came out of that.

00:09:21.250 --> 00:09:22.900
And the reason we could
do that so quickly,

00:09:22.920 --> 00:09:25.180
obviously,
was technology like Quartz Composer

00:09:25.180 --> 00:09:28.470
that we built into the OS to be
able to just put that application

00:09:28.470 --> 00:09:30.180
together relatively quickly.

00:09:30.180 --> 00:09:32.280
And it's been phenomenally popular.

00:09:32.280 --> 00:09:36.590
I mean, even I myself find myself sitting
in front of Photo Booth just

00:09:36.590 --> 00:09:38.720
playing with the distortions.

00:09:40.400 --> 00:09:41.440
Yeah, you can waste a lot of time.

00:09:41.460 --> 00:09:44.720
And finally, Front Row.

00:09:44.720 --> 00:09:49.430
Front Row, you see us getting into more
of the 10-foot user interfaces,

00:09:49.430 --> 00:09:53.540
using the same plumbing that's in
the OS in terms of Quartz Extreme,

00:09:53.540 --> 00:09:58.170
OpenGL, Quartz Composer,
to build a very engaging user interface.

00:09:58.320 --> 00:10:02.280
But it hasn't only been us taking
advantage of all of these technologies.

00:10:02.280 --> 00:10:04.740
You guys, as well,
have been doing some amazing

00:10:04.740 --> 00:10:06.610
applications on top of all this stuff.

00:10:06.720 --> 00:10:08.610
And I'd just like to
acknowledge a few of them.

00:10:08.620 --> 00:10:10.320
OmniGraffle in 2001.

00:10:10.320 --> 00:10:14.680
I think this is a great application
for boxes and lines editing.

00:10:14.680 --> 00:10:17.300
You're always making diagrams,
and this is always the

00:10:17.350 --> 00:10:18.720
easiest way to do it,
I find.

00:10:18.790 --> 00:10:19.680
Great tool.

00:10:19.680 --> 00:10:22.790
Scott mentioned ToySight,
which is another really interesting

00:10:22.790 --> 00:10:26.500
game that takes advantage of the camera,
and you can interact with the camera,

00:10:26.630 --> 00:10:27.820
which is really fun.

00:10:27.820 --> 00:10:28.730
Big Bang Chess.

00:10:28.730 --> 00:10:32.740
I think this app takes advantage of
practically everything in the platform,

00:10:32.740 --> 00:10:35.130
including chat and all
the graphics stuff.

00:10:35.220 --> 00:10:39.440
Kind of a really interesting...
Never knew chess could be so cool.

00:10:39.570 --> 00:10:40.210
Comic Life.

00:10:40.210 --> 00:10:45.800
A great application for creating
little comic book setups

00:10:45.850 --> 00:10:48.910
with your personal photos,
adding effects to them.

00:10:49.230 --> 00:10:50.900
Takes advantage of a
lot of the technology,

00:10:50.940 --> 00:10:53.180
even core image,
to do some image processing.

00:10:53.290 --> 00:10:55.240
That's a pretty interesting app.

00:10:55.240 --> 00:10:56.460
And of course, Delicious Library.

00:10:56.550 --> 00:10:57.790
Gorgeous user interface.

00:10:57.880 --> 00:11:01.480
All your stuff kind of rendered
on your virtual bookshelf.

00:11:01.480 --> 00:11:03.760
A very cool app.

00:11:03.840 --> 00:11:07.810
So that's kind of the innovation
cycle where... We see kind of all of

00:11:07.980 --> 00:11:12.850
us and all of you evolving together
as the technology landscape changes,

00:11:13.020 --> 00:11:16.270
and our users give us feedback,
and we come up with new ideas.

00:11:16.530 --> 00:11:20.400
We're all able to kind of feed on each
other and create a great ecosystem,

00:11:20.400 --> 00:11:22.980
and that's one of the
great things about the Mac.

00:11:23.100 --> 00:11:27.840
And so my analogy for this is
it's kind of like a jazz combo,

00:11:27.840 --> 00:11:30.640
you know, in the Smokey Nightclub,
and everyone's riffing off each other,

00:11:30.640 --> 00:11:33.150
and we get GPU programmability here.

00:11:33.160 --> 00:11:35.130
Oh, let's go do motion,
or let's go do core image,

00:11:35.130 --> 00:11:36.180
or something like that.

00:11:36.720 --> 00:11:40.060
So it's a really pretty exciting,
innovative way to go.

00:11:40.080 --> 00:11:48.520
Now, if you compare that with what
might be going on up north... .

00:11:51.050 --> 00:11:58.610
This year we can,
because this is not out yet.

00:11:58.610 --> 00:12:05.870
I played trumpet in
high school and college,

00:12:05.980 --> 00:12:08.900
and C# was a bear.

00:12:08.900 --> 00:12:09.490
You could not improvise
in C# to save anything.

00:12:09.490 --> 00:12:09.490
But seriously...

00:12:15.000 --> 00:12:16.320
I think there is a point here.

00:12:16.320 --> 00:12:20.460
It's in fun, of course,
but I think being a little more fluid

00:12:20.460 --> 00:12:25.360
and a little more interactive and a
little more able to incorporate feedback.

00:12:25.360 --> 00:12:27.570
If you want to pick up an
instrument and play it,

00:12:27.570 --> 00:12:29.750
if you want to write
something in Ruby or Perl,

00:12:29.750 --> 00:12:31.510
if it's not managed code, oh no.

00:12:31.520 --> 00:12:35.810
It's a lot more fluid technology
landscape out there than some of

00:12:36.130 --> 00:12:38.980
these grand architectures acknowledge.

00:12:38.980 --> 00:12:42.170
I think that that's kind of an
interesting point to think about.

00:12:42.280 --> 00:12:44.400
I hope you found that amusing.

00:12:44.880 --> 00:12:46.970
Okay, on to the serious stuff.

00:12:47.000 --> 00:12:51.020
We're going to talk about all the media
technologies we have in Leopard for you,

00:12:51.060 --> 00:12:55.500
our audio, 2D, 3D imaging,
and video technologies.

00:12:55.500 --> 00:12:59.280
Let's start with audio,
what's new in audio in Leopard.

00:12:59.280 --> 00:13:03.130
We've got the audio QAPIs,
which is a new API for feeding

00:13:03.130 --> 00:13:05.700
compressed data into the system.

00:13:05.700 --> 00:13:08.830
We've got a panner audio unit,
which is kind of the guts of

00:13:08.840 --> 00:13:10.650
our OpenAL implementation.

00:13:10.660 --> 00:13:13.840
It's 3D positional audio,
available as an audio unit.

00:13:14.800 --> 00:13:18.780
We have some great interaction
between QuickTime and Core Audio now,

00:13:18.780 --> 00:13:23.760
where you can insert an audio unit into
the QuickTime audio playback pathway.

00:13:23.850 --> 00:13:25.700
This is really interesting.

00:13:25.790 --> 00:13:28.840
You can imagine combining that
with the panner audio unit,

00:13:28.840 --> 00:13:30.760
and if you're playing video on
a texture and flying it around,

00:13:30.760 --> 00:13:34.730
you could have it actually position its
sound source where you want it to be.

00:13:34.760 --> 00:13:38.750
There's a new API, a new framework called
Hardware Media Control,

00:13:38.760 --> 00:13:44.640
which is about controlling devices
like big instruments or mixing boards,

00:13:44.640 --> 00:13:48.000
and you can actually control
surfaces in a really straightforward,

00:13:48.000 --> 00:13:48.420
easy way.

00:13:48.640 --> 00:13:52.610
And of course, there's OpenAL,
keeping up with the standard there,

00:13:52.760 --> 00:13:57.970
OpenAL 1.1, and some extensions as well
that we're adding onto that to

00:13:57.970 --> 00:13:59.560
leverage some of the audio units.

00:13:59.640 --> 00:14:03.130
One thing I thought I'd
point out on Core Audio is

00:14:03.140 --> 00:14:05.640
this application called Rax.

00:14:05.640 --> 00:14:08.640
It was one of the
Design Award entries this year.

00:14:08.640 --> 00:14:10.620
Really interesting application.

00:14:10.700 --> 00:14:12.630
It's basically built for performance.

00:14:12.640 --> 00:14:14.520
And so this is your setup mode.

00:14:14.520 --> 00:14:16.470
Where you'd kind of set
up all your instruments,

00:14:16.550 --> 00:14:19.330
some of which you're probably
going to play with a MIDI keyboard,

00:14:19.440 --> 00:14:21.390
some of which might be
played by the computer.

00:14:21.480 --> 00:14:23.390
You can set up your
playlists and all of that.

00:14:23.460 --> 00:14:27.390
They've even skinned our audio
units with some really nice UI.

00:14:27.400 --> 00:14:29.290
This is all very
interactive and animated.

00:14:29.400 --> 00:14:33.260
This is the Matrix Reverb
UI that they've put together,

00:14:33.500 --> 00:14:37.270
which is just our standard audio unit.

00:14:37.510 --> 00:14:40.250
And then when you go live,
you press the big go on

00:14:40.250 --> 00:14:41.400
stage button up there.

00:14:41.400 --> 00:14:45.240
And it flips over and you get a
performance-oriented user interfaces

00:14:45.340 --> 00:14:48.880
where if you're playing and standing
back a little bit from the computer,

00:14:48.880 --> 00:14:50.910
you get exactly what you need.

00:14:50.910 --> 00:14:54.820
You get your output levels, any notes,
the audio load on the system,

00:14:54.920 --> 00:14:55.770
your set list.

00:14:55.770 --> 00:14:58.850
And in the middle,
they have a Quartz Composer

00:14:59.410 --> 00:15:03.480
visualizer that you can plug
in to play on a second monitor.

00:15:03.480 --> 00:15:07.880
And they have a nice way to package
up Quartz compositions and feed them

00:15:07.880 --> 00:15:11.280
MIDI data or sound data in order
to get a visualization of React.

00:15:11.380 --> 00:15:14.580
But anyway, kind of a vertical app,
but I thought real interesting in

00:15:14.580 --> 00:15:18.350
terms of how it's leveraged all of the
technology and done some interesting

00:15:18.360 --> 00:15:20.300
things with user interface as well.

00:15:21.780 --> 00:15:23.700
A bunch of audio sessions.

00:15:23.880 --> 00:15:29.550
Find your favorite one quick before
I click the slide and check them out.

00:15:29.750 --> 00:15:32.090
OK, that's audio.

00:15:32.380 --> 00:15:35.070
Let's talk about 2D graphics.

00:15:35.750 --> 00:15:37.800
Quartz 2D and PDF, what's new there?

00:15:37.800 --> 00:15:41.210
The Quartz GL acceleration layer,
we've been working on

00:15:41.210 --> 00:15:44.810
this for a few years,
and it is in Leopard, and it is opt-in,

00:15:44.810 --> 00:15:47.880
so you turn it on if it
helps your performance.

00:15:47.880 --> 00:15:50.620
We found that the performance
profile of 2D graphics,

00:15:50.620 --> 00:15:53.180
it depends heavily on
the application workload.

00:15:53.180 --> 00:15:56.170
In some cases,
accelerate it with the GPU is not.

00:15:56.170 --> 00:15:57.720
In some cases, it is.

00:15:57.720 --> 00:15:59.500
So you can opt into that.

00:15:59.500 --> 00:16:02.040
We have a 16-bit per
component rendering pipeline,

00:16:02.040 --> 00:16:05.660
which is plumbed all the way through
ColorSync for image processing as well.

00:16:05.730 --> 00:16:09.620
We had a floating point rendering
pipeline that we had in Tiger,

00:16:09.620 --> 00:16:12.600
and this adds an intermediate
one in case floating point is too

00:16:12.600 --> 00:16:15.560
much data for your application,
so that's great.

00:16:15.560 --> 00:16:21.340
We've enhanced the print dialogs and
upgraded our printer engine to CUPS 1.2.

00:16:21.340 --> 00:16:26.000
That brings along IPv6 and
some other enhancements there.

00:16:26.000 --> 00:16:29.740
And previews getting an overhaul
with an updated user interface,

00:16:29.740 --> 00:16:32.980
some better searching,
and improved image editing.

00:16:32.980 --> 00:16:35.680
And I will show you some of that.

00:16:35.740 --> 00:16:36.610
In a minute.

00:16:36.790 --> 00:16:40.220
But I have to give the obligatory
plug for the Quartz book.

00:16:40.320 --> 00:16:41.570
How many of you guys have this book?

00:16:41.610 --> 00:16:43.440
Yes, great book.

00:16:43.440 --> 00:16:48.620
Written by people at Apple,
and incredibly well written

00:16:48.620 --> 00:16:50.710
and very comprehensive.

00:16:50.800 --> 00:16:53.790
It kind of reminds me of the
red book in the PostScript days.

00:16:53.840 --> 00:16:56.540
If you're programming Quartz,
you need this book.

00:16:59.800 --> 00:17:42.500
[Transcript missing]

00:17:49.800 --> 00:17:53.280
So I'm going to launch
the new interface builder,

00:17:53.380 --> 00:17:57.760
create a Cocoa windowed application.

00:18:00.600 --> 00:18:03.780
Make my menu-- make my window big.

00:18:03.780 --> 00:18:09.390
I'm going to drag out the
PDF document view here.

00:18:12.830 --> 00:18:17.200
becomes pre-populated with a copy
of the PDF kit programming guide,

00:18:17.310 --> 00:18:19.190
conveniently enough.

00:18:20.510 --> 00:18:24.000
So while you're coding,
you can-- I'm going to bring

00:18:24.000 --> 00:18:27.560
out-- this is the thumbnail view
that I said was the new view.

00:18:27.560 --> 00:18:31.210
And I'm just trying to position him here.

00:18:33.700 --> 00:18:38.910
Let me select the document view
again and bring up the inspector.

00:18:39.090 --> 00:18:44.230
And the inspector has a bunch of
features for PDF that are PDF specific.

00:18:44.550 --> 00:18:46.010
You can have it auto scale.

00:18:46.140 --> 00:18:48.240
You can have it go two up.

00:18:48.280 --> 00:18:50.910
These are available as methods as well,
if you want to call them.

00:18:50.990 --> 00:18:54.180
But we have them in the
configuration UI here as well.

00:18:54.180 --> 00:18:58.780
So let's leave it single page
continuous with auto scaling on.

00:18:58.860 --> 00:19:01.970
And then I'm going to go to the start

00:19:02.180 --> 00:19:10.000
This is the thumbnail view which
I need to make stretch like that.

00:19:11.390 --> 00:19:13.300
And now I have to connect the two up.

00:19:13.380 --> 00:19:17.980
So I'm going to hold down
Control and do the new connection

00:19:17.980 --> 00:19:25.590
inspector to make the PDF view be
that outlet of the thumbnail view.

00:19:25.960 --> 00:19:32.480
Now I'm going to select both and
layout and embed them in a split view.

00:19:33.010 --> 00:19:36.060
I'm going to adjust
my split view springs.

00:19:36.060 --> 00:19:39.270
And if you cross your fingers,

00:19:39.360 --> 00:19:42.650
Let's simulate the interface here.

00:19:42.780 --> 00:19:45.700
So again,
it loads up by default with the PDF view,

00:19:45.750 --> 00:19:47.520
with the PDF document.

00:19:47.520 --> 00:19:48.860
And hey, I got the springs right.

00:19:48.860 --> 00:19:51.920
So it's all sizing correctly.

00:19:51.940 --> 00:19:54.120
And this can be multi-column.

00:19:54.200 --> 00:19:57.200
So that's a new feature we're adding.

00:19:57.200 --> 00:19:59.200
So that's pretty cool.

00:20:03.480 --> 00:20:05.210
And this is all, you know, live.

00:20:05.330 --> 00:20:08.910
Obviously, it's taking events and,
you know, you can select and do all

00:20:08.920 --> 00:20:13.250
that sort of stuff built into
the document view itself.

00:20:14.180 --> 00:20:19.090
The other thing you can do
with the thumbnail view is we

00:20:19.090 --> 00:20:20.760
allow you to reorder pages.

00:20:20.850 --> 00:20:23.400
So you can pick up a page,
move it to the beginning.

00:20:23.620 --> 00:20:27.310
Pick up a page, move it to the end.

00:20:27.760 --> 00:20:31.110
I should be able to delete a blank page,
but I didn't put an edit menu in there.

00:20:31.550 --> 00:20:33.310
But that would be pretty easy as well.

00:20:33.460 --> 00:20:36.270
You can also drag in
images from the desktop,

00:20:36.290 --> 00:20:40.300
and it'll just make a page and
insert it right in there for you.

00:20:44.200 --> 00:20:46.060
So that's pretty straightforward to do.

00:20:46.060 --> 00:20:49.200
Obviously, some of these features
you may see in preview.

00:20:49.220 --> 00:20:52.270
But it's all available to you in PDF kit.

00:20:52.420 --> 00:20:55.710
So that's the PDF kit demo.

00:20:55.720 --> 00:20:59.980
I'll just quit Interface Builder
and go back to the slides.

00:20:59.980 --> 00:21:01.890
Thanks.

00:21:06.770 --> 00:21:08.900
So the other thing I wanted to
talk to you in the 2D graphics

00:21:08.900 --> 00:21:10.050
realm is Core Animation.

00:21:10.060 --> 00:21:13.260
A lot of the demos you saw of
Core Animation were kind of 3D,

00:21:13.260 --> 00:21:15.190
but it's really a 2D technology.

00:21:15.200 --> 00:21:19.700
It has enough 3D to do 3D,
convincing 3D scenes with depth

00:21:19.940 --> 00:21:23.750
queuing and Z opacity sorting,
but it's really a layering

00:21:23.750 --> 00:21:24.890
engine at its heart.

00:21:24.940 --> 00:21:27.520
It allows us to create
high production value,

00:21:27.520 --> 00:21:30.840
user experiences,
smooth transitions between state.

00:21:30.840 --> 00:21:33.020
I talked about the implicit
animations earlier.

00:21:33.020 --> 00:21:35.760
Layers are really the building block.

00:21:35.960 --> 00:21:40.550
So it's a fast animating layering engine.

00:21:40.600 --> 00:23:24.400
[Transcript missing]

00:23:24.890 --> 00:23:27.960
You can have a sublayers entry, again,
very NSView-like.

00:23:28.040 --> 00:23:31.530
Sublayers are the children of the layer.

00:23:31.630 --> 00:23:36.220
You can have border,
which can be rounded, of course.

00:23:36.260 --> 00:23:39.800
Then you can apply a filter
to the contents of the layer.

00:23:39.800 --> 00:23:41.580
You can apply a shadow to a layer.

00:23:41.580 --> 00:23:46.250
In this case,
it's red for illustration purposes.

00:23:46.350 --> 00:23:47.570
You can then fade the layers.

00:23:47.580 --> 00:23:49.710
Every layer has an opacity.

00:23:49.740 --> 00:23:53.960
You can composite the layer into a
background through any Core Image filter

00:23:53.960 --> 00:23:56.440
that takes two in and one out.

00:23:56.440 --> 00:23:59.680
Then you can apply a mask to that.

00:23:59.680 --> 00:24:02.900
Actually what LayerKit does,
every frame of every animation,

00:24:02.900 --> 00:24:06.620
is transfer everything
into the rendering engine.

00:24:06.620 --> 00:24:08.780
The rendering engine builds
a Core Image graph for it,

00:24:08.780 --> 00:24:12.000
every frame,
and compiles it to the GPU and draws it.

00:24:12.080 --> 00:24:14.730
It's all built on top of Core Image,
and that's why you see Core Image effects

00:24:14.750 --> 00:24:18.280
available as properties along the way.

00:24:18.280 --> 00:24:22.020
There's the 2D graphics sessions.

00:24:22.020 --> 00:24:24.520
Take note or look at your schedule guide.

00:24:24.520 --> 00:24:26.550
Let's talk about 3D.

00:24:28.400 --> 00:24:34.340
So 3D graphics, OpenGL, obviously,
you know, our foundation for 3D graphics.

00:24:34.340 --> 00:24:38.260
We talked about the
multi-threaded engine before.

00:24:38.260 --> 00:24:41.950
We're upgrading to OpenGL 2.1,
which was just announced

00:24:41.960 --> 00:24:43.050
to Graph last week.

00:24:43.060 --> 00:24:48.560
We pick up things from 2.0 as well,
like non-power of two textures.

00:24:48.560 --> 00:24:50.410
There's some shading language extensions.

00:24:50.830 --> 00:24:53.320
We're also including
support for OpenGL ES,

00:24:53.320 --> 00:24:59.560
which is an embedded version of OpenGL,
which has some simplifications, actually,

00:24:59.560 --> 00:25:00.800
over the OpenGL API.

00:25:00.800 --> 00:25:04.620
There's a lot of debate in the
OpenGL community as to whether a

00:25:04.620 --> 00:25:08.290
more simplified API like OpenGL ES,
which is actually more in line

00:25:08.290 --> 00:25:11.340
with what the hardware does,
is kind of the way to go moving forward.

00:25:11.340 --> 00:25:14.330
So we thought it was interesting
to start looking at ES.

00:25:14.380 --> 00:25:18.760
And ES and GL are coming together anyway
in a new standards group called Kronos.

00:25:18.910 --> 00:25:20.560
So I don't know if you follow OpenGL.

00:25:20.700 --> 00:25:23.640
But all of this sort of makes
sense and where OpenGL is going.

00:25:23.640 --> 00:25:28.030
And 64-bit is kind of implicit in a lot
of the frameworks we're talking about.

00:25:28.040 --> 00:25:31.690
But I thought I would mention
it here in OpenGL in particular

00:25:31.690 --> 00:25:35.670
because I think a lot of scientific
visualization applications

00:25:35.670 --> 00:25:38.100
really want to move to 64-bit.

00:25:38.100 --> 00:25:40.500
And so we're there with full OpenGL.

00:25:40.500 --> 00:25:45.430
We have some improved software fallbacks
and some improvements to our tools,

00:25:45.430 --> 00:25:49.100
including live shader editing
in the OpenGL profiler.

00:25:51.110 --> 00:25:53.220
Now, OpenGL has been around for a while.

00:25:53.220 --> 00:25:57.100
And it started out in the days of CAD.

00:25:57.100 --> 00:25:59.800
Maybe not quite the IBM PC,
but I thought it was

00:25:59.800 --> 00:26:00.940
a funny image anyway.

00:26:00.940 --> 00:26:07.420
And, you know, it's really gone from,
you know, CAD, wireframe,

00:26:07.490 --> 00:26:12.640
simple grow shading, pretty sophisticated
shading in recent years,

00:26:12.640 --> 00:26:14.200
shading in materials.

00:26:14.600 --> 00:26:18.380
And now it's starting to move
beyond that into physics,

00:26:18.460 --> 00:26:22.040
particle systems,
people doing particle systems on GPUs,

00:26:22.140 --> 00:26:26.520
people simulating natural phenomenon
GPU for smoke and fire and rain.

00:26:26.520 --> 00:26:30.220
And so, you know,
with these new graphics processors,

00:26:30.220 --> 00:26:34.630
really, you know, you think of the power
that's inside of that GPU,

00:26:34.680 --> 00:26:36.660
able to do amazing things.

00:26:36.680 --> 00:26:39.980
And so what we wanted to do here
was show you a technology demo.

00:26:39.980 --> 00:26:42.630
I'm going to invite
Geoff Stahl up to the stage.

00:26:42.720 --> 00:26:44.260
The guys at ATI have put together.

00:26:44.480 --> 00:26:45.380
An amazing demo.

00:26:45.380 --> 00:26:46.360
They've showed it a few times.

00:26:46.360 --> 00:26:49.920
We're going to show it here
running on a Mac called Toy Shop.

00:26:50.000 --> 00:26:51.210
And Geoff's going to
talk to you about that.

00:26:51.480 --> 00:26:51.860
Thanks, Peter.

00:26:56.910 --> 00:27:00.450
What I want to show you today is
a technology demo that ATI has put

00:27:00.510 --> 00:27:03.940
together that really shows the power
of the GPU and what you can do to

00:27:03.940 --> 00:27:06.280
make a truly cinematic experience.

00:27:06.360 --> 00:27:11.010
In this case,
it's a toy shop on a rainy night.

00:27:11.100 --> 00:27:13.150
Can we go to the demo, please?

00:27:16.370 --> 00:27:19.220
So the demo starts off on the rooftop
of the toy shop and what one can

00:27:19.420 --> 00:27:21.660
immediately notice is the rain effects.

00:27:21.680 --> 00:27:24.700
Integrated into the scene,
reacting with the objects in the scene.

00:27:24.700 --> 00:27:28.520
We see the puddle on the rooftop and
we can see that there are ripples

00:27:28.570 --> 00:27:30.740
created by the rain particles falling.

00:27:30.760 --> 00:27:34.690
As we pan across we see the top of
the edge of the roof here and we see

00:27:34.690 --> 00:27:37.440
puddles created with animated textures,
or splashes created

00:27:37.440 --> 00:27:39.020
with animated textures.

00:27:39.040 --> 00:27:42.450
We come down the edge of the simulation
and we can see the falling particles.

00:27:42.450 --> 00:27:46.300
Again, a physics simulation
being run on the GPU here.

00:27:46.330 --> 00:27:48.380
What I'm going to do is I'm going
to go interactive for a moment

00:27:48.800 --> 00:27:52.110
and I'll hop down to one of the
main areas of the simulation,

00:27:52.170 --> 00:27:53.600
which is the toy shop window.

00:27:53.650 --> 00:27:57.620
What we see here is a water effect,
the water meandering

00:27:57.620 --> 00:27:59.420
down the toy shop window.

00:27:59.460 --> 00:28:01.980
And one might think this was done
offline and passed to the GPU.

00:28:01.980 --> 00:28:05.200
In fact, this entire physics
simulation using velocity,

00:28:05.460 --> 00:28:09.580
surface tension,
and mass of the droplets was all run

00:28:09.580 --> 00:28:14.420
on the GPU as a fragment shader and
affects all the geometry behind it.

00:28:14.510 --> 00:28:15.870
It's very convincing effects.

00:28:15.920 --> 00:28:16.300
Really brilliant.

00:28:16.300 --> 00:28:18.300
It brings the user into the scene.

00:28:18.300 --> 00:28:22.300
Let's move on and look at another
very interesting section of the demo.

00:28:22.400 --> 00:28:24.170
In this case, it's this sidewalk.

00:28:24.300 --> 00:28:26.910
The sidewalk is made of
cobblestones and the cobblestones,

00:28:26.910 --> 00:28:28.940
as you know,
self-occlude each other and react

00:28:28.940 --> 00:28:30.780
dynamically to the light in the scene.

00:28:30.780 --> 00:28:32.770
One might think, wow,
there's a lot of geometry there.

00:28:32.780 --> 00:28:34.760
That's really hard to do.

00:28:34.780 --> 00:28:36.770
In this case,
there's very little geometry.

00:28:36.780 --> 00:28:38.780
In reality, it's just a few polygons.

00:28:38.810 --> 00:28:40.920
A parallax occlusion mapping
technique was used here to

00:28:40.920 --> 00:28:46.300
create the dynamic lighting,
the self-occlusion, the soft shadows,

00:28:46.300 --> 00:28:46.300
and really lends itself to the scene.

00:28:46.300 --> 00:28:50.300
It's a very convincing simulation of
cobblestones with very little geometry

00:28:50.300 --> 00:28:55.290
running almost everything through
GLSL as a fragment shader on the GPU.

00:28:55.300 --> 00:28:57.300
Very convincing.

00:29:02.910 --> 00:29:04.830
Let's look at what really
the scene is composed of.

00:29:04.900 --> 00:29:10.840
Over 500,000 polygons per frame,
400 shaders, 20,000 particle effects,

00:29:10.840 --> 00:29:12.460
all run on the GPU.

00:29:12.460 --> 00:29:13.580
We bring up the wireframe.

00:29:13.580 --> 00:29:17.380
We can see, as we pull back,
the scope of both what is run in geometry

00:29:17.380 --> 00:29:19.680
and what is on the fragment shaders.

00:29:19.680 --> 00:29:22.650
The road areas, for example,
you can see are on fragment shaders.

00:29:22.680 --> 00:29:26.590
Very convincing demo put together by ATI,
which shows the power

00:29:26.660 --> 00:29:28.120
of OpenGL on the GPU.

00:29:28.340 --> 00:29:31.220
What is interesting about this is
you don't need to use OpenGL in all

00:29:31.220 --> 00:29:32.860
cases to get the power of the GPU.

00:29:32.860 --> 00:29:34.650
We provide you with Core Animation.

00:29:34.650 --> 00:29:36.260
We provide you with Core Image.

00:29:36.280 --> 00:29:40.920
We provide you with Core Video,
all to get the power of the GPU.

00:29:40.920 --> 00:29:44.080
Thanks very much,
and I'll hand it back to Peter.

00:29:52.450 --> 00:29:53.110
Thanks a lot, Geoff.

00:29:53.240 --> 00:29:56.400
We got a bunch of
sessions on 3D graphics.

00:29:56.400 --> 00:29:59.900
In fact, we have some of the
engineers from ATI here.

00:29:59.900 --> 00:30:02.800
We're going to talk about some
of the techniques in that demo.

00:30:02.800 --> 00:30:05.340
It's actually pretty interesting stuff,
if you can make that one.

00:30:05.340 --> 00:30:08.780
That's going to be in the
shading language talk.

00:30:09.530 --> 00:30:13.040
So next up in the 3D
area is Quartz Composer.

00:30:13.040 --> 00:30:18.250
Quartz Composer, as you probably know,
has been used in a bunch of

00:30:18.250 --> 00:30:20.300
recent products that we've done.

00:30:20.300 --> 00:30:23.080
There's the RSS screensaver
back in Tiger,

00:30:23.080 --> 00:30:24.560
which was very cool.

00:30:24.560 --> 00:30:25.900
There's Photo Booth.

00:30:25.900 --> 00:30:27.900
You saw it this morning in iChat.

00:30:27.900 --> 00:30:31.510
The iMovie team actually uses
Quartz Composer for some of

00:30:31.510 --> 00:30:33.460
their effects and themes.

00:30:33.460 --> 00:30:36.360
And you guys have been busy
with Quartz Composer as well.

00:30:36.360 --> 00:30:40.210
We looked at the graphics
entries in the design awards,

00:30:40.210 --> 00:30:42.550
and about a third of them
used Quartz Composer.

00:30:42.550 --> 00:30:45.670
So that's great to see you
guys having fun with that.

00:30:45.900 --> 00:30:51.060
Quartz Composer in Leopard is going
to have a bunch of new features.

00:30:51.060 --> 00:30:53.820
The number one requested
feature is custom patches.

00:30:53.820 --> 00:30:56.080
There's a custom patches API in Leopard.

00:30:56.080 --> 00:31:01.570
Yeah, for all you custom patch guys here,
you don't have to download the

00:31:01.570 --> 00:31:04.130
skanky SDK off the web anymore.

00:31:07.210 --> 00:31:11.480
There's a repository of compositions,
so if you want to do something like

00:31:11.600 --> 00:31:14.510
Photo Booth and allow the user to
select from a bunch of compositions,

00:31:14.520 --> 00:31:16.800
you can do that with
appropriate filtering in terms

00:31:16.800 --> 00:31:19.620
of what kind of composition
is right for your application.

00:31:19.620 --> 00:31:23.530
There's a WebKit plugin that runs
inside of Dashboard and Safari in

00:31:23.690 --> 00:31:28.220
order to create Dashboard widgets that
might want to use Quartz Composer.

00:31:28.220 --> 00:31:32.090
There's animated desktops features,
so you can set your desktop to a

00:31:32.100 --> 00:31:34.350
Quartz composition if you want.

00:31:34.420 --> 00:31:39.080
There's a bunch of new examples,
new developer examples

00:31:39.090 --> 00:31:41.240
on the developer tools.

00:31:41.280 --> 00:31:45.780
I'm going to give you a demo of
the number one requested feature,

00:31:45.780 --> 00:31:47.820
which is custom patches.

00:31:49.750 --> 00:31:55.530
So we wrote a couple of custom patches
to show you in the mad dash of the

00:31:55.530 --> 00:31:59.560
last two weeks before the conference.

00:31:59.610 --> 00:32:04.280
The first one is we found an
interesting open source project

00:32:04.280 --> 00:32:06.480
out there called Ogre 3D.

00:32:06.890 --> 00:32:10.740
It's a basic 3D engine kind of
built as what you might use as

00:32:10.740 --> 00:32:12.940
a rendering component of a game.

00:32:13.000 --> 00:32:19.420
It's pretty interesting
technology and pretty portable.

00:32:19.630 --> 00:32:22.790
What we thought we'd do is wrap
it in Quartz Composer plugin.

00:32:22.870 --> 00:32:27.470
So I'm going to bring in a couple of
components here to my composition.

00:32:27.830 --> 00:32:30.840
Let me resize my window a little bit.

00:32:30.860 --> 00:32:33.520
Then I'm going to bring
in this composition,

00:32:33.520 --> 00:32:34.570
which is a ninja.

00:32:34.880 --> 00:32:36.750
The ninja character is
like the Hello World you

00:32:36.800 --> 00:32:37.940
get when you compile Ogre.

00:32:37.940 --> 00:32:40.590
It's like one of their
standard little guys you get.

00:32:40.700 --> 00:32:46.440
Not incredibly detailed model,
but there he is.

00:32:46.660 --> 00:32:48.480
And I'm going to bring in an animator.

00:32:48.520 --> 00:32:52.230
The interesting thing about the way
Ogre works is-- and the way we chose

00:32:52.230 --> 00:32:56.630
to kind of expose it in this custom
patch-- is it actually carries all

00:32:56.630 --> 00:32:58.300
the animation information from it.

00:32:58.300 --> 00:33:00.940
So you could create the
model in an animation tool,

00:33:00.970 --> 00:33:04.640
and then have a bunch of animation
channels you can pipe data into.

00:33:04.640 --> 00:33:07.810
And you can blend the animations
in a pretty natural way.

00:33:08.030 --> 00:33:10.940
So I can make the Ogre do stuff.

00:33:10.980 --> 00:33:14.190
So let's do that.

00:33:14.550 --> 00:33:18.490
I think I go to first
animation position here.

00:33:18.550 --> 00:33:20.360
And so there's my
animation timer running.

00:33:20.360 --> 00:33:23.480
I don't have him doing anything yet,
but I'm going to have him--

00:33:23.500 --> 00:33:25.960
he's got like a basic walk.

00:33:25.980 --> 00:33:27.620
He's got a stealthy walk.

00:33:27.620 --> 00:33:29.340
Stealth.

00:33:29.340 --> 00:33:30.390
He's got a spin.

00:33:30.560 --> 00:33:33.750
And I could blend these together,
but we didn't really have

00:33:34.060 --> 00:33:37.970
time to put together a super
complicated demo of this.

00:33:38.150 --> 00:33:41.770
But the one thing we did do is we said,
well, if he's going to jump,

00:33:41.770 --> 00:33:45.700
we can make him jump,
and we can bring in the QC text logo

00:33:45.700 --> 00:33:48.480
and set up the rotation of that.

00:33:48.480 --> 00:33:51.820
So hopefully, if the timing's right,
we'll have him jump over

00:33:51.820 --> 00:33:53.700
the Quartz Composer logo.

00:33:53.750 --> 00:33:57.050
So brilliant.

00:33:59.050 --> 00:34:01.660
I won't tell you what happened
in some debug versions of this.

00:34:01.660 --> 00:34:02.510
It wasn't pretty.

00:34:07.100 --> 00:34:09.570
Okay, next demo.

00:34:09.810 --> 00:34:10.980
So we wrote another patch.

00:34:11.050 --> 00:34:15.190
We said, "Well,
that's pretty good to be able to do 3D."

00:34:15.500 --> 00:34:41.000
[Transcript missing]

00:34:41.320 --> 00:34:47.300
Which we actually have hooked up to
an OpenAL custom patch to pan left,

00:34:47.300 --> 00:34:50.600
right as I go, so.

00:34:58.980 --> 00:35:00.940
So that's pretty fun.

00:35:00.940 --> 00:35:02.430
The guys at Omni
hopefully will forgive me,

00:35:02.430 --> 00:35:04.860
but it's almost as useless as OmniDazzle.

00:35:04.990 --> 00:35:07.950
There you go.

00:35:09.930 --> 00:35:12.480
No, I love those guys,
so hopefully that won't be good.

00:35:12.480 --> 00:35:18.720
So the Quartz Composer sessions,
there's a bunch that will be given,

00:35:18.720 --> 00:35:19.990
so check those out.

00:35:20.090 --> 00:35:21.280
You'll want to see that.

00:35:21.330 --> 00:35:26.380
So the 3D sessions,
3D graphics section I've covered.

00:35:26.380 --> 00:35:30.480
Now we're going to do the imaging
section of the talk and talk about

00:35:30.480 --> 00:35:33.060
all the technology we have for
imaging in the operating system.

00:35:33.060 --> 00:35:35.110
So Core Image.

00:35:35.200 --> 00:35:37.940
We talked about Core Image a
little bit earlier.

00:35:38.640 --> 00:35:42.240
New in Leopard is the raw processing
capability that we're exposing

00:35:42.240 --> 00:35:43.260
through Core Image filters.

00:35:43.260 --> 00:35:46.320
We also have automatic user
interface generation for filters,

00:35:46.320 --> 00:35:50.280
so you don't have to paw around in the
P lists and create them from scratch.

00:35:50.300 --> 00:35:53.720
We have CI filter generator,
which is sort of a macro facility where

00:35:53.720 --> 00:35:57.560
you can take a tree of filters and
make them look like one macro filter.

00:35:57.560 --> 00:36:02.360
We have improved scalability,
able to go up to thousands

00:36:02.360 --> 00:36:05.000
of filters in a filter chain.

00:36:06.350 --> 00:36:09.850
There is a debugging performance tool,
which is really helpful for figuring

00:36:09.850 --> 00:36:11.880
out Core Image performance bottlenecks.

00:36:12.000 --> 00:36:15.990
And on the image units front,
we've allowed you to have custom

00:36:15.990 --> 00:36:17.980
user interface in your image units.

00:36:18.040 --> 00:36:22.200
And there's a validator tool
and some more documentation for

00:36:22.200 --> 00:36:24.870
creating image units on Core Image.

00:36:24.900 --> 00:36:30.490
The next thing to do with imaging is a
new technology this year called ImageKit.

00:36:30.500 --> 00:36:33.940
ImageKit, you can think of what we
did with PDFKit and Preview.

00:36:34.340 --> 00:36:37.420
ImageKit's doing the same thing to
kind of the imaging side of Preview.

00:36:37.420 --> 00:36:40.480
So some basic classes,
high-level user interface

00:36:40.580 --> 00:36:42.880
classes for dealing with images.

00:36:42.880 --> 00:36:45.670
Basic viewing, basic editing,
basic browsing.

00:36:45.680 --> 00:36:49.890
And it's all powered by Core Image under
the hood and Core Animation.

00:36:49.900 --> 00:36:53.200
So let me give you a
quick demo of ImageKit.

00:36:53.240 --> 00:36:54.510
ImageKit.

00:36:55.130 --> 00:36:59.380
So we wrote a sample application
to try to show off as many classes

00:36:59.380 --> 00:37:01.580
in one application as possible.

00:37:01.580 --> 00:37:05.090
So when I launch the app,
I get what we call the

00:37:05.090 --> 00:37:06.940
image browser view.

00:37:06.940 --> 00:37:12.120
This is an object you can use to have
users select from a bunch of images.

00:37:12.120 --> 00:37:14.680
We've got about 5,000
images in this folder.

00:37:14.680 --> 00:37:17.240
You can see I can scroll through.

00:37:17.240 --> 00:37:19.820
It's lazy in terms of how
it brings the images in.

00:37:19.820 --> 00:37:23.960
It's got a scaling control as well.

00:37:25.000 --> 00:37:27.360
But kind of a nice object.

00:37:27.360 --> 00:37:29.440
You just point it at a folder,
and it does the rest.

00:37:29.520 --> 00:37:35.240
Let me pick a picture here
and bring up another class.

00:37:35.300 --> 00:37:38.320
This is called the image view class.

00:37:38.420 --> 00:37:41.280
So this is your basic
image viewer editor.

00:37:41.280 --> 00:37:50.810
It has zoom controls with animation,
fit to size, actual size,

00:37:50.840 --> 00:37:51.780
those sorts of things.

00:37:52.420 --> 00:37:59.060
It has a crop tool with
kind of a heads up display.

00:37:59.330 --> 00:38:00.920
You can actually crop.

00:38:00.920 --> 00:38:03.500
You'll see it kind of smoothly
animates to the new state.

00:38:03.500 --> 00:38:08.060
Again, that's core animation behind
the-- under the covers.

00:38:08.060 --> 00:38:09.700
That's the analogy I'm looking for.

00:38:09.700 --> 00:38:15.930
OK, it's got a rotation tool, again,
with a heads-up user interface.

00:38:16.450 --> 00:38:19.550
That works for rotation.

00:38:19.660 --> 00:38:21.840
And we have Image Edit.

00:38:21.860 --> 00:38:27.420
This is a little bit of a upgrade
in the user interface from

00:38:27.550 --> 00:38:31.760
what was in preview in Tiger,
kind of taking some of the

00:38:31.760 --> 00:38:34.190
transparent user interface

00:38:34.700 --> 00:38:43.200
[Transcript missing]

00:38:46.320 --> 00:38:54.000
I can, as Scott mentioned earlier,
the image, the picture taker panel,

00:38:54.120 --> 00:38:57.880
which we also integrated into here.

00:39:01.470 --> 00:39:04.110
There we are.

00:39:04.570 --> 00:39:09.160
There I am, and I'm black and white
because I put that filter on.

00:39:09.780 --> 00:39:15.080
And to show one more class,
if I go Save As,

00:39:15.130 --> 00:39:18.240
there's an accessory view that's
built in that you can just throw

00:39:18.620 --> 00:39:21.970
into the Save panel if you want
to support all the image types,

00:39:22.080 --> 00:39:23.080
so you don't have to do that anymore.

00:39:23.080 --> 00:39:25.370
Thank you.

00:39:27.780 --> 00:39:33.070
And to show one more class,
if I go Save As,

00:39:33.080 --> 00:39:36.160
there's an accessory view that's
built in that you can just throw

00:39:36.160 --> 00:39:40.020
into the Save panel if you want
to support all the image types,

00:39:40.020 --> 00:39:41.080
so you don't have to do that anymore.

00:39:41.470 --> 00:39:43.370
Thank you.

00:39:58.550 --> 00:40:00.030
I see it doing its thing there.

00:40:00.090 --> 00:40:07.370
Anyway, so that's -- ImageKit.

00:40:11.880 --> 00:40:14.660
So here is a bunch of sessions
to go check out imaging,

00:40:14.720 --> 00:40:17.170
image kit, Core Image.

00:40:18.700 --> 00:40:19.980
And that's it for imaging.

00:40:19.980 --> 00:40:23.120
Let's move on and talk about QuickTime.

00:40:23.180 --> 00:40:27.650
QuickTime is our foundation video
technology in the operating system.

00:40:27.800 --> 00:40:30.790
It's been around for a while,
and there's been over 1 billion

00:40:30.790 --> 00:40:33.120
downloads of QuickTime in its history.

00:40:33.150 --> 00:40:36.080
And it's shipped every
year on 4,000 titles,

00:40:36.100 --> 00:40:41.960
including educational titles
like the first grade app here,

00:40:41.990 --> 00:40:46.980
or the Italian language thing,
or even the Sims.

00:40:47.710 --> 00:40:51.360
And what's new for QuickTime in Leopard?

00:40:51.400 --> 00:40:53.800
Well,
if you ask people what is QuickTime,

00:40:53.800 --> 00:40:55.140
you get a lot of different answers.

00:40:55.230 --> 00:40:58.510
And so I'm kind of divide
this into the APIs,

00:40:58.610 --> 00:41:02.540
the implementation,
looking at the file format, and last,

00:41:02.540 --> 00:41:04.490
looking at the web plugin.

00:41:04.670 --> 00:41:08.160
From the QuickTime API standpoint,
you heard this morning that QtKit is

00:41:08.200 --> 00:41:09.620
really the path to the future.

00:41:09.620 --> 00:41:13.860
It's the only way to access
QuickTime from a 64-bit application.

00:41:13.860 --> 00:41:17.620
And it's where we're investing
the energy to do these new capture

00:41:17.730 --> 00:41:19.700
APIs we call the Qt Capture APIs.

00:41:19.700 --> 00:41:22.920
And also,
if you're in 64-bit and you need

00:41:22.970 --> 00:41:28.070
to do graphic importer-like things,
you can do those using ImageIO.

00:41:28.070 --> 00:41:32.590
ImageIO is full 64-bit,
so I wanted to point that out.

00:41:33.700 --> 00:41:36.540
The QtKit Capture API,
Scott talked about these a little bit,

00:41:36.910 --> 00:41:40.120
support for captures from devices,
both USB and FireWire.

00:41:40.120 --> 00:41:44.460
And it supports simultaneous capture
from multiple devices and record

00:41:44.460 --> 00:41:47.200
output to multiple devices as well.

00:41:47.200 --> 00:41:48.860
So that's pretty cool.

00:41:48.880 --> 00:41:53.490
And it also has a bridge to the
sequence grabber components as well.

00:41:53.550 --> 00:41:58.160
If you need to access one of those,
you can still use the QtKit Capture

00:41:58.160 --> 00:42:00.540
APIs and get it at those devices.

00:42:02.760 --> 00:42:04.640
The QtKit Capture APIs are
not supported in 64-bit.

00:42:04.690 --> 00:42:06.350
There's a lot of quick
draw dependency in there,

00:42:06.350 --> 00:42:07.340
as you might imagine.

00:42:07.340 --> 00:42:10.190
It'll be continued to
be supported in 32-bit.

00:42:10.190 --> 00:42:12.680
Obviously,
we're not going to break anyone,

00:42:12.790 --> 00:42:15.670
but we do encourage you to
upgrade to the new ones.

00:42:15.670 --> 00:42:19.950
So visual context instead of G worlds,
using the sound media audio context,

00:42:20.020 --> 00:42:21.960
using compression sessions.

00:42:21.960 --> 00:42:26.160
So adopt the modern
CAPIs wherever you see them.

00:42:29.060 --> 00:42:32.480
And the QuickTime implementation,
under the hood,

00:42:32.520 --> 00:42:36.610
we're doing a lot of work to
revamp the low-level engine.

00:42:36.620 --> 00:42:38.900
Obviously,
there's a lot of quick draw in there.

00:42:38.900 --> 00:42:40.490
We need to remove that.

00:42:40.550 --> 00:42:45.540
We're building some 64-bit clean,
parallelizable substructure

00:42:45.540 --> 00:42:47.220
underneath QuickTime.

00:42:47.220 --> 00:42:50.880
And to really clean up the model view
controller separation in QuickTime,

00:42:50.880 --> 00:42:53.190
a lot of times Codex would
try to put up user interface,

00:42:53.190 --> 00:42:55.060
and we're trying to
make that a lot cleaner.

00:42:55.700 --> 00:42:57.080
The old engine we're
going to keep around,

00:42:57.080 --> 00:42:59.760
obviously, because we're not going to
break content or applications,

00:42:59.760 --> 00:43:02.940
but we're going to surface
more and more new functionality

00:43:03.010 --> 00:43:04.020
based on this new plumbing.

00:43:04.020 --> 00:43:07.800
In fact, the Capture API we're talking
about in QtKit is built on

00:43:07.800 --> 00:43:09.740
some new low-level plumbing.

00:43:09.740 --> 00:43:13.030
So I just wanted to let you guys know
we are investing a lot in the low-level

00:43:13.030 --> 00:43:16.370
infrastructure of QuickTime and
moving it forward pretty aggressively

00:43:16.370 --> 00:43:18.050
because it's critical to Apple.

00:43:19.760 --> 00:43:23.060
On the format battle,
there's been some interesting

00:43:23.060 --> 00:43:25.100
things going on with 264.

00:43:25.100 --> 00:43:29.140
It's really exploded even since last
year in terms of industry momentum.

00:43:29.250 --> 00:43:33.450
Obviously, we've got the Blu-ray disc
and HD DVD at the high-end,

00:43:33.470 --> 00:43:35.960
high-bitrate professional HD.

00:43:35.960 --> 00:43:40.080
We've got things like iChat
U Plus 3 that we use very

00:43:40.740 --> 00:43:44.320
effectively to do low-latency,
low-bandwidth conferencing,

00:43:44.320 --> 00:43:47.860
all the way down to the video iPod,
which we introduced last fall with

00:43:48.270 --> 00:43:51.010
264 as the codec that we use it.

00:43:51.020 --> 00:43:55.120
And the great thing about standards is,
you know, you can find people who will

00:43:55.120 --> 00:43:56.920
sell you chips that do 264.

00:43:56.920 --> 00:43:59.060
And so it's really a great thing.

00:43:59.060 --> 00:44:02.230
And there's a whole ecosystem
of 264 out there now,

00:44:02.240 --> 00:44:04.010
and it's a really great codec.

00:44:07.800 --> 00:44:10.940
What are we doing new with 264?

00:44:10.940 --> 00:44:14.140
We're continue to improve
our encoder performance,

00:44:14.190 --> 00:44:17.640
and we're going to make
that even better in Leopard.

00:44:17.750 --> 00:44:20.620
So keep your eyes peeled on that.

00:44:20.620 --> 00:44:24.480
We're also going to introduce
264 with Alpha as a possibility.

00:44:24.480 --> 00:44:28.850
It is an optional part of the spec,
but we think it's important,

00:44:28.870 --> 00:44:32.590
and we're going to implement that
into the QuickTime infrastructure.

00:44:33.190 --> 00:44:34.750
Why do you care about alpha video?

00:44:34.760 --> 00:44:38.850
Well, alpha, I mean,
just like with images,

00:44:38.850 --> 00:44:41.720
not all video is rectangular.

00:44:41.720 --> 00:44:45.520
If it's meant to be a sprite
or a matted piece of content,

00:44:45.520 --> 00:44:47.800
you want to get the video
out of the box sometimes.

00:44:47.800 --> 00:44:51.380
I mean, what would, you know,
Keynote or any application like

00:44:51.450 --> 00:44:53.420
that be without alpha images?

00:44:53.420 --> 00:44:57.560
Well, it's the same thing in broadcast
production and things like that.

00:44:57.560 --> 00:45:00.550
You're constantly dealing with
layers of things that have alpha.

00:45:01.350 --> 00:45:03.440
Now, QuickTime,
it's no secret to the broadcast

00:45:03.480 --> 00:45:06.920
production folks that QuickTime's had
the plumbing for this for a while.

00:45:06.920 --> 00:45:09.620
In fact, you know,
you can buy CDs full of

00:45:09.620 --> 00:45:13.590
PNGs or animation codec,
little After Effects rendered out

00:45:13.590 --> 00:45:19.620
things that you can bring into a
design and kind of use as a layer.

00:45:19.620 --> 00:45:22.840
The problem with these are the files are
huge because these are lossless codecs.

00:45:22.990 --> 00:45:27.300
And so it's hard to, you know,
hard to actually deliver in that format.

00:45:27.300 --> 00:45:31.040
So with 264 with alpha,
there's a way to deliver alpha.

00:45:31.260 --> 00:45:33.410
And so we're going to be doing some alpha
video where you can make the appropriate

00:45:33.410 --> 00:45:37.510
tradeoff depending upon your delivery
vehicle between quality and size.

00:45:37.620 --> 00:45:40.580
And so we think that's going
to be really interesting.

00:45:40.690 --> 00:45:46.180
So let me show you some alpha video.

00:45:49.800 --> 00:45:51.640
I'm going to launch a copy of Keynote.

00:45:51.650 --> 00:45:55.080
And as I said,
QuickTime has had the infrastructure,

00:45:55.080 --> 00:45:58.150
as has Keynote,
to support alpha video for a while.

00:45:58.290 --> 00:46:02.820
So here is a animated lower third,
something you might use

00:46:02.820 --> 00:46:04.360
in broadcast design.

00:46:04.500 --> 00:46:12.030
The PNG movie is 133 megabytes,
and the alpha 264 movie is 2 megabytes.

00:46:12.070 --> 00:46:14.290
And just to see,
you can put it over whatever

00:46:14.290 --> 00:46:15.970
background you want.

00:46:17.290 --> 00:46:19.550
And then, of course,
you can buy CDs full of obligatory

00:46:19.550 --> 00:46:22.230
dancing baloney and do whatever you want.

00:46:22.240 --> 00:46:27.680
This one weighs in at 250 megabytes,
and the Alpha 264 is

00:46:27.680 --> 00:46:30.300
about a tenth the size,
less than a tenth at 20.

00:46:30.300 --> 00:46:32.880
And, you know,
these are ready to be composited over,

00:46:32.880 --> 00:46:35.880
you know, probably rendered in a 3D
program as a little motion clip.

00:46:37.430 --> 00:46:39.260
Or you can buy pre-matted footage.

00:46:39.260 --> 00:46:43.310
I know the actor's a
little creepy in this one,

00:46:43.310 --> 00:46:43.310
but...

00:46:46.620 --> 00:46:49.670
So, you know, pre-matted footage.

00:46:49.700 --> 00:46:52.160
The PNG for this is about 140 megabytes.

00:46:52.600 --> 00:46:55.070
264 with alpha,
take that down to two and a half,

00:46:55.190 --> 00:46:57.300
and let's put them in Tahoe.

00:46:57.300 --> 00:46:59.290
There we go.

00:47:00.320 --> 00:47:04.660
Okay, so if you weren't convinced before,
you're convinced now.

00:47:04.660 --> 00:47:06.500
Alpha Video.

00:47:13.690 --> 00:47:15.280
So let's talk about QuickTime on the web.

00:47:15.440 --> 00:47:19.630
QuickTime has been adopted by
a bunch of websites out there,

00:47:19.660 --> 00:47:21.400
some of the biggest names on the web.

00:47:21.530 --> 00:47:26.660
In fact,
we see about 25,000 referring requests

00:47:26.720 --> 00:47:30.180
to our servers every day on QuickTime.

00:47:30.220 --> 00:47:34.430
And the most important thing for us with
the web and QuickTime is the plugin.

00:47:34.550 --> 00:47:36.760
It's the most critical
playback experience.

00:47:36.790 --> 00:47:43.340
The majority of QuickTime is experienced
in the browser through the plugin.

00:47:43.370 --> 00:47:45.280
Now,
the QuickTime plugins actually had a very

00:47:45.280 --> 00:47:50.720
robust JavaScript interface for a while,
for a few releases now.

00:47:51.060 --> 00:47:54.220
And so it's already sort
of Ajax and Web 2.0 ready,

00:47:54.220 --> 00:47:57.820
even though we didn't know it at
the time that's what we were doing.

00:47:57.860 --> 00:48:00.610
But you can actually do a lot
with the QuickTime plugin.

00:48:00.640 --> 00:48:02.610
And there's a few sites
that take advantage of it,

00:48:02.680 --> 00:48:04.740
but I think it is a little bit underused.

00:48:04.780 --> 00:48:08.680
And we want to continue to invest in that
and really take it to the next level and

00:48:08.680 --> 00:48:13.080
make QuickTime the plugin of choice for
adding video to Ajax-type applications.

00:48:13.090 --> 00:48:20.600
So let me give you a demo of
some of our work in that area.

00:48:23.070 --> 00:48:27.110
To demo any web content,
you must launch the web

00:48:27.290 --> 00:48:32.470
author's tool of choice,
BBEdit.

00:48:34.610 --> 00:48:37.330
I'm sorry I didn't get a chance
to make the fonts bigger for you,

00:48:37.400 --> 00:48:40.760
but you've all seen HTML before.

00:48:40.820 --> 00:48:46.170
So this is a typical web page you
might see out there on the web with

00:48:46.280 --> 00:48:47.990
some QuickTime content in there.

00:48:48.160 --> 00:48:53.980
The standard controller, you can scrub,
play.

00:48:54.080 --> 00:48:54.660
Pretty basic.

00:48:54.660 --> 00:48:58.790
I mean, the HTML, you can see it doesn't
even go half a page there.

00:48:59.630 --> 00:49:00.970
So that's kind of cool.

00:49:01.010 --> 00:49:05.890
But what about this JavaScript interface
you're talking about?

00:49:06.040 --> 00:49:11.860
So if you want to skin a
QuickTime movie in HTML and JavaScript,

00:49:11.860 --> 00:49:14.820
you can actually do that because
you can have full control over play,

00:49:14.820 --> 00:49:16.270
pause, stop in there.

00:49:16.350 --> 00:49:19.790
So we have this little animated
controller that I can actually

00:49:19.790 --> 00:49:22.400
just use with the mouse here.

00:49:22.400 --> 00:49:27.780
And this is just a CSS div with some
JavaScript and associated thing.

00:49:27.780 --> 00:49:30.830
I think it actually uses
the Yahoo UI framework.

00:49:30.850 --> 00:49:32.450
So that's pretty cool.

00:49:32.530 --> 00:49:36.090
The one issue, though,
is that-- suppose I wanted to drag, oh,

00:49:36.090 --> 00:49:37.530
the controller over the video.

00:49:37.540 --> 00:49:40.200
Well, that doesn't work too good.

00:49:40.330 --> 00:49:43.370
So what am I going to do about that?

00:49:44.120 --> 00:49:47.790
So we looked into that,
and it turns out that

00:49:47.860 --> 00:49:49.010
Safari is going to quit.

00:49:49.060 --> 00:49:50.110
OK.

00:49:50.160 --> 00:49:52.180
It's OK.

00:49:52.180 --> 00:49:52.710
It'll come back.

00:49:52.760 --> 00:49:57.770
We looked into that,
and it turns out that at the cost

00:49:57.770 --> 00:50:01.690
of a little bit of performance,
we can actually render synchronously

00:50:01.820 --> 00:50:05.220
with the browser and provide
a more seamless experience.

00:50:05.220 --> 00:50:08.970
So here I am with the same controller,
except now compositing over the video.

00:50:08.970 --> 00:50:11.540
If I get to a place where the
video is actually playing,

00:50:11.540 --> 00:50:12.950
it might be more impressive.

00:50:13.050 --> 00:50:13.860
There we go.

00:50:14.010 --> 00:50:18.790
And this machine is able
to keep up just fine,

00:50:18.800 --> 00:50:21.580
even though it's kind of rendering in
the damage repair loop of the browser

00:50:21.580 --> 00:50:24.780
instead of rendering asynchronously
like a lot of video plugins do.

00:50:24.780 --> 00:50:28.050
And the way you enable this in a
web page is you just add one line

00:50:28.050 --> 00:50:29.900
of code to the rendering mode.

00:50:29.900 --> 00:50:35.600
I think we call it transparent,
which just allows it to be a first-class

00:50:36.010 --> 00:50:39.280
citizen in a CSS Z order layering system.

00:50:39.280 --> 00:50:41.960
So that's pretty cool.

00:50:41.960 --> 00:50:45.950
But once you can do that,
if you actually let some real

00:50:45.950 --> 00:50:49.260
web designers look at it,
you might get something like this.

00:50:49.400 --> 00:50:57.140
So this is a site using the technology
and the transparent QuickTime plugin.

00:50:57.140 --> 00:51:00.380
The QuickTime is being
framed by some PNG images.

00:51:00.380 --> 00:51:06.300
We have our transparent controller here,
which I can move around over the video.

00:51:06.300 --> 00:51:11.300
I've got a few JavaScript rollovers that
are working just as you would expect,

00:51:11.400 --> 00:51:13.440
as if it was just an image background.

00:51:14.180 --> 00:51:16.730
Over here on the Superman logo,
you can see I'm using some of

00:51:16.730 --> 00:51:20.670
that alpha 264 to have just a
nice little highlighting effect.

00:51:20.800 --> 00:51:23.530
So that's just another embed tag
with a transparent movie there.

00:51:23.540 --> 00:51:26.940
And then if I bring up
a little infographic,

00:51:26.940 --> 00:51:31.140
you can see I've got kind of a star
field effect going underneath there,

00:51:31.140 --> 00:51:34.570
another alpha layer,
alpha 264 layer on there.

00:51:34.570 --> 00:51:37.930
And since it's just web content,
I can change the font size.

00:51:37.940 --> 00:51:40.300
It's all just CSS and getting styled.

00:51:40.300 --> 00:51:43.280
So that's pretty good that
it's all integrated like that.

00:51:44.000 --> 00:51:47.640
So yes, feel free to applaud anytime.

00:51:53.630 --> 00:51:58.500
And again, since it's just web content,
it can just be restyled with a print

00:51:58.670 --> 00:52:04.570
style sheet to bring up if you wanted
to show something fancier like that.

00:52:04.730 --> 00:52:08.440
That's all pretty cool.

00:52:09.500 --> 00:52:20.620
So that's what I wanted to show
you as far as the web plugin goes.

00:52:20.620 --> 00:52:23.190
So pretty cool stuff.

00:52:30.480 --> 00:52:31.640
So what are we doing in Leopard?

00:52:31.640 --> 00:52:36.270
We're adding transparent mode rendering,
and it's not just going

00:52:36.280 --> 00:52:37.080
to work in Safari.

00:52:37.080 --> 00:52:39.710
It's going to work cross-browser
and cross-platform.

00:52:39.850 --> 00:52:41.590
So that's great.

00:52:43.400 --> 00:52:46.000
In transparent mode,
we render synchronously with the browser,

00:52:46.000 --> 00:52:47.560
so we're in its main paint loop.

00:52:47.640 --> 00:52:52.080
Take a little bit of a performance hit,
as I said, but I think it enables enough

00:52:52.080 --> 00:52:55.110
features that a web designer
will use it appropriately.

00:52:55.120 --> 00:52:58.570
It allows video to be a first-class
citizen in a CSS design,

00:52:58.620 --> 00:53:01.970
respecting Z order and opacity,
as you would expect.

00:53:02.090 --> 00:53:05.420
And we're going to add some
enhancements to the JavaScript API.

00:53:05.420 --> 00:53:08.290
We've got a number of requests for
things like better event triggers

00:53:08.670 --> 00:53:12.290
out of movies and things like that,
so we're going to add that.

00:53:12.940 --> 00:53:16.950
But I do have one more demo
for you before I wrap up,

00:53:17.890 --> 00:53:19.490
which...

00:53:20.700 --> 00:53:42.800
[Transcript missing]

00:53:44.460 --> 00:53:49.450
Let me break apart those layers for
you and show you what's going on.

00:53:51.010 --> 00:53:58.560
There's the topmost layer,
PNG image with JavaScript.

00:53:58.650 --> 00:54:02.930
Second layer, our alpha 264 video.

00:54:04.890 --> 00:54:07.030
Third layer, transparent controller.

00:54:07.180 --> 00:54:10.810
It actually can still drag it, too.

00:54:14.530 --> 00:54:20.380
Fourth layer is the little menu
bar that's just a bunch of CSS.

00:54:21.060 --> 00:54:27.710
The next layer is the Superman call
out with more info on the movie,

00:54:27.820 --> 00:54:31.240
an image, and a div.

00:54:31.240 --> 00:54:33.350
We have our Starfield.

00:54:34.740 --> 00:54:38.450
And we have the two pings,
or it might be one ping that kind of

00:54:38.620 --> 00:54:40.640
frames the movie while it's playing.

00:54:40.760 --> 00:54:44.740
We've got our poster frame,
which is the layer that's

00:54:44.770 --> 00:54:49.500
there when you first show it,
and then it gets its opacity set

00:54:49.500 --> 00:54:52.490
to zero in order to show the movie.

00:54:52.690 --> 00:54:55.230
So he's there, and then finally the
movie in the background.

00:54:55.370 --> 00:54:58.250
And so let's just-- so that's-- yeah,
go ahead.

00:54:58.430 --> 00:54:59.830
Clap.

00:55:08.300 --> 00:55:10.180
I'll just put them all
away for you like that.

00:55:10.180 --> 00:55:11.180
How's that?

00:55:11.180 --> 00:55:15.140
There we go.

00:55:21.200 --> 00:55:23.620
So there's a bunch of
sessions on QuickTime.

00:55:23.620 --> 00:55:27.050
They'll be going on throughout the week,
so check those out as well.

00:55:27.130 --> 00:55:29.600
So that's what's new in QuickTime.

00:55:29.700 --> 00:55:33.730
So I've talked to you about all of
the graphics and media technologies

00:55:33.780 --> 00:55:35.880
in the OS and what's new in Leopard.

00:55:35.930 --> 00:55:37.170
But of course, that's not all.

00:55:37.260 --> 00:55:39.930
There's tons of sessions
on tons of stuff.

00:55:40.060 --> 00:55:44.880
So go learn about all of it
and build it into your app.

00:55:44.970 --> 00:55:49.540
So with Mac OS 10.5,
we really want you guys to start to

00:55:49.550 --> 00:55:54.280
take advantage of some of our new
technologies like Core Animation,

00:55:54.280 --> 00:55:55.820
ImageKit.

00:55:57.600 --> 00:56:04.200
[Transcript missing]

00:56:04.400 --> 00:56:07.550
and we're really looking forward
to see what kind of apps you

00:56:07.550 --> 00:56:10.910
guys create at next year's WWDC.

00:56:10.970 --> 00:56:14.250
So check out to see us
in the feedback forum,

00:56:14.340 --> 00:56:18.140
visit us in the lab,
enjoy the leopard seed we gave you,

00:56:18.140 --> 00:56:19.240
and we'll see you later.

00:56:19.240 --> 00:56:19.970
Have a great show.

00:56:19.980 --> 00:56:20.870
Thank you.