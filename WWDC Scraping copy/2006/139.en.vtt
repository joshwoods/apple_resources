WEBVTT

00:03:43.020 --> 00:03:48.450
Your custom views and your custom
controls fully keyboard navigable

00:03:48.630 --> 00:03:51.200
is very important to accessibility.

00:03:51.430 --> 00:03:55.500
Someone who's unable to use the mouse
needs to use a keyboard to get around.

00:03:55.590 --> 00:03:59.010
It's very,
very important that they're able

00:03:59.010 --> 00:04:01.500
to do things with a keyboard.

00:04:01.660 --> 00:04:05.050
So for custom views and controls,
you want to implement

00:04:05.760 --> 00:04:07.500
full keyboard navigation.

00:04:07.570 --> 00:04:10.600
And then the other thing to think about
as you're designing the user interface

00:04:10.600 --> 00:04:16.110
of your application is you don't want
to have things that require a mouse,

00:04:16.110 --> 00:04:18.990
and the mouse is the only
way to get things done.

00:04:19.090 --> 00:04:23.000
And kind of the canonical example
there is in the Finder for many years,

00:04:23.130 --> 00:04:28.000
the only way to copy or remove a file was
to drag it from one location to another,

00:04:28.130 --> 00:04:32.740
which, if you can't use a mouse to drag,
that's very, very difficult.

00:04:32.830 --> 00:04:34.000
That's impossible.

00:04:34.230 --> 00:04:38.930
So by adding copy and paste
menu items that can be gotten

00:04:39.020 --> 00:04:43.870
to through keyboard navigation,
the Finder is now much more accessible

00:04:44.070 --> 00:04:46.490
when it comes to manipulating files.

00:04:46.630 --> 00:04:50.000
So in your applications,
those are things to think about.

00:04:50.130 --> 00:04:53.800
We're not going to focus a great
deal on that anymore in this session,

00:04:53.800 --> 00:04:58.050
but I do want to emphasize
that this is a very,

00:04:58.200 --> 00:05:01.800
very important point before we go on.

00:05:01.800 --> 00:05:07.500
Now, most of the time when you hear about
making your application accessible,

00:05:07.690 --> 00:05:13.300
it's talking about how your application
interacts with assistive applications.

00:05:13.300 --> 00:05:15.800
And we're going to define
that term in just a moment.

00:05:15.800 --> 00:05:18.620
That's really the bulk,
that's the crux of what

00:05:18.790 --> 00:05:20.300
we're talking about today.

00:05:20.300 --> 00:05:23.720
So let's jump in and talk
about that a little bit more.

00:05:23.800 --> 00:05:27.300
So we have some applications
running on our system.

00:05:27.300 --> 00:05:29.100
We have Finder, it's a Carbon app.

00:05:29.300 --> 00:05:30.800
We got a Cocoa app like iChat.

00:05:30.800 --> 00:05:33.110
We have your Cocoa application running.

00:05:33.300 --> 00:05:36.800
And they're all running
as applications do.

00:05:36.800 --> 00:05:37.800
They're drawing to the screen.

00:05:37.800 --> 00:05:39.300
They're handling mouse events.

00:05:39.300 --> 00:05:40.030
They're handling key events.

00:05:40.140 --> 00:05:42.060
They're all happy.

00:05:42.240 --> 00:05:46.330
They're in their little snug,
protected memory space chugging along.

00:05:46.600 --> 00:05:51.090
And then somebody launches
an assistive application,

00:05:51.100 --> 00:05:56.780
in this case, VoiceOver,
the screen reader on Mac OS X.

00:05:58.330 --> 00:06:02.520
An assistive application at a high
level is an application that interacts

00:06:02.520 --> 00:06:07.040
with other applications on the system
and can provide an alternate way

00:06:07.040 --> 00:06:12.530
for a user to interact with all the
other applications on the system.

00:06:13.590 --> 00:06:18.320
The more nuts and bolts definition
is that it's an application that

00:06:18.320 --> 00:06:22.500
is using a set of APIs called
the Accessibility APIs.

00:06:22.500 --> 00:06:25.970
We're not concerned with those
APIs because we're not writing

00:06:25.970 --> 00:06:29.850
an assistive application,
but it's important to know who's

00:06:29.860 --> 00:06:33.500
going to be asking you questions
and interacting with your app.

00:06:33.500 --> 00:06:35.500
They're a set of C APIs.

00:06:35.500 --> 00:06:37.500
They start with the AX prefix.

00:06:37.500 --> 00:06:41.490
If you search in the developer
docs for accessibility,

00:06:41.560 --> 00:06:42.500
you're going to find them.

00:06:42.560 --> 00:06:46.430
They're parts of the API that
you don't have to worry about.

00:06:46.500 --> 00:06:51.380
Now, using those APIs,
and they're public APIs so anyone

00:06:51.490 --> 00:06:57.070
can write an assistive application,
using InterProcess Communication,

00:06:57.140 --> 00:07:02.500
it's going to be able to talk to all the
other applications running on the system.

00:07:02.500 --> 00:07:05.500
And all those other apps
are going to respond back.

00:07:05.500 --> 00:07:09.750
And so this is kind of a line of
communications that's beyond the

00:07:09.750 --> 00:07:13.980
one that we usually think about
when we think about an application

00:07:13.980 --> 00:07:16.450
being interacted with by a user.

00:07:16.580 --> 00:07:20.500
It's another way for somebody to
interact with your application.

00:07:20.500 --> 00:07:24.410
Now, how is it that my application
is able to do this?

00:07:24.500 --> 00:07:27.500
I didn't do any accessibility
work whatsoever.

00:07:27.500 --> 00:07:31.180
Well,
both Carbon and Cocoa frameworks have

00:07:31.180 --> 00:07:36.420
baked into them the infrastructure
to be able to listen for this

00:07:36.820 --> 00:07:40.300
communication from assistive
applications and respond back.

00:07:41.850 --> 00:07:42.240
Now,

00:07:43.570 --> 00:07:47.890
We often will call these other
applications on the system that

00:07:47.890 --> 00:07:53.080
can interact with an assistive app,
you'll hear them call things

00:07:53.080 --> 00:07:57.500
like an Accessible Application or
an Accessorized Application.

00:07:57.500 --> 00:08:01.490
So, I wanted to get those terms straight
because it's important to know what

00:08:01.490 --> 00:08:03.500
side of the communication you're on.

00:08:03.500 --> 00:08:07.900
And we, in this session,
are talking about your application

00:08:08.130 --> 00:08:12.050
as kind of the thing listening
for and responding to queries

00:08:12.560 --> 00:08:14.500
from assistive applications.

00:08:14.500 --> 00:08:18.500
Now, there can be many,
many assistive applications.

00:08:18.500 --> 00:08:24.020
What I'd like to do is - some of
you may not have seen VoiceOver in

00:08:24.020 --> 00:08:26.500
action - is bring up Rick Fabrick.

00:08:26.620 --> 00:08:28.500
He's a senior engineer on VoiceOver.

00:08:28.500 --> 00:08:33.080
To give you a brief demo of VoiceOver and
also to talk about some of the new

00:08:33.420 --> 00:08:33.500
features that are coming out of it.

00:08:38.500 --> 00:08:38.500
Thanks, James.

00:08:43.240 --> 00:08:45.240
Good afternoon everybody,
my name is Rick Fabrick.

00:08:45.240 --> 00:08:47.250
I am an engineer on the VoiceOver team.

00:08:47.360 --> 00:08:50.670
And what I'm going to be doing for the
next 5 or 10 minutes is two things.

00:08:50.700 --> 00:08:53.830
I'm going to be going over some
of the basics of VoiceOver,

00:08:53.830 --> 00:08:56.780
and then I am going to go and
demo some of the new features

00:08:56.890 --> 00:08:58.700
we plan on having in Leopard.

00:08:58.700 --> 00:08:59.840
So VoiceOver.

00:08:59.940 --> 00:09:01.900
VoiceOver is an assistive application.

00:09:01.900 --> 00:09:05.700
In this case, it comes built in to the
operating system Mac OS X.

00:09:05.700 --> 00:09:08.840
It is a screen reader,
so it allows users to interact

00:09:08.840 --> 00:09:12.700
with their computer without
requiring a mouse or a display.

00:09:12.700 --> 00:09:16.060
So the base system for a
VoiceOver user is the CPU,

00:09:16.060 --> 00:09:18.700
or the computer, and the keyboard.

00:09:18.870 --> 00:09:21.170
So let me turn VoiceOver on.

00:09:21.910 --> 00:09:25.300
As James may have mentioned,
one way to turn it on is to

00:09:25.300 --> 00:09:27.990
go to the System Preferences.

00:09:28.010 --> 00:09:32.000
Can we have the other machine up?

00:09:36.800 --> 00:09:40.320
And in the System Preferences
that will be appearing very soon,

00:09:40.320 --> 00:09:42.500
there we go, thank you.

00:09:42.500 --> 00:09:46.820
You go to the Universal Access pane,
and the top left you

00:09:46.820 --> 00:09:48.400
press the On radio button.

00:09:48.400 --> 00:09:49.620
Welcome to Macintosh.

00:09:49.830 --> 00:09:50.670
VoiceOver is running.

00:09:50.750 --> 00:09:54.900
System Preferences, Window,
Universal Access back button.

00:09:54.900 --> 00:09:58.540
Now, when VoiceOver first launches,
it gives you some information

00:09:58.540 --> 00:10:01.200
about the state of the machine,
which application is front most,

00:10:01.200 --> 00:10:04.200
what window you're in, things like that.

00:10:04.200 --> 00:10:06.720
When we first started
designing VoiceOver,

00:10:06.720 --> 00:10:10.200
one of the main things we wanted
to do was make sure that if a

00:10:10.200 --> 00:10:14.000
VoiceOver user was working with
somebody else at the computer,

00:10:14.020 --> 00:10:16.510
they were collaborating,
that they could understand what

00:10:16.520 --> 00:10:18.100
each other was doing very easily.

00:10:18.190 --> 00:10:21.710
So VoiceOver offers some cues,
some visual and audio cues,

00:10:21.710 --> 00:10:23.030
to help that along.

00:10:23.100 --> 00:10:27.300
Now, one of our visual cues is what
we call the VoiceOver cursor.

00:10:27.300 --> 00:10:30.610
And what that does is it focuses
on the element that the user is

00:10:30.610 --> 00:10:33.940
currently "looking at." And it's the
element that they can interact with.

00:10:34.150 --> 00:10:36.020
So, let's say I'm using VoiceOver.

00:10:36.160 --> 00:10:38.840
Now, one of the features that
VoiceOver provides is in a way to

00:10:38.840 --> 00:10:40.370
increase the size of the cursor.

00:10:40.500 --> 00:10:43.330
So,
now this is useful for the VoiceOver user

00:10:43.330 --> 00:10:46.300
if they do have some vision,
but it's limited.

00:10:46.590 --> 00:10:48.490
But it also helps with collaboration.

00:10:48.560 --> 00:10:51.700
So, what I'm going to do is I'm going
to send a command to VoiceOver,

00:10:51.700 --> 00:10:54.390
and I do that with the
control and option keys down.

00:10:54.480 --> 00:10:57.120
With those two keys down,
any other keyboard sends

00:10:57.120 --> 00:10:58.590
a command to VoiceOver.

00:10:58.660 --> 00:11:01.150
So, VoiceOver 3, 4, 6.

00:11:01.150 --> 00:11:04.000
You may be able to see in the top left,
the VoiceOver cursor.

00:11:04.000 --> 00:11:06.000
And the VoiceOver cursor is quite large.

00:11:06.050 --> 00:11:08.990
It's those black rectangle
around the element.

00:11:09.020 --> 00:11:12.000
Okay, so now with VoiceOver,
the control and option keys down,

00:11:12.000 --> 00:11:14.000
and the arrow keys,
I can move the VoiceOver cursor

00:11:14.000 --> 00:11:16.000
to see what is in the window.

00:11:16.000 --> 00:11:18.000
So I can tell what I can do.

00:11:18.000 --> 00:11:18.990
Let me move the cursor over.

00:11:19.170 --> 00:11:20.000
Forward.

00:11:20.000 --> 00:11:20.970
Dim button.

00:11:21.090 --> 00:11:22.000
Show all button.

00:11:22.000 --> 00:11:24.260
And as the cursor moves
from element to element,

00:11:24.260 --> 00:11:27.000
VoiceOver describes the element
so I know what I can do.

00:11:27.000 --> 00:11:29.000
So in this case,
I'm on the Show All button.

00:11:29.100 --> 00:11:30.940
And with VoiceOver,
I can press that button.

00:11:31.150 --> 00:11:33.900
Press Show All button.

00:11:33.900 --> 00:11:36.900
And I can now move the cursor to
the computer without using a mouse.

00:11:36.900 --> 00:11:39.900
Let me bring the VoiceOver cursor
back down to normal size.

00:11:39.900 --> 00:11:42.900
VoiceOver 4, 3, 2, 1, 1.

00:11:42.900 --> 00:11:45.220
Now, as a developer,
you should be looking at one of

00:11:45.220 --> 00:11:48.900
the features that is in Tiger,
and that is the screen curtain.

00:11:48.900 --> 00:11:52.840
What that does is it dims the screen
so that you get a better sense

00:11:52.940 --> 00:11:55.880
of how VoiceOver users will be
interacting with your applications.

00:11:55.900 --> 00:11:57.900
Let me turn that on just so you can see.

00:11:57.900 --> 00:11:58.900
Screen curtain on.

00:11:58.900 --> 00:12:00.900
And now I can use
VoiceOver normally by navigating.

00:12:00.900 --> 00:12:02.210
Forward.

00:12:02.210 --> 00:12:03.780
Dim button.

00:12:03.800 --> 00:12:03.800
Back button.

00:12:03.810 --> 00:12:07.400
And this is a tool you can use to
possibly find areas in your application

00:12:07.400 --> 00:12:08.800
that may need more accessibility work.

00:12:08.840 --> 00:12:10.800
So let me turn the screen curtain off.

00:12:10.900 --> 00:12:12.760
Screen curtain off.

00:12:13.970 --> 00:12:14.900
Okay.

00:12:14.900 --> 00:12:15.780
Hide system preferences.

00:12:15.950 --> 00:12:16.340
Finder.

00:12:16.460 --> 00:12:17.250
Leopard selected.

00:12:17.260 --> 00:12:20.020
So let me go into a couple of
the features that we're going

00:12:20.020 --> 00:12:21.620
to be having for Leopard.

00:12:21.620 --> 00:12:25.900
The first one deals with - let's see.

00:12:25.900 --> 00:12:27.220
System terminal preview.

00:12:27.220 --> 00:12:27.720
Preview window.

00:12:27.720 --> 00:12:30.370
The VoiceOver commands themselves.

00:12:30.380 --> 00:12:34.050
So another thing when we were
designing VoiceOver that we wanted to

00:12:34.050 --> 00:12:37.640
make sure was very easy is once the
user learned how to use VoiceOver,

00:12:37.640 --> 00:12:42.470
the user learned where the commands were,
that they can go to any Mac OS system

00:12:42.690 --> 00:12:46.280
running Tiger Relator and be
able to use it using VoiceOver.

00:12:46.280 --> 00:12:49.680
And whether that's in the
library or a school setting.

00:12:49.680 --> 00:12:51.520
So - and that's going to be
true for Leopard as well.

00:12:51.520 --> 00:12:53.630
So we're not going to be
touching the main keyboard.

00:12:53.640 --> 00:12:56.990
But what we'd like to do in
Leopard is take advantage of the

00:12:57.080 --> 00:13:00.360
numeric keypad on the right-hand
side of an extended keyboard.

00:13:00.390 --> 00:13:03.820
What we're going to do is allow
the user to program their most

00:13:03.960 --> 00:13:08.430
used VoiceOver commands to the
keys over on the right-hand side.

00:13:08.610 --> 00:13:12.580
And we're also not going to require
the control or the option key.

00:13:12.580 --> 00:13:13.800
The option key is to be pressed.

00:13:13.950 --> 00:13:15.880
So you can do pretty much
anything you want to do with

00:13:15.880 --> 00:13:18.000
VoiceOver using one hand very quickly.

00:13:18.050 --> 00:13:20.130
What's nice about this is all
the keys are very localized,

00:13:20.190 --> 00:13:21.970
so you don't have to
be moving around a lot.

00:13:21.990 --> 00:13:23.220
So I can - Next.

00:13:23.220 --> 00:13:23.440
Dint.

00:13:23.440 --> 00:13:24.290
Button.

00:13:24.440 --> 00:13:24.640
Zoom out.

00:13:24.640 --> 00:13:25.640
Button.

00:13:25.640 --> 00:13:25.640
Zoom in.

00:13:25.640 --> 00:13:26.510
Button.

00:13:26.640 --> 00:13:28.720
Navigate the VoiceOver cursor.

00:13:28.720 --> 00:13:31.130
If I move my finger down just
slightly to another key on

00:13:31.130 --> 00:13:32.900
the numeric keypad - Press.

00:13:32.900 --> 00:13:32.900
Zoom.

00:13:32.900 --> 00:13:33.900
Press.

00:13:33.900 --> 00:13:33.900
Zoom in.

00:13:33.900 --> 00:13:34.900
Button.

00:13:34.900 --> 00:13:35.900
I can interact with the button.

00:13:35.900 --> 00:13:38.670
So I can pretty much do anything
I want and program it to the

00:13:38.680 --> 00:13:40.610
way that I use my computer.

00:13:40.610 --> 00:13:41.300
Okay.

00:13:41.300 --> 00:13:41.910
So that's the first feature.

00:13:41.920 --> 00:13:44.910
The second feature deals with navigation.

00:13:44.920 --> 00:13:45.920
High preview.

00:13:45.920 --> 00:13:46.920
Finder.

00:13:46.920 --> 00:13:47.490
Leopard selected.

00:13:47.500 --> 00:13:48.490
Okay.

00:13:48.510 --> 00:13:51.960
In Tiger,
I can navigate the VoiceOver cursor up,

00:13:52.150 --> 00:13:54.920
down, left, right,
to the first visible element,

00:13:54.920 --> 00:13:56.760
to the last element in the window.

00:13:56.760 --> 00:13:59.290
In Leopard,
what we want to do is make navigation

00:13:59.290 --> 00:14:04.730
quicker and allow you to jump to just the
types of elements that you want to go to.

00:14:04.810 --> 00:14:07.640
Let's say you're just interested in
the images in the page or the window.

00:14:07.640 --> 00:14:09.460
You can jump from image to image.

00:14:09.460 --> 00:14:11.260
The same thing for links.

00:14:11.260 --> 00:14:13.470
Also, text attributes like bold.

00:14:13.480 --> 00:14:15.740
You can jump from one bold
block of text to another,

00:14:15.760 --> 00:14:17.260
italic, things like that.

00:14:17.260 --> 00:14:19.720
So let me demo that with
a text edit document.

00:14:19.810 --> 00:14:20.760
Preview.

00:14:20.760 --> 00:14:21.240
System terminal.

00:14:21.300 --> 00:14:22.040
Text edit.

00:14:22.040 --> 00:14:22.220
Text edit.

00:14:22.360 --> 00:14:22.720
Window.

00:14:24.870 --> 00:14:28.540
Okay, so here I have a document,
and let's say that I want to read all of

00:14:28.540 --> 00:14:30.340
the text in the document that is bold.

00:14:30.460 --> 00:14:34.010
So with one key combination,
I can... Accessibility.

00:14:34.010 --> 00:14:35.400
A new voice.

00:14:35.420 --> 00:14:36.900
Built for Braille.

00:14:36.950 --> 00:14:38.340
Closed captioning.

00:14:38.410 --> 00:14:39.740
Jump from section to section.

00:14:39.740 --> 00:14:42.330
So in this document,
each section is titled

00:14:42.330 --> 00:14:44.750
with some bold text,
and I can quickly jump from

00:14:44.760 --> 00:14:48.040
section to section in this
document with the bold command.

00:14:48.140 --> 00:14:50.360
Italics command,
so I can jump to the next

00:14:50.360 --> 00:14:52.240
block of text that is italics.

00:14:52.300 --> 00:14:54.780
All features referenced in
the Mac OS X Leopard sneak

00:14:54.780 --> 00:14:56.180
peek are subject to change.

00:14:56.210 --> 00:14:57.730
In this case,
it's at the very end of the document,

00:14:57.760 --> 00:14:58.340
so I jump down.

00:14:58.340 --> 00:15:03.240
I can also jump...navigate
backwards to graphics.

00:15:03.270 --> 00:15:04.450
Embedded GIF file.

00:15:04.570 --> 00:15:06.330
Embedded PNG file.

00:15:06.440 --> 00:15:09.070
So this should make navigating
to just the things you want

00:15:09.070 --> 00:15:10.840
to see in the window very,
very easy.

00:15:11.090 --> 00:15:14.460
Alright, so the last feature that I want
to demo... Hide text edit.

00:15:14.490 --> 00:15:14.970
Finder.

00:15:14.980 --> 00:15:15.430
Leopard.

00:15:15.540 --> 00:15:16.010
Selected.

00:15:16.270 --> 00:15:17.240
Can be demoed in Terminal.

00:15:17.240 --> 00:15:17.650
Text edit.

00:15:17.750 --> 00:15:18.110
Preview.

00:15:18.160 --> 00:15:18.940
System preferences.

00:15:19.060 --> 00:15:20.140
Terminal.

00:15:20.180 --> 00:15:22.110
Alright, so in Terminal,
if I'm doing some...

00:15:22.180 --> 00:15:25.140
Command line commands,
and I hit return,

00:15:25.320 --> 00:15:27.930
the command may print out some output.

00:15:28.010 --> 00:15:31.220
A VoiceOver user in Tiger had
to navigate explicitly back

00:15:31.400 --> 00:15:32.840
to see what just came out.

00:15:32.840 --> 00:15:34.830
In Leopard, that's not going to be true.

00:15:34.890 --> 00:15:38.680
If I type ls return...
Desktop music sites,

00:15:38.680 --> 00:15:41.940
documents, pictures, our library,
public movies, send registration,

00:15:41.940 --> 00:15:45.800
HW0014511426IF, Apple.

00:15:45.860 --> 00:15:46.630
Okay.

00:15:46.940 --> 00:15:52.040
So... VoiceOver will automatically
speak out whatever just came out.

00:15:52.040 --> 00:15:54.040
So you don't have to go
back and forth and find out.

00:15:54.040 --> 00:15:56.970
That's been a feature that was
greatly requested in Tiger.

00:15:57.100 --> 00:15:59.820
And not only in Terminal is that useful,
but in Console and it's

00:15:59.830 --> 00:16:01.000
very useful in iChat.

00:16:01.050 --> 00:16:04.040
So if you're chatting with a buddy
and somebody sends you a new message,

00:16:04.040 --> 00:16:06.110
you don't have to go back
and forth or go back and say,

00:16:06.110 --> 00:16:09.040
"What did they just say?" We'll
automatically speak it for you.

00:16:09.040 --> 00:16:11.040
Okay, so that's all the time
I have today for features.

00:16:11.040 --> 00:16:15.230
What I'd like to do is ask James to come
back up so he can explain to you how

00:16:15.230 --> 00:16:18.390
you can accessorize your application
so that VoiceOver users can take

00:16:18.470 --> 00:16:21.040
advantage of all of your cool features.

00:16:21.040 --> 00:16:21.930
Thanks.

00:16:21.940 --> 00:16:23.070
Thank you.

00:16:25.370 --> 00:16:28.310
Thank you very much, Rick.

00:16:28.600 --> 00:16:33.210
All right, so we'll go back to our
little diagram here.

00:16:33.410 --> 00:16:36.260
So you just saw
VoiceOver interacting with lots of

00:16:36.260 --> 00:16:38.540
other applications on the system.

00:16:38.600 --> 00:16:40.920
It's an example of an
assistive application.

00:16:41.200 --> 00:16:42.040
It's not the only.

00:16:42.040 --> 00:16:44.520
In fact,
those other Apple technologies that

00:16:44.520 --> 00:16:49.360
I mentioned - Apple X-Ray Master Track,
the Watch Me Do feature in Automator -

00:16:49.400 --> 00:16:54.220
and anything that's getting accessibility
information is using those APIs.

00:16:55.480 --> 00:16:59.900
So we've talked a little bit
about that communication,

00:16:59.900 --> 00:17:03.450
but not so much about what kind
of information is coming back and

00:17:03.570 --> 00:17:05.500
forth and what form does it take.

00:17:05.630 --> 00:17:07.600
So let's dive in a little bit deeper.

00:17:07.660 --> 00:17:11.050
Let's simplify our diagram to
just one assistive application

00:17:11.480 --> 00:17:14.300
and a Cocoa application.

00:17:14.340 --> 00:17:20.120
And using those AX APIs,
an assistive application basically gets a

00:17:20.200 --> 00:17:25.300
process ID and passes it into those APIs,
and it gets back a little lightweight.

00:17:25.300 --> 00:17:30.790
UI Element,
or more formally an AX UI Element ref.

00:17:31.230 --> 00:17:34.800
This is just a little
lightweight thing that

00:17:35.080 --> 00:17:36.940
represents a UI element.

00:17:37.030 --> 00:17:41.020
In fact, this first one that comes back
represents the application on the

00:17:41.020 --> 00:17:43.030
other end of this communication here.

00:17:43.160 --> 00:17:47.270
We don't package up
NS applications and NS views and

00:17:47.270 --> 00:17:48.800
send them to other processes.

00:17:48.800 --> 00:17:50.800
That would be way too heavyweight.

00:17:50.800 --> 00:17:55.880
And we also don't want assistive
applications to need to know about

00:17:55.880 --> 00:17:59.700
HI views and NS views and different
things and different frameworks.

00:18:00.060 --> 00:18:04.800
So,
we have a general UI element that we use.

00:18:05.220 --> 00:18:08.950
And once an assistive app
has hold of this UI element,

00:18:09.140 --> 00:18:11.250
it's able to ask it some questions.

00:18:11.330 --> 00:18:13.570
Like,
"Give me your list of attributes." "Give

00:18:13.570 --> 00:18:17.840
me a value for a particular attribute."
"Is that attribute settable?" And then

00:18:17.840 --> 00:18:20.160
it can set a value for an attribute.

00:18:20.300 --> 00:18:24.050
And with this small kind
of set of functionality and

00:18:24.050 --> 00:18:29.590
this one generic UI element,
we're able to do quite a lot.

00:18:29.670 --> 00:18:34.680
So let's focus in on a UI element
and some of its attributes.

00:18:34.680 --> 00:18:37.240
So that's the one that that
assistive app got back.

00:18:38.180 --> 00:18:43.420
And some very key attributes, types,
are the role.

00:18:43.520 --> 00:18:47.600
In this case, it's just a string that
says I'm an application.

00:18:47.860 --> 00:18:49.590
And it also has children.

00:18:49.590 --> 00:18:54.010
And that children attribute,
when you ask for its value,

00:18:54.010 --> 00:18:57.540
will give back an array
of other UI elements.

00:18:57.700 --> 00:19:01.600
So we can build an entire
hierarchy fairly easily.

00:19:01.600 --> 00:19:06.500
And then that first one, it has a role,
which is - this represents the menu bar

00:19:06.610 --> 00:19:09.600
of the application that I'm talking to.

00:19:09.600 --> 00:19:14.530
It has a parent, which refers back up to
the application UI element.

00:19:14.830 --> 00:19:17.600
And then it has children of its own.

00:19:17.600 --> 00:19:21.510
And then this other one, perhaps,
is a window in that application.

00:19:21.940 --> 00:19:26.600
Again, the AX role is referring to
kind of the type of UI element,

00:19:26.600 --> 00:19:26.600
or the kind of UI element
that you're talking about.

00:19:26.600 --> 00:19:26.600
And then the AX role is referring
to the type of UI element,

00:19:26.600 --> 00:19:26.600
or the kind of UI element
that you're talking about.

00:19:26.600 --> 00:19:26.600
And then the AX role is referring
to kind of the type of UI element,

00:19:26.600 --> 00:19:26.600
or the kind of UI element
that you're talking about.

00:19:26.600 --> 00:19:26.600
And then the AX role is referring
to kind of the type of UI element,

00:19:26.600 --> 00:19:26.600
or the kind of UI element
that you're talking about.

00:19:26.600 --> 00:19:30.740
element or the kind of
UI element that this represents.

00:19:30.770 --> 00:19:34.360
It has a reference up to its parent,
again the application,

00:19:34.390 --> 00:19:38.270
and then an array of children of its own.

00:19:40.700 --> 00:19:46.000
So, rather than go through slides,
let's come on way over here.

00:19:46.000 --> 00:19:48.150
It's a big stage.

00:19:48.800 --> 00:19:53.460
Primany to the demo machine and
let's start our first hands-on.

00:19:53.460 --> 00:19:57.800
Okay, how many folks are actually
following hands-on with me?

00:19:57.870 --> 00:20:00.310
Okay, good.

00:20:00.310 --> 00:20:00.310
Excellent.

00:20:01.720 --> 00:20:07.800
So what you will want to do is
in the dicey bunch of stuff,

00:20:08.340 --> 00:20:13.440
In the folder,
you'd want to go to stage one.

00:20:13.490 --> 00:20:17.160
And first, let's launch the application.

00:20:17.160 --> 00:20:20.390
It's labeled Dicey Start.

00:20:22.660 --> 00:20:28.010
So Dicey is just a little game,
a little dice game where

00:20:28.010 --> 00:20:29.760
we can roll the die,

00:20:29.990 --> 00:20:33.560
We get a bunch of items here.

00:20:33.630 --> 00:20:37.590
We can click a die to hold that
die so that when we re-roll,

00:20:37.590 --> 00:20:39.430
those values are held.

00:20:39.740 --> 00:20:42.180
I'm going to try for fives.

00:20:42.440 --> 00:20:43.240
No more fives.

00:20:43.320 --> 00:20:45.640
Oh, I'm going to go for a full house.

00:20:45.770 --> 00:20:46.420
Oh, nothing.

00:20:46.740 --> 00:20:47.270
Oh, I got it.

00:20:47.440 --> 00:20:49.140
That's excellent.

00:20:49.270 --> 00:20:50.700
So your results may vary.

00:20:50.820 --> 00:20:51.940
Yes, please.

00:20:51.940 --> 00:20:52.780
Yeah, all right.

00:20:52.990 --> 00:20:53.940
Full house.

00:20:54.080 --> 00:20:57.780
And then this column here is
showing me if I were to choose to

00:20:57.910 --> 00:21:01.900
score in this particular category,
I'd get 25 points.

00:21:02.040 --> 00:21:06.300
This button kind of locks in that score,
and I'm ready for my next turn.

00:21:06.420 --> 00:21:09.240
So feel free to play with
Dicey for just a second or two,

00:21:09.240 --> 00:21:12.120
and then stop and pay attention.

00:21:13.440 --> 00:21:18.090
I didn't realize until too late
that potential pitfall of giving

00:21:18.090 --> 00:21:22.350
people a game that I know when
building it I tested way too much.

00:21:22.400 --> 00:21:24.810
Oh, I'm doing great.

00:21:25.080 --> 00:21:27.920
I'll have to save this for now.

00:21:27.920 --> 00:21:27.920
Okay.

00:21:28.940 --> 00:21:29.750
I digress.

00:21:30.080 --> 00:21:33.960
So, what I'd like you to do next - oh,
one other thing to show you

00:21:33.960 --> 00:21:38.880
in Dicey is if you would
open up the Preferences pane.

00:21:39.800 --> 00:21:41.560
I had some preferences set.

00:21:41.560 --> 00:21:44.690
You'll notice that we have
a game difficulty slider

00:21:45.210 --> 00:21:48.730
that goes from difficult,
which means I only get one roll per turn,

00:21:49.290 --> 00:21:53.620
normal is three rolls per turn,
and easy is five rolls per turn.

00:21:54.040 --> 00:21:57.800
And we'll be accessorizing
this slider a little later.

00:21:57.840 --> 00:22:01.630
I'd like you to leave
these two open for now.

00:22:02.660 --> 00:22:03.450
Everybody with me?

00:22:03.450 --> 00:22:05.800
Screen pretty much look the same?

00:22:05.800 --> 00:22:06.800
Show of hands?

00:22:07.060 --> 00:22:07.790
Wave them.

00:22:07.790 --> 00:22:08.740
Thank you.

00:22:09.800 --> 00:22:14.740
Next thing I'd like you to do is
let's go into System Preferences.

00:22:14.740 --> 00:22:20.500
And we're going to go to the
Universal Access Preference pane.

00:22:22.200 --> 00:22:26.780
And once there,
I want you to make sure that you have

00:22:26.780 --> 00:22:34.250
checked "Enable access for assistive
devices." Everybody got that checked?

00:22:35.720 --> 00:22:38.400
All right, I'll wait a couple seconds.

00:22:38.520 --> 00:22:39.920
Now does everybody have it checked?

00:22:39.920 --> 00:22:42.470
Show of hands?

00:22:42.590 --> 00:22:43.910
Thank you.

00:22:45.400 --> 00:22:48.240
It's hard to see nodding up here.

00:22:48.330 --> 00:22:48.740
Great.

00:22:48.740 --> 00:22:50.580
So close up system preferences.

00:22:50.670 --> 00:22:55.090
That checkbox is what allows assistive
applications to communicate with

00:22:55.090 --> 00:22:57.240
other applications on the system.

00:22:57.330 --> 00:23:03.730
And then the last thing we'll do
here is I'd like you to navigate to

00:23:04.940 --> 00:23:07.030
slash developer.

00:23:07.110 --> 00:23:08.650
Actually, I'll go into column view.

00:23:08.810 --> 00:23:12.570
So developer applications

00:23:13.110 --> 00:23:19.570
Utilities, Accessibility Tools,
Accessibility Inspector,

00:23:19.570 --> 00:23:24.050
and for our session today I'd like
you to drag that to the dock because

00:23:24.050 --> 00:23:26.500
we'll be using that a good deal.

00:23:26.800 --> 00:23:29.220
So the path again,
in case you missed it the first time:

00:23:29.240 --> 00:23:39.690
/developer/applications/utilities/access
ibilitytools/accessibilityinspector.

00:23:40.310 --> 00:23:41.560
Everybody got that in the dock?

00:23:41.860 --> 00:23:42.670
Show of hands?

00:23:42.760 --> 00:23:45.320
Thank you.

00:23:46.940 --> 00:23:48.400
All right.

00:23:48.400 --> 00:23:51.040
And with that,
you can close your Finder windows

00:23:51.040 --> 00:23:52.160
if they're getting in your way.

00:23:52.160 --> 00:23:53.300
Maybe I'll just hide them.

00:23:53.300 --> 00:23:57.420
And then launch Accessibility Inspector.

00:24:01.000 --> 00:24:07.870
And I'm going to wait for a second
and then bump up the font size here.

00:24:13.700 --> 00:24:17.000
All right,
and as I move the mouse around,

00:24:17.020 --> 00:24:21.300
Accessibility Inspector is
itself an assistive application.

00:24:21.300 --> 00:24:23.940
It's communicating with
other apps on the system.

00:24:23.940 --> 00:24:29.230
In fact, if I move it around Dicey,
I notice that I'm getting in the

00:24:29.230 --> 00:24:32.190
window a lot of information back.

00:24:32.190 --> 00:24:32.190
I'm seeing

00:24:33.060 --> 00:24:39.000
the representation of the UI element that
is under the mouse at any given time.

00:24:39.000 --> 00:24:42.210
I'm seeing all of its attributes,
so we'll see some familiar

00:24:42.290 --> 00:24:45.470
ones up there like roll,
which we saw just a bit ago,

00:24:45.800 --> 00:24:47.800
kind of midway down as the parent.

00:24:47.950 --> 00:24:52.730
It doesn't have any children of its own,
but many, many more attributes including

00:24:52.730 --> 00:24:56.970
where it lives on the screen,
its size and position, its value,

00:24:56.990 --> 00:25:00.540
whether it's enabled,
whether it has the focus,

00:25:00.600 --> 00:25:05.090
what window it's in,
the top level UI element,

00:25:05.090 --> 00:25:09.660
which represents if the thing
happens to be in a sheet or a drawer,

00:25:09.890 --> 00:25:15.370
it will report that instead of the window
that the sheet or the drawer belongs to.

00:25:15.630 --> 00:25:19.850
And then at the very top,
we can see its hierarchy from that

00:25:20.010 --> 00:25:25.250
text element all the way back up the
chain of parents to the application.

00:25:25.300 --> 00:25:30.480
What I'd like you to do is please
point anywhere in the blank spot of

00:25:30.660 --> 00:25:34.380
the title bar of the the Dicey window,
and let's click on it to

00:25:34.380 --> 00:25:36.800
make sure it's in the front.

00:25:38.260 --> 00:25:42.100
And then what I'd like you to do is
we're going to freeze the UI - excuse me,

00:25:42.100 --> 00:25:44.100
freeze on a particular UI element.

00:25:44.100 --> 00:25:47.050
If you look at the small print
at the very bottom of the

00:25:47.050 --> 00:25:52.190
Accessibility Inspector window,
it says "Command F7 toggles

00:25:52.190 --> 00:25:56.590
UI element lock." On a laptop,
you typically also have

00:25:56.590 --> 00:26:02.280
to hold down the Fn key,
so Command Fn and then F7,

00:26:02.280 --> 00:26:08.100
and we should lock onto one UI element,
so that as we move the mouse around,

00:26:08.480 --> 00:26:12.590
things don't change like
crazy in that text field.

00:26:13.470 --> 00:26:15.210
Does everybody have it locked?

00:26:15.360 --> 00:26:16.900
Please raise a hand.

00:26:16.980 --> 00:26:18.360
Thank you.

00:26:18.400 --> 00:26:19.080
Excellent.

00:26:19.230 --> 00:26:23.810
So it's red and now we can kind of
take a moment and look around here.

00:26:24.020 --> 00:26:26.900
When we locked,
we also did one other thing.

00:26:26.900 --> 00:26:29.840
You'll notice that a little
window has popped up.

00:26:30.180 --> 00:26:34.890
Let's see if I can zoom in here.

00:26:34.890 --> 00:26:34.900
There we go.

00:26:35.490 --> 00:26:39.240
And if we take a look,
it shows us a pop-up of all of the

00:26:39.240 --> 00:26:43.450
attributes that we see in the bigger
Accessibility Inspector window.

00:26:43.600 --> 00:26:50.100
It also allows us to highlight the
item that is currently locked on.

00:26:50.100 --> 00:26:52.250
And by doing that, it's shaded in red.

00:26:52.400 --> 00:26:54.600
So that way,
if you're not sure where you are,

00:26:54.600 --> 00:26:59.300
you can get a visual depiction of
where that element is on the screen

00:26:59.300 --> 00:27:00.710
that you're currently looking at.

00:27:00.800 --> 00:27:04.540
So feel free to turn that
on and turn it back off.

00:27:05.400 --> 00:27:09.400
And then also interesting
in here is the Go To pop-up.

00:27:09.400 --> 00:27:16.770
So sometimes attributes are
just values such as the size,

00:27:16.770 --> 00:27:18.400
which is just a point.

00:27:18.400 --> 00:27:22.300
Or the position, which is just a point.

00:27:22.760 --> 00:27:27.000
Sometimes an attribute is a
reference to another UI element.

00:27:27.040 --> 00:27:31.270
And this Go To pop-up allows
us to navigate or jump

00:27:31.780 --> 00:27:34.200
around to - or excuse me,
navigate is a better word

00:27:34.200 --> 00:27:35.200
- to other UI elements.

00:27:35.400 --> 00:27:39.210
Now we have a lot of children,
but we are going to

00:27:39.210 --> 00:27:41.330
jump up to the parent.

00:27:41.770 --> 00:27:44.600
So the Go To AX parent.

00:27:44.610 --> 00:27:48.800
And when I release this,
we're going to jump to the application.

00:27:48.800 --> 00:27:51.750
All right.

00:27:54.080 --> 00:27:55.840
Let me zoom back out.

00:27:55.840 --> 00:27:58.240
And so if I take a look
at the application,

00:27:58.240 --> 00:28:00.320
you'll notice again it has a role.

00:28:00.370 --> 00:28:07.000
The role description is an
attribute that provides a localized,

00:28:07.000 --> 00:28:09.760
presentable description of the role.

00:28:10.000 --> 00:28:12.680
The title of the application is Dicey.

00:28:13.010 --> 00:28:15.000
We notice it has three children.

00:28:15.170 --> 00:28:18.480
And it has kind of convenience
attributes for jumping right to the

00:28:18.480 --> 00:28:22.770
menu bar and right to its windows
instead of going through its children.

00:28:23.000 --> 00:28:26.630
You'll also notice we see
whether we're frontmost or not

00:28:26.630 --> 00:28:29.000
and whether we're hidden or not.

00:28:29.000 --> 00:28:31.870
And that these attributes
have this W in parentheses.

00:28:32.000 --> 00:28:36.000
That indicates that we can set
them or that they're writable.

00:28:36.190 --> 00:28:39.230
And we can actually interact
with the application right here

00:28:39.230 --> 00:28:41.000
in Accessibility Inspector.

00:28:41.000 --> 00:28:44.800
So going back down to
our Locked On panel,

00:28:44.970 --> 00:28:52.110
I'd like you to,
in the attributes pop-up, choose Hidden.

00:28:54.850 --> 00:28:57.780
And then we're going to
type the new value here.

00:28:57.890 --> 00:29:03.200
Accessibility Inspector is
going to expect a 1 for true.

00:29:03.340 --> 00:29:05.480
So we'll type a 1.

00:29:06.250 --> 00:29:10.430
And then click "Set
Value." Is everybody there?

00:29:10.620 --> 00:29:12.140
Show of hands.

00:29:12.330 --> 00:29:13.100
Excellent.

00:29:13.100 --> 00:29:18.340
So, once we set that value,
now "Hidden" is indeed true.

00:29:18.340 --> 00:29:21.330
That application is hidden.

00:29:21.700 --> 00:29:25.200
Our Accessibility
Inspector window hasn't refreshed.

00:29:25.200 --> 00:29:28.390
We need to click the
Refresh button down here.

00:29:28.600 --> 00:29:33.240
And we'll notice that Hidden is now True,
or reports itself as True,

00:29:33.250 --> 00:29:38.600
and Frontmost reports itself as False,
because some attributes are interrelated.

00:29:40.270 --> 00:29:41.950
Now,

00:29:43.400 --> 00:29:47.250
Let's go back to Attributes,
to AX Frontmost,

00:29:47.250 --> 00:29:51.220
and we're going to set that to True to
bring our application to the very front.

00:29:51.300 --> 00:29:57.050
So Attribute, AX Frontmost in the pop-up.

00:29:57.970 --> 00:30:00.740
One for true.

00:30:00.740 --> 00:30:05.250
And then we're going to set the
value of AX_FRONTMOST to true.

00:30:06.570 --> 00:30:08.640
Is everybody there?

00:30:08.700 --> 00:30:09.470
Excellent.

00:30:09.500 --> 00:30:13.610
All right.

00:30:14.170 --> 00:30:19.170
Let's refresh one more time just to
notice that the values do indeed update.

00:30:21.020 --> 00:30:25.200
And now let's navigate down
to the Preferences window.

00:30:25.300 --> 00:30:29.300
So using the Go To pop-up,
we'll look at the AX Children,

00:30:29.300 --> 00:30:32.050
or we could actually
go to the AX Windows,

00:30:32.150 --> 00:30:36.720
your choice, of Dicey,
of the application.

00:30:36.750 --> 00:30:40.760
And we want to go to the
AX Window Preferences.

00:30:40.840 --> 00:30:43.460
So Go To Preferences.

00:30:47.310 --> 00:30:48.200
Everybody there?

00:30:48.200 --> 00:30:49.680
Show of hands.

00:30:49.720 --> 00:30:50.880
Thanks.

00:30:51.020 --> 00:30:53.880
And let's turn on highlighting
now so we make sure that yes,

00:30:53.880 --> 00:30:56.410
we are indeed looking at the right thing.

00:30:57.130 --> 00:31:02.260
And you'll notice that Window has
a number of things that an

00:31:02.350 --> 00:31:05.140
application does not have,
including ways to very

00:31:05.140 --> 00:31:09.000
quickly get to the controls,
such as the Close button.

00:31:09.240 --> 00:31:12.560
So let's go to the Close button.

00:31:12.910 --> 00:31:16.130
So go to AXCloseButton.

00:31:17.040 --> 00:31:22.210
And you'll notice that our highlight
updates and our focus updates.

00:31:22.570 --> 00:31:24.790
And if we look at the bottom
of all those attributes,

00:31:24.870 --> 00:31:27.500
you'll notice that
there's an action listed.

00:31:27.520 --> 00:31:32.490
So in addition to having attributes,
a UI element can have actions.

00:31:32.590 --> 00:31:36.150
And actions tend to be things
that are best represented as

00:31:36.150 --> 00:31:39.500
like a single mouse click,
a single mouse action.

00:31:39.530 --> 00:31:43.520
And notice that it's representing
what you're doing to the mouse.

00:31:43.810 --> 00:31:47.490
It's not a close action,
it's a press action.

00:31:47.750 --> 00:31:51.690
Because every button you can press it,
what actually happens when you press

00:31:51.900 --> 00:31:56.890
it isn't part of the definition of
what we're exposing here as the action.

00:31:57.000 --> 00:32:01.390
So down in the Locked On area,
you'll notice that we

00:32:01.630 --> 00:32:03.680
have a pop-up for actions.

00:32:03.970 --> 00:32:06.500
AX Press is our only choice.

00:32:06.640 --> 00:32:09.500
And we can click to perform the action,
which should close.

00:32:09.650 --> 00:32:10.460
our window.

00:32:10.460 --> 00:32:13.050
So let's click perform.

00:32:15.680 --> 00:32:17.600
and our window goes away.

00:32:17.600 --> 00:32:20.660
All right,
there's going to be one more thing that

00:32:20.660 --> 00:32:23.450
we take a look at before we move on.

00:32:24.010 --> 00:32:27.650
First, we're in this state where this
thing's red and locked on.

00:32:28.130 --> 00:32:37.800
Let's untoggle by doing Command and
then probably on a laptop Fn,

00:32:37.800 --> 00:32:37.800
F7 to unlock the UI element.

00:32:39.350 --> 00:32:43.740
So now as you move the mouse around,
things change.

00:32:43.780 --> 00:32:46.200
If you don't have any dice
showing at the moment,

00:32:46.200 --> 00:32:49.470
I'd like you to roll the die.

00:32:50.500 --> 00:32:55.000
And we use Accessibility Inspector to,
as you might guess,

00:32:55.000 --> 00:32:58.500
inspect the accessibility
of an application.

00:32:58.620 --> 00:33:03.500
And one thing we'll notice is, you know,
I point to various text,

00:33:03.500 --> 00:33:06.500
and it reports itself as static text.

00:33:06.500 --> 00:33:10.940
Or I point at the roll button,
it tells me it's a button and it has an

00:33:11.020 --> 00:33:18.270
AX title of "roll." But then I point at
this custom dice view and... nothing.

00:33:18.510 --> 00:33:25.040
As far as an accessible - excuse me,
an assistive application is concerned,

00:33:25.180 --> 00:33:28.610
there is no dice view
in this application.

00:33:29.010 --> 00:33:35.030
And to have a dice game without a dice
view makes this very unaccessible.

00:33:36.450 --> 00:33:40.540
Now two other things that we'll
be dealing with are if we point

00:33:40.540 --> 00:33:45.940
at one of these arrow buttons,
you'll notice that its title is blank

00:33:45.940 --> 00:33:49.160
because it doesn't have a text title.

00:33:49.160 --> 00:33:52.580
So a user would have no idea
what this button might do.

00:33:52.580 --> 00:33:56.260
I can press it,
but who knows what's going to happen.

00:33:56.260 --> 00:34:00.440
And even if I kind of point
at the total down here,

00:34:00.440 --> 00:34:06.060
the numeric total, being excited,
I can see that the grand total

00:34:06.140 --> 00:34:08.460
is on the same line as this.

00:34:08.460 --> 00:34:12.130
But from the standpoint of
the accessibility inspector,

00:34:12.130 --> 00:34:17.750
there's no connection between this
number and the label grand total.

00:34:17.760 --> 00:34:19.610
So some of the things we'll
be doing in this session,

00:34:19.610 --> 00:34:22.960
or the things we'll be doing,
is making it so that those items

00:34:23.000 --> 00:34:28.160
that are already reporting some
accessibility information report

00:34:28.260 --> 00:34:30.700
more and better information.

00:34:30.700 --> 00:34:34.690
And then we will also be making
sure that this invisible view that,

00:34:34.880 --> 00:34:39.070
as far as voiceover would be concerned,
it doesn't exist,

00:34:39.190 --> 00:34:44.300
we'll make sure that it shows up on the
radar map and reports itself correctly.

00:34:44.300 --> 00:34:45.880
Okay, great.

00:34:45.930 --> 00:34:47.310
Let's go back to slides.

00:34:52.300 --> 00:34:57.300
Let me hide this for a sec.

00:34:57.510 --> 00:35:03.400
Okay, so that was an application
where I built the application,

00:35:03.430 --> 00:35:06.160
I did no accessibility whatsoever,
and as you saw,

00:35:06.160 --> 00:35:09.490
we were able to interact a
good deal with the application,

00:35:09.490 --> 00:35:14.300
but there were some key portions
that were completely inaccessible.

00:35:14.300 --> 00:35:17.300
So Cocoa is doing a lot of that for you.

00:35:17.300 --> 00:35:20.280
Now, a few other things that we
saw in that hands-on is,

00:35:20.280 --> 00:35:24.100
in addition to asking about attributes,

00:35:24.340 --> 00:35:27.920
We might also be asked about a
list of actions on our side of the

00:35:28.220 --> 00:35:32.180
- I'll move over to the Cocoa side
- a description for an action,

00:35:32.220 --> 00:35:34.060
to perform an action.

00:35:34.340 --> 00:35:38.140
We also saw that moving the mouse around,
there's some way that an

00:35:38.140 --> 00:35:42.010
assistive app is finding out
what element is at a given point.

00:35:42.480 --> 00:35:46.300
So there must be some hit
testing going on in Cocoa.

00:35:46.300 --> 00:35:50.300
And in addition,
one thing we did not see,

00:35:50.300 --> 00:35:53.110
but there's also the concept
that an assistive app can get

00:35:53.310 --> 00:35:59.040
some notifications that things
have changed in the application.

00:36:00.050 --> 00:36:01.800
So that's what's going on.

00:36:01.800 --> 00:36:04.300
How is Cocoa doing that automatically?

00:36:04.490 --> 00:36:08.140
And what is it on the
Cocoa side that's the backend,

00:36:08.140 --> 00:36:13.720
kind of the thing that that
UI element is referring to?

00:36:14.800 --> 00:38:00.700
[Transcript missing]

00:38:02.470 --> 00:38:06.870
So we also need to do hit
testing and focus testing.

00:38:06.880 --> 00:38:12.050
So hit testing,
we get past a point and we return the

00:38:12.220 --> 00:38:18.950
element that corresponds to that point,
and also what element in the

00:38:18.950 --> 00:38:22.330
application has the focus.

00:38:24.480 --> 00:38:26.580
So far, nine methods.

00:38:26.990 --> 00:38:32.620
There's a tenth method,
and it also explains why our Dice

00:38:32.620 --> 00:38:35.400
View just didn't show up by default.

00:38:36.290 --> 00:38:41.290
Accessibility is ignored.

00:38:43.110 --> 00:38:48.160
The view hierarchy is more
complicated than even as a user

00:38:48.160 --> 00:38:51.100
looking at an application with
a window and a button in it.

00:38:51.100 --> 00:38:54.420
You can't necessarily even
see that that window has a

00:38:54.460 --> 00:38:58.200
frame view with a content view,
and then there's an NSButton,

00:38:58.200 --> 00:39:00.280
and then in that is an NSButton cell.

00:39:00.600 --> 00:39:03.100
You just see a window and a button.

00:39:03.100 --> 00:39:06.100
So similarly,
we don't want to force an accessibility

00:39:07.050 --> 00:39:11.100
or an assistive application to
deal with that complexity either.

00:39:11.100 --> 00:39:15.860
So we only report the
window having a button.

00:39:16.290 --> 00:39:17.790
Everything in between

00:39:19.240 --> 00:39:24.480
It's part of the view hierarchy,
but it reports accessibility is ignored,

00:39:24.480 --> 00:39:25.060
yes.

00:39:25.060 --> 00:39:28.580
In fact, that is the default for a view,
or NSView.

00:39:28.640 --> 00:39:33.020
Accessibility is ignored, yes,
I am ignored.

00:39:34.790 --> 00:39:40.750
Now, on the other hand,
sometimes we need to provide more

00:39:40.750 --> 00:39:47.110
detail to an assistive application than
actually exists in our object model.

00:39:47.270 --> 00:39:51.720
So, for instance, a scroller

00:39:51.760 --> 00:39:52.660
It's a scroller.

00:39:52.950 --> 00:39:57.200
However, if you inspect a scroller in...

00:39:57.320 --> 00:40:00.670
Accessibility Inspector,
you'll notice that it has children.

00:40:00.680 --> 00:40:03.560
It has four buttons
and a value indicator.

00:40:03.560 --> 00:40:05.580
Now, where did these come from?

00:40:05.580 --> 00:40:11.020
Well, in fact, they're not cells,
they're not controls,

00:40:11.020 --> 00:40:14.740
they're actually just fictional objects,
they're not fictional,

00:40:14.800 --> 00:40:18.790
they're real objects,
but they're objects that we make

00:40:18.790 --> 00:40:22.810
up expressly for the purpose of
responding to the 10 methods of

00:40:22.890 --> 00:40:27.940
the accessibility protocol so
that they can present themselves

00:40:27.940 --> 00:40:30.100
as buttons and value indicators.

00:40:31.740 --> 00:40:35.430
In our case,
we have custom sub-elements where

00:40:35.500 --> 00:40:37.390
each die is a separate class.

00:40:37.510 --> 00:40:39.460
It knows how to draw itself.

00:40:39.510 --> 00:40:44.620
It handles a little bit of dealing with
drawing the focus and what have you.

00:40:44.930 --> 00:40:46.290
But it's not an NS cell.

00:40:46.290 --> 00:40:47.700
It's not an NS view.

00:40:47.700 --> 00:40:50.700
It's just something that kind
of does a little drawing for me.

00:40:50.700 --> 00:40:58.890
So, we are going to implement the ten
methods of the Accessibility protocol.

00:40:58.910 --> 00:41:01.730
And we're going to accessorize
these as check boxes,

00:41:01.900 --> 00:41:06.700
because that's kind of the closest
role to the standard roles.

00:41:06.700 --> 00:41:09.570
Because we can hold them or unhold them.

00:41:09.930 --> 00:41:14.510
We can kind of turn them on or
off as to kind of a checked state.

00:41:16.710 --> 00:41:20.660
And so let's do hands-on part two,
where we'll take a look at

00:41:21.800 --> 00:41:25.490
exposing some of the built-in

00:41:26.100 --> 00:41:44.800
[Transcript missing]

00:41:50.860 --> 00:41:56.200
So first, just a very quick look at it,
at the project itself.

00:41:56.230 --> 00:41:58.680
We have an application controller.

00:41:58.710 --> 00:42:02.880
We have a custom view class,
which is doing the

00:42:02.880 --> 00:42:05.040
drawing of the dice view.

00:42:05.080 --> 00:42:08.780
And then within it, a die class,
which is responsible for

00:42:08.780 --> 00:42:12.640
drawing and dealing with the
randomization of each die.

00:42:12.670 --> 00:42:15.800
The game is kind of the back end logic.

00:42:15.820 --> 00:42:18.380
And then I've added--

00:42:19.550 --> 00:42:27.240
A category on DC Dice View in
the dcdiceviewaccessibility.m.

00:42:27.240 --> 00:42:30.820
So if you select that, take a look.

00:42:33.570 --> 00:42:36.340
So, the first thing we're going
to do is just see what happens

00:42:36.340 --> 00:42:38.410
if we change the default.

00:42:38.570 --> 00:42:44.150
Instead of saying that we are ignored,
let's uncomment the method

00:42:44.150 --> 00:42:46.360
"Accessibility is ignored"

00:42:52.340 --> 00:42:54.760
And recompile and launch.

00:42:54.770 --> 00:42:56.200
So build and go.

00:42:56.200 --> 00:42:59.860
Is everybody there?

00:43:00.390 --> 00:43:01.900
Show of hands.

00:43:01.900 --> 00:43:04.100
Who's catching up?

00:43:04.190 --> 00:43:05.890
Show of hands.

00:43:11.310 --> 00:43:15.100
Okay,
I'll leave that running and I'll repeat.

00:43:15.150 --> 00:43:20.020
Step 2, DC Dice View, Accessibility.

00:43:20.080 --> 00:43:24.880
It's a category where we're going
to put our accessibility stuff,

00:43:24.930 --> 00:43:31.010
and we're overriding accessibility
is ignored to return no.

00:43:31.100 --> 00:43:32.140
Everybody got it running?

00:43:32.300 --> 00:43:34.260
Show of hands.

00:43:34.270 --> 00:43:35.770
Excellent.

00:43:38.140 --> 00:43:43.270
And once it's running,
I'd like you to launch Accessibility

00:43:43.460 --> 00:43:46.410
Inspector if you had quit it.

00:43:47.130 --> 00:43:51.550
And you'll notice that now,
at the very least,

00:43:51.720 --> 00:43:54.030
we're not completely off the map.

00:43:54.340 --> 00:43:56.000
Something is here.

00:43:56.130 --> 00:43:59.270
It doesn't know what our role is,
but actually it has a decent

00:43:59.270 --> 00:44:00.620
amount of information.

00:44:00.770 --> 00:44:05.120
The size and position is there,
it knows what window we're in,

00:44:05.120 --> 00:44:07.360
it knows who our parent is.

00:44:07.750 --> 00:44:13.500
So we are picking up the accessibility
that NSView implements by default,

00:44:13.680 --> 00:44:17.330
simply by saying we're not ignored.

00:44:18.180 --> 00:44:20.880
Okay,
but let's actually go in and at least

00:44:21.380 --> 00:44:24.660
get our role correct at the moment.

00:44:24.680 --> 00:44:26.730
So we'll quit Dicey.

00:44:27.360 --> 00:44:30.290
I'll hide the Accessibility Inspector.

00:44:30.360 --> 00:44:34.270
And back in the code, we're going to...

00:44:34.800 --> 00:44:38.140
Return something different
for the role attribute.

00:44:38.300 --> 00:44:45.190
So if I uncomment this second method,
which is Accessibility Attribute Value,

00:44:45.890 --> 00:44:50.610
Simply, if the thing that they're asking
for is the role attribute,

00:44:50.610 --> 00:44:54.760
and again, those constants are all
defined in NSAccessibility.h,

00:44:54.800 --> 00:44:59.890
then instead of returning the default,
we're going to say we're a group,

00:44:59.960 --> 00:45:02.800
because we're grouping
a bunch of sub-elements.

00:45:02.820 --> 00:45:06.670
There's no real interaction I can
do with the green area itself.

00:45:06.670 --> 00:45:11.800
And that role is also
defined in NSAccessibility.h.

00:45:11.800 --> 00:45:17.810
However, if they ask for anything else,
I'm just going to do what my

00:45:17.810 --> 00:45:20.800
superclass has implemented.

00:45:20.800 --> 00:45:23.810
So let's build and run again.

00:45:31.210 --> 00:45:41.800
And bring up the Accessibility Inspector.

00:45:41.800 --> 00:45:44.540
How many folks are there
or very close to there?

00:45:44.610 --> 00:45:46.160
Okay, great.

00:45:46.220 --> 00:45:48.570
I'll hold up for just a sec.

00:45:52.100 --> 00:45:58.500
But what you'll see is that our role
is indeed now reported as AX Group,

00:45:58.640 --> 00:46:04.100
but also the role description has
automatically updated for Group.

00:46:04.100 --> 00:46:07.900
Our superclass implements the
functionality to return the

00:46:08.060 --> 00:46:12.340
proper role description for
whatever role we happen to have,

00:46:12.360 --> 00:46:16.250
so we did not have to
implement that ourselves.

00:46:16.790 --> 00:46:19.060
Now, we're still not all
the way there because,

00:46:19.110 --> 00:46:23.550
okay, we know there's something here,
but these dice are still invisible as

00:46:23.690 --> 00:46:26.500
far as an assistive app is concerned.

00:46:26.620 --> 00:46:29.750
But we will get to that all in good time.

00:46:30.630 --> 00:46:33.250
All right, so that's it for this step.

00:46:33.370 --> 00:46:36.100
Let's jump back to the slides.

00:46:43.700 --> 00:46:51.500
[Transcript missing]

00:46:52.740 --> 00:46:56.700
It's pretty easy to take a custom
view and at least get it on the map,

00:46:56.860 --> 00:47:01.640
and that there are a lot of attributes
that automatically show up for us.

00:47:01.840 --> 00:47:05.340
And we've also seen that things
like buttons and text fields

00:47:05.340 --> 00:47:09.830
and the like already have all
the accessibility you need,

00:47:09.930 --> 00:47:12.790
except perhaps for a piece
or two here and there.

00:47:12.910 --> 00:47:15.760
So let's talk about
customizing some instances.

00:47:15.840 --> 00:47:19.050
So we saw that we had those
image buttons that we had no idea

00:47:19.050 --> 00:47:22.480
what would happen if we pressed
them because they had no title.

00:47:22.840 --> 00:47:27.480
We saw numbers that were just floating
in space and we had no idea that it

00:47:27.480 --> 00:47:30.960
was the grand total because there
was no accessibility information as

00:47:30.960 --> 00:47:32.630
to what title it happened to have.

00:47:32.840 --> 00:47:37.840
And to customize instances,
try to make it as easy as possible.

00:47:37.840 --> 00:47:42.840
You don't need to subclass,
you just override a few attributes.

00:47:43.000 --> 00:47:45.840
And you can do it
programmatically using the method.

00:47:45.840 --> 00:47:50.020
So you can set the accessibility,
set override value for attribute,

00:47:50.290 --> 00:47:54.840
and you can also set many of
these up using interface builder.

00:47:54.900 --> 00:47:57.800
And in fact,
we're going to do both in just a moment.

00:47:58.000 --> 00:48:01.140
But first,
let me tell you about a few of these

00:48:01.140 --> 00:48:06.710
common attributes that you definitely
want to add to your application.

00:48:06.850 --> 00:48:09.860
So the first is the
description attribute.

00:48:09.860 --> 00:48:14.340
This is especially handy on buttons.

00:48:14.340 --> 00:48:17.330
You could put it on a group if
you had a number of groups as to

00:48:17.470 --> 00:48:19.700
describing what this was grouping.

00:48:19.700 --> 00:48:24.610
Some rules of thumb:
it's just a simple string.

00:48:24.830 --> 00:48:26.700
It should be a localized string.

00:48:26.700 --> 00:48:30.430
Don't put the role name in the string.

00:48:30.800 --> 00:48:35.700
Don't call it the "add button."
Just call it "add" as the description.

00:48:36.700 --> 00:48:40.380
Most assistive applications,
such as VoiceOver, are going to tack the

00:48:40.380 --> 00:48:43.700
role on the end anyway,
and it'll say "add button button,"

00:48:43.700 --> 00:48:45.700
and that just sounds dumb.

00:48:47.280 --> 00:48:50.400
It often is the same thing that
if you had a text title in there,

00:48:50.400 --> 00:48:55.040
that's what you would have written,
but use lowercase.

00:48:55.130 --> 00:48:59.520
And it's not the role description,
which is saying, "Okay, I'm a button,

00:48:59.520 --> 00:49:04.280
I'm a window." This is more specific
to the instance of the item.

00:49:04.420 --> 00:49:10.450
Now, Spotlight Help uses the
description as it's kind of

00:49:10.450 --> 00:49:16.190
figuring out where it's going,
or as it's indexing your UI.

00:49:16.420 --> 00:49:20.690
Spotlight Help also uses
these title indicators.

00:49:20.820 --> 00:49:23.990
So this is a reference from
one UI element to another,

00:49:24.000 --> 00:49:27.970
because sometimes the title isn't
embedded in the same control.

00:49:28.130 --> 00:49:31.860
So in this case,
we have a few examples here.

00:49:32.370 --> 00:49:37.010
The title UI element attribute
is essentially saying,

00:49:37.010 --> 00:49:42.300
I am pointing to the
UI element that holds my title.

00:49:42.300 --> 00:49:47.500
So, the text field that says 2-42
would have that property and on

00:49:47.500 --> 00:49:52.340
the other end or the value of that
property would be the grand total.

00:49:52.340 --> 00:49:57.290
Or the text field, the blank one,
would have the title UI element

00:49:57.290 --> 00:50:01.960
attribute and its value would
be that name text field.

00:50:01.960 --> 00:50:08.020
And you can also set up a back pointer
where a particular UI element can say,

00:50:08.090 --> 00:50:13.080
I serve as the title for all
of these other UI elements.

00:50:13.080 --> 00:50:15.520
And that can be an array of UI elements.

00:50:15.520 --> 00:50:19.040
So it might be that, well,
grand total doesn't really work,

00:50:19.370 --> 00:50:23.030
but it might be one where
there are more than one things

00:50:23.030 --> 00:50:25.520
that this thing refers to.

00:50:25.520 --> 00:50:28.480
This also is used by Safari help.

00:50:29.960 --> 00:50:31.660
Links.

00:50:31.660 --> 00:50:35.220
So once in a while when
you're going through Mac OS X,

00:50:35.220 --> 00:50:38.410
you'll see an interface where
there's a bunch of stuff on the left,

00:50:38.430 --> 00:50:41.970
and you click on the thing on the left,
and the thing in the middle

00:50:42.140 --> 00:50:45.960
changes to reflect the thing
you selected on the left.

00:50:46.350 --> 00:50:51.810
But there's no good way in
accessibility by default to know that

00:50:51.810 --> 00:50:55.480
this thing that I selected on the
left is related to all these other

00:50:55.480 --> 00:50:58.000
things that just happened over here.

00:50:58.200 --> 00:51:02.030
To do that,
you want to set up linked UI elements.

00:51:02.080 --> 00:51:07.270
And it's an array of UI elements
that are related to or linked

00:51:07.270 --> 00:51:09.940
to that current UI element.

00:51:11.900 --> 00:51:14.130
Then finally, labels.

00:51:14.130 --> 00:51:19.460
Again,
there's a lot of information that looking

00:51:19.460 --> 00:51:21.570
at a user interface you can discern.

00:51:21.860 --> 00:51:25.000
I know that that last thing
is where difficult is,

00:51:25.200 --> 00:51:27.660
and that one on this
end is where easy is.

00:51:27.800 --> 00:51:32.220
But that information
doesn't automatically show

00:51:32.220 --> 00:51:34.490
up for an assistive app.

00:51:35.000 --> 00:51:37.800
And so we need to give it
a little more information.

00:51:37.800 --> 00:51:42.540
So for a slider, for instance,
you would want to give that slider

00:51:42.540 --> 00:51:48.890
a label UI elements attribute,
which is an array that contains the

00:51:48.890 --> 00:51:53.200
UI elements for those three labels.

00:51:53.720 --> 00:51:57.280
We need some way for that assistive
app to know that difficult

00:51:57.280 --> 00:52:00.080
means one and easy means five.

00:52:00.280 --> 00:52:05.280
And so each of those labels
needs to have a value attribute.

00:52:05.520 --> 00:52:09.790
So that, okay, I've picked this one
and the value is five,

00:52:09.790 --> 00:52:13.040
so therefore that slider
should be set to five.

00:52:13.290 --> 00:52:17.520
And we're going to hook
one of these up as well.

00:52:17.800 --> 00:52:21.750
So, let's get to it.

00:52:24.390 --> 00:52:26.800
All right, we're on stage three now.

00:52:26.920 --> 00:52:29.800
And we're going to do this
entirely in Interface Builder.

00:52:29.800 --> 00:52:32.800
Well, we'll go into Xcode first.

00:52:32.990 --> 00:52:38.820
So launch the project
for Dicey stage three.

00:52:42.510 --> 00:52:47.680
And then on the left-hand side,
down in Resources, is the main menu .nib.

00:52:48.670 --> 00:52:53.060
I'd like you to double-click
to launch Interface Builder.

00:52:53.060 --> 00:52:56.660
And I'm going to hide others.

00:53:00.970 --> 00:53:03.440
Does everybody have the main menu open?

00:53:03.650 --> 00:53:05.500
Show of hands.

00:53:05.530 --> 00:53:07.670
How many folks need another minute?

00:53:07.990 --> 00:53:08.900
Or close?

00:53:09.260 --> 00:53:10.700
Okay.

00:53:10.830 --> 00:53:11.900
Alrighty.

00:53:11.900 --> 00:53:17.600
So, first let's do the button.

00:53:19.780 --> 00:53:24.130
Select the first button
with the arrow on it.

00:53:24.130 --> 00:53:27.570
Go to Tools, Show Inspector.

00:53:30.000 --> 00:53:32.270
And in the Inspector,
we're going to go to

00:53:32.340 --> 00:53:33.860
the Accessibility pane.

00:53:33.860 --> 00:53:37.100
It's also Command 6.

00:53:37.900 --> 00:53:41.800
To add a description, we just type it in.

00:53:41.880 --> 00:53:48.740
We're just going to call it "select".

00:53:52.300 --> 00:53:56.940
And then we're also going to indicate
that this button has a title,

00:53:56.940 --> 00:54:01.340
which is "ones" or that text field
that reads "ones". So for this,

00:54:01.340 --> 00:54:05.040
this is very similar to hooking
up an outlet in Interface Builder.

00:54:05.040 --> 00:54:10.980
We control drag from
the button to "ones".

00:54:12.590 --> 00:54:17.250
And then in the Inspector,
we select AXTitleUIElement

00:54:17.900 --> 00:54:20.300
and click Connect.

00:54:24.200 --> 00:54:29.500
And then for a little practice,
we just Ctrl+do the same for the

00:54:29.500 --> 00:54:32.200
two text fields on either side.

00:54:32.200 --> 00:54:36.460
Ctrl+click from the
text field to its title,

00:54:36.460 --> 00:54:41.470
select AX_Title_UI_Element, and connect.

00:54:43.090 --> 00:54:48.640
And third time,
Control-drag to the title, select title.

00:54:48.640 --> 00:54:51.000
You can also double-click here.

00:54:51.120 --> 00:54:55.000
But we'll hit Connect, hook those up.

00:54:55.000 --> 00:54:57.520
We'll save our changes.

00:55:06.280 --> 00:55:11.510
Head back to Xcode and Build and Run.

00:55:19.840 --> 00:55:22.550
So, we'll roll the die,
take a look in the

00:55:22.590 --> 00:55:26.290
Accessibility Inspector,
first at that button,

00:55:26.290 --> 00:55:28.200
and you'll notice that

00:55:28.820 --> 00:55:33.190
Indeed, towards the bottom there,
the AX description is in place.

00:55:33.190 --> 00:55:34.660
It's reporting itself.

00:55:34.820 --> 00:55:36.950
It is select.

00:55:37.310 --> 00:55:41.240
And in fact,
it also has a title UI element,

00:55:41.390 --> 00:55:43.370
which is an AX static text.

00:55:43.550 --> 00:55:45.660
Let's freeze for just a moment.

00:55:45.820 --> 00:55:52.270
So again,
Command-Fn-F7 to freeze on that button.

00:55:52.370 --> 00:55:54.410
Oops, lost it.

00:55:56.330 --> 00:56:02.180
And let's turn highlighting on so we
can see that that button is highlighted.

00:56:04.280 --> 00:56:09.040
And then go to its title UI element.

00:56:09.040 --> 00:56:14.110
And you'll notice it jumps over
that it does indeed refer to ones.

00:56:15.380 --> 00:56:20.050
So now we have a good deal more
information about what this

00:56:20.110 --> 00:56:22.650
button could possibly be for.

00:56:25.050 --> 00:56:28.880
And then let's unlock and quit.

00:56:29.000 --> 00:56:34.100
You can leave the
Accessibility Inspector open.

00:56:34.480 --> 00:56:37.500
Let's close this project
and go on to step four.

00:56:37.600 --> 00:56:41.150
So let's close that nib file as well.

00:56:41.200 --> 00:56:53.730
So step four,
we're going to accessorize the slider.

00:57:02.810 --> 00:57:04.690
Does everyone have Step 4 open?

00:57:04.700 --> 00:57:11.970
And in Step 4,
let's take a brief look at the Nib file.

00:57:16.740 --> 00:57:19.900
And in the Nib file,
the main menu Nib in step 4,

00:57:20.090 --> 00:57:23.090
if we select the app controller,

00:57:24.820 --> 00:57:26.780
And then look at the connections.

00:57:26.850 --> 00:57:30.580
I've added a few connections
for the sake of time.

00:57:32.170 --> 00:57:37.340
I've added an outlet, I should say,
to the slider in our Preferences

00:57:38.040 --> 00:57:42.120
pane and to each of the labels:
Difficult, Easy, and Normal.

00:57:42.900 --> 00:57:49.370
So we can close Interface Builder.

00:57:53.770 --> 00:57:59.710
And in the AppController class,
back in Xcode, dcappcontroller.h,

00:57:59.710 --> 00:58:05.790
in the header,
let's uncomment these IB outlets.

00:58:10.440 --> 00:58:19.770
And then head over to the .m file
to the first commented-out method,

00:58:19.920 --> 00:58:21.870
SetupSliderAccessibility.

00:58:23.100 --> 00:58:27.100
And if we comment that out...

00:58:29.150 --> 00:58:30.780
Just take a look at the code.

00:58:30.800 --> 00:58:35.660
What we're doing is overriding
some attributes via code.

00:58:35.780 --> 00:58:40.640
So the first thing we do is we just grab
the min and the max value of the slider.

00:58:40.770 --> 00:58:48.610
In the first section,
we're setting up that array of labels.

00:58:49.290 --> 00:58:56.170
Now, one thing that's important to note
is that it is the cell of a control

00:58:56.550 --> 00:59:01.200
that is typically accessorized,
not the control itself.

00:59:01.260 --> 00:59:04.270
Because when we move that
cell into things like a

00:59:04.440 --> 00:59:08.390
matrix or into a table view,
we want that functionality of

00:59:08.430 --> 00:59:12.090
access - that accessibility
functionality to travel with the cell,

00:59:12.460 --> 00:59:14.200
not the outer control.

00:59:14.390 --> 00:59:19.200
So, even though we have an
outlet to the actual control,

00:59:19.200 --> 00:59:24.640
we want to be using the cells within
those controls as the elements that

00:59:24.680 --> 00:59:27.200
we're setting as the UI elements.

00:59:27.200 --> 00:59:32.190
So we make an array of the
cells of those three labels,

00:59:32.200 --> 00:59:37.350
and then using accessibility set
override value for attribute,

00:59:37.350 --> 00:59:42.200
we take the cell of the slider,
and we set that array for the attribute,

00:59:42.200 --> 00:59:43.170
and its accessibility to the control.

00:59:44.340 --> 00:59:47.820
label UI elements attribute.

00:59:51.680 --> 00:59:57.360
And then for each of those labels,
we need to provide a value.

00:59:57.450 --> 01:00:02.220
And so all we're doing here is
again setting an override value.

01:00:02.970 --> 01:00:05.990
The value itself,
for the difficult label,

01:00:05.990 --> 01:00:07.540
it's the min value.

01:00:07.620 --> 01:00:10.460
For the normal label,
we just take the middle

01:00:10.460 --> 01:00:12.400
value by calculating it.

01:00:12.480 --> 01:00:17.240
And then for the easy label,
we just take the max value of the slider,

01:00:17.240 --> 01:00:20.700
and we set each of these on
the appropriate label for

01:00:20.700 --> 01:00:25.170
NS Accessibility label value attribute.

01:00:25.820 --> 01:00:28.460
And then finally,
let's uncomment and awake

01:00:28.520 --> 01:00:33.840
from Nib calling this method.

01:00:33.840 --> 01:00:36.160
And let's build and run.

01:00:40.170 --> 01:00:47.770
And now if we bring up our Preferences
and Accessibility Inspector,

01:00:48.850 --> 01:00:54.180
If we point to the slider itself,
you'll notice that kind of midway

01:00:54.180 --> 01:00:58.940
down it has AX label UI elements,
an array size of 3.

01:00:59.200 --> 01:01:05.550
And if we point to any of our labels,
it now has an AX label value.

01:01:05.780 --> 01:01:10.650
This one's 5, 3, and 1.

01:01:12.430 --> 01:01:13.860
Is everybody there?

01:01:14.000 --> 01:01:16.120
Show of hands.

01:01:16.250 --> 01:01:17.990
Excellent.

01:01:18.360 --> 01:01:21.200
All right,
and that's it for this particular phase,

01:01:21.250 --> 01:01:24.540
so we can quit out of all that.

01:01:24.540 --> 01:01:26.680
And back to the slides.

01:01:31.820 --> 01:01:34.490
So it's really easy to
customize instances.

01:01:34.580 --> 01:01:38.200
Adding descriptions,
dragging up this thing as the label

01:01:38.300 --> 01:01:42.570
for this other thing in Interface
Builder is extraordinarily easy.

01:01:42.700 --> 01:01:45.700
We had a lot of buttons
that we didn't go through.

01:01:45.700 --> 01:01:50.320
It can be a bit time consuming,
but not very difficult.

01:01:50.750 --> 01:01:55.180
And even if we need to do it in code,
we just need to get access to them

01:01:55.180 --> 01:01:57.590
and set a few values here and there.

01:01:57.700 --> 01:02:05.630
So it should be very simple to improve
the accessibility of your applications.

01:02:05.630 --> 01:02:08.700
So definitely encourage that.

01:02:08.700 --> 01:02:14.700
But we still have one glaring hole
in our accessibility story for Dicey,

01:02:14.700 --> 01:02:19.890
and that's the fact that
I still have no dice.

01:02:20.000 --> 01:02:22.900
Which is kind of tough in a dice game.

01:02:22.900 --> 01:02:27.000
So what's the last bit
that we need to do here?

01:02:27.000 --> 01:02:31.380
So we already saw that the view
is reporting itself as a group,

01:02:31.380 --> 01:02:34.160
but it doesn't think
that it has any children.

01:02:34.160 --> 01:02:36.430
So we're going to have to
implement the children attribute

01:02:36.430 --> 01:02:39.260
to return a bunch of dice.

01:02:39.260 --> 01:02:43.440
We're going to have to hit test them
so that when the mouse is over them,

01:02:43.440 --> 01:02:46.970
we say, "Oh, this is the guy you're
looking for." Focus testing,

01:02:47.050 --> 01:02:49.540
because dicey, in fact,
if I have full keyboard

01:02:49.540 --> 01:02:52.780
navigation turned on,
I can tab through all of the dice.

01:02:52.850 --> 01:02:57.720
I can hit the space bar
to toggle the hold on it.

01:02:57.720 --> 01:02:59.900
So that's all I need
to do on the dice view,

01:03:00.230 --> 01:03:04.670
but the DC die class is
just a subclass of NSObject.

01:03:04.690 --> 01:03:08.350
So it doesn't implement
any accessibility methods.

01:03:08.360 --> 01:03:11.140
So we're going to walk
through the implementation

01:03:11.490 --> 01:03:13.960
of all ten of those methods.

01:03:13.960 --> 01:03:18.140
And then there's one or two places where
we need to let an assistive app know

01:03:18.140 --> 01:03:23.300
that something has changed and ensure
that some proper notifications are sent.

01:03:23.300 --> 01:03:28.290
So let's take a look at those.

01:03:28.420 --> 01:03:30.780
So we're in stage five.

01:03:40.800 --> 01:03:49.500
[Transcript missing]

01:03:50.110 --> 01:03:52.100
Okay.

01:03:52.270 --> 01:03:57.450
First,
let's look at DC Dice View Accessibility.

01:04:00.560 --> 01:04:04.330
And we'll look at
Accessibility Attribute Value.

01:04:04.470 --> 01:04:07.580
So we already dealt
with the role earlier,

01:04:07.580 --> 01:04:12.400
but now we need to do something to
return the fact that we have children.

01:04:13.420 --> 01:04:18.930
So, if the attribute that came
in is the children attribute,

01:04:19.400 --> 01:05:37.300
[Transcript missing]

01:05:37.640 --> 01:05:39.290
So, Accessibility Hit Test.

01:05:39.540 --> 01:05:41.300
We need to do hit testing.

01:05:41.420 --> 01:05:43.400
Now, by default,
we saw it was working fine.

01:05:43.400 --> 01:05:45.300
We mouse in, it shows up.

01:05:45.450 --> 01:05:47.500
Okay, our hit testing works.

01:05:47.650 --> 01:05:50.000
We know that we have the mouse over us.

01:05:50.100 --> 01:05:55.180
But if something below us
needs to report that it is the

01:05:55.180 --> 01:05:59.090
item that is under the mouse,
we need to pass the message along.

01:05:59.460 --> 01:06:05.210
So here, if we're not cleared,
we'll just find the point,

01:06:05.430 --> 01:06:08.670
We'll find the die that goes to
that point and we'll pass the

01:06:08.760 --> 01:06:12.620
message down that it needs to
do an accessibility hit test.

01:06:12.740 --> 01:06:18.260
Now, when a point comes in,
it is always in screen coordinates.

01:06:18.340 --> 01:06:23.560
So, first we need to convert from the
screen to the window that we're in.

01:06:23.840 --> 01:06:27.380
So, convert screen to base in our window.

01:06:27.380 --> 01:06:29.870
And then we need to convert
from the window down to

01:06:29.960 --> 01:06:31.640
our local view coordinates.

01:06:31.730 --> 01:06:33.810
So that's what we're
doing in the second line.

01:06:34.400 --> 01:06:37.200
And again, this is Tiger,
so I'm not using a fancy

01:06:37.200 --> 01:06:38.900
Objective-C enumeration.

01:06:38.900 --> 01:06:43.590
But we can fix that for Leopard.

01:06:44.720 --> 01:06:47.700
Alright, now for focused UI element.

01:06:47.700 --> 01:06:52.740
In this case,
the DC Dice View is keeping track

01:06:52.740 --> 01:06:55.380
of which die is the first responder.

01:06:55.380 --> 01:06:58.870
It holds the focus,
but then its sub-elements kind of move

01:06:59.290 --> 01:07:02.090
along and have the keyboard focus.

01:07:03.220 --> 01:07:04.620
If--

01:07:06.410 --> 01:07:08.530
We are the first responder.

01:07:08.600 --> 01:07:12.490
Then we know which of our
sub-dice is the first responder,

01:07:12.490 --> 01:07:17.870
and so we can pass along the message
to it to return the focused UI element.

01:07:18.330 --> 01:07:22.550
Now, if you get the message "focused
UI element," that means the

01:07:22.550 --> 01:07:26.060
application knows that the
focus is at least within you.

01:07:26.200 --> 01:07:29.980
It might be something beneath you,
but it's at least in your

01:07:30.180 --> 01:07:32.430
purview or one of your children.

01:07:32.680 --> 01:07:35.700
Similarly, with the hit testing,
if you get that message,

01:07:35.880 --> 01:07:41.300
you know the mouse is within you or
one of your children or their children.

01:07:41.910 --> 01:07:46.290
Okay, let's move over to DC Die.

01:07:50.100 --> 01:07:57.420
And here we need to implement all 10
methods of the Accessibility Protocol.

01:07:57.800 --> 01:08:00.940
But most of them are relatively short.

01:08:00.960 --> 01:08:04.220
So one of them you knock out
is accessibility is ignored.

01:08:04.220 --> 01:08:07.290
You say, no, I'm not ignored.

01:08:07.750 --> 01:08:10.360
Accessibility Attribute Names.

01:08:10.450 --> 01:08:13.780
This is simply an array
of strings that we return.

01:08:13.780 --> 01:08:16.680
We make it static so we don't have to
keep making it and getting rid of it.

01:08:17.040 --> 01:08:21.130
Now, we had decided that
the best role for this,

01:08:21.330 --> 01:08:26.700
of the existing roles,
was to accessorize this as a checkbox.

01:08:26.870 --> 01:08:30.660
Now, sometimes it's not so much
the code that's the challenge

01:08:30.840 --> 01:08:33.710
when you're accessorizing,
it's figuring out how

01:08:34.340 --> 01:08:36.700
should I expose this object.

01:08:36.770 --> 01:08:39.790
And in this case,
because it works like a button in that

01:08:39.790 --> 01:08:43.700
I can press it and have it change,
but it also has this state

01:08:43.700 --> 01:08:46.820
of being held and unheld,
we decided to accessorize

01:08:46.820 --> 01:08:47.700
it as a checkbox.

01:08:47.700 --> 01:08:50.660
So where did I get this
list of attributes?

01:08:50.710 --> 01:08:53.700
I just went to, I think,
TextEdit Preferences,

01:08:53.700 --> 01:08:58.860
turned on Accessibility Inspector,
moused over an existing checkbox,

01:08:59.050 --> 01:09:04.500
and just jotted down what list of things
a checkbox returns so that I could

01:09:04.500 --> 01:09:05.700
accessorize myself like a checkbox.

01:09:05.790 --> 01:09:12.650
This is simply a bunch of names
of what we're going to return.

01:09:13.530 --> 01:09:15.400
So that's method two.

01:09:15.400 --> 01:09:20.400
We'll skip this one,
it's a utility method.

01:09:20.650 --> 01:09:25.440
For the biggie in our whole thing
here is Accessibility Attribute Value.

01:09:25.450 --> 01:09:29.590
This tends to be the biggest
method when you're accessorizing.

01:09:29.620 --> 01:09:32.530
It's where you give back
all the information.

01:09:34.520 --> 01:09:38.800
So, let's take these one by one.

01:09:38.860 --> 01:09:41.290
First of all,
we're saying we're a checkbox,

01:09:41.510 --> 01:09:44.390
so if they ask us our role,
we'll say we're a checkbox.

01:09:44.390 --> 01:09:46.380
Not so bad.

01:09:46.620 --> 01:09:49.410
Otherwise,
if they ask for the role description,

01:09:49.410 --> 01:09:52.840
there's another one of those
handy convenience functions

01:09:52.840 --> 01:09:56.510
in NSAccessibility.h that
we can hand in a role,

01:09:56.510 --> 01:10:02.400
and we can get back the system's
role description localized correctly.

01:10:02.400 --> 01:10:05.680
so again,
not so hard for us to do that either.

01:10:07.220 --> 01:10:13.950
If they ask for our parent,
we are keeping track of our

01:10:13.950 --> 01:10:17.210
parent so we can return it.

01:10:19.830 --> 01:10:24.940
Screen geometry - so our
position and our size.

01:10:25.990 --> 01:10:30.760
So, again, we know our bounds.

01:10:31.030 --> 01:10:32.400
It's a property of the die.

01:10:32.400 --> 01:10:34.140
It knows its bounds.

01:10:34.270 --> 01:10:36.800
So for the position we
get our local point,

01:10:36.970 --> 01:10:40.320
there's a bug in the is flipped code,
which I discovered after

01:10:40.320 --> 01:10:45.530
I posted it to the WWC site,
but we can correct that as a little

01:10:45.530 --> 01:10:47.520
exercise on all of our parts.

01:10:47.810 --> 01:10:51.050
The local point we convert
to the window point,

01:10:51.050 --> 01:10:55.720
and then from there to the screen,
and we return our position.

01:11:00.020 --> 01:11:04.680
And then for the size,
we know our bounds, we can grab our size,

01:11:04.790 --> 01:11:07.240
we convert it up to the window.

01:11:07.360 --> 01:11:11.400
And since really the window
and the screen have the same

01:11:11.450 --> 01:11:15.820
transform with regards to scale,
we don't need to transform to the size

01:11:15.820 --> 01:11:17.840
because it's going to remain the same.

01:11:17.980 --> 01:11:19.440
We can return the size.

01:11:19.560 --> 01:11:23.860
It's important to note that we're
dealing with an NSValue object that's

01:11:23.870 --> 01:11:27.510
wrapping the point and wrapping the size.

01:11:29.830 --> 01:11:31.200
All right, let's jump up.

01:11:31.200 --> 01:11:34.260
We need to know our window,
but we know our parent already

01:11:34.260 --> 01:11:37.740
knows what window we're in,
so we'll just return whatever

01:11:37.900 --> 01:11:39.700
our parent says is correct.

01:11:39.980 --> 01:11:44.930
And the same is true of
our top-level UI element.

01:11:47.470 --> 01:11:50.780
Now for our value,
"has hold" is representing

01:11:50.800 --> 01:11:53.000
whether we're held or not.

01:11:53.110 --> 01:11:55.360
That's our - we're saying
that's our checked state,

01:11:55.460 --> 01:11:56.300
that's our value.

01:11:56.400 --> 01:12:02.950
So if we have a hold, we'll return a 1,
an NSNumber, otherwise it'll be a 0.

01:12:04.320 --> 01:12:07.410
We can't be disabled,
so if they ask if we're enabled,

01:12:07.420 --> 01:12:10.050
the answer is yes.

01:12:13.650 --> 01:12:17.840
We are maintaining our own Boolean
as to whether we are focused so

01:12:17.850 --> 01:12:22.500
we know whether to display our own
focus ring when we draw ourselves.

01:12:22.530 --> 01:12:28.600
So if we're asked if we have the focus,
we can respond correctly.

01:12:30.570 --> 01:12:35.260
We have no help,
but we do have a description.

01:12:35.260 --> 01:12:38.690
And there's a little bit of logic here,
because we wanted to tell how

01:12:38.930 --> 01:12:40.440
many spots we were showing.

01:12:40.570 --> 01:12:48.760
So I factored that out
into another method.

01:12:52.620 --> 01:12:57.740
And the key thing here is we're
figuring out how many spots we have.

01:12:57.740 --> 01:13:02.440
We mentioned that word "die." But also
that these are localized strings,

01:13:02.850 --> 01:13:08.370
because you want your
description to be localized.

01:13:11.820 --> 01:13:13.850
Okay, that's three down.

01:13:14.030 --> 01:13:16.700
Seven to go.

01:13:16.820 --> 01:13:18.340
So, are we settable?

01:13:18.410 --> 01:13:22.700
The only thing that can happen is
we'll allow somebody to set our focus.

01:13:22.700 --> 01:13:24.410
So, if they say, "Are you focused?

01:13:24.630 --> 01:13:29.680
Is that settable?" We'll return,
"Yes." Otherwise, "No."

01:13:30.620 --> 01:13:33.860
Since there is one attribute
where we can be set,

01:13:33.920 --> 01:13:38.320
if that's what they're trying to set,
and they're trying to set focus to true,

01:13:38.850 --> 01:13:43.500
there's a method in our parent where
we can set ourselves as the focus die.

01:13:43.500 --> 01:13:47.170
It's important to note
that it's impossible to set

01:13:47.170 --> 01:13:49.500
something to be unfocused.

01:13:49.610 --> 01:13:51.930
It's yes or nothing.

01:13:54.110 --> 01:13:55.370
Actions.

01:13:55.370 --> 01:13:59.680
Since we are a checkbox,
a checkbox has a press action.

01:13:59.840 --> 01:14:03.490
So we'll return an array
with one object when somebody

01:14:03.490 --> 01:14:05.770
asks us for our action names.

01:14:06.170 --> 01:14:10.630
Again, we have an action description
and a convenience function so

01:14:10.650 --> 01:14:15.080
that we can get the appropriate
description for a given action.

01:14:15.960 --> 01:14:18.700
And then if we're asked
to perform an action,

01:14:18.830 --> 01:14:22.640
we do the appropriate
action in the application.

01:14:24.900 --> 01:14:30.400
[Transcript missing]

01:14:30.560 --> 01:14:33.930
If we get the hit test method,
we know we are the thing

01:14:34.040 --> 01:14:35.500
that the mouse hits.

01:14:35.610 --> 01:14:38.740
It's within us or one of our children.

01:14:38.900 --> 01:14:43.600
Well, we don't have any children,
so we would just return self.

01:14:44.040 --> 01:14:48.410
However, what if somebody subclassed our
die and decided that the die each

01:14:48.490 --> 01:14:50.500
spot was going to be accessible?

01:14:50.500 --> 01:14:52.680
For whatever reason.

01:14:52.900 --> 01:14:57.000
Well, and maybe some of them had
children and they were ignored.

01:14:57.100 --> 01:15:01.620
We would want to make sure that
when this was called by a subclass,

01:15:01.780 --> 01:15:05.500
that we actually returned
an unignored ancestor.

01:15:05.730 --> 01:15:08.430
And so in that case,
we would wrap it in this to make

01:15:08.780 --> 01:15:11.390
ourselves a little safer and return self.

01:15:11.700 --> 01:15:16.500
The same is true, there's nothing,
there's no more granular focus than us.

01:15:16.640 --> 01:15:22.100
So therefore, we return self,
or kind of that wrapped self,

01:15:22.300 --> 01:15:24.500
as the focused UI element.

01:15:25.870 --> 01:15:26.500
Okay.

01:15:26.500 --> 01:15:27.340
Bye.

01:15:29.300 --> 01:15:41.600
[Transcript missing]

01:15:56.300 --> 01:15:58.780
Roll the die.

01:15:58.780 --> 01:16:02.950
And voila, we now have dice.

01:16:09.900 --> 01:16:13.900
And now your homework is to
go play that in VoiceOver.

01:16:13.900 --> 01:16:14.900
Because it should work.

01:16:15.200 --> 01:16:20.310
Alright, if we're done,
if we could get back to slides, if not,

01:16:20.400 --> 01:16:21.990
that's fine too.

01:16:22.800 --> 01:16:25.580
So let's go quickly through.

01:16:25.720 --> 01:16:31.020
So the Accessibility
Developer List is accessibility-dev.

01:16:31.020 --> 01:16:32.460
We'll have all this information.

01:16:32.460 --> 01:16:36.010
We'll have a lab tomorrow at 8 o'clock.

01:16:36.310 --> 01:16:37.800
Excuse me, 9 o'clock.

01:16:37.870 --> 01:16:39.810
I won't be here at 8 o'clock.

01:16:39.960 --> 01:16:42.900
And immediately following
this is the Accessibility and

01:16:42.900 --> 01:16:46.250
VoiceOver Feedback session,
which is in Knob Hill.

01:16:46.600 --> 01:16:48.890
So please come to the lab
with your applications.

01:16:48.890 --> 01:16:51.200
We can talk about accessorizing them.

01:16:51.270 --> 01:16:54.100
And please come to the feedback forum.

01:16:54.160 --> 01:16:57.360
Just in summary,
more Mac OS X features than

01:16:57.360 --> 01:17:01.640
ever in Leopard are relying
on application accessibility.

01:17:01.790 --> 01:17:05.000
Now, we could have built Dicey
with standard controls.

01:17:05.000 --> 01:17:08.500
I could have just made a group
view that drew a background and put

01:17:08.500 --> 01:17:10.800
some buttons in there for the dice.

01:17:11.170 --> 01:17:13.360
That would have made my
life a little bit easier.

01:17:13.530 --> 01:17:17.500
But it would have made a bad example
of how to accessorize from scratch.

01:17:17.620 --> 01:17:22.460
So if you are ever on the fence of, well,
maybe I should just do my

01:17:22.460 --> 01:17:26.430
own or use the standard one,
have accessibility stick in

01:17:26.430 --> 01:17:29.500
your mind as a reason to veer
towards the standard one,

01:17:29.630 --> 01:17:31.600
because you get a lot more functionality.

01:17:31.600 --> 01:17:34.710
Or you could have, say,
for zero work or maybe just a

01:17:34.820 --> 01:17:36.670
little bit of tweaking work.

01:17:37.080 --> 01:17:43.440
Keep away from mouse-only operations
when you're designing your apps.

01:17:43.440 --> 01:17:47.940
Adding those attributes like
descriptions and title UI elements

01:17:47.940 --> 01:17:50.720
- you think it's very small
because it's not a lot of work,

01:17:50.720 --> 01:17:53.460
but it's a tremendous
help in accessorizing.

01:17:53.460 --> 01:17:56.120
And if you're doing
custom views and controls,

01:17:56.120 --> 01:17:57.600
make them accessible.

01:17:57.600 --> 01:18:00.850
If you're subclass or
tremendous viewer control,

01:18:00.930 --> 01:18:04.300
use the superclass,
don't reinvent everything.

01:18:04.300 --> 01:18:08.060
But then in sub-elements,
the 10 methods are terribly bad at all.