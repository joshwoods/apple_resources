WEBVTT

00:00:10.450 --> 00:00:13.640
Okay,
so welcome to today's session on Xray.

00:00:13.640 --> 00:00:14.870
My name is Steve Lewallen.

00:00:14.930 --> 00:00:17.320
I'm the lead engineer on the Xray app.

00:00:17.350 --> 00:00:21.320
And it's my pleasure to tell you
today where we currently are with

00:00:21.320 --> 00:00:24.090
Xray and the Leopard Preview.

00:00:24.630 --> 00:00:29.740
So X-Ray is a new developer
tool aimed at allowing you,

00:00:29.740 --> 00:00:33.620
the developer, you, the QA engineer, you,
the IT support person,

00:00:33.620 --> 00:00:38.420
to peek beneath the covers of one or
more running apps on the system and to

00:00:38.420 --> 00:00:41.520
gain an understanding of their behavior.

00:00:41.520 --> 00:00:44.610
It's also aimed at allowing
you to communicate that new

00:00:44.610 --> 00:00:48.270
understanding to others on your
team and your extended team.

00:00:48.280 --> 00:00:51.900
So today we're going to cover
the problem that X-Ray is aimed

00:00:51.920 --> 00:00:55.930
at solving or helping you solve,
we're going to cover why X-Ray is

00:00:56.000 --> 00:00:58.870
the solution to that problem,
a little bit about the

00:00:58.870 --> 00:01:01.410
X-Ray architecture,
we think it would be a little bit

00:01:01.600 --> 00:01:04.850
helpful for you to understand that,
and we're also going to cover how you

00:01:04.850 --> 00:01:06.940
would create your own instruments.

00:01:06.940 --> 00:01:09.900
Instruments in X-Ray are
the central theme,

00:01:09.900 --> 00:01:13.930
they're the technology that you use to
gather data on any particular subject

00:01:13.930 --> 00:01:15.380
matter you want in your program.

00:01:15.380 --> 00:01:19.710
We also will discuss how
you create X-Ray templates,

00:01:19.840 --> 00:01:24.180
and finally we'll discuss how
you use X-Ray with an Xcode.

00:01:24.180 --> 00:01:26.180
So what's the problem?

00:01:26.180 --> 00:01:29.780
Well, systems today are growing
increasingly complex.

00:01:29.780 --> 00:01:34.310
We live in a world where it's great
that we can get a system with multiple

00:01:34.310 --> 00:01:36.400
cores on even the simplest box.

00:01:36.420 --> 00:01:41.490
We live in a world where even the
simplest client application actually

00:01:41.490 --> 00:01:43.050
is in a client server environment.

00:01:43.160 --> 00:01:44.740
The Windows server is
doing your graphics,

00:01:44.740 --> 00:01:45.240
for example.

00:01:45.380 --> 00:01:49.610
And the methods we use to
test these applications,

00:01:49.930 --> 00:01:56.000
black box, white box testing,
they're great, but they actually cause us

00:01:56.000 --> 00:01:58.180
to miss certain problems.

00:01:58.180 --> 00:02:01.340
Let's say that you add some
new feature to your app,

00:02:01.340 --> 00:02:05.140
and you and your QA engineers,
you test that feature, and yes,

00:02:05.140 --> 00:02:08.880
it does steps A, B, and C, looks great,
doesn't crash, ship it.

00:02:08.990 --> 00:02:12.820
Well, it may be showing other signs
of trouble that you haven't

00:02:12.820 --> 00:02:15.220
noticed with your normal testing.

00:02:15.260 --> 00:02:18.010
Maybe it's using more
memory than is desirable,

00:02:18.020 --> 00:02:21.990
not leaking, but just it's now gone above
a certain threshold that you

00:02:21.990 --> 00:02:23.860
really intended to not go.

00:02:23.890 --> 00:02:26.270
We as developers,
we try to check these things,

00:02:26.380 --> 00:02:29.940
but we do so many -- write so many
lines of code and add so many features,

00:02:29.940 --> 00:02:33.840
sometimes we can miss these things
and only catch them a lot of times

00:02:33.870 --> 00:02:36.030
just before we're going to ship,
for example.

00:02:36.170 --> 00:02:40.420
Another problem is that you can
focus on too small of an area.

00:02:40.420 --> 00:02:43.020
You can be looking at a particular API.

00:02:43.070 --> 00:02:44.020
That API is beautiful.

00:02:44.020 --> 00:02:47.120
It does everything you wanted it to do,
but when you deploy it in a

00:02:47.120 --> 00:02:50.320
framework that others use,
it then has other side

00:02:50.440 --> 00:02:52.720
effects you didn't anticipate.

00:02:52.910 --> 00:02:55.830
And the tools we have,
we have great tools on

00:02:55.830 --> 00:02:59.820
Mac OS X that are very powerful
to help you analyze your system,

00:02:59.820 --> 00:03:03.140
your processes, the performance,
memory usage, etc.

00:03:03.640 --> 00:03:06.920
But they are each different
and we're forced to,

00:03:07.110 --> 00:03:09.960
as developers and QA engineers,
IT support people,

00:03:09.960 --> 00:03:11.910
learn each of these tools individually.

00:03:13.000 --> 00:03:16.800
And then we're also forced to
correlate the data they generate.

00:03:17.440 --> 00:03:20.820
They may generate very powerful
data about one specific

00:03:20.820 --> 00:03:24.500
kind of performance data,
for example, but not another.

00:03:24.500 --> 00:03:27.090
And you, the developer,
you're forced to correlate

00:03:27.090 --> 00:03:28.870
that data in your head,
if at all,

00:03:28.930 --> 00:03:30.910
and that proves to be very difficult.

00:03:32.020 --> 00:03:36.720
And finally, as we all know,
and we as Apple engineers

00:03:36.720 --> 00:03:39.420
know every year at WWDC,
you can have an application

00:03:39.800 --> 00:03:40.990
performance based on the
performance of your application.

00:03:42.000 --> 00:03:42.000
And then we're also forced to
correlate the data they generate.

00:03:42.000 --> 00:03:42.000
They may generate very powerful
data about one specific

00:03:42.000 --> 00:03:42.000
kind of performance data,
for example, but not another.

00:03:42.000 --> 00:03:42.000
And you, the developer,
you're forced to correlate

00:03:42.000 --> 00:03:42.000
that data in your head,
if at all,

00:03:42.000 --> 00:03:42.000
and that proves to be very difficult.

00:03:42.000 --> 00:03:45.040
beautifully in the lab and
you bring it out into the real

00:03:45.040 --> 00:03:47.120
world and it has a problem.

00:03:47.120 --> 00:03:50.310
So it's hard to A,
forecast that problem and B,

00:03:50.310 --> 00:03:53.920
somebody remotely will try to
describe what happened and it's

00:03:53.940 --> 00:03:56.010
hard to understand and reproduce.

00:03:56.170 --> 00:03:59.850
And this is just all part of this
growing complexity of systems.

00:03:59.850 --> 00:04:04.110
So we think that X-Ray is the
solution to this complexity.

00:04:04.110 --> 00:04:10.040
For the developer, first of all,
X-Ray provides you the ability to, well,

00:04:10.040 --> 00:04:15.250
it makes it easier or not as difficult
to test not only your features,

00:04:15.250 --> 00:04:18.080
but test the features
of other developers.

00:04:18.080 --> 00:04:20.820
You may have inadvertently
affected their code.

00:04:20.820 --> 00:04:21.720
I know I've done that.

00:04:21.720 --> 00:04:23.640
I know other people have
done that to my code.

00:04:23.640 --> 00:04:27.290
So it's great that X-Ray can
help you avoid those things.

00:04:27.290 --> 00:04:31.930
It can also help you to
discover other semi-related but

00:04:31.930 --> 00:04:36.220
not directly related issues,
things that just go out of bounds again.

00:04:36.240 --> 00:04:39.170
And so you don't have to
always be focusing on that,

00:04:39.260 --> 00:04:41.360
but X-Ray can sit there as
a partner with you and say,

00:04:41.360 --> 00:04:43.580
you know, something else is going wrong.

00:04:43.580 --> 00:04:46.180
You said this was critical
and you better look at it now.

00:04:46.180 --> 00:04:52.120
It also allows you, X-Ray does,
to communicate to your QA engineers.

00:04:52.120 --> 00:04:54.590
Whenever you add a new feature,
what do you have to do?

00:04:54.590 --> 00:04:57.200
You have to go and explain how
you use that new feature to the

00:04:57.320 --> 00:04:59.620
QA engineer so they can test it.

00:04:59.690 --> 00:05:04.600
Well, X-Ray allows you to automate
that process and it also allows

00:05:04.600 --> 00:05:05.350
you to automate the process when
you're discussing the process.

00:05:05.350 --> 00:05:05.720
So it's a great way to
automate that process.

00:05:05.720 --> 00:05:05.790
And it also allows you to
automate the process when

00:05:05.790 --> 00:05:06.220
you're discussing the process.

00:05:06.220 --> 00:05:06.500
And it also allows you to automate the
process when you're discussing it with

00:05:06.500 --> 00:05:09.820
the people who do your publications,
the docs for your app.

00:05:10.130 --> 00:05:12.900
You also, when you add a new feature,
need to describe how to use it to

00:05:12.900 --> 00:05:14.460
them as well so they can document it.

00:05:14.660 --> 00:05:18.530
Now you can use X-Ray to
actually show them by proxy how

00:05:18.530 --> 00:05:21.140
to manipulate your new feature.

00:05:21.400 --> 00:05:27.600
And it also allows you to, well,
it's like a medical analogy.

00:05:27.600 --> 00:05:30.110
You know, you go into the emergency room,
hopefully you haven't,

00:05:30.150 --> 00:05:32.220
but someone goes in the emergency
room and what do they do?

00:05:32.220 --> 00:05:34.230
They hook up a heart monitor,
they look at your blood pressure,

00:05:34.230 --> 00:05:35.090
they do all these things.

00:05:35.470 --> 00:05:37.200
Those are the vital of a human being.

00:05:37.270 --> 00:05:39.990
We each know that they're
vitals of our own apps.

00:05:40.100 --> 00:05:44.010
I know that I had, before X-Ray,
built into my different apps custom

00:05:44.010 --> 00:05:48.130
instrumentation to make sure,
oh, the major objects are going away.

00:05:48.130 --> 00:05:51.020
Oh, we're closing down this
system when we quit.

00:05:51.020 --> 00:05:52.980
Those sorts of things.

00:05:52.980 --> 00:05:57.020
So you can build in some watch
points with X-Ray to help you

00:05:57.020 --> 00:05:59.120
keep track of those vitals.

00:05:59.120 --> 00:06:02.730
You can even pass them off
to other people so they can

00:06:02.830 --> 00:06:04.750
track those vitals as well.

00:06:04.910 --> 00:06:06.180
So the solution, I think,
is to use X-Ray to help you

00:06:06.180 --> 00:06:06.180
keep track of those vitals.

00:06:06.180 --> 00:06:06.180
You can even pass them off
to other people so they can

00:06:06.180 --> 00:06:06.180
track those vitals as well.

00:06:06.180 --> 00:06:09.570
The other thing that I think is
really important to this complexity

00:06:09.650 --> 00:06:11.680
is X-Ray for QA engineers also.

00:06:11.720 --> 00:06:15.010
They can, as you did,
use X-Ray to automate the testing.

00:06:15.010 --> 00:06:19.240
So let's say that a QA engineer is doing
the testing on a network application,

00:06:19.310 --> 00:06:22.990
a browser, for example,
or something else, maybe something in a

00:06:23.000 --> 00:06:25.900
handheld device or something,
and they want to keep

00:06:25.900 --> 00:06:27.440
the network traffic down.

00:06:27.520 --> 00:06:31.050
They've been told that this app
should have such and such network

00:06:31.050 --> 00:06:32.700
traffic load and that's it.

00:06:32.700 --> 00:06:36.160
But they've also been given the task of,
you know,

00:06:36.160 --> 00:06:40.290
a developer added some features and
I need to go through and press all

00:06:40.290 --> 00:06:41.820
these buttons and make sure it works.

00:06:41.820 --> 00:06:45.130
Well,
X-Ray will free them up so that they

00:06:45.200 --> 00:06:49.640
can use their engineering skills to
think more about the other potential

00:06:49.640 --> 00:06:54.040
problems that could arise in the app
due to the changes the developer has

00:06:54.040 --> 00:06:58.810
made and let X-Ray press all the buttons
and do that type of manual labor.

00:06:58.810 --> 00:07:06.140
And finally, if they do discover a bug,
they can actually say, you know what,

00:07:06.140 --> 00:07:07.140
instead of writing this bug report,
step one, I press X-Ray, step two,

00:07:07.140 --> 00:07:10.400
something weird happened over here,
step three, I press this other button

00:07:10.400 --> 00:07:11.420
and sometimes it crashes.

00:07:11.420 --> 00:07:18.120
They can actually record via X-Ray how
they manipulated the app and just send

00:07:18.120 --> 00:07:20.990
that recording back to the developer and
let the developer just hit one button

00:07:20.990 --> 00:07:23.890
and see it happen right in front of
them rather than trying to interpret.

00:07:23.980 --> 00:07:28.170
I know that I've gotten bug
reports before where I say,

00:07:28.170 --> 00:07:32.410
that's not even actually possible to do.

00:07:32.490 --> 00:07:36.120
So I have to send it back and say,
you know, can you clarify this?

00:07:36.120 --> 00:07:36.120
A lot of times we all get in a rush,
right, and we say, well,

00:07:36.120 --> 00:07:39.110
I can't reproduce that, so, you know,
enough of that bug.

00:07:39.380 --> 00:07:42.100
And then it comes up later on
and you wish you would have

00:07:42.100 --> 00:07:43.720
spent more time looking at it.

00:07:43.840 --> 00:07:49.260
So in addition, the debugger,
the QA engineer can use those vital

00:07:49.260 --> 00:07:54.750
signs I spoke of earlier that the
developer created for himself or

00:07:54.970 --> 00:08:00.360
herself and use those on the side
while they're doing these other

00:08:00.360 --> 00:08:04.940
tests and then go back and say,
you know, Engineer A,

00:08:05.080 --> 00:08:06.100
when I was testing your features,
the vital signs monitors that

00:08:06.100 --> 00:08:07.090
Engineer B gave me to make sure
we're always working on them.

00:08:07.100 --> 00:08:07.260
So if you're testing your features,
the vital signs are not working right,

00:08:07.260 --> 00:08:13.630
they're not working so great anymore,
and maybe you want to look at your

00:08:13.630 --> 00:08:13.630
change in light of that new information.

00:08:14.870 --> 00:08:18.470
And finally,
for the IT support guy or girl,

00:08:18.630 --> 00:08:22.960
you're out there maintaining a
network of machines and you want to

00:08:22.960 --> 00:08:27.980
monitor the load on the machines,
CPU load, the network traffic,

00:08:28.100 --> 00:08:29.240
disk usage, etc.

00:08:29.240 --> 00:08:32.300
You can use Xray to do that as well.

00:08:32.550 --> 00:08:34.860
You can also leverage
again those vital signs,

00:08:34.860 --> 00:08:38.420
maybe they've been passed on to
you or maybe you're having problems

00:08:38.420 --> 00:08:42.060
in the field and so the developer
provides these to you and says,

00:08:42.060 --> 00:08:44.120
well, run this and tell me what it says.

00:08:44.880 --> 00:08:49.160
And then you can also,
as the QA engineer did and the developer,

00:08:49.240 --> 00:08:54.090
make a recording of something that
shows these things going awry and send

00:08:54.100 --> 00:08:58.030
it back to the developer and he or she
can reproduce the problem right there.

00:08:58.140 --> 00:09:02.370
So now I want to talk about
the Xray architecture a bit.

00:09:02.600 --> 00:09:07.300
I want to do this because I want
you to understand that Xray is

00:09:07.300 --> 00:09:14.360
technology agnostic as far as
what it uses to gather data.

00:09:14.440 --> 00:09:17.880
So Xray is built out of a series
of plug-ins and a major set of

00:09:17.890 --> 00:09:20.350
plug-ins are instrument plug-ins.

00:09:20.550 --> 00:09:23.920
Instrument plug-ins can actually
supply more than one type of

00:09:23.920 --> 00:09:27.440
instrument and a plug-in is usually
organized around a particular

00:09:27.850 --> 00:09:30.600
technology that is used to gather data.

00:09:30.690 --> 00:09:34.990
So one of the technologies I'm sure
you've all heard about is D-Trace.

00:09:35.080 --> 00:09:39.730
So Xray uses D-Trace to provide all
sorts of instrumentation focused

00:09:39.740 --> 00:09:43.910
right now on the file system,
for example, and memory.

00:09:43.920 --> 00:09:47.070
If you were at the keynote
and attended other talks,

00:09:47.070 --> 00:09:49.760
you've heard about garbage collection.

00:09:49.760 --> 00:09:54.630
So Xray includes a D-Trace based
instrument to allow you to look at

00:09:54.710 --> 00:09:59.980
how garbage collection is working
in your new garbage collected app.

00:10:00.040 --> 00:10:03.240
And we also build all sorts of
other instruments with D-Trace and

00:10:03.290 --> 00:10:05.040
in fact you can build your own.

00:10:05.040 --> 00:10:06.640
We'll talk about that in a little bit.

00:10:06.720 --> 00:10:09.980
We also have things that
are more familiar to you.

00:10:09.980 --> 00:10:13.480
I'm sure you've used
our Object Alloc tool.

00:10:13.500 --> 00:10:17.600
Now we have an instrument
based on that same technology.

00:10:17.640 --> 00:10:21.360
We also have a great technology
from our Automator group.

00:10:21.390 --> 00:10:26.120
This is the technology that allows us
to record things happening in an app

00:10:26.270 --> 00:10:29.870
and replay them later and we've built
that in as an instrument in Xray.

00:10:30.080 --> 00:10:34.330
And finally we have instruments
that allow you to look at

00:10:34.560 --> 00:10:39.790
general resource usage,
CPU usage, disk usage, network traffic,

00:10:39.790 --> 00:10:40.460
etc.

00:10:41.170 --> 00:10:45.900
So I've talked a little bit and now I'd
just like to give you sort of a grand

00:10:45.900 --> 00:10:50.600
tour of how we use Xray and so that you
can understand some of the concepts.

00:10:50.710 --> 00:10:53.380
So over to the demo machine please.

00:10:58.220 --> 00:11:02.900
So I've talked a little bit and now I'd
just like to give you sort of a grand

00:11:02.900 --> 00:11:07.700
tour of how we use Xray and so that you
can understand some of the concepts.

00:11:07.700 --> 00:11:10.380
So over to the demo machine please.

00:11:28.180 --> 00:11:30.540
filter the data given to you by X-Ray.

00:11:30.540 --> 00:11:35.080
So in the bottom of the screen,
in this area here in the lower half,

00:11:35.220 --> 00:11:38.000
this is your instrument toolbox.

00:11:38.020 --> 00:11:43.690
Now, X-Ray comes pre-bundled
with a host of instruments,

00:11:43.820 --> 00:11:47.380
and by the time Leopard ships,
these will be richer instruments,

00:11:47.760 --> 00:11:50.700
probably have some different
instruments as well.

00:11:51.550 --> 00:11:55.840
In the upper left section of the
screen in the trace document,

00:11:55.900 --> 00:11:57.860
this is your instrument's list.

00:11:57.990 --> 00:12:01.110
So we have instruments in
the toolbox on the bottom,

00:12:01.350 --> 00:12:05.200
but we have not yet applied
them to the trace document.

00:12:05.290 --> 00:12:07.510
So we can't perform a trace yet.

00:12:07.670 --> 00:12:12.450
So in order to go further
with this tour of X-Ray,

00:12:12.530 --> 00:12:17.060
I'm going to look at the
resource usage of Safari,

00:12:17.060 --> 00:12:19.400
something we saw some of in the keynote.

00:12:19.690 --> 00:12:23.570
And then I'm going to go further and show
you more about each of those instruments.

00:12:23.790 --> 00:12:26.280
So I want to look at memory usage.

00:12:26.310 --> 00:12:29.600
And therefore, I'm going to select my
object alloc instrument.

00:12:29.620 --> 00:12:34.600
And I'm going to drag that up to my
instruments list and deposit it as so.

00:12:34.610 --> 00:12:39.080
I also am not interested in
the UI recorder at the moment,

00:12:39.100 --> 00:12:40.830
that technology from the Automator Group.

00:12:40.960 --> 00:12:45.420
So I'm going to collapse that,
make some more room for me.

00:12:45.440 --> 00:12:47.440
Also, I want to look at file activity.

00:12:47.440 --> 00:12:51.520
Let's say I want to see what
files Safari opens and closes.

00:12:51.690 --> 00:12:53.880
So I'll take the file
activity instrument,

00:12:53.900 --> 00:12:55.610
and I'll drop in an SO.

00:12:55.940 --> 00:12:57.940
And finally, Safari is a network app,
right?

00:12:57.940 --> 00:13:01.000
So let's look at network
activity of Safari.

00:13:02.690 --> 00:13:05.910
And I'll drop that in as so.

00:13:05.910 --> 00:13:08.760
Now I can actually run a trace.

00:13:08.760 --> 00:13:13.590
To do that, I press the run button that's
square in the middle of the window.

00:13:13.970 --> 00:13:15.270
Here.

00:13:15.330 --> 00:13:16.730
I'll press that now.

00:13:16.850 --> 00:13:19.380
Now I'm presented with this dialog.

00:13:19.380 --> 00:13:22.600
Xray is asking me, well,
what do you want to trace?

00:13:22.670 --> 00:13:25.410
Now it so happens that for
many of these instruments,

00:13:25.480 --> 00:13:30.420
you can trace all the processes that
exist and will exist on your system or

00:13:30.420 --> 00:13:32.360
a particular running process already.

00:13:32.820 --> 00:13:36.570
But in this case, I have it set up,
which is the default setup,

00:13:36.570 --> 00:13:38.640
to ask me to trace one process.

00:13:39.070 --> 00:13:40.800
So I'm going to select Safari.

00:13:40.800 --> 00:13:41.980
It's not running yet.

00:13:41.980 --> 00:13:44.600
It's going to launch after
I hit the open button.

00:13:44.600 --> 00:13:49.600
And I also want to point your attention
to a few other things in this dialog.

00:13:49.790 --> 00:13:54.730
So we're all developers,
so oftentimes we have special environment

00:13:54.730 --> 00:13:58.590
variables that we can set to change
the behavior of our application.

00:13:58.600 --> 00:14:02.600
So you can do that here in
the environment variable box.

00:14:02.680 --> 00:14:04.910
You also may have command line
arguments you want to pass.

00:14:05.000 --> 00:14:07.550
You can do that in the Arguments section.

00:14:07.760 --> 00:14:11.600
You can also decide, well,
when I end this trace,

00:14:11.650 --> 00:14:14.620
I want to also stop the application.

00:14:14.620 --> 00:14:18.340
That's the common case, so by default,
this checkbox here is selected,

00:14:18.340 --> 00:14:21.510
"End After Tracing." So when
I press the run button again,

00:14:21.510 --> 00:14:24.540
which will mean stop the trace,
it will actually stop

00:14:24.640 --> 00:14:26.860
Safari in this case as well.

00:14:26.860 --> 00:14:31.040
And finally,
Xray can actually allow you in one trace

00:14:31.100 --> 00:14:33.610
document to trace multiple processes.

00:14:33.640 --> 00:14:37.670
Let's say I had a new client server
solution that I was working on,

00:14:37.670 --> 00:14:41.700
and I wanted to trace memory
usage in both of these processes.

00:14:41.730 --> 00:14:45.140
I could use ObjectAlloc, for example,
on the client and the server,

00:14:45.190 --> 00:14:48.930
and I could use the checkbox here,
apply to all instruments.

00:14:48.930 --> 00:14:53.430
I could actually deselect that,
apply to ObjectAlloc instruments,

00:14:53.430 --> 00:14:57.220
and when I hit run,
it would have asked me, "Okay,

00:14:57.340 --> 00:15:00.650
what application do you want to
launch for the first instrument,

00:15:00.730 --> 00:15:03.140
and what application do you
want to launch for the second

00:15:03.140 --> 00:15:05.780
instrument?" And I would see
all of that in the same window,

00:15:05.780 --> 00:15:09.030
which is really great,
especially since Xray provides this

00:15:09.160 --> 00:15:13.380
over time readout that we'll see,
so you can visually even correlate the

00:15:13.390 --> 00:15:15.820
data coming back for that solution.

00:15:15.820 --> 00:15:18.520
And so I'm just going to
accept the defaults here,

00:15:18.520 --> 00:15:21.640
so "End After Tracing," apply
Safari to all instruments.

00:15:21.640 --> 00:15:22.350
I'm going to hit open.

00:15:23.820 --> 00:15:28.320
Now it's going to prepare all the
instruments and it's starting to run.

00:15:28.320 --> 00:15:30.560
Safari is bouncing and launching.

00:15:30.770 --> 00:15:34.810
And when you are applying several
instruments obviously your process,

00:15:34.880 --> 00:15:37.900
depending on the instruments,
may slow down a little bit.

00:15:38.100 --> 00:15:40.780
In this case,
ObjectAlloc is taking up some time here,

00:15:40.780 --> 00:15:42.420
the ObjectAlloc instrument.

00:15:42.540 --> 00:15:45.300
But we have now Safari.

00:15:45.300 --> 00:15:46.540
It's almost done loading.

00:15:46.560 --> 00:15:47.700
Okay, it's finished.

00:15:47.980 --> 00:15:51.650
And in the X-ray window now
we see to the right of the

00:15:51.650 --> 00:15:55.760
instruments graphical displays,
one for each instrument.

00:15:55.850 --> 00:16:01.040
This is your high-level view of the data
coming in to X-ray from the instruments.

00:16:01.530 --> 00:16:06.380
One way you can think of this
is a navigation tool to say,

00:16:06.380 --> 00:16:08.970
"Oh, I see a general problem
here in this graph.

00:16:08.980 --> 00:16:12.010
Let me look at a detail view."

00:16:12.170 --> 00:16:16.960
You can also look at
tracks in different ways.

00:16:16.960 --> 00:16:19.040
So I have the object
alloc instrument selected.

00:16:19.080 --> 00:16:24.830
Maybe I wanted to see the call stack
depth on each object alloc event.

00:16:24.830 --> 00:16:28.360
That's freeze and allocs and
all sorts of different things.

00:16:28.360 --> 00:16:30.840
So I'll select my track style popup.

00:16:30.840 --> 00:16:32.610
You have this in each instrument.

00:16:32.640 --> 00:16:34.750
And I'm going to say stack depth.

00:16:34.840 --> 00:16:39.240
So now I can see the actual stack
depth of the various allocation events.

00:16:39.280 --> 00:16:42.180
In this case,
I want to go back to the total

00:16:42.180 --> 00:16:44.620
bytes graph because I have some
other things that I'd like to show

00:16:44.620 --> 00:16:46.500
you in this particular instrument.

00:16:46.500 --> 00:16:50.860
So when I select a detail
view or an instrument,

00:16:50.860 --> 00:16:54.280
the lower part of the screen,
the trace document changes for a

00:16:54.550 --> 00:16:56.630
detail view of the instrument selected.

00:16:56.630 --> 00:17:00.510
So you notice it was changing as
I was selecting different instruments.

00:17:00.600 --> 00:17:03.580
So now I have the object alloc
instrument selected again.

00:17:03.840 --> 00:17:06.230
In object alloc,
the detail view allows me

00:17:06.260 --> 00:17:07.750
to do different things.

00:17:07.810 --> 00:17:10.440
I can sort on different amounts of data.

00:17:10.630 --> 00:17:15.640
And I can see the different
categories of objects created.

00:17:15.640 --> 00:17:20.680
When I select different categories,
the -- and I'm actually going to

00:17:20.680 --> 00:17:25.620
stop this trace now because I want
to keep these labels here where they

00:17:25.640 --> 00:17:27.480
are so I can speak more to them.

00:17:27.480 --> 00:17:31.140
When I select a particular category,
I can go into one.

00:17:31.140 --> 00:17:33.720
Say I wanted to look at
all the CF set events.

00:17:33.720 --> 00:17:38.240
I can click the small eye
icon by that category.

00:17:38.240 --> 00:17:40.380
I'll do that here.

00:17:40.380 --> 00:17:45.170
And now I've drilled down into that
particular category of allocation events.

00:17:45.170 --> 00:17:48.930
And I can see freeze, and Alex,
et cetera.

00:17:49.000 --> 00:17:51.370
And I can also look at extended data.

00:17:51.370 --> 00:17:56.850
Where, for example,
did these events take place?

00:17:57.150 --> 00:18:00.190
If I press the E button,
the extended data button,

00:18:00.280 --> 00:18:03.430
on the far right middle control
bar -- I'll do that now.

00:18:04.700 --> 00:18:16.400
[Transcript missing]

00:18:16.700 --> 00:20:09.300
[Transcript missing]

00:20:09.710 --> 00:20:12.640
So let's look at another instrument.

00:20:12.730 --> 00:20:15.980
The file activity instrument
is showing me all the opens and

00:20:15.980 --> 00:20:18.910
closes and stats on various files.

00:20:19.090 --> 00:20:21.800
This is built, actually, with DTrace.

00:20:21.860 --> 00:20:25.850
And I could filter this
on various types of data.

00:20:26.020 --> 00:20:29.400
Let's say, for example,
that I wanted to look at all the opens.

00:20:29.470 --> 00:20:30.430
So all the files that were open.

00:20:30.440 --> 00:20:32.950
Well, I'll click on the search field
in the lower left hand corner of

00:20:32.950 --> 00:20:34.900
the screen and I'll type open.

00:20:35.010 --> 00:20:36.580
And I'll hit return.

00:20:36.770 --> 00:20:38.400
Now it's filtered all the events to open.

00:20:38.400 --> 00:20:40.970
And it's also done
something a little unusual.

00:20:41.060 --> 00:20:44.220
It's tokenized that open string.

00:20:44.220 --> 00:20:47.580
The reason it's done that is we
want to allow you to filter on

00:20:47.580 --> 00:20:49.280
more than just simple string data.

00:20:49.520 --> 00:20:52.830
For example,
if I reopen the extended detail view and

00:20:52.830 --> 00:21:00.520
I click on various file activity events,
I see something kind of interesting.

00:21:00.520 --> 00:21:04.700
It looks like our symbolication
here is having an issue.

00:21:07.780 --> 00:21:09.700
Let me filter that out a moment.

00:21:09.700 --> 00:21:17.160
This will still actually
work to some extent,

00:21:17.250 --> 00:21:19.410
but it's unfortunate.

00:21:20.500 --> 00:21:22.120
Okay, well,
I'm going to try to do it anyways.

00:21:22.220 --> 00:21:24.540
Basically,
what you can do is you can select

00:21:24.630 --> 00:21:29.590
multiple stack frames in your event,
in your stack trace viewer,

00:21:29.590 --> 00:21:34.310
and if you hit the spyglass icon,
it will filter down to just events

00:21:34.310 --> 00:21:36.980
that include that bit of stack trace.

00:21:37.010 --> 00:21:39.130
I'll do that now and
the events did change,

00:21:39.130 --> 00:21:43.630
but obviously we're getting a lot
of bad symbolic data here right now.

00:21:43.630 --> 00:21:45.160
I apologize.

00:21:45.160 --> 00:21:48.160
So you can filter the
data in multiple ways.

00:21:48.160 --> 00:21:53.870
So I'll just clear and we will...

00:21:55.290 --> 00:22:05.430
move on so another thing that uh...
Xray can do is show multiple runs

00:22:07.410 --> 00:22:12.910
You may want to see the before and
after effects of some change you make.

00:22:12.910 --> 00:22:15.980
So, Xray allows you to
visually compare those.

00:22:16.010 --> 00:22:18.320
You run it, you make a change,
you run it again, see what happens.

00:22:18.400 --> 00:22:26.810
So, if I select the show filters button,
this is this middle button,

00:22:27.260 --> 00:22:29.730
the segment control for
various instruments,

00:22:29.730 --> 00:22:29.730
and press run again,

00:22:29.990 --> 00:22:33.230
Then I will see Safari will start
up again and I will see a second run

00:22:33.230 --> 00:22:35.140
for these instruments become visible.

00:22:35.190 --> 00:22:38.070
And actually I'm going to shrink
these down some so you can see

00:22:38.070 --> 00:22:40.480
them all on screen at once.

00:22:40.580 --> 00:22:49.480
So now I can select different tracks
of data and compare them visually.

00:22:50.140 --> 00:22:56.260
So let's stop that and quit Xray and
let's go back to the slides please.

00:23:03.430 --> 00:23:09.240
Slides please.

00:23:09.260 --> 00:23:12.800
Okay,
so let's review the concepts that we saw.

00:23:12.870 --> 00:23:15.350
First of all,
we learned that there's a trace

00:23:15.350 --> 00:23:19.940
document that you pretty much live in
to trace any particular subject matter,

00:23:20.060 --> 00:23:22.560
and you can have more than one of these.

00:23:22.560 --> 00:23:24.730
We also learned where
you get your instruments,

00:23:24.730 --> 00:23:27.950
those devices, software,
pieces of software code that

00:23:27.950 --> 00:23:30.410
capture and display the data to you.

00:23:30.410 --> 00:23:32.760
You get those from your toolbox.

00:23:33.180 --> 00:23:35.390
You also have a list of instruments.

00:23:35.420 --> 00:23:39.490
This is the instruments
applied to the trace document.

00:23:39.670 --> 00:23:42.200
Those are the instruments
that gather the data.

00:23:42.200 --> 00:23:44.680
And to the right of those
are the track views,

00:23:44.740 --> 00:23:47.590
the graphical views
that display the data.

00:23:48.310 --> 00:23:51.130
And finally,
we learned that you have a detail view,

00:23:51.130 --> 00:23:52.870
and if you select a
particular instrument,

00:23:52.890 --> 00:23:55.690
the detail view of that
instrument will be displayed.

00:23:55.980 --> 00:23:59.840
And we also learned that you
have multiple run support.

00:23:59.840 --> 00:24:04.900
You can see each run individually
or as a group that you've performed.

00:24:05.070 --> 00:24:09.060
And now let's go and look at how
you create an automated test case.

00:24:09.140 --> 00:24:12.650
I spoke a lot of that talking about
how each of the different groups of

00:24:12.650 --> 00:24:14.560
users could take advantage of Xray.

00:24:16.920 --> 00:24:22.800
So we're back to the demo machine
and let me start up Xray again.

00:24:22.960 --> 00:24:31.070
And this time I'm going to apply
again our old familiar instruments.

00:24:31.380 --> 00:24:34.340
and I'm also going to start recording.

00:24:34.340 --> 00:24:41.620
Now when I record a master track,
I'm not gathering data for the

00:24:41.620 --> 00:24:44.300
instruments in the list above.

00:24:44.300 --> 00:24:48.450
So I'm going to press this record
button that is a bit to the left

00:24:49.030 --> 00:24:50.970
of the run button we used earlier.

00:24:50.970 --> 00:24:55.300
I'm going to press record and oh,
it's asked me, it said, you know,

00:24:55.300 --> 00:24:56.460
your recording is unavailable.

00:24:56.460 --> 00:24:59.450
Well, this technology comes
from our automator group.

00:24:59.670 --> 00:25:06.370
They use the accessibility API to
make sure that they know exactly

00:25:06.370 --> 00:25:07.910
what you are manipulating.

00:25:07.910 --> 00:25:12.240
And so I'm going to go down to
universal access and I'm going

00:25:12.240 --> 00:25:14.170
to enable assistive devices.

00:25:14.720 --> 00:25:19.020
If you can't play back or record,
that dialogue should have opened up,

00:25:19.250 --> 00:25:23.330
but if not, just go there and make
sure that that is working.

00:25:23.340 --> 00:25:25.040
So I'll hit the record button again.

00:25:25.130 --> 00:25:28.080
It's going to ask me to select
an app I want to record,

00:25:28.320 --> 00:25:31.300
and I'll select the good
old familiar Safari.

00:25:33.780 --> 00:25:35.360
And I'll do a few things.

00:25:35.410 --> 00:25:40.360
I'll open up the bookmarks group
and I'll add a new bookmark group,

00:25:40.490 --> 00:25:41.610
my bookmarks.

00:25:41.610 --> 00:25:42.960
Hit enter.

00:25:43.080 --> 00:25:44.580
Oh, I decided I didn't want to do that.

00:25:45.020 --> 00:25:49.700
And I'll close the bookmarks
group again and I'll quit Safari.

00:25:50.700 --> 00:25:56.270
Now, what we see are a series of events
gathered for that recording.

00:25:56.340 --> 00:25:57.700
I'll stop the recording now.

00:25:57.700 --> 00:26:03.100
And now I can replay the recording and at
the same time run those other instruments

00:26:03.100 --> 00:26:05.430
that I had to gather data based on that.

00:26:05.510 --> 00:26:10.940
So all I need to do now that I have
my recording is press the run button.

00:26:12.200 --> 00:26:14.360
It's going to start up Safari again.

00:26:14.360 --> 00:26:19.280
Now, the recording and playback framework
is smart enough to know that when

00:26:19.280 --> 00:26:24.350
you're using other instruments,
the timing and such may be different

00:26:24.360 --> 00:26:26.240
than when you made the recording.

00:26:26.240 --> 00:26:30.590
So what it does is it keeps a
good eye out for the elements,

00:26:30.590 --> 00:26:33.360
the visual elements that you
manipulated to be available before

00:26:33.360 --> 00:26:35.390
it tries to replay those events.

00:26:35.400 --> 00:26:40.480
So it's typing in my bookmarks now,
and I'll delete it.

00:26:40.890 --> 00:26:44.540
Xcode is a new tool that
is being developed in the

00:26:44.540 --> 00:26:50.260
Microsoft Office of Technology and
is used to automate your workflow.

00:26:50.260 --> 00:26:56.310
You can imagine doing that for different
types of tests that you perform.

00:26:58.640 --> 00:27:04.930
Okay,
so let's go back to the slides please.

00:27:10.320 --> 00:27:14.360
Now just to review,
it's very simple to make a recording.

00:27:14.360 --> 00:27:19.490
You just press the recording button,
you manipulate your app, you press stop.

00:27:19.700 --> 00:27:23.960
Usually it's a good idea to quit your
app before you do that just so you can

00:27:23.960 --> 00:27:28.200
make sure it's always in the same state
when you get back to replaying it.

00:27:28.330 --> 00:27:31.560
And another thing that you can
do that we didn't see is to

00:27:31.560 --> 00:27:34.190
actually loop the recording.

00:27:34.410 --> 00:27:38.690
Many times a problem doesn't surface
just the first time you run it.

00:27:38.700 --> 00:27:40.180
Maybe you have to run it a few times.

00:27:41.200 --> 00:27:43.950
So Xray will automate
that for you as well.

00:27:43.960 --> 00:27:46.290
You can just say loop this
recording at playback and it will

00:27:46.290 --> 00:27:48.150
just keep replaying the recording.

00:27:48.270 --> 00:27:50.600
That's one of the reasons it's
good to quit the app at the

00:27:50.600 --> 00:27:52.160
end of a particular recording.

00:27:52.270 --> 00:27:54.410
So it will play it through once,
quit the app, start it up again,

00:27:54.410 --> 00:27:55.660
play it through, quit the app, etc.

00:27:55.740 --> 00:27:58.160
and keep running until you hit
the problem you were looking for.

00:27:59.040 --> 00:28:01.540
And finally,
you can save the recording in a

00:28:01.540 --> 00:28:03.940
template along with other instruments.

00:28:04.140 --> 00:28:07.010
So let's talk about Xray templates.

00:28:08.100 --> 00:28:10.160
So Xray templates are Xray.com templates.

00:28:10.160 --> 00:28:14.620
documents pre-configured with
a certain set of instruments to

00:28:14.680 --> 00:28:16.320
trace a particular subject matter.

00:28:16.320 --> 00:28:20.260
And they can include pre-recorded
master track recordings.

00:28:20.260 --> 00:28:23.660
These can be anything you want,
but generally people either

00:28:23.660 --> 00:28:26.680
have them be very general or
specific to a particular problem.

00:28:28.160 --> 00:28:29.450
So how do you use templates?

00:28:29.560 --> 00:28:33.640
Well,
you can save as your trace document,

00:28:33.670 --> 00:28:37.060
select trace template,
we'll see how to do this in a minute,

00:28:37.090 --> 00:28:39.000
and save them to disk.

00:28:39.030 --> 00:28:43.450
Now, trace templates,
even if you have a URI recording,

00:28:43.450 --> 00:28:47.060
which have some binary data encoded,
are basically flat XML files.

00:28:47.090 --> 00:28:49.830
You can check this into
a source code repository,

00:28:49.830 --> 00:28:54.660
you can email them to someone,
you check them into your own project,

00:28:54.660 --> 00:28:58.050
etc., so you can easily
pass these around.

00:28:58.220 --> 00:29:19.360
Xcode is a great way to pass around
custom instruments you create.

00:29:19.360 --> 00:29:22.440
You can also double-click these
templates as if they were applications.

00:29:22.510 --> 00:29:26.150
You don't need Xray running,
and Xray will pop up pre-configured

00:29:26.150 --> 00:29:28.500
with these instruments.

00:29:28.500 --> 00:29:29.810
And finally, and we'll see this
later in the demo also,

00:29:29.870 --> 00:29:33.060
is that you can drop
these custom templates in

00:29:33.060 --> 00:29:35.840
Library Preferences Xray templates.

00:29:36.140 --> 00:29:38.330
The Xray templates part won't
be created on your system.

00:29:38.330 --> 00:29:41.400
You'll have to go and do that
yourself as you have to do in

00:29:41.500 --> 00:29:44.100
many different preferences apps.

00:29:44.100 --> 00:29:46.730
But if you drop that in there
and then you relaunch Xcode,

00:29:46.730 --> 00:29:53.400
you'll find that template in your
debug performance tools menu,

00:29:53.400 --> 00:29:57.420
and you can use that with your own app.

00:29:57.420 --> 00:29:57.420
So now let's look at the Xcode Xcode.

00:29:58.660 --> 00:30:03.230
So I have my existing application
here in this recording that we made.

00:30:03.270 --> 00:30:08.300
I'm going to go up to the file menu
and I'm going to say save as and I'm

00:30:08.750 --> 00:30:13.870
going to go to desktop and I'm going
to say save this as a trace template

00:30:13.880 --> 00:30:17.150
and I'm going to say my trace template.

00:30:17.150 --> 00:30:17.150
So

00:30:17.600 --> 00:30:22.610
Okay, and I will save that.

00:30:23.210 --> 00:30:25.200
Okay, we see it appear at the
bottom of the screen.

00:30:25.260 --> 00:30:27.330
I'm going to actually quit Xray now.

00:30:27.540 --> 00:30:29.480
So Xray isn't running.

00:30:29.530 --> 00:30:32.390
And I can double click on my template.

00:30:32.390 --> 00:30:36.580
It's pre-populated with instruments
and a UR recording I had before.

00:30:36.580 --> 00:30:38.860
And I can press the run button again.

00:30:38.860 --> 00:30:41.920
And then again it will start up
Safari and run through the recording.

00:30:41.920 --> 00:30:45.440
And I'll let this get started and
then I'll stop it so we can move on.

00:30:45.440 --> 00:30:49.590
So it's launching Safari.

00:30:56.690 --> 00:30:59.530
And it's starting to make the recording,
or starting to play back the recording,

00:30:59.610 --> 00:31:00.370
pardon me.

00:31:00.520 --> 00:31:02.720
Type in the keystrokes, etc.

00:31:03.060 --> 00:31:05.490
So I'll just go ahead and quit that now.

00:31:06.000 --> 00:31:09.680
I'll stop Xray and I'll quit that.

00:31:09.680 --> 00:31:12.170
Okay, back to the slides again please.

00:31:22.410 --> 00:31:31.920
So another thing that Xray
has sort of become good for is

00:31:31.950 --> 00:31:34.300
busting your own assumptions.

00:31:36.210 --> 00:31:41.310
Bad assumptions are caused by lack
of understanding of some subject.

00:31:41.570 --> 00:31:45.000
I make bad assumptions about code,
I'm sure we all have.

00:31:45.000 --> 00:31:49.040
And bad assumptions lead to bad
decisions and then that leads to bugs.

00:31:49.240 --> 00:31:57.180
So one of the ways you can bust an
assumption is for an IT administrator.

00:31:57.340 --> 00:32:01.200
So this demo I just
put in here yesterday,

00:32:01.200 --> 00:32:05.410
I heard a story about this from
probably someone in this room who

00:32:05.410 --> 00:32:09.200
passed it along to someone that
I work with and it related to me.

00:32:09.210 --> 00:32:14.470
They're an IT administrator and they
wanted to determine the configuration for

00:32:14.470 --> 00:32:20.200
machines that they should have deployed
in their business or the university.

00:32:20.200 --> 00:32:24.100
And basically they wanted to
determine what's the minimum amount

00:32:24.100 --> 00:32:28.780
of RAM and therefore what is the most
efficient set of applications based

00:32:28.960 --> 00:32:31.200
on RAM usage that I could deploy with.

00:32:31.200 --> 00:32:34.200
And one of the things they wanted
to look at was web browser.

00:32:34.510 --> 00:32:39.750
was web browsers,
and I thought about that and I

00:32:40.170 --> 00:32:44.360
It has been drilled into my head
for years and years and years,

00:32:44.360 --> 00:32:50.330
that certain other browsers, say Opera,
are really, really memory efficient,

00:32:50.470 --> 00:32:53.000
and nice small, compact browsers.

00:32:53.000 --> 00:32:55.900
I thought, well,
these guys are probably going to compare

00:32:56.110 --> 00:32:57.900
Opera to Safari and choose Opera.

00:32:58.140 --> 00:33:01.280
I don't want to show that demo,
so obviously,

00:33:01.280 --> 00:33:05.770
I checked this out ahead of time,
but let me do a little demo to show you

00:33:05.770 --> 00:33:09.900
kind of the Swiss Army knife ability
of X-Ray to bust different assumptions.

00:33:10.020 --> 00:33:12.480
So back to the demo machine, please.

00:33:14.260 --> 00:33:22.540
So, what you can do with Xray is compare
different apps in the same trace.

00:33:22.540 --> 00:33:27.130
So I'll use our favorite old
Object Alloc instrument again,

00:33:27.130 --> 00:33:29.580
and first I'm going to run Safari.

00:33:29.810 --> 00:33:31.840
And I'll open that up.

00:33:31.850 --> 00:33:34.700
I have Safari and Opera set
to open up the same web page.

00:33:34.700 --> 00:33:42.170
Let Safari do its thing here.

00:33:53.440 --> 00:33:54.060
Okay, it's loaded.

00:33:54.060 --> 00:33:57.640
Now I'm going to actually stop that
trace directly like I was doing before

00:33:57.640 --> 00:33:59.000
by pressing the Run button again.

00:33:59.000 --> 00:34:07.880
Now, a feature of X-Ray is to allow you
to change the conditions of the trace

00:34:07.880 --> 00:34:09.360
after you've selected the first one.

00:34:09.360 --> 00:34:12.470
If you hold down the Option key
and you press the Run button

00:34:12.470 --> 00:34:15.520
again with the mouse,
it's going to bring up the

00:34:15.820 --> 00:34:18.350
application chooser dialog again.

00:34:18.360 --> 00:34:23.000
Now, we often use this just to
change environment variables.

00:34:23.120 --> 00:34:25.200
I remember I was working on
some garbage collection stuff,

00:34:25.240 --> 00:34:28.910
and I wanted to flip a flag to
switch garbage collection on and off.

00:34:29.040 --> 00:34:30.160
That was a use of this.

00:34:30.160 --> 00:34:32.650
But I can just also choose
an entirely different app.

00:34:32.720 --> 00:34:37.660
So I'm going to go to my desktop here,
and I'm going to actually choose Opera.

00:34:37.660 --> 00:34:41.200
And I'm going to launch that now.

00:34:41.220 --> 00:34:44.300
And it's going to do the same thing.

00:34:44.300 --> 00:34:48.120
It's going to load the Apple Start page.

00:34:50.090 --> 00:34:54.460
and I'm also going to show
runs of the previous trace is

00:34:54.470 --> 00:34:57.210
unlabeled but it was Safari.

00:34:57.330 --> 00:35:01.580
It's not running now obviously in the
primary trace the top one is running.

00:35:01.890 --> 00:35:04.830
I need to go through and I'm not
a real opera user so I need to

00:35:04.830 --> 00:35:07.790
press this button for some reason.

00:35:15.420 --> 00:35:16.620
So it's going to load the Apple page.

00:35:16.630 --> 00:35:17.420
Wait until it's done.

00:35:17.420 --> 00:35:17.720
Okay.

00:35:17.720 --> 00:35:20.950
And now I'm going to go back and,
you know, son of a gun.

00:35:21.210 --> 00:35:22.560
I was actually wrong.

00:35:22.870 --> 00:35:24.700
That assumption was bad.

00:35:24.720 --> 00:35:27.900
Safari actually, as we can see,
these are on the same scale vertically.

00:35:27.900 --> 00:35:29.850
That's the total number
of bytes allocated.

00:35:29.980 --> 00:35:31.920
And Opera actually took far more memory.

00:35:31.920 --> 00:35:34.450
I'm still surprised by
that because it's just,

00:35:34.450 --> 00:35:38.210
you know, you get drilled in your head
what is true and what is not.

00:35:38.220 --> 00:35:40.290
And that,
those assumptions can often be wrong.

00:35:40.330 --> 00:35:44.870
So that's an example of busting
an assumption using kind

00:35:44.870 --> 00:35:49.200
of the Swiss Army ability,
Swiss Army knife ability of Xray.

00:35:49.200 --> 00:35:52.650
So back to the slides, please.

00:35:55.550 --> 00:36:00.000
So another problem,
we've all had that moment where

00:36:00.030 --> 00:36:03.800
we're sitting in our office,
boss walks in,

00:36:03.840 --> 00:36:07.940
and he or she clearly has this look
on their face that they're gonna tell

00:36:07.940 --> 00:36:10.280
you something you do not wanna hear.

00:36:10.280 --> 00:36:13.460
And we may have also had
the moment where they say,

00:36:13.460 --> 00:36:17.690
you know, so such and such engineer has
moved to a different group or

00:36:17.690 --> 00:36:20.490
left the company or something,
and their application is

00:36:20.490 --> 00:36:22.100
not in such good shape.

00:36:22.170 --> 00:36:26.140
And I can't tell you anything
about how the application works,

00:36:26.140 --> 00:36:31.010
but we really need this fixed 'cause
we need to ship this app ASAP.

00:36:31.310 --> 00:36:35.800
So in this scenario,
let's say that we have this vital app.

00:36:35.800 --> 00:36:38.200
It's called the Family Slideshow app.

00:36:38.200 --> 00:36:42.000
And yes, this is just an excuse to show
you pictures of my daughter.

00:36:42.560 --> 00:36:50.200
But remember,
this is a critical app for the company.

00:36:50.200 --> 00:36:53.800
And the app has this slow,
terrible animation.

00:36:53.800 --> 00:36:56.490
So you need to figure
out why it's so slow.

00:36:56.710 --> 00:36:58.970
First thing you say is,
this guy probably didn't

00:36:58.970 --> 00:37:00.220
use core animation.

00:37:00.370 --> 00:37:00.910
And you're right.

00:37:01.200 --> 00:37:03.110
If I would have used that,
I wouldn't have had this demo.

00:37:03.150 --> 00:37:05.540
So I had to cook something else up.

00:37:05.650 --> 00:37:08.580
So we have this app that has this poor,
slow animation.

00:37:08.650 --> 00:37:13.720
And we need to understand what
it does and why it's a problem.

00:37:13.720 --> 00:37:16.270
Now, this obviously is a
very simple application.

00:37:16.270 --> 00:37:23.700
But oftentimes,
we're just given mounds of code.

00:37:23.700 --> 00:37:27.760
And we have no roadmap in that code,
no way to understand how it works.

00:37:27.760 --> 00:37:30.200
So we need to use tools to help us.

00:37:31.200 --> 00:37:33.960
And in this case,
I'm going to show you how we

00:37:33.960 --> 00:37:36.100
could use X-Ray to help us out.

00:37:36.120 --> 00:37:39.480
So let's go back to the demo machine.

00:37:45.690 --> 00:37:51.140
And let's first take a
look at that demo app.

00:37:51.140 --> 00:37:52.950
Let's just run it.

00:37:54.700 --> 00:38:00.140
So, okay,
we can clearly see that it has very slow,

00:38:00.140 --> 00:38:01.700
very clunky animation.

00:38:01.700 --> 00:38:07.460
We need to figure out
why that is the case.

00:38:07.460 --> 00:38:15.160
Now, as an Xray user,
I know that Xray comes pre-bundled

00:38:15.160 --> 00:38:21.770
with all sorts of templates,
well, a few of them right now.

00:38:21.770 --> 00:38:21.770
And

00:38:22.350 --> 00:38:25.340
Maybe I can use one of those
templates to help me fix this problem.

00:38:25.600 --> 00:38:29.800
Well, if I go under my debug menu
and look at my launch using

00:38:29.800 --> 00:38:36.720
performance tools submenu,
I can see,

00:38:36.720 --> 00:38:36.720
and obviously .ds store isn't a...

00:38:36.700 --> 00:40:55.900
[Transcript missing]

00:40:56.870 --> 00:41:05.140
Let's go and use the same UI to browse
the pre-built instrument I have.

00:41:05.140 --> 00:41:05.140
So I'm going to cancel out of this.

00:41:05.580 --> 00:41:08.060
And I'm going to select Read File Sizes.

00:41:08.060 --> 00:41:09.640
This is its custom instrument.

00:41:09.640 --> 00:41:13.910
I'm going to go back and I'm going
to say Edit Read File Sizes Type.

00:41:14.250 --> 00:41:18.620
Now, the first thing I want to do
is work backwards from what

00:41:18.720 --> 00:41:20.300
I want out of this instrument.

00:41:20.360 --> 00:41:23.560
Now,
I'm going to go through some Dtracisms

00:41:23.560 --> 00:41:28.370
and I don't want you to worry about,
you know, understanding exactly

00:41:28.430 --> 00:41:30.600
what that Dtrace stuff is.

00:41:30.600 --> 00:41:33.080
There's another session tomorrow
on the OS Foundations track

00:41:33.150 --> 00:41:36.540
and there's documentation on
the web to learn about Dtrace.

00:41:36.540 --> 00:41:40.050
But what I want you to take away
from this demonstration is that A,

00:41:40.190 --> 00:41:42.900
you can create your
own custom instruments.

00:41:42.900 --> 00:41:47.580
B, they have certain components and C,
how to think about building your own.

00:41:47.580 --> 00:41:51.450
So in this case,
what I want out of this instrument

00:41:51.640 --> 00:41:55.910
is to see the full path to
images that are being read in.

00:41:55.910 --> 00:42:00.810
I want to see how many bytes I'm reading
out of those images and I want to see how

00:42:00.810 --> 00:42:04.340
long it takes to read those images in.

00:42:04.340 --> 00:42:09.980
So I need to think about what API I need
to instrument to get that data.

00:42:10.450 --> 00:42:13.500
In this case,
I need to instrument the open API to get

00:42:13.500 --> 00:42:19.900
the full path to the file that's being
opened and I also need to instrument

00:42:19.920 --> 00:42:25.370
the return of that same open API so
that I can get the file descriptor

00:42:25.910 --> 00:42:28.380
because all the other API I'm going
to use are just going to use the

00:42:28.380 --> 00:42:33.010
file descriptor but I don't want
to look at that in the UI of X-Ray.

00:42:33.140 --> 00:42:38.330
This pop-up here is my list of probes,
a probe per function.

00:42:38.470 --> 00:42:42.500
So in this case,
I have a probe for the open call.

00:42:42.930 --> 00:42:48.850
And I have some Descript that will be
performed when this probe is fired.

00:42:48.860 --> 00:42:52.070
That is the conditions,
which in this case are very simple,

00:42:52.070 --> 00:42:54.460
just that this API has been entered into.

00:42:54.480 --> 00:42:58.810
You could have more complex conditions
saying this API has been entered

00:42:58.870 --> 00:43:00.710
into and the path is so and so.

00:43:00.710 --> 00:43:02.790
But in this case, I want all paths.

00:43:03.020 --> 00:43:06.460
So I want to scroll
away the path passed in.

00:43:06.530 --> 00:43:13.170
Because on the next probe of open--
but this is the return of the open

00:43:13.170 --> 00:43:17.460
call-- I want to get the file descriptor
that's going to be returned from

00:43:17.530 --> 00:43:24.380
open and associate that with the
path I saved off just a second earlier.

00:43:24.440 --> 00:43:29.870
Then, as I said,
I want to also record how long

00:43:30.250 --> 00:43:32.080
it takes to read this file in.

00:43:32.080 --> 00:43:36.320
Well, basically,
I'm going to make some assumptions here.

00:43:36.320 --> 00:43:40.960
I'm going to assume that as
soon as the API that's using

00:43:40.960 --> 00:43:46.750
this file are done with it,
that they close the file.

00:43:47.170 --> 00:43:51.460
So what I'm going to do is on the open,
I'm going to set my time array,

00:43:51.460 --> 00:43:54.440
keeping track of how
much time is being used,

00:43:54.530 --> 00:43:59.510
to zero for this particular call,
along with a bytes counter.

00:43:59.730 --> 00:44:04.020
And then in the read API-- that
I'll instrument-- on its entry,

00:44:04.030 --> 00:44:08.420
I want to record how many bytes in
sum-- so they may call this 10 times,

00:44:08.420 --> 00:44:15.740
so add all those 10 times up-- in total
were requested to be read from that file.

00:44:15.780 --> 00:44:20.300
And finally,
what I want to do is on the close,

00:44:20.310 --> 00:44:27.030
when the caller that's reading all
these images closes a particular file,

00:44:27.030 --> 00:44:31.010
I want to generate some data
that's sent back to X-Ray.

00:44:31.070 --> 00:44:33.760
So I'm going to send
this data back to X-Ray.

00:44:33.860 --> 00:44:38.560
And then I'm going to send
this data back to X-Ray.

00:44:39.350 --> 00:44:44.670
The total number of bytes in Kbytes
and the duration of milliseconds.

00:44:45.030 --> 00:44:50.380
The total number of bytes in Kbytes
and the duration of milliseconds.

00:45:15.000 --> 00:45:18.040
and what it has to say,
I don't need the URI recorder for this

00:45:18.110 --> 00:45:21.170
demo so I'm going to get rid of it and
click on this X in that URI recorder

00:45:21.170 --> 00:45:26.340
instrument and that's going to delete
that instrument and close that track.

00:45:26.370 --> 00:45:30.420
I also want to use an instrument
that didn't quite make it out

00:45:30.840 --> 00:45:33.190
the door for the Leopard Seed.

00:45:33.250 --> 00:45:38.460
It's a sampler instrument that will A,
look at when you get spins,

00:45:38.570 --> 00:45:42.550
an app starts spinning,
it will sample that app and also B,

00:45:42.550 --> 00:45:45.990
you can have it set to just
continuously sample the app.

00:45:46.060 --> 00:45:50.400
I'm going to use B continuously
sampling the app so I'll drag in my

00:45:50.400 --> 00:45:54.050
sampler and I'm going to use that
custom instrument that I just built.

00:45:55.390 --> 00:46:02.070
Okay,
so now I want to use this pre-configured

00:46:02.150 --> 00:46:03.960
trace document from Xcode.

00:46:03.980 --> 00:46:04.300
So what do I do?

00:46:04.300 --> 00:46:09.820
Well, first thing I'm going to do
is I'm going to go quit Xcode.

00:46:10.310 --> 00:46:16.210
So I've quit Xcode and I'm going to go
up to my file menu again and say save as.

00:46:16.570 --> 00:46:20.610
I have the templates directory
already in my list box there.

00:46:20.610 --> 00:46:26.500
So it's the user account, library,
preferences, Xray templates.

00:46:26.520 --> 00:46:28.910
I'm going to give it a name.

00:46:29.480 --> 00:46:38.740
"Slide show testing and I'm going
to change it to the trace template

00:46:38.740 --> 00:46:42.580
file format and I'm going to save."

00:46:43.930 --> 00:46:49.360
Now, I'm just going to go back and
check that it's actually there.

00:46:50.560 --> 00:46:52.640
Here's templates directory
again and we see it,

00:46:52.640 --> 00:46:55.830
slideshow testing template,
so I'll cancel out of that.

00:46:56.040 --> 00:46:58.060
I'm going to quit Xray now.

00:46:58.180 --> 00:47:01.590
I'm going to reopen my
project that I'm working on,

00:47:01.800 --> 00:47:04.190
the family slideshow project.

00:47:05.180 --> 00:47:10.200
So it opens up and now I can go
under the debug menu and say launch

00:47:10.230 --> 00:47:14.200
using performance tool and I see my
slideshow testing template there.

00:47:14.230 --> 00:47:17.530
So it's basically a new tool
for me to use and I could use

00:47:17.750 --> 00:47:19.500
it for all sorts of things.

00:47:19.510 --> 00:47:23.060
So I'm going to select
that and when I do,

00:47:23.060 --> 00:47:28.200
Xray is going to open up and it's
going to begin playing the slideshow

00:47:28.200 --> 00:47:31.040
app and taking those measurements.

00:47:31.080 --> 00:47:34.280
So we still see that we have a problem.

00:47:34.900 --> 00:49:59.700
[Transcript missing]

00:49:59.790 --> 00:50:03.970
based on what Sampler is telling
me is this fetch image named API.

00:50:04.180 --> 00:50:09.520
So I'm going to double click on
that and bring it up in Xcode.

00:50:09.550 --> 00:50:11.240
And let's take a look at this API.

00:50:11.240 --> 00:50:17.750
Well, this API is reading in an image
every single time it's called.

00:50:17.860 --> 00:50:21.340
And it's called based
on Sampler all the time.

00:50:21.340 --> 00:50:25.720
So we looked at the file paths
of the previous instrument.

00:50:25.720 --> 00:50:28.300
Let's go back,
the custom one that we created.

00:50:28.350 --> 00:50:31.510
And I can see that all these
images are coming from the

00:50:31.520 --> 00:50:33.420
resources directory of that app.

00:50:33.450 --> 00:50:39.220
If you know something about
Cocoa and AppKit and how it

00:50:39.220 --> 00:50:42.700
processes resource images,
you'll know that there's a simple

00:50:42.700 --> 00:50:46.680
API you can use to read in these images.

00:50:46.710 --> 00:50:48.390
And it will actually cache them for you.

00:50:48.430 --> 00:50:50.220
So I'll just go ahead
and I'll use that one.

00:50:50.220 --> 00:50:57.850
I'll just say return and say this image,
image named.

00:50:57.940 --> 00:51:01.630
And-- I want to use the
name without the ending.

00:51:01.770 --> 00:51:03.660
So I'll say name, string.

00:51:03.660 --> 00:51:06.210
I'll use code sense here.

00:51:06.570 --> 00:51:09.000
By deleting path extension.

00:51:09.010 --> 00:51:10.140
Yes, I want that.

00:51:10.140 --> 00:51:10.630
OK.

00:51:11.190 --> 00:51:17.500
And I'll comment that other code out so
that we have that for future reference.

00:51:17.530 --> 00:51:18.500
And I'll save it.

00:51:18.510 --> 00:51:20.590
And I'll build that again.

00:51:20.900 --> 00:53:34.900
[Transcript missing]

00:53:35.970 --> 00:53:38.260
and I'm going to see if
there's a better way.

00:53:38.300 --> 00:53:43.570
Now, another great thing about
these showing multiple runs is

00:53:43.570 --> 00:53:45.690
that that data is still there.

00:53:45.800 --> 00:53:50.320
So I don't need to undo the
mistake that I made by using that

00:53:50.320 --> 00:53:53.840
really aggressive simple caching.

00:53:54.460 --> 00:53:58.300
and then rerun and gather the data again,
I can actually just go back to X-Ray,

00:53:58.300 --> 00:54:01.340
I'll click on the previous run,
I'll look at the data again.

00:54:01.430 --> 00:54:02.960
So what else is going on in there?

00:54:02.960 --> 00:54:05.800
Let's use the flag navigator
again to look at other things.

00:54:05.800 --> 00:54:10.500
The other API, it is showing me that
it has executed a lot,

00:54:10.500 --> 00:54:11.960
is drawRect.

00:54:12.050 --> 00:54:14.700
It doesn't do a lot here,
but it does do a lot in drawImage.

00:54:14.700 --> 00:54:16.280
I double-clicked on that,
it took me somewhere else in

00:54:16.300 --> 00:54:20.520
that file which is drawImage,
and I can look at this, and I can say,

00:54:20.580 --> 00:54:21.890
"Okay, well, what's it doing?

00:54:22.220 --> 00:54:24.140
Here's where it was making
that fetchImage name call,

00:54:24.140 --> 00:54:27.590
so I'd cached that previously, but again,
not a great solution.

00:54:27.820 --> 00:54:31.040
But it looks like if I would have
had this underbar image filled out,

00:54:31.190 --> 00:54:32.380
then it would have just used that.

00:54:32.380 --> 00:54:36.280
And so, I don't know,
let's find out more about that.

00:54:36.280 --> 00:54:39.280
And this is the part of the demo where,
in order to save some time,

00:54:39.280 --> 00:54:43.870
I put in some extra code, which is, oh,
this magical ability for it

00:54:43.920 --> 00:54:45.980
to cache the images itself.

00:54:45.980 --> 00:54:47.900
So we can pretend that
that actually wasn't there,

00:54:47.900 --> 00:54:51.780
but in order to solve this problem,
I can actually just cache the

00:54:51.840 --> 00:54:53.980
image in the viewer of the image.

00:54:53.980 --> 00:54:55.050
So I'll try that.

00:54:55.080 --> 00:54:58.810
I'll save it and I'll build it.

00:54:59.450 --> 00:55:04.480
And I'll go back to debug and
launch my trace one more time.

00:55:09.300 --> 00:55:39.600
[Transcript missing]

00:55:48.880 --> 00:55:53.050
So we saw in there building custom
instruments and again I didn't want

00:55:53.050 --> 00:55:56.700
you to get overwhelmed by gosh I don't
understand all these weird Dtracisms,

00:55:56.700 --> 00:55:58.140
I was using self and other things.

00:55:58.190 --> 00:56:02.320
Dtrace is really cool and has a
really great language but it's a

00:56:02.320 --> 00:56:06.080
subject unto its own so I encourage
you to attend the session tomorrow

00:56:06.080 --> 00:56:10.210
and read about it on the web and
experiment with it in your leopard seed.

00:56:10.300 --> 00:56:13.890
But what I do want you to get is
the general concepts of creating

00:56:13.980 --> 00:56:16.090
your own custom instruments.

00:56:17.130 --> 00:56:20.610
So one of the three pieces of critical
information in that instrument

00:56:20.640 --> 00:56:22.880
builder was describing the instrument.

00:56:22.940 --> 00:56:26.440
This is going to represent the title,
the tool tip, the icon, etc.

00:56:26.440 --> 00:56:28.660
that will be the
instrument in the toolbox.

00:56:28.720 --> 00:56:31.940
So you really want something nice if
you're going to reuse this instrument.

00:56:33.000 --> 00:56:34.600
The second thing was the conditions.

00:56:34.720 --> 00:56:36.640
Now we had simple conditions there.

00:56:36.640 --> 00:56:40.460
We just said when it enters or
exits an API do something else.

00:56:40.460 --> 00:56:45.120
But you can have pretty complex
conditions that say when it enters

00:56:45.120 --> 00:56:45.120
or exits an API do something else.

00:56:45.120 --> 00:56:45.120
But you can have pretty complex
conditions that say when it enters

00:56:45.120 --> 00:56:45.120
or exits an API do something else.

00:56:45.420 --> 00:56:49.670
when it enters this API,
and I'm in this process, or that process,

00:56:49.800 --> 00:56:52.520
and this value is
within these parameters,

00:56:52.520 --> 00:56:55.470
then do my actions.

00:56:55.480 --> 00:56:58.410
And then we saw the actions themselves,
and we saw two different

00:56:58.470 --> 00:56:59.480
types of actions.

00:56:59.480 --> 00:57:03.120
We saw the ability to
record data back to X-ray,

00:57:03.120 --> 00:57:05.930
so we displayed in the detail view
and graphed it on the track view.

00:57:06.080 --> 00:57:09.760
And we also saw some bookkeeping,
so we saw keeping track

00:57:09.760 --> 00:57:12.970
of the number of bytes,
looking at how much time is

00:57:12.970 --> 00:57:16.440
actually spent in an operation,
all those sorts of things.

00:57:16.440 --> 00:57:18.750
You can do that with custom
scripts for different actions.

00:57:19.090 --> 00:57:22.430
You can have multiple of
those per probe firing.

00:57:22.530 --> 00:57:27.000
So in summary, the preview of Xray,
a new developer app,

00:57:27.000 --> 00:57:29.980
is in the Leopard Seed now.

00:57:29.980 --> 00:57:35.270
And you can use it today and even
better tomorrow to tackle this

00:57:35.370 --> 00:57:40.440
problem of increasing complexity in
our world as a software engineer,

00:57:40.570 --> 00:57:44.430
as a QA engineer,
as an IT support person, administrator,

00:57:44.700 --> 00:57:45.540
etc.

00:57:45.540 --> 00:57:48.560
And you can use Xray to bridge
gaps between developers,

00:57:48.560 --> 00:57:52.240
QA engineers, and IT support staff,
leverage Dtrace to create

00:57:52.240 --> 00:57:55.410
your own instruments,
and create your own templates

00:57:55.410 --> 00:57:59.480
as custom tools to increase
your own developer productivity.

00:58:01.070 --> 00:58:03.740
So for more information,
you can send an email

00:58:03.740 --> 00:58:05.200
to Matt Formica there.

00:58:05.200 --> 00:58:10.110
And you can also look on Sun's
website for information on

00:58:10.110 --> 00:58:11.710
DTrace and just search the web.

00:58:11.720 --> 00:58:13.520
You'll find a lot of information on it.

00:58:13.860 --> 00:58:16.530
There's already a buzz about
Apple having adopted DTrace,

00:58:16.630 --> 00:58:18.080
so that's really exciting.

00:58:18.080 --> 00:58:20.630
I'm glad that community
is really excited for us,

00:58:20.630 --> 00:58:22.440
and we're excited to join them.

00:58:22.440 --> 00:58:25.540
And you can also, again,
attend the session I mentioned earlier,

00:58:25.540 --> 00:58:28.360
which is in the
OS Foundations track tomorrow.

00:58:28.920 --> 00:58:31.500
They're actually going to demonstrate
using DTrace on the kernel,

00:58:31.500 --> 00:58:32.960
which is really, really killer.