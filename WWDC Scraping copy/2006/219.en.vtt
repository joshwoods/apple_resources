WEBVTT

00:00:10.390 --> 00:00:11.510
Good morning.

00:00:11.600 --> 00:00:12.350
My name is David Black.

00:00:12.460 --> 00:00:15.110
I'm a senior architect in the
product applications division.

00:00:15.110 --> 00:00:17.600
And today we're going to
talk about creating workflow

00:00:17.700 --> 00:00:19.510
solutions with Final Cut and XML.

00:00:20.740 --> 00:00:23.300
Really what we're talking about
today are tools and technologies

00:00:23.350 --> 00:00:27.100
that you as developers can use to
integrate with Final Cut Pro and

00:00:27.100 --> 00:00:31.410
build dramatically interesting video
and media processing pipelines.

00:00:31.930 --> 00:00:35.020
We're going to start with a
brief introduction to some

00:00:35.020 --> 00:00:37.240
industry standard data formats.

00:00:37.250 --> 00:00:39.490
Since this is Interchange,
this maybe gives some information

00:00:39.490 --> 00:00:40.800
to people that you may not know.

00:00:40.800 --> 00:00:44.450
Also talk about interchanging
data with Final Cut Pro and

00:00:44.540 --> 00:00:47.800
how you can actually integrate
applications very tightly with it.

00:00:47.820 --> 00:00:50.800
We also have some new tools for
tracking media files to talk about.

00:00:50.800 --> 00:00:53.550
And finally, we're going to try and wrap
it all together with a custom

00:00:53.550 --> 00:00:57.200
workflow application that uses
all of these capabilities.

00:00:58.510 --> 00:01:00.280
But before we begin,
talk about a little bit

00:01:00.310 --> 00:01:01.680
what's gone in the last year.

00:01:01.680 --> 00:01:05.890
NAB this year released
Final Cut Pro Studio,

00:01:06.050 --> 00:01:08.000
the first universal binary
version of the suite,

00:01:08.000 --> 00:01:09.180
including Final Cut Pro.

00:01:09.180 --> 00:01:12.320
And as of today,
there are more than half a million

00:01:12.350 --> 00:01:14.600
registered Final Cut Pro users.

00:01:14.600 --> 00:01:19.730
This is an incredibly huge audience
for your applications and your tools.

00:01:19.730 --> 00:01:22.680
Of course, this is only the registered
users of Final Cut Pro,

00:01:22.790 --> 00:01:25.750
not probably the double that
number is actually using it.

00:01:26.260 --> 00:01:28.460
And also in the past year,
Final Cut Pro has been involved

00:01:28.460 --> 00:01:29.700
in a lot of key world events.

00:01:29.700 --> 00:01:33.790
Both the Torino Winter Olympics and
2006 World Cup had dramatic

00:01:33.850 --> 00:01:37.750
broadcast presences,
really driven by Final Cut Pro combined

00:01:37.750 --> 00:01:42.170
with other compelling tools for
complete workflow solutions.

00:01:43.890 --> 00:01:46.780
We're also going to talk about some
new features in Final Cut Pro today.

00:01:46.780 --> 00:01:49.130
The engineering team,
a lot of time over the last year,

00:01:49.130 --> 00:01:51.580
responding to requests from
developers and looking at new

00:01:51.580 --> 00:01:52.900
ways to open up the software.

00:01:52.910 --> 00:01:55.240
We have an upgraded
XML Interchange Format.

00:01:55.410 --> 00:02:00.290
We have some new tools for
having external applications

00:02:00.310 --> 00:02:02.570
talk with Final Cut Pro.

00:02:02.780 --> 00:02:05.230
And for the first time,
we're introducing support for

00:02:05.230 --> 00:02:05.230
metadata in media files in
combination with the QuickTime team.

00:02:05.630 --> 00:02:09.740
But there's a catch with all of this,
as some of you might be able to guess.

00:02:09.740 --> 00:02:13.340
What we're going to be talking about
today in terms of new features are in

00:02:13.340 --> 00:02:15.380
an upcoming version of Final Cut Pro.

00:02:15.380 --> 00:02:17.780
So sadly, they're not in the version
of Final Cut Pro you can go

00:02:17.820 --> 00:02:19.040
and buy off the shelf today.

00:02:19.040 --> 00:02:22.490
WWDC is a unique opportunity
to talk to you all,

00:02:22.490 --> 00:02:27.700
and so we felt it very important to
give you this information despite the

00:02:27.700 --> 00:02:30.360
fact that it's not shipping today.

00:02:30.410 --> 00:02:32.120
But it will be shipping soon.

00:02:32.120 --> 00:02:32.120
I just can't talk about when today.

00:02:32.700 --> 00:04:00.600
[Transcript missing]

00:04:01.560 --> 00:04:05.160
Temporary formats came about
in probably the last 10 years,

00:04:05.190 --> 00:04:07.130
and really they came about
through complex things,

00:04:07.220 --> 00:04:10.520
multiple layers, more transitions,
more effects.

00:04:10.550 --> 00:04:12.450
But unfortunately again,
this is sort of owing to the

00:04:12.470 --> 00:04:14.690
time in which they were created,
they were built around

00:04:14.690 --> 00:04:17.570
binary container formats,
so essentially big blocks

00:04:17.570 --> 00:04:20.230
of arbitrary bytes,
which unfortunately means they're

00:04:20.270 --> 00:04:23.510
very complex to parse and generate,
you know you're not gonna pull up

00:04:23.570 --> 00:04:27.500
text edit and open one up or use VI,
so you're gonna need rather complex

00:04:27.500 --> 00:04:31.100
libraries and tools to open these
things up and do things with them.

00:04:31.210 --> 00:04:33.430
The two most common examples
you'll find out in the industry

00:04:33.440 --> 00:04:36.840
today will really be OMF and AAF,
and both of these formats

00:04:36.900 --> 00:04:40.380
really originated in efforts
from Avid back in the 90s.

00:04:40.400 --> 00:04:43.030
OMF was sort of their initial stab at it,
today it's really commonly

00:04:43.030 --> 00:04:46.020
used in the audio industry,
just because it's there and it works.

00:04:46.050 --> 00:04:50.060
AAF came about a couple years
ago as a successor to OMF to try

00:04:50.060 --> 00:04:51.540
and address some of the issues.

00:04:51.550 --> 00:04:53.690
Instead of being owned by one company,
it's run by the

00:04:53.690 --> 00:04:57.060
Advanced Authoring Foundation,
or Forum, excuse me,

00:04:57.100 --> 00:05:00.860
and really the attempt was for an
industry consortium to exchange data.

00:05:00.860 --> 00:05:03.140
Um...

00:05:04.440 --> 00:05:07.200
Now today we sort of have a
movement toward open data formats,

00:05:07.200 --> 00:05:09.300
and this is really where our hearts lie.

00:05:09.300 --> 00:05:12.470
In that,
legacy formats didn't do what we needed,

00:05:12.630 --> 00:05:14.680
and contemporary formats did more,
but they were really hard

00:05:14.770 --> 00:05:15.750
to parse and generate.

00:05:15.750 --> 00:05:20.920
And really that's just not cool,
because you really want everyone to

00:05:20.920 --> 00:05:25.910
have open access to all the data,
and really not need complex tools

00:05:25.910 --> 00:05:28.570
to parse and generate this stuff.

00:05:28.570 --> 00:05:30.280
And, you know, there are definitely tools
available to do that today.

00:05:31.020 --> 00:05:34.070
So when we looked at doing data
interchange with Final Cut Pro a

00:05:34.070 --> 00:05:37.060
number of years ago,
we started by talking to people.

00:05:37.060 --> 00:05:38.860
We started talking to
customers and developers.

00:05:38.860 --> 00:05:43.210
And really everyone said they
wanted common processing pipelines.

00:05:43.560 --> 00:05:45.020
Everyone wanted access to the data.

00:05:45.020 --> 00:05:49.230
Everyone wanted to talk to Final Cut Pro,
and everyone wanted to integrate or

00:05:49.240 --> 00:05:53.550
essentially exchange data between
Final Cut Pro and other applications.

00:05:55.100 --> 00:05:57.200
And we came away from all these
conversations with what we

00:05:57.310 --> 00:05:59.630
believe at the time was a very
different take on the problem,

00:05:59.630 --> 00:06:02.690
in that it's not simply interchange
between systems we're talking about,

00:06:02.870 --> 00:06:06.600
but it's also allowing power users
and developers to get at the data.

00:06:06.600 --> 00:06:09.410
So, you know,
you could think of building round-trip

00:06:09.410 --> 00:06:13.790
tools that do interesting modifications,
not simply shipping a project wholesale

00:06:13.790 --> 00:06:16.040
between one large system and another.

00:06:16.040 --> 00:06:19.080
And we really wanted to minimize
library and tool requirements

00:06:19.080 --> 00:06:20.180
with both OMF and AAF.

00:06:20.300 --> 00:06:23.040
We just saw so many people who were
bitten by the complexity of getting

00:06:23.040 --> 00:06:24.950
those formats parsed on multiple systems.

00:06:25.000 --> 00:06:27.050
And also,
we came back with another interesting

00:06:27.050 --> 00:06:30.580
problem of long-term project archival,
talking with people in the film industry,

00:06:30.580 --> 00:06:33.160
where, you know, certainly EDL from 20
years ago you could parse,

00:06:33.160 --> 00:06:35.030
but if you're going to
take an Avid project and an

00:06:35.030 --> 00:06:37.700
OMF file from the early 90s,
you better have a machine wrapped

00:06:37.860 --> 00:06:40.480
in shrink wrap in a closet if you
hope to open it up in 20 years.

00:06:42.770 --> 00:06:45.690
So where all this came back to
is the Final Cut Pro XML format.

00:06:45.700 --> 00:06:47.880
Introduced it back with Final Cut Pro 4.

00:06:47.880 --> 00:06:51.220
And we chose XML because, you know,
XML is clean.

00:06:51.220 --> 00:06:51.680
It's easy.

00:06:51.680 --> 00:06:53.240
There are a lot of tools
out there to use it.

00:06:53.390 --> 00:06:55.080
And if you need to,
you can go into TextEdit

00:06:55.100 --> 00:06:55.890
and play with it.

00:06:56.010 --> 00:06:58.710
And really,
we put the complete contents of

00:06:58.710 --> 00:07:00.440
a Final Cut Pro project in XML.

00:07:00.440 --> 00:07:02.640
Being XML, it's self-documenting.

00:07:02.640 --> 00:07:04.620
So certainly while we have
documentation developer side,

00:07:04.620 --> 00:07:06.940
if you pick it apart,
you're likely going to understand

00:07:06.940 --> 00:07:08.260
generally what all the constructs are.

00:07:08.700 --> 00:07:11.840
And really importantly is we
aren't putting any black data or

00:07:11.960 --> 00:07:14.120
essentially hidden data in the format.

00:07:14.120 --> 00:07:17.200
One of the challenges with both
OMF and AAF is it was open such that

00:07:17.380 --> 00:07:21.560
manufacturers could put hidden or just
basically arbitrary blocks of bytes in.

00:07:21.600 --> 00:07:25.020
So you take a project and you put a
really cool effect in it and you pull

00:07:25.020 --> 00:07:27.380
the AAF file out and you discover that,
oh, wow,

00:07:27.430 --> 00:07:30.120
I don't have the documentation to
pick apart that effect information.

00:07:30.120 --> 00:07:32.500
And that really frustrated
a lot of our users.

00:07:34.350 --> 00:07:36.940
Here's an example snippet
of Final Cut Pro XML.

00:07:37.170 --> 00:07:39.320
Again, it should be relatively easy.

00:07:39.320 --> 00:07:42.250
I have a clip, structure, name, duration,
time code.

00:07:42.250 --> 00:07:50.860
And this is something that really
a power user or developer wouldn't

00:07:50.860 --> 00:07:51.090
really have much of a problem
grokking or editing in a text editor

00:07:51.090 --> 00:07:51.090
and bringing back into the software.

00:07:52.780 --> 00:07:55.460
And really when it comes down to it,
we designed Final Cut Pro XML to

00:07:55.460 --> 00:07:58.390
be a superset because one of the
core uses of it was interchanging

00:07:58.390 --> 00:07:59.650
data with other systems.

00:07:59.660 --> 00:08:02.290
And we wanted to make sure that
everything that was Final Cut was

00:08:02.380 --> 00:08:05.060
available regardless of what
other system might be using.

00:08:05.080 --> 00:08:08.580
And in fact, today,
if you use one of those industry standard

00:08:08.580 --> 00:08:13.200
tools for doing AAF interchange or other
format interchange using Final Cut,

00:08:13.500 --> 00:08:15.820
there's a really good chance
it's going through XML.

00:08:15.820 --> 00:08:19.160
We found it actually to accelerate a
lot of our internal development greatly.

00:08:20.180 --> 00:08:22.860
And coming back to another need we saw
from the film industry and broadcast,

00:08:22.930 --> 00:08:24.040
it actually is archivable.

00:08:24.040 --> 00:08:25.060
Again, it's text.

00:08:25.060 --> 00:08:26.090
It's self-documenting.

00:08:26.100 --> 00:08:28.470
You know,
if you can read that CD in 20 years,

00:08:28.470 --> 00:08:31.620
there's a really high likelihood
there'll either be an XML tool there or

00:08:31.620 --> 00:08:33.080
you can write one up to pull it apart.

00:08:37.010 --> 00:08:37.960
Now, who's using this today?

00:08:37.960 --> 00:08:40.170
Well, a lot of people are using it today.

00:08:40.180 --> 00:08:42.650
Both Automatic Duck and
Gallery Systems have really

00:08:42.680 --> 00:08:44.600
compelling data interchange tools.

00:08:44.600 --> 00:08:49.070
Building for Media, a European company,
has a complete broadcast server

00:08:49.250 --> 00:08:52.860
built using Max and Final Cut Pro,
all tied together using XML.

00:08:52.860 --> 00:08:55.530
Silicon Color,
who's actually down in our Apple in

00:08:55.530 --> 00:08:58.280
the Studio booth downstairs,
they have a full color

00:08:58.280 --> 00:09:00.950
correction solution,
which actually does full diffing

00:09:00.950 --> 00:09:03.550
round trip with Final Cut,
such that you can make changes in

00:09:03.550 --> 00:09:07.130
Final Cut and Silicon Color will notice
those changes and update accordingly.

00:09:07.160 --> 00:09:11.690
And finally, just in the last few months,
Sony has enabled support for

00:09:11.690 --> 00:09:15.550
their new XD Cam HD cameras with
Final Cut using Final Cut Pro XML.

00:09:15.600 --> 00:09:20.040
They built a really interesting media
transfer application for the Mac,

00:09:20.040 --> 00:09:23.780
the Sony building software for the Mac,
which communicates with Final Cut using

00:09:23.780 --> 00:09:26.270
XML and has been incredibly
well received by our users.

00:09:28.850 --> 00:09:31.700
Now version 1 was supported
in Final Cut Pro 4.1.

00:09:31.700 --> 00:09:36.040
Version 5 came along in, excuse me,
version 2 of XML came along in

00:09:36.040 --> 00:09:40.070
Final Cut Pro 5.0 and it's support
for constructs like multi-clips,

00:09:40.070 --> 00:09:40.440
etc.

00:09:40.440 --> 00:09:42.970
And we have version 3.

00:09:43.000 --> 00:09:46.110
And with that,
I will invite Helena Ju on the stage

00:09:46.180 --> 00:09:48.580
to tell you about the new features.

00:09:59.860 --> 00:10:00.290
Thanks, Dave.

00:10:00.400 --> 00:10:02.170
Good morning, everyone.

00:10:02.260 --> 00:10:03.160
I'm Helena Ju.

00:10:03.160 --> 00:10:07.300
I'm a senior engineer on the
Final Cut Pro engineering team.

00:10:07.300 --> 00:10:11.510
So basically,
when we do development in the XML format,

00:10:11.550 --> 00:10:13.480
we work in three areas.

00:10:13.500 --> 00:10:15.760
We track new features and technology,
like Dave was talking

00:10:15.760 --> 00:10:16.970
about the multi-clip stuff.

00:10:16.980 --> 00:10:20.120
We address known bugs,
and we improve integration

00:10:20.710 --> 00:10:22.540
based on developer feedback.

00:10:22.540 --> 00:10:27.140
I'm hearing from a lot of people that
they want to have better integration,

00:10:27.140 --> 00:10:29.470
that certain things are not in the XML,
things like that.

00:10:31.290 --> 00:10:34.380
So this last piece is the
part that we're focusing on

00:10:34.440 --> 00:10:37.620
today at developer conference,
it's not surprising.

00:10:37.620 --> 00:10:43.550
And the ones we've added are the
ability to update existing projects.

00:10:43.770 --> 00:10:48.470
So previously you had additive abilities,
and now you can actually

00:10:48.470 --> 00:10:54.330
modify existing data,
and this is project level and the media

00:10:54.470 --> 00:10:58.230
file level for a metadata support.

00:10:58.240 --> 00:11:00.680
Also,
we've now added support for communicating

00:11:00.680 --> 00:11:03.320
with Final Cut using Apple Events.

00:11:08.550 --> 00:11:13.480
The ability to modify and update
existing projects is good because it

00:11:13.480 --> 00:11:16.240
enables better integrated workflows.

00:11:16.530 --> 00:11:20.660
So tools can take an existing
version of a project.

00:11:20.680 --> 00:11:24.050
You can send out things, say,
to your color department, whatever,

00:11:24.050 --> 00:11:27.160
and have it come back and change
rather than having to add another

00:11:27.160 --> 00:11:30.940
version of the sequence or even whole
bins and versions of the project.

00:11:30.940 --> 00:11:33.130
In addition,
it allows for more widespread

00:11:33.210 --> 00:11:36.330
use of XML fragments,
so you can just replace the items

00:11:36.330 --> 00:11:40.490
you want to replace and not have
to redefine your whole project.

00:11:41.450 --> 00:11:43.540
Here is an example of
how it can be useful.

00:11:43.540 --> 00:11:45.360
This is a very simple project.

00:11:45.430 --> 00:11:47.390
You have one clip, one sequence.

00:11:47.390 --> 00:11:51.430
If you want to replace that clip,
previously you would do an XML snippet

00:11:51.430 --> 00:11:55.010
that brings in that one clip,
and you get one more clip.

00:11:55.080 --> 00:11:57.050
I've highlighted that clip
in red just to show you,

00:11:57.050 --> 00:11:59.710
but typically it would just be
exactly the same because you wouldn't

00:11:59.710 --> 00:12:01.250
typically change the label color.

00:12:01.760 --> 00:12:04.140
If you were to do it, say, 10 times,
you just get a whole bunch of

00:12:04.190 --> 00:12:07.080
different versions of that clip,
and which one is which,

00:12:07.160 --> 00:12:10.690
or which one's the original and which
one's the one that's the new one,

00:12:10.840 --> 00:12:11.530
you wouldn't know.

00:12:11.540 --> 00:12:14.420
Here, I've highlighted in red again,
but you wouldn't know which one was

00:12:14.420 --> 00:12:17.640
the newest version unless you took the
extra steps to go back and delete them.

00:12:17.640 --> 00:12:20.880
Also,
it's not updating the existing item.

00:12:20.880 --> 00:12:23.570
It's instead just adding new ones.

00:12:24.860 --> 00:12:26.460
So the new way,
the new way we're going to show you

00:12:26.460 --> 00:12:30.350
how to do today is you have your
existing project and you import the XML,

00:12:30.350 --> 00:12:32.040
and now you can replace it.

00:12:32.040 --> 00:12:37.980
And this is an optional thing.

00:12:37.980 --> 00:12:37.980
So you can still have the old way,
but in addition now,

00:12:37.980 --> 00:12:37.980
you can eat your cake too.

00:12:38.320 --> 00:12:39.430
So how are we doing this?

00:12:39.560 --> 00:12:44.370
We've added two new XML keys,
and these are available on Clips,

00:12:44.580 --> 00:12:48.630
Sequences, and Bins,
UUID and Update Behavior.

00:12:49.530 --> 00:12:52.520
Here's a sample snippet so you
can see kind of what it looks like

00:12:52.520 --> 00:12:54.200
within the context of the XML.

00:12:54.250 --> 00:12:57.120
In XML version 3,
we're now outputting the UUID as

00:12:57.120 --> 00:12:59.000
well as the update behavior.

00:12:59.000 --> 00:13:05.200
And the rest of it is exactly the same
as the sample Dave showed you before,

00:13:05.200 --> 00:13:07.960
except that this is a sequence.

00:13:08.040 --> 00:13:13.500
So we've got a sequence with name,
duration, rate, time code,

00:13:13.500 --> 00:13:13.590
all the usual things.

00:13:13.590 --> 00:13:13.590
And we've added a
UUID and update behavior.

00:13:14.540 --> 00:13:21.310
So UUID uniquely identifies
the object across projects or

00:13:21.310 --> 00:13:22.820
across XML import and export.

00:13:22.820 --> 00:13:26.940
This means that you can have two
projects with the same object in them,

00:13:26.940 --> 00:13:28.000
so therefore the same UUID.

00:13:28.000 --> 00:13:31.100
Like if you copy a clip from
one project into another

00:13:31.190 --> 00:13:35.980
project and you paste it there,
obviously you want that UUID to persist.

00:13:35.980 --> 00:13:38.860
So that UUID will be in both projects.

00:13:39.340 --> 00:13:42.870
If you then reconnect that media, say,
in the first project to a

00:13:42.870 --> 00:13:45.590
different piece of media,
then now you have the same object

00:13:45.590 --> 00:13:47.020
but two different versions.

00:13:47.220 --> 00:13:52.260
So that's important to note that
users can get themselves out of sync,

00:13:52.350 --> 00:13:56.670
and you need to be aware of that
when you're working with these items.

00:13:56.900 --> 00:13:59.140
The same is true, of course,
with XML import and export.

00:13:59.140 --> 00:14:00.610
You can export your project.

00:14:00.750 --> 00:14:03.310
Everything has its UUIDs, like one, two,
three, four, five.

00:14:03.500 --> 00:14:06.280
And then you modify
things and you re-import.

00:14:06.280 --> 00:14:09.620
You can replace those things.

00:14:09.670 --> 00:14:12.210
Or you can put it into another project,
for example, and they will have

00:14:12.210 --> 00:14:13.630
exactly the same UUIDs,
because you want to be able to

00:14:13.630 --> 00:14:17.280
track those things across projects.

00:14:17.430 --> 00:14:18.800
Of course, they persist over time.

00:14:18.800 --> 00:14:21.940
So if you save out your
project and you open it up on

00:14:21.940 --> 00:14:24.700
another machine or something,
the UUID is the same.

00:14:26.350 --> 00:14:29.200
UUIDs live, as I said before,
on Clip Sequence and MINS.

00:14:29.200 --> 00:14:32.900
They are generated using
the CFUUID API in Final Cut,

00:14:32.900 --> 00:14:36.170
and we strongly recommend
that people use that,

00:14:36.300 --> 00:14:41.800
but you can use any method that
generates a WC3 standard compliant UUID.

00:14:41.800 --> 00:14:43.980
There's an example right there.

00:14:43.980 --> 00:14:46.390
And...

00:14:46.900 --> 00:14:49.760
This is different than the
pre-existing key we have in the XML,

00:14:49.760 --> 00:14:51.900
which is actually an attribute, sorry.

00:14:51.900 --> 00:14:54.080
So like on a clip,
you can have the attribute for an ID.

00:14:54.080 --> 00:14:57.770
So the ID in this case,
an example is foo, and this is actually

00:14:57.770 --> 00:14:59.520
only unique per XML file.

00:14:59.520 --> 00:15:03.610
If you were to export the same clip
in a project that's been modified,

00:15:03.980 --> 00:15:07.790
potentially, it will now be called
foo1 or foo16 or whatever,

00:15:07.920 --> 00:15:10.330
because it's only
unique per the XML file,

00:15:10.330 --> 00:15:14.490
and it's a reference per that XML file
and not persistent across long,

00:15:14.490 --> 00:15:16.200
anything like that.

00:15:16.230 --> 00:15:19.750
whereas the UID is persistent and unique.

00:15:21.310 --> 00:15:24.650
So now we have a way of targeting
specific things with the UUID.

00:15:24.820 --> 00:15:26.980
Then we want to be able to
say what we want to do with

00:15:26.980 --> 00:15:27.960
this item that we've targeted.

00:15:27.960 --> 00:15:32.300
We can do this with a new
key called Update Behavior.

00:15:32.300 --> 00:15:35.590
And let's see.

00:15:37.360 --> 00:15:42.700
It allows you to modify
and open project items.

00:15:42.700 --> 00:15:44.560
That's the end of that sentence.

00:15:44.650 --> 00:15:47.880
So the different processes that
we allow you to do with the update

00:15:47.880 --> 00:15:51.760
behavior are replace if found,
replace or add, add if not found,

00:15:51.760 --> 00:15:52.810
add or remove.

00:15:52.820 --> 00:15:56.700
And you'll notice there's different
flavors of replace and add.

00:15:56.700 --> 00:16:02.360
And the reason is because we take context
into account of the existing project.

00:16:02.390 --> 00:16:04.510
So it is important to note,
since we're taking the

00:16:04.510 --> 00:16:06.730
context into account,
that the XML importer will do

00:16:06.730 --> 00:16:11.070
its best job to maintain the
existing master clip relationships.

00:16:11.290 --> 00:16:13.830
But we can only do so much.

00:16:13.870 --> 00:16:16.300
So you should specify exactly
what you want if you know.

00:16:16.520 --> 00:16:23.160
That's the way to ensure that those are
persistent the way you want them to be.

00:16:23.200 --> 00:16:26.520
So here is a table which indicates
what the different cases are.

00:16:26.520 --> 00:16:29.430
But rather than reading this to you,
which you can do in your own time,

00:16:29.460 --> 00:16:31.400
I'm going to show you some examples.

00:16:32.100 --> 00:16:33.120
So replace if found.

00:16:33.120 --> 00:16:38.240
If you have the original present,
we replace it if it's found.

00:16:38.270 --> 00:16:41.510
If you don't have the original present,
we don't replace it

00:16:41.600 --> 00:16:43.640
because it's not found.

00:16:44.180 --> 00:16:49.550
Replace or add replaces it if it's found,
and if it's not present, we add the item,

00:16:49.550 --> 00:16:53.600
which is handy if you want to always make
sure it's there in the current state.

00:16:53.610 --> 00:16:57.030
Then add if not found adds it.

00:16:57.050 --> 00:16:59.690
If it's not found,
here it was already there.

00:16:59.690 --> 00:17:03.020
So if you only want to make sure
there's one copy of the item,

00:17:03.020 --> 00:17:04.620
you would do this version.

00:17:04.620 --> 00:17:07.390
And then if it's not present,
then we add it.

00:17:08.160 --> 00:17:09.890
An add just adds.

00:17:10.140 --> 00:17:14.060
So if there's already an existing
item with the same UID-- in this case,

00:17:14.060 --> 00:17:17.420
there is-- then we're going to
change the UID of that new one,

00:17:17.420 --> 00:17:19.880
the red one here, so that we can add it.

00:17:19.980 --> 00:17:21.140
So that's what you're saying.

00:17:21.160 --> 00:17:24.970
You're overriding the UID if
necessary to add this thing.

00:17:24.980 --> 00:17:29.280
And of course, if it's not present,
we keep the same UID and we just add it.

00:17:29.950 --> 00:17:32.500
Removes the existing
item from the project.

00:17:32.500 --> 00:17:35.960
I thought this was the last
piece you need to be able to do

00:17:35.960 --> 00:17:39.540
all the operations you'd want to
integrate fully with Final Cut.

00:17:39.710 --> 00:17:41.180
So if it's present, it removes it.

00:17:41.200 --> 00:17:45.130
If it's not present,
it doesn't do anything.

00:17:46.050 --> 00:17:51.010
Ah, so now I'm going to show you a
demo replacing-- this is just

00:17:51.270 --> 00:17:55.490
an XML demo with Final Cut Pro.

00:17:55.490 --> 00:18:01.550
Can we switch to the demo machine,
please?

00:18:06.510 --> 00:18:10.570
So here I've got a simple project
with a monkey in the sequence,

00:18:10.570 --> 00:18:13.820
and we'll just export
the sequence as XML.

00:18:24.030 --> 00:18:28.620
And then let's go look
at that XML in BBEdit.

00:18:28.660 --> 00:18:33.310
So I have a different version
of the exact same clip over

00:18:33.390 --> 00:18:36.440
here in this other XML file,
Scratch.xml.

00:18:36.470 --> 00:18:39.960
And so I'll take the UUID from
my uncle is a monkey,

00:18:39.980 --> 00:18:41.590
copy it.

00:18:42.060 --> 00:18:44.700
And paste it here.

00:18:44.750 --> 00:18:47.370
So I'm going to use Scratch,
and I want to do a replace.

00:18:47.430 --> 00:18:51.000
So we'll just change
this to replace if found.

00:18:51.000 --> 00:18:53.390
And this would be an example
of something maybe if you gave

00:18:53.390 --> 00:18:56.220
it to a different department to
make some changes to the artwork,

00:18:56.220 --> 00:18:59.480
and then you brought it,
you got an XML back, then you would just

00:18:59.480 --> 00:19:00.700
do a replace if found.

00:19:00.700 --> 00:19:04.260
And it's literally just
an export of the XML.

00:19:04.510 --> 00:19:08.360
So we'll just import XML.

00:19:08.660 --> 00:19:12.160
Oh, the version I exported,
I didn't color the sequence,

00:19:12.250 --> 00:19:15.970
so you'll see the sequence color
change from red to not red.

00:19:15.980 --> 00:19:19.790
So, put this XML.

00:19:23.770 --> 00:19:27.450
Okay, let me, sorry,
we have multiple demos on this machine,

00:19:27.450 --> 00:19:30.040
so let me just revert and do that again.

00:19:38.650 --> 00:19:41.860
So it's important to set the
sequence settings you're importing

00:19:41.860 --> 00:19:46.540
the XML as to the same as your
target sequence or project.

00:19:46.540 --> 00:19:51.120
And one can override these settings in
the XML itself using the import options.

00:19:51.130 --> 00:19:53.740
But here,
since I just did a straight XML export,

00:19:53.740 --> 00:19:58.980
we don't output those so that the user
can specify the settings they want.

00:19:58.980 --> 00:20:01.700
So here's the latest version,
and you see that the monkey's

00:20:01.700 --> 00:20:03.680
now scratching his head.

00:20:04.050 --> 00:20:06.260
Okay, back to the slides.

00:20:06.370 --> 00:20:09.000
So the reason he's scratching
his head is because he's a little

00:20:09.000 --> 00:20:13.480
confused about how the XML works,
but of course you all know.

00:20:13.620 --> 00:20:16.220
Can we go back to the slides, please?

00:20:21.550 --> 00:20:23.040
You all know that it's very simple.

00:20:23.040 --> 00:20:25.470
There's just the UUID and
the update behavior,

00:20:25.470 --> 00:20:27.400
which allows us to do this.

00:20:27.650 --> 00:20:30.120
There's still further work to be done.

00:20:30.120 --> 00:20:32.240
The specification, for example,
as it is today,

00:20:32.260 --> 00:20:34.080
does not deal well with containers.

00:20:34.140 --> 00:20:37.710
So if you have a bin and then
subsequent items within the bin,

00:20:37.820 --> 00:20:41.060
since you only have add, remove, replace,
you don't have any way of, say,

00:20:41.060 --> 00:20:42.340
merging the existing contents.

00:20:42.540 --> 00:20:44.700
So further details can be
found in the documentation,

00:20:44.740 --> 00:20:49.530
which will come out at the same time
as the future release of Final Cut.

00:20:50.020 --> 00:20:57.320
In addition, we're talking about
Apple Event Support today in Final Cut.

00:20:57.320 --> 00:20:57.320
And this is exciting because

00:20:57.610 --> 00:21:00.400
Not only are we doing the
basic Apple events of open,

00:21:00.400 --> 00:21:04.110
close, and all those common to
the Finder community,

00:21:04.110 --> 00:21:07.580
but in addition now we're also supporting
inner application communication.

00:21:07.580 --> 00:21:13.630
So you can open your existing projects,
you can close existing projects,

00:21:13.630 --> 00:21:17.240
which is good, but then you can also
retrieve and send XML data.

00:21:17.240 --> 00:21:21.540
You can select or open items because
you can specify them by UUID,

00:21:21.740 --> 00:21:26.220
and you can also invoke Final Cut Pro's
built-in find mechanism.

00:21:26.490 --> 00:21:28.600
I think that last one is--

00:21:28.640 --> 00:21:30.220
Very exciting,
and people can do some very

00:21:30.300 --> 00:21:31.680
interesting things with that.

00:21:31.680 --> 00:21:34.730
Please note, however,
this is Apple event support,

00:21:34.740 --> 00:21:35.880
not Apple script.

00:21:35.950 --> 00:21:39.860
We're not talking about a language
that we're defining today.

00:21:40.720 --> 00:21:47.100
So here's just a really quick
look how easy it is kind of thing.

00:21:47.100 --> 00:21:49.560
All this code is basically set up.

00:21:49.560 --> 00:21:55.250
And the important thing here is that
the OS type for Final Cut is key G.

00:21:55.280 --> 00:22:00.370
And then you send the event,
which in this case is get XML, KGAE,

00:22:00.640 --> 00:22:04.320
get document XML.

00:22:04.320 --> 00:22:06.640
And then you send that command.

00:22:07.030 --> 00:22:08.900
And then that's it.

00:22:08.930 --> 00:22:10.550
And that also had the return value in it.

00:22:10.730 --> 00:22:14.230
So then to retrieve the XML from it,
you would just pull out the

00:22:14.230 --> 00:22:16.110
buffer and all these things.

00:22:16.130 --> 00:22:19.640
And then with the sample code,
you would do the interesting

00:22:19.640 --> 00:22:21.740
thing with your XML right there.

00:22:21.980 --> 00:22:26.300
I'm looking forward to seeing
what people are going to do there.

00:22:26.300 --> 00:22:30.160
So the different events that
we're supporting are open,

00:22:30.160 --> 00:22:32.330
close, get XML, import XML.

00:22:32.500 --> 00:22:35.660
And you can use these in combination.

00:22:35.660 --> 00:22:42.270
So you can, for example, open a project,
get the XML from that project,

00:22:42.350 --> 00:22:45.330
and close it, things like that.

00:22:45.330 --> 00:22:46.150
You can also select a specific item and
open that item up in the viewer or--

00:22:46.830 --> 00:22:50.340
Canvas, and also find items.

00:22:50.340 --> 00:22:53.420
And this doesn't return you
the values of those keys.

00:22:53.420 --> 00:22:56.290
Instead, it does the--

00:22:56.340 --> 00:23:00.750
The Find Operation in Final Cut,
which will go find all the items with,

00:23:00.750 --> 00:23:07.430
say, the name foo or the comment one,
which is the director likes this

00:23:07.430 --> 00:23:07.430
shot or something like that.

00:23:08.330 --> 00:23:11.520
So these changes that I've
talked about today-- the UUID,

00:23:11.520 --> 00:23:13.630
the update behavior,
and the ability to make these

00:23:13.630 --> 00:23:15.170
interactive changes with them.

00:23:15.190 --> 00:23:17.720
And the Apple Events allows you
to do a lot of powerful things.

00:23:17.720 --> 00:23:19.430
You can modify existing projects.

00:23:19.580 --> 00:23:22.680
You can do so seamlessly to the user,
because now you have the

00:23:22.680 --> 00:23:24.390
Apple Event support to back you up.

00:23:24.490 --> 00:23:28.060
And so I think that you can
do very interesting things.

00:23:28.060 --> 00:23:30.970
The sample code and documentation,
of course, will be provided with the

00:23:30.970 --> 00:23:33.240
next version of Final Cut,
and it will be on

00:23:33.290 --> 00:23:36.430
developer.apple.com/appleapplications.

00:23:36.570 --> 00:23:39.960
And Dave will be demoing
some more of this integration

00:23:39.960 --> 00:23:41.660
later on in the presentation.

00:23:41.660 --> 00:23:46.490
I can't wait to see the cool stuff
you guys are going to do with this.

00:23:46.520 --> 00:23:48.100
Thank you.

00:23:53.300 --> 00:23:55.420
Thank you, Helena.

00:23:55.610 --> 00:23:59.260
So, next thing I want to talk about
today is metadata support.

00:23:59.260 --> 00:24:01.820
And this is something brand
new we're introducing soon.

00:24:01.820 --> 00:24:05.520
And it's something that really we
found to be interesting and really

00:24:05.520 --> 00:24:07.400
powerful and hope you will too.

00:24:07.400 --> 00:24:11.050
But just to make sure we're all
speaking the same vocabulary,

00:24:11.050 --> 00:24:15.520
we'll just start off and talk about
for a minute what really metadata is.

00:24:15.520 --> 00:24:18.900
And sort of the most generic definition
I could come up with is that it's

00:24:18.900 --> 00:24:22.760
an arbitrary collection of ancillary
data attached to a primary data set.

00:24:23.420 --> 00:24:26.100
And so it's sort of secondary data
that while it might not be central

00:24:26.100 --> 00:24:29.800
to the functioning of an application,
it really makes it useful.

00:24:29.890 --> 00:24:32.710
It's also something that, you know,
traditionally you can edit without

00:24:32.720 --> 00:24:35.720
modifying that core data set or
even updating the application

00:24:35.720 --> 00:24:37.300
that uses that core data set.

00:24:37.300 --> 00:24:41.410
And another interesting note, really,
is that whether or not a particular

00:24:41.510 --> 00:24:45.320
piece of data is considered metadata
or maybe the central or core data of

00:24:45.320 --> 00:24:50.700
an application may be really dependent
on what application is using it.

00:24:51.280 --> 00:24:54.380
And sort of an example of here
is think about a QuickTime file

00:24:54.380 --> 00:24:57.790
and think about two applications
that use QuickTime files,

00:24:57.820 --> 00:24:59.300
Finder and QuickTime.

00:24:59.300 --> 00:25:02.860
When QuickTime looks at a movie file,
it's very concerned with

00:25:02.860 --> 00:25:06.270
things like image size,
codec, frame rate, sample rate,

00:25:06.270 --> 00:25:07.160
et cetera.

00:25:07.160 --> 00:25:10.880
When Finder's managing a QuickTime file,
it cares about things like the

00:25:10.880 --> 00:25:12.710
size and the label and the name.

00:25:14.240 --> 00:25:17.730
But in the context of Finder,
Finder may actually be able to

00:25:17.730 --> 00:25:20.640
sniff the QuickTime file and see
the image size and the image codec,

00:25:20.640 --> 00:25:23.630
but to it, it's really sort of
secondary ancillary data.

00:25:23.640 --> 00:25:26.120
It's things that might be
interesting to view in the Finder.

00:25:26.120 --> 00:25:27.860
It might make it easier
to find your file,

00:25:27.970 --> 00:25:29.720
but it's not central to what Finder does.

00:25:29.720 --> 00:25:33.010
Similarly, in a way,
the actual size or the label of the

00:25:33.010 --> 00:25:36.950
file could be considered metadata
by QuickTime player as well.

00:25:38.130 --> 00:25:40.910
The really common example
I'm sure everyone here is

00:25:40.910 --> 00:25:44.760
familiar with would be ID3 tags,
essentially album, artwork,

00:25:44.760 --> 00:25:47.350
author information in your music files.

00:25:47.350 --> 00:25:50.570
But while they're there,
you really don't have to have an ID3

00:25:50.570 --> 00:25:54.350
tag in an AAC file or an MP3 file to
be able to play that content back.

00:25:54.350 --> 00:25:57.270
But simply by having that data,
that MP3 or AAC file is

00:25:57.320 --> 00:25:58.630
a lot more useful to you.

00:25:58.850 --> 00:26:02.510
You can pull it up on iTunes or on your
iPod and actually find out what that

00:26:02.640 --> 00:26:06.580
file is without having to sit there
and listen to it for a few minutes.

00:26:07.240 --> 00:26:08.040
And it's editable.

00:26:08.040 --> 00:26:11.320
You get an MP3 file with a bad tag in it,
you can edit that data.

00:26:11.320 --> 00:26:13.650
And also the standard's
grown out of time.

00:26:13.660 --> 00:26:16.420
I think version 1 of the
ID3 tag only had text.

00:26:16.420 --> 00:26:20.190
I think it was version 1.2 or
2.0 where they actually added

00:26:20.280 --> 00:26:22.080
support for album artwork.

00:26:24.980 --> 00:26:29.010
The metadata support for QuickTime came
about a year or two ago in QuickTime 7,

00:26:29.010 --> 00:26:31.640
and sort of initial stab by
the QuickTime team at this.

00:26:31.640 --> 00:26:33.940
And really,
it came down to having containers

00:26:34.320 --> 00:26:36.380
on movie track and media levels.

00:26:36.380 --> 00:26:38.130
Each container has a key space.

00:26:38.280 --> 00:26:40.840
That key space identifies values within.

00:26:40.840 --> 00:26:43.300
And then, of course,
each container has a number of

00:26:43.300 --> 00:26:44.910
values indexed by those keys.

00:26:44.920 --> 00:26:48.740
It's interesting to note that this isn't
simply a singular key value pairing.

00:26:48.760 --> 00:26:50.730
It's sort of more of a key index, right?

00:26:50.730 --> 00:26:54.400
You have a key and you have a number
of values associated with that key.

00:26:54.900 --> 00:26:57.280
In a way, it's similar to user data,
if any of you have used those

00:26:57.280 --> 00:27:00.600
constructs in QuickTime before.

00:27:00.600 --> 00:27:03.950
One interesting note is this means
if you're actually going to replace

00:27:03.950 --> 00:27:06.420
a value in a QuickTime file,
you can't simply do an add

00:27:06.470 --> 00:27:08.330
and expect to write over it,
like Helena was

00:27:08.330 --> 00:27:11.120
demonstrating with the XML,
but you actually need to go in and

00:27:11.120 --> 00:27:12.660
find the old item and remove it.

00:27:12.660 --> 00:27:14.820
Now, QuickTime supports a
number of key spaces,

00:27:14.820 --> 00:27:17.950
but they've actually defined
one very useful one as standard,

00:27:18.020 --> 00:27:20.660
which essentially is reverse DNS strings.

00:27:20.830 --> 00:27:23.130
Now,
anyone who's built a plist or built a

00:27:23.130 --> 00:27:24.900
UTI identifier is very familiar with it.

00:27:24.900 --> 00:27:28.300
So, if you're using a key space,
you can label what your values are

00:27:28.300 --> 00:27:30.870
by your company and your application.

00:27:30.890 --> 00:27:32.270
And this is actually a
really great key space,

00:27:32.270 --> 00:27:35.740
because it just means we're all
not stepping on each other's toes.

00:27:36.880 --> 00:27:39.740
Now, also interesting to note
that for QuickTime files,

00:27:39.740 --> 00:27:42.120
the metadata is stored
in the movie resource.

00:27:42.230 --> 00:27:46.140
QuickTime file itself has a sample data,
has a header, a sample table,

00:27:46.140 --> 00:27:47.660
and then a resource at the end.

00:27:47.660 --> 00:27:50.560
And the metadata is just
stored in that movie resource.

00:27:50.560 --> 00:27:52.870
Hence,
whenever you open that QuickTime file,

00:27:52.970 --> 00:27:55.240
all that metadata is
going to be read into RAM.

00:27:55.240 --> 00:27:57.530
It's actually good from a
performance perspective because

00:27:57.530 --> 00:28:00.210
doing a query is not going to give
you a huge performance penalty.

00:28:00.210 --> 00:28:03.190
It's not so lovely if you're
thinking about putting,

00:28:03.190 --> 00:28:06.720
you know, six megabytes of metadata
in your QuickTime file.

00:28:06.800 --> 00:28:09.500
Granted,
just about everyone we've talked to,

00:28:09.500 --> 00:28:12.960
all these cases we've been looking
at for the time being aren't using

00:28:13.330 --> 00:28:16.220
dramatic amounts of metadata,
so it's not a huge issue.

00:28:16.220 --> 00:28:17.470
It's just something to be aware of.

00:28:17.470 --> 00:28:21.840
Also important to note that reference
movies will carry this stuff as well,

00:28:21.980 --> 00:28:26.070
and you'll actually be carrying a
unique copy in your reference movie.

00:28:26.930 --> 00:28:28.220
So how do you get at metadata?

00:28:28.360 --> 00:28:29.620
Well, it's pretty simple.

00:28:29.730 --> 00:28:32.360
You get a metadata
container out of QuickTime.

00:28:32.580 --> 00:28:34.680
You iterate using the
get next item command.

00:28:34.680 --> 00:28:36.940
You can basically specify a key if you
don't want to iterate through everything.

00:28:36.940 --> 00:28:40.760
And then you use the value or
property APIs to get information back.

00:28:40.880 --> 00:28:44.710
Traditionally,
once you have a metadata item,

00:28:44.760 --> 00:28:49.220
you'll query the type to
make sure it's what you want.

00:28:49.220 --> 00:28:49.810
You'll get the size.

00:28:49.810 --> 00:28:49.810
You can allocate a buffer,
and then you'll actually get the value.

00:28:50.990 --> 00:28:52.620
If you want to add a key,
it's pretty similar.

00:28:52.740 --> 00:28:55.310
You get a container,
and then you call add item.

00:28:55.310 --> 00:28:58.160
You want to remove item, again,
get a container and use

00:28:58.250 --> 00:28:59.600
the remove item APIs.

00:29:01.160 --> 00:29:02.920
Now, going to Final Cut Pro for a second.

00:29:02.920 --> 00:29:06.100
In Final Cut, we really built off of
QuickTime support for metadata.

00:29:06.100 --> 00:29:09.320
So what we're supporting is metadata,
arbitrary metadata,

00:29:09.320 --> 00:29:11.100
on the movie and track levels.

00:29:11.100 --> 00:29:14.090
We're only supporting metadata
with a reverse DNS namespace.

00:29:14.090 --> 00:29:16.260
Again,
this is what appeared to be most useful

00:29:16.260 --> 00:29:18.140
to us and everyone we've talked to.

00:29:18.140 --> 00:29:21.630
And we're using the defined type
primitives that QuickTime supports.

00:29:21.630 --> 00:29:23.670
They have things like
strings and numbers,

00:29:23.820 --> 00:29:25.340
blocks of binary data, etc.

00:29:26.560 --> 00:29:28.880
Certainly,
we would encourage you to use the

00:29:28.960 --> 00:29:31.990
more readable types in terms of things
like strings and numbers for reasons

00:29:32.160 --> 00:29:33.350
I'll get into in just a moment.

00:29:35.520 --> 00:29:38.410
Now, it's also important to note
that when Final Cut Pro notices

00:29:38.410 --> 00:29:40.800
metadata in a QuickTime file,
it's actually going

00:29:40.800 --> 00:29:41.850
to cache a copy of it.

00:29:41.850 --> 00:29:44.410
So in Final Cut,
whenever you add a movie to a project,

00:29:44.410 --> 00:29:46.870
we create a file record,
and that file record has all

00:29:46.870 --> 00:29:49.940
sorts of interesting data on it,
like the time code, et cetera.

00:29:49.980 --> 00:29:53.170
And we'll basically snapshot the
current metadata state of that file

00:29:53.300 --> 00:29:55.290
and store it in that file record.

00:29:55.760 --> 00:29:58.290
Now, what's nice about this is
if your file goes away,

00:29:58.290 --> 00:29:59.880
your metadata hasn't gone away.

00:29:59.880 --> 00:30:02.680
It's there safely cached in
the project for future use.

00:30:02.680 --> 00:30:06.000
But it's also important to know that
this is a cached copy of the metadata.

00:30:06.000 --> 00:30:09.110
So essentially, sort of the term we use
is file always wins,

00:30:09.140 --> 00:30:12.030
such that if I bring a file
into a project with metadata,

00:30:12.110 --> 00:30:13.770
it creates a saved copy of it.

00:30:13.900 --> 00:30:14.140
Cool.

00:30:14.140 --> 00:30:15.280
I save and close the project.

00:30:15.280 --> 00:30:17.980
I then go and modify the
metadata in that file.

00:30:17.980 --> 00:30:21.000
The next time I open up that
project and reconnect to that file,

00:30:21.000 --> 00:30:23.940
whatever new metadata state is in
that file is going to be put in

00:30:24.080 --> 00:30:25.620
the project over the next time.

00:30:25.760 --> 00:30:27.680
old cash state.

00:30:29.260 --> 00:30:31.630
Now, I mentioned a moment ago that
it's really good to use nice,

00:30:31.630 --> 00:30:34.340
clean types like strings
and numbers for metadata.

00:30:34.490 --> 00:30:37.860
And really, that comes down to the fact
that we also export metadata

00:30:37.960 --> 00:30:39.390
through the XML interface.

00:30:39.540 --> 00:30:42.280
So you bring a file into
Final Cut with metadata,

00:30:42.280 --> 00:30:45.460
and you send out XML,
you'll see new metadata tags in that

00:30:45.500 --> 00:30:47.760
XML listing all of those elements.

00:30:47.820 --> 00:30:50.960
Certainly, everything we support,
we will emit through XML.

00:30:50.960 --> 00:30:53.360
But if there are things
like strings and numbers,

00:30:53.360 --> 00:30:56.220
then your users and your tools
can actually read it via XML,

00:30:56.220 --> 00:30:57.530
which is very handy.

00:30:58.080 --> 00:31:02.140
We also have a couple commands similar in
fashion to the update behavior commands

00:31:02.140 --> 00:31:05.750
that Helena was discussing earlier that
actually allow you to do basic metadata

00:31:05.780 --> 00:31:07.610
editing via an XML import session.

00:31:07.670 --> 00:31:09.360
So you can essentially
add and remove keys.

00:31:09.360 --> 00:31:12.440
You'll also note that in XML,
metadata elements are

00:31:12.440 --> 00:31:15.150
supported under file,
audio, and video.

00:31:17.230 --> 00:31:19.880
And here is an XML snippet
with a metadata element.

00:31:19.930 --> 00:31:22.900
It's very similar to the clip
we were looking at earlier.

00:31:22.990 --> 00:31:24.300
And you'll see a definition there.

00:31:24.300 --> 00:31:25.860
We're defining it as part of QuickTime.

00:31:25.860 --> 00:31:29.700
We have our key, we have our type,
and we have our content.

00:31:32.920 --> 00:31:33.960
And here are the two commands.

00:31:33.960 --> 00:31:36.200
Again, you can pull down the slides
and look at these in detail.

00:31:36.200 --> 00:31:36.880
Not that there's much.

00:31:36.880 --> 00:31:37.620
It's pretty simple.

00:31:37.620 --> 00:31:40.030
Add adds a new one to
the end of the list,

00:31:40.030 --> 00:31:43.230
and remove will remove
everything for that key.

00:31:44.380 --> 00:31:46.820
Now, this is all well and good,
but there are certainly a couple of

00:31:46.820 --> 00:31:50.340
things missing that we've noticed and
we've certainly heard requests for.

00:31:50.340 --> 00:31:52.790
Temporal metadata is the big one.

00:31:52.960 --> 00:31:55.860
There are an awful lot of really
interesting types of metadata you can

00:31:55.860 --> 00:31:58.760
put on media files where essentially
you associate a piece of data

00:31:58.760 --> 00:32:00.660
with a range of time in that file.

00:32:00.660 --> 00:32:03.940
Really cool stuff, just not there today.

00:32:03.940 --> 00:32:07.450
Also, one of the big reasons to
put metadata in is spotlight,

00:32:07.460 --> 00:32:10.260
to have spotlight index all
of your QuickTime files.

00:32:10.260 --> 00:32:13.360
Now, both of these things we're actively
working on with QuickTime team.

00:32:13.760 --> 00:32:15.180
Can't really talk about
when they'll be available,

00:32:15.180 --> 00:32:18.900
but hopefully at some point,
and we've definitely heard

00:32:18.900 --> 00:32:21.180
a lot of feedback on wanting
these in the software.

00:32:22.880 --> 00:32:25.350
So really quickly,
just talk about metadata

00:32:25.400 --> 00:32:28.160
and post production,
because in a lot of use cases

00:32:28.240 --> 00:32:32.510
we've been out there researching,
we found very definite usages for it.

00:32:32.760 --> 00:32:35.080
And really,
when we look at what customers are

00:32:35.080 --> 00:32:39.020
looking for in post production tools,
they want to reduce the huge amount of

00:32:39.020 --> 00:32:42.940
annual labor that seems to be involved
in actually finishing a production,

00:32:42.980 --> 00:32:46.370
and actually have their media
managed in an intelligent fashion,

00:32:46.400 --> 00:32:50.170
and just be able to throw arbitrary
interesting bits of data and have them

00:32:50.170 --> 00:32:50.760
ride throughout the production pipeline.

00:32:52.320 --> 00:32:55.620
One interesting request is actually
carrying interesting data from

00:32:55.620 --> 00:32:57.280
production through post production.

00:32:57.280 --> 00:33:01.370
We have a lot of really nice new cameras
these days which record things like lens

00:33:01.370 --> 00:33:05.120
settings and lighting and the camera
operator in the media as they record it.

00:33:05.200 --> 00:33:08.150
Having this data embedded in the
media file and flowing throughout

00:33:08.150 --> 00:33:10.980
the post production process means
you can use it near the end.

00:33:11.630 --> 00:33:14.890
If you've taken a beautiful beach shot,
sunset, a car driving along,

00:33:14.950 --> 00:33:17.730
and you know you have to composite
Godzilla in the background

00:33:17.730 --> 00:33:21.200
wreaking havoc and destruction,
if you know what lens that was shot with,

00:33:21.200 --> 00:33:24.720
well, then your 3D guy can render it
appropriately so it really looks like

00:33:24.720 --> 00:33:28.020
he's wreaking havoc and destruction,
not like he's a cardboard cutout

00:33:28.020 --> 00:33:29.650
or a guy in a rubber suit.

00:33:33.020 --> 00:33:36.080
Media management, file management,
asset management is really the

00:33:36.090 --> 00:33:39.860
number one area of investment,
honestly, we've seen out from customers,

00:33:39.860 --> 00:33:42.680
and they're actively looking
for solutions for this.

00:33:42.680 --> 00:33:45.400
And, you know,
in helping a number of companies

00:33:45.490 --> 00:33:48.880
build solutions in the past,
we found that just metadata is

00:33:48.880 --> 00:33:52.270
really a key enabler for this,
in that now being able to drop

00:33:52.360 --> 00:33:56.420
arbitrary data in files means you can
track them independently of a project,

00:33:56.500 --> 00:33:58.520
independently of a path on disk.

00:33:58.520 --> 00:34:01.000
You can do fun things like
indexing content to make sure

00:34:01.060 --> 00:34:02.430
it's stored on your server.

00:34:02.460 --> 00:34:05.780
And you can play fun games like when you
do essentially a check-in and check-out,

00:34:05.880 --> 00:34:06.860
very similar to CVS.

00:34:06.860 --> 00:34:09.660
You can look at the dependencies
of a project and figure out what's

00:34:09.660 --> 00:34:12.660
on your server and what's not,
or what's not locally,

00:34:12.710 --> 00:34:14.370
and pull it across.

00:34:15.690 --> 00:34:18.190
And one other interesting case that's
come up over the last few years when

00:34:18.190 --> 00:34:21.960
sort of started talking about metadata
is really rights and clearances.

00:34:21.960 --> 00:34:26.160
You know, if you're producing a TV show
or a commercial or a movie,

00:34:26.160 --> 00:34:29.200
it's really important that you
have the rights to show everyone

00:34:29.200 --> 00:34:31.960
who's in that production,
rights to all the music, etc.

00:34:31.980 --> 00:34:33.830
And, you know,
especially if you're out there

00:34:33.830 --> 00:34:36.330
shooting interviews on the street,
it's really key that you get

00:34:36.330 --> 00:34:37.940
sign-offs from everyone involved.

00:34:39.290 --> 00:34:41.890
Frequently, when you're doing a, like,
doing a production for a client,

00:34:41.890 --> 00:34:44.260
you'll do an audit at the
very end of the production,

00:34:44.260 --> 00:34:47.160
which will involve a poor
PA sitting there scribbling notes,

00:34:47.230 --> 00:34:50.360
frantically watching the video,
and correlating that to a back,

00:34:50.570 --> 00:34:52.100
back to a big stack of piled notes.

00:34:52.100 --> 00:34:54.290
Well,
if up front someone can simply enter

00:34:54.350 --> 00:34:56.970
who's in every individual shot,
such that at the,

00:34:56.970 --> 00:34:59.780
at any point in the process
or at the end of the project,

00:34:59.780 --> 00:35:02.200
you can run a query and
just get a list out,

00:35:02.300 --> 00:35:04.680
and now all someone has to do
is correlate that list with

00:35:04.720 --> 00:35:06.130
a stack of signed releases.

00:35:06.140 --> 00:35:08.060
Or if you want to be really slick,
have it correlate with a

00:35:08.060 --> 00:35:09.170
database of signed releases.

00:35:09.180 --> 00:35:13.370
Then doing an audit becomes trivial,
and it just gives the client

00:35:13.470 --> 00:35:15.180
a lot more confidence.

00:35:15.180 --> 00:35:17.290
It gives the company lawyers
a lot more confidence,

00:35:17.290 --> 00:35:19.290
and it's something that
everyone I've talked to,

00:35:19.290 --> 00:35:22.510
you know, they think about maybe putting
about 10% more effort in up front,

00:35:22.540 --> 00:35:25.160
and it's just absolutely
worth the savings at the end.

00:35:27.460 --> 00:35:29.460
Now at this point,
I'm going to do a little demo,

00:35:29.460 --> 00:35:31.280
as Flea mentioned,
try and pull together a

00:35:31.310 --> 00:35:32.860
number of these technologies.

00:35:32.910 --> 00:35:35.200
Can we switch the demo machine, please?

00:35:38.710 --> 00:35:44.830
Final Cut Pro Project Manager:
I've got a couple things here.

00:35:45.240 --> 00:35:50.620
If I go in here,
I've got a little application

00:35:50.690 --> 00:35:54.760
I've been working on.

00:35:54.760 --> 00:35:55.870
I've got a little project where I have
some files and I have a project here.

00:35:56.330 --> 00:35:59.770
You can think of this
as a broadcast workflow,

00:35:59.960 --> 00:36:02.980
but really this is just some film
footage that I have laying around,

00:36:02.980 --> 00:36:04.300
just a little short film.

00:36:04.300 --> 00:36:12.790
I have the dopey hero,
his annoying coworkers,

00:36:13.110 --> 00:36:16.260
the hot girl he can't talk to, his boss,
and annoying French puppets.

00:36:16.840 --> 00:36:20.360
So, what I really want to do is
I have this cut I'm working on,

00:36:20.360 --> 00:36:23.980
and you'll notice that I have
a couple pieces missing.

00:36:23.980 --> 00:36:27.460
I've got some black
here and a couple clips,

00:36:27.460 --> 00:36:33.320
and I actually want to go ahead and drop
some files in and just update this in

00:36:33.320 --> 00:36:37.300
the background so I don't have to think
about it as I have new content coming in.

00:36:37.300 --> 00:36:37.300
So,
what I'm going to do is I'm going to just

00:36:37.300 --> 00:36:37.300
go ahead and close this project for now.

00:36:38.460 --> 00:36:41.340
I'm going to come here to a
little app I've been building.

00:36:41.340 --> 00:36:47.420
This little app is called Assembler.

00:36:47.550 --> 00:36:55.690
is essentially to monitor files
coming in and update a project for me.

00:36:55.690 --> 00:36:55.690
So in Assembler,
I'm actually going to open up

00:36:55.690 --> 00:36:55.690
that Final Cut project I just saw.

00:36:55.920 --> 00:36:58.230
And as I open it up,
you'll see that actually via

00:36:58.390 --> 00:37:02.150
Apple Events told Final Cut Pro to
go ahead and open up that project.

00:37:02.280 --> 00:37:04.600
At the same time,
it came back and asked for

00:37:04.600 --> 00:37:07.810
an XML copy of the project to
populate the sequence list.

00:37:07.960 --> 00:37:11.730
So in fact, I can do things here.

00:37:11.730 --> 00:37:11.730
I can say, I want a new sequence.

00:37:14.400 --> 00:37:32.700
[Transcript missing]

00:37:34.330 --> 00:37:37.490
Now what I'll do is I'll
come back out here to Finder,

00:37:37.490 --> 00:37:40.400
and I have my folder here.

00:37:40.400 --> 00:37:47.640
I'm going to go off to another volume,
and I've got some media that's

00:37:47.640 --> 00:37:53.490
just come in from the field,
a couple of things here.

00:37:53.490 --> 00:37:53.560
So what I'll do is I'll take
this Enter Office clip here,

00:37:53.560 --> 00:37:53.560
and I will drop it in my incoming folder.

00:37:58.810 --> 00:38:03.530
And as it copies it,
the app will notice it here in a second.

00:38:03.530 --> 00:38:10.540
Hopefully.

00:38:10.550 --> 00:38:13.710
It will hopefully notice
the file here in a moment.

00:38:23.300 --> 00:38:29.570
Well, the demo gods do not
appear to be with me today.

00:38:29.800 --> 00:39:38.100
[Transcript missing]

00:39:39.150 --> 00:39:41.960
That I wrote a little while ago,
which basically just dumps

00:39:41.960 --> 00:39:45.380
out the metadata in the
QuickTime file to the console.

00:39:45.470 --> 00:39:47.070
And if I run this,
it's going to complain because

00:39:47.250 --> 00:39:48.440
it's actually PowerPC build.

00:39:48.440 --> 00:39:53.250
And you'll see I have this key here,
org refuge file clip ID 2-2.

00:39:53.250 --> 00:39:58.300
2-2 essentially correlates to
the name of this slug clip here.

00:39:58.310 --> 00:40:03.110
And again, assuming the demo gods would
have been with me today,

00:40:03.110 --> 00:40:03.800
this actually would have motivated the
replacement in the sequence itself.

00:40:05.260 --> 00:40:09.800
But sadly, not happening today.

00:40:09.800 --> 00:40:12.170
Can we switch back to the slides, please?

00:40:17.430 --> 00:40:20.630
So, just to sort of summarize
where we're from today,

00:40:20.630 --> 00:40:24.060
really what our goal has been,
and sort of will cluster the

00:40:24.060 --> 00:40:28.430
Final Cut team that Helena and I work on,
is really to enable more workflow

00:40:28.430 --> 00:40:31.420
tools around Final Cut and
around post production.

00:40:31.420 --> 00:40:33.710
We very strongly believe in
open formats for interchanging

00:40:33.710 --> 00:40:35.490
between different applications,
you know,

00:40:35.520 --> 00:40:38.310
because when we talk to our customers,
they're not buying one product,

00:40:38.310 --> 00:40:40.440
they're buying six,
because no one does it all.

00:40:40.440 --> 00:40:43.300
And linking those applications
is really important.

00:40:44.140 --> 00:40:46.640
We've put together a number
of new features for you,

00:40:46.640 --> 00:40:48.580
again, coming in an upcoming
release of Final Cut.

00:40:48.600 --> 00:40:52.420
Version 3 of the XML,
with all the powerful, essentially,

00:40:52.420 --> 00:40:55.520
additive commands to actually
edit a project in place.

00:40:55.520 --> 00:40:58.200
Metadata support,
which is just going to become bigger,

00:40:58.200 --> 00:41:01.160
and especially when you think of
large organizations wanting to

00:41:01.160 --> 00:41:02.840
track just terabytes of media.

00:41:02.840 --> 00:41:06.620
And Apple event support,
allowing you to build applications

00:41:06.620 --> 00:41:09.180
that are tied directly into Final Cut.

00:41:11.400 --> 00:42:34.900
[Transcript missing]