WEBVTT

00:00:14.100 --> 00:00:15.100
Good morning, everybody.

00:00:15.100 --> 00:00:20.480
Welcome to day two of Apple's 2006
Worldwide Developer Conference.

00:00:20.520 --> 00:00:21.700
I'm Chris Espinosa.

00:00:21.700 --> 00:00:25.980
I'm the head of the user experience group
in the Xcode development tools team,

00:00:25.980 --> 00:00:29.180
and I'm here to welcome you to Xcode,
Apple's IDE.

00:00:31.550 --> 00:00:35.970
Our objective this morning is to orient
you to the Xcode suite of tools to

00:00:36.440 --> 00:00:39.700
highlight some of the similarities
and differences between Xcode and other

00:00:39.700 --> 00:00:43.120
tools you may be experienced with,
and to answer some of the common

00:00:43.120 --> 00:00:46.300
questions you're going to encounter
as first-time users of Xcode.

00:00:46.300 --> 00:00:48.750
If you are not a
first-time user of Xcode,

00:00:48.750 --> 00:00:51.420
now would be an excellent
time to deplane.

00:00:52.160 --> 00:00:56.000
If you are experienced with using Xcode,
I suggest going to the

00:00:56.000 --> 00:00:59.750
Cocoa session in the next room,
or please, please, please,

00:01:00.000 --> 00:01:02.420
downstairs to How to
File a Good Bug Report.

00:01:02.420 --> 00:01:04.760
That will help us much more
than you're sitting in here

00:01:04.760 --> 00:01:06.400
learning the rudiments of Xcode.

00:01:06.400 --> 00:01:10.290
So if you're still with me,
that means that you probably have not

00:01:10.290 --> 00:01:13.080
used the Xcode tools extensively before.

00:01:13.080 --> 00:01:16.000
You may not be familiar
with the Xcode tools at all.

00:01:16.000 --> 00:01:18.220
You may be a newcomer to
the Mac OS X development

00:01:18.220 --> 00:01:19.740
environment altogether.

00:01:19.740 --> 00:01:22.140
So I want to do a little show of hands.

00:01:22.160 --> 00:01:23.590
Hands of where you're coming from.

00:01:23.590 --> 00:01:26.220
Which of these do you recognize?

00:01:26.220 --> 00:01:29.870
How many people are more
experienced in the Visual Studio,

00:01:29.870 --> 00:01:32.460
Visual C++ development environment?

00:01:33.960 --> 00:01:35.880
Okay, good number.

00:01:35.990 --> 00:01:39.860
The mug in the middle is
the Emacs cheat sheet.

00:01:39.860 --> 00:01:43.490
How many of you are primarily Emacs
terminal make file developers?

00:01:43.600 --> 00:01:44.830
Great, that's where I figured it.

00:01:44.900 --> 00:01:49.900
And how many people have experience in
the Eclipse development environment?

00:01:50.290 --> 00:01:51.500
Good, good mix.

00:01:51.740 --> 00:01:54.250
How many are Code Warrior refugees?

00:01:55.690 --> 00:01:58.420
Figured.

00:01:58.570 --> 00:02:03.090
So many of you, it looks like,
from either Visual Studio or from Emacs

00:02:03.150 --> 00:02:07.700
or Code Warrior know what an IDE is
and what the benefits of having an

00:02:07.700 --> 00:02:10.420
integrated development environment are.

00:02:10.440 --> 00:02:16.580
If you've only used the GNU tools
or command line tools to develop,

00:02:16.580 --> 00:02:19.080
an IDE may seem new to you.

00:02:19.390 --> 00:02:23.560
What we give you with the Xcode IDE is
actually the best of both worlds.

00:02:23.560 --> 00:02:27.750
It's the graphic user interface that
you're familiar with as a user plus

00:02:27.750 --> 00:02:33.610
the full power of the back end tools
that you get using the command line.

00:02:33.630 --> 00:02:36.880
The IDE integrates,
and that's what the I in IDE is.

00:02:36.880 --> 00:02:39.580
It integrates a lot of
different functions,

00:02:39.610 --> 00:02:41.610
not just the editing and building.

00:02:41.750 --> 00:02:46.410
But it's editing, building, debugging,
source code management, visual modeling,

00:02:46.410 --> 00:02:48.040
documentation reference.

00:02:48.190 --> 00:02:50.420
A lot of things are packed
into one application,

00:02:50.440 --> 00:02:53.540
and there are bridges to other
applications that allow you to do four.

00:02:53.570 --> 00:02:56.490
For example, interface design as well.

00:02:56.570 --> 00:03:01.590
And Apple's IDE is different in
that it guides you specifically to

00:03:01.590 --> 00:03:04.060
developing Mac OS X applications.

00:03:04.150 --> 00:03:07.200
While in many respects
it's a generic build,

00:03:07.200 --> 00:03:11.340
link, debug development environment,
there are a lot of things all over

00:03:11.340 --> 00:03:16.300
Xcode which guide you to developing
Mac OS X specific applications.

00:03:17.920 --> 00:03:20.980
The first questions you probably
have if you're approaching the

00:03:20.980 --> 00:03:23.810
Mac OS X platform as a developer is,
well, where are my tools?

00:03:23.820 --> 00:03:26.490
Well, you know,
if you're a Microsoft developer,

00:03:26.520 --> 00:03:28.220
you go and buy Visual Studio.

00:03:28.220 --> 00:03:31.480
If you are an Eclipse developer,
you download Eclipse.

00:03:31.500 --> 00:03:33.860
If you're a Mac OS X developer,
what do you do?

00:03:33.860 --> 00:03:38.420
Well, the good news is, out of the box,
with every single Macintosh we've

00:03:38.420 --> 00:03:41.820
ever sold with Mac OS X on it,
and with every copy

00:03:41.880 --> 00:03:46.820
of Mac OS X at retail,
the developer tools are included.

00:03:47.320 --> 00:03:50.800
With every copy, there's nothing to buy,
there's nothing to download.

00:03:50.800 --> 00:03:54.910
You boot up your machine,
or you put in your installation disk,

00:03:55.000 --> 00:03:57.860
and there is a disk image of the
developer tools right there on the

00:03:57.860 --> 00:03:59.660
hard disk or right there on the DVD.

00:03:59.660 --> 00:04:02.430
You double-click that disk image,
and you get the installer

00:04:02.430 --> 00:04:03.730
for the developer tools.

00:04:03.780 --> 00:04:08.350
If you want to upgrade,
you go to Apple Developer Connection,

00:04:08.350 --> 00:04:10.830
ADC,
and you can download the latest tools.

00:04:10.840 --> 00:04:13.760
The current tools up there is Xcode 2.3.

00:04:13.760 --> 00:04:16.280
We just introduced 2.4 yesterday.

00:04:16.610 --> 00:04:19.450
It's not up on the website yet,
but it can be downloaded from

00:04:19.450 --> 00:04:21.160
the servers here at the show.

00:04:21.160 --> 00:04:25.150
We're going to be using Xcode
2.3 for the demonstration today.

00:04:27.290 --> 00:04:31.930
When you install developer tools,
something subtle happens to the

00:04:31.930 --> 00:04:33.800
top level of your hard disk.

00:04:33.830 --> 00:04:36.300
You get a folder called developer.

00:04:36.300 --> 00:04:38.620
Most of the developer tools are there.

00:04:38.620 --> 00:04:41.950
And if you want to start with the
Xcode IDE or any of the other tools,

00:04:42.020 --> 00:04:43.600
you just double click that.

00:04:43.680 --> 00:04:46.090
Some of the applications
are at the top level.

00:04:46.090 --> 00:04:47.720
Others are buried within it.

00:04:47.960 --> 00:04:51.550
But most of the things that you want
to use as a developer will be found

00:04:51.550 --> 00:04:56.080
inside the top level developer folder
on your hard disk after installation.

00:04:56.440 --> 00:04:58.840
But there's a lot that
goes other places too.

00:04:58.910 --> 00:05:00.730
Let's take a look.

00:05:01.020 --> 00:05:04.850
In the developer folder,
you see a top-level about document,

00:05:04.860 --> 00:05:06.540
a PDF that you can read.

00:05:06.540 --> 00:05:09.610
The reference library,
which is all of the documentation,

00:05:09.640 --> 00:05:10.960
will show you how to get to it.

00:05:10.960 --> 00:05:13.940
The applications,
which is where Xcode is.

00:05:13.940 --> 00:05:17.450
Then there's documentation
and a lot of examples,

00:05:17.450 --> 00:05:22.050
a ton of sample code in examples,
some headers, some bundles.

00:05:22.490 --> 00:05:26.510
Notice the SDKs folder here.

00:05:26.610 --> 00:05:30.300
That's the software
development kits for Mac OS X.

00:05:30.300 --> 00:05:33.390
That is where the headers and
link libraries are that you'll be

00:05:33.400 --> 00:05:34.890
using in the projects you create.

00:05:34.890 --> 00:05:38.210
We'll talk a little bit
more about those later.

00:05:38.960 --> 00:05:40.340
But there's more in other places.

00:05:40.340 --> 00:05:43.660
If you're a traditional Unix developer,
you understand that slash user is where

00:05:43.660 --> 00:05:45.480
most of your developer stuff goes.

00:05:45.480 --> 00:05:49.900
When you install Mac OS X,
a large number of Unix utilities

00:05:49.950 --> 00:05:54.120
and tools are included,
but not all of the development utilities.

00:05:54.120 --> 00:05:57.230
When you install Xcode tools,
all of the development

00:05:57.320 --> 00:06:00.810
utilities are added in,
including the Unix header

00:06:01.130 --> 00:06:04.550
files in user include,
the link libraries and

00:06:04.550 --> 00:06:08.510
runtime libraries in user lib,
and all of the tools,

00:06:08.510 --> 00:06:11.410
including the compilers in user bin.

00:06:11.420 --> 00:06:15.180
These are the typical places they are in
a Unix or Linux development environment,

00:06:15.190 --> 00:06:16.640
and you'll find them there.

00:06:16.640 --> 00:06:20.960
The third place in the Mac OS X idiom
is in the library folder,

00:06:20.960 --> 00:06:25.180
and the library folder is
your machine configuration.

00:06:25.180 --> 00:06:28.200
It's where you put
machine-specific stuff,

00:06:28.200 --> 00:06:32.710
and when you install the Xcode tools,
your machine-specific plugins and

00:06:32.710 --> 00:06:34.760
configuration go in slash library.

00:06:35.020 --> 00:06:38.020
They're buried in a folder
called application support slash

00:06:38.020 --> 00:06:41.210
apple slash developer tools,
and there are a bunch of templates,

00:06:41.260 --> 00:06:42.020
a bunch of plugins,
a bunch of configuration scripts.

00:06:42.020 --> 00:06:45.930
When you get to be an
advanced Xcode user,

00:06:46.040 --> 00:06:48.020
you will find your
configuration information,

00:06:48.020 --> 00:06:51.980
you will find your customization
goes on in that folder.

00:06:52.020 --> 00:06:58.060
So let's take a quick
tour of the Xcode IDE.

00:06:59.800 --> 00:07:05.800
Xcode has three different layouts,
and you pick one in the preferences.

00:07:05.970 --> 00:07:09.870
And the different layouts are designed
for different development styles and for,

00:07:09.870 --> 00:07:12.030
in many respects,
for different origins of

00:07:12.030 --> 00:07:13.640
where you might come from.

00:07:13.640 --> 00:07:20.110
The default layout gives you the product,
the project view,

00:07:21.510 --> 00:07:24.140
Laser.

00:07:24.150 --> 00:07:28.500
The project view on the left,
and then a detail view on the right,

00:07:28.500 --> 00:07:31.760
and then an editor window slides
up to show your edit text.

00:07:31.760 --> 00:07:34.550
It gives you most of the
tools you want in one window,

00:07:34.610 --> 00:07:37.620
but you will often open other
windows for specific tasks

00:07:37.630 --> 00:07:39.580
such as editing and debugging.

00:07:40.980 --> 00:07:43.520
There's a condensed layout,
which is more familiar to those

00:07:43.520 --> 00:07:46.780
of you who use Code Warrior,
where your project is in one window,

00:07:46.780 --> 00:07:50.320
and then editing, building,
and debugging, and finding all happen

00:07:50.320 --> 00:07:51.560
in separate windows.

00:07:51.560 --> 00:07:54.660
But if you come from a more
all-in-one environment,

00:07:54.660 --> 00:07:58.440
where you expect everything to
be in one window all the time,

00:07:58.440 --> 00:08:02.650
there's the all-in-one layout,
where your project and your detail and

00:08:02.650 --> 00:08:07.160
your editor are all in the same window,
and then you switch pages with

00:08:07.160 --> 00:08:11.110
the page button up here to go to
debugging or to... ...to building.

00:08:11.120 --> 00:08:13.630
Pick the layout you want.

00:08:13.660 --> 00:08:15.780
We will be using the
default layout in the demo,

00:08:15.780 --> 00:08:20.560
but most of the things that we're showing
today work equally well in all layouts.

00:08:23.380 --> 00:08:26.600
So when you start putting
together a project in Xcode,

00:08:26.600 --> 00:08:29.530
you do it in what's called
the groups and files view.

00:08:29.530 --> 00:08:32.860
This is where your headers
and source files go,

00:08:32.930 --> 00:08:38.710
and you can group them together in these
folder-like groups to organize them.

00:08:38.740 --> 00:08:40.570
There are really two things here.

00:08:40.570 --> 00:08:43.550
One is the project membership up here,
and two is a bunch of

00:08:43.550 --> 00:08:45.070
smart groups down there.

00:08:45.080 --> 00:08:48.300
The smart groups are much
like smart groups in iTunes or

00:08:48.300 --> 00:08:50.450
iMovie or another i application.

00:08:50.460 --> 00:08:53.040
They give you a quick reference
to certain kinds of things.

00:08:53.040 --> 00:08:55.890
For example,
a smart group at the bottom called

00:08:55.890 --> 00:08:59.860
project symbols shows you a list
of all of the classes and methods

00:08:59.860 --> 00:09:02.340
and macros defined in your program.

00:09:02.340 --> 00:09:05.490
It's essentially a flattened
version of the project index.

00:09:05.600 --> 00:09:08.940
It's very useful to use these
smart groups for navigation.

00:09:08.940 --> 00:09:11.490
You'll spend most of
your time in the editor.

00:09:11.490 --> 00:09:15.310
Whether the editor is in a separate
window or whether it's embedded in

00:09:15.310 --> 00:09:18.960
your default or all-in-one view,
the editor works the same.

00:09:18.960 --> 00:09:20.960
It's a source code editor.

00:09:20.960 --> 00:09:22.640
It does automatic indentation.

00:09:22.640 --> 00:09:23.960
It does syntax coloring.

00:09:23.960 --> 00:09:27.190
You'll see more advanced features
of the Leopard Xcode editor

00:09:27.190 --> 00:09:28.960
in this afternoon's session.

00:09:28.960 --> 00:09:33.960
We're just going to show you the basic
one that's currently in 2.3 and 2.4.

00:09:33.960 --> 00:09:37.000
If you're doing an application
with a graphic user interface,

00:09:37.000 --> 00:09:38.950
you'll be using Interface Builder.

00:09:38.960 --> 00:09:42.960
Most of your projects will come with
default interface files called nib files.

00:09:42.960 --> 00:09:45.170
You double-click those,
and you launch a separate

00:09:45.170 --> 00:09:46.960
application called Interface Builder.

00:09:46.960 --> 00:09:48.950
And you use it to design your project.

00:09:48.960 --> 00:09:53.960
You design your graphic user interface
and then wire it up to your source code.

00:09:54.180 --> 00:09:55.860
If you're doing
object-oriented programming,

00:09:55.860 --> 00:09:58.640
which most of you probably are,
you'll want a class browser.

00:09:58.640 --> 00:10:04.240
Under the Windows menu,
there is a Tools item,

00:10:04.240 --> 00:10:07.360
and under the Tools item are most
of the windows you're about to see.

00:10:07.360 --> 00:10:09.240
The class browser is one of them.

00:10:09.240 --> 00:10:12.780
You can also put a toolbar tool in to
pop up a class browser at any time,

00:10:12.780 --> 00:10:16.300
and it lets you inspect classes
and see what the members are and go

00:10:16.300 --> 00:10:19.750
straight to the header file for any
particular class in your application.

00:10:20.390 --> 00:10:23.590
You can also look at the classes
in your application in a graphic

00:10:23.700 --> 00:10:28.340
way using the class modeling
tools from the Design menu.

00:10:30.140 --> 00:10:32.030
There's plenty of documentation.

00:10:32.030 --> 00:10:35.790
From the Help menu, there is Xcode Help,
which takes you directly

00:10:35.870 --> 00:10:39.400
to the Xcode user guide,
and a general documentation item,

00:10:39.400 --> 00:10:42.510
which takes you to all of
Apple's documentation on

00:10:42.530 --> 00:10:45.810
the Macintosh product line,
from hardware on up.

00:10:45.920 --> 00:10:48.920
And it's 15 years worth of documentation.

00:10:48.920 --> 00:10:50.160
It's a huge amount.

00:10:50.160 --> 00:10:53.260
The installation of the documentation
is as large as the installation

00:10:53.260 --> 00:10:55.060
is the developer tools themselves.

00:10:55.260 --> 00:10:59.310
It's a huge amount of information,
so huge that some of it is even

00:10:59.310 --> 00:11:02.370
indexed on your local disk,
but it goes to the network

00:11:02.370 --> 00:11:03.760
to get the actual content.

00:11:03.760 --> 00:11:06.760
This way you get the freshest content,
and we can provide you all the

00:11:06.760 --> 00:11:08.450
information that you really need.

00:11:10.560 --> 00:11:13.020
When you've got your source code
written and you want to build it,

00:11:13.100 --> 00:11:16.840
there's a build results window that
gives you the controls for building

00:11:16.840 --> 00:11:20.510
your application and shows you
the build steps and will show you

00:11:20.510 --> 00:11:22.840
errors and warnings as they occur.

00:11:22.840 --> 00:11:25.940
You select an error and warning and
it brings it up in the source code.

00:11:25.940 --> 00:11:27.840
This is called the build results window.

00:11:27.940 --> 00:11:30.030
A crucial part of the
build results window,

00:11:30.170 --> 00:11:33.740
especially if you're coming from a
makefile terminal-like environment,

00:11:33.740 --> 00:11:35.470
is what's called the build transcript.

00:11:35.510 --> 00:11:40.990
If you look right here,
there's a little widget, tiny, obscure,

00:11:40.990 --> 00:11:45.710
mysterious, that if you click it,
it discloses the secret

00:11:45.870 --> 00:11:47.740
underlife of Xcode.

00:11:47.740 --> 00:11:52.870
This is the actual transcript of
the build commands being issued to

00:11:52.870 --> 00:11:56.810
the shell to execute the compiler,
linker, and other commands that

00:11:56.810 --> 00:11:57.900
build your product.

00:11:57.920 --> 00:12:01.070
If you open that all the way,
you will see hundreds of

00:12:01.130 --> 00:12:04.000
K of terminal commands,
and you can look at them

00:12:04.000 --> 00:12:05.650
and see them step by step.

00:12:05.670 --> 00:12:08.150
If you select a build
step in the top pane,

00:12:08.210 --> 00:12:12.820
it will select the corresponding build
steps in the transcript so you can see

00:12:12.820 --> 00:12:15.670
exactly what's going on with your build.

00:12:17.770 --> 00:12:19.540
And finally, debugging.

00:12:19.540 --> 00:12:21.740
When you launch your
program in the debugger,

00:12:21.740 --> 00:12:26.010
you can set breakpoints, step through it,
step into, step over.

00:12:26.150 --> 00:12:28.200
You see the stack trace.

00:12:28.200 --> 00:12:29.660
You can select different threads.

00:12:29.690 --> 00:12:31.240
You can inspect the value of variables.

00:12:31.240 --> 00:12:35.080
Much of this is familiar to
you for anybody who's used

00:12:35.080 --> 00:12:37.410
an IDE with a debugger in it.

00:12:37.700 --> 00:12:41.130
When your application is up and running
and you've made all the changes you want,

00:12:41.210 --> 00:12:44.260
you may want to commit it to a
source code management repository.

00:12:44.260 --> 00:12:47.460
Source code management is
integrated into the Xcode editor.

00:12:47.460 --> 00:12:50.620
When you enable your project
for source code management,

00:12:50.620 --> 00:12:55.520
you get an extra column in your detail
view that shows the status of any file.

00:12:55.520 --> 00:12:58.280
M for modified, C for conflict,
for example.

00:12:58.280 --> 00:13:02.510
And you can use the SCM menu
in Xcode to commit or check

00:13:02.510 --> 00:13:07.580
out or inspect differences
between two versions of a file.

00:13:07.580 --> 00:13:09.930
This is an integrated
development environment.

00:13:10.050 --> 00:13:12.120
All of these tools are
in one application.

00:13:14.220 --> 00:13:18.860
So let's talk about your workflow,
what you do as a user of Xcode.

00:13:18.860 --> 00:13:23.700
You edit your code, you build it,
you get errors and warnings,

00:13:23.750 --> 00:13:25.350
you build it, it succeeds.

00:13:25.350 --> 00:13:29.440
You debug it, you step through,
you inspect what your program is doing,

00:13:29.440 --> 00:13:32.790
you get it working,
then you deliver it to customers.

00:13:32.790 --> 00:13:35.680
We're going to walk you through
that workflow with Xcode.

00:13:35.680 --> 00:13:38.680
Rick Ballard is going to come
up to talk you through it,

00:13:38.680 --> 00:13:41.480
Chris Hanson is going to
be on mouse and keyboards,

00:13:41.550 --> 00:13:43.210
and I hope you enjoy the demo.

00:13:43.210 --> 00:13:43.790
Thank you.

00:13:49.240 --> 00:13:50.000
I'm Rick Ballard.

00:13:50.000 --> 00:13:51.390
This is Chris Hanson.

00:13:51.560 --> 00:13:55.870
We're going to step you through some
demonstrations of common tasks in Xcode.

00:13:55.990 --> 00:14:00.950
We're going to start out with a
demo of creating a new project,

00:14:01.060 --> 00:14:04.200
probably the first thing
you'll do in Xcode.

00:14:04.240 --> 00:14:07.690
Let's go ahead and get Xcode going.

00:14:13.390 --> 00:14:15.540
And we're going to go
up to the file menu.

00:14:15.540 --> 00:14:21.460
I don't think we're showing
the correct machine.

00:14:21.460 --> 00:14:22.450
If we could switch, please.

00:14:22.500 --> 00:14:29.610
One moment, please.

00:14:33.890 --> 00:14:37.930
Well, what we're about to show you
is we're going to bring up

00:14:37.930 --> 00:14:40.200
and create a new project.

00:14:40.200 --> 00:14:44.750
Xcode gives you a bunch of assistants,
which let you start with

00:14:44.750 --> 00:14:47.940
different templates for
different types of projects.

00:14:47.940 --> 00:14:49.050
Here we go.

00:14:49.100 --> 00:14:49.820
All right.

00:14:49.880 --> 00:14:52.820
So you can see here we have
the assistant window up.

00:14:52.880 --> 00:14:57.240
You get that by going to the file
menu and selecting new project.

00:14:57.240 --> 00:15:01.230
And here we have a bunch of
different categorized types of

00:15:01.280 --> 00:15:03.480
projects that we can create.

00:15:05.550 --> 00:15:08.840
Let's go down to the
command line tool category,

00:15:08.990 --> 00:15:11.430
and we're going to start
out with a standard tool.

00:15:11.580 --> 00:15:15.700
That's just a simple
C command line application.

00:15:15.830 --> 00:15:17.800
We click the next button.

00:15:17.940 --> 00:15:22.160
Here, Xcode lets us name our project and
decide where we want to put it.

00:15:22.300 --> 00:15:27.030
Unlike some other IDEs, in Xcode,
your projects can live wherever you want.

00:15:27.200 --> 00:15:28.800
And generally,
you may put all your source

00:15:28.930 --> 00:15:31.410
files in a project directory,
but you can locate

00:15:31.520 --> 00:15:34.080
things wherever you want,
really.

00:15:34.200 --> 00:15:36.180
So let's go ahead and click Finish.

00:15:36.380 --> 00:15:38.760
This will cause Xcode to
create our project for us.

00:15:38.860 --> 00:15:41.730
And you see the project window,
which is where you're going to

00:15:41.730 --> 00:15:43.610
spend most of your time in Xcode.

00:15:44.430 --> 00:15:46.390
So you see,
as Chris Espinosa showed you earlier,

00:15:46.400 --> 00:15:49.580
there's a Groups and
Files pane on the left.

00:15:49.850 --> 00:15:52.210
That top icon that has
the name of the project,

00:15:52.350 --> 00:15:56.020
"Hello World," and a little project icon,
that's the root group.

00:15:56.180 --> 00:16:01.570
That icon represents the project itself,
and it contains everything

00:16:01.690 --> 00:16:04.080
in the hierarchy,
source files,

00:16:04.080 --> 00:16:06.500
resource files in the project.

00:16:07.810 --> 00:16:10.200
Next to the Groups and Files pane,
you can see the Detail pane.

00:16:10.200 --> 00:16:12.600
And you see there are a
few files listed there.

00:16:12.760 --> 00:16:14.930
Well,
the Detail pane will show you everything

00:16:16.130 --> 00:16:20.360
in the hierarchy under what you have
selected in the Groups and Files pane.

00:16:20.510 --> 00:16:23.680
So since we have the
project icon selected,

00:16:23.790 --> 00:16:27.660
you can see all the file
references in the project.

00:16:28.300 --> 00:16:31.350
If we click on the products group,
we can filter down and see just the

00:16:31.430 --> 00:16:33.230
file references in the products group.

00:16:33.330 --> 00:16:35.440
You see there's one reference there.

00:16:35.540 --> 00:16:40.230
It's got the name of the project,
and it's red.

00:16:40.600 --> 00:16:43.690
If we click on the products group,
we can filter down and see just the

00:16:43.700 --> 00:16:45.540
file references in the products group.

00:16:45.540 --> 00:16:47.740
You see there's one reference there.

00:16:47.740 --> 00:16:52.540
It's got the name of the project,
and it's red.

00:17:06.580 --> 00:17:09.630
If we click on the products group,
we can filter down and see just the

00:17:09.700 --> 00:17:11.540
file references in the products group.

00:17:11.540 --> 00:17:13.740
You see there's one reference there.

00:17:13.740 --> 00:17:18.540
It's got the name of the project,
and it's red.

00:17:25.890 --> 00:17:29.000
If we click on the products group,
we can filter down and see just the

00:17:29.000 --> 00:17:30.830
file references in the products group.

00:17:30.840 --> 00:17:33.040
You see there's one reference there.

00:17:33.040 --> 00:17:37.840
It's got the name of the project,
and it's red.

00:17:55.800 --> 00:17:57.100
after it's finished.

00:17:57.150 --> 00:17:59.010
So we're gonna turn that on.

00:17:59.370 --> 00:18:02.760
And now we can go ahead and click the
little build hammer in the toolbar,

00:18:02.770 --> 00:18:05.180
and it'll build our project.

00:18:05.970 --> 00:18:07.820
You can see the steps
that it's done there,

00:18:07.820 --> 00:18:09.180
and our build has succeeded.

00:18:09.180 --> 00:18:12.400
Now,
if we want to see a little more detail,

00:18:12.400 --> 00:18:16.380
you can click that little text widget,
one of those little boxes,

00:18:16.380 --> 00:18:19.880
and we'll see the actual commands
that Xcode has sent to GCC,

00:18:19.970 --> 00:18:21.730
which is our C compiler.

00:18:23.830 --> 00:18:27.100
We go ahead and click the Run button.

00:18:27.140 --> 00:18:30.220
It'll go ahead and run our project,
and it prints Hello World.

00:18:30.350 --> 00:18:31.110
No big surprise.

00:18:31.110 --> 00:18:34.570
Let's go back to our slides.

00:18:40.240 --> 00:18:42.700
So you may have noticed that there
was a little bull's eye icon in the

00:18:42.700 --> 00:18:45.690
Groups and Files pane called Targets.

00:18:45.750 --> 00:18:48.820
What's a target,
and what's the difference between

00:18:48.900 --> 00:18:50.900
your projects and your targets?

00:18:51.050 --> 00:18:54.460
Well,
a project contains references to all

00:18:54.460 --> 00:18:57.840
the files related to your deliverable.

00:18:57.970 --> 00:19:02.150
So my deliverable might be an
application that I'm linking

00:19:02.480 --> 00:19:04.820
against a couple frameworks.

00:19:04.900 --> 00:19:06.050
I have to build my frameworks.

00:19:06.050 --> 00:19:06.050
I have to build my application.

00:19:06.420 --> 00:19:10.240
We generally recommend that
you put all the source files,

00:19:10.240 --> 00:19:13.080
if your frameworks are really
just for that one application,

00:19:13.090 --> 00:19:15.430
in one project.

00:19:15.520 --> 00:19:18.290
You have all the files
there that you can refer to,

00:19:18.290 --> 00:19:21.810
and your project can contain
other ancillary files that you're

00:19:21.970 --> 00:19:24.100
not necessarily going to compile,
like notes.

00:19:24.100 --> 00:19:28.720
It'll contain your resource files,
everything related to your project.

00:19:29.900 --> 00:19:34.560
Now, the target is what actually
processes your source files.

00:19:34.560 --> 00:19:35.640
It compiles them.

00:19:35.640 --> 00:19:39.090
It'll take your resource files and
copy them to the correct place.

00:19:39.220 --> 00:19:43.950
So your target just contains
the files that it processes,

00:19:43.950 --> 00:19:46.980
and it produces one build product.

00:19:47.020 --> 00:19:52.650
So I'd have a target for a framework,
a different target for my application.

00:19:52.660 --> 00:19:57.100
Every different build
product has its own target,

00:19:57.100 --> 00:20:01.730
and the target just contains,
references to the files

00:20:01.860 --> 00:20:04.460
which are relevant,
which it will process for that target.

00:20:07.340 --> 00:20:12.230
Your project also contains general
settings that you're going to

00:20:12.300 --> 00:20:16.300
use for all of your development,
for everything for this deliverable.

00:20:16.320 --> 00:20:21.570
A target contains the settings that
are specific to that one target.

00:20:22.700 --> 00:20:26.470
And the project contains all
the targets that you're going

00:20:26.480 --> 00:20:28.720
to use with that project.

00:20:28.840 --> 00:20:32.550
Likewise,
a target contains a series of build

00:20:33.500 --> 00:20:34.780
phases which process your files.

00:20:34.840 --> 00:20:39.000
If this sounds a little confusing,
let's go to a demo and

00:20:39.000 --> 00:20:40.770
show you what I mean.

00:20:44.270 --> 00:20:49.310
So we're going to open up our
temperature converter project.

00:20:49.620 --> 00:20:53.140
This is an application which will convert
from Fahrenheit to Celsius for us,

00:20:53.140 --> 00:20:57.370
but we need an actual converter
in a framework that it will

00:20:57.370 --> 00:21:01.750
link against to provide it with
the actual conversion routine.

00:21:04.390 --> 00:21:07.980
You see if we disclose that,
we've disclosed that targets group,

00:21:08.150 --> 00:21:10.500
you can see there's one target.

00:21:10.940 --> 00:21:14.200
Represented by the
little application icon,

00:21:14.320 --> 00:21:16.640
that represents the application
we have in our project.

00:21:18.540 --> 00:21:21.990
What we're going to want to do
here is add a second target,

00:21:21.990 --> 00:21:24.490
which will build our framework.

00:21:24.590 --> 00:21:27.770
So this project will
have two targets in it.

00:21:28.090 --> 00:21:32.410
It's also possible to put each of your
targets in a separate project and use

00:21:32.700 --> 00:21:36.510
cross-project references between them.

00:21:38.100 --> 00:21:40.200
If all your targets are
related to one deliverable,

00:21:40.200 --> 00:21:42.420
we recommend you put
them in the same project.

00:21:44.220 --> 00:21:46.740
So let's go ahead and add a new target.

00:21:46.820 --> 00:21:51.570
We're going to go up to the project menu,
and we're going to say new target.

00:21:51.680 --> 00:21:54.560
And we'll get an assistant that's
very similar to what we had earlier

00:21:55.090 --> 00:21:57.460
with the new project assistant.

00:21:57.510 --> 00:22:01.570
Here we can select what type
of target we're going to build.

00:22:01.870 --> 00:22:05.270
Unlike the project assistants,
these don't come with template

00:22:05.270 --> 00:22:07.790
files to get you started,
but they do come,

00:22:07.800 --> 00:22:11.380
it does create a target with
the right settings initially

00:22:11.720 --> 00:22:14.130
for the type of product that
that target is going to build.

00:22:14.180 --> 00:22:18.040
Here we're going to
create a Cocoa framework.

00:22:18.040 --> 00:22:19.560
So let's select the Cocoa framework.

00:22:22.470 --> 00:22:24.040
And we'll go ahead and click finish.

00:22:24.040 --> 00:22:26.280
We'll name our target first.

00:22:26.480 --> 00:22:28.270
This is going to be the
converter framework,

00:22:28.510 --> 00:22:30.490
so we name it converter.

00:22:30.620 --> 00:22:33.410
You see there's a pop-up which
will let you choose which

00:22:33.460 --> 00:22:37.750
project to add this target to,
but we only have one open project.

00:22:38.770 --> 00:22:41.140
Let's go ahead and finish.

00:22:41.200 --> 00:22:43.650
And we're going to close the
info panel that's open for us.

00:22:43.820 --> 00:22:47.670
And you can see it's
added a second target.

00:22:47.780 --> 00:22:51.010
This target has a different icon
because it's of a different type.

00:22:51.130 --> 00:22:52.950
This is not an application target.

00:22:53.140 --> 00:22:55.330
It's a framework target.

00:22:55.960 --> 00:22:58.160
Let's go ahead and finish.

00:22:58.240 --> 00:23:00.840
And we're going to close the
info panel that's open for us.

00:23:00.840 --> 00:23:04.800
And you can see it's
added a second target.

00:23:05.000 --> 00:23:07.190
This target has a different icon
because it's of a different type.

00:23:07.360 --> 00:23:12.290
Those phases process the
files that the target needs to

00:23:12.480 --> 00:23:15.100
process to build its product.

00:23:16.200 --> 00:23:37.100
[Transcript missing]

00:23:37.570 --> 00:23:40.140
There's also the compile sources phase.

00:23:40.200 --> 00:23:42.060
That's pretty self-explanatory.

00:23:42.060 --> 00:23:45.090
If we click on that,
we can see the source files that we

00:23:45.090 --> 00:23:47.860
will compile when we build this target.

00:23:48.980 --> 00:23:55.780
Finally, this target has a link
binaries with libraries phase.

00:23:55.820 --> 00:23:58.980
You can see we have one framework,
the Cocoa framework,

00:23:59.030 --> 00:24:02.270
that it's going to link against
when we build this target.

00:24:02.840 --> 00:24:08.140
Well, we need to link this application
target against our converter framework.

00:24:08.200 --> 00:24:11.110
And we need to make sure that our
converter framework actually builds some

00:24:11.110 --> 00:24:12.730
source files that we're going to use.

00:24:12.890 --> 00:24:16.510
So let's start out by adding the
source files that we need for our

00:24:16.510 --> 00:24:18.700
converter target to the project.

00:24:18.800 --> 00:24:21.060
We're going to go to the finder.

00:24:22.000 --> 00:24:25.580
And we have a couple source files
here already that we've written.

00:24:25.800 --> 00:24:29.250
You remember how I said the project
contains all the files that are

00:24:29.250 --> 00:24:33.290
related to your deliverable for
all the targets in the project?

00:24:33.420 --> 00:24:37.490
We can just add these files to
the same classes group that the

00:24:37.490 --> 00:24:40.070
other target source files are in.

00:24:40.410 --> 00:24:42.580
It'll give us a couple options,
none of which we need

00:24:42.580 --> 00:24:44.430
to change right now,
but there is one we do

00:24:44.430 --> 00:24:48.220
need to pay attention to,
which is the target membership.

00:24:48.320 --> 00:24:52.500
We want the converter target
to process these files,

00:24:52.500 --> 00:24:56.240
and we don't want our application
target to process these files.

00:24:56.240 --> 00:24:58.010
So we'll make sure just
the converter is checked.

00:24:58.080 --> 00:24:59.350
Go ahead and finish.

00:25:01.490 --> 00:25:04.520
And it adds these files
to the project for us.

00:25:04.640 --> 00:25:08.400
Chris is going to quickly fix up
the header role for our header,

00:25:08.540 --> 00:25:12.590
and you can learn more about what that
means in one of our later sessions.

00:25:13.860 --> 00:25:17.240
Now we need to make sure that we
link against this converter framework

00:25:17.660 --> 00:25:20.770
when we build our application.

00:25:20.900 --> 00:25:24.340
Well, if you click on the Products group,
you'll see that it's added the

00:25:24.340 --> 00:25:27.050
build product that this converter
target is going to build,

00:25:27.140 --> 00:25:29.550
the converter.framework.

00:25:30.040 --> 00:25:34.680
We can just take that and drag it
into the link binaries with libraries

00:25:34.680 --> 00:25:39.710
build phase of our application target,
and that will tell our application to

00:25:39.710 --> 00:25:45.890
link against the built converter dot
framework when you build the application.

00:25:46.730 --> 00:25:49.710
But we haven't actually
built that framework yet.

00:25:50.020 --> 00:25:53.200
If I was to hit Build right now, well,
there are two different targets.

00:25:53.200 --> 00:25:55.270
Which one is it going to build?

00:25:56.170 --> 00:25:58.860
There's the notion of an active target.

00:25:58.930 --> 00:26:03.690
If you go to the project menu,
you'll see set active target,

00:26:03.880 --> 00:26:06.860
and we can choose which
target is currently active.

00:26:06.900 --> 00:26:11.360
The active target is the target that
will be built when you click build.

00:26:13.060 --> 00:26:14.500
We're trying to build
our application here,

00:26:14.500 --> 00:26:18.030
so let's leave the application
as the active target.

00:26:18.170 --> 00:26:21.670
But we also want to build our framework
when we build our application.

00:26:21.680 --> 00:26:23.920
And in fact,
if we ever change the framework and

00:26:23.920 --> 00:26:26.640
go over to build the application,
we want to make sure that

00:26:26.640 --> 00:26:29.660
the latest version of the
framework is built along with it.

00:26:29.800 --> 00:26:33.260
So let's set up a target dependency.

00:26:33.330 --> 00:26:39.720
That'll make the framework target
automatically build whenever we

00:26:39.720 --> 00:26:40.260
build our application target.

00:26:40.630 --> 00:26:45.350
To do that, we're going to open an info
panel on the application target.

00:26:45.400 --> 00:26:48.380
You can do that by selecting
the application target in

00:26:48.380 --> 00:26:51.370
the Groups and Files pane,
and clicking on the Info

00:26:51.370 --> 00:26:56.540
button in the toolbar,
or the keyboard shortcut is Command-I.

00:26:56.570 --> 00:27:00.220
And it'll open up a panel
with several tabs here.

00:27:00.250 --> 00:27:02.000
Here we want to go to the General tab.

00:27:02.020 --> 00:27:06.200
And you see that there's a
large box for dependencies,

00:27:06.230 --> 00:27:09.230
with a plus and minus
button at the bottom.

00:27:10.130 --> 00:27:14.020
Let's click the plus button,
and it'll give us a list of all the

00:27:14.020 --> 00:27:19.720
available targets that we could make
this application target depend on.

00:27:19.990 --> 00:27:22.420
We'll choose the converter target.

00:27:22.460 --> 00:27:24.280
Go ahead and create that dependency.

00:27:24.430 --> 00:27:26.300
We can close our info panel.

00:27:26.300 --> 00:27:28.020
And let's see what happens when we build.

00:27:28.020 --> 00:27:30.710
Let's open up the build results window.

00:27:32.490 --> 00:27:36.000
And let's go ahead and click build.

00:27:36.220 --> 00:27:41.620
And you can see it builds--
if we scroll up a little bit,

00:27:41.680 --> 00:27:45.050
you can see it builds the
converter framework first,

00:27:45.060 --> 00:27:48.060
and then it builds our
application target.

00:27:48.120 --> 00:27:50.630
Let's try and run it
and see if it worked.

00:27:51.750 --> 00:27:52.980
Here's our converter.

00:27:52.980 --> 00:27:55.360
It's supposed to be 69 degrees
in San Francisco today,

00:27:55.360 --> 00:27:58.600
so we can type that in,
and we can see what that is in Celsius.

00:27:58.600 --> 00:28:02.780
So there's a two-target
project with a dependency.

00:28:02.830 --> 00:28:06.880
One's linking against the other,
but we have the source files for

00:28:06.970 --> 00:28:09.860
both targets in the same project.

00:28:10.000 --> 00:28:12.350
Let's go back to our slides.

00:28:12.380 --> 00:28:16.300
There's going to be time
for questions at the end.

00:28:16.300 --> 00:28:18.660
We'll get to that, though.

00:28:23.100 --> 00:28:25.760
So there's some settings which
control how your targets are

00:28:25.760 --> 00:28:28.280
built when you click build.

00:28:28.280 --> 00:28:32.380
Things like,
what do I want to name the built product?

00:28:32.450 --> 00:28:35.600
Do I want to generate debug symbols?

00:28:36.160 --> 00:28:38.540
What architectures do
I want to build for?

00:28:38.610 --> 00:28:40.600
These are called build settings.

00:28:40.650 --> 00:28:44.260
And since you generally have different
sets of build settings that you

00:28:44.260 --> 00:28:46.270
want to use at different times,

00:28:46.360 --> 00:28:49.050
For example,
when I'm building day to day,

00:28:49.220 --> 00:28:51.930
I may just want to build for whatever
architecture I'm currently on.

00:28:52.230 --> 00:28:57.280
So I can quickly edit, build, debug,
edit, build, debug.

00:28:57.310 --> 00:28:58.840
But then when I release,
I need to make sure that

00:28:58.840 --> 00:29:00.460
I'm building universal.

00:29:00.530 --> 00:29:05.310
So I need different settings
for releasing my project

00:29:05.380 --> 00:29:08.560
and for building day to day.

00:29:08.580 --> 00:29:13.300
These sets of build settings that we
give you are called build configurations.

00:29:14.680 --> 00:29:16.940
Each build setting in
a build configuration,

00:29:16.940 --> 00:29:22.590
these build settings are kind of akin
to makefile variables in a makefile.

00:29:22.890 --> 00:29:26.860
Each build setting has a
makefile variable-like name,

00:29:26.910 --> 00:29:29.440
all caps with underscores
instead of spaces,

00:29:29.680 --> 00:29:33.570
and also a more verbose,
readable name that tells you

00:29:33.570 --> 00:29:36.300
what the setting actually is.

00:29:38.530 --> 00:29:43.550
And each project has a set of build
configurations with these settings.

00:29:44.410 --> 00:29:49.120
Whereas where each configuration will
set the settings for the same project,

00:29:49.220 --> 00:29:52.940
same source files you're going to build,
but each configuration will let

00:29:52.940 --> 00:29:54.290
you build it in a different way.

00:29:54.300 --> 00:29:57.350
Let's go to our demo,
and I'll show you what I mean.

00:29:57.400 --> 00:30:05.140
We're going to go ahead and
open up our next demo project.

00:30:05.220 --> 00:30:06.370
Here we go.

00:30:11.290 --> 00:30:13.320
And here,
I told you before that the root group,

00:30:13.450 --> 00:30:17.780
that project icon with the name of the
project and the groups and files tree,

00:30:17.780 --> 00:30:19.820
that that represented the project.

00:30:19.900 --> 00:30:22.630
Well, in fact,
if we open an info panel on that,

00:30:22.630 --> 00:30:25.210
it'll give us the
settings for the project.

00:30:27.090 --> 00:30:29.360
One of those tabs is
the Configurations tab.

00:30:29.510 --> 00:30:32.950
We can go ahead and click
on the Configurations tab.

00:30:33.590 --> 00:30:37.630
And you can see the different build
configurations we have in this project.

00:30:37.730 --> 00:30:39.060
Debug, release.

00:30:39.350 --> 00:30:40.790
Pretty simple.

00:30:40.890 --> 00:30:44.260
These are the configurations you'll get
by default when you create a new project.

00:30:44.420 --> 00:30:47.720
But you can add new ones by
duplicating an existing configuration.

00:30:47.720 --> 00:30:50.160
You can remove them, and so forth.

00:30:50.270 --> 00:30:52.690
Let's go over to the Build Settings tab.

00:30:52.900 --> 00:30:55.540
So each of those configurations
has a set of build settings.

00:30:55.610 --> 00:31:00.440
You can see the human readable
friendly name on the left,

00:31:00.510 --> 00:31:03.030
and you can see the value on the right.

00:31:03.240 --> 00:31:05.810
And you notice some of these are bold,
some of them aren't bold.

00:31:06.000 --> 00:31:06.490
What's that mean?

00:31:06.500 --> 00:31:10.530
Well, the ones that aren't bold,
they have the base value

00:31:10.650 --> 00:31:13.800
that you get if you haven't
explicitly set your own value.

00:31:15.660 --> 00:31:17.830
The ones that are bold,
those settings have been

00:31:17.840 --> 00:31:19.010
customized in the project.

00:31:19.090 --> 00:31:21.740
A new value has been set there
that's different than the base value.

00:31:25.380 --> 00:31:29.460
We can go up to the collections pop-up,
and there's a customized settings option.

00:31:29.460 --> 00:31:34.290
And that'll show you all the settings
that we have customized in this project.

00:31:34.290 --> 00:31:37.450
And when you create a new project,
it'll come with some customized settings.

00:31:37.450 --> 00:31:41.660
So this is a quick way to find
the settings that you've changed.

00:31:44.140 --> 00:31:48.900
Now, say in this application, we want to,
when we build day-to-day

00:31:48.900 --> 00:31:52.100
for debugging purposes,
have some debugging log statement.

00:31:52.100 --> 00:31:55.070
But when we release it to our customers,
we don't want that debugging

00:31:55.080 --> 00:31:56.180
information logged.

00:31:56.240 --> 00:31:57.570
It's a pretty common thing to do, right?

00:31:57.940 --> 00:32:03.190
So one way people do that often is
by using a preprocessor directive

00:32:03.810 --> 00:32:06.090
to turn on and off debug logging.

00:32:06.090 --> 00:32:11.820
If we go back to our project window and
open up our source file and scroll down,

00:32:11.820 --> 00:32:15.970
you can see that we have a
preprocessor directive that makes the

00:32:16.100 --> 00:32:19.860
debugging log statement conditional
on whether or not the debug

00:32:19.860 --> 00:32:22.360
preprocessor macro has been defined.

00:32:25.780 --> 00:32:28.190
So how do we control whether
that macro is defined?

00:32:28.200 --> 00:32:32.710
We want it defined when we're debugging,
not defined when we're releasing.

00:32:32.820 --> 00:32:36.320
So let's use the debug and
release configurations.

00:32:36.440 --> 00:32:39.400
Let's go ahead and
close this source file,

00:32:39.470 --> 00:32:42.990
go back and open an info
panel on the project.

00:32:43.790 --> 00:32:46.820
And let's show all our settings again.

00:32:46.930 --> 00:32:48.810
Well,
we want to set a preprocessor macro.

00:32:48.810 --> 00:32:50.930
What's the easiest way to
figure out how to do that?

00:32:51.020 --> 00:32:53.810
There's a little filter
box in the info panel here.

00:32:54.060 --> 00:32:57.620
And if we just try
typing in preprocessor,

00:32:57.620 --> 00:32:59.840
it'll filter down the
available build settings.

00:33:00.410 --> 00:33:01.510
We can find what we want.

00:33:01.660 --> 00:33:03.140
Well, look there near the bottom.

00:33:03.140 --> 00:33:04.660
It says preprocessor macros.

00:33:04.660 --> 00:33:08.400
If we click on that,
you notice in the bottom,

00:33:08.560 --> 00:33:11.730
it describes our build setting for us.

00:33:12.170 --> 00:33:14.850
The end of the description,
there's also that all caps

00:33:14.870 --> 00:33:16.720
with underscores name.

00:33:16.780 --> 00:33:20.610
That's the make file variable
like name of this build setting.

00:33:21.330 --> 00:33:22.750
Let's go ahead and edit
that build setting.

00:33:22.800 --> 00:33:27.380
Let's actually close that quickly.

00:33:27.540 --> 00:33:32.100
Let's take a look at-- you can see
there's a little pop-up that shows

00:33:32.110 --> 00:33:33.650
which configuration we're editing.

00:33:33.700 --> 00:33:36.260
We're currently editing
the debug configuration.

00:33:36.370 --> 00:33:38.970
It's important to know
which one we're looking at.

00:33:39.110 --> 00:33:40.780
Let's go ahead and edit that again.

00:33:40.810 --> 00:33:45.270
And let's set debug equals
1 as a preprocessor macro

00:33:45.890 --> 00:33:48.300
for the debug configuration.

00:33:50.840 --> 00:33:53.500
And you can see that that's
turned bold if we deselect it.

00:33:53.500 --> 00:33:57.800
So you can see, indicating that we've
customized that setting.

00:33:58.290 --> 00:34:01.950
If we select the release configuration,
you'll see it turns unbold

00:34:01.950 --> 00:34:04.740
and no longer has a value,
because we haven't set one

00:34:04.740 --> 00:34:06.390
for that configuration.

00:34:07.310 --> 00:34:11.120
Now, you remember I told you around
the last demo that the project

00:34:11.210 --> 00:34:15.640
contains the settings that are
general for all your development,

00:34:15.640 --> 00:34:20.540
but the targets contain the settings
specific to one build product?

00:34:20.580 --> 00:34:22.840
There are settings at the target level,
too.

00:34:22.980 --> 00:34:26.710
And if we click on our project
window and click on our target,

00:34:26.890 --> 00:34:30.910
open an info panel,
you can see it's a parallel

00:34:30.910 --> 00:34:32.810
set of build settings.

00:34:33.070 --> 00:34:35.420
It's the same list of build settings.

00:34:36.620 --> 00:34:39.690
Anything you've set at the
project level is going to be

00:34:39.690 --> 00:34:42.060
inherited at the target level.

00:34:42.310 --> 00:34:45.130
This is something that confuses
a lot of people new to Xcode.

00:34:45.130 --> 00:34:47.000
So it's something
I really want to stress.

00:34:47.000 --> 00:34:48.480
It's a good takeaway.

00:34:48.480 --> 00:34:52.410
When you're trying to set a setting to
control something about your product,

00:34:52.480 --> 00:34:56.210
if you set it at the project level,
all your targets in your

00:34:56.210 --> 00:34:58.550
project will inherit that value.

00:34:58.550 --> 00:35:02.630
If you set it at the target level,
only that one target

00:35:02.630 --> 00:35:04.490
will use the setting.

00:35:04.490 --> 00:35:09.290
And anything set at the target
level overrides the value

00:35:09.290 --> 00:35:11.710
set at the project level.

00:35:13.230 --> 00:35:16.550
So when you go to set some setting,
when you're working with Xcode,

00:35:16.720 --> 00:35:19.600
you maybe double-click on that project
and set the setting and hit build,

00:35:19.600 --> 00:35:21.100
and it doesn't do what you expect.

00:35:21.160 --> 00:35:26.290
Make sure to check the target and see
if you've overridden that build setting.

00:35:28.670 --> 00:35:33.600
Now here, we set that preprocessor macros
setting at the project level.

00:35:33.660 --> 00:35:37.840
What if we filter on the target
for preprocessor again and

00:35:37.840 --> 00:35:39.990
see what value it has now?

00:35:43.220 --> 00:35:44.900
You can see we're looking
at the debug configuration,

00:35:45.030 --> 00:35:47.320
and there it says debug equals one.

00:35:47.370 --> 00:35:48.790
But it's not bold.

00:35:48.820 --> 00:35:52.240
It's because we customized
it at the project level,

00:35:52.240 --> 00:35:55.510
and it's inheriting it
at the target level.

00:35:55.540 --> 00:35:57.180
If we were to set a value
at the target level,

00:35:57.180 --> 00:35:58.110
it would be bold there.

00:35:58.110 --> 00:35:59.360
It would no longer inherit.

00:35:59.360 --> 00:36:02.110
And if we select the release
configuration for the target,

00:36:02.110 --> 00:36:04.300
you can see that setting
is no longer there.

00:36:06.060 --> 00:36:11.500
Let's close both info panels,
and let's try building and running.

00:36:15.600 --> 00:36:49.800
[Transcript missing]

00:36:52.750 --> 00:36:55.360
You can see we printed
out our debug statement.

00:36:55.410 --> 00:36:57.280
Pretty simple.

00:36:57.430 --> 00:37:00.500
One other thing you may want to
be especially aware of-- let's

00:37:00.520 --> 00:37:03.360
open up our project info panel.

00:37:03.380 --> 00:37:05.780
When you're building an Xcode,
you really want to make sure

00:37:05.780 --> 00:37:09.300
that you're going to be building
universal when you release.

00:37:09.630 --> 00:37:12.580
So that architecture setting
happens to be the top setting

00:37:12.580 --> 00:37:14.460
when you open up an info panel.

00:37:14.510 --> 00:37:16.940
That's how you're going
to build Universal.

00:37:17.010 --> 00:37:19.420
If we double click on
this setting to edit it,

00:37:19.460 --> 00:37:21.860
we'll get a couple check boxes.

00:37:21.900 --> 00:37:24.390
Let's go ahead and click,
make sure both are checked.

00:37:24.540 --> 00:37:27.190
So we're going to turn
on the Intel check box.

00:37:27.260 --> 00:37:27.800
Click OK.

00:37:28.210 --> 00:37:30.860
This will make us build
for both architectures,

00:37:30.860 --> 00:37:32.350
so we build Universal.

00:37:32.360 --> 00:37:34.270
Let's go back to our slides.

00:37:43.520 --> 00:37:46.260
So you've been editing for a while,
debugging.

00:37:46.260 --> 00:37:50.660
You think you've got your project
ready to deliver to your customers.

00:37:50.660 --> 00:37:54.740
But there are a whole bunch of symbols
here you may need to worry about.

00:37:54.750 --> 00:37:57.330
You may want to make sure
that your product is ready

00:37:57.330 --> 00:37:58.740
to give to your customers.

00:37:58.930 --> 00:37:59.980
That's where stripping comes in.

00:37:59.980 --> 00:38:06.470
There are three types of stripping,
conceptually,

00:38:06.470 --> 00:38:06.470
that you'll want to worry about.

00:38:07.060 --> 00:38:10.000
First, there's dead code stripping.

00:38:10.070 --> 00:38:13.100
If you have any code in your application
that never actually gets called,

00:38:13.100 --> 00:38:16.740
you don't actually want that in the
product you ship to your customers,

00:38:16.740 --> 00:38:19.100
because it'll make the
resulting binary larger,

00:38:19.100 --> 00:38:20.280
reduce performance.

00:38:20.280 --> 00:38:24.810
So you want to strip
out all that dead code.

00:38:25.770 --> 00:38:29.200
Then you may have debug symbols
that you were generating,

00:38:29.200 --> 00:38:31.060
and you don't want to ship
those to your customers.

00:38:31.110 --> 00:38:33.300
Those will also make
your binary a lot larger,

00:38:33.300 --> 00:38:36.700
and they may reveal things about your
product that you don't want to reveal.

00:38:36.820 --> 00:38:39.900
So you want to strip out debug symbols.

00:38:40.520 --> 00:38:44.280
And finally, the third type,
privacy stripping.

00:38:44.340 --> 00:38:48.460
Well, you may not want your customers to
reverse engineer your application.

00:38:48.630 --> 00:38:51.810
So you may want to strip out all
symbols that don't actually need

00:38:51.930 --> 00:38:53.590
to be in the resulting binary.

00:38:53.590 --> 00:38:57.140
Anything that's not a public entry
point to a framework of yours,

00:38:57.140 --> 00:39:01.400
or almost anything in an application,
that's called privacy stripping.

00:39:02.420 --> 00:39:06.420
Unfortunately, this can be sort of
confusing to set up in Xcode.

00:39:06.490 --> 00:39:09.470
So we're going to step through
and show you all the different

00:39:09.470 --> 00:39:13.360
settings that you're going to
need to manage to correctly set

00:39:13.360 --> 00:39:14.400
up stripping for your product.

00:39:14.400 --> 00:39:18.350
So let's go back to the demo.

00:39:23.910 --> 00:39:25.380
And we've got a project here.

00:39:25.380 --> 00:39:27.240
Let's open up an info
panel on the project.

00:39:27.240 --> 00:39:34.290
There are a myriad of settings that
you're going to have to deal with here.

00:39:34.870 --> 00:39:38.000
If we type in "strip"
into the filter box,

00:39:38.050 --> 00:39:41.240
we'll find a whole bunch
of them to start out with.

00:39:41.350 --> 00:39:44.780
So first you'll see at the top
it says "Dead Code Stripping."

00:39:45.270 --> 00:39:46.350
Well, we want to turn that on.

00:39:46.360 --> 00:39:48.700
And we're currently editing
our release configuration.

00:39:48.700 --> 00:39:50.470
You can see from that pop-up.

00:39:50.690 --> 00:39:53.190
So let's go ahead and turn that on.

00:39:54.430 --> 00:39:57.320
Those of you coming from Code Warrior may
be used to dead code stripping,

00:39:57.320 --> 00:40:00.540
stripping out your dead code before
any linker errors could have occurred.

00:40:00.540 --> 00:40:03.760
Well, in Xcode,
it will link and then dead code strip.

00:40:03.780 --> 00:40:07.960
So if you have any linker errors that
would be caused by your dead code,

00:40:07.960 --> 00:40:09.920
you need to fix those
or remove that code,

00:40:09.920 --> 00:40:12.940
or it won't compile, or it won't link,
rather.

00:40:14.770 --> 00:40:17.200
To do our dead code stripping,
we need to make sure that we build

00:40:17.200 --> 00:40:20.320
with a bunch of debug symbols,
because the linker needs those debug

00:40:20.320 --> 00:40:23.210
symbols to strip out the dead code.

00:40:24.000 --> 00:40:27.030
So let's filter on debug,
and we'll see the settings

00:40:27.160 --> 00:40:29.950
for debug settings.

00:40:30.140 --> 00:40:34.200
First of all, we need to make sure
generate debug symbols is on.

00:40:36.030 --> 00:40:40.540
But we also need to make sure that the
level of debug symbols is set correctly

00:40:41.010 --> 00:40:42.000
to let dead code stripping work.

00:40:42.120 --> 00:40:44.010
It needs full debug symbols.

00:40:44.140 --> 00:40:47.220
All symbols are dash G full.

00:40:47.340 --> 00:40:49.330
So we're going to set that.

00:40:50.520 --> 00:40:52.990
That's all the settings we needed to
set to make dead code stripping work.

00:40:53.080 --> 00:40:56.260
If we were to build in link,
it would strip out dead code now.

00:40:56.320 --> 00:40:59.640
But we just turned on debug symbols,
and we turned on all the debug symbols.

00:40:59.680 --> 00:41:02.520
We don't want to ship that in a release,
so how do we strip the

00:41:02.520 --> 00:41:04.180
debug symbols back out?

00:41:04.260 --> 00:41:07.580
Well, let's type strip back
into our filter box again.

00:41:09.020 --> 00:41:11.800
And you can see there's a
strip link product setting.

00:41:11.880 --> 00:41:14.360
It's currently on.

00:41:14.380 --> 00:41:17.400
That'll strip things
back out of the product,

00:41:17.400 --> 00:41:21.580
like debug symbols,
if deployment post-processing is on.

00:41:21.700 --> 00:41:24.820
Deployment post-processing means
you want to go ahead and strip

00:41:24.930 --> 00:41:26.570
your product and install it.

00:41:26.660 --> 00:41:28.320
Well,
there's a separate setting for that,

00:41:28.320 --> 00:41:30.300
but do all these things
that are conditional on

00:41:30.300 --> 00:41:31.730
deployment post-processing.

00:41:31.920 --> 00:41:35.360
So in your release,
you probably want to have that on.

00:41:37.150 --> 00:41:40.170
We also want to check the strip style.

00:41:40.260 --> 00:41:42.780
Strip style will tell it what
we want to strip out when

00:41:42.780 --> 00:41:45.140
we strip the linked product.

00:41:45.210 --> 00:41:46.900
Well, do we just want to
strip out debug symbols?

00:41:46.970 --> 00:41:49.780
No,
we probably want to do privacy stripping,

00:41:49.780 --> 00:41:50.190
too.

00:41:50.370 --> 00:41:54.320
We want to strip out all those entry
points and symbols that we don't need

00:41:54.320 --> 00:41:57.190
to ship in our finished application.

00:41:57.410 --> 00:42:00.130
So let's make sure that the strip
style is set to all symbols.

00:42:00.300 --> 00:42:01.510
That's what it's set to by default.

00:42:03.290 --> 00:42:05.600
Or maybe,
maybe we're shipping a framework

00:42:06.200 --> 00:42:09.940
and we need some public symbols,
or even an application

00:42:09.940 --> 00:42:14.040
that has a plugin API,
but we don't want all our symbols public.

00:42:14.210 --> 00:42:18.620
Well, then we can choose non-global
symbols from the strip style.

00:42:19.400 --> 00:42:22.360
And that'll strip out
anything that's not global.

00:42:22.450 --> 00:42:23.970
How do we control that?

00:42:24.290 --> 00:42:26.520
Well, there are a couple different ways.

00:42:26.520 --> 00:42:29.420
First of all,
there's an inline compiler directive

00:42:29.420 --> 00:42:32.200
you can use in writing your code.

00:42:32.270 --> 00:42:33.890
Second--

00:42:34.400 --> 00:42:39.940
There's a set of, or two settings,
an exports file setting,

00:42:39.940 --> 00:42:42.340
which we can see if we type
export into the filter box,

00:42:42.340 --> 00:42:45.690
and an unexported symbols file setting.

00:42:45.700 --> 00:42:49.990
We can set these build settings to an
exported symbols file or an unexported

00:42:50.140 --> 00:42:54.920
symbols file that respectively specify
the symbols we wish to export and or

00:42:54.920 --> 00:42:57.480
the symbols we don't want to export.

00:42:59.980 --> 00:43:02.860
Finally, if we type in private
into that filter box,

00:43:02.880 --> 00:43:05.640
there's a setting,
use private extern by default,

00:43:05.750 --> 00:43:09.100
or symbols hidden by
default is the actual name.

00:43:09.120 --> 00:43:14.800
If we turn that on, it'll make everything
non-global by default.

00:43:14.870 --> 00:43:17.620
So that's a whole bunch of build
settings I've just thrown at you.

00:43:17.660 --> 00:43:20.160
Don't expect you to remember that.

00:43:20.190 --> 00:43:24.600
What you really need to take
away is three types of stripping.

00:43:25.060 --> 00:43:28.600
Dead code stripping,
stripping debug symbols,

00:43:28.690 --> 00:43:34.190
stripping privacy stripping,
and how to find those settings.

00:43:34.270 --> 00:43:36.940
You can type in strip
into the filter box,

00:43:36.960 --> 00:43:39.160
make sure stripping is on,
deployment post-processing,

00:43:39.160 --> 00:43:41.500
type in debug,
make sure your debug symbols

00:43:41.500 --> 00:43:44.780
are being generated properly,
export to set your exports file,

00:43:44.780 --> 00:43:47.910
and private if you want to turn
on private extern by default.

00:43:47.910 --> 00:43:50.650
Let's go back to our slides.

00:43:53.710 --> 00:43:56.660
and Chris Espinosa is now
going to take you out with some

00:43:56.660 --> 00:43:59.740
tips on better Xcode usage.

00:44:05.700 --> 00:45:47.600
[Transcript missing]

00:45:48.480 --> 00:45:53.070
Second thing is that a lot of the
Unix files are hidden from end users.

00:45:53.070 --> 00:45:55.300
Well,
how do you get to them if you want to add

00:45:55.300 --> 00:45:57.780
a header file or a library from /usr/lib?

00:45:58.140 --> 00:46:01.510
Well, you just do the open window,
and then you either type

00:46:01.680 --> 00:46:05.790
Command-Shift-G or just the slash key,
and the standard navigation

00:46:05.790 --> 00:46:08.940
panel will let you get directly
to that folder by path name.

00:46:09.120 --> 00:46:13.060
It's a universal way to get to hidden
folders that we want to hide the

00:46:13.060 --> 00:46:17.510
Unix things from the Mac OS X users,
but make them available to the developer.

00:46:17.720 --> 00:46:21.510
So that's a very common trick to use,
is just open,

00:46:21.630 --> 00:46:25.310
type slash or Command-Shift-G,
type in the path,

00:46:25.410 --> 00:46:30.100
and you can get directly to that
header file or that library to include.

00:46:31.010 --> 00:46:36.060
This one comes up about every
month on the Xcode users list.

00:46:36.140 --> 00:46:39.700
When you create a new file
using the new file template,

00:46:39.700 --> 00:46:44.730
it comes up with a placeholder
for your organization name.

00:46:44.740 --> 00:46:48.100
You set that placeholder
with a hidden preference.

00:46:48.150 --> 00:46:51.470
You set it from the terminal
with defaults right.

00:46:51.480 --> 00:46:54.540
This is one of the more poorly
documented parts of Xcode.

00:46:54.540 --> 00:46:57.980
There's one simple line you cut
and paste into your terminal.

00:46:57.980 --> 00:46:59.760
You do it once and it works forever.

00:47:00.360 --> 00:47:03.730
But this is something you need to
go to Google or go to the expert

00:47:03.970 --> 00:47:05.900
preferences document to put in.

00:47:05.900 --> 00:47:10.350
You do this once and every new file
you create will have your organization

00:47:10.350 --> 00:47:14.990
name in it instead of my company name
with double underscores around it.

00:47:18.150 --> 00:47:21.620
This is one that people keep asking us,
why don't you put this into Xcode?

00:47:21.620 --> 00:47:23.220
And we say, well, it's here in Xcode.

00:47:23.220 --> 00:47:25.580
It's called Find Sets.

00:47:25.580 --> 00:47:29.670
You go to the Project Find,
you click the Options button,

00:47:30.010 --> 00:47:33.370
there's a checkbox for
search in files and folders,

00:47:33.370 --> 00:47:36.800
and you can add any folder,
add any path to that,

00:47:36.800 --> 00:47:42.000
and then you can either make a default
find set or a custom find set search in

00:47:42.030 --> 00:47:45.360
arbitrary files and folders on your disk.

00:47:45.450 --> 00:47:49.490
So if you want to search user include,
if you want to search the boost sources,

00:47:49.490 --> 00:47:51.400
if you want to search
your own set of sources,

00:47:51.400 --> 00:47:54.960
you can just add them to this list,
and they'll be searched.

00:47:54.960 --> 00:47:58.990
Similarly, in Xcode Preferences,
there's something to add your own

00:47:58.990 --> 00:48:02.560
list of source files for the open
quickly mechanism if you want

00:48:02.560 --> 00:48:06.770
open quickly to navigate to things
in your sources in other places.

00:48:08.870 --> 00:48:10.920
Finally,
there is a favorites bar in Xcode.

00:48:10.920 --> 00:48:13.880
We don't have tabbed editing
or tabbed navigation,

00:48:13.880 --> 00:48:16.420
but we do have a
favorites bar you can add,

00:48:16.420 --> 00:48:21.980
and you can put selected source files,
header files, documentation,

00:48:21.980 --> 00:48:25.730
even files from outside the project,
like your to-do list of things

00:48:25.730 --> 00:48:29.040
you want to do frequently,
and you can just drag and drop

00:48:29.050 --> 00:48:32.560
them into that favorites bar and
then navigate to them quickly.

00:48:32.560 --> 00:48:36.630
It's a very easy way to jump around
to places that you have to go to

00:48:36.630 --> 00:48:41.960
constantly without having to just have
a finder window open on your desktop.

00:48:45.590 --> 00:48:48.120
So I want to give you a summary
of what we've talked about today.

00:48:48.120 --> 00:48:52.350
We've talked about what an IDE does
and why integration is good in

00:48:52.350 --> 00:48:54.560
your development environment.

00:48:54.560 --> 00:48:57.730
We've talked a little bit about
some differences between the

00:48:57.730 --> 00:49:01.090
Xcode IDE and the IDEs you may
be coming from or familiar with.

00:49:01.140 --> 00:49:04.470
We've taken you on a quick
tour through creating projects,

00:49:04.550 --> 00:49:06.180
editing, and building.

00:49:06.180 --> 00:49:08.840
We didn't touch debugging,
but there are a couple of debugging

00:49:08.960 --> 00:49:11.900
sessions later on in the week
that I highly recommend you go to.

00:49:12.460 --> 00:49:16.760
We've given you some quick tips
and tricks for working in Xcode.