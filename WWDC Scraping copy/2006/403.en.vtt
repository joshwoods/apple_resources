WEBVTT

00:00:11.190 --> 00:00:12.540
Hi, welcome.

00:00:12.540 --> 00:00:14.390
My name is Kevin Armstrong,
and today we're going to be

00:00:14.470 --> 00:00:18.930
talking about authorization
and looking at how that's done,

00:00:19.050 --> 00:00:22.380
looking at a new API we're adding to make
things a little easier for developers.

00:00:22.480 --> 00:00:24.750
And so let's get started.

00:00:24.840 --> 00:00:26.880
So what we're going to learn,
we're going to-- well,

00:00:26.880 --> 00:00:28.240
the first thing is authorization.

00:00:28.240 --> 00:00:28.720
What is it?

00:00:28.920 --> 00:00:30.870
How is it used?

00:00:31.020 --> 00:00:32.840
Why do you want to use it?

00:00:32.880 --> 00:00:35.140
What is an authorization plugin?

00:00:35.370 --> 00:00:40.100
We'll look at how those are written
and how they run in the system.

00:00:40.160 --> 00:00:43.200
And then we'll introduce the
SF authorization plugin view,

00:00:43.200 --> 00:00:46.950
which is new for Leopard,
and go about--look at how one

00:00:46.960 --> 00:00:48.740
of those is written as well.

00:00:48.810 --> 00:00:49.440
So let's get started.

00:00:49.440 --> 00:00:51.100
What is authorization?

00:00:51.140 --> 00:00:56.290
Well, authorization is a process where,
by the user is unidentified,

00:00:56.330 --> 00:00:58.660
their credentials are gathered.

00:00:58.760 --> 00:01:00.600
Those credentials are
authenticated to make sure the

00:01:00.600 --> 00:01:02.970
user is who they say they are.

00:01:03.070 --> 00:01:09.100
Permissions are checked to make sure they
have the right to perform the operation.

00:01:09.100 --> 00:01:13.170
And if all that works out,
then the right is granted.

00:01:13.430 --> 00:01:15.360
What is this used for?

00:01:15.450 --> 00:01:20.260
Well, this is used to confirm that
the user has given permission

00:01:20.260 --> 00:01:23.380
to the app to do something and
has the permission to do that.

00:01:23.400 --> 00:01:30.510
And then it was performed a specific task
such as adding a new user to the system,

00:01:30.590 --> 00:01:34.400
unlocking the screen after
waking up from sleep,

00:01:34.400 --> 00:01:38.840
installing software, burning a CD,
logging into the system,

00:01:38.930 --> 00:01:40.790
and stuff like that.

00:01:40.890 --> 00:01:42.880
So why should you use authorization?

00:01:43.050 --> 00:01:46.400
Well, it allows a system
administrator to control policy.

00:01:46.600 --> 00:01:51.510
So if they wanted to change
the fact-- burning the CD so

00:01:51.510 --> 00:01:53.760
that only admins could do it,
or that nobody could do it,

00:01:53.860 --> 00:01:56.780
that's possible, things like that.

00:01:56.810 --> 00:02:01.600
It also allows the system to use
different authentication mechanisms,

00:02:01.600 --> 00:02:07.420
such as biometric scanners and
card readers and things like that.

00:02:08.010 --> 00:02:10.960
So how is authorization done in Mac OS X?

00:02:10.960 --> 00:02:15.200
Well, an application uses the
security framework to ask for

00:02:15.200 --> 00:02:17.040
the right to perform a task.

00:02:17.040 --> 00:02:20.410
Now they do that by calling a few APIs.

00:02:20.500 --> 00:02:22.500
First is Authorization Create.

00:02:22.500 --> 00:02:24.980
This is how you create
an authorization ref.

00:02:24.980 --> 00:02:27.740
And it takes three other parameters.

00:02:27.760 --> 00:02:32.400
And Apple recommends that you
just set those to some defaults

00:02:32.400 --> 00:02:37.280
so that things are easy to-- so
you don't have problems later on.

00:02:37.280 --> 00:02:41.280
There's a technical Q&A article
about this that you can read.

00:02:41.530 --> 00:02:43.360
But anyway,
so right now with Authorization Create,

00:02:43.360 --> 00:02:47.540
we're going to pass in null,
an empty environment, and default flags,

00:02:47.580 --> 00:02:50.580
and we'll get back the authorization ref.

00:02:50.900 --> 00:04:41.200
[Transcript missing]

00:04:41.420 --> 00:04:44.110
So once you've called
authorization copyrights,

00:04:44.140 --> 00:04:45.780
the result will come back.

00:04:45.820 --> 00:04:50.750
And you'll just check the status,
and if it's authorization success,

00:04:50.970 --> 00:04:55.640
then the user has authorized properly,
provided their credentials,

00:04:55.640 --> 00:04:58.890
and you're now able to perform the task.

00:05:00.080 --> 00:05:03.600
So if you need to get information
from the authorization ref,

00:05:03.600 --> 00:05:09.650
say the user's ID or name,
you can retrieve that in some cases

00:05:09.760 --> 00:05:12.880
with the authorization copy info.

00:05:12.880 --> 00:05:15.340
Again, it takes your authorization ref.

00:05:15.340 --> 00:05:20.370
It takes a tag, which is the name of the
information you want to get back.

00:05:20.580 --> 00:05:23.520
Or you can pass in null to get
all the information available.

00:05:23.520 --> 00:05:28.740
And then you'll get back the
information in the info parameter.

00:05:28.740 --> 00:05:34.100
Then once you've gotten that information,
you can use it how you need to.

00:05:34.210 --> 00:05:35.690
So we've been talking about rights.

00:05:35.770 --> 00:05:37.320
So what is a right?

00:05:37.430 --> 00:05:40.750
Well, a right is a name privilege
that an application requests

00:05:40.750 --> 00:05:41.960
on behalf of the user.

00:05:42.110 --> 00:05:45.560
And they're specified
in the policy database.

00:05:45.970 --> 00:05:50.160
Each write has a name and a
dictionary which specifies how

00:05:50.160 --> 00:05:52.690
the write is to be evaluated.

00:05:52.710 --> 00:05:55.000
So here's an example of a simple write.

00:05:55.000 --> 00:05:56.700
This is the system burn write.

00:05:56.720 --> 00:05:59.020
It has a class and a comment.

00:05:59.020 --> 00:06:03.260
The class is set to allow,
which means always allow this write.

00:06:03.260 --> 00:06:05.560
And the comment, of course,
is a simple little

00:06:05.730 --> 00:06:10.360
description of what it does,
authorization to burn media.

00:06:10.380 --> 00:06:13.730
So this is how you control, you know,
this is what the system checks to see

00:06:13.820 --> 00:06:17.020
if it's allowed to burn some media.

00:06:17.170 --> 00:06:21.040
Now if you set this to deny,
you could prevent anybody from burning,

00:06:21.080 --> 00:06:25.120
and you can also change it so
that only admins or users of a

00:06:25.120 --> 00:06:27.750
certain group could burn media.

00:06:27.880 --> 00:06:30.240
Here's a little more complex write.

00:06:30.240 --> 00:06:33.640
This is the one used to
install to an admin domain,

00:06:33.670 --> 00:06:36.360
you know, such as /applications.

00:06:36.360 --> 00:06:41.490
And here the user, the class is user,
and it's a group is admin,

00:06:41.490 --> 00:06:43.020
so they have to be in the
admin group to do this.

00:06:43.180 --> 00:06:49.860
The shared key controls whether this
is shared amongst applications or,

00:06:49.860 --> 00:06:54.280
and then the timeout
is set to 300 seconds.

00:06:54.280 --> 00:06:56.280
So after five minutes,
this one will time out,

00:06:56.280 --> 00:06:59.620
and it's not shared amongst other apps.

00:06:59.920 --> 00:07:02.200
So this isn't even more complicated,
right?

00:07:02.360 --> 00:07:07.310
This is the right that's checked
when somebody logs into the system.

00:07:07.410 --> 00:07:08.550
System login console.

00:07:08.710 --> 00:07:10.860
And the class here is
evaluate mechanisms.

00:07:10.870 --> 00:07:16.450
And this means that the system will go
through each of the mechanisms specified,

00:07:16.450 --> 00:07:20.290
make sure that the user
is allowed by each one,

00:07:20.500 --> 00:07:25.310
and when it's done,
only then are they allowed to log in.

00:07:25.420 --> 00:07:28.570
So here you can see
the list of mechanisms.

00:07:28.790 --> 00:07:31.660
Now if you need to add
a write to the system,

00:07:31.880 --> 00:07:35.340
you can use the authorization db.h.

00:07:35.340 --> 00:07:38.400
Now we really suggest you do use this.

00:07:38.770 --> 00:07:43.450
It has the three functions here.

00:07:43.760 --> 00:07:45.920
Authorization write get,
pass in the name,

00:07:45.920 --> 00:07:48.900
and you'll get back the definition.

00:07:48.960 --> 00:07:52.790
Authorization write set,
and you pass in a definition.

00:07:53.090 --> 00:07:58.570
You have the ability to set some
of the prompts that'll be shown in

00:07:58.570 --> 00:08:01.980
the standard authorization dialog.

00:08:01.980 --> 00:08:04.860
It'll provide even
localizations for those prompts.

00:08:04.880 --> 00:08:09.280
And then authorization write remove
if you're cleaning up the system and

00:08:09.280 --> 00:08:11.990
need to get rid of it or change it.

00:08:12.420 --> 00:08:16.290
Now the benefits of using this
API are that it makes modification

00:08:16.350 --> 00:08:17.690
easier and more convenient.

00:08:17.690 --> 00:08:21.090
It's also safer since you're not
parsing the database yourself

00:08:21.150 --> 00:08:22.550
and making changes directly.

00:08:22.600 --> 00:08:29.740
It uses the authorization system
so that it can ask for the proper

00:08:29.740 --> 00:08:32.840
permissions when necessary,
so you don't have to write a

00:08:32.840 --> 00:08:34.600
privilege tool for your installer.

00:08:34.600 --> 00:08:39.240
And when you create a right definition,
it doesn't require admin privileges,

00:08:39.330 --> 00:08:41.580
but you do have to have a unique name.

00:08:41.600 --> 00:08:45.710
And one of the caveats here is
that there is wildcard characters,

00:08:45.710 --> 00:08:48.590
so for instance, com.apple.

00:08:48.600 --> 00:08:53.770
That dot at the end is the wildcard,
which means you can't add com.apple.blah.

00:08:54.750 --> 00:08:58.660
If you want to look at the policy
database on your computer right now,

00:08:58.740 --> 00:09:01.700
it's in the Etsy authorization file.

00:09:01.750 --> 00:09:05.140
And this is just an XML file
that contains the information

00:09:05.140 --> 00:09:07.520
about authorization.

00:09:07.580 --> 00:09:11.720
Again,
don't try to modify this file directly.

00:09:12.010 --> 00:09:15.640
So we've been talking about mechanisms,
and I showed you the mechanism list.

00:09:15.720 --> 00:09:17.030
So what are they?

00:09:17.180 --> 00:09:21.390
Well, a mechanism is a path of execution
through an authorization plugin.

00:09:21.530 --> 00:09:25.700
And each one in this list
is specified by a plugin ID,

00:09:25.740 --> 00:09:30.670
a colon, a mechanism ID,
and optionally comma privileged.

00:09:31.010 --> 00:09:35.120
And the comma privilege
specifies where it will run.

00:09:35.180 --> 00:09:43.570
GUI app, or GUI plugins and such,
and if they don't need privileged rights,

00:09:43.720 --> 00:09:46.520
they should run in security agent,
and you don't add the privileged.

00:09:46.540 --> 00:09:49.620
If they're going to need to
run as root for some reason,

00:09:49.640 --> 00:09:52.630
then they'll run an authorization host.

00:09:53.580 --> 00:09:58.800
Now as mechanisms run,
each one runs alone and then the

00:09:58.920 --> 00:10:00.700
control is passed on to the next.

00:10:00.700 --> 00:10:03.290
And that happens when
the set result is done.

00:10:03.400 --> 00:10:07.840
And when the mechanism
sets a result of allow,

00:10:07.840 --> 00:10:11.650
control is passed on
to the next mechanism.

00:10:11.650 --> 00:10:15.320
And so on and so forth until
you get to the last one.

00:10:15.530 --> 00:10:19.280
During the execution of these mechanisms,
there's two sets of information.

00:10:19.280 --> 00:10:21.620
There's context values and hint values.

00:10:21.650 --> 00:10:24.720
And that information also flows
from the first to the last.

00:10:24.890 --> 00:10:28.110
So once control is
passed to mechanism two,

00:10:28.150 --> 00:10:32.420
mechanism one can no longer
set values or get values.

00:10:33.430 --> 00:10:43.340
So context values are authoritative
bits of data during the execution cycle.

00:10:43.340 --> 00:10:45.640
They're read and written by mechanisms,
and they're used to transfer

00:10:45.660 --> 00:10:47.110
data from one to the next.

00:10:47.210 --> 00:10:50.890
And they have access
controls on them so that the

00:10:50.960 --> 00:10:54.740
authorization copy info function,
they will or will not

00:10:54.740 --> 00:10:57.810
be available to that.

00:10:58.950 --> 00:11:00.500
Hint values are very similar.

00:11:00.500 --> 00:11:05.330
They are used to pass information,
but there will be a way for applications

00:11:05.420 --> 00:11:10.160
to pass information into a mechanism,
and that's done through the

00:11:10.160 --> 00:11:11.890
authorization environment.

00:11:12.660 --> 00:11:15.850
Two of the ones that are used
commonly are the environment

00:11:15.850 --> 00:11:20.320
prompt and the environment icon,
just to provide some customization

00:11:20.320 --> 00:11:23.090
of the standard authorization dialog.

00:11:23.790 --> 00:11:27.650
So what's going on behind the
scenes with an authorization?

00:11:27.750 --> 00:11:31.280
Well, when my application calls
authorization copyrights,

00:11:31.310 --> 00:11:34.040
request is sent to the security server.

00:11:34.070 --> 00:11:38.620
And that is done by SecurityD,
that is the security server now.

00:11:38.620 --> 00:11:41.420
So system preferences is
passed to the security server.

00:11:41.440 --> 00:11:45.650
The security server then queries the
policy database and gets the right,

00:11:45.650 --> 00:11:49.720
so it knows how to
process and handle that.

00:11:49.890 --> 00:11:53.410
Security server then launches
security agent and authorization

00:11:53.410 --> 00:11:59.380
host in order to work with those
applications to process the right.

00:11:59.420 --> 00:12:04.480
Security agent gets the
non-privileged mechanisms,

00:12:04.500 --> 00:12:06.760
and authorization host
gets the privileged ones.

00:12:06.840 --> 00:12:09.880
So when security agent is run,
it'll put up the standard

00:12:09.880 --> 00:12:13.980
authorization dialogue,
get the user's identity and credentials,

00:12:14.300 --> 00:12:17.710
and then it will write
the context values,

00:12:17.870 --> 00:12:21.490
the identity credentials to the context.

00:12:21.800 --> 00:12:25.620
It'll then call setResult,
and that information will get passed

00:12:25.620 --> 00:12:30.980
over to the authorization host,
and it will authenticate the credentials,

00:12:31.120 --> 00:12:34.000
and when it's done,
it will call setResult,

00:12:34.000 --> 00:12:37.920
and then control will return
to the security server.

00:12:38.030 --> 00:12:44.780
The security server will then return
the result to the application,

00:12:44.860 --> 00:12:49.340
and the application can then check
the status and perform the task.

00:12:50.680 --> 00:12:52.640
So we've been talking about
authorization plugins,

00:12:52.750 --> 00:12:55.760
so let's look at how
to write one of those.

00:12:55.870 --> 00:12:59.530
So what you do is you create
an authorization plugin

00:12:59.530 --> 00:13:02.110
using Coco's bundle template.

00:13:02.500 --> 00:13:06.680
And the first thing you'll need
is the entry point function.

00:13:06.690 --> 00:13:10.380
The authorization plugin
create takes three parameters.

00:13:10.390 --> 00:13:12.920
There are authorization callbacks,
which you'll need to save for later.

00:13:12.920 --> 00:13:17.870
This is a structure with a list of
function pointers that you use to talk

00:13:17.870 --> 00:13:20.960
to authorization hosts or security agent.

00:13:20.970 --> 00:13:23.920
The authorization plugin ref,
which is just the value that

00:13:23.920 --> 00:13:28.310
you've chosen-- it's usually a
pointer to an object or structure.

00:13:28.660 --> 00:13:32.580
And then Authorization Plugin Interface
is a list of functions that are in your

00:13:32.580 --> 00:13:37.970
plugin that you will return so that
Authorization Host and Security Agent can

00:13:37.970 --> 00:13:39.500
communicate with your plugin.

00:13:39.500 --> 00:13:41.470
So let's look at that
structure real quick.

00:13:41.490 --> 00:13:43.390
The first item in it is a version.

00:13:43.520 --> 00:13:47.100
This tells the Authorization
Host and Security Agent which

00:13:47.100 --> 00:13:52.150
version you're running,
which version of the

00:13:52.180 --> 00:13:57.500
structure you support,
so it knows which functions you have.

00:13:57.500 --> 00:13:59.400
And then there's a list
of functions after that,

00:13:59.400 --> 00:14:00.500
and let's look at those.

00:14:00.500 --> 00:14:03.500
So Plugin Destroy,
this one's kind of self-explanatory.

00:14:03.630 --> 00:14:06.280
This tells your plugin
that it's being destroyed,

00:14:06.280 --> 00:14:10.500
and then it gives you a chance
to clean up and release memory,

00:14:10.500 --> 00:14:12.490
stop talking to hardware, or whatever.

00:14:12.500 --> 00:14:16.110
Mechanism Create,
this is where your ID comes in

00:14:16.110 --> 00:14:20.350
so you'll know which mechanism
is about to be executed.

00:14:20.350 --> 00:14:22.500
You'll also get an
Authorization Engine Ref,

00:14:22.500 --> 00:14:26.500
which is something you need to save
because you'll pass that back to

00:14:26.500 --> 00:14:29.360
Authorization Host or Security Agent.

00:14:29.450 --> 00:14:34.500
And you'll return a Mechanism Ref,
which is like the plugin ref.

00:14:34.500 --> 00:14:39.210
It's just the value of your choosing.

00:14:39.210 --> 00:14:39.210
And you'll return a Mechanism Ref,
which is like the plugin ref.

00:14:39.210 --> 00:14:39.210
It's just the value of your choosing.

00:14:39.530 --> 00:14:42.430
The mechanism invoke,
when this is called,

00:14:42.440 --> 00:14:45.440
it tells the mechanism to run.

00:14:45.460 --> 00:14:48.010
And when you're finished,
you'll call setResult.

00:14:48.020 --> 00:14:51.580
Now, if you're showing UI or something,
you may want your UI to

00:14:51.580 --> 00:14:54.060
run on the run loop,
which is fine.

00:14:54.060 --> 00:14:56.960
You can call setResult any time.

00:14:57.270 --> 00:14:59.650
One note is that when--

00:14:59.810 --> 00:15:04.560
Once you call setResult,
you'll no longer be able to read or

00:15:04.560 --> 00:15:07.190
write context values or hint values.

00:15:07.220 --> 00:15:12.210
And you can't do those either before
your mechanism invoke is called.

00:15:12.430 --> 00:15:14.760
Mechanism deactivate.

00:15:14.760 --> 00:15:16.980
As soon as you get this,
as soon as possible,

00:15:17.040 --> 00:15:22.020
call did deactivate just to
let the host know that you've

00:15:22.500 --> 00:15:24.340
You've received it.

00:15:24.360 --> 00:15:27.240
Mechanism Destroy, again,
self-explanatory.

00:15:27.250 --> 00:15:30.880
It's just the means by-- just tells your
mechanism that it's about to go away

00:15:30.920 --> 00:15:33.490
and that it should clean up anything.

00:15:33.680 --> 00:15:36.740
So let's look at the authorization
callback structure that came in

00:15:36.740 --> 00:15:39.450
with Authorization Plugin Create.

00:15:39.840 --> 00:15:43.400
Again, you should keep, you know,
be sure to keep a pointer to this.

00:15:43.400 --> 00:15:45.640
And this has the
functions like setResult,

00:15:45.710 --> 00:15:49.200
setContextValue,
and so forth that we've been talking

00:15:49.340 --> 00:15:50.850
about along with some others.

00:15:51.000 --> 00:15:54.270
So setResult, this is, you know,
you use this to allow or deny

00:15:54.390 --> 00:15:56.970
continuation of the authorization.

00:15:57.140 --> 00:16:00.010
Once it's called, you can't, you know,
set context values,

00:16:00.090 --> 00:16:04.330
so be sure to set those beforehand.

00:16:05.200 --> 00:16:07.200
context value accessors.

00:16:07.200 --> 00:16:10.220
These are get context value
and set context value.

00:16:10.400 --> 00:16:15.040
And there's, like I said before,
there's access control flags on

00:16:15.040 --> 00:16:20.420
the context values to allow them
to be available to the application

00:16:20.420 --> 00:16:22.990
through authorization copy info.

00:16:23.200 --> 00:16:27.400
Two of them are authorization
context flag extractable

00:16:27.640 --> 00:16:29.900
and context flag volatile.

00:16:30.300 --> 00:16:34.350
Now the hint values, you know,
get hint value, set hint value again.

00:16:34.450 --> 00:16:39.730
Notice they don't have the context flags,
so they can't read anything.

00:16:40.480 --> 00:16:42.360
So once you've created
your authorization plugin,

00:16:42.360 --> 00:16:44.080
you'll want to install it.

00:16:44.100 --> 00:16:48.840
Now they go into System Library,
Core Services, Security Agent Plugins.

00:16:49.110 --> 00:16:52.650
And then you may want to
add a right or change other

00:16:52.650 --> 00:16:56.300
rights in the policy database.

00:16:56.490 --> 00:17:02.350
So you can see here an example of
adding an authorization-- or name and

00:17:02.350 --> 00:17:08.110
password invoke to a mechanism list,
or name and password invoke and an

00:17:08.840 --> 00:17:13.990
authorization to it to make sure that
the credentials came in correctly.

00:17:14.800 --> 00:17:19.480
So now let's talk about the
SF authorization plugin view.

00:17:19.510 --> 00:17:20.210
Why are we doing this?

00:17:20.320 --> 00:17:23.650
Well, the first reason is we wanted
to eliminate the need for

00:17:23.650 --> 00:17:29.600
developers to reproduce Apple's
authorization dialogues.

00:17:29.700 --> 00:17:33.010
There's a lot of-- in the
past when this has been done,

00:17:33.260 --> 00:17:35.480
they've had interesting UI bits.

00:17:35.550 --> 00:17:38.340
And because of that,
we want to create a unified user

00:17:38.340 --> 00:17:39.770
experience for our customers.

00:17:39.930 --> 00:17:45.260
And it also allows us to change
our UI and let people continue

00:17:45.260 --> 00:17:47.270
to see a consistent interface.

00:17:47.540 --> 00:17:54.900
And we can also add functionality and
keep the SPIs that we use private.

00:17:54.990 --> 00:17:57.700
So here's an example
of what this will do.

00:17:57.700 --> 00:17:59.280
This is the login window.

00:17:59.300 --> 00:18:02.630
And you may notice that the password
looks a little different than before.

00:18:02.640 --> 00:18:06.640
And that's because this portion
of it was replaced by the name and

00:18:06.760 --> 00:18:12.470
password example that I've written
that's going to be available.

00:18:12.520 --> 00:18:15.520
And the same thing with the
standard authorization dialogue.

00:18:15.530 --> 00:18:17.020
This section here has been replaced.

00:18:17.020 --> 00:18:24.050
Now as a developer,
if you want to provide UI for

00:18:24.210 --> 00:18:27.620
a fingerprint scanner or
card reader of some sort,

00:18:27.860 --> 00:18:30.220
you can simply provide an
SF authorization plugin

00:18:30.220 --> 00:18:32.060
and replace these portions.

00:18:32.250 --> 00:18:36.080
And this is what we wanted to do.

00:18:36.130 --> 00:18:37.950
So let's look at how
to write one of these.

00:18:38.070 --> 00:18:39.820
Well,
the first thing you do is you add a--

00:18:39.820 --> 00:18:44.890
you add a class to your authorization
plugin and make it a subclass of

00:18:44.890 --> 00:18:47.460
the SF authorization plugin view.

00:18:47.460 --> 00:18:49.200
And we provide a couple of views.

00:18:49.200 --> 00:18:53.340
We have an identity and credentials
view and just a credentials view.

00:18:53.340 --> 00:18:58.780
That goes back to which one of
the dialogues was asking for it.

00:18:58.780 --> 00:19:03.860
There's two methods you have to override,
button pressed and view for type.

00:19:03.950 --> 00:19:05.890
So let's look at button
pressed real quick.

00:19:05.910 --> 00:19:08.340
Button pressed,
you'll be told which button was pressed,

00:19:08.340 --> 00:19:09.780
like either the OK.

00:19:09.780 --> 00:19:12.260
Cancel or login.

00:19:12.260 --> 00:19:15.530
And when you get that,
you'll need to set the user's identity

00:19:15.540 --> 00:19:19.380
and password and then call set result.

00:19:19.380 --> 00:19:21.160
Well, in this case, password.

00:19:21.160 --> 00:19:25.000
In the case of a fingerprint renderer,
you might need to write the

00:19:25.290 --> 00:19:29.230
credentials for the fingerprint
or how that came in or whatever.

00:19:29.240 --> 00:19:34.160
If it was cancel,
then you just say the user canceled.

00:19:34.160 --> 00:19:37.550
View for type is where you
return the appropriate view

00:19:37.830 --> 00:19:39.700
based on which was requested.

00:19:39.740 --> 00:19:42.500
So if you're asking for
the identity credentials,

00:19:42.500 --> 00:19:46.920
you'd return the appropriate
view and so forth.

00:19:46.920 --> 00:19:51.640
The next thing to do in your plugin
is to instantiate the subclass.

00:19:51.640 --> 00:19:54.840
So you have my subclass
Alec in it with callbacks.

00:19:54.840 --> 00:19:58.480
And here you can use the callbacks
and the engine ref that you

00:19:58.540 --> 00:20:03.120
got from authorization plugin
create and mechanism create.

00:20:03.120 --> 00:20:07.370
And you can use the callbacks
and the engine ref that you got

00:20:08.170 --> 00:20:09.410
And then the hard part.

00:20:09.610 --> 00:20:13.410
This is where you have to display the
authorization dialog so that things

00:20:13.410 --> 00:20:18.000
show up on the screen and the user can
use the views that you've provided.

00:20:18.230 --> 00:20:21.370
And it's just simply
my object display view.

00:20:21.530 --> 00:20:26.110
We've tried to make it very simple,
yet very powerful.

00:20:26.480 --> 00:20:29.310
So, just as a recap on this,
what do you need to do?

00:20:29.530 --> 00:20:33.690
Well, you create an authorization plugin.

00:20:34.200 --> 00:20:38.200
You create an SF authorization
plugin view subclass,

00:20:38.340 --> 00:20:41.660
you instantiate the subclass,
and you call display view.

00:20:41.730 --> 00:20:47.050
And that will cause the appropriate
dialog to come up on screen and

00:20:47.640 --> 00:20:52.940
your view will be added to it and
you can use it however you want.

00:20:53.190 --> 00:20:57.390
So let's fill out the
rest of the subclass.

00:20:57.810 --> 00:21:00.310
In Cocoa,
there's this concept of a keyboard loop,

00:21:00.310 --> 00:21:04.290
which is when you're using the Tab key,
you'll move through the

00:21:04.290 --> 00:21:06.280
controls of the dialog.

00:21:06.400 --> 00:21:08.260
Most everybody's probably
familiar with that.

00:21:08.260 --> 00:21:13.900
And so we have a few methods
here to help that along.

00:21:14.090 --> 00:21:18.590
FirstKeyView and LastKeyView,
those will be used to set up the loop,

00:21:18.590 --> 00:21:20.920
and in some cases,
the dialogs will do this

00:21:20.920 --> 00:21:24.840
automatically so that your methods
may not actually be called.

00:21:24.970 --> 00:21:27.840
FirstResponderView, however,
will get called.

00:21:27.860 --> 00:21:31.980
And this is used to determine
which one of the controls you

00:21:31.980 --> 00:21:34.510
want to have active right away.

00:21:34.590 --> 00:21:37.200
So keyboard loop example.

00:21:37.200 --> 00:21:43.320
As I said, in the case of this UI,
the name is the FirstKeyView and

00:21:43.370 --> 00:21:45.020
the password is the LastKeyView.

00:21:45.040 --> 00:21:47.220
You just simply return those.

00:21:47.480 --> 00:21:50.570
In the case of the
FirstResponder example,

00:21:50.570 --> 00:21:53.120
this gets a little more interesting.

00:21:53.370 --> 00:21:58.390
So if you have no name available,
you'd want the user to be able

00:21:58.480 --> 00:22:00.290
to enter their name immediately.

00:22:00.340 --> 00:22:02.970
So you would set the first
responder view to the name.

00:22:03.080 --> 00:22:05.100
If you have a name,

00:22:05.160 --> 00:22:08.200
Then you'll set it to the password view,
and so you can see that in

00:22:08.200 --> 00:22:10.920
the little example code there.

00:22:11.200 --> 00:22:14.980
There are times when it's appropriate
for your controls to be active,

00:22:14.980 --> 00:22:19.740
and the authorization dialogs will call
setEnabled to tell your controls when to

00:22:19.740 --> 00:22:22.140
be enabled and when not to be enabled.

00:22:22.210 --> 00:22:26.840
So you can see here,
all it is is a simple "tell the text

00:22:26.840 --> 00:22:32.660
field in the password text field to
setEnabled with the appropriate flag."

00:22:33.700 --> 00:22:37.100
Now, there are other times when
you'll need to configure your UI.

00:22:37.100 --> 00:22:41.340
Say you might have a countdown
timer or some other...

00:22:42.090 --> 00:22:44.000
There's a lot of things going on,
you know,

00:22:44.000 --> 00:22:45.080
animation or something in your view.

00:22:45.140 --> 00:22:49.900
And what you'll do is,
these three are used for that.

00:22:49.900 --> 00:22:54.030
WillActivateWithUser will be
passed in to tell you that your

00:22:54.030 --> 00:22:56.120
view is about to be activated.

00:22:56.360 --> 00:23:02.200
If the end user information is not nil,
it'll probably contain the user's name

00:23:02.200 --> 00:23:04.820
so that you can add it to your UI.

00:23:05.070 --> 00:23:08.420
Once the view is ready to be used,
you'll get a DidActivate.

00:23:08.420 --> 00:23:12.000
And when it's no longer in use,
you'll get a DidDeactivate.

00:23:13.140 --> 00:23:15.600
Now if you need to have
multiple stages or change the

00:23:15.600 --> 00:23:20.960
view for a particular reason,
you can call Update View.

00:23:20.990 --> 00:23:22.960
This will allow you
to provide a new view.

00:23:23.030 --> 00:23:26.340
The dialogs will call
View for Type again,

00:23:26.370 --> 00:23:29.600
and you'll get the chance to
provide a new view to the dialog,

00:23:29.600 --> 00:23:32.510
and a new one will show up.

00:23:32.550 --> 00:23:35.650
And then if you need to disable
the OK or Cancel buttons,

00:23:35.650 --> 00:23:39.850
you can use
Set Button Enabled to do that.

00:23:39.960 --> 00:23:42.280
So let's go for a quick demo.

00:23:44.980 --> 00:23:48.900
So here we have the name
and password plugin.

00:23:48.900 --> 00:23:50.970
Look at the--

00:23:53.470 --> 00:23:54.540
class interface real quick.

00:23:54.550 --> 00:23:58.540
So you can see I have
a number of views here.

00:23:58.540 --> 00:24:01.030
This is the Identity
and Credentials view.

00:24:01.090 --> 00:24:06.360
We have a Password view
and some other variables.

00:24:06.410 --> 00:24:09.640
The amount of code involved
is really not a whole lot,

00:24:09.640 --> 00:24:12.720
but this does some pretty powerful stuff.

00:24:12.880 --> 00:24:14.600
So here's the button pressed.

00:24:14.600 --> 00:24:18.740
You can see that if I'm using the
Identity and Credentials view,

00:24:18.830 --> 00:24:22.500
use the user name string from that.

00:24:22.750 --> 00:24:25.180
Otherwise,
we'll use the one that was passed in.

00:24:25.190 --> 00:24:27.890
We'll write out the context values.

00:24:28.480 --> 00:24:31.980
In the appropriate cases,
the first key view.

00:24:31.980 --> 00:24:36.920
This is also available as example code,
so you won't have to try to

00:24:36.920 --> 00:24:39.360
copy it all down right now.

00:24:39.360 --> 00:24:40.990
First responder view.

00:24:41.000 --> 00:24:46.110
Again, we'll check to see if the text
field has got any text in it,

00:24:46.110 --> 00:24:50.960
and if not,
we'll use that as the one that is

00:24:50.960 --> 00:24:53.290
available to the user to use first.

00:24:53.360 --> 00:24:58.410
Otherwise, we'll use the password.

00:24:58.410 --> 00:24:58.410
Last key view.

00:24:58.550 --> 00:25:24.540
Set Enabled: Again,
we're just passing along to the

00:25:24.540 --> 00:25:24.540
various controls the Set Enabled.

00:25:24.540 --> 00:25:24.540
Here we're saving the name and
adding it to the name field if

00:25:24.540 --> 00:25:24.540
it's been passed in with the "will
activate with user". View for

00:25:24.540 --> 00:25:24.540
Type returns the appropriate view.

00:25:24.540 --> 00:25:24.540
And our NIT with callbacks
doesn't have anything else to do,

00:25:24.540 --> 00:25:24.540
but it's there.

00:25:25.300 --> 00:25:27.890
Let's look at an example
of this real quick.

00:25:28.160 --> 00:25:33.290
So here I have a little simple app.

00:25:33.290 --> 00:25:33.290
Let's remove this real quick.

00:25:34.020 --> 00:25:37.170
So I've got a bundle,
the name and password bundle,

00:25:37.170 --> 00:25:39.120
I have a mechanism name for it.

00:25:39.170 --> 00:25:42.990
But before I do that,
also notice the right name test right,

00:25:43.000 --> 00:25:46.290
I'm going to add this right
to the policy database.

00:25:46.290 --> 00:25:48.770
So right now there's no right to find.

00:25:48.770 --> 00:25:52.590
So if I add that,
notice it didn't require authorization.

00:25:52.590 --> 00:25:56.680
But it added one that's called,
with a class of allow and a comment

00:25:56.710 --> 00:25:59.010
for testing authorization plugin.

00:25:59.010 --> 00:26:03.060
So if I test that,
the authorization is successful.

00:26:03.540 --> 00:26:05.820
Now a little bit more complex right,
we'll add that.

00:26:05.820 --> 00:26:09.110
And now in this case,
you notice that we're being

00:26:09.400 --> 00:26:16.070
asked to modify the right,
so I have to authorize that.

00:26:17.130 --> 00:26:21.390
So now we have a class of user comment,
the same comment,

00:26:21.390 --> 00:26:23.780
and now it requires group admin.

00:26:23.780 --> 00:26:32.770
So if I test that,
and I change this to test user 001.

00:26:38.940 --> 00:26:42.640
So now it knows that it's not,
that test user is not an admin

00:26:42.900 --> 00:26:44.360
and I need to pay an admin.

00:26:44.360 --> 00:26:47.730
So let's try that again with...

00:26:51.360 --> 00:26:54.540
There, so authorization was
successful at that point.

00:26:54.660 --> 00:26:58.210
So now if I do an even
more complicated write,

00:26:58.750 --> 00:27:01.110
This one I have a mechanism list.

00:27:01.320 --> 00:27:05.500
And we have the name and password bundle.

00:27:05.590 --> 00:27:06.240
Get rid of that.

00:27:06.310 --> 00:27:07.660
Well, that's right.

00:27:07.660 --> 00:27:11.800
We're going to use the name and
password plugin that we wrote

00:27:11.800 --> 00:27:14.890
already and looked at the code for.

00:27:15.310 --> 00:27:18.420
And we're going to use the
invoke mechanism for that.

00:27:18.480 --> 00:27:20.260
And then we're going to
authenticate what we get.

00:27:20.260 --> 00:27:22.000
So test that.

00:27:22.000 --> 00:27:25.300
And so here you can see the new view
that's been added to the dialog.

00:27:28.700 --> 00:27:33.190
And again,
we have all the controls here and stuff.

00:27:37.100 --> 00:27:38.480
Oh, it didn't work great.

00:27:38.490 --> 00:27:42.470
There are some small issues still.

00:27:49.250 --> 00:27:51.360
But you can see it failed.

00:27:51.390 --> 00:27:52.600
Test that again.

00:27:52.600 --> 00:27:55.680
There.

00:27:55.710 --> 00:27:57.670
Authorization was successful that time.

00:27:57.790 --> 00:28:02.060
So just a simple way to add--

00:28:02.190 --> 00:28:08.920
A UI to the standard authorization
dialogs and the login dialogs and all

00:28:08.920 --> 00:28:15.100
the Apple-provided dialogs and use those
instead of having to write your own,

00:28:15.100 --> 00:28:17.910
having to replace Apple's dialogs.

00:28:18.290 --> 00:28:23.310
And also give you a bit of an example
of how the rights work in the policy

00:28:23.330 --> 00:28:27.100
database and why you should use them.

00:28:27.100 --> 00:28:32.900
So, go back over here.

00:28:32.910 --> 00:28:34.930
Back to the slides.

00:28:41.800 --> 00:28:46.820
So if you want to get more information,
the authorization plugin reference

00:28:46.910 --> 00:28:50.040
is available on the website.

00:28:50.040 --> 00:28:53.890
It's probably also on your--

00:28:55.670 --> 00:28:58.030
Documentation in your developer install.

00:28:58.130 --> 00:29:01.020
There's authorization plug-in examples
at developer example security.

00:29:01.020 --> 00:29:05.580
There's one there for a banner sample
that will put up a banner in front of

00:29:05.580 --> 00:29:07.810
log in that you'll have to click through.

00:29:07.820 --> 00:29:11.080
You can set the text on that.

00:29:11.130 --> 00:29:13.540
There's also another one.

00:29:13.710 --> 00:29:17.520
There's a Tech Note authorization
for everyone that's useful.

00:29:17.870 --> 00:29:20.350
And then be careful when
using authorization create.

00:29:20.560 --> 00:29:23.490
The technical Q&A article tells you why.

00:29:23.560 --> 00:29:25.770
To use the default values.

00:29:25.950 --> 00:29:30.890
And then the name and password
example plug-in is available in the

00:29:30.890 --> 00:29:33.520
example code for this year's WWDC.