WEBVTT

00:00:10.120 --> 00:00:10.530
Hi.

00:00:11.160 --> 00:00:16.590
Welcome to session 124,
Connecting Your Application with iChat.

00:00:16.960 --> 00:00:20.800
My name is Jean-Pierre Ciudaad and I'm
part of the iChat engineering team.

00:00:20.840 --> 00:00:25.490
And today is iChat's first
session ever at WWDC and

00:00:25.500 --> 00:00:27.970
hopefully we'll have a lot more.

00:00:29.600 --> 00:00:31.440
Thank you.

00:00:31.460 --> 00:00:33.900
So what are we going to
be talking about today?

00:00:34.220 --> 00:00:36.290
Well, first,
we're going to tell you how you can

00:00:36.290 --> 00:00:40.000
use some of the iChat features and
integrate them in your application,

00:00:40.000 --> 00:00:42.220
how you could do that in Tiger.

00:00:42.240 --> 00:00:44.840
And then we'll talk about how
you can do that in Leopard.

00:00:44.860 --> 00:00:49.260
And we'll talk about the additional
features we have in Leopard.

00:00:49.260 --> 00:00:52.000
At the end of this session,
we'll have 15 minutes to

00:00:52.000 --> 00:00:53.860
answer all your questions.

00:00:53.870 --> 00:00:57.230
So please refrain to ask your
questions until the end of the

00:00:57.250 --> 00:00:59.050
session-- of the presentation,
sorry.

00:00:59.920 --> 00:01:00.410
And

00:01:01.660 --> 00:01:04.540
This afternoon at 2:00 PM,
we will have a lab session where

00:01:04.540 --> 00:01:07.630
you will all be able to meet the
entire iChat engineering team

00:01:07.740 --> 00:01:09.050
and ask any questions you want.

00:01:09.210 --> 00:01:13.500
The lab session will be
located in the Mac OS X lab.

00:01:14.840 --> 00:01:17.650
So let's start right
away with iChat in Tiger.

00:01:17.780 --> 00:01:19.960
So in iChat in Tiger,
you are able to use the

00:01:19.960 --> 00:01:24.870
Instant Message framework to get
information about presence and status

00:01:24.870 --> 00:01:27.490
of all your bodies in the body list.

00:01:28.230 --> 00:01:30.850
We also had some limited
AppleScript support that

00:01:30.850 --> 00:01:34.790
would allow you to log in,
log out, or send text messages and

00:01:34.790 --> 00:01:39.590
also get account status and
information for all your buddies.

00:01:40.900 --> 00:01:42.790
Now, in Leopard, we've done a lot more.

00:01:42.800 --> 00:01:45.600
First,
we've extended the AppleScript support

00:01:45.660 --> 00:01:50.090
to most of the iChat features,
and we're going to talk about

00:01:50.090 --> 00:01:52.380
that extensively a little later.

00:01:52.380 --> 00:01:56.420
In addition to that,
we've added a new API,

00:01:56.420 --> 00:01:58.530
the iChat Theater API,
which is part of the

00:01:58.600 --> 00:01:59.880
Instant Message framework.

00:01:59.940 --> 00:02:06.160
iChat Theater is used to share your
application content using iChat,

00:02:06.160 --> 00:02:09.370
and we're very excited about
this feature that you've

00:02:09.370 --> 00:02:11.080
probably seen during the keynote.

00:02:11.080 --> 00:02:15.330
And we're so excited about it that
we're going to spend at least half

00:02:15.430 --> 00:02:18.780
of this session telling you how
you can do it in your application.

00:02:18.780 --> 00:02:24.760
So video chats today are limited from
a person-to-person video conference,

00:02:24.770 --> 00:02:26.840
or maybe one to two or three people.

00:02:26.840 --> 00:02:31.270
What we've done is that we've
extended the video chat model to a

00:02:31.580 --> 00:02:36.120
show-and-tell model where you can
actually talk about some content

00:02:36.120 --> 00:02:38.100
and have a conversation about it.

00:02:38.910 --> 00:02:42.160
So let me right away do a demo so you'll
know what I'm talking about in case

00:02:42.180 --> 00:02:43.600
you haven't seen it during the keynote.

00:02:48.690 --> 00:02:50.880
Can we switch to the demo machine,
please?

00:02:50.880 --> 00:02:52.240
Thank you.

00:02:52.350 --> 00:02:54.420
So what I'm going to do,
I'm just going to initiate a video

00:02:54.420 --> 00:02:57.360
chat between those two PowerBooks here.

00:03:05.030 --> 00:03:12.360
So here I'm talking to Eric and
what I'm going to do here,

00:03:12.380 --> 00:03:21.570
I'm going to start a movie, an Apple ad,
you know, of course.

00:03:23.630 --> 00:03:26.100
I'm going to stop playing it.

00:03:26.100 --> 00:03:31.400
And I'm just going to go to the
menu here and say share with iChat.

00:03:31.660 --> 00:03:35.000
And when I do that,
iChat automatically goes into iChat

00:03:35.000 --> 00:03:38.990
Theater mode and starts showing the
content to the other applications.

00:03:39.020 --> 00:03:41.770
So this is from my side.

00:03:41.840 --> 00:03:44.960
So this is as simple as that.

00:03:45.090 --> 00:03:47.150
So that's iChat Theater.

00:03:50.300 --> 00:03:58.300
[Transcript missing]

00:03:58.970 --> 00:04:01.330
Could we also switch the
screen to the presentation?

00:04:01.400 --> 00:04:03.140
Thank you.

00:04:03.170 --> 00:04:04.720
So--

00:04:05.220 --> 00:04:08.250
iChat Theater is great when
you have a Leopard machine

00:04:08.250 --> 00:04:12.270
talking to a Leopard machine,
but that's somehow limiting.

00:04:12.340 --> 00:04:15.230
Especially now, I mean,
only you guys have the Leopard build.

00:04:15.240 --> 00:04:17.920
So, what we've done,
we've added a replacement,

00:04:17.920 --> 00:04:21.980
what we call a replacement mode,
which is sort of a compatibility mode.

00:04:22.140 --> 00:04:25.530
So, when you use Leopard and
use iChat Theater and start

00:04:25.530 --> 00:04:28.690
talking to a Tiger machine or
a Panther machine or even a

00:04:28.690 --> 00:04:34.910
Windows machine that's using AM 5.9,
we actually replace the camera input

00:04:35.380 --> 00:04:39.440
with the output of your application.

00:04:39.440 --> 00:04:42.140
So, basically,
the entire screen changes to what

00:04:42.140 --> 00:04:44.660
you're sending through your application.

00:04:44.660 --> 00:04:47.720
So, that allows you to actually
take advantage of iChat

00:04:47.870 --> 00:04:51.670
Theater even with machines that
don't know about iChat Theater.

00:04:59.200 --> 00:05:02.530
OK, so some of the resources
that are available for you.

00:05:02.700 --> 00:05:08.480
Again, I just want to reiterate Q&A at
the end of this presentation.

00:05:08.500 --> 00:05:12.560
There is a website that I believe
contains information about

00:05:12.560 --> 00:05:16.160
each session where you can find
documentation and sample code.

00:05:16.170 --> 00:05:19.430
I would highly recommend that you go
back there and download the latest

00:05:19.430 --> 00:05:23.350
information about this session
because we updated it last night.

00:05:23.520 --> 00:05:25.920
So if you downloaded
it before last night,

00:05:25.930 --> 00:05:29.510
you should go back and get new
sample code and new documentation

00:05:30.040 --> 00:05:31.840
regarding iChat Theater.

00:05:31.870 --> 00:05:36.260
You can also send us any feedback by
contacting Apple Developer Relations.

00:05:36.280 --> 00:05:39.310
And as I said earlier,
you can come and see us at the lab

00:05:39.310 --> 00:05:44.120
session today at 2:00 PM and meet
the entire iChat engineering team.

00:05:44.470 --> 00:05:48.470
So let's start right away talking
about Instant Message Framework

00:05:48.720 --> 00:05:49.730
and Apple Script Support.

00:05:49.790 --> 00:05:51.530
Eric?

00:05:52.950 --> 00:05:54.520
Thanks, JP.

00:05:54.550 --> 00:05:56.010
Hi, my name is Eric St.

00:05:56.010 --> 00:05:58.990
Onge, and today I'm going to talk to you
about the Instant Message Framework

00:05:59.120 --> 00:06:02.230
and AppleScript and how you can
use it in your own application.

00:06:02.370 --> 00:06:04.780
So to give you a rough overview
of the APIs that you can

00:06:04.780 --> 00:06:07.020
use to interact with iChat,
there are roughly two

00:06:07.020 --> 00:06:08.480
APIs that you can use.

00:06:08.660 --> 00:06:10.470
The first is the
Instant Message Framework,

00:06:10.520 --> 00:06:13.940
which as JP mentioned earlier,
you can use to get presence information.

00:06:13.980 --> 00:06:15.880
And this API is available in Tiger.

00:06:15.910 --> 00:06:18.980
New in Leopard is the IMAV Manager API,
which you can use to

00:06:18.980 --> 00:06:20.930
interface with iChat Theater,
and we'll have someone

00:06:20.930 --> 00:06:22.360
else talk about that later.

00:06:22.390 --> 00:06:26.230
There's also an AppleScript API that
you can use to actually take control

00:06:26.230 --> 00:06:29.300
of the iChat application itself.

00:06:29.320 --> 00:06:31.960
So first, I'm going to start by talking
about the IAM service.

00:06:31.970 --> 00:06:33.110
And I'll just give you an overview.

00:06:33.240 --> 00:06:35.400
I'll talk about some of
the key points of the API,

00:06:35.630 --> 00:06:37.690
and then I'll show you an example.

00:06:38.360 --> 00:06:42.200
So the IAM service roughly provides you
with presence information about yourself

00:06:42.410 --> 00:06:45.580
and other people in your buddy list.

00:06:45.620 --> 00:06:47.920
But when I talk about presence,
what is it that I actually

00:06:47.920 --> 00:06:48.640
mean by presence?

00:06:48.740 --> 00:06:50.710
Presence is a term that
we use in iChat sometimes.

00:06:50.720 --> 00:06:52.580
It might not make a lot of sense to you.

00:06:52.720 --> 00:06:54.520
But presence is basically
the availability of

00:06:54.560 --> 00:06:55.890
someone in your buddy list.

00:06:56.070 --> 00:06:58.600
So if we take a look at a buddy
list here-- this is the new buddy

00:06:58.600 --> 00:07:01.260
list in Leopard-- the presence
roughly corresponds to the

00:07:01.260 --> 00:07:04.440
status gem that you see next to a
person's name in that buddy list.

00:07:04.590 --> 00:07:07.020
And you'll see the status gem has
a different color depending on

00:07:07.030 --> 00:07:08.430
whichever status the person has.

00:07:08.440 --> 00:07:11.050
For instance, there's green,
meaning available.

00:07:11.140 --> 00:07:12.320
There's yellow, meaning idle.

00:07:12.350 --> 00:07:14.000
Or there's red, meaning away.

00:07:14.040 --> 00:07:15.800
New in Leopard,
there is a white status gem,

00:07:15.800 --> 00:07:17.860
which indicates an unknown status.

00:07:17.910 --> 00:07:20.140
This is usually used for mobile devices.

00:07:20.170 --> 00:07:21.870
And of course,
there's also no status at all,

00:07:21.920 --> 00:07:23.950
which is no status gem.

00:07:24.070 --> 00:07:26.550
But along with the status,
there's other information that you

00:07:26.550 --> 00:07:27.920
can get from someone who's logged in.

00:07:28.100 --> 00:07:29.280
For instance, the status message.

00:07:29.450 --> 00:07:32.420
So if someone leaves a message with
what they're doing when they go away,

00:07:32.420 --> 00:07:33.320
you can get that.

00:07:33.350 --> 00:07:34.300
There's also a picture.

00:07:34.300 --> 00:07:35.930
Or a buddy icon, as it's usually called.

00:07:35.970 --> 00:07:38.240
You can get that and put
that in your application.

00:07:38.260 --> 00:07:41.900
And there are some associated
capabilities that indicate what a

00:07:41.900 --> 00:07:43.660
person is capable of doing over iChat.

00:07:43.800 --> 00:07:47.210
For instance, this could be audio, video,
iChat Theater, file transfer,

00:07:47.310 --> 00:07:48.310
or other capabilities.

00:07:48.420 --> 00:07:51.220
And if someone has gone through their
buddy list and has added address book

00:07:51.360 --> 00:07:54.530
cards associated with screen names,
you can actually get the full name of

00:07:54.540 --> 00:07:57.460
the person from address book that way.

00:07:57.790 --> 00:08:01.070
So today in Tiger and in Leopard,
there are already a few example

00:08:01.120 --> 00:08:03.900
clients that we can point to for
the Instant Message Framework.

00:08:03.950 --> 00:08:06.280
The first of which is
iChat's own Menu Extra.

00:08:06.400 --> 00:08:09.510
So if you've gone into iChat's
preferences and enabled the Menu Extra,

00:08:09.510 --> 00:08:12.700
you'll see a balloon in the
status menu of your system.

00:08:12.700 --> 00:08:15.380
And if you click on the balloon,
you'll see the buddies who were logged

00:08:15.380 --> 00:08:17.040
in to whichever service you select.

00:08:17.150 --> 00:08:20.410
And you can pick a buddy and start a
chat with the buddy from that menu.

00:08:20.670 --> 00:08:24.060
Mail and address book also use the
Instant Message Framework to indicate

00:08:24.120 --> 00:08:25.800
the status of someone who's online.

00:08:25.840 --> 00:08:28.130
So for instance,
if you receive an email message

00:08:28.160 --> 00:08:32.580
from someone who might be online,
you'll see a status indicator

00:08:32.760 --> 00:08:33.820
next to that person's name.

00:08:33.820 --> 00:08:37.360
And you can then click on that to start
a chat with that person through iChat.

00:08:37.360 --> 00:08:39.650
The same is true of address book.

00:08:39.760 --> 00:08:41.790
And of course, we'd love to see this in
your application as well.

00:08:41.910 --> 00:08:43.370
So if you're ever using
an address book card,

00:08:43.370 --> 00:08:47.360
it might be appropriate to show a
status gem next to that person's name.

00:08:48.130 --> 00:08:52.280
So the IM service roughly has a few
class methods that you'll need to know.

00:08:52.280 --> 00:08:56.240
So if we go and we take a
look back at the Buddy List,

00:08:56.240 --> 00:09:00.340
probably one of the key methods that
you would need to use is my status.

00:09:00.340 --> 00:09:03.270
And this basically corresponds to
the current status that you have set

00:09:03.420 --> 00:09:04.980
while you are logged in in iChat.

00:09:04.980 --> 00:09:07.550
And this is basically the drop
down you'll see at the top of the

00:09:07.580 --> 00:09:11.210
Buddy List and the status gem you'll
see at the top of your own Buddy List.

00:09:11.220 --> 00:09:14.940
And you can query iChat for that and
find out what your current status is.

00:09:14.940 --> 00:09:17.230
Additionally with that,
you can get an idle time.

00:09:17.240 --> 00:09:19.690
So if you've been away from your
computer for a certain period of time,

00:09:19.700 --> 00:09:23.030
you can get that information from iChat
if you want your application to respond

00:09:23.030 --> 00:09:25.240
to do something after you've been idle.

00:09:26.000 --> 00:09:28.920
You can also get a list of all
of the available services that

00:09:28.920 --> 00:09:30.600
iChat is currently locked into.

00:09:30.630 --> 00:09:32.860
Now, of course,
you could have one service.

00:09:32.940 --> 00:09:35.080
And in Tiger,
you could have an AIM service,

00:09:35.120 --> 00:09:37.070
a Jabber service, and a Bonjour service.

00:09:37.240 --> 00:09:38.630
New in Leopard,
we've expanded it so that you

00:09:38.630 --> 00:09:42.370
could have multiple Jabber
services or multiple AIM services.

00:09:42.380 --> 00:09:43.910
And you can really add as
many of these as you want.

00:09:44.030 --> 00:09:46.010
So I've got two in this example here.

00:09:46.230 --> 00:09:50.350
But if you ask IAM service for all
of the services that are available,

00:09:50.450 --> 00:09:51.780
it's always going to return you three.

00:09:51.780 --> 00:09:52.880
This is kind of a key point.

00:09:52.880 --> 00:09:55.440
So it's going to lump AIM services
together into a single

00:09:55.440 --> 00:09:57.180
AIM service through the framework.

00:09:57.310 --> 00:09:58.960
The same is true of Jabber.

00:09:58.960 --> 00:10:02.180
Of course, there will always only
be one Bonjour service.

00:10:02.420 --> 00:10:06.580
Through the IAM service,
you can also get a notification

00:10:06.610 --> 00:10:09.290
center with which you can register
for notifications from iChat.

00:10:09.290 --> 00:10:11.450
I'll talk about that in a minute.

00:10:13.450 --> 00:10:14.910
Thank you.

00:10:14.960 --> 00:10:18.900
So once you have an IAM service that
you've gotten through all services,

00:10:18.900 --> 00:10:21.940
there's key pieces of information
that you can get from that as well.

00:10:21.940 --> 00:10:23.320
For instance, the localized name.

00:10:23.320 --> 00:10:26.350
So if you needed to display which
service someone is on in your UI,

00:10:26.380 --> 00:10:28.640
you could get the name that way.

00:10:28.640 --> 00:10:30.990
And of course, this is going to be AIM,
Jebre or Bonjour in English or

00:10:30.990 --> 00:10:32.260
whatever language you're using.

00:10:32.260 --> 00:10:33.660
It'll be localized.

00:10:33.660 --> 00:10:35.180
You can also get the
status of the service.

00:10:35.180 --> 00:10:39.190
So you see in the buddy list here,
we've got five buddy lists,

00:10:39.350 --> 00:10:41.500
four of which are logged in
and one of which is logged out.

00:10:41.640 --> 00:10:43.680
So if you were to ask
Bonjour for its status,

00:10:43.680 --> 00:10:45.260
it would tell you offline.

00:10:45.300 --> 00:10:49.090
If you were to ask AIM or Jebre,
it would tell you available.

00:10:49.230 --> 00:10:51.550
If you had one AIM service
that was available and one

00:10:51.560 --> 00:10:53.410
AIM service that was offline,
it's going to take the

00:10:53.420 --> 00:10:57.920
most available status,
and it's going to tell you available.

00:10:58.040 --> 00:11:01.200
You can also,
through the IAM service instance,

00:11:01.200 --> 00:11:03.480
get a list of all of the screen
names that are currently logged

00:11:03.480 --> 00:11:06.060
into that service by the info
for all screen names method.

00:11:06.200 --> 00:11:08.930
This is just basically going to
return you a dictionary of everyone

00:11:08.930 --> 00:11:11.520
in that buddy list that you can
then go through and figure out.

00:11:11.570 --> 00:11:14.480
And you can also query a service
directly for the screen names that are

00:11:14.570 --> 00:11:16.760
associated with that address book card.

00:11:16.760 --> 00:11:19.920
So that's the first step.

00:11:21.460 --> 00:11:24.310
So for notifications,
once you have a notification

00:11:24.310 --> 00:11:26.640
center from IAM Service,
there are notifications that you can

00:11:26.640 --> 00:11:28.140
receive when the presence changes.

00:11:28.140 --> 00:11:30.580
There are several notifications
that you can register for.

00:11:30.740 --> 00:11:33.390
The first of which is
service status changed.

00:11:33.450 --> 00:11:36.290
This corresponds to when you log
in or log out of your own account.

00:11:36.320 --> 00:11:38.180
So if you have an
AIM service that logs out,

00:11:38.180 --> 00:11:41.620
you could respond to something by
listening for service status changed.

00:11:41.660 --> 00:11:44.160
When someone else logs in or logs out,
you're going to get

00:11:44.160 --> 00:11:45.440
person status changed.

00:11:45.440 --> 00:11:47.390
And when someone else's
capabilities change,

00:11:47.410 --> 00:11:49.200
for instance,
if they start an AV conference

00:11:49.200 --> 00:11:52.500
or switch from available to away,
you're going to get person info changed.

00:11:52.500 --> 00:11:54.920
And with each of these notifications,
you're going to get a user

00:11:54.920 --> 00:11:57.720
info dictionary with keys that
correspond to different pieces

00:11:57.790 --> 00:11:59.440
of information about that buddy.

00:11:59.440 --> 00:12:02.100
For instance, the person's screen name
or the person's status.

00:12:02.100 --> 00:12:04.160
And depending on the notification,
the dictionary will

00:12:04.160 --> 00:12:05.110
be a little different.

00:12:05.120 --> 00:12:07.240
For instance,
you're going to receive a person info

00:12:07.320 --> 00:12:09.660
change notification very frequently,
so there's not a lot of

00:12:09.660 --> 00:12:11.830
information that's going to
come through in that dictionary.

00:12:11.840 --> 00:12:15.400
And you can look in the headers
and see which keys are available.

00:12:15.440 --> 00:12:16.930
to you.

00:12:17.990 --> 00:12:19.280
So let me give you a demo.

00:12:19.280 --> 00:12:21.890
This is a demo that's a really
quick demo using Address Book.

00:12:22.100 --> 00:12:24.690
So this is going to go through Address
Book and it's going to get all your

00:12:25.060 --> 00:12:28.200
buddies who have screen names associated
with them and display it in a buddy list.

00:12:28.310 --> 00:12:35.940
And then it's going to interface with
iChat and it's going to ask iChat

00:12:35.990 --> 00:12:38.630
for the status information for those
people and it'll display a status gem.

00:12:38.630 --> 00:12:38.630
So let me show you the demo.

00:12:43.200 --> 00:12:46.880
So you can see over here I've already
got iChat logged into one account,

00:12:46.910 --> 00:12:49.400
so I'll just launch AVPresent.

00:12:58.010 --> 00:12:59.820
So now,
I have a new list over on the left.

00:12:59.920 --> 00:13:01.550
This is AB presence.

00:13:01.630 --> 00:13:04.390
And as you can see,
I've got a few buddies who are logged in.

00:13:04.440 --> 00:13:07.600
And since iChat's already running,
it's going to go and show that status.

00:13:07.710 --> 00:13:11.340
So if I go back to iChat and I log out,
you'll see the status changes just

00:13:11.400 --> 00:13:13.240
as the person logs in or logs out.

00:13:13.310 --> 00:13:17.720
And if I log back in,
you'll get the status jumps to reappear.

00:13:17.830 --> 00:13:21.410
So the source for this demo is
available for you to download.

00:13:21.420 --> 00:13:22.960
I would encourage you
to take a look at it.

00:13:23.020 --> 00:13:25.550
The demo is using the
new Objective-C 2.0 API,

00:13:25.550 --> 00:13:28.600
so you're not going to be
able to run it on Tiger.

00:13:28.600 --> 00:13:31.360
But it should give you an example of
the things that you can do in a really

00:13:31.360 --> 00:13:33.940
simple way to use it in your application.

00:13:34.100 --> 00:13:36.810
So can I go back to these slides, please?

00:13:41.210 --> 00:13:43.480
So moving on, I'm going to talk about
Apple Script a little bit.

00:13:43.480 --> 00:13:49.420
Now, I'm going to give you an overview
of the framework versus scripting,

00:13:49.420 --> 00:13:55.170
and I'll talk about when you're going
to want to use the framework and when

00:13:55.170 --> 00:13:56.750
you're going to want to use scripting.

00:13:56.750 --> 00:13:56.750
And then I'll just give
you an overview of the API,

00:13:56.750 --> 00:13:56.750
and I'll talk about a new
feature of event handlers,

00:13:56.750 --> 00:13:56.750
and I'll show you an example
to sort of tie it together.

00:13:57.220 --> 00:13:59.580
So as I showed you earlier,
there are three APIs.

00:13:59.780 --> 00:14:04.880
The AppleScript API is the one you can
use to control the application itself.

00:14:04.990 --> 00:14:08.190
So as we said before, in Tiger,
there was really basic

00:14:08.190 --> 00:14:09.850
AppleScript functionality in iChat.

00:14:09.920 --> 00:14:11.680
You could log in or log out.

00:14:11.820 --> 00:14:13.900
You could send a text
invitation or a text message.

00:14:13.900 --> 00:14:16.890
And you could also query a buddy
list for people who are logged in.

00:14:17.000 --> 00:14:19.890
But in Leopard, this has actually really
expanded significantly.

00:14:19.900 --> 00:14:21.890
So let me just show you a
picture of the dictionary.

00:14:21.900 --> 00:14:24.850
You don't have to really pay
attention to much of the dictionaries.

00:14:24.930 --> 00:14:26.980
If you have a Tiger system,
you can just open this

00:14:27.090 --> 00:14:27.900
up in Script Editor.

00:14:27.900 --> 00:14:29.900
But just to show you just a
comparison of what changed.

00:14:29.900 --> 00:14:31.900
This is the dictionary in Tiger.

00:14:31.920 --> 00:14:33.880
As you can see, we've got a few commands
and a few classes.

00:14:33.900 --> 00:14:35.900
This is the new dictionary in Leopard.

00:14:35.910 --> 00:14:37.900
As you can see,
there are a whole bunch of new commands.

00:14:37.900 --> 00:14:39.900
Thank you.

00:14:41.400 --> 00:14:43.360
A whole bunch of new commands
and a whole bunch of new classes

00:14:43.360 --> 00:14:44.670
that expose some new things.

00:14:44.670 --> 00:14:46.810
And of course,
all the Tiger commands will still work

00:14:46.810 --> 00:14:48.400
if you have scripts that use that.

00:14:48.400 --> 00:14:51.270
So we're keeping that old API around.

00:14:51.370 --> 00:14:53.090
There are new commands
to work with text chats.

00:14:53.120 --> 00:14:57.430
You can actually get handles on text
chats and interface with them that way,

00:14:57.500 --> 00:14:58.840
including chat rooms.

00:14:58.930 --> 00:15:02.910
And there are also new commands you
can use to interface with AV chats.

00:15:02.910 --> 00:15:06.930
So if you wanted to start recording,
for instance, one of our new features,

00:15:06.930 --> 00:15:06.930
or if you wanted to go full screen,
you can toggle it that way.

00:15:08.010 --> 00:15:10.020
So to talk a little bit
about the object model,

00:15:10.020 --> 00:15:12.660
there are only three basic
classes that you need to know.

00:15:12.800 --> 00:15:15.300
The first of which is a service,
and a service corresponds

00:15:15.300 --> 00:15:16.550
roughly to a buddy list.

00:15:16.560 --> 00:15:18.380
As you can see here,
we have five buddy lists,

00:15:18.390 --> 00:15:20.100
and this will give you five services.

00:15:20.100 --> 00:15:23.170
This is a little different from the
way the framework works in that the

00:15:23.380 --> 00:15:25.890
framework will give you one AIM service,
one Jabra service,

00:15:25.890 --> 00:15:27.120
and one Bonjour service.

00:15:27.120 --> 00:15:30.210
The AppleScript API will
actually give you five services,

00:15:30.210 --> 00:15:32.980
so you can actually get,
the different buddy lists

00:15:32.990 --> 00:15:34.500
are exposed separately.

00:15:35.270 --> 00:15:38.060
Of course, within each buddy list,
there are several accounts,

00:15:38.060 --> 00:15:39.670
which is basically a
buddy in your buddy list.

00:15:39.700 --> 00:15:43.070
So if we go into just a single one here,
you'll see that this AIM service

00:15:43.070 --> 00:15:44.540
contains several accounts.

00:15:44.560 --> 00:15:47.390
And then, of course,
what takes place between a

00:15:47.390 --> 00:15:49.150
service and an account is a chat.

00:15:49.200 --> 00:15:51.070
This could be a text chat or an AV chat.

00:15:51.110 --> 00:15:52.660
So you see we've got a
text chat on the left,

00:15:52.700 --> 00:15:55.580
a fairly stupid joke,
and then we have a text chat or an

00:15:55.580 --> 00:15:57.350
AV chat on the right just taking place.

00:15:57.380 --> 00:16:00.500
You can get a handle on that as well.

00:16:01.060 --> 00:16:02.280
So sort of moving on.

00:16:02.380 --> 00:16:07.160
So here's a sample script that you
could use to start a new text chat.

00:16:07.350 --> 00:16:09.920
And just to sort of walk you through,
since some of you may not be

00:16:09.920 --> 00:16:12.320
familiar with AppleScript,
it's basically a matter of going

00:16:12.320 --> 00:16:15.880
down the hierarchy and telling the
right object the right command.

00:16:15.950 --> 00:16:18.070
So first you're going to just
basically start-- the highest

00:16:18.070 --> 00:16:19.420
level scope is iChat itself.

00:16:19.450 --> 00:16:21.020
So you'll start there.

00:16:21.070 --> 00:16:24.560
Then you'll tell the specific service
what you want to-- tell the specific

00:16:24.700 --> 00:16:26.680
service that you want to talk to.

00:16:26.720 --> 00:16:30.590
At that point, once you have a service,
you can start a new chat with a

00:16:30.590 --> 00:16:34.860
specific account on that service,
with the start chat with account.

00:16:35.030 --> 00:16:38.060
And once you've started that chat,
you'll get a handle to that chat back,

00:16:38.060 --> 00:16:40.160
which you can then tell to do things.

00:16:40.370 --> 00:16:42.200
For instance, in this case,
you can post a new

00:16:42.200 --> 00:16:43.550
message into that chat.

00:16:43.730 --> 00:16:46.450
So if you were to go and run this script,
this is going to go and it'll start a

00:16:46.450 --> 00:16:50.130
new AIM chat with someone named my buddy,
and it'll post hello my

00:16:50.140 --> 00:16:51.440
buddy to that person.

00:16:51.750 --> 00:16:54.080
So to work with a video chat,
it's fairly similar.

00:16:54.080 --> 00:16:55.920
Again,
you're going to start at the top level,

00:16:55.930 --> 00:16:59.480
which is iChat itself,
and then a specific service.

00:16:59.480 --> 00:17:00.970
At this point,
the command is a little different.

00:17:00.980 --> 00:17:03.240
It's start video chat versus start chat.

00:17:03.240 --> 00:17:04.680
And you can do the same
thing with an audio chat,

00:17:04.800 --> 00:17:06.160
if you wanted to do that.

00:17:06.240 --> 00:17:09.170
So once you've started that chat,
you'll get a handle to an AV chat object,

00:17:09.170 --> 00:17:11.300
which you can then tell to do things.

00:17:11.300 --> 00:17:13.620
So for instance, here,
the script will tell it to go

00:17:13.730 --> 00:17:16.730
full screen and to start recording
once the video chat connects.

00:17:16.740 --> 00:17:19.200
You can automate that through scripting.

00:17:20.140 --> 00:17:22.460
So the API is fairly straightforward.

00:17:22.460 --> 00:17:24.800
The syntax, as I said,
is mostly a matter of sending the

00:17:24.800 --> 00:17:27.260
right command to the right object and
going down through their hierarchy

00:17:27.350 --> 00:17:29.210
to find out what the right object is.

00:17:29.330 --> 00:17:31.880
But new in Leopard, there's a scripting
bridge available as well,

00:17:31.880 --> 00:17:34.220
since I'm sure some of you don't
know Apple Script or maybe aren't

00:17:34.220 --> 00:17:36.310
the hugest fans of Apple Script,
that's fine.

00:17:36.390 --> 00:17:38.370
If you like Ruby or Perl
or some other language,

00:17:38.370 --> 00:17:40.920
there are scripting bridges
available that expose all of

00:17:40.920 --> 00:17:44.230
this to you in your own language
or whichever language you like.

00:17:44.260 --> 00:17:46.100
But realistically,
how many scripts do you need to

00:17:46.100 --> 00:17:47.690
actually just go and start a new chat?

00:17:47.710 --> 00:17:49.920
I mean, it's nice to do,
but probably not going

00:17:49.920 --> 00:17:53.340
to use it all that much,
which is why we've introduced in Leopard

00:17:53.380 --> 00:17:55.460
a new feature called Event Handlers.

00:17:55.470 --> 00:17:57.920
An Event Handler is basically
an Apple Script callback when

00:17:57.920 --> 00:18:00.080
something happens in iChat.

00:18:00.160 --> 00:18:02.060
So as you can see here,
this is the dialogue that you'll

00:18:02.060 --> 00:18:04.090
see in iChat's alert preferences.

00:18:04.220 --> 00:18:07.710
And you can hook up an Event Handler
to any one of these events,

00:18:07.710 --> 00:18:09.370
and I'll show you how.

00:18:09.510 --> 00:18:15.620
So the event handlers are part of their
own new dictionary in the iChat suite.

00:18:15.640 --> 00:18:19.090
And there's roughly a new command
corresponding to each event.

00:18:19.730 --> 00:18:21.940
And the event handler syntax
is also fairly simple.

00:18:21.950 --> 00:18:24.960
It's a little different from a regular
Apple script in that you're not

00:18:24.960 --> 00:18:26.280
actually telling iChat to do something.

00:18:26.430 --> 00:18:27.940
iChat is telling your
script to do something.

00:18:28.000 --> 00:18:31.040
So instead of tell application iChat,
you're going to say using terms

00:18:31.040 --> 00:18:32.840
from application for iChat.

00:18:32.850 --> 00:18:34.840
At this point,
it's just a matter of copying in the

00:18:34.920 --> 00:18:39.140
correct message handler or the correct
event handler that you want to use.

00:18:39.160 --> 00:18:41.230
In this case,
it's a message received handler,

00:18:41.260 --> 00:18:43.330
so with the message received,
you're going to get the

00:18:43.480 --> 00:18:46.020
message that was sent in,
the buddy that sent it,

00:18:46.020 --> 00:18:51.060
and a reference to the chat object in
which this conversation is taking place.

00:18:51.210 --> 00:18:52.920
And once you've got that message,
you can do work with

00:18:52.990 --> 00:18:55.180
that specific message.

00:18:56.110 --> 00:18:58.900
And to install an event handler,
it's fairly straightforward.

00:18:58.900 --> 00:19:02.780
What you need to do is you need to copy
an AppleScript file into tilde slash

00:19:02.780 --> 00:19:05.440
library slash scripts slash iChat.

00:19:05.520 --> 00:19:08.460
And then you need to set it
to run in iChat preferences.

00:19:08.460 --> 00:19:10.350
So if you go to iChat's
alert preferences,

00:19:10.360 --> 00:19:14.350
or if you right-click on a buddy and
get info and go to the Actions tab,

00:19:14.410 --> 00:19:17.540
you'll see there's a new check
box that says Run AppleScript.

00:19:17.770 --> 00:19:20.170
From that dropdown,
you can either pick an AppleScript that's

00:19:20.170 --> 00:19:22.640
in tilde library scripts iChat,
or you can copy one in there

00:19:22.640 --> 00:19:25.480
if there isn't one there,
or you can just go directly to

00:19:25.480 --> 00:19:29.180
that directory and put one in.

00:19:29.670 --> 00:19:32.540
And then moving on,
I'll show you a little bit of a demo.

00:19:32.640 --> 00:19:35.460
This demo's going to be Eliza,
which some of you might be familiar with.

00:19:35.470 --> 00:19:38.900
This is an old Lisp program that I think
has been around for quite a few years.

00:19:38.960 --> 00:19:41.410
So what it's going to do is it's
going to take some input from a chat.

00:19:41.420 --> 00:19:42.720
So if someone sends
me an instant message,

00:19:42.750 --> 00:19:46.360
I'm going to take that message,
and I'm going to send it onto Eliza.

00:19:46.360 --> 00:19:52.580
So for this demo, we're actually using a
Pro library called Chatbot Eliza.

00:19:52.630 --> 00:19:55.160
So we're not actually writing
Eliza itself in AppleScript,

00:19:55.230 --> 00:19:58.420
we're just using a Pro program
and running a terminal command.

00:19:58.520 --> 00:20:00.000
So we're going to pass this onto Eliza.

00:20:00.020 --> 00:20:03.310
We're going to take that text back,
and then send it back through

00:20:03.310 --> 00:20:07.360
the instant message to sort of
simulate a virtual therapist.

00:20:07.360 --> 00:20:09.990
And this is just using a message
received handler that processes

00:20:09.990 --> 00:20:10.890
messages and sends it back.

00:20:11.030 --> 00:20:12.790
So let me show you the demo.

00:20:17.900 --> 00:20:19.700
OK,
so I've already got this system set up.

00:20:19.700 --> 00:20:22.720
And I've already copied the
script into the correct place.

00:20:22.840 --> 00:20:26.130
So what I'm going to do is I'm going
to go into the Alerts Preferences.

00:20:26.160 --> 00:20:28.600
Then I'm going to go
into Text Invitation.

00:20:28.600 --> 00:20:31.660
So Text Invitation is going to
be run the first time you receive

00:20:31.660 --> 00:20:33.160
a text message from someone.

00:20:33.320 --> 00:20:38.680
So what this one is going to do is
it's going to run-- when it runs,

00:20:38.760 --> 00:20:41.440
it's going to accept an invitation
and sort of make it full screen.

00:20:41.440 --> 00:20:43.240
So it'll get out of the notifier mode.

00:20:43.240 --> 00:20:46.660
Then I'm going to go over to
Message Received and run the same script.

00:20:46.660 --> 00:20:49.040
The script has two handlers in it.

00:20:49.040 --> 00:20:50.120
And we'll run it that way.

00:20:50.120 --> 00:20:52.840
So at this point,
Chatbot Eliza is already hooked up.

00:20:52.870 --> 00:20:56.960
So if someone were to text message me,
like JP here, you'll see that Eliza is

00:20:56.960 --> 00:20:58.260
just going to go and respond.

00:20:58.260 --> 00:21:02.560
And conversation will take place really
without me even touching the machine.

00:21:02.600 --> 00:21:05.050
So we can just let JP talk
to Eliza for a few seconds.

00:21:13.250 --> 00:21:15.600
So that's kind of fun,
but sort of another thing you can do

00:21:15.600 --> 00:21:26.390
here now is if we go onto the second
machine and we hook up the Apple script

00:21:26.390 --> 00:21:27.340
on this one and then hook it back up,
we'll see that we'll have Eliza

00:21:27.340 --> 00:21:27.340
chatting back and forth with itself.

00:21:27.920 --> 00:21:31.110
Another thing you'll notice here is that
sort of as the conversation goes on,

00:21:31.130 --> 00:21:32.430
some rate limiting is going to kick in.

00:21:32.480 --> 00:21:35.100
So it's not going to just sort
of go full force both ways.

00:21:35.270 --> 00:21:37.720
AOL is going to sort of
step in and prevent you from

00:21:37.730 --> 00:21:39.280
sending too many messages.

00:21:39.340 --> 00:21:43.540
And this sample script
is available for you.

00:21:43.540 --> 00:21:43.540
Let me just shut it off here.

00:21:50.890 --> 00:21:51.990
So we can go back to the slides.

00:21:52.040 --> 00:21:58.880
So this sample code is
available to you for download.

00:21:58.880 --> 00:22:01.500
You'll need to install the
Pro module to get it to work,

00:22:01.550 --> 00:22:02.870
but the sample code is there.

00:22:03.020 --> 00:22:05.420
Additionally,
we've included a few other samples,

00:22:05.420 --> 00:22:07.920
including one to run in
iTunes remote control.

00:22:08.100 --> 00:22:11.810
So as the bot receives commands,
it'll parse it, and it'll tell iTunes

00:22:11.810 --> 00:22:12.640
to do something else.

00:22:12.640 --> 00:22:15.220
So you could use iTunes remotely
if you wanted to do that.

00:22:15.390 --> 00:22:17.340
There's also a message sent preprocessor.

00:22:17.340 --> 00:22:20.250
So what this is going to do is it's a
message sent handler that's going to

00:22:20.250 --> 00:22:23.770
go and look at the messages that you're
sending out and respond accordingly.

00:22:23.790 --> 00:22:26.640
There's also some file transfer
automation that you can do.

00:22:26.760 --> 00:22:29.590
We've added some new handlers and some
new commands in iChat to send files

00:22:29.590 --> 00:22:31.340
and to deal with receiving new files.

00:22:31.340 --> 00:22:35.500
And the sample we've given you will
take incoming JPEGs and pings and

00:22:35.570 --> 00:22:37.770
import them into iPhoto for you.

00:22:38.600 --> 00:22:40.700
I also just want to briefly talk
about security since I'm sure

00:22:40.700 --> 00:22:43.800
some of you were concerned about
handlers running automatically

00:22:43.810 --> 00:22:45.490
and losing control of your system.

00:22:45.520 --> 00:22:49.660
So a handler to be run first
needs to be installed by a user.

00:22:49.660 --> 00:22:54.160
You can't just touch a file in a specific
place or put anything in a specific

00:22:54.220 --> 00:22:56.060
location to get a handler to run.

00:22:56.080 --> 00:22:58.690
You're either going to have to go
through the UI and set it up yourself or

00:22:58.770 --> 00:23:02.570
you're going to maybe have to mess with
the preferences to get something in.

00:23:02.700 --> 00:23:05.620
But it's never going to install itself.

00:23:05.620 --> 00:23:08.140
There's also, as you saw with Eliza,
there's some rate

00:23:08.140 --> 00:23:09.040
limiting that'll kick in.

00:23:09.040 --> 00:23:13.080
So you can't just go and blast out
thousands and thousands of messages.

00:23:13.080 --> 00:23:16.010
AIM and some Jabber services will
actually prevent you from doing that.

00:23:16.020 --> 00:23:17.660
It's just innate in the service.

00:23:17.660 --> 00:23:20.080
And of course, there's also threat
analysis of file transfers.

00:23:20.080 --> 00:23:23.810
I'm sure some of you are familiar
with Safari or Mail and iChat.

00:23:23.820 --> 00:23:26.870
But when you get an incoming file,
sometimes you'll get a dialog that says

00:23:27.230 --> 00:23:29.740
the file may contain an executable.

00:23:29.740 --> 00:23:32.670
iChat's going to do that as well,
even if a file is received through

00:23:32.760 --> 00:23:37.210
scripting or if there's a handler
running on an incoming file transfer.

00:23:37.350 --> 00:23:38.700
So you're still going
to get that security.

00:23:38.700 --> 00:23:42.240
And to get through that,
to move a file out of quarantine,

00:23:42.240 --> 00:23:45.350
a user is going to have
to intervene and press OK.

00:23:45.720 --> 00:23:48.240
So that was an overview of
the IAM Service API and the

00:23:48.240 --> 00:23:49.610
AppleScript API in Leopard.

00:23:49.780 --> 00:23:53.530
Now we're going to have Mike here to
talk to you about the iChat Theater API.

00:23:57.210 --> 00:23:59.360
Thank you very much, Eric.

00:23:59.530 --> 00:24:02.480
All right, my name is Mike Estee,
and I'm going to talk to you

00:24:02.480 --> 00:24:05.590
about iChat Theater today.

00:24:05.680 --> 00:24:07.840
So in this session,
I'm going to cover a few things.

00:24:07.840 --> 00:24:10.880
I'm going to talk about
what iChat Theater is,

00:24:10.880 --> 00:24:13.440
talk a little bit about what it
means from a user perspective,

00:24:13.440 --> 00:24:15.920
and what we think the
interaction model will be.

00:24:15.930 --> 00:24:20.140
I'm going to talk about how it works in a
little bit more detail and get down into

00:24:20.160 --> 00:24:25.350
the video architecture and talk about how
you can use it in your own applications.

00:24:25.750 --> 00:24:30.260
So first off, what is iChat Theater,
for those of you who are just showing up?

00:24:30.260 --> 00:24:32.420
It's a new technology that
we think is pretty exciting.

00:24:32.420 --> 00:24:36.070
It's a way for you to use your own
applications to present content

00:24:36.070 --> 00:24:37.800
in a running AV conference.

00:24:37.800 --> 00:24:41.420
You can show off slideshows
or 3D models or whatever it is

00:24:41.430 --> 00:24:43.380
you really want to show off.

00:24:43.420 --> 00:24:48.800
So to that effect,
I'm going to do a demo.

00:24:48.800 --> 00:24:48.800
We'll get to Demo Machine 1 here.

00:24:54.890 --> 00:24:59.610
So we've got a couple of sample
apps on the website here and

00:24:59.610 --> 00:25:02.300
I'm going to show those to you.

00:25:02.380 --> 00:25:06.760
So first off, I'm going to start a
conference here with JP.

00:25:27.700 --> 00:25:28.600
Hey Mike.

00:25:28.620 --> 00:25:30.190
Hey JP, how's it going?

00:25:30.220 --> 00:25:31.830
All right.

00:25:32.000 --> 00:25:36.680
And one of the demo apps that we've got
for you is this thing called PhotoPlayer.

00:25:36.720 --> 00:25:39.920
And it's just a really
simple little application.

00:25:39.930 --> 00:25:44.710
I just hit Play here and I can show you
some pictures of my vacation in Africa.

00:25:44.760 --> 00:25:46.960
Just had a grand time.

00:25:47.780 --> 00:25:50.340
So I want you to notice one thing
there is that the playback of the

00:25:50.380 --> 00:25:55.550
slideshow starts as soon as the
slideshow theater presentation begins.

00:25:55.550 --> 00:25:57.640
So we can do some synchronization there.

00:25:57.730 --> 00:26:00.600
And another one of the little simple
apps we've got is this thing called

00:26:00.600 --> 00:26:02.460
OpenGL Player and it draws a pretty cube.

00:26:02.550 --> 00:26:06.380
And so I can just switch
over to OpenGL Player there.

00:26:07.400 --> 00:26:09.400
Show off a little cube,
that's kind of cool.

00:26:09.400 --> 00:26:12.580
Go back to my slide show,
switch back to that.

00:26:12.890 --> 00:26:15.330
So whatever the last application
that started a presentation is

00:26:15.330 --> 00:26:18.770
the one that will be showing
content in the running conference.

00:26:18.870 --> 00:26:20.240
And so I've got another
little one that I did.

00:26:20.370 --> 00:26:26.110
This is not on the DVD,
but I just thought it was kind of fun.

00:26:26.110 --> 00:26:26.110
I'll call it.

00:26:28.580 --> 00:26:31.120
So I've got this pretty seashell here.

00:26:31.180 --> 00:26:33.140
I don't really understand
what that formula does,

00:26:33.140 --> 00:26:39.170
but I can go and present
this in iChat and get some of

00:26:39.170 --> 00:26:41.360
these windows out of the way.

00:26:43.990 --> 00:26:46.930
So you can rotate that around,
show it off, you know,

00:26:46.930 --> 00:26:49.010
it's the inside of the seashell.

00:26:49.160 --> 00:26:52.700
So I want you to notice
something else here as well too.

00:26:52.720 --> 00:26:57.390
So if I go and change the background
color of the content in my application,

00:26:57.690 --> 00:26:59.580
the presentation stays white.

00:26:59.890 --> 00:27:05.080
So you can actually have different
content showing versus what

00:27:05.080 --> 00:27:07.050
you send to the other side.

00:27:07.110 --> 00:27:11.300
So I could show the formula in
the presentation if I wanted.

00:27:14.900 --> 00:27:22.700
[Transcript missing]

00:27:24.000 --> 00:27:27.550
So we think this is particularly
well suited for things

00:27:27.550 --> 00:27:29.500
like still image content.

00:27:29.500 --> 00:27:32.920
If you saw the keynote,
you can show presentations.

00:27:32.930 --> 00:27:36.400
It's particularly well suited
for video content as well.

00:27:36.400 --> 00:27:44.370
So you can play video through
the iChat presentation as well.

00:27:44.370 --> 00:27:45.530
And real time 3D.

00:27:45.530 --> 00:27:45.530
And we'd also like to see
it in your applications.

00:27:46.320 --> 00:27:49.020
Okay, so it's not as ideal
for things like text,

00:27:49.080 --> 00:27:51.930
line art,
or other highly detailed content.

00:27:52.120 --> 00:27:56.320
Currently frame size is limited at
320 by 240 and due to bandwidth,

00:27:56.400 --> 00:27:57.180
the quality can vary.

00:27:57.200 --> 00:28:00.560
So if you've got something
that's highly detailed like text,

00:28:00.560 --> 00:28:03.930
you may want to add something that
allows the user to zoom in and

00:28:03.930 --> 00:28:05.910
see things a little bit closer.

00:28:06.850 --> 00:28:10.700
Okay, so now I want to talk a
little bit about our HI model.

00:28:10.700 --> 00:28:13.690
So first of all,
presentations are always user-initiated.

00:28:13.690 --> 00:28:16.470
This means your application should
never try and start one on its own.

00:28:16.470 --> 00:28:19.400
There's only one application
that can present at a time,

00:28:19.400 --> 00:28:22.390
and the last application to
begin a presentation is the one

00:28:22.390 --> 00:28:24.170
that gets to show the content.

00:28:24.200 --> 00:28:27.660
As I showed in the demo there,
your conferences can be

00:28:27.700 --> 00:28:32.160
synchronized to the start of the
presentation or not if need be.

00:28:32.160 --> 00:28:34.460
If you're doing like 3D content,
it doesn't matter so much.

00:28:34.460 --> 00:28:35.330
You can just start.

00:28:36.200 --> 00:28:40.200
So here's a little flow diagram
of a typical user presentation.

00:28:40.200 --> 00:28:43.780
So the first thing you saw,
we start the video conference.

00:28:44.240 --> 00:28:48.830
Then I'll switch over to your application
and begin a theater presentation

00:28:48.950 --> 00:28:51.490
by pressing play or picking a menu.

00:28:51.910 --> 00:28:54.690
So then we switch into a waiting
state where we're waiting for

00:28:54.750 --> 00:28:56.110
the other party to accept.

00:28:56.110 --> 00:28:58.750
This is where you would maybe
play a little animation,

00:28:58.750 --> 00:29:01.140
show a little theater
curtain or something.

00:29:01.210 --> 00:29:03.130
Just wait for the other
party to show up online.

00:29:03.350 --> 00:29:09.390
And the presentation starts.

00:29:09.390 --> 00:29:10.800
And I can go back to the application
and stop and pause content.

00:29:10.950 --> 00:29:13.510
And then when I'm finished
with the presentation,

00:29:13.510 --> 00:29:16.630
I can stop it in the application
and resume talking to the person

00:29:16.840 --> 00:29:18.680
that I was talking to before.

00:29:18.790 --> 00:29:21.970
Conference ends,
the presentation will also stop,

00:29:21.970 --> 00:29:24.540
or you can go back to the
application and start another

00:29:24.540 --> 00:29:26.280
presentation all over again.

00:29:27.200 --> 00:29:29.100
So we've got synchronization.

00:29:29.220 --> 00:29:32.530
Playback can be cued so you don't have
to actually wait until a conference

00:29:32.530 --> 00:29:34.100
has started before pressing play.

00:29:34.100 --> 00:29:37.370
You can start it in the application and
then go to iChat and invite somebody.

00:29:37.510 --> 00:29:38.900
Works either way.

00:29:38.900 --> 00:29:42.410
iChat will send notifications when a
conference starts or when a conference

00:29:42.410 --> 00:29:46.230
ends so you can sync up your animation or
your drawing or whatever you need to do.

00:29:46.600 --> 00:29:48.840
Okay, so how does it work?

00:29:48.900 --> 00:29:52.970
We're using a couple of technologies that
many of you may not be familiar with.

00:29:52.980 --> 00:29:55.590
We're using Core Video,
which is new in Tiger,

00:29:55.600 --> 00:29:58.230
and it's a little bit
expanded in Leopard,

00:29:58.470 --> 00:30:00.070
for doing video playback.

00:30:00.140 --> 00:30:02.590
This is an efficient way
to get frames around.

00:30:02.650 --> 00:30:06.630
And we're using Core Audio for
doing our audio playback.

00:30:07.090 --> 00:30:09.790
So since many of you are probably
not familiar with Core Video,

00:30:09.800 --> 00:30:11.680
let me talk about that for just a moment.

00:30:11.770 --> 00:30:15.070
Core Video has a couple of different
types of frames that it uses.

00:30:15.120 --> 00:30:17.320
There are CvOpenGL buffer frames.

00:30:17.320 --> 00:30:21.460
These are used as backing buffers
if you're drawing in OpenGL.

00:30:21.500 --> 00:30:24.640
And we've got CvPixel buffer frames,
which are just raster content-- you

00:30:24.720 --> 00:30:28.070
get a row by its width and height,
and you just draw straight into them.

00:30:28.130 --> 00:30:29.960
Buffers are one-time use.

00:30:29.960 --> 00:30:31.330
You don't want to retain them.

00:30:31.340 --> 00:30:34.970
You get a lot of memory usage
if you keep on retaining them.

00:30:35.050 --> 00:30:37.880
And I encourage you to see the
documentation on the website and

00:30:37.890 --> 00:30:39.950
check out more about Core Video.

00:30:41.000 --> 00:30:46.370
So here's a brief little block diagram
of the iChat Theater video architecture.

00:30:46.670 --> 00:30:50.370
So frames start out in Instant Message,
and we pass a frame through

00:30:50.400 --> 00:30:51.900
to your application.

00:30:52.080 --> 00:30:54.710
There are rendering callbacks that
we have where you do whatever it is

00:30:54.710 --> 00:30:56.540
you need to do and do your drawing.

00:30:56.580 --> 00:30:59.530
That frame is passed back
into Instant Message,

00:30:59.530 --> 00:31:02.460
which takes it, hands it over to iChat,
and it's compressed and sent

00:31:02.460 --> 00:31:04.450
out over to the network.

00:31:06.970 --> 00:31:09.970
So for Core Audio,
we're planning to support

00:31:09.970 --> 00:31:11.250
multiple audio channels.

00:31:11.300 --> 00:31:14.670
For the current build that you guys have,
we only support the first

00:31:14.670 --> 00:31:15.940
channel at the moment.

00:31:16.010 --> 00:31:17.850
For GM,
we'll be mixing all these channels

00:31:17.850 --> 00:31:21.480
together and compressing them and
sending them over the network for you.

00:31:21.480 --> 00:31:23.880
So you don't need to do mixing yourself.

00:31:23.890 --> 00:31:27.660
The audio device ID is provided
when the presentation starts.

00:31:27.660 --> 00:31:30.700
And you can go and do what you
need to do with Core Audio.

00:31:31.240 --> 00:31:33.280
Okay,
so now I'm going to get into a little

00:31:33.280 --> 00:31:37.300
bit more detail about how you can use
iChat Theater in your own applications.

00:31:37.300 --> 00:31:40.560
So there are a couple of things you
need to do before getting started.

00:31:40.560 --> 00:31:43.140
The first is you've got to link
against the instant message framework.

00:31:43.180 --> 00:31:46.450
Second thing is you have to
register as a data source.

00:31:46.460 --> 00:31:48.130
We're using a data
source pattern for this,

00:31:48.140 --> 00:31:50.720
which you're probably familiar
with if you've been using Cocoa.

00:31:50.720 --> 00:31:54.410
Then I'm going to talk about how
you control iChat Theater from

00:31:54.460 --> 00:31:58.400
inside of your own application,
how the rendering callbacks work,

00:31:58.410 --> 00:32:02.000
and how you can provide video,
and how to update UI when

00:32:02.000 --> 00:32:03.610
your state changes.

00:32:04.120 --> 00:32:06.080
So you can find the
Instant Message framework in

00:32:06.150 --> 00:32:07.660
the public frameworks directory.

00:32:07.670 --> 00:32:11.120
And as Eric mentioned,
we've got a new class for Leopard,

00:32:11.130 --> 00:32:13.020
which is the IAM AV Manager.

00:32:13.020 --> 00:32:17.400
This is where all of the video conference
starting and stopping and everything

00:32:17.410 --> 00:32:19.260
you need to do for video lives.

00:32:20.060 --> 00:32:23.200
Okay, so first thing you need to do
is register as a data source.

00:32:23.200 --> 00:32:26.190
So you're going to have some
object that does your drawing,

00:32:26.190 --> 00:32:29.300
probably some class,
maybe an NSView or an OpenGL view.

00:32:29.300 --> 00:32:33.490
And you're going to set this,
this is a method on the IAM AV Manager.

00:32:33.490 --> 00:32:36.360
And you'll set the data
source and implement the

00:32:36.410 --> 00:32:38.410
appropriate frame callbacks.

00:32:38.480 --> 00:32:40.460
We've got two sets of frame callbacks.

00:32:40.530 --> 00:32:43.730
We've got OpenGL-based ones
and raster image-based ones.

00:32:43.740 --> 00:32:46.250
You want to pick whichever one is
most appropriate for your application

00:32:46.260 --> 00:32:47.740
and only implement those callbacks.

00:32:48.740 --> 00:32:50.840
Callbacks will be called
from a background thread,

00:32:50.860 --> 00:32:52.740
so you'll need to do any synchronization.

00:32:52.740 --> 00:32:55.870
You can use a fancy new object
to see 2.0 features if you like.

00:32:55.900 --> 00:32:58.900
Or if you need to do all your
rendering on the main thread,

00:32:58.900 --> 00:33:00.160
you can defer that.

00:33:00.160 --> 00:33:01.880
And I'll show you how to
do that a little bit later.

00:33:03.780 --> 00:33:06.160
Okay, so for controlling iChat Theater,
it's really simple.

00:33:06.160 --> 00:33:07.090
There's not a lot there.

00:33:07.100 --> 00:33:10.990
First thing you need to do is
register for an AD Manager state

00:33:10.990 --> 00:33:12.420
change notification.

00:33:12.420 --> 00:33:16.010
If you don't register for this,
none of your callbacks will be called.

00:33:16.010 --> 00:33:18.140
So you need to make sure
to register for this.

00:33:18.140 --> 00:33:22.380
And this registration happens
on the IAM service object.

00:33:22.440 --> 00:33:23.640
Then we have Start.

00:33:23.650 --> 00:33:25.500
This starts a presentation.

00:33:25.500 --> 00:33:28.060
As soon as the conference
becomes available,

00:33:28.060 --> 00:33:30.010
you can press Start.

00:33:30.680 --> 00:33:33.260
You can query the state
with the state method.

00:33:33.260 --> 00:33:34.920
And then Stop ends your presentation.

00:33:37.000 --> 00:33:39.130
All right, so for starting callbacks,
as I mentioned,

00:33:39.130 --> 00:33:41.740
you need to register on the
IAM Service Notification Center.

00:33:41.740 --> 00:33:44.080
I've got a little example
of that right there.

00:33:44.080 --> 00:33:47.980
Unlike a lot of other things,
the Instant Message Framework has

00:33:47.980 --> 00:33:51.450
its own notification center which
it sends out all notifications on.

00:33:51.460 --> 00:33:54.770
So if you registered against the
regular one and you're wondering why

00:33:54.770 --> 00:33:57.520
you're not getting any notifications,
this is why.

00:33:57.520 --> 00:34:01.690
So when state becomes IAM available,
as in you can begin a presentation,

00:34:01.690 --> 00:34:04.220
just call start,
and then your callbacks will begin

00:34:04.220 --> 00:34:05.720
as soon as the conference accepts.

00:34:07.830 --> 00:34:10.200
So here's a little block
diagram of the states.

00:34:10.200 --> 00:34:13.620
So we get out with "not available."
This means that either iChat's

00:34:13.680 --> 00:34:18.040
not running or for whatever reason
video conferencing is not available,

00:34:18.040 --> 00:34:20.350
so you can't begin your presentation.

00:34:20.460 --> 00:34:24.740
And as soon as the user logs in or
video conferencing becomes available,

00:34:24.740 --> 00:34:27.060
the state will switch to
"available." This means that

00:34:27.060 --> 00:34:28.400
you can make the start call.

00:34:28.400 --> 00:34:31.480
And it doesn't necessarily mean
that a conference is running yet,

00:34:31.540 --> 00:34:34.460
but you can queue your
presentation if you need to.

00:34:34.480 --> 00:34:36.930
Pass through "starting up" and we
get to "waiting." This means that

00:34:36.940 --> 00:34:38.700
the other party is not accepted yet.

00:34:38.710 --> 00:34:43.190
So this is where you would play a little
animation that would show that your slide

00:34:43.190 --> 00:34:45.810
show is about to begin or something.

00:34:46.340 --> 00:34:47.410
And then it switches to active.

00:34:47.580 --> 00:34:50.200
The animation in iChat
is going to happen.

00:34:50.380 --> 00:34:51.810
Content will start being displayed.

00:34:52.000 --> 00:34:54.680
And your callbacks will start
to be getting called back.

00:34:54.780 --> 00:34:56.300
And then we switch through shutting down.

00:34:56.300 --> 00:35:00.460
And it's either going to go back to not
available or back to available again,

00:35:00.520 --> 00:35:02.510
which is the more likely case.

00:35:03.510 --> 00:35:04.520
OK.

00:35:04.700 --> 00:35:07.820
So let's talk a little bit more in
detail about the video callbacks.

00:35:07.840 --> 00:35:10.040
As I mentioned,
there are two types of callbacks.

00:35:10.040 --> 00:35:12.760
We've got OpenGL ones if you're
already doing your drawing in

00:35:12.810 --> 00:35:16.720
OpenGL and pixel-based buffer
callbacks if you're already drawing,

00:35:16.720 --> 00:35:20.640
say, in NSViews or something like that
or if you're using Core Image.

00:35:20.640 --> 00:35:23.360
Implement which is most
suitable for your application.

00:35:23.360 --> 00:35:27.530
We can make gains in efficiency if
you're already drawing in OpenGL.

00:35:27.540 --> 00:35:31.460
We can keep the content on the
card as we move it over to iChat.

00:35:33.260 --> 00:35:37.120
So callbacks, as I mentioned before,
are called from a background thread,

00:35:37.120 --> 00:35:39.800
so you'll need to do
synchronization if you need to.

00:35:39.800 --> 00:35:42.590
If you need to render on the main thread,
like if you don't have

00:35:42.680 --> 00:35:45.440
threaded OpenGL rendering,
you can use perform

00:35:45.450 --> 00:35:48.120
selector on main thread,
wait until done.

00:35:48.140 --> 00:35:51.270
Now you need to make sure that you
finish your drawing quickly since

00:35:51.270 --> 00:35:56.010
conferences run at about 15 FPS,
and they'll vary.

00:35:56.040 --> 00:36:00.440
So you need to render at about
30 FPS to get a good performance.

00:36:00.450 --> 00:36:03.080
There's also a timeout which will
disconnect misbehaving clients.

00:36:03.080 --> 00:36:08.040
If your application hangs or for
whatever reason you don't return in time,

00:36:08.040 --> 00:36:10.020
the presentation will
automatically start,

00:36:10.060 --> 00:36:14.350
excuse me, will automatically stop,
and the client will be disconnected.

00:36:15.070 --> 00:36:17.800
Okay, so let's talk about the
pixel buffer-based callbacks.

00:36:17.800 --> 00:36:20.670
These are the ones that you would use
if you're drawing into NS views or

00:36:20.670 --> 00:36:23.120
using Core Image to do some compositing.

00:36:23.120 --> 00:36:25.640
There's two callbacks
you need to implement,

00:36:25.660 --> 00:36:29.260
one to specify what pixel format you'd
like and one to do your rendering.

00:36:29.260 --> 00:36:34.280
So for the pixel format callback,
this is called when you first set

00:36:34.280 --> 00:36:40.280
yourself as a data source and you specify
what format you'd like your pixels in.

00:36:40.280 --> 00:36:45.510
This could be like 24 RGB or 2VY if
you're doing video frames of some sort.

00:36:45.600 --> 00:36:51.380
Or you can use my favorite pixel format,
which is 32 ARGB for OpenGL type stuff.

00:36:53.750 --> 00:36:56.370
So for the pixel buffer
rendering callback,

00:36:56.500 --> 00:36:59.520
there are a couple things
that you need to keep in mind.

00:36:59.600 --> 00:37:03.460
First of all is that the buffers can
change size on a per callback basis.

00:37:03.460 --> 00:37:06.330
So you need to always check to make
sure that you've got the right size for

00:37:06.330 --> 00:37:08.290
your buffers before you draw into them.

00:37:08.290 --> 00:37:11.250
It's called from background threads,
so do your synchronization.

00:37:11.250 --> 00:37:13.820
And don't retain the pixel buffers.

00:37:13.820 --> 00:37:16.660
Core Video works with these
things called buffer pools.

00:37:16.660 --> 00:37:19.660
And a frame comes out of the buffer pool,
it's handed off to an application

00:37:19.760 --> 00:37:22.150
to perform something to it,
and then it's returned.

00:37:22.160 --> 00:37:23.680
And you never touch it again.

00:37:25.740 --> 00:37:27.740
So here's a little bit of an example.

00:37:27.740 --> 00:37:30.980
This is a minimum implementation,
if you will.

00:37:30.980 --> 00:37:34.280
This would be implemented
on your data source,

00:37:34.280 --> 00:37:36.440
so whatever object is doing your drawing.

00:37:36.640 --> 00:37:39.130
So I'm picking the 32 ARGB format.

00:37:39.140 --> 00:37:41.200
It's a lovely format.

00:37:41.220 --> 00:37:44.640
And then we get to the
render callback here.

00:37:44.640 --> 00:37:49.190
And I use some CV core video
calls here to lock down the base

00:37:49.190 --> 00:37:51.020
address of this pixel buffer.

00:37:51.060 --> 00:37:54.910
Do my drawing, unlock,
and return yes to signify that

00:37:54.910 --> 00:37:56.500
there's a new frame available.

00:37:56.510 --> 00:37:58.140
Optionally, you can also return no.

00:37:58.250 --> 00:38:00.000
So this is an optimization we've added.

00:38:00.120 --> 00:38:05.180
For example, if you're doing a slide show
and your content is static

00:38:05.180 --> 00:38:08.690
for great periods of time,
you can save some cycles by

00:38:08.690 --> 00:38:10.520
not re-rendering the frames.

00:38:10.520 --> 00:38:16.330
And we can do some compression efficiency
pieces to make compression work better.

00:38:16.490 --> 00:38:20.090
So you just return no if nothing's
changed from the previous frame.

00:38:20.960 --> 00:38:23.440
All right,
so now for the OpenGL callbacks.

00:38:23.560 --> 00:38:24.700
These are a little bit more complex.

00:38:24.700 --> 00:38:29.050
There's a bit more to set up,
but it pretty much works the same way.

00:38:29.860 --> 00:38:33.110
So for callback setup,
you're going to pass in the context

00:38:33.180 --> 00:38:37.290
and the pixel format object that
you'll be doing your drawing into.

00:38:37.400 --> 00:38:45.280
So these hands-- we need this
information such that we can make

00:38:45.280 --> 00:38:45.280
compatible backing buffers to pass to
your application when you do rendering.

00:38:45.640 --> 00:38:48.260
So you'll pick your
format and pass these in.

00:38:48.260 --> 00:38:52.660
This is called when you first set
the data source and they're going

00:38:52.660 --> 00:38:54.940
to be retained by the framework.

00:38:55.110 --> 00:38:59.130
To release them, you'll have to set the
data source to nil.

00:39:00.660 --> 00:39:03.360
So you'll pick your
format and pass these in.

00:39:03.360 --> 00:39:07.710
This is called when you first set
the data source and they're going

00:39:07.760 --> 00:39:10.160
to be retained by the framework.

00:39:10.160 --> 00:39:14.230
To release them, you'll have to set the
data source to nil.

00:39:30.600 --> 00:39:34.130
You're probably going to need to do
the perform selector on main thread and

00:39:34.130 --> 00:39:36.600
then wait until the main thread returns.

00:39:36.600 --> 00:39:37.600
But you can do that.

00:39:37.600 --> 00:39:40.170
So the next thing you need to
do is attach the buffer to the

00:39:40.170 --> 00:39:41.600
context that you're going to draw.

00:39:41.600 --> 00:39:43.590
You'll get a new buffer for each frame.

00:39:43.600 --> 00:39:45.600
There's a pool of them in the background.

00:39:45.600 --> 00:39:50.440
And we're going to pass you in
a screen context that is ideal.

00:39:50.660 --> 00:39:53.510
You can use this as a
hint to do your rendering,

00:39:53.590 --> 00:39:55.600
but you don't have to render
on that screen context.

00:39:55.600 --> 00:39:57.940
And then we're going to ask
that you pass us back the

00:39:57.940 --> 00:39:59.600
screen context which you used.

00:39:59.600 --> 00:40:04.360
You can get the screen number from
the context object and you can

00:40:04.370 --> 00:40:07.030
find it in NSOpenGL view header.

00:40:07.570 --> 00:40:09.530
All right, so here's a little example.

00:40:09.640 --> 00:40:14.600
So I've got my context in pixel format,
which I've created earlier.

00:40:14.850 --> 00:40:19.810
I pass this off to when the
conference starts to do the rendering.

00:40:19.870 --> 00:40:25.310
And I use this CV call to attach
the buffer to the context.

00:40:25.360 --> 00:40:29.120
I do my OpenGL rendering and
return yes if there's a new frame.

00:40:29.210 --> 00:40:34.790
And just like with the
pixel buffer callbacks,

00:40:34.790 --> 00:40:36.680
you can return no if nothing's changed
from the previous frame for optimization.

00:40:37.170 --> 00:40:41.660
So for the audio callbacks,
there's a couple of things.

00:40:41.780 --> 00:40:45.240
We have a number of audio channels
method which you'll need to implement

00:40:45.240 --> 00:40:47.080
if you're interested in doing so.

00:40:47.180 --> 00:40:52.300
It specifies to the framework how many
audio channels we'd like to send you.

00:40:52.300 --> 00:40:53.820
We'll mix them for you,
but you need to ask

00:40:53.960 --> 00:40:54.940
for how many you want.

00:40:54.990 --> 00:40:57.310
Again, we only support one
right now at the moment,

00:40:57.310 --> 00:40:58.790
and we'll be expanding that.

00:40:58.790 --> 00:41:03.850
And also, there's another callback that's
called when the conference starts,

00:41:03.910 --> 00:41:06.720
which is provide audio
on device with UID.

00:41:07.100 --> 00:41:10.040
So this is a core audio interface.

00:41:10.040 --> 00:41:14.620
You'll need to check out the core
audio documentation for more details.

00:41:14.620 --> 00:41:16.530
And again,
the provide audio on device UID is

00:41:16.530 --> 00:41:19.080
called from the background thread.

00:41:19.820 --> 00:41:22.590
Alright, so some of you may be looking at
this core video stuff and thinking,

00:41:22.590 --> 00:41:23.760
that's a little bit hairy.

00:41:23.760 --> 00:41:26.620
We're also thinking about
doing some high-level APIs on

00:41:26.620 --> 00:41:29.320
NSOpenGL LView and NSView,
and we'd like to hear more

00:41:29.320 --> 00:41:31.380
about that if you're interested.

00:41:31.380 --> 00:41:34.490
There's some documentation on
the website you can check out.

00:41:34.600 --> 00:41:37.210
I encourage you to also
check out the code samples.

00:41:37.210 --> 00:41:40.450
We have a little photo player
example which I showed in the demo,

00:41:40.450 --> 00:41:43.210
and then the OpenGL player
example which I showed you,

00:41:43.210 --> 00:41:45.940
which is a multi-threaded
OpenGL application.

00:41:45.940 --> 00:41:48.230
And come see us in the lab session.

00:41:49.760 --> 00:41:51.690
Back to you, JP.

00:41:56.770 --> 00:41:58.300
OK, so what did we learn today?

00:41:58.540 --> 00:42:03.690
Well, we learned that Mikey's
favorite pixel format is 32 RGB.

00:42:03.750 --> 00:42:07.220
I don't know what yours is,
but you can come and tell

00:42:07.250 --> 00:42:09.460
us at the lab session later.

00:42:09.460 --> 00:42:13.700
We talked about the
Instant Message framework.

00:42:13.760 --> 00:42:17.920
We talked about the extended
Apple Script support

00:42:18.010 --> 00:42:19.990
that we have in Leopard.

00:42:19.990 --> 00:42:19.990
And we told you how your application
can take advantage of iChat Theater.

00:42:20.590 --> 00:42:24.180
So if you want to know more,
please check our developer website.

00:42:24.180 --> 00:42:28.940
Check also everything-- check
what is on the conference

00:42:29.000 --> 00:42:32.500
website regarding this session,
session 124.

00:42:32.500 --> 00:42:37.120
And again, I know I've said that before,
please come to the lab session,

00:42:37.140 --> 00:42:39.220
meet the team,
ask all the questions you might

00:42:39.220 --> 00:42:43.600
have about using iChat and how to
integrate it in your application.