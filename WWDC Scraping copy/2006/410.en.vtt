WEBVTT

00:00:10.470 --> 00:00:17.160
Hi everyone, welcome to session 410,
Designing Standards-Based Devices.

00:00:17.220 --> 00:00:19.300
Today we're going to have four speakers.

00:00:19.330 --> 00:00:21.080
I'm the first.

00:00:21.740 --> 00:00:24.970
So my name is Kai Kaahaaina,
and I work for-- well,

00:00:24.990 --> 00:00:26.970
obviously I work for Apple Computer,
but I work for the mass

00:00:26.970 --> 00:00:29.590
storage software team,
implementing and maintaining

00:00:29.670 --> 00:00:32.640
storage device drivers for OS X.

00:00:34.040 --> 00:00:38.180
Today I'll be talking about
USB mass storage class devices.

00:00:38.320 --> 00:00:41.080
And so for the next
about 10 to 15 minutes,

00:00:41.130 --> 00:00:44.610
we're going to quickly go over the
specifications that we follow and

00:00:44.680 --> 00:00:49.140
adhere to when implementing and
maintaining storage drivers in OS X.

00:00:49.230 --> 00:00:51.820
Common errors we've had
reported to us by customers,

00:00:51.910 --> 00:00:54.700
developers, and our own internal QA.

00:00:54.700 --> 00:00:57.450
Mac platform-specific testing
we recommend that you perform

00:00:57.450 --> 00:01:01.380
in the course of developing your
USB storage devices for OS X.

00:01:01.450 --> 00:01:06.180
And Mac platform-specific-- sorry,
Mac platform enhancements which we

00:01:06.180 --> 00:01:11.720
offer you to give your users on the
Mac OS X side a richer experience.

00:01:12.870 --> 00:01:15.910
So first up,
the USB specifications that we follow.

00:01:15.980 --> 00:01:19.670
Naturally, there's the Universal Serial
Bus Specification and

00:01:19.670 --> 00:01:22.610
the Universal Serial
Bus Mass Storage Class Specification,

00:01:22.610 --> 00:01:23.800
both of which are extremely important.

00:01:23.800 --> 00:01:27.930
I recommend that you should at least
read very thoroughly the Universal Serial

00:01:27.930 --> 00:01:29.800
Bus Mass Storage Class Specification.

00:01:29.800 --> 00:01:33.200
Next up are the two transport
protocol specifications,

00:01:33.200 --> 00:01:35.890
which are
USB Mass Storage Class Bulk-on-Lin

00:01:35.890 --> 00:01:37.800
Transport,
which is what the majority of

00:01:37.800 --> 00:01:41.800
devices we've seen utilize,
and USB Mass Storage CBI Transport,

00:01:41.800 --> 00:01:44.030
which is underutilized
but has many benefits,

00:01:44.030 --> 00:01:47.700
and I think many of the devices we
see could have been implemented better

00:01:47.700 --> 00:01:49.800
had they used this other transport.

00:01:49.800 --> 00:01:52.800
So please consider both before
you start to design a device.

00:01:52.800 --> 00:01:56.800
And lastly is the USB/UFI specification.

00:01:56.800 --> 00:02:01.150
The USB/UFI specification is of course
for the ubiquitous USB floppy drive,

00:02:01.150 --> 00:02:03.100
which is still in production.

00:02:04.540 --> 00:02:05.780
I thought it was funny.

00:02:05.850 --> 00:02:11.340
So the next category of specifications
which we follow are the-- oh,

00:02:11.340 --> 00:02:16.750
and these can be downloaded from t10.org,
by the way, sorry-- are the SCSI primary

00:02:16.880 --> 00:02:21.260
command specification,
which all SCSI devices need to adhere to.

00:02:21.340 --> 00:02:24.260
And then the next three are a
specification which you would

00:02:24.340 --> 00:02:28.170
choose based upon the type of
device you're trying to implement.

00:02:28.200 --> 00:02:31.580
So most of your block storage
devices for USB have traditionally

00:02:31.580 --> 00:02:34.040
been SCSI block command devices,
or SBC.

00:02:34.270 --> 00:02:36.180
And these are going to
be your flash drives,

00:02:36.180 --> 00:02:41.180
your mass storage
compliant camera and such.

00:02:41.180 --> 00:02:45.090
Next up are SCSI multimedia commands,
MMC, which are all of your

00:02:45.340 --> 00:02:50.350
optical-based devices,
so your CD and DVD burners.

00:02:50.440 --> 00:02:53.900
And lastly,
there's reduced block commands, or RBC,

00:02:54.020 --> 00:02:56.660
which we've largely seen only on
the FireWire side of the world.

00:02:56.700 --> 00:02:59.980
But there's absolutely no reason
why you couldn't implement

00:02:59.980 --> 00:03:01.920
your USB storage devices,
RBC.

00:03:02.110 --> 00:03:04.470
It's actually quite a bit
simpler to implement than SBC,

00:03:04.530 --> 00:03:08.080
and I recommend you definitely consider
that if you have the opportunity

00:03:08.140 --> 00:03:10.090
to start a device from scratch.

00:03:11.270 --> 00:03:14.700
So these are the common device
types that we see the most often.

00:03:14.760 --> 00:03:17.460
And these, of course,
are the semi-ubiquitous,

00:03:17.460 --> 00:03:20.080
bulk-only transport SBC devices.

00:03:20.140 --> 00:03:23.400
These include the Apple iPod,
flash drives, cameras,

00:03:23.470 --> 00:03:27.520
media card readers, USB hard drives,
just about everything,

00:03:27.520 --> 00:03:30.870
except the following,
which is bulk-only MMC devices,

00:03:30.870 --> 00:03:33.760
which again,
are the CD and DVD burners of the world,

00:03:33.820 --> 00:03:38.520
and the UFI floppy drives,
which continuously stay in production.

00:03:40.980 --> 00:03:44.200
Next up are common errors.

00:03:44.200 --> 00:03:47.360
These are the ones we get the
most in regards to internal

00:03:47.360 --> 00:03:51.070
testing and tech support calls.

00:03:51.260 --> 00:03:53.720
Some of these are architectural
differences between how we handle

00:03:53.720 --> 00:03:56.780
certain things such as power management,
like in the case of suspend resume

00:03:56.780 --> 00:03:58.240
and other operating systems.

00:03:58.290 --> 00:04:01.700
So suspend resume is one of the
power management features that

00:04:01.700 --> 00:04:03.640
we try to exercise a lot in OS X.

00:04:03.660 --> 00:04:06.920
And we've seen a lot of devices
which simply upon receiving

00:04:07.030 --> 00:04:10.060
a suspend or resume command,
just simply freak out.

00:04:10.080 --> 00:04:13.420
And they stop working,
and we have to reset the device.

00:04:13.420 --> 00:04:15.300
And that's if we know it
doesn't support the command.

00:04:15.300 --> 00:04:17.250
If we don't know it doesn't
support the command,

00:04:17.440 --> 00:04:20.940
say after sleeping and waking a system,
a user will find that their

00:04:20.970 --> 00:04:22.860
device is now not usable.

00:04:22.860 --> 00:04:24.790
So that's not good.

00:04:24.890 --> 00:04:27.160
So if you're going to
implement a USB storage device,

00:04:27.210 --> 00:04:32.000
please ensure that it handles both
USB suspend and USB resume correctly.

00:04:32.160 --> 00:04:34.510
Next up is bulk-only reset,
which is part of the

00:04:34.640 --> 00:04:36.460
bulk-only transport protocol.

00:04:36.460 --> 00:04:38.960
We've actually seen a large number
of devices which just simply

00:04:38.990 --> 00:04:40.850
don't implement this feature.

00:04:41.000 --> 00:04:43.550
For bulk-only transport devices,
it's our preferred mechanism

00:04:43.550 --> 00:04:46.860
for trying to recover a device
after it's encountered an error.

00:04:47.170 --> 00:04:50.310
So if this feature isn't
properly implemented,

00:04:50.380 --> 00:04:53.100
what happens is there's
the original device error,

00:04:53.110 --> 00:04:55.500
then a subsequent error on our
attempt to recover the device,

00:04:55.560 --> 00:05:01.400
and then we have to do a second recovery
effort with a full USB device reset,

00:05:01.400 --> 00:05:02.640
which is very heavy-handed.

00:05:02.640 --> 00:05:05.220
And if it's a multiple interface device,
it can have other consequences.

00:05:05.220 --> 00:05:06.930
So we prefer not to do
as much as possible.

00:05:07.020 --> 00:05:10.280
But if bulk-only reset
is not implemented,

00:05:10.380 --> 00:05:11.320
we have to.

00:05:11.360 --> 00:05:13.690
So please support bulk-only reset.

00:05:13.700 --> 00:05:15.870
It's there for a very good reason.

00:05:16.510 --> 00:05:19.440
Another bulk-only feature which
we sometimes see left off is

00:05:20.110 --> 00:05:22.000
the bulk-only get max LUN.

00:05:22.090 --> 00:05:26.010
So for us, if this command is
responded to with an error,

00:05:26.250 --> 00:05:29.720
we just assume your device
has a max LUN of zero,

00:05:29.800 --> 00:05:32.670
which, if you have a multi-LUN device,
is pretty poor because it means only

00:05:32.670 --> 00:05:35.020
one of your LUNs is going to get used.

00:05:35.300 --> 00:05:40.200
So another thing about Max LUN is not
to confuse Max LUN with LUN count.

00:05:40.200 --> 00:05:42.610
We've seen a number of devices
where they report their Max LUN as

00:05:42.710 --> 00:05:44.260
a count of their LUNs they have.

00:05:44.260 --> 00:05:47.260
So we go to utilize this
phantom fifth or seventh LUN,

00:05:47.260 --> 00:05:48.470
which doesn't exist.

00:05:48.620 --> 00:05:52.610
So it's very important to not confuse
the two and report the maximum logical

00:05:52.610 --> 00:05:54.540
unit number you have for get Max LUN.

00:05:55.860 --> 00:05:59.240
And lastly for this slide,
it's very important to us

00:05:59.260 --> 00:06:02.500
that you provide a very unique
vendor ID and a product ID.

00:06:02.500 --> 00:06:04.070
And there's really two reasons for that.

00:06:04.530 --> 00:06:08.740
One is user interfaces
will report this data in,

00:06:08.740 --> 00:06:10.300
say, system profile or disk utility.

00:06:10.300 --> 00:06:13.310
And it's easier for the user
to tell their devices apart if

00:06:13.310 --> 00:06:15.150
they actually have unique IDs.

00:06:15.170 --> 00:06:18.290
And the second is,
if we ever have to implement

00:06:18.370 --> 00:06:21.340
workarounds in OS X,
we use these keys to help

00:06:21.350 --> 00:06:23.170
identify your device.

00:06:25.790 --> 00:06:29.350
So another area where we
see a lot of issues is the

00:06:29.420 --> 00:06:31.800
SCSI inquiry data for devices.

00:06:31.900 --> 00:06:36.540
We see a lot of devices where they report
the additional length with inquiry data,

00:06:36.610 --> 00:06:38.280
additional length incorrectly.

00:06:38.380 --> 00:06:41.680
So as a consequence,
we either end up asking for too

00:06:41.680 --> 00:06:46.110
much or too little inquiry data,
and that just never ends well.

00:06:46.330 --> 00:06:50.680
So the next two fields are for your
product and vendor identification

00:06:50.680 --> 00:06:53.010
strings in the inquiry data.

00:06:53.600 --> 00:06:56.540
We've seen a lot of devices
which simply say generic,

00:06:56.570 --> 00:07:01.110
or storage, or USB mass storage,
or blank.

00:07:01.110 --> 00:07:05.340
And we have a number of apps like
Disk Utility and Disk Recording

00:07:05.340 --> 00:07:08.610
where the user is going to try
to select your device from a

00:07:08.610 --> 00:07:11.540
field or from a pop-up menu,
and they're not going to

00:07:11.650 --> 00:07:13.970
quite understand that,
oh, my DVD burner is a generic

00:07:13.970 --> 00:07:17.540
bulk-only storage device,
you know, blah, blah, blah.

00:07:17.540 --> 00:07:22.770
So please choose sensible
and unique product and vendor

00:07:22.770 --> 00:07:26.540
strings to identify your device,
because the user will see these.

00:07:26.540 --> 00:07:28.540
And lastly, product revision level.

00:07:28.540 --> 00:07:31.160
Every time you release a new
revision of your product and

00:07:31.260 --> 00:07:33.460
you've done all the work,
please bump the product

00:07:33.490 --> 00:07:34.500
revision level as well.

00:07:34.550 --> 00:07:38.270
It makes it easier for us when we
get bugger requests to say which

00:07:38.270 --> 00:07:41.950
version of your device was used
which may have caused a problem

00:07:41.950 --> 00:07:44.310
that we need to address in the host.

00:07:48.650 --> 00:07:52.200
So, one we've been seeing more and
more lately is devices which,

00:07:52.320 --> 00:07:55.210
in the ModeSense data,
do not properly report back,

00:07:55.210 --> 00:07:57.630
if whether or not the
device is write-protected.

00:07:57.690 --> 00:08:01.030
So, obviously what happens here is
that we assume that the device

00:08:01.030 --> 00:08:04.960
isn't write-protected if it reports
itself as not being write-protected.

00:08:05.080 --> 00:08:08.420
And we end up with this kind of mismatch
between what the GUI represents and

00:08:08.420 --> 00:08:10.170
what the actual state of the machine is.

00:08:10.320 --> 00:08:15.320
So we get these cases with,
in particular, certain phones, per se,

00:08:15.320 --> 00:08:16.960
where the user, it looks like,
for all intents and purposes,

00:08:17.060 --> 00:08:18.600
can copy a file to their phone.

00:08:18.680 --> 00:08:20.440
But they can't because it's
actually write-protected.

00:08:20.440 --> 00:08:22.780
And we get really bizarre
errors for the user,

00:08:22.780 --> 00:08:25.340
which makes for a really
poor user experience.

00:08:25.340 --> 00:08:28.870
So please,
honestly report write-protected

00:08:28.870 --> 00:08:30.580
status correctly.

00:08:30.590 --> 00:08:31.640
Next is manual eject.

00:08:31.840 --> 00:08:33.930
And this is kind of a trickier one.

00:08:34.080 --> 00:08:36.720
So in OS X, we like to control the
media as much as possible.

00:08:36.780 --> 00:08:41.460
Because we're trying to prevent users
from untimely removing media from

00:08:41.460 --> 00:08:44.040
a device before we've had a chance
to gracefully unmount the volume.

00:08:44.250 --> 00:08:48.220
This is particularly true of devices
which are using a journaled file system.

00:08:48.390 --> 00:08:51.370
So how we do this is we send
a start-stop command-- sorry,

00:08:51.410 --> 00:08:53.840
a prevent-allow-media-removal command.

00:08:53.940 --> 00:08:58.020
And if you can't physically bar the user
from removing the media-- let's say you

00:08:58.020 --> 00:09:01.880
have a flash card reader or some such--
it's very important that you report

00:09:01.960 --> 00:09:05.330
back not supported or failed a command
so that we know we need to pull your

00:09:05.360 --> 00:09:08.530
device for media removal or addition.

00:09:08.940 --> 00:09:11.090
Synchronize cache.

00:09:11.090 --> 00:09:17.790
So the primary file system
of OS X is HFS+ journaled,

00:09:17.920 --> 00:09:20.180
or HFS+J.

00:09:20.180 --> 00:09:23.040
And part of what makes this
file system work correctly,

00:09:23.040 --> 00:09:24.800
especially the journal aspect,
is support for the

00:09:24.800 --> 00:09:25.800
synchronized cache command.

00:09:25.800 --> 00:09:29.650
And we've seen a large number of USB to
ATA and SATA bridges which simply

00:09:29.650 --> 00:09:33.900
take the synchronized cache command
and then drop it on the floor and

00:09:33.900 --> 00:09:35.800
never pass it on to the ATA device.

00:09:35.800 --> 00:09:37.920
As a result,
we defeat a lot of the good support

00:09:37.920 --> 00:09:39.800
that the journal file systems get us.

00:09:39.800 --> 00:09:43.170
And this isn't just for HFS+J,
it's for a lot of the number of Linux and

00:09:43.170 --> 00:09:45.700
other journal file systems which exist.

00:09:45.800 --> 00:09:48.440
So, especially if you're
doing USB hard drives,

00:09:48.440 --> 00:09:52.430
it's very important that you support
the synchronized cache command.

00:09:52.650 --> 00:09:54.960
Next up is max transfer size.

00:09:55.000 --> 00:09:58.520
We've seen a lot of devices which
simply just do not provide more than

00:09:58.520 --> 00:10:00.600
128 blocks in a single transfer.

00:10:00.600 --> 00:10:03.790
For performance reasons in OS X,
we like to reduce the amount

00:10:03.790 --> 00:10:06.600
of overhead for doing large
transfers as much as possible.

00:10:06.600 --> 00:10:09.050
So we will always try to ask for
as much data as we think we can

00:10:09.050 --> 00:10:10.600
reasonably get from your device.

00:10:10.600 --> 00:10:13.600
So please try to support more
than 128 block transfers.

00:10:13.600 --> 00:10:15.410
And if you can't,
please don't pad out the rest

00:10:15.520 --> 00:10:17.600
of the request with zeros,
because we've seen that too.

00:10:17.600 --> 00:10:19.600
That leads to data corruption.

00:10:22.890 --> 00:10:25.900
So Mac OS X-specific testing.

00:10:25.900 --> 00:10:27.500
It's real basic.

00:10:27.520 --> 00:10:30.920
What we recommend most often is just
connect your device and plug it in,

00:10:30.920 --> 00:10:33.840
make sure it mounts, make sure it works,
copy files,

00:10:33.840 --> 00:10:36.570
try to do all the basic things
you would expect a user to do.

00:10:36.640 --> 00:10:39.200
But in addition to that,
also try doing sleep-wake testing,

00:10:39.200 --> 00:10:42.050
where you put the system to sleep,
wake it up, and make sure the device

00:10:42.050 --> 00:10:43.080
still works correctly.

00:10:43.090 --> 00:10:45.680
If you have a removable media device,
we recommend that you try

00:10:45.750 --> 00:10:47.840
putting it to sleep and then
waking up without media in it,

00:10:47.840 --> 00:10:51.270
and then try to see if it'll still
accept new media after it wakes up.

00:10:51.440 --> 00:10:54.840
and also do some restart testing
where you power off the machine

00:10:54.840 --> 00:10:58.610
and then turn it back on or restart
from a powered-on Mac to see if

00:10:58.750 --> 00:11:01.540
the device remounts after power on.

00:11:01.770 --> 00:11:05.000
And lastly,
try testing with some non-FAT16

00:11:05.140 --> 00:11:07.180
or FAT32 file systems.

00:11:07.220 --> 00:11:10.730
HFS+ and HFSJ work a
little bit differently,

00:11:10.730 --> 00:11:15.060
so it's great if you can
try them out on your device,

00:11:15.110 --> 00:11:18.500
in addition to the FAT and FAT32
file systems you'll be using

00:11:18.600 --> 00:11:20.770
mostly for other operating systems.

00:11:23.920 --> 00:11:27.580
So some cool enhancements
we have for OS X.

00:11:27.580 --> 00:11:31.220
So we have a lot of media card
readers that we use at work,

00:11:31.330 --> 00:11:32.760
for personal and for professional use.

00:11:32.760 --> 00:11:33.760
And they're kind of neat.

00:11:33.760 --> 00:11:35.900
But the thing that's kind of
disappointing about them is,

00:11:35.900 --> 00:11:37.660
it doesn't matter what kind
of media you put into them,

00:11:37.660 --> 00:11:39.560
you get the same icon.

00:11:39.570 --> 00:11:42.300
So it doesn't matter if you put
in smart media or compact flash,

00:11:42.430 --> 00:11:45.860
you're going to get the same
generic white removal media icon.

00:11:45.880 --> 00:11:48.010
So we thought of a really
cool way of making it so that

00:11:48.010 --> 00:11:49.660
you can get more than this.

00:11:49.750 --> 00:11:52.870
So how this works is,
there's a vendor specific data

00:11:52.980 --> 00:11:55.000
field in your inquiry data.

00:11:55.010 --> 00:11:57.080
And what you can do is,
you can put in the correct

00:11:57.080 --> 00:12:00.300
identification string for one of
the icons we have into this field,

00:12:00.300 --> 00:12:03.140
and when we see that you have new media,
we will then read your inquiry data

00:12:03.280 --> 00:12:04.920
and parse the string in this field.

00:12:04.940 --> 00:12:06.700
If it matches with one
of the ones in our table,

00:12:06.750 --> 00:12:08.660
we give you the icon appropriate.

00:12:08.700 --> 00:12:13.410
So if you use our strings and put it
in the right place at the right time,

00:12:13.410 --> 00:12:15.090
so what does that get you?

00:12:15.690 --> 00:12:18.090
Well, today I'll get you this
if you don't do it,

00:12:18.090 --> 00:12:20.460
or if it's a string
that we don't recognize.

00:12:20.490 --> 00:12:23.830
It's the generic rule media
icon which you've had since

00:12:23.830 --> 00:12:25.440
as far as I can remember.

00:12:25.510 --> 00:12:27.950
But let's say you put in
the string for smart media,

00:12:28.130 --> 00:12:31.340
you could have something which
looks much more like this.

00:12:32.570 --> 00:12:35.060
Which, you know,
actually looks like what was

00:12:35.060 --> 00:12:37.980
the user put into their media,
which-- sorry, put into the reader,

00:12:38.020 --> 00:12:41.440
which, if you're running with multiple
types of media at the same time,

00:12:41.460 --> 00:12:44.390
enables you to tell one apart from
the other without even having to

00:12:44.390 --> 00:12:46.000
bother to read the volume name.

00:12:46.680 --> 00:12:49.180
So,
do we support more than the smart media?

00:12:49.190 --> 00:12:50.780
Oh yeah.

00:12:50.830 --> 00:12:57.670
So we have CompactFlash, Smart Media,
MemoryStick,

00:13:01.000 --> 00:13:07.970
Secure Digital and MMC,
which at the moment I'll omit

00:13:07.970 --> 00:13:07.970
are actually the same icon,
but I'm working on that.

00:13:08.600 --> 00:13:10.000
And that's what we have in Tiger today.

00:13:10.000 --> 00:13:12.540
You can actually go home,
edit your firmware for your device,

00:13:12.540 --> 00:13:13.920
and try these out now.

00:13:13.920 --> 00:13:18.480
These have been shipping since
10.4.2 and are not going anywhere.

00:13:18.480 --> 00:13:20.910
So what are we bringing to Leopard?

00:13:21.040 --> 00:13:22.840
We're adding a few more.

00:13:22.880 --> 00:13:26.880
We're adding XD, MiniSD,

00:13:29.320 --> 00:13:32.660
MemoryStick Duo Pro, and TransFlash.

00:13:32.670 --> 00:13:35.620
Now, I've only brought these up in the
context of media card readers.

00:13:35.620 --> 00:13:37.130
There's absolutely no reason
why you couldn't use this

00:13:37.220 --> 00:13:39.340
for your digital camera,
phone, or anything else.

00:13:39.360 --> 00:13:42.600
You just need to put the right
string into the inquiry data.

00:13:42.610 --> 00:13:44.980
If you have any other ideas for
what you want your device to be,

00:13:45.080 --> 00:13:47.350
you can always contact ADC,
and we can see what we can do.

00:13:50.380 --> 00:13:52.800
It's a neat little enhancement,
and we think it provides for a better

00:13:52.800 --> 00:13:54.140
experience for your Mac customers.

00:13:54.140 --> 00:13:57.570
And, well, I like it,
because I've got to do

00:13:57.570 --> 00:14:00.140
something gooey for a change.

00:14:00.180 --> 00:14:04.500
So with that, I will please ask Nana to
come up to the stage.

00:14:11.410 --> 00:14:13.240
Thank you, Kai.

00:14:13.250 --> 00:14:16.720
I would like to tell the people
in the overflow room that we

00:14:16.720 --> 00:14:22.270
have a couple seats left here and
you're welcome to come on over.

00:14:23.040 --> 00:14:29.700
My name is Fernando Urbina and I'm going
to talk to you about the USB video class.

00:14:29.930 --> 00:14:35.040
This is like the third or fourth
year that I've been mentioning it.

00:14:35.050 --> 00:14:37.400
And finally,
we're coming to the point in the

00:14:37.400 --> 00:14:41.100
market where a lot of hardware
developers and firmware developers

00:14:41.200 --> 00:14:44.340
are producing these devices.

00:14:44.340 --> 00:14:50.510
And I'm really looking forward
now to having lots of options

00:14:50.860 --> 00:14:53.560
with supporting these new devices.

00:14:53.590 --> 00:14:58.780
The official name of the spec that
you can find in the USB Implementers

00:14:58.780 --> 00:15:02.380
Forum is the Universal Serial
Bus Device Class Definition

00:15:02.460 --> 00:15:03.460
for Video Devices.

00:15:03.460 --> 00:15:07.240
And currently it's at Revision 1.1.

00:15:07.280 --> 00:15:15.350
The changes from 1.0 to 1.1 were
fairly minor and were based just

00:15:15.350 --> 00:15:22.050
on some feedback that we received
once it got out into the public.

00:15:22.730 --> 00:15:28.190
If you are developing a device,
I want a sample of it.

00:15:28.200 --> 00:15:33.000
I want to make sure that my driver
works with as many devices as possible.

00:15:33.150 --> 00:15:37.520
There's lots of things that you can
implement and that you can not implement,

00:15:37.590 --> 00:15:39.560
or perhaps implement a
little bit differently.

00:15:39.690 --> 00:15:44.680
So it would be great if we have
samples so that we can test them,

00:15:44.680 --> 00:15:48.190
make sure they work,
and your customers will be happy.

00:15:49.920 --> 00:15:57.200
The spec itself is composed of
four different sets of documents.

00:15:57.250 --> 00:16:02.270
There is the core video specification
that has all the descriptors,

00:16:02.440 --> 00:16:07.980
the requests, negotiation,
everything that is at

00:16:07.980 --> 00:16:09.960
a fairly general level.

00:16:09.960 --> 00:16:14.960
Then we have what we call the
payload format specifications.

00:16:15.250 --> 00:16:19.950
Quite obviously,
each of these documents describe

00:16:19.960 --> 00:16:24.860
different payload formats that are
supported by the spec and how they look

00:16:24.950 --> 00:16:28.900
and what needs to be in the data stream,
etc.

00:16:28.920 --> 00:16:34.630
There's also a transport terminal
specification for devices where you

00:16:34.640 --> 00:16:39.920
can actually send video and control the
playing of that video on the device.

00:16:39.920 --> 00:16:43.920
That's from host to device.

00:16:43.950 --> 00:16:46.920
And there's a couple of
miscellaneous documents.

00:16:46.920 --> 00:16:51.460
One that is the identifiers document
that actually has the values that are

00:16:51.530 --> 00:16:53.910
used in the different descriptors.

00:16:54.020 --> 00:17:01.920
An example of a simple video class
device and how all the descriptors look.

00:17:01.920 --> 00:17:04.710
And finally,
there's also a frequently asked

00:17:04.710 --> 00:17:09.840
question document that is fairly good.

00:17:10.070 --> 00:17:16.870
To tell you about how we reach some of
the decisions on what we're supporting

00:17:16.880 --> 00:17:20.660
and maybe some things that are not
quite clear in the specification,

00:17:21.460 --> 00:17:27.780
but that they're valuable for
you to read and see how it works.

00:17:29.490 --> 00:17:38.100
In Mac OS X, since Tiger came out,
we have supported USB, UVC devices,

00:17:38.300 --> 00:17:39.800
modules on bugs.

00:17:39.960 --> 00:17:43.300
But that keeps getting better
as I get more devices and

00:17:43.300 --> 00:17:45.640
can test my software better.

00:17:45.780 --> 00:17:50.700
We still only support webcams
that have a motion JPEG or

00:17:50.700 --> 00:17:53.840
uncompressed payload format.

00:17:54.890 --> 00:18:01.830
We have not seen many, if any,
devices that support the still

00:18:01.880 --> 00:18:06.310
image portion of the specification,
so we don't have that

00:18:06.310 --> 00:18:07.790
support in there yet.

00:18:08.970 --> 00:18:11.980
If and when we start
getting those devices,

00:18:12.150 --> 00:18:19.150
we are going to add that support
and tie it in somehow with

00:18:19.150 --> 00:18:21.690
the image capture framework.

00:18:22.370 --> 00:18:27.620
We are looking at how best to support
extension units from the specification.

00:18:27.820 --> 00:18:31.000
Extension units are...

00:18:31.200 --> 00:18:36.020
A method to allow vendors
to extend the specification.

00:18:36.090 --> 00:18:39.090
We obviously don't want

00:18:39.540 --> 00:18:44.480
vendors to have to reinvent
the wheel and implement a whole

00:18:44.480 --> 00:18:51.660
UVC driver in order to add support
to their particular enhancements.

00:18:51.660 --> 00:18:56.480
So if you have any thoughts
about how best it would be for

00:18:56.590 --> 00:19:02.720
us to implement this support,
please get in touch with me and I will

00:19:02.780 --> 00:19:08.720
be more than happy to listen and
see what we can do to best do that.

00:19:08.720 --> 00:19:14.170
Currently we only expose the traditional
analog control of brightness,

00:19:14.170 --> 00:19:18.080
saturation, hue that QuickTime exposes.

00:19:18.080 --> 00:19:25.430
So there is no way for us to test
in a generic way the white balance,

00:19:25.470 --> 00:19:31.190
auto exposure, power line frequency,
all those other processing unit

00:19:31.190 --> 00:19:35.450
requests that the SPECTOX2,
that the RSS talks about.

00:19:35.450 --> 00:19:44.000
But I'm looking into ways that will allow
me to expose this at least for testing.

00:19:46.020 --> 00:19:51.970
UVC webcams will be supported in
that part in iChat and Photo Booth.

00:19:52.250 --> 00:19:59.140
We are also looking at supporting
other payload formats from the spec.

00:19:59.250 --> 00:20:04.440
Again,
this is possible only if we get devices

00:20:04.440 --> 00:20:07.330
that support other payload formats.

00:20:09.350 --> 00:20:14.140
As far as testing your device,
there's two sections.

00:20:14.220 --> 00:20:18.800
One's testing it at the
USB implementer's forum level,

00:20:18.800 --> 00:20:22.520
and that's what I call
the compliance testing.

00:20:23.240 --> 00:20:25.600
First of all,
you should make sure that your

00:20:25.600 --> 00:20:34.650
device is a good USB citizen,
and that's why you use the USB-CV tool

00:20:34.740 --> 00:20:37.530
from the Implementers Forum.

00:20:37.650 --> 00:20:42.810
In order to use this tool,
you need to use Windows and

00:20:43.140 --> 00:20:46.480
attach it to a high-speed hub.

00:20:46.610 --> 00:20:49.320
Of course,
you can now use Boot Camp on the

00:20:49.320 --> 00:20:51.730
same hardware and test it that way.

00:20:51.880 --> 00:20:58.270
And it is essentially a Chapter 9 test,
Chapter 9 of the USB 2.0 spec.

00:20:58.630 --> 00:21:07.330
The latest beta of this
USB-CV tool is 1.3 beta,

00:21:07.330 --> 00:21:14.700
and that has support for verification
of USB video class devices.

00:21:14.780 --> 00:21:18.210
It is only an indication,
it's only a descriptor

00:21:18.330 --> 00:21:20.100
type of verification.

00:21:20.100 --> 00:21:26.250
Obviously, it doesn't test whether all
your formats do display video,

00:21:26.250 --> 00:21:28.060
add frame rates, and all that stuff.

00:21:28.230 --> 00:21:33.040
But it is something that will
give you an idea whether all your

00:21:33.180 --> 00:21:35.740
descriptors are correct or not.

00:21:35.930 --> 00:21:41.750
Finally, I'm sure that if you're
developing a UVC device,

00:21:41.750 --> 00:21:47.800
you would also test with Windows XP,
but I put that bullet anyways

00:21:47.800 --> 00:21:50.190
to remind you to do so.

00:21:51.200 --> 00:21:58.650
On the Mac OS, the software entity that
includes the UVC driver is the

00:21:58.800 --> 00:22:03.270
QuickTime USB VDC Digitizer
component that lives in the

00:22:03.270 --> 00:22:07.000
system library QuickTime folder.

00:22:07.570 --> 00:22:12.740
Time Player Pro will
allow you to preview,

00:22:12.960 --> 00:22:21.020
Video Streaming and Recording:
Over on the developer site,

00:22:21.190 --> 00:22:27.090
we have WAC-TV and the venerable HAC-TV.

00:22:27.090 --> 00:22:33.850
You can download this, compile,
it allows you to

00:22:33.800 --> 00:22:38.130
To change things and you have
the source code so you can

00:22:38.240 --> 00:22:40.280
do lots of things with it.

00:22:40.280 --> 00:22:45.790
You also can access the video settings
and get at the analog controls

00:22:46.300 --> 00:22:50.750
that are exposed by QuickTime that
you cannot do in QuickTime Player.

00:22:50.880 --> 00:22:54.700
Of course,
we have USB Prober that is installed by

00:22:54.710 --> 00:22:59.300
the developer tools and by our logging
families that are on the website.

00:22:59.470 --> 00:23:04.340
And that allows you to look at
the descriptors for your device.

00:23:04.420 --> 00:23:09.830
I have tried to do my best to make
sure that the coding is correct,

00:23:09.830 --> 00:23:13.810
but if you find a bug,
please submit a bug report so

00:23:13.810 --> 00:23:17.100
that I can go ahead and fix it.

00:23:17.440 --> 00:23:25.830
One thing that you should know is
that we use the USB product name to

00:23:25.830 --> 00:23:30.390
display the camera name to the user.

00:23:30.700 --> 00:23:36.250
For example, iChat will use your camera
name for the preview window.

00:23:36.410 --> 00:23:41.400
So put something in there that is good,
that identifies your device,

00:23:41.400 --> 00:23:49.390
instead of just, like Kai was saying,
a generic name.

00:23:51.100 --> 00:23:55.740
A couple of things that
are specific to Mac OS,

00:23:55.740 --> 00:24:00.470
and the first one is
bandwidth management.

00:24:01.100 --> 00:24:08.800
Once we do the probe-commit
negotiation to arrive at a

00:24:08.800 --> 00:24:12.770
certain setting for your device,

00:24:13.060 --> 00:24:19.160
I will go and look for the
alternate interface that has the

00:24:19.160 --> 00:24:25.460
same or higher amount of bandwidth.

00:24:25.640 --> 00:24:29.380
But then,
after I select that alternate interface,

00:24:29.450 --> 00:24:36.470
I will go and use our SetPipePolicy
API to return bandwidth to the system.

00:24:37.320 --> 00:24:46.220
And I use the negotiated DW Max Payload
Transfer size to arrive at the bandwidth

00:24:46.330 --> 00:24:47.610
that your device is going to use.

00:24:47.840 --> 00:24:52.930
So if you don't report a correct
Max Payload Transfer size,

00:24:52.990 --> 00:24:55.760
your device is going to overrun.

00:24:55.870 --> 00:25:00.450
And when we get overruns on ISOC,
we drop the frame because

00:25:00.450 --> 00:25:01.560
we won't get the data.

00:25:01.920 --> 00:25:06.440
And I've seen some prototype
devices that actually did that.

00:25:06.600 --> 00:25:11.520
So be sure that Max Payload
Transfer size is reported correctly.

00:25:12.180 --> 00:25:15.480
Under QuickTime,
as opposed to in the Windows world,

00:25:15.680 --> 00:25:20.250
when you are previewing,
you have no control over the

00:25:20.250 --> 00:25:24.000
format that the preview is in.

00:25:24.930 --> 00:25:33.160
Like YUV 422 or Motion JPEG if the
camera supports both of them at the

00:25:33.160 --> 00:25:35.800
same frame rate and the same size.

00:25:35.900 --> 00:25:42.100
The digitizer component essentially
chooses which one it will report,

00:25:42.230 --> 00:25:47.610
and as it happens,
we always report YUV uncompressed

00:25:47.730 --> 00:25:49.950
if it's available.

00:25:50.070 --> 00:25:59.130
So I have a little default that will
allow you to test motion JPEG by

00:25:59.130 --> 00:26:03.440
telling the video digitizer that you
would like to prefer motion JPEG.

00:26:03.440 --> 00:26:09.560
And the command that you would
use is up there on the screen.

00:26:09.630 --> 00:26:12.700
Once the digitizer sees this,
then it'll prefer motion

00:26:12.700 --> 00:26:15.980
JPEG and you can preview that.

00:26:17.380 --> 00:26:20.420
With that,
I would like to bring up Russ Winspear to

00:26:20.420 --> 00:26:24.600
talk about communication class devices.

00:26:24.630 --> 00:26:26.060
Thank you.

00:26:30.300 --> 00:26:31.500
Thank you, Daniel.

00:26:31.500 --> 00:26:34.580
My name is Russ Winsper,
and I am responsible for the

00:26:34.580 --> 00:26:36.980
communications class driver,
amongst other things,

00:26:37.000 --> 00:26:44.690
and commonly known as the
CDC driver or comms class driver.

00:26:45.190 --> 00:26:49.340
I'm going to talk a little
bit about the standard itself,

00:26:49.470 --> 00:26:52.880
what we've implemented,
and then go a little bit into

00:26:52.880 --> 00:26:57.330
the architecture of the driver,
and then touch on some common problems.

00:26:57.360 --> 00:27:01.390
The CDC standard really is defined
as a number of control models

00:27:01.390 --> 00:27:05.500
that are kind of roughly grouped
into the groups you see here.

00:27:05.720 --> 00:27:09.870
There's actually currently
13 models described.

00:27:10.100 --> 00:27:11.620
Modems has about four.

00:27:11.960 --> 00:27:13.500
ISDN has a couple.

00:27:13.970 --> 00:27:22.090
The networking, there's a couple more.

00:27:23.020 --> 00:27:25.260
Basically, the most common,
which is the abstract

00:27:25.330 --> 00:27:28.180
control model for modems,
the Ethernet control

00:27:28.180 --> 00:27:30.850
model for networking,
and a fairly new one,

00:27:30.850 --> 00:27:32.800
which is the device management model,
and I'll get into that

00:27:32.800 --> 00:27:33.540
a little bit later.

00:27:33.540 --> 00:27:36.730
The abstract control model
modem assumes that on the end

00:27:36.820 --> 00:27:40.540
of the wire is a full-function
modem with everything in there,

00:27:40.540 --> 00:27:44.780
data access arrangement, data pump,
and all those kinds of things.

00:27:45.490 --> 00:27:51.200
The other models which define kind
of less functionality in the device,

00:27:51.200 --> 00:27:54.320
there's the direct line model,
the telephone line model,

00:27:54.320 --> 00:27:58.020
so by far the most common is
the abstract control model.

00:27:58.040 --> 00:28:03.800
The Ethernet control model is an attempt
to allow a host to be connected to

00:28:03.800 --> 00:28:07.320
Ethernet using a USB-connected device.

00:28:07.320 --> 00:28:10.090
And unfortunately,
there's a few shortcomings in

00:28:10.090 --> 00:28:13.070
the Ethernet control model,
which have kind of not

00:28:13.070 --> 00:28:15.180
made it widely implemented.

00:28:15.180 --> 00:28:18.940
By Ethernet devices,
but it did find a home with

00:28:18.940 --> 00:28:22.650
cable modems and DSL devices,
so it is used.

00:28:22.720 --> 00:28:26.020
And then the device management
model is fairly new,

00:28:26.020 --> 00:28:30.430
and it really revolves around
multi-function devices and the ability

00:28:30.430 --> 00:28:32.820
to control them on a device basis.

00:28:32.840 --> 00:28:34.910
And again, I'll talk a little bit
more about that later.

00:28:36.900 --> 00:28:38.950
Futures.

00:28:39.040 --> 00:28:43.720
Basically,
Apple has planned to support class

00:28:43.720 --> 00:28:45.800
devices if the devices appear.

00:28:45.800 --> 00:28:52.220
We're currently
interested in a new model,

00:28:52.220 --> 00:28:53.980
which is the Ethernet Emulation Model.

00:28:53.980 --> 00:28:58.820
This really differs from the Ethernet
control model in the fact that it's built

00:28:58.870 --> 00:29:03.860
for low-cost devices that don't really
want to have a full media access control

00:29:03.920 --> 00:29:06.300
in them and connect them to the host.

00:29:06.340 --> 00:29:08.890
So it's not connecting
a host to Ethernet,

00:29:08.890 --> 00:29:13.430
it's connecting a device to the host,
using Ethernet-like protocols.

00:29:13.440 --> 00:29:18.200
Currently being worked on is a
new model that's being called

00:29:18.260 --> 00:29:20.650
the Network Control Model.

00:29:20.660 --> 00:29:23.750
This may not be its final name.

00:29:23.980 --> 00:29:29.070
The thrust of this is really to
change some of the shortcomings

00:29:29.070 --> 00:29:30.490
in the Ethernet control model.

00:29:30.500 --> 00:29:36.580
And what it'll finally turn out
to be is going to be interesting.

00:29:36.580 --> 00:29:40.050
As the work goes on,
they're pushing a little bit

00:29:40.050 --> 00:29:42.190
higher up into the IP stack.

00:29:42.260 --> 00:29:46.460
And again, that may or may not be
the case in the end.

00:29:46.480 --> 00:29:48.480
But we'll see.

00:29:48.480 --> 00:29:49.440
It's very, very early.

00:29:49.440 --> 00:29:53.960
And in fact, the early draft,
I'm not even sure .8's been posted yet.

00:29:53.980 --> 00:29:56.740
But they're in that very,
very early stage.

00:29:56.790 --> 00:29:59.470
And again, like some of the other
guys have mentioned,

00:29:59.470 --> 00:30:02.640
the best way to get Apple's
attention with any of these new

00:30:02.860 --> 00:30:04.480
devices is to send us a device.

00:30:04.480 --> 00:30:07.210
And we'll see if we can make it work.

00:30:09.710 --> 00:30:12.380
Okay, just a few words about the
USB Implementers Forum.

00:30:12.670 --> 00:30:16.160
The CDC Device Working Group is
an active working group,

00:30:16.360 --> 00:30:17.200
which I've mentioned.

00:30:17.560 --> 00:30:21.600
They are working on the
network control model.

00:30:21.600 --> 00:30:26.280
I did talk a little bit about the
differences between ECM and the NCM.

00:30:26.660 --> 00:30:31.790
But again, NCM is trying to fix some
of the shortcomings of ECM.

00:30:32.050 --> 00:30:37.110
And the specs are posted at
the approved docs website.

00:30:37.580 --> 00:30:41.120
What I'd like to talk about now is a
little bit about the driver architecture,

00:30:41.150 --> 00:30:43.500
which we changed fairly recently.

00:30:43.510 --> 00:30:45.880
And there's been a number
of questions about,

00:30:45.920 --> 00:30:47.340
first of all, why we changed it.

00:30:47.370 --> 00:30:53.820
And then what we did to it made
it a little more complicated

00:30:53.910 --> 00:30:56.260
from an overall point of view,
but actually made some of the

00:30:56.300 --> 00:30:57.680
drivers a bit more easier.

00:30:57.700 --> 00:31:00.580
But anyway,
starting with the hardware and

00:31:00.580 --> 00:31:04.100
the USB family devices plugged in,
device matching gets kicked off,

00:31:04.100 --> 00:31:08.360
and we have a very small
device driver that gets loaded.

00:31:08.400 --> 00:31:13.530
This guy looks at the device
to make sure there's a valid

00:31:13.530 --> 00:31:16.310
configuration we can play with,
either Ethernet or

00:31:16.710 --> 00:31:18.280
abstract control model.

00:31:18.320 --> 00:31:21.880
And if there is,
he then does a set configuration,

00:31:21.940 --> 00:31:25.710
turns around,
which causes interface matching.

00:31:25.720 --> 00:31:29.220
Now, the way the standard's built,
there's a control interface and

00:31:29.230 --> 00:31:32.710
a data interface for each entity,
for ACM and ECM,

00:31:32.800 --> 00:31:35.340
for the Ethernet and the ECM,
and for the ACM.

00:31:35.340 --> 00:31:39.640
And so, for the simulation model,
that's not true, but for the main two

00:31:39.760 --> 00:31:41.100
that we've implemented,
it's true.

00:31:41.100 --> 00:31:43.040
So,
we have to load two interface drivers,

00:31:43.050 --> 00:31:44.700
one for control, one for data.

00:31:44.740 --> 00:31:48.020
These interface drivers then,
with the help of the device driver,

00:31:48.020 --> 00:31:54.140
have to rendezvous -- rendezvous being
a generic term here -- with one another.

00:31:54.160 --> 00:31:59.490
And so, the right control driver and the
right data driver can hook up and

00:31:59.500 --> 00:32:02.150
provide the services that they need.

00:32:02.160 --> 00:32:06.320
Once that's happened,
the ECM takes a look at the

00:32:06.320 --> 00:32:11.150
specifics of the interfaces,
and if he figures that we can

00:32:11.150 --> 00:32:14.330
actually drive this device,
he then creates the necessary

00:32:14.330 --> 00:32:16.990
ports through the upper layers,
with, in the case of the ACM,

00:32:16.990 --> 00:32:19.710
the serial family,
and in the case of the ECM,

00:32:19.820 --> 00:32:20.880
the networking family.

00:32:20.880 --> 00:32:22.320
So, from a --

00:32:22.610 --> 00:32:24.530
From a high level,
it looks fairly complicated,

00:32:24.650 --> 00:32:27.930
but in actual fact,
the ACM control and ACM data

00:32:27.930 --> 00:32:32.700
drivers and the ECM control and
ECM data drivers are a lot simpler

00:32:33.040 --> 00:32:36.190
than the original device driver.

00:32:37.200 --> 00:32:40.460
And again, why did we do this?

00:32:40.900 --> 00:32:45.670
Initially, when we first started to see
modems in particular appear,

00:32:45.710 --> 00:32:52.760
they were single-function devices
with just one interface on them,

00:32:52.760 --> 00:32:54.770
with one CDC interface on them.

00:32:54.780 --> 00:32:58.690
They had a control and data interface,
obviously.

00:32:58.760 --> 00:33:03.320
And a single-device driver
was OK for these devices.

00:33:03.410 --> 00:33:05.850
Then we started to see
multi-function devices.

00:33:05.900 --> 00:33:09.160
We started to see devices with
mass storage interfaces on them.

00:33:09.240 --> 00:33:11.420
We started to see them with
audio interfaces on them.

00:33:11.420 --> 00:33:16.600
We started to see one of the
standards as an OBEX interface.

00:33:16.790 --> 00:33:19.610
So interface drivers are
definitely the way to go.

00:33:19.620 --> 00:33:24.190
So we had to change it to make
sure that once our device-- if

00:33:24.190 --> 00:33:27.160
it's classed as a COM device,
once our device driver

00:33:27.180 --> 00:33:30.350
instantiates the interfaces,
or does the set config to

00:33:30.350 --> 00:33:33.520
instantiate the interfaces,
then the right drivers get loaded for

00:33:33.520 --> 00:33:40.640
the other devices-- the mass storage,
the audio, and all the others.

00:33:40.750 --> 00:33:44.040
So that was really the
reason-- like I say,

00:33:44.040 --> 00:33:45.420
it looks a bit more complicated.

00:33:45.420 --> 00:33:48.520
But in actual fact,
it's kind of made it a little easier.

00:33:49.000 --> 00:33:51.500
And lastly, common problems.

00:33:51.580 --> 00:33:54.710
Again, what we see, a couple of the guys
have already touched on,

00:33:54.830 --> 00:33:56.440
Kai in particular, suspend and resume.

00:33:56.440 --> 00:33:59.020
Suspend and resume never seems to work.

00:33:59.120 --> 00:34:02.670
And if you suspend a device that
doesn't like being suspended,

00:34:02.670 --> 00:34:04.880
it does weird and wonderful things.

00:34:04.890 --> 00:34:06.920
So if you're building devices,
make sure that they

00:34:06.920 --> 00:34:08.200
support suspend and resume.

00:34:08.200 --> 00:34:12.560
And the other problem we see with com
class devices are problems with the,

00:34:12.740 --> 00:34:15.380
what's called a functional descriptors.

00:34:15.380 --> 00:34:18.570
And we see problems with where,
sometimes where these functional

00:34:18.570 --> 00:34:21.520
descriptors are placed,
placed in the wrong place,

00:34:21.520 --> 00:34:23.370
so that once we've found
the control interface,

00:34:23.370 --> 00:34:25.200
we can't find the functional descriptors.

00:34:25.200 --> 00:34:29.320
And then common problems are the
union descriptors and some of the

00:34:29.320 --> 00:34:33.990
SCM functional descriptors and the
ECM functional descriptors pointing

00:34:33.990 --> 00:34:36.200
to the wrong data descriptor.

00:34:36.220 --> 00:34:39.510
And if that happens,
especially if there's more than

00:34:39.560 --> 00:34:42.710
one interface on a device or
we've got multiple devices and

00:34:42.710 --> 00:34:46.360
we have a real hard time hooking
up the right control and data.

00:34:46.420 --> 00:34:52.970
So just make sure that you really
have the right descriptors sorted

00:34:52.970 --> 00:34:54.680
out in the functional descriptors.

00:34:54.780 --> 00:34:57.080
And basically, that's kind of it.

00:34:57.080 --> 00:35:00.830
I turn it over now to
Torrey and talk about audio.

00:35:10.490 --> 00:35:12.800
Thank you for not
handing me the sharp end.

00:35:12.800 --> 00:35:13.940
My name is Torrey Walker.

00:35:13.940 --> 00:35:17.110
I'm with the CPU Audio Software team,
and I'm going to be talking a little

00:35:17.110 --> 00:35:19.390
bit about the USB audio device class.

00:35:19.400 --> 00:35:23.340
So, show of hands here,
how many of you have ever taken, say,

00:35:23.350 --> 00:35:27.320
a USB headset, or microphone,
or breakout box, or anything like that,

00:35:27.400 --> 00:35:30.280
plugged it into your computer,
and have it just work?

00:35:30.400 --> 00:35:33.340
And keep your hands up if you like
the fact that you didn't have to

00:35:33.340 --> 00:35:35.260
install a driver to get that to happen.

00:35:35.400 --> 00:35:38.380
Alright, so this is what the class
driver is going to afford you.

00:35:38.400 --> 00:35:42.470
In Mac OS X, the class driver is
called Apple USB Audio,

00:35:42.560 --> 00:35:47.500
and it supports full-speed
devices that's USB 1.1,

00:35:47.500 --> 00:35:51.400
full-speed devices that
conform to the USB device class

00:35:51.400 --> 00:35:55.500
specification for audio devices,
release version 1.0,

00:35:55.500 --> 00:35:58.370
which I'm just going to call the
USB audio spec from here on out.

00:35:58.570 --> 00:36:01.400
And it's available for
download at USB.org.

00:36:01.400 --> 00:36:05.360
It's going to allow access to the
basic functions of your audio device.

00:36:05.420 --> 00:36:10.370
Even when there's no
third-party driver present,

00:36:10.400 --> 00:36:13.250
it's going to be thoroughly tested
from release to release to make

00:36:13.250 --> 00:36:15.400
sure that compatibility is retained.

00:36:15.410 --> 00:36:20.280
And that will allow some immunity
to things like platform changes,

00:36:20.280 --> 00:36:24.400
moving from PPC to Intel,
32-bit to 64-bit.

00:36:24.400 --> 00:36:26.740
Also,
it hides the differences between the

00:36:26.740 --> 00:36:30.400
three different USB controller types,
OHCI, UHCI, and EHCI.

00:36:30.400 --> 00:36:33.280
So, the user doesn't have to
be concerned about them,

00:36:33.280 --> 00:36:35.000
and nor does the developer.

00:36:36.050 --> 00:36:38.730
Also, it peacefully coexists
with third-party drivers,

00:36:38.730 --> 00:36:41.760
so if you want to write a driver
still to support your device,

00:36:41.760 --> 00:36:44.800
then we report a low match
score and we'll gracefully back

00:36:44.800 --> 00:36:46.040
away and let you support it.

00:36:46.140 --> 00:36:47.390
So...

00:36:48.720 --> 00:36:53.040
How can I design a class-compliant
USB audio device using

00:36:53.040 --> 00:36:54.600
established technology?

00:36:54.760 --> 00:36:58.590
Well, if you're already adhering
to the USB specification,

00:36:58.600 --> 00:37:02.920
all you basically need to do is make sure
that you properly report the capabilities

00:37:02.920 --> 00:37:06.800
of your device in the descriptor,
which is basically section 4

00:37:06.900 --> 00:37:09.000
of the USB audio specification.

00:37:09.130 --> 00:37:13.070
So, I want to talk a little bit about
what works and what causes problems,

00:37:13.180 --> 00:37:16.280
and then we'll discuss a
few techniques for designing

00:37:16.280 --> 00:37:18.350
class-compliant descriptors.

00:37:19.530 --> 00:37:23.740
So, what works in USB Audio 1.0?

00:37:23.780 --> 00:37:26.060
Number one, simple device topologies.

00:37:26.180 --> 00:37:29.340
There are a number of different
units and terminals that are

00:37:29.340 --> 00:37:32.080
supported by the class driver,
and a few of them we can

00:37:32.080 --> 00:37:35.860
use to publish controls,
such as Feature Unit or Selector Unit.

00:37:35.920 --> 00:37:39.710
However, we have to make a choice
about which of these to use to

00:37:39.790 --> 00:37:41.500
publish controls to the user.

00:37:41.550 --> 00:37:45.340
For example, let's say that you have a
very simple device topology,

00:37:45.360 --> 00:37:48.400
and this one has just an input
terminal and an output terminal

00:37:48.400 --> 00:37:51.140
between it and an extension unit,
which the driver is not

00:37:51.170 --> 00:37:54.130
going to know what to do with
because that's vendor-specific.

00:37:54.260 --> 00:37:56.980
But then there's a single
feature unit that has controls.

00:37:57.000 --> 00:38:01.420
Now, for this speaker jack,
or for this speaker,

00:38:01.450 --> 00:38:04.020
we know that if there are
going to be controls that are

00:38:04.110 --> 00:38:06.630
published for this device,
they have to be associated

00:38:06.630 --> 00:38:08.620
with this one feature unit,
because there's only

00:38:08.620 --> 00:38:11.020
one on the signal path,
there's no ambiguity.

00:38:11.040 --> 00:38:13.410
On the other hand,
if you want to take a look at a

00:38:13.410 --> 00:38:16.600
little more complex example here,
you'll see that there are

00:38:16.600 --> 00:38:19.380
two feature units here,
and there's a mixer unit between them,

00:38:19.380 --> 00:38:23.140
and then maybe the mixer unit is
connected to other stuff as well.

00:38:23.210 --> 00:38:25.410
The driver has to make a
choice about which of these

00:38:25.460 --> 00:38:29.560
to use to publish controls,
and if there's more than one,

00:38:29.740 --> 00:38:31.850
we're going to make a choice,
but there's no guarantee that

00:38:31.850 --> 00:38:35.130
it's going to be the one that the
developer had actually intended.

00:38:35.230 --> 00:38:38.870
So you can help avoid confusion like
that by only publishing what you

00:38:38.870 --> 00:38:42.250
actually want the controls to come from.

00:38:42.570 --> 00:38:46.260
Another thing that works in
USB 1.0 audio is reporting the

00:38:46.260 --> 00:38:48.400
maximum packet size correctly.

00:38:48.440 --> 00:38:52.460
I want to mention this specifically
because we used to not care,

00:38:52.510 --> 00:38:53.990
and now we do.

00:38:54.140 --> 00:38:59.100
If your maximum packet size is too low,
you could end up generating overruns,

00:38:59.100 --> 00:39:03.460
and that will cause streaming
artifacts to make your beautiful,

00:39:03.460 --> 00:39:07.620
soothing classical music sound
like something that will truly

00:39:07.620 --> 00:39:09.420
make your hair stand on end.

00:39:09.420 --> 00:39:12.880
You can guess I've probably had a few
experiences with devices like this,

00:39:13.000 --> 00:39:16.860
and other unpredictable
behavior could also occur.

00:39:17.710 --> 00:39:20.540
Another thing that works:
publishing compatible

00:39:20.540 --> 00:39:22.020
input and output formats.

00:39:22.020 --> 00:39:24.690
This is probably the most
egregious and widespread

00:39:24.690 --> 00:39:26.660
problem that I see with devices.

00:39:26.810 --> 00:39:32.590
If a device cannot simultaneously support
two different types of sample formats,

00:39:32.700 --> 00:39:35.700
then they cannot be
published at the same time.

00:39:35.700 --> 00:39:38.760
This isn't explicitly
written in the specification,

00:39:38.760 --> 00:39:41.700
but it kind of follows as
an unwritten corollary.

00:39:41.700 --> 00:39:44.230
Take for example,
you've got a device that supports

00:39:44.230 --> 00:39:48.700
two different sample rates:
44.1 and 48k for input and output.

00:39:48.700 --> 00:39:51.050
However,
you've got this single sample clock

00:39:51.050 --> 00:39:52.700
that has to control both of them.

00:39:52.700 --> 00:39:56.230
So if the user says, "Hey,
let me change the input sample

00:39:56.230 --> 00:40:00.780
rate from 44.1 to 48k," and
the output moves as well,

00:40:00.970 --> 00:40:02.700
the driver has no way to know that.

00:40:02.700 --> 00:40:06.060
And because of that,
you'll start to generate things

00:40:06.060 --> 00:40:09.200
like overruns and errors,
and then eventually, you know,

00:40:09.200 --> 00:40:10.610
your device may sound like this.

00:40:13.970 --> 00:40:14.880
Okay?

00:40:14.880 --> 00:40:19.640
So, one way to work around this is to
maybe provide a hardware switch.

00:40:19.640 --> 00:40:24.000
And the hardware switch will provide a
different descriptor for each setting,

00:40:24.200 --> 00:40:26.780
where there will only be this
one sample rate that's supported.

00:40:26.900 --> 00:40:30.880
So maybe, while it's set at 44.1,
the device can only do 44.1.

00:40:30.900 --> 00:40:34.830
You switch it to 48k, unplug it,
plug it back in, new descriptor,

00:40:35.080 --> 00:40:35.900
only 48k.

00:40:35.900 --> 00:40:40.900
If something like this is beyond
the scope of your hardware project,

00:40:40.950 --> 00:40:43.610
you may even want to consider
only publishing a single sample

00:40:43.610 --> 00:40:46.900
rate that you think will be very
important to your customers.

00:40:46.900 --> 00:40:49.900
And this way,
there's not going to be any confusion.

00:40:52.770 --> 00:40:54.560
How do I go class-compliant?

00:40:54.620 --> 00:40:57.790
One way to do this is to go out and
acquire a class-compliant device and

00:40:57.790 --> 00:41:01.850
check out its descriptor using USBProber,
which is included in

00:41:01.930 --> 00:41:03.510
the developer's package.

00:41:03.880 --> 00:41:05.900
Also, Apple USB Audio is open source.

00:41:06.120 --> 00:41:09.130
You can download it, compile it,
take a look at what

00:41:09.250 --> 00:41:11.240
Apple USB Audio does for your device.

00:41:11.300 --> 00:41:15.360
You can look at the logging in
USB Prober using USB logging.

00:41:15.510 --> 00:41:19.810
You can download the FireWire
SDK and change it to printf style,

00:41:19.820 --> 00:41:21.360
and look at that logging as well.

00:41:21.470 --> 00:41:23.500
And also examine the
logs of other devices,

00:41:23.710 --> 00:41:26.400
particularly if your device
is doing something wrong,

00:41:26.400 --> 00:41:28.720
you can take a look at a device
that does something right,

00:41:28.720 --> 00:41:31.440
and try to figure out what
the difference is there.

00:41:31.840 --> 00:41:34.620
Also,
if you're going to use Apple USB Audio as

00:41:34.620 --> 00:41:38.290
a base for your third-party driver,
please keep in mind the

00:41:38.290 --> 00:41:40.200
open source agreement.

00:41:40.280 --> 00:41:42.550
If you make changes to the driver,
then you need to make your

00:41:42.560 --> 00:41:46.030
changes public so that other
people can look at them as well.

00:41:46.270 --> 00:41:48.240
Finally, use Apple as a resource.

00:41:48.350 --> 00:41:52.200
We really want to help you
develop class-compliant stuff.

00:41:52.200 --> 00:41:54.100
So if you send us a
device and you're like,

00:41:54.100 --> 00:41:57.220
"Hey, I think I'm doing this right,
but I see strange behavior under

00:41:57.220 --> 00:41:58.700
Mac OS X," we'll take a look at it.

00:41:58.700 --> 00:42:02.030
And if there's a problem with the driver,
we will fix it.

00:42:02.140 --> 00:42:06.610
And if it's a problem with your firmware,
please fix it.

00:42:06.870 --> 00:42:09.460
All right, so what's on the horizon?

00:42:09.780 --> 00:42:11.980
USB 2.0 audio.

00:42:12.150 --> 00:42:16.160
So the question here is,
how can I make my USB 2.0 audio

00:42:16.160 --> 00:42:18.320
device work with a class driver?

00:42:18.510 --> 00:42:23.710
Right now there's no support for USB 2.0
audio descriptors in the class driver,

00:42:23.760 --> 00:42:25.680
but the specification
has yet to be released.

00:42:25.740 --> 00:42:28.510
So the rapidity with which
Apple USB audio will come to

00:42:28.590 --> 00:42:32.470
support these devices will depend on
how quickly we get devices that have

00:42:32.630 --> 00:42:37.440
class-compliant firmware that we
can use to bring up our new driver.

00:42:37.900 --> 00:42:40.920
Once again,
the support will basically come

00:42:40.920 --> 00:42:44.800
from what capabilities are reported
by the device and the descriptor.

00:42:44.920 --> 00:42:48.030
So, I'll talk a little bit about
the audio specification,

00:42:48.230 --> 00:42:50.910
Frankenstein devices,
as we like to call them,

00:42:50.920 --> 00:42:52.800
and why you shouldn't develop them.

00:42:52.800 --> 00:42:56.270
And then we'll talk a little bit
about one of the largest changes

00:42:56.270 --> 00:42:58.800
about the new specification:
clock domains.

00:42:58.850 --> 00:43:02.800
So, the USB 2.0 audio spec.

00:43:02.800 --> 00:43:06.780
It's in review right now and will
soon be available for download.

00:43:06.990 --> 00:43:10.860
Actually, I was hitting refresh on a web
page while Nano was speaking,

00:43:10.860 --> 00:43:13.270
sorry, and it's not up there yet,
but I do expect it to

00:43:13.270 --> 00:43:14.800
be posted very soon.

00:43:14.800 --> 00:43:18.950
And it will be for download in USB.org.

00:43:19.040 --> 00:43:21.800
Actually, there was a better link
earlier that was provided.

00:43:21.800 --> 00:43:23.870
It's in the developer section.

00:43:24.380 --> 00:43:27.790
It supports both full
and high-speed devices.

00:43:27.790 --> 00:43:30.370
So if you've got a full-speed device
and you want to take advantage of

00:43:30.370 --> 00:43:34.360
something in the USB 2.0 audio spec,
you don't necessarily have to be

00:43:34.360 --> 00:43:36.570
a high-speed device to use it.

00:43:37.900 --> 00:43:43.440
The USB 2.0 audio spec contains some
major changes to the USB 1.0 audio spec.

00:43:43.600 --> 00:43:45.310
Particularly,
there are some changes in the

00:43:45.370 --> 00:43:47.710
standard device descriptors,
so if you're familiar with how

00:43:47.710 --> 00:43:50.550
they were formatted before,
double-check them and make

00:43:50.550 --> 00:43:52.070
sure that they still work.

00:43:52.430 --> 00:43:56.700
And also, these changes are going to be
detailed in a document called

00:43:56.700 --> 00:44:02.340
Migrating USB 1.0 Audio to USB 2.0,
which is going to be made available

00:44:02.340 --> 00:44:06.280
to you shortly after the specification
has finally been released.

00:44:06.300 --> 00:44:09.630
Most of the work is already done on this,
but it would be irresponsible of me to

00:44:09.710 --> 00:44:13.370
provide it to you without first verifying
it against the final specification.

00:44:14.380 --> 00:44:16.450
So, now, Frankenstein devices.

00:44:16.450 --> 00:44:18.300
Maybe this name caught your attention.

00:44:18.300 --> 00:44:23.780
A Frankenstein device is a high-speed
device that broadcasts a USB 1.0

00:44:23.780 --> 00:44:26.300
audio specification descriptor.

00:44:26.590 --> 00:44:28.580
Meaning,
you say you're a high-speed device,

00:44:28.580 --> 00:44:32.300
but you're acting like you can be
supported by this old specification.

00:44:32.300 --> 00:44:37.250
Now, this is bad because the USB 2.0
audio spec specifically disallows

00:44:37.410 --> 00:44:39.300
the creation of such devices.

00:44:39.300 --> 00:44:45.060
And I've seen a lot of devices now where,
say, you've got a composite device

00:44:45.060 --> 00:44:47.300
that has video on it and audio.

00:44:47.300 --> 00:44:50.300
And it's a high-speed device,
so it can move all that video media.

00:44:50.310 --> 00:44:53.130
And then it has the USB 1.0
audio descriptor as well.

00:44:53.300 --> 00:44:55.300
This can cause a lot of problems.

00:44:55.300 --> 00:44:59.220
And I've heard that there are a number
of Frankenstein devices that have

00:44:59.220 --> 00:45:01.300
already been released into the wild.

00:45:01.300 --> 00:45:05.300
But even if they do appear
to work fine with Mac OS X,

00:45:05.300 --> 00:45:07.300
this is not by design.

00:45:07.300 --> 00:45:10.280
Apple USB Audio does not
officially support these devices.

00:45:10.300 --> 00:45:13.700
And moreover,
if you decide to make a device like this,

00:45:13.700 --> 00:45:16.300
you do it at your own peril.

00:45:16.300 --> 00:45:21.300
Apple USB Audio could be changed to
disallow the support of these devices.

00:45:21.350 --> 00:45:24.280
So if you want to make a
high-speed USB audio device,

00:45:24.300 --> 00:45:27.300
you need to go ahead and start
taking a look at the specification.

00:45:27.350 --> 00:45:30.530
And get us a device,
and we'll help you out with it.

00:45:30.700 --> 00:47:34.400
[Transcript missing]

00:47:34.620 --> 00:47:37.300
If you have the same clock source,
we can put you on the

00:47:37.300 --> 00:47:39.640
same I/O audio engine,
which is something we were

00:47:39.690 --> 00:47:40.700
never able to do before.

00:47:40.710 --> 00:47:45.830
If you've ever taken a look at
digital audio workstations software,

00:47:45.940 --> 00:47:48.800
and you plug in a USB audio
device that has input and output,

00:47:48.800 --> 00:47:51.800
a lot of times you'll see them
show up as two different devices.

00:47:51.920 --> 00:47:55.500
We have to assume that they're
independent because we don't know.

00:47:55.660 --> 00:47:59.260
But in USB 2.0, we do,
and we can finally take that

00:47:59.350 --> 00:48:01.310
and put them on the same engine.

00:48:01.590 --> 00:48:05.030
Now, if I can get you to take anything
away from this talk at all,

00:48:05.150 --> 00:48:08.700
I would say first of all,
if you follow the specification,

00:48:08.840 --> 00:48:11.990
we will do your driver
development for you.

00:48:12.450 --> 00:48:15.490
I don't know any other
way I can put that to say,

00:48:15.510 --> 00:48:18.240
we're going to do free work for
you if you just give us a device

00:48:18.240 --> 00:48:19.890
and you try to follow the spec.

00:48:19.970 --> 00:48:20.900
Okay?

00:48:21.010 --> 00:48:24.060
Next, if Apple USB audio is not
suitable for your device,

00:48:24.060 --> 00:48:25.840
let us know so we can improve it.

00:48:25.900 --> 00:48:30.900
One of the biggest complaints in the past
about Apple USB audio was the latency.

00:48:30.900 --> 00:48:33.870
Our round trip latency through
Core Audio was about 16 milliseconds.

00:48:34.140 --> 00:48:39.150
Well, I'm proud to announce that since
our first shipping Intel Macs,

00:48:39.370 --> 00:48:42.240
on PPC and Intel,
the round trip latency is just a

00:48:42.240 --> 00:48:43.830
little bit over 9 milliseconds.

00:48:43.900 --> 00:48:47.410
So that's something that you can
look forward to if you were worried

00:48:47.410 --> 00:48:49.900
about... You can clap if you want.

00:48:54.590 --> 00:48:57.500
If you were worried about the latency
of the Apple USB Audio driver,

00:48:57.500 --> 00:48:59.720
maybe it won't be as big a
concern for you right now.

00:49:00.010 --> 00:49:03.970
And if there are other advanced
features supported by the specification

00:49:04.220 --> 00:49:06.160
that the driver doesn't deal with,
let us know.

00:49:06.370 --> 00:49:08.700
We'll put that support in for you.

00:49:09.060 --> 00:49:12.100
Also, I also want to stress,
you can be class-compliant and

00:49:12.150 --> 00:49:13.670
still write your own driver.

00:49:13.740 --> 00:49:16.510
But when you write your own driver,
you provide yourself a certain

00:49:16.510 --> 00:49:18.750
immunity to different platform changes.

00:49:18.830 --> 00:49:23.340
Like, the new Mac Pros are coming out,
moving 32-64-bit DMA.

00:49:23.470 --> 00:49:25.540
With Apple USB Audio,
you're already good to go.

00:49:25.540 --> 00:49:27.120
You plug in your device, it still works.

00:49:27.120 --> 00:49:30.420
And the same was true when
we moved from PPC to Intel.

00:49:30.610 --> 00:49:33.930
You plug in your device,
it was still good to go.

00:49:33.980 --> 00:49:35.860
Because we test from
revision to revision,

00:49:35.860 --> 00:49:38.350
we make sure that this stuff
continues to work for you.

00:49:38.830 --> 00:49:43.170
Now, if your device is class-compliant,
and your driver doesn't

00:49:43.170 --> 00:49:46.270
work on a new architecture,
you can always say to your users,

00:49:46.280 --> 00:49:48.640
why don't you remove our driver for now,
and let it be

00:49:48.680 --> 00:49:51.260
class-compliant for a while,
and then we'll provide a new

00:49:51.260 --> 00:49:52.840
driver for you in the future.

00:49:52.840 --> 00:49:55.370
This way,
your customers can continue to use your

00:49:55.370 --> 00:49:57.650
device while you do your driver bring-up.

00:49:59.100 --> 00:50:01.030
And finally,
if you are designing a full or

00:50:01.040 --> 00:50:04.230
high-speed class-compliant device,
let us know so we can help

00:50:04.230 --> 00:50:06.000
you make it class-compliant.

00:50:06.060 --> 00:50:10.000
And with that, I will turn it over to our
fifth of four speakers,

00:50:10.000 --> 00:50:11.990
Eric Anderson.

00:50:22.760 --> 00:50:24.670
Okay, I was going to make a joke
about the four speakers,

00:50:24.750 --> 00:50:28.560
but that's already been done for me,
so moving right along.

00:50:28.560 --> 00:50:32.810
It's the same message
as the first four said.

00:50:32.820 --> 00:50:35.580
We do want you to differentiate.

00:50:35.580 --> 00:50:39.760
We want you to make unique,
novel products on your terms.

00:50:39.760 --> 00:50:42.080
Differentiate to make
your product better,

00:50:42.080 --> 00:50:44.750
not just by mistake to make it
different so that we have to

00:50:44.750 --> 00:50:46.000
cope with it in the drivers.

00:50:46.020 --> 00:50:50.460
The best way is to start with a
standard and then differentiate

00:50:50.640 --> 00:50:52.540
from there to add value.

00:50:52.700 --> 00:50:56.760
So I'm going to go over a variety
of FireWire standards that

00:50:56.900 --> 00:50:58.600
we have standard support for.

00:50:58.600 --> 00:51:01.340
These are places you could
start to base a product on.

00:51:01.400 --> 00:51:05.270
For each of these, I'll show you where to
get the specifications,

00:51:05.300 --> 00:51:08.640
how to match your device,
and review some of the common

00:51:08.640 --> 00:51:11.400
hazards that you might run into.

00:51:11.540 --> 00:51:13.410
Much of the information
will be duplicated,

00:51:13.490 --> 00:51:16.660
so the mass storage section will
have a lot in it that really

00:51:16.660 --> 00:51:18.850
applies to the other five as well.

00:51:19.780 --> 00:51:21.970
In this section,
there's going to be reference to a

00:51:21.970 --> 00:51:26.390
lot of tools in the FireWire SDK,
so to try any of this stuff out,

00:51:26.400 --> 00:51:27.930
just go on the web and download the SDK.

00:51:27.990 --> 00:51:30.890
It's at the URL that you see there.

00:51:33.780 --> 00:51:35.830
So, mass storage and SCSI-like devices.

00:51:35.900 --> 00:51:38.580
Probably the most common thing we
find on FireWire is a hard drive,

00:51:38.660 --> 00:51:41.230
or an optical drive,
or something that has a

00:51:41.230 --> 00:51:43.700
sort of SCSI architecture,
like maybe a high-end scanner.

00:51:43.700 --> 00:51:47.700
The standards for these come from T10,
the same as Kai mentioned earlier.

00:51:47.700 --> 00:51:51.570
These devices are often
architected using a bridge.

00:51:51.700 --> 00:51:55.700
So, as the picture illustrates,
you have a box, which is your hard drive.

00:51:55.720 --> 00:51:58.700
Most of it is occupied by a
hard drive mechanism inside

00:51:58.700 --> 00:52:01.700
that has some native interface,
like Serial ATA.

00:52:01.700 --> 00:52:05.620
That native interface connects to a
bridge that turns it into FireWire,

00:52:05.740 --> 00:52:09.660
which then connects to PHY silicon,
which actually drives the FireWire ports.

00:52:09.960 --> 00:52:12.780
Illustrated here is a device
with two FireWire 800 ports

00:52:12.880 --> 00:52:16.640
and one FireWire 400 port,
all driven from the same PHY silicon.

00:52:16.700 --> 00:52:19.810
So, that's what we normally see
in this kind of product,

00:52:19.950 --> 00:52:23.700
is this architecture of these
devices chained together like that.

00:52:24.880 --> 00:52:26.840
So, how do we support that in software?

00:52:26.840 --> 00:52:28.830
We have two drivers
that may matter to you.

00:52:28.850 --> 00:52:31.400
One is in the boot ROM,
so that we can boot from

00:52:31.700 --> 00:52:34.880
FireWire storage devices,
and the other is built into Mac OS X,

00:52:34.880 --> 00:52:37.620
so that they will appear in the Finder.

00:52:37.640 --> 00:52:41.550
These drivers match the
1394 configuration ROM that

00:52:41.650 --> 00:52:42.980
we find in your device.

00:52:42.980 --> 00:52:45.850
Specifically,
you publish a unit directory

00:52:45.860 --> 00:52:52.570
indicating that you use the SBP2,
or Serial Bus Protocol 2, protocol.

00:52:53.330 --> 00:52:55.360
This is the first place that
you need to differentiate,

00:52:55.360 --> 00:52:57.110
is in the config ROM.

00:52:57.110 --> 00:53:00.890
You need to indicate
your vendor and model ID,

00:53:00.920 --> 00:53:04.760
and you need to indicate a unique
serial number in every device.

00:53:04.760 --> 00:53:08.750
In FireWire, that's known as a GUID,
Globally Unique ID.

00:53:09.070 --> 00:53:12.340
Shown here on the lower left
is Apple System Profiler

00:53:12.540 --> 00:53:14.160
for a FireWire hard drive.

00:53:14.160 --> 00:53:17.040
Actually, it's a Mac in target disk
mode that I plugged in.

00:53:17.270 --> 00:53:19.800
Shown on the right is one
of the tools from the SDK,

00:53:19.910 --> 00:53:24.500
Firecracker, which shows the 1394
configuration ROM in that device.

00:53:24.550 --> 00:53:28.880
So I just want to briefly
point out how these correlate.

00:53:28.880 --> 00:53:31.470
In the red block, you can see the GUID.

00:53:31.470 --> 00:53:36.640
It's a 64-bit number that comes from
near the top of the configuration ROM.

00:53:36.640 --> 00:53:41.850
And that has been decoded a little bit by
Firecracker to show who the vendor ID is,

00:53:41.850 --> 00:53:42.970
for example.

00:53:42.980 --> 00:53:45.240
At the bottom,
you can see that also shows

00:53:45.240 --> 00:53:48.880
up in Apple System Profiler,
just as a 16-bit hex number.

00:53:48.880 --> 00:53:52.530
And then a little further down,
in the config ROM in the root directory,

00:53:52.670 --> 00:53:54.540
there's two very important keys.

00:53:54.640 --> 00:53:57.470
Key 17-hex is the model ID.

00:53:57.700 --> 00:54:00.390
It's a 24-bit number that says,
"Of all the great products you make,

00:54:00.490 --> 00:54:02.500
which one is this?"

00:54:03.230 --> 00:54:06.350
And that key is immediately
followed by a text leaf that has an

00:54:06.350 --> 00:54:08.170
ASCII string describing the product.

00:54:08.170 --> 00:54:11.620
In this case, you can see the ASCII bytes
for target disk mode,

00:54:11.620 --> 00:54:14.390
and that's what we put in
Apple System Profiler to tell

00:54:14.390 --> 00:54:16.070
the user what this device is.

00:54:16.080 --> 00:54:20.070
So, I mentioned it's common to use
bridge silicon to make these devices.

00:54:20.120 --> 00:54:25.300
If you start with an evaluation kit from,
say, the Cambridge Semiconductor Company,

00:54:25.300 --> 00:54:28.030
and you plug it in,
the config ROM may have

00:54:28.030 --> 00:54:30.600
been filled in for you,
but it may say something like

00:54:30.670 --> 00:54:33.070
Cambridge Semiconductor Evaluation Kit.

00:54:33.100 --> 00:54:35.980
So, it's going to look kind of
dumb if that's what the user

00:54:35.980 --> 00:54:39.060
sees in Apple System Profiler
when they buy your device.

00:54:39.100 --> 00:54:41.670
So, don't forget to go in here and
change it to something sensible

00:54:41.700 --> 00:54:43.020
that identifies your device.

00:54:46.290 --> 00:54:51.400
Another area that you need to check
on your device is the self-ID packet.

00:54:51.400 --> 00:54:54.920
All FireWire devices,
not just mass storage,

00:54:54.920 --> 00:54:56.700
send a short packet when
they're plugged in as the first

00:54:56.700 --> 00:54:58.200
step towards device discovery.

00:54:58.200 --> 00:55:03.760
A storage device generally is not
prepared to manage the FireWire bus,

00:55:03.770 --> 00:55:09.200
and so should not accidentally
claim that it wants to take control,

00:55:09.200 --> 00:55:11.200
because we're very trusting
and we might let it.

00:55:11.200 --> 00:55:15.080
So use the FireStarter tool,
also from the SDK,

00:55:15.080 --> 00:55:19.200
to check out the self-ID
that your device sends.

00:55:19.200 --> 00:55:22.500
FireStarter shows the bus topology
at the very lowest level and

00:55:22.500 --> 00:55:26.200
decodes a number of the bits so
that you can see what they mean.

00:55:26.200 --> 00:55:28.470
The three that are important
here are the contender bit,

00:55:28.470 --> 00:55:30.770
which needs to be zero so that
you don't accidentally end up

00:55:30.770 --> 00:55:32.190
in charge of the FireWire bus.

00:55:32.200 --> 00:55:35.390
The link bit needs to be one so
that we know there is somebody home

00:55:35.390 --> 00:55:37.190
and we should try to talk to you.

00:55:37.210 --> 00:55:39.190
And the power class should be set,
whether you're consuming

00:55:39.190 --> 00:55:40.200
power or providing power.

00:55:40.200 --> 00:55:43.350
consuming power, providing power, or not.

00:55:44.200 --> 00:55:48.940
So, just run Firestarter,
plug your device in.

00:55:48.980 --> 00:55:52.800
What's shown here is a two-node bus,
let's zoom in on that.

00:55:53.080 --> 00:55:56.370
Node 1 is Firestarter itself,
the Mac that it's running on.

00:55:56.370 --> 00:55:59.820
So by careful elimination,
we can discover that

00:55:59.820 --> 00:56:00.830
your device is Node 0.

00:56:00.840 --> 00:56:04.030
So then you can see the
link bit is properly set.

00:56:04.030 --> 00:56:05.630
It says LINK in all capital letters.

00:56:05.640 --> 00:56:08.350
The power class in this
case says up to 10 watts.

00:56:08.370 --> 00:56:12.160
But the contender bit isn't shown in
this line because it's somewhat obscure.

00:56:12.160 --> 00:56:15.050
But you can deduce that by
looking down at the bottom,

00:56:15.050 --> 00:56:18.030
where we have totals for
all the devices on the bus.

00:56:18.160 --> 00:56:20.670
And on this two-node bus,
there are zero nodes with

00:56:20.730 --> 00:56:22.200
their contender bit set.

00:56:22.300 --> 00:56:23.490
So you've obviously got it right.

00:56:23.620 --> 00:56:24.450
Yours must be zero.

00:56:24.460 --> 00:56:25.730
It's very easy.

00:56:28.710 --> 00:56:31.970
Okay,
these devices typically need firmware.

00:56:32.130 --> 00:56:35.530
If at all possible, you should use the
Silicon Vendor's firmware,

00:56:35.530 --> 00:56:38.620
because this firmware is very
difficult to debug buried deep

00:56:38.620 --> 00:56:40.320
inside the peripheral device.

00:56:40.320 --> 00:56:43.850
And it's easy to make mistakes in
there that don't appear right away,

00:56:43.850 --> 00:56:47.050
they only come up under stress
with multiple devices or so on,

00:56:47.160 --> 00:56:50.230
and it's really unpleasant to the user
if they have to update the firmware

00:56:50.230 --> 00:56:53.260
in the device just to keep it working.

00:56:53.260 --> 00:56:55.310
If you do need to differentiate there,
if you're going to add

00:56:55.340 --> 00:56:56.730
some unique features,
that's okay,

00:56:56.750 --> 00:56:58.240
but please test it thoroughly.

00:56:58.240 --> 00:57:00.640
Don't just plug it into
Windows and it mounts on the

00:57:00.640 --> 00:57:02.100
desktop and say you're done.

00:57:02.100 --> 00:57:03.540
There's more to it than that.

00:57:03.540 --> 00:57:04.610
Ideally, do both.

00:57:04.610 --> 00:57:07.440
Use the vendor's firmware
and test it thoroughly.

00:57:08.230 --> 00:57:11.160
How does the software matching work?

00:57:11.470 --> 00:57:15.130
In the kernel,
the IOFireWireSBP2 KEXT loads

00:57:15.190 --> 00:57:18.310
when we see that unit directory
that I showed earlier.

00:57:19.050 --> 00:57:21.220
If you have an RBC device,
like Kai mentioned,

00:57:21.220 --> 00:57:24.210
this is common in FireWire,
that's reduced block commands

00:57:24.310 --> 00:57:27.380
for a simple storage device,
then IO FireWire Serial

00:57:27.380 --> 00:57:33.150
Bus Protocol Transport KEXT loads
and provides storage-level services,

00:57:33.160 --> 00:57:35.120
or at least the lowest part thereof.

00:57:36.380 --> 00:57:38.870
This, if you need to subclass
or do your own driver,

00:57:38.870 --> 00:57:40.800
this would be a good place to do it.

00:57:40.940 --> 00:57:44.350
You can either subclass
for minor changes or,

00:57:44.450 --> 00:57:47.110
like Torrey described,
while honoring the open

00:57:47.190 --> 00:57:49.900
source requirements,
just make a complete copy of that driver

00:57:49.900 --> 00:57:52.020
and then customize it to your needs.

00:57:52.120 --> 00:57:55.530
If you do that, please make sure,
like I mentioned this morning,

00:57:55.530 --> 00:57:59.000
match carefully against your
device so that you don't mistakenly

00:57:59.030 --> 00:58:02.260
end up being the driver for
every hard drive out there.

00:58:02.780 --> 00:58:05.540
But all of these services
are available in user space.

00:58:05.680 --> 00:58:09.700
There is the SCSI Task User Client for
talking to SCSI architecture devices.

00:58:09.700 --> 00:58:14.700
There's also an SPP2 User Client if you
need a little bit lower level access.

00:58:14.700 --> 00:58:18.700
So if your device is not
something that can be booted from,

00:58:18.700 --> 00:58:21.400
like it's a high-end scanner, say,
you can probably do this all in user

00:58:21.400 --> 00:58:24.200
space and it's a lot easier there.

00:58:25.220 --> 00:58:29.020
Okay, here's some common hazards that you
may run into with this kind of device.

00:58:29.020 --> 00:58:32.640
The first would be if your
globally unique ID turns out

00:58:32.640 --> 00:58:34.660
to not actually be unique.

00:58:34.660 --> 00:58:37.440
If you've got an eval board
from Cambridge Semiconductor,

00:58:37.440 --> 00:58:40.220
it may have ID 12345.

00:58:40.230 --> 00:58:41.220
That's fine.

00:58:41.220 --> 00:58:42.900
If you plug it in, it'll work.

00:58:42.900 --> 00:58:45.780
Until you plug in another one
of those that's also 12345,

00:58:45.780 --> 00:58:47.900
now we can't tell them apart.

00:58:47.920 --> 00:58:51.190
So we're having no tolerance
policy towards this.

00:58:51.290 --> 00:58:53.180
That device is immediately blacklisted.

00:58:53.180 --> 00:58:54.870
Not only will we not
talk to the second one,

00:58:54.870 --> 00:58:57.790
we will cut off communication
with the first one because we just

00:58:57.790 --> 00:59:01.280
can't cope with two hard drives
and we don't know which is which.

00:59:01.380 --> 00:59:02.920
It's dangerous.

00:59:02.920 --> 00:59:04.920
So your customer should
never encounter this,

00:59:04.920 --> 00:59:06.920
but you might run into
it during development.

00:59:06.940 --> 00:59:09.580
So it's a good reminder to make
sure your GUID really is unique.

00:59:11.050 --> 00:59:13.750
Something else that customers don't do,
but testers do a lot,

00:59:13.760 --> 00:59:18.260
is to unplug a device and
then plug it right back in.

00:59:18.370 --> 00:59:20.960
You're trying to test the
robustness of your hot plug support,

00:59:20.960 --> 00:59:23.510
so you get pretty good at this,
it starts going really fast.

00:59:23.540 --> 00:59:25.010
So here's what happens.

00:59:25.010 --> 00:59:29.430
You drag the hard drive to the trash,
you unplug it, you plug it right back in,

00:59:29.430 --> 00:59:30.890
and nothing happens.

00:59:30.890 --> 00:59:32.160
Why is this?

00:59:32.560 --> 00:59:38.060
Well, the FireWire stack is designed to
have some patience before it decides

00:59:38.060 --> 00:59:39.880
that something's been unplugged.

00:59:39.980 --> 00:59:43.050
Maybe you bumped the power cable,
maybe you plugged in a third device,

00:59:43.070 --> 00:59:45.030
and there's a temporary power shortage.

00:59:45.040 --> 00:59:48.270
So when your device disappears,
we don't instantaneously tear down

00:59:48.270 --> 00:59:50.270
your stack and say you're out of there.

00:59:50.280 --> 00:59:52.620
We wait a few seconds to
make sure it's really gone.

00:59:52.640 --> 00:59:55.480
Once you get good at this,
you can plug it back in so fast

00:59:55.490 --> 00:59:58.180
that we think it was never away,
and so your driver

00:59:58.200 --> 01:00:00.700
doesn't unload and reload,
and so your icon doesn't

01:00:00.700 --> 01:00:02.180
reappear on the desktop.

01:00:02.540 --> 01:00:06.770
So if this happens to you during testing,
just unplug, wait 10 seconds,

01:00:06.770 --> 01:00:09.830
use a stopwatch or a clock,
because most people wait

01:00:09.890 --> 01:00:13.330
about two seconds otherwise,
plug it back in, everything will be fine.

01:00:13.340 --> 01:00:17.440
Finally, sorry, two more things.

01:00:19.570 --> 01:00:24.300
The FireWire 800 silicon that's available
today can support a FireWire 400 port.

01:00:24.350 --> 01:00:27.830
A lot of our Mac products do this,
we offer both, and we've seen it on

01:00:27.890 --> 01:00:29.340
hard drives a lot also.

01:00:29.410 --> 01:00:30.740
That's fine.

01:00:30.810 --> 01:00:33.130
Be sure to tell the
silicon what you're doing.

01:00:33.150 --> 01:00:35.550
As seen in the picture here,
there's a pin on the side of

01:00:35.610 --> 01:00:38.790
the PHY that says one of these
ports is not like the others.

01:00:38.790 --> 01:00:40.750
Run it only at 400.

01:00:41.820 --> 01:00:45.480
If you forget to set this,
the PHY will talk 800 through that port,

01:00:45.480 --> 01:00:48.840
and it might work briefly if you
have the right kind of cable,

01:00:49.220 --> 01:00:50.150
but it probably won't.

01:00:50.190 --> 01:00:53.110
And then the customer will
think the device is unreliable.

01:00:53.110 --> 01:00:55.430
So just set the pin on the PHY,
tell it the truth,

01:00:55.430 --> 01:00:57.010
everything will work fine.

01:00:58.560 --> 01:01:02.520
Finally, in a bridge-based device,
it may be common to run the

01:01:02.630 --> 01:01:05.310
FireWire silicon using power
that comes in over FireWire.

01:01:05.320 --> 01:01:08.180
But if you have, say,
a big 3.5-inch drive mechanism,

01:01:08.180 --> 01:01:09.980
that's going to need an AC adapter.

01:01:09.980 --> 01:01:13.850
So that drive might be off,
even though the FireWire silicon is on.

01:01:13.860 --> 01:01:18.240
Don't advertise that you are a hard
drive in your configuration ROM if you

01:01:18.410 --> 01:01:20.470
don't actually have a working hard drive.

01:01:20.480 --> 01:01:23.100
Because the software will load,
we'll try to talk to it,

01:01:23.100 --> 01:01:25.810
we'll get errors,
the user will be confused, it's bad.

01:01:26.040 --> 01:01:28.160
So there's creative
ways to cope with this,

01:01:28.160 --> 01:01:30.420
like not advertising a
config ROM and so on,

01:01:30.440 --> 01:01:32.140
to prevent this kind of problem.

01:01:35.250 --> 01:01:39.780
Okay, most of that advice applies to all
the rest of the device categories too,

01:01:39.780 --> 01:01:41.950
so I won't repeat it.

01:01:42.030 --> 01:01:44.210
We'll just cover what's different.

01:01:44.420 --> 01:01:47.690
Camcorders, television set-top boxes,
DVHS,

01:01:47.700 --> 01:01:50.000
anything with audio and video in it.

01:01:50.110 --> 01:01:51.740
Totally different driver stack.

01:01:51.770 --> 01:01:54.950
The standards for these:
AVC General is the audio/video

01:01:54.950 --> 01:01:58.800
command set that comes from
the 1394 Trade Association.

01:01:58.830 --> 01:02:02.820
And then the specific commands
for the AVC Tape subunit

01:02:03.050 --> 01:02:05.160
come from the same place.

01:02:05.190 --> 01:02:07.730
Additionally,
these devices stream audio and video

01:02:08.030 --> 01:02:14.300
using a standard known as ISO 61883,
also available on the web.

01:02:14.360 --> 01:02:19.690
When one of these devices is plugged in,
a text called "IO FireWire AVC"

01:02:19.700 --> 01:02:22.300
matches the AVC unit directory
found in the config ROM.

01:02:22.300 --> 01:02:25.940
And you can see it here in Firestarter.

01:02:26.050 --> 01:02:27.310
The config ROM is very brief.

01:02:27.440 --> 01:02:31.610
All it says is "I speak
AVC." From that point on,

01:02:31.610 --> 01:02:37.090
the discovery uses AVC commands rather
than any further config ROM mechanisms.

01:02:37.680 --> 01:02:42.220
So the first thing IO FireWire
AVC.keks does is it sends AVC subunit

01:02:42.220 --> 01:02:46.270
info commands to your device to
find out what subunits it supports.

01:02:46.340 --> 01:02:48.600
For example,
in this camcorder I plugged in,

01:02:48.600 --> 01:02:52.480
it has a tape recorder player
subunit and it has a camera subunit.

01:02:52.510 --> 01:02:56.180
So if you look in IO reg using terminal,
I've simplified it here,

01:02:56.190 --> 01:02:58.120
but you can see the
two different subunits,

01:02:58.150 --> 01:03:00.700
type 4 and type 7.

01:03:02.760 --> 01:03:07.310
For video-type devices, your best choice,
if you can, is to use QuickTime.

01:03:07.550 --> 01:03:10.420
If you're writing an application
or a service that's all about just

01:03:10.560 --> 01:03:14.650
bringing in video in real time,
such as PhotoBooth or iChat,

01:03:14.890 --> 01:03:17.530
if you can use QuickTime,
then you won't be tied to FireWire.

01:03:17.530 --> 01:03:20.190
You can use a USB camera,
you can use the built-in

01:03:20.280 --> 01:03:24.060
iSight in your newer Mac,
you can even use a PCI capture board.

01:03:24.060 --> 01:03:26.500
As long as it supports QuickTime,
it'll work with your app.

01:03:26.500 --> 01:03:28.380
So,
that's your best choice if you can do it.

01:03:28.820 --> 01:03:30.680
On the other hand,
if you're building a more

01:03:30.680 --> 01:03:33.820
integrated application,
something that fiddles with the camera,

01:03:33.820 --> 01:03:36.300
you know, runs the tape around
or does fancier things,

01:03:36.300 --> 01:03:38.050
you may want more direct control.

01:03:38.060 --> 01:03:40.500
In which case, your best choice,
probably,

01:03:40.500 --> 01:03:43.660
is to start with our audio-video
services framework sample

01:03:43.660 --> 01:03:45.300
code from the FireWire SDK.

01:03:45.390 --> 01:03:49.590
It has very thorough and complete
services to discover this kind of device,

01:03:49.590 --> 01:03:53.060
control this kind of device,
and establish streams to and from

01:03:53.060 --> 01:03:56.700
this kind of device for real-time
video and audio streaming.

01:04:01.340 --> 01:04:04.530
FireWire audio devices,
like an audio breakout box or

01:04:04.530 --> 01:04:07.360
synthesizer or mixer board,
are a little different from the

01:04:07.360 --> 01:04:09.580
audio/video devices we just discussed.

01:04:09.600 --> 01:04:15.370
They're based on the same AVC standard
and the same 16.18.83 streaming.

01:04:15.920 --> 01:04:18.350
Additionally, though,
it's recommended that you

01:04:18.500 --> 01:04:21.830
follow the BridgeCo standard
for AVC connection management.

01:04:21.920 --> 01:04:27.560
This helps the Mac to be able to have
certain expectations about how to

01:04:27.560 --> 01:04:30.940
discover the inputs and outputs on
your device and how to sensibly connect

01:04:30.940 --> 01:04:32.390
them and present them to the user.

01:04:33.180 --> 01:04:34.920
The discovery is all the same.

01:04:34.920 --> 01:04:38.620
We use AVC subunit info commands,
except we expect to see

01:04:38.740 --> 01:04:42.980
Type 1 for audio or Type 12,
C hex, for a music device.

01:04:42.980 --> 01:04:46.240
If so, we can support you with
Apple FW Audio KEXT and

01:04:46.350 --> 01:04:50.350
hook you into Core Audio,
so you get standard audio services.

01:04:52.310 --> 01:04:55.610
If the standard services are inadequate,
you can also talk to these

01:04:55.610 --> 01:04:58.400
devices from user space,
or if necessary,

01:04:58.400 --> 01:05:00.600
you can do your own kernel driver.

01:05:00.690 --> 01:05:02.900
It is recommended that you
support the Level 1 or the

01:05:02.900 --> 01:05:05.770
Level 2 connection management
according to the BridgeCo specs,

01:05:05.770 --> 01:05:09.280
so that we'll have the most
seamless support for your device.

01:05:11.170 --> 01:05:14.660
Coming in Leopard is Apple FW Audio 2.0,
with a number of

01:05:14.710 --> 01:05:16.280
significant improvements.

01:05:16.320 --> 01:05:20.060
The connection management APIs will be
available in user space in order to help

01:05:20.100 --> 01:05:23.000
avoid having to go work in the kernel.

01:05:23.050 --> 01:05:25.850
The audio streaming engine
has improvements in lower

01:05:25.860 --> 01:05:29.390
latency and lower CPU overhead,
so there's more time available

01:05:29.390 --> 01:05:30.930
for you to do your thing.

01:05:31.290 --> 01:05:35.570
Support for multiple streams simultaneous
and multiple formats simultaneous

01:05:35.590 --> 01:05:38.700
has been substantially improved,
so you can do richer kinds of things.

01:05:38.700 --> 01:05:40.880
If you have an MLan
device or a MIDI device,

01:05:40.880 --> 01:05:43.000
we'll have better support for those.

01:05:43.000 --> 01:05:45.420
And finally,
the extended stream format from

01:05:45.510 --> 01:05:49.520
the AVC Music subunit will be
supported in the 2.0 Apple FW Audio.

01:05:51.060 --> 01:05:54.020
Recently,
there was a joint working group formed

01:05:54.130 --> 01:05:58.700
between the 1394 Trade Association and
the Audio Engineering Society to

01:05:58.740 --> 01:06:03.900
tackle a whole realm of use cases
for these pro audio devices.

01:06:03.900 --> 01:06:06.660
Not just a simple home
studio application,

01:06:06.720 --> 01:06:10.800
but say professional studios,
building infrastructure, PA,

01:06:10.800 --> 01:06:14.890
all kinds of larger systems
integrated out of these devices.

01:06:14.950 --> 01:06:16.990
If you're making an innovative
product in this area,

01:06:17.000 --> 01:06:19.190
I recommend you get involved
with these groups so you can find

01:06:19.250 --> 01:06:22.890
out what they're doing or maybe
even give them some direction.

01:06:24.160 --> 01:06:27.660
There's another class of cameras out
there that's sort of webcam-like:

01:06:27.720 --> 01:06:32.520
IIDC, the Industrial and
Instrumentation Digital Camera.

01:06:32.570 --> 01:06:36.960
The standard for this comes straight
from the 1394 Trade Association.

01:06:37.020 --> 01:06:39.750
Also, the Apple EyeSight is
based on this standard,

01:06:39.750 --> 01:06:43.700
and we publish a tech note that talks
about the additional unique things

01:06:43.740 --> 01:06:47.070
that were added to the EyeSight,
like its audio capability.

01:06:48.170 --> 01:06:50.190
This is a little different
from the devices before it

01:06:50.280 --> 01:06:53.440
because when you plug it in,
nothing loads.

01:06:53.440 --> 01:06:55.320
Drivers are opened when
an application needs them,

01:06:55.340 --> 01:07:00.140
say if you run iChat or Photo Booth,
at which time QuickTime iIDC digitizer

01:07:00.140 --> 01:07:03.650
loads and finds this camera
and it becomes available

01:07:03.660 --> 01:07:05.500
in the video input menu.

01:07:06.770 --> 01:07:09.540
When that digitizer loads,
it matches the unit directory in

01:07:09.540 --> 01:07:12.490
the config ROM for this device,
so you have to properly fill that in

01:07:12.490 --> 01:07:13.960
to show that you speak this protocol.

01:07:16.780 --> 01:07:19.580
Okay,
slightly different category of devices.

01:07:19.590 --> 01:07:24.760
The Mac Pro and the Mac Book Pro have
expansion slots where the customer

01:07:25.170 --> 01:07:27.510
can add extra interface cards.

01:07:28.010 --> 01:07:32.130
PCI Express comes from the PCI SIG,
as shown there.

01:07:32.210 --> 01:07:34.820
If you're going to make a FireWire card,
it should be OpenHCI,

01:07:34.900 --> 01:07:36.080
which is available on the web.

01:07:36.080 --> 01:07:39.620
And the PHY silicon just comes
from the basic 1394 standard,

01:07:39.620 --> 01:07:41.330
which comes from IEEE itself.

01:07:41.340 --> 01:07:42.660
This is very important.

01:07:42.660 --> 01:07:44.790
If you're going to
build this kind of card,

01:07:44.790 --> 01:07:48.120
pick good quality silicon and
grill your vendors carefully.

01:07:48.120 --> 01:07:53.630
We have specifically designed the stack
to not support subclassing at this point.

01:07:54.640 --> 01:07:56.350
FireWire is a multi-device bus.

01:07:56.360 --> 01:07:57.860
Cameras, hard drives, audio devices.

01:07:57.860 --> 01:08:00.680
It's really hard to work around
silicon bugs in a way that

01:08:00.680 --> 01:08:02.480
satisfies all of those devices.

01:08:02.480 --> 01:08:05.000
It's much better for everyone
to just pick silicon that works.

01:08:05.000 --> 01:08:07.270
And there's plenty of good
silicon on the market.

01:08:07.280 --> 01:08:10.200
So you can't write your own driver here.

01:08:10.200 --> 01:08:11.470
You can't subclass ours.

01:08:11.480 --> 01:08:12.900
You've been warned.

01:08:15.330 --> 01:08:17.800
Finally, for a FireWire hub,
there's practically nothing to do.

01:08:17.860 --> 01:08:20.490
There's no firmware, there's no software.

01:08:20.490 --> 01:08:23.570
You should check out the self-ID
to make sure it's not claiming

01:08:23.580 --> 01:08:27.060
that it wants to manage the bus,
which it's going to do very badly.

01:08:27.070 --> 01:08:30.360
In addition to FireStarter,
we have a tool in the SDK called FiTool,

01:08:30.360 --> 01:08:34.160
which can look inside the Fi over
the FireWire cable and read out

01:08:34.170 --> 01:08:36.060
its internal control registers.

01:08:36.130 --> 01:08:38.750
FiTool also has a copy
of the 1394 spec in it,

01:08:38.760 --> 01:08:41.110
so as you mouse over each
bit in each register,

01:08:41.110 --> 01:08:43.970
it'll tell you what that
bit is supposed to be doing.

01:08:45.570 --> 01:08:47.300
Okay, finally,
if none of that was suitable,

01:08:47.300 --> 01:08:49.730
if you're going to go innovate
something completely different,

01:08:49.830 --> 01:08:50.240
that's great.

01:08:50.260 --> 01:08:54.440
Here are some things that are recently
going on in the 1394 Trade Association.

01:08:54.440 --> 01:08:58.420
There's an active group defining the
LinkFi interface for the 1600 and

01:08:58.460 --> 01:09:01.120
3200 megabit versions of the standard.

01:09:01.120 --> 01:09:05.990
There's a major effort going on
to implement 1394 over the coaxial

01:09:06.010 --> 01:09:09.440
cable that's already used for
residential cable TV distribution.

01:09:09.620 --> 01:09:13.240
And in fact, this week at the Cable
Lab Summer Conference in Keystone,

01:09:13.240 --> 01:09:16.980
Colorado, two companies are demonstrating
implementations of this already.

01:09:16.980 --> 01:09:20.000
One of them running at 200 megabits,
and one of them running at 400 megabits.

01:09:20.000 --> 01:09:21.040
It's very impressive stuff.

01:09:22.450 --> 01:09:25.660
The 1394 TA has a new
standard called VersaFi,

01:09:25.790 --> 01:09:29.820
which I showed the Fi tool screenshot
there on the previous slide,

01:09:29.820 --> 01:09:33.530
adds a few more registers into the
Fi and ways of talking to them,

01:09:33.640 --> 01:09:37.360
so that you might be able to implement
a simple device with no link at all.

01:09:37.400 --> 01:09:40.740
So it simplifies the implementation,
it reduces cost,

01:09:40.740 --> 01:09:45.710
it could open up FireWire's advantages,
like long distance and high speed,

01:09:45.710 --> 01:09:48.150
to a broader category of device.

01:09:48.250 --> 01:09:50.550
I mentioned the
Pro Audio Working Group already,

01:09:50.600 --> 01:09:53.380
a very heavy activity level there.

01:09:53.380 --> 01:09:55.540
And if you've got some new idea,
the TA might be a great

01:09:55.540 --> 01:09:56.600
place to come work on it.

01:09:56.690 --> 01:10:00.790
There's 130 member companies all making
FireWire devices of one kind or another.

01:10:01.050 --> 01:10:03.810
You can gain access to the
people who wrote the standards.

01:10:03.890 --> 01:10:05.670
You can influence where the standards go.

01:10:05.920 --> 01:10:07.040
There's a lot of opportunity there.

01:10:07.040 --> 01:10:10.210
So there's their website at that URL.

01:10:12.130 --> 01:10:13.100
Okay, that's it.

01:10:13.100 --> 01:10:17.110
If you need more information on any of
the five topics that we discussed today,

01:10:17.110 --> 01:10:19.560
you can contact Craig Keithley,
or you can nab him.

01:10:19.560 --> 01:10:21.040
He's sitting in the front
row here when we're done.

01:10:21.040 --> 01:10:23.600
He is the evangelist for just I.O.

01:10:23.600 --> 01:10:26.010
technology in general on the Mac.

01:10:27.360 --> 01:10:30.090
Plus, all of the sample code and other
resources that we've discussed

01:10:30.090 --> 01:10:34.480
today are available in the WWDC 2006
section on Apple's developer webpage.

01:10:36.060 --> 01:10:37.550
A couple of events coming up.

01:10:37.730 --> 01:10:42.310
There is a Plugfest tonight
at Apple in the piano bar.

01:10:42.510 --> 01:10:46.810
We will have FireWire, USB,
and Bonjour all together.

01:10:47.190 --> 01:10:49.320
Bring your device,
or just come and we'll show

01:10:49.350 --> 01:10:53.420
you the tools and techniques
that we've demonstrated here.

01:10:53.480 --> 01:10:57.760
And tomorrow morning, from 9 to 11,
I think on the other side of this wall,

01:10:57.760 --> 01:11:01.140
there is a Kernel Lab where we
will have our engineers present

01:11:01.140 --> 01:11:05.170
and you can come learn more,
try hands-on developing or

01:11:05.260 --> 01:11:07.420
subclassing a KEXT on Mac OS X.