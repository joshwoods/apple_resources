WEBVTT

00:00:13.240 --> 00:00:14.150
Hello and welcome.

00:00:14.440 --> 00:00:17.730
Today we're going to talk about
some of the new installation

00:00:17.760 --> 00:00:19.380
technologies in Leopard.

00:00:19.380 --> 00:00:22.010
We're going to split the session
up into four different sections.

00:00:22.050 --> 00:00:23.840
If you went to the first
session on Tuesday,

00:00:23.840 --> 00:00:25.890
you might be familiar with this setup.

00:00:27.990 --> 00:00:31.130
We're going to start by talking about
easier ways and better ways to create

00:00:31.340 --> 00:00:34.310
software packages using Packagemaker,
Packagemaker 3.0 we've

00:00:34.330 --> 00:00:36.340
introduced in Leopard.

00:00:37.210 --> 00:00:39.940
We're next going to talk about
better ways to deliver your software

00:00:39.940 --> 00:00:43.140
and your package content to your
customers with a new flat package

00:00:43.240 --> 00:00:46.860
format we're introducing in Leopard,
downloadable packages,

00:00:46.890 --> 00:00:49.510
and certificate signing of your packages.

00:00:50.460 --> 00:00:55.300
Then we'll cover a
well-asked-for feature,

00:00:55.300 --> 00:00:57.590
home directory installs.

00:01:01.150 --> 00:01:03.180
And then go over some changes
that are coming in upgrades,

00:01:03.180 --> 00:01:06.690
like better ways to find movable
software and patch packages,

00:01:06.690 --> 00:01:11.060
and some changes in the way we do
receipts in the Leopard Installer.

00:01:11.160 --> 00:01:14.090
So let's get started with
creating the packages.

00:01:15.140 --> 00:01:18.000
In order to create great
software packages to deliver

00:01:18.000 --> 00:01:19.950
your software to your customers,
you need great tools.

00:01:19.960 --> 00:01:22.600
How many out there are
familiar with PackageMaker?

00:01:25.450 --> 00:01:27.330
I see a lot of you
have used Packagemaker.

00:01:27.530 --> 00:01:30.750
Packagemaker is really hard to use,
and we find that a lot of our customers

00:01:31.170 --> 00:01:35.390
use Packagemaker to get started and then
edit the package by hand afterwards.

00:01:35.400 --> 00:01:37.640
And in Leopard,
if you've checked out the Leopard Seed,

00:01:37.640 --> 00:01:40.570
we have a new Packagemaker 3.0,
which makes this much easier

00:01:40.570 --> 00:01:42.040
to do than ever before.

00:01:42.040 --> 00:01:43.880
Instead of talking about
this for a long time,

00:01:43.880 --> 00:01:46.000
let's show you a quick demo.

00:01:46.530 --> 00:01:48.060
I'm sorry.

00:01:48.110 --> 00:01:49.880
Quickly about PackageMaker 3.0.

00:01:49.940 --> 00:01:52.260
PackageMaker 3.0 is workflow focused.

00:01:52.290 --> 00:01:54.960
It allows you to create your
software packages the way

00:01:54.960 --> 00:01:56.310
you create your software.

00:01:56.380 --> 00:01:58.220
It picks the best package format for you.

00:01:58.220 --> 00:02:01.190
You don't need to worry about whether
you need to make a meta package

00:02:01.190 --> 00:02:03.380
or a package or a distribution.

00:02:03.420 --> 00:02:05.780
You just create your software,
you create your interface,

00:02:05.870 --> 00:02:08.340
and PackageMaker will take
care of that detail for you.

00:02:08.370 --> 00:02:10.720
And it even exposes almost all the
installer features that we provide,

00:02:10.720 --> 00:02:12.960
including all the features
we're going to talk about today

00:02:12.960 --> 00:02:14.800
throughout the session with Leopard.

00:02:14.990 --> 00:02:18.190
And our plan is for it to
have it run on 10.4 as well,

00:02:18.380 --> 00:02:21.250
the Leopard seed version of PackageMaker.

00:02:23.770 --> 00:02:27.160
So the version in the seed
today does not run on 10.4,

00:02:27.180 --> 00:02:31.160
but we plan to get out a version
to you guys soon that will.

00:02:31.250 --> 00:02:34.020
So let's show you a quick
demo of Packagemaker,

00:02:34.020 --> 00:02:34.570
Sean.

00:02:42.260 --> 00:02:42.920
Good afternoon.

00:02:43.140 --> 00:02:46.950
My name is Sean Kelly,
and I work on PackageMaker at Apple.

00:02:47.020 --> 00:02:49.640
In this demo,
we'll use the new PackageMaker to create

00:02:49.640 --> 00:02:53.370
a simple package for one application
with some interface resources.

00:02:53.440 --> 00:02:55.380
So let's get started.

00:02:55.980 --> 00:02:58.290
Today we're going to build
a package for Sketch,

00:02:58.290 --> 00:03:01.820
which is one of the developer
example applications.

00:03:01.900 --> 00:03:03.790
So we'll launch Package Maker.

00:03:03.860 --> 00:03:06.480
The Install Properties
dialog will come down,

00:03:06.480 --> 00:03:11.060
and we'll call this the Sketch package,
and we'll target Tiger.

00:03:12.610 --> 00:03:15.050
To add Sketch to the package,
we can just drag it in

00:03:15.220 --> 00:03:16.880
to the contents area.

00:03:16.930 --> 00:03:19.910
And we'll see that PackageMaker has
figured out that this is an application,

00:03:19.910 --> 00:03:22.950
and it's filled in some
default information for us.

00:03:23.230 --> 00:03:25.260
We're also going to add
some interface resources.

00:03:25.470 --> 00:03:29.320
To do that, we click on the Sketch item
in the upper left corner and

00:03:29.320 --> 00:03:31.390
then the Edit Interface button.

00:03:31.460 --> 00:03:34.240
This brings up the interface editor,
which is a what you see

00:03:34.290 --> 00:03:35.810
is what you get interface.

00:03:35.850 --> 00:03:40.330
What you configure here is exactly what
the user will see in the installer.

00:03:41.490 --> 00:03:46.800
To add your resources,
you just pick the item you want along

00:03:46.800 --> 00:03:48.650
the left and then drag your file in.

00:03:48.870 --> 00:03:50.940
So we'll add a background image.

00:03:51.010 --> 00:03:53.000
And it doesn't look too
good up in the corner,

00:03:53.000 --> 00:03:56.320
so we'll move that into the center.

00:03:56.380 --> 00:04:03.160
And then we'll also add a license
and a welcome or an introduction.

00:04:03.160 --> 00:04:10.300
So now we'll build our package
and we'll save it on the desktop.

00:04:16.340 --> 00:04:19.510
And if we open in the installer,
we see that we have our

00:04:19.560 --> 00:04:21.540
background image with our welcome.

00:04:21.620 --> 00:04:23.530
If we click through,
we'll have our license,

00:04:23.530 --> 00:04:26.250
which the user has to
agree to to continue.

00:04:26.330 --> 00:04:28.170
And if we continue to click
through the installer,

00:04:28.190 --> 00:04:30.990
Sketch would be installed
into slash applications.

00:04:31.070 --> 00:04:34.570
And that's how easy it is to create
a package in PackageMaker 3.0.

00:04:34.580 --> 00:04:36.130
Chris?

00:04:40.770 --> 00:04:43.700
As you see with PackageMaker 3.0,
it's much easier to create your

00:04:43.700 --> 00:04:46.210
software packages to deliver
your software to your customers,

00:04:46.210 --> 00:04:48.440
and it's much fewer
steps than ever before.

00:04:48.440 --> 00:04:51.950
And the PackageMaker you see here
today is more of a preview as we're

00:04:51.950 --> 00:04:55.110
still working on it and hope to
have even more features and better

00:04:55.110 --> 00:04:56.890
functionality when Leopard ships.

00:04:59.100 --> 00:05:01.170
So that's better ways
to create your software.

00:05:01.240 --> 00:05:04.690
Now how do we deliver our
software better to our customers?

00:05:05.760 --> 00:05:09.120
Most of the ways to deliver
software are via a store with media,

00:05:09.120 --> 00:05:10.300
a CD-ROM or DVD.

00:05:10.300 --> 00:05:13.290
But going forward,
people have been starting to deliver

00:05:13.290 --> 00:05:16.440
their software over the internet
with downloads and other things.

00:05:16.440 --> 00:05:19.340
And with installer packages,
they're bundles and folders.

00:05:19.360 --> 00:05:22.570
And to deliver your software,
you need to wrap those bundles

00:05:22.590 --> 00:05:24.860
with a zip file or a disk image.

00:05:24.860 --> 00:05:28.040
And that makes it very difficult for
your customers to use that because

00:05:28.040 --> 00:05:30.720
they need to download the zip file,
unzip the file, launch the package,

00:05:30.750 --> 00:05:31.580
throw away the zip file.

00:05:32.470 --> 00:05:36.640
Also, with downloadable
content on the internet,

00:05:36.670 --> 00:05:39.370
your customers have to download large
pieces of software and they may only use

00:05:39.420 --> 00:05:42.780
parts of the options of your software,
may not need the entire thing.

00:05:42.960 --> 00:05:46.500
So in Leopard, we're really improving
the way you can do this.

00:05:46.540 --> 00:05:48.760
We're doing that with a
new flat package format.

00:05:48.770 --> 00:05:51.060
We're gonna go over more
details in a couple minutes.

00:05:51.070 --> 00:05:53.420
Downloadable packages,
you can download packages

00:05:53.420 --> 00:05:56.840
while you're installing,
as well as certificate signed packages.

00:05:56.840 --> 00:06:01.340
So let's start by talking
about flat packages.

00:06:02.490 --> 00:06:04.450
To do that,
I want to quickly go over again what

00:06:04.530 --> 00:06:06.820
the packages are like today in 10.4.

00:06:06.820 --> 00:06:08.550
Packages are bundles.

00:06:08.560 --> 00:06:10.460
These bundles are just, you know,
the CFBundle,

00:06:10.460 --> 00:06:12.720
just like the CFBundle API or NSBundle.

00:06:12.720 --> 00:06:14.670
They contain files and folders.

00:06:14.680 --> 00:06:17.500
And when you want to distribute
these packages to your customers,

00:06:17.500 --> 00:06:18.780
you need to wrap them up in an archive.

00:06:18.780 --> 00:06:22.030
And they really have poor performance
when you have many packages.

00:06:22.040 --> 00:06:24.200
We're really moving for
our software developers,

00:06:24.200 --> 00:06:26.040
and even Apple ourselves
are trying to do this,

00:06:26.120 --> 00:06:29.570
by making our software more and
more packages so we can deliver more

00:06:29.570 --> 00:06:31.040
and more options to our customers.

00:06:31.640 --> 00:06:34.120
And when you have more and more packages,
with the bundled packages,

00:06:34.120 --> 00:06:36.960
the performance is really
starting to get to the limit.

00:06:36.960 --> 00:06:39.570
For example,
the OS install Leopard was installed

00:06:39.670 --> 00:06:42.910
with has over 100 packages,
and just reading those packages

00:06:43.000 --> 00:06:44.460
as bundles takes a long time.

00:06:44.460 --> 00:06:51.060
Also, our bundled packages contain both
the presentation information as

00:06:51.060 --> 00:06:54.340
well as the actual package content,
the software you want to deliver.

00:06:54.340 --> 00:06:56.680
And in Tiger,
we introduced distributions,

00:06:56.680 --> 00:06:59.610
and we're trying to remove the
presentation and the content and

00:06:59.850 --> 00:07:00.790
separate them from each other.

00:07:01.390 --> 00:07:05.950
With iLife, for example,
you have iLife contains a special

00:07:06.520 --> 00:07:09.960
interface for installing iLife,
and it contains packages within it,

00:07:10.080 --> 00:07:12.050
like iTunes and iMovie.

00:07:12.080 --> 00:07:14.820
And that presentation and the
actual package content is separate.

00:07:16.720 --> 00:07:19.990
So the new flat packages in Leopard
change this by having the entire

00:07:20.050 --> 00:07:22.110
package content in a single file.

00:07:22.110 --> 00:07:24.040
So you can easily distribute
the software over the internet

00:07:24.190 --> 00:07:27.390
without wrapping it in bundles,
et cetera, or wrapping it inside of

00:07:27.390 --> 00:07:28.840
a disk image or zip file.

00:07:28.860 --> 00:07:31.900
They also have much better
performance when having many packages.

00:07:31.910 --> 00:07:35.470
Maybe thousands of packages or
even more don't take very long

00:07:35.470 --> 00:07:37.390
to open and actually install.

00:07:37.790 --> 00:07:41.360
And also, we're really starting to move
away from having presentation

00:07:41.360 --> 00:07:42.510
information in the package.

00:07:42.620 --> 00:07:46.850
And so in the flat file package format,
there's no presentation

00:07:46.850 --> 00:07:48.020
information in there.

00:07:48.050 --> 00:07:52.480
We expect you to put your presentation
information in the distribution scripts.

00:07:53.680 --> 00:07:56.260
So you're probably wondering,
do you have to move to flat packages?

00:07:56.320 --> 00:07:57.520
And the answer is no.

00:07:57.560 --> 00:08:00.660
Your bundle packages will
continue to work going forward.

00:08:00.690 --> 00:08:02.110
They'll work just fine.

00:08:02.120 --> 00:08:04.340
And we're going to continue
to support them going forward.

00:08:04.380 --> 00:08:07.650
But in order to start moving ahead
and utilizing the internet and

00:08:07.650 --> 00:08:10.220
utilizing some of the new features,
we'd like you to start looking

00:08:10.310 --> 00:08:11.560
into these flat packages.

00:08:11.610 --> 00:08:14.730
We really understand that most of
you want to ship your software for an

00:08:14.730 --> 00:08:16.660
operating system that's actually out.

00:08:16.890 --> 00:08:18.650
And so we understand you're
probably not going to be shipping

00:08:18.770 --> 00:08:20.400
with flat packages anytime soon.

00:08:20.440 --> 00:08:22.790
But we'd like you to start looking
into this technology and see how it can

00:08:22.790 --> 00:08:24.710
change the way you deliver your software.

00:08:24.760 --> 00:08:27.770
And flat packages will give you some
of these things we're showing up here.

00:08:27.900 --> 00:08:30.330
And we're going to talk
about a lot of these today.

00:08:31.290 --> 00:08:34.220
So let's quickly go over what one
of these flat packages looks like.

00:08:34.260 --> 00:08:37.160
A flat package uses
XAR file archive format.

00:08:37.160 --> 00:08:39.050
It's an open source format.

00:08:39.280 --> 00:08:41.670
You can get more information
at the Open Darwin website.

00:08:41.670 --> 00:08:44.250
I know that's going away,
some of you have heard,

00:08:44.260 --> 00:08:47.300
but they're looking at
places to relocate it.

00:08:47.300 --> 00:08:50.540
And Apple contributes back to XAR and
any changes we make we're going to

00:08:50.540 --> 00:08:52.720
bring back to the XAR community.

00:08:52.720 --> 00:08:57.770
And XAR is similar to a zip format
where it has a table of contents and

00:08:57.770 --> 00:09:03.990
the file content and it's done with
XML so we can extend what we can

00:09:03.990 --> 00:09:06.260
put in our packages in the future.

00:09:06.260 --> 00:09:08.430
And these flat packages
can compress their data,

00:09:08.440 --> 00:09:12.990
both the metadata and your actual
application data using Gzip or Bzip2.

00:09:13.060 --> 00:09:17.060
And Bzip2 will give you smaller packages
to distribute to your customers.

00:09:17.100 --> 00:09:19.960
And of course all of
this is in a single file.

00:09:21.210 --> 00:09:25.180
Now, I just spent a lot of time earlier
talking about how we're going for

00:09:25.180 --> 00:09:28.940
the separation of presentation
information and your package content.

00:09:28.940 --> 00:09:31.680
Well, we have this thing called
flat distributions,

00:09:31.680 --> 00:09:33.860
and that allows you to
put all of your software,

00:09:33.860 --> 00:09:35.700
your software product,
in a single file to

00:09:35.810 --> 00:09:37.020
distribute to your customers.

00:09:37.020 --> 00:09:40.760
You may do this with iLife,
or even maybe Apple Software Update might

00:09:40.760 --> 00:09:44.580
use this to distribute all of the
software update in a single file.

00:09:44.580 --> 00:09:47.960
But we may want to actually separate
the content and the concepts of

00:09:48.070 --> 00:09:50.110
the package into separate packages.

00:09:50.440 --> 00:09:53.040
So we really are trying to keep
the concept of packages and the

00:09:53.170 --> 00:09:56.000
thing that we use to distribute
the packages separately here.

00:09:56.000 --> 00:09:58.810
Anyways,
these flat distributions allow you to put

00:09:58.810 --> 00:10:01.000
all of your software in a single file.

00:10:01.000 --> 00:10:04.300
It uses a distribution script to
drive the installation experience,

00:10:04.370 --> 00:10:06.780
and it can contain all
the resources necessary.

00:10:06.780 --> 00:10:09.040
And this is a great way to
distribute your software in a

00:10:09.040 --> 00:10:10.510
single file to your customers.

00:10:12.550 --> 00:10:15.350
The good news is that Packagemaker
makes this really easy and

00:10:15.360 --> 00:10:16.630
will do all this work for you.

00:10:16.640 --> 00:10:19.410
So let's have Sean come up
here and give you a quick demo.

00:10:19.460 --> 00:10:21.100
Sean?

00:10:27.340 --> 00:10:28.300
Thanks, Chris.

00:10:28.340 --> 00:10:30.400
In this demo,
we'll take the document we created

00:10:30.400 --> 00:10:33.040
before and turn it into a flat package.

00:10:33.110 --> 00:10:35.920
So we'll go back to the
main PackageMaker interface.

00:10:35.940 --> 00:10:38.660
As Chris mentioned,
to create a flat package

00:10:38.660 --> 00:10:42.260
in PackageMaker 3.0,
all you need to do is target Leopard.

00:10:42.340 --> 00:10:46.240
So we'll change our target using
the Install Properties dialog,

00:10:46.240 --> 00:10:48.260
which can be found in the View menu.

00:10:48.300 --> 00:10:49.550
And we'll target Leopard.

00:10:49.580 --> 00:10:56.480
If we build our package,
we'll put it on the desktop again.

00:11:02.380 --> 00:11:05.220
And if we open in the installer,
we see that we have the same

00:11:05.220 --> 00:11:06.300
install experience before.

00:11:06.300 --> 00:11:10.900
We have our background image
with our welcome and our license.

00:11:10.950 --> 00:11:15.290
Now, because this is a flat package,
you can no longer go into the finder

00:11:15.300 --> 00:11:20.720
and control click on the package
and go in and edit files by hand.

00:11:20.800 --> 00:11:23.600
So in Package Maker,
we've included a tool called

00:11:23.610 --> 00:11:26.950
the Flat Package Editor,
which you can find in the Edit menu.

00:11:27.070 --> 00:11:28.500
So we'll launch that.

00:11:28.600 --> 00:11:32.690
And if we bring in the
Sketch package we just created,

00:11:33.030 --> 00:11:35.740
The Flat Package Editor will
show us the package contents.

00:11:35.740 --> 00:11:37.570
We can add and remove them.

00:11:37.580 --> 00:11:40.020
We can see what's there.

00:11:40.030 --> 00:11:42.770
Now,
because we had resources in this package,

00:11:42.930 --> 00:11:45.970
we can see that PackageMaker has
automatically upgraded this into

00:11:46.090 --> 00:11:51.520
a flat distribution because flat
packages can't have interface resources.

00:11:51.600 --> 00:11:55.330
So inside the package,
we have the package info file

00:11:55.340 --> 00:11:58.520
with the BOM and the payload
that Chris had mentioned.

00:11:58.550 --> 00:12:03.490
We have our distribution XML,
and we have our interface resources,

00:12:03.540 --> 00:12:06.040
the background, the license,
and the welcome.

00:12:06.100 --> 00:12:09.320
In addition to the Flat Package Editor,
you can also use the Czar command

00:12:09.330 --> 00:12:11.500
line tool to edit flat packages.

00:12:11.570 --> 00:12:14.130
So that's Flat Packages
in PackageMaker 3.0.

00:12:14.160 --> 00:12:15.710
Chris?

00:12:19.670 --> 00:12:20.270
Thank you, Sean.

00:12:20.330 --> 00:12:21.990
As you can see,
it's really easy to create these

00:12:22.100 --> 00:12:23.660
flat packages in PackageMaker.

00:12:23.660 --> 00:12:26.090
We'd like you guys to start trying
them out and playing with them.

00:12:27.800 --> 00:12:30.020
So let's dig a little deeper on
what these flat packages look

00:12:30.070 --> 00:12:32.040
like underneath the scenes.

00:12:32.040 --> 00:12:34.340
As Sean pointed out,
there's a package info file.

00:12:34.400 --> 00:12:37.390
This contains all the
metadata about the package,

00:12:37.640 --> 00:12:39.330
size information,
and other things the installer

00:12:39.340 --> 00:12:41.520
can use to install the file.

00:12:41.730 --> 00:12:43.330
This package info file looks like this.

00:12:43.340 --> 00:12:45.570
It's an XML file.

00:12:45.660 --> 00:12:48.350
The information up here is not
really important because PackageMaker

00:12:48.350 --> 00:12:49.560
will take care of these details.

00:12:49.700 --> 00:12:52.330
But it contains information such
as the identifier of the package,

00:12:52.330 --> 00:12:56.480
which is used for upgrades, the version,
where the package is going

00:12:56.480 --> 00:12:58.610
to install by default,
et cetera.

00:13:00.040 --> 00:13:02.140
Obviously,
all packages need a payload to deliver

00:13:02.140 --> 00:13:05.590
your software to your customers,
and so flat packages have a payload,

00:13:05.600 --> 00:13:06.820
just like the bundled packages.

00:13:07.080 --> 00:13:09.780
And that's a CPIO archive,
which contains the software.

00:13:09.900 --> 00:13:11.830
And of course,
the CPIO archive is compressed

00:13:11.910 --> 00:13:13.900
using the XAR container.

00:13:13.900 --> 00:13:16.890
And these archives can,
just like the bundled packages,

00:13:16.890 --> 00:13:23.140
properly archive resource forks,
extended attributes, type creator, icons,

00:13:23.140 --> 00:13:23.830
etc.

00:13:25.130 --> 00:13:27.420
So flat packages also
have installer scripts.

00:13:27.480 --> 00:13:30.160
Installer scripts allow you to
perform an action before and right

00:13:30.160 --> 00:13:31.900
after installing of a package.

00:13:31.930 --> 00:13:34.930
These are executables,
either executables or shell scripts.

00:13:34.930 --> 00:13:36.820
And like I said,
they can run right before

00:13:36.950 --> 00:13:38.360
or right after a package.

00:13:38.360 --> 00:13:40.880
And they have access to the
location of the installation.

00:13:40.880 --> 00:13:44.090
And one of the new things we're
going to talk about a little later

00:13:44.420 --> 00:13:48.140
is that the flat packages have
a model for relocating software.

00:13:48.140 --> 00:13:52.080
If your software is a bundle,
an application that can move on the disk,

00:13:52.240 --> 00:13:55.080
the flat packages can find
that application as it's moved.

00:13:55.100 --> 00:14:00.190
And the flat packages also have a
way in your installer scripts to

00:14:00.190 --> 00:14:03.490
run a script specifically for that
application that's moved and tell

00:14:03.570 --> 00:14:06.900
the script where the application's
moved so that you can perform an

00:14:06.960 --> 00:14:09.080
action before and after that location.

00:14:09.080 --> 00:14:14.070
Also, these scripts have access to
other resources and other scripts

00:14:14.070 --> 00:14:16.360
inside of this flat package.

00:14:16.360 --> 00:14:19.840
Additionally, if some of you are familiar
with the bundled packages,

00:14:19.840 --> 00:14:22.820
in the bundled packages
there is a pre-flight script,

00:14:22.820 --> 00:14:24.780
a post-flight script,
a pre-upgrade script,

00:14:24.780 --> 00:14:25.080
a post-upgrade script,
and a pre-upgrade script.

00:14:25.080 --> 00:14:27.710
There's a post-upgrade script,
a pre-install, and a post-install script.

00:14:27.740 --> 00:14:30.200
And in flat packages,
we've really simplified that

00:14:30.370 --> 00:14:33.310
by just having a pre-install
script and a post-install script.

00:14:33.360 --> 00:14:36.290
There's no longer a pre-flight script,
which can run at the very,

00:14:36.290 --> 00:14:38.290
very beginning of the
installation of your product,

00:14:38.360 --> 00:14:41.450
or a post-flight script that runs
at the very end rather than just

00:14:41.780 --> 00:14:43.320
before and after your package.

00:14:43.320 --> 00:14:46.140
So if you need to do that,
flat packages allow you to

00:14:46.190 --> 00:14:49.000
create a script-only package
that doesn't have a payload.

00:14:49.000 --> 00:14:51.470
And you can place that package at
the very beginning of your install

00:14:51.470 --> 00:14:52.780
or the very end of your install.

00:14:55.280 --> 00:14:57.820
In the package info file,
you specify the scripts

00:14:57.890 --> 00:15:00.610
using the scripts elements.

00:15:00.780 --> 00:15:02.710
And here we have four scripts.

00:15:02.850 --> 00:15:04.600
And the four scripts,
the first one is just

00:15:04.600 --> 00:15:05.430
a pre-install script.

00:15:05.520 --> 00:15:09.840
And the file attribute specifies the
name of the script you want to run.

00:15:09.840 --> 00:15:12.160
And of course, PackageMaker will take
care of these details.

00:15:12.160 --> 00:15:16.280
But also, you see the second item
is a component script.

00:15:16.410 --> 00:15:19.290
And a component is a way we
represent sub-items of your package,

00:15:19.290 --> 00:15:22.190
such as bundles and things
that could move independently.

00:15:22.200 --> 00:15:26.050
And there's a post-install script
for our simple app component,

00:15:26.060 --> 00:15:29.200
as well as a post-install
script for the overall package.

00:15:29.200 --> 00:15:32.760
You don't need all of these,
but you can have these for your package.

00:15:33.500 --> 00:15:35.530
So you may be wondering
about requirement checks.

00:15:35.740 --> 00:15:38.040
Is there a way to say that my
package can only install on

00:15:38.040 --> 00:15:39.400
this system or another system?

00:15:39.520 --> 00:15:40.640
And the answer is no.

00:15:40.690 --> 00:15:44.360
These packages are only a way to deliver
your software and install your software.

00:15:44.360 --> 00:15:47.140
And those requirement checks
belong in the distribution script.

00:15:47.170 --> 00:15:49.400
But PackageMaker will take
care of that detail for you.

00:15:49.450 --> 00:15:53.460
So if you're creating a 10-4 package,
it may put requirement checks

00:15:53.500 --> 00:15:55.390
inside of your individual packages.

00:15:55.430 --> 00:15:58.470
If you create a 10-5 package,
PackageMaker will automatically make

00:15:58.470 --> 00:16:00.980
sure those go to the distribution script.

00:16:02.260 --> 00:16:06.130
So to summarize the flat packages,
it's a 10.5 only technology.

00:16:06.140 --> 00:16:08.480
It's going to be used going
forward for new features,

00:16:08.480 --> 00:16:11.760
and it's really a platform we're
going to use to continue to improve

00:16:11.760 --> 00:16:13.780
our installation technology.

00:16:13.910 --> 00:16:16.310
It allows you to download your
software without wrapping your

00:16:16.310 --> 00:16:18.120
software in zip files or disk images.

00:16:18.120 --> 00:16:21.160
And we really want you guys to start
trying them out and playing with them.

00:16:21.190 --> 00:16:23.840
Again, we understand you probably
can't use them for a while,

00:16:23.870 --> 00:16:27.170
as you won't be shipping software that
requires 10.5 only for quite a while.

00:16:27.240 --> 00:16:30.670
And PackageMaker 3.0 makes
it very easy to use this.

00:16:32.250 --> 00:16:38.270
So now that we have this great way
to download your content from the

00:16:38.270 --> 00:16:40.930
internet using our flat packages,
there's some other things we can

00:16:40.930 --> 00:16:43.360
do with downloadable packages.

00:16:43.360 --> 00:16:45.340
In Leopard, with these flat packages,
we had something called

00:16:45.410 --> 00:16:46.260
a Quick Start package.

00:16:46.260 --> 00:16:48.120
And if you went to the
first session on Tuesday,

00:16:48.120 --> 00:16:50.630
we kind of started to
allude to this package type.

00:16:50.670 --> 00:16:53.030
What this allows you to do,
it allows you to have your

00:16:53.030 --> 00:16:56.740
software on the internet,
just the distribution of your software.

00:16:56.740 --> 00:16:58.900
Your customer can
download the distribution.

00:16:58.900 --> 00:16:59.860
They get to make the choices.

00:16:59.860 --> 00:17:01.300
They can see the license agreement.

00:17:01.300 --> 00:17:04.340
They can see the custom install panel,
custom background, et cetera.

00:17:04.620 --> 00:17:06.640
And once they make the choice
of what they want to install,

00:17:06.640 --> 00:17:09.860
the installer will go to the internet
and download only the pieces that

00:17:09.860 --> 00:17:12.940
your software needs to install
with the way your customer expects.

00:17:12.940 --> 00:17:16.140
This will really save time and money
for both you and your customers.

00:17:16.140 --> 00:17:19.390
And it's really bringing our install
technology back to where we were,

00:17:19.390 --> 00:17:20.500
I guess, in QuickTime.

00:17:20.550 --> 00:17:23.880
A QuickTime installer back in the
day used to do a similar thing.

00:17:23.970 --> 00:17:26.270
So hopefully this will
help a lot of you out.

00:17:28.490 --> 00:17:33.370
So the way this is done is by specifying
a URL inside the distribution script of

00:17:33.370 --> 00:17:36.200
your package that points to a server.

00:17:36.280 --> 00:17:38.720
And Packagemaker 3.0
makes it very easy to do.

00:17:38.790 --> 00:17:42.350
So let's quickly show you a demo,
quick start package.

00:17:49.030 --> 00:17:50.390
Thank you, Chris.

00:17:50.460 --> 00:17:54.170
On this demo, we'll create a quick start
package to install Sketch.

00:17:54.260 --> 00:17:58.740
So I have a PackageMaker document that
I've created ahead of time that just

00:17:58.800 --> 00:18:02.590
defines some interface resources so
that we don't have to do that again.

00:18:02.690 --> 00:18:06.020
To create a quick start
package using PackageMaker 3.0,

00:18:06.020 --> 00:18:09.370
you drag in an existing flat package.

00:18:10.060 --> 00:18:13.860
Now by default, if you add a package
into PackageMaker 3.0,

00:18:13.860 --> 00:18:17.560
it'll read the package and it'll present
it all in the PackageMaker interface.

00:18:17.580 --> 00:18:21.320
You can then make changes and
PackageMaker will rebuild the package.

00:18:21.560 --> 00:18:23.320
However,
what we want to do is we want to point

00:18:23.320 --> 00:18:25.850
it to a URL where the package will live.

00:18:25.940 --> 00:18:30.280
So we'll use this menu and we'll
change it to downloadable package.

00:18:30.340 --> 00:18:32.600
And we have a web server
running on this machine,

00:18:32.600 --> 00:18:35.620
so I'll give it a local host URL.

00:18:39.470 --> 00:18:42.840
And then I'll build the package
and save it on the desktop.

00:18:42.840 --> 00:18:50.040
Now if we get info on the
package we just created,

00:18:50.080 --> 00:18:53.360
we'll see that it's only 32 kilobytes.

00:18:53.410 --> 00:18:56.100
And if we open it in the installer,

00:18:56.240 --> 00:18:59.930
We see we have our
interface resources there.

00:18:59.940 --> 00:19:04.300
We have our background image
and our README and our license.

00:19:04.300 --> 00:19:08.010
And if we click through and install,
during the installation,

00:19:08.010 --> 00:19:12.720
the installer will go to the web server,
download the package, and install it.

00:19:12.770 --> 00:19:15.770
So the user only has to download
the small 32 kilobytes to

00:19:16.070 --> 00:19:17.640
quick start their install.

00:19:17.660 --> 00:19:20.560
So that's downloadable
packages in PackageMaker 3.0.

00:19:20.600 --> 00:19:22.080
Chris?

00:19:26.200 --> 00:19:26.860
Thank you, Sean.

00:19:26.860 --> 00:19:29.360
As you can see,
it's really easy to use Packagemaker

00:19:29.360 --> 00:19:31.800
3.0 to create downloadable
and quick start packages.

00:19:31.800 --> 00:19:34.580
And I'm sure you guys can
imagine different ways to

00:19:34.580 --> 00:19:36.740
distribute your software using
this technology in the future.

00:19:38.370 --> 00:19:40.200
So how does it do this behind the scenes?

00:19:40.250 --> 00:19:43.670
What Packagemaker is doing is placing
a URL inside the package ref element

00:19:43.670 --> 00:19:45.110
inside your distribution script.

00:19:45.330 --> 00:19:50.170
Those of you who are familiar with
distribution scripts and how this works,

00:19:50.200 --> 00:19:52.200
usually it's a file URL.

00:19:52.200 --> 00:19:55.550
It also places a hash of the package
inside the distribution script,

00:19:55.630 --> 00:19:58.800
and that way the installer can ensure
that the package it downloads and

00:19:58.800 --> 00:20:01.440
installs is the one that the author
of the original software expected.

00:20:04.030 --> 00:20:07.410
So to summarize downloadable packages,
it's a flat file package

00:20:07.550 --> 00:20:10.240
format only for 10,
5 packages and going forward.

00:20:10.240 --> 00:20:12.460
But we really want you to
start embracing the internet.

00:20:12.660 --> 00:20:13.920
Your customers are
embracing the internet.

00:20:13.940 --> 00:20:16.770
They're probably even downloading
your software via the internet now.

00:20:16.880 --> 00:20:18.980
It should be even easier
going forward in the future.

00:20:19.040 --> 00:20:21.810
And it will save time
and money for everybody.

00:20:24.440 --> 00:20:29.030
So now that we have ways to package your
software in easier ways and download

00:20:29.030 --> 00:20:32.770
that software from the internet,
start to get into places where

00:20:33.270 --> 00:20:36.060
identifying where the software
comes from is very important.

00:20:36.180 --> 00:20:39.950
And so our flat package format
supports certificate signing.

00:20:40.410 --> 00:20:42.850
Those of you who are familiar
with Software Update know that

00:20:42.850 --> 00:20:45.740
Apple Software Update only installs
software from Apple Computer.

00:20:45.740 --> 00:20:50.130
And our customers expect that
the software it gets from

00:20:50.140 --> 00:20:53.590
Software Update is the software
update that Apple expects to give you.

00:20:53.600 --> 00:20:57.210
It does that by signing its
packages and ensuring the package

00:20:57.210 --> 00:20:59.280
does come from Apple Computer.

00:20:59.280 --> 00:21:03.170
This signing doesn't say anything
about whether the software is

00:21:03.170 --> 00:21:06.190
good or whether it's secure,
but mostly just says that

00:21:06.190 --> 00:21:09.230
it's from Apple Computer,
and it's really all about identity.

00:21:10.030 --> 00:21:13.170
So certificate signing packages is
all about where the package comes

00:21:13.270 --> 00:21:16.400
from and ensuring that a piece of
software is the software you expect.

00:21:18.310 --> 00:21:21.100
So in Leopard, this is more of kind of
a preview technology.

00:21:21.100 --> 00:21:24.430
It's something that our flat
package format is going to support,

00:21:24.490 --> 00:21:28.970
but we're still working out better ways
to utilize the certificate signing of the

00:21:29.010 --> 00:21:31.400
packages to deliver your software better.

00:21:31.400 --> 00:21:34.790
It's a work in progress,
and you sign your packages

00:21:34.800 --> 00:21:36.940
using a standard X.509 cert.

00:21:36.990 --> 00:21:38.250
You can use a certificate
assistant to do that,

00:21:38.250 --> 00:21:40.300
and we're going to show
you a demo in a minute.

00:21:40.300 --> 00:21:43.540
And the UI we have in the installer
is just for testing at this point.

00:21:44.110 --> 00:21:45.910
One of the things you can do
going forward and something that

00:21:45.910 --> 00:21:49.240
we plan on doing for Leopard is
possibly downloading your software,

00:21:49.240 --> 00:21:51.580
updating software from the installer.

00:21:51.580 --> 00:21:54.540
The way this would work is you
might deliver your software today

00:21:54.540 --> 00:21:57.590
at 1.0 and know that you might
have a 1.1 going down the line.

00:21:57.600 --> 00:22:01.860
But you don't know what the hash
of that package is going to be,

00:22:01.860 --> 00:22:03.900
so you can't use the quick
start package technology.

00:22:03.900 --> 00:22:07.460
So you sign your package now and you
specify that there may be software

00:22:07.460 --> 00:22:09.300
down the line at a specific URL.

00:22:10.060 --> 00:22:13.170
When that time comes where the
software is on that server and your

00:22:13.170 --> 00:22:16.360
customers install that software,
it will check the server,

00:22:16.360 --> 00:22:19.420
download the package,
and match the certificate signing to

00:22:19.700 --> 00:22:23.400
make sure that the same person who
signed the original software is the

00:22:23.400 --> 00:22:24.650
same person who signed the update.

00:22:24.660 --> 00:22:26.820
And if that's the case,
it can safely install the software.

00:22:26.820 --> 00:22:28.680
In this case,
the certificate doesn't even

00:22:28.710 --> 00:22:31.220
have to be a certificate that
goes to a root authority.

00:22:31.220 --> 00:22:32.550
It can be a self-signed package.

00:22:32.580 --> 00:22:37.780
But we can ensure that the software is
from the original author we saw before.

00:22:37.780 --> 00:22:39.840
Again, this is something that we're
looking forward to doing.

00:22:40.160 --> 00:22:41.560
And we're going to do many
more things down the line.

00:22:41.560 --> 00:22:44.330
And really,
the certificate signing of packages is

00:22:44.330 --> 00:22:48.140
more of a technology we're introducing
as part of the flat packages.

00:22:48.140 --> 00:22:51.470
So let's show you a quick
demo of signing packages.

00:22:51.480 --> 00:22:52.100
Sean?

00:22:58.550 --> 00:22:59.900
Thank you, Chris.

00:22:59.900 --> 00:23:03.080
In this demo,
we'll create a signed package for Sketch.

00:23:03.160 --> 00:23:06.350
So to get started,
we'll use the Certificate Assistant to

00:23:06.350 --> 00:23:10.330
create a self-signed certificate
using the Keychain Access application,

00:23:10.330 --> 00:23:13.850
which can be found in
Applications Utilities.

00:23:14.520 --> 00:23:18.160
So we'll go into the Keychain
Access menu and the Certificate

00:23:18.160 --> 00:23:21.880
Assistant item and create a certificate.

00:23:22.940 --> 00:23:26.100
We'll call this the
WWDC Demo Certificate,

00:23:26.110 --> 00:23:29.320
which will be a self-signed
root certificate.

00:23:35.770 --> 00:23:38.600
So we have our WWDC demo certificate.

00:23:38.610 --> 00:23:44.460
And if we go into Package Maker,
we'll create a signed sketch.

00:23:46.730 --> 00:23:51.800
and Target Leopard because
otherwise certificates won't work.

00:23:51.800 --> 00:23:54.760
And we'll add Sketch again.

00:23:55.380 --> 00:23:58.780
To set our certificate,
we can use the Set Certificate

00:23:58.780 --> 00:24:01.370
item in the Project menu.

00:24:01.400 --> 00:24:05.820
Packagemaker will scan and find all the
certificates that are valid for signing.

00:24:05.900 --> 00:24:08.910
So we have our WWDC demo certificate.

00:24:09.130 --> 00:24:11.200
And we'll set that.

00:24:11.200 --> 00:24:14.370
We'll build our package onto the desktop.

00:24:17.330 --> 00:24:20.580
And when it gets ready to sign,
PackageMaker will ask you if it's

00:24:20.580 --> 00:24:22.480
allowed to use the certificate.

00:24:22.510 --> 00:24:24.500
So we'll allow that.

00:24:24.590 --> 00:24:27.900
And if we open it in the installer,
we'll see there's a little lock

00:24:27.900 --> 00:24:29.750
icon up in the upper right corner.

00:24:29.860 --> 00:24:32.060
If we click on that,
we'll see which certificate

00:24:32.060 --> 00:24:33.740
was used to sign the package.

00:24:33.840 --> 00:24:37.720
And that's really all there is to it
for certificate signing in PackageMaker.

00:24:37.750 --> 00:24:39.310
Chris?

00:24:43.250 --> 00:24:44.000
Thank you, Sean.

00:24:44.050 --> 00:24:45.660
As you can see, there's a theme here.

00:24:45.720 --> 00:24:48.360
We're really trying to make sure that
all the features that we're exposing and

00:24:48.370 --> 00:24:53.430
giving you developers with installers
are all available in PackageMaker.

00:24:54.080 --> 00:24:58.120
So now we've talked about new ways to
deliver your software using Leopard.

00:24:58.180 --> 00:25:00.650
Let's talk about a new feature
in Leopard's installer to help

00:25:00.740 --> 00:25:02.620
you install your software better.

00:25:02.620 --> 00:25:04.620
And that's home directory installs.

00:25:04.940 --> 00:25:05.620
This is --

00:25:08.440 --> 00:25:11.090
This is something that's been asked
for and requested by many developers.

00:25:11.220 --> 00:25:13.990
Many customers are looking for a way
to install in their home directory,

00:25:13.990 --> 00:25:16.270
and so we're finally doing
this as part of Leopard.

00:25:16.440 --> 00:25:19.190
It's really about giving
your customers the choice,

00:25:19.290 --> 00:25:21.560
and sometimes they only have
the ability to install their

00:25:21.560 --> 00:25:23.040
software in certain locations.

00:25:23.080 --> 00:25:25.650
Not every customer uses their
machine as an administrator,

00:25:25.650 --> 00:25:27.860
for example,
and so they want to be able to install

00:25:27.930 --> 00:25:29.830
their software in their home directory.

00:25:30.500 --> 00:25:32.400
It's very simple to do in Packagemaker.

00:25:32.440 --> 00:25:34.100
It's as simple as selecting a checkbox.

00:25:34.360 --> 00:25:38.040
Packagemaker has a new set of checkboxes
that specify the domain that you're

00:25:38.040 --> 00:25:39.660
allowed to install the software in.

00:25:39.730 --> 00:25:43.580
And the domains allow you to specify
how the user experience looks.

00:25:43.680 --> 00:25:45.600
It's very simple to do in Packagemaker.

00:25:45.600 --> 00:25:47.500
It's as simple as selecting a checkbox.

00:25:47.500 --> 00:25:51.200
Packagemaker has a new set of checkboxes
that specify the domain that you're

00:25:51.260 --> 00:25:52.860
allowed to install the software in.

00:25:55.150 --> 00:25:58.650
So behind the scenes,
what PackageMaker does for you

00:25:58.730 --> 00:26:01.440
is it creates a domains element
inside your distribution script.

00:26:01.480 --> 00:26:04.390
That domains element tells the
installer which domains you'd like to

00:26:04.390 --> 00:26:06.240
present to your user for installation.

00:26:06.240 --> 00:26:10.140
There are three main domains,
the home directory domain,

00:26:10.140 --> 00:26:16.920
the active system volume,
which is your running system,

00:26:16.920 --> 00:26:18.730
and any other volume domain.

00:26:18.740 --> 00:26:21.510
And that really drives what the
installer is going to show when it

00:26:21.680 --> 00:26:23.450
brings the installer to your customer.

00:26:24.440 --> 00:26:26.920
And these domains are
specified using JavaScript,

00:26:26.920 --> 00:26:28.700
and they really boil
down to true or false.

00:26:28.700 --> 00:26:32.030
So you can determine at runtime which
domains to show to your customers.

00:26:32.040 --> 00:26:34.900
And of course, PackageMaker takes care
of these details for you.

00:26:37.080 --> 00:26:40.660
So when you actually specify
an install to allow for home

00:26:40.660 --> 00:26:43.760
directory or for the system,
what actually happens?

00:26:43.780 --> 00:26:46.180
Well,
the installer is taking your package,

00:26:46.200 --> 00:26:48.100
and if your user selects
their home directory,

00:26:48.100 --> 00:26:51.390
it installs the entire package
root in the home directory.

00:26:51.680 --> 00:26:54.480
If the user selects the system,
it will install the entire

00:26:54.480 --> 00:26:56.140
package route at the system.

00:26:56.140 --> 00:26:58.430
And if you do any searching
inside of your package,

00:26:58.510 --> 00:27:01.370
it will restrict all the search
to the domain that your customer

00:27:01.430 --> 00:27:04.120
specified so you don't install
your software in another location

00:27:04.120 --> 00:27:06.360
if your customer specified
installing in their home directory.

00:27:08.670 --> 00:27:11.280
To summarize, it's all about giving
your customers the choice.

00:27:11.480 --> 00:27:14.860
And with PackageMaker 3.0,
it's very easy to create packages

00:27:14.860 --> 00:27:17.300
that will install your software in
the home directory or on the system,

00:27:17.300 --> 00:27:20.150
or whatever choices you feel
necessary for your software.

00:27:20.230 --> 00:27:22.450
And of course,
these are really the things you need to

00:27:22.450 --> 00:27:25.390
decide before designing your packages,
whether your package is appropriate for

00:27:25.510 --> 00:27:27.320
installing in the home directory or not.

00:27:27.390 --> 00:27:29.680
If you have software that
requires kernel extensions,

00:27:29.750 --> 00:27:31.350
for example,
you probably don't want to allow

00:27:31.350 --> 00:27:32.760
installation in the home directory.

00:27:32.780 --> 00:27:38.000
It may not make very much sense to
have a kernel extension installed

00:27:38.000 --> 00:27:40.600
in the system and an application
that uses that kernel extension

00:27:40.600 --> 00:27:43.080
only accessible to one single user.

00:27:43.090 --> 00:27:45.090
Another thing is,
this interface is available in both

00:27:45.170 --> 00:27:48.100
the installer application as well
as the installer command line tool.

00:27:48.150 --> 00:27:50.820
So if you have software
that has domains turned on,

00:27:51.080 --> 00:27:54.280
you can specify which domain to install
by using the installer command line

00:27:54.460 --> 00:27:56.930
tool or the installer application.

00:27:57.040 --> 00:28:00.580
So that's a quick update on better ways
to install using the Leopard installer.

00:28:00.580 --> 00:28:06.710
Now I want to cover better ways to do
upgrades using the Leopard installer.

00:28:08.490 --> 00:28:11.160
Upgrades are all about planning ahead.

00:28:11.240 --> 00:28:13.360
You really need to start looking
at how you're going to ship your

00:28:13.360 --> 00:28:15.560
software in the future before
you ship your software to start.

00:28:15.580 --> 00:28:18.280
Of course, that's not always possible,
but you really want to give

00:28:18.280 --> 00:28:19.760
your users the best experience.

00:28:19.790 --> 00:28:21.730
And to do that,
you want to be able to find your

00:28:21.730 --> 00:28:25.170
software that your customers have moved
on the disk properly and also possibly

00:28:25.170 --> 00:28:28.570
have more efficient ways of installing
your software over the internet.

00:28:30.560 --> 00:28:33.640
So the three things we're going to talk
about today to make that better today

00:28:34.030 --> 00:28:36.270
is better ways of finding your software.

00:28:36.460 --> 00:28:42.510
The Leopard installer has new ways
to help relocate software on the

00:28:42.510 --> 00:28:43.840
disk or find relocated software.

00:28:43.840 --> 00:28:47.160
It also has a new patching
technology that allows you to

00:28:47.160 --> 00:28:50.500
distribute your upgrades of your
software in much smaller pieces.

00:28:50.500 --> 00:28:53.160
And there's also some changes
to how receipts are done,

00:28:53.220 --> 00:28:55.070
and we'll talk about that in a bit.

00:28:56.690 --> 00:29:00.270
So let's talk about better
ways to relocate software.

00:29:00.590 --> 00:29:02.920
It's really a Mac thing to
move your software on the disk.

00:29:02.950 --> 00:29:07.460
As your 1.0 software installer does,
it installs the software

00:29:07.460 --> 00:29:09.460
maybe in /applications.

00:29:09.490 --> 00:29:12.010
But your customers are free to move
that software anywhere on the disk.

00:29:12.160 --> 00:29:15.450
They'll probably organize the
software however they feel fit.

00:29:15.520 --> 00:29:18.500
And it's important that the installer
is created in a way that allows

00:29:18.500 --> 00:29:22.640
your 2.0 of your software to find
that software while doing upgrades.

00:29:22.680 --> 00:29:25.970
And it's really what's
expected on a Mac environment.

00:29:26.880 --> 00:29:30.020
The good news is this is
really easy with PackageMaker.

00:29:30.130 --> 00:29:32.520
With PackageMaker,
it's as simple as a simple checkbox.

00:29:32.570 --> 00:29:35.960
And this will work for 10.3
and 10.4 packages as well

00:29:35.960 --> 00:29:37.360
as the new 10.5 packages.

00:29:40.520 --> 00:29:45.190
But what's new in Leopard is ways to do
searching as part of the flat packages,

00:29:45.230 --> 00:29:47.010
as part of distribution scripts.

00:29:47.110 --> 00:29:49.860
And searching inside of distribution
scripts allow you to do your

00:29:49.860 --> 00:29:52.560
searches in a way that you haven't
been able to do in the past.

00:29:52.680 --> 00:29:55.220
So let's say you're shipping iWork,
for example.

00:29:55.260 --> 00:29:59.650
iWork comes with two applications,
Pages and Keynote.

00:29:59.720 --> 00:30:02.440
And you want to make sure
that when you upgrade iWork,

00:30:02.500 --> 00:30:05.740
you install both Pages and
Keynote in the same folder.

00:30:05.810 --> 00:30:09.560
So if you have two independent searches,
they may find a copy of Pages in one

00:30:09.560 --> 00:30:12.020
location and Keynote in another location.

00:30:12.100 --> 00:30:14.460
And by doing your searches
in the distribution script,

00:30:14.510 --> 00:30:18.370
you can use search results from
one search and key off of that.

00:30:18.580 --> 00:30:23.160
You may find Pages and install
Keynote in the same folder as Pages.

00:30:23.300 --> 00:30:25.200
And to do that,
we have three basic search types

00:30:25.220 --> 00:30:27.180
we're going to talk about today.

00:30:27.880 --> 00:30:29.600
We're going to start
with component searches.

00:30:29.660 --> 00:30:31.960
Component searches are the
fastest way to search for

00:30:31.960 --> 00:30:33.560
bundles inside of your package.

00:30:33.590 --> 00:30:35.740
They're really the recommended
way of doing searches.

00:30:35.800 --> 00:30:38.870
And we use both Launch Services and
Spotlight to find your

00:30:38.870 --> 00:30:40.980
software as fast as possible.

00:30:42.730 --> 00:30:46.710
What's happening with component searches
is there's a locator element in both

00:30:46.780 --> 00:30:48.540
your distribution script or your package.

00:30:48.540 --> 00:30:51.070
And that element
contains search elements.

00:30:51.160 --> 00:30:55.330
Each search element is a single
search that finds a list of results.

00:30:57.190 --> 00:31:00.790
Each search element has an
ID attribute that specifies a

00:31:00.790 --> 00:31:02.200
name to the search you're doing.

00:31:02.250 --> 00:31:05.990
And you can use that ID later on to
look up the results of the search.

00:31:07.160 --> 00:31:09.900
They have a type attribute that
specifies the type of search.

00:31:10.010 --> 00:31:12.340
And I said before that we
have three search types.

00:31:12.380 --> 00:31:14.900
That's the way you specify searches.

00:31:16.780 --> 00:31:20.190
So the first search type we're
talking about is component searches.

00:31:20.330 --> 00:31:23.670
Component searches are the way
to find bundles on your disk.

00:31:24.710 --> 00:31:27.760
You specify component search by
specifying a component element

00:31:27.760 --> 00:31:30.550
inside the component search element.

00:31:30.710 --> 00:31:34.050
That component element represents a
bundle you're looking for on disk.

00:31:34.110 --> 00:31:36.410
It's the metadata about that
bundle that you want to find.

00:31:36.420 --> 00:31:38.880
In this example,
we have the ID attribute,

00:31:38.880 --> 00:31:41.800
and that specifies the bundle identifier
for the bundle we're looking for.

00:31:41.880 --> 00:31:44.800
In this case, we're looking for iTunes.

00:31:47.560 --> 00:31:51.180
We also have a path attribute,
and that specifies a default location

00:31:51.180 --> 00:31:53.040
to search for that application,
so you don't need to go

00:31:53.040 --> 00:31:54.200
through the entire system.

00:31:54.400 --> 00:31:56.480
Most cases,
your application hasn't moved,

00:31:56.630 --> 00:31:59.530
so this is the quickest way
to find that application.

00:32:01.620 --> 00:32:04.420
And we also have any other attributes
as part of your bundle you would

00:32:04.420 --> 00:32:08.500
like to put in your search,
and that lets you more finely tune

00:32:08.500 --> 00:32:10.680
your search so that it only finds,
in this example,

00:32:10.680 --> 00:32:15.320
iTunes 6.04 instead of all the other
iTunes that may be on your disk.

00:32:16.880 --> 00:32:19.360
So another type of search
which is much more powerful is

00:32:19.370 --> 00:32:21.840
the JavaScript script search.

00:32:21.890 --> 00:32:25.970
The script search allows you to
use JavaScript to view results

00:32:26.030 --> 00:32:30.060
of previous searches and return
results of a current search.

00:32:30.130 --> 00:32:33.780
These results are returned
either using an array of paths,

00:32:33.820 --> 00:32:38.330
a single path, or false specifying that
your search found nothing.

00:32:38.450 --> 00:32:42.300
These are a very powerful way
to do searches like the iWork

00:32:42.300 --> 00:32:44.710
search I talked about earlier.

00:32:44.790 --> 00:32:46.840
So let's show you a quick demo
of what these searches look like.

00:32:46.840 --> 00:32:48.220
Sean?

00:32:54.670 --> 00:32:56.040
Thank you, Chris.

00:32:56.090 --> 00:32:58.480
Now,
the most common type of search is when

00:32:58.480 --> 00:33:00.530
you want to find something to replace.

00:33:00.560 --> 00:33:02.820
Like, for example,
you shipped 1.0 of your app

00:33:02.980 --> 00:33:06.180
and you want to find it and
replace it with 2.0 of your app.

00:33:06.250 --> 00:33:08.310
PackageMaker can handle that for you.

00:33:08.400 --> 00:33:11.730
But let's say you have a plug-in that
you've written for another application

00:33:11.940 --> 00:33:16.120
and you want to find that application and
put the plug-in in a plug-ins directory

00:33:16.300 --> 00:33:18.520
that sits next to the application.

00:33:18.630 --> 00:33:20.830
PackageMaker can't quite
handle that for you yet.

00:33:20.950 --> 00:33:23.700
We're hoping to have that
support for the final version.

00:33:23.750 --> 00:33:26.210
But in this demo,
we'll show you how to edit your package

00:33:26.290 --> 00:33:29.060
info file by hand to set up that search.

00:33:29.150 --> 00:33:35.250
So we have an application called ispend,
which is currently in an ispend

00:33:35.250 --> 00:33:37.480
directory in /applications.

00:33:37.480 --> 00:33:40.780
And it has a plug-ins
directory that sits next to it,

00:33:40.820 --> 00:33:43.190
where you want to install your plug-ins.

00:33:43.250 --> 00:33:46.720
Now, let's say the user has
renamed the ispend directory.

00:33:46.900 --> 00:33:50.850
They've organized all of their
finance applications together.

00:33:50.900 --> 00:33:52.800
The installer can still find this.

00:33:52.800 --> 00:33:56.440
So I have a flat package that
I've created ahead of time

00:33:56.440 --> 00:33:58.740
that contains my plug-in.

00:33:58.740 --> 00:34:02.960
So I'll open that in the flat
package editor that we saw earlier.

00:34:02.960 --> 00:34:05.160
And we want to edit
the package info file.

00:34:05.160 --> 00:34:09.540
So we'll just drag that to a text editor.

00:34:15.500 --> 00:34:18.670
Before we make some changes,
a couple things to note.

00:34:18.730 --> 00:34:22.980
We have a component section
that defines one component

00:34:23.320 --> 00:34:26.120
for the iSpend plugin bundle.

00:34:26.120 --> 00:34:29.220
It defines which file in the
package this component represents.

00:34:29.220 --> 00:34:33.480
It has the bundle
identifier and a search ID.

00:34:33.520 --> 00:34:36.930
What that means is that this
file will be installed at the

00:34:36.990 --> 00:34:39.560
path found by this search.

00:34:39.600 --> 00:34:42.110
If no search is found,
it will be installed in

00:34:42.110 --> 00:34:43.640
the default location.

00:34:43.700 --> 00:34:48.070
This ispend search is defined
in this locator section.

00:34:48.270 --> 00:34:52.580
It's a component search that
looks for the iSpend application.

00:34:52.650 --> 00:34:54.130
It looks in the default location.

00:34:54.140 --> 00:34:57.720
If it's not there,
it'll search for the bundle identifier.

00:34:57.820 --> 00:35:01.080
So what we want to do is we want
to add a script search that uses

00:35:01.080 --> 00:35:05.470
the results of the iSpend search
to find that plug-in's directory.

00:35:06.500 --> 00:35:14.100
So we'll create a new search element
and we'll give it an identifier of demo.

00:35:14.170 --> 00:35:16.740
And the type will be a script search.

00:35:16.810 --> 00:35:21.110
And then we give it a script attribute,
which is a JavaScript function that

00:35:21.110 --> 00:35:24.300
we want to call to perform the search.

00:35:24.410 --> 00:35:29.860
Inside of the search,
we can add a script element section.

00:35:29.910 --> 00:35:33.940
And inside of that,
we can put our function.

00:35:34.660 --> 00:35:40.870
So what we want to do is access the
my.search.results global variable,

00:35:40.870 --> 00:35:45.620
which will be an array of the
results found by the search

00:35:45.930 --> 00:35:47.280
you specify with an identifier.

00:35:47.280 --> 00:35:49.580
So in this case, the iSpend search.

00:35:49.580 --> 00:35:53.300
We'll check to make sure
that it's not null or false.

00:35:53.340 --> 00:35:56.390
If it is, then we'll also return false,
meaning that the search has

00:35:56.450 --> 00:35:59.240
failed so that the plugin will
go in the default location.

00:36:00.300 --> 00:36:04.870
If results were found,
we want to grab the first one

00:36:04.870 --> 00:36:08.890
because it'll be an array,
and then we'll append a relative path

00:36:08.890 --> 00:36:13.250
to put it into the plugin's directory.

00:36:16.220 --> 00:36:18.260
So then,
now that we've defined our search,

00:36:18.260 --> 00:36:21.840
we'll update the search ID of
the component to point to

00:36:21.840 --> 00:36:24.060
the new search we've created.

00:36:24.060 --> 00:36:28.540
We'll save our package info file,
and we'll replace it using

00:36:28.540 --> 00:36:29.770
the flat package editor.

00:36:29.880 --> 00:36:36.640
And then we'll save a
copy onto the desktop.

00:36:36.640 --> 00:36:45.250
And if we open this in the
installer and click through,

00:36:51.700 --> 00:36:56.320
The installer will find the
application and put-- it

00:36:56.320 --> 00:36:57.540
actually didn't do it this time.

00:36:57.600 --> 00:37:03.600
So-- . Ah, yes.

00:37:03.600 --> 00:37:05.600
Thank you.

00:37:05.600 --> 00:37:11.690
Try this one more time.

00:37:24.480 --> 00:37:25.190
Click through again.

00:37:25.240 --> 00:37:34.490
And now that our JavaScript is correct,
it did find the application and

00:37:34.490 --> 00:37:36.850
put our plug-in in the right place.

00:37:36.920 --> 00:37:38.800
So that is searching.

00:37:38.810 --> 00:37:40.780
Back to you, Chris.

00:37:46.430 --> 00:37:47.800
Thank you, Sean.

00:37:47.920 --> 00:37:53.720
How many of you out here have used
searching in Mac OS X packages before?

00:37:53.720 --> 00:37:54.580
A couple of you.

00:37:54.600 --> 00:37:56.100
It's pretty complicated.

00:37:56.100 --> 00:37:57.880
This is going to make
it much easier to do.

00:37:57.990 --> 00:38:00.480
And even if you're
using 10.4 and earlier,

00:38:00.540 --> 00:38:04.700
just a simple checkbox in Package
Maker will make this much easier to do.

00:38:05.300 --> 00:38:08.340
But those of you who are familiar
with this searching might recognize

00:38:08.340 --> 00:38:10.410
the token definitions plist file.

00:38:10.480 --> 00:38:12.910
And so for those people who
have already fine-tuned their

00:38:12.940 --> 00:38:15.500
searches for their software,
we have a new searching mechanism

00:38:15.500 --> 00:38:18.200
in the flat packages called
the token definition search,

00:38:18.200 --> 00:38:21.100
which let you leverage the searches
you've already created and place

00:38:21.100 --> 00:38:23.200
them inside of your flat package.

00:38:23.300 --> 00:38:26.650
These are a little less efficient and
not the recommended way of doing things,

00:38:26.900 --> 00:38:30.380
but it's a good way to bridge your
package to the new technology.

00:38:34.180 --> 00:38:37.870
So we've sort of started to touch on
how you can use some of these searches.

00:38:37.990 --> 00:38:40.870
Sean showed you how you can use a
search to find the plugins folder

00:38:40.880 --> 00:38:44.270
of an application and install
your software in that folder.

00:38:44.480 --> 00:38:48.780
You can also, as Sean showed you,
you can access results of other searches

00:38:48.780 --> 00:38:50.650
within any of your individual searches.

00:38:50.650 --> 00:38:54.200
But you can also access these results
as part of a requirement check.

00:38:54.200 --> 00:38:56.810
And more importantly,
you can use these results to

00:38:56.840 --> 00:39:01.100
set where your software is
installed inside of your package.

00:39:01.880 --> 00:39:03.500
So to specify where your
software is installed,

00:39:03.500 --> 00:39:06.540
as Sean showed you,
you specify the search ID of

00:39:06.540 --> 00:39:08.310
the component of your package.

00:39:08.350 --> 00:39:13.920
A component is a representation
of a subpart of your package,

00:39:13.920 --> 00:39:14.980
usually bundles.

00:39:14.980 --> 00:39:17.100
So if you have separate
bundles inside of your package,

00:39:17.290 --> 00:39:20.890
Packagemaker will create a component
for you and allow you to specify what

00:39:20.970 --> 00:39:25.920
search results will be used to set the
target location for your installation.

00:39:27.760 --> 00:39:30.520
Also, as Sean showed you,
you can use the My Search Results

00:39:30.520 --> 00:39:34.890
object to access the searches within
any JavaScript inside of your package.

00:39:34.900 --> 00:39:38.270
And that will let you access even
inside of requirement checks.

00:39:38.280 --> 00:39:43.460
So let's say you have an
Adobe Photoshop plugin.

00:39:43.460 --> 00:39:45.430
You may not want to actually
install the software if you

00:39:45.520 --> 00:39:46.690
can't find Adobe Photoshop.

00:39:46.700 --> 00:39:49.450
Regardless of where
Adobe Photoshop is installed,

00:39:49.450 --> 00:39:51.540
the installer will be able to
search for Adobe Photoshop.

00:39:51.540 --> 00:39:53.670
And if it's not available,
you can return that you don't want to

00:39:53.670 --> 00:39:55.260
allow the installation on that software.

00:39:56.800 --> 00:40:00.210
Again, it does this using the
mySearchResults object.

00:40:00.900 --> 00:40:03.400
So to summarize searching,
there's new methods of

00:40:03.400 --> 00:40:04.180
searching in Leopard.

00:40:04.180 --> 00:40:07.110
They'll make it even easier to use,
and they're much less confusing

00:40:07.170 --> 00:40:10.170
than the token definitions P-list
you guys might be familiar with.

00:40:10.390 --> 00:40:13.520
They're much quicker because they
use launch services and Spotlight

00:40:13.520 --> 00:40:15.080
to help find your software.

00:40:15.080 --> 00:40:19.340
And the new searching mechanisms are
only available as part of 10.5 and later.

00:40:19.410 --> 00:40:22.510
Although, like I said,
PackageMaker 3.0 will allow you to

00:40:22.510 --> 00:40:28.570
create the old search syntax if you
need to for 10.4 and earlier packages.

00:40:30.070 --> 00:40:32.220
So that's searching.

00:40:32.220 --> 00:40:34.400
Now that we have these
downloadable packages,

00:40:34.400 --> 00:40:36.800
you can download your
software from the internet,

00:40:36.800 --> 00:40:39.720
there must be a better way to
download smaller parts of your

00:40:39.720 --> 00:40:41.020
package while doing an upgrade.

00:40:41.020 --> 00:40:43.100
And that's what patch packages are for.

00:40:43.100 --> 00:40:45.880
Many of you are familiar, again,
with Software Update.

00:40:45.880 --> 00:40:48.880
And what Software Update does behind
the scenes is it checks your system and

00:40:48.880 --> 00:40:53.970
sees if it can find the right diffs of
files and install only those files so

00:40:53.970 --> 00:40:58.030
you can only download a smaller part
of Mac OS X while doing an upgrade.

00:40:58.640 --> 00:41:00.620
We've been using this
technology at Apple for a while,

00:41:00.620 --> 00:41:03.040
and now we're ready to give it to
you guys through patched packages

00:41:03.040 --> 00:41:05.190
in the flat package format.

00:41:05.740 --> 00:41:09.420
So they allow you to have packages
that contain only updates of packages,

00:41:09.480 --> 00:41:12.480
only files that are
updated in your software,

00:41:12.500 --> 00:41:15.340
as well as carry diffs of
files in your software.

00:41:15.460 --> 00:41:17.180
And it really saves on download time.

00:41:17.210 --> 00:41:21.000
This enables you to have a package that
might be your first version of the OS,

00:41:21.000 --> 00:41:23.750
the first version of your
software may be 10 megabytes,

00:41:23.750 --> 00:41:25.670
and the second version
may be 20 megabytes.

00:41:25.770 --> 00:41:29.940
And instead of shipping all 20 megabytes,
you can possibly ship 10 megabytes

00:41:29.940 --> 00:41:32.030
or even less of your software.

00:41:32.540 --> 00:41:37.080
It does this by using bsdiff to diff the
files in the package or in your software.

00:41:37.170 --> 00:41:40.400
And for the leopard seed,
it only diffs MacO binaries.

00:41:40.540 --> 00:41:43.520
But for the final release
of Mac OS X Leopard,

00:41:43.670 --> 00:41:47.820
Packagemaker will diff all
the files inside your package.

00:41:48.410 --> 00:41:50.810
Also,
Packagemaker will automatically create

00:41:51.240 --> 00:41:58.190
search requirements that will ensure
that the software that your patch

00:41:58.210 --> 00:42:02.660
requires is actually located on the
disk that you're installing onto.

00:42:02.710 --> 00:42:03.820
And let's show you a quick demo of that.

00:42:03.990 --> 00:42:05.440
Sean?

00:42:12.370 --> 00:42:13.500
Thank you, Chris.

00:42:13.570 --> 00:42:15.700
In this demo,
we'll create a patch package that

00:42:15.700 --> 00:42:21.250
will upgrade the 10.4 version of
Sketch to the 10.5 version of Sketch.

00:42:23.410 --> 00:42:26.680
So I'll launch Package Maker,
and this will be the

00:42:26.680 --> 00:42:29.820
Sketch patch package,
which will target Leopard so

00:42:29.820 --> 00:42:31.960
that patching will be enabled.

00:42:31.990 --> 00:42:37.570
And we want to create a package
for the 10.5 version of Sketch.

00:42:41.520 --> 00:42:44.850
And to configure patching,
we'll click on the sketch item

00:42:45.060 --> 00:42:48.110
and go to the components tab,
which will scan the contents

00:42:48.110 --> 00:42:50.650
of your package and bring up
all of the bundles it finds.

00:42:50.660 --> 00:42:54.080
And to turn on patching,
we'll click the patching checkbox,

00:42:54.210 --> 00:42:56.240
which will bring down this dialog.

00:42:56.240 --> 00:42:59.910
And with this dialog,
you give PackageMaker the old version of

00:42:59.910 --> 00:43:02.480
your application that you want to patch.

00:43:02.480 --> 00:43:05.830
Now, it's very important that the
version you give here be the version

00:43:05.830 --> 00:43:07.490
that will be on the user system.

00:43:07.910 --> 00:43:11.510
Because if the old version is not found,
the installation will not

00:43:11.510 --> 00:43:12.400
be allowed to proceed.

00:43:12.400 --> 00:43:17.220
So we'll point this at the
10.4 version of Sketch.

00:43:22.350 --> 00:43:24.460
The Package Maker will scan
through the applications.

00:43:24.460 --> 00:43:28.550
It'll find files that are found in both,
and it'll generate packages

00:43:28.550 --> 00:43:29.770
for the Mako binaries.

00:43:29.930 --> 00:43:33.040
In this case,
it found one Mako binary to patch,

00:43:33.050 --> 00:43:35.590
which will save us 189 kilobytes.

00:43:35.670 --> 00:43:38.740
So we'll save our patch,
and we'll build the

00:43:38.740 --> 00:43:41.300
package onto the desktop.

00:43:45.400 --> 00:43:48.780
If we do a get info on the patch,
we can see that the

00:43:48.780 --> 00:43:50.760
package is 176 kilobytes.

00:43:50.780 --> 00:43:54.700
If we had generated a
full package for Sketch,

00:43:54.700 --> 00:43:56.640
it would have been 340 kilobytes.

00:43:56.680 --> 00:43:58.500
So we've saved some file space there.

00:44:00.740 --> 00:44:04.300
If we launch the patch package in
the installer and click through

00:44:04.300 --> 00:44:07.890
to the destination select pane,
we've seen that some of the

00:44:07.890 --> 00:44:10.480
volumes have a stop sign on them.

00:44:10.590 --> 00:44:14.640
That's because those volumes don't have
the 10.4 version of Sketch on them,

00:44:14.640 --> 00:44:17.530
so the installation is
not allowed to proceed.

00:44:17.540 --> 00:44:21.490
So that's patching in PackageMaker 3.0.

00:44:26.600 --> 00:44:28.000
Thank you, Sean.

00:44:28.030 --> 00:44:29.800
As you see,
patch packages are going to enable

00:44:29.800 --> 00:44:32.500
you to deliver upgrades to your
software in even faster and better

00:44:32.500 --> 00:44:35.070
ways over the internet in the future.

00:44:35.900 --> 00:45:44.600
[Transcript missing]

00:45:44.870 --> 00:45:47.630
And to make it easier for you
guys to look into these packages

00:45:47.650 --> 00:45:50.200
or look into these receipts,
because before you could go into library

00:45:50.200 --> 00:45:53.720
receipts and see what was happening,
we have a tool called Package Util

00:45:53.760 --> 00:45:57.720
that lets you query the system
for what packages are installed,

00:45:57.790 --> 00:46:00.600
query the system for what files are
installed as part of that package,

00:46:00.670 --> 00:46:04.400
and even remove receipts or even
remove files from those receipts.

00:46:04.500 --> 00:46:08.860
And this isn't a full uninstall,
rather more a debugging tool for

00:46:08.860 --> 00:46:12.060
developers and other people to
work with this receipt database.

00:46:12.150 --> 00:46:14.020
But as you can see,
we're really working on some technology

00:46:14.020 --> 00:46:17.500
that will make some of these more future
things happen even quicker going forward.

00:46:17.560 --> 00:46:20.120
So please check out Package Util.

00:46:21.210 --> 00:46:24.030
So to summarize,
we really want you to start utilizing

00:46:24.060 --> 00:46:27.350
searching in your packages to ensure
that if your software can be moved

00:46:27.620 --> 00:46:30.960
and your customers move your software,
your upgrades will find that

00:46:31.070 --> 00:46:33.420
software and upgrade them properly.

00:46:33.450 --> 00:46:36.680
Also, patching will allow you to
upgrade your software faster

00:46:36.680 --> 00:46:40.610
by having smaller downloads for
your customers over the internet.

00:46:40.820 --> 00:46:42.530
And library receipts is changing.

00:46:42.650 --> 00:46:46.840
So if you depend on changing
receipts in library receipts,

00:46:46.890 --> 00:46:49.560
or deleting receipts,
or reading out of receipts,

00:46:49.580 --> 00:46:51.860
you're going to have to find new
ways to do this going forward.

00:46:51.900 --> 00:46:54.440
And if you really depend on that,
we'd really like to hear from you

00:46:54.560 --> 00:46:57.460
so we can understand what you're
doing with library receipts and

00:46:57.460 --> 00:47:01.240
make some changes to help make
it easier for you going forward.

00:47:02.220 --> 00:47:03.260
So that's upgrades.

00:47:03.320 --> 00:47:05.020
As you can see,
we're really starting to move

00:47:05.020 --> 00:47:09.000
in a direction to allow for more
advanced things going forward.

00:47:09.070 --> 00:47:13.030
With our new flat packages and
downloadable packages and patch

00:47:13.060 --> 00:47:17.290
packages and our new receipts mechanism,
we're really moving in that direction

00:47:17.530 --> 00:47:20.300
to do even more advanced things that
we haven't shown you here today.

00:47:20.370 --> 00:47:23.270
So this is just a preview of
what we're doing going forward.

00:47:23.340 --> 00:47:29.630
Also, all the things we've talked about
today are going to continue to improve

00:47:29.630 --> 00:47:32.170
as we develop Leopard going forward.

00:47:33.480 --> 00:47:36.600
So we've talked about creating
packages using PackageMaker 3.0,

00:47:36.640 --> 00:47:40.140
better ways to deliver your software
with a new flat package format,

00:47:40.170 --> 00:47:42.390
a new install feature with
home directory installs,

00:47:42.390 --> 00:47:46.580
and better ways to do upgrades
with better searching and patching.

00:47:47.410 --> 00:47:50.400
So to learn more about this,
about installers,

00:47:50.460 --> 00:47:52.930
we have a lab at 5 o'clock in Lab C.

00:47:53.300 --> 00:47:53.600
Come by.

00:47:53.600 --> 00:47:57.470
The entire installer team will be
there to answer any of your questions.

00:47:58.890 --> 00:48:01.530
We have a new software delivery
guide online which will help

00:48:01.550 --> 00:48:02.940
you create simple packages.

00:48:02.940 --> 00:48:06.140
It doesn't cover PackageMaker 3.0,
but it's a great document on how

00:48:06.140 --> 00:48:10.180
to create your software and develop
them and distribute them to your

00:48:10.180 --> 00:48:12.380
customers using PackageMaker.

00:48:12.380 --> 00:48:15.160
Also we have a release note on the
web as well as inside the seed,

00:48:15.380 --> 00:48:19.000
which mostly covers 10.4 technology,
but it's a really good reference.

00:48:20.950 --> 00:48:24.480
And we also have an installer
development list that's public

00:48:24.580 --> 00:48:25.900
that you guys can get on.

00:48:25.900 --> 00:48:29.300
And it's a really great way to
communicate with developers,

00:48:29.300 --> 00:48:30.840
other developers that
are creating packages,

00:48:30.840 --> 00:48:32.000
as well as the Apple developers.

00:48:32.000 --> 00:48:35.000
We can help you out and work
through your problems online.