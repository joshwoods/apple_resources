WEBVTT

00:00:10.220 --> 00:00:12.710
Like the voice of God just said,
I'm Deric Horn,

00:00:12.710 --> 00:00:15.070
the Application Frameworks Evangelist,
and what that really means to you is

00:00:15.140 --> 00:00:19.000
if you ever run into blocking issues
or need help escalating a problem,

00:00:19.000 --> 00:00:19.780
you can always email me.

00:00:19.780 --> 00:00:21.140
You'll see my email at the
end of the presentation.

00:00:21.140 --> 00:00:22.360
It's just deric at apple.com.

00:00:22.360 --> 00:00:23.810
But I'm glad you're all here.

00:00:24.010 --> 00:00:26.980
This is really important stuff
that you really need to know,

00:00:26.980 --> 00:00:28.760
and it's not that hard to learn.

00:00:28.760 --> 00:00:31.050
So I think that you're going to
find that with a small investment,

00:00:31.090 --> 00:00:32.100
you'll get a big return.

00:00:33.120 --> 00:00:35.010
So before I get started,
I'd like to ask a couple questions,

00:00:35.010 --> 00:00:35.470
though.

00:00:35.480 --> 00:00:39.950
I'd like to know how many of you
are currently using Xcode for your

00:00:39.950 --> 00:00:41.580
primary development environment?

00:00:41.860 --> 00:00:42.370
Excellent.

00:00:42.490 --> 00:00:44.040
Everyone's universal.

00:00:44.170 --> 00:00:49.280
And how many of you are currently
writing Cocoa Objective-C code?

00:00:49.510 --> 00:00:51.010
All right, a couple.

00:00:51.100 --> 00:00:53.840
And how many of you are planning on
writing Cocoa and Objective-C code

00:00:53.840 --> 00:00:56.110
in the next six months?

00:00:56.400 --> 00:00:56.900
Excellent.

00:00:56.900 --> 00:00:59.230
Well, you guys came to the right place.

00:00:59.380 --> 00:01:00.460
So I'm a lot like you guys.

00:01:00.480 --> 00:01:04.780
I've got a long history and
a big investment in Carbon.

00:01:04.920 --> 00:01:08.480
But you'll see that Cocoa has
some incredibly enticing features.

00:01:08.520 --> 00:01:11.900
So everything I talk about today is
going to be from the Carbon perspective,

00:01:11.900 --> 00:01:13.850
perspective of a Carbon developer.

00:01:15.600 --> 00:01:17.670
So this is quite a broad
subject to cover in one hour,

00:01:17.700 --> 00:01:19.760
so I'm going to take what I kind
of call a shotgun approach.

00:01:19.880 --> 00:01:22.760
I'm going to cover a little
bit about a broad area.

00:01:22.850 --> 00:01:24.200
And I'm going to have to
make some assumptions.

00:01:24.210 --> 00:01:26.060
I'm going to have to assume that
you're aware of object-oriented

00:01:26.060 --> 00:01:29.770
design and I'm going to have to assume
that you drank as much coffee as me,

00:01:30.190 --> 00:01:32.280
because I'm going to have to talk
fast to get through all this stuff.

00:01:32.330 --> 00:01:34.410
We'll start by going over
an overview of Cocoa,

00:01:34.530 --> 00:01:38.880
some of the Cocoa design philosophy,
how to get things done in Cocoa.

00:01:38.880 --> 00:01:42.310
Then we'll talk a little bit about
how to get started with Objective-C.

00:01:42.350 --> 00:01:45.500
What you need to know
to get started in Cocoa.

00:01:45.500 --> 00:01:47.660
Some tips and tricks that I've
picked up along the way that will

00:01:47.660 --> 00:01:49.300
hopefully save you time and effort.

00:01:49.300 --> 00:01:51.290
And then I'm going to talk
about migration strategies.

00:01:51.290 --> 00:01:54.370
So given the current
state of your application,

00:01:54.480 --> 00:01:56.460
how do you bring that forward
into adopting some of these

00:01:56.460 --> 00:02:00.090
killer new Mac OS X technologies
that are Objective-C based?

00:02:00.830 --> 00:02:03.760
We put together about five
different demos for this.

00:02:03.760 --> 00:02:07.020
They're all what I call,
they all make use of what

00:02:07.060 --> 00:02:08.540
I call low-hanging Cocoa fruit.

00:02:08.540 --> 00:02:11.160
So they're things that you get a
big bang for with little effort.

00:02:11.160 --> 00:02:13.160
And I'll go ahead and demo those two.

00:02:13.160 --> 00:02:14.840
And then we're going to
have one of your own,

00:02:14.840 --> 00:02:17.360
third-party developer, Scott Thompson,
come up on stage.

00:02:17.360 --> 00:02:20.060
And Scott was one of the
people responsible for taking

00:02:20.060 --> 00:02:21.800
what was a large-scale,
legacy,

00:02:21.800 --> 00:02:25.880
Windows-only application and then putting
a Cocoa front-end on that and turning

00:02:25.880 --> 00:02:28.080
it into a cross-platform application.

00:02:28.090 --> 00:02:30.680
So you'll get to hear some of
his experiences in doing that.

00:02:30.700 --> 00:02:34.810
And we'll try and leave some
time for Q&A afterwards.

00:02:35.800 --> 00:02:38.790
So regardless of what framework,
language, or development environment

00:02:38.790 --> 00:02:41.180
you're writing for,
all successful applications have to

00:02:41.190 --> 00:02:43.660
follow the same simple guidelines.

00:02:43.730 --> 00:02:47.050
We want to solve a problem
for our customers quickly.

00:02:47.120 --> 00:02:50.930
We start with the target
customer and a great idea.

00:02:51.110 --> 00:02:53.670
So regardless of, for instance,
if we're writing maybe a

00:02:53.670 --> 00:02:57.240
ringtone editor for a cell phone
or perhaps like a high-end,

00:02:57.370 --> 00:02:59.680
vertical market,
expensive application that's going

00:02:59.680 --> 00:03:02.730
to process and analyze MRI scans,
we want to follow these

00:03:02.770 --> 00:03:03.600
same simple guidelines.

00:03:03.600 --> 00:03:06.900
You design for Aqua and Mac OS X,
keep your UI simple,

00:03:06.930 --> 00:03:10.520
maybe then we let some people test it,
iterate on that UI,

00:03:10.570 --> 00:03:14.400
different prototyping of our UI,
adopt other killer technologies,

00:03:14.400 --> 00:03:18.390
so whether that's maybe core
audio on one side or core image

00:03:18.420 --> 00:03:20.430
or core video on the other.

00:03:20.710 --> 00:03:22.840
and then we want to deliver
something of high production value,

00:03:22.840 --> 00:03:26.360
something which differentiates our
application from that of our competitors.

00:03:26.390 --> 00:03:29.100
Well, Cocoa was designed with
all these goals in mind.

00:03:29.130 --> 00:03:31.200
In fact, I think when you look
at Cocoa applications,

00:03:31.210 --> 00:03:33.150
they have a reputation
for having a clean,

00:03:33.300 --> 00:03:36.910
crisp user interface and
application behaviors which we

00:03:37.020 --> 00:03:42.800
and our users come to demand,
things like cut, copy, paste, undo, redo,

00:03:42.800 --> 00:03:46.260
scriptability, accessibility,
and a whole lot more.

00:03:46.950 --> 00:03:49.340
So Carbon started out
as just a porting layer,

00:03:49.370 --> 00:03:52.970
but since that time,
it's turned into a whole lot more.

00:03:53.290 --> 00:03:56.050
So let's go ahead and see what
a modern Carbon application is.

00:03:56.100 --> 00:03:58.710
I'm glad to see that all of you have
already compiled your applications

00:03:58.800 --> 00:04:01.390
for Universal and are on Xcode.

00:04:01.750 --> 00:04:05.600
Modern Carbon applications lay out their
user interfaces with Interface Builder.

00:04:05.810 --> 00:04:08.160
Should be using core
foundation for the base types,

00:04:08.400 --> 00:04:10.410
things like CFStrings to
abstract Unicode,

00:04:10.750 --> 00:04:11.600
CFArrays.

00:04:11.600 --> 00:04:14.130
So you should all be
familiar with the retain,

00:04:14.170 --> 00:04:17.530
release, reference counting
memory management models.

00:04:18.310 --> 00:04:22.450
Carbon uses procedural-based
APIs to interact with the system.

00:04:23.050 --> 00:04:24.650
It's probably been drilled
into you pretty good by now.

00:04:24.720 --> 00:04:27.950
It shouldn't be using Quick Draw and
should have adopted vector-based

00:04:27.950 --> 00:04:29.590
drawing in the way of Quartz.

00:04:31.790 --> 00:04:35.850
and we use Carbon Events as a
method for overriding default system

00:04:35.860 --> 00:04:38.480
behavior and as our event model.

00:04:39.320 --> 00:04:43.010
And we use HIViews and
composited Windows,

00:04:43.010 --> 00:04:44.700
as well as modern
applications are bundled,

00:04:44.700 --> 00:04:47.220
so we keep our localizations
in Lproj folders,

00:04:47.240 --> 00:04:50.700
images specific to our application
in the resources subdirectory,

00:04:50.730 --> 00:04:53.600
an Info.plist which
describes our application.

00:04:53.650 --> 00:04:56.280
And we shouldn't be using
any deprecated APIs,

00:04:56.280 --> 00:04:56.890
right?

00:04:57.840 --> 00:05:02.200
So let's take that evolution one step
further and take a look at Cocoa.

00:05:02.200 --> 00:05:04.720
Well,
Cocoa applications are also universal,

00:05:04.760 --> 00:05:08.290
also lay out their
UI in Interface Builder.

00:05:08.780 --> 00:05:11.910
Cocoa applications rely on
foundation for the base types.

00:05:12.030 --> 00:05:14.930
And through toll-free bridging,
we can simply cast things

00:05:14.960 --> 00:05:22.300
like NSStrings to CFStrings,
or CFArrays to NSArrays.

00:05:22.350 --> 00:05:25.610
The big difference between Carbon and
Cocoa is that Cocoa uses object-oriented

00:05:25.610 --> 00:05:28.090
APIs when interacting with the system.

00:05:28.800 --> 00:05:33.240
Cocoa uses things like NSImage,
NSBezierPath for their graphics model.

00:05:33.310 --> 00:05:38.270
NSImage and NSBezierPath
simply lie on top of Quartz.

00:05:39.220 --> 00:05:42.300
And Cocoa uses delegates and
notifications as its event

00:05:42.350 --> 00:05:44.800
model and method for overriding
default system behavior.

00:05:44.800 --> 00:05:47.200
Later on in the session,
I'm going to go over an example

00:05:47.200 --> 00:05:49.910
comparing Carbon events to delegates.

00:05:50.170 --> 00:05:54.880
and Cocoa Applications will use NSViews,
which are really very similar to HIViews.

00:05:54.980 --> 00:05:58.240
Cocoa Applications are also bundled and
also should be using deprecated APIs.

00:05:58.330 --> 00:05:59.900
So hopefully by looking
at these two lists,

00:05:59.900 --> 00:06:02.630
you realize that you probably know a lot
more about Cocoa development than you

00:06:02.630 --> 00:06:06.380
thought and definitely more than someone
that's coming new to the platform.

00:06:08.170 --> 00:06:11.300
Well, I felt obligated to throw in at
least one architecture diagram here.

00:06:11.390 --> 00:06:13.970
So we have our typical
Darwin-Kernel graphics,

00:06:14.110 --> 00:06:16.020
the two application frameworks
which we're interested in,

00:06:16.120 --> 00:06:19.170
Carbon and Cocoa, and Aqua above that.

00:06:19.430 --> 00:06:21.760
But in reality, over time,
Carbon and Cocoa have been

00:06:21.760 --> 00:06:24.460
using more and more code,
more and more similar code.

00:06:24.500 --> 00:06:26.350
I mean, we access files,
and the resource works of

00:06:26.350 --> 00:06:27.610
those files the same way.

00:06:27.790 --> 00:06:31.160
Our Carbon and Cocoa applications
get launched the same ways.

00:06:31.410 --> 00:06:34.560
Our icons are the same,
so we use the same artwork.

00:06:34.840 --> 00:06:36.890
Now we're introducing
things like core text.

00:06:37.010 --> 00:06:39.240
So over time,
we've had this core services layer,

00:06:39.240 --> 00:06:40.510
which has been growing and growing.

00:06:40.630 --> 00:06:44.330
And this is a common API set that's
common to both Carbon and Cocoa.

00:06:44.450 --> 00:06:46.680
So in reality,
the architecture diagram looks

00:06:46.680 --> 00:06:48.610
a little bit closer to this.

00:06:48.980 --> 00:06:50.520
So what is Cocoa?

00:06:50.530 --> 00:06:55.490
Well,
it's the most advanced framework ever.

00:06:56.160 --> 00:06:58.550
I got this email a few
weeks ago and it reads,

00:06:58.550 --> 00:07:01.540
"I finally quit MetroWorks this
year and have moved on to Aspire.

00:07:01.870 --> 00:07:04.160
I've been learning Cocoa and
to my great surprise,

00:07:04.160 --> 00:07:07.130
I love it." This was sent
to me by Joseph Wankerl.

00:07:07.420 --> 00:07:09.300
A lot of you may already know him.

00:07:09.300 --> 00:07:11.220
He used to work at MetroWorks.

00:07:11.220 --> 00:07:12.540
But when I read this,
this really means a lot.

00:07:12.690 --> 00:07:15.890
I mean, here we have a long-time Carbon,
Power Plant,

00:07:16.160 --> 00:07:20.460
and MetroWorks developer who just
started learning Cocoa and he loves it.

00:07:20.460 --> 00:07:24.110
And I think this is a common
sentiment among a lot of developers

00:07:24.120 --> 00:07:25.730
who start picking Cocoa up.

00:07:27.060 --> 00:07:28.840
So let's dig a little bit deeper.

00:07:28.880 --> 00:07:32.010
One of the really neat things
about Cocoa is that we use a few

00:07:32.010 --> 00:07:36.160
concepts pervasively throughout
the entire Objective-C frameworks.

00:07:36.220 --> 00:07:38.520
So a lot of time you hear
analogies of Cocoa being

00:07:38.570 --> 00:07:40.200
compared to things like LEGOs.

00:07:40.260 --> 00:07:44.290
And it's really kind of true in that
because we use these same conventions

00:07:44.760 --> 00:07:47.250
throughout all of the frameworks,
we can start to adopt new

00:07:47.470 --> 00:07:50.000
technologies without really having
to know too much about them,

00:07:50.020 --> 00:07:51.310
without having to be experts.

00:07:51.390 --> 00:07:53.180
So for instance,
if I want to add something

00:07:53.180 --> 00:07:56.470
like speech to my application,
I can make a pretty good guess that

00:07:56.510 --> 00:08:00.430
I'm going to have to allocate and
initialize some speech object and

00:08:00.450 --> 00:08:02.770
then start sending it messages.

00:08:02.980 --> 00:08:06.030
and I can be rest assured that the
experts that know everything about

00:08:06.030 --> 00:08:10.600
speech have already implemented the
default behavior back in Cupertino.

00:08:10.680 --> 00:08:12.690
Now, if I want to start overriding
the default behavior,

00:08:12.690 --> 00:08:14.700
that's when I have to start
reading up on the material and

00:08:14.740 --> 00:08:16.600
becoming an expert on myself.

00:08:16.600 --> 00:08:19.100
So Cocoa is a full-featured
application framework,

00:08:19.100 --> 00:08:23.930
so it contains advanced controls,
things like NSTextView, NSOutlineView,

00:08:23.930 --> 00:08:24.800
the WebKitView.

00:08:24.800 --> 00:08:28.820
The WebKitView is really almost
a full web browser packaged

00:08:28.820 --> 00:08:30.670
down into a single view.

00:08:31.030 --> 00:08:33.000
Application behaviors, as I mentioned.

00:08:33.010 --> 00:08:35.330
You get a lot of this for free
or with really little code,

00:08:35.380 --> 00:08:39.620
so things like cut, copy, paste, undo,
redo, scriptability, accessibility.

00:08:39.630 --> 00:08:43.420
And in 10.4,
we announced the serialization of your

00:08:43.420 --> 00:08:45.840
entire object graph through Core Data.

00:08:45.870 --> 00:08:49.820
And then just on Monday,
we introduced Core Animation and

00:08:49.870 --> 00:08:51.180
Animation Kit.

00:08:52.380 --> 00:08:55.420
In general, Cocoa will handle all these
default behaviors for you and

00:08:55.420 --> 00:08:59.030
allow you to build more consistent
applications and also allowing you

00:08:59.150 --> 00:09:01.910
to focus on the core of your code,
so the intellectual property

00:09:01.970 --> 00:09:03.560
that you're interested in.

00:09:04.030 --> 00:09:06.070
Another neat thing about Cocoa is
that it is a rapid application

00:09:06.070 --> 00:09:08.960
development environment,
so you can quickly prototype new UIs.

00:09:09.230 --> 00:09:11.740
You develop your UI,
you can go ahead and change it without

00:09:11.740 --> 00:09:13.080
really having to write little code.

00:09:13.400 --> 00:09:15.870
Interface Builder becomes much
more powerful when dealing

00:09:15.980 --> 00:09:17.100
with Cocoa applications.

00:09:17.100 --> 00:09:18.400
I'll show you a demo of this later.

00:09:18.400 --> 00:09:23.960
But not only is it a great prototyping
tool for rapid application development,

00:09:24.010 --> 00:09:28.660
it's a full-featured,
rich application development environment

00:09:28.680 --> 00:09:31.670
that will let you ship large-scale,
shrink-wrapped applications.

00:09:33.010 --> 00:09:34.740
So why use Cocoa?

00:09:34.810 --> 00:09:37.660
Well, you get these well-integrated
system behaviors for free.

00:09:37.670 --> 00:09:39.650
And really what I mean by that is,
for instance,

00:09:39.700 --> 00:09:43.230
when I work on a Cocoa application,
I almost think of it like I have a whole

00:09:43.230 --> 00:09:46.290
team of Apple engineers working with me.

00:09:46.360 --> 00:09:49.120
So I'm concentrating on the
core of my application code,

00:09:49.170 --> 00:09:52.520
and this team of engineers is back
in Cupertino making sure that all my

00:09:52.520 --> 00:09:55.430
Mac OS X specific code is handled for me.

00:09:55.580 --> 00:09:57.660
So when we moved to
different architectures,

00:09:57.660 --> 00:10:00.400
from PowerPC to Intel,
I can be confident in knowing that

00:10:00.400 --> 00:10:03.670
my team of engineers back at Apple is
handling all of these Indian issues,

00:10:03.770 --> 00:10:05.010
byte swapping issues for me.

00:10:05.200 --> 00:10:07.380
When we announced things
like resolution independence,

00:10:07.570 --> 00:10:09.920
I don't have to be so concerned
about what the difference is

00:10:09.950 --> 00:10:14.400
between pixels and points,
upgrading my art to high resolution art.

00:10:14.450 --> 00:10:16.760
I know this team of engineers
is on top of this issue,

00:10:16.840 --> 00:10:18.530
handling all this for me,
and I can concentrate

00:10:18.780 --> 00:10:20.720
on the core of my code.

00:10:20.910 --> 00:10:22.680
It's developed with Mac OS X.

00:10:22.830 --> 00:10:26.790
What I mean by this is Cocoa is
actually part of the operating system.

00:10:27.050 --> 00:10:31.100
So as we introduce new features,
those APIs and those features

00:10:31.100 --> 00:10:32.790
are introduced through Cocoa.

00:10:32.860 --> 00:10:35.690
So in the past, when we introduced new
technologies at Apple,

00:10:35.760 --> 00:10:38.600
there was always this lag time
between the time when we introduced

00:10:38.600 --> 00:10:41.970
this technology and then the time
between we would see the APIs appear

00:10:41.970 --> 00:10:45.600
in frameworks such as PowerPlant.

00:10:46.630 --> 00:10:48.040
It integrates well
with development tools,

00:10:48.120 --> 00:10:49.580
so I'm sure that you're
all aware of this.

00:10:49.580 --> 00:10:53.440
I mean, a lot of you know that Interface
Builder behaves a lot better with

00:10:53.440 --> 00:10:56.240
Objective-C and Cocoa-based code,
and then from the announcement on

00:10:56.240 --> 00:10:59.210
Monday at the tools state of the union,
I think some of you may have

00:10:59.210 --> 00:11:01.590
seen the code refactoring,
and this is truly amazing.

00:11:01.600 --> 00:11:02.720
We lay out our class.

00:11:02.720 --> 00:11:05.940
One of the things that he did was just
change the name of his instance variable,

00:11:05.940 --> 00:11:09.250
and then it will go ahead and pervasively
change the name of my instance

00:11:09.500 --> 00:11:11.720
variable throughout all my code,
but it doesn't stop there.

00:11:11.720 --> 00:11:14.330
It goes ahead and changes the names
of all my getters and setters,

00:11:14.680 --> 00:11:16.980
and not only that, it will actually look
inside my nib files,

00:11:16.990 --> 00:11:19.990
and references to that instance variable
get changed inside my nib files,

00:11:19.990 --> 00:11:20.360
too.

00:11:20.360 --> 00:11:23.540
And you only get this tight integration
with Objective-C and Cocoa code.

00:11:25.810 --> 00:11:29.060
So we've spent many years and
millions of man hours developing

00:11:29.060 --> 00:11:32.730
what we think is a rich,
full-featured framework in Cocoa.

00:11:32.990 --> 00:11:35.540
We are dedicated to supporting
Cocoa into the future,

00:11:35.710 --> 00:11:37.860
and I think everyone can realize that.

00:11:37.930 --> 00:11:40.760
And probably the biggest reason
why you're all here today is

00:11:40.810 --> 00:11:45.740
the ability to easily integrate
our latest killer technologies.

00:11:45.790 --> 00:11:49.040
Things like Core Data, Sync Services,
Quartz Composer,

00:11:49.040 --> 00:11:53.090
Instant Message Framework, WebKit,
Core Image, QtKit, Address Book, PDFKit,

00:11:53.480 --> 00:11:55.140
Bluetooth, and there's a whole lot more.

00:11:55.150 --> 00:11:58.620
I mean, we have .Mac, animation,
and so forth.

00:12:01.110 --> 00:12:06.800
One of the big directions of Carbon in
Leopard is better integration with Cocoa.

00:12:06.800 --> 00:12:10.460
So to give an example of that,
everyone knows Quickdraw was

00:12:10.690 --> 00:12:15.420
deprecated and now with 64-bit it's
completely removed and unsupported.

00:12:15.420 --> 00:12:18.420
Well, what kind of fell off of that
was named cursor support,

00:12:18.420 --> 00:12:19.560
for instance.

00:12:19.560 --> 00:12:21.940
Named cursor support was
reliant on Quickdraw.

00:12:21.940 --> 00:12:24.940
So then the question comes up,
what kind of API are we going to provide

00:12:25.290 --> 00:12:27.900
to replace the named cursor support API?

00:12:27.900 --> 00:12:31.530
So the first thing we do is take a
look to see what NSCursor has to offer.

00:12:31.890 --> 00:12:35.870
Well, it turns out NSCursor is already
64-bit clean and has all the

00:12:35.930 --> 00:12:37.980
functionality that we need.

00:12:38.070 --> 00:12:42.060
So the next question comes up,
do we write a Carbon API around

00:12:42.060 --> 00:12:45.700
NSCursor or do we ask Carbon developers
to call NSCursor directly?

00:12:47.270 --> 00:12:52.040
Well, a common theme over the last couple
WWDCs has been that we are going

00:12:52.040 --> 00:12:56.100
to produce a great technology and
API set that goes along with that.

00:12:56.160 --> 00:12:58.170
We're not going to be in the
business of creating great

00:12:58.170 --> 00:13:01.790
technology and then releasing two
APIs and supporting those two APIs.

00:13:01.930 --> 00:13:05.470
So the decision was made to go ahead
and ask Carbon Developers to go

00:13:05.470 --> 00:13:07.670
ahead and call NS Cursor directly.

00:13:10.380 --> 00:13:12.200
So, Cocoa design.

00:13:12.240 --> 00:13:14.450
As you know, Cocoa is object-oriented,
so you're going to have to

00:13:14.450 --> 00:13:16.400
become familiar with those
object-oriented paradigms,

00:13:16.400 --> 00:13:21.300
things like subclassing, delegation,
inheritance, sending messages to objects,

00:13:21.450 --> 00:13:25.080
or as we think in C++,
maybe invoking methods.

00:13:25.590 --> 00:13:28.560
Cocoa is based on a
model-view-controller design.

00:13:28.680 --> 00:13:30.430
So I think most of you
understand what that is.

00:13:30.450 --> 00:13:33.510
When we lay out our user interface
as the view and our model

00:13:33.520 --> 00:13:38.030
proprietary data underneath is the
model and we provide controller

00:13:38.140 --> 00:13:41.180
classes which mitigate the data and
information flowing between the two.

00:13:41.180 --> 00:13:42.500
And this is a great design pattern.

00:13:42.500 --> 00:13:48.230
It leads heavily towards portability,
maintainability, and so forth.

00:13:48.280 --> 00:13:51.240
When you design for the MVC model,
you should just always ask yourself,

00:13:51.300 --> 00:13:56.060
from the user's perspective,
how does the user interact with my data?

00:13:56.060 --> 00:13:58.860
And likewise,
from the application perspective,

00:13:58.890 --> 00:14:03.560
how do I manage the data from
the model-controller side?

00:14:03.560 --> 00:14:05.680
When Scott comes up,
he's going to talk into a little bit

00:14:05.680 --> 00:14:08.750
more detail about how he was able to take
advantage of the model-view-controller

00:14:09.180 --> 00:14:14.010
in bringing Mindjet over to the Mac.

00:14:14.010 --> 00:14:14.010
Excuse me, Mind Manager.

00:14:14.500 --> 00:14:16.080
So how do you get started with Cocoa?

00:14:16.130 --> 00:14:18.150
Well, first step,
move your code to Xcode.

00:14:18.420 --> 00:14:20.090
I'm glad I think
everybody's hand was raised.

00:14:20.140 --> 00:14:21.260
We've already done that.

00:14:21.290 --> 00:14:24.340
And the next step is to learn the
differences in Interface Builder.

00:14:24.410 --> 00:14:26.810
So let's take a look at that right now.

00:14:27.390 --> 00:14:30.700
So when we lay out our user interface,
here's a sample Carbon user interface,

00:14:30.860 --> 00:14:32.050
my registration dialog.

00:14:32.340 --> 00:14:34.450
I'll go ahead and lay out
my user interface until

00:14:34.450 --> 00:14:35.760
it's just the way I like it.

00:14:35.890 --> 00:14:38.740
Then typically,
we'll take a step back and

00:14:38.750 --> 00:14:42.200
take a look and we'll see which
fields do we have to access.

00:14:42.270 --> 00:14:45.210
In this case, we're going to access
our editable text field.

00:14:45.280 --> 00:14:48.110
So typically,
we'll assign it a signature and an ID.

00:14:48.250 --> 00:14:51.810
And then we'll go ahead and get
that through the get control by ID.

00:14:52.390 --> 00:14:53.980
And then again,
we'll go ahead and see which

00:14:54.010 --> 00:14:55.540
actions we need to take.

00:14:55.630 --> 00:14:58.300
So in this case,
when the user clicks the OK button,

00:14:58.370 --> 00:15:01.480
we'll want to assign it a command
to take some sort of action.

00:15:01.560 --> 00:15:05.370
Then we'll go ahead and parse that
command through our Carbon Event Handler,

00:15:05.480 --> 00:15:06.160
nest it in there.

00:15:06.160 --> 00:15:07.740
We'll check to see what
kind of a command it is.

00:15:07.740 --> 00:15:09.860
And finally,
we'll call a routine in our model class

00:15:10.330 --> 00:15:12.970
called Validate Registration here.

00:15:13.300 --> 00:15:16.870
Now let's go ahead and see how we
do the exact same thing in Cocoa.

00:15:16.960 --> 00:15:19.240
So I tried to lay out the
user interface the same way.

00:15:19.380 --> 00:15:21.450
One of the first things that
you're going to notice here is

00:15:21.450 --> 00:15:25.940
that cube on the lower right,
and it's called Registration Controller.

00:15:26.010 --> 00:15:31.310
That cube actually represents an instance
of my Registration Controller class,

00:15:31.310 --> 00:15:32.710
my own class.

00:15:33.250 --> 00:15:36.990
From that point on, we can then drag
connections into our class.

00:15:37.110 --> 00:15:43.920
So in order to gain a reference
to the EditableText field,

00:15:43.930 --> 00:15:49.810
we simply drag a connection between
our Registration Controller and

00:15:49.810 --> 00:15:51.600
our EditableText field.

00:15:51.640 --> 00:15:54.880
And then we'll go ahead and
name it RegistrationCode.

00:15:54.970 --> 00:15:57.780
So now we actually have an
instance variable set up within

00:15:57.780 --> 00:16:02.870
our RegistrationController class,
which references that control directly.

00:16:02.910 --> 00:16:04.580
It's quite easy.

00:16:04.750 --> 00:16:06.020
Then again,
we'll go ahead and take a step

00:16:06.100 --> 00:16:08.560
back and see which actions we're
going to need to take back,

00:16:08.670 --> 00:16:10.590
we're going to need to set up.

00:16:10.680 --> 00:16:14.380
So again,
we're going to want to set the OK button.

00:16:14.460 --> 00:16:17.940
So we'll go ahead and drag a
connection from the OK button to

00:16:17.940 --> 00:16:21.790
our Registration Controller class,
and we'll assign it a name,

00:16:21.790 --> 00:16:23.770
Validate Registration.

00:16:23.850 --> 00:16:26.770
So after we've done all this,
we've got a small class now

00:16:26.770 --> 00:16:28.600
called Registration Controller.

00:16:28.670 --> 00:16:31.920
When the user clicks OK,
it will call our Validate

00:16:31.970 --> 00:16:35.370
Registration method directly,
and from that method,

00:16:35.380 --> 00:16:37.940
we can access our instance variable,
registration code.

00:16:38.000 --> 00:16:40.600
There's really no code
to be written here.

00:16:42.500 --> 00:16:45.450
So Cocoa is not a separate box.

00:16:45.510 --> 00:16:48.500
It's not isolated in its own environment.

00:16:48.520 --> 00:16:50.960
That kind of reminds me of a story.

00:16:50.960 --> 00:16:54.810
I go to the Silicon Valley Cocoa Heads
meetings when I can,

00:16:55.080 --> 00:16:57.520
and a while ago,
maybe about a month or two ago,

00:16:57.520 --> 00:17:00.490
I met the Yahoo Messenger for
the Mac engineers,

00:17:00.490 --> 00:17:05.020
and then again about three weeks later,
I think this was about the day after they

00:17:05.020 --> 00:17:10.580
had released their 3.0 for the Mac beta,
I saw Carl, one of the engineers,

00:17:10.580 --> 00:17:12.370
eating lunch on our campus.

00:17:12.410 --> 00:17:17.260
So I asked him if he
wrote the client in Cocoa,

00:17:17.490 --> 00:17:18.580
and he said, yeah, mostly.

00:17:18.580 --> 00:17:21.760
So I asked him what he meant by mostly,
and he said, well,

00:17:21.760 --> 00:17:26.050
we share this large C++ source base
between our Mac and our Windows client.

00:17:26.060 --> 00:17:28.320
Well, in my mind,
this is a Cocoa application.

00:17:28.320 --> 00:17:30.020
I mean,
this is a typical way of writing a

00:17:30.020 --> 00:17:31.670
cross-platform Cocoa application.

00:17:31.670 --> 00:17:33.980
You provide your view and
your controller classes,

00:17:33.980 --> 00:17:37.410
which interact with the operating system,
and then you have your proprietary

00:17:37.410 --> 00:17:38.860
C++ model code underneath.

00:17:40.820 --> 00:17:43.940
and Scott are the first to introduce the
new Carbon and Objective-C framework.

00:17:43.940 --> 00:17:45.160
Cocoa can easily interact with
other subsystems like Carbon,

00:17:45.160 --> 00:17:45.450
BSD, and Quartz.

00:17:45.510 --> 00:17:50.200
With Objective-C++,
you can easily mix and match C, C++,

00:17:50.200 --> 00:17:52.330
and Objective-C all in the same file.

00:17:52.340 --> 00:17:53.770
Scott, again,
is going to talk a little bit

00:17:53.810 --> 00:17:55.720
more into detail of how he was
able to take advantage of that.

00:17:58.020 --> 00:18:01.770
So the next step is to learn Objective-C.

00:18:01.870 --> 00:18:05.900
So if I were to take a typical source
file and hand it to a Carbon developer,

00:18:05.930 --> 00:18:08.700
Carbon developer will typically
look at it and ignore everything

00:18:08.700 --> 00:18:10.830
in those crazy square brackets.

00:18:11.040 --> 00:18:12.840
If I were to take that same
source file and then hand

00:18:12.840 --> 00:18:14.910
it off to a Cocoa developer,
Cocoa developer is probably going

00:18:15.020 --> 00:18:17.170
to ignore everything that isn't
in those crazy square brackets.

00:18:17.230 --> 00:18:18.350
Well, it's really not that bad.

00:18:18.350 --> 00:18:21.780
We have a great document online called
the Objective-C Programming Language,

00:18:21.920 --> 00:18:23.940
and I promise within a few hours,
a day at the most,

00:18:23.940 --> 00:18:27.020
you will understand enough
Objective-C to get yourself started.

00:18:28.340 --> 00:18:30.280
But you should also know that
Cocoa applications can be

00:18:30.280 --> 00:18:31.780
written in other languages.

00:18:31.780 --> 00:18:35.150
So we actually have a session on
Friday morning which talks about writing

00:18:35.160 --> 00:18:37.500
Cocoa applications in Ruby and Python.

00:18:37.500 --> 00:18:40.850
But you should know that any
interpreted language is always

00:18:40.850 --> 00:18:44.680
going to suffer performance
problems over a compiled language.

00:18:45.500 --> 00:18:47.150
So let's take a closer
look at Objective-C.

00:18:47.410 --> 00:18:49.210
Here's a typical C function call.

00:18:49.280 --> 00:18:50.460
Set sticky note dimensions.

00:18:50.500 --> 00:18:52.700
We're going to pass in a
pointer to my sticky note,

00:18:52.800 --> 00:18:55.020
some dimensions, and a Boolean.

00:18:55.240 --> 00:18:56.200
Maybe this is to make it visible.

00:18:56.200 --> 00:18:58.010
I'm not sure.

00:18:58.090 --> 00:19:01.970
Well, let's take a look and see how we
write the same thing in Cocoa.

00:19:04.420 --> 00:19:07.220
We'll start off with the brackets.

00:19:07.270 --> 00:19:09.630
And then we'll set up our
object so the object can kind

00:19:09.630 --> 00:19:11.880
of be compared to our pointer.

00:19:14.850 --> 00:19:19.640
and then we'll go ahead
and set up the arguments.

00:19:19.720 --> 00:19:21.990
So this is actually,
we're going to send the object,

00:19:21.990 --> 00:19:24.610
my sticky note,
the message to set the width to 50,

00:19:24.980 --> 00:19:28.380
height to 100,
and to animate the transition.

00:19:28.380 --> 00:19:30.530
So by looking at this,
you can tell that this is

00:19:30.530 --> 00:19:32.270
actually much more readable.

00:19:32.370 --> 00:19:35.660
I think this is almost self-documenting.

00:19:35.660 --> 00:19:38.920
Maybe you can get rid of your comments.

00:19:40.270 --> 00:19:42.400
Let's take a look at another example.

00:19:42.490 --> 00:19:44.660
So here we have some embedded brackets.

00:19:44.750 --> 00:19:46.750
So probably from the last slide,
you've already learned

00:19:46.750 --> 00:19:49.060
enough Objective-C to tell
what this is going to do.

00:19:49.280 --> 00:19:51.600
We're going to start from the inside
brackets and take the color of our

00:19:51.670 --> 00:19:55.810
last sticky note and assign that to the
current color of our current sticky note.

00:19:55.910 --> 00:19:57.120
But actually,
this is kind of interesting.

00:19:57.120 --> 00:20:00.020
Just by looking at this one line of code,
I can tell quite a bit about what

00:20:00.090 --> 00:20:02.790
the class actually looks like.

00:20:02.870 --> 00:20:04.710
So let's take a look.

00:20:05.280 --> 00:20:08.880
Virtually all classes in Cocoa are
in one way or another derived from

00:20:08.880 --> 00:20:10.800
the powerful base class NSObject.

00:20:10.800 --> 00:20:14.500
So NSObject provides, among other things,
things like the reference counting

00:20:14.740 --> 00:20:17.870
retain-release memory management model,

00:20:19.470 --> 00:20:22.900
and, of course, with Objective-C 2.0,
if you're targeting Leopard,

00:20:22.900 --> 00:20:25.400
you can use the garbage collection.

00:20:25.400 --> 00:20:29.250
But we can have a good idea that we've
got an instance variable named color.

00:20:29.540 --> 00:20:31.930
Now in Carbon, for instance,
our getters and setters are

00:20:32.010 --> 00:20:35.400
typically named things like
getControlValue and setControlValue.

00:20:35.400 --> 00:20:37.400
In Cocoa,
things are done a little bit differently.

00:20:37.400 --> 00:20:41.400
Our getter is named the exact same
thing as our instance variable.

00:20:41.400 --> 00:20:44.400
So color would be the name of
our method to get the color.

00:20:44.400 --> 00:20:46.400
And setColor is our setter.

00:20:46.400 --> 00:20:49.400
Small s, set, capital C for the color.

00:20:49.400 --> 00:20:52.980
Now it's very important that you follow
these coding conventions set up by

00:20:52.980 --> 00:20:56.720
Cocoa rather than taking all the coding
conventions that you've developed over

00:20:56.820 --> 00:20:58.400
the years and pushing those into Cocoa.

00:20:58.400 --> 00:21:01.320
Reason being, a lot of conventions are
built on top of this.

00:21:01.410 --> 00:21:04.170
So, for instance, in Cocoa,
we have concepts of key-value

00:21:04.170 --> 00:21:06.390
coding and key-value observing.

00:21:06.400 --> 00:21:09.400
Key-value observing allows you
to watch an instance variable,

00:21:09.400 --> 00:21:13.390
and when the instance variable changes,
we can take some action.

00:21:13.400 --> 00:21:16.280
And then on top of key-value
coding and key-value observing,

00:21:16.340 --> 00:21:18.400
we build bindings on top of that.

00:21:18.400 --> 00:21:21.390
So if you start to break down
the low-level conventions

00:21:21.400 --> 00:21:24.230
like the getters and setters,
the rest of those conventions

00:21:24.260 --> 00:21:26.160
are going to go out the door.

00:21:27.800 --> 00:21:32.420
So here, let's take a look at comparing
Carbon events to delegates.

00:21:32.480 --> 00:21:35.800
So here we have part of a
function to constrain a window

00:21:35.810 --> 00:21:38.580
to only grow it horizontally,
not vertically.

00:21:38.580 --> 00:21:41.110
So typically what we'll do is
we'll install a Carbon event

00:21:41.110 --> 00:21:44.050
handler on a window,
take a look at the k event

00:21:44.050 --> 00:21:46.690
bounds changing Carbon event.

00:21:46.790 --> 00:21:49.990
Then from within our routine here,
we'll go ahead and get the

00:21:49.990 --> 00:21:52.740
rectangle of our previous window,
pull out the rectangle

00:21:52.740 --> 00:21:55.600
of our current window.

00:21:56.260 --> 00:21:59.050
change the rectangle so that the
current Windows rectangle matches

00:21:59.090 --> 00:22:02.320
the previous window rectangle,
maybe then we'll call size window

00:22:02.320 --> 00:22:05.780
and return no error or course
those parameters back in and

00:22:05.780 --> 00:22:07.740
return back event not handled.

00:22:07.740 --> 00:22:09.600
We go ahead and write this code.

00:22:09.600 --> 00:22:10.940
Send it out for testing.

00:22:10.990 --> 00:22:12.160
Everything seems to work fine.

00:22:12.400 --> 00:22:12.540
Okay.

00:22:12.540 --> 00:22:13.250
We think we got it.

00:22:13.250 --> 00:22:14.720
All of a sudden we hit the Zoom box.

00:22:14.740 --> 00:22:15.060
Boom!

00:22:15.060 --> 00:22:16.400
Takes up the whole screen again.

00:22:16.400 --> 00:22:16.690
Okay.

00:22:16.730 --> 00:22:17.470
Not a big problem.

00:22:17.510 --> 00:22:20.060
We'll go back, look at the code,
try to add the clause in

00:22:20.060 --> 00:22:21.380
there to handle the Zoom.

00:22:21.380 --> 00:22:22.500
We think we got it now.

00:22:22.670 --> 00:22:24.280
At least I think those are all the cases.

00:22:24.290 --> 00:22:25.380
I'm pretty sure anyway.

00:22:25.380 --> 00:22:27.770
Those are all the cases I wrote in here.

00:22:27.780 --> 00:22:31.360
But let's take a look and see how
we do the same thing in Cocoa.

00:22:31.360 --> 00:22:34.400
So Cocoa has this concept of delegates.

00:22:34.400 --> 00:22:40.140
Delegates allow one object to receive
messages from another object to override.

00:22:40.140 --> 00:22:43.350
So typically we'll use
delegates to override commonly

00:22:43.350 --> 00:22:45.460
overridden system functionality.

00:22:45.460 --> 00:22:48.800
Let me try and describe
that a little bit better.

00:22:49.120 --> 00:22:52.400
Here again,
we have an app controller class.

00:22:52.400 --> 00:22:55.340
If you look at small samples
on the web or tutorials,

00:22:55.420 --> 00:22:58.000
they'll typically name their
controller class app controller,

00:22:58.000 --> 00:23:00.390
so I did the same thing in this case.

00:23:00.920 --> 00:23:03.120
What we want to do is make
our app controller class

00:23:03.470 --> 00:23:06.430
a delegate of our window.

00:23:06.990 --> 00:23:10.180
So from Interface Builder,
we'll simply drag a connection from

00:23:10.180 --> 00:23:14.380
our window to the app controller
and assign it as our delegate.

00:23:14.730 --> 00:23:17.910
Then through dynamic binding,
the NSWindowController is going to say,

00:23:18.190 --> 00:23:20.600
app controller,
do you respond to the message,

00:23:20.600 --> 00:23:21.900
window will resize?

00:23:21.940 --> 00:23:23.460
And if we do, it'll call us.

00:23:23.500 --> 00:23:25.500
And it's really just one line of code.

00:23:25.530 --> 00:23:27.760
We go ahead and set the
height of our window to match

00:23:27.760 --> 00:23:31.460
what the height used to be,
and then we return that size.

00:23:31.570 --> 00:23:35.050
So there's really very little
room to make any errors here.

00:23:37.880 --> 00:23:40.760
So here are a few tips and tricks
that I've picked up along the way.

00:23:40.870 --> 00:23:43.520
So perhaps you have a large source base.

00:23:43.610 --> 00:23:46.180
You've got hundreds, maybe thousands,
of source files in there.

00:23:46.180 --> 00:23:49.890
Maybe you're compiling
in open source projects.

00:23:50.340 --> 00:23:53.190
Well, you may not have the patience or
the ability to go through there

00:23:53.530 --> 00:23:56.840
and rename all of your source files
to end in a .m or .mm extension

00:23:56.840 --> 00:23:59.800
if you're doing Objective-C++.

00:23:59.910 --> 00:24:02.080
So what we do offer is a build setting.

00:24:02.240 --> 00:24:05.000
It's the compile sources
as build setting.

00:24:05.080 --> 00:24:08.080
This will allow you to put
Objective-C code directly into

00:24:08.080 --> 00:24:12.030
your .c files and it will invoke
the Objective-C flavor of the

00:24:12.030 --> 00:24:14.390
compiler when compiling your files.

00:24:14.550 --> 00:24:17.300
Now, if you run into errors in this case,
for instance, if you're using keywords

00:24:17.340 --> 00:24:20.340
used by Objective-C,
there's another option.

00:24:20.470 --> 00:24:23.020
You can do this on a file-by-file basis.

00:24:23.120 --> 00:24:27.090
So here we can do a get info,
in this case, a get info on main.c,

00:24:27.100 --> 00:24:32.880
and we can coerce its file
type to be sourcecode.c.objc.

00:24:32.950 --> 00:24:34.720
It's a great tip.

00:24:35.600 --> 00:24:36.480
Next one, CodeSense.

00:24:36.550 --> 00:24:37.950
So I'm sure most of you
are already using this.

00:24:37.960 --> 00:24:38.880
This is code completion.

00:24:38.880 --> 00:24:43.000
Objective-C is really the easy
part when you're adopting Cocoa.

00:24:43.000 --> 00:24:46.200
The hard part is you're being faced
with literally thousands of new APIs.

00:24:46.200 --> 00:24:51.200
But the good news is that because
of the code conventions used,

00:24:51.200 --> 00:24:53.650
after a while you can start to
guess and understand what the

00:24:53.660 --> 00:24:54.980
APIs are going to be named.

00:24:54.980 --> 00:24:57.180
So before you start looking
through the header files or

00:24:57.180 --> 00:25:00.420
looking through the documentation,
you might start taking some guesses.

00:25:00.420 --> 00:25:02.260
So here I want to maybe create a subview.

00:25:02.260 --> 00:25:03.560
No, I want to add a subview.

00:25:03.560 --> 00:25:04.410
Yep, there it is.

00:25:04.490 --> 00:25:05.030
You guessed right.

00:25:05.110 --> 00:25:05.480
Add a subview.

00:25:05.520 --> 00:25:06.600
Hit return.

00:25:06.600 --> 00:25:07.170
It puts it in there.

00:25:07.180 --> 00:25:10.920
And then just like Carbon,
you use control slash to advance the

00:25:10.920 --> 00:25:13.830
highlight from one argument to the next.

00:25:15.520 --> 00:25:18.040
So after you've got the basics,
I recommend that you start learning the

00:25:18.040 --> 00:25:20.000
more intermediate to advanced topics.

00:25:20.240 --> 00:25:22.210
Things like key value coding,
key value observing,

00:25:22.210 --> 00:25:25.570
as I mentioned earlier,
and then bindings on top of that.

00:25:27.930 --> 00:25:31.180
So let's talk about migration strategies.

00:25:31.240 --> 00:25:32.360
Which framework is right for me?

00:25:32.580 --> 00:25:39.320
Well, both Carbon and Cocoa are able to
create 64-bit universal binaries.

00:25:39.400 --> 00:25:41.810
So why not take advantage of both?

00:25:44.920 --> 00:25:47.370
You can go for a gradual
adoption strategy.

00:25:47.420 --> 00:25:50.410
So I remember when
Mac OS X first came out,

00:25:50.550 --> 00:25:56.300
some developers decided to maybe create
their next window using Carbon Events.

00:25:56.350 --> 00:25:58.880
And the way they would do
that is encapsulate all their

00:25:58.880 --> 00:26:02.000
code for creating the window,
installing the event handlers,

00:26:02.110 --> 00:26:05.460
and handling the events
all within one file.

00:26:05.820 --> 00:26:06.250
Right?

00:26:06.280 --> 00:26:09.610
After they began to become familiar with
Carbon Events and began to like them

00:26:09.710 --> 00:26:11.670
and understand how elegant they were,
they start to move these

00:26:11.670 --> 00:26:13.860
changes pervasively through
the rest of the source space.

00:26:14.500 --> 00:26:17.450
Slowly, you bump up the sleep
time on wait next event.

00:26:17.460 --> 00:26:19.630
After you feel comfortable,
you change wait next event to

00:26:19.670 --> 00:26:21.360
run application event loop,
and you're off.

00:26:21.360 --> 00:26:25.090
You can kind of adopt the same strategy
when looking at Objective-C and Cocoa.

00:26:25.250 --> 00:26:27.690
You can start by adopting
something like a Cocoa service,

00:26:27.760 --> 00:26:30.750
such as the font panel, color picker,
or spelling panel.

00:26:32.160 --> 00:26:35.140
or with Leopard,
you can now embed an NS view directly

00:26:35.140 --> 00:26:37.480
into your Carbon application.

00:26:37.530 --> 00:26:40.930
Or you may choose to make your
next window a Cocoa window.

00:26:42.480 --> 00:26:45.810
So let's look at some tips and tricks
when dealing with a hybrid application.

00:26:45.870 --> 00:26:47.560
The first one,
you have to start including

00:26:47.630 --> 00:26:48.550
NSApplicationLoad.

00:26:48.740 --> 00:26:49.820
Just get used to it.

00:26:49.940 --> 00:26:52.730
Otherwise, you're going to see bugs and
beat yourself up about it.

00:26:52.740 --> 00:26:55.140
So get used to including
NSApplicationLoad.

00:26:55.140 --> 00:26:57.050
Calling it multiple
times simply is benign.

00:26:57.120 --> 00:27:02.670
It'll simply check to see if the
NSApp variable has been initialized,

00:27:02.670 --> 00:27:04.640
and if it has, it'll return.

00:27:04.690 --> 00:27:08.190
Another tip is that Interface
Builder 2 can actually read and

00:27:08.190 --> 00:27:10.150
write your controller files.

00:27:10.220 --> 00:27:12.400
So one of the really neat things is,
from Interface Builder,

00:27:12.420 --> 00:27:14.320
after you've dragged all
these connections around,

00:27:14.320 --> 00:27:16.720
set up all your instance
variables and method names,

00:27:16.760 --> 00:27:18.950
you can actually go to the
Classes menu and choose

00:27:18.950 --> 00:27:21.260
Create Files for Window Controller.

00:27:21.290 --> 00:27:23.670
This will generate your complete
header file for the class

00:27:23.880 --> 00:27:26.870
you just created in Interface
Builder and a stub implementation

00:27:26.890 --> 00:27:30.000
for the implementation side,
and put those files directly

00:27:30.060 --> 00:27:31.700
into your Xcode project.

00:27:31.810 --> 00:27:33.920
From Xcode, then,
you can begin changing them,

00:27:33.960 --> 00:27:37.140
and then sync them back up with
Interface Builder any time you want.

00:27:37.160 --> 00:27:39.540
This is a really neat tip
to get yourself started.

00:27:39.540 --> 00:27:41.320
You drag those connections.

00:27:41.340 --> 00:27:44.220
You don't have to worry so much about the
syntax because it will create it for you,

00:27:44.220 --> 00:27:45.880
and then you get going.

00:27:46.630 --> 00:27:51.210
So let's talk a little bit about
the Carbon-Cocoa interaction.

00:27:51.320 --> 00:27:55.160
So in Tiger,
fully supported is any non-UI code.

00:27:55.280 --> 00:27:57.030
So for instance,
you can call the spelling

00:27:57.080 --> 00:27:58.530
checker directly from Carbon.

00:27:58.760 --> 00:27:59.960
It'll be fully supported.

00:28:00.020 --> 00:28:03.850
Modal panels in the other environment,
floating windows, palettes,

00:28:03.920 --> 00:28:06.270
also fully supported in Tiger.

00:28:06.560 --> 00:28:10.360
supported with caveats,
creating a Cocoa document-based

00:28:10.450 --> 00:28:11.700
window from your Carbon application.

00:28:11.700 --> 00:28:15.140
I remember reading on the
Carbon dev list a while ago that,

00:28:15.140 --> 00:28:17.580
for instance,
window cycling didn't work quite right

00:28:17.610 --> 00:28:21.350
when creating a Cocoa document-based
window inside of a Carbon application.

00:28:21.360 --> 00:28:23.830
There are a few other minor
glitches like that that you can

00:28:23.830 --> 00:28:26.270
find within the Windows menu,
and these are all issues

00:28:26.270 --> 00:28:28.980
that we're addressing for
Leopard in Carbon right now.

00:28:29.020 --> 00:28:31.660
Embedding an NSView within an HIView.

00:28:31.660 --> 00:28:32.440
This works.

00:28:32.440 --> 00:28:35.650
The goal is to be able to embed
any NSView within an HIView.

00:28:35.650 --> 00:28:37.970
Actually, I should rephrase that.

00:28:38.080 --> 00:28:41.210
Any NSView which draws on
its main thread in an HIView.

00:28:41.210 --> 00:28:43.130
But this is a Leopard-only feature.

00:28:43.140 --> 00:28:46.320
Sheets and drawers in Windows of
the other environment.

00:28:46.320 --> 00:28:49.380
This is a feature which is planned
to be supported in Leopard,

00:28:49.450 --> 00:28:52.130
but on the seed that you have right now,
I don't believe that

00:28:52.190 --> 00:28:52.960
there's support for it.

00:28:55.150 --> 00:28:58.240
So I'd like to quickly go
over some of the demos that

00:28:58.240 --> 00:28:59.280
we included with this session.

00:28:59.280 --> 00:29:04.000
I believe if you go to the
WWDC attendees area under session 129,

00:29:04.000 --> 00:29:08.520
you can find all these demos and if not,
they should soon be available.

00:29:08.520 --> 00:29:11.280
The first one is the
Carbon with Cocoa web window.

00:29:11.340 --> 00:29:14.960
This is a Carbon application
which launches--

00:29:15.170 --> 00:29:18.650
A web kit, web browser-based window,
Cocoa window,

00:29:18.750 --> 00:29:20.700
from your Carbon-hosted application.

00:29:20.790 --> 00:29:22.570
For this sample,
I included a step-by-step

00:29:22.660 --> 00:29:25.710
tutorial of exactly what I did
in Xcode and exactly what I did

00:29:25.710 --> 00:29:28.140
in Interface Builder to do this,
and a little bit of the thought

00:29:28.140 --> 00:29:33.210
process that went into doing this
from the Carbon perspective again.

00:29:33.430 --> 00:29:36.650
and then based on this sample,
I wrote two other samples.

00:29:36.650 --> 00:29:39.400
One of them is the Carbon Quartz
Composer TV sample.

00:29:39.450 --> 00:29:41.320
Again,
this is a Carbon-hosted application

00:29:41.670 --> 00:29:45.190
which brings up a Cocoa-based
window and we have a complete Quartz

00:29:45.210 --> 00:29:48.300
Composer composition in here which
has bindings running and everything.

00:29:48.300 --> 00:29:50.190
It makes a pretty splashy demo.

00:29:50.290 --> 00:29:51.020
I'll show it to you in a minute.

00:29:51.960 --> 00:29:55.890
The next one is
Carbon Cocoa Core Image Tab.

00:29:56.130 --> 00:29:59.460
This is again a Carbon application
and in the Cocoa side of this,

00:29:59.460 --> 00:30:03.000
on the Cocoa window,
I made a tab-based web browser and then

00:30:03.000 --> 00:30:08.310
I included some core image effects.

00:30:08.340 --> 00:30:10.430
So when you switch from
one tab to the other,

00:30:10.430 --> 00:30:13.930
we can use some core image effects
in here and this works back to Tiger.

00:30:13.930 --> 00:30:15.380
It's really neat.

00:30:15.410 --> 00:30:17.760
In fact, when I wrote this sample,
I was literally dragging people in

00:30:17.760 --> 00:30:20.000
from the hall to show them because
it really makes that wow factor,

00:30:20.030 --> 00:30:21.680
I think, that Bertrand was talking about.

00:30:21.680 --> 00:30:24.650
Next one, like I mentioned,
we're asking developers to start

00:30:24.650 --> 00:30:27.990
using NSCursor and because I mentioned
NSCursor in the presentation,

00:30:28.000 --> 00:30:30.680
I wanted to include a sample
which shows exactly how to use

00:30:30.680 --> 00:30:33.630
NSCursor from a Carbon-hosted
application and in the sample,

00:30:33.630 --> 00:30:36.690
I actually write some
Carbon wrappers around NSCursor.

00:30:36.700 --> 00:30:39.660
I shouldn't say I,
I should say we on this one.

00:30:39.660 --> 00:30:40.810
So,

00:30:41.490 --> 00:30:44.200
We have the HIView NSView.

00:30:44.200 --> 00:30:48.520
This sample is a leopard-only sample,
and it shows how to embed

00:30:48.520 --> 00:30:52.860
an NSView in an HIView.

00:30:52.930 --> 00:30:56.310
So real quickly,
if we go over to the demo machine.

00:31:00.160 --> 00:31:02.720
So I just want to real quickly show
off some of these samples here.

00:31:02.770 --> 00:31:06.340
Here's the first one by which the
two other samples are based on,

00:31:06.360 --> 00:31:08.860
the Carbon with Cocoa web window.

00:31:09.390 --> 00:31:10.140
It's quite simple.

00:31:10.140 --> 00:31:13.300
We have our Cocoa window here.

00:31:13.470 --> 00:31:15.490
Excuse me, Carbon window on this side,
named Carbon window.

00:31:15.690 --> 00:31:16.800
Cocoa window here.

00:31:16.980 --> 00:31:19.790
And as you can see,
it's almost like a full web browser.

00:31:19.790 --> 00:31:22.030
We can click in here.

00:31:22.750 --> 00:31:25.400
Let me try and see if we can load .mac.

00:31:25.420 --> 00:31:26.140
We'll load QuickTime.

00:31:26.150 --> 00:31:28.300
All the links seem to work.

00:31:28.340 --> 00:31:31.410
Backwards, forwards, and if you notice,
the URL and the title

00:31:31.410 --> 00:31:33.130
also change with my links.

00:31:33.470 --> 00:31:36.240
And I did all this with really very
little code because the WebKit view

00:31:36.240 --> 00:31:40.580
is really a full-featured view,
which allows me to kind

00:31:40.580 --> 00:31:41.660
of set up some bindings.

00:31:41.660 --> 00:31:43.460
So without having to be
an expert at bindings,

00:31:43.460 --> 00:31:45.680
I can set this up directly
from Interface Builder,

00:31:45.740 --> 00:31:46.760
and it all just works.

00:31:46.760 --> 00:31:49.340
So let's go ahead and take a look
at some of the other samples.

00:31:49.430 --> 00:31:51.400
Here's that
Carbon Cocoa Core Image Tab sample

00:31:51.400 --> 00:31:54.360
I was talking about.

00:31:54.360 --> 00:31:55.840
Let me go ahead and set this one up.

00:31:55.840 --> 00:31:58.090
Let me get something fun here.

00:32:03.610 --> 00:32:09.400
Okay, so I have two,
that's not a real fun page,

00:32:09.400 --> 00:32:13.080
but we have two websites here
and watch what happens when

00:32:13.120 --> 00:32:14.090
I click between one and the other.

00:32:14.210 --> 00:32:17.350
Here, let me slow that down a little
bit by holding down the shift key.

00:32:18.690 --> 00:32:19.720
This is really easy to do.

00:32:19.720 --> 00:32:21.480
You can just grab the source code,
integrate it right in there,

00:32:21.540 --> 00:32:25.510
and I add a menu to do
different core image effects.

00:32:30.350 --> 00:32:32.400
So, and this works in Tiger,
so it doesn't use any

00:32:32.400 --> 00:32:34.880
of the core animations,
all core image.

00:32:34.880 --> 00:32:38.110
And the Quartz Composer TV sample,
so we have our small Carbon window here,

00:32:38.110 --> 00:32:41.490
we'll open up our Cocoa-based window.

00:32:42.930 --> 00:32:43.990
The camera's starting.

00:32:44.020 --> 00:32:46.040
Looks like the camera-- oh,
there it goes.

00:32:46.040 --> 00:32:47.600
And it actually uses bindings.

00:32:47.600 --> 00:32:50.760
So actually, if I change the title here,
it's all going to be live.

00:32:50.760 --> 00:32:54.670
If you look at the orange title above,
we'll go ahead and put 2006 in there.

00:32:54.670 --> 00:32:56.810
Hit Return, and it all updates live.

00:32:59.580 --> 00:33:03.240
And lastly, we have the sample which
demonstrates how to embed an entire

00:33:03.240 --> 00:33:09.290
NSView hierarchy within our HIView,
and that is in the HIView NSView sample.

00:33:11.050 --> 00:33:12.450
And again,
the last sample that we have here

00:33:12.460 --> 00:33:17.850
is the Carbon Cocoa Picture Cursor,
which just demonstrates how to set

00:33:17.850 --> 00:33:20.300
the cursor through the NSCursor APIs.

00:33:20.300 --> 00:33:25.780
If we go back over to slides.

00:33:30.300 --> 00:33:33.300
So with that,
I'd like to welcome Scott Thompson,

00:33:33.310 --> 00:33:37.990
talk about his experiences
bringing Mind Manager to the Mac.

00:33:38.910 --> 00:33:39.670
All right.

00:33:42.300 --> 00:33:46.880
Hello, how are you?

00:33:46.960 --> 00:33:47.680
Thank you for having me.

00:33:47.720 --> 00:33:48.940
I appreciate it.

00:33:48.940 --> 00:33:49.860
My name is Scott Thompson.

00:33:49.860 --> 00:33:53.890
I'm the lead architect for
cross-platform products at Mindjet.

00:33:53.980 --> 00:33:56.720
And I'm sure some of you are
wondering why is Scott here.

00:33:56.720 --> 00:34:00.360
You heard Deric speaking about the
fact that I work on an application

00:34:00.360 --> 00:34:03.420
that used to be a Windows application,
but why would I be here

00:34:03.420 --> 00:34:04.720
for a Carbon session?

00:34:04.720 --> 00:34:09.540
Well, in a previous life,
I was known as the Macintosh technical

00:34:09.570 --> 00:34:11.250
lead for Macromedia Freehand.

00:34:11.250 --> 00:34:14.190
And Freehand was one of the
very first applications ever

00:34:14.190 --> 00:34:17.790
ported to Carbon and moved to
Mac OS X through the Carbon APIs.

00:34:17.790 --> 00:34:20.000
Freehand is a very large application.

00:34:20.000 --> 00:34:21.220
It took us a lot of work to do it.

00:34:21.290 --> 00:34:24.230
And the last time I was on this stage,
I was actually demoing

00:34:24.230 --> 00:34:26.600
it in the WWDC keynote.

00:34:26.600 --> 00:34:28.460
Now I work at Mindjet,
and we work on a program

00:34:28.460 --> 00:34:30.300
called Mind Manager.

00:34:30.300 --> 00:34:35.390
Mind Manager is a legacy
Windows application that we've

00:34:35.390 --> 00:34:39.670
moved to Mac OS X using Cocoa,
but our development team was

00:34:39.670 --> 00:34:44.720
actually peopled with people
that were Carbon developers.

00:34:44.720 --> 00:34:45.740
One of us had done some Cocoa.

00:34:45.810 --> 00:34:47.640
But we'll talk about that,
and I'm here to tell you

00:34:47.640 --> 00:34:48.720
about my experiences.

00:34:52.590 --> 00:34:53.810
That's a very black slide.

00:34:53.860 --> 00:34:59.380
Ah, I pushed the wrong button.

00:34:59.380 --> 00:35:00.410
It doesn't work.

00:35:00.520 --> 00:35:01.840
All right, so what is my purpose here?

00:35:01.840 --> 00:35:03.670
Well,
we're going to explore the case study

00:35:04.030 --> 00:35:09.500
of MindManager and what we did to
make MindManager work on the Mac.

00:35:09.590 --> 00:35:12.180
We're going to discuss some of
the architectural decisions that

00:35:12.180 --> 00:35:15.800
we made in doing that as a large
cross-platform application.

00:35:15.800 --> 00:35:18.260
How does that fit into
the Cocoa universe?

00:35:18.260 --> 00:35:20.260
And how do Carbon Developers do that?

00:35:20.360 --> 00:35:22.360
We're going to offer advice
from Carbon Developers

00:35:22.380 --> 00:35:23.420
who've been there before.

00:35:23.420 --> 00:35:25.830
We've made the transition
from Carbon to Cocoa.

00:35:26.030 --> 00:35:28.400
Maybe we can give you some
hints to help you along the way,

00:35:28.540 --> 00:35:31.160
offer you signposts to put
your feet on the best path to

00:35:31.160 --> 00:35:32.850
bringing your code forward.

00:35:33.110 --> 00:35:34.700
What will happen if I'm successful?

00:35:34.700 --> 00:35:36.610
Well, hopefully I'll answer some
of the questions that you

00:35:36.610 --> 00:35:38.000
might have about Cocoa.

00:35:38.050 --> 00:35:42.190
I'll help you visualize how Cocoa can
fit into your development plans,

00:35:42.300 --> 00:35:45.660
maybe steer you away from a couple of
the pitfalls that we fell into so you

00:35:45.660 --> 00:35:48.250
don't have to wallow in the mire with us.

00:35:48.350 --> 00:35:50.220
And if I inspire you
to try Cocoa at home,

00:35:50.220 --> 00:35:52.260
then I'll have done my job admirably.

00:35:52.260 --> 00:35:53.260
Thank you.

00:35:54.050 --> 00:35:55.440
So let's talk about MindManager.

00:35:55.440 --> 00:35:56.990
What is MindManager?

00:35:57.020 --> 00:36:00.080
MindManager is a productivity
application for information management.

00:36:00.080 --> 00:36:05.760
It's designed to help you capture, share,
and collect your ideas and organize them.

00:36:05.760 --> 00:36:09.120
MindManager is Mindjet's
flagship product.

00:36:09.160 --> 00:36:14.100
It has a nine-year history of
development on the Windows platform.

00:36:14.100 --> 00:36:17.740
By the time we started the project,
it was approximately one and a half

00:36:17.850 --> 00:36:22.110
million lines of Windows and MFC code,
all of it written, of course, in C++.

00:36:24.000 --> 00:36:26.030
The first thing we learned
was that MindManager was

00:36:26.030 --> 00:36:27.440
already mostly MVC-factored.

00:36:27.440 --> 00:36:29.700
They've done a very good job
of separating their core code

00:36:29.770 --> 00:36:31.830
away from their user interface,
and we'll see some of

00:36:31.830 --> 00:36:33.140
the implications of that.

00:36:33.160 --> 00:36:35.660
Now,
this is not a MindManager sales pitch.

00:36:35.660 --> 00:36:38.870
If you're interested in
learning more about MindManager,

00:36:38.910 --> 00:36:42.680
you can go to www.mapthemac.com
or catch me around the sessions,

00:36:42.680 --> 00:36:45.160
and I'd be happy to show you MindManager.

00:36:45.160 --> 00:36:48.190
One thing to note about MindManager,
it helps you capture ideas.

00:36:48.190 --> 00:36:50.160
Developers typically have a lot of ideas.

00:36:50.160 --> 00:36:52.500
We found it to be a very
handy development tool.

00:36:54.920 --> 00:36:56.570
All right, the project,
what we had to do.

00:36:56.580 --> 00:36:58.990
The idea was, of course,
we wanted to create a Macintosh

00:36:59.000 --> 00:37:00.340
version of MindManager.

00:37:00.340 --> 00:37:05.110
The reason we wanted to do that is
because MindJet had had a lot of

00:37:05.110 --> 00:37:10.380
feedback from MindManager customers,
and they wanted to bring, you know,

00:37:10.380 --> 00:37:13.510
they noticed a good synergy between
the sort of things that MindManager

00:37:13.620 --> 00:37:15.920
does and the sort of creative
people you find on the Mac.

00:37:15.960 --> 00:37:18.000
So there was already
high customer demand.

00:37:18.000 --> 00:37:20.660
And after we came up with our first beta,
we got a lot of comments

00:37:20.660 --> 00:37:23.200
from users that said,
"Oh my God, finally,

00:37:23.200 --> 00:37:25.780
I can finally get rid of that
Windows laptop I've been keeping around

00:37:25.780 --> 00:37:30.270
just to run MindManager." So we had two
big goals as we started the project.

00:37:30.300 --> 00:37:32.940
We wanted to make sure that
we were making an application

00:37:32.940 --> 00:37:33.940
that was MindManager.

00:37:33.940 --> 00:37:35.860
We didn't want it to
look something bizarre.

00:37:35.900 --> 00:37:38.240
And we want to make sure that
it was a Macintosh application,

00:37:38.660 --> 00:37:41.240
not a badly ported Windows application.

00:37:41.390 --> 00:37:43.080
So I'm sure you've all seen those.

00:37:43.110 --> 00:37:45.740
We wanted to make sure that
you didn't see another one.

00:37:45.740 --> 00:37:48.310
The total time that we had to do
the project for the first release

00:37:48.410 --> 00:37:50.990
was approximately 18 months.

00:37:51.220 --> 00:37:54.580
The team that we had,
starting with Mindjet, was we had Larry.

00:37:54.580 --> 00:37:56.770
Larry had absolutely no
Mac experience whatsoever,

00:37:56.780 --> 00:37:58.230
but he was our tie to the past.

00:37:58.230 --> 00:38:00.230
He'd been working on
Mind Manager for a long time.

00:38:00.240 --> 00:38:01.190
Then there's me.

00:38:01.260 --> 00:38:04.840
I'd done mostly Carbon programming
on big Carbon applications.

00:38:04.880 --> 00:38:05.960
I was a Cocoa hobbyist.

00:38:06.020 --> 00:38:09.260
I'd pulled out and done some
tutorials and those sorts of things.

00:38:09.400 --> 00:38:10.120
We had Jeff.

00:38:10.120 --> 00:38:12.580
Jeff, as well,
was largely a Carbon programmer

00:38:12.580 --> 00:38:14.400
who hadn't done much with Cocoa.

00:38:14.400 --> 00:38:16.100
We brought in Glenn.

00:38:16.100 --> 00:38:17.630
Glenn was our Cocoa ringer.

00:38:17.640 --> 00:38:20.740
He'd actually had five years
of professional development

00:38:20.740 --> 00:38:22.040
experience using Cocoa.

00:38:22.140 --> 00:38:25.380
Then we had Eric, Jim, and Paul,
who were three contract engineers.

00:38:25.380 --> 00:38:26.340
They helped us out.

00:38:26.470 --> 00:38:28.920
It was sort of a mixed bag.

00:38:28.990 --> 00:38:30.820
Some of them had some more
Cocoa experience than others,

00:38:30.820 --> 00:38:34.740
but by and large,
we were a Carbon team trying

00:38:34.740 --> 00:38:37.050
to move into a Cocoa world.

00:38:37.490 --> 00:38:40.950
The timeline for our project
ended up breaking out this way.

00:38:40.950 --> 00:38:44.240
We spent the first five months
doing sort of strategy and setup.

00:38:44.240 --> 00:38:48.010
We had a large application to move over,
so we had to nail down exactly which

00:38:48.010 --> 00:38:51.330
features we were going to bring over,
which ones we weren't going to be able

00:38:51.330 --> 00:38:54.610
to bring over for technical reasons
or time reasons and all those things.

00:38:54.610 --> 00:38:57.460
We also spent the first five
months getting some of the

00:38:57.460 --> 00:39:01.580
low-level libraries to rebuild,
things like the XML layer and encryption,

00:39:01.580 --> 00:39:04.820
and we have some code to
handle zip archives and things.

00:39:05.320 --> 00:39:09.520
So the actual application
development took about 12 months.

00:39:09.610 --> 00:39:12.590
So from the time we actually
started writing Cocoa code and

00:39:12.600 --> 00:39:15.940
designing the user interface,
it took about a year,

00:39:15.940 --> 00:39:19.460
and we shipped in May 31, 2006.

00:39:19.460 --> 00:39:22.410
So essentially,
we built a Cocoa application,

00:39:22.410 --> 00:39:27.450
a fully-featured Macintosh application,
in about 12 months using some of the

00:39:27.450 --> 00:39:30.090
help that we had from the Windows code.

00:39:31.940 --> 00:39:36.030
So a big part of our success was
based on our application strategy.

00:39:36.030 --> 00:39:40.550
And our application strategy in term
is based on Model-View-Controller.

00:39:40.550 --> 00:39:44.000
The first thing that we did, though,
was we noticed that we were going to have

00:39:44.060 --> 00:39:46.260
what we call a core and edge structure.

00:39:46.260 --> 00:39:49.390
So core is the platform-independent code.

00:39:49.400 --> 00:39:52.830
That's the C++ code that's shared with
Windows and those sorts of things.

00:39:52.850 --> 00:39:55.590
The edge code would be the
platform-dependent code,

00:39:55.690 --> 00:39:58.700
so any of the code that you
use to do the user interface.

00:39:59.700 --> 00:40:02.860
What we decided for our application
strategy was we were going

00:40:02.860 --> 00:40:06.380
to use the existing C++ data
model that Mindjet already had.

00:40:06.400 --> 00:40:10.140
They had put a lot of work into
developing their data model,

00:40:10.170 --> 00:40:10.700
getting it ready.

00:40:10.700 --> 00:40:15.400
We were also going to use a lot of the
existing commands and notifications,

00:40:15.400 --> 00:40:18.780
those portions of the controller layer
that knew how to manipulate the model.

00:40:18.780 --> 00:40:20.280
We're going to keep up with those.

00:40:20.300 --> 00:40:23.530
Of course, we decided,
being Carbon programmers,

00:40:23.530 --> 00:40:27.090
that the Macintosh edge code
would all be done in Cocoa.

00:40:27.700 --> 00:40:31.490
So when you do something like this,
the place where things get

00:40:31.490 --> 00:40:34.530
really exciting is at the
interfaces between layers.

00:40:34.540 --> 00:40:36.280
I mean, that's where, you know,
if you think about it,

00:40:36.300 --> 00:40:37.960
we've got lots of idioms
that go along that way.

00:40:37.960 --> 00:40:41.350
We have where the rubber meets the road,
between a rock and a hard place,

00:40:41.350 --> 00:40:42.560
those sorts of things.

00:40:42.690 --> 00:40:45.680
So we spend a lot of our times in
those kinds of nooks and crannies.

00:40:45.740 --> 00:40:49.450
Some that we ran into in particular were,
of course, the user interface versus

00:40:49.570 --> 00:40:50.690
the business logic.

00:40:51.150 --> 00:40:53.540
We couldn't reuse a lot of the
user interface controller layer

00:40:53.540 --> 00:40:56.240
from the Windows side because we
didn't want our application to

00:40:56.280 --> 00:40:57.840
look like a Windows application.

00:40:57.840 --> 00:41:01.210
We wanted to do a Mac application,
so we needed new Macintosh-specific

00:41:01.210 --> 00:41:02.660
code for that sort of thing.

00:41:02.720 --> 00:41:06.440
Platform-dependent code versus
platform-independent code was

00:41:06.440 --> 00:41:09.020
another interesting transition layer.

00:41:09.020 --> 00:41:12.080
And along with the
platform-dependent and independent,

00:41:12.120 --> 00:41:15.800
we also had the C++ versus
Objective-C transitions to deal with.

00:41:17.750 --> 00:41:20.660
So the way that we did this
was we relied heavily on the

00:41:20.660 --> 00:41:22.180
Model-View-Controller model.

00:41:22.380 --> 00:41:26.430
Now, Deric, you're bound to have run
into Model-View-Controller at

00:41:26.870 --> 00:41:32.790
many places up to this point,
and it was a really valuable tool for

00:41:32.790 --> 00:41:38.580
us because we knew we wanted the view
side of things to be in Objective-C.

00:41:38.600 --> 00:41:42.600
We knew we wanted the C++
side of things to be in C++,

00:41:42.950 --> 00:41:45.370
but the question is, what do you do about
that controller layer?

00:41:45.480 --> 00:41:47.580
I mean,
how do you deal with the controller?

00:41:47.590 --> 00:41:50.670
Well, the way that we dealt with it in
our application was we took the

00:41:50.810 --> 00:41:54.950
controller layer and we split it,
not necessarily right down the middle,

00:41:54.960 --> 00:41:56.610
but into two pieces.

00:41:56.790 --> 00:42:00.260
So if you view the controller layer,
one side of it as,

00:42:00.270 --> 00:42:02.320
how does the user interact with my data?

00:42:02.320 --> 00:42:04.530
What sort of gestures
are they going to use?

00:42:04.740 --> 00:42:07.440
What sort of things is
the user going to do?

00:42:07.450 --> 00:42:10.710
And you look at the other
side of the controller as,

00:42:10.710 --> 00:42:13.900
what commands am I going to
send to my model to actually

00:42:13.920 --> 00:42:15.540
make changes to my model?

00:42:15.560 --> 00:42:17.460
Then this split makes a lot more sense.

00:42:17.460 --> 00:42:21.340
Now, as it turns out,
it also happens to correspond

00:42:21.340 --> 00:42:23.840
with some of these interfaces
we've been talking about.

00:42:23.870 --> 00:42:29.080
This entire side of the diagram was what
we were going to write in Objective-C,

00:42:29.080 --> 00:42:32.940
or in this case,
we actually used Objective-C++ because

00:42:32.940 --> 00:42:36.380
Objective-C++ can talk directly to C++.

00:42:36.410 --> 00:42:39.960
The other side of the diagram, of course,
was going to be the C++ legacy code

00:42:39.960 --> 00:42:43.200
that we inherited from Mindjet,
and that's how we were going

00:42:43.200 --> 00:42:47.340
to manipulate our model and do
serialization and those sorts of things.

00:42:47.340 --> 00:42:50.880
So it also corresponds roughly
to the platform independent

00:42:51.400 --> 00:42:54.590
and platform dependent.

00:42:55.500 --> 00:42:56.760
Transition layers as well.

00:42:56.830 --> 00:42:59.080
So by and large,
the view side and the controllers

00:42:59.150 --> 00:43:02.500
that went into the view side were
all platform-dependent code dealing

00:43:02.500 --> 00:43:04.080
with the Macintosh user interface.

00:43:04.110 --> 00:43:06.420
And as we mentioned,
we've got the legacy code

00:43:06.420 --> 00:43:09.960
that's shared with Windows for
the platform-independent side.

00:43:10.540 --> 00:43:14.230
So we had to touch Objective-C,
and I know that that's a sort of

00:43:14.230 --> 00:43:15.840
a large issue for a lot of people.

00:43:15.840 --> 00:43:20.190
It causes lots of consternation on the
development list and things like that.

00:43:20.280 --> 00:43:22.990
It is true that
Objective-C does look different.

00:43:22.990 --> 00:43:24.600
There are square brackets.

00:43:24.600 --> 00:43:28.050
They end up in your code,
and you're like, eh, what's up with that?

00:43:28.100 --> 00:43:32.120
But that sort of,
the oddness of it goes away very quickly.

00:43:32.120 --> 00:43:36.110
There's a whole lot more to learn
about Objective-C than just the syntax.

00:43:36.250 --> 00:43:37.980
The syntax is the smallest part of it.

00:43:38.560 --> 00:43:41.440
You also have to learn about how
objects are created and released.

00:43:41.440 --> 00:43:44.520
You have to learn how methods
are dispatched and those things.

00:43:44.520 --> 00:43:47.660
But once you've learned those things,
you can apply them to so

00:43:47.660 --> 00:43:49.200
much more than just Cocoa.

00:43:49.220 --> 00:43:52.330
So the sort of canonical
example of this is Core Image.

00:43:52.390 --> 00:43:55.970
If you wish to use Core Image from
inside of a Carbon application,

00:43:56.070 --> 00:43:58.640
you have to go through
the Objective-C API.

00:43:58.640 --> 00:44:01.880
But in this case,
Core Image is not part of Cocoa.

00:44:01.880 --> 00:44:05.110
Core Image is part of
that Core Services layer.

00:44:05.120 --> 00:44:08.540
And, of course, this week I learned with
you about Core Animation.

00:44:08.540 --> 00:44:11.750
Which is also down sort of
in the Core Services layer.

00:44:11.750 --> 00:44:15.880
It's an Objective-C API,
but it's not necessarily a Cocoa service.

00:44:15.910 --> 00:44:19.070
The final thing I want to mention
about Objective-C is that it

00:44:19.070 --> 00:44:20.760
does have some advantages.

00:44:20.760 --> 00:44:23.470
There are reasons that
Apple uses Objective-C,

00:44:23.470 --> 00:44:27.400
and it takes you a little while to
recognize some of those reasons.

00:44:27.400 --> 00:44:30.300
But once you get it,
once you understand why they're

00:44:30.300 --> 00:44:32.790
doing what they're doing,
it makes it a whole

00:44:32.790 --> 00:44:34.300
lot easier to swallow.

00:44:34.790 --> 00:44:37.550
So let's talk a little
bit about Objective-C++.

00:44:37.780 --> 00:44:40.610
I mentioned that most of our
platform dependent code was

00:44:40.610 --> 00:44:43.070
written in Objective-C++.

00:44:43.240 --> 00:44:45.980
As Deric mentioned,
it allows you to combine C++

00:44:46.030 --> 00:44:49.370
and Objective-C in the same
file or often in the same line.

00:44:49.380 --> 00:44:52.890
If you want to call an
Objective-C method and you have

00:44:53.310 --> 00:44:57.200
to make a C++ call in the middle,
you can just call it

00:44:57.200 --> 00:44:58.760
normally as you would.

00:44:58.780 --> 00:45:02.120
It brings some familiar C++
features that I happen to like.

00:45:02.120 --> 00:45:03.680
I like strong typing.

00:45:03.710 --> 00:45:06.850
I like the ability to
declare variables anywhere.

00:45:07.060 --> 00:45:11.140
I know some people don't like that,
but I find it very handy.

00:45:11.290 --> 00:45:15.830
And when you're doing this,
your Objective-C++ controllers become

00:45:16.040 --> 00:45:18.500
these islands of information exchange.

00:45:18.560 --> 00:45:22.770
What I mean by that is if your core code,
if the model has some sort of

00:45:22.770 --> 00:45:25.620
notification that it needs to
send back to the user interface,

00:45:25.670 --> 00:45:30.340
it's going to have to make one of these
transitions from C++ to Objective-C.

00:45:30.370 --> 00:45:33.200
What it can do is sort of hop
off of one of your controllers,

00:45:33.340 --> 00:45:35.890
send it to your controller,
and your controller can rebroadcast the

00:45:35.890 --> 00:45:37.920
notification as an Objective-C message.

00:45:38.210 --> 00:45:39.480
Or you can go back the other way.

00:45:39.480 --> 00:45:42.640
If the user clicks on a
button in your user interface,

00:45:42.680 --> 00:45:44.830
that Objective-C message
will go to the controller,

00:45:44.830 --> 00:45:51.230
which is an Objective-C++,
and it in turn can call a C++ method.

00:45:51.350 --> 00:45:53.910
Finally,
using Objective-C++ is very easy,

00:45:53.980 --> 00:45:55.420
as Deric pointed out.

00:45:55.420 --> 00:45:58.680
We use .mm files for
all of our controllers,

00:45:58.710 --> 00:46:02.130
but occasionally we have to go in
and actually mark one of our C++

00:46:02.250 --> 00:46:05.440
files is needing Objective C++.

00:46:05.700 --> 00:49:28.300
[Transcript missing]

00:49:29.090 --> 00:49:31.140
So let's talk about Cocoa itself.

00:49:31.140 --> 00:49:35.470
Cocoa contains some really great
frameworks and this plays into the idea

00:49:35.530 --> 00:49:40.540
that Deric kept mentioning that it brings
a lot of functionality together for you,

00:49:40.540 --> 00:49:42.120
you know, for free.

00:49:42.120 --> 00:49:45.660
The user experience for us
came together very quickly.

00:49:45.720 --> 00:49:48.560
We didn't have to do a whole lot to,
you know,

00:49:48.560 --> 00:49:53.330
get standard buttons working and all
that kind of code wired up to our code.

00:49:53.350 --> 00:49:57.400
So you get lots of standard behavior
for free and another interesting

00:49:57.730 --> 00:50:01.450
thing to note is that we didn't
have to use all of Cocoa and Deric

00:50:01.450 --> 00:50:03.500
mentioned that Cocoa is not a box.

00:50:03.590 --> 00:50:04.770
It's not going to lock you in.

00:50:04.770 --> 00:50:08.030
As it turned out,
because we were using the C++ code to

00:50:08.030 --> 00:50:12.470
handle the commands to the data model,
the way that Cocoa handles

00:50:12.560 --> 00:50:16.880
undo and redo through the
Objective-C dynamic dispatching was

00:50:17.040 --> 00:50:18.840
sort of very inconvenient for us.

00:50:18.840 --> 00:50:22.000
So we simply, you know,
rerouted those menu items to our

00:50:22.000 --> 00:50:23.900
C++ code and went out from there.

00:50:23.900 --> 00:50:26.670
And as Deric mentioned,
Cocoa is actually really

00:50:26.670 --> 00:50:28.580
great as a prototyping tool.

00:50:29.080 --> 00:50:32.170
It allows you to wire together a
user interface quickly and your

00:50:32.180 --> 00:50:35.170
UI designers will really like that.

00:50:35.840 --> 00:50:39.130
So you can take the boy out of Carbon,
but you can't necessarily take

00:50:39.200 --> 00:50:40.420
the Carbon out of the boy.

00:50:40.420 --> 00:50:44.930
One effective strategy that
we used was to actually drop

00:50:44.930 --> 00:50:47.220
at certain levels in our code.

00:50:47.220 --> 00:50:50.550
We actually avoided a C++
to Objective-C transition

00:50:50.550 --> 00:50:52.540
where it wasn't necessary.

00:50:52.540 --> 00:50:56.250
So, for example,
we had the Windows-based file

00:50:56.250 --> 00:50:59.080
classes that we wanted to reproduce.

00:50:59.080 --> 00:51:02.440
And we wanted to sort of keep
some of the same behaviors there.

00:51:02.440 --> 00:51:06.560
So rather than calling back out to, say,
NSFileManager or NSFileHandle

00:51:06.560 --> 00:51:10.030
or something like that,
we just basically picked up the

00:51:10.050 --> 00:51:13.810
old Carbon File Manager routines,
which are actually, I think they're now

00:51:13.890 --> 00:51:16.660
part of core services,
and called those.

00:51:16.700 --> 00:51:19.940
Similarly,
when we were doing our graphics drawing,

00:51:19.940 --> 00:51:24.000
we'd get to a certain point in the
code and we wanted to have the exact

00:51:24.040 --> 00:51:29.020
same C++ code driving the rendering in
the same order so that things didn't

00:51:29.020 --> 00:51:31.840
look different between the Mac and
the Windows inside of documents.

00:51:32.440 --> 00:51:36.230
Rather than making a transition
back out to Cocoa and actually using

00:51:36.350 --> 00:51:39.510
NSBezierPath and those classes,
we actually jumped straight

00:51:39.510 --> 00:51:41.030
to the Quartz 2DC interfaces.

00:51:41.060 --> 00:51:45.010
We used Core Foundation an awful lot.

00:51:45.080 --> 00:51:49.270
And Core Foundation becomes this
really nice transport mechanism for

00:51:49.340 --> 00:51:54.110
moving information from the C++ side
to the Objective-C side because of the

00:51:54.320 --> 00:51:56.600
toll-free bridging that Derek mentioned.

00:51:56.600 --> 00:51:59.940
If we had some C++ code that
needed to return an array,

00:51:59.940 --> 00:52:02.260
we could just package it up in a CFArray.

00:52:02.440 --> 00:52:07.560
Pass it across the boundary and typecast
it to an NSArray and away you go.

00:52:09.610 --> 00:52:12.820
So let's talk a little bit about
getting started from my perspective.

00:52:12.820 --> 00:52:16.400
As Deric already mentioned,
the first thing is to realize that

00:52:16.410 --> 00:52:19.560
you already know a lot about Carbon,
about Cocoa development.

00:52:19.680 --> 00:52:21.480
You already know a lot about
Carbon development too.

00:52:21.680 --> 00:52:23.570
You know,
application bundles aren't going away

00:52:23.570 --> 00:52:25.380
and they're the same on either platform.

00:52:25.380 --> 00:52:30.820
Lots of application functionality is
down inside those core application

00:52:30.910 --> 00:52:33.820
services layer and you may already
be familiar with a lot of it.

00:52:34.370 --> 00:52:36.310
Aqua hasn't changed,
so all the work you put

00:52:36.310 --> 00:52:39.620
into user interface design,
you might have to redo the nib file,

00:52:39.620 --> 00:52:43.340
but you don't have to relay out your
controls and and all that kind of stuff.

00:52:43.340 --> 00:52:46.580
Capture the basics first.

00:52:46.630 --> 00:52:48.440
So start with some of
the simple tutorials.

00:52:48.440 --> 00:52:51.800
There's an awful lot of stuff
in Cocoa and Cocoa related.

00:52:51.800 --> 00:52:55.810
The key value coding,
the key value observing, bindings.

00:52:56.160 --> 00:52:59.390
These are very exciting technologies,
but you sort of have to get in the

00:52:59.490 --> 00:53:02.610
right mindset before you can really
pick them up and use them effectively.

00:53:02.640 --> 00:53:04.200
So start with some simple tutorials.

00:53:04.200 --> 00:53:07.700
And begin with a good
grounding in the basics.

00:53:07.700 --> 00:53:09.920
So some of the basics
you'll want to know.

00:53:09.920 --> 00:53:12.240
You'll want to know about some
of the idioms that Cocoa and

00:53:12.240 --> 00:53:14.870
Objective-C use because they're
patterns that are a little bit

00:53:14.870 --> 00:53:17.170
different than the way C++ does things.

00:53:17.180 --> 00:53:20.020
In particular,
these are just some examples.

00:53:20.020 --> 00:53:22.580
The object life cycle,
the way that objects are

00:53:22.580 --> 00:53:25.730
constructed and destroyed,
the way you get into the middle

00:53:25.730 --> 00:53:29.670
of that process and interject your
own code into the initializers is

00:53:29.670 --> 00:53:31.960
different in Cocoa and Objective-C.

00:53:31.960 --> 00:53:34.100
Mutable versus immutable.

00:53:34.100 --> 00:53:37.090
Mutable objects are used pervasively
throughout the Cocoa frameworks.

00:53:37.140 --> 00:53:39.380
You may already be familiar
with some of this from the core

00:53:39.380 --> 00:53:42.510
foundation work you've already done,
but it takes on a sort of a whole

00:53:42.510 --> 00:53:44.630
new meaning in the Cocoa world.

00:53:44.640 --> 00:53:48.880
Derek mentioned the delegation
instead of subclassing.

00:53:48.880 --> 00:53:52.980
One of the things that I always
like to point out to people is that

00:53:52.980 --> 00:53:57.880
once you've learned these things,
they don't exist in a vacuum.

00:53:57.880 --> 00:53:59.980
You're adding tools to your toolbox.

00:54:00.120 --> 00:54:03.450
I found places where I could take
something I learned from the Cocoa side

00:54:03.450 --> 00:54:05.980
of things and apply it in the C++ code.

00:54:06.080 --> 00:54:10.760
So, you know,
if you get really bogged down and, "Oh,

00:54:10.760 --> 00:54:13.940
I hate to have to learn this stuff,"
just realize that you're still learning.

00:54:14.020 --> 00:54:16.270
So that's always,
there's something to be said for that.

00:54:16.280 --> 00:54:20.640
As Derek mentioned, you can start using
Objective-C from your Carbon app.

00:54:20.640 --> 00:54:23.960
Core image is one of my
favorite tinker toys.

00:54:23.960 --> 00:54:26.940
I imagine that core animation
would be one if it was around

00:54:26.940 --> 00:54:28.840
before I started this slide.

00:54:28.840 --> 00:54:32.050
Those are examples of
Objective-C APIs you can make

00:54:32.220 --> 00:54:33.900
calls to from inside of Carbon.

00:54:33.900 --> 00:54:38.090
app, and Derek provided you
with some samples as well.

00:54:38.560 --> 00:54:42.960
One of the most interesting things about
Objective-C is this idea that you can

00:54:42.960 --> 00:54:47.230
send a message to any object at runtime,
and the object will decide whether or not

00:54:47.230 --> 00:54:49.460
it wants to actually handle that message.

00:54:49.460 --> 00:54:53.240
Much of the Cocoa magic is based on this,
and it does take a little

00:54:53.240 --> 00:54:56.690
while to get your brain around
to working in that mode.

00:54:56.700 --> 00:54:59.360
I have a little bullet point here.

00:54:59.360 --> 00:55:01.870
The implications of late
binding are pervasive,

00:55:01.870 --> 00:55:03.520
but not immediately obvious.

00:55:03.820 --> 00:55:05.820
The reason for this is that you'll find
that as you're going through your code,

00:55:05.820 --> 00:55:07.320
you'll run into this brick
wall and you're like,

00:55:07.360 --> 00:55:08.820
"How does this happen?

00:55:08.820 --> 00:55:14.740
How is this code getting invoked?"
Whenever you hit one of these roadblocks,

00:55:14.870 --> 00:55:18.070
look and see if there's some dynamic
method dispatching going on that

00:55:18.140 --> 00:55:19.620
you weren't previously aware of.

00:55:19.620 --> 00:55:23.560
If you hit a roadblock,
look for it to see if you can

00:55:23.560 --> 00:55:28.440
find out how to get around it
through the magic of Objective-C.

00:55:28.900 --> 00:57:25.800
[Transcript missing]

00:57:26.080 --> 00:57:28.990
So I wanted to end with a quote,
and this is a quote that

00:57:29.000 --> 00:57:30.650
one of our developers,
Jeff Lynch,

00:57:30.760 --> 00:57:32.380
heard when he was at the Big Nerd Ranch.

00:57:32.380 --> 00:57:34.960
And it's, when you find yourself
working with Cocoa,

00:57:34.980 --> 00:57:37.400
if you find that you're writing
a lot of code to implement

00:57:37.400 --> 00:57:40.180
some basic functionality,
you're probably doing it wrong.

00:57:40.200 --> 00:57:43.620
Now, it's kind of a flippant maxim,
but it was something that

00:57:43.620 --> 00:57:46.900
proved to be true for us
repeatedly in our development.

00:57:46.900 --> 00:57:49.570
We'd find we were writing a lot of code,
trying to get something done,

00:57:49.630 --> 00:57:52.170
and if we had just taken another
five minutes and stepped back and

00:57:52.170 --> 00:57:54.470
read some of the documentation,
we found that it was

00:57:54.470 --> 00:57:55.570
already there for us.

00:57:56.000 --> 00:57:58.640
So that's all I have,
and I'll turn it back over to

00:57:58.750 --> 00:58:00.550
Deric to help you wrap it up.

00:58:00.580 --> 00:58:02.500
Thanks, Scott.

00:58:06.020 --> 00:58:07.060
Here's my email address.

00:58:07.060 --> 00:58:09.000
You can all email me.

00:58:09.000 --> 00:58:11.250
In summary, a few things I'd like
you to take away is that,

00:58:11.340 --> 00:58:14.190
first,
you don't have to start from scratch.

00:58:14.520 --> 00:58:17.560
Objective-C and C++ play nicely together.

00:58:17.590 --> 00:58:19.380
The framework does a
whole lot of work for you,

00:58:19.470 --> 00:58:20.840
so you don't have to do it.

00:58:20.870 --> 00:58:22.380
And this stuff really is fun.

00:58:22.400 --> 00:58:23.840
Everybody that starts
writing Cocoa applications,

00:58:23.900 --> 00:58:27.680
you get a whole lot of
action with very little code.

00:58:28.350 --> 00:58:32.730
So with that, as Scott mentioned,
list.apple.com is a moderated

00:58:32.800 --> 00:58:35.300
list with over 4,000 members.

00:58:35.400 --> 00:58:37.870
If you want to go for the
entire Cocoa immersion,

00:58:37.870 --> 00:58:40.160
I highly recommend the Big Nerd Ranch.

00:58:40.160 --> 00:58:43.580
You spend a week out there
thinking nothing but Cocoa.

00:58:43.590 --> 00:58:47.440
Aaron Hilligast also has a book,
Cocoa Programming for Mac OS X.

00:58:47.440 --> 00:58:49.360
And there's also a website,
Cocoa Dev Central,

00:58:49.360 --> 00:58:50.880
which provides a whole lot of tutorials.

00:58:50.990 --> 00:58:52.800
So as you start to learn Cocoa,
you want to learn more

00:58:52.800 --> 00:58:54.870
about bindings or something,
go to Cocoa Dev Central,

00:58:54.870 --> 00:58:56.040
and they provide tutorials.